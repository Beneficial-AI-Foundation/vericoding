{
  "skeleton": "// CoPilot function converted to dafny\n//ATOM_PLACEHOLDER_largest_sum\n\n// Predicate to confirm that sum is the maximum summation of element [start, stop) \n//ATOM_PLACEHOLDER_max_sum_subarray\n\n\n//Sums array elements between [start, stop)\n//ATOM_PLACEHOLDER_Sum_Array\n\n\n\n\n\n\n\n\n\n",
  "atoms": {
    "largest_sum": [
      [
        "max_sum_subarray"
      ],
      "// SPEC \n// CoPilot function converted to dafny\nmethod largest_sum(nums: array<int>, k: int) returns (sum: int)\n    requires nums.Length > 0 \n    ensures max_sum_subarray(nums, sum, 0, nums.Length)\n{\n}\n",
      "method"
    ],
    "max_sum_subarray": [
      [
        "Sum_Array"
      ],
      "// ATOM \n\n// Predicate to confirm that sum is the maximum summation of element [start, stop) \npredicate max_sum_subarray(arr: array<int>, sum: int, start: int, stop: int)\n    requires arr.Length > 0\n    requires 0 <= start <= stop <= arr.Length\n    reads arr\n{\n    forall u, v :: start <= u < v <= stop ==> Sum_Array(arr, u, v) <= sum\n}\n",
      "predicate"
    ],
    "Sum_Array": [
      [],
      "// ATOM \n\n\n//Sums array elements between [start, stop)\nfunction Sum_Array(arr: array<int>, start: int, stop: int): int\n    requires 0 <= start <= stop <= arr.Length\n    reads arr\n{\n    if start >= stop then 0\n    else arr[stop-1] + Sum_Array(arr, start, stop-1)\n}\n",
      "function"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_largest_sum": "largest_sum",
    "//ATOM_PLACEHOLDER_max_sum_subarray": "max_sum_subarray",
    "//ATOM_PLACEHOLDER_Sum_Array": "Sum_Array"
  }
}