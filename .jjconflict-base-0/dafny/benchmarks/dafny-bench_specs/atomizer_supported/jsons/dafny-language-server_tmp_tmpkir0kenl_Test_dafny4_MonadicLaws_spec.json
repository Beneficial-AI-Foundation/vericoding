{
  "skeleton": "// RUN: %dafny /compile:0 /rprint:\"%t.rprint\" \"%s\" > \"%t\"\n// RUN: %diff \"%s.expect\" \"%t\"\n\n// Monadic Laws\n// Niki Vazou and Rustan Leino\n// 28 March 2016\n\n//ATOM_PLACEHOLDER_List//ATOM_PLACEHOLDER_append\n\n//ATOM_PLACEHOLDER_AppendNil\n\n//ATOM_PLACEHOLDER_AppendAssoc\n\n//ATOM_PLACEHOLDER_Return\n\n//ATOM_PLACEHOLDER_Bind\n\n//ATOM_PLACEHOLDER_LeftIdentity\n\n//ATOM_PLACEHOLDER_RightIdentity\n\n//ATOM_PLACEHOLDER_Associativity\n\n//ATOM_PLACEHOLDER_BindOverAppend\n\n\n\n",
  "atoms": {
    "List": [
      [],
      "// ATOM \n// RUN: %dafny /compile:0 /rprint:\"%t.rprint\" \"%s\" > \"%t\"\n// RUN: %diff \"%s.expect\" \"%t\"\n\n// Monadic Laws\n// Niki Vazou and Rustan Leino\n// 28 March 2016\n\ndatatype List<T> = Nil | Cons(head: T, tail: List)\n",
      "datatype"
    ],
    "append": [
      [],
      "// ATOM \n\nfunction append(xs: List, ys: List): List\n{\n  match xs\n  case Nil => ys\n  case Cons(x, xs') => Cons(x, append(xs', ys))\n}\n",
      "function"
    ],
    "AppendNil": [
      [
        "append"
      ],
      "// ATOM \n\nlemma AppendNil(xs: List)\n  ensures append(xs, Nil) == xs\n{\n}\n",
      "lemma"
    ],
    "AppendAssoc": [
      [
        "append"
      ],
      "// ATOM \n\nlemma AppendAssoc(xs: List, ys: List, zs: List)\n  ensures append(append(xs, ys), zs) == append(xs, append(ys, zs));\n{\n}\n",
      "lemma"
    ],
    "Return": [
      [],
      "// ATOM \n\nfunction Return<T>(a: T): List\n{\n  Cons(a, Nil)\n}\n",
      "function"
    ],
    "Bind": [
      [
        "append"
      ],
      "// ATOM \n\nfunction Bind<T,U>(xs: List<T>, f: T -> List<U>): List<U>\n{\n  match xs\n  case Nil => Nil\n  case Cons(x, xs') => append(f(x), Bind(xs', f))\n}\n",
      "function"
    ],
    "LeftIdentity": [
      [
        "Bind",
        "Return",
        "AppendNil"
      ],
      "// ATOM \n\nlemma LeftIdentity<T>(a: T, f: T -> List)\n  ensures Bind(Return(a), f) == f(a)\n{\n  AppendNil(f(a));\n}\n",
      "lemma"
    ],
    "RightIdentity": [
      [
        "append",
        "Bind",
        "Return"
      ],
      "// ATOM \n\nlemma RightIdentity<T>(m: List)\n  ensures Bind(m, Return) == m\n{\n  match m\n  case Nil =>\n  case Cons(x, m') =>\n    calc {\n      Bind(Cons(x, m'), Return);\n      append(Return(x), Bind(m', Return));\n      Cons(x, Bind(m', Return));\n    }\n}\n",
      "lemma"
    ],
    "Associativity": [
      [
        "append",
        "BindOverAppend",
        "Bind",
        "AppendAssoc"
      ],
      "// ATOM \n\nlemma Associativity<T>(m: List, f: T -> List, g: T -> List)\n  ensures Bind(Bind(m, f), g) == Bind(m, x => Bind(f(x), g))\n{\n  match m\n  case Nil =>\n  case Cons(x, xs) =>\n    match f(x)\n    case Nil =>\n      calc {\n        Bind(xs, y => Bind(f(y), g));\n        Bind(Cons(x, xs), y => Bind(f(y), g));\n      }\n    case Cons(y, ys) =>\n      calc {\n        append(g(y), Bind(append(ys, Bind(xs, f)), g));\n        { BindOverAppend(ys, Bind(xs, f), g); }\n        append(g(y), append(Bind(ys, g), Bind(Bind(xs, f), g)));\n        { AppendAssoc(g(y), Bind(ys, g), Bind(Bind(xs, f), g)); }\n        append(append(g(y), Bind(ys, g)), Bind(Bind(xs, f), g));\n        Bind(Cons(x, xs), z => Bind(f(z), g));\n      }\n}\n",
      "lemma"
    ],
    "BindOverAppend": [
      [
        "append",
        "Bind",
        "AppendAssoc"
      ],
      "// ATOM \n\nlemma BindOverAppend<T>(xs: List, ys: List, g: T -> List)\n  ensures Bind(append(xs, ys), g) == append(Bind(xs, g), Bind(ys, g))\n{\n  match xs\n  case Nil =>\n  case Cons(x, xs') =>\n    AppendAssoc(g(x), Bind(xs', g), Bind(ys, g));\n}\n",
      "lemma"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_List": "List",
    "//ATOM_PLACEHOLDER_append": "append",
    "//ATOM_PLACEHOLDER_AppendNil": "AppendNil",
    "//ATOM_PLACEHOLDER_AppendAssoc": "AppendAssoc",
    "//ATOM_PLACEHOLDER_Return": "Return",
    "//ATOM_PLACEHOLDER_Bind": "Bind",
    "//ATOM_PLACEHOLDER_LeftIdentity": "LeftIdentity",
    "//ATOM_PLACEHOLDER_RightIdentity": "RightIdentity",
    "//ATOM_PLACEHOLDER_Associativity": "Associativity",
    "//ATOM_PLACEHOLDER_BindOverAppend": "BindOverAppend"
  }
}