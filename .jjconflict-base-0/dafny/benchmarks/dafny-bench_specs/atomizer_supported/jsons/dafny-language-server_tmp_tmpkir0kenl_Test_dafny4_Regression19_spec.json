{
  "skeleton": "// RUN: %dafny \"%s\" > \"%t\"\n// RUN: %diff \"%s.expect\" \"%t\"\n\n//ATOM_PLACEHOLDER_ContainsNothingBut5\n\n//ATOM_PLACEHOLDER_YeahContains5\n\n//ATOM_PLACEHOLDER_ViaSetComprehension\n\n//ATOM_PLACEHOLDER_LambdaTest\n\n//ATOM_PLACEHOLDER_ViaMapComprehension\n\n//ATOM_PLACEHOLDER_Contains5\n\n//ATOM_PLACEHOLDER_R//ATOM_PLACEHOLDER_RIs5\n\n//ATOM_PLACEHOLDER_NonemptySet\n//ATOM_PLACEHOLDER_NonemptyMap\n\n//ATOM_PLACEHOLDER_M && r == MakeR(5)\n{\n\n  NonemptySet(5, set q | q in s && q == 5);\n\n  NonemptyMap(5, map q | q in s && q == 5 :: true);\n\n\n}\n\n && r == MakeR(5)\n{\n\n  NonemptySet(5, set q | q in s && q == 5);\n\n  NonemptyMap(5, map q | q in s && q == 5 :: true);\n\n\n}\n\n",
  "atoms": {
    "ContainsNothingBut5": [
      [],
      "// ATOM \n// RUN: %dafny \"%s\" > \"%t\"\n// RUN: %diff \"%s.expect\" \"%t\"\n\npredicate ContainsNothingBut5(s: set<int>)\n{\n  forall q :: q in s ==> q == 5\n}\n",
      "predicate"
    ],
    "YeahContains5": [
      [],
      "// ATOM \n\npredicate YeahContains5(s: set<int>)\n{\n  exists q :: q in s && q == 5\n}\n",
      "predicate"
    ],
    "ViaSetComprehension": [
      [],
      "// ATOM \n\npredicate ViaSetComprehension(s: set<int>) {\n  |set q | q in s && q == 5| != 0\n}\n",
      "predicate"
    ],
    "LambdaTest": [
      [],
      "// ATOM \n\npredicate LambdaTest(s: set<int>) {\n  (q => q in s)(5)\n}\n",
      "predicate"
    ],
    "ViaMapComprehension": [
      [],
      "// ATOM \n\npredicate ViaMapComprehension(s: set<int>) {\n  |(map q | q in s && q == 5 :: true).Keys| != 0\n}\n",
      "predicate"
    ],
    "Contains5": [
      [],
      "// ATOM \n\npredicate Contains5(s: set<int>)\n{\n  var q := 5; q in s\n}\n",
      "predicate"
    ],
    "R": [
      [],
      "// ATOM \n\ndatatype R = MakeR(int) | Other\n",
      "datatype"
    ],
    "RIs5": [
      [],
      "// ATOM \n\npredicate RIs5(r: R) {\n  match r case MakeR(q) => q == 5 case Other => false\n}\n",
      "predicate"
    ],
    "NonemptySet": [
      [],
      "// ATOM \n\nlemma NonemptySet(x: int, s: set<int>)\n  requires x in s\n  ensures |s| != 0\n{\n}\n",
      "lemma"
    ],
    "NonemptyMap": [
      [],
      "// ATOM \nlemma NonemptyMap(x: int, s: map<int,bool>)\n  requires x in s.Keys\n  ensures |s| != 0\n{\n}\n",
      "lemma"
    ],
    "M": [
      [],
      "// SPEC \n\nmethod M(s: set<int>, r: R, q: int)\n  requires s == {\n}\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_ContainsNothingBut5": "ContainsNothingBut5",
    "//ATOM_PLACEHOLDER_YeahContains5": "YeahContains5",
    "//ATOM_PLACEHOLDER_ViaSetComprehension": "ViaSetComprehension",
    "//ATOM_PLACEHOLDER_LambdaTest": "LambdaTest",
    "//ATOM_PLACEHOLDER_ViaMapComprehension": "ViaMapComprehension",
    "//ATOM_PLACEHOLDER_Contains5": "Contains5",
    "//ATOM_PLACEHOLDER_R": "R",
    "//ATOM_PLACEHOLDER_RIs5": "RIs5",
    "//ATOM_PLACEHOLDER_NonemptySet": "NonemptySet",
    "//ATOM_PLACEHOLDER_NonemptyMap": "NonemptyMap",
    "//ATOM_PLACEHOLDER_M": "M"
  }
}