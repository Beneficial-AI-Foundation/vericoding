{
  "skeleton": "\n//ATOM_PLACEHOLDER_positive\n\n//ATOM_PLACEHOLDER_isEven\n\n//ATOM_PLACEHOLDER_CountEven\n\n//ATOM_PLACEHOLDER_ArrayFacts\n\n//ATOM_PLACEHOLDER_mcountEven\n\n\n\n\n\n\n\n",
  "atoms": {
    "positive": [
      [],
      "// ATOM \n\npredicate positive(s:seq<int>)\n{forall u::0<=u<|s| ==> s[u]>=0}\n",
      "predicate"
    ],
    "isEven": [
      [],
      "// ATOM \n\npredicate isEven(i:int)\nrequires i>=0\n{i%2==0}\n",
      "predicate"
    ],
    "CountEven": [
      [
        "positive"
      ],
      "// ATOM \n\nfunction CountEven(s:seq<int>):int\nrequires positive(s)\n{if s==[] then 0\n else (if (s[|s|-1]%2==0) then 1 else 0)+CountEven(s[..|s|-1])\n }\n",
      "function"
    ],
    "ArrayFacts": [
      [],
      "// ATOM \n\nlemma ArrayFacts<T>()\n\tensures forall v : array<T>  :: v[..v.Length] == v[..];\n\tensures forall v : array<T>  :: v[0..] == v[..];\n    ensures forall v : array<T>  :: v[0..v.Length] == v[..];\n\n\tensures forall v : array<T>  ::|v[0..v.Length]|==v.Length;\n    ensures forall v : array<T> | v.Length>=1 ::|v[1..v.Length]|==v.Length-1;\n    \n\tensures forall v : array<T>  ::forall k : nat | k < v.Length :: v[..k+1][..k] == v[..k]\n  {}\n",
      "lemma"
    ],
    "mcountEven": [
      [
        "positive",
        "CountEven"
      ],
      "// SPEC \n\nmethod mcountEven(v:array<int>) returns (n:int)\nrequires positive(v[..])\nensures  n==CountEven(v[..])\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_positive": "positive",
    "//ATOM_PLACEHOLDER_isEven": "isEven",
    "//ATOM_PLACEHOLDER_CountEven": "CountEven",
    "//ATOM_PLACEHOLDER_ArrayFacts": "ArrayFacts",
    "//ATOM_PLACEHOLDER_mcountEven": "mcountEven"
  }
}