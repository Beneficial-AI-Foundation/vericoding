{
  "skeleton": "//ATOM_PLACEHOLDER_verifyNeg\n\n//ATOM_PLACEHOLDER_CountNeg\n\n//ATOM_PLACEHOLDER_Main\n\n\n\n",
  "atoms": {
    "verifyNeg": [
      [],
      "// ATOM \nfunction verifyNeg(a: array<int>, idx: int) : nat\nreads a\nrequires 0 <= idx <= a.Length\n{\n\tif idx == 0 then 0 \n\telse verifyNeg(a, idx - 1) + (if a[idx - 1] < 0 then 1 else 0)\n}\n",
      "function"
    ],
    "CountNeg": [
      [
        "verifyNeg"
      ],
      "// SPEC \n\nmethod CountNeg(a: array<int>) returns (cnt: nat) \nensures cnt == verifyNeg(a, a.Length)\n{\n}\n",
      "method"
    ],
    "Main": [
      [
        "CountNeg"
      ],
      "// SPEC \n\nmethod Main()\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_verifyNeg": "verifyNeg",
    "//ATOM_PLACEHOLDER_CountNeg": "CountNeg",
    "//ATOM_PLACEHOLDER_Main": "Main"
  }
}