{
  "skeleton": "// Rearranges the elements in an array 'a' of natural numbers,\n// so that all odd numbers appear before all even numbers.\n//ATOM_PLACEHOLDER_partitionOddEven\n \n//ATOM_PLACEHOLDER_odd\n//ATOM_PLACEHOLDER_even\n\n//ATOM_PLACEHOLDER_testPartitionOddEven\n\n\n\n",
  "atoms": {
    "partitionOddEven": [
      [
        "even",
        "odd"
      ],
      "// SPEC \n// Rearranges the elements in an array 'a' of natural numbers,\n// so that all odd numbers appear before all even numbers.\nmethod partitionOddEven(a: array<nat>) \n  modifies a\n  ensures multiset(a[..]) == multiset(old(a[..]))\n  ensures ! exists i, j :: 0 <= i < j < a.Length && even(a[i]) && odd(a[j])  \n{\n}\n",
      "method"
    ],
    "odd": [
      [],
      "// ATOM \n \npredicate  odd(n: nat) { n % 2 == 1 }\n",
      "predicate"
    ],
    "even": [
      [],
      "// ATOM \npredicate  even(n: nat) { n % 2 == 0 }\n",
      "predicate"
    ],
    "testPartitionOddEven": [
      [
        "partitionOddEven"
      ],
      "// SPEC \n\nmethod testPartitionOddEven() {\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_partitionOddEven": "partitionOddEven",
    "//ATOM_PLACEHOLDER_odd": "odd",
    "//ATOM_PLACEHOLDER_even": "even",
    "//ATOM_PLACEHOLDER_testPartitionOddEven": "testPartitionOddEven"
  }
}