{
  "skeleton": "//ATOM_PLACEHOLDER_add_by_inc\n\n//ATOM_PLACEHOLDER_Product\n\n//ATOM_PLACEHOLDER_gcdCalc\n\n//ATOM_PLACEHOLDER_gcd\n\n//ATOM_PLACEHOLDER_exp_by_sqr\n\n//ATOM_PLACEHOLDER_exp\n\n// method add_by_inc_vc(x: int, y:int) returns (z:int)\n// {\n//     assume x>=0 && y>=0;\n//     z := x;\n//     var i := 0;\n//     assert 0 <= i <= y && z == x + i;\n//     z,i = *,*;\n//     assume 0 <= i <= y && z == x + i;\n//     if (i < y) \n//     {\n//         ghost var rank0 := y-i\n//         z := z+1;\n//         i := i+1; \n//         assert(y-i < rank0)\n//         ghost var rank1 := y-i\n//         assert(rank1 < rank0)\n//         assert(rank1 >=0)\n//         assert 0 <= i <= y && z == x + i;\n//         assume(false);\n//     }\n//     assert (z == x+y);\n//     assert (i == y);\n//     return z;\n// }\n\n\n\n\n// method add_by_inc_vc(x: int, y:int) returns (z:int)\n// {\n//     assume x>=0 && y>=0;\n//     z := x;\n//     var i := 0;\n//     assert 0 <= i <= y && z == x + i;\n//     z,i = *,*;\n//     assume 0 <= i <= y && z == x + i;\n//     if (i < y) \n//     {\n//         ghost var rank0 := y-i\n//         z := z+1;\n//         i := i+1; \n//         assert(y-i < rank0)\n//         ghost var rank1 := y-i\n//         assert(rank1 < rank0)\n//         assert(rank1 >=0)\n//         assert 0 <= i <= y && z == x + i;\n//         assume(false);\n//     }\n//     assert (z == x+y);\n//     assert (i == y);\n//     return z;\n// }\n\n\n",
  "atoms": {
    "add_by_inc": [
      [],
      "// SPEC \nmethod add_by_inc(x: nat, y:nat) returns (z:nat)\nensures z == x+y;\n{\n}\n",
      "method"
    ],
    "Product": [
      [],
      "// SPEC \n\nmethod Product(m: nat, n:nat) returns (res:nat)\nensures res == m*n;\n{\n}\n",
      "method"
    ],
    "gcdCalc": [
      [
        "gcd"
      ],
      "// SPEC \n\nmethod gcdCalc(m: nat, n: nat) returns (res: nat)\nrequires m>0 && n>0;\nensures res == gcd(m,n);\n{\n}\n",
      "method"
    ],
    "gcd": [
      [],
      "// ATOM \n\nfunction gcd(m: nat, n: nat) : nat\nrequires m>0 && n>0;\n{\n    if(m==n) then n \n    else if( m > n) then gcd(m-n,n)\n    else gcd(m, n-m)\n}\n",
      "function"
    ],
    "exp_by_sqr": [
      [
        "exp"
      ],
      "// SPEC \n\nmethod exp_by_sqr(x0: real, n0: nat) returns (r:real)\nrequires x0 >= 0.0;\nensures r == exp(x0, n0);\n{\n}\n",
      "method"
    ],
    "exp": [
      [],
      "// ATOM \n\nfunction exp(x: real, n: nat) :real\n{\n    if(n == 0) then 1.0\n    else if (x==0.0) then 0.0\n    else if (n  ==0 && x == 0.0) then 1.0\n    else x*exp(x, n-1)\n}\n",
      "function"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_add_by_inc": "add_by_inc",
    "//ATOM_PLACEHOLDER_Product": "Product",
    "//ATOM_PLACEHOLDER_gcdCalc": "gcdCalc",
    "//ATOM_PLACEHOLDER_gcd": "gcd",
    "//ATOM_PLACEHOLDER_exp_by_sqr": "exp_by_sqr",
    "//ATOM_PLACEHOLDER_exp": "exp"
  }
}