{
  "skeleton": "//ATOM_PLACEHOLDER_max\n\n//ATOM_PLACEHOLDER_post_max\n\n// to check if it is functioning: postcondition not too accommodating\n// the case it will refuse\n//ATOM_PLACEHOLDER_post_max_point_1\n\n// an equivalent way of doing so\n//ATOM_PLACEHOLDER_post_max_point_1'\n\n//ATOM_PLACEHOLDER_post_max_point_2\n\n//ATOM_PLACEHOLDER_post_max_point_3\n\n//ATOM_PLACEHOLDER_post_max_vertical_1\n\n//ATOM_PLACEHOLDER_post_max_vertical_1'\n\n// to check if it is implementable\n//ATOM_PLACEHOLDER_post_max_realistic_1\n\n//ATOM_PLACEHOLDER_post_max_realistic_2\n\n//ATOM_PLACEHOLDER_post_max_realistic_3\n\n\n// this form is more natural\n//ATOM_PLACEHOLDER_max_deterministic\n\n//ATOM_PLACEHOLDER_max_deterministic'\n\n\n\n//ATOM_PLACEHOLDER_lemmaInvTheProposerOfAnyValidBlockInAnHonestBlockchailnIsInTheSetOfValidatorsHelper6Helper\n\n//ATOM_PLACEHOLDER_multisetEquality\n\n\n\n",
  "atoms": {
    "max": [
      [],
      "// ATOM \nlemma max(a:int, b:int) returns (m:int)\n    ensures m >= a\n    ensures m >= b\n    ensures m == a || m == b\n{\n    if (a > b) {\n        m := a;\n    } else {\n        m := b;\n    }\n}\n",
      "lemma"
    ],
    "post_max": [
      [],
      "// ATOM \n\npredicate post_max(a:int, b:int, m:int)\n{\n    && m >= a\n    && m >= b\n    && (m == a || m == b)\n}\n",
      "predicate"
    ],
    "post_max_point_1": [
      [
        "post_max"
      ],
      "// ATOM \n\n// an equivalent way of doing so\nlemma post_max_point_1'(a:int, b:int, m:int)\n    requires a > b\n    requires post_max(a, b, m)\n    ensures m == a\n{}\n",
      "lemma"
    ],
    "post_max_point_2": [
      [
        "post_max"
      ],
      "// ATOM \n\nlemma post_max_point_2(a:int, b:int, m:int)\n    requires a == b\n    requires m != a || m != b\n    ensures !post_max(a, b, m)\n{}\n",
      "lemma"
    ],
    "post_max_point_3": [
      [
        "post_max"
      ],
      "// ATOM \n\nlemma post_max_point_3(a:int, b:int, m:int)\n    requires a < b\n    requires m != b\n    ensures !post_max(a, b, m)\n{}\n",
      "lemma"
    ],
    "post_max_vertical_1": [
      [
        "post_max"
      ],
      "// ATOM \n\nlemma post_max_vertical_1'(a:int, b:int, m:int)\n    requires post_max(a, b, m)\n    ensures m == a || m == b\n{}\n",
      "lemma"
    ],
    "post_max_realistic_1": [
      [
        "post_max"
      ],
      "// ATOM \n\n// to check if it is implementable\nlemma post_max_realistic_1(a:int, b:int, m:int)\n    requires a > b\n    requires m == a\n    ensures post_max(a, b, m)\n{}\n",
      "lemma"
    ],
    "post_max_realistic_2": [
      [
        "post_max"
      ],
      "// ATOM \n\nlemma post_max_realistic_2(a:int, b:int, m:int)\n    requires a < b\n    requires m == b\n    ensures post_max(a, b, m)\n{}\n",
      "lemma"
    ],
    "post_max_realistic_3": [
      [
        "post_max"
      ],
      "// ATOM \n\nlemma post_max_realistic_3(a:int, b:int, m:int)\n    requires a == b\n    requires m == a\n    ensures post_max(a, b, m)\n{}\n",
      "lemma"
    ],
    "max_deterministic": [
      [
        "post_max"
      ],
      "// ATOM \n\nlemma max_deterministic'(a:int, b:int, m:int, m':int)\n    requires m != m'\n    ensures !post_max(a, b, m) || !post_max(a, b, m')\n{}\n",
      "lemma"
    ],
    "lemmaInvTheProposerOfAnyValidBlockInAnHonestBlockchailnIsInTheSetOfValidatorsHelper6Helper": [
      [],
      "// ATOM \n\n\n\nlemma lemmaInvTheProposerOfAnyValidBlockInAnHonestBlockchailnIsInTheSetOfValidatorsHelper6Helper<T>(\n        s: seq<int>,\n        b: int,\n        i: nat\n    )\n    requires |s| > i \n    requires b == s[i]\n    ensures s[..i] + [b] == s[..i+1]\n    {  }\n",
      "lemma"
    ],
    "multisetEquality": [
      [],
      "// ATOM \n\nlemma multisetEquality(m1:multiset<int>, m2:multiset<int>, m3:multiset<int>, m4:multiset<int>)\n   requires m1 > m2 + m3\n   requires m1 == m2 + m4\n   ensures m3 < m4\n{\n}\n",
      "lemma"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_max": "max",
    "//ATOM_PLACEHOLDER_post_max": "post_max",
    "//ATOM_PLACEHOLDER_post_max_point_1": "post_max_point_1",
    "//ATOM_PLACEHOLDER_post_max_point_1'": "post_max_point_1'",
    "//ATOM_PLACEHOLDER_post_max_point_2": "post_max_point_2",
    "//ATOM_PLACEHOLDER_post_max_point_3": "post_max_point_3",
    "//ATOM_PLACEHOLDER_post_max_vertical_1": "post_max_vertical_1",
    "//ATOM_PLACEHOLDER_post_max_vertical_1'": "post_max_vertical_1'",
    "//ATOM_PLACEHOLDER_post_max_realistic_1": "post_max_realistic_1",
    "//ATOM_PLACEHOLDER_post_max_realistic_2": "post_max_realistic_2",
    "//ATOM_PLACEHOLDER_post_max_realistic_3": "post_max_realistic_3",
    "//ATOM_PLACEHOLDER_max_deterministic": "max_deterministic",
    "//ATOM_PLACEHOLDER_max_deterministic'": "max_deterministic'",
    "//ATOM_PLACEHOLDER_lemmaInvTheProposerOfAnyValidBlockInAnHonestBlockchailnIsInTheSetOfValidatorsHelper6Helper": "lemmaInvTheProposerOfAnyValidBlockInAnHonestBlockchailnIsInTheSetOfValidatorsHelper6Helper",
    "//ATOM_PLACEHOLDER_multisetEquality": "multisetEquality"
  }
}