{
  "skeleton": "/**\n * Filter odd numbers from an array of numbers\n **/\n\n//ATOM_PLACEHOLDER_IsOdd\n\n//ATOM_PLACEHOLDER_FilterOddNumbers",
  "atoms": {
    "IsOdd": [
      [],
      "// ATOM \n\npredicate IsOdd(n: int)\n{\n    n % 2 != 0\n}\n",
      "predicate"
    ],
    "FilterOddNumbers": [
      [
        "IsOdd"
      ],
      "// SPEC \n\nmethod FilterOddNumbers(arr: array<int>) returns (oddList: seq<int>)\n    // All numbers in the output are odd and exist in the input \n    ensures forall i :: 0 <= i < |oddList| ==> IsOdd(oddList[i]) && oddList[i] in arr[..]\n    // All odd numbers in the input are in the output\n    ensures forall i :: 0 <= i < arr.Length && IsOdd(arr[i]) ==> arr[i] in oddList\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_IsOdd": "IsOdd",
    "//ATOM_PLACEHOLDER_FilterOddNumbers": "FilterOddNumbers"
  }
}