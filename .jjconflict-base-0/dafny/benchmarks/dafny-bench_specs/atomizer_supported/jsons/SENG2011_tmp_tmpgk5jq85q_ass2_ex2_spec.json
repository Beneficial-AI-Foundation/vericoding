{
  "skeleton": "// verifies\n// check that string between indexes low and high-1 are sorted\n//ATOM_PLACEHOLDER_Sorted\n\n//ATOM_PLACEHOLDER_String3Sort == multiset{a[0], a[1], a[2]};\n\n{\n    b := a;\n    if (b[0] > b[1]) {\n        b := b[0 := b[1]][1 := b[0]];\n    }\n    if (b[1] > b[2]) {\n        b := b[1 := b[2]][2 := b[1]];\n    }\n    if (b[0] > b[1]) {\n        b := b[0 := b[1]][1 := b[0]];\n    }\n}\n\n//ATOM_PLACEHOLDER_check\n\n",
  "atoms": {
    "Sorted": [
      [],
      "// ATOM \n// verifies\n// check that string between indexes low and high-1 are sorted\npredicate Sorted(a: string, low:int, high:int)\nrequires 0 <= low <= high <= |a|\n{ \n    forall j, k :: low <= j < k < high ==> a[j] <= a[k] \n}\n",
      "predicate"
    ],
    "String3Sort": [
      [
        "Sorted"
      ],
      "// SPEC \n\nmethod String3Sort(a: string) returns (b: string) \nrequires |a| == 3;\nensures Sorted(b, 0, |b|);\nensures |a| == |b|;\nensures multiset{\n}\n\n{\n}\n",
      "method"
    ],
    "check": [
      [
        "String3Sort"
      ],
      "// SPEC \n\nmethod check() {\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_Sorted": "Sorted",
    "//ATOM_PLACEHOLDER_String3Sort": "String3Sort",
    "//ATOM_PLACEHOLDER_check": "check"
  }
}