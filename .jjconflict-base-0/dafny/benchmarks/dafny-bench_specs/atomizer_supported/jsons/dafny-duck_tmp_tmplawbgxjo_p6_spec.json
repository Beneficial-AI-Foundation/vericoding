{
  "skeleton": "//Given an array of characters, it filters all the vowels. [\u2018d\u2019,\u2019e\u2019,\u2019l\u2019,\u2019i\u2019,\u2019g\u2019,\u2019h\u2019,\u2019t\u2019]-> [\u2019e\u2019,\u2019i\u2019]\nconst vowels: set<char> := {'a', 'e', 'i', 'o', 'u'}\n\n//ATOM_PLACEHOLDER_FilterVowels\n\n//ATOM_PLACEHOLDER_FilterVowelsArray\n\n",
  "atoms": {
    "FilterVowels": [
      [],
      "// ATOM \n//Given an array of characters, it filters all the vowels. [\u2018d\u2019,\u2019e\u2019,\u2019l\u2019,\u2019i\u2019,\u2019g\u2019,\u2019h\u2019,\u2019t\u2019]-> [\u2019e\u2019,\u2019i\u2019]\n\nfunction FilterVowels(xs: seq<char>): seq<char>\n{\n    if |xs| == 0 then []\n    else if xs[|xs|-1] in vowels then FilterVowels(xs[..|xs|-1]) + [xs[|xs|-1]]\n    else FilterVowels(xs[..|xs|-1])\n}\n",
      "function"
    ],
    "FilterVowelsArray": [
      [
        "FilterVowels"
      ],
      "// SPEC \n\nmethod FilterVowelsArray(xs: array<char>) returns (ys: array<char>)\n    ensures fresh(ys)\n    ensures FilterVowels(xs[..]) == ys[..]\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_FilterVowels": "FilterVowels",
    "//ATOM_PLACEHOLDER_FilterVowelsArray": "FilterVowelsArray"
  }
}