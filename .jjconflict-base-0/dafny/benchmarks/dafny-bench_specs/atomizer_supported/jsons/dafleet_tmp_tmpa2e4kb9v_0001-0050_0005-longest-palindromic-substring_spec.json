{
  "skeleton": "/* https://leetcode.com/problems/longest-palindromic-substring/\nGiven a string s, return the longest palindromic substring in s.\n\nExample 1:\nInput: s = \"babad\"\nOutput: \"bab\"\nExplanation: \"aba\" is also a valid answer.\n*/\n\n\n// Specifying the problem: whether `s[i..j]` is palindromic\n//ATOM_PLACEHOLDER_palindromic\n\n// A \"common sense\" about palindromes:\n//ATOM_PLACEHOLDER_lemma_palindromic_contains\n\n// A useful \"helper function\" that returns the longest palindrome at a given center (i0, j0).\n//ATOM_PLACEHOLDER_expand_from_center\n\n\n// The main algorithm.\n// We traverse all centers from left to right, and \"expand\" each of them, to find the longest palindrome.\n//ATOM_PLACEHOLDER_longestPalindrome\n\n\n/* Discussions\n1. Dafny is super bad at slicing (esp. nested slicing).\n  Do circumvent it whenever possible. It can save you a lot of assertions & lemmas!\n\n  For example, instead of `palindromic(s[i..j])`, use the pattern `palindromic(s, i, j)` instead.\n  I didn't realize this (ref: https://github.com/Nangos/dafleet/commit/3302ddd7642240ff2b2f6a8c51e8becd5c9b6437),\n  Resulting in a couple of clumsy lemmas.\n\n2. Bonus -- Manacher's algorithm\n  Our above solution needs `O(|s|^2)` time in the worst case. Can we improve it? Yes.\n\n  Manacher's algorithm guarantees an `O(|s|)` time.\n  To get the intuition, ask yourself: when will it really take `O(|s|^2)` time?\n  When there are a lot of \"nesting and overlapping\" palindromes. like in `abcbcbcba` or even `aaaaaa`.\n\n  Imagine each palindrome as a \"mirror\". \"Large mirrors\" reflect \"small mirrors\".\n  Therefore, when we \"expand\" from some \"center\", we can \"reuse\" some information from its \"mirrored center\".\n  For example, we move the \"center\", from left to right, in the string `aiaOaia...`\n  Here, the char `O` is the \"large mirror\".\n  When the current center is the second `i`, it is \"mirrored\" to the first `i` (which we've calculated for),\n  so we know the palindrome centered at the second `i` must have at least a length of 3 (`aia`).\n  So we can expand directly from `aia`, instead of expanding from scratch.\n\n  Manacher's algorithm is verified below.\n  Also, I will verify that \"every loop is entered for only `O(|s|)` times\",\n  which \"indirectly\" proves that the entire algorithm runs in `O(|s|)` time.\n*/\n\n\n// A reference implementation of Manacher's algorithm:\n// (Ref. https://en.wikipedia.org/wiki/Longest_palindromic_substring#Manacher's_algorithm) for details...\n//ATOM_PLACEHOLDER_unknown_4272 longestPalindrome'(s: string) returns (ans: string, lo: int, hi: int)\n  ensures 0 <= lo <= hi <= |s| && ans == s[lo..hi]\n  ensures palindromic(s, lo, hi)\n  ensures forall i, j | 0 <= i <= j <= |s| && palindromic(s, i, j) :: j - i <= hi - lo\n{\n  var bogus: char :| true;  // an arbitrary character\n  var s' := insert_bogus_chars(s, bogus);\n  var radii := new int[|s'|];\n  var center, radius := 0, 0;\n  // vars below are just for verifying time complexity:\n  ghost var loop_counter_outer, loop_counter_inner1, loop_counter_inner2 := 0, 0, 0;\n\n  while center < |s'|\n  {\n    loop_counter_outer := loop_counter_outer + 1;\n\n    // Stage 1: Still the normal \"expand from center\" routine, except `radius` is NOT necessarily zero:\n    while center - (radius + 1) >= 0 && center + (radius + 1) < |s'|\n        && s'[center - (radius + 1)] == s'[center + (radius + 1)]\n    {\n      loop_counter_inner1 := loop_counter_inner1 + 1;\n      radius := radius + 1;\n    }\n    lemma_end_of_expansion(s', center, radius);\n\n    radii[center] := radius;\n    var old_center, old_radius := center, radius;\n    center := center + 1;\n    radius := 0;\n\n    // Stage 2: Quickly infer the maximal radius, using the symmetry of known palindromes. \n    while center <= old_center + old_radius\n    {\n      loop_counter_inner2 := loop_counter_inner2 + 1;\n\n      var mirrored_center := old_center - (center - old_center);\n      var max_mirrored_radius := old_center + old_radius - center;\n      lemma_mirrored_palindrome(s', old_center, old_radius, mirrored_center, radii[mirrored_center], center);\n\n      if radii[mirrored_center] < max_mirrored_radius {\n        radii[center] := radii[mirrored_center];\n        center := center + 1;\n      } else if radii[mirrored_center] > max_mirrored_radius {\n        radii[center] := max_mirrored_radius;\n        center := center + 1;\n      } else {\n        radius := max_mirrored_radius;\n        break;\n      }\n    }\n  }\n  // verify that the worst time complexity (measured by loop iterations) is O(|s'|) == O(|s|):\n\n  // wrap up results:\n  var (c, r) := argmax(radii, 0);\n  lo, hi := (c - r) / 2, (c + r) / 2; // notice that both ends are bogus chars at position 0, 2, 4, 6, etc.!\n  lemma_result_transfer(s, s', bogus, radii, c, r, hi, lo);\n  return s[lo..hi], lo, hi;        \n}\n\n\n// Below are helper functions and lemmas we used:\n\n// Inserts bogus characters to the original string (e.g. from `abc` to `|a|b|c|`).\n// Note that this is neither efficient nor necessary in reality, but just for the ease of understanding.\n//ATOM_PLACEHOLDER_unknown_6832 insert_bogus_chars(s: string, bogus: char): (s': string)\n  ensures |s'| == 2 * |s| + 1\n  ensures forall i | 0 <= i <= |s| :: s'[i * 2] == bogus\n  ensures forall i | 0 <= i < |s| :: s'[i * 2 + 1] == s[i]\n{\n  if s == \"\" then\n    [bogus]\n  else\n    var s'_old := insert_bogus_chars(s[1..], bogus);\n    var s'_new := [bogus] + [s[0]] + s'_old;\n    s'_new\n}\n\n// Returns (max_index, max_value) of array `a` starting from index `start`.\n//ATOM_PLACEHOLDER_unknown_7281 argmax(a: array<int>, start: int): (res: (int, int))\n  reads a\n  requires 0 <= start < a.Length\n  ensures start <= res.0 < a.Length && a[res.0] == res.1\n  ensures forall i | start <= i < a.Length :: a[i] <= res.1\n{\n  if start == a.Length - 1 then\n    (start, a[start])\n  else\n    var (i, v) := argmax(a, start + 1);\n    if a[start] >= v then (start, a[start]) else (i, v)\n}\n\n// Whether an interval at center `c` with a radius `r` is within the boundary of `s'`.\n//ATOM_PLACEHOLDER_inbound_radius\n\n// Whether `r` is a valid palindromic radius at center `c`.\n//ATOM_PLACEHOLDER_palindromic_radius\n\n// Whether `r` is the maximal palindromic radius at center `c`.\n//ATOM_PLACEHOLDER_max_radius\n\n// Basically, just \"rephrasing\" the `lemma_palindromic_contains`,\n// talking about center and radius, instead of interval\n//ATOM_PLACEHOLDER_lemma_palindromic_radius_contains\n\n// When \"expand from center\" ends, we've find the max radius:\n//ATOM_PLACEHOLDER_lemma_end_of_expansion\n\n// The critical insight behind Manacher's algorithm.\n//\n// Given the longest palindrome centered at `c` has length `r`, consider the interval from `c-r` to `c+r`.\n// Consider a pair of centers in the interval: `c1` (left half) and `c2` (right half), equally away from `c`.\n// Then, the length of longest palindromes at `c1` and `c2` are related as follows:\n//ATOM_PLACEHOLDER_lemma_mirrored_palindrome\n//, where:\n//ATOM_PLACEHOLDER_abs\n\n// Transfering our final result on `s'` to that on `s`:\n//ATOM_PLACEHOLDER_lemma_result_transfer\n\n// The following returns whether `s[lo..hi]` is the longest palindrome s.t. `lo + hi == k`:\n//ATOM_PLACEHOLDER_max_interval_for_same_center\n\n// Establishes the \"palindromic isomorphism\" between `s` and `s'`.\n//ATOM_PLACEHOLDER_lemma_palindrome_isomorph\n\n// Implies that whenever `c + r` is odd, the corresponding palindrome can be \"lengthened for free\"\n// because its both ends are the bogus char.\n//ATOM_PLACEHOLDER_lemma_palindrome_bogus\n\n\n\n",
  "atoms": {
    "palindromic": [
      [],
      "// ATOM \n\n\n\n// Specifying the problem: whether `s[i..j]` is palindromic\nghost predicate palindromic(s: string, i: int, j: int)\n  requires 0 <= i <= j <= |s|\n{\n  j - i < 2 || (s[i] == s[j-1] && palindromic(s, i+1, j-1))\n}\n",
      "ghost predicate"
    ],
    "lemma_palindromic_contains": [
      [
        "palindromic"
      ],
      "// ATOM \n\n// A \"common sense\" about palindromes:\nlemma lemma_palindromic_contains(s: string, lo: int, hi: int, lo': int, hi': int)\n  requires 0 <= lo <= lo' <= hi' <= hi <= |s|\n  requires lo + hi == lo' + hi'\n  requires palindromic(s, lo, hi)\n  ensures palindromic(s, lo', hi')\n{\n  if lo < lo' {\n    lemma_palindromic_contains(s, lo + 1, hi - 1, lo', hi');\n  }\n}\n",
      "lemma"
    ],
    "expand_from_center": [
      [
        "palindromic",
        "lemma_palindromic_contains"
      ],
      "// SPEC \n\n// A useful \"helper function\" that returns the longest palindrome at a given center (i0, j0).\nmethod expand_from_center(s: string, i0: int, j0: int) returns (lo: int, hi: int)\n  requires 0 <= i0 <= j0 <= |s|\n  requires palindromic(s, i0, j0)\n  ensures 0 <= lo <= hi <= |s| && palindromic(s, lo, hi)\n  ensures forall i, j | 0 <= i <= j <= |s| && palindromic(s, i, j)  // Among all palindromes\n    && i + j == i0 + j0                                             // sharing the same center,\n    :: j - i <= hi - lo                                             // `s[lo..hi]` is longest.\n{\n}\n",
      "method"
    ],
    "longestPalindrome": [
      [
        "palindromic",
        "expand_from_center"
      ],
      "// SPEC \n\n\n// The main algorithm.\n// We traverse all centers from left to right, and \"expand\" each of them, to find the longest palindrome.\nmethod longestPalindrome(s: string) returns (ans: string, lo: int, hi: int)\n  ensures 0 <= lo <= hi <= |s| && ans == s[lo..hi]  // `ans` is indeed a substring in `s`\n  ensures palindromic(s, lo, hi)  // `ans` is palindromic\n  ensures forall i, j | 0 <= i <= j <= |s| && palindromic(s, i, j) :: j - i <= hi - lo  // `ans` is longest\n{\n}\n\n\n/* Discussions\n1. Dafny is super bad at slicing (esp. nested slicing).\n  Do circumvent it whenever possible. It can save you a lot of assertions & lemmas!\n\n  For example, instead of `palindromic(s[i..j])`, use the pattern `palindromic(s, i, j)` instead.\n  I didn't realize this (ref: https://github.com/Nangos/dafleet/commit/3302ddd7642240ff2b2f6a8c51e8becd5c9b6437),\n  Resulting in a couple of clumsy lemmas.\n\n2. Bonus -- Manacher's algorithm\n  Our above solution needs `O(|s|^2)` time in the worst case. Can we improve it? Yes.\n\n  Manacher's algorithm guarantees an `O(|s|)` time.\n  To get the intuition, ask yourself: when will it really take `O(|s|^2)` time?\n  When there are a lot of \"nesting and overlapping\" palindromes. like in `abcbcbcba` or even `aaaaaa`.\n\n  Imagine each palindrome as a \"mirror\". \"Large mirrors\" reflect \"small mirrors\".\n  Therefore, when we \"expand\" from some \"center\", we can \"reuse\" some information from its \"mirrored center\".\n  For example, we move the \"center\", from left to right, in the string `aiaOaia...`\n  Here, the char `O` is the \"large mirror\".\n  When the current center is the second `i`, it is \"mirrored\" to the first `i` (which we've calculated for),\n  so we know the palindrome centered at the second `i` must have at least a length of 3 (`aia`).\n  So we can expand directly from `aia`, instead of expanding from scratch.\n\n  Manacher's algorithm is verified below.\n  Also, I will verify that \"every loop is entered for only `O(|s|)` times\",\n  which \"indirectly\" proves that the entire algorithm runs in `O(|s|)` time.\n*/\n",
      "method"
    ],
    "": [
      [],
      "// ATOM \n\n// Returns (max_index, max_value) of array `a` starting from index `start`.\nfunction {:opaque} argmax(a: array<int>, start: int): (res: (int, int))\n  reads a\n  requires 0 <= start < a.Length\n  ensures start <= res.0 < a.Length && a[res.0] == res.1\n  ensures forall i | start <= i < a.Length :: a[i] <= res.1\n{\n  if start == a.Length - 1 then\n    (start, a[start])\n  else\n    var (i, v) := argmax(a, start + 1);\n    if a[start] >= v then (start, a[start]) else (i, v)\n}\n",
      "function"
    ],
    "inbound_radius": [
      [],
      "// ATOM \n\n// Whether an interval at center `c` with a radius `r` is within the boundary of `s'`.\nghost predicate inbound_radius(s': string, c: int, r: int)\n{\n  r >= 0 && 0 <= c-r && c+r < |s'|\n}\n",
      "ghost predicate"
    ],
    "palindromic_radius": [
      [
        "palindromic",
        "inbound_radius"
      ],
      "// ATOM \n\n// Whether `r` is a valid palindromic radius at center `c`.\nghost predicate palindromic_radius(s': string, c: int, r: int)\n  requires inbound_radius(s', c, r)\n{\n  palindromic(s', c-r, c+r+1)\n}\n",
      "ghost predicate"
    ],
    "max_radius": [
      [
        "palindromic_radius",
        "inbound_radius"
      ],
      "// ATOM \n\n// Whether `r` is the maximal palindromic radius at center `c`.\nghost predicate max_radius(s': string, c: int, r: int)\n{\n  && inbound_radius(s', c, r)\n  && palindromic_radius(s', c, r)\n  && (forall r' | r' > r && inbound_radius(s', c, r') :: !palindromic_radius(s', c, r'))\n}\n",
      "ghost predicate"
    ],
    "lemma_palindromic_radius_contains": [
      [
        "palindromic_radius",
        "lemma_palindromic_contains",
        "inbound_radius"
      ],
      "// ATOM \n\n// Basically, just \"rephrasing\" the `lemma_palindromic_contains`,\n// talking about center and radius, instead of interval\nlemma lemma_palindromic_radius_contains(s': string, c: int, r: int, r': int)\n  requires inbound_radius(s', c, r) && palindromic_radius(s', c, r)\n  requires 0 <= r' <= r\n  ensures inbound_radius(s', c, r') && palindromic_radius(s', c, r')\n{\n  lemma_palindromic_contains(s', c-r, c+r+1, c-r', c+r'+1);\n}\n",
      "lemma"
    ],
    "lemma_end_of_expansion": [
      [
        "lemma_palindromic_radius_contains",
        "max_radius",
        "palindromic_radius",
        "inbound_radius"
      ],
      "// ATOM \n\n// When \"expand from center\" ends, we've find the max radius:\nlemma lemma_end_of_expansion(s': string, c: int, r: int)\n  requires inbound_radius(s', c, r) && palindromic_radius(s', c, r)\n  requires inbound_radius(s', c, r + 1) ==> s'[c - (r + 1)] != s'[c + (r + 1)]\n  ensures max_radius(s', c, r)\n{\n  forall r' | r' > r && inbound_radius(s', c, r') ensures !palindromic_radius(s', c, r') {\n    if palindromic_radius(s', c, r') {  // proof by contradiction\n      lemma_palindromic_radius_contains(s', c, r', r+1);\n    }\n  }\n}\n",
      "lemma"
    ],
    "lemma_mirrored_palindrome": [
      [
        "max_radius",
        "palindromic_radius",
        "lemma_end_of_expansion",
        "inbound_radius"
      ],
      "// ATOM \n\n// The critical insight behind Manacher's algorithm.\n//\n// Given the longest palindrome centered at `c` has length `r`, consider the interval from `c-r` to `c+r`.\n// Consider a pair of centers in the interval: `c1` (left half) and `c2` (right half), equally away from `c`.\n// Then, the length of longest palindromes at `c1` and `c2` are related as follows:\nlemma lemma_mirrored_palindrome(s': string, c: int, r: int, c1: int, r1: int, c2: int)\n  requires max_radius(s', c, r) && max_radius(s', c1, r1)\n  requires c - r <= c1 < c < c2 <= c + r\n  requires c2 - c == c - c1\n  ensures c2 + r1 < c + r ==> max_radius(s', c2, r1)\n  ensures c2 + r1 > c + r ==> max_radius(s', c2, c + r - c2)\n  ensures c2 + r1 == c + r ==> palindromic_radius(s', c2, c + r - c2)\n{\n  // proof looks long, but is quite straightforward at each step:\n  if c2 + r1 < c + r {\n    for r2 := 0 to r1\n    {\n      var r2' := r2 + 1;\n    }\n    var r2' := r1 + 1;\n    lemma_end_of_expansion(s', c2, r1);\n  } else {\n    for r2 := 0 to c + r - c2\n    {\n      var r2' := r2 + 1;\n    }\n    if c2 + r1 > c + r {\n      var r2' := (c + r - c2) + 1;\n      if inbound_radius(s', c, r + 1) {\n        lemma_end_of_expansion(s', c2, c + r - c2);\n      }\n    }\n  }\n}\n",
      "lemma"
    ],
    "abs": [
      [],
      "// ATOM \n//, where:\nghost function abs(x: int): int {\n  if x >= 0 then x else -x\n}\n",
      "ghost function"
    ],
    "lemma_result_transfer": [
      [
        "max_interval_for_same_center",
        "palindromic",
        "max_radius",
        "lemma_palindrome_bogus",
        "lemma_palindrome_isomorph"
      ],
      "// ATOM \n\n// Transfering our final result on `s'` to that on `s`:\nlemma lemma_result_transfer(s: string, s': string, bogus: char, radii: array<int>, c: int, r: int, hi: int, lo: int)\n  requires s' == insert_bogus_chars(s, bogus)\n  requires radii.Length == |s'|\n  requires forall i | 0 <= i < radii.Length :: max_radius(s', i, radii[i])\n  requires (c, r) == argmax(radii, 0)\n  requires lo == (c - r) / 2 && hi == (c + r) / 2\n  ensures 0 <= lo <= hi <= |s|\n  ensures palindromic(s, lo, hi)\n  ensures forall i, j | 0 <= i <= j <= |s| && palindromic(s, i, j) :: j - i <= hi - lo\n{\n  // For each center, rephrase [maximal radius in `s'`] into [maximal interval in `s`]:\n  forall k | 0 <= k < radii.Length\n  ensures max_interval_for_same_center(s, k, (k - radii[k]) / 2, (k + radii[k]) / 2) {\n    // We need to show `k` and `radii[k]` are either \"both odd\" or \"both even\". We prove by contradiction:\n    if (k + radii[k]) % 2 == 1 {\n      lemma_palindrome_bogus(s, s', bogus, k, radii[k]);\n    }\n    // We then relate `s` and `s'` using their \"isomorphism\":\n    var lo, hi := (k - radii[k]) / 2, (k + radii[k]) / 2;\n    lemma_palindrome_isomorph(s, s', bogus, lo, hi);\n    forall i, j | 0 <= i <= j <= |s| && i + j == k && j - i > radii[k] ensures !palindromic(s, i, j) {\n      lemma_palindrome_isomorph(s, s', bogus, i, j);\n    }\n  }\n\n  // We then iteratively build the last post-condition: \n  for k := 0 to radii.Length - 1\n  {\n    forall i, j | 0 <= i <= j <= |s| && palindromic(s, i, j) && i + j == k + 1 ensures j - i <= hi - lo {\n      var k := k + 1;\n    }\n  }\n}\n",
      "lemma"
    ],
    "max_interval_for_same_center": [
      [
        "palindromic"
      ],
      "// ATOM \n\n// The following returns whether `s[lo..hi]` is the longest palindrome s.t. `lo + hi == k`:\nghost predicate max_interval_for_same_center(s: string, k: int, lo: int, hi: int) {\n  && 0 <= lo <= hi <= |s|\n  && lo + hi == k\n  && palindromic(s, lo, hi)\n  && (forall i, j | 0 <= i <= j <= |s| && palindromic(s, i, j) && i + j == k :: j - i <= hi - lo)\n}\n",
      "ghost predicate"
    ],
    "lemma_palindrome_isomorph": [
      [
        "palindromic",
        "lemma_palindrome_bogus",
        "palindromic_radius"
      ],
      "// ATOM \n\n// Establishes the \"palindromic isomorphism\" between `s` and `s'`.\nlemma lemma_palindrome_isomorph(s: string, s': string, bogus: char, lo: int, hi: int)\n  requires s' == insert_bogus_chars(s, bogus)\n  requires 0 <= lo <= hi <= |s| \n  ensures palindromic(s, lo, hi) <==> palindromic_radius(s', lo + hi, hi - lo)\n{\n  if palindromic(s, lo, hi) {  // ==>\n    for r := 0 to hi - lo\n    {\n      if (lo + hi - r) % 2 == 1 {\n        lemma_palindrome_bogus(s, s', bogus, lo + hi, r);\n      } else {  \n        var i', j' := lo + hi - (r + 1), lo + hi + (r + 1);\n        var i, j := i' / 2, j' / 2;\n        // Notice that `s'[i'] == s[i] && s'[j'] == s[j]`; apparently Dafny does\n      }\n    }\n  }\n  if palindromic_radius(s', lo + hi, hi - lo) {  // <==\n    var lo', hi' := lo, hi;\n    while lo' + 1 <= hi' - 1\n    {\n      lo', hi' := lo' + 1, hi' - 1;\n    }\n  }\n}\n",
      "lemma"
    ],
    "lemma_palindrome_bogus": [
      [
        "palindromic_radius",
        "inbound_radius"
      ],
      "// ATOM \n\n// Implies that whenever `c + r` is odd, the corresponding palindrome can be \"lengthened for free\"\n// because its both ends are the bogus char.\nlemma lemma_palindrome_bogus(s: string, s': string, bogus: char, c: int, r: int)\n  requires s' == insert_bogus_chars(s, bogus)\n  requires inbound_radius(s', c, r) && palindromic_radius(s', c, r)\n  requires (c + r) % 2 == 1\n  ensures inbound_radius(s', c, r + 1) && palindromic_radius(s', c, r + 1)\n{\n  var left, right := c - (r + 1), c + (r + 1);\n}\n",
      "lemma"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_palindromic": "palindromic",
    "//ATOM_PLACEHOLDER_lemma_palindromic_contains": "lemma_palindromic_contains",
    "//ATOM_PLACEHOLDER_expand_from_center": "expand_from_center",
    "//ATOM_PLACEHOLDER_longestPalindrome": "longestPalindrome",
    "//ATOM_PLACEHOLDER_unknown_4272": "unknown_4272",
    "//ATOM_PLACEHOLDER_unknown_6832": "unknown_6832",
    "//ATOM_PLACEHOLDER_unknown_7281": "unknown_7281",
    "//ATOM_PLACEHOLDER_inbound_radius": "inbound_radius",
    "//ATOM_PLACEHOLDER_palindromic_radius": "palindromic_radius",
    "//ATOM_PLACEHOLDER_max_radius": "max_radius",
    "//ATOM_PLACEHOLDER_lemma_palindromic_radius_contains": "lemma_palindromic_radius_contains",
    "//ATOM_PLACEHOLDER_lemma_end_of_expansion": "lemma_end_of_expansion",
    "//ATOM_PLACEHOLDER_lemma_mirrored_palindrome": "lemma_mirrored_palindrome",
    "//ATOM_PLACEHOLDER_abs": "abs",
    "//ATOM_PLACEHOLDER_lemma_result_transfer": "lemma_result_transfer",
    "//ATOM_PLACEHOLDER_max_interval_for_same_center": "max_interval_for_same_center",
    "//ATOM_PLACEHOLDER_lemma_palindrome_isomorph": "lemma_palindrome_isomorph",
    "//ATOM_PLACEHOLDER_lemma_palindrome_bogus": "lemma_palindrome_bogus"
  }
}