{
  "skeleton": "// Dafny is designed to be familiar to those programming in an OOP language like\n// Java, so, we have plain old ordinary mutable arrays rather than the functional\n// list data structures that we saw in Coq.  This means that unlike our Coq\n// and Python examples, we can sort our array in-place and avoid needing a whole\n// bunch of intermediary allocations.\n\n// Just as before, we need a way of defining what it means for an array of nats\n// to be sorted:\n//ATOM_PLACEHOLDER_sorted\n\n//ATOM_PLACEHOLDER_Isort\n\n\n\n",
  "atoms": {
    "sorted": [
      [],
      "// ATOM \n// Dafny is designed to be familiar to those programming in an OOP language like\n// Java, so, we have plain old ordinary mutable arrays rather than the functional\n// list data structures that we saw in Coq.  This means that unlike our Coq\n// and Python examples, we can sort our array in-place and avoid needing a whole\n// bunch of intermediary allocations.\n\n// Just as before, we need a way of defining what it means for an array of nats\n// to be sorted:\npredicate sorted(a: seq<nat>)\n{\n    true // TODO\n}\n",
      "predicate"
    ],
    "Isort": [
      [
        "sorted"
      ],
      "// SPEC \n\nmethod Isort(a: array<nat>)\n    modifies a\n    ensures sorted(a[..])\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_sorted": "sorted",
    "//ATOM_PLACEHOLDER_Isort": "Isort"
  }
}