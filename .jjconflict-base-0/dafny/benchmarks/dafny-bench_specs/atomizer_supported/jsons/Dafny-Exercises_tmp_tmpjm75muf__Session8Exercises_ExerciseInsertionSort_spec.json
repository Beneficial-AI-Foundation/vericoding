{
  "skeleton": "\n//ATOM_PLACEHOLDER_sorted_seg\n\n//ATOM_PLACEHOLDER_InsertionSort\n\n\n\n\n\n\n\n\n\n\n\n",
  "atoms": {
    "sorted_seg": [
      [],
      "// ATOM \n\npredicate sorted_seg(a:array<int>, i:int, j:int) //i and j included\nrequires 0 <= i <= j+1 <= a.Length\nreads a\n{\n    forall l, k :: i <= l <= k <= j ==> a[l] <= a[k]\n}\n",
      "predicate"
    ],
    "InsertionSort": [
      [
        "sorted_seg"
      ],
      "// SPEC \n\nmethod InsertionSort(a: array<int>)\n  modifies a;\n  ensures sorted_seg(a,0,a.Length-1) \n  ensures multiset(a[..]) == old(multiset(a[..])) //Add and prove this\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_sorted_seg": "sorted_seg",
    "//ATOM_PLACEHOLDER_InsertionSort": "InsertionSort"
  }
}