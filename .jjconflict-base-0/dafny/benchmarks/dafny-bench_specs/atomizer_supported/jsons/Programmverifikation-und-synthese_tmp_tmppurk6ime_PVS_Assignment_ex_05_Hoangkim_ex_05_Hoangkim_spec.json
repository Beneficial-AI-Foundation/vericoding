{
  "skeleton": "\n//Problem01\n//ATOM_PLACEHOLDER_fib\n\n//ATOM_PLACEHOLDER_fibIter\n//# 2 pts\n\n//Problem02\n//ATOM_PLACEHOLDER_fact\n\n//ATOM_PLACEHOLDER_factIter \n//# 3 pts\n//Problem03\n//ATOM_PLACEHOLDER_gcd\n\n//ATOM_PLACEHOLDER_gcdI\n//# 3 pts\n\n\n// # sum: 9 pts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# 3 pts\n\n\n// # sum: 9 pts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "atoms": {
    "fib": [
      [],
      "// ATOM \n\n//Problem01\nfunction fib(n: nat):nat\n{\n    if n < 2 then n else fib(n-2)+fib(n-1)\n}\n",
      "function"
    ],
    "fibIter": [
      [
        "fib"
      ],
      "// SPEC \n\nmethod fibIter(n:nat) returns (a:nat)\nrequires n > 0\nensures a == fib(n)\n{\n}\n",
      "method"
    ],
    "fact": [
      [],
      "// ATOM \n//# 2 pts\n\n//Problem02\nfunction fact(n:nat):nat\n{if n==0 then 1 else n*fact(n-1)}\n",
      "function"
    ],
    "factIter": [
      [
        "fact"
      ],
      "// SPEC \n\nmethod factIter(n:nat) returns (a:nat)\nrequires n >= 0;\nensures a == fact(n)\n{\n}\n",
      "method"
    ],
    "gcd": [
      [],
      "// ATOM \n//# 3 pts\n//Problem03\nfunction gcd(m: nat, n: nat): nat\n    requires m > 0 && n > 0\n{\n    if m == n then m\n    else if m > n then gcd(m - n, n)\n    else gcd(m, n - m)\n}\n",
      "function"
    ],
    "gcdI": [
      [
        "gcd"
      ],
      "// SPEC \n\nmethod gcdI(m: int, n: int) returns (g: int)\n    requires  m > 0 && n > 0 \n    ensures g == gcd(m, n);\n    {\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_fib": "fib",
    "//ATOM_PLACEHOLDER_fibIter": "fibIter",
    "//ATOM_PLACEHOLDER_fact": "fact",
    "//ATOM_PLACEHOLDER_factIter": "factIter",
    "//ATOM_PLACEHOLDER_gcd": "gcd",
    "//ATOM_PLACEHOLDER_gcdI": "gcdI"
  }
}