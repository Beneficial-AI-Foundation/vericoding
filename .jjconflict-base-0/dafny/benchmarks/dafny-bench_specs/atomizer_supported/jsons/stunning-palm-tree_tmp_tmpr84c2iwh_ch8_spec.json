{
  "skeleton": "// Ch. 8: Sorting\n\n//ATOM_PLACEHOLDER_List//ATOM_PLACEHOLDER_Length\n\n//ATOM_PLACEHOLDER_At\n\n//ATOM_PLACEHOLDER_Ordered\n\n//ATOM_PLACEHOLDER_AllOrdered\n\n// Ex. 8.0 generalize fron int to T by: T(==)\n//ATOM_PLACEHOLDER_Count\n\n//ATOM_PLACEHOLDER_Project\n\n// Ex 8.1\n//ATOM_PLACEHOLDER_unknown_1200 CountProject<T(==)>(xs: List<T>, ys: List<T>, p: T)\n  requires Project(xs, p) == Project(ys, p)\n  ensures Count(xs, p) == Count(ys, p)\n{\n    match xs\n    case Nil => {\n        match ys\n        case Nil => {}\n        case Cons(yhd, ytl) => {\n            CountProject(xs, ytl, p);\n        }\n    }\n    case Cons(xhd, xtl) => {\n        match ys\n        case Nil => {\n            CountProject(xtl, ys, p);\n        }\n        case Cons(yhd, ytl) => {\n            if xhd == p && yhd == p {\n                CountProject(xtl, ytl, p);\n            } else if xhd != p && yhd == p {\n                CountProject(xtl, ys, p);\n            } else if xhd == p && yhd != p {\n                CountProject(xs, ytl, p);\n            } else {\n                CountProject(xtl, ytl, p);\n            }\n        }\n    }\n}\n\n//ATOM_PLACEHOLDER_InsertionSort\n\n//ATOM_PLACEHOLDER_Insert\n\n//ATOM_PLACEHOLDER_InsertionSortOrdered\n\n//ATOM_PLACEHOLDER_InsertOrdered\n\n//ATOM_PLACEHOLDER_InsertionSortSameElements\n\n//ATOM_PLACEHOLDER_InsertSameElements\n\n",
  "atoms": {
    "List": [
      [],
      "// ATOM \n// Ch. 8: Sorting\n\ndatatype List<T> = Nil | Cons(head: T, tail: List<T>)\n",
      "datatype"
    ],
    "Length": [
      [],
      "// ATOM \n\nfunction Length<T>(xs: List<T>): int\n  ensures Length(xs) >= 0\n{\n    match xs\n    case Nil => 0\n    case Cons(_, tl) => 1 + Length(tl)\n}\n",
      "function"
    ],
    "At": [
      [
        "Length"
      ],
      "// ATOM \n\nfunction At<T>(xs: List, i: nat): T\n  requires i < Length(xs)\n{\n    if i == 0 then xs.head else At(xs.tail, i - 1)\n}\n",
      "function"
    ],
    "Ordered": [
      [],
      "// ATOM \n\nghost predicate Ordered(xs: List<int>) {\n    match xs\n    case Nil => true\n    case Cons(_, Nil) => true\n    case Cons(hd0, Cons(hd1, _)) => (hd0 <= hd1) && Ordered(xs.tail)\n}\n",
      "ghost predicate"
    ],
    "AllOrdered": [
      [
        "Length",
        "At",
        "Ordered"
      ],
      "// ATOM \n\nlemma AllOrdered(xs: List<int>, i: nat, j: nat)\n  requires Ordered(xs) && i <= j < Length(xs)\n  ensures At(xs, i) <= At(xs, j)\n{\n    if i != 0 {\n        AllOrdered(xs.tail, i - 1, j - 1);\n    } else if i == j {\n    } else {\n        AllOrdered(xs.tail, 0, j - 1);\n    }\n}\n",
      "lemma"
    ],
    "Count": [
      [],
      "// ATOM \n\n// Ex. 8.0 generalize fron int to T by: T(==)\nghost function Count<T(==)>(xs: List<T>, p: T): int\n  ensures Count(xs, p) >= 0\n{\n    match xs\n    case Nil => 0\n    case Cons(hd, tl) => (if hd == p then 1 else 0) + Count(tl, p)\n}\n",
      "ghost function"
    ],
    "Project": [
      [],
      "// ATOM \n\nghost function Project<T(==)>(xs: List<T>, p: T): List<T> {\n    match xs\n    case Nil => Nil\n    case Cons(hd, tl) => if hd == p then Cons(hd, Project(tl, p)) else Project(tl, p)\n}\n",
      "ghost function"
    ],
    "": [
      [],
      "// ATOM \n\n// Ex 8.1\nlemma {:induction false} CountProject<T(==)>(xs: List<T>, ys: List<T>, p: T)\n  requires Project(xs, p) == Project(ys, p)\n  ensures Count(xs, p) == Count(ys, p)\n{\n    match xs\n    case Nil => {\n        match ys\n        case Nil => {}\n        case Cons(yhd, ytl) => {\n            CountProject(xs, ytl, p);\n        }\n    }\n    case Cons(xhd, xtl) => {\n        match ys\n        case Nil => {\n            CountProject(xtl, ys, p);\n        }\n        case Cons(yhd, ytl) => {\n            if xhd == p && yhd == p {\n                CountProject(xtl, ytl, p);\n            } else if xhd != p && yhd == p {\n                CountProject(xtl, ys, p);\n            } else if xhd == p && yhd != p {\n                CountProject(xs, ytl, p);\n            } else {\n                CountProject(xtl, ytl, p);\n            }\n        }\n    }\n}\n",
      "lemma"
    ],
    "InsertionSort": [
      [
        "Insert"
      ],
      "// ATOM \n\nfunction InsertionSort(xs: List<int>): List<int>\n{\n    match xs\n    case Nil => Nil\n    case Cons(x, rest) => Insert(x, InsertionSort(rest))\n}\n",
      "function"
    ],
    "Insert": [
      [],
      "// ATOM \n\nfunction Insert(x: int, xs: List<int>): List<int>\n{\n    match xs\n    case Nil => Cons(x, Nil)\n    case Cons(hd, tl) => if x < hd then Cons(x, xs) else Cons(hd, Insert(x, tl))\n}\n",
      "function"
    ],
    "InsertionSortOrdered": [
      [
        "Ordered",
        "InsertOrdered",
        "InsertionSort"
      ],
      "// ATOM \n\nlemma InsertionSortOrdered(xs: List<int>)\n  ensures Ordered(InsertionSort(xs))\n{\n    match xs\n    case Nil =>\n    case Cons(hd, tl) => {\n        InsertionSortOrdered(tl);\n        InsertOrdered(hd, InsertionSort(tl));\n    }\n}\n",
      "lemma"
    ],
    "InsertOrdered": [
      [
        "Ordered",
        "Insert"
      ],
      "// ATOM \n\nlemma InsertOrdered(y: int, xs: List<int>)\n  requires Ordered(xs)\n  ensures Ordered(Insert(y, xs))\n{\n    match xs\n    case Nil =>\n    case Cons(hd, tl) => {\n        if y < hd {\n        } else {\n            InsertOrdered(y, tl);\n        }\n    }\n}\n",
      "lemma"
    ],
    "InsertionSortSameElements": [
      [
        "Project",
        "InsertSameElements",
        "InsertionSort"
      ],
      "// ATOM \n\nlemma InsertionSortSameElements(xs: List<int>, p: int)\n  ensures Project(xs, p) == Project(InsertionSort(xs), p)\n{\n    match xs\n    case Nil =>\n    case Cons(hd, tl) => {\n        InsertSameElements(hd, InsertionSort(tl), p);\n    }\n}\n",
      "lemma"
    ],
    "InsertSameElements": [
      [
        "Insert",
        "Project"
      ],
      "// ATOM \n\nlemma InsertSameElements(y: int, xs: List<int>, p: int)\n  ensures Project(Cons(y, xs), p) == Project(Insert(y, xs), p)\n{}\n",
      "lemma"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_List": "List",
    "//ATOM_PLACEHOLDER_Length": "Length",
    "//ATOM_PLACEHOLDER_At": "At",
    "//ATOM_PLACEHOLDER_Ordered": "Ordered",
    "//ATOM_PLACEHOLDER_AllOrdered": "AllOrdered",
    "//ATOM_PLACEHOLDER_Count": "Count",
    "//ATOM_PLACEHOLDER_Project": "Project",
    "//ATOM_PLACEHOLDER_unknown_1200": "unknown_1200",
    "//ATOM_PLACEHOLDER_InsertionSort": "InsertionSort",
    "//ATOM_PLACEHOLDER_Insert": "Insert",
    "//ATOM_PLACEHOLDER_InsertionSortOrdered": "InsertionSortOrdered",
    "//ATOM_PLACEHOLDER_InsertOrdered": "InsertOrdered",
    "//ATOM_PLACEHOLDER_InsertionSortSameElements": "InsertionSortSameElements",
    "//ATOM_PLACEHOLDER_InsertSameElements": "InsertSameElements"
  }
}