{
  "skeleton": "//ATOM_PLACEHOLDER_SkippingLemma\n//ATOM_PLACEHOLDER_FindZero\n\n\n\n",
  "atoms": {
    "SkippingLemma": [
      [],
      "// ATOM \nlemma SkippingLemma(a : array<int>, j : int)\n   requires a != null\n   requires forall i :: 0 <= i < a.Length ==> 0 <= a[i]\n   requires forall i :: 0 < i < a.Length ==> a[i-1]-1 <= a[i]\n   requires 0 <= j < a.Length\n   ensures forall k :: j <= k < j + a[j] && k < a.Length ==> a[k] != 0\n{\n   var i := j;\n   while i < j + a[j] && i < a.Length\n   {\n      i := i + 1;\n   }\n}\n",
      "lemma"
    ],
    "FindZero": [
      [
        "SkippingLemma"
      ],
      "// SPEC \nmethod FindZero(a: array<int>) returns (index: int)\n   requires a != null\n   requires forall i :: 0 <= i < a.Length ==> 0 <= a[i]\n   requires forall i :: 0 < i < a.Length ==> a[i-1]-1 <= a[i]\n   ensures index < 0  ==> forall i :: 0 <= i < a.Length ==> a[i] != 0\n   ensures 0 <= index ==> index < a.Length && a[index] == 0\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_SkippingLemma": "SkippingLemma",
    "//ATOM_PLACEHOLDER_FindZero": "FindZero"
  }
}