{
  "skeleton": "\n\n\n//ATOM_PLACEHOLDER_strictSorted\n\n\n//ATOM_PLACEHOLDER_mcontained\n\n\n\n\n\n",
  "atoms": {
    "strictSorted": [
      [],
      "// ATOM \n\n\n\npredicate strictSorted(s : seq<int>) {\n\tforall u, w :: 0 <= u < w < |s| ==> s[u] < s[w]\n}\n",
      "predicate"
    ],
    "mcontained": [
      [
        "strictSorted"
      ],
      "// SPEC \n\n\nmethod mcontained(v:array<int>,w:array<int>,n:int,m:int) returns (b:bool)\n//Specify and implement an O(m+n) algorithm that returns b\n//v and w are strictly increasing ordered arrays\n//b is true iff the first n elements of v are contained in the first m elements of w\nrequires n<=m && n>=0\nrequires strictSorted(v[..])\nrequires strictSorted(w[..])\nrequires v.Length >= n && w.Length >= m\nensures b==forall k:: 0<= k< n ==> v[k] in w[..m]//exists j :: 0 <= j < m && v[k] == w[j]\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_strictSorted": "strictSorted",
    "//ATOM_PLACEHOLDER_mcontained": "mcontained"
  }
}