{
  "skeleton": "//ATOM_PLACEHOLDER_torneo && q in {i, j, k} && r in {i, j, k} && p != q && q != r && p != r :: Valores[p] >= Valores[q] >= Valores[r] && pos_padre == p && pos_madre == q // Q\n\n{\n    \n\n        if Valores[i] < Valores[j] {\n\n        \n                if Valores[j] < Valores[k] {\n\n\n                        pos_padre := k ;\n            \n\n                        pos_madre := j ;\n\n\n                } else {\n\n            \n                        if Valores[i] < Valores[k] {\n\n\n                                pos_padre := j ;\n\n\n                                pos_madre := k ;\n\n\n                        } else {\n\n\n                                pos_padre := j ;\n\n\n                                pos_madre := i ;\n\n\n                        }\n\n                }\n\n        } else {\n\n\n                if Valores[j] >= Valores[k] {\n            \n\n                        pos_padre := i ;\n\n\n                        pos_madre := j ;\n\n\n                } else {\n\n\n                        if Valores[i] < Valores[k] {\n\n\n                                pos_padre := k ;\n\n\n                                pos_madre := i ;\n\n\n                        } else {\n\n\n                                pos_padre := i ;\n\n\n                                pos_madre := k ;\n\n           \n                        }\n\n               \n                }\n\n        \n        }\n\n\n}\n && q in {i, j, k} && r in {i, j, k} && p != q && q != r && p != r :: Valores[p] >= Valores[q] >= Valores[r] && pos_padre == p && pos_madre == q // Q\n\n{\n    \n\n        if Valores[i] < Valores[j] {\n\n        \n                if Valores[j] < Valores[k] {\n\n\n                        pos_padre := k ;\n            \n\n                        pos_madre := j ;\n\n\n                } else {\n\n            \n                        if Valores[i] < Valores[k] {\n\n\n                                pos_padre := j ;\n\n\n                                pos_madre := k ;\n\n\n                        } else {\n\n\n                                pos_padre := j ;\n\n\n                                pos_madre := i ;\n\n\n                        }\n\n                }\n\n        } else {\n\n\n                if Valores[j] >= Valores[k] {\n            \n\n                        pos_padre := i ;\n\n\n                        pos_madre := j ;\n\n\n                } else {\n\n\n                        if Valores[i] < Valores[k] {\n\n\n                                pos_padre := k ;\n\n\n                                pos_madre := i ;\n\n\n                        } else {\n\n\n                                pos_padre := i ;\n\n\n                                pos_madre := k ;\n\n           \n                        }\n\n               \n                }\n\n        \n        }\n\n\n}\n",
  "atoms": {
    "torneo": [
      [],
      "// SPEC \nmethod torneo(Valores : array?<real>, i : int, j : int, k : int) returns (pos_padre : int, pos_madre : int)\n    requires Valores != null && Valores.Length >= 20 && Valores.Length < 50 && i >= 0 && j >= 0 && k >= 0 \n    requires i < Valores.Length && j < Valores.Length && k < Valores.Length && i != j && j != k && k != i \n    ensures exists p, q, r | p in {\n}\n\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_torneo": "torneo"
  }
}