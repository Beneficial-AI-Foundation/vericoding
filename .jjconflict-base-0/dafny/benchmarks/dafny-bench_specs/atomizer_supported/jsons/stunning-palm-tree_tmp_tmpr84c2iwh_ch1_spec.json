{
  "skeleton": "// Ex 1.3\n//ATOM_PLACEHOLDER_Triple\n\n//ATOM_PLACEHOLDER_Caller\n\n// Ex 1.6\n//ATOM_PLACEHOLDER_MinUnderSpec\n\n//ATOM_PLACEHOLDER_Min\n\n// Ex 1.7\n//ATOM_PLACEHOLDER_MaxSum//ATOM_PLACEHOLDER_MaxSumCaller\n\n// Ex 1.8\n//ATOM_PLACEHOLDER_ReconstructFromMaxSum\n\n//ATOM_PLACEHOLDER_TestMaxSum\n\n// Ex 1.9\n//ATOM_PLACEHOLDER_Average\n\n//ATOM_PLACEHOLDER_Triple'\n\n",
  "atoms": {
    "Triple": [
      [
        "Average"
      ],
      "// SPEC \n\nmethod Triple'(x: int) returns (r: int)\n  // spec 1: ensures Average(r, 3*x) == 3*x\n  ensures Average(2*r, 6*x) == 6*x\n{\n}\n",
      "method"
    ],
    "Caller": [
      [
        "Triple"
      ],
      "// SPEC \n\nmethod Caller() {\n}\n",
      "method"
    ],
    "MinUnderSpec": [
      [],
      "// SPEC \n\n// Ex 1.6\nmethod MinUnderSpec (x: int, y: int) returns (r: int)\n  ensures r <= x && r <= y {\n}\n",
      "method"
    ],
    "Min": [
      [],
      "// SPEC \n\nmethod Min (x: int, y: int) returns (r: int)\n  ensures r <= x && r <= y\n  ensures r == x || r == y {\n}\n",
      "method"
    ],
    "MaxSum": [
      [],
      "// SPEC \n\n// Ex 1.7\nmethod MaxSum (x: int, y: int) returns (s:int, m: int)\n  ensures s == x + y\n  ensures x <= m && y <= m\n  ensures m == x || m == y\n",
      "method"
    ],
    "MaxSumCaller": [
      [
        "MaxSum"
      ],
      "// SPEC \n// look ma, no implementation!\n\nmethod MaxSumCaller() {\n}\n",
      "method"
    ],
    "ReconstructFromMaxSum": [
      [],
      "// SPEC \n\n// Ex 1.8\nmethod ReconstructFromMaxSum (s: int, m: int ) returns (x: int, y: int)\n  // requires (0 < s && s / 2 < m && m < s)\n  requires s - m <= m\n  ensures s == x + y\n  ensures (m == y || m == x) && x <= m && y <= m\n{\n}\n",
      "method"
    ],
    "TestMaxSum": [
      [
        "MaxSum",
        "ReconstructFromMaxSum"
      ],
      "// SPEC \n\nmethod TestMaxSum(x: int, y: int)\n  // requires x > 0 && y > 0 && x != y\n{\n}\n",
      "method"
    ],
    "Average": [
      [],
      "// ATOM \n\n// Ex 1.9\nfunction Average (a: int, b: int): int {\n  (a + b) / 2\n}\n",
      "function"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_Triple": "Triple",
    "//ATOM_PLACEHOLDER_Caller": "Caller",
    "//ATOM_PLACEHOLDER_MinUnderSpec": "MinUnderSpec",
    "//ATOM_PLACEHOLDER_Min": "Min",
    "//ATOM_PLACEHOLDER_MaxSum": "MaxSum",
    "//ATOM_PLACEHOLDER_MaxSumCaller": "MaxSumCaller",
    "//ATOM_PLACEHOLDER_ReconstructFromMaxSum": "ReconstructFromMaxSum",
    "//ATOM_PLACEHOLDER_TestMaxSum": "TestMaxSum",
    "//ATOM_PLACEHOLDER_Average": "Average",
    "//ATOM_PLACEHOLDER_Triple'": "Triple'"
  }
}