{
  "skeleton": "//ATOM_PLACEHOLDER_contains\n\n//ATOM_PLACEHOLDER_upper_bound\n\n//ATOM_PLACEHOLDER_is_max\n\n//ATOM_PLACEHOLDER_max\n\n\n\n",
  "atoms": {
    "contains": [
      [],
      "// ATOM \nfunction contains(v: int, a: array<int>, n: int): bool\nreads a\n  requires n <= a.Length\n{\n  exists j :: 0 <= j < n && a[j] == v\n}\n",
      "function"
    ],
    "upper_bound": [
      [],
      "// ATOM \n\nfunction upper_bound(v: int, a: array<int>, n: int): bool\nreads a\n  requires n <= a.Length\n{\n  forall j :: 0 <= j < n ==> a[j] <= v\n}\n",
      "function"
    ],
    "is_max": [
      [
        "contains",
        "upper_bound"
      ],
      "// ATOM \n\nfunction is_max(m: int, a: array<int>, n: int): bool\nreads a\n  requires n <= a.Length\n{\n  contains(m, a, n) && upper_bound(m, a, n)\n}\n",
      "function"
    ],
    "max": [
      [
        "is_max"
      ],
      "// SPEC \n\nmethod max(a: array<int>, n: int) returns (max: int)\n  requires 0 < n <= a.Length;\n  ensures is_max(max, a, n);\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_contains": "contains",
    "//ATOM_PLACEHOLDER_upper_bound": "upper_bound",
    "//ATOM_PLACEHOLDER_is_max": "is_max",
    "//ATOM_PLACEHOLDER_max": "max"
  }
}