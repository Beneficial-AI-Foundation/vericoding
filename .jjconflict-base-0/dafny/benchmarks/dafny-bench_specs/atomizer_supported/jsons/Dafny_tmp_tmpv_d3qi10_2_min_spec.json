{
  "skeleton": "\n//ATOM_PLACEHOLDER_min\n\n//ATOM_PLACEHOLDER_minMethod\n\n//ATOM_PLACEHOLDER_minFunction\n\n\n// Return a minimum of a.\n//ATOM_PLACEHOLDER_minArray\n\n//ATOM_PLACEHOLDER_Main\n\n\n\n",
  "atoms": {
    "min": [
      [],
      "// ATOM \n\nfunction min(a: int, b: int): int\n    ensures min(a, b) <= a && min(a, b) <= b\n    ensures min(a, b) == a || min(a, b) == b\n{\n    if a < b then a else b\n}\n",
      "function"
    ],
    "minMethod": [
      [
        "min"
      ],
      "// SPEC \n\nmethod minMethod(a: int, b: int) returns (c: int)\n    ensures c <= a && c <= b\n    ensures c == a || c == b\n    // Ou encore:\n    ensures c == min(a, b)\n{\n}\n",
      "method"
    ],
    "minFunction": [
      [],
      "// ATOM \n\nghost function minFunction(a: int, b: int): int\n    ensures minFunction(a, b) <= a && minFunction(a, b) <= b\n    ensures minFunction(a, b) == a || minFunction(a, b) == b\n{\n    if a < b then a else b\n}\n",
      "ghost function"
    ],
    "minArray": [
      [],
      "// SPEC \n\n\n// Return a minimum of a.\nmethod minArray(a: array<int>) returns (m: int)\n    requires a!= null  && a.Length > 0 ;\n\n    ensures forall k | 0 <= k < a.Length :: m <= a[k]\n    ensures exists k | 0 <= k < a.Length :: m == a[k]\n{\n}\n",
      "method"
    ],
    "Main": [
      [
        "min"
      ],
      "// SPEC \n\nmethod Main(){\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_min": "min",
    "//ATOM_PLACEHOLDER_minMethod": "minMethod",
    "//ATOM_PLACEHOLDER_minFunction": "minFunction",
    "//ATOM_PLACEHOLDER_minArray": "minArray",
    "//ATOM_PLACEHOLDER_Main": "Main"
  }
}