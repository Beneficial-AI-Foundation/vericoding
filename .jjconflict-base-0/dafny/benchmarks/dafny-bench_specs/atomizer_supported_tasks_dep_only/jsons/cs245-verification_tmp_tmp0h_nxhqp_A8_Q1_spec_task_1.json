{
  "skeleton": "// A8Q1 \u2014 Steph Renee McIntyre\n// Following the solutions from Carmen Bruni\n\n// There is no definition for power, so this function will be used for validating that our imperative program is correct. This is just for Dafny.\n//ATOM_PLACEHOLDER_power//ATOM_PLACEHOLDER_A8Q1\n\n/* Proof of implieds can be seen on LEARN.\n    Note: If you are unconvinced, putting asserts for each condition will demonstrate the correctness of the statements. \n*/\n\n\n\n/* Proof of implieds can be seen on LEARN.\n    Note: If you are unconvinced, putting asserts for each condition will demonstrate the correctness of the statements. \n*/\n\n",
  "atoms": {
    "A8Q1": [
      [
        "power"
      ],
      "// SPEC \n\n\nmethod A8Q1(y0: int, x: int) returns (z: int)\nrequires y0 >= 0;\n/*Post-Condition*/ ensures z==power(x,y0);\n{\n}\n\n/* Proof of implieds can be seen on LEARN.\n    Note: If you are unconvinced, putting asserts for each condition will demonstrate the correctness of the statements. \n*/\n",
      "method"
    ],
    "power": [
      [],
      "// ATOM \n// A8Q1 \u2014 Steph Renee McIntyre\n// Following the solutions from Carmen Bruni\n\n// There is no definition for power, so this function will be used for validating that our imperative program is correct. This is just for Dafny.\nfunction power(a: int, n: int): int //function for a to the power of n\n  requires 0 <= n;\n",
      "function"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_power": "power",
    "//ATOM_PLACEHOLDER_A8Q1": "A8Q1"
  }
}