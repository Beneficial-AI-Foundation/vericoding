{
  "skeleton": "\n//ATOM_PLACEHOLDER_positive\n\n//ATOM_PLACEHOLDER_isEven\n\n//ATOM_PLACEHOLDER_CountEven\n\n//ATOM_PLACEHOLDER_ArrayFacts\n\n//ATOM_PLACEHOLDER_mcountEven\n\n\n\n\n\n\n\n",
  "atoms": {
    "mcountEven": [
      [
        "positive",
        "CountEven"
      ],
      "// SPEC \n\nmethod mcountEven(v:array<int>) returns (n:int)\nrequires positive(v[..])\nensures  n==CountEven(v[..])\n{\n}\n",
      "method"
    ],
    "CountEven": [
      [
        "positive"
      ],
      "// ATOM \n\nfunction CountEven(s:seq<int>):int\nrequires positive(s)\n{if s==[] then 0\n else (if (s[|s|-1]%2==0) then 1 else 0)+CountEven(s[..|s|-1])\n }\n",
      "function"
    ],
    "positive": [
      [],
      "// ATOM \n\npredicate positive(s:seq<int>)\n{forall u::0<=u<|s| ==> s[u]>=0}\n",
      "predicate"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_positive": "positive",
    "//ATOM_PLACEHOLDER_CountEven": "CountEven",
    "//ATOM_PLACEHOLDER_mcountEven": "mcountEven"
  }
}