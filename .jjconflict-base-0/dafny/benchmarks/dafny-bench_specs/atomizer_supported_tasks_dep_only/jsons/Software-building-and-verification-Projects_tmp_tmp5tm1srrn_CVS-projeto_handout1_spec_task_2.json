{
  "skeleton": "// 1 a)\n\n// [ai, aj[\n//ATOM_PLACEHOLDER_sum\n\n// 1 b)\n//ATOM_PLACEHOLDER_query\n\n// 1 c)\n// a -> [1, 10, 3, \u22124, 5]\n// c -> [0, 1, 11, 14, 10, 15]\n//ATOM_PLACEHOLDER_queryFast\n\n//ATOM_PLACEHOLDER_is_prefix_sum_for\n\n//ATOM_PLACEHOLDER_proof//ATOM_PLACEHOLDER_List//ATOM_PLACEHOLDER_from_array\n\n//ATOM_PLACEHOLDER_mem\n\n",
  "atoms": {
    "proof": [
      [],
      "// ATOM \n\nlemma proof(a: array<int>, i: int, j: int, k:int)\n  requires 0 <= i <= k <= j <= a.Length\n  ensures sum(a, i, k) + sum(a, k, j) == sum(a, i, j)\n",
      "lemma"
    ],
    "is_prefix_sum_for": [
      [
        "sum"
      ],
      "// ATOM \n\npredicate is_prefix_sum_for (a: array<int>, c: array<int>)\n  reads c, a\n{\n  a.Length + 1 == c.Length && forall i: int :: 0 <= i <= a.Length ==> c[i] == sum(a, 0, i)\n}\n",
      "predicate"
    ],
    "sum": [
      [],
      "// ATOM \n// 1 a)\n\n// [ai, aj[\nfunction sum(a: array<int>, i: int, j: int) : int\n  requires 0 <= i <= j <= a.Length\n  reads a\n{\n  if i == j then 0\n  else a[j-1] + sum(a, i, j-1)\n}\n",
      "function"
    ],
    "queryFast": [
      [
        "proof",
        "is_prefix_sum_for",
        "sum"
      ],
      "// SPEC \n\n// 1 c)\n// a -> [1, 10, 3, \u22124, 5]\n// c -> [0, 1, 11, 14, 10, 15]\nmethod queryFast(a: array<int>, c: array<int>, i: int, j: int) returns (r: int)\n  requires 0 <= i <= j <= a.Length\n  requires is_prefix_sum_for(a,c)\n  ensures r == sum(a, i, j)\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_sum": "sum",
    "//ATOM_PLACEHOLDER_queryFast": "queryFast",
    "//ATOM_PLACEHOLDER_is_prefix_sum_for": "is_prefix_sum_for",
    "//ATOM_PLACEHOLDER_proof": "proof"
  }
}