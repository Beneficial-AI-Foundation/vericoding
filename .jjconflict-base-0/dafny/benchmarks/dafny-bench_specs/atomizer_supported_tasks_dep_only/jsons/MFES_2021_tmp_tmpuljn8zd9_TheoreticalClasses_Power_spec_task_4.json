{
  "skeleton": "/* \n* Formal verification of O(n) and O(log n) algorithms to calculate the natural\n* power of a real number (x^n), illustrating the usage of lemmas.\n* FEUP, MIEIC, MFES, 2020/21.\n*/\n\n// Initial specification/definition of x^n, recursive, functional style, \n// with time and space complexity O(n).\n//ATOM_PLACEHOLDER_power\n\n// Iterative version, imperative, with time complexity O(n) and space complexity O(1).\n//ATOM_PLACEHOLDER_powerIter\n\n// Recursive version, imperative, with time and space complexity O(log n).\n//ATOM_PLACEHOLDER_powerOpt\n\n// States the property x^a * x^b = x^(a+b), that powerOpt takes advantage of. \n// The annotation {:induction a} guides Dafny to prove the property\n// by automatic induction on 'a'.\n//ATOM_PLACEHOLDER_unknown_1485 distributiveProperty(x: real, a: nat, b: nat) \n  ensures power(x, a) * power(x, b)  == power(x, a + b) \n{\n  //    \n  // To use the proof below, deactivate automatic induction, with {:induction false}.\n   /* if a == 0 {\n        // base case\n        calc == {\n            power(x, a) * power(x, b);\n            power(x, 0) * power(x, b); // substitution\n            1.0 * power(x, b); // by the definition of power\n            power(x, b); // neutral element of \"*\"\n            power(x, a + b); // neutral element of \"+\"\n        }\n    }\n    else {\n        // recursive case, assuming property holds for a-1 (proof by induction)\n        distributiveProperty(x, a-1, b); \n        // now do the proof\n        calc == {\n            power(x, a) * power(x, b);\n            (x * power(x, a-1)) * power(x, b); // by the definition of power\n            x * (power(x, a-1) * power(x, b)); // associative property\n            x * power(x, a + b - 1); // this same property for a-1\n            power(x, a + b); // definition of power\n        }\n    }*/\n}\n\n// A simple test case to make sure the specification is adequate.\n//ATOM_PLACEHOLDER_testPowerIter\n\n//ATOM_PLACEHOLDER_testPowerOpt\n\n",
  "atoms": {
    "testPowerOpt": [
      [
        "powerOpt"
      ],
      "// SPEC \n\nmethod testPowerOpt(){\n}\n",
      "method"
    ],
    "powerOpt": [
      [
        "power"
      ],
      "// SPEC \n\n// Recursive version, imperative, with time and space complexity O(log n).\nmethod powerOpt(x: real, n: nat) returns (p : real)\n  ensures p == power(x, n);\n{\n}\n",
      "method"
    ],
    "power": [
      [],
      "// ATOM \n\n// Initial specification/definition of x^n, recursive, functional style, \n// with time and space complexity O(n).\nfunction power(x: real, n: nat) : real\n{\n    if n == 0 then 1.0 else x * power(x, n-1)\n}\n",
      "function"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_power": "power",
    "//ATOM_PLACEHOLDER_powerOpt": "powerOpt",
    "//ATOM_PLACEHOLDER_testPowerOpt": "testPowerOpt"
  }
}