{
  "skeleton": "// Array<T> = visualiza\u00e7\u00e3o de um array\n// Uma busca ordenada em um array\n// Buscar: Array<Z>xZ -> Z (Z \u00e9 inteiro)\n// Pr\u00e9: True (pr\u00e9-condi\u00e7\u00e3o \u00e9 sempre verdadeira)\n// Pos: R < 0 => Para todo i pertencente aos naturais(0 <= i < A.length => A[i] != X) e\n// 0 <= R < A.length => A[R] = x \n//\n// m\u00e9todo em qualquer linguagem:\n// R = 0\n// Enquanto(R < |A|) {\n//  Se (A[R] == X) retorne E\n//  R = R + 1\n// }\n// retorne -1 \n// \n// X  | R | |A|\n// 10 | 0 |  5\n// 10 | 1 |  5\n// 10 | 2 |  \n// invariante detectada: 0 <= R <= |A| e Para todo i pertencente aos naturais(0 <= i < R => A[i] != X)\n\n// no dafy\n// forall = \u00e9 o para todo logico\n// :: \u00e9 igual ao tal que l\u00f3gico\n// ==> \u00e9 o ent\u00e3o l\u00f3gico\n// forall i :: 0 <= i < a.Length ==> a[i] != x (para todo i tal que i e maior ou igual a zero e menor que o tamanho do array, ent\u00e3o a posi\u00e7\u00e3o i do array a \u00e9 diferente de x)\n\n//ATOM_PLACEHOLDER_buscar\n\n\n\n",
  "atoms": {
    "buscar": [
      [],
      "// SPEC \n// Array<T> = visualiza\u00e7\u00e3o de um array\n// Uma busca ordenada em um array\n// Buscar: Array<Z>xZ -> Z (Z \u00e9 inteiro)\n// Pr\u00e9: True (pr\u00e9-condi\u00e7\u00e3o \u00e9 sempre verdadeira)\n// Pos: R < 0 => Para todo i pertencente aos naturais(0 <= i < A.length => A[i] != X) e\n// 0 <= R < A.length => A[R] = x \n//\n// m\u00e9todo em qualquer linguagem:\n// R = 0\n// Enquanto(R < |A|) {\n}\n// retorne -1 \n// \n// X  | R | |A|\n// 10 | 0 |  5\n// 10 | 1 |  5\n// 10 | 2 |  \n// invariante detectada: 0 <= R <= |A| e Para todo i pertencente aos naturais(0 <= i < R => A[i] != X)\n\n// no dafy\n// forall = \u00e9 o para todo logico\n// :: \u00e9 igual ao tal que l\u00f3gico\n// ==> \u00e9 o ent\u00e3o l\u00f3gico\n// forall i :: 0 <= i < a.Length ==> a[i] != x (para todo i tal que i e maior ou igual a zero e menor que o tamanho do array, ent\u00e3o a posi\u00e7\u00e3o i do array a \u00e9 diferente de x)\n\nmethod buscar(a:array<int>, x:int) returns (r:int)\n    ensures r < 0 ==> forall i :: 0 <= i < a.Length ==> a[i] != x\n    ensures 0 <= r < a.Length ==> a[r] == x\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_buscar": "buscar"
  }
}