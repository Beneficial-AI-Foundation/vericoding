{
  "skeleton": "\n/* \n* Formal specification and verification of a dynamic programming algorithm for calculating C(n, k).\n* FEUP, MIEIC, MFES, 2020/21.\n*/\n\n// Initial recursive definition of C(n, k), based on the Pascal equality.\n//ATOM_PLACEHOLDER_comb\nby method\n// Calculates C(n,k) iteratively in time O(k*(n-k)) and space O(n-k), \n// with dynamic programming.\n{\n  var maxj := n - k;\n  var c := new nat[1 + maxj];\n  forall i | 0 <= i <= maxj {\n       c[i] := 1;\n  }\n  var i := 1;\n  while i <= k \n  {\n    var j := 1;\n    while j <= maxj\n    {\n      c[j] := c[j] + c[j-1];\n      j := j+1;\n    } \n    i := i + 1;\n  }\n  return c[maxj];\n}\n\n//ATOM_PLACEHOLDER_combProps\n\n//ATOM_PLACEHOLDER_Main\n\n//ATOM_PLACEHOLDER_testComb\n\n\n\n\n\n\n\n",
  "atoms": {
    "testComb": [
      [],
      "// SPEC \n\nmethod testComb() {\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_testComb": "testComb"
  }
}