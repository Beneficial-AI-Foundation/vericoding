{
  "skeleton": "\n\n//ATOM_PLACEHOLDER_Sum\n\n//ATOM_PLACEHOLDER_SumMaxToRight\n\n//ATOM_PLACEHOLDER_segMaxSum \n\n\n//ATOM_PLACEHOLDER_Sum2\n\n//Now do the same but with a loop from right to left\n//ATOM_PLACEHOLDER_SumMaxToRight2\n\n//ATOM_PLACEHOLDER_segSumaMaxima2\n\n",
  "atoms": {
    "segMaxSum": [
      [
        "Sum",
        "SumMaxToRight"
      ],
      "// SPEC \n\nmethod segMaxSum(v:array<int>,i:int) returns (s:int,k:int)\nrequires v.Length>0 && 0<=i<v.Length\nensures 0<=k<=i && s==Sum(v,k,i+1) &&  SumMaxToRight(v,i,s)\n{\n}\n",
      "method"
    ],
    "Sum": [
      [],
      "// ATOM \n\n\nfunction Sum(v:array<int>,i:int,j:int):int\nreads v\nrequires 0<=i<=j<=v.Length\n{\n    if (i==j) then 0\n    else Sum(v,i,j-1)+v[j-1]\n}\n",
      "function"
    ],
    "SumMaxToRight": [
      [
        "Sum"
      ],
      "// ATOM \n\npredicate SumMaxToRight(v:array<int>,i:int,s:int)\nreads v\nrequires 0<=i<v.Length\n{\nforall l,ss {:induction l}::0<=l<=i && ss==i+1==> Sum(v,l,ss)<=s\n}\n",
      "predicate"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_Sum": "Sum",
    "//ATOM_PLACEHOLDER_SumMaxToRight": "SumMaxToRight",
    "//ATOM_PLACEHOLDER_segMaxSum": "segMaxSum"
  }
}