{
  "skeleton": "// RUN: %dafny /compile:0 \"%s\" > \"%t\"\n// RUN: %diff \"%s.expect\" \"%t\"\n\n// Spec# and Boogie and Chalice:  The program will be\n// the same, except that these languages do not check\n// for any kind of termination.  Also, in Spec#, there\n// is an issue of potential overflows.\n\n// Benchmark1\n\n//ATOM_PLACEHOLDER_Add\n\n//ATOM_PLACEHOLDER_Mul\n\n// ---------------------------\n\n//ATOM_PLACEHOLDER_Main\n\n//ATOM_PLACEHOLDER_TestAdd\n\n//ATOM_PLACEHOLDER_TestMul\n\n\n\n",
  "atoms": {
    "Mul": [
      [
        "Add"
      ],
      "// SPEC \n\nmethod Mul(x: int, y: int) returns (r: int)\n  ensures r == x*y;\n{\n}\n",
      "method"
    ],
    "Add": [
      [],
      "// SPEC \n// RUN: %dafny /compile:0 \"%s\" > \"%t\"\n// RUN: %diff \"%s.expect\" \"%t\"\n\n// Spec# and Boogie and Chalice:  The program will be\n// the same, except that these languages do not check\n// for any kind of termination.  Also, in Spec#, there\n// is an issue of potential overflows.\n\n// Benchmark1\n\nmethod Add(x: int, y: int) returns (r: int)\n  ensures r == x+y;\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_Add": "Add",
    "//ATOM_PLACEHOLDER_Mul": "Mul"
  }
}