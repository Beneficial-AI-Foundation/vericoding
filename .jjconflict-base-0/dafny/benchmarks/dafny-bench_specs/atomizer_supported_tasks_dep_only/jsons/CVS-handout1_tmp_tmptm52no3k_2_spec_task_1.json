{
  "skeleton": "/*                                      Functional Lists and Imperative Arrays                                        */\n\n/*\n    Daniel Cavalheiro   57869\n    Pedro Nunes        57854\n*/\n\n//ATOM_PLACEHOLDER_List//ATOM_PLACEHOLDER_length\n\n//ATOM_PLACEHOLDER_mem\n\n//ATOM_PLACEHOLDER_at\n\n//ATOM_PLACEHOLDER_from_array\n\n//ATOM_PLACEHOLDER_Main\n\n",
  "atoms": {
    "from_array": [
      [
        "mem",
        "at",
        "length"
      ],
      "// SPEC \n\nmethod from_array<T>(a: array<T>) returns (l: List<T>)\n  requires a.Length >= 0\n  ensures length(l) == a.Length\n  ensures forall i: int :: 0 <= i < length(l) ==> at(l, i) == a[i]\n  ensures forall x :: mem(l, x) ==> exists i: int :: 0 <= i < length(l) && a[i] == x\n{\n}\n",
      "method"
    ],
    "at": [
      [
        "length"
      ],
      "// ATOM \n\nfunction at<T>(l: List<T>, i: nat): T\n  requires i < length(l)\n{\n  if i == 0 then l.head else at(l.tail, i - 1)\n}\n",
      "function"
    ],
    "mem": [
      [],
      "// ATOM \n\npredicate mem<T(==)> (l: List<T>, x: T)\n{\n  match l\n  case Nil => false\n  case Cons(h, t) => if(h == x) then true else mem(t, x)\n}\n",
      "predicate"
    ],
    "length": [
      [],
      "// ATOM \n\nfunction length<T>(l: List<T>): nat\n{\n  match l\n  case Nil => 0\n  case Cons(_, t) => 1 + length(t)\n}\n",
      "function"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_length": "length",
    "//ATOM_PLACEHOLDER_mem": "mem",
    "//ATOM_PLACEHOLDER_at": "at",
    "//ATOM_PLACEHOLDER_from_array": "from_array"
  }
}