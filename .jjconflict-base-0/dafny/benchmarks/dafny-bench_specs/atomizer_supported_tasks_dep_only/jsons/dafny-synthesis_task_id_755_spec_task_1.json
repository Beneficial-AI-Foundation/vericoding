{
  "skeleton": "//ATOM_PLACEHOLDER_MinPair\n\n\n//ATOM_PLACEHOLDER_min\n\n\n//ATOM_PLACEHOLDER_SecondSmallest\n\n",
  "atoms": {
    "min": [
      [
        "MinPair"
      ],
      "// ATOM \n\n\nfunction min(s: seq<int>) : (r: int)\n    requires |s| >= 2\n    ensures forall i :: 0 <= i < |s| ==> r <= s[i]\n{\n    if |s| == 2 then MinPair(s)\n    else MinPair([s[0], min(s[1..])])\n}\n",
      "function"
    ],
    "MinPair": [
      [],
      "// ATOM \nfunction MinPair(s: seq<int>) : (r: int)\n    requires |s| == 2\n    ensures s[0] <= s[1] <==> r == s[0]\n    ensures s[0] > s[1] ==> r == s[1] \n{\n    if s[0] <= s[1] then s[0] else s[1]\n}\n",
      "function"
    ],
    "SecondSmallest": [
      [
        "min"
      ],
      "// SPEC \n\n\nmethod SecondSmallest(s: array<int>) returns (secondSmallest: int)\n    requires s.Length >= 2\n    // There must be at least 2 different values, a minimum and another one\n    requires exists i, j :: 0 <= i < s.Length && 0 <= j < s.Length && i != j && s[i] == min(s[..]) && s[j] != s[i]\n    ensures exists i, j :: 0 <= i < s.Length && 0 <= j < s.Length && i != j && s[i] == min(s[..]) && s[j] == secondSmallest \n    ensures forall k ::  0 <= k < s.Length && s[k] != min(s[..])  ==>  s[k] >= secondSmallest\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_MinPair": "MinPair",
    "//ATOM_PLACEHOLDER_min": "min",
    "//ATOM_PLACEHOLDER_SecondSmallest": "SecondSmallest"
  }
}