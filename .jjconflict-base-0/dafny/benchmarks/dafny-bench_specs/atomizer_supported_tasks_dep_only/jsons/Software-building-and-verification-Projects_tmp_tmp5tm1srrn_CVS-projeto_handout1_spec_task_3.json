{
  "skeleton": "// 1 a)\n\n// [ai, aj[\n//ATOM_PLACEHOLDER_sum\n\n// 1 b)\n//ATOM_PLACEHOLDER_query\n\n// 1 c)\n// a -> [1, 10, 3, \u22124, 5]\n// c -> [0, 1, 11, 14, 10, 15]\n//ATOM_PLACEHOLDER_queryFast\n\n//ATOM_PLACEHOLDER_is_prefix_sum_for\n\n//ATOM_PLACEHOLDER_proof//ATOM_PLACEHOLDER_List//ATOM_PLACEHOLDER_from_array\n\n//ATOM_PLACEHOLDER_mem\n\n",
  "atoms": {
    "from_array": [
      [
        "mem"
      ],
      "// SPEC \n\nmethod from_array<T>(a: array<T>) returns (l: List<T>)\n  ensures forall i: int :: 0 <= i < a.Length ==> mem(a[i], l)\n  ensures forall x: T :: mem(x, l) ==> exists y: int :: 0 <= y < a.Length && a[y] == x\n{\n}\n",
      "method"
    ],
    "mem": [
      [],
      "// ATOM \n\nfunction mem<T(==)> (x: T, l: List<T>) : bool\n{\n  match l\n  case Nil => false\n  case Cons(h, t) => h == x || mem(x, t)\n}\n",
      "function"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_from_array": "from_array",
    "//ATOM_PLACEHOLDER_mem": "mem"
  }
}