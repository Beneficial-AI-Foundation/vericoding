{
  "skeleton": "//ATOM_PLACEHOLDER_Exp//ATOM_PLACEHOLDER_eval\n\n//fill this function in to make optimizeFeatures work\n//ATOM_PLACEHOLDER_optimize \n\n//as you write optimize this will become unproved\n//you must write proof code so that Dafny can prove this\n//ATOM_PLACEHOLDER_optimizeCorrect\n\n//ATOM_PLACEHOLDER_optimizeFeatures\n\n",
  "atoms": {
    "optimize": [
      [],
      "// ATOM \n\n//fill this function in to make optimizeFeatures work\nfunction optimize(e:Exp):Exp\n{\n\tmatch e\n\tcase Mult(Const(0), e) => Const(0)\n\tcase Mult(e, Const(0)) => Const(0)\n\tcase Mult(Const(1), e) => e\n\tcase Mult(e, Const(1)) => e\n\tcase Mult(Const(n1), Const(n2)) => Const(n1*n2)\n\tcase Plus(Const(0), e) => e\n\tcase Plus(e, Const(0)) => e\n\tcase Plus(Const(n1), Const(n2)) => Const(n1+ n2)\n\tcase e => e\n\n}\n",
      "function"
    ],
    "eval": [
      [],
      "// ATOM \n\nfunction eval(e:Exp, store:map<string, int>):int\n{\n\tmatch(e)\n\t\tcase Const(n) => n\n\t\tcase Var(s) => if(s in store) then store[s] else -1\n\t\tcase Plus(e1, e2) => eval(e1, store) + eval(e2, store)\n\t\tcase Mult(e1, e2) => eval(e1, store) * eval(e2, store)\n}\n",
      "function"
    ],
    "optimizeCorrect": [
      [
        "eval",
        "optimize"
      ],
      "// SPEC \n\n//as you write optimize this will become unproved\n//you must write proof code so that Dafny can prove this\nmethod optimizeCorrect(e:Exp, s:map<string, int>)\nensures eval(e,s) == eval(optimize(e), s)\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_eval": "eval",
    "//ATOM_PLACEHOLDER_optimize": "optimize",
    "//ATOM_PLACEHOLDER_optimizeCorrect": "optimizeCorrect"
  }
}