{
  "skeleton": "\n\n//ATOM_PLACEHOLDER_Sum\n\n//ATOM_PLACEHOLDER_SumMaxToRight\n\n//ATOM_PLACEHOLDER_segMaxSum \n\n\n//ATOM_PLACEHOLDER_Sum2\n\n//Now do the same but with a loop from right to left\n//ATOM_PLACEHOLDER_SumMaxToRight2\n\n//ATOM_PLACEHOLDER_segSumaMaxima2\n\n",
  "atoms": {
    "SumMaxToRight2": [
      [
        "Sum2"
      ],
      "// ATOM \n\n//Now do the same but with a loop from right to left\npredicate SumMaxToRight2(v:array<int>,j:int,i:int,s:int)//maximum sum stuck to the right\nreads v\nrequires 0<=j<=i<v.Length\n{(forall l,ss {:induction l}::j<=l<=i && ss==i+1 ==> Sum2(v,l,ss)<=s)}\n",
      "predicate"
    ],
    "Sum2": [
      [],
      "// ATOM \n\n\nfunction Sum2(v:array<int>,i:int,j:int):int\nreads v\nrequires 0<=i<=j<=v.Length\n{\n    if (i==j) then 0\n    else v[i]+Sum2(v,i+1,j)\n}\n",
      "function"
    ],
    "segSumaMaxima2": [
      [
        "Sum2",
        "SumMaxToRight2"
      ],
      "// SPEC \n\nmethod segSumaMaxima2(v:array<int>,i:int) returns (s:int,k:int)\nrequires v.Length>0 && 0<=i<v.Length\nensures 0<=k<=i && s==Sum2(v,k,i+1) &&  SumMaxToRight2(v,0,i,s)\n//Implement and verify\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_Sum2": "Sum2",
    "//ATOM_PLACEHOLDER_SumMaxToRight2": "SumMaxToRight2",
    "//ATOM_PLACEHOLDER_segSumaMaxima2": "segSumaMaxima2"
  }
}