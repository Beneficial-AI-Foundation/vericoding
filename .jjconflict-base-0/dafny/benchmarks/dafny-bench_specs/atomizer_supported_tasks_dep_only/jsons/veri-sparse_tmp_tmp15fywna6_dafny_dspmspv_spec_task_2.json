{
  "skeleton": "//ATOM_PLACEHOLDER_sum\n\n//ATOM_PLACEHOLDER_min\n\n//ATOM_PLACEHOLDER_notin\n\n//ATOM_PLACEHOLDER_notin_seq\n\n//ATOM_PLACEHOLDER_index_seq\n\n//ATOM_PLACEHOLDER_index\n\n//ATOM_PLACEHOLDER_DSpMSpV\n\n//ATOM_PLACEHOLDER_Main\n\n\n\n",
  "atoms": {
    "Main": [
      [
        "DSpMSpV"
      ],
      "// SPEC \n\nmethod Main() {\n}\n",
      "method"
    ],
    "index": [
      [
        "index_seq",
        "notin"
      ],
      "// ATOM \n\nfunction index(x : nat, y: array<nat>) : (i : nat)\n  reads y\n  ensures i >= y.Length ==> notin(x, y)\n  ensures i <  y.Length ==> y[i] == x\n{\n  index_seq(x, y[.. ])\n}\n",
      "function"
    ],
    "DSpMSpV": [
      [
        "sum",
        "min",
        "index"
      ],
      "// SPEC \n\nmethod DSpMSpV(X_val : array<int>, X_crd : array<nat>, X_pos : array<nat>,\n                                  X_crd1 : array<nat>, X_len: nat,\n              v_val : array<int>, v_crd : array<nat>) returns (y : array<int>)\n  // X requirements \n  requires X_pos.Length >= 1\n  requires X_val.Length == X_crd.Length\n  requires forall i, j :: 0 <= i < j < X_pos.Length ==> X_pos[i] <= X_pos[j];\n  requires forall i :: 0 <= i < X_pos.Length ==> 0 <= X_pos[i] <= X_val.Length\n\n  requires X_len >= X_crd1.Length\n  requires forall i :: 0 <= i < X_crd1.Length ==> X_crd1[i] < X_len\n\n  requires X_crd1.Length < X_pos.Length\n  requires forall i, j :: 0 <= i < j < X_crd1.Length ==> X_crd1[i] < X_crd1[j]\n\n  // v requirements \n  requires v_val.Length == v_crd.Length\n\n  ensures y.Length == X_len\n  ensures forall i :: 0 <= i < y.Length ==> \n    y[i] == \n      if index(i, X_crd1) < X_crd1.Length then \n        sum(X_val, X_crd, v_val, v_crd, X_pos[index(i, X_crd1)], 0, X_pos[index(i, X_crd1)+1], v_val.Length)\n      else 0\n  {\n}\n",
      "method"
    ],
    "sum": [
      [],
      "// ATOM \nfunction sum(X_val : array<int>, X_crd : array<nat>,\n             v_val : array<int>, v_crd : array<nat>, kX : nat, kV : nat, pX_end : nat, pV_end : nat) : (s : int) \n  reads X_val, X_crd\n  requires X_val.Length == X_crd.Length\n  requires pX_end <= X_crd.Length\n  requires 0 <= kX <= X_crd.Length\n\n  reads v_crd, v_val\n  requires v_val.Length == v_crd.Length\n  requires pV_end <= v_crd.Length\n  requires 0 <= kV <= v_crd.Length\n\n  {\n    if pV_end <= kV || pX_end <= kX then \n      0\n    else if X_crd[kX] == v_crd[kV] then \n      sum(X_val, X_crd, v_val, v_crd, kX + 1, kV + 1, pX_end, pV_end) + v_val[kV] * X_val[kX]\n    else if X_crd[kX] < v_crd[kV] then \n      sum(X_val, X_crd, v_val, v_crd, kX + 1, kV, pX_end, pV_end)\n    else sum(X_val, X_crd, v_val, v_crd, kX, kV + 1, pX_end, pV_end)\n  }\n",
      "function"
    ],
    "notin_seq": [
      [],
      "// ATOM \n\npredicate notin_seq(y: nat, x : seq<nat>) \n{\n  forall i :: 0 <= i < |x| ==> y != x[i]\n}\n",
      "predicate"
    ],
    "min": [
      [],
      "// ATOM \n\nfunction min(x : nat, y : nat) : nat {\n  if x <= y then x else y\n}\n",
      "function"
    ],
    "index_seq": [
      [
        "notin_seq"
      ],
      "// ATOM \n\nfunction index_seq(x : nat, y: seq<nat>) : (i : nat)\n  ensures i >= |y| ==> notin_seq(x, y)\n  ensures i <  |y| ==> y[i] == x\n{\n  if |y| == 0 then 0 \n  else \n    if y[0] == x then 0 \n    else 1 + index_seq(x, y[1..])\n}\n",
      "function"
    ],
    "notin": [
      [],
      "// ATOM \n\npredicate notin(y: nat, x : array<nat>) \n  reads x\n{\n  forall i :: 0 <= i < x.Length ==> y != x[i]\n}\n",
      "predicate"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_sum": "sum",
    "//ATOM_PLACEHOLDER_min": "min",
    "//ATOM_PLACEHOLDER_notin": "notin",
    "//ATOM_PLACEHOLDER_notin_seq": "notin_seq",
    "//ATOM_PLACEHOLDER_index_seq": "index_seq",
    "//ATOM_PLACEHOLDER_index": "index",
    "//ATOM_PLACEHOLDER_DSpMSpV": "DSpMSpV",
    "//ATOM_PLACEHOLDER_Main": "Main"
  }
}