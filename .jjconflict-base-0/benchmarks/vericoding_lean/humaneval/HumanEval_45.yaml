vc-description: |-
  /--
  function_signature: "def triangle_area(a: float, h: float) -> float"
  docstring: |
      Given length of a side and high return area for a triangle.
  test_cases:
    - input: (5, 3)
      expected_output: 7.5
    - input: (8, 2)
      expected_output: 8.0
  -/

vc-preamble: |-
  import Imports.AllImports

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-code: |-
  def implementation (a h: Rat) : Rat :=
  -- <vc-code>
  0.5 * a * h
  -- </vc-code>
  
  -- #test implementation 5 3 = 7.5
  -- #test implementation 8 2 = 8.0

vc-spec: |-
  def problem_spec
  -- function signature
  (implementation: Rat → Rat -> Rat)
  -- inputs
  (a h: Rat) :=
  -- spec
  let spec (result: Rat) :=
    a = 0 → result = 0 ∧
    (a ≠ 0 → (2 * result) / a = h);
  -- -- program termination
  ∃ result, implementation a h = result ∧
  spec result
  
  theorem correctness
  (a h : Rat)
  : problem_spec implementation a h
  :=
  -- <vc-proof>
  by
  unfold problem_spec
  let result := implementation a h
  use result
  simp [result]
  sorry
  -- </vc-proof>

vc-postamble: |-
  -- #test implementation 5 3 = 7.5
  -- #test implementation 8 2 = 8.0
  
  

