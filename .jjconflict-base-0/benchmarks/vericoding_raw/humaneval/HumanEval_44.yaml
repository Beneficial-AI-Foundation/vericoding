vc-description: |-
  /--
  function_signature: "def change_base(x: Nat, base: Nat) -> String"
  docstring: |
      Change numerical base of input number x to base.
      return string representation after the conversion.
      base numbers are less than 10.
  test_cases:
    - input: (8, 3)
      expected_output: '22'
    - input: (8, 2)
      expected_output: '1000'
    - input: (7, 2)
      expected_output: '111'
  -/

vc-preamble: |-
  import Imports.AllImports

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-code: |-
  def implementation (x base: Nat) : String :=
  -- <vc-code>
  sorry
  -- </vc-code>
  
  -- #test implementation 8 3 = '22'
  -- #test implementation 8 2 = '1000'
  -- #test implementation 7 2 = '111'

vc-spec: |-
  def problem_spec
  -- function signature
  (implementation: Nat → Nat -> String)
  -- inputs
  (x base: Nat) :=
  -- spec
  let spec (result: String) :=
  let result_array := result.toList.map (fun c => c.toNat - '0'.toNat);
  let pow_array := (List.range result_array.length).map (fun i => base^(result_array.length - i - 1) * result_array[i]!);
  let pow_sum := pow_array.sum;
  (0 < base ∧ base ≤ 10) ∧
  (∀ i, i < result_array.length →
  result_array[i]! < base ∧ 0 ≤ result_array[i]! →
  pow_sum = x);
  -- program termination
  ∃ result, implementation x base = result ∧
  spec result
  
  theorem correctness
  (x base : Nat)
  : problem_spec implementation x base
  :=
  -- <vc-proof>
  by
  unfold problem_spec
  let result := implementation x base
  use result
  simp [result]
  sorry
  -- </vc-proof>

vc-postamble: |-
  -- #test implementation 8 3 = '22'
  -- #test implementation 8 2 = '1000'
  -- #test implementation 7 2 = '111'
  
  

