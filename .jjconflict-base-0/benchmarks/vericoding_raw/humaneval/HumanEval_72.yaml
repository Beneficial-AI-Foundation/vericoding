vc-description: |-
  /--
  function_signature: "def will_it_fly(q: List[int], w: int) -> bool"
  docstring: |
      Write a function that returns True if the object q will fly, and False otherwise.
      The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is
      less than or equal the maximum possible weight w.
  test_cases:
    - input: ([1, 2], 5)
      expected_output: False
    - input: ([3, 2, 3], 1)
      expected_output: False
    - input: ([3, 2, 3], 9)
      expected_output: True
    - input: ([3], 5)
      expected_output: True
  -/

vc-preamble: |-
  import Imports.AllImports

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-code: |-
  def implementation (q: List Int) (w: Int) : Bool :=
  -- <vc-code>
  (List.Palindrome q) ∧ (List.sum q ≤ w)
  -- </vc-code>
  
  -- #test implementation [3, 2, 3] 9 = True
  -- #test implementation [1, 2] 5 = False
  -- #test implementation [3] 5 = True
  -- #test implementation [3, 2, 3] 1 = False
  -- #test implementation [1, 2, 3] 6 = False
  -- #test implementation [5] 5 = True

vc-spec: |-
  def problem_spec
  -- function signature
  (implementation: List Int → Int → Bool)
  -- inputs
  (q: List Int) (w: Int) :=
  -- spec
  let spec (result : Bool) :=
    (result → (List.Palindrome q)) ∧
    (result → (List.sum q ≤ w)) ∧
    (¬(List.Palindrome q) → ¬ result) ∧
    (¬(List.sum q ≤ w) → ¬ result)
  -- program termination
  ∃ result, implementation q w = result ∧
  spec result
  
  theorem correctness
  (q: List Int) (w: Int)
  : problem_spec implementation q w
  :=
  -- <vc-proof>
  by
  unfold problem_spec
  let result := implementation q w
  use result
  simp [result]
  simp [implementation]
  apply And.intro
  intro h_is_palindrome h_q_sum
  assumption
  apply And.intro
  intro h_palindrome
  simp [h_palindrome]
  intro h_q_sum h_palindrome
  assumption
  -- </vc-proof>

vc-postamble: |-
  -- #test implementation [3, 2, 3] 9 = True
  -- #test implementation [1, 2] 5 = False
  -- #test implementation [3] 5 = True
  -- #test implementation [3, 2, 3] 1 = False
  -- #test implementation [1, 2, 3] 6 = False
  -- #test implementation [5] 5 = True
  
  

