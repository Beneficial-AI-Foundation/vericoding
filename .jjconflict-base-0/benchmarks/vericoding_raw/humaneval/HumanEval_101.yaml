vc-description: |-
  /--
  function_signature: "def words_string(s: string) -> List[string]"
  docstring: |
      You will be given a string of words separated by commas or spaces. Your task is
      to split the string into words and return an array of the words.
  test_cases:
    - input: "Hi, my name is John"
      expected_output: ["Hi", "my", "name", "is", "John"]
    - input: "One, two, three, four, five, six"
      expected_output: ["One", "two", "three", "four", "five", "six"]
  -/

vc-preamble: |-
  import Imports.AllImports

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-code: |-
  def implementation (s: String) : List String :=
  -- <vc-code>
  List.map (fun s => (s.toList.filter (fun c => c != ',')).asString) ((s.splitOn).filter (fun s => s != "" ∧ s != ","))
  -- </vc-code>
  
  -- #test implementation "Hi, my name is John" = ["Hi", "my", "name", "is", "John"]
  -- #test implementation "One, two, three, four, five, six" = ["One", "two", "three", "four", "five", "six"]
  -- #test implementation "Hi, my name" = ["Hi", "my", "name"]
  -- #test implementation "One,, two, three, four, five, six," = ["One", "two", "three", "four", "five", "six"]
  -- #test implementation "" = []
  -- #test implementation "ahmed     , gamal" = ["ahmed", "gamal"]

vc-spec: |-
  def problem_spec
  -- function signature
  (implementation: String → List String)
  -- inputs
  (s: String) :=
  -- spec
  let spec (result: List String) :=
    let chars := s.toList;
    let first := s.takeWhile (fun c => c ≠ ',' ∧ c ≠ ' ');
    (result = [] ↔ (∀ x ∈ chars, x = ' ' ∨ x = ',') ∨ s = "") ∧
    (result ≠ [] ↔ result = [first] ++ (implementation (s.drop (first.length + 1))))
  
  -- program termination
  ∃ result, implementation s = result ∧
  spec result
  
  theorem correctness
  (s: String)
  : problem_spec implementation s
  :=
  -- <vc-proof>
  by
  sorry
  -- </vc-proof>

vc-postamble: |-
  -- #test implementation "Hi, my name is John" = ["Hi", "my", "name", "is", "John"]
  -- #test implementation "One, two, three, four, five, six" = ["One", "two", "three", "four", "five", "six"]
  -- #test implementation "Hi, my name" = ["Hi", "my", "name"]
  -- #test implementation "One,, two, three, four, five, six," = ["One", "two", "three", "four", "five", "six"]
  -- #test implementation "" = []
  -- #test implementation "ahmed     , gamal" = ["ahmed", "gamal"]
  
  

