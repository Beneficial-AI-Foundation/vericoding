/-!
{
  "name": "numpy.testing.assert_warns",
  "category": "Assertion Functions",
  "description": "Fail unless the given callable throws the specified warning",
  "url": "https://numpy.org/doc/stable/reference/generated/numpy.testing.assert_warns.html",
  "doc": "Fail unless the given callable throws the specified warning.\n\nA warning of class warning_class should be thrown by the callable when invoked with arguments args and keyword arguments kwargs. If a different type of warning is thrown, it will not be caught.\n\nIf called with all arguments other than the warning class omitted, may be used as a context manager.",
  "code": "def assert_warns(warning_class, *args, **kwargs):\n    \"\"\"\n    Fail unless the given callable throws the specified warning.\n\n    A warning of class warning_class should be thrown by the callable when\n    invoked with arguments args and keyword arguments kwargs.\n    If a different type of warning is thrown, it will not be caught.\n\n    If called with all arguments other than the warning class omitted, may be\n    used as a context manager::\n\n        with assert_warns(SomeWarning):\n            do_something()\n\n    The ability to be used as a context manager is new in NumPy v1.11.0.\n\n    Parameters\n    ----------\n    warning_class : class\n        The class defining the warning that \`func\` is expected to throw.\n    func : callable, optional\n        Callable to test\n    *args : Arguments\n        Arguments for \`func\`.\n    **kwargs : Kwargs\n        Keyword arguments for \`func\`.\n\n    Returns\n    -------\n    The value returned by \`func\`.\n\n    Examples\n    --------\n    >>> import warnings\n    >>> def deprecated_func(num):\n    ...     warnings.warn(\"Please upgrade\", DeprecationWarning)\n    ...     return num*num\n    >>> with np.testing.assert_warns(DeprecationWarning):\n    ...     assert deprecated_func(4) == 16\n    >>> # or passing a func\n    >>> ret = np.testing.assert_warns(DeprecationWarning, deprecated_func, 4)\n    >>> assert ret == 16\n    \"\"\"\n    if not args and not kwargs:\n        return _assert_warns_context(warning_class)\n    elif len(args) < 1:\n        if \"match\" in kwargs:\n            raise RuntimeError(\n                \"assert_warns does not use 'match' kwarg, \"\n                \"use pytest.warns instead\"\n            )\n        raise TypeError(\n            \"assert_warns expected at least a callable 'func', \"\n            \"but received: {}\".format(args or None)\n        )\n    else:\n        with _assert_warns_context(warning_class, name=args[0]):\n            return args[0](*args[1:], **kwargs)"
}
-/

-- TODO: Implement assert_warns
