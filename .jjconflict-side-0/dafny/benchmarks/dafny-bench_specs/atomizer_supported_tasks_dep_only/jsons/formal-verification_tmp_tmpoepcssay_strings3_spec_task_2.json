{
  "skeleton": "//ATOM_PLACEHOLDER_isPrefixPred\n\n//ATOM_PLACEHOLDER_isNotPrefixPred\n\n//ATOM_PLACEHOLDER_PrefixNegationLemma\n\n//ATOM_PLACEHOLDER_isPrefix\n//ATOM_PLACEHOLDER_isSubstringPred\n\n//ATOM_PLACEHOLDER_isNotSubstringPred\n\n//ATOM_PLACEHOLDER_SubstringNegationLemma\n\n//ATOM_PLACEHOLDER_isSubstring\n\n\n\n//ATOM_PLACEHOLDER_haveCommonKSubstringPred\n\n//ATOM_PLACEHOLDER_haveNotCommonKSubstringPred\n\n//ATOM_PLACEHOLDER_commonKSubstringLemma\n\n//ATOM_PLACEHOLDER_haveCommonKSubstring\n\n//ATOM_PLACEHOLDER_maxCommonSubstringLength\n\n\n\n\n\n",
  "atoms": {
    "isNotPrefixPred": [
      [],
      "// ATOM \n\npredicate isNotPrefixPred(pre:string, str:string)\n{\n\t(|pre| > |str|) || \n\tpre != str[..|pre|]\n}\n",
      "predicate"
    ],
    "isSubstring": [
      [
        "isSubstringPred",
        "isPrefix",
        "isNotSubstringPred"
      ],
      "// SPEC \n\nmethod isSubstring(sub: string, str: string) returns (res:bool)\n\tensures  res <==> isSubstringPred(sub, str)\n\tensures  res ==> isSubstringPred(sub, str)\n\t// ensures  !res ==> !isSubstringPred(sub, str)\n\tensures  isSubstringPred(sub, str) ==> res\n\tensures  isSubstringPred(sub, str) ==> res\n\tensures !res <==> isNotSubstringPred(sub, str) // This postcondition follows from the above lemma.\n{\n}\n",
      "method"
    ],
    "isNotSubstringPred": [
      [
        "isNotPrefixPred"
      ],
      "// ATOM \n\npredicate isNotSubstringPred(sub:string, str:string)\n{\n\t(forall i :: 0 <= i <= |str| ==> isNotPrefixPred(sub,str[i..]))\n}\n",
      "predicate"
    ],
    "isPrefixPred": [
      [],
      "// ATOM \npredicate isPrefixPred(pre:string, str:string)\n{\n\t(|pre| <= |str|) && \n\tpre == str[..|pre|]\n}\n",
      "predicate"
    ],
    "isSubstringPred": [
      [
        "isPrefixPred"
      ],
      "// ATOM \npredicate isSubstringPred(sub:string, str:string)\n{\n\t(exists i :: 0 <= i <= |str| &&  isPrefixPred(sub, str[i..]))\n}\n",
      "predicate"
    ],
    "isPrefix": [
      [
        "isPrefixPred",
        "isNotPrefixPred"
      ],
      "// SPEC \n\nmethod isPrefix(pre: string, str: string) returns (res:bool)\n\tensures !res <==> isNotPrefixPred(pre,str)\n\tensures  res <==> isPrefixPred(pre,str)\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_isPrefixPred": "isPrefixPred",
    "//ATOM_PLACEHOLDER_isNotPrefixPred": "isNotPrefixPred",
    "//ATOM_PLACEHOLDER_isPrefix": "isPrefix",
    "//ATOM_PLACEHOLDER_isSubstringPred": "isSubstringPred",
    "//ATOM_PLACEHOLDER_isNotSubstringPred": "isNotSubstringPred",
    "//ATOM_PLACEHOLDER_isSubstring": "isSubstring"
  }
}