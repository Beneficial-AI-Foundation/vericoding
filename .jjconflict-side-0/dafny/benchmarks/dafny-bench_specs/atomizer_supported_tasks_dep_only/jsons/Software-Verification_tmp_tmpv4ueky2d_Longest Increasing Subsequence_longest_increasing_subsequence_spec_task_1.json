{
  "skeleton": "//ATOM_PLACEHOLDER_longest_increasing_subsequence\n\n\n// Function\n//ATOM_PLACEHOLDER_find_max\n\n\n\n",
  "atoms": {
    "longest_increasing_subsequence": [
      [
        "find_max"
      ],
      "// SPEC \nmethod longest_increasing_subsequence(nums: array<int>) returns (max: int)\n    requires 1 <= nums.Length <= 2500\n    requires forall i :: 0 <= i < nums.Length ==> -10000 <= nums[i] <= 10000\n    // TODO: modify the ensures clause so that max is indeed equal to the longest increasing subsequence\n    ensures max >= 1\n{\n}\n",
      "method"
    ],
    "find_max": [
      [],
      "// ATOM \n\n\n// Function\nfunction find_max(x: int, y: int): int\n{\n    if x > y then x\n    else y\n}\n",
      "function"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_longest_increasing_subsequence": "longest_increasing_subsequence",
    "//ATOM_PLACEHOLDER_find_max": "find_max"
  }
}