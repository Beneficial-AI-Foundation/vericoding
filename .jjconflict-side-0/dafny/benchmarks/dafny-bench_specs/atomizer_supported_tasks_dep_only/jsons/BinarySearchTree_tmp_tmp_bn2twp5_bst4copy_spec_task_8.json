{
  "skeleton": "//ATOM_PLACEHOLDER_Tree//ATOM_PLACEHOLDER_BinarySearchTree\n\n//ATOM_PLACEHOLDER_maxValue\n\n//ATOM_PLACEHOLDER_minValue\n\n//ATOM_PLACEHOLDER_GetMin\n\n//ATOM_PLACEHOLDER_GetMax\n\n//ATOM_PLACEHOLDER_insert\n\n//ATOM_PLACEHOLDER_insertRecursion\n\n//ATOM_PLACEHOLDER_delete\n\n//ATOM_PLACEHOLDER_Inorder\n\n//ATOM_PLACEHOLDER_Postorder\n\n//ATOM_PLACEHOLDER_Main\n\n",
  "atoms": {
    "Main": [
      [
        "GetMin",
        "GetMax",
        "insert",
        "Inorder",
        "Postorder",
        "delete"
      ],
      "// SPEC \n\nmethod Main() {\n}\n",
      "method"
    ],
    "GetMin": [
      [],
      "// SPEC \n\nmethod GetMin(tree: Tree) returns (res: int)\n{\n}\n",
      "method"
    ],
    "delete": [
      [
        "GetMin",
        "BinarySearchTree"
      ],
      "// SPEC \n\nmethod delete(tree: Tree, value: int) returns (res: Tree)\n  requires BinarySearchTree(tree)\n  //ensures BinarySearchTree(res)\n  //ensures res != Empty ==> BinarySearchTree(res)\n{\n}\n",
      "method"
    ],
    "minValue": [
      [],
      "// ATOM \n\npredicate minValue(tree: Tree, min: int)\n{\n  match tree\n  case Empty => true\n  case Node(left,v,right) => (min < v) && minValue(left, min) && minValue(right, min)\n}\n",
      "predicate"
    ],
    "insert": [
      [
        "insertRecursion",
        "BinarySearchTree"
      ],
      "// SPEC \n\nmethod insert(tree: Tree, value : int) returns (res: Tree)\n  requires BinarySearchTree(tree)\n  ensures BinarySearchTree(res)\n{\n}\n",
      "method"
    ],
    "maxValue": [
      [],
      "// ATOM \n\npredicate maxValue(tree: Tree, max: int)\n{\n  match tree\n  case Empty => true\n  case Node(left,v,right) => (max > v) && maxValue(left, max) && maxValue(right, max)\n}\n",
      "predicate"
    ],
    "insertRecursion": [
      [
        "minValue",
        "maxValue",
        "BinarySearchTree"
      ],
      "// SPEC \n\nmethod insertRecursion(tree: Tree, value: int) returns (res: Tree)\n  requires BinarySearchTree(tree)\n  ensures res != Empty ==> BinarySearchTree(res)\n  ensures forall x :: minValue(tree, x) && x < value ==> minValue(res, x)\n  ensures forall x :: maxValue(tree, x) && x > value ==> maxValue(res, x)\n{\n}\n",
      "method"
    ],
    "BinarySearchTree": [
      [
        "minValue",
        "maxValue"
      ],
      "// ATOM \n\npredicate BinarySearchTree(tree: Tree)\n{\n  match tree\n  case Empty => true\n  case Node(_,_,_) =>\n    (tree.left == Empty || tree.left.value < tree.value)\n    && (tree.right == Empty || tree.right.value > tree.value)\n    && BinarySearchTree(tree.left) && BinarySearchTree(tree.right)\n    && minValue(tree.right, tree.value) && maxValue(tree.left, tree.value)\n}\n",
      "predicate"
    ],
    "Inorder": [
      [],
      "// SPEC \n\nmethod Inorder(tree: Tree)\n{\n}\n",
      "method"
    ],
    "GetMax": [
      [],
      "// SPEC \n\nmethod GetMax(tree: Tree) returns (res: int){\n}\n",
      "method"
    ],
    "Postorder": [
      [],
      "// SPEC \n\nmethod Postorder(tree: Tree)\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_BinarySearchTree": "BinarySearchTree",
    "//ATOM_PLACEHOLDER_maxValue": "maxValue",
    "//ATOM_PLACEHOLDER_minValue": "minValue",
    "//ATOM_PLACEHOLDER_GetMin": "GetMin",
    "//ATOM_PLACEHOLDER_GetMax": "GetMax",
    "//ATOM_PLACEHOLDER_insert": "insert",
    "//ATOM_PLACEHOLDER_insertRecursion": "insertRecursion",
    "//ATOM_PLACEHOLDER_delete": "delete",
    "//ATOM_PLACEHOLDER_Inorder": "Inorder",
    "//ATOM_PLACEHOLDER_Postorder": "Postorder",
    "//ATOM_PLACEHOLDER_Main": "Main"
  }
}