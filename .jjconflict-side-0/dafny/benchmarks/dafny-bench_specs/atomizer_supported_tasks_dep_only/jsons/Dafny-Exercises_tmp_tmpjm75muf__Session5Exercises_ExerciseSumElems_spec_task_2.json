{
  "skeleton": "//ATOM_PLACEHOLDER_SumR\n\n//ATOM_PLACEHOLDER_SumL\n\n\n//ATOM_PLACEHOLDER_concatLast\n//ATOM_PLACEHOLDER_concatFirst\n\n//ATOM_PLACEHOLDER_unknown_369 SumByPartsR(s:seq<int>,t:seq<int>)\nensures SumR(s+t) == SumR(s)+SumR(t)\n{ if (t==[])\n     {assert s+t == s;}\n  else if (s==[])\n     {assert s+t==t;}   \n   else\n     { \n       calc =={\n        SumR(s+t);\n        SumR((s+t)[..|s+t|-1])+(s+t)[|s+t|-1];\n        SumR((s+t)[..|s+t|-1])+t[|t|-1];\n        {concatLast(s,t);}\n        SumR(s+t[..|t|-1])+t[|t|-1];\n        {SumByPartsR(s,t[..|t|-1]);}\n        SumR(s)+SumR(t[..|t|-1])+t[|t|-1];\n        SumR(s)+SumR(t);\n\n       }\n     }\n\n\n}\n\n\n//ATOM_PLACEHOLDER_unknown_875 SumByPartsL(s:seq<int>,t:seq<int>)\nensures SumL(s+t) == SumL(s)+SumL(t)\n//Prove this\n{\n  if(t==[]){\n  }\n  else if(s==[]){\n  }\n  else{\n      calc == {\n        SumL(s+t);\n        (s+t)[0] + SumL((s+t)[1..]);\n        s[0] + SumL((s+t)[1..]);\n        {concatFirst(s,t);}\n        s[0] + SumL(s[1..] + t);\n        {SumByPartsL(s[1..], t);}\n        s[0] + SumL(s[1..]) + SumL(t);\n      }\n  }\n}\n\n\n\n\n//ATOM_PLACEHOLDER_unknown_1289 equalSumR(s:seq<int>,i:int,j:int)\nrequires 0<=i<=j<=|s|\nensures  SumR(s[i..j])==SumL(s[i..j])\n//Prove this\n{\n  if(s==[]){\n  }else{\n    if(i==j){\n    }\n    else{\n      calc == {\n        SumR(s[i..j]);\n        {\n        }\n        SumR(s[i..j-1]) + s[j-1];\n        {equalSumR(s, i, j-1);}\n        SumL(s[i..j-1]) + s[j-1];\n        {assert s[j-1] == SumL([s[j-1]]);}\n        SumL(s[i..j-1]) + SumL([s[j-1]]);\n        {SumByPartsL(s[i..j-1], [s[j-1]]);}\n        SumL(s[i..j-1] + [s[j-1]]);\n        {\n        }\n        SumL(s[i..j]);\n        /*SumR(s[i..j-1])+SumR(s[j..j]);\n        SumR(s[i..j-1]) + s[j..j];\n        SumL(s);*/\n      }\n    }\n  }\n}\n\n\n//ATOM_PLACEHOLDER_equalSumsV\n\n\n//ATOM_PLACEHOLDER_SumV\n\n\n//ATOM_PLACEHOLDER_ArrayFacts\n  \n\n//ATOM_PLACEHOLDER_sumElems\n\n//ATOM_PLACEHOLDER_sumElemsB\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "atoms": {
    "SumR": [
      [],
      "// ATOM \nfunction SumR(s:seq<int>):int\n{\n    if (s==[]) then 0\n    else SumR(s[..|s|-1])+s[|s|-1]\n}\n",
      "function"
    ],
    "sumElemsB": [
      [
        "equalSumsV",
        "SumL",
        "SumR"
      ],
      "// SPEC \n\nmethod sumElemsB(v:array<int>) returns (sum:int)\n//ensures sum==SumL(v[0..v.Length])\nensures sum==SumR(v[0..v.Length])\n{\n}\n",
      "method"
    ],
    "equalSumsV": [
      [
        "SumL",
        "SumR"
      ],
      "// ATOM \n\n\nlemma equalSumsV() \nensures forall v:array<int>,i,j | 0<=i<=j<=v.Length :: SumR(v[i..j])==SumL(v[i..j])\n //proving the forall\n  { forall v:array<int>,i,j | 0<=i<=j<=v.Length\n    ensures SumR(v[i..j])==SumL(v[i..j])\n    {equalSumR(v[..],i,j);}\n  }\n",
      "lemma"
    ],
    "SumL": [
      [],
      "// ATOM \n\nfunction SumL(s:seq<int>):int\n{\n    if (s==[]) then 0\n    else s[0]+SumL(s[1..])\n}\n",
      "function"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_SumR": "SumR",
    "//ATOM_PLACEHOLDER_SumL": "SumL",
    "//ATOM_PLACEHOLDER_equalSumsV": "equalSumsV",
    "//ATOM_PLACEHOLDER_sumElemsB": "sumElemsB"
  }
}