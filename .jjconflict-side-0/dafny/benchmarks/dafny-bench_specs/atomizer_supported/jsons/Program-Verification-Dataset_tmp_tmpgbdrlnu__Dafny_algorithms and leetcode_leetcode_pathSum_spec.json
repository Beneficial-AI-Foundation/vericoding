{
  "skeleton": "//https://leetcode.com/problems/path-sum\n/**\n//ATOM_PLACEHOLDER_hasPathSum;\n */\n\n//ATOM_PLACEHOLDER_TreeNode//ATOM_PLACEHOLDER_TreeSeq\n\n//ATOM_PLACEHOLDER_TreeSet\n\n//ATOM_PLACEHOLDER_isPath\n\n//ATOM_PLACEHOLDER_pathSum\n\n//ATOM_PLACEHOLDER_hasPathSum\n\n//ATOM_PLACEHOLDER_Test\n\n\n\n\n\n\n\n",
  "atoms": {
    "hasPathSum": [
      [
        "pathSum",
        "isPath"
      ],
      "// SPEC \n\nmethod hasPathSum(root: TreeNode, targetSum: int) returns (b: bool) \n    ensures b ==> exists p: seq<TreeNode> :: isPath(p, root) && pathSum(p) == targetSum\n{\n}\n",
      "method"
    ],
    "TreeNode": [
      [],
      "// ATOM \n\ndatatype TreeNode = Nil | Cons(val: nat, left: TreeNode, right: TreeNode)\n",
      "datatype"
    ],
    "TreeSeq": [
      [],
      "// ATOM \n\nfunction TreeSeq(root: TreeNode): seq<TreeNode> {\n    match root {\n        case Nil => [Nil]\n        case Cons(val, left, right) => [root]+TreeSeq(left)+TreeSeq(right)\n    }\n}\n",
      "function"
    ],
    "TreeSet": [
      [],
      "// ATOM \n\nfunction TreeSet(root: TreeNode): set<TreeNode> {\n    match root {\n        case Nil => {Nil}\n        case Cons(val, left, right) => TreeSet(left)+{root}+TreeSet(right)\n    }\n}\n",
      "function"
    ],
    "isPath": [
      [],
      "// ATOM \n\npredicate isPath(paths: seq<TreeNode>, root: TreeNode) {\n    if |paths| == 0 then false else match paths[0] {\n        case Nil => false\n        case Cons(val, left, right) => if |paths| == 1 then root == paths[0] else root == paths[0] && (isPath(paths[1..], left) || isPath(paths[1..], right))\n    }\n}\n",
      "predicate"
    ],
    "pathSum": [
      [],
      "// ATOM \n\nfunction pathSum(paths: seq<TreeNode>): nat {\n    if |paths| == 0 then 0 else match paths[0] {\n        case Nil => 0\n        case Cons(val, left, right) => val + pathSum(paths[1..])\n    }\n}\n",
      "function"
    ],
    "Test": [
      [],
      "// SPEC \n\nmethod Test() {\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_hasPathSum": "hasPathSum",
    "//ATOM_PLACEHOLDER_TreeNode": "TreeNode",
    "//ATOM_PLACEHOLDER_TreeSeq": "TreeSeq",
    "//ATOM_PLACEHOLDER_TreeSet": "TreeSet",
    "//ATOM_PLACEHOLDER_isPath": "isPath",
    "//ATOM_PLACEHOLDER_pathSum": "pathSum",
    "//ATOM_PLACEHOLDER_Test": "Test"
  }
}