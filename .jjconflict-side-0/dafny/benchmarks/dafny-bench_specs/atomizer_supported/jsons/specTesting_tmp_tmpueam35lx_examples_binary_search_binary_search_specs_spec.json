{
  "skeleton": "//ATOM_PLACEHOLDER_BinarySearch\n\n//ATOM_PLACEHOLDER_BinarySearchTransition\n\n//ATOM_PLACEHOLDER_BinarySearchDeterministic\n\n//ATOM_PLACEHOLDER_BinarySearchDeterministicTransition\n\n//ATOM_PLACEHOLDER_BinarySearchWrong1//ATOM_PLACEHOLDER_BinarySearchWrong1Transition\n\n//ATOM_PLACEHOLDER_BinarySearchWrong2//ATOM_PLACEHOLDER_BinarySearchWrong2Transition\n\n//ATOM_PLACEHOLDER_BinarySearchWrong3\n\n//ATOM_PLACEHOLDER_BinarySearchWrong3Transition\n\n//ATOM_PLACEHOLDER_BinarySearchWrong4//ATOM_PLACEHOLDER_BinarySearchWrong4Transition\n\n\n\n",
  "atoms": {
    "BinarySearch": [
      [],
      "// ATOM \nlemma BinarySearch(intSeq:seq<int>, key:int) returns (r:int)\n    // original\n    requires forall i,j | 0 <= i <= j < |intSeq| :: intSeq[i] <= intSeq[j]\n    ensures r >= 0 ==> r < |intSeq| && intSeq[r] == key\n    ensures r < 0 ==> forall i:nat | i < |intSeq| :: intSeq[i] != key\n{  \n    var lo:nat := 0;\n    var hi:nat := |intSeq|;\n    while lo < hi\n    {\n        var mid := (lo + hi) / 2;\n        if (intSeq[mid] < key) {\n            lo := mid + 1;\n        } else if (intSeq[mid] > key) {\n            hi := mid;\n        } else {\n            return mid;\n        }\n    }\n    return -1;\n}\n",
      "lemma"
    ],
    "BinarySearchTransition": [
      [],
      "// ATOM \n\npredicate BinarySearchTransition(intSeq:seq<int>, key:int, r:int)\n    requires (forall i,j | 0 <= i <= j < |intSeq| :: intSeq[i] <= intSeq[j])\n{\n    && (r >= 0 ==> r < |intSeq| && intSeq[r] == key)\n    && (r < 0 ==> forall i:nat | i < |intSeq| :: intSeq[i] != key)\n}\n",
      "predicate"
    ],
    "BinarySearchDeterministic": [
      [],
      "// ATOM \n\nlemma BinarySearchDeterministic(intSeq:seq<int>, key:int) returns (r:int)\n    requires forall i,j | 0 <= i <= j < |intSeq| :: intSeq[i] <= intSeq[j]\n    ensures r >= 0 ==> r < |intSeq| && intSeq[r] == key\n    ensures r < 0 ==> forall i:nat | i < |intSeq| :: intSeq[i] != key\n\n    // make it deterministic\n    ensures r < 0 ==> r == -1 // return -1 if not found\n    ensures r >= 0 ==> forall i:nat | i < r :: intSeq[i] < key // multiple matches return the first result\n\n{  \n    var lo:nat := 0;\n    var hi:nat := |intSeq|;\n    while lo < hi\n        || (forall i:nat | hi <= i < |intSeq| :: intSeq[i] >= key && exists i:nat | lo <= i < hi :: intSeq[i] == key)\n    {\n        var mid := (lo + hi) / 2;\n        if (intSeq[mid] < key) {\n            lo := mid + 1;\n        } else if (intSeq[mid] > key) {\n            hi := mid;\n        } else {\n            var inner_mid := (lo + mid) / 2;\n            if (intSeq[inner_mid] < key) {\n                lo := inner_mid + 1;\n            } else if (hi != inner_mid + 1) {\n                hi := inner_mid + 1;\n            } else {\n                if (intSeq[lo] == key) {\n                    return lo;\n                } else {\n                    lo := lo + 1;\n                }\n            }\n        }\n    }\n    return -1;\n}\n",
      "lemma"
    ],
    "BinarySearchDeterministicTransition": [
      [],
      "// ATOM \n\npredicate BinarySearchDeterministicTransition(intSeq:seq<int>, key:int, r:int)\n    requires (forall i,j | 0 <= i <= j < |intSeq| :: intSeq[i] <= intSeq[j])\n{\n    && (r >= 0 ==> r < |intSeq| && intSeq[r] == key)\n    && (r < 0 ==> forall i:nat | i < |intSeq| :: intSeq[i] != key)\n\n    // make it deterministic\n    && (r < 0 ==> r == -1) // return -1 if not found\n    && (r >= 0 ==> forall i:nat | i < r :: intSeq[i] < key)\n}\n",
      "predicate"
    ],
    "BinarySearchWrong1": [
      [],
      "// ATOM \n\nlemma BinarySearchWrong1(intSeq:seq<int>, key:int) returns (r:int)\n    // first element\n    requires forall i,j | 0 <= i <= j < |intSeq| :: intSeq[i] <= intSeq[j]\n    ensures r >= 0 ==> r < |intSeq| && intSeq[r] == key\n    ensures r < 0 ==> forall i:nat | 0 < i < |intSeq| :: intSeq[i] != key // i >= 0\n\n    // make it deterministic\n    ensures r < 0 ==> r == -1 // return -1 if not found\n    ensures r >= 0 ==> forall i:nat | i < r :: intSeq[i] < key // multiple matches return the first result\n",
      "lemma"
    ],
    "BinarySearchWrong1Transition": [
      [],
      "// ATOM \n\npredicate BinarySearchWrong1Transition(intSeq:seq<int>, key:int, r:int)\n    requires forall i,j | 0 <= i <= j < |intSeq| :: intSeq[i] <= intSeq[j]\n{\n    && (r >= 0 ==> r < |intSeq| && intSeq[r] == key)\n    && (r < 0 ==> forall i:nat | 0 < i < |intSeq| :: intSeq[i] != key) // i >= 0\n\n    // make it deterministic\n    && (r < 0 ==> r == -1) // return -1 if not found\n    && (r >= 0 ==> forall i:nat | i < r :: intSeq[i] < key)\n}\n",
      "predicate"
    ],
    "BinarySearchWrong2": [
      [],
      "// ATOM \n\nlemma BinarySearchWrong2(intSeq:seq<int>, key:int) returns (r:int)\n    // last element\n    requires forall i,j | 0 <= i <= j < |intSeq| :: intSeq[i] <= intSeq[j]\n    ensures r >= 0 ==> r < |intSeq| && intSeq[r] == key\n    ensures r < 0 ==> forall i:nat | 0 <= i < |intSeq| - 1 :: intSeq[i] != key // i < |intSeq|\n\n    // make it deterministic\n    ensures r < 0 ==> r == -1 // return -1 if not found\n    ensures r >= 0 ==> forall i:nat | i < r :: intSeq[i] < key // multiple matches return the first result\n",
      "lemma"
    ],
    "BinarySearchWrong2Transition": [
      [],
      "// ATOM \n\npredicate BinarySearchWrong2Transition(intSeq:seq<int>, key:int, r:int)\n    requires forall i,j | 0 <= i <= j < |intSeq| :: intSeq[i] <= intSeq[j]\n{\n    && (r >= 0 ==> r < |intSeq| && intSeq[r] == key)\n    && (r < 0 ==> forall i:nat | 0 <= i < |intSeq| - 1 :: intSeq[i] != key) // i < |intSeq|\n\n    // make it deterministic\n    && (r < 0 ==> r == -1) // return -1 if not found\n    && (r >= 0 ==> forall i:nat | i < r :: intSeq[i] < key)\n}\n",
      "predicate"
    ],
    "BinarySearchWrong3": [
      [],
      "// ATOM \n\nlemma BinarySearchWrong3(intSeq:seq<int>, key:int) returns (r:int)\n    // weaker spec\n    requires forall i,j | 0 <= i <= j < |intSeq| :: intSeq[i] <= intSeq[j]\n    ensures r < 0 || (r < |intSeq| && intSeq[r] == key) // post condition not correctly formed\n{\n    return -1;\n}\n",
      "lemma"
    ],
    "BinarySearchWrong3Transition": [
      [],
      "// ATOM \n\npredicate BinarySearchWrong3Transition(intSeq:seq<int>, key:int, r:int)\n    requires forall i,j | 0 <= i <= j < |intSeq| :: intSeq[i] <= intSeq[j]\n{\n    r < 0 || (r < |intSeq| && intSeq[r] == key)\n}\n",
      "predicate"
    ],
    "BinarySearchWrong4": [
      [],
      "// ATOM \n\nlemma BinarySearchWrong4(intSeq:seq<int>, key:int) returns (r:int)\n    // non-realistic\n    requires forall i,j | 0 <= i <= j < |intSeq| :: intSeq[i] <= intSeq[j]\n    ensures 0 <= r < |intSeq| && intSeq[r] == key\n",
      "lemma"
    ],
    "BinarySearchWrong4Transition": [
      [],
      "// ATOM \n\npredicate BinarySearchWrong4Transition(intSeq:seq<int>, key:int, r:int)\n    requires forall i,j | 0 <= i <= j < |intSeq| :: intSeq[i] <= intSeq[j]\n{\n    0 <= r < |intSeq| && intSeq[r] == key\n}\n",
      "predicate"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_BinarySearch": "BinarySearch",
    "//ATOM_PLACEHOLDER_BinarySearchTransition": "BinarySearchTransition",
    "//ATOM_PLACEHOLDER_BinarySearchDeterministic": "BinarySearchDeterministic",
    "//ATOM_PLACEHOLDER_BinarySearchDeterministicTransition": "BinarySearchDeterministicTransition",
    "//ATOM_PLACEHOLDER_BinarySearchWrong1": "BinarySearchWrong1",
    "//ATOM_PLACEHOLDER_BinarySearchWrong1Transition": "BinarySearchWrong1Transition",
    "//ATOM_PLACEHOLDER_BinarySearchWrong2": "BinarySearchWrong2",
    "//ATOM_PLACEHOLDER_BinarySearchWrong2Transition": "BinarySearchWrong2Transition",
    "//ATOM_PLACEHOLDER_BinarySearchWrong3": "BinarySearchWrong3",
    "//ATOM_PLACEHOLDER_BinarySearchWrong3Transition": "BinarySearchWrong3Transition",
    "//ATOM_PLACEHOLDER_BinarySearchWrong4": "BinarySearchWrong4",
    "//ATOM_PLACEHOLDER_BinarySearchWrong4Transition": "BinarySearchWrong4Transition"
  }
}