{
  "skeleton": "// program verifies\n//ATOM_PLACEHOLDER_expo\n\n//ATOM_PLACEHOLDER_unknown_105 Expon23(n: nat)\nrequires n >= 0\nensures ((expo(2,3*n) - expo(3,n)) % (2+3)) == 0\n{   \n    // base case\n    if (n == 0) {\n    }\n\n    else if (n == 1) {\n    }\n    else {\n        Expon23(n-1); // lemma proved for case n-1  \n        \n        // training dafny up\n\n        // training dafny up\n\n        // some more training\n\n        // not really needed\n\n\n    \n    }\n}\n\n        \n Expon23(n: nat)\nrequires n >= 0\nensures ((expo(2,3*n) - expo(3,n)) % (2+3)) == 0\n{   \n    // base case\n    if (n == 0) {\n    }\n\n    else if (n == 1) {\n    }\n    else {\n        Expon23(n-1); // lemma proved for case n-1  \n        \n        // training dafny up\n\n        // training dafny up\n\n        // some more training\n\n        // not really needed\n\n\n    \n    }\n}\n\n        \n",
  "atoms": {
    "expo": [
      [],
      "// ATOM \n// program verifies\nfunction expo(x:int, n:nat): int\n{\n    if n == 0 then 1\n    else x * expo(x, n-1)\n}\n",
      "function"
    ],
    "": [
      [],
      "// ATOM \n\nlemma {:induction false} Expon23(n: nat)\nrequires n >= 0\nensures ((expo(2,3*n) - expo(3,n)) % (2+3)) == 0\n{   \n    // base case\n    if (n == 0) {\n    }\n\n    else if (n == 1) {\n    }\n    else {\n        Expon23(n-1); // lemma proved for case n-1  \n        \n        // training dafny up\n\n        // training dafny up\n\n        // some more training\n\n        // not really needed\n\n\n    \n    }\n}\n",
      "lemma"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_expo": "expo",
    "//ATOM_PLACEHOLDER_unknown_105": "unknown_105"
  }
}