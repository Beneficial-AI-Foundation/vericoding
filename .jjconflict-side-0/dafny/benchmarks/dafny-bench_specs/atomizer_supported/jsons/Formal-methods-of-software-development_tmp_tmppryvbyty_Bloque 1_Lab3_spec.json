{
  "skeleton": "\n//ATOM_PLACEHOLDER_multipleReturns//ATOM_PLACEHOLDER_multipleReturns2//ATOM_PLACEHOLDER_multipleReturns3//ATOM_PLACEHOLDER_factorial\n\n// PROGRAMA VERIFICADOR DE WHILE\n//ATOM_PLACEHOLDER_ComputeFact\n\n//ATOM_PLACEHOLDER_ComputeFact2\n\n\n// n>=1 ==> 1 + 3 + 5 + ... + (2*n-1) = n*n\n\n//ATOM_PLACEHOLDER_Sqare\n\n\n//ATOM_PLACEHOLDER_sumSerie\n\n//ATOM_PLACEHOLDER_unknown_1152 Sqare_Lemma (n:int)\nrequires n>=1\nensures sumSerie(n) == n*n\n{\n    if n==1 {}\n    else{\n        Sqare_Lemma(n-1);\n\n        calc == {\n            sumSerie(n);\n            sumSerie(n-1) + 2*n -1;\n            {\n                Sqare_Lemma(n-1);\n            }\n            (n-1)*(n-1) + 2*n -1;\n            n*n-2*n+1 +2*n -1;\n            n*n;\n        }\n    }\n}\n\n\n//ATOM_PLACEHOLDER_Sqare2\n\n\n\n\n\n",
  "atoms": {
    "multipleReturns": [
      [],
      "// SPEC \n\nmethod multipleReturns (x:int, y:int) returns (more:int, less:int)\nrequires y > 0\nensures less < x < more\n",
      "method"
    ],
    "multipleReturns2": [
      [],
      "// SPEC \n\n\nmethod multipleReturns2 (x:int, y:int) returns (more:int, less:int)\nrequires y > 0\nensures more + less == 2*x\n",
      "method"
    ],
    "multipleReturns3": [
      [],
      "// SPEC \n\n// TODO: Hacer en casa\nmethod multipleReturns3 (x:int, y:int) returns (more:int, less:int)\nrequires y > 0\nensures more - less == 2*y\n",
      "method"
    ],
    "factorial": [
      [],
      "// ATOM \n\nfunction factorial(n:int):int\nrequires n>=0\n{\n    if n==0 || n==1 then 1 else n*factorial(n-1)\n}\n",
      "function"
    ],
    "ComputeFact": [
      [
        "factorial"
      ],
      "// SPEC \n\n// PROGRAMA VERIFICADOR DE WHILE\nmethod ComputeFact (n:int) returns (f:int)\nrequires n >=0\nensures f== factorial(n)\n\n{\n}\n",
      "method"
    ],
    "ComputeFact2": [
      [
        "factorial"
      ],
      "// SPEC \n\nmethod ComputeFact2 (n:int) returns (f:int)\nrequires n >=0\nensures f== factorial(n)\n{\n}\n",
      "method"
    ],
    "Sqare": [
      [],
      "// SPEC \n\n\n// n>=1 ==> 1 + 3 + 5 + ... + (2*n-1) = n*n\n\nmethod Sqare(a:int) returns (x:int)\nrequires a>=1\nensures x == a*a\n{\n}\n",
      "method"
    ],
    "sumSerie": [
      [],
      "// ATOM \n\n\nfunction sumSerie(n:int):int\nrequires n >=1 \n{\n    if n==1 then 1 else sumSerie(n-1) + 2*n -1\n}\n",
      "function"
    ],
    "": [
      [],
      "// ATOM \n\nlemma {:induction false} Sqare_Lemma (n:int)\nrequires n>=1\nensures sumSerie(n) == n*n\n{\n    if n==1 {}\n    else{\n        Sqare_Lemma(n-1);\n\n        calc == {\n            sumSerie(n);\n            sumSerie(n-1) + 2*n -1;\n            {\n                Sqare_Lemma(n-1);\n            }\n            (n-1)*(n-1) + 2*n -1;\n            n*n-2*n+1 +2*n -1;\n            n*n;\n        }\n    }\n}\n",
      "lemma"
    ],
    "Sqare2": [
      [],
      "// SPEC \n\n\nmethod Sqare2(a:int) returns (x:int)\nrequires a>=1\nensures x == a*a\n\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_multipleReturns": "multipleReturns",
    "//ATOM_PLACEHOLDER_multipleReturns2": "multipleReturns2",
    "//ATOM_PLACEHOLDER_multipleReturns3": "multipleReturns3",
    "//ATOM_PLACEHOLDER_factorial": "factorial",
    "//ATOM_PLACEHOLDER_ComputeFact": "ComputeFact",
    "//ATOM_PLACEHOLDER_ComputeFact2": "ComputeFact2",
    "//ATOM_PLACEHOLDER_Sqare": "Sqare",
    "//ATOM_PLACEHOLDER_sumSerie": "sumSerie",
    "//ATOM_PLACEHOLDER_unknown_1152": "unknown_1152",
    "//ATOM_PLACEHOLDER_Sqare2": "Sqare2"
  }
}