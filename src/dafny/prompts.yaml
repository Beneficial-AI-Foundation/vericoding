generate_code: |
  
  You are given a Dafny file with following five consecutive blocks. 
  separated by empty lines and some denoted by tags: 

  (start of file) 
  PREAMBLE (possibly empty): preamble code and definitions(do not change it).
  
  // <vc-helpers>
  HELPERS : auxiliary code (initially empty).
  // </vc-helpers>
  
  // <vc-spec>
  SPEC : specification of the main task (do not change it).
  // </vc-spec>
  
  // <vc-code>
  CODE : required task implementation (replace `assume false` with a verified implementation).
  // </vc-code>
  
  POSTAMBLE (possibly empty): postamble code and definitions (do not change it).
  (end of file)

  The task is to generate a Dafny implementation CODE that is verified and satisfies the given specifications.

  CRITICAL OUTPUT FORMAT REQUIREMENTS:
  - Output ONLY valid Dafny code - NO conversational text, explanations, or comments outside the code
  - Start immediately with the PREAMBLE section  
  - Use EXACT tag format: "// <tag>" and "// </tag>" with the double slashes
  - Include ALL five sections in the exact order shown
  - Do NOT add any text before the first line or after the last line

  YOUR OUTPUT must follow this EXACT structure:

  PREAMBLE 

  // <vc-helpers>
  HELPERS(updated) : updated auxiliary code or proofs
  // </vc-helpers>
  
  // <vc-spec>
  SPEC 
  // </vc-spec>
  
  // <vc-code>
  CODE(updated) : updated code or proofs
  // </vc-code>
  
  POSTAMBLE 

  CRITICAL RULES:
  - Do NOT change PREAMBLE, SPEC, or POSTAMBLE.
  - Do NOT use "assume" statements in your implementation.
  - Do NOT add conversational text like "Let me fix this" or explanations.
  - Ensure your implementation is complete and verifiable.
  - You may use any helper functions/lemmas already defined in the file.

  EXAMPLE OF CORRECT OUTPUT FORMAT:
  ```
  function abs(x: int): int {{
      if x >= 0 then x else -x
  }}

  // <vc-helpers>
  lemma AbsNonNegative(x: int)
      ensures abs(x) >= 0
  {{
      // proof follows from definition
  }}
  // </vc-helpers>

  // <vc-spec>
  method Max(a: int, b: int) returns (result: int)
      ensures result >= a && result >= b
      ensures result == a || result == b
  // </vc-spec>

  // <vc-code>
  {{
      if a >= b {{
          result := a;
      }} else {{
          result := b;
      }}
  }}
  // </vc-code>
  ```

  DAFNY FILE:
  {code}

fix_verification: |
  
  You are given a Dafny file that failed verification. 
  It has following five consecutive blocks separated by empty lines and some denoted by tags: 

  (start of file) 
  PREAMBLE (possibly empty): preamble code and definitions(do not change it).
  
  // <vc-helpers>
  HELPERS : auxiliary code (you may modify this section if needed).
  // </vc-helpers>
  
  // <vc-spec>
  SPEC : specification of the main task (do not change it).
  // </vc-spec>
  
  // <vc-code>
  CODE : implementation that FAILED verification (fix this section).
  // </vc-code>
  
  POSTAMBLE (possibly empty): postamble code and definitions (do not change it).
  (end of file)

  Your task is to fix the verification errors in the CODE and HELPERS sections while preserving all specifications.

  CRITICAL OUTPUT FORMAT REQUIREMENTS:
  - Output ONLY valid Dafny code - NO conversational text, explanations, or comments outside the code
  - Start immediately with the PREAMBLE section  
  - Use EXACT tag format: "// <tag>" and "// </tag>" with the double slashes
  - Include ALL five sections in the exact order shown
  - Do NOT add any text before the first line or after the last line

  YOUR OUTPUT must follow this EXACT structure:

  PREAMBLE 

  // <vc-helpers>
  HELPERS(updated) : updated auxiliary code or proofs to support verification
  // </vc-helpers>
  
  // <vc-spec>
  SPEC 
  // </vc-spec>
  
  // <vc-code>
  CODE(fixed) : fixed code or proofs that verify successfully
  // </vc-code>
  
  POSTAMBLE 

  CRITICAL RULES:
  - Do NOT change PREAMBLE, SPEC, or POSTAMBLE.
  - Do NOT use "assume" statements in your implementation.
  - Do NOT add conversational text like "The issue is" or explanations.
  - You can add proof annotations to fix verification errors.
  - You can change the implementation logic in CODE to fix verification errors.
  - You can add helper functions, predicates, and lemmas in HELPERS as needed.

  EXAMPLE OF CORRECT OUTPUT FORMAT:
  ```
  function abs(x: int): int {{
      if x >= 0 then x else -x
  }}

  // <vc-helpers>
  lemma AbsNonNegative(x: int)
      ensures abs(x) >= 0
  {{
      // proof follows from definition
  }}
  // </vc-helpers>

  // <vc-spec>
  method Max(a: int, b: int) returns (result: int)
      ensures result >= a && result >= b
      ensures result == a || result == b
  // </vc-spec>

  // <vc-code>
  {{
      if a >= b {{
          result := a;
      }} else {{
          result := b;
      }}
  }}
  // </vc-code>
  ```

  ERROR DETAILS from Dafny verification of the given code:
  {errorDetails}

  DAFNY FILE:
  {code}


