generate_code: |
  The task is to generate implementations for `<vc-code>` and `<vc-helpers>` sections in a Dafny file.
  
  INPUT: a Dafny file containing {placeholder_count} placeholder sections (`<vc-code>` and/or `<vc-helpers>` tags) that need to be filled in.
  
  OUTPUT: Return a JSON array with EXACTLY {placeholder_count} replacements (one for each placeholder section in the file), in order from top to bottom:
  ```json
  ["{{\n  prefixes := [];\n  // implementation here\n}}", "{{\n  // helper code\n}}", "{{\n  // second implementation\n}}"]
  ```
  
  CRITICAL RULES:
  - The ORIGINAL file contains EXACTLY {placeholder_count} placeholder sections - your JSON array must have EXACTLY {placeholder_count} elements
  - Provide exactly one replacement for each placeholder section in the file, in the exact order they appear (top to bottom)
  - Each replacement should be the exact code that will replace everything between the tags (`<vc-code>` or `<vc-helpers>`)
  - For `<vc-code>` sections: Provide main implementation code
  - For `<vc-helpers>` sections: Provide helper functions, lemmas, or utility code
  - Include opening/closing braces if they were in the original placeholder content
  - AVOID verification bypasses: `{{:axiom}}`, `assume` statements, or other verification shortcuts
  - Use valid Dafny syntax for all implementations
  - Satisfy all `requires` and `ensures` clauses from the method/function specifications
  - Do not add trivial or unnecessary annotations
  - Return ONLY a valid JSON array, no explanations or markdown
  
  DAFNY FILE WITH PLACEHOLDER SECTIONS:
  {code}

fix_verification: |
  The task is to fix implementations in `<vc-code>` and `<vc-helpers>` sections that failed verification.
  
  INPUT: The ORIGINAL file contains {placeholder_count} placeholder sections (`<vc-code>` and/or `<vc-helpers>` tags) that need to be fixed based on verification errors.
  
  OUTPUT: Return a JSON array with EXACTLY {placeholder_count} fixed replacements (one for each placeholder section in the ORIGINAL file), in order from top to bottom:
  ```json
  ["{{\n  prefixes := [];\n  // fixed implementation here\n}}", "{{\n  // fixed helper code\n}}", "{{\n  // second fixed implementation\n}}"]
  ```
  
  CRITICAL RULES:
  - The ORIGINAL file contains EXACTLY {placeholder_count} placeholder sections - your JSON array must have EXACTLY {placeholder_count} elements
  - Provide exactly one replacement for each placeholder section in the file, in the exact order they appear (top to bottom)
  - Each replacement should be the exact fixed code that will replace everything between the tags (`<vc-code>` or `<vc-helpers>`)
  - For `<vc-code>` sections: Provide main implementation code
  - For `<vc-helpers>` sections: Provide helper functions, lemmas, or utility code
  - Include opening/closing braces if they were in the original placeholder content
  - PRIORITY: If the error is a compilation error (syntax, type, resolution errors), fix it first before addressing verification issues
  - MINIMIZE verification bypasses: `{{:axiom}}`, `assume` statements, or other verification shortcuts
  - Use valid Dafny syntax for all implementations
  - Satisfy all `requires` and `ensures` clauses from the method/function specifications
  - Do not add trivial or unnecessary annotations
  - Add comment `/* code modified by LLM (iteration {iteration}): [brief description] */` before modified code
  - Return ONLY a valid JSON array, no explanations or markdown
  
  ERROR DETAILS from Dafny verification:
  {errorDetails}

  ORIGINAL FILE (for context):
  {original_code}

  CURRENT ITERATION FILE (with failed implementations to learn from):
  {code}
