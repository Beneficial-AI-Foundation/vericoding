generate_code: |
    The task is to generate verifiable implementations for `<vc-code>` and `<vc-helpers>` sections in a Dafny file.
  
    TURN 1 of {max_iterations}: This is the initial code generation phase. You have {max_iterations} total turns to get this right, so you can iterate and improve.
  
    INPUT: a Dafny file containing {placeholder_count} placeholder sections (`<vc-code>` and/or `<vc-helpers>` tags) that need to be filled in. 
    Optionally, the file may start with a section <vc-description> that describes the main task. 
  
    OUTPUT: Return a JSON array with EXACTLY {placeholder_count} replacements (one for each placeholder section in the file), in order from top to bottom:
    ```json
    ["function min(a: int, b: int): int {{ if a < b then a else b }}", "{{\n  result := ComputeResult(n, pos);\n}}"]
    ```
    CRITICAL: Respond with ONLY a JSON array. No explanations, reasoning, or markdown. Start with [ and end with ].

    SECTION-SPECIFIC RULES:
  
    **For `<vc-helpers>` sections:**
    - Provide complete helper function/lemma definitions only
    - Each helper should be a standalone function/predicate/lemma with proper signature
  
    **For `<vc-code>` sections:**
    - Provide method body implementation code ONLY
    - Always include opening/closing braces: `{{\n  \n}}`
    - Example: `{{\n  result := min(a, b) + 1;\n}}`
    - This is where you call helper functions and implement the main logic
    - Include variable declarations, assignments, and control flow
  
    CRITICAL RULES:
    - The ORIGINAL file contains EXACTLY {placeholder_count} placeholder sections - your JSON array must have EXACTLY {placeholder_count} elements
    - Provide exactly one replacement for each placeholder section in the file, in the exact order they appear (top to bottom)
    - Each replacement should be the exact code that will replace everything between the tags
    - NEVER use verification bypasses: `{{:axiom}}`, `assume` statements, or other annotations that bypass verification 
    - Use valid Dafny syntax for all implementations
    - Satisfy all `requires` and `ensures` clauses from the method/function specifications
    - Do not add trivial or unnecessary annotations
    - Return ONLY a valid JSON array, no explanations or markdown
    - DO NOT include any reasoning, explanations, or commentary
    - Your response must start with [ and end with ]
    - Each JSON string must be properly escaped with double quotes
  

  
    DAFNY FILE WITH PLACEHOLDER SECTIONS:
    {code}

fix_verification: |
  The task is to fix implementations in `<vc-code>` and `<vc-helpers>` sections that failed verification.
  
  TURN {iteration} of {max_iterations}: You are making progress and have multiple turns to iterate and improve your implementation.
  
  INPUT: The ORIGINAL file contains {placeholder_count} placeholder sections (`<vc-code>` and/or `<vc-helpers>` tags) that need to be fixed based on verification errors.
  Optionally, the file may start with a section <vc-description> that describes the main task. 
  
  OUTPUT: Return a JSON array with EXACTLY {placeholder_count} fixed replacements (one for each placeholder section in the ORIGINAL file), in order from top to bottom:
  ```json
  ["function min(a: int, b: int): int {{ if a < b then a else b }}", "{{\n  result := min(a, b) + 1;\n}}"]
  ```
  CRITICAL: Respond with ONLY a JSON array. No explanations, reasoning, or markdown. Start with [ and end with ].
 
  SECTION-SPECIFIC RULES:
  
  **For `<vc-helpers>` sections:**
  - Provide COMPLETE helper function/lemma definitions only
  - Each helper should be a standalone function/predicate/lemma with proper signature
  - Add comment `/* helper modified by LLM (iteration {iteration}): [brief description] */` before modified helpers
  
  **For `<vc-code>` sections:**
  - Provide method body implementation code ONLY
  - Always include opening/closing braces: `{{\n  \n}}`
  - Example: `{{\n  result := min(a, b) + 1;\n}}`
  - This is where you call helper functions and implement the main logic
  - Include variable declarations, assignments, and control flow
  - Add comment `/* code modified by LLM (iteration {iteration}): [brief description] */` at the start of method body
  
  CRITICAL RULES:
  - The ORIGINAL file contains EXACTLY {placeholder_count} placeholder sections - your JSON array must have EXACTLY {placeholder_count} elements
  - Provide exactly one replacement for each placeholder section in the file, in the exact order they appear (top to bottom)
  - Each replacement should be the exact fixed code that will replace everything between the tags
  - PRIORITY: If the error is a compilation error (syntax, type, resolution errors), fix it first before addressing verification issues
  - NEVER use verification bypasses: `{{:axiom}}`, `assume` statements, or other annotations that bypass verification 
  - Use valid Dafny syntax for all implementations
  - Satisfy all `requires` and `ensures` clauses from the method/function specifications
  - Do not add trivial or unnecessary annotations
  - Return ONLY a valid JSON array, no explanations or markdown
  - DO NOT include any reasoning, explanations, or commentary
  - Your response must start with [ and end with ]
  - Each JSON string must be properly escaped with double quotes
  
   
  ERROR DETAILS from Dafny verification:
  {errorDetails}

  ORIGINAL FILE (for context):
  {original_code}

  CURRENT ITERATION FILE (with failed implementations to learn from):
  {code}
