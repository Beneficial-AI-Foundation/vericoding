generate_code: |
  The task is to generate implementations and proofs for "sorry" placeholders in a Lean file.
  
  INPUT: a Lean file containing "sorry" keywords in place of desired implementations and proofs.
  
  OUTPUT: Return a JSON array with one replacement for each "sorry" in the file, in order from top to bottom:
  ```json
  ["first_implementation", "second_proof", "third_implementation"]
  ```
  
  CRITICAL RULES:
  - COUNT the "sorry" keywords in the ORIGINAL file first - your JSON array must have exactly that many elements
  - Provide exactly one replacement for each "sorry" in the file, in the exact order they appear (top to bottom)
  - Each replacement should be the exact code/proof that goes where "sorry" appears
  - IMPORTANT: Your replacement text goes directly where the "sorry" is - if you need helper functions, define them inline within the replacement
  - AVOID verification bypasses: "sorry", "axiom", "unsafe", "Unchecked.cast", or "@[extern]"
  - You may use "sorry" temporarily in early iterations to get error feedback, but must remove all verification bypasses for final success
  - Use valid Lean syntax for all replacements
  - You may include helper definitions, theorems, and lemmas in replacements when needed
  - For helper definitions added within a replacement, add comment -- LLM HELPER before them
  - Return ONLY a valid JSON array, no explanations or markdown
  
  LEAN FILE WITH SORRY PLACEHOLDERS:
  {code}

fix_verification: |
  The task is to fix implementations and proofs that failed verification by providing replacements for any remaining "sorry" placeholders.
  
  INPUT: a Lean file that contains "sorry" keywords in place of implementations/proofs that need to be fixed based on verification errors.
  
  OUTPUT: Return a JSON array with one fixed replacement for each "sorry" in the file, in order from top to bottom:
  ```json
  ["fixed_implementation", "fixed_proof", "another_fixed_implementation"]
  ```
  
  CRITICAL RULES:
  - COUNT the "sorry" keywords in the ORIGINAL file first - your JSON array must have exactly that many elements
  - Provide exactly one replacement for each "sorry" in the file, in the exact order they appear (top to bottom)
  - Each replacement should be the exact fixed code/proof that goes where "sorry" appears
  - IMPORTANT: Your replacement text goes directly where the "sorry" is - if you need helper functions, define them inline within the replacement
  - MINIMIZE verification bypasses: "sorry", "axiom", "unsafe", "Unchecked.cast", or "@[extern]"
  - You may use "sorry" temporarily to get error feedback, but each iteration should remove more verification bypasses
  - Use valid Lean syntax for all replacements
  - You may include helper definitions, theorems, and lemmas in replacements when needed
  - For helper definitions added within a replacement, add comment -- LLM HELPER before them
  - Return ONLY a valid JSON array, no explanations or markdown
  
  ITERATION STRATEGY: You can use "sorry" strategically in intermediate iterations to understand the proof structure and get helpful error messages from Lean. However, you must progressively remove all verification bypasses - the final iteration must have zero verification bypasses for success.
  
  ERROR DETAILS from Lean verification:
  {errorDetails}

  ORIGINAL FILE (for context):
  {original_code}

  CURRENT ITERATION FILE (with failed implementations to learn from):
  {code}
