generate_code: |
  The task is to generate implementations and proofs for "sorry" placeholders and `<vc-helpers>` sections in a Lean file.
  
  TURN 1 of {max_iterations}: This is the initial code generation phase. You have {max_iterations} total turns to get this right, so you can be strategic about using "sorry" temporarily in early iterations.
  
  INPUT: a Lean file containing {placeholder_count} placeholder sections ("sorry" keywords and/or `<vc-helpers>` tags) in place of desired implementations, proofs, and helper code.
  
  OUTPUT: Return a JSON array with EXACTLY {placeholder_count} replacements (one for each placeholder in the file), in order from top to bottom:
  ```json
  ["first_implementation", "helper_code", "second_proof", "third_implementation"]
  ```
  
  CRITICAL RULES:
  - The ORIGINAL file contains EXACTLY {placeholder_count} placeholder sections - your JSON array must have EXACTLY {placeholder_count} elements
  - Provide exactly one replacement for each placeholder in the file, in the exact order they appear (top to bottom)
  - For "sorry" placeholders: Each replacement should be the exact code/proof that goes where "sorry" appears
  - For `<vc-helpers>` sections: Provide helper definitions, theorems, lemmas, or utility code
  - IMPORTANT: Your replacement text goes directly where the placeholder is - if you need helper functions for "sorry", define them inline within the replacement
  - RESTRICTED AREAS: You CANNOT modify or replace "sorry" keywords that appear inside `<vc-preamble>` sections - these are protected and not counted in the {placeholder_count}
  - AVOID verification bypasses: "sorry", "admit", "axiom", "unsafe", "Unchecked.cast", or "@[extern]"
  - You may use "sorry" temporarily in early iterations to get error feedback, but must remove all verification bypasses for final success
  - Use valid Lean syntax for all replacements
  - You may include helper definitions, theorems, and lemmas in replacements when needed
  - For helper definitions added within a replacement, add comment -- LLM HELPER before them
  - Return ONLY a valid JSON array, no explanations or markdown
  
  LEAN FILE WITH PLACEHOLDERS:
  {code}

fix_verification: |
  The task is to fix implementations and proofs that failed verification by providing replacements for any remaining "sorry" placeholders and `<vc-helpers>` sections.
  
  TURN {iteration} of {max_iterations}: You are making progress - this gives you room to iterate and improve. Use "sorry" strategically if needed in intermediate turns.
  
  INPUT: The ORIGINAL file contains {placeholder_count} placeholder sections ("sorry" keywords and/or `<vc-helpers>` tags) that need to be replaced based on verification errors.
  
  OUTPUT: Return a JSON array with EXACTLY {placeholder_count} fixed replacements (one for each placeholder in the ORIGINAL file), in order from top to bottom:
  ```json
  ["fixed_implementation", "fixed_helper_code", "fixed_proof", "another_fixed_implementation"]
  ```
  
  CRITICAL RULES:
  - The ORIGINAL file contains EXACTLY {placeholder_count} placeholder sections - your JSON array must have EXACTLY {placeholder_count} elements
  - Provide exactly one replacement for each placeholder in the file, in the exact order they appear (top to bottom)
  - For "sorry" placeholders: Each replacement should be the exact fixed code/proof that goes where "sorry" appears
  - For `<vc-helpers>` sections: Provide fixed helper definitions, theorems, lemmas, or utility code
  - IMPORTANT: Your replacement text goes directly where the placeholder is - if you need helper functions for "sorry", define them inline within the replacement
  - RESTRICTED AREAS: You CANNOT modify or replace "sorry" keywords that appear inside `<vc-preamble>` sections - these are protected and not counted in the {placeholder_count}
  - MINIMIZE verification bypasses: "sorry", "admit", "axiom", "unsafe", "Unchecked.cast", or "@[extern]"
  - You may use "sorry" temporarily to get error feedback, but each iteration should remove more verification bypasses
  - Use valid Lean syntax for all replacements
  - You may include helper definitions, theorems, and lemmas in replacements when needed
  - For helper definitions added within a replacement, add comment -- LLM HELPER before them
  - Return ONLY a valid JSON array, no explanations or markdown
  
  ITERATION STRATEGY: You can use "sorry" strategically in intermediate iterations to understand the proof structure and get helpful error messages from Lean. However, you must progressively remove all verification bypasses - the final iteration must have zero verification bypasses for success.
  
  ERROR DETAILS from Lean verification:
  {errorDetails}

  ORIGINAL FILE (for context):
  {original_code}

  CURRENT ITERATION FILE (with failed implementations to learn from):
  {code}
