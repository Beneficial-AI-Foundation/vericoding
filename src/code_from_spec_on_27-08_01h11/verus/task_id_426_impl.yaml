vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-


vc-spec: |-
  fn filter_odd_numbers(arr: &Vec<u32>) -> (odd_list: Vec<u32>)
      // post-conditions-start
      ensures
          odd_list@ == arr@.filter(|x: u32| x % 2 != 0),
      // post-conditions-end

vc-code: |-
  {
      let mut odd_list = Vec::new();
      let mut i = 0;
      while i < arr.len()
          invariant
              i <= arr.len(),
              odd_list@ == arr@.subrange(0, i as int).filter(|x: u32| x % 2 != 0),
          decreases arr.len() - i,
      {
          if arr[i] % 2 != 0 {
              odd_list.push(arr[i]);
              proof {
                  assert(arr@.subrange(0, (i + 1) as int) == arr@.subrange(0, i as int).push(arr[i]));
                  assert(arr@.subrange(0, (i + 1) as int).filter(|x: u32| x % 2 != 0) == 
                         arr@.subrange(0, i as int).filter(|x: u32| x % 2 != 0).push(arr[i]));
              }
          } else {
              proof {
                  assert(arr@.subrange(0, (i + 1) as int) == arr@.subrange(0, i as int).push(arr[i]));
                  assert(arr@.subrange(0, (i + 1) as int).filter(|x: u32| x % 2 != 0) == 
                         arr@.subrange(0, i as int).filter(|x: u32| x % 2 != 0));
              }
          }
          i += 1;
      }
      proof {
          assert(i == arr.len());
          assert(arr@.subrange(0, arr.len() as int) == arr@);
          assert(odd_list@ == arr@.filter(|x: u32| x % 2 != 0));
      }
      odd_list
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

