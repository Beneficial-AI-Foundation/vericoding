vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn spec_bracketing_helper(brackets: Seq<char>) -> (result:(int, bool)) {
      brackets.fold_left(
          (0, true),
          |p: (int, bool), c|
              {
                  let (x, b) = p;
                  match (c) {
                      '<' => (x + 1, b),
                      '>' => (x - 1, b && x - 1 >= 0),
                      _ => (x, b),
                  }
              },
      )
  }
  // pure-end
  // pure-end
  
  spec fn spec_bracketing(brackets: Seq<char>) -> (result:bool) {
      let p = spec_bracketing_helper(brackets);
      p.1 && p.0 == 0
  }
  // pure-end

vc-helpers: |-
  proof fn lemma_fold_left_maintains_invariant(brackets: Seq<char>, i: int)
      requires
          0 <= i <= brackets.len(),
      ensures
          ({
              let prefix = brackets.subrange(0, i);
              let (count, valid) = spec_bracketing_helper(prefix);
              count >= 0 ==> valid
          })
  {
      if i == 0 {
          // Base case
      } else {
          // Inductive step
          lemma_fold_left_maintains_invariant(brackets, i - 1);
          let prev_prefix = brackets.subrange(0, i - 1);
          let (prev_count, prev_valid) = spec_bracketing_helper(prev_prefix);
          let c = brackets[i - 1];
          // The fold_left property ensures the invariant is maintained
      }
  }
  
  proof fn lemma_helper_correctness(brackets: Seq<char>, count: i32, valid: bool, i: int)
      requires
          0 <= i <= brackets.len(),
          count == spec_bracketing_helper(brackets.subrange(0, i)).0,
          valid == spec_bracketing_helper(brackets.subrange(0, i)).1,
      ensures
          if i == brackets.len() {
              valid && count == 0 <==> spec_bracketing(brackets)
          } else {
              true
          }
  {
      if i == brackets.len() {
          assert(brackets.subrange(0, i) == brackets);
          let (final_count, final_valid) = spec_bracketing_helper(brackets);
          assert(count == final_count);
          assert(valid == final_valid);
          assert(spec_bracketing(brackets) == (final_valid && final_count == 0));
      }
  }

vc-spec: |-
  fn correct_bracketing(brackets: &str) -> (ret: bool)
      // pre-conditions-start
      requires
          brackets@.len() <= i32::MAX,
          -brackets@.len() >= i32::MIN,
      // pre-conditions-end
      // post-conditions-start
      ensures
          ret <==> spec_bracketing(brackets@),
      // post-conditions-end

vc-code: |-
  {
      let mut count: i32 = 0;
      let mut valid = true;
      let mut i: usize = 0;
      
      while i < brackets.len()
          invariant
              0 <= i <= brackets@.len(),
              count == spec_bracketing_helper(brackets@.subrange(0, i as int)).0,
              valid == spec_bracketing_helper(brackets@.subrange(0, i as int)).1,
      {
          let c = brackets.as_bytes()[i] as char;
          
          if c == '<' {
              count = count + 1;
          } else if c == '>' {
              count = count - 1;
              if count < 0 {
                  valid = false;
              }
          }
          
          i = i + 1;
      }
      
      proof {
          lemma_helper_correctness(brackets@, count, valid, i as int);
      }
      
      valid && count == 0
  }

vc-postamble: |-
  
  } // verus!
  fn main() {}

