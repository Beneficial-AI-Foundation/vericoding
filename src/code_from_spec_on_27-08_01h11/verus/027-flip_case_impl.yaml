vc-description: |-


vc-preamble: |-
  
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_upper_case(c: char) -> (result:bool) {
      c >= 'A' && c <= 'Z'
  }
  // pure-end
  // pure-end
  
  spec fn is_lower_case(c: char) -> (result:bool) {
      c >= 'a' && c <= 'z'
  }
  // pure-end
  // pure-end
  
  spec fn shift_plus_32_spec(c: char) -> (result:char) {
      ((c as u8) + 32) as char
  }
  // pure-end
  // pure-end
  
  spec fn shift_minus_32_spec(c: char) -> (result:char) {
      ((c as u8) - 32) as char
  }
  // pure-end
  // pure-end
  
  spec fn flip_case_spec(c: char) -> (result:char) {
      if is_lower_case(c) {
          shift_minus_32_spec(c)
      } else if is_upper_case(c) {
          shift_plus_32_spec(c)
      } else {
          c
      }
  }
  // pure-end

vc-helpers: |-
  proof fn lemma_upper_case_bounds(c: char)
      requires is_upper_case(c)
      ensures 65 <= c as u8 <= 90
  {
  }
  
  proof fn lemma_lower_case_bounds(c: char)
      requires is_lower_case(c)
      ensures 97 <= c as u8 <= 122
  {
  }
  
  proof fn lemma_shift_plus_32_valid(c: char)
      requires is_upper_case(c)
      ensures (c as u8) + 32 <= 255
  {
      lemma_upper_case_bounds(c);
  }
  
  proof fn lemma_shift_minus_32_valid(c: char)
      requires is_lower_case(c)
      ensures (c as u8) >= 32
  {
      lemma_lower_case_bounds(c);
  }
  
  exec fn is_lower_case_exec(c: char) -> (result:bool)
      ensures result == is_lower_case(c)
  {
      c >= 'a' && c <= 'z'
  }
  
  exec fn is_upper_case_exec(c: char) -> (result:bool)
      ensures result == is_upper_case(c)
  {
      c >= 'A' && c <= 'Z'
  }

vc-spec: |-
  fn flip_case(str: &[char]) -> (flipped_case: Vec<char>)
      // post-conditions-start
      ensures
          str@.len() == flipped_case@.len(),
          forall|i: int| 0 <= i < str.len() ==> flipped_case[i] == flip_case_spec(#[trigger] str[i]),
      // post-conditions-end

vc-code: |-
  {
      let mut result = Vec::new();
      let mut i = 0;
      
      while i < str.len()
          invariant
              i <= str.len(),
              result.len() == i,
              forall|j: int| 0 <= j < i ==> result[j] == flip_case_spec(str[j])
          decreases str.len() - i
      {
          let c = str[i];
          let flipped = if is_lower_case_exec(c) {
              proof { lemma_shift_minus_32_valid(c); }
              ((c as u8) - 32) as char
          } else if is_upper_case_exec(c) {
              proof { lemma_shift_plus_32_valid(c); }
              ((c as u8) + 32) as char
          } else {
              c
          };
          result.push(flipped);
          i += 1;
      }
      
      result
  }

vc-postamble: |-
  
  } // verus!
  fn main() {}

