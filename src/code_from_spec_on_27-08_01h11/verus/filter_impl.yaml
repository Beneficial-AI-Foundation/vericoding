vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus!{

vc-helpers: |-
  spec fn filter_lemma(s: Seq<u64>, elem: u64) -> bool {
      if elem % 3 == 0 {
          s.push(elem).filter(|k: u64| k % 3 == 0) == s.filter(|k: u64| k % 3 == 0).push(elem)
      } else {
          s.push(elem).filter(|k: u64| k % 3 == 0) == s.filter(|k: u64| k % 3 == 0)
      }
  }
  
  proof fn filter_push_lemma(s: Seq<u64>, elem: u64)
      ensures filter_lemma(s, elem)
  {
      if elem % 3 == 0 {
          assert(s.push(elem).filter(|k: u64| k % 3 == 0) == s.filter(|k: u64| k % 3 == 0).push(elem));
      } else {
          assert(s.push(elem).filter(|k: u64| k % 3 == 0) == s.filter(|k: u64| k % 3 == 0));
      }
  }

vc-spec: |-
  fn myfun4(x: &Vec<u64>, y: &mut Vec<u64>)
      // pre-conditions-start
      requires 
          old(y).len() == 0,
      // pre-conditions-end
      // post-conditions-start
      ensures 
          y@ == x@.filter(|k:u64| k%3 == 0),
      // post-conditions-end

vc-code: |-
  {
      // impl-start
      for i in 0..x.len()
          invariant
              y@ == x@.subrange(0, i as int).filter(|k:u64| k%3 == 0),
      {
          if x[i] % 3 == 0 {
              y.push(x[i]);
          }
          proof {
              assert(x@.subrange(0, (i + 1) as int) == x@.subrange(0, i as int).push(x[i as int]));
              filter_push_lemma(x@.subrange(0, i as int), x[i as int]);
              if x[i as int] % 3 == 0 {
                  assert(y@.last() == x[i as int]);
                  assert(y@.drop_last() == x@.subrange(0, i as int).filter(|k:u64| k%3 == 0));
                  assert(y@ == y@.drop_last().push(y@.last()));
                  assert(x@.subrange(0, (i + 1) as int).filter(|k:u64| k%3 == 0) == 
                         x@.subrange(0, i as int).filter(|k:u64| k%3 == 0).push(x[i as int]));
              } else {
                  assert(x@.subrange(0, (i + 1) as int).filter(|k:u64| k%3 == 0) == 
                         x@.subrange(0, i as int).filter(|k:u64| k%3 == 0));
              }
          }
      }
      proof {
          assert(x@.subrange(0, x.len() as int) == x@);
      }
      // impl-end
  }

vc-postamble: |-
  
  }
  
  fn main() {}

