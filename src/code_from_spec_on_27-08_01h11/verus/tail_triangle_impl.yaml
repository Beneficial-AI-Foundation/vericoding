vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  
  verus!{
  
  spec fn triangle(n: nat) -> (result: nat)
      decreases n
  {
      if n == 0 {
          0
      } else {
          n + triangle((n - 1) as nat)
      }
  }
  // pure-end

vc-helpers: |-
  proof fn triangle_is_monotonic(i: nat, j: nat)
      requires
          i <= j,
      ensures
          triangle(i) <= triangle(j),
      decreases j
  {
      if i < j {
          triangle_is_monotonic(i, (j - 1) as nat);
      }
  }
  
  proof fn triangle_additive(n: nat, k: nat)
      requires
          n <= k,
      ensures
          triangle(k as nat) == triangle(n as nat) + (triangle(k as nat) - triangle(n as nat)),
      decreases k
  {
  }
  
  proof fn triangle_partial_sum(start: nat, end: nat)
      requires
          start <= end,
      ensures
          triangle(end) == triangle(start) + triangle_range(start + 1, end),
      decreases end
  {
      if start == end {
          assert(triangle_range(start + 1, end) == 0);
      } else {
          triangle_partial_sum(start, (end - 1) as nat);
          assert(triangle(end) == end + triangle((end - 1) as nat));
          assert(triangle((end - 1) as nat) == triangle(start) + triangle_range(start + 1, (end - 1) as nat));
          assert(triangle_range(start + 1, end) == end + triangle_range(start + 1, (end - 1) as nat));
      }
  }
  
  spec fn triangle_range(start: nat, end: nat) -> nat
      decreases end - start
  {
      if start > end {
          0
      } else {
          end + triangle_range(start, (end - 1) as nat)
      }
  }
  
  proof fn triangle_loop_invariant(idx: nat, n: nat, current_sum: nat)
      requires
          idx <= n,
          current_sum == triangle(idx as nat),
      ensures
          current_sum + triangle_range(idx + 1, n) == triangle(n),
      decreases n - idx
  {
      if idx == n {
          assert(triangle_range(idx + 1, n) == 0);
      } else {
          triangle_partial_sum(idx, n);
      }
  }
  
  proof fn triangle_step_lemma(current_idx: nat, n: nat, sum: nat)
      requires
          current_idx < n,
          sum == triangle(current_idx),
      ensures
          sum + (current_idx + 1) == triangle((current_idx + 1) as nat),
  {
      assert(triangle((current_idx + 1) as nat) == (current_idx + 1) + triangle(current_idx));
  }

vc-spec: |-
  fn tail_triangle(n: u32, idx: u32, sum: &mut u32)
      // pre-conditions-start
      requires
          idx <= n,
          *old(sum) == triangle(idx as nat),
          triangle(n as nat) < 0x1_0000_0000,
      // pre-conditions-end
      // post-conditions-start
      ensures
          *sum == triangle(n as nat),
      // post-conditions-end

vc-code: |-
  {
      let mut current_idx = idx;
      
      while current_idx < n
          invariant
              current_idx <= n,
              *sum == triangle(current_idx as nat),
              triangle(n as nat) < 0x1_0000_0000,
          decreases n - current_idx,
      {
          current_idx = current_idx + 1;
          proof {
              triangle_step_lemma((current_idx - 1) as nat, n as nat, *sum as nat);
          }
          *sum = *sum + current_idx;
      }
  }

vc-postamble: |-
  
  }
  
  fn main() {}

