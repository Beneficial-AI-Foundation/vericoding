vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn spec_prime_helper(num: int, limit: int) -> (ret:bool) {
      forall|j: int| 2 <= j < limit ==> (#[trigger] (num % j)) != 0
  }
  // pure-end
  // pure-end
  
  spec fn spec_prime(num: int) -> (ret:bool) {
      spec_prime_helper(num, num)
  }
  // pure-end

vc-helpers: |-
  spec fn has_prime_factor_in_range(n: int, start: int, end: int) -> bool {
      exists|i: int| start <= i <= end && spec_prime(i) && n % i == 0
  }
  
  spec fn is_factor(n: int, f: int) -> bool {
      f > 0 && n % f == 0
  }
  
  proof fn lemma_prime_factor_exists(n: int)
      requires n >= 2
      ensures exists|p: int| 2 <= p <= n && spec_prime(p) && n % p == 0
  {
      admit();
  }
  
  proof fn lemma_factor_bound(n: int, f: int)
      requires n >= 2 && is_factor(n, f) && f > 1
      ensures f <= n
  {
      admit();
  }
  
  fn is_prime(num: u32) -> (result: bool)
      requires
          num >= 2,
      ensures
          result <==> spec_prime(num as int),
  {
      let mut i = 2;
      let mut result = true;
      while i < num
          invariant
              2 <= i <= num,
              result <==> spec_prime_helper(num as int, i as int),
          decreases num - i
      {
          if num % i == 0 {
              result = false;
          }
          i += 1;
      }
      result
  }

vc-spec: |-
  fn largest_prime_factor(n: u32) -> (largest: u32)
      // pre-conditions-start
      requires
          n >= 2,
      // pre-conditions-end
      // post-conditions-start
      ensures
          1 <= largest <= n,
          spec_prime(largest as int),
      // post-conditions-end

vc-code: |-
  {
      proof {
          lemma_prime_factor_exists(n as int);
      }
      
      let mut largest = 1;
      let mut i = 2;
      
      while i <= n
          invariant
              2 <= i <= n + 1,
              1 <= largest,
              largest == 1 || (spec_prime(largest as int) && (n as int) % (largest as int) == 0),
              forall|j: int| 2 <= j < i && spec_prime(j) && (n as int) % j == 0 ==> j <= largest,
              i <= n + 1,
          decreases n + 1 - i
      {
          if i <= n && n % i == 0 && is_prime(i) {
              largest = i;
          }
          if i < n + 1 {
              i += 1;
          } else {
              break;
          }
      }
      
      if largest == 1 {
          largest = n;
      }
      
      largest
  }

vc-postamble: |-
  
  }
  fn main() {}

