vc-description: |-


vc-preamble: |-
  use vstd::arithmetic::mul::*;
  use vstd::prelude::*;
  
  verus! {
  
  spec fn spec_prime(p: int) -> (ret:bool) {
      p > 1 && forall|k: int| 1 < k < p ==> #[trigger] (p % k) != 0
  }
  // pure-end

vc-helpers: |-
  fn prime(p: u32) -> (ret: bool)
      ensures
          ret <==> spec_prime(p as int),
  {
      if p <= 1 {
          return false;
      }
      for k in 2..p
          invariant
              forall|j: int| 1 < j < k ==> #[trigger] (p as int % j) != 0,
              k <= p,
      {
          if p % k == 0 {
              return false;
          }
      }
      true
  }
  
  fn checked_mul_thrice(x: u32, y: u32, z: u32) -> (ret: Option<u32>)
      ensures
          ret.is_some() ==> ret.unwrap() as int == x as int * y as int * z as int,
          ret.is_none() ==> x as int * y as int * z as int > u32::MAX,
  {
      if x == 0 {
          return Some(0);
      }
      let prod2 = x.checked_mul(y);
      if prod2.is_some() {
          let prod3 = prod2.unwrap().checked_mul(z);
          if prod3.is_some() {
              let ans = prod3.unwrap();
              assert(ans as int == x as int * y as int * z as int);
              Some(ans)
          } else {
              assert(x as int * y as int * z as int > u32::MAX);
              None
          }
      } else {
          broadcast use group_mul_properties;
          assert(x as int * y as int * z as int >= y as int * z as int);
          None
      }
  }

vc-spec: |-
  fn is_multiply_prime(x: u32) -> (ans: bool)
      // pre-conditions-start
      requires
          x > 1,
      // pre-conditions-end
      // post-conditions-start
      ensures
          ans <==> exists|a: int, b: int, c: int|
              spec_prime(a) && spec_prime(b) && spec_prime(c) && x == a * b * c,
      // post-conditions-end

vc-code: |-
  {
      for a in 2..x
          invariant
              forall|a_int: int, b_int: int, c_int: int| 
                  2 <= a_int < a && spec_prime(a_int) && spec_prime(b_int) && spec_prime(c_int) 
                  ==> x as int != a_int * b_int * c_int,
      {
          if prime(a) && x % a == 0 {
              let remaining = x / a;
              for b in 2..remaining + 1
                  invariant
                      x as int == a as int * remaining as int,
                      remaining == x / a,
                      spec_prime(a as int),
                      forall|b_int: int, c_int: int| 
                          2 <= b_int < b && spec_prime(b_int) && spec_prime(c_int) 
                          ==> remaining as int != b_int * c_int,
              {
                  if prime(b) && remaining % b == 0 {
                      let c = remaining / b;
                      if c >= 2 && prime(c) {
                          proof {
                              assert(x as int == a as int * remaining as int);
                              assert(remaining as int == b as int * c as int) by {
                                  assert(remaining % b == 0);
                                  assert(remaining / b == c);
                                  assert(remaining as int == (remaining / b) as int * b as int);
                              }
                              broadcast use group_mul_properties;
                              assert(x as int == a as int * (b as int * c as int));
                              assert(a as int * (b as int * c as int) == a as int * b as int * c as int);
                          }
                          return true;
                      }
                  }
              }
          }
      }
      false
  }

vc-postamble: |-
  
  }
  fn main() {}

