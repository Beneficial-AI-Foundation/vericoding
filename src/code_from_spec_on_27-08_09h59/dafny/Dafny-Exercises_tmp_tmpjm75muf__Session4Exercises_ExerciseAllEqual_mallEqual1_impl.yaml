vc-preamble: |-
  predicate allEqual(s:seq<int>)
  {forall i,j::0<=i<|s| && 0<=j<|s| ==> s[i]==s[j] }
  //{forall i,j::0<=i<=j<|s| ==> s[i]==s[j] }
  //{forall i::0<i<|s| ==> s[i-1]==s[i]} 
  //{forall i::0<=i<|s|-1 ==> s[i]==s[i+1]}
  
  
  //Ordered indexes
  
  //All equal to first

vc-helpers: |-
  lemma allEqualImpliesEqualToFirst(s: seq<int>)
      requires allEqual(s)
      requires |s| > 0
      ensures forall i :: 0 <= i < |s| ==> s[i] == s[0]
  {
      forall i | 0 <= i < |s|
          ensures s[i] == s[0]
      {
          assert allEqual(s);
          assert s[i] == s[0];
      }
  }
  
  lemma equalToFirstImpliesAllEqual(s: seq<int>)
      requires |s| > 0
      requires forall i :: 0 <= i < |s| ==> s[i] == s[0]
      ensures allEqual(s)
  {
      forall i, j | 0 <= i < |s| && 0 <= j < |s|
          ensures s[i] == s[j]
      {
          assert s[i] == s[0];
          assert s[j] == s[0];
          assert s[i] == s[j];
      }
  }

vc-spec: |-
  // <vc-spec>
  method mallEqual1(v:array<int>) returns (b:bool)
  ensures b==allEqual(v[0..v.Length])
  // </vc-spec>

vc-code: |-
  {
      if v.Length == 0 {
          b := true;
          return;
      }
      
      var i := 1;
      while i < v.Length
          invariant 0 <= i <= v.Length
          invariant forall k :: 0 <= k < i ==> v[k] == v[0]
      {
          if v[i] != v[0] {
              b := false;
              return;
          }
          i := i + 1;
      }
      
      equalToFirstImpliesAllEqual(v[0..v.Length]);
      b := true;
  }

vc-postamble: |-


