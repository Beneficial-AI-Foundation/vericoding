vc-preamble: |-
  // Höfundur spurningar:  Snorri Agnarsson, snorri@hi.is
  // Permalink spurningar: https://rise4fun.com/Dafny/G4sc3
  
  // Höfundur lausnar:     Alexander Guðmundsson
  // Permalink lausnar:    https://rise4fun.com/Dafny/nujsu
  
  // Insertion sort með hjálp helmingunarleitar.

vc-helpers: |-
  lemma SeqSplit<T>(s: seq<T>, k: int)
      requires 0 <= k <= |s|
      ensures s == s[..k] + s[k..]
  {
  }
  
  lemma BinarySearchInvariant(s: seq<int>, x: int, lo: int, hi: int)
      requires forall p,q | 0 <= p < q < |s| :: s[p] <= s[q]
      requires 0 <= lo <= hi <= |s|
      requires forall i | 0 <= i < lo :: s[i] <= x
      requires forall i | hi <= i < |s| :: s[i] >= x
      ensures forall z | z in s[..lo] :: z <= x
      ensures forall z | z in s[hi..] :: z >= x
  {
  }

vc-spec: |-
  // <vc-spec>
  method Search( s: seq<int>, x: int ) returns ( k: int )
      // Ekki má breyta forskilyrðum eða eftirskilyrðum fallsins
      requires forall p,q | 0 <= p < q < |s| :: s[p] <= s[q];
      ensures 0 <= k <= |s|;
      ensures forall i | 0 <= i < k :: s[i] <= x;
      ensures forall i | k <= i < |s| :: s[i] >= x;
      ensures forall z | z in s[..k] :: z <= x;
      ensures forall z | z in s[k..] :: z >= x;
      ensures s == s[..k]+s[k..];
  // </vc-spec>

vc-code: |-
  {
      var lo := 0;
      var hi := |s|;
      
      while lo < hi
          invariant 0 <= lo <= hi <= |s|
          invariant forall i | 0 <= i < lo :: s[i] <= x
          invariant forall i | hi <= i < |s| :: s[i] >= x
          invariant forall z | z in s[..lo] :: z <= x
          invariant forall z | z in s[hi..] :: z >= x
      {
          var mid := (lo + hi) / 2;
          
          if s[mid] <= x {
              lo := mid + 1;
          } else {
              hi := mid;
          }
      }
      
      k := lo;
      SeqSplit(s, k);
  }

vc-postamble: |-


