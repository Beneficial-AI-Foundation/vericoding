vc-preamble: |-
  function isMax(m: int, numbers: seq<int>): bool
  {
      m in numbers &&
      forall i :: 0 <= i < |numbers| ==> numbers[i] <= m
  
  }

vc-helpers: |-
  lemma isMaxPreservation(m: int, numbers: seq<int>, newNum: int)
  requires isMax(m, numbers)
  requires newNum <= m
  ensures isMax(m, numbers + [newNum])
  {
      assert m in numbers;
      assert m in numbers + [newNum];
      assert forall i :: 0 <= i < |numbers| ==> numbers[i] <= m;
      assert forall i :: 0 <= i < |numbers + [newNum]| ==> (numbers + [newNum])[i] <= m;
  }
  
  lemma isMaxNewElement(numbers: seq<int>, newNum: int)
  requires numbers != []
  requires forall x :: x in numbers ==> x <= newNum
  ensures isMax(newNum, numbers + [newNum])
  {
      assert newNum in numbers + [newNum];
      forall i | 0 <= i < |numbers + [newNum]|
      ensures (numbers + [newNum])[i] <= newNum
      {
          if i < |numbers| {
              assert (numbers + [newNum])[i] == numbers[i];
              assert numbers[i] in numbers;
          } else {
              assert i == |numbers|;
              assert (numbers + [newNum])[i] == newNum;
          }
      }
  }
  
  lemma maxInPrefix(numbers: seq<int>, i: int, maxVal: int)
  requires 0 <= i < |numbers|
  requires isMax(maxVal, numbers[0..i])
  requires numbers[i] <= maxVal
  ensures isMax(maxVal, numbers[0..(i+1)])
  {
      assert numbers[0..(i+1)] == numbers[0..i] + [numbers[i]];
      isMaxPreservation(maxVal, numbers[0..i], numbers[i]);
  }
  
  lemma newMaxInPrefix(numbers: seq<int>, i: int)
  requires 0 < i < |numbers|
  requires forall j :: 0 <= j < i ==> numbers[j] <= numbers[i]
  ensures isMax(numbers[i], numbers[0..(i+1)])
  {
      assert numbers[0..(i+1)] == numbers[0..i] + [numbers[i]];
      assert forall x :: x in numbers[0..i] ==> x <= numbers[i];
      isMaxNewElement(numbers[0..i], numbers[i]);
  }

vc-spec: |-
  // <vc-spec>
  method rolling_max(numbers: seq<int>) returns (result: seq<int>)
  requires numbers != []
  ensures |result| == |numbers|
  ensures forall i :: 0 < i < |result| ==> isMax(result[i], numbers[0..(i+1)])
  // </vc-spec>

vc-code: |-
  {
      result := [numbers[0]];
      var i := 1;
      
      while i < |numbers|
          invariant 1 <= i <= |numbers|
          invariant |result| == i
          invariant forall j :: 0 < j < |result| ==> isMax(result[j], numbers[0..(j+1)])
          invariant i > 0 ==> isMax(result[i-1], numbers[0..i])
      {
          var prevMax := result[i-1];
          if numbers[i] > prevMax {
              result := result + [numbers[i]];
              newMaxInPrefix(numbers, i);
          } else {
              result := result + [prevMax];
              maxInPrefix(numbers, i, prevMax);
          }
          i := i + 1;
      }
  }

vc-postamble: |-


