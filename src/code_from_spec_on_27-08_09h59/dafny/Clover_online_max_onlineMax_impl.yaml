vc-preamble: |-


vc-helpers: |-
  lemma MaxExists(a: array<int>, start: int, end: int)
    requires 0 <= start < end <= a.Length
    ensures exists i :: start <= i < end && forall j :: start <= j < end ==> a[j] <= a[i]
  {
    var maxVal := a[start];
    var maxIdx := start;
    var k := start + 1;
    while k < end
      invariant start < k <= end
      invariant start <= maxIdx < k
      invariant maxVal == a[maxIdx]
      invariant forall j :: start <= j < k ==> a[j] <= maxVal
    {
      if a[k] > maxVal {
        maxVal := a[k];
        maxIdx := k;
      }
      k := k + 1;
    }
  }
  
  lemma FindMaxValue(a: array<int>, start: int, end: int) returns (maxVal: int, maxIdx: int)
    requires 0 <= start < end <= a.Length
    ensures start <= maxIdx < end
    ensures maxVal == a[maxIdx]
    ensures forall i :: start <= i < end ==> a[i] <= maxVal
  {
    maxVal := a[start];
    maxIdx := start;
    var k := start + 1;
    while k < end
      invariant start < k <= end
      invariant start <= maxIdx < k
      invariant maxVal == a[maxIdx]
      invariant forall j :: start <= j < k ==> a[j] <= maxVal
    {
      if a[k] > maxVal {
        maxVal := a[k];
        maxIdx := k;
      }
      k := k + 1;
    }
  }

vc-spec: |-
  // <vc-spec>
  method onlineMax(a: array<int>, x: int) returns (ghost m:int, p:int)
    requires 1<=x<a.Length
    requires a.Length!=0
    ensures x<=p<a.Length
    ensures forall i::0<=i<x==> a[i]<=m
    ensures exists i::0<=i<x && a[i]==m
    ensures x<=p<a.Length-1 ==> (forall i::0<=i<p ==> a[i]<a[p])
    ensures (forall i::x<=i<a.Length && a[i]<=m) ==> p==a.Length-1
  // </vc-spec>

vc-code: |-
  {
    var maxVal := a[0];
    var maxIdx := 0;
    var i := 1;
    
    while i < x
      invariant 1 <= i <= x
      invariant 0 <= maxIdx < i
      invariant maxVal == a[maxIdx]
      invariant forall j :: 0 <= j < i ==> a[j] <= maxVal
    {
      if a[i] > maxVal {
        maxVal := a[i];
        maxIdx := i;
      }
      i := i + 1;
    }
    
    m := maxVal;
    
    var j := x;
    while j < a.Length && a[j] <= maxVal
      invariant x <= j <= a.Length
      invariant forall k :: x <= k < j ==> a[k] <= maxVal
      invariant maxVal == m
    {
      j := j + 1;
    }
    
    if j == a.Length {
      p := a.Length - 1;
    } else {
      p := j;
    }
  }

vc-postamble: |-


