vc-preamble: |-
  function sorted(a: array<int>) : bool
      reads a
  {
     forall i,j : int :: 0 <= i < j < a.Length ==> a[i] <= a[j]
  }

vc-helpers: |-
  lemma SortedProperty(a: array<int>, low: int, high: int, x: int)
      requires sorted(a)
      requires 0 <= low <= high < a.Length
      requires a[low] > x
      ensures forall i :: low <= i <= high ==> a[i] > x
  
  lemma SortedProperty2(a: array<int>, low: int, high: int, x: int)
      requires sorted(a)
      requires 0 <= low <= high < a.Length
      requires a[high] < x
      ensures forall i :: low <= i <= high ==> a[i] < x

vc-spec: |-
  // <vc-spec>
  method BinarySearch(a: array<int>, x: int) returns (index: int)
      requires sorted(a)
      ensures 0 <= index < a.Length ==> a[index] == x
      ensures index == -1 ==> forall i : int :: 0 <= i < a.Length ==> a[i] != x
  // </vc-spec>

vc-code: |-
  {
      if a.Length == 0 {
          return -1;
      }
      
      var low := 0;
      var high := a.Length - 1;
      
      while low <= high
          invariant 0 <= low <= a.Length
          invariant -1 <= high < a.Length
          invariant forall i :: 0 <= i < low ==> a[i] < x
          invariant forall i :: high < i < a.Length ==> a[i] > x
          decreases high - low
      {
          var mid := low + (high - low) / 2;
          
          if a[mid] == x {
              return mid;
          } else if a[mid] < x {
              low := mid + 1;
          } else {
              high := mid - 1;
          }
      }
      
      return -1;
  }

vc-postamble: |-


