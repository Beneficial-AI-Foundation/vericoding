vc-preamble: |-
  predicate sorted(a: array<int>)
     requires a != null
     reads a
  {
     forall j, k :: 0 <= j < k < a.Length ==> a[j] <= a[k]
  }

vc-helpers: |-
  lemma SortedProperty(a: array<int>, low: int, high: int, value: int)
      requires a != null && sorted(a)
      requires 0 <= low <= high < a.Length
      requires a[high] < value
      ensures forall k :: 0 <= k <= high ==> a[k] < value
  {
      forall k | 0 <= k <= high
          ensures a[k] < value
      {
          if k < high {
              assert a[k] <= a[high];
              assert a[high] < value;
              assert a[k] < value;
          } else {
              assert k == high;
              assert a[k] == a[high] < value;
          }
      }
  }
  
  lemma SortedPropertyUpper(a: array<int>, low: int, high: int, value: int)
      requires a != null && sorted(a)
      requires 0 <= low <= high < a.Length
      requires a[low] > value
      ensures forall k :: low <= k < a.Length ==> a[k] > value
  {
      forall k | low <= k < a.Length
          ensures a[k] > value
      {
          if k > low {
              assert a[low] <= a[k];
              assert a[low] > value;
              assert a[k] > value;
          } else {
              assert k == low;
              assert a[k] == a[low] > value;
          }
      }
  }

vc-spec: |-
  // <vc-spec>
  method BinarySearch(a: array<int>, value: int) returns (index: int)
     requires a != null && 0 <= a.Length && sorted(a)
     ensures 0 <= index ==> index < a.Length && a[index] == value
     ensures index < 0 ==> forall k :: 0 <= k < a.Length ==> a[k] != value
  // </vc-spec>

vc-code: |-
  {
      if a.Length == 0 {
          return -1;
      }
      
      var low := 0;
      var high := a.Length - 1;
      
      while low <= high
          invariant 0 <= low <= a.Length
          invariant -1 <= high < a.Length
          invariant forall k :: 0 <= k < low ==> a[k] < value
          invariant forall k :: high < k < a.Length ==> a[k] > value
          decreases high - low
      {
          var mid := low + (high - low) / 2;
          
          if a[mid] == value {
              return mid;
          } else if a[mid] < value {
              low := mid + 1;
          } else {
              high := mid - 1;
          }
      }
      
      return -1;
  }

vc-postamble: |-


