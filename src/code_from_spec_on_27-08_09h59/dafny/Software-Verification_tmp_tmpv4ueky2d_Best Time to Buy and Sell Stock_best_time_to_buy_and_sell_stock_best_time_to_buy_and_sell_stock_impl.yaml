vc-preamble: |-


vc-helpers: |-
  lemma MaxProfitProperty(prices: array<int>, max_profit: int, min_price: int, i: int)
      requires 0 <= i < prices.Length
      requires forall k :: 0 <= k <= i ==> min_price <= prices[k]
      requires forall j, k :: 0 <= j < k <= i ==> max_profit >= prices[k] - prices[j]
      requires max_profit >= prices[i] - min_price
      ensures forall j, k :: 0 <= j < k <= i ==> max_profit >= prices[k] - prices[j]
  {
  }
  
  lemma ExtendMaxProfit(prices: array<int>, max_profit: int, min_price: int, i: int)
      requires 0 <= i < prices.Length
      requires forall k :: 0 <= k < i ==> min_price <= prices[k]
      requires forall j, k :: 0 <= j < k < i ==> max_profit >= prices[k] - prices[j]
      requires max_profit >= prices[i] - min_price
      requires min_price <= prices[i]
      ensures forall j, k :: 0 <= j < k <= i ==> max_profit >= prices[k] - prices[j]
  {
      forall j, k | 0 <= j < k <= i
          ensures max_profit >= prices[k] - prices[j]
      {
          if k < i {
              assert max_profit >= prices[k] - prices[j];
          } else {
              assert k == i;
              assert max_profit >= prices[i] - prices[j];
          }
      }
  }

vc-spec: |-
  // <vc-spec>
  method best_time_to_buy_and_sell_stock(prices: array<int>) returns (max_profit: int)
      requires 1 <= prices.Length <= 100000
      requires forall i :: 0 <= i < prices.Length ==> 0 <= prices[i] <= 10000
      ensures forall i, j :: 0 <= i < j < prices.Length ==> max_profit >= prices[j] - prices[i]
  // </vc-spec>

vc-code: |-
  {
      max_profit := 0;
      var min_price := prices[0];
      var i := 0;
      
      while i < prices.Length
          invariant 0 <= i <= prices.Length
          invariant forall k :: 0 <= k < i ==> min_price <= prices[k]
          invariant forall j, k :: 0 <= j < k < i ==> max_profit >= prices[k] - prices[j]
          invariant max_profit >= 0
          invariant i > 0 ==> max_profit >= prices[i-1] - min_price
      {
          if prices[i] - min_price > max_profit {
              max_profit := prices[i] - min_price;
          }
          
          if prices[i] < min_price {
              min_price := prices[i];
          }
          
          ExtendMaxProfit(prices, max_profit, min_price, i);
          i := i + 1;
      }
  }

vc-postamble: |-


