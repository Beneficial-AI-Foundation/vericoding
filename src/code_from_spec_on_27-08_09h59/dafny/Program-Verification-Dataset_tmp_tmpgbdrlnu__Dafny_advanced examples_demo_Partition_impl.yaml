vc-preamble: |-


vc-helpers: |-


vc-spec: |-
  // <vc-spec>
  method Partition(a: array<int>) returns (lo: int, hi: int)
    modifies a
    ensures 0 <= lo <= hi <= a.Length
    ensures forall x | 0 <= x < lo :: a[x] < 0
    ensures forall x | lo <= x < hi :: a[x] == 0
    ensures forall x | hi <= x < a.Length :: a[x] > 0
  // </vc-spec>

vc-code: |-
  {
    lo := 0;
    hi := 0;
    
    while hi < a.Length
      invariant 0 <= lo <= hi <= a.Length
      invariant forall x | 0 <= x < lo :: a[x] < 0
      invariant forall x | lo <= x < hi :: a[x] == 0
      invariant forall x | hi <= x < a.Length :: a[x] > 0 || a[x] == 0 || a[x] < 0
      decreases a.Length - hi
    {
      if a[hi] < 0 {
        a[lo], a[hi] := a[hi], a[lo];
        lo := lo + 1;
        hi := hi + 1;
      } else if a[hi] == 0 {
        hi := hi + 1;
      } else {
        var j := a.Length - 1;
        while j > hi && a[j] > 0
          invariant hi <= j < a.Length
          invariant forall x | j < x < a.Length :: a[x] > 0
          invariant forall x | 0 <= x < lo :: a[x] < 0
          invariant forall x | lo <= x < hi :: a[x] == 0
          invariant a[hi] > 0
          decreases j - hi
        {
          j := j - 1;
        }
        
        if j == hi {
          break;
        }
        
        assert a[j] <= 0;
        a[hi], a[j] := a[j], a[hi];
        if a[hi] == 0 {
          hi := hi + 1;
        } else {
          assert a[hi] < 0;
          a[lo], a[hi] := a[hi], a[lo];
          lo := lo + 1;
          hi := hi + 1;
        }
      }
    }
  }

vc-postamble: |-


