vc-preamble: |-
  //Problem01
  //a)
  
  //b)
  //Problem04
  
  method FindMin(a: array<int>, lo: nat) returns (minIdx: nat)
      requires a != null && a.Length > 0 && lo < a.Length
      ensures lo <= minIdx < a.Length
      ensures forall x :: lo <= x < a.Length ==> a[minIdx] <= a[x]
  {
    assume{:axiom} false;
  }
  
  //Problem02
  ghost predicate sorted(a:seq<int>)
  {
      forall i | 0 < i < |a| :: a[i-1] <= a[i]     
  }

vc-helpers: |-
  lemma PreservesMultisetAfterSwap(a: array<int>, i: int, j: int, oldSeq: seq<int>)
      requires 0 <= i < a.Length && 0 <= j < a.Length
      requires oldSeq == a[..]
      ensures multiset(a[..]) == multiset(oldSeq)
  {
  }
  
  lemma SortedPrefix(a: seq<int>, k: int)
      requires 0 <= k <= |a|
      requires sorted(a)
      ensures sorted(a[..k])
  {
  }
  
  lemma MinElementProperty(a: array<int>, lo: nat, minIdx: nat)
      requires lo < a.Length
      requires lo <= minIdx < a.Length
      requires forall x :: lo <= x < a.Length ==> a[minIdx] <= a[x]
      ensures forall x :: 0 <= x < lo ==> forall y :: lo <= y < a.Length ==> true
  {
  }

vc-spec: |-
  // <vc-spec>
  method selectionSort(a: array<int>)
      modifies a
      //ensures multiset(a[..]) == multiset(old(a[..]))
      //ensures sorted(a[..])
  // </vc-spec>

vc-code: |-
  {
      var i := 0;
      while i < a.Length
          invariant 0 <= i <= a.Length
          invariant sorted(a[..i])
          invariant forall x, y :: 0 <= x < i && i <= y < a.Length ==> a[x] <= a[y]
      {
          var minIdx := FindMin(a, i);
          
          if minIdx != i {
              var temp := a[i];
              a[i] := a[minIdx];
              a[minIdx] := temp;
          }
          
          i := i + 1;
      }
  }

vc-postamble: |-
  //Problem03

