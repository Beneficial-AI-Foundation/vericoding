vc-preamble: |-


vc-helpers: |-
  lemma SquareMonotonic(a: int, b: int)
      requires 0 <= a <= b
      ensures a * a <= b * b
  {
  }
  
  lemma SquareStrictlyMonotonic(a: int, b: int)
      requires 0 <= a < b
      ensures a * a < b * b
  {
  }
  
  lemma SquareGrowth(i: int)
      requires i >= 0
      ensures (i + 1) * (i + 1) == i * i + 2 * i + 1
  {
  }
  
  lemma SquareWitness(n: int, i: int)
      requires n >= 0 && 0 <= i <= n && i * i == n
      ensures exists j: int :: 0 <= j <= n && j * j == n
  {
  }

vc-spec: |-
  // <vc-spec>
  method IsPerfectSquare(n: int) returns (result: bool)
      requires n >= 0
      ensures result == true ==> (exists i: int :: 0 <= i <= n && i * i == n)
      ensures result == false ==> (forall a: int :: 0 < a*a < n ==> a*a != n)
  // </vc-spec>

vc-code: |-
  {
      if n == 0 {
          SquareWitness(n, 0);
          return true;
      }
      
      var i := 0;
      while i * i < n
          invariant 0 <= i
          invariant forall j: int :: 0 <= j < i ==> j * j < n
          decreases n - i * i
      {
          SquareGrowth(i);
          i := i + 1;
      }
      
      if i * i == n {
          SquareWitness(n, i);
          return true;
      } else {
          assert i * i > n;
          assert forall j: int :: 0 <= j < i ==> j * j < n;
          assert forall j: int :: j > i ==> j * j > i * i > n;
          return false;
      }
  }

vc-postamble: |-


