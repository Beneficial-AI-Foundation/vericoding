vc-preamble: |-
  predicate positive(s:seq<int>)
  {forall u::0<=u<|s| ==> s[u]>=0}

vc-helpers: |-
  lemma positive_prefix(v: array<int>, i: int)
    requires 0 <= i <= v.Length
    requires forall k :: 0 <= k < i ==> v[k] >= 0
    ensures positive(v[0..i])
  {
  }
  
  lemma exists_negative_implies_found(v: array<int>, i: int)
    requires 0 <= i < v.Length
    requires v[i] < 0
    ensures exists k :: 0 <= k < v.Length && v[k] < 0
  {
  }

vc-spec: |-
  // <vc-spec>
  method mfirstNegative(v:array<int>) returns (b:bool, i:int)
  ensures b <==> exists k::0<=k<v.Length && v[k]<0
  ensures b ==> 0<=i<v.Length && v[i]<0 && positive(v[0..i])
  // </vc-spec>

vc-code: |-
  {
    i := 0;
    while i < v.Length
      invariant 0 <= i <= v.Length
      invariant forall k :: 0 <= k < i ==> v[k] >= 0
      invariant positive(v[0..i])
    {
      if v[i] < 0 {
        b := true;
        exists_negative_implies_found(v, i);
        return;
      }
      i := i + 1;
      positive_prefix(v, i);
    }
    b := false;
  }

vc-postamble: |-


