vc-preamble: |-
  // Insertion sort.
  //
  // Author: Snorri Agnarsson, snorri@hi.is
  
  
  predicate IsSorted( s: seq<int> )
  {
      forall p,q | 0<=p<q<|s| :: s[p]<=s[q]
  }

vc-helpers: |-
  lemma InsertHelper(s: seq<int>, x: int, pos: int)
      requires 0 <= pos <= |s|
      requires IsSorted(s)
      requires pos == 0 || s[pos-1] <= x
      requires pos == |s| || x <= s[pos]
      ensures IsSorted(s[..pos] + [x] + s[pos..])
  {
      var result := s[..pos] + [x] + s[pos..];
      forall i, j | 0 <= i < j < |result|
          ensures result[i] <= result[j]
      {
          if i < pos && j == pos {
              // result[i] is from s[..pos], result[j] is x
              assert result[i] == s[i];
              assert result[j] == x;
              if pos > 0 {
                  assert s[i] <= s[pos-1] <= x;
              }
          } else if i == pos && j > pos {
              // result[i] is x, result[j] is from s[pos..]
              assert result[i] == x;
              assert result[j] == s[j-1];
              if pos < |s| {
                  assert x <= s[pos] <= s[j-1];
              }
          } else if i < pos && j > pos {
              // both from original s, but indices shifted
              assert result[i] == s[i];
              assert result[j] == s[j-1];
              assert s[i] <= s[j-1];
          } else if i < pos && j < pos {
              // both from s[..pos]
              assert result[i] == s[i] <= s[j] == result[j];
          } else if i > pos && j > pos {
              // both from s[pos..]
              assert result[i] == s[i-1] <= s[j-1] == result[j];
          }
      }
  }
  
  lemma MultisetInsertLemma(s: seq<int>, x: int, pos: int)
      requires 0 <= pos <= |s|
      ensures multiset(s[..pos] + [x] + s[pos..]) == multiset(s) + multiset([x])
  {
      assert s == s[..pos] + s[pos..];
      assert multiset(s) == multiset(s[..pos]) + multiset(s[pos..]);
      assert multiset(s[..pos] + [x] + s[pos..]) == multiset(s[..pos]) + multiset([x]) + multiset(s[pos..]);
      assert multiset(s[..pos]) + multiset([x]) + multiset(s[pos..]) == multiset(s) + multiset([x]);
  }
  
  lemma SeqSliceLemma(s: seq<int>, i: int)
      requires 0 <= i < |s|
      ensures s[..i+1] == s[..i] + [s[i]]
      ensures multiset(s[..i+1]) == multiset(s[..i]) + multiset([s[i]])
  {
  }
  
  function FindInsertPosition(s: seq<int>, x: int): int
      requires IsSorted(s)
      ensures 0 <= FindInsertPosition(s, x) <= |s|
      ensures FindInsertPosition(s, x) == 0 || s[FindInsertPosition(s, x) - 1] <= x
      ensures FindInsertPosition(s, x) == |s| || x <= s[FindInsertPosition(s, x)]
  {
      if |s| == 0 then 0
      else if x <= s[0] then 0
      else if s[|s|-1] <= x then |s|
      else FindInsertPositionHelper(s, x, 0, |s|)
  }
  
  function FindInsertPositionHelper(s: seq<int>, x: int, lo: int, hi: int): int
      requires IsSorted(s)
      requires 0 <= lo < hi <= |s|
      requires lo == 0 || s[lo-1] <= x
      requires hi == |s| || x <= s[hi]
      ensures lo <= FindInsertPositionHelper(s, x, lo, hi) <= hi
      ensures FindInsertPositionHelper(s, x, lo, hi) == lo || s[FindInsertPositionHelper(s, x, lo, hi) - 1] <= x
      ensures FindInsertPositionHelper(s, x, lo, hi) == hi || x <= s[FindInsertPositionHelper(s, x, lo, hi)]
      decreases hi - lo
  {
      if lo + 1 >= hi then
          if s[lo] <= x then hi else lo
      else
          var mid := lo + (hi - lo) / 2;
          if s[mid] <= x then
              FindInsertPositionHelper(s, x, mid, hi)
          else
              FindInsertPositionHelper(s, x, lo, mid)
  }

vc-spec: |-
  // <vc-spec>
  method InsertionSort( s: seq<int> ) returns ( r: seq<int> )
      ensures multiset(r) == multiset(s);
      ensures IsSorted(r);
  // </vc-spec>

vc-code: |-
  {
      if |s| == 0 {
          return [];
      }
      
      var result := [s[0]];
      var i := 1;
      
      while i < |s|
          invariant 1 <= i <= |s|
          invariant IsSorted(result)
          invariant multiset(result) == multiset(s[..i])
      {
          var x := s[i];
          var pos := FindInsertPosition(result, x);
          
          InsertHelper(result, x, pos);
          MultisetInsertLemma(result, x, pos);
          SeqSliceLemma(s, i);
          
          result := result[..pos] + [x] + result[pos..];
          
          i := i + 1;
      }
      
      assert s[..i] == s;
      return result;
  }

vc-postamble: |-


