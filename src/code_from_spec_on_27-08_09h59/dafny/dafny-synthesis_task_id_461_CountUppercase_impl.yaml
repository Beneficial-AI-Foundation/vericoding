vc-preamble: |-
  predicate IsUpperCase(c: char)
  {
      65 <= c as int <= 90
  }

vc-helpers: |-
  lemma CountUppercaseHelper(s: string, i: int)
      requires 0 <= i <= |s|
      ensures |set j: int | 0 <= j < i && IsUpperCase(s[j])| <= i
  {
      if i == 0 {
          assert (set j: int | 0 <= j < i && IsUpperCase(s[j])) == {};
      } else {
          CountUppercaseHelper(s, i-1);
          var prevSet := set j: int | 0 <= j < i-1 && IsUpperCase(s[j]);
          var currSet := set j: int | 0 <= j < i && IsUpperCase(s[j]);
          if IsUpperCase(s[i-1]) {
              assert currSet == prevSet + {i-1};
          } else {
              assert currSet == prevSet;
          }
      }
  }
  
  lemma SetSizePreservation(s: string, count: int, i: int)
      requires 0 <= i <= |s|
      requires count == |set j: int | 0 <= j < i && IsUpperCase(s[j])|
      ensures count >= 0
  {
  }

vc-spec: |-
  // <vc-spec>
  method CountUppercase(s: string) returns (count: int)
      ensures count >= 0
      ensures count == | set i: int | 0 <= i < |s| && IsUpperCase(s[i])|
  // </vc-spec>

vc-code: |-
  {
      count := 0;
      var i := 0;
      
      while i < |s|
          invariant 0 <= i <= |s|
          invariant count >= 0
          invariant count == |set j: int | 0 <= j < i && IsUpperCase(s[j])|
      {
          CountUppercaseHelper(s, i);
          var oldSet := set j: int | 0 <= j < i && IsUpperCase(s[j]);
          var newSet := set j: int | 0 <= j < i+1 && IsUpperCase(s[j]);
          
          if IsUpperCase(s[i]) {
              count := count + 1;
              assert newSet == oldSet + {i};
              assert |newSet| == |oldSet| + 1;
          } else {
              assert newSet == oldSet;
              assert |newSet| == |oldSet|;
          }
          
          i := i + 1;
          SetSizePreservation(s, count, i);
      }
      
      assert i == |s|;
      assert count == |set j: int | 0 <= j < |s| && IsUpperCase(s[j])|;
  }

vc-postamble: |-


