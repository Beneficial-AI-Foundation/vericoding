vc-preamble: |-


vc-helpers: |-
  lemma EmptyPatternLemma(text: string)
    ensures forall i:nat {:trigger text[i..i+0]} :: 0 <= i <= |text| - 0 ==> (text[i..i+0] == "" <==> i in {})
  {
    forall i:nat {:trigger text[i..i+0]} | 0 <= i <= |text|
      ensures text[i..i+0] == "" <==> i in {}
    {
      assert text[i..i+0] == "";
      assert i !in {};
      assert ("" == "") <==> (i in {});
      assert true <==> false;
      assert false;
    }
  }

vc-spec: |-
  // <vc-spec>
  method FindAllOccurrences(text: string, pattern: string) returns (offsets: set<nat>)
    ensures forall i:nat :: i in offsets ==> i + |pattern| <= |text|
    ensures forall i:nat :: 0 <= i <= |text| - |pattern|
                         ==> (text[i..i+|pattern|] == pattern <==> i in offsets)
  // </vc-spec>

vc-code: |-
  {
    offsets := {};
    
    if |pattern| == 0 {
      EmptyPatternLemma(text);
      return;
    }
    
    if |pattern| > |text| {
      return;
    }
    
    var i := 0;
    while i <= |text| - |pattern|
      invariant 0 <= i <= |text| - |pattern| + 1
      invariant forall j:nat :: j in offsets ==> j + |pattern| <= |text|
      invariant forall j:nat :: 0 <= j < i ==> (text[j..j+|pattern|] == pattern <==> j in offsets)
    {
      if text[i..i+|pattern|] == pattern {
        offsets := offsets + {i};
      }
      
      i := i + 1;
    }
  }

vc-postamble: |-


