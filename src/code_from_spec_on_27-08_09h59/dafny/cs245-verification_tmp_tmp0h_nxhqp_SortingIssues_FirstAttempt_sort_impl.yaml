vc-preamble: |-
  // Sorting: 
  //        Pre/Post Condition Issues - An investigation 
  //                                      -- Stephanie McIntyre
  // Based on examples in class 
  
  // First Attempt at specifying requirements for sorting array A in incrementing order
  // We want our Hoare triple of (|Pre-Condition|) Code (|Post-Condition|) to hold iff A is properly sorted.

vc-helpers: |-
  lemma SortedArrayPreservation(A: array<int>, n: int, val: int)
    requires n == A.Length
    requires n >= 0
    requires forall i :: 0 <= i < n ==> A[i] == val
    ensures forall i,j :: 0 <= i <= j < n ==> A[i] <= A[j]
  {
  }

vc-spec: |-
  // <vc-spec>
  method sort(A: array<int>, n: int)
  modifies A; requires n==A.Length;
  /* Pre-Condition */   requires n>=0;            
  /* Post-Condition */  ensures forall i,j:: 0<=i<=j<n ==> A[i]<=A[j];  //This states that A is sorted.
  
  //Can we write code that does not sort A that still satisfies the requirements? 
  //Consider the following program:
  // </vc-spec>

vc-code: |-
  {
    if n > 0 {
      var i := 0;
      while i < n
        invariant 0 <= i <= n
        invariant forall k :: 0 <= k < i ==> A[k] == 0
      {
        A[i] := 0;
        i := i + 1;
      }
      SortedArrayPreservation(A, n, 0);
    }
  }

vc-postamble: |-


