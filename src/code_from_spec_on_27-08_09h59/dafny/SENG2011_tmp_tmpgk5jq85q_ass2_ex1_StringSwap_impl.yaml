vc-preamble: |-
  // method verifies

vc-helpers: |-
  lemma MultisetSwapPreservation(s: string, i: nat, j: nat)
  requires i < |s| && j < |s|
  ensures multiset(s[..]) == multiset(s[..][i := s[j]][j := s[i]])
  {
      var temp := s[..][i := s[j]][j := s[i]];
      assert multiset(s[..]) == multiset(temp);
  }
  
  lemma SwapCorrectness(s: string, i: nat, j: nat, result: string)
  requires i < |s| && j < |s|
  requires |s| == |result|
  requires result == s[..][i := s[j]][j := s[i]]
  ensures multiset(s[..]) == multiset(result[..])
  ensures result[i] == s[j] && result[j] == s[i]
  ensures forall k:nat :: k != i && k != j && k < |s| ==> result[k] == s[k]
  {
      MultisetSwapPreservation(s, i, j);
  }

vc-spec: |-
  // <vc-spec>
  method StringSwap(s: string, i:nat, j:nat) returns (t: string)
  requires i >= 0 && j >= 0 && |s| >= 0;
  requires |s| > 0 ==> i < |s| && j < |s|;
  ensures multiset(s[..]) == multiset(t[..]);
  ensures |s| == |t|;
  ensures |s| > 0 ==> forall k:nat :: k != i && k != j && k < |s| ==> t[k] == s[k]
  ensures |s| > 0 ==> t[i] == s[j] && t[j] == s[i];
  ensures |s| == 0 ==> t == s;
  // </vc-spec>

vc-code: |-
  {
      if |s| == 0 {
          return s;
      }
      
      if i == j {
          return s;
      }
      
      var result := s[..];
      result := result[i := s[j]];
      result := result[j := s[i]];
      
      SwapCorrectness(s, i, j, result);
      
      return result;
  }

vc-postamble: |-
  // string == seq<Char>
  //give se2011 ass2 ex1.dfy

