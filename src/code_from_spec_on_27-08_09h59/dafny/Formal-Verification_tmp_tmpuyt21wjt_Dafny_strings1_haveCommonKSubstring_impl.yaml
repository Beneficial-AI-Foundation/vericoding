vc-preamble: |-
  predicate isNotPrefixPred(pre:string, str:string)
  {
      (|pre| > |str|) || 
      pre != str[..|pre|]
  }
  
  
  method isPrefix(pre: string, str: string) returns (res:bool)
      ensures !res <==> isNotPrefixPred(pre,str)
      ensures  res <==> isPrefixPredicate(pre,str)
  {
    assume{:axiom} false;
  }
  
  
  
  predicate isPrefixPredicate(pre: string, str:string)
  {
    |str| >= |pre| && pre <= str
  }
  
  
  predicate isSubstringPredicate (sub: string, str:string)
  {
    |str| >= |sub| && (exists i :: 0 <= i <= |str| && isPrefixPredicate(sub, str[i..]))
  }
  
  method isSubstring(sub: string, str: string) returns (res:bool)
  ensures res == isSubstringPredicate(sub, str)
  {
    assume{:axiom} false;
  }
  
  predicate haveCommonKSubstringPredicate(k: nat, str1: string, str2: string)
  {
    |str1| >= k && |str2| >= k && (exists i :: 0 <= i <= |str1| - k && isSubstringPredicate((str1[i..])[..k], str2))
  }
  
  predicate maxCommonSubstringPredicate(str1: string, str2: string, len:nat)
  {
     forall k :: len < k <= |str1| ==> !haveCommonKSubstringPredicate(k, str1, str2)
  }

vc-helpers: |-
  lemma isPrefixEquivalence(pre: string, str: string)
    ensures isPrefixPredicate(pre, str) <==> (|str| >= |pre| && pre == str[..|pre|])
  {
    if isPrefixPredicate(pre, str) {
      assert |str| >= |pre| && pre <= str;
      assert pre == str[..|pre|];
    }
    if |str| >= |pre| && pre == str[..|pre|] {
      assert pre <= str;
      assert isPrefixPredicate(pre, str);
    }
  }
  
  lemma substringExists(sub: string, str: string, i: int)
    requires 0 <= i <= |str| - |sub|
    requires sub == str[i..i+|sub|]
    ensures isSubstringPredicate(sub, str)
  {
    assert |str| >= |sub|;
    assert isPrefixPredicate(sub, str[i..]);
  }
  
  lemma substringImpliesIndex(sub: string, str: string)
    requires isSubstringPredicate(sub, str)
    ensures exists i {:trigger str[i..i+|sub|]} :: 0 <= i <= |str| - |sub| && sub == str[i..i+|sub|]
  {
    assert exists i :: 0 <= i <= |str| && isPrefixPredicate(sub, str[i..]);
    var i :| 0 <= i <= |str| && isPrefixPredicate(sub, str[i..]);
    assert |str[i..]| >= |sub|;
    assert i <= |str| - |sub|;
    isPrefixEquivalence(sub, str[i..]);
    assert sub == str[i..][..|sub|];
    assert sub == str[i..i+|sub|];
  }
  
  lemma substringFromIndex(sub: string, str: string)
    requires exists i {:trigger str[i..i+|sub|]} :: 0 <= i <= |str| - |sub| && sub == str[i..i+|sub|]
    ensures isSubstringPredicate(sub, str)
  {
    var i :| 0 <= i <= |str| - |sub| && sub == str[i..i+|sub|];
    assert |str| >= |sub|;
    isPrefixEquivalence(sub, str[i..]);
    assert isPrefixPredicate(sub, str[i..]);
  }
  
  lemma haveCommonKSubstringFalseHelper(k: nat, str1: string, str2: string, i: int)
    requires 0 <= i <= |str1| - k + 1
    requires forall j :: 0 <= j < i ==> !isSubstringPredicate((str1[j..])[..k], str2)
    requires i == |str1| - k + 1
    ensures !haveCommonKSubstringPredicate(k, str1, str2)
  {
    if haveCommonKSubstringPredicate(k, str1, str2) {
      assert exists idx :: 0 <= idx <= |str1| - k && isSubstringPredicate((str1[idx..])[..k], str2);
      var idx :| 0 <= idx <= |str1| - k && isSubstringPredicate((str1[idx..])[..k], str2);
      assert 0 <= idx < i;
      assert !isSubstringPredicate((str1[idx..])[..k], str2);
      assert false;
    }
  }
  
  lemma haveCommonKSubstringTrueHelper(k: nat, str1: string, str2: string, idx: int)
    requires 0 <= idx <= |str1| - k
    requires isSubstringPredicate((str1[idx..])[..k], str2)
    requires |str1| >= k && |str2| >= k
    ensures haveCommonKSubstringPredicate(k, str1, str2)
  {
    assert exists i :: 0 <= i <= |str1| - k && isSubstringPredicate((str1[i..])[..k], str2);
  }

vc-spec: |-
  // <vc-spec>
  method haveCommonKSubstring(k: nat, str1: string, str2: string) returns (found: bool)
    ensures |str1| < k || |str2| < k ==> !found
    ensures haveCommonKSubstringPredicate(k,str1,str2) == found
  // </vc-spec>

vc-code: |-
  {
    if |str1| < k || |str2| < k {
      found := false;
      return;
    }
    
    found := false;
    var i := 0;
    var witnessIndex := -1;
    
    while i <= |str1| - k && !found
      invariant 0 <= i <= |str1| - k + 1
      invariant !found ==> forall j :: 0 <= j < i ==> !isSubstringPredicate((str1[j..])[..k], str2)
      invariant found ==> 0 <= witnessIndex < i && isSubstringPredicate((str1[witnessIndex..])[..k], str2)
    {
      var sub := (str1[i..])[..k];
      var subFound := isSubstring(sub, str2);
      
      if subFound {
        found := true;
        witnessIndex := i;
        substringFromIndex(sub, str2);
        assert isSubstringPredicate(sub, str2);
        assert sub == (str1[i..])[..k];
        assert 0 <= i <= |str1| - k;
        haveCommonKSubstringTrueHelper(k, str1, str2, i);
        assert haveCommonKSubstringPredicate(k, str1, str2);
      }
      
      i := i + 1;
    }
    
    if !found {
      haveCommonKSubstringFalseHelper(k, str1, str2, i);
      assert !haveCommonKSubstringPredicate(k, str1, str2);
    }
  }

vc-postamble: |-


