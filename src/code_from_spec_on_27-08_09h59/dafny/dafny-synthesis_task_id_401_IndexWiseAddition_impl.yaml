vc-preamble: |-


vc-helpers: |-
  lemma AdditionPreservesLength(row_a: seq<int>, row_b: seq<int>)
      requires |row_a| == |row_b|
      ensures |seq(|row_a|, i requires 0 <= i < |row_a| => row_a[i] + row_b[i])| == |row_a|
  {
  }
  
  lemma AdditionCorrectness(row_a: seq<int>, row_b: seq<int>)
      requires |row_a| == |row_b|
      ensures forall j :: 0 <= j < |row_a| ==> 
          seq(|row_a|, i requires 0 <= i < |row_a| => row_a[i] + row_b[i])[j] == row_a[j] + row_b[j]
  {
  }

vc-spec: |-
  // <vc-spec>
  method IndexWiseAddition(a: seq<seq<int>>, b: seq<seq<int>>) returns (result: seq<seq<int>>)
      requires |a| > 0 && |b| > 0
      requires |a| == |b|
      requires forall i :: 0 <= i < |a| ==> |a[i]| == |b[i]|
      ensures |result| == |a|
      ensures forall i :: 0 <= i < |result| ==> |result[i]| == |a[i]|
      ensures forall i :: 0 <= i < |result| ==> forall j :: 0 <= j < |result[i]| ==> result[i][j] == a[i][j] + b[i][j]
  // </vc-spec>

vc-code: |-
  {
      result := [];
      var i := 0;
      while i < |a|
          invariant 0 <= i <= |a|
          invariant |result| == i
          invariant forall k :: 0 <= k < i ==> |result[k]| == |a[k]|
          invariant forall k :: 0 <= k < i ==> forall j :: 0 <= j < |result[k]| ==> result[k][j] == a[k][j] + b[k][j]
      {
          var row_sum := seq(|a[i]|, j requires 0 <= j < |a[i]| => a[i][j] + b[i][j]);
          AdditionPreservesLength(a[i], b[i]);
          AdditionCorrectness(a[i], b[i]);
          result := result + [row_sum];
          i := i + 1;
      }
  }

vc-postamble: |-


