vc-preamble: |-


vc-helpers: |-
  lemma CountPositionsCorrect(a: seq<int>, b: seq<int>, c: seq<int>, count: int, processedCount: int, i: int)
      requires |a| == |b| && |b| == |c|
      requires 0 <= i < |a|
      requires processedCount == | set j: int | 0 <= j < i && a[j] == b[j] && b[j] == c[j]|
      requires count == processedCount + (if a[i] == b[i] && b[i] == c[i] then 1 else 0)
      ensures count == | set j: int | 0 <= j < i + 1 && a[j] == b[j] && b[j] == c[j]|
  {
      var setUpToI := set j: int | 0 <= j < i && a[j] == b[j] && b[j] == c[j];
      var setUpToIPlus1 := set j: int | 0 <= j < i + 1 && a[j] == b[j] && b[j] == c[j];
      
      if a[i] == b[i] && b[i] == c[i] {
          assert setUpToIPlus1 == setUpToI + {i};
          assert |setUpToIPlus1| == |setUpToI| + 1;
      } else {
          assert setUpToIPlus1 == setUpToI;
          assert |setUpToIPlus1| == |setUpToI|;
      }
  }

vc-spec: |-
  // <vc-spec>
  method CountIdenticalPositions(a: seq<int>, b: seq<int>, c: seq<int>) returns (count: int)
      requires |a| == |b| && |b| == |c|
      ensures count >= 0
      ensures count == | set i: int | 0 <= i < |a| && a[i] == b[i] && b[i] == c[i]|
  // </vc-spec>

vc-code: |-
  {
      count := 0;
      var i := 0;
      
      while i < |a|
          invariant 0 <= i <= |a|
          invariant count == | set j: int | 0 <= j < i && a[j] == b[j] && b[j] == c[j]|
          invariant count >= 0
      {
          var oldCount := count;
          if a[i] == b[i] && b[i] == c[i] {
              count := count + 1;
          }
          
          CountPositionsCorrect(a, b, c, count, oldCount, i);
          i := i + 1;
      }
  }

vc-postamble: |-


