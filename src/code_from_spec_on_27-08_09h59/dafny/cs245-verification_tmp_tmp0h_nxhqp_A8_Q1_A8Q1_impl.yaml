vc-preamble: |-
  // A8Q1 â€” Steph Renee McIntyre
  // Following the solutions from Carmen Bruni
  
  // There is no definition for power, so this function will be used for validating that our imperative program is correct. This is just for Dafny.
  function power(a: int, n: int): int //function for a to the power of n
    requires 0 <= n;
    decreases n;
    {
      if (n == 0) then 1 else a * power(a, n - 1)
    }
  
  /* Proof of implieds can be seen on LEARN.
      Note: If you are unconvinced, putting asserts for each condition will demonstrate the correctness of the statements. 
  */

vc-helpers: |-
  lemma PowerMultiplicative(a: int, m: int, n: int)
    requires m >= 0 && n >= 0
    ensures power(a, m + n) == power(a, m) * power(a, n)
    decreases m
  {
    if m == 0 {
      assert power(a, 0 + n) == power(a, n);
      assert power(a, 0) * power(a, n) == 1 * power(a, n) == power(a, n);
    } else {
      PowerMultiplicative(a, m - 1, n);
      assert power(a, m + n) == a * power(a, m - 1 + n);
      assert power(a, m - 1 + n) == power(a, m - 1) * power(a, n);
      assert power(a, m + n) == a * power(a, m - 1) * power(a, n);
      assert power(a, m) * power(a, n) == (a * power(a, m - 1)) * power(a, n);
    }
  }
  
  lemma PowerDouble(a: int, n: int)
    requires n >= 0
    ensures power(a, 2 * n) == power(a * a, n)
    decreases n
  {
    if n == 0 {
      assert power(a, 0) == 1;
      assert power(a * a, 0) == 1;
    } else {
      PowerDouble(a, n - 1);
      assert power(a, 2 * n) == power(a, 2 + 2 * (n - 1));
      PowerMultiplicative(a, 2, 2 * (n - 1));
      assert power(a, 2 + 2 * (n - 1)) == power(a, 2) * power(a, 2 * (n - 1));
      assert power(a, 2) == a * a;
      assert power(a, 2 * (n - 1)) == power(a * a, n - 1);
      assert power(a, 2 * n) == (a * a) * power(a * a, n - 1) == power(a * a, n);
    }
  }

vc-spec: |-
  // <vc-spec>
  method A8Q1(y0: int, x: int) returns (z: int)
  requires y0 >= 0
  ensures z==power(x,y0)
  // </vc-spec>

vc-code: |-
  {
    var y := y0;
    var a := x;
    z := 1;
    
    while y > 0
      invariant y >= 0
      invariant z * power(a, y) == power(x, y0)
      decreases y
    {
      if y % 2 == 0 {
        PowerDouble(a, y / 2);
        a := a * a;
        y := y / 2;
      } else {
        z := z * a;
        y := y - 1;
      }
    }
  }

vc-postamble: |-


