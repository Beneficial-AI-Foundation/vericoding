vc-preamble: |-


vc-helpers: |-
  lemma SetPartitionLemma<T>(s1: set<T>, s2: set<T>, p: T -> bool)
    requires s1 !! s2
    ensures |set x | x in (s1 + s2) && p(x)| == |set x | x in s1 && p(x)| + |set x | x in s2 && p(x)|
  {
    var left := set x | x in (s1 + s2) && p(x);
    var right1 := set x | x in s1 && p(x);
    var right2 := set x | x in s2 && p(x);
    
    assert left == right1 + right2;
    assert right1 !! right2;
  }
  
  lemma SingletonSetSize<T>(x: T, p: T -> bool)
    ensures |set y | y in {x} && p(y)| == if p(x) then 1 else 0
  {
    var s := set y | y in {x} && p(y);
    if p(x) {
      assert s == {x};
    } else {
      assert s == {};
    }
  }

vc-spec: |-
  // <vc-spec>
  method CountLessThan(numbers: set<int>, threshold: int) returns (count: int)
    ensures count == |set i | i in numbers && i < threshold|
  // </vc-spec>

vc-code: |-
  {
    count := 0;
    var remaining := numbers;
    
    while remaining != {}
      invariant count == |set i | i in numbers - remaining && i < threshold|
      invariant remaining <= numbers
      invariant remaining !! (numbers - remaining)
      decreases |remaining|
    {
      var x :| x in remaining;
      var old_remaining := remaining;
      var old_count := count;
      remaining := remaining - {x};
      
      assert old_remaining == remaining + {x};
      assert numbers - remaining == (numbers - old_remaining) + {x};
      assert (numbers - old_remaining) !! {x};
      
      SetPartitionLemma(numbers - old_remaining, {x}, y => y < threshold);
      
      if x < threshold {
        count := count + 1;
        SingletonSetSize(x, y => y < threshold);
        assert |{:trigger x} set i | i in {x} && i < threshold| == 1;
        assert count == |set i | i in numbers - old_remaining && i < threshold| + |{:trigger x} set i | i in {x} && i < threshold|;
        assert count == |set i | i in numbers - remaining && i < threshold|;
      } else {
        SingletonSetSize(x, y => y < threshold);
        assert |{:trigger x} set i | i in {x} && i < threshold| == 0;
        assert count == |set i | i in numbers - old_remaining && i < threshold| + |{:trigger x} set i | i in {x} && i < threshold|;
        assert count == |set i | i in numbers - remaining && i < threshold|;
      }
    }
    
    assert remaining == {};
    assert numbers - remaining == numbers;
  }

vc-postamble: |-


