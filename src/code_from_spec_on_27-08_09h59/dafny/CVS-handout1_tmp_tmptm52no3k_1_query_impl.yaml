vc-preamble: |-
  /*                                      Cumulative Sums over Arrays                                        */
  
  /*
      Daniel Cavalheiro   57869
      Pedro Nunes         57854
  */
  
  
  
  //(a)
  
  function sum(a: array<int>, i: int, j: int): int
      reads a
      requires 0 <= i <= j <= a.Length
      decreases j - i
  {
      if (i == j) then 0
      else a[i] + sum(a, i+1, j)
  }
  
  
  
  //(b)
  
  //(c)
  
  predicate is_prefix_sum_for (a: array<int>, c: array<int>)
      requires a.Length + 1 == c.Length
      requires c[0] == 0
      reads c, a
  {
      forall i: int :: 0 <= i < a.Length ==> c[i+1] == c[i] + a[i]
  }

vc-helpers: |-
  lemma sum_property(a: array<int>, i: int, j: int, k: int)
      requires 0 <= i <= k <= j <= a.Length
      ensures sum(a, i, j) == sum(a, i, k) + sum(a, k, j)
      decreases j - i
  {
      if i == k {
          assert sum(a, i, k) == 0;
      } else {
          sum_property(a, i+1, j, k);
      }
  }
  
  lemma sum_single(a: array<int>, i: int)
      requires 0 <= i < a.Length
      ensures sum(a, i, i+1) == a[i]
  {
  }

vc-spec: |-
  // <vc-spec>
  method query(a: array<int>, i: int, j: int) returns (res:int)
      requires 0 <= i <= j <= a.Length
      ensures res == sum(a, i, j)
  // </vc-spec>

vc-code: |-
  {
      if i == j {
          res := 0;
          return;
      }
      
      res := 0;
      var k := i;
      
      while k < j
          invariant i <= k <= j
          invariant res == sum(a, i, k)
          decreases j - k
      {
          sum_property(a, i, k+1, k);
          assert sum(a, i, k+1) == sum(a, i, k) + sum(a, k, k+1);
          sum_single(a, k);
          assert sum(a, k, k+1) == a[k];
          res := res + a[k];
          k := k + 1;
      }
  }

vc-postamble: |-


