vc-preamble: |-


vc-helpers: |-
  lemma ArrayConcatenationLemma(a: array<int>, b: array<int>, c: array<int>, mid: int)
    requires 0 <= mid <= a.Length
    requires b.Length == mid
    requires c.Length == a.Length - mid
    requires forall k :: 0 <= k < mid ==> b[k] == a[k]
    requires forall k :: 0 <= k < a.Length - mid ==> c[k] == a[mid + k]
    ensures a[..] == b[..] + c[..]
  {
    assert a[..mid] == b[..];
    assert a[mid..] == c[..];
    assert a[..] == a[..mid] + a[mid..];
  }

vc-spec: |-
  // <vc-spec>
  method ArraySplit (a : array<int>) returns (b : array<int>, c : array<int>)
    ensures fresh(b)
    ensures fresh(c)
    ensures a[..] == b[..] + c[..]
    ensures a.Length == b.Length + c.Length
    ensures a.Length > 1 ==> a.Length > b.Length
    ensures a.Length > 1 ==> a.Length > c.Length
  // </vc-spec>

vc-code: |-
  {
    var mid := a.Length / 2;
    b := new int[mid];
    c := new int[a.Length - mid];
    
    var i := 0;
    while i < mid
      invariant 0 <= i <= mid
      invariant forall k :: 0 <= k < i ==> b[k] == a[k]
    {
      b[i] := a[i];
      i := i + 1;
    }
    
    i := 0;
    while i < a.Length - mid
      invariant 0 <= i <= a.Length - mid
      invariant forall k :: 0 <= k < i ==> c[k] == a[mid + k]
      invariant forall k :: 0 <= k < mid ==> b[k] == a[k]
    {
      c[i] := a[mid + i];
      i := i + 1;
    }
    
    ArrayConcatenationLemma(a, b, c, mid);
  }

vc-postamble: |-


