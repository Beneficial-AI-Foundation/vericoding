vc-preamble: |-
  // Rearranges the elements in an array 'a' of natural numbers,
  // so that all odd numbers appear before all even numbers.
  
  predicate  odd(n: nat) { n % 2 == 1 }
  predicate  even(n: nat) { n % 2 == 0 }

vc-helpers: |-
  lemma MultisetPreservedBySwap(oldSeq: seq<nat>, newSeq: seq<nat>, i: int, j: int)
    requires 0 <= i < |oldSeq| && 0 <= j < |oldSeq|
    requires |newSeq| == |oldSeq|
    requires newSeq == oldSeq[i := oldSeq[j]][j := oldSeq[i]]
    ensures multiset(newSeq) == multiset(oldSeq)
  {
    if i == j {
      assert newSeq == oldSeq;
    } else {
      assert multiset(newSeq) == multiset(oldSeq);
    }
  }
  
  lemma PartitionInvariant(a: array<nat>, left: int, right: int)
    requires 0 <= left <= right < a.Length
    requires forall k :: 0 <= k < left ==> odd(a[k])
    requires forall k :: right < k < a.Length ==> even(a[k])
    ensures forall i, j :: 0 <= i < left && right < j < a.Length ==> odd(a[i]) && even(a[j])
  {
  }

vc-spec: |-
  // <vc-spec>
  method partitionOddEven(a: array<nat>) 
    modifies a
    ensures multiset(a[..]) == multiset(old(a[..]))
    ensures ! exists i, j :: 0 <= i < j < a.Length && even(a[i]) && odd(a[j])
  // </vc-spec>

vc-code: |-
  {
    if a.Length == 0 {
      return;
    }
    
    var left := 0;
    var right := a.Length - 1;
    
    while left < right
      invariant 0 <= left <= right + 1 <= a.Length
      invariant multiset(a[..]) == multiset(old(a[..]))
      invariant forall k :: 0 <= k < left ==> odd(a[k])
      invariant forall k :: right < k < a.Length ==> even(a[k])
      decreases right - left
    {
      if odd(a[left]) {
        left := left + 1;
      } else if even(a[right]) {
        right := right - 1;
      } else {
        assert even(a[left]) && odd(a[right]);
        var oldSeq := a[..];
        a[left], a[right] := a[right], a[left];
        assert multiset(a[..]) == multiset(oldSeq);
        left := left + 1;
        right := right - 1;
      }
    }
  }

vc-postamble: |-


