vc-description: |-


vc-preamble: |-
  use vstd::arithmetic::mul::*;
  use vstd::prelude::*;
  
  verus! {
  
  spec fn spec_prime(p: int) -> (ret:bool) {
      p > 1 && forall|k: int| 1 < k < p ==> #[trigger] (p % k) != 0
  }
  // pure-end

vc-helpers: |-
  fn prime(p: u32) -> (ret: bool)
      ensures
          ret <==> spec_prime(p as int),
  {
      if p <= 1 {
          return false;
      }
      for k in 2..p
          invariant
              forall|j: int| 1 < j < k ==> #[trigger] (p as int % j) != 0,
              k <= p,
      {
          if p % k == 0 {
              return false;
          }
      }
      true
  }
  
  fn checked_mul_thrice(x: u32, y: u32, z: u32) -> (ret: Option<u32>)
      ensures
          ret.is_some() ==> ret.unwrap() == x * y * z,
          ret.is_none() ==> x * y * z > u32::MAX,
  {
      if (x == 0 || y == 0 || z == 0) {
          return Some(0);
      }
      assert(x > 0 && y > 0 && z > 0);
      let prod2 = x.checked_mul(y);
      if prod2.is_some() {
          let prod3 = prod2.unwrap().checked_mul(z);
          if prod3.is_some() {
              let ans = prod3.unwrap();
              assert(ans == x * y * z);
              Some(ans)
          } else {
              assert(x * y * z > u32::MAX);
              None
          }
      } else {
          broadcast use group_mul_properties;
  
          assert(x * y * z >= y * z);
          None
      }
  }

vc-spec: |-
  fn is_multiply_prime(x: u32) -> (ans: bool)
      // pre-conditions-start
      requires
          x > 1,
      // pre-conditions-end
      // post-conditions-start
      ensures
          ans <==> exists|a: int, b: int, c: int|
              spec_prime(a) && spec_prime(b) && spec_prime(c) && x == a * b * c,
      // post-conditions-end

vc-code: |-
  {
      for a in 2..x
          invariant forall|aa: int| 2 <= aa < a ==> !exists|b: int, c: int| 
              spec_prime(aa) && spec_prime(b) && spec_prime(c) && x == aa * b * c
      {
          if !prime(a) {
              continue;
          }
          if x % a != 0 {
              continue;
          }
          let remainder = x / a;
          for b in 2..remainder + 1
              invariant forall|bb: int| 2 <= bb < b ==> !exists|c: int|
                  spec_prime(bb) && spec_prime(c) && remainder == bb * c
          {
              if !prime(b) {
                  continue;
              }
              if remainder % b != 0 {
                  continue;
              }
              let c = remainder / b;
              if prime(c) {
                  proof {
                      assert(spec_prime(a as int));
                      assert(spec_prime(b as int));
                      assert(spec_prime(c as int));
                      assert(x == a * b * c);
                  }
                  return true;
              }
          }
      }
      false
  }

vc-postamble: |-
  
  }
  fn main() {}

