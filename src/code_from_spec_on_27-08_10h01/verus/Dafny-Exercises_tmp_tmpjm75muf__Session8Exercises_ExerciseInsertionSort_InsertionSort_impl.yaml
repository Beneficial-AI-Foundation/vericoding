vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn sorted_seg(a: &Vec<i32>, i: int, j: int) -> bool
      recommends 0 <= i <= j + 1 <= a.len()
  {
      forall|l: int, k: int| i <= l <= k <= j ==> a[l] <= a[k]
  }

vc-helpers: |-
  proof fn sorted_seg_extend(a: &Vec<i32>, i: int, j: int, k: int)
      requires 
          0 <= i <= j + 1 <= a.len(),
          0 <= i <= k <= j + 1 <= a.len(),
          sorted_seg(a, i, j),
          forall|l: int| i <= l <= j ==> a[l] <= a[k]
      ensures sorted_seg(a, i, k)
  {
  }
  
  proof fn sorted_seg_swap_preserve(a: &Vec<i32>, b: &Vec<i32>, i: int, j: int, swap_pos: int)
      requires 
          0 <= i <= j + 1 <= a.len(),
          a.len() == b.len(),
          0 <= swap_pos < a.len(),
          forall|k: int| 0 <= k < a.len() && k != swap_pos ==> a[k] == b[k],
          sorted_seg(a, i, j),
          swap_pos < i || swap_pos > j
      ensures sorted_seg(b, i, j)
  {
  }

vc-spec: |-
  // <vc-spec>
  fn insertion_sort(a: &mut Vec<i32>)
      ensures 
          sorted_seg(a, 0, (a.len() - 1) as int),
          a@.to_multiset() == old(a)@.to_multiset(), //Add and prove this
  // </vc-spec>

vc-code: |-
  {
      let mut i = 1;
      while i < a.len()
          invariant
              1 <= i <= a.len(),
              sorted_seg(a, 0, (i - 1) as int),
              a@.to_multiset() == old(a)@.to_multiset(),
      {
          let mut j = i;
          while j > 0 && a[j - 1] > a[j]
              invariant
                  0 <= j <= i < a.len(),
                  sorted_seg(a, 0, (j - 1) as int),
                  sorted_seg(a, j as int, i as int),
                  j == 0 || a[(j - 1) as int] <= a[(j + 1) as int],
                  forall|k: int| j as int < k <= i as int ==> a@[j as int] <= a@[k],
                  a@.to_multiset() == old(a)@.to_multiset(),
          {
              let temp = a[j];
              a.set(j, a[j - 1]);
              a.set(j - 1, temp);
              j = j - 1;
          }
          i = i + 1;
      }
  }

vc-postamble: |-
  fn main() {}
  
  }

