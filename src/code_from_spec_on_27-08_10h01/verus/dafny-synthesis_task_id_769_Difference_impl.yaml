vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  spec fn is_unique(s: Seq<int>) -> bool {
      forall|i: int, j: int| 0 <= i < j < s.len() ==> s.index(i) != s.index(j)
  }
  
  spec fn diff_filter(x: int, a: Seq<int>, b: Seq<int>) -> bool {
      a.contains(x) && !b.contains(x)
  }
  
  spec fn diff_fn_spec(a: Seq<int>, b: Seq<int>) -> spec_fn(int) -> bool {
      |x: int| diff_filter(x, a, b)
  }
  
  proof fn lemma_filter_preserves_uniqueness(s: Seq<int>, f: spec_fn(int) -> bool)
      requires is_unique(s)
      ensures is_unique(s.filter(f))
  {
      let filtered = s.filter(f);
      assert forall|i: int, j: int| 0 <= i < j < filtered.len() implies filtered.index(i) != filtered.index(j) by {
          if 0 <= i < j < filtered.len() {
              let elem_i = filtered.index(i);
              let elem_j = filtered.index(j);
              assert(s.contains(elem_i));
              assert(s.contains(elem_j));
              if elem_i == elem_j {
                  let orig_i = choose|k: int| 0 <= k < s.len() && s.index(k) == elem_i;
                  let orig_j = choose|k: int| 0 <= k < s.len() && s.index(k) == elem_j && k != orig_i;
                  assert(false);
              }
          }
      };
  }
  
  proof fn lemma_filter_contains(s: Seq<int>, f: spec_fn(int) -> bool, x: int)
      ensures s.filter(f).contains(x) <==> (s.contains(x) && f(x))
  {
  }

vc-spec: |-
  // <vc-spec>
  fn difference(a: Seq<int>, b: Seq<int>) -> (diff: Seq<int>)
      ensures
          forall|x: int| diff.contains(x) <==> (a.contains(x) && !b.contains(x)),
          forall|i: int, j: int| 0 <= i < j < diff.len() ==> diff.index(i) != diff.index(j),
  // </vc-spec>

vc-code: |-
  {
      let diff_fn = diff_fn_spec(a, b);
      let filtered = a.filter(diff_fn);
      
      proof {
          assert forall|x: int| filtered.contains(x) <==> (a.contains(x) && !b.contains(x)) by {
              lemma_filter_contains(a, diff_fn, x);
          };
          
          assert forall|i: int, j: int| 0 <= i < j < filtered.len() ==> filtered.index(i) != filtered.index(j) by {
              if 0 <= i < j < filtered.len() {
                  let elem_i = filtered.index(i);
                  let elem_j = filtered.index(j);
                  if elem_i == elem_j {
                      assert(a.contains(elem_i));
                      assert(!b.contains(elem_i));
                      assert(a.contains(elem_j));
                      assert(!b.contains(elem_j));
                      
                      assert(i < j);
                      assert(elem_i != elem_j);
                  }
              }
          };
      }
      
      filtered
  }

vc-postamble: |-
  fn main() {}
  
  }

