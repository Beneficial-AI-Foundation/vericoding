vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_odd(n: int) -> bool {
      n % 2 == 1
  }

vc-helpers: |-


vc-spec: |-
  // <vc-spec>
  fn is_odd_at_index_odd(a: &[int]) -> (result: bool)
      ensures result <==> forall|i: int| 0 <= i < a.len() ==> (is_odd(i) ==> is_odd(a[i]))
  // </vc-spec>

vc-code: |-
  {
      let mut i = 0;
      while i < a.len()
          invariant 
              0 <= i <= a.len(),
              forall|j: int| 0 <= j < i ==> (is_odd(j) ==> is_odd(a@[j]))
      {
          proof {
              let ghost_i: int = i as int;
          }
          if (i % 2 == 1) && !(a@[i] % 2 == 1) {
              return false;
          }
          i += 1;
      }
      true
  }

vc-postamble: |-
  fn main() {
  }
  
  }

