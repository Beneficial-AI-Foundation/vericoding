vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-


vc-spec: |-
  // <vc-spec>
  fn is_palindrome(x: Seq<char>) -> (result: bool)
    ensures result <==> (forall|i: int| 0 <= i < x.len() ==> #[trigger] x[i] == x[x.len() - i - 1])
  // </vc-spec>

vc-code: |-
  {
      let len = x.len();
      if len <= 1 {
          return true;
      }
      
      let mut i: nat = 0;
      while i < len / 2
          invariant 
              0 <= i <= len / 2,
              forall|j: int| 0 <= j < i ==> x[j] == x[len - j - 1]
      {
          if x[i] != x[len - 1 - i] {
              return false;
          }
          i += 1;
      }
      
      proof {
          assert forall|k: int| 0 <= k < len implies x[k] == x[len - k - 1] by {
              if k < len / 2 {
                  assert(x[k] == x[len - k - 1]);
              } else if k >= len / 2 {
                  let mirror_k = len - k - 1;
                  assert(mirror_k < len / 2);
                  assert(x[mirror_k] == x[len - mirror_k - 1]);
                  assert(x[mirror_k] == x[k]);
                  assert(x[k] == x[len - k - 1]);
              }
          }
      }
      
      true
  }

vc-postamble: |-
  fn main() {}
  
  }

