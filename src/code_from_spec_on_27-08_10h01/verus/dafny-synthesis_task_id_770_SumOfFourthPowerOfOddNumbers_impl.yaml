vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  spec fn sum_fourth_power_odd_spec(n: nat) -> int
      decreases n
  {
      if n == 0 {
          0
      } else {
          let odd_num = 2 * (n as int) - 1;
          odd_num * odd_num * odd_num * odd_num + sum_fourth_power_odd_spec((n - 1) as nat)
      }
  }
  
  proof fn sum_fourth_power_odd_formula(n: nat)
      ensures sum_fourth_power_odd_spec(n) == (n as int) * (2 * (n as int) + 1) * (24 * (n as int) * (n as int) * (n as int) - 12 * (n as int) * (n as int) - 14 * (n as int) + 7) / 15
      decreases n
  {
      if n == 0 {
          assert(sum_fourth_power_odd_spec(0) == 0);
      } else if n == 1 {
          assert(sum_fourth_power_odd_spec(1) == 1 * 1 * 1 * 1);
          assert(sum_fourth_power_odd_spec(1) == 1);
      } else if n == 2 {
          assert(sum_fourth_power_odd_spec(2) == 1 * 1 * 1 * 1 + 3 * 3 * 3 * 3);
          assert(sum_fourth_power_odd_spec(2) == 1 + 81);
          assert(sum_fourth_power_odd_spec(2) == 82);
      }
  }

vc-spec: |-
  // <vc-spec>
  fn sum_of_fourth_power_of_odd_numbers(n: i32) -> (sum: i32)
      requires n > 0,
      ensures sum == n * (2 * n + 1) * (24 * n * n * n - 12 * n * n - 14 * n + 7) / 15,
  // </vc-spec>

vc-code: |-
  {
      let mut sum = 0i32;
      let mut i = 1i32;
      
      while i <= n
          invariant 
              1 <= i <= n + 1,
              sum == sum_fourth_power_odd_spec((i - 1) as nat),
              n > 0,
          decreases n - i + 1
      {
          let odd_num = 2 * i - 1;
          let fourth_power = odd_num * odd_num * odd_num * odd_num;
          sum = sum + fourth_power;
          i = i + 1;
      }
      
      proof {
          sum_fourth_power_odd_formula(n as nat);
      }
      
      sum
  }

vc-postamble: |-
  
  fn main() {}
  
  }

