vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  // Helper lemma to prove existence when element is found
  proof fn lemma_found_element_exists(s1: Seq<i32>, element: i32, pos: usize)
      requires
          pos < s1.len(),
          s1[pos as int] == element,
      ensures
          exists|i: int| 0 <= i < s1.len() && s1[i] == element,
  {
      assert(s1[pos as int] == element);
      assert(0 <= pos < s1.len());
  }

vc-spec: |-
  // <vc-spec>
  fn find_position_of_element(a: &[i32], element: usize, n1: usize, s1: Seq<i32>) -> (result: (i32, usize))
      requires
          n1 == s1.len() && 0 <= n1 <= a.len(),
          forall|i: int| 0 <= i < s1.len() ==> a[i] == s1[i],
      ensures
          result.0 == -1 || result.0 >= 1,
          s1.len() != 0 && result.0 >= 1 ==> exists|i: int| 0 <= i < s1.len() && s1[i] == element,
  // </vc-spec>

vc-code: |-
  {
      if n1 == 0 {
          return (-1, 0);
      }
      
      #[verifier::truncate]
      let element_i32 = element as i32;
      let mut i: usize = 0;
      while i < n1
          invariant
              n1 == s1.len(),
              0 <= n1 <= a.len(),
              forall|j: int| #![auto] 0 <= j < s1.len() ==> a[j] == s1[j],
              i <= n1,
              forall|j: int| 0 <= j < i ==> s1[j] != element_i32,
          decreases n1 - i,
      {
          if a[i] == element_i32 {
              proof {
                  lemma_found_element_exists(s1, element_i32, i);
              }
              return (#[verifier::truncate] (i + 1) as i32, i);
          }
          i += 1;
      }
      (-1, 0)
  }

vc-postamble: |-
  fn main() {}
  
  }

