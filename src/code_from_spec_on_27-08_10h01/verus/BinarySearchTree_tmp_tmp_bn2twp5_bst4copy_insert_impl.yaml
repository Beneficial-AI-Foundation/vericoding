vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  #[derive(PartialEq, Eq)]
  pub enum Tree {
      Empty,
      Node(Box<Tree>, int, Box<Tree>),
  }
  
  pub open spec fn binary_search_tree(tree: Tree) -> bool
      decreases tree
  {
      match tree {
          Tree::Empty => true,
          Tree::Node(left, value, right) => {
              (matches!(*left, Tree::Empty) || (*left).get_node_value() < value)
              && (matches!(*right, Tree::Empty) || (*right).get_node_value() > value)
              && binary_search_tree(*left)
              && binary_search_tree(*right)
              && min_value(*right, value)
              && max_value(*left, value)
          }
      }
  }
  
  pub open spec fn max_value(tree: Tree, max: int) -> bool
      decreases tree
  {
      match tree {
          Tree::Empty => true,
          Tree::Node(left, value, right) => {
              max > value && max_value(*left, max) && max_value(*right, max)
          }
      }
  }
  
  pub open spec fn min_value(tree: Tree, min: int) -> bool
      decreases tree
  {
      match tree {
          Tree::Empty => true,
          Tree::Node(left, value, right) => {
              min < value && min_value(*left, min) && min_value(*right, min)
          }
      }
  }
  
  impl Tree {
      pub open spec fn get_node_value(self) -> int
          recommends !matches!(self, Tree::Empty)
      {
          match self {
              Tree::Node(_, value, _) => value,
              _ => arbitrary()
          }
      }
  }
  
  fn insert_recursion(tree: Tree, value: int) -> (res: Tree)
      requires binary_search_tree(tree),
      ensures 
          res != Tree::Empty ==> binary_search_tree(res),
          forall|x: int| min_value(tree, x) && x < value ==> min_value(res, x),
          forall|x: int| max_value(tree, x) && x > value ==> max_value(res, x),
      decreases tree,
  {
      assume(false);
      Tree::Empty
  }

vc-helpers: |-
  proof fn lemma_insert_preserves_bst_structure(tree: Tree, value: int)
      requires binary_search_tree(tree)
      ensures binary_search_tree(insert_impl(tree, value))
      decreases tree
  {
      match tree {
          Tree::Empty => {
              let result = Tree::Node(Box::new(Tree::Empty), value, Box::new(Tree::Empty));
              assert(binary_search_tree(*Box::new(Tree::Empty)));
              assert(min_value(*Box::new(Tree::Empty), value));
              assert(max_value(*Box::new(Tree::Empty), value));
          },
          Tree::Node(left, node_value, right) => {
              if value < node_value {
                  lemma_insert_preserves_bst_structure(*left, value);
                  let new_left = insert_impl(*left, value);
                  assert(binary_search_tree(new_left));
                  assert(binary_search_tree(*right));
                  assert(min_value(*right, node_value));
                  assert(max_value(new_left, node_value));
              } else if value > node_value {
                  lemma_insert_preserves_bst_structure(*right, value);
                  let new_right = insert_impl(*right, value);
                  assert(binary_search_tree(*left));
                  assert(binary_search_tree(new_right));
                  assert(max_value(*left, node_value));
                  assert(min_value(new_right, node_value));
              }
          }
      }
  }
  
  spec fn insert_impl(tree: Tree, value: int) -> Tree
      decreases tree
  {
      match tree {
          Tree::Empty => Tree::Node(Box::new(Tree::Empty), value, Box::new(Tree::Empty)),
          Tree::Node(left, node_value, right) => {
              if value < node_value {
                  let new_left = insert_impl(*left, value);
                  Tree::Node(Box::new(new_left), node_value, right)
              } else if value > node_value {
                  let new_right = insert_impl(*right, value);
                  Tree::Node(left, node_value, Box::new(new_right))
              } else {
                  tree
              }
          }
      }
  }

vc-spec: |-
  // <vc-spec>
  fn insert(tree: Tree, value: int) -> (res: Tree)
      requires binary_search_tree(tree),
      ensures binary_search_tree(res),
      decreases tree,
  // </vc-spec>

vc-code: |-
  {
      proof {
          lemma_insert_preserves_bst_structure(tree, value);
      }
      match tree {
          Tree::Empty => Tree::Node(Box::new(Tree::Empty), value, Box::new(Tree::Empty)),
          Tree::Node(left, node_value, right) => {
              if value < node_value {
                  let new_left = insert(*left, value);
                  Tree::Node(Box::new(new_left), node_value, right.clone())
              } else if value > node_value {
                  let new_right = insert(*right, value);
                  Tree::Node(left.clone(), node_value, Box::new(new_right))
              } else {
                  tree
              }
          }
      }
  }

vc-postamble: |-
  
  fn main() {}
  
  }

