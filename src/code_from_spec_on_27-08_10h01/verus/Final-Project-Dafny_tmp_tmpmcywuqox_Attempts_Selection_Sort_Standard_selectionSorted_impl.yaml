vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  spec fn is_sorted(s: Seq<i32>) -> bool {
      forall|i: int, j: int| 0 <= i < j < s.len() ==> s[i] <= s[j]
  }
  
  spec fn min_element_index(s: Seq<i32>, start: int) -> int
      recommends 0 <= start < s.len()
  {
      if start >= s.len() {
          start
      } else {
          let min_in_rest = if start + 1 >= s.len() { start } else { min_element_index(s, start + 1) };
          if s[start] <= s[min_in_rest] { start } else { min_in_rest }
      }
  }
  
  proof fn swap_preserves_multiset<T>(v: &Vec<T>, i: usize, j: usize)
      requires i < v.len(), j < v.len()
      ensures ({
          let mut new_v = v@;
          new_v = new_v.update(i as int, v@[j as int]);
          new_v = new_v.update(j as int, v@[i as int]);
          new_v.to_multiset() == v@.to_multiset()
      })
  {
  }

vc-spec: |-
  // <vc-spec>
  fn selection_sorted(array: &mut Vec<i32>) 
      ensures array@.to_multiset() == old(array)@.to_multiset()
  // </vc-spec>

vc-code: |-
  {
      let mut i = 0;
      while i < array.len()
          invariant i <= array.len(),
          invariant array@.to_multiset() == old(array)@.to_multiset(),
          invariant is_sorted(array@.subrange(0, i as int)),
          invariant forall|x: int, y: int| 0 <= x < i && i <= y < array.len() ==> array@[x] <= array@[y]
      {
          let mut min_idx = i;
          let mut j = i + 1;
          
          while j < array.len()
              invariant i <= min_idx < array.len(),
              invariant i < j <= array.len(),
              invariant forall|k: int| i <= k < j ==> array@[min_idx as int] <= array@[k]
          {
              if array[j] < array[min_idx] {
                  min_idx = j;
              }
              j += 1;
          }
          
          if min_idx != i {
              let temp = array[i];
              array.set(i, array[min_idx]);
              array.set(min_idx, temp);
              
              proof {
                  swap_preserves_multiset(array, i, min_idx);
              }
          }
          
          i += 1;
      }
  }

vc-postamble: |-
  fn main() {}
  
  }

