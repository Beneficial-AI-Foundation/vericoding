vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_even(n: int) -> bool {
      n % 2 == 0
  }

vc-helpers: |-


vc-spec: |-
  // <vc-spec>
  fn is_even_at_index_even(lst: &Vec<i32>) -> (result: bool)
      ensures result <==> (forall|i: int| 0 <= i < lst.len() ==> (is_even(i) ==> is_even(lst[i] as int)))
  // </vc-spec>

vc-code: |-
  {
      let mut i = 0;
      while i < lst.len()
          invariant 
              0 <= i <= lst.len(),
              forall|j: int| 0 <= j < i ==> (is_even(j) ==> is_even(lst@[j] as int))
      {
          proof {
              let ghost_i = i as int;
              let ghost_val = lst@[i] as int;
              if is_even(ghost_i) {
                  if !is_even(ghost_val) {
                      return false;
                  }
              }
          }
          i += 1;
      }
      true
  }

vc-postamble: |-
  fn main() {
  }
  
  }

