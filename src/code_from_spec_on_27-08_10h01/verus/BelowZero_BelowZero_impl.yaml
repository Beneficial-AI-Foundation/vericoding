vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  /* 
  HumanEvalX 3
  You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. 
  Your task is to detect if at any point the balance of account falls below zero, and at that point function 
  should return True. Otherwise it should return False.
  */
  
  spec fn sum(s: Seq<int>, n: nat) -> int
      recommends n <= s.len()
      decreases n
  {
      if s.len() == 0 || n == 0 {
          0
      } else {
          s[0] + sum(s.subrange(1, s.len() as int), (n - 1) as nat)
      }
  }

vc-helpers: |-
  proof fn sum_extend(s: Seq<int>, n: nat)
      requires n < s.len()
      ensures sum(s, n + 1) == sum(s, n) + s[n as int]
      decreases n
  {
      if n == 0 {
          assert(sum(s, 1) == s[0] + sum(s.subrange(1, s.len() as int), 0));
          assert(sum(s.subrange(1, s.len() as int), 0) == 0);
          assert(sum(s, 0) == 0);
      } else {
          sum_extend(s.subrange(1, s.len() as int), (n - 1) as nat);
          assert(sum(s.subrange(1, s.len() as int), n) == sum(s.subrange(1, s.len() as int), (n - 1) as nat) + s.subrange(1, s.len() as int)[(n - 1) as int]);
          assert(s.subrange(1, s.len() as int)[(n - 1) as int] == s[n as int]);
      }
  }
  
  proof fn sum_monotonic_helper(s: Seq<int>, n: nat, balance: int, i: nat)
      requires i <= n <= s.len()
      requires balance == sum(s, i)
      ensures exists|k: nat| k <= n && sum(s, k) < 0 <==> (balance < 0 || exists|k: nat| i < k <= n && sum(s, k) < 0)
      decreases n - i
  {
      if i == n {
          return;
      }
      
      sum_extend(s, i);
      let new_balance = balance + s[i as int];
      assert(new_balance == sum(s, i + 1));
      
      sum_monotonic_helper(s, n, new_balance, i + 1);
  }

vc-spec: |-
  // <vc-spec>
  fn below_zero(ops: Seq<int>) -> (result: bool)
      ensures result <==> exists|n: nat| n <= ops.len() && sum(ops, n) < 0
  // </vc-spec>

vc-code: |-
  {
      let mut balance: int = 0;
      let mut i: usize = 0;
      
      while i < ops.len()
          invariant 
              i <= ops.len(),
              balance == sum(ops, i as nat),
              forall|k: nat| k < i ==> sum(ops, k) >= 0
      {
          proof {
              sum_extend(ops, i as nat);
          }
          
          balance = balance + ops[i as int];
          
          if balance < 0 {
              proof {
                  assert(sum(ops, (i + 1) as nat) == balance);
                  assert(balance < 0);
                  assert(exists|n: nat| n <= ops.len() && sum(ops, n) < 0);
              }
              return true;
          }
          
          i = i + 1;
      }
      
      proof {
          assert(forall|k: nat| k <= ops.len() ==> sum(ops, k) >= 0);
          assert(!exists|n: nat| n <= ops.len() && sum(ops, n) < 0);
      }
      
      false
  }

vc-postamble: |-
  fn main() {}
  
  }

