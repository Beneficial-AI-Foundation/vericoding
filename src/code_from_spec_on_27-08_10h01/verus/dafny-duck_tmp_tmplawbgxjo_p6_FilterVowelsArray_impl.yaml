vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  // Given an array of characters, it filters all the vowels. ['d','e','l','i','g','h','t']-> ['e','i']
  spec fn vowels() -> Set<char> {
      set!['a', 'e', 'i', 'o', 'u']
  }
  
  spec fn filter_vowels(xs: Seq<char>) -> Seq<char>
      decreases xs.len()
  {
      if xs.len() == 0 {
          seq![]
      } else if vowels().contains(xs[xs.len() - 1]) {
          filter_vowels(xs.subrange(0, xs.len() - 1)).add(seq![xs[xs.len() - 1]])
      } else {
          filter_vowels(xs.subrange(0, xs.len() - 1))
      }
  }

vc-helpers: |-
  proof fn filter_vowels_empty()
      ensures filter_vowels(seq![]) == (seq![] as Seq<char>)
  {
  }
  
  proof fn filter_vowels_push_vowel(xs: Seq<char>, c: char)
      requires vowels().contains(c)
      ensures filter_vowels(xs.push(c)) == filter_vowels(xs).push(c)
  {
      let ys = xs.push(c);
      assert(ys.len() > 0);
      assert(ys[ys.len() - 1] == c);
      assert(ys.subrange(0, (ys.len() - 1) as int) == xs);
  }
  
  proof fn filter_vowels_push_consonant(xs: Seq<char>, c: char)
      requires !vowels().contains(c)
      ensures filter_vowels(xs.push(c)) == filter_vowels(xs)
  {
      let ys = xs.push(c);
      assert(ys.len() > 0);
      assert(ys[ys.len() - 1] == c);
      assert(ys.subrange(0, (ys.len() - 1) as int) == xs);
  }
  
  proof fn filter_vowels_prefix(xs: Seq<char>, i: nat)
      requires i <= xs.len()
      ensures filter_vowels(xs.subrange(0, i as int)) == filter_vowels(xs).take(filter_vowels(xs.subrange(0, i as int)).len() as int)
      decreases i
  {
      if i == 0 {
          assert(xs.subrange(0, 0) =~= seq![]);
      } else {
          let prefix = xs.subrange(0, (i - 1) as int);
          let c = xs[(i - 1) as int];
          assert(xs.subrange(0, i as int) == prefix.push(c));
          
          if vowels().contains(c) {
              filter_vowels_push_vowel(prefix, c);
          } else {
              filter_vowels_push_consonant(prefix, c);
          }
      }
  }

vc-spec: |-
  // <vc-spec>
  fn filter_vowels_array(xs: &[char]) -> (ys: Vec<char>)
      ensures filter_vowels(xs@) == ys@
  // </vc-spec>

vc-code: |-
  {
      let mut result = Vec::new();
      let mut i = 0;
      
      while i < xs.len()
          invariant 
              0 <= i <= xs.len(),
              result@ == filter_vowels(xs@.subrange(0, i as int))
      {
          let c = xs[i];
          if vowels().contains(c) {
              result.push(c);
              proof {
                  let prev_seq = xs@.subrange(0, i as int);
                  let curr_seq = xs@.subrange(0, (i + 1) as int);
                  assert(curr_seq == prev_seq.push(c));
                  filter_vowels_push_vowel(prev_seq, c);
              }
          } else {
              proof {
                  let prev_seq = xs@.subrange(0, i as int);
                  let curr_seq = xs@.subrange(0, (i + 1) as int);
                  assert(curr_seq == prev_seq.push(c));
                  filter_vowels_push_consonant(prev_seq, c);
              }
          }
          i += 1;
      }
      
      proof {
          assert(xs@.subrange(0, xs.len() as int) == xs@);
      }
      
      result
  }

vc-postamble: |-
  fn main() {}
  
  }

