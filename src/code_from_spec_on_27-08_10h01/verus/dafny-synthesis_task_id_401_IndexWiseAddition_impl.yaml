vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  spec fn add_rows(row_a: Seq<int>, row_b: Seq<int>) -> Seq<int>
      recommends row_a.len() == row_b.len()
  {
      Seq::new(row_a.len(), |i: int| row_a[i] + row_b[i])
  }
  
  proof fn lemma_add_rows_properties(row_a: Seq<int>, row_b: Seq<int>)
      requires row_a.len() == row_b.len()
      ensures 
          add_rows(row_a, row_b).len() == row_a.len(),
          forall|j: int| 0 <= j < add_rows(row_a, row_b).len() ==> 
              add_rows(row_a, row_b)[j] == row_a[j] + row_b[j]
  {
  }

vc-spec: |-
  // <vc-spec>
  fn index_wise_addition(a: Seq<Seq<int>>, b: Seq<Seq<int>>) -> (result: Seq<Seq<int>>)
      requires 
          a.len() > 0 && b.len() > 0,
          a.len() == b.len(),
          forall|i: int| 0 <= i < a.len() ==> a[i].len() == b[i].len(),
      ensures 
          result.len() == a.len(),
          forall|i: int| 0 <= i < result.len() ==> result[i].len() == a[i].len(),
          forall|i: int, j: int| 0 <= i < result.len() && 0 <= j < result[i].len() ==> 
              result[i][j] == a[i][j] + b[i][j],
  // </vc-spec>

vc-code: |-
  {
      let result = Seq::new(a.len(), |i: int| add_rows(a[i], b[i]));
      
      proof {
          assert forall|i: int| 0 <= i < result.len() implies result[i].len() == a[i].len() by {
              lemma_add_rows_properties(a[i], b[i]);
          };
          
          assert forall|i: int, j: int| 0 <= i < result.len() && 0 <= j < result[i].len() implies 
              result[i][j] == a[i][j] + b[i][j] by {
              lemma_add_rows_properties(a[i], b[i]);
          };
      }
      
      result
  }

vc-postamble: |-
  
  fn main() {}
  
  }

