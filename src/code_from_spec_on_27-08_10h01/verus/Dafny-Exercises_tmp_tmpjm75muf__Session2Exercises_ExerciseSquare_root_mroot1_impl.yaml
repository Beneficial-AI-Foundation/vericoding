vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  proof fn lemma_sqrt_bounds(r: u32, n: u32)
      requires 
          r >= 0,
          (r as int) * (r as int) <= n,
          n < ((r + 1) as int) * ((r + 1) as int),
      ensures
          r >= 0 && (r as int) * (r as int) <= n < ((r + 1) as int) * ((r + 1) as int),
  {
  }
  
  proof fn lemma_sqrt_monotonic(i: u32, n: u32)
      requires 
          i >= 0,
          (i as int) * (i as int) <= n,
          !(i < n && (i + 1) <= 65536 && ((i + 1) as int) * ((i + 1) as int) <= n),
      ensures
          i >= 0 && (i as int) * (i as int) <= n < ((i + 1) as int) * ((i + 1) as int),
  {
      if i >= n {
          assert((i as int) >= (n as int));
          assert((i as int) * (i as int) >= (n as int) * (n as int));
          assert(((i + 1) as int) * ((i + 1) as int) > (i as int) * (i as int));
          assert(n < ((i + 1) as int) * ((i + 1) as int));
      } else if i + 1 > 65536 {
          assert(((i + 1) as int) > 65536);
          assert(((i + 1) as int) * ((i + 1) as int) > 65536 * 65536);
          assert(n <= 0xFFFFFFFF);
          assert(65536 * 65536 > 0xFFFFFFFF);
          assert(n < ((i + 1) as int) * ((i + 1) as int));
      } else {
          assert(!(((i + 1) as int) * ((i + 1) as int) <= n));
          assert(((i + 1) as int) * ((i + 1) as int) > n);
      }
  }

vc-spec: |-
  // <vc-spec>
  fn mroot1(n: u32) -> (r: u32) //Cost O(root n)
      requires n >= 0,
      ensures r >= 0 && (r as int) * (r as int) <= n < ((r + 1) as int) * ((r + 1) as int),
  // </vc-spec>

vc-code: |-
  {
      let mut i = 0u32;
      while i < n && i + 1 <= 65536 && ((i + 1) as int) * ((i + 1) as int) <= n
          invariant 
              i >= 0,
              (i as int) * (i as int) <= n,
              i <= 65536,
          decreases 65536 - i,
      {
          i = i + 1;
      }
      
      proof {
          lemma_sqrt_monotonic(i, n);
      }
      
      i
  }

vc-postamble: |-
  
  fn main() {}
  
  }

