vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn factorial(n: nat) -> nat
      decreases n
  {
      if n == 0 { 1 } else { n * factorial((n - 1) as nat) }
  }

vc-helpers: |-
  proof fn factorial_positive(n: nat)
      ensures factorial(n) >= 1
      decreases n
  {
      if n == 0 {
          assert(factorial(0) == 1);
      } else {
          factorial_positive((n - 1) as nat);
          assert(factorial((n - 1) as nat) >= 1);
          assert(factorial(n) == n * factorial((n - 1) as nat));
          assert(n >= 1);
          assert(factorial(n) >= 1 * 1);
          assert(factorial(n) >= 1);
      }
  }
  
  proof fn factorial_monotonic(n: nat)
      requires n >= 1
      ensures factorial(n) >= n
      decreases n
  {
      if n == 1 {
          assert(factorial(1) == 1 * factorial(0));
          assert(factorial(0) == 1);
          assert(factorial(1) == 1);
          assert(factorial(1) >= 1);
      } else {
          factorial_monotonic((n - 1) as nat);
          factorial_positive((n - 1) as nat);
          assert(factorial((n - 1) as nat) >= (n - 1) as nat);
          assert(factorial((n - 1) as nat) >= 1);
          assert(factorial(n) == n * factorial((n - 1) as nat));
          assert(n >= 2);
          assert(factorial((n - 1) as nat) >= (n - 1) as nat);
          assert(factorial(n) >= n * (n - 1) as nat);
          assert(factorial(n) >= n);
      }
  }
  
  proof fn factorial_bound(n: nat)
      requires n <= 12
      ensures factorial(n) <= 479001600
      decreases n
  {
      if n == 0 {
          assert(factorial(0) == 1);
      } else if n == 1 {
          assert(factorial(1) == 1);
      } else if n == 2 {
          assert(factorial(2) == 2);
      } else if n == 3 {
          assert(factorial(3) == 6);
      } else if n == 4 {
          assert(factorial(4) == 24);
      } else if n == 5 {
          assert(factorial(5) == 120);
      } else if n == 6 {
          assert(factorial(6) == 720);
      } else if n == 7 {
          assert(factorial(7) == 5040);
      } else if n == 8 {
          assert(factorial(8) == 40320);
      } else if n == 9 {
          assert(factorial(9) == 362880);
      } else if n == 10 {
          assert(factorial(10) == 3628800);
      } else if n == 11 {
          assert(factorial(11) == 39916800);
      } else if n == 12 {
          assert(factorial(12) == 479001600);
      }
  }
  
  proof fn factorial_computation_helper(i: nat, result: nat)
      requires result == factorial(i)
      requires i <= 12
      ensures result * (i + 1) == factorial(i + 1)
      ensures result * (i + 1) <= 479001600
  {
      assert(factorial(i + 1) == (i + 1) * factorial(i));
      assert(result * (i + 1) == factorial(i + 1));
      factorial_bound(i + 1);
  }

vc-spec: |-
  // <vc-spec>
  fn compute_factorial(n: i32) -> (u: i32)
      requires 1 <= n,
      ensures u == factorial(n as nat),
  // </vc-spec>

vc-code: |-
  {
      let mut result: i32 = 1;
      let mut i: i32 = 1;
      
      proof {
          assert(n <= 12); // This must be implied by the postcondition constraint
          factorial_bound(n as nat);
      }
      
      while i <= n
          invariant 
              1 <= i <= n + 1,
              result == factorial((i - 1) as nat),
              i <= 13,
              result <= 479001600,
              n <= 12
          decreases n + 1 - i
      {
          proof {
              factorial_computation_helper((i - 1) as nat, result as nat);
              assert(result as nat * i as nat == factorial(i as nat));
              assert(i <= 12);
              factorial_bound(i as nat);
          }
          result = result * i;
          i = i + 1;
      }
      
      result
  }

vc-postamble: |-
  
  fn main() {
  }
  
  }

