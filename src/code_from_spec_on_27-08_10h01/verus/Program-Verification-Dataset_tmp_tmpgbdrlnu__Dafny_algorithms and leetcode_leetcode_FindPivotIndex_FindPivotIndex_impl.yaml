vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  /*
  https://leetcode.com/problems/find-pivot-index/description/
  Given an array of integers nums, calculate the pivot index of this array.
  
  The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the right.
  
  If the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array.
  
  Return the leftmost pivot index. If no such index exists, return -1.
  
  
  
  Example 1:
  
  Input: nums = [1,7,3,6,5,6]
  Output: 3
  Explanation:
  The pivot index is 3.
  Left sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11
  Right sum = nums[4] + nums[5] = 5 + 6 = 11
  Example 2:
  
  Input: nums = [1,2,3]
  Output: -1
  Explanation:
  There is no index that satisfies the conditions in the problem statement.
  Example 3:
  
  Input: nums = [2,1,-1]
  Output: 0
  Explanation:
  The pivot index is 0.
  Left sum = 0 (no elements to the left of index 0)
  Right sum = nums[1] + nums[2] = 1 + -1 = 0
  
  ```TypeScript
  function pivotIndex(nums: number[]): number {
      const n = nums.length;
      let leftsums = [0], rightsums = [0];
      for(let i=1; i < n+1; i++) {
          leftsums.push(nums[i-1]+leftsums[i-1]);
          rightsums.push(nums[n-i]+rightsums[i-1]);
      }
      for(let i=0; i <= n; i++) {
          if(leftsums[i] == rightsums[n-(i+1)]) return i;
      }
      return -1;
  };
  ```
  */
  
  spec fn sum(nums: Seq<int>) -> int
      decreases nums.len()
  {
      if nums.len() == 0 { 
          0 
      } else { 
          sum(nums.subrange(0, nums.len() as int - 1)) + nums[nums.len() - 1]
      }
  }
  
  
  spec fn sum_up(nums: Seq<int>) -> int
      decreases nums.len()
  {
      if nums.len() == 0 { 
          0 
      } else { 
          nums[0] + sum_up(nums.subrange(1, nums.len() as int))
      }
  }
  
  // By Divyanshu Ranjan
  
  // By Divyanshu Ranjan

vc-helpers: |-
  lemma lemma_sum_equivalence(nums: Seq<int>)
      ensures sum(nums) == sum_up(nums)
      decreases nums.len()
  {
      if nums.len() == 0 {
      } else if nums.len() == 1 {
      } else {
          lemma_sum_equivalence(nums.subrange(0, nums.len() as int - 1));
          lemma_sum_equivalence(nums.subrange(1, nums.len() as int));
      }
  }
  
  lemma lemma_sum_empty()
      ensures sum(Seq::<int>::empty()) == 0
  {
  }
  
  lemma lemma_sum_single(x: int)
      ensures sum(seq![x]) == x
  {
  }
  
  lemma lemma_sum_split(nums: Seq<int>, k: int)
      requires 0 <= k <= nums.len()
      ensures sum(nums) == sum(nums.subrange(0, k)) + sum(nums.subrange(k, nums.len() as int))
      decreases nums.len()
  {
      if k == 0 {
          lemma_sum_empty();
      } else if k == nums.len() {
          lemma_sum_empty();
      } else {
          if nums.len() <= 1 {
          } else {
              lemma_sum_split(nums.subrange(0, nums.len() as int - 1), k);
          }
      }
  }
  
  lemma lemma_subrange_properties(nums: Seq<int>, i: nat)
      requires i < nums.len()
      ensures nums.subrange(0, i as int).len() == i
      ensures nums.subrange((i + 1) as int, nums.len() as int).len() == nums.len() - i - 1
  {
  }
  
  spec fn compute_sum(nums_seq: Seq<int>, start: int, end: int) -> int
      requires 0 <= start <= end <= nums_seq.len()
  {
      sum(nums_seq.subrange(start, end))
  }
  
  fn compute_sum_exec(nums: &Vec<i32>, start: usize, end: usize) -> (result: i32)
      requires start <= end <= nums.len()
      ensures result as int == sum(nums@.map_values(|v: i32| v as int).subrange(start as int, end as int))
  {
      let mut total: i32 = 0;
      let mut idx = start;
      
      while idx < end
          invariant start <= idx <= end <= nums.len()
          invariant total as int == sum(nums@.map_values(|v: i32| v as int).subrange(start as int, idx as int))
      {
          total = total + nums[idx];
          idx = idx + 1;
      }
      
      total
  }

vc-spec: |-
  // <vc-spec>
  fn find_pivot_index(nums: &Vec<i32>) -> (index: i32)
      requires nums.len() > 0
      ensures index == -1 ==> forall |k: nat| #[trigger] sum(nums@.map_values(|v: i32| v as int).subrange(0, k as int)) != #[trigger] sum(nums@.map_values(|v: i32| v as int).subrange((k + 1) as int, nums@.len() as int))
      ensures 0 <= index < nums.len() ==> sum(nums@.map_values(|v: i32| v as int).subrange(0, index as int)) == sum(nums@.map_values(|v: i32| v as int).subrange((index + 1) as int, nums@.len() as int))
  // </vc-spec>

vc-code: |-
  {
      let n = nums.len();
      let nums_seq = nums@.map_values(|v: i32| v as int);
      
      for i in 0..n
          invariant forall |k: nat| k < i ==> compute_sum(nums_seq, 0, k as int) != compute_sum(nums_seq, (k + 1) as int, nums_seq.len() as int)
      {
          proof {
              lemma_subrange_properties(nums_seq, i);
          }
          
          let left_sum = compute_sum_exec(nums, 0, i);
          let right_sum = compute_sum_exec(nums, i + 1, n);
          
          proof {
              assert(left_sum as int == sum(nums_seq.subrange(0, i as int)));
              assert(right_sum as int == sum(nums_seq.subrange((i + 1) as int, nums_seq.len() as int)));
          }
          
          if left_sum == right_sum {
              return i as i32;
          }
      }
      
      -1
  }

vc-postamble: |-
  
  fn main() {
  }
  
  }

