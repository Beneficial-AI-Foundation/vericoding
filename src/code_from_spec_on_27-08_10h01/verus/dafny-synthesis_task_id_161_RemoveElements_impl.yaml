vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  // Predicate to check if an element exists in an array
  spec fn in_array(a: &[i32], x: i32) -> bool {
      exists|i: int| 0 <= i < a.len() && a@.index(i) == x
  }

vc-helpers: |-
  spec fn contains_element(vec: &Vec<i32>, x: i32) -> bool {
      vec@.contains(x)
  }
  
  proof fn lemma_in_array_equiv(a: &[i32], x: i32)
      ensures in_array(a, x) <==> a@.contains(x)
  {
      assert(in_array(a, x) <==> exists|i: int| 0 <= i < a.len() && a@.index(i) == x);
      assert(a@.contains(x) <==> exists|i: int| 0 <= i < a@.len() && a@.index(i) == x);
      assert(a.len() == a@.len());
  }

vc-spec: |-
  // <vc-spec>
  fn remove_elements(a: &[i32], b: &[i32]) -> (result: Vec<i32>)
      // All elements in the output are in a and not in b
      ensures forall|x: i32| result@.contains(x) ==> in_array(a, x) && !in_array(b, x)
      // The elements in the output are all different
      ensures forall|i: int, j: int| 0 <= i < j < result.len() ==> result@.index(i) != result@.index(j)
  // </vc-spec>

vc-code: |-
  {
      let mut result = Vec::new();
      
      for i in 0..a.len()
          invariant 
              forall|x: i32| result@.contains(x) ==> in_array(a, x) && !in_array(b, x),
              forall|k: int, l: int| 0 <= k < l < result.len() ==> result@.index(k) != result@.index(l)
      {
          let elem = a[i];
          
          proof {
              lemma_in_array_equiv(b, elem);
          }
          
          if !b@.contains(elem) && !result@.contains(elem) {
              result.push(elem);
              
              proof {
                  lemma_in_array_equiv(a, elem);
                  lemma_in_array_equiv(b, elem);
              }
          }
      }
      
      result
  }

vc-postamble: |-
  
  fn main() {
  }
  
  }

