vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn power(base: int, exponent: int) -> int
      recommends exponent >= 0
      decreases exponent
  {
      if exponent <= 0 { 1 } else { base * power(base, exponent - 1) }
  }

vc-helpers: |-
  proof fn power_nonneg_exponent(base: int, exponent: int)
      requires exponent >= 0
      ensures power(base, exponent) == power(base, exponent)
  {
  }
  
  proof fn power_increment(base: int, i: int)
      requires i >= 0
      ensures power(base, i + 1) == power(base, i) * base
  {
      reveal_with_fuel(power, 2);
  }
  
  spec fn abs_int(x: int) -> int {
      if x >= 0 { x } else { -x }
  }
  
  fn compute_power(base: i32, exponent: u32) -> (result: i32)
      requires abs_int(base as int) <= 100, exponent <= 20
      ensures result == power(base as int, exponent as int)
  {
      let mut result = 1i32;
      let mut i = 0u32;
      
      while i < exponent
          invariant 
              0 <= i <= exponent,
              result == power(base as int, i as int),
              abs_int(base as int) <= 100,
              exponent <= 20
          decreases exponent - i
      {
          proof {
              power_increment(base as int, i as int);
          }
          result = result * base;
          i = i + 1;
      }
      
      result
  }

vc-spec: |-
  // <vc-spec>
  fn power_of_list_elements(l: Vec<i32>, n: u32) -> (result: Vec<i32>)
      ensures 
          result.len() == l.len(),
          forall|i: int| #![auto] 0 <= i < l.len() ==> result[i] == power(l[i] as int, n as int),
  // </vc-spec>

vc-code: |-
  {
      let mut result = Vec::new();
      let mut i = 0;
      
      while i < l.len()
          invariant 
              0 <= i <= l.len(),
              result.len() == i,
              forall|j: int| #![auto] 0 <= j < i ==> result[j] == power(l[j] as int, n as int),
              forall|j: int| #![auto] 0 <= j < l.len() ==> abs_int(l[j] as int) <= 100,
              n <= 20
          decreases l.len() - i
      {
          let power_val = compute_power(l[i], n);
          result.push(power_val);
          i = i + 1;
      }
      
      result
  }

vc-postamble: |-
  fn main() {}
  
  }

