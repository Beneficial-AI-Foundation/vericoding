vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  // Noa Leron 207131871
  // Tsuri Farhana 315016907
  
  
  
  spec fn sorted(q: Seq<int>) -> bool {
      forall|i: int, j: int| 0 <= i <= j < q.len() ==> q[i] <= q[j]
  }
  
  /*
  Goal: Implement the well known merge sort algorithm in O(a.Length X log_2(a.Length)) time, recursively.
  
  - Divide the contents of the original array into two local arrays
  - After sorting the local arrays (recursively), merge the contents of the two returned arrays using the Merge method (see below)
  - DO NOT modify the specification or any other part of the method's signature
  - DO NOT introduce any further methods
  */
  
  spec fn inv(a: Seq<int>, a1: Seq<int>, a2: Seq<int>, i: nat, mid: nat) -> bool {
      (i <= a1.len()) && (i <= a2.len()) && (i + mid <= a.len()) &&
      (a1.subrange(0, i as int) =~= a.subrange(0, i as int)) && 
      (a2.subrange(0, i as int) =~= a.subrange(mid as int, (i + mid) as int))
  }
  
  /*
  Goal: Implement iteratively, correctly, efficiently, clearly
  
  DO NOT modify the specification or any other part of the method's signature
  */
  fn merge(b: &mut Vec<int>, c: &Vec<int>, d: &Vec<int>)
      requires
          old(b).len() == c.len() + d.len(),
          sorted(c@),
          sorted(d@),
      ensures
          sorted(b@),
          b@.to_multiset() == c@.to_multiset().add(d@.to_multiset()),
  {
    assume(false);
  }
  
  
  //This is a method that replace the loop body
  
  
  //Loop invariant - b is sorted so far and the next two potential values that will go into b are bigger then the biggest value in b.
  spec fn inv_sorted(b: Seq<int>, c: Seq<int>, d: Seq<int>, i: nat, j: nat) -> bool {
      i <= c.len() && j <= d.len() && i + j <= b.len() &&
      ((i + j > 0 && i < c.len()) ==> (b[(j + i - 1) as int] <= c[i as int])) &&
      ((i + j > 0 && j < d.len()) ==> (b[(j + i - 1) as int] <= d[j as int])) &&
      sorted(b.subrange(0, (i + j) as int))
      }
  
  
  //Loop invariant - the multiset of the prefix of b so far is the same multiset as the prefixes of c and d so far.
  spec fn inv_sub_set(b: Seq<int>, c: Seq<int>, d: Seq<int>, i: nat, j: nat) -> bool {
      i <= c.len() && j <= d.len() && i + j <= b.len() &&
      b.subrange(0, (i + j) as int).to_multiset() == 
          c.subrange(0, i as int).to_multiset().add(d.subrange(0, j as int).to_multiset())
  }
  
  //This lemma helps verus see that if the prefixes of arrays are the same multiset until the end of the arrays,
  //all the arrays are the same multiset.
  
  
  //This lemma helps verus see that after adding the next value from c to b the prefixes are still the same subsets.

vc-helpers: |-
  fn lemma_multiset_equality(b: Seq<int>, c: Seq<int>, d: Seq<int>, i: nat, j: nat)
      requires
          i == c.len(),
          j == d.len(),
          i + j == b.len(),
          b.subrange(0, (i + j) as int).to_multiset() == 
              c.subrange(0, i as int).to_multiset().add(d.subrange(0, j as int).to_multiset())
      ensures
          b.to_multiset() == c.to_multiset().add(d.to_multiset())
  {
      assert(b.subrange(0, (i + j) as int) =~= b);
      assert(c.subrange(0, i as int) =~= c);
      assert(d.subrange(0, j as int) =~= d);
  }
  
  fn lemma_add_from_c(b: Seq<int>, c: Seq<int>, d: Seq<int>, i: nat, j: nat)
      requires
          i < c.len(),
          j <= d.len(),
          i + j < b.len(),
          inv_sub_set(b, c, d, i, j),
          b[(i + j) as int] == c[i as int]
      ensures
          inv_sub_set(b, c, d, i + 1, j)
  {
      proof {
          let new_b = b.subrange(0, (i + j + 1) as int);
          let old_b = b.subrange(0, (i + j) as int);
          let old_c = c.subrange(0, i as int);
          let new_c = c.subrange(0, (i + 1) as int);
          let old_d = d.subrange(0, j as int);
          
          assert(new_b =~= old_b.push(c[i as int]));
          assert(new_c =~= old_c.push(c[i as int]));
      }
  }
  
  fn lemma_add_from_d(b: Seq<int>, c: Seq<int>, d: Seq<int>, i: nat, j: nat)
      requires
          i <= c.len(),
          j < d.len(),
          i + j < b.len(),
          inv_sub_set(b, c, d, i, j),
          b[(i + j) as int] == d[j as int]
      ensures
          inv_sub_set(b, c, d, i, j + 1)
  {
      proof {
          let new_b = b.subrange(0, (i + j + 1) as int);
          let old_b = b.subrange(0, (i + j) as int);
          let old_c = c.subrange(0, i as int);
          let old_d = d.subrange(0, j as int);
          let new_d = d.subrange(0, (j + 1) as int);
          
          assert(new_b =~= old_b.push(d[j as int]));
          assert(new_d =~= old_d.push(d[j as int]));
      }
  }

vc-spec: |-
  // <vc-spec>
  fn merge_sort(a: Vec<int>) -> (b: Vec<int>)
      ensures
          b.len() == a.len(),
          sorted(b@),
          a@.to_multiset() == b@.to_multiset(),
      decreases a.len()
  // </vc-spec>

vc-code: |-
  {
      if a.len() <= 1 {
          return a;
      }
      
      let mid = a.len() / 2;
      let mut left = Vec::new();
      let mut right = Vec::new();
      
      let mut k = 0;
      while k < mid
          invariant
              k <= mid,
              left.len() == k,
              forall|idx: int| 0 <= idx < k ==> left@[idx] == a@[idx]
      {
          left.push(a[k]);
          k += 1;
      }
      
      k = mid;
      while k < a.len()
          invariant
              mid <= k <= a.len(),
              right.len() == k - mid,
              forall|idx: int| 0 <= idx < k - mid ==> right@[idx] == a@[mid + idx]
      {
          right.push(a[k]);
          k += 1;
      }
      
      let sorted_left = merge_sort(left);
      let sorted_right = merge_sort(right);
      
      let mut result: Vec<int> = Vec::with_capacity(a.len());
      let mut i = 0;
      while i < a.len()
          invariant
              i <= a.len(),
              result.len() == i
      {
          result.push(0int);
          i += 1;
      }
      
      merge(&mut result, &sorted_left, &sorted_right);
      
      proof {
          assert(left@.to_multiset().add(right@.to_multiset()) == a@.to_multiset());
          assert(sorted_left@.to_multiset() == left@.to_multiset());
          assert(sorted_right@.to_multiset() == right@.to_multiset());
          assert(sorted_left@.to_multiset().add(sorted_right@.to_multiset()) == a@.to_multiset());
      }
      
      result
  }

vc-postamble: |-
  
  fn main() {}
  
  }

