vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  //https://stackoverflow.com/questions/69364687/how-to-prove-time-complexity-of-bubble-sort-using-dafny
  spec fn n_choose_2(n: int) -> int
  {
      n * (n - 1) / 2
  }
  
  // sum of all integers in the range [lo, hi)
  // (inclusive of lo, exclusive of hi)
  spec fn sum_range(lo: int, hi: int) -> int
      decreases hi - lo
  {
      if lo >= hi { 0 }
      else { sum_range(lo, hi - 1) + hi - 1 }
  }
  
  // dafny proves this automatically by induction

vc-helpers: |-
  lemma lemma_sum_range_equals_n_choose_2(n: int)
      requires n >= 0
      ensures sum_range(0, n) == n_choose_2(n)
      decreases n
  {
      if n <= 1 {
          assert(sum_range(0, n) == 0);
          assert(n_choose_2(n) == 0);
      } else {
          lemma_sum_range_equals_n_choose_2(n - 1);
          assert(sum_range(0, n) == sum_range(0, n - 1) + (n - 1));
          assert(sum_range(0, n - 1) == n_choose_2(n - 1));
          assert(sum_range(0, n) == n_choose_2(n - 1) + (n - 1));
          assert(n_choose_2(n - 1) == (n - 1) * (n - 2) / 2);
          assert(n_choose_2(n) == n * (n - 1) / 2);
          assert(n_choose_2(n - 1) + (n - 1) == (n - 1) * (n - 2) / 2 + (n - 1));
          assert((n - 1) * (n - 2) / 2 + (n - 1) == (n - 1) * ((n - 2) / 2 + 1));
          assert((n - 2) / 2 + 1 == (n - 2 + 2) / 2);
          assert((n - 2 + 2) / 2 == n / 2);
          assert((n - 1) * (n / 2) == n * (n - 1) / 2);
      }
  }
  
  lemma lemma_sum_range_monotonic(i: int, n: int)
      requires 0 <= i <= n
      ensures sum_range(0, i) <= sum_range(0, n)
      decreases n - i
  {
      if i == n {
      } else {
          lemma_sum_range_monotonic(i, n - 1);
          assert(sum_range(0, n) == sum_range(0, n - 1) + (n - 1));
      }
  }

vc-spec: |-
  // <vc-spec>
  fn bubble_sort(a: &mut Vec<i32>) -> (n: usize) 
      ensures n <= n_choose_2(a.len() as int) as usize
  // </vc-spec>

vc-code: |-
  {
      let mut comparisons = 0;
      let n = a.len();
      
      if n <= 1 {
          return 0;
      }
      
      for i in 0..n
          invariant comparisons <= sum_range(0, i as int) as usize
      {
          for j in 0..(n - 1 - i)
              invariant comparisons <= sum_range(0, i as int) as usize + j as usize
          {
              comparisons += 1;
              if a[j] > a[j + 1] {
                  let temp = a[j];
                  a[j] = a[j + 1];
                  a[j + 1] = temp;
              }
          }
      }
      
      proof {
          lemma_sum_range_equals_n_choose_2(n as int);
          assert(sum_range(0, n as int) == n_choose_2(n as int));
          assert(comparisons <= sum_range(0, n as int) as usize);
          assert(sum_range(0, n as int) as usize == n_choose_2(n as int) as usize);
      }
      
      comparisons
  }

vc-postamble: |-
  fn main() {
  }
  
  }

