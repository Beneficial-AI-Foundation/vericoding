vc-preamble: |-
  // RUN: /compile:0
  
  use vstd::prelude::*;
  
  verus! {
  
  // Predicate to check if outarr is the reverse of arr
  spec fn reversed(arr: Seq<char>, outarr: Seq<char>) -> bool {
      arr.len() == outarr.len() &&
      forall|k: int| 0 <= k < arr.len() ==> outarr[k] == arr[arr.len() - 1 - k]
  }

vc-helpers: |-
  proof fn lemma_reversed_construction(arr: Seq<char>, outarr: Seq<char>, i: int)
      requires 
          arr.len() == outarr.len(),
          0 <= i < arr.len(),
          forall|k: int| 0 <= k < i ==> outarr[k] == arr[arr.len() - 1 - k]
      ensures 
          i < arr.len()
  {
  }

vc-spec: |-
  // <vc-spec>
  fn yarra(arr: &Vec<char>) -> (outarr: Vec<char>)
      requires arr.len() > 0
      ensures outarr.len() == arr.len() && reversed(arr@, outarr@)
  // </vc-spec>

vc-code: |-
  {
      let mut result = Vec::new();
      let len = arr.len();
      
      let mut i = 0;
      while i < len
          invariant
              0 <= i <= len,
              result.len() == i,
              forall|k: int| 0 <= k < i ==> result@[k] == arr@[len - 1 - k]
      {
          result.push(arr[len - 1 - i]);
          i = i + 1;
      }
      
      proof {
          assert(result.len() == len);
          assert(forall|k: int| 0 <= k < len ==> result@[k] == arr@[len - 1 - k]);
      }
      
      result
  }

vc-postamble: |-
  fn main() {
  }
  
  }

