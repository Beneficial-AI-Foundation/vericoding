vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  /*
     CS:5810 Formal Methods in Software Engineering
     Fall 2017
     The University of Iowa
  
     Instructor: Cesare Tinelli
  
     Credits: Example adapted from Dafny tutorial
  */
  
  
  //      n = 0, 1, 2, 3, 4, 5, 6,  7,  8, ...
  // fib(n) = 0, 1, 1, 2, 3, 5, 8, 13, 21, ...
  spec fn fib(n: nat) -> nat
      decreases n
  {
      if n == 0 { 0 }
      else if n == 1 { 1 }
      else { fib((n - 1) as nat) + fib((n - 2) as nat) }
  }

vc-helpers: |-
  proof fn fib_monotonic(i: nat, j: nat)
      requires i <= j
      ensures fib(i) <= fib(j)
      decreases j
  {
      if i == j {
          return;
      }
      if j == 0 {
          return;
      }
      if j == 1 {
          return;
      }
      if i == 0 {
          fib_monotonic(0, (j - 1) as nat);
          fib_monotonic(0, (j - 2) as nat);
      } else if i == 1 {
          fib_monotonic(1, (j - 1) as nat);
      } else {
          fib_monotonic((i - 1) as nat, (j - 1) as nat);
          fib_monotonic((i - 2) as nat, (j - 2) as nat);
      }
  }
  
  proof fn fib_bound(n: nat)
      requires n <= 93
      ensures fib(n) <= usize::MAX
      decreases n
  {
      if n <= 1 {
          return;
      }
      fib_bound((n - 1) as nat);
      fib_bound((n - 2) as nat);
  }

vc-spec: |-
  // <vc-spec>
  fn ComputeFib(n: usize) -> (f: usize)
      ensures f == fib(n as nat)
  // </vc-spec>

vc-code: |-
  {
      if n > 93 {
          return 0;
      }
      
      proof {
          fib_bound(n as nat);
      }
      
      if n == 0 {
          return 0;
      }
      if n == 1 {
          return 1;
      }
      
      let mut a = 0usize;
      let mut b = 1usize;
      let mut i = 2usize;
      
      while i <= n
          invariant
              2 <= i <= n + 1,
              a == fib((i - 2) as nat),
              b == fib((i - 1) as nat),
              n <= 93
          decreases n + 1 - i
      {
          proof {
              fib_bound(i as nat);
              assert(fib((i - 2) as nat) + fib((i - 1) as nat) == fib(i as nat));
          }
          
          let temp = a + b;
          a = b;
          b = temp;
          i = i + 1;
      }
      
      b
  }

vc-postamble: |-
  fn main() {
  }
  
  }

