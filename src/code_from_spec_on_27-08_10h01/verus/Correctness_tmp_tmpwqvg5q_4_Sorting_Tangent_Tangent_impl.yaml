vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  /**
    Ather, Mohammad Faiz (s4648481/3)
    CSSE3100
    Assignemnt 3
    The University of Queensland
   */
  
  // Question 1
  
  // Author: Leino, Title: Program Proofs
  fn binary_search(a: &[int], circle: int) -> (n: usize)
      requires
          forall|i: int| 1 <= i < a.len() ==> a[i-1] < #[trigger] a[i],
          forall|i: int, j: int| 0 <= i < j < a.len() ==> #[trigger] a[i] < #[trigger] a[j],
      ensures
          n <= a.len(),
          forall|i: int| 0 <= i < n ==> #[trigger] a[i] < circle,
          forall|i: int| n <= i < a.len() ==> circle <= #[trigger] a[i],
  {
      assume(false);
      0
  }

vc-helpers: |-
  spec fn contains_element(r: &[int], x: &[int]) -> bool {
      exists|i: int, j: int| 0 <= i < r.len() && 0 <= j < x.len() && r[i] == x[j]
  }
  
  spec fn no_common_elements(r: &[int], x: &[int]) -> bool {
      forall|i: int, j: int| 0 <= i < r.len() && 0 <= j < x.len() ==> r[i] != x[j]
  }
  
  spec fn is_sorted(a: &[int]) -> bool {
      forall|i: int, j: int| 0 <= i < j < a.len() ==> a[i] < a[j]
  }
  
  proof fn sorted_implies_strictly_increasing(x: &[int])
      requires
          forall|i: int, j: int| 0 <= i < j < x.len() ==> x[i] < x[j]
      ensures
          forall|i: int| 1 <= i < x.len() ==> x[i-1] < x[i]
  {
  }

vc-spec: |-
  // <vc-spec>
  fn tangent(r: &[int], x: &[int]) -> (found: bool)
      requires
          forall|i: int| 1 <= i < x.len() ==> x[i-1] < #[trigger] x[i],
          forall|i: int, j: int| 0 <= i < j < x.len() ==> #[trigger] x[i] < #[trigger] x[j],
      ensures
          !found ==> forall|i: int, j: int| 
              0 <= i < r.len() && 0 <= j < x.len() ==> #[trigger] r[i] != #[trigger] x[j],
          found ==> exists|i: int, j: int|
              0 <= i < r.len() && 0 <= j < x.len() && #[trigger] r[i] == #[trigger] x[j],
  // </vc-spec>

vc-code: |-
  {
      if x.len() == 0 {
          return false;
      }
      
      proof {
          sorted_implies_strictly_increasing(x);
      }
      
      let mut i = 0;
      while i < r.len()
          invariant
              0 <= i <= r.len(),
              forall|k: int, j: int| 0 <= k < i && 0 <= j < x.len() ==> r[k] != x[j],
          decreases r.len() - i,
      {
          let target = r[i];
          let pos = binary_search(x, target);
          
          if pos < x.len() && x[pos] == target {
              return true;
          }
          
          proof {
              assert(forall|j: int| 0 <= j < x.len() ==> r[i as int] != x[j]);
          }
          
          i += 1;
      }
      false
  }

vc-postamble: |-
  
  fn main() {
  }
  
  }

