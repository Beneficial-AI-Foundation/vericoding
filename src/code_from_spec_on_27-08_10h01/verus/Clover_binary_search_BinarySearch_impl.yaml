vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  spec fn is_sorted(a: &[i32]) -> bool {
      forall|i: int, j: int| 0 <= i < j < a.len() ==> a[i] <= a[j]
  }
  
  proof fn lemma_sorted_transitive(a: &[i32], i: int, j: int, k: int)
      requires 
          is_sorted(a),
          0 <= i <= j <= k < a.len()
      ensures 
          a[i] <= a[k]
  {
  }
  
  proof fn lemma_all_less_than_mid_implies_all_less_than_mid_plus_one(a: &[i32], mid: int, key: i32)
      requires
          is_sorted(a),
          0 <= mid < a.len(),
          forall|i: int| 0 <= i < mid ==> a[i] < key,
          a[mid] < key
      ensures
          forall|i: int| 0 <= i < mid + 1 ==> a[i] < key
  {
  }
  
  proof fn lemma_mid_geq_key_implies_all_geq_key(a: &[i32], mid: int, key: i32)
      requires
          is_sorted(a),
          0 <= mid < a.len(),
          a[mid] >= key
      ensures
          forall|i: int| mid <= i < a.len() ==> a[i] >= key
  {
  }

vc-spec: |-
  // <vc-spec>
  fn binary_search(a: &[i32], key: i32) -> (n: usize)
      requires 
          forall|i: int, j: int| 0 <= i < j < a.len() ==> a[i] <= a[j]
      ensures 
          0 <= n <= a.len(),
          forall|i: int| 0 <= i < n ==> a[i] < key,
          n == a.len() ==> forall|i: int| 0 <= i < a.len() ==> a[i] < key,
          forall|i: int| n <= i < a.len() ==> a[i] >= key
  // </vc-spec>

vc-code: |-
  {
      let mut left: usize = 0;
      let mut right: usize = a.len();
      
      while left < right
          invariant
              0 <= left <= right <= a.len(),
              forall|i: int| 0 <= i < left ==> a[i] < key,
              forall|i: int| right <= i < a.len() ==> a[i] >= key,
              forall|i: int, j: int| 0 <= i < j < a.len() ==> a[i] <= a[j]
          decreases right - left
      {
          let mid = left + (right - left) / 2;
          
          if a[mid] < key {
              left = mid + 1;
              proof {
                  lemma_all_less_than_mid_implies_all_less_than_mid_plus_one(a, mid as int, key);
              }
          } else {
              right = mid;
              proof {
                  lemma_mid_geq_key_implies_all_geq_key(a, mid as int, key);
              }
          }
      }
      
      left
  }

vc-postamble: |-
  fn main() {}
  
  }

