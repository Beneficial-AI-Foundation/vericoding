vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  spec fn count_bits(n: nat) -> nat
      decreases n
  {
      if n == 0 { 0 } else { count_bits(n / 2) + n % 2 }
  }
  
  proof fn lemma_count_bits_properties(n: nat)
      ensures count_bits(n) == count_bits(n / 2) + n % 2
      decreases n
  {
  }
  
  proof fn lemma_bit_count_recurrence(i: nat)
      ensures i > 0 ==> count_bits(i) == count_bits(i / 2) + i % 2
  {
      if i > 0 {
          lemma_count_bits_properties(i);
      }
  }

vc-spec: |-
  // <vc-spec>
  fn counting_bits(n: usize) -> (result: Vec<usize>)
      requires 0 <= n <= 100000
      ensures result.len() == n + 1 &&
              (forall|i: int| 1 <= i < (n + 1) as int ==> 
                  #[trigger] result[i as int] == result[(i / 2) as int] + (i % 2) as usize)
  // </vc-spec>

vc-code: |-
  {
      let mut result = Vec::new();
      result.push(0);
      
      let mut i = 1usize;
      while i <= n
          invariant 
              result.len() == i,
              i <= n + 1,
              forall|j: int| 1 <= j < i as int ==> 
                  result@[j] == result@[j / 2] + (j % 2) as usize
      {
          let bit_count = result@[(i / 2) as int] + (i % 2) as usize;
          result.push(bit_count);
          i += 1;
      }
      
      result
  }

vc-postamble: |-
  
  fn main() {
  }
  
  }

