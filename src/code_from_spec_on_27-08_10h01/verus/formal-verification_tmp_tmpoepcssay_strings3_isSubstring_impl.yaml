vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_prefix_pred(pre: Seq<char>, str: Seq<char>) -> bool {
      pre.len() <= str.len() && 
      pre == str.subrange(0, pre.len() as int)
  }
  
  spec fn is_not_prefix_pred(pre: Seq<char>, str: Seq<char>) -> bool {
      pre.len() > str.len() || 
      pre != str.subrange(0, pre.len() as int)
  }
  
  fn is_prefix(pre: Seq<char>, str: Seq<char>) -> (res: bool)
      ensures
          !res <==> is_not_prefix_pred(pre, str),
          res <==> is_prefix_pred(pre, str),
  {
      assume(false);
      true
  }
  
  spec fn is_substring_pred(sub: Seq<char>, str: Seq<char>) -> bool {
      exists|i: int| 0 <= i <= str.len() && is_prefix_pred(sub, str.subrange(i, str.len() as int))
  }
  
  spec fn is_not_substring_pred(sub: Seq<char>, str: Seq<char>) -> bool {
      forall|i: int| 0 <= i <= str.len() ==> is_not_prefix_pred(sub, str.subrange(i, str.len() as int))
  }
  
  spec fn have_common_k_substring_pred(k: nat, str1: Seq<char>, str2: Seq<char>) -> bool {
      exists|i1: int, j1: int| 0 <= i1 <= str1.len() as int - k as int && j1 == i1 + k as int && is_substring_pred(str1.subrange(i1, j1), str2)
  }
  
  spec fn have_not_common_k_substring_pred(k: nat, str1: Seq<char>, str2: Seq<char>) -> bool {
      forall|i1: int, j1: int| 0 <= i1 <= str1.len() as int - k as int && j1 == i1 + k as int ==> is_not_substring_pred(str1.subrange(i1, j1), str2)
  }

vc-helpers: |-
  proof fn lemma_is_prefix_correct(pre: Seq<char>, str: Seq<char>)
      ensures is_prefix_pred(pre, str) <==> (pre.len() <= str.len() && pre == str.subrange(0, pre.len() as int)),
      ensures is_not_prefix_pred(pre, str) <==> (pre.len() > str.len() || pre != str.subrange(0, pre.len() as int))
  {
  }
  
  proof fn lemma_substring_equiv(sub: Seq<char>, str: Seq<char>)
      ensures is_substring_pred(sub, str) <==> !is_not_substring_pred(sub, str)
  {
  }

vc-spec: |-
  // <vc-spec>
  fn is_substring(sub: Seq<char>, str: Seq<char>) -> (res: bool)
      ensures
          res <==> is_substring_pred(sub, str),
          res ==> is_substring_pred(sub, str),
          // ensures  !res ==> !is_substring_pred(sub, str)
          is_substring_pred(sub, str) ==> res,
          is_substring_pred(sub, str) ==> res,
          !res <==> is_not_substring_pred(sub, str), // This postcondition follows from the above lemma.
  // </vc-spec>

vc-code: |-
  {
      let mut i: usize = 0;
      while i <= str.len()
          invariant
              0 <= i <= str.len(),
              forall|j: int| 0 <= j < i ==> is_not_prefix_pred(sub, str.subrange(j, str.len() as int))
      {
          let suffix = str.subrange(i as int, str.len() as int);
          let is_prefix_here = is_prefix(sub, suffix);
          
          if is_prefix_here {
              assert(is_prefix_pred(sub, suffix));
              assert(is_substring_pred(sub, str));
              return true;
          }
          
          assert(is_not_prefix_pred(sub, suffix));
          i = i + 1;
      }
      
      assert(forall|j: int| 0 <= j <= str.len() ==> is_not_prefix_pred(sub, str.subrange(j, str.len() as int)));
      assert(is_not_substring_pred(sub, str));
      lemma_substring_equiv(sub, str);
      false
  }

vc-postamble: |-
  
  fn main() {}
  
  }

