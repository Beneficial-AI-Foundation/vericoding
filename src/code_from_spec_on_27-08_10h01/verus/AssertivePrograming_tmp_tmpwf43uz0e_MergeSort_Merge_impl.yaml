vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  // Noa Leron 207131871
  // Tsuri Farhana 315016907
  
  
  
  
  spec fn sorted(q: Seq<i32>) -> bool {
      forall|i: int, j: int| 0 <= i <= j < q.len() ==> q[i] <= q[j]
  }
  
  /*
  Goal: Implement the well known merge sort algorithm in O(a.Length X log_2(a.Length)) time, recursively.
  
  - Divide the contents of the original array into two local arrays
  - After sorting the local arrays (recursively), merge the contents of the two returned arrays using the Merge method (see below)
  - DO NOT modify the specification or any other part of the method's signature
  - DO NOT introduce any further methods
  */
  
  spec fn inv(a: Seq<i32>, a1: Seq<i32>, a2: Seq<i32>, i: usize, mid: usize) -> bool {
      (i <= a1.len()) && (i <= a2.len()) && (i + mid <= a.len()) &&
      (a1.subrange(0, i as int) == a.subrange(0, i as int)) && 
      (a2.subrange(0, i as int) == a.subrange(mid as int, (i + mid) as int))
  }
  
  
  /*
  Goal: Implement iteratively, correctly, efficiently, clearly
  
  DO NOT modify the specification or any other part of the method's signature
  */
  
  //This is a method that replace the loop body
  fn merge_loop(b: &mut Vec<i32>, c: &Vec<i32>, d: &Vec<i32>, i0: usize, j0: usize) -> (usize, usize)
          requires
              old(b).len() == c.len() + d.len(),
              sorted(c@),
              sorted(d@),
              i0 <= c.len(),
              j0 <= d.len(),
              i0 + j0 <= old(b).len(),
              inv_sub_set(old(b)@, c@, d@, i0, j0),
              inv_sorted(old(b)@, c@, d@, i0, j0),
              i0 + j0 < old(b).len(),
  {
      let mut i = i0;
      let mut j = j0;
  
      if i == c.len() || (j < d.len() && d[j] < c[i]) {
          // in this case we take the next value from d
          b.set(i + j, d[j]);
          j = j + 1;
      } else {
          // in this case we take the next value from c
          b.set(i + j, c[i]);
          i = i + 1;
      }
  
      (i, j)
  }
  
  
  //Loop invariant - b is sorted so far and the next two potential values that will go into b are bigger than the biggest value in b.
  spec fn inv_sorted(b: Seq<i32>, c: Seq<i32>, d: Seq<i32>, i: usize, j: usize) -> bool {
      i <= c.len() && j <= d.len() && i + j <= b.len() &&
      ((i + j > 0 && i < c.len()) ==> (b[j + i - 1] <= c[i as int])) &&
      ((i + j > 0 && j < d.len()) ==> (b[j + i - 1] <= d[j as int])) &&
      sorted(b.subrange(0, (i + j) as int))
  }
  
  
  //Loop invariant - the multiset of the prefix of b so far is the same multiset as the prefixes of c and d so far.
  spec fn inv_sub_set(b: Seq<i32>, c: Seq<i32>, d: Seq<i32>, i: usize, j: usize) -> bool {
      i <= c.len() && j <= d.len() && i + j <= b.len() &&
      b.subrange(0, (i + j) as int).to_multiset() == 
          c.subrange(0, i as int).to_multiset().add(d.subrange(0, j as int).to_multiset())
  }
  
  //This lemma helps Verus see that if the prefixes of arrays are the same multiset until the end of the arrays,
  //all the arrays are the same multiset.
  
  
  //This lemma helps Verus see that after adding the next value from c to b the prefixes are still the same subsets.

vc-helpers: |-
  proof fn lemma_multiset_equality(b: Seq<i32>, c: Seq<i32>, d: Seq<i32>, i: usize, j: usize)
      requires
          i == c.len(),
          j == d.len(),
          i + j == b.len(),
          inv_sub_set(b, c, d, i, j),
      ensures
          b.to_multiset() == c.to_multiset().add(d.to_multiset()),
  {
      assert(b.subrange(0, (i + j) as int) == b);
      assert(c.subrange(0, i as int) == c);
      assert(d.subrange(0, j as int) == d);
  }
  
  proof fn lemma_add_from_c(b_old: Seq<i32>, b_new: Seq<i32>, c: Seq<i32>, d: Seq<i32>, i: usize, j: usize)
      requires
          i < c.len(),
          j <= d.len(),
          i + j < b_old.len(),
          b_new.len() == b_old.len(),
          inv_sub_set(b_old, c, d, i, j),
          b_new[i + j] == c[i as int],
          forall|k: int| 0 <= k < b_old.len() && k != (i + j) as int ==> b_new[k] == b_old[k],
      ensures
          inv_sub_set(b_new, c, d, i + 1, j),
  {
      assert(b_new.subrange(0, (i + 1 + j) as int) == 
             b_old.subrange(0, (i + j) as int).push(c[i as int]));
             
      assert(c.subrange(0, (i + 1) as int) == 
             c.subrange(0, i as int).push(c[i as int]));
             
      assert(b_old.subrange(0, (i + j) as int).to_multiset().add(seq![c[i as int]].to_multiset()) ==
             c.subrange(0, i as int).to_multiset().add(d.subrange(0, j as int).to_multiset()).add(seq![c[i as int]].to_multiset()));
             
      assert(c.subrange(0, i as int).to_multiset().add(seq![c[i as int]].to_multiset()) ==
             c.subrange(0, (i + 1) as int).to_multiset());
  }
  
  proof fn lemma_add_from_d(b_old: Seq<i32>, b_new: Seq<i32>, c: Seq<i32>, d: Seq<i32>, i: usize, j: usize)
      requires
          i <= c.len(),
          j < d.len(),
          i + j < b_old.len(),
          b_new.len() == b_old.len(),
          inv_sub_set(b_old, c, d, i, j),
          b_new[i + j] == d[j as int],
          forall|k: int| 0 <= k < b_old.len() && k != (i + j) as int ==> b_new[k] == b_old[k],
      ensures
          inv_sub_set(b_new, c, d, i, j + 1),
  {
      assert(b_new.subrange(0, (i + j + 1) as int) == 
             b_old.subrange(0, (i + j) as int).push(d[j as int]));
             
      assert(d.subrange(0, (j + 1) as int) == 
             d.subrange(0, j as int).push(d[j as int]));
             
      assert(b_old.subrange(0, (i + j) as int).to_multiset().add(seq![d[j as int]].to_multiset()) ==
             c.subrange(0, i as int).to_multiset().add(d.subrange(0, j as int).to_multiset()).add(seq![d[j as int]].to_multiset()));
             
      assert(d.subrange(0, j as int).to_multiset().add(seq![d[j as int]].to_multiset()) ==
             d.subrange(0, (j + 1) as int).to_multiset());
  }
  
  proof fn lemma_sorted_prefix_extension_c(b_old: Seq<i32>, b_new: Seq<i32>, c: Seq<i32>, d: Seq<i32>, i: usize, j: usize)
      requires
          i < c.len(),
          j <= d.len(),
          i + j < b_old.len(),
          b_new.len() == b_old.len(),
          sorted(c@),
          sorted(d@),
          inv_sorted(b_old, c, d, i, j),
          b_new[i + j] == c[i as int],
          forall|k: int| 0 <= k < b_old.len() && k != (i + j) as int ==> b_new[k] == b_old[k],
          (j == d.len()) || (c[i as int] <= d[j as int]),
      ensures
          inv_sorted(b_new, c, d, i + 1, j),
  {
  }
  
  proof fn lemma_sorted_prefix_extension_d(b_old: Seq<i32>, b_new: Seq<i32>, c: Seq<i32>, d: Seq<i32>, i: usize, j: usize)
      requires
          i <= c.len(),
          j < d.len(),
          i + j < b_old.len(),
          b_new.len() == b_old.len(),
          sorted(c@),
          sorted(d@),
          inv_sorted(b_old, c, d, i, j),
          b_new[i + j] == d[j as int],
          forall|k: int| 0 <= k < b_old.len() && k != (i + j) as int ==> b_new[k] == b_old[k],
          (i == c.len()) || (d[j as int] < c[i as int]),
      ensures
          inv_sorted(b_new, c, d, i, j + 1),
  {
  }

vc-spec: |-
  // <vc-spec>
  fn merge(b: &mut Vec<i32>, c: &Vec<i32>, d: &Vec<i32>)
      requires
          old(b).len() == c.len() + d.len(),
          sorted(c@),
          sorted(d@),
      ensures
          sorted(b@),
          b@.to_multiset() == c@.to_multiset().add(d@.to_multiset()),
  // </vc-spec>

vc-code: |-
  {
      let mut i: usize = 0;
      let mut j: usize = 0;
      
      while i + j < b.len()
          invariant
              b.len() == c.len() + d.len(),
              sorted(c@),
              sorted(d@),
              i <= c.len(),
              j <= d.len(),
              i + j <= b.len(),
              inv_sub_set(b@, c@, d@, i, j),
              inv_sorted(b@, c@, d@, i, j),
          decreases (c.len() + d.len()) - (i + j)
      {
          let ghost b_old = b@;
          
          if i == c.len() || (j < d.len() && d[j] < c[i]) {
              b.set(i + j, d[j]);
              
              proof {
                  lemma_add_from_d(b_old, b@, c@, d@, i, j);
                  lemma_sorted_prefix_extension_d(b_old, b@, c@, d@, i, j);
              }
              
              j = j + 1;
          } else {
              b.set(i + j, c[i]);
              
              proof {
                  lemma_add_from_c(b_old, b@, c@, d@, i, j);
                  lemma_sorted_prefix_extension_c(b_old, b@, c@, d@, i, j);
              }
              
              i = i + 1;
          }
      }
      
      proof {
          assert(i + j == b.len());
          assert(i == c.len() && j == d.len());
          lemma_multiset_equality(b@, c@, d@, i, j);
      }
  }

vc-postamble: |-
  fn main() {}
  
  }

