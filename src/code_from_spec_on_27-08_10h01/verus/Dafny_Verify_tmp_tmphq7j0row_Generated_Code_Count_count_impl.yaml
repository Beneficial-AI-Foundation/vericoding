vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn has_count(v: int, a: Seq<int>, n: nat) -> int
      decreases n
  {
      if n == 0 {
          0
      } else {
          if a[n-1] == v {
              has_count(v, a, (n-1) as nat) + 1
          } else {
              has_count(v, a, (n-1) as nat)
          }
      }
  }

vc-helpers: |-
  proof fn has_count_monotonic(v: int, a: Seq<int>, n: nat)
      requires n < a.len()
      ensures has_count(v, a, n) <= has_count(v, a, n + 1)
      decreases n
  {
      if n == 0 {
      } else {
          has_count_monotonic(v, a, (n - 1) as nat);
      }
  }
  
  proof fn has_count_nonnegative(v: int, a: Seq<int>, n: nat)
      ensures has_count(v, a, n) >= 0
      decreases n
  {
      if n == 0 {
      } else {
          has_count_nonnegative(v, a, (n - 1) as nat);
      }
  }
  
  proof fn has_count_update(v: int, a: Seq<int>, n: nat)
      requires n > 0 && n <= a.len()
      ensures has_count(v, a, n) == has_count(v, a, (n-1) as nat) + (if a[(n-1) as int] == v { 1int } else { 0int })
  {
  }
  
  proof fn has_count_bounded(v: int, a: Seq<int>, n: nat)
      ensures has_count(v, a, n) <= n as int
      decreases n
  {
      if n == 0 {
      } else {
          has_count_bounded(v, a, (n - 1) as nat);
      }
  }

vc-spec: |-
  // <vc-spec>
  fn count(v: i32, a: &[i32], n: usize) -> (r: i32)
      requires n <= a.len()
      ensures n <= a.len() ==> has_count(v as int, a@.map_values(|x: i32| x as int), n as nat) == r as int
  // </vc-spec>

vc-code: |-
  {
      let mut count: i32 = 0;
      let mut i: usize = 0;
      
      while i < n
          invariant 
              0 <= i <= n,
              n <= a.len(),
              count == has_count(v as int, a@.map_values(|x: i32| x as int), i as nat),
              count >= 0,
              count <= i as i32
          decreases n - i
      {
          proof {
              has_count_update(v as int, a@.map_values(|x: i32| x as int), (i + 1) as nat);
              has_count_bounded(v as int, a@.map_values(|x: i32| x as int), (i + 1) as nat);
          }
          
          if a[i] == v {
              count = count + 1;
          }
          i = i + 1;
      }
      
      count
  }

vc-postamble: |-
  fn main() {
  }
  
  }

