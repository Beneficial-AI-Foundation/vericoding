vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn sorted_between(a: &Vec<i32>, from: usize, to: usize) -> bool
      recommends
          from <= to,
          to <= a.len(),
  {
      forall|i: int, j: int| from <= i < j < to && 0 <= i < a.len() && 0 <= j < a.len() ==> a@[i] <= a@[j]
  }
  
  spec fn sorted(a: &Vec<i32>) -> bool {
      sorted_between(a, 0, a.len())
  }

vc-helpers: |-
  spec fn multiset_of_vec<T>(v: &Vec<T>) -> Multiset<T> {
      v@.to_multiset()
  }
  
  proof fn swap_preserves_multiset<T>(a: &mut Vec<T>, i: usize, j: usize)
      requires
          i < old(a).len(),
          j < old(a).len(),
      ensures
          multiset_of_vec(a) == multiset_of_vec(&old(a)),
          a.len() == old(a).len(),
  {
  }
  
  proof fn sorted_between_extend(a: &Vec<i32>, from: usize, to: usize)
      requires
          from < to,
          to <= a.len(),
          sorted_between(a, from, to - 1),
          forall|i: int| from <= i < to - 1 && 0 <= i < a.len() ==> a@[i] <= a@[to - 1],
      ensures
          sorted_between(a, from, to),
  {
  }
  
  proof fn bubble_maintains_max_at_end(a: &Vec<i32>, start: usize, end: usize)
      requires
          start < end,
          end <= a.len(),
          forall|k: int| start <= k < end - 1 && 0 <= k < a.len() ==> a@[k] <= a@[end - 1],
      ensures
          forall|x: int, y: int| start <= x < end - 1 && end - 1 <= y < end && 0 <= x < a.len() && 0 <= y < a.len() ==> a@[x] <= a@[y],
  {
  }

vc-spec: |-
  // <vc-spec>
  fn bubbleSort(a: &mut Vec<i32>)
      requires
          old(a).len() > 0,
      ensures
          sorted(a),
          old(a)@ == a@,
  // </vc-spec>

vc-code: |-
  {
      let n = a.len();
      let mut i = 0;
      
      while i < n - 1
          invariant
              i <= n - 1,
              n == a.len(),
              multiset_of_vec(a) == multiset_of_vec(&old(a)),
              sorted_between(a, n - i, n),
              forall|x: int, y: int| 0 <= x < n - i && n - i <= y < n && 0 <= x < a.len() && 0 <= y < a.len() ==> a@[x] <= a@[y],
          decreases n - 1 - i,
      {
          let mut j = 0;
          
          while j < n - 1 - i
              invariant
                  j <= n - 1 - i,
                  i < n - 1,
                  n == a.len(),
                  multiset_of_vec(a) == multiset_of_vec(&old(a)),
                  sorted_between(a, n - i, n),
                  forall|x: int, y: int| 0 <= x < n - i && n - i <= y < n && 0 <= x < a.len() && 0 <= y < a.len() ==> a@[x] <= a@[y],
                  j > 0 ==> forall|k: int| 0 <= k <= j && 0 <= k < a.len() ==> a@[k] <= a@[j],
              decreases n - 1 - i - j,
          {
              if a[j] > a[j + 1] {
                  let temp = a[j];
                  a.set(j, a[j + 1]);
                  a.set(j + 1, temp);
                  
                  proof {
                      swap_preserves_multiset(a, j, j + 1);
                  }
              }
              j += 1;
          }
          
          proof {
              if n - 1 - i > 0 {
                  bubble_maintains_max_at_end(a, 0, n - i);
              }
          }
          
          i += 1;
      }
      
      proof {
          assert(i == n - 1);
          assert(sorted_between(a, 0, n));
      }
  }

vc-postamble: |-
  fn main() {
  }
  
  }

