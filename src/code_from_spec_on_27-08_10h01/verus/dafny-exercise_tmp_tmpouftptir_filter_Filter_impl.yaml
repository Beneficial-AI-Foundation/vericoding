vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-


vc-spec: |-
  // <vc-spec>
  fn filter(a: Seq<char>, b: Set<char>) -> (c: Set<char>)
      ensures forall|x: char| a.contains(x) && b.contains(x) <==> c.contains(x)
  // </vc-spec>

vc-code: |-
  {
      let mut result: Set<char> = Set::empty();
      let mut i: usize = 0;
      while i < a.len()
          invariant
              0 <= i <= a.len(),
              forall|x: char| result.contains(x) ==> (a.contains(x) && b.contains(x)),
              forall|x: char| (exists|j: int| 0 <= j < i && a[j] == x) && b.contains(x) ==> result.contains(x)
      {
          let ch = a[i as nat];
          if b.contains(ch) {
              result = result.insert(ch);
          }
          i = i + 1;
      }
      result
  }

vc-postamble: |-
  
  fn main() {
  }
  
  }

