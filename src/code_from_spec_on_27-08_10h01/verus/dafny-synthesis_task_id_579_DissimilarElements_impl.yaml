vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn in_array(a: &Vec<int>, x: int) -> bool {
      exists|i: int| 0 <= i < a.len() && a[i] == x
  }

vc-helpers: |-
  spec fn is_dissimilar(a: &Vec<int>, b: &Vec<int>, x: int) -> bool {
      in_array(a, x) != in_array(b, x)
  }
  
  proof fn lemma_in_array_equivalent(a: &Vec<int>, x: int)
      ensures in_array(a, x) == a@.contains(x)
  {
      if in_array(a, x) {
          let i = choose|i: int| 0 <= i < a.len() && a[i] == x;
          assert(a@[i] == x);
          assert(a@.contains(x));
      }
      if a@.contains(x) {
          let i = choose|i: int| 0 <= i < a@.len() && a@[i] == x;
          assert(0 <= i < a.len() && a[i] == x);
          assert(in_array(a, x));
      }
  }
  
  spec fn contains_exec(v: &Vec<int>, x: int) -> bool 
      decreases v.len()
  {
      exists|i: int| 0 <= i < v.len() && v[i] == x
  }
  
  proof fn lemma_contains_exec_equiv(v: &Vec<int>, x: int)
      ensures contains_exec(v, x) == v@.contains(x)
  {
      lemma_in_array_equivalent(v, x);
      assert(contains_exec(v, x) == in_array(v, x));
  }

vc-spec: |-
  // <vc-spec>
  fn dissimilar_elements(a: &Vec<int>, b: &Vec<int>) -> (result: Vec<int>)
      ensures
          // All elements in the output are either in a or b, but not in both or neither
          forall|x: int| result@.contains(x) ==> (in_array(a, x) != in_array(b, x)),
          // The elements in the output are all different
          forall|i: int, j: int| 0 <= i < j < result.len() ==> result[i] != result[j],
  // </vc-spec>

vc-code: |-
  {
      let mut result = Vec::new();
      let mut i = 0;
      
      while i < a.len()
          invariant
              0 <= i <= a.len(),
              forall|x: int| result@.contains(x) ==> is_dissimilar(a, b, x),
              forall|k: int, l: int| 0 <= k < l < result.len() ==> result[k] != result[l],
          decreases a.len() - i
      {
          let elem = a[i];
          let mut found_in_b = false;
          let mut j = 0;
          
          while j < b.len()
              invariant 
                  0 <= j <= b.len(),
                  found_in_b == exists|k: int| 0 <= k < j && b[k] == elem,
              decreases b.len() - j
          {
              if b[j] == elem {
                  found_in_b = true;
              }
              j += 1;
          }
          
          let mut found_in_result = false;
          j = 0;
          
          while j < result.len()
              invariant 
                  0 <= j <= result.len(),
                  found_in_result == exists|k: int| 0 <= k < j && result[k] == elem,
              decreases result.len() - j
          {
              if result[j] == elem {
                  found_in_result = true;
              }
              j += 1;
          }
          
          if !found_in_b && !found_in_result {
              result.push(elem);
          }
          i += 1;
      }
      
      i = 0;
      while i < b.len()
          invariant
              0 <= i <= b.len(),
              forall|x: int| result@.contains(x) ==> is_dissimilar(a, b, x),
              forall|k: int, l: int| 0 <= k < l < result.len() ==> result[k] != result[l],
          decreases b.len() - i
      {
          let elem = b[i];
          let mut found_in_a = false;
          let mut j = 0;
          
          while j < a.len()
              invariant 
                  0 <= j <= a.len(),
                  found_in_a == exists|k: int| 0 <= k < j && a[k] == elem,
              decreases a.len() - j
          {
              if a[j] == elem {
                  found_in_a = true;
              }
              j += 1;
          }
          
          let mut found_in_result = false;
          j = 0;
          
          while j < result.len()
              invariant 
                  0 <= j <= result.len(),
                  found_in_result == exists|k: int| 0 <= k < j && result[k] == elem,
              decreases result.len() - j
          {
              if result[j] == elem {
                  found_in_result = true;
              }
              j += 1;
          }
          
          if !found_in_a && !found_in_result {
              result.push(elem);
          }
          i += 1;
      }
      
      result
  }

vc-postamble: |-
  fn main() {}
  
  }

