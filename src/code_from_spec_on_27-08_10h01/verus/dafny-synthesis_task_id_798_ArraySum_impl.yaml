vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn sum_to(a: &[i32], n: int) -> int
      recommends 0 <= n <= a.len()
      decreases n
  {
      if n <= 0 { 0 } else { sum_to(a, n - 1) + a[n - 1] }
  }

vc-helpers: |-
  spec fn sum_to_seq(s: Seq<i32>, n: int) -> int
      recommends 0 <= n <= s.len()
      decreases n
  {
      if n <= 0 { 0 } else { sum_to_seq(s, n - 1) + s[n - 1] }
  }
  
  proof fn sum_to_additive(a: &[i32], n: int)
      requires 0 <= n < a.len()
      ensures sum_to(a, n + 1) == sum_to(a, n) + a[n]
  {
  }
  
  proof fn sum_to_split(a: &[i32], i: int, j: int)
      requires 0 <= i <= j <= a.len()
      ensures sum_to(a, j) == sum_to(a, i) + sum_to_seq(a@.subrange(i, j), j - i)
      decreases j - i
  {
      if i == j {
      } else {
          sum_to_split(a, i + 1, j);
          sum_to_additive(a, i);
      }
  }

vc-spec: |-
  // <vc-spec>
  fn array_sum(a: &[i32]) -> (result: i32)
      ensures result == sum_to(a, a.len() as int)
  // </vc-spec>

vc-code: |-
  {
      let mut sum = 0i32;
      let mut i = 0;
      
      while i < a.len()
          invariant 
              0 <= i <= a.len(),
              sum == sum_to(a, i as int)
      {
          sum = sum + a[i];
          i = i + 1;
      }
      
      sum
  }

vc-postamble: |-
  
  fn main() {
  }
  
  }

