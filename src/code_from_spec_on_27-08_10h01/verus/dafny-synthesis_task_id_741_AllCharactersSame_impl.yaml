vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  spec fn all_same(s: Seq<u8>) -> bool {
      forall|i: int, j: int| 0 <= i < s.len() && 0 <= j < s.len() ==> s[i] == s[j]
  }
  
  spec fn has_different_chars(s: Seq<u8>) -> bool {
      exists|i: int, j: int| 0 <= i < s.len() && 0 <= j < s.len() && i != j && s[i] != s[j]
  }

vc-spec: |-
  // <vc-spec>
  fn all_characters_same(s: Seq<u8>) -> (result: bool)
      ensures
          result ==> (forall|i: int, j: int| 0 <= i < s.len() && 0 <= j < s.len() ==> s[i] == s[j]),
          !result ==> (s.len() > 1) && (exists|i: int, j: int| 0 <= i < s.len() && 0 <= j < s.len() && i != j && s[i] != s[j])
  // </vc-spec>

vc-code: |-
  {
      if s.len() <= 1 {
          true
      } else {
          let first_char = s[0];
          let mut i: usize = 1;
          while i < s.len()
              invariant
                  1 <= i <= s.len(),
                  forall|k: int| 0 <= k < i ==> s[k] == first_char
          {
              if s[i as usize] != first_char {
                  proof {
                      assert(s[0] == first_char);
                      assert(s[i as int] != first_char);
                      assert(0 != i);
                      assert(s[0] != s[i as int]);
                  }
                  return false;
              }
              i = i + 1;
          }
          proof {
              assert(forall|k: int| 0 <= k < s.len() ==> s[k] == first_char);
          }
          true
      }
  }

vc-postamble: |-
  fn main() {
  }
  
  }

