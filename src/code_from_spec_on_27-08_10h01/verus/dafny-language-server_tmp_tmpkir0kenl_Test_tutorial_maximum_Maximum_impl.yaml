vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  // This file shows how to specify and implement a function to compute the
  // largest element of a list. The function is fully specified by two
  // preconditions, as proved by the MaximumIsUnique lemma below.

vc-helpers: |-


vc-spec: |-
  // <vc-spec>
  fn maximum(values: Seq<int>) -> (max: int)
      requires
          values.len() > 0,
      ensures
          values.contains(max),
          forall|i: int| 0 <= i < values.len() ==> values[i] <= max,
  // </vc-spec>

vc-code: |-
  {
      let mut max = values[0];
      let mut i: usize = 1;
      
      while i < values.len()
          invariant
              1 <= i <= values.len(),
              values.contains(max),
              forall|j: int| 0 <= j < i ==> values[j] <= max,
      {
          if values[i as int] > max {
              max = values[i as int];
          }
          i = i + 1;
      }
      
      max
  }

vc-postamble: |-
  fn main() {}
  
  }

