vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_peek(v: &Vec<i32>, i: int) -> bool
      recommends 0 <= i < v.len()
  {
      forall|k: int| 0 <= k < i ==> v[i] >= v[k]
  }
  
  spec fn peek_sum(v: &Vec<i32>, i: int) -> int
      recommends 0 <= i <= v.len()
      decreases i when 0 <= i <= v.len()
  {
      if i == 0 {
          0
      } else {
          if is_peek(v, i - 1) {
              v[i - 1] + peek_sum(v, i - 1)
          } else {
              peek_sum(v, i - 1)
          }
      }
  }

vc-helpers: |-
  proof fn peek_sum_monotonic(v: &Vec<i32>, i: int, j: int)
      requires 0 <= i <= j <= v.len()
      ensures peek_sum(v, i) <= peek_sum(v, j)
      decreases j - i
  {
      if i == j {
          return;
      }
      peek_sum_monotonic(v, i, j - 1);
      if is_peek(v, j - 1) {
          assert(peek_sum(v, j) == v[j - 1] + peek_sum(v, j - 1));
          assert(peek_sum(v, j - 1) <= peek_sum(v, j));
      } else {
          assert(peek_sum(v, j) == peek_sum(v, j - 1));
      }
  }
  
  proof fn peek_sum_step(v: &Vec<i32>, i: int)
      requires 0 < i <= v.len()
      ensures peek_sum(v, i) == (if is_peek(v, i - 1) { v[i - 1] + peek_sum(v, i - 1) } else { peek_sum(v, i - 1) })
  {
  }

vc-spec: |-
  // <vc-spec>
  fn m_peek_sum(v: &Vec<i32>) -> (sum: i32)
      requires v.len() > 0
      ensures sum == peek_sum(v, v.len() as int)
      //Implement and verify an O(v.len()) algorithm to solve this problem
  // </vc-spec>

vc-code: |-
  {
      let mut sum: i32 = 0;
      let mut i: usize = 0;
      
      while i < v.len()
          invariant
              0 <= i <= v.len(),
              sum == peek_sum(v, i as int),
          decreases v.len() - i
      {        
          let mut is_peak = true;
          let mut j: usize = 0;
          
          while j < i
              invariant
                  0 <= j <= i,
                  is_peak == forall|k: int| 0 <= k < j ==> v[i as int] >= v[k],
              decreases i - j
          {
              if v[i] < v[j] {
                  is_peak = false;
              }
              j += 1;
          }
          
          if is_peak {
              assert(is_peek(v, i as int));
              sum += v[i];
          } else {
              assert(!is_peek(v, i as int));
          }
          
          proof {
              peek_sum_step(v, (i + 1) as int);
          }
          
          i += 1;
      }
      
      sum
  }

vc-postamble: |-
  
  fn main() {}
  
  }

