vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  //Given two arrays of integers, it returns a single array with all integers merged. 
  // [1,5,2,3],[4,3,5]->[1,5,2,3,4,3,5]

vc-helpers: |-


vc-spec: |-
  // <vc-spec>
  fn single(x: &[i32], y: &[i32]) -> (b: Vec<i32>)
      requires 
          x.len() > 0,
          y.len() > 0,
      ensures 
          b@.len() == x@.len() + y@.len(),
          b@ == x@ + y@,
  // </vc-spec>

vc-code: |-
  {
      let mut result = Vec::new();
      
      let mut i = 0;
      while i < x.len()
          invariant
              i <= x.len(),
              result@.len() == i,
              result@ == x@.subrange(0, i as int),
          decreases x.len() - i
      {
          result.push(x[i]);
          i += 1;
      }
      
      let mut j = 0;
      while j < y.len()
          invariant
              j <= y.len(),
              result@.len() == x@.len() + j,
              result@ == x@ + y@.subrange(0, j as int),
          decreases y.len() - j
      {
          result.push(y[j]);
          j += 1;
      }
      
      result
  }

vc-postamble: |-
  
  fn main() {
  }
  
  }

