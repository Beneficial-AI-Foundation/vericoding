vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  /*
     CS:5810 Formal Methods in Software Engineering
     Fall 2017
     The University of Iowa
  
     Instructor: Cesare Tinelli
  
     Credits: Example adapted from Dafny tutorial
  */

vc-helpers: |-


vc-spec: |-
  // <vc-spec>
  fn find(a: &[i32], key: i32) -> (i: i32)
      ensures
          // if i is non-negative then 
          0 <= i ==> (// (1) i is smaller than the length of a
                      i < a.len() && 
                      // (2) key is at position i in a
                      a[i as int] == key && 
                      // (3) i is the smallest position where key appears
                      forall|k: int| 0 <= k < i ==> a[k] != key
                     ),
          // if index is negative then
          i < 0 ==> 
                  // a does not contain key
                  forall|k: int| 0 <= k < a.len() ==> a[k] != key,
  // </vc-spec>

vc-code: |-
  {
      let mut i = 0;
      while i < a.len()
          invariant
              0 <= i <= a.len(),
              forall|k: int| 0 <= k < i ==> a[k] != key,
          decreases a.len() - i,
      {
          if a[i] == key {
              if i <= i32::MAX as usize {
                  let result = i as i32;
                  assert(0 <= result);
                  assert(result < a.len());
                  assert(a[result as int] == key);
                  assert(forall|k: int| 0 <= k < result ==> a[k] != key);
                  return result;
              } else {
                  // If index is too large for i32, continue searching or return -1
                  // For this case, we need to ensure postcondition holds
                  // Since we can't represent the index as i32, we treat it as not found
                  i += 1;
                  continue;
              }
          }
          i += 1;
      }
      let result = -1;
      assert(result < 0);
      assert(forall|k: int| 0 <= k < a.len() ==> a[k] != key);
      result
  }

vc-postamble: |-
  
  fn main() {
  }
  
  }

