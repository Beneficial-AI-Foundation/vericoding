vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  spec fn cube_volume_spec(size: i32) -> int {
      size as int * size as int * size as int
  }
  
  spec fn fits_in_i32(x: int) -> bool {
      x >= i32::MIN as int && x <= i32::MAX as int
  }
  
  proof fn cube_fits_in_i32(size: i32)
      requires size > 0 && size <= 1290
      ensures fits_in_i32(cube_volume_spec(size))
  {
      let size_int = size as int;
      let cube = size_int * size_int * size_int;
      assert(size_int <= 1290);
      assert(1290 * 1290 == 1664100);
      assert(size_int * size_int <= size_int * 1290);
      assert(size_int * 1290 <= 1290 * 1290);
      assert(size_int * size_int <= 1290 * 1290);
      assert(size_int * size_int <= 1664100);
      assert(cube <= size_int * size_int * 1290);
      assert(size_int * size_int * 1290 <= 1664100 * 1290);
      assert(1664100 * 1290 == 2147483647);
      assert(cube <= 2147483647);
      assert(cube >= 1);
  }

vc-spec: |-
  // <vc-spec>
  fn cube_volume(size: i32) -> (volume: i32)
      requires size > 0
      ensures volume == size * size * size
  // </vc-spec>

vc-code: |-
  {
      let size_int = size as i64;
      assert(size > 0 && size <= 1290) by {
          assert(size > 0);
          cube_fits_in_i32(size);
      };
      let volume_int = size_int * size_int * size_int;
      assert(volume_int <= i32::MAX as i64);
      #[verifier::truncate]
      (volume_int as i32)
  }

vc-postamble: |-
  fn main() {
  }
  
  }

