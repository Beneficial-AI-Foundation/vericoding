vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  spec fn sum_of_cubes(n: u32) -> u32 
      decreases n
  {
      if n == 0 { 0 } else { n * n * n + sum_of_cubes((n - 1) as u32) }
  }
  
  spec fn sum_of_numbers(n: u32) -> u32 
      decreases n
  {
      if n == 0 { 0 } else { n + sum_of_numbers((n - 1) as u32) }
  }
  
  proof fn sum_of_cubes_formula(n: u32)
      ensures sum_of_cubes(n) == (n * n * (n + 1) * (n + 1)) / 4
      decreases n
  {
      if n == 0 {
      } else {
          sum_of_cubes_formula((n - 1) as u32);
          assert(sum_of_cubes(n) == n * n * n + sum_of_cubes((n - 1) as u32));
          assert(sum_of_cubes((n - 1) as u32) == ((n - 1) * (n - 1) * n * n) / 4);
          assert(sum_of_cubes(n) == n * n * n + ((n - 1) * (n - 1) * n * n) / 4);
          assert(sum_of_cubes(n) == (n * n * (n + 1) * (n + 1)) / 4);
      }
  }
  
  proof fn sum_of_numbers_formula(n: u32)
      ensures sum_of_numbers(n) == (n * (n + 1)) / 2
      decreases n
  {
      if n == 0 {
      } else {
          sum_of_numbers_formula((n - 1) as u32);
          assert(sum_of_numbers(n) == n + sum_of_numbers((n - 1) as u32));
          assert(sum_of_numbers((n - 1) as u32) == ((n - 1) * n) / 2);
          assert(sum_of_numbers(n) == n + ((n - 1) * n) / 2);
          assert(sum_of_numbers(n) == (n * (n + 1)) / 2);
      }
  }

vc-spec: |-
  // <vc-spec>
  fn difference_sum_cubes_and_sum_numbers(n: u32) -> (diff: u32)
      requires n >= 0
      ensures diff == (n * n * (n + 1) * (n + 1)) / 4 - (n * (n + 1)) / 2
  // </vc-spec>

vc-code: |-
  {
      let sum_cubes = (n * n * (n + 1) * (n + 1)) / 4;
      let sum_nums = (n * (n + 1)) / 2;
      
      proof {
          sum_of_cubes_formula(n);
          sum_of_numbers_formula(n);
      }
      
      sum_cubes - sum_nums
  }

vc-postamble: |-
  fn main() {}
  
  }

