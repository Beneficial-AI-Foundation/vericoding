vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  spec fn is_sorted(arr: &[i32]) -> bool {
      forall|i: int| 0 <= i < arr.len() - 1 ==> #[trigger] arr[i] <= arr[i + 1]
  }

vc-spec: |-
  // <vc-spec>
  fn find_median(a: &[i32], b: &[i32]) -> (median: i32)
      requires 
          a.len() == b.len(),
          a.len() > 0,
          forall|i: int| #[trigger] a[i] == a[i] ==> (0 <= i < (a.len() - 1) as int ==> a[i] <= a[add(i, 1)]),
          forall|i: int| #[trigger] b[i] == b[i] ==> (0 <= i < (b.len() - 1) as int ==> b[i] <= b[add(i, 1)]),
      ensures 
          median as int == if a.len() % 2 == 0 { 
              (a[(a.len() / 2 - 1) as int] + b[0int]) / 2 
          } else { 
              a[(a.len() / 2) as int] as int
          }
  // </vc-spec>

vc-code: |-
  {
      let len = a.len();
      if len % 2 == 0 {
          let idx = (len / 2 - 1) as usize;
          proof {
              assert(len > 0);
              assert(len / 2 >= 1);
              assert(idx < a.len());
          }
          let sum = a[idx] as i64 + b[0] as i64;
          (sum / 2) as i32
      } else {
          let idx = (len / 2) as usize;
          proof {
              assert(idx < a.len());
          }
          a[idx]
      }
  }

vc-postamble: |-
  
  fn main() {
  }
  
  }

