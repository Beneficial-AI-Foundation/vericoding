vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn sorted(s: Seq<int>) -> bool {
      forall|u: int, w: int| 0 <= u < w < s.len() ==> s[u] <= s[w]
  }

vc-helpers: |-
  spec fn lemma_sorted_implies_transitive(s: Seq<int>, i: int, j: int, k: int) -> bool {
      sorted(s) && 0 <= i <= j <= k < s.len() ==> s[i] <= s[j] && s[j] <= s[k]
  }
  
  spec fn lemma_sorted_subseq(s: Seq<int>, start: int, end: int) -> bool {
      sorted(s) && 0 <= start <= end <= s.len() ==> sorted(s.subrange(start, end))
  }

vc-spec: |-
  // <vc-spec>
  fn binary_search(v: &Vec<i32>, elem: i32) -> (p: i32)
      requires sorted(v@.map_values(|val: i32| val as int)),
      ensures ({
          &&& -1 <= p < v.len()
          &&& forall|u: int| 0 <= u <= p ==> v@[u] <= elem as int
          &&& forall|w: int| p < w < v.len() ==> v@[w] > elem as int
      }),
  // </vc-spec>

vc-code: |-
  {
      let mut low: i32 = 0;
      let mut high: i32 = v.len() as i32 - 1;
      
      while low <= high
          invariant 
              -1 <= low <= v.len(),
              -1 <= high < v.len(),
              forall|u: int| 0 <= u < low ==> v@[u] <= elem as int,
              forall|w: int| high < w < v.len() ==> v@[w] > elem as int
          decreases high - low
      {
          let mid = low + (high - low) / 2;
          
          if v[mid as usize] <= elem {
              low = mid + 1;
          } else {
              high = mid - 1;
          }
      }
      
      high
  }

vc-postamble: |-
  //Recursive binary search
  
  fn main() {}
  
  }

