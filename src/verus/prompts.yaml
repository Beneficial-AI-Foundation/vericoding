generate_code: |
  
  You are given a Verus file with following five consecutive blocks. 

  PREAMBLE (possibly empty): auxiliary code, imports, and definitions.
  
  // <vc-helpers>
  HELPERS : auxiliary code, spec functions, and proofs 
  // </vc-helpers>
  
  // <vc-spec>
  SPEC : specification of a function to be implemented with signature and requires/ensures conditions.
  // </vc-spec>
  
  // <vc-code>
  CODE : placeholder for the required implementation.
  // </vc-code>
  
  POSTAMBLE (possibly empty): auxiliary code and definitions.

  The task is to generate code for the CODE and HELPERS sections that will make the Verus file verified. 
  
  OUTPUT FORMAT:
  Return the updated sections in this exact format with explicit code blocks:
  
  ```vc-helpers
  [Updated or new helper code, spec functions, and proofs needed for verification]
  ```
  
  ```vc-code
  [Implementation of the function specified in SPEC]
  ```
  
  REQUIREMENTS:
  - The CODE section must contain a verified implementation of the function specified in the SPEC section
  - The HELPERS section may be updated to support the verification of the new implementation
  - Output ONLY valid Verus code - NO conversational text, explanations, or comments outside the code
  - Use proper Verus syntax: `requires`, `ensures`, `invariant`, `decreases` (without parentheses)
  - Use Verus types like `nat`, `int`, `Vec<T>`, `Seq<T>`, etc.
  - Use `@` for sequence/vector indexing when needed (e.g., `v@[i]`)
  - Use proof blocks with `proof {{ ... }}` when necessary
  - Do not use `assume` statements in implementations
  - Use the exact format: ```vc-helpers and ```vc-code

  VERUS FILE:
  {code}

fix_verification: |
  
  You are given a Verus file that failed verification. 
  It has following five consecutive blocks: 

  PREAMBLE (possibly empty): auxiliary code, imports, and definitions.
  
  // <vc-helpers>
  HELPERS : auxiliary code, spec functions, and proofs 
  // </vc-helpers>
  
  // <vc-spec>
  SPEC : specification of a function with signature and requires/ensures conditions.
  // </vc-spec>
  
  // <vc-code>
  CODE : implementation that failed verification.
  // </vc-code>
  
  POSTAMBLE (possibly empty): auxiliary code and definitions.

  The task is to fix the verification errors in the CODE and HELPERS sections. 
  
  OUTPUT FORMAT:
  Return the fixed sections in this exact format with explicit code blocks:
  
  ```vc-helpers
  [Updated helper code, spec functions, and proofs to fix verification errors]
  ```
  
  ```vc-code
  [Fixed implementation that passes verification]
  ```
  
  REQUIREMENTS:
  - The CODE section must be fixed to pass verification
  - The HELPERS section may be updated to support the verification of the fixed implementation
  - Output ONLY valid Verus code - NO conversational text, explanations, or comments outside the code
  - PRIORITY: If the error is a compilation error (syntax, type, resolution errors), fix it first before addressing verification issues
  - For compilation errors: focus on syntax, missing brackets, type mismatches, undefined identifiers, and termination issues
  - Use proper Verus syntax: `requires`, `ensures`, `invariant`, `decreases` (without parentheses)
  - Use Verus types like `nat`, `int`, `Vec<T>`, `Seq<T>`, etc.
  - Use `@` for sequence/vector indexing when needed (e.g., `v@[i]`)
  - Use proof blocks with `proof {{ ... }}` when necessary
  - Use `assert()` statements within proof blocks for intermediate steps
  - Do not use `assume` statements in implementations
  - Do not add trivial annotations (e.g., `requires true`, `invariant true`, `ensures true`)
  - Use the exact format: ```vc-helpers and ```vc-code

  ERROR DETAILS from Verus verification of the given code:
  {errorDetails}

  VERUS FILE:
  {code}

generate_code_vibe: |
  
  You are given a Verus file with following five consecutive blocks. 

  PREAMBLE (possibly empty): auxiliary code, imports, and definitions.
  
  // <vc-helpers>
  HELPERS : auxiliary code, spec functions, and proofs 
  // </vc-helpers>
  
  // <vc-description>
  DESCRIPTION : natural language description of what the function should do.
  // </vc-description>
  
  // <vc-spec>
  SPEC : placeholder for the formal specification.
  // </vc-spec>
  
  // <vc-code>
  CODE : placeholder for the required implementation.
  // </vc-code>
  
  POSTAMBLE (possibly empty): auxiliary code and definitions.

  The task is to generate a formal specification in the SPEC section and a verified implementation in the CODE section based on the natural language DESCRIPTION. You may also add HELPERS as needed.
  
  OUTPUT FORMAT:
  Return the updated sections in this exact format with explicit code blocks:
  
  ```vc-helpers
  [Updated or new helper code, spec functions, and proofs needed for verification]
  ```
  
  ```vc-spec
  [Formal Verus function specification with signature, requires, ensures clauses based on the description]
  ```
  
  ```vc-code
  [Implementation of the function that satisfies the specification]
  ```
  
  REQUIREMENTS:
  - The SPEC section must contain a complete formal specification derived from the DESCRIPTION
  - The CODE section must contain a verified implementation that satisfies the SPEC
  - The HELPERS section may contain auxiliary code, spec functions, and proofs needed for verification
  - Output ONLY valid Verus code - NO conversational text, explanations, or comments outside the code
  - Use proper Verus syntax: `requires`, `ensures`, `invariant`, `decreases` (without parentheses)
  - Use Verus types like `nat`, `int`, `Vec<T>`, `Seq<T>`, etc.
  - Use `@` for sequence/vector indexing when needed (e.g., `v@[i]`)
  - Use proof blocks with `proof {{ ... }}` when necessary
  - Do not use `assume` statements in implementations
  - Use the exact format: ```vc-helpers, ```vc-spec, and ```vc-code

  VERUS FILE:
  {code}

fix_verification_vibe: |
  
  You are given a Verus file that failed verification. 
  It has following five consecutive blocks: 

  PREAMBLE (possibly empty): auxiliary code, imports, and definitions.
  
  // <vc-helpers>
  HELPERS : auxiliary code, spec functions, and proofs 
  // </vc-helpers>
  
  // <vc-description>
  DESCRIPTION : natural language description of what the function should do.
  // </vc-description>
  
  // <vc-spec>
  SPEC : formal specification that may need fixing.
  // </vc-spec>
  
  // <vc-code>
  CODE : implementation that failed verification.
  // </vc-code>
  
  POSTAMBLE (possibly empty): auxiliary code and definitions.

  The task is to fix the verification errors. You may need to update the SPEC, CODE, and/or HELPERS sections to make the file verify successfully.
  
  OUTPUT FORMAT:
  Return the fixed sections in this exact format with explicit code blocks:
  
  ```vc-helpers
  [Updated helper code, spec functions, and proofs to fix verification errors]
  ```
  
  ```vc-spec
  [Fixed or improved formal specification if needed]
  ```
  
  ```vc-code
  [Fixed implementation that passes verification]
  ```
  
  REQUIREMENTS:
  - Fix the verification errors while staying true to the DESCRIPTION
  - The SPEC may be updated if it doesn't correctly capture the DESCRIPTION
  - The CODE section must be fixed to pass verification and satisfy the SPEC
  - The HELPERS section may be updated to support verification
  - Output ONLY valid Verus code - NO conversational text, explanations, or comments outside the code
  - PRIORITY: If the error is a compilation error (syntax, type, resolution errors), fix it first before addressing verification issues
  - For compilation errors: focus on syntax, missing brackets, type mismatches, undefined identifiers, and termination issues
  - Use proper Verus syntax: `requires`, `ensures`, `invariant`, `decreases` (without parentheses)
  - Use Verus types like `nat`, `int`, `Vec<T>`, `Seq<T>`, etc.
  - Use `@` for sequence/vector indexing when needed (e.g., `v@[i]`)
  - Use proof blocks with `proof {{ ... }}` when necessary
  - Use `assert()` statements within proof blocks for intermediate steps
  - Do not use `assume` statements in implementations
  - Do not add trivial annotations (e.g., `requires true`, `invariant true`, `ensures true`)
  - Use the exact format: ```vc-helpers, ```vc-spec, and ```vc-code

  ERROR DETAILS from Verus verification of the given code:
  {errorDetails}

  VERUS FILE:
  {code}

