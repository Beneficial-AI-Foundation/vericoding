generate_code: |
  The task is to generate `<vc-code>` and `<vc-helpers>` sections in a Verus file so that the entire file verifies successfully.
  
  TURN 1 of {max_iterations}: This is the initial code generation phase. You have {max_iterations} total turns to get this right, so you can iterate and improve.
  
  INPUT: a Verus file containing {placeholder_count} placeholder sections (`<vc-code>` and/or `<vc-helpers>` tags) that need to be filled in.
  Optionally, the file may start with a section <vc-description> that describes the main task.
  
  OUTPUT: Return a JSON array with EXACTLY {placeholder_count} replacements (one for each placeholder section in the file), in order from top to bottom:
  ```json
  ["fn min(a: int, b: int) -> int {{ if a < b {{ a }} else {{ b }} }}", "{{\n    let result = min(a, b);\n    result\n}}"]
  ```
  CRITICAL: Respond with ONLY a JSON array. No explanations, reasoning, or markdown. Start with [ and end with ].
  
  SECTION-SPECIFIC RULES:
  
  **For `<vc-helpers>` sections:**
  - Provide complete function definitions.  
  - VERUS SYNTAX: function signature starts with `proof fn` for proof functions, `spec fn` for pure spec function, or just `fn` for executable code.

  **For `<vc-code>` sections:**
  - Provide method/function body implementation code ONLY
  - Always include opening/closing braces: `{{\n \n}}`
  - This is where you call helper functions and implement the main logic
  - Include variable declarations, assignments, and control flow
  
  CRITICAL RULES:
  - The ORIGINAL file contains EXACTLY {placeholder_count} placeholder sections - your JSON array must have EXACTLY {placeholder_count} elements
  - Provide exactly one replacement for each placeholder section in the file, in the exact order they appear (top to bottom)
  - Each replacement should be the exact code that will replace everything between the tags
  - NEVER use verification bypasses: `assume` statements, `unimplemented!()`, or other verification shortcuts
  - Implement actual proofs and logic instead of bypassing verification
  - Verus rule: Ghost types (Seq, nat, int, Map, Set) are spec-only: never use them as executable function parameters or executable code, only use themin specifications, assertions and proofs
  - Use each of `requires`, `ensures`, and `invariant` AT MOST ONCE per item
    - List multiple conditions as comma-separated entries on separate lines
    - Do NOT repeat `requires`/`ensures`/`invariant` keywords for additional lines
  - While-loop header style (single invariant block):
    while CONDITION
        invariant
            INV1,
            INV2,
        decreases MEASURE
    {{
        // body
    }}
    
  - Use proof blocks with `proof {{ ... }}` when necessary
  - Return ONLY a valid JSON array, no explanations or markdown
  - Your response must start with [ and end with ]
  - Each JSON string must be properly escaped with double quotes
  
  VERUS FILE WITH PLACEHOLDER SECTIONS:
  {code}

fix_verification: |
  The task is to fix the `<vc-code>` and `<vc-helpers>` sections in a given Verus file that failed verification.
  
  TURN {iteration} of {max_iterations}: You are making progress and have multiple turns to iterate and improve your implementation.
  
  INPUT: The ORIGINAL file contains {placeholder_count} placeholder sections (`<vc-code>` and/or `<vc-helpers>` tags) that need to be fixed based on verification errors.
  Optionally, the file may start with a section <vc-description> that describes the main task.
  
  OUTPUT: Return a JSON array with EXACTLY {placeholder_count} fixed replacements (one for each placeholder section in the ORIGINAL file), in order from top to bottom:
  ```json
  ["fn min(a: int, b: int) -> int {{ if a < b {{ a }} else {{ b }} }}", "{{\n    let result = min(a, b);\n    result\n}}"]
  ```
  CRITICAL: Respond with ONLY a JSON array. No explanations, reasoning, or markdown. Start with [ and end with ].
  
  SECTION-SPECIFIC RULES:
  
  **For `<vc-helpers>` sections:**
  - Provide complete function definitions.  
  - VERUS SYNTAX: function signature starts with `proof fn` for proof functions, `spec fn` for pure spec function, or just `fn` for executable code.
  - Add comment `/* helper modified by LLM (iteration {iteration}): [brief description] */` before modified helpers
  
  **For `<vc-code>` sections:**
  - Provide method/function body implementation code ONLY
  - Always include opening/closing braces: `{{\n  \n}}`
  - Example: `{{\n    let result = min(a, b);\n    result\n}}`
  - This is where you call helper functions and implement the main logic
  - Include variable declarations, assignments, and control flow
  - Add comment `/* code modified by LLM (iteration {iteration}): [brief description] */` at the start of method body
  
  CRITICAL RULES:
  - The ORIGINAL file contains EXACTLY {placeholder_count} placeholder sections - your JSON array must have EXACTLY {placeholder_count} elements
  - Provide exactly one replacement for each placeholder section in the file, in the exact order they appear (top to bottom)
  - Each replacement should be the exact fixed code that will replace everything between the tags
  - PRIORITY: If the error is a compilation error (syntax, type, resolution errors), fix it first before addressing verification issues
  - Verus rule: Ghost types (Seq, nat, int, Map, Set) are spec-only: never use them as executable function parameters or executable code, only use themin specifications, assertions and proofs
  - Use each of `requires`, `ensures`, and `invariant` AT MOST ONCE per item
    - List multiple conditions as comma-separated entries on separate lines
    - Do NOT repeat `requires`/`ensures`/`invariant` keywords for additional lines
  - While-loop header style (single invariant block):
    while CONDITION
        invariant
            INV1,
            INV2,
        decreases MEASURE
    {{
        // body
    }}
    
  - Use proof blocks with `proof {{ ... }}` for complex proofs
  - Use `assert()` statements within proof blocks for intermediate steps
  - NEVER use verification bypasses: `assume` statements, `unimplemented!()`, or other verification shortcuts
  - Return ONLY a valid JSON array, no explanations or markdown
  - Your response must start with [ and end with ]
  - Each JSON string must be properly escaped with double quotes
  
  ERROR DETAILS from Verus verification:
  {errorDetails}

  ORIGINAL FILE (for context):
  {original_code}

  CURRENT ITERATION FILE (with failed implementations to learn from):
  {code}
