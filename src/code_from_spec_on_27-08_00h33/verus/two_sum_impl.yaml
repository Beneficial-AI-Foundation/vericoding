vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  spec fn has_solution_at(nums: &[i32], target: i32, i: int, j: int) -> bool {
      0 <= i < j < nums.len() && nums[i] + nums[j] == target
  }
  
  spec fn has_solution_in_range(nums: &[i32], target: i32, start: int) -> bool {
      exists|i: int, j: int| start <= i < j < nums.len() && nums[i] + nums[j] == target
  }
  
  spec fn has_solution_with_first_at_least(nums: &[i32], target: i32, start: int) -> bool {
      exists|i: int, j: int| start <= i < j < nums.len() && nums[i] + nums[j] == target
  }
  
  spec fn has_solution_with_first_exactly(nums: &[i32], target: i32, first: int, start_j: int) -> bool {
      exists|j: int| start_j <= j < nums.len() && nums[first] + nums[j] == target
  }
  
  proof fn solution_exists_lemma(nums: &[i32], target: i32, start: int)
      requires
          exists|i: int, j: int| 0 <= i < j < nums.len() && nums[i] + nums[j] == target,
          start < nums.len(),
      ensures
          exists|i: int, j: int| start <= i < j < nums.len() && nums[i] + nums[j] == target ||
          exists|i: int, j: int| 0 <= i < start && start <= j < nums.len() && nums[i] + nums[j] == target
  {
      assert(exists|i: int, j: int| 0 <= i < j < nums.len() && nums[i] + nums[j] == target);
      let i_wit = choose|i: int| #[trigger] exists|j: int| 0 <= i < j < nums.len() && nums[i] + nums[j] == target;
      let j_wit = choose|j: int| 0 <= i_wit < j < nums.len() && nums[i_wit] + nums[j] == target;
      
      if i_wit >= start {
          assert(exists|i: int, j: int| start <= i < j < nums.len() && nums[i] + nums[j] == target);
      } else {
          assert(0 <= i_wit < start && start <= j_wit < nums.len() && nums[i_wit] + nums[j_wit] == target);
          assert(exists|i: int, j: int| 0 <= i < start && start <= j < nums.len() && nums[i] + nums[j] == target);
      }
  }

vc-spec: |-
  #[verifier::loop_isolation(false)]
  fn two_sum(nums: &[i32], target: i32) -> (result: (usize, usize))
      // pre-conditions-start
      requires
          nums.len() >= 2,
          exists|i: int, j: int| 0 <= i < j < nums.len() && nums[i] + nums[j] == target,
          forall|i: int, j: int|
              0 <= i < nums.len() && 0 <= j < nums.len()
                  ==> nums[i] + nums[j] <= i32::MAX
                      && nums[i] + nums[j] >= i32::MIN,
      // pre-conditions-end
      // post-conditions-start
      ensures
          ({ let (i, j) = result; 0 <= i < nums.len() }),
          ({ let (i, j) = result; 0 <= j < nums.len() }),
          ({ let (i, j) = result; i != j }),
          ({ let (i, j) = result; nums[i as int] + nums[j as int] == target })
      // post-conditions-end

vc-code: |-
  {
      let mut i = 0;
      while i < nums.len()
          invariant
              0 <= i <= nums.len(),
              exists|x: int, y: int| 0 <= x < y < nums.len() && nums[x] + nums[y] == target,
              forall|x: int, y: int|
                  0 <= x < nums.len() && 0 <= y < nums.len()
                      ==> nums[x] + nums[y] <= i32::MAX
                          && nums[x] + nums[y] >= i32::MIN,
              forall|x: int, y: int| 0 <= x < i && i <= y < nums.len() ==> nums[x] + nums[y] != target,
          decreases nums.len() - i
      {
          proof {
              solution_exists_lemma(nums, target, i as int);
          }
          
          let mut j = i + 1;
          while j < nums.len()
              invariant
                  0 <= i < nums.len(),
                  i + 1 <= j <= nums.len(),
                  exists|x: int, y: int| 0 <= x < y < nums.len() && nums[x] + nums[y] == target,
                  forall|x: int, y: int|
                      0 <= x < nums.len() && 0 <= y < nums.len()
                          ==> nums[x] + nums[y] <= i32::MAX
                              && nums[x] + nums[y] >= i32::MIN,
                  forall|x: int, y: int| 0 <= x < i && i <= y < nums.len() ==> nums[x] + nums[y] != target,
                  forall|y: int| i < y < j ==> nums[i as int] + nums[y] != target,
              decreases nums.len() - j
          {
              if nums[i] + nums[j] == target {
                  return (i, j);
              }
              j += 1;
          }
          i += 1;
      }
      unreached()
  }

vc-postamble: |-
  
  fn main() {}
  }

