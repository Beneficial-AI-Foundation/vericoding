vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus!{

vc-helpers: |-
  spec fn total_at_step(a: &Vec<i32>, step: int) -> int
      decreases step
  {
      if step <= 0 {
          0
      } else {
          let prev = total_at_step(a, step - 1);
          let val = if a[(step - 1) as usize] > 3 { 3 } else { a[(step - 1) as usize] };
          prev + val
      }
  }
  
  proof fn total_non_negative(a: &Vec<i32>, step: int)
      requires 0 <= step <= a.len()
      ensures total_at_step(a, step) >= 0
      decreases step
  {
      if step <= 0 {
      } else {
          total_non_negative(a, step - 1);
      }
  }
  
  proof fn total_bound(a: &Vec<i32>, step: int)
      requires 0 <= step <= a.len()
      ensures total_at_step(a, step) <= 3 * step
      decreases step
  {
      if step <= 0 {
      } else {
          total_bound(a, step - 1);
      }
  }

vc-spec: |-
  fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32) 
  	// pre-conditions-start
  	requires 
  		old(a).len() == N,
  		old(sum).len() == 1,
  		N > 0,
  		N < 1000,
  	// pre-conditions-end
  	// post-conditions-start
  	ensures
  		sum[0] <= 3 * N,
  	// post-conditions-end

vc-code: |-
  {
      let mut total: i32 = 0;
      let mut i: i32 = 0;
      while i < N
          invariant
              0 <= i <= N,
              total <= 3 * i,
              a.len() == N,
              sum.len() == 1,
              total >= 0,
              total == total_at_step(a, i as int),
          decreases N - i,
      {
          let old_total = total;
          if a[i as usize] > 3 {
              total = total + 3;
          } else {
              total = total + a[i as usize];
          }
          i = i + 1;
          proof {
              total_non_negative(a, i as int);
              total_bound(a, i as int);
          }
      }
      sum.set(0, total);
  }

vc-postamble: |-
  
  }
  
  fn main() {}

