vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus!{

vc-helpers: |-
  spec fn in_bounds(n: i32) -> bool {
      n >= 0 && n < 1000
  }
  
  spec fn mult_in_bounds(a: i32, b: i32) -> bool {
      let result = a as int * b as int;
      result >= i32::MIN && result <= i32::MAX
  }
  
  spec fn add_in_bounds(a: i32, b: i32) -> bool {
      let result = a as int + b as int;
      result >= i32::MIN && result <= i32::MAX
  }

vc-spec: |-
  fn myfun(a: &mut Vec<i32>, b: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32)
  	// pre-conditions-start
  	requires
  		N > 0,
  		old(a).len() == N,
  		old(b).len() == N,
  		old(sum).len() == 1,
  		N < 1000,
  	// pre-conditions-end
  	// post-conditions-start
  	ensures
  		forall |k:int| 0 <= k < N ==> a[k] == 2 * N + 1,
  	// post-conditions-end

vc-code: |-
  {
      let mut i = 0;
      while i < N
          invariant
              0 <= i <= N,
              a.len() == N,
              b.len() == N,
              sum.len() == 1,
              forall |k:int| 0 <= k < i ==> a[k] == 2 * N + 1,
              N < 1000,
          decreases N - i,
      {
          proof {
              assert(N < 1000);
              assert(2 * N < 2000);
              assert(2 * N + 1 < 2001);
              assert(2 * N + 1 <= i32::MAX);
          }
          a[i as usize] = 2 * N + 1;
          i += 1;
      }
  }

vc-postamble: |-
  
  }
  
  fn main() {}

