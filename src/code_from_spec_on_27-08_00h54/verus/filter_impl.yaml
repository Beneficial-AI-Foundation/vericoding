vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus!{

vc-helpers: |-
  proof fn filter_push_lemma(s: Seq<u64>, i: int, val: u64)
      requires 
          0 <= i < s.len(),
          val == s[i],
          val % 3 == 0,
      ensures
          s.subrange(0, i).filter(|k: u64| k % 3 == 0).push(val) == 
          s.subrange(0, i + 1).filter(|k: u64| k % 3 == 0)
  {
      let prefix = s.subrange(0, i);
      let full = s.subrange(0, i + 1);
      
      assert(full == prefix.push(val));
      
      // Use the fundamental property that filter distributes over push when element satisfies predicate
      assert(full.filter(|k: u64| k % 3 == 0) =~= prefix.filter(|k: u64| k % 3 == 0) + seq![val]);
      assert(prefix.filter(|k: u64| k % 3 == 0).push(val) =~= prefix.filter(|k: u64| k % 3 == 0) + seq![val]);
  }
  
  proof fn filter_skip_lemma(s: Seq<u64>, i: int, val: u64)
      requires 
          0 <= i < s.len(),
          val == s[i],
          val % 3 != 0,
      ensures
          s.subrange(0, i).filter(|k: u64| k % 3 == 0) == 
          s.subrange(0, i + 1).filter(|k: u64| k % 3 == 0)
  {
      let prefix = s.subrange(0, i);
      let full = s.subrange(0, i + 1);
      
      assert(full == prefix.push(val));
      
      // Use the fundamental property that filter distributes over push when element doesn't satisfy predicate
      assert(full.filter(|k: u64| k % 3 == 0) =~= prefix.filter(|k: u64| k % 3 == 0));
  }

vc-spec: |-
  fn myfun4(x: &Vec<u64>, y: &mut Vec<u64>)
      // pre-conditions-start
      requires 
          old(y).len() == 0,
      // pre-conditions-end
      // post-conditions-start
      ensures 
          y@ == x@.filter(|k:u64| k%3 == 0),
      // post-conditions-end

vc-code: |-
  {
      for i in 0..x.len()
          invariant
              y@ == x@.subrange(0, i as int).filter(|k:u64| k%3 == 0),
      {
          if x[i] % 3 == 0 {
              y.push(x[i]);
              proof {
                  filter_push_lemma(x@, i as int, x@[i as int]);
              }
          } else {
              proof {
                  filter_skip_lemma(x@, i as int, x@[i as int]);
              }
          }
      }
  }

vc-postamble: |-
  
  }
  
  fn main() {}

