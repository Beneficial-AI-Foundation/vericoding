vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-


vc-spec: |-
  #[verifier::loop_isolation(false)]
  fn pairs_sum_to_zero(nums: &[i32], target: i32) -> (found: bool)
      // pre-conditions-start
      requires
          nums.len() >= 2,
          forall|i: int, j: int|
              0 <= i < j < nums.len() ==> nums[i] + nums[j] <= i32::MAX && nums[i] + nums[j]
                  >= i32::MIN,
      // pre-conditions-end
      // post-conditions-start
      ensures
          found <==> exists|i: int, j: int| 0 <= i < j < nums.len() && nums[i] + nums[j] == target,
      // post-conditions-end

vc-code: |-
  {
      for i in 0..nums.len()
          invariant
              forall|x: int, y: int| 0 <= x < y < i ==> nums[x] + nums[y] != target,
      {
          for j in (i + 1)..nums.len()
              invariant
                  forall|x: int, y: int| 0 <= x < y < i ==> nums[x] + nums[y] != target,
                  forall|y: int| (i + 1) <= y < j ==> nums[i as int] + nums[y] != target,
          {
              if nums[i] + nums[j] == target {
                  return true;
              }
          }
      }
      false
  }

vc-postamble: |-
  
  }
  fn main() {}

