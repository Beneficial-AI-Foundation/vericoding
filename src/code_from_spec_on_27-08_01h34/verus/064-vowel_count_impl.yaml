vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_vowel(c: char) -> (ret:bool) {
      c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I'
          || c == 'O' || c == 'U'
  }
  // pure-end
  // pure-end
  
  spec fn vowels(s: Seq<char>) -> (ret:Seq<char>) {
      s.filter(|c| is_vowel(c))
  }
  // pure-end
  // pure-end
  
  spec fn inner_expr_vowels_count(s: &str, ret: u32) -> (ret:bool) {
      ret == vowels(s@).len() + if (s@.len() > 0 && (s@.last() == 'y' || s@.last() == 'Y')) {
          1int
  
      } else {
          0int
      }
  }
  // pure-end

vc-helpers: |-
  fn exec_is_vowel(c: char) -> (ret: bool)
      ensures ret == is_vowel(c)
  {
      c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I'
          || c == 'O' || c == 'U'
  }
  
  proof fn vowels_filter_len_bound(s: Seq<char>)
      ensures vowels(s).len() <= s.len()
  {
      // The filtered sequence is always shorter than or equal to the original
  }
  
  proof fn vowels_count_bound(s: &str)
      requires s@.len() <= u32::MAX
      ensures vowels(s@).len() + 1 <= u32::MAX
  {
      vowels_filter_len_bound(s@);
      assert(vowels(s@).len() <= s@.len());
      assert(s@.len() <= u32::MAX);
      assert(vowels(s@).len() + 1 <= s@.len() + 1);
      assert(s@.len() + 1 <= u32::MAX + 1);
  }
  
  spec fn unicode_len(s: &str) -> usize {
      s@.len()
  }

vc-spec: |-
  fn vowels_count(s: &str) -> (ret: u32)
      // pre-conditions-start
      requires
          s@.len() <= u32::MAX,
      // pre-conditions-end
      // post-conditions-start
      ensures
          inner_expr_vowels_count(s, ret),
      // post-conditions-end

vc-code: |-
  {
      let mut count: u32 = 0;
      let mut i: usize = 0;
      
      proof {
          vowels_count_bound(s);
      }
      
      while i < unicode_len(s)
          invariant
              i <= unicode_len(s),
              count == vowels(s@.subrange(0, i as int)).len(),
              s@.len() <= u32::MAX,
      {
          let c = s.get_char(i);
          if exec_is_vowel(c) {
              count = count + 1;
          }
          i = i + 1;
          
          proof {
              let prev_seq = s@.subrange(0, (i - 1) as int);
              let curr_seq = s@.subrange(0, i as int);
              assert(curr_seq == prev_seq.push(c));
              
              if is_vowel(c) {
                  assert(vowels(curr_seq) == vowels(prev_seq).push(c));
                  assert(vowels(curr_seq).len() == vowels(prev_seq).len() + 1);
              } else {
                  assert(vowels(curr_seq) == vowels(prev_seq));
              }
          }
      }
      
      if unicode_len(s) > 0 {
          let last_char = s.get_char(unicode_len(s) - 1);
          if last_char == 'y' || last_char == 'Y' {
              count = count + 1;
          }
      }
      
      proof {
          assert(s@.subrange(0, unicode_len(s) as int) == s@);
      }
      
      count
  }

vc-postamble: |-
  
  }
  fn main() {}

