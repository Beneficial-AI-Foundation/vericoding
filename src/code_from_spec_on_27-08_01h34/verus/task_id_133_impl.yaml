vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  
  verus! {
  
  spec fn sum_negative_to(seq: Seq<i64>) -> (res: int)
      decreases seq.len(),
  {
      if seq.len() == 0 {
          0
      } else {
          sum_negative_to(seq.drop_last()) + if (seq.last() < 0) {
              seq.last() as int
          } else {
              0 as int
          }
      }
  }
  // pure-end

vc-helpers: |-
  proof fn sum_negative_to_extend(seq: Seq<i64>, elem: i64)
      ensures sum_negative_to(seq.push(elem)) == sum_negative_to(seq) + if elem < 0 { elem as int } else { 0 }
  {
      if seq.len() == 0 {
          assert(seq.push(elem).drop_last() =~= seq);
          assert(seq.push(elem).last() == elem);
      } else {
          let extended = seq.push(elem);
          assert(extended.drop_last() =~= seq);
          assert(extended.last() == elem);
      }
  }
  
  proof fn sum_negative_to_bounds(seq: Seq<i64>)
      requires forall|j: int| 0 <= j < seq.len() ==> seq[j] >= i64::MIN && seq[j] <= i64::MAX
      ensures sum_negative_to(seq) >= i64::MIN as int * seq.len() && sum_negative_to(seq) <= 0
      decreases seq.len()
  {
      if seq.len() == 0 {
      } else {
          sum_negative_to_bounds(seq.drop_last());
      }
  }

vc-spec: |-
  fn sum_negatives(arr: &Vec<i64>) -> (sum_neg: i128)
      // post-conditions-start
      ensures
          sum_negative_to(arr@) == sum_neg,
      // post-conditions-end

vc-code: |-
  {
      let mut sum: i128 = 0;
      let mut i: usize = 0;
      
      while i < arr.len()
          invariant
              0 <= i <= arr.len(),
              sum == sum_negative_to(arr@.take(i as int)),
              sum >= i64::MIN as i128 * i as i128,
              sum <= 0,
          decreases arr.len() - i,
      {
          proof {
              let prev_seq = arr@.take(i as int);
              let next_seq = arr@.take((i + 1) as int);
              assert(next_seq =~= prev_seq.push(arr@[i as int]));
              sum_negative_to_extend(prev_seq, arr@[i as int]);
          }
          
          if arr[i] < 0 {
              sum = sum + arr[i] as i128;
          }
          
          i = i + 1;
      }
      
      proof {
          assert(arr@.take(arr.len() as int) =~= arr@);
      }
      
      sum
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

