vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  spec fn subrange_contains_element<T>(s: Seq<T>, start: int, end: int, elem: T, idx: int) -> bool {
      start <= idx < end && s[idx] == elem
  }
  
  proof fn subrange_contains_lemma<T>(s: Seq<T>, start: int, end: int, elem: T, idx: int)
      requires 0 <= start <= idx < end <= s.len(), s[idx] == elem
      ensures s.subrange(start, end).contains(elem)
  {
      assert(0 <= idx - start < end - start);
      assert(s.subrange(start, end)[idx - start] == elem);
  }

vc-spec: |-
  fn largest_smallest_integers(arr: &Vec<i32>) -> (res: (Option<i32>, Option<i32>))
      // post-conditions-start
      ensures
          ({
              let a = res.0;
              let b = res.1;
              &&& a.is_none() ==> forall|i: int| 0 <= i < arr@.len() ==> arr@[i] >= 0
              &&& a.is_some() ==> arr@.contains(a.unwrap()) && a.unwrap() < 0
              &&& a.is_some() ==> forall|i: int|
                  0 <= i < arr@.len() && arr@[i] < 0 ==> arr@[i] <= a.unwrap()
              &&& b.is_none() ==> forall|i: int| 0 <= i < arr@.len() ==> arr@[i] <= 0
              &&& b.is_some() ==> arr@.contains(b.unwrap()) && b.unwrap() > 0
              &&& b.is_some() ==> forall|i: int|
                  0 <= i < arr@.len() && arr@[i] > 0 ==> arr@[i] >= b.unwrap()
          }),
      // post-conditions-end

vc-code: |-
  {
      let mut largest_negative: Option<i32> = None;
      let mut smallest_positive: Option<i32> = None;
      
      for i in 0..arr.len()
          invariant
              largest_negative.is_none() ==> forall|j: int| 0 <= j < i ==> arr@[j] >= 0,
              largest_negative.is_some() ==> arr@.subrange(0, i as int).contains(largest_negative.unwrap()) && largest_negative.unwrap() < 0,
              largest_negative.is_some() ==> forall|j: int| 0 <= j < i && arr@[j] < 0 ==> arr@[j] <= largest_negative.unwrap(),
              smallest_positive.is_none() ==> forall|j: int| 0 <= j < i ==> arr@[j] <= 0,
              smallest_positive.is_some() ==> arr@.subrange(0, i as int).contains(smallest_positive.unwrap()) && smallest_positive.unwrap() > 0,
              smallest_positive.is_some() ==> forall|j: int| 0 <= j < i && arr@[j] > 0 ==> arr@[j] >= smallest_positive.unwrap(),
      {
          let val = arr[i];
          if val < 0 {
              if largest_negative.is_none() || val > largest_negative.unwrap() {
                  largest_negative = Some(val);
                  proof {
                      subrange_contains_lemma(arr@, 0, (i + 1) as int, val, i as int);
                  }
              }
          } else if val > 0 {
              if smallest_positive.is_none() || val < smallest_positive.unwrap() {
                  smallest_positive = Some(val);
                  proof {
                      subrange_contains_lemma(arr@, 0, (i + 1) as int, val, i as int);
                  }
              }
          }
      }
      
      (largest_negative, smallest_positive)
  }

vc-postamble: |-
  
  }
  fn main() {}

