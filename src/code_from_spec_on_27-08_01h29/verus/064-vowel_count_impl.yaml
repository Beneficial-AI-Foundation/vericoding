vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_vowel(c: char) -> (ret:bool) {
      c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I'
          || c == 'O' || c == 'U'
  }
  // pure-end
  // pure-end
  
  spec fn vowels(s: Seq<char>) -> (ret:Seq<char>) {
      s.filter(|c| is_vowel(c))
  }
  // pure-end
  // pure-end
  
  spec fn inner_expr_vowels_count(s: &str, ret: u32) -> (ret:bool) {
      ret == vowels(s@).len() + if (s@.len() > 0 && (s@.last() == 'y' || s@.last() == 'Y')) {
          1int
  
      } else {
          0int
      }
  }
  // pure-end

vc-helpers: |-
  proof fn vowels_filter_preserves_len(s: Seq<char>)
      ensures vowels(s).len() <= s.len()
  {
      assert(vowels(s).subrange(0, vowels(s).len() as int) =~= vowels(s));
  }
  
  proof fn vowels_count_bound(s: Seq<char>)
      ensures vowels(s).len() + 1 <= s.len() + 1
  {
      vowels_filter_preserves_len(s);
  }

vc-spec: |-
  fn vowels_count(s: &str) -> (ret: u32)
      // pre-conditions-start
      requires
          s@.len() <= u32::MAX,
      // pre-conditions-end
      // post-conditions-start
      ensures
          inner_expr_vowels_count(s, ret),
      // post-conditions-end

vc-code: |-
  {
      let mut count: u32 = 0;
      let mut i: usize = 0;
      
      while i < s.unicode_len()
          invariant
              i <= s.unicode_len(),
              count == vowels(s@.subrange(0, i as int)).len(),
              count <= i,
      {
          let c = s.get_char(i);
          if is_vowel(c) {
              count = count + 1;
          }
          i = i + 1;
      }
      
      proof {
          assert(s@.subrange(0, i as int) =~= s@);
          assert(count == vowels(s@).len());
      }
      
      if s@.len() > 0 {
          let last_char = s@.last();
          if last_char == 'y' || last_char == 'Y' {
              count = count + 1;
          }
      }
      
      count
  }

vc-postamble: |-
  
  }
  fn main() {}

