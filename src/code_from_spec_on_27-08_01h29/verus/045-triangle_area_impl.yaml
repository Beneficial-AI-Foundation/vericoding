vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  proof fn lemma_mul_div_exact(a: u64, h: u64)
      requires
          a > 0,
          h > 0,
          (a as nat) * (h as nat) <= u64::MAX as nat,
      ensures
          (a as nat) * (h as nat) / 2 == ((a as nat) * (h as nat)) / 2,
  {
  }
  
  proof fn lemma_no_overflow(a: u64, h: u64)
      requires
          a > 0,
          h > 0,
          (a as nat) * (h as nat) <= u64::MAX as nat,
      ensures
          (a as nat) * (h as nat) / 2 <= u64::MAX as nat,
  {
      assert((a as nat) * (h as nat) / 2 <= u64::MAX as nat);
  }
  
  proof fn lemma_division_result(a: u64, h: u64)
      requires
          a > 0,
          h > 0,
          (a as nat) * (h as nat) <= u64::MAX as nat,
      ensures
          (a * h / 2) == ((a as nat) * (h as nat) / 2) as u64,
  {
      lemma_no_overflow(a, h);
  }

vc-spec: |-
  fn triangle_area(a: u64, h: u64) -> (area: u64)
      // pre-conditions-start
      requires
          a > 0,
          h > 0,
          a * h / 2 <= u64::MAX
          ,
      // pre-conditions-end
      // post-conditions-start
      ensures
          area == a * h / 2,
      // post-conditions-end

vc-code: |-
  {
      proof {
          lemma_no_overflow(a, h);
          lemma_mul_div_exact(a, h);
          lemma_division_result(a, h);
          assert((a as nat) * (h as nat) <= u64::MAX as nat);
          assert((a as nat) * (h as nat) / 2 <= u64::MAX as nat);
      }
      (a * h / 2) as u64
  }

vc-postamble: |-
  
  }
  fn main() {}

