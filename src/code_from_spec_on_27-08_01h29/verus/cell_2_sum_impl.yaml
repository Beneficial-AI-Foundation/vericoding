vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus!{

vc-helpers: |-
  spec fn max_contribution(x: u32) -> u32 {
      if x <= 2 { x } else { 2 }
  }
  
  spec fn sum_contributions(v: Seq<u32>, end: int) -> int
      decreases end
  {
      if end <= 0 {
          0
      } else {
          sum_contributions(v, end - 1) + max_contribution(v[end - 1]) as int
      }
  }
  
  proof fn sum_contributions_monotonic(v: Seq<u32>, i: int)
      requires 0 <= i < v.len()
      ensures sum_contributions(v, i + 1) == sum_contributions(v, i) + max_contribution(v[i]) as int
  {
  }
  
  proof fn sum_contributions_bound(v: Seq<u32>, i: int)
      requires 0 <= i <= v.len()
      ensures sum_contributions(v, i) <= 2 * i
      decreases i
  {
      if i == 0 {
      } else {
          sum_contributions_bound(v, i - 1);
          assert(max_contribution(v[i - 1]) <= 2);
      }
  }

vc-spec: |-
  fn myfun(a: &mut Vec<u32>, N: u32) -> (sum: u32)
      // pre-conditions-start
      requires 
          old(a).len() == N,
          N <= 0x7FFF_FFFF,
      // pre-conditions-end
      // post-conditions-start
      ensures
          sum <= 2*N,
      // post-conditions-end

vc-code: |-
  {
      // impl-start
      let mut sum: u32 = 0;
      let mut i: usize = 0;
      
      proof {
          sum_contributions_bound(old(a)@, 0);
      }
      
      while i < a.len()
          invariant
              i <= a.len(),
              sum as int <= 2 * i as int,
              sum as int == sum_contributions(old(a)@, i as int),
              a.len() == N,
          decreases a.len() - i
      {
          let contribution = if a[i] <= 2 { a[i] } else { 2 };
          
          proof {
              assert(contribution == max_contribution(a[i]));
              sum_contributions_monotonic(old(a)@, i as int);
              sum_contributions_bound(old(a)@, i as int + 1);
              assert(2 * N as int <= 2 * 0x7FFF_FFFF_u32 as int);
              assert(2 * 0x7FFF_FFFF_u32 as int <= u32::MAX as int);
              assert(sum as int + contribution as int <= 2 * (i + 1) as int);
              assert(2 * (i + 1) as int <= 2 * N as int);
          }
          
          sum = sum + contribution;
          i = i + 1;
      }
      
      sum
      // impl-end
  }

vc-postamble: |-
  
  }
  
  fn main() {}

