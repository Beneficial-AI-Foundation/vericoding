vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  spec fn valid_pair(nums: &[i32], target: i32, i: int, j: int) -> bool {
      0 <= i < nums.len() && 0 <= j < nums.len() && i != j && nums[i] + nums[j] == target
  }
  
  proof fn exists_valid_pair_lemma(nums: &[i32], target: i32)
      requires
          nums.len() >= 2,
          exists|i: int, j: int| 0 <= i < j < nums.len() && nums[i] + nums[j] == target,
      ensures
          exists|i: int, j: int| valid_pair(nums, target, i, j)
  {
      let witness_i = choose|i: int| exists|j: int| 0 <= i < j < nums.len() && nums[i] + nums[j] == target;
      let witness_j = choose|j: int| 0 <= witness_i < j < nums.len() && nums[witness_i] + nums[j] == target;
      
      assert(valid_pair(nums, target, witness_i, witness_j));
      assert(exists|i: int, j: int| valid_pair(nums, target, i, j));
  }

vc-spec: |-
  #[verifier::loop_isolation(false)]
  fn two_sum(nums: &[i32], target: i32) -> (result: (usize, usize))
      // pre-conditions-start
      requires
          nums.len() >= 2,
          exists|i: int, j: int| 0 <= i < j < nums.len() && nums[i] + nums[j] == target,
          forall|i: int, j: int|
              0 <= i < nums.len() && 0 <= j < nums.len()
                  ==> nums[i] + nums[j] <= i32::MAX
                      && nums[i] + nums[j] >= i32::MIN,
      // pre-conditions-end
      // post-conditions-start
      ensures
          ({ let (i, j) = result; 0 <= i < nums.len() }),
          ({ let (i, j) = result; 0 <= j < nums.len() }),
          ({ let (i, j) = result; i != j }),
          ({ let (i, j) = result; nums[i as int] + nums[j as int] == target })
      // post-conditions-end

vc-code: |-
  {
      proof {
          exists_valid_pair_lemma(nums, target);
      }
      
      let mut i = 0;
      while i < nums.len()
          invariant
              0 <= i <= nums.len(),
              exists|x: int, y: int| valid_pair(nums, target, x, y),
              forall|x: int, y: int| 0 <= x < i && 0 <= y < nums.len() && x != y ==> nums[x] + nums[y] != target,
          decreases nums.len() - i
      {
          let mut j = 0;
          while j < nums.len()
              invariant
                  0 <= i < nums.len(),
                  0 <= j <= nums.len(),
                  exists|x: int, y: int| valid_pair(nums, target, x, y),
                  forall|x: int, y: int| 0 <= x < i && 0 <= y < nums.len() && x != y ==> nums[x] + nums[y] != target,
                  forall|k: int| 0 <= k < j ==> !(i != k && nums[i as int] + nums[k] == target),
              decreases nums.len() - j
          {
              if i != j && nums[i] + nums[j] == target {
                  assert(0 <= i < nums.len());
                  assert(0 <= j < nums.len());
                  assert(i != j);
                  assert(nums[i as int] + nums[j as int] == target);
                  return (i, j);
              }
              j += 1;
          }
          i += 1;
      }
      
      proof {
          assert(forall|x: int, y: int| 0 <= x < nums.len() && 0 <= y < nums.len() && x != y ==> nums[x] + nums[y] != target);
          assert(exists|x: int, y: int| valid_pair(nums, target, x, y));
          assert(false);
      }
      
      unreached()
  }

vc-postamble: |-
  
  fn main() {}
  }

