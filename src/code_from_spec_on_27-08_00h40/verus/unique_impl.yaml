vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  spec fn contains_value(v: &Vec<i32>, val: i32) -> bool {
      exists|i: int| 0 <= i < v.len() && v[i] == val
  }
  
  spec fn all_from_input(result: &Vec<i32>, input: &[i32]) -> bool {
      forall|i: int| 0 <= i < result.len() ==> contains_value_slice(input, result[i])
  }
  
  spec fn contains_value_slice(a: &[i32], val: i32) -> bool {
      exists|i: int| 0 <= i < a.len() && a[i] == val
  }
  
  spec fn no_duplicates(v: &Vec<i32>) -> bool {
      forall|i: int, j: int| 0 <= i < j < v.len() ==> v[i] != v[j]
  }
  
  spec fn all_unique_values_included(input: &[i32], result: &Vec<i32>) -> bool {
      forall|val: i32| (contains_value_slice(input, val) && 
          (forall|i: int, j: int| 0 <= i < j < input.len() && input[i] == val && input[j] == val ==> false)) 
          ==> contains_value(result, val)
  }

vc-spec: |-
  #[verifier::loop_isolation(false)]
  fn unique(a: &[i32]) -> (result: Vec<i32>)
      // pre-conditions-start
      requires
          forall|i: int, j: int|
              #![trigger a[i], a[j]]
              0 <= i && i < j && j < a.len() ==> a[i] <= a[j],
      // pre-conditions-end
      // post-conditions-start
      ensures
          forall|i: int, j: int|
              #![trigger result[i], result[j]]
              0 <= i && i < j && j < result.len() ==> result[i] < result[j],
      // post-conditions-end

vc-code: |-
  {
      let mut result = Vec::new();
      let mut i = 0;
      
      while i < a.len()
          invariant
              0 <= i <= a.len(),
              forall|k: int, l: int|
                  #![trigger result[k], result[l]]
                  0 <= k && k < l && l < result.len() ==> result[k] < result[l],
              forall|j: int| 0 <= j < result.len() ==> contains_value_slice(a, result[j]),
              forall|j: int| 0 <= j < result.len() ==> 
                  exists|k: int| 0 <= k < i && a[k] == result[j],
              forall|val: i32| 
                  (exists|k: int| 0 <= k < i && a[k] == val && 
                      (forall|l: int| 0 <= l < k ==> a[l] != val)) ==> 
                  contains_value(&result, val),
      {
          if i == 0 || a[i] != a[i - 1] {
              result.push(a[i]);
          }
          i += 1;
      }
      
      result
  }

vc-postamble: |-
  
  fn main() {}
  }

