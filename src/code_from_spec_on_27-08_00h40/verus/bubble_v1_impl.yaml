vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  
  verus! {
  
  spec fn sorted_between(a: Seq<u32>, from: int, to: int) -> (result:bool) {
          forall |i: int, j:int|  from <= i < j < to ==> a[i] <= a[j]
      }
      // pure-end
  // pure-end
  
  spec fn is_reorder_of<T>(r: Seq<int>, p: Seq<T>, s: Seq<T>) -> (result:bool) {
      &&& r.len() == s.len()
      &&& forall|i: int| 0 <= i < r.len() ==> 0 <= #[trigger] r[i] < r.len()
      &&& forall|i: int, j: int| 0 <= i < j < r.len() ==> r[i] != r[j]
      &&& p =~= r.map_values(|i: int| s[i])
  }
  // pure-end

vc-helpers: |-
  proof fn sorted_between_empty(a: Seq<u32>, from: int, to: int)
      requires from >= to
      ensures sorted_between(a, from, to)
  {
  }
  
  proof fn sorted_between_single(a: Seq<u32>, from: int, to: int)
      requires from + 1 >= to
      ensures sorted_between(a, from, to)
  {
  }
  
  proof fn sorted_between_extend(a: Seq<u32>, from: int, to: int, new_to: int)
      requires 
          sorted_between(a, from, to),
          to <= new_to,
          forall|i: int| from <= i < to ==> a[i] <= a[to]
      ensures sorted_between(a, from, new_to)
  {
  }
  
  proof fn identity_reorder<T>(s: Seq<T>)
      ensures is_reorder_of(Seq::new(s.len(), |i: int| i), s, s)
  {
      let r = Seq::new(s.len(), |i: int| i);
      assert(r.len() == s.len());
      assert(forall|i: int| 0 <= i < r.len() ==> 0 <= #[trigger] r[i] < r.len()) by {
          assert(forall|i: int| 0 <= i < r.len() ==> r[i] == i);
      }
      assert(forall|i: int, j: int| 0 <= i < j < r.len() ==> r[i] != r[j]) by {
          assert(forall|i: int, j: int| 0 <= i < j < r.len() ==> r[i] == i && r[j] == j);
      }
      assert(s =~= r.map_values(|i: int| s[i])) by {
          assert(s.len() == r.map_values(|i: int| s[i]).len());
          assert(forall|i: int| 0 <= i < s.len() ==> s[i] == r.map_values(|j: int| s[j])[i]) by {
              assert(forall|i: int| 0 <= i < s.len() ==> r.map_values(|j: int| s[j])[i] == s[r[i]]);
              assert(forall|i: int| 0 <= i < s.len() ==> r[i] == i);
          }
      }
  }

vc-spec: |-
  fn test1(nums: &mut Vec<u32>)
          // post-conditions-start
          ensures
              sorted_between(nums@, 0, nums@.len() as int),
              exists|r: Seq<int>| is_reorder_of(r, nums@, old(nums)@),
          // post-conditions-end

vc-code: |-
  {
      let ghost old_nums = nums@;
      
      if nums.len() <= 1 {
          proof {
              sorted_between_single(nums@, 0, nums@.len() as int);
              identity_reorder(nums@);
          }
          return;
      }
      
      let mut i = 0;
      while i < nums.len()
          invariant
              0 <= i <= nums.len(),
              sorted_between(nums@, 0, i as int),
              exists|r: Seq<int>| is_reorder_of(r, nums@, old_nums),
      {
          let mut j = i;
          let mut min_idx = i;
          
          while j < nums.len()
              invariant
                  i <= j <= nums.len(),
                  i <= min_idx < nums.len(),
                  forall|k: int| i <= k < j ==> nums@[min_idx as int] <= nums@[k],
                  sorted_between(nums@, 0, i as int),
                  exists|r: Seq<int>| is_reorder_of(r, nums@, old_nums),
          {
              if nums[j] < nums[min_idx] {
                  min_idx = j;
              }
              j += 1;
          }
          
          if min_idx != i {
              let temp = nums[i];
              nums.set(i, nums[min_idx]);
              nums.set(min_idx, temp);
          }
          
          proof {
              if i > 0 {
                  assert(forall|k: int| 0 <= k < i ==> nums@[k] <= nums@[i as int]);
                  sorted_between_extend(nums@, 0, i as int, (i + 1) as int);
              } else {
                  sorted_between_single(nums@, 0, 1);
              }
          }
          
          i += 1;
      }
  }

vc-postamble: |-
  
  }
  
  fn main() {}

