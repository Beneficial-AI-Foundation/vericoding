vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn seq_max(a: Seq<i32>) -> (ret: i32)
      decreases a.len(),
  {
      if a.len() == 0 {
          i32::MIN
      } else if a.last() > seq_max(a.drop_last()) {
          a.last()
      } else {
          seq_max(a.drop_last())
      }
  }

vc-helpers: |-
  proof fn seq_max_take_property(a: Seq<i32>, i: int)
      requires 0 <= i < a.len()
      ensures seq_max(a.take(i + 1)) == if a[i] > seq_max(a.take(i)) { a[i] } else { seq_max(a.take(i)) }
      decreases i
  {
      let prefix = a.take(i + 1);
      assert(prefix.len() == i + 1);
      assert(prefix.last() == a[i]);
      assert(prefix.drop_last() == a.take(i));
  }
  
  proof fn seq_max_empty_take()
      ensures seq_max(Seq::<i32>::empty()) == i32::MIN
  {
  }

vc-spec: |-
  fn rolling_max(numbers: Vec<i32>) -> (result: Vec<i32>)
      // post-conditions-start
      ensures
          result.len() == numbers.len(),
          forall|i: int| 0 <= i < numbers.len() ==> result[i] == seq_max(numbers@.take(i + 1)),
      // post-conditions-end

vc-code: |-
  {
      let mut result = Vec::new();
      let mut current_max = i32::MIN;
      
      for i in 0..numbers.len()
          invariant
              result.len() == i,
              forall|j: int| 0 <= j < i ==> result[j] == seq_max(numbers@.take(j + 1)),
              i == 0 ==> current_max == i32::MIN,
              i > 0 ==> current_max == seq_max(numbers@.take(i)),
      {
          if i == 0 {
              current_max = numbers[i];
          } else {
              if numbers[i] > current_max {
                  current_max = numbers[i];
              }
          }
          
          proof {
              seq_max_take_property(numbers@, i);
              if i == 0 {
                  seq_max_empty_take();
                  assert(numbers@.take(1).last() == numbers[i]);
                  assert(numbers@.take(1).drop_last() == Seq::<i32>::empty());
              }
          }
          
          result.push(current_max);
      }
      
      result
  }

vc-postamble: |-
  
  fn main() {}
  }

