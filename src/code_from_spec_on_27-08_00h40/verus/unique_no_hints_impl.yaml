vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  spec fn contains_value(seq: Seq<i32>, val: i32) -> bool {
      exists|i: int| 0 <= i < seq.len() && seq[i] == val
  }
  
  spec fn is_strictly_increasing(seq: Seq<i32>) -> bool {
      forall|i: int, j: int| 0 <= i < j < seq.len() ==> seq[i] < seq[j]
  }
  
  spec fn preserves_elements(original: Seq<i32>, result: Seq<i32>) -> bool {
      forall|val: i32| contains_value(result, val) ==> contains_value(original, val)
  }

vc-spec: |-
  #[verifier::loop_isolation(false)]
  fn unique(a: &[i32]) -> (result: Vec<i32>)
      requires
          forall|i: int, j: int|
              #![trigger a[i], a[j]]
              0 <= i && i < j && j < a.len() ==> a[i] <= a[j],
      ensures
          forall|i: int, j: int|
              #![trigger result[i], result[j]]
              0 <= i && i < j && j < result.len() ==> result[i] < result[j],

vc-code: |-
  {
      let mut result = Vec::new();
      let mut i = 0;
      
      while i < a.len()
          invariant
              0 <= i <= a.len(),
              forall|k: int, l: int| 0 <= k < l < result.len() ==> result@[k] < result@[l],
              forall|k: int| 0 <= k < result.len() ==> exists|j: int| 0 <= j < i && a[j] == result@[k],
              forall|k: int| 0 <= k < result.len() - 1 ==> exists|j: int| k < j < result.len() && result@[k] < result@[j],
      {
          if result.len() == 0 || a[i as int] != result[result.len() - 1] {
              result.push(a[i as int]);
          }
          i += 1;
      }
      
      result
  }

vc-postamble: |-
  
  fn main() {}
  }

