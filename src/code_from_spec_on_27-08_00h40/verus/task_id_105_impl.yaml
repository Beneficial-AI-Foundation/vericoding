vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn count_boolean(seq: Seq<bool>) -> (result: int)
      decreases seq.len(),
  {
      if seq.len() == 0 {
          0
      } else {
          count_boolean(seq.drop_last()) + if (seq.last()) {
              1 as int
          } else {
              0 as int
          }
      }
  }
  // pure-end

vc-helpers: |-
  proof fn lemma_count_boolean_monotonic(seq: Seq<bool>)
      ensures count_boolean(seq) >= 0
      decreases seq.len()
  {
      if seq.len() == 0 {
          // Base case: empty sequence has count 0
      } else {
          // Inductive case
          lemma_count_boolean_monotonic(seq.drop_last());
          assert(count_boolean(seq.drop_last()) >= 0);
          if seq.last() {
              assert(count_boolean(seq) == count_boolean(seq.drop_last()) + 1);
          } else {
              assert(count_boolean(seq) == count_boolean(seq.drop_last()) + 0);
          }
      }
  }
  
  proof fn lemma_count_boolean_bound(seq: Seq<bool>)
      ensures count_boolean(seq) <= seq.len()
      decreases seq.len()
  {
      if seq.len() == 0 {
          // Base case
      } else {
          // Inductive case
          lemma_count_boolean_bound(seq.drop_last());
          assert(count_boolean(seq.drop_last()) <= seq.drop_last().len());
          if seq.last() {
              assert(count_boolean(seq) == count_boolean(seq.drop_last()) + 1);
              assert(count_boolean(seq) <= seq.drop_last().len() + 1);
              assert(seq.drop_last().len() + 1 == seq.len());
          } else {
              assert(count_boolean(seq) == count_boolean(seq.drop_last()) + 0);
              assert(count_boolean(seq) <= seq.drop_last().len());
              assert(seq.drop_last().len() < seq.len());
          }
      }
  }

vc-spec: |-
  fn count_true(arr: &Vec<bool>) -> (count: u64)
      // pre-conditions-start
      ensures
          0 <= count <= arr.len(),
          count_boolean(arr@) == count,
      // pre-conditions-end

vc-code: |-
  {
      let mut count: u64 = 0;
      let mut i: usize = 0;
      
      proof {
          lemma_count_boolean_monotonic(arr@);
          lemma_count_boolean_bound(arr@);
      }
      
      while i < arr.len()
          invariant
              0 <= i <= arr.len(),
              0 <= count <= i,
              count_boolean(arr@.take(i as int)) == count,
      {
          if arr[i] {
              count = count + 1;
          }
          
          proof {
              assert(arr@.take((i + 1) as int) == arr@.take(i as int).push(arr@[i as int]));
              if arr[i] {
                  assert(count_boolean(arr@.take((i + 1) as int)) == count_boolean(arr@.take(i as int)) + 1);
              } else {
                  assert(count_boolean(arr@.take((i + 1) as int)) == count_boolean(arr@.take(i as int)) + 0);
              }
          }
          
          i = i + 1;
      }
      
      proof {
          assert(arr@.take(arr.len() as int) == arr@);
      }
      
      count
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

