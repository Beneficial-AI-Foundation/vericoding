vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn zip_halves<T>(v: Seq<T>) -> (ret: Seq<(T, T)>) {
      v.take((v.len() / 2) as int).zip_with(v.skip(((v.len() + 1) / 2) as int).reverse())
  }
  // pure-end
  // pure-end
  
  spec fn diff(s: Seq<(i32, i32)>) -> (ret: int) {
      s.fold_left(
          0,
          |acc: int, x: (i32, i32)|
              if (x.0 != x.1) {
                  acc + 1
              } else {
                  acc
              },
      )
  }
  // pure-end

vc-helpers: |-
  proof fn zip_halves_len<T>(v: Seq<T>)
      ensures zip_halves(v).len() == (v.len() / 2) as int
  {
  }
  
  proof fn diff_induction_base(s: Seq<(i32, i32)>)
      requires s.len() == 0
      ensures diff(s) == 0
  {
  }
  
  proof fn diff_induction_step(s: Seq<(i32, i32)>)
      requires s.len() > 0
      ensures diff(s) == diff(s.drop_last()) + if s.last().0 != s.last().1 { 1 } else { 0 }
  {
  }
  
  proof fn diff_accumulate(s: Seq<(i32, i32)>, idx: int, acc: int)
      requires 0 <= idx <= s.len()
      requires acc == diff(s.take(idx))
      ensures acc + diff(s.skip(idx)) == diff(s)
  {
      if idx == s.len() {
      } else {
          diff_induction_step(s.skip(idx));
          diff_accumulate(s, idx + 1, acc + if s[idx].0 != s[idx].1 { 1 } else { 0 });
      }
  }

vc-spec: |-
  fn smallest_change(v: Vec<i32>) -> (change: usize)
      // pre-conditions-start
      requires
          v@.len() < usize::MAX,
      // pre-conditions-end
      // post-conditions-start
      ensures
          change == diff(zip_halves(v@)),
      // post-conditions-end

vc-code: |-
  {
      let len = v.len();
      let first_half_len = len / 2;
      let second_half_start = (len + 1) / 2;
      
      let mut count = 0;
      let mut i = 0;
      
      while i < first_half_len
          invariant
              i <= first_half_len,
              first_half_len == len / 2,
              second_half_start == (len + 1) / 2,
              count == diff(zip_halves(v@).take(i as int)),
          decreases first_half_len - i
      {
          let first_elem = v[i];
          let second_elem = v[len - 1 - i];
          
          if first_elem != second_elem {
              count += 1;
          }
          i += 1;
          
          proof {
              diff_induction_step(zip_halves(v@).skip((i-1) as int));
          }
      }
      
      proof {
          zip_halves_len(v@);
          diff_accumulate(zip_halves(v@), 0, 0);
      }
      
      count
  }

vc-postamble: |-
  
  }
  fn main() {}

