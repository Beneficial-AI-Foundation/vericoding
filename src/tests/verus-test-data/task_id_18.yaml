vc-description: |-

vc-preamble: |-
  use vstd::prelude::*;


  verus! {

vc-helpers: |-
  fn contains(str: &Vec<char>, key: char) -> (result: bool)
      // post-conditions-start
      ensures
          result <==> (exists|i: int| 0 <= i < str.len() && (str[i] == key)),
      // post-conditions-end
  {
      // impl-start
      let mut i = 0;
      while i < str.len()
          // invariants-start
          invariant
              forall|m: int| 0 <= m < i ==> (str[m] != key),
          // invariants-end
      {
          if (str[i] == key) {
              return true;
          }
          i += 1;
      }
      false
      // impl-end
  }

  proof fn lemma_vec_push<T>(vec: Seq<T>, i: T, l: usize)
      // pre-conditions-start
      requires
          l == vec.len(),
      // pre-conditions-end
      // post-conditions-start
      ensures
          forall|k: int| 0 <= k < vec.len() ==> #[trigger] vec[k] == vec.push(i)[k],
          vec.push(i).index(l as int) == i,
      // post-conditions-end
  {
      // impl-start
      // impl-end
  }
  // pure-end

vc-spec: |-
  fn remove_chars(str1: &Vec<char>, str2: &Vec<char>) -> (result: Vec<char>)
      // post-conditions-start
      ensures
          forall|i: int|
              0 <= i < result.len() ==> (str1@.contains(#[trigger] result[i]) && !str2@.contains(
                  #[trigger] result[i],
              )),
          forall|i: int|
              0 <= i < str1.len() ==> (str2@.contains(#[trigger] str1[i]) || result@.contains(
                  #[trigger] str1[i],
              )),
      // post-conditions-end

vc-code: |-
  {
      // impl-start
      assume(false);
      vec![]
      // impl-end
  }

vc-postamble: |-

  } // verus!
  fn main() {}