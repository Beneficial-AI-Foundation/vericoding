vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn expr_inner_longest(strings: &Vec<Vec<u8>>, result: Option<&Vec<u8>>) -> (result: bool) {
      match result {
          None => strings.len() == 0,
          Some(s) => {
              (forall|i: int| #![auto] 0 <= i < strings.len() ==> s.len() >= strings[i].len())
                  && (exists|i: int|
                  #![auto]
                  (0 <= i < strings.len() && s == strings[i] && (forall|j: int|
                      #![auto]
                      0 <= j < i ==> strings[j].len() < s.len())))
          },
      }
  }
  // pure-end

vc-helpers: |-
  proof fn lemma_longest_unique(strings: &Vec<Vec<u8>>, i: int, j: int)
      requires
          0 <= i < strings.len(),
          0 <= j < strings.len(),
          i != j,
          (forall|k: int| #![auto] 0 <= k < strings.len() ==> strings[i].len() >= strings[k].len()),
          (forall|k: int| #![auto] 0 <= k < i ==> strings[k].len() < strings[i].len())
      ensures
          !(forall|k: int| #![auto] 0 <= k < j ==> strings[k].len() < strings[j].len()) || strings[j].len() < strings[i].len()
  {
      if j < i {
          assert(strings[j].len() < strings[i].len());
      } else {
          assert(j > i);
          assert(strings[i].len() >= strings[j].len());
          if forall|k: int| #![auto] 0 <= k < j ==> strings[k].len() < strings[j].len() {
              assert(i < j);
              assert(strings[i].len() < strings[j].len());
              assert(strings[i].len() >= strings[j].len());
              assert(false);
          }
      }
  }
  
  proof fn lemma_empty_case(strings: &Vec<Vec<u8>>)
      requires strings.len() == 0
      ensures expr_inner_longest(strings, None)
  {
  }
  
  proof fn lemma_found_case(strings: &Vec<Vec<u8>>, max_idx: usize)
      requires
          0 <= max_idx < strings.len(),
          (forall|i: int| #![auto] 0 <= i < strings.len() ==> strings[max_idx as int].len() >= strings[i].len()),
          (forall|j: int| #![auto] 0 <= j < max_idx ==> strings[j].len() < strings[max_idx as int].len())
      ensures
          expr_inner_longest(strings, Some(&strings[max_idx as int]))
  {
      assert(exists|i: int| #![auto] (0 <= i < strings.len() && &strings[max_idx as int] == &strings[i] && 
          (forall|j: int| #![auto] 0 <= j < i ==> strings[j].len() < strings[max_idx as int].len()))) by {
          assert(0 <= max_idx < strings.len());
          assert(&strings[max_idx as int] == &strings[max_idx as int]);
          assert(forall|j: int| #![auto] 0 <= j < max_idx ==> strings[j].len() < strings[max_idx as int].len());
      }
  }

vc-spec: |-
  fn longest(strings: &Vec<Vec<u8>>) -> (result: Option<&Vec<u8>>)
      // post-conditions-start
      ensures
          expr_inner_longest(strings, result),
      // post-conditions-end

vc-code: |-
  {
      if strings.len() == 0 {
          proof {
              lemma_empty_case(strings);
          }
          return None;
      }
      
      let mut max_len = strings[0].len();
      let mut max_idx = 0;
      let mut i = 1;
      
      while i < strings.len()
          invariant
              1 <= i <= strings.len(),
              0 <= max_idx < strings.len(),
              max_len == strings[max_idx as int].len(),
              (forall|j: int| #![auto] 0 <= j < i ==> strings[max_idx as int].len() >= strings[j].len()),
              (forall|j: int| #![auto] 0 <= j < max_idx ==> strings[j].len() < strings[max_idx as int].len()),
          decreases strings.len() - i
      {
          if strings[i].len() > max_len {
              max_len = strings[i].len();
              max_idx = i;
          }
          i += 1;
      }
      
      proof {
          lemma_found_case(strings, max_idx);
          let ghost max_idx_ghost: int = max_idx as int;
          assert(&strings[max_idx_ghost] == &strings[max_idx_ghost]);
      }
      
      Some(&strings[max_idx])
  }

vc-postamble: |-
  
  }
  fn main() {}

