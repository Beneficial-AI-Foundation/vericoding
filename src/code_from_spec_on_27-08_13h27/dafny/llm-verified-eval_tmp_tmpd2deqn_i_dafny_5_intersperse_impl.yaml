vc-preamble: |-


vc-helpers: |-
  // No additional helpers needed for this implementation.

vc-spec: |-
  // <vc-spec>
  method intersperse(numbers: seq<int>, delimiter: int) returns (interspersed: seq<int>)
      ensures |interspersed| == if |numbers| > 0 then 2 * |numbers| - 1 else 0
      ensures forall i :: 0 <= i < |interspersed| ==> i % 2 == 0 ==> 
                  interspersed[i] == numbers[i / 2]
      ensures forall i :: 0 <= i < |interspersed| ==> i % 2 == 1 ==>
                  interspersed[i] == delimiter
  // </vc-spec>

vc-code: |-
  method Intersperse(numbers: seq<int>, delimiter: int) returns (interspersed: seq<int>)
      ensures |interspersed| == if |numbers| > 0 then 2 * |numbers| - 1 else 0
      ensures forall i :: 0 <= i < |interspersed| ==> i % 2 == 0 ==> 
                  interspersed[i] == numbers[i / 2]
      ensures forall i :: 0 <= i < |interspersed| ==> i % 2 == 1 ==>
                  interspersed[i] == delimiter
  {
      if |numbers| == 0 {
          interspersed := [];
      } else {
          interspersed := [];
          var i := 0;
          while i < |numbers| - 1
              invariant 0 <= i < |numbers|
              invariant |interspersed| == if i > 0 then 2 * i else 0
              invariant forall k :: 0 <= k < |interspersed| ==> k % 2 == 0 ==> 
                          interspersed[k] == numbers[k / 2]
              invariant forall k :: 0 <= k < |interspersed| ==> k % 2 == 1 ==> 
                          interspersed[k] == delimiter
          {
              interspersed := interspersed + [numbers[i], delimiter];
              i := i + 1;
          }
          interspersed := interspersed + [numbers[i]];
      }
  }

vc-postamble: |-


