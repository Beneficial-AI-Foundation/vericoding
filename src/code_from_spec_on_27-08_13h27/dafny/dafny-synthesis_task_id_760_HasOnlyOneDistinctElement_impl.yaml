vc-preamble: |-


vc-helpers: |-
  lemma AllElementsEqualImpliesOneDistinct(a: array<int>)
    requires a.Length > 0
    ensures (forall i, j :: 0 <= i < a.Length && 0 <= j < a.Length ==> a[i] == a[j]) ==> 
            (forall k :: 0 <= k < a.Length ==> a[k] == a[0])
  {
  }
  
  lemma NotAllEqualImpliesTwoDifferent(a: array<int>)
    requires a.Length > 1
    ensures !(forall i, j :: 0 <= i < a.Length && 0 <= j < a.Length ==> a[i] == a[j]) ==> 
            (exists i, j :: 0 <= i < a.Length && 0 <= j < a.Length && a[i] != a[j])
  {
  }

vc-spec: |-
  // <vc-spec>
  method HasOnlyOneDistinctElement(a: array<int>) returns (result: bool)
      requires a != null
      ensures result ==> forall i, j :: 0 <= i < a.Length && 0 <= j < a.Length ==> a[i] == a[j]
      ensures !result ==> exists i, j :: 0 <= i < a.Length && 0 <= j < a.Length && a[i] != a[j]
  // </vc-spec>

vc-code: |-
  method HasOnlyOneDistinctElementImpl(a: array<int>) returns (result: bool)
    requires a != null
    ensures result ==> forall i, j :: 0 <= i < a.Length && 0 <= j < a.Length ==> a[i] == a[j]
    ensures !result ==> exists i, j :: 0 <= i < a.Length && 0 <= j < a.Length && a[i] != a[j]
  {
    if a.Length == 0 {
      result := true;
      return;
    }
    
    var first := a[0];
    var i := 0;
    while i < a.Length
      invariant 0 <= i <= a.Length
      invariant forall k :: 0 <= k < i ==> a[k] == first
    {
      if a[i] != first {
        result := false;
        return;
      }
      i := i + 1;
    }
    result := true;
    return;
  }

vc-postamble: |-


