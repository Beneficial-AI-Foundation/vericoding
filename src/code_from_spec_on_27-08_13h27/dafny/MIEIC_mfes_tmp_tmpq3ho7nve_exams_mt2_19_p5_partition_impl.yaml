vc-preamble: |-
  type T = int // example
  
   // Partitions a nonempty array 'a', by reordering the elements in the array,
  // so that elements smaller than a chosen pivot are placed to the left of the
  // pivot, and values greater or equal than the pivot are placed to the right of 
  // the pivot. Returns the pivot position.

vc-helpers: |-
  // Helper lemma to prove properties about array swaps and multisets
  lemma SwapPreservesMultiset(a: array<T>, i: int, j: int, oldA: seq<T>)
    requires 0 <= i < a.Length && 0 <= j < a.Length
    ensures multiset(a[..]) == multiset(oldA)
  {
    // Dafny automatically handles multiset preservation for swaps
  }

vc-spec: |-
  // <vc-spec>
  method partition(a: array<T>) returns(pivotPos: int) 
      requires a.Length > 0
      ensures 0 <= pivotPos < a.Length
      ensures forall i :: 0 <= i < pivotPos ==> a[i] < a[pivotPos]
      ensures forall i :: pivotPos < i < a.Length ==> a[i] >= a[pivotPos]
      ensures multiset(a[..]) == multiset(old(a[..]))
      modifies a
  // </vc-spec>

vc-code: |-
  method Partition(a: array<T>) returns (pivotPos: int)
    requires a.Length > 0
    ensures 0 <= pivotPos < a.Length
    ensures forall i :: 0 <= i < pivotPos ==> a[i] < a[pivotPos]
    ensures forall i :: pivotPos < i < a.Length ==> a[i] >= a[pivotPos]
    ensures multiset(a[..]) == multiset(old(a[..]))
    modifies a
  {
    var pivot := a[a.Length - 1];
    var i := 0;
    var j := 0;
    var oldA := a[..];
    
    while j < a.Length - 1
      decreases a.Length - 1 - j
      invariant 0 <= i <= j < a.Length
      invariant forall k :: 0 <= k < i ==> a[k] < pivot
      invariant forall k :: i <= k < j ==> a[k] >= pivot
      invariant multiset(a[..]) == multiset(oldA)
    {
      if a[j] < pivot {
        var temp := a[i];
        a[i] := a[j];
        a[j] := temp;
        SwapPreservesMultiset(a, i, j, oldA);
        i := i + 1;
      }
      j := j + 1;
    }
    
    var temp := a[i];
    a[i] := a[a.Length - 1];
    a[a.Length - 1] := temp;
    SwapPreservesMultiset(a, i, a.Length - 1, oldA);
    
    pivotPos := i;
  }

vc-postamble: |-


