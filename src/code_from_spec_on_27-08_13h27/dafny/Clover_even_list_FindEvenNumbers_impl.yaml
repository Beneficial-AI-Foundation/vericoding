vc-preamble: |-


vc-helpers: |-
  function CountEvens(arr: array<int>, start: int, end: int): int
    requires 0 <= start <= end <= arr.Length
    decreases end - start
    reads arr
  {
    if start == end then 0
    else if arr[start] % 2 == 0 then 1 + CountEvens(arr, start + 1, end)
    else CountEvens(arr, start + 1, end)
  }
  
  lemma CountEvensCorrect(arr: array<int>, start: int, end: int)
    requires 0 <= start <= end <= arr.Length
    ensures CountEvens(arr, start, end) == |set i: int | start <= i < end && arr[i] % 2 == 0|
    decreases end - start
  {
    if start == end {
      assert CountEvens(arr, start, end) == 0;
      assert |set i: int | start <= i < end && arr[i] % 2 == 0| == 0;
    } else {
      CountEvensCorrect(arr, start + 1, end);
      var currentSet := set i: int | start + 1 <= i < end && arr[i] % 2 == 0;
      var fullSet := set i: int | start <= i < end && arr[i] % 2 == 0;
      if arr[start] % 2 == 0 {
        assert fullSet == {start} + currentSet;
        assert |fullSet| == 1 + |currentSet|;
        assert CountEvens(arr, start, end) == 1 + CountEvens(arr, start + 1, end);
      } else {
        assert fullSet == currentSet;
        assert |fullSet| == |currentSet|;
        assert CountEvens(arr, start, end) == CountEvens(arr, start + 1, end);
      }
    }
  }

vc-spec: |-
  // <vc-spec>
  method FindEvenNumbers (arr: array<int>) returns (evenNumbers: array<int>)
    ensures forall x {:trigger (x%2) }:: x in arr[..] &&  (x%2==0)==> x in evenNumbers[..]
    ensures forall x :: x !in arr[..] ==> x !in evenNumbers[..]
    ensures forall k :: 0 <= k < evenNumbers.Length ==> evenNumbers[k] % 2 == 0
    ensures forall k, l :: 0 <= k < l < evenNumbers.Length ==>
                             exists n, m :: 0 <= n < m < arr.Length && evenNumbers[k] == arr[n] && evenNumbers[l] == arr[m]
  // </vc-spec>

vc-code: |-
  method FindEvenNumbersImpl(arr: array<int>) returns (evenNumbers: array<int>)
    ensures forall x {:trigger (x%2)} :: x in arr[..] && (x%2==0) ==> x in evenNumbers[..]
    ensures forall x :: x !in arr[..] ==> x !in evenNumbers[..]
    ensures forall k :: 0 <= k < evenNumbers.Length ==> evenNumbers[k] % 2 == 0
    ensures forall k, l :: 0 <= k < l < evenNumbers.Length ==>
                           exists n, m :: 0 <= n < m < arr.Length && evenNumbers[k] == arr[n] && evenNumbers[l] == arr[m]
  {
    var count := 0;
    var i := 0;
    while i < arr.Length
      invariant 0 <= count <= i <= arr.Length
      invariant count == CountEvens(arr, 0, i)
    {
      if arr[i] % 2 == 0 {
        count := count + 1;
      }
      i := i + 1;
    }
    evenNumbers := new int[count];
    var index := 0;
    var positions: seq<int> := [];
    i := 0;
    while i < arr.Length
      invariant 0 <= index <= i <= arr.Length
      invariant index == CountEvens(arr, 0, i)
      invariant |positions| == index
      invariant forall k :: 0 <= k < index ==> 0 <= k < evenNumbers.Length && evenNumbers[k] % 2 == 0
      invariant forall k :: 0 <= k < index ==> 0 <= k < evenNumbers.Length && 0 <= positions[k] < i && evenNumbers[k] == arr[positions[k]]
      invariant forall k, l :: 0 <= k < l < index ==> positions[k] < positions[l]
    {
      if arr[i] % 2 == 0 {
        assert index < evenNumbers.Length by {
          assert index == CountEvens(arr, 0, i);
          assert evenNumbers.Length == CountEvens(arr, 0, arr.Length);
          if i < arr.Length {
            assert CountEvens(arr, 0, i) <= CountEvens(arr, 0, arr.Length);
          }
        }
        evenNumbers[index] := arr[i];
        positions := positions + [i];
        index := index + 1;
      }
      i := i + 1;
    }
    assert index == evenNumbers.Length by {
      assert index == CountEvens(arr, 0, arr.Length);
      assert evenNumbers.Length == CountEvens(arr, 0, arr.Length);
    }
    assert forall k, l :: 0 <= k < l < evenNumbers.Length ==> positions[k] < positions[l];
  }

vc-postamble: |-


