vc-preamble: |-
  function has_count(v: int, a: array<int>, n: int): int
      reads a  // This allows the function to read from array 'a'
      requires n >= 0 && n <= a.Length
  {
      if n == 0 then 0 else
      (if a[n-1] == v then has_count(v, a, n-1) + 1 else has_count(v, a, n-1))
  }

vc-helpers: |-
  lemma CountLemma(v: int, a: array<int>, n: int)
    requires n >= 0 && n <= a.Length
    ensures has_count(v, a, n) == CountHelper(v, a, 0, n)
  {
    if n == 0 {
      assert has_count(v, a, 0) == 0;
      assert CountHelper(v, a, 0, 0) == 0;
    } else {
      CountLemma(v, a, n-1);
      assert has_count(v, a, n) == (if a[n-1] == v then has_count(v, a, n-1) + 1 else has_count(v, a, n-1));
      assert CountHelper(v, a, 0, n) == (if a[n-1] == v then CountHelper(v, a, 0, n-1) + 1 else CountHelper(v, a, 0, n-1));
    }
  }
  
  function CountHelper(v: int, a: array<int>, start: int, end: int): int
    reads a
    requires 0 <= start <= end <= a.Length
  {
    if start == end then 0 else
    (if a[end-1] == v then CountHelper(v, a, start, end-1) + 1 else CountHelper(v, a, start, end-1))
  }

vc-spec: |-
  // <vc-spec>
  method count (v: int, a: array<int>, n: int) returns (r: int)
      requires n >= 0 && n <= a.Length;
      ensures has_count(v, a, n) == r;
  // </vc-spec>

vc-code: |-
  method Count(v: int, a: array<int>, n: int) returns (r: int)
    requires n >= 0 && n <= a.Length
    ensures has_count(v, a, n) == r
  {
    r := 0;
    var i := 0;
    while i < n
      invariant 0 <= i <= n
      invariant r == has_count(v, a, i)
    {
      if a[i] == v {
        r := r + 1;
      }
      i := i + 1;
    }
    CountLemma(v, a, n);
  }

vc-postamble: |-


