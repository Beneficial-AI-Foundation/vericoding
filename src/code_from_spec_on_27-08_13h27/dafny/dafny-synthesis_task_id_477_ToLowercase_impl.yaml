vc-preamble: |-
  predicate IsUpperCase(c : char)
  {
      65 <= c as int <= 90
  }
  
  predicate IsUpperLowerPair(C : char, c : char)
  {
      (C as int) == (c as int) - 32
  }
  
  function Shift32(c : char) :  char
  {
      ((c as int + 32) % 128) as char
  }

vc-helpers: |-
  lemma Shift32Correctness(c: char)
    requires IsUpperCase(c)
    ensures IsUpperLowerPair(c, Shift32(c))
  {
    calc {
      Shift32(c) as int;
      ((c as int + 32) % 128);
      (c as int + 32);
    }
    assert (c as int + 32) - 32 == c as int;
  }

vc-spec: |-
  // <vc-spec>
  method ToLowercase(s: string) returns (v: string)
      ensures |v| == |s|
      ensures forall i :: 0 <= i < |s| ==>  if IsUpperCase(s[i]) then IsUpperLowerPair(s[i], v[i]) else v[i] == s[i]
  // </vc-spec>

vc-code: |-
  method ToLowercaseImpl(s: string) returns (v: string)
    ensures |v| == |s|
    ensures forall i :: 0 <= i < |s| ==> if IsUpperCase(s[i]) then IsUpperLowerPair(s[i], v[i]) else v[i] == s[i]
  {
    v := "";
    var i := 0;
    while i < |s|
      invariant 0 <= i <= |s|
      invariant |v| == i
      invariant forall k :: 0 <= k < i ==> if IsUpperCase(s[k]) then IsUpperLowerPair(s[k], v[k]) else v[k] == s[k]
    {
      if IsUpperCase(s[i]) {
        Shift32Correctness(s[i]);
        v := v + [Shift32(s[i])];
      } else {
        v := v + [s[i]];
      }
      i := i + 1;
    }
  }

vc-postamble: |-


