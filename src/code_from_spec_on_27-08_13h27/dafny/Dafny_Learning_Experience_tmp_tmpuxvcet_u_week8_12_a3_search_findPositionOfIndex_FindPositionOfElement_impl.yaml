vc-preamble: |-


vc-helpers: |-
  lemma SeqEqualsArray(a: array<int>, s: seq<int>, n: nat)
    requires n == |s|
    requires 0 <= n <= a.Length
    requires forall i :: 0 <= i < n ==> a[i] == s[i]
    ensures s == a[..n]
  {
  }

vc-spec: |-
  // <vc-spec>
  method FindPositionOfElement(a:array<int>,Element:nat,n1:nat,s1:seq<int>) returns (Position:int,Count:nat)
          requires n1 == |s1| && 0 <= n1 <= a.Length
          requires forall i:: 0<= i < |s1| ==> a[i] == s1[i]
          ensures Position == -1 || Position >= 1
          ensures |s1| != 0 && Position >= 1 ==> exists i:: 0 <= i < |s1| && s1[i] == Element
  // </vc-spec>

vc-code: |-
  method FindPositionOfElementImpl(a: array<int>, Element: nat, n1: nat, s1: seq<int>) returns (Position: int, Count: nat)
    requires n1 == |s1| && 0 <= n1 <= a.Length
    requires forall i :: 0 <= i < |s1| ==> a[i] == s1[i]
    ensures Position == -1 || Position >= 1
    ensures |s1| != 0 && Position >= 1 ==> exists i :: 0 <= i < |s1| && s1[i] == Element
  {
    Position := -1;
    Count := 0;
    if n1 == 0 {
      return;
    }
    var i := 0;
    while i < n1
      invariant 0 <= i <= n1
      invariant Position == -1 || Position >= 1
      invariant Position >= 1 ==> exists k :: 0 <= k < i && s1[k] == Element
    {
      if a[i] == Element {
        Position := i + 1;
        Count := Count + 1;
      }
      i := i + 1;
    }
  }

vc-postamble: |-


