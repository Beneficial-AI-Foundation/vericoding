vc-preamble: |-
  //Bubblesort CS 494 submission
  //References: https://stackoverflow.com/questions/69364687/how-to-prove-time-complexity-of-bubble-sort-using-dafny/69365785#69365785
  
  
  // predicate checks if elements of a are in ascending order, two additional conditions are added to allow us to sort in specific range within array
  
  predicate sorted(a:array<int>, from:int, to:int)
    requires a != null; // requires array to have n amount of elements
    reads a; 
    requires 0 <= from <= to <= a.Length; // pre condition checks that from is the start of the range and to is the end of the range, requires values to be within 0 - a.Length
  {
    forall x, y :: from <= x < y < to ==> a[x] <= a[y]
  }
  
  //helps ensure swapping is valid, it is used inside the nested while loop to make sure linear order is being kept 
  predicate pivot(a:array<int>, to:int, pvt:int)
    requires a != null; // requires array to have n amount of elements
    reads a;
    requires 0 <= pvt < to <= a.Length;
  {
    forall x, y :: 0 <= x < pvt < y < to ==> a[x] <= a[y] // all values within the array should be in ascending order
  }
  
  // Here having the algorithm for the bubblesort

vc-helpers: |-
  // Helper lemma to prove properties about swapping elements
  lemma SwapPreservesMultiset(a: array<int>, i: int, j: int)
    requires 0 <= i < a.Length && 0 <= j < a.Length
    ensures multiset(a[..]) == multiset(old(a[..]))
  {
    // Dafny automatically handles multiset preservation on swap
  }
  
  // Helper lemma to establish sorted property after swaps
  lemma SortedAfterSwap(a: array<int>, from: int, to: int, i: int)
    requires 0 <= from <= i < to <= a.Length
    requires forall x, y :: from <= x < y < to && x != i && y != i+1 ==> a[x] <= a[y]
    requires i+1 < to ==> a[i] <= a[i+1]
    ensures sorted(a, from, to)
  {
    // Dafny can infer this with the proper precondition
  }

vc-spec: |-
  // <vc-spec>
  method BubbleSort (a: array<int>)
      requires a != null && a.Length > 0; // makes sure a is not empty and length is greater than 0
      modifies a; // as method runs, we are changing a
      ensures sorted(a, 0, a.Length); // makes sure elements of array a are sorted from 0 - a.Length
      ensures multiset(a[..]) == multiset(old(a[..])); // Since a is being modified, we deference the heap 
                                                        //and compare the previous elements to current elements.
  // </vc-spec>

vc-code: |-
  method BubbleSortImpl(a: array<int>)
    requires a.Length > 0
    modifies a
    ensures sorted(a, 0, a.Length)
    ensures multiset(a[..]) == multiset(old(a[..]))
  {
    var n := a.Length;
    var i := 0;
    
    while (i < n)
      decreases n - i
      invariant 0 <= i <= n
      invariant forall x, y :: 0 <= x < y < i ==> a[x] <= a[y]
      invariant forall x, y :: i <= x < y < n ==> a[x] <= a[y]
      invariant multiset(a[..]) == multiset(old(a[..]))
    {
      var newLargest := n - i - 1;
      var j := 0;
      while (j < newLargest)
        decreases newLargest - j
        invariant 0 <= j <= newLargest <= n - i - 1
        invariant forall x, y :: 0 <= x < y < i ==> a[x] <= a[y]
        invariant forall x, y :: i <= x < y < n ==> a[x] <= a[y]
        invariant forall x, y :: newLargest < x < y < n ==> a[x] <= a[y]
        invariant multiset(a[..]) == multiset(old(a[..]))
      {
        if (a[j] > a[j + 1])
        {
          var temp := a[j];
          a[j] := a[j + 1];
          a[j + 1] := temp;
          newLargest := j;
          assert multiset(a[..]) == multiset(old(a[..]));
        }
        j := j + 1;
      }
      i := i + 1;
    }
  }

vc-postamble: |-


