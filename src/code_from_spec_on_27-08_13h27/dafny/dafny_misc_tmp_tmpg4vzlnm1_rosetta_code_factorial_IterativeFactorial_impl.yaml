vc-preamble: |-
  // recursive definition of factorial
  function Factorial(n: nat): nat {
    if n == 0 then 1 else n * Factorial(n - 1)
  }
  
  // iterative implementation of factorial

vc-helpers: |-
  lemma FactorialLemma(n: nat)
    ensures Factorial(n) >= 1
  {
    if n == 0 {
      assert Factorial(0) == 1;
    } else {
      calc {
        Factorial(n);
        == n * Factorial(n - 1);
        >= n * 1;
        >= 1;
      }
    }
  }

vc-spec: |-
  // <vc-spec>
  method IterativeFactorial(n: nat) returns (result: nat)
    ensures result == Factorial(n)
  // </vc-spec>

vc-code: |-
  method ComputeFactorial(n: nat) returns (result: nat)
    ensures result == Factorial(n)
  {
    result := 1;
    var i := 0;
    while i < n
      invariant 0 <= i <= n
      invariant result == Factorial(i)
    {
      i := i + 1;
      result := result * i;
    }
  }

vc-postamble: |-


