vc-preamble: |-
  predicate sorted(a: array<int>)
     requires a != null
     reads a
  {
     forall j, k :: 0 <= j < k < a.Length ==> a[j] <= a[k]
  }

vc-helpers: |-
  lemma BinarySearchHelper(a: array<int>, value: int, left: int, right: int, mid: int)
    requires a != null && 0 <= left <= mid <= right < a.Length && sorted(a)
    ensures a[mid] < value ==> forall k :: left <= k <= mid ==> a[k] <= a[mid] < value
    ensures a[mid] > value ==> forall k :: mid <= k <= right ==> a[k] >= a[mid] > value
  {
    if a[mid] < value {
      forall k | left <= k <= mid {
        assert a[k] <= a[mid] < value;
      }
    } else if a[mid] > value {
      forall k | mid <= k <= right {
        assert a[k] >= a[mid] > value;
      }
    }
  }

vc-spec: |-
  // <vc-spec>
  method BinarySearch(a: array<int>, value: int) returns (index: int)
     requires a != null && 0 <= a.Length && sorted(a)
     ensures 0 <= index ==> index < a.Length && a[index] == value
     ensures index < 0 ==> forall k :: 0 <= k < a.Length ==> a[k] != value
  // </vc-spec>

vc-code: |-
  method BinarySearchImpl(a: array<int>, value: int) returns (index: int)
    requires a != null && 0 <= a.Length && sorted(a)
    ensures 0 <= index ==> index < a.Length && a[index] == value
    ensures index < 0 ==> forall k :: 0 <= k < a.Length ==> a[k] != value
  {
    var left := 0;
    var right := a.Length - 1;
    while left <= right
      invariant 0 <= left <= a.Length
      invariant 0 <= right < a.Length || right == -1
      invariant forall k :: 0 <= k < left ==> a[k] < value
      invariant forall k :: right < k < a.Length ==> a[k] > value
    {
      var mid := (left + right) / 2;
      if a[mid] == value {
        return mid;
      } else if a[mid] < value {
        BinarySearchHelper(a, value, left, right, mid);
        left := mid + 1;
      } else {
        BinarySearchHelper(a, value, left, right, mid);
        right := mid - 1;
      }
    }
    return -1;
  }

vc-postamble: |-


