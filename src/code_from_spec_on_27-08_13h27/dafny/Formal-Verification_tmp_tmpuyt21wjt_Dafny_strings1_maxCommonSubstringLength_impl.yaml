vc-preamble: |-
  predicate isNotPrefixPred(pre:string, str:string)
  {
      (|pre| > |str|) || 
      pre != str[..|pre|]
  }
  
  
  method isPrefix(pre: string, str: string) returns (res:bool)
      ensures !res <==> isNotPrefixPred(pre,str)
      ensures  res <==> isPrefixPredicate(pre,str)
  {
    assume{:axiom} false;
  }
  
  
  
  predicate isPrefixPredicate(pre: string, str:string)
  {
    |str| >= |pre| && pre <= str
  }
  
  
  predicate isSubstringPredicate (sub: string, str:string)
  {
    |str| >= |sub| && (exists i :: 0 <= i <= |str| && isPrefixPredicate(sub, str[i..]))
  }
  
  method isSubstring(sub: string, str: string) returns (res:bool)
  ensures res == isSubstringPredicate(sub, str)
  {
    assume{:axiom} false;
  }
  
  predicate haveCommonKSubstringPredicate(k: nat, str1: string, str2: string)
  {
    |str1| >= k && |str2| >= k && (exists i :: 0 <= i <= |str1| - k && isSubstringPredicate((str1[i..])[..k], str2))
  }
  
  
  method haveCommonKSubstring(k: nat, str1: string, str2: string) returns (found: bool)
    ensures |str1| < k || |str2| < k ==> !found
    ensures haveCommonKSubstringPredicate(k,str1,str2) == found
  {
    assume{:axiom} false;
  }
  
  
  predicate maxCommonSubstringPredicate(str1: string, str2: string, len:nat)
  {
     forall k :: len < k <= |str1| ==> !haveCommonKSubstringPredicate(k, str1, str2)
  }

vc-helpers: |-
  lemma PrefixImpliesSubstring(pre: string, str: string)
    requires isPrefixPredicate(pre, str)
    ensures isSubstringPredicate(pre, str)
  {
    assert |str| >= |pre| && pre <= str;
    assert isPrefixPredicate(pre, str[0..]);
  }
  
  lemma SubstringAtIndex(sub: string, str: string, i: nat)
    requires 0 <= i <= |str| - |sub|
    requires isPrefixPredicate(sub, str[i..])
    ensures isSubstringPredicate(sub, str)
  {
    assert |str| >= |sub|;
    assert exists j :: 0 <= j <= |str| && isPrefixPredicate(sub, str[j..]);
  }

vc-spec: |-
  // <vc-spec>
  method maxCommonSubstringLength(str1: string, str2: string) returns (len:nat)
  ensures len <= |str1| && len <= |str2|
  ensures len >= 0
  ensures maxCommonSubstringPredicate(str1, str2, len)
  // </vc-spec>

vc-code: |-
  method MaxCommonSubstringLength(str1: string, str2: string) returns (len: nat)
    ensures len <= |str1| && len <= |str2|
    ensures len >= 0
    ensures maxCommonSubstringPredicate(str1, str2, len)
  {
    len := 0;
    var maxPossible := if |str1| < |str2| then |str1| else |str2|;
    
    for k := 1 to maxPossible + 1
      invariant 0 <= len < k
      invariant len <= |str1| && len <= |str2|
      invariant forall m :: len < m < k ==> !haveCommonKSubstringPredicate(m, str1, str2)
    {
      var found: bool;
      found := haveCommonKSubstring(k, str1, str2);
      if found {
        len := k;
      } else {
        break;
      }
    }
    
    return len;
  }

vc-postamble: |-


