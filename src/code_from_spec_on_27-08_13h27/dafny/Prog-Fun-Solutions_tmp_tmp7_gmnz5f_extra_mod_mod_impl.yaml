vc-preamble: |-
  ghost function f(n: nat): nat {
      if n == 0 then 1 
      else if n%2 == 0 then 1 + 2*f(n/2)
      else 2*f(n/2)
  }

vc-helpers: |-
  lemma fProperties(n: nat)
    ensures f(n) >= 1
  {
    if n == 0 {
      assert f(0) == 1;
    } else if n % 2 == 0 {
      calc {
        f(n);
        1 + 2 * f(n / 2);
        >= { fProperties(n / 2); }
        1 + 2 * 1;
        3;
        >= 1;
      }
    } else {
      calc {
        f(n);
        2 * f(n / 2);
        >= { fProperties(n / 2); }
        2 * 1;
        2;
        >= 1;
      }
    }
  }

vc-spec: |-
  // <vc-spec>
  method mod(n:nat) returns (a:nat) 
  ensures a == f(n)
  // </vc-spec>

vc-code: |-
  method ComputeMod(n: nat) returns (a: nat)
    ensures a == f(n)
  {
    if n == 0 {
      a := 1;
    } else if n % 2 == 0 {
      var b := ComputeMod(n / 2);
      a := 1 + 2 * b;
    } else {
      var b := ComputeMod(n / 2);
      a := 2 * b;
    }
  }

vc-postamble: |-


