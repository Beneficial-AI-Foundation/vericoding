vc-preamble: |-
  // ex3errors.dfy in Assignment 1
  // verify that an array of characters is a Palindrome
  /*
  A Palindrome is a word that is the same when written forwards and when written backwards. 
  For example, the word ”refer” is a Palindrome.
  The method PalVerify is supposed to verify whether a word is a Palindrome, 
  where the word is represented as an array of characters. 
  The method was written by a novice software engineer, and contains many errors.
  
     i) Without changing the signature or the code in the while loop, 
        fix the method so that it veriifes the code. Do not add any Dafny predicates or functions: 
        keep the changes to a minimum.
  
     ii) Write a tester method (you may call it anything you like) that verifies that the 
        testcases refer, z and the empty string are Palindromes, and xy and 123421 are not. 
        The tester should not generate any output.
  */

vc-helpers: |-
  method TestPalindrome()
  {
    // Test case 1: "refer" - should be a palindrome
    var test1 := new char[5];
    test1[0] := 'r';
    test1[1] := 'e';
    test1[2] := 'f';
    test1[3] := 'e';
    test1[4] := 'r';
    var res1 := PalVerify(test1);
    assert res1 == true;
  
    // Test case 2: "z" - should be a palindrome
    var test2 := new char[1];
    test2[0] := 'z';
    var res2 := PalVerify(test2);
    assert res2 == true;
  
    // Test case 3: empty string - should be a palindrome
    var test3 := new char[0];
    var res3 := PalVerify(test3);
    assert res3 == true;
  
    // Test case 4: "xy" - should not be a palindrome
    var test4 := new char[2];
    test4[0] := 'x';
    test4[1] := 'y';
    var res4 := PalVerify(test4);
    assert res4 == false;
  
    // Test case 5: "123421" - should not be a palindrome
    var test5 := new char[6];
    test5[0] := '1';
    test5[1] := '2';
    test5[2] := '3';
    test5[3] := '4';
    test5[4] := '2';
    test5[5] := '1';
    var res5 := PalVerify(test5);
    assert res5 == false;
  }

vc-spec: |-
  // <vc-spec>
  method PalVerify(a: array<char>) returns (yn: bool)
  ensures yn == true ==> forall i :: 0 <= i < a.Length/2 ==> a[i] == a[a.Length - i -1]
  ensures yn == false ==> exists i :: 0 <= i < a.Length/2 && a[i] != a[a.Length - i -1]
  ensures forall j :: 0<=j<a.Length ==> a[j] == old(a[j])
  // </vc-spec>

vc-code: |-
  method PalVerify(a: array<char>) returns (yn: bool)
  ensures yn == true ==> forall i :: 0 <= i < a.Length/2 ==> a[i] == a[a.Length - i - 1]
  ensures yn == false ==> exists i :: 0 <= i < a.Length/2 && a[i] != a[a.Length - i - 1]
  ensures forall j :: 0 <= j < a.Length ==> a[j] == old(a[j])
  {
    if a.Length <= 1 {
      return true;
    }
    
    var i := 0;
    while i < a.Length / 2
    invariant 0 <= i <= a.Length / 2
    invariant forall k :: 0 <= k < i ==> a[k] == a[a.Length - 1 - k]
    {
      if a[i] != a[a.Length - 1 - i] {
        return false;
      }
      i := i + 1;
    }
    return true;
  }

vc-postamble: |-


