vc-preamble: |-


vc-helpers: |-
  function IsCommonDivisor(a: int, b: int, d: int): bool
  {
      1 <= d && d <= a && d <= b && a % d == 0 && b % d == 0
  }
  
  lemma SumOfDivisorsLemma(a: int, b: int, d: int, sum: int)
      requires a > 0 && b > 0
      requires d >= 1
      requires forall k :: 1 <= k < d && IsCommonDivisor(a, b, k) ==> sum >= k
      ensures forall k :: 1 <= k < d && IsCommonDivisor(a, b, k) ==> sum >= k
  {
  }

vc-spec: |-
  // <vc-spec>
  method SumOfCommonDivisors(a: int, b: int) returns (sum: int)
      requires a > 0 && b > 0
      ensures sum >= 0
      ensures forall d :: 1 <= d <= a && 1 <= d <= b && a % d == 0 && b % d == 0 ==> sum >= d
  // </vc-spec>

vc-code: |-
  method ComputeSumOfCommonDivisors(a: int, b: int) returns (sum: int)
      requires a > 0 && b > 0
      ensures sum >= 0
      ensures forall d :: 1 <= d <= a && 1 <= d <= b && a % d == 0 && b % d == 0 ==> sum >= d
  {
      sum := 0;
      var d := 1;
      while d <= a && d <= b
          invariant 1 <= d
          invariant sum >= 0
          invariant forall k :: 1 <= k < d && IsCommonDivisor(a, b, k) ==> sum >= k
      {
          if a % d == 0 && b % d == 0 {
              sum := sum + d;
          }
          d := d + 1;
      }
      // Ensure the postcondition holds for all common divisors up to a and b
      assert forall k :: 1 <= k <= a && 1 <= k <= b && a % k == 0 && b % k == 0 ==> sum >= k;
  }

vc-postamble: |-


