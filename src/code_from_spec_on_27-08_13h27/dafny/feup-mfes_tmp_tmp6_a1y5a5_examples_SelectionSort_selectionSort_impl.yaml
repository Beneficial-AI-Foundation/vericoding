vc-preamble: |-
  /* 
  * Formal verification of the selection sort algorithm with Dafny.
  * FEUP, MIEIC, MFES, 2020/21.
  */
  
  // Checks if array 'a' is sorted between positions 'from' (inclusive) and 'to' (exclusive).
  predicate isSorted(a: array<real>, from: nat, to: nat)
    requires 0 <= from <= to <= a.Length
    reads a
  {
      forall i, j :: from <= i < j < to ==> a[i] <= a[j] 
  }
  
  // Sorts array 'a' using the selection sort algorithm.
  
  // Finds the position of a miminum value in non-empty subarray 'a' between positions 
  // 'from' (inclusive) and 'to' (exclusive)
  method findMin(a: array<real>, from: nat, to: nat) returns(index: nat)
    requires 0 <= from < to <= a.Length
    ensures from <= index < to
    ensures forall k :: from <= k < to ==> a[k] >= a[index]
  {
    assume{:axiom} false;
  }

vc-helpers: |-
  // Helper lemma to prove that swapping elements preserves the multiset
  lemma SwapPreservesMultiset(a: array<real>, i: nat, j: nat, oldA: seq<real>)
    requires 0 <= i < a.Length && 0 <= j < a.Length
    requires oldA == a[..]
    ensures multiset(a[..]) == multiset(oldA)
  {
    // Dafny can prove this automatically after swapping
  }
  
  // Helper predicate to check if a prefix of the array is sorted and contains the smallest elements
  predicate isPrefixSorted(a: array<real>, upTo: nat)
    requires 0 <= upTo <= a.Length
    reads a
  {
    isSorted(a, 0, upTo) &&
    forall i, j :: 0 <= i < upTo <= j < a.Length ==> a[i] <= a[j]
  }
  
  // Lemma to help prove that after finding and swapping the minimum, the prefix remains sorted
  lemma PrefixRemainsSorted(a: array<real>, upTo: nat, to: nat, minIdx: nat)
    requires 0 <= upTo < to <= a.Length
    requires upTo <= minIdx < to
    requires isPrefixSorted(a, upTo)
    requires forall k :: upTo <= k < to ==> a[k] >= a[minIdx]
    ensures forall k :: 0 <= k < upTo ==> a[k] <= a[minIdx]
  {
    // Dafny can prove this automatically
  }

vc-spec: |-
  // <vc-spec>
  method selectionSort(a: array<real>)
    modifies a
    ensures isSorted(a, 0, a.Length) 
    ensures multiset(a[..]) == multiset(old(a[..]))
  // </vc-spec>

vc-code: |-
  method SelectionSort(a: array<real>)
    modifies a
    ensures isSorted(a, 0, a.Length)
    ensures multiset(a[..]) == multiset(old(a[..]))
  {
    var n := a.Length;
    var i := 0;
    var oldA := a[..];
    
    while i < n
      invariant 0 <= i <= n
      invariant isPrefixSorted(a, i)
      invariant multiset(a[..]) == multiset(oldA)
    {
      var minIdx := findMin(a, i, n);
      if i != minIdx {
        var temp := a[i];
        a[i] := a[minIdx];
        a[minIdx] := temp;
        SwapPreservesMultiset(a, i, minIdx, a[..]);
      }
      i := i + 1;
    }
  }

vc-postamble: |-


