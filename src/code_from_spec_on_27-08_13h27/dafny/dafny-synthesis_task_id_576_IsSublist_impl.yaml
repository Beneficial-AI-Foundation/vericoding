vc-preamble: |-


vc-helpers: |-
  // No additional helpers or proofs needed for this implementation

vc-spec: |-
  // <vc-spec>
  method IsSublist(sub: seq<int>, main: seq<int>) returns (result: bool)
      ensures true <== (exists i :: 0 <= i <= |main| - |sub| && sub == main[i..i + |sub|])
  // </vc-spec>

vc-code: |-
  method IsSublistImpl(sub: seq<int>, main: seq<int>) returns (result: bool)
      ensures result <==> (exists i :: 0 <= i <= |main| - |sub| && sub == main[i..i + |sub|])
  {
      if |sub| > |main| {
          return false;
      }
      var i := 0;
      while i <= |main| - |sub|
          invariant 0 <= i <= |main| - |sub| + 1
          invariant forall k :: 0 <= k < i ==> 0 <= k <= |main| - |sub| && sub != main[k..k + |sub|]
      {
          if sub == main[i..i + |sub|] {
              return true;
          }
          i := i + 1;
      }
      assert forall k :: 0 <= k < i ==> 0 <= k <= |main| - |sub| && sub != main[k..k + |sub|];
      assert !(exists k :: 0 <= k <= |main| - |sub| && sub == main[k..k + |sub|]);
      return false;
  }

vc-postamble: |-


