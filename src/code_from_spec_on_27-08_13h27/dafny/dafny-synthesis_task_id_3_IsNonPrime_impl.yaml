vc-preamble: |-


vc-helpers: |-
  lemma DivisorExists(n: int, k: int)
      requires n >= 2 && 2 <= k < n && n % k == 0
      ensures exists d :: 2 <= d < n && n % d == 0
  {
  }

vc-spec: |-
  // <vc-spec>
  method IsNonPrime(n: int) returns (result: bool)
      requires n >= 2
      ensures result <==> (exists k :: 2 <= k < n && n % k == 0)
  // </vc-spec>

vc-code: |-
  method IsNonPrimeImpl(n: int) returns (result: bool)
      requires n >= 2
      ensures result <==> (exists k :: 2 <= k < n && n % k == 0)
  {
      result := false;
      var i := 2;
      while i < n
          invariant 2 <= i <= n
          invariant forall k :: 2 <= k < i ==> n % k != 0
          invariant result <==> (exists k :: 2 <= k < i && n % k == 0)
      {
          if n % i == 0
          {
              result := true;
              DivisorExists(n, i);
              return;
          }
          i := i + 1;
      }
      if !result
      {
          assert forall k :: 2 <= k < n ==> n % k != 0;
      }
  }

vc-postamble: |-


