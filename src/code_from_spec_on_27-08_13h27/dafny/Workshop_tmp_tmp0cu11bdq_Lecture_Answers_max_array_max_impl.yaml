vc-preamble: |-
  // http://verifythus.cost-ic0701.org/common-example/arraymax-in-dafny

vc-helpers: |-
  lemma ArrayNotEmptyImpliesExistsMax(a: array<int>)
    requires a.Length > 0
    ensures exists j :: 0 <= j < a.Length && forall k :: 0 <= k < a.Length ==> a[j] >= a[k]
  {
    var maxIdx := 0;
    var i := 1;
    while i < a.Length
      invariant 0 <= i <= a.Length
      invariant 0 <= maxIdx < a.Length
      invariant forall k :: 0 <= k < i ==> a[maxIdx] >= a[k]
    {
      if a[i] > a[maxIdx] {
        maxIdx := i;
      }
      i := i + 1;
    }
    assert forall k :: 0 <= k < a.Length ==> a[maxIdx] >= a[k];
  }

vc-spec: |-
  // <vc-spec>
  method max(a:array<int>) returns(max:int)
      requires a != null;
      ensures forall j :: j >= 0 && j < a.Length ==> max >= a[j]; //max is larger then anything in the array
      ensures a.Length > 0 ==> exists j :: j >= 0 && j < a.Length && max == a[j]; //max is an element in the array
  // </vc-spec>

vc-code: |-
  method FindMax(a: array<int>) returns (max: int)
    ensures forall j :: 0 <= j < a.Length ==> max >= a[j]
    ensures a.Length > 0 ==> exists j :: 0 <= j < a.Length && max == a[j]
  {
    if a.Length == 0 {
      max := 0;
    } else {
      max := a[0];
      var maxIdx := 0;
      var i := 1;
      while i < a.Length
        invariant 0 <= i <= a.Length
        invariant 0 <= maxIdx < a.Length
        invariant max == a[maxIdx]
        invariant forall k :: 0 <= k < i ==> max >= a[k]
      {
        if a[i] > max {
          max := a[i];
          maxIdx := i;
        }
        i := i + 1;
      }
      assert forall k :: 0 <= k < a.Length ==> max >= a[k];
      assert max == a[maxIdx];
    }
  }

vc-postamble: |-


