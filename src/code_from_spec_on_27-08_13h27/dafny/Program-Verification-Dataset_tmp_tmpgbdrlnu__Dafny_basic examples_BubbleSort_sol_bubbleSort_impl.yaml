vc-preamble: |-
  predicate sorted_between (a:array<int>, from:nat, to:nat)
    reads a;
    requires a != null;
    requires from <= to;
    requires to <= a.Length;
  {
    forall i,j :: from <= i < j < to && 0 <= i < j < a.Length ==> a[i] <= a[j]
  }
  
  predicate sorted (a:array<int>)
    reads a;
    requires a!=null;
  {
    sorted_between (a, 0, a.Length)
  }

vc-helpers: |-
  lemma sorted_between_implies_sorted(a: array<int>, from: nat, to: nat)
    requires from <= to
    requires to <= a.Length
    ensures sorted_between(a, from, to) ==> forall i, j :: from <= i < j < to ==> a[i] <= a[j]
  {
  }
  
  lemma sorted_between_update(a: array<int>, from: nat, to: nat, index: nat, value: int)
    requires from <= to <= a.Length
    requires from <= index < to
    ensures sorted_between(a, from, to) ==> (forall k :: from <= k < index ==> a[k] <= value) && (forall k :: index < k < to ==> value <= a[k])
  {
    if sorted_between(a, from, to) {
      forall k | from <= k < index
        ensures a[k] <= value
      {
        if k + 1 < index {
          assert a[k] <= a[k+1];
        }
      }
      forall k | index < k < to
        ensures value <= a[k]
      {
        if index + 1 < k {
          assert a[index+1] <= a[k];
        }
      }
    }
  }
  
  lemma multiset_preservation(a: array<int>, i: nat, j: nat)
    requires 0 <= i < j < a.Length
    ensures multiset(a[..]) == multiset(a[..i] + [a[j]] + a[i+1..j] + [a[i]] + a[j+1..])
  {
    var s1 := a[..];
    var s2 := a[..i] + [a[j]] + a[i+1..j] + [a[i]] + a[j+1..];
    assert |s1| == |s2|;
    calc {
      s2;
      a[..i] + [a[j]] + a[i+1..j] + [a[i]] + a[j+1..];
      { assert a[..i] + a[i..j+1] + a[j+1..] == a[..]; }
      a[..i] + a[i..i+1] + a[i+1..j] + a[j..j+1] + a[j+1..];
      a[..];
    }
  }

vc-spec: |-
  // <vc-spec>
  method bubbleSort (a: array<int>)
    modifies a;
    requires a != null;
    requires a.Length > 0;
    ensures sorted(a);
    ensures multiset(old(a[..])) == multiset(a[..]);
  // </vc-spec>

vc-code: |-
  method bubbleSort(a: array<int>)
    modifies a
    requires a.Length > 0
    ensures sorted(a)
    ensures multiset(old(a[..])) == multiset(a[..])
  {
    var n := a.Length;
    var i := n - 1;
    while (i >= 0)
      invariant 0 <= i < n ==> sorted_between(a, i+1, n)
      invariant 0 <= i+1 <= n
      invariant multiset(old(a[..])) == multiset(a[..])
    {
      var j := 0;
      while (j < i)
        invariant 0 <= j <= i
        invariant 0 <= i < n ==> sorted_between(a, i+1, n)
        invariant multiset(old(a[..])) == multiset(a[..])
        invariant forall k :: 0 <= k < j ==> (k + 1 <= i ==> a[k] <= a[k+1])
      {
        if (j + 1 < a.Length && a[j] > a[j+1])
        {
          var temp := a[j];
          a[j] := a[j+1];
          a[j+1] := temp;
          assert multiset(a[..]) == multiset(old(a[..]));
        }
        j := j + 1;
      }
      i := i - 1;
    }
  }

vc-postamble: |-


