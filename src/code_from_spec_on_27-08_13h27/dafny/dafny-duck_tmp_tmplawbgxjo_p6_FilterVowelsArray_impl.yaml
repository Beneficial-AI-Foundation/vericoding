vc-preamble: |-
  //Given an array of characters, it filters all the vowels. [‘d’,’e’,’l’,’i’,’g’,’h’,’t’]-> [’e’,’i’]
  const vowels: set<char> := {'a', 'e', 'i', 'o', 'u'}
  
  function FilterVowels(xs: seq<char>): seq<char>
  {
      if |xs| == 0 then []
      else if xs[|xs|-1] in vowels then FilterVowels(xs[..|xs|-1]) + [xs[|xs|-1]]
      else FilterVowels(xs[..|xs|-1])
  }

vc-helpers: |-
  function CountVowels(xs: seq<char>): nat
  {
      if |xs| == 0 then 0
      else if xs[|xs|-1] in vowels then CountVowels(xs[..|xs|-1]) + 1
      else CountVowels(xs[..|xs|-1])
  }
  
  lemma FilterVowelsCorrectness(xs: seq<char>)
      ensures |FilterVowels(xs)| == CountVowels(xs)
  {
      if |xs| == 0 {
          assert |FilterVowels(xs)| == 0;
          assert CountVowels(xs) == 0;
      } else {
          FilterVowelsCorrectness(xs[..|xs|-1]);
          if xs[|xs|-1] in vowels {
              assert |FilterVowels(xs)| == |FilterVowels(xs[..|xs|-1])| + 1;
              assert CountVowels(xs) == CountVowels(xs[..|xs|-1]) + 1;
          } else {
              assert |FilterVowels(xs)| == |FilterVowels(xs[..|xs|-1])|;
              assert CountVowels(xs) == CountVowels(xs[..|xs|-1]);
          }
      }
  }
  
  lemma FilterVowelsAppend(xs: seq<char>, i: nat, c: char)
      requires 0 <= i <= |xs|
      ensures FilterVowels(xs[..i] + [c]) == if c in vowels then FilterVowels(xs[..i]) + [c] else FilterVowels(xs[..i])
  {
      if c in vowels {
          assert FilterVowels(xs[..i] + [c]) == FilterVowels(xs[..i]) + [c];
      } else {
          assert FilterVowels(xs[..i] + [c]) == FilterVowels(xs[..i]);
      }
  }

vc-spec: |-
  // <vc-spec>
  method FilterVowelsArray(xs: array<char>) returns (ys: array<char>)
      ensures fresh(ys)
      ensures FilterVowels(xs[..]) == ys[..]
  // </vc-spec>

vc-code: |-
  {
      var vowelCount := 0;
      var i := 0;
      while i < xs.Length
          invariant 0 <= i <= xs.Length
          invariant vowelCount == CountVowels(xs[..i])
      {
          if xs[i] in vowels {
              vowelCount := vowelCount + 1;
          }
          i := i + 1;
      }
      
      var result := new char[vowelCount];
      var resultIndex := 0;
      i := 0;
      while i < xs.Length
          invariant 0 <= i <= xs.Length
          invariant 0 <= resultIndex <= vowelCount
          invariant resultIndex == CountVowels(xs[..i])
          invariant result[..resultIndex] == FilterVowels(xs[..i])
      {
          if xs[i] in vowels {
              assert resultIndex < vowelCount by {
                  assert resultIndex == CountVowels(xs[..i]);
                  assert CountVowels(xs[..i]) <= CountVowels(xs[..xs.Length]);
                  assert vowelCount == CountVowels(xs[..xs.Length]);
              }
              result[resultIndex] := xs[i];
              resultIndex := resultIndex + 1;
              assert result[..resultIndex] == FilterVowels(xs[..i+1]) by {
                  assert result[..resultIndex-1] == FilterVowels(xs[..i]);
                  assert result[resultIndex-1] == xs[i];
                  FilterVowelsAppend(xs[..i], i, xs[i]);
              }
          } else {
              assert result[..resultIndex] == FilterVowels(xs[..i+1]) by {
                  assert result[..resultIndex] == FilterVowels(xs[..i]);
                  FilterVowelsAppend(xs[..i], i, xs[i]);
              }
          }
          i := i + 1;
      }
      
      FilterVowelsCorrectness(xs[..]);
      ys := result;
  }

vc-postamble: |-


