vc-preamble: |-
  /**
  Consider cellular automata: a row of cells is repeatedly updated according to a rule. In this exercise I dabbled with,
  each cell has the value either false or true. Each cell's next state depends only on the immediate neighbours, in the 
  case where the cell is at the edges of the row, the inexistent neighbours are replaced by "false". The automaton table 
  will contain the initial row, plus a row for each number of steps.
   */
  class Automaton {
  
  /**
  This method computes the automaton.
  Provide the initial row: init, the rule and the desired number of steps
   */
  
  }

vc-helpers: |-
  // Helper lemma to ensure sequence properties during updates
  lemma SeqUpdatePreservesLength<T>(s: seq<T>, i: int, v: T)
    requires 0 <= i < |s|
    ensures |s[i := v]| == |s|
  {
  }

vc-spec: |-
  // <vc-spec>
  method ExecuteAutomaton(init: seq<bool>, rule: (bool, bool, bool) -> bool, steps: nat)
    returns (table: seq<seq<bool>>)
    // we need the initial row to have the length bigger or equal to two
    requires |init| >= 2
    // after computation the automaton is made of the initial row plus a row for each of the steps
    ensures |table| == 1 + steps
    // the automaton must have the initial row at the top
    ensures table[0] == init;
    // all rows in the automaton must be the same length
    ensures forall i | 0 <= i < |table| :: |table[i]| == |init|
    // all the middle row elements (with existing neighbours) after a step, will be equal to the rule applied on the element in the previous state
    // and its neigbours
    ensures forall i | 0 <= i < |table| - 1 ::
              forall j | 1 <= j <= |table[i]| - 2 :: table[i + 1][j] == rule(table[i][j - 1], table[i][j], table[i][j + 1])
    // the corner row elements (with non-existing neighbours) after a step, will be equal to the rule applied on the element in the previous state,
    // its neighbour and false
    ensures forall i | 0 <= i < |table| - 1 ::
              table[i + 1][0] == rule(false, table[i][0], table[i][1]) && table[i + 1][|table[i]| - 1] == rule(table[i][|table[i]| - 2], table[i][|table[i]| - 1], false)
  // </vc-spec>

vc-code: |-
  method ComputeAutomaton(init: seq<bool>, rule: (bool, bool, bool) -> bool, steps: nat)
    returns (table: seq<seq<bool>>)
    requires |init| >= 2
    ensures |table| == 1 + steps
    ensures table[0] == init
    ensures forall i | 0 <= i < |table| :: |table[i]| == |init|
    ensures forall i | 0 <= i < |table| - 1 ::
              forall j | 1 <= j < |table[i]| - 1 :: table[i + 1][j] == rule(table[i][j - 1], table[i][j], table[i][j + 1])
    ensures forall i | 0 <= i < |table| - 1 ::
              table[i + 1][0] == rule(false, table[i][0], table[i][1]) && table[i + 1][|table[i]| - 1] == rule(table[i][|table[i]| - 2], table[i][|table[i]| - 1], false)
  {
    table := [init];
    var currentStep := 0;
  
    while currentStep < steps
      invariant 0 <= currentStep <= steps
      invariant |table| == 1 + currentStep
      invariant table[0] == init
      invariant forall i | 0 <= i < |table| :: |table[i]| == |init|
      invariant forall i | 0 <= i < |table| - 1 ::
                  forall j | 1 <= j < |table[i]| - 1 :: table[i + 1][j] == rule(table[i][j - 1], table[i][j], table[i][j + 1])
      invariant forall i | 0 <= i < |table| - 1 ::
                  table[i + 1][0] == rule(false, table[i][0], table[i][1]) && 
                  table[i + 1][|table[i]| - 1] == rule(table[i][|table[i]| - 2], table[i][|table[i]| - 1], false)
    {
      var prevRow := table[currentStep];
      var newRow := new bool[|init|];
      
      // Compute the first cell
      newRow[0] := rule(false, prevRow[0], prevRow[1]);
      
      // Compute the middle cells
      var j := 1;
      while j < |init| - 1
        invariant 1 <= j <= |init| - 1
        invariant forall k | 0 <= k < j :: newRow[k] == rule(if k == 0 then false else prevRow[k-1], prevRow[k], if k == |init|-1 then false else prevRow[k+1])
      {
        newRow[j] := rule(prevRow[j-1], prevRow[j], prevRow[j+1]);
        j := j + 1;
      }
      
      // Compute the last cell
      if |init| >= 2 {
        newRow[|init| - 1] := rule(prevRow[|init| - 2], prevRow[|init| - 1], false);
      }
      
      table := table + [newRow[..]];
      currentStep := currentStep + 1;
    }
  }

vc-postamble: |-


