vc-preamble: |-


vc-helpers: |-
  lemma RotateRightLemma(l: seq<int>, n: int, i: int)
    requires n >= 0
    requires 0 <= i < |l|
    ensures (i - n + |l|) % |l| == (i - (n % |l|) + |l|) % |l|
  {
    var m := n % |l|;
    assert n == m + (n / |l|) * |l|;
    calc {
      i - n + |l|;
      i - (m + (n / |l|) * |l|) + |l|;
      i - m - (n / |l|) * |l| + |l|;
      i - m + |l| - (n / |l|) * |l|;
      i - m + |l| * (1 - n / |l|);
    }
    assert (i - m + |l|) % |l| == (i - m + |l| * (1 - n / |l|)) % |l|;
  }

vc-spec: |-
  // <vc-spec>
  method RotateRight(l: seq<int>, n: int) returns (r: seq<int>)
      requires n >= 0
      ensures |r| == |l|
      ensures forall i :: 0 <= i < |l| ==> r[i] == l[(i - n + |l|) % |l|]
  // </vc-spec>

vc-code: |-
  method RotateRightImpl(l: seq<int>, n: int) returns (r: seq<int>)
    requires n >= 0
    ensures |r| == |l|
    ensures forall i :: 0 <= i < |l| ==> r[i] == l[(i - n + |l|) % |l|]
  {
    if |l| == 0 {
      return [];
    }
    
    var normalizedN := n % |l|;
    var splitIndex := |l| - normalizedN;
    r := l[splitIndex..] + l[..splitIndex];
    
    forall i | 0 <= i < |l| 
    ensures r[i] == l[(i - n + |l|) % |l|]
    {
      RotateRightLemma(l, n, i);
      var idx := (i - n + |l|) % |l|;
      if i < normalizedN {
        assert r[i] == l[splitIndex + i];
        assert splitIndex + i == |l| - normalizedN + i;
        assert (|l| - normalizedN + i) % |l| == (i - normalizedN + |l|) % |l|;
        assert idx == (i - normalizedN + |l|) % |l|;
      } else {
        assert r[i] == l[i - normalizedN];
        assert (i - normalizedN) % |l| == (i - normalizedN + |l|) % |l|;
        assert idx == (i - normalizedN + |l|) % |l|;
      }
    }
  }

vc-postamble: |-


