vc-preamble: |-
  // Author of question: Snorri Agnarsson
  // Permalink of question: https://rise4fun.com/Dafny/CGB1z
  
  // Authors of solution:   Alexander Guðmundsson
  // Permalink of solution: https://rise4fun.com/Dafny/VnB5
  
  // Use the command
  //   dafny H2-skeleton.dfy
  // or
  //   compile H2-skeleton.dfy
  // to compile the file.
  // Or use the web page rise4fun.com/dafny.
  
  // When you have solved the problem put
  // the solution on the Dafny web page,
  // generate a permalink and put it in
  // this file.

vc-helpers: |-
  // Helper lemma to assist with verification if needed
  lemma Monotonicity(a: seq<real>, i: int, j: int)
    requires 0 <= i <= j <= |a|
    requires forall p, q :: i <= p < q < j ==> a[p] >= a[q]
    ensures forall p, q :: i <= p < q < j ==> a[p] >= a[q]
  {
    // This lemma is trivial as it just restates the precondition, but can be useful for clarity
  }

vc-spec: |-
  // <vc-spec>
  method SearchRecursive( a: seq<real>, i: int, j: int, x: real ) returns ( k: int )
      decreases j-i;
      requires 0 <= i <= j <= |a|;
      requires forall p, q :: i <= p < q < j ==> a[p] >= a[q];
      ensures i <= k <= j
      ensures forall r | i <= r < k :: a[r] >= x;
      ensures forall r | k <= r < j :: a[r] < x;
  // </vc-spec>

vc-code: |-
  method SearchRecursive(a: seq<real>, i: int, j: int, x: real) returns (k: int)
    decreases j - i
    requires 0 <= i <= j <= |a|
    requires forall p, q :: i <= p < q < j ==> a[p] >= a[q]
    ensures i <= k <= j
    ensures forall r | i <= r < k :: a[r] >= x
    ensures forall r | k <= r < j :: a[r] < x
  {
    if i == j {
      return i;
    }
    var m := (i + j) / 2;
    if a[m] >= x {
      var result := SearchRecursive(a, i, m, x);
      assert forall r | i <= r < result :: a[r] >= x;
      assert forall r | result <= r < m :: a[r] < x;
      assert forall r | m <= r < j :: a[r] < x by {
        if m <= r < j {
          assert a[m] >= a[r] by {
            assert forall p, q :: i <= p < q < j ==> a[p] >= a[q];
          }
          assert a[m] >= x;
          assert a[r] < x;
        }
      }
      return result;
    } else {
      var result := SearchRecursive(a, m + 1, j, x);
      assert forall r | m + 1 <= r < result :: a[r] >= x;
      assert forall r | result <= r < j :: a[r] < x;
      assert forall r | i <= r < m + 1 :: a[r] >= x by {
        if i <= r < m + 1 {
          assert a[r] >= a[m] by {
            assert forall p, q :: i <= p < q < j ==> a[p] >= a[q];
          }
          assert a[m] < x;
          assert a[r] >= x;
        }
      }
      return result;
    }
  }

vc-postamble: |-
  // Ef eftirfarandi fall er ekki samþykkt þá eru
  // föllin ekki að haga sér rétt að mati Dafny.

