vc-preamble: |-
  function fib(n : nat) : nat
  {
    if (n==0) then 1 else
    if (n==1) then 1 else fib(n-1)+fib(n-2)
  }
  
  
  // 2.
  datatype List<T> = Nil | Cons(head: T, tail: List<T>)
  
  function add(l : List<int>) : int {
    match l
    case Nil => 0
    case Cons(x,xs) => x + add(xs)
  }
  
  
  // 3.
  
  // 5.
  
  // 6
  function sum(n: nat) : nat
  {
    if (n == 0) then 0 else n + sum(n-1)
  }

vc-helpers: |-
  lemma SumBackwardsCorrect(n: nat, acc: nat)
    ensures sum(n) + acc == sum(n + acc)
  {
    if (n == 0) {
      assert sum(0) + acc == 0 + acc;
      assert sum(0 + acc) == acc;
    } else {
      calc {
        sum(n) + acc;
        (n + sum(n-1)) + acc;
        n + (sum(n-1) + acc);
        { SumBackwardsCorrect(n-1, acc); }
        n + sum((n-1) + acc);
        sum(n + acc);
      }
    }
  }
  
  lemma SumDifference(n: nat, i: nat)
    requires i <= n
    ensures sum(n) - sum(i) == sum(n - i)
  {
    if (i == n) {
      assert sum(n) - sum(n) == 0;
      assert sum(n - n) == sum(0) == 0;
    } else if (i == 0) {
      assert sum(n) - sum(0) == sum(n);
      assert sum(n - 0) == sum(n);
    } else {
      calc {
        sum(n) - sum(i);
        sum(n - i + i) - sum(i);
        { SumBackwardsCorrect(n - i, i); }
        sum(n - i) + sum(i) - sum(i);
        sum(n - i);
      }
    }
  }

vc-spec: |-
  // <vc-spec>
  method sumBackwards(n: nat) returns (r: nat)
    ensures r == sum(n)
  // </vc-spec>

vc-code: |-
  method SumBackwardsImpl(n: nat) returns (r: nat)
    ensures r == sum(n)
  {
    var acc := 0;
    var i := n;
    while (i > 0)
      invariant acc == sum(n - i)
      invariant 0 <= i <= n
      decreases i
    {
      acc := acc + i;
      i := i - 1;
      if (i > 0) {
        calc {
          acc;
          sum(n - (i + 1)) + (i + 1);
          { SumBackwardsCorrect(n - (i + 1), i + 1); }
          sum((n - (i + 1)) + (i + 1));
          sum(n - i);
        }
      } else {
        calc {
          acc;
          sum(n - 1) + n;
          { SumBackwardsCorrect(n - 1, n); }
          sum((n - 1) + n);
          sum(n + (n - 1));
          { SumBackwardsCorrect(n, n - 1); }
          sum(n) + sum(n - 1);
        }
        calc {
          acc;
          sum(n - 1) + n;
          { SumBackwardsCorrect(n - 1, n); }
          sum(n);
        }
      }
    }
    assert i == 0;
    r := acc;
  }

vc-postamble: |-


