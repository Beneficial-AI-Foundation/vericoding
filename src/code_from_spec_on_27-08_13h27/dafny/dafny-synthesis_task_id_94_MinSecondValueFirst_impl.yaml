vc-preamble: |-


vc-helpers: |-
  // Helper lemma to assist in proving properties about sequences and their elements
  lemma MinSecondValueProperty(s: array<seq<int>>, i: int, minSecond: int)
    requires s.Length > 0
    requires 0 <= i < s.Length
    requires forall k :: 0 <= k < s.Length ==> |s[k]| >= 2
    requires minSecond == s[i][1]
    requires forall j :: 0 <= j < s.Length ==> minSecond <= s[j][1]
    ensures exists k :: 0 <= k < s.Length && s[k][0] == s[i][0] && s[k][1] == minSecond
  {
    // The index i satisfies the condition
  }

vc-spec: |-
  // <vc-spec>
  method MinSecondValueFirst(s: array<seq<int>>) returns (firstOfMinSecond: int)
      requires s.Length > 0
      requires forall i :: 0 <= i < s.Length ==> |s[i]| >= 2
      ensures exists i :: 0 <= i < s.Length && firstOfMinSecond == s[i][0] && 
          (forall j :: 0 <= j < s.Length ==> s[i][1] <= s[j][1])
  // </vc-spec>

vc-code: |-
  method MinSecondValueFirstImpl(s: array<seq<int>>) returns (firstOfMinSecond: int)
    requires s.Length > 0
    requires forall i :: 0 <= i < s.Length ==> |s[i]| >= 2
    ensures exists i :: 0 <= i < s.Length && firstOfMinSecond == s[i][0] && 
        (forall j :: 0 <= j < s.Length ==> s[i][1] <= s[j][1])
  {
    var minSecond := s[0][1];
    var minIndex := 0;
    
    for i := 1 to s.Length
      invariant 0 <= minIndex < s.Length
      invariant forall k :: 0 <= k < i ==> minSecond <= s[k][1]
      invariant minSecond == s[minIndex][1]
    {
      if s[i][1] < minSecond {
        minSecond := s[i][1];
        minIndex := i;
      }
    }
    
    firstOfMinSecond := s[minIndex][0];
    
    // Assert the postcondition holds
    assert forall j :: 0 <= j < s.Length ==> s[minIndex][1] <= s[j][1];
  }

vc-postamble: |-


