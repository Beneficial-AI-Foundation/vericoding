vc-preamble: |-
  //Problem01
  //a)
  
  //b)
  //Problem04
  
  method FindMin(a: array<int>, lo: nat) returns (minIdx: nat)
      requires a != null && a.Length > 0 && lo < a.Length
      ensures lo <= minIdx < a.Length
      ensures forall x :: lo <= x < a.Length ==> a[minIdx] <= a[x]
  {
    assume{:axiom} false;
  }
  
  //Problem02
  ghost predicate sorted(a:seq<int>)
  {
      forall i | 0 < i < |a| :: a[i-1] <= a[i]     
  }

vc-helpers: |-
  lemma MinIndexProperty(a: array<int>, lo: nat, minIdx: nat)
    requires a != null && a.Length > 0 && lo < a.Length
    requires lo <= minIdx < a.Length
    requires forall x :: lo <= x < a.Length ==> a[minIdx] <= a[x]
    ensures forall x :: lo <= x < a.Length ==> a[minIdx] <= a[x]
  {
  }

vc-spec: |-
  // <vc-spec>
  method selectionSort(a: array<int>)
      modifies a
      //ensures multiset(a[..]) == multiset(old(a[..]))
      //ensures sorted(a[..])
  // </vc-spec>

vc-code: |-
  method SelectionSort(a: array<int>)
    modifies a
    ensures multiset(a[..]) == multiset(old(a[..]))
    ensures sorted(a[..])
  {
    var n := a.Length;
    var i := 0;
    
    while i < n
      invariant 0 <= i <= n
      invariant forall k :: 0 <= k < i ==> forall m :: k < m < n ==> a[k] <= a[m]
      invariant sorted(a[..i])
      invariant multiset(a[..]) == multiset(old(a[..]))
    {
      var minIdx := i;
      var j := i + 1;
      
      while j < n
        invariant i <= minIdx < n
        invariant i < j <= n
        invariant forall k :: i <= k < j ==> a[minIdx] <= a[k]
        invariant multiset(a[..]) == multiset(old(a[..]))
      {
        if a[j] < a[minIdx] {
          minIdx := j;
        }
        j := j + 1;
      }
      
      if minIdx != i {
        var temp := a[i];
        a[i] := a[minIdx];
        a[minIdx] := temp;
      }
      
      i := i + 1;
    }
  }

vc-postamble: |-
  //Problem03

