vc-preamble: |-


vc-helpers: |-
  lemma TwoSumExists(nums: array<int>, target: int, i: int, j: int)
    requires nums.Length > 1
    requires 0 <= i < j < nums.Length
    requires nums[i] + nums[j] == target
    ensures exists ii, jj :: 0 <= ii < jj < nums.Length && nums[ii] + nums[jj] == target
  {
  }

vc-spec: |-
  // <vc-spec>
  method twoSum(nums: array<int>, target: int) returns (i: int, j: int)
    requires nums.Length > 1
    requires exists i,j::0 <= i < j < nums.Length &&  nums[i] + nums[j] == target
    ensures 0 <= i < j < nums.Length && nums[i] + nums[j] == target
    ensures forall ii,jj:: (0 <= ii < i && ii < jj < nums.Length)  ==> nums[ii] + nums[jj] != target
    ensures forall jj:: i < jj < j ==> nums[i] + nums[jj] != target
  // </vc-spec>

vc-code: |-
  method TwoSumImpl(nums: array<int>, target: int) returns (i: int, j: int)
    requires nums.Length > 1
    requires exists i,j :: 0 <= i < j < nums.Length && nums[i] + nums[j] == target
    ensures 0 <= i < j < nums.Length && nums[i] + nums[j] == target
    ensures forall ii,jj :: (0 <= ii < i && ii < jj < nums.Length) ==> nums[ii] + nums[jj] != target
    ensures forall jj :: i < jj < j ==> nums[i] + nums[jj] != target
  {
    i := 0;
    while i < nums.Length - 1
      invariant 0 <= i < nums.Length
      invariant forall ii, jj :: (0 <= ii < i && ii < jj < nums.Length) ==> nums[ii] + nums[jj] != target
      decreases nums.Length - i
    {
      j := i + 1;
      while j < nums.Length
        invariant 0 <= i < j <= nums.Length
        invariant forall ii, jj :: (0 <= ii < i && ii < jj < nums.Length) ==> nums[ii] + nums[jj] != target
        invariant forall jj :: i < jj < j ==> nums[i] + nums[jj] != target
        decreases nums.Length - j
      {
        if nums[i] + nums[j] == target {
          return i, j;
        }
        j := j + 1;
      }
      i := i + 1;
    }
  }

vc-postamble: |-


