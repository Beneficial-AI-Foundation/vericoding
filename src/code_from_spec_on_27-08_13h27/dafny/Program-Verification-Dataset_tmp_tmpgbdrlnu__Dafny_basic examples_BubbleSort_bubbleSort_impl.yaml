vc-preamble: |-
  predicate sorted(a:array<int>, from:int, to:int)
    requires a != null;
    reads a;
    requires 0 <= from <= to <= a.Length;
  {
    forall u, v :: from <= u < v < to ==> a[u] <= a[v]
  }
  
  predicate pivot(a:array<int>, to:int, pvt:int)
    requires a != null;
    reads a;
    requires 0 <= pvt < to <= a.Length;
  {
    forall u, v :: 0 <= u < pvt < v < to ==> a[u] <= a[v]
  }

vc-helpers: |-
  lemma BubbleSortPreservesMultiset(a: array<int>, i: int, j: int)
    requires 0 <= i < j < a.Length
    ensures multiset(a[..]) == multiset(old(a[..]))
  {
    // Dafny automatically handles multiset preservation for array swaps
  }

vc-spec: |-
  // <vc-spec>
  method bubbleSort (a: array<int>)
    requires a != null && a.Length > 0;
    modifies a;
    ensures sorted(a, 0, a.Length);
    ensures multiset(a[..]) == multiset(old(a[..]));
  // </vc-spec>

vc-code: |-
  method bubbleSort(a: array<int>)
    requires a.Length > 0
    modifies a
    ensures sorted(a, 0, a.Length)
    ensures multiset(a[..]) == multiset(old(a[..]))
  {
    var n := a.Length;
    var i := 0;
    while i < n
      invariant 0 <= i <= n
      invariant sorted(a, 0, i)
      invariant pivot(a, n, i)
      invariant multiset(a[..]) == multiset(old(a[..]))
    {
      var j := 0;
      while j < n - i - 1
        invariant 0 <= j < n - i
        invariant sorted(a, 0, i)
        invariant pivot(a, n - j - 1, i)
        invariant multiset(a[..]) == multiset(old(a[..]))
      {
        if a[j] > a[j + 1]
        {
          var temp := a[j];
          a[j] := a[j + 1];
          a[j + 1] := temp;
        }
        j := j + 1;
      }
      i := i + 1;
    }
  }

vc-postamble: |-


