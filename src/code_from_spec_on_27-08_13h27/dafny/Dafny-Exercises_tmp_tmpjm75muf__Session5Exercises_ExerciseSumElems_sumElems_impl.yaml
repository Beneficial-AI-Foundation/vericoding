vc-preamble: |-
  function SumR(s:seq<int>):int
  decreases s
  {
      if (s==[]) then 0
      else SumR(s[..|s|-1])+s[|s|-1]
  }
  
  function SumL(s:seq<int>):int
  decreases s
  {
      if (s==[]) then 0
      else s[0]+SumL(s[1..])
  }
  
  
  function SumV(v:array<int>,c:int,f:int):int
    requires 0<=c<=f<=v.Length
    reads v
    {
      SumR(v[c..f])
    }

vc-helpers: |-
  lemma SumL_Equals_SumR(s: seq<int>)
    ensures SumL(s) == SumR(s)
    decreases s
  {
    if s == [] {
      assert SumL(s) == 0;
      assert SumR(s) == 0;
    } else {
      SumL_Equals_SumR(s[1..]);
      assert SumL(s) == s[0] + SumL(s[1..]);
      assert SumR(s) == SumR(s[..|s|-1]) + s[|s|-1];
      assert s[..|s|-1] == s[0..|s|-1];
      assert SumL(s[1..]) == SumR(s[1..]);
      assert SumR(s[..|s|-1]) == SumL(s[1..]);
      assert SumR(s) == SumL(s[1..]) + s[|s|-1];
      assert SumL(s) == s[0] + SumL(s[1..]);
      assert SumR(s) == s[0] + SumL(s[1..]);
      assert SumL(s) == SumR(s);
    }
  }
  
  lemma SumL_Append(s: seq<int>, x: int)
    ensures SumL(s + [x]) == SumL(s) + x
  {
    if s == [] {
      assert s + [x] == [x];
      assert SumL(s + [x]) == x;
      assert SumL(s) + x == 0 + x;
    } else {
      SumL_Append(s[1..], x);
      assert SumL(s + [x]) == s[0] + SumL(s[1..] + [x]);
      assert SumL(s[1..] + [x]) == SumL(s[1..]) + x;
      assert SumL(s + [x]) == s[0] + SumL(s[1..]) + x;
      assert SumL(s) + x == (s[0] + SumL(s[1..])) + x;
    }
  }
  
  lemma SumR_Append(s: seq<int>, x: int)
    ensures SumR(s + [x]) == SumR(s) + x
  {
    if s == [] {
      assert s + [x] == [x];
      assert SumR(s + [x]) == x;
      assert SumR(s) + x == 0 + x;
    } else {
      SumR_Append(s[..|s|-1], s[|s|-1]);
      assert SumR(s) == SumR(s[..|s|-1]) + s[|s|-1];
      assert s + [x] == s[..|s|-1] + [s[|s|-1]] + [x];
      assert SumR(s + [x]) == SumR((s[..|s|-1] + [s[|s|-1]]) + [x]);
      assert SumR((s[..|s|-1] + [s[|s|-1]]) + [x]) == SumR(s[..|s|-1] + [s[|s|-1]]) + x;
      assert SumR(s[..|s|-1] + [s[|s|-1]]) == SumR(s[..|s|-1]) + s[|s|-1];
      assert SumR(s + [x]) == SumR(s) + x;
    }
  }

vc-spec: |-
  // <vc-spec>
  method sumElems(v:array<int>) returns (sum:int)
  //ensures sum==SumL(v[0..v.Length])
  ensures sum==SumR(v[..])
  //ensures sum==SumV(v,0,v.Length)
  // </vc-spec>

vc-code: |-
  method SumElements(v: array<int>) returns (sum: int)
    ensures sum == SumL(v[0..v.Length])
    ensures sum == SumR(v[..])
  {
    sum := 0;
    var i := 0;
    while i < v.Length
      invariant 0 <= i <= v.Length
      invariant sum == SumL(v[0..i])
      invariant sum == SumR(v[0..i])
    {
      sum := sum + v[i];
      i := i + 1;
      if i > 0 {
        SumL_Append(v[0..i-1], v[i-1]);
        assert SumL(v[0..i]) == SumL(v[0..i-1] + [v[i-1]]);
        assert SumL(v[0..i]) == SumL(v[0..i-1]) + v[i-1];
        assert sum == SumL(v[0..i-1]) + v[i-1];
        assert sum == SumL(v[0..i]);
        
        SumR_Append(v[0..i-1], v[i-1]);
        assert SumR(v[0..i]) == SumR(v[0..i-1] + [v[i-1]]);
        assert SumR(v[0..i]) == SumR(v[0..i-1]) + v[i-1];
        assert sum == SumR(v[0..i-1]) + v[i-1];
        assert sum == SumR(v[0..i]);
      }
    }
    assert v[0..v.Length] == v[..];
  }

vc-postamble: |-


