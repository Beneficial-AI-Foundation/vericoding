vc-preamble: |-
  function fib(n: nat): nat
  decreases n
  {
     if n == 0 then 0 else
     if n == 1 then 1 else
                    fib(n - 1) + fib(n - 2)
  }

vc-helpers: |-
  lemma FibSum(n: nat)
    ensures fib(n) >= 0
    decreases n
  {
    if n == 0 {
      assert fib(0) == 0;
    } else if n == 1 {
      assert fib(1) == 1;
    } else {
      FibSum(n-1);
      FibSum(n-2);
      assert fib(n) == fib(n-1) + fib(n-2);
    }
  }

vc-spec: |-
  // <vc-spec>
  method fibonacci1(n:nat) returns (f:nat)
  ensures f==fib(n)
  // </vc-spec>

vc-code: |-
  method Fibonacci1(n: nat) returns (f: nat)
    ensures f == fib(n)
  {
    if n == 0 {
      f := 0;
    } else if n == 1 {
      f := 1;
    } else {
      var a := 0;
      var b := 1;
      var i := 0;
      while i < n
        invariant 0 <= i <= n
        invariant a == fib(i)
        invariant b == fib(i+1)
        decreases n - i
      {
        var temp := b;
        b := a + b;
        a := temp;
        i := i + 1;
      }
      f := a;
    }
  }

vc-postamble: |-


