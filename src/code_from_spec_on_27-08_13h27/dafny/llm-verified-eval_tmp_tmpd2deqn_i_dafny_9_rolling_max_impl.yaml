vc-preamble: |-
  function isMax(m: int, numbers: seq<int>): bool
  {
      m in numbers &&
      forall i :: 0 <= i < |numbers| ==> numbers[i] <= m
  
  }

vc-helpers: |-
  lemma MaxInPrefix(numbers: seq<int>, i: int)
    requires 0 <= i < |numbers|
    ensures exists m :: m in numbers[0..(i+1)] && forall k :: 0 <= k <= i ==> numbers[k] <= m
  {
    var prefix := numbers[0..(i+1)];
    var max_val := numbers[0];
    var j := 0;
    while j < i
      invariant 0 <= j <= i
      invariant forall k :: 0 <= k <= j ==> numbers[k] <= max_val
      invariant max_val in numbers[0..(j+1)]
    {
      if numbers[j+1] > max_val {
        max_val := numbers[j+1];
      }
      j := j + 1;
    }
  }

vc-spec: |-
  // <vc-spec>
  method rolling_max(numbers: seq<int>) returns (result: seq<int>)
  requires numbers != []
  ensures |result| == |numbers|
  ensures forall i :: 0 < i < |result| ==> isMax(result[i], numbers[0..(i+1)])
  // </vc-spec>

vc-code: |-
  method ComputeRollingMax(numbers: seq<int>) returns (result: seq<int>)
    requires numbers != []
    ensures |result| == |numbers|
    ensures forall i :: 0 <= i < |result| ==> isMax(result[i], numbers[0..(i+1)])
  {
    result := [];
    var current_max := numbers[0];
    result := result + [current_max];
    
    for i := 1 to |numbers|
      invariant |result| == i
      invariant forall k :: 0 <= k < i ==> isMax(result[k], numbers[0..(k+1)])
      invariant current_max == result[i-1]
    {
      if numbers[i] > current_max {
        current_max := numbers[i];
      }
      result := result + [current_max];
    }
  }

vc-postamble: |-


