vc-preamble: |-
  function countTo( a:array<bool>, n:int ) : int
    requires a != null;
    requires 0 <= n && n <= a.Length;
    decreases n;
    reads a;
  {
    if (n == 0) then 0 else countTo(a, n-1) + (if a[n-1] then 1 else 0)
  }

vc-helpers: |-
  // Helper lemma to prove the correctness of the loop
  lemma CountTrueLemma(a: array<bool>, i: int, count: int)
    requires 0 <= i <= a.Length
    requires count == countTo(a, i)
    ensures countTo(a, i) == count
    decreases i
  {
    // No additional proof needed as the requirement ensures the equality
  }

vc-spec: |-
  // <vc-spec>
  method CountTrue(a: array<bool>) returns (result: int)
      requires a != null
      ensures result == countTo(a, a.Length)
  // </vc-spec>

vc-code: |-
  method CountTrueImpl(a: array<bool>) returns (result: int)
    ensures result == countTo(a, a.Length)
  {
    result := 0;
    var i := 0;
    while (i < a.Length)
      invariant 0 <= i <= a.Length
      invariant result == countTo(a, i)
    {
      if (a[i]) {
        result := result + 1;
      }
      i := i + 1;
    }
    assert i == a.Length;
    assert result == countTo(a, a.Length);
  }

vc-postamble: |-


