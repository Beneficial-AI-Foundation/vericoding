vc-preamble: |-


vc-helpers: |-
  // No additional helpers or proofs needed for this implementation

vc-spec: |-
  // <vc-spec>
  method ReverseUptoK(s: array<int>, k: int)
      modifies s
      requires 2 <= k <= s.Length
      ensures forall i :: 0 <= i < k ==> s[i] == old(s[k - 1 - i])
      ensures forall i :: k <= i < s.Length ==> s[i] == old(s[i])
  // </vc-spec>

vc-code: |-
  method ReverseUptoKImpl(s: array<int>, k: int)
      modifies s
      requires 2 <= k <= s.Length
      ensures forall i :: 0 <= i < k ==> s[i] == old(s[k - 1 - i])
      ensures forall i :: k <= i < s.Length ==> s[i] == old(s[i])
  {
      var i := 0;
      while i < k / 2
          invariant 0 <= i <= k / 2
          invariant forall j :: 0 <= j < i ==> s[j] == old(s[k - 1 - j])
          invariant forall j :: i <= j < k - i ==> s[j] == old(s[j])
          invariant forall j :: k - i <= j < k ==> s[j] == old(s[k - 1 - j])
          invariant forall j :: k <= j < s.Length ==> s[j] == old(s[j])
      {
          var temp := s[i];
          s[i] := s[k - 1 - i];
          s[k - 1 - i] := temp;
          i := i + 1;
      }
  }

vc-postamble: |-


