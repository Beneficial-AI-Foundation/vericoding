vc-preamble: |-
  /**
   * Remove odd numbers from an array of numbers
   **/
  
  predicate IsEven(n: int)
  {
      n % 2 == 0
  }

vc-helpers: |-
  // Helper lemma to prove properties if needed
  lemma SeqContainsImpliesElementExists(s: seq<int>, x: int)
    ensures x in s ==> exists i :: 0 <= i < |s| && s[i] == x
  {
    if x in s {
      var i :| 0 <= i < |s| && s[i] == x;
    }
  }

vc-spec: |-
  // <vc-spec>
  method RemoveOddNumbers(arr: array<int>) returns (evenList: seq<int>)
      // All numbers in the output are even and exist in the input 
      ensures forall i :: 0 <= i < |evenList| ==> IsEven(evenList[i]) && evenList[i] in arr[..]
      // All even numbers in the input are in the output
      ensures forall i :: 0 <= i < arr.Length && IsEven(arr[i]) ==> arr[i] in evenList
  // </vc-spec>

vc-code: |-
  method RemoveOddNumbersImpl(arr: array<int>) returns (evenList: seq<int>)
    ensures forall i :: 0 <= i < |evenList| ==> IsEven(evenList[i]) && evenList[i] in arr[..]
    ensures forall i :: 0 <= i < arr.Length && IsEven(arr[i]) ==> arr[i] in evenList
  {
    evenList := [];
    for i := 0 to arr.Length
      invariant 0 <= i <= arr.Length
      invariant forall k :: 0 <= k < |evenList| ==> IsEven(evenList[k]) && evenList[k] in arr[..i]
      invariant forall k :: 0 <= k < i && IsEven(arr[k]) ==> arr[k] in evenList
    {
      if IsEven(arr[i])
      {
        evenList := evenList + [arr[i]];
      }
    }
  }

vc-postamble: |-


