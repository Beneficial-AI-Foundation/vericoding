vc-preamble: |-
  /**
    Ather, Mohammad Faiz (s4648481/3)
    CSSE3100
    Assignemnt 3
    The University of Queensland
   */
  
  // Question 1
  
  // Author: Leino, Title: Program Proofs
  method BinarySearch(a: array<int>, circle: int)
    returns (n: int)
    requires forall i ::
             1 <= i < a.Length
             ==> a[i-1] < a[i]
    requires forall i, j ::
             0 <= i < j < a.Length ==>
             a[i] < a[j]
    ensures 0 <= n <= a.Length
    ensures forall i ::
            0 <= i < n ==>
            a[i] < circle
    ensures forall i ::
            n <= i < a.Length ==>
            circle <= a[i]
  {
    assume{:axiom} false;
  }

vc-helpers: |-
  lemma BinarySearchCorrect(a: array<int>, circle: int, n: int)
    requires forall i :: 1 <= i < a.Length ==> a[i-1] < a[i]
    requires forall i, j :: 0 <= i < j < a.Length ==> a[i] < a[j]
    requires 0 <= n <= a.Length
    requires forall i :: 0 <= i < n ==> a[i] < circle
    requires forall i :: n <= i < a.Length ==> circle <= a[i]
    ensures n == 0 || (n > 0 && a[n-1] < circle)
    ensures n == a.Length || (n < a.Length && circle <= a[n])
  {
  }

vc-spec: |-
  // <vc-spec>
  method Tangent(r: array<int>, x: array<int>)
    returns (found: bool)
    requires forall i:: 1 <= i < x.Length ==> 
             x[i-1] < x[i]
    requires forall i, j ::
             0 <= i < j < x.Length ==>
             x[i] < x[j]
    ensures !found ==>
            forall i,j ::
            0 <= i < r.Length &&
            0 <= j < x.Length ==>
            r[i] != x[j]
    ensures found ==>
            exists i,j ::
            0 <= i < r.Length &&
            0 <= j < x.Length &&
            r[i] == x[j]
  // </vc-spec>

vc-code: |-
  {
    var i := 0;
    found := false;
    while i < r.Length && !found
      decreases r.Length - i
      invariant 0 <= i <= r.Length
      invariant !found ==> forall k :: 0 <= k < i ==> forall j :: 0 <= j < x.Length ==> r[k] != x[j]
    {
      var result := BinarySearch(x, r[i]);
      if result < x.Length && x[result] == r[i] {
        found := true;
        assert exists k, j :: k == i && j == result && 0 <= k < r.Length && 0 <= j < x.Length && r[k] == x[j];
      }
      i := i + 1;
    }
    if found {
      assert exists k, j :: 0 <= k < i && 0 <= j < x.Length && r[k] == x[j];
    }
  }

vc-postamble: |-


