vc-preamble: |-
  function IsLetter(c: char): bool 
  {
    (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') 
  }
  
  function NoLetters(s: string, n: nat): bool 
    requires n <= |s|
  {
    forall c :: 0 <= c < n ==> !IsLetter(s[c])
  }
  
  function ToggleCase(c: char): char
  {
    if c >= 'a' && c <= 'z' 
    then 
      (c - 'a' + 'A')
    else if c >= 'A' && c <= 'Z' 
      then 
        (c - 'A' + 'a')
      else 
        c
  }
  function isReverse(s: string, s_prime: string): bool{
    (|s| == |s_prime|) &&
    (forall si :: 0 <= si < |s|/2 ==> s_prime[|s| - si - 1] == s[si])
  }
  
  method Reverse(original: seq<char>) returns (reversed: seq<char>)
    ensures |reversed| == |original| 
    ensures forall i :: 0 <= i < |original| ==> reversed[i] == original[|original| - 1 - i]
  {
    assume{:axiom} false;
  }

vc-helpers: |-
  lemma ToggleCasePreservesNonLetter(c: char)
    ensures !IsLetter(c) ==> ToggleCase(c) == c
  {
    if !IsLetter(c) {
      assert ToggleCase(c) == c;
    }
  }
  
  lemma ToggleCaseTwiceIsIdentity(c: char)
    ensures ToggleCase(ToggleCase(c)) == c
  {
    if IsLetter(c) {
      if c >= 'a' && c <= 'z' {
        assert ToggleCase(c) == c - 'a' + 'A';
        assert ToggleCase(ToggleCase(c)) == (c - 'a' + 'A') - 'A' + 'a' == c;
      } else if c >= 'A' && c <= 'Z' {
        assert ToggleCase(c) == c - 'A' + 'a';
        assert ToggleCase(ToggleCase(c)) == (c - 'A' + 'a') - 'a' + 'A' == c;
      }
    } else {
      assert ToggleCase(c) == c;
      assert ToggleCase(ToggleCase(c)) == c;
    }
  }

vc-spec: |-
  // <vc-spec>
  method solve(s: string) returns (result: string)
    ensures |result| == |s| 
    ensures !NoLetters(s, |s|) ==> forall i :: 0 <= i < |s| && IsLetter(s[i]) ==> result[i] == ToggleCase(s[i])
    ensures !NoLetters(s, |s|) ==> forall i :: 0 <= i < |s| && !IsLetter(s[i]) ==> result[i] == s[i] 
    ensures NoLetters(s, |s|) ==> isReverse(result, s)
  // </vc-spec>

vc-code: |-
  method Solve(s: string) returns (result: string)
    ensures |result| == |s| 
    ensures !NoLetters(s, |s|) ==> forall i :: 0 <= i < |s| && IsLetter(s[i]) ==> result[i] == ToggleCase(s[i])
    ensures !NoLetters(s, |s|) ==> forall i :: 0 <= i < |s| && !IsLetter(s[i]) ==> result[i] == s[i] 
    ensures NoLetters(s, |s|) ==> isReverse(result, s)
  {
    var res := new char[|s|];
    if NoLetters(s, |s|) {
      var i := 0;
      while i < |s|
        invariant 0 <= i <= |s|
        invariant forall k :: 0 <= k < i ==> res[k] == s[|s| - 1 - k]
      {
        res[i] := s[|s| - 1 - i];
        i := i + 1;
      }
      result := res[..];
      assert isReverse(result, s);
    } else {
      var i := 0;
      while i < |s|
        invariant 0 <= i <= |s|
        invariant forall k :: 0 <= k < i && IsLetter(s[k]) ==> res[k] == ToggleCase(s[k])
        invariant forall k :: 0 <= k < i && !IsLetter(s[k]) ==> res[k] == s[k]
      {
        if IsLetter(s[i]) {
          res[i] := ToggleCase(s[i]);
        } else {
          res[i] := s[i];
        }
        i := i + 1;
      }
      result := res[..];
    }
  }

vc-postamble: |-


