vc-preamble: |-
  function contains(v: int, a: array<int>, n: int): bool
  reads a
    requires n <= a.Length
  {
    exists j :: 0 <= j < n && a[j] == v
  }
  
  function upper_bound(v: int, a: array<int>, n: int): bool
  reads a
    requires n <= a.Length
  {
    forall j :: 0 <= j < n ==> a[j] <= v
  }
  
  function is_max(m: int, a: array<int>, n: int): bool
  reads a
    requires n <= a.Length
  {
    contains(m, a, n) && upper_bound(m, a, n)
  }

vc-helpers: |-
  lemma MaxExists(a: array<int>, n: int)
    requires 0 < n <= a.Length
    ensures exists m :: is_max(m, a, n)
  {
    var m := a[0];
    var i := 1;
    while i < n
      invariant 0 <= i <= n
      invariant is_max(m, a, i)
    {
      if a[i] > m {
        m := a[i];
      }
      i := i + 1;
    }
    assert is_max(m, a, n);
  }

vc-spec: |-
  // <vc-spec>
  method max(a: array<int>, n: int) returns (max: int)
    requires 0 < n <= a.Length;
    ensures is_max(max, a, n);
  // </vc-spec>

vc-code: |-
  method FindMax(a: array<int>, n: int) returns (max: int)
    requires 0 < n <= a.Length
    ensures is_max(max, a, n)
  {
    max := a[0];
    var i := 1;
    while i < n
      invariant 0 <= i <= n
      invariant is_max(max, a, i)
    {
      if a[i] > max {
        max := a[i];
      }
      i := i + 1;
    }
  }

vc-postamble: |-


