vc-preamble: |-
  // Sorting: 
  //        Pre/Post Condition Issues - An investigation 
  //                                      -- Stephanie McIntyre
  // Based on examples in class 
  
  // First Attempt at specifying requirements for sorting array A in incrementing order
  // We want our Hoare triple of (|Pre-Condition|) Code (|Post-Condition|) to hold iff A is properly sorted.

vc-helpers: |-
  predicate sorted(A: array<int>, n: int)
    reads A
    requires 0 <= n <= A.Length
  {
    forall i, j :: 0 <= i <= j < n ==> A[i] <= A[j]
  }

vc-spec: |-
  // <vc-spec>
  method sort(A: array<int>, n: int)
  modifies A; requires n==A.Length;
  /* Pre-Condition */   requires n>=0;            
  /* Post-Condition */  ensures forall i,j:: 0<=i<=j<n ==> A[i]<=A[j];  //This states that A is sorted.
  
  //Can we write code that does not sort A that still satisfies the requirements? 
  //Consider the following program:
  // </vc-spec>

vc-code: |-
  method SortArray(A: array<int>, n: int)
    modifies A
    requires n == A.Length
    requires n >= 0
    ensures sorted(A, n)
  {
    if n <= 1 {
      return;
    }
    
    var i := 1;
    while i < n
      invariant 0 <= i <= n
      invariant sorted(A, i)
    {
      var key := A[i];
      var j := i - 1;
      while j >= 0 && A[j] > key
        invariant -1 <= j < i
        invariant forall k :: 0 <= k <= j ==> A[k] <= A[j]
        invariant forall k :: j + 1 <= k <= i ==> key <= A[k]
      {
        A[j + 1] := A[j];
        j := j - 1;
      }
      A[j + 1] := key;
      i := i + 1;
    }
  }

vc-postamble: |-


