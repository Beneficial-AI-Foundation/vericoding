vc-preamble: |-
  // By `lol sort` here, I refer to a seemingly-broken sorting algorithm,
  // which actually somehow manages to work perfectly:
  //
  // for i in 0..n
  //   for j in 0..n
  //     if i < j
  //       swap a[i], a[j]
  //
  // It is perhaps the simpliest sorting algorithm to "memorize",
  // even "symmetrically beautiful" as if `i` and `j` just played highly
  // similar roles. And technically it's still O(n^2) time lol...
  //
  // Proving its correctness is tricky (interesting) though.
  
  // Successfully verified with [Dafny 3.3.0.31104] in about 5 seconds.
  
  
  
  // We define "valid permutation" using multiset:
  
  predicate valid_permut(a: seq<int>, b: seq<int>)
    requires |a| == |b|
  {
    multiset(a) == multiset(b)
  }
  
  // This is a swap-based sorting algorithm, so permutedness is trivial:
  // note that: if i == j, the spec just says a[..] remains the same.
  method swap(a: array<int>, i: int, j: int)
    requires 0 <= i < a.Length && 0 <= j < a.Length
    modifies a
    ensures a[..] == old(a[..]) [i := old(a[j])] [j := old(a[i])]
    ensures valid_permut(a[..], old(a[..]))
  {
    assume{:axiom} false;
  }
  
  // We then define "sorted" (by increasing order):
  predicate sorted(a: seq<int>)
  {
    forall i, j | 0 <= i <= j < |a| :: a[i] <= a[j]
  }
  
  
  // Now, the lol sort algorithm:
  // (Some invariants were tricky to find, but Dafny was smart enough otherwise)

vc-helpers: |-
  // Helper lemma to prove that swapping elements maintains the multiset property
  lemma SwapPreservesMultiset(a: seq<int>, i: int, j: int)
    requires 0 <= i < |a| && 0 <= j < |a|
    ensures multiset(a[i := a[j]][j := a[i]]) == multiset(a)
  {
  }
  
  // Lemma to help prove that swaps in lol_sort maintain or improve sortedness
  lemma SwapReducesInversions(a: seq<int>, i: int, j: int)
    requires 0 <= i < j < |a|
    ensures a[i] > a[j] ==> multiset(a[i := a[j]][j := a[i]]) == multiset(a)
  {
  }

vc-spec: |-
  // <vc-spec>
  method lol_sort(a: array<int>)
    modifies a
    ensures valid_permut(a[..], old(a[..]))
    ensures sorted(a[..])
  // </vc-spec>

vc-code: |-
  {
    var n := a.Length;
    var i := 0;
    while i < n
      invariant 0 <= i <= n
      invariant valid_permut(a[..], old(a[..]))
      invariant forall k, l | 0 <= k < i && k <= l < n :: a[k] <= a[l]
    {
      var j := 0;
      while j < n
        invariant 0 <= i <= n && 0 <= j <= n
        invariant valid_permut(a[..], old(a[..]))
        invariant forall k, l | 0 <= k < i && k <= l < n :: a[k] <= a[l]
        invariant forall k | i <= k < j && i < k :: a[i] <= a[k]
      {
        if i < j && a[i] > a[j]
        {
          swap(a, i, j);
        }
        j := j + 1;
      }
      i := i + 1;
    }
  }

vc-postamble: |-


