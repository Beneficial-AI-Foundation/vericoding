vc-preamble: |-


vc-helpers: |-
  // Helper lemma to assist in proving properties if needed
  lemma CommonElementLemma(a: array<int>, b: array<int>, i: int, j: int)
    requires 0 <= i < a.Length && 0 <= j < b.Length
    ensures a[i] == b[j] ==> exists k, l :: 0 <= k < a.Length && 0 <= l < b.Length && a[k] == b[l]
  {
    if a[i] == b[j] {
      assert exists k, l :: k == i && l == j && 0 <= k < a.Length && 0 <= l < b.Length && a[k] == b[l];
    }
  }

vc-spec: |-
  // <vc-spec>
  method HasCommonElement(a: array<int>, b: array<int>) returns (result: bool)
      requires a != null && b != null
      ensures result ==> exists i, j :: 0 <= i < a.Length && 0 <= j < b.Length && a[i] == b[j]
      ensures !result ==> forall i, j :: 0 <= i < a.Length && 0 <= j < b.Length ==> a[i] != b[j]
  // </vc-spec>

vc-code: |-
  method HasCommonElementImpl(a: array<int>, b: array<int>) returns (result: bool)
    ensures result ==> exists i, j :: 0 <= i < a.Length && 0 <= j < b.Length && a[i] == b[j]
    ensures !result ==> forall i, j :: 0 <= i < a.Length && 0 <= j < b.Length ==> a[i] != b[j]
  {
    result := false;
    var i := 0;
    while i < a.Length
      invariant 0 <= i <= a.Length
      invariant !result ==> forall k, m :: 0 <= k < i && 0 <= m < b.Length ==> a[k] != b[m]
    {
      var j := 0;
      while j < b.Length
        invariant 0 <= j <= b.Length
        invariant !result ==> forall m :: 0 <= m < j ==> a[i] != b[m]
      {
        if a[i] == b[j] {
          result := true;
          return;
        }
        j := j + 1;
      }
      i := i + 1;
    }
  }

vc-postamble: |-


