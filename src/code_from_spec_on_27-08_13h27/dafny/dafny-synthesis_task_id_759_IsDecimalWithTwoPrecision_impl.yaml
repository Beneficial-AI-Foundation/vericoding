vc-preamble: |-


vc-helpers: |-
  // Helper lemma to prove properties about string indexing and decimal point checks
  lemma DecimalPrecisionCheck(s: string, i: int)
    requires 0 <= i < |s|
    ensures s[i] == '.' ==> |s| - i - 1 >= 0
  {
  }

vc-spec: |-
  // <vc-spec>
  method IsDecimalWithTwoPrecision(s: string) returns (result: bool)
      ensures result ==> (exists i :: 0 <= i < |s| && s[i] == '.' && |s| - i - 1 == 2)
      ensures !result ==> !(exists i :: 0 <= i < |s| && s[i] == '.' && |s| - i - 1 == 2)
  // </vc-spec>

vc-code: |-
  method IsDecimalWithTwoPrecisionImpl(s: string) returns (result: bool)
      ensures result ==> (exists i :: 0 <= i < |s| && s[i] == '.' && |s| - i - 1 == 2)
      ensures !result ==> !(exists i :: 0 <= i < |s| && s[i] == '.' && |s| - i - 1 == 2)
  {
      result := false;
      for i := 0 to |s|
          invariant 0 <= i <= |s|
          invariant result ==> (exists k :: 0 <= k < i && s[k] == '.' && |s| - k - 1 == 2)
          invariant !result ==> forall k :: 0 <= k < i ==> !(s[k] == '.' && |s| - k - 1 == 2)
      {
          if i < |s| && s[i] == '.' && |s| - i - 1 == 2 {
              result := true;
              break;
          }
      }
      if result {
          assert exists i :: 0 <= i < |s| && s[i] == '.' && |s| - i - 1 == 2;
      } else {
          assert forall i :: 0 <= i < |s| ==> !(s[i] == '.' && |s| - i - 1 == 2);
      }
  }

vc-postamble: |-


