vc-preamble: |-
  // Sum of elements of A from indices 0 to end.
  // end is inclusive! (not James's normal way of thinking!!)
  function SumUpto(A: array<real>, end: int): real
    requires -1 <= end < A.Length
    reads A
  {
    if end == -1 then
      0.0
    else
      A[end] + SumUpto(A, end-1)
  }
  
  function Sum(A: array<real>): real
    reads A
  {
    SumUpto(A, A.Length-1)
  }
  
  
  // example showing that, with the original postcondition, the answer is non-unique!

vc-helpers: |-
  lemma SumUptoIncreases(A: array<real>, i: int)
    requires 0 <= i < A.Length
    requires forall j | 0 <= j < A.Length :: A[j] > 0.0
    ensures SumUpto(A, i-1) < SumUpto(A, i)
  {
    if i == 0 {
      assert SumUpto(A, -1) == 0.0;
      assert SumUpto(A, 0) == A[0];
      assert A[0] > 0.0;
    } else {
      calc {
        SumUpto(A, i);
        == A[i] + SumUpto(A, i-1);
        > SumUpto(A, i-1);
      }
    }
  }
  
  lemma SumUptoValue(A: array<real>, end: int)
    requires -1 <= end < A.Length
    requires forall j | 0 <= j < A.Length :: A[j] == 1.0
    ensures SumUpto(A, end) == if end == -1 then 0.0 else (end as real + 1.0)
  {
    if end == -1 {
      assert SumUpto(A, -1) == 0.0;
    } else {
      calc {
        SumUpto(A, end);
        == A[end] + SumUpto(A, end-1);
        == 1.0 + SumUpto(A, end-1);
        == { SumUptoValue(A, end-1); } 1.0 + (if end-1 == -1 then 0.0 else ((end-1) as real + 1.0));
        == if end == 0 then 1.0 else (end as real + 1.0);
      }
    }
  }

vc-spec: |-
  // <vc-spec>
  method PercentileNonUniqueAnswer() returns (p: real, A: array<real>, total: real, i1: int, i2: int)
    ensures forall i | 0 <= i < A.Length :: A[i] > 0.0
    ensures 0.0 <= p <= 100.0
    ensures total == Sum(A)
    ensures total > 0.0
  
    ensures -1 <= i1 < A.Length
    ensures SumUpto(A, i1) <= (p/100.0) * total
    ensures i1+1 < A.Length ==> SumUpto(A, i1+1) >= (p/100.0) * total
  
    ensures -1 <= i2 < A.Length
    ensures SumUpto(A, i2) <= (p/100.0) * total
    ensures i2+1 < A.Length ==> SumUpto(A, i2+1) >= (p/100.0) * total
  
    ensures i1 != i2
  // </vc-spec>

vc-code: |-
  method PercentileNonUniqueAnswerImpl() returns (p: real, A: array<real>, total: real, i1: int, i2: int)
    ensures forall i | 0 <= i < A.Length :: A[i] > 0.0
    ensures 0.0 <= p <= 100.0
    ensures total == Sum(A)
    ensures total > 0.0
    ensures -1 <= i1 < A.Length
    ensures SumUpto(A, i1) <= (p/100.0) * total
    ensures i1+1 < A.Length ==> SumUpto(A, i1+1) >= (p/100.0) * total
    ensures -1 <= i2 < A.Length
    ensures SumUpto(A, i2) <= (p/100.0) * total
    ensures i2+1 < A.Length ==> SumUpto(A, i2+1) >= (p/100.0) * total
    ensures i1 != i2
  {
    p := 50.0;
    A := new real[4];
    A[0] := 1.0;
    A[1] := 1.0;
    A[2] := 1.0;
    A[3] := 1.0;
    total := Sum(A);
    i1 := 0;
    i2 := 1;
    
    assert total == 4.0;
    assert SumUpto(A, 0) == 1.0;
    assert SumUpto(A, 1) == 2.0;
    assert SumUpto(A, 2) == 3.0;
    assert (p / 100.0) * total == 2.0;
    assert SumUpto(A, i1) <= (p / 100.0) * total;
    assert SumUpto(A, i1 + 1) >= (p / 100.0) * total;
    assert SumUpto(A, i2) <= (p / 100.0) * total;
    assert SumUpto(A, i2 + 1) >= (p / 100.0) * total;
    assert i1 != i2;
  }

vc-postamble: |-
  // proof that, with the corrected postcondition, the answer is unique
  // lemma for previous proof: when an array has strictly positive elements, the
  // sums strictly increase left to right

