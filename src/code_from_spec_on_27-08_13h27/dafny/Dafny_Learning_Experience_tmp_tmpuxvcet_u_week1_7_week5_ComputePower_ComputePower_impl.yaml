vc-preamble: |-
  function Power(n:nat):nat 
  {
      if n == 0 then 1 else 2 * Power(n-1)
  }
  
  method CalcPower(n:nat) returns (p:nat)
      ensures p == 2*n;
  {
    assume{:axiom} false;
  }

vc-helpers: |-
  lemma PowerLemma(n: nat)
    ensures Power(n) == if n == 0 then 1 else 2 * Power(n-1)
  {
    // The definition of Power is already recursive, so this lemma is straightforward
  }

vc-spec: |-
  // <vc-spec>
  method ComputePower(n:nat) returns (p:nat)
      ensures p == Power(n)
  // </vc-spec>

vc-code: |-
  method ComputePowerImpl(n: nat) returns (p: nat)
    ensures p == Power(n)
  {
    if n == 0 {
      p := 1;
    } else {
      var temp := ComputePowerImpl(n - 1);
      p := 2 * temp;
    }
  }

vc-postamble: |-


