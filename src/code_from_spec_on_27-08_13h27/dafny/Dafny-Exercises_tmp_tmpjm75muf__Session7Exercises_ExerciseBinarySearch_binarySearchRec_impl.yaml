vc-preamble: |-
  predicate sorted(s : seq<int>) {
      forall u, w :: 0 <= u < w < |s| ==> s[u] <= s[w]
  }
  
  
  
  
  
  
  
  //Recursive binary search

vc-helpers: |-
  function binarySearchInvariant(v: array<int>, elem: int, c: int, f: int): bool
    requires 0 <= c <= f + 1 <= v.Length
    reads v
  {
    (forall k :: 0 <= k < c ==> v[k] <= elem) && (forall k :: f < k < v.Length ==> v[k] > elem)
  }
  
  lemma BinarySearchMiddle(v: array<int>, elem: int, c: int, f: int, mid: int)
    requires 0 <= c <= f + 1 <= v.Length
    requires sorted(v[0..v.Length])
    requires binarySearchInvariant(v, elem, c, f)
    requires mid == (c + f) / 2
    requires 0 <= mid < v.Length
    ensures v[mid] <= elem ==> binarySearchInvariant(v, elem, mid + 1, f)
    ensures v[mid] > elem ==> binarySearchInvariant(v, elem, c, mid - 1)
  {
    if v[mid] <= elem {
      assert forall k :: 0 <= k < mid + 1 ==> v[k] <= elem;
    } else {
      assert forall k :: mid - 1 < k < v.Length ==> v[k] > elem;
    }
  }

vc-spec: |-
  // <vc-spec>
  method binarySearchRec(v:array<int>, elem:int, c:int, f:int) returns (p:int)
   requires sorted(v[0..v.Length])
   requires 0<=c<=f+1<=v.Length//0<=c<=v.Length && -1<=f<v.Length && c<=f+1
   requires forall k::0<=k<c ==> v[k]<=elem
   requires forall k::f<k<v.Length ==> v[k]>elem
   decreases f-c
   ensures -1<=p<v.Length
   ensures (forall u::0<=u<=p ==> v[u]<=elem) && (forall w::p<w<v.Length ==> v[w]>elem)
  // </vc-spec>

vc-code: |-
  method BinarySearchRecImpl(v: array<int>, elem: int, c: int, f: int) returns (p: int)
    requires sorted(v[0..v.Length])
    requires 0 <= c <= f + 1 <= v.Length
    requires forall k :: 0 <= k < c ==> v[k] <= elem
    requires forall k :: f < k < v.Length ==> v[k] > elem
    decreases f - c
    ensures -1 <= p < v.Length
    ensures (forall u :: 0 <= u <= p ==> v[u] <= elem) && (forall w :: p < w < v.Length ==> v[w] > elem)
  {
    if c > f {
      p := f;
    } else {
      var mid := (c + f) / 2;
      assert 0 <= mid < v.Length;
      if v[mid] <= elem {
        BinarySearchMiddle(v, elem, c, f, mid);
        p := BinarySearchRecImpl(v, elem, mid + 1, f);
      } else {
        BinarySearchMiddle(v, elem, c, f, mid);
        p := BinarySearchRecImpl(v, elem, c, mid - 1);
      }
    }
  }

vc-postamble: |-


