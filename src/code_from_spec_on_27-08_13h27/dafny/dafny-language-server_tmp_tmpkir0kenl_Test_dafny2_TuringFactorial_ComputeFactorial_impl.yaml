vc-preamble: |-
  // RUN: %dafny /compile:0 /dprint:"%t.dprint" "%s" > "%t"
  // RUN: %diff "%s.expect" "%t"
  
  function Factorial(n: nat): nat
  {
    if n == 0 then 1 else n * Factorial(n-1)
  }

vc-helpers: |-
  lemma FactorialPositive(n: nat)
    ensures Factorial(n) > 0
  {
    if n == 0 {
      assert Factorial(0) == 1;
    } else {
      FactorialPositive(n-1);
      assert Factorial(n) == n * Factorial(n-1);
      assert n > 0;
      assert Factorial(n-1) > 0;
      assert Factorial(n) > 0;
    }
  }

vc-spec: |-
  // <vc-spec>
  method ComputeFactorial(n: int) returns (u: int)
    requires 1 <= n;
    ensures u == Factorial(n);
  // </vc-spec>

vc-code: |-
  method ComputeFactorialImpl(n: int) returns (u: int)
    requires 1 <= n
    ensures u == Factorial(n)
  {
    u := 1;
    var i := 1;
    while i < n
      invariant 1 <= i <= n
      invariant u == Factorial(i)
    {
      i := i + 1;
      u := u * i;
    }
    assert i == n;
    assert u == Factorial(n);
  }

vc-postamble: |-


