vc-preamble: |-
  predicate IsEven(n: int)
  {
      n % 2 == 0
  }

vc-helpers: |-
  // No additional helper code or proofs needed for this implementation

vc-spec: |-
  // <vc-spec>
  method IsEvenAtIndexEven(lst: seq<int>) returns (result: bool)
      ensures result <==> forall i :: 0 <= i < |lst| ==> (IsEven(i) ==> IsEven(lst[i]))
  // </vc-spec>

vc-code: |-
  method IsEvenAtIndexEvenImpl(lst: seq<int>) returns (result: bool)
      ensures result <==> forall i :: 0 <= i < |lst| ==> (IsEven(i) ==> IsEven(lst[i]))
  {
      result := true;
      for i := 0 to |lst|
          invariant result <==> forall k :: 0 <= k < i ==> (IsEven(k) ==> IsEven(lst[k]))
      {
          if IsEven(i) && !IsEven(lst[i])
          {
              result := false;
              return;
          }
      }
  }

vc-postamble: |-


