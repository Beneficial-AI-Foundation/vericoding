vc-preamble: |-
  // Given an array of integers, it returns the sum. [1,3,3,2]->9
  
  function Sum(xs: seq<int>): int {
      if |xs| == 0 then 0 else Sum(xs[..|xs|-1]) + xs[|xs|-1]
  }

vc-helpers: |-
  lemma SumArrayLemma(xs: seq<int>, i: int)
    requires 0 <= i <= |xs|
    ensures Sum(xs[..i]) == if i == 0 then 0 else Sum(xs[..i-1]) + xs[i-1]
  {
    if i == 0 {
      assert xs[..0] == [];
      assert Sum([]) == 0;
    } else {
      assert xs[..i] == xs[..i-1] + [xs[i-1]];
      calc {
        Sum(xs[..i]);
        Sum(xs[..i-1] + [xs[i-1]]);
        Sum(xs[..i-1]) + xs[i-1];
      }
    }
  }

vc-spec: |-
  // <vc-spec>
  method SumArray(xs: array<int>) returns (s: int)
      ensures s == Sum(xs[..])
  // </vc-spec>

vc-code: |-
  {
    var sum := 0;
    var i := 0;
    while i < xs.Length
      invariant 0 <= i <= xs.Length
      invariant sum == Sum(xs[..i])
    {
      sum := sum + xs[i];
      i := i + 1;
    }
    s := sum;
  }

vc-postamble: |-


