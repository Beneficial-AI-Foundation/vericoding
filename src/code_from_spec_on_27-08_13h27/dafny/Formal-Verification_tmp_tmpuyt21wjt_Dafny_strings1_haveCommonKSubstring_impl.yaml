vc-preamble: |-
  predicate isNotPrefixPred(pre:string, str:string)
  {
      (|pre| > |str|) || 
      pre != str[..|pre|]
  }
  
  
  method isPrefix(pre: string, str: string) returns (res:bool)
      ensures !res <==> isNotPrefixPred(pre,str)
      ensures  res <==> isPrefixPredicate(pre,str)
  {
    assume{:axiom} false;
  }
  
  
  
  predicate isPrefixPredicate(pre: string, str:string)
  {
    |str| >= |pre| && pre <= str
  }
  
  
  predicate isSubstringPredicate (sub: string, str:string)
  {
    |str| >= |sub| && (exists i :: 0 <= i <= |str| && isPrefixPredicate(sub, str[i..]))
  }
  
  method isSubstring(sub: string, str: string) returns (res:bool)
  ensures res == isSubstringPredicate(sub, str)
  {
    assume{:axiom} false;
  }
  
  predicate haveCommonKSubstringPredicate(k: nat, str1: string, str2: string)
  {
    |str1| >= k && |str2| >= k && (exists i :: 0 <= i <= |str1| - k && isSubstringPredicate((str1[i..])[..k], str2))
  }
  
  predicate maxCommonSubstringPredicate(str1: string, str2: string, len:nat)
  {
     forall k :: len < k <= |str1| ==> !haveCommonKSubstringPredicate(k, str1, str2)
  }

vc-helpers: |-
  lemma PrefixImpliesSubstring(pre: string, str: string)
    requires isPrefixPredicate(pre, str)
    ensures isSubstringPredicate(pre, str)
  {
    assert |str| >= |pre| && pre <= str;
    assert exists i :: 0 <= i <= |str| && isPrefixPredicate(pre, str[i..]);
  }
  
  lemma SubstringAtIndex(sub: string, str: string, i: nat)
    requires 0 <= i <= |str| - |sub|
    requires isPrefixPredicate(sub, str[i..])
    ensures isSubstringPredicate(sub, str)
  {
    assert exists j :: 0 <= j <= |str| && isPrefixPredicate(sub, str[j..]);
  }
  
  lemma SubstringPrefixEquivalence(sub: string, str: string, i: nat)
    requires 0 <= i <= |str| - |sub|
    ensures isSubstringPredicate(sub, str) ==> exists j :: 0 <= j <= |str| - |sub| && isPrefixPredicate(sub, str[j..])
  {
    if isSubstringPredicate(sub, str) {
      assert exists j :: 0 <= j <= |str| && isPrefixPredicate(sub, str[j..]);
    }
  }
  
  lemma NoCommonSubstringImpliesNoPredicate(k: nat, str1: string, str2: string)
    requires |str1| >= k && |str2| >= k
    requires forall j :: 0 <= j <= |str1| - k ==> !isSubstringPredicate((str1[j..])[..k], str2)
    ensures !haveCommonKSubstringPredicate(k, str1, str2)
  {
    assert !exists i :: 0 <= i <= |str1| - k && isSubstringPredicate((str1[i..])[..k], str2);
  }

vc-spec: |-
  // <vc-spec>
  method haveCommonKSubstring(k: nat, str1: string, str2: string) returns (found: bool)
    ensures |str1| < k || |str2| < k ==> !found
    ensures haveCommonKSubstringPredicate(k,str1,str2) == found
  // </vc-spec>

vc-code: |-
  method haveCommonKSubstringImpl(k: nat, str1: string, str2: string) returns (found: bool)
    ensures |str1| < k || |str2| < k ==> !found
    ensures haveCommonKSubstringPredicate(k, str1, str2) == found
  {
    if |str1| < k || |str2| < k {
      return false;
    }
    
    found := false;
    var i := 0;
    while i <= |str1| - k
      invariant 0 <= i <= |str1| - k + 1
      invariant !found ==> forall j :: 0 <= j < i ==> !isSubstringPredicate((str1[j..])[..k], str2)
      invariant found ==> exists j :: 0 <= j < i && isSubstringPredicate((str1[j..])[..k], str2)
    {
      var substr := (str1[i..])[..k];
      var res := isSubstring(substr, str2);
      if res {
        found := true;
        return;
      }
      i := i + 1;
    }
    if !found {
      assert forall j :: 0 <= j <= |str1| - k ==> !isSubstringPredicate((str1[j..])[..k], str2);
      NoCommonSubstringImpliesNoPredicate(k, str1, str2);
    } else {
      assert exists j :: 0 <= j <= |str1| - k && isSubstringPredicate((str1[j..])[..k], str2);
    }
    return found;
  }

vc-postamble: |-


