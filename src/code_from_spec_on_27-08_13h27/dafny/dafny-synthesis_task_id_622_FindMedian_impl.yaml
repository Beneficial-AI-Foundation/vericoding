vc-preamble: |-


vc-helpers: |-
  // Helper lemma to prove properties about sorted arrays
  lemma SortedArrayProperties(arr: array<int>)
    requires arr.Length > 0
    requires forall i :: 0 <= i < arr.Length - 1 ==> arr[i] <= arr[i + 1]
    ensures true
  {
  }

vc-spec: |-
  // <vc-spec>
  method FindMedian(a: array<int>, b: array<int>) returns (median: int)
      requires a != null && b != null
      requires a.Length == b.Length
      requires a.Length > 0
      requires forall i :: 0 <= i < a.Length - 1 ==> a[i] <= a[i + 1]
      requires forall i :: 0 <= i < b.Length - 1 ==> b[i] <= b[i + 1]
      ensures median == if (a.Length % 2 == 0) then (a[a.Length / 2 - 1] + b[0]) / 2 else a[a.Length / 2]
  // </vc-spec>

vc-code: |-
  method FindMedianImpl(a: array<int>, b: array<int>) returns (median: int)
    requires a.Length == b.Length
    requires a.Length > 0
    requires forall i :: 0 <= i < a.Length - 1 ==> a[i] <= a[i + 1]
    requires forall i :: 0 <= i < b.Length - 1 ==> b[i] <= b[i + 1]
    ensures median == if (a.Length % 2 == 0) then (a[a.Length / 2 - 1] + b[0]) / 2 else a[a.Length / 2]
  {
    var n := a.Length;
    if n % 2 == 0 {
      median := (a[n / 2 - 1] + b[0]) / 2;
    } else {
      median := a[n / 2];
    }
  }

vc-postamble: |-


