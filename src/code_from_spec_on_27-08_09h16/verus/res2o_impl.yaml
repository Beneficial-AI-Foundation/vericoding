vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus!{

vc-helpers: |-
  spec fn sum_of_mins(a: Seq<i32>, b: Seq<i32>, c: Seq<i32>, len: nat) -> int
      decreases len
  {
      if len == 0 {
          0
      } else {
          let min_val = if a[len - 1] <= b[len - 1] && a[len - 1] <= c[len - 1] {
              a[len - 1]
          } else if b[len - 1] <= c[len - 1] {
              b[len - 1]
          } else {
              c[len - 1]
          };
          sum_of_mins(a, b, c, (len - 1) as nat) + min_val
      }
  }
  
  proof fn sum_of_mins_bounded(a: Seq<i32>, b: Seq<i32>, c: Seq<i32>, len: nat, max_val: i32)
      requires
          len <= max_val,
          len < a.len(),
          len < b.len(), 
          len < c.len(),
          forall|i: int| 0 <= i < len ==> (a[i as int] >= 1 && b[i as int] >= 1 && c[i as int] >= 1),
      ensures
          sum_of_mins(a, b, c, len) >= len,
          sum_of_mins(a, b, c, len) <= 3 * len,
      decreases len
  {
      if len == 0 {
      } else {
          sum_of_mins_bounded(a, b, c, (len - 1) as nat, max_val);
      }
  }

vc-spec: |-
  fn myfun(a: &mut Vec<i32>, b: &mut Vec<i32>, c: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32)
  	// pre-conditions-start
  	requires
  		N > 0,
  		old(a).len() == N,
  		old(b).len() == N,
  		old(c).len() == N,
  		old(sum).len() == 1,
  		N < 1000,
  	// pre-conditions-end
  	// post-conditions-start
  	ensures
  		sum[0] <= 3 * N,
  	// post-conditions-end

vc-code: |-
  {
      // impl-start
      let mut total: i32 = 0;
      let mut i: usize = 0;
      
      while i < N as usize
          invariant
              i <= N as usize,
              total <= 3 * (i as i32),
              total >= -(3 * N),
              a.len() == N,
              b.len() == N,
              c.len() == N,
              sum.len() == 1,
              N < 1000,
          decreases N as usize - i,
      {
          let val_a = a[i];
          let val_b = b[i];
          let val_c = c[i];
          
          let min_val = if val_a <= val_b && val_a <= val_c {
              val_a
          } else if val_b <= val_c {
              val_b
          } else {
              val_c
          };
          
          proof {
              assert(total <= 3 * (i as i32));
              assert(i < N as usize);
              assert(min_val <= val_a && min_val <= val_b && min_val <= val_c);
              assert(total as int + min_val as int <= total as int + 1000);
              assert(total as int + min_val as int >= -(3 * N as int) + (-1000));
              assert(total + min_val <= 3 * N);
          }
          
          total = total + min_val;
          i = i + 1;
      }
      
      sum[0] = total;
      // impl-end
  }

vc-postamble: |-
  
  }
  
  fn main() {}

