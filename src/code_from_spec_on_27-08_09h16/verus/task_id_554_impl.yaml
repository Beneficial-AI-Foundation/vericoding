vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  proof fn lemma_filter_subrange_extend(arr: Seq<u32>, i: int, x: u32)
      requires 
          0 <= i < arr.len(),
          x == arr[i]
      ensures 
          if x % 2 != 0 {
              arr.subrange(0, i + 1).filter(|y: u32| y % 2 != 0) == 
              arr.subrange(0, i).filter(|y: u32| y % 2 != 0).push(x)
          } else {
              arr.subrange(0, i + 1).filter(|y: u32| y % 2 != 0) == 
              arr.subrange(0, i).filter(|y: u32| y % 2 != 0)
          }
  {
      assert(arr.subrange(0, i + 1) == arr.subrange(0, i).push(x));
      
      let prefix = arr.subrange(0, i);
      let extended = arr.subrange(0, i + 1);
      
      if x % 2 != 0 {
          assert(extended.filter(|y: u32| y % 2 != 0) == prefix.filter(|y: u32| y % 2 != 0).push(x)) by {
              assert(extended == prefix.push(x));
              assert(x % 2 != 0);
          }
      } else {
          assert(extended.filter(|y: u32| y % 2 != 0) == prefix.filter(|y: u32| y % 2 != 0)) by {
              assert(extended == prefix.push(x));
              assert(x % 2 == 0);
          }
      }
  }

vc-spec: |-
  fn find_odd_numbers(arr: &Vec<u32>) -> (odd_numbers: Vec<u32>)
      // post-conditions-start
      ensures
          odd_numbers@ == arr@.filter(|x: u32| x % 2 != 0),
      // post-conditions-end

vc-code: |-
  {
      let mut odd_numbers = Vec::new();
      let mut i = 0;
      
      while i < arr.len()
          invariant
              i <= arr.len(),
              odd_numbers@ == arr@.subrange(0, i as int).filter(|x: u32| x % 2 != 0),
          decreases arr.len() - i
      {
          proof {
              lemma_filter_subrange_extend(arr@, i as int, arr@[i as int]);
          }
          
          if arr[i] % 2 != 0 {
              odd_numbers.push(arr[i]);
          }
          i += 1;
      }
      
      proof {
          assert(i == arr.len());
          assert(arr@.subrange(0, i as int) == arr@);
      }
      
      odd_numbers
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() { }

