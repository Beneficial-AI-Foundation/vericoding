vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  
  verus! {

vc-helpers: |-
  spec fn contains(str: &Vec<char>, key: char) -> bool
  {
      str@.contains(key)
  }
  
  proof fn lemma_vec_push<T>(vec: Seq<T>, i: T, l: usize)
      requires
          l == vec.len(),
      ensures
          forall|k: int| 0 <= k < vec.len() ==> #[trigger] vec[k] == vec.push(i)[k],
          vec.push(i).index(l as int) == i,
  {
  }
  
  proof fn lemma_contains_equiv(vec: &Vec<char>, key: char)
      ensures
          contains(vec, key) <==> vec@.contains(key),
  {
  }
  
  proof fn lemma_push_contains<T>(vec: Seq<T>, elem: T, x: T)
      ensures
          vec.push(elem).contains(x) <==> (vec.contains(x) || x == elem),
  {
  }
  
  proof fn lemma_result_properties(result: &Vec<char>, str1: &Vec<char>, str2: &Vec<char>, j: usize)
      requires
          j <= result.len(),
          forall|i: int| 0 <= i < j ==> (str1@.contains(#[trigger] result[i]) && !str2@.contains(#[trigger] result[i])),
          forall|i: int| 0 <= i < str1.len() ==> (str2@.contains(#[trigger] str1[i]) || result@.subrange(0, j as int).contains(#[trigger] str1[i])),
      ensures
          forall|i: int| 0 <= i < j ==> (str1@.contains(#[trigger] result[i]) && !str2@.contains(#[trigger] result[i])),
  {
  }

vc-spec: |-
  fn remove_chars(str1: &Vec<char>, str2: &Vec<char>) -> (result: Vec<char>)
      // post-conditions-start
      ensures
          forall|i: int|
              0 <= i < result.len() ==> (str1@.contains(#[trigger] result[i]) && !str2@.contains(
                  #[trigger] result[i],
              )),
          forall|i: int|
              0 <= i < str1.len() ==> (str2@.contains(#[trigger] str1[i]) || result@.contains(
                  #[trigger] str1[i],
              )),
      // post-conditions-end

vc-code: |-
  {
      let mut result: Vec<char> = Vec::new();
      let mut i: usize = 0;
      
      while i < str1.len()
          invariant
              i <= str1.len(),
              forall|k: int| 0 <= k < result.len() ==> (str1@.contains(#[trigger] result[k]) && !str2@.contains(#[trigger] result[k])),
              forall|k: int| 0 <= k < i ==> (str2@.contains(#[trigger] str1[k]) || result@.contains(#[trigger] str1[k])),
      {
          let ch = str1[i];
          
          if !contains(str2, ch) {
              proof {
                  lemma_contains_equiv(str2, ch);
              }
              result.push(ch);
              proof {
                  let old_len = (result.len() - 1) as usize;
                  lemma_vec_push(result@.drop_last(), ch, old_len);
                  lemma_push_contains(result@.drop_last(), ch, ch);
              }
          }
          
          i += 1;
      }
      
      result
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

