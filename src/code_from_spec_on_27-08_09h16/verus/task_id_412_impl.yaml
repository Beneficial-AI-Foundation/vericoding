vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  // Helper lemma to prove properties about subrange and filter
  proof fn lemma_subrange_filter_step(arr: Seq<u32>, i: int, x: u32)
      requires 
          0 <= i < arr.len(),
          x == arr[i]
      ensures
          arr.subrange(0, i + 1).filter(|y: u32| y % 2 == 0) == 
          if x % 2 == 0 {
              arr.subrange(0, i).filter(|y: u32| y % 2 == 0).push(x)
          } else {
              arr.subrange(0, i).filter(|y: u32| y % 2 == 0)
          }
  {
      assert(arr.subrange(0, i + 1) == arr.subrange(0, i).push(x));
      assert(arr.subrange(0, i + 1).last() == x);
      assert(arr.subrange(0, i + 1).drop_last() == arr.subrange(0, i));
      
      let prefix = arr.subrange(0, i);
      let full = arr.subrange(0, i + 1);
      
      if x % 2 == 0 {
          assert(full.filter(|y: u32| y % 2 == 0) == prefix.filter(|y: u32| y % 2 == 0).push(x));
      } else {
          assert(full.filter(|y: u32| y % 2 == 0) == prefix.filter(|y: u32| y % 2 == 0));
      }
  }

vc-spec: |-
  fn remove_odds(arr: &Vec<u32>) -> (even_list: Vec<u32>)
      // post-conditions-start
      ensures
          even_list@ == arr@.filter(|x: u32| x % 2 == 0),
      // post-conditions-end

vc-code: |-
  {
      let mut result = Vec::new();
      let mut i = 0;
      
      while i < arr.len()
          invariant
              i <= arr.len(),
              result@ == arr@.subrange(0, i as int).filter(|x: u32| x % 2 == 0),
          decreases arr.len() - i
      {
          proof {
              lemma_subrange_filter_step(arr@, i as int, arr@[i as int]);
          }
          
          if arr[i] % 2 == 0 {
              result.push(arr[i]);
          }
          i += 1;
      }
      
      proof {
          assert(i == arr.len());
          assert(arr@.subrange(0, i as int) == arr@);
      }
      
      result
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

