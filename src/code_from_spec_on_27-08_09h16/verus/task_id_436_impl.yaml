vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  spec fn filter_push_lemma<T>(s: Seq<T>, x: T, f: spec_fn(T) -> bool) -> bool {
      if f(x) {
          s.filter(f).push(x) == s.push(x).filter(f)
      } else {
          s.filter(f) == s.push(x).filter(f)
      }
  }
  
  proof fn prove_filter_push_lemma<T>(s: Seq<T>, x: T, f: spec_fn(T) -> bool)
      ensures filter_push_lemma(s, x, f)
  {
      if f(x) {
          assert(s.filter(f).push(x) == s.push(x).filter(f));
      } else {
          assert(s.filter(f) == s.push(x).filter(f));
      }
  }

vc-spec: |-
  fn find_negative_numbers(arr: &Vec<i32>) -> (negative_list: Vec<i32>)
      // post-conditions-start
      ensures
          negative_list@ == arr@.filter(|x: i32| x < 0),
      // post-conditions-end

vc-code: |-
  {
      let mut negative_list = Vec::new();
      
      for i in 0..arr.len()
          invariant
              negative_list@ == arr@.subrange(0, i as int).filter(|x: i32| x < 0),
      {
          if arr[i] < 0 {
              negative_list.push(arr[i]);
          }
          proof {
              assert(arr@.subrange(0, (i + 1) as int) == arr@.subrange(0, i as int).push(arr@[i as int]));
              prove_filter_push_lemma(arr@.subrange(0, i as int), arr@[i as int], |x: i32| x < 0);
              if arr[i as int] < 0 {
                  assert(negative_list@ == arr@.subrange(0, i as int).filter(|x: i32| x < 0).push(arr@[i as int]));
                  assert(arr@.subrange(0, (i + 1) as int).filter(|x: i32| x < 0) == 
                         arr@.subrange(0, i as int).push(arr@[i as int]).filter(|x: i32| x < 0));
                  assert(filter_push_lemma(arr@.subrange(0, i as int), arr@[i as int], |x: i32| x < 0));
                  assert(arr@.subrange(0, (i + 1) as int).filter(|x: i32| x < 0) == 
                         arr@.subrange(0, i as int).filter(|x: i32| x < 0).push(arr@[i as int]));
              } else {
                  assert(filter_push_lemma(arr@.subrange(0, i as int), arr@[i as int], |x: i32| x < 0));
                  assert(arr@.subrange(0, (i + 1) as int).filter(|x: i32| x < 0) == 
                         arr@.subrange(0, i as int).push(arr@[i as int]).filter(|x: i32| x < 0));
                  assert(arr@.subrange(0, (i + 1) as int).filter(|x: i32| x < 0) == 
                         arr@.subrange(0, i as int).filter(|x: i32| x < 0));
              }
          }
      }
      
      proof {
          assert(arr.len() as int == arr@.len());
          assert(arr@.subrange(0, arr.len() as int) == arr@);
      }
      
      negative_list
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

