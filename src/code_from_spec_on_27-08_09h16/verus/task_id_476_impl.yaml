vc-description: |-


vc-preamble: |-
  #![verifier::loop_isolation(false)]
  use vstd::math::*;
  use vstd::prelude::*;
  
  verus! {
  
  spec fn max_rcur(seq: Seq<i32>) -> (result:int)
      decreases seq.len(),
  {
      if seq.len() <= 1 {
          seq.first() as int
      } else {
          max(seq.last() as int, max_rcur(seq.drop_last()))
      }
  }
  // pure-end
  // pure-end
  
  spec fn min_rcur(seq: Seq<i32>) -> (result:int)
      decreases seq.len(),
  {
      if seq.len() <= 1 {
          seq.first() as int
      } else {
          min(seq.last() as int, min_rcur(seq.drop_last()))
      }
  }
  // pure-end

vc-helpers: |-
  proof fn lemma_max_rcur_extend(seq: Seq<i32>, elem: i32)
      requires seq.len() > 0
      ensures max_rcur(seq.push(elem)) == max(max_rcur(seq), elem as int)
      decreases seq.len()
  {
      if seq.len() == 1 {
          assert(seq.push(elem).drop_last() =~= seq);
      } else {
          lemma_max_rcur_extend(seq.drop_last(), elem);
      }
  }
  
  proof fn lemma_min_rcur_extend(seq: Seq<i32>, elem: i32)
      requires seq.len() > 0
      ensures min_rcur(seq.push(elem)) == min(min_rcur(seq), elem as int)
      decreases seq.len()
  {
      if seq.len() == 1 {
          assert(seq.push(elem).drop_last() =~= seq);
      } else {
          lemma_min_rcur_extend(seq.drop_last(), elem);
      }
  }
  
  fn max_iter(arr: &Vec<i32>) -> (result: i32)
      requires
          arr.len() > 0,
          forall|i: int| 0 <= i < arr.len() ==> i32::MIN / 2 < #[trigger] arr[i] < i32::MAX / 2,
      ensures
          result == max_rcur(arr@),
          i32::MIN / 2 < result < i32::MAX / 2,
  {
      let mut max_val = arr[0];
      let mut i = 1;
      
      while i < arr.len()
          invariant
              0 < i <= arr.len(),
              max_val == max_rcur(arr@.subrange(0, i as int)),
              i32::MIN / 2 < max_val < i32::MAX / 2,
          decreases arr.len() - i,
      {
          let old_max = max_val;
          if arr[i] > max_val {
              max_val = arr[i];
          }
          
          proof {
              lemma_max_rcur_extend(arr@.subrange(0, i as int), arr[i]);
              assert(arr@.subrange(0, (i + 1) as int) =~= arr@.subrange(0, i as int).push(arr[i]));
          }
          
          i += 1;
      }
      
      proof {
          assert(arr@.subrange(0, arr.len() as int) =~= arr@);
      }
      
      max_val
  }
  
  fn min_iter(arr: &Vec<i32>) -> (result: i32)
      requires
          arr.len() > 0,
          forall|i: int| 0 <= i < arr.len() ==> i32::MIN / 2 < #[trigger] arr[i] < i32::MAX / 2,
      ensures
          result == min_rcur(arr@),
          i32::MIN / 2 < result < i32::MAX / 2,
  {
      let mut min_val = arr[0];
      let mut i = 1;
      
      while i < arr.len()
          invariant
              0 < i <= arr.len(),
              min_val == min_rcur(arr@.subrange(0, i as int)),
              i32::MIN / 2 < min_val < i32::MAX / 2,
          decreases arr.len() - i,
      {
          let old_min = min_val;
          if arr[i] < min_val {
              min_val = arr[i];
          }
          
          proof {
              lemma_min_rcur_extend(arr@.subrange(0, i as int), arr[i]);
              assert(arr@.subrange(0, (i + 1) as int) =~= arr@.subrange(0, i as int).push(arr[i]));
          }
          
          i += 1;
      }
      
      proof {
          assert(arr@.subrange(0, arr.len() as int) =~= arr@);
      }
      
      min_val
  }

vc-spec: |-
  fn sum_min_max(arr: &Vec<i32>) -> (sum: i32)
      // pre-conditions-start
      requires
          arr.len() > 0,
          forall|i: int| 0 <= i < arr.len() ==> i32::MIN / 2 < #[trigger] arr[i] < i32::MAX / 2,
      // pre-conditions-end
      // post-conditions-start
      ensures
          sum == max_rcur(arr@) + min_rcur(arr@),
      // post-conditions-end

vc-code: |-
  {
      let max_val = max_iter(arr);
      let min_val = min_iter(arr);
      
      proof {
          assert(max_val == max_rcur(arr@));
          assert(min_val == min_rcur(arr@));
          assert(i32::MIN / 2 < max_val < i32::MAX / 2);
          assert(i32::MIN / 2 < min_val < i32::MAX / 2);
          assert(max_val as int + min_val as int > (i32::MIN as int));
          assert(max_val as int + min_val as int < (i32::MAX as int));
      }
      
      max_val + min_val
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

