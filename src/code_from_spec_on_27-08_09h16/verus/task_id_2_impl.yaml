vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  fn contains(arr: &Vec<i32>, key: i32) -> (result: bool)
      ensures
          result == (exists|i: int| 0 <= i < arr.len() && (arr[i] == key)),
  {
      let mut i = 0;
      while i < arr.len()
          invariant
              forall|m: int| 0 <= m < i ==> (arr[m] != key),
          decreases arr.len() - i,
      {
          if (arr[i] == key) {
              return true;
          }
          i += 1;
      }
      false
  }

vc-spec: |-
  fn shared_elements(list1: &Vec<i32>, list2: &Vec<i32>) -> (shared: Vec<i32>)
      // post-conditions-start
      ensures
          forall|i: int|
              0 <= i < shared.len() ==> (list1@.contains(#[trigger] shared[i]) && list2@.contains(
                  #[trigger] shared[i],
              )),
          forall|i: int, j: int| 0 <= i < j < shared.len() ==> shared[i] != shared[j],
      // post-conditions-end

vc-code: |-
  {
      let mut shared = Vec::new();
      let mut i = 0;
      
      while i < list1.len()
          invariant
              forall|k: int| 0 <= k < shared.len() ==> (list1@.contains(shared[k]) && list2@.contains(shared[k])),
              forall|k: int, j: int| 0 <= k < j < shared.len() ==> shared[k] != shared[j],
              forall|k: int| 0 <= k < shared.len() ==> exists|m: int| 0 <= m < i && #[trigger] list1[m] == #[trigger] shared[k],
          decreases list1.len() - i,
      {
          let current = list1[i];
          if contains(list2, current) && !contains(&shared, current) {
              shared.push(current);
          }
          i += 1;
      }
      
      shared
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

