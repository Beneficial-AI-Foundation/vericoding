vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  fn contains(arr: &Vec<i32>, key: i32) -> (result: bool)
      ensures
          result == (exists|i: int| 0 <= i < arr.len() && (arr[i] == key)),
  {
      let mut index = 0;
      while index < arr.len()
          invariant
              forall|m: int| 0 <= m < index ==> (arr[m] != key),
      {
          if (arr[index] == key) {
              return true;
          }
          index += 1;
      }
      false
  }
  
  proof fn lemma_vec_push<T>(vec: Seq<T>, i: T, l: usize)
      requires
          l == vec.len(),
      ensures
          forall|k: int| 0 <= k < vec.len() ==> #[trigger] vec[k] == vec.push(i)[k],
          vec.push(i).index(l as int) == i,
  {
  }
  
  proof fn lemma_contains_equivalence(arr: &Vec<i32>, key: i32)
      ensures
          contains(arr, key) == arr@.contains(key),
  {
  }
  
  proof fn lemma_vec_contains_push<T>(seq: Seq<T>, item: T, new_item: T)
      ensures
          seq.push(new_item).contains(item) == (seq.contains(item) || item == new_item),
  {
  }
  
  proof fn lemma_no_duplicates_preserved<T>(seq: Seq<T>, item: T)
      requires
          forall|i: int, j: int| 0 <= i < j < seq.len() ==> seq[i] != seq[j],
          !seq.contains(item),
      ensures
          forall|i: int, j: int| 0 <= i < j < seq.push(item).len() ==> seq.push(item)[i] != seq.push(item)[j],
  {
  }

vc-spec: |-
  fn difference(arr1: &Vec<i32>, arr2: &Vec<i32>) -> (result: Vec<i32>)
      // post-conditions-start
      ensures
          forall|i: int|
              0 <= i < arr1.len() ==> (!arr2@.contains(#[trigger] arr1[i]) ==> result@.contains(
                  arr1[i],
              )),
          forall|i: int|
              0 <= i < arr2.len() ==> (!arr1@.contains(#[trigger] arr2[i]) ==> result@.contains(
                  arr2[i],
              )),
          forall|i: int, j: int|
              0 <= i < j < result.len() ==> #[trigger] result[i] != #[trigger] result[j],
      // post-conditions-end

vc-code: |-
  {
      let mut result = Vec::new();
      let mut i = 0;
      
      while i < arr1.len()
          invariant
              0 <= i <= arr1.len(),
              forall|k: int| 0 <= k < i ==> (!arr2@.contains(arr1[k]) ==> result@.contains(arr1[k])),
              forall|k: int, l: int| 0 <= k < l < result.len() ==> result[k] != result[l],
      {
          if !contains(arr2, arr1[i]) && !contains(&result, arr1[i]) {
              proof {
                  lemma_contains_equivalence(arr2, arr1[i]);
                  lemma_contains_equivalence(&result, arr1[i]);
                  lemma_no_duplicates_preserved(result@, arr1[i]);
              }
              result.push(arr1[i]);
          }
          i += 1;
      }
      
      let mut j = 0;
      while j < arr2.len()
          invariant
              0 <= j <= arr2.len(),
              forall|k: int| 0 <= k < arr1.len() ==> (!arr2@.contains(arr1[k]) ==> result@.contains(arr1[k])),
              forall|k: int| 0 <= k < j ==> (!arr1@.contains(arr2[k]) ==> result@.contains(arr2[k])),
              forall|k: int, l: int| 0 <= k < l < result.len() ==> result[k] != result[l],
      {
          if !contains(arr1, arr2[j]) && !contains(&result, arr2[j]) {
              proof {
                  lemma_contains_equivalence(arr1, arr2[j]);
                  lemma_contains_equivalence(&result, arr2[j]);
                  lemma_no_duplicates_preserved(result@, arr2[j]);
              }
              result.push(arr2[j]);
          }
          j += 1;
      }
      
      result
  }

vc-postamble: |-
  
  } // verus!
  fn main() {}

