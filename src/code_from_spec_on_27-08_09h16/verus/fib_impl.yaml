vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn fibo(n: int) -> (result:nat)
      decreases n
  {
      if n <= 0 { 0 } else if n == 1 { 1 }
      else { fibo(n - 2) + fibo(n - 1) }
  }
  // pure-end
  // pure-end
  
  spec fn fibo_fits_i32(n: int) -> (result:bool) {
      fibo(n) < 0x8000_0000
  }
  // pure-end

vc-helpers: |-
  proof fn fibo_is_monotonic(i: int, j: int)
      requires
          i <= j,
      ensures
          fibo(i) <= fibo(j),
      decreases j - i
  {
      if i <= 0 {
      }
      else if  i < j {
          fibo_is_monotonic(i, j-1);
          assert(fibo(j) == fibo(j-1)+fibo(j-2));
      }
  }
  
  proof fn fibo_fits_propagates(n: int, k: int)
      requires
          fibo_fits_i32(n),
          0 <= k <= n,
      ensures
          fibo_fits_i32(k),
  {
      fibo_is_monotonic(k, n);
      assert(fibo(k) <= fibo(n));
      assert(fibo(n) < 0x8000_0000);
      assert(fibo(k) < 0x8000_0000);
  }
  
  proof fn fibo_addition_safe(i: int)
      requires
          i >= 2,
          fibo_fits_i32(i),
      ensures
          fibo(i - 2) + fibo(i - 1) < 0x8000_0000,
  {
      assert(fibo(i) == fibo(i - 2) + fibo(i - 1));
      assert(fibo(i) < 0x8000_0000);
  }

vc-spec: |-
  fn fibonacci(n: usize) -> (ret: Vec<i32>)
      // pre-conditions-start
      requires
          fibo_fits_i32(n as int),
          n >= 2,
      // pre-conditions-end
      // post-conditions-start
      ensures
          forall |i: int| 2 <= i < n ==> #[trigger] ret@[i] ==  fibo(i), 
          ret@.len() == n,
      // post-conditions-end

vc-code: |-
  {
      let mut result = Vec::new();
      result.push(0);
      result.push(1);
      
      proof {
          fibo_fits_propagates(n as int, 0);
          fibo_fits_propagates(n as int, 1);
      }
      
      let mut i = 2;
      while i < n
          invariant
              result.len() == i,
              i >= 2,
              i <= n,
              forall |j: int| 0 <= j < i ==> result@[j] == fibo(j),
              fibo_fits_i32(n as int),
          decreases n - i
      {
          proof {
              fibo_fits_propagates(n as int, i as int);
              fibo_addition_safe(i as int);
          }
          
          let next_fib = result[i - 2] + result[i - 1];
          result.push(next_fib);
          
          proof {
              assert(fibo(i as int) == fibo(i as int - 2) + fibo(i as int - 1));
              assert(result@[i - 2] == fibo(i as int - 2));
              assert(result@[i - 1] == fibo(i as int - 1));
              assert(next_fib == fibo(i as int));
          }
          
          i += 1;
      }
      
      result
  }

vc-postamble: |-
  
  }
  
  fn main() {}

