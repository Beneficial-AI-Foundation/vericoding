# Quality Analysis Configuration
# This file contains all configurable parameters for QA metadata generation

# Similarity Analysis Configuration - Optimized Vector Embeddings
similarity:
  # Similarity detection method: uses optimized vector embeddings with FAISS indexing
  method: "optimized_vector"   # Uses OptimizedVectorSimilarity class
  
  # Similarity threshold for near-duplicate detection (0.0-1.0)
  # Higher values = more strict (fewer matches), lower = more lenient (more matches)
  threshold: 0.85
  
  # Embedding focus determines what aspects of YAML files to compare
  # - "semantic": Focus on problem description and specification meaning
  # - "structural": Focus on code structure and helper functions  
  # - "balanced": Combine description, spec, and structural elements
  embedding_focus: "semantic"
  
  # SentenceTransformer model for generating embeddings
  # "all-MiniLM-L6-v2": Fast, lightweight, good quality (default)
  # "all-mpnet-base-v2": Higher quality but slower
  # "paraphrase-multilingual-MiniLM-L12-v2": For multilingual content
  embedding_model: "all-MiniLM-L6-v2"
  
  # Performance and caching settings
  max_examples: 5          # Maximum number of example files to return in results
  cache_dir: ".vector_cache"  # Directory for caching embeddings (speeds up repeated runs)
  batch_size: 32           # Batch size for embedding generation (higher = faster but more memory)
  use_gpu: false           # Whether to use GPU acceleration (requires CUDA)

# Scoring System Configuration
# Higher penalties = more impact on score (lower final score)
scoring:
  # Base score configuration
  base_score_mode: "proportional"  # Options: "fixed", "proportional", "logarithmic"
  
  # Fixed mode: constant base score regardless of benchmark size
  fixed_base_score: 100
  
  # Proportional mode: base_score = min(max_score, entries * points_per_entry)
  proportional_points_per_entry: 0.5    # Points per JSONL entry
  proportional_max_score: 500           # Maximum possible base score
  proportional_min_score: 50            # Minimum base score for small benchmarks
  
  # Logarithmic mode: base_score = log_multiplier * log(entries + 1)
  logarithmic_multiplier: 50            # Multiplier for log scaling
  
  # Verus-specific penalties (optimized for proportional base scoring)
  verus:
    specs_with_default_values_penalty: 5    # Penalty per spec with default values (reduced for better balance)
    execs_with_bodies_penalty: 12           # Penalty per executable with implementation (moderate penalty)
    execs_with_ghost_types_penalty: 0.5     # Penalty per executable with mathematical types (minimal impact)
    near_duplicates_penalty: 2              # Penalty per near-duplicate file (reduced)
  
  # Dafny-specific penalties (optimized for proportional base scoring)
  dafny:
    functions_with_default_values_penalty: 5   # Penalty per function with default values (reduced for balance)
    methods_with_bodies_penalty: 12           # Penalty per method with implementation (moderate penalty)
    near_duplicates_penalty: 2                # Penalty per near-duplicate file (reduced)
  
  # Lean-specific penalties (optimized for proportional base scoring)
  lean:
    definitions_with_sorry_penalty: 12        # Penalty per definition using sorry (reduced for balance)
    near_duplicates_penalty: 2               # Penalty per near-duplicate file (reduced)

# Quality Analysis Script Configuration
qa_scripts:
  # Timeout for running individual QA scripts (seconds)
  script_timeout: 300
  
  # Whether to include problematic directories by default
  include_problematic_dirs: false
  
  # Output format for QA scripts
  output_format: "json"

# Logging Configuration
logging:
  # Log level: "debug", "info", "warning", "error"
  level: "info"
  
  # Whether to show progress bars
  show_progress: true
