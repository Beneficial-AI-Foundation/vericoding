vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  spec fn subrange_extension_lemma<T>(s: Seq<T>, start: int, end1: int, end2: int, elem: T)
      requires 0 <= start <= end1 <= end2 <= s.len()
      ensures s.subrange(start, end1).contains(elem) ==> s.subrange(start, end2).contains(elem)
  {
      true
  }

vc-spec: |-
  fn largest_smallest_integers(arr: &Vec<i32>) -> (res: (Option<i32>, Option<i32>))
      // post-conditions-start
      ensures
          ({
              let a = res.0;
              let b = res.1;
              &&& a.is_none() ==> forall|i: int| 0 <= i < arr@.len() ==> arr@[i] >= 0
              &&& a.is_some() ==> arr@.contains(a.unwrap()) && a.unwrap() < 0
              &&& a.is_some() ==> forall|i: int|
                  0 <= i < arr@.len() && arr@[i] < 0 ==> arr@[i] <= a.unwrap()
              &&& b.is_none() ==> forall|i: int| 0 <= i < arr@.len() ==> arr@[i] <= 0
              &&& b.is_some() ==> arr@.contains(b.unwrap()) && b.unwrap() > 0
              &&& b.is_some() ==> forall|i: int|
                  0 <= i < arr@.len() && arr@[i] > 0 ==> arr@[i] >= b.unwrap()
          }),
      // post-conditions-end

vc-code: |-
  {
      let mut largest_negative: Option<i32> = None;
      let mut smallest_positive: Option<i32> = None;
      
      let mut i = 0;
      while i < arr.len()
          invariant
              0 <= i <= arr@.len(),
              largest_negative.is_none() ==> forall|j: int| 0 <= j < i ==> arr@[j] >= 0,
              largest_negative.is_some() ==> arr@.subrange(0, i as int).contains(largest_negative.unwrap()) && largest_negative.unwrap() < 0,
              largest_negative.is_some() ==> forall|j: int| 0 <= j < i && arr@[j] < 0 ==> arr@[j] <= largest_negative.unwrap(),
              smallest_positive.is_none() ==> forall|j: int| 0 <= j < i ==> arr@[j] <= 0,
              smallest_positive.is_some() ==> arr@.subrange(0, i as int).contains(smallest_positive.unwrap()) && smallest_positive.unwrap() > 0,
              smallest_positive.is_some() ==> forall|j: int| 0 <= j < i && arr@[j] > 0 ==> arr@[j] >= smallest_positive.unwrap(),
          decreases arr@.len() - i
      {
          let current = arr[i];
          
          if current < 0 {
              if largest_negative.is_none() || current > largest_negative.unwrap() {
                  largest_negative = Some(current);
              }
          } else if current > 0 {
              if smallest_positive.is_none() || current < smallest_positive.unwrap() {
                  smallest_positive = Some(current);
              }
          }
          
          i += 1;
          
          proof {
              if largest_negative.is_some() {
                  if arr@.subrange(0, (i-1) as int).contains(largest_negative.unwrap()) {
                      assert(arr@.subrange(0, i as int).contains(largest_negative.unwrap())) by {
                          assert(arr@.subrange(0, (i-1) as int).contains(largest_negative.unwrap()));
                          assert((i-1) as int < i as int);
                          assert(0 <= 0 <= (i-1) as int <= i as int <= arr@.len());
                      };
                  } else if largest_negative.unwrap() == current {
                      assert(arr@.subrange(0, i as int).contains(largest_negative.unwrap())) by {
                          assert(arr@[i-1] == current);
                          assert(arr@[i-1] == largest_negative.unwrap());
                          assert(0 <= i-1 < i as int);
                      };
                  }
              }
              if smallest_positive.is_some() {
                  if arr@.subrange(0, (i-1) as int).contains(smallest_positive.unwrap()) {
                      assert(arr@.subrange(0, i as int).contains(smallest_positive.unwrap())) by {
                          assert(arr@.subrange(0, (i-1) as int).contains(smallest_positive.unwrap()));
                          assert((i-1) as int < i as int);
                          assert(0 <= 0 <= (i-1) as int <= i as int <= arr@.len());
                      };
                  } else if smallest_positive.unwrap() == current {
                      assert(arr@.subrange(0, i as int).contains(smallest_positive.unwrap())) by {
                          assert(arr@[i-1] == current);
                          assert(arr@[i-1] == smallest_positive.unwrap());
                          assert(0 <= i-1 < i as int);
                      };
                  }
              }
          }
      }
      
      (largest_negative, smallest_positive)
  }

vc-postamble: |-
  
  }
  fn main() {}

