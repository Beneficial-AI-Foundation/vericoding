vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-


vc-spec: |-
  #[verifier::loop_isolation(false)]
  fn pairs_sum_to_zero(nums: &[i32], target: i32) -> (found: bool)
      // pre-conditions-start
      requires
          nums.len() >= 2,
          forall|i: int, j: int|
              0 <= i < j < nums.len() ==> nums[i] + nums[j] <= i32::MAX && nums[i] + nums[j]
                  >= i32::MIN,
      // pre-conditions-end
      // post-conditions-start
      ensures
          found <==> exists|i: int, j: int| 0 <= i < j < nums.len() && nums[i] + nums[j] == target,
      // post-conditions-end

vc-code: |-
  {
      let mut i = 0;
      while i < nums.len() - 1
          invariant
              0 <= i <= nums.len() - 1,
              forall|x: int, y: int| 0 <= x < y < nums.len() && x < i ==> nums[x] + nums[y] != target,
          decreases nums.len() - 1 - i
      {
          let mut j = i + 1;
          while j < nums.len()
              invariant
                  0 <= i < nums.len() - 1,
                  i + 1 <= j <= nums.len(),
                  forall|x: int, y: int| 0 <= x < y < nums.len() && x < i ==> nums[x] + nums[y] != target,
                  forall|y: int| i + 1 <= y < j ==> nums[i as int] + nums[y] != target,
              decreases nums.len() - j
          {
              if nums[i] + nums[j] == target {
                  return true;
              }
              j += 1;
          }
          i += 1;
      }
      false
  }

vc-postamble: |-
  
  }
  fn main() {}

