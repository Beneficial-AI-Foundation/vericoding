vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  // Helper lemmas for arithmetic bounds
  proof fn lemma_square_bounds(num: i32)
      requires i32::MIN <= num * num <= i32::MAX
      ensures num * num <= i32::MAX
  {
  }
  
  proof fn lemma_cube_bounds(num: i32) 
      requires 
          i32::MIN <= num * num <= i32::MAX,
          i32::MIN <= num * num * num <= i32::MAX
      ensures num * num * num <= i32::MAX && num * num * num >= i32::MIN
  {
  }

vc-spec: |-
  fn cube_element(nums: &Vec<i32>) -> (cubed: Vec<i32>)
      // pre-conditions-start
      requires
          forall|k: int|
              0 <= k < nums.len() ==> (i32::MIN <= #[trigger] nums[k] * #[trigger] nums[k]
                  <= i32::MAX),
          forall|k: int|
              0 <= k < nums.len() ==> (i32::MIN <= #[trigger] nums[k] * #[trigger] nums[k]
                  * #[trigger] nums[k] <= i32::MAX),
      // pre-conditions-end
      // post-conditions-start
      ensures
          forall|i: int|
              0 <= i < nums.len() ==> cubed[i] == #[trigger] nums[i] * #[trigger] nums[i]
                  * #[trigger] nums[i],
      // post-conditions-end

vc-code: |-
  {
      let mut result = Vec::new();
      let mut i = 0;
      
      while i < nums.len()
          invariant
              i <= nums.len(),
              result.len() == i,
              forall|j: int| 0 <= j < i ==> result[j] == nums[j] * nums[j] * nums[j],
          decreases nums.len() - i
      {
          let idx = i as usize;
          let num = nums[idx];
          proof {
              assert(0 <= idx < nums.len());
              assert(forall|k: int| 0 <= k < nums.len() ==> (i32::MIN <= nums[k] * nums[k] <= i32::MAX));
              assert(forall|k: int| 0 <= k < nums.len() ==> (i32::MIN <= nums[k] * nums[k] * nums[k] <= i32::MAX));
              assert(0 <= idx < nums.len());
              assert(i32::MIN <= nums[idx] * nums[idx] <= i32::MAX);
              assert(i32::MIN <= nums[idx] * nums[idx] * nums[idx] <= i32::MAX);
          }
          let square = num * num;
          let cube = square * num;
          result.push(cube);
          i += 1;
      }
      
      result
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

