vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  fn contains(arr: &Vec<i32>, key: i32) -> (result: bool)
      ensures
          result == (exists|i: int| 0 <= i < arr.len() && (arr[i] == key)),
  {
      let mut i = 0;
      while i < arr.len()
          invariant
              forall|m: int| 0 <= m < i ==> (arr[m] != key),
          decreases arr.len() - i,
      {
          if (arr[i] == key) {
              return true;
          }
          i += 1;
      }
      false
  }

vc-spec: |-
  fn intersection(arr1: &Vec<i32>, arr2: &Vec<i32>) -> (result: Vec<i32>)
      // post-conditions-start
      ensures
          forall|i: int|
              0 <= i < result.len() ==> (arr1@.contains(#[trigger] result[i]) && arr2@.contains(
                  #[trigger] result[i],
              )),
          forall|i: int, j: int| 0 <= i < j < result.len() ==> result[i] != result[j],
      // post-conditions-end

vc-code: |-
  {
      let mut result = Vec::new();
      let mut i = 0;
      while i < arr1.len()
          invariant
              forall|m: int| 0 <= m < result.len() ==> (arr1@.contains(result[m]) && arr2@.contains(result[m])),
              forall|m: int, n: int| 0 <= m < n < result.len() ==> result[m] != result[n],
              forall|m: int| 0 <= m < i ==> (arr2@.contains(arr1[m]) ==> result@.contains(arr1[m])),
          decreases arr1.len() - i,
      {
          let elem = arr1[i];
          let mut already_in_result = false;
          let mut j = 0;
          while j < result.len()
              invariant
                  forall|k: int| 0 <= k < j ==> result[k] != elem,
                  0 <= j <= result.len(),
              decreases result.len() - j,
          {
              if result[j] == elem {
                  already_in_result = true;
                  break;
              }
              j += 1;
          }
          if !already_in_result && contains(arr2, elem) {
              proof {
                  assert(forall|m: int| 0 <= m < result.len() ==> result[m] != elem);
                  assert(!result@.contains(elem));
              }
              result.push(elem);
              proof {
                  assert(arr2@.contains(elem));
                  assert(arr1@.contains(elem));
                  assert(forall|m: int| 0 <= m < result.len() - 1 ==> result[m] != elem);
                  assert(forall|m: int, n: int| 0 <= m < n < result.len() ==> result[m] != result[n]);
              }
          }
          proof {
              assert(forall|m: int| 0 <= m < i + 1 ==> (arr2@.contains(arr1[m]) ==> result@.contains(arr1[m])));
          }
          i += 1;
      }
      result
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

