vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn count_frequency_rcr(seq: Seq<char>, key: char) -> (result: int)
      decreases seq.len(),
  {
      if seq.len() == 0 {
          0
      } else {
          count_frequency_rcr(seq.drop_last(), key) + if (seq.last() == key) {
              1 as int
          } else {
              0 as int
          }
      }
  }
  // pure-end
  spec fn check_first_repeated_char(str1: &Vec<char>, repeated_char: Option<(usize, char)>) -> (res: bool) {
      if let Some((idx, rp_char)) = repeated_char {
          &&& str1@.take(idx as int) =~= str1@.take(idx as int).filter(
              |x: char| count_frequency_rcr(str1@, x) <= 1,
          )
          &&& count_frequency_rcr(str1@, rp_char) > 1
      } else {
          forall|k: int|
              0 <= k < str1.len() ==> count_frequency_rcr(str1@, #[trigger] str1[k]) <= 1
      }
  }
  // pure-end

vc-helpers: |-
  fn count_frequency(arr: &Vec<char>, key: char) -> (frequency: usize)
      ensures
          count_frequency_rcr(arr@, key) == frequency as int,
  {
      let mut index = 0;
      let mut counter = 0;
      while index < arr.len()
          invariant
              0 <= index <= arr.len(),
              0 <= counter <= index,
              count_frequency_rcr(arr@.subrange(0, index as int), key) == counter as int,
      {
          if (arr@[index] == key) {
              counter += 1;
          }
          index += 1;
          assert(arr@.subrange(0, index - 1 as int) == arr@.subrange(0, index as int).drop_last());
      }
      assert(arr@ == arr@.subrange(0, index as int));
      counter
  }

vc-spec: |-
  fn first_repeated_char(str1: &Vec<char>) -> (repeated_char: Option<(usize, char)>)
      // post-conditions-start
      ensures
          check_first_repeated_char(str1, repeated_char),
      // post-conditions-end

vc-code: |-
  {
      let mut i = 0;
      let mut seen_chars: Vec<char> = Vec::new();
      let mut frequencies: Vec<usize> = Vec::new();
  
      while i < str1.len()
          invariant
              0 <= i <= str1.len(),
              seen_chars.len() == frequencies.len(),
              forall|k: int| 0 <= k < seen_chars.len() ==> frequencies[k] as int == count_frequency_rcr(str1@.subrange(0, i as int), seen_chars@[k]),
              forall|k: int| 0 <= k < seen_chars.len() ==> seen_chars@.index(k) == seen_chars@[k],
              forall|k: int| 0 <= k < i ==> count_frequency_rcr(str1@.subrange(0, i as int), str1@[k]) <= 1,
      {
          let current_char = str1@[i];
          let mut found = false;
          let mut j = 0;
  
          while j < seen_chars.len()
              invariant
                  0 <= j <= seen_chars.len(),
                  0 <= i < str1.len(),
                  current_char == str1@[i],
                  seen_chars.len() == frequencies.len(),
                  forall|k: int| 0 <= k < seen_chars.len() ==> frequencies[k] as int == count_frequency_rcr(str1@.subrange(0, i as int), seen_chars@[k]),
          {
              if seen_chars@[j] == current_char {
                  frequencies[j] = frequencies[j] + 1;
                  found = true;
                  if frequencies[j] > 1 {
                      return Some((i, current_char));
                  }
              }
              j += 1;
          }
  
          if !found {
              seen_chars.push(current_char);
              frequencies.push(1);
          }
          i += 1;
      }
  
      None
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

