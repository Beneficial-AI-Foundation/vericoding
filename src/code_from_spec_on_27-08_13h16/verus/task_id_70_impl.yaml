vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  // No updates needed for helpers

vc-spec: |-
  fn all_sequence_equal_length(seq: &Vec<Vec<i32>>) -> (result: bool)
      // pre-conditions-start
      requires
          seq.len() > 0,
      // pre-conditions-end
      // post-conditions-start
      ensures
          result == (forall|i: int, j: int|
              (0 <= i < seq.len() && 0 <= j < seq.len()) ==> (#[trigger] seq[i].len()
                  == #[trigger] seq[j].len())),
      // post-conditions-end

vc-code: |-
  fn all_sequence_equal_length(seq: &Vec<Vec<i32>>) -> (result: bool)
      requires
          seq.len() > 0,
      ensures
          result == (forall|i: int, j: int|
              (0 <= i < seq.len() && 0 <= j < seq.len()) ==> (#[trigger] seq[i].len()
                  == #[trigger] seq[j].len())),
  {
      let first_len = seq[0].len();
      let mut i: usize = 1;
      let mut result = true;
      
      while i < seq.len()
          invariant
              0 <= i <= seq.len(),
              result ==> (forall|k: int| 0 <= k < i ==> #[trigger] seq[k].len() == first_len),
          decreases seq.len() - i,
      {
          if seq[i].len() != first_len {
              result = false;
              break;
          }
          i = i + 1;
      }
      
      if result {
          proof {
              assert(forall|i: int, j: int|
                  (0 <= i < seq.len() && 0 <= j < seq.len()) ==> seq[i].len() == seq[j].len());
          }
      } else {
          proof {
              assert(exists|i: int, j: int|
                  0 <= i < seq.len() && 0 <= j < seq.len() && seq[i].len() != seq[j].len());
              assert(seq[0].len() == first_len);
              if i < seq.len() {
                  assert(seq[i as int].len() != first_len);
              }
          }
      }
      
      result
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

