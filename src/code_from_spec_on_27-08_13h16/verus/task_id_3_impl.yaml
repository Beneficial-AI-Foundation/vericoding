vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  
  verus! {
  
  spec fn is_divisible(n: int, divisor: int) -> bool {
      (n % divisor) == 0
  }
  // pure-end

vc-helpers: |-
  proof fn prove_divisibility(n: int, divisor: int)
      requires
          2 <= divisor < n,
          n % divisor == 0,
      ensures
          exists|k: int| 2 <= k < n && is_divisible(n, k),
  {
      assert(is_divisible(n, divisor));
  }

vc-spec: |-
  fn is_non_prime(n: u64) -> (result: bool)
      // pre-conditions-start
      requires
          n >= 2,
      // pre-conditions-end
      // post-conditions-start
      ensures
          result == (exists|k: int| 2 <= k < n && is_divisible(n as int, k)),
      // post-conditions-end

vc-code: |-
  {
      let mut i: u64 = 2;
      while i < n
          invariant
              2 <= i <= n,
              forall|k: int| 2 <= k < i ==> !is_divisible(n as int, k),
          decreases
              n - i,
      {
          if (n % i) == 0 {
              proof {
                  prove_divisibility(n as int, i as int);
              }
              return true;
          }
          i = i + 1;
      }
      false
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

