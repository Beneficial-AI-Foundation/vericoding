vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn inner_epxr_replace_chars(str1: &Vec<char>, old_char: char, new_char: char, i: int) -> (result: char) {
      if str1[i] == old_char {
          new_char
      } else {
          str1[i]
      }
  }
  // pure-end

vc-helpers: |-
  spec fn inner_epxr_replace_chars(str1: &Vec<char>, old_char: char, new_char: char, i: int) -> char
  {
      if str1@[i] == old_char {
          new_char
      } else {
          str1@[i]
      }
  }

vc-spec: |-
  fn replace_chars(str1: &Vec<char>, old_char: char, new_char: char) -> (result: Vec<char>)
      // post-conditions-start
      ensures
          str1@.len() == result@.len(),
          forall|i: int|
              0 <= i < str1.len() ==> result[i] == inner_epxr_replace_chars(str1, old_char, new_char, i),
      // post-conditions-end

vc-code: |-
  fn replace_chars(str1: &Vec<char>, old_char: char, new_char: char) -> (result: Vec<char>)
      ensures
          str1@.len() == result@.len(),
          forall|i: int|
              0 <= i < str1.len() ==> result@[i] == inner_epxr_replace_chars(str1, old_char, new_char, i),
  {
      let mut result: Vec<char> = Vec::with_capacity(str1.len());
      let mut i: usize = 0;
  
      while i < str1.len()
          invariant
              0 <= i <= str1.len(),
              result@.len() == i,
              forall|k: int| 0 <= k < i ==> result@[k] == inner_epxr_replace_chars(str1, old_char, new_char, k),
      {
          let new_c = if str1@[i] == old_char {
              new_char
          } else {
              str1@[i]
          };
          result.push(new_c);
          i = i + 1;
      }
  
      result
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

