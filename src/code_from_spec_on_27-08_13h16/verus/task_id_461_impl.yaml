vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_lower_case(c: char) -> (result: bool) {
      (c as u32) >= 97 && (c as u32) <= 122
  }
  // pure-end
  // pure-end
  
  spec fn is_upper_case(c: char) -> (result: bool) {
      (c as u32) >= 65 && (c as u32) <= 90
  }
  // pure-end
  // pure-end
  
  spec fn count_uppercase_recursively(seq: Seq<char>) -> (result: int)
      decreases seq.len(),
  {
      if seq.len() == 0 {
          0
      } else {
          count_uppercase_recursively(seq.drop_last()) + if is_upper_case(seq.last()) {
              1 as int
          } else {
              0 as int
          }
      }
  }
  // pure-end

vc-helpers: |-
  proof fn lemma_count_uppercase_recursively_non_negative(seq: Seq<char>)
      ensures
          count_uppercase_recursively(seq) >= 0,
      decreases seq.len(),
  {
      if seq.len() == 0 {
      } else {
          lemma_count_uppercase_recursively_non_negative(seq.drop_last());
      }
  }
  
  proof fn lemma_count_uppercase_recursively_bounded(seq: Seq<char>)
      ensures
          0 <= count_uppercase_recursively(seq) <= seq.len(),
      decreases seq.len(),
  {
      if seq.len() == 0 {
      } else {
          lemma_count_uppercase_recursively_bounded(seq.drop_last());
      }
  }

vc-spec: |-
  fn count_uppercase(text: &Vec<char>) -> (count: u64)
      // post-conditions-start
      ensures
          0 <= count <= text.len(),
          count_uppercase_recursively(text@) == count,
      // post-conditions-end

vc-code: |-
  {
      let mut count: u64 = 0;
      let mut i: usize = 0;
      while i < text.len()
          invariant
              0 <= i <= text.len(),
              0 <= count <= i,
              count as int == count_uppercase_recursively(text@.subrange(0, i as int)),
          decreases text.len() - i,
      {
          if (text[i] as u32) >= 65 && (text[i] as u32) <= 90 {
              count = count + 1;
          }
          i = i + 1;
      }
      proof {
          lemma_count_uppercase_recursively_bounded(text@);
      }
      count
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

