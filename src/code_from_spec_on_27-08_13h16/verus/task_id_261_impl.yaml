vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  // No updates needed for helpers in this case

vc-spec: |-
  fn element_wise_division(arr1: &Vec<u32>, arr2: &Vec<u32>) -> (result: Vec<u32>)
      // pre-conditions-start
      requires
          arr1.len() == arr2.len(),
          forall|i: int| 0 <= i < arr2.len() ==> arr2[i] != 0,
          forall|m: int|
              0 <= m < arr1.len() ==> (u32::MIN <= #[trigger] arr1[m] / #[trigger] arr2[m]
                  <= u32::MAX),
      // pre-conditions-end
      // post-conditions-start
      ensures
          result.len() == arr1.len(),
          forall|i: int|
              0 <= i < result.len() ==> #[trigger] result[i] == #[trigger] (arr1[i] / arr2[i]),
      // post-conditions-end

vc-code: |-
  {
      let mut result: Vec<u32> = Vec::new();
      let mut i: usize = 0;
  
      while i < arr1.len()
          invariant
              arr1.len() == arr2.len(),
              forall|k: int| 0 <= k < arr2.len() ==> arr2[k] != 0,
              forall|m: int| 0 <= m < arr1.len() ==> (u32::MIN <= #[trigger] arr1[m] / #[trigger] arr2[m] <= u32::MAX),
              i <= arr1.len(),
              result.len() == i,
              forall|k: int| 0 <= k < i ==> #[trigger] result[k] == #[trigger] (arr1[k] / arr2[k]),
          decreases arr1.len() - i
      {
          result.push(arr1[i] / arr2[i]);
          i = i + 1;
      }
  
      result
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

