vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  
  verus! {

vc-helpers: |-
  // No updates needed in helpers for this specific case

vc-spec: |-
  fn split_array(list: &Vec<i32>, l: usize) -> (new_list: (Vec<i32>, Vec<i32>))
      // pre-conditions-start
      requires
          list@.len() > 0,
          0 < l < list@.len(),
      // pre-conditions-end
      // post-conditions-start
      ensures
          new_list.0@ == list@.subrange(0, l as int),
          new_list.1@ == list@.subrange(l as int, list.len() as int),
      // post-conditions-end

vc-code: |-
  {
      let mut first: Vec<i32> = Vec::new();
      let mut second: Vec<i32> = Vec::new();
      
      let mut i: usize = 0;
      while i < list.len()
          invariant
              0 <= i <= list.len(),
              first@ == list@.subrange(0, i as int),
              i >= l ==> second@ == list@.subrange(l as int, i as int),
          decreases list.len() - i
      {
          if i < l {
              first.push(list[i]);
          } else {
              second.push(list[i]);
          }
          i = i + 1;
      }
      (first, second)
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

