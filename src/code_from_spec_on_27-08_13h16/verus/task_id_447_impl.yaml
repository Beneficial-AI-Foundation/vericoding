vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  // No additional helpers needed for this fix

vc-spec: |-
  fn cube_element(nums: &Vec<i32>) -> (cubed: Vec<i32>)
      // pre-conditions-start
      requires
          forall|k: int|
              0 <= k < nums.len() ==> (i32::MIN <= #[trigger] nums[k] * #[trigger] nums[k]
                  <= i32::MAX),
          forall|k: int|
              0 <= k < nums.len() ==> (i32::MIN <= #[trigger] nums[k] * #[trigger] nums[k]
                  * #[trigger] nums[k] <= i32::MAX),
      // pre-conditions-end
      // post-conditions-start
      ensures
          forall|i: int|
              0 <= i < nums.len() ==> cubed[i] == #[trigger] nums[i] * #[trigger] nums[i]
                  * #[trigger] nums[i],
      // post-conditions-end

vc-code: |-
  {
      let mut cubed: Vec<i32> = Vec::new();
      let mut i: usize = 0;
  
      while i < nums.len()
          invariant
              i <= nums.len(),
              cubed.len() == i,
              forall|k: int| 0 <= k < i ==> cubed[k] == #[trigger] nums[k] * #[trigger] nums[k] * #[trigger] nums[k],
          decreases nums.len() - i
      {
          let val = nums[i];
          let squared = (val as i64) * (val as i64);
          let cubed_val = squared * (val as i64);
          // Use verifier::truncate to silence range warning
          cubed.push(#[verifier::truncate] cubed_val as i32);
          i = i + 1;
      }
  
      cubed
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

