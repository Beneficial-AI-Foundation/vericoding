vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_space_comma_dot_spec(c: char) -> (result: bool) {
      (c == ' ') || (c == ',') || (c == '.')
  }
  // pure-end
  // pure-end
  
  spec fn inner_expr_replace_with_colon(str1: &Vec<char>, k: int) -> (result: char) {
      if is_space_comma_dot_spec(str1[k]) {
          ':'
      } else {
          str1[k]
      }
  }
  // pure-end

vc-helpers: |-
  spec fn is_space_comma_dot(c: char) -> bool {
      (c == ' ') || (c == ',') || (c == '.')
  }

vc-spec: |-
  fn replace_with_colon(str1: &Vec<char>) -> (result: Vec<char>)
      // post-conditions-start
      ensures
          str1@.len() == result@.len(),
          forall|k: int|
              0 <= k < result.len() ==> #[trigger] result[k] == inner_expr_replace_with_colon(str1, k),
      // post-conditions-end

vc-code: |-
  fn replace_with_colon(str1: &Vec<char>) -> (result: Vec<char>)
      ensures
          str1@.len() == result@.len(),
          forall|k: int|
              0 <= k < result.len() ==> #[trigger] result[k] == inner_expr_replace_with_colon(str1, k),
  {
      let mut result: Vec<char> = Vec::new();
      let mut i: usize = 0;
      
      while i < str1.len()
          invariant
              i <= str1.len(),
              result@.len() == i,
              forall|k: int| 0 <= k < i ==> #[trigger] result[k] == inner_expr_replace_with_colon(str1, k),
      {
          let c = str1[i];
          if is_space_comma_dot_spec(c) {
              result.push(':');
          } else {
              result.push(c);
          }
          i = i + 1;
      }
      
      result
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

