vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus!{

vc-helpers: |-
  proof fn sum_bounds(N: i32, b: &Vec<i32>)
      requires
          forall |k: usize| 0 <= k < N as usize ==> k as i32 <= #[trigger] b.view()[k] <= k as i32 + 1,
          N <= 0x3FFF_FFFF,
      ensures
          N <= vec_sum(b, N) <= 2 * N,
  {
      let mut sum: i32 = 0;
      let mut i: i32 = 0;
      while i < N
          invariant
              0 <= i <= N,
              i <= sum <= 2 * i,
      {
          sum = sum + b.view()[i as usize];
          assert(i <= b.view()[i as usize] <= i + 1);
          assert(i + 1 <= sum <= i + 1 + i);
          i = i + 1;
      }
      assert(sum == vec_sum(b, N));
  }
  
  spec fn vec_sum(v: &Vec<i32>, n: i32) -> i32
      decreases n
  {
      if n <= 0 {
          0
      } else {
          vec_sum(v, n - 1) + v.view()[(n - 1) as usize]
      }
  }

vc-spec: |-
  fn simple_nested(a: &mut Vec<i32>, b: &Vec<i32>, N: i32) -> (sum: i32)
      // pre-conditions-start
      requires 
          forall |k:int| k <= #[trigger] b[k] <= k + 1,
          old(a).len() == N,
          b.len() == N,
          N <= 0x3FFF_FFFF,
      // pre-conditions-end
      // post-conditions-start
      ensures
          N <= sum <= 2*N,
      // post-conditions-end

vc-code: |-
  fn simple_nested(a: &mut Vec<i32>, b: &Vec<i32>, N: i32) -> (sum: i32)
      requires
          forall |k: usize| 0 <= k < N as usize ==> k as i32 <= #[trigger] b.view()[k] <= k as i32 + 1,
          old(a).len() == N as usize,
          b.len() == N as usize,
          N <= 0x3FFF_FFFF,
      ensures
          N <= sum <= 2 * N,
  {
      let mut sum: i32 = 0;
      let mut i: i32 = 0;
      while i < N
          invariant
              0 <= i <= N,
              old(a).len() == N as usize,
              b.len() == N as usize,
              N <= 0x3FFF_FFFF,
              forall |k: usize| 0 <= k < N as usize ==> k as i32 <= #[trigger] b.view()[k] <= k as i32 + 1,
              i <= sum <= 2 * i,
      {
          sum = sum + b.view()[i as usize];
          assert(i <= b.view()[i as usize] <= i + 1);
          assert(i + 1 <= sum <= i + 1 + i);
          i = i + 1;
      }
      proof {
          sum_bounds(N, b);
      }
      sum
  }

vc-postamble: |-
  
  }
  
  fn main() {}

