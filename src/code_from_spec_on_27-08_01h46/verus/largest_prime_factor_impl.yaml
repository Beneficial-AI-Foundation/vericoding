vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_prime_pred(n: u32) -> (ret: bool) {
      forall|k: int| 2 <= k < n ==> #[trigger] (n as int % k) != 0
  }

vc-helpers: |-
  #[verifier::loop_isolation(false)]
  fn is_prime(n: u32) -> (result: bool)
      requires
          n >= 2,
      ensures
          result ==> (forall|k: int| 2 <= k < n ==> #[trigger] (n as int % k) != 0),
          !result ==> exists|k: int| 2 <= k < n && #[trigger] (n as int % k) == 0,
  {
      let mut i = 2;
      let mut result = true;
      while i < n
          invariant
              2 <= i <= n,
              result ==> forall|k: int| 2 <= k < i ==> #[trigger] (n as int % k) != 0,
              !result ==> exists|k: int| 2 <= k < i && #[trigger] (n as int % k) == 0,
          decreases n - i
      {
          if n % i == 0 {
              result = false;
          }
          i = i + 1;
      }
      result
  }
  
  spec fn divides(a: int, b: int) -> bool {
      b % a == 0
  }
  
  proof fn prime_factor_exists(n: u32)
      requires n >= 2
      ensures exists|p: int| 2 <= p <= n && is_prime_pred(p as u32) && divides(p, n as int)
      decreases n
  {
      if is_prime_pred(n) {
          assert(divides(n as int, n as int));
      } else {
          assert(exists|k: int| 2 <= k < n && #[trigger] (n as int % k) == 0) by {
              assert(!is_prime_pred(n));
              assert(exists|k: int| 2 <= k < n && #[trigger] (n as int % k) == 0);
          }
          let k = choose|k: int| 2 <= k < n && (n as int % k) == 0;
          assert(2 <= k < n);
          assert(k >= 2);
          assert(divides(k, n as int));
          prime_factor_exists(k as u32);
          assert(exists|p: int| 2 <= p <= k && is_prime_pred(p as u32) && divides(p, k as int));
          let p = choose|p: int| 2 <= p <= k && is_prime_pred(p as u32) && divides(p, k as int);
          assert(divides(p, n as int)) by {
              assert(divides(p, k as int));
              assert(divides(k, n as int));
              assert((k as int) % p == 0);
              assert((n as int) % k == 0);
          }
      }
  }

vc-spec: |-
  #[verifier::loop_isolation(false)]
  fn largest_prime_factor(n: u32) -> (result: u32)
      requires
          2 <= n <= u32::MAX - 1,
      ensures
          1 <= result <= n,
          result == 1 || (result > 1 && is_prime_pred(result))

vc-code: |-
  {
      let mut current = n;
      let mut largest_factor = 1u32;
      
      let mut i = 2;
      while i <= current && i * i <= current
          invariant
              2 <= i <= current + 1,
              i * i <= (current as int) + 1,
              1 <= largest_factor <= n,
              largest_factor == 1 || (largest_factor > 1 && is_prime_pred(largest_factor)),
              current >= 1,
          decreases current - i + 1
      {
          if current % i == 0 {
              largest_factor = i;
              while current % i == 0
                  invariant
                      current >= 1,
                      i >= 2,
                      largest_factor == i,
                      largest_factor >= 2,
                  decreases current
              {
                  current = current / i;
              }
          }
          i = i + 1;
      }
      
      if current > 1 {
          largest_factor = current;
      }
      
      if largest_factor == 1 {
          largest_factor = n;
      }
      
      largest_factor
  }

vc-postamble: |-
  
  fn main() {}
  }

