vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-


vc-spec: |-
  fn remove_odds(arr: &Vec<u32>) -> (even_list: Vec<u32>)
      // post-conditions-start
      ensures
          even_list@ == arr@.filter(|x: u32| x % 2 == 0),
      // post-conditions-end

vc-code: |-
  {
      let mut result = Vec::new();
      let mut i = 0;
      while i < arr.len()
          invariant
              i <= arr.len(),
              result@ == arr@.subrange(0, i as int).filter(|x: u32| x % 2 == 0),
          decreases arr.len() - i,
      {
          if arr[i] % 2 == 0 {
              result.push(arr[i]);
          }
          i += 1;
          proof {
              let prev_subrange = arr@.subrange(0, (i-1) as int);
              let curr_subrange = arr@.subrange(0, i as int);
              assert(curr_subrange == prev_subrange + seq![arr@[(i-1) as int]]);
              
              if arr@[(i-1) as int] % 2 == 0 {
                  assert(curr_subrange.filter(|x: u32| x % 2 == 0) == 
                         prev_subrange.filter(|x: u32| x % 2 == 0) + seq![arr@[(i-1) as int]]);
              } else {
                  assert(curr_subrange.filter(|x: u32| x % 2 == 0) == 
                         prev_subrange.filter(|x: u32| x % 2 == 0));
              }
          }
      }
      proof {
          assert(i == arr.len());
          assert(arr@.subrange(0, i as int) == arr@);
      }
      result
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

