vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  fn contains(arr: &Vec<i32>, key: i32) -> (result: bool)
      ensures
          result == (exists|i: int| 0 <= i < arr.len() && (arr[i] == key)),
  {
      let mut i = 0;
      while i < arr.len()
          invariant
              forall|m: int| 0 <= m < i ==> (arr[m] != key),
          decreases arr.len() - i
      {
          if (arr[i] == key) {
              return true;
          }
          i += 1;
      }
      false
  }
  
  fn vec_contains(v: &Vec<i32>, key: i32) -> (result: bool)
      ensures
          result == v@.contains(key)
  {
      let mut i = 0;
      while i < v.len()
          invariant
              forall|j: int| 0 <= j < i ==> v[j] != key
          decreases v.len() - i
      {
          if v[i] == key {
              return true;
          }
          i += 1;
      }
      false
  }

vc-spec: |-
  fn shared_elements(list1: &Vec<i32>, list2: &Vec<i32>) -> (shared: Vec<i32>)
      // post-conditions-start
      ensures
          forall|i: int|
              0 <= i < shared.len() ==> (list1@.contains(#[trigger] shared[i]) && list2@.contains(
                  #[trigger] shared[i],
              )),
          forall|i: int, j: int| 0 <= i < j < shared.len() ==> shared[i] != shared[j],
      // post-conditions-end

vc-code: |-
  {
      let mut shared = Vec::new();
      let mut i = 0;
      
      while i < list1.len()
          invariant
              0 <= i <= list1.len(),
              forall|k: int| 0 <= k < shared.len() ==> (list1@.contains(shared[k]) && list2@.contains(shared[k])),
              forall|k1: int, k2: int| 0 <= k1 < k2 < shared.len() ==> shared[k1] != shared[k2]
          decreases list1.len() - i
      {
          let element = list1[i];
          
          if vec_contains(list2, element) && !vec_contains(&shared, element) {
              shared.push(element);
          }
          
          i += 1;
      }
      
      shared
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

