vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-


vc-spec: |-
  fn reverse_to_k(list: &Vec<i32>, n: usize) -> (reversed_list: Vec<i32>)
      // pre-conditions-start
      requires
          list@.len() > 0,
          0 < n < list@.len(),
      // pre-conditions-end
      // post-conditions-start
      ensures
          reversed_list@ == list@.subrange(0, n as int).reverse().add(
              list@.subrange(n as int, list.len() as int),
          ),
      // post-conditions-end

vc-code: |-
  {
      let mut result = Vec::new();
      
      let mut i = 0;
      while i < n
          invariant
              0 <= i <= n,
              n < list@.len(),
              result@.len() == i,
              forall|k: int| 0 <= k < i ==> result@[k] == list@[n - 1 - k],
          decreases n - i
      {
          result.push(list[n - 1 - i]);
          i += 1;
      }
      
      let mut j = n;
      while j < list.len()
          invariant
              n <= j <= list@.len(),
              result@ == list@.subrange(0, n as int).reverse().add(
                  list@.subrange(n as int, j as int)
              ),
          decreases list.len() - j
      {
          result.push(list[j]);
          j += 1;
      }
      
      result
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

