vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn in_array(a: Seq<i32>, x: i32) -> (ret: bool) {
      exists|i: int| 0 <= i < a.len() && a[i] == x
  }

vc-helpers: |-
  fn in_array_exec(a: &Vec<i32>, x: i32) -> (result: bool)
      ensures
          result == in_array(a@, x),
  {
      let mut i = 0;
      while i < a.len()
          invariant
              0 <= i <= a.len(),
              forall|k: int| 0 <= k < i ==> a[k] != x,
          decreases a.len() - i,
      {
          if a[i] == x {
              return true;
          }
          i = i + 1;
      }
      false
  }
  
  proof fn lemma_not_in_array_means_forall_ne(a: Seq<i32>, x: i32)
      requires !in_array(a, x)
      ensures forall|k: int| 0 <= k < a.len() ==> a[k] != x
  {
  }
  
  proof fn lemma_unique_preservation(c: Seq<i32>, x: i32)
      requires 
          forall|i: int, j: int| 0 <= i < j < c.len() ==> c[i] != c[j],
          !in_array(c, x)
      ensures 
          forall|i: int, j: int| 0 <= i < j < c.push(x).len() ==> c.push(x)[i] != c.push(x)[j]
  {
  }

vc-spec: |-
  #[verifier::loop_isolation(false)]
  fn remove_elements(a: &Vec<i32>, b: &Vec<i32>) -> (c: Vec<i32>)
      // post-conditions-start
      ensures
          forall|k: int| #![auto] 0 <= k < c.len() ==> in_array(a@, c[k]) && !in_array(b@, c[k]),
          forall|i: int, j: int| 0 <= i < j < c.len() ==> c[i] != c[j],
      // post-conditions-end

vc-code: |-
  {
      let mut c: Vec<i32> = vec![];
      let mut i = 0;
      
      while i < a.len()
          invariant
              0 <= i <= a.len(),
              forall|k: int| #![auto] 0 <= k < c@.len() ==> in_array(a@, c@[k]) && !in_array(b@, c@[k]),
              forall|j: int, k: int| 0 <= j < k < c@.len() ==> c@[j] != c@[k],
          decreases a.len() - i,
      {
          if in_array_exec(a, a[i]) && !in_array_exec(b, a[i]) && !in_array_exec(&c, a[i]) {
              proof {
                  lemma_unique_preservation(c@, a[i as int]);
              }
              c.push(a[i]);
          }
          i = i + 1;
      }
      
      c
  }

vc-postamble: |-
  
  fn main() {}
  }

