vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus!{

vc-helpers: |-
  spec fn bounded_array_sum(a: Seq<i32>, len: int) -> int
      decreases len
  {
      if len <= 0 { 0 }
      else { 
          let elem = if a[len - 1] > 0 { a[len - 1] as int } else { 0int };
          bounded_array_sum(a, len - 1) + elem
      }
  }

vc-spec: |-
  fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32) 
  	// pre-conditions-start
  	requires 
  		old(a).len() == N,
  		old(sum).len() == 1,
  		N > 0,
  		N < 1000,
  	// pre-conditions-end
  	// post-conditions-start
  	ensures
  		sum[0] <= 4 * N,
  	// post-conditions-end

vc-code: |-
  {
      // impl-start
      let mut total = 0i32;
      let mut i = 0;
      let max_total = 4 * N;
      
      while i < N
          invariant
              0 <= i <= N,
              total <= max_total,
              total >= 0,
              a.len() == N,
              sum.len() == 1,
              max_total == 4 * N,
          decreases N - i,
      {
          if a[i as usize] > 0 {
              if a[i as usize] <= max_total - total {
                  total = total + a[i as usize];
              } else {
                  total = max_total;
                  break;
              }
          }
          i = i + 1;
      }
      
      sum.set(0, total);
      // impl-end
  }

vc-postamble: |-
  
  }
  
  fn main() {}

