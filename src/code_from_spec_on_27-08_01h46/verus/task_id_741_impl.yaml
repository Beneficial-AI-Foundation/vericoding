vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  
  verus! {

vc-helpers: |-
  // </vc-helpers>

vc-spec: |-
  fn all_characters_same(char_arr: &Vec<char>) -> (result: bool)
      // post-conditions-start
      ensures
          result == (forall|i: int|
              1 <= i < char_arr@.len() ==> char_arr[0] == #[trigger] char_arr[i]),
      // post-conditions-end

vc-code: |-
  {
      if char_arr.len() == 0 {
          return true;
      }
      
      let first_char = char_arr[0];
      let mut i = 1;
      
      while i < char_arr.len()
          invariant
              1 <= i <= char_arr@.len(),
              forall|j: int| 1 <= j < i ==> char_arr[0] == #[trigger] char_arr[j],
          decreases char_arr@.len() - i
      {
          if char_arr[i] != first_char {
              proof {
                  assert(char_arr[i as int] != char_arr[0]);
                  assert(!(char_arr[0] == char_arr[i as int]));
                  assert(1 <= i < char_arr@.len());
                  assert(exists|k: int| 1 <= k < char_arr@.len() && char_arr[0] != char_arr[k]);
                  assert(!(forall|k: int| 1 <= k < char_arr@.len() ==> char_arr[0] == char_arr[k]));
              }
              return false;
          }
          i += 1;
      }
      
      proof {
          assert(i == char_arr.len());
          assert(forall|j: int| 1 <= j < i ==> char_arr[0] == char_arr[j]);
          assert(forall|j: int| 1 <= j < char_arr@.len() ==> char_arr[0] == char_arr[j]);
      }
      
      true
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

