vc-description: |-


vc-preamble: |-
  #![verifier::loop_isolation(false)]
  use vstd::math::*;
  use vstd::prelude::*;
  
  verus! {
  
  spec fn max_rcur(seq: Seq<i32>) -> (result:int)
      decreases seq.len(),
  {
      if seq.len() <= 1 {
          seq.first() as int
      } else {
          max(seq.last() as int, max_rcur(seq.drop_last()))
      }
  }
  // pure-end
  // pure-end
  
  spec fn min_rcur(seq: Seq<i32>) -> (result:int)
      decreases seq.len(),
  {
      if seq.len() <= 1 {
          seq.first() as int
      } else {
          min(seq.last() as int, min_rcur(seq.drop_last()))
      }
  }
  // pure-end

vc-helpers: |-
  spec fn max_iter(seq: Seq<i32>, i: int) -> int
      requires seq.len() > 0
      requires 0 <= i < seq.len()
      decreases i
  {
      if i == 0 {
          seq[0] as int
      } else {
          max(seq[i] as int, max_iter(seq, i - 1))
      }
  }
  
  spec fn min_iter(seq: Seq<i32>, i: int) -> int
      requires seq.len() > 0
      requires 0 <= i < seq.len()
      decreases i
  {
      if i == 0 {
          seq[0] as int
      } else {
          min(seq[i] as int, min_iter(seq, i - 1))
      }
  }
  
  proof fn max_equivalence(seq: Seq<i32>)
      requires seq.len() > 0
      ensures max_rcur(seq) == max_iter(seq, seq.len() as int - 1)
      decreases seq.len()
  {
      if seq.len() <= 1 {
          assert(max_rcur(seq) == seq.first() as int);
          assert(max_iter(seq, 0) == seq[0] as int);
          assert(seq.first() == seq[0]);
      } else {
          max_equivalence(seq.drop_last());
          assert(max_iter(seq.drop_last(), seq.drop_last().len() as int - 1) == max_rcur(seq.drop_last()));
          assert(seq.drop_last().len() == seq.len() - 1);
          assert(seq.last() == seq[seq.len() as int - 1]);
          assert(seq.drop_last()[seq.drop_last().len() as int - 1] == seq[seq.len() as int - 2]);
          assert(max_iter(seq, seq.len() as int - 1) == max(seq[seq.len() as int - 1] as int, max_iter(seq, seq.len() as int - 2)));
      }
  }
  
  proof fn min_equivalence(seq: Seq<i32>)
      requires seq.len() > 0
      ensures min_rcur(seq) == min_iter(seq, seq.len() as int - 1)
      decreases seq.len()
  {
      if seq.len() <= 1 {
          assert(min_rcur(seq) == seq.first() as int);
          assert(min_iter(seq, 0) == seq[0] as int);
          assert(seq.first() == seq[0]);
      } else {
          min_equivalence(seq.drop_last());
          assert(min_iter(seq.drop_last(), seq.drop_last().len() as int - 1) == min_rcur(seq.drop_last()));
          assert(seq.drop_last().len() == seq.len() - 1);
          assert(seq.last() == seq[seq.len() as int - 1]);
          assert(seq.drop_last()[seq.drop_last().len() as int - 1] == seq[seq.len() as int - 2]);
          assert(min_iter(seq, seq.len() as int - 1) == min(seq[seq.len() as int - 1] as int, min_iter(seq, seq.len() as int - 2)));
      }
  }
  
  proof fn max_iter_property(seq: Seq<i32>, i: int)
      requires seq.len() > 0
      requires 0 <= i < seq.len()
      ensures max_iter(seq, i) == max_iter(seq, 0) || (exists|j: int| 0 < j <= i && max_iter(seq, i) == seq[j] as int)
      decreases i
  {
      if i == 0 {
      } else {
          max_iter_property(seq, i - 1);
      }
  }
  
  proof fn min_iter_property(seq: Seq<i32>, i: int)
      requires seq.len() > 0
      requires 0 <= i < seq.len()
      ensures min_iter(seq, i) == min_iter(seq, 0) || (exists|j: int| 0 < j <= i && min_iter(seq, i) == seq[j] as int)
      decreases i
  {
      if i == 0 {
      } else {
          min_iter_property(seq, i - 1);
      }
  }

vc-spec: |-
  fn sum_min_max(arr: &Vec<i32>) -> (sum: i32)
      // pre-conditions-start
      requires
          arr.len() > 0,
          forall|i: int| 0 <= i < arr.len() ==> i32::MIN / 2 < #[trigger] arr[i] < i32::MAX / 2,
      // pre-conditions-end
      // post-conditions-start
      ensures
          sum == max_rcur(arr@) + min_rcur(arr@),
      // post-conditions-end

vc-code: |-
  {
      let mut max_val = arr[0];
      let mut min_val = arr[0];
      let mut i = 1;
      
      while i < arr.len()
          invariant
              0 < i <= arr.len(),
              max_val == max_iter(arr@, i as int - 1),
              min_val == min_iter(arr@, i as int - 1),
              i32::MIN / 2 < max_val < i32::MAX / 2,
              i32::MIN / 2 < min_val < i32::MAX / 2,
          decreases arr.len() - i,
      {
          if arr[i] > max_val {
              max_val = arr[i];
          }
          if arr[i] < min_val {
              min_val = arr[i];
          }
          i += 1;
      }
      
      proof {
          max_equivalence(arr@);
          min_equivalence(arr@);
          max_iter_property(arr@, arr.len() as int - 1);
          min_iter_property(arr@, arr.len() as int - 1);
          assert(max_val as int + min_val as int == max_rcur(arr@) + min_rcur(arr@));
      }
      
      max_val + min_val
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

