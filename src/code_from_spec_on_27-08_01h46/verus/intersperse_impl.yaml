vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-


vc-spec: |-
  fn intersperse(numbers: &[i32], delim: i32) -> (res: Vec<i32>)
      // post-conditions-start
      ensures
          numbers.len() == 0 ==> res.len() == 0,
          numbers.len() != 0 ==> res.len() == 2 * numbers.len() - 1,
          forall|i: int| 0 <= i && i < res.len() && i % 2 == 0 ==> res[i] == numbers[i / 2],
          forall|i: int| 0 <= i && i < res.len() && i % 2 == 1 ==> res[i] == delim
      // post-conditions-end

vc-code: |-
  {
      if numbers.len() == 0 {
          return vec![];
      }
      
      let mut result = Vec::new();
      
      let mut i = 0;
      while i < numbers.len()
          invariant
              0 <= i <= numbers.len(),
              i == 0 ==> result.len() == 0,
              i > 0 ==> result.len() == 2 * i - 1,
              forall|j: int| 0 <= j && j < result.len() && j % 2 == 0 ==> result[j] == numbers[j / 2],
              forall|j: int| 0 <= j && j < result.len() && j % 2 == 1 ==> result[j] == delim
          decreases numbers.len() - i
      {
          if i > 0 {
              result.push(delim);
          }
          result.push(numbers[i]);
          i += 1;
      }
      
      result
  }

vc-postamble: |-
  
  fn main() {}
  }

