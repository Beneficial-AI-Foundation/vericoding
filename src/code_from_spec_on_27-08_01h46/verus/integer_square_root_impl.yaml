vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  spec fn is_perfect_square_root(n: i32, result: i32) -> bool {
      result * result <= n && n < (result + 1) * (result + 1)
  }
  
  proof fn arithmetic_bounds(n: i32, result: i32)
      requires
          n >= 1,
          0 <= result,
          result * result <= n,
      ensures
          result + 1 <= n + 1,
          (result + 1) * (result + 1) <= (n + 1) * (n + 1),
  {
      assert(result <= n);
      assert(result + 1 <= n + 1);
      assert((result + 1) * (result + 1) <= (n + 1) * (n + 1));
  }

vc-spec: |-
  fn integer_square_root(n: i32) -> (result: i32)
      // pre-conditions-start
      requires
          n >= 1,
      // pre-conditions-end
      // post-conditions-start
      ensures
          0 <= result * result,
          result * result <= n,
          n < (result + 1) * (result + 1)
      // post-conditions-end

vc-code: |-
  {
      let mut result = 0;
      
      while result * result < n
          invariant
              0 <= result,
              result * result <= n,
          decreases n - result * result,
      {
          if (result + 1) <= 46340 && (result + 1) * (result + 1) <= n {
              result = result + 1;
          } else {
              break;
          }
      }
      
      result
  }

vc-postamble: |-
  
  fn main() {}
  }

