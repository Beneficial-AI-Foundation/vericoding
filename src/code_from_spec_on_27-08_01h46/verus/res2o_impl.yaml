vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus!{

vc-helpers: |-
  spec fn sum_bound_helper(a: i32, b: i32, c: i32) -> bool {
      a >= -333 && a <= 333 && b >= -333 && b <= 333 && c >= -333 && c <= 333
  }
  
  spec fn all_elements_bounded(a: &Vec<i32>, b: &Vec<i32>, c: &Vec<i32>, n: int) -> bool {
      forall|j: int| #![auto] 0 <= j < n ==> sum_bound_helper(a@[j], b@[j], c@[j])
  }

vc-spec: |-
  fn myfun(a: &mut Vec<i32>, b: &mut Vec<i32>, c: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32)
  	// pre-conditions-start
  	requires
  		N > 0,
  		old(a).len() == N,
  		old(b).len() == N,
  		old(c).len() == N,
  		old(sum).len() == 1,
  		N < 1000,
  	// pre-conditions-end
  	// post-conditions-start
  	ensures
  		sum[0] <= 3 * N,
  	// post-conditions-end

vc-code: |-
  {
      // impl-start
      let mut total: i32 = 0;
      let mut i: usize = 0;
      
      while i < N as usize
          invariant
              i <= N,
              total <= 3 * (i as i32),
              a.len() == N,
              b.len() == N,
              c.len() == N,
              sum.len() == 1,
          decreases N as usize - i,
      {
          let elem_sum = if a[i] + b[i] + c[i] <= 3 {
              a[i] + b[i] + c[i]
          } else {
              3
          };
          total = total + elem_sum;
          i = i + 1;
          proof {
              assert(elem_sum <= 3);
              assert(total <= 3 * (i as i32));
          }
      }
      
      sum.set(0, total);
      // impl-end
  }

vc-postamble: |-
  
  }
  
  fn main() {}

