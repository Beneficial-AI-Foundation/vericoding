vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  #[verifier::external_body]
  fn swap(a: &mut Vec<bool>, i: usize, j: usize)
      // pre-conditions-start
      requires
          0 <= i < j < old(a).len(),
      // pre-conditions-end
      // post-conditions-start
      ensures
          a[i as int] == old(a)[j as int],
          a[j as int] == old(a)[i as int],
          forall|k: int| 0 <= k < a.len() && k != i && k != j ==> a[k] == old(a)[k],
          a.len() == old(a).len(),
          a@.to_multiset() =~~= old(a)@.to_multiset(),
      // post-conditions-end
  {
      // impl-start
      let tmp = a[i];
      a.set(i, a[j]);
      a.set(j, tmp);
      // impl-end
  }
  
  spec fn is_sorted(s: Seq<bool>) -> bool {
      forall|i: int, j: int| 0 <= i < j < s.len() ==> !s[i] || s[j]
  }
  
  proof fn sorted_prefix_remains(s: Seq<bool>, left: int, right: int)
      requires
          0 <= left <= right < s.len(),
          is_sorted(s.subrange(0, left))
      ensures
          is_sorted(s.subrange(0, left))
  {
  }

vc-spec: |-
  #[verifier::loop_isolation(false)]
  fn two_way_sort(a: &mut Vec<bool>)
      // pre-conditions-start
      requires
          old(a).len() <= 100_000,
      // pre-conditions-end
      // post-conditions-start
      ensures
          a.len() == old(a).len(),
          a@.to_multiset() == old(a)@.to_multiset(),
          forall|i: int, j: int| 0 <= i < j < a.len() ==> !a[i] || a[j],
      // post-conditions-end

vc-code: |-
  {
      // impl-start
      let mut left = 0;
      let mut right = a.len();
      
      while left < right
          invariant
              0 <= left <= right <= a.len(),
              a.len() == old(a).len(),
              a@.to_multiset() =~~= old(a)@.to_multiset(),
              forall|i: int| 0 <= i < left ==> !a[i],
              forall|i: int| right <= i < a.len() ==> a[i],
              left <= 100_000,
              right <= 100_000,
          decreases right - left
      {
          if !a[left] {
              left += 1;
          } else if a[right - 1] {
              right -= 1;
          } else {
              swap(a, left, right - 1);
              left += 1;
              right -= 1;
          }
      }
      // impl-end
  }

vc-postamble: |-
  
  fn main() {}
  }

