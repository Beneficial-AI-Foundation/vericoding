vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn sum_to(arr: Seq<i64>) -> (result: int)
      decreases arr.len(),
  {
      if arr.len() == 0 {
          0
      } else {
          sum_to(arr.drop_last()) + arr.last()
      }
  }
  // pure-end

vc-helpers: |-
  proof fn sum_to_empty(arr: Seq<i64>)
      requires arr.len() == 0
      ensures sum_to(arr) == 0
  {
  }
  
  proof fn sum_to_append_lemma(arr: Seq<i64>, val: i64)
      requires arr.len() >= 0
      ensures sum_to(arr.push(val)) == sum_to(arr) + val
  {
      let extended = arr.push(val);
      assert(extended.drop_last() =~= arr);
      assert(extended.last() == val);
  }
  
  proof fn sum_to_induction(arr: Seq<i64>, i: nat)
      requires i <= arr.len()
      ensures sum_to(arr.subrange(0, i as int)) == sum_to(arr.take(i as int))
      decreases i
  {
      if i == 0 {
      } else {
          sum_to_induction(arr, (i - 1) as nat);
      }
  }
  
  proof fn sum_fits_i128(arr: Seq<i64>, sum_val: i128, i: usize)
      requires i < arr.len()
      requires sum_val == sum_to(arr.take(i as int))
      requires sum_val <= i128::MAX - i64::MAX
      ensures sum_val + arr[i as int] as i128 <= i128::MAX
  {
  }

vc-spec: |-
  fn sum(arr: &Vec<i64>) -> (sum: i128)
      // post-conditions-start
      ensures
          sum_to(arr@) == sum,
      // post-conditions-end

vc-code: |-
  {
      let mut sum: i128 = 0;
      let mut i: usize = 0;
      
      while i < arr.len()
          invariant
              i <= arr.len(),
              sum == sum_to(arr@.take(i as int)),
              sum <= i128::MAX - i64::MAX,
          decreases arr.len() - i,
      {
          proof {
              sum_fits_i128(arr@, sum, i);
          }
          
          sum = sum + arr[i] as i128;
          
          proof {
              let old_i = i;
              assert(arr@.take((old_i + 1) as int) =~= arr@.take(old_i as int).push(arr@[old_i as int]));
              sum_to_append_lemma(arr@.take(old_i as int), arr@[old_i as int]);
          }
          
          i = i + 1;
      }
      
      proof {
          assert(arr@.take(arr.len() as int) =~= arr@);
      }
      
      sum
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

