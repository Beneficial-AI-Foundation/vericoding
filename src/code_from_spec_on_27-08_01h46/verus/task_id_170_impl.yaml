vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn sum_to(arr: Seq<i64>) -> (result: int)
      decreases arr.len(),
  {
      if arr.len() == 0 {
          0
      } else {
          sum_to(arr.drop_last()) + arr.last()
      }
  }
  // pure-end

vc-helpers: |-
  spec fn sum_to_prefix(arr: Seq<i64>, len: int) -> int
      decreases len
  {
      if len <= 0 {
          0
      } else if len > arr.len() {
          0
      } else {
          sum_to_prefix(arr, len - 1) + arr[len - 1] as int
      }
  }
  
  proof fn sum_to_prefix_lemma(arr: Seq<i64>, len: int)
      requires 0 <= len <= arr.len()
      ensures sum_to(arr.subrange(0, len)) == sum_to_prefix(arr, len)
      decreases len
  {
      if len == 0 {
      } else {
          sum_to_prefix_lemma(arr, len - 1);
          assert(arr.subrange(0, len).drop_last() =~= arr.subrange(0, len - 1));
          assert(arr.subrange(0, len).last() == arr[len - 1]);
      }
  }
  
  proof fn sum_range_equivalence(arr: Seq<i64>, start: int, end: int)
      requires 0 <= start <= end < arr.len()
      ensures sum_to(arr.subrange(start, end + 1)) == sum_to_prefix(arr.subrange(start, end + 1), end + 1 - start)
  {
      sum_to_prefix_lemma(arr.subrange(start, end + 1), end + 1 - start);
  }

vc-spec: |-
  fn sum_range_list(arr: &Vec<i64>, start: usize, end: usize) -> (sum: i128)
      // pre-conditions-start
      requires
          0 <= start <= end,
          start <= end < arr.len(),
      // pre-conditions-end
      // post-conditions-start
      ensures
          sum_to(arr@.subrange(start as int, end + 1 as int)) == sum,
      // post-conditions-end

vc-code: |-
  {
      let mut sum: i128 = 0;
      let mut i = start;
      
      while i <= end
          invariant
              start <= i <= end + 1,
              i <= arr.len(),
              sum == sum_to_prefix(arr@.subrange(start as int, end + 1 as int), (i - start) as int),
          decreases end + 1 - i
      {
          sum = sum + arr[i] as i128;
          i = i + 1;
      }
      
      proof {
          sum_range_equivalence(arr@, start as int, end as int);
      }
      
      sum
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

