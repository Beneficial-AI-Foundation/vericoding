vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-


vc-spec: |-
  fn all_sequence_equal_length(seq: &Vec<Vec<i32>>) -> (result: bool)
      // pre-conditions-start
      requires
          seq.len() > 0,
      // pre-conditions-end
      // post-conditions-start
      ensures
          result == (forall|i: int, j: int|
              (0 <= i < seq.len() && 0 <= j < seq.len()) ==> (#[trigger] seq[i].len()
                  == #[trigger] seq[j].len())),
      // post-conditions-end

vc-code: |-
  {
      if seq.len() == 1 {
          return true;
      }
      
      let first_len = seq[0].len();
      
      for i in 1..seq.len()
          invariant
              forall|k: int, l: int| (0 <= k < i && 0 <= l < i) ==> seq[k].len() == seq[l].len(),
              forall|k: int| 0 <= k < i ==> seq[k].len() == first_len,
      {
          if seq[i].len() != first_len {
              assert(seq[0].len() != seq[i].len());
              return false;
          }
      }
      
      assert(forall|k: int| 0 <= k < seq.len() ==> seq[k].len() == first_len);
      
      true
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

