vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  spec fn is_odd(x: u32) -> bool {
      x % 2 != 0
  }
  
  proof fn filter_push_lemma(seq: Seq<u32>, elem: u32)
      ensures
          if is_odd(elem) {
              seq.push(elem).filter(|x: u32| x % 2 != 0) == seq.filter(|x: u32| x % 2 != 0).push(elem)
          } else {
              seq.push(elem).filter(|x: u32| x % 2 != 0) == seq.filter(|x: u32| x % 2 != 0)
          }
  {
  }
  
  proof fn filter_subrange_extend_lemma(arr: Seq<u32>, i: int, x: u32)
      requires 
          0 <= i < arr.len(),
      ensures
          arr.subrange(0, i + 1).filter(|x: u32| x % 2 != 0) == 
          if is_odd(arr[i]) {
              arr.subrange(0, i).filter(|x: u32| x % 2 != 0).push(arr[i])
          } else {
              arr.subrange(0, i).filter(|x: u32| x % 2 != 0)
          }
  {
      let sub_i = arr.subrange(0, i);
      let sub_i_plus_1 = arr.subrange(0, i + 1);
      
      assert(sub_i_plus_1 == sub_i.push(arr[i]));
      
      filter_push_lemma(sub_i, arr[i]);
      
      if is_odd(arr[i]) {
          assert(sub_i_plus_1.filter(|x: u32| x % 2 != 0) == sub_i.filter(|x: u32| x % 2 != 0).push(arr[i]));
      } else {
          assert(sub_i_plus_1.filter(|x: u32| x % 2 != 0) == sub_i.filter(|x: u32| x % 2 != 0));
      }
  }

vc-spec: |-
  fn find_odd_numbers(arr: &Vec<u32>) -> (odd_numbers: Vec<u32>)
      // post-conditions-start
      ensures
          odd_numbers@ == arr@.filter(|x: u32| x % 2 != 0),
      // post-conditions-end

vc-code: |-
  {
      let mut odd_numbers = Vec::new();
      let mut i = 0;
      
      while i < arr.len()
          invariant
              i <= arr.len(),
              odd_numbers@ == arr@.subrange(0, i as int).filter(|x: u32| x % 2 != 0),
          decreases arr.len() - i
      {
          if arr[i] % 2 != 0 {
              odd_numbers.push(arr[i]);
          }
          i += 1;
          
          proof {
              filter_subrange_extend_lemma(arr@, (i - 1) as int, arr[(i - 1) as int]);
          }
      }
      
      proof {
          assert(i == arr.len());
          assert(arr@.subrange(0, i as int) == arr@);
      }
      
      odd_numbers
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() { }

