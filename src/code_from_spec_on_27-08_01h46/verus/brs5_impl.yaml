vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus!{

vc-helpers: |-
  // Helper function to specify the sum with capping
  spec fn capped_sum(a: Seq<i32>, len: int) -> int
      decreases len
  {
      if len <= 0 {
          0
      } else {
          capped_sum(a, len - 1) + if a[len - 1] <= 5 { a[len - 1] } else { 5 }
      }
  }
  
  proof fn capped_sum_bound(a: Seq<i32>, len: int)
      requires len >= 0
      ensures capped_sum(a, len) <= 5 * len
      decreases len
  {
      if len <= 0 {
          assert(capped_sum(a, len) == 0);
          assert(5 * len <= 0);
      } else {
          capped_sum_bound(a, len - 1);
          assert(capped_sum(a, len - 1) <= 5 * (len - 1));
          if a[len - 1] <= 5 {
              assert(capped_sum(a, len) == capped_sum(a, len - 1) + a[len - 1]);
              assert(a[len - 1] <= 5);
              assert(capped_sum(a, len) <= 5 * (len - 1) + 5);
              assert(capped_sum(a, len) <= 5 * len);
          } else {
              assert(capped_sum(a, len) == capped_sum(a, len - 1) + 5);
              assert(capped_sum(a, len) <= 5 * (len - 1) + 5);
              assert(capped_sum(a, len) <= 5 * len);
          }
      }
  }
  
  proof fn capped_sum_incremental(a: Seq<i32>, len: int)
      requires len >= 0
      ensures 
          capped_sum(a, len + 1) == capped_sum(a, len) + if a[len] <= 5 { a[len] } else { 5 }
  {
      // This follows directly from the definition
  }
  
  proof fn capped_sum_nonnegative(a: Seq<i32>, len: int)
      requires len >= 0, forall|j: int| 0 <= j < len ==> a[j] >= 0
      ensures capped_sum(a, len) >= 0
      decreases len
  {
      if len <= 0 {
          assert(capped_sum(a, len) == 0);
      } else {
          capped_sum_nonnegative(a, len - 1);
          if a[len - 1] <= 5 {
              assert(capped_sum(a, len) == capped_sum(a, len - 1) + a[len - 1]);
          } else {
              assert(capped_sum(a, len) == capped_sum(a, len - 1) + 5);
          }
      }
  }

vc-spec: |-
  fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32) 
  	// pre-conditions-start
  	requires 
  		old(a).len() == N,
  		old(sum).len() == 1,
  		N > 0,
  		N < 1000,
  	// pre-conditions-end
  	// post-conditions-start
  	ensures
  		sum[0] <= 5 * N,
  	// post-conditions-end

vc-code: |-
  {
      // impl-start
      let mut total: i32 = 0;
      let mut i: usize = 0;
      while i < a.len()
          invariant
              i <= a.len(),
              a.len() == N,
              sum.len() == 1,
              N > 0,
              N < 1000,
              total == capped_sum(a@, i as int),
              total <= 5 * (i as i32),
              total >= 0,
          decreases a.len() - i,
      {
          proof {
              capped_sum_incremental(a@, i as int);
              capped_sum_bound(a@, (i + 1) as int);
          }
          
          let old_total = total;
          if a[i as int] <= 5 {
              proof {
                  assert(a@[i as int] <= 5);
                  assert(old_total + a[i as int] == old_total + a@[i as int]);
                  assert(total + a[i as int] <= 5 * (i as i32) + 5);
                  assert(5 * (i as i32) + 5 == 5 * ((i + 1) as i32));
              }
              total = total + a[i as int];
          } else {
              proof {
                  assert(a@[i as int] > 5);
                  assert(old_total + 5 <= 5 * (i as i32) + 5);
                  assert(5 * (i as i32) + 5 == 5 * ((i + 1) as i32));
              }
              total = total + 5;
          }
          i = i + 1;
          
          proof {
              assert(total == capped_sum(a@, i as int));
          }
      }
      
      proof {
          assert(total == capped_sum(a@, a.len() as int));
          capped_sum_bound(a@, a.len() as int);
          assert(total <= 5 * (a.len() as i32));
          assert(a.len() as i32 == N);
          assert(total <= 5 * N);
      }
      
      sum.set(0, total);
      // impl-end
  }

vc-postamble: |-
  
  }
  
  fn main() {}

