vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  spec fn text_len(text: &str) -> nat {
      text@.len()
  }
  
  spec fn text_char_at(text: &str, i: int) -> char
      recommends 0 <= i < text@.len()
  {
      text@[i]
  }

vc-spec: |-
  fn is_palindrome(text: &str) -> (result: bool)
      // post-conditions-start
      ensures
          result == forall|i: int|
              0 <= i < text@.len() ==> #[trigger] text@[i] == text@[text@.len() - 1 - i],
      // post-conditions-end

vc-code: |-
  {
      let len = text_len(text);
      let mut i: usize = 0;
      
      while i < len / 2
          invariant
              0 <= i <= len / 2,
              forall|j: int| 0 <= j < i ==> #[trigger] text@[j] == text@[len - 1 - j],
      {
          if text.as_bytes()[i] != text.as_bytes()[len - 1 - i] {
              return false;
          }
          i = i + 1;
      }
      
      proof {
          assert forall|k: int| 0 <= k < text@.len() implies #[trigger] text@[k] == text@[text@.len() - 1 - k] by {
              if k < len / 2 {
                  assert(text@[k] == text@[len - 1 - k]);
              } else {
                  let mirror_k = len - 1 - k;
                  assert(mirror_k < len / 2);
                  assert(text@[mirror_k] == text@[len - 1 - mirror_k]);
                  assert(len - 1 - mirror_k == k);
                  assert(text@[k] == text@[mirror_k]);
                  assert(text@[k] == text@[len - 1 - k]);
              }
          }
      }
      
      true
  }

vc-postamble: |-
  
  }
  fn main() {}

