vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  // </vc-helpers>

vc-spec: |-
  fn contains_consecutive_numbers(arr: &Vec<i32>) -> (is_consecutive: bool)
      // pre-conditions-start
      requires
          arr.len() > 0,
          forall|i: int| 0 <= i < arr.len() ==> (0 <= #[trigger] arr[i] + 1 < i32::MAX),
      // pre-conditions-end
      // post-conditions-start
      ensures
          is_consecutive == (forall|i: int, j: int|
              0 <= i < j < arr.len() && j == i + 1 ==> (arr[i] + 1 == arr[j])),
      // post-conditions-end

vc-code: |-
  {
      // impl-start
      if arr.len() == 1 {
          return true;
      }
      
      let mut i = 0;
      while i < arr.len() - 1
          invariant
              0 <= i <= arr.len() - 1,
              arr.len() > 0,
              forall|k: int| 0 <= k < arr.len() ==> (0 <= #[trigger] arr[k] + 1 < i32::MAX),
              forall|j: int, k: int| 0 <= j < k < i + 1 && k == j + 1 ==> (#[trigger] arr[j] + 1 == #[trigger] arr[k]),
          decreases arr.len() - 1 - i
      {
          if arr[i] + 1 != arr[i + 1] {
              proof {
                  assert(i < i + 1 < arr.len() && i + 1 == i + 1);
                  assert(!(arr[i as int] + 1 == arr[i as int + 1]));
              }
              return false;
          }
          i += 1;
      }
      
      proof {
          assert(forall|j: int, k: int| 0 <= j < k < arr.len() && k == j + 1 ==> (#[trigger] arr[j] + 1 == #[trigger] arr[k]));
      }
      
      true
      // impl-end
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

