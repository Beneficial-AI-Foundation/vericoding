vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  
  verus! {
  
  spec fn sum_negative_to(seq: Seq<i64>) -> (res: int)
      decreases seq.len(),
  {
      if seq.len() == 0 {
          0
      } else {
          sum_negative_to(seq.drop_last()) + if (seq.last() < 0) {
              seq.last() as int
          } else {
              0 as int
          }
      }
  }
  // pure-end

vc-helpers: |-
  proof fn sum_negative_to_empty(seq: Seq<i64>)
      requires seq.len() == 0
      ensures sum_negative_to(seq) == 0
  {
  }
  
  proof fn sum_negative_to_extend(seq: Seq<i64>, x: i64)
      requires seq.len() > 0,
          seq.last() == x
      ensures sum_negative_to(seq) == sum_negative_to(seq.drop_last()) + if x < 0 { x as int } else { 0 as int }
  {
  }
  
  proof fn sum_negative_to_monotonic(seq: Seq<i64>, i: nat)
      requires i <= seq.len()
      ensures sum_negative_to(seq.take(i as int)) <= sum_negative_to(seq)
      decreases seq.len() - i
  {
      if i == seq.len() {
      } else if i == 0 {
          if seq.len() == 0 {
          } else {
              sum_negative_to_monotonic(seq, 1);
          }
      } else {
          sum_negative_to_monotonic(seq, i + 1);
          let seq_i = seq.take(i as int);
          let seq_i_plus_1 = seq.take((i + 1) as int);
          assert(seq_i_plus_1.drop_last() == seq_i);
          let elem = seq[i as int];
          if elem < 0 {
              assert(sum_negative_to(seq_i_plus_1) == sum_negative_to(seq_i) + elem as int);
              assert(elem as int <= 0);
          } else {
              assert(sum_negative_to(seq_i_plus_1) == sum_negative_to(seq_i));
          }
      }
  }

vc-spec: |-
  fn sum_negatives(arr: &Vec<i64>) -> (sum_neg: i128)
      // post-conditions-start
      ensures
          sum_negative_to(arr@) == sum_neg,
      // post-conditions-end

vc-code: |-
  {
      let mut sum_neg: i128 = 0;
      let mut i: usize = 0;
      
      while i < arr.len()
          invariant
              i <= arr.len(),
              sum_neg == sum_negative_to(arr@.take(i as int)),
              sum_neg >= i128::MIN + (arr.len() - i) as i128 * i64::MIN as i128,
              sum_neg <= i128::MAX
          decreases arr.len() - i
      {
          if arr[i as int] < 0 {
              sum_neg = sum_neg + arr[i as int] as i128;
          }
          
          proof {
              let seq_i = arr@.take(i as int);
              let seq_i_plus_1 = arr@.take((i + 1) as int);
              assert(seq_i_plus_1 == seq_i.push(arr@[i as int]));
              assert(seq_i_plus_1.drop_last() == seq_i);
              assert(seq_i_plus_1.last() == arr@[i as int]);
              
              if arr[i as int] < 0 {
                  assert(sum_negative_to(seq_i_plus_1) == sum_negative_to(seq_i) + arr[i as int] as int);
              } else {
                  assert(sum_negative_to(seq_i_plus_1) == sum_negative_to(seq_i));
              }
          }
          
          i = i + 1;
      }
      
      proof {
          assert(arr@.take(i as int) == arr@);
      }
      
      sum_neg
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

