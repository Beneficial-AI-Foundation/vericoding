vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn count_boolean(seq: Seq<bool>) -> (result: int)
      decreases seq.len(),
  {
      if seq.len() == 0 {
          0
      } else {
          count_boolean(seq.drop_last()) + if (seq.last()) {
              1 as int
          } else {
              0 as int
          }
      }
  }
  // pure-end

vc-helpers: |-
  proof fn count_boolean_empty()
      ensures count_boolean(Seq::<bool>::empty()) == 0
  {
  }
  
  proof fn count_boolean_bounds(seq: Seq<bool>)
      ensures 0 <= count_boolean(seq) <= seq.len()
      decreases seq.len()
  {
      if seq.len() == 0 {
          count_boolean_empty();
      } else {
          count_boolean_bounds(seq.drop_last());
      }
  }
  
  proof fn count_boolean_prefix(seq: Seq<bool>, i: int)
      requires 0 <= i <= seq.len()
      ensures count_boolean(seq.subrange(0, i)) <= i
      decreases i
  {
      if i == 0 {
          assert(seq.subrange(0, 0) =~= Seq::<bool>::empty());
      } else {
          count_boolean_prefix(seq, i - 1);
          let prefix = seq.subrange(0, i);
          let shorter_prefix = seq.subrange(0, i - 1);
          assert(prefix =~= shorter_prefix.push(seq[i - 1]));
          assert(prefix.drop_last() =~= shorter_prefix);
      }
  }

vc-spec: |-
  fn count_true(arr: &Vec<bool>) -> (count: u64)
      // pre-conditions-start
      ensures
          0 <= count <= arr.len(),
          count_boolean(arr@) == count,
      // pre-conditions-end

vc-code: |-
  {
      let mut count: u64 = 0;
      let mut i = 0;
      
      proof {
          count_boolean_bounds(arr@);
      }
      
      while i < arr.len()
          invariant
              0 <= i <= arr.len(),
              0 <= count <= i,
              count_boolean(arr@.subrange(0, i as int)) == count,
          decreases arr.len() - i
      {
          proof {
              count_boolean_prefix(arr@, i as int + 1);
          }
          
          if arr[i] {
              count = count + 1;
          }
          
          proof {
              let old_i = i as int;
              let new_i = old_i + 1;
              let prefix_old = arr@.subrange(0, old_i);
              let prefix_new = arr@.subrange(0, new_i);
              
              assert(prefix_new =~= prefix_old.push(arr@[old_i]));
              assert(prefix_new.drop_last() =~= prefix_old);
              assert(prefix_new.last() == arr@[old_i]);
          }
          
          i = i + 1;
      }
      
      proof {
          assert(arr@.subrange(0, arr@.len() as int) =~= arr@);
      }
      
      count
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

