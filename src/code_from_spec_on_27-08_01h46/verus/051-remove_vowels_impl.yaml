vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_vowel_spec(c: char) -> (result:bool) {
      c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I'
          || c == 'O' || c == 'U'
  }
  // pure-end

vc-helpers: |-
  fn is_vowel(c: char) -> (is_vowel: bool)
      ensures
          is_vowel == is_vowel_spec(c),
  {
      c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I'
          || c == 'O' || c == 'U'
  }
  
  proof fn filter_subrange_append_lemma(str: Seq<char>, i: usize)
      requires i < str.len()
      ensures 
          if !is_vowel_spec(str[i as int]) {
              str.subrange(0, i as int + 1).filter(|x: char| !is_vowel_spec(x)) == 
              str.subrange(0, i as int).filter(|x: char| !is_vowel_spec(x)).push(str[i as int])
          } else {
              str.subrange(0, i as int + 1).filter(|x: char| !is_vowel_spec(x)) == 
              str.subrange(0, i as int).filter(|x: char| !is_vowel_spec(x))
          }
  {
      let prefix = str.subrange(0, i as int);
      let prefix_plus_one = str.subrange(0, i as int + 1);
      
      assert(prefix_plus_one == prefix.push(str[i as int]));
      
      if !is_vowel_spec(str[i as int]) {
          assert(prefix_plus_one.filter(|x: char| !is_vowel_spec(x)) == 
                 prefix.filter(|x: char| !is_vowel_spec(x)).push(str[i as int]));
      } else {
          assert(prefix_plus_one.filter(|x: char| !is_vowel_spec(x)) == 
                 prefix.filter(|x: char| !is_vowel_spec(x)));
      }
  }

vc-spec: |-
  fn remove_vowels(str: &[char]) -> (str_without_vowels: Vec<char>)
      // post-conditions-start
      ensures
          str_without_vowels@ == str@.filter(|x: char| !is_vowel_spec(x)),
      // post-conditions-end

vc-code: |-
  {
      let mut result = vec![];
      
      for i in 0..str.len()
          invariant
              result@ == str@.subrange(0, i as int).filter(|x: char| !is_vowel_spec(x)),
      {
          proof {
              filter_subrange_append_lemma(str@, i);
          }
          
          let old_result = result@;
          
          if !is_vowel(str[i]) {
              result.push(str[i]);
              proof {
                  assert(!is_vowel_spec(str@[i as int]));
                  assert(result@ == old_result.push(str@[i as int]));
                  assert(old_result == str@.subrange(0, i as int).filter(|x: char| !is_vowel_spec(x)));
              }
          } else {
              proof {
                  assert(is_vowel_spec(str@[i as int]));
                  assert(result@ == old_result);
                  assert(old_result == str@.subrange(0, i as int).filter(|x: char| !is_vowel_spec(x)));
              }
          }
      }
      
      proof {
          assert(str@.subrange(0, str.len() as int) == str@);
      }
      
      result
  }

vc-postamble: |-
  
  } // verus!
  fn main() {}

