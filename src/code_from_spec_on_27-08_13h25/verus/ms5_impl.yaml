vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus!{

vc-helpers: |-
  // No updates needed for helpers

vc-spec: |-
  fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32) 
  	// pre-conditions-start
  	requires 
  		old(a).len() == N,
  		old(sum).len() == 1,
  		N > 0,
  		N < 1000,
  	// pre-conditions-end
  	// post-conditions-start
  	ensures
  		sum[0] <= 4 * N,
  	// post-conditions-end

vc-code: |-
  {
      let mut i: usize = 0;
      sum.set(0, 0);
  
      while i < N as usize
          invariant
              i <= N as usize,
              sum.len() == 1,
              sum[0] <= 4 * (i as i32),
          decreases N as usize - i
      {
          if i < a.len() {
              let current_sum = sum[0];
              let current_a = a[i];
              let to_add = if current_a > 0 { current_a } else { 0 };
              proof {
                  assert(to_add >= 0);
                  assert(current_sum <= 4 * (i as i32));
                  assert(4 * (i as i32) <= 4 * (N as i32));
              }
              let new_sum = current_sum + to_add;
              sum.set(0, new_sum);
              a.set(i, current_a + 1);
          }
          i = i + 1;
      }
  }

vc-postamble: |-
  
  }
  
  fn main() {}

