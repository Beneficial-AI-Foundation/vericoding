vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  #[verifier::external_body]
  fn swap(a: &mut Vec<bool>, i: usize, j: usize)
      requires
          0 <= i < j < old(a).len(),
      ensures
          a[i as int] == old(a)[j as int],
          a[j as int] == old(a)[i as int],
          forall|k: int| 0 <= k < a.len() && k != i && k != j ==> a[k] == old(a)[k],
          a.len() == old(a).len(),
          a@.to_multiset() =~~= old(a)@.to_multiset(),
  {
      let tmp = a[i];
      a.set(i, a[j]);
      a.set(j, tmp);
  }

vc-spec: |-
  #[verifier::loop_isolation(false)]
  fn two_way_sort(a: &mut Vec<bool>)
      // pre-conditions-start
      requires
          old(a).len() <= 100_000,
      // pre-conditions-end
      // post-conditions-start
      ensures
          a.len() == old(a).len(),
          a@.to_multiset() == old(a)@.to_multiset(),
          forall|i: int, j: int| 0 <= i < j < a.len() ==> !a[i] || a[j],
      // post-conditions-end

vc-code: |-
  {
      let mut i: usize = 0;
      let mut j: usize = a.len();
      while i < j
          invariant
              0 <= i <= j <= a.len(),
              a.len() == old(a).len(),
              a@.to_multiset() == old(a)@.to_multiset(),
              forall|k: int| 0 <= k < i ==> !a[k],
              forall|k: int| j <= k < a.len() ==> a[k],
          decreases j - i
      {
          if j > 0 {
              j = j - 1;
              if !a[j] {
                  while i < j && a[i]
                      invariant
                          0 <= i <= j <= a.len(),
                          a.len() == old(a).len(),
                          a@.to_multiset() == old(a)@.to_multiset(),
                          forall|k: int| 0 <= k < i ==> !a[k],
                          forall|k: int| j <= k < a.len() ==> a[k],
                      decreases j - i
                  {
                      i = i + 1;
                  }
                  if i < j {
                      swap(a, i, j);
                      proof {
                          assert(forall|k: int| 0 <= k < i ==> !a[k]);
                          assert(forall|k: int| j <= k < a.len() ==> a[k]);
                          assert(!a[i]);
                          assert(a[j]);
                      }
                  }
              }
          } else {
              break;
          }
      }
  }

vc-postamble: |-
  
  fn main() {}
  }

