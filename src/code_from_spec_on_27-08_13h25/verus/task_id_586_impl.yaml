vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  // No updates needed for helpers

vc-spec: |-
  fn split_and_append(list: &Vec<i32>, n: usize) -> (new_list: Vec<i32>)
      // pre-conditions-start
      requires
          list@.len() > 0,
          0 < n < list@.len(),
      // pre-conditions-end
      // post-conditions-start
      ensures
          new_list@ == list@.subrange(n as int, list@.len() as int).add(list@.subrange(0, n as int)),
      // post-conditions-end

vc-code: |-
  fn split_and_append(list: &Vec<i32>, n: usize) -> (new_list: Vec<i32>)
      requires
          list@.len() > 0,
          0 < n < list@.len(),
      ensures
          new_list@ == list@.subrange(n as int, list@.len() as int).add(list@.subrange(0, n as int)),
  {
      let mut result = Vec::new();
      let len = list.len();
  
      let mut i = n;
      while i < len
          invariant
              n <= i <= len,
              result@ == list@.subrange(n as int, i as int),
      {
          result.push(list@[i as int]);
          i = i + 1;
      }
  
      let mut j = 0;
      while j < n
          invariant
              0 <= j <= n,
              result@ == list@.subrange(n as int, len as int).add(list@.subrange(0, j as int)),
      {
          result.push(list@[j as int]);
          j = j + 1;
      }
  
      result
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

