vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  
  verus! {

vc-helpers: |-
  // No updates needed in helpers for this fix

vc-spec: |-
  fn square_nums(nums: &Vec<i32>) -> (squared: Vec<i32>)
      // pre-conditions-start
      requires
          forall|k: int|
              0 <= k < nums.len() ==> (0 <= #[trigger] nums[k] * #[trigger] nums[k] < i32::MAX),
      // pre-conditions-end
      // post-conditions-start
      ensures
          nums.len() == squared.len(),
          forall|k: int| 0 <= k < nums.len() ==> (#[trigger] squared[k] == nums[k] * nums[k]),
      // post-conditions-end

vc-code: |-
  {
      let mut squared: Vec<i32> = Vec::new();
      let mut i: usize = 0;
  
      while i < nums.len()
          invariant
              i <= nums.len(),
              squared.len() == i,
              forall|k: int| 0 <= k < i ==> squared[k] == nums[k] * nums[k],
          decreases nums.len() - i
      {
          // Ensure no overflow by using the precondition
          assert(nums@[i] * nums@[i] < i32::MAX) by {
              assert(forall|k: int| 0 <= k < nums.len() ==> nums@[k] * nums@[k] < i32::MAX);
          };
          squared.push(nums@[i] * nums@[i]);
          i = i + 1;
      }
  
      squared
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

