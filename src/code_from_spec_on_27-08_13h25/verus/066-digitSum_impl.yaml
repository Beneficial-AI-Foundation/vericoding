vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_upper_case(c: char) -> (ret:bool) {
      c >= 'A' && c <= 'Z'
  }
  // pure-end
  // pure-end
  
  spec fn count_uppercase_sum(seq: Seq<char>) -> (ret:int)
      decreases seq.len(),
  {
      if seq.len() == 0 {
          0
      } else {
          count_uppercase_sum(seq.drop_last()) + if is_upper_case(seq.last()) {
              seq.last() as int
          } else {
              0 as int
          }
      }
  }
  // pure-end

vc-helpers: |-
  proof fn lemma_count_uppercase_sum(seq: Seq<char>)
      ensures
          count_uppercase_sum(seq) >= 0,
      decreases seq.len(),
  {
      if seq.len() > 0 {
          lemma_count_uppercase_sum(seq.drop_last());
          assert(count_uppercase_sum(seq.drop_last()) >= 0);
          if is_upper_case(seq.last()) {
              assert(seq.last() as int >= 65); // 'A' is 65 in ASCII
          }
      }
  }

vc-spec: |-
  fn digit_sum(text: &[char]) -> (sum: u128)
      // post-conditions-start
      ensures
          count_uppercase_sum(text@) == sum,
      // post-conditions-end

vc-code: |-
  fn digit_sum(text: &[char]) -> (sum: u128)
      ensures
          count_uppercase_sum(text@) == sum as int,
  {
      let mut sum: u128 = 0;
      let mut i: usize = 0;
      
      while i < text.len()
          invariant
              0 <= i <= text.len(),
              sum as int == count_uppercase_sum(text@.subrange(0, i as int)),
      {
          if is_upper_case(text[i]) {
              sum = sum + (text[i] as u128);
          }
          i = i + 1;
      }
      
      assert(text@.subrange(0, text.len() as int) == text@);
      sum
  }

vc-postamble: |-
  
  } // verus!
  fn main() {}

