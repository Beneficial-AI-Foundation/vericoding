vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn spec_bracketing_helper(brackets: Seq<char>) -> (ret:(int, bool)) {
      brackets.fold_left(
          (0, true),
          |p: (int, bool), c|
              {
                  let (x, b) = p;
                  match (c) {
                      '(' => (x + 1, b),
                      ')' => (x - 1, b && x - 1 >= 0),
                      _ => (x, b),
                  }
              },
      )
  }
  // pure-end
  // pure-end
  
  spec fn spec_bracketing(brackets: Seq<char>) -> (ret:bool) {
      let p = spec_bracketing_helper(brackets);
      p.1 && p.0 == 0
  }
  // pure-end

vc-helpers: |-
  proof fn bracketing_helper_matches_spec(brackets: Seq<char>)
      ensures
          spec_bracketing_helper(brackets).0 == brackets.fold_left(0, |x: int, c| if c == '(' { x + 1 } else if c == ')' { x - 1 } else { x }),
          spec_bracketing_helper(brackets).1 == brackets.fold_left(true, |b: bool, c| b && if c == ')' { brackets.fold_left(0, |x: int, c| if c == '(' { x + 1 } else if c == ')' { x - 1 } else { x }) >= 0 } else { true }),
  {
  }

vc-spec: |-
  fn correct_bracketing(brackets: &str) -> (ret: bool)
      // pre-conditions-start
      requires
          brackets@.len() <= i32::MAX,
          -brackets@.len() >= i32::MIN,
      // pre-conditions-end
      // post-conditions-start
      ensures
          ret <==> spec_bracketing(brackets@),
      // post-conditions-end

vc-code: |-
  {
      let mut count: i32 = 0;
      let mut valid: bool = true;
      let mut i: usize = 0;
      let len = brackets@.len() as usize;
  
      while i < len
          invariant
              0 <= i <= brackets@.len(),
              count == brackets@.subrange(0, i as int).fold_left(0, |x: int, c| if c == '(' { x + 1 } else if c == ')' { x - 1 } else { x }),
              valid == brackets@.subrange(0, i as int).fold_left(true, |b: bool, c| b && if c == ')' { brackets@.subrange(0, i as int).fold_left(0, |x: int, c| if c == '(' { x + 1 } else if c == ')' { x - 1 } else { x }) >= 0 } else { true }),
          decreases
              brackets@.len() - i,
      {
          let c = brackets@[i as int];
          if c == '(' {
              count = count + 1;
          } else if c == ')' {
              count = count - 1;
              valid = valid && count >= 0;
          }
          i = i + 1;
      }
  
      proof {
          bracketing_helper_matches_spec(brackets@);
      }
  
      valid && count == 0
  }

vc-postamble: |-
  
  } // verus!
  fn main() {}

