vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  // No updates needed for helpers

vc-spec: |-
  fn intersperse(numbers: &[i32], delim: i32) -> (res: Vec<i32>)
      // post-conditions-start
      ensures
          numbers.len() == 0 ==> res.len() == 0,
          numbers.len() != 0 ==> res.len() == 2 * numbers.len() - 1,
          forall|i: int| 0 <= i && i < res.len() && i % 2 == 0 ==> res[i] == numbers[i / 2],
          forall|i: int| 0 <= i && i < res.len() && i % 2 == 1 ==> res[i] == delim
      // post-conditions-end

vc-code: |-
  {
      let mut result: Vec<i32> = Vec::new();
      if numbers.len() == 0 {
          return result;
      }
      let mut i: usize = 0;
      while i < numbers.len()
          invariant
              i <= numbers.len(),
              result.len() == if i == 0 { 0 } else { 2 * i - 1 },
              forall|j: int| 0 <= j && j < result.len() && j % 2 == 0 ==> result@[j] == numbers@[j / 2],
              forall|j: int| 0 <= j && j < result.len() && j % 2 == 1 ==> result@[j] == delim
          decreases numbers.len() - i
      {
          result.push(numbers[i]);
          if i < numbers.len() - 1 {
              result.push(delim);
          }
          i = i + 1;
      }
      result
  }

vc-postamble: |-
  
  fn main() {}
  }

