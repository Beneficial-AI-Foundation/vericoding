vc-description: |-


vc-preamble: |-
  use vstd::arithmetic::mul::*;
  use vstd::prelude::*;
  
  verus! {
  
  spec fn spec_prime(p: int) -> (ret:bool) {
      p > 1 && forall|k: int| 1 < k < p ==> #[trigger] (p % k) != 0
  }
  // pure-end

vc-helpers: |-
  fn prime(p: u32) -> (ret: bool)
      ensures
          ret <==> spec_prime(p as int),
  {
      if p <= 1 {
          return false;
      }
      for k in 2..p
          invariant
              forall|j: int| 1 < j < k ==> #[trigger] (p as int % j) != 0,
              k <= p,
      {
          if p % k == 0 {
              return false;
          }
      }
      true
  }
  
  fn checked_mul_thrice(x: u32, y: u32, z: u32) -> (ret: Option<u32>)
      ensures
          ret.is_some() ==> ret.unwrap() as int == x as int * y as int * z as int,
          ret.is_none() ==> x as int * y as int * z as int > u32::MAX as int,
  {
      if x == 0 || y == 0 || z == 0 {
          return Some(0);
      }
      assert(x > 0 && y > 0 && z > 0);
      let prod2 = x.checked_mul(y);
      if prod2.is_some() {
          let prod3 = prod2.unwrap().checked_mul(z);
          if prod3.is_some() {
              let ans = prod3.unwrap();
              assert(ans as int == x as int * y as int * z as int);
              Some(ans)
          } else {
              assert(x as int * y as int * z as int > u32::MAX as int);
              None
          }
      } else {
          broadcast use group_mul_properties;
          assert(x as int * y as int * z as int >= y as int * z as int);
          assert(x as int * y as int * z as int > u32::MAX as int);
          None
      }
  }

vc-spec: |-
  fn is_multiply_prime(x: u32) -> (ans: bool)
      // pre-conditions-start
      requires
          x > 1,
      // pre-conditions-end
      // post-conditions-start
      ensures
          ans <==> exists|a: int, b: int, c: int|
              spec_prime(a) && spec_prime(b) && spec_prime(c) && x == a * b * c,
      // post-conditions-end

vc-code: |-
  fn is_multiply_prime(x: u32) -> (ans: bool)
      requires
          x > 1,
      ensures
          ans <==> exists|a: int, b: int, c: int|
              spec_prime(a) && spec_prime(b) && spec_prime(c) && x as int == a * b * c,
  {
      let mut a = 2;
      while a < x
          invariant
              a <= x,
              forall|i: int| 2 <= i < a ==> !spec_prime(i) || forall|j: int, k: int|
                  spec_prime(j) && spec_prime(k) ==> i * j * k != x as int,
      {
          if prime(a) {
              let mut b = 2;
              while b < x
                  invariant
                      b <= x,
                      a <= x,
                      spec_prime(a as int),
                      forall|i: int| 2 <= i < b ==> !spec_prime(i) || forall|k: int|
                          spec_prime(k) ==> a as int * i * k != x as int,
              {
                  if prime(b) {
                      let mut c = 2;
                      while c < x
                          invariant
                              c <= x,
                              b <= x,
                              a <= x,
                              spec_prime(a as int),
                              spec_prime(b as int),
                              forall|i: int| 2 <= i < c ==> !spec_prime(i) || a as int * b as int * i != x as int,
                      {
                          if prime(c) {
                              let result = checked_mul_thrice(a, b, c);
                              if result.is_some() && result.unwrap() == x {
                                  return true;
                              }
                          }
                          c = c + 1;
                      }
                  }
                  b = b + 1;
              }
          }
          a = a + 1;
      }
      false
  }

vc-postamble: |-
  
  }
  fn main() {}

