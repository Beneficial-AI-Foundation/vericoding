vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  // No updates needed for helpers as the issues are related to missing decreases clauses and invariant adjustments in the code section.

vc-spec: |-
  #[verifier::loop_isolation(false)]
  fn smallest_missing_number(s: &[i32]) -> (v: i32)
      // pre-conditions-start
      requires
          forall|i: int, j: int| 0 <= i < j < s.len() ==> s[i] <= s[j],
          forall|i: int| 0 <= i < s.len() ==> s[i] >= 0,
          s.len() <= 100_000,
      // pre-conditions-end
      // post-conditions-start
      ensures
          0 <= v,
          forall|i: int| 0 <= i < s.len() ==> s[i] != v,
          forall|k: int| 0 <= k < v && s[k] != v ==> exists|j: int| 0 <= j < s.len() && s[j] == k,
      // post-conditions-end

vc-code: |-
  {
      let mut i: usize = 0;
      let n = s.len();
      let mut result = n as i32;
  
      while i < n
          invariant
              0 <= i <= n,
              forall|k: int| 0 <= k < i as int ==> s@[k] <= k as i32,
              result >= 0,
              forall|k: int| 0 <= k < result && 0 <= k < s.len() as int ==> s@[k] != result ==> exists|j: int| 0 <= j < n as int && 0 <= j < s.len() as int ==> s@[j] == k,
          decreases n - i
      {
          if s[i] < n as i32 && s[i] >= 0 {
              i = i + 1;
          } else {
              i = i + 1;
          }
      }
  
      i = 0;
      while i < n
          invariant
              0 <= i <= n,
              result >= 0,
              forall|k: int| 0 <= k < i as int ==> s@[k] != k as i32 ==> exists|j: int| 0 <= j < n as int && 0 <= j < s.len() as int ==> s@[j] == k,
              forall|k: int| 0 <= k < result && 0 <= k < s.len() as int ==> s@[k] != result ==> exists|j: int| 0 <= j < n as int && 0 <= j < s.len() as int ==> s@[j] == k,
          decreases n - i
      {
          if s[i] != i as i32 {
              result = i as i32;
              break;
          }
          i = i + 1;
      }
  
      result
  }

vc-postamble: |-
  
  fn main() {}
  }

