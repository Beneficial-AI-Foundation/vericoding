vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  // No updates needed for helpers

vc-spec: |-
  fn largest_smallest_integers(arr: &Vec<i32>) -> (res: (Option<i32>, Option<i32>))
      // post-conditions-start
      ensures
          ({
              let a = res.0;
              let b = res.1;
              &&& a.is_none() ==> forall|i: int| 0 <= i < arr@.len() ==> arr@[i] >= 0
              &&& a.is_some() ==> arr@.contains(a.unwrap()) && a.unwrap() < 0
              &&& a.is_some() ==> forall|i: int|
                  0 <= i < arr@.len() && arr@[i] < 0 ==> arr@[i] <= a.unwrap()
              &&& b.is_none() ==> forall|i: int| 0 <= i < arr@.len() ==> arr@[i] <= 0
              &&& b.is_some() ==> arr@.contains(b.unwrap()) && b.unwrap() > 0
              &&& b.is_some() ==> forall|i: int|
                  0 <= i < arr@.len() && arr@[i] > 0 ==> arr@[i] >= b.unwrap()
          }),
      // post-conditions-end

vc-code: |-
  {
      let mut largest_negative: Option<i32> = None;
      let mut smallest_positive: Option<i32> = None;
      
      let mut i: usize = 0;
      while i < arr.len()
          invariant
              0 <= i <= arr.len(),
              forall|j: int| #![trigger arr@[j]] 0 <= j < i ==> {
                  let val = arr@[j];
                  &&& (largest_negative.is_none() || val >= 0 || val <= largest_negative.unwrap())
                  &&& (smallest_positive.is_none() || val <= 0 || val >= smallest_positive.unwrap())
              },
              largest_negative.is_some() ==> arr@.contains(largest_negative.unwrap()) && largest_negative.unwrap() < 0,
              smallest_positive.is_some() ==> arr@.contains(smallest_positive.unwrap()) && smallest_positive.unwrap() > 0,
          decreases arr.len() - i
      {
          let val = arr[i];
          if val < 0 {
              if largest_negative.is_none() || val > largest_negative.unwrap() {
                  largest_negative = Some(val);
              }
          }
          if val > 0 {
              if smallest_positive.is_none() || val < smallest_positive.unwrap() {
                  smallest_positive = Some(val);
              }
          }
          i = i + 1;
      }
      
      (largest_negative, smallest_positive)
  }

vc-postamble: |-
  
  }
  fn main() {}

