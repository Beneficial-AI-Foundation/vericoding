vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  fn contains(arr: &Vec<i32>, key: i32) -> (result: bool)
      ensures
          result == (exists|i: int| 0 <= i < arr.len() && (arr[i] == key)),
  {
      let mut i = 0;
      while i < arr.len()
          invariant
              forall|m: int| 0 <= m < i ==> (arr[m] != key),
      {
          if (arr[i] == key) {
              return true;
          }
          i += 1;
      }
      false
  }
  
  fn is_unique(v: &Vec<i32>, up_to: int) -> (result: bool)
      ensures
          result == (forall|i: int, j: int| 0 <= i < j < up_to ==> v@[i] != v@[j]),
  {
      let mut i = 0;
      while i < up_to
          invariant
              0 <= i <= up_to,
              forall|x: int, y: int| 0 <= x < y < i ==> v@[x] != v@[y],
      {
          let mut j = i + 1;
          while j < up_to
              invariant
                  0 <= i < j <= up_to,
                  forall|x: int| i <= x < j ==> v@[x] != v@[i],
                  forall|x: int, y: int| 0 <= x < y < i ==> v@[x] != v@[y],
          {
              if v@[i] == v@[j] {
                  return false;
              }
              j += 1;
          }
          i += 1;
      }
      true
  }

vc-spec: |-
  fn intersection(arr1: &Vec<i32>, arr2: &Vec<i32>) -> (result: Vec<i32>)
      // post-conditions-start
      ensures
          forall|i: int|
              0 <= i < result.len() ==> (arr1@.contains(#[trigger] result[i]) && arr2@.contains(
                  #[trigger] result[i],
              )),
          forall|i: int, j: int| 0 <= i < j < result.len() ==> result[i] != result[j],
      // post-conditions-end

vc-code: |-
  fn intersection(arr1: &Vec<i32>, arr2: &Vec<i32>) -> (result: Vec<i32>)
      ensures
          forall|i: int|
              0 <= i < result.len() ==> (arr1@.contains(#[trigger] result[i]) && arr2@.contains(
                  #[trigger] result[i],
              )),
          forall|i: int, j: int| 0 <= i < j < result.len() ==> result[i] != result[j],
  {
      let mut result = Vec::new();
      let mut i = 0;
      while i < arr1.len()
          invariant
              0 <= i <= arr1.len(),
              forall|k: int| 0 <= k < result.len() ==> arr1@.contains(result[k]) && arr2@.contains(result[k]),
              forall|x: int, y: int| 0 <= x < y < result.len() ==> result[x] != result[y],
      {
          let val = arr1@[i];
          if contains(arr2, val) {
              let mut found = false;
              let mut j = 0;
              while j < result.len()
                  invariant
                      0 <= j <= result.len(),
                      !found ==> forall|k: int| 0 <= k < j ==> result[k] != val,
              {
                  if result[j] == val {
                      found = true;
                      break;
                  }
                  j += 1;
              }
              if !found {
                  result.push(val);
              }
          }
          i += 1;
      }
      result
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

