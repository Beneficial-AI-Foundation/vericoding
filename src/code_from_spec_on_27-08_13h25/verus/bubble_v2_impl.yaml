vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn sorted_between(a: Seq<u32>, from: int, to: int) -> (result:bool) {
      forall |i: int, j:int|  from <= i < j < to ==> a[i] <= a[j]
  }
  // pure-end
  // pure-end
  
  spec fn is_reorder_of<T>(r: Seq<int>, p: Seq<T>, s: Seq<T>) -> (result:bool) {
      &&& r.len() == s.len()
      &&& forall|i: int| 0 <= i < r.len() ==> 0 <= #[trigger] r[i] < r.len()
      &&& forall|i: int, j: int| 0 <= i < j < r.len() ==> r[i] != r[j]
      &&& p =~= r.map_values(|i: int| s[i])
  }
  // pure-end

vc-helpers: |-
  fn swap<T>(v: &mut Vec<T>, i: usize, j: usize)
      ensures
          v@ =~= old(v)@.update(i as int, old(v)@[j as int]).update(j as int, old(v)@[i as int]),
  {
      let temp = v[j];
      v.set(j, v[i]);
      v.set(i, temp);
  }
  
  proof fn lemma_sorted_after_swap(v: Seq<u32>, i: int, j: int)
      requires
          i < j,
          0 <= i < v.len(),
          j < v.len(),
          sorted_between(v, 0, i),
          sorted_between(v, i, j),
          sorted_between(v, j, v.len()),
          v[i] <= v[j],
      ensures
          sorted_between(v, 0, i + 1),
          sorted_between(v, i + 1, j + 1),
          sorted_between(v, j + 1, v.len()),
  {
  }
  
  proof fn lemma_swap_maintains_sorted(v: Seq<u32>, i: int, j: int, new_v: Seq<u32>)
      requires
          0 <= i < j < v.len(),
          new_v =~= v.update(i, v[j]).update(j, v[i]),
          sorted_between(v, 0, v.len()),
          v[i] > v[j],
      ensures
          sorted_between(new_v, 0, new_v.len()),
  {
  }

vc-spec: |-
  fn test1(nums: &mut Vec<u32>)
      // post-conditions-start
      ensures
          sorted_between(nums@, 0, nums@.len() as int),
          exists|r: Seq<int>| is_reorder_of(r, nums@, old(nums)@),
      // post-conditions-end

vc-code: |-
  fn test1(nums: &mut Vec<u32>)
      ensures
          sorted_between(nums@, 0, nums@.len() as int),
          exists|r: Seq<int>| is_reorder_of(r, nums@, old(nums)@),
  {
      let mut i: usize = 0;
      while i < nums.len()
          invariant
              0 <= i <= nums.len(),
              sorted_between(nums@, 0, i as int),
              exists|r: Seq<int>| is_reorder_of(r, nums@, old(nums)@),
      {
          let mut j: usize = i;
          let mut min_idx: usize = i;
          while j < nums.len()
              invariant
                  i <= j <= nums.len(),
                  min_idx >= i,
                  min_idx < nums.len(),
                  forall|k: int| i as int <= k < j as int ==> nums@[min_idx as int] <= nums@[k],
                  sorted_between(nums@, 0, i as int),
                  exists|r: Seq<int>| is_reorder_of(r, nums@, old(nums)@),
          {
              if nums[j] < nums[min_idx] {
                  min_idx = j;
              }
              j = j + 1;
          }
          swap(nums, i, min_idx);
          i = i + 1;
      }
  }

vc-postamble: |-
  
  }
  
  fn main() {}

