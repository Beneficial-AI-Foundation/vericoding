vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn expr_inner_longest(strings: &Vec<Vec<u8>>, result: Option<&Vec<u8>>) -> (result: bool) {
      match result {
          None => strings.len() == 0,
          Some(s) => {
              (forall|i: int| #![auto] 0 <= i < strings.len() ==> s.len() >= strings[i].len())
                  && (exists|i: int|
                  #![auto]
                  (0 <= i < strings.len() && s == strings[i] && (forall|j: int|
                      #![auto]
                      0 <= j < i ==> strings[j].len() < s.len())))
          },
      }
  }
  // pure-end

vc-helpers: |-
  proof fn lemma_max_length_exists(strings: &Vec<Vec<u8>>, max_len: nat, idx: nat)
      requires
          strings.len() > 0,
          idx < strings.len(),
          max_len == strings[idx].len(),
          forall|i: nat| i < strings.len() ==> strings[i].len() <= max_len,
      ensures
          exists|i: nat| i < strings.len() && strings[i].len() == max_len,
  {
      assert(idx < strings.len() && strings[idx].len() == max_len);
  }

vc-spec: |-
  fn longest(strings: &Vec<Vec<u8>>) -> (result: Option<&Vec<u8>>)
      // post-conditions-start
      ensures
          expr_inner_longest(strings, result),
      // post-conditions-end

vc-code: |-
  fn longest(strings: &Vec<Vec<u8>>) -> (result: Option<&Vec<u8>>)
      ensures
          expr_inner_longest(strings, result),
  {
      if strings.len() == 0 {
          return None;
      }
  
      let mut max_len: nat = 0;
      let mut max_idx: nat = 0;
  
      let mut i: nat = 0;
      while i < strings.len()
          invariant
              i <= strings.len(),
              max_idx < strings.len(),
              max_len == strings[max_idx].len(),
              forall|j: nat| j < i ==> strings[j].len() <= max_len,
      {
          if strings[i].len() > max_len {
              max_len = strings[i].len();
              max_idx = i;
          }
          i = i + 1;
      }
  
      proof {
          lemma_max_length_exists(strings, max_len, max_idx);
      }
  
      Some(&strings[max_idx])
  }

vc-postamble: |-
  
  }
  fn main() {}

