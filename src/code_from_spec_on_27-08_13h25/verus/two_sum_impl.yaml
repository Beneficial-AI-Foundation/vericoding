vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  use vstd::prelude::*;
  
  proof fn lemma_sum_within_bounds(a: i32, b: i32)
      requires
          a + b <= i32::MAX,
          a + b >= i32::MIN,
      ensures
          a + b == a + b,
  {
  }

vc-spec: |-
  #[verifier::loop_isolation(false)]
  fn two_sum(nums: &[i32], target: i32) -> (result: (usize, usize))
      // pre-conditions-start
      requires
          nums.len() >= 2,
          exists|i: int, j: int| 0 <= i < j < nums.len() && nums[i] + nums[j] == target,
          forall|i: int, j: int|
              0 <= i < nums.len() && 0 <= j < nums.len()
                  ==> nums[i] + nums[j] <= i32::MAX
                      && nums[i] + nums[j] >= i32::MIN,
      // pre-conditions-end
      // post-conditions-start
      ensures
          ({ let (i, j) = result; 0 <= i < nums.len() }),
          ({ let (i, j) = result; 0 <= j < nums.len() }),
          ({ let (i, j) = result; i != j }),
          ({ let (i, j) = result; nums[i as int] + nums[j as int] == target })
      // post-conditions-end

vc-code: |-
  fn two_sum(nums: &[i32], target: i32) -> (result: (usize, usize))
      requires
          nums.len() >= 2,
          exists|i: int, j: int| 0 <= i < j < nums.len() && nums[i] + nums[j] == target,
          forall|i: int, j: int|
              0 <= i < nums.len() && 0 <= j < nums.len()
                  ==> nums[i] + nums[j] <= i32::MAX
                      && nums[i] + nums[j] >= i32::MIN,
      ensures
          ({ let (i, j) = result; 0 <= i < nums.len() }),
          ({ let (i, j) = result; 0 <= j < nums.len() }),
          ({ let (i, j) = result; i != j }),
          ({ let (i, j) = result; nums[i as int] + nums[j as int] == target })
  {
      let mut i: usize = 0;
      while i < nums.len()
          invariant
              0 <= i <= nums.len(),
              exists|k: int, l: int| i <= k < nums.len() && k < l < nums.len() && nums[k] + nums[l] == target,
              forall|k: int, l: int|
                  0 <= k < nums.len() && 0 <= l < nums.len()
                      ==> nums[k] + nums[l] <= i32::MAX
                          && nums[k] + nums[l] >= i32::MIN,
      {
          let mut j: usize = i + 1;
          while j < nums.len()
              invariant
                  0 <= i < nums.len(),
                  i < j <= nums.len(),
                  exists|k: int, l: int| i <= k < nums.len() && k < l < nums.len() && nums[k] + nums[l] == target,
                  forall|k: int, l: int|
                      0 <= k < nums.len() && 0 <= l < nums.len()
                          ==> nums[k] + nums[l] <= i32::MAX
                              && nums[k] + nums[l] >= i32::MIN,
          {
              proof {
                  lemma_sum_within_bounds(nums[i], nums[j]);
              }
              if nums[i] + nums[j] == target {
                  return (i, j);
              }
              j = j + 1;
          }
          i = i + 1;
      }
      // This line should never be reached due to the precondition ensuring a solution exists
      assert(false);
      (0, 0)
  }

vc-postamble: |-
  
  fn main() {}
  }

