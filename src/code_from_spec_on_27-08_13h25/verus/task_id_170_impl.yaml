vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn sum_to(arr: Seq<i64>) -> (result: int)
      decreases arr.len(),
  {
      if arr.len() == 0 {
          0
      } else {
          sum_to(arr.drop_last()) + arr.last()
      }
  }
  // pure-end

vc-helpers: |-
  spec fn sum_to_subrange(arr: Seq<i64>, start: int, end: int) -> (result: int)
      decreases end - start,
  {
      if start >= end {
          0
      } else {
          sum_to_subrange(arr, start + 1, end) + arr[start]
      }
  }
  
  proof fn sum_to_subrange_equals_sum_to(arr: Seq<i64>, start: int, end: int)
      requires
          0 <= start <= end,
          end <= arr.len(),
      ensures
          sum_to_subrange(arr, start, end) == sum_to(arr.subrange(start, end)),
      decreases end - start,
  {
      if start >= end {
          assert(sum_to_subrange(arr, start, end) == 0);
          assert(arr.subrange(start, end).len() == 0);
          assert(sum_to(arr.subrange(start, end)) == 0);
      } else {
          let sub_seq = arr.subrange(start, end);
          sum_to_subrange_equals_sum_to(arr, start + 1, end);
          assert(sum_to_subrange(arr, start, end) == sum_to_subrange(arr, start + 1, end) + arr[start]);
          assert(sum_to(sub_seq) == sum_to(sub_seq.drop_last()) + sub_seq.last());
          assert(sub_seq.drop_last() == arr.subrange(start + 1, end));
          assert(sub_seq.last() == arr[start]);
      }
  }

vc-spec: |-
  fn sum_range_list(arr: &Vec<i64>, start: usize, end: usize) -> (sum: i128)
      // pre-conditions-start
      requires
          0 <= start <= end,
          start <= end < arr.len(),
      // pre-conditions-end
      // post-conditions-start
      ensures
          sum_to(arr@.subrange(start as int, end + 1 as int)) == sum,
      // post-conditions-end

vc-code: |-
  {
      let mut sum: i128 = 0;
      let mut i: usize = start;
      while i < end + 1
          invariant
              start <= i <= end + 1,
              end < arr.len(),
              sum == sum_to_subrange(arr@, start as int, i as int),
          decreases end + 1 - i,
      {
          sum = sum + arr@[i] as i128;
          i = i + 1;
      }
      proof {
          sum_to_subrange_equals_sum_to(arr@, start as int, (end + 1) as int);
      }
      sum
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

