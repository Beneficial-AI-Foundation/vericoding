vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn in_array(a: Seq<i32>, x: i32) -> (ret: bool) {
      exists|i: int| 0 <= i < a.len() && a[i] == x
  }

vc-helpers: |-
  fn in_array_exec(a: &Vec<i32>, x: i32) -> (result: bool)
      ensures
          result == in_array(a@, x),
  {
      let mut i = 0;
      while i < a.len()
          invariant
              0 <= i <= a.len(),
              forall|k: int| 0 <= k < i ==> a@[k] != x,
          decreases
              a.len() - i,
      {
          if a[i] == x {
              return true;
          }
          i = i + 1;
      }
      false
  }

vc-spec: |-
  #[verifier::loop_isolation(false)]
  fn remove_duplicates(a: &[i32]) -> (result: Vec<i32>)
      // pre-conditions-start
      requires
          a.len() >= 1,
      // pre-conditions-end
      // post-conditions-start
      ensures
          forall|i: int| #![auto] 0 <= i < result.len() ==> in_array(a@, result[i]),
          forall|i: int, j: int| 0 <= i < j < result.len() ==> result[i] != result[j],
      // post-conditions-end

vc-code: |-
  {
      let mut result = Vec::new();
      let mut i = 0;
      
      while i < a.len()
          invariant
              0 <= i <= a.len(),
              forall|k: int| #![auto] 0 <= k < result.len() ==> in_array(a@, result[k]),
              forall|m: int, n: int| 0 <= m < n < result.len() ==> result[m] != result[n],
              forall|k: int| 0 <= k < i ==> (in_array(result@, a@[k]) || forall|m: int| 0 <= m < result.len() ==> result[m] != a@[k]),
          decreases
              a.len() - i,
      {
          if !in_array_exec(&result, a[i]) {
              result.push(a[i]);
          }
          i = i + 1;
      }
      
      result
  }

vc-postamble: |-
  
  fn main() {}
  }

