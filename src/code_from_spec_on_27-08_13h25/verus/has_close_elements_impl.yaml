vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn abs_spec(i: int) -> int {
      if i < 0 { -i } else { i }
  }

vc-helpers: |-
  proof fn abs_spec_properties(i: int)
      ensures
          abs_spec(i) >= 0,
          i < 0 ==> abs_spec(i) == -i,
          i >= 0 ==> abs_spec(i) == i,
  {
      if i < 0 {
          assert(abs_spec(i) == -i);
      } else {
          assert(abs_spec(i) == i);
      }
  }
  
  fn abs(i: i32) -> (res: i32)
      requires
          i != i32::MIN,
      ensures
          res >= 0,
          i < 0 ==> res == -i,
          i >= 0 ==> res == i,
  {
      if i < 0 { -i } else { i }
  }

vc-spec: |-
  #[verifier::loop_isolation(false)]
  fn has_close_elements(numbers: &[i32], threshold: i32) -> (flag: bool)
      // pre-conditions-start
      requires
          threshold > 0,
          forall|i: int, j: int| 0 <= i && i < numbers.len() && 0 <= j && j < numbers.len() ==> numbers[i] - numbers[j] < i32::MAX && -(numbers[i] - numbers[j]) < i32::MAX
      // pre-conditions-end
      // post-conditions-start
      ensures
          flag == exists|i: int, j: int| 0 <= i && 0 <= j && i < numbers.len() && j < numbers.len() && i != j && abs_spec(numbers[i] - numbers[j]) < threshold
      // post-conditions-end

vc-code: |-
  {
      let len = numbers.len();
      if len < 2 {
          return false;
      }
      
      for i in 0..len
          invariant
              len == numbers.len(),
              threshold > 0,
              forall|k: int, l: int| 0 <= k && k < numbers.len() && 0 <= l && l < numbers.len() ==> numbers[k] - numbers[l] < i32::MAX && -(numbers[k] - numbers[l]) < i32::MAX,
              forall|k: int, l: int| 0 <= k < i && 0 <= l < len && k != l ==> abs_spec(numbers[k] - numbers[l]) >= threshold,
      {
          for j in (i + 1)..len
              invariant
                  len == numbers.len(),
                  threshold > 0,
                  0 <= i < len,
                  forall|k: int, l: int| 0 <= k && k < numbers.len() && 0 <= l && l < numbers.len() ==> numbers[k] - numbers[l] < i32::MAX && -(numbers[k] - numbers[l]) < i32::MAX,
                  forall|k: int| (i + 1) <= k && k < j as int ==> abs_spec(numbers[i] - numbers[k]) >= threshold,
          {
              let diff = numbers[i] - numbers[j];
              let abs_diff = abs(diff);
              if abs_diff < threshold {
                  return true;
              }
          }
      }
      proof {
          assert(forall|i: int, j: int| 0 <= i < len && 0 <= j < len && i != j ==> abs_spec(numbers[i] - numbers[j]) >= threshold);
      }
      false
  }

vc-postamble: |-
  
  fn main() {}
  }

