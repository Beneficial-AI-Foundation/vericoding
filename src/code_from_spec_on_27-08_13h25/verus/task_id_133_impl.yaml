vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  
  verus! {
  
  spec fn sum_negative_to(seq: Seq<i64>) -> (res: int)
      decreases seq.len(),
  {
      if seq.len() == 0 {
          0
      } else {
          sum_negative_to(seq.drop_last()) + if (seq.last() < 0) {
              seq.last() as int
          } else {
              0 as int
          }
      }
  }
  // pure-end

vc-helpers: |-
  spec fn sum_negative_to(seq: Seq<i64>) -> (res: i128)
      decreases seq.len()
  {
      if seq.len() == 0 {
          0
      } else {
          sum_negative_to(seq.drop_last()) + if seq.last() < 0 {
              seq.last() as i128
          } else {
              0 as i128
          }
      }
  }

vc-spec: |-
  fn sum_negatives(arr: &Vec<i64>) -> (sum_neg: i128)
      // post-conditions-start
      ensures
          sum_negative_to(arr@) == sum_neg,
      // post-conditions-end

vc-code: |-
  fn sum_negatives(arr: &Vec<i64>) -> (sum_neg: i128)
      ensures
          sum_negative_to(arr@) == sum_neg,
  {
      let mut sum: i128 = 0;
      let mut i: usize = 0;
      
      while i < arr.len()
          invariant
              0 <= i <= arr.len(),
              sum == sum_negative_to(arr@.subrange(0, i as int)),
          decreases arr.len() - i
      {
          let val: i128 = arr@[i] as i128;
          if val < 0 {
              sum = sum + val;
          }
          i = i + 1;
      }
      
      sum
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

