vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  #[verifier::memoize]
  spec fn spec_fib(n: nat) -> (ret:nat)
      decreases n,
  {
      if (n == 0) {
          0
      } else if (n == 1) {
          1
      } else {
          spec_fib((n - 1) as nat) + spec_fib((n - 2) as nat)
      }
  }
  // pure-end
  // pure-end
  
  spec fn inner_expr_fib(n: u32, ret: Option<u32>) -> (result:bool) {
      match ret {
          None => spec_fib(n as nat) > u32::MAX,
          Some(f) => f == spec_fib(n as nat),
      }
  }
  // pure-end

vc-helpers: |-
  proof fn lemma_fib_max(n: nat)
      requires
          spec_fib(n) > u32::MAX,
      ensures
          forall |k: nat| k >= n ==> spec_fib(k) > u32::MAX,
      decreases n,
  {
      if n == 0 {
          return;
      }
      lemma_fib_max((n - 1) as nat);
  }
  
  proof fn lemma_fib_monotonic(a: nat, b: nat)
      requires
          a <= b,
      ensures
          spec_fib(a) <= spec_fib(b),
      decreases b,
  {
      if b == 0 {
          return;
      }
      if a == b {
          return;
      }
      lemma_fib_monotonic(a, (b - 1) as nat);
  }

vc-spec: |-
  fn fib(n: u32) -> (ret: Option<u32>)
      // post-conditions-start
      ensures
          inner_expr_fib(n, ret),
      // post-conditions-end

vc-code: |-
  fn fib(n: u32) -> (ret: Option<u32>)
      ensures
          inner_expr_fib(n, ret),
  {
      if n == 0 {
          return Some(0);
      }
      if n == 1 {
          return Some(1);
      }
  
      let mut a: u32 = 0;
      let mut b: u32 = 1;
      let mut i: u32 = 2;
      let mut result: u32;
  
      while i <= n
          invariant
              i <= n + 1,
              a == spec_fib((i - 2) as nat),
              b == spec_fib((i - 1) as nat),
      {
          result = a + b;
          if result < a {
              proof {
                  lemma_fib_monotonic((i - 1) as nat, i as nat);
                  lemma_fib_max((i - 1) as nat);
              }
              return None;
          }
          a = b;
          b = result;
          i = i + 1;
      }
      Some(b)
  }

vc-postamble: |-
  
  } // verus!
  fn main() {}

