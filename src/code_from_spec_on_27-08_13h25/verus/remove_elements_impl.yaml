vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn in_array(a: Seq<i32>, x: i32) -> (ret: bool) {
      exists|i: int| 0 <= i < a.len() && a[i] == x
  }

vc-helpers: |-
  fn in_array_exec(a: &Vec<i32>, x: i32) -> (result: bool)
      ensures
          result == in_array(a@, x),
  {
      let mut i = 0;
      while i < a.len()
          invariant
              0 <= i <= a.len(),
              forall|k: int| 0 <= k < i ==> a@[k] != x,
      {
          if a[i] == x {
              return true;
          }
          i = i + 1;
      }
      false
  }
  
  spec fn is_unique_seq(s: Seq<i32>) -> bool {
      forall|i: int, j: int| 0 <= i < j < s.len() ==> s[i] != s[j]
  }
  
  spec fn filter_elements(a: Seq<i32>, b: Seq<i32>, c: Seq<i32>) -> bool {
      forall|k: int| 0 <= k < c.len() ==> in_array(a, c[k]) && !in_array(b, c[k])
  }

vc-spec: |-
  #[verifier::loop_isolation(false)]
  fn remove_elements(a: &Vec<i32>, b: &Vec<i32>) -> (c: Vec<i32>)
      // post-conditions-start
      ensures
          forall|k: int| #![auto] 0 <= k < c.len() ==> in_array(a@, c[k]) && !in_array(b@, c[k]),
          forall|i: int, j: int| 0 <= i < j < c.len() ==> c[i] != c[j],
      // post-conditions-end

vc-code: |-
  #[verifier::loop_isolation(false)]
  fn remove_elements(a: &Vec<i32>, b: &Vec<i32>) -> (c: Vec<i32>)
      ensures
          forall|k: int| #![auto] 0 <= k < c.len() ==> in_array(a@, c@[k]) && !in_array(b@, c@[k]),
          forall|i: int, j: int| 0 <= i < j < c.len() ==> c@[i] != c@[j],
  {
      let mut result: Vec<i32> = Vec::new();
      let mut i = 0;
  
      while i < a.len()
          invariant
              0 <= i <= a.len(),
              forall|k: int| #![auto] 0 <= k < result.len() ==> in_array(a@, result@[k]) && !in_array(b@, result@[k]),
              is_unique_seq(result@),
      {
          let mut found_in_b = false;
          let mut j = 0;
  
          while j < b.len()
              invariant
                  0 <= j <= b.len(),
                  found_in_b ==> in_array(b@, a@[i]),
                  !found_in_b ==> forall|k: int| 0 <= k < j ==> b@[k] != a@[i],
          {
              if b[j] == a[i] {
                  found_in_b = true;
                  break;
              }
              j = j + 1;
          }
  
          if !found_in_b {
              let mut already_in_result = false;
              let mut k = 0;
  
              while k < result.len()
                  invariant
                      0 <= k <= result.len(),
                      already_in_result ==> exists|m: int| 0 <= m < k && result@[m] == a@[i],
                      !already_in_result ==> forall|m: int| 0 <= m < k ==> result@[m] != a@[i],
              {
                  if result[k] == a[i] {
                      already_in_result = true;
                      break;
                  }
                  k = k + 1;
              }
  
              if !already_in_result {
                  result.push(a[i]);
              }
          }
          i = i + 1;
      }
      result
  }

vc-postamble: |-
  
  fn main() {}
  }

