vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  // No updates needed for helpers to fix the verification errors

vc-spec: |-
  #[verifier::loop_isolation(false)]
  fn unique(a: &[i32]) -> (result: Vec<i32>)
      // pre-conditions-start
      requires
          forall|i: int, j: int|
              #![trigger a[i], a[j]]
              0 <= i && i < j && j < a.len() ==> a[i] <= a[j],
      // pre-conditions-end
      // post-conditions-start
      ensures
          forall|i: int, j: int|
              #![trigger result[i], result[j]]
              0 <= i && i < j && j < result.len() ==> result[i] < result[j],
      // post-conditions-end

vc-code: |-
  {
      let mut result: Vec<i32> = Vec::new();
      if a.len() == 0 {
          return result;
      }
  
      let mut i: usize = 0;
      while i < a.len()
          invariant
              0 <= i <= a.len(),
              forall|k: int, l: int| #![trigger result[k], result[l]] 0 <= k < l < result.len() ==> result[k] < result[l],
              forall|k: int| #![trigger result[k]] 0 <= k < result.len() ==> exists|j: int| #![trigger a[j]] 0 <= j < i && a[j] == result[k],
          decreases a.len() - i,
      {
          if i == 0 || (result.len() > 0 && a[i] > result[result.len() - 1]) {
              result.push(a[i]);
          }
          i = i + 1;
      }
      result
  }

vc-postamble: |-
  
  fn main() {}
  }

