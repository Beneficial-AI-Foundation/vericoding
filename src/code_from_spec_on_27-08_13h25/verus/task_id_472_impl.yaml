vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  // No updates needed for helpers in this case

vc-spec: |-
  fn contains_consecutive_numbers(arr: &Vec<i32>) -> (is_consecutive: bool)
      // pre-conditions-start
      requires
          arr.len() > 0,
          forall|i: int| 0 <= i < arr.len() ==> (0 <= #[trigger] arr[i] + 1 < i32::MAX),
      // pre-conditions-end
      // post-conditions-start
      ensures
          is_consecutive == (forall|i: int, j: int|
              0 <= i < j < arr.len() && j == i + 1 ==> (arr[i] + 1 == arr[j])),
      // post-conditions-end

vc-code: |-
  {
      if arr.len() == 1 {
          return true;
      }
  
      let mut i: usize = 0;
      let mut is_consecutive = true;
  
      while i < arr.len() - 1
          invariant
              0 <= i < arr.len(),
              is_consecutive ==> (forall|j: int| 0 <= j < i ==> #[trigger] arr[j] + 1 == arr[j + 1]),
          decreases arr.len() - 1 - i
      {
          if arr[i] + 1 != arr[i + 1] {
              is_consecutive = false;
              break;
          }
          i = i + 1;
      }
  
      is_consecutive
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

