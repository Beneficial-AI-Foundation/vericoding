vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  // No updates needed for helpers

vc-spec: |-
  fn derivative(xs: &Vec<usize>) -> (ret: Option<Vec<usize>>)
      // post-conditions-start
      ensures
          ret.is_some() ==> xs@.len() == 0 || xs@.map(|i: int, x| i * x).skip(1)
              =~= ret.unwrap()@.map_values(|x| x as int),
      // post-conditions-end

vc-code: |-
  {
      if xs.len() == 0 {
          return Some(Vec::new());
      }
  
      let mut result = Vec::new();
      let mut i: int = 1;
  
      while i < xs.len() as int
          invariant
              1 <= i <= xs.len() as int,
              result@.len() == (i - 1) as nat,
              forall |k: int| 0 <= k < i - 1 ==> result@[k as int] == ((k + 1) as usize) * xs@[(k + 1) as int],
          decreases (xs.len() as int) - i,
      {
          let index: int = i;
          let val = (index as usize) * xs@[index as int];
          result.push(val);
          i = i + 1;
      }
  
      Some(result)
  }

vc-postamble: |-
  
  }
  fn main() {}

