vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  use vstd::slice::*;
  
  verus! {
  
  spec fn is_binary_digit(c: char) -> (ret: bool) {
      c == '0' || c == '1'
  }
  // pure-end
  // pure-end
  
  spec fn xor_char(a: char, b: char) -> (result: char)
      recommends
          is_binary_digit(a),
          is_binary_digit(b),
  {
      if a == b {
          '0'
      } else {
          '1'
      }
  }
  // pure-end

vc-helpers: |-
  spec fn xor_char_seq(a: Seq<char>, b: Seq<char>, i: int) -> char
      recommends
          0 <= i < a.len() as int,
          0 <= i < b.len() as int,
          is_binary_digit(a[i]),
          is_binary_digit(b[i]),
  {
      xor_char(a[i], b[i])
  }

vc-spec: |-
  fn string_xor(a: &[char], b: &[char]) -> (result: Vec<char>)
      // pre-conditions-start
      requires
          a@.len() == b@.len(),
          forall|i: int| 0 <= i < a@.len() as int ==> is_binary_digit(#[trigger] a[i]),
          forall|i: int| 0 <= i < b@.len() as int ==> is_binary_digit(#[trigger] b[i]),
      // pre-conditions-end
      // post-conditions-start
      ensures
          result.len() == a@.len(),
          forall|i: int|
              0 <= i < result.len() as int ==> #[trigger] result[i] == xor_char(a[i], b[i]),
      // post-conditions-end

vc-code: |-
  {
      let mut result: Vec<char> = Vec::new();
      let len = a.len();
      let mut i: usize = 0;
  
      while i < len
          invariant
              i <= len,
              result.len() == i,
              forall|k: usize| 0 <= k < i ==> #[trigger] result[k] == xor_char(a[k], b[k]),
          decreases
              len - i,
      {
          let res_char = if a[i] == b[i] { '0' } else { '1' };
          result.push(res_char);
          i = i + 1;
      }
  
      result
  }

vc-postamble: |-
  
  }
  fn main() {}

