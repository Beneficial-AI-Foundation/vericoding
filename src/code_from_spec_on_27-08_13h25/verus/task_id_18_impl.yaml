vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  
  verus! {

vc-helpers: |-
  fn contains(str: &Vec<char>, key: char) -> (result: bool)
      ensures
          result <==> (exists|i: int| 0 <= i < str.len() && (str[i] == key)),
  {
      let mut i = 0;
      while i < str.len()
          invariant
              forall|m: int| 0 <= m < i ==> (str[m] != key),
          decreases
              str.len() - i,
      {
          if (str[i] == key) {
              return true;
          }
          i += 1;
      }
      false
  }
  
  proof fn lemma_vec_push<T>(vec: Seq<T>, i: T, l: usize)
      requires
          l == vec.len(),
      ensures
          forall|k: int| 0 <= k < vec.len() ==> #[trigger] vec[k] == vec.push(i)[k],
          vec.push(i).index(l as int) == i,
  {
  }

vc-spec: |-
  fn remove_chars(str1: &Vec<char>, str2: &Vec<char>) -> (result: Vec<char>)
      // post-conditions-start
      ensures
          forall|i: int|
              0 <= i < result.len() ==> (str1@.contains(#[trigger] result[i]) && !str2@.contains(
                  #[trigger] result[i],
              )),
          forall|i: int|
              0 <= i < str1.len() ==> (str2@.contains(#[trigger] str1[i]) || result@.contains(
                  #[trigger] str1[i],
              )),
      // post-conditions-end

vc-code: |-
  {
      let mut result: Vec<char> = Vec::new();
      let mut i = 0;
      while i < str1.len()
          invariant
              forall|k: int| 0 <= k < result.len() ==> (str1@.contains(#[trigger] result[k]) && !str2@.contains(#[trigger] result[k])),
              forall|m: int| 0 <= m < i ==> (str2@.contains(#[trigger] str1[m]) || result@.contains(#[trigger] str1[m])),
          decreases
              str1.len() - i,
      {
          let c = str1[i];
          if !contains(str2, c) {
              result.push(c);
          }
          i += 1;
      }
      result
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

