vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_even(n: int) -> bool {
      n % 2 == 0
  }

vc-helpers: |-
  spec fn exists_even_in_seq(s: Seq<int>) -> bool {
      exists|i: int| 0 <= i < s.len() && is_even(s[i])
  }
  
  proof fn prove_exists_even(s: Seq<int>, idx: int)
      requires
          0 <= idx < s.len(),
          is_even(s[idx]),
      ensures
          exists_even_in_seq(s),
  {
  }

vc-spec: |-
  // <vc-spec>
  fn is_product_even(a: &[int]) -> (result: bool)
      ensures result <==> exists|i: int| 0 <= i < a.len() && is_even(a@[i])
  // </vc-spec>

vc-code: |-
  fn is_product_even(a: &[int]) -> (result: bool)
      ensures result <==> exists|i: int| 0 <= i < a.len() && is_even(a@[i])
  {
      let mut i = 0;
      while i < a.len()
          invariant
              0 <= i <= a.len(),
              forall|j: int| 0 <= j < i ==> !is_even(a@[j]),
      {
          if is_even(a[i]) {
              proof {
                  prove_exists_even(a@, i as int);
              }
              return true;
          }
          i = i + 1;
      }
      false
  }

vc-postamble: |-
  fn main() {
  }
  
  }

