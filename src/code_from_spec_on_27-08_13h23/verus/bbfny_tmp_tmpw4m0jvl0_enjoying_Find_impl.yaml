vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  // shenanigans going through the dafny tutorial
  
  
  
  
  spec fn max(a: int, b: int) -> int {
      if a > b { a } else { b }
  }
  
  fn testing() {
      assume(false);
  }
  
  spec fn abs(x: int) -> int {
      if x < 0 { -x } else { x }
  }
  
  
  spec fn fib(n: nat) -> nat
      decreases n
  {
      if n == 0 { 0 }
      else if n == 1 { 1 }
      else { fib((n - 1) as nat) + fib((n - 2) as nat) }
  }
  
  spec fn sorted(a: &[int]) -> bool {
      forall|j: int, k: int| 0 <= j < k < a.len() ==> a[j] < a[k]
  }

vc-helpers: |-
  spec fn binary_search_invariant(a: &[int], key: int, left: int, right: int) -> bool {
      (forall|k: int| 0 <= k < left ==> a[k] != key) &&
      (forall|k: int| right <= k < a.len() ==> a[k] != key)
  }

vc-spec: |-
  // <vc-spec>
  fn find(a: &[int], key: int) -> (index: i32)
      ensures
          0 <= index ==> index < a.len() && a[index as int] == key,
          index < 0 ==> forall|k: int| 0 <= k < a.len() ==> a[k] != key,
  // </vc-spec>

vc-code: |-
  fn find(a: &[int], key: int) -> (index: i32)
      ensures
          0 <= index ==> index < a.len() as i32 && a[index as int] == key,
          index < 0 ==> forall|k: int| 0 <= k < a.len() ==> a[k] != key,
  {
      let mut left: i32 = 0;
      let mut right: i32 = (a.len() as i32) - 1;
      let mut result: i32 = -1;
  
      while left <= right
          invariant
              0 <= left as int <= a.len() as int,
              -1 <= right as int < a.len() as int,
              binary_search_invariant(a, key, left as int, right as int + 1),
              result >= 0 ==> result < a.len() as i32 && a[result as int] == key,
      {
          let mid: i32 = left + (right - left) / 2;
          if a[mid as int] == key {
              result = mid;
              break;
          } else if a[mid as int] < key {
              left = mid + 1;
          } else {
              right = mid - 1;
          }
      }
  
      result
  }

vc-postamble: |-
  
  fn main() {}
  
  }

