vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  spec fn abs_diff(a: int, b: int) -> int {
      if a - b < 0 { b - a } else { a - b }
  }

vc-spec: |-
  // <vc-spec>
  fn has_close_elements(numbers: Seq<int>, threshold: int) -> (res: bool)
      requires threshold >= 0,
      ensures ({
          &&& (res ==> exists|i: int, j: int| 0 <= i < numbers.len() && 0 <= j < numbers.len() && i != j && 
              abs_diff(numbers[i], numbers[j]) < threshold)
          &&& (!res ==> forall|i: int, j: int| 1 <= i < numbers.len() && 0 <= j < i ==> 
              abs_diff(numbers[i], numbers[j]) >= threshold)
      }),
  // </vc-spec>

vc-code: |-
  fn has_close_elements(numbers: Seq<int>, threshold: int) -> (res: bool)
      requires threshold >= 0,
      ensures ({
          &&& (res ==> exists|i: int, j: int| 0 <= i < numbers.len() && 0 <= j < numbers.len() && i != j && 
              abs_diff(numbers[i], numbers[j]) < threshold)
          &&& (!res ==> forall|i: int, j: int| 0 <= i < numbers.len() && 0 <= j < i ==> 
              abs_diff(numbers[i], numbers[j]) >= threshold)
      })
  {
      let mut i: usize = 0;
      while i < numbers.len()
          invariant
              0 <= i <= numbers.len(),
              forall|k: int, l: int| 0 <= k < i && 0 <= l < k ==> abs_diff(numbers[k], numbers[l]) >= threshold
      {
          let mut j: usize = 0;
          while j < i
              invariant
                  0 <= i <= numbers.len(),
                  0 <= j <= i,
                  forall|k: int, l: int| 0 <= k < i && 0 <= l < k ==> abs_diff(numbers[k], numbers[l]) >= threshold,
                  forall|l: int| 0 <= l < j ==> abs_diff(numbers[i as int], numbers[l]) >= threshold
          {
              if abs_diff(numbers[i as int], numbers[j as int]) < threshold {
                  return true;
              }
              j = j + 1;
          }
          i = i + 1;
      }
      false
  }

vc-postamble: |-
  fn main() {
  }
  
  }

