vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  proof fn lemma_seq_contains<T>(s: Seq<T>, elem: T)
      ensures
          s.contains(elem) ==> exists|i: int| 0 <= i < s.len() && s[i] == elem
  {
  }

vc-spec: |-
  // <vc-spec>
  fn remove_chars(s1: Seq<char>, s2: Seq<char>) -> (v: Seq<char>)
      ensures 
          v.len() <= s1.len(),
          forall|i: int| 0 <= i < v.len() ==> s1.contains(v[i]) && !s2.contains(v[i]),
          forall|i: int| 0 <= i < s1.len() ==> s2.contains(s1[i]) || v.contains(s1[i])
  // </vc-spec>

vc-code: |-
  fn remove_chars(s1: Seq<char>, s2: Seq<char>) -> (v: Seq<char>)
      ensures 
          v.len() <= s1.len(),
          forall|i: int| 0 <= i < v.len() ==> s1.contains(v[i]) && !s2.contains(v[i]),
          forall|i: int| 0 <= i < s1.len() ==> s2.contains(s1[i]) || v.contains(s1[i])
  {
      let mut result: Vec<char> = Vec::new();
      let mut i: usize = 0;
  
      while i < s1.len()
          invariant
              i <= s1.len(),
              result.len() <= i,
              forall|k: int| 0 <= k < result.len() ==> s1.contains(result[k as usize]) && !s2.contains(result[k as usize]),
              forall|k: int| 0 <= k < i ==> s2.contains(s1[k]) || result.contains(s1[k])
      {
          let c = s1[i];
          if !s2.contains(c) {
              result.push(c);
          }
          i = i + 1;
      }
  
      result.into_seq()
  }

vc-postamble: |-
  fn main() {
  }
  
  }

