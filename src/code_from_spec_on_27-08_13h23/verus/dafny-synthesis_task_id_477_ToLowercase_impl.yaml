vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_upper_case(c: char) -> bool {
      65 <= c as int <= 90
  }
  
  spec fn is_upper_lower_pair(C: char, c: char) -> bool {
      (C as int) == (c as int) - 32
  }
  
  spec fn shift_32(c: char) -> char {
      (((c as int + 32) % 128) as u8) as char
  }

vc-helpers: |-
  proof fn char_shift_32_correct(c: char)
      requires
          is_upper_case(c),
      ensures
          is_upper_lower_pair(c, shift_32(c)),
  {
      assert((c as int) <= 90);
      assert((c as int) >= 65);
      assert(((c as int) + 32) <= 122);
      assert(((c as int) + 32) >= 97);
      assert(shift_32(c) as int == (c as int) + 32);
  }

vc-spec: |-
  // <vc-spec>
  #[verifier::exec_allows_no_decreases_clause]
  fn to_lowercase(s: &str) -> (v: String)
      ensures
          v@.len() == s@.len(),
          forall|i: int| #![trigger s@[i]] 0 <= i < s@.len() ==> 
          {
              if is_upper_case(s@[i]) {
                  is_upper_lower_pair(s@[i], v@[i])
              } else {
                  v@[i] == s@[i]
              }
          }
  // </vc-spec>

vc-code: |-
  fn to_lowercase(s: &str) -> (v: String)
      ensures
          v@.len() == s@.len(),
          forall|i: int| #![trigger s@[i]] 0 <= i < s@.len() ==> 
          {
              if is_upper_case(s@[i]) {
                  is_upper_lower_pair(s@[i], v@[i])
              } else {
                  v@[i] == s@[i]
              }
          }
  {
      let mut result = String::new();
      let mut i = 0;
      while i < s@.len()
          invariant
              0 <= i <= s@.len(),
              result@.len() == i,
              forall|j: int| 0 <= j < i ==> 
              {
                  if is_upper_case(s@[j]) {
                      is_upper_lower_pair(s@[j], result@[j])
                  } else {
                      result@[j] == s@[j]
                  }
              }
      {
          let c = s@.index(i);
          if is_upper_case(c) {
              proof {
                  char_shift_32_correct(c);
              }
              let lower_c = shift_32(c);
              result.push(lower_c);
          } else {
              result.push(c);
          }
          i = i + 1;
      }
      result
  }

vc-postamble: |-
  fn main() {
  }
  
  }

