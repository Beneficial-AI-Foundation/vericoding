vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn f(n: nat) -> nat
      decreases n
  {
      if n == 0 { 1 }
      else if n % 2 == 0 { 1 + 2 * f(n / 2) }
      else { 2 * f(n / 2) }
  }

vc-helpers: |-
  proof fn lemma_f_decreases(n: nat)
      decreases n
  {
      if n == 0 {
          assert(f(n) == 1);
      } else if n % 2 == 0 {
          lemma_f_decreases(n / 2);
          assert(f(n) == 1 + 2 * f(n / 2));
          assert(f(n) >= 1);
      } else {
          lemma_f_decreases(n / 2);
          assert(f(n) == 2 * f(n / 2));
          assert(f(n) >= 1);
      }
  }

vc-spec: |-
  // <vc-spec>
  fn mod_fn(n: u64) -> (a: u64)
      requires n >= 0,
      ensures a as nat == f(n as nat),
  // </vc-spec>

vc-code: |-
  fn mod_fn(n: u64) -> (a: u64)
      requires n >= 0,
      ensures a as nat == f(n as nat),
      decreases n as nat,
  {
      if n == 0 {
          1
      } else if n % 2 == 0 {
          let res = mod_fn(n / 2);
          proof {
              lemma_f_decreases(n as nat);
          }
          1 + 2 * res
      } else {
          let res = mod_fn(n / 2);
          proof {
              lemma_f_decreases(n as nat);
          }
          2 * res
      }
  }

vc-postamble: |-
  fn main() {}
  
  }

