vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn expt(b: int, n: nat) -> int
      decreases n
  {
      if n == 0 { 1 } else { b * expt(b, (n - 1) as nat) }
  }

vc-helpers: |-
  proof fn expt_non_negative(b: int, n: nat)
      ensures expt(b, n) >= 1
      decreases n
  {
      if n == 0 {
          assert(expt(b, n) == 1);
      } else {
          expt_non_negative(b, (n - 1) as nat);
          assert(expt(b, n) == b * expt(b, (n - 1) as nat));
      }
  }

vc-spec: |-
  // <vc-spec>
  fn expt_method(b: i32, n: u32) -> (res: i32)
      ensures res == expt(b as int, n as nat)
  // </vc-spec>

vc-code: |-
  fn expt_method(b: i32, n: u32) -> (res: i32)
      ensures res == expt(b as int, n as nat)
  {
      let mut result = 1;
      let mut i = n;
      while i > 0
          invariant
              i <= n,
              result == expt(b as int, (n - i) as nat)
          decreases i
      {
          result = result * b;
          i = i - 1;
      }
      result
  }

vc-postamble: |-
  
  fn main() {
  }
  
  }

