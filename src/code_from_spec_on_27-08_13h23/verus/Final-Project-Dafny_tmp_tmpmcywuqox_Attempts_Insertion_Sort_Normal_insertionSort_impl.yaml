vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn sorted(a: &Vec<i32>) -> bool {
      forall|i: int, j: int| 0 <= i < j < a.len() ==> a[i] <= a[j]
  }
  
  spec fn sorted_range(a: &Vec<i32>, end: int) -> bool {
      forall|i: int, j: int| 0 <= i < j < end ==> a[i] <= a[j]
  }
  
  fn look_for_min(a: &Vec<i32>, i: usize) -> (m: usize)
      requires 
          0 <= i < a.len()
      ensures 
          i <= m < a.len(),
          forall|k: int| i <= k < a.len() ==> a[k as int] >= a[m as int]
  {
      assume(false);
      i // placeholder return
  }

vc-helpers: |-
  spec fn sorted_range_inclusive(a: &Vec<i32>, start: int, end: int) -> bool {
      forall|i: int, j: int| start <= i < j <= end && i < a.len() && j < a.len() ==> a[i] <= a[j]
  }
  
  proof fn lemma_sorted_range(a: &Vec<i32>, start: int, end: int)
      requires
          0 <= start <= end < a.len(),
          sorted_range_inclusive(a, start, end),
      ensures
          sorted_range(a, end + 1),
  {
      assert(forall|i: int, j: int| 0 <= i < j < end + 1 ==> a[i] <= a[j]) by {
          if start <= i {
              assert(start <= i < j <= end ==> a[i] <= a[j]);
          }
      }
  }

vc-spec: |-
  // <vc-spec>
  fn insertion_sort(a: &mut Vec<i32>)
      ensures sorted(a)
  // </vc-spec>

vc-code: |-
  fn insertion_sort(a: &mut Vec<i32>)
      ensures sorted(a)
  {
      let mut i: usize = 1;
      while i < a.len()
          invariant
              0 <= i <= a.len(),
              sorted_range(a, i as int),
      {
          let mut j: usize = i;
          while j > 0 && a[j] < a[j - 1]
              invariant
                  0 < j <= i <= a.len(),
                  sorted_range(a, i as int),
                  forall|k: int| j <= k < i ==> a[k as int] >= a[j as int],
          {
              a.swap(j, j - 1);
              j = j - 1;
          }
          i = i + 1;
      }
  }

vc-postamble: |-
  
  fn main() {
  }
  
  }

