vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  // No changes needed in helpers for this fix

vc-spec: |-
  // <vc-spec>
  fn find_first_occurrence(arr: &[i32], target: i32) -> (result: i32)
      requires
          forall|i: int, j: int| 0 <= i < j < arr.len() ==> arr[i] <= arr[j]
      ensures
          (0 <= result < arr.len() ==> arr[result as int] == target) &&
          (result == -1 ==> forall|i: int| 0 <= i < arr.len() ==> arr[i] != target)
  // </vc-spec>

vc-code: |-
  fn find_first_occurrence(arr: &[i32], target: i32) -> (result: i32)
      requires
          forall|i: int, j: int| 0 <= i < j < arr.len() ==> arr[i] <= arr[j]
      ensures
          (0 <= result < arr.len() ==> arr[result as int] == target) &&
          (result == -1 ==> forall|i: int| 0 <= i < arr.len() ==> arr[i] != target)
  {
      let mut left: i32 = 0;
      let mut right: i32 = (arr.len() as i32) - 1;
      let mut result: i32 = -1;
  
      while left <= right
          invariant
              0 <= left <= arr.len() as i32,
              -1 <= right < arr.len() as i32,
              result == -1 || (0 <= result < arr.len() as i32 && arr[result as int] == target),
              forall|i: int| 0 <= i < left ==> arr[i] < target,
              forall|i: int| right < i < arr.len() ==> arr[i] > target
          decreases right - left
      {
          let mid: i32 = left + (right - left) / 2;
          if arr[mid as usize] == target {
              result = mid;
              right = mid - 1;
          } else if arr[mid as usize] < target {
              left = mid + 1;
          } else {
              right = mid - 1;
          }
      }
  
      result
  }

vc-postamble: |-
  fn main() {
  }
  
  }

