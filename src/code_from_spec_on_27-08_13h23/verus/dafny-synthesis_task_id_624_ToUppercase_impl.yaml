vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_lower_case(c: char) -> bool {
      97 <= c as int <= 122
  }
  
  spec fn is_lower_upper_pair(c: char, C: char) -> bool {
      (c as int) == (C as int) + 32
  }
  
  spec fn shift_minus_32(c: char) -> char {
      ((c as int - 32) % 128) as char
  }

vc-helpers: |-
  proof fn lemma_shift_minus_32(c: char)
      requires
          is_lower_case(c),
      ensures
          is_lower_upper_pair(c, shift_minus_32(c)),
  {
      assert((c as int) >= 97 && (c as int) <= 122);
      assert(((c as int - 32) % 128) == (c as int - 32));
      assert(is_lower_upper_pair(c, shift_minus_32(c)));
  }

vc-spec: |-
  // <vc-spec>
  fn to_uppercase(s: Seq<char>) -> (v: Seq<char>)
      ensures
          v.len() == s.len(),
          forall|i: int| 0 <= i < s.len() ==> 
              if is_lower_case(s[i]) {
                  is_lower_upper_pair(s[i], v[i])
              } else {
                  v[i] == s[i]
              }
  // </vc-spec>

vc-code: |-
  fn to_uppercase(s: Seq<char>) -> (v: Seq<char>)
      ensures
          v.len() == s.len(),
          forall|i: int| 0 <= i < s.len() ==> 
              if is_lower_case(s@[i]) {
                  is_lower_upper_pair(s@[i], v@[i])
              } else {
                  v@[i] == s@[i]
              }
  {
      let mut result: Vec<char> = Vec::new();
      let mut i: usize = 0;
  
      while i < s.len()
          invariant
              i <= s.len(),
              result.len() == i,
              forall|j: int| 0 <= j < i ==> 
                  if is_lower_case(s@[j]) {
                      is_lower_upper_pair(s@[j], result@[j])
                  } else {
                      result@[j] == s@[j]
                  }
      {
          let c = s@[i as int];
          if is_lower_case(c) {
              proof {
                  lemma_shift_minus_32(c);
              }
              result.push(shift_minus_32(c));
          } else {
              result.push(c);
          }
          i = i + 1;
      }
  
      result.into()
  }

vc-postamble: |-
  
  fn main() {
  }
  
  }

