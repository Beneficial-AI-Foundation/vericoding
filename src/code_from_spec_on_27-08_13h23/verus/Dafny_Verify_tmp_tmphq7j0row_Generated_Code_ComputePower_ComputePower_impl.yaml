vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn power(n: nat) -> nat
      decreases n
  {
      if n == 0 { 1 } else { 2 * power((n - 1) as nat) }
  }

vc-helpers: |-
  proof fn lemma_power(n: nat)
      decreases n
  {
      if n > 0 {
          lemma_power((n - 1) as nat);
      }
  }

vc-spec: |-
  // <vc-spec>
  fn compute_power(n: u32) -> (p: u32)
      requires n < 32, // practical bound to prevent overflow
      ensures p == power(n as nat),
  // </vc-spec>

vc-code: |-
  fn compute_power(n: u32) -> (p: u32)
      requires n < 32,
      ensures p == power(n as nat),
  {
      let mut result = 1;
      let mut i = 0;
      while i < n
          invariant
              i <= n,
              result == power(i as nat),
      {
          result = result * 2;
          i = i + 1;
      }
      result
  }

vc-postamble: |-
  fn main() {
  }
  
  }

