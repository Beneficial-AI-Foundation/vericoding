vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  // Author: Shaobo He
  
  spec fn sqrt(x: int, r: int) -> bool {
      r * r <= x && (r + 1) * (r + 1) > x
  }

vc-helpers: |-
  proof fn lemma_sqrt_increasing(x: int, r1: int, r2: int)
      requires
          r1 <= r2,
          sqrt(x, r1),
      ensures
          r2 * r2 <= x || sqrt(x, r2)
  {
      if r2 * r2 <= x {
          assert(r2 * r2 <= x);
      } else {
          assert((r2 - 1) * (r2 - 1) <= r1 * r1 + 2 * r1 + 1);
          assert(r1 * r1 <= x);
          assert((r2 - 1) * (r2 - 1) <= x);
          assert(r2 * r2 > x);
          assert(sqrt(x, r2 - 1));
      }
  }

vc-spec: |-
  // <vc-spec>
  #[verifier::exec_allows_no_decreases_clause]
  fn mySqrt(x: int) -> (res: int)
      requires 0 <= x,
      ensures sqrt(x, res),
  // </vc-spec>

vc-code: |-
  fn mySqrt(x: int) -> (res: int)
      requires 0 <= x,
      ensures sqrt(x, res),
  {
      if x == 0 {
          return 0;
      }
      
      let mut r = 0;
      while (r + 1) * (r + 1) <= x
          invariant
              r * r <= x,
      {
          r = r + 1;
      }
      proof {
          lemma_sqrt_increasing(x, r, r);
      }
      r
  }

vc-postamble: |-
  
  fn main() {
  }
  
  }

