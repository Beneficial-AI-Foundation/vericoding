vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_odd(n: int) -> bool {
      n % 2 == 1
  }

vc-helpers: |-
  proof fn lemma_odd_index_implies_odd_value(a: &[int], i: int)
      requires
          0 <= i < a.len(),
          is_odd(i),
          forall|j: int| 0 <= j < a.len() ==> (is_odd(j) ==> is_odd(a[j])),
      ensures
          is_odd(a[i])
  {
      // The forall condition directly implies the result for index i
  }

vc-spec: |-
  // <vc-spec>
  fn is_odd_at_index_odd(a: &[int]) -> (result: bool)
      ensures result <==> forall|i: int| 0 <= i < a.len() ==> (is_odd(i) ==> is_odd(a[i]))
  // </vc-spec>

vc-code: |-
  fn is_odd_at_index_odd(a: &[int]) -> (result: bool)
      ensures result <==> forall|i: int| 0 <= i < a.len() ==> (is_odd(i) ==> is_odd(a[i]))
  {
      let mut i = 0;
      while i < a.len()
          invariant
              0 <= i <= a.len(),
              forall|j: int| 0 <= j < i ==> (is_odd(j) ==> is_odd(a[j])),
      {
          if is_odd(i) && !is_odd(a[i]) {
              return false;
          }
          i = i + 1;
      }
      true
  }

vc-postamble: |-
  fn main() {
  }
  
  }

