vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  // No updates needed for helpers in this case

vc-spec: |-
  // <vc-spec>
  fn modify_array_element(arr: &mut Vec<Vec<nat>>, index1: usize, index2: usize, val: nat)
    requires
        index1 < old(arr).len(),
        index2 < old(arr)[index1 as int].len(),
        forall|i: int, j: int| 
            0 <= i < old(arr).len() && 0 <= j < old(arr).len() && i != j ==> 
            !equal(old(arr)[i], old(arr)[j]),
    ensures
        arr.len() == old(arr).len(),
        forall|i: int| 0 <= i < arr.len() ==> equal(arr[i], old(arr)[i]),
        forall|i: int, j: int| 
            0 <= i < arr.len() && 0 <= j < arr[i].len() && 
            (i != index1 || j != index2) ==> 
            arr[i][j] == old(arr)[i][j],
        arr[index1 as int][index2 as int] == val,
  // </vc-spec>

vc-code: |-
  fn modify_array_element(arr: &mut Vec<Vec<nat>>, index1: usize, index2: usize, val: nat)
      requires
          index1 < old(arr).len(),
          index2 < old(arr)[index1 as int].len(),
          forall|i: int, j: int| 
              0 <= i < old(arr).len() && 0 <= j < old(arr)[i].len() && i != j ==> 
              !equal(old(arr)[i], old(arr)[j]),
      ensures
          arr.len() == old(arr).len(),
          forall|i: int| 0 <= i < arr.len() ==> arr[i].len() == old(arr)[i].len(),
          forall|i: int, j: int| 
              0 <= i < arr.len() && 0 <= j < arr[i].len() && 
              (i != index1 as int || j != index2 as int) ==> 
              arr[i][j] == old(arr)[i][j],
          arr[index1 as int][index2 as int] == val,
  {
      arr[index1 as int].set(index2 as int, val);
  }

vc-postamble: |-
  fn main() {}
  
  }

