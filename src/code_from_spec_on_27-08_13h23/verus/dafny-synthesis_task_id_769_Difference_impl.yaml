vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  proof fn seq_contains_unique(s: Seq<int>, x: int)
      ensures
          s.contains(x) ==> exists|i: int| 0 <= i < s.len() && s.index(i) == x
  {
  }
  
  proof fn seq_no_duplicates(s: Seq<int>)
      ensures
          (forall|i: int, j: int| 0 <= i < j < s.len() ==> s.index(i) != s.index(j)) ==> 
          (forall|x: int| s.contains(x) ==> exists|k: int| 0 <= k < s.len() && s.index(k) == x && 
              forall|m: int| 0 <= m < s.len() && m != k ==> s.index(m) != x)
  {
  }

vc-spec: |-
  // <vc-spec>
  fn difference(a: Seq<int>, b: Seq<int>) -> (diff: Seq<int>)
      ensures
          forall|x: int| diff.contains(x) <==> (a.contains(x) && !b.contains(x)),
          forall|i: int, j: int| 0 <= i < j < diff.len() ==> diff.index(i) != diff.index(j),
  // </vc-spec>

vc-code: |-
  fn difference(a: Seq<int>, b: Seq<int>) -> (diff: Seq<int>)
      ensures
          forall|x: int| diff.contains(x) <==> (a.contains(x) && !b.contains(x)),
          forall|i: int, j: int| 0 <= i < j < diff.len() ==> diff.index(i) != diff.index(j),
  {
      let mut result: Vec<int> = Vec::new();
      let mut i: usize = 0;
  
      while i < a.len()
          invariant
              0 <= i <= a.len(),
              result.len() <= i,
              forall|x: int| result.contains(x) <==> exists|k: int| 0 <= k < i && a.index(k as int) == x && !b.contains(x),
              forall|m: int, n: int| 0 <= m < n < result.len() ==> result@[m] != result@[n]
      {
          let x = a.index(i as int);
          if !b.contains(x) && !result.contains(x) {
              result.push(x);
          }
          i = i + 1;
      }
  
      result.into_seq()
  }

vc-postamble: |-
  fn main() {}
  
  }

