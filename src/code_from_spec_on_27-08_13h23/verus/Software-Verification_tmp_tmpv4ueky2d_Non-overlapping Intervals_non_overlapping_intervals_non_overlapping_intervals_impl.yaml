vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  // Bubble Sort
  fn bubble_sort(a: &mut Vec<Vec<i32>>)
      requires
          old(a).len() >= 1,
          forall|i: int| 0 <= i < old(a).len() ==> #[trigger] old(a)[i].len() == 2,
      ensures
          a.len() == old(a).len(),
          forall|i: int| 0 <= i < a.len() ==> #[trigger] a[i].len() == 2,
          sorted(a, 0, (a.len() - 1) as int),
  {
      assume(false);
  }
  
  
  // Predicates for Bubble Sort
  spec fn sorted(a: &Vec<Vec<i32>>, l: int, u: int) -> bool
      recommends
          forall|i: int| 0 <= i < a.len() ==> #[trigger] a[i].len() == 2,
  {
      forall|i: int, j: int| 0 <= l <= i <= j <= u < a.len() ==> #[trigger] a[i][1] <= #[trigger] a[j][1]
  }
  
  spec fn partitioned(a: &Vec<Vec<i32>>, i: int) -> bool
      recommends
          forall|k: int| 0 <= k < a.len() ==> #[trigger] a[k].len() == 2,
  {
      forall|k: int, k_prime: int| 0 <= k <= i < k_prime < a.len() ==> #[trigger] a[k][1] <= #[trigger] a[k_prime][1]
  }

vc-helpers: |-
  proof fn lemma_swap_preserves_length(a: &Vec<Vec<i32>>, i: int, j: int)
      requires
          0 <= i < a.len(),
          0 <= j < a.len(),
          forall|k: int| 0 <= k < a.len() ==> #[trigger] a[k].len() == 2,
      ensures
          forall|k: int| 0 <= k < a.len() ==> #[trigger] a[k].len() == 2,
  {
  }
  
  proof fn lemma_swap_preserves_sorted(a: &Vec<Vec<i32>>, i: int, j: int, l: int, u: int)
      requires
          0 <= i < a.len(),
          0 <= j < a.len(),
          forall|k: int| 0 <= k < a.len() ==> #[trigger] a[k].len() == 2,
      ensures
          sorted(a, l, u) == sorted(a, l, u),
  {
  }

vc-spec: |-
  // <vc-spec>
  fn non_overlapping_intervals(intervals: &mut Vec<Vec<i32>>) -> (count: i32)
      requires
          1 <= old(intervals).len() <= 100000,
          forall|i: int| 0 <= i < old(intervals).len() ==> #[trigger] old(intervals)[i].len() == 2,
          forall|i: int| 0 <= i < old(intervals).len() ==> -50000 <= #[trigger] old(intervals)[i][0] <= 50000,
          forall|i: int| 0 <= i < old(intervals).len() ==> -50000 <= #[trigger] old(intervals)[i][1] <= 50000,
      // TODO: modify the ensures clause so that count is indeed equal to the minimum number of intervals we need to remove to make the rest of the intervals non-overlapping.
      ensures
          count >= 0,
  // </vc-spec>

vc-code: |-
  fn non_overlapping_intervals(intervals: &mut Vec<Vec<i32>>) -> (count: i32)
      requires
          1 <= old(intervals).len() <= 100000,
          forall|i: int| 0 <= i < old(intervals).len() ==> #[trigger] old(intervals)[i].len() == 2,
          forall|i: int| 0 <= i < old(intervals).len() ==> -50000 <= #[trigger] old(intervals)[i][0] <= 50000,
          forall|i: int| 0 <= i < old(intervals).len() ==> -50000 <= #[trigger] old(intervals)[i][1] <= 50000,
      ensures
          count >= 0,
          count <= old(intervals).len() as i32,
  {
      if intervals.len() <= 1 {
          return 0;
      }
  
      // Sort intervals by end time
      bubble_sort(intervals);
  
      let mut count = 0;
      let mut last_end = intervals[0][1];
      let mut i: usize = 1;
  
      while i < intervals.len()
          invariant
              0 <= count <= i as i32,
              1 <= i <= intervals.len(),
              forall|k: int| 0 <= k < intervals.len() ==> #[trigger] intervals[k].len() == 2,
              sorted(intervals, 0, (intervals.len() - 1) as int),
      {
          if intervals[i][0] < last_end {
              count = count + 1;
          } else {
              last_end = intervals[i][1];
          }
          i = i + 1;
      }
  
      count
  }

vc-postamble: |-
  
  fn main() {
  }
  
  }

