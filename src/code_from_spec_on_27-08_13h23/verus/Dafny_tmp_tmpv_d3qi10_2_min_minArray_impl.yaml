vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn min(a: int, b: int) -> int 
  {
      if a < b { a } else { b }
  }
  
  spec fn min_function(a: int, b: int) -> int 
  {
      if a < b { a } else { b }
  }

vc-helpers: |-
  spec fn min_of_array(v: Seq<i32>) -> i32
      decreases v.len()
  {
      if v.len() == 0 {
          0
      } else if v.len() == 1 {
          v[0]
      } else {
          let sub_min = min_of_array(v.drop_last());
          if v.last() < sub_min {
              v.last()
          } else {
              sub_min
          }
      }
  }
  
  proof fn lemma_min_of_array_correct(v: Seq<i32>)
      requires v.len() > 0
      ensures
          forall|k: int| 0 <= k < v.len() ==> min_of_array(v) <= v[k],
          exists|k: int| 0 <= k < v.len() && min_of_array(v) == v[k]
      decreases v.len()
  {
      if v.len() == 1 {
          assert(min_of_array(v) == v[0]);
          assert(forall|k: int| 0 <= k < v.len() ==> min_of_array(v) <= v[k]);
          assert(exists|k: int| 0 <= k < v.len() && min_of_array(v) == v[k]);
      } else {
          let sub_min = min_of_array(v.drop_last());
          lemma_min_of_array_correct(v.drop_last());
          let m = min_of_array(v);
          if v.last() < sub_min {
              assert(m == v.last());
              assert(forall|k: int| 0 <= k < v.len() - 1 ==> sub_min <= v[k]);
              assert(forall|k: int| 0 <= k < v.len() ==> m <= v[k]);
              assert(exists|k: int| 0 <= k < v.len() && m == v[k]);
          } else {
              assert(m == sub_min);
              assert(forall|k: int| 0 <= k < v.len() - 1 ==> sub_min <= v[k]);
              assert(forall|k: int| 0 <= k < v.len() ==> m <= v[k]);
              assert(exists|k: int| 0 <= k < v.len() && m == v[k]);
          }
      }
  }

vc-spec: |-
  // <vc-spec>
  fn min_array(a: &Vec<i32>) -> (m: i32)
      requires a.len() > 0
      ensures forall|k: int| 0 <= k < a.len() ==> m <= a[k]
      ensures exists|k: int| 0 <= k < a.len() && m == a[k]
  // </vc-spec>

vc-code: |-
  fn min_array(a: &Vec<i32>) -> (m: i32)
      requires a.len() > 0
      ensures
          forall|k: int| 0 <= k < a.len() ==> m <= a@[k],
          exists|k: int| 0 <= k < a.len() && m == a@[k]
  {
      let mut min_val = a@[0];
      let mut i: usize = 1;
  
      while i < a.len()
          invariant
              0 <= i <= a.len(),
              forall|k: int| 0 <= k < i ==> min_val <= a@[k],
              exists|k: int| 0 <= k < i && min_val == a@[k]
      {
          if a@[i] < min_val {
              min_val = a@[i];
          }
          i = i + 1;
      }
  
      proof {
          lemma_min_of_array_correct(a@);
      }
  
      min_val
  }

vc-postamble: |-
  
  fn main() {
  }
  
  }

