vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  // No additional helpers, spec functions, or proofs needed for this implementation

vc-spec: |-
  // <vc-spec>
  fn torneo(valores: &Vec<int>, i: usize, j: usize, k: usize) -> (res: (usize, usize))
      requires 
          valores.len() >= 20 && valores.len() < 50,
          i < valores.len() && j < valores.len() && k < valores.len(),
          i != j && j != k && k != i,
      ensures 
          exists|p: usize, q: usize, r: usize| 
              (p == i || p == j || p == k) &&
              (q == i || q == j || q == k) &&  
              (r == i || r == j || r == k) &&
              p != q && q != r && p != r &&
              valores[p as int] >= valores[q as int] && 
              valores[q as int] >= valores[r as int] &&
              res.0 == p && 
              res.1 == q, // Q
  // </vc-spec>

vc-code: |-
  fn torneo(valores: &Vec<int>, i: usize, j: usize, k: usize) -> (res: (usize, usize))
      requires
          valores.len() >= 20 && valores.len() < 50,
          i < valores.len() && j < valores.len() && k < valores.len(),
          i != j && j != k && k != i,
      ensures
          exists|p: usize, q: usize, r: usize|
              (p == i || p == j || p == k) &&
              (q == i || q == j || q == k) &&
              (r == i || r == j || r == k) &&
              p != q && q != r && p != r &&
              valores@[p] >= valores@[q] &&
              valores@[q] >= valores@[r] &&
              res.0 == p &&
              res.1 == q,
  {
      let vi = valores@[i];
      let vj = valores@[j];
      let vk = valores@[k];
      
      if vi >= vj && vi >= vk {
          if vj >= vk {
              (i, j)
          } else {
              (i, k)
          }
      } else if vj >= vi && vj >= vk {
          if vi >= vk {
              (j, i)
          } else {
              (j, k)
          }
      } else {
          if vi >= vj {
              (k, i)
          } else {
              (k, j)
          }
      }
  }

vc-postamble: |-
  
  fn main() {}
  
  }

