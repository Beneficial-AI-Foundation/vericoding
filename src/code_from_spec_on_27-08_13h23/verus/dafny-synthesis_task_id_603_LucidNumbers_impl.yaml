vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  // Helper function to check if a number is divisible by 3
  spec fn is_divisible_by_3(n: i32) -> bool {
      n % 3 == 0
  }

vc-spec: |-
  // <vc-spec>
  fn lucid_numbers(n: i32) -> (lucid: Vec<i32>)
      requires 
          n >= 0,
      ensures 
          forall|i: int| 0 <= i < lucid.len() ==> lucid[i] % 3 == 0,
          forall|i: int| 0 <= i < lucid.len() ==> lucid[i] <= n,
          forall|i: int, j: int| 0 <= i < j < lucid.len() ==> lucid[i] < lucid[j],
  // </vc-spec>

vc-code: |-
  fn lucid_numbers(n: i32) -> (lucid: Vec<i32>)
      requires
          n >= 0,
      ensures
          forall|i: int| 0 <= i < lucid.len() ==> lucid[i] % 3 == 0,
          forall|i: int| 0 <= i < lucid.len() ==> lucid[i] <= n,
          forall|i: int, j: int| 0 <= i < j < lucid.len() ==> lucid[i] < lucid[j],
  {
      let mut result: Vec<i32> = Vec::new();
      let mut i: i32 = 0;
  
      while i <= n
          invariant
              i <= n + 1,
              forall|k: int| 0 <= k < result.len() ==> result[k] % 3 == 0,
              forall|k: int| 0 <= k < result.len() ==> result[k] <= n,
              forall|k: int, m: int| 0 <= k < m < result.len() ==> result[k] < result[m],
              forall|k: int| 0 <= k < i && k % 3 == 0 ==> exists|j: int| 0 <= j < result.len() && result[j] == k,
      {
          if i % 3 == 0 {
              result.push(i);
          }
          i = i + 1;
      }
      result
  }

vc-postamble: |-
  fn main() {
  }
  
  }

