vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  // Function
  spec fn find_max(x: int, y: int) -> int {
      if x > y { x } else { y }
  }

vc-helpers: |-
  spec fn is_increasing(subseq: Seq<i32>) -> bool {
      forall|i: int, j: int| 0 <= i < j < subseq.len() ==> subseq[i] < subseq[j]
  }
  
  spec fn max_length_increasing_subsequence(nums: Seq<i32>) -> int {
      choose|len: int| 
          exists|subseq: Seq<i32>| 
              subseq.len() == len && 
              (forall|i: int| 0 <= i < subseq.len() ==> exists|j: int| 0 <= j < nums.len() && subseq[i] == nums[j]) &&
              (forall|i: int, j: int| 0 <= i < j < subseq.len() ==> exists|k: int, l: int| 
                  0 <= k < l < nums.len() && subseq[i] == nums[k] && subseq[j] == nums[l]) &&
              is_increasing(subseq) &&
              (forall|other: Seq<i32>| 
                  (forall|i: int| 0 <= i < other.len() ==> exists|j: int| 0 <= j < nums.len() && other[i] == nums[j]) &&
                  (forall|i: int, j: int| 0 <= i < j < other.len() ==> exists|k: int, l: int| 
                      0 <= k < l < nums.len() && other[i] == nums[k] && other[j] == nums[l]) &&
                  is_increasing(other) ==> other.len() <= len)
  }

vc-spec: |-
  // <vc-spec>
  fn longest_increasing_subsequence(nums: &Vec<i32>) -> (max: i32)
      requires 
          1 <= nums.len() <= 2500,
          forall|i: int| 0 <= i < nums.len() ==> #[trigger] nums[i] >= -10000 && #[trigger] nums[i] <= 10000,
      // TODO: modify the ensures clause so that max is indeed equal to the longest increasing subsequence
      ensures 
          max >= 1,
  // </vc-spec>

vc-code: |-
  fn longest_increasing_subsequence(nums: &Vec<i32>) -> (max: i32)
      requires 
          1 <= nums.len() <= 2500,
          forall|i: int| 0 <= i < nums.len() ==> #[trigger] nums[i] >= -10000 && #[trigger] nums[i] <= 10000,
      ensures 
          max >= 1,
          max == max_length_increasing_subsequence(nums@),
  {
      let n = nums.len();
      if n == 0 {
          return 1;
      }
  
      let mut dp: Vec<i32> = Vec::with_capacity(n);
      let mut i: usize = 0;
      while i < n
          invariant
              0 <= i <= n,
              dp.len() == i,
              forall|j: int| 0 <= j < i ==> dp[j] >= 1,
      {
          dp.push(1);
          i = i + 1;
      }
  
      let mut i: usize = 1;
      while i < n
          invariant
              0 <= i <= n,
              dp.len() == n,
              forall|j: int| 0 <= j < i ==> dp[j] >= 1,
      {
          let mut j: usize = 0;
          while j < i
              invariant
                  0 <= j <= i,
                  0 <= i < n,
                  dp.len() == n,
                  forall|k: int| 0 <= k < i ==> dp[k] >= 1,
          {
              if nums[j] < nums[i] {
                  let new_val = dp[j] + 1;
                  if new_val > dp[i] {
                      dp.set(i, new_val);
                  }
              }
              j = j + 1;
          }
          i = i + 1;
      }
  
      let mut max_len: i32 = dp[0];
      let mut i: usize = 1;
      while i < n
          invariant
              0 <= i <= n,
              dp.len() == n,
              max_len >= 1,
              forall|j: int| 0 <= j < i ==> dp[j] <= max_len,
      {
          if dp[i] > max_len {
              max_len = dp[i];
          }
          i = i + 1;
      }
  
      max_len
  }

vc-postamble: |-
  fn main() {
  }
  
  }

