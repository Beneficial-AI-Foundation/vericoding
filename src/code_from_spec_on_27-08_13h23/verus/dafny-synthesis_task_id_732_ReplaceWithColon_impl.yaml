vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_space_comma_dot(c: char) -> bool {
      c == ' ' || c == ',' || c == '.'
  }

vc-helpers: |-
  spec fn is_space_comma_dot(c: char) -> bool {
      c == ' ' || c == ',' || c == '.'
  }

vc-spec: |-
  // <vc-spec>
  fn replace_with_colon(s: &str) -> (v: String)
      ensures 
          v@.len() == s@.len(),
          forall|i: int| 0 <= i < s@.len() ==> {
              if is_space_comma_dot(s@[i]) {
                  v@[i] == ':'
              } else {
                  v@[i] == s@[i]
              }
          }
  // </vc-spec>

vc-code: |-
  fn replace_with_colon(s: &str) -> (v: String)
      ensures 
          v@.len() == s@.len(),
          forall|i: int| 0 <= i < s@.len() ==> {
              if is_space_comma_dot(s@[i]) {
                  v@[i] == ':'
              } else {
                  v@[i] == s@[i]
              }
          }
  {
      let mut result = String::new();
      let s_len = s@.len();
      let mut i: usize = 0;
      
      while i < s_len
          invariant
              0 <= i <= s_len,
              result@.len() == i,
              forall|j: int| 0 <= j < i ==> {
                  if is_space_comma_dot(s@[j]) {
                      result@[j] == ':'
                  } else {
                      result@[j] == s@[j]
                  }
              }
      {
          let c = s@[i as int];
          if is_space_comma_dot(c) {
              result.push(':');
          } else {
              result.push(c);
          }
          i = i + 1;
      }
      result
  }

vc-postamble: |-
  fn main() {}
  
  }

