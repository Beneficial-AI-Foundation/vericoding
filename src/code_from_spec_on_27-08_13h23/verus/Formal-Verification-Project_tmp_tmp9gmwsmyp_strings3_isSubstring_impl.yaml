vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_prefix_pred(pre: Seq<char>, str: Seq<char>) -> bool {
      pre.len() <= str.len() && 
      pre == str.subrange(0, pre.len() as int)
  }
  
  spec fn is_not_prefix_pred(pre: Seq<char>, str: Seq<char>) -> bool {
      pre.len() > str.len() || 
      pre != str.subrange(0, pre.len() as int)
  }
  
  fn is_prefix(pre: Seq<char>, str: Seq<char>) -> (res: bool)
      ensures 
          !res <==> is_not_prefix_pred(pre, str),
          res <==> is_prefix_pred(pre, str),
  {
      assume(false);
      false
  }
  
  spec fn is_substring_pred(sub: Seq<char>, str: Seq<char>) -> bool {
      exists|i: int| 0 <= i <= str.len() && is_prefix_pred(sub, str.subrange(i, str.len() as int))
  }
  
  spec fn is_not_substring_pred(sub: Seq<char>, str: Seq<char>) -> bool {
      forall|i: int| 0 <= i <= str.len() ==> is_not_prefix_pred(sub, str.subrange(i, str.len() as int))
  }
  
  spec fn have_common_k_substring_pred(k: nat, str1: Seq<char>, str2: Seq<char>) -> bool {
      exists|i1: int, j1: int| 0 <= i1 <= str1.len() - k && j1 == i1 + k && is_substring_pred(str1.subrange(i1, j1), str2)
  }
  
  spec fn have_not_common_k_substring_pred(k: nat, str1: Seq<char>, str2: Seq<char>) -> bool {
      forall|i1: int, j1: int| 0 <= i1 <= str1.len() - k && j1 == i1 + k ==> is_not_substring_pred(str1.subrange(i1, j1), str2)
  }

vc-helpers: |-
  proof fn prefix_implies_substring(sub: Seq<char>, str: Seq<char>, i: int)
      requires
          0 <= i <= str.len(),
          is_prefix_pred(sub, str.subrange(i, str.len() as int)),
      ensures
          is_substring_pred(sub, str),
  {
      assert(exists|i: int| 0 <= i <= str.len() && is_prefix_pred(sub, str.subrange(i, str.len() as int)));
  }
  
  proof fn not_substring_implies_no_prefix(sub: Seq<char>, str: Seq<char>)
      requires
          is_not_substring_pred(sub, str),
      ensures
          forall|i: int| 0 <= i <= str.len() ==> is_not_prefix_pred(sub, str.subrange(i, str.len() as int)),
  {
      assert(forall|i: int| 0 <= i <= str.len() ==> is_not_prefix_pred(sub, str.subrange(i, str.len() as int)));
  }

vc-spec: |-
  // <vc-spec>
  fn is_substring(sub: Seq<char>, str: Seq<char>) -> (res: bool)
      ensures res <==> is_substring_pred(sub, str)
      //ensures !res <==> is_not_substring_pred(sub, str) // This postcondition follows from the above lemma.
  // </vc-spec>

vc-code: |-
  fn is_substring(sub: Seq<char>, str: Seq<char>) -> (res: bool)
      ensures
          res <==> is_substring_pred(sub, str),
  {
      if sub.len() > str.len() {
          return false;
      }
  
      let mut i: int = 0;
      while i <= str.len() - sub.len()
          invariant
              0 <= i <= str.len() - sub.len() + 1,
              forall|j: int| 0 <= j < i ==> !is_prefix_pred(sub, str.subrange(j, str.len() as int)),
      {
          let mut k: int = 0;
          let mut matched = true;
          while k < sub.len() && matched
              invariant
                  0 <= k <= sub.len(),
                  0 <= i <= str.len() - sub.len(),
                  matched ==> forall|m: int| 0 <= m < k ==> sub@[m] == str@[(i + m) as int],
          {
              if sub@[k] != str@[(i + k) as int] {
                  matched = false;
              }
              k = k + 1;
          }
  
          if matched {
              proof {
                  prefix_implies_substring(sub, str, i);
              }
              return true;
          }
          i = i + 1;
      }
      false
  }

vc-postamble: |-
  fn main() {}
  
  }

