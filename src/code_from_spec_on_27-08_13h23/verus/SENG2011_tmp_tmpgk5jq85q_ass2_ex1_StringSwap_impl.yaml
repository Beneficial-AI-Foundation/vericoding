vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  // No updates needed for helpers as the issue is a syntax error in the code section

vc-spec: |-
  // <vc-spec>
  fn string_swap(s: Seq<char>, i: nat, j: nat) -> (t: Seq<char>)
      requires 
          i >= 0 && j >= 0 && s.len() >= 0,
          s.len() > 0 ==> i < s.len() && j < s.len(),
      ensures 
          s.to_multiset() == t.to_multiset(),
          s.len() == t.len(),
          s.len() > 0 ==> forall|k: nat| k != i && k != j && k < s.len() ==> t[k as int] == s[k as int],
          s.len() > 0 ==> t[i as int] == s[j as int] && t[j as int] == s[i as int],
          s.len() == 0 ==> t == s,
  // </vc-spec>

vc-code: |-
  fn string_swap(s: Seq<char>, i: nat, j: nat) -> (t: Seq<char>)
      requires 
          i >= 0 && j >= 0 && s.len() >= 0,
          s.len() > 0 ==> i < s.len() && j < s.len(),
      ensures 
          s.to_multiset() == t.to_multiset(),
          s.len() == t.len(),
          s.len() > 0 ==> forall|k: nat| k != i && k != j && k < s.len() ==> t[k as int] == s[k as int],
          s.len() > 0 ==> t[i as int] == s[j as int] && t[j as int] == s[i as int],
          s.len() == 0 ==> t == s
  {
      if s.len() == 0 {
          s
      } else {
          let mut result = s;
          result = result.update(i as int, s[j as int]);
          result = result.update(j as int, s[i as int]);
          result
      }
  }

vc-postamble: |-
  // string == Seq<char>
  //give se2011 ass2 ex1.dfy
  
  fn main() {}
  
  }

