vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  proof fn lemma_seq_min_len(s: Seq<Seq<int>>, min_len: int, pos: int)
      requires
          0 <= pos < s.len(),
          s[pos].len() == min_len,
          forall|i: int| 0 <= i < s.len() ==> min_len <= s[i].len(),
      ensures
          exists|i: int| 0 <= i < s.len() && min_len == #[trigger] s[i].len(),
          forall|i: int| 0 <= i < s.len() ==> min_len <= s[i].len(),
  {
  }

vc-spec: |-
  // <vc-spec>
  fn smallest_list_length(s: Seq<Seq<int>>) -> (v: int)
      requires
          s.len() > 0,
      ensures
          forall|i: int| 0 <= i < s.len() ==> v <= s[i].len(),
          exists|i: int| 0 <= i < s.len() && v == #[trigger] s[i].len(),
  // </vc-spec>

vc-code: |-
  fn smallest_list_length(s: Seq<Seq<int>>) -> (v: int)
      requires
          s.len() > 0,
      ensures
          forall|i: int| 0 <= i < s.len() ==> v <= s[i].len(),
          exists|i: int| 0 <= i < s.len() && v == #[trigger] s[i].len(),
  {
      let mut min_len = s[0].len();
      let mut index = 0;
  
      while index < s.len()
          invariant
              0 <= index <= s.len(),
              forall|i: int| 0 <= i < index ==> min_len <= s[i].len(),
              exists|i: int| 0 <= i < index && min_len == #[trigger] s[i].len(),
      {
          if s[index].len() < min_len {
              min_len = s[index].len();
          }
          index = index + 1;
      }
  
      proof {
          lemma_seq_min_len(s, min_len, index - 1);
      }
  
      min_len
  }

vc-postamble: |-
  fn main() {
  }
  
  }

