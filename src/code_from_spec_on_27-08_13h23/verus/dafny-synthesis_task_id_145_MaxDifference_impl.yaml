vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  proof fn abs_diff_le_max_diff(a: &[i32], i: int, j: int, max_diff: i32)
      requires
          0 <= i < a.len(),
          0 <= j < a.len(),
          forall|k: int, l: int| 0 <= k < a.len() && 0 <= l < a.len() ==> a[k] - a[l] <= max_diff
      ensures
          a[i] - a[j] <= max_diff
  {
  }

vc-spec: |-
  // <vc-spec>
  fn max_difference(a: &[i32]) -> (diff: i32)
      requires a.len() > 1
      ensures forall|i: int, j: int| 0 <= i < a.len() && 0 <= j < a.len() ==> a[i] - a[j] <= diff
  // </vc-spec>

vc-code: |-
  fn max_difference(a: &[i32]) -> (diff: i32)
      requires a.len() > 1
      ensures forall|i: int, j: int| 0 <= i < a.len() && 0 <= j < a.len() ==> a[i] - a[j] <= diff
  {
      let mut max_val = a[0];
      let mut min_val = a[0];
      
      let mut i = 1;
      while i < a.len()
          invariant
              1 <= i <= a.len(),
              forall|k: int| 0 <= k < i ==> max_val >= a[k],
              forall|k: int| 0 <= k < i ==> min_val <= a[k]
      {
          if a[i] > max_val {
              max_val = a[i];
          }
          if a[i] < min_val {
              min_val = a[i];
          }
          i = i + 1;
      }
      
      let diff = max_val - min_val;
      proof {
          assert(forall|i: int, j: int| 0 <= i < a.len() && 0 <= j < a.len() ==> a[i] - a[j] <= diff);
      }
      diff
  }

vc-postamble: |-
  fn main() {
  }
  
  }

