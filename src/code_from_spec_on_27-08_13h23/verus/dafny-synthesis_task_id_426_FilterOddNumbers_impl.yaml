vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  /**
   * Filter odd numbers from an array of numbers
   **/
  
  spec fn is_odd(n: int) -> bool {
      n % 2 != 0
  }

vc-helpers: |-
  spec fn count_odds(arr: Seq<int>) -> nat
      decreases arr.len
  {
      if arr.len() == 0 {
          0
      } else {
          let rest_count = count_odds(arr.drop_last());
          if is_odd(arr.last()) {
              rest_count + 1
          } else {
              rest_count
          }
      }
  }
  
  proof fn lemma_filter_odds_contains(arr: Seq<int>, result: Seq<int>, idx: int)
      requires
          0 <= idx < arr.len(),
          is_odd(arr[idx]),
          forall|i: int| 0 <= i < result.len() ==> is_odd(result[i]) && arr.contains(result[i]),
      ensures
          result.contains(arr[idx]),
      decreases arr.len() - idx
  {
      if idx == arr.len() - 1 {
          if arr.len() > 0 && is_odd(arr.last()) {
              assert(result.contains(arr.last()));
          }
      } else {
          lemma_filter_odds_contains(arr.drop_last(), result, idx);
      }
  }

vc-spec: |-
  // <vc-spec>
  fn filter_odd_numbers(arr: &[int]) -> (odd_list: Vec<int>)
      ensures 
          // All numbers in the output are odd and exist in the input 
          forall|i: int| 0 <= i < odd_list.len() ==> is_odd(odd_list[i]) && arr@.contains(odd_list[i]),
          // All odd numbers in the input are in the output
          forall|i: int| 0 <= i < arr.len() && is_odd(arr[i]) ==> odd_list@.contains(arr[i]),
  // </vc-spec>

vc-code: |-
  fn filter_odd_numbers(arr: &[int]) -> (odd_list: Vec<int>)
      ensures
          forall|i: int| 0 <= i < odd_list.len() ==> is_odd(odd_list[i]) && arr@.contains(odd_list[i]),
          forall|i: int| 0 <= i < arr.len() && is_odd(arr[i]) ==> odd_list@.contains(arr[i]),
  {
      let mut result: Vec<int> = Vec::new();
      let mut i: usize = 0;
  
      while i < arr.len()
          invariant
              0 <= i <= arr.len(),
              forall|j: int| 0 <= j < result.len() ==> is_odd(result[j]) && arr@.contains(result[j]),
              forall|j: int| 0 <= j < i && is_odd(arr[j]) ==> result@.contains(arr[j]),
      {
          if is_odd(arr[i]) {
              result.push(arr[i]);
          }
          i = i + 1;
      }
  
      result
  }

vc-postamble: |-
  
  fn main() {}
  
  }

