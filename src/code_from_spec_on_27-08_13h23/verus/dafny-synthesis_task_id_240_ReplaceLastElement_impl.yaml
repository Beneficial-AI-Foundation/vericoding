vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  // No updates needed for helpers in this case

vc-spec: |-
  // <vc-spec>
  fn replace_last_element(first: &Vec<i32>, second: &Vec<i32>) -> (result: Vec<i32>)
      requires 
          first.len() > 0,
      ensures 
          result.len() == first.len() - 1 + second.len(),
          forall|i: int| 0 <= i < first.len() - 1 ==> result[i] == first[i],
          forall|i: int| first.len() - 1 <= i < result.len() ==> result[i] == second[i - first.len() + 1],
  // </vc-spec>

vc-code: |-
  fn replace_last_element(first: &Vec<i32>, second: &Vec<i32>) -> (result: Vec<i32>)
      requires 
          first.len() > 0,
      ensures 
          result.len() == first.len() - 1 + second.len(),
          forall|i: int| 0 <= i < first.len() - 1 ==> result[i] == first[i],
          forall|i: int| first.len() - 1 <= i < result.len() ==> result[i] == second[i - first.len() + 1],
  {
      let mut result = Vec::new();
      let first_len = first.len();
      let second_len = second.len();
      
      let mut i = 0;
      while i < first_len - 1
          invariant
              0 <= i <= first_len - 1,
              result.len() == i,
              forall|j: int| 0 <= j < i ==> result[j] == first[j],
      {
          result.push(first[i]);
          i = i + 1;
      }
      
      let mut j = 0;
      while j < second_len
          invariant
              0 <= j <= second_len,
              result.len() == first_len - 1 + j,
              forall|k: int| 0 <= k < first_len - 1 ==> result[k] == first[k],
              forall|k: int| first_len - 1 <= k < first_len - 1 + j ==> result[k] == second[k - first_len + 1],
      {
          result.push(second[j]);
          j = j + 1;
      }
      
      result
  }

vc-postamble: |-
  fn main() {
  }
  
  }

