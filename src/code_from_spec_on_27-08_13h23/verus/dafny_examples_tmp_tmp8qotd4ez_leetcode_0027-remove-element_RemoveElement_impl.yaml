vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  use vstd::multiset::Multiset;
  
  proof fn multiset_remove_val<T>(s: Multiset<T>, val: T) 
      ensures
          forall|x: T| x != val ==> s.count(x) == s.remove(val).count(x),
          s.remove(val).count(val) == 0
  {
  }

vc-spec: |-
  // <vc-spec>
  fn remove_element(nums: &mut Vec<i32>, val: i32) -> (newLength: usize)
      ensures 
          0 <= newLength <= nums.len(),
          forall|i: int| 0 <= i < newLength ==> nums[i] != val,
          nums@.subrange(0, newLength as int).to_multiset() == 
              old(nums)@.to_multiset().remove(val),
  // </vc-spec>

vc-code: |-
  fn remove_element(nums: &mut Vec<i32>, val: i32) -> (newLength: usize)
      ensures 
          0 <= newLength <= nums.len(),
          forall|i: int| 0 <= i < newLength ==> nums@[i] != val,
          nums@.subrange(0, newLength as int).to_multiset() == 
              old(nums)@.to_multiset().remove(val),
  {
      let mut write_index: usize = 0;
      let length = nums.len();
  
      let mut i: usize = 0;
      while i < length
          invariant
              0 <= write_index <= i <= length,
              forall|k: int| 0 <= k < write_index as int ==> nums@[k] != val,
      {
          if nums[i] != val {
              if write_index != i {
                  let temp = nums[write_index];
                  nums.set(write_index, nums[i]);
                  nums.set(i, temp);
              }
              write_index = write_index + 1;
          }
          i = i + 1;
      }
  
      write_index
  }

vc-postamble: |-
  fn main() {
  }
  
  }

