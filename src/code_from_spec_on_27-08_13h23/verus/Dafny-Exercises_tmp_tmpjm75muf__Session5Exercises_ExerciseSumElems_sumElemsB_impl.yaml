vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn sum_r(s: Seq<int>) -> int
      decreases s.len()
  {
      if s.len() == 0 {
          0
      } else {
          sum_r(s.subrange(0, s.len() - 1)) + s[s.len() - 1]
      }
  }
  
  spec fn sum_l(s: Seq<int>) -> int
      decreases s.len()
  {
      if s.len() == 0 {
          0
      } else {
          s[0] + sum_l(s.subrange(1, s.len() as int))
      }
  }
  
  
  spec fn sum_v(v: Seq<int>, c: int, f: int) -> int
  {
      if 0 <= c <= f <= v.len() {
          sum_r(v.subrange(c, f))
      } else {
          0
      }
  }

vc-helpers: |-
  proof fn sum_l_eq_sum_r(s: Seq<int>)
      decreases s.len()
      ensures sum_l(s) == sum_r(s)
  {
      if s.len() == 0 {
          return;
      }
      let subseq_l = s.subrange(1, s.len() as int);
      let subseq_r = s.subrange(0, s.len() - 1);
      sum_l_eq_sum_r(subseq_l);
      assert(sum_l(subseq_l) == sum_r(subseq_r));
      assert(sum_l(s) == s[0] + sum_l(subseq_l));
      assert(sum_r(s) == sum_r(subseq_r) + s[s.len() - 1]);
  }

vc-spec: |-
  // <vc-spec>
  fn sum_elems_b(v: &[i32]) -> (sum: i32)
  //ensures sum as int == sum_l(v@.map(|i, x| x as int))
  ensures sum as int == sum_r(v@.map(|i, x| x as int))
  // </vc-spec>

vc-code: |-
  fn sum_elems_b(v: &[i32]) -> (sum: i32)
      ensures sum as int == sum_l(v@.map(|i, x| x as int)),
              sum as int == sum_r(v@.map(|i, x| x as int))
  {
      let mut sum = 0;
      let mut i = 0;
      while i < v.len()
          invariant 0 <= i <= v.len(),
                    sum as int == sum_r(v@.subrange(0, i as int).map(|i, x| x as int))
      {
          sum = sum + v[i];
          i = i + 1;
      }
      proof {
          sum_l_eq_sum_r(v@.map(|i, x| x as int));
      }
      sum
  }

vc-postamble: |-
  
  fn main() {
  }
  
  }

