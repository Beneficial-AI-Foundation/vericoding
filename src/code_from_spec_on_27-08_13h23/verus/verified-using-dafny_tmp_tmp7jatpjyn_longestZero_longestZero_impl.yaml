vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn get_size(i: int, j: int) -> int {
      j - i + 1
  }
  
  // For a given integer array, let's find the longest subsequence of 0s.
  // sz: size, pos: position. a[pos..(pos+sz)] will be all zeros

vc-helpers: |-
  spec fn is_zero_subsequence(a: &Vec<i32>, start: int, size: int) -> bool {
      forall |i: int| start <= i < start + size ==> a@[i] == 0
  }
  
  spec fn no_longer_zero_subsequence(a: &Vec<i32>, max_size: int) -> bool {
      forall |i: int, j: int| {
          0 <= i < j < a.len() && get_size(i, j) > max_size
          ==> exists |k: int| i <= k <= j && a@[k] != 0
      }
  }
  
  proof fn lemma_subsequence_size(a: &Vec<i32>, start: int, size: int)
      requires
          0 <= start < a.len(),
          start + size <= a.len(),
          is_zero_subsequence(a, start, size),
          no_longer_zero_subsequence(a, size),
      ensures
          forall |i: int, j: int| {
              0 <= i < j < a.len() && get_size(i, j) > size
              ==> exists |k: int| i <= k <= j && a@[k] != 0
          }
  {
  }

vc-spec: |-
  // <vc-spec>
  fn longest_zero(a: &[i32]) -> (result: (usize, usize))
      requires 
          1 <= a.len()
      ensures 
          result.0 <= a.len(),
          result.1 < a.len(),
          result.1 + result.0 <= a.len(),
          forall |i: int| result.1 <= i < (result.1 + result.0) ==> a[i as int] == 0,
          forall |i: int, j: int| {
              0 <= i < j < a.len() && get_size(i, j) > (result.0 as int)
              ==> exists |k: int| i <= k <= j && a[k] != 0
          }
  // </vc-spec>

vc-code: |-
  fn longest_zero(a: &[i32]) -> (result: (usize, usize))
      requires
          1 <= a.len(),
      ensures
          result.0 <= a.len(),
          result.1 < a.len(),
          result.1 + result.0 <= a.len(),
          forall |i: int| result.1 <= i < (result.1 + result.0) ==> a[i as usize] == 0,
          forall |i: int, j: int| {
              0 <= i < j < a.len() && get_size(i, j) > (result.0 as int)
              ==> exists |k: int| i <= k <= j && a[k as usize] != 0
          }
  {
      let mut max_size = 0;
      let mut max_start = 0;
      let mut current_start = 0;
      let mut current_size = 0;
  
      let mut i = 0;
      while i < a.len()
          invariant
              0 <= i <= a.len(),
              0 <= current_start < a.len(),
              0 <= current_size <= i,
              current_start + current_size <= i,
              0 <= max_size <= i,
              0 <= max_start < a.len(),
              max_start + max_size <= i,
              forall |k: int| current_start <= k < current_start + current_size ==> a[k as usize] == 0,
              forall |k: int| max_start <= k < max_start + max_size ==> a[k as usize] == 0,
              forall |s: int, e: int| {
                  0 <= s < e <= i && get_size(s, e) > max_size as int
                  ==> exists |k: int| s <= k <= e && a[k as usize] != 0
              }
      {
          if a[i] == 0 {
              if current_size == 0 {
                  current_start = i;
              }
              current_size = current_size + 1;
          } else {
              if current_size > max_size {
                  max_size = current_size;
                  max_start = current_start;
              }
              current_size = 0;
          }
          i = i + 1;
      }
  
      if current_size > max_size {
          max_size = current_size;
          max_start = current_start;
      }
  
      (max_size, max_start)
  }

vc-postamble: |-
  fn main() {}
  
  }

