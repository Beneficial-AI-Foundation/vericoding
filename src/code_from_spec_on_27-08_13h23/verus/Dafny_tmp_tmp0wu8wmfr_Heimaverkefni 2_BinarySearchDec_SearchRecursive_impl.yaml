vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  // Author of question: Snorri Agnarsson
  // Permalink of question: https://rise4fun.com/Dafny/CGB1z
  
  // Authors of solution:   Alexander Guðmundsson
  // Permalink of solution: https://rise4fun.com/Dafny/VnB5
  
  // Use the command
  //   verus H2-skeleton.rs
  // to compile the file.
  
  // When you have solved the problem put
  // the solution on the Verus web page,
  // generate a permalink and put it in
  // this file.

vc-helpers: |-
  proof fn lemma_seq_slice(a: Seq<int>, start: int, end: int)
      requires
          0 <= start <= end <= a.len(),
      ensures
          forall|p: int, q: int| start <= p < q < end ==> a[p] >= a[q],
  {
  }

vc-spec: |-
  // <vc-spec>
  fn search_recursive(a: Seq<int>, i: int, j: int, x: int) -> (k: int)
      requires 
          0 <= i <= j <= a.len(),
          forall|p: int, q: int| i <= p < q < j ==> a[p] >= a[q],
      ensures 
          i <= k <= j,
          forall|r: int| i <= r < k ==> a[r] >= x,
          forall|r: int| k <= r < j ==> a[r] < x,
      decreases j - i
  // </vc-spec>

vc-code: |-
  fn search_recursive(a: Seq<int>, i: int, j: int, x: int) -> (k: int)
      requires 
          0 <= i <= j <= a.len(),
          forall|p: int, q: int| i <= p < q < j ==> a[p] >= a[q],
      ensures 
          i <= k <= j,
          forall|r: int| i <= r < k ==> a[r] >= x,
          forall|r: int| k <= r < j ==> a[r] < x,
      decreases j - i
  {
      if i == j {
          return i;
      }
      
      let m = i + (j - i) / 2;
      
      if a[m] >= x {
          let k = search_recursive(a, m, j, x);
          return k;
      } else {
          let k = search_recursive(a, i, m, x);
          return k;
      }
  }

vc-postamble: |-
  fn main() {
      // Ef eftirfarandi fall er ekki samþykkt þá eru
      // föllin ekki að haga sér rétt að mati Verus.
  }
  
  }

