vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  //Algorithm 1: From left to right return the first
  
  //Algorithm 2: From right to left return the last

vc-helpers: |-
  // No changes needed in helpers for this fix

vc-spec: |-
  // <vc-spec>
  fn mfirstMaximum(v: &Vec<i32>) -> (i: usize)
      requires v.len() > 0,
      ensures 
          0 <= i < v.len() &&
          (forall|k: int| 0 <= k < v.len() ==> v[i as int] >= v[k]) &&
          (forall|l: int| 0 <= l < i ==> v[i as int] > v[l]),
      //Algorithm: from left to right
  // </vc-spec>

vc-code: |-
  fn mfirstMaximum(v: &Vec<i32>) -> (i: usize)
      requires v.len() > 0,
      ensures 
          0 <= i < v.len() &&
          (forall|k: int| 0 <= k < v.len() ==> v@[i as int] >= v@[k]) &&
          (forall|l: int| 0 <= l < i ==> v@[i as int] > v@[l]),
  {
      let mut max_index: usize = 0;
      let mut i: usize = 1;
  
      while i < v.len()
          invariant
              0 <= max_index < i <= v.len(),
              forall|k: int| 0 <= k < i ==> v@[max_index as int] >= v@[k],
              forall|l: int| 0 <= l < max_index ==> v@[max_index as int] > v@[l],
      {
          if v@[i] > v@[max_index] {
              max_index = i;
          }
          i = i + 1;
      }
      max_index
  }

vc-postamble: |-
  //Algorithm : from left to right
  //Algorithm : from right to left
  
  fn main() {}
  
  }

