vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_vowel(c: char) -> bool {
      c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||
      c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'
  }

vc-helpers: |-
  spec fn count_vowel_neighbors_spec(s: Seq<char>) -> int {
      Set::new(|i: int| 1 <= i < s.len() - 1 && 
                        is_vowel(s[i-1]) && 
                        is_vowel(s[i+1])).len()
  }

vc-spec: |-
  // <vc-spec>
  fn count_vowel_neighbors(s: &str) -> (count: usize)
      ensures 
          count >= 0 &&
          count == Set::new(|i: int| 1 <= i < s@.len() - 1 && 
                            is_vowel(s@[i-1]) && 
                            is_vowel(s@[i+1])).len(),
  // </vc-spec>

vc-code: |-
  fn count_vowel_neighbors(s: &str) -> (count: usize)
      ensures 
          count >= 0 &&
          count == Set::new(|i: int| 1 <= i < s@.len() - 1 && 
                            is_vowel(s@[i-1]) && 
                            is_vowel(s@[i+1])).len(),
  {
      let mut count: usize = 0;
      if s@.len() < 3 {
          return count;
      }
      let mut i: usize = 1;
      while i < s@.len() - 1
          invariant
              1 <= i <= s@.len() - 1,
              count >= 0,
              count == Set::new(|j: int| 1 <= j < i as int && 
                                is_vowel(s@[j-1]) && 
                                is_vowel(s@[j+1])).len(),
      {
          if is_vowel(s@[i-1]) && is_vowel(s@[i+1]) {
              count = count + 1;
          }
          i = i + 1;
      }
      count
  }

vc-postamble: |-
  fn main() {
  }
  
  }

