vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn sorted(a: &[int]) -> bool {
      forall|j: int, k: int| 0 <= j < k < a.len() ==> a[j] <= a[k]
  }

vc-helpers: |-
  spec fn mid_point(low: int, high: int) -> int {
      low + (high - low) / 2
  }
  
  proof fn lemma_mid_point(low: int, high: int)
      requires low <= high
      ensures low <= mid_point(low, high) <= high
  {
      // Verus can prove this automatically due to integer arithmetic
  }

vc-spec: |-
  // <vc-spec>
  fn binary_search(a: &[int], value: int) -> (index: i32)
      requires 
          sorted(a),
      ensures 
          0 <= index ==> index < a.len() && a[index as int] == value,
          index < 0 ==> forall|k: int| 0 <= k < a.len() ==> a[k] != value,
  // </vc-spec>

vc-code: |-
  fn binary_search(a: &[int], value: int) -> (index: i32)
      requires sorted(a)
      ensures 
          0 <= index ==> index < a.len() as i32 && a[index as int] == value,
          index < 0 ==> forall|k: int| 0 <= k < a.len() ==> a[k] != value
  {
      let mut low: i32 = 0;
      let mut high: i32 = (a.len() as i32) - 1;
      let mut result: i32 = -1;
  
      while low <= high
          invariant 
              0 <= low as int <= a.len(),
              -1 <= high as int < a.len(),
              result < 0 ==> forall|k: int| 0 <= k < low as int ==> a[k] != value,
              result < 0 ==> forall|k: int| high as int < k < a.len() ==> a[k] != value
          decreases high - low
      {
          let mid = low + (high - low) / 2;
          if a[mid as usize] == value {
              result = mid;
              break;
          } else if a[mid as usize] < value {
              low = mid + 1;
          } else {
              high = mid - 1;
          }
      }
  
      result
  }

vc-postamble: |-
  
  fn main() {
  }
  
  }

