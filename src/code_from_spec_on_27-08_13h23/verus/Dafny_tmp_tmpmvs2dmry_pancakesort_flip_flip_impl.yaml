vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  // flips (i.e., reverses) array elements in the range [0..num]

vc-helpers: |-
  proof fn lemma_swap_preserves_length<T>(v: &mut Vec<T>, i: usize, j: usize)
      requires
          i < v.len(),
          j < v.len(),
      ensures
          v.len() == old(v).len(),
  {
  }

vc-spec: |-
  // <vc-spec>
  fn flip(a: &mut Vec<i32>, num: usize)
      requires 
          old(a).len() > 0,
          num < old(a).len(),
      ensures
          forall|k: int| 0 <= k <= num as int ==> #[trigger] a[k] == old(a)[num as int - k],
          // forall k :: num < k < a.Length ==> a[k] == old(a[k])
          a.len() == old(a).len(),
  // </vc-spec>

vc-code: |-
  fn flip(a: &mut Vec<i32>, num: usize)
      requires
          old(a).len() > 0,
          num < old(a).len(),
      ensures
          forall|k: int| 0 <= k <= num as int ==> #[trigger] a[k] == old(a)[num as int - k],
          a.len() == old(a).len(),
  {
      let mut i: usize = 0;
      while i < (num / 2 + 1)
          invariant
              num < a.len(),
              a.len() == old(a).len(),
              i <= num / 2 + 1,
              forall|k: int| 0 <= k < i as int ==> #[trigger] a[k] == old(a)[num as int - k],
              forall|k: int| num as int - i < k <= num as int ==> #[trigger] a[k] == old(a)[num as int - k],
      {
          let j = num - i;
          a.swap(i, j);
          i = i + 1;
      }
  }

vc-postamble: |-
  
  fn main() {}
  
  }

