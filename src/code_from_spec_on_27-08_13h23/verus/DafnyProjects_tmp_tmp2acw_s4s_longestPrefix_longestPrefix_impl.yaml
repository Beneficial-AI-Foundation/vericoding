vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  // MFES, Exam 8/Sept/20201, Exercise 5 
  
  // Computes the length (i) of the longest common prefix (initial subarray) 
  // of two arrays a and b.

vc-helpers: |-
  // No updates needed for helper code, spec functions, or proofs as the issue was a compilation error in the code section.

vc-spec: |-
  // <vc-spec>
  fn longest_prefix(a: &[i32], b: &[i32]) -> (i: usize)
      ensures 
          i <= a.len() && i <= b.len(),
          a@.subrange(0, i as int) == b@.subrange(0, i as int),
          i < a.len() && i < b.len() ==> a[i as int] != b[i as int]
  // </vc-spec>

vc-code: |-
  fn longest_prefix(a: &[i32], b: &[i32]) -> (i: usize)
      ensures 
          i <= a.len() && i <= b.len(),
          a@.subrange(0, i as int) == b@.subrange(0, i as int),
          i < a.len() && i < b.len() ==> a[i as int] != b[i as int]
  {
      let mut i: usize = 0;
      while i < a.len() && i < b.len() && a[i] == b[i]
          invariant
              i <= a.len() && i <= b.len(),
              a@.subrange(0, i as int) == b@.subrange(0, i as int)
      {
          i = i + 1;
      }
      i
  }

vc-postamble: |-
  fn main() {
      // Test method with an example.
  }
  
  }

