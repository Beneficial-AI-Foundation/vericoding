vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn triple(a: &[int]) -> bool {
      exists|i: int| 0 <= i < a.len() - 2 && #[trigger] a[i] == a[i + 1] && a[i + 1] == a[i + 2]
  }

vc-helpers: |-
  proof fn lemma_triple_implies_index(a: &[int], i: int)
      requires
          0 <= i < a.len() - 2,
          a[i] == a[i + 1],
          a[i + 1] == a[i + 2],
      ensures
          triple(a),
  {
      assert(exists|j: int| 0 <= j < a.len() - 2 && a[j] == a[j + 1] && a[j + 1] == a[j + 2]) by {
          assert(0 <= i < a.len() - 2 && a[i] == a[i + 1] && a[i + 1] == a[i + 2]);
      }
  }

vc-spec: |-
  // <vc-spec>
  fn get_triple(a: &[int]) -> (index: usize)
  ensures 
      (0 <= index < a.len() - 1) || index == a.len(),
      index == a.len() <==> !triple(a),
      (0 <= index < a.len() - 1) <==> triple(a),
      (0 <= index < a.len() - 1) ==> a[index as int] == a[index as int + 1] && a[index as int + 1] == a[index as int + 2]
  // </vc-spec>

vc-code: |-
  fn get_triple(a: &[int]) -> (index: usize)
      ensures
          (0 <= index < a.len() - 1) || index == a.len(),
          index == a.len() <==> !triple(a),
          (0 <= index < a.len() - 1) <==> triple(a),
          (0 <= index < a.len() - 1) ==> a[index as int] == a[index as int + 1] && a[index as int + 1] == a[index as int + 2],
  {
      let mut i: usize = 0;
      while i < a.len() - 2
          invariant
              0 <= i <= a.len() - 2,
              forall|j: int| 0 <= j < i as int ==> !(a[j] == a[j + 1] && a[j + 1] == a[j + 2]),
      {
          if a[i as int] == a[i as int + 1] && a[i as int + 1] == a[i as int + 2] {
              proof {
                  lemma_triple_implies_index(a, i as int);
              }
              return i;
          }
          i = i + 1;
      }
      a.len()
  }

vc-postamble: |-
  
  fn main() {}
  
  }

