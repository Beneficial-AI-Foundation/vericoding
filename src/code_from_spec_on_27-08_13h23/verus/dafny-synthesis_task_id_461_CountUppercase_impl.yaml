vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_upper_case(c: char) -> bool {
      65 <= c as int <= 90
  }

vc-helpers: |-
  spec fn is_upper_case(c: char) -> bool {
      65 <= c as int && c as int <= 90
  }

vc-spec: |-
  // <vc-spec>
  fn count_uppercase(s: &str) -> (count: usize)
      ensures 
          count >= 0,
          count as int == s@.filter(|c: char| is_upper_case(c)).len(),
  // </vc-spec>

vc-code: |-
  fn count_uppercase(s: &str) -> (count: usize)
      ensures 
          count >= 0,
          count as int == s@.filter(|c: char| is_upper_case(c)).len(),
  {
      let mut count: usize = 0;
      let mut i: usize = 0;
      
      while i < s@.len()
          invariant
              i <= s@.len(),
              count as int == s@.subrange(0, i as int).filter(|c: char| is_upper_case(c)).len(),
      {
          if is_upper_case(s@[i]) {
              count = count + 1;
          }
          i = i + 1;
      }
      
      count
  }

vc-postamble: |-
  fn main() {}
  
  }

