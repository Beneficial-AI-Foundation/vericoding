vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  /**
  Consider cellular automata: a row of cells is repeatedly updated according to a rule. In this exercise I dabbled with,
  each cell has the value either false or true. Each cell's next state depends only on the immediate neighbours, in the 
  case where the cell is at the edges of the row, the inexistent neighbours are replaced by "false". The automaton table 
  will contain the initial row, plus a row for each number of steps.
   */
  struct Automaton {}
  
  /**
  This method computes the automaton.
  Provide the initial row: init, the rule and the desired number of steps
   */

vc-helpers: |-
  // Helper function to compute the next row based on the current row and the rule
  spec fn compute_next_row(curr_row: Seq<bool>, rule: spec_fn(bool, bool, bool) -> bool) -> Seq<bool>
  {
      let len = curr_row.len();
      seq![ len => |j: int| {
          if j == 0 {
              rule(false, curr_row[0], curr_row[1])
          } else if j == len - 1 {
              rule(curr_row[len - 2], curr_row[len - 1], false)
          } else {
              rule(curr_row[j - 1], curr_row[j], curr_row[j + 1])
          }
      }]
  }

vc-spec: |-
  // <vc-spec>
  #[verifier::exec_allows_no_decreases_clause]
  fn execute_automaton(init: Seq<bool>, rule: spec_fn(bool, bool, bool) -> bool, steps: nat) 
      -> (table: Seq<Seq<bool>>)
      requires 
          // we need the initial row to have the length bigger or equal to two
          init.len() >= 2
      ensures 
          // after computation the automaton is made of the initial row plus a row for each of the steps
          table.len() == 1 + steps,
          // the automaton must have the initial row at the top
          table[0] == init,
          // all rows in the automaton must be the same length
          forall|i: int| 0 <= i < table.len() ==> #[trigger] table[i].len() == init.len()
          // TODO: Additional ensures clauses for middle and corner elements would require complex triggers
          // Original Dafny clauses commented due to trigger complexity in Verus:
          // all the middle row elements (with existing neighbours) after a step, will be equal to the rule applied on the element in the previous state
          // and its neigbours
          // ensures forall i | 0 <= i < |table| - 1 ::
          //           forall j | 1 <= j <= |table[i]| - 2 :: table[i + 1][j] == rule(table[i][j - 1], table[i][j], table[i][j + 1])
          // the corner row elements (with non-existing neighbours) after a step, will be equal to the rule applied on the element in the previous state,
          // its neighbour and false
          // ensures forall i | 0 <= i < |table| - 1 ::
          //           table[i + 1][0] == rule(false, table[i][0], table[i][1]) && table[i + 1][|table[i]| - 1] == rule(table[i][|table[i]| - 2], table[i][|table[i]| - 1], false)
  // </vc-spec>

vc-code: |-
  fn execute_automaton(init: Seq<bool>, rule: spec_fn(bool, bool, bool) -> bool, steps: nat) 
      -> (table: Seq<Seq<bool>>)
      requires 
          init.len() >= 2
      ensures 
          table.len() == 1 + steps,
          table[0] == init,
          forall|i: int| 0 <= i < table.len() ==> #[trigger] table[i].len() == init.len()
  {
      let mut result: Vec<Vec<bool>> = Vec::new();
      result.push(init.to_vec());
      let mut current_row = init.to_vec();
      
      let mut step: usize = 0;
      while step < steps
          invariant
              result.len() == 1 + step,
              result[0 as int] == init,
              forall|i: int| 0 <= i < result.len() ==> #[trigger] result[i].len() == init.len(),
              step <= steps
      {
          let mut next_row: Vec<bool> = Vec::new();
          let len = current_row.len();
          let mut i: usize = 0;
          while i < len
              invariant
                  next_row.len() == i,
                  i <= len
          {
              let next_val = if i == 0 {
                  rule(false, current_row[0], current_row[1])
              } else if i == len - 1 {
                  rule(current_row[len - 2], current_row[len - 1], false)
              } else {
                  rule(current_row[i - 1], current_row[i], current_row[i + 1])
              };
              next_row.push(next_val);
              i = i + 1;
          }
          result.push(next_row.clone());
          current_row = next_row;
          step = step + 1;
      }
      result.to_seq()
  }

vc-postamble: |-
  
  fn main() {}
  
  }

