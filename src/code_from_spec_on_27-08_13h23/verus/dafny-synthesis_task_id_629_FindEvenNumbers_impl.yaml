vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_even(n: int) -> bool {
      n % 2 == 0
  }

vc-helpers: |-
  spec fn seq_contains<T>(s: Seq<T>, val: T) -> bool
      where T: std::cmp::PartialEq
  {
      exists|i: int| 0 <= i < s.len() && s[i] == val
  }
  
  proof fn lemma_seq_to_vec<T>(s: Seq<T>, v: Vec<T>)
      requires
          s.len() == v.len(),
          forall|i: int| 0 <= i < s.len() ==> s[i] == v[i],
      ensures
          forall|val: T| seq_contains(s, val) <==> v.contains(&val),
  {
  }

vc-spec: |-
  // <vc-spec>
  fn find_even_numbers(arr: &[i32]) -> (even_list: Vec<i32>)
      // All numbers in the output are even and exist in the input 
      ensures forall|i: int| 0 <= i < even_list.len() ==> is_even(even_list[i] as int) && exists|j: int| 0 <= j < arr.len() && arr[j] == even_list[i],
      // All even numbers in the input are in the output
      ensures forall|i: int| 0 <= i < arr.len() && is_even(arr[i] as int) ==> exists|j: int| 0 <= j < even_list.len() && even_list[j] == arr[i]
  // </vc-spec>

vc-code: |-
  fn find_even_numbers(arr: &[i32]) -> (even_list: Vec<i32>)
      ensures
          forall|i: int| 0 <= i < even_list.len() ==> is_even(even_list[i] as int) && exists|j: int| 0 <= j < arr.len() && arr[j] == even_list[i],
          forall|i: int| 0 <= i < arr.len() && is_even(arr[i] as int) ==> exists|j: int| 0 <= j < even_list.len() && even_list[j] == arr[i],
  {
      let mut result: Vec<i32> = Vec::new();
      let mut i: usize = 0;
  
      while i < arr.len()
          invariant
              0 <= i <= arr.len(),
              forall|k: int| 0 <= k < result.len() ==> is_even(result[k] as int) && exists|j: int| 0 <= j < arr.len() && arr[j] == result[k],
              forall|k: int| 0 <= k < i && is_even(arr[k] as int) ==> exists|j: int| 0 <= j < result.len() && result[j] == arr[k],
      {
          if is_even(arr[i] as int) {
              result.push(arr[i]);
          }
          i = i + 1;
      }
  
      result
  }

vc-postamble: |-
  fn main() {
  }
  
  }

