vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn count_to(a: &[bool], n: int) -> int
      decreases n when 0 <= n <= a.len()
  {
      if n <= 0 { 
          0int 
      } else { 
          count_to(a, n - 1) + if a[n - 1] { 1int } else { 0int } 
      }
  }

vc-helpers: |-
  spec fn count_to(a: &[bool], n: int) -> int
      decreases n when 0 <= n <= a.len()
  {
      if n <= 0 { 
          0int 
      } else { 
          count_to(a, n - 1) + if a[n - 1] { 1int } else { 0int } 
      }
  }

vc-spec: |-
  // <vc-spec>
  fn count_true(a: &[bool]) -> (result: usize)
      ensures result == count_to(a, a.len() as int)
  // </vc-spec>

vc-code: |-
  fn count_true(a: &[bool]) -> (result: usize)
      ensures result == count_to(a, a.len() as int)
  {
      let mut count: usize = 0;
      let mut i: usize = 0;
      
      while i < a.len()
          invariant
              0 <= i <= a.len(),
              count == count_to(a, i as int)
      {
          if a[i] {
              count = count + 1;
          }
          i = i + 1;
      }
      
      count
  }

vc-postamble: |-
  
  fn main() {
  }
  
  }

