vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  // No additional helpers needed for this fix

vc-spec: |-
  // <vc-spec>
  fn append_array(a: &[i32], b: &[i32]) -> (c: Vec<i32>)
      ensures 
          c.len() == a.len() + b.len(),
          forall|i: int| 0 <= i < a.len() ==> a[i] == c[i],
          forall|i: int| 0 <= i < b.len() ==> b[i] == c[a.len() + i],
  // </vc-spec>

vc-code: |-
  fn append_array(a: &[i32], b: &[i32]) -> (c: Vec<i32>)
      ensures
          c.len() == a.len() + b.len(),
          forall|i: int| 0 <= i < a.len() ==> a[i as usize] == c[i as usize],
          forall|i: int| 0 <= i < b.len() ==> b[i as usize] == c[(a.len() + i) as usize],
  {
      let mut result: Vec<i32> = Vec::new();
      let mut i: usize = 0;
  
      while i < a.len()
          invariant
              i <= a.len(),
              result.len() == i,
              forall|k: int| 0 <= k < i ==> a[k as usize] == result[k as usize],
      {
          result.push(a[i]);
          i = i + 1;
      }
  
      i = 0;
      while i < b.len()
          invariant
              i <= b.len(),
              result.len() == a.len() + i,
              forall|k: int| 0 <= k < a.len() ==> a[k as usize] == result[k as usize],
              forall|k: int| 0 <= k < i ==> b[k as usize] == result[(a.len() + k) as usize],
      {
          result.push(b[i]);
          i = i + 1;
      }
  
      result
  }

vc-postamble: |-
  
  fn main() {
  }
  
  }

