vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  /* 
  * Formal verification of O(n) and O(log n) algorithms to calculate the natural
  * power of a real number (x^n), illustrating the usage of lemmas.
  * FEUP, MIEIC, MFES, 2020/21.
  */
  
  // Initial specification/definition of x^n, recursive, functional style, 
  // with time and space complexity O(n).
  spec fn power(x: int, n: nat) -> int
      decreases n
  {
      if n == 0 { 1 } else { x * power(x, (n - 1) as nat) }
  }
  
  // Iterative version, imperative, with time complexity O(n) and space complexity O(1).

vc-helpers: |-
  proof fn power_addition(x: int, a: nat, b: nat)
      ensures power(x, a + b) == power(x, a) * power(x, b)
      decreases a
  {
      if a == 0 {
          assert(power(x, 0 + b) == power(x, b));
          assert(power(x, 0) == 1);
      } else {
          power_addition(x, (a - 1) as nat, b);
          assert(power(x, a + b) == x * power(x, (a - 1 + b) as nat));
          assert(power(x, a) == x * power(x, (a - 1) as nat));
      }
  }

vc-spec: |-
  // <vc-spec>
  fn power_iter(x: i64, n: u64) -> (p: i64)
      ensures p == power(x as int, n as nat)
  // </vc-spec>

vc-code: |-
  fn power_iter(x: i64, n: u64) -> (p: i64)
      ensures p == power(x as int, n as nat)
  {
      let mut result = 1i64;
      let mut i = 0u64;
      
      while i < n
          invariant
              i <= n,
              result == power(x as int, i as nat)
      {
          result = result * x;
          i = i + 1;
      }
      
      result
  }

vc-postamble: |-
  // Recursive version, imperative, with time and space complexity O(log n).
  
  // States the property x^a * x^b = x^(a+b), that powerOpt takes advantage of. 
  // The annotation {:induction a} guides Dafny to prove the property
  // by automatic induction on 'a'.
  
  // A simple test case to make sure the specification is adequate.
  
  fn main() {
  }
  
  }

