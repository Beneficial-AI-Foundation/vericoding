vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  // Predicate to check if array slice is sorted
  spec fn sorted(a: &[int], l: int, u: int) -> bool {
      forall|i: int, j: int| 0 <= l <= i <= j <= u < a.len() ==> a[i] <= a[j]
  }

vc-helpers: |-
  // Helper spec function to maintain loop invariants for binary search
  spec fn mid_point(low: int, high: int) -> int {
      low + (high - low) / 2
  }
  
  // Helper spec function to check if key is not in the range [low, high]
  spec fn key_not_in_range(a: &[int], key: int, low: int, high: int) -> bool {
      forall|k: int| low <= k <= high ==> a[k] != key
  }

vc-spec: |-
  // <vc-spec>
  fn binary_search(a: &[int], key: int) -> (index: i32)
      requires 
          a.len() > 0,
          sorted(a, 0, (a.len() - 1) as int),
      ensures 
          index >= 0 ==> index < a.len() && a[index as int] == key,
          index < 0 ==> forall|k: int| 0 <= k < a.len() ==> a[k] != key,
  // </vc-spec>

vc-code: |-
  fn binary_search(a: &[int], key: int) -> (index: i32)
      requires 
          a.len() > 0,
          sorted(a, 0, (a.len() - 1) as int),
      ensures 
          index >= 0 ==> index < a.len() as i32 && a[index as int] == key,
          index < 0 ==> forall|k: int| 0 <= k < a.len() ==> a[k] != key,
  {
      let mut low: i32 = 0;
      let mut high: i32 = (a.len() - 1) as i32;
      
      while low <= high
          invariant
              0 <= low as int <= a.len() as int,
              0 <= high as int < a.len() as int,
              sorted(a, 0, (a.len() - 1) as int),
              low > 0 ==> key_not_in_range(a, key, 0, (low - 1) as int),
              high < (a.len() - 1) as i32 ==> key_not_in_range(a, key, (high + 1) as int, (a.len() - 1) as int),
          decreases
              high - low,
      {
          let mid: i32 = ((low as int + high as int) / 2) as i32;
          
          if a[mid as usize] == key {
              return mid;
          } else if a[mid as usize] < key {
              low = mid + 1;
          } else {
              high = mid - 1;
          }
      }
      return -1;
  }

vc-postamble: |-
  fn main() {
  }
  
  }

