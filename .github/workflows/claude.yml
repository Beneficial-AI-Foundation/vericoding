name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: write      # Full write access to repository contents
      pull-requests: write # Ability to create, update, and merge PRs
      issues: write       # Ability to manage issues
      id-token: write     # Required for OIDC authentication
      actions: write      # Ability to manage GitHub Actions
      checks: write       # Ability to create and update check runs
      statuses: write     # Ability to update commit statuses
      discussions: write  # Ability to manage discussions
      packages: write     # Ability to manage packages
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          # Use Claude Opus 4 model
          model: "claude-opus-4-20250514"
          
          # Allow Claude to run comprehensive commands
          allowed_tools: |
            Bash(*),
            Read(*),
            Write(*),
            Edit(*),
            MultiEdit(*),
            NotebookEdit(*),
            Glob(*),
            Grep(*),
            LS(*),
            WebFetch(*),
            TodoRead(*),
            TodoWrite(*)
          
          # Custom instructions for vericoding project
          custom_instructions: |
            This is a formal verification repository with tools for verified coding.
            Key components:
            - Lean 4 for formal verification (lean-vc/)
            - Dafny for verified programming (dafny/)
            - Verus for verified Rust (verus/)
            
            Key commands and practices:
            - Use `dafny build` or `dafny verify` for Dafny code verification
            - Use `lake build` for Lean 4 projects
            - Use `cargo build` and `cargo check` for Verus/Rust projects
            - Always verify code after making changes
            - Make atomic commits and use branches liberally
            - Focus on formal specification and verification techniques
            - Help with proof development and specification writing
            - Reference existing examples in the repository when applicable
          
          # Custom environment variables for Claude
          claude_env: |
            VERIFICATION_MODE: 1