{
  "id": "verina_basic_82",
  "description": "-----Description-----  \nThis task is about processing an array of integers by producing a new array that excludes the first element. The objective is to define a clear behavior: if the array contains at least one element, return a modified array starting from the second element.\n\n-----Input-----  \nThe input consists of:  \n\u2022 a: An array of integers.\n\n-----Output-----  \nThe output is an array of integers that:  \n\u2022 Has a length equal to the original array's length minus one.  \n\u2022 Contains the same elements as the input array except for the first element.  \n\u2022 Satisfies the condition that for every index i in the output array, the element at position i is equal to the element at position i+1 in the input array.\n\n-----Note-----  \nIt is assumed that the input array is non-empty.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef remove_front_precond (a : Array Int) : Prop :=\n  -- !benchmark @start precond\n  a.size > 0\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\ndef copyFrom (a : Array Int) (i : Nat) (acc : Array Int) : Array Int :=\n  if i < a.size then\n    copyFrom a (i + 1) (acc.push (a[i]!))\n  else\n    acc\n-- !benchmark @end code_aux\n\n\ndef remove_front (a : Array Int) (h_precond : remove_front_precond (a)) : Array Int :=\n  -- !benchmark @start code\n  if a.size > 0 then\n    let c := copyFrom a 1 (Array.mkEmpty (a.size - 1))\n    c\n  else\n    panic \"Precondition violation: array is empty\"\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef remove_front_postcond (a : Array Int) (result: Array Int) (h_precond : remove_front_precond (a)) :=\n  -- !benchmark @start postcond\n  a.size > 0 \u2227 result.size = a.size - 1 \u2227 (\u2200 i : Nat, i < result.size \u2192 result[i]! = a[i + 1]!)\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem remove_front_spec_satisfied (a: Array Int) (h_precond : remove_front_precond (a)) :\n    remove_front_postcond (a) (remove_front (a) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "remove_front",
    "parameters": {
      "param_name": [
        "a"
      ],
      "param_type": [
        "Array Int"
      ]
    },
    "return_type": "Array Int"
  },
  "metadata": {
    "upstream": {
      "name": "clover",
      "link": "https://github.com/ChuyueSun/Clover",
      "task_id": "Clover_remove_front",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"a\": \"#[1, 2, 3, 4, 5]\"}",
      "{\"a\": \"#[10, 20, 30]\"}",
      "{\"a\": \"#[0, -1, -2, -3]\"}",
      "{\"a\": \"#[7]\"}",
      "{\"a\": \"#[100, 0, 50]\"}"
    ],
    "expected": [
      [
        "#[2, 3, 4, 5]"
      ],
      [
        "#[20, 30]"
      ],
      [
        "#[-1, -2, -3]"
      ],
      [
        "#[]"
      ],
      [
        "#[0, 50]"
      ]
    ],
    "unexpected": [
      [
        "#[1, 2, 3, 4, 5]",
        "#[3, 4, 5]",
        "#[2, 3, 4]"
      ],
      [
        "#[10, 20, 30]",
        "#[10, 30]",
        "#[10, 20]"
      ],
      [
        "#[0, -1, -2, -3]",
        "#[-1, -3]",
        "#[-2, -3]"
      ],
      [
        "#[7]",
        "#[0]",
        "#[7, 7]"
      ],
      [
        "#[100, 0, 50]",
        "#[50]",
        "#[0]"
      ]
    ]
  },
  "reject_inputs": {
    "input": [
      "{'a': '#[]'}"
    ]
  },
  "difficulty": "basic"
}