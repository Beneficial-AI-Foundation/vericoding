{
  "id": "verina_advanced_80",
  "description": "-----Description-----\nThis task requires writing a Lean 4 method that finds the indices of two numbers in an array that add up to a target value. Given an array of integers and a target integer, the function should return the indices of the two numbers such that they add up to the target.\n\nYou may assume that each input has exactly one solution, and you may not use the same element twice.\n\n-----Input-----\nThe input consists of:\nnums: An array of integers.\ntarget: An integer representing the target sum.\n\n-----Output-----\nThe output is an array of two integers:\nReturns the indices of the two numbers in the array that add up to the target. The indices should be sorted.\n\n",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible]\ndef twoSum_precond (nums : Array Int) (target : Int) : Prop :=\n  -- !benchmark @start precond\n  -- The array must have at least 2 elements\n  nums.size \u2265 2 \u2227\n\n  -- There exists exactly one pair of indices whose values sum to the target\n  (List.range nums.size).any (fun i =>\n    (List.range i).any (fun j => nums[i]! + nums[j]! = target)) \u2227\n\n  -- No other pair sums to the target (ensuring uniqueness of solution)\n  ((List.range nums.size).flatMap (fun i =>\n    (List.range i).filter (fun j => nums[i]! + nums[j]! = target))).length = 1\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef twoSum (nums : Array Int) (target : Int) (h_precond : twoSum_precond (nums) (target)) : Array Nat :=\n  -- !benchmark @start code\n  let rec findIndices (i : Nat) (j : Nat) (fuel : Nat) : Array Nat :=\n    match fuel with\n    | 0 => #[] -- Fuel exhausted, return empty array\n    | fuel+1 =>\n      if i >= nums.size then\n        #[] -- No solution found\n      else if j >= nums.size then\n        findIndices (i + 1) (i + 2) fuel -- Move to next i and reset j\n      else\n        if nums[i]! + nums[j]! == target then\n          #[i, j] -- Found solution\n        else\n          findIndices i (j + 1) fuel -- Try next j\n\n  findIndices 0 1 (nums.size * nums.size)\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible]\ndef twoSum_postcond (nums : Array Int) (target : Int) (result: Array Nat) (h_precond : twoSum_precond (nums) (target)) : Prop :=\n  -- !benchmark @start postcond\n  -- Result contains exactly 2 indices\n  result.size = 2 \u2227\n\n  -- The indices are valid (within bounds of the nums array)\n  result[0]! < nums.size \u2227 result[1]! < nums.size \u2227\n\n  -- The indices are in ascending order (sorted)\n  result[0]! < result[1]! \u2227\n\n  -- The values at these indices sum to the target\n  nums[result[0]!]! + nums[result[1]!]! = target\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem twoSum_spec_satisfied (nums: Array Int) (target: Int) (h_precond : twoSum_precond (nums) (target)) :\n    twoSum_postcond (nums) (target) (twoSum (nums) (target) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n\n\n",
  "signature": {
    "name": "twoSum",
    "parameters": {
      "param_name": [
        "nums",
        "target"
      ],
      "param_type": [
        "Array Int",
        "Int"
      ]
    },
    "return_type": "Array Nat"
  },
  "metadata": {
    "upstream": {
      "name": "lab_assignment",
      "link": "https://leetcode.com/problems/two-sum/description/",
      "task_id": "lab_twoSum_325585735",
      "student_id": [
        31
      ]
    }
  },
  "tests": {
    "input": [
      "{\"nums\": \"#[2, 7, 11, 15]\", \"target\": 9}",
      "{\"nums\": \"#[3, 2, 4]\", \"target\": 6}",
      "{\"nums\": \"#[3, 3]\", \"target\": 6}",
      "{\"nums\": \"#[1, 2, 3, 4, 5]\", \"target\": 9}",
      "{\"nums\": \"#[0, 4, 3, 0]\", \"target\": 0}"
    ],
    "expected": [
      [
        "#[0, 1]"
      ],
      [
        "#[1, 2]"
      ],
      [
        "#[0, 1]"
      ],
      [
        "#[3, 4]"
      ],
      [
        "#[0, 3]"
      ]
    ],
    "unexpected": [
      [
        "#[1, 0]",
        "#[2, 3]",
        "#[0, 3]"
      ],
      [
        "#[0, 1]",
        "#[0, 2]",
        "#[0, 3]"
      ],
      [
        "#[1, 0]",
        "#[2, 2]"
      ],
      [
        "#[0, 4]",
        "#[1, 3]",
        "#[2, 2]"
      ],
      [
        "#[1, 2]",
        "#[2, 1]"
      ]
    ]
  },
  "reject_inputs": {
    "input": [
      "{'nums': '#[0]', 'target': 2}"
    ]
  },
  "difficulty": "advanced"
}