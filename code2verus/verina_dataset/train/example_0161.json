{
  "id": "verina_basic_91",
  "description": "-----Description-----  \nThis task involves creating a function that swaps two integer values. Given two integers, the function should return a pair where the first element is the second input value and the second element is the first input value.\n\n-----Input-----  \nThe input consists of two integers:  \n\u2022 X: An integer representing the first value.  \n\u2022 Y: An integer representing the second value.\n\n-----Output-----  \nThe output is a pair (Int \u00d7 Int) that:  \n\u2022 Contains the original Y as the first element.  \n\u2022 Contains the original X as the second element.\n\n-----Note-----  \nThere are no additional preconditions. The function simply swaps the two input values.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef Swap_precond (X : Int) (Y : Int) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef Swap (X : Int) (Y : Int) (h_precond : Swap_precond (X) (Y)) : Int \u00d7 Int :=\n  -- !benchmark @start code\n  let x := X\n  let y := Y\n  let tmp := x\n  let x := y\n  let y := tmp\n  (x, y)\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef Swap_postcond (X : Int) (Y : Int) (result: Int \u00d7 Int) (h_precond : Swap_precond (X) (Y)) :=\n  -- !benchmark @start postcond\n  result.fst = Y \u2227 result.snd = X \u2227\n  (X \u2260 Y \u2192 result.fst \u2260 X \u2227 result.snd \u2260 Y)\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem Swap_spec_satisfied (X: Int) (Y: Int) (h_precond : Swap_precond (X) (Y)) :\n    Swap_postcond (X) (Y) (Swap (X) (Y) h_precond) h_precond := by\n  -- !benchmark @start proof\n  unfold Swap_postcond Swap\n  simp_all\n  exact fun a a_1 => a (id (Eq.symm a_1))\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "Swap",
    "parameters": {
      "param_name": [
        "X",
        "Y"
      ],
      "param_type": [
        "Int",
        "Int"
      ]
    },
    "return_type": "Int \u00d7 Int"
  },
  "metadata": {
    "upstream": {
      "name": "clover",
      "link": "https://github.com/ChuyueSun/Clover",
      "task_id": "Clover_swap",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"X\": 1, \"Y\": 2}",
      "{\"X\": 0, \"Y\": 0}",
      "{\"X\": -1, \"Y\": 5}",
      "{\"X\": 100, \"Y\": -100}",
      "{\"X\": 42, \"Y\": 42}"
    ],
    "expected": [
      [
        "(2, 1)"
      ],
      [
        "(0, 0)"
      ],
      [
        "(5, -1)"
      ],
      [
        "(-100, 100)"
      ],
      [
        "(42, 42)"
      ]
    ],
    "unexpected": [
      [
        "(1, 2)",
        "(2, 2)"
      ],
      [
        "(0, 1)",
        "(1, 0)"
      ],
      [
        "(-1, 5)",
        "(5, 5)"
      ],
      [
        "(100, -100)",
        "(-100, -100)"
      ],
      [
        "(41, 42)",
        "(42, 41)"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "basic"
}