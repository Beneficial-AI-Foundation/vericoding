{
  "id": "verina_basic_50",
  "description": "-----Description-----  \nThis task is about calculating the absolute value of an integer. The goal is to determine the non-negative value of a given integer: if the integer is non-negative, it remains unchanged; if it is negative, its positive counterpart is returned.\n\n-----Input-----  \nThe input consists of:  \n\u2022 x: An integer.\n\n-----Output-----  \nThe output is an integer that represents the absolute value of the input. Specifically:  \n\u2022 If x is non-negative, the output is x.  \n\u2022 If x is negative, the output is the negation of x (that is, a value y such that x + y = 0).\n\n-----Note-----  \nThis function should correctly handle zero, positive, and negative integers.",
  "lean_code": "-- !benchmark @start import type=solution\nimport Mathlib\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef Abs_precond (x : Int) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef Abs (x : Int) (h_precond : Abs_precond (x)) : Int :=\n  -- !benchmark @start code\n  if x < 0 then -x else x\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef Abs_postcond (x : Int) (result: Int) (h_precond : Abs_precond (x)) :=\n  -- !benchmark @start postcond\n  (x \u2265 0 \u2192 x = result) \u2227 (x < 0 \u2192 x + result = 0)\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem Abs_spec_satisfied (x: Int) (h_precond : Abs_precond (x)) :\n    Abs_postcond (x) (Abs (x) h_precond) h_precond := by\n  -- !benchmark @start proof\n    simp [Abs_postcond, Abs]\n    apply And.intro\n    . intro h\n      split\n      case isTrue ht =>\n        have h': \u00ac0 \u2264 x := not_le.mpr ht\n        contradiction\n      case isFalse =>\n        rfl\n    . intro h\n      split\n      case isTrue =>\n        simp\n      case isFalse =>\n        contradiction\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "Abs",
    "parameters": {
      "param_name": [
        "x"
      ],
      "param_type": [
        "Int"
      ]
    },
    "return_type": "Int"
  },
  "metadata": {
    "upstream": {
      "name": "clover",
      "link": "https://github.com/ChuyueSun/Clover",
      "task_id": "Clover_abs",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"x\": 5}",
      "{\"x\": 0}",
      "{\"x\": -5}",
      "{\"x\": 10}",
      "{\"x\": -10}"
    ],
    "expected": [
      [
        "5"
      ],
      [
        "0"
      ],
      [
        "5"
      ],
      [
        "10"
      ],
      [
        "10"
      ]
    ],
    "unexpected": [
      [
        "-5",
        "0",
        "10"
      ],
      [
        "-1",
        "1",
        "-5"
      ],
      [
        "-5",
        "-10",
        "0"
      ],
      [
        "-10",
        "0",
        "5"
      ],
      [
        "-10",
        "-1",
        "0"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "basic"
}