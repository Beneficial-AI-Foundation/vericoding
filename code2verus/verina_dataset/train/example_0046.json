{
  "id": "verina_advanced_7",
  "description": "-----Description-----\nThis task requires writing a Lean 4 function that converts a binary number represented as a list of digits (0 or 1) into its corresponding decimal value. The list is ordered in big-endian format, meaning the most significant digit comes first.\nThe function should interpret the list as a binary number and return its decimal representation as a natural number.\n\n-----Input-----\nThe input is a list of natural numbers:\ndigits: A list of digits, each of which is either 0 or 1, representing a binary number in big-endian order.\n\n-----Output-----\nThe output is a natural number:\nReturns the decimal value of the binary number represented by the input list.\n\n",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible]\ndef binaryToDecimal_precond (digits : List Nat) : Prop :=\n  -- !benchmark @start precond\n  digits.all (fun d => d = 0 \u2228 d = 1)\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef binaryToDecimal (digits : List Nat) (h_precond : binaryToDecimal_precond (digits)) : Nat :=\n  -- !benchmark @start code\n  let rec helper (digits : List Nat) : Nat :=\n    match digits with\n    | [] => 0\n    | first :: rest => first * Nat.pow 2 rest.length + helper rest\n  helper digits\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible]\ndef binaryToDecimal_postcond (digits : List Nat) (result: Nat) (h_precond : binaryToDecimal_precond (digits)) : Prop :=\n  -- !benchmark @start postcond\n  result - List.foldl (\u03bb acc bit => acc * 2 + bit) 0 digits = 0 \u2227\n  List.foldl (\u03bb acc bit => acc * 2 + bit) 0 digits - result = 0\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem binaryToDecimal_spec_satisfied (digits: List Nat) (h_precond : binaryToDecimal_precond (digits)) :\n    binaryToDecimal_postcond (digits) (binaryToDecimal (digits) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "binaryToDecimal",
    "parameters": {
      "param_name": [
        "digits"
      ],
      "param_type": [
        "List Nat"
      ]
    },
    "return_type": "Nat"
  },
  "metadata": {
    "upstream": {
      "name": "lab_assignment",
      "link": "https://leetcode.com/problems/convert-binary-number-in-a-linked-list-to-integer/description/",
      "task_id": "lab_binaryToDecimal_325751702",
      "student_id": [
        5
      ]
    }
  },
  "tests": {
    "input": [
      "{\"digits\": \"[1, 0, 1]\"}",
      "{\"digits\": \"[1, 1, 1, 1]\"}",
      "{\"digits\": \"[0, 0, 0]\"}",
      "{\"digits\": \"[1, 0, 0, 0, 0]\"}",
      "{\"digits\": \"[]\"}",
      "{\"digits\": \"[1]\"}"
    ],
    "expected": [
      [
        "5"
      ],
      [
        "15"
      ],
      [
        "0"
      ],
      [
        "16"
      ],
      [
        "0"
      ],
      [
        "1"
      ]
    ],
    "unexpected": [
      [
        "3",
        "4",
        "6"
      ],
      [
        "14",
        "16"
      ],
      [
        "1",
        "2"
      ],
      [
        "8",
        "0"
      ],
      [
        "1"
      ],
      [
        "0"
      ]
    ]
  },
  "reject_inputs": {
    "input": [
      "{'digits': '[2]'}"
    ]
  },
  "difficulty": "advanced"
}