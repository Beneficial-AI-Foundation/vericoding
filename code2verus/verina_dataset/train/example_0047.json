{
  "id": "verina_advanced_54",
  "description": "-----Description-----\nThis task requires writing a Lean 4 function that finds the one missing number in a list of distinct natural numbers from 0 to n. The list contains exactly n numbers and all numbers are in the range [0, n], but one number in that range is missing.\n\nYour function must return the missing number. You may assume the input list contains no duplicates and only one number is missing.\n\n-----Input-----\n- nums: A list of natural numbers of length n, each in the range [0, n] with exactly one number missing.\n\n-----Output-----\n- A natural number: the missing number in the range [0, n] not present in the list.\n\n",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible]\ndef missingNumber_precond (nums : List Nat) : Prop :=\n  -- !benchmark @start precond\n  nums.all (fun x => x \u2264 nums.length) \u2227 List.Nodup nums\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef missingNumber (nums : List Nat) (h_precond : missingNumber_precond (nums)) : Nat :=\n  -- !benchmark @start code\n  let n := nums.length\n  let expectedSum := (n * (n + 1)) / 2\n  let actualSum := nums.foldl (\u00b7 + \u00b7) 0\n  expectedSum - actualSum\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible]\ndef missingNumber_postcond (nums : List Nat) (result: Nat) (h_precond : missingNumber_precond (nums)) : Prop :=\n  -- !benchmark @start postcond\n  let n := nums.length\n  (result \u2208 List.range (n + 1)) \u2227\n  \u00ac(result \u2208 nums) \u2227\n  \u2200 x, (x \u2208 List.range (n + 1)) \u2192 x \u2260 result \u2192 x \u2208 nums\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem missingNumber_spec_satisfied (nums: List Nat) (h_precond : missingNumber_precond (nums)) :\n    missingNumber_postcond (nums) (missingNumber (nums) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n\n\n",
  "signature": {
    "name": "missingNumber",
    "parameters": {
      "param_name": [
        "nums"
      ],
      "param_type": [
        "List Nat"
      ]
    },
    "return_type": "Nat"
  },
  "metadata": {
    "upstream": {
      "name": "lab_assignment",
      "link": "https://leetcode.com/problems/missing-number/description/",
      "task_id": "lab_missingNumber_324976035",
      "student_id": [
        22
      ]
    }
  },
  "tests": {
    "input": [
      "{\"nums\": \"[3, 0, 1]\"}",
      "{\"nums\": \"[0, 1]\"}",
      "{\"nums\": \"[9, 6, 4, 2, 3, 5, 7, 0, 1]\"}",
      "{\"nums\": \"[0]\"}",
      "{\"nums\": \"[1]\"}"
    ],
    "expected": [
      [
        "2"
      ],
      [
        "2"
      ],
      [
        "8"
      ],
      [
        "1"
      ],
      [
        "0"
      ]
    ],
    "unexpected": [
      [
        "0",
        "1",
        "3"
      ],
      [
        "0",
        "1"
      ],
      [
        "1",
        "9"
      ],
      [
        "0"
      ],
      [
        "1"
      ]
    ]
  },
  "reject_inputs": {
    "input": [
      "{'nums': '[0, 0, 1]'}"
    ]
  },
  "difficulty": "advanced"
}