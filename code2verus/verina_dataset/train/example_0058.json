{
  "id": "verina_basic_74",
  "description": "-----Description-----  \nThis task involves identifying the maximum value in a non-empty array of integers. The objective is to determine which element in the array is greater than or equal to every other element, ensuring that the selected value is one of the elements in the array.\n\n-----Input-----  \nThe input consists of:  \n\u2022 a: An array of integers. It is assumed that the array is non-empty (i.e., its size is at least 1).\n\n-----Output-----  \nThe output is an integer that represents the maximum element in the array. This value is guaranteed to satisfy the following:  \n\u2022 It is greater than or equal to every element in the array.  \n\u2022 It is exactly equal to one of the elements in the array.\n\n-----Note-----  \nIt is assumed that the provided array is non-empty. In cases where the array is empty, the function's behavior is not defined.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef maxArray_precond (a : Array Int) : Prop :=\n  -- !benchmark @start precond\n  a.size > 0\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\ndef maxArray_aux (a : Array Int) (index : Nat) (current : Int) : Int :=\n  if index < a.size then\n    let new_current := if current > a[index]! then current else a[index]!\n    maxArray_aux a (index + 1) new_current\n  else\n    current\n-- !benchmark @end code_aux\n\n\ndef maxArray (a : Array Int) (h_precond : maxArray_precond (a)) : Int :=\n  -- !benchmark @start code\n  maxArray_aux a 1 a[0]!\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef maxArray_postcond (a : Array Int) (result: Int) (h_precond : maxArray_precond (a)) :=\n  -- !benchmark @start postcond\n  (\u2200 (k : Nat), k < a.size \u2192 result >= a[k]!) \u2227 (\u2203 (k : Nat), k < a.size \u2227 result = a[k]!)\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem maxArray_spec_satisfied (a: Array Int) (h_precond : maxArray_precond (a)) :\n    maxArray_postcond (a) (maxArray (a) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "maxArray",
    "parameters": {
      "param_name": [
        "a"
      ],
      "param_type": [
        "Array Int"
      ]
    },
    "return_type": "Int"
  },
  "metadata": {
    "upstream": {
      "name": "clover",
      "link": "https://github.com/ChuyueSun/Clover",
      "task_id": "Clover_max_array",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"a\": \"#[1, 2, 3, 4, 5]\"}",
      "{\"a\": \"#[5, 3, 4, 1, 2]\"}",
      "{\"a\": \"#[7]\"}",
      "{\"a\": \"#[-1, -5, -3, -4]\"}",
      "{\"a\": \"#[-10, -20, -30, -5, -15]\"}"
    ],
    "expected": [
      [
        "5"
      ],
      [
        "5"
      ],
      [
        "7"
      ],
      [
        "-1"
      ],
      [
        "-5"
      ]
    ],
    "unexpected": [
      [
        "4",
        "3"
      ],
      [
        "4",
        "3",
        "2"
      ],
      [
        "6",
        "8"
      ],
      [
        "-3",
        "-4"
      ],
      [
        "-10",
        "-15",
        "-20"
      ]
    ]
  },
  "reject_inputs": {
    "input": [
      "{'a': '#[]'}"
    ]
  },
  "difficulty": "basic"
}