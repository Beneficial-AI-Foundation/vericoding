{
  "id": "verina_basic_22",
  "description": "-----Description----- \nThis task requires writing a Lean 4 method that identifies the dissimilar elements between two arrays of integers. In other words, the method should return an array containing all elements that appear in one input array but not in the other. The output array must contain no duplicate elements and the order of elements does not matter.\n\n-----Input-----\nThe input consists of:\na: An array of integers.\nb: An array of integers.\n\n-----Output-----\nThe output is an array of integers:\nReturns an array containing all distinct elements from both input arrays that are not present in the other array and should be sorted",
  "lean_code": "-- !benchmark @start import type=solution\nimport Std.Data.HashSet\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\ndef inArray (a : Array Int) (x : Int) : Bool :=\n  a.any (fun y => y = x)\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n\n@[reducible, simp]\ndef dissimilarElements_precond (a : Array Int) (b : Array Int) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n-- !benchmark @end code_aux\n\n\ndef dissimilarElements (a : Array Int) (b : Array Int) (h_precond : dissimilarElements_precond (a) (b)) : Array Int :=\n  -- !benchmark @start code\n  let res := a.foldl (fun acc x => if !inArray b x then acc.insert x else acc) Std.HashSet.empty\n  let res := b.foldl (fun acc x => if !inArray a x then acc.insert x else acc) res\n  res.toArray.insertionSort\n  -- !benchmark @end code\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef dissimilarElements_postcond (a : Array Int) (b : Array Int) (result: Array Int) (h_precond : dissimilarElements_precond (a) (b)) :=\n  -- !benchmark @start postcond\n  result.all (fun x => inArray a x \u2260 inArray b x)\u2227\n  result.toList.Pairwise (\u00b7 \u2264 \u00b7) \u2227\n  a.all (fun x => if x \u2208 b then x \u2209 result else x \u2208 result) \u2227\n  b.all (fun x => if x \u2208 a then x \u2209 result else x \u2208 result)\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem dissimilarElements_spec_satisfied (a: Array Int) (b: Array Int) (h_precond : dissimilarElements_precond (a) (b)) :\n    dissimilarElements_postcond (a) (b) (dissimilarElements (a) (b) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "dissimilarElements",
    "parameters": {
      "param_name": [
        "a",
        "b"
      ],
      "param_type": [
        "Array Int",
        "Array Int"
      ]
    },
    "return_type": "Array Int"
  },
  "metadata": {
    "upstream": {
      "name": "dafny-synthesis",
      "link": "https://github.com/Mondego/dafny-synthesis",
      "task_id": "task_id_579",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"a\": \"#[1, 2, 3, 4]\", \"b\": \"#[3, 4, 5, 6]\"}",
      "{\"a\": \"#[1, 1, 2]\", \"b\": \"#[2, 3]\"}",
      "{\"a\": \"#[]\", \"b\": \"#[4, 5]\"}",
      "{\"a\": \"#[7, 8]\", \"b\": \"#[]\"}",
      "{\"a\": \"#[1, 2, 3]\", \"b\": \"#[1, 2, 3]\"}",
      "{\"a\": \"#[1, 2, 3]\", \"b\": \"#[4, 5, 6]\"}",
      "{\"a\": \"#[-1, 0, 1]\", \"b\": \"#[0]\"}"
    ],
    "expected": [
      [
        "#[1, 2, 5, 6]"
      ],
      [
        "#[1, 3]"
      ],
      [
        "#[4, 5]"
      ],
      [
        "#[7, 8]"
      ],
      [
        "#[]"
      ],
      [
        "#[1, 2, 3, 4, 5, 6]"
      ],
      [
        "#[-1, 1]"
      ]
    ],
    "unexpected": [
      [
        "#[1,2,3,4,5,6]",
        "#[3,4]",
        "#[1,3,5]"
      ],
      [
        "#[1]",
        "#[3]",
        "#[1,2,3]"
      ],
      [
        "#[4]",
        "#[5]",
        "#[]"
      ],
      [
        "#[7]",
        "#[8]",
        "#[7, 8, 9]"
      ],
      [
        "#[1]",
        "#[1,2]",
        "#[1,2,3]"
      ],
      [
        "#[1,2,3,4]",
        "#[4,5,6]",
        "#[1,2,3]"
      ],
      [
        "#[0]",
        "#[-1,0,1]",
        "#[-1]"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "basic"
}