{
  "id": "verina_advanced_5",
  "description": "-----Description----- \nThis task requires writing a Lean 4 method that adds two non-empty linked lists representing non-negative integers.\nThe digits are stored in reverse order (i.e., the first element is the least significant digit).\nEach node (list element) holds a single digit (ranging from 0 to 9). The function should add the two numbers and return the sum \nas a linked list, also in reverse order.\n\n-----Input-----\nThe input consists of:\n- l1: A list of natural numbers representing the digits of the first number in reverse order.\n- l2: A list of natural numbers representing the digits of the second number in reverse order.\n\n-----Output-----\nThe output is a list of natural numbers:\nReturns a list of digits (in reverse order) representing the sum of the two input numbers.\n\n",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\ndef listToNat : List Nat \u2192 Nat\n| []       => 0\n| d :: ds  => d + 10 * listToNat ds\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible]\ndef addTwoNumbers_precond (l1 : List Nat) (l2 : List Nat) : Prop :=\n  -- !benchmark @start precond\n  l1.length > 0 \u2227 l2.length > 0 \u2227\n  (\u2200 d \u2208 l1, d < 10) \u2227 (\u2200 d \u2208 l2, d < 10) \u2227\n  (l1.getLast! \u2260 0 \u2228 l1 = [0]) \u2227\n  (l2.getLast! \u2260 0 \u2228 l2 = [0])\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n-- !benchmark @end code_aux\n\n\ndef addTwoNumbers (l1 : List Nat) (l2 : List Nat) (h_precond : addTwoNumbers_precond (l1) (l2)) : List Nat :=\n  -- !benchmark @start code\n  let rec addAux (l1 l2 : List Nat) (carry : Nat) : List Nat :=\n    match l1, l2 with\n    | [], [] =>\n      if carry = 0 then [] else [carry]\n    | h1::t1, [] =>\n      let sum := h1 + carry\n      (sum % 10) :: addAux t1 [] (sum / 10)\n    | [], h2::t2 =>\n      let sum := h2 + carry\n      (sum % 10) :: addAux [] t2 (sum / 10)\n    | h1::t1, h2::t2 =>\n      let sum := h1 + h2 + carry\n      (sum % 10) :: addAux t1 t2 (sum / 10)\n  addAux l1 l2 0\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible]\ndef addTwoNumbers_postcond (l1 : List Nat) (l2 : List Nat) (result: List Nat) (h_precond : addTwoNumbers_precond (l1) (l2)) : Prop :=\n  -- !benchmark @start postcond\n  listToNat result = listToNat l1 + listToNat l2 \u2227\n  (\u2200 d \u2208 result, d < 10) \u2227\n  -- No leading zeros unless the result is zero\n  (result.getLast! \u2260 0 \u2228 (l1 = [0] \u2227 l2 = [0] \u2227 result = [0]))\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem addTwoNumbers_spec_satisfied (l1: List Nat) (l2: List Nat) (h_precond : addTwoNumbers_precond (l1) (l2)) :\n    addTwoNumbers_postcond (l1) (l2) (addTwoNumbers (l1) (l2) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n\n\n",
  "signature": {
    "name": "addTwoNumbers",
    "parameters": {
      "param_name": [
        "l1",
        "l2"
      ],
      "param_type": [
        "List Nat",
        "List Nat"
      ]
    },
    "return_type": "List Nat"
  },
  "metadata": {
    "upstream": {
      "name": "lab_assignment",
      "link": "https://leetcode.com/problems/add-two-numbers/description/",
      "task_id": "lab_addTwoNumbers_324428059",
      "student_id": [
        3
      ]
    }
  },
  "tests": {
    "input": [
      "{\"l1\": \"[2,4,3]\", \"l2\": \"[5,6,4]\"}",
      "{\"l1\": \"[0]\", \"l2\": \"[0]\"}",
      "{\"l1\": \"[9,9,9,9,9,9,9]\", \"l2\": \"[9,9,9,9]\"}",
      "{\"l1\": \"[1,2,3]\", \"l2\": \"[4,5]\"}"
    ],
    "expected": [
      [
        "[7,0,8]"
      ],
      [
        "[0]"
      ],
      [
        "[8,9,9,9,0,0,0,1]"
      ],
      [
        "[5,7,3]"
      ]
    ],
    "unexpected": [
      [
        "[2,4,3]",
        "[0]"
      ],
      [
        "[0,0]"
      ],
      [
        "[9,9,9,9,9,9,9,9]"
      ],
      [
        "[5,7]",
        "[5,7,4]"
      ]
    ]
  },
  "reject_inputs": {
    "input": [
      "{'l1': '[]', 'l2': '[]'}",
      "{'l1': '[0, 0]', 'l2': '[0, 0]'}"
    ]
  },
  "difficulty": "advanced"
}