{
  "id": "verina_basic_57",
  "description": "-----Description-----\nThis task involves determining how many numbers within an array are less than a specified threshold. The problem is focused on identifying and counting such numbers based purely on their value in relation to the threshold.\n\n-----Input-----\nThe input consists of:\n\u2022 numbers: An array of integers (which may be empty or non-empty).\n\u2022 threshold: An integer that serves as the comparison threshold.\n\n-----Output-----\nThe output is a natural number (Nat) representing the count of elements in the array that are less than the given threshold.\n\n-----Note-----\nThere are no additional preconditions; the function should work correctly for any array of integers and any integer threshold.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef CountLessThan_precond (numbers : Array Int) (threshold : Int) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\ndef countLessThan (numbers : Array Int) (threshold : Int) : Nat :=\n  let rec count (i : Nat) (acc : Nat) : Nat :=\n    if i < numbers.size then\n      let new_acc := if numbers[i]! < threshold then acc + 1 else acc\n      count (i + 1) new_acc\n    else\n      acc\n  count 0 0\n-- !benchmark @end code_aux\n\n\ndef CountLessThan (numbers : Array Int) (threshold : Int) (h_precond : CountLessThan_precond (numbers) (threshold)) : Nat :=\n  -- !benchmark @start code\n  countLessThan numbers threshold\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef CountLessThan_postcond (numbers : Array Int) (threshold : Int) (result: Nat) (h_precond : CountLessThan_precond (numbers) (threshold)) :=\n  -- !benchmark @start postcond\n  result - numbers.foldl (fun count n => if n < threshold then count + 1 else count) 0 = 0 \u2227\n  numbers.foldl (fun count n => if n < threshold then count + 1 else count) 0 - result = 0\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem CountLessThan_spec_satisfied (numbers: Array Int) (threshold: Int) (h_precond : CountLessThan_precond (numbers) (threshold)) :\n    CountLessThan_postcond (numbers) (threshold) (CountLessThan (numbers) (threshold) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "CountLessThan",
    "parameters": {
      "param_name": [
        "numbers",
        "threshold"
      ],
      "param_type": [
        "Array Int",
        "Int"
      ]
    },
    "return_type": "Nat"
  },
  "metadata": {
    "upstream": {
      "name": "clover",
      "link": "https://github.com/ChuyueSun/Clover",
      "task_id": "Clover_count_lessthan",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"numbers\": \"#[1, 2, 3, 4, 5]\", \"threshold\": 3}",
      "{\"numbers\": \"#[]\", \"threshold\": 10}",
      "{\"numbers\": \"#[-1, 0, 1]\", \"threshold\": 0}",
      "{\"numbers\": \"#[5, 6, 7, 2, 1]\", \"threshold\": 5}",
      "{\"numbers\": \"#[3, 3, 3, 3]\", \"threshold\": 3}"
    ],
    "expected": [
      [
        "2"
      ],
      [
        "0"
      ],
      [
        "1"
      ],
      [
        "2"
      ],
      [
        "0"
      ]
    ],
    "unexpected": [
      [
        "3",
        "1",
        "0"
      ],
      [
        "1",
        "2",
        "3"
      ],
      [
        "0",
        "2",
        "3"
      ],
      [
        "3",
        "4",
        "1"
      ],
      [
        "1",
        "2",
        "3"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "basic"
}