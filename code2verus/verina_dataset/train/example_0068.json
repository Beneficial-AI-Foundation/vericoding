{
  "id": "verina_advanced_19",
  "description": "-----Description-----\nThis task requires writing a Lean 4 method that checks whether a given string is a palindrome. A palindrome is a string that reads the same forwards and backwards. The function should ignore whitespace, punctuation, and capitalization when checking for palindromes.\n\n-----Input-----\nThe input consists of:\ns: A string to be checked.\n\n-----Output-----\nThe output is a boolean:\nReturns true if the input string is a palindrome when non-alphabetic characters are removed and letters are treated case-insensitively, and false otherwise.\n\n",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n-- Check if a character is an uppercase alphabet letter\ndef isUpperAlpha (c : Char) : Bool :=\n  'A' \u2264 c \u2227 c \u2264 'Z'\n\n-- Check if a character is a lowercase alphabet letter\ndef isLowerAlpha (c : Char) : Bool :=\n  'a' \u2264 c \u2227 c \u2264 'z'\n\n-- Determine if a character is alphabetic\ndef isAlpha (c : Char) : Bool :=\n  isUpperAlpha c \u2228 isLowerAlpha c\n\n-- Convert a single character to lowercase\ndef toLower (c : Char) : Char :=\n  if isUpperAlpha c then Char.ofNat (c.toNat + 32) else c\n\n-- Normalize a character: keep only lowercase letters\ndef normalizeChar (c : Char) : Option Char :=\n  if isAlpha c then some (toLower c) else none\n\n-- Normalize a string into a list of lowercase alphabetic characters\ndef normalizeString (s : String) : List Char :=\n  s.toList.foldr (fun c acc =>\n    match normalizeChar c with\n    | some c' => c' :: acc\n    | none    => acc\n  ) []\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible]\ndef isCleanPalindrome_precond (s : String) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n-- Reverse the list\ndef reverseList (xs : List Char) : List Char :=\n  xs.reverse\n-- !benchmark @end code_aux\n\n\ndef isCleanPalindrome (s : String) (h_precond : isCleanPalindrome_precond (s)) : Bool :=\n  -- !benchmark @start code\n  let norm := normalizeString s\n  norm = reverseList norm\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible]\ndef isCleanPalindrome_postcond (s : String) (result: Bool) (h_precond : isCleanPalindrome_precond (s)) : Prop :=\n  -- !benchmark @start postcond\n  let norm := normalizeString s\n  (result = true \u2192 norm = norm.reverse) \u2227\n  (result = false \u2192 norm \u2260 norm.reverse)\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem isCleanPalindrome_spec_satisfied (s: String) (h_precond : isCleanPalindrome_precond (s)) :\n    isCleanPalindrome_postcond (s) (isCleanPalindrome (s) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n\n\n",
  "signature": {
    "name": "isCleanPalindrome",
    "parameters": {
      "param_name": [
        "s"
      ],
      "param_type": [
        "String"
      ]
    },
    "return_type": "Bool"
  },
  "metadata": {
    "upstream": {
      "name": "lab_assignment",
      "link": "https://leetcode.com/problems/valid-palindrome/",
      "task_id": "lab_isCleanPalindrome_325752578",
      "student_id": [
        15
      ]
    }
  },
  "tests": {
    "input": [
      "{\"s\": \"A man, a plan, a canal, Panama\"}",
      "{\"s\": \"No lemon, no melon\"}",
      "{\"s\": \"OpenAI\"}",
      "{\"s\": \"Was it a car or a cat I saw?\"}",
      "{\"s\": \"Hello, World!\"}"
    ],
    "expected": [
      [
        "True"
      ],
      [
        "True"
      ],
      [
        "False"
      ],
      [
        "True"
      ],
      [
        "False"
      ]
    ],
    "unexpected": [
      [
        "False"
      ],
      [
        "False"
      ],
      [
        "True"
      ],
      [
        "False"
      ],
      [
        "True"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "advanced"
}