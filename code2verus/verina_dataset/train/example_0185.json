{
  "id": "verina_basic_24",
  "description": "-----Description----- \nThis task requires writing a Lean 4 method that finds the difference between the first even number and the first odd number in an array of integers. The method should process the array sequentially until it identifies the first even number and the first odd number, and then return the difference calculated as (first even number) minus (first odd number).\n\n-----Input-----\nThe input consists of:\na: An array of integers.\n\n-----Output-----\nThe output is an integer:\nReturns the difference computed as the first even number minus the first odd number found in the array.\n\n-----Note-----\nThe input array is assumed to be non-empty and to contain at least one even number and one odd number.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\ndef isEven (n : Int) : Bool :=\n  n % 2 == 0\n\ndef isOdd (n : Int) : Bool :=\n  n % 2 != 0\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n\n@[reducible, simp]\ndef firstEvenOddDifference_precond (a : Array Int) : Prop :=\n  -- !benchmark @start precond\n  a.size > 1 \u2227\n  (\u2203 x \u2208 a, isEven x) \u2227\n  (\u2203 x \u2208 a, isOdd x)\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef firstEvenOddDifference (a : Array Int) (h_precond : firstEvenOddDifference_precond (a)) : Int :=\n  -- !benchmark @start code\n  let rec findFirstEvenOdd (i : Nat) (firstEven firstOdd : Option Nat) : Int :=\n    if i < a.size then\n      let x := a[i]!\n      let firstEven := if firstEven.isNone && isEven x then some i else firstEven\n      let firstOdd := if firstOdd.isNone && isOdd x then some i else firstOdd\n      match firstEven, firstOdd with\n      | some e, some o => a[e]! - a[o]!\n      | _, _ => findFirstEvenOdd (i + 1) firstEven firstOdd\n    else\n      -- This case is impossible due to h2, but we need a value\n      0\n  findFirstEvenOdd 0 none none\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef firstEvenOddDifference_postcond (a : Array Int) (result: Int) (h_precond : firstEvenOddDifference_precond (a)) :=\n  -- !benchmark @start postcond\n  \u2203 i j, i < a.size \u2227 j < a.size \u2227 isEven (a[i]!) \u2227 isOdd (a[j]!) \u2227\n    result = a[i]! - a[j]! \u2227\n    (\u2200 k, k < i \u2192 isOdd (a[k]!)) \u2227 (\u2200 k, k < j \u2192 isEven (a[k]!))\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem firstEvenOddDifference_spec_satisfied (a: Array Int) (h_precond : firstEvenOddDifference_precond (a)) :\n    firstEvenOddDifference_postcond (a) (firstEvenOddDifference (a) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "firstEvenOddDifference",
    "parameters": {
      "param_name": [
        "a"
      ],
      "param_type": [
        "Array Int"
      ]
    },
    "return_type": "Int"
  },
  "metadata": {
    "upstream": {
      "name": "dafny-synthesis",
      "link": "https://github.com/Mondego/dafny-synthesis",
      "task_id": "task_id_594",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"a\": \"#[2, 3, 4, 5]\"}",
      "{\"a\": \"#[1, 4, 6, 8]\"}",
      "{\"a\": \"#[7, 2, 9, 4]\"}",
      "{\"a\": \"#[2, 2, 3, 3]\"}",
      "{\"a\": \"#[1, 1, 2, 2]\"}"
    ],
    "expected": [
      [
        "-1"
      ],
      [
        "3"
      ],
      [
        "-5"
      ],
      [
        "-1"
      ],
      [
        "1"
      ]
    ],
    "unexpected": [
      [
        "-2",
        "1",
        "-3"
      ],
      [
        "2",
        "4",
        "5"
      ],
      [
        "-3",
        "-6",
        "5"
      ],
      [
        "1",
        "0",
        "-2"
      ],
      [
        "0",
        "2",
        "-1"
      ]
    ]
  },
  "reject_inputs": {
    "input": [
      "{'a': '#[2]'}"
    ]
  },
  "difficulty": "basic"
}