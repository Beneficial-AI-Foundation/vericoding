{
  "id": "verina_basic_47",
  "description": "-----Description----- \nThis task requires writing a Lean 4 method that calculates the sum of all the elements in an array of integers. The method should process the entire array and return the total sum of its elements.\n\n-----Input-----\nThe input consists of:\na: An array of integers.\n\n-----Output-----\nThe output is an integer:\nReturns the sum of all elements in the input array.\n\n-----Note-----\n- The input array is assumed not to be null.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n\n@[reducible, simp]\ndef arraySum_precond (a : Array Int) : Prop :=\n  -- !benchmark @start precond\n  a.size > 0\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef arraySum (a : Array Int) (h_precond : arraySum_precond (a)) : Int :=\n  -- !benchmark @start code\n  a.toList.sum\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\ndef sumTo (a : Array Int) (n : Nat) : Int :=\n  if n = 0 then 0\n  else sumTo a (n - 1) + a[n - 1]!\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef arraySum_postcond (a : Array Int) (result: Int) (h_precond : arraySum_precond (a)) :=\n  -- !benchmark @start postcond\n  result - sumTo a a.size = 0 \u2227\n  result \u2265 sumTo a a.size\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\ntheorem eq_of_sub_zero_and_ge (a b : Int) : a = b \u2192 a - b = 0 \u2227 a \u2265 b := by\n  omega\n-- !benchmark @end proof_aux\n\n\ntheorem arraySum_spec_satisfied (a: Array Int) (h_precond : arraySum_precond (a)) :\n    arraySum_postcond (a) (arraySum (a) h_precond) h_precond := by\n  -- !benchmark @start proof\n  unfold arraySum arraySum_postcond\n  apply eq_of_sub_zero_and_ge a.toList.sum (sumTo a a.size)\n  cases a with | mk d =>\n    induction d with\n    | nil => simp [sumTo]\n    | cons x xs ih =>\n      simp [ih]\n\n      have h1 : sumTo \u27e8x::xs\u27e9 (xs.length + 1) = sumTo \u27e8x::xs\u27e9 xs.length + (x::xs)[xs.length] := by\n        rw [sumTo]\n        simp\n\n      rw [h1]\n\n      have h2 : xs = List.nil \u2192 (x::xs)[xs.length] = x := by\n        intro h_nil\n        simp [h_nil]\n\n      have h3 (x' : Int) (xs' : List Int): xs'.length \u2260 0 \u2192 sumTo \u27e8x'::xs'\u27e9 xs'.length = x' + sumTo \u27e8xs'\u27e9 (xs'.length - 1) := by\n        induction xs'.length with\n        | zero => simp\n        | succ n ih_len =>\n          simp\n          cases n with\n          | zero => simp [sumTo]\n          | succ n' =>\n            simp at ih_len\n            unfold sumTo\n            simp_all\n            rw [Int.add_assoc]\n\n      cases xs with\n      | nil => simp [h2, sumTo]\n      | cons y ys =>\n        simp_all\n        have h4 : sumTo \u27e8x::y::ys\u27e9 (ys.length + 1) = x + sumTo \u27e8y::ys\u27e9 ys.length := by\n          apply h3 x (y::ys)\n          simp\n        rw [h4, sumTo]\n        simp\n        rw [Int.add_assoc]\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "arraySum",
    "parameters": {
      "param_name": [
        "a"
      ],
      "param_type": [
        "Array Int"
      ]
    },
    "return_type": "Int"
  },
  "metadata": {
    "upstream": {
      "name": "dafny-synthesis",
      "link": "https://github.com/Mondego/dafny-synthesis",
      "task_id": "task_id_798",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"a\": \"#[1, 2, 3, 4, 5]\"}",
      "{\"a\": \"#[13, 14, 15, 16, 17]\"}",
      "{\"a\": \"#[-1, -2, -3]\"}",
      "{\"a\": \"#[10, -10]\"}"
    ],
    "expected": [
      [
        "15"
      ],
      [
        "75"
      ],
      [
        "-6"
      ],
      [
        "0"
      ]
    ],
    "unexpected": [
      [
        "14",
        "10",
        "16"
      ],
      [
        "74",
        "76",
        "70"
      ],
      [
        "-5",
        "-7",
        "0"
      ],
      [
        "5",
        "-5",
        "10"
      ]
    ]
  },
  "reject_inputs": {
    "input": [
      "{'a': '#[]'}"
    ]
  },
  "difficulty": "basic"
}