{
  "id": "verina_basic_63",
  "description": "-----Description-----  \nThe task is to determine whether there exists at least one pair of different floating-point numbers in a list such that the absolute difference between them is less than a given threshold. The focus is solely on deciding if such a pair is present in the list.\n\n-----Input-----  \nThe input consists of:  \n\u2022 numbers: A list of floating-point numbers.  \n\u2022 threshold: A floating-point number representing the maximum allowed difference between two numbers for them to be considered \"close.\"  \n\n-----Output-----  \nThe output is a boolean value:  \n\u2022 true \u2013 if there exists at least one pair of distinct elements in the list such that the absolute difference between them is less than the threshold.  \n\u2022 false \u2013 if for every possible pair of elements, the absolute difference is greater than or equal to the threshold.\n\n-----Note-----  \nIt is assumed that the list of numbers is provided and that the threshold is non-negative.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\ndef absDiff (a b : Float) : Float :=\n  if a - b < 0.0 then b - a else a - b\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef has_close_elements_precond (numbers : List Float) (threshold : Float) : Prop :=\n  -- !benchmark @start precond\n  threshold \u2265 0.0\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n-- !benchmark @end code_aux\n\n\ndef has_close_elements (numbers : List Float) (threshold : Float) (h_precond : has_close_elements_precond (numbers) (threshold)) : Bool :=\n  -- !benchmark @start code\n  let len := numbers.length\n  let rec outer (idx : Nat) : Bool :=\n    if idx < len then\n      let rec inner (idx2 : Nat) : Bool :=\n        if idx2 < idx then\n          let a := numbers.getD idx2 0.0\n          let b := numbers.getD idx 0.0\n          let d := absDiff a b\n          if d < threshold then true else inner (idx2 + 1)\n        else\n          false\n      if inner 0 then true else outer (idx + 1)\n    else\n      false\n  outer 0\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef has_close_elements_postcond (numbers : List Float) (threshold : Float) (result: Bool) (h_precond : has_close_elements_precond (numbers) (threshold)) :=\n  -- !benchmark @start postcond\n  \u00ac result \u2194 (List.Pairwise (fun a b => absDiff a b \u2265 threshold) numbers)\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem has_close_elements_spec_satisfied (numbers: List Float) (threshold: Float) (h_precond : has_close_elements_precond (numbers) (threshold)) :\n    has_close_elements_postcond (numbers) (threshold) (has_close_elements (numbers) (threshold) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "has_close_elements",
    "parameters": {
      "param_name": [
        "numbers",
        "threshold"
      ],
      "param_type": [
        "List Float",
        "Float"
      ]
    },
    "return_type": "Bool"
  },
  "metadata": {
    "upstream": {
      "name": "clover",
      "link": "https://github.com/ChuyueSun/Clover",
      "task_id": "Clover_has_close_elements",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"numbers\": \"[1.0, 2.0, 3.0]\", \"threshold\": 1.5}",
      "{\"numbers\": \"[10.0, 12.0, 15.0]\", \"threshold\": 1.5}",
      "{\"numbers\": \"[5.0, 5.0]\", \"threshold\": 0.1}",
      "{\"numbers\": \"[]\", \"threshold\": 2.0}",
      "{\"numbers\": \"[0.0, 0.5, 1.1, 2.2]\", \"threshold\": 0.6}"
    ],
    "expected": [
      [
        "True"
      ],
      [
        "False"
      ],
      [
        "True"
      ],
      [
        "False"
      ],
      [
        "True"
      ]
    ],
    "unexpected": [
      [],
      [],
      [],
      [],
      []
    ]
  },
  "reject_inputs": {
    "input": [
      "{'numbers': '[1.0, 2.0, 3.0]', 'threshold': -1.0}"
    ]
  },
  "difficulty": "basic"
}