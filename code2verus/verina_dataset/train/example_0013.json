{
  "id": "verina_basic_59",
  "description": "-----Description-----  \nGiven an integer x, determine a pair (a, b) where the first element is twice the value of x and the second element is four times the value of x.\n\n-----Input-----  \nThe input consists of:  \n\u2022 x: An integer.\n\n-----Output-----  \nThe output is a tuple (a, b) where:  \n\u2022 a = 2 * x  \n\u2022 b = 4 * x\n\n-----Note-----  \nThere are no additional preconditions; the method is defined for all integers.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef DoubleQuadruple_precond (x : Int) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef DoubleQuadruple (x : Int) (h_precond : DoubleQuadruple_precond (x)) : (Int \u00d7 Int) :=\n  -- !benchmark @start code\n  let a := 2 * x\n  let b := 2 * a\n  (a, b)\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef DoubleQuadruple_postcond (x : Int) (result: (Int \u00d7 Int)) (h_precond : DoubleQuadruple_precond (x)) :=\n  -- !benchmark @start postcond\n  result.fst = 2 * x \u2227 result.snd = 2 * result.fst\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem DoubleQuadruple_spec_satisfied (x: Int) (h_precond : DoubleQuadruple_precond (x)) :\n    DoubleQuadruple_postcond (x) (DoubleQuadruple (x) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "DoubleQuadruple",
    "parameters": {
      "param_name": [
        "x"
      ],
      "param_type": [
        "Int"
      ]
    },
    "return_type": "(Int \u00d7 Int)"
  },
  "metadata": {
    "upstream": {
      "name": "clover",
      "link": "https://github.com/ChuyueSun/Clover",
      "task_id": "Clover_double_quadruple",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"x\": 0}",
      "{\"x\": 1}",
      "{\"x\": -1}",
      "{\"x\": 10}",
      "{\"x\": -5}"
    ],
    "expected": [
      [
        "(0, 0)"
      ],
      [
        "(2, 4)"
      ],
      [
        "(-2, -4)"
      ],
      [
        "(20, 40)"
      ],
      [
        "(-10, -20)"
      ]
    ],
    "unexpected": [
      [
        "(1, 0)",
        "(0, 1)",
        "(-1, 0)"
      ],
      [
        "(2, 2)",
        "(1, 4)",
        "(3, 4)"
      ],
      [
        "(-2, -2)",
        "(-1, -4)",
        "(-3, -4)"
      ],
      [
        "(20, 20)",
        "(10, 40)",
        "(20, 0)"
      ],
      [
        "(-10, -10)",
        "(-5, -20)",
        "(-15, -20)"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "basic"
}