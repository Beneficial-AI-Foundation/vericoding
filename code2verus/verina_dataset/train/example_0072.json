{
  "id": "verina_basic_78",
  "description": "-----Description-----  \nGiven two integers, the task is to compute two output values: one being the sum of the integers and the other being their difference.\n\n-----Input-----  \nThe input consists of two integers:  \n\u2022 x: An integer.  \n\u2022 y: An integer.\n\n-----Output-----  \nThe output is a tuple of two integers:  \n\u2022 The first element is x + y.  \n\u2022 The second element is x - y.\n\n-----Note-----  \nIt is assumed that x and y are valid integers. There are no additional constraints on the inputs.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef MultipleReturns_precond (x : Int) (y : Int) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef MultipleReturns (x : Int) (y : Int) (h_precond : MultipleReturns_precond (x) (y)) : (Int \u00d7 Int) :=\n  -- !benchmark @start code\n  let more := x + y\n  let less := x - y\n  (more, less)\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef MultipleReturns_postcond (x : Int) (y : Int) (result: (Int \u00d7 Int)) (h_precond : MultipleReturns_precond (x) (y)) :=\n  -- !benchmark @start postcond\n  result.1 = x + y \u2227 result.2 + y = x\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem MultipleReturns_spec_satisfied (x: Int) (y: Int) (h_precond : MultipleReturns_precond (x) (y)) :\n    MultipleReturns_postcond (x) (y) (MultipleReturns (x) (y) h_precond) h_precond := by\n  -- !benchmark @start proof\n  unfold MultipleReturns_postcond MultipleReturns\n  simp\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "MultipleReturns",
    "parameters": {
      "param_name": [
        "x",
        "y"
      ],
      "param_type": [
        "Int",
        "Int"
      ]
    },
    "return_type": "(Int \u00d7 Int)"
  },
  "metadata": {
    "upstream": {
      "name": "clover",
      "link": "https://github.com/ChuyueSun/Clover",
      "task_id": "Clover_multi_return",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"x\": 3, \"y\": 2}",
      "{\"x\": -2, \"y\": 3}",
      "{\"x\": 0, \"y\": 0}",
      "{\"x\": 10, \"y\": 5}",
      "{\"x\": -5, \"y\": -10}"
    ],
    "expected": [
      [
        "(5, 1)"
      ],
      [
        "(1, -5)"
      ],
      [
        "(0, 0)"
      ],
      [
        "(15, 5)"
      ],
      [
        "(-15, 5)"
      ]
    ],
    "unexpected": [
      [
        "(6, 2)",
        "(5, 2)",
        "(4, 1)"
      ],
      [
        "(-1, 5)",
        "(2, -3)",
        "(1, 5)"
      ],
      [
        "(1, 0)",
        "(0, 1)",
        "(-1, 0)"
      ],
      [
        "(14, 5)",
        "(15, 6)",
        "(10, 5)"
      ],
      [
        "(-15, -5)",
        "(-5, 15)",
        "(-10, 0)"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "basic"
}