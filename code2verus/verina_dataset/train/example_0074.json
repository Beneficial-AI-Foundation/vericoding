{
  "id": "verina_advanced_67",
  "description": "-----Description-----\nThis task requires writing a Lean 4 method that performs run-length encoding on a given string. The method should scan the string from left to right and group consecutive identical characters into pairs. Each pair consists of the character itself and the number of times it appears consecutively. For example, \"aaabbc\" becomes [(\u2019a\u2019, 3), (\u2019b\u2019, 2), (\u2019c\u2019, 1)].\n\nThe resulting encoded list must satisfy the following properties:\n1. No pair has a zero or negative run-length.\n2. Consecutive pairs in the encoding list must not have the same character.\n3. Decoding the output should return the original string.\n\n-----Input-----\nThe input is a single string, `s`.\n\n-----Output-----\nThe output is a list of pairs `(Char, Nat)`, which represents the run-length-encoded form of the input string.\n\n",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef runLengthEncode_precond (s : String) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef runLengthEncode (s : String) (h_precond : runLengthEncode_precond (s)) : List (Char \u00d7 Nat) :=\n  -- !benchmark @start code\n  let chars := s.data\n\n  let rec encodeAux (acc : List (Char \u00d7 Nat)) (rest : List Char) : List (Char \u00d7 Nat) :=\n    match rest with\n    | [] => acc.reverse\n    | h :: t =>\n      match acc with\n      | (ch, count) :: accTail =>\n        if ch = h then\n          encodeAux ((ch, count + 1) :: accTail) t\n        else\n          encodeAux ((h, 1) :: (ch, count) :: accTail) t\n      | [] =>\n        encodeAux ([(h, 1)]) t\n\n  let encoded := encodeAux [] chars\n  encoded\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\ndef decodeRLE (lst : List (Char \u00d7 Nat)) : String :=\n  match lst with\n  | [] => \"\"\n  | (ch, cnt) :: tail =>\n    let repeated := String.mk (List.replicate cnt ch)\n    repeated ++ decodeRLE tail\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef runLengthEncode_postcond (s : String) (result: List (Char \u00d7 Nat)) (h_precond : runLengthEncode_precond (s)) : Prop :=\n  -- !benchmark @start postcond\n  (\u2200 pair \u2208 result, pair.snd > 0) \u2227\n  (\u2200 i : Nat, i < result.length - 1 \u2192 (result[i]!).fst \u2260 (result[i+1]!).fst) \u2227\n  decodeRLE result = s\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem runLengthEncode_spec_satisfied (s: String) (h_precond : runLengthEncode_precond (s)) :\n    runLengthEncode_postcond (s) (runLengthEncode (s) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n\n\n",
  "signature": {
    "name": "runLengthEncode",
    "parameters": {
      "param_name": [
        "s"
      ],
      "param_type": [
        "String"
      ]
    },
    "return_type": "List (Char \u00d7 Nat)"
  },
  "metadata": {
    "upstream": {
      "name": "lab_assignment",
      "link": "[{\"text_file_id\"=>802373105}]",
      "task_id": "lab_runLengthEncode_324976093",
      "student_id": [
        13
      ]
    }
  },
  "tests": {
    "input": [
      "{\"s\": \"\"}",
      "{\"s\": \"aaa\"}",
      "{\"s\": \"abbbcccaa\"}",
      "{\"s\": \"xyz\"}",
      "{\"s\": \"aabbaa\"}"
    ],
    "expected": [
      [
        "[]"
      ],
      [
        "[('a', 3)]"
      ],
      [
        "[('a', 1), ('b', 3), ('c', 3), ('a', 2)]"
      ],
      [
        "[('x', 1), ('y', 1), ('z', 1)]"
      ],
      [
        "[('a', 2), ('b', 2), ('a', 2)]"
      ]
    ],
    "unexpected": [
      [
        "[('x', 1)]"
      ],
      [
        "[('a', 2), ('b', 3)]"
      ],
      [
        "[('a', 2), ('b', 3), ('c', 3), ('a', 2)]"
      ],
      [
        "[('x', 3)]",
        "[('z', 1)]"
      ],
      [
        "[('a', 2), ('b', 2), ('a', 3)]"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "advanced"
}