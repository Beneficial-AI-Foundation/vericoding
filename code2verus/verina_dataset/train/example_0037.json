{
  "id": "verina_advanced_35",
  "description": "-----Description-----\nThis task requires writing a Lean 4 function that finds the majority element in a list of integers. The majority element is the element that appears more than \u230an/2\u230b times, where n is the list\u2019s length. You may assume that a majority element always exists in the input.\n\n-----Input-----\n- nums: A list of integers of length \u2265 1, containing a majority element.\n\n-----Output-----\n- An integer: the element that appears more than \u230an/2\u230b times.\n\n",
  "lean_code": "-- !benchmark @start import type=solution\nimport Std.Data.HashMap\nopen Std\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible]\ndef majorityElement_precond (nums : List Int) : Prop :=\n  -- !benchmark @start precond\n  nums.length > 0 \u2227 nums.any (fun x => nums.count x > nums.length / 2)\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef majorityElement (nums : List Int) (h_precond : majorityElement_precond (nums)) : Int :=\n  -- !benchmark @start code\n  Id.run do\n    let mut counts : HashMap Int Nat := {}\n    let n := nums.length\n    for x in nums do\n      let count := counts.getD x 0\n      counts := counts.insert x (count + 1)\n    match counts.toList.find? (fun (_, c) => c > n / 2) with\n    | some (k, _) => k\n    | none      => 0\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible]\ndef majorityElement_postcond (nums : List Int) (result: Int) (h_precond : majorityElement_precond (nums)) : Prop :=\n  -- !benchmark @start postcond\n  let n := nums.length\n  (nums.count result) > n / 2\n  \u2227 \u2200 x, x \u2260 result \u2192 nums.count x \u2264 n / 2\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem majorityElement_spec_satisfied (nums: List Int) (h_precond : majorityElement_precond (nums)) :\n    majorityElement_postcond (nums) (majorityElement (nums) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n\n\n",
  "signature": {
    "name": "majorityElement",
    "parameters": {
      "param_name": [
        "nums"
      ],
      "param_type": [
        "List Int"
      ]
    },
    "return_type": "Int"
  },
  "metadata": {
    "upstream": {
      "name": "lab_assignment",
      "link": "https://leetcode.com/problems/majority-element/description/",
      "task_id": "lab_majorityElement_324976035",
      "student_id": [
        22
      ]
    }
  },
  "tests": {
    "input": [
      "{\"nums\": \"[3, 2, 3]\"}",
      "{\"nums\": \"[2, 2, 1, 1, 1, 2, 2]\"}",
      "{\"nums\": \"[1, 1, 1, 2, 3, 1]\"}",
      "{\"nums\": \"[0, 0, 0, 0]\"}",
      "{\"nums\": \"[7]\"}"
    ],
    "expected": [
      [
        "3"
      ],
      [
        "2"
      ],
      [
        "1"
      ],
      [
        "0"
      ],
      [
        "7"
      ]
    ],
    "unexpected": [
      [
        "2"
      ],
      [
        "1"
      ],
      [
        "2",
        "3"
      ],
      [
        "1"
      ],
      []
    ]
  },
  "reject_inputs": {
    "input": [
      "{'nums': '[1, 2, 3]'}",
      "{'nums': '[]'}"
    ]
  },
  "difficulty": "advanced"
}