{
  "id": "verina_basic_9",
  "description": "-----Description----- \nThis task requires writing a Lean 4 method that checks whether two arrays of integers have any elements in common. In other words, the method should return true if there is at least one element that appears in both arrays, and false if no such element exists.\n\n-----Input-----\nThe input consists of:\na: An array of integers.\nb: An array of integers.\n\n-----Output-----\nThe output is a Boolean value:\nReturns true if there is at least one common element between the two arrays.\nReturns false if there are no common elements shared by the arrays.\n\n-----Note-----\nBoth arrays are assumed to be non-null.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n\n@[reducible, simp]\ndef hasCommonElement_precond (a : Array Int) (b : Array Int) : Prop :=\n  -- !benchmark @start precond\n  a.size > 0 \u2227 b.size > 0\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef hasCommonElement (a : Array Int) (b : Array Int) (h_precond : hasCommonElement_precond (a) (b)) : Bool :=\n  -- !benchmark @start code\n  a.any fun x => b.any fun y => x = y\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef hasCommonElement_postcond (a : Array Int) (b : Array Int) (result: Bool) (h_precond : hasCommonElement_precond (a) (b)) :=\n  -- !benchmark @start postcond\n  (\u2203 i j, i < a.size \u2227 j < b.size \u2227 a[i]! = b[j]!) \u2194 result\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem hasCommonElement_spec_satisfied (a: Array Int) (b: Array Int) (h_precond : hasCommonElement_precond (a) (b)) :\n    hasCommonElement_postcond (a) (b) (hasCommonElement (a) (b) h_precond) h_precond := by\n  -- !benchmark @start proof\n  unfold hasCommonElement hasCommonElement_postcond\n  constructor\n  \u00b7 intro h\n    rcases h with \u27e8i, j, hi, hj, heq\u27e9\n    simp [Array.any_eq]\n    exists i\n    exists hi\n    exists j\n    exists hj\n    have heqa : a[i]! = a[i] := by\n      exact getElem!_pos a i hi\n    have heqb : b[j]! = b[j] := by\n      exact getElem!_pos b j hj\n    rw [heqa, heqb] at heq\n    exact heq\n  \u00b7 intro h\n    simp [Array.any_eq] at h\n    rcases h with \u27e8i, hi, j, hj, heq\u27e9\n    exists i\n    exists j\n    simp [hi, hj]\n    have heqa : a[i]! = a[i] := by\n      exact getElem!_pos a i hi\n    have heqb : b[j]! = b[j] := by\n      exact getElem!_pos b j hj\n    rw [heqa, heqb]\n    exact heq\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "hasCommonElement",
    "parameters": {
      "param_name": [
        "a",
        "b"
      ],
      "param_type": [
        "Array Int",
        "Array Int"
      ]
    },
    "return_type": "Bool"
  },
  "metadata": {
    "upstream": {
      "name": "dafny-synthesis",
      "link": "https://github.com/Mondego/dafny-synthesis",
      "task_id": "task_id_431",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"a\": \"#[1, 2, 3]\", \"b\": \"#[4, 5, 6]\"}",
      "{\"a\": \"#[1, 2, 3]\", \"b\": \"#[3, 4, 5]\"}",
      "{\"a\": \"#[7, 8, 9]\", \"b\": \"#[10, 11, 7]\"}",
      "{\"a\": \"#[1, 2, 3, 4]\", \"b\": \"#[5, 6, 7, 8]\"}",
      "{\"a\": \"#[1, 2, 3, 4]\", \"b\": \"#[4, 5, 6]\"}",
      "{\"a\": \"#[1, 1, 1]\", \"b\": \"#[1, 2, 1]\"}",
      "{\"a\": \"#[0]\", \"b\": \"#[0]\"}",
      "{\"a\": \"#[0]\", \"b\": \"#[-1, 1]\"}"
    ],
    "expected": [
      [
        "False"
      ],
      [
        "True"
      ],
      [
        "True"
      ],
      [
        "False"
      ],
      [
        "True"
      ],
      [
        "True"
      ],
      [
        "True"
      ],
      [
        "False"
      ]
    ],
    "unexpected": [
      [
        "True"
      ],
      [
        "False"
      ],
      [
        "False"
      ],
      [
        "True"
      ],
      [
        "False"
      ],
      [
        "False"
      ],
      [
        "False"
      ],
      [
        "True"
      ]
    ]
  },
  "reject_inputs": {
    "input": [
      "{'a': '#[]', 'b': '#[]'}"
    ]
  },
  "difficulty": "basic"
}