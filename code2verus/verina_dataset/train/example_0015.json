{
  "id": "verina_basic_60",
  "description": "-----Description-----  \nThis task requires writing a function that processes an array of integers and produces a new array containing only the even numbers from the input. The order of these even numbers should remain the same as in the original array, ensuring that every even number from the input appears in the output and that every element in the output is even.\n\n-----Input-----  \nThe input consists of one parameter:  \n\u2022 arr: An array of integers.\n\n-----Output-----  \nThe output is an array of integers that:  \n\u2022 Contains exactly all even numbers from the input array, preserving their original order.  \n\u2022 Meets the specified conditions that ensure no extraneous (odd or non-existing) elements are returned.\n\n-----Note-----  \nThere are no additional preconditions. The function must adhere to the provided specification which enforces evenness and order preservation for the elements in the output array.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\ndef isEven (n : Int) : Bool :=\n  n % 2 = 0\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef FindEvenNumbers_precond (arr : Array Int) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef FindEvenNumbers (arr : Array Int) (h_precond : FindEvenNumbers_precond (arr)) : Array Int :=\n  -- !benchmark @start code\n  let rec loop (i : Nat) (acc : Array Int) : Array Int :=\n    if i < arr.size then\n      if isEven (arr.getD i 0) then\n        loop (i + 1) (acc.push (arr.getD i 0))\n      else\n        loop (i + 1) acc\n    else\n      acc\n  loop 0 (Array.mkEmpty 0)\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef FindEvenNumbers_postcond (arr : Array Int) (result: Array Int) (h_precond : FindEvenNumbers_precond (arr)) :=\n  -- !benchmark @start postcond\n  result.all (fun x => isEven x && x \u2208 arr) \u2227\n  List.Pairwise (fun (x, i) (y, j) => if i < j then arr.idxOf x \u2264 arr.idxOf y else true) (result.toList.zipIdx)\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem FindEvenNumbers_spec_satisfied (arr: Array Int) (h_precond : FindEvenNumbers_precond (arr)) :\n    FindEvenNumbers_postcond (arr) (FindEvenNumbers (arr) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "FindEvenNumbers",
    "parameters": {
      "param_name": [
        "arr"
      ],
      "param_type": [
        "Array Int"
      ]
    },
    "return_type": "Array Int"
  },
  "metadata": {
    "upstream": {
      "name": "clover",
      "link": "https://github.com/ChuyueSun/Clover",
      "task_id": "Clover_even_list",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"arr\": \"#[1, 2, 3, 4, 5, 6]\"}",
      "{\"arr\": \"#[0, -2, 3, -4, 7]\"}",
      "{\"arr\": \"#[1, 3, 5, 7]\"}",
      "{\"arr\": \"#[2, 4, 8, 10]\"}",
      "{\"arr\": \"#[]\"}"
    ],
    "expected": [
      [
        "#[2, 4, 6]"
      ],
      [
        "#[0, -2, -4]"
      ],
      [
        "#[]"
      ],
      [
        "#[2, 4, 8, 10]"
      ],
      [
        "#[]"
      ]
    ],
    "unexpected": [
      [
        "#[2, 4, 5]",
        "#[1, 2, 3, 4]",
        "#[2, 3, 6]"
      ],
      [
        "#[0, 3, -4]",
        "#[0, -2, 3]"
      ],
      [
        "#[1]",
        "#[0, 1]"
      ],
      [
        "#[2, 4, 8, 9]",
        "#[2, 4, 8, 10, 12]"
      ],
      [
        "#[0]",
        "#[1, 2]"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "basic"
}