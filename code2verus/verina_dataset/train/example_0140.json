{
  "id": "verina_basic_105",
  "description": "-----Description-----\nThis task involves computing the element-wise product of two integer arrays. For each position in the arrays, the corresponding numbers are multiplied together. If an element is missing in one of the arrays at a given index, the missing value is treated as 0. When both arrays provide values for every index, the resulting array will contain the product of the two numbers at each corresponding index.\n\n-----Input-----\nThe input consists of two arrays:\n\u2022 a: An array of integers.\n\u2022 b: An array of integers (should be of equal length to a for the specification to hold).\n\n-----Output-----\nThe output is an array of integers that:\n\u2022 Has the same length as the input arrays.\n\u2022 For each index i, the output array contains the product a[i] * b[i].\n\u2022 In cases where one of the arrays might be shorter, missing elements default to 0 during multiplication.\n\n-----Note-----\nIt is assumed that the arrays are of equal length for the theorem specification, although the implementation defaults missing indices to 0.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef arrayProduct_precond (a : Array Int) (b : Array Int) : Prop :=\n  -- !benchmark @start precond\n  a.size = b.size\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\ndef loop (a b : Array Int) (len : Nat) : Nat \u2192 Array Int \u2192 Array Int\n  | i, c =>\n    if i < len then\n      let a_val := if i < a.size then a[i]! else 0\n      let b_val := if i < b.size then b[i]! else 0\n      let new_c := Array.set! c i (a_val * b_val)\n      loop a b len (i+1) new_c\n    else c\n-- !benchmark @end code_aux\n\n\ndef arrayProduct (a : Array Int) (b : Array Int) (h_precond : arrayProduct_precond (a) (b)) : Array Int :=\n  -- !benchmark @start code\n  let len := a.size\n  let c := Array.mkArray len 0\n  loop a b len 0 c\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef arrayProduct_postcond (a : Array Int) (b : Array Int) (result: Array Int) (h_precond : arrayProduct_precond (a) (b)) :=\n  -- !benchmark @start postcond\n  (result.size = a.size) \u2227 (\u2200 i, i < a.size \u2192 a[i]! * b[i]! = result[i]!)\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem arrayProduct_spec_satisfied (a: Array Int) (b: Array Int) (h_precond : arrayProduct_precond (a) (b)) :\n    arrayProduct_postcond (a) (b) (arrayProduct (a) (b) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "arrayProduct",
    "parameters": {
      "param_name": [
        "a",
        "b"
      ],
      "param_type": [
        "Array Int",
        "Array Int"
      ]
    },
    "return_type": "Array Int"
  },
  "metadata": {
    "upstream": {
      "name": "clover",
      "link": "https://github.com/ChuyueSun/Clover",
      "task_id": "Clover_array_product",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"a\": \"#[1, 2, 3]\", \"b\": \"#[4, 5, 6]\"}",
      "{\"a\": \"#[0, 0, 0]\", \"b\": \"#[1, 2, 3]\"}",
      "{\"a\": \"#[-1, 2, -3]\", \"b\": \"#[3, -4, 5]\"}",
      "{\"a\": \"#[2]\", \"b\": \"#[10]\"}",
      "{\"a\": \"#[1, 2, 3, 4]\", \"b\": \"#[2, 2, 2, 2]\"}"
    ],
    "expected": [
      [
        "#[4, 10, 18]"
      ],
      [
        "#[0, 0, 0]"
      ],
      [
        "#[-3, -8, -15]"
      ],
      [
        "#[20]"
      ],
      [
        "#[2, 4, 6, 8]"
      ]
    ],
    "unexpected": [
      [
        "#[4, 10, 17]",
        "#[0, 10, 18]",
        "#[4, 10, 20]"
      ],
      [
        "#[1, 0, 0]",
        "#[0, 1, 0]",
        "#[0, 0, 1]"
      ],
      [
        "#[-3, -8, -14]",
        "#[-3, -7, -15]",
        "#[-2, -8, -15]"
      ],
      [
        "#[10]",
        "#[0]",
        "#[30]"
      ],
      [
        "#[2, 4, 6, 9]",
        "#[1, 4, 6, 8]",
        "#[2, 5, 6, 8]"
      ]
    ]
  },
  "reject_inputs": {
    "input": [
      "{'a': '#[1, 2, 3]', 'b': '#[4, 5]'}"
    ]
  },
  "difficulty": "basic"
}