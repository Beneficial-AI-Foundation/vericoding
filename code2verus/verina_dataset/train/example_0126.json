{
  "id": "verina_advanced_46",
  "description": "-----Description----- \nThis test implements a function in Lean 4 that finds the maximum sum of any contiguous subarray within a list of integers. A subarray is a continuous section of the original array. If all integers in the list are negative, the function should return 0 (representing the empty subarray).\n\n-----Input-----\nnumbers: A list of integers that may contain positive, negative, or zero values.\n\n-----Output-----\nAn integer representing the maximum sum of any contiguous subarray. If the list is empty or contains only negative numbers, the function returns 0.\n\n",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef maxSubarraySum_precond (numbers : List Int) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef maxSubarraySum (numbers : List Int) (h_precond : maxSubarraySum_precond (numbers)) : Int :=\n  -- !benchmark @start code\n  let rec isAllNegative : List Int \u2192 Bool\n    | [] => true\n    | x :: xs => if x >= 0 then false else isAllNegative xs\n\n  let rec findMaxProduct : List Int \u2192 Int \u2192 Int \u2192 Int\n    | [], currMax, _ => currMax\n    | [x], currMax, _ => max currMax x\n    | x :: y :: rest, currMax, currSum =>\n        let newSum := max y (currSum + y)\n        let newMax := max currMax newSum\n        findMaxProduct (y :: rest) newMax newSum\n\n  let handleList : List Int \u2192 Nat\n    | [] => 0\n    | xs =>\n        if isAllNegative xs then\n          0\n        else\n          match xs with\n          | [] => 0\n          | x :: rest =>\n              let initialMax := max 0 x\n              let startSum := max 0 x\n              let result := findMaxProduct (x :: rest) initialMax startSum\n              result.toNat\n\n  handleList numbers\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef maxSubarraySum_postcond (numbers : List Int) (result: Int) (h_precond : maxSubarraySum_precond (numbers)) : Prop :=\n  -- !benchmark @start postcond\n  let subArraySums :=\n    List.range (numbers.length + 1) |>.flatMap (fun start =>\n      List.range (numbers.length - start + 1) |>.map (fun len =>\n        numbers.drop start |>.take len |>.sum))\n  subArraySums.contains result \u2227 subArraySums.all (\u00b7 \u2264 result)\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem maxSubarraySum_spec_satisfied (numbers: List Int) (h_precond : maxSubarraySum_precond (numbers)) :\n    maxSubarraySum_postcond (numbers) (maxSubarraySum (numbers) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n\n\n",
  "signature": {
    "name": "maxSubarraySum",
    "parameters": {
      "param_name": [
        "numbers"
      ],
      "param_type": [
        "List Int"
      ]
    },
    "return_type": "Int"
  },
  "metadata": {
    "upstream": {
      "name": "lab_assignment",
      "link": "",
      "task_id": "lab_maxSubarraySum_324969521",
      "student_id": [
        26
      ]
    }
  },
  "tests": {
    "input": [
      "{\"numbers\": \"[1, 2, 3, -2, 5]\"}",
      "{\"numbers\": \"[-2, -3, 4, -1, -2, 1, 5, -3]\"}",
      "{\"numbers\": \"[-1, -2, -3, -4]\"}",
      "{\"numbers\": \"[5, -3, 2, 1, -2]\"}",
      "{\"numbers\": \"[0, 0, 0, 0]\"}",
      "{\"numbers\": \"[]\"}",
      "{\"numbers\": \"[10]\"}",
      "{\"numbers\": \"[-5, 8, -3, 4, -1]\"}"
    ],
    "expected": [
      [
        "9"
      ],
      [
        "7"
      ],
      [
        "0"
      ],
      [
        "5"
      ],
      [
        "0"
      ],
      [
        "0"
      ],
      [
        "10"
      ],
      [
        "9"
      ]
    ],
    "unexpected": [
      [
        "6",
        "10",
        "1"
      ],
      [
        "5",
        "4",
        "9"
      ],
      [
        "1",
        "-1",
        "-10"
      ],
      [
        "3",
        "6",
        "4"
      ],
      [
        "1",
        "-1"
      ],
      [
        "1"
      ],
      [
        "0",
        "5"
      ],
      [
        "8",
        "3",
        "0"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "advanced"
}