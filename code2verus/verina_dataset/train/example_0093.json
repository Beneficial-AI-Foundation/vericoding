{
  "id": "verina_advanced_37",
  "description": "-----Description-----\nThis task requires writing a Lean 4 method that returns the majority element from a list of integers.\n\nThe majority element is the one that appears more than \u230an / 2\u230b times in the list, where n is the list's length. You may assume that a majority element always exists in the input.\n\n-----Input-----\n- nums: A list of integers (with at least one majority element).\n\n-----Output-----\nReturns the majority element \u2014 the value that appears more than \u230an / 2\u230b times.\n\n",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef majorityElement_precond (nums : List Int) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef majorityElement (nums : List Int) (h_precond : majorityElement_precond (nums)) : Int :=\n  -- !benchmark @start code\n  let rec insert (x : Int) (xs : List Int) : List Int :=\n    match xs with\n    | [] => [x]\n    | h :: t =>\n      if x \u2264 h then\n        x :: h :: t\n      else\n        h :: insert x t\n\n  let rec insertionSort (xs : List Int) : List Int :=\n    match xs with\n    | [] => []\n    | h :: t =>\n      let sortedTail := insertionSort t\n      let sorted := insert h sortedTail\n      sorted\n\n  let getAt := fun (xs : List Int) (i : Nat) =>\n    match xs.drop i with\n    | [] => 0\n    | h :: _ => h\n\n  let sorted := insertionSort nums\n\n  let len := sorted.length\n  let mid := len / 2\n  getAt sorted mid\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef majorityElement_postcond (nums : List Int) (result: Int) (h_precond : majorityElement_precond (nums)) : Prop :=\n  -- !benchmark @start postcond\n  let n := nums.length\n  (List.count result nums > n / 2) \u2227\n  nums.all (fun x => x = result \u2228 List.count x nums \u2264 n / 2)\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem majorityElement_spec_satisfied (nums: List Int) (h_precond : majorityElement_precond (nums)) :\n    majorityElement_postcond (nums) (majorityElement (nums) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n\n\n",
  "signature": {
    "name": "majorityElement",
    "parameters": {
      "param_name": [
        "nums"
      ],
      "param_type": [
        "List Int"
      ]
    },
    "return_type": "Int"
  },
  "metadata": {
    "upstream": {
      "name": "lab_assignment",
      "link": "[{\"text_file_id\"=>805208302}]",
      "task_id": "lab_majorityElement_325759376",
      "student_id": [
        30
      ]
    }
  },
  "tests": {
    "input": [
      "{\"nums\": \"[3, 2, 3]\"}",
      "{\"nums\": \"[2, 2, 1, 1, 1, 2, 2]\"}",
      "{\"nums\": \"[1]\"}",
      "{\"nums\": \"[4, 4, 4, 4, 4, 2, 2, 3, 3]\"}",
      "{\"nums\": \"[9, 8, 9, 9, 7, 9, 6, 9, 9]\"}",
      "{\"nums\": \"[0, 0, 0, 0, 1]\"}",
      "{\"nums\": \"[100000, 100000, 100000, 100000, -100000]\"}",
      "{\"nums\": \"[-1, -1, -1, -1, 0, 1, 2]\"}",
      "{\"nums\": \"[5, 5, 5, 5, 5, 5, 5]\"}",
      "{\"nums\": \"[1, 2, 3, 3, 3, 3, 3]\"}"
    ],
    "expected": [
      [
        "3"
      ],
      [
        "2"
      ],
      [
        "1"
      ],
      [
        "4"
      ],
      [
        "9"
      ],
      [
        "0"
      ],
      [
        "100000"
      ],
      [
        "-1"
      ],
      [
        "5"
      ],
      [
        "3"
      ]
    ],
    "unexpected": [
      [
        "2"
      ],
      [
        "1"
      ],
      [
        "0"
      ],
      [
        "2",
        "3"
      ],
      [
        "6",
        "7",
        "8"
      ],
      [
        "1"
      ],
      [
        "-100000"
      ],
      [
        "0",
        "1",
        "2"
      ],
      [
        "0"
      ],
      [
        "1",
        "2"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "advanced"
}