{
  "id": "verina_basic_54",
  "description": "-----Description-----  \nThis task is about determining the minimum absolute difference between any pair of integers, where one integer is taken from the first sorted array and the other integer is taken from the second sorted array. The focus is on accurately finding the smallest absolute difference between any two elements from the arrays, independent of the specific techniques or programming language used.\n\n-----Input-----  \nThe input consists of:  \n\u2022 a: An array of integers, sorted in non-decreasing order and guaranteed to be non-empty.  \n\u2022 b: An array of integers, also sorted in non-decreasing order and non-empty.\n\n-----Output-----  \nThe output is a natural number (Nat) representing the minimum absolute difference between any element a[i] from the first array and b[j] from the second array.\n\n-----Note-----  \n\u2022 It is assumed that both arrays are non-empty.  \n\u2022 The arrays are assumed to be sorted in non-decreasing order.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef CanyonSearch_precond (a : Array Int) (b : Array Int) : Prop :=\n  -- !benchmark @start precond\n  a.size > 0 \u2227 b.size > 0 \u2227 List.Pairwise (\u00b7 \u2264 \u00b7) a.toList \u2227 List.Pairwise (\u00b7 \u2264 \u00b7) b.toList\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\ndef canyonSearchAux (a : Array Int) (b : Array Int) (m n d : Nat) : Nat :=\n  if m < a.size \u2227 n < b.size then\n    let diff : Nat := ((a[m]! - b[n]!).natAbs)\n    let new_d := if diff < d then diff else d\n    if a[m]! <= b[n]! then\n      canyonSearchAux a b (m + 1) n new_d\n    else\n      canyonSearchAux a b m (n + 1) new_d\n  else\n    d\ntermination_by a.size + b.size - m - n\n-- !benchmark @end code_aux\n\n\ndef CanyonSearch (a : Array Int) (b : Array Int) (h_precond : CanyonSearch_precond (a) (b)) : Nat :=\n  -- !benchmark @start code\n  let init : Nat :=\n    if a[0]! < b[0]! then (b[0]! - a[0]!).natAbs\n    else (a[0]! - b[0]!).natAbs\n  canyonSearchAux a b 0 0 init\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef CanyonSearch_postcond (a : Array Int) (b : Array Int) (result: Nat) (h_precond : CanyonSearch_precond (a) (b)) :=\n  -- !benchmark @start postcond\n  (a.any (fun ai => b.any (fun bi => result = (ai - bi).natAbs))) \u2227\n  (a.all (fun ai => b.all (fun bi => result \u2264 (ai - bi).natAbs)))\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem CanyonSearch_spec_satisfied (a: Array Int) (b: Array Int) (h_precond : CanyonSearch_precond (a) (b)) :\n    CanyonSearch_postcond (a) (b) (CanyonSearch (a) (b) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "CanyonSearch",
    "parameters": {
      "param_name": [
        "a",
        "b"
      ],
      "param_type": [
        "Array Int",
        "Array Int"
      ]
    },
    "return_type": "Nat"
  },
  "metadata": {
    "upstream": {
      "name": "clover",
      "link": "https://github.com/ChuyueSun/Clover",
      "task_id": "Clover_canyon_search",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"a\": \"#[1, 3, 5]\", \"b\": \"#[2, 4, 6]\"}",
      "{\"a\": \"#[-5, -2, 0]\", \"b\": \"#[1, 3]\"}",
      "{\"a\": \"#[10, 20, 30]\", \"b\": \"#[5, 15, 25]\"}",
      "{\"a\": \"#[1, 2, 3, 4, 5]\", \"b\": \"#[3]\"}",
      "{\"a\": \"#[-10, -5, 0, 5, 10]\", \"b\": \"#[-3, 2, 8]\"}"
    ],
    "expected": [
      [
        "1"
      ],
      [
        "1"
      ],
      [
        "5"
      ],
      [
        "0"
      ],
      [
        "2"
      ]
    ],
    "unexpected": [
      [
        "0",
        "2",
        "3"
      ],
      [
        "0",
        "2",
        "5"
      ],
      [
        "3",
        "7",
        "10"
      ],
      [
        "1",
        "2",
        "3"
      ],
      [
        "1",
        "3",
        "4"
      ]
    ]
  },
  "reject_inputs": {
    "input": [
      "{'a': '#[]', 'b': '#[]'}"
    ]
  },
  "difficulty": "basic"
}