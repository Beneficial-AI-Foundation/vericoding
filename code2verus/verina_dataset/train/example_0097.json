{
  "id": "verina_basic_102",
  "description": "-----Description-----\nThis task involves identifying the first occurrence of a pair of indices in an array of integers such that the sum of the corresponding elements equals the given target value. The focus is on determining the earliest valid pair (i, j), with 0 \u2264 i < j < nums.size, where the sum of the two numbers equals the target, without considering any language-specific or implementation details.\n\n-----Input-----\nThe input consists of:\n\u2022 nums: An array of integers.\n\u2022 target: An integer representing the desired sum.\n\n-----Output-----\nThe output is a pair of natural numbers (i, j) that satisfy:\n\u2022 0 \u2264 i < j < nums.size.\n\u2022 nums[i] + nums[j] = target.\n\u2022 Any valid pair with indices preceding (i, j) does not yield the target sum, and no index between i and j forms a valid sum with nums[i].\n\n-----Note-----\nIt is assumed that the array has at least two elements and that there exists at least one valid pair whose sum is equal to the target.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef twoSum_precond (nums : Array Int) (target : Int) : Prop :=\n  -- !benchmark @start precond\n  nums.size > 1 \u2227 \u00ac List.Pairwise (fun a b => a + b \u2260 target) nums.toList\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef twoSum (nums : Array Int) (target : Int) (h_precond : twoSum_precond (nums) (target)) : (Nat \u00d7 Nat) :=\n  -- !benchmark @start code\n  let n := nums.size\n  let rec outer (i : Nat) : Option (Nat \u00d7 Nat) :=\n    if i < n - 1 then\n      let rec inner (j : Nat) : Option (Nat \u00d7 Nat) :=\n        if j < n then\n          if nums[i]! + nums[j]! = target then\n            some (i, j)\n          else\n            inner (j + 1)\n        else\n          none\n      match inner (i + 1) with\n      | some pair => some pair\n      | none      => outer (i + 1)\n    else\n      none\n  match outer 0 with\n  | some pair => pair\n  | none      => panic \"twoSum: no solution found\"\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef twoSum_postcond (nums : Array Int) (target : Int) (result: (Nat \u00d7 Nat)) (h_precond : twoSum_precond (nums) (target)) :=\n  -- !benchmark @start postcond\n  let (i, j) := result\n  -- two sum holds\n  i < j \u2227 j < nums.size \u2227 nums[i]! + nums[j]! = target \u2227\n  -- i must be the first i\n  List.Pairwise (fun a b => a + b \u2260 target) (nums.toList.take i) \u2227\n  List.all (nums.toList.take i) (fun a => List.all (nums.toList.drop i) (fun b => a + b \u2260 target) ) \u2227\n  -- j must be the first j\n  List.all (nums.toList.drop (j + 1)) (fun a => a + nums[j]! \u2260 target)\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem twoSum_spec_satisfied (nums: Array Int) (target: Int) (h_precond : twoSum_precond (nums) (target)) :\n    twoSum_postcond (nums) (target) (twoSum (nums) (target) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "twoSum",
    "parameters": {
      "param_name": [
        "nums",
        "target"
      ],
      "param_type": [
        "Array Int",
        "Int"
      ]
    },
    "return_type": "(Nat \u00d7 Nat)"
  },
  "metadata": {
    "upstream": {
      "name": "clover",
      "link": "https://github.com/ChuyueSun/Clover",
      "task_id": "Clover_two_sum",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"nums\": \"#[2, 7, 11, 15]\", \"target\": 9}",
      "{\"nums\": \"#[3, 2, 4]\", \"target\": 6}",
      "{\"nums\": \"#[-1, 0, 1, 2]\", \"target\": 1}",
      "{\"nums\": \"#[5, 75, 25]\", \"target\": 100}",
      "{\"nums\": \"#[1, 2, 3, 4, 5]\", \"target\": 9}"
    ],
    "expected": [
      [
        "(0, 1)"
      ],
      [
        "(1, 2)"
      ],
      [
        "(0, 3)"
      ],
      [
        "(1, 2)"
      ],
      [
        "(3, 4)"
      ]
    ],
    "unexpected": [
      [
        "(0, 2)",
        "(1, 3)"
      ],
      [
        "(0, 2)",
        "(0, 1)"
      ],
      [
        "(1, 2)",
        "(2, 3)"
      ],
      [
        "(0, 2)",
        "(0, 1)"
      ],
      [
        "(2, 4)",
        "(1, 3)"
      ]
    ]
  },
  "reject_inputs": {
    "input": [
      "{'nums': '#[1]', 'target': 11}"
    ]
  },
  "difficulty": "basic"
}