{
  "id": "verina_basic_65",
  "description": "-----Description-----  \nThis task involves computing the integer square root of a given natural number. The goal is to determine the largest natural number r that satisfies r * r \u2264 N and N < (r + 1) * (r + 1).\n\n-----Input-----  \nThe input consists of:  \n\u2022 N: A natural number.\n\n-----Output-----  \nThe output is a natural number r that meets the following conditions:  \n\u2022 r * r \u2264 N  \n\u2022 N < (r + 1) * (r + 1)\n\n-----Note-----  \nThe implementation relies on a recursive strategy to iteratively increment r until (r + 1)*(r + 1) exceeds N. Edge cases, such as N = 0, should be handled correctly.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef SquareRoot_precond (N : Nat) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef SquareRoot (N : Nat) (h_precond : SquareRoot_precond (N)) : Nat :=\n  -- !benchmark @start code\n  let rec boundedLoop : Nat \u2192 Nat \u2192 Nat\n    | 0, r => r\n    | bound+1, r =>\n        if (r + 1) * (r + 1) \u2264 N then\n          boundedLoop bound (r + 1)\n        else\n          r\n  boundedLoop (N+1) 0\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef SquareRoot_postcond (N : Nat) (result: Nat) (h_precond : SquareRoot_precond (N)) :=\n  -- !benchmark @start postcond\n  result * result \u2264 N \u2227 N < (result + 1) * (result + 1)\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem SquareRoot_spec_satisfied (N: Nat) (h_precond : SquareRoot_precond (N)) :\n    SquareRoot_postcond (N) (SquareRoot (N) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "SquareRoot",
    "parameters": {
      "param_name": [
        "N"
      ],
      "param_type": [
        "Nat"
      ]
    },
    "return_type": "Nat"
  },
  "metadata": {
    "upstream": {
      "name": "clover",
      "link": "https://github.com/ChuyueSun/Clover",
      "task_id": "Clover_integer_square_root",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"N\": 0}",
      "{\"N\": 1}",
      "{\"N\": 15}",
      "{\"N\": 16}",
      "{\"N\": 26}"
    ],
    "expected": [
      [
        "0"
      ],
      [
        "1"
      ],
      [
        "3"
      ],
      [
        "4"
      ],
      [
        "5"
      ]
    ],
    "unexpected": [
      [
        "1",
        "2"
      ],
      [
        "0",
        "2"
      ],
      [
        "2",
        "4",
        "5"
      ],
      [
        "3",
        "5",
        "6"
      ],
      [
        "4",
        "6",
        "7"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "basic"
}