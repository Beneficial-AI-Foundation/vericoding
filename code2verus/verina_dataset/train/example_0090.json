{
  "id": "verina_basic_88",
  "description": "-----Description-----  \nThis task involves converting a list of integers into an array such that the array contains all the elements of the list in the exact same order. The objective is to ensure that the array has the same number of elements as the list and that each element in the array corresponds exactly to the element at the same position in the list.\n\n-----Input-----  \nThe input consists of:  \n\u2022 xs: A list of integer elements.  \n\n-----Output-----  \nThe output is an array of elements of type integer that:  \n\u2022 Has a size equal to the length of the input list xs.  \n\u2022 Contains all the elements from xs in the same order, ensuring that for every valid index i, the array element at i is equal to the list element at i.\n\n-----Note-----  \nThere are no additional preconditions; the method should work correctly for any list of elements.  \nA corresponding specification is provided stating that the array\u2019s size equals the list\u2019s length and that each element is preserved.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef ToArray_precond (xs : List Int) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef ToArray (xs : List Int) (h_precond : ToArray_precond (xs)) : Array Int :=\n  -- !benchmark @start code\n  xs.toArray\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef ToArray_postcond (xs : List Int) (result: Array Int) (h_precond : ToArray_precond (xs)) :=\n  -- !benchmark @start postcond\n  result.size = xs.length \u2227 \u2200 (i : Nat), i < xs.length \u2192 result[i]! = xs[i]!\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem ToArray_spec_satisfied (xs: List Int) (h_precond : ToArray_precond (xs)) :\n    ToArray_postcond (xs) (ToArray (xs) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "ToArray",
    "parameters": {
      "param_name": [
        "xs"
      ],
      "param_type": [
        "List Int"
      ]
    },
    "return_type": "Array Int"
  },
  "metadata": {
    "upstream": {
      "name": "clover",
      "link": "https://github.com/ChuyueSun/Clover",
      "task_id": "Clover_seq_to_array",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"xs\": \"[1, 2, 3]\"}",
      "{\"xs\": \"[]\"}",
      "{\"xs\": \"[0, -1, 5]\"}",
      "{\"xs\": \"[7]\"}",
      "{\"xs\": \"[100, 200, 300, 400]\"}"
    ],
    "expected": [
      [
        "#[1, 2, 3]"
      ],
      [
        "#[]"
      ],
      [
        "#[0, -1, 5]"
      ],
      [
        "#[7]"
      ],
      [
        "#[100, 200, 300, 400]"
      ]
    ],
    "unexpected": [
      [
        "#[1, 2]",
        "#[1, 2, 3, 4]",
        "#[3, 2, 1]"
      ],
      [
        "#[0]",
        "#[1]",
        "#[1, 0]"
      ],
      [
        "#[-1, 0, 5]",
        "#[0, 5]",
        "#[0, -1, 4]"
      ],
      [
        "#[]",
        "#[0, 7]",
        "#[8]"
      ],
      [
        "#[100, 200, 300]",
        "#[100, 300, 200, 400]",
        "#[400, 300, 200, 100]"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "basic"
}