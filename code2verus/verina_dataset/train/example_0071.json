{
  "id": "verina_basic_97",
  "description": "-----Description-----  \nThis task involves updating an array of integers such that the element at a specified index is set to 60 while all other elements remain unchanged.\n\n-----Input-----  \nThe input consists of:  \n\u2022 a: An array of integers.  \n\u2022 j: A natural number representing the index (0-indexed) to update. It is assumed that j is a valid index (j < a.size).\n\n-----Output-----  \nThe output is an array of integers where:  \n\u2022 The element at index j is set to 60.  \n\u2022 All other elements remain the same as in the input array.\n\n-----Note-----  \nIt is assumed that j is a valid index (0 \u2264 j < a.size).",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef TestArrayElements_precond (a : Array Int) (j : Nat) : Prop :=\n  -- !benchmark @start precond\n  j < a.size\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef TestArrayElements (a : Array Int) (j : Nat) (h_precond : TestArrayElements_precond (a) (j)) : Array Int :=\n  -- !benchmark @start code\n  a.set! j 60\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef TestArrayElements_postcond (a : Array Int) (j : Nat) (result: Array Int) (h_precond : TestArrayElements_precond (a) (j)) :=\n  -- !benchmark @start postcond\n  (result[j]! = 60) \u2227 (\u2200 k, k < a.size \u2192 k \u2260 j \u2192 result[k]! = a[k]!)\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem TestArrayElements_spec_satisfied (a: Array Int) (j: Nat) (h_precond : TestArrayElements_precond (a) (j)) :\n    TestArrayElements_postcond (a) (j) (TestArrayElements (a) (j) h_precond) h_precond := by\n  -- !benchmark @start proof\n  unfold TestArrayElements_postcond TestArrayElements\n  unfold TestArrayElements_precond at h_precond\n  apply And.intro\n  . rw [Array.getElem!_eq_getD, Array.getD]\n    simp\n    exact h_precond\n  . intro k\n    intro hk hxk\n    simp [Array.getElem!_eq_getD, Array.getD]\n    split\n    . rw [Array.getElem_setIfInBounds]\n      split\n      . rename_i h h\u2081\n        rw [eq_comm] at h\u2081\n        contradiction\n      . rfl\n    . rw [Array.getElem_setIfInBounds]\n      split\n      . rename_i h h\u2081\n        rw [eq_comm] at h\u2081\n        contradiction\n      . rfl\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "TestArrayElements",
    "parameters": {
      "param_name": [
        "a",
        "j"
      ],
      "param_type": [
        "Array Int",
        "Nat"
      ]
    },
    "return_type": "Array Int"
  },
  "metadata": {
    "upstream": {
      "name": "clover",
      "link": "https://github.com/ChuyueSun/Clover",
      "task_id": "Clover_test_array",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"a\": \"#[1, 2, 3, 4, 5]\", \"j\": 2}",
      "{\"a\": \"#[60, 30, 20]\", \"j\": 1}",
      "{\"a\": \"#[10, 20, 30]\", \"j\": 0}",
      "{\"a\": \"#[5, 10, 15]\", \"j\": 2}",
      "{\"a\": \"#[0]\", \"j\": 0}"
    ],
    "expected": [
      [
        "#[1, 2, 60, 4, 5]"
      ],
      [
        "#[60, 60, 20]"
      ],
      [
        "#[60, 20, 30]"
      ],
      [
        "#[5, 10, 60]"
      ],
      [
        "#[60]"
      ]
    ],
    "unexpected": [
      [
        "#[1, 2, 3, 4, 5]",
        "#[1, 60, 3, 4, 5]"
      ],
      [
        "#[60, 30, 20]",
        "#[60, 30, 60]"
      ],
      [
        "#[10, 20, 30]",
        "#[10, 60, 30]"
      ],
      [
        "#[5, 10, 15]",
        "#[5, 60, 15]"
      ],
      [
        "#[0]",
        "#[70]"
      ]
    ]
  },
  "reject_inputs": {
    "input": [
      "{'a': '#[1, 2, 3, 4]', 'j': 5}"
    ]
  },
  "difficulty": "basic"
}