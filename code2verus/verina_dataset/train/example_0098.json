{
  "id": "verina_advanced_25",
  "description": "-----Description----- \nThis task requires implementing a Lean 4 method that finds the length of the longest strictly increasing subsequence in an array of integers. A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements.\n\n-----Input-----\nThe input consists of one parameter:\nnums: A list of integers representing the input array.\n\n-----Output-----\nThe output is an integer:\nReturns the length of the longest strictly increasing subsequence in the input array. \n\n",
  "lean_code": "-- !benchmark @start import type=solution\nimport Mathlib.Data.List.Basic\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible]\ndef lengthOfLIS_precond (nums : List Int) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\ndef maxInArray (arr : Array Nat) : Nat :=\n  arr.foldl (fun a b => if a \u2265 b then a else b) 0\n-- !benchmark @end code_aux\n\n\ndef lengthOfLIS (nums : List Int) (h_precond : lengthOfLIS_precond (nums)) : Nat :=\n  -- !benchmark @start code\n  if nums.isEmpty then 0\n  else\n    let n := nums.length\n    Id.run do\n      let mut dp : Array Nat := Array.mkArray n 1\n\n      for i in [1:n] do\n        for j in [0:i] do\n          if nums[j]! < nums[i]! && dp[j]! + 1 > dp[i]! then\n            dp := dp.set! i (dp[j]! + 1)\n\n      maxInArray dp\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n-- !benchmark @end postcond_aux\n\n\n@[reducible]\ndef lengthOfLIS_postcond (nums : List Int) (result: Nat) (h_precond : lengthOfLIS_precond (nums)) : Prop :=\n  -- !benchmark @start postcond\n  let allSubseq := (nums.foldl fun acc x => acc ++ acc.map (fun sub => x :: sub)) [[]] |>.map List.reverse\n  let increasingSubseqLens := allSubseq.filter (fun l => List.Pairwise (\u00b7 < \u00b7) l) |>.map (\u00b7.length)\n  increasingSubseqLens.contains result \u2227 increasingSubseqLens.all (\u00b7 \u2264 result)\n  -- !benchmark @end postcond\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem lengthOfLIS_spec_satisfied (nums: List Int) (h_precond : lengthOfLIS_precond (nums)) :\n    lengthOfLIS_postcond (nums) (lengthOfLIS (nums) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n\n\n",
  "signature": {
    "name": "lengthOfLIS",
    "parameters": {
      "param_name": [
        "nums"
      ],
      "param_type": [
        "List Int"
      ]
    },
    "return_type": "Nat"
  },
  "metadata": {
    "upstream": {
      "name": "lab_assignment",
      "link": "https://leetcode.com/problems/longest-increasing-subsequence/description/",
      "task_id": "lab_lengthOfLIS_325743927",
      "student_id": [
        19
      ]
    }
  },
  "tests": {
    "input": [
      "{\"nums\": \"[10, 9, 2, 5, 3, 7, 101, 18]\"}",
      "{\"nums\": \"[0, 1, 0, 3, 2, 3]\"}",
      "{\"nums\": \"[7, 7, 7, 7, 7, 7, 7]\"}",
      "{\"nums\": \"[]\"}",
      "{\"nums\": \"[4, 10, 4, 3, 8, 9]\"}",
      "{\"nums\": \"[1, 3, 6, 7, 9, 4, 10, 5, 6]\"}",
      "{\"nums\": \"[10, 22, 9, 33, 21, 50, 41, 60, 80]\"}",
      "{\"nums\": \"[0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]\"}",
      "{\"nums\": \"[-2, -1]\"}"
    ],
    "expected": [
      [
        "4"
      ],
      [
        "4"
      ],
      [
        "1"
      ],
      [
        "0"
      ],
      [
        "3"
      ],
      [
        "6"
      ],
      [
        "6"
      ],
      [
        "6"
      ],
      [
        "2"
      ]
    ],
    "unexpected": [
      [
        "3",
        "5",
        "8"
      ],
      [
        "3",
        "5"
      ],
      [
        "0",
        "7"
      ],
      [
        "1"
      ],
      [
        "2",
        "4",
        "6"
      ],
      [
        "5",
        "7",
        "9"
      ],
      [
        "5",
        "7",
        "9"
      ],
      [
        "5",
        "7",
        "16"
      ],
      [
        "1",
        "0"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "advanced"
}