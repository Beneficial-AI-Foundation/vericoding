{
  "id": "verina_basic_4",
  "description": "-----Description----- \nThis task requires writing a Lean 4 method that finds the kth element in a given array using 1-based indexing. The method should return the element at the specified position, where the first element is at position 1.\n\n-----Input-----\nThe input consists of:\narr: An array of integers.\nk: An integer representing the position (1-based index) of the element to find.\n\n-----Output-----\nThe output is an integer:\nReturns the element at the kth position in the array.\n\n-----Note-----\nThe input k is assumed to be valid (between 1 and array length inclusive).\nThe array is assumed to be non-empty.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n\n@[reducible, simp]\ndef kthElement_precond (arr : Array Int) (k : Nat) : Prop :=\n  -- !benchmark @start precond\n  k \u2265 1 \u2227 k \u2264 arr.size\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef kthElement (arr : Array Int) (k : Nat) (h_precond : kthElement_precond (arr) (k)) : Int :=\n  -- !benchmark @start code\n  arr[k - 1]!\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef kthElement_postcond (arr : Array Int) (k : Nat) (result: Int) (h_precond : kthElement_precond (arr) (k)) :=\n  -- !benchmark @start postcond\n  arr.any (fun x => x = result \u2227 x = arr[k - 1]!)\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem kthElement_spec_satisfied (arr: Array Int) (k: Nat) (h_precond : kthElement_precond (arr) (k)) :\n    kthElement_postcond (arr) (k) (kthElement (arr) (k) h_precond) h_precond := by\n  -- !benchmark @start proof\n  unfold kthElement kthElement_postcond\n  unfold kthElement_precond at h_precond\n  have \u27e8hp1, hp2\u27e9 := h_precond\n  simp_all\n  have h': k - 1 < arr.size := by\n    exact Nat.sub_one_lt_of_le hp1 hp2\n  exists k - 1\n  exists h'\n  exact Eq.symm (getElem!_pos arr (k - 1) ((Iff.of_eq (Eq.refl (k - 1 < arr.size))).mpr h'))\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "kthElement",
    "parameters": {
      "param_name": [
        "arr",
        "k"
      ],
      "param_type": [
        "Array Int",
        "Nat"
      ]
    },
    "return_type": "Int"
  },
  "metadata": {
    "upstream": {
      "name": "dafny-synthesis",
      "link": "https://github.com/Mondego/dafny-synthesis",
      "task_id": "task_id_101",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"arr\": \"#[10, 20, 30, 40, 50]\", \"k\": 1}",
      "{\"arr\": \"#[10, 20, 30, 40, 50]\", \"k\": 3}",
      "{\"arr\": \"#[10, 20, 30, 40, 50]\", \"k\": 5}",
      "{\"arr\": \"#[5]\", \"k\": 1}",
      "{\"arr\": \"#[1, 2, 3]\", \"k\": 3}",
      "{\"arr\": \"#[1, 2, 3]\", \"k\": 2}",
      "{\"arr\": \"#[9, 9, 9]\", \"k\": 2}",
      "{\"arr\": \"#[0, -1, -2]\", \"k\": 1}",
      "{\"arr\": \"#[0, -1, -2]\", \"k\": 2}",
      "{\"arr\": \"#[0, -1, -2]\", \"k\": 3}"
    ],
    "expected": [
      [
        "10"
      ],
      [
        "30"
      ],
      [
        "50"
      ],
      [
        "5"
      ],
      [
        "3"
      ],
      [
        "2"
      ],
      [
        "9"
      ],
      [
        "0"
      ],
      [
        "-1"
      ],
      [
        "-2"
      ]
    ],
    "unexpected": [
      [
        "20",
        "30"
      ],
      [
        "10",
        "40",
        "50"
      ],
      [
        "10",
        "40"
      ],
      [
        "0",
        "1"
      ],
      [
        "1",
        "2"
      ],
      [
        "1",
        "3",
        "0"
      ],
      [
        "0",
        "7"
      ],
      [
        "1",
        "-1",
        "2"
      ],
      [
        "0",
        "-2"
      ],
      [
        "0",
        "-1"
      ]
    ]
  },
  "reject_inputs": {
    "input": [
      "{'arr': '#[1, 2, 3]', 'k': 0}"
    ]
  },
  "difficulty": "basic"
}