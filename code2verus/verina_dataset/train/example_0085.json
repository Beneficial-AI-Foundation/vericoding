{
  "id": "verina_basic_38",
  "description": "-----Description-----  \nThis task requires writing a Lean 4 method that checks whether all characters in an input string are identical. The method should return true if every character in the string is the same, and false if at least one character differs. An empty string or a single-character string is considered to have all characters identical.\n\n-----Input-----  \nThe input consists of:  \ns: A string.\n\n-----Output-----  \nThe output is a Boolean value:  \nReturns true if every character in the string is identical.  \nReturns false if there is at least one differing character.\n",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n\n@[reducible, simp]\ndef allCharactersSame_precond (s : String) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef allCharactersSame (s : String) (h_precond : allCharactersSame_precond (s)) : Bool :=\n  -- !benchmark @start code\n  match s.toList with\n  | []      => true\n  | c :: cs => cs.all (fun x => x = c)\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef allCharactersSame_postcond (s : String) (result: Bool) (h_precond : allCharactersSame_precond (s)) :=\n  -- !benchmark @start postcond\n  let cs := s.toList\n  (result \u2192 List.Pairwise (\u00b7 = \u00b7) cs) \u2227\n  (\u00ac result \u2192 (cs \u2260 [] \u2227 cs.any (fun x => x \u2260 cs[0]!)))\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem allCharactersSame_spec_satisfied (s: String) (h_precond : allCharactersSame_precond (s)) :\n    allCharactersSame_postcond (s) (allCharactersSame (s) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "allCharactersSame",
    "parameters": {
      "param_name": [
        "s"
      ],
      "param_type": [
        "String"
      ]
    },
    "return_type": "Bool"
  },
  "metadata": {
    "upstream": {
      "name": "dafny-synthesis",
      "link": "https://github.com/Mondego/dafny-synthesis",
      "task_id": "task_id_741",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"s\": \"aaa\"}",
      "{\"s\": \"aba\"}",
      "{\"s\": \"\"}",
      "{\"s\": \"a\"}",
      "{\"s\": \"bbbb\"}",
      "{\"s\": \"bbab\"}"
    ],
    "expected": [
      [
        "True"
      ],
      [
        "False"
      ],
      [
        "True"
      ],
      [
        "True"
      ],
      [
        "True"
      ],
      [
        "False"
      ]
    ],
    "unexpected": [
      [
        "False"
      ],
      [
        "True"
      ],
      [
        "False"
      ],
      [
        "False"
      ],
      [
        "False"
      ],
      [
        "True"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "basic"
}