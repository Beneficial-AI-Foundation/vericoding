{
  "id": "verina_basic_103",
  "description": "-----Description-----  \nThis problem involves updating an array of integers by modifying two specific positions. Specifically, the element at index 4 should be increased by 3, and the element at index 7 should be changed to 516. The goal is to correctly update these positions while leaving the rest of the array unchanged. The description assumes that the array contains at least 8 elements.\n\n-----Input-----  \nThe input consists of:  \n\u2022 a: An array of integers. The array must contain at least 8 elements.\n\n-----Output-----  \nThe output is an array of integers that meets the following criteria:  \n\u2022 The element at index 4 is updated to its original value plus 3.  \n\u2022 The element at index 7 is set to 516.  \n\u2022 All other elements in the array remain the same as in the input array.\n\n-----Note-----  \nIt is assumed that the input array has a size of at least 8 elements. Indices are 0-indexed.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef UpdateElements_precond (a : Array Int) : Prop :=\n  -- !benchmark @start precond\n  a.size \u2265 8\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef UpdateElements (a : Array Int) (h_precond : UpdateElements_precond (a)) : Array Int :=\n  -- !benchmark @start code\n  let a1 := a.set! 4 ((a[4]!) + 3)\n  let a2 := a1.set! 7 516\n  a2\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef UpdateElements_postcond (a : Array Int) (result: Array Int) (h_precond : UpdateElements_precond (a)) :=\n  -- !benchmark @start postcond\n  result[4]! = (a[4]!) + 3 \u2227\n  result[7]! = 516 \u2227\n  (\u2200 i, i < a.size \u2192 i \u2260 4 \u2192 i \u2260 7 \u2192 result[i]! = a[i]!)\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem UpdateElements_spec_satisfied (a: Array Int) (h_precond : UpdateElements_precond (a)) :\n    UpdateElements_postcond (a) (UpdateElements (a) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "UpdateElements",
    "parameters": {
      "param_name": [
        "a"
      ],
      "param_type": [
        "Array Int"
      ]
    },
    "return_type": "Array Int"
  },
  "metadata": {
    "upstream": {
      "name": "clover",
      "link": "https://github.com/ChuyueSun/Clover",
      "task_id": "Clover_update_array",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"a\": \"#[0, 1, 2, 3, 4, 5, 6, 7, 8]\"}",
      "{\"a\": \"#[10, 20, 30, 40, 50, 60, 70, 80]\"}",
      "{\"a\": \"#[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\"}",
      "{\"a\": \"#[0, 0, 0, 0, 0, 0, 0, 0]\"}",
      "{\"a\": \"#[5, 5, 5, 5, 5, 5, 5, 5]\"}"
    ],
    "expected": [
      [
        "#[0, 1, 2, 3, 7, 5, 6, 516, 8]"
      ],
      [
        "#[10, 20, 30, 40, 53, 60, 70, 516]"
      ],
      [
        "#[-1, -2, -3, -4, -2, -6, -7, 516, -9, -10]"
      ],
      [
        "#[0, 0, 0, 0, 3, 0, 0, 516]"
      ],
      [
        "#[5, 5, 5, 5, 8, 5, 5, 516]"
      ]
    ],
    "unexpected": [
      [
        "#[0, 1, 2, 3, 4, 5, 6, 516, 8]",
        "#[0, 1, 2, 3, 7, 5, 6, 7, 8]"
      ],
      [
        "#[10, 20, 30, 40, 50, 60, 70, 80]",
        "#[10, 20, 30, 40, 53, 60, 70, 80]"
      ],
      [
        "#[-1, -2, -3, -4, -5, -6, -7, 516, -9, -10]",
        "#[-1, -2, -3, -4, -2, -6, -7, -8, -9, -10]"
      ],
      [
        "#[0, 0, 0, 0, 0, 0, 0, 516]",
        "#[0, 0, 0, 0, 3, 0, 0, 0]"
      ],
      [
        "#[5, 5, 5, 5, 5, 5, 5, 5]",
        "#[5, 5, 5, 5, 8, 5, 5, 5]"
      ]
    ]
  },
  "reject_inputs": {
    "input": [
      "{'a': '#[1, 2, 3, 4, 5, 6]'}"
    ]
  },
  "difficulty": "basic"
}