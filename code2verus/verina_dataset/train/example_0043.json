{
  "id": "verina_basic_84",
  "description": "-----Description-----  \nYou are given an array of integers and a threshold value k. The problem is to create a new array where every element greater than k is replaced with -1 while every other element remains unchanged.\n\n-----Input-----  \nThe input consists of:  \n\u2022 arr: An array of integers.  \n\u2022 k: An integer used as the threshold for replacement.\n\n-----Output-----  \nThe output is an array of integers that satisfies the following conditions:  \n\u2022 For every index i, if arr[i] is greater than k, then the returned array at index i is -1.  \n\u2022 For every index i, if arr[i] is less than or equal to k, then the returned array at index i remains unchanged.\n\n-----Note-----  \nIt is assumed that the input array may be empty or non-empty, and that k can be any integer. There are no additional preconditions.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef replace_precond (arr : Array Int) (k : Int) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\ndef replace_loop (oldArr : Array Int) (k : Int) : Nat \u2192 Array Int \u2192 Array Int\n| i, acc =>\n  if i < oldArr.size then\n    if (oldArr[i]!) > k then\n      replace_loop oldArr k (i+1) (acc.set! i (-1))\n    else\n      replace_loop oldArr k (i+1) acc\n  else\n    acc\n-- !benchmark @end code_aux\n\n\ndef replace (arr : Array Int) (k : Int) (h_precond : replace_precond (arr) (k)) : Array Int :=\n  -- !benchmark @start code\n  replace_loop arr k 0 arr\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef replace_postcond (arr : Array Int) (k : Int) (result: Array Int) (h_precond : replace_precond (arr) (k)) :=\n  -- !benchmark @start postcond\n  (\u2200 i : Nat, i < arr.size \u2192 (arr[i]! > k \u2192 result[i]! = -1)) \u2227\n  (\u2200 i : Nat, i < arr.size \u2192 (arr[i]! \u2264 k \u2192 result[i]! = arr[i]!))\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem replace_spec_satisfied (arr: Array Int) (k: Int) (h_precond : replace_precond (arr) (k)) :\n    replace_postcond (arr) (k) (replace (arr) (k) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "replace",
    "parameters": {
      "param_name": [
        "arr",
        "k"
      ],
      "param_type": [
        "Array Int",
        "Int"
      ]
    },
    "return_type": "Array Int"
  },
  "metadata": {
    "upstream": {
      "name": "clover",
      "link": "https://github.com/ChuyueSun/Clover",
      "task_id": "Clover_replace",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"arr\": \"#[1, 5, 3, 10]\", \"k\": 4}",
      "{\"arr\": \"#[-1, 0, 1, 2]\", \"k\": 2}",
      "{\"arr\": \"#[100, 50, 100]\", \"k\": 100}",
      "{\"arr\": \"#[-5, -2, 0, 3]\", \"k\": -3}",
      "{\"arr\": \"#[1, 2, 3]\", \"k\": 5}"
    ],
    "expected": [
      [
        "#[1, -1, 3, -1]"
      ],
      [
        "#[-1, 0, 1, 2]"
      ],
      [
        "#[100, 50, 100]"
      ],
      [
        "#[-5, -1, -1, -1]"
      ],
      [
        "#[1, 2, 3]"
      ]
    ],
    "unexpected": [
      [
        "#[1, 5, 3, 10]",
        "#[1, -1, 3, 10]"
      ],
      [
        "#[0, 0, 1, 2]",
        "#[-1, 0, 1, 1]"
      ],
      [
        "#[100, 50, -1]",
        "#[100, 50, 50]"
      ],
      [
        "#[-5, -2, -1, -1]",
        "#[-5, -1, 0, -1]"
      ],
      [
        "#[1, 3, 3]",
        "#[1, 2, -1]"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "basic"
}