{
  "id": "verina_basic_52",
  "description": "-----Description-----  \nThis task requires developing a solution that sorts an array of integers in non-decreasing order. The solution must return an array that is a rearrangement of the input, containing exactly the same elements but ordered from smallest to largest.\n\n-----Input-----  \nThe input consists of:  \n\u2022 a: An array of integers. This array can be empty or non-empty.\n\n-----Output-----  \nThe output is an array of integers that:  \n\u2022 Is sorted in non-decreasing order (i.e., for any indices i and j with i < j, a[i]! \u2264 a[j]!).  \n\u2022 Has the same size as the input array.  \n\u2022 Contains exactly the same elements as the input array, ensuring that the multiset of elements is preserved.\n\n-----Note-----  \nThe implementation uses helper functions for swapping elements and performing inner and outer loops of the bubble sort algorithm. No additional preconditions are required as the function should correctly handle empty and non-empty arrays.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef BubbleSort_precond (a : Array Int) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\ndef swap (a : Array Int) (i j : Nat) : Array Int :=\n  let temp := a[i]!\n  let a\u2081 := a.set! i (a[j]!)\n  a\u2081.set! j temp\n\ndef bubbleInner (j i : Nat) (a : Array Int) : Array Int :=\n  if j < i then\n    let a' := if a[j]! > a[j+1]! then swap a j (j+1) else a\n    bubbleInner (j+1) i a'\n  else\n    a\n\ndef bubbleOuter (i : Nat) (a : Array Int) : Array Int :=\n  if i > 0 then\n    let a' := bubbleInner 0 i a\n    bubbleOuter (i - 1) a'\n  else\n    a\n-- !benchmark @end code_aux\n\n\ndef BubbleSort (a : Array Int) (h_precond : BubbleSort_precond (a)) : Array Int :=\n  -- !benchmark @start code\n  if a.size = 0 then a else bubbleOuter (a.size - 1) a\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef BubbleSort_postcond (a : Array Int) (result: Array Int) (h_precond : BubbleSort_precond (a)) :=\n  -- !benchmark @start postcond\n  List.Pairwise (\u00b7 \u2264 \u00b7) result.toList \u2227 List.isPerm result.toList a.toList\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem BubbleSort_spec_satisfied (a: Array Int) (h_precond : BubbleSort_precond (a)) :\n    BubbleSort_postcond (a) (BubbleSort (a) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "BubbleSort",
    "parameters": {
      "param_name": [
        "a"
      ],
      "param_type": [
        "Array Int"
      ]
    },
    "return_type": "Array Int"
  },
  "metadata": {
    "upstream": {
      "name": "clover",
      "link": "https://github.com/ChuyueSun/Clover",
      "task_id": "Clover_bubble_sort",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"a\": \"#[5, 4, 3, 2, 1]\"}",
      "{\"a\": \"#[1, 2, 3, 4, 5]\"}",
      "{\"a\": \"#[3, 1, 2, 1, 5]\"}",
      "{\"a\": \"#[10]\"}",
      "{\"a\": \"#[4, 4, 4, 2, 2, 8]\"}"
    ],
    "expected": [
      [
        "#[1, 2, 3, 4, 5]"
      ],
      [
        "#[1, 2, 3, 4, 5]"
      ],
      [
        "#[1, 1, 2, 3, 5]"
      ],
      [
        "#[10]"
      ],
      [
        "#[2, 2, 4, 4, 4, 8]"
      ]
    ],
    "unexpected": [
      [
        "#[5, 4, 3, 2, 1]",
        "#[2, 3, 1, 4, 5]"
      ],
      [
        "#[5, 4, 3, 2, 1]",
        "#[1, 3, 2, 4, 5]"
      ],
      [
        "#[1, 2, 3, 1, 5]",
        "#[3, 1, 2, 5, 1]"
      ],
      [
        "#[0]",
        "#[10, 10]"
      ],
      [
        "#[2, 4, 4, 2, 4, 8]",
        "#[4, 2, 4, 2, 4, 8]",
        "#[2, 4, 2, 4, 4, 8]"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "basic"
}