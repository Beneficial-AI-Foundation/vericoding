{
  "id": "verina_advanced_24",
  "description": "-----Description-----\nThis task requires writing a Lean 4 method that determines the length of the longest strictly increasing subsequence in a given array of integers.\n\nA subsequence is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. The subsequence must be strictly increasing, meaning each element must be greater than the one before it.\n\nThe goal is to find the length of the longest such subsequence that can be formed from the input array.\n\n-----Input-----\nThe input consists of one array:\n\nnums: An array of integers where nums[i] represents the ith element of the input sequence.\n\n-----Output-----\nThe output is an integer:\nReturns the length of the longest strictly increasing subsequence in the input array.\n\n",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef lengthOfLIS_precond (nums : List Int) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef lengthOfLIS (nums : List Int) (h_precond : lengthOfLIS_precond (nums)) : Int :=\n  -- !benchmark @start code\n  let rec lisHelper (dp : List Int) (x : Int) : List Int :=\n    let rec replace (l : List Int) (acc : List Int) : List Int :=\n      match l with\n      | [] => (acc.reverse ++ [x])\n      | y :: ys => if x \u2264 y then acc.reverse ++ (x :: ys) else replace ys (y :: acc)\n    replace dp []\n\n  let finalDP := nums.foldl lisHelper []\n  finalDP.length\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef lengthOfLIS_postcond (nums : List Int) (result: Int) (h_precond : lengthOfLIS_precond (nums)) : Prop :=\n  -- !benchmark @start postcond\n  -- Helper function to check strictly increasing\n  let rec isStrictlyIncreasing (l : List Int) : Bool :=\n    match l with\n    | [] | [_] => true\n    | x :: y :: rest => x < y && isStrictlyIncreasing (y :: rest)\n\n  -- Generate all subsequences\n  let rec subsequences (xs : List Int) : List (List Int) :=\n    match xs with\n    | [] => [[]]\n    | x :: xs' =>\n      let rest := subsequences xs'\n      rest ++ rest.map (fun r => x :: r)\n\n  let allIncreasing := subsequences nums |>.filter (fun l => isStrictlyIncreasing l)\n\n  allIncreasing.any (fun l => l.length = result) \u2227\n  allIncreasing.all (fun l => l.length \u2264 result)\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem lengthOfLIS_spec_satisfied (nums: List Int) (h_precond : lengthOfLIS_precond (nums)) :\n    lengthOfLIS_postcond (nums) (lengthOfLIS (nums) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "lengthOfLIS",
    "parameters": {
      "param_name": [
        "nums"
      ],
      "param_type": [
        "List Int"
      ]
    },
    "return_type": "Int"
  },
  "metadata": {
    "upstream": {
      "name": "lab_assignment",
      "link": "[{\"text_file_id\"=>804740897}]",
      "task_id": "lab_lengthOfLIS_325627981",
      "student_id": [
        6
      ]
    }
  },
  "tests": {
    "input": [
      "{\"nums\": \"[10, 9, 2, 5, 3, 7, 101, 18]\"}",
      "{\"nums\": \"[0, 1, 0, 3, 2, 3]\"}",
      "{\"nums\": \"[7, 7, 7, 7, 7, 7, 7]\"}",
      "{\"nums\": \"[4, 10, 4, 3, 8, 9]\"}",
      "{\"nums\": \"[1, 3, 6, 7, 9, 4, 10, 5, 6]\"}"
    ],
    "expected": [
      [
        "4"
      ],
      [
        "4"
      ],
      [
        "1"
      ],
      [
        "3"
      ],
      [
        "6"
      ]
    ],
    "unexpected": [
      [
        "1",
        "2",
        "8"
      ],
      [
        "1",
        "3",
        "6"
      ],
      [
        "0",
        "6",
        "7"
      ],
      [
        "1",
        "2",
        "6"
      ],
      [
        "1",
        "4",
        "9"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "advanced"
}