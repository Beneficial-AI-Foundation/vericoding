{
  "id": "verina_basic_98",
  "description": "-----Description-----\nThis task involves computing three times a given integer. Given an integer, the goal is to produce a value that is exactly three times its value.\n\n-----Input-----\nThe input consists of a single integer:\nx: An integer.\n\n-----Output-----\nThe output is an integer:\nReturns the product of the input integer and 3.\n\n-----Note-----\nThere are no additional preconditions.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef Triple_precond (x : Int) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef Triple (x : Int) (h_precond : Triple_precond (x)) : Int :=\n  -- !benchmark @start code\n  x * 3\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef Triple_postcond (x : Int) (result: Int) (h_precond : Triple_precond (x)) :=\n  -- !benchmark @start postcond\n  result / 3 = x \u2227 result / 3 * 3 = result\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem Triple_spec_satisfied (x: Int) (h_precond : Triple_precond (x)) :\n    Triple_postcond (x) (Triple (x) h_precond) h_precond := by\n  -- !benchmark @start proof\n  unfold Triple_postcond Triple\n  simp +arith\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "Triple",
    "parameters": {
      "param_name": [
        "x"
      ],
      "param_type": [
        "Int"
      ]
    },
    "return_type": "Int"
  },
  "metadata": {
    "upstream": {
      "name": "clover",
      "link": "https://github.com/ChuyueSun/Clover",
      "task_id": "Clover_triple",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"x\": 0}",
      "{\"x\": 2}",
      "{\"x\": -4}",
      "{\"x\": 10}",
      "{\"x\": -1}"
    ],
    "expected": [
      [
        "0"
      ],
      [
        "6"
      ],
      [
        "-12"
      ],
      [
        "30"
      ],
      [
        "-3"
      ]
    ],
    "unexpected": [
      [
        "-1",
        "1",
        "2"
      ],
      [
        "4",
        "5",
        "7"
      ],
      [
        "-8",
        "-10",
        "-16"
      ],
      [
        "20",
        "25",
        "35"
      ],
      [
        "-2",
        "-4",
        "0"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "basic"
}