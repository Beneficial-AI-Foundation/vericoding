{
  "id": "verina_advanced_50",
  "description": "-----Description-----\nThis task involves merging two sorted arrays of natural numbers (it is ill defined if inputs aren't sorted.)\n-----Input-----\nThe input consists of two arrays:\na1: A sorted array of natural numbers\na2: A sorted array of natural numbers\n-----Output-----\nThe output is an array:\nReturns a new array with all elements from both input arrays (included once and only once)\nThe resulting array is sorted itself\n\n",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible]\ndef mergeSorted_precond (a1 : Array Nat) (a2 : Array Nat) : Prop :=\n  -- !benchmark @start precond\n  List.Pairwise (\u00b7 \u2264 \u00b7) a1.toList \u2227 List.Pairwise (\u00b7 \u2264 \u00b7) a2.toList\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef mergeSorted (a1 : Array Nat) (a2 : Array Nat) : Array Nat :=\n  -- !benchmark @start code\n  Id.run <| do\n    let mut i := 0\n    let mut j := 0\n    let mut result := #[]\n    while i < a1.size \u2227 j < a2.size do\n      if a1[i]! \u2264 a2[j]! then\n        result := result.push a1[i]!\n        i := i + 1\n      else\n        result := result.push a2[j]!\n        j := j + 1\n    while i < a1.size do\n      result := result.push a1[i]!\n      i := i + 1\n    while j < a2.size do\n      result := result.push a2[j]!\n      j := j + 1\n    return result\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible]\ndef mergeSorted_postcond (a1 : Array Nat) (a2 : Array Nat) (result: Array Nat) : Prop :=\n  -- !benchmark @start postcond\n  List.Pairwise (\u00b7 \u2264 \u00b7) result.toList \u2227\n  result.toList.isPerm (a1.toList ++ a2.toList)\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem mergeSorted_spec_satisfied (a1: Array Nat) (a2: Array Nat) :\n    mergeSorted_postcond (a1) (a2) (mergeSorted (a1) (a2)) := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n\n\n",
  "signature": {
    "name": "mergeSorted",
    "parameters": {
      "param_name": [
        "a1",
        "a2"
      ],
      "param_type": [
        "Array Nat",
        "Array Nat"
      ]
    },
    "return_type": "Array Nat"
  },
  "metadata": {
    "upstream": {
      "name": "lab_assignment",
      "link": "https://leetcode.com/problems/merge-sorted-array/description/",
      "task_id": "lab_mergeSorted_325695851",
      "student_id": [
        39
      ]
    }
  },
  "tests": {
    "input": [
      "{\"a1\": \"#[1, 3, 5]\", \"a2\": \"#[2, 4, 6]\"}",
      "{\"a1\": \"#[]\", \"a2\": \"#[1, 2, 3]\"}",
      "{\"a1\": \"#[1, 2, 3]\", \"a2\": \"#[]\"}",
      "{\"a1\": \"#[]\", \"a2\": \"#[]\"}",
      "{\"a1\": \"#[1, 1, 2]\", \"a2\": \"#[1, 2, 2]\"}",
      "{\"a1\": \"#[10, 20, 30]\", \"a2\": \"#[5, 15, 25]\"}",
      "{\"a1\": \"#[1, 3, 5, 7, 9]\", \"a2\": \"#[2, 4, 6, 8, 10]\"}",
      "{\"a1\": \"#[5, 5, 5]\", \"a2\": \"#[5, 5, 5]\"}"
    ],
    "expected": [
      [
        "#[1, 2, 3, 4, 5, 6]"
      ],
      [
        "#[1, 2, 3]"
      ],
      [
        "#[1, 2, 3]"
      ],
      [
        "#[]"
      ],
      [
        "#[1, 1, 1, 2, 2, 2]"
      ],
      [
        "#[5, 10, 15, 20, 25, 30]"
      ],
      [
        "#[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
      ],
      [
        "#[5, 5, 5, 5, 5, 5]"
      ]
    ],
    "unexpected": [
      [
        "#[1, 3, 5, 2, 4, 6]",
        "#[2, 1, 3, 4, 5, 6]"
      ],
      [
        "#[]",
        "#[3, 2, 1]"
      ],
      [
        "#[]",
        "#[3, 2, 1]"
      ],
      [
        "#[1]"
      ],
      [
        "#[1, 1, 2, 1, 2, 2]",
        "#[1, 2]"
      ],
      [
        "#[10, 20, 30, 5, 15, 25]"
      ],
      [
        "#[1, 3, 5, 7, 9, 2, 4, 6, 8, 10]"
      ],
      [
        "#[5, 5, 5]"
      ]
    ]
  },
  "reject_inputs": {
    "input": [
      "{'a1': '#[3, 2, 1]', 'a2': '#[6, 5, 4]'}"
    ]
  },
  "difficulty": "advanced"
}