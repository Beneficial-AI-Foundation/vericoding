{
  "id": "verina_basic_53",
  "description": "-----Description-----\nThis problem asks for a method to determine the sum of the first N natural numbers. The task focuses on computing the total when given an input N, ensuring that the value is 0 when N is 0 and correctly calculated for positive values of N.\n\n-----Input-----\nThe input consists of:\n\u2022 N: A natural number (Nat) representing the count of the first natural numbers to sum.\n\n-----Output-----\nThe output is a natural number (Nat), which is the sum of the first N natural numbers computed as: N * (N + 1) / 2.\n\n-----Note-----\nThe computation leverages a recursive implementation. There are no additional preconditions beyond providing a valid natural number.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef CalSum_precond (N : Nat) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef CalSum (N : Nat) (h_precond : CalSum_precond (N)) : Nat :=\n  -- !benchmark @start code\n  let rec loop (n : Nat) : Nat :=\n    if n = 0 then 0\n    else n + loop (n - 1)\n  loop N\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef CalSum_postcond (N : Nat) (result: Nat) (h_precond : CalSum_precond (N)) :=\n  -- !benchmark @start postcond\n  2 * result = N * (N + 1)\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem CalSum_spec_satisfied (N: Nat) (h_precond : CalSum_precond (N)) :\n    CalSum_postcond (N) (CalSum (N) h_precond) h_precond := by\n  -- !benchmark @start proof\n  unfold CalSum_postcond CalSum\n  induction N with\n  | zero =>\n    unfold CalSum.loop\n    simp\n  | succ n ih =>\n    unfold CalSum_precond at ih\n    simp at ih\n    unfold CalSum.loop\n    simp\n    rw [Nat.mul_add]\n    rw [ih]\n    rw [\u2190 Nat.add_mul]\n    rw [Nat.add_comm, Nat.mul_comm]\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "CalSum",
    "parameters": {
      "param_name": [
        "N"
      ],
      "param_type": [
        "Nat"
      ]
    },
    "return_type": "Nat"
  },
  "metadata": {
    "upstream": {
      "name": "clover",
      "link": "https://github.com/ChuyueSun/Clover",
      "task_id": "Clover_cal_sum",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"N\": 0}",
      "{\"N\": 1}",
      "{\"N\": 5}",
      "{\"N\": 10}",
      "{\"N\": 20}"
    ],
    "expected": [
      [
        "0"
      ],
      [
        "1"
      ],
      [
        "15"
      ],
      [
        "55"
      ],
      [
        "210"
      ]
    ],
    "unexpected": [
      [
        "1",
        "2",
        "3"
      ],
      [
        "0",
        "2",
        "3"
      ],
      [
        "10",
        "16",
        "20"
      ],
      [
        "54",
        "56",
        "50"
      ],
      [
        "200",
        "220",
        "205"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "basic"
}