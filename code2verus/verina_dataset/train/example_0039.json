{
  "id": "verina_advanced_12",
  "description": "-----Description-----\nWrite a Lean 4 function that returns the first duplicate integer found in a list. The function should return the value of the first duplicate it encounters, scanning from left to right. If no duplicates exist, return -1.\n\n-----Input-----\nlst: A list of integers.\n\n-----Output-----\nAn integer representing the first duplicated value if any exists, otherwise -1.\n\n",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible]\ndef firstDuplicate_precond (lst : List Int) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef firstDuplicate (lst : List Int) (h_precond : firstDuplicate_precond (lst)) : Int :=\n  -- !benchmark @start code\n  let rec helper (seen : List Int) (rem : List Int) : Int :=\n    match rem with\n    | [] => -1\n    | h :: t => if seen.contains h then h else helper (h :: seen) t\n  helper [] lst\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible]\ndef firstDuplicate_postcond (lst : List Int) (result: Int) (h_precond : firstDuplicate_precond (lst)) : Prop :=\n  -- !benchmark @start postcond\n  -- if result = -1, then lst does not contain any duplicates\n  (result = -1 \u2192 List.Nodup lst) \u2227\n  -- if result is not -1, then it is the first duplicate in lst\n  (result \u2260 -1 \u2192\n    lst.count result > 1 \u2227\n    (lst.filter (fun x => lst.count x > 1)).head? = some result\n  )\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem firstDuplicate_spec_satisfied (lst: List Int) (h_precond : firstDuplicate_precond (lst)) :\n    firstDuplicate_postcond (lst) (firstDuplicate (lst) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n\n\n",
  "signature": {
    "name": "firstDuplicate",
    "parameters": {
      "param_name": [
        "lst"
      ],
      "param_type": [
        "List Int"
      ]
    },
    "return_type": "Int"
  },
  "metadata": {
    "upstream": {
      "name": "lab_assignment",
      "link": "NA-These are typical problems we solve, im sure their links exist, I just didn't copy directly from any link",
      "task_id": "lab_firstDuplicate_325276763",
      "student_id": [
        10
      ]
    }
  },
  "tests": {
    "input": [
      "{\"lst\": \"[1, 2, 3, 2, 4]\"}",
      "{\"lst\": \"[5, 1, 2, 3, 4, 5]\"}",
      "{\"lst\": \"[1, 2, 3, 4, 5]\"}",
      "{\"lst\": \"[7, 7, 7, 7]\"}",
      "{\"lst\": \"[]\"}"
    ],
    "expected": [
      [
        "2"
      ],
      [
        "5"
      ],
      [
        "-1"
      ],
      [
        "7"
      ],
      [
        "-1"
      ]
    ],
    "unexpected": [
      [
        "1",
        "3",
        "-1"
      ],
      [
        "1",
        "0"
      ],
      [
        "1",
        "2",
        "3"
      ],
      [
        "-1"
      ],
      [
        "0",
        "1",
        "2"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "advanced"
}