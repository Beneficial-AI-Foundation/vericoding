{
  "id": "verina_basic_41",
  "description": "-----Description-----  \nThis task requires writing a Lean 4 method that determines whether an array of integers contains only one distinct element. The method should return true if the array is empty or if every element in the array is the same, and false if there are at least two different elements.\n\n-----Input-----  \nThe input consists of:  \na: An array of integers.\n\n-----Output-----  \nThe output is a Boolean value:  \nReturns true if the array is empty or if all elements in the array are identical.  \nReturns false if the array contains at least two distinct elements.\n\n-----Note-----  \nThe input array is assumed to be non-null.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n\n@[reducible, simp]\ndef hasOnlyOneDistinctElement_precond (a : Array Int) : Prop :=\n  -- !benchmark @start precond\n  a.size > 0\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef hasOnlyOneDistinctElement (a : Array Int) (h_precond : hasOnlyOneDistinctElement_precond (a)) : Bool :=\n  -- !benchmark @start code\n  if a.size = 0 then\n    true\n  else\n    let firstElement := a[0]!\n    let rec loop (i : Nat) : Bool :=\n      if h : i < a.size then\n        if a[i]! = firstElement then loop (i + 1) else false\n      else\n        true\n    loop 1\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef hasOnlyOneDistinctElement_postcond (a : Array Int) (result: Bool) (h_precond : hasOnlyOneDistinctElement_precond (a)) :=\n  -- !benchmark @start postcond\n  let l := a.toList\n  (result \u2192 List.Pairwise (\u00b7 = \u00b7) l) \u2227\n  (\u00ac result \u2192 (l.any (fun x => x \u2260 l[0]!)))\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem hasOnlyOneDistinctElement_spec_satisfied (a: Array Int) (h_precond : hasOnlyOneDistinctElement_precond (a)) :\n    hasOnlyOneDistinctElement_postcond (a) (hasOnlyOneDistinctElement (a) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "hasOnlyOneDistinctElement",
    "parameters": {
      "param_name": [
        "a"
      ],
      "param_type": [
        "Array Int"
      ]
    },
    "return_type": "Bool"
  },
  "metadata": {
    "upstream": {
      "name": "dafny-synthesis",
      "link": "https://github.com/Mondego/dafny-synthesis",
      "task_id": "task_id_760",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"a\": \"#[1, 1, 1]\"}",
      "{\"a\": \"#[1, 2, 1]\"}",
      "{\"a\": \"#[3, 4, 5, 6]\"}",
      "{\"a\": \"#[7]\"}",
      "{\"a\": \"#[0, 0, 0, 0]\"}",
      "{\"a\": \"#[0, 0, 1, 0]\"}"
    ],
    "expected": [
      [
        "True"
      ],
      [
        "False"
      ],
      [
        "False"
      ],
      [
        "True"
      ],
      [
        "True"
      ],
      [
        "False"
      ]
    ],
    "unexpected": [
      [
        "False"
      ],
      [
        "True"
      ],
      [
        "True"
      ],
      [
        "False"
      ],
      [
        "False"
      ],
      [
        "True"
      ]
    ]
  },
  "reject_inputs": {
    "input": [
      "{'a': '#[]'}"
    ]
  },
  "difficulty": "basic"
}