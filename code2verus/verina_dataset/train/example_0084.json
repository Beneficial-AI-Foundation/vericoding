{
  "id": "verina_advanced_72",
  "description": "-----Description----- \nThis task requires writing a Lean 4 method that given an natural number n, returns the smallest prime factor that is less than 10. If none exist, return 0\n\n-----Input-----\nThe input consists of one natural number:\nn: The main natural number.\n\n-----Output-----\nThe output is an natural number:\nReturns the smallest prime factor that is less than 10 or, if none exist, 0\n\n",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef singleDigitPrimeFactor_precond (n : Nat) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef singleDigitPrimeFactor (n : Nat) (h_precond : singleDigitPrimeFactor_precond (n)) : Nat :=\n  -- !benchmark @start code\n  if n == 0 then 0\n  else if n % 2 == 0 then 2\n  else if n % 3 == 0 then 3\n  else if n % 5 == 0 then 5\n  else if n % 7 == 0 then 7\n  else 0\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef singleDigitPrimeFactor_postcond (n : Nat) (result: Nat) (h_precond : singleDigitPrimeFactor_precond (n)) : Prop :=\n  -- !benchmark @start postcond\n  result \u2208 [0, 2, 3, 5, 7] \u2227\n  (result = 0 \u2192 (n = 0 \u2228 [2, 3, 5, 7].all (n % \u00b7 \u2260 0))) \u2227\n  (result \u2260 0 \u2192 n \u2260 0 \u2227 n % result == 0 \u2227 (List.range result).all (fun x => x \u2208 [2, 3, 5, 7] \u2192 n % x \u2260 0))\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem singleDigitPrimeFactor_spec_satisfied (n: Nat) (h_precond : singleDigitPrimeFactor_precond (n)) :\n    singleDigitPrimeFactor_postcond (n) (singleDigitPrimeFactor (n) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n\n\n",
  "signature": {
    "name": "singleDigitPrimeFactor",
    "parameters": {
      "param_name": [
        "n"
      ],
      "param_type": [
        "Nat"
      ]
    },
    "return_type": "Nat"
  },
  "metadata": {
    "upstream": {
      "name": "lab_assignment",
      "link": "",
      "task_id": "lab_singleDigitPrimeFactor_324367187",
      "student_id": [
        16
      ]
    }
  },
  "tests": {
    "input": [
      "{\"n\": 0}",
      "{\"n\": 98}",
      "{\"n\": 9}",
      "{\"n\": 73}",
      "{\"n\": 529}",
      "{\"n\": 161}",
      "{\"n\": 0}"
    ],
    "expected": [
      [
        "0"
      ],
      [
        "2"
      ],
      [
        "3"
      ],
      [
        "0"
      ],
      [
        "0"
      ],
      [
        "7"
      ],
      [
        "0"
      ]
    ],
    "unexpected": [
      [
        "1",
        "2",
        "3"
      ],
      [
        "7",
        "8",
        "9"
      ],
      [
        "4",
        "5",
        "6"
      ],
      [
        "1",
        "2",
        "3"
      ],
      [
        "7",
        "8",
        "9"
      ],
      [
        "0",
        "1",
        "2"
      ],
      [
        "1",
        "2",
        "3"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "advanced"
}