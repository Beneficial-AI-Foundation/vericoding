{
  "id": "verina_basic_100",
  "description": "-----Description-----  \nThis task involves determining the triple of a given integer. The goal is to create a function that, for any integer provided as input, returns a value equal to three times that integer, including handling the case when the input is zero.\n\n-----Input-----  \nThe input consists of:  \n\u2022 x: An integer.\n\n-----Output-----  \nThe output is an integer that represents three times the input integer.  \n\u2022 If x = 0, the output will be 0.  \n\u2022 Otherwise, the output will be computed as x + 2 * x, which is equivalent to 3 * x.\n\n-----Note-----  \nThere are no additional preconditions. It is assumed that x is a valid integer.",
  "lean_code": "-- !benchmark @start import type=solution\nimport Mathlib\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef Triple_precond (x : Int) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef Triple (x : Int) (h_precond : Triple_precond (x)) : Int :=\n  -- !benchmark @start code\n  if x = 0 then 0 else\n    let y := 2 * x\n    x + y\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef Triple_postcond (x : Int) (result: Int) (h_precond : Triple_precond (x)) :=\n  -- !benchmark @start postcond\n  result / 3 = x \u2227 result / 3 * 3 = result\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem Triple_spec_satisfied (x: Int) (h_precond : Triple_precond (x)) :\n    Triple_postcond (x) (Triple (x) h_precond) h_precond := by\n  -- !benchmark @start proof\n  unfold Triple_postcond Triple\n  split_ifs with h\u2081\n  . rw [h\u2081]\n    simp\n  . simp\n    rw (occs := [1]) [\u2190Int.one_mul x]\n    rw [\u2190Int.add_mul]\n    simp +arith\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "Triple",
    "parameters": {
      "param_name": [
        "x"
      ],
      "param_type": [
        "Int"
      ]
    },
    "return_type": "Int"
  },
  "metadata": {
    "upstream": {
      "name": "clover",
      "link": "https://github.com/ChuyueSun/Clover",
      "task_id": "Clover_triple3",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"x\": 0}",
      "{\"x\": 1}",
      "{\"x\": -2}",
      "{\"x\": 10}",
      "{\"x\": -5}"
    ],
    "expected": [
      [
        "0"
      ],
      [
        "3"
      ],
      [
        "-6"
      ],
      [
        "30"
      ],
      [
        "-15"
      ]
    ],
    "unexpected": [
      [
        "1",
        "-1",
        "10"
      ],
      [
        "2",
        "4",
        "0"
      ],
      [
        "-4",
        "-2",
        "6"
      ],
      [
        "20",
        "40",
        "0"
      ],
      [
        "-10",
        "-5",
        "15"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "basic"
}