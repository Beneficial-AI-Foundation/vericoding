{
  "id": "verina_basic_6",
  "description": "-----Description----- \nThis task requires writing a Lean 4 method that finds the minimum among three given integers. The method should return the smallest value, ensuring that the result is less than or equal to each of the input numbers and that it is one of the provided integers.\n\n-----Input-----\nThe input consists of three integers:\na: The first integer.\nb: The second integer.\nc: The third integer.\n\n-----Output-----\nThe output is an integer:\nReturns the minimum of the three input numbers, assuring that the returned value is less than or equal to a, b, and c, and that it matches one of these values.",
  "lean_code": "-- !benchmark @start import type=solution\nimport Mathlib\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n\n@[reducible, simp]\ndef minOfThree_precond (a : Int) (b : Int) (c : Int) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef minOfThree (a : Int) (b : Int) (c : Int) (h_precond : minOfThree_precond (a) (b) (c)) : Int :=\n  -- !benchmark @start code\n  if a <= b && a <= c then a\n  else if b <= a && b <= c then b\n  else c\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef minOfThree_postcond (a : Int) (b : Int) (c : Int) (result: Int) (h_precond : minOfThree_precond (a) (b) (c)) :=\n  -- !benchmark @start postcond\n  (result <= a \u2227 result <= b \u2227 result <= c) \u2227\n  (result = a \u2228 result = b \u2228 result = c)\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem minOfThree_spec_satisfied (a: Int) (b: Int) (c: Int) (h_precond : minOfThree_precond (a) (b) (c)) :\n    minOfThree_postcond (a) (b) (c) (minOfThree (a) (b) (c) h_precond) h_precond := by\n  -- !benchmark @start proof\n  unfold minOfThree minOfThree_postcond\n\n  split\n\n  -- Case 1: a is the minimum\n  \u00b7 by_cases h1: a <= b && a <= c\n    \u00b7 constructor\n      \u00b7 simp_all\n      \u00b7 simp\n    \u00b7 contradiction\n\n  split\n\n  -- Case 2: b is the minimum\n  \u00b7 by_cases h2: b <= a && b <= c\n    \u00b7 constructor\n      \u00b7 simp_all\n      \u00b7 simp\n    \u00b7 contradiction\n\n  -- Case 3: c is the minimum\n  \u00b7 by_cases h3: c < a && c < b\n    \u00b7 constructor\n      \u00b7 simp_all\n        constructor\n        \u00b7 exact le_of_lt h3.1\n        \u00b7 exact le_of_lt h3.2\n      \u00b7 simp\n    \u00b7 constructor\n      \u00b7 simp_all\n        by_cases h': a <= b\n        \u00b7 simp_all\n          have h'': a <= c := by\n            exact le_trans h' h3\n          rw [\u2190 not_lt] at h''\n          contradiction\n        \u00b7 simp_all\n          have _: b <= a := by exact le_of_lt h'\n          simp_all\n          have h'': c < b := by assumption\n          have h''': c < a := by exact lt_trans h'' h'\n          apply h3 at h'''\n          rw [\u2190 not_lt] at h'''\n          contradiction\n      \u00b7 simp\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "minOfThree",
    "parameters": {
      "param_name": [
        "a",
        "b",
        "c"
      ],
      "param_type": [
        "Int",
        "Int",
        "Int"
      ]
    },
    "return_type": "Int"
  },
  "metadata": {
    "upstream": {
      "name": "dafny-synthesis",
      "link": "https://github.com/Mondego/dafny-synthesis",
      "task_id": "task_id_227",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"a\": 3, \"b\": 2, \"c\": 1}",
      "{\"a\": 5, \"b\": 5, \"c\": 5}",
      "{\"a\": 10, \"b\": 20, \"c\": 15}",
      "{\"a\": -1, \"b\": 2, \"c\": 3}",
      "{\"a\": 2, \"b\": -3, \"c\": 4}",
      "{\"a\": 2, \"b\": 3, \"c\": -5}",
      "{\"a\": 0, \"b\": 0, \"c\": 1}",
      "{\"a\": 0, \"b\": -1, \"c\": 1}",
      "{\"a\": -5, \"b\": -2, \"c\": -3}"
    ],
    "expected": [
      [
        "1"
      ],
      [
        "5"
      ],
      [
        "10"
      ],
      [
        "-1"
      ],
      [
        "-3"
      ],
      [
        "-5"
      ],
      [
        "0"
      ],
      [
        "-1"
      ],
      [
        "-5"
      ]
    ],
    "unexpected": [
      [
        "2",
        "3",
        "0"
      ],
      [
        "4",
        "6"
      ],
      [
        "15",
        "20",
        "5"
      ],
      [
        "2",
        "3",
        "0"
      ],
      [
        "2",
        "4",
        "0"
      ],
      [
        "2",
        "3",
        "0"
      ],
      [
        "1",
        "-1",
        "2"
      ],
      [
        "0",
        "1",
        "2"
      ],
      [
        "-2",
        "-3",
        "0"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "basic"
}