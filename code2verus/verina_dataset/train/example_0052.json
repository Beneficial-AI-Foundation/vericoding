{
  "id": "verina_basic_106",
  "description": "-----Description-----  \nThe task is to compute the element-wise sum of two integer arrays. The result should be a new array where each element is the sum of the corresponding elements from the two input arrays. The problem assumes that both arrays have the same length.\n\n-----Input-----  \nThe input consists of two parameters:  \n\u2022 a: An array of integers.  \n\u2022 b: An array of integers.  \nNote: Both arrays must have the same length.\n\n-----Output-----  \nThe output is an array of integers that:  \n\u2022 Has the same size as the input arrays.  \n\u2022 Contains elements where each element at index i is computed as a[i]! + b[i]! from the input arrays.\n\n-----Note-----  \nIt is assumed that the two input arrays have equal lengths.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef arraySum_precond (a : Array Int) (b : Array Int) : Prop :=\n  -- !benchmark @start precond\n  a.size = b.size\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef arraySum (a : Array Int) (b : Array Int) (h_precond : arraySum_precond (a) (b)) : Array Int :=\n  -- !benchmark @start code\n  if a.size \u2260 b.size then\n    panic! \"Array lengths mismatch\"\n  else\n    let n := a.size;\n    let c := Array.mkArray n 0;\n    let rec loop (i : Nat) (c : Array Int) : Array Int :=\n      if i < n then\n        let c' := c.set! i (a[i]! + b[i]!);\n        loop (i + 1) c'\n      else c;\n    loop 0 c\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef arraySum_postcond (a : Array Int) (b : Array Int) (result: Array Int) (h_precond : arraySum_precond (a) (b)) :=\n  -- !benchmark @start postcond\n  (result.size = a.size) \u2227 (\u2200 i : Nat, i < a.size \u2192 a[i]! + b[i]! = result[i]!)\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem arraySum_spec_satisfied (a: Array Int) (b: Array Int) (h_precond : arraySum_precond (a) (b)) :\n    arraySum_postcond (a) (b) (arraySum (a) (b) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "arraySum",
    "parameters": {
      "param_name": [
        "a",
        "b"
      ],
      "param_type": [
        "Array Int",
        "Array Int"
      ]
    },
    "return_type": "Array Int"
  },
  "metadata": {
    "upstream": {
      "name": "clover",
      "link": "https://github.com/ChuyueSun/Clover",
      "task_id": "Clover_array_sum",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"a\": \"#[1, 2, 3]\", \"b\": \"#[4, 5, 6]\"}",
      "{\"a\": \"#[0, 0, 0]\", \"b\": \"#[0, 0, 0]\"}",
      "{\"a\": \"#[-1, 2, 3]\", \"b\": \"#[1, -2, 4]\"}",
      "{\"a\": \"#[10]\", \"b\": \"#[-10]\"}",
      "{\"a\": \"#[100, 200, 300]\", \"b\": \"#[100, 200, 300]\"}"
    ],
    "expected": [
      [
        "#[5, 7, 9]"
      ],
      [
        "#[0, 0, 0]"
      ],
      [
        "#[0, 0, 7]"
      ],
      [
        "#[0]"
      ],
      [
        "#[200, 400, 600]"
      ]
    ],
    "unexpected": [
      [
        "#[5, 6, 9]",
        "#[4, 7, 9]"
      ],
      [
        "#[0, 0, 1]",
        "#[1, 0, 0]"
      ],
      [
        "#[0, 1, 7]",
        "#[0, 0, 6]"
      ],
      [
        "#[1]",
        "#[-1]"
      ],
      [
        "#[200, 400, 601]",
        "#[199, 400, 600]",
        "#[200, 399, 600]"
      ]
    ]
  },
  "reject_inputs": {
    "input": [
      "{'a': '#[1, 2, 3, 4]', 'b': '#[5, 6, 7]'}"
    ]
  },
  "difficulty": "basic"
}