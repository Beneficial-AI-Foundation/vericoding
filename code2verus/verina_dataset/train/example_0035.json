{
  "id": "verina_basic_34",
  "description": "-----Description----- \nThis task requires writing a Lean 4 method that extracts even numbers from an array of integers. The method should return a new array containing only the even numbers found in the input array, while preserving the order in which they appear.\n\n-----Input-----\nThe input consists of:\narr: An array of integers.\n\n-----Output-----\nThe output is an array of integers:\nReturns an array containing all the even numbers from the input array. Specifically:\n- Every element in the output array is an even integer.\n- All even integers present in the input array are included in the output array.\n- The relative order of the even integers is preserved as in the input array.\n\n-----Note-----\nThere are no preconditions for this task; the method will work with any array, including empty arrays (which are not null).",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\ndef isEven (n : Int) : Bool :=\n  n % 2 = 0\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n\n@[reducible, simp]\ndef findEvenNumbers_precond (arr : Array Int) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef findEvenNumbers (arr : Array Int) (h_precond : findEvenNumbers_precond (arr)) : Array Int :=\n  -- !benchmark @start code\n  arr.foldl (fun acc x => if isEven x then acc.push x else acc) #[]\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef findEvenNumbers_postcond (arr : Array Int) (result: Array Int) (h_precond : findEvenNumbers_precond (arr)) :=\n  -- !benchmark @start postcond\n  (\u2200 x, x \u2208 result \u2192 isEven x \u2227 x \u2208 arr.toList) \u2227\n  (\u2200 x, x \u2208 arr.toList \u2192 isEven x \u2192 x \u2208 result) \u2227\n  (\u2200 x y, x \u2208 arr.toList \u2192 y \u2208 arr.toList \u2192\n    isEven x \u2192 isEven y \u2192\n    arr.toList.idxOf x \u2264 arr.toList.idxOf y \u2192\n    result.toList.idxOf x \u2264 result.toList.idxOf y)\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem findEvenNumbers_spec_satisfied (arr: Array Int) (h_precond : findEvenNumbers_precond (arr)) :\n    findEvenNumbers_postcond (arr) (findEvenNumbers (arr) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "findEvenNumbers",
    "parameters": {
      "param_name": [
        "arr"
      ],
      "param_type": [
        "Array Int"
      ]
    },
    "return_type": "Array Int"
  },
  "metadata": {
    "upstream": {
      "name": "dafny-synthesis",
      "link": "https://github.com/Mondego/dafny-synthesis",
      "task_id": "task_id_629",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"arr\": \"#[1, 2, 3, 4, 5, 6]\"}",
      "{\"arr\": \"#[7, 8, 10, 13, 14]\"}",
      "{\"arr\": \"#[1, 3, 5, 7]\"}",
      "{\"arr\": \"#[]\"}",
      "{\"arr\": \"#[0, -2, -3, -4, 5]\"}"
    ],
    "expected": [
      [
        "#[2, 4, 6]"
      ],
      [
        "#[8, 10, 14]"
      ],
      [
        "#[]"
      ],
      [
        "#[]"
      ],
      [
        "#[0, -2, -4]"
      ]
    ],
    "unexpected": [
      [
        "#[1, 2, 3]",
        "#[2, 3, 4, 6]"
      ],
      [
        "#[7, 8, 10]",
        "#[8, 14]"
      ],
      [
        "#[1]",
        "#[1, 3]"
      ],
      [
        "#[0]",
        "#[1]"
      ],
      [
        "#[0, -3, -4]",
        "#[-2, -4]"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "basic"
}