{
  "id": "verina_basic_51",
  "description": "-----Description-----\nThis task requires creating a function that determines the correct insertion index for a given integer in a sorted array. The goal is to identify an index where every number before it is less than the specified value, and every number from that index onward is greater than or equal to the value. If the given integer is larger than all elements in the array, the function should return the array\u2019s size.\n\n-----Input-----\nThe input consists of:\n\u2022 a: An array of integers that is assumed to be sorted in non-decreasing order.\n\u2022 key: An integer to search for in the array.\n\n-----Output-----\nThe output is a natural number (Nat) representing the index determined by the binary search. The index satisfies the following postconditions:\n\u2022 It is between 0 and the size of the array.\n\u2022 Every element before the returned index is less than the key.\n\u2022 If the returned index equals the size of the array, then all elements are less than the key.\n\u2022 Every element from the index onwards is greater than or equal to the key.\n\n-----Note-----\nIt is assumed that the input array is sorted in non-decreasing order. The function returns the first index where the key could be inserted while maintaining the sorted order.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef BinarySearch_precond (a : Array Int) (key : Int) : Prop :=\n  -- !benchmark @start precond\n  List.Pairwise (\u00b7 \u2264 \u00b7) a.toList\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\ndef binarySearchLoop (a : Array Int) (key : Int) (lo hi : Nat) : Nat :=\n  if lo < hi then\n    let mid := (lo + hi) / 2\n    if (a[mid]! < key) then binarySearchLoop a key (mid + 1) hi\n    else binarySearchLoop a key lo mid\n  else\n    lo\n-- !benchmark @end code_aux\n\n\ndef BinarySearch (a : Array Int) (key : Int) (h_precond : BinarySearch_precond (a) (key)) : Nat :=\n  -- !benchmark @start code\n  binarySearchLoop a key 0 a.size\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef BinarySearch_postcond (a : Array Int) (key : Int) (result: Nat) (h_precond : BinarySearch_precond (a) (key)) :=\n  -- !benchmark @start postcond\n  result \u2264 a.size \u2227\n  ((a.take result).all (fun x => x < key)) \u2227\n  ((a.drop result).all (fun x => x \u2265 key))\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem BinarySearch_spec_satisfied (a: Array Int) (key: Int) (h_precond : BinarySearch_precond (a) (key)) :\n    BinarySearch_postcond (a) (key) (BinarySearch (a) (key) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "BinarySearch",
    "parameters": {
      "param_name": [
        "a",
        "key"
      ],
      "param_type": [
        "Array Int",
        "Int"
      ]
    },
    "return_type": "Nat"
  },
  "metadata": {
    "upstream": {
      "name": "clover",
      "link": "https://github.com/ChuyueSun/Clover",
      "task_id": "Clover_binary_search",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"a\": \"#[1, 3, 5, 7, 9]\", \"key\": 5}",
      "{\"a\": \"#[1, 3, 5, 7, 9]\", \"key\": 6}",
      "{\"a\": \"#[2, 4, 6, 8]\", \"key\": 1}",
      "{\"a\": \"#[2, 4, 6, 8]\", \"key\": 10}",
      "{\"a\": \"#[1, 1, 1, 1]\", \"key\": 1}"
    ],
    "expected": [
      [
        "2"
      ],
      [
        "3"
      ],
      [
        "0"
      ],
      [
        "4"
      ],
      [
        "0"
      ]
    ],
    "unexpected": [
      [
        "1",
        "3",
        "4"
      ],
      [
        "2",
        "4",
        "5"
      ],
      [
        "1",
        "2",
        "3"
      ],
      [
        "3",
        "5",
        "6"
      ],
      [
        "1",
        "2",
        "3"
      ]
    ]
  },
  "reject_inputs": {
    "input": [
      "{'a': '#[3, 2, 1]', 'key': 2}"
    ]
  },
  "difficulty": "basic"
}