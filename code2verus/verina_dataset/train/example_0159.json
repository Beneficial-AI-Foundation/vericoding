{
  "id": "verina_basic_96",
  "description": "-----Description-----  \nThis task requires swapping two integer values. Given two integers as input, the objective is to produce an output where their order is reversed: the first element of the output corresponds to the second input and the second element corresponds to the first input.\n\n-----Input-----  \nThe input consists of two integers:  \n\u2022 X: An integer value.  \n\u2022 Y: Another integer value.\n\n-----Output-----  \nThe output is a tuple (Int \u00d7 Int) where:  \n\u2022 The first element is equal to Y.  \n\u2022 The second element is equal to X.\n\n-----Note-----  \nThere are no additional preconditions for this task. The function simply returns a swapped tuple of its two input integers.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef SwapSimultaneous_precond (X : Int) (Y : Int) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef SwapSimultaneous (X : Int) (Y : Int) (h_precond : SwapSimultaneous_precond (X) (Y)) : Int \u00d7 Int :=\n  -- !benchmark @start code\n  (Y, X)\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef SwapSimultaneous_postcond (X : Int) (Y : Int) (result: Int \u00d7 Int) (h_precond : SwapSimultaneous_precond (X) (Y)) :=\n  -- !benchmark @start postcond\n  result.1 = Y \u2227 result.2 = X \u2227\n  (X \u2260 Y \u2192 result.fst \u2260 X \u2227 result.snd \u2260 Y)\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem SwapSimultaneous_spec_satisfied (X: Int) (Y: Int) (h_precond : SwapSimultaneous_precond (X) (Y)) :\n    SwapSimultaneous_postcond (X) (Y) (SwapSimultaneous (X) (Y) h_precond) h_precond := by\n  -- !benchmark @start proof\n  unfold SwapSimultaneous_postcond SwapSimultaneous\n  simp_all\n  exact fun a a_1 => a (id (Eq.symm a_1))\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "SwapSimultaneous",
    "parameters": {
      "param_name": [
        "X",
        "Y"
      ],
      "param_type": [
        "Int",
        "Int"
      ]
    },
    "return_type": "Int \u00d7 Int"
  },
  "metadata": {
    "upstream": {
      "name": "clover",
      "link": "https://github.com/ChuyueSun/Clover",
      "task_id": "Clover_swap_sim",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"X\": 3, \"Y\": 4}",
      "{\"X\": -10, \"Y\": 20}",
      "{\"X\": 0, \"Y\": 0}",
      "{\"X\": 123, \"Y\": -456}",
      "{\"X\": -1, \"Y\": -2}"
    ],
    "expected": [
      [
        "(4, 3)"
      ],
      [
        "(20, -10)"
      ],
      [
        "(0, 0)"
      ],
      [
        "(-456, 123)"
      ],
      [
        "(-2, -1)"
      ]
    ],
    "unexpected": [
      [
        "(3, 4)",
        "(3, 3)"
      ],
      [
        "(20, -20)",
        "(-10, 20)"
      ],
      [
        "(0, 1)",
        "(1, 0)"
      ],
      [
        "(123, -456)",
        "(-123, 456)"
      ],
      [
        "(-1, -2)",
        "(-2, 2)"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "basic"
}