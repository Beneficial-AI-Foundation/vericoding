{
  "id": "verina_basic_101",
  "description": "-----Description-----  \nThis problem involves computing the triple of a given integer. The goal is to produce an output that is exactly three times the input value.\n\n-----Input-----  \nThe input consists of:  \n\u2022 x: An integer representing the value to be tripled.\n\n-----Output-----  \nThe output is an integer that is three times the input value (i.e., 3 * x).\n\n-----Note-----  \nThe implementation uses a local variable to first compute double the input and then adds the original input to get the final result. The accompanying theorem asserts that the function satisfies the specification of computing 3 * x.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef Triple_precond (x : Int) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef Triple (x : Int) (h_precond : Triple_precond (x)) : Int :=\n  -- !benchmark @start code\n  let y := x * 2\n  y + x\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef Triple_postcond (x : Int) (result: Int) (h_precond : Triple_precond (x)) :=\n  -- !benchmark @start postcond\n  result / 3 = x \u2227 result / 3 * 3 = result\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem Triple_spec_satisfied (x: Int) (h_precond : Triple_precond (x)) :\n    Triple_postcond (x) (Triple (x) h_precond) h_precond := by\n  -- !benchmark @start proof\n  unfold Triple_postcond Triple\n  simp\n  rw (occs := [2]) [\u2190Int.mul_one x]\n  rw [\u2190Int.mul_add]\n  simp +arith\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "Triple",
    "parameters": {
      "param_name": [
        "x"
      ],
      "param_type": [
        "Int"
      ]
    },
    "return_type": "Int"
  },
  "metadata": {
    "upstream": {
      "name": "clover",
      "link": "https://github.com/ChuyueSun/Clover",
      "task_id": "Clover_triple4",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"x\": 0}",
      "{\"x\": 1}",
      "{\"x\": -1}",
      "{\"x\": 5}",
      "{\"x\": -10}"
    ],
    "expected": [
      [
        "0"
      ],
      [
        "3"
      ],
      [
        "-3"
      ],
      [
        "15"
      ],
      [
        "-30"
      ]
    ],
    "unexpected": [
      [
        "1",
        "-1",
        "2"
      ],
      [
        "2",
        "4",
        "5"
      ],
      [
        "-2",
        "0",
        "-1"
      ],
      [
        "14",
        "16",
        "10"
      ],
      [
        "-20",
        "-40",
        "-10"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "basic"
}