{
  "id": "verina_advanced_4",
  "description": "-----Description----- \nThis task requires writing a Lean 4 method that finds the length of the longest increasing sequence in a given array. The method should return the length of the longest increasing subsequence, in which every element is strictly less than the latter element.\n\n-----Input-----\nThe input consists of an arrat:\na: The input array.\n\n-----Output-----\nThe output is an integer:\nReturns the length of the longest increasing subsequence, assuring that it is a subsequence of the input sequence and that every element in it is strictly less than the latter one.\n\n",
  "lean_code": "-- !benchmark @start import type=solution\nimport Mathlib\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef LongestIncreasingSubsequence_precond (a : Array Int) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\ndef intMax (x y : Int) : Int :=\n  if x < y then y else x\n-- !benchmark @end code_aux\n\n\ndef LongestIncreasingSubsequence (a : Array Int) (h_precond : LongestIncreasingSubsequence_precond (a)) : Int :=\n  -- !benchmark @start code\n  let n := a.size\n  let dp := Id.run do\n    let mut dp := Array.mkArray n 1\n    for i in [1:n] do\n      for j in [0:i] do\n        if a[j]! < a[i]! then\n          let newVal := intMax (dp[i]!) (dp[j]! + 1)\n          dp := dp.set! i newVal\n    return dp\n  match dp with\n  | #[] => 0\n  | _   => dp.foldl intMax 0\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef LongestIncreasingSubsequence_postcond (a : Array Int) (result: Int) (h_precond : LongestIncreasingSubsequence_precond (a)) : Prop :=\n  -- !benchmark @start postcond\n  let allSubseq := (a.foldl fun acc x => acc ++ acc.map (fun sub => x :: sub)) [[]] |>.map List.reverse\n  let increasingSubseqLens := allSubseq.filter (fun l => List.Pairwise (\u00b7 < \u00b7) l) |>.map (\u00b7.length)\n  increasingSubseqLens.contains result \u2227 increasingSubseqLens.all (\u00b7 \u2264 result)\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem LongestIncreasingSubsequence_spec_satisfied (a: Array Int) (h_precond : LongestIncreasingSubsequence_precond (a)) :\n    LongestIncreasingSubsequence_postcond (a) (LongestIncreasingSubsequence (a) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n\n\n",
  "signature": {
    "name": "LongestIncreasingSubsequence",
    "parameters": {
      "param_name": [
        "a"
      ],
      "param_type": [
        "Array Int"
      ]
    },
    "return_type": "Int"
  },
  "metadata": {
    "upstream": {
      "name": "lab_assignment",
      "link": "",
      "task_id": "lab_LongestIncreasingSubsequence_324999618",
      "student_id": [
        2
      ]
    }
  },
  "tests": {
    "input": [
      "{\"a\": \"#[5, 2, 8, 6, 3, 6, 9, 7]\"}",
      "{\"a\": \"#[3, 1, 2, 1, 0]\"}",
      "{\"a\": \"#[2, 3, -2, -1, 7, 19, 3, 6, -4, 6, -7, 0, 9, 12, 10]\"}",
      "{\"a\": \"#[5, -5, -3, 2, 4, 1, 0, -1, 3, 2, 0]\"}",
      "{\"a\": \"#[1, 7, 23, 14, -4, 21, 8, 2, -1, 9, 12, 2]\"}",
      "{\"a\": \"#[]\"}"
    ],
    "expected": [
      [
        "4"
      ],
      [
        "2"
      ],
      [
        "6"
      ],
      [
        "4"
      ],
      [
        "5"
      ],
      [
        "0"
      ]
    ],
    "unexpected": [
      [
        "2",
        "3"
      ],
      [
        "1",
        "3"
      ],
      [
        "5",
        "3",
        "10"
      ],
      [
        "2",
        "5"
      ],
      [
        "2",
        "4"
      ],
      [
        "1",
        "2"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "advanced"
}