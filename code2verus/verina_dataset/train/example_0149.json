{
  "id": "verina_basic_26",
  "description": "-----Description----- \nThis task requires writing a Lean 4 method that determines whether a given integer is even. In other words, the method should return true if the number is even and false if the number is odd.\n\n-----Input-----\nThe input consists of:\nn: An integer.\n\n-----Output-----\nThe output is a Boolean value:\nReturns true if the input number is even.\nReturns false if the input number is odd.\n\n-----Note-----\nThere are no preconditions; the method will always work for any integer input.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n\n@[reducible, simp]\ndef isEven_precond (n : Int) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef isEven (n : Int) (h_precond : isEven_precond (n)) : Bool :=\n  -- !benchmark @start code\n  n % 2 == 0\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef isEven_postcond (n : Int) (result: Bool) (h_precond : isEven_precond (n)) :=\n  -- !benchmark @start postcond\n  (result \u2192 n % 2 = 0) \u2227 (\u00ac result \u2192 n % 2 \u2260 0)\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem isEven_spec_satisfied (n: Int) (h_precond : isEven_precond (n)) :\n    isEven_postcond (n) (isEven (n) h_precond) h_precond := by\n  -- !benchmark @start proof\n  unfold isEven isEven_postcond\n  simp\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "isEven",
    "parameters": {
      "param_name": [
        "n"
      ],
      "param_type": [
        "Int"
      ]
    },
    "return_type": "Bool"
  },
  "metadata": {
    "upstream": {
      "name": "dafny-synthesis",
      "link": "https://github.com/Mondego/dafny-synthesis",
      "task_id": "task_id_600",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"n\": 4}",
      "{\"n\": 7}",
      "{\"n\": 0}",
      "{\"n\": -2}",
      "{\"n\": -3}"
    ],
    "expected": [
      [
        "True"
      ],
      [
        "False"
      ],
      [
        "True"
      ],
      [
        "True"
      ],
      [
        "False"
      ]
    ],
    "unexpected": [
      [
        "False"
      ],
      [
        "True"
      ],
      [
        "False"
      ],
      [
        "False"
      ],
      [
        "True"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "basic"
}