{
  "id": "verina_basic_8",
  "description": "-----Description----- \nThis task requires writing a Lean 4 method that determines the minimum of two integers. The method should return the smaller of the two numbers. When both numbers are equal, either one may be returned.\n\n-----Input-----\nThe input consists of two integers:\na: The first integer.\nb: The second integer.\n\n-----Output-----\nThe output is an integer:\nReturns the smaller value between the input integers, ensuring that the result is less than or equal to both inputs.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n\n@[reducible, simp]\ndef myMin_precond (a : Int) (b : Int) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef myMin (a : Int) (b : Int) (h_precond : myMin_precond (a) (b)) : Int :=\n  -- !benchmark @start code\n  if a <= b then a else b\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef myMin_postcond (a : Int) (b : Int) (result: Int) (h_precond : myMin_precond (a) (b)) :=\n  -- !benchmark @start postcond\n  (result \u2264 a \u2227 result \u2264 b) \u2227\n  (result = a \u2228 result = b)\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem myMin_spec_satisfied (a: Int) (b: Int) (h_precond : myMin_precond (a) (b)) :\n    myMin_postcond (a) (b) (myMin (a) (b) h_precond) h_precond := by\n  -- !benchmark @start proof\n  unfold myMin myMin_postcond\n  constructor\n  \u00b7 split\n    case left.isTrue h =>\n      simp\n      exact h\n    case left.isFalse h =>\n      simp\n      rw [Int.not_le] at h\n      exact Int.le_of_lt h\n  \u00b7 split <;> simp\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "myMin",
    "parameters": {
      "param_name": [
        "a",
        "b"
      ],
      "param_type": [
        "Int",
        "Int"
      ]
    },
    "return_type": "Int"
  },
  "metadata": {
    "upstream": {
      "name": "dafny-synthesis",
      "link": "https://github.com/Mondego/dafny-synthesis",
      "task_id": "task_id_404",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"a\": 3, \"b\": 5}",
      "{\"a\": 10, \"b\": 7}",
      "{\"a\": 4, \"b\": 4}",
      "{\"a\": -3, \"b\": 5}",
      "{\"a\": 3, \"b\": -5}",
      "{\"a\": -3, \"b\": -5}",
      "{\"a\": 0, \"b\": 10}",
      "{\"a\": 0, \"b\": -10}"
    ],
    "expected": [
      [
        "3"
      ],
      [
        "7"
      ],
      [
        "4"
      ],
      [
        "-3"
      ],
      [
        "-5"
      ],
      [
        "-5"
      ],
      [
        "0"
      ],
      [
        "-10"
      ]
    ],
    "unexpected": [
      [
        "5",
        "4",
        "8"
      ],
      [
        "10",
        "8",
        "9"
      ],
      [
        "0",
        "8",
        "2"
      ],
      [
        "5",
        "0",
        "-5"
      ],
      [
        "3",
        "0",
        "-3"
      ],
      [
        "-3",
        "0",
        "-1"
      ],
      [
        "10",
        "1",
        "-1"
      ],
      [
        "0",
        "-1",
        "-5"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "basic"
}