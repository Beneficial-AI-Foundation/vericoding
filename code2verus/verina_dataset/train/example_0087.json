{
  "id": "verina_basic_25",
  "description": "-----Description----- \nThis task requires writing a Lean 4 method that calculates both the sum and the average of the first n natural numbers. The method should compute the sum of numbers from 0 to n (which equals n * (n + 1) / 2) and then determine the average by dividing this sum by n. The specification assumes that the input n is a positive integer.\n\n-----Input-----\nThe input consists of:\nn: A natural number representing the count of the first natural numbers. The value of n is assumed to be positive.\n\n-----Output-----\nThe output is a pair consisting of:\n- An integer representing the sum of the first n natural numbers.\n- A floating-point number representing the average of the first n natural numbers.\n\n-----Note-----\nThe input n must be a positive integer.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n\n@[reducible, simp]\ndef sumAndAverage_precond (n : Nat) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef sumAndAverage (n : Nat) (h_precond : sumAndAverage_precond (n)) : Int \u00d7 Float :=\n  -- !benchmark @start code\n  if n \u2264 0 then (0, 0.0)\n  else\n    let sum := (List.range (n + 1)).sum\n    let average : Float := sum.toFloat / (n.toFloat)\n    (sum, average)\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef sumAndAverage_postcond (n : Nat) (result: Int \u00d7 Float) (h_precond : sumAndAverage_precond (n)) :=\n  -- !benchmark @start postcond\n  (n = 0 \u2192 result == (0, 0.0)) \u2227\n  (n > 0 \u2192\n    result.1 == n * (n + 1) / 2 \u2227\n    result.2 == ((n * (n + 1) / 2).toFloat) / (n.toFloat))\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem sumAndAverage_spec_satisfied (n: Nat) (h_precond : sumAndAverage_precond (n)) :\n    sumAndAverage_postcond (n) (sumAndAverage (n) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "sumAndAverage",
    "parameters": {
      "param_name": [
        "n"
      ],
      "param_type": [
        "Nat"
      ]
    },
    "return_type": "Int \u00d7 Float"
  },
  "metadata": {
    "upstream": {
      "name": "dafny-synthesis",
      "link": "https://github.com/Mondego/dafny-synthesis",
      "task_id": "task_id_599",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"n\": 5}",
      "{\"n\": 1}",
      "{\"n\": 10}",
      "{\"n\": 0}",
      "{\"n\": 2}"
    ],
    "expected": [
      [
        "(15, 3.0)"
      ],
      [
        "(1, 1.0)"
      ],
      [
        "(55, 5.5)"
      ],
      [
        "(0, 0.0)"
      ],
      [
        "(3, 1.5)"
      ]
    ],
    "unexpected": [
      [
        "(14, 2.8)",
        "(16, 3.2)"
      ],
      [
        "(0, 0.0)",
        "(2, 2.0)"
      ],
      [
        "(50, 5.0)",
        "(60, 6.0)"
      ],
      [
        "(1, 0.1)",
        "(-1, -0.1)"
      ],
      [
        "(2, 1.0)",
        "(4, 2.0)"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "basic"
}