{
  "id": "verina_basic_37",
  "description": "-----Description-----  \nThis task requires writing a Lean 4 method that locates the first occurrence of a specified integer within a sorted array of integers. The method returns the index corresponding to the first time the target value appears in the array; if the target is absent, it returns -1. It is also essential that the original array remains unchanged.\n\n-----Input-----  \nThe input consists of:  \n\u2022 arr: An array of integers sorted in non-decreasing order.  \n\u2022 target: An integer representing the value to search for.\n\n-----Output-----  \nThe output is an integer:  \n\u2022 If the target is found, the method returns the index of its first occurrence.  \n\u2022 If the target is not found, the method returns -1.\n\n-----Note-----  \n\u2022 The input array must be sorted in non-decreasing order.  \n\u2022 The array is guaranteed to remain unmodified after the method executes.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n\n@[reducible, simp]\ndef findFirstOccurrence_precond (arr : Array Int) (target : Int) : Prop :=\n  -- !benchmark @start precond\n  List.Pairwise (\u00b7 \u2264 \u00b7) arr.toList\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef findFirstOccurrence (arr : Array Int) (target : Int) (h_precond : findFirstOccurrence_precond (arr) (target)) : Int :=\n  -- !benchmark @start code\n  let rec loop (i : Nat) : Int :=\n    if i < arr.size then\n      let a := arr[i]!\n      if a = target then i\n      else if a > target then -1\n      else loop (i + 1)\n    else -1\n  loop 0\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef findFirstOccurrence_postcond (arr : Array Int) (target : Int) (result: Int) (h_precond : findFirstOccurrence_precond (arr) (target)) :=\n  -- !benchmark @start postcond\n  (result \u2265 0 \u2192\n    arr[result.toNat]! = target \u2227\n    (\u2200 i : Nat, i < result.toNat \u2192 arr[i]! \u2260 target)) \u2227\n  (result = -1 \u2192\n    (\u2200 i : Nat, i < arr.size \u2192 arr[i]! \u2260 target))\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem findFirstOccurrence_spec_satisfied (arr: Array Int) (target: Int) (h_precond : findFirstOccurrence_precond (arr) (target)) :\n    findFirstOccurrence_postcond (arr) (target) (findFirstOccurrence (arr) (target) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "findFirstOccurrence",
    "parameters": {
      "param_name": [
        "arr",
        "target"
      ],
      "param_type": [
        "Array Int",
        "Int"
      ]
    },
    "return_type": "Int"
  },
  "metadata": {
    "upstream": {
      "name": "dafny-synthesis",
      "link": "https://github.com/Mondego/dafny-synthesis",
      "task_id": "task_id_733",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"arr\": \"#[1, 2, 2, 3, 4, 5]\", \"target\": 2}",
      "{\"arr\": \"#[1, 2, 2, 3, 4, 5]\", \"target\": 6}",
      "{\"arr\": \"#[1, 2, 3, 4, 5]\", \"target\": 1}",
      "{\"arr\": \"#[1, 2, 3, 4, 5]\", \"target\": 5}",
      "{\"arr\": \"#[1, 2, 3, 4, 5]\", \"target\": 0}"
    ],
    "expected": [
      [
        "1"
      ],
      [
        "-1"
      ],
      [
        "0"
      ],
      [
        "4"
      ],
      [
        "-1"
      ]
    ],
    "unexpected": [
      [
        "0",
        "2",
        "-1"
      ],
      [
        "0",
        "1",
        "2"
      ],
      [
        "1",
        "-1",
        "2"
      ],
      [
        "3",
        "5",
        "0"
      ],
      [
        "0",
        "1",
        "2"
      ]
    ]
  },
  "reject_inputs": {
    "input": [
      "{'arr': '#[3, 2, 1]', 'target': 2}"
    ]
  },
  "difficulty": "basic"
}