{
  "id": "verina_basic_58",
  "description": "-----Description-----  \nThis task involves transforming an array of integers by doubling each element.\n\n-----Input-----  \nThe input consists of:  \n\u2022 s: An array of integers.\n\n-----Output-----  \nThe output is an array of integers where for each valid index i, the element at position i is equal to twice the corresponding element in the input array.\n\n-----Note-----  \nThe implementation makes use of a recursive helper function to update the array in place. It is assumed that the input array is valid and that the doubling operation does not lead to any overflow issues.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible, simp]\ndef double_array_elements_precond (s : Array Int) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\ndef double_array_elements_aux (s_old s : Array Int) (i : Nat) : Array Int :=\n  if i < s.size then\n    let new_s := s.set! i (2 * (s_old[i]!))\n    double_array_elements_aux s_old new_s (i + 1)\n  else\n    s\n-- !benchmark @end code_aux\n\n\ndef double_array_elements (s : Array Int) (h_precond : double_array_elements_precond (s)) : Array Int :=\n  -- !benchmark @start code\n  double_array_elements_aux s s 0\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef double_array_elements_postcond (s : Array Int) (result: Array Int) (h_precond : double_array_elements_precond (s)) :=\n  -- !benchmark @start postcond\n  result.size = s.size \u2227 \u2200 i, i < s.size \u2192 result[i]! = 2 * s[i]!\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem double_array_elements_spec_satisfied (s: Array Int) (h_precond : double_array_elements_precond (s)) :\n    double_array_elements_postcond (s) (double_array_elements (s) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "double_array_elements",
    "parameters": {
      "param_name": [
        "s"
      ],
      "param_type": [
        "Array Int"
      ]
    },
    "return_type": "Array Int"
  },
  "metadata": {
    "upstream": {
      "name": "clover",
      "link": "https://github.com/ChuyueSun/Clover",
      "task_id": "Clover_double_array_elements",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"s\": \"#[]\"}",
      "{\"s\": \"#[1, 2, 3, 4, 5]\"}",
      "{\"s\": \"#[0, -1, 5]\"}",
      "{\"s\": \"#[100]\"}",
      "{\"s\": \"#[-3, -4]\"}"
    ],
    "expected": [
      [
        "#[]"
      ],
      [
        "#[2, 4, 6, 8, 10]"
      ],
      [
        "#[0, -2, 10]"
      ],
      [
        "#[200]"
      ],
      [
        "#[-6, -8]"
      ]
    ],
    "unexpected": [
      [
        "#[1]",
        "#[0]",
        "#[-1]"
      ],
      [
        "#[1, 2, 3, 4, 5]",
        "#[2, 4, 6, 8, 9]",
        "#[0, 4, 6, 8, 10]"
      ],
      [
        "#[0, -1, 5]",
        "#[1, -2, 10]",
        "#[0, 0, 10]"
      ],
      [
        "#[100]",
        "#[0]",
        "#[201]"
      ],
      [
        "#[3, -4]",
        "#[-6, -7]",
        "#[-6, -9]"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "basic"
}