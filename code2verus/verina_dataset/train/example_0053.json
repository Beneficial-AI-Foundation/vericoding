{
  "id": "verina_advanced_23",
  "description": "-----Description----- \nThis task requires writing a Lean 4 method that determines whether a given integer is a power of two.\nAn integer n is a power of two if there exists an integer x such that n = 2^x.\nThe method should return true if n is a power of two, and false otherwise.\nNote that negative numbers and zero are not powers of two.\n\n-----Input-----\nThe input consists of one integer:\nn: The integer to be tested.\n\n-----Output-----\nThe output is a boolean:\nReturns true if there exists an integer x such that n = 2^x (with n > 0), otherwise false.\n\n",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n@[reducible]\ndef isPowerOfTwo_precond (n : Int) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef isPowerOfTwo (n : Int) (h_precond : isPowerOfTwo_precond (n)) : Bool :=\n  -- !benchmark @start code\n  if n <= 0 then false\n  else\n    let rec aux (m : Int) (fuel : Nat) : Bool :=\n      if fuel = 0 then false\n      else if m = 1 then true\n      else if m % 2 \u2260 0 then false\n      else aux (m / 2) (fuel - 1)\n    aux n n.natAbs\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\ndef pow (base : Int) (exp : Nat) : Int :=\n  match exp with\n  | 0 => 1\n  | n+1 => base * pow base n\n-- !benchmark @end postcond_aux\n\n\n@[reducible]\ndef isPowerOfTwo_postcond (n : Int) (result: Bool) (h_precond : isPowerOfTwo_precond (n)) : Prop :=\n  -- !benchmark @start postcond\n  if result then \u2203 (x : Nat), (pow 2 x = n) \u2227 (n > 0)\n  else \u00ac (\u2203 (x : Nat), (pow 2 x = n) \u2227 (n > 0))\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem isPowerOfTwo_spec_satisfied (n: Int) (h_precond : isPowerOfTwo_precond (n)) :\n    isPowerOfTwo_postcond (n) (isPowerOfTwo (n) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n\n\n",
  "signature": {
    "name": "isPowerOfTwo",
    "parameters": {
      "param_name": [
        "n"
      ],
      "param_type": [
        "Int"
      ]
    },
    "return_type": "Bool"
  },
  "metadata": {
    "upstream": {
      "name": "lab_assignment",
      "link": "https://leetcode.com/problems/power-of-two/description/",
      "task_id": "lab_isPowerOfTwo_324854887",
      "student_id": [
        18
      ]
    }
  },
  "tests": {
    "input": [
      "{\"n\": 1}",
      "{\"n\": 16}",
      "{\"n\": 3}",
      "{\"n\": 0}",
      "{\"n\": -2}",
      "{\"n\": 8}",
      "{\"n\": 10}"
    ],
    "expected": [
      [
        "True"
      ],
      [
        "True"
      ],
      [
        "False"
      ],
      [
        "False"
      ],
      [
        "False"
      ],
      [
        "True"
      ],
      [
        "False"
      ]
    ],
    "unexpected": [
      [
        "False"
      ],
      [
        "False"
      ],
      [
        "True"
      ],
      [
        "True"
      ],
      [
        "True"
      ],
      [
        "False"
      ],
      [
        "True"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "advanced"
}