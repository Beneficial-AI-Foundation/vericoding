{
  "id": "verina_basic_43",
  "description": "-----Description----- \nThis task requires writing a Lean 4 method that computes the sum of the fourth power of the first n odd natural numbers. In other words, given a non-negative integer n, the method should calculate the sum: 1\u2074 + 3\u2074 + 5\u2074 + ... for the first n odd numbers.\n\n-----Input-----\nThe input consists of:\nn: A non-negative natural number representing the number of odd natural numbers to consider.\n\n-----Output----- \nThe output is a natural number:\nReturns the sum of the fourth power of the first n odd natural numbers.\n\n-----Note----- \nThe input n is assumed to be a non-negative integer.\nThe correctness of the result is established by a theorem that relates the computed sum to a specific formula.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n\n@[reducible, simp]\ndef sumOfFourthPowerOfOddNumbers_precond (n : Nat) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef sumOfFourthPowerOfOddNumbers (n : Nat) (h_precond : sumOfFourthPowerOfOddNumbers_precond (n)) : Nat :=\n  -- !benchmark @start code\n  match n with\n  | 0 => 0\n  | n + 1 =>\n    let prev := sumOfFourthPowerOfOddNumbers n h_precond\n    let nextOdd := 2 * n + 1\n    prev + nextOdd^4\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef sumOfFourthPowerOfOddNumbers_postcond (n : Nat) (result: Nat) (h_precond : sumOfFourthPowerOfOddNumbers_precond (n)) :=\n  -- !benchmark @start postcond\n  15 * result = n * (2 * n + 1) * (7 + 24 * n^3 - 12 * n^2 - 14 * n)\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem sumOfFourthPowerOfOddNumbers_spec_satisfied (n: Nat) (h_precond : sumOfFourthPowerOfOddNumbers_precond (n)) :\n    sumOfFourthPowerOfOddNumbers_postcond (n) (sumOfFourthPowerOfOddNumbers (n) h_precond) h_precond := by\n  -- !benchmark @start proof\n  sorry\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "sumOfFourthPowerOfOddNumbers",
    "parameters": {
      "param_name": [
        "n"
      ],
      "param_type": [
        "Nat"
      ]
    },
    "return_type": "Nat"
  },
  "metadata": {
    "upstream": {
      "name": "dafny-synthesis",
      "link": "https://github.com/Mondego/dafny-synthesis",
      "task_id": "task_id_770",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"n\": 0}",
      "{\"n\": 1}",
      "{\"n\": 2}",
      "{\"n\": 3}",
      "{\"n\": 4}",
      "{\"n\": 5}"
    ],
    "expected": [
      [
        "0"
      ],
      [
        "1"
      ],
      [
        "82"
      ],
      [
        "707"
      ],
      [
        "3108"
      ],
      [
        "9669"
      ]
    ],
    "unexpected": [
      [
        "1",
        "10"
      ],
      [
        "2",
        "0",
        "5"
      ],
      [
        "81",
        "83",
        "80"
      ],
      [
        "706",
        "708",
        "700"
      ],
      [
        "3107",
        "3109",
        "3000"
      ],
      [
        "9668",
        "9670",
        "9000"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "basic"
}