{
  "id": "verina_basic_14",
  "description": "-----Description----- \nThis task requires writing a Lean 4 method that determines whether a given string contains the character 'z' or 'Z'. The method should return true if the string includes either the lowercase or uppercase letter 'z', and false otherwise.\n\n-----Input-----\nThe input consists of:\ns: A string.\n\n-----Output-----\nThe output is a Boolean value:\nReturns true if the input string contains the character 'z' or 'Z'.\nReturns false if the input string does not contain the character 'z' or 'Z'.\n\n-----Note-----\nThere are no preconditions; the method will always work as strings and sequences are considered non-null.",
  "lean_code": "-- !benchmark @start import type=solution\n\n-- !benchmark @end import\n\n-- !benchmark @start solution_aux\n\n-- !benchmark @end solution_aux\n\n-- !benchmark @start precond_aux\n\n-- !benchmark @end precond_aux\n\n@[reducible, simp]\ndef containsZ_precond (s : String) : Prop :=\n  -- !benchmark @start precond\n  True\n  -- !benchmark @end precond\n\n\n-- !benchmark @start code_aux\n\n-- !benchmark @end code_aux\n\n\ndef containsZ (s : String) (h_precond : containsZ_precond (s)) : Bool :=\n  -- !benchmark @start code\n  s.toList.any fun c => c = 'z' || c = 'Z'\n  -- !benchmark @end code\n\n\n-- !benchmark @start postcond_aux\n\n-- !benchmark @end postcond_aux\n\n\n@[reducible, simp]\ndef containsZ_postcond (s : String) (result: Bool) (h_precond : containsZ_precond (s)) :=\n  -- !benchmark @start postcond\n  let cs := s.toList\n  (\u2203 x, x \u2208 cs \u2227 (x = 'z' \u2228 x = 'Z')) \u2194 result\n  -- !benchmark @end postcond\n\n\n-- !benchmark @start proof_aux\n\n-- !benchmark @end proof_aux\n\n\ntheorem containsZ_spec_satisfied (s: String) (h_precond : containsZ_precond (s)) :\n    containsZ_postcond (s) (containsZ (s) h_precond) h_precond := by\n  -- !benchmark @start proof\n  unfold containsZ containsZ_postcond\n  simp_all\n  -- !benchmark @end proof\n",
  "signature": {
    "name": "containsZ",
    "parameters": {
      "param_name": [
        "s"
      ],
      "param_type": [
        "String"
      ]
    },
    "return_type": "Bool"
  },
  "metadata": {
    "upstream": {
      "name": "dafny-synthesis",
      "link": "https://github.com/Mondego/dafny-synthesis",
      "task_id": "task_id_454",
      "student_id": null
    }
  },
  "tests": {
    "input": [
      "{\"s\": \"hello\"}",
      "{\"s\": \"zebra\"}",
      "{\"s\": \"Zebra\"}",
      "{\"s\": \"\"}",
      "{\"s\": \"crazy\"}",
      "{\"s\": \"AZ\"}",
      "{\"s\": \"abc\"}",
      "{\"s\": \"Zz\"}",
      "{\"s\": \"no letter\"}"
    ],
    "expected": [
      [
        "False"
      ],
      [
        "True"
      ],
      [
        "True"
      ],
      [
        "False"
      ],
      [
        "True"
      ],
      [
        "True"
      ],
      [
        "False"
      ],
      [
        "True"
      ],
      [
        "False"
      ]
    ],
    "unexpected": [
      [
        "True"
      ],
      [
        "False"
      ],
      [
        "False"
      ],
      [
        "True"
      ],
      [
        "False"
      ],
      [
        "False"
      ],
      [
        "True"
      ],
      [
        "False"
      ],
      [
        "True"
      ]
    ]
  },
  "reject_inputs": {
    "input": []
  },
  "difficulty": "basic"
}