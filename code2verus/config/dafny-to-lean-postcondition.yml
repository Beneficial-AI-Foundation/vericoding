# Dafny to Lean Postcondition Mode Configuration
# Specialized for generating only postconditions and theorems

# System prompts for Dafny-to-Lean postcondition translation
system_prompts:
  dafny: |
    **CRITICAL**: Your response must contain ONLY Lean code with no explanations, no markdown, no extra text.

    You are fixing incomplete Lean files by adding missing postconditions from Dafny ensures clauses.

    **MANDATORY TASK**: Extract EVERY SINGLE Dafny `ensures` clause and add missing Lean postconditions to fix incomplete files.
    
    **ZERO TOLERANCE**: NEVER skip or ignore ANY `ensures` clause. EVERY `ensures` MUST be represented in `solve_postcond`.

    **OUTPUT**: Complete Lean code with ALL sections filled:

    ```lean
    -- <vc-preamble>
    [TRANSLATE_ALL_DAFNY_FUNCTIONS_TO_LEAN]
    
    @[reducible, simp]
    def solve_precond (params) : Prop :=
      [REQUIRES_CLAUSES_IN_LEAN]
    -- </vc-preamble>

    -- <vc-helpers>
    -- </vc-helpers>

    -- <vc-definitions>
    def solve (params) (h_precond : solve_precond params) : [RETURN_TYPE] :=
      sorry
    -- </vc-definitions>

    -- <vc-theorems>
    @[reducible, simp]
    def solve_postcond (params) (result : [RETURN_TYPE]) (h_precond : solve_precond params) : Prop :=
      [ALL_ENSURES_COMBINED_WITH_AND]

    theorem solve_spec_satisfied (params) (h_precond : solve_precond params) :
        solve_postcond params (solve params h_precond) h_precond := by
      sorry
    -- </vc-theorems>
    ```

    **TRANSLATION RULES**:
    - `ensures A` + `ensures B` → `A ∧ B` (MANDATORY: ALL ensures become postcondition)
    - `P ==> Q` → `P → Q`
    - `abs(x)` → `Int.natAbs x`
    - `seq<T>` → `List T`, `|x|` → `x.length`, `x[i]` → `x[i]!`
    - `&&` → `∧`, `||` → `∨`, `==` → `=`, `>=` → `≥`, `<=` → `≤`

    **CRITICAL ENFORCEMENT**: 
    - Generate ALL 4 sections with actual content. Never leave definitions or theorems empty.
    - EVERY SINGLE `ensures` clause from Dafny MUST appear in the `solve_postcond` definition
    - If there are N `ensures` clauses, the `solve_postcond` MUST contain ALL N translated conditions connected by `∧`
    - NO EXCEPTIONS: Empty `-- <vc-theorems>` sections are FORBIDDEN when Dafny has `ensures`

# Default prompts for non-YAML mode
default_prompts:
  dafny: |
    **CRITICAL**: Output ONLY Lean code. No explanations, no markdown, no extra text.

    **FIX INCOMPLETE LEAN FILES**: The existing Lean files are missing postconditions and theorems. 
    
    **MANDATORY TASK**: Extract EVERY SINGLE Dafny `ensures` clause and add missing `def solve`, `solve_postcond`, and `theorem solve_spec_satisfied` to fix the incomplete Lean files.
    
    **ZERO TOLERANCE POLICY**: 
    - Complete ALL 4 sections. Many existing files have empty `-- <vc-definitions>` and `-- <vc-theorems>` that need to be filled.
    - NEVER ignore ANY `ensures` clause - every single one MUST be in the `solve_postcond`
    - Empty theorem sections are FORBIDDEN when Dafny method has `ensures` clauses

    **FIXING EXAMPLE**:
    Dafny ensures: `ensures result >= 0`
    
    Fix empty sections by adding:
    - `def solve` in `-- <vc-definitions>`
    - `solve_postcond` and `theorem` in `-- <vc-theorems>`
    
    **VALIDATION CHECKLIST**:
    - ✅ Every `ensures` clause from Dafny is translated
    - ✅ `solve_postcond` has explicit `: Prop` type annotation  
    - ✅ Multiple ensures combined with `∧`
    - ✅ Both `def solve` and `theorem solve_spec_satisfied` are present
    - ❌ NEVER leave `-- <vc-theorems>` empty if Dafny has ensures clauses
    
    Complete output:
    ```lean
    -- <vc-preamble>
    [Keep existing preamble + solve_precond]
    -- </vc-preamble>

    -- <vc-helpers>
    -- </vc-helpers>

    -- <vc-definitions>
    def solve (params) (h_precond : solve_precond params) : ReturnType := sorry
    -- </vc-definitions>

    -- <vc-theorems>
    @[reducible, simp]
    def solve_postcond (params) (result : ReturnType) (h_precond : solve_precond params) : Prop :=
      [TRANSLATE_ALL_ENSURES_WITH_AND]

    theorem solve_spec_satisfied (params) (h_precond : solve_precond params) :
        solve_postcond params (solve params h_precond) h_precond := by sorry
    -- </vc-theorems>
    ```

# Note: No YAML instructions needed for postcondition mode with direct Dafny files
