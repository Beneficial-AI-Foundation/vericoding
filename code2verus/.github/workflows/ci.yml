name: CI Tests

on:
  push:
    #branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
    
    - name: Install dependencies
      run: |
        uv sync --dev
    
    - name: Run linting
      run: |
        uv run ruff check src/
        uv run ruff format --check src/
    
    - name: Run type checking
      run: |
        uv run pyright src/
    
    - name: Run smoke tests (fast)
      run: |
        uv run pytest tests/test_smoke.py -v
    
    - name: Run unit tests (without Verus)
      run: |
        uv run pytest tests/test_config.py tests/test_translation.py tests/test_benchmarks.py -v -m "not requires_verus"
    
    - name: Run integration tests (mocked)
      run: |
        uv run pytest tests/test_integration.py -v -m "not slow"

  test-with-verus:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
    
    - name: Install dependencies
      run: |
        uv sync --dev
    
    - name: Install Verus
      run: |
        # Install Rust
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source ~/.cargo/env
        
        # Download and install Verus binary release
        VERUS_VERSION=$(curl -s https://api.github.com/repos/verus-lang/verus/releases/latest | jq -r .tag_name)
        if [ -z "$VERUS_VERSION" ]; then
          echo "Failed to fetch Verus version from GitHub API"; exit 1
        fi
        wget -O verus-linux.zip "https://github.com/verus-lang/verus/releases/download/${VERUS_VERSION}/verus-${VERUS_VERSION#release/}-x86-linux.zip"
        if [ $? -ne 0 ]; then
          echo "Failed to download Verus release zip"; exit 1
        fi
        unzip verus-linux.zip
        sudo mv verus-x86-linux/verus /usr/local/bin/
        rm -rf verus-linux.zip verus-x86-linux
    
    - name: Verify Verus installation
      run: |
        verus --version || echo "Verus installation verification failed"
    
    - name: Run verification tests
      run: |
        uv run pytest tests/test_verification.py -v
      continue-on-error: true  # Don't fail CI if Verus tests fail

  end-to-end-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
    
    - name: Install dependencies
      run: |
        uv sync --dev
    
    - name: Create test benchmark
      run: |
        mkdir -p test_benchmark
        cat > test_benchmark/simple.dfy << 'EOF'
        function method add(x: int, y: int): int
        {
            x + y
        }
        
        method testAdd()
        {
            assert add(2, 3) == 5;
        }
        EOF
    
    - name: Test CLI (dry run with mocked API)
      run: |
        # Test that CLI accepts parameters and validates them
        uv run python -m code2verus --help
        
        # Test with invalid benchmark (should fail gracefully)
        uv run python -m code2verus --benchmark "nonexistent/benchmark" --max-concurrent 1 || true
      env:
        ANTHROPIC_API_KEY: "fake_key_for_testing"

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
    
    - name: Install dependencies
      run: |
        uv sync --dev
    
    - name: Run security scan
      run: |
        # Install safety for dependency scanning
        uv add --dev safety
        uv run safety check
      continue-on-error: true  # Don't fail CI for security issues in dependencies

  documentation-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Check for required documentation
      run: |
        # Check that key documentation files exist
        test -f README.md
        test -f config.yml
        
        # Check that config.yml is valid YAML
        python -c "import yaml; yaml.safe_load(open('config.yml'))"
        
        # Check that pyproject.toml is valid
        python -c "import tomllib; tomllib.load(open('pyproject.toml', 'rb'))"

  performance-regression:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
    
    - name: Install dependencies
      run: |
        uv sync --dev
    
    - name: Run performance regression tests
      run: |
        uv run pytest tests/test_integration.py::TestPerformanceRegression -v
      env:
        ANTHROPIC_API_KEY: "fake_key_for_testing"
