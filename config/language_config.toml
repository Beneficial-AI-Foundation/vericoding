# Language-specific configuration for spec_to_code.py
# This file contains paths and settings for each supported language

[dafny]
name = "Dafny"
file_extension = ".yaml"
output_extension = ".dfy"
tool_path_env = "DAFNY_PATH"
default_tool_path = "dafny"
prompts_file = "prompts.yaml"

# Verification command patterns
verify_command = ["{tool_path}", "verify", "{file_path}"]
compile_check_command = ["{tool_path}", "resolve", "--allow-warnings", "{file_path}"]

# Code extraction patterns
code_block_patterns = [
    "dafny",
    "dfy"
]

# Language-specific keywords for code detection
keywords = [
    "method ",
    "function ",
    "predicate ",
    "lemma ",
    "requires",
    "ensures",
    "invariant",
    "decreases",
    "ATOM(",
    "opaque",
    "module ",
    "datatype ",
    "class "
]




[lean]
name = "Lean"
file_extension = ".lean"
output_extension = ".lean"
tool_path_env = "LAKE_PATH"
default_tool_path = "lake"
prompts_file = "prompts_spec.yaml"

# Verification command patterns
verify_command = ["lake", "build", "{file_path}"]
compile_check_command = ["lake", "build", "{file_path}"]

# Code extraction patterns
code_block_patterns = [
    "lean",
    "lean4"
]

# Language-specific keywords for code detection
keywords = [
    "theorem ",
    "lemma ",
    "def ",
    "example ",
    "axiom ",
    "structure ",
    "inductive ",
    "class ",
    "instance ",
    "where",
    "match",
    "sorry",
    "omit",
    "admit",
    ":=",
    "∀",
    "∃",
    "→",
    "↔"
]



[verus]
name = "Verus"
file_extension = ".yaml"
output_extension = ".rs"
tool_path_env = "VERUS_PATH"
default_tool_path = "verus"
prompts_file = "prompts.yaml"

# Verification command patterns
verify_command = ["{tool_path}", "{file_path}"]
compile_check_command = ["{tool_path}", "--no-verify", "{file_path}"]

# Code extraction patterns
code_block_patterns = [
    "rust",
    "verus",
    "rs"
]

# Language-specific keywords for code detection
keywords = [
    "use vstd::",
    "use builtin",
    "fn main()",
    "verus!",
    "fn ",
    "spec fn ",
    "proof fn ",
    "requires",
    "ensures",
    "invariant",
    "decreases",
    "proof ",
    "exec ",
    "closed spec fn",
    "open spec fn",
    "pub fn",
    "pub spec fn",
    "pub proof fn"
]





[common]
# Common error patterns across all languages
common_compilation_errors = [
    "error:",
    "compilation error",
    "syntax error",
    "parse error",
    "type error",
    "cannot find",
    "unresolved",
    "undeclared",
    "undefined",
    "mismatched types",
    "expected",
    "found",
    "invalid",
    "unexpected token",
    "unexpected character",
    "missing",
    "duplicate",
    "already defined",
    "conflicting",
    "incompatible"
]
