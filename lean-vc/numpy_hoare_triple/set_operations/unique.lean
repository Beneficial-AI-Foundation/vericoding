import Std.Do.Triple
import Std.Tactic.Do

open Std.Do

/-!
{
  "name": "numpy.unique",
  "category": "Unique operations",
  "description": "Find the unique elements of an array",
  "url": "https://numpy.org/doc/stable/reference/generated/numpy.unique.html",
  "doc": "Find the unique elements of an array.\n\nReturns the sorted unique elements of an array. There are three optional\noutputs in addition to the unique elements:\n\n* the indices of the input array that give the unique values\n* the indices of the unique array that reconstruct the input array\n* the number of times each unique value comes up in the input array\n\nParameters\n----------\nar : array_like\n    Input array. Unless `axis` is specified, this will be flattened if it\n    is not already 1-D.\nreturn_index : bool, optional\n    If True, also return the indices of `ar` (along the specified axis,\n    if provided, or in the flattened array) that result in the unique array.\nreturn_inverse : bool, optional\n    If True, also return the indices of the unique array (for the specified\n    axis, if provided) that can be used to reconstruct `ar`.\nreturn_counts : bool, optional\n    If True, also return the number of times each unique item appears\n    in `ar`.\naxis : int or None, optional\n    The axis to operate on. If None, `ar` will be flattened. If an integer,\n    the subarrays indexed by the given axis will be flattened and treated\n    as the elements of a 1-D array with the dimension of the given axis,\n    see the notes for more details.  Object arrays or structured arrays\n    that contain objects are not supported if the `axis` kwarg is used. The\n    default is None.\n\n    .. versionadded:: 1.13.0\n\nequal_nan : bool, optional\n    If True, collapses multiple NaN values in the return array into one.\n\n    .. versionadded:: 1.24\n\nReturns\n-------\nunique : ndarray\n    The sorted unique values.\nunique_indices : ndarray, optional\n    The indices of the first occurrences of the unique values in the\n    original array. Only provided if `return_index` is True.\nunique_inverse : ndarray, optional\n    The indices to reconstruct the original array from the\n    unique array. Only provided if `return_inverse` is True.\nunique_counts : ndarray, optional\n    The number of times each of the unique values comes up in the\n    original array. Only provided if `return_counts` is True.\n\n    .. versionadded:: 1.9.0",
  "code": "def unique(ar, return_index=False, return_inverse=False,\n           return_counts=False, axis=None, *, equal_nan=True):\n    \"\"\"\n    Find the unique elements of an array.\n\n    Returns the sorted unique elements of an array. There are three optional\n    outputs in addition to the unique elements:\n\n    * the indices of the input array that give the unique values\n    * the indices of the unique array that reconstruct the input array\n    * the number of times each unique value comes up in the input array\n\n    Parameters\n    ----------\n    ar : array_like\n        Input array. Unless `axis` is specified, this will be flattened if it\n        is not already 1-D.\n    return_index : bool, optional\n        If True, also return the indices of `ar` (along the specified axis,\n        if provided, or in the flattened array) that result in the unique array.\n    return_inverse : bool, optional\n        If True, also return the indices of the unique array (for the specified\n        axis, if provided) that can be used to reconstruct `ar`.\n    return_counts : bool, optional\n        If True, also return the number of times each unique item appears\n        in `ar`.\n    axis : int or None, optional\n        The axis to operate on. If None, `ar` will be flattened. If an integer,\n        the subarrays indexed by the given axis will be flattened and treated\n        as the elements of a 1-D array with the dimension of the given axis,\n        see the notes for more details.  Object arrays or structured arrays\n        that contain objects are not supported if the `axis` kwarg is used. The\n        default is None.\n\n        .. versionadded:: 1.13.0\n\n    equal_nan : bool, optional\n        If True, collapses multiple NaN values in the return array into one.\n\n        .. versionadded:: 1.24\n\n    Returns\n    -------\n    unique : ndarray\n        The sorted unique values.\n    unique_indices : ndarray, optional\n        The indices of the first occurrences of the unique values in the\n        original array. Only provided if `return_index` is True.\n    unique_inverse : ndarray, optional\n        The indices to reconstruct the original array from the\n        unique array. Only provided if `return_inverse` is True.\n    unique_counts : ndarray, optional\n        The number of times each of the unique values comes up in the\n        original array. Only provided if `return_counts` is True.\n\n        .. versionadded:: 1.9.0\n\n    See Also\n    --------\n    repeat : Repeat elements of an array.\n\n    Notes\n    -----\n    When an axis is specified the subarrays indexed by the axis are sorted.\n    This is done by making the specified axis the first dimension of the array\n    (move the axis to the first dimension to keep the order of the other axes)\n    and then flattening the subarrays in C order. The flattened subarrays are\n    then viewed as a structured type with each element given a label, with the\n    effect that we end up with a 1-D array of structured types that can be\n    treated in the same way as any other 1-D array. The result is that the\n    flattened subarrays are sorted in lexicographic order starting with the\n    first element.\n\n    .. versionchanged: 1.21\n        If nan values are in the input array, a single nan is put\n        to the end of the sorted unique values.\n\n        Also for complex arrays all NaN values are considered equivalent\n        (no matter whether the NaN is in the real or imaginary part).\n        As the representant for the returned array the smallest one in the\n        lexicographical order is chosen - see np.sort for how the lexicographical\n        order is defined for complex arrays.\n\n    .. versionchanged: 2.0\n        For multi-dimensional inputs, ``unique_inverse`` is reshaped\n        such that the input can be reconstructed using\n        ``np.take(unique, unique_inverse, axis=axis)``. The result is\n        now not 1-dimensional when ``axis=None``.\n\n        Note that in NumPy 2.0.0 a higher dimensional array was returned also\n        when ``axis`` was not ``None``.  This was reverted, but\n        ``inverse.reshape(-1)`` can be used to ensure compatibility with both\n        versions.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> np.unique([1, 1, 2, 2, 3, 3])\n    array([1, 2, 3])\n    >>> a = np.array([[1, 1], [2, 3]])\n    >>> np.unique(a)\n    array([1, 2, 3])\n\n    Return the unique rows of a 2D array\n\n    >>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])\n    >>> np.unique(a, axis=0)\n    array([[1, 0, 0], [2, 3, 4]])\n\n    Return the indices of the original array that give the unique values:\n\n    >>> a = np.array(['a', 'b', 'b', 'c', 'a'])\n    >>> u, indices = np.unique(a, return_index=True)\n    >>> u\n    array(['a', 'b', 'c'], dtype='<U1')\n    >>> indices\n    array([0, 1, 3])\n    >>> a[indices]\n    array(['a', 'b', 'c'], dtype='<U1')\n\n    Reconstruct the input array from the unique values and inverse:\n\n    >>> a = np.array([1, 2, 6, 4, 2, 3, 2])\n    >>> u, indices = np.unique(a, return_inverse=True)\n    >>> u\n    array([1, 2, 3, 4, 6])\n    >>> indices\n    array([0, 1, 4, 3, 1, 2, 1])\n    >>> u[indices]\n    array([1, 2, 6, 4, 2, 3, 2])\n\n    Reconstruct the input values from the unique values and counts:\n\n    >>> a = np.array([1, 2, 6, 4, 2, 3, 2])\n    >>> values, counts = np.unique(a, return_counts=True)\n    >>> values\n    array([1, 2, 3, 4, 6])\n    >>> counts\n    array([1, 3, 1, 1, 1])\n    >>> np.repeat(values, counts)\n    array([1, 2, 2, 2, 3, 4, 6])    # original order not preserved\n\n    \"\"\"\n    ar = np.asanyarray(ar)\n    if axis is None:\n        ret = _unique1d(ar, return_index, return_inverse, return_counts, \n                        equal_nan=equal_nan, inverse_shape=ar.shape, axis=None)\n        return _unpack_tuple(ret)\n\n    # axis was specified and not None\n    try:\n        ar = np.moveaxis(ar, axis, 0)\n    except np.exceptions.AxisError:\n        # this removes the \"axis1\" or \"axis2\" prefix from the error message\n        raise np.exceptions.AxisError(axis, ar.ndim) from None\n    inverse_shape = [1] * ar.ndim\n    inverse_shape[axis] = ar.shape[0]\n\n    # Must reshape to a contiguous 2D array for this to work...\n    orig_shape, orig_dtype = ar.shape, ar.dtype\n    ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))\n    ar = np.ascontiguousarray(ar)\n    dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]\n\n    # At this point, `ar` has shape `(n, m)`, and `dtype` is a structured\n    # data type with `m` fields where each field has the data type of `ar`.\n    # In the following, we create the array `consolidated`, which has\n    # shape `(n,)` with data type `dtype`.\n    try:\n        if ar.shape[1] > 0:\n            consolidated = ar.view(dtype)\n        else:\n            # If ar.shape[1] == 0, then dtype will be `np.dtype([])`, which is\n            # a data type with itemsize 0, and the call `ar.view(dtype)` will\n            # fail.  Instead, we'll use `np.empty` to explicitly create the\n            # array with shape `(len(ar),)`.  Because `dtype` in this case has\n            # itemsize 0, the total size of the result is still 0 bytes.\n            consolidated = np.empty(len(ar), dtype=dtype)\n    except TypeError as e:\n        # There's no good way to do this for object arrays, etc...\n        msg = 'The axis argument to unique is not supported for dtype {dt}'\n        raise TypeError(msg.format(dt=ar.dtype)) from e\n\n    def reshape_uniq(uniq):\n        n = len(uniq)\n        uniq = uniq.view(orig_dtype)\n        uniq = uniq.reshape(n, *orig_shape[1:])\n        uniq = np.moveaxis(uniq, 0, axis)\n        return uniq\n\n    output = _unique1d(consolidated, return_index,\n                       return_inverse, return_counts,\n                       equal_nan=equal_nan, inverse_shape=inverse_shape,\n                       axis=axis)\n    output = (reshape_uniq(output[0]),) + output[1:]\n    return _unpack_tuple(output)"
}
-/

/-- Find the unique elements of a vector and return them in sorted order -/
def unique {n : Nat} (arr : Vector Int n) : Id (List Int) :=
  sorry

/-- Specification: unique returns sorted unique elements from the input vector -/
theorem unique_spec {n : Nat} (arr : Vector Int n) :
    ⦃⌜True⌝⦄
    unique arr
    ⦃⇓result => ⌜(∀ i j : Nat, i < j → j < result.length → result[i]? < result[j]?) ∧ 
                  (∀ i : Nat, i < result.length → ∃ j : Fin n, result[i]? = some (arr.get j)) ∧
                  (∀ i j : Nat, i < result.length → j < result.length → i ≠ j → result[i]? ≠ result[j]?) ∧
                  (∀ i : Fin n, ∃ j : Nat, j < result.length ∧ some (arr.get i) = result[j]?)⌝⦄ := by
  sorry