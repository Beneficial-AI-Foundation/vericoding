/-!
{
  "name": "numpy.testing.assert_array_less",
  "category": "Assertion Functions",
  "description": "Raises an AssertionError if two array_like objects are not ordered by less than",
  "url": "https://numpy.org/doc/stable/reference/generated/numpy.testing.assert_array_less.html",
  "doc": "Raises an AssertionError if two array_like objects are not ordered by less than.\n\nGiven two array_like objects, check that the shape is equal and all elements of the first object are strictly less than those of the second object. An exception is raised at shape mismatch or when values are incorrectly ordered. Shape mismatch does not raise if an object has zero dimension.\n\nIn contrast to the standard usage in numpy, NaNs are compared, no assertion is raised if both objects have NaNs in the same positions.",
  "code": "def assert_array_less(x, y, err_msg='', verbose=True, *, strict=False):\n    \"\"\"\n    Raises an AssertionError if two array_like objects are not ordered by less\n    than.\n\n    Given two array_like objects, check that the shape is equal and all\n    elements of the first object are less than those of the second object.\n    An exception is raised at shape mismatch or incorrectly ordered values.\n    Shape mismatch does not raise if an object has zero dimension. In contrast\n    to the standard usage in numpy, NaNs are compared, no assertion is raised\n    if both objects have NaNs in the same positions.\n\n    Parameters\n    ----------\n    x : array_like\n      The smaller object to check.\n    y : array_like\n      The larger object to compare.\n    err_msg : str, optional\n        The error message to be printed in case of failure.\n    verbose : bool, optional\n        If True, the conflicting values are appended to the error message.\n    strict : bool, optional\n        If True, raise an AssertionError when the shape of \`\`x\`\` and \`\`y\`\`\n        don't match (in addition to the case when \`\`x\`\` is not less than\n        \`\`y\`\` elementwise). Otherwise, this function will perform\n        comparison on all pairs of elements that can be\n        broadcast from \`\`x\`\` and \`\`y\`\`.\n\n        .. versionadded:: 2.0.0\n\n    Raises\n    ------\n    AssertionError\n        If x is not strictly smaller than y, element-wise.\n\n    See Also\n    --------\n    assert_array_equal: tests objects for equality\n    assert_array_almost_equal: test objects for equality up to precision\n\n    Examples\n    --------\n    >>> np.testing.assert_array_less([1.0, 1.0, np.nan], [1.1, 2.0, np.nan])\n    >>> np.testing.assert_array_less([1.0, 1.0, np.nan], [1, 2.0, np.nan])\n    Traceback (most recent call last):\n        ...\n    AssertionError:\n    Arrays are not less-ordered\n    <BLANKLINE>\n    Mismatched elements: 1 / 3 (33.3%)\n    Max absolute difference among violations: 1.\n    Max relative difference among violations: 0.5\n     ACTUAL: array([ 1.,  1., nan])\n     DESIRED: array([ 1.,  2., nan])\n\n    >>> np.testing.assert_array_less([1.0, 4.0], 3)\n    Traceback (most recent call last):\n        ...\n    AssertionError:\n    Arrays are not less-ordered\n    <BLANKLINE>\n    Mismatched elements: 1 / 2 (50%)\n    Max absolute difference among violations: 1.\n    Max relative difference among violations: 0.33333333\n     ACTUAL: array([1., 4.])\n     DESIRED: array(3)\n\n    >>> np.testing.assert_array_less([1.0, 2.0, 3.0], [4])\n    Traceback (most recent call last):\n        ...\n    AssertionError:\n    Arrays are not less-ordered\n    <BLANKLINE>\n    (shapes (3,), (1,) mismatch)\n     ACTUAL: array([1., 2., 3.])\n     DESIRED: array([4])\n\n    When \`\`strict\`\` is True, the \`\`x\`\` and \`\`y\`\` arrays must have the same\n    shape:\n\n    >>> np.testing.assert_array_less([1.0, 2.0, 3.0], [4], strict=True)\n    Traceback (most recent call last):\n        ...\n    AssertionError:\n    Arrays are not less-ordered\n    <BLANKLINE>\n    (shapes (3,), (1,) mismatch)\n     ACTUAL: array([1., 2., 3.])\n     DESIRED: array([4])\n\n    The \`\`strict\`\` parameter also ensures that the array data types match:\n\n    >>> x = np.array([1, 2, 3])\n    >>> y = np.array([1., 2., 3.])\n    >>> np.testing.assert_array_less(x, y, strict=True)\n    Traceback (most recent call last):\n        ...\n    AssertionError:\n    Arrays are not less-ordered\n    <BLANKLINE>\n    (dtypes int64, float64 mismatch)\n     ACTUAL: array([1, 2, 3])\n     DESIRED: array([1., 2., 3.])\n\n    \"\"\"\n    __tracebackhide__ = True  # Hide traceback for py.test\n    assert_array_compare(operator.__lt__, x, y, err_msg=err_msg,\n                         verbose=verbose,\n                         header='Arrays are not less-ordered',\n                         equal_inf=False, strict=strict)"
}
-/

-- TODO: Implement assert_array_less
