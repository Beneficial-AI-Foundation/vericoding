{
  "skeleton": "// H\u00f6fundur spurningar:  Snorri Agnarsson, snorri@hi.is\n// Permalink spurningar: https://rise4fun.com/Dafny/GW7a\n\n// H\u00f6fundur lausnar:     Alexander Gu\u00f0mundsson\n// Permalink lausnar:    https://www.rise4fun.com/Dafny/JPGct\n\n// Kl\u00e1ri\u00f0 a\u00f0 forrita f\u00f6llin tv\u00f6.\n\n//ATOM_PLACEHOLDER_Partition+post;\n    ensures forall z | z in pre :: z <= p;\n    ensures forall z | z in post :: z >= p;\n{\n    p :| p in m;\n    var m' := m;\n    m' := m' - multiset{p};\n    pre := multiset{};\n    post := multiset{};\n    while m' != multiset{}\n\n    {\n        var temp :| temp in m';\n        m' := m' - multiset{temp};\n        if temp <= p\n        {\n            pre := pre + multiset{temp};\n        }\n        else\n        {\n            post := post + multiset{temp};\n        }\n    }\n    return pre,p,post;\n        \n}\n\n    \n\n\n\n\n\n//ATOM_PLACEHOLDER_QuickSelect+post;\n    ensures |pre| == k;\n    ensures forall z | z in pre :: z <= kth;\n    ensures forall z | z in post :: z >= kth;\n{\n    pre,kth,post := Partition(m);\n    if |pre| != k\n    {\n        if k > |pre|\n        {\n        \n            var pre',p,post' := QuickSelect(post,k-|pre| - 1);\n            pre := pre + multiset{kth} + pre';\n            post := post - pre' - multiset{p};\n            kth := p;\n\n        }\n        else if k < |pre|\n        {\n            var pre',p,post' := QuickSelect(pre,k);\n            pre := pre - multiset{p} - post';\n            post := post + multiset{kth} + post';\n            kth := p;\n\n        }\n    }\n    else{\n        return pre,kth,post;\n    } \n}\n+post;\n    ensures |pre| == k;\n    ensures forall z | z in pre :: z <= kth;\n    ensures forall z | z in post :: z >= kth;\n{\n    pre,kth,post := Partition(m);\n    if |pre| != k\n    {\n        if k > |pre|\n        {\n        \n            var pre',p,post' := QuickSelect(post,k-|pre| - 1);\n            pre := pre + multiset{kth} + pre';\n            post := post - pre' - multiset{p};\n            kth := p;\n\n        }\n        else if k < |pre|\n        {\n            var pre',p,post' := QuickSelect(pre,k);\n            pre := pre - multiset{p} - post';\n            post := post + multiset{kth} + post';\n            kth := p;\n\n        }\n    }\n    else{\n        return pre,kth,post;\n    } \n}\n",
  "atoms": {
    "Partition": [
      [],
      "// SPEC \n// H\u00f6fundur spurningar:  Snorri Agnarsson, snorri@hi.is\n// Permalink spurningar: https://rise4fun.com/Dafny/GW7a\n\n// H\u00f6fundur lausnar:     Alexander Gu\u00f0mundsson\n// Permalink lausnar:    https://www.rise4fun.com/Dafny/JPGct\n\n// Kl\u00e1ri\u00f0 a\u00f0 forrita f\u00f6llin tv\u00f6.\n\nmethod Partition( m: multiset<int> )\n        returns( pre: multiset<int>, p: int, post: multiset<int> )\n    requires |m| > 0;\n    ensures p in m;\n    ensures m == pre+multiset{\n}\n    ensures forall z | z in pre :: z <= p;\n    ensures forall z | z in post :: z >= p;\n{\n}\n",
      "method"
    ],
    "QuickSelect": [
      [],
      "// SPEC \n\n    \n\n\n\n\n\nmethod QuickSelect( m: multiset<int>, k: int )\n        returns( pre: multiset<int>, kth: int, post: multiset<int> )\n    requires 0 <= k < |m|;\n    ensures kth in m;\n    ensures m == pre+multiset{\n}\n    ensures |pre| == k;\n    ensures forall z | z in pre :: z <= kth;\n    ensures forall z | z in post :: z >= kth;\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_Partition": "Partition",
    "//ATOM_PLACEHOLDER_QuickSelect": "QuickSelect"
  }
}