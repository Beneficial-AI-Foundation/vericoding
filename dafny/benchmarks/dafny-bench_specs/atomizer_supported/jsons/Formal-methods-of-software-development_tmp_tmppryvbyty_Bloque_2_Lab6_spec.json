{
  "skeleton": "/*predicate palindrome<T(==)> (s:seq<T>)\n{\n    forall i:: 0<=i<|s| ==> s[i] == s[|s|-i-1]\n}\n*/\n// SUM OF A SEQUENCE OF INTEGERS\n//ATOM_PLACEHOLDER_sum\n\n/*\n//ATOM_PLACEHOLDER_vector_Sum\n\n// Structural Induction on Sequences\n//ATOM_PLACEHOLDER_left_sum_Lemma\n\n// MAXIMUM OF A SEQUENCE\n//ATOM_PLACEHOLDER_maxSeq\n\n// TODO: Hacer\n// Derivar formalmente un calculo incremental de j*j*j\n//ATOM_PLACEHOLDER_Cubes\n\n\n// REVERSE OF A SEQUENCE\n//ATOM_PLACEHOLDER_reverse\n\n//ATOM_PLACEHOLDER_seq2set\n\n\n//ATOM_PLACEHOLDER_seq2setRev_Lemma\n\n\n//ATOM_PLACEHOLDER_concat_seq2set_Lemma\n\n\n// REVERSE IS ITS OWN INVERSE\n\n//ATOM_PLACEHOLDER_Rev_Lemma//ATOM_PLACEHOLDER_ItsOwnInverse_Lemma\n\n// SCALAR PRODUCT OF TWO VECTORS OF INTEGER\n//ATOM_PLACEHOLDER_scalar_product\n\n\n//ATOM_PLACEHOLDER_scalar_product_Lemma\n\n// MULTISETS\n\n//ATOM_PLACEHOLDER_multiplicity_examples\n\n// REVERSE HAS THE SAME MULTISET \n\n//ATOM_PLACEHOLDER_seqMultiset_Lemma\n*/\n//ATOM_PLACEHOLDER_empty_Lemma \nensures r == []\n{\n\tif r != []\t{\n\t}\n}\n\n//ATOM_PLACEHOLDER_elem_Lemma//ATOM_PLACEHOLDER_sumElems_Lemma\n\n",
  "atoms": {
    "sum": [
      [],
      "// ATOM \n// SUM OF A SEQUENCE OF INTEGERS\nfunction sum(v: seq<int>): int \n{\n    if v==[] then 0\n    else if |v|==1 then v[0]\n    else v[0]+sum(v[1..])\n}\n\n/*\n",
      "function"
    ],
    "vector_Sum": [
      [
        "left_sum_Lemma",
        "sum"
      ],
      "// SPEC \nmethod vector_Sum(v:seq<int>) returns (x:int)\nensures x == sum(v) \n{\n}\n",
      "method"
    ],
    "left_sum_Lemma": [
      [
        "sum"
      ],
      "// ATOM \n\n// Structural Induction on Sequences\nlemma left_sum_Lemma(r:seq<int>, k:int)\nrequires 0 <= k < |r|\nensures sum(r[..k]) + r[k] == sum(r[..k+1]);\n{\n    if |r|==1 || k==0{\n    }\n    else {\n        left_sum_Lemma(r[1..], k);\n\n        calc {\n            sum(r[..k+1]);\n            sum(r[..k]) + [r[k]];\n        }\n    }\n}\n",
      "lemma"
    ],
    "maxSeq": [
      [],
      "// SPEC \n\n// MAXIMUM OF A SEQUENCE\nmethod maxSeq(v: seq<int>) returns (max:int)\nrequires |v| >= 1\nensures forall i :: 0 <= i < |v| ==> max >= v[i]\nensures max in v\n{\n}\n",
      "method"
    ],
    "Cubes": [
      [],
      "// SPEC \n\n// TODO: Hacer\n// Derivar formalmente un calculo incremental de j*j*j\nmethod Cubes (n:int) returns (s:seq<int>)\nrequires n >= 0\nensures |s| == n\nensures forall i:int :: 0 <= i < n ==> s[i] == i*i*i\n{\n}\n",
      "method"
    ],
    "reverse": [
      [],
      "// ATOM \n\n\n// REVERSE OF A SEQUENCE\nfunction reverse<T> (s:seq<T>):seq<T> \n{\n    if s==[] then []\n    else reverse(s[1..])+[s[0]]\n}\n",
      "function"
    ],
    "seq2set": [
      [],
      "// ATOM \n\nfunction seq2set<T> (s:seq<T>): set<T>\n{\n    if s==[] then {}\n    else {s[0]}+seq2set(s[1..])\n}\n",
      "function"
    ],
    "seq2setRev_Lemma": [
      [
        "concat_seq2set_Lemma",
        "seq2set",
        "reverse"
      ],
      "// ATOM \n\n\nlemma seq2setRev_Lemma<T> (s:seq<T>)\nensures seq2set(reverse(s)) == seq2set(s)\n{\n    if s==[]{}\n    else {\n        seq2setRev_Lemma(s[1..]);\n\n        calc {\n            seq2set(s);\n            seq2set([s[0]]+s[1..]);\n            {\n                concat_seq2set_Lemma([s[0]], s[1..]);\n            }\n            seq2set([s[0]]) + seq2set(s[1..]);\n            {\n                seq2setRev_Lemma(s[1..]);\n            }\n            seq2set([s[0]]) + seq2set(reverse(s[1..]));\n            seq2set(reverse(s[1..])) + seq2set([s[0]]); \n            {\n                concat_seq2set_Lemma(reverse(s[1..]), [s[0]]);\n            }\n            seq2set(reverse(s[1..]) + [s[0]]);\n            {\n            }\n            seq2set(reverse(s));\n        }\n    }\n}\n",
      "lemma"
    ],
    "concat_seq2set_Lemma": [
      [
        "seq2set"
      ],
      "// ATOM \n\n\nlemma concat_seq2set_Lemma<T>(s1:seq<T>,s2:seq<T>)\nensures seq2set(s1+s2) == seq2set(s1) + seq2set(s2)\n{\n    if s1==[]{\n    }\n    else {\n        concat_seq2set_Lemma(s1[1..], s2);\n\n        calc{\n            seq2set(s1) + seq2set(s2);\n            seq2set([s1[0]]+s1[1..]) + seq2set(s2);\n            seq2set([s1[0]]) + seq2set(s1[1..]) + seq2set(s2);\n            {\n                concat_seq2set_Lemma(s1[1..], s2);\n            }\n            seq2set([s1[0]]) + seq2set(s1[1..]+s2);\n            {\n            }\n            seq2set([s1[0]]) + seq2set((s1+s2)[1..]);\n            {\n                // assert seq2set([s1[0]]) + seq2set((s1+s2)[1..]) == seq2set(s1+s2);\n                var ls:= s1+s2;\n                calc {\n                    seq2set([s1[0]]) + seq2set((s1+s2)[1..]);\n                    seq2set([ls[0]])+ seq2set(ls[1..]);\n                    seq2set([ls[0]]+ ls[1..]);\n                    seq2set(ls);\n                    seq2set(s1+s2);\n                }\n            }\n            seq2set(s1+s2);\n        }\n    }\n}\n",
      "lemma"
    ],
    "Rev_Lemma": [
      [],
      "// ATOM \n\n\n// REVERSE IS ITS OWN INVERSE\n\nlemma Rev_Lemma<T(==)>(s:seq<T>)\n",
      "lemma"
    ],
    "ItsOwnInverse_Lemma": [
      [
        "reverse"
      ],
      "// ATOM \n//ensures forall i :: 0 <= i < |s| ==> s[i] == reverse(s)[|s|-1-i]\n\nlemma ItsOwnInverse_Lemma<T> (s:seq<T>)\nensures s == reverse(reverse(s))\n{\n    if s==[]{}\n    else{\n        ItsOwnInverse_Lemma(s[1..]);\n\n        calc {\n            reverse(reverse(s));\n            reverse(reverse(s[1..])+[s[0]]);\n            reverse(reverse([s[0]]+s[1..]));\n            {\n            }\n            reverse(reverse(s[1..]) + [s[0]]);\n            {\n                // TODO: Demostrar este assume\n                assume reverse(reverse(s[1..]) + [s[0]]) == [s[0]] + reverse(reverse(s[1..]));\n            }\n            [s[0]] + reverse(reverse(s[1..]));\n            {\n                ItsOwnInverse_Lemma(s[1..]);\n            }\n            [s[0]]+s[1..];\n            s;\n        }\n    }\n}\n",
      "lemma"
    ],
    "scalar_product": [
      [],
      "// ATOM \n\n// SCALAR PRODUCT OF TWO VECTORS OF INTEGER\nfunction scalar_product (v1:seq<int>, v2:seq<int>):int\nrequires |v1| == |v2|\n{\n    if v1 == [] then 0 else v1[0]*v2[0] + scalar_product(v1[1..],v2[1..])\n}\n",
      "function"
    ],
    "scalar_product_Lemma": [
      [
        "scalar_product"
      ],
      "// ATOM \n\n\nlemma scalar_product_Lemma (v1:seq<int>, v2:seq<int>)\nrequires |v1| == |v2| > 0\nensures scalar_product(v1,v2) == scalar_product(v1[..|v1|-1],v2[..|v2|-1]) + v1[|v1|-1] * v2[|v2|-1]\n{\n    // INDUCCION EN LA LONGITUD DE V1\n    if |v1| == 0 && |v2| == 0 {}\n    else if |v1| == 1 {}\n    else {\n        // Se crean estas variables para simplificar las operaciones\n        var v1r:= v1[1..];\n        var v2r:= v2[1..];\n        var t1:= |v1[1..]|-1;\n        var t2:= |v2[1..]|-1;\n\n        // Se realiza la induccion utilizando las variables\n        scalar_product_Lemma(v1r, v2r);\n                scalar_product(v1r[..t1],v2r[..t2]) + v1r[t1] * v2r[t2]; //HI\n        \n        // Se demuestra que la propiedad se mantiene\n        calc{\n            scalar_product(v1,v2);\n            v1[0]*v2[0] + scalar_product(v1r, v2r);\n            v1[0]*v2[0] + scalar_product(v1r[..t1],v2r[..t2]) + v1r[t1] * v2r[t2];\n            {\n                scalar_product_Lemma(v1r, v2r);\n                        scalar_product(v1r[..t1],v2r[..t2]) + v1r[t1] * v2r[t2]; //HI\n            }\n            v1[0]*v2[0] + scalar_product(v1r,v2r);\n            v1[0]*v2[0] + scalar_product(v1[1..],v2[1..]);\n            scalar_product(v1,v2);\n        }\n    }\n}\n",
      "lemma"
    ],
    "multiplicity_examples": [
      [],
      "// SPEC \n\n// MULTISETS\n\nmethod multiplicity_examples<T> ()\n{\n}\n",
      "method"
    ],
    "seqMultiset_Lemma": [
      [
        "reverse"
      ],
      "// ATOM \n\n// REVERSE HAS THE SAME MULTISET \n\nlemma seqMultiset_Lemma<T> (s:seq<T>)\nensures multiset(reverse(s)) == multiset(s)\n{\n    if s==[]{}\n    else {\n        seqMultiset_Lemma(s[1..]);\n\n        calc {\n            multiset(reverse(s));\n            multiset(reverse(s[1..]) + [s[0]]);\n            multiset(reverse(s[1..])) + multiset{[s[0]]};\n            multiset(s[1..]) + multiset{[s[0]]};\n            multiset(s);\n        }\n    }\n}\n*/\n",
      "lemma"
    ],
    "empty_Lemma": [
      [],
      "// ATOM \nlemma empty_Lemma<T> (r:seq<T>)\nrequires  multiset(r) == multiset{} \nensures r == []\n{\n\tif r != []\t{\n\t}\n}\n",
      "lemma"
    ],
    "elem_Lemma": [
      [],
      "// ATOM \n\nlemma elem_Lemma<T> (s:seq<T>,r:seq<T>)\nrequires s != [] && multiset(s) == multiset(r)\nensures exists i :: 0 <= i < |r| && r[i] == s[0] && multiset(s[1..]) == multiset(r[..i]+r[i+1..]);\n",
      "lemma"
    ],
    "sumElems_Lemma": [
      [
        "empty_Lemma",
        "sum",
        "elem_Lemma"
      ],
      "// ATOM \n\n// SEQUENCES WITH EQUAL MULTISETS HAVE EQUAL SUMS\n\nlemma sumElems_Lemma(s:seq<int>, r:seq<int>)   \nrequires multiset(s) == multiset(r)\nensures sum(s) == sum(r)\n{\n    if s==[]{\n        empty_Lemma(r);\n    }\n    else {\n        // Con este lema demuestro que el elemento que le quito a s tambien se lo quito a r y de esta manera\n        // poder hacer la induccion\n        elem_Lemma(s,r);\n\t\tvar i :| 0 <= i < |r| && r[i] == s[0] && multiset(s[1..]) == multiset(r[..i]+r[i+1..]);\n\t\tsumElems_Lemma(s[1..], r[..i]+r[i+1..]);\n        \n        // Hago la llamada recursiva\n        sumElems_Lemma(s[1..], r[..i]+r[i+1..]);\n\n        calc {\n            sum(s);\n            s[0]+sum(s[1..]);\n            {\n                sumElems_Lemma(s[1..], r[..i]+r[i+1..]);\n            }\n            s[0]+sum(r[..i]+r[i+1..]);\n            {\n            }\n            r[i]+sum(r[..i]+r[i+1..]);\n            {\n                // TODO: No consigo acertarlo\n                assume r[i]+sum(r[..i]+r[i+1..]) == sum([r[i]]+r[..i] + r[i+1..]) == sum(r);\n            }\n            sum(r);\n        }\n    }\n}\n",
      "lemma"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_sum": "sum",
    "//ATOM_PLACEHOLDER_vector_Sum": "vector_Sum",
    "//ATOM_PLACEHOLDER_left_sum_Lemma": "left_sum_Lemma",
    "//ATOM_PLACEHOLDER_maxSeq": "maxSeq",
    "//ATOM_PLACEHOLDER_Cubes": "Cubes",
    "//ATOM_PLACEHOLDER_reverse": "reverse",
    "//ATOM_PLACEHOLDER_seq2set": "seq2set",
    "//ATOM_PLACEHOLDER_seq2setRev_Lemma": "seq2setRev_Lemma",
    "//ATOM_PLACEHOLDER_concat_seq2set_Lemma": "concat_seq2set_Lemma",
    "//ATOM_PLACEHOLDER_Rev_Lemma": "Rev_Lemma",
    "//ATOM_PLACEHOLDER_ItsOwnInverse_Lemma": "ItsOwnInverse_Lemma",
    "//ATOM_PLACEHOLDER_scalar_product": "scalar_product",
    "//ATOM_PLACEHOLDER_scalar_product_Lemma": "scalar_product_Lemma",
    "//ATOM_PLACEHOLDER_multiplicity_examples": "multiplicity_examples",
    "//ATOM_PLACEHOLDER_seqMultiset_Lemma": "seqMultiset_Lemma",
    "//ATOM_PLACEHOLDER_empty_Lemma": "empty_Lemma",
    "//ATOM_PLACEHOLDER_elem_Lemma": "elem_Lemma",
    "//ATOM_PLACEHOLDER_sumElems_Lemma": "sumElems_Lemma"
  }
}