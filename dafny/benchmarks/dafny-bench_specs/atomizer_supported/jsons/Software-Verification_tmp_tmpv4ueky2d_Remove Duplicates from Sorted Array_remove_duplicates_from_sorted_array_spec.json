{
  "skeleton": "//ATOM_PLACEHOLDER_remove_duplicates_from_sorted_array\n\n\n// Helper predicate\n//ATOM_PLACEHOLDER_is_sorted\n\n//ATOM_PLACEHOLDER_is_sorted_and_distinct\n\n\n\n",
  "atoms": {
    "remove_duplicates_from_sorted_array": [
      [
        "is_sorted",
        "is_sorted_and_distinct"
      ],
      "// SPEC \nmethod remove_duplicates_from_sorted_array(nums: seq<int>) returns (result: seq<int>) \n    requires is_sorted(nums)\n    requires 1 <= |nums| <= 30000\n    requires forall i :: 0 <= i < |nums| ==> -100 <= nums[i] <= 100\n    ensures is_sorted_and_distinct(result)\n    ensures forall i :: i in nums <==> i in result\n{\n}\n",
      "method"
    ],
    "is_sorted": [
      [],
      "// ATOM \n\n\n// Helper predicate\npredicate is_sorted(nums: seq<int>)\n{\n    forall i, j :: 0 <= i < j < |nums| ==> nums[i] <= nums[j]\n}\n",
      "predicate"
    ],
    "is_sorted_and_distinct": [
      [],
      "// ATOM \n\npredicate is_sorted_and_distinct(nums: seq<int>)\n{\n    forall i, j :: 0 <= i < j < |nums| ==> nums[i] < nums[j]\n}\n",
      "predicate"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_remove_duplicates_from_sorted_array": "remove_duplicates_from_sorted_array",
    "//ATOM_PLACEHOLDER_is_sorted": "is_sorted",
    "//ATOM_PLACEHOLDER_is_sorted_and_distinct": "is_sorted_and_distinct"
  }
}