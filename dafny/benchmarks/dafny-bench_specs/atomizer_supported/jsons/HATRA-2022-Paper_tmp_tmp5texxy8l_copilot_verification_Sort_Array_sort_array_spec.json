{
  "skeleton": "//ATOM_PLACEHOLDER_sortArray \n\n// Predicate to determine whether the list is sorted between [start, stop)\n//ATOM_PLACEHOLDER_sorted\n\n// Predicate to determine whether element arr[pivot] is a pivot point\n// Based on: https://github.com/stqam/dafny/blob/master/BubbleSort.dfy\n//ATOM_PLACEHOLDER_pivot\n\n\n\n",
  "atoms": {
    "sortArray": [
      [
        "sorted"
      ],
      "// SPEC \nmethod sortArray(arr: array<int>) returns (arr_sorted: array<int>)\n    // Requires array length to be between 0 and 10000\n    requires 0 <= arr.Length < 10000\n    // Ensuring the arry has been sorted\n    ensures sorted(arr_sorted, 0, arr_sorted.Length)\n    // Ensuring that we have not modified elements but have only changed their indices\n    ensures multiset(arr[..]) == multiset(arr_sorted[..])\n\n    // Modifies arr\n    modifies arr\n{\n}\n",
      "method"
    ],
    "sorted": [
      [],
      "// ATOM \n\n// Predicate to determine whether the list is sorted between [start, stop)\npredicate sorted(arr: array<int>, start: int, end: int)\nrequires 0 <= start <= end <= arr.Length\nreads arr\n{\n    forall i, j :: start <= i <= j < end ==> arr[i] <= arr[j]\n}\n",
      "predicate"
    ],
    "pivot": [
      [],
      "// ATOM \n\n// Predicate to determine whether element arr[pivot] is a pivot point\n// Based on: https://github.com/stqam/dafny/blob/master/BubbleSort.dfy\npredicate pivot(arr: array<int>, pivot: int)\nrequires 0 <= pivot <= arr.Length\nreads arr\n{\n    forall u, v :: 0 <= u < pivot < v < arr.Length ==> arr[u] <= arr[v]\n}\n",
      "predicate"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_sortArray": "sortArray",
    "//ATOM_PLACEHOLDER_sorted": "sorted",
    "//ATOM_PLACEHOLDER_pivot": "pivot"
  }
}