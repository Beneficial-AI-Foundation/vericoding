{
  "skeleton": "//ATOM_PLACEHOLDER_non_overlapping_intervals\n\n\n// Bubble Sort\n//ATOM_PLACEHOLDER_bubble_sort\n\n\n// Predicates for Bubble Sort\n//ATOM_PLACEHOLDER_sorted\n\n//ATOM_PLACEHOLDER_partitioned\n\n\n\n",
  "atoms": {
    "non_overlapping_intervals": [
      [
        "bubble_sort"
      ],
      "// SPEC \nmethod non_overlapping_intervals(intervals: array2<int>) returns (count: int)\n    modifies intervals\n    requires 1 <= intervals.Length0 <= 100000\n    requires intervals.Length1 == 2\n    requires forall i :: 0 <= i < intervals.Length0 ==> -50000 <= intervals[i, 0] <= 50000\n    requires forall i :: 0 <= i < intervals.Length0 ==> -50000 <= intervals[i, 1] <= 50000\n    // TODO: modify the ensures clause so that count is indeed equal to the minimum number of intervals we need to remove to make the rest of the intervals non-overlapping.\n    ensures count >= 0\n{\n}\n",
      "method"
    ],
    "bubble_sort": [
      [
        "sorted"
      ],
      "// SPEC \n\n\n// Bubble Sort\nmethod bubble_sort(a: array2<int>)\n    modifies a\n    requires a.Length1 == 2\n    ensures sorted(a, 0, a.Length0 - 1)\n{\n}\n",
      "method"
    ],
    "sorted": [
      [],
      "// ATOM \n\n\n// Predicates for Bubble Sort\npredicate sorted(a: array2<int>, l: int, u: int)\n    reads a\n    requires a.Length1 == 2\n{\n    forall i, j :: 0 <= l <= i <= j <= u < a.Length0 ==> a[i, 1] <= a[j, 1]\n}\n",
      "predicate"
    ],
    "partitioned": [
      [],
      "// ATOM \n\npredicate partitioned(a: array2<int>, i: int)\n    reads a\n    requires a.Length1 == 2\n{\n    forall k, k' :: 0 <= k <= i < k' < a.Length0 ==> a[k, 1] <= a[k', 1]\n}\n",
      "predicate"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_non_overlapping_intervals": "non_overlapping_intervals",
    "//ATOM_PLACEHOLDER_bubble_sort": "bubble_sort",
    "//ATOM_PLACEHOLDER_sorted": "sorted",
    "//ATOM_PLACEHOLDER_partitioned": "partitioned"
  }
}