{
  "skeleton": "\n//ATOM_PLACEHOLDER_random//ATOM_PLACEHOLDER_eqMultiset_t\n\n//ATOM_PLACEHOLDER_eqMultiset\n\n//ATOM_PLACEHOLDER_swap\n  \n//ATOM_PLACEHOLDER_getAllShuffledDataEntries\n\n//ATOM_PLACEHOLDER_set_of_seq\n\n//ATOM_PLACEHOLDER_in_set_of_seq//ATOM_PLACEHOLDER_subset_set_of_seq//ATOM_PLACEHOLDER_getRandomDataEntry\n\n\n\n",
  "atoms": {
    "random": [
      [],
      "// SPEC \n\nmethod random(a: int, b: int) returns (r: int)\n//  requires a <= b\n  ensures a <= b ==> a <= r <= b\n",
      "method"
    ],
    "eqMultiset_t": [
      [],
      "// ATOM \n\nlemma eqMultiset_t<T>(t: T, s1: seq<T>, s2: seq<T>)\n  requires multiset(s1) == multiset(s2)\n  ensures t in s1 <==> t in s2\n{\n  calc <==> {\n    t in s1;\n    t in multiset(s1);\n    // Not necessary:\n//    t in multiset(s2);\n//    t in s2;\n  }\n/*  \n  if (t in s1) {\n  }\n  else {\n  }\n*/\n}\n",
      "lemma"
    ],
    "eqMultiset": [
      [
        "eqMultiset_t"
      ],
      "// ATOM \n\nlemma eqMultiset<T>(s1: seq<T>, s2: seq<T>)\n  requires multiset(s1) == multiset(s2)\n  ensures forall t :: t in s1 <==> t in s2\n{\n  forall t {\n    eqMultiset_t(t, s1, s2);\n  }\n}\n",
      "lemma"
    ],
    "swap": [
      [],
      "// SPEC \n\nmethod swap<T>(a: array<T>, i: int, j: int)\n  // requires a != null\n  requires 0 <= i < a.Length && 0 <= j < a.Length\n  modifies a\n  ensures a[i] == old(a[j])\n  ensures a[j] == old(a[i])\n  ensures forall m :: 0 <= m < a.Length && m != i && m != j ==> a[m] == old(a[m])\n  ensures multiset(a[..]) == old(multiset(a[..]))\n{\n}\n",
      "method"
    ],
    "getAllShuffledDataEntries": [
      [
        "swap",
        "random"
      ],
      "// SPEC \n  \nmethod getAllShuffledDataEntries<T(0)>(m_dataEntries: array<T>) returns (result: array<T>)\n  // requires m_dataEntries != null\n  // ensures result != null\n  ensures result.Length == m_dataEntries.Length\n  ensures multiset(result[..]) == multiset(m_dataEntries[..])\n{\n}\n",
      "method"
    ],
    "set_of_seq": [
      [],
      "// ATOM \n\nfunction set_of_seq<T>(s: seq<T>): set<T>\n{\n  set x: T | x in s :: x\n}\n",
      "function"
    ],
    "in_set_of_seq": [
      [],
      "// ATOM \n\nlemma in_set_of_seq<T>(x: T, s: seq<T>)\n  ensures x in s <==> x in set_of_seq(s)\n",
      "lemma"
    ],
    "subset_set_of_seq": [
      [],
      "// ATOM \n\nlemma subset_set_of_seq<T>(s1: seq<T>, s2: seq<T>)\n  requires set_of_seq(s1) <= set_of_seq(s2)\n  ensures forall x :: x in s1 ==> x in s2\n",
      "lemma"
    ],
    "getRandomDataEntry": [
      [
        "set_of_seq",
        "random"
      ],
      "// SPEC \n  \nmethod getRandomDataEntry<T(==)>(m_workList: array<T>, avoidSet: seq<T>) returns (e: T)\n  requires m_workList.Length > 0\n//  ensures set_of_seq(avoidSet) < set_of_seq(m_workList[..]) ==> e !in avoidSet\n//  ensures avoidSet < m_workList[..] ==> e in m_workList[..]\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_random": "random",
    "//ATOM_PLACEHOLDER_eqMultiset_t": "eqMultiset_t",
    "//ATOM_PLACEHOLDER_eqMultiset": "eqMultiset",
    "//ATOM_PLACEHOLDER_swap": "swap",
    "//ATOM_PLACEHOLDER_getAllShuffledDataEntries": "getAllShuffledDataEntries",
    "//ATOM_PLACEHOLDER_set_of_seq": "set_of_seq",
    "//ATOM_PLACEHOLDER_in_set_of_seq": "in_set_of_seq",
    "//ATOM_PLACEHOLDER_subset_set_of_seq": "subset_set_of_seq",
    "//ATOM_PLACEHOLDER_getRandomDataEntry": "getRandomDataEntry"
  }
}