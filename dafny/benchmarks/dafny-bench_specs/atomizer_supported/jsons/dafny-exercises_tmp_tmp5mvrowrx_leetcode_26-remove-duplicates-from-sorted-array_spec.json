{
  "skeleton": "\n//ATOM_PLACEHOLDER_RemoveDuplicates\n\n//ATOM_PLACEHOLDER_Testing\n\n//ATOM_PLACEHOLDER_Main\n\n",
  "atoms": {
    "RemoveDuplicates": [
      [],
      "// SPEC \n\nmethod RemoveDuplicates(nums: array<int>) returns (num_length: int)\n  modifies nums\n  requires forall i, j | 0 <= i < j < nums.Length :: nums[i] <= nums[j]\n  ensures nums.Length == old(nums).Length\n  ensures 0 <= num_length <= nums.Length\n  ensures forall i, j | 0 <= i < j < num_length :: nums[i] != nums[j]\n  ensures forall i | 0 <= i < num_length :: nums[i] in old(nums[..])\n  ensures forall i | 0 <= i < nums.Length :: old(nums[i]) in nums[..num_length]\n{\n}\n",
      "method"
    ],
    "Testing": [
      [
        "RemoveDuplicates"
      ],
      "// SPEC \n\nmethod Testing() {\n}\n",
      "method"
    ],
    "Main": [
      [
        "Testing"
      ],
      "// SPEC \n\nmethod Main() {\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_RemoveDuplicates": "RemoveDuplicates",
    "//ATOM_PLACEHOLDER_Testing": "Testing",
    "//ATOM_PLACEHOLDER_Main": "Main"
  }
}