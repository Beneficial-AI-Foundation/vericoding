{
  "skeleton": "/* Here's a small but realistic setting where you could use Dafny.\n\n   The setting is that we're implementing an interval library that manages a\n   data structure with a low and a high value. It implements some computations\n   on intervals, and we want to make sure those are right.\n */\n\n// Interval is the Dafny model of the data structure itself. We're using `real`\n// here for the numbers; the specifics don't really matter, as long as we can\n// compare them with <.\n//ATOM_PLACEHOLDER_Interval//ATOM_PLACEHOLDER_contains\n\n// We also provide a way to check if an interval is empty.\n//ATOM_PLACEHOLDER_empty\n\n/* Now we can already do our first proof! Empty is a way to check if an interval\n * doesn't contain any numbers - let's prove that empty and contains agree with\n * each other. */\n\n//ATOM_PLACEHOLDER_empty_ok\n\n// min and max are just helper functions for the implementation\n//ATOM_PLACEHOLDER_min\n\n//ATOM_PLACEHOLDER_max\n\n/* The first complicated operation we expose is a function to intersect two\n * intervals. It's not so easy to think about whether this is correct - for\n * example, does it handle empty intervals correctly? Maybe two empty intervals\n * could intersect to a non-empty one? */\n\n//ATOM_PLACEHOLDER_intersect\n\n// This theorem proves that intersect does exactly what we wanted it to, using\n// `contains` as the specification.\n//ATOM_PLACEHOLDER_intersect_ok\n\n/* Next we'll define the union of intervals. This is more complicated because if\n * the intervals have no overlap, a single interval can't capture their union\n * exactly. */\n\n// Intersect gives us an easy way to define overlap, and we already know it\n// handles empty intervals correctly.\n//ATOM_PLACEHOLDER_overlap\n\n//ATOM_PLACEHOLDER_overlap_ok\n\n// We'll give this function a precondition so that it always does the right thing.\n//ATOM_PLACEHOLDER_union\n\n// We can prove union correct in much the same way as intersect, with a similar\n// specification, although notice that now we require that the intervals\n// overlap.\n//ATOM_PLACEHOLDER_union_ok\n\n// Though not used elsewhere here, if two intervals overlap its possible to show\n// that there's a common real contained in both of them. We also show off new\n// syntax: this lemma returns a value which is used in the postcondition, and\n// which the calling lemma can make use of.\n//ATOM_PLACEHOLDER_overlap_witness\n\n/* One extension you might try is adding is an operation to check if an interval\n * is contained in another and proving that correct. Or, try implementing a\n * similar library for 2D rectangles. */\n\n\n\n/* One extension you might try is adding is an operation to check if an interval\n * is contained in another and proving that correct. Or, try implementing a\n * similar library for 2D rectangles. */\n\n",
  "atoms": {
    "Interval": [
      [],
      "// ATOM \n\n\n// Interval is the Dafny model of the data structure itself. We're using `real`\n// here for the numbers; the specifics don't really matter, as long as we can\n// compare them with <.\ndatatype Interval = Interval(lo: real, hi: real)\n",
      "datatype"
    ],
    "contains": [
      [],
      "// ATOM \n\n// Contains is one of the core operations on intervals, both because we support\n// it in the API and because in some ways it defines what the interval means.\npredicate contains(i: Interval, r: real) {\n  i.lo <= r <= i.hi\n}\n",
      "predicate"
    ],
    "empty": [
      [],
      "// ATOM \n\n// We also provide a way to check if an interval is empty.\npredicate empty(i: Interval) {\n  i.lo > i.hi\n}\n\n/* Now we can already do our first proof! Empty is a way to check if an interval\n * doesn't contain any numbers - let's prove that empty and contains agree with\n * each other. */\n",
      "predicate"
    ],
    "empty_ok": [
      [
        "contains",
        "empty"
      ],
      "// ATOM \n\nlemma empty_ok(i: Interval)\n  // this is the sort of property that's easy to express logically but hard to test for\n  ensures empty(i) <==> !exists r :: contains(i, r)\n{\n  if empty(i) {\n  } else {\n  }\n}\n",
      "lemma"
    ],
    "min": [
      [],
      "// ATOM \n\n// min and max are just helper functions for the implementation\nfunction min(r1: real, r2: real): real {\n  if r1 < r2 then r1 else r2\n}\n",
      "function"
    ],
    "max": [
      [],
      "// ATOM \n\nfunction max(r1: real, r2: real): real {\n  if r1 > r2 then r1 else r2\n}\n\n/* The first complicated operation we expose is a function to intersect two\n * intervals. It's not so easy to think about whether this is correct - for\n * example, does it handle empty intervals correctly? Maybe two empty intervals\n * could intersect to a non-empty one? */\n",
      "function"
    ],
    "intersect": [
      [
        "Interval",
        "max",
        "min"
      ],
      "// ATOM \n\nfunction intersect(i1: Interval, i2: Interval): Interval {\n  Interval(max(i1.lo, i2.lo), min(i1.hi, i2.hi))\n}\n",
      "function"
    ],
    "intersect_ok": [
      [
        "contains",
        "intersect"
      ],
      "// ATOM \n\n// This theorem proves that intersect does exactly what we wanted it to, using\n// `contains` as the specification.\nlemma intersect_ok(i1: Interval, i2: Interval)\n  ensures forall r :: contains(intersect(i1, i2), r) <==> contains(i1, r) && contains(i2, r)\n{\n}\n\n/* Next we'll define the union of intervals. This is more complicated because if\n * the intervals have no overlap, a single interval can't capture their union\n * exactly. */\n",
      "lemma"
    ],
    "overlap": [
      [
        "empty",
        "intersect"
      ],
      "// ATOM \n\n// Intersect gives us an easy way to define overlap, and we already know it\n// handles empty intervals correctly.\npredicate overlap(i1: Interval, i2: Interval) {\n  !empty(intersect(i1, i2))\n}\n",
      "predicate"
    ],
    "overlap_ok": [
      [
        "contains",
        "overlap"
      ],
      "// ATOM \n\nlemma overlap_ok(i1: Interval, i2: Interval)\n  ensures overlap(i1, i2) <==> exists r :: contains(i1, r) && contains(i2, r)\n{\n  if overlap(i1, i2) {\n    if i1.lo >= i2.lo {\n    } else {\n    }\n  }\n}\n",
      "lemma"
    ],
    "union": [
      [
        "Interval",
        "min",
        "max",
        "overlap"
      ],
      "// ATOM \n\n// We'll give this function a precondition so that it always does the right thing.\nfunction union(i1: Interval, i2: Interval): Interval\n  requires overlap(i1, i2)\n{\n  Interval(min(i1.lo, i2.lo), max(i1.hi, i2.hi))\n}\n",
      "function"
    ],
    "union_ok": [
      [
        "contains",
        "union",
        "overlap"
      ],
      "// ATOM \n\n// We can prove union correct in much the same way as intersect, with a similar\n// specification, although notice that now we require that the intervals\n// overlap.\nlemma union_ok(i1: Interval, i2: Interval)\n  requires overlap(i1, i2)\n  ensures forall r :: contains(union(i1, i2), r) <==> contains(i1, r) || contains(i2, r)\n{\n}\n",
      "lemma"
    ],
    "overlap_witness": [
      [
        "contains",
        "overlap"
      ],
      "// ATOM \n\n// Though not used elsewhere here, if two intervals overlap its possible to show\n// that there's a common real contained in both of them. We also show off new\n// syntax: this lemma returns a value which is used in the postcondition, and\n// which the calling lemma can make use of.\nlemma overlap_witness(i1: Interval, i2: Interval) returns (r: real)\n  requires overlap(i1, i2)\n  ensures contains(i1, r) && contains(i2, r)\n{\n  if i1.lo >= i2.lo {\n    r := i1.lo;\n  } else {\n    r := i2.lo;\n  }\n}\n\n/* One extension you might try is adding is an operation to check if an interval\n * is contained in another and proving that correct. Or, try implementing a\n * similar library for 2D rectangles. */\n",
      "lemma"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_Interval": "Interval",
    "//ATOM_PLACEHOLDER_contains": "contains",
    "//ATOM_PLACEHOLDER_empty": "empty",
    "//ATOM_PLACEHOLDER_empty_ok": "empty_ok",
    "//ATOM_PLACEHOLDER_min": "min",
    "//ATOM_PLACEHOLDER_max": "max",
    "//ATOM_PLACEHOLDER_intersect": "intersect",
    "//ATOM_PLACEHOLDER_intersect_ok": "intersect_ok",
    "//ATOM_PLACEHOLDER_overlap": "overlap",
    "//ATOM_PLACEHOLDER_overlap_ok": "overlap_ok",
    "//ATOM_PLACEHOLDER_union": "union",
    "//ATOM_PLACEHOLDER_union_ok": "union_ok",
    "//ATOM_PLACEHOLDER_overlap_witness": "overlap_witness"
  }
}