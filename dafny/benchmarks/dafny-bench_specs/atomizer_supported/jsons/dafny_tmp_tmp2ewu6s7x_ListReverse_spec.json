{
  "skeleton": "//ATOM_PLACEHOLDER_reverse\n\n//ATOM_PLACEHOLDER_ReverseAppendDistr\n\n//ATOM_PLACEHOLDER_ReverseInvolution\n\n\n\n",
  "atoms": {
    "reverse": [
      [],
      "// ATOM \nfunction reverse(xs: seq<nat>): seq<nat>\n{\n    if xs == [] then [] else reverse(xs[1..]) + [xs[0]]\n}\n",
      "function"
    ],
    "ReverseAppendDistr": [
      [
        "reverse"
      ],
      "// ATOM \n\nlemma ReverseAppendDistr(xs: seq<nat>, ys: seq<nat>)\nensures reverse(xs + ys) == reverse(ys) + reverse(xs)\n{\n    if {\n        case xs == [] =>\n        calc {\n            reverse([] + ys);\n            calc {\n                [] + ys;\n                ys;\n            }\n            reverse(ys);\n            reverse(ys) + reverse([]);\n        }\n        case xs != [] => {\n            var zs := xs + ys;\n        }\n    }\n}\n",
      "lemma"
    ],
    "ReverseInvolution": [
      [
        "ReverseAppendDistr",
        "reverse"
      ],
      "// ATOM \n\nlemma ReverseInvolution(xxs: seq<nat>)\nensures reverse(reverse(xxs)) == xxs\n{\n    if {\n        case xxs == [] => {}\n        case xxs != [] => calc {\n            reverse(reverse(xxs));\n            ==\n            reverse(reverse(xxs[1..]) + [xxs[0]]);\n            ==\n            { ReverseAppendDistr(reverse(xxs[1..]), [xxs[0]]); }\n            reverse([xxs[0]]) + reverse(reverse(xxs[1..]));\n            ==\n            { ReverseInvolution(xxs[1..]); }\n            calc {\n                reverse([xxs[0]]);\n                ==\n                [] + [xxs[0]];\n                ==\n                [xxs[0]];\n            }\n            [xxs[0]] + xxs[1..];\n            ==\n            xxs;\n        }\n    }\n}\n",
      "lemma"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_reverse": "reverse",
    "//ATOM_PLACEHOLDER_ReverseAppendDistr": "ReverseAppendDistr",
    "//ATOM_PLACEHOLDER_ReverseInvolution": "ReverseInvolution"
  }
}