{
  "skeleton": "//ATOM_PLACEHOLDER_getSize\n\n// For a given integer array, let's find the longest subesquence of 0s.\n// sz: size, pos: position.   a[pos..(pos+sz)] will be all zeros\n//ATOM_PLACEHOLDER_longestZero\n\n\n\n//ATOM_PLACEHOLDER_Main\n\n\n\n\n\n\n\n",
  "atoms": {
    "getSize": [
      [],
      "// ATOM \nfunction getSize(i: int, j:int) : int\n{\n    j - i + 1    \n}\n",
      "function"
    ],
    "longestZero": [
      [
        "getSize"
      ],
      "// SPEC \n\n// For a given integer array, let's find the longest subesquence of 0s.\n// sz: size, pos: position.   a[pos..(pos+sz)] will be all zeros\nmethod longestZero(a: array<int>) returns (sz:int, pos:int)   \n    requires 1 <= a.Length\n    ensures 0 <= sz <= a.Length\n    ensures 0 <= pos < a.Length\n    ensures pos + sz <= a.Length\n    ensures forall i:int  :: pos <= i < pos + sz ==> a[i] == 0\n    ensures forall i,j :: (0 <= i < j < a.Length && getSize(i, j) > sz) ==> exists k :: i <= k <= j && a[k] != 0\n{\n}\n",
      "method"
    ],
    "Main": [
      [
        "longestZero"
      ],
      "// SPEC \n\n\n\nmethod Main()\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_getSize": "getSize",
    "//ATOM_PLACEHOLDER_longestZero": "longestZero",
    "//ATOM_PLACEHOLDER_Main": "Main"
  }
}