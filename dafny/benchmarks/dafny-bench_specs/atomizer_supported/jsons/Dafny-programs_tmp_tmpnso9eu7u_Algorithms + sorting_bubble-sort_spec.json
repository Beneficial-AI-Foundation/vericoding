{
  "skeleton": "/*\nBubble Sort is the simplest sorting algorithm that works by \nrepeatedly swapping the adjacent elements if they are in wrong order.\n*/\n\n//ATOM_PLACEHOLDER_sorted_between\n\n//ATOM_PLACEHOLDER_sorted\n\n//ATOM_PLACEHOLDER_BubbleSort\n\n//ATOM_PLACEHOLDER_Main\n\n/* Explanation:\n\n     // A is ordered for each pair of elements such that\n     // the first element belongs to the left partition of i\n     // and the second element belongs to the right partition of i\n\n     // There is a variable defined by the value that the array takes at position j\n     // Therefore, each value that the array takes for all elements from 0 to j\n     // They are less than or equal to the value of the variable\n*/\n\n\n/* Explanation:\n\n     // A is ordered for each pair of elements such that\n     // the first element belongs to the left partition of i\n     // and the second element belongs to the right partition of i\n\n     // There is a variable defined by the value that the array takes at position j\n     // Therefore, each value that the array takes for all elements from 0 to j\n     // They are less than or equal to the value of the variable\n*/\n",
  "atoms": {
    "sorted_between": [
      [],
      "// ATOM \n\npredicate sorted_between(A:array<int>, from:int, to:int)\n    reads A\n{\n    forall i, j :: 0 <= i <= j < A.Length && from <= i <= j <= to ==> A[i] <= A[j]\n}\n",
      "predicate"
    ],
    "sorted": [
      [
        "sorted_between"
      ],
      "// ATOM \n\npredicate sorted(A:array<int>)\n    reads A\n{\n    sorted_between(A, 0, A.Length-1)\n}\n",
      "predicate"
    ],
    "BubbleSort": [
      [
        "sorted"
      ],
      "// SPEC \n\nmethod BubbleSort(A:array<int>)\n    modifies A\n    ensures sorted(A)\n    ensures multiset(A[..]) == multiset(old(A[..]))\n{\n}\n",
      "method"
    ],
    "Main": [
      [
        "BubbleSort"
      ],
      "// SPEC \n\nmethod Main() {\n}\n\n/* Explanation:\n\n     // A is ordered for each pair of elements such that\n     // the first element belongs to the left partition of i\n     // and the second element belongs to the right partition of i\n\n     // There is a variable defined by the value that the array takes at position j\n     // Therefore, each value that the array takes for all elements from 0 to j\n     // They are less than or equal to the value of the variable\n*/\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_sorted_between": "sorted_between",
    "//ATOM_PLACEHOLDER_sorted": "sorted",
    "//ATOM_PLACEHOLDER_BubbleSort": "BubbleSort",
    "//ATOM_PLACEHOLDER_Main": "Main"
  }
}