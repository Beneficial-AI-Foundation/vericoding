{
  "skeleton": "// RUN: %testDafnyForEachResolver \"%s\"\n\n\n//ATOM_PLACEHOLDER_IsPrime\n\n// The following theorem shows that there is an infinite number of primes\n//ATOM_PLACEHOLDER_AlwaysMorePrimes\n\n// Here is an alternative formulation of the theorem\n//ATOM_PLACEHOLDER_NoFiniteSetContainsAllPrimes\n\n// ------------------------- lemmas and auxiliary definitions\n\n//ATOM_PLACEHOLDER_AllPrimes\n\n//ATOM_PLACEHOLDER_GetLargerPrime\n\n//ATOM_PLACEHOLDER_product\n\n//ATOM_PLACEHOLDER_product_property\n\n//ATOM_PLACEHOLDER_ProductPlusOneIsPrime\n\n// The following lemma is essentially just associativity and commutativity of multiplication.\n// To get this proof through, it is necessary to know that if x!=y and y==Pick...(s), then\n// also y==Pick...(s - {x}).  It is for this reason that we use PickLargest, instead of\n// picking an arbitrary element from s.\n//ATOM_PLACEHOLDER_RemoveFactor)\n{\n  var y := PickLargest(s);\n  if x != y {\n    calc {\n      product(s);\n      y * product(s - {y});\n      { RemoveFactor(x, s - {y}); }\n      y * x * product(s - {y} - {x});\n      x * y * product(s - {y} - {x});\n      { assert s - {y} - {x} == s - {x} - {y}; }\n      x * y * product(s - {x} - {y});\n      /* FIXME: This annotation wasn't needed before the introduction\n       * of auto-triggers. It's not needed if one adds {:no_trigger}\n       * to the forall y :: y in s ==> y <= x part of PickLargest, but that\n       * boils down to z3 picking $Box(...) as good trigger\n       */\n      // FIXME: the parens shouldn't be needed around (s - {x})\n      { assert y in (s - {x}); }\n      { assert y == PickLargest(s - {x}); }\n      x * product(s - {x});\n    }\n  }\n}\n\n// This definition is like IsPrime above, except that the quantification is only over primes.\n//ATOM_PLACEHOLDER_IsPrime_Alt\n\n// To show that n is prime, it suffices to prove that it satisfies the alternate definition\n//ATOM_PLACEHOLDER_AltPrimeDefinition\n\n//ATOM_PLACEHOLDER_Composite\n\n//ATOM_PLACEHOLDER_PickLargest\n{\n  LargestElementExists(s);\n  var x :| x in s && forall y :: y in s ==> y <= x;\n  x\n}\n\n//ATOM_PLACEHOLDER_LargestElementExists\n  ensures exists x :: x in s && forall y :: y in s ==> y <= x\n{\n  var s' := s;\n  while true\n  {\n    var x :| x in s';  // pick something\n    if forall y :: y in s' ==> y <= x {\n      // good pick\n      return;\n    } else {\n      // constrain the pick further\n      var y :| y in s' && x < y;\n      s' := set z | z in s && x < z;\n    }\n  }\n}\n\n//ATOM_PLACEHOLDER_MulPos\n\n// This axiom about % is needed.  Unfortunately, Z3 seems incapable of proving it.\n//ATOM_PLACEHOLDER_MulDivMod",
  "atoms": {
    "IsPrime": [
      [],
      "// ATOM \n// RUN: %testDafnyForEachResolver \"%s\"\n\n\nghost predicate IsPrime(n: int)\n{\n  2 <= n && forall m :: 2 <= m < n ==> n % m != 0 // WISH It would be great to think about the status of modulo as a trigger\n}\n",
      "ghost predicate"
    ],
    "AlwaysMorePrimes": [
      [
        "GetLargerPrime",
        "IsPrime"
      ],
      "// ATOM \n\n// The following theorem shows that there is an infinite number of primes\nlemma AlwaysMorePrimes(k: int)\n  ensures exists p :: k <= p && IsPrime(p)\n{\n  var j, s := 0, {};\n  while true\n  {\n    var p := GetLargerPrime(s, j);\n    if k <= p { return; }\n    j, s := p, set x | 2 <= x <= p && IsPrime(x);\n  }\n}\n",
      "lemma"
    ],
    "NoFiniteSetContainsAllPrimes": [
      [
        "PickLargest",
        "AlwaysMorePrimes",
        "IsPrime"
      ],
      "// ATOM \n\n// Here is an alternative formulation of the theorem\nlemma NoFiniteSetContainsAllPrimes(s: set<int>)\n  ensures exists p :: IsPrime(p) && p !in s\n{\n  AlwaysMorePrimes(if s == {} then 0 else PickLargest(s) + 1);\n}\n",
      "lemma"
    ],
    "AllPrimes": [
      [
        "IsPrime"
      ],
      "// ATOM \n\n// ------------------------- lemmas and auxiliary definitions\n\nghost predicate AllPrimes(s: set<int>, bound: int)\n{\n  // s contains only primes\n  (forall x :: x in s ==> IsPrime(x)) &&\n  // every prime up to \"bound\" is included in s\n  (forall p :: IsPrime(p) && p <= bound ==> p in s)\n}\n",
      "ghost predicate"
    ],
    "GetLargerPrime": [
      [
        "AllPrimes",
        "ProductPlusOneIsPrime",
        "IsPrime",
        "product_property",
        "product"
      ],
      "// ATOM \n\nlemma GetLargerPrime(s: set<int>, bound: int) returns (p: int)\n  requires AllPrimes(s, bound)\n  ensures bound < p && IsPrime(p)\n{\n  var q := product(s);\n  if exists p :: bound < p <= q && IsPrime(p) {\n    p :| bound < p <= q && IsPrime(p);\n  } else {\n    ProductPlusOneIsPrime(s, q);\n    p := q+1;\n    if p <= bound {  // by contradction, establish bound < p\n      product_property(s);\n    }\n  }\n}\n",
      "lemma"
    ],
    "product": [
      [
        "PickLargest"
      ],
      "// ATOM \n\nghost function product(s: set<int>): int\n{\n  if s == {} then 1 else\n  var a := PickLargest(s); a * product(s - {a})\n}\n",
      "ghost function"
    ],
    "product_property": [
      [
        "PickLargest",
        "product",
        "MulPos"
      ],
      "// ATOM \n\nlemma product_property(s: set<int>)\n  requires forall x :: x in s ==> 1 <= x\n  ensures 1 <= product(s) && forall x :: x in s ==> x <= product(s)\n{\n  if s != {} {\n    var a := PickLargest(s);\n    var s' := s - {a};\n    product_property(s');\n    MulPos(a, product(s'));\n  }\n}\n",
      "lemma"
    ],
    "ProductPlusOneIsPrime": [
      [
        "AllPrimes",
        "MulDivMod",
        "IsPrime",
        "product",
        "RemoveFactor",
        "AltPrimeDefinition",
        "product_property"
      ],
      "// ATOM \n\nlemma ProductPlusOneIsPrime(s: set<int>, q: int)\n  requires AllPrimes(s, q) && q == product(s)\n  ensures IsPrime(q+1)\n{\n  var p := q+1;\n  calc {\n    true;\n    { product_property(s); }\n    2 <= p;\n  }\n\n  forall m | 2 <= m <= q && IsPrime(m)\n    ensures p % m != 0\n  {\n    RemoveFactor(m, s);\n    var l := product(s-{m});\n    MulDivMod(m, l, q, 1);\n  }\n  AltPrimeDefinition(q+1);\n}\n",
      "lemma"
    ],
    "RemoveFactor": [
      [],
      "// ATOM \n\n// The following lemma is essentially just associativity and commutativity of multiplication.\n// To get this proof through, it is necessary to know that if x!=y and y==Pick...(s), then\n// also y==Pick...(s - {x}).  It is for this reason that we use PickLargest, instead of\n// picking an arbitrary element from s.\nlemma RemoveFactor(x: int, s: set<int>)\n  requires x in s\n  ensures product(s) == x * product(s - {x})\n{\n  var y := PickLargest(s);\n  if x != y {\n    calc {\n      product(s);\n      y * product(s - {y});\n      { RemoveFactor(x, s - {y}); }\n      y * x * product(s - {y} - {x});\n      x * y * product(s - {y} - {x});\n      { assert s - {y} - {x} == s - {x} - {y}; }\n      x * y * product(s - {x} - {y});\n      /* FIXME: This annotation wasn't needed before the introduction\n       * of auto-triggers. It's not needed if one adds {:no_trigger}\n       * to the forall y :: y in s ==> y <= x part of PickLargest, but that\n       * boils down to z3 picking $Box(...) as good trigger\n       */\n      // FIXME: the parens shouldn't be needed around (s - {x})\n      { assert y in (s - {x}); }\n      { assert y == PickLargest(s - {x}); }\n      x * product(s - {x});\n    }\n  }\n}\n",
      "lemma"
    ],
    "IsPrime_Alt": [
      [
        "IsPrime"
      ],
      "// ATOM \n\n// This definition is like IsPrime above, except that the quantification is only over primes.\nghost predicate IsPrime_Alt(n: int)\n{\n  2 <= n && forall m :: 2 <= m < n && IsPrime(m) ==> n % m != 0\n}\n",
      "ghost predicate"
    ],
    "AltPrimeDefinition": [
      [
        "Composite",
        "MulDivMod",
        "IsPrime",
        "IsPrime_Alt"
      ],
      "// ATOM \n\n// To show that n is prime, it suffices to prove that it satisfies the alternate definition\nlemma AltPrimeDefinition(n: int)\n  requires IsPrime_Alt(n)\n  ensures IsPrime(n)\n{\n  forall m | 2 <= m < n\n    ensures n % m != 0\n  {\n    if !IsPrime(m) {\n      var a, b := Composite(m);\n      if n % m == 0 {  // proof by contradiction\n        var k := n / m;\n        calc {\n          true;\n          k == n / m;\n          m * k == n;\n          a * b * k == n;\n        ==>  { MulDivMod(a, b*k, n, 0); }\n          n % a == 0;\n        ==>  // IsPrime_Alt\n          !(2 <= a < n && IsPrime(a));\n          { assert 2 <= a < m < n; }\n          !IsPrime(a);\n          false;\n        }\n      }\n    }\n  }\n}\n",
      "lemma"
    ],
    "Composite": [
      [
        "IsPrime"
      ],
      "// ATOM \n\nlemma Composite(c: int) returns (a: int, b: int)\n  requires 2 <= c && !IsPrime(c)\n  ensures 2 <= a < c && 2 <= b && a * b == c\n  ensures IsPrime(a)\n{\n  calc {\n    true;\n    !IsPrime(c);\n    !(2 <= c && forall m :: 2 <= m < c ==> c % m != 0);\n    exists m :: 2 <= m < c && c % m == 0;\n  }\n  a :| 2 <= a < c && c % a == 0;\n  b := c / a;\n  if !IsPrime(a) {\n    var x, y := Composite(a);\n    a, b := x, y*b;\n  }\n}\n",
      "lemma"
    ],
    "PickLargest": [
      [],
      "// ATOM \n\nghost function PickLargest(s: set<int>): int\n  requires s != {}\n{\n  LargestElementExists(s);\n  var x :| x in s && forall y :: y in s ==> y <= x;\n  x\n}\n",
      "ghost function"
    ],
    "LargestElementExists": [
      [],
      "// ATOM \n\nlemma LargestElementExists(s: set<int>)\n  requires s != {}\n  ensures exists x :: x in s && forall y :: y in s ==> y <= x\n{\n  var s' := s;\n  while true\n  {\n    var x :| x in s';  // pick something\n    if forall y :: y in s' ==> y <= x {\n      // good pick\n      return;\n    } else {\n      // constrain the pick further\n      var y :| y in s' && x < y;\n      s' := set z | z in s && x < z;\n    }\n  }\n}\n",
      "lemma"
    ],
    "MulPos": [
      [],
      "// ATOM \n\nlemma MulPos(a: int, b: int)\n  requires 1 <= a && 1 <= b\n  ensures a <= a * b\n{\n  if b == 1 {\n  } else {\n    MulPos(a, b - 1);\n  }\n}\n",
      "lemma"
    ],
    "MulDivMod": [
      [],
      "// ATOM \n\n// This axiom about % is needed.  Unfortunately, Z3 seems incapable of proving it.\nlemma MulDivMod(a: nat, b: nat, c: nat, j: nat)\n  requires a * b == c && j < a\n  ensures (c+j) % a == j\n",
      "lemma"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_IsPrime": "IsPrime",
    "//ATOM_PLACEHOLDER_AlwaysMorePrimes": "AlwaysMorePrimes",
    "//ATOM_PLACEHOLDER_NoFiniteSetContainsAllPrimes": "NoFiniteSetContainsAllPrimes",
    "//ATOM_PLACEHOLDER_AllPrimes": "AllPrimes",
    "//ATOM_PLACEHOLDER_GetLargerPrime": "GetLargerPrime",
    "//ATOM_PLACEHOLDER_product": "product",
    "//ATOM_PLACEHOLDER_product_property": "product_property",
    "//ATOM_PLACEHOLDER_ProductPlusOneIsPrime": "ProductPlusOneIsPrime",
    "//ATOM_PLACEHOLDER_RemoveFactor": "RemoveFactor",
    "//ATOM_PLACEHOLDER_IsPrime_Alt": "IsPrime_Alt",
    "//ATOM_PLACEHOLDER_AltPrimeDefinition": "AltPrimeDefinition",
    "//ATOM_PLACEHOLDER_Composite": "Composite",
    "//ATOM_PLACEHOLDER_PickLargest": "PickLargest",
    "//ATOM_PLACEHOLDER_LargestElementExists": "LargestElementExists",
    "//ATOM_PLACEHOLDER_MulPos": "MulPos",
    "//ATOM_PLACEHOLDER_MulDivMod": "MulDivMod"
  }
}