{
  "skeleton": "//ATOM_PLACEHOLDER_sum_up_to\n\n\n//ATOM_PLACEHOLDER_SumUpTo\n\n//ATOM_PLACEHOLDER_total\n\n//ATOM_PLACEHOLDER_total_lemma\n\n//ATOM_PLACEHOLDER_Total\n\n\n\n",
  "atoms": {
    "sum_up_to": [
      [],
      "// ATOM \nfunction sum_up_to (n: nat): nat\n{\n  if (n == 0) then 0\n  else sum_up_to (n-1) + 1\n}\n",
      "function"
    ],
    "SumUpTo": [
      [
        "sum_up_to"
      ],
      "// SPEC \n\n\nmethod SumUpTo (n: nat) returns (r: nat)\n  ensures r == sum_up_to (n);\n{\n}\n",
      "method"
    ],
    "total": [
      [],
      "// ATOM \n\nfunction total (a: seq<nat>) : nat\n{\n  if |a| == 0 then 0\n  else total (a[0..|a|-1]) + a[|a|-1]\n}\n",
      "function"
    ],
    "total_lemma": [
      [
        "total"
      ],
      "// ATOM \n\nlemma total_lemma (a: seq<nat>, i:nat) \n  requires |a| > 0;\n  requires 0 <= i < |a|;\n  ensures total (a[0..i]) + a[i] == total (a[0..i+1]);\n{\n  ghost var b := a[0..i+1];\n  calc\n  {\n    total (a[0..i+1]);\n    total (b);\n    total (b[0..|b|-1]) + b[|b|-1];\n    total (b[0..|b|-1]) + a[i];\n    {assert (b[0..|b|-1] == a[0..i]);}\n    total (a[0..i]) + a[i];\n  }\n}\n",
      "lemma"
    ],
    "Total": [
      [
        "total_lemma",
        "total"
      ],
      "// SPEC \n\nmethod Total (a: seq<nat>) returns (r:nat)\n  ensures r == total (a[0..|a|]); \n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_sum_up_to": "sum_up_to",
    "//ATOM_PLACEHOLDER_SumUpTo": "SumUpTo",
    "//ATOM_PLACEHOLDER_total": "total",
    "//ATOM_PLACEHOLDER_total_lemma": "total_lemma",
    "//ATOM_PLACEHOLDER_Total": "Total"
  }
}