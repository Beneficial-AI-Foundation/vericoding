{
  "skeleton": "/*\nDafny include 2 limbaje:\n    * un limbaj pentru specificare \n        MSFOL (ce am discutat p\u00e2n\u0103 acum)\n        adnot\u0103ri care s\u0103 ajute \u00een procesul de verificare\n    * un limbaj pentru scris programe\n*/\n\n// Exemplu de program\n\n//ATOM_PLACEHOLDER_SqrSum\n\n//ATOM_PLACEHOLDER_DivMod\n\n/*\n    triple Hoare (| P |) S (| Q |) \n*/\n\n// varianta assume-assert\n//ATOM_PLACEHOLDER_HoareTripleAssmAssrt\n\n// varianta requires-ensures\n\n//ATOM_PLACEHOLDER_HoareTripleReqEns\n\n/*\nregula pentru while\n*/\n\n// varianta cu assert\n/*\n//ATOM_PLACEHOLDER_WhileRule\n*/\n\n// varianta cu invariant\n//ATOM_PLACEHOLDER_Invariant1\n\n//specificarea sumei de patrate\n//ATOM_PLACEHOLDER_SqrSumRec\n/*\n//ATOM_PLACEHOLDER_SqrSum1\n*/\n\n// verificarea programului pentru suma de patrate\n\n//ATOM_PLACEHOLDER_SqrSum1\n\n// SqrSumRec(n) = 0^2 + 1^2 + 2^2 + ... + n^2 == n(n+1)(2n+1)/6\nleast lemma L1(n: int)\n\trequires n >= 0\n    ensures SqrSumRec(n) == n*(n+1)*(2*n + 1)/6\n{\n    //OK\n}\n\n/*\n//ATOM_PLACEHOLDER_SqrSumBy6\n\ninductive lemma L(n: int) // it takes a while\n\trequires n >= 0\n\tensures  SqrSumBy6(n) == 6 * SqrSumRec(n)\n{\n\tif (n == 0) {}\n\telse {\n\t\tL(n-1);\n\t  \tcalc == {\n\t\t\tn*((n-1)*(2*n - 1));\n\t\t\tn*(2*n*(n-1) - n + 1);\n\t\t\tn*(2*n*n - 3*n + 1);\n\t\t\tn*(2*n*n - 3*n + 1);\n\t\t}\n\t\tcalc == {\n\t\t\t2*n*n + n;\n\t\t\t(2*n + 1)*n;\n\t\t}\n\t\tcalc == {\n\t\t\t(2*n + 1)*n + (2*n + 1);\n\t\t\t(2*n + 1)*(n+1);\n\t\t}\n\t\tcalc == {\n\t\t\tn*((n-1)*(2*n - 1)) + 6*n*n;\n\t\t\tn*(2*n*(n-1) - n + 1) + 6*n*n;\n\t\t\tn*(2*n*(n-1) - n + 1) + 6*n*n;\n\t\t\tn*(2*n*n - 3*n + 1) + 6*n*n;\n\t\t\tn*(2*n*n - 3*n + 1 + 6*n);\n\t\t\tn*(2*n*n + 6*n - 3*n + 1);\n\t\t\tn*(2*n*n + 3*n + 1);\n\t\t\tn*(2*n*n + n + (2*n + 1));\n\t\t\tn*((2*n + 1)*n + (2*n + 1));\n\t\t  \tn*((2*n + 1)*(n+1));\n\t\t}\n\t}\n}\n\n*/\n\n//ATOM_PLACEHOLDER_DivMod1\n\n//ATOM_PLACEHOLDER_Main\n\n\n\n\n\n",
  "atoms": {
    "SqrSum": [
      [],
      "// SPEC \n\n// Exemplu de program\n\nmethod SqrSum(n: int) returns (s: int)\n{\n}\n",
      "method"
    ],
    "DivMod": [
      [],
      "// SPEC \n\nmethod DivMod(a: int, b: int) returns (q: int, r: int)\n{\n}\n\n/*\n    triple Hoare (| P |) S (| Q |) \n*/\n",
      "method"
    ],
    "HoareTripleAssmAssrt": [
      [],
      "// SPEC \n\n// varianta assume-assert\nmethod HoareTripleAssmAssrt()\n{\n}\n",
      "method"
    ],
    "HoareTripleReqEns": [
      [],
      "// SPEC \n\n// varianta requires-ensures\n\nmethod HoareTripleReqEns(i: int, k: int) returns (k': int)\n\t// (| k == i*i |) k := k + 2 * i +1; (| k = (i+1)*(i+1) |)\n\trequires  k == i*i\n\tensures  k' == (i+1)*(i+1)\n{\n}\n\n/*\nregula pentru while\n*/\n\n// varianta cu assert\n/*\n",
      "method"
    ],
    "WhileRule": [
      [],
      "// SPEC \nmethod WhileRule()\n{\n}\n*/\n",
      "method"
    ],
    "Invariant1": [
      [],
      "// SPEC \n\n// varianta cu invariant\nmethod Invariant1()\n{\n}\n",
      "method"
    ],
    "SqrSumRec": [
      [],
      "// ATOM \n\n//specificarea sumei de patrate\nfunction SqrSumRec(n: int) : int\n\trequires n >= 0\n{\n\tif (n == 0) then 0 else n*n + SqrSumRec(n-1)\n}\n/*\n",
      "function"
    ],
    "SqrSum1": [
      [
        "SqrSumRec"
      ],
      "// SPEC \n\n// verificarea programului pentru suma de patrate\n\nmethod SqrSum1(n: int) returns (s: int)\n\trequires n >= 0\n\tensures s == SqrSumRec(n)\n{\n}\n\n// SqrSumRec(n) = 0^2 + 1^2 + 2^2 + ... + n^2 == n(n+1)(2n+1)/6\nleast lemma L1(n: int)\n\trequires n >= 0\n    ensures SqrSumRec(n) == n*(n+1)*(2*n + 1)/6\n{\n}\n\n/*\n",
      "method"
    ],
    "SqrSumBy6": [
      [],
      "// ATOM \nfunction SqrSumBy6(n: int) : int\n{\n\tn * (n + 1) * (2 * n + 1) \n}\n\ninductive lemma L(n: int) // it takes a while\n\trequires n >= 0\n\tensures  SqrSumBy6(n) == 6 * SqrSumRec(n)\n{\n\tif (n == 0) {}\n\telse {\n\t\tL(n-1);\n\t  \tcalc == {\n\t\t\tn*((n-1)*(2*n - 1));\n\t\t\tn*(2*n*(n-1) - n + 1);\n\t\t\tn*(2*n*n - 3*n + 1);\n\t\t\tn*(2*n*n - 3*n + 1);\n\t\t}\n\t\tcalc == {\n\t\t\t2*n*n + n;\n\t\t\t(2*n + 1)*n;\n\t\t}\n\t\tcalc == {\n\t\t\t(2*n + 1)*n + (2*n + 1);\n\t\t\t(2*n + 1)*(n+1);\n\t\t}\n\t\tcalc == {\n\t\t\tn*((n-1)*(2*n - 1)) + 6*n*n;\n\t\t\tn*(2*n*(n-1) - n + 1) + 6*n*n;\n\t\t\tn*(2*n*(n-1) - n + 1) + 6*n*n;\n\t\t\tn*(2*n*n - 3*n + 1) + 6*n*n;\n\t\t\tn*(2*n*n - 3*n + 1 + 6*n);\n\t\t\tn*(2*n*n + 6*n - 3*n + 1);\n\t\t\tn*(2*n*n + 3*n + 1);\n\t\t\tn*(2*n*n + n + (2*n + 1));\n\t\t\tn*((2*n + 1)*n + (2*n + 1));\n\t\t  \tn*((2*n + 1)*(n+1));\n\t\t}\n\t}\n}\n\n*/\n",
      "function"
    ],
    "DivMod1": [
      [],
      "// SPEC \n\nmethod DivMod1(a: int, b: int) returns (q: int, r: int)\nrequires b > 0 && a >= 0\nensures a == b*q + r && 0 <= r < b\n//decreases *\n{\n}\n",
      "method"
    ],
    "Main": [
      [
        "SqrSum",
        "DivMod"
      ],
      "// SPEC \n\nmethod Main()\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_SqrSum": "SqrSum",
    "//ATOM_PLACEHOLDER_DivMod": "DivMod",
    "//ATOM_PLACEHOLDER_HoareTripleAssmAssrt": "HoareTripleAssmAssrt",
    "//ATOM_PLACEHOLDER_HoareTripleReqEns": "HoareTripleReqEns",
    "//ATOM_PLACEHOLDER_WhileRule": "WhileRule",
    "//ATOM_PLACEHOLDER_Invariant1": "Invariant1",
    "//ATOM_PLACEHOLDER_SqrSumRec": "SqrSumRec",
    "//ATOM_PLACEHOLDER_SqrSum1": "SqrSum1",
    "//ATOM_PLACEHOLDER_SqrSumBy6": "SqrSumBy6",
    "//ATOM_PLACEHOLDER_DivMod1": "DivMod1",
    "//ATOM_PLACEHOLDER_Main": "Main"
  }
}