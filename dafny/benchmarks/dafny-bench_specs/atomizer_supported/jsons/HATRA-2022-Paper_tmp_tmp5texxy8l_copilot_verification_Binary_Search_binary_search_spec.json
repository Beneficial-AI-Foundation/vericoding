{
  "skeleton": "// Dafny verification of binary search alogirthm from binary_search.py\n// Inspired by: https://ece.uwaterloo.ca/~agurfink/stqam/rise4fun-Dafny/#h211\n\n//ATOM_PLACEHOLDER_BinarySearch\n\n// Predicate to check that the array is sorted\n//ATOM_PLACEHOLDER_sorted\n\n// Predicate to that each element is unique\n//ATOM_PLACEHOLDER_distinct\n\n// Predicate to that the target is not in the array\n//ATOM_PLACEHOLDER_not_found\n\n// Predicate to that the target is in the array\n//ATOM_PLACEHOLDER_found\n\n\n\n\n\n\n\n",
  "atoms": {
    "BinarySearch": [
      [
        "sorted",
        "found",
        "distinct",
        "not_found"
      ],
      "// SPEC \n// Dafny verification of binary search alogirthm from binary_search.py\n// Inspired by: https://ece.uwaterloo.ca/~agurfink/stqam/rise4fun-Dafny/#h211\n\nmethod BinarySearch(arr: array<int>, target: int) returns (index: int)\n    requires distinct(arr)\n    requires sorted(arr)\n    ensures -1 <= index < arr.Length\n    ensures index == -1 ==> not_found(arr, target)\n    ensures index != -1 ==> found(arr, target, index)\n{\n}\n",
      "method"
    ],
    "sorted": [
      [],
      "// ATOM \n\n// Predicate to check that the array is sorted\npredicate sorted(a: array<int>)\nreads a\n{\n   forall j, k :: 0 <= j < k < a.Length ==> a[j] <= a[k] \n}\n",
      "predicate"
    ],
    "distinct": [
      [],
      "// ATOM \n\n// Predicate to that each element is unique\npredicate distinct(arr: array<int>)\n    reads arr\n{\n    forall i, j :: 0 <= i < arr.Length && 0 <= j < arr.Length ==> arr[i] != arr[j]\n}\n",
      "predicate"
    ],
    "not_found": [
      [],
      "// ATOM \n\n// Predicate to that the target is not in the array\npredicate not_found(arr: array<int>, target: int)\nreads arr\n{\n    (forall j :: 0 <= j < arr.Length ==> arr[j] != target)\n}\n",
      "predicate"
    ],
    "found": [
      [],
      "// ATOM \n\n// Predicate to that the target is in the array\npredicate found(arr: array<int>, target: int, index: int)\nrequires -1 <= index < arr.Length;\nreads arr\n{\n    if index == -1 then false\n    else if arr[index] == target then true\n    else false\n}\n",
      "predicate"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_BinarySearch": "BinarySearch",
    "//ATOM_PLACEHOLDER_sorted": "sorted",
    "//ATOM_PLACEHOLDER_distinct": "distinct",
    "//ATOM_PLACEHOLDER_not_found": "not_found",
    "//ATOM_PLACEHOLDER_found": "found"
  }
}