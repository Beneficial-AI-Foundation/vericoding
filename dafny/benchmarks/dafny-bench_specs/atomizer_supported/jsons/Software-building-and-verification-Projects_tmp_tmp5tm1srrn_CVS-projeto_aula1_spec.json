{
  "skeleton": "//ATOM_PLACEHOLDER_factImp\n\n//ATOM_PLACEHOLDER_power\n\n//ATOM_PLACEHOLDER_pow\n\n//ATOM_PLACEHOLDER_powerAlt\n\n// 3\n\n//ATOM_PLACEHOLDER_equivalentes//ATOM_PLACEHOLDER_l1//ATOM_PLACEHOLDER_fact\n\n//ATOM_PLACEHOLDER_factAcc\n\n//ATOM_PLACEHOLDER_factAlt\n\n//ATOM_PLACEHOLDER_factAcc_correct//ATOM_PLACEHOLDER_equiv\n\n// 5. a)\n//ATOM_PLACEHOLDER_mystery1\n\n\n// 5. b)\n//ATOM_PLACEHOLDER_mystery2\n\n// 5. c)\n//ATOM_PLACEHOLDER_mystery3\n\n// 5. d)\n//ATOM_PLACEHOLDER_mystery4\n\n// 6\n\n// 8\n\n// 9\n\n// 10\n\n// 11\n\n\n// 6\n\n// 8\n\n// 9\n\n// 10\n\n// 11\n",
  "atoms": {
    "factImp": [
      [],
      "// SPEC \nmethod factImp(n: int) returns (r: int)\n{\n}\n",
      "method"
    ],
    "power": [
      [],
      "// ATOM \n\nfunction power(n: int, m: nat) : int {\n  if m==0 then 1 else n*power(n,m-1)\n}\n",
      "function"
    ],
    "pow": [
      [],
      "// ATOM \n\nfunction pow(n: int, m: nat,r: int) : int {\n  if m==0 then r else pow(n,m-1,r*n)\n}\n",
      "function"
    ],
    "powerAlt": [
      [
        "pow"
      ],
      "// ATOM \n\nfunction powerAlt(n: int,m: nat) : int {\n  pow(n,m,1)\n}\n",
      "function"
    ],
    "equivalentes": [
      [],
      "// ATOM \n\n// 3\n\nfunction equivalentes(n: int,m: nat,r: int) : int\n  ensures power(n,m) == pow(n,m,r)\n",
      "function"
    ],
    "l1": [
      [],
      "// ATOM \n\nlemma l1(n: int,m: nat, r: int)\n  ensures equivalentes(n,m, r) == powerAlt(n,m)\n",
      "lemma"
    ],
    "fact": [
      [],
      "// ATOM \n\n\n// 4.\n\nfunction fact(n: nat) : nat\n{\n  if n==0 then 1 else n*fact(n-1)\n}\n",
      "function"
    ],
    "factAcc": [
      [],
      "// ATOM \n\nfunction factAcc(n: nat,a: int) : int\n{\n  if (n == 0) then a else factAcc(n-1,n*a)\n}\n",
      "function"
    ],
    "factAlt": [
      [
        "factAcc"
      ],
      "// ATOM \n\nfunction factAlt(n: nat) : int { factAcc(n,1) }\n",
      "function"
    ],
    "factAcc_correct": [
      [],
      "// ATOM \n\nlemma factAcc_correct(n: nat,a: int)\n  ensures factAcc(n,a) == fact(n)*a\n",
      "lemma"
    ],
    "equiv": [
      [
        "fact",
        "factAcc_correct",
        "factAlt"
      ],
      "// ATOM \n\nlemma equiv(n: nat)\n  ensures fact(n) == factAlt(n) {\n  factAcc_correct(n, 1);\n}\n",
      "lemma"
    ],
    "mystery1": [
      [],
      "// ATOM \n\n// 5. a)\nfunction mystery1(n: nat,m: nat) : nat\n  ensures mystery1(n,m) == n+m\n{ if n==0 then m else mystery1(n-1,m+1) }\n",
      "function"
    ],
    "mystery2": [
      [],
      "// ATOM \n\n\n// 5. b)\nfunction mystery2(n: nat,m: nat) : nat\n  ensures mystery2(n,m) == n+m\n{ if m==0 then n else mystery2(n+1,m-1) }\n",
      "function"
    ],
    "mystery3": [
      [
        "mystery1"
      ],
      "// ATOM \n\n// 5. c)\nfunction mystery3(n: nat,m: nat) : nat\n  ensures mystery3(n,m) == n*m\n{ if n==0 then 0 else mystery1(m,mystery3(n-1,m)) }\n",
      "function"
    ],
    "mystery4": [
      [
        "mystery3",
        "power"
      ],
      "// ATOM \n\n// 5. d)\nfunction mystery4(n: nat,m: nat) : nat\n  ensures mystery4(n,m) == power(n,m)\n{ if m==0 then 1 else mystery3(n,mystery4(n,m-1)) }\n",
      "function"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_factImp": "factImp",
    "//ATOM_PLACEHOLDER_power": "power",
    "//ATOM_PLACEHOLDER_pow": "pow",
    "//ATOM_PLACEHOLDER_powerAlt": "powerAlt",
    "//ATOM_PLACEHOLDER_equivalentes": "equivalentes",
    "//ATOM_PLACEHOLDER_l1": "l1",
    "//ATOM_PLACEHOLDER_fact": "fact",
    "//ATOM_PLACEHOLDER_factAcc": "factAcc",
    "//ATOM_PLACEHOLDER_factAlt": "factAlt",
    "//ATOM_PLACEHOLDER_factAcc_correct": "factAcc_correct",
    "//ATOM_PLACEHOLDER_equiv": "equiv",
    "//ATOM_PLACEHOLDER_mystery1": "mystery1",
    "//ATOM_PLACEHOLDER_mystery2": "mystery2",
    "//ATOM_PLACEHOLDER_mystery3": "mystery3",
    "//ATOM_PLACEHOLDER_mystery4": "mystery4"
  }
}