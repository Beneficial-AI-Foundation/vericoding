{
  "skeleton": "\n//ATOM_PLACEHOLDER_isPeek\n\n//ATOM_PLACEHOLDER_peekSum\n\n \n//ATOM_PLACEHOLDER_mPeekSum\n\n",
  "atoms": {
    "isPeek": [
      [],
      "// ATOM \n\n predicate isPeek(v:array<int>,i:int)\n reads v\n requires 0<=i<v.Length\n {forall k::0<=k<i ==> v[i]>=v[k]}\n",
      "predicate"
    ],
    "peekSum": [
      [
        "isPeek"
      ],
      "// ATOM \n\n function peekSum(v:array<int>,i:int):int\n reads v\n requires 0<=i<=v.Length\n {\n  if (i==0) then 0\n  else if isPeek(v,i-1) then v[i-1]+peekSum(v,i-1)\n  else peekSum(v,i-1)\n }\n",
      "function"
    ],
    "mPeekSum": [
      [
        "peekSum"
      ],
      "// SPEC \n\n \n method mPeekSum(v:array<int>) returns (sum:int)\n requires  v.Length>0\n ensures sum==peekSum(v,v.Length)\n //Implement and verify an O(v.Length) algorithm to solve this problem\n {\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_isPeek": "isPeek",
    "//ATOM_PLACEHOLDER_peekSum": "peekSum",
    "//ATOM_PLACEHOLDER_mPeekSum": "mPeekSum"
  }
}