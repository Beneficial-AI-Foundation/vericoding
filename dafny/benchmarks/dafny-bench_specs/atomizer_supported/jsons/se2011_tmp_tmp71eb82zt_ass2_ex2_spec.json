{
  "skeleton": "// ex2\n\n// this was me playing around to try and get an ensures for the method \n/*predicate method check(a: array<int>, seclar:int)\nrequires a.Length > 0\nreads a\n{ ensures exists i :: 0 <= i < a.Length && forall j :: (0 <= j < a.Length && j != i) ==> (a[i] >= a[j]) && (seclar <= a[i]) && ( if a[j] != a[i] then seclar >= a[j] else seclar <= a[j]) } */\n\n//ATOM_PLACEHOLDER_SecondLargest\n\n//ATOM_PLACEHOLDER_Main\n\n\n\n",
  "atoms": {
    "SecondLargest": [
      [],
      "// SPEC \n// ex2\n\n// this was me playing around to try and get an ensures for the method \n\nmethod SecondLargest(a:array<int>) returns (seclar:int)\nrequires a.Length > 0\n//ensures exists i :: 0 <= i < a.Length && forall j :: (0 <= j < a.Length && j != i) ==> (a[i] >= a[j]) && (seclar <= a[i]) && ( if a[j] != a[i] then seclar >= a[j] else seclar <= a[j])\n{\n}\n",
      "method"
    ],
    "Main": [
      [
        "SecondLargest"
      ],
      "// SPEC \n\nmethod Main()\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_SecondLargest": "SecondLargest",
    "//ATOM_PLACEHOLDER_Main": "Main"
  }
}