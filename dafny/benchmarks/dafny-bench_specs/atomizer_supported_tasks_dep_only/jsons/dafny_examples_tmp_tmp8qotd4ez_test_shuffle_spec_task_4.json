{
  "skeleton": "\n//ATOM_PLACEHOLDER_random//ATOM_PLACEHOLDER_eqMultiset_t\n\n//ATOM_PLACEHOLDER_eqMultiset\n\n//ATOM_PLACEHOLDER_swap\n  \n//ATOM_PLACEHOLDER_getAllShuffledDataEntries\n\n//ATOM_PLACEHOLDER_set_of_seq\n\n//ATOM_PLACEHOLDER_in_set_of_seq//ATOM_PLACEHOLDER_subset_set_of_seq//ATOM_PLACEHOLDER_getRandomDataEntry\n\n\n\n",
  "atoms": {
    "getRandomDataEntry": [
      [
        "set_of_seq",
        "random"
      ],
      "// SPEC \n  \nmethod getRandomDataEntry<T(==)>(m_workList: array<T>, avoidSet: seq<T>) returns (e: T)\n  requires m_workList.Length > 0\n//  ensures set_of_seq(avoidSet) < set_of_seq(m_workList[..]) ==> e !in avoidSet\n//  ensures avoidSet < m_workList[..] ==> e in m_workList[..]\n{\n}\n",
      "method"
    ],
    "random": [
      [],
      "// SPEC \n\nmethod random(a: int, b: int) returns (r: int)\n//  requires a <= b\n  ensures a <= b ==> a <= r <= b\n",
      "method"
    ],
    "set_of_seq": [
      [],
      "// ATOM \n\nfunction set_of_seq<T>(s: seq<T>): set<T>\n{\n  set x: T | x in s :: x\n}\n",
      "function"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_random": "random",
    "//ATOM_PLACEHOLDER_set_of_seq": "set_of_seq",
    "//ATOM_PLACEHOLDER_getRandomDataEntry": "getRandomDataEntry"
  }
}