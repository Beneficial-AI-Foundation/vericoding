{
  "skeleton": "// Sum of elements of A from indices 0 to end.\n// end is inclusive! (not James's normal way of thinking!!)\n//ATOM_PLACEHOLDER_SumUpto\n\n//ATOM_PLACEHOLDER_Sum\n\n//ATOM_PLACEHOLDER_Percentile\n\n// example showing that, with the original postcondition, the answer is non-unique!\n//ATOM_PLACEHOLDER_PercentileNonUniqueAnswer\n\n\n// proof that, with the corrected postcondition, the answer is unique\n//ATOM_PLACEHOLDER_PercentileUniqueAnswer\n// lemma for previous proof: when an array has strictly positive elements, the\n// sums strictly increase left to right\n//ATOM_PLACEHOLDER_SumUpto_increase\n\n\n\n",
  "atoms": {
    "Percentile": [
      [
        "Sum",
        "SumUpto"
      ],
      "// SPEC \n\nmethod Percentile(p: real, A: array<real>, total: real) returns (i: int)\n  requires forall i | 0 <= i < A.Length :: A[i] > 0.0\n  requires 0.0 <= p <= 100.0\n  requires total == Sum(A)\n  requires total > 0.0\n  ensures -1 <= i < A.Length\n  ensures SumUpto(A, i) <= (p/100.0) * total\n  ensures i+1 < A.Length ==> SumUpto(A, i+1) > (p/100.0) * total\n{\n}\n",
      "method"
    ],
    "Sum": [
      [
        "SumUpto"
      ],
      "// ATOM \n\nfunction Sum(A: array<real>): real\n  reads A\n{\n  SumUpto(A, A.Length-1)\n}\n",
      "function"
    ],
    "SumUpto": [
      [],
      "// ATOM \n// Sum of elements of A from indices 0 to end.\n// end is inclusive! (not James's normal way of thinking!!)\nfunction SumUpto(A: array<real>, end: int): real\n  requires -1 <= end < A.Length\n  reads A\n{\n  if end == -1 then\n    0.0\n  else\n    A[end] + SumUpto(A, end-1)\n}\n",
      "function"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_SumUpto": "SumUpto",
    "//ATOM_PLACEHOLDER_Sum": "Sum",
    "//ATOM_PLACEHOLDER_Percentile": "Percentile"
  }
}