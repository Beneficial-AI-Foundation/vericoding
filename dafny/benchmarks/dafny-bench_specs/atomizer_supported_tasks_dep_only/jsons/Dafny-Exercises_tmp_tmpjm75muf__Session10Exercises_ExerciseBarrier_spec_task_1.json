{
  "skeleton": "\n\n\n//Method barrier below receives an array and an integer p\n//and returns a boolean b which is true if and only if \n//all the positions to the left of p and including also position p contain elements \n//that are strictly smaller than all the elements contained in the positions to the right of p \n\n//Examples:\n// If v=[7,2,5,8] and p=0 or p=1 then the method must return false, \n// but for p=2 the method should return true\n//1.Specify the method\n//2.Implement an O(v.size()) method\n//3.Verify the method\n\n//ATOM_PLACEHOLDER_barrier\nrequires v.Length > 0\nrequires 0<=p<v.Length\nensures b==forall k,l::0<=k<=p && p<l<v.Length ==> v[k]<v[l]\n{\n    var i:=1;\n    var max:=0;\n    \n    while(i<=p)\n    {\n        if(v[i]>v[max]){\n            max:=i;\n        }\n        \n        i:=i+1;\n    }\n\n    while(i<v.Length && v[i]>v[max])\n    {\n        i:=i+1;\n    }\n    b:=i==v.Length;\n}\n\n\nrequires v.Length > 0\nrequires 0<=p<v.Length\nensures b==forall k,l::0<=k<=p && p<l<v.Length ==> v[k]<v[l]\n{\n    var i:=1;\n    var max:=0;\n    \n    while(i<=p)\n    {\n        if(v[i]>v[max]){\n            max:=i;\n        }\n        \n        i:=i+1;\n    }\n\n    while(i<v.Length && v[i]>v[max])\n    {\n        i:=i+1;\n    }\n    b:=i==v.Length;\n}\n\n",
  "atoms": {
    "barrier": [
      [],
      "// SPEC \n\n\n\n//Method barrier below receives an array and an integer p\n//and returns a boolean b which is true if and only if \n//all the positions to the left of p and including also position p contain elements \n//that are strictly smaller than all the elements contained in the positions to the right of p \n\n//Examples:\n// If v=[7,2,5,8] and p=0 or p=1 then the method must return false, \n// but for p=2 the method should return true\n//1.Specify the method\n//2.Implement an O(v.size()) method\n//3.Verify the method\n\nmethod barrier(v:array<int>,p:int) returns (b:bool)\n//Give the precondition\n//Give the postcondition\n//{\n}\nrequires v.Length > 0\nrequires 0<=p<v.Length\nensures b==forall k,l::0<=k<=p && p<l<v.Length ==> v[k]<v[l]\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_barrier": "barrier"
  }
}