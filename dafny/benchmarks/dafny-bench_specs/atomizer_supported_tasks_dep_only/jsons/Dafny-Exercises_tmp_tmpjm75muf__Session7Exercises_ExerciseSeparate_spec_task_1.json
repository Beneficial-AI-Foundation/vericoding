{
  "skeleton": "//ATOM_PLACEHOLDER_strictNegative\n\n//ATOM_PLACEHOLDER_positive\n\n//ATOM_PLACEHOLDER_isPermutation\n\n/**\nreturns an index st new array is a permutation of the old array\npositive first and then strictnegative, i is the firs neg or len if not any */\n//ATOM_PLACEHOLDER_separate\n\n",
  "atoms": {
    "strictNegative": [
      [],
      "// ATOM \npredicate strictNegative(v:array<int>,i:int,j:int)\nreads v\nrequires 0<=i<=j<=v.Length\n{forall u | i<=u<j :: v[u]<0}\n",
      "predicate"
    ],
    "positive": [
      [],
      "// ATOM \n\npredicate positive(s:seq<int>)\n{forall u::0<=u<|s| ==> s[u]>=0}\n",
      "predicate"
    ],
    "isPermutation": [
      [],
      "// ATOM \n\npredicate isPermutation(s:seq<int>, t:seq<int>)\n{multiset(s)==multiset(t)}\n\n/**\nreturns an index st new array is a permutation of the old array\npositive first and then strictnegative, i is the firs neg or len if not any */\n",
      "predicate"
    ],
    "separate": [
      [
        "isPermutation",
        "strictNegative",
        "positive"
      ],
      "// SPEC \nmethod separate(v:array<int>) returns (i:int)\nmodifies v\nensures 0<=i<=v.Length\nensures positive(v[0..i]) && strictNegative(v,i,v.Length)\nensures isPermutation(v[0..v.Length], old(v[0..v.Length]))\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_strictNegative": "strictNegative",
    "//ATOM_PLACEHOLDER_positive": "positive",
    "//ATOM_PLACEHOLDER_isPermutation": "isPermutation",
    "//ATOM_PLACEHOLDER_separate": "separate"
  }
}