{
  "skeleton": "//ATOM_PLACEHOLDER_Tree//ATOM_PLACEHOLDER_Main\n\n//ATOM_PLACEHOLDER_PrintTreeNumbersInorder\n\n//ATOM_PLACEHOLDER_NumbersInTree\n\n//ATOM_PLACEHOLDER_NumbersInSequence\n\n//ATOM_PLACEHOLDER_BST\n\n//ATOM_PLACEHOLDER_Inorder\n\n//ATOM_PLACEHOLDER_Ascending\n\n//ATOM_PLACEHOLDER_NoDuplicates\n\n/*\n\tGoal: Implement correctly, clearly. No need to document the proof obligations.\n*/\n//ATOM_PLACEHOLDER_BuildBST\n\n/*\n\tGoal: Implement correctly, efficiently, clearly, documenting the proof obligations\n\tas we've learned, with assertions and a lemma for each proof goal\n*/\n//ATOM_PLACEHOLDER_InsertBST\n{\n\tmatch t0 \n\t{\n\t\tcase Empty => t := Node(x, Empty, Empty);\n\n\t\tcase Node(i, left, right) => \n\t\t{\n\t\t\tvar tmp:Tree:= Empty;\n\t\t\tif x < i\n\t\t\t{\n\t\t\t\tLemmaBinarySearchSubtree(i,left,right);\n\t\t\t\ttmp :=  InsertBST(left, x);\n\t\t\t\tt := Node(i, tmp, right);\n\t\t\t\tghost var right_nums := Inorder(right);\n\t\t\t\tghost var left_nums := Inorder(left);\n\t\t\t\tghost var all_nums := Inorder(t0);\n\t\t\t\t// assert all_nums[..|left_nums|] == left_nums;\n\t\t\t\tghost var new_all_nums := Inorder(t);\n\t\t\t\tghost var new_left_nums := Inorder(tmp);\n\t\t\t\t// assert Ascending(new_left_nums+ [i] + right_nums);\n\n\n\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tlemma_all_small(new_left_nums,i);\n\t\t\t\t\n\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tLemmaBinarySearchSubtree(i,left,right);\n\t\t\t\ttmp := InsertBST(right, x);\n\t\t\t\tt := Node(i, left, tmp);\n\n\t\t\t\tghost var right_nums := Inorder(right);\n\t\t\t\tghost var left_nums := Inorder(left);\n\t\t\t\tghost var all_nums := Inorder(t0);\n\t\t\t\t// assert all_nums[..|left_nums|] == left_nums;\n\t\t\t\tghost var new_all_nums := Inorder(t);\n\t\t\t\tghost var new_right_nums := Inorder(tmp);\n\t\t\t\t// assert Ascending(left_nums+ [i] + right_nums);\n\n\n\t\t\t\t// assert forall j :: j in NumbersInSequence(all_nums[|left_nums|+1..]) ==> j > i;\n\t\t\t\t// assert forall j :: j in NumbersInSequence(all_nums[|left_nums|+1..])+{x} ==> j > i;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tlemma_all_big(new_right_nums,i);\n\t\t\t\t\n\t\t\t\t// assert Ascending(new_right_nums+[i]);\n\n\t\t\t}\n\t\t}\n\t}\n}\n\n//ATOM_PLACEHOLDER_LemmaBinarySearchSubtree\n\n//ATOM_PLACEHOLDER_LemmaAscendingSubsequence\n\n//ATOM_PLACEHOLDER_unknown_3181 lemma_all_small(q:seq<int>,i:int)\n\trequires forall k:: k in NumbersInSequence(q) ==> k < i\n\trequires forall k:: 0 <= k < |q| ==> q[k] in NumbersInSequence(q)\n\tensures forall j::0<=j < |q| ==> q[j] < i\n{}\n\n//ATOM_PLACEHOLDER_unknown_3407 lemma_all_big(q:seq<int>,i:int)\n\trequires forall k:: k in NumbersInSequence(q) ==> k > i\n\trequires forall k:: 0 <= k < |q| ==> q[k] in NumbersInSequence(q)\n\tensures forall j::0<=j < |q| ==> q[j] > i\n{}\n lemma_all_big(q:seq<int>,i:int)\n\trequires forall k:: k in NumbersInSequence(q) ==> k > i\n\trequires forall k:: 0 <= k < |q| ==> q[k] in NumbersInSequence(q)\n\tensures forall j::0<=j < |q| ==> q[j] > i\n{}\n",
  "atoms": {
    "InsertBST": [
      [
        "NumbersInTree",
        "BST"
      ],
      "// SPEC \nmethod InsertBST(t0: Tree, x: int) returns (t: Tree)\n\trequires BST(t0) && x !in NumbersInTree(t0)\n\tensures BST(t) && NumbersInTree(t) == NumbersInTree(t0)+{\n}\n{\n}\n",
      "method"
    ],
    "Inorder": [
      [],
      "// ATOM \n\nfunction Inorder(t: Tree): seq<int>\n{\n\tmatch t {\n\t\tcase Empty => []\n\t\tcase Node(n',nt1,nt2) => Inorder(nt1)+[n']+Inorder(nt2)\n\t}\n}\n",
      "function"
    ],
    "BuildBST": [
      [
        "NoDuplicates",
        "InsertBST",
        "NumbersInSequence",
        "NumbersInTree",
        "BST"
      ],
      "// SPEC \nmethod BuildBST(q: seq<int>) returns (t: Tree)\n\trequires NoDuplicates(q)\n\tensures BST(t) && NumbersInTree(t) == NumbersInSequence(q)\n{\n}\n\n/*\n\tGoal: Implement correctly, efficiently, clearly, documenting the proof obligations\n\tas we've learned, with assertions and a lemma for each proof goal\n*/\n",
      "method"
    ],
    "NumbersInSequence": [
      [],
      "// ATOM \n\nfunction NumbersInSequence(q: seq<int>): set<int>\n{\n\tset x | x in q\n}\n",
      "function"
    ],
    "BST": [
      [
        "Ascending",
        "Inorder"
      ],
      "// ATOM \n\npredicate BST(t: Tree)\n{\n\tAscending(Inorder(t))\n}\n",
      "predicate"
    ],
    "Ascending": [
      [],
      "// ATOM \n\npredicate Ascending(q: seq<int>)\n{\n\tforall i,j :: 0 <= i < j < |q| ==> q[i] < q[j]\n}\n",
      "predicate"
    ],
    "NumbersInTree": [
      [
        "NumbersInSequence",
        "Inorder"
      ],
      "// ATOM \n\nfunction NumbersInTree(t: Tree): set<int>\n{\n\tNumbersInSequence(Inorder(t))\n}\n",
      "function"
    ],
    "NoDuplicates": [
      [],
      "// ATOM \n\npredicate NoDuplicates(q: seq<int>) { forall i,j :: 0 <= i < j < |q| ==> q[i] != q[j] }\n\n/*\n\tGoal: Implement correctly, clearly. No need to document the proof obligations.\n*/\n",
      "predicate"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_NumbersInTree": "NumbersInTree",
    "//ATOM_PLACEHOLDER_NumbersInSequence": "NumbersInSequence",
    "//ATOM_PLACEHOLDER_BST": "BST",
    "//ATOM_PLACEHOLDER_Inorder": "Inorder",
    "//ATOM_PLACEHOLDER_Ascending": "Ascending",
    "//ATOM_PLACEHOLDER_NoDuplicates": "NoDuplicates",
    "//ATOM_PLACEHOLDER_BuildBST": "BuildBST",
    "//ATOM_PLACEHOLDER_InsertBST": "InsertBST"
  }
}