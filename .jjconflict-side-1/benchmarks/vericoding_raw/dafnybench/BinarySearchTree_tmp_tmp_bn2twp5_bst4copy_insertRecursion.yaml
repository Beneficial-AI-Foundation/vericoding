vc-preamble: |-
  datatype Tree = Empty | Node(left: Tree, value: int, right: Tree)

  predicate BinarySearchTree(tree: Tree)
    decreases tree
  {
    match tree
    case Empty => true
    case Node(_,_,_) =>
      (tree.left == Empty || tree.left.value < tree.value)
      && (tree.right == Empty || tree.right.value > tree.value)
      && BinarySearchTree(tree.left) && BinarySearchTree(tree.right)
      && minValue(tree.right, tree.value) && maxValue(tree.left, tree.value)
  }

  predicate maxValue(tree: Tree, max: int)
    decreases tree
  {
    match tree
    case Empty => true
    case Node(left,v,right) => (max > v) && maxValue(left, max) && maxValue(right, max)
  }

  predicate minValue(tree: Tree, min: int)
    decreases tree
  {
    match tree
    case Empty => true
    case Node(left,v,right) => (min < v) && minValue(left, min) && minValue(right, min)
  }

vc-helpers: |-
  // <vc-helpers>
  // </vc-helpers>

vc-spec: |-
  method insertRecursion(tree: Tree, value: int) returns (res: Tree)
    requires BinarySearchTree(tree)
    decreases tree;
    ensures res != Empty ==> BinarySearchTree(res)
    ensures forall x :: minValue(tree, x) && x < value ==> minValue(res, x)
    ensures forall x :: maxValue(tree, x) && x > value ==> maxValue(res, x)

vc-code: |-
  {
    match tree {
      case Empty => res := Node(Empty, value, Empty);
      case Node(_,_,_) =>
        var temp: Tree;
        if(value == tree.value) {
          return tree;
        }
        if(value < tree.value){
          temp := insertRecursion(tree.left, value);
          res := Node(temp, tree.value, tree.right);
        }else if (value > tree.value){
          temp := insertRecursion(tree.right, value);
          res := Node(tree.left, tree.value, temp);
        }
    }
  }

vc-postamble: |-

