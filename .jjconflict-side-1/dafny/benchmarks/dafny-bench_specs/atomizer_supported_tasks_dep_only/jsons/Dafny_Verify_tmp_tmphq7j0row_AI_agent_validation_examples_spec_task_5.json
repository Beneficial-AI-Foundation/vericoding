{
  "skeleton": "//ATOM_PLACEHOLDER_Power\n\n//ATOM_PLACEHOLDER_ComputePower\n\n\n// Original davinci-003 completion:\n// method ComputePower1(N: int) returns (y: nat) requires N >= 0\n//     ensures y == Power(N)\n// {\n//     y := 1;\n//     var x := 0; \n//     while x != N\n//         decreases N - x\n//         invariant 0 <= x <= N\n//         invariant y == Power(x)\n//     {\n//         x, y := x + 1, y + y;\n//     }\n// }\n\n\n\n// Fine_tuned davinci-003 completion:\n// method ComputePower1(N: int) returns (y: nat) requires N >= 0\n//     ensures y == Power(N)\n// {\n//     y := 1;\n//     var x := 0; \n//     while x != N\n//         decreases N - x\n//         invariant 0 <= x <= N\n//         invariant y == Power(x)\n//     {\n//         x, y := x + 1, y + y;\n//     }\n// }\n\n//ATOM_PLACEHOLDER_Max\n\n// Original davinci-003 completion:\n// method Max(a: array<nat>) returns (m: int)\n//     requires a.Length > 0\n//     ensures forall i :: 0 <= i < a.Length ==> a[i] <= m\n//     ensures exists i :: 0 <= i < a.Length && m == a[i] \n// {\n//     m := a[0];\n//     var n := 1;\n//     while n != a.Length\n//     {\n//         if m < a[n] {\n//             m := a[n]; \n//         }\n//         n := n + 1; \n//         // Loop invariant: 0 <= n <= a.Length && forall i :: 0 <= i < n ==> a[i] <= m\n//     }\n// }\n\n// Fine_tuned davinci-003 completion:\n// method Max1(a: array<nat>) returns (m: int)\n//     ensures forall i :: 0 <= i < a.Length ==> a[i] <= m\n//     ensures (m == 0 && a.Length == 0) || exists i :: 0 <= i < a.Length && m == a[i]\n// {\n//     m := 0;\n//     var n := 0;\n//     while n != a.Length\n//         invariant 0 <= n <= a.Length\n//         invariant forall i :: 0 <= i < n ==> a[i] <= m\n//     {\n//         if m < a[n] {\n//             m := a[n]; \n//         }\n//         n := n + 1; \n//     }\n// }\n\n//ATOM_PLACEHOLDER_Cube\n\n// Original davinci-003 completion:\n// method Cube(n: nat) returns (c: nat) \n//     ensures c == n * n * n\n// {\n//     c := 0;\n//     var i := 0;\n//     var k := 1;\n//     var m := 6;\n//     // Loop invariant: c = i^3\n//     while i != n\n//     {\n//         c, k, m := c + k, k + m, m + 6; \n//         i := i + 1;\n//     }\n// }\n\n// Fine_tuned davinci-003 completion:\n// method Cube1(n: nat) returns (c: nat) \n//     ensures c == n * n * n\n// {\n//     c := 0;\n//     var i := 0;\n//     var k := 1;\n//     var m := 6;\n//     while i != n\n//         invariant 0 <= i <= n\n//         invariant c == i * k * m\n//     {\n//         c, k, m := c + k, k + m, m + 6; \n//         i := i + 1;\n//     }\n// }\n\n\n\n//ATOM_PLACEHOLDER_IncrementMatrix\n\n// Original davinci-003 completion:\n// method IncrementMatrix(a: array2<int>)\n//     modifies a\n//     ensures forall i, j :: 0 <= i < a.Length0 && 0 <= j < a.Length1 ==> a[i,j] == old(a[i,j]) + 1\n// {\n//     var m := 0;\n//     while m != a.Length0\n//     {\n//         var n := 0;\n//         while n != a.Length1\n//         {\n//             // Loop invariant: forall i, j :: 0 <= i < m && 0 <= j < n ==> a[i,j] == old(a[i,j]) + 1\n//             a[m,n] := a[m,n] + 1;\n//             n := n + 1; \n//         }\n//         m := m + 1; \n//     }\n// }\n\n// Fine_tuned davinci-003 completion:\n// method IncrementMatrix1(a: array2<int>)\n//     modifies a\n//     ensures forall i, j :: 0 <= i < a.Length0 && 0 <= j < a.Length1 ==> a[i,j] == old(a[i,j]) + 1\n// {\n//     var m := 0;\n//     while m != a.Length0\n//         invariant 0 <= m <= a.Length0 && 0 <= j < a.Length1 <= a.Length2\n//         invariant forall i, j :: 0 <= i < m && 0 <= j < a.Length1 ==> a[i,j] == old(a[i,j]) + 1\n//     {\n//         var n := 0;\n//         while n != a.Length1\n//         invariant 0 <= n <= a.Length2\n//         invariant forall i, j :: 0 <= i < m && 0 <= j < a.Length1 ==> a[i,j] == old(a[i,j]) + 1\n//         {\n//             a[m,n] := a[m,n] + 1;\n//         n := n + 1; \n//         }\n//         m := m + 1; \n//     }\n// }\n\n//ATOM_PLACEHOLDER_CopyMatrix\n\n// Original davinci-003 completion:\n// method CopyMatrix(src: array2, dst: array2)\n//     requires src.Length0 == dst.Length0 && src.Length1 == dst.Length1\n//     modifies dst\n//     ensures forall i, j :: 0 <= i < src.Length0 && 0 <= j < src.Length1 ==> dst[i,j] == old(src[i,j]) \n// {\n//     var m := 0;\n//     while m != src.Length0\n//     {\n//         var n := 0;\n//         while n != src.Length1\n//         {\n//             dst[m,n] := src[m,n]; \n//             n := n + 1;\n//             // Loop invariant: forall i, j :: 0 <= i < m && 0 <= j < n ==> dst[i,j] == old(src[i,j])\n//         }\n//         m := m + 1; \n//     }\n// }\n\n// Fine_tuned davinci-003 completion:\n// method CopyMatrix1(src: array2, dst: array2)\n//     requires src.Length0 == dst.Length0 && src.Length1 == dst.Length1\n//     modifies dst\n//     ensures forall i, j :: 0 <= i < src.Length0 && 0 <= j < src.Length1 ==> dst[i,j] == old(src[i,j])\n//     var m := 0;\n//     while m != src.Length0\n//         invariant 0 <= m <= src.Length0\n//         invariant forall i, j :: 0 <= i < m && 0 <= j < src.Length1 ==> dst[i,j] == old(src[i,j])\n//     {\n//         var n := 0;\n//         while n != src.Length1\n//            invariant 0 <= n <= src.Length1\n//         {\n//            dst[m,n] := src[m,n]; n := n + 1;\n//         }\n//         m := m + 1; \n//     }\n\n\n\n\n//ATOM_PLACEHOLDER_DoubleArray\n\n// Original davinci-003 completion:\n// method DoubleArray(src: array<int>, dst: array<int>)\n//     requires src.Length == dst.Length\n//     modifies dst\n//     ensures forall i :: 0 <= i < src.Length ==> dst[i] == 2 * old(src[i])\n// {\n//     var n := 0;\n//     var i : int := 0;\n//     while n != src.Length\n//     {\n//         dst[n] := 2 * src[n];\n//         n := n + 1;\n//         i := i + 1;\n//     } \n//     assert i == src.Length;\n// }\n\n// Fine_tuned davinci-003 completion:\n// method DoubleArray1(src: array<int>, dst: array<int>)\n//     requires src.Length == dst.Length\n//     modifies dst\n//     ensures forall i :: 0 <= i < src.Length ==> dst[i] == 2 * old(src[i])\n// {\n//     var n := 0;\n//     while n != src.Length\n//         invariant 0 <= n <= src.Length\n//         invariant forall i :: 0 <= i < n ==> dst[i] == 2 * old(src[i])\n//     {\n//         dst[n] := 2 * src[n]; n := n + 1;\n//     }\n// }\n\n//ATOM_PLACEHOLDER_RotateLeft\n\n// Original davinci-003 completion:\n// method RotateLeft(a: array)\n//     requires a.Length > 0\n//     modifies a\n//     ensures forall i :: 0 <= i < a.Length - 1 ==> a[i] == old(a[(i+1)]) \n//     ensures a[a.Length -1] == old(a[0])\n// {\n//     var n := 0;\n//     // loop invariant: forall i :: 0 <= i < n ==> a[i] == old(a[(i+1)])\n//     while n != a.Length - 1\n//     {\n//         a[n], a[n+1] := a[n+1], a[n];\n//         n := n + 1; \n//     }\n// }\n\n// Fine_tuned davinci-003 completion:\n// method RotateLeft1(a: array)\n//     requires a.Length > 0\n//     modifies a\n//     ensures forall i :: 0 <= i < a.Length - 1 ==> a[i] == old(a[(i+1)])\n//     ensures a[a.Length -1] == old(a[0])\n// {\n//     var n := 0;\n//     while n != a.Length - 1\n//         invariant 0 <= n <= a.Length - 1\n//         invariant forall i :: 0 <= i < n ==> a[i] == old(a[(i+1)])\n//         invariant forall i :: 0 <= i < a.Length - 1 ==> a[i] == old(a[(i+1)])\n//     {\n//         a[n], a[n+1] := a[n+1], a[n];\n//         n := n + 1;\n//     }\n// }\n\n//ATOM_PLACEHOLDER_RotateRight\n\n// Original davinci-003 completion:\n// method RotateRight(a: array)\n//     requires a.Length > 0\n//     modifies a\n//     ensures forall i :: 1<= i < a.Length ==> a[i] == old(a[(i-1)]) \n//     ensures a[0] == old(a[a.Length-1])\n// {\n//     var n := 1;\n//     var temp := a[0];\n//     while n != a.Length\n//     {\n//         a[0] := a[n];\n//         a[n] := temp;\n//         temp := a[0];\n//         n := n + 1;\n//         // loop invariant:\n//         // forall k :: 0 <= k < n ==> a[k] == old(a[k+1])\n//     } \n// }\n\n// Fine_tuned davinci-003 completion:\n// method RotateRight1(a: array)\n//     requires a.Length > 0\n//     modifies a\n//     ensures forall i :: 1<= i < a.Length ==> a[i] == old(a[(i-1)])\n//     ensures a[0] == old(a[a.Length-1])\n// {\n//     var n := 1;\n//     while n != a.Length\n//         invariant 1 <= n <= a.Length\n//         invariant forall i :: 1<= i < n ==> a[i] == old(a[(i-1)])\n//         invariant forall i :: 1<= i < a.Length ==> a[i] == old(a[i])\n//     {\n//         a[0], a[n] := a[n], a[0]; n := n + 1;\n//     }\n// }\n\n\n// Original davinci-003 completion:\n// method RotateRight(a: array)\n//     requires a.Length > 0\n//     modifies a\n//     ensures forall i :: 1<= i < a.Length ==> a[i] == old(a[(i-1)]) \n//     ensures a[0] == old(a[a.Length-1])\n// {\n//     var n := 1;\n//     var temp := a[0];\n//     while n != a.Length\n//     {\n//         a[0] := a[n];\n//         a[n] := temp;\n//         temp := a[0];\n//         n := n + 1;\n//         // loop invariant:\n//         // forall k :: 0 <= k < n ==> a[k] == old(a[k+1])\n//     } \n// }\n\n// Fine_tuned davinci-003 completion:\n// method RotateRight1(a: array)\n//     requires a.Length > 0\n//     modifies a\n//     ensures forall i :: 1<= i < a.Length ==> a[i] == old(a[(i-1)])\n//     ensures a[0] == old(a[a.Length-1])\n// {\n//     var n := 1;\n//     while n != a.Length\n//         invariant 1 <= n <= a.Length\n//         invariant forall i :: 1<= i < n ==> a[i] == old(a[(i-1)])\n//         invariant forall i :: 1<= i < a.Length ==> a[i] == old(a[i])\n//     {\n//         a[0], a[n] := a[n], a[0]; n := n + 1;\n//     }\n// }\n",
  "atoms": {
    "Cube": [
      [
        "Max"
      ],
      "// SPEC \n\n// Original davinci-003 completion:\n// method Max(a: array<nat>) returns (m: int)\n//     requires a.Length > 0\n//     ensures forall i :: 0 <= i < a.Length ==> a[i] <= m\n//     ensures exists i :: 0 <= i < a.Length && m == a[i] \n// {\n}\n\n// Fine_tuned davinci-003 completion:\n// method Max1(a: array<nat>) returns (m: int)\n//     ensures forall i :: 0 <= i < a.Length ==> a[i] <= m\n//     ensures (m == 0 && a.Length == 0) || exists i :: 0 <= i < a.Length && m == a[i]\n// {\n}\n\nmethod Cube(n: nat) returns (c: nat) \n    ensures c == n * n * n\n{\n}\n",
      "method"
    ],
    "Max": [
      [
        "Power"
      ],
      "// SPEC \n\n\n// Original davinci-003 completion:\n// method ComputePower1(N: int) returns (y: nat) requires N >= 0\n//     ensures y == Power(N)\n// {\n}\n\n\n\n// Fine_tuned davinci-003 completion:\n// method ComputePower1(N: int) returns (y: nat) requires N >= 0\n//     ensures y == Power(N)\n// {\n}\n\nmethod Max(a: array<nat>) returns (m: int)\n    ensures forall i :: 0 <= i < a.Length ==> a[i] <= m\n    ensures (m == 0 && a.Length == 0) || exists i :: 0 <= i < a.Length && m == a[i] \n{\n}\n",
      "method"
    ],
    "IncrementMatrix": [
      [
        "Cube"
      ],
      "// SPEC \n\n// Original davinci-003 completion:\n// method Cube(n: nat) returns (c: nat) \n//     ensures c == n * n * n\n// {\n}\n\n// Fine_tuned davinci-003 completion:\n// method Cube1(n: nat) returns (c: nat) \n//     ensures c == n * n * n\n// {\n}\n\n\n\nmethod IncrementMatrix(a: array2<int>)\n    modifies a\n    ensures forall i, j :: 0 <= i < a.Length0 && 0 <= j < a.Length1 ==> a[i,j] == old(a[i,j]) + 1\n{\n}\n",
      "method"
    ],
    "CopyMatrix": [
      [
        "IncrementMatrix"
      ],
      "// SPEC \n\n// Original davinci-003 completion:\n// method IncrementMatrix(a: array2<int>)\n//     modifies a\n//     ensures forall i, j :: 0 <= i < a.Length0 && 0 <= j < a.Length1 ==> a[i,j] == old(a[i,j]) + 1\n// {\n}\n\n// Fine_tuned davinci-003 completion:\n// method IncrementMatrix1(a: array2<int>)\n//     modifies a\n//     ensures forall i, j :: 0 <= i < a.Length0 && 0 <= j < a.Length1 ==> a[i,j] == old(a[i,j]) + 1\n// {\n}\n\nmethod CopyMatrix(src: array2, dst: array2)\n    requires src.Length0 == dst.Length0 && src.Length1 == dst.Length1\n    modifies dst\n    ensures forall i, j :: 0 <= i < src.Length0 && 0 <= j < src.Length1 ==> dst[i,j] == old(src[i,j]) \n{\n}\n",
      "method"
    ],
    "Power": [
      [],
      "// ATOM \nfunction Power(n: nat): nat {\n    if n == 0 then 1 else 2 * Power(n - 1)\n}\n",
      "function"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_Power": "Power",
    "//ATOM_PLACEHOLDER_Max": "Max",
    "//ATOM_PLACEHOLDER_Cube": "Cube",
    "//ATOM_PLACEHOLDER_IncrementMatrix": "IncrementMatrix",
    "//ATOM_PLACEHOLDER_CopyMatrix": "CopyMatrix"
  }
}