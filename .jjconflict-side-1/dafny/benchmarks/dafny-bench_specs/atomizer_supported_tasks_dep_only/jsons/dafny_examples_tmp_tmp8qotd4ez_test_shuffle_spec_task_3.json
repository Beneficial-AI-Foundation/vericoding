{
  "skeleton": "\n//ATOM_PLACEHOLDER_random//ATOM_PLACEHOLDER_eqMultiset_t\n\n//ATOM_PLACEHOLDER_eqMultiset\n\n//ATOM_PLACEHOLDER_swap\n  \n//ATOM_PLACEHOLDER_getAllShuffledDataEntries\n\n//ATOM_PLACEHOLDER_set_of_seq\n\n//ATOM_PLACEHOLDER_in_set_of_seq//ATOM_PLACEHOLDER_subset_set_of_seq//ATOM_PLACEHOLDER_getRandomDataEntry\n\n\n\n",
  "atoms": {
    "getAllShuffledDataEntries": [
      [
        "swap",
        "random"
      ],
      "// SPEC \n  \nmethod getAllShuffledDataEntries<T(0)>(m_dataEntries: array<T>) returns (result: array<T>)\n  // requires m_dataEntries != null\n  // ensures result != null\n  ensures result.Length == m_dataEntries.Length\n  ensures multiset(result[..]) == multiset(m_dataEntries[..])\n{\n}\n",
      "method"
    ],
    "random": [
      [],
      "// SPEC \n\nmethod random(a: int, b: int) returns (r: int)\n//  requires a <= b\n  ensures a <= b ==> a <= r <= b\n",
      "method"
    ],
    "swap": [
      [],
      "// SPEC \n\nmethod swap<T>(a: array<T>, i: int, j: int)\n  // requires a != null\n  requires 0 <= i < a.Length && 0 <= j < a.Length\n  modifies a\n  ensures a[i] == old(a[j])\n  ensures a[j] == old(a[i])\n  ensures forall m :: 0 <= m < a.Length && m != i && m != j ==> a[m] == old(a[m])\n  ensures multiset(a[..]) == old(multiset(a[..]))\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_random": "random",
    "//ATOM_PLACEHOLDER_swap": "swap",
    "//ATOM_PLACEHOLDER_getAllShuffledDataEntries": "getAllShuffledDataEntries"
  }
}