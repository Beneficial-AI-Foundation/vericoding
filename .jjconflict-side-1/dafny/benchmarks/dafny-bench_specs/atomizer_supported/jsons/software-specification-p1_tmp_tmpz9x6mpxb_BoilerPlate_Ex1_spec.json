{
  "skeleton": "//ATOM_PLACEHOLDER_Tree//ATOM_PLACEHOLDER_Code//ATOM_PLACEHOLDER_serialise\n\n// Ex 1\n//ATOM_PLACEHOLDER_deserialiseAux\n\n//ATOM_PLACEHOLDER_deserialise\n\n// Ex 2\n//ATOM_PLACEHOLDER_testSerializeWithASingleLeaf\n\n//ATOM_PLACEHOLDER_testSerializeNullValues\n\n//ATOM_PLACEHOLDER_testSerializeWithAllElements\n\n// Ex 3 \n\n//ATOM_PLACEHOLDER_testDeseraliseWithASingleLeaf\n\n//ATOM_PLACEHOLDER_testDeserializeWithASingleNode\n\n//ATOM_PLACEHOLDER_testDeserialiseWithAllElements\n\n// Ex 4 \n//ATOM_PLACEHOLDER_SerialiseLemma\n\n\n//ATOM_PLACEHOLDER_DeserialisetAfterSerialiseLemma\n\n\n\n",
  "atoms": {
    "Tree": [
      [],
      "// ATOM \ndatatype Tree<V> = Leaf(V) | SingleNode(V, Tree<V>) | DoubleNode(V, Tree<V>, Tree<V>)\n",
      "datatype"
    ],
    "Code": [
      [],
      "// ATOM \n\ndatatype Code<V> = CLf(V) | CSNd(V) | CDNd(V)\n",
      "datatype"
    ],
    "serialise": [
      [],
      "// ATOM \n\nfunction serialise<V>(t : Tree<V>) : seq<Code<V>> \n{\n  match t {\n    case Leaf(v) => [ CLf(v) ]\n    case SingleNode(v, t) => serialise(t) + [ CSNd(v) ]\n    case DoubleNode(v, t1, t2) => serialise(t2) + serialise(t1) + [ CDNd(v) ]\n  }\n}\n",
      "function"
    ],
    "deserialiseAux": [
      [],
      "// ATOM \n\n// Ex 1\nfunction deserialiseAux<T>(codes: seq<Code<T>>, trees: seq<Tree<T>>): seq<Tree<T>>\n  requires |codes| > 0 || |trees| > 0\n  ensures |deserialiseAux(codes, trees)| >= 0\n{\n  if |codes| == 0 then trees\n  else\n    match codes[0] {\n      case CLf(v) => deserialiseAux(codes[1..], trees + [Leaf(v)])\n      case CSNd(v) => if (|trees| >= 1) then deserialiseAux(codes[1..], trees[..|trees|-1] + [SingleNode(v, trees[|trees|-1])]) else trees\n      case CDNd(v) => if (|trees| >= 2) then deserialiseAux(codes[1..], trees[..|trees|-2] + [DoubleNode(v, trees[|trees|-1], trees[|trees|-2])]) else trees\n    }\n}\n",
      "function"
    ],
    "deserialise": [
      [
        "deserialiseAux"
      ],
      "// ATOM \n\nfunction deserialise<T>(s:seq<Code<T>>):seq<Tree<T>>\n  requires |s| > 0\n{\n  deserialiseAux(s, [])\n}\n",
      "function"
    ],
    "testSerializeWithASingleLeaf": [
      [
        "serialise"
      ],
      "// SPEC \n\n// Ex 2\nmethod testSerializeWithASingleLeaf()\n{\n}\n",
      "method"
    ],
    "testSerializeNullValues": [
      [
        "serialise"
      ],
      "// SPEC \n\nmethod testSerializeNullValues()\n{\n}\n",
      "method"
    ],
    "testSerializeWithAllElements": [
      [
        "serialise"
      ],
      "// SPEC \n\nmethod testSerializeWithAllElements()\n{\n}\n",
      "method"
    ],
    "testDeseraliseWithASingleLeaf": [
      [
        "deserialise"
      ],
      "// SPEC \n\n// Ex 3 \n\nmethod testDeseraliseWithASingleLeaf() {\n}\n",
      "method"
    ],
    "testDeserializeWithASingleNode": [
      [
        "deserialise"
      ],
      "// SPEC \n\nmethod testDeserializeWithASingleNode()\n{\n}\n",
      "method"
    ],
    "testDeserialiseWithAllElements": [
      [
        "deserialise"
      ],
      "// SPEC \n\nmethod testDeserialiseWithAllElements()\n{\n}\n",
      "method"
    ],
    "SerialiseLemma": [
      [
        "deserialise",
        "DeserialisetAfterSerialiseLemma",
        "serialise",
        "deserialiseAux"
      ],
      "// ATOM \n\n// Ex 4 \nlemma SerialiseLemma<V>(t: Tree<V>)\n  ensures deserialise(serialise(t)) == [t]\n{\n\n  calc{\n    deserialise(serialise(t));\n    ==\n    deserialise(serialise(t) + []);\n    ==\n    deserialiseAux(serialise(t) + [], []);\n    == { DeserialisetAfterSerialiseLemma(t, [], []); }\n    deserialiseAux([],[] + [t]);\n    ==\n    deserialiseAux([],[t]);\n    == \n    [t];\n  }\n}\n",
      "lemma"
    ],
    "DeserialisetAfterSerialiseLemma": [
      [
        "serialise",
        "deserialiseAux"
      ],
      "// ATOM \n\n\nlemma DeserialisetAfterSerialiseLemma<T> (t : Tree<T>, cds : seq<Code<T>>, ts : seq<Tree<T>>) \n  ensures deserialiseAux(serialise(t) + cds, ts) == deserialiseAux(cds, ts + [t])\n  {\n    match t{\n      case Leaf(x) =>\n        calc{\n          deserialiseAux(serialise(t) + cds, ts);\n          ==\n            deserialiseAux([CLf(x)] + cds, ts);\n          == \n            deserialiseAux(cds, ts + [Leaf(x)]);\n          == \n            deserialiseAux(cds, ts + [t]);\n        }\n      case SingleNode(x,t1) =>\n        calc{\n          deserialiseAux(serialise(t) + cds, ts);\n          ==\n            deserialiseAux( serialise(t1) + [CSNd(x)] + cds ,ts); \n          ==\n            deserialiseAux((serialise(t1) + [CSNd(x)] + cds),ts);\n          == { DeserialisetAfterSerialiseLemma(t1 , [ CSNd(x) ], ts); }\n            deserialiseAux(serialise(t1)+ [CSNd(x)]  + cds, ts );\n          ==\n            deserialiseAux( ([CSNd(x)] + cds), ts + [ t1 ]);\n          == \n            deserialiseAux(cds, ts + [SingleNode(x,t1)]);\n          == \n            deserialiseAux(cds, ts + [t]); \n        }\n      case DoubleNode(x,t1,t2) =>\n        calc{\n          deserialiseAux(serialise(t) + cds, ts);\n          ==\n            deserialiseAux(serialise(t2) + serialise(t1) + [CDNd(x)] + cds ,ts); \n          ==\n            deserialiseAux(serialise(t2) + (serialise(t1) + [CDNd(x)] + cds),ts);\n          == { DeserialisetAfterSerialiseLemma(t2, serialise(t1) + [ CDNd(x) ], ts); }\n            deserialiseAux(serialise(t1)+ [CDNd(x)]  + cds, ts + [ t2 ]);\n          ==\n            deserialiseAux(serialise(t1) + ([CDNd(x)] + cds), ts + [ t2 ]);\n          == { DeserialisetAfterSerialiseLemma(t1, [ CDNd(x) ] + cds, ts + [ t2 ]); }\n            deserialiseAux([ CDNd(x) ] + cds, (ts + [ t2 ]) + [t1]);\n          ==\n            deserialiseAux([ CDNd(x) ] + cds, ts + [t2, t1]);\n          == \n            deserialiseAux([CDNd(x)] + cds, ts + [t2 , t1]);\n          == \n            deserialiseAux(cds, ts + [DoubleNode(x,t1,t2)]); \n          == \n            deserialiseAux(cds, ts + [t]);\n        }\n    }\n  }\n",
      "lemma"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_Tree": "Tree",
    "//ATOM_PLACEHOLDER_Code": "Code",
    "//ATOM_PLACEHOLDER_serialise": "serialise",
    "//ATOM_PLACEHOLDER_deserialiseAux": "deserialiseAux",
    "//ATOM_PLACEHOLDER_deserialise": "deserialise",
    "//ATOM_PLACEHOLDER_testSerializeWithASingleLeaf": "testSerializeWithASingleLeaf",
    "//ATOM_PLACEHOLDER_testSerializeNullValues": "testSerializeNullValues",
    "//ATOM_PLACEHOLDER_testSerializeWithAllElements": "testSerializeWithAllElements",
    "//ATOM_PLACEHOLDER_testDeseraliseWithASingleLeaf": "testDeseraliseWithASingleLeaf",
    "//ATOM_PLACEHOLDER_testDeserializeWithASingleNode": "testDeserializeWithASingleNode",
    "//ATOM_PLACEHOLDER_testDeserialiseWithAllElements": "testDeserialiseWithAllElements",
    "//ATOM_PLACEHOLDER_SerialiseLemma": "SerialiseLemma",
    "//ATOM_PLACEHOLDER_DeserialisetAfterSerialiseLemma": "DeserialisetAfterSerialiseLemma"
  }
}