{
  "skeleton": "// Each node's identifier (address)\n//ATOM_PLACEHOLDER_Constants//ATOM_PLACEHOLDER_ValidIdx\n\n//ATOM_PLACEHOLDER_UniqueIds\n\n//ATOM_PLACEHOLDER_WF\n}\n\n// The highest other identifier this node has heard about.\n//ATOM_PLACEHOLDER_Variables//ATOM_PLACEHOLDER_WF\n}\n\n//ATOM_PLACEHOLDER_Init\n\n//ATOM_PLACEHOLDER_max\n\n//ATOM_PLACEHOLDER_NextIdx\n\n//ATOM_PLACEHOLDER_Transmission\n\n//ATOM_PLACEHOLDER_Step//ATOM_PLACEHOLDER_NextStep\n\n//ATOM_PLACEHOLDER_Next\n\n//////////////////////////////////////////////////////////////////////////////\n// Spec (proof goal)\n//////////////////////////////////////////////////////////////////////////////\n\n//ATOM_PLACEHOLDER_IsLeader\n\n//ATOM_PLACEHOLDER_Safety\n\n//////////////////////////////////////////////////////////////////////////////\n// Proof\n//////////////////////////////////////////////////////////////////////////////\n\n//ATOM_PLACEHOLDER_IsChord\n\n//ATOM_PLACEHOLDER_Between\n\n//ATOM_PLACEHOLDER_OnChordHeardDominatesId\n\n//ATOM_PLACEHOLDER_OnChordHeardDominatesIdInv\n\n//ATOM_PLACEHOLDER_Inv\n\n//ATOM_PLACEHOLDER_InitImpliesInv\n\n//ATOM_PLACEHOLDER_NextPreservesInv\n\n//ATOM_PLACEHOLDER_InvImpliesSafety\n\n\n\n",
  "atoms": {
    "Constants": [
      [],
      "// ATOM \n// Each node's identifier (address)\ndatatype Constants = Constants(ids: seq<nat>) {\n  predicate ValidIdx(i: int) {\n    0<=i<|ids|\n  }\n  ghost predicate UniqueIds() {\n\n    (forall i, j | ValidIdx(i) && ValidIdx(j) && ids[i]==ids[j] :: i == j)\n  }\n  ghost predicate WF() {\n\n    && 0 < |ids|\n    && UniqueIds()\n  }\n}\n",
      "datatype"
    ],
    "Variables": [
      [],
      "// ATOM \n\n// The highest other identifier this node has heard about.\ndatatype Variables = Variables(highest_heard: seq<int>) {\n  ghost predicate WF(c: Constants)\n  {\n    && c.WF()\n    && |highest_heard| == |c.ids|\n  }\n}\n",
      "datatype"
    ],
    "Init": [
      [],
      "// ATOM \n\nghost predicate Init(c: Constants, v: Variables)\n{\n  && v.WF(c)\n  && c.UniqueIds()\n     // Everyone begins having heard about nobody, not even themselves.\n  && (forall i | c.ValidIdx(i) :: v.highest_heard[i] == -1)\n}\n",
      "ghost predicate"
    ],
    "max": [
      [],
      "// ATOM \n\nfunction max(a: int, b: int) : int {\n  if a > b then a else b\n}\n",
      "function"
    ],
    "NextIdx": [
      [],
      "// ATOM \n\nfunction NextIdx(c: Constants, idx: nat) : nat\n  requires c.WF()\n  requires c.ValidIdx(idx)\n{\n  if idx + 1 == |c.ids| then 0 else idx + 1\n}\n",
      "function"
    ],
    "Transmission": [
      [
        "NextIdx",
        "max"
      ],
      "// ATOM \n\nghost predicate Transmission(c: Constants, v: Variables, v': Variables, srcidx: nat)\n{\n  && v.WF(c)\n  && v'.WF(c)\n  && c.ValidIdx(srcidx)\n\n  // Neighbor address in ring.\n  && var dstidx := NextIdx(c, srcidx);\n\n  // srcidx sends the max of its highest_heard value and its own id.\n  && var message := max(v.highest_heard[srcidx], c.ids[srcidx]);\n\n  // dstidx only overwrites its highest_heard if the message is higher.\n  && var dst_new_max := max(v.highest_heard[dstidx], message);\n  // XXX Manos: How could this have been a bug!? How could a srcidx, having sent message X, ever send message Y < X!?\n\n  && v' == v.(highest_heard := v.highest_heard[dstidx := dst_new_max])\n}\n",
      "ghost predicate"
    ],
    "Step": [
      [],
      "// ATOM \n\ndatatype Step = TransmissionStep(srcidx: nat)\n",
      "datatype"
    ],
    "NextStep": [
      [
        "Transmission"
      ],
      "// ATOM \n\nghost predicate NextStep(c: Constants, v: Variables, v': Variables, step: Step)\n{\n  match step {\n    case TransmissionStep(srcidx) => Transmission(c, v, v', srcidx)\n  }\n}\n",
      "ghost predicate"
    ],
    "Next": [
      [
        "NextStep"
      ],
      "// ATOM \n\nghost predicate Next(c: Constants, v: Variables, v': Variables)\n{\n  exists step :: NextStep(c, v, v', step)\n}\n",
      "ghost predicate"
    ],
    "IsLeader": [
      [],
      "// ATOM \n\n//////////////////////////////////////////////////////////////////////////////\n// Spec (proof goal)\n//////////////////////////////////////////////////////////////////////////////\n\nghost predicate IsLeader(c: Constants, v: Variables, i: int)\n  requires v.WF(c)\n{\n  && c.ValidIdx(i)\n  && v.highest_heard[i] == c.ids[i]\n}\n",
      "ghost predicate"
    ],
    "Safety": [
      [
        "IsLeader"
      ],
      "// ATOM \n\nghost predicate Safety(c: Constants, v: Variables)\n  requires v.WF(c)\n{\n  forall i, j | IsLeader(c, v, i) && IsLeader(c, v, j) :: i == j\n}\n",
      "ghost predicate"
    ],
    "IsChord": [
      [],
      "// ATOM \n\n//////////////////////////////////////////////////////////////////////////////\n// Proof\n//////////////////////////////////////////////////////////////////////////////\n\nghost predicate IsChord(c: Constants, v: Variables, start: int, end: int)\n{\n  && v.WF(c)\n  && c.ValidIdx(start)\n  && c.ValidIdx(end)\n  && c.ids[start] == v.highest_heard[end]\n}\n",
      "ghost predicate"
    ],
    "Between": [
      [],
      "// ATOM \n\nghost predicate Between(start: int, node: int, end: int)\n{\n  if start < end\n  then start < node < end // not wrapped\n  else node < end || start < node // wrapped\n}\n",
      "ghost predicate"
    ],
    "OnChordHeardDominatesId": [
      [
        "Between"
      ],
      "// ATOM \n\nghost predicate OnChordHeardDominatesId(c: Constants, v: Variables, start: int, end: int)\n  requires v.WF(c)\n{\n  forall node | Between(start, node, end) && c.ValidIdx(node)\n    :: v.highest_heard[node] > c.ids[node]\n}\n",
      "ghost predicate"
    ],
    "OnChordHeardDominatesIdInv": [
      [
        "IsChord",
        "OnChordHeardDominatesId"
      ],
      "// ATOM \n\nghost predicate OnChordHeardDominatesIdInv(c: Constants, v: Variables)\n{\n  && v.WF(c)\n  && (forall start, end\n       | IsChord(c, v, start, end)\n       :: OnChordHeardDominatesId(c, v, start, end)\n          )\n}\n",
      "ghost predicate"
    ],
    "Inv": [
      [
        "Safety",
        "OnChordHeardDominatesIdInv"
      ],
      "// ATOM \n\nghost predicate Inv(c: Constants, v: Variables)\n{\n  && v.WF(c)\n  && OnChordHeardDominatesIdInv(c, v)\n  && Safety(c, v)\n}\n",
      "ghost predicate"
    ],
    "InitImpliesInv": [
      [
        "Inv",
        "Init"
      ],
      "// ATOM \n\nlemma InitImpliesInv(c: Constants, v: Variables)\n  requires Init(c, v)\n  ensures Inv(c, v)\n{\n}\n",
      "lemma"
    ],
    "NextPreservesInv": [
      [
        "IsChord",
        "NextIdx",
        "NextStep",
        "OnChordHeardDominatesId",
        "Between",
        "IsLeader",
        "Next",
        "Inv",
        "max"
      ],
      "// ATOM \n\nlemma NextPreservesInv(c: Constants, v: Variables, v': Variables)\n  requires Inv(c, v)\n  requires Next(c, v, v')\n  ensures Inv(c, v')\n{\n  var step :| NextStep(c, v, v', step);\n  var srcidx := step.srcidx;\n  var dstidx := NextIdx(c, srcidx);\n  var message := max(v.highest_heard[srcidx], c.ids[srcidx]);\n  var dst_new_max := max(v.highest_heard[dstidx], message);\n\n  forall start, end\n    | IsChord(c, v', start, end)\n    ensures OnChordHeardDominatesId(c, v', start, end)\n  {\n    forall node | Between(start, node, end) && c.ValidIdx(node)\n      ensures v'.highest_heard[node] > c.ids[node]\n    {\n      if dstidx == end {\n        // maybe this chord just sprung into existence\n        if v'.highest_heard[end] == v.highest_heard[end] {\n          // no change --\n        } else if v'.highest_heard[end] == c.ids[srcidx] {\n        } else if v'.highest_heard[end] == v.highest_heard[srcidx] {\n        }\n      } else {\n        // this chord was already here\n      }\n    }\n  }\n\n  forall i, j | IsLeader(c, v', i) && IsLeader(c, v', j) ensures i == j {\n  }\n}\n",
      "lemma"
    ],
    "InvImpliesSafety": [
      [
        "Safety",
        "Inv"
      ],
      "// ATOM \n\nlemma InvImpliesSafety(c: Constants, v: Variables)\n  requires Inv(c, v)\n  ensures Safety(c, v)\n{\n}\n",
      "lemma"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_Constants": "Constants",
    "//ATOM_PLACEHOLDER_ValidIdx": "ValidIdx",
    "//ATOM_PLACEHOLDER_UniqueIds": "UniqueIds",
    "//ATOM_PLACEHOLDER_WF": "WF",
    "//ATOM_PLACEHOLDER_Variables": "Variables",
    "//ATOM_PLACEHOLDER_Init": "Init",
    "//ATOM_PLACEHOLDER_max": "max",
    "//ATOM_PLACEHOLDER_NextIdx": "NextIdx",
    "//ATOM_PLACEHOLDER_Transmission": "Transmission",
    "//ATOM_PLACEHOLDER_Step": "Step",
    "//ATOM_PLACEHOLDER_NextStep": "NextStep",
    "//ATOM_PLACEHOLDER_Next": "Next",
    "//ATOM_PLACEHOLDER_IsLeader": "IsLeader",
    "//ATOM_PLACEHOLDER_Safety": "Safety",
    "//ATOM_PLACEHOLDER_IsChord": "IsChord",
    "//ATOM_PLACEHOLDER_Between": "Between",
    "//ATOM_PLACEHOLDER_OnChordHeardDominatesId": "OnChordHeardDominatesId",
    "//ATOM_PLACEHOLDER_OnChordHeardDominatesIdInv": "OnChordHeardDominatesIdInv",
    "//ATOM_PLACEHOLDER_Inv": "Inv",
    "//ATOM_PLACEHOLDER_InitImpliesInv": "InitImpliesInv",
    "//ATOM_PLACEHOLDER_NextPreservesInv": "NextPreservesInv",
    "//ATOM_PLACEHOLDER_InvImpliesSafety": "InvImpliesSafety"
  }
}