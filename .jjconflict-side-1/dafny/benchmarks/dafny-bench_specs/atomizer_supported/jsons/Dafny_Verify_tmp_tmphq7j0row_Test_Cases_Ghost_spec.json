{
  "skeleton": "//ATOM_PLACEHOLDER_Average\n\n//ATOM_PLACEHOLDER_Triple\n\n//ATOM_PLACEHOLDER_Triple1\n\n//ATOM_PLACEHOLDER_DoubleQuadruple\n\n//ATOM_PLACEHOLDER_F\n\n//ATOM_PLACEHOLDER_M\n\n//ATOM_PLACEHOLDER_Caller\n\n//ATOM_PLACEHOLDER_MyMethod\n\n",
  "atoms": {
    "Average": [
      [],
      "// ATOM \nfunction Average(a: int, b: int): int \n{\n    (a + b) / 2\n}\n",
      "function"
    ],
    "Triple": [
      [
        "Average"
      ],
      "// ATOM \n\nghost method Triple(x: int) returns (r: int)\n    ensures r == 3 * x\n{\n    r := Average(2 * x, 4 * x);\n}\n",
      "ghost method"
    ],
    "Triple1": [
      [
        "DoubleQuadruple"
      ],
      "// SPEC \n\nmethod Triple1(x: int) returns (r: int)\n    ensures r == 3 * x\n{\n}\n",
      "method"
    ],
    "DoubleQuadruple": [
      [],
      "// ATOM \n\nghost method DoubleQuadruple(x: int) returns (a: int, b: int)\n    ensures a == 2 * x && b == 4 * x\n{\n    a := 2 * x;\n    b := 2 * a;\n}\n",
      "ghost method"
    ],
    "F": [
      [],
      "// ATOM \n\nfunction F(): int {\n29\n}\n",
      "function"
    ],
    "M": [
      [],
      "// SPEC \n\nmethod M() returns (r: int) \nensures r == 29\n{\n}\n",
      "method"
    ],
    "Caller": [
      [
        "F",
        "M"
      ],
      "// SPEC \n\nmethod Caller() {\n}\n",
      "method"
    ],
    "MyMethod": [
      [],
      "// SPEC \n\nmethod MyMethod(x: int) returns (y: int)\n    requires 10 <= x\n    ensures 25 <= y\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_Average": "Average",
    "//ATOM_PLACEHOLDER_Triple": "Triple",
    "//ATOM_PLACEHOLDER_Triple1": "Triple1",
    "//ATOM_PLACEHOLDER_DoubleQuadruple": "DoubleQuadruple",
    "//ATOM_PLACEHOLDER_F": "F",
    "//ATOM_PLACEHOLDER_M": "M",
    "//ATOM_PLACEHOLDER_Caller": "Caller",
    "//ATOM_PLACEHOLDER_MyMethod": "MyMethod"
  }
}