{
  "skeleton": "//ATOM_PLACEHOLDER_allEqual\n//{forall i,j::0<=i<=j<|s| ==> s[i]==s[j] }\n//{forall i::0<i<|s| ==> s[i-1]==s[i]} \n//{forall i::0<=i<|s|-1 ==> s[i]==s[i+1]}\n\n\n//Ordered indexes\n//ATOM_PLACEHOLDER_equivalenceNoOrder\n\n//All equal to first\n//ATOM_PLACEHOLDER_equivalenceEqualtoFirst\n\n\n\n//ATOM_PLACEHOLDER_equivalenceContiguous\n\n\n\n//ATOM_PLACEHOLDER_mallEqual1\n\n//ATOM_PLACEHOLDER_mallEqual2\n\n\n\n//ATOM_PLACEHOLDER_mallEqual3\n\n\n//ATOM_PLACEHOLDER_mallEqual4\n\n\n//ATOM_PLACEHOLDER_mallEqual5\n\n\n\n\n\n\n\n\n\n",
  "atoms": {
    "allEqual": [
      [],
      "// ATOM \npredicate allEqual(s:seq<int>)\n{forall i,j::0<=i<|s| && 0<=j<|s| ==> s[i]==s[j] }\n",
      "predicate"
    ],
    "equivalenceNoOrder": [
      [
        "allEqual"
      ],
      "// ATOM \n//{forall i,j::0<=i<=j<|s| ==> s[i]==s[j] }\n//{forall i::0<i<|s| ==> s[i-1]==s[i]} \n//{forall i::0<=i<|s|-1 ==> s[i]==s[i+1]}\n\n\n//Ordered indexes\nlemma equivalenceNoOrder(s:seq<int>)\nensures allEqual(s) <==> forall i,j::0<=i<=j<|s| ==> s[i]==s[j]\n{}\n",
      "lemma"
    ],
    "equivalenceEqualtoFirst": [
      [
        "allEqual"
      ],
      "// ATOM \n\n//All equal to first\nlemma equivalenceEqualtoFirst(s:seq<int>)\nrequires s!=[]\nensures allEqual(s) <==> (forall i::0<=i<|s| ==> s[0]==s[i])\n{}\n",
      "lemma"
    ],
    "equivalenceContiguous": [
      [
        "allEqual"
      ],
      "// ATOM \n\n\n\nlemma equivalenceContiguous(s:seq<int>)\nensures (allEqual(s) ==> forall i::0<=i<|s|-1 ==> s[i]==s[i+1])\nensures (allEqual(s) <== forall i::0<=i<|s|-1 ==> s[i]==s[i+1])\n{\n  \n  if(|s|==0 || |s|==1){\n\n  }\n  else{\n    calc {\n      forall i::0<=i<|s|-1 ==> s[i]==s[i+1];\n      ==>\n      {\n        equivalenceContiguous(s[..|s|-1]);\n      }\n      allEqual(s);\n    }\n  }\n  \n}\n",
      "lemma"
    ],
    "mallEqual1": [
      [
        "allEqual"
      ],
      "// SPEC \n\n\n\nmethod mallEqual1(v:array<int>) returns (b:bool)\nensures b==allEqual(v[0..v.Length])\n{\n}\n",
      "method"
    ],
    "mallEqual2": [
      [
        "allEqual"
      ],
      "// SPEC \n\nmethod mallEqual2(v:array<int>) returns (b:bool)\nensures b==allEqual(v[0..v.Length])\n{\n}\n",
      "method"
    ],
    "mallEqual3": [
      [
        "allEqual",
        "equivalenceContiguous"
      ],
      "// SPEC \n\n\n\nmethod mallEqual3(v:array<int>) returns (b:bool)\nensures b==allEqual(v[0..v.Length])\n{\n}\n",
      "method"
    ],
    "mallEqual4": [
      [
        "allEqual"
      ],
      "// SPEC \n\n\nmethod mallEqual4(v:array<int>) returns (b:bool)\nensures b==allEqual(v[0..v.Length])\n{\n}\n",
      "method"
    ],
    "mallEqual5": [
      [
        "allEqual"
      ],
      "// SPEC \n\n\n method mallEqual5(v:array<int>) returns (b:bool)\nensures b==allEqual(v[0..v.Length])\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_allEqual": "allEqual",
    "//ATOM_PLACEHOLDER_equivalenceNoOrder": "equivalenceNoOrder",
    "//ATOM_PLACEHOLDER_equivalenceEqualtoFirst": "equivalenceEqualtoFirst",
    "//ATOM_PLACEHOLDER_equivalenceContiguous": "equivalenceContiguous",
    "//ATOM_PLACEHOLDER_mallEqual1": "mallEqual1",
    "//ATOM_PLACEHOLDER_mallEqual2": "mallEqual2",
    "//ATOM_PLACEHOLDER_mallEqual3": "mallEqual3",
    "//ATOM_PLACEHOLDER_mallEqual4": "mallEqual4",
    "//ATOM_PLACEHOLDER_mallEqual5": "mallEqual5"
  }
}