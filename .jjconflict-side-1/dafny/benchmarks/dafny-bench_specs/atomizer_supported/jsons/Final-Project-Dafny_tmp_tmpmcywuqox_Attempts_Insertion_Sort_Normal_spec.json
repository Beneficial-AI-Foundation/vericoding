{
  "skeleton": "//ATOM_PLACEHOLDER_sorted\n\n//ATOM_PLACEHOLDER_sortedA\n\n//ATOM_PLACEHOLDER_lookForMin\n\n//ATOM_PLACEHOLDER_insertionSort\n\n",
  "atoms": {
    "sorted": [
      [
        "sortedA"
      ],
      "// ATOM \npredicate sorted (a: array<int>)\n\n\treads a\n{\n\tsortedA(a, a.Length)\n}\n",
      "predicate"
    ],
    "sortedA": [
      [],
      "// ATOM \n\npredicate sortedA (a: array<int>, i: int)\n\n\trequires 0 <= i <= a.Length\n\treads a\n{\n\tforall k :: 0 < k < i ==> a[k-1] <= a[k]\n}\n",
      "predicate"
    ],
    "lookForMin": [
      [],
      "// SPEC \n\nmethod lookForMin (a: array<int>, i: int) returns (m: int)\n\n\trequires 0 <= i < a.Length\n\tensures i <= m < a.Length\n\tensures forall k :: i <= k < a.Length ==> a[k] >= a[m]\n{\n}\n",
      "method"
    ],
    "insertionSort": [
      [
        "sorted",
        "lookForMin"
      ],
      "// SPEC \n\nmethod insertionSort (a: array<int>)\n\n\tmodifies a\n\tensures sorted(a)\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_sorted": "sorted",
    "//ATOM_PLACEHOLDER_sortedA": "sortedA",
    "//ATOM_PLACEHOLDER_lookForMin": "lookForMin",
    "//ATOM_PLACEHOLDER_insertionSort": "insertionSort"
  }
}