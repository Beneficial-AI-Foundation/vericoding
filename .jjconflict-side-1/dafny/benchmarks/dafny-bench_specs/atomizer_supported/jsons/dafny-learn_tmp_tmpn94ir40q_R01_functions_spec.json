{
  "skeleton": "//ATOM_PLACEHOLDER_abs\n\n//ATOM_PLACEHOLDER_Testing_abs\n\n\n// Exercise 4. Write a function max that returns the larger of two given integer parameters. Write a test method using an assert that checks that your function is correct.\n\n//ATOM_PLACEHOLDER_max\n//ATOM_PLACEHOLDER_Testing_max\n\n\n// Exercise 6:\n\n//ATOM_PLACEHOLDER_Abs\n\n\n// Ghost\n//ATOM_PLACEHOLDER_Double\n\n//ATOM_PLACEHOLDER_TestDouble\n\n",
  "atoms": {
    "abs": [
      [],
      "// ATOM \nfunction abs(x: int): int\n{\n    if x < 0 then -x else x\n}\n",
      "function"
    ],
    "Testing_abs": [
      [
        "abs"
      ],
      "// SPEC \n\nmethod Testing_abs()\n{\n}\n",
      "method"
    ],
    "max": [
      [],
      "// ATOM \n\n\n// Exercise 4. Write a function max that returns the larger of two given integer parameters. Write a test method using an assert that checks that your function is correct.\n\nfunction max(a: int, b: int): int\n{\n    // Fill in an expression here.\n    if a > b then a else b\n}\n",
      "function"
    ],
    "Testing_max": [
      [],
      "// SPEC \nmethod Testing_max() {\n}\n",
      "method"
    ],
    "Abs": [
      [
        "abs"
      ],
      "// SPEC \n\n\n// Exercise 6:\n\nmethod Abs(x: int) returns (y: int)\n    ensures abs(x) == y\n{\n}\n",
      "method"
    ],
    "Double": [
      [],
      "// ATOM \n\n\n// Ghost\nghost function Double(val:int) : int\n{\n    2 * val\n}\n",
      "ghost function"
    ],
    "TestDouble": [
      [
        "Double"
      ],
      "// SPEC \n\nmethod TestDouble(val: int) returns (val2:int)\n    ensures val2 == Double(val)\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_abs": "abs",
    "//ATOM_PLACEHOLDER_Testing_abs": "Testing_abs",
    "//ATOM_PLACEHOLDER_max": "max",
    "//ATOM_PLACEHOLDER_Testing_max": "Testing_max",
    "//ATOM_PLACEHOLDER_Abs": "Abs",
    "//ATOM_PLACEHOLDER_Double": "Double",
    "//ATOM_PLACEHOLDER_TestDouble": "TestDouble"
  }
}