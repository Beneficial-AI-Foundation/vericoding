{
  "skeleton": "\n//ATOM_PLACEHOLDER_power//ATOM_PLACEHOLDER_log//ATOM_PLACEHOLDER_consistency//ATOM_PLACEHOLDER_logarithmSum//ATOM_PLACEHOLDER_powerLemma//ATOM_PLACEHOLDER_power1//ATOM_PLACEHOLDER_test\n\n//ATOM_PLACEHOLDER_test2\n\n//ATOM_PLACEHOLDER_pow\n\n",
  "atoms": {
    "power": [
      [],
      "// ATOM \n\nghost function power(n: real, alpha: real): real\n    requires n > 0.0 && alpha > 0.0\n    ensures power(n, alpha) > 0.0\n",
      "ghost function"
    ],
    "log": [
      [],
      "// ATOM \n\nghost function log(n: real, alpha: real): real\n    requires n > 0.0 && alpha > 0.0\n    ensures log(n, alpha) > 0.0\n",
      "ghost function"
    ],
    "consistency": [
      [],
      "// ATOM \n\nlemma consistency(n: real, alpha: real)\n    requires n > 0.0 && alpha > 0.0\n    ensures log(power(n,alpha), alpha) == n\n    ensures power(log(n, alpha), alpha) == n\n",
      "lemma"
    ],
    "logarithmSum": [
      [],
      "// ATOM \n\nlemma logarithmSum(n: real, alpha: real, x: real, y: real)\n    requires n > 0.0 && alpha > 0.0\n    requires x > 0.0\n    requires n == x * y\n    ensures log(n,alpha) == log(x, alpha) +  log(y, alpha)\n",
      "lemma"
    ],
    "powerLemma": [
      [],
      "// ATOM \n\nlemma powerLemma(n: real, alpha: real)\n    requires n > 0.0 && alpha > 0.0\n    ensures power(n, alpha) * alpha == power(n+1.0, alpha)\n",
      "lemma"
    ],
    "power1": [
      [],
      "// ATOM \n\nlemma power1(alpha: real)\n    requires alpha > 0.0\n    ensures power(1.0, alpha) == alpha\n",
      "lemma"
    ],
    "test": [
      [
        "log",
        "power",
        "consistency",
        "logarithmSum"
      ],
      "// ATOM \n\nlemma test() {\n    var pow3 := power(3.0,4.0);\n    consistency(3.0,4.0);\n    var log6 := log(6.0,8.0);\n    logarithmSum(6.0, 8.0, 2.0, 3.0);\n}\n",
      "lemma"
    ],
    "test2": [
      [
        "powerLemma",
        "power"
      ],
      "// ATOM \n\nlemma test2() {\n    var pow3 := power(3.0, 4.0);\n    var power4 := power(4.0, 4.0);\n    powerLemma(3.0, 4.0);\n}\n",
      "lemma"
    ],
    "pow": [
      [
        "power",
        "power1",
        "powerLemma"
      ],
      "// SPEC \n\nmethod pow(n: nat, alpha: real) returns (product: real)\n    requires n > 0\n    requires alpha > 0.0\n    ensures product == power(n as real, alpha)\n{\n}\n",
      "method"
    ]
  },
  "placeholder_mapping": {
    "//ATOM_PLACEHOLDER_power": "power",
    "//ATOM_PLACEHOLDER_log": "log",
    "//ATOM_PLACEHOLDER_consistency": "consistency",
    "//ATOM_PLACEHOLDER_logarithmSum": "logarithmSum",
    "//ATOM_PLACEHOLDER_powerLemma": "powerLemma",
    "//ATOM_PLACEHOLDER_power1": "power1",
    "//ATOM_PLACEHOLDER_test": "test",
    "//ATOM_PLACEHOLDER_test2": "test2",
    "//ATOM_PLACEHOLDER_pow": "pow"
  }
}