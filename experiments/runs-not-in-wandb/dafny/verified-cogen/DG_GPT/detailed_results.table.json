{"columns": ["file_name", "subfolder", "success", "output_file", "error_message", "has_bypass", "file_path", "original_spec", "final_output", "debug_files", "generate_prompt", "fix_prompts"], "data": [["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", false, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", false, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", false, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", false, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", false, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", false, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", false, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", false, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", false, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", false, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", false, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", false, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", false, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", false, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", false, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", false, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", false, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", false, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", false, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", false, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", false, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", true, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", false, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""], ["proofsynthesis_choose_odd_impl.dfy", "root", false, "", "", false, "", "", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\nfunction IsOdd(x: int): bool { x % 2 == 1 }\n// </vc-helpers>\n\n// <vc-spec>\nmethod ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length\n// </vc-spec>\n// <vc-code>\n{\n  odd_index := 0;\n}\n// </vc-code>\n", "", "", ""]]}