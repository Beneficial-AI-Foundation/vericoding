{"columns": ["file_name", "subfolder", "success", "output_file", "error_message", "has_bypass", "file_path", "original_spec", "final_output", "debug_files", "generate_prompt", "fix_prompts"], "data": [["verified-using-dafny_tmp_tmp7jatpjyn_longestZero_longestZero.dfy", "root", false, "", "", false, "verified-using-dafny_tmp_tmp7jatpjyn_longestZero_longestZero.dfy", "// <vc-preamble>\nfunction getSize(i: int, j:int) : int\n{\n    j - i + 1    \n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod longestZero(a: array<int>) returns (sz:int, pos:int)   \n    requires 1 <= a.Length\n    ensures 0 <= sz <= a.Length\n    ensures 0 <= pos < a.Length\n    ensures pos + sz <= a.Length\n    ensures forall i:int  :: pos <= i < pos + sz ==> a[i] == 0\n    ensures forall i,j :: (0 <= i < j < a.Length && getSize(i, j) > sz) ==> exists k :: i <= k <= j && a[k] != 0\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_70_AllSequencesEqualLength.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_70_AllSequencesEqualLength.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod AllSequencesEqualLength(sequences: seq<seq<int>>) returns (result: bool)\n    ensures result <==> forall i, j :: 0 <= i < |sequences| && 0 <= j < |sequences| ==> |sequences[i]| == |sequences[j]|\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-duck_tmp_tmplawbgxjo_p4_single.dfy", "root", false, "", "", false, "dafny-duck_tmp_tmplawbgxjo_p4_single.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod single(x:array<int>, y:array<int>) returns (b:array<int>) \nrequires x.Length > 0\nrequires y.Length > 0\nensures b[..] == x[..] + y[..]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny-Exercises_tmp_tmpjm75muf__Session6Exercises_ExercisePeekSum_mPeekSum.dfy", "root", true, "", "", false, "Dafny-Exercises_tmp_tmpjm75muf__Session6Exercises_ExercisePeekSum_mPeekSum.dfy", "// <vc-preamble>\npredicate isPeek(v:array<int>,i:int)\n reads v\n requires 0<=i<v.Length\n {forall k::0<=k<i ==> v[i]>=v[k]}\n\n function peekSum(v:array<int>,i:int):int\n decreases i \n reads v\n requires 0<=i<=v.Length\n {\n  if (i==0) then 0\n  else if isPeek(v,i-1) then v[i-1]+peekSum(v,i-1)\n  else peekSum(v,i-1)\n }\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod mPeekSum(v:array<int>) returns (sum:int)\n requires  v.Length>0\n ensures sum==peekSum(v,v.Length)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "predicate isPeek(v:array<int>,i:int)\n reads v\n requires 0<=i<v.Length\n {forall k::0<=k<i ==> v[i]>=v[k]}\n\n function peekSum(v:array<int>,i:int):int\n decreases i \n reads v\n requires 0<=i<=v.Length\n {\n  if (i==0) then 0\n  else if isPeek(v,i-1) then v[i-1]+peekSum(v,i-1)\n  else peekSum(v,i-1)\n }\n\n// <vc-helpers>\nfunction max(a: int, b: int): int\n{\n  if a >= b then a else b\n}\n\nghost method peekSumCorrect(v:array<int>,i:int) returns (sum:int)\n  requires 0<=i<=v.Length\n  ensures sum == peekSum(v,i)\n  decreases i\n{\n  if i==0 {\n    sum := 0;\n  } else {\n    calc {\n      peekSum(v, i);\n      { assert i > 0 ==> 0 <= i-1 < i; }\n      peekSum(v, i-1) + (if isPeek(v, i-1) then v[i-1] else 0);\n    }\n    var rest := peekSumCorrect(v,i-1);\n    if isPeek(v,i-1) {\n      sum := v[i-1] + rest;\n    } else {\n      sum := rest;\n    }\n  }\n}\n\nfunction MaxPrefix(v: array<int>, i: int): int\n  reads v\n  requires 0<=i<v.Length\n  decreases i\n{\n  if i == 0 then v[0]\n  else max(v[i], MaxPrefix(v, i-1))\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod mPeekSum(v:array<int>) returns (sum:int)\n requires  v.Length>0\n ensures sum==peekSum(v,v.Length)\n //Implement and verify an O(v.Length) algorithm to solve this problem\n// </vc-spec>\n// <vc-code>\n{\n  var runningSum := 0;\n  var maxSoFar := v[0];\n  runningSum := runningSum + maxSoFar;\n  var i := 1;\n  \n  while i<v.Length\n    invariant 0<=i<=v.Length\n    invariant runningSum == peekSum(v,i)\n    invariant i>0 ==> maxSoFar == MaxPrefix(v, i-1)\n  {\n    if v[i] >= maxSoFar {\n      maxSoFar := v[i];\n      runningSum := runningSum + v[i];\n    }\n    i := i+1;\n  }\n  sum := runningSum;\n}\n// </vc-code>\n\n", "", "", ""], ["AssertivePrograming_tmp_tmpwf43uz0e_Find_Substring_FindFirstOccurrence.dfy", "root", true, "", "", false, "AssertivePrograming_tmp_tmpwf43uz0e_Find_Substring_FindFirstOccurrence.dfy", "// <vc-preamble>\nghost predicate ExistsSubstring(str1: string, str2: string) {\n\n    exists offset :: 0 <= offset <= |str1| && str2 <= str1[offset..]\n}\n\nghost predicate Post(str1: string, str2: string, found: bool, i: nat) {\n    (found <==> ExistsSubstring(str1, str2)) &&\n    (found ==> i + |str2| <= |str1| && str2 <= str1[i..])\n}\n\nghost predicate Outter_Inv_correctness(str1: string, str2: string, found: bool, i : nat)\n{\n    (found ==> (i + |str2| <= |str1| && str2 <= str1[i..]))\n    &&\n    (!found &&  0 < i <= |str1| && i != |str2|-1 ==> !(ExistsSubstring(str1[..i], str2)))\n    &&\n    (!found ==> i <= |str1|)\n}\n\nghost predicate Inner_Inv_correctness(str1: string, str2: string, i : nat, j: int, found: bool){\n    0 <= j <= i &&\n    j < |str2| &&\n    i < |str1| &&\n    (str1[i] == str2[j] ==> str2[j..] <= str1[i..]) &&\n    (found ==> j==0 && str1[i] == str2[j])\n}\n\nghost predicate Inner_Inv_Termination(str1: string, str2: string, i : nat, j: int, old_i: nat, old_j: nat){\n    old_j - j == old_i - i\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod FindFirstOccurrence(str1: string, str2: string) returns (found: bool, i: nat)\n    ensures Post(str1, str2, found, i)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "// Noa Leron 207131871\n// Tsuri Farhana 315016907\n\n\nghost predicate ExistsSubstring(str1: string, str2: string) {\n    // string in Dafny is a sequence of characters (seq<char>) and <= on sequences is the prefix relation\n    exists offset :: 0 <= offset <= |str1| && str2 <= str1[offset..]\n}\n\nghost predicate Post(str1: string, str2: string, found: bool, i: nat) {\n    (found <==> ExistsSubstring(str1, str2)) &&\n    (found ==> i + |str2| <= |str1| && str2 <= str1[i..])\n}\n\n/*\nGoal: Verify correctness of the following code. Once done, remove the {:verify false} (or turn it into {:verify true}).\n\nFeel free to add GHOST code, including calls to lemmas. But DO NOT modify the specification or the original (executable) code.\n*/\n\n//this is our lemmas, invatiants and presicats\n\n\nghost predicate Outter_Inv_correctness(str1: string, str2: string, found: bool, i : nat)\n{\n    (found ==> (i + |str2| <= |str1| && str2 <= str1[i..])) // Second part of post condition\n    &&\n    (!found &&  0 < i <= |str1| && i != |str2|-1 ==> !(ExistsSubstring(str1[..i], str2))) // First part of post condition\n    &&\n    (!found ==> i <= |str1|)\n}\n\nghost predicate Inner_Inv_correctness(str1: string, str2: string, i : nat, j: int, found: bool){\n    0 <= j <= i && // index in range\n    j < |str2| && // index in range\n    i < |str1| &&// index in range\n    (str1[i] == str2[j] ==> str2[j..] <= str1[i..]) &&\n    (found ==> j==0 && str1[i] == str2[j])\n}\n\nghost predicate Inner_Inv_Termination(str1: string, str2: string, i : nat, j: int, old_i: nat, old_j: nat){\n    old_j - j == old_i - i\n}\n\n// <vc-helpers>\nghost method Lemma_PostCondition(str1: string, str2: string, found: bool, i: nat, old_found: bool, old_i: nat)\n    requires Post(str1[..old_i], str2, old_found, old_i)\n    requires i == old_i - 1\n    requires !old_found && i >= 0\n    ensures Post(str1[..i], str2, found, i)\n{\n    if found {\n        assert ExistsSubstring(str1[..i], str2);\n        assert i + |str2| <= |str1[..i]| && str2 <= str1[..i][i..];\n    } else {\n        if ExistsSubstring(str1[..i], str2) {\n            var offset :| 0 <= offset <= |str1[..i]| && str2 <= str1[..i][offset..];\n            assert str2 <= str1[offset..];\n            assert str2 <= str1[..old_i][offset..];\n            assert ExistsSubstring(str1[..old_i], str2);\n            assert old_found;\n        }\n    }\n}\n\nghost method Lemma_InnerLoop(str1: string, str2: string, i: nat, j: nat, found: bool)\n    requires Inner_Inv_correctness(str1, str2, i, j, found)\n    ensures str2[j..] <= str1[i..]\n{\n    if j < |str2| {\n        assert str1[i] == str2[j];\n        if j + 1 < |str2| && i + 1 < |str1| {\n            calc {\n                str2[j..];\n                [str2[j]] + str2[j+1..];\n                { assert str1[i] == str2[j]; }\n                [str1[i]] + str2[j+1..];\n                { Lemma_InnerLoop(str1, str2, i+1, j+1, found); }\n                [str1[i]] + str1[i+1..];\n                str1[i..];\n            }\n        }\n    }\n}\n\nghost method Lemma_Maintenance(str1: string, str2: string, i: nat, found: bool)\n    requires !found\n    requires 0 <= i <= |str1| - |str2|\n    requires !ExistsSubstring(str1[..i], str2)\n    ensures !ExistsSubstring(str1[..i+1], str2) || (str1[i] == str2[0] && str2 <= str1[i..])\n{\n    if ExistsSubstring(str1[..i+1], str2) {\n        var offset :| 0 <= offset <= |str1[..i+1]| && str2 <= str1[..i+1][offset..];\n        if offset < i {\n            assert str2 <= str1[..i][offset..];\n            assert ExistsSubstring(str1[..i], str2);\n        } else {\n            assert offset == i;\n            assert str2 <= str1[i..];\n            assert str1[i] == str2[0];\n        }\n    }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod FindFirstOccurrence(str1: string, str2: string) returns (found: bool, i: nat)\n    ensures Post(str1, str2, found, i)\n// </vc-spec>\n// <vc-code>\n{\n        if |str2| == 0 {\n            return true, 0;\n        }\n        if |str1| < |str2| {\n            return false, 0;\n        }\n        var i := 0;\n        while i <= |str1| - |str2|\n            invariant !found ==> i <= |str1|\n            invariant found ==> i + |str2| <= |str1| && str2 <= str1[i..]\n            invariant !found && 0 < i ==> !ExistsSubstring(str1[..i], str2)\n        {\n            if str1[i] == str2[0] {\n                var j := 0;\n                var foundInLine := false;\n                while j < |str2| && i + j < |str1|\n                    invariant 0 <= j <= |str2|\n                    invariant i + j <= |str1|\n                    invariant str2[..j] <= str1[i..i+j]\n                    invariant foundInLine ==> j == |str2|\n                {\n                    if str1[i + j] != str2[j] {\n                        break;\n                    }\n                    if j == |str2| - 1 {\n                        foundInLine := true;\n                        found := true;\n                        return true, i;\n                    }\n                    j := j + 1;\n                }\n                Lemma_Maintenance(str1, str2, i, found);\n            }\n            i := i + 1;\n        }\n        return false, 0;\n    }\n// </vc-code>\n\n", "", "", ""], ["Dafny-Exercises_tmp_tmpjm75muf__Session4Exercises_ExerciseFirstNegative_mfirstNegative.dfy", "root", true, "", "", false, "Dafny-Exercises_tmp_tmpjm75muf__Session4Exercises_ExerciseFirstNegative_mfirstNegative.dfy", "// <vc-preamble>\npredicate positive(s:seq<int>)\n{forall u::0<=u<|s| ==> s[u]>=0}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod mfirstNegative(v:array<int>) returns (b:bool, i:int)\nensures b <==> exists k::0<=k<v.Length && v[k]<0\nensures b ==> 0<=i<v.Length && v[i]<0 && positive(v[0..i])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "predicate positive(s:seq<int>)\n{forall u::0<=u<|s| ==> s[u]>=0}\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod mfirstNegative(v:array<int>) returns (b:bool, i:int)\nensures b <==> exists k::0<=k<v.Length && v[k]<0\nensures b ==> 0<=i<v.Length && v[i]<0 && positive(v[0..i])\n// </vc-spec>\n// <vc-code>\n{\n    var n := v.Length;\n    i := 0;\n    while i < n\n        invariant 0 <= i <= n\n        invariant forall j :: 0 <= j < i ==> v[j] >= 0\n    {\n        if v[i] < 0 {\n            return true, i;\n        } else {\n            i := i + 1;\n        }\n    }\n    return false, 0;\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_567_IsSorted.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_567_IsSorted.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod IsSorted(a: array<int>) returns (sorted: bool)\n    requires a.Length > 0\n    ensures sorted <== forall i, j :: 0 <= i < j < a.Length ==> a[i] <= a[j]\n    ensures !sorted ==> exists i, j :: 0 <= i < j < a.Length && a[i] > a[j]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_advanced_examples_ReverseString_yarra.dfy", "root", false, "", "", false, "Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_advanced_examples_ReverseString_yarra.dfy", "// <vc-preamble>\npredicate reversed (arr : array<char>, outarr: array<char>)\nrequires arr != null && outarr != null\nrequires arr.Length == outarr.Length\nreads arr, outarr\n{\n  forall k :: 0<=k<=arr.Length-1 ==> outarr[k] == arr[(arr.Length-1-k)]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod yarra(arr : array<char>) returns (outarr : array<char>)\nrequires arr != null && arr.Length > 0\nensures outarr != null && arr.Length == outarr.Length && reversed(arr,outarr)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Software-Verification_tmp_tmpv4ueky2d_Remove_Element_remove_element_remove_element.dfy", "root", false, "", "", false, "Software-Verification_tmp_tmpv4ueky2d_Remove_Element_remove_element_remove_element.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod remove_element(nums: array<int>, val: int) returns (i: int)\n    modifies nums\n    requires 0 <= nums.Length <= 100\n    requires forall i :: 0 <= i < nums.Length ==> 0 <= nums[i] <= 50\n    requires 0 <= val <= 100\n    ensures forall j :: 0 < j < i < nums.Length ==> nums[j] != val\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_470_PairwiseAddition.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_470_PairwiseAddition.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod PairwiseAddition(a: array<int>) returns (result: array<int>)\n    requires a != null\n    requires a.Length % 2 == 0\n    ensures result != null\n    ensures result.Length == a.Length / 2\n    ensures forall i :: 0 <= i < result.Length ==> result[i] == a[2*i] + a[2*i + 1]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_copy_part_copy.dfy", "root", true, "", "", false, "Clover_copy_part_copy.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod copy( src: array<int>, sStart: nat, dest: array<int>, dStart: nat, len: nat) returns (r: array<int>)\n  requires src.Length >= sStart + len\n  requires dest.Length >= dStart + len\n  ensures r.Length == dest.Length\n  ensures r[..dStart] == dest[..dStart]\n  ensures r[dStart + len..] == dest[dStart + len..]\n  ensures r[dStart..len+dStart] == src[sStart..len+sStart]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\nghost method AMinAnn<T(0)>(a: array<T>, i: int, j: int) returns (b: array<T>)\n  requires 0 <= i <= j <= a.Length\n  ensures b.Length == a.Length\n  ensures exists k: int :: 0 <= k < a.Length && b[k] != a[k] ==> i <= k < j\n  ensures forall k: int :: 0 <= k < i ==> b[k] == a[k]\n  ensures forall k: int :: j <= k < a.Length ==> b[k] == a[k]\n{\n  b := a;\n  var k := i;\n  while k < j\n    invariant i <= k <= j\n    invariant forall l: int :: 0 <= l < i ==> b[l] == a[l]\n    invariant forall l: int :: k <= l < a.Length ==> b[l] == a[l]\n  {\n    b[k] := a[k];\n    k := k + 1;\n  }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod copy( src: array<int>, sStart: nat, dest: array<int>, dStart: nat, len: nat) returns (r: array<int>)\n  requires src.Length >= sStart + len\n  requires dest.Length >= dStart + len\n  ensures r.Length == dest.Length\n  ensures r[..dStart] == dest[..dStart]\n  ensures r[dStart + len..] == dest[dStart + len..]\n  ensures r[dStart..len+dStart] == src[sStart..len+sStart]\n// </vc-spec>\n// <vc-code>\n{\n  r := new int[dest.Length];\n  for i := 0 to dest.Length\n    invariant 0 <= i <= dest.Length\n    invariant r[..i] == dest[..i]\n  {\n    r[i] := dest[i];\n  }\n  var r_ := AMinAnn(r, dStart, dStart + len);\n  for j := 0 to len\n    invariant 0 <= j <= len\n    invariant r_[..dStart] == dest[..dStart]\n    invariant r_[dStart..dStart+j] == src[sStart..sStart+j]\n    invariant r_[dStart+j..] == dest[dStart+j..]\n  {\n    r_[dStart + j] := src[sStart + j];\n  }\n  r := r_;\n}\n// </vc-code>\n\n", "", "", ""], ["BinaryAddition_ArrayToSequence.dfy", "root", true, "", "", false, "BinaryAddition_ArrayToSequence.dfy", "// <vc-preamble>\nfunction ArrayToBv10(arr: array<bool>): bv10\n    reads arr\n    requires arr.Length == 10\n{\n    ArrayToBv10Helper(arr, arr.Length - 1)\n}\n\nfunction ArrayToBv10Helper(arr: array<bool>, index: nat): bv10\n    reads arr\n    requires arr.Length == 10\n    requires 0 <= index < arr.Length\n    decreases index\n{\n    if index == 0 then\n        (if arr[0] then 1 else 0) as bv10\n    else\n        var bit: bv10 := if arr[index] then 1 as bv10 else 0 as bv10;\n        (bit << index) + ArrayToBv10Helper(arr, index - 1)\n}\n\nfunction isBitSet(x: bv10, bitIndex: nat): bool\n    requires bitIndex < 10\n    ensures isBitSet(x, bitIndex) <==> (x & (1 << bitIndex)) != 0\n{\n    (x & (1 << bitIndex)) != 0\n}\n\nfunction BoolToInt(a: bool): int {\n    if a then 1 else 0\n}\n\nfunction XOR(a: bool, b: bool): bool {\n    (a || b) && !(a && b)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ArrayToSequence(arr: array<bool>) returns (res: seq<bool>)\n    ensures |res| == arr.Length\n    ensures forall k :: 0 <= k < arr.Length ==> res[k] == arr[k]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "/* \nMIPS 0\nWe implement the following with bitvectors in Dafny.\nhere s' and t' are converted to decimal scalars\ns = [1,1,1], t = [1,0,1], ys = [1, 0, 0], s' = 7, t' = 5, ys' = 4\nys' % 2 ^ (len(s)) = (s' + t') % 2 ^ (len(s))\n4 % 8 = 12 % 8\n\ndef f(s,t):\n    a = 0;b = 0;\n    ys = []\n    for i in range(10):\n        c = s[i]; d = t[i];\n        next_a = b ^ c ^ d\n        next_b = b+c+d>1\n        a = next_a;b = next_b;\n        y = a\n        ys.append(y)\n    return ys\n*/\n\nfunction ArrayToBv10(arr: array<bool>): bv10 // Converts boolean array to bitvector\n    reads arr\n    requires arr.Length == 10\n{\n    ArrayToBv10Helper(arr, arr.Length - 1)\n}\n\nfunction ArrayToBv10Helper(arr: array<bool>, index: nat): bv10\n    reads arr\n    requires arr.Length == 10\n    requires 0 <= index < arr.Length\n    decreases index\n    ensures forall i :: 0 <= i < index ==> ((ArrayToBv10Helper(arr, i) >> i) & 1) == (if arr\n        [i] then 1 else 0)\n{\n    if index == 0 then\n        (if arr[0] then 1 else 0) as bv10\n    else\n        var bit: bv10 := if arr[index] then 1 as bv10 else 0 as bv10;\n        (bit << index) + ArrayToBv10Helper(arr, index - 1)\n}\n\nfunction isBitSet(x: bv10, bitIndex: nat): bool\n    requires bitIndex < 10\n    ensures isBitSet(x, bitIndex) <==> (x & (1 << bitIndex)) != 0\n{\n    (x & (1 << bitIndex)) != 0\n}\n\nfunction Bv10ToSeq(x: bv10): seq<bool> // Converts bitvector to boolean sequence\n    ensures |Bv10ToSeq(x)| == 10\n    ensures forall i: nat :: 0 <= i < 10 ==> Bv10ToSeq(x)[i] == isBitSet(x, i)\n{\n    [isBitSet(x, 0), isBitSet(x, 1), isBitSet(x, 2), isBitSet(x, 3),\n    isBitSet(x, 4), isBitSet(x, 5), isBitSet(x, 6), isBitSet(x, 7),\n    isBitSet(x, 8), isBitSet(x, 9)]\n}\n\nfunction BoolToInt(a: bool): int {\n    if a then 1 else 0\n}\n\nfunction XOR(a: bool, b: bool): bool {\n    (a || b) && !(a && b)\n}\n\nfunction BitAddition(s: array<bool>, t: array<bool>): seq<bool> // Performs traditional bit addition\n    reads s\n    reads t\n    requires s.Length == 10 && t.Length == 10\n{\n    var a: bv10 := ArrayToBv10(s);\n    var b: bv10 := ArrayToBv10(t);\n    var c: bv10 := a + b;\n    Bv10ToSeq(c)\n}\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod ArrayToSequence(arr: array<bool>) returns (res: seq<bool>) // Converts boolean array to boolean sequence\n    ensures |res| == arr.Length\n    ensures forall k :: 0 <= k < arr.Length ==> res[k] == arr[k]\n// </vc-spec>\n// <vc-code>\n{\n  return arr[..];\n}\n// </vc-code>\n\n", "", "", ""], ["formal-methods-in-software-engineering_tmp_tmpe7fjnek6_Labs4_gr2_HoareTripleReqEns.dfy", "root", false, "", "", false, "formal-methods-in-software-engineering_tmp_tmpe7fjnek6_Labs4_gr2_HoareTripleReqEns.dfy", "// <vc-preamble>\nfunction SqrSumRec(n: int) : int\n    requires n >= 0\n{\n    if (n == 0) then 0 else n*n + SqrSumRec(n-1)\n}\n\nleast lemma L1(n: int)\n    requires n >= 0\n    ensures SqrSumRec(n) == n*(n+1)*(2*n + 1)/6\n{\n\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod HoareTripleReqEns(i: int, k: int) returns (k': int)\n\n    requires  k == i*i\n    ensures  k' == (i+1)*(i+1)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny_tmp_tmpmvs2dmry_examples2_exp_by_sqr.dfy", "root", true, "", "", false, "Dafny_tmp_tmpmvs2dmry_examples2_exp_by_sqr.dfy", "// <vc-preamble>\nfunction gcd(m: nat, n: nat) : nat\nrequires m>0 && n>0;\ndecreases m+n\n{\n    if(m==n) then n \n    else if( m > n) then gcd(m-n,n)\n    else gcd(m, n-m)\n}\n\nfunction exp(x: real, n: nat) :real\ndecreases n;\n{\n    if(n == 0) then 1.0\n    else if (x==0.0) then 0.0\n    else if (n  ==0 && x == 0.0) then 1.0\n    else x*exp(x, n-1)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod exp_by_sqr(x0: real, n0: nat) returns (r:real)\nrequires x0 >= 0.0;\nensures r == exp(x0, n0);\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "function gcd(m: nat, n: nat) : nat\nrequires m>0 && n>0;\ndecreases m+n\n{\n    if(m==n) then n \n    else if( m > n) then gcd(m-n,n)\n    else gcd(m, n-m)\n}\n\nfunction exp(x: real, n: nat) :real\ndecreases n;\n{\n    if(n == 0) then 1.0\n    else if (x==0.0) then 0.0\n    else if (n  ==0 && x == 0.0) then 1.0\n    else x*exp(x, n-1)\n}\n\n// method add_by_inc_vc(x: int, y:int) returns (z:int)\n// {\n//     assume x>=0 && y>=0;\n//     z := x;\n//     var i := 0;\n//     assert 0 <= i <= y && z == x + i;\n//     z,i = *,*;\n//     assume 0 <= i <= y && z == x + i;\n//     if (i < y) \n//     {\n//         ghost var rank0 := y-i\n//         z := z+1;\n//         i := i+1; \n//         assert(y-i < rank0)\n//         ghost var rank1 := y-i\n//         assert(rank1 < rank0)\n//         assert(rank1 >=0)\n//         assert 0 <= i <= y && z == x + i;\n//         assume(false);\n//     }\n//     assert (z == x+y);\n//     assert (i == y);\n//     return z;\n// }\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod exp_by_sqr(x0: real, n0: nat) returns (r:real)\nrequires x0 >= 0.0;\nensures r == exp(x0, n0);\n// </vc-spec>\n// <vc-code>\n{\n  var x := x0;\n  var n := n0;\n  var r := 1.0;\n  while n > 0\n      invariant r * exp(x, n) == exp(x0, n0)\n      invariant x >= 0.0\n      decreases n\n  {\n      if x == 0.0 {\n          r := 0.0;\n          n := 0;\n      } else if n % 2 == 1 {\n          r := r * x;\n          n := n - 1;\n      } else {\n          x := x * x;\n          n := n / 2;\n      }\n  }\n  return r;\n}\n// </vc-code>\n\n", "", "", ""], ["formal-verification_tmp_tmpoepcssay_strings3_haveCommonKSubstring.dfy", "root", false, "", "", false, "formal-verification_tmp_tmpoepcssay_strings3_haveCommonKSubstring.dfy", "// <vc-preamble>\nmethod isPrefix(pre: string, str: string) returns (res:bool)\n    ensures !res <==> isNotPrefixPred(pre,str)\n    ensures  res <==> isPrefixPred(pre,str)\n{\n  assume{:axiom} false;\n}\n\npredicate isPrefixPred(pre:string, str:string)\n{\n    (|pre| <= |str|) && \n    pre == str[..|pre|]\n}\n\npredicate isNotPrefixPred(pre:string, str:string)\n{\n    (|pre| > |str|) || \n    pre != str[..|pre|]\n}\n\npredicate isSubstringPred(sub:string, str:string)\n{\n    (exists i :: 0 <= i <= |str| &&  isPrefixPred(sub, str[i..]))\n}\n\npredicate isNotSubstringPred(sub:string, str:string)\n{\n    (forall i :: 0 <= i <= |str| ==> isNotPrefixPred(sub,str[i..]))\n}\n\nmethod isSubstring(sub: string, str: string) returns (res:bool)\n    ensures  res <==> isSubstringPred(sub, str)\n    ensures  res ==> isSubstringPred(sub, str)\n\n    ensures  isSubstringPred(sub, str) ==> res\n    ensures  isSubstringPred(sub, str) ==> res\n    ensures !res <==> isNotSubstringPred(sub, str)\n{\n  assume{:axiom} false;\n}\n\npredicate haveCommonKSubstringPred(k:nat, str1:string, str2:string)\n{\n    exists i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k && isSubstringPred(str1[i1..j1],str2)\n}\n\npredicate haveNotCommonKSubstringPred(k:nat, str1:string, str2:string)\n{\n    forall i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k ==>  isNotSubstringPred(str1[i1..j1],str2)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod haveCommonKSubstring(k: nat, str1: string, str2: string) returns (found: bool)\n    ensures found  <==>  haveCommonKSubstringPred(k,str1,str2)\n    ensures !found <==> haveNotCommonKSubstringPred(k,str1,str2)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_all_digits_allDigits.dfy", "root", true, "", "", false, "Clover_all_digits_allDigits.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod allDigits(s: string) returns (result: bool)\n  ensures  result <==> (forall i :: 0 <= i < |s| ==> s[i] in \"0123456789\")\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod allDigits(s: string) returns (result: bool)\n  ensures  result <==> (forall i :: 0 <= i < |s| ==> s[i] in \"0123456789\")\n// </vc-spec>\n// <vc-code>\n{\n  var i := 0;\n  while i < |s|\n    invariant 0 <= i <= |s|\n    invariant forall j :: 0 <= j < i ==> s[j] in \"0123456789\"\n  {\n    if s[i] !in \"0123456789\" {\n      return false;\n    }\n    i := i + 1;\n  }\n  return true;\n}\n// </vc-code>\n\n", "", "", ""], ["DafnyProjects_tmp_tmp2acw_s4s_longestPrefix_longestPrefix.dfy", "root", true, "", "", false, "DafnyProjects_tmp_tmp2acw_s4s_longestPrefix_longestPrefix.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod longestPrefix(a: array<int>, b: array <int>) returns (i: nat) \n ensures i <= a.Length && i <= b.Length\n ensures a[..i] == b[..i]\n ensures i < a.Length && i < b.Length ==> a[i] != b[i]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "// MFES, Exam 8/Sept/20201, Exercise 5 \n\n// Computes the length (i) of the longest common prefix (initial subarray) \n// of two arrays a and b.\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod longestPrefix(a: array<int>, b: array <int>) returns (i: nat) \n ensures i <= a.Length && i <= b.Length\n ensures a[..i] == b[..i]\n ensures i < a.Length && i < b.Length ==> a[i] != b[i]\n// </vc-spec>\n// <vc-code>\n{\n  i := 0;\n  while i < a.Length && i < b.Length && a[i] == b[i]\n    invariant i <= a.Length && i <= b.Length\n    invariant a[..i] == b[..i]\n  {\n    i := i + 1;\n  }\n  return i;\n}\n// </vc-code>\n\n// Test method with an example.", "", "", ""], ["Dafny-Exercises_tmp_tmpjm75muf__Session7Exercises_ExerciseBubbleSort_bubbleSort.dfy", "root", false, "", "", false, "Dafny-Exercises_tmp_tmpjm75muf__Session7Exercises_ExerciseBubbleSort_bubbleSort.dfy", "// <vc-preamble>\npredicate sorted_seg(a:array<int>, i:int, j:int)\nrequires 0 <= i <= j <= a.Length\nreads a\n{\n    forall l, k :: i <= l <= k < j ==> a[l] <= a[k]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod bubbleSort(a:array<int>, c:int, f:int)\nmodifies a \nrequires 0 <= c <= f <= a.Length\nensures sorted_seg(a,c,f) \nensures multiset(a[c..f]) == old(multiset(a[c..f]))\nensures a[..c]==old(a[..c]) && a[f..]==old(a[f..])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny-Practice_tmp_tmphnmt4ovh_BST_InsertBST.dfy", "root", false, "", "", false, "Dafny-Practice_tmp_tmphnmt4ovh_BST_InsertBST.dfy", "// <vc-preamble>\ndatatype Tree = Empty | Node(int,Tree,Tree)\n\nfunction NumbersInTree(t: Tree): set<int>\n{\n    NumbersInSequence(Inorder(t))\n}\n\nfunction NumbersInSequence(q: seq<int>): set<int>\n{\n    set x | x in q\n}\n\npredicate BST(t: Tree)\n{\n    Ascending(Inorder(t))\n}\n\nfunction Inorder(t: Tree): seq<int>\n{\n    match t {\n        case Empty => []\n        case Node(n',nt1,nt2) => Inorder(nt1)+[n']+Inorder(nt2)\n    }\n}\n\npredicate Ascending(q: seq<int>)\n{\n    forall i,j :: 0 <= i < j < |q| ==> q[i] < q[j]\n}\n\npredicate NoDuplicates(q: seq<int>) { forall i,j :: 0 <= i < j < |q| ==> q[i] != q[j] }\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod InsertBST(t0: Tree, x: int) returns (t: Tree)\n    requires BST(t0) && x !in NumbersInTree(t0)\n    ensures BST(t) && NumbersInTree(t) == NumbersInTree(t0)+{x}\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Programmverifikation-und-synthese_tmp_tmppurk6ime_PVS_Assignment_ex_07_Hoangkim_ex07_Hoangkim_selectionSort.dfy", "root", false, "", "", false, "Programmverifikation-und-synthese_tmp_tmppurk6ime_PVS_Assignment_ex_07_Hoangkim_ex07_Hoangkim_selectionSort.dfy", "// <vc-preamble>\nmethod FindMin(a: array<int>, lo: nat) returns (minIdx: nat)\n    requires a != null && a.Length > 0 && lo < a.Length\n    ensures lo <= minIdx < a.Length\n    ensures forall x :: lo <= x < a.Length ==> a[minIdx] <= a[x]\n{\n  assume{:axiom} false;\n}\n\nghost predicate sorted(a:seq<int>)\n{\n    forall i | 0 < i < |a| :: a[i-1] <= a[i]     \n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod selectionSort(a: array<int>)\n    modifies a\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Programmverifikation-und-synthese_tmp_tmppurk6ime_PVS_Assignment_ex_04_Hoangkim_ex_04_Hoangkim_intDiv.dfy", "root", false, "", "", false, "Programmverifikation-und-synthese_tmp_tmppurk6ime_PVS_Assignment_ex_04_Hoangkim_ex_04_Hoangkim_intDiv.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod intDiv(n:int, d:int) returns (q:int, r:int)\nrequires n >= d && n >= 0 && d > 0 ;\nensures (d*q)+r == n && 0 <= q <= n/2 && 0 <= r < d;\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_18_RemoveChars.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_18_RemoveChars.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod RemoveChars(s1: string, s2: string) returns (v: string)\n    ensures |v| <= |s1|\n    ensures forall i :: 0 <= i < |v| ==> (v[i] in s1) && !(v[i] in s2)\n    ensures forall i :: 0 <= i < |s1| ==> (s1[i] in s2) || (s1[i] in v)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny-Exercises_tmp_tmpjm75muf__Session3Exercises_ExerciseMaximum_mlastMaximum.dfy", "root", true, "", "", false, "Dafny-Exercises_tmp_tmpjm75muf__Session3Exercises_ExerciseMaximum_mlastMaximum.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod mlastMaximum(v:array<int>) returns (i:int)\nrequires v.Length>0\nensures 0<=i<v.Length \nensures forall k:: 0<=k<v.Length ==> v[i]>=v[k]\nensures forall l:: i<l<v.Length ==> v[i]>v[l]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "//Algorithm 1: From left to right return the first\n\n//Algorithm 2: From right to left return the last\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod mlastMaximum(v:array<int>) returns (i:int)\nrequires v.Length>0\nensures 0<=i<v.Length \nensures forall k:: 0<=k<v.Length ==> v[i]>=v[k]\nensures forall l:: i<l<v.Length ==> v[i]>v[l]\n// </vc-spec>\n// <vc-code>\n{\n  var candidate := v.Length - 1;\n  if candidate > 0 {\n    for i := candidate - 1 downto 0 \n        invariant i >= -1\n        invariant i < v.Length\n        invariant 0 <= candidate < v.Length\n        invariant i <= candidate\n        invariant forall k :: i+1 <= k < v.Length ==> v[k] <= v[candidate]\n        invariant forall l :: candidate+1 <= l < v.Length ==> v[l] < v[candidate]\n    {\n      if v[i] > v[candidate] {\n        candidate := i;\n      }\n    }\n  }\n  return candidate;\n}\n// </vc-code>\n\n//Algorithm : from left to right\n//Algorithm : from right to left", "", "", ""], ["dafny-synthesis_task_id_627_SmallestMissingNumber.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_627_SmallestMissingNumber.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SmallestMissingNumber(s: seq<int>) returns (v: int)\n    requires forall i, j :: 0 <= i < j < |s| ==> s[i] <= s[j]\n    requires forall i :: 0 <= i < |s| ==> s[i] >= 0\n    ensures 0 <= v\n    ensures v !in s\n    ensures forall k :: 0 <= k < v ==> k in s\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_remove_front_remove_front.dfy", "root", true, "", "", false, "Clover_remove_front_remove_front.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod remove_front(a:array<int>) returns (c:array<int>)\n  requires a.Length>0\n  ensures  a[1..] == c[..]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod remove_front(a:array<int>) returns (c:array<int>)\n  requires a.Length>0\n  ensures  a[1..] == c[..]\n// </vc-spec>\n// <vc-code>\n{\n  c := new int[a.Length-1];\n  var i := 0;\n  while i < a.Length-1\n    invariant 0 <= i <= a.Length-1\n    invariant forall j :: 0 <= j < i ==> c[j] == a[j+1]\n  {\n    c[i] := a[i+1];\n    i := i + 1;\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_600_IsEven.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_600_IsEven.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod IsEven(n: int) returns (result: bool)\n    ensures result <==> n % 2 == 0\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_793_LastPosition.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_793_LastPosition.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod LastPosition(arr: array<int>, elem: int) returns (pos: int)\n    requires arr.Length > 0\n    requires forall i, j :: 0 <= i < j < arr.Length ==> arr[i] <= arr[j]\n    ensures pos == -1 || (0 <= pos < arr.Length && arr[pos] == elem && (pos <= arr.Length - 1 || arr[pos + 1] > elem))\n    ensures forall i :: 0 <= i < arr.Length ==> arr[i] == old(arr[i])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny_tmp_tmpv_d3qi10_3_cumsum_cumsum.dfy", "root", true, "", "", false, "Dafny_tmp_tmpv_d3qi10_3_cumsum_cumsum.dfy", "// <vc-preamble>\nfunction sum(a: array<int>, i: int): int\n    requires 0 <= i < a.Length\n    reads a\n{\n    a[i] + if i == 0 then 0 else sum(a, i - 1)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod cumsum(a: array<int>, b: array<int>)\n    requires  a.Length == b.Length && a.Length > 0 && a != b\n\n    ensures forall i | 0 <= i < a.Length :: b[i] == sum(a, i)\n    modifies b\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "function sum(a: array<int>, i: int): int\n    requires 0 <= i < a.Length\n    reads a\n{\n    a[i] + if i == 0 then 0 else sum(a, i - 1)\n}\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod cumsum(a: array<int>, b: array<int>)\n    requires  a.Length == b.Length && a.Length > 0 && a != b\n    // when you change a  , that's not the same object than b . \n    //requires b.Length > 0 \n    ensures forall i | 0 <= i < a.Length :: b[i] == sum(a, i)\n    modifies b\n// </vc-spec>\n// <vc-code>\n{\n    b[0] := a[0];\n    var i := 1;\n    while i < a.Length\n        invariant 1 <= i <= a.Length\n        invariant forall j | 0 <= j < i :: b[j] == sum(a, j)\n    {\n        b[i] := a[i] + b[i-1];\n        i := i + 1;\n    }\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_472_ContainsConsecutiveNumbers.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_472_ContainsConsecutiveNumbers.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ContainsConsecutiveNumbers(a: array<int>) returns (result: bool)\n    requires a.Length>0\n    ensures result <==> (exists i :: 0 <= i < a.Length - 1 && a[i] + 1 == a[i + 1])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-exercise_tmp_tmpouftptir_firstE_firstE.dfy", "root", false, "", "", false, "dafny-exercise_tmp_tmpouftptir_firstE_firstE.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod firstE(a: array<char>) returns (x: int)\nensures if 'e' in a[..] then 0 <= x < a.Length && a[x] == 'e' && forall i | 0 <= i < x :: a[i] != 'e' else x == -1\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_770_SumOfFourthPowerOfOddNumbers.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_770_SumOfFourthPowerOfOddNumbers.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SumOfFourthPowerOfOddNumbers(n: int) returns (sum: int)\n    requires n > 0\n    ensures sum == n * (2 * n + 1) * (24 * n * n * n - 12 * n * n  - 14 * n + 7) / 15\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_even_list_FindEvenNumbers.dfy", "root", true, "", "", false, "Clover_even_list_FindEvenNumbers.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod FindEvenNumbers (arr: array<int>) returns (evenNumbers: array<int>)\n  ensures forall x {:trigger (x%2) }:: x in arr[..] &&  (x%2==0)==> x in evenNumbers[..]\n  ensures forall x :: x !in arr[..] ==> x !in evenNumbers[..]\n  ensures forall k :: 0 <= k < evenNumbers.Length ==> evenNumbers[k] % 2 == 0\n  ensures forall k, l :: 0 <= k < l < evenNumbers.Length ==>\n                           exists n, m :: 0 <= n < m < arr.Length && evenNumbers[k] == arr[n] && evenNumbers[l] == arr[m]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\npredicate appearsBefore(a: array<int>, x: int, n: int, y: int, m: int)\n  reads a\n  requires 0 <= n < a.Length && 0 <= m < a.Length\n{\n  a[n] == x && a[m] == y && n < m\n}\n\npredicate preservesOrder(a: array<int>, b: array<int>)\n  reads a, b\n  ensures preservesOrder(a, b) ==> forall k :: 0 <= k < b.Length ==> b[k] in a[..]\n{\n  forall k, l :: 0 <= k < l < b.Length ==>\n    exists n, m :: 0 <= n < m < a.Length && appearsBefore(a, b[k], n, b[l], m)\n}\n\nlemma array_order_preservation(arr: array<int>, evenNumbers: array<int>)\n  requires forall x :: x !in arr[..] ==> x !in evenNumbers[..]\n  requires forall k :: 0 <= k < evenNumbers.Length ==> evenNumbers[k] % 2 == 0\n  requires forall x {:trigger (x%2)} :: x in arr[..] && (x%2==0) ==> x in evenNumbers[..]\n  ensures preservesOrder(arr, evenNumbers)\n{\n  forall k, l | 0 <= k < l < evenNumbers.Length\n    ensures exists n, m :: 0 <= n < m < arr.Length && arr[n] == evenNumbers[k] && arr[m] == evenNumbers[l]\n  {\n    var nk:=-1;\n    var ml:=-1;\n    var firstFound := false;\n    var secondFound := false;\n    for i:=0 to arr.Length\n      invariant 0 <= i <= arr.Length\n      invariant nk == -1 ==> !firstFound\n      invariant ml == -1 ==> !secondFound\n      invariant firstFound ==> nk >= 0 && nk < i && arr[nk] == evenNumbers[k]\n      invariant secondFound ==> ml >= 0 && ml < i && arr[ml] == evenNumbers[l] && nk < ml\n    {\n      if i < arr.Length {\n        if !firstFound && arr[i] == evenNumbers[k] {\n          nk := i;\n          firstFound := true;\n        }\n        if firstFound && !secondFound && arr[i] == evenNumbers[l] && i > nk {\n          ml := i;\n          secondFound := true;\n        }\n      }\n    }\n    assert firstFound;\n    assert secondFound;\n    assert nk >= 0;\n    assert ml >= 0;\n    assert nk < ml;\n    assert arr[nk] == evenNumbers[k];\n    assert arr[ml] == evenNumbers[l];\n    assert 0 <= nk < arr.Length;\n    assert 0 <= ml < arr.Length;\n  }\n}\n\nfunction CountEven(s: seq<int>): nat\n  decreases s\n{\n  if |s| == 0 then 0\n  else (if s[0] % 2 == 0 then 1 else 0) + CountEven(s[1..])\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod FindEvenNumbers (arr: array<int>) returns (evenNumbers: array<int>)\n  ensures forall x {:trigger (x%2) }:: x in arr[..] &&  (x%2==0)==> x in evenNumbers[..]\n  ensures forall x :: x !in arr[..] ==> x !in evenNumbers[..]\n  ensures forall k :: 0 <= k < evenNumbers.Length ==> evenNumbers[k] % 2 == 0\n  ensures forall k, l :: 0 <= k < l < evenNumbers.Length ==>\n                           exists n, m :: 0 <= n < m < arr.Length && evenNumbers[k] == arr[n] && evenNumbers[l] == arr[m]\n// </vc-spec>\n// <vc-code>\n{\n  var count := 0;\n  for i:=0 to arr.Length\n    invariant 0 <= i <= arr.Length\n    invariant count == CountEven(arr[0..i])\n  {\n    if i < arr.Length && arr[i] % 2 == 0 {\n      count := count + 1;\n    }\n  }\n  evenNumbers := new int[count];\n  var j := 0;\n  for i:=0 to arr.Length\n    invariant 0 <= i <= arr.Length\n    invariant 0 <= j <= count\n    invariant j == CountEven(arr[0..i])\n    invariant forall k :: 0 <= k < j ==> evenNumbers[k] in arr[0..i] && evenNumbers[k] % 2 == 0\n    invariant forall x :: x in arr[0..i] && x % 2 == 0 ==> x in evenNumbers[0..j]\n  {\n    if i < arr.Length && arr[i] % 2 == 0 {\n      evenNumbers[j] := arr[i];\n      j := j + 1;\n    }\n  }\n  array_order_preservation(arr, evenNumbers);\n}\n// </vc-code>\n\n", "", "", ""], ["DafnyProjects_tmp_tmp2acw_s4s_partitionOddEven_partitionOddEven.dfy", "root", true, "", "", false, "DafnyProjects_tmp_tmp2acw_s4s_partitionOddEven_partitionOddEven.dfy", "// <vc-preamble>\npredicate  odd(n: nat) { n % 2 == 1 }\npredicate  even(n: nat) { n % 2 == 0 }\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod partitionOddEven(a: array<nat>) \n  modifies a\n  ensures multiset(a[..]) == multiset(old(a[..]))\n  ensures ! exists i, j :: 0 <= i < j < a.Length && even(a[i]) && odd(a[j])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "// Rearranges the elements in an array 'a' of natural numbers,\n// so that all odd numbers appear before all even numbers.\n\npredicate  odd(n: nat) { n % 2 == 1 }\npredicate  even(n: nat) { n % 2 == 0 }\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod partitionOddEven(a: array<nat>) \n  modifies a\n  ensures multiset(a[..]) == multiset(old(a[..]))\n  ensures ! exists i, j :: 0 <= i < j < a.Length && even(a[i]) && odd(a[j])\n// </vc-spec>\n// <vc-code>\n{\n  var left := 0;\n  var right := a.Length - 1;\n\n  while left < right\n    invariant 0 <= left <= right+1 <= a.Length\n    invariant forall i :: 0 <= i < left ==> odd(a[i])\n    invariant forall i :: right < i < a.Length ==> even(a[i])\n    invariant multiset(a[..]) == multiset(old(a[..]))\n  {\n    while left < right && odd(a[left])\n      invariant left <= right\n      invariant forall i :: 0 <= i < left ==> odd(a[i])\n      invariant forall i :: right < i < a.Length ==> even(a[i])\n      invariant multiset(a[..]) == multiset(old(a[..]))\n    {\n      left := left + 1;\n    }\n\n    while left < right && even(a[right])\n      invariant left <= right\n      invariant forall i :: 0 <= i < left ==> odd(a[i])\n      invariant forall i :: right < i < a.Length ==> even(a[i])\n      invariant multiset(a[..]) == multiset(old(a[..]))\n    {\n      right := right - 1;\n    }\n\n    if left < right {\n      a[left], a[right] := a[right], a[left];\n      left := left + 1;\n      right := right - 1;\n    }\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["SENG2011_tmp_tmpgk5jq85q_ass2_ex3_BadSort.dfy", "root", false, "", "", false, "SENG2011_tmp_tmpgk5jq85q_ass2_ex3_BadSort.dfy", "// <vc-preamble>\npredicate sortedbad(s:string) \n{\n\n    forall i,j :: 0 <= i < |s| && 0 <= j < |s| && s[i] == 'b' && (s[j] == 'a' || s[j] == 'd') ==> i < j &&\n\n    forall i,j :: 0 <= i < |s| && 0 <= j < |s| && s[i] == 'a' && s[j] == 'b' ==> i > j &&\n\n    forall i,j :: 0 <= i < |s| && 0 <= j < |s| && s[i] == 'a' && s[j] == 'd' ==> i < j &&\n\n    forall i,j :: 0 <= i < |s| && 0 <= j < |s| && s[i] == 'd' && (s[j] == 'a' || s[j] == 'b') ==> i > j\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod BadSort(a: string) returns (b: string)\nrequires forall k :: 0 <= k < |a| ==> a[k] == 'b' || a[k] == 'a' || a[k] == 'd';\nensures sortedbad(b);\nensures multiset(a[..]) == multiset(b[..]);\nensures |a| == |b|;\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["DafnyProjects_tmp_tmp2acw_s4s_Power_powerDC.dfy", "root", true, "", "", false, "DafnyProjects_tmp_tmp2acw_s4s_Power_powerDC.dfy", "// <vc-preamble>\nfunction power(x: real, n: nat) : real {\n    if n == 0 then 1.0 else x * power(x, n-1)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod powerDC(x: real, n: nat) returns (p : real)\n  ensures p == power(x, n)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "/* \n* Formal verification of an O(log n) algorithm to calculate the natural power of a real number (x^n), \n* illustrating the usage of lemmas and automatic induction in Dafny.\n* J.  Pascoal Faria, FEUP, Jan/2022.\n*/\n\n// Recursive definition of x^n in functional style, with time and space complexity O(n).\nfunction power(x: real, n: nat) : real {\n    if n == 0 then 1.0 else x * power(x, n-1)\n}\n\n// Computation of x^n in time and space O(log n).\n\n// <vc-helpers>\nlemma PowerAdditive(x: real, a: nat, b: nat)\n  ensures power(x, a+b) == power(x, a) * power(x, b)\n{\n  if b == 0 {\n  } else {\n    PowerAdditive(x, a, b-1);\n    assert power(x, a+b) == x * power(x, a+b-1);\n    assert power(x, a+b-1) == power(x, a) * power(x, b-1);\n    assert power(x, a+b) == x * (power(x, a) * power(x, b-1));\n    assert power(x, a+b) == power(x, a) * (x * power(x, b-1));\n    assert power(x, a+b) == power(x, a) * power(x, b);\n  }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod powerDC(x: real, n: nat) returns (p : real)\n  ensures p == power(x, n)\n// </vc-spec>\n// <vc-code>\n{\n  if n == 0 {\n    return 1.0;\n  } else {\n    var k := n / 2;\n    var half := powerDC(x, k);\n    var halfsq := half * half;\n    if n % 2 == 0 {\n      assert 2 * k == n;\n      PowerAdditive(x, k, k);\n      return halfsq;\n    } else {\n      assert 2 * k + 1 == n;\n      PowerAdditive(x, k, k);\n      PowerAdditive(x, 1, 2*k);\n      return x * halfsq;\n    }\n  }\n}\n// </vc-code>\n\n// A few test cases (checked statically by Dafny).", "", "", ""], ["dafny-synthesis_task_id_566_SumOfDigits.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_566_SumOfDigits.dfy", "// <vc-preamble>\nghost function IntValues(n: int) : (r: seq<int>)\n  requires n >= 0\n  ensures 0 in r\n  ensures n in r\n  ensures n/10 in r\n\n{\n  if n == 0 then [0]\n  else [n] + IntValues(n/10)\n}\n\nfunction Power10(n: nat): (r: nat)\n  ensures r >= 1\n  ensures n > 0 ==> r % 10 == 0\n{\n  if (n == 0) then 1 else 10 * Power10(n-1)\n}\n\nfunction NumberToSeq(number: int) : seq<int>\n  requires number >= 0\n{\n  if number == 0 then []\n  else [number % 10] + NumberToSeq(number/10)\n}\n\nfunction Sum(digits: seq<int>) : int\n{\n  if |digits| == 0 then 0 else digits[0] + Sum(digits[1..])\n}\n\nfunction SumDigits(n: nat) : nat\n{\n  var ndigits := NumberOfDigits(n);\n  var p := Power10(ndigits-1);\n  SumDigitsRecursive(n, p)\n}\n\nfunction SumDigitsRecursive(n: nat, p: nat) : (r: nat)\n{\n  if n == 0 || p == 0 then 0\n  else\n    var leftMostDigit := n/p;\n    var rest := n%p;\n    leftMostDigit + SumDigitsRecursive(rest, p/10)\n\n}\n\nfunction NumberOfDigits(n: nat) : (r: nat)\n  ensures r >= 1\n  ensures r == 1 <==> 0 <= n <= 9\n{\n  if 0 <= n <= 9 then 1 else 1+NumberOfDigits(n/10)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SumOfDigits(number: nat) returns (sum: nat)\n  requires number >= 0\n  ensures sum >= 0\n  ensures sum == SumDigits(number)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_from_dafny_main_repo_dafny2_COST-verif-comp-2011-3-TwoDuplicates_Search.dfy", "root", false, "", "", false, "Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_from_dafny_main_repo_dafny2_COST-verif-comp-2011-3-TwoDuplicates_Search.dfy", "// <vc-preamble>\nghost predicate IsDuplicate(a: array<int>, p: int)\n  reads a\n{\n  IsPrefixDuplicate(a, a.Length, p)\n}\n\nghost predicate IsPrefixDuplicate(a: array<int>, k: int, p: int)\n  requires 0 <= k <= a.Length;\n  reads a;\n{\n  exists i,j :: 0 <= i < j < k && a[i] == a[j] == p\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Search(a: array<int>) returns (p: int, q: int)\n  requires 4 <= a.Length;\n  requires exists p,q :: p != q && IsDuplicate(a, p) && IsDuplicate(a, q);\n  requires forall i :: 0 <= i < a.Length ==> 0 <= a[i] < a.Length - 2;\n  ensures p != q && IsDuplicate(a, p) && IsDuplicate(a, q);\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny-Exercises_tmp_tmpjm75muf__Session5Exercises_ExerciseSumElems_sumElemsB.dfy", "root", true, "", "", false, "Dafny-Exercises_tmp_tmpjm75muf__Session5Exercises_ExerciseSumElems_sumElemsB.dfy", "// <vc-preamble>\nfunction SumR(s:seq<int>):int\ndecreases s\n{\n    if (s==[]) then 0\n    else SumR(s[..|s|-1])+s[|s|-1]\n}\n\nfunction SumL(s:seq<int>):int\ndecreases s\n{\n    if (s==[]) then 0\n    else s[0]+SumL(s[1..])\n}\n\nfunction SumV(v:array<int>,c:int,f:int):int\n  requires 0<=c<=f<=v.Length\n  reads v\n  {SumR(v[c..f])}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod sumElemsB(v:array<int>) returns (sum:int)\nensures sum==SumR(v[0..v.Length])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "function SumR(s:seq<int>):int\ndecreases s\n{\n    if (s==[]) then 0\n    else SumR(s[..|s|-1])+s[|s|-1]\n}\n\nfunction SumL(s:seq<int>):int\ndecreases s\n{\n    if (s==[]) then 0\n    else s[0]+SumL(s[1..])\n}\n\n\nfunction SumV(v:array<int>,c:int,f:int):int\n  requires 0<=c<=f<=v.Length\n  reads v\n  {SumR(v[c..f])}\n\n// <vc-helpers>\nlemma {:autocontracts} SumL_SumR_eq(s: seq<int>)\n  ensures SumL(s) == SumR(s)\n  decreases |s|\n{\n  if |s| == 0 {\n  } else if |s| == 1 {\n    calc {\n      SumL(s);\n      s[0] + SumL(s[1..]);\n      s[0] + 0;\n      s[0];\n      SumR(s[..|s|-1]) + s[|s|-1];\n      0 + s[0];\n      s[0];\n    }\n  } else {\n    calc {\n      SumL(s);\n      s[0] + SumL(s[1..]);\n      s[0] + SumR(s[1..]); { SumL_SumR_eq(s[1..]); }\n      s[0] + (SumR(s[1..|s|-1]) + s[|s|-1]);\n      s[0] + SumR(s[1..|s|-1]) + s[|s|-1];\n      (s[0] + SumR(s[1..|s|-1])) + s[|s|-1];\n      SumR(s[0..|s|-1]) + s[|s|-1];\n      SumR(s);\n    }\n  }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod sumElemsB(v:array<int>) returns (sum:int)\n//ensures sum==SumL(v[0..v.Length])\nensures sum==SumR(v[0..v.Length])\n// </vc-spec>\n// <vc-code>\n{\n  var i := 0;\n  sum := 0;\n  while i < v.Length\n    invariant 0 <= i <= v.Length\n    invariant sum == SumV(v, 0, i)\n  {\n    sum := sum + v[i];\n    i := i + 1;\n  }\n  return sum;\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_304_ElementAtIndexAfterRotation.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_304_ElementAtIndexAfterRotation.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ElementAtIndexAfterRotation(l: seq<int>, n: int, index: int) returns (element: int)\n    requires n >= 0\n    requires 0 <= index < |l|\n    ensures element == l[(index - n + |l|) % |l|]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny_tmp_tmpmvs2dmry_examples2_Product.dfy", "root", true, "", "", false, "Dafny_tmp_tmpmvs2dmry_examples2_Product.dfy", "// <vc-preamble>\nfunction gcd(m: nat, n: nat) : nat\nrequires m>0 && n>0;\ndecreases m+n\n{\n    if(m==n) then n \n    else if( m > n) then gcd(m-n,n)\n    else gcd(m, n-m)\n}\n\nfunction exp(x: real, n: nat) :real\ndecreases n;\n{\n    if(n == 0) then 1.0\n    else if (x==0.0) then 0.0\n    else if (n  ==0 && x == 0.0) then 1.0\n    else x*exp(x, n-1)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Product(m: nat, n:nat) returns (res:nat)\nensures res == m*n;\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "function gcd(m: nat, n: nat) : nat\nrequires m>0 && n>0;\ndecreases m+n\n{\n    if(m==n) then n \n    else if( m > n) then gcd(m-n,n)\n    else gcd(m, n-m)\n}\n\n\nfunction exp(x: real, n: nat) :real\ndecreases n;\n{\n    if(n == 0) then 1.0\n    else if (x==0.0) then 0.0\n    else if (n  ==0 && x == 0.0) then 1.0\n    else x*exp(x, n-1)\n}\n\n// method add_by_inc_vc(x: int, y:int) returns (z:int)\n// {\n//     assume x>=0 && y>=0;\n//     z := x;\n//     var i := 0;\n//     assert 0 <= i <= y && z == x + i;\n//     z,i = *,*;\n//     assume 0 <= i <= y && z == x + i;\n//     if (i < y) \n//     {\n//         ghost var rank0 := y-i\n//         z := z+1;\n//         i := i+1; \n//         assert(y-i < rank0)\n//         ghost var rank1 := y-i\n//         assert(rank1 < rank0)\n//         assert(rank1 >=0)\n//         assert 0 <= i <= y && z == x + i;\n//         assume(false);\n//     }\n//     assert (z == x+y);\n//     assert (i == y);\n//     return z;\n// }\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod Product(m: nat, n:nat) returns (res:nat)\nensures res == m*n;\n// </vc-spec>\n// <vc-code>\n{\n  res := 0;\n  var i := 0;\n  while i < n\n    invariant 0 <= i <= n && res == m * i\n  {\n    res := res + m;\n    i := i + 1;\n  }\n  return res;\n}\n// </vc-code>\n\n", "", "", ""], ["Dafny-Exercises_tmp_tmpjm75muf__Session2Exercises_ExercisePositive_mpositive.dfy", "root", true, "", "", false, "Dafny-Exercises_tmp_tmpjm75muf__Session2Exercises_ExercisePositive_mpositive.dfy", "// <vc-preamble>\npredicate positive(s:seq<int>)\n{forall u::0<=u<|s| ==> s[u]>=0}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod mpositive(v:array<int>) returns (b:bool)\nensures b==positive(v[0..v.Length])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "predicate positive(s:seq<int>)\n{forall u::0<=u<|s| ==> s[u]>=0}\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod mpositive(v:array<int>) returns (b:bool)\nensures b==positive(v[0..v.Length])\n// </vc-spec>\n// <vc-code>\n{\n  var i := 0;\n  while i < v.Length\n    invariant 0 <= i <= v.Length\n    invariant forall k :: 0 <= k < i ==> v[k] >= 0\n  {\n    if v[i] < 0 {\n      return false;\n    }\n    i := i + 1;\n  }\n  return true;\n}\n// </vc-code>\n\n", "", "", ""], ["Dafny-Exercises_tmp_tmpjm75muf__Session7Exercises_ExerciseSeparate_separate.dfy", "root", true, "", "", false, "Dafny-Exercises_tmp_tmpjm75muf__Session7Exercises_ExerciseSeparate_separate.dfy", "// <vc-preamble>\npredicate strictNegative(v:array<int>,i:int,j:int)\nreads v\nrequires 0<=i<=j<=v.Length\n{forall u | i<=u<j :: v[u]<0}\n\npredicate positive(s:seq<int>)\n{forall u::0<=u<|s| ==> s[u]>=0}\n\npredicate isPermutation(s:seq<int>, t:seq<int>)\n{multiset(s)==multiset(t)}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod separate(v:array<int>) returns (i:int)\nmodifies v\nensures 0<=i<=v.Length\nensures positive(v[0..i]) && strictNegative(v,i,v.Length)\nensures isPermutation(v[0..v.Length], old(v[0..v.Length]))\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "predicate strictNegative(v:array<int>,i:int,j:int)\nreads v\nrequires 0<=i<=j<=v.Length\n{forall u | i<=u<j :: v[u]<0}\n\npredicate positive(s:seq<int>)\n{forall u::0<=u<|s| ==> s[u]>=0}\n\npredicate isPermutation(s:seq<int>, t:seq<int>)\n{multiset(s)==multiset(t)}\n\n/**\nreturns an index st new array is a permutation of the old array\npositive first and then strictnegative, i is the firs neg or len if not any */\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod separate(v:array<int>) returns (i:int)\nmodifies v\nensures 0<=i<=v.Length\nensures positive(v[0..i]) && strictNegative(v,i,v.Length)\nensures isPermutation(v[0..v.Length], old(v[0..v.Length]))\n// </vc-spec>\n// <vc-code>\n{\n  var j: int;\n  i := 0;\n  j := v.Length - 1;\n  while i <= j\n    invariant 0 <= i <= j+1 <= v.Length\n    invariant positive(v[0..i])\n    invariant strictNegative(v, j+1, v.Length)\n    invariant multiset(v[0..v.Length]) == multiset(old(v[0..v.Length]))\n  {\n    if v[i] < 0 {\n      var temp := v[i];\n      v[i] := v[j];\n      v[j] := temp;\n      j := j - 1;\n    } else {\n      i := i + 1;\n    }\n  }\n  return i;\n}\n// </vc-code>\n\n", "", "", ""], ["Clover_canyon_search_CanyonSearch.dfy", "root", true, "", "", false, "Clover_canyon_search_CanyonSearch.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod CanyonSearch(a: array<int>, b: array<int>) returns (d:nat)\n  requires a.Length !=0 && b.Length!=0\n  requires forall i,j :: 0<=i<j<a.Length ==> a[i]<=a[j]\n  requires forall i,j :: 0<=i<j<b.Length ==> b[i]<=b[j]\n  ensures exists i,j:: 0<=i<a.Length && 0<=j<b.Length && d==if a[i] < b[j] then (b[j]-a[i]) else (a[i]-b[j])\n  ensures forall i,j:: 0<=i<a.Length && 0<=j<b.Length ==> d<=if a[i] < b[j] then (b[j]-a[i]) else (a[i]-b[j])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\nfunction abs(x: int): nat {\n    if x < 0 then -x else x\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod CanyonSearch(a: array<int>, b: array<int>) returns (d:nat)\n  requires a.Length !=0 && b.Length!=0\n  requires forall i,j :: 0<=i<j<a.Length ==> a[i]<=a[j]\n  requires forall i,j :: 0<=i<j<b.Length ==> b[i]<=b[j]\n  ensures exists i,j:: 0<=i<a.Length && 0<=j<b.Length && d==if a[i] < b[j] then (b[j]-a[i]) else (a[i]-b[j])\n  ensures forall i,j:: 0<=i<a.Length && 0<=j<b.Length ==> d<=if a[i] < b[j] then (b[j]-a[i]) else (a[i]-b[j])\n// </vc-spec>\n// <vc-code>\n{\n    var minDiff: nat := abs(a[0] - b[0]);\n    for i := 0 to a.Length\n        for j := 0 to b.Length\n        {\n            var currentDiff := abs(a[i] - b[j]);\n            if currentDiff < minDiff {\n                minDiff := currentDiff;\n            }\n        }\n    return minDiff;\n}\n// </vc-code>\n\n", "", "", ""], ["Software-Verification_tmp_tmpv4ueky2d_Best_Time_to_Buy_and_Sell_Stock_best_time_to_buy_and_sell_stock_best_time_to_buy_and_sell_stock.dfy", "root", false, "", "", false, "Software-Verification_tmp_tmpv4ueky2d_Best_Time_to_Buy_and_Sell_Stock_best_time_to_buy_and_sell_stock_best_time_to_buy_and_sell_stock.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod best_time_to_buy_and_sell_stock(prices: array<int>) returns (max_profit: int)\n    requires 1 <= prices.Length <= 100000\n    requires forall i :: 0 <= i < prices.Length ==> 0 <= prices[i] <= 10000\n    ensures forall i, j :: 0 <= i < j < prices.Length ==> max_profit >= prices[j] - prices[i]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_587_ArrayToSeq.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_587_ArrayToSeq.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ArrayToSeq(a: array<int>) returns (s: seq<int>)\n    requires a != null\n    ensures |s| == a.Length\n    ensures forall i :: 0 <= i < a.Length ==> s[i] == a[i]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["llm-verified-eval_tmp_tmpd2deqn_i_dafny_0_has_close_elements.dfy", "root", false, "", "", false, "llm-verified-eval_tmp_tmpd2deqn_i_dafny_0_has_close_elements.dfy", "// <vc-preamble>\nfunction abs(x: real): real\n{\n  if x < 0.0 then -x else x\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod has_close_elements(numbers: seq<real>, threshold: real) returns (result: bool)\n    ensures result <==> exists i, j ::\n      0 <= i < |numbers| &&\n      0 <= j < |numbers| &&\n      i != j &&\n      abs(numbers[i] - numbers[j]) < threshold\n    ensures result ==> |numbers| > 1\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_return_seven_M.dfy", "root", true, "", "", false, "Clover_return_seven_M.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod M(x: int) returns (seven: int)\n  ensures seven==7\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod M(x: int) returns (seven: int)\n  ensures seven==7\n// </vc-spec>\n// <vc-code>\n{\n  return 7;\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_557_ToggleCase.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_557_ToggleCase.dfy", "// <vc-preamble>\npredicate IsLowerCase(c : char)\n{\n    97 <= c as int <= 122\n}\n\npredicate IsUpperCase(c : char)\n{\n    65 <= c as int <= 90\n}\n\npredicate IsLowerUpperPair(c : char, C : char)\n{\n    (c as int) == (C as int) + 32\n}\n\npredicate IsUpperLowerPair(C : char, c : char)\n{\n    (C as int) == (c as int) - 32\n}\n\nfunction ShiftMinus32(c : char) :  char\n{\n    ((c as int - 32) % 128) as char\n}\n\nfunction Shift32(c : char) :  char\n{\n    ((c as int + 32) % 128) as char\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ToggleCase(s: string) returns (v: string)\n    ensures |v| == |s|\n    ensures forall i :: 0 <= i < |s| ==>  if IsLowerCase(s[i]) then IsLowerUpperPair(s[i], v[i]) else if IsUpperCase(s[i]) then IsUpperLowerPair(s[i], v[i]) else v[i] == s[i]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-language-server_tmp_tmpkir0kenl_Test_vstte2012_Two-Way-Sort_two_way_sort.dfy", "root", false, "", "", false, "dafny-language-server_tmp_tmpkir0kenl_Test_vstte2012_Two-Way-Sort_two_way_sort.dfy", "// <vc-preamble>\nfunction multisets<T>(s: seq<T>): multiset<T>\n{\n    if |s| == 0 then multiset{} \n    else multiset{s[0]} + multiset(s[1..])\n}\n\nmethod swap<T>(a: array<T>, i: int, j: int)\n  requires 0 <= i < j < a.Length\n  modifies a\n  ensures a[i] == old(a[j])\n  ensures a[j] == old(a[i])\n  ensures forall m :: 0 <= m < a.Length && m != i && m != j ==> a[m] == old(a[m])\n  ensures multiset(a[..]) == old(multiset(a[..]))\n{\n  assume{:axiom} false;\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod two_way_sort(a: array<bool>)\n  modifies a\n  ensures forall m,n :: 0 <= m < n < a.Length ==> (!a[m] || a[n])\n  ensures multiset(a[..]) == old(multiset(a[..]))\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_14_TriangularPrismVolume.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_14_TriangularPrismVolume.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod TriangularPrismVolume(base: int, height: int, length: int) returns (volume: int)\n    requires base > 0\n    requires height > 0\n    requires length > 0\n    ensures volume == (base * height * length) / 2\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_581_SquarePyramidSurfaceArea.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_581_SquarePyramidSurfaceArea.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SquarePyramidSurfaceArea(baseEdge: int, height: int) returns (area: int)\n    requires baseEdge > 0\n    requires height > 0\n    ensures area == baseEdge * baseEdge + 2 * baseEdge * height\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_rotate_rotate.dfy", "root", true, "", "", false, "Clover_rotate_rotate.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod rotate(a: array<int>, offset:int) returns (b: array<int> )\n  requires 0<=offset\n  ensures b.Length==a.Length\n  ensures forall  i::0<=i<a.Length ==>  b[i]==a[(i+offset)%a.Length]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod rotate(a: array<int>, offset:int) returns (b: array<int> )\n  requires 0<=offset\n  ensures b.Length==a.Length\n  ensures forall  i::0<=i<a.Length ==>  b[i]==a[(i+offset)%a.Length]\n// </vc-spec>\n// <vc-code>\n{\n  var n := a.Length;\n  b := new int[n];\n  for i := 0 to n\n    invariant forall j :: 0<=j<i ==> b[j] == a[(j+offset) % n]\n  {\n    b[i] := a[(i+offset) % n];\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["Clover_array_product_arrayProduct.dfy", "root", true, "", "", false, "Clover_array_product_arrayProduct.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod arrayProduct(a: array<int>, b: array<int>) returns (c: array<int> )\n  requires a.Length==b.Length\n  ensures c.Length==a.Length\n  ensures forall i:: 0 <= i< a.Length==> a[i] * b[i]==c[i]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n// </vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod arrayProduct(a: array<int>, b: array<int>) returns (c: array<int> )\n  requires a.Length==b.Length\n  ensures c.Length==a.Length\n  ensures forall i:: 0 <= i< a.Length==> a[i] * b[i]==c[i]\n// </vc-spec>\n// <vc-code>\n{\n  c := new int[a.Length];\n  var i := 0;\n  while i < a.Length\n    invariant 0 <= i <= a.Length\n    invariant forall j :: 0 <= j < i ==> c[j] == a[j] * b[j]\n  {\n    c[i] := a[i] * b[i];\n    i := i + 1;\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["SENG2011_tmp_tmpgk5jq85q_exam_ex2_Getmini.dfy", "root", false, "", "", false, "SENG2011_tmp_tmpgk5jq85q_exam_ex2_Getmini.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Getmini(a:array<int>) returns(mini:nat) \nrequires a.Length > 0\nensures 0 <= mini < a.Length\nensures forall x :: 0 <= x < a.Length ==> a[mini] <= a[x]\nensures forall x :: 0 <= x < mini ==> a[mini] < a[x]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["formal_verication_dafny_tmp_tmpwgl2qz28_Challenges_ex7_Sorter.dfy", "root", false, "", "", false, "formal_verication_dafny_tmp_tmpwgl2qz28_Challenges_ex7_Sorter.dfy", "// <vc-preamble>\ndatatype Bases = A | C | G | T\n\nmethod Exchanger(s: seq<Bases>, x:nat, y:nat) returns (t: seq<Bases>)\nrequires 0 < |s| && x < |s| && y < |s|\nensures |t| == |s|\nensures forall b:nat :: 0 <= b < |s| && b != x && b != y ==> t[b] == s[b]\nensures t[x] == s[y] && s[x] == t[y]\nensures multiset(s) == multiset(t)\n{\n  assume{:axiom} false;\n}\n\npredicate below(first: Bases, second: Bases)\n{\n    first == second ||\n    first == A || \n    (first == C && (second ==  G || second == T)) || \n    (first == G && second == T) ||\n    second == T\n}\n\npredicate bordered(s:seq<Bases>)\n{\n    forall j, k :: 0 <= j < k < |s| ==> below(s[j], s[k])\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Sorter(bases: seq<Bases>) returns (sobases:seq<Bases>)\nrequires 0 < |bases|\nensures |sobases| == |bases|\nensures bordered(sobases)\nensures multiset(bases) == multiset(sobases);\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_799_RotateLeftBits.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_799_RotateLeftBits.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod RotateLeftBits(n: bv32, d: int) returns (result: bv32)\n    requires 0 <= d < 32\n    ensures result == ((n << d) | (n >> (32 - d)))\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["SENG2011_tmp_tmpgk5jq85q_exam_ex3_Symmetric.dfy", "root", false, "", "", false, "SENG2011_tmp_tmpgk5jq85q_exam_ex3_Symmetric.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Symmetric(a: array<int>) returns (flag: bool)\nensures flag == true ==> forall x :: 0 <= x < a.Length ==> a[x] == a[a.Length - x - 1]\nensures flag == false ==> exists x :: 0 <= x < a.Length && a[x] != a[a.Length - x - 1]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Final-Project-Dafny_tmp_tmpmcywuqox_Attempts_Insertion_Sorted_Standard_sorting.dfy", "root", true, "", "", false, "Final-Project-Dafny_tmp_tmpmcywuqox_Attempts_Insertion_Sorted_Standard_sorting.dfy", "// <vc-preamble>\npredicate InsertionSorted(Array: array<int>, left: int, right: int)  \n  requires 0 <= left <= right <= Array.Length       \n  reads Array       \n{           \n  forall i,j :: left <= i < j < right ==> Array[i] <= Array[j]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod sorting(Array: array<int>)\n  requires Array.Length > 1 \n  ensures InsertionSorted(Array, 0, Array.Length) \n  modifies Array\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "predicate InsertionSorted(Array: array<int>, left: int, right: int)  \n  requires 0 <= left <= right <= Array.Length       \n  reads Array       \n{           \n  forall i,j :: left <= i < j < right ==> Array[i] <= Array[j]\n}\n\n// <vc-helpers>\nlemma Lemma_InsertAtPositionMaintainsSortedness(Array: array<int>, left: int, right: int, pos: int, val: int)\n  requires InsertionSorted(Array, left, right)\n  requires left <= pos <= right\n  requires forall j :: left <= j < pos ==> Array[j] <= val\n  requires forall j :: pos <= j < right ==> val <= Array[j]\n  ensures InsertionSorted(Array, left, right)\n  modifies Array\n{\n  var oldArray := Array;\n  Array[pos] := val;\n  forall k, l | left <= k < l < right\n    ensures Array[k] <= Array[l]\n  {\n    if k < pos && pos < l {\n      assert oldArray[k] <= oldArray[l];\n    } else if k < pos && l == pos {\n      assert oldArray[k] <= val;\n    } else if k == pos && pos < l {\n      assert val <= oldArray[l];\n    } else {\n      assert oldArray[k] <= oldArray[l];\n    }\n  }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod sorting(Array: array<int>)\n  requires Array.Length > 1 \n  ensures InsertionSorted(Array, 0, Array.Length) \n  modifies Array\n// </vc-spec>\n// <vc-code>\n{\n  var n := Array.Length;\n  var i := 1;\n  while i < n\n    invariant 1 <= i <= n\n    invariant InsertionSorted(Array, 0, i)\n    invariant Array.Length == n\n  {\n    var key := Array[i];\n    var j := i - 1;\n    while j >= 0 && Array[j] > key\n      invariant -1 <= j < i\n      invariant InsertionSorted(Array, 0, i)\n      invariant forall k :: 0 <= k <= j ==> Array[k] <= key\n      invariant forall k :: j < k < i ==> key <= Array[k]\n    {\n      Array[j + 1] := Array[j];\n      j := j - 1;\n    }\n    Lemma_InsertAtPositionMaintainsSortedness(Array, 0, i, j + 1, key);\n    i := i + 1;\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_426_FilterOddNumbers.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_426_FilterOddNumbers.dfy", "// <vc-preamble>\npredicate IsOdd(n: int)\n{\n    n % 2 != 0\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod FilterOddNumbers(arr: array<int>) returns (oddList: seq<int>)\n\n    ensures forall i :: 0 <= i < |oddList| ==> IsOdd(oddList[i]) && oddList[i] in arr[..]\n\n    ensures forall i :: 0 <= i < arr.Length && IsOdd(arr[i]) ==> arr[i] in oddList\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_170_SumInRange.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_170_SumInRange.dfy", "// <vc-preamble>\nfunction sumTo( a:array<int>, start:int, end:int ) : int\n    requires a != null;\n    requires 0 <= start && start <= end && end <= a.Length;\n    decreases end;\n    reads a;\n    {\n        if (start == end) then 0 else sumTo(a, start, end-1) + a[end-1]\n    }\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SumInRange(a: array<int>, start: int, end: int) returns (sum: int)\n    requires a != null\n    requires 0 <= start && start <= end && end <= a.Length\n    ensures sum == sumTo(a, start, end)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_452_CalculateLoss.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_452_CalculateLoss.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod CalculateLoss(costPrice: int, sellingPrice: int) returns (loss: int)\n    requires costPrice >= 0 && sellingPrice >= 0\n    ensures (costPrice > sellingPrice ==> loss == costPrice - sellingPrice) && (costPrice <= sellingPrice ==> loss == 0)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_linear_search1_LinearSearch.dfy", "root", true, "", "", false, "Clover_linear_search1_LinearSearch.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod LinearSearch(a: array<int>, e: int) returns (n:int)\n  ensures 0<=n<=a.Length\n  ensures n==a.Length || a[n]==e\n  ensures forall i::0<=i < n ==> e!=a[i]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod LinearSearch(a: array<int>, e: int) returns (n:int)\n  ensures 0<=n<=a.Length\n  ensures n==a.Length || a[n]==e\n  ensures forall i::0<=i < n ==> e!=a[i]\n// </vc-spec>\n// <vc-code>\n{\n  var i := 0;\n  while i < a.Length\n    invariant 0 <= i <= a.Length\n    invariant forall j :: 0 <= j < i ==> a[j] != e\n  {\n    if a[i] == e {\n      return i;\n    }\n    i := i + 1;\n  }\n  return i;\n}\n// </vc-code>\n\n", "", "", ""], ["Software-Verification_tmp_tmpv4ueky2d_Non-overlapping_Intervals_non_overlapping_intervals_bubble_sort.dfy", "root", false, "", "", false, "Software-Verification_tmp_tmpv4ueky2d_Non-overlapping_Intervals_non_overlapping_intervals_bubble_sort.dfy", "// <vc-preamble>\npredicate sorted(a: array2<int>, l: int, u: int)\n    reads a\n    requires a.Length1 == 2\n{\n    forall i, j :: 0 <= l <= i <= j <= u < a.Length0 ==> a[i, 1] <= a[j, 1]\n}\n\npredicate partitioned(a: array2<int>, i: int)\n    reads a\n    requires a.Length1 == 2\n{\n    forall k, k' :: 0 <= k <= i < k' < a.Length0 ==> a[k, 1] <= a[k', 1]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod bubble_sort(a: array2<int>)\n    modifies a\n    requires a.Length1 == 2\n    ensures sorted(a, 0, a.Length0 - 1)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_triple_Triple.dfy", "root", true, "", "", false, "Clover_triple_Triple.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Triple (x:int) returns (r:int)\n  ensures r==3*x\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod Triple (x:int) returns (r:int)\n  ensures r==3*x\n// </vc-spec>\n// <vc-code>\n{\n  return 3*x;\n}\n// </vc-code>\n\n", "", "", ""], ["dafny_misc_tmp_tmpg4vzlnm1_rosetta_code_fibonacci_sequence_FibonacciIterative.dfy", "root", false, "", "", false, "dafny_misc_tmp_tmpg4vzlnm1_rosetta_code_fibonacci_sequence_FibonacciIterative.dfy", "// <vc-preamble>\nfunction Fibonacci(n: nat): nat {\n  match n {\n    case 0 => 0\n    case 1 => 1\n    case _ => Fibonacci(n - 1) + Fibonacci(n - 2)\n  }\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod FibonacciIterative(n: nat) returns (f: nat)\n  ensures f == Fibonacci(n)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_advanced_examples_InsertionSort_InsertionSort.dfy", "root", false, "", "", false, "Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_advanced_examples_InsertionSort_InsertionSort.dfy", "// <vc-preamble>\npredicate sorted (a:array<int>, start:int, end:int)\n requires a!=null       \n requires 0<=start<=end<=a.Length       \n reads a       \n {           \n   forall j,k:: start<=j<k<end ==> a[j]<=a[k]\n }\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod InsertionSort (a:array<int>)\nrequires a!=null && a.Length>1 \nensures sorted(a, 0, a.Length) \nmodifies a\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["cmsc433_tmp_tmpe3ob3a0o_dafny_project1_p1-assignment-2_ArraySum.dfy", "root", false, "", "", false, "cmsc433_tmp_tmpe3ob3a0o_dafny_project1_p1-assignment-2_ArraySum.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ArraySum (a : array<int>, b : array<int>) returns (c : array<int>)\n    requires a.Length == b.Length\n    ensures c.Length == a.Length && \n        forall i : int :: 0 <= i < c.Length ==> c[i] == a[i] + b[i]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["llm-verified-eval_tmp_tmpd2deqn_i_dafny_161_solve.dfy", "root", false, "", "", false, "llm-verified-eval_tmp_tmpd2deqn_i_dafny_161_solve.dfy", "// <vc-preamble>\nfunction IsLetter(c: char): bool \n{\n  (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') \n}\n\nfunction NoLetters(s: string, n: nat): bool \n  requires n <= |s|\n{\n  forall c :: 0 <= c < n ==> !IsLetter(s[c])\n}\n\nfunction ToggleCase(c: char): char\n{\n  if c >= 'a' && c <= 'z' \n  then \n    (c - 'a' + 'A')\n  else if c >= 'A' && c <= 'Z' \n    then \n      (c - 'A' + 'a')\n    else \n      c\n}\nfunction isReverse(s: string, s_prime: string): bool{\n  (|s| == |s_prime|) &&\n  (forall si :: 0 <= si < |s|/2 ==> s_prime[|s| - si - 1] == s[si])\n}\n\nmethod Reverse(original: seq<char>) returns (reversed: seq<char>)\n  ensures |reversed| == |original| \n  ensures forall i :: 0 <= i < |original| ==> reversed[i] == original[|original| - 1 - i]\n{\n  assume{:axiom} false;\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod solve(s: string) returns (result: string)\n  ensures |result| == |s| \n  ensures !NoLetters(s, |s|) ==> forall i :: 0 <= i < |s| && IsLetter(s[i]) ==> result[i] == ToggleCase(s[i])\n  ensures !NoLetters(s, |s|) ==> forall i :: 0 <= i < |s| && !IsLetter(s[i]) ==> result[i] == s[i] \n  ensures NoLetters(s, |s|) ==> isReverse(result, s)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_234_CubeVolume.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_234_CubeVolume.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod CubeVolume(size: int) returns (volume: int)\n    requires size > 0\n    ensures volume == size * size * size\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-exercise_tmp_tmpouftptir_prac4_ex2_GetTriple.dfy", "root", false, "", "", false, "dafny-exercise_tmp_tmpouftptir_prac4_ex2_GetTriple.dfy", "// <vc-preamble>\npredicate triple(a: array<int>) \nreads a\n{\n    exists i :: 0 <= i < a.Length - 2 && a[i] == a[i + 1] == a[i + 2]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod GetTriple(a: array<int>) returns (index: int)\nensures 0 <= index < a.Length - 2 || index == a.Length\nensures index == a.Length <==> !triple(a)\nensures 0 <= index < a.Length - 2 <==> triple(a)\nensures 0 <= index < a.Length - 2 ==> a[index] == a[index + 1] == a[index + 2]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["se2011_tmp_tmp71eb82zt_ass2_ex2_SecondLargest.dfy", "root", false, "", "", false, "se2011_tmp_tmp71eb82zt_ass2_ex2_SecondLargest.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SecondLargest(a:array<int>) returns (seclar:int)\nrequires a.Length > 0\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_555_DifferenceSumCubesAndSumNumbers.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_555_DifferenceSumCubesAndSumNumbers.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod DifferenceSumCubesAndSumNumbers(n: int) returns (diff: int)\n    requires n >= 0\n    ensures diff == (n * n * (n + 1) * (n + 1)) / 4 - (n * (n + 1)) / 2\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["assertive-programming-assignment-1_tmp_tmp3h_cj44u_FindRange_FindRange.dfy", "root", false, "", "", false, "assertive-programming-assignment-1_tmp_tmp3h_cj44u_FindRange_FindRange.dfy", "// <vc-preamble>\npredicate Sorted(q: seq<int>)\n{\n    forall i,j :: 0 <= i <= j < |q| ==> q[i] <= q[j] \n}\n\npredicate RangeSatisfiesComparer(q: seq<int>, key: int, lowerBound: nat, upperBound: nat, comparer: (int, int) -> bool)\n    requires 0 <= lowerBound <= upperBound <= |q|\n{\n    forall i :: lowerBound <= i < upperBound ==> comparer(q[i], key)\n}\n\npredicate RangeSatisfiesComparerNegation(q: seq<int>, key: int, lowerBound: nat, upperBound: nat, comparer: (int, int) -> bool)\n    requires 0 <= lowerBound <= upperBound <= |q|\n{\n    RangeSatisfiesComparer(q, key, lowerBound, upperBound, (n1, n2) => !comparer(n1, n2))\n}\n\nmethod BinarySearch(q: seq<int>, key: int, lowerBound: nat, upperBound: nat, comparer: (int, int) -> bool) returns (index: nat)\n    requires Sorted(q)\n    requires 0 <= lowerBound <= upperBound <= |q|\n    requires RangeSatisfiesComparerNegation(q, key, 0, lowerBound, comparer)\n    requires RangeSatisfiesComparer(q, key, upperBound, |q|, comparer)\n\n    requires\n        (forall n1, n2 :: comparer(n1, n2) == (n1 >  n2)) ||\n        (forall n1, n2 :: comparer(n1, n2) == (n1 >= n2))\n\n    ensures lowerBound <= index <= upperBound\n    ensures RangeSatisfiesComparerNegation(q, key, 0, index, comparer)\n    ensures RangeSatisfiesComparer(q, key, index, |q|, comparer)\n{\n  assume{:axiom} false;\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod FindRange(q: seq<int>, key: int) returns (left: nat, right: nat)\n    requires Sorted(q)\n    ensures left <= right <= |q|\n    ensures forall i :: 0 <= i < left ==> q[i] < key\n    ensures forall i :: left <= i < right ==> q[i] == key\n    ensures forall i :: right <= i < |q| ==> q[i] > key\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_626_AreaOfLargestTriangleInSemicircle.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_626_AreaOfLargestTriangleInSemicircle.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod AreaOfLargestTriangleInSemicircle(radius: int) returns (area: int)\n    requires radius > 0\n    ensures area == radius * radius\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Formal-Verification_tmp_tmpuyt21wjt_Dafny_strings3_maxCommonSubstringLength.dfy", "root", false, "", "", false, "Formal-Verification_tmp_tmpuyt21wjt_Dafny_strings3_maxCommonSubstringLength.dfy", "// <vc-preamble>\npredicate isSubstring(sub: seq<char>, str: seq<char>)\n{\n    exists i :: 0 <= i <= |str| - |sub| && str[i..i+|sub|] == sub\n}\n\npredicate isPrefixPred(pre:string, str:string)\n{\n    (|pre| <= |str|) && \n    pre == str[..|pre|]\n}\n\npredicate isNotPrefixPred(pre:string, str:string)\n{\n    (|pre| > |str|) || \n    pre != str[..|pre|]\n}\n\npredicate isSubstringPred(sub:string, str:string)\n{\n    (exists i :: 0 <= i <= |str| &&  isPrefixPred(sub, str[i..]))\n}\n\npredicate isNotSubstringPred(sub:string, str:string)\n{\n    (forall i :: 0 <= i <= |str| ==> isNotPrefixPred(sub,str[i..]))\n}\n\npredicate haveCommonKSubstringPred(k:nat, str1:string, str2:string)\n{\n    exists i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k && isSubstringPred(str1[i1..j1],str2)\n}\n\npredicate haveNotCommonKSubstringPred(k:nat, str1:string, str2:string)\n{\n    forall i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k ==>  isNotSubstringPred(str1[i1..j1],str2)\n}\n\nmethod haveCommonKSubstring(k: nat, str1: string, str2: string) returns (found: bool)\n    ensures found  <==>  haveCommonKSubstringPred(k,str1,str2)\n\n{\n  assume{:axiom} false;\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod maxCommonSubstringLength(str1: string, str2: string) returns (len:nat)\n    requires (|str1| <= |str2|)\n    ensures (forall k :: len < k <= |str1| ==> !haveCommonKSubstringPred(k,str1,str2))\n    ensures haveCommonKSubstringPred(len,str1,str2)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Programmverifikation-und-synthese_tmp_tmppurk6ime_PVS_Assignment_ex_10_Hoangkim_ex10_hoangkim_strange.dfy", "root", false, "", "", false, "Programmverifikation-und-synthese_tmp_tmppurk6ime_PVS_Assignment_ex_10_Hoangkim_ex10_hoangkim_strange.dfy", "// <vc-preamble>\nmethod q(x:nat, y:nat) returns (z:nat)\nrequires y - x > 2\nensures x < z*z < y\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod strange()\nensures 1==2\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_457_MinLengthSublist.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_457_MinLengthSublist.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod MinLengthSublist(s: seq<seq<int>>) returns (minSublist: seq<int>)\n    requires |s| > 0\n    ensures minSublist in s\n    ensures forall sublist :: sublist in s ==> |minSublist| <= |sublist|\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafl_tmp_tmp_r3_8w3y_dafny_examples_uiowa_binary-search_binSearch.dfy", "root", false, "", "", false, "dafl_tmp_tmp_r3_8w3y_dafny_examples_uiowa_binary-search_binSearch.dfy", "// <vc-preamble>\npredicate isSorted(a:array<int>)\n  reads a\n{\n  forall i:nat, j:nat :: i <= j < a.Length ==> a[i] <= a[j]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod binSearch(a:array<int>, K:int) returns (b:bool)\n  requires isSorted(a)\n  ensures b == exists i:nat :: i < a.Length && a[i] == K\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-exercise_tmp_tmpouftptir_absIt_AbsIt.dfy", "root", false, "", "", false, "dafny-exercise_tmp_tmpouftptir_absIt_AbsIt.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod AbsIt(s: array<int>) \nmodifies s\nensures forall i :: 0 <= i < s.Length ==> if old(s[i]) < 0 then s[i] == -old(s[i]) else s[i] == old(s[i])\nensures s.Length == old(s).Length\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny-Exercises_tmp_tmpjm75muf__Session5Exercises_ExerciseSumElems_sumElems.dfy", "root", true, "", "", false, "Dafny-Exercises_tmp_tmpjm75muf__Session5Exercises_ExerciseSumElems_sumElems.dfy", "// <vc-preamble>\nfunction SumR(s:seq<int>):int\ndecreases s\n{\n    if (s==[]) then 0\n    else SumR(s[..|s|-1])+s[|s|-1]\n}\n\nfunction SumL(s:seq<int>):int\ndecreases s\n{\n    if (s==[]) then 0\n    else s[0]+SumL(s[1..])\n}\n\nfunction SumV(v:array<int>,c:int,f:int):int\n  requires 0<=c<=f<=v.Length\n  reads v\n  {\n    SumR(v[c..f])\n  }\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod sumElems(v:array<int>) returns (sum:int)\nensures sum==SumR(v[..])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "function SumR(s:seq<int>):int\ndecreases s\n{\n    if (s==[]) then 0\n    else SumR(s[..|s|-1])+s[|s|-1]\n}\n\nfunction SumL(s:seq<int>):int\ndecreases s\n{\n    if (s==[]) then 0\n    else s[0]+SumL(s[1..])\n}\n\n\nfunction SumV(v:array<int>,c:int,f:int):int\n  requires 0<=c<=f<=v.Length\n  reads v\n  {\n    SumR(v[c..f])\n  }\n\n// <vc-helpers>\nlemma SumR_EQ_SumL(s:seq<int>)\n  ensures SumR(s)==SumL(s)\n{\n  if s == [] {\n  } else {\n    calc {\n      SumR(s);\n      ==  // definition of SumR\n      SumR(s[..|s|-1]) + s[|s|-1];\n      ==  { SumR_EQ_SumL(s[..|s|-1]); }\n      SumL(s[..|s|-1]) + s[|s|-1];\n      ==  { SumLAppend(s[..|s|-1], s[|s|-1]); }\n      SumL(s);\n    }\n  }\n}\n\nlemma SumV_EQ_SumR(v:array<int>, c:int, f:int)\n  requires 0<=c<=f<=v.Length\n  ensures SumV(v,c,f)==SumR(v[c..f])\n{\n  // Directly follows from definition of SumV\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod sumElems(v:array<int>) returns (sum:int)\n//ensures sum==SumL(v[0..v.Length])\nensures sum==SumR(v[..])\n//ensures sum==SumV(v,0,v.Length)\n// </vc-spec>\n// <vc-code>\n{\n  if (v == null) {\n    sum := 0;\n  } else {\n    sum := SumR(v[..]);\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_461_CountUppercase.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_461_CountUppercase.dfy", "// <vc-preamble>\npredicate IsUpperCase(c: char)\n{\n    65 <= c as int <= 90\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod CountUppercase(s: string) returns (count: int)\n    ensures count >= 0\n    ensures count == | set i: int | 0 <= i < |s| && IsUpperCase(s[i])|\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_longest_prefix_LongestCommonPrefix.dfy", "root", true, "", "", false, "Clover_longest_prefix_LongestCommonPrefix.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod LongestCommonPrefix(str1: seq<char>, str2: seq<char>) returns (prefix: seq<char>)\n  ensures |prefix| <= |str1| && prefix == str1[0..|prefix|]&& |prefix| <= |str2| && prefix == str2[0..|prefix|]\n  ensures |prefix|==|str1| || |prefix|==|str2| || (str1[|prefix|]!=str2[|prefix|])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod LongestCommonPrefix(str1: seq<char>, str2: seq<char>) returns (prefix: seq<char>)\n  ensures |prefix| <= |str1| && prefix == str1[0..|prefix|]&& |prefix| <= |str2| && prefix == str2[0..|prefix|]\n  ensures |prefix|==|str1| || |prefix|==|str2| || (str1[|prefix|]!=str2[|prefix|])\n// </vc-spec>\n// <vc-code>\n{\n  var i := 0;\n  while i < |str1| && i < |str2| && str1[i] == str2[i]\n    invariant 0 <= i <= |str1| && 0 <= i <= |str2|\n    invariant str1[0..i] == str2[0..i]\n  {\n    i := i + 1;\n  }\n  return str1[0..i];\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_431_HasCommonElement.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_431_HasCommonElement.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod HasCommonElement(a: array<int>, b: array<int>) returns (result: bool)\n    requires a != null && b != null\n    ensures result ==> exists i, j :: 0 <= i < a.Length && 0 <= j < b.Length && a[i] == b[j]\n    ensures !result ==> forall i, j :: 0 <= i < a.Length && 0 <= j < b.Length ==> a[i] != b[j]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny_Learning_Experience_tmp_tmpuxvcet_u_week1_7_A2_Q1_trimmed_copy_-_\u526f\u672c_ComputeCount.dfy", "root", false, "", "", false, "Dafny_Learning_Experience_tmp_tmpuxvcet_u_week1_7_A2_Q1_trimmed_copy_-_\u526f\u672c_ComputeCount.dfy", "// <vc-preamble>\nghost function Count(hi: nat, s:seq<int>): int\n    requires 0 <= hi <= |s|\n    decreases hi\n{\n    if hi == 0 then 0\n    else if s[hi-1]%2 == 0 then 1 + Count(hi-1, s) else Count(hi-1, s)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ComputeCount(CountIndex:nat, a:seq<int>,b:array<int>) returns (p:nat)\n    requires  CountIndex == 0 || (|a| == b.Length && 1 <= CountIndex <= |a|)\n    decreases CountIndex\n    modifies b\n    ensures p == Count(CountIndex,a)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_588_DifferenceMinMax.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_588_DifferenceMinMax.dfy", "// <vc-preamble>\nfunction Min(a: seq<int>) : int\n    requires |a| > 0\n{\n    if |a| == 1 then a[0]\n    else\n        var minPrefix := Min(a[..|a|-1]);\n        if a[|a|-1] <= minPrefix then a[|a|-1] else Min(a[..|a|-1])\n}\n\nfunction Max(a: seq<int>) : int\n    requires |a| > 0\n{\n    if |a| == 1 then a[0]\n    else\n        var maxPrefix := Max(a[..|a|-1]);\n        if a[|a|-1] >= maxPrefix then a[|a|-1] else Max(a[..|a|-1])\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod DifferenceMinMax(a: array<int>) returns (diff: int)\n    requires a.Length > 0\n    ensures diff == Max(a[..]) - Min(a[..])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Formal-Verification-Project_tmp_tmp9gmwsmyp_strings3_maxCommonSubstringLength.dfy", "root", true, "", "", false, "Formal-Verification-Project_tmp_tmp9gmwsmyp_strings3_maxCommonSubstringLength.dfy", "// <vc-preamble>\npredicate isSubstring(sub: seq<char>, str: seq<char>)\n{\n    exists i :: 0 <= i <= |str| - |sub| && str[i..i+|sub|] == sub\n}\n\npredicate isPrefixPred(pre:string, str:string)\n{\n    (|pre| <= |str|) && \n    pre == str[..|pre|]\n}\n\npredicate isNotPrefixPred(pre:string, str:string)\n{\n    (|pre| > |str|) || \n    pre != str[..|pre|]\n}\n\npredicate isSubstringPred(sub:string, str:string)\n{\n    (exists i :: 0 <= i <= |str| &&  isPrefixPred(sub, str[i..]))\n}\n\npredicate isNotSubstringPred(sub:string, str:string)\n{\n    (forall i :: 0 <= i <= |str| ==> isNotPrefixPred(sub,str[i..]))\n}\n\npredicate haveCommonKSubstringPred(k:nat, str1:string, str2:string)\n{\n    exists i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k && isSubstringPred(str1[i1..j1],str2)\n}\n\npredicate haveNotCommonKSubstringPred(k:nat, str1:string, str2:string)\n{\n    forall i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k ==>  isNotSubstringPred(str1[i1..j1],str2)\n}\n\nmethod haveCommonKSubstring(k: nat, str1: string, str2: string) returns (found: bool)\n    ensures found  <==>  haveCommonKSubstringPred(k,str1,str2)\n\n{\n\n    if (k > |str1| || k > |str2| ){\n        return false;\n    }\n\n    var i := 0;\n    var temp := false;\n\n    while i <= |str1|-k\n\n    invariant 0 <= i <= (|str1|-k) + 1\n\n    invariant temp ==> 0 <= i <= (|str1| - k) && isSubstringPred(str1[i..i+k], str2)\n\n    invariant !temp ==> (forall m,n :: (0 <= m < i && n == m+k) ==> isNotSubstringPred(str1[m..n], str2))\n\n    decreases |str1| - k - i\n    {\n        assume false;\n\n        temp := isSubstring(str1[i..(i + k)], str2);\n        if  temp == true \n        {\n            return true;\n        }\n        i := i + 1;\n    }\n    return false;\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod maxCommonSubstringLength(str1: string, str2: string) returns (len:nat)\n    requires (|str1| <= |str2|)\n    ensures (forall k :: len < k <= |str1| ==> !haveCommonKSubstringPred(k,str1,str2))\n    ensures haveCommonKSubstringPred(len,str1,str2)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "predicate isSubstring(sub: seq<char>, str: seq<char>)\n{\n    exists i :: 0 <= i <= |str| - |sub| && str[i..i+|sub|] == sub\n}\n\npredicate isPrefixPred(pre:string, str:string)\n{\n    (|pre| <= |str|) && \n    pre == str[..|pre|]\n}\n\npredicate isNotPrefixPred(pre:string, str:string)\n{\n    (|pre| > |str|) || \n    pre != str[..|pre|]\n}\n\npredicate isSubstringPred(sub:string, str:string)\n{\n    (exists i :: 0 <= i <= |str| &&  isPrefixPred(sub, str[i..]))\n}\n\npredicate isNotSubstringPred(sub:string, str:string)\n{\n    (forall i :: 0 <= i <= |str| ==> isNotPrefixPred(sub,str[i..]))\n}\n\n\n\npredicate haveCommonKSubstringPred(k:nat, str1:string, str2:string)\n{\n    exists i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k && isSubstringPred(str1[i1..j1],str2)\n}\n\npredicate haveNotCommonKSubstringPred(k:nat, str1:string, str2:string)\n{\n    forall i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k ==>  isNotSubstringPred(str1[i1..j1],str2)\n}\n\nmethod haveCommonKSubstring(k: nat, str1: string, str2: string) returns (found: bool)\n    ensures found  <==>  haveCommonKSubstringPred(k,str1,str2)\n    //ensures !found <==> haveNotCommonKSubstringPred(k,str1,str2) // This postcondition follows from the above lemma.\n{\n    // Check that both strings are larger than k \n    if (k > |str1| || k > |str2| ){\n        return false;\n    }\n    // Initialize variables\n    var i := 0;\n    var temp := false;\n\n    // Don't want to exceed the bounds of str1 when checking for the element that is k entries away\n    while i <= |str1|-k\n    // Invariant to stay within bounds\n    invariant 0 <= i <= (|str1|-k) + 1\n    // Invariant to show that when temp is true, it is a substring\n    invariant temp ==> 0 <= i <= (|str1| - k) && isSubstringPred(str1[i..i+k], str2)\n    // Invariant to show that when temp is false, it is not a substring\n    invariant !temp ==> (forall m,n :: (0 <= m < i && n == m+k) ==> isNotSubstringPred(str1[m..n], str2))\n    // Telling dafny that i is that value that is increasing\n    decreases |str1| - k - i\n    {\n        assume false;\n\n        // Get an index from the array position were are at to the array position that is k away and check the substring\n        temp := isSubstring(str1[i..(i + k)], str2);\n        if  temp == true \n        {\n            return true;\n        }\n        i := i + 1;\n    }\n    return false;\n}\n\n// <vc-helpers>\npredicate isSubstring(sub: seq<char>, str: seq<char>)\n{\n    exists i :: 0 <= i <= |str| - |sub| && str[i..i+|sub|] == sub\n}\n\npredicate isPrefixPred(pre:string, str:string)\n{\n    (|pre| <= |str|) && \n    pre == str[..|pre|]\n}\n\npredicate isNotPrefixPred(pre:string, str:string)\n{\n    (|pre| > |str|) || \n    pre != str[..|pre|]\n}\n\npredicate isSubstringPred(sub:string, str:string)\n{\n    (exists i :: 0 <= i <= |str| &&  isPrefixPred(sub, str[i..]))\n}\n\npredicate isNotSubstringPred(sub:string, str:string)\n{\n    (forall i :: 0 <= i <= |str| ==> isNotPrefixPred(sub,str[i..]))\n}\n\npredicate haveCommonKSubstringPred(k:nat, str1:string, str2:string)\n{\n    exists i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k && isSubstringPred(str1[i1..j1],str2)\n}\n\npredicate haveNotCommonKSubstringPred(k:nat, str1:string, str2:string)\n{\n    forall i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k ==>  isNotSubstringPred(str1[i1..j1],str2)\n}\n\nlemma lemma_substring_prefix(sub: seq<char>, str: seq<char>)\n    requires isSubstring(sub, str)\n    ensures exists i :: 0 <= i <= |str| - |sub| && isPrefixPred(sub, str[i..])\n{\n    var i :| 0 <= i <= |str| - |sub| && str[i..i+|sub|] == sub;\n    assert isPrefixPred(sub, str[i..]);\n}\n\nlemma lemma_prefix_substring(sub: seq<char>, str: seq<char>)\n    requires exists i :: 0 <= i <= |str| && isPrefixPred(sub, str[i..])\n    ensures isSubstring(sub, str)\n{\n    var i :| 0 <= i <= |str| && isPrefixPred(sub, str[i..]);\n    assert str[i..i+|sub|] == sub;\n    assert i <= |str| - |sub|;\n}\n\nlemma lemma_common_k_helper(k: nat, str1: string, str2: string)\n    ensures haveCommonKSubstringPred(k,str1,str2) <==> \n        (exists i1 :: 0 <= i1 <= |str1|-k && isSubstringPred(str1[i1..i1+k],str2))\n{\n    calc {\n        haveCommonKSubstringPred(k,str1,str2);\n    ==  // def\n        exists i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k && isSubstringPred(str1[i1..j1],str2);\n    ==  // rewrite j1\n        exists i1 :: 0 <= i1 <= |str1|- k && isSubstringPred(str1[i1..i1+k],str2);\n    }\n}\n\nmethod haveCommonKSubstring(k: nat, str1: string, str2: string) returns (found: bool)\n    ensures found  <==>  haveCommonKSubstringPred(k,str1,str2)\n{\n    if k > |str1| || k > |str2| {\n        return false;\n    }\n    \n    var i := 0;\n    while i <= |str1| - k\n        invariant 0 <= i <= |str1| - k + 1\n        invariant forall m :: 0 <= m < i ==> !isSubstringPred(str1[m..m+k], str2)\n    {\n        if isSubstring(str1[i..i+k], str2) {\n            lemma_prefix_substring(str1[i..i+k], str2);\n            return true;\n        }\n        i := i + 1;\n    }\n    return false;\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod maxCommonSubstringLength(str1: string, str2: string) returns (len:nat)\n    requires (|str1| <= |str2|)\n    ensures (forall k :: len < k <= |str1| ==> !haveCommonKSubstringPred(k,str1,str2))\n    ensures haveCommonKSubstringPred(len,str1,str2)\n// </vc-spec>\n// <vc-code>\n{\n    var low := 0;\n    var high := |str1| + 1;\n    \n    while high - low > 1\n        invariant 0 <= low < high <= |str1| + 1\n        invariant haveCommonKSubstringPred(low, str1, str2)\n        invariant forall k :: k >= high ==> !haveCommonKSubstringPred(k, str1, str2)\n    {\n        var mid := (low + high) / 2;\n        if haveCommonKSubstring(mid, str1, str2) {\n            low := mid;\n        } else {\n            high := mid;\n        }\n    }\n    return low;\n}\n// </vc-code>\n\n", "", "", ""], ["SENG2011_tmp_tmpgk5jq85q_ass2_ex2_String3Sort.dfy", "root", false, "", "", false, "SENG2011_tmp_tmpgk5jq85q_ass2_ex2_String3Sort.dfy", "// <vc-preamble>\npredicate Sorted(a: string, low:int, high:int)\nrequires 0 <= low <= high <= |a|\n{ \n    forall j, k :: low <= j < k < high ==> a[j] <= a[k] \n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod String3Sort(a: string) returns (b: string) \nrequires |a| == 3;\nensures Sorted(b, 0, |b|);\nensures |a| == |b|;\nensures multiset{b[0], b[1], b[2]} == multiset{a[0], a[1], a[2]};\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny_examples_tmp_tmp8qotd4ez_leetcode_0069-sqrt_mySqrt.dfy", "root", false, "", "", false, "dafny_examples_tmp_tmp8qotd4ez_leetcode_0069-sqrt_mySqrt.dfy", "// <vc-preamble>\npredicate sqrt(x: int, r: int) {\n    r*r <= x && (r+1)*(r+1) > x\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod mySqrt(x: int) returns (res: int)\nrequires 0 <= x;\nensures sqrt(x, res);\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_swap_arith_SwapArithmetic.dfy", "root", true, "", "", false, "Clover_swap_arith_SwapArithmetic.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SwapArithmetic(X: int, Y: int) returns(x: int, y: int)\n  ensures x==Y\n  ensures y==X\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod SwapArithmetic(X: int, Y: int) returns(x: int, y: int)\n  ensures x==Y\n  ensures y==X\n// </vc-spec>\n// <vc-code>\n{\n  x := X + Y;\n  y := x - Y;\n  x := x - y;\n}\n// </vc-code>\n\n", "", "", ""], ["VerifiedMergeSortDafny_tmp_tmpva7qms1b_MergeSort_mergeSimple.dfy", "root", false, "", "", false, "VerifiedMergeSortDafny_tmp_tmpva7qms1b_MergeSort_mergeSimple.dfy", "// <vc-preamble>\npredicate merged(a1: seq<int>, a2: seq<int>, b: array<int>, start: int, end: int)\n  reads b\n  requires end - start  == |a2| + |a1|\n  requires 0 <= start <= end <= b.Length\n{\n  multiset(a1) + multiset(a2) == multiset(b[start..end])\n}\n\npredicate sorted_slice(a: array<int>, start: int, end: int)\n  requires 0 <= start <= end <= a.Length\n  reads a\n{\n  forall i, j :: start <= i <= j < end ==> a[i] <= a[j]\n}\n\npredicate sorted_seq(a: seq<int>)\n{\n  forall i, j :: 0 <= i <= j < |a| ==> a[i] <= a[j]\n}\n\npredicate sorted(a: array<int>)\n  reads a\n{\n  forall i, j :: 0 <= i < j < a.Length ==> a[i] <= a[j]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod mergeSimple(a1: seq<int>, a2: seq<int>, start: int, end: int, b: array<int>)\n  modifies b\n  requires sorted_seq(a1)\n  requires sorted_seq(a2)\n  requires 0 <= start <= end <= b.Length\n  requires |a1| +  |a2| == end - start + 1\n  ensures sorted_slice(b, start, end)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["CS494-final-project_tmp_tmp7nof55uq_bubblesort_BubbleSort.dfy", "root", true, "", "", false, "CS494-final-project_tmp_tmp7nof55uq_bubblesort_BubbleSort.dfy", "// <vc-preamble>\npredicate sorted(a:array<int>, from:int, to:int)\n  requires a != null;\n  reads a; \n  requires 0 <= from <= to <= a.Length;\n{\n  forall x, y :: from <= x < y < to ==> a[x] <= a[y]\n}\n\npredicate pivot(a:array<int>, to:int, pvt:int)\n  requires a != null;\n  reads a;\n  requires 0 <= pvt < to <= a.Length;\n{\n  forall x, y :: 0 <= x < pvt < y < to ==> a[x] <= a[y]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod BubbleSort (a: array<int>)\n    requires a != null && a.Length > 0;\n    modifies a;\n    ensures sorted(a, 0, a.Length);\n    ensures multiset(a[..]) == multiset(old(a[..]));\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "//Bubblesort CS 494 submission\n//References: https://stackoverflow.com/questions/69364687/how-to-prove-time-complexity-of-bubble-sort-using-dafny/69365785#69365785\n\n\n// predicate checks if elements of a are in ascending order, two additional conditions are added to allow us to sort in specific range within array\n\npredicate sorted(a:array<int>, from:int, to:int)\n  requires a != null; // requires array to have n amount of elements\n  reads a; \n  requires 0 <= from <= to <= a.Length; // pre condition checks that from is the start of the range and to is the end of the range, requires values to be within 0 - a.Length\n{\n  forall x, y :: from <= x < y < to ==> a[x] <= a[y]\n}\n\n//helps ensure swapping is valid, it is used inside the nested while loop to make sure linear order is being kept \npredicate pivot(a:array<int>, to:int, pvt:int)\n  requires a != null; // requires array to have n amount of elements\n  reads a;\n  requires 0 <= pvt < to <= a.Length;\n{\n  forall x, y :: 0 <= x < pvt < y < to ==> a[x] <= a[y] // all values within the array should be in ascending order\n}\n\n// Here having the algorithm for the bubblesort\n\n// <vc-helpers>\npredicate sorted(a:array<int>, from:int, to:int)\n  requires a != null;\n  reads a; \n  requires 0 <= from <= to <= a.Length;\n{\n  forall x, y :: from <= x < y < to ==> a[x] <= a[y]\n}\n\npredicate pivot(a:array<int>, to:int, pvt:int)\n  requires a != null;\n  reads a;\n  requires 0 <= pvt < to <= a.Length;\n{\n  forall x, y :: 0 <= x < pvt < y < to ==> a[x] <= a[y]\n}\n\nlemma swap_preserves_multiset<T>(a: array<T>, i: int, j: int)\n  requires a != null && 0 <= i < a.Length && 0 <= j < a.Length\n  ensures multiset(a[i := a[j], j := a[i]]) == multiset(a)\n{\n  var temp := a[i];\n  a[i] := a[j];\n  a[j] := temp;\n  assert multiset(a) == multiset(old(a));\n  assert a[i] == old(a[j]);\n  assert a[j] == old(a[i]);\n  assert multiset(a) == multiset(old(a[..])[i := old(a[j]), j := old(a[i])]);\n  assert multiset(old(a[..])[i := old(a[j]), j := old(a[i])]) == multiset(old(a[..]));\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod BubbleSort (a: array<int>)\n    requires a != null && a.Length > 0; // makes sure a is not empty and length is greater than 0\n    modifies a; // as method runs, we are changing a\n    ensures sorted(a, 0, a.Length); // makes sure elements of array a are sorted from 0 - a.Length\n    ensures multiset(a[..]) == multiset(old(a[..])); // Since a is being modified, we deference the heap \n                                                      //and compare the previous elements to current elements.\n// </vc-spec>\n// <vc-code>\n{\n  var n := a.Length;\n  var i := 0;\n  while i < n\n    invariant 0 <= i <= n\n    invariant sorted(a, 0, i)\n    invariant multiset(a[..]) == multiset(old(a[..]))\n  {\n    var j := 0;\n    while j < n - i - 1\n      invariant 0 <= j <= n - i - 1\n      invariant sorted(a, n - i, n)\n      invariant multiset(a[..]) == multiset(old(a[..]))\n      invariant pivot(a, n - i, n - i - 1)\n    {\n      if a[j] > a[j + 1] {\n        a[j], a[j + 1] := a[j + 1], a[j];\n      }\n      j := j + 1;\n    }\n    i := i + 1;\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["Clover_two_sum_twoSum.dfy", "root", true, "", "", false, "Clover_two_sum_twoSum.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod twoSum(nums: array<int>, target: int) returns (i: int, j: int)\n  requires nums.Length > 1\n  requires exists i,j::0 <= i < j < nums.Length &&  nums[i] + nums[j] == target\n  ensures 0 <= i < j < nums.Length && nums[i] + nums[j] == target\n  ensures forall ii,jj:: (0 <= ii < i && ii < jj < nums.Length)  ==> nums[ii] + nums[jj] != target\n  ensures forall jj:: i < jj < j ==> nums[i] + nums[jj] != target\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\npredicate NoPairBefore(i: int, nums: array<int>, target: int)\n{\n  forall k, l :: 0 <= k && k < i && k < l && l < nums.Length ==> nums[k] + nums[l] != target\n}\n\npredicate NoPairWithI(i: int, j: int, nums: array<int>, target: int)\n{\n  forall l :: i+1 <= l && l < j ==>\n// </vc-helpers>\n\n// <vc-spec>\nmethod twoSum(nums: array<int>, target: int) returns (i: int, j: int)\n  requires nums.Length > 1\n  requires exists i,j::0 <= i < j < nums.Length &&  nums[i] + nums[j] == target\n  ensures 0 <= i < j < nums.Length && nums[i] + nums[j] == target\n  ensures forall ii,jj:: (0 <= ii < i && ii < jj < nums.Length)  ==> nums[ii] + nums[jj] != target\n  ensures forall jj:: i < jj < j ==> nums[i] + nums[jj] != target\n// </vc-spec>\n// <vc-code>\npredicate NoPairBefore(i: int, nums: array<int>, target: int)\n{\n  forall k, l :: 0 <= k && k < i && k < l && l < nums.Length ==> nums[k] + nums[l] != target\n}\n\npredicate NoPairWithI(i: int, j: int, nums: array<int>, target: int)\n{\n  forall l :: i+1 <= l && l < j ==>\n// </vc-code>\n\n", "", "", ""], ["Dafny_tmp_tmp0wu8wmfr_Heimaverkefni_8_H8_Partition.dfy", "root", false, "", "", false, "Dafny_tmp_tmp0wu8wmfr_Heimaverkefni_8_H8_Partition.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Partition( m: multiset<int> )\n        returns( pre: multiset<int>, p: int, post: multiset<int> )\n    requires |m| > 0;\n    ensures p in m;\n    ensures m == pre+multiset{p}+post;\n     ensures forall z | z in pre :: z <= p;\n     ensures forall z | z in post :: z >= p;\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["veri-sparse_tmp_tmp15fywna6_dafny_dspmspv_DSpMSpV.dfy", "root", false, "", "", false, "veri-sparse_tmp_tmp15fywna6_dafny_dspmspv_DSpMSpV.dfy", "// <vc-preamble>\nfunction sum(X_val : array<int>, X_crd : array<nat>,\n             v_val : array<int>, v_crd : array<nat>, kX : nat, kV : nat, pX_end : nat, pV_end : nat) : (s : int) \n  reads X_val, X_crd\n  requires X_val.Length == X_crd.Length\n  requires pX_end <= X_crd.Length\n  requires 0 <= kX <= X_crd.Length\n\n  reads v_crd, v_val\n  requires v_val.Length == v_crd.Length\n  requires pV_end <= v_crd.Length\n  requires 0 <= kV <= v_crd.Length\n\n  decreases pX_end + pV_end - (kX + kV)\n  {\n    if pV_end <= kV || pX_end <= kX then \n      0\n    else if X_crd[kX] == v_crd[kV] then \n      sum(X_val, X_crd, v_val, v_crd, kX + 1, kV + 1, pX_end, pV_end) + v_val[kV] * X_val[kX]\n    else if X_crd[kX] < v_crd[kV] then \n      sum(X_val, X_crd, v_val, v_crd, kX + 1, kV, pX_end, pV_end)\n    else sum(X_val, X_crd, v_val, v_crd, kX, kV + 1, pX_end, pV_end)\n  }\n\nfunction min(x : nat, y : nat) : nat {\n  if x <= y then x else y\n}\n\npredicate notin(y: nat, x : array<nat>) \n  reads x\n{\n  forall i :: 0 <= i < x.Length ==> y != x[i]\n}\n\npredicate notin_seq(y: nat, x : seq<nat>) \n{\n  forall i :: 0 <= i < |x| ==> y != x[i]\n}\n\nfunction index_seq(x : nat, y: seq<nat>) : (i : nat)\n  ensures i >= |y| ==> notin_seq(x, y)\n  ensures i <  |y| ==> y[i] == x\n{\n  if |y| == 0 then 0 \n  else \n    if y[0] == x then 0 \n    else 1 + index_seq(x, y[1..])\n}\n\nfunction index(x : nat, y: array<nat>) : (i : nat)\n  reads y\n  ensures i >= y.Length ==> notin(x, y)\n  ensures i <  y.Length ==> y[i] == x\n{\n  index_seq(x, y[.. ])\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod DSpMSpV(X_val : array<int>, X_crd : array<nat>, X_pos : array<nat>,\n                                  X_crd1 : array<nat>, X_len: nat,\n              v_val : array<int>, v_crd : array<nat>) returns (y : array<int>)\n\n  requires X_pos.Length >= 1\n  requires X_val.Length == X_crd.Length\n  requires forall i, j :: 0 <= i < j < X_pos.Length ==> X_pos[i] <= X_pos[j];\n  requires forall i :: 0 <= i < X_pos.Length ==> 0 <= X_pos[i] <= X_val.Length\n\n  requires X_len >= X_crd1.Length\n  requires forall i :: 0 <= i < X_crd1.Length ==> X_crd1[i] < X_len\n\n  requires X_crd1.Length < X_pos.Length\n  requires forall i, j :: 0 <= i < j < X_crd1.Length ==> X_crd1[i] < X_crd1[j]\n\n  requires v_val.Length == v_crd.Length\n\n  ensures y.Length == X_len\n  ensures forall i :: 0 <= i < y.Length ==> \n    y[i] == \n      if index(i, X_crd1) < X_crd1.Length then \n        sum(X_val, X_crd, v_val, v_crd, X_pos[index(i, X_crd1)], 0, X_pos[index(i, X_crd1)+1], v_val.Length)\n      else 0\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_284_AllElementsEqual.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_284_AllElementsEqual.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod AllElementsEqual(a: array<int>, n: int) returns (result: bool)\n    requires a != null\n    ensures result ==> forall i :: 0 <= i < a.Length ==> a[i] == n\n    ensures !result ==> exists i :: 0 <= i < a.Length && a[i] != n\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_2_SharedElements.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_2_SharedElements.dfy", "// <vc-preamble>\npredicate InArray(a: array<int>, x: int)\n    reads a\n{\n    exists i :: 0 <= i < a.Length && a[i] == x\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SharedElements(a: array<int>, b: array<int>) returns (result: seq<int>)\n\n    ensures forall x :: x in result ==> (InArray(a, x) && InArray(b, x))\n\n    ensures forall i, j :: 0 <= i < j < |result| ==> result[i] != result[j]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_verified_algorithms_lol_sort_lol_sort.dfy", "root", false, "", "", false, "Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_verified_algorithms_lol_sort_lol_sort.dfy", "// <vc-preamble>\npredicate valid_permut(a: seq<int>, b: seq<int>)\n  requires |a| == |b|\n{\n  multiset(a) == multiset(b)\n}\n\nmethod swap(a: array<int>, i: int, j: int)\n  requires 0 <= i < a.Length && 0 <= j < a.Length\n  modifies a\n  ensures a[..] == old(a[..]) [i := old(a[j])] [j := old(a[i])]\n  ensures valid_permut(a[..], old(a[..]))\n{\n  assume{:axiom} false;\n}\n\npredicate sorted(a: seq<int>)\n{\n  forall i, j | 0 <= i <= j < |a| :: a[i] <= a[j]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod lol_sort(a: array<int>)\n  modifies a\n  ensures valid_permut(a[..], old(a[..]))\n  ensures sorted(a[..])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_133_SumOfNegatives.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_133_SumOfNegatives.dfy", "// <vc-preamble>\nfunction sumNegativesTo( a:array<int>, n:int ) : int\n  requires a != null;\n  requires 0 <= n && n <= a.Length;\n  decreases n;\n  reads a;\n{\n  if (n == 0) then 0 else if a[n-1] < 0 then sumNegativesTo(a, n-1) + a[n-1] else sumNegativesTo(a, n-1)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SumOfNegatives(a: array<int>) returns (result: int)\n    ensures result == sumNegativesTo(a, a.Length)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_min_array_minArray.dfy", "root", true, "", "", false, "Clover_min_array_minArray.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod minArray(a: array<int>) returns (r:int)\n  requires a.Length > 0\n  ensures forall i :: 0 <= i < a.Length ==> r <= a[i]\n  ensures exists i :: 0 <= i < a.Length && r == a[i]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod minArray(a: array<int>) returns (r:int)\n  requires a.Length > 0\n  ensures forall i :: 0 <= i < a.Length ==> r <= a[i]\n  ensures exists i :: 0 <= i < a.Length && r == a[i]\n// </vc-spec>\n// <vc-code>\n{\n  var min := a[0];\n  var i := 1;\n  while i < a.Length\n    invariant 0 <= i <= a.Length\n    invariant forall j :: 0 <= j < i ==> min <= a[j]\n    invariant exists j :: 0 <= j < i && min == a[j]\n  {\n    if a[i] < min {\n      min := a[i];\n    }\n    i := i + 1;\n  }\n  return min;\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_743_RotateRight.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_743_RotateRight.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod RotateRight(l: seq<int>, n: int) returns (r: seq<int>)\n    requires n >= 0\n    ensures |r| == |l|\n    ensures forall i :: 0 <= i < |l| ==> r[i] == l[(i - n + |l|) % |l|]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_from_dafny_main_repo_dafny2_Classics_FIND.dfy", "root", false, "", "", false, "Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_from_dafny_main_repo_dafny2_Classics_FIND.dfy", "// <vc-preamble>\nghost function Factorial(n: nat): nat\n{\n  if n == 0 then 1 else n * Factorial(n-1)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod FIND(A: array<int>, N: int, f: int)\n  requires A.Length == N;\n  requires 0 <= f < N;\n  modifies A;\n  ensures forall p,q :: 0 <= p <= f <= q < N ==> A[p] <= A[q];\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["vfag_tmp_tmpc29dxm1j_Verificacion_torneo_torneo.dfy", "root", false, "", "", false, "vfag_tmp_tmpc29dxm1j_Verificacion_torneo_torneo.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod torneo(Valores : array?<real>, i : int, j : int, k : int) returns (pos_padre : int, pos_madre : int)\n    requires Valores != null && Valores.Length >= 20 && Valores.Length < 50 && i >= 0 && j >= 0 && k >= 0 \n    requires i < Valores.Length && j < Valores.Length && k < Valores.Length && i != j && j != k && k != i \n    ensures exists p, q, r | p in {i, j, k} && q in {i, j, k} && r in {i, j, k} && p != q && q != r && p != r :: Valores[p] >= Valores[q] >= Valores[r] && pos_padre == p && pos_madre == q\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["software_analysis_tmp_tmpmt6bo9sf_ss_find_min_index.dfy", "root", false, "", "", false, "software_analysis_tmp_tmpmt6bo9sf_ss_find_min_index.dfy", "// <vc-preamble>\npredicate is_sorted(ss: seq<int>)\n{\n    forall i, j: int:: 0 <= i <= j < |ss| ==> ss[i] <= ss[j]\n}\n\npredicate is_permutation(a:seq<int>, b:seq<int>)\ndecreases |a|\ndecreases |b|\n{\n    |a| == |b|  && \n    ((|a| == 0 && |b| == 0) ||  \n    exists i,j : int :: 0<=i<|a| &&  0<=j<|b|  && a[i] == b[j] && is_permutation(a[0..i] + if i < |a| then a[i+1..] else [], b[0..j] + if j < |b| then  b[j+1..] else []))\n}\n\npredicate is_permutation2(a:seq<int>, b:seq<int>)\n{\n    multiset(a) == multiset(b)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod find_min_index(a : array<int>, s: int, e: int) returns (min_i: int)\nrequires a.Length > 0\nrequires 0 <= s < a.Length\nrequires e <= a.Length\nrequires e > s\n\nensures min_i >= s \nensures min_i < e \nensures forall k: int :: s <= k < e ==> a[min_i] <= a[k]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafleet_tmp_tmpa2e4kb9v_0001-0050_0003-longest-substring-without-repeating-characters_lengthOfLongestSubstring.dfy", "root", false, "", "", false, "dafleet_tmp_tmpa2e4kb9v_0001-0050_0003-longest-substring-without-repeating-characters_lengthOfLongestSubstring.dfy", "// <vc-preamble>\ntype interval = iv: (int, int) | iv.0 <= iv.1 witness (0, 0)\n\nghost function length(iv: interval): int {\n  iv.1 - iv.0\n}\n\nghost predicate valid_interval(s: string, iv: interval) {\n  && (0 <= iv.0 <= iv.1 <= |s|)\n  && (forall i, j | iv.0 <= i < j < iv.1 :: s[i] != s[j])\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod lengthOfLongestSubstring(s: string) returns (n: int, ghost best_iv: interval)\n  ensures valid_interval(s, best_iv) && length(best_iv) == n\n  ensures forall iv | valid_interval(s, iv) :: length(iv) <= n\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny-Exercises_tmp_tmpjm75muf__Session6Exercises_ExerciseCountMin_mCountMin.dfy", "root", true, "", "", false, "Dafny-Exercises_tmp_tmpjm75muf__Session6Exercises_ExerciseCountMin_mCountMin.dfy", "// <vc-preamble>\nfunction min(v:array<int>,i:int):int\ndecreases i\n reads v\n requires 1<=i<=v.Length\n ensures forall k::0<=k<i==> v[k]>=min(v,i)\n {if (i==1) then v[0]\n  else if (v[i-1]<=min(v,i-1)) then v[i-1]\n  else min(v,i-1)\n  }\n\nfunction countMin(v:array<int>,x:int, i:int):int\ndecreases i\n reads v\n  requires 0<=i<=v.Length\n  ensures !(x in v[0..i]) ==> countMin(v,x,i)==0\n  {\n   if (i==0) then 0\n   else if (v[i-1]==x) then 1+countMin(v,x,i-1)\n   else countMin(v,x,i-1)\n\n  }\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod mCountMin(v:array<int>) returns (c:int)\nrequires v.Length>0\nensures c==countMin(v,min(v,v.Length),v.Length)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "function min(v:array<int>,i:int):int\ndecreases i\n reads v\n requires 1<=i<=v.Length\n ensures forall k::0<=k<i==> v[k]>=min(v,i)\n {if (i==1) then v[0]\n  else if (v[i-1]<=min(v,i-1)) then v[i-1]\n  else min(v,i-1)\n  }\n\n\nfunction countMin(v:array<int>,x:int, i:int):int\ndecreases i\n reads v\n  requires 0<=i<=v.Length\n  ensures !(x in v[0..i]) ==> countMin(v,x,i)==0\n  {\n   if (i==0) then 0\n   else if (v[i-1]==x) then 1+countMin(v,x,i-1)\n   else countMin(v,x,i-1)\n\n  }\n\n// <vc-helpers>\nfunction minSeq(v: seq<int>, i: int): int\n  decreases i\n  requires 1 <= i <= |v|\n  ensures forall k :: 0 <= k < i ==> v[k] >= minSeq(v, i)\n{\n  if i == 1 then v[0]\n  else if v[i-1] <= minSeq(v, i-1) then v[i-1]\n  else minSeq(v, i-1)\n}\n\nfunction countMinSeq(v: seq<int>, x: int, i: int): int\n  decreases i\n  requires 0 <= i <= |v|\n  ensures !(x in v[0..i]) ==> countMinSeq(v, x, i) == 0\n{\n  if i == 0 then 0\n  else if v[i-1] == x then 1 + countMinSeq(v, x, i-1)\n  else countMinSeq(v, x, i-1)\n}\n\nlemma min_array_eq_seq(v: array<int>, i: int)\n  requires 1 <= i <= v.Length\n  ensures min(v, i) == minSeq(v[..], i)\n{\n  if i == 1 {\n  } else {\n    calc == {\n      min(v, i);\n      { reveal minSeq(); }\n      if v[i-1] <= min(v, i-1) then v[i-1] else min(v, i-1);\n      == { min_array_eq_seq(v, i-1); }\n      if v[i-1] <= minSeq(v[..], i-1) then v[i-1] else minSeq(v[..], i-1);\n      { reveal minSeq(); }\n      minSeq(v[..], i);\n    }\n  }\n}\n\nlemma countMin_array_eq_seq(v: array<int>, x: int, i: int)\n  requires 0 <= i <= v.Length\n  ensures countMin(v, x, i) == countMinSeq(v[..], x, i)\n{\n  if i == 0 {\n  } else {\n    calc == {\n      countMin(v, x, i);\n      { reveal countMinSeq(); }\n      if v[i-1] == x then 1 + countMin(v, x, i-1) else countMin(v, x, i-1);\n      == { countMin_array_eq_seq(v, x, i-1); }\n      if v[i-1] == x then 1 + countMinSeq(v[..], x, i-1) else countMinSeq(v[..], x, i-1);\n      { reveal countMinSeq(); }\n// </vc-helpers>\n\n// <vc-spec>\nmethod mCountMin(v:array<int>) returns (c:int)\nrequires v.Length>0\nensures c==countMin(v,min(v,v.Length),v.Length)\n//Implement and verify an O(v.Length) algorithm\n// </vc-spec>\n// <vc-code>\nfunction minSeq(v: seq<int>, i: int): int\n  decreases i\n  requires 1 <= i <= |v|\n  ensures forall k :: 0 <= k < i ==> v[k] >= minSeq(v, i)\n{\n  if i == 1 then v[0]\n  else if v[i-1] <= minSeq(v, i-1) then v[i-1]\n  else minSeq(v, i-1)\n}\n\nfunction countMinSeq(v: seq<int>, x: int, i: int): int\n  decreases i\n  requires 0 <= i <= |v|\n  ensures !(x in v[0..i]) ==> countMinSeq(v, x, i) == 0\n{\n  if i == 0 then 0\n  else if v[i-1] == x then 1 + countMinSeq(v, x, i-1)\n  else countMinSeq(v, x, i-1)\n}\n\nlemma min_array_eq_seq(v: array<int>, i: int)\n  requires 1 <= i <= v.Length\n  ensures min(v, i) == minSeq(v[..], i)\n{\n  if i == 1 {\n  } else {\n    calc == {\n      min(v, i);\n      { reveal minSeq(); }\n      if v[i-1] <= min(v, i-1) then v[i-1] else min(v, i-1);\n      == { min_array_eq_seq(v, i-1); }\n      if v[i-1] <= minSeq(v[..], i-1) then v[i-1] else minSeq(v[..], i-1);\n      { reveal minSeq(); }\n      minSeq(v[..], i);\n    }\n  }\n}\n\nlemma countMin_array_eq_seq(v: array<int>, x: int, i: int)\n  requires 0 <= i <= v.Length\n  ensures countMin(v, x, i) == countMinSeq(v[..], x, i)\n{\n  if i == 0 {\n  } else {\n    calc == {\n      countMin(v, x, i);\n      { reveal countMinSeq(); }\n      if v[i-1] == x then 1 + countMin(v, x, i-1) else countMin(v, x, i-1);\n      == { countMin_array_eq_seq(v, x, i-1); }\n      if v[i-1] == x then 1 + countMinSeq(v[..], x, i-1) else countMinSeq(v[..], x, i-1);\n      { reveal countMinSeq(); }\n// </vc-code>\n\n", "", "", ""], ["Formal-Verification-Project_tmp_tmp9gmwsmyp_strings3_haveCommonKSubstring.dfy", "root", true, "", "", false, "Formal-Verification-Project_tmp_tmp9gmwsmyp_strings3_haveCommonKSubstring.dfy", "// <vc-preamble>\nmethod isPrefix(pre: string, str: string) returns (res:bool)\n    ensures !res <==> isNotPrefixPred(pre,str)\n    ensures  res <==> isPrefixPred(pre,str)\n{\n  assume{:axiom} false;\n}\n\npredicate isPrefixPred(pre:string, str:string)\n{\n    (|pre| <= |str|) && \n    pre == str[..|pre|]\n}\n\npredicate isNotPrefixPred(pre:string, str:string)\n{\n    (|pre| > |str|) || \n    pre != str[..|pre|]\n}\n\npredicate isSubstringPred(sub:string, str:string)\n{\n    (exists i :: 0 <= i <= |str| &&  isPrefixPred(sub, str[i..]))\n}\n\npredicate isNotSubstringPred(sub:string, str:string)\n{\n    (forall i :: 0 <= i <= |str| ==> isNotPrefixPred(sub,str[i..]))\n}\n\nmethod isSubstring(sub: string, str: string) returns (res:bool)\n    ensures  res <==> isSubstringPred(sub, str)\n\n{\n  assume{:axiom} false;\n}\n\npredicate haveCommonKSubstringPred(k:nat, str1:string, str2:string)\n{\n    exists i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k && isSubstringPred(str1[i1..j1],str2)\n}\n\npredicate haveNotCommonKSubstringPred(k:nat, str1:string, str2:string)\n{\n    forall i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k ==>  isNotSubstringPred(str1[i1..j1],str2)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod haveCommonKSubstring(k: nat, str1: string, str2: string) returns (found: bool)\n    ensures found  <==>  haveCommonKSubstringPred(k,str1,str2)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "method isPrefix(pre: string, str: string) returns (res:bool)\n    ensures !res <==> isNotPrefixPred(pre,str)\n    ensures  res <==> isPrefixPred(pre,str)\n{\n  assume{:axiom} false;\n}\n\n\n\npredicate isPrefixPred(pre:string, str:string)\n{\n    (|pre| <= |str|) && \n    pre == str[..|pre|]\n}\n\npredicate isNotPrefixPred(pre:string, str:string)\n{\n    (|pre| > |str|) || \n    pre != str[..|pre|]\n}\n\npredicate isSubstringPred(sub:string, str:string)\n{\n    (exists i :: 0 <= i <= |str| &&  isPrefixPred(sub, str[i..]))\n}\n\npredicate isNotSubstringPred(sub:string, str:string)\n{\n    (forall i :: 0 <= i <= |str| ==> isNotPrefixPred(sub,str[i..]))\n}\n\nmethod isSubstring(sub: string, str: string) returns (res:bool)\n    ensures  res <==> isSubstringPred(sub, str)\n    //ensures !res <==> isNotSubstringPred(sub, str) // This postcondition follows from the above lemma.\n{\n  assume{:axiom} false;\n}\n\n\npredicate haveCommonKSubstringPred(k:nat, str1:string, str2:string)\n{\n    exists i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k && isSubstringPred(str1[i1..j1],str2)\n}\n\npredicate haveNotCommonKSubstringPred(k:nat, str1:string, str2:string)\n{\n    forall i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k ==>  isNotSubstringPred(str1[i1..j1],str2)\n}\n\n// <vc-helpers>\nmethod IsPrefix(pre: string, str: string) returns (b: bool)\n    ensures b == isPrefixPred(pre, str)\n{\n    if |pre| > |str| {\n        return false;\n    }\n    var i := 0;\n    while i < |pre|\n        invariant 0 <= i <= |pre|\n        invariant pre[..i] == str[..i]\n    {\n        if pre[i] != str[i] {\n            return false;\n        }\n        i := i + 1;\n    }\n    return true;\n}\n\nmethod IsSubstring(sub: string, str: string) returns (b: bool)\n    ensures b == isSubstringPred(sub, str)\n{\n    if |sub| == 0 {\n        return true;\n    }\n    if |sub| > |str| {\n        return false;\n    }\n    var i := 0;\n    while i <= |str| - |sub|\n        invariant 0 <= i <= |str| - |sub| + 1\n        invariant forall j {:trigger isPrefixPred(sub, str[j..])} :: 0 <= j < i ==> !isPrefixPred(sub, str[j..])\n    {\n        var prefixFound := IsPrefix(sub, str[i..]);\n        if prefixFound {\n            return true;\n        }\n        i := i + 1;\n    }\n    return false;\n}\n\nlemma SubstringNotEquivalent(s: string, t: string)\n    ensures !isSubstringPred(s, t) <==> isNotSubstringPred(s, t)\n{\n    calc {\n        !isSubstringPred(s, t);\n    == { definition isSubstringPred } \n        !(exists i :: 0 <= i <= |t| && isPrefixPred(s, t[i..]));\n    == { quantifier duality } \n        (forall i :: 0 <= i <= |t| ==> !isPrefixPred(s, t[i..]));\n    == { definition isNotPrefixPred } \n        (forall i :: 0 <= i <= |t| ==> isNotPrefixPred(s, t[i..]));\n    == { definition isNotSubstringPred } \n        isNotSubstringPred(s, t);\n    }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod haveCommonKSubstring(k: nat, str1: string, str2: string) returns (found: bool)\n    ensures found  <==>  haveCommonKSubstringPred(k,str1,str2)\n    //ensures !found <==> haveNotCommonKSubstringPred(k,str1,str2) // This postcondition follows from the above lemma.\n// </vc-spec>\n// <vc-code>\n{\n    if k == 0 {\n        return true;\n    }\n    if k > |str1| {\n        return false;\n    }\n    var i1 := 0;\n    while i1 <= |str1| - k\n        invariant 0 <= i1 <= |str1| - k + 1\n        invariant forall j {:trigger isNotSubstringPred(str1[j..j+k], str2)} :: 0 <= j < i1 ==> isNotSubstringPred(str1[j..j+k], str2)\n    {\n        var substr := str1[i1..i1+k];\n        var foundInStr2 := IsSubstring(substr, str2);\n        if foundInStr2 {\n            return true;\n        } else {\n            SubstringNotEquivalent(substr, str2);\n        }\n        i1 := i1 + 1;\n    }\n    return false;\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_262_SplitArray.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_262_SplitArray.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SplitArray(arr: array<int>, L: int) returns (firstPart: seq<int>, secondPart: seq<int>)\n    requires 0 <= L <= arr.Length\n    ensures |firstPart| == L\n    ensures |secondPart| == arr.Length - L\n    ensures firstPart + secondPart == arr[..]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny-Exercises_tmp_tmpjm75muf__Session7Exercises_ExerciseBinarySearch_search.dfy", "root", true, "", "", false, "Dafny-Exercises_tmp_tmpjm75muf__Session7Exercises_ExerciseBinarySearch_search.dfy", "// <vc-preamble>\npredicate sorted(s : seq<int>) {\n    forall u, w :: 0 <= u < w < |s| ==> s[u] <= s[w]\n}\n\nmethod binarySearch(v:array<int>, elem:int) returns (p:int)\n requires sorted(v[0..v.Length])\n ensures -1<=p<v.Length\n ensures (forall u::0<=u<=p ==> v[u]<=elem) && (forall w::p<w<v.Length ==> v[w]>elem)\n{\n  assume{:axiom} false;\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod search(v:array<int>,elem:int) returns (b:bool)\n requires sorted(v[0..v.Length])\nensures b==(elem in v[0..v.Length])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "predicate sorted(s : seq<int>) {\n    forall u, w :: 0 <= u < w < |s| ==> s[u] <= s[w]\n}\n\nmethod binarySearch(v:array<int>, elem:int) returns (p:int)\n requires sorted(v[0..v.Length])\n ensures -1<=p<v.Length\n ensures (forall u::0<=u<=p ==> v[u]<=elem) && (forall w::p<w<v.Length ==> v[w]>elem)\n{\n  assume{:axiom} false;\n}\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod search(v:array<int>,elem:int) returns (b:bool)\n requires sorted(v[0..v.Length])\nensures b==(elem in v[0..v.Length])\n //Implement by calling binary search function\n// </vc-spec>\n// <vc-code>\n{\n    var p := binarySearch(v, elem);\n    b := (p >= 0 && v[p] == elem);\n}\n// </vc-code>\n\n//Recursive binary search", "", "", ""], ["cs245-verification_tmp_tmp0h_nxhqp_power_compute_power.dfy", "root", false, "", "", false, "cs245-verification_tmp_tmp0h_nxhqp_power_compute_power.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nfunction power(a: int, n: int): int\n  requires 0 <= a && 0 <= n;\n  decreases n;{if (n == 0) then 1 else a * power(a, n - 1)}\n\nmethod compute_power(a: int, n: int) returns (s: int)\n  requires n >= 0 && a >= 0;\n  ensures s == power(a,n);\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny-Exercises_tmp_tmpjm75muf__Session2Exercises_ExerciseSquare_root_mroot1.dfy", "root", true, "", "", false, "Dafny-Exercises_tmp_tmpjm75muf__Session2Exercises_ExerciseSquare_root_mroot1.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod mroot1(n:int) returns (r:int)\nrequires n>=0\nensures r>=0 && r*r <= n <(r+1)*(r+1)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod mroot1(n:int) returns (r:int) //Cost O(root n)\nrequires n>=0\nensures r>=0 && r*r <= n <(r+1)*(r+1)\n// </vc-spec>\n// <vc-code>\n{\n  r := 0;\n  while (r+1)*(r+1) <= n\n    invariant 0 <= r <= n && r*r <= n\n    decreases n - r\n  {\n    r := r + 1;\n  }\n  return r;\n}\n// </vc-code>\n\n", "", "", ""], ["formal_verication_dafny_tmp_tmpwgl2qz28_Challenges_ex6_BullsCows.dfy", "root", false, "", "", false, "formal_verication_dafny_tmp_tmpwgl2qz28_Challenges_ex6_BullsCows.dfy", "// <vc-preamble>\nfunction bullspec(s:seq<nat>, u:seq<nat>): nat\nrequires 0 <= |u| == |s| && nomultiples(u)\n{reccbull(s, u, 0)}\n\nfunction cowspec(s:seq<nat>, u:seq<nat>): nat\nrequires 0 <= |u| == |s| && nomultiples(u)\n{recccow(s, u, 0)}\n\nfunction reccbull(s: seq<nat>, u:seq<nat>, i:int): nat\nrequires 0 <= i <= |s| == |u|\ndecreases |s| - i\n{\n    if i ==|s| then 0\n    else if s[i] == u[i] then reccbull(s, u, i + 1) + 1\n    else reccbull(s, u, i + 1)\n}\n\nfunction recccow(s: seq<nat>, u:seq<nat>, i:int): nat\nrequires 0 <= i <= |s| == |u|\ndecreases |s| - i\n{\n    if i == |s| then 0\n    else if s[i] != u[i] && u[i] in s then recccow(s, u, i + 1) + 1\n    else recccow(s, u, i + 1)\n}\n\npredicate nomultiples(u:seq<nat>) \n{forall j, k :: 0<=j<k<|u| ==> u[j] != u[k]}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod BullsCows (s:seq<nat>, u:seq<nat>) returns (b:nat, c:nat) \nrequires 0 < |u| == |s| <= 10\nrequires nomultiples(u) && nomultiples(s);\nensures b >= 0 && c >= 0\nensures b == bullspec(s, u)\nensures c == cowspec(s, u)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_3_IsNonPrime.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_3_IsNonPrime.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod IsNonPrime(n: int) returns (result: bool)\n    requires n >= 2\n    ensures result <==> (exists k :: 2 <= k < n && n % k == 0)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny_examples_tmp_tmp8qotd4ez_test_shuffle_swap.dfy", "root", false, "", "", false, "dafny_examples_tmp_tmp8qotd4ez_test_shuffle_swap.dfy", "// <vc-preamble>\nfunction set_of_seq<T>(s: seq<T>): set<T>\n{\n  set x: T | x in s :: x\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod swap<T>(a: array<T>, i: int, j: int)\n\n  requires 0 <= i < a.Length && 0 <= j < a.Length\n  modifies a\n  ensures a[i] == old(a[j])\n  ensures a[j] == old(a[i])\n  ensures forall m :: 0 <= m < a.Length && m != i && m != j ==> a[m] == old(a[m])\n  ensures multiset(a[..]) == old(multiset(a[..]))\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_cal_ans_CalDiv.dfy", "root", true, "", "", false, "Clover_cal_ans_CalDiv.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod CalDiv() returns (x:int, y:int)\n  ensures x==191/7\n  ensures y==191%7\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod CalDiv() returns (x:int, y:int)\n  ensures x==191/7\n  ensures y==191%7\n// </vc-spec>\n// <vc-code>\n{\n  x, y := 191 / 7, 191 % 7;\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_792_CountLists.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_792_CountLists.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod CountLists(lists: seq<seq<int>>) returns (count: int)\n    ensures count >= 0\n    ensures count == |lists|\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny_Verify_tmp_tmphq7j0row_dataset_detailed_examples_SelectionSort_SelectionSort.dfy", "root", true, "", "", false, "Dafny_Verify_tmp_tmphq7j0row_dataset_detailed_examples_SelectionSort_SelectionSort.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SelectionSort(a: array<int>)\n  modifies a\n\n  ensures forall i,j :: 0 <= i < j < a.Length ==> a[i] <= a[j]\n\n  ensures multiset(a[..]) == old(multiset(a[..]))\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "// Works by dividing the input list into two parts: sorted and unsorted. At the beginning, \n// the sorted part is empty and the unsorted part contains all the elements.\n\n// <vc-helpers>\npredicate Sorted(a: array<int>, lo: int, hi: int)\n  reads a\n  requires 0 <= lo <= hi <= a.Length\n{\n  forall i, j :: lo <= i < j < hi ==> a[i] <= a[j]\n}\n\npredicate MultisetSame(a: array<int>, b: array<int>)\n  reads a, b\n{\n  multiset(a[..]) == multiset(b[..])\n}\n\nmethod FindMinIndex(a: array<int>, lo: int, hi: int) returns (minIndex: int)\n  requires 0 <= lo < hi <= a.Length\n  ensures lo <= minIndex < hi\n  ensures forall i :: lo <= i < hi ==> a[minIndex] <= a[i]\n{\n  minIndex := lo;\n  var i := lo + 1;\n  while i < hi\n    invariant lo <= minIndex < hi\n    invariant forall j :: lo <= j < i ==> a[minIndex] <= a[j]\n    invariant lo < i <= hi\n  {\n    if a[i] < a[minIndex] {\n      minIndex := i;\n    }\n    i := i + 1;\n  }\n}\n\nlemma SwapPreservesMultiset<T>(a: array<T>, i: int, j: int)\n  requires 0 <= i < a.Length\n  requires 0 <= j < a.Length\n  ensures multiset(a[..]) == multiset(a[..][i := a[j], j := a[i]])\n{\n  var ms := multiset(a[..]);\n  var aChanged := a[..][i := a[j], j := a[i]];\n  calc {\n    multiset(aChanged);\n    { assert multiset(a[..][i := a[j]]) == ms - [a[i]] + [a[j]]; }\n    multiset(a[..][i := a[j]][j := a[i]]);\n    multiset(a[..][i := a[j]]) - [a[..][i := a[j]][j]] + [a[i]];\n    { assert a[..][i := a[j]][j] == (if j == i then a[j] else a[j]); }\n    { assert j != i || a[..][i := a[j]][j] == a[j] && a[..][i := a[j]][j] == a[i] ==> a[i] == a[j]; }\n    if j == i then\n      multiset(a[..][i := a[j]]) - [a[j]] + [a[i]]\n    else\n      multiset(a[..][i := a[j]]) - [a[j]] + [a[i]];\n    { assert multiset(a[..][i := a[j]]) == ms - [a[i]] + [a[j]]; }\n    if j == i then\n      (ms - [a[i]] + [a[j]]) - [a[j]] + [a[i]]\n    else\n      (ms - [a[i]] + [a[j]]) - [a[j]] + [a[i]];\n    { assert j != i ==> (ms - [a[i]] + [a[j]]) - [a[j]] + [a[i]] == ms; }\n    { assert j == i ==> (ms - [a[i]] + [a[j]]) - [a[j]] + [a[i]] == ms; }\n    ms;\n  }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod SelectionSort(a: array<int>)\n  modifies a\n  // Ensures the final array is sorted in ascending order\n  ensures forall i,j :: 0 <= i < j < a.Length ==> a[i] <= a[j]\n  // Ensures that the final array has the same elements as the initial array\n  ensures multiset(a[..]) == old(multiset(a[..]))\n// </vc-spec>\n// <vc-code>\n{\n  var n := a.Length;\n  var i := 0;\n  \n  while i < n\n    invariant 0 <= i <= n\n    invariant Sorted(a, 0, i)\n    invariant multiset(a[..]) == old(multiset(a[..]))\n  {\n    var minIndex := FindMinIndex(a, i, n);\n    assert a[minIndex] <= a[i];\n    \n    if minIndex != i {\n      SwapPreservesMultiset(a, i, minIndex);\n      var temp := a[i];\n      a[i] := a[minIndex];\n      a[minIndex] := temp;\n    }\n    \n    assert Sorted(a, 0, i);\n    assert a[i] <= a[minIndex];\n    assert forall k :: i <= k < n ==> a[i] <= a[k];\n    \n    i := i + 1;\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_412_RemoveOddNumbers.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_412_RemoveOddNumbers.dfy", "// <vc-preamble>\npredicate IsEven(n: int)\n{\n    n % 2 == 0\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod RemoveOddNumbers(arr: array<int>) returns (evenList: seq<int>)\n\n    ensures forall i :: 0 <= i < |evenList| ==> IsEven(evenList[i]) && evenList[i] in arr[..]\n\n    ensures forall i :: 0 <= i < arr.Length && IsEven(arr[i]) ==> arr[i] in evenList\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny_projects_tmp_tmpjutqwjv4_tutorial_tutorial_Find.dfy", "root", false, "", "", false, "dafny_projects_tmp_tmpjutqwjv4_tutorial_tutorial_Find.dfy", "// <vc-preamble>\nfunction fib(n: nat): nat\n{\n  if n == 0 then 0\n  else if n == 1 then 1\n  else fib(n - 1) + fib(n - 2)\n}\n\npredicate sorted(a: array<int>)\n  reads a\n{\n  forall n, m :: 0 <= n < m < a.Length ==> a[n] <= a[m]\n}\n\nfunction update(s: seq<int>, i: int, v: int): seq<int>\n  requires 0 <= i < |s|\n  ensures update(s, i, v) == s[i := v]\n{\n  s[..i] + [v] + s[i+1..]\n}\n\nfunction count(a: seq<bool>): nat\n{\n  if |a| == 0 then 0 else\n  (if a[0] then 1 else 0) + count(a[1..])\n}\n\nclass Node\n{\n  var next: seq<Node>\n}\npredicate closed(graph: set<Node>)\n  reads graph\n{\n  forall i :: i in graph ==> forall k :: 0 <= k < |i.next| ==> i.next[k] in graph && i.next[k] != i\n}\npredicate path(p: seq<Node>, graph: set<Node>)\n  requires closed(graph) && 0 < |p|\n  reads graph\n{\n  p[0] in graph &&\n    (|p| > 1 ==> p[1] in p[0].next &&\n     path(p[1..], graph))\n}\npredicate pathSpecific(p: seq<Node>, start: Node, end: Node, graph: set<Node>)\n  requires closed(graph)\n  reads graph\n{\n  0 < |p| &&\n  start == p[0] && end == p[|p|-1] &&\n  path(p, graph)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Find(a: array<int>, key: int) returns (index: int)\n  ensures 0 <= index ==> index < a.Length && a[index] == key\n  ensures index < 0 ==> (forall k :: 0 <= k < a.Length ==> a[k] != key)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_105_CountTrue.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_105_CountTrue.dfy", "// <vc-preamble>\nfunction countTo( a:array<bool>, n:int ) : int\n  requires a != null;\n  requires 0 <= n && n <= a.Length;\n  decreases n;\n  reads a;\n{\n  if (n == 0) then 0 else countTo(a, n-1) + (if a[n-1] then 1 else 0)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod CountTrue(a: array<bool>) returns (result: int)\n    requires a != null\n    ensures result == countTo(a, a.Length)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny_tmp_tmpmvs2dmry_pancakesort_flip_flip.dfy", "root", true, "", "", false, "Dafny_tmp_tmpmvs2dmry_pancakesort_flip_flip.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod flip (a: array<int>, num: int)\nrequires a.Length > 0;\nrequires 0 <= num < a.Length;\nmodifies a;\nensures forall k :: 0 <= k <= num ==> a[k] == old(a[num-k])\nensures forall k :: num < k < a.Length ==> a[k] == old(a[k])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "// flips (i.e., reverses) array elements in the range [0..num]\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod flip (a: array<int>, num: int)\nrequires a.Length > 0;\nrequires 0 <= num < a.Length;\nmodifies a;\nensures forall k :: 0 <= k <= num ==> a[k] == old(a[num-k])\nensures forall k :: num < k < a.Length ==> a[k] == old(a[k])\n// ensures multiset(a[..]) == old(multiset(a[..]))\n// </vc-spec>\n// <vc-code>\n{\n  var i := 0;\n  var j := num;\n  while i < j\n    invariant 0 <= i <= j <= num;\n    invariant j == num - i;\n    invariant forall k :: 0 <= k < i ==> a[k] == old(a[num-k]);\n    invariant forall k :: j < k <= num ==> a[k] == old(a[num-k]);\n    invariant forall k :: i <= k <= j ==> a[k] == old(a[k]);\n  {\n    a[i], a[j] := a[j], a[i];\n    i := i + 1;\n    j := j - 1;\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_basic_examples_BubbleSort_sol_bubbleSort.dfy", "root", false, "", "", false, "Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_basic_examples_BubbleSort_sol_bubbleSort.dfy", "// <vc-preamble>\npredicate sorted_between (a:array<int>, from:nat, to:nat)\n  reads a;\n  requires a != null;\n  requires from <= to;\n  requires to <= a.Length;\n{\n  forall i,j :: from <= i < j < to && 0 <= i < j < a.Length ==> a[i] <= a[j]\n}\n\npredicate sorted (a:array<int>)\n  reads a;\n  requires a!=null;\n{\n  sorted_between (a, 0, a.Length)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod bubbleSort (a: array<int>)\n  modifies a;\n  requires a != null;\n  requires a.Length > 0;\n  ensures sorted(a);\n  ensures multiset(old(a[..])) == multiset(a[..]);\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_433_IsGreater.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_433_IsGreater.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod IsGreater(n: int, a: array<int>) returns (result: bool)\n    requires a != null\n    ensures result ==> forall i :: 0 <= i < a.Length ==> n > a[i]\n    ensures !result ==> exists i :: 0 <= i < a.Length && n <= a[i]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny-programs_tmp_tmpnso9eu7u_Algorithms___sorting_bubble-sort_BubbleSort.dfy", "root", false, "", "", false, "Dafny-programs_tmp_tmpnso9eu7u_Algorithms___sorting_bubble-sort_BubbleSort.dfy", "// <vc-preamble>\npredicate sorted_between(A:array<int>, from:int, to:int)\n    reads A\n{\n    forall i, j :: 0 <= i <= j < A.Length && from <= i <= j <= to ==> A[i] <= A[j]\n}\n\npredicate sorted(A:array<int>)\n    reads A\n{\n    sorted_between(A, 0, A.Length-1)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod BubbleSort(A:array<int>)\n    modifies A\n    ensures sorted(A)\n    ensures multiset(A[..]) == multiset(old(A[..]))\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_644_ReverseUptoK.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_644_ReverseUptoK.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ReverseUptoK(s: array<int>, k: int)\n    modifies s\n    requires 2 <= k <= s.Length\n    ensures forall i :: 0 <= i < k ==> s[i] == old(s[k - 1 - i])\n    ensures forall i :: k <= i < s.Length ==> s[i] == old(s[i])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_801_CountEqualNumbers.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_801_CountEqualNumbers.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod CountEqualNumbers(a: int, b: int, c: int) returns (count: int)\n    ensures count >= 0 && count <= 3\n    ensures (count == 3) <==> (a == b && b == c)\n    ensures (count == 2) <==> ((a == b && b != c) || (a != b && b == c) || (a == c && b != c))\n    ensures (count == 1) <==> (a != b && b != c && a != c)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["FlexWeek_tmp_tmpc_tfdj_3_reverse_Reverse.dfy", "root", true, "", "", false, "FlexWeek_tmp_tmpc_tfdj_3_reverse_Reverse.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Reverse(a: array<char>) returns (b: array<char>)\nrequires a.Length > 0\nensures a.Length == b.Length\nensures forall k :: 0 <= k < a.Length ==> b[k] == a[(a.Length-1) - k];\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "// Write an *iterative* Dafny method Reverse with signature:\n\n// <vc-helpers>\n// empty\n// </vc-helpers>\n\n// <vc-spec>\n//          method Reverse(a: array<char>) returns (b: array<char>)\n\n// which takes an input array of characters 'a' and outputs array 'b' consisting of\n// the elements of the input array in reverse order. The following conditions apply:\n//  - the input array cannot be empty\n//  - the input array is not modified\n//  - you must use iteration\n//  - not permitted is an *executable* (parallel) forall statement\n//  - not permitted are any other predicates, functions or methods\n\n// For the purposes of this practice exercise, I'll include a test method.\n\nmethod Reverse(a: array<char>) returns (b: array<char>)\nrequires a.Length > 0\nensures a.Length == b.Length\nensures forall k :: 0 <= k < a.Length ==> b[k] == a[(a.Length-1) - k];\n// </vc-spec>\n// <vc-code>\n{\n  b := new char[a.Length];\n  var i := 0;\n  while i < a.Length\n    invariant 0 <= i <= a.Length\n    invariant forall j :: 0 <= j < i ==> b[j] == a[a.Length - 1 - j]\n  {\n    b[i] := a[a.Length - 1 - i];\n    i := i + 1;\n  }\n}\n// </vc-code>\n\n// Notice it compiles and the executable generates output (just to see the arrays printed in reverse).", "", "", ""], ["vfag_tmp_tmpc29dxm1j_sumar_componentes_suma_componentes.dfy", "root", false, "", "", false, "vfag_tmp_tmpc29dxm1j_sumar_componentes_suma_componentes.dfy", "// <vc-preamble>\nfunction suma_aux(V : array?<int>, n : int) : int\n\n  requires V != null\n  requires 0 <= n <= V.Length\n\n  decreases V.Length - n\n\n  reads V\n\n{\n\n  if (n == V.Length) then 0\n                     else V[n] + suma_aux(V, n + 1)\n\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod suma_componentes(V : array?<int>) returns (suma : int)\n\n  requires V != null\n  ensures  suma == suma_aux(V, 0)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_798_ArraySum.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_798_ArraySum.dfy", "// <vc-preamble>\nfunction sumTo( a:array<int>, n:int ) : int\n  requires a != null;\n  requires 0 <= n && n <= a.Length;\n  decreases n;\n  reads a;\n{\n  if (n == 0) then 0 else sumTo(a, n-1) + a[n-1]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ArraySum(a: array<int>) returns (result: int)\n    ensures result == sumTo(a, a.Length)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_637_IsBreakEven.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_637_IsBreakEven.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod IsBreakEven(costPrice: int, sellingPrice: int) returns (result: bool)\n    requires costPrice >= 0 && sellingPrice >= 0\n    ensures result <==> costPrice == sellingPrice\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_803_IsPerfectSquare.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_803_IsPerfectSquare.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod IsPerfectSquare(n: int) returns (result: bool)\n    requires n >= 0\n    ensures result == true ==> (exists i: int :: 0 <= i <= n && i * i == n)\n    ensures result == false ==> (forall a: int :: 0 < a*a < n ==> a*a != n)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_verified_algorithms_lol_sort_swap.dfy", "root", false, "", "", false, "Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_verified_algorithms_lol_sort_swap.dfy", "// <vc-preamble>\npredicate valid_permut(a: seq<int>, b: seq<int>)\n  requires |a| == |b|\n{\n  multiset(a) == multiset(b)\n}\n\npredicate sorted(a: seq<int>)\n{\n  forall i, j | 0 <= i <= j < |a| :: a[i] <= a[j]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod swap(a: array<int>, i: int, j: int)\n  requires 0 <= i < a.Length && 0 <= j < a.Length\n  modifies a\n  ensures a[..] == old(a[..]) [i := old(a[j])] [j := old(a[i])]\n  ensures valid_permut(a[..], old(a[..]))\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny_tmp_tmp0wu8wmfr_Heimaverkefni_3_InsertionSortMultiset_Search.dfy", "root", false, "", "", false, "Dafny_tmp_tmp0wu8wmfr_Heimaverkefni_3_InsertionSortMultiset_Search.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Search( s: seq<int>, x: int ) returns ( k: int )\n\n    requires forall p,q | 0 <= p < q < |s| :: s[p] <= s[q];\n    ensures 0 <= k <= |s|;\n    ensures forall i | 0 <= i < k :: s[i] <= x;\n    ensures forall i | k <= i < |s| :: s[i] >= x;\n    ensures forall z | z in s[..k] :: z <= x;\n    ensures forall z | z in s[k..] :: z >= x;\n    ensures s == s[..k]+s[k..];\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_399_BitwiseXOR.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_399_BitwiseXOR.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod BitwiseXOR(a: seq<bv32>, b: seq<bv32>) returns (result: seq<bv32>)\n    requires |a| == |b|\n    ensures |result| == |a|\n    ensures forall i :: 0 <= i < |result| ==> result[i] == a[i] ^ b[i]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_algorithms_and_leetcode_examples_bubblesort_BubbleSort.dfy", "root", false, "", "", false, "Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_algorithms_and_leetcode_examples_bubblesort_BubbleSort.dfy", "// <vc-preamble>\nfunction NChoose2(n: int): int\n{\n  n * (n - 1) / 2\n}\n\nfunction SumRange(lo: int, hi: int): int\n  decreases hi - lo\n{\n  if lo >= hi then 0\n  else SumRange(lo, hi - 1) + hi - 1\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod BubbleSort(a: array<int>) returns (n: nat) \n  modifies a\n  ensures n <= NChoose2(a.Length)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_606_DegreesToRadians.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_606_DegreesToRadians.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod DegreesToRadians(degrees: real) returns (radians: real)\n    ensures radians == degrees * 3.14159265358979323846 / 180.0\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_advanced_examples_Percentile_PercentileNonUniqueAnswer.dfy", "root", false, "", "", false, "Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_advanced_examples_Percentile_PercentileNonUniqueAnswer.dfy", "// <vc-preamble>\nfunction SumUpto(A: array<real>, end: int): real\n  requires -1 <= end < A.Length\n  reads A\n{\n  if end == -1 then\n    0.0\n  else\n    A[end] + SumUpto(A, end-1)\n}\n\nfunction Sum(A: array<real>): real\n  reads A\n{\n  SumUpto(A, A.Length-1)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod PercentileNonUniqueAnswer() returns (p: real, A: array<real>, total: real, i1: int, i2: int)\n  ensures forall i | 0 <= i < A.Length :: A[i] > 0.0\n  ensures 0.0 <= p <= 100.0\n  ensures total == Sum(A)\n  ensures total > 0.0\n\n  ensures -1 <= i1 < A.Length\n  ensures SumUpto(A, i1) <= (p/100.0) * total\n  ensures i1+1 < A.Length ==> SumUpto(A, i1+1) >= (p/100.0) * total\n\n  ensures -1 <= i2 < A.Length\n  ensures SumUpto(A, i2) <= (p/100.0) * total\n  ensures i2+1 < A.Length ==> SumUpto(A, i2+1) >= (p/100.0) * total\n\n  ensures i1 != i2\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["cmsc433_tmp_tmpe3ob3a0o_dafny_project1_p1-assignment-2_IsPrime.dfy", "root", false, "", "", false, "cmsc433_tmp_tmpe3ob3a0o_dafny_project1_p1-assignment-2_IsPrime.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod IsPrime (m : int) returns (isPrime : bool)\n    requires m > 0\n    ensures isPrime <==> (m > 1 && forall j : int :: 2 <= j < m ==> m % j != 0)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny-Exercises_tmp_tmpjm75muf__Session6Exercises_ExerciseCountEven_mcountEven.dfy", "root", true, "", "", false, "Dafny-Exercises_tmp_tmpjm75muf__Session6Exercises_ExerciseCountEven_mcountEven.dfy", "// <vc-preamble>\npredicate positive(s:seq<int>)\n{\n  forall u::0<=u<|s| ==> s[u]>=0\n  }\n\npredicate isEven(i:int)\nrequires i>=0\n{\n  i%2==0\n}\n\nfunction CountEven(s:seq<int>):int\ndecreases s\nrequires positive(s)\n{\n  if s==[] then 0\n  else (if (s[|s|-1]%2==0) then 1 else 0)+CountEven(s[..|s|-1])\n\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod mcountEven(v:array<int>) \nreturns (n:int)\nrequires positive(v[..])\nensures  n==CountEven(v[..])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "predicate positive(s:seq<int>)\n{\n  forall u::0<=u<|s| ==> s[u]>=0\n  }\n\npredicate isEven(i:int)\nrequires i>=0\n{\n  i%2==0\n}\n\nfunction CountEven(s:seq<int>):int\ndecreases s\nrequires positive(s)\n{\n  if s==[] then 0\n  else (if (s[|s|-1]%2==0) then 1 else 0)+CountEven(s[..|s|-1])\n\n}\n\n// <vc-helpers>\nlemma CountEvenAppend(s:seq<int>, e:int)\n  requires positive(s) && e>=0\n  ensures CountEven(s + [e]) == CountEven(s) + (if e%2==0 then 1 else 0)\n{\n  if s == [] {\n    calc {\n      CountEven(s + [e]);\n      CountEven([e]);\n      (if e%2==0 then 1 else 0) + CountEven([]);\n      (if e%2==0 then 1 else 0) + 0;\n      (if e%2==0 then 1 else 0);\n    }\n  } else {\n    calc {\n      CountEven(s + [e]);\n      CountEven(s + [e]);\n      == { assert s + [e] == s[..|s|] + [e]; }\n      CountEven((s[..|s|]) + [e]);\n      == { CountEvenAppend(s[..|s|-1], s[|s|-1]); }\n      CountEven((s[..|s|-1]) + [s[|s|-1]]) + (if e%2==0 then 1 else 0);\n      == { reveal CountEven(); }\n      CountEven(s) + (if e%2==0 then 1 else 0);\n    }\n  }\n}\n\nlemma CountEvenSlice(s:seq<int>, i:int)\n  requires 0 <= i <= |s|\n  requires positive(s)\n  ensures CountEven(s[..i]) + CountEven(s[i..]) == CountEven(s)\n{\n  calc {\n    CountEven(s);\n    == { reveal CountEven(); }\n    (if s[|s|-1]%2==0 then 1 else 0) + CountEven(s[..|s|-1]);\n    == { CountEvenSlice(s[..|s|-1], i); }\n    (if s[|s|-1]%2==0 then 1 else 0) + CountEven(s[..|s|-1][..i]) + CountEven(s[..|s|-1][i..]);\n    == { assert s[..|s|-1][..i] == s[..i] && s[..|s|-1][i..] == s[i..|s|-1]; }\n    (if s[|s|-1]%2==0 then 1 else 0) + CountEven(s[..i]) + CountEven(s[i..|s|-1]);\n    == { reveal CountEven(); }\n    CountEven(s[..i]) + CountEven(s[i..]);\n  }\n}\n// </vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod mcountEven(v:array<int>) \nreturns (n:int)\nrequires positive(v[..])\nensures  n==CountEven(v[..])\n// </vc-spec>\n// <vc-code>\n{\n  n := 0;\n  var i := 0;\n  while i < v.Length\n  invariant 0 <= i <= v.Length\n  invariant positive(v[..i])\n  invariant n == CountEven(v[..i])\n  {\n    if v[i] % 2 == 0 {\n      n := n + 1;\n    }\n    i := i + 1;\n    if i < v.Length {\n      CountEvenSlice(v[..i], i);\n    }\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["formal-verification_tmp_tmpoepcssay_strings3_isPrefix.dfy", "root", false, "", "", false, "formal-verification_tmp_tmpoepcssay_strings3_isPrefix.dfy", "// <vc-preamble>\npredicate isPrefixPred(pre:string, str:string)\n{\n    (|pre| <= |str|) && \n    pre == str[..|pre|]\n}\n\npredicate isNotPrefixPred(pre:string, str:string)\n{\n    (|pre| > |str|) || \n    pre != str[..|pre|]\n}\n\npredicate isSubstringPred(sub:string, str:string)\n{\n    (exists i :: 0 <= i <= |str| &&  isPrefixPred(sub, str[i..]))\n}\n\npredicate isNotSubstringPred(sub:string, str:string)\n{\n    (forall i :: 0 <= i <= |str| ==> isNotPrefixPred(sub,str[i..]))\n}\n\npredicate haveCommonKSubstringPred(k:nat, str1:string, str2:string)\n{\n    exists i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k && isSubstringPred(str1[i1..j1],str2)\n}\n\npredicate haveNotCommonKSubstringPred(k:nat, str1:string, str2:string)\n{\n    forall i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k ==>  isNotSubstringPred(str1[i1..j1],str2)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod isPrefix(pre: string, str: string) returns (res:bool)\n    ensures !res <==> isNotPrefixPred(pre,str)\n    ensures  res <==> isPrefixPred(pre,str)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Programmverifikation-und-synthese_tmp_tmppurk6ime_PVS_Assignment_ex_06_Hoangkim_ex_06_hoangkim_gcdI.dfy", "root", false, "", "", false, "Programmverifikation-und-synthese_tmp_tmppurk6ime_PVS_Assignment_ex_06_Hoangkim_ex_06_hoangkim_gcdI.dfy", "// <vc-preamble>\nghost function gcd(x: int, y: int): int\n    requires x > 0 && y > 0\n{\n    if x == y then x\n    else if x > y then gcd(x - y, y)\n    else gcd(x, y - x)\n}\n\nghost function gcd'(x: int, y: int): int\n    requires x > 0 && y > 0\n    decreases if x > y then x else y\n{\n    if x == y then x\n    else if x > y then gcd'(x - y, y)\n    else gcd(y, x)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod gcdI(m: int, n: int) returns (d: int)\nrequires  m > 0 && n > 0 \nensures d == gcd(m, n);\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-exercise_tmp_tmpouftptir_filter_Filter.dfy", "root", false, "", "", false, "dafny-exercise_tmp_tmpouftptir_filter_Filter.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Filter(a:seq<char>, b:set<char>) returns(c:set<char>) \nensures forall x :: x in a && x in b <==> x in c\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_576_IsSublist.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_576_IsSublist.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod IsSublist(sub: seq<int>, main: seq<int>) returns (result: bool)\n    ensures true <== (exists i :: 0 <= i <= |main| - |sub| && sub == main[i..i + |sub|])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_algorithms_and_leetcode_ProgramProofs_ch15_QuickSortAux.dfy", "root", false, "", "", false, "Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_algorithms_and_leetcode_ProgramProofs_ch15_QuickSortAux.dfy", "// <vc-preamble>\npredicate SplitPoint(a: array<int>, n: int)\n    reads a\n    requires 0 <= n <= n\n\n{\n    forall i,j :: 0 <= i < n <= j < a.Length ==> a[i] <= a[j]\n}\n\ntwostate predicate SwapFrame(a: array<int>, lo: int, hi: int)\n    requires 0 <= lo <= hi <= a.Length\n    reads a\n{\n    (forall i :: 0 <= i < lo || hi <= i < a.Length ==> a[i] == old(a[i])) && multiset(a[..]) == old(multiset(a[..]))\n}\n\nmethod Partition(a: array<int>, lo: int, hi: int) returns (p: int)\n    requires 0 <= lo < hi <= a.Length\n    requires SplitPoint(a, lo) && SplitPoint(a, hi)\n    modifies a\n    ensures lo <= p < hi\n    ensures forall i :: lo <= i < p ==> a[i] < a[p]\n    ensures forall i :: p <= i < hi ==> a[p] <= a[i]\n    ensures SplitPoint(a, lo) && SplitPoint(a, hi)\n    ensures SwapFrame(a, lo, hi)\n{\n  assume{:axiom} false;\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod QuickSortAux(a: array<int>, lo: int, hi: int)\n    requires 0 <= lo <= hi <= a.Length\n    requires SplitPoint(a, lo) && SplitPoint(a, hi)\n    modifies a\n    ensures forall i,j :: lo <= i < j < hi ==> a[i] <= a[j]\n    ensures SwapFrame(a, lo, hi)\n    ensures SplitPoint(a, lo) && SplitPoint(a, hi)\n    decreases hi - lo\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_bubble_sort_BubbleSort.dfy", "root", true, "", "", false, "Clover_bubble_sort_BubbleSort.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod BubbleSort(a: array<int>)\n  modifies a\n  ensures forall i,j::0<= i < j < a.Length ==> a[i] <= a[j]\n  ensures multiset(a[..])==multiset(old(a[..]))\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\nlemma LemmaSwapIsPermutation<T>(a: array<T>, i: int, j: int)\n  requires 0 <= i < a.Length && 0 <= j < a.Length\n  ensures multiset(a[..]) == multiset(a[i := a[j], j := a[i]][..])\n{\n  var b := a[i := a[j], j := a[i]];\n  assert multiset(a[..]) == multiset(b[..]);\n}\n\nlemma LemmaSortedAfterLastPass<T(==)>(a: array<T>, n: int)\n  requires 0 <= n <= a.Length\n  requires forall i, j :: 0 <= i < j < a.Length - n ==> a[i] <= a[j]\n  ensures forall i, j :: 0 <= i < j < a.Length - n + 1 ==> a[i] <= a[j]\n{\n  if n < a.Length {\n    forall i, j | 0 <= i < j < a.Length - n + 1\n    {\n      if i < a.Length - n && j < a.Length - n {\n        calc {\n          a[i] <= a[j];\n        }\n      } else if j == a.Length - n && i == a.Length - n - 1 {\n        if a[i] > a[j] {\n          assert false;\n        }\n      }\n    }\n  }\n}\n\npredicate Sorted(a: array<int>)\n  reads a\n{\n  forall i, j :: 0 <= i < j < a.Length ==> a[i] <= a[j]\n}\n\nlemma LemmaBubbleUpCorrect<T(==)>(a: array<T>)\n  modifies a\n  requires forall i, j :: 0 <= i < j < a.Length ==> a[i] <= a[j]\n  ensures Sorted(a)\n  ensures multiset(a[..]) == multiset(old(a[..]))\n{\n  assert Sorted(a);\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod BubbleSort(a: array<int>)\n  modifies a\n  ensures forall i,j::0<= i < j < a.Length ==> a[i] <= a[j]\n  ensures multiset(a[..])==multiset(old(a[..]))\n// </vc-spec>\n// <vc-code>\n{\n  var n := a.Length;\n  while n > 0 \n    invariant 0 <= n <= a.Length\n    invariant forall i, j :: 0 <= i < j < a.Length - n ==> a[i] <= a[j]\n    invariant multiset(a[..]) == multiset(old(a[..]))\n  {\n    var i := 0;\n    while i < n - 1\n      invariant 0 <= i <= n - 1\n      invariant forall j, k :: 0 <= j < k <= i ==> a[j] <= a[k]\n      invariant multiset(a[..]) == multiset(old(a[..]))\n    {\n      if a[i] > a[i + 1] {\n        var t := a[i];\n        a[i] := a[i + 1];\n        a[i + 1] := t;\n        LemmaSwapIsPermutation(a, i, i + 1);\n      }\n      i := i + 1;\n    }\n    LemmaSortedAfterLastPass(a, n);\n    n := n - 1;\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_622_FindMedian.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_622_FindMedian.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod FindMedian(a: array<int>, b: array<int>) returns (median: int)\n    requires a != null && b != null\n    requires a.Length == b.Length\n    requires a.Length > 0\n    requires forall i :: 0 <= i < a.Length - 1 ==> a[i] <= a[i + 1]\n    requires forall i :: 0 <= i < b.Length - 1 ==> b[i] <= b[i + 1]\n    ensures median == if (a.Length % 2 == 0) then (a[a.Length / 2 - 1] + b[0]) / 2 else a[a.Length / 2]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_230_ReplaceBlanksWithChar.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_230_ReplaceBlanksWithChar.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ReplaceBlanksWithChar(s: string, ch: char) returns (v: string)\n    ensures |v| == |s|\n    ensures forall i :: 0 <= i < |s| ==> (s[i] == ' ' ==> v[i] == ch) && (s[i] != ' ' ==> v[i] == s[i])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_251_InsertBeforeEach.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_251_InsertBeforeEach.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod InsertBeforeEach(s: seq<string>, x: string) returns (v: seq<string>)\n        ensures |v| == 2 * |s|\n        ensures forall i :: 0 <= i < |s| ==> v[2*i] == x && v[2*i + 1] == s[i]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_476_SumMinMax.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_476_SumMinMax.dfy", "// <vc-preamble>\nfunction Min(a: seq<int>) : int\n    requires |a| > 0\n{\n    if |a| == 1 then a[0]\n    else\n        var minPrefix := Min(a[..|a|-1]);\n        if a[|a|-1] <= minPrefix then a[|a|-1] else Min(a[..|a|-1])\n}\n\nfunction Max(a: seq<int>) : int\n    requires |a| > 0\n{\n    if |a| == 1 then a[0]\n    else\n        var maxPrefix := Max(a[..|a|-1]);\n        if a[|a|-1] >= maxPrefix then a[|a|-1] else Max(a[..|a|-1])\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SumMinMax(a: array<int>) returns (sum: int)\n    requires a.Length > 0\n    ensures sum == Max(a[..]) + Min(a[..])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny_Learning_Experience_tmp_tmpuxvcet_u_week1_7_week5_ComputePower_ComputePower.dfy", "root", true, "", "", false, "Dafny_Learning_Experience_tmp_tmpuxvcet_u_week1_7_week5_ComputePower_ComputePower.dfy", "// <vc-preamble>\nfunction Power(n:nat):nat \n{\n    if n == 0 then 1 else 2 * Power(n-1)\n}\n\nmethod CalcPower(n:nat) returns (p:nat)\n    ensures p == 2*n;\n{\n  assume{:axiom} false;\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ComputePower(n:nat) returns (p:nat)\n    ensures p == Power(n)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "function Power(n:nat):nat \n{\n    if n == 0 then 1 else 2 * Power(n-1)\n}\n\nmethod CalcPower(n:nat) returns (p:nat)\n    ensures p == 2*n;\n{\n  assume{:axiom} false;\n}\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod ComputePower(n:nat) returns (p:nat)\n    ensures p == Power(n)\n// </vc-spec>\n// <vc-code>\n{\n  var i := 0;\n  var result := 1;\n  while i < n\n      invariant 0 <= i <= n\n      invariant result == Power(i)\n  {\n      result := 2 * result;\n      i := i + 1;\n  }\n  p := result;\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_574_CylinderSurfaceArea.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_574_CylinderSurfaceArea.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod CylinderSurfaceArea(radius: real, height: real) returns (area: real)\n    requires radius > 0.0 && height > 0.0\n    ensures area == 2.0 * 3.14159265358979323846 * radius * (radius + height)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Programmverifikation-und-synthese_tmp_tmppurk6ime_PVS_Assignment_ex_05_Hoangkim_ex_05_Hoangkim_gcdI.dfy", "root", false, "", "", false, "Programmverifikation-und-synthese_tmp_tmppurk6ime_PVS_Assignment_ex_05_Hoangkim_ex_05_Hoangkim_gcdI.dfy", "// <vc-preamble>\nfunction fib(n: nat):nat\n{\n    if n < 2 then n else fib(n-2)+fib(n-1)\n}\n\nfunction fact(n:nat):nat\n{if n==0 then 1 else n*fact(n-1)}\n\nfunction gcd(m: nat, n: nat): nat\n    requires m > 0 && n > 0\n{\n    if m == n then m\n    else if m > n then gcd(m - n, n)\n    else gcd(m, n - m)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod gcdI(m: int, n: int) returns (g: int)\n    requires  m > 0 && n > 0 \n    ensures g == gcd(m, n);\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny_tmp_tmp59p638nn_examples_SelectionSort_SelectionnSort.dfy", "root", false, "", "", false, "dafny_tmp_tmp59p638nn_examples_SelectionSort_SelectionnSort.dfy", "// <vc-preamble>\ntwostate predicate Preserved(a: array<int>, left: nat, right: nat)\n    reads a\n    requires left <= right <= a.Length\n{\n    multiset(a[left..right]) == multiset(old(a[left..right]))\n}\n\nghost predicate Ordered(a: array<int>, left: nat, right: nat)\n    reads a\n    requires left <= right <= a.Length\n{\n    forall i: nat :: 0 < left <= i < right ==> a[i-1] <= a[i]\n}\n\ntwostate predicate Sorted(a: array<int>)\n    reads a\n{\n    Ordered(a,0,a.Length) && Preserved(a,0,a.Length)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SelectionnSort(a: array<int>)\n    modifies a\n    ensures Sorted(a)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny-Exercises_tmp_tmpjm75muf__Session4Exercises_ExercisefirstZero_mfirstCero.dfy", "root", true, "", "", false, "Dafny-Exercises_tmp_tmpjm75muf__Session4Exercises_ExercisefirstZero_mfirstCero.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod mfirstCero(v:array<int>) returns (i:int)\nensures 0 <=i<=v.Length\nensures forall j:: 0<=j<i ==> v[j]!=0 \nensures i!=v.Length ==> v[i]==0\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod mfirstCero(v:array<int>) returns (i:int)\nensures 0 <=i<=v.Length\nensures forall j:: 0<=j<i ==> v[j]!=0 \nensures i!=v.Length ==> v[i]==0\n// </vc-spec>\n// <vc-code>\n{\n  var idx := 0;\n  while idx < v.Length && v[idx] != 0\n    invariant 0 <= idx <= v.Length\n    invariant forall j :: 0 <= j < idx ==> v[j] != 0\n  {\n    idx := idx + 1;\n  }\n  return idx;\n}\n// </vc-code>\n\n", "", "", ""], ["Clover_swap_Swap.dfy", "root", true, "", "", false, "Clover_swap_Swap.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Swap(X: int, Y: int) returns(x: int, y: int)\n  ensures x==Y\n  ensures y==X\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n// No changes needed to helpers\n// </vc-helpers>\n\n// <vc-spec>\nmethod Swap(X: int, Y: int) returns(x: int, y: int)\n  ensures x==Y\n  ensures y==X\n// </vc-spec>\n// <vc-code>\n{\n  x := Y;\n  y := X;\n}\n// </vc-code>\n\n", "", "", ""], ["Dafny_Programs_tmp_tmp99966ew4_lemma_FindZero.dfy", "root", true, "", "", false, "Dafny_Programs_tmp_tmp99966ew4_lemma_FindZero.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod FindZero(a: array<int>) returns (index: int)\n   requires a != null\n   requires forall i :: 0 <= i < a.Length ==> 0 <= a[i]\n   requires forall i :: 0 < i < a.Length ==> a[i-1]-1 <= a[i]\n   ensures index < 0  ==> forall i :: 0 <= i < a.Length ==> a[i] != 0\n   ensures 0 <= index ==> index < a.Length && a[index] == 0\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\nfunction Search(a: array<int>, low: int, high: int): int\n   requires a != null\n   requires 0 <= low <= high <= a.Length\n   requires forall i :: 0 <= i < a.Length ==> 0 <= a[i]\n   requires forall i :: 0 < i < a.Length ==> a[i-1]-1 <= a[i]\n   ensures -1 <= Search(a, low, high) < high\n   ensures Search(a, low, high) < 0 ==> forall i :: low <= i < high ==> a[i] != 0\n   ensures 0 <= Search(a, low, high) ==> a[Search(a, low, high)] == 0\n{\n   if low == high then -1\n   else\n     var mid := (low + high) / 2;\n     if a[mid] == 0 then mid\n     else if a[mid] <= mid then Search(a, low, mid)\n     else Search(a, mid + 1, high)\n}\n// </vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod FindZero(a: array<int>) returns (index: int)\n   requires a != null\n   requires forall i :: 0 <= i < a.Length ==> 0 <= a[i]\n   requires forall i :: 0 < i < a.Length ==> a[i-1]-1 <= a[i]\n   ensures index < 0  ==> forall i :: 0 <= i < a.Length ==> a[i] != 0\n   ensures 0 <= index ==> index < a.Length && a[index] == 0\n// </vc-spec>\n// <vc-code>\n{\n   return Search(a, 0, a.Length);\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_804_IsProductEven.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_804_IsProductEven.dfy", "// <vc-preamble>\npredicate IsEven(n: int)\n{\n    n % 2 == 0\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod IsProductEven(a: array<int>) returns (result: bool)\n    ensures result <==> exists i :: 0 <= i < a.Length && IsEven(a[i])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Formal-Verification_tmp_tmpuyt21wjt_Dafny_strings1_haveCommonKSubstring.dfy", "root", true, "", "", false, "Formal-Verification_tmp_tmpuyt21wjt_Dafny_strings1_haveCommonKSubstring.dfy", "// <vc-preamble>\npredicate isNotPrefixPred(pre:string, str:string)\n{\n    (|pre| > |str|) || \n    pre != str[..|pre|]\n}\n\nmethod isPrefix(pre: string, str: string) returns (res:bool)\n    ensures !res <==> isNotPrefixPred(pre,str)\n    ensures  res <==> isPrefixPredicate(pre,str)\n{\n  assume{:axiom} false;\n}\n\npredicate isPrefixPredicate(pre: string, str:string)\n{\n  |str| >= |pre| && pre <= str\n}\n\npredicate isSubstringPredicate (sub: string, str:string)\n{\n  |str| >= |sub| && (exists i :: 0 <= i <= |str| && isPrefixPredicate(sub, str[i..]))\n}\n\nmethod isSubstring(sub: string, str: string) returns (res:bool)\nensures res == isSubstringPredicate(sub, str)\n{\n  assume{:axiom} false;\n}\n\npredicate haveCommonKSubstringPredicate(k: nat, str1: string, str2: string)\n{\n  |str1| >= k && |str2| >= k && (exists i :: 0 <= i <= |str1| - k && isSubstringPredicate((str1[i..])[..k], str2))\n}\n\npredicate maxCommonSubstringPredicate(str1: string, str2: string, len:nat)\n{\n   forall k :: len < k <= |str1| ==> !haveCommonKSubstringPredicate(k, str1, str2)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod haveCommonKSubstring(k: nat, str1: string, str2: string) returns (found: bool)\n  ensures |str1| < k || |str2| < k ==> !found\n  ensures haveCommonKSubstringPredicate(k,str1,str2) == found\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "predicate isNotPrefixPred(pre:string, str:string)\n{\n    (|pre| > |str|) || \n    pre != str[..|pre|]\n}\n\n\nmethod isPrefix(pre: string, str: string) returns (res:bool)\n    ensures !res <==> isNotPrefixPred(pre,str)\n    ensures  res <==> isPrefixPredicate(pre,str)\n{\n  assume{:axiom} false;\n}\n\n\n\npredicate isPrefixPredicate(pre: string, str:string)\n{\n  |str| >= |pre| && pre <= str\n}\n\n\npredicate isSubstringPredicate (sub: string, str:string)\n{\n  |str| >= |sub| && (exists i :: 0 <= i <= |str| && isPrefixPredicate(sub, str[i..]))\n}\n\nmethod isSubstring(sub: string, str: string) returns (res:bool)\nensures res == isSubstringPredicate(sub, str)\n{\n  assume{:axiom} false;\n}\n\npredicate haveCommonKSubstringPredicate(k: nat, str1: string, str2: string)\n{\n  |str1| >= k && |str2| >= k && (exists i :: 0 <= i <= |str1| - k && isSubstringPredicate((str1[i..])[..k], str2))\n}\n\npredicate maxCommonSubstringPredicate(str1: string, str2: string, len:nat)\n{\n   forall k :: len < k <= |str1| ==> !haveCommonKSubstringPredicate(k, str1, str2)\n}\n\n// <vc-helpers>\nfunction substringEqual(s1: string, start1: int, s2: string, start2: int, len: int): bool\n  requires 0 <= start1 <= |s1| - len\n  requires 0 <= start2 <= |s2| - len\n{\n  forall i :: 0 <= i < len ==> s1[start1+i] == s2[start2+i]\n}\n\nmethod substringEqualMethod(s1: string, start1: int, s2: string, start2: int, len: int) returns (eq: bool)\n  requires 0 <= start1 <= |s1| - len\n  requires 0 <= start2 <= |s2| - len\n  ensures eq == substringEqual(s1, start1, s2, start2, len)\n{\n  if len == 0 {\n    return true;\n  }\n  var i := 0;\n  while i < len\n    invariant 0 <= i <= len\n    invariant forall j :: 0 <= j < i ==> s1[start1+j] == s2[start2+j]\n  {\n    if s1[start1+i] != s2[start2+i] {\n      return false;\n    }\n    i := i + 1;\n  }\n  return true;\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod haveCommonKSubstring(k: nat, str1: string, str2: string) returns (found: bool)\n  ensures |str1| < k || |str2| < k ==> !found\n  ensures haveCommonKSubstringPredicate(k,str1,str2) == found\n// </vc-spec>\n// <vc-code>\n{\n  if k == 0 {\n    return true;\n  } else if |str1| < k || |str2| < k {\n    return false;\n  } else {\n    for i := 0 to |str1| - k + 1\n      invariant forall i0 :: 0 <= i0 < i ==> \n          forall j0 :: 0 <= j0 <= |str2| - k ==> !substringEqual(str1, i0, str2, j0, k)\n    {\n      for j := 0 to |str2| - k + 1\n        invariant forall j0 :: 0 <= j0 < j ==> !substringEqual(str1, i, str2, j0, k)\n      {\n        if substringEqual(str1, i, str2, j, k) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_751_IsMinHeap.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_751_IsMinHeap.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod IsMinHeap(a: array<int>) returns (result: bool)\n    requires a != null\n    ensures result ==> forall i :: 0 <= i < a.Length / 2 ==> a[i] <= a[2*i + 1] && (2*i + 2 == a.Length || a[i] <= a[2*i + 2])\n    ensures !result ==> exists i :: 0 <= i < a.Length / 2 && (a[i] > a[2*i + 1] || (2*i + 2 != a.Length && a[i] > a[2*i + 2]))\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_triple2_Triple.dfy", "root", true, "", "", false, "Clover_triple2_Triple.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Triple (x:int) returns (r:int)\n  ensures r==3*x\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod Triple (x:int) returns (r:int)\n  ensures r==3*x\n// </vc-spec>\n// <vc-code>\n{\n  r := 3 * x;\n}\n// </vc-code>\n\n", "", "", ""], ["Dafny_tmp_tmp0wu8wmfr_tests_SumIntsLoop_SumIntsLoop.dfy", "root", true, "", "", false, "Dafny_tmp_tmp0wu8wmfr_tests_SumIntsLoop_SumIntsLoop.dfy", "// <vc-preamble>\nfunction sumInts( n: int ): int\n    requires n >= 0;\n{\n    if n == 0 then\n        0\n    else\n        sumInts(n-1)+n\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SumIntsLoop( n: int ) returns ( s: int )\n    requires n >= 0;\n    ensures s == sumInts(n)\n    ensures s == n*(n+1)/2;\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "function sumInts( n: int ): int\n    requires n >= 0;\n{\n    if n == 0 then\n        0\n    else\n        sumInts(n-1)+n\n}\n\n// <vc-helpers>\nlemma SumIsClosedForm(i: int)\n    requires i >= 0\n    ensures sumInts(i) == i*(i+1)/2\n    decreases i\n{\n    if i == 0 {\n        calc {\n            sumInts(0);\n            0\n        };\n    } else {\n        SumIsClosedForm(i-1);\n        calc {\n            sumInts(i);\n            sumInts(i-1) + i;\n            (i-1)*i/2 + i;\n            (i-1)*i/2 + 2*i/2;\n            ((i-1)*i + 2*i) / 2;\n            (i*i - i + 2*i) / 2;\n            (i*i + i) / 2;\n            i*(i+1)/2;\n        };\n    }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod SumIntsLoop( n: int ) returns ( s: int )\n    requires n >= 0;\n    ensures s == sumInts(n)\n    ensures s == n*(n+1)/2;\n// </vc-spec>\n// <vc-code>\n{\n    var i := 0;\n    s := 0;\n    while i < n\n        invariant 0 <= i <= n\n        invariant s == sumInts(i)\n        invariant s == i*(i+1)/2\n    {\n        i := i + 1;\n        s := s + i;\n    }\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_401_IndexWiseAddition.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_401_IndexWiseAddition.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod IndexWiseAddition(a: seq<seq<int>>, b: seq<seq<int>>) returns (result: seq<seq<int>>)\n    requires |a| > 0 && |b| > 0\n    requires |a| == |b|\n    requires forall i :: 0 <= i < |a| ==> |a[i]| == |b[i]|\n    ensures |result| == |a|\n    ensures forall i :: 0 <= i < |result| ==> |result[i]| == |a[i]|\n    ensures forall i :: 0 <= i < |result| ==> forall j :: 0 <= j < |result[i]| ==> result[i][j] == a[i][j] + b[i][j]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny_tmp_tmp0wu8wmfr_tests_Search1000_Search2PowLoop.dfy", "root", true, "", "", false, "Dafny_tmp_tmp0wu8wmfr_tests_Search1000_Search2PowLoop.dfy", "// <vc-preamble>\npredicate Is2Pow( n: int )\n    decreases n;\n{\n    if n < 1 then\n        false\n    else if n == 1 then\n        true\n    else\n        n%2 == 0 && Is2Pow(n/2)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Search2PowLoop( a: array<int>, i: int, n: int, x: int ) returns ( k: int )\n    requires 0 <= i <= i+n <= a.Length;\n    requires forall p,q | i <= p < q < i+n :: a[p] <= a[q];\n    requires Is2Pow(n+1);\n    ensures i <= k <= i+n;\n    ensures forall r | i <= r < k :: a[r] < x;\n    ensures forall r | k <= r < i+n :: a[r] >= x;\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "// Author: Snorri Agnarsson, snorri@hi.is\n\n// Search1000 is a Dafny version of a function shown\n// by Jon Bentley in his old Programming Pearls\n// column in CACM.  Surprisingly Dafny needs no help\n// to verify the function.\n\n// Is2Pow(n) is true iff n==2^k for some k>=0.\npredicate Is2Pow( n: int )\n    decreases n;\n{\n    if n < 1 then\n        false\n    else if n == 1 then\n        true\n    else\n        n%2 == 0 && Is2Pow(n/2)\n}\n\n// This method is a binary search that only works for array\n// segments of size n == 2^k-1 for some k>=0.\n\n// <vc-helpers>\npredicate WellFormed(lo: int, hi: int) {\n    Is2Pow(hi - lo + 2)\n}\n\nlemma WellFormedMid(lo: int, hi: int)\n    requires WellFormed(lo, hi)\n    requires lo <= hi\n    ensures WellFormed(lo, (lo + hi) / 2)\n    ensures WellFormed((lo + hi) / 2 + 1, hi)\n{\n    var mid := (lo + hi) / 2;\n    calc {\n        hi - lo + 2;\n        { \n            assert hi - mid == mid - lo || hi - mid == mid - lo + 1;\n            hi - mid + mid - lo + 2;\n        }\n        (hi - mid) + (mid - lo + 1) + 1;\n        { \n            assert hi - mid + 1 == (mid - lo + 1) || hi - mid + 1 == (mid - lo + 1) + 1;\n        }\n    }\n    if (hi - mid) == (mid - lo) {\n        assert Is2Pow(hi - mid + 1);\n        assert Is2Pow(mid - lo + 2);\n    } else {\n        assert hi - mid + 1 == 2 * (mid - lo + 1);\n        assert Is2Pow((hi - mid + 1) / 2);\n        assert Is2Pow(mid - lo + 2);\n    }\n}\n\nlemma WellFormedStep(lo: int, hi: int, x: int, a: array<int>, mid: int)\n    requires WellFormed(lo, hi)\n    requires lo <= hi\n    requires mid == (lo + hi) / 2\n    ensures a[mid] < x ==> WellFormed(mid + 1, hi)\n    ensures a[mid] >= x ==> WellFormed(lo, mid - 1)\n{\n    WellFormedMid(lo, hi);\n}\n// </vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Search2PowLoop( a: array<int>, i: int, n: int, x: int ) returns ( k: int )\n    requires 0 <= i <= i+n <= a.Length;\n    requires forall p,q | i <= p < q < i+n :: a[p] <= a[q];\n    requires Is2Pow(n+1);\n    ensures i <= k <= i+n;\n    ensures forall r | i <= r < k :: a[r] < x;\n    ensures forall r | k <= r < i+n :: a[r] >= x;\n// </vc-spec>\n// <vc-code>\nvar lo := i;\nvar hi := i + n - 1;\nwhile lo <= hi\n    invariant i <= lo <= hi + 1\n    invariant WellFormed(lo, hi)\n    invariant forall r | i <= r < lo :: a[r] < x\n    invariant forall r | hi < r < i + n :: a[r] >= x\n{\n    var mid := (lo + hi) / 2;\n    if a[mid] < x {\n        WellFormedStep(lo, hi, x, a, mid);\n        lo := mid + 1;\n    } else {\n        WellFormedStep(lo, hi, x, a, mid);\n        hi := mid - 1;\n    }\n}\nk := lo;\n// </vc-code>\n// </vc-code>\n\n// This method is a binary search that only works for array\n// segments of size n == 2^k-1 for some k>=0.", "", "", ""], ["dafny_examples_tmp_tmp8qotd4ez_leetcode_0070-climbing-stairs_ClimbStairs.dfy", "root", false, "", "", false, "dafny_examples_tmp_tmp8qotd4ez_leetcode_0070-climbing-stairs_ClimbStairs.dfy", "// <vc-preamble>\nfunction Stairs(n: nat): nat {\n  if n <= 1 then 1 else Stairs(n - 2) + Stairs(n - 1)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ClimbStairs(n: nat) returns (r: nat)\n  ensures r == Stairs(n)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_143_CountArrays.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_143_CountArrays.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod CountArrays(arrays: seq<array<int>>) returns (count: int)\n    ensures count >= 0\n    ensures count == |arrays|\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["t1_MF_tmp_tmpi_sqie4j_exemplos_colecoes_sequences_ex3_Delete.dfy", "root", false, "", "", false, "t1_MF_tmp_tmpi_sqie4j_exemplos_colecoes_sequences_ex3_Delete.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Delete(line:array<char>, l:nat, at:nat, p:nat)\n  requires l <= line.Length\n  requires at+p <= l\n  modifies line\n  ensures line[..at] == old(line[..at])\n  ensures line[at..l-p] == old(line[at+p..l])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_414_AnyValueExists.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_414_AnyValueExists.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod AnyValueExists(seq1: seq<int>, seq2: seq<int>) returns (result: bool)\n    ensures result <==> (exists i :: 0 <= i < |seq1| && seq1[i] in seq2)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["BinarySearchTree_tmp_tmp_bn2twp5_bst4copy_insertRecursion.dfy", "root", true, "", "", false, "BinarySearchTree_tmp_tmp_bn2twp5_bst4copy_insertRecursion.dfy", "// <vc-preamble>\ndatatype Tree = Empty | Node(left: Tree, value: int, right: Tree)\n\npredicate BinarySearchTree(tree: Tree)\n  decreases tree\n{\n  match tree\n  case Empty => true\n  case Node(_,_,_) =>\n    (tree.left == Empty || tree.left.value < tree.value)\n    && (tree.right == Empty || tree.right.value > tree.value)\n    && BinarySearchTree(tree.left) && BinarySearchTree(tree.right)\n    && minValue(tree.right, tree.value) && maxValue(tree.left, tree.value)\n}\n\npredicate maxValue(tree: Tree, max: int)\n  decreases tree\n{\n  match tree\n  case Empty => true\n  case Node(left,v,right) => (max > v) && maxValue(left, max) && maxValue(right, max)\n}\n\npredicate minValue(tree: Tree, min: int)\n  decreases tree\n{\n  match tree\n  case Empty => true\n  case Node(left,v,right) => (min < v) && minValue(left, min) && minValue(right, min)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod insertRecursion(tree: Tree, value: int) returns (res: Tree)\n  requires BinarySearchTree(tree)\n  decreases tree;\n  ensures res != Empty ==> BinarySearchTree(res)\n  ensures forall x :: minValue(tree, x) && x < value ==> minValue(res, x)\n  ensures forall x :: maxValue(tree, x) && x > value ==> maxValue(res, x)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "datatype Tree = Empty | Node(left: Tree, value: int, right: Tree)\n\npredicate BinarySearchTree(tree: Tree)\n  decreases tree\n{\n  match tree\n  case Empty => true\n  case Node(_,_,_) =>\n    (tree.left == Empty || tree.left.value < tree.value)\n    && (tree.right == Empty || tree.right.value > tree.value)\n    && BinarySearchTree(tree.left) && BinarySearchTree(tree.right)\n    && minValue(tree.right, tree.value) && maxValue(tree.left, tree.value)\n}\n\npredicate maxValue(tree: Tree, max: int)\n  decreases tree\n{\n  match tree\n  case Empty => true\n  case Node(left,v,right) => (max > v) && maxValue(left, max) && maxValue(right, max)\n}\n\npredicate minValue(tree: Tree, min: int)\n  decreases tree\n{\n  match tree\n  case Empty => true\n  case Node(left,v,right) => (min < v) && minValue(left, min) && minValue(right, min)\n}\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod insertRecursion(tree: Tree, value: int) returns (res: Tree)\n  requires BinarySearchTree(tree)\n  decreases tree;\n  ensures res != Empty ==> BinarySearchTree(res)\n  ensures forall x :: minValue(tree, x) && x < value ==> minValue(res, x)\n  ensures forall x :: maxValue(tree, x) && x > value ==> maxValue(res, x)\n// </vc-spec>\n// <vc-code>\n{\n  if tree == Empty {\n    return Node(Empty, value, Empty);\n  } else if value < tree.value {\n    var newLeft := insertRecursion(tree.left, value);\n    return Node(newLeft, tree.value, tree.right);\n  } else if value > tree.value {\n    var newRight := insertRecursion(tree.right, value);\n    return Node(tree.left, tree.value, newRight);\n  } else {\n    return tree;\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["VerifiedMergeSortDafny_tmp_tmpva7qms1b_MergeSort_merge.dfy", "root", false, "", "", false, "VerifiedMergeSortDafny_tmp_tmpva7qms1b_MergeSort_merge.dfy", "// <vc-preamble>\npredicate merged(a1: seq<int>, a2: seq<int>, b: array<int>, start: int, end: int)\n  reads b\n  requires end - start  == |a2| + |a1|\n  requires 0 <= start <= end <= b.Length\n{\n  multiset(a1) + multiset(a2) == multiset(b[start..end])\n}\n\npredicate sorted_slice(a: array<int>, start: int, end: int)\n  requires 0 <= start <= end <= a.Length\n  reads a\n{\n  forall i, j :: start <= i <= j < end ==> a[i] <= a[j]\n}\n\npredicate sorted_seq(a: seq<int>)\n{\n  forall i, j :: 0 <= i <= j < |a| ==> a[i] <= a[j]\n}\n\npredicate sorted(a: array<int>)\n  reads a\n{\n  forall i, j :: 0 <= i < j < a.Length ==> a[i] <= a[j]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod merge(a1: seq<int>, a2: seq<int>, start: int, end: int, b: array<int>)\n  modifies b\n  requires sorted_seq(a1)\n  requires sorted_seq(a2)\n  requires end - start == |a1| + |a2|\n  requires 0 <= start < end < |a1| && end <= |a2| < b.Length\n  requires end < |a1| && end < |a2|\n  ensures sorted_slice(b, start, end)\n  requires b.Length == |a2| + |a1|\n  ensures merged(a1, a2, b, start, end)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_807_FindFirstOdd.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_807_FindFirstOdd.dfy", "// <vc-preamble>\npredicate IsOdd(x: int)\n{\n    x % 2 != 0\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod FindFirstOdd(a: array<int>) returns (found: bool, index: int)\n    requires a != null\n    ensures !found ==> forall i :: 0 <= i < a.Length ==> !IsOdd(a[i])\n    ensures found ==> 0 <= index < a.Length && IsOdd(a[index]) && forall i :: 0 <= i < index ==> !IsOdd(a[i])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["cmsc433_tmp_tmpe3ob3a0o_dafny_project1_p1-assignment-2_IntDiv.dfy", "root", false, "", "", false, "cmsc433_tmp_tmpe3ob3a0o_dafny_project1_p1-assignment-2_IntDiv.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod IntDiv (m : int, n : int) returns (d : int, r : int)\n    requires n > 0\n    ensures m == n * d + r && 0 <= r < n\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Formal-Verification-Project_tmp_tmp9gmwsmyp_strings3_isSubstring.dfy", "root", true, "", "", false, "Formal-Verification-Project_tmp_tmp9gmwsmyp_strings3_isSubstring.dfy", "// <vc-preamble>\npredicate isPrefixPred(pre:string, str:string)\n{\n    (|pre| <= |str|) && \n    pre == str[..|pre|]\n}\n\npredicate isNotPrefixPred(pre:string, str:string)\n{\n    (|pre| > |str|) || \n    pre != str[..|pre|]\n}\n\nmethod isPrefix(pre: string, str: string) returns (res:bool)\n    ensures !res <==> isNotPrefixPred(pre,str)\n    ensures  res <==> isPrefixPred(pre,str)\n{\n  assume{:axiom} false;\n}\npredicate isSubstringPred(sub:string, str:string)\n{\n    (exists i :: 0 <= i <= |str| &&  isPrefixPred(sub, str[i..]))\n}\n\npredicate isNotSubstringPred(sub:string, str:string)\n{\n    (forall i :: 0 <= i <= |str| ==> isNotPrefixPred(sub,str[i..]))\n}\n\npredicate haveCommonKSubstringPred(k:nat, str1:string, str2:string)\n{\n    exists i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k && isSubstringPred(str1[i1..j1],str2)\n}\n\npredicate haveNotCommonKSubstringPred(k:nat, str1:string, str2:string)\n{\n    forall i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k ==>  isNotSubstringPred(str1[i1..j1],str2)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod isSubstring(sub: string, str: string) returns (res:bool)\n    ensures  res <==> isSubstringPred(sub, str)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "predicate isPrefixPred(pre:string, str:string)\n{\n    (|pre| <= |str|) && \n    pre == str[..|pre|]\n}\n\npredicate isNotPrefixPred(pre:string, str:string)\n{\n    (|pre| > |str|) || \n    pre != str[..|pre|]\n}\n\nmethod isPrefix(pre: string, str: string) returns (res:bool)\n    ensures !res <==> isNotPrefixPred(pre,str)\n    ensures  res <==> isPrefixPred(pre,str)\n{\n  assume{:axiom} false;\n}\npredicate isSubstringPred(sub:string, str:string)\n{\n    (exists i :: 0 <= i <= |str| &&  isPrefixPred(sub, str[i..]))\n}\n\npredicate isNotSubstringPred(sub:string, str:string)\n{\n    (forall i :: 0 <= i <= |str| ==> isNotPrefixPred(sub,str[i..]))\n}\n\npredicate haveCommonKSubstringPred(k:nat, str1:string, str2:string)\n{\n    exists i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k && isSubstringPred(str1[i1..j1],str2)\n}\n\npredicate haveNotCommonKSubstringPred(k:nat, str1:string, str2:string)\n{\n    forall i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k ==>  isNotSubstringPred(str1[i1..j1],str2)\n}\n\n// <vc-helpers>\nlemma isPrefixIff(pre: string, str: string)\n    ensures isPrefixPred(pre, str) <==> !isNotPrefixPred(pre, str)\n{\n    calc {\n        isPrefixPred(pre, str) <==>\n        (|pre| <= |str|) && pre == str[..|pre|] <==>\n        !((|pre| > |str|) || pre != str[..|pre|]) <==>\n        !isNotPrefixPred(pre, str);\n    }\n}\n\nlemma isSubstringIff(sub: string, str: string)\n    ensures isSubstringPred(sub, str) <==> !isNotSubstringPred(sub, str)\n{\n    calc {\n        isSubstringPred(sub, str) <==>\n        exists i :: 0 <= i <= |str| && isPrefixPred(sub, str[i..]) <==>\n        exists i :: 0 <= i <= |str| && !isNotPrefixPred(sub, str[i..]) <==>\n        !(forall i :: 0 <= i <= |str| ==> isNotPrefixPred(sub, str[i..])) <==>\n        !isNotSubstringPred(sub, str);\n    }\n}\n\nlemma DecomposeSubstring(sub: string, str: string)\n    requires |str| > 0\n    ensures isSubstringPred(sub, str) <==> (isPrefixPred(sub, str) || isSubstringPred(sub, str[1..]))\n{\n    if isSubstringPred(sub, str) {\n        var i :| 0 <= i <= |str| && isPrefixPred(sub, str[i..]);\n        if i == 0 {\n            assert isPrefixPred(sub, str);\n        } else {\n            assert i >= 1;\n            assert i <= |str|;\n            assert |str[1..]| == |str| - 1;\n            assert 0 <= i-1 <= |str[1..]|;\n            assert str[1..][i-1..] == str[i..];\n            assert isPrefixPred(sub, str[1..][i-1..]);\n            assert isSubstringPred(sub, str[1..]);\n        }\n    }\n    if isPrefixPred(sub, str) {\n        assert isPrefixPred(sub, str[0..]);\n        assert 0<=0<=|str|;\n        assert isSubstringPred(sub, str);\n    }\n    if isSubstringPred(sub, str[1..]) {\n        var j :| 0 <= j <= |str[1..]| && isPrefixPred(sub, str[1..][j..]);\n        assert 0 <= j <= |str[1..]|;\n        assert |str[1..]| == |str| - 1;\n        assert j+1 >= 1;\n        assert j+1 <= |str|;\n        assert str[j+1..] == str[1..][j..];\n        assert isPrefixPred(sub, str[j+1..]);\n        assert isSubstringPred(sub, str);\n    }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod isSubstring(sub: string, str: string) returns (res:bool)\n    ensures  res <==> isSubstringPred(sub, str)\n    //ensures !res <==> isNotSubstringPred(sub, str) // This postcondition follows from the above lemma.\n// </vc-spec>\n// <vc-code>\n{\n    if |sub| == 0 {\n        assert isPrefixPred(\"\", str[0..]);\n        assert 0<=0<=|str|;\n        assert isSubstringPred(\"\", str);\n        return true;\n    }\n    if |str| == 0 {\n        assert |sub| > 0;\n        assert forall i: int :: 0<=i<=0 ==> isNotPrefixPred(sub, \"\"[i..]) by {\n            forall i: int | 0<=i<=0 ensures isNotPrefixPred(sub, \"\"[i..]) {\n                assert i==0;\n                assert \"\"[i..] == \"\";\n                assert |sub| > 0;\n                assert |sub| > |\"\"|;\n                assert isNotPrefixPred(sub, \"\");\n            }\n        }\n        assert isNotSubstringPred(sub, \"\");\n        assert !isSubstringPred(sub, \"\");\n        return false;\n    }\n    DecomposeSubstring(sub, str);\n    if isPrefixPred(sub, str) {\n        assert isPrefixPred(sub, str[0..]);\n        assert 0<=0<=|str|;\n        assert isSubstringPred(sub, str);\n        return true;\n    } else {\n        var rec := isSubstring(sub, str[1..]);\n        assert isSubstringPred(sub, str) <==> isSubstringPred(sub, str[1..]);\n        assert rec <==> isSubstringPred(sub, str[1..]);\n        assert rec <==> isSubstringPred(sub, str);\n        return rec;\n    }\n}\n// </vc-code>\n\n", "", "", ""], ["Prog-Fun-Solutions_tmp_tmp7_gmnz5f_extra_mod2_mod2.dfy", "root", true, "", "", false, "Prog-Fun-Solutions_tmp_tmp7_gmnz5f_extra_mod2_mod2.dfy", "// <vc-preamble>\nghost function f2(n: nat): nat {\n    if n == 0 then 0\n    else 5*f2(n/3) + n%4\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod mod2(n:nat) returns (a:nat) \nensures a == f2(n)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "ghost function f2(n: nat): nat {\n    if n == 0 then 0\n    else 5*f2(n/3) + n%4\n}\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod mod2(n:nat) returns (a:nat) \nensures a == f2(n)\n// </vc-spec>\n// <vc-code>\n{\n  var current := n;\n  var power := 1;\n  var result := 0;\n  \n  while current != 0\n    decreases current\n    invariant result + power * f2(current) == f2(n)\n  {\n    var digit := current % 4;\n    result := result + digit * power;\n    power := power * 5;\n    current := current / 3;\n  }\n  \n  a := result;\n}\n// </vc-code>\n\n", "", "", ""], ["cs245-verification_tmp_tmp0h_nxhqp_quicksort-partition_QuicksortPartition.dfy", "root", false, "", "", false, "cs245-verification_tmp_tmp0h_nxhqp_quicksort-partition_QuicksortPartition.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod QuicksortPartition(X: array<int>, n: int, p: int) returns (a: int, b: int)\nmodifies X;\n  requires X.Length>=1 && n == X.Length;\n  ensures b>=n;\n  ensures forall x:: 0<=x<a<n ==> X[x] <= p;\n  ensures forall x:: a==n || (0<=a<=x<n ==> X[x] > p);\n  ensures multiset(X[..])==multiset(old(X[..]))\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_cal_sum_Sum.dfy", "root", true, "", "", false, "Clover_cal_sum_Sum.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Sum(N:int) returns (s:int)\n  requires N >= 0\n  ensures s == N * (N + 1) / 2\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod Sum(N:int) returns (s:int)\n  requires N >= 0\n  ensures s == N * (N + 1) / 2\n// </vc-spec>\n// <vc-code>\n{\n  var i := 0;\n  var sum := 0;\n  while i < N\n    invariant 0 <= i <= N\n    invariant sum == i * (i + 1) / 2\n  {\n    i := i + 1;\n    sum := sum + i;\n  }\n  s := sum;\n}\n// </vc-code>\n\n", "", "", ""], ["formal-verification_tmp_tmpoepcssay_strings3_maxCommonSubstringLength.dfy", "root", false, "", "", false, "formal-verification_tmp_tmpoepcssay_strings3_maxCommonSubstringLength.dfy", "// <vc-preamble>\npredicate isSubstring(sub: string, str: string)\n{\n    exists i :: 0 <= i <= |str| - |sub| && str[i..i+|sub|] == sub\n}\n\npredicate isPrefixPred(pre:string, str:string)\n{\n    (|pre| <= |str|) && \n    pre == str[..|pre|]\n}\n\npredicate isNotPrefixPred(pre:string, str:string)\n{\n    (|pre| > |str|) || \n    pre != str[..|pre|]\n}\n\npredicate isSubstringPred(sub:string, str:string)\n{\n    (exists i :: 0 <= i <= |str| &&  isPrefixPred(sub, str[i..]))\n}\n\npredicate isNotSubstringPred(sub:string, str:string)\n{\n    (forall i :: 0 <= i <= |str| ==> isNotPrefixPred(sub,str[i..]))\n}\n\npredicate haveCommonKSubstringPred(k:nat, str1:string, str2:string)\n{\n    exists i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k && isSubstringPred(str1[i1..j1],str2)\n}\n\npredicate haveNotCommonKSubstringPred(k:nat, str1:string, str2:string)\n{\n    forall i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k ==>  isNotSubstringPred(str1[i1..j1],str2)\n}\n\nmethod haveCommonKSubstring(k: nat, str1: string, str2: string) returns (found: bool)\n    ensures found  <==>  haveCommonKSubstringPred(k,str1,str2)\n    ensures !found <==> haveNotCommonKSubstringPred(k,str1,str2)\n{\n  assume{:axiom} false;\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod maxCommonSubstringLength(str1: string, str2: string) returns (len:nat)\n    requires (|str1| <= |str2|)\n    ensures (forall k :: len < k <= |str1| ==> !haveCommonKSubstringPred(k,str1,str2))\n    ensures haveCommonKSubstringPred(len,str1,str2)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_avg_ComputeAvg.dfy", "root", true, "", "", false, "Clover_avg_ComputeAvg.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ComputeAvg(a: int, b: int) returns (avg:int)\n  ensures avg == (a+b)/2\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod ComputeAvg(a: int, b: int) returns (avg:int)\n  ensures avg == (a+b)/2\n// </vc-spec>\n// <vc-code>\n{\n  return (a+b)/2;\n}\n// </vc-code>\n\n", "", "", ""], ["Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_mathematical_objects_verification_examples_fast_exp_FastExp.dfy", "root", false, "", "", false, "Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_mathematical_objects_verification_examples_fast_exp_FastExp.dfy", "// <vc-preamble>\nfunction sum(s: seq<int>, i: nat): int\n    requires i <= |s|\n{\n    if i == 0 then 0 else sum(s, i-1) + s[i-1]\n}\n\nfunction exp(b: nat, n: nat): nat {\n  if n == 0 then 1\n  else b * exp(b, n-1)\n}\n\nfunction bits(n: nat): seq<bool>\n  decreases n\n{\n  if n == 0 then []\n  else [if (n % 2 == 0) then false else true] + bits(n/2)\n}\n\nfunction from_bits(s: seq<bool>): nat {\n  if s == [] then 0\n  else (if s[0] then 1 else 0) + 2 * from_bits(s[1..])\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod FastExp(b: nat, n: nat) returns (r: nat)\n  ensures r == exp(b, n)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny-Exercises_tmp_tmpjm75muf__Session7Exercises_ExerciseBubbleSort_bubbleSorta.dfy", "root", true, "", "", false, "Dafny-Exercises_tmp_tmpjm75muf__Session7Exercises_ExerciseBubbleSort_bubbleSorta.dfy", "// <vc-preamble>\npredicate sorted_seg(a:array<int>, i:int, j:int)\nrequires 0 <= i <= j <= a.Length\nreads a\n{\n    forall l, k :: i <= l <= k < j ==> a[l] <= a[k]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod bubbleSorta(a:array<int>, c:int, f:int)\nmodifies a \nrequires 0 <= c <= f <= a.Length\nensures sorted_seg(a,c,f) \nensures multiset(a[c..f]) == old(multiset(a[c..f]))\nensures a[..c]==old(a[..c]) && a[f..]==old(a[f..])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "predicate sorted_seg(a:array<int>, i:int, j:int) //j excluded\nrequires 0 <= i <= j <= a.Length\nreads a\n{\n    forall l, k :: i <= l <= k < j ==> a[l] <= a[k]\n}\n\n// <vc-helpers>\nmethod swap_multiset<T>(a:array<T>, i:int, j:int)\nrequires 0 <= i < a.Length && 0 <= j < a.Length\nmodifies a\nensures multiset(a[..]) == old(multiset(a[..]))\nensures a[i] == old(a[j]) && a[j] == old(a[i])\nensures forall k :: 0 <= k < a.Length && k != i && k != j ==> a[k] == old(a[k])\n{\n    var temp := a[i];\n    a[i] := a[j];\n    a[j] := temp;\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod bubbleSorta(a:array<int>, c:int, f:int)//f excluded\nmodifies a \nrequires 0 <= c <= f <= a.Length //when c==f empty sequence\nensures sorted_seg(a,c,f) \nensures multiset(a[c..f]) == old(multiset(a[c..f]))\nensures a[..c]==old(a[..c]) && a[f..]==old(a[f..])\n// </vc-spec>\n// <vc-code>\n{\n    if c < f {\n        var lastSwap := c;\n        var i := c;\n        while i < f - 1\n        invariant c <= i < f\n        invariant sorted_seg(a, lastSwap, i+1)\n        invariant forall k :: c <= k < lastSwap ==> a[k] <= a[lastSwap]\n        invariant multiset(a[c..f]) == old(multiset(a[c..f]))\n        invariant a[..c]==old(a[..c]) && a[f..]==old(a[f..])\n        {\n            if a[i] > a[i+1] {\n                swap_multiset(a, i, i+1);\n                lastSwap := i+1;\n            }\n            i := i + 1;\n        }\n        bubbleSorta(a, c, lastSwap);\n    }\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_623_PowerOfListElements.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_623_PowerOfListElements.dfy", "// <vc-preamble>\nfunction Power(base: int, exponent: int): int\n    requires exponent >= 0\n{\n    if exponent == 0 then 1\n    else base * Power(base, exponent-1)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod PowerOfListElements(l: seq<int>, n: int) returns (result: seq<int>)\n    requires n >= 0\n    ensures |result| == |l|\n    ensures forall i :: 0 <= i < |l| ==> result[i] == Power(l[i], n)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_573_UniqueProduct.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_573_UniqueProduct.dfy", "// <vc-preamble>\nghost function SetProduct(s : set<int>) : int\n{\n    if s == {} then 1\n    else var x :| x in s; \n         x * SetProduct(s - {x})\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod UniqueProduct (arr: array<int>) returns (product: int)\n   ensures product == SetProduct((set i | 0 <= i < arr.Length :: arr[i]))\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["assertive-programming-assignment-1_tmp_tmp3h_cj44u_SearchAddends_FindAddends.dfy", "root", false, "", "", false, "assertive-programming-assignment-1_tmp_tmp3h_cj44u_SearchAddends_FindAddends.dfy", "// <vc-preamble>\npredicate Sorted(q: seq<int>)\n{\n    forall i,j :: 0 <= i <= j < |q| ==> q[i] <= q[j] \n}\n\npredicate HasAddends(q: seq<int>, x: int)\n{\n    exists i,j :: 0 <= i < j < |q| && q[i] + q[j] == x\n}\n\npredicate IsValidIndex<T>(q: seq<T>, i: nat)\n{\n    0 <= i < |q|\n}\n\npredicate AreOreredIndices<T>(q: seq<T>, i: nat, j: nat)\n{\n    0 <= i < j < |q|\n}\n\npredicate AreAddendsIndices(q: seq<int>, x: int, i: nat, j: nat)\n    requires IsValidIndex(q, i) && IsValidIndex(q, j)\n{\n    q[i] + q[j] == x\n}\n\npredicate HasAddendsInIndicesRange(q: seq<int>, x: int, i: nat, j: nat)\n    requires AreOreredIndices(q, i, j)\n{\n    HasAddends(q[i..(j + 1)], x)\n}\n\npredicate LoopInv(q: seq<int>, x: int, i: nat, j: nat, sum: int)\n{\n    AreOreredIndices(q, i, j) &&\n    HasAddendsInIndicesRange(q, x, i, j) &&\n    AreAddendsIndices(q, sum, i, j)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod FindAddends(q: seq<int>, x: int) returns (i: nat, j: nat)\n    requires Sorted(q) && HasAddends(q, x)\n    ensures i < j < |q| && q[i]+q[j] == x\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["CVS-Projto1_tmp_tmpb1o0bu8z_proj1_proj1_query.dfy", "root", true, "", "", false, "CVS-Projto1_tmp_tmpb1o0bu8z_proj1_proj1_query.dfy", "// <vc-preamble>\nfunction sum (a:array<int>, i:int, j:int) :int\ndecreases j\nreads a\nrequires 0 <= i <= j <= a.Length\n{\n    if i == j then\n        0\n    else\n        a[j-1] + sum(a, i, j-1)\n}\n\npredicate is_prefix_sum_for (a:array<int>, c:array<int>)\nreads c, a\n{\n    a.Length + 1 == c.Length\n    && c[0] == 0\n    && forall j :: 1 <= j <= a.Length ==> c[j] == sum(a,0,j)\n}\n\ndatatype List<T> = Nil | Cons(head: T, tail: List<T>)\n\nmethod from_array<T>(a: array<T>) returns (l: List<T>)\nrequires a.Length > 0\nensures forall j::0 <= j < a.Length ==> mem(a[j],l)\n{\n  assume{:axiom} false;\n}\n\nfunction mem<T(==)> (x: T, l:List<T>) : bool\ndecreases l\n{\n    match l\n    case Nil => false\n    case Cons(y,r)=> if (x==y) then true else mem(x,r)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod query (a:array<int>, i:int, j:int) returns (s:int)\nrequires 0 <= i <= j <= a.Length\nensures s == sum(a, i, j)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "//Exercicio 1.a)\nfunction sum (a:array<int>, i:int, j:int) :int\ndecreases j\nreads a\nrequires 0 <= i <= j <= a.Length\n{\n    if i == j then\n        0\n    else\n        a[j-1] + sum(a, i, j-1)\n}\n\n//Exercicio 1.b)\n\n//Exercicio 1.c)\n\n\npredicate is_prefix_sum_for (a:array<int>, c:array<int>)\nreads c, a\n{\n    a.Length + 1 == c.Length\n    && c[0] == 0\n    && forall j :: 1 <= j <= a.Length ==> c[j] == sum(a,0,j)\n}\n\n///Exercicio 2.\ndatatype List<T> = Nil | Cons(head: T, tail: List<T>)\n\nmethod from_array<T>(a: array<T>) returns (l: List<T>)\nrequires a.Length > 0\nensures forall j::0 <= j < a.Length ==> mem(a[j],l)\n{\n  assume{:axiom} false;\n}\n\nfunction mem<T(==)> (x: T, l:List<T>) : bool\ndecreases l\n{\n    match l\n    case Nil => false\n    case Cons(y,r)=> if (x==y) then true else mem(x,r)\n}\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod query (a:array<int>, i:int, j:int) returns (s:int)\nrequires 0 <= i <= j <= a.Length\nensures s == sum(a, i, j)\n// </vc-spec>\n// <vc-code>\n{\n    var k := i;\n    s := 0;\n    while k < j\n        decreases j - k\n        invariant 0 <= i <= k <= j <= a.Length\n        invariant s == sum(a, i, k)\n    {\n        s := s + a[k];\n        k := k + 1;\n    }\n    return s;\n}\n// </vc-code>\n\n", "", "", ""], ["Clover_double_quadruple_DoubleQuadruple.dfy", "root", true, "", "", false, "Clover_double_quadruple_DoubleQuadruple.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod DoubleQuadruple(x: int) returns (a: int, b: int)\n  ensures a == 2 * x && b == 4 * x\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod DoubleQuadruple(x: int) returns (a: int, b: int)\n  ensures a == 2 * x && b == 4 * x\n// </vc-spec>\n// <vc-code>\n{\n  a := 2 * x;\n  b := 4 * x;\n}\n// </vc-code>\n\n", "", "", ""], ["Dafny_tmp_tmp0wu8wmfr_tests_F1a_Mid.dfy", "root", true, "", "", false, "Dafny_tmp_tmp0wu8wmfr_tests_F1a_Mid.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Mid( p: int, q: int) returns ( m: int )\n\n    requires p <= q;\n    ensures p<= m <= q;\n    ensures m-p <= q-m;\n    ensures 0 <= (q-m)-(m-p) <= 1;\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod Mid( p: int, q: int) returns ( m: int )\n    // | ... | ??? | ... |\n    //        p m   q\n    requires p <= q;\n    ensures p<= m <= q;\n    ensures m-p <= q-m;\n    ensures 0 <= (q-m)-(m-p) <= 1;\n// </vc-spec>\n// <vc-code>\nm := p + (q - p) / 2;\n// </vc-code>\n\n", "", "", ""], ["Dafny-Exercises_tmp_tmpjm75muf__Session4Exercises_ExerciseAllEqual_mallEqual1.dfy", "root", true, "", "", false, "Dafny-Exercises_tmp_tmpjm75muf__Session4Exercises_ExerciseAllEqual_mallEqual1.dfy", "// <vc-preamble>\npredicate allEqual(s:seq<int>)\n{forall i,j::0<=i<|s| && 0<=j<|s| ==> s[i]==s[j] }\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod mallEqual1(v:array<int>) returns (b:bool)\nensures b==allEqual(v[0..v.Length])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "predicate allEqual(s:seq<int>)\n{forall i,j::0<=i<|s| && 0<=j<|s| ==> s[i]==s[j] }\n//{forall i,j::0<=i<=j<|s| ==> s[i]==s[j] }\n//{forall i::0<i<|s| ==> s[i-1]==s[i]} \n//{forall i::0<=i<|s|-1 ==> s[i]==s[i+1]}\n\n\n//Ordered indexes\n\n//All equal to first\n\n// <vc-helpers>\nlemma allEqualEquivalent(s:seq<int>)\n  ensures allEqual(s) <==> (forall i :: 0<=i<|s|-1 ==> s[i]==s[i+1])\n{\n  if allEqual(s) {\n    forall i | 0 <= i < |s|-1\n      ensures s[i] == s[i+1]\n    {\n      assert s[i] == s[i+1];\n    }\n  }\n  if (forall i :: 0<=i<|s|-1 ==> s[i]==s[i+1]) {\n    assert allEqual(s) by {\n      forall i,j | 0 <= i < |s| && 0 <= j < |s|\n        ensures s[i] == s[j]\n      {\n        if i == j {\n          // trivial\n        } else if i < j {\n          var k := i;\n          while k < j\n            invariant 0 <= i <= k <= j < |s| && s[i] == s[k]\n          {\n            assert s[k] == s[k+1];\n            k := k + 1;\n          }\n        } else {\n          var k := j;\n          while k < i\n            invariant 0 <= j <= k <= i < |s| && s[j] == s[k]\n          {\n            assert s[k] == s[k+1];\n            k := k + 1;\n          }\n        }\n      }\n    }\n  }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod mallEqual1(v:array<int>) returns (b:bool)\nensures b==allEqual(v[0..v.Length])\n// </vc-spec>\n// <vc-code>\n{\n  if v.Length == 0 {\n    return true;\n  }\n  var i := 0;\n  while i < v.Length - 1\n  invariant 0 <= i < v.Length\n  invariant forall k :: 0 <= k <= i ==> v[k] == v[0]\n  {\n    if v[i] != v[i+1] {\n      return false;\n    }\n    i := i + 1;\n  }\n  return true;\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_591_SwapFirstAndLast.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_591_SwapFirstAndLast.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SwapFirstAndLast(a: array<int>)\n    requires a != null && a.Length > 0\n    modifies a\n    ensures a[0] == old(a[a.Length - 1]) && a[a.Length - 1] == old(a[0])\n    ensures forall k :: 1 <= k < a.Length - 1 ==> a[k] == old(a[k])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_advanced_examples_MatrixMultiplication_multiply.dfy", "root", false, "", "", false, "Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_advanced_examples_MatrixMultiplication_multiply.dfy", "// <vc-preamble>\nfunction RowColumnProduct(m1: array2<int>, m2: array2<int>, row: nat, column: nat): int\n    reads m1\n    reads m2\n    requires m1 != null && m2 != null && m1.Length1 == m2.Length0\n    requires row < m1.Length0 && column < m2.Length1\n{\n    RowColumnProductFrom(m1, m2, row, column, 0)\n}\n\nfunction RowColumnProductFrom(m1: array2<int>, m2: array2<int>, row: nat, column: nat, k: nat): int\n    reads m1\n    reads m2\n    requires m1 != null && m2 != null && k <= m1.Length1 == m2.Length0\n    requires row < m1.Length0 && column < m2.Length1\n    decreases m1.Length1 - k\n{\n    if k == m1.Length1 then\n        0\n    else\n        m1[row,k]*m2[k,column] + RowColumnProductFrom(m1, m2, row, column, k+1)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod multiply(m1: array2<int>, m2: array2<int>) returns (m3: array2<int>)\n    requires m1 != null && m2 != null\n    requires m1.Length1 == m2.Length0\n    ensures m3 != null && m3.Length0 == m1.Length0 && m3.Length1 == m2.Length1\n    ensures forall i, j | 0 <= i < m3.Length0 && 0 <= j < m3.Length1 ::\n        m3[i, j] == RowColumnProduct(m1, m2, i, j)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny_tmp_tmp0wu8wmfr_Heimaverkefni_3_InsertionSortMultiset_Sort.dfy", "root", false, "", "", false, "Dafny_tmp_tmp0wu8wmfr_Heimaverkefni_3_InsertionSortMultiset_Sort.dfy", "// <vc-preamble>\nmethod Search( s: seq<int>, x: int ) returns ( k: int )\n\n    requires forall p,q | 0 <= p < q < |s| :: s[p] <= s[q];\n    ensures 0 <= k <= |s|;\n    ensures forall i | 0 <= i < k :: s[i] <= x;\n    ensures forall i | k <= i < |s| :: s[i] >= x;\n    ensures forall z | z in s[..k] :: z <= x;\n    ensures forall z | z in s[k..] :: z >= x;\n    ensures s == s[..k]+s[k..];\n{\n  assume{:axiom} false;\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Sort( m: multiset<int> ) returns ( r: seq<int> )\n    ensures multiset(r) == m;\n    ensures forall p,q | 0 <= p < q < |r| :: r[p] <= r[q];\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_460_GetFirstElements.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_460_GetFirstElements.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod GetFirstElements(lst: seq<seq<int>>) returns (result: seq<int>)\n    requires forall i :: 0 <= i < |lst| ==> |lst[i]| > 0\n    ensures |result| == |lst|\n    ensures forall i :: 0 <= i < |result| ==> result[i] == lst[i][0]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["formal-methods-in-software-engineering_tmp_tmpe7fjnek6_Labs4_gr2_SqrSum1.dfy", "root", false, "", "", false, "formal-methods-in-software-engineering_tmp_tmpe7fjnek6_Labs4_gr2_SqrSum1.dfy", "// <vc-preamble>\nfunction SqrSumRec(n: int) : int\n    requires n >= 0\n{\n    if (n == 0) then 0 else n*n + SqrSumRec(n-1)\n}\n\nleast lemma L1(n: int)\n    requires n >= 0\n    ensures SqrSumRec(n) == n*(n+1)*(2*n + 1)/6\n{\n\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SqrSum1(n: int) returns (s: int)\n    requires n >= 0\n    ensures s == SqrSumRec(n)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Final-Project-Dafny_tmp_tmpmcywuqox_Attempts_Selection_Sort_Standard_selectionSorted.dfy", "root", true, "", "", false, "Final-Project-Dafny_tmp_tmpmcywuqox_Attempts_Selection_Sort_Standard_selectionSorted.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod selectionSorted(Array: array<int>) \n  modifies Array\n  ensures multiset(old(Array[..])) == multiset(Array[..])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod selectionSorted(Array: array<int>) \n  modifies Array\n  ensures multiset(old(Array[..])) == multiset(Array[..])\n// </vc-spec>\n// <vc-code>\n{\n  var n := Array.Length;\n  for i := 0 to n\n    invariant multiset(Array[..]) == multiset(old(Array[..]))\n  {\n    var minIndex := i;\n    for j := i+1 to n\n      invariant i <= minIndex < n\n    {\n      if Array[j] < Array[minIndex] {\n        minIndex := j;\n      }\n    }\n    var temp := Array[i];\n    Array[i] := Array[minIndex];\n    Array[minIndex] := temp;\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-language-server_tmp_tmpkir0kenl_Test_dafny2_SegmentSum_MaxSegSum.dfy", "root", false, "", "", false, "dafny-language-server_tmp_tmpkir0kenl_Test_dafny2_SegmentSum_MaxSegSum.dfy", "// <vc-preamble>\nfunction Sum(a: seq<int>, s: int, t: int): int\n  requires 0 <= s <= t <= |a|\n{\n  if s == t then 0 else Sum(a, s, t-1) + a[t-1]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod MaxSegSum(a: seq<int>) returns (k: int, m: int)\n  ensures 0 <= k <= m <= |a|\n  ensures forall p,q :: 0 <= p <= q <= |a| ==> Sum(a, p, q) <= Sum(a, k, m)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_integer_square_root_SquareRoot.dfy", "root", true, "", "", false, "Clover_integer_square_root_SquareRoot.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SquareRoot(N:nat) returns (r:nat)\n  ensures r*r <= N < (r+1)*(r+1)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod SquareRoot(N:nat) returns (r:nat)\n  ensures r*r <= N < (r+1)*(r+1)\n// </vc-spec>\n// <vc-code>\n{\n  var low := 0;\n  var high := N;\n  while low < high\n    invariant 0 <= low <= high <= N\n    invariant low * low <= N\n    invariant (high+1)*(high+1) > N\n  {\n    var mid := (low + high + 1) / 2;\n    if mid * mid <= N {\n      low := mid;\n    } else {\n      high := mid - 1;\n    }\n  }\n  return low;\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_432_MedianLength.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_432_MedianLength.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod MedianLength(a: int, b: int) returns (median: int)\n    requires a > 0 && b > 0\n    ensures median == (a + b) / 2\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-duck_tmp_tmplawbgxjo_ex3_BadSort.dfy", "root", false, "", "", false, "dafny-duck_tmp_tmplawbgxjo_ex3_BadSort.dfy", "// <vc-preamble>\npredicate sortedbad(s: string)\n{\n\n  forall i, j :: 0 <= i <= j < |s| && s[i] == 'b' && s[j] != 'b' ==> i < j &&\n\n  forall i, j :: 0 <= i <= j < |s| && s[i] != 'd' && s[j] == 'd' ==> i < j\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod BadSort(a: string) returns (b: string)\nrequires forall i :: 0<=i<|a| ==> a[i] in {'b', 'a', 'd'}\nensures sortedbad(b)\nensures multiset(b[..]) == multiset(a[..])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_algorithms_and_leetcode_examples_relativeOrder_FindEvenNumbers.dfy", "root", false, "", "", false, "Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_algorithms_and_leetcode_examples_relativeOrder_FindEvenNumbers.dfy", "// <vc-preamble>\npredicate IsEven (n: int)\n{\n  n % 2 == 0\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod FindEvenNumbers (arr: array<int>)\n  returns (evenNumbers: array<int>)\n  ensures forall x :: x in arr[..] && IsEven(x) ==> x in evenNumbers[..];\n  ensures forall x :: x !in arr[..] ==> x !in evenNumbers[..]\n    ensures forall k, l :: 0 <= k < l < evenNumbers.Length ==>\n    exists n, m :: 0 <= n < m < arr.Length && evenNumbers[k] == arr[n] && evenNumbers[l] == arr[m]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Final-Project-Dafny_tmp_tmpmcywuqox_Attempts_Insertion_Sort_Normal_insertionSort.dfy", "root", true, "", "", false, "Final-Project-Dafny_tmp_tmpmcywuqox_Attempts_Insertion_Sort_Normal_insertionSort.dfy", "// <vc-preamble>\npredicate sorted (a: array<int>)\n\n    reads a\n{\n    sortedA(a, a.Length)\n}\n\npredicate sortedA (a: array<int>, i: int)\n\n    requires 0 <= i <= a.Length\n    reads a\n{\n    forall k :: 0 < k < i ==> a[k-1] <= a[k]\n}\n\nmethod lookForMin (a: array<int>, i: int) returns (m: int)\n\n    requires 0 <= i < a.Length\n    ensures i <= m < a.Length\n    ensures forall k :: i <= k < a.Length ==> a[k] >= a[m]\n{\n  assume{:axiom} false;\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod insertionSort (a: array<int>)\n\n    modifies a\n    ensures sorted(a)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "predicate sorted (a: array<int>)\n\n    reads a\n{\n    sortedA(a, a.Length)\n}\n\npredicate sortedA (a: array<int>, i: int)\n\n    requires 0 <= i <= a.Length\n    reads a\n{\n    forall k :: 0 < k < i ==> a[k-1] <= a[k]\n}\n\nmethod lookForMin (a: array<int>, i: int) returns (m: int)\n\n    requires 0 <= i < a.Length\n    ensures i <= m < a.Length\n    ensures forall k :: i <= k < a.Length ==> a[k] >= a[m]\n{\n  assume{:axiom} false;\n}\n\n// <vc-helpers>\nmethod findMin(a: array<int>, i: int) returns (m: int)\n    requires 0 <= i < a.Length\n    ensures i <= m < a.Length\n    ensures forall k :: i <= k < a.Length ==> a[k] >= a[m]\n{\n    m := i;\n    var j := i + 1;\n    while j < a.Length\n        invariant i <= m < j <= a.Length\n        invariant forall k :: i <= k < j ==> a[k] >= a[m]\n    {\n        if a[j] < a[m] {\n            m := j;\n        }\n        j := j + 1;\n    }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod insertionSort (a: array<int>)\n\n    modifies a\n    ensures sorted(a)\n// </vc-spec>\n// <vc-code>\n{\n    var i := 1;\n    while i < a.Length\n        invariant sortedA(a, i)\n    {\n        var m := findMin(a, i-1);\n        var t := a[m];\n        var k := m;\n        while k > i-1\n            invariant 0 <= i-1 < k <= m+1\n            invariant a[i-1] == t\n            invariant forall j :: 0 <= j < a.Length && j != i-1 && j != k ==> a[j] == old(a[j])\n            invariant sortedA(a, i-1)\n        {\n            a[k] := a[k-1];\n            k := k - 1;\n        }\n        a[i-1] := t;\n        i := i + 1;\n    }\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_741_AllCharactersSame.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_741_AllCharactersSame.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod AllCharactersSame(s: string) returns (result: bool)\n    ensures result ==> forall i, j :: 0 <= i < |s| && 0 <= j < |s| ==> s[i] == s[j]\n    ensures !result ==> (|s| > 1) && (exists i, j :: 0 <= i < |s| && 0 <= j < |s| && i != j && s[i] != s[j])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["software_analysis_tmp_tmpmt6bo9sf_ss_selection_sort.dfy", "root", false, "", "", false, "software_analysis_tmp_tmpmt6bo9sf_ss_selection_sort.dfy", "// <vc-preamble>\nmethod find_min_index(a : array<int>, s: int, e: int) returns (min_i: int)\nrequires a.Length > 0\nrequires 0 <= s < a.Length\nrequires e <= a.Length\nrequires e > s\n\nensures min_i >= s \nensures min_i < e \nensures forall k: int :: s <= k < e ==> a[min_i] <= a[k]\n{\n  assume{:axiom} false;\n}\n\npredicate is_sorted(ss: seq<int>)\n{\n    forall i, j: int:: 0 <= i <= j < |ss| ==> ss[i] <= ss[j]\n}\n\npredicate is_permutation(a:seq<int>, b:seq<int>)\ndecreases |a|\ndecreases |b|\n{\n    |a| == |b|  && \n    ((|a| == 0 && |b| == 0) ||  \n    exists i,j : int :: 0<=i<|a| &&  0<=j<|b|  && a[i] == b[j] && is_permutation(a[0..i] + if i < |a| then a[i+1..] else [], b[0..j] + if j < |b| then  b[j+1..] else []))\n}\n\npredicate is_permutation2(a:seq<int>, b:seq<int>)\n{\n    multiset(a) == multiset(b)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod selection_sort(ns: array<int>) \nrequires ns.Length >= 0\nensures is_sorted(ns[..])\nensures is_permutation2(old(ns[..]), ns[..])\nmodifies ns\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_594_FirstEvenOddDifference.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_594_FirstEvenOddDifference.dfy", "// <vc-preamble>\npredicate IsEven(n: int)\n{\n    n % 2 == 0\n}\n\npredicate IsOdd(n: int)\n{\n    n % 2 != 0\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod FirstEvenOddDifference(a: array<int>) returns (diff: int)\n    requires a.Length >= 2\n    requires exists i :: 0 <= i < a.Length && IsEven(a[i])\n    requires exists i :: 0 <= i < a.Length && IsOdd(a[i])\n    ensures exists i, j :: 0 <= i < a.Length && 0 <= j < a.Length && IsEven(a[i]) && IsOdd(a[j]) && diff == a[i] - a[j] && \n        (forall k :: 0 <= k < i ==> IsOdd(a[k])) && (forall k :: 0 <= k < j ==> IsEven(a[k]))\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["BinaryAddition_BinaryAddition.dfy", "root", true, "", "", false, "BinaryAddition_BinaryAddition.dfy", "// <vc-preamble>\nfunction ArrayToBv10(arr: array<bool>): bv10\n    reads arr\n    requires arr.Length == 10\n{\n    ArrayToBv10Helper(arr, arr.Length - 1)\n}\n\nfunction ArrayToBv10Helper(arr: array<bool>, index: nat): bv10\n    reads arr\n    requires arr.Length == 10\n    requires 0 <= index < arr.Length\n    decreases index\n{\n    if index == 0 then\n        (if arr[0] then 1 else 0) as bv10\n    else\n        var bit: bv10 := if arr[index] then 1 as bv10 else 0 as bv10;\n        (bit << index) + ArrayToBv10Helper(arr, index - 1)\n}\n\nmethod ArrayToSequence(arr: array<bool>) returns (res: seq<bool>)\n    ensures |res| == arr.Length\n    ensures forall k :: 0 <= k < arr.Length ==> res[k] == arr[k]\n{\n  assume{:axiom} false;\n}\n\nfunction isBitSet(x: bv10, bitIndex: nat): bool\n    requires bitIndex < 10\n    ensures isBitSet(x, bitIndex) <==> (x & (1 << bitIndex)) != 0\n{\n    (x & (1 << bitIndex)) != 0\n}\n\nfunction Bv10ToSeq(x: bv10): seq<bool>\n    ensures |Bv10ToSeq(x)| == 10\n    ensures forall i: nat :: 0 <= i < 10 ==> Bv10ToSeq(x)[i] == isBitSet(x, i)\n{\n    var result := [isBitSet(x, 0), isBitSet(x, 1), isBitSet(x, 2), isBitSet(x, 3),\n    isBitSet(x, 4), isBitSet(x, 5), isBitSet(x, 6), isBitSet(x, 7),\n    isBitSet(x, 8), isBitSet(x, 9)];\n    assert result[0] == isBitSet(x, 0);\n    assert result[1] == isBitSet(x, 1);\n    assert result[2] == isBitSet(x, 2);\n    assert result[3] == isBitSet(x, 3);\n    assert result[4] == isBitSet(x, 4);\n    assert result[5] == isBitSet(x, 5);\n    assert result[6] == isBitSet(x, 6);\n    assert result[7] == isBitSet(x, 7);\n    assert result[8] == isBitSet(x, 8);\n    assert result[9] == isBitSet(x, 9);\n    assert forall i: nat :: 0 <= i < 10 ==> result[i] == isBitSet(x, i);\n    result\n}\n\nfunction BoolToInt(a: bool): int {\n    if a then 1 else 0\n}\n\nfunction XOR(a: bool, b: bool): bool {\n    (a || b) && !(a && b)\n}\n\nfunction BitAddition(s: array<bool>, t: array<bool>): seq<bool>\n    reads s\n    reads t\n    requires s.Length == 10 && t.Length == 10\n{\n    var a: bv10 := ArrayToBv10(s);\n    var b: bv10 := ArrayToBv10(t);\n    var c: bv10 := a + b;\n    Bv10ToSeq(c)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod BinaryAddition(s: array<bool>, t: array<bool>) returns (sresult: seq<bool>)\n    requires s.Length == 10 && t.Length == 10\n    ensures |sresult| == 10\n    ensures BitAddition(s, t) == sresult\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "/* \nMIPS 0\nWe implement the following with bitvectors in Dafny.\nhere s' and t' are converted to decimal scalars\ns = [1,1,1], t = [1,0,1], ys = [1, 0, 0], s' = 7, t' = 5, ys' = 4\nys' % 2 ^ (len(s)) = (s' + t') % 2 ^ (len(s))\n4 % 8 = 12 % 8\n\ndef f(s,t):\n    a = 0;b = 0;\n    ys = []\n    for i in range(10):\n        c = s[i]; d = t[i];\n        next_a = b ^ c ^ d\n        next_b = b+c+d>1\n        a = next_a;b = next_b;\n        y = a\n        ys.append(y)\n    return ys\n*/\n\nfunction ArrayToBv10(arr: array<bool>): bv10 // Converts boolean array to bitvector\n    reads arr\n    requires arr.Length == 10\n{\n    ArrayToBv10Helper(arr, arr.Length - 1)\n}\n\nfunction ArrayToBv10Helper(arr: array<bool>, index: nat): bv10\n    reads arr\n    requires arr.Length == 10\n    requires 0 <= index < arr.Length\n    decreases index\n    ensures forall i :: 0 <= i < index ==> ((ArrayToBv10Helper(arr, i) >> i) & 1) == (if arr\n        [i] then 1 else 0)\n{\n    if index == 0 then\n        (if arr[0] then 1 else 0) as bv10\n    else\n        var bit: bv10 := if arr[index] then 1 as bv10 else 0 as bv10;\n        (bit << index) + ArrayToBv10Helper(arr, index - 1)\n}\n\nmethod ArrayToSequence(arr: array<bool>) returns (res: seq<bool>) // Converts boolean array to boolean sequence\n    ensures |res| == arr.Length\n    ensures forall k :: 0 <= k < arr.Length ==> res[k] == arr[k]\n{\n  assume{:axiom} false;\n}\n\nfunction isBitSet(x: bv10, bitIndex: nat): bool\n    requires bitIndex < 10\n    ensures isBitSet(x, bitIndex) <==> (x & (1 << bitIndex)) != 0\n{\n    (x & (1 << bitIndex)) != 0\n}\n\nfunction Bv10ToSeq(x: bv10): seq<bool> // Converts bitvector to boolean sequence\n    ensures |Bv10ToSeq(x)| == 10\n    ensures forall i: nat :: 0 <= i < 10 ==> Bv10ToSeq(x)[i] == isBitSet(x, i)\n{\n    [isBitSet(x, 0), isBitSet(x, 1), isBitSet(x, 2), isBitSet(x, 3),\n    isBitSet(x, 4), isBitSet(x, 5), isBitSet(x, 6), isBitSet(x, 7),\n    isBitSet(x, 8), isBitSet(x, 9)]\n}\n\nfunction BoolToInt(a: bool): int {\n    if a then 1 else 0\n}\n\nfunction XOR(a: bool, b: bool): bool {\n    (a || b) && !(a && b)\n}\n\nfunction BitAddition(s: array<bool>, t: array<bool>): seq<bool> // Performs traditional bit addition\n    reads s\n    reads t\n    requires s.Length == 10 && t.Length == 10\n{\n    var a: bv10 := ArrayToBv10(s);\n    var b: bv10 := ArrayToBv10(t);\n    var c: bv10 := a + b;\n    Bv10ToSeq(c)\n}\n\n// <vc-helpers>\nlemma ArrayToBv10Helper_property(arr: array<bool>, index: nat)\n    requires arr.Length == 10\n    requires 0 <= index < arr.Length\n    ensures forall i :: 0 <= i <= index ==> ((ArrayToBv10Helper(arr, index) >> i) & 1) == (if arr[i] then 1 else 0)\n{\n    if index == 0 {\n        calc {\n            (ArrayToBv10Helper(arr, 0) >> 0) & 1;\n            (if arr[0] then 1 else 0) & 1;\n            { assert (if arr[0] then 1 else 0) in {0, 1}; }\n            if arr[0] then 1 else 0;\n        }\n    } else {\n        calc {\n            forall i :: 0 <= i <= index ==> ((ArrayToBv10Helper(arr, index) >> i) & 1) == (if arr[i] then 1 else 0);\n        == { reveal ArrayToBv10Helper(); }\n            forall i :: 0 <= i <= index ==> \n                ((((if arr[index] then 1 as bv10 else 0 as bv10) << index) + ArrayToBv10Helper(arr, index - 1)) >> i) & 1 == \n                (if arr[i] then 1 else 0);\n        == { assert forall i: nat :: 0 <= i < index ==> \n                ((((if arr[index] then 1 as bv10 else 0 as bv10) << index) + ArrayToBv10Helper(arr, index - 1)) >> i) & 1 == \n                ((ArrayToBv10Helper(arr, index - 1) >> i) & 1);\n        }\n            forall i :: 0 <= i <= index ==> \n                (if i < index then ((ArrayToBv10Helper(arr, index - 1) >> i) & 1) \n                 else ((((if arr[index] then 1 as bv10 else 0 as bv10) << index) >> index) & 1)) == \n                (if arr[i] then 1 else 0);\n        == {\n            calc {\n                (((if arr[index] then 1 as bv10 else 0 as bv10) << index) >> index) & 1;\n                (if arr[index] then 1 as bv10 else 0 as bv10) & 1;\n                { assert (if arr[index] then 1 as bv10 else 0 as bv10) in {0, 1}; }\n                if arr[index] then 1 else 0;\n            }\n            ArrayToBv10Helper_property(arr, index - 1);\n        }\n            forall i :: 0 <= i <= index ==> \n                (if i < index then (if arr[i] then 1 else 0) else (if arr[i] then 1 else 0)) == \n                (if arr[i] then 1 else 0);\n        ==> { assert forall i :: 0 <= i <= index ==> \n                (if i < index then (if arr[i] then 1 else 0) else (if arr[i] then 1 else 0)) == \n                (if arr[i] then 1 else 0); }\n            true;\n        }\n    }\n}\n\nlemma ArrayToBv10_property(arr: array<bool>)\n    requires arr.Length == 10\n    ensures forall i :: 0 <= i < arr.Length ==> ((ArrayToBv10(arr) >> i) & 1) == (if arr[i] then 1 else 0)\n{\n    ArrayToBv10Helper_property(arr, arr.Length - 1);\n}\n\nlemma Bv10ToSeq_property(x: bv10, i: nat)\n    requires 0 <= i < 10\n    ensures Bv10ToSeq(x)[i] == isBitSet(x, i)\n{\n    reveal Bv10ToSeq();\n}\n\nfunction PartialSumAndCarry(s: array<bool>, t: array<bool>, i: nat): (seq<bool>, bool)\n    requires s.Length == 10 && t.Length == 10\n    requires 0 <= i <= 10\n    ensures |PartialSumAndCarry(s, t, i).0| == i\n{\n    if i == 0 then\n        ([], false)\n    else\n        var (\n// </vc-helpers>\n\n// <vc-spec>\nmethod BinaryAddition(s: array<bool>, t: array<bool>) returns (sresult: seq<bool>) // Generated program for bit addition\n    requires s.Length == 10 && t.Length == 10\n    ensures |sresult| == 10\n    ensures BitAddition(s, t) == sresult // Verification of correctness\n// </vc-spec>\n// <vc-code>\nlemma ArrayToBv10Helper_property(arr: array<bool>, index: nat)\n    requires arr.Length == 10\n    requires 0 <= index < arr.Length\n    ensures forall i :: 0 <= i <= index ==> ((ArrayToBv10Helper(arr, index) >> i) & 1) == (if arr[i] then 1 else 0)\n{\n    if index == 0 {\n        calc {\n            (ArrayToBv10Helper(arr, 0) >> 0) & 1;\n            (if arr[0] then 1 else 0) & 1;\n            { assert (if arr[0] then 1 else 0) in {0, 1}; }\n            if arr[0] then 1 else 0;\n        }\n    } else {\n        calc {\n            forall i :: 0 <= i <= index ==> ((ArrayToBv10Helper(arr, index) >> i) & 1) == (if arr[i] then 1 else 0);\n        == { reveal ArrayToBv10Helper(); }\n            forall i :: 0 <= i <= index ==> \n                ((((if arr[index] then 1 as bv10 else 0 as bv10) << index) + ArrayToBv10Helper(arr, index - 1)) >> i) & 1 == \n                (if arr[i] then 1 else 0);\n        == { assert forall i: nat :: 0 <= i < index ==> \n                ((((if arr[index] then 1 as bv10 else 0 as bv10) << index) + ArrayToBv10Helper(arr, index - 1)) >> i) & 1 == \n                ((ArrayToBv10Helper(arr, index - 1) >> i) & 1);\n        }\n            forall i :: 0 <= i <= index ==> \n                (if i < index then ((ArrayToBv10Helper(arr, index - 1) >> i) & 1) \n                 else ((((if arr[index] then 1 as bv10 else 0 as bv10) << index) >> index) & 1)) == \n                (if arr[i] then 1 else 0);\n        == {\n            calc {\n                (((if arr[index] then 1 as bv10 else 0 as bv10) << index) >> index) & 1;\n                (if arr[index] then 1 as bv10 else 0 as bv10) & 1;\n                { assert (if arr[index] then 1 as bv10 else 0 as bv10) in {0, 1}; }\n                if arr[index] then 1 else 0;\n            }\n            ArrayToBv10Helper_property(arr, index - 1);\n        }\n            forall i :: 0 <= i <= index ==> \n                (if i < index then (if arr[i] then 1 else 0) else (if arr[i] then 1 else 0)) == \n                (if arr[i] then 1 else 0);\n        ==> { assert forall i :: 0 <= i <= index ==> \n                (if i < index then (if arr[i] then 1 else 0) else (if arr[i] then 1 else 0)) == \n                (if arr[i] then 1 else 0); }\n            true;\n        }\n    }\n}\n\nlemma ArrayToBv10_property(arr: array<bool>)\n    requires arr.Length == 10\n    ensures forall i :: 0 <= i < arr.Length ==> ((ArrayToBv10(arr) >> i) & 1) == (if arr[i] then 1 else 0)\n{\n    ArrayToBv10Helper_property(arr, arr.Length - 1);\n}\n\nlemma Bv10ToSeq_property(x: bv10, i: nat)\n    requires 0 <= i < 10\n    ensures Bv10ToSeq(x)[i] == isBitSet(x, i)\n{\n    reveal Bv10ToSeq();\n}\n\nfunction PartialSumAndCarry(s: array<bool>, t: array<bool>, i: nat): (seq<bool>, bool)\n    requires s.Length == 10 && t.Length == 10\n    requires 0 <= i <= 10\n    ensures |PartialSumAndCarry(s, t, i).0| == i\n{\n    if i == 0 then\n        ([], false)\n    else\n        var (\n// </vc-code>\n\n", "", "", ""], ["cmsc433_tmp_tmpe3ob3a0o_dafny_project1_p1-assignment-2_Reverse.dfy", "root", false, "", "", false, "cmsc433_tmp_tmpe3ob3a0o_dafny_project1_p1-assignment-2_Reverse.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Reverse (a : array<int>) returns (aRev : array<int>)\n    ensures aRev.Length == a.Length\n    ensures forall i : int :: 0 <= i < a.Length ==> a[i] == aRev[aRev.Length-i-1]\n    ensures fresh(aRev)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_double_array_elements_double_array_elements.dfy", "root", true, "", "", false, "Clover_double_array_elements_double_array_elements.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod double_array_elements(s: array<int>)\n  modifies s\n  ensures forall i :: 0 <= i < s.Length ==> s[i] == 2 * old(s[i])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod double_array_elements(s: array<int>)\n  modifies s\n  ensures forall i :: 0 <= i < s.Length ==> s[i] == 2 * old(s[i])\n// </vc-spec>\n// <vc-code>\n{\n  var i := 0;\n  while i < s.Length\n    invariant 0 <= i <= s.Length\n    invariant forall j :: 0 <= j < i ==> s[j] == 2 * old(s[j])\n    invariant forall j :: i <= j < s.Length ==> s[j] == old(s[j])\n  {\n    s[i] := 2 * s[i];\n    i := i + 1;\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["dafny_tmp_tmp49a6ihvk_m4_DutchFlag.dfy", "root", false, "", "", false, "dafny_tmp_tmp49a6ihvk_m4_DutchFlag.dfy", "// <vc-preamble>\ndatatype Color = Red | White | Blue\n\npredicate Below(c: Color, d: Color)\n{\n    c == Red || c == d || d == Blue\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod DutchFlag(a: array<Color>)\n    modifies a\n    ensures forall i, j :: 0 <= i < j < a.Length ==> Below(a[i], a[j])\n    ensures multiset(a[..]) == multiset(old(a[..]))\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_binary_search_BinarySearch.dfy", "root", true, "", "", false, "Clover_binary_search_BinarySearch.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod BinarySearch(a: array<int>, key: int) returns (n: int)\n  requires forall i,j :: 0<=i<j<a.Length ==> a[i]<=a[j]\n  ensures 0<= n <=a.Length\n  ensures forall i :: 0<= i < n ==> a[i] < key\n  ensures n == a.Length ==> forall i :: 0 <= i < a.Length ==> a[i] < key\n  ensures forall i :: n<= i < a.Length ==> a[i]>=key\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod BinarySearch(a: array<int>, key: int) returns (n: int)\n  requires forall i,j :: 0<=i<j<a.Length ==> a[i]<=a[j]\n  ensures 0<= n <=a.Length\n  ensures forall i :: 0<= i < n ==> a[i] < key\n  ensures n == a.Length ==> forall i :: 0 <= i < a.Length ==> a[i] < key\n  ensures forall i :: n<= i < a.Length ==> a[i]>=key\n// </vc-spec>\n// <vc-code>\n{\n  var low := 0;\n  var high := a.Length;\n  while low < high\n    invariant 0 <= low <= high <= a.Length\n    invariant forall i :: 0 <= i < low ==> a[i] < key\n    invariant forall i :: high <= i < a.Length ==> a[i] >= key\n  {\n    var mid := (low + high) / 2;\n    if a[mid] < key {\n      low := mid + 1;\n    } else {\n      high := mid;\n    }\n  }\n  return low;\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_242_CountCharacters.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_242_CountCharacters.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod CountCharacters(s: string) returns (count: int)\n    ensures count >= 0\n    ensures count == |s|\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafleet_tmp_tmpa2e4kb9v_0001-0050_0001-two-sum_twoSum.dfy", "root", false, "", "", false, "dafleet_tmp_tmpa2e4kb9v_0001-0050_0001-two-sum_twoSum.dfy", "// <vc-preamble>\nghost predicate correct_pair(pair: (int, int), nums: seq<int>, target: int) {\n  var (i, j) := pair;\n  && 0 <= i < |nums|\n  && 0 <= j < |nums|\n  && i != j\n  && nums[i] + nums[j] == target\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod twoSum(nums: seq<int>, target: int) returns (pair: (int, int))\n  requires exists i, j :: correct_pair((i, j), nums, target)\n  ensures correct_pair(pair, nums, target)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny-Exercises_tmp_tmpjm75muf__Session7Exercises_ExerciseBinarySearch_otherbSearch.dfy", "root", true, "", "", false, "Dafny-Exercises_tmp_tmpjm75muf__Session7Exercises_ExerciseBinarySearch_otherbSearch.dfy", "// <vc-preamble>\npredicate sorted(s : seq<int>) {\n    forall u, w :: 0 <= u < w < |s| ==> s[u] <= s[w]\n}\n\nmethod binarySearch(v:array<int>, elem:int) returns (p:int)\n requires sorted(v[0..v.Length])\n ensures -1<=p<v.Length\n ensures (forall u::0<=u<=p ==> v[u]<=elem) && (forall w::p<w<v.Length ==> v[w]>elem)\n{\n  assume{:axiom} false;\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod otherbSearch(v:array<int>, elem:int) returns (b:bool,p:int)\n requires sorted(v[0..v.Length])\n ensures 0<=p<=v.Length\n ensures b == (elem in v[0..v.Length])\n ensures b ==> p<v.Length && v[p]==elem\n ensures !b ==> (forall u::0<=u<p ==> v[u]<elem) && \n               (forall w::p<=w<v.Length ==> v[w]>elem)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "predicate sorted(s : seq<int>) {\n    forall u, w :: 0 <= u < w < |s| ==> s[u] <= s[w]\n}\n\nmethod binarySearch(v:array<int>, elem:int) returns (p:int)\n requires sorted(v[0..v.Length])\n ensures -1<=p<v.Length\n ensures (forall u::0<=u<=p ==> v[u]<=elem) && (forall w::p<w<v.Length ==> v[w]>elem)\n{\n  assume{:axiom} false;\n}\n\n\n\n\n\n\n//Recursive binary search\n\n// <vc-helpers>\nmethod BinarySearchRec(v: array<int>, elem: int, low: int, high: int) returns (b: bool, p: int)\n    requires 0 <= low <= high < v.Length\n    requires sorted(v[low..high+1])\n    ensures low <= p <= high+1\n    ensures b == (elem in v[low..high+1])\n    ensures b ==> low <= p <= high && v[p] == elem\n    ensures !b ==> ( (forall u :: low <= u < p ==> v[u] < elem) && (forall w :: p <= w <= high ==> v[w] > elem) )\n{\n    if low > high {\n        return (false, low);\n    }\n    var mid := (low + high) / 2;\n    if v[mid] == elem {\n        return (true, mid);\n    } else if v[mid] < elem {\n        assert forall u :: low <= u <= mid ==> v[u] <= v[mid];\n        assert v[mid] < elem;\n        assert forall u :: low <= u <= mid ==> v[u] < elem;\n        var (b_found, p_found) := BinarySearchRec(v, elem, mid+1, high);\n        return (b_found, p_found);\n    } else {\n        assert forall w :: mid <= w <= high ==> v[w] >= v[mid];\n        assert v[mid] > elem;\n        assert forall w :: mid <= w <= high ==> v[w] > elem;\n        var (b_found, p_found) := BinarySearchRec(v, elem, low, mid-1);\n        return (b_found, p_found);\n    }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod otherbSearch(v:array<int>, elem:int) returns (b:bool,p:int)\n requires sorted(v[0..v.Length])\n ensures 0<=p<=v.Length\n ensures b == (elem in v[0..v.Length])\n ensures b ==> p<v.Length && v[p]==elem\n ensures !b ==> (forall u::0<=u<p ==> v[u]<elem) && \n               (forall w::p<=w<v.Length ==> v[w]>elem)\n //Implement and verify\n// </vc-spec>\n// <vc-code>\n{\n    if v.Length == 0 {\n        return (false, 0);\n    }\n    var (b_found, p_found) := BinarySearchRec(v, elem, 0, v.Length-1);\n    return (b_found, p_found);\n}\n// </vc-code>\n\n", "", "", ""], ["BelowZero_BelowZero.dfy", "root", true, "", "", false, "BelowZero_BelowZero.dfy", "// <vc-preamble>\nfunction sum(s: seq<int>, n: nat): int\n    requires n <= |s|\n{\n    if |s| == 0 || n == 0 then\n        0\n    else\n        s[0] + sum(s[1..], n-1)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod BelowZero(ops: seq<int>) returns (result: bool)\n    ensures result <==> exists n: nat :: n <= |ops| && sum(ops, n) < 0\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "/* \nHumanEvalX 3\nYou're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. \nYour task is to detect if at any point the balance of account falls below zero, and at that point function \nshould return True. Otherwise it should return False.\n*/\n\nfunction sum(s: seq<int>, n: nat): int\n    requires n <= |s|\n{\n    if |s| == 0 || n == 0 then\n        0\n    else\n        s[0] + sum(s[1..], n-1)\n}\n\n// <vc-helpers>\nfunction sum(s: seq<int>, n: nat): int\n    requires n <= |s|\n{\n    if |s| == 0 || n == 0 then\n        0\n    else\n        s[0] + sum(s[1..], n-1)\n}\n\npredicate BelowZeroAt(ops: seq[int], n: nat) \n   requires n <= |ops|\n {\n   sum(ops, n) < 0\n }\n\n lemma SumLemma(s: seq<int>, n: nat, m: nat)\n   requires 0 <= n <= m <= |s|\n   ensures sum(s, n) + sum(s[n..], m - n) == sum(s, m)\n {\n   if n == m {\n     calc {\n       sum(s, n) + sum(s[n..], m - n);\n       sum(s, n) + sum(s[n..], 0);\n       sum(s, n) + 0;\n       ==  { assert n == m; }\n       sum(s, m);\n     }\n   } else if n == 0 {\n     calc {\n       sum(s, n) + sum(s[n..], m - n);\n       ==  { assert n == 0; }\n       sum(s, 0) + sum(s, m);\n       0 + sum(s, m);\n       sum(s, m);\n     }\n   } else {\n     calc {\n       sum(s, n) + sum(s[n..], m-n);\n       ==  { assert n > 0 && n < m; }\n       s[0] + sum(s[1..], n-1) + sum(s[1..][n-1..], (m-n));\n       s[0] + sum(s[1..], n-1) + sum(s[n..], m-n);\n       ==  { SumLemma(s[1..], n-1, m-1); }\n       s[0] + sum(s[1..], m-1);\n       sum(s, m);\n     }\n   }\n }\n// </vc-helpers>\n\n// <vc-spec>\nmethod BelowZero(ops: seq<int>) returns (result: bool)\n    ensures result <==> exists n: nat :: n <= |ops| && sum(ops, n) < 0\n// </vc-spec>\n// <vc-code>\n{\n    var balance := 0;\n    for i := 0 to |ops|\n        invariant 0 <= i <= |ops|\n        invariant balance == sum(ops, i)\n    {\n        balance := balance + ops[i];\n        if balance < 0 {\n            return true;\n        }\n    }\n    return false;\n}\n// </vc-code>\n\n", "", "", ""], ["Dafny_tmp_tmp0wu8wmfr_Heimaverkefni_1_LinearSearch_SearchRecursive.dfy", "root", false, "", "", false, "Dafny_tmp_tmp0wu8wmfr_Heimaverkefni_1_LinearSearch_SearchRecursive.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SearchRecursive( a: seq<int>, i: int, j: int, x: int ) returns (k: int)\n    decreases j-i;\n    requires 0 <= i <= j <= |a|;\n    ensures i <= k < j || k == -1;\n    ensures k != -1 ==> a[k] == x;\n    ensures k != -1 ==> forall r | k < r < j :: a[r] != x;\n    ensures k == -1 ==> forall r | i <= r < j :: a[r] != x;\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["formal_verication_dafny_tmp_tmpwgl2qz28_Challenges_ex2_Allow42.dfy", "root", false, "", "", false, "formal_verication_dafny_tmp_tmpwgl2qz28_Challenges_ex2_Allow42.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Allow42(x:int, y:int) returns (z: int, err:bool) \nensures y != 42 ==> z == x/(42-y) && err == false;\nensures y == 42 ==> z == 0 && err == true;\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-exercise_tmp_tmpouftptir_reverse_Reverse.dfy", "root", false, "", "", false, "dafny-exercise_tmp_tmpouftptir_reverse_Reverse.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Reverse(a: array<char>) returns (b: array<char>)\nrequires a.Length > 0\nensures a == old(a)\nensures b.Length == a.Length\nensures forall i :: 0 <= i < a.Length ==> b[i] == a[a.Length - i - 1]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_290_MaxLengthList.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_290_MaxLengthList.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod MaxLengthList(lists: seq<seq<int>>) returns (maxList: seq<int>)\n    requires |lists| > 0\n    ensures forall l :: l in lists ==> |l| <= |maxList|\n    ensures maxList in lists\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_min_of_two_Min.dfy", "root", true, "", "", false, "Clover_min_of_two_Min.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Min(x: int, y:int) returns (z: int)\n  ensures x<=y ==> z==x\n  ensures x>y ==> z==y\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n// No helpers needed for this implementation.\n// </vc-helpers>\n\n// <vc-spec>\nmethod Min(x: int, y:int) returns (z: int)\n  ensures x<=y ==> z==x\n  ensures x>y ==> z==y\n// </vc-spec>\n// <vc-code>\n{\n  z := if x <= y then x else y;\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_610_RemoveElement.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_610_RemoveElement.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod RemoveElement(s: array<int>, k: int) returns (v: array<int>)\n    requires 0 <= k < s.Length\n    ensures v.Length == s.Length - 1\n    ensures forall i :: 0 <= i < k ==> v[i] == s[i]\n    ensures forall i :: k <= i < v.Length ==> v[i] == s[i + 1]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny_examples_tmp_tmp8qotd4ez_leetcode_0027-remove-element_RemoveElement.dfy", "root", false, "", "", false, "dafny_examples_tmp_tmp8qotd4ez_leetcode_0027-remove-element_RemoveElement.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod RemoveElement(nums: array<int>, val: int) returns (newLength: int)\n    modifies nums\n    ensures 0 <= newLength <= nums.Length\n    ensures forall x :: x in nums[..newLength] ==> x != val\n    ensures multiset(nums[..newLength]) == multiset(old(nums[..]))[val := 0]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_algorithms_and_leetcode_leetcode_FindPivotIndex_FindPivotIndex.dfy", "root", false, "", "", false, "Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_algorithms_and_leetcode_leetcode_FindPivotIndex_FindPivotIndex.dfy", "// <vc-preamble>\nfunction sum(nums: seq<int>): int {\n\n    if |nums| == 0 then 0 else sum(nums[0..(|nums|-1)])+nums[|nums|-1]\n}\n\nfunction sumUp(nums: seq<int>): int {\n    if |nums| == 0 then 0 else nums[0]+sumUp(nums[1..])\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod  FindPivotIndex(nums: seq<int>) returns (index: int)\n    requires |nums| > 0\n    ensures index == -1 ==> forall k: nat :: k < |nums| ==> sum(nums[0..k]) != sum(nums[(k+1)..])\n    ensures 0 <= index < |nums| ==> sum(nums[0..index]) == sum(nums[(index+1)..])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_455_MonthHas31Days.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_455_MonthHas31Days.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod MonthHas31Days(month: int) returns (result: bool)\n    requires 1 <= month <= 12\n    ensures result <==> month in {1, 3, 5, 7, 8, 10, 12}\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Software-Verification_tmp_tmpv4ueky2d_Counting_Bits_counting_bits_counting_bits.dfy", "root", false, "", "", false, "Software-Verification_tmp_tmpv4ueky2d_Counting_Bits_counting_bits_counting_bits.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod counting_bits(n: int) returns (result: array<int>)\n    requires 0 <= n <= 100000\n    ensures result.Length == n + 1\n    ensures forall i :: 1 <= i < n + 1 ==> result[i] == result[i / 2] + i % 2\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_find_Find.dfy", "root", true, "", "", false, "Clover_find_Find.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Find(a: array<int>, key: int) returns (index: int)\n  ensures -1<=index<a.Length\n  ensures index!=-1 ==> a[index]==key && (forall i :: 0 <= i < index ==> a[i] != key)\n  ensures index == -1 ==> (forall i::0 <= i < a.Length ==> a[i] != key)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod Find(a: array<int>, key: int) returns (index: int)\n  ensures -1<=index<a.Length\n  ensures index!=-1 ==> a[index]==key && (forall i :: 0 <= i < index ==> a[i] != key)\n  ensures index == -1 ==> (forall i::0 <= i < a.Length ==> a[i] != key)\n// </vc-spec>\n// <vc-code>\n{\n  var i: int := 0;\n  while i < a.Length && a[i] != key\n    invariant 0 <= i <= a.Length\n    invariant forall j :: 0 <= j < i ==> a[j] != key\n  {\n    i := i + 1;\n  }\n  if i < a.Length {\n    return i;\n  } else {\n    return -1;\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["Dafny-Exercises_tmp_tmpjm75muf__Session3Exercises_ExerciseMaximum_mfirstMaximum.dfy", "root", true, "", "", false, "Dafny-Exercises_tmp_tmpjm75muf__Session3Exercises_ExerciseMaximum_mfirstMaximum.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod mfirstMaximum(v:array<int>) returns (i:int)\nrequires v.Length>0\nensures 0<=i<v.Length \nensures forall k:: 0<=k<v.Length ==> v[i]>=v[k]\nensures forall l:: 0<=l<i ==> v[i]>v[l]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "//Algorithm 1: From left to right return the first\n\n//Algorithm 2: From right to left return the last\n\n// <vc-helpers>\n// No changes to helpers needed; fix is in loop invariants.\n// </vc-helpers>\n\n// <vc-spec>\nmethod mfirstMaximum(v:array<int>) returns (i:int)\nrequires v.Length>0\nensures 0<=i<v.Length \nensures forall k:: 0<=k<v.Length ==> v[i]>=v[k]\nensures forall l:: 0<=l<i ==> v[i]>v[l]\n//Algorithm: from left to right\n// </vc-spec>\n// <vc-code>\n{\n  var maxIndex := 0;\n  var maxValue := v[0];\n  var j := 1;\n  while j < v.Length\n    invariant 0 <= j <= v.Length\n    invariant 0 <= maxIndex < j\n    invariant maxValue == v[maxIndex]\n    invariant forall k :: 0 <= k < j ==> maxValue >= v[k]\n    invariant forall l :: 0 <= l < maxIndex ==> v[maxIndex] > v[l]\n  {\n    if v[j] > maxValue {\n      maxIndex := j;\n      maxValue := v[j];\n    }\n    j := j + 1;\n  }\n  return maxIndex;\n}\n// </vc-code>\n\n//Algorithm : from left to right\n//Algorithm : from right to left", "", "", ""], ["dafny-synthesis_task_id_441_CubeSurfaceArea.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_441_CubeSurfaceArea.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod CubeSurfaceArea(size: int) returns (area: int)\n    requires size > 0\n    ensures area == 6 * size * size\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_95_SmallestListLength.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_95_SmallestListLength.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SmallestListLength(s: seq<seq<int>>) returns (v: int)\n    requires |s| > 0\n    ensures forall i :: 0 <= i < |s| ==> v <= |s[i]|\n    ensures exists i :: 0 <= i < |s| && v == |s[i]|\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny_projects_tmp_tmpjutqwjv4_tutorial_tutorial_FindZero.dfy", "root", false, "", "", false, "dafny_projects_tmp_tmpjutqwjv4_tutorial_tutorial_FindZero.dfy", "// <vc-preamble>\nfunction fib(n: nat): nat\n{\n  if n == 0 then 0\n  else if n == 1 then 1\n  else fib(n - 1) + fib(n - 2)\n}\n\npredicate sorted(a: array<int>)\n  reads a\n{\n  forall n, m :: 0 <= n < m < a.Length ==> a[n] <= a[m]\n}\n\nfunction update(s: seq<int>, i: int, v: int): seq<int>\n  requires 0 <= i < |s|\n  ensures update(s, i, v) == s[i := v]\n{\n  s[..i] + [v] + s[i+1..]\n}\n\nfunction count(a: seq<bool>): nat\n{\n  if |a| == 0 then 0 else\n  (if a[0] then 1 else 0) + count(a[1..])\n}\n\nclass Node\n{\n  var next: seq<Node>\n}\npredicate closed(graph: set<Node>)\n  reads graph\n{\n  forall i :: i in graph ==> forall k :: 0 <= k < |i.next| ==> i.next[k] in graph && i.next[k] != i\n}\npredicate path(p: seq<Node>, graph: set<Node>)\n  requires closed(graph) && 0 < |p|\n  reads graph\n{\n  p[0] in graph &&\n    (|p| > 1 ==> p[1] in p[0].next &&\n     path(p[1..], graph))\n}\npredicate pathSpecific(p: seq<Node>, start: Node, end: Node, graph: set<Node>)\n  requires closed(graph)\n  reads graph\n{\n  0 < |p| &&\n  start == p[0] && end == p[|p|-1] &&\n  path(p, graph)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod FindZero(a: array<int>) returns (index: int)\n  requires forall i :: 0 <= i < a.Length ==> 0 <= a[i]\n  requires forall i :: 0 < i < a.Length ==> a[i-1]-1 <= a[i]\n  ensures index < 0  ==> forall i :: 0 <= i < a.Length ==> a[i] != 0\n  ensures 0 <= index ==> index < a.Length && a[index] == 0\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_quotient_Quotient.dfy", "root", true, "", "", false, "Clover_quotient_Quotient.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Quotient(x: nat, y:nat) returns (r:int, q:int)\n  requires y != 0\n  ensures q * y + r == x && 0 <= r < y && 0 <= q\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod Quotient(x: nat, y:nat) returns (r:int, q:int)\n  requires y != 0\n  ensures q * y + r == x && 0 <= r < y && 0 <= q\n// </vc-spec>\n// <vc-code>\n{\n  r := x;\n  q := 0;\n  while r >= y\n    invariant r + q * y == x && 0 <= r && 0 <= q\n    decreases r\n  {\n    r := r - y;\n    q := q + 1;\n  }\n  return r, q;\n}\n// </vc-code>\n\n", "", "", ""], ["Correctness_tmp_tmpwqvg5q_4_Sorting_Tangent_Tangent.dfy", "root", true, "", "", false, "Correctness_tmp_tmpwqvg5q_4_Sorting_Tangent_Tangent.dfy", "// <vc-preamble>\nmethod BinarySearch(a: array<int>, circle: int)\n  returns (n: int)\n  requires forall i ::\n           1 <= i < a.Length\n           ==> a[i-1] < a[i]\n  requires forall i, j ::\n           0 <= i < j < a.Length ==>\n           a[i] < a[j]\n  ensures 0 <= n <= a.Length\n  ensures forall i ::\n          0 <= i < n ==>\n          a[i] < circle\n  ensures forall i ::\n          n <= i < a.Length ==>\n          circle <= a[i]\n{\n  assume{:axiom} false;\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Tangent(r: array<int>, x: array<int>)\n  returns (found: bool)\n  requires forall i:: 1 <= i < x.Length ==> \n           x[i-1] < x[i]\n  requires forall i, j ::\n           0 <= i < j < x.Length ==>\n           x[i] < x[j]\n  ensures !found ==>\n          forall i,j ::\n          0 <= i < r.Length &&\n          0 <= j < x.Length ==>\n          r[i] != x[j]\n  ensures found ==>\n          exists i,j ::\n          0 <= i < r.Length &&\n          0 <= j < x.Length &&\n          r[i] == x[j]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "/**\n  Ather, Mohammad Faiz (s4648481/3)\n  CSSE3100\n  Assignemnt 3\n  The University of Queensland\n */\n\n// Question 1\n\n// Author: Leino, Title: Program Proofs\nmethod BinarySearch(a: array<int>, circle: int)\n  returns (n: int)\n  requires forall i ::\n           1 <= i < a.Length\n           ==> a[i-1] < a[i]\n  requires forall i, j ::\n           0 <= i < j < a.Length ==>\n           a[i] < a[j]\n  ensures 0 <= n <= a.Length\n  ensures forall i ::\n          0 <= i < n ==>\n          a[i] < circle\n  ensures forall i ::\n          n <= i < a.Length ==>\n          circle <= a[i]\n{\n  assume{:axiom} false;\n}\n\n// <vc-helpers>\npredicate IsSorted(a: array<int>)\n  reads a\n{\n  forall i :: 1 <= i < a.Length ==> a[i-1] < a[i]\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod Tangent(r: array<int>, x: array<int>)\n  returns (found: bool)\n  requires forall i:: 1 <= i < x.Length ==> \n           x[i-1] < x[i]\n  requires forall i, j ::\n           0 <= i < j < x.Length ==>\n           x[i] < x[j]\n  ensures !found ==>\n          forall i,j ::\n          0 <= i < r.Length &&\n          0 <= j < x.Length ==>\n          r[i] != x[j]\n  ensures found ==>\n          exists i,j ::\n          0 <= i < r.Length &&\n          0 <= j < x.Length &&\n          r[i] == x[j]\n// </vc-spec>\n// <vc-code>\n{\n  found := false;\n  var i := 0;\n  while i < r.Length && !found\n    invariant 0 <= i <= r.Length\n    invariant !found ==> forall idx, k :: 0 <= idx < i && 0 <= k < x.Length ==> r[idx] != x[k]\n    invariant found ==> exists idx, k :: 0 <= idx < i && 0 <= k < x.Length && r[idx] == x[k]\n  {\n    var j := 0;\n    while j < x.Length && !found && x[j] <= r[i]\n      invariant 0 <= j <= x.Length\n      invariant !found ==> forall k :: 0 <= k < j ==> x[k] != r[i]\n      invariant found ==> exists k :: 0 <= k < j && x[k] == r[i]\n    {\n      if x[j] == r[i] {\n        found := true;\n      }\n      j := j + 1;\n    }\n    i := i + 1;\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["Dafny-demo_tmp_tmpkgr_dvdi_Dafny_BinarySearch_BinarySearch.dfy", "root", true, "", "", false, "Dafny-demo_tmp_tmpkgr_dvdi_Dafny_BinarySearch_BinarySearch.dfy", "// <vc-preamble>\npredicate sorted(a: array?<int>, l: int, u: int)\n    reads a\n    requires a != null\n    {\n    forall i, j :: 0 <= l <= i <= j <= u < a.Length ==> a[i] <= a[j]\n    }\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod BinarySearch(a: array?<int>, key: int)\n    returns (index: int)\n    requires a != null && sorted(a,0,a.Length-1);\n    ensures index >= 0 ==> index < a.Length && a[index] == key;\n    ensures index < 0 ==> forall k :: 0 <= k < a.Length ==> a[k] != key;\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "predicate sorted(a: array?<int>, l: int, u: int)\n    reads a\n    requires a != null\n    {\n    forall i, j :: 0 <= l <= i <= j <= u < a.Length ==> a[i] <= a[j]\n    }\n\n// <vc-helpers>\nlemma LeftExcluded(a: array?<int>, key: int, low: int, high: int, mid: int)\n    requires a != null && sorted(a,0,a.Length-1)\n    requires 0 <= low <= mid <= high < a.Length\n    requires a[mid] < key\n    ensures forall k :: low <= k <= mid ==> a[k] != key\n{\n    forall k | low <= k <= mid\n        ensures a[k] != key\n    {\n        assert a[k] <= a[mid];\n        assert a[mid] < key;\n    }\n}\n\nlemma RightExcluded(a: array?<int>, key: int, low: int, high: int, mid: int)\n    requires a != null && sorted(a,0,a.Length-1)\n    requires 0 <= low <= mid <= high < a.Length\n    requires a[mid] > key\n    ensures forall k :: mid <= k <= high ==> a[k] != key\n{\n    forall k | mid <= k <= high\n        ensures a[k] != key\n    {\n        assert a[k] >= a[mid];\n        assert a[mid] > key;\n    }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod BinarySearch(a: array?<int>, key: int)\n    returns (index: int)\n    requires a != null && sorted(a,0,a.Length-1);\n    ensures index >= 0 ==> index < a.Length && a[index] == key;\n    ensures index < 0 ==> forall k :: 0 <= k < a.Length ==> a[k] != key;\n// </vc-spec>\n// <vc-code>\n{\n  var low, high: int := 0, a.Length-1;\n  while low <= high\n      invariant 0 <= low <= high+1 <= a.Length\n      invariant forall k :: 0 <= k < low ==> a[k] != key\n      invariant forall k :: high+1 <= k < a.Length ==> a[k] != key\n  {\n      var mid := (low + high) / 2;\n      if a[mid] == key {\n          return mid;\n      } else if a[mid] < key {\n          LeftExcluded(a, key, low, high, mid);\n          low := mid + 1;\n      } else {\n          RightExcluded(a, key, low, high, mid);\n          high := mid - 1;\n      }\n  }\n  return -1;\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_477_ToLowercase.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_477_ToLowercase.dfy", "// <vc-preamble>\npredicate IsUpperCase(c : char)\n{\n    65 <= c as int <= 90\n}\n\npredicate IsUpperLowerPair(C : char, c : char)\n{\n    (C as int) == (c as int) - 32\n}\n\nfunction Shift32(c : char) :  char\n{\n    ((c as int + 32) % 128) as char\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ToLowercase(s: string) returns (v: string)\n    ensures |v| == |s|\n    ensures forall i :: 0 <= i < |s| ==>  if IsUpperCase(s[i]) then IsUpperLowerPair(s[i], v[i]) else v[i] == s[i]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny-Exercises_tmp_tmpjm75muf__Session9Exercises_ExerciseSeqMaxSum_segMaxSum.dfy", "root", true, "", "", false, "Dafny-Exercises_tmp_tmpjm75muf__Session9Exercises_ExerciseSeqMaxSum_segMaxSum.dfy", "// <vc-preamble>\nfunction Sum(v:array<int>,i:int,j:int):int\nreads v\nrequires 0<=i<=j<=v.Length\ndecreases j\n{\n    if (i==j) then 0\n    else Sum(v,i,j-1)+v[j-1]\n}\n\npredicate SumMaxToRight(v:array<int>,i:int,s:int)\nreads v\nrequires 0<=i<v.Length\n{\nforall l,ss {:induction l}::0<=l<=i && ss==i+1==> Sum(v,l,ss)<=s\n}\n\nfunction Sum2(v:array<int>,i:int,j:int):int\nreads v\nrequires 0<=i<=j<=v.Length\ndecreases j-i\n{\n    if (i==j) then 0\n    else v[i]+Sum2(v,i+1,j)\n}\n\npredicate SumMaxToRight2(v:array<int>,j:int,i:int,s:int)\nreads v\nrequires 0<=j<=i<v.Length\n{(forall l,ss {:induction l}::j<=l<=i && ss==i+1 ==> Sum2(v,l,ss)<=s)}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod segMaxSum(v:array<int>,i:int) returns (s:int,k:int)\nrequires v.Length>0 && 0<=i<v.Length\nensures 0<=k<=i && s==Sum(v,k,i+1) &&  SumMaxToRight(v,i,s)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "function Sum(v:array<int>,i:int,j:int):int\nreads v\nrequires 0<=i<=j<=v.Length\ndecreases j\n{\n    if (i==j) then 0\n    else Sum(v,i,j-1)+v[j-1]\n}\n\npredicate SumMaxToRight(v:array<int>,i:int,s:int)\nreads v\nrequires 0<=i<v.Length\n{\nforall l,ss {:induction l}::0<=l<=i && ss==i+1==> Sum(v,l,ss)<=s\n}\n\nfunction Sum2(v:array<int>,i:int,j:int):int\nreads v\nrequires 0<=i<=j<=v.Length\ndecreases j-i\n{\n    if (i==j) then 0\n    else v[i]+Sum2(v,i+1,j)\n}\n\n//Now do the same but with a loop from right to left\npredicate SumMaxToRight2(v:array<int>,j:int,i:int,s:int)//maximum sum stuck to the right\nreads v\nrequires 0<=j<=i<v.Length\n{(forall l,ss {:induction l}::j<=l<=i && ss==i+1 ==> Sum2(v,l,ss)<=s)}\n\n// <vc-helpers>\nlemma Sum2_equals_Sum(v:array<int>,i:int,j:int)\n    requires 0<=i<=j<=v.Length\n    ensures Sum2(v,i,j) == Sum(v,i,j)\n    decreases j-i\n{\n    if i==j {\n    } else {\n        // Sum definition: Sum(v,i,j) = Sum(v,i,j-1) + v[j-1]\n        // By IH: Sum2(v,i+1,j) = Sum(v,i+1,j)\n        // Sum(v,i,j) = v[i] + Sum(v,i+1,j) = v[i] + Sum2(v,i+1,j) = Sum2(v,i,j)\n        calc {\n            Sum(v,i,j);\n            Sum(v,i,j-1) + v[j-1];\n            { Sum2_equals_Sum(v,i,j-1); }\n            Sum2(v,i,j-1) + v[j-1];\n        }\n    }\n}\n\nlemma SumMaxToRight_equiv_SumMaxToRight2(v:array<int>,i:int,s:int)\n    requires 0<=i<v.Length\n    ensures SumMaxToRight(v,i,s) <==> SumMaxToRight2(v,0,i,s)\n{\n    forall l, ss {:induction l} | 0<=l<=i && ss==i+1\n        ensures Sum(v,l,ss) <= s <==> Sum2(v,l,ss) <= s\n    {\n        calc {\n            Sum(v,l,ss);\n            { Sum2_equals_Sum(v,l,ss); }\n            Sum2(v,l,ss);\n        }\n    }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod segMaxSum(v:array<int>,i:int) returns (s:int,k:int)\nrequires v.Length>0 && 0<=i<v.Length\nensures 0<=k<=i && s==Sum(v,k,i+1) &&  SumMaxToRight(v,i,s)\n// </vc-spec>\n// <vc-code>\n{\n    k := i;\n    s := v[i];\n    var n := i;\n    while n > 0\n    invariant 0<=n<=k<=i\n    invariant s == Sum2(v,k,i+1)\n    invariant forall l :: n<=l<=i ==> Sum2(v,l,i+1) <= s\n    decreases n\n    {\n        n := n - 1;\n        var new_sum := s + v[n];\n        if new_sum > s {\n            s := new_sum;\n            k := n;\n        }\n    }\n    assert SumMaxToRight2(v,0,i,s);\n    assert SumMaxToRight(v,i,s) by {\n        SumMaxToRight_equiv_SumMaxToRight2(v,i,s);\n    }\n}\n// </vc-code>\n\n", "", "", ""], ["Clover_modify_2d_array_modify_array_element.dfy", "root", true, "", "", false, "Clover_modify_2d_array_modify_array_element.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod modify_array_element(arr: array<array<nat>>, index1: nat, index2: nat, val: nat)\n  requires index1 < arr.Length\n  requires index2 < arr[index1].Length\n  requires forall i: nat, j:nat :: i < arr.Length && j < arr.Length && i != j ==> arr[i] != arr[j]\n  modifies arr[index1]\n  ensures forall i: nat :: 0 <= i < arr.Length ==> arr[i] == old(arr[i])\n  ensures forall i: nat, j: nat :: 0 <= i < arr.Length && 0 <= j < arr[i].Length && (i != index1 || j != index2) ==> arr[i][j] == old(arr[i][j])\n  ensures  arr[index1][index2] == val\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod modify_array_element(arr: array<array<nat>>, index1: nat, index2: nat, val: nat)\n  requires index1 < arr.Length\n  requires index2 < arr[index1].Length\n  requires forall i: nat, j:nat :: i < arr.Length && j < arr.Length && i != j ==> arr[i] != arr[j]\n  modifies arr[index1]\n  ensures forall i: nat :: 0 <= i < arr.Length ==> arr[i] == old(arr[i])\n  ensures forall i: nat, j: nat :: 0 <= i < arr.Length && 0 <= j < arr[i].Length && (i != index1 || j != index2) ==> arr[i][j] == old(arr[i][j])\n  ensures  arr[index1][index2] == val\n// </vc-spec>\n// <vc-code>\n{\n  arr[index1][index2] := val;\n}\n// </vc-code>\n\n", "", "", ""], ["Dafny-Exercises_tmp_tmpjm75muf__Session3Exercises_ExerciseMaximum_mmaximum1.dfy", "root", true, "", "", false, "Dafny-Exercises_tmp_tmpjm75muf__Session3Exercises_ExerciseMaximum_mmaximum1.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod mmaximum1(v:array<int>) returns (i:int) \nrequires v.Length>0\nensures 0<=i<v.Length \nensures forall k:: 0<=k<v.Length ==> v[i]>=v[k]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "//Algorithm 1: From left to right return the first\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod mmaximum1(v:array<int>) returns (i:int) \nrequires v.Length>0\nensures 0<=i<v.Length \nensures forall k:: 0<=k<v.Length ==> v[i]>=v[k]\n// </vc-spec>\n// <vc-code>\n{\n  i := 0;\n  for j := 1 to v.Length \n    invariant 0 <= i < j \n    invariant forall k: int :: 0 <= k < j ==> v[k] <= v[i]\n  {\n    if v[j] > v[i] {\n      i := j;\n    }\n  }\n  return i;\n}\n// </vc-code>\n\n//Algorithm 2: From right to left return the last\n\n\n\n\n//Algorithm : from left to right\n//Algorithm : from right to left", "", "", ""], ["Formal-Verification_tmp_tmpuyt21wjt_Dafny_strings3_haveCommonKSubstring.dfy", "root", true, "", "", false, "Formal-Verification_tmp_tmpuyt21wjt_Dafny_strings3_haveCommonKSubstring.dfy", "// <vc-preamble>\npredicate isPrefixPred(pre:string, str:string)\n{\n    (|pre| <= |str|) && \n    pre == str[..|pre|]\n}\n\npredicate isNotPrefixPred(pre:string, str:string)\n{\n    (|pre| > |str|) || \n    pre != str[..|pre|]\n}\n\nmethod isPrefix(pre: string, str: string) returns (res:bool)\n    ensures !res <==> isNotPrefixPred(pre,str)\n    ensures  res <==> isPrefixPred(pre,str)\n{\n  assume{:axiom} false;\n}\npredicate isSubstringPred(sub:string, str:string)\n{\n    (exists i :: 0 <= i <= |str| &&  isPrefixPred(sub, str[i..]))\n}\n\npredicate isNotSubstringPred(sub:string, str:string)\n{\n    (forall i :: 0 <= i <= |str| ==> isNotPrefixPred(sub,str[i..]))\n}\n\nmethod isSubstring(sub: string, str: string) returns (res:bool)\n    ensures  res <==> isSubstringPred(sub, str)\n\n{\n  assume{:axiom} false;\n}\n\npredicate haveCommonKSubstringPred(k:nat, str1:string, str2:string)\n{\n    exists i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k && isSubstringPred(str1[i1..j1],str2)\n}\n\npredicate haveNotCommonKSubstringPred(k:nat, str1:string, str2:string)\n{\n    forall i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k ==>  isNotSubstringPred(str1[i1..j1],str2)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod haveCommonKSubstring(k: nat, str1: string, str2: string) returns (found: bool)\n    ensures found  <==>  haveCommonKSubstringPred(k,str1,str2)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "// We spent 2h each on this assignment\n\npredicate isPrefixPred(pre:string, str:string)\n{\n    (|pre| <= |str|) && \n    pre == str[..|pre|]\n}\n\npredicate isNotPrefixPred(pre:string, str:string)\n{\n    (|pre| > |str|) || \n    pre != str[..|pre|]\n}\n\nmethod isPrefix(pre: string, str: string) returns (res:bool)\n    ensures !res <==> isNotPrefixPred(pre,str)\n    ensures  res <==> isPrefixPred(pre,str)\n{\n  assume{:axiom} false;\n}\npredicate isSubstringPred(sub:string, str:string)\n{\n    (exists i :: 0 <= i <= |str| &&  isPrefixPred(sub, str[i..]))\n}\n\npredicate isNotSubstringPred(sub:string, str:string)\n{\n    (forall i :: 0 <= i <= |str| ==> isNotPrefixPred(sub,str[i..]))\n}\n\nmethod isSubstring(sub: string, str: string) returns (res:bool)\n    ensures  res <==> isSubstringPred(sub, str)\n    //ensures !res <==> isNotSubstringPred(sub, str) // This postcondition follows from the above lemma.\n{\n  assume{:axiom} false;\n}\n\npredicate haveCommonKSubstringPred(k:nat, str1:string, str2:string)\n{\n    exists i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k && isSubstringPred(str1[i1..j1],str2)\n}\n\npredicate haveNotCommonKSubstringPred(k:nat, str1:string, str2:string)\n{\n    forall i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k ==>  isNotSubstringPred(str1[i1..j1],str2)\n}\n\n// <vc-helpers>\nmethod isPrefixHelper(pre: string, str: string) returns (res: bool)\n    ensures res == (|pre| <= |str| && pre == str[..|pre|])\n{\n    if |pre| > |str| {\n        return false;\n    }\n    var i := 0;\n    while i < |pre|\n        invariant 0 <= i <= |pre|\n        invariant pre[..i] == str[..i]\n    {\n        if pre[i] != str[i] {\n            return false;\n        }\n        i := i + 1;\n    }\n    return true;\n}\n\nmethod isSubstringHelper(sub: string, str: string) returns (res: bool)\n    ensures res == isSubstringPred(sub, str)\n{\n    if |sub| == 0 {\n        return true;\n    }\n    var i := 0;\n    while i <= |str| - |sub|\n        invariant 0 <= i <= |str| - |sub| + 1\n        invariant forall j :: 0 <= j < i ==> isNotPrefixPred(sub, str[j..])\n    {\n        var isPre := isPrefixHelper(sub, str[i..]);\n        if isPre {\n            return true;\n        }\n        i := i + 1;\n    }\n    return false;\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod haveCommonKSubstring(k: nat, str1: string, str2: string) returns (found: bool)\n    ensures found  <==>  haveCommonKSubstringPred(k,str1,str2)\n    //ensures !found <==> haveNotCommonKSubstringPred(k,str1,str2) // This postcondition follows from the above lemma.\n// </vc-spec>\n// <vc-code>\n{\n    if k == 0 {\n        return true;\n    }\n    if k > |str1| {\n        return false;\n    }\n    var i1 := 0;\n    while i1 <= |str1| - k\n        invariant 0 <= i1 <= |str1| - k + 1\n        invariant forall i :: 0 <= i < i1 ==> isNotSubstringPred(str1[i..i+k], str2)\n    {\n        var isSub := isSubstringHelper(str1[i1..i1+k], str2);\n        if isSub {\n            return true;\n        }\n        i1 := i1 + 1;\n    }\n    return false;\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-language-server_tmp_tmpkir0kenl_Test_comp_Arrays_LinearSearch.dfy", "root", false, "", "", false, "dafny-language-server_tmp_tmpkir0kenl_Test_comp_Arrays_LinearSearch.dfy", "// <vc-preamble>\nmethod PrintArray<A>(a: array?<A>)\n{\n  assume{:axiom} false;\n}\n\ntype lowercase = ch | 'a' <= ch <= 'z' witness 'd'\n\nmethod DiagMatrix<A>(rows: int, cols: int, zero: A, one: A)\n    returns (a: array2<A>)\n    requires rows >= 0 && cols >= 0\n{\n  assume{:axiom} false;\n}\n\nmethod PrintMatrix<A>(m: array2<A>)\n{\n  assume{:axiom} false;\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod LinearSearch(a: array<int>, key: int) returns (n: nat)\n  ensures 0 <= n <= a.Length\n  ensures n == a.Length || a[n] == key\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["AssertivePrograming_tmp_tmpwf43uz0e_MergeSort_MergeSort.dfy", "root", true, "", "", false, "AssertivePrograming_tmp_tmpwf43uz0e_MergeSort_MergeSort.dfy", "// <vc-preamble>\npredicate Sorted(q: seq<int>) {\n    forall i,j :: 0 <= i <= j < |q| ==> q[i] <= q[j]\n}\n\nghost predicate Inv(a: seq<int>, a1: seq<int>, a2: seq<int>, i: nat, mid: nat){\n    (i <= |a1|) && (i <= |a2|) && (i+mid <= |a|) &&\n    (a1[..i] == a[..i]) && (a2[..i] == a[mid..(i+mid)])\n}\n\nmethod Merge(b: array<int>, c: array<int>, d: array<int>)\n    requires b != c && b != d && b.Length == c.Length + d.Length\n    requires Sorted(c[..]) && Sorted(d[..])\n    ensures Sorted(b[..]) && multiset(b[..]) == multiset(c[..])+multiset(d[..])\n    modifies b\n{\n  assume{:axiom} false;\n}\n\nghost predicate InvSorted(b: seq<int>, c: seq<int>, d: seq<int>, i: nat, j: nat){\n    i <= |c| && j <= |d| && i + j <= |b| &&\n    ((i+j > 0 && i < |c|) ==> (b[j + i - 1] <= c[i])) &&\n    ((i+j > 0 && j < |d|) ==> (b[j + i - 1] <= d[j])) &&\n    Sorted(b[..i+j])\n    }\n\nghost predicate InvSubSet(b: seq<int>, c: seq<int>, d: seq<int>, i: nat, j: nat){\n    i <= |c| && j <= |d| && i + j <= |b| &&\n    multiset(b[..i+j]) == multiset(c[..i]) + multiset(d[..j])\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod MergeSort(a: array<int>) returns (b: array<int>)\n    ensures b.Length == a.Length && Sorted(b[..]) && multiset(a[..]) == multiset(b[..])\n    decreases a.Length\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "// Noa Leron 207131871\n// Tsuri Farhana 315016907\n\n\n\npredicate Sorted(q: seq<int>) {\n    forall i,j :: 0 <= i <= j < |q| ==> q[i] <= q[j]\n}\n\n/*\nGoal: Implement the well known merge sort algorithm in O(a.Length X log_2(a.Length)) time, recursively.\n\n- Divide the contents of the original array into two local arrays\n- After sorting the local arrays (recursively), merge the contents of the two returned arrays using the Merge method (see below)\n- DO NOT modify the specification or any other part of the method's signature\n- DO NOT introduce any further methods\n*/\n\nghost predicate Inv(a: seq<int>, a1: seq<int>, a2: seq<int>, i: nat, mid: nat){\n    (i <= |a1|) && (i <= |a2|) && (i+mid <= |a|) &&\n    (a1[..i] == a[..i]) && (a2[..i] == a[mid..(i+mid)])\n}\n\n/*\nGoal: Implement iteratively, correctly, efficiently, clearly\n\nDO NOT modify the specification or any other part of the method's signature\n*/\nmethod Merge(b: array<int>, c: array<int>, d: array<int>)\n    requires b != c && b != d && b.Length == c.Length + d.Length\n    requires Sorted(c[..]) && Sorted(d[..])\n    ensures Sorted(b[..]) && multiset(b[..]) == multiset(c[..])+multiset(d[..])\n    modifies b\n{\n  assume{:axiom} false;\n}\n\n\n//This is a method that replace the loop body\n\n\n//Loop invariant - b is sprted so far and the next two potential values that will go into b are bigger then the biggest value in b.\nghost predicate InvSorted(b: seq<int>, c: seq<int>, d: seq<int>, i: nat, j: nat){\n    i <= |c| && j <= |d| && i + j <= |b| &&\n    ((i+j > 0 && i < |c|) ==> (b[j + i - 1] <= c[i])) &&\n    ((i+j > 0 && j < |d|) ==> (b[j + i - 1] <= d[j])) &&\n    Sorted(b[..i+j])\n    }\n\n\n//Loop invariant - the multiset of the prefix of b so far is the same multiset as the prefixes of c and d so far.\nghost predicate InvSubSet(b: seq<int>, c: seq<int>, d: seq<int>, i: nat, j: nat){\n    i <= |c| && j <= |d| && i + j <= |b| &&\n    multiset(b[..i+j]) == multiset(c[..i]) + multiset(d[..j])\n}\n\n//This lemma helps dafny see that if the prefixs of arrays are the same multiset until the end of the arrays,\n//all the arrays are the same multiset.\n\n\n//This lemma helps dafny see that after adding the next value from c to b the prefixes are still the same subsets.\n\n// <vc-helpers>\nlemma MergeHelper(b: array<int>, c: array<int>, d: array<int>, i: int, j: int)\n    requires b.Length == c.Length + d.Length\n    requires 0 <= i <= c.Length && 0 <= j <= d.Length\n    requires InvSorted(b[..], c[..], d[..], i, j)\n    requires InvSubSet(b[..], c[..], d[..], i, j)\n    requires i < c.Length && j < d.Length && c[i] <= d[j]\n    ensures InvSorted(b[..], c[..], d[..], i+1, j)\n    ensures InvSubSet(b[..], c[..], d[..], i+1, j)\n{\n    var oldB := b[..];\n    var newB := oldB[i+j := c[i]];\n    var newI := i + 1;\n    \n    assert newI <= c.Length;\n    assert j <= d.Length;\n    assert newI + j == (i+1) + j == i+j+1 <= b.Length;\n    \n    if i+j > 0 {\n        if i < c.Length {\n            assert b[i+j-1] <= c[i];\n            assert newB[newI+j-1] == newB[i+j] == c[i];\n            assert c[newI] == c[i+1];\n            assert newB[newI+j-1] == c[i] <= c[i] <= c[i+1] == c[newI];\n        }\n        if j < d.Length {\n            assert b[i+j-1] <= d[j];\n            assert newB[newI+j-1] == c[i] <= d[j];\n        }\n    }\n    \n    if newI+j > 0 {\n        if newI+j == 1 {\n            assert newB[..1] == [c[i]];\n            assert Sorted([c[i]]);\n        } else {\n            assert newB[..newI+j] == newB[..i+j] + [c[i]];\n            assert Sorted(newB[..i+j]);\n            assert |newB[..i+j]| == i+j > 0;\n            assert newB[i+j-1] == b[i+j-1];\n            assert b[i+j-1] <= c[i];\n            assert newB[i+j-1] <= c[i];\n        }\n    }\n    \n    assert multiset(newB[..newI+j]) == multiset(newB[..i+j]) + multiset([c[i]]);\n    assert multiset(newB[..i+j]) == multiset(oldB[..i+j]);\n    assert multiset(oldB[..i+j]) == multiset(c[..i]) + multiset(d[..j]);\n    assert multiset(newB[..newI+j]) == multiset(c[..i]) + multiset(d[..j]) + multiset([c[i]]);\n    assert multiset(c[..newI]) == multiset(c[..i+1]) == multiset(c[..i]) + multiset([c[i]]);\n    assert multiset(newB[..newI+j]) == multiset(c[..newI]) + multiset(d[..j]);\n}\n\nlemma MergeHelper2(b: array<int>, c: array<int>, d: array<int>, i: int, j: int)\n    requires b.Length == c.Length + d.Length\n    requires 0 <= i <= c.Length && 0 <= j <= d.Length\n    requires InvSorted(b[..], c[..], d[..], i, j)\n    requires InvSubSet(b[..], c[..], d[..], i, j)\n    requires i < c.Length && j < d.Length && d[j] < c[i]\n    ensures InvSorted(b[..], c[..], d[..], i, j+1)\n    ensures InvSubSet(b[..], c[..], d[..], i, j+1)\n{\n    var oldB := b[..];\n    var newB := oldB[i+j := d[j]];\n    var newJ := j + 1;\n    \n    assert i <= c.Length;\n    assert newJ <= d.Length;\n    assert i + newJ == i + j + 1 <= b.Length;\n    \n    if i+j > 0 {\n        if i < c.Length {\n            assert b[i+j-1] <= c[i];\n            assert newB[i+newJ-1] == d[j] < c[i];\n        }\n        if j < d.Length {\n            assert b[i+j-1] <= d[j];\n            assert newB[i+newJ-1] == d[j];\n            assert d[newJ] == d[j+1];\n            assert newB[i+newJ-1] == d[j] <= d[j] <= d[j+1] == d[newJ];\n        }\n    }\n    \n    if i+newJ > 0 {\n        if i+newJ == 1 {\n            assert newB[..1] == [d[j]];\n            assert Sorted([d[j]]);\n        } else {\n            assert newB[..i+newJ] == newB[..i+j] + [d[j]];\n            assert Sorted(newB[..i+j]);\n            assert newB[i+j-1] == b[i+j-1] <= d[j];\n        }\n    }\n    \n    assert multiset(newB[..i+newJ]) == multiset(newB[..i+j]) + multiset([d[j]]);\n    assert multiset(newB[..i+j]) == multiset(oldB[..i+j]);\n    assert multiset(oldB[..i+j]) == multiset(c[..i]) + multiset(d[..j]);\n    assert multiset(newB[..i+newJ]) == multiset(c[..i]) + multiset(d[..j]) + multiset([d[j]]);\n    assert multiset(d[..newJ]) == multiset(d[..j+1]) == multiset(d[..j]) + multiset([d[j]]);\n    assert multiset(newB[..i+newJ]) == multiset(c[..i]) + multiset(d[..newJ]);\n}\n\nmethod {:verified} Merge(b: array<int>, c: array<int>, d: array<int>)\n    requires b != c && b != d && b.Length == c.Length + d.Length\n    requires Sorted(c[..]) && Sorted(d[..])\n    ensures Sorted(b[..]) && multiset(b[..]) == multiset(c[..])+multiset(d[..])\n    modifies b\n{\n    var i := 0;\n    var j := 0;\n    \n    while i < c.Length || j < d.Length\n        invariant InvSorted(b[..], c[..], d[..], i, j)\n        invariant InvSubSet(b[..], c[..], d[..], i, j)\n    {\n        if i < c.Length && (j >= d.Length || c[i] <= d[j]) {\n            b[i+j] := c[i];\n            MergeHelper(b, c, d, i, j);\n            i := i + 1;\n        } else {\n            b[i+j] := d[j];\n            MergeHelper2(b, c, d, i, j);\n            j := j + 1;\n        }\n    }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod MergeSort(a: array<int>) returns (b: array<int>)\n    ensures b.Length == a.Length && Sorted(b[..]) && multiset(a[..]) == multiset(b[..])\n    decreases a.Length\n// </vc-spec>\n// <vc-code>\n{\n    if a.Length <= 1 {\n        b := new int[a.Length];\n        if a.Length == 1 {\n            b[0] := a[0];\n        }\n    } else {\n        var mid := a.Length / 2;\n        var leftArr := a[..mid].ToArray();\n        var rightArr := a[mid..].ToArray();\n        var sortedLeft := MergeSort(leftArr);\n        var sortedRight := MergeSort(rightArr);\n        b := new int[a.Length];\n        Merge(sortedLeft, sortedRight, b);\n    }\n}\n// </vc-code>\n\n", "", "", ""], ["Prog-Fun-Solutions_tmp_tmp7_gmnz5f_extra_mod_mod.dfy", "root", true, "", "", false, "Prog-Fun-Solutions_tmp_tmp7_gmnz5f_extra_mod_mod.dfy", "// <vc-preamble>\nghost function f(n: nat): nat {\n    if n == 0 then 1 \n    else if n%2 == 0 then 1 + 2*f(n/2)\n    else 2*f(n/2)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod mod(n:nat) returns (a:nat) \nensures a == f(n)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "ghost function f(n: nat): nat {\n    if n == 0 then 1 \n    else if n%2 == 0 then 1 + 2*f(n/2)\n    else 2*f(n/2)\n}\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod mod(n:nat) returns (a:nat) \nensures a == f(n)\n// </vc-spec>\n// <vc-code>\n{\n  if n == 0 {\n    return 1;\n  }\n  var half := mod(n/2);\n  if n % 2 == 0 {\n    return 1 + 2 * half;\n  } else {\n    return 2 * half;\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_advanced_examples_Percentile_Percentile.dfy", "root", false, "", "", false, "Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_advanced_examples_Percentile_Percentile.dfy", "// <vc-preamble>\nfunction SumUpto(A: array<real>, end: int): real\n  requires -1 <= end < A.Length\n  reads A\n{\n  if end == -1 then\n    0.0\n  else\n    A[end] + SumUpto(A, end-1)\n}\n\nfunction Sum(A: array<real>): real\n  reads A\n{\n  SumUpto(A, A.Length-1)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Percentile(p: real, A: array<real>, total: real) returns (i: int)\n  requires forall i | 0 <= i < A.Length :: A[i] > 0.0\n  requires 0.0 <= p <= 100.0\n  requires total == Sum(A)\n  requires total > 0.0\n  ensures -1 <= i < A.Length\n  ensures SumUpto(A, i) <= (p/100.0) * total\n  ensures i+1 < A.Length ==> SumUpto(A, i+1) > (p/100.0) * total\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny_tmp_tmp0wu8wmfr_tests_InsertionSortSeq_InsertionSort.dfy", "root", true, "", "", false, "Dafny_tmp_tmp0wu8wmfr_tests_InsertionSortSeq_InsertionSort.dfy", "// <vc-preamble>\npredicate IsSorted( s: seq<int> )\n{\n    forall p,q | 0<=p<q<|s| :: s[p]<=s[q]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod InsertionSort( s: seq<int> ) returns ( r: seq<int> )\n    ensures multiset(r) == multiset(s);\n    ensures IsSorted(r);\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "// Insertion sort.\n//\n// Author: Snorri Agnarsson, snorri@hi.is\n\n\npredicate IsSorted( s: seq<int> )\n{\n    forall p,q | 0<=p<q<|s| :: s[p]<=s[q]\n}\n\n// <vc-helpers>\nlemma Lemma_SortedAppend(s: seq<int>, x: int)\n    requires IsSorted(s)\n    requires |s| == 0 || x >= s[|s|-1]\n    ensures IsSorted(s + [x])\n{\n    if |s| == 0 {\n        calc {\n            IsSorted(s + [x]);\n        == { assert s + [x] == [x]; }\n            IsSorted([x]);\n        == { assert forall p,q | 0<=p<q<1 :: false; }\n            true;\n        }\n    } else {\n        var s' := s + [x];\n        forall p,q | 0<=p<q<|s'||\n            ensures s'[p] <= s'[q]\n        {\n            if q < |s'| {\n                if q < |s'| - 1 {\n                    assert s'[p] == s[p] && s'[q] == s[q];\n                } else if p < |s'| - 1 {\n                    assert s'[p] == s[p] && s'[q] == x;\n                    assert s[p] <= s[|s| - 1] <= x;\n                } else {\n                    assert p == |s'| - 1 && q == |s'|;\n                }\n            }\n        }\n    }\n}\n\nmethod Insert(s: seq<int>, i: int, x: int) returns (r: seq<int>)\n    requires 0 <= i <= |s|\n    ensures multiset(r) == multiset(s) + multiset([x])\n    ensures |r| == |s| + 1\n    ensures forall j | 0 <= j < i :: r[j] == s[j]\n    ensures r[i] == x\n    ensures forall j | i <= j < |s| :: r[j+1] == s[j]\n{\n    var left := s[0..i];\n    var right := s[i..];\n    r := left + [x] + right;\n}\n\nlemma Lemma_InsertPreservesSorted(s: seq<int>, i: int, x: int)\n    requires 0 <= i <= |s|\n    requires IsSorted(s)\n    requires (i == 0 || x >= s[i-1])\n    requires (i == |s| || x <= s[i])\n    ensures IsSorted(Insert(s, i, x))\n{\n    var newSeq := Insert(s, i, x);\n    forall p,q | 0<=p<q<|newSeq|\n        ensures newSeq[p] <= newSeq[q]\n    {\n        if p < i && q < i {\n            assert newSeq[p] == s[p];\n            assert newSeq[q] == s[q];\n            assert s[p] <= s[q];\n        } else if p < i && q == i {\n            assert newSeq[p] == s[p];\n            assert newSeq[q] == x;\n            if i>0 {\n                assert s[p] <= s[i-1];\n                assert s[i-1] <= x;\n            }\n        } else if p < i && q > i {\n            assert newSeq[p] == s[p];\n            assert newSeq[q] == s[q-1];\n            if i>0 {\n                assert s[p] <= s[i-1];\n                assert s[i-1] <= x;\n            }\n            assert x <= s[i];\n            assert s[i] <= s[q-1];\n        } else if p == i && q > i {\n            assert newSeq[p] == x;\n            assert newSeq[q] == s[q-1];\n            assert x <= s[i];\n            assert s[i] <= s[q-1];\n        } else if p > i && q > i {\n            assert newSeq[p] == s[p-1];\n            assert newSeq[q] == s[q-1];\n            assert s[p-1] <= s[q-1];\n        }\n    }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod InsertionSort( s: seq<int> ) returns ( r: seq<int> )\n    ensures multiset(r) == multiset(s);\n    ensures IsSorted(r);\n// </vc-spec>\n// <vc-code>\n{\n    if |s| == 0 {\n        return s;\n    } else {\n        var sorted := InsertionSort(s[0..|s|-1]);\n        var last := s[|s|-1];\n        var i := 0;\n        while i < |sorted| && sorted[i] <= last\n            invariant 0 <= i <= |sorted|\n            invariant forall j | 0 <= j < i :: sorted[j] <= last\n        {\n            i := i + 1;\n        }\n        var newSorted := Insert(sorted, i, last);\n        Lemma_InsertPreservesSorted(sorted, i, last);\n        return newSorted;\n    }\n}\n// </vc-code>\n\n", "", "", ""], ["Clover_selectionsort_SelectionSort.dfy", "root", true, "", "", false, "Clover_selectionsort_SelectionSort.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SelectionSort(a: array<int>)\n  modifies a\n  ensures forall i,j :: 0 <= i < j < a.Length ==> a[i] <= a[j]\n  ensures multiset(a[..]) == old(multiset(a[..]))\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\npredicate sorted(a: array<int>)\n  reads a\n{\n  forall i, j :: 0 <= i < j < a.Length ==> a[i] <= a[j]\n}\n\nlemma swap_multiset<T>(a: array<T>, i: int, j: int)\n  requires 0 <= i < a.Length && 0 <= j < a.Length\n  ensures multiset(a[..]) == multiset(a[i := a[j]][j := a[i]][..])\n{\n  var a1 := a[i := a[j]];\n  var a2 := a1[j := a[i]];\n  calc {\n    multiset(a2[..]);\n    == multiset(a1[..]) - multiset([a1[j]]) + multiset([a[i]]);\n      { \n        assert a1[j] == a[j];\n        assert multiset(a1[..]) == multiset(a[..]) - multiset([a[i]]) + multiset([a[j]]);\n      }\n    == multiset(a[..]) - multiset([a[i]]) + multiset([a[j]]) - multiset([a[j]]) + multiset([a[i]]);\n    == multiset(a[..]);\n  }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod SelectionSort(a: array<int>)\n  modifies a\n  ensures forall i,j :: 0 <= i < j < a.Length ==> a[i] <= a[j]\n  ensures multiset(a[..]) == old(multiset(a[..]))\n// </vc-spec>\n// <vc-code>\n{\n  var n := a.Length;\n  for i := 0 to n\n    invariant 0 <= i <= n\n    invariant forall j, k :: 0 <= j < k < i ==> a[j] <= a[k]\n    invariant forall j :: i <= j < n ==> forall k :: 0 <= k < i ==> a[k] <= a[j]\n    invariant multiset(a[..]) == old(multiset(a[..]))\n  {\n    if i < n {\n      var m := i;\n      for j := i + 1 to n\n        invariant i <= j <= n\n        invariant i <= m < n\n        invariant forall k :: i <= k < j ==> a[m] <= a[k]\n      {\n        if j < n && a[j] < a[m] {\n          m := j;\n        }\n      }\n      if i != m {\n        var t := a[i];\n        a[i] := a[m];\n        a[m] := t;\n        swap_multiset(a, i, m);\n      }\n    }\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["Clover_array_concat_concat.dfy", "root", true, "", "", false, "Clover_array_concat_concat.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod concat(a:array<int>, b:array<int>) returns (c:array<int>)\n  ensures c.Length==b.Length+a.Length\n  ensures forall k :: 0 <= k < a.Length ==> c[k] == a[k]\n  ensures forall k :: 0 <= k < b.Length ==> c[k+a.Length] == b[k]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod concat(a:array<int>, b:array<int>) returns (c:array<int>)\n  ensures c.Length==b.Length+a.Length\n  ensures forall k :: 0 <= k < a.Length ==> c[k] == a[k]\n  ensures forall k :: 0 <= k < b.Length ==> c[k+a.Length] == b[k]\n// </vc-spec>\n// <vc-code>\n{\n  c := new int[a.Length + b.Length];\n  var i := 0;\n  while i < a.Length\n    invariant 0 <= i <= a.Length\n    invariant forall j :: 0 <= j < i ==> c[j] == a[j]\n  {\n    c[i] := a[i];\n    i := i + 1;\n  }\n  var j := 0;\n  while j < b.Length\n    invariant 0 <= j <= b.Length\n    invariant forall k :: 0 <= k < a.Length ==> c[k] == a[k]\n    invariant forall k :: 0 <= k < j ==> c[a.Length + k] == b[k]\n  {\n    c[a.Length + j] := b[j];\n    j := j + 1;\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_69_ContainsSequence.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_69_ContainsSequence.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ContainsSequence(list: seq<seq<int>>, sub: seq<int>) returns (result: bool)\n    ensures result <==> (exists i :: 0 <= i < |list| && sub == list[i])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-exercise_tmp_tmpouftptir_zapNegatives_ZapNegatives.dfy", "root", false, "", "", false, "dafny-exercise_tmp_tmpouftptir_zapNegatives_ZapNegatives.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ZapNegatives(a: array<int>) \nmodifies a\nensures forall i :: 0 <= i < a.Length ==> if old(a[i]) < 0 then a[i] == 0 \n                                            else a[i] == old(a[i])\nensures a.Length == old(a).Length\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_632_swap.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_632_swap.dfy", "// <vc-preamble>\nfunction count(arr: seq<int>, value: int) : (c: nat)\n    ensures c <= |arr|\n{\n    if |arr| == 0 then 0 else (if arr[0] == value then 1 else 0) + count(arr[1..], value)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod swap(arr: array<int>, i: int, j: int)\n    requires arr.Length > 0\n    requires 0 <= i < arr.Length && 0 <= j < arr.Length\n    modifies arr\n    ensures arr[i] == old(arr[j]) && arr[j] == old(arr[i])\n    ensures forall k :: 0 <= k < arr.Length && k != i && k != j ==> arr[k] == old(arr[k])\n    ensures multiset(arr[..]) == multiset(old(arr[..]))\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-language-server_tmp_tmpkir0kenl_Test_dafny4_Bug165_Select.dfy", "root", false, "", "", false, "dafny-language-server_tmp_tmpkir0kenl_Test_dafny4_Bug165_Select.dfy", "// <vc-preamble>\ntype T\nfunction f(a: T) : bool\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Select(s1: seq<T>) returns (r: seq<T>)\n  ensures (forall e: T  :: f(e) ==> multiset(s1)[e] == multiset(r)[e])\n  ensures (forall e: T  :: (!f(e)) ==> 0 == multiset(r)[e])\n\nmethod Main(s1: seq<T>)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafleet_tmp_tmpa2e4kb9v_0001-0050_0005-longest-palindromic-substring_longestPalindrome.dfy", "root", false, "", "", false, "dafleet_tmp_tmpa2e4kb9v_0001-0050_0005-longest-palindromic-substring_longestPalindrome.dfy", "// <vc-preamble>\nghost predicate palindromic(s: string, i: int, j: int)\n  requires 0 <= i <= j <= |s|\n  decreases j - i\n{\n  j - i < 2 || (s[i] == s[j-1] && palindromic(s, i+1, j-1))\n}\n\nmethod expand_from_center(s: string, i0: int, j0: int) returns (lo: int, hi: int)\n  requires 0 <= i0 <= j0 <= |s|\n  requires palindromic(s, i0, j0)\n  ensures 0 <= lo <= hi <= |s| && palindromic(s, lo, hi)\n  ensures forall i, j | 0 <= i <= j <= |s| && palindromic(s, i, j)\n    && i + j == i0 + j0\n    :: j - i <= hi - lo\n{\n  assume{:axiom} false;\n}\n\nfunction insert_bogus_chars(s: string, bogus: char): (s': string)\n  ensures |s'| == 2 * |s| + 1\n  ensures forall i | 0 <= i <= |s| :: s'[i * 2] == bogus\n  ensures forall i | 0 <= i < |s| :: s'[i * 2 + 1] == s[i]\n{\n  if s == \"\" then\n    [bogus]\n  else\n    var s'_old := insert_bogus_chars(s[1..], bogus);\n    var s'_new := [bogus] + [s[0]] + s'_old;\n    assert forall i | 1 <= i <= |s| :: s'_new[i * 2] == s'_old[(i-1) * 2];\n    s'_new\n}\n\nfunction argmax(a: array<int>, start: int): (res: (int, int))\n  reads a\n  requires 0 <= start < a.Length\n  ensures start <= res.0 < a.Length && a[res.0] == res.1\n  ensures forall i | start <= i < a.Length :: a[i] <= res.1\n  decreases a.Length - start\n{\n  if start == a.Length - 1 then\n    (start, a[start])\n  else\n    var (i, v) := argmax(a, start + 1);\n    if a[start] >= v then (start, a[start]) else (i, v)\n}\n\nghost predicate inbound_radius(s': string, c: int, r: int)\n{\n  r >= 0 && 0 <= c-r && c+r < |s'|\n}\n\nghost predicate palindromic_radius(s': string, c: int, r: int)\n  requires inbound_radius(s', c, r)\n{\n  palindromic(s', c-r, c+r+1)\n}\n\nghost predicate max_radius(s': string, c: int, r: int)\n{\n  && inbound_radius(s', c, r)\n  && palindromic_radius(s', c, r)\n  && (forall r' | r' > r && inbound_radius(s', c, r') :: !palindromic_radius(s', c, r'))\n}\n\nghost function abs(x: int): int {\n  if x >= 0 then x else -x\n}\n\nghost predicate max_interval_for_same_center(s: string, k: int, lo: int, hi: int) {\n  && 0 <= lo <= hi <= |s|\n  && lo + hi == k\n  && palindromic(s, lo, hi)\n  && (forall i, j | 0 <= i <= j <= |s| && palindromic(s, i, j) && i + j == k :: j - i <= hi - lo)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod longestPalindrome(s: string) returns (ans: string, lo: int, hi: int)\n  ensures 0 <= lo <= hi <= |s| && ans == s[lo..hi]\n  ensures palindromic(s, lo, hi)\n  ensures forall i, j | 0 <= i <= j <= |s| && palindromic(s, i, j) :: j - i <= hi - lo\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny_tmp_tmpmvs2dmry_examples2_gcdCalc.dfy", "root", true, "", "", false, "Dafny_tmp_tmpmvs2dmry_examples2_gcdCalc.dfy", "// <vc-preamble>\nfunction gcd(m: nat, n: nat) : nat\nrequires m>0 && n>0;\ndecreases m+n\n{\n    if(m==n) then n \n    else if( m > n) then gcd(m-n,n)\n    else gcd(m, n-m)\n}\n\nfunction exp(x: real, n: nat) :real\ndecreases n;\n{\n    if(n == 0) then 1.0\n    else if (x==0.0) then 0.0\n    else if (n  ==0 && x == 0.0) then 1.0\n    else x*exp(x, n-1)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod gcdCalc(m: nat, n: nat) returns (res: nat)\nrequires m>0 && n>0;\nensures res == gcd(m,n);\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "function gcd(m: nat, n: nat) : nat\nrequires m>0 && n>0;\ndecreases m+n\n{\n    if(m==n) then n \n    else if( m > n) then gcd(m-n,n)\n    else gcd(m, n-m)\n}\n\n\nfunction exp(x: real, n: nat) :real\ndecreases n;\n{\n    if(n == 0) then 1.0\n    else if (x==0.0) then 0.0\n    else if (n  ==0 && x == 0.0) then 1.0\n    else x*exp(x, n-1)\n}\n\n// method add_by_inc_vc(x: int, y:int) returns (z:int)\n// {\n//     assume x>=0 && y>=0;\n//     z := x;\n//     var i := 0;\n//     assert 0 <= i <= y && z == x + i;\n//     z,i = *,*;\n//     assume 0 <= i <= y && z == x + i;\n//     if (i < y) \n//     {\n//         ghost var rank0 := y-i\n//         z := z+1;\n//         i := i+1; \n//         assert(y-i < rank0)\n//         ghost var rank1 := y-i\n//         assert(rank1 < rank0)\n//         assert(rank1 >=0)\n//         assert 0 <= i <= y && z == x + i;\n//         assume(false);\n//     }\n//     assert (z == x+y);\n//     assert (i == y);\n//     return z;\n// }\n\n// <vc-helpers>\nlemma gcd_property(a: nat, b: nat)\n  requires a>0 && b>0;\n  ensures a > b ==> gcd(a, b) == gcd(a-b, b);\n  ensures a < b ==> gcd(a, b) == gcd(a, b-a);\n{\n  if a == b {\n  } else if a > b {\n    calc {\n      gcd(a, b);\n      ==  { assert a > b; }\n      gcd(a-b, b);\n    }\n  } else {\n    calc {\n      gcd(a, b);\n      ==  { assert a < b; }\n      gcd(a, b-a);\n    }\n  }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod gcdCalc(m: nat, n: nat) returns (res: nat)\nrequires m>0 && n>0;\nensures res == gcd(m,n);\n// </vc-spec>\n// <vc-code>\n{\n  var a := m;\n  var b := n;\n  while (a != b)\n    invariant a > 0 && b > 0 && gcd(a, b) == gcd(m, n);\n  {\n    if (a > b) {\n      gcd_property(a, b);\n      a := a - b;\n    } else {\n      gcd_property(a, b);\n      b := b - a;\n    }\n  }\n  res := a;\n}\n// </vc-code>\n\n", "", "", ""], ["Clover_triple4_Triple.dfy", "root", true, "", "", false, "Clover_triple4_Triple.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Triple (x:int) returns (r:int)\n  ensures r==3*x\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod Triple (x:int) returns (r:int)\n  ensures r==3*x\n// </vc-spec>\n// <vc-code>\n{\n  return 3*x;\n}\n// </vc-code>\n\n", "", "", ""], ["dafny_tmp_tmp59p638nn_examples_SelectionSort_SelectionSort.dfy", "root", false, "", "", false, "dafny_tmp_tmp59p638nn_examples_SelectionSort_SelectionSort.dfy", "// <vc-preamble>\ntwostate predicate Preserved(a: array<int>, left: nat, right: nat)\n    reads a\n    requires left <= right <= a.Length\n{\n    multiset(a[left..right]) == multiset(old(a[left..right]))\n}\n\nghost predicate Ordered(a: array<int>, left: nat, right: nat)\n    reads a\n    requires left <= right <= a.Length\n{\n    forall i: nat :: 0 < left <= i < right ==> a[i-1] <= a[i]\n}\n\ntwostate predicate Sorted(a: array<int>)\n    reads a\n{\n    Ordered(a,0,a.Length) && Preserved(a,0,a.Length)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SelectionSort(a: array<int>)\n    modifies a\n    ensures Sorted(a)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["MFES_2021_tmp_tmpuljn8zd9_Exams_Special_Exam_03_2020_4_CatalanNumbers_calcC.dfy", "root", true, "", "", false, "MFES_2021_tmp_tmpuljn8zd9_Exams_Special_Exam_03_2020_4_CatalanNumbers_calcC.dfy", "// <vc-preamble>\nfunction C(n: nat): nat \n    decreases n\n{\n    if n == 0 then 1 else (4 * n - 2) * C(n-1) / (n + 1) \n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod calcC(n: nat) returns (res: nat)\n    ensures res == C(n)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "function C(n: nat): nat \n    decreases n\n{\n    if n == 0 then 1 else (4 * n - 2) * C(n-1) / (n + 1) \n}\n\n// <vc-helpers>\nghost method MultiplyAndDivide(a: nat, b: nat, c: nat) returns (q: nat, r: nat)\n    requires c != 0\n    ensures a * b == q * c + r\n    ensures r < c\n{\n    q := (a * b) / c;\n    r := (a * b) % c;\n}\n\nlemma DivMod(a: nat, b: nat)\n    requires b != 0\n    ensures var q := a / b;\n            var r := a % b;\n            a == q * b + r && r < b\n{\n}\n\nlemma MulDivIsMul(a: nat, b: nat, c: nat)\n    requires c != 0\n    ensures var q := (a * b) / c;\n            var r := (a * b) % c;\n            q * c <= a * b && a * b < (q + 1) * c\n{\n    DivMod(a * b, c);\n    calc == {\n        a * b;\n        q * c + r;\n        { assert r < c; }\n        q * c + r;\n    }\n}\n\nlemma C_n_correct(n: nat)\n    decreases n\n    ensures C(n) == if n == 0 then 1 else (4 * n - 2) * C(n-1) / (n + 1)\n{\n    if n == 0 {\n    } else {\n        calc == {\n            C(n);\n            (4 * n - 2) * C(n-1) / (n + 1);\n        }\n        C_n_correct(n-1);\n    }\n}\n\nlemma CalcC_Inductive(n: nat)\n    decreases n\n    ensures calcC(n) == C(n)\n{\n    if n == 0 {\n    } else {\n        calc == {\n            calcC(n);\n            (4 * n - 2) * calcC(n-1) / (n + 1);\n            { CalcC_Inductive(n-1); }\n            (4 * n - 2) * C(n-1) / (n + 1);\n            C(n);\n        }\n    }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod calcC(n: nat) returns (res: nat)\n    ensures res == C(n)\n// </vc-spec>\n// <vc-code>\n{\n    if n == 0 {\n        res := 1;\n    } else {\n        var c_prev := calcC(n - 1);\n        var numerator := (4 * n - 2) * c_prev;\n        var denominator := n + 1;\n        res := numerator / denominator;\n        CalcC_Inductive(n);\n    }\n}\n// </vc-code>\n\n", "", "", ""], ["assertive-programming-assignment-1_tmp_tmp3h_cj44u_ProdAndCount_ProdAndCount.dfy", "root", false, "", "", false, "assertive-programming-assignment-1_tmp_tmp3h_cj44u_ProdAndCount_ProdAndCount.dfy", "// <vc-preamble>\nfunction RecursivePositiveProduct(q: seq<int>): int\n    decreases |q|\n{\n    if q == [] then 1\n    else if q[0] <= 0 then RecursivePositiveProduct(q[1..])\n    else q[0] * RecursivePositiveProduct(q[1..])\n}\n\nfunction RecursiveCount(key: int, q: seq<int>): int\n    decreases |q|\n{\n    if q == [] then 0\n    else if q[|q|-1] == key then 1+RecursiveCount(key, q[..|q|-1])\n    else RecursiveCount(key, q[..|q|-1])\n}\n\nfunction county(elem: int, key: int): int{\n    if elem==key then 1 else 0\n}\n\nfunction prody(elem: int): int{\n    if elem <= 0 then 1 else elem\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ProdAndCount(q: seq<int>, key: int) returns (prod: int, count: nat)\n    ensures prod == RecursivePositiveProduct(q)\n    ensures count == RecursiveCount(key, q)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_online_max_onlineMax.dfy", "root", true, "", "", false, "Clover_online_max_onlineMax.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod onlineMax(a: array<int>, x: int) returns (ghost m:int, p:int)\n  requires 1<=x<a.Length\n  requires a.Length!=0\n  ensures x<=p<a.Length\n  ensures forall i::0<=i<x==> a[i]<=m\n  ensures exists i::0<=i<x && a[i]==m\n  ensures x<=p<a.Length-1 ==> (forall i::0<=i<p ==> a[i]<a[p])\n  ensures (forall i::x<=i<a.Length && a[i]<=m) ==> p==a.Length-1\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod onlineMax(a: array<int>, x: int) returns (ghost m:int, p:int)\n  requires 1<=x<a.Length\n  requires a.Length!=0\n  ensures x<=p<a.Length\n  ensures forall i::0<=i<x==> a[i]<=m\n  ensures exists i::0<=i<x && a[i]==m\n  ensures x<=p<a.Length-1 ==> (forall i::0<=i<p ==> a[i]<a[p])\n  ensures (forall i::x<=i<a.Length && a[i]<=m) ==> p==a.Length-1\n// </vc-spec>\n// <vc-code>\n{\n  var maxVal := a[0];\n  var i := 1;\n  while i < x\n      invariant 1 <= i <= x\n      invariant forall j :: 0 <= j < i ==> a[j] <= maxVal\n      invariant exists j :: 0 <= j < i && a[j] == maxVal\n  {\n      if a[i] > maxVal {\n          maxVal := a[i];\n      }\n      i := i + 1;\n  }\n  m := maxVal;\n\n  p := x;\n  while p < a.Length && a[p] <= maxVal\n      invariant x <= p <= a.Length\n      invariant forall j :: x <= j < p ==> a[j] <= maxVal\n  {\n      p := p + 1;\n  }\n\n  if p == a.Length {\n      p := a.Length - 1;\n  }\n\n  return m, p;\n}\n// </vc-code>\n\n", "", "", ""], ["Correctness_tmp_tmpwqvg5q_4_Sorting_Tangent_BinarySearch.dfy", "root", true, "", "", false, "Correctness_tmp_tmpwqvg5q_4_Sorting_Tangent_BinarySearch.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod BinarySearch(a: array<int>, circle: int)\n  returns (n: int)\n  requires forall i ::\n           1 <= i < a.Length\n           ==> a[i-1] < a[i]\n  requires forall i, j ::\n           0 <= i < j < a.Length ==>\n           a[i] < a[j]\n  ensures 0 <= n <= a.Length\n  ensures forall i ::\n          0 <= i < n ==>\n          a[i] < circle\n  ensures forall i ::\n          n <= i < a.Length ==>\n          circle <= a[i]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "/**\n  Ather, Mohammad Faiz (s4648481/3)\n  CSSE3100\n  Assignemnt 3\n  The University of Queensland\n */\n\n// Question 1\n\n// Author: Leino, Title: Program Proofs\n\n// <vc-helpers>\nlemma SortedStrictlyIncreasing(a: array<int>)\n  requires forall i :: 1 <= i < a.Length ==> a[i-1] < a[i]\n  ensures forall i, j :: 0 <= i < j < a.Length ==> a[i] < a[j]\n{\n  if a.Length <= 1 {\n    // Trivially true\n  } else {\n    var j := 1;\n    while j < a.Length\n      invariant 1 <= j <= a.Length\n      invariant forall i, k :: 0 <= i < k < j ==> a[i] < a[k]\n    {\n      assert a[j-1] < a[j];\n      \n      forall k | 0 <= k < j\n        ensures a[k] < a[j]\n      {\n        if k < j - 1 {\n          assert a[k] < a[j-1];\n          assert a[j-1] < a[j];\n        } else {\n          assert a[k] < a[j];\n        }\n      }\n      j := j + 1;\n    }\n  }\n}\n\npredicate BinarySearchLoopInvariant(a: array<int>, circle: int, lo: int, hi: int) reads a {\n  0 <= lo <= hi <= a.Length &&\n  forall i :: 0 <= i < lo ==> a[i] < circle &&\n  forall i :: hi <= i < a.Length ==> circle <= a[i]\n}\n\nlemma MaintainInvariantLeft(a: array<int>, circle: int, lo: int, hi: int, mid: int)\n  requires BinarySearchLoopInvariant(a, circle, lo, hi)\n  requires lo <= mid < hi\n  requires a[mid] < circle\n  ensures BinarySearchLoopInvariant(a, circle, mid + 1, hi)\n{\n  assert forall i :: 0 <= i < mid + 1 ==> a[i] < circle by {\n    forall i | 0 <= i < mid + 1 {\n      if i < mid {\n        calc {\n          a[i] < a[mid];  // SortedStrictlyIncreasing\n          a[mid] < circle;  // premise\n        }\n      } else if i == mid {\n        assert a[i] < circle;\n      }\n    }\n  }\n  assert forall i :: hi <= i < a.Length ==> circle <= a[i];  // unchanged\n}\n\nlemma MaintainInvariantRight(a: array<int>, circle: int, lo: int, hi: int, mid: int)\n  requires BinarySearchLoopInvariant(a, circle, lo, hi)\n  requires lo <= mid < hi\n  requires a[mid] >= circle\n  ensures BinarySearchLoopInvariant(a, circle, lo, mid)\n{\n  assert forall i :: mid <= i < a.Length ==> circle <= a[i] by {\n    forall i | mid <= i < a.Length {\n      if i >= hi {\n        assert circle <= a[i];  // from invariant\n      } else {\n        calc {\n          circle <= a[mid];  // premise (a[mid] >= circle)\n          a[mid] < a[i];  // SortedStrictlyIncreasing\n        }\n      }\n    }\n  }\n  assert forall i :: 0 <= i < lo ==> a[i] < circle;  // unchanged\n}\n// </vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod BinarySearch(a: array<int>, circle: int)\n  returns (n: int)\n  requires forall i ::\n           1 <= i < a.Length\n           ==> a[i-1] < a[i]\n  requires forall i, j ::\n           0 <= i < j < a.Length ==>\n           a[i] < a[j]\n  ensures 0 <= n <= a.Length\n  ensures forall i ::\n          0 <= i < n ==>\n          a[i] < circle\n  ensures forall i ::\n          n <= i < a.Length ==>\n          circle <= a[i]\n// </vc-spec>\n// <vc-code>\n{\n  SortedStrictlyIncreasing(a);\n  \n  var lo := 0;\n  var hi := a.Length;\n  \n  while lo < hi\n    invariant BinarySearchLoopInvariant(a, circle, lo, hi)\n  {\n    var mid := lo + (hi - lo) / 2;\n    \n    if a[mid] < circle {\n      MaintainInvariantLeft(a, circle, lo, hi, mid);\n      lo := mid + 1;\n    } else {\n      MaintainInvariantRight(a, circle, lo, hi, mid);\n      hi := mid;\n    }\n  }\n  \n  n := lo;\n}\n// </vc-code>\n\n", "", "", ""], ["Dafny_Learning_Experience_tmp_tmpuxvcet_u_week1_7_A2_Q1_trimmed_copy_-_\u526f\u672c_PreCompute.dfy", "root", false, "", "", false, "Dafny_Learning_Experience_tmp_tmpuxvcet_u_week1_7_A2_Q1_trimmed_copy_-_\u526f\u672c_PreCompute.dfy", "// <vc-preamble>\nghost function Count(hi: nat, s:seq<int>): int\n    requires 0 <= hi <= |s|\n    decreases hi\n{\n    if hi == 0 then 0\n    else if s[hi-1]%2 == 0 then 1 + Count(hi-1, s) else Count(hi-1, s)\n}\n\nmethod ComputeCount(CountIndex:nat, a:seq<int>,b:array<int>) returns (p:nat)\n    requires  CountIndex == 0 || (|a| == b.Length && 1 <= CountIndex <= |a|)\n    decreases CountIndex\n    modifies b\n    ensures p == Count(CountIndex,a)\n{\n  assume{:axiom} false;\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod PreCompute(a:array<int>,b:array<int>)returns(p:nat)\n    requires a.Length == b.Length \n    modifies b\n    ensures (b.Length == 0 || (a.Length == b.Length && 1 <= b.Length <= a.Length)) &&\n    forall p::p == Count(b.Length,a[..]) ==> p==Count(b.Length,a[..])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Software-building-and-verification-Projects_tmp_tmp5tm1srrn_CVS-projeto_aula3_maxArrayReverse.dfy", "root", false, "", "", false, "Software-building-and-verification-Projects_tmp_tmp5tm1srrn_CVS-projeto_aula3_maxArrayReverse.dfy", "// <vc-preamble>\nfunction fib(n : nat) : nat\n{\n  if (n==0) then 1 else\n  if (n==1) then 1 else fib(n-1)+fib(n-2)\n}\n\ndatatype List<T> = Nil | Cons(head: T, tail: List<T>)\n\nfunction add(l : List<int>) : int {\n  match l\n  case Nil => 0\n  case Cons(x,xs) => x + add(xs)\n}\n\nfunction sum(n: nat) : nat\n{\n  if (n == 0) then 0 else n + sum(n-1)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod maxArrayReverse(arr : array<int>) returns (max: int)\n  requires arr.Length > 0\n  ensures forall i: int :: 0 <= i < arr.Length ==> arr[i] <= max\n  ensures exists x::0 <= x < arr.Length && arr[x] == max\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_605_IsPrime.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_605_IsPrime.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod IsPrime(n: int) returns (result: bool)\n    requires n >= 2\n    ensures result <==> (forall k :: 2 <= k < n ==> n % k != 0)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_776_CountVowelNeighbors.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_776_CountVowelNeighbors.dfy", "// <vc-preamble>\npredicate IsVowel(c: char)\n{\n    c in {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod CountVowelNeighbors(s: string) returns (count: int)\n    ensures count >= 0\n    ensures count == | set i: int | 1 <= i < |s|-1 && IsVowel(s[i-1]) && IsVowel(s[i+1]) |\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Final-Project-Dafny_tmp_tmpmcywuqox_Attempts_Quick_Sort_threshold.dfy", "root", true, "", "", false, "Final-Project-Dafny_tmp_tmpmcywuqox_Attempts_Quick_Sort_threshold.dfy", "// <vc-preamble>\npredicate quickSorted(Seq: seq<int>)\n{\n  forall idx_1, idx_2 :: 0 <= idx_1 < idx_2 < |Seq| ==> Seq[idx_1] <= Seq[idx_2]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod threshold(thres:int,Seq:seq<int>) returns (Seq_1:seq<int>,Seq_2:seq<int>)\n  ensures (forall x | x in Seq_1 :: x <= thres) && (forall x | x in Seq_2 :: x >= thres)\n  ensures |Seq_1| + |Seq_2| == |Seq| \n  ensures multiset(Seq_1) + multiset(Seq_2) == multiset(Seq)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "predicate quickSorted(Seq: seq<int>)\n{\n  forall idx_1, idx_2 :: 0 <= idx_1 < idx_2 < |Seq| ==> Seq[idx_1] <= Seq[idx_2]\n}\n\n// <vc-helpers>\nlemma MultisetSliceAppend(s: seq<int>, i: int)\n  requires 0 <= i < |s|\n  ensures multiset(s[0..i+1]) == multiset(s[0..i]) + multiset([s[i]])\n{\n  assert s[0..i+1] == s[0..i] + [s[i]];\n  assert multiset(s[0..i] + [s[i]]) == multiset(s[0..i]) + multiset([s[i]]);\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod threshold(thres:int,Seq:seq<int>) returns (Seq_1:seq<int>,Seq_2:seq<int>)\n  ensures (forall x | x in Seq_1 :: x <= thres) && (forall x | x in Seq_2 :: x >= thres)\n  ensures |Seq_1| + |Seq_2| == |Seq| \n  ensures multiset(Seq_1) + multiset(Seq_2) == multiset(Seq)\n// </vc-spec>\n// <vc-code>\n{\n  var left := [];\n  var right := [];\n  var i := 0;\n\n  while i < |Seq|\n    invariant 0 <= i <= |Seq|\n    invariant forall x :: x in left ==> x <= thres\n    invariant forall x :: x in right ==> x >= thres\n    invariant |left| + |right| == i\n    invariant multiset(left) + multiset(right) == multiset(Seq[0..i])\n  {\n    if (Seq[i] <= thres) {\n      left := left + [Seq[i]];\n    } else {\n      right := right + [Seq[i]];\n    }\n    MultisetSliceAppend(Seq, i);\n    i := i + 1;\n  }\n\n  return left, right;\n}\n// </vc-code>\n\n", "", "", ""], ["dafny_examples_tmp_tmp8qotd4ez_leetcode_0001-two-sum_TwoSum.dfy", "root", false, "", "", false, "dafny_examples_tmp_tmp8qotd4ez_leetcode_0001-two-sum_TwoSum.dfy", "// <vc-preamble>\npredicate InMap(nums: seq<int>, m: map<int, int>, t: int) {\n  forall j :: 0 <= j < |nums| ==> t - nums[j] in m\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod TwoSum(nums: array<int>, target: int) returns (r: (int, int))\n  ensures 0 <= r.0 ==> 0 <= r.0 < r.1 < nums.Length && \n                       nums[r.0] + nums[r.1] == target &&\n                       forall i, j :: 0 <= i < j < r.1 ==> nums[i] + nums[j] != target\n  ensures r.0 == -1 <==> forall i, j :: 0 <= i < j < nums.Length ==> nums[i] + nums[j] != target\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["MIEIC_mfes_tmp_tmpq3ho7nve_exams_mt2_19_p5_partition.dfy", "root", false, "", "", false, "MIEIC_mfes_tmp_tmpq3ho7nve_exams_mt2_19_p5_partition.dfy", "// <vc-preamble>\ntype T = int\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod partition(a: array<T>) returns(pivotPos: int) \n    requires a.Length > 0\n    ensures 0 <= pivotPos < a.Length\n    ensures forall i :: 0 <= i < pivotPos ==> a[i] < a[pivotPos]\n    ensures forall i :: pivotPos < i < a.Length ==> a[i] >= a[pivotPos]\n    ensures multiset(a[..]) == multiset(old(a[..]))\n    modifies a\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-language-server_tmp_tmpkir0kenl_Test_VSComp2010_Problem1-SumMax_M.dfy", "root", false, "", "", false, "dafny-language-server_tmp_tmpkir0kenl_Test_VSComp2010_Problem1-SumMax_M.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod M(N: int, a: array<int>) returns (sum: int, max: int)\n  requires 0 <= N && a.Length == N && (forall k :: 0 <= k && k < N ==> 0 <= a[k]);\n  ensures sum <= N * max;\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Software-building-and-verification-Projects_tmp_tmp5tm1srrn_CVS-projeto_handout1_queryFast.dfy", "root", false, "", "", false, "Software-building-and-verification-Projects_tmp_tmp5tm1srrn_CVS-projeto_handout1_queryFast.dfy", "// <vc-preamble>\nfunction sum(a: array<int>, i: int, j: int) : int\n  requires 0 <= i <= j <= a.Length\n  reads a\n  decreases j\n{\n  if i == j then 0\n  else a[j-1] + sum(a, i, j-1)\n}\n\npredicate is_prefix_sum_for (a: array<int>, c: array<int>)\n  reads c, a\n{\n  a.Length + 1 == c.Length && forall i: int :: 0 <= i <= a.Length ==> c[i] == sum(a, 0, i)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod queryFast(a: array<int>, c: array<int>, i: int, j: int) returns (r: int)\n  requires 0 <= i <= j <= a.Length\n  requires is_prefix_sum_for(a,c)\n  ensures r == sum(a, i, j)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_is_even_ComputeIsEven.dfy", "root", true, "", "", false, "Clover_is_even_ComputeIsEven.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ComputeIsEven(x:int) returns (is_even:bool)\n  ensures (x % 2 == 0)==is_even\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod ComputeIsEven(x:int) returns (is_even:bool)\n  ensures (x % 2 == 0)==is_even\n// </vc-spec>\n// <vc-code>\n{\n  is_even := (x % 2 == 0);\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_142_CountIdenticalPositions.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_142_CountIdenticalPositions.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod CountIdenticalPositions(a: seq<int>, b: seq<int>, c: seq<int>) returns (count: int)\n    requires |a| == |b| && |b| == |c|\n    ensures count >= 0\n    ensures count == | set i: int | 0 <= i < |a| && a[i] == b[i] && b[i] == c[i]|\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafleet_tmp_tmpa2e4kb9v_0001-0050_0005-longest-palindromic-substring_expand_from_center.dfy", "root", false, "", "", false, "dafleet_tmp_tmpa2e4kb9v_0001-0050_0005-longest-palindromic-substring_expand_from_center.dfy", "// <vc-preamble>\nghost predicate palindromic(s: string, i: int, j: int)\n  requires 0 <= i <= j <= |s|\n  decreases j - i\n{\n  j - i < 2 || (s[i] == s[j-1] && palindromic(s, i+1, j-1))\n}\n\nmethod longestPalindrome'(s: string) returns (ans: string, lo: int, hi: int)\n  ensures 0 <= lo <= hi <= |s| && ans == s[lo..hi]\n  ensures palindromic(s, lo, hi)\n  ensures forall i, j | 0 <= i <= j <= |s| && palindromic(s, i, j) :: j - i <= hi - lo\n{\n  assume{:axiom} false;\n}\n\nfunction insert_bogus_chars(s: string, bogus: char): (s': string)\n  ensures |s'| == 2 * |s| + 1\n  ensures forall i | 0 <= i <= |s| :: s'[i * 2] == bogus\n  ensures forall i | 0 <= i < |s| :: s'[i * 2 + 1] == s[i]\n{\n  if s == \"\" then\n    [bogus]\n  else\n    var s'_old := insert_bogus_chars(s[1..], bogus);\n    var s'_new := [bogus] + [s[0]] + s'_old;\n    assert forall i | 1 <= i <= |s| :: s'_new[i * 2] == s'_old[(i-1) * 2];\n    s'_new\n}\n\nfunction argmax(a: array<int>, start: int): (res: (int, int))\n  reads a\n  requires 0 <= start < a.Length\n  ensures start <= res.0 < a.Length && a[res.0] == res.1\n  ensures forall i | start <= i < a.Length :: a[i] <= res.1\n  decreases a.Length - start\n{\n  if start == a.Length - 1 then\n    (start, a[start])\n  else\n    var (i, v) := argmax(a, start + 1);\n    if a[start] >= v then (start, a[start]) else (i, v)\n}\n\nghost predicate inbound_radius(s': string, c: int, r: int)\n{\n  r >= 0 && 0 <= c-r && c+r < |s'|\n}\n\nghost predicate palindromic_radius(s': string, c: int, r: int)\n  requires inbound_radius(s', c, r)\n{\n  palindromic(s', c-r, c+r+1)\n}\n\nghost predicate max_radius(s': string, c: int, r: int)\n{\n  && inbound_radius(s', c, r)\n  && palindromic_radius(s', c, r)\n  && (forall r' | r' > r && inbound_radius(s', c, r') :: !palindromic_radius(s', c, r'))\n}\n\nghost function abs(x: int): int {\n  if x >= 0 then x else -x\n}\n\nghost predicate max_interval_for_same_center(s: string, k: int, lo: int, hi: int) {\n  && 0 <= lo <= hi <= |s|\n  && lo + hi == k\n  && palindromic(s, lo, hi)\n  && (forall i, j | 0 <= i <= j <= |s| && palindromic(s, i, j) && i + j == k :: j - i <= hi - lo)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod expand_from_center(s: string, i0: int, j0: int) returns (lo: int, hi: int)\n  requires 0 <= i0 <= j0 <= |s|\n  requires palindromic(s, i0, j0)\n  ensures 0 <= lo <= hi <= |s| && palindromic(s, lo, hi)\n  ensures forall i, j | 0 <= i <= j <= |s| && palindromic(s, i, j)\n    && i + j == i0 + j0\n    :: j - i <= hi - lo\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny_tmp_tmp59p638nn_examples_realExponent_pow.dfy", "root", false, "", "", false, "dafny_tmp_tmp59p638nn_examples_realExponent_pow.dfy", "// <vc-preamble>\nghost function power(n: real, alpha: real): real\n    requires n > 0.0 && alpha > 0.0\n    ensures power(n, alpha) > 0.0\n\nghost function log(n: real, alpha: real): real\n    requires n > 0.0 && alpha > 0.0\n    ensures log(n, alpha) > 0.0\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod pow(n: nat, alpha: real) returns (product: real)\n    requires n > 0\n    requires alpha > 0.0\n    ensures product == power(n as real, alpha)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_algorithms_and_leetcode_ProgramProofs_ch15_QuickSort.dfy", "root", false, "", "", false, "Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_algorithms_and_leetcode_ProgramProofs_ch15_QuickSort.dfy", "// <vc-preamble>\nmethod Partition(a: array<int>, lo: int, hi: int) returns (p: int)\n    requires 0 <= lo < hi <= a.Length\n    modifies a\n    ensures lo <= p < hi\n{\n  assume{:axiom} false;\n}\n\npredicate SplitPoint(a: array<int>, n: int)\n    reads a\n    requires 0 <= n <= n\n\n{\n    forall i,j :: 0 <= i < n <= j < a.Length ==> a[i] <= a[j]\n}\n\ntwostate predicate SwapFrame(a: array<int>, lo: int, hi: int)\n    requires 0 <= lo <= hi <= a.Length\n    reads a\n{\n    (forall i :: 0 <= i < lo || hi <= i < a.Length ==> a[i] == old(a[i])) && multiset(a[..]) == old(multiset(a[..]))\n}\n\nmethod QuickSortAux(a: array<int>, lo: int, hi: int)\n    requires 0 <= lo <= hi <= a.Length\n    requires SplitPoint(a, lo) && SplitPoint(a, hi)\n    modifies a\n    ensures forall i,j :: lo <= i < j < hi ==> a[i] <= a[j]\n    ensures SwapFrame(a, lo, hi)\n    ensures SplitPoint(a, lo) && SplitPoint(a, hi)\n    decreases hi - lo\n{\n  assume{:axiom} false;\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod QuickSort(a: array<int>)\n    modifies a\n    ensures forall i,j :: 0 <= i < j < a.Length ==> a[i] <= a[j]\n    ensures multiset(a[..]) == old(multiset(a[..]))\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_624_ToUppercase.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_624_ToUppercase.dfy", "// <vc-preamble>\npredicate IsLowerCase(c : char)\n{\n    97 <= c as int <= 122\n}\n\npredicate IsLowerUpperPair(c : char, C : char)\n{\n    (c as int) == (C as int) + 32\n}\n\nfunction ShiftMinus32(c : char) :  char\n{\n    ((c as int - 32) % 128) as char\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ToUppercase(s: string) returns (v: string)\n    ensures |v| == |s|\n    ensures forall i :: 0 <= i < |s| ==>  if IsLowerCase(s[i]) then IsLowerUpperPair(s[i], v[i]) else v[i] == s[i]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny-Exercises_tmp_tmpjm75muf__Session7Exercises_ExerciseSelSort_selSort.dfy", "root", true, "", "", false, "Dafny-Exercises_tmp_tmpjm75muf__Session7Exercises_ExerciseSelSort_selSort.dfy", "// <vc-preamble>\npredicate sorted_seg(a:array<int>, i:int, j:int)\nrequires 0 <= i <= j <= a.Length\nreads a\n{\n    forall l, k :: i <= l <= k < j ==> a[l] <= a[k]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod selSort (a:array<int>, c:int, f:int)\nmodifies a \nrequires 0 <= c <= f <= a.Length\nensures sorted_seg(a,c,f) \nensures multiset(a[c..f]) == old(multiset(a[c..f]))\nensures a[..c]==old(a[..c]) && a[f..]==old(a[f..])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "predicate sorted_seg(a:array<int>, i:int, j:int) //j not included\nrequires 0 <= i <= j <= a.Length\nreads a\n{\n    forall l, k :: i <= l <= k < j ==> a[l] <= a[k]\n}\n\n// <vc-helpers>\npredicate sorted_seg(a:array<int>, i:int, j:int) //j not included\nrequires 0 <= i <= j <= a.Length\nreads a\n{\n    forall l, k :: i <= l <= k < j ==> a[l] <= a[k]\n}\n\nmethod min_index(a: array<int>, lo: int, hi: int) returns (min_idx: int)\n    requires 0 <= lo < hi <= a.Length\n    ensures lo <= min_idx < hi\n    ensures forall k :: lo <= k < hi ==> a[min_idx] <= a[k]\n{\n    min_idx := lo;\n    var i := lo + 1;\n    while i < hi\n        invariant lo <= min_idx < i\n        invariant forall k :: lo <= k < i ==> a[min_idx] <= a[k]\n    {\n        if a[i] < a[min_idx] {\n            min_idx := i;\n        }\n        i := i + 1;\n    }\n}\n\nlemma swap_invariant<a>(a: array<a>, i: int, j: int, l: int, r: int)\n    requires 0 <= i < a.Length && 0 <= j < a.Length\n    requires 0 <= l <= r <= a.Length\n    ensures multiset(a[l..r]) == multiset(a[l..r][i := a[j]][j := a[i]])\n    ensures l <= i < r ==> l <= j < r ==> \n        (a[l..r][i := a[j]][j := a[i]] == a[l..r][j := a[i]][i := a[j]])\n{\n}\n\nlemma min_index_position(a: array<int>, i: int, f: int, min_idx: int)\n    requires 0 <= i < f <= a.Length\n    requires min_idx == min_index(a, i, f)\n    ensures i <= min_idx < f\n    ensures forall k :: i <= k < f ==> a[min_idx] <= a[k]\n{\n}\n\nlemma sorted_seg_extension(a: array<int>, c: int, i: int)\n    requires 0 <= c <= i < a.Length\n    requires sorted_seg(a, c, i)\n    requires forall k :: c <= k < i ==> a[k] <= a[i]\n    ensures sorted_seg(a, c, i + 1)\n{\n    forall l, k | c <= l <= k < i + 1\n        ensures a[l] <= a[k]\n    {\n        if l == k {\n        } else if k < i {\n            assert a[l] <= a[k];\n        } else if l == i {\n        } else if l < i {\n            assert a[l] <= a[k];\n            assert a[k] == a[i];\n            assert a[l] <= a[i];\n        } else {\n            assert l == i;\n        }\n    }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod selSort (a:array<int>, c:int, f:int)//f excluded\nmodifies a \nrequires 0 <= c <= f <= a.Length //when c==f empty sequence\nensures sorted_seg(a,c,f) \nensures multiset(a[c..f]) == old(multiset(a[c..f]))\nensures a[..c]==old(a[..c]) && a[f..]==old(a[f..])\n// </vc-spec>\n// <vc-code>\n{\n  if c < f {\n    var i := c;\n    while i < f\n      invariant c <= i <= f\n      invariant sorted_seg(a, c, i)\n      invariant multiset(a[c..f]) == old(multiset(a[c..f]))\n      invariant a[..c] == old(a[..c]) && a[f..] == old(a[f..])\n      invariant forall k :: c <= k < i ==> \n        (forall l :: i <= l < f ==> a[k] <= a[l])\n    {\n      var min_idx := min_index(a, i, f);\n      min_index_position(a, i, f, min_idx);\n      \n      swap_invariant(a, i, min_idx, c, f);\n      var temp := a[i];\n      a[i] := a[min_idx];\n      a[min_idx] := temp;\n      \n      assert a[i] == old(a[min_idx]);\n      assert a[min_idx] == old(a[i]);\n      assert multiset(a[c..f]) == old(multiset(a[c..f]));\n      assert a[..c] == old(a[..c]) && a[f..] == old(a[f..]);\n      \n      if i == c {\n        assert sorted_seg(a, c, i + 1);\n      } else {\n        assert sorted_seg(a, c, i);\n        forall k | c <= k < i\n          ensures a[k] <= a[i]\n        {\n          if k == i {\n          } else {\n            assert a[k] <= old(a[i]);\n            assert old(a[min_idx]) <= old(a[i]);\n            assert a[k] <= a[i];\n          }\n        }\n        sorted_seg_extension(a, c, i);\n      }\n      i := i + 1;\n    }\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["DafnyProjects_tmp_tmp2acw_s4s_CombNK_Comb.dfy", "root", true, "", "", false, "DafnyProjects_tmp_tmp2acw_s4s_CombNK_Comb.dfy", "// <vc-preamble>\nfunction comb(n: nat, k: nat): nat \n  requires 0 <= k <= n\n{\n  if k == 0 || k == n then 1 else comb(n-1, k) + comb(n-1, k-1)  \n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Comb(n: nat, k: nat) returns (res: nat)\n  requires 0 <= k <= n\n  ensures res == comb(n, k)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "/* \n* Formal specification and verification of a dynamic programming algorithm for calculating C(n, k).\n* FEUP, MIEIC, MFES, 2020/21.\n*/\n\n// Initial recursive definition of C(n, k), based on the Pascal equality.\nfunction comb(n: nat, k: nat): nat \n  requires 0 <= k <= n\n{\n  if k == 0 || k == n then 1 else comb(n-1, k) + comb(n-1, k-1)  \n}\n\n// <vc-helpers>\nlemma comb_pascal(n: nat, k: nat)\n  requires 1 <= k < n\n  ensures comb(n, k) == comb(n-1, k) + comb(n-1, k-1)\n{\n  // Since 1<=k<n, the condition k==0||k==n is false\n  assert !(k == 0 || k == n);\n  calc {\n    comb(n, k);\n    == { }  // Function body expansion with false condition\n    comb(n-1, k) + comb(n-1, k-1);\n  }\n}\n\nlemma comb_base(n: nat, k: nat)\n  requires k == 0 || k == n\n  ensures comb(n, k) == 1\n{\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod Comb(n: nat, k: nat) returns (res: nat)\n  requires 0 <= k <= n\n  ensures res == comb(n, k)\n// </vc-spec>\n// <vc-code>\n{\n  if k == 0 || k == n {\n    return 1;\n  }\n  var left := Comb(n-1, k);\n  var right := Comb(n-1, k-1);\n  assert 1 <= k < n;\n  comb_pascal(n, k);\n  return left + right;\n}\n// </vc-code>\n\n", "", "", ""], ["Dafny-experiences_tmp_tmp150sm9qy_dafny_started_tutorial_dafny_tutorial_array_FindMax.dfy", "root", true, "", "", false, "Dafny-experiences_tmp_tmp150sm9qy_dafny_started_tutorial_dafny_tutorial_array_FindMax.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod FindMax(a: array<int>) returns (i: int)\n\n  requires a.Length > 0\n  ensures 0<= i < a.Length\n  ensures forall k :: 0 <= k < a.Length ==> a[k] <= a[i]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod FindMax(a: array<int>) returns (i: int)\n  // Annotate this method with pre- and postconditions\n  // that ensure it behaves as described.\n  requires a.Length > 0\n  ensures 0<= i < a.Length\n  ensures forall k :: 0 <= k < a.Length ==> a[k] <= a[i]\n// </vc-spec>\n// <vc-code>\n{\n  var maxIndex := 0;\n  var j := 1;\n  while j < a.Length\n    invariant 0 <= maxIndex < j\n    invariant forall k :: 0 <= k < j ==> a[k] <= a[maxIndex]\n  {\n    if a[j] > a[maxIndex] {\n      maxIndex := j;\n    }\n    j := j + 1;\n  }\n  return maxIndex;\n}\n// </vc-code>\n\n", "", "", ""], ["llm-verified-eval_tmp_tmpd2deqn_i_dafny_5_intersperse.dfy", "root", false, "", "", false, "llm-verified-eval_tmp_tmpd2deqn_i_dafny_5_intersperse.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod intersperse(numbers: seq<int>, delimiter: int) returns (interspersed: seq<int>)\n    ensures |interspersed| == if |numbers| > 0 then 2 * |numbers| - 1 else 0\n    ensures forall i :: 0 <= i < |interspersed| ==> i % 2 == 0 ==> \n                interspersed[i] == numbers[i / 2]\n    ensures forall i :: 0 <= i < |interspersed| ==> i % 2 == 1 ==>\n                interspersed[i] == delimiter\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["BPTree-verif_tmp_tmpq1z6xm1d_Utils_InsertIntoSorted.dfy", "root", true, "", "", false, "BPTree-verif_tmp_tmpq1z6xm1d_Utils_InsertIntoSorted.dfy", "// <vc-preamble>\nfunction SetLessThan(numbers: set<int>, threshold: int): set<int>\n{\n  set i | i in numbers && i < threshold\n}\n\nfunction seqSet(nums: seq<int>, index: nat): set<int> {\n    set x | 0 <= x < index < |nums| :: nums[x]\n}\n\nghost predicate SortedSeq(a: seq<int>)\n\n{\n  (forall i,j :: 0<= i< j < |a| ==> ( a[i] < a[j] ))\n}\n\nmethod GetInsertIndex(a: array<int>, limit: int, x:int) returns (idx:int)\n\n  requires x !in a[..]\n  requires 0 <= limit <= a.Length\n  requires SortedSeq(a[..limit])\n  ensures 0<= idx <= limit\n  ensures SortedSeq(a[..limit])\n  ensures idx > 0 ==> a[idx-1]< x\n  ensures idx < limit ==> x < a[idx]\n{\n  assume{:axiom} false;\n}\n\npredicate sorted(a: seq<int>)\n{\n  forall i,j :: 0 <= i < j < |a| ==> a[i] < a[j]\n}\n\npredicate distinct(a: seq<int>)\n{\n  forall i,j :: (0 <= i < |a| && 0 <= j < |a| && i != j) ==> a[i] != a[j]\n}\n\npredicate sorted_eq(a: seq<int>)\n{\n  forall i,j :: 0 <= i < j < |a| ==> a[i] <= a[j]\n}\n\npredicate lessThan(a:seq<int>, key:int) {\n  forall i :: 0 <= i < |a| ==> a[i] < key\n}\n\npredicate greaterThan(a:seq<int>, key:int) {\n  forall i :: 0 <= i < |a| ==> a[i] > key\n}\n\npredicate greaterEqualThan(a:seq<int>, key:int) {\n  forall i :: 0 <= i < |a| ==> a[i] >= key\n}\nfunction count(a: seq<bool>): nat\n{\n  if |a| == 0 then 0 else\n    (if a[0] then 1 else 0) + count(a[1..])\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod InsertIntoSorted(a: array<int>, limit:int, key:int) returns (b: array<int>)\n    requires key > 0\n    requires key !in a[..]\n    requires 0 <= limit < a.Length\n    requires forall i :: 0 <= i < limit ==> a[i] > 0\n    requires forall i :: limit <= i < a.Length ==> a[i] == 0\n    requires sorted(a[..limit]) \n    ensures b.Length == a.Length\n    ensures sorted(b[..(limit+ 1)])\n    ensures forall i :: limit + 1 <= i < b.Length ==> b[i] == 0  \n    ensures forall i :: 0 <= i < limit ==> a[i] in b[..]\n    ensures forall i :: 0 <= i < limit + 1 ==> b[i] > 0\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "// method CountLessThan(numbers: set<int>, threshold: int) returns (count: int)\n// //   ensures count == |set i | i in numbers && i < threshold|\n//     ensures count == |SetLessThan(numbers, threshold)|\n// {\n//   count := 0;\n//   var ss := numbers;\n//   while ss != {}\n//     decreases |ss|\n//   {\n//     var i: int :| i in ss;\n//     ss := ss - {i};\n//     if i < threshold {\n//       count := count + 1;\n//     }\n\n//   }\n//   assert count == |SetLessThan(numbers, threshold)|;\n// //   assert count == |set i | i in numbers && i < threshold|;\n// }\n\nfunction SetLessThan(numbers: set<int>, threshold: int): set<int>\n{\n  set i | i in numbers && i < threshold\n}\n\n\n/*\n*/\n\nfunction seqSet(nums: seq<int>, index: nat): set<int> {\n    set x | 0 <= x < index < |nums| :: nums[x]\n}\n\n\n// lemma numElemsOfSet(a: seq<int>)\n//   requires sorted(a)\n// {\n//   assert distinct(a);\n//   var s := set x | x in a;\n//   assert forall x :: x in s ==> x in a[..];\n//   assert forall x :: x in a ==> x in s;\n//   assert |s| == |a|;\n// }\n\n// lemma CardinalitySetEqualsArray(a: seq<int>, s: set<int>)\n//   requires s == set x | x in a\n//   requires distinct(a)\n//   ensures |s| == |a|\n// {\n//     assert forall x :: x in s ==> exists i :: 0 <= i < |a| && a[i] == x;\n//     assert forall i, j :: 0 <= i < |a| && 0 <= j < |a| && i != j ==> a[i] != a[j];\n//     // Assert that each element in the array is in the set\n//     assert forall i :: 0 <= i < |a| ==> a[i] in s;\n//     // Assert that the set contains exactly the elements in the array\n//     assert s == set x | x in a;\n//     // Assert that the set is a subset of the array\n//     assert forall x :: x in s <==> x in a;\n\n//     // Conclude the equivalence\n//     assert |s| == |a|;\n// }\n\n\n/*\n\n\n*/\n\n// TODO play with this for keys==Contents\n\n\nghost predicate SortedSeq(a: seq<int>)\n  //sequence is sorted from left to right\n{\n  (forall i,j :: 0<= i< j < |a| ==> ( a[i] < a[j] ))\n}\n\nmethod GetInsertIndex(a: array<int>, limit: int, x:int) returns (idx:int)\n  // get index so that array stays sorted\n  requires x !in a[..]\n  requires 0 <= limit <= a.Length\n  requires SortedSeq(a[..limit])\n  ensures 0<= idx <= limit\n  ensures SortedSeq(a[..limit])\n  ensures idx > 0 ==> a[idx-1]< x\n  ensures idx < limit ==> x < a[idx]\n{\n  assume{:axiom} false;\n}\n\npredicate sorted(a: seq<int>)\n{\n  forall i,j :: 0 <= i < j < |a| ==> a[i] < a[j]\n}\n\npredicate distinct(a: seq<int>)\n{\n  forall i,j :: (0 <= i < |a| && 0 <= j < |a| && i != j) ==> a[i] != a[j]\n}\n\npredicate sorted_eq(a: seq<int>)\n{\n  forall i,j :: 0 <= i < j < |a| ==> a[i] <= a[j]\n}\n\npredicate lessThan(a:seq<int>, key:int) {\n  forall i :: 0 <= i < |a| ==> a[i] < key\n}\n\npredicate greaterThan(a:seq<int>, key:int) {\n  forall i :: 0 <= i < |a| ==> a[i] > key\n}\n\npredicate greaterEqualThan(a:seq<int>, key:int) {\n  forall i :: 0 <= i < |a| ==> a[i] >= key\n}\n/*\nmethod InsertSorted(a: array<int>, key: int ) returns (b: array<int>)\n  requires sorted_eq(a[..])\n  ensures sorted_eq(b[..])\n{\n  assume{:axiom} false;\n}\n*/\n\nfunction count(a: seq<bool>): nat\n{\n  if |a| == 0 then 0 else\n    (if a[0] then 1 else 0) + count(a[1..])\n}\n\n// verifies in more than 45 seconds, but less than 100 seconds\n\n// <vc-helpers>\npredicate sorted(a: seq<int>)\n{\n  forall i,j :: 0 <= i < j < |a| ==> a[i] < a[j]\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod InsertIntoSorted(a: array<int>, limit:int, key:int) returns (b: array<int>)\n    requires key > 0\n    requires key !in a[..]\n    requires 0 <= limit < a.Length\n    requires forall i :: 0 <= i < limit ==> a[i] > 0\n    requires forall i :: limit <= i < a.Length ==> a[i] == 0\n    requires sorted(a[..limit]) \n    ensures b.Length == a.Length\n    ensures sorted(b[..(limit+ 1)])\n    ensures forall i :: limit + 1 <= i < b.Length ==> b[i] == 0  \n    ensures forall i :: 0 <= i < limit ==> a[i] in b[..]\n    ensures forall i :: 0 <= i < limit + 1 ==> b[i] > 0\n// </vc-spec>\n// <vc-code>\n{\n    var b := new int[a.Length];\n    var idx := 0;\n    while idx < limit && a[idx] < key\n        invariant 0 <= idx <= limit\n        invariant forall j :: 0 <= j < idx ==> a[j] < key\n    {\n        idx := idx + 1;\n    }\n\n    var i := 0;\n    while i < idx\n    {\n        b[i] := a[i];\n        i := i + 1;\n    }\n    b[idx] := key;\n\n    i := idx;\n    while i < limit\n    {\n        b[i+1] := a[i];\n        i := i + 1;\n    }\n}\n// </vc-code>\n\n", "", "", ""], ["cmsc433_tmp_tmpe3ob3a0o_dafny_project1_p1-assignment-2_NoDups.dfy", "root", false, "", "", false, "cmsc433_tmp_tmpe3ob3a0o_dafny_project1_p1-assignment-2_NoDups.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod NoDups (a : array<int>) returns (noDups : bool)\n    requires forall j : int :: 0 < j < a.Length ==> a[j-1] <= a[j]\n    ensures noDups <==> forall j : int :: 1 <= j < a.Length ==> a[j-1] != a[j]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_435_LastDigit.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_435_LastDigit.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod LastDigit(n: int) returns (d: int)\n    requires n >= 0\n    ensures 0 <= d < 10\n    ensures n % 10 == d\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_424_ExtractRearChars.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_424_ExtractRearChars.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ExtractRearChars(l: seq<string>) returns (r: seq<char>)\n    requires forall i :: 0 <= i < |l| ==> |l[i]| > 0\n    ensures |r| == |l|\n    ensures forall i :: 0 <= i < |l| ==> r[i] == l[i][|l[i]| - 1]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_762_IsMonthWith30Days.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_762_IsMonthWith30Days.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod IsMonthWith30Days(month: int) returns (result: bool)\n    requires 1 <= month <= 12\n    ensures result <==> month == 4 || month == 6 || month == 9 || month == 11\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_784_ProductEvenOdd.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_784_ProductEvenOdd.dfy", "// <vc-preamble>\npredicate IsEven(n: int)\n{\n    n % 2 == 0\n}\n\npredicate IsOdd(n: int)\n{\n    n % 2 != 0\n}\n\npredicate IsFirstEven(evenIndex: int, lst: seq<int>)\n    requires 0 <= evenIndex < |lst|\n    requires IsEven(lst[evenIndex])\n{\n    forall i :: 0 <= i < evenIndex ==> IsOdd(lst[i])\n}\n\npredicate IsFirstOdd(oddIndex: int, lst: seq<int>)\n    requires 0 <= oddIndex < |lst|\n    requires IsOdd(lst[oddIndex])\n{\n    forall i :: 0 <= i < oddIndex ==> IsEven(lst[i])\n}\n\nmethod FirstEvenOddIndices(lst : seq<int>) returns (evenIndex: int, oddIndex : int)\n    requires |lst| >= 2\n    requires exists i :: 0 <= i < |lst| && IsEven(lst[i])\n    requires exists i :: 0 <= i < |lst| && IsOdd(lst[i])\n    ensures 0 <= evenIndex < |lst|\n    ensures 0 <= oddIndex < |lst|\n\n    ensures IsEven(lst[evenIndex]) && IsFirstEven(evenIndex, lst)\n    ensures IsOdd(lst[oddIndex]) && IsFirstOdd(oddIndex, lst)\n{\n  assume{:axiom} false;\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ProductEvenOdd(lst: seq<int>) returns (product : int)\n    requires |lst| >= 2\n    requires exists i :: 0 <= i < |lst| && IsEven(lst[i])\n    requires exists i :: 0 <= i < |lst| && IsOdd(lst[i])\n    ensures exists i, j :: 0 <= i < |lst| && IsEven(lst[i]) && IsFirstEven(i, lst) && \n                           0 <= j < |lst| && IsOdd(lst[j])  && IsFirstOdd(j, lst) && product == lst[i] * lst[j]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_618_ElementWiseDivide.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_618_ElementWiseDivide.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ElementWiseDivide(a: seq<int>, b: seq<int>) returns (result: seq<int>)\n    requires |a| == |b|\n    requires forall i :: 0 <= i < |b| ==> b[i] != 0\n    ensures |result| == |a|\n    ensures forall i :: 0 <= i < |result| ==> result[i] == a[i] / b[i]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_convert_map_key_convert_map_key.dfy", "root", true, "", "", false, "Clover_convert_map_key_convert_map_key.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod convert_map_key(inputs: map<nat, bool>, f: nat->nat) returns(r:map<nat, bool>)\n  requires forall n1: nat, n2: nat :: n1 != n2 ==> f(n1) != f(n2)\n  ensures forall k :: k in inputs <==> f(k) in r\n  ensures forall k :: k in inputs ==> r[f(k)] == inputs[k]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n// No helpers needed for this fix\n// </vc-helpers>\n\n// <vc-spec>\nmethod convert_map_key(inputs: map<nat, bool>, f: nat->nat) returns(r:map<nat, bool>)\n  requires forall n1: nat, n2: nat :: n1 != n2 ==> f(n1) != f(n2)\n  ensures forall k :: k in inputs <==> f(k) in r\n  ensures forall k :: k in inputs ==> r[f(k)] == inputs[k]\n// </vc-spec>\n// <vc-code>\n{\n  var processed: set<nat> := {};\n  r := map[];\n  while processed != inputs.Keys\n    invariant processed <= inputs.Keys\n    invariant forall k :: k in processed ==> (f(k) in r && r[f(k)] == inputs[k])\n    invariant forall x :: x in r ==> exists k :: k in processed && x == f(k)\n  {\n    var key :| key in inputs.Keys - processed;\n    r := r[f(key) := inputs[key]];\n    processed := processed + {key};\n  }\n  return r;\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_127_Multiply.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_127_Multiply.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Multiply(a: int, b: int) returns (result: int)\n  ensures result == a * b\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_577_FactorialOfLastDigit.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_577_FactorialOfLastDigit.dfy", "// <vc-preamble>\nfunction Factorial(n: int): int\n    requires n >= 0\n    ensures 0 <= Factorial(n)\n    {\n        if n == 0 then 1\n        else n * Factorial(n-1)\n    }\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod FactorialOfLastDigit(n: int) returns (fact: int)\n    requires n >= 0\n    ensures fact == Factorial(n % 10)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny_Verify_tmp_tmphq7j0row_Generated_Code_Count_count.dfy", "root", true, "", "", false, "Dafny_Verify_tmp_tmphq7j0row_Generated_Code_Count_count.dfy", "// <vc-preamble>\nfunction has_count(v: int, a: array<int>, n: int): int\n    reads a\n    requires n >= 0 && n <= a.Length\n{\n    if n == 0 then 0 else\n    (if a[n-1] == v then has_count(v, a, n-1) + 1 else has_count(v, a, n-1))\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod count (v: int, a: array<int>, n: int) returns (r: int)\n    requires n >= 0 && n <= a.Length;\n    ensures has_count(v, a, n) == r;\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "function has_count(v: int, a: array<int>, n: int): int\n    reads a  // This allows the function to read from array 'a'\n    requires n >= 0 && n <= a.Length\n{\n    if n == 0 then 0 else\n    (if a[n-1] == v then has_count(v, a, n-1) + 1 else has_count(v, a, n-1))\n}\n\n// <vc-helpers>\nlemma has_count_lemma(v: int, a: array<int>, i: int)\n    requires 0 <= i < a.Length\n    ensures has_count(v, a, i+1) == (if a[i] == v then has_count(v, a, i) + 1 else has_count(v, a, i))\n{\n    reveal has_count();\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod count (v: int, a: array<int>, n: int) returns (r: int)\n    requires n >= 0 && n <= a.Length;\n    ensures has_count(v, a, n) == r;\n// </vc-spec>\n// <vc-code>\n{\n    var count := 0;\n    var i := 0;\n    while i < n\n        invariant 0 <= i <= n\n        invariant count == has_count(v, a, i)\n    {\n        has_count_lemma(v, a, i);\n        if a[i] == v {\n            count := count + 1;\n        }\n        i := i + 1;\n    }\n    return count;\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_641_NthNonagonalNumber.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_641_NthNonagonalNumber.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod NthNonagonalNumber(n: int) returns (number: int)\n    requires n >= 0\n    ensures number == n * (7 * n - 5) / 2\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny_ProgrammingLanguages_tmp_tmp82_e0kji_ExtraCredit_optimizeCorrect.dfy", "root", true, "", "", false, "Dafny_ProgrammingLanguages_tmp_tmp82_e0kji_ExtraCredit_optimizeCorrect.dfy", "// <vc-preamble>\ndatatype Exp = Const(int) | Var(string) | Plus(Exp, Exp) |  Mult(Exp, Exp)\n\nfunction eval(e:Exp, store:map<string, int>):int\n{\n    match(e)\n        case Const(n) => n\n        case Var(s) => if(s in store) then store[s] else -1\n        case Plus(e1, e2) => eval(e1, store) + eval(e2, store)\n        case Mult(e1, e2) => eval(e1, store) * eval(e2, store)\n}\n\nfunction optimize(e:Exp):Exp\n{\n    match e\n    case Mult(Const(0), e) => Const(0)\n    case Mult(e, Const(0)) => Const(0)\n    case Mult(Const(1), e) => e\n    case Mult(e, Const(1)) => e\n    case Mult(Const(n1), Const(n2)) => Const(n1*n2)\n    case Plus(Const(0), e) => e\n    case Plus(e, Const(0)) => e\n    case Plus(Const(n1), Const(n2)) => Const(n1+ n2)\n    case e => e\n\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod optimizeCorrect(e:Exp, s:map<string, int>)\nensures eval(e,s) == eval(optimize(e), s)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "datatype Exp = Const(int) | Var(string) | Plus(Exp, Exp) |  Mult(Exp, Exp)\n\nfunction eval(e:Exp, store:map<string, int>):int\n{\n    match(e)\n        case Const(n) => n\n        case Var(s) => if(s in store) then store[s] else -1\n        case Plus(e1, e2) => eval(e1, store) + eval(e2, store)\n        case Mult(e1, e2) => eval(e1, store) * eval(e2, store)\n}\n\n//fill this function in to make optimizeFeatures work\nfunction optimize(e:Exp):Exp\n{\n    match e\n    case Mult(Const(0), e) => Const(0)\n    case Mult(e, Const(0)) => Const(0)\n    case Mult(Const(1), e) => e\n    case Mult(e, Const(1)) => e\n    case Mult(Const(n1), Const(n2)) => Const(n1*n2)\n    case Plus(Const(0), e) => e\n    case Plus(e, Const(0)) => e\n    case Plus(Const(n1), Const(n2)) => Const(n1+ n2)\n    case e => e\n\n} \n\n//as you write optimize this will become unproved\n//you must write proof code so that Dafny can prove this\n\n// <vc-helpers>\nlemma OptimizeCorrectness(e:Exp, s:map<string, int>)\nensures eval(e,s) == eval(optimize(e), s)\n{\n  match e\n  case Const(n) => \n    calc {\n      eval(e, s);\n      n;\n      eval(Const(n), s);\n    }\n  case Var(x) =>\n    calc {\n      eval(e, s);\n      if x in s then s[x] else -1;\n      eval(Var(x), s);\n    }\n  case Plus(e1, e2) =>\n    if e1 == Const(0) {\n      calc {\n        eval(e, s);\n        eval(Plus(e1,e2), s);\n        eval(e1, s) + eval(e2, s);\n        0 + eval(e2, s);\n        eval(e2, s);\n        eval(optimize(e), s);\n      }\n    } else if e2 == Const(0) {\n      calc {\n        eval(e, s);\n        eval(Plus(e1,e2), s);\n        eval(e1, s) + eval(e2, s);\n        eval(e1, s) + 0;\n        eval(e1, s);\n        eval(optimize(e), s);\n      }\n    } else if e1.Const? && e2.Const? {\n      var n1 : int;\n      match e1 {\n        case Const(n) => n1 := n;\n      }\n      var n2 : int;\n      match e2 {\n        case Const(n) => n2 := n;\n      }\n      calc {\n        eval(e, s);\n        eval(Plus(e1,e2), s);\n        eval(e1, s) + eval(e2, s);\n        n1 + n2;\n        eval(Const(n1+n2), s);\n        eval(optimize(e), s);\n      }\n    } else {\n      calc {\n        eval(e, s);\n        eval(Plus(e1,e2), s);\n        eval(optimize(e), s);\n      }\n    }\n  case Mult(e1, e2) =>\n    if e1 == Const(0) {\n      calc {\n        eval(e, s);\n        eval(Mult(e1,e2), s);\n        eval(e1, s) * eval(e2, s);\n        0 * eval(e2, s);\n        0;\n        eval(Const(0), s);\n        eval(optimize(e), s);\n      }\n    } else if e2 == Const(0) {\n      calc {\n        eval(e, s);\n        eval(Mult(e1,e2), s);\n        eval(e1, s) * eval(e2, s);\n        eval(e1, s) * 0;\n        0;\n        eval(Const(0), s);\n        eval(optimize(e), s);\n      }\n    } else if e1 == Const(1) {\n      calc {\n        eval(e, s);\n        eval(Mult(e1,e2), s);\n        eval(e1, s) * eval(e2, s);\n        1 * eval(e2, s);\n        eval(e2, s);\n        eval(optimize(e), s);\n      }\n    } else if e2 == Const(1) {\n      calc {\n        eval(e, s);\n        eval(Mult(e1,e2), s);\n        eval(e1, s) * eval(e2, s);\n        eval(e1, s) * 1;\n        eval(e1, s);\n        eval(optimize(e), s);\n      }\n    } else if e1.Const? && e2.Const? {\n      var n1 : int;\n      match e1 {\n        case Const(n) => n1 := n;\n      }\n      var n2 : int;\n      match e2 {\n        case Const(n) => n2 := n;\n      }\n      calc {\n        eval(e, s);\n        eval(Mult(e1,e2), s);\n        eval(e1, s) * eval(e2, s);\n        n1 * n2;\n        eval(Const(n1*n2), s);\n        eval(optimize(e), s);\n      }\n    } else {\n      calc {\n        eval(e, s);\n        eval(Mult(e1,e2), s);\n        eval(optimize(e), s);\n      }\n    }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod optimizeCorrect(e:Exp, s:map<string, int>)\nensures eval(e,s) == eval(optimize(e), s)\n// </vc-spec>\n// <vc-code>\n{\n  OptimizeCorrectness(e, s);\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-exercise_tmp_tmpouftptir_prac3_ex2_GetEven.dfy", "root", false, "", "", false, "dafny-exercise_tmp_tmpouftptir_prac3_ex2_GetEven.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod GetEven(s: array<nat>) modifies s\nensures forall i :: 0 <= i < s.Length ==> \n                                if old(s[i]) % 2 == 1 then s[i] == old(s[i]) + 1\n                                else s[i] == old(s[i])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Software-Verification_tmp_tmpv4ueky2d_Longest_Increasing_Subsequence_longest_increasing_subsequence_longest_increasing_subsequence.dfy", "root", false, "", "", false, "Software-Verification_tmp_tmpv4ueky2d_Longest_Increasing_Subsequence_longest_increasing_subsequence_longest_increasing_subsequence.dfy", "// <vc-preamble>\nfunction find_max(x: int, y: int): int\n{\n    if x > y then x\n    else y\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod longest_increasing_subsequence(nums: array<int>) returns (max: int)\n    requires 1 <= nums.Length <= 2500\n    requires forall i :: 0 <= i < nums.Length ==> -10000 <= nums[i] <= 10000\n\n    ensures max >= 1\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_769_Difference.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_769_Difference.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Difference(a: seq<int>, b: seq<int>) returns (diff: seq<int>)\n    ensures forall x :: x in diff <==> (x in a && x !in b)\n    ensures forall i, j :: 0 <= i < j < |diff| ==> diff[i] != diff[j]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny-Exercises_tmp_tmpjm75muf__Session4Exercises_ExerciseContained_mcontained.dfy", "root", true, "", "", false, "Dafny-Exercises_tmp_tmpjm75muf__Session4Exercises_ExerciseContained_mcontained.dfy", "// <vc-preamble>\npredicate strictSorted(s : seq<int>) {\n    forall u, w :: 0 <= u < w < |s| ==> s[u] < s[w]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod mcontained(v:array<int>,w:array<int>,n:int,m:int) returns (b:bool)\nrequires n<=m && n>=0\nrequires strictSorted(v[..])\nrequires strictSorted(w[..])\nrequires v.Length >= n && w.Length >= m\nensures b==forall k:: 0<= k< n ==> v[k] in w[..m]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "predicate strictSorted(s : seq<int>) {\n    forall u, w :: 0 <= u < w < |s| ==> s[u] < s[w]\n}\n\n// <vc-helpers>\npredicate containedIn(v: array<int>, n: int, w: array<int>, m: int)\n    reads v, w\n{\n    0 <= n <= v.Length && 0 <= m <= w.Length &&\n    forall k :: 0 <= k < n ==> contains(w[..m], v[k])\n}\n\npredicate contains(s: seq<int>, e: int) {\n    exists i :: 0 <= i < |s| && s[i] == e\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod mcontained(v:array<int>,w:array<int>,n:int,m:int) returns (b:bool)\n//Specify and implement an O(m+n) algorithm that returns b\n//v and w are strictly increasing ordered arrays\n//b is true iff the first n elements of v are contained in the first m elements of w\nrequires n<=m && n>=0\nrequires strictSorted(v[..])\nrequires strictSorted(w[..])\nrequires v.Length >= n && w.Length >= m\nensures b==forall k:: 0<= k< n ==> v[k] in w[..m]//exists j :: 0 <= j < m && v[k] == w[j]\n// </vc-spec>\n// <vc-code>\n{\n    var i := 0;\n    var j := 0;\n    while i < n && j < m\n        invariant 0 <= i <= n\n        invariant 0 <= j <= m\n        invariant forall k :: 0 <= k < i ==> exists l :: 0 <= l < j && w[l] == v[k]\n        invariant i < n && j > 0 ==> v[i] > w[j-1]\n    {\n        if v[i] == w[j] {\n            i := i + 1;\n            j := j + 1;\n        } else if v[i] < w[j] {\n            return false;\n        } else {\n            j := j + 1;\n        }\n    }\n    return i == n;\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-duck_tmp_tmplawbgxjo_p1_SumArray.dfy", "root", false, "", "", false, "dafny-duck_tmp_tmplawbgxjo_p1_SumArray.dfy", "// <vc-preamble>\nfunction Sum(xs: seq<int>): int {\n    if |xs| == 0 then 0 else Sum(xs[..|xs|-1]) + xs[|xs|-1]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SumArray(xs: array<int>) returns (s: int)\n    ensures s == Sum(xs[..])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Workshop_tmp_tmp0cu11bdq_Lecture_Answers_max_array_max.dfy", "root", false, "", "", false, "Workshop_tmp_tmp0cu11bdq_Lecture_Answers_max_array_max.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod max(a:array<int>) returns(max:int)\n    requires a != null;\n    ensures forall j :: j >= 0 && j < a.Length ==> max >= a[j];\n    ensures a.Length > 0 ==> exists j :: j >= 0 && j < a.Length && max == a[j];\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_swap_bitvector_SwapBitvectors.dfy", "root", true, "", "", false, "Clover_swap_bitvector_SwapBitvectors.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SwapBitvectors(X: bv8, Y: bv8) returns(x: bv8, y: bv8)\n  ensures x==Y\n  ensures y==X\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod SwapBitvectors(X: bv8, Y: bv8) returns(x: bv8, y: bv8)\n  ensures x==Y\n  ensures y==X\n// </vc-spec>\n// <vc-code>\n{\n  x, y := Y, X;\n}\n// </vc-code>\n\n", "", "", ""], ["Clover_abs_Abs.dfy", "root", true, "", "", false, "Clover_abs_Abs.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Abs(x: int) returns (y: int)\n  ensures x>=0 ==> x==y\n  ensures x<0 ==> x+y==0\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n// No helper code needed for this specification.\n// </vc-helpers>\n\n// <vc-spec>\nmethod Abs(x: int) returns (y: int)\n  ensures x>=0 ==> x==y\n  ensures x<0 ==> x+y==0\n// </vc-spec>\n// <vc-code>\n{\n  if x >= 0 {\n    return x;\n  } else {\n    return -x;\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_233_CylinderLateralSurfaceArea.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_233_CylinderLateralSurfaceArea.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod CylinderLateralSurfaceArea(radius: real, height: real) returns (area: real)\n    requires radius > 0.0 && height > 0.0\n    ensures area == 2.0 * (radius * height) * 3.14\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_625_SwapFirstAndLast.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_625_SwapFirstAndLast.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SwapFirstAndLast(a: array<int>)\n    requires a.Length > 0\n    modifies a\n    ensures a[0] == old(a[a.Length - 1])\n    ensures a[a.Length - 1] == old(a[0])\n    ensures forall k :: 1 <= k < a.Length - 1 ==> a[k] == old(a[k])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_809_IsSmaller.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_809_IsSmaller.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod IsSmaller(a: seq<int>, b: seq<int>) returns (result: bool)\n    requires |a| == |b|\n    ensures result <==> forall i :: 0 <= i < |a| ==> a[i] > b[i]\n    ensures !result <==> exists i :: 0 <= i < |a| && a[i] <= b[i]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Software-building-and-verification-Projects_tmp_tmp5tm1srrn_CVS-projeto_aula3_sumBackwards.dfy", "root", false, "", "", false, "Software-building-and-verification-Projects_tmp_tmp5tm1srrn_CVS-projeto_aula3_sumBackwards.dfy", "// <vc-preamble>\nfunction fib(n : nat) : nat\n{\n  if (n==0) then 1 else\n  if (n==1) then 1 else fib(n-1)+fib(n-2)\n}\n\ndatatype List<T> = Nil | Cons(head: T, tail: List<T>)\n\nfunction add(l : List<int>) : int {\n  match l\n  case Nil => 0\n  case Cons(x,xs) => x + add(xs)\n}\n\nfunction sum(n: nat) : nat\n{\n  if (n == 0) then 0 else n + sum(n-1)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod sumBackwards(n: nat) returns (r: nat)\n  ensures r == sum(n)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_replace_replace.dfy", "root", true, "", "", false, "Clover_replace_replace.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod replace(arr: array<int>, k: int)\n  modifies arr\n  ensures forall i :: 0 <= i < arr.Length ==> old(arr[i]) > k ==> arr[i] == -1\n  ensures forall i :: 0 <= i < arr.Length ==> old(arr[i]) <= k ==> arr[i] == old(arr[i])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod replace(arr: array<int>, k: int)\n  modifies arr\n  ensures forall i :: 0 <= i < arr.Length ==> old(arr[i]) > k ==> arr[i] == -1\n  ensures forall i :: 0 <= i < arr.Length ==> old(arr[i]) <= k ==> arr[i] == old(arr[i])\n// </vc-spec>\n// <vc-code>\n{\n  var n := arr.Length;\n  var i := 0;\n  while i < n\n    invariant 0 <= i <= n\n    invariant forall j :: 0 <= j < i ==> old(arr[j]) > k ==> arr[j] == -1\n    invariant forall j :: 0 <= j < i ==> old(arr[j]) <= k ==> arr[j] == old(arr[j])\n    invariant forall j :: i <= j < n ==> arr[j] == old(arr[j])\n  {\n    if arr[i] > k {\n      arr[i] := -1;\n    }\n    i := i + 1;\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_algorithms_and_leetcode_ProgramProofs_ch15_SelectionSort.dfy", "root", false, "", "", false, "Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_algorithms_and_leetcode_ProgramProofs_ch15_SelectionSort.dfy", "// <vc-preamble>\npredicate SplitPoint(a: array<int>, n: int)\n    reads a\n    requires 0 <= n <= n\n\n{\n    forall i,j :: 0 <= i < n <= j < a.Length ==> a[i] <= a[j]\n}\n\ntwostate predicate SwapFrame(a: array<int>, lo: int, hi: int)\n    requires 0 <= lo <= hi <= a.Length\n    reads a\n{\n    (forall i :: 0 <= i < lo || hi <= i < a.Length ==> a[i] == old(a[i])) && multiset(a[..]) == old(multiset(a[..]))\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SelectionSort(a: array<int>)\n    modifies a\n    ensures forall i,j :: 0 <= i < j < a.Length ==> a[i] <= a[j]\n    ensures multiset(a[..]) == old(multiset(a[..]))\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["feup-mfes_tmp_tmp6_a1y5a5_examples_SelectionSort_findMin.dfy", "root", false, "", "", false, "feup-mfes_tmp_tmp6_a1y5a5_examples_SelectionSort_findMin.dfy", "// <vc-preamble>\npredicate isSorted(a: array<real>, from: nat, to: nat)\n  requires 0 <= from <= to <= a.Length\n  reads a\n{\n    forall i, j :: from <= i < j < to ==> a[i] <= a[j] \n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod findMin(a: array<real>, from: nat, to: nat) returns(index: nat)\n  requires 0 <= from < to <= a.Length\n  ensures from <= index < to\n  ensures forall k :: from <= k < to ==> a[k] >= a[index]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_586_SplitAndAppend.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_586_SplitAndAppend.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SplitAndAppend(l: seq<int>, n: int) returns (r: seq<int>)\n    requires n >= 0 && n < |l|\n    ensures |r| == |l|\n    ensures forall i :: 0 <= i < |l| ==> r[i] == l[(i + n) % |l|]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["BinarySearchTree_tmp_tmp_bn2twp5_bst4copy_insert.dfy", "root", true, "", "", false, "BinarySearchTree_tmp_tmp_bn2twp5_bst4copy_insert.dfy", "// <vc-preamble>\ndatatype Tree = Empty | Node(left: Tree, value: int, right: Tree)\n\npredicate BinarySearchTree(tree: Tree)\n  decreases tree\n{\n  match tree\n  case Empty => true\n  case Node(_,_,_) =>\n    (tree.left == Empty || tree.left.value < tree.value)\n    && (tree.right == Empty || tree.right.value > tree.value)\n    && BinarySearchTree(tree.left) && BinarySearchTree(tree.right)\n    && minValue(tree.right, tree.value) && maxValue(tree.left, tree.value)\n}\n\npredicate maxValue(tree: Tree, max: int)\n  decreases tree\n{\n  match tree\n  case Empty => true\n  case Node(left,v,right) => (max > v) && maxValue(left, max) && maxValue(right, max)\n}\n\npredicate minValue(tree: Tree, min: int)\n  decreases tree\n{\n  match tree\n  case Empty => true\n  case Node(left,v,right) => (min < v) && minValue(left, min) && minValue(right, min)\n}\n\nmethod insertRecursion(tree: Tree, value: int) returns (res: Tree)\n  requires BinarySearchTree(tree)\n  decreases tree;\n  ensures res != Empty ==> BinarySearchTree(res)\n  ensures forall x :: minValue(tree, x) && x < value ==> minValue(res, x)\n  ensures forall x :: maxValue(tree, x) && x > value ==> maxValue(res, x)\n{\n  assume{:axiom} false;\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod insert(tree: Tree, value : int) returns (res: Tree)\n  requires BinarySearchTree(tree)\n  decreases tree;\n  ensures BinarySearchTree(res)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "datatype Tree = Empty | Node(left: Tree, value: int, right: Tree)\n\npredicate BinarySearchTree(tree: Tree)\n  decreases tree\n{\n  match tree\n  case Empty => true\n  case Node(_,_,_) =>\n    (tree.left == Empty || tree.left.value < tree.value)\n    && (tree.right == Empty || tree.right.value > tree.value)\n    && BinarySearchTree(tree.left) && BinarySearchTree(tree.right)\n    && minValue(tree.right, tree.value) && maxValue(tree.left, tree.value)\n}\n\npredicate maxValue(tree: Tree, max: int)\n  decreases tree\n{\n  match tree\n  case Empty => true\n  case Node(left,v,right) => (max > v) && maxValue(left, max) && maxValue(right, max)\n}\n\npredicate minValue(tree: Tree, min: int)\n  decreases tree\n{\n  match tree\n  case Empty => true\n  case Node(left,v,right) => (min < v) && minValue(left, min) && minValue(right, min)\n}\n\nmethod insertRecursion(tree: Tree, value: int) returns (res: Tree)\n  requires BinarySearchTree(tree)\n  decreases tree;\n  ensures res != Empty ==> BinarySearchTree(res)\n  ensures forall x :: minValue(tree, x) && x < value ==> minValue(res, x)\n  ensures forall x :: maxValue(tree, x) && x > value ==> maxValue(res, x)\n{\n  assume{:axiom} false;\n}\n\n// <vc-helpers>\nlemma MinValueInsert(tree: Tree, value: int, min: int)\n  requires BinarySearchTree(tree)\n  requires minValue(tree, min)\n  requires min < value\n  ensures minValue(insert(tree, value), min)\n{\n  match tree\n  case Empty =>\n    // minValue(Node(Empty, value, Empty), min) holds because min < value (given) and minValue(Empty, min) holds (by definition)\n  case Node(left, v, right) =>\n    if value < v {\n      MinValueInsert(left, value, min);\n      // New tree: Node(insert(left, value), v, right)\n      // min < v (from minValue(tree, min)) and minValue(insert(left, value), min) (by lemma) and minValue(right, min) (unchanged)\n    } else if v < value {\n      MinValueInsert(right, value, min);\n      // New tree: Node(left, v, insert(right, value))\n      // min < v (from minValue(tree, min)) and minValue(left, min) (unchanged) and minValue(insert(right, value), min) (by lemma)\n    } else {\n      // v == value: tree remains unchanged after insertion\n      // minValue(tree, min) holds by precondition\n    }\n}\n\nlemma MaxValueInsert(tree: Tree, value: int, max: int)\n  requires BinarySearchTree(tree)\n  requires maxValue(tree, max)\n  requires value < max\n  ensures maxValue(insert(tree, value), max)\n{\n  match tree\n  case Empty =>\n    // maxValue(Node(Empty, value, Empty), max) holds because value < max (given) and maxValue(Empty, max) holds (by definition)\n  case Node(left, v, right) =>\n    if value < v {\n      MaxValueInsert(left, value, max);\n      // New tree: Node(insert(left, value), v, right)\n      // max > v (from maxValue(tree, max)) and maxValue(insert(left, value), max) (by lemma) and maxValue(right, max) (unchanged)\n    } else if v < value {\n      MaxValueInsert(right, value, max);\n      // New tree: Node(left, v, insert(right, value))\n      // max > v (from maxValue(tree, max)) and maxValue(left, max) (unchanged) and maxValue(insert(right, value), max) (by lemma)\n    } else {\n      // v == value: tree remains unchanged after insertion\n      // maxValue(tree, max) holds by precondition\n    }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod insert(tree: Tree, value : int) returns (res: Tree)\n  requires BinarySearchTree(tree)\n  decreases tree;\n  ensures BinarySearchTree(res)\n// </vc-spec>\n// <vc-code>\n{\n  if tree == Empty {\n    return Node(Empty, value, Empty);\n  } else {\n    var left := tree.left;\n    var right := tree.right;\n    var v := tree.value;\n\n    if value < v {\n      var oldLeft := left;\n      left := insert(left, value);\n      MaxValueInsert(oldLeft, value, v);\n    } else if v < value {\n      var oldRight := right;\n      right := insert(right, value);\n      MinValueInsert(oldRight, value, v);\n    }\n    return Node(left, v, right);\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["Dafny-Grind75_tmp_tmpsxfz3i4r_problems_twoSum_twoSum.dfy", "root", true, "", "", false, "Dafny-Grind75_tmp_tmpsxfz3i4r_problems_twoSum_twoSum.dfy", "// <vc-preamble>\npredicate summingPair(i: nat, j: nat, nums: seq<int>, target: int)\n    requires i < |nums|\n    requires j < |nums|\n{\n    i != j &&  nums[i] + nums[j] == target\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod twoSum(nums: seq<int>, target: int) returns (pair: (nat, nat))\n    requires exists i:nat,j:nat :: i < j < |nums| && summingPair(i, j, nums, target) && forall l: nat, m: nat :: l <  m < |nums| && l != i && m != j ==> !summingPair(l, m, nums, target)\n    ensures 0 <= pair.0 < |nums| && 0 <= pair.1 < |nums| && summingPair(pair.0, pair.1, nums, target)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "predicate summingPair(i: nat, j: nat, nums: seq<int>, target: int)\n    requires i < |nums|\n    requires j < |nums|\n{\n    i != j &&  nums[i] + nums[j] == target\n}\n\n// <vc-helpers>\n// <vc-helpers>\n\n// </vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod twoSum(nums: seq<int>, target: int) returns (pair: (nat, nat))\n    requires exists i:nat,j:nat :: i < j < |nums| && summingPair(i, j, nums, target) && forall l: nat, m: nat :: l <  m < |nums| && l != i && m != j ==> !summingPair(l, m, nums, target)\n    ensures 0 <= pair.0 < |nums| && 0 <= pair.1 < |nums| && summingPair(pair.0, pair.1, nums, target)\n// </vc-spec>\n// <vc-code>\n{\n  for i := 0 to |nums|-1\n    for j := i+1 to |nums|-1\n      if nums[i] + nums[j] == target\n        return (i, j);\n}\n// </vc-code>\n\n", "", "", ""], ["Simulink-To_dafny_tmp_tmpbcuesj2t_Tank_checkRegulation.dfy", "root", false, "", "", false, "Simulink-To_dafny_tmp_tmpbcuesj2t_Tank_checkRegulation.dfy", "// <vc-preamble>\ndatatype Valve = ON | OFF\n\nclass Pipe{\n   var v1: Valve;\n   var v2: Valve;\n   var v3: Valve;\n   var in_flowv1: int;\n   var in_flowv2: int;\n   var in_flowv3: int;\n\n   constructor()\n   {\n       this.v1:= OFF;\n       this.v2:= ON;\n   }\n\n}\nclass Tank\n{\n   var pipe: Pipe;\n   var height: int;\n    constructor()\n    {\n        pipe := new Pipe();\n    }\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod checkRegulation(tank: Tank)\n\nensures (tank.height>10 && tank.pipe.v1==OFF && tank.pipe.v3==ON && tank.pipe.v2==old(tank.pipe.v2)) \n|| (tank.height <8 && tank.pipe.v1== OFF && tank.pipe.v2== ON && tank.pipe.v3==old(tank.pipe.v3))\n|| ((tank.pipe.in_flowv3 >5 || tank.pipe.in_flowv1 >5 ) && tank.pipe.v2==OFF && tank.pipe.v3==old(tank.pipe.v3) && tank.pipe.v1==old(tank.pipe.v1))\nmodifies tank.pipe;\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_has_close_elements_has_close_elements.dfy", "root", true, "", "", false, "Clover_has_close_elements_has_close_elements.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod has_close_elements(numbers: seq<real>, threshold: real) returns (res: bool)\n  requires threshold >= 0.0\n  ensures res ==> exists i: int, j: int :: 0 <= i < |numbers| && 0 <= j < |numbers| && i != j && (if numbers[i] - numbers[j] < 0.0 then numbers[j] - numbers[i] else numbers[i] - numbers[j]) < threshold\n  ensures !res ==> (forall i: int, j: int :: 1 <= i < |numbers| && 0 <= j < i ==>  (if numbers[i] - numbers[j] < 0.0 then numbers[j] - numbers[i] else numbers[i] - numbers[j]) >= threshold)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\nfunction abs_diff(x: real, y: real): real {\n  if x < y then y - x else x - y\n}\n\nlemma abs_diff_properties(x: real, y: real)\n  ensures abs_diff(x, y) >= 0.0\n  ensures abs_diff(x, y) == abs_diff(y, x)\n  ensures (x <= y) ==> abs_diff(x, y) == y - x\n  ensures (y <= x) ==> abs_diff(x, y) == x - y\n{\n  if x < y {\n    assert abs_diff(x, y) == y - x;\n  } else {\n    assert abs_diff(x, y) == x - y;\n  }\n\n  if x < y {\n    assert y - x >= 0.0;\n  } else {\n    assert x - y >= 0.0;\n  }\n\n  if x < y {\n    assert abs_diff(x, y) == y - x;\n    assert abs_diff(y, x) == y - x;\n  } else if y < x {\n    assert abs_diff(x, y) == x - y;\n    assert abs_diff(y, x) == x - y;\n  } else {\n    assert x == y;\n    assert abs_diff(x, y) == 0.0;\n    assert abs_diff(y, x) == 0.0;\n  }\n\n  if x <= y {\n    if x < y {\n      assert abs_diff(x, y) == y - x;\n    } else {\n      assert x == y;\n      assert abs_diff(x, y) == 0.0;\n      assert y - x == 0.0;\n    }\n  }\n\n  if y <= x {\n    if y < x {\n      assert abs_diff(x, y) == x - y;\n    } else {\n      assert y == x;\n      assert abs_diff(x, y) == 0.0;\n      assert x - y == 0.0;\n    }\n  }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod has_close_elements(numbers: seq<real>, threshold: real) returns (res: bool)\n  requires threshold >= 0.0\n  ensures res ==> exists i: int, j: int :: 0 <= i < |numbers| && 0 <= j < |numbers| && i != j && (if numbers[i] - numbers[j] < 0.0 then numbers[j] - numbers[i] else numbers[i] - numbers[j]) < threshold\n  ensures !res ==> (forall i: int, j: int :: 1 <= i < |numbers| && 0 <= j < i ==>  (if numbers[i] - numbers[j] < 0.0 then numbers[j] - numbers[i] else numbers[i] - numbers[j]) >= threshold)\n// </vc-spec>\n// <vc-code>\n{\n  if |numbers| < 2 {\n    return false;\n  }\n  \n  var i := 0;\n  while i < |numbers|\n    invariant 0 <= i <= |numbers|\n    invariant forall k: int, l: int :: 0 <= k < l < i ==> abs_diff(numbers[k], numbers[l]) >= threshold\n  {\n    var j := 0;\n    while j < i\n      invariant 0 <= j <= i\n      invariant forall l: int :: 0 <= l < j ==> abs_diff(numbers[i], numbers[l]) >= threshold\n    {\n      if abs_diff(numbers[i], numbers[j]) < threshold {\n        return true;\n      }\n      j := j + 1;\n    }\n    i := i + 1;\n  }\n  return false;\n}\n// </vc-code>\n\n", "", "", ""], ["Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_advanced_examples_demo_Partition.dfy", "root", false, "", "", false, "Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_advanced_examples_demo_Partition.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Partition(a: array<int>) returns (lo: int, hi: int)\n  modifies a\n  ensures 0 <= lo <= hi <= a.Length\n  ensures forall x | 0 <= x < lo :: a[x] < 0\n  ensures forall x | lo <= x < hi :: a[x] == 0\n  ensures forall x | hi <= x < a.Length :: a[x] > 0\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_565_SplitStringIntoChars.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_565_SplitStringIntoChars.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SplitStringIntoChars(s: string) returns (v: seq<char>)\n    ensures |v| == |s|\n    ensures forall i :: 0 <= i < |s| ==> v[i] == s[i]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny_tmp_tmp0wu8wmfr_tests_Search1000_Search2PowRecursive.dfy", "root", true, "", "", false, "Dafny_tmp_tmp0wu8wmfr_tests_Search1000_Search2PowRecursive.dfy", "// <vc-preamble>\npredicate Is2Pow( n: int )\n    decreases n;\n{\n    if n < 1 then\n        false\n    else if n == 1 then\n        true\n    else\n        n%2 == 0 && Is2Pow(n/2)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Search2PowRecursive( a: array<int>, i: int, n: int, x: int ) returns ( k: int )\n    decreases n;\n    requires 0 <= i <= i+n <= a.Length;\n    requires forall p,q | i <= p < q < i+n :: a[p] <= a[q];\n    requires Is2Pow(n+1);\n    ensures i <= k <= i+n;\n    ensures forall r | i <= r < k :: a[r] < x;\n    ensures forall r | k <= r < i+n :: a[r] >= x;\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "// Author: Snorri Agnarsson, snorri@hi.is\n\n// Search1000 is a Dafny version of a function shown\n// by Jon Bentley in his old Programming Pearls\n// column in CACM.  Surprisingly Dafny needs no help\n// to verify the function.\n\n// Is2Pow(n) is true iff n==2^k for some k>=0.\npredicate Is2Pow( n: int )\n    decreases n;\n{\n    if n < 1 then\n        false\n    else if n == 1 then\n        true\n    else\n        n%2 == 0 && Is2Pow(n/2)\n}\n\n// This method is a binary search that only works for array\n// segments of size n == 2^k-1 for some k>=0.\n\n// This method is a binary search that only works for array\n// segments of size n == 2^k-1 for some k>=0.\n\n// <vc-helpers>\nlemma Is2PowPlus1(n: int)\n    requires 0 < n;\n    requires Is2Pow(n);\n    ensures Is2Pow(n+1) == false;\n{\n    if n == 1 {\n        \n    } else {\n        calc {\n            n+1;\n        ==  { assert n/2 > 0; }\n            2*(n/2) + 1;\n        }\n    }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod Search2PowRecursive( a: array<int>, i: int, n: int, x: int ) returns ( k: int )\n    decreases n;\n    requires 0 <= i <= i+n <= a.Length;\n    requires forall p,q | i <= p < q < i+n :: a[p] <= a[q];\n    requires Is2Pow(n+1);\n    ensures i <= k <= i+n;\n    ensures forall r | i <= r < k :: a[r] < x;\n    ensures forall r | k <= r < i+n :: a[r] >= x;\n// </vc-spec>\n// <vc-code>\n{\n    if n == 0 {\n        return i;\n    }\n    var p := i + n/2;\n    assert n/2 > 0;\n    assert n-1-n/2 == n/2;\n    assert Is2Pow(n/2+1);\n    if x < a[p] {\n        var m := n/2;\n        assert m > 0;\n        assert Is2Pow(m+1);\n        return Search2PowRecursive(a, i, m, x);\n    } else {\n        var m := n-1-n/2;\n        assert m >= 0;\n        assert Is2Pow(m+1);\n        return Search2PowRecursive(a, p+1, m, x);\n    }\n}\n// </vc-code>\n\n", "", "", ""], ["dafny_examples_tmp_tmp8qotd4ez_test_shuffle_getRandomDataEntry.dfy", "root", false, "", "", false, "dafny_examples_tmp_tmp8qotd4ez_test_shuffle_getRandomDataEntry.dfy", "// <vc-preamble>\nmethod random(a: int, b: int) returns (r: int)\n  ensures a <= b ==> a <= r <= b\n\nfunction set_of_seq<T>(s: seq<T>): set<T>\n{\n  set x: T | x in s :: x\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod getRandomDataEntry<T(==)>(m_workList: array<T>, avoidSet: seq<T>) returns (e: T)\n  requires m_workList.Length > 0\n  ensures set_of_seq(avoidSet) < set_of_seq(m_workList[..]) ==> e !in avoidSet\n  ensures avoidSet < m_workList[..] ==> e in m_workList[..]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["630-dafny_tmp_tmpz2kokaiq_Solution_BinarySearch.dfy", "root", true, "", "", false, "630-dafny_tmp_tmpz2kokaiq_Solution_BinarySearch.dfy", "// <vc-preamble>\nfunction sorted(a: array<int>) : bool\n    reads a\n{\n   forall i,j : int :: 0 <= i < j < a.Length ==> a[i] <= a[j]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod BinarySearch(a: array<int>, x: int) returns (index: int)\n    requires sorted(a)\n    ensures 0 <= index < a.Length ==> a[index] == x\n    ensures index == -1 ==> forall i : int :: 0 <= i < a.Length ==> a[i] != x\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "function sorted(a: array<int>) : bool\n    reads a\n{\n   forall i,j : int :: 0 <= i < j < a.Length ==> a[i] <= a[j]\n}\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod BinarySearch(a: array<int>, x: int) returns (index: int)\n    requires sorted(a)\n    ensures 0 <= index < a.Length ==> a[index] == x\n    ensures index == -1 ==> forall i : int :: 0 <= i < a.Length ==> a[i] != x\n// </vc-spec>\n// <vc-code>\n{\n    var low := 0;\n    var high := a.Length - 1;\n    while low <= high\n        invariant 0 <= low <= high+1 <= a.Length\n        invariant forall i :: 0 <= i < low ==> a[i] < x\n        invariant forall i :: high < i < a.Length ==> a[i] > x\n    {\n        var mid := (low + high) / 2;\n        if a[mid] == x {\n            return mid;\n        } else if a[mid] < x {\n            low := mid + 1;\n        } else {\n            high := mid - 1;\n        }\n    }\n    return -1;\n}\n// </vc-code>\n\n", "", "", ""], ["DafnyPrograms_tmp_tmp74_f9k_c_prime-database_testPrimeness.dfy", "root", true, "", "", false, "DafnyPrograms_tmp_tmp74_f9k_c_prime-database_testPrimeness.dfy", "// <vc-preamble>\nghost predicate prime(n: nat)\n\n{ n > 1 && (forall nr | 1 < nr < n :: n % nr != 0) }\n\ndatatype Answer = Yes | No | Unknown\n\nclass {:autocontracts} PrimeMap{\n\n  var database: map<nat, bool>; \n\n  ghost predicate Valid()\n    reads this\n  {\n    forall i | i in database.Keys :: (database[i] == true <==> prime(i)) \n  }\n\n  constructor()\n    ensures database == map[]\n  {\n    database := map[];\n  }\n\nmethod IsPrime?(n: nat) returns (answer: Answer) \n      ensures database.Keys == old(database.Keys)\n      ensures (n in database) && prime(n) <==> answer == Yes \n      ensures (n in database) && !prime(n) <==> answer == No \n      ensures !(n in database) <==> answer == Unknown\n{\n  assume{:axiom} false;\n}\n\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod testPrimeness(n: nat) returns (result: bool) \n      requires n >= 0\n      ensures result <==> prime(n)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "//predicate for primeness\nghost predicate prime(n: nat)\n\n{ n > 1 && (forall nr | 1 < nr < n :: n % nr != 0) }\n\ndatatype Answer = Yes | No | Unknown\n\n//the class containing a prime database, if a number is prime it returns Yes, if it is not No and if the number\n//is not in the database it returns Unknown\nclass {:autocontracts} PrimeMap{\n\n  var database: map<nat, bool>; \n\n//the valid invariant of the class\n  ghost predicate Valid()\n    reads this\n  {\n    forall i | i in database.Keys :: (database[i] == true <==> prime(i)) \n  }\n\n//the constructor\n  constructor()\n    ensures database == map[]\n  {\n    database := map[];\n  }\n\n\n  // lookup n in the database and reply with Yes or No if it's in the database and it is or it is not prime,\n  // or with Unknown when it's not in the databse\nmethod IsPrime?(n: nat) returns (answer: Answer) \n      ensures database.Keys == old(database.Keys)\n      ensures (n in database) && prime(n) <==> answer == Yes \n      ensures (n in database) && !prime(n) <==> answer == No \n      ensures !(n in database) <==> answer == Unknown\n{\n  assume{:axiom} false;\n}\n\n  // method to test whether a number is prime, returns bool\n\n}\n\n// <vc-helpers>\n// (empty)\n// </vc-helpers>\n\n// <vc-spec>\nmethod testPrimeness(n: nat) returns (result: bool) \n      requires n >= 0\n      ensures result <==> prime(n)\n// </vc-spec>\n// <vc-code>\n{\n  if n < 2 {\n    return false;\n  }\n  var i := 2\n  while i < n\n    invariant 2 <= i <= n\n    invariant forall j | 2 <= j < i :: n % j != 0\n  {\n    if n % i == 0 {\n      return false;\n    }\n    i := i + 1;\n  }\n  return true;\n}\n// </vc-code>\n\n", "", "", ""], ["BPTree-verif_tmp_tmpq1z6xm1d_Utils_GetInsertIndex.dfy", "root", true, "", "", false, "BPTree-verif_tmp_tmpq1z6xm1d_Utils_GetInsertIndex.dfy", "// <vc-preamble>\nfunction SetLessThan(numbers: set<int>, threshold: int): set<int>\n{\n  set i | i in numbers && i < threshold\n}\n\nfunction seqSet(nums: seq<int>, index: nat): set<int> {\n    set x | 0 <= x < index < |nums| :: nums[x]\n}\n\nghost predicate SortedSeq(a: seq<int>)\n\n{\n  (forall i,j :: 0<= i< j < |a| ==> ( a[i] < a[j] ))\n}\n\npredicate sorted(a: seq<int>)\n{\n  forall i,j :: 0 <= i < j < |a| ==> a[i] < a[j]\n}\n\npredicate distinct(a: seq<int>)\n{\n  forall i,j :: (0 <= i < |a| && 0 <= j < |a| && i != j) ==> a[i] != a[j]\n}\n\npredicate sorted_eq(a: seq<int>)\n{\n  forall i,j :: 0 <= i < j < |a| ==> a[i] <= a[j]\n}\n\npredicate lessThan(a:seq<int>, key:int) {\n  forall i :: 0 <= i < |a| ==> a[i] < key\n}\n\npredicate greaterThan(a:seq<int>, key:int) {\n  forall i :: 0 <= i < |a| ==> a[i] > key\n}\n\npredicate greaterEqualThan(a:seq<int>, key:int) {\n  forall i :: 0 <= i < |a| ==> a[i] >= key\n}\nfunction count(a: seq<bool>): nat\n{\n  if |a| == 0 then 0 else\n    (if a[0] then 1 else 0) + count(a[1..])\n}\n\nmethod InsertIntoSorted(a: array<int>, limit:int, key:int) returns (b: array<int>)\n    requires key > 0\n    requires key !in a[..]\n    requires 0 <= limit < a.Length\n    requires forall i :: 0 <= i < limit ==> a[i] > 0\n    requires forall i :: limit <= i < a.Length ==> a[i] == 0\n    requires sorted(a[..limit]) \n    ensures b.Length == a.Length\n    ensures sorted(b[..(limit+ 1)])\n    ensures forall i :: limit + 1 <= i < b.Length ==> b[i] == 0  \n    ensures forall i :: 0 <= i < limit ==> a[i] in b[..]\n    ensures forall i :: 0 <= i < limit + 1 ==> b[i] > 0\n{\n  assume{:axiom} false;\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod GetInsertIndex(a: array<int>, limit: int, x:int) returns (idx:int)\n\n  requires x !in a[..]\n  requires 0 <= limit <= a.Length\n  requires SortedSeq(a[..limit])\n  ensures 0<= idx <= limit\n  ensures SortedSeq(a[..limit])\n  ensures idx > 0 ==> a[idx-1]< x\n  ensures idx < limit ==> x < a[idx]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "// method CountLessThan(numbers: set<int>, threshold: int) returns (count: int)\n// //   ensures count == |set i | i in numbers && i < threshold|\n//     ensures count == |SetLessThan(numbers, threshold)|\n// {\n//   count := 0;\n//   var ss := numbers;\n//   while ss != {}\n//     decreases |ss|\n//   {\n//     var i: int :| i in ss;\n//     ss := ss - {i};\n//     if i < threshold {\n//       count := count + 1;\n//     }\n\n//   }\n//   assert count == |SetLessThan(numbers, threshold)|;\n// //   assert count == |set i | i in numbers && i < threshold|;\n// }\n\nfunction SetLessThan(numbers: set<int>, threshold: int): set<int>\n{\n  set i | i in numbers && i < threshold\n}\n\n\n/*\n*/\n\nfunction seqSet(nums: seq<int>, index: nat): set<int> {\n    set x | 0 <= x < index < |nums| :: nums[x]\n}\n\n\n// lemma numElemsOfSet(a: seq<int>)\n//   requires sorted(a)\n// {\n//   assert distinct(a);\n//   var s := set x | x in a;\n//   assert forall x :: x in s ==> x in a[..];\n//   assert forall x :: x in a ==> x in s;\n//   assert |s| == |a|;\n// }\n\n// lemma CardinalitySetEqualsArray(a: seq<int>, s: set<int>)\n//   requires s == set x | x in a\n//   requires distinct(a)\n//   ensures |s| == |a|\n// {\n//     assert forall x :: x in s ==> exists i :: 0 <= i < |a| && a[i] == x;\n//     assert forall i, j :: 0 <= i < |a| && 0 <= j < |a| && i != j ==> a[i] != a[j];\n//     // Assert that each element in the array is in the set\n//     assert forall i :: 0 <= i < |a| ==> a[i] in s;\n//     // Assert that the set contains exactly the elements in the array\n//     assert s == set x | x in a;\n//     // Assert that the set is a subset of the array\n//     assert forall x :: x in s <==> x in a;\n\n//     // Conclude the equivalence\n//     assert |s| == |a|;\n// }\n\n\n/*\n\n\n*/\n\n// TODO play with this for keys==Contents\n\n\nghost predicate SortedSeq(a: seq<int>)\n  //sequence is sorted from left to right\n{\n  (forall i,j :: 0<= i< j < |a| ==> ( a[i] < a[j] ))\n}\n\npredicate sorted(a: seq<int>)\n{\n  forall i,j :: 0 <= i < j < |a| ==> a[i] < a[j]\n}\n\npredicate distinct(a: seq<int>)\n{\n  forall i,j :: (0 <= i < |a| && 0 <= j < |a| && i != j) ==> a[i] != a[j]\n}\n\npredicate sorted_eq(a: seq<int>)\n{\n  forall i,j :: 0 <= i < j < |a| ==> a[i] <= a[j]\n}\n\npredicate lessThan(a:seq<int>, key:int) {\n  forall i :: 0 <= i < |a| ==> a[i] < key\n}\n\npredicate greaterThan(a:seq<int>, key:int) {\n  forall i :: 0 <= i < |a| ==> a[i] > key\n}\n\npredicate greaterEqualThan(a:seq<int>, key:int) {\n  forall i :: 0 <= i < |a| ==> a[i] >= key\n}\n/*\nmethod InsertSorted(a: array<int>, key: int ) returns (b: array<int>)\n  requires sorted_eq(a[..])\n  ensures sorted_eq(b[..])\n{\n  assume{:axiom} false;\n}\n*/\n\nfunction count(a: seq<bool>): nat\n{\n  if |a| == 0 then 0 else\n    (if a[0] then 1 else 0) + count(a[1..])\n}\n\n// verifies in more than 45 seconds, but less than 100 seconds\nmethod InsertIntoSorted(a: array<int>, limit:int, key:int) returns (b: array<int>)\n    requires key > 0\n    requires key !in a[..]\n    requires 0 <= limit < a.Length\n    requires forall i :: 0 <= i < limit ==> a[i] > 0\n    requires forall i :: limit <= i < a.Length ==> a[i] == 0\n    requires sorted(a[..limit]) \n    ensures b.Length == a.Length\n    ensures sorted(b[..(limit+ 1)])\n    ensures forall i :: limit + 1 <= i < b.Length ==> b[i] == 0  \n    ensures forall i :: 0 <= i < limit ==> a[i] in b[..]\n    ensures forall i :: 0 <= i < limit + 1 ==> b[i] > 0\n{\n  assume{:axiom} false;\n}\n\n// <vc-helpers>\nlemma lemma_SortedSeqInsert(a: seq<int>, limit: int, x: int, idx: int)\n  requires 0 <= limit <= |a|\n  requires x !in a[..limit]\n  requires SortedSeq(a[..limit])\n  requires 0 <= idx <= limit\n  requires idx > 0 ==> a[idx-1] < x\n  requires idx < limit ==> x < a[idx]\n  ensures SortedSeq(a[..limit][idx := x])\n{\n  if limit == 0 {\n    assert a[..0] == [];\n    assert a[..0][0 := x] == [x];\n    assert SortedSeq([x]);\n  } else {\n    assert |a[..limit]| == limit;\n    var a' := a[..limit][idx := x];\n    forall i, j | 0 <= i < j < limit\n      ensures a'[i] < a'[j]\n    {\n      if i < idx && j < idx {\n        assert a'[i] == a[i] && a'[j] == a[j];\n        assert a[i] < a[j];\n      } else if i < idx && j == idx {\n        assert a'[i] == a[i] && a'[j] == x;\n        assert a[i] < x;\n      } else if i < idx && j > idx {\n        assert a'[i] == a[i];\n        assert a'[j] == a[j-1];\n        assert a[i] < x;\n        assert x < a[j-1];\n        assert a[i] < a[j-1];\n      } else if i == idx && j > idx {\n        assert a'[i] == x;\n        assert a'[j] == a[j-1];\n        assert x < a[j-1];\n      } else {\n        assert a'[i] == a[i-1];\n        assert a'[j] == a[j-1];\n        assert a[i-1] < a[j-1];\n      }\n    }\n  }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod GetInsertIndex(a: array<int>, limit: int, x:int) returns (idx:int)\n  // get index so that array stays sorted\n  requires x !in a[..]\n  requires 0 <= limit <= a.Length\n  requires SortedSeq(a[..limit])\n  ensures 0<= idx <= limit\n  ensures SortedSeq(a[..limit])\n  ensures idx > 0 ==> a[idx-1]< x\n  ensures idx < limit ==> x < a[idx]\n// </vc-spec>\n// <vc-code>\n{\n  var low := 0;\n  var high := limit;\n  while low < high\n    decreases high - low\n    invariant 0 <= low <= high <= limit\n    invariant forall i :: 0 <= i < low ==> a[i] < x\n    invariant forall i :: high <= i < limit ==> a[i] > x\n  {\n    var mid := (low + high) / 2;\n    if a[mid] < x {\n      low := mid + 1;\n    } else {\n      high := mid;\n    }\n  }\n  return low;\n}\n// </vc-code>\n\n", "", "", ""], ["DafnyPrograms_tmp_tmp74_f9k_c_automaton_ExecuteAutomaton.dfy", "root", true, "", "", false, "DafnyPrograms_tmp_tmp74_f9k_c_automaton_ExecuteAutomaton.dfy", "// <vc-preamble>\nclass Automaton {\n\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ExecuteAutomaton(init: seq<bool>, rule: (bool, bool, bool) -> bool, steps: nat)\n  returns (table: seq<seq<bool>>)\n\n  requires |init| >= 2\n\n  ensures |table| == 1 + steps\n\n  ensures table[0] == init;\n\n  ensures forall i | 0 <= i < |table| :: |table[i]| == |init|\n\n  ensures forall i | 0 <= i < |table| - 1 ::\n            forall j | 1 <= j <= |table[i]| - 2 :: table[i + 1][j] == rule(table[i][j - 1], table[i][j], table[i][j + 1])\n\n  ensures forall i | 0 <= i < |table| - 1 ::\n            table[i + 1][0] == rule(false, table[i][0], table[i][1]) && table[i + 1][|table[i]| - 1] == rule(table[i][|table[i]| - 2], table[i][|table[i]| - 1], false)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "/**\nConsider cellular automata: a row of cells is repeatedly updated according to a rule. In this exercise I dabbled with,\neach cell has the value either false or true. Each cell's next state depends only on the immediate neighbours, in the \ncase where the cell is at the edges of the row, the inexistent neighbours are replaced by \"false\". The automaton table \nwill contain the initial row, plus a row for each number of steps.\n */\nclass Automaton {\n\n/**\nThis method computes the automaton.\nProvide the initial row: init, the rule and the desired number of steps\n */\n\n}\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod ExecuteAutomaton(init: seq<bool>, rule: (bool, bool, bool) -> bool, steps: nat)\n  returns (table: seq<seq<bool>>)\n  // we need the initial row to have the length bigger or equal to two\n  requires |init| >= 2\n  // after computation the automaton is made of the initial row plus a row for each of the steps\n  ensures |table| == 1 + steps\n  // the automaton must have the initial row at the top\n  ensures table[0] == init;\n  // all rows in the automaton must be the same length\n  ensures forall i | 0 <= i < |table| :: |table[i]| == |init|\n  // all the middle row elements (with existing neighbours) after a step, will be equal to the rule applied on the element in the previous state\n  // and its neigbours\n  ensures forall i | 0 <= i < |table| - 1 ::\n            forall j | 1 <= j <= |table[i]| - 2 :: table[i + 1][j] == rule(table[i][j - 1], table[i][j], table[i][j + 1])\n  // the corner row elements (with non-existing neighbours) after a step, will be equal to the rule applied on the element in the previous state,\n  // its neighbour and false\n  ensures forall i | 0 <= i < |table| - 1 ::\n            table[i + 1][0] == rule(false, table[i][0], table[i][1]) && table[i + 1][|table[i]| - 1] == rule(table[i][|table[i]| - 2], table[i][|table[i]| - 1], false)\n// </vc-spec>\n// <vc-code>\n{\n  table := [init];\n  for i := 0 to steps\n    invariant 0 <= i <= steps\n    invariant |table| == i+1\n    invariant table[0] == init\n    invariant forall k | 0 <= k < |table| :: |table[k]| == |init|\n    invariant forall k | 0 <= k < |table\n// </vc-code>\n\n", "", "", ""], ["CVS-handout1_tmp_tmptm52no3k_1_query.dfy", "root", true, "", "", false, "CVS-handout1_tmp_tmptm52no3k_1_query.dfy", "// <vc-preamble>\nfunction sum(a: array<int>, i: int, j: int): int\n    reads a\n    requires 0 <= i <= j <= a.Length\n    decreases j - i\n{\n    if (i == j) then 0\n    else a[i] + sum(a, i+1, j)\n}\n\npredicate is_prefix_sum_for (a: array<int>, c: array<int>)\n    requires a.Length + 1 == c.Length\n    requires c[0] == 0\n    reads c, a\n{\n    forall i: int :: 0 <= i < a.Length ==> c[i+1] == c[i] + a[i]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod query(a: array<int>, i: int, j: int) returns (res:int)\n    requires 0 <= i <= j <= a.Length\n    ensures res == sum(a, i, j)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "/*                                      Cumulative Sums over Arrays                                        */\n\n/*\n    Daniel Cavalheiro   57869\n    Pedro Nunes         57854\n*/\n\n\n\n//(a)\n\nfunction sum(a: array<int>, i: int, j: int): int\n    reads a\n    requires 0 <= i <= j <= a.Length\n    decreases j - i\n{\n    if (i == j) then 0\n    else a[i] + sum(a, i+1, j)\n}\n\n\n\n//(b)\n\n//(c)\n\npredicate is_prefix_sum_for (a: array<int>, c: array<int>)\n    requires a.Length + 1 == c.Length\n    requires c[0] == 0\n    reads c, a\n{\n    forall i: int :: 0 <= i < a.Length ==> c[i+1] == c[i] + a[i]\n}\n\n// <vc-helpers>\nlemma LemmaPrefixSum(a: array<int>, c: array<int>, i: int, j: int)\n    reads a, c\n    requires 0 <= i <= j <= a.Length\n    requires is_prefix_sum_for(a, c)\n    ensures sum(a, i, j) == c[j] - c[i]\n    decreases j - i\n{\n    if i == j {\n        calc {\n            sum(a, i, j);\n            0;\n            c[j] - c[i];\n            0;\n        }\n    } else {\n        assert a[i] == c[i+1] - c[i] by {\n            reveal is_prefix_sum_for();\n        }\n        LemmaPrefixSum(a, c, i+1, j);\n        calc {\n            sum(a, i, j);\n            a[i] + sum(a, i+1, j);\n            a[i] + (c[j] - c[i+1]);\n            (c[i+1] - c[i]) + (c[j] - c[i+1]);\n            c[j] - c[i];\n        }\n    }\n}\n\nlemma EstablishIsPrefixSum(a: array<int>, c: array<int>)\n    reads a, c\n    requires c.Length == a.Length + 1\n    requires c[0] == 0\n    requires forall g :: 0 <= g < a.Length ==> c[g+1] == c[g] + a[g]\n    ensures is_prefix_sum_for(a, c)\n{\n    reveal is_prefix_sum_for();\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod query(a: array<int>, i: int, j: int) returns (res:int)\n    requires 0 <= i <= j <= a.Length\n    ensures res == sum(a, i, j)\n// </vc-spec>\n// <vc-code>\n{\n    var c := new int[a.Length+1];\n    c[0] := 0;\n    var k := 0;\n    while (k < a.Length)\n        invariant 0 <= k <= a.Length\n        invariant forall g :: 0 <= g < k ==> c[g+1] == c[g] + a[g]\n    {\n        c[k+1] := c[k] + a[k];\n        k := k + 1;\n    }\n    EstablishIsPrefixSum(a, c);\n    LemmaPrefixSum(a, c, i, j);\n    return c[j] - c[i];\n}\n// </vc-code>\n\n", "", "", ""], ["MFS_tmp_tmpmmnu354t_Praticas_TP9_Power_powerIter.dfy", "root", true, "", "", false, "MFS_tmp_tmpmmnu354t_Praticas_TP9_Power_powerIter.dfy", "// <vc-preamble>\nfunction power(x: real, n: nat) : real\n{\n    if n == 0 then 1.0 else x * power(x, n-1)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod powerIter(b: real, n: nat) returns (p : real)\n    ensures p == power(b, n)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "/* \n* Formal verification of O(n) and O(log n) algorithms to calculate the natural\n* power of a real number (x^n), illustrating the usage of lemmas.\n* FEUP, M.EIC, MFS, 2021/22.\n*/\n\n// Initial specification/definition of x^n, recursive, functional style, \n// with time and space complexity O(n).\nfunction power(x: real, n: nat) : real\n{\n    if n == 0 then 1.0 else x * power(x, n-1)\n}\n\n// Iterative version, imperative, with time complexity O(n) and space complexity O(1).\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod powerIter(b: real, n: nat) returns (p : real)\n    ensures p == power(b, n)\n// </vc-spec>\n// <vc-code>\n{\n    p := 1.0;\n    var i: nat := 0;\n    while i < n\n        invariant 0 <= i <= n\n        invariant p * power(b, n - i) == power(b, n)\n    {\n        p := p * b;\n        i := i + 1;\n    }\n}\n// </vc-code>\n\n// Recursive version, imperative, with time and space complexity O(log n).\n\n// A simple test case to make sure the specification is adequate.", "", "", ""], ["Dafny-Exercises_tmp_tmpjm75muf__Session7Exercises_ExerciseReplace_replace.dfy", "root", true, "", "", false, "Dafny-Exercises_tmp_tmpjm75muf__Session7Exercises_ExerciseReplace_replace.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod replace(v:array<int>, x:int, y:int)\nmodifies v\nensures forall k::0<=k<old(v.Length) && old(v[k])==x ==> v[k]==y\nensures forall k::0<=k<old(v.Length) && old(v[k])!=x ==> v[k]==old(v[k])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod replace(v:array<int>, x:int, y:int)\nmodifies v\nensures forall k::0<=k<old(v.Length) && old(v[k])==x ==> v[k]==y\nensures forall k::0<=k<old(v.Length) && old(v[k])!=x ==> v[k]==old(v[k])\n// </vc-spec>\n// <vc-code>\n{\n  var i := 0;\n  while i < v.Length\n      invariant 0 <= i <= v.Length\n      invariant forall k :: 0 <= k < i && old(v)[k] == x ==> v[k] == y\n      invariant forall k :: 0 <= k < i && old(v)[k] != x ==> v[k] == old(v)[k]\n      invariant forall k :: i <= k < v.Length ==> v[k] == old(v)[k]\n  {\n      if v[i] == x {\n          v[i] := y;\n      }\n      i := i + 1;\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_436_FindNegativeNumbers.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_436_FindNegativeNumbers.dfy", "// <vc-preamble>\npredicate IsNegative(n: int)\n{\n    n < 0\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod FindNegativeNumbers(arr: array<int>) returns (negativeList: seq<int>)\n\n    ensures forall i :: 0 <= i < |negativeList| ==> IsNegative(negativeList[i]) && negativeList[i] in arr[..]\n\n    ensures forall i :: 0 <= i < arr.Length && IsNegative(arr[i]) ==> arr[i] in negativeList\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_array_append_append.dfy", "root", true, "", "", false, "Clover_array_append_append.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod append(a:array<int>, b:int) returns (c:array<int>)\n  ensures  a[..] + [b] == c[..]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod append(a:array<int>, b:int) returns (c:array<int>)\n  ensures  a[..] + [b] == c[..]\n// </vc-spec>\n// <vc-code>\n{\n  var c := new int[a.Length + 1];\n  var i := 0;\n  while i < a.Length\n    invariant 0 <= i <= a.Length\n    invariant c[..i] == a[..i]\n  {\n    c[i] := a[i];\n    i := i + 1;\n  }\n  c[i] := b;\n  return c;\n}\n// </vc-code>\n\n", "", "", ""], ["Programmverifikation-und-synthese_tmp_tmppurk6ime_PVS_Assignment_ex_10_Hoangkim_ex10_hoangkim_q.dfy", "root", false, "", "", false, "Programmverifikation-und-synthese_tmp_tmppurk6ime_PVS_Assignment_ex_10_Hoangkim_ex10_hoangkim_q.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod q(x:nat, y:nat) returns (z:nat)\nrequires y - x > 2\nensures x < z*z < y\n\nmethod strange()\nensures 1==2\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_swap_sim_SwapSimultaneous.dfy", "root", true, "", "", false, "Clover_swap_sim_SwapSimultaneous.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SwapSimultaneous(X: int, Y: int) returns(x: int, y: int)\n  ensures x==Y\n  ensures y==X\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod SwapSimultaneous(X: int, Y: int) returns(x: int, y: int)\n  ensures x==Y\n  ensures y==X\n// </vc-spec>\n// <vc-code>\n{\n  x := Y;\n  y := X;\n}\n// </vc-code>\n\n", "", "", ""], ["Clover_array_sum_arraySum.dfy", "root", true, "", "", false, "Clover_array_sum_arraySum.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod arraySum(a: array<int>, b: array<int>) returns (c: array<int> )\n  requires a.Length==b.Length\n  ensures c.Length==a.Length\n  ensures forall i:: 0 <= i< a.Length==> a[i] + b[i]==c[i]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod arraySum(a: array<int>, b: array<int>) returns (c: array<int> )\n  requires a.Length==b.Length\n  ensures c.Length==a.Length\n  ensures forall i:: 0 <= i< a.Length==> a[i] + b[i]==c[i]\n// </vc-spec>\n// <vc-code>\n{\n  c := new int[a.Length];\n  for i := 0 to a.Length\n    invariant forall j :: 0 <= j < i ==> c[j] == a[j] + b[j]\n  {\n    c[i] := a[i] + b[i];\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["Clover_test_array_TestArrayElements.dfy", "root", true, "", "", false, "Clover_test_array_TestArrayElements.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod TestArrayElements(a:array<int>, j: nat)\n  requires 0<=j < a.Length\n  modifies a\n  ensures a[j] == 60\n  ensures forall k :: 0 <= k < a.Length && k != j ==> a[k] == old(a[k])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod TestArrayElements(a:array<int>, j: nat)\n  requires 0<=j < a.Length\n  modifies a\n  ensures a[j] == 60\n  ensures forall k :: 0 <= k < a.Length && k != j ==> a[k] == old(a[k])\n// </vc-spec>\n// <vc-code>\n{\n  a[j] := 60;\n}\n// </vc-code>\n\n", "", "", ""], ["Clover_count_lessthan_CountLessThan.dfy", "root", true, "", "", false, "Clover_count_lessthan_CountLessThan.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod CountLessThan(numbers: set<int>, threshold: int) returns (count: int)\n  ensures count == |set i | i in numbers && i < threshold|\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod CountLessThan(numbers: set<int>, threshold: int) returns (count: int)\n  ensures count == |set i | i in numbers && i < threshold|\n// </vc-spec>\n// <vc-code>\n{\n    var s := set i | i in numbers && i < threshold;\n    count := |s|;\n}\n// </vc-code>\n\n", "", "", ""], ["Clover_reverse_reverse.dfy", "root", true, "", "", false, "Clover_reverse_reverse.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod reverse(a: array<int>)\n  modifies a\n  ensures forall i :: 0 <= i < a.Length ==> a[i] == old(a[a.Length - 1 - i])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod reverse(a: array<int>)\n  modifies a\n  ensures forall i :: 0 <= i < a.Length ==> a[i] == old(a[a.Length - 1 - i])\n// </vc-spec>\n// <vc-code>\n{\n  var i := 0;\n  var j := a.Length - 1;\n  while i < j\n    invariant 0 <= i <= j+1 <= a.Length\n    invariant i + j == a.Length - 1\n    invariant forall k :: 0 <= k < i ==> a[k] == old(a[a.Length - 1 - k])\n    invariant forall k :: j+1 <= k < a.Length ==> a[k] == old(a[a.Length - 1 - k])\n    invariant forall k :: i <= k <= j ==> a[k] == old(a[k])\n  {\n    var temp := a[i];\n    a[i] := a[j];\n    a[j] := temp;\n    i := i + 1;\n    j := j - 1;\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_616_ElementWiseModulo.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_616_ElementWiseModulo.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ElementWiseModulo(a: array<int>, b: array<int>) returns (result: array<int>)\n    requires a != null && b != null\n    requires a.Length == b.Length\n    requires forall i :: 0 <= i < b.Length ==> b[i] != 0\n    ensures result != null\n    ensures result.Length == a.Length\n    ensures forall i :: 0 <= i < result.Length ==> result[i] == a[i] % b[i]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["MFES_2021_tmp_tmpuljn8zd9_TheoreticalClasses_Power_powerIter.dfy", "root", true, "", "", false, "MFES_2021_tmp_tmpuljn8zd9_TheoreticalClasses_Power_powerIter.dfy", "// <vc-preamble>\nfunction power(x: real, n: nat) : real\n  decreases n\n{\n    if n == 0 then 1.0 else x * power(x, n-1)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod powerIter(x: real, n: nat) returns (p : real)\n  ensures p == power(x, n)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "/* \n* Formal verification of O(n) and O(log n) algorithms to calculate the natural\n* power of a real number (x^n), illustrating the usage of lemmas.\n* FEUP, MIEIC, MFES, 2020/21.\n*/\n\n// Initial specification/definition of x^n, recursive, functional style, \n// with time and space complexity O(n).\nfunction power(x: real, n: nat) : real\n  decreases n\n{\n    if n == 0 then 1.0 else x * power(x, n-1)\n}\n\n// Iterative version, imperative, with time complexity O(n) and space complexity O(1).\n\n// <vc-helpers>\nlemma power_mult(x: real, a: nat, b: nat)\n  ensures power(x, a) * power(x, b) == power(x, a + b)\n{\n  if a == 0 {\n    calc {\n      power(x, 0) * power(x, b);\n      1.0 * power(x, b);\n      power(x, b);\n      power(x, 0 + b);\n    }\n  } else {\n    calc {\n      power(x, a) * power(x, b);\n      x * power(x, a - 1) * power(x, b);\n      { power_mult(x, a - 1, b); }\n      x * power(x, (a - 1) + b);\n      x * power(x, a + b - 1);\n      power(x, a + b);\n    }\n  }\n}\n\nlemma power_square(x: real, n: nat)\n  ensures power(x, n) * power(x, n) == power(x, 2 * n)\n{\n  power_mult(x, n, n);\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod powerIter(x: real, n: nat) returns (p : real)\n  ensures p == power(x, n)\n// </vc-spec>\n// <vc-code>\n{\n  p := 1.0;\n  var i := 0;\n  \n  while i < n\n    invariant 0 <= i <= n\n    invariant p == power(x, i)\n  {\n    p := p * x;\n    i := i + 1;\n  }\n}\n// </vc-code>\n\n// Recursive version, imperative, with time and space complexity O(log n).\n\n// States the property x^a * x^b = x^(a+b), that powerOpt takes advantage of. \n// The annotation {:induction a} guides Dafny to prove the property\n// by automatic induction on 'a'.\n\n// A simple test case to make sure the specification is adequate.", "", "", ""], ["dafny-exercises_tmp_tmp5mvrowrx_leetcode_26-remove-duplicates-from-sorted-array_RemoveDuplicates.dfy", "root", false, "", "", false, "dafny-exercises_tmp_tmp5mvrowrx_leetcode_26-remove-duplicates-from-sorted-array_RemoveDuplicates.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod RemoveDuplicates(nums: array<int>) returns (num_length: int)\n  modifies nums\n  requires forall i, j | 0 <= i < j < nums.Length :: nums[i] <= nums[j]\n  ensures nums.Length == old(nums).Length\n  ensures 0 <= num_length <= nums.Length\n  ensures forall i, j | 0 <= i < j < num_length :: nums[i] != nums[j]\n  ensures forall i | 0 <= i < num_length :: nums[i] in old(nums[..])\n  ensures forall i | 0 <= i < nums.Length :: old(nums[i]) in nums[..num_length]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["llm-verified-eval_tmp_tmpd2deqn_i_dafny_3_below_zero.dfy", "root", false, "", "", false, "llm-verified-eval_tmp_tmpd2deqn_i_dafny_3_below_zero.dfy", "// <vc-preamble>\nfunction sum(s: seq<int>, n: nat): int\n    requires n <= |s|\n{\n    if |s| == 0 || n == 0 then\n        0\n    else\n        s[0] + sum(s[1..], n-1)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod below_zero(ops: seq<int>) returns (result: bool)\n    ensures result <==> exists n: nat :: n <= |ops| && sum(ops, n) < 0\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-programs_tmp_tmpcwodh6qh_src_expt_expt.dfy", "root", false, "", "", false, "dafny-programs_tmp_tmpcwodh6qh_src_expt_expt.dfy", "// <vc-preamble>\nghost function Expt(b: int, n: nat): int\n  requires n >= 0\n{\n  if n == 0 then 1 else b * Expt(b, n - 1)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod expt(b: int, n: nat) returns (res: int) \n  ensures res == Expt(b, n)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny_tmp_tmp0wu8wmfr_Heimaverkefni_3_SelectionSortMultiset_Sort.dfy", "root", false, "", "", false, "Dafny_tmp_tmp0wu8wmfr_Heimaverkefni_3_SelectionSortMultiset_Sort.dfy", "// <vc-preamble>\nmethod MinOfMultiset( m: multiset<int> ) returns( min: int )\n    ensures min in m;\n    ensures forall z | z in m :: min <= z;\n{\n  assume{:axiom} false;\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Sort( m: multiset<int> ) returns ( s: seq<int> )\n\n    ensures multiset(s) == m;\n    ensures forall p,q | 0 <= p < q < |s| :: s[p] <= s[q];\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny-Projects_tmp_tmph399drhy_p2_arraySplit_ArraySplit.dfy", "root", true, "", "", false, "Dafny-Projects_tmp_tmph399drhy_p2_arraySplit_ArraySplit.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ArraySplit (a : array<int>) returns (b : array<int>, c : array<int>)\n  ensures fresh(b)\n  ensures fresh(c)\n  ensures a[..] == b[..] + c[..]\n  ensures a.Length == b.Length + c.Length\n  ensures a.Length > 1 ==> a.Length > b.Length\n  ensures a.Length > 1 ==> a.Length > c.Length\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\nlemma ConcatLemma(a: array<int>, splitIndex: int)\n  requires 0 <= splitIndex <= a.Length\n  ensures a[..] == a[..splitIndex] + a[splitIndex..]\n{\n  assert |a[..]| == |a[..splitIndex] + a[splitIndex..]|;\n  assert |a[..splitIndex] + a[splitIndex..]| == splitIndex + (a.Length - splitIndex);\n  assert splitIndex + (a.Length - splitIndex) == a.Length;\n  forall i | 0 <= i < a.Length\n    ensures a[i] == (a[..splitIndex] + a[splitIndex..])[i]\n  {\n    if i < splitIndex {\n      assert (a[..splitIndex] + a[splitIndex..])[i] == a[..splitIndex][i];\n      assert a[..splitIndex][i] == a[i];\n    } else {\n      var j := i - splitIndex;\n      assert (a[..splitIndex] + a[splitIndex..])[i] == a[splitIndex..][j];\n      assert a[splitIndex..][j] == a[splitIndex + j];\n      assert splitIndex + j == i;\n      assert a[splitIndex + j] == a[i];\n    }\n  }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod ArraySplit (a : array<int>) returns (b : array<int>, c : array<int>)\n  ensures fresh(b)\n  ensures fresh(c)\n  ensures a[..] == b[..] + c[..]\n  ensures a.Length == b.Length + c.Length\n  ensures a.Length > 1 ==> a.Length > b.Length\n  ensures a.Length > 1 ==> a.Length > c.Length\n// </vc-spec>\n// <vc-code>\n{\n  if a.Length == 0 {\n    b := new int[0];\n    c := new int[0];\n  } else if a.Length == 1 {\n    b := new int[0];\n    c := new int[1];\n    c[0] := a[0];\n  } else {\n    var splitIndex := a.Length / 2;\n    b := new int[splitIndex];\n    for i := 0 to splitIndex\n      invariant 0 <= i <= splitIndex\n      invariant b[..i] == a[..i]\n    {\n      b[i] := a[i];\n    }\n    c := new int[a.Length - splitIndex];\n    for i := 0 to a.Length - splitIndex\n      invariant 0 <= i <= a.Length - splitIndex\n      invariant c[..i] == a[splitIndex .. splitIndex + i]\n    {\n      c[i] := a[splitIndex + i];\n    }\n    ConcatLemma(a, splitIndex);\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["Dafny-Exercises_tmp_tmpjm75muf__Session9Exercises_ExerciseSeqMaxSum_segSumaMaxima2.dfy", "root", false, "", "", false, "Dafny-Exercises_tmp_tmpjm75muf__Session9Exercises_ExerciseSeqMaxSum_segSumaMaxima2.dfy", "// <vc-preamble>\nfunction Sum(v:array<int>,i:int,j:int):int\nreads v\nrequires 0<=i<=j<=v.Length\ndecreases j\n{\n    if (i==j) then 0\n    else Sum(v,i,j-1)+v[j-1]\n}\n\npredicate SumMaxToRight(v:array<int>,i:int,s:int)\nreads v\nrequires 0<=i<v.Length\n{\nforall l,ss {:induction l}::0<=l<=i && ss==i+1==> Sum(v,l,ss)<=s\n}\n\nfunction Sum2(v:array<int>,i:int,j:int):int\nreads v\nrequires 0<=i<=j<=v.Length\ndecreases j-i\n{\n    if (i==j) then 0\n    else v[i]+Sum2(v,i+1,j)\n}\n\npredicate SumMaxToRight2(v:array<int>,j:int,i:int,s:int)\nreads v\nrequires 0<=j<=i<v.Length\n{(forall l,ss {:induction l}::j<=l<=i && ss==i+1 ==> Sum2(v,l,ss)<=s)}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod segSumaMaxima2(v:array<int>,i:int) returns (s:int,k:int)\nrequires v.Length>0 && 0<=i<v.Length\nensures 0<=k<=i && s==Sum2(v,k,i+1) &&  SumMaxToRight2(v,0,i,s)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny-Exercises_tmp_tmpjm75muf__Session8Exercises_ExerciseInsertionSort_InsertionSort.dfy", "root", false, "", "", false, "Dafny-Exercises_tmp_tmpjm75muf__Session8Exercises_ExerciseInsertionSort_InsertionSort.dfy", "// <vc-preamble>\npredicate sorted_seg(a:array<int>, i:int, j:int)\nrequires 0 <= i <= j+1 <= a.Length\nreads a\n{\n    forall l, k :: i <= l <= k <= j ==> a[l] <= a[k]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod InsertionSort(a: array<int>)\n  modifies a;\n  ensures sorted_seg(a,0,a.Length-1) \n  ensures multiset(a[..]) == old(multiset(a[..]))\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_603_LucidNumbers.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_603_LucidNumbers.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod LucidNumbers(n: int) returns (lucid: seq<int>)\n    requires n >= 0\n    ensures forall i :: 0 <= i < |lucid| ==> lucid[i] % 3 == 0\n    ensures forall i :: 0 <= i < |lucid| ==> lucid[i] <= n\n    ensures forall i, j :: 0 <= i < j < |lucid| ==> lucid[i] < lucid[j]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["SENG2011_tmp_tmpgk5jq85q_flex_ex1_sum.dfy", "root", false, "", "", false, "SENG2011_tmp_tmpgk5jq85q_flex_ex1_sum.dfy", "// <vc-preamble>\nfunction sumcheck(s: array<int>, i: int): int\nrequires 0 <= i <= s.Length\nreads s\n{\n    if i == 0 then 0\n    else s[i - 1] + sumcheck(s, i - 1)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod sum(s: array<int>) returns (a:int)\nrequires s.Length > 0\nensures sumcheck(s, s.Length) == a\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny-Exercises_tmp_tmpjm75muf__Session10Exercises_ExerciseBarrier_barrier.dfy", "root", true, "", "", false, "Dafny-Exercises_tmp_tmpjm75muf__Session10Exercises_ExerciseBarrier_barrier.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod barrier(v:array<int>,p:int) returns (b:bool)\nrequires v.Length > 0\nrequires 0<=p<v.Length\nensures b==forall k,l::0<=k<=p && p<l<v.Length ==> v[k]<v[l]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "//Method barrier below receives an array and an integer p\n//and returns a boolean b which is true if and only if \n//all the positions to the left of p and including also position p contain elements \n//that are strictly smaller than all the elements contained in the positions to the right of p \n\n//Examples:\n// If v=[7,2,5,8] and p=0 or p=1 then the method must return false, \n// but for p=2 the method should return true\n//1.Specify the method\n//2.Implement an O(v.size()) method\n//3.Verify the method\n\n// <vc-helpers>\n// No changes to helpers section\n// </vc-helpers>\n\n// <vc-spec>\nmethod barrier(v:array<int>,p:int) returns (b:bool)\n//Give the precondition\n//Give the postcondition\n//{Implement and verify}\nrequires v.Length > 0\nrequires 0<=p<v.Length\nensures b==forall k,l::0<=k<=p && p<l<v.Length ==> v[k]<v[l]\n// </vc-spec>\n// <vc-code>\n{\n  if p == v.Length-1 {\n    return true;\n  }\n  var max_left := v[0];\n  for i := 1 to p+1\n    invariant forall j :: 0<=j<i ==> v[j] <= max_left\n  {\n    if v[i] > max_left {\n      max_left := v[i];\n    }\n  }\n  assert forall k :: 0<=k<=p ==> v[k] <= max_left;\n\n  var min_right := v[p+1];\n  for i := p+2 to v.Length\n    invariant forall j :: p+1<=j<i ==> min_right <= v[j]\n  {\n    if v[i] < min_right {\n      min_right := v[i];\n    }\n  }\n  assert forall l :: p+1<=l<v.Length ==> min_right <= v[l];\n  \n  if max_left < min_right {\n    return true;\n  }\n  return false;\n}\n// </vc-code>\n\n", "", "", ""], ["Final-Project-Dafny_tmp_tmpmcywuqox_Attempts_Insertion_Sort_Normal_lookForMin.dfy", "root", true, "", "", false, "Final-Project-Dafny_tmp_tmpmcywuqox_Attempts_Insertion_Sort_Normal_lookForMin.dfy", "// <vc-preamble>\npredicate sorted (a: array<int>)\n\n    reads a\n{\n    sortedA(a, a.Length)\n}\n\npredicate sortedA (a: array<int>, i: int)\n\n    requires 0 <= i <= a.Length\n    reads a\n{\n    forall k :: 0 < k < i ==> a[k-1] <= a[k]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod lookForMin (a: array<int>, i: int) returns (m: int)\n\n    requires 0 <= i < a.Length\n    ensures i <= m < a.Length\n    ensures forall k :: i <= k < a.Length ==> a[k] >= a[m]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "predicate sorted (a: array<int>)\n\n    reads a\n{\n    sortedA(a, a.Length)\n}\n\npredicate sortedA (a: array<int>, i: int)\n\n    requires 0 <= i <= a.Length\n    reads a\n{\n    forall k :: 0 < k < i ==> a[k-1] <= a[k]\n}\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod lookForMin (a: array<int>, i: int) returns (m: int)\n\n    requires 0 <= i < a.Length\n    ensures i <= m < a.Length\n    ensures forall k :: i <= k < a.Length ==> a[k] >= a[m]\n// </vc-spec>\n// <vc-code>\n{\n  m := i;\n  var j := i + 1;\n  while j < a.Length\n      invariant i <= m < j\n      invariant j <= a.Length\n      invariant forall k :: i <= k < j ==> a[k] >= a[m]\n  {\n      if a[j] < a[m] {\n          m := j;\n      }\n      j := j + 1;\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["Software-Verification_tmp_tmpv4ueky2d_Remove_Duplicates_from_Sorted_Array_remove_duplicates_from_sorted_array_remove_duplicates_from_sorted_array.dfy", "root", false, "", "", false, "Software-Verification_tmp_tmpv4ueky2d_Remove_Duplicates_from_Sorted_Array_remove_duplicates_from_sorted_array_remove_duplicates_from_sorted_array.dfy", "// <vc-preamble>\npredicate is_sorted(nums: seq<int>)\n{\n    forall i, j :: 0 <= i < j < |nums| ==> nums[i] <= nums[j]\n}\n\npredicate is_sorted_and_distinct(nums: seq<int>)\n{\n    forall i, j :: 0 <= i < j < |nums| ==> nums[i] < nums[j]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod remove_duplicates_from_sorted_array(nums: seq<int>) returns (result: seq<int>) \n    requires is_sorted(nums)\n    requires 1 <= |nums| <= 30000\n    requires forall i :: 0 <= i < |nums| ==> -100 <= nums[i] <= 100\n    ensures is_sorted_and_distinct(result)\n    ensures forall i :: i in nums <==> i in result\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-programs_tmp_tmpcwodh6qh_src_factorial_factorial.dfy", "root", false, "", "", false, "dafny-programs_tmp_tmpcwodh6qh_src_factorial_factorial.dfy", "// <vc-preamble>\nfunction fact(n: nat): nat \n    ensures fact(n) >= 1\n{\n    if n == 0 then 1 else n * fact(n - 1)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod factorial(n: nat) returns (res: nat)\n    ensures res == fact(n)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-language-server_tmp_tmpkir0kenl_Test_dafny2_TuringFactorial_ComputeFactorial.dfy", "root", false, "", "", false, "dafny-language-server_tmp_tmpkir0kenl_Test_dafny2_TuringFactorial_ComputeFactorial.dfy", "// <vc-preamble>\nfunction Factorial(n: nat): nat\n{\n  if n == 0 then 1 else n * Factorial(n-1)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ComputeFactorial(n: int) returns (u: int)\n  requires 1 <= n;\n  ensures u == Factorial(n);\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_update_array_UpdateElements.dfy", "root", true, "", "", false, "Clover_update_array_UpdateElements.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod UpdateElements(a: array<int>)\n  requires a.Length >= 8\n  modifies a\n  ensures old(a[4]) +3 == a[4]\n  ensures a[7]==516\n  ensures forall i::0 <= i<a.Length ==> i != 7 && i != 4 ==> a[i] == old(a[i])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod UpdateElements(a: array<int>)\n  requires a.Length >= 8\n  modifies a\n  ensures old(a[4]) +3 == a[4]\n  ensures a[7]==516\n  ensures forall i::0 <= i<a.Length ==> i != 7 && i != 4 ==> a[i] == old(a[i])\n// </vc-spec>\n// <vc-code>\n{\n  a[7] := 516;\n  a[4] := a[4] + 3;\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_629_FindEvenNumbers.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_629_FindEvenNumbers.dfy", "// <vc-preamble>\npredicate IsEven(n: int)\n{\n    n % 2 == 0\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod FindEvenNumbers(arr: array<int>) returns (evenList: seq<int>)\n\n    ensures forall i :: 0 <= i < |evenList| ==> IsEven(evenList[i]) && evenList[i] in arr[..]\n\n    ensures forall i :: 0 <= i < arr.Length && IsEven(arr[i]) ==> arr[i] in evenList\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["AssertivePrograming_tmp_tmpwf43uz0e_DivMode_Unary_IterativeDivMod.dfy", "root", true, "", "", false, "AssertivePrograming_tmp_tmpwf43uz0e_DivMode_Unary_IterativeDivMod.dfy", "// <vc-preamble>\ndatatype Unary = Zero | Suc(pred: Unary)\n\nghost function UnaryToNat(x: Unary): nat {\n  match x\n  case Zero => 0\n  case Suc(x') => 1 + UnaryToNat(x')\n}\n\nghost function NatToUnary(n: nat): Unary {\n  if n == 0 then Zero else Suc(NatToUnary(n-1))\n}\n\npredicate Less(x: Unary, y: Unary) {\n  y != Zero && (x.Suc? ==> Less(x.pred, y.pred))\n}\n\npredicate LessAlt(x: Unary, y: Unary) {\n  y != Zero && (x == Zero || Less(x.pred, y.pred))\n}\n\nfunction Add(x: Unary, y: Unary): Unary {\n  match y\n  case Zero => x\n  case Suc(y') => Suc(Add(x, y'))\n}\n\nfunction Sub(x: Unary, y: Unary): Unary\n  requires !Less(x, y)\n{\n  match y\n  case Zero => x\n  case Suc(y') => Sub(x.pred, y')\n}\n\nfunction Mul(x: Unary, y: Unary): Unary {\n  match x\n  case Zero => Zero\n  case Suc(x') => Add(Mul(x', y), y)\n}\n\nmethod IterativeDivMod'(x: Unary, y: Unary) returns (d: Unary, m: Unary)\n  requires y != Zero\n  ensures Add(Mul(d, y), m) == x && Less(m, y)\n{\n  assume{:axiom} false;\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod IterativeDivMod(x: Unary, y: Unary) returns (d: Unary, m: Unary)\n  requires y != Zero\n  ensures Add(Mul(d, y), m) == x && Less(m, y)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "// Noa Leron 207131871\n// Tsuri Farhana 315016907\n\n\n// definitions borrowed from Rustan Leino's Program Proofs Chapter 7\n// (https://program-proofs.com/code.html example code in Dafny; source file 7-Unary.dfy)\ndatatype Unary = Zero | Suc(pred: Unary)\n\nghost function UnaryToNat(x: Unary): nat {\n  match x\n  case Zero => 0\n  case Suc(x') => 1 + UnaryToNat(x')\n}\n\nghost function NatToUnary(n: nat): Unary {\n  if n == 0 then Zero else Suc(NatToUnary(n-1))\n}\n\npredicate Less(x: Unary, y: Unary) {\n  y != Zero && (x.Suc? ==> Less(x.pred, y.pred))\n}\n\npredicate LessAlt(x: Unary, y: Unary) {\n  y != Zero && (x == Zero || Less(x.pred, y.pred))\n}\n\nfunction Add(x: Unary, y: Unary): Unary {\n  match y\n  case Zero => x\n  case Suc(y') => Suc(Add(x, y'))\n}\n\nfunction Sub(x: Unary, y: Unary): Unary\n  requires !Less(x, y)\n{\n  match y\n  case Zero => x\n  case Suc(y') => Sub(x.pred, y')\n}\n\nfunction Mul(x: Unary, y: Unary): Unary {\n  match x\n  case Zero => Zero\n  case Suc(x') => Add(Mul(x', y), y)\n}\n\n/*\nGoal: implement correcly and clearly, using iterative code (no recursion), documenting the proof obligations\n    as we've learned, with assertions and a lemma for each proof goal\n\n- DO NOT modify the specification or any of the definitions given in this file\n- Not all definitions above are relevant, some are simply included as examples\n- Feel free to use existing non-ghost functions/predicates in your code, and existing lemmas (for the proof) in your annotations\n- New functions/predicates may be added ONLY as ghost\n- If it helps you in any way, a recursive implementation + proof can be found in the book and the downloadable source file\n  [https://program-proofs.com/code.html example code in Dafny, source file 7-Unary.dfy]\n*/\n\nmethod IterativeDivMod'(x: Unary, y: Unary) returns (d: Unary, m: Unary)\n  requires y != Zero\n  ensures Add(Mul(d, y), m) == x && Less(m, y)\n{\n  assume{:axiom} false;\n}\n\n// <vc-helpers>\nlemma SubAddLemma(a: Unary, b: Unary)\n  requires !Less(b, a)\n  ensures Add(a, Sub(b, a)) == b\n{\n  if a == Zero {\n    assert Sub(b, Zero) == b;\n  } else {\n    var ap := a.pred;\n    var bp := b.pred;\n    SubAddLemma(ap, bp);\n    assert a == Suc(ap);\n    assert b == Suc(bp);\n    calc {\n      Add(a, Sub(b, a));\n    ==   // Verified using a == Suc(ap)\n      Add(Suc(ap), Sub(b, a));\n    == { Sub(b, a) == Sub(bp, ap) }\n      Add(Suc(ap), Sub(bp, ap));\n    == { definition of Add }\n      Suc(Add(ap, Sub(bp, ap)));\n    == { SubAddLemma(ap, bp) }\n      Suc(bp);\n    == { b == Suc(bp) }\n      b;\n    }\n  }\n}\n\nlemma LemmaMaintainsInvariant(d: Unary, m: Unary, y: Unary)\n  requires !Less(m, y) && y != Zero\n  requires Add(Mul(d, y), m) == x\n  ensures Add(Mul(Suc(d), y), Sub(m, y)) == x\n{\n  calc {\n    Add(Mul(Suc(d), y), Sub(m, y));\n    == {Mul definition}\n    Add(Add(Mul(d, y), y), Sub(m, y));\n    == {Add is associative}\n    Add(Mul(d, y), Add(y, Sub(m, y)));\n    == {SubAddLemma(y, m)}\n    Add(Mul(d, y), m);\n  }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod IterativeDivMod(x: Unary, y: Unary) returns (d: Unary, m: Unary)\n  requires y != Zero\n  ensures Add(Mul(d, y), m) == x && Less(m, y)\n// </vc-spec>\n// <vc-code>\n{\n  d := Zero;\n  m := x;\n  while !Less(m, y)\n    invariant Add(Mul(d, y), m) == x\n    invariant !Less(m, y) ==> y != Zero\n  {\n    LemmaMaintainsInvariant(d, m, y);\n    d := Suc(d);\n    m := Sub(m, y);\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["formal-verification_tmp_tmpoepcssay_strings3_isSubstring.dfy", "root", false, "", "", false, "formal-verification_tmp_tmpoepcssay_strings3_isSubstring.dfy", "// <vc-preamble>\npredicate isPrefixPred(pre:string, str:string)\n{\n    (|pre| <= |str|) && \n    pre == str[..|pre|]\n}\n\npredicate isNotPrefixPred(pre:string, str:string)\n{\n    (|pre| > |str|) || \n    pre != str[..|pre|]\n}\n\nmethod isPrefix(pre: string, str: string) returns (res:bool)\n    ensures !res <==> isNotPrefixPred(pre,str)\n    ensures  res <==> isPrefixPred(pre,str)\n{\n  assume{:axiom} false;\n}\npredicate isSubstringPred(sub:string, str:string)\n{\n    (exists i :: 0 <= i <= |str| &&  isPrefixPred(sub, str[i..]))\n}\n\npredicate isNotSubstringPred(sub:string, str:string)\n{\n    (forall i :: 0 <= i <= |str| ==> isNotPrefixPred(sub,str[i..]))\n}\n\npredicate haveCommonKSubstringPred(k:nat, str1:string, str2:string)\n{\n    exists i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k && isSubstringPred(str1[i1..j1],str2)\n}\n\npredicate haveNotCommonKSubstringPred(k:nat, str1:string, str2:string)\n{\n    forall i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k ==>  isNotSubstringPred(str1[i1..j1],str2)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod isSubstring(sub: string, str: string) returns (res:bool)\n    ensures  res <==> isSubstringPred(sub, str)\n    ensures  res ==> isSubstringPred(sub, str)\n\n    ensures  isSubstringPred(sub, str) ==> res\n    ensures  isSubstringPred(sub, str) ==> res\n    ensures !res <==> isNotSubstringPred(sub, str)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["bbfny_tmp_tmpw4m0jvl0_enjoying_Find.dfy", "root", false, "", "", false, "bbfny_tmp_tmpw4m0jvl0_enjoying_Find.dfy", "// <vc-preamble>\nfunction max(a: int, b: int): int\n{\n  if a > b then a else b\n}\nmethod Testing'()\n{\n  assume{:axiom} false;\n}\n\nfunction abs(x: int): int\n{\n  if x < 0 then -x else x\n}\n\nfunction fib(n: nat): nat\n{\n  if n == 0 then 0\n  else if n == 1 then 1\n  else fib(n - 1) + fib(n - 2)\n}\n\npredicate sorted(a: array<int>)\n  reads a\n{\n  forall j, k :: 0 <= j < k < a.Length ==> a[j] < a[k]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Find(a: array<int>, key: int) returns (index: int)\n  ensures 0 <= index ==> index < a.Length && a[index] == key\n  ensures index < 0 ==> forall k :: 0 <= k < a.Length ==> a[k] != key\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_below_zero_below_zero.dfy", "root", true, "", "", false, "Clover_below_zero_below_zero.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod below_zero(operations: seq<int>) returns (s:array<int>, result:bool)\n  ensures s.Length == |operations| + 1\n  ensures s[0]==0\n  ensures forall i :: 0 <= i < s.Length-1 ==> s[i+1]==s[i]+operations[i]\n  ensures result == true ==> (exists i :: 1 <= i <= |operations| && s[i] < 0)\n  ensures result == false ==> forall i :: 0 <= i < s.Length ==> s[i] >= 0\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n// </vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod below_zero(operations: seq<int>) returns (s:array<int>, result:bool)\n  ensures s.Length == |operations| + 1\n  ensures s[0]==0\n  ensures forall i :: 0 <= i < s.Length-1 ==> s[i+1]==s[i]+operations[i]\n  ensures result == true ==> (exists i :: 1 <= i <= |operations| && s[i] < 0)\n  ensures result == false ==> forall i :: 0 <= i < s.Length ==> s[i] >= 0\n// </vc-spec>\n// <vc-code>\n{\n  var n := |operations|;\n  s := new int[n+1];\n  s[0] := 0;\n  result := false;\n\n  for i := 0 to n\n    invariant 0 <= i <= n\n    invariant s.Length == n+1\n    invariant s[0] == 0\n    invariant forall j :: 0 <= j < i ==> s[j+1] == s[j] + operations[j]\n    invariant result == (exists k :: 1 <= k <= i && s[k] < 0)\n  {\n    if i < n {\n      s[i+1] := s[i] + operations[i];\n      if s[i+1] < 0 {\n        result := true;\n      }\n    }\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_759_IsDecimalWithTwoPrecision.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_759_IsDecimalWithTwoPrecision.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod IsDecimalWithTwoPrecision(s: string) returns (result: bool)\n    ensures result ==> (exists i :: 0 <= i < |s| && s[i] == '.' && |s| - i - 1 == 2)\n    ensures !result ==> !(exists i :: 0 <= i < |s| && s[i] == '.' && |s| - i - 1 == 2)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["CVS-Projto1_tmp_tmpb1o0bu8z_proj1_proj1_queryFast.dfy", "root", true, "", "", false, "CVS-Projto1_tmp_tmpb1o0bu8z_proj1_proj1_queryFast.dfy", "// <vc-preamble>\nfunction sum (a:array<int>, i:int, j:int) :int\ndecreases j\nreads a\nrequires 0 <= i <= j <= a.Length\n{\n    if i == j then\n        0\n    else\n        a[j-1] + sum(a, i, j-1)\n}\n\npredicate is_prefix_sum_for (a:array<int>, c:array<int>)\nreads c, a\n{\n    a.Length + 1 == c.Length\n    && c[0] == 0\n    && forall j :: 1 <= j <= a.Length ==> c[j] == sum(a,0,j)\n}\n\ndatatype List<T> = Nil | Cons(head: T, tail: List<T>)\n\nmethod from_array<T>(a: array<T>) returns (l: List<T>)\nrequires a.Length > 0\nensures forall j::0 <= j < a.Length ==> mem(a[j],l)\n{\n  assume{:axiom} false;\n}\n\nfunction mem<T(==)> (x: T, l:List<T>) : bool\ndecreases l\n{\n    match l\n    case Nil => false\n    case Cons(y,r)=> if (x==y) then true else mem(x,r)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod queryFast (a:array<int>, c:array<int>, i:int, j:int) returns (r:int)\nrequires is_prefix_sum_for(a,c) && 0 <= i <= j <= a.Length < c.Length\nensures r == sum(a, i,j)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "//Exercicio 1.a)\nfunction sum (a:array<int>, i:int, j:int) :int\ndecreases j\nreads a\nrequires 0 <= i <= j <= a.Length\n{\n    if i == j then\n        0\n    else\n        a[j-1] + sum(a, i, j-1)\n}\n\n//Exercicio 1.b)\n\n//Exercicio 1.c)\n\npredicate is_prefix_sum_for (a:array<int>, c:array<int>)\nreads c, a\n{\n    a.Length + 1 == c.Length\n    && c[0] == 0\n    && forall j :: 1 <= j <= a.Length ==> c[j] == sum(a,0,j)\n}\n\n///Exercicio 2.\ndatatype List<T> = Nil | Cons(head: T, tail: List<T>)\n\nmethod from_array<T>(a: array<T>) returns (l: List<T>)\nrequires a.Length > 0\nensures forall j::0 <= j < a.Length ==> mem(a[j],l)\n{\n  assume{:axiom} false;\n}\n\nfunction mem<T(==)> (x: T, l:List<T>) : bool\ndecreases l\n{\n    match l\n    case Nil => false\n    case Cons(y,r)=> if (x==y) then true else mem(x,r)\n}\n\n// <vc-helpers>\nfunction sum_to (a:array<int>, j:int) :int\ndecreases j\nreads a\nrequires 0 <= j <= a.Length\n{\n    if j == 0 then\n        0\n    else\n        a[j-1] + sum_to(a, j-1)\n}\n\nfunction sum_range (a:array<int>, i:int, j:int) :int\ndecreases j\nreads a\nrequires 0 <= i <= j <= a.Length\n{\n    sum_to(a, j) - sum_to(a, i)\n}\n\nlemma sum_range_is_sum(a: array<int>, i: int, j: int)\n    requires 0 <= i <= j <= a.Length\n    ensures sum_range(a, i, j) == sum(a, i, j)\n{\n    if i == j {\n        calc {\n            sum_range(a,i,j);\n            sum_to(a,j) - sum_to(a,i);\n            { assert i == j; }\n            sum_to(a,i) - sum_to(a,i);\n            0;\n            { assert i == j; }\n            sum(a,i,j);\n        }\n    } else {\n        calc {\n            sum_range(a,i,j);\n            sum_to(a,j) - sum_to(a,i);\n            { reveal sum_to(); }\n            (a[j-1] + sum_to(a,j-1)) - sum_to(a,i);\n            a[j-1] + (sum_to(a,j-1) - sum_to(a,i));\n            a[j-1] + sum_range(a,i,j-1);\n            { \n                sum_range_is_sum(a,i,j-1);\n            }\n            a[j-1] + sum(a,i,j-1);\n            { reveal sum(); }\n            sum(a,i,j);\n        }\n    }\n}\n\nlemma sum_to_from_prefix(c: array<int>, a: array<int>, j: int)\n    requires is_prefix_sum_for(a, c)\n    requires 0 <= j <= a.Length\n    ensures c[j] == sum_to(a, j)\n{\n    if j == 0 {\n        calc {\n            c[j];\n            { assert is_prefix_sum_for(a, c); }\n            c[0];\n            { reveal is_prefix_sum_for(); }\n            0;\n            sum_to(a, 0);\n        }\n    } else {\n        calc {\n            c[j];\n            { assert is_prefix_sum_for(a, c); }\n            sum(a, 0, j);\n            { \n                reveal sum();\n                assert a[j-1] + sum(a,0,j-1) == sum(a,0,j);\n            }\n            a[j-1] + sum(a,0,j-1);\n            {\n                sum_to_from_prefix(c, a, j-1);\n                assert c[j-1] == sum_to(a, j-1);\n                calc {\n                    sum(a,0,j-1);\n                    { sum_range_is_sum(a,0,j-1); }\n                    sum_range(a,0,j-1);\n                    sum_to(a,j-1) - sum_to(a,0);\n                    sum_to(a,j-1) - 0;\n                    sum_to(a,j-1);\n                }\n            }\n            a[j-1] + sum_to(a, j-1);\n            sum_to(a, j);\n        }\n    }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod queryFast (a:array<int>, c:array<int>, i:int, j:int) returns (r:int)\nrequires is_prefix_sum_for(a,c) && 0 <= i <= j <= a.Length < c.Length\nensures r == sum(a, i,j)\n// </vc-spec>\n// <vc-code>\n{\n    sum_range_is_sum(a, i, j);\n    sum_to_from_prefix(c, a, j);\n    assert c[j] == sum_to(a, j);\n    sum_to_from_prefix(c, a, i);\n    assert c[i] == sum_to(a, i);\n    r := c[j] - c[i];\n}\n// </vc-code>\n\n", "", "", ""], ["AssertivePrograming_tmp_tmpwf43uz0e_MergeSort_Merge.dfy", "root", true, "", "", false, "AssertivePrograming_tmp_tmpwf43uz0e_MergeSort_Merge.dfy", "// <vc-preamble>\npredicate Sorted(q: seq<int>) {\n    forall i,j :: 0 <= i <= j < |q| ==> q[i] <= q[j]\n}\n\nghost predicate Inv(a: seq<int>, a1: seq<int>, a2: seq<int>, i: nat, mid: nat){\n    (i <= |a1|) && (i <= |a2|) && (i+mid <= |a|) &&\n    (a1[..i] == a[..i]) && (a2[..i] == a[mid..(i+mid)])\n}\n\nmethod MergeLoop(b: array<int>, c: array<int>, d: array<int>,i0: nat , j0: nat)  returns (i: nat, j: nat)\n        requires b != c && b != d && b.Length == c.Length + d.Length\n        requires Sorted(c[..]) && Sorted(d[..])\n        requires i0 <= c.Length && j0 <= d.Length && i0 + j0 <= b.Length\n        requires InvSubSet(b[..],c[..],d[..],i0,j0)\n        requires InvSorted(b[..],c[..],d[..],i0,j0)\n        requires i0 + j0 < b.Length\n\n        modifies b\n\n        ensures i <= c.Length && j <= d.Length && i + j <= b.Length\n        ensures InvSubSet(b[..],c[..],d[..],i,j)\n        ensures InvSorted(b[..],c[..],d[..],i,j)\n\n        ensures 0 <= c.Length - i < c.Length - i0 || (c.Length - i == c.Length - i0 && 0 <= d.Length - j < d.Length - j0)\n        {\n\n            i,j := i0,j0;\n\n                if(i == c.Length || (j< d.Length && d[j] < c[i])){\n\n                assert InvSorted(b[..][i+j:=d[j]],c[..],d[..],i,j+1);\n                b[i+j] := d[j];\n\n                assert InvSubSet(b[..],c[..],d[..],i,j+1);\n                assert InvSorted(b[..],c[..],d[..],i,j+1);\n                j := j + 1;\n            }\n            else{\n                assert j == d.Length || (i < c.Length && c[i] <= d[j]);\n\n                assert InvSorted(b[..][i+j:=c[i]],c[..],d[..],i+1,j);\n\n                b[i+j] := c[i];\n\n                assert InvSubSet(b[..],c[..],d[..],i+1,j);\n                assert InvSorted(b[..],c[..],d[..],i+1,j);\n                i := i + 1;\n            }\n\n        }\n\nghost predicate InvSorted(b: seq<int>, c: seq<int>, d: seq<int>, i: nat, j: nat){\n    i <= |c| && j <= |d| && i + j <= |b| &&\n    ((i+j > 0 && i < |c|) ==> (b[j + i - 1] <= c[i])) &&\n    ((i+j > 0 && j < |d|) ==> (b[j + i - 1] <= d[j])) &&\n    Sorted(b[..i+j])\n    }\n\nghost predicate InvSubSet(b: seq<int>, c: seq<int>, d: seq<int>, i: nat, j: nat){\n    i <= |c| && j <= |d| && i + j <= |b| &&\n    multiset(b[..i+j]) == multiset(c[..i]) + multiset(d[..j])\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Merge(b: array<int>, c: array<int>, d: array<int>)\n    requires b != c && b != d && b.Length == c.Length + d.Length\n    requires Sorted(c[..]) && Sorted(d[..])\n    ensures Sorted(b[..]) && multiset(b[..]) == multiset(c[..])+multiset(d[..])\n    modifies b\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "// Noa Leron 207131871\n// Tsuri Farhana 315016907\n\n\n\n\npredicate Sorted(q: seq<int>) {\n    forall i,j :: 0 <= i <= j < |q| ==> q[i] <= q[j]\n}\n\n/*\nGoal: Implement the well known merge sort algorithm in O(a.Length X log_2(a.Length)) time, recursively.\n\n- Divide the contents of the original array into two local arrays\n- After sorting the local arrays (recursively), merge the contents of the two returned arrays using the Merge method (see below)\n- DO NOT modify the specification or any other part of the method's signature\n- DO NOT introduce any further methods\n*/\n\nghost predicate Inv(a: seq<int>, a1: seq<int>, a2: seq<int>, i: nat, mid: nat){\n    (i <= |a1|) && (i <= |a2|) && (i+mid <= |a|) &&\n    (a1[..i] == a[..i]) && (a2[..i] == a[mid..(i+mid)])\n}\n\n\n/*\nGoal: Implement iteratively, correctly, efficiently, clearly\n\nDO NOT modify the specification or any other part of the method's signature\n*/\n\n//This is a method that replace the loop body\nmethod MergeLoop(b: array<int>, c: array<int>, d: array<int>,i0: nat , j0: nat)  returns (i: nat, j: nat)\n        requires b != c && b != d && b.Length == c.Length + d.Length\n        requires Sorted(c[..]) && Sorted(d[..])\n        requires i0 <= c.Length && j0 <= d.Length && i0 + j0 <= b.Length\n        requires InvSubSet(b[..],c[..],d[..],i0,j0)\n        requires InvSorted(b[..],c[..],d[..],i0,j0)\n        requires i0 + j0 < b.Length\n\n        modifies b\n\n        ensures i <= c.Length && j <= d.Length && i + j <= b.Length\n        ensures InvSubSet(b[..],c[..],d[..],i,j)\n        ensures InvSorted(b[..],c[..],d[..],i,j)\n        //decreases ensures\n        ensures 0 <= c.Length - i < c.Length - i0 || (c.Length - i == c.Length - i0 && 0 <= d.Length - j < d.Length - j0)\n        {\n\n            i,j := i0,j0;\n\n                if(i == c.Length || (j< d.Length && d[j] < c[i])){\n                    // in this case we take the next value from d\n                assert InvSorted(b[..][i+j:=d[j]],c[..],d[..],i,j+1);\n                b[i+j] := d[j];\n\n                assert InvSubSet(b[..],c[..],d[..],i,j+1);\n                assert InvSorted(b[..],c[..],d[..],i,j+1);\n                j := j + 1;\n            }\n            else{\n                assert j == d.Length || (i < c.Length && c[i] <= d[j]);\n                    // in this case we take the next value from c\n                assert InvSorted(b[..][i+j:=c[i]],c[..],d[..],i+1,j);\n\n                b[i+j] := c[i];\n\n                assert InvSubSet(b[..],c[..],d[..],i+1,j);\n                assert InvSorted(b[..],c[..],d[..],i+1,j);\n                i := i + 1;\n            }\n\n\n        }\n\n\n//Loop invariant - b is sprted so far and the next two potential values that will go into b are bigger then the biggest value in b.\nghost predicate InvSorted(b: seq<int>, c: seq<int>, d: seq<int>, i: nat, j: nat){\n    i <= |c| && j <= |d| && i + j <= |b| &&\n    ((i+j > 0 && i < |c|) ==> (b[j + i - 1] <= c[i])) &&\n    ((i+j > 0 && j < |d|) ==> (b[j + i - 1] <= d[j])) &&\n    Sorted(b[..i+j])\n    }\n\n\n//Loop invariant - the multiset of the prefix of b so far is the same multiset as the prefixes of c and d so far.\nghost predicate InvSubSet(b: seq<int>, c: seq<int>, d: seq<int>, i: nat, j: nat){\n    i <= |c| && j <= |d| && i + j <= |b| &&\n    multiset(b[..i+j]) == multiset(c[..i]) + multiset(d[..j])\n}\n\n//This lemma helps dafny see that if the prefixs of arrays are the same multiset until the end of the arrays,\n//all the arrays are the same multiset.\n\n\n//This lemma helps dafny see that after adding the next value from c to b the prefixes are still the same subsets.\n\n// <vc-helpers>\nlemma MergeLoopPreservesInvSorted(b: array<int>, c: array<int>, d: array<int>, i0: nat, j0: nat)\n    requires b != c && b != d && b.Length == c.Length + d.Length\n    requires Sorted(c[..]) && Sorted(d[..])\n    requires i0 <= c.Length && j0 <= d.Length && i0 + j0 <= b.Length\n    requires InvSorted(b[..], c[..], d[..], i0, j0)\n    requires i0 + j0 < b.Length\n    ensures InvSorted(b[..][i0+j0 := (if i0 == c.Length || (j0 < d.Length && d[j0] < c[i0]) then d[j0] else c[i0])], c[..], d[..], \n                      if i0 == c.Length || (j0 < d.Length && d[j0] < c[i0]) then i0 else i0+1, \n                      if i0 == c.Length || (j0 < d.Length && d[j0] < c[i0]) then j0+1 else j0)\n{\n    var i := i0;\n    var j := j0;\n    if i == c.Length || (j < d.Length && d[j] < c[i]) {\n        assert b[..][i+j := d[j]][..(i+j+1)] == b[..(i+j)] + [d[j]];\n        var new_b := b[..][i+j := d[j]];\n        assert i+j > 0 ==> (i < c.Length ==> new_b[i+j-1] <= c[i]);\n        assert i+j > 0 ==> (j+1 < d.Length ==> new_b[i+j] <= d[j+1]);\n        assert i+j > 0 ==> i < c.Length ==> Sorted(new_b[..(i+j+1)]);\n        assert Sorted(new_b[..(i+j+1)]);\n    } else {\n        assert b[..][i+j := c[i]][..(i+j+1)] == b[..(i+j)] + [c[i]];\n        var new_b := b[..][i+j := c[i]];\n        assert i+j > 0 ==> (i+1 < c.Length ==> new_b[i+j] <= c[i+1]);\n        assert i+j > 0 ==> (j < d.Length ==> new_b[i+j-1] <= d[j]);\n        assert i+j > 0 ==> j < d.Length ==> Sorted(new_b[..(i+j+1)]);\n        assert Sorted(new_b[..(i+j+1)]);\n    }\n}\n\nlemma MergeLoopPreservesInvSubSet(b: array<int>, c: array<int>, d: array<int>, i0: nat, j0: nat)\n    requires b != c && b != d && b.Length == c.Length + d.Length\n    requires Sorted(c[..]) && Sorted(d[..])\n    requires i0 <= c.Length && j0 <= d.Length && i0 + j0 <= b.Length\n    requires InvSubSet(b[..], c[..], d[..], i0, j0)\n    requires i0 + j0 < b.Length\n    ensures InvSubSet(b[..][i0+j0 := (if i0 == c.Length || (j0 < d.Length && d[j0] < c[i0]) then d[j0] else c[i0])], c[..], d[..], \n                     if i0 == c.Length || (j0 < d.Length && d[j0] < c[i0]) then i0 else i0+1, \n                     if i0 == c.Length || (j0 < d.Length && d[j0] < c[i0]) then j0+1 else j0)\n{\n    if i0 == c.Length || (j0 < d.Length && d[j0] < c[i0]) {\n        calc {\n            multiset(b[..][i0+j0 := d[j0]][..(i0+j0+1)]);\n            multiset(b[..(i0+j0)] + [d[j0]]);\n            multiset(b[..(i0+j0)]) + multiset([d[j0]]);\n            multiset(c[..i0]) + multiset(d[..j0]) + multiset([d[j0]]);\n            multiset(c[..i0]) + multiset(d[..j0] + [d[j0]]);\n            multiset(c[..i0]) + multiset(d[..(j0+1)]);\n        }\n    } else {\n        calc {\n            multiset(b[..][i0+j0 := c[i0]][..(i0+j0+1)]);\n            multiset(b[..(i0+j0)] + [c[i0]]);\n            multiset(b[..(i0+j0)]) + multiset([c[i0]]);\n            multiset(c[..i0]) + multiset(d[..j0]) + multiset([c[i0]]);\n            multiset(c[..i0] + [c[i0]]) + multiset(d[..j0]);\n            multiset(c[..(i0+1)]) + multiset(d[..j0]);\n        }\n    }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod Merge(b: array<int>, c: array<int>, d: array<int>)\n    requires b != c && b != d && b.Length == c.Length + d.Length\n    requires Sorted(c[..]) && Sorted(d[..])\n    ensures Sorted(b[..]) && multiset(b[..]) == multiset(c[..])+multiset(d[..])\n    modifies b\n// </vc-spec>\n// <vc-code>\n{\n    var i: nat, j: nat := 0, 0;\n    while i+j < b.Length\n        invariant InvSorted(b[..], c[..], d[..], i, j)\n        invariant InvSubSet(b[..], c[..], d[..], i, j)\n        invariant i <= c.Length && j <= d.Length && i+j <= b.Length\n        decreases b.Length - (i+j)\n    {\n        if i == c.Length || (j < d.Length && d[j] < c[i]) {\n            b[i+j] := d[j];\n            MergeLoopPreservesInvSorted(b, c, d, i, j);\n            MergeLoopPreservesInvSubSet(b, c, d, i, j);\n            j := j + 1;\n        } else {\n            b[i+j] := c[i];\n            MergeLoopPreservesInvSorted(b, c, d, i, j);\n            MergeLoopPreservesInvSubSet(b, c, d, i, j);\n            i := i + 1;\n        }\n    }\n    assert i == c.Length && j == d.Length;\n}\n// </vc-code>\n\n", "", "", ""], ["Final-Project-Dafny_tmp_tmpmcywuqox_Attempts_Exercise3_Increment_Array_incrementArray.dfy", "root", true, "", "", false, "Final-Project-Dafny_tmp_tmpmcywuqox_Attempts_Exercise3_Increment_Array_incrementArray.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod incrementArray(a:array<int>)\n  requires a.Length > 0\n  ensures forall i :: 0 <= i < a.Length ==> a[i] == old(a[i]) + 1\n  modifies a\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod incrementArray(a:array<int>)\n  requires a.Length > 0\n  ensures forall i :: 0 <= i < a.Length ==> a[i] == old(a[i]) + 1\n  modifies a\n// </vc-spec>\n// <vc-code>\n{\n  for i := 0 to a.Length\n    invariant forall k :: 0 <= k < i ==> a[k] == old(a[k]) + 1\n    invariant forall k :: i <= k < a.Length ==> a[k] == old(a[k])\n  {\n    a[i] := a[i] + 1;\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_579_DissimilarElements.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_579_DissimilarElements.dfy", "// <vc-preamble>\npredicate InArray(a: array<int>, x: int)\n    reads a\n{\n    exists i :: 0 <= i < a.Length && a[i] == x\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod DissimilarElements(a: array<int>, b: array<int>) returns (result: seq<int>)\n\n    ensures forall x :: x in result ==> (InArray(a, x) != InArray(b, x))\n\n    ensures forall i, j :: 0 <= i < j < |result| ==> result[i] != result[j]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Formal-methods-of-software-development_tmp_tmppryvbyty_Bloque_2_Lab6_vector_Sum.dfy", "root", false, "", "", false, "Formal-methods-of-software-development_tmp_tmppryvbyty_Bloque_2_Lab6_vector_Sum.dfy", "// <vc-preamble>\nfunction sum(v: seq<int>): int \ndecreases v\n{\n    if v==[] then 0\n    else if |v|==1 then v[0]\n    else v[0]+sum(v[1..])\n}\n\nfunction reverse<T> (s:seq<T>):seq<T> \n{\n    if s==[] then []\n    else reverse(s[1..])+[s[0]]\n}\n\nfunction seq2set<T> (s:seq<T>): set<T>\n{\n    if s==[] then {}\n    else {s[0]}+seq2set(s[1..])\n}\n\nfunction scalar_product (v1:seq<int>, v2:seq<int>):int\nrequires |v1| == |v2|\n{\n    if v1 == [] then 0 else v1[0]*v2[0] + scalar_product(v1[1..],v2[1..])\n}\n\nmethod multiplicity_examples<T> ()\n{\n  assume{:axiom} false;\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod vector_Sum(v:seq<int>) returns (x:int)\nensures x == sum(v)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny_Verify_tmp_tmphq7j0row_dataset_bql_exampls_SmallNum_add_small_numbers.dfy", "root", true, "", "", false, "Dafny_Verify_tmp_tmphq7j0row_dataset_bql_exampls_SmallNum_add_small_numbers.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod add_small_numbers (a: array<int>, n: int, max: int) returns (r: int)\n    requires n > 0;\n    requires n <= a.Length;\n    requires (forall i: int :: 0 <= i && i < n ==> a[i] <= max);\n    ensures r <= max * n;\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\nlemma MaintainInvariant(i: int, sum: int, max: int, a_val: int)\n  requires 0 <= i\n  requires sum <= max * i\n  requires a_val <= max\n  ensures sum + a_val <= max * (i+1)\n{\n  calc {\n    sum + a_val;\n    <= max * i + a_val;\n    <= max * i + max;\n    == max * (i+1);\n  }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod add_small_numbers (a: array<int>, n: int, max: int) returns (r: int)\n    requires n > 0;\n    requires n <= a.Length;\n    requires (forall i: int :: 0 <= i && i < n ==> a[i] <= max);\n    ensures r <= max * n;\n// </vc-spec>\n// <vc-code>\n{\n  var sum := 0;\n  var i := 0;\n  while i < n\n    invariant 0 <= i <= n\n    invariant sum <= max * i\n  {\n    MaintainInvariant(i, sum, max, a[i]);\n    sum := sum + a[i];\n    i := i + 1;\n  }\n  return sum;\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_784_FirstEvenOddIndices.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_784_FirstEvenOddIndices.dfy", "// <vc-preamble>\npredicate IsEven(n: int)\n{\n    n % 2 == 0\n}\n\npredicate IsOdd(n: int)\n{\n    n % 2 != 0\n}\n\npredicate IsFirstEven(evenIndex: int, lst: seq<int>)\n    requires 0 <= evenIndex < |lst|\n    requires IsEven(lst[evenIndex])\n{\n    forall i :: 0 <= i < evenIndex ==> IsOdd(lst[i])\n}\n\npredicate IsFirstOdd(oddIndex: int, lst: seq<int>)\n    requires 0 <= oddIndex < |lst|\n    requires IsOdd(lst[oddIndex])\n{\n    forall i :: 0 <= i < oddIndex ==> IsEven(lst[i])\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod FirstEvenOddIndices(lst : seq<int>) returns (evenIndex: int, oddIndex : int)\n    requires |lst| >= 2\n    requires exists i :: 0 <= i < |lst| && IsEven(lst[i])\n    requires exists i :: 0 <= i < |lst| && IsOdd(lst[i])\n    ensures 0 <= evenIndex < |lst|\n    ensures 0 <= oddIndex < |lst|\n\n    ensures IsEven(lst[evenIndex]) && IsFirstEven(evenIndex, lst)\n    ensures IsOdd(lst[oddIndex]) && IsFirstOdd(oddIndex, lst)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Programmverifikation-und-synthese_tmp_tmppurk6ime_PVS_Assignment_ex_07_Hoangkim_ex07_Hoangkim_FindMin.dfy", "root", false, "", "", false, "Programmverifikation-und-synthese_tmp_tmppurk6ime_PVS_Assignment_ex_07_Hoangkim_ex07_Hoangkim_FindMin.dfy", "// <vc-preamble>\nghost predicate sorted(a:seq<int>)\n{\n    forall i | 0 < i < |a| :: a[i-1] <= a[i]     \n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod FindMin(a: array<int>, lo: nat) returns (minIdx: nat)\n    requires a != null && a.Length > 0 && lo < a.Length\n    ensures lo <= minIdx < a.Length\n    ensures forall x :: lo <= x < a.Length ==> a[minIdx] <= a[x]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["MIEIC_mfes_tmp_tmpq3ho7nve_TP3_binary_search_binarySearch.dfy", "root", true, "", "", false, "MIEIC_mfes_tmp_tmpq3ho7nve_TP3_binary_search_binarySearch.dfy", "// <vc-preamble>\npredicate isSorted(a: array<int>)\n  reads a\n{\n    forall i, j :: 0 <= i < j < a.Length ==> a[i] <= a[j]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod binarySearch(a: array<int>, x: int) returns (index: int) \n    requires isSorted(a)\n    ensures -1 <= index < a.Length\n    ensures if index != -1 then a[index] == x \n        else x !in a[..]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "// Checks if array 'a' is sorted.\npredicate isSorted(a: array<int>)\n  reads a\n{\n    forall i, j :: 0 <= i < j < a.Length ==> a[i] <= a[j]\n}\n\n// Finds a value 'x' in a sorted array 'a', and returns its index,\n// or -1 if not found.\n\n// Simple test cases to check the post-condition.\n\n/*\na) Identify adequate pre and post-conditions for this method, \nand encode them as \u201crequires\u201d and \u201censures\u201d clauses in Dafny. \nYou can use the predicate below if needed.\n\nb) Identify an adequate loop variant and loop invariant, and encode them \nas \u201cdecreases\u201d and \u201cinvariant\u201d clauses in Dafny.\n*/\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod binarySearch(a: array<int>, x: int) returns (index: int) \n    requires isSorted(a)\n    ensures -1 <= index < a.Length\n    ensures if index != -1 then a[index] == x \n        else x !in a[..] //forall i :: 0 <= i < a.Length ==> a[i] != x\n// </vc-spec>\n// <vc-code>\n{\n    var low := 0;\n    var high := a.Length - 1;\n    \n    while low <= high \n        invariant 0 <= low && high < a.Length\n        invariant forall i :: 0 <= i < low ==> a[i] < x\n        invariant forall i :: high < i < a.Length ==> a[i] > x\n        decreases high - low + 1\n    {\n        var mid := low + (high - low) / 2;\n        if a[mid] == x {\n            return mid;\n        } else if a[mid] < x {\n            low := mid + 1;\n        } else {\n            high := mid - 1;\n        }\n    }\n    \n    return -1;\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_728_AddLists.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_728_AddLists.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod AddLists(a: seq<int>, b: seq<int>) returns (result: seq<int>)\n    requires |a| == |b|\n    ensures |result| == |a|\n    ensures forall i :: 0 <= i < |result| ==> result[i] == a[i] + b[i]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny-Practice_tmp_tmphnmt4ovh_Pattern_Matching_FindAllOccurrences.dfy", "root", false, "", "", false, "Dafny-Practice_tmp_tmphnmt4ovh_Pattern_Matching_FindAllOccurrences.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod FindAllOccurrences(text: string, pattern: string) returns (offsets: set<nat>)\n  ensures forall i:nat :: i in offsets ==> i + |pattern| <= |text|\n  ensures forall i:nat :: 0 <= i <= |text| - |pattern|\n                       ==> (text[i..i+|pattern|] == pattern <==> i in offsets)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_240_ReplaceLastElement.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_240_ReplaceLastElement.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ReplaceLastElement(first: seq<int>, second: seq<int>) returns (result: seq<int>)\n    requires |first| > 0\n    ensures |result| == |first| - 1 + |second|\n    ensures forall i :: 0 <= i < |first| - 1 ==> result[i] == first[i]\n    ensures forall i :: |first| - 1 <= i < |result| ==> result[i] == second[i - |first| + 1]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_is_palindrome_IsPalindrome.dfy", "root", true, "", "", false, "Clover_is_palindrome_IsPalindrome.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod IsPalindrome(x: seq<char>) returns (result: bool)\n  ensures result <==> (forall i :: 0 <= i < |x| ==> x[i] == x[|x| - i - 1])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod IsPalindrome(x: seq<char>) returns (result: bool)\n  ensures result <==> (forall i :: 0 <= i < |x| ==> x[i] == x[|x| - i - 1])\n// </vc-spec>\n// <vc-code>\n{\n  var n := |x|;\n  var i := 0;\n  while i < n / 2\n    invariant 0 <= i <= n / 2\n    invariant forall j :: 0 <= j < n && (j < i || j >= n - i) ==> x[j] == x[n - j - 1]\n  {\n    if x[i] != x[n - i - 1] {\n      return false;\n    }\n    i := i + 1;\n  }\n  return true;\n}\n// </vc-code>\n\n", "", "", ""], ["Dafny_tmp_tmpmvs2dmry_pancakesort_findmax_findMax.dfy", "root", true, "", "", false, "Dafny_tmp_tmpmvs2dmry_pancakesort_findmax_findMax.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod findMax (a : array<int>, n : int) returns (r:int)\nrequires a.Length > 0\nrequires 0 < n <= a.Length\nensures 0 <= r < n <= a.Length;\nensures forall k :: 0 <= k < n <= a.Length ==> a[r] >= a[k];\nensures multiset(a[..]) == multiset(old(a[..]));\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "// returns an index of the largest element of array 'a' in the range [0..n)\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod findMax (a : array<int>, n : int) returns (r:int)\nrequires a.Length > 0\nrequires 0 < n <= a.Length\nensures 0 <= r < n <= a.Length;\nensures forall k :: 0 <= k < n <= a.Length ==> a[r] >= a[k];\nensures multiset(a[..]) == multiset(old(a[..]));\n// </vc-spec>\n// <vc-code>\n{\n  r := 0;\n  var i := 1;\n  while i < n\n    invariant 0 <= r < i <= n\n    invariant forall k :: 0 <= k < i ==> a[r] >= a[k]\n  {\n    if a[i] > a[r] {\n      r := i;\n    }\n    i := i + 1;\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["Clover_linear_search2_LinearSearch.dfy", "root", true, "", "", false, "Clover_linear_search2_LinearSearch.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod LinearSearch(a: array<int>, e: int) returns (n:int)\n  requires exists i::0<=i<a.Length && a[i]==e\n  ensures 0<=n<a.Length && a[n]==e\n  ensures forall k :: 0 <= k < n ==> a[k]!=e\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n// </vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod LinearSearch(a: array<int>, e: int) returns (n:int)\n  requires exists i::0<=i<a.Length && a[i]==e\n  ensures 0<=n<a.Length && a[n]==e\n  ensures forall k :: 0 <= k < n ==> a[k]!=e\n// </vc-spec>\n// <vc-code>\n{\n  var i := 0;\n  while i < a.Length && a[i] != e\n    invariant 0 <= i <= a.Length\n    invariant forall k :: 0 <= k < i ==> a[k] != e\n  {\n    i := i + 1;\n  }\n  return i;\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_755_SecondSmallest.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_755_SecondSmallest.dfy", "// <vc-preamble>\nfunction MinPair(s: seq<int>) : (r: int)\n    requires |s| == 2\n    ensures s[0] <= s[1] <==> r == s[0]\n    ensures s[0] > s[1] ==> r == s[1] \n{\n    if s[0] <= s[1] then s[0] else s[1]\n}\n\nfunction min(s: seq<int>) : (r: int)\n    requires |s| >= 2\n    ensures forall i :: 0 <= i < |s| ==> r <= s[i]\n{\n    if |s| == 2 then MinPair(s)\n    else MinPair([s[0], min(s[1..])])\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SecondSmallest(s: array<int>) returns (secondSmallest: int)\n    requires s.Length >= 2\n\n    requires exists i, j :: 0 <= i < s.Length && 0 <= j < s.Length && i != j && s[i] == min(s[..]) && s[j] != s[i]\n    ensures exists i, j :: 0 <= i < s.Length && 0 <= j < s.Length && i != j && s[i] == min(s[..]) && s[j] == secondSmallest \n    ensures forall k ::  0 <= k < s.Length && s[k] != min(s[..])  ==>  s[k] >= secondSmallest\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafl_tmp_tmp_r3_8w3y_dafny_examples_uiowa_find_Find.dfy", "root", false, "", "", false, "dafl_tmp_tmp_r3_8w3y_dafny_examples_uiowa_find_Find.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Find(a: array<int>, key: int) returns (i: int)\n   requires a != null;\n\n   ensures 0 <= i ==> (\n                       i < a.Length && \n\n                       a[i] == key && \n\n                       forall k :: 0 <= k < i ==> a[k] != key\n                      );\n\n   ensures i < 0 ==> \n\n           forall k :: 0 <= k < a.Length ==> a[k] != key;\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["formal-methods-in-software-engineering_tmp_tmpe7fjnek6_Labs4_gr2_DivMod1.dfy", "root", false, "", "", false, "formal-methods-in-software-engineering_tmp_tmpe7fjnek6_Labs4_gr2_DivMod1.dfy", "// <vc-preamble>\nfunction SqrSumRec(n: int) : int\n    requires n >= 0\n{\n    if (n == 0) then 0 else n*n + SqrSumRec(n-1)\n}\n\nleast lemma L1(n: int)\n    requires n >= 0\n    ensures SqrSumRec(n) == n*(n+1)*(2*n + 1)/6\n{\n\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod DivMod1(a: int, b: int) returns (q: int, r: int)\nrequires b > 0 && a >= 0\nensures a == b*q + r && 0 <= r < b\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-exercise_tmp_tmpouftptir_countNeg_CountNeg.dfy", "root", false, "", "", false, "dafny-exercise_tmp_tmpouftptir_countNeg_CountNeg.dfy", "// <vc-preamble>\nfunction verifyNeg(a: array<int>, idx: int) : nat\nreads a\nrequires 0 <= idx <= a.Length\n{\n    if idx == 0 then 0 \n    else verifyNeg(a, idx - 1) + (if a[idx - 1] < 0 then 1 else 0)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod CountNeg(a: array<int>) returns (cnt: nat) \nensures cnt == verifyNeg(a, a.Length)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_578_Interleave.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_578_Interleave.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Interleave(s1: seq<int>, s2: seq<int>, s3: seq<int>) returns (r: seq<int>)\n    requires |s1| == |s2| && |s2| == |s3|\n    ensures |r| == 3 * |s1|\n    ensures forall i :: 0 <= i < |s1| ==> r[3*i] == s1[i] && r[3*i + 1] == s2[i] && r[3*i + 2] == s3[i]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_602_FindFirstRepeatedChar.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_602_FindFirstRepeatedChar.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod FindFirstRepeatedChar(s: string) returns (found: bool, c: char)\n    ensures found ==> exists i, j :: 0 <= i < j < |s| && s[i] == s[j] && s[i] == c && (forall k, l :: 0 <= k < l < j && s[k] == s[l] ==> k >= i)\n    ensures !found ==> (forall i, j :: 0 <= i < j < |s| ==> s[i] != s[j])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-exercise_tmp_tmpouftptir_appendArray_appendArray.dfy", "root", false, "", "", false, "dafny-exercise_tmp_tmpouftptir_appendArray_appendArray.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod appendArray(a: array<int>, b: array<int>) returns (c: array<int>)\nensures c.Length == a.Length + b.Length\nensures forall i :: 0 <= i < a.Length ==> a[i] == c[i]\nensures forall i :: 0 <= i < b.Length ==> b[i] == c[a.Length + i]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["CVS-handout1_tmp_tmptm52no3k_1_queryFast.dfy", "root", true, "", "", false, "CVS-handout1_tmp_tmptm52no3k_1_queryFast.dfy", "// <vc-preamble>\nfunction sum(a: array<int>, i: int, j: int): int\n    reads a\n    requires 0 <= i <= j <= a.Length\n    decreases j - i\n{\n    if (i == j) then 0\n    else a[i] + sum(a, i+1, j)\n}\n\npredicate is_prefix_sum_for (a: array<int>, c: array<int>)\n    requires a.Length + 1 == c.Length\n    requires c[0] == 0\n    reads c, a\n{\n    forall i: int :: 0 <= i < a.Length ==> c[i+1] == c[i] + a[i]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod queryFast(a: array<int>, c: array<int>, i: int, j: int) returns (r: int)\n    requires a.Length + 1 == c.Length && c[0] == 0\n    requires 0 <= i <= j <= a.Length\n    requires is_prefix_sum_for(a,c)  \n    ensures r == sum(a, i, j)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "/*                                      Cumulative Sums over Arrays                                        */\n\n/*\n    Daniel Cavalheiro   57869\n    Pedro Nunes         57854\n*/\n\n\n\n//(a)\n\nfunction sum(a: array<int>, i: int, j: int): int\n    reads a\n    requires 0 <= i <= j <= a.Length\n    decreases j - i\n{\n    if (i == j) then 0\n    else a[i] + sum(a, i+1, j)\n}\n\n\n\n//(b)\n\n\n\n\n//(c)\n\npredicate is_prefix_sum_for (a: array<int>, c: array<int>)\n    requires a.Length + 1 == c.Length\n    requires c[0] == 0\n    reads c, a\n{\n    forall i: int :: 0 <= i < a.Length ==> c[i+1] == c[i] + a[i]\n}\n\n// <vc-helpers>\nlemma SumLemma(a: array<int>, c: array<int>, i: int, j: int)\n    requires 0 <= i <= j <= a.Length\n    requires a.Length + 1 == c.Length\n    requires c[0] == 0\n    requires is_prefix_sum_for(a, c)\n    ensures sum(a, i, j) == c[j] - c[i]\n    decreases j - i\n{\n    if i == j {\n        calc {\n            sum(a, i, j);\n            { reveal sum(); }\n            0;\n            c[j] - c[i];\n        }\n    } else {\n        calc {\n            sum(a, i, j);\n            { reveal sum(); }\n            a[i] + sum(a, i+1, j);\n            { \n                SumLemma(a, c, i+1, j); \n            }\n            a[i] + (c[j] - c[i+1]);\n            { assert c[i+1] == c[i] + a[i]; }\n            (c[i+1] - c[i]) + (c[j] - c[i+1]);\n            c[j] - c[i];\n        }\n    }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod queryFast(a: array<int>, c: array<int>, i: int, j: int) returns (r: int)\n    requires a.Length + 1 == c.Length && c[0] == 0\n    requires 0 <= i <= j <= a.Length\n    requires is_prefix_sum_for(a,c)  \n    ensures r == sum(a, i, j)\n// </vc-spec>\n// <vc-code>\n{\n    SumLemma(a, c, i, j);\n    r := c[j] - c[i];\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_273_SubtractSequences.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_273_SubtractSequences.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SubtractSequences(a: seq<int>, b: seq<int>) returns (result: seq<int>)\n    requires |a| == |b|\n    ensures |result| == |a|\n    ensures forall i :: 0 <= i < |result| ==> result[i] == a[i] - b[i]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_733_FindFirstOccurrence.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_733_FindFirstOccurrence.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod FindFirstOccurrence(arr: array<int>, target: int) returns (index: int)\n    requires arr != null\n    requires forall i, j :: 0 <= i < j < arr.Length ==> arr[i] <= arr[j]\n    ensures 0 <= index < arr.Length ==> arr[index] == target\n    ensures index == -1 ==> forall i :: 0 <= i < arr.Length ==> arr[i] != target\n    ensures forall i :: 0 <= i < arr.Length ==> arr[i] == old(arr[i])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["formal_verication_dafny_tmp_tmpwgl2qz28_Challenges_ex7_Exchanger.dfy", "root", false, "", "", false, "formal_verication_dafny_tmp_tmpwgl2qz28_Challenges_ex7_Exchanger.dfy", "// <vc-preamble>\ndatatype Bases = A | C | G | T\n\npredicate below(first: Bases, second: Bases)\n{\n    first == second ||\n    first == A || \n    (first == C && (second ==  G || second == T)) || \n    (first == G && second == T) ||\n    second == T\n}\n\npredicate bordered(s:seq<Bases>)\n{\n    forall j, k :: 0 <= j < k < |s| ==> below(s[j], s[k])\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Exchanger(s: seq<Bases>, x:nat, y:nat) returns (t: seq<Bases>)\nrequires 0 < |s| && x < |s| && y < |s|\nensures |t| == |s|\nensures forall b:nat :: 0 <= b < |s| && b != x && b != y ==> t[b] == s[b]\nensures t[x] == s[y] && s[x] == t[y]\nensures multiset(s) == multiset(t)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny_misc_tmp_tmpg4vzlnm1_rosetta_code_factorial_IterativeFactorial.dfy", "root", false, "", "", false, "dafny_misc_tmp_tmpg4vzlnm1_rosetta_code_factorial_IterativeFactorial.dfy", "// <vc-preamble>\nfunction Factorial(n: nat): nat {\n  if n == 0 then 1 else n * Factorial(n - 1)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod IterativeFactorial(n: nat) returns (result: nat)\n  ensures result == Factorial(n)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny_tmp_tmpj88zq5zt_2-Kontrakte_reverse3_swap3.dfy", "root", true, "", "", false, "Dafny_tmp_tmpj88zq5zt_2-Kontrakte_reverse3_swap3.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod swap3(a: array<int>, h: int, i: int, j: int)\n  modifies a\n  requires 0 <= h < a.Length\n  requires 0 <= i < a.Length\n  requires 0 <= j < a.Length\n  requires i != j && j != h && h != i;\n  ensures a[h] == old(a[i]);\n  ensures a[j] == old(a[h]);\n  ensures a[i] == old(a[j]);\n  ensures forall k: int :: 0 <= k < a.Length && k != h && k != i && k != j ==> a[k] == old(a[k]);\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod swap3(a: array<int>, h: int, i: int, j: int)\n  modifies a\n  requires 0 <= h < a.Length\n  requires 0 <= i < a.Length\n  requires 0 <= j < a.Length\n  requires i != j && j != h && h != i;\n  ensures a[h] == old(a[i]);\n  ensures a[j] == old(a[h]);\n  ensures a[i] == old(a[j]);\n  ensures forall k: int :: 0 <= k < a.Length && k != h && k != i && k != j ==> a[k] == old(a[k]);\n// </vc-spec>\n// <vc-code>\n{\n  var temp := a[h];\n  a[h] := a[i];\n  a[i] := a[j];\n  a[j] := temp;\n}\n// </vc-code>\n\n", "", "", ""], ["Clover_match_Match.dfy", "root", true, "", "", false, "Clover_match_Match.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Match(s: string, p: string) returns (b: bool)\n  requires |s| == |p|\n  ensures b <==> forall n :: 0 <= n < |s| ==> s[n] == p[n] || p[n] == '?'\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod Match(s: string, p: string) returns (b: bool)\n  requires |s| == |p|\n  ensures b <==> forall n :: 0 <= n < |s| ==> s[n] == p[n] || p[n] == '?'\n// </vc-spec>\n// <vc-code>\n{\n  var i := 0;\n  while i < |s|\n    invariant 0 <= i <= |s|\n    invariant forall j :: 0 <= j < i ==> s[j] == p[j] || p[j] == '?'\n  {\n    if s[i] != p[i] && p[i] != '?' {\n      return false;\n    }\n    i := i + 1;\n  }\n  return true;\n}\n// </vc-code>\n\n", "", "", ""], ["Dafny_tmp_tmp0wu8wmfr_Heimaverkefni_1_LinearSearch_SearchLoop.dfy", "root", false, "", "", false, "Dafny_tmp_tmp0wu8wmfr_Heimaverkefni_1_LinearSearch_SearchLoop.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SearchLoop( a: seq<int>, i: int, j: int, x: int ) returns (k: int)\n    requires 0 <= i <= j <= |a|;\n    ensures i <= k < j || k == -1;\n    ensures k != -1 ==> a[k] == x;\n    ensures k != -1 ==> forall r | k < r < j :: a[r] != x;\n    ensures k == -1 ==> forall r | i <= r < j :: a[r] != x;\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["FlexWeek_tmp_tmpc_tfdj_3_ex4_join.dfy", "root", true, "", "", false, "FlexWeek_tmp_tmpc_tfdj_3_ex4_join.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod join(a:array<int>,b:array<int>) returns (c:array<int>)\nensures a[..] + b[..] == c[..]\nensures multiset(a[..] + b[..]) == multiset(c[..])\nensures multiset(a[..]) + multiset(b[..]) == multiset(c[..])\nensures a.Length+b.Length == c.Length\n\nensures forall i :: 0<=i<a.Length ==> c[i] == a[i]\nensures forall i_2,j_2::\n    a.Length <= i_2 < c.Length &&\n    0<=j_2< b.Length && i_2 - j_2 == a.Length  ==> c[i_2] == b[j_2]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n//\n// </vc-helpers>\n\n// <vc-spec>\nmethod join(a:array<int>,b:array<int>) returns (c:array<int>)\nensures a[..] + b[..] == c[..]\nensures multiset(a[..] + b[..]) == multiset(c[..])\nensures multiset(a[..]) + multiset(b[..]) == multiset(c[..])\nensures a.Length+b.Length == c.Length\n\n// Forall\n\nensures forall i :: 0<=i<a.Length ==> c[i] == a[i]\nensures forall i_2,j_2::\n    a.Length <= i_2 < c.Length &&\n    0<=j_2< b.Length && i_2 - j_2 == a.Length  ==> c[i_2] == b[j_2]\n// </vc-spec>\n// <vc-code>\n{\n  c := new int[a.Length + b.Length];\n  var i := 0;\n  while i < a.Length\n    invariant 0 <= i <= a.Length\n    invariant forall k :: 0 <= k < i ==> c[k] == a[k]\n    invariant multiset(c[0..i]) == multiset(a[0..i])\n  {\n    c[i] := a[i];\n    i := i + 1;\n  }\n  var j := 0;\n  i := a.Length;\n  while j < b.Length\n    invariant a.Length <= i <= a.Length + b.Length\n    invariant j == i - a.Length\n    invariant forall k :: 0 <= k < a.Length ==> c[k] == a[k]\n    invariant forall k :: a.Length <= k < i ==> c[k] == b[k - a.Length]\n    invariant multiset(c[0..i]) == multiset(a[0..a.Length]) + multiset(b[0..j])\n  {\n    c[i] := b[j];\n    i := i + 1;\n    j := j + 1;\n  }\n  return c;\n}\n// </vc-code>\n\n", "", "", ""], ["Dafny_Verify_tmp_tmphq7j0row_Fine_Tune_Examples_normal_data_completion_MaxPerdV2_max.dfy", "root", true, "", "", false, "Dafny_Verify_tmp_tmphq7j0row_Fine_Tune_Examples_normal_data_completion_MaxPerdV2_max.dfy", "// <vc-preamble>\nfunction contains(v: int, a: array<int>, n: int): bool\nreads a\n  requires n <= a.Length\n{\n  exists j :: 0 <= j < n && a[j] == v\n}\n\nfunction upper_bound(v: int, a: array<int>, n: int): bool\nreads a\n  requires n <= a.Length\n{\n  forall j :: 0 <= j < n ==> a[j] <= v\n}\n\nfunction is_max(m: int, a: array<int>, n: int): bool\nreads a\n  requires n <= a.Length\n{\n  contains(m, a, n) && upper_bound(m, a, n)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod max(a: array<int>, n: int) returns (max: int)\n  requires 0 < n <= a.Length;\n  ensures is_max(max, a, n);\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "function contains(v: int, a: array<int>, n: int): bool\nreads a\n  requires n <= a.Length\n{\n  exists j :: 0 <= j < n && a[j] == v\n}\n\nfunction upper_bound(v: int, a: array<int>, n: int): bool\nreads a\n  requires n <= a.Length\n{\n  forall j :: 0 <= j < n ==> a[j] <= v\n}\n\nfunction is_max(m: int, a: array<int>, n: int): bool\nreads a\n  requires n <= a.Length\n{\n  contains(m, a, n) && upper_bound(m, a, n)\n}\n\n// <vc-helpers>\nlemma lemma_upper_bound_extension_by_element(m: int, a: array<int>, i: int)\n  requires 0 <= i < a.Length\n  requires upper_bound(m, a, i)\n  requires a[i] > m\n  ensures upper_bound(a[i], a, i+1);\n{\n  forall j | 0 <= j < i+1\n    ensures a[j] <= a[i]\n  {\n    if j < i {\n      assert a[j] <= m;\n      assert m < a[i];\n    } else {\n      assert j == i;\n    }\n  }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod max(a: array<int>, n: int) returns (max: int)\n  requires 0 < n <= a.Length;\n  ensures is_max(max, a, n);\n// </vc-spec>\n// <vc-code>\n{\n  max := a[0];\n  var i := 1;\n  while i < n\n    invariant 1 <= i <= n\n    invariant is_max(max, a, i)\n  {\n    if a[i] > max {\n      lemma_upper_bound_extension_by_element(max, a, i);\n      max := a[i];\n    }\n    i := i + 1;\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["Dafny_Learning_Experience_tmp_tmpuxvcet_u_week8_12_a3_search_findPositionOfIndex_FindPositionOfElement.dfy", "root", true, "", "", false, "Dafny_Learning_Experience_tmp_tmpuxvcet_u_week8_12_a3_search_findPositionOfIndex_FindPositionOfElement.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod FindPositionOfElement(a:array<int>,Element:nat,n1:nat,s1:seq<int>) returns (Position:int,Count:nat)\n        requires n1 == |s1| && 0 <= n1 <= a.Length\n        requires forall i:: 0<= i < |s1| ==> a[i] == s1[i]\n        ensures Position == -1 || Position >= 1\n        ensures |s1| != 0 && Position >= 1 ==> exists i:: 0 <= i < |s1| && s1[i] == Element\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\nlemma LemmaAboutExistence(s: seq<int>, Element: nat)\n    requires |s| != 0\n    ensures (exists i :: 0 <= i < |s| && s[i] == Element) || (forall i :: 0 <= i < |s| ==> s[i] != Element)\n{\n    if |s| == 1 {\n        if s[0] == Element {\n            assert exists i :: 0 <= i < |s| && s[i] == Element;\n        } else {\n            assert forall i :: 0 <= i < |s| ==> s[i] != Element;\n        }\n    } else {\n        if s[0] == Element {\n            assert exists i :: 0 <= i < |s| && s[i] == Element;\n        } else {\n            LemmaAboutExistence(s[1..], Element);\n            if exists i :: 0 <= i < |s|-1 && s[1..][i] == Element {\n                var i : int :| 0 <= i < |s|-1 && s[1..][i] == Element;\n                assert s[i+1] == Element;\n                assert exists j :: 0 <= j < |s| && s[j] == Element;\n            } else {\n                assert forall i :: 0 <= i < |s|-1 ==> s[1..][i] != Element;\n                assert forall i :: 1 <= i < |s| ==> s[i] != Element;\n                assert forall i :: 0 <= i < |s| ==> s[i] != Element;\n            }\n        }\n    }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod FindPositionOfElement(a:array<int>,Element:nat,n1:nat,s1:seq<int>) returns (Position:int,Count:nat)\n        requires n1 == |s1| && 0 <= n1 <= a.Length\n        requires forall i:: 0<= i < |s1| ==> a[i] == s1[i]\n        ensures Position == -1 || Position >= 1\n        ensures |s1| != 0 && Position >= 1 ==> exists i:: 0 <= i < |s1| && s1[i] == Element\n// </vc-spec>\n// <vc-code>\n{\n    if n1 == 0 {\n        Position := -1;\n        Count := 0;\n    } else {\n        LemmaAboutExistence(s1, Element);\n        var found := false;\n        var pos := -1;\n        var cnt := 0;\n        \n        for i := 0 to n1\n            invariant 0 <= i <= n1\n            invariant pos == -1 <==> !found\n            invariant pos == -1 || pos >= 1\n            invariant pos >= 1 ==> found && 0 <= pos-1 < i && s1[pos-1] == Element\n            invariant cnt == (if found then 1 else 0)\n        {\n            if a[i] == Element {\n                if !found {\n                    found := true;\n                    pos := i + 1;\n                    cnt := 1;\n                }\n            }\n        }\n        \n        Position := pos;\n        Count := cnt;\n    }\n}\n// </vc-code>\n\n", "", "", ""], ["formal_verication_dafny_tmp_tmpwgl2qz28_Challenges_ex1_PalVerify.dfy", "root", false, "", "", false, "formal_verication_dafny_tmp_tmpwgl2qz28_Challenges_ex1_PalVerify.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod PalVerify(a: array<char>) returns (yn: bool)\nensures yn == true ==> forall i :: 0 <= i < a.Length/2 ==> a[i] == a[a.Length - i -1]\nensures yn == false ==> exists i :: 0 <= i < a.Length/2 && a[i] != a[a.Length - i -1]\nensures forall j :: 0<=j<a.Length ==> a[j] == old(a[j])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_599_SumAndAverage.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_599_SumAndAverage.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SumAndAverage(n: int) returns (sum: int, average: real)\n    requires n > 0\n    ensures sum == n * (n + 1) / 2\n    ensures average == sum as real / n as real\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Final-Project-Dafny_tmp_tmpmcywuqox_Attempts_Quick_Sort_quickSort.dfy", "root", true, "", "", false, "Final-Project-Dafny_tmp_tmpmcywuqox_Attempts_Quick_Sort_quickSort.dfy", "// <vc-preamble>\npredicate quickSorted(Seq: seq<int>)\n{\n  forall idx_1, idx_2 :: 0 <= idx_1 < idx_2 < |Seq| ==> Seq[idx_1] <= Seq[idx_2]\n}\n\nmethod threshold(thres:int,Seq:seq<int>) returns (Seq_1:seq<int>,Seq_2:seq<int>)\n  ensures (forall x | x in Seq_1 :: x <= thres) && (forall x | x in Seq_2 :: x >= thres)\n  ensures |Seq_1| + |Seq_2| == |Seq| \n  ensures multiset(Seq_1) + multiset(Seq_2) == multiset(Seq)\n{\n  assume{:axiom} false;\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod quickSort(Seq: seq<int>) returns (Seq': seq<int>)\n  ensures multiset(Seq) == multiset(Seq')\n  decreases |Seq|\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "predicate quickSorted(Seq: seq<int>)\n{\n  forall idx_1, idx_2 :: 0 <= idx_1 < idx_2 < |Seq| ==> Seq[idx_1] <= Seq[idx_2]\n}\n\nmethod threshold(thres:int,Seq:seq<int>) returns (Seq_1:seq<int>,Seq_2:seq<int>)\n  ensures (forall x | x in Seq_1 :: x <= thres) && (forall x | x in Seq_2 :: x >= thres)\n  ensures |Seq_1| + |Seq_2| == |Seq| \n  ensures multiset(Seq_1) + multiset(Seq_2) == multiset(Seq)\n{\n  assume{:axiom} false;\n}\n\n// <vc-helpers>\nmethod split(seq: seq<int>, pivot: int) returns (left: seq<int>, right: seq<int>)\n  ensures forall i :: 0 <= i < |left| ==> left[i] < pivot\n  ensures forall i :: 0 <= i < |right| ==> right[i] >= pivot\n  ensures |left| + |right| == |seq|\n  ensures multiset(left) + multiset(right) == multiset(seq)\n{\n  left := [x for x in seq if x < pivot];\n  right := [x for x in seq if x >= pivot];\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod quickSort(Seq: seq<int>) returns (Seq': seq<int>)\n  ensures multiset(Seq) == multiset(Seq')\n  decreases |Seq|\n// </vc-spec>\n// <vc-code>\n{\n  if (|Seq| <= 1) {\n    return Seq;\n  } else {\n    var pivot := Seq[0];\n    var left, right := split(Seq[1:], pivot);\n    var leftSorted := quickSort(left);\n    var rightSorted := quickSort(right);\n    return leftSorted + [pivot] + rightSorted;\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_basic_examples_BubbleSort_bubbleSort.dfy", "root", false, "", "", false, "Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_basic_examples_BubbleSort_bubbleSort.dfy", "// <vc-preamble>\npredicate sorted(a:array<int>, from:int, to:int)\n  requires a != null;\n  reads a;\n  requires 0 <= from <= to <= a.Length;\n{\n  forall u, v :: from <= u < v < to ==> a[u] <= a[v]\n}\n\npredicate pivot(a:array<int>, to:int, pvt:int)\n  requires a != null;\n  reads a;\n  requires 0 <= pvt < to <= a.Length;\n{\n  forall u, v :: 0 <= u < pvt < v < to ==> a[u] <= a[v]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod bubbleSort (a: array<int>)\n  requires a != null && a.Length > 0;\n  modifies a;\n  ensures sorted(a, 0, a.Length);\n  ensures multiset(a[..]) == multiset(old(a[..]));\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_644_Reverse.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_644_Reverse.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Reverse(a: array<int>)\n    modifies a;\n    ensures forall k :: 0 <= k < a.Length ==> a[k] == old(a[(a.Length-1) - k]);\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_554_FindOddNumbers.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_554_FindOddNumbers.dfy", "// <vc-preamble>\npredicate IsOdd(n: int)\n{\n    n % 2 == 1\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod FindOddNumbers(arr: array<int>) returns (oddList: seq<int>)\n\n    ensures forall i :: 0 <= i < |oddList| ==> IsOdd(oddList[i]) && oddList[i] in arr[..]\n\n    ensures forall i :: 0 <= i < arr.Length && IsOdd(arr[i]) ==> arr[i] in oddList\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny_tmp_tmp0wu8wmfr_Heimaverkefni_2_BinarySearchDec_SearchRecursive.dfy", "root", false, "", "", false, "Dafny_tmp_tmp0wu8wmfr_Heimaverkefni_2_BinarySearchDec_SearchRecursive.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SearchRecursive( a: seq<real>, i: int, j: int, x: real ) returns ( k: int )\n    decreases j-i;\n    requires 0 <= i <= j <= |a|;\n    requires forall p, q :: i <= p < q < j ==> a[p] >= a[q];\n    ensures i <= k <= j\n    ensures forall r | i <= r < k :: a[r] >= x;\n    ensures forall r | k <= r < j :: a[r] < x;\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_572_RemoveDuplicates.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_572_RemoveDuplicates.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod RemoveDuplicates(a: array<int>) returns (result: seq<int>)\n    requires a != null\n    ensures forall x :: x in result <==> exists i :: 0 <= i < a.Length && a[i] == x\n    ensures forall i, j :: 0 <= i < j < |result| ==> result[i] != result[j]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny-Exercises_tmp_tmpjm75muf__Session7Exercises_ExerciseBinarySearch_binarySearch.dfy", "root", true, "", "", false, "Dafny-Exercises_tmp_tmpjm75muf__Session7Exercises_ExerciseBinarySearch_binarySearch.dfy", "// <vc-preamble>\npredicate sorted(s : seq<int>) {\n    forall u, w :: 0 <= u < w < |s| ==> s[u] <= s[w]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod binarySearch(v:array<int>, elem:int) returns (p:int)\n requires sorted(v[0..v.Length])\n ensures -1<=p<v.Length\n ensures (forall u::0<=u<=p ==> v[u]<=elem) && (forall w::p<w<v.Length ==> v[w]>elem)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "predicate sorted(s : seq<int>) {\n    forall u, w :: 0 <= u < w < |s| ==> s[u] <= s[w]\n}\n\n// <vc-helpers>\nlemma lemma_min_max(s:seq<int>)\n    requires sorted(s)\n    requires |s| > 0\n    ensures s[0] <= s[|s|-1]\n{\n}\n\nlemma lemma_split_mid(s:seq<int>, low:int, high:int)\n    requires sorted(s)\n    requires 0 <= low <= high <= |s|\n    ensures sorted(s[low..high])\n{\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod binarySearch(v:array<int>, elem:int) returns (p:int)\n requires sorted(v[0..v.Length])\n ensures -1<=p<v.Length\n ensures (forall u::0<=u<=p ==> v[u]<=elem) && (forall w::p<w<v.Length ==> v[w]>elem)\n// </vc-spec>\n// <vc-code>\n{\n    var low := 0;\n    var high := v.Length;\n    p := -1;\n\n    while low < high\n        invariant 0 <= low <= high <= v.Length\n        invariant (forall u::0<=u<low ==> v[u]<=elem)\n        invariant (forall w::high<=w<v.Length ==> v[w]>elem)\n        invariant -1<=p<v.Length\n    {\n        var mid := low + (high - low) / 2;\n        lemma_split_mid(v[..], low, high);\n        lemma_min_max(v[low..high]);\n        \n        if v[mid] > elem {\n            high := mid;\n        } else {\n            low := mid + 1;\n        }\n    }\n    \n    p := low - 1;\n    return p;\n}\n// </vc-code>\n\n//Recursive binary search", "", "", ""], ["Software-Verification_tmp_tmpv4ueky2d_Non-overlapping_Intervals_non_overlapping_intervals_non_overlapping_intervals.dfy", "root", false, "", "", false, "Software-Verification_tmp_tmpv4ueky2d_Non-overlapping_Intervals_non_overlapping_intervals_non_overlapping_intervals.dfy", "// <vc-preamble>\nmethod bubble_sort(a: array2<int>)\n    modifies a\n    requires a.Length1 == 2\n    ensures sorted(a, 0, a.Length0 - 1)\n{\n  assume{:axiom} false;\n}\n\npredicate sorted(a: array2<int>, l: int, u: int)\n    reads a\n    requires a.Length1 == 2\n{\n    forall i, j :: 0 <= l <= i <= j <= u < a.Length0 ==> a[i, 1] <= a[j, 1]\n}\n\npredicate partitioned(a: array2<int>, i: int)\n    reads a\n    requires a.Length1 == 2\n{\n    forall k, k' :: 0 <= k <= i < k' < a.Length0 ==> a[k, 1] <= a[k', 1]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod non_overlapping_intervals(intervals: array2<int>) returns (count: int)\n    modifies intervals\n    requires 1 <= intervals.Length0 <= 100000\n    requires intervals.Length1 == 2\n    requires forall i :: 0 <= i < intervals.Length0 ==> -50000 <= intervals[i, 0] <= 50000\n    requires forall i :: 0 <= i < intervals.Length0 ==> -50000 <= intervals[i, 1] <= 50000\n\n    ensures count >= 0\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_swap_in_array_swap.dfy", "root", true, "", "", false, "Clover_swap_in_array_swap.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod swap(arr: array<int>, i: int, j: int)\n  requires 0 <= i < arr.Length && 0 <= j < arr.Length\n  modifies arr\n  ensures arr[i] == old(arr[j]) && arr[j] == old(arr[i])\n  ensures forall k :: 0 <= k < arr.Length && k != i && k != j ==> arr[k] == old(arr[k])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod swap(arr: array<int>, i: int, j: int)\n  requires 0 <= i < arr.Length && 0 <= j < arr.Length\n  modifies arr\n  ensures arr[i] == old(arr[j]) && arr[j] == old(arr[i])\n  ensures forall k :: 0 <= k < arr.Length && k != i && k != j ==> arr[k] == old(arr[k])\n// </vc-spec>\n// <vc-code>\n{\n  var temp := arr[i];\n  arr[i] := arr[j];\n  arr[j] := temp;\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_171_PentagonPerimeter.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_171_PentagonPerimeter.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod PentagonPerimeter(side: int) returns (perimeter: int)\n    requires side > 0\n    ensures perimeter == 5 * side\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_430_ParabolaDirectrix.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_430_ParabolaDirectrix.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ParabolaDirectrix(a: real, h: real, k: real) returns (directrix: real)\n    requires a != 0.0\n    ensures directrix == k - 1.0 / (4.0 * a)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_145_MaxDifference.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_145_MaxDifference.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod MaxDifference(a: array<int>) returns (diff: int)\n    requires a.Length > 1\n    ensures forall i, j :: 0 <= i < a.Length && 0 <= j < a.Length ==> a[i] - a[j] <= diff\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_750_AddTupleToList.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_750_AddTupleToList.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod AddTupleToList(l: seq<(int, int)>, t: (int, int)) returns (r: seq<(int, int)>)\n    ensures |r| == |l| + 1\n    ensures r[|r| - 1] == t\n    ensures forall i :: 0 <= i < |l| ==> r[i] == l[i]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_474_ReplaceChars.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_474_ReplaceChars.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ReplaceChars(s: string, oldChar: char, newChar: char) returns (v: string)\n    ensures |v| == |s|\n    ensures forall i :: 0 <= i < |s| ==> (s[i] == oldChar ==> v[i] == newChar) && (s[i] != oldChar ==> v[i] == s[i])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_249_Intersection.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_249_Intersection.dfy", "// <vc-preamble>\npredicate InArray(a: array<int>, x: int)\n    reads a\n{\n    exists i :: 0 <= i < a.Length && a[i] == x\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Intersection(a: array<int>, b: array<int>) returns (result: seq<int>)\n\n    ensures forall x :: x in result ==> (InArray(a, x) && InArray(b, x))\n\n    ensures forall i, j :: 0 <= i < j < |result| ==> result[i] != result[j]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_227_MinOfThree.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_227_MinOfThree.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod MinOfThree(a: int, b: int, c: int) returns (min: int)\n    ensures min <= a && min <= b && min <= c\n    ensures (min == a) || (min == b) || (min == c)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny_tmp_tmpj88zq5zt_2-Kontrakte_max_max.dfy", "root", true, "", "", false, "Dafny_tmp_tmpj88zq5zt_2-Kontrakte_max_max.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod max(a: array<int>, b: array<int>, i: int, j: int)\n  returns (m: int)\n  requires 0 <= i < a.Length\n  requires 0 <= j < b.Length\n  ensures  a[i] > b[j] ==> m == a[i]\n  ensures  a[i] <= b[j] ==> m == b[j]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod max(a: array<int>, b: array<int>, i: int, j: int)\n  returns (m: int)\n  requires 0 <= i < a.Length\n  requires 0 <= j < b.Length\n  ensures  a[i] > b[j] ==> m == a[i]\n  ensures  a[i] <= b[j] ==> m == b[j]\n// </vc-spec>\n// <vc-code>\n{\n  if a[i] > b[j] {\n    return a[i];\n  } else {\n    return b[j];\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["DafnyPrograms_tmp_tmp74_f9k_c_invertarray_InvertArray.dfy", "root", true, "", "", false, "DafnyPrograms_tmp_tmp74_f9k_c_invertarray_InvertArray.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod InvertArray(a: array<int>)\n  modifies a\n  ensures forall i | 0 <= i < a.Length :: a[i] == old(a[a.Length-1-i])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "/**\n  Inverts an array of ints.\n */\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod InvertArray(a: array<int>)\n  modifies a\n  ensures forall i | 0 <= i < a.Length :: a[i] == old(a[a.Length-1-i])\n// </vc-spec>\n// <vc-code>\n{\n  var i := 0;\n  var j := a.Length - 1;\n  while i < j\n    invariant 0 <= i <= j+1 <= a.Length\n    invariant i + j == a.Length - 1\n    invariant forall k :: 0 <= k < i ==> a[k] == old(a[a.Length-1-k])\n    invariant forall k :: j < k < a.Length ==> a[k] == old(a[a.Length-1-k])\n    invariant forall k :: i <= k <= j ==> a[k] == old(a[k])\n  {\n    var temp := a[i];\n    a[i] := a[j];\n    a[j] := temp;\n    i := i + 1;\n    j := j - 1;\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_94_MinSecondValueFirst.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_94_MinSecondValueFirst.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod MinSecondValueFirst(s: array<seq<int>>) returns (firstOfMinSecond: int)\n    requires s.Length > 0\n    requires forall i :: 0 <= i < s.Length ==> |s[i]| >= 2\n    ensures exists i :: 0 <= i < s.Length && firstOfMinSecond == s[i][0] && \n        (forall j :: 0 <= j < s.Length ==> s[i][1] <= s[j][1])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["feup-mfes_tmp_tmp6_a1y5a5_examples_SelectionSort_selectionSort.dfy", "root", false, "", "", false, "feup-mfes_tmp_tmp6_a1y5a5_examples_SelectionSort_selectionSort.dfy", "// <vc-preamble>\npredicate isSorted(a: array<real>, from: nat, to: nat)\n  requires 0 <= from <= to <= a.Length\n  reads a\n{\n    forall i, j :: from <= i < j < to ==> a[i] <= a[j] \n}\n\nmethod findMin(a: array<real>, from: nat, to: nat) returns(index: nat)\n  requires 0 <= from < to <= a.Length\n  ensures from <= index < to\n  ensures forall k :: from <= k < to ==> a[k] >= a[index]\n{\n  assume{:axiom} false;\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod selectionSort(a: array<real>)\n  modifies a\n  ensures isSorted(a, 0, a.Length) \n  ensures multiset(a[..]) == multiset(old(a[..]))\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_598_IsArmstrong.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_598_IsArmstrong.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod IsArmstrong(n: int) returns (result: bool)\n    requires 100 <= n < 1000\n    ensures result <==> (n == ((n / 100) * (n / 100) * (n / 100) + ((n / 10) % 10) * ((n / 10) % 10) * ((n / 10) % 10) + (n % 10) * (n % 10) * (n % 10)))\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["llm-verified-eval_tmp_tmpd2deqn_i_dafny_9_rolling_max.dfy", "root", false, "", "", false, "llm-verified-eval_tmp_tmpd2deqn_i_dafny_9_rolling_max.dfy", "// <vc-preamble>\nfunction isMax(m: int, numbers: seq<int>): bool\n{\n    m in numbers &&\n    forall i :: 0 <= i < |numbers| ==> numbers[i] <= m\n\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod rolling_max(numbers: seq<int>) returns (result: seq<int>)\nrequires numbers != []\nensures |result| == |numbers|\nensures forall i :: 0 < i < |result| ==> isMax(result[i], numbers[0..(i+1)])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny_tmp_tmp0wu8wmfr_tests_Search1000_Search1000.dfy", "root", true, "", "", false, "Dafny_tmp_tmp0wu8wmfr_tests_Search1000_Search1000.dfy", "// <vc-preamble>\npredicate Is2Pow( n: int )\n    decreases n;\n{\n    if n < 1 then\n        false\n    else if n == 1 then\n        true\n    else\n        n%2 == 0 && Is2Pow(n/2)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Search1000( a: array<int>, x: int ) returns ( k: int )\n    requires a.Length >= 1000;\n    requires forall p,q | 0 <= p < q < 1000 :: a[p] <= a[q];\n    ensures 0 <= k <= 1000;\n    ensures forall r | 0 <= r < k :: a[r] < x;\n    ensures forall r | k <= r < 1000 :: a[r] >= x;\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "// Author: Snorri Agnarsson, snorri@hi.is\n\n// Search1000 is a Dafny version of a function shown\n// by Jon Bentley in his old Programming Pearls\n// column in CACM.  Surprisingly Dafny needs no help\n// to verify the function.\n\n// Is2Pow(n) is true iff n==2^k for some k>=0.\npredicate Is2Pow( n: int )\n    decreases n;\n{\n    if n < 1 then\n        false\n    else if n == 1 then\n        true\n    else\n        n%2 == 0 && Is2Pow(n/2)\n}\n\n// This method is a binary search that only works for array\n// segments of size n == 2^k-1 for some k>=0.\n\n// This method is a binary search that only works for array\n// segments of size n == 2^k-1 for some k>=0.\n\n// <vc-helpers>\npredicate Is2Pow( n: int )\n    decreases n\n{\n    if n < 1 then\n        false\n    else if n == 1 then\n        true\n    else\n        n%2 == 0 && Is2Pow(n/2)\n}\n\npredicate IsSegSorted(a: array<int>, lo: int, hi: int)\n    reads a\n    requires 0 <= lo <= hi <= a.Length\n{\n    forall p,q | lo <= p < q < hi :: a[p] <= a[q]\n}\n\nlemma LemmaSplit(a: array<int>, lo: int, hi: int, mid: int)\n    requires 0 <= lo <= mid < hi <= a.Length\n    requires IsSegSorted(a, lo, hi)\n    ensures IsSegSorted(a, lo, mid) && IsSegSorted(a, mid, hi)\n{\n    // Proof automatically completed by Dafny\n}\n\npredicate Search1000ValidRec(a: array<int>, x: int, lo: int, hi: int, k: int)\n    reads a\n    requires 0 <= lo <= k <= hi <= a.Length\n{\n    0 <= lo <= k <= hi <= 1000 &&\n    (forall r | lo <= r < k :: a[r] < x) &&\n    (forall r | k <= r < hi :: a[r] >= x)\n}\n\nmethod Search1000Rec(a: array<int>, x: int, lo: int, hi: int) returns (k: int)\n    requires 0 <= lo < hi <= 1000\n    requires hi <= a.Length\n    requires IsSegSorted(a, lo, hi)\n    decreases hi - lo\n    ensures Search1000ValidRec(a, x, lo, hi, k)\n{\n    if lo + 1 == hi {\n        if a[lo] < x {\n            k := hi;\n        } else {\n            k := lo;\n        }\n    } else {\n        var mid := (lo + hi) / 2;\n        assert mid == lo + (hi - lo) / 2;\n        assert lo < mid < hi;\n        \n        LemmaSplit(a, lo, hi, mid);\n        \n        if a[mid] < x {\n            k := Search1000Rec(a, x, mid + 1, hi);\n            assert Search1000ValidRec(a, x, mid + 1, hi, k);\n        } else {\n            k := Search1000Rec(a, x, lo, mid);\n            assert Search1000ValidRec(a, x, lo, mid, k);\n        }\n    }\n}\n\nlemma LemmaRecValidToGlobal(a: array<int>, x: int, k: int)\n    requires Search1000ValidRec(a, x, 0, 1000, k)\n    ensures 0 <= k <= 1000\n    ensures forall r | 0 <= r < k :: a[r] < x\n    ensures forall r | k <= r < 1000 :: a[r] >= x\n{\n    // Follows directly from the predicate definition\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod Search1000( a: array<int>, x: int ) returns ( k: int )\n    requires a.Length >= 1000;\n    requires forall p,q | 0 <= p < q < 1000 :: a[p] <= a[q];\n    ensures 0 <= k <= 1000;\n    ensures forall r | 0 <= r < k :: a[r] < x;\n    ensures forall r | k <= r < 1000 :: a[r] >= x;\n// </vc-spec>\n// <vc-code>\n{\n    k := Search1000Rec(a, x, 0, 1000);\n}\n// </vc-code>\n\n", "", "", ""], ["Dafny-Exercises_tmp_tmpjm75muf__Session2Exercises_ExerciseFibonacci_fibonacci1.dfy", "root", true, "", "", false, "Dafny-Exercises_tmp_tmpjm75muf__Session2Exercises_ExerciseFibonacci_fibonacci1.dfy", "// <vc-preamble>\nfunction fib(n: nat): nat\ndecreases n\n{\n   if n == 0 then 0 else\n   if n == 1 then 1 else\n                  fib(n - 1) + fib(n - 2)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod fibonacci1(n:nat) returns (f:nat)\nensures f==fib(n)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "function fib(n: nat): nat\ndecreases n\n{\n   if n == 0 then 0 else\n   if n == 1 then 1 else\n                  fib(n - 1) + fib(n - 2)\n}\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod fibonacci1(n:nat) returns (f:nat)\nensures f==fib(n)\n// </vc-spec>\n// <vc-code>\n{\n  if n == 0 {\n    return 0;\n  } else if n == 1 {\n    return 1;\n  } else {\n    var i := 2;\n    var a := 0;\n    var b := 1;\n    while i <= n\n      invariant 2 <= i <= n+1\n      invariant a == fib(i-2)\n      invariant b == fib(i-1)\n    {\n      a, b := b, a + b;\n      i := i + 1;\n    }\n    return b;\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_algorithms_and_leetcode_leetcode_lc-remove-element_removeElement.dfy", "root", false, "", "", false, "Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_algorithms_and_leetcode_leetcode_lc-remove-element_removeElement.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod removeElement(nums: array<int>, val: int) returns (i: int)\n    ensures forall k :: 0 < k < i < nums.Length ==> nums[k] != val\n    modifies nums\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_732_ReplaceWithColon.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_732_ReplaceWithColon.dfy", "// <vc-preamble>\npredicate IsSpaceCommaDot(c: char)\n{\n    c == ' ' || c == ',' || c == '.'\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ReplaceWithColon(s: string) returns (v: string)\n    ensures |v| == |s|\n    ensures forall i :: 0 <= i < |s| ==> (IsSpaceCommaDot(s[i]) ==> v[i] == ':') && (!IsSpaceCommaDot(s[i]) ==> v[i] == s[i])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_775_IsOddAtIndexOdd.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_775_IsOddAtIndexOdd.dfy", "// <vc-preamble>\npredicate IsOdd(n: int)\n{\n    n % 2 == 1\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod IsOddAtIndexOdd(a: array<int>) returns (result: bool)\n    ensures result <==> forall i :: 0 <= i < a.Length ==> (IsOdd(i) ==> IsOdd(a[i]))\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-duck_tmp_tmplawbgxjo_p6_FilterVowelsArray.dfy", "root", false, "", "", false, "dafny-duck_tmp_tmplawbgxjo_p6_FilterVowelsArray.dfy", "// <vc-preamble>\nconst vowels: set<char> := {'a', 'e', 'i', 'o', 'u'}\n\nfunction FilterVowels(xs: seq<char>): seq<char>\n{\n    if |xs| == 0 then []\n    else if xs[|xs|-1] in vowels then FilterVowels(xs[..|xs|-1]) + [xs[|xs|-1]]\n    else FilterVowels(xs[..|xs|-1])\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod FilterVowelsArray(xs: array<char>) returns (ys: array<char>)\n    ensures fresh(ys)\n    ensures FilterVowels(xs[..]) == ys[..]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["veri-sparse_tmp_tmp15fywna6_dafny_spmv_SpMV.dfy", "root", false, "", "", false, "veri-sparse_tmp_tmp15fywna6_dafny_spmv_SpMV.dfy", "// <vc-preamble>\nfunction sum(X_val: array<int>, X_crd: array<nat>, v : array<int>, b : int, k : int) : (s : int)\n  reads X_val, X_crd, v\n  requires X_val.Length >= b >= 0\n  requires k <= X_val.Length\n  requires X_val.Length == X_crd.Length\n  requires forall i :: 0 <= i < X_crd.Length ==> 0 <= X_crd[i] < v.Length\n  decreases k - b\n  {\n    if k <= b then \n      0\n    else  sum(X_val, X_crd, v, b + 1, k) + X_val[b] * v[X_crd[b]]\n  }\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SpMV(X_val: array<int>, X_crd: array<nat>, X_pos: array<nat>, v : array<int>) returns (y : array<int>)\n  requires X_crd.Length >= 1 \n  requires X_crd.Length == X_val.Length;\n  requires forall i, j :: 0 <= i < j < X_pos.Length ==> X_pos[i] <= X_pos[j];\n  requires forall i :: 0 <= i < X_crd.Length ==> X_crd[i] < v.Length\n  requires forall i :: 0 <= i < X_pos.Length ==> X_pos[i] <= X_val.Length\n  requires X_pos.Length >= 1\n  ensures y.Length + 1 == X_pos.Length\n  ensures forall i :: 0 <= i < y.Length ==> y[i] == sum(X_val, X_crd, v, X_pos[i], X_pos[i + 1])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny-Exercises_tmp_tmpjm75muf__Session7Exercises_ExerciseBinarySearch_binarySearchRec.dfy", "root", true, "", "", false, "Dafny-Exercises_tmp_tmpjm75muf__Session7Exercises_ExerciseBinarySearch_binarySearchRec.dfy", "// <vc-preamble>\npredicate sorted(s : seq<int>) {\n    forall u, w :: 0 <= u < w < |s| ==> s[u] <= s[w]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod binarySearchRec(v:array<int>, elem:int, c:int, f:int) returns (p:int)\n requires sorted(v[0..v.Length])\n requires 0<=c<=f+1<=v.Length\n requires forall k::0<=k<c ==> v[k]<=elem\n requires forall k::f<k<v.Length ==> v[k]>elem\n decreases f-c\n ensures -1<=p<v.Length\n ensures (forall u::0<=u<=p ==> v[u]<=elem) && (forall w::p<w<v.Length ==> v[w]>elem)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "predicate sorted(s : seq<int>) {\n    forall u, w :: 0 <= u < w < |s| ==> s[u] <= s[w]\n}\n\n\n\n\n\n\n\n//Recursive binary search\n\n// <vc-helpers>\nlemma MidPointLessThan(v: array<int>, c: int, f: int, mid: int, elem: int)\n    requires sorted(v[0..v.Length])\n    requires 0 <= c <= mid <= f < v.Length\n    requires v[mid] <= elem\n    ensures forall k :: c <= k <= mid ==> v[k] <= elem\n{\n    forall k | c <= k <= mid\n        ensures v[k] <= elem\n    {\n        assert v[k] <= v[mid];\n    }\n}\n\nlemma MidPointGreaterThan(v: array<int>, c: int, f: int, mid: int, elem: int)\n    requires sorted(v[0..v.Length])\n    requires 0 <= c <= mid <= f < v.Length\n    requires v[mid] > elem\n    ensures forall k :: mid <= k <= f ==> v[k] > elem\n{\n    forall k | mid <= k <= f\n        ensures v[k] > elem\n    {\n        assert v[k] >= v[mid];\n    }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod binarySearchRec(v:array<int>, elem:int, c:int, f:int) returns (p:int)\n requires sorted(v[0..v.Length])\n requires 0<=c<=f+1<=v.Length//0<=c<=v.Length && -1<=f<v.Length && c<=f+1\n requires forall k::0<=k<c ==> v[k]<=elem\n requires forall k::f<k<v.Length ==> v[k]>elem\n decreases f-c\n ensures -1<=p<v.Length\n ensures (forall u::0<=u<=p ==> v[u]<=elem) && (forall w::p<w<v.Length ==> v[w]>elem)\n// </vc-spec>\n// <vc-code>\n{\n    if c > f {\n        return f;\n    } else {\n        var mid := (c + f) / 2;\n        if v[mid] <= elem {\n            MidPointLessThan(v, c, f, mid, elem);\n            var result := binarySearchRec(v, elem, mid+1, f);\n            return result;\n        } else {\n            MidPointGreaterThan(v, c, f, mid, elem);\n            var result := binarySearchRec(v, elem, c, mid-1);\n            return result;\n        }\n    }\n}\n// </vc-code>\n\n", "", "", ""], ["dafl_tmp_tmp_r3_8w3y_dafny_examples_uiowa_fibonacci_ComputeFib.dfy", "root", false, "", "", false, "dafl_tmp_tmp_r3_8w3y_dafny_examples_uiowa_fibonacci_ComputeFib.dfy", "// <vc-preamble>\nfunction fib(n: nat): nat\n  decreases n;\n{\n  if n == 0 then 0 \n  else if n == 1 then 1 \n  else fib(n - 1) + fib(n - 2)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ComputeFib(n: nat) returns (f: nat)\n  ensures f == fib(n);\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_261_ElementWiseDivision.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_261_ElementWiseDivision.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ElementWiseDivision(a: seq<int>, b: seq<int>) returns (result: seq<int>)\n    requires |a| == |b|\n    requires forall i :: 0 <= i < |b| ==> b[i] != 0\n    ensures |result| == |a|\n    ensures forall i :: 0 <= i < |result| ==> result[i] == a[i] / b[i]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_max_array_maxArray.dfy", "root", true, "", "", false, "Clover_max_array_maxArray.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod maxArray(a: array<int>) returns (m: int)\n  requires a.Length >= 1\n  ensures forall k :: 0 <= k < a.Length ==> m >= a[k]\n  ensures exists k :: 0 <= k < a.Length && m == a[k]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod maxArray(a: array<int>) returns (m: int)\n  requires a.Length >= 1\n  ensures forall k :: 0 <= k < a.Length ==> m >= a[k]\n  ensures exists k :: 0 <= k < a.Length && m == a[k]\n// </vc-spec>\n// <vc-code>\n{\n  m := a[0];\n  var i := 1;\n  while i < a.Length\n    invariant 1 <= i <= a.Length\n    invariant forall k :: 0 <= k < i ==> m >= a[k]\n    invariant exists k :: 0 <= k < i && m == a[k]\n  {\n    if a[i] > m {\n      m := a[i];\n    }\n    i := i + 1;\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["cs245-verification_tmp_tmp0h_nxhqp_SortingIssues_FirstAttempt_sort.dfy", "root", false, "", "", false, "cs245-verification_tmp_tmp0h_nxhqp_SortingIssues_FirstAttempt_sort.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod sort(A: array<int>, n: int)\nmodifies A; requires n==A.Length;\n  requires n>=0;            \n  ensures forall i,j:: 0<=i<=j<n ==> A[i]<=A[j];\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["bbfny_tmp_tmpw4m0jvl0_enjoying_FindMax.dfy", "root", false, "", "", false, "bbfny_tmp_tmpw4m0jvl0_enjoying_FindMax.dfy", "// <vc-preamble>\nfunction max(a: int, b: int): int\n{\n  if a > b then a else b\n}\nmethod Testing'()\n{\n  assume{:axiom} false;\n}\n\nfunction abs(x: int): int\n{\n  if x < 0 then -x else x\n}\n\nfunction fib(n: nat): nat\n{\n  if n == 0 then 0\n  else if n == 1 then 1\n  else fib(n - 1) + fib(n - 2)\n}\n\npredicate sorted(a: array<int>)\n  reads a\n{\n  forall j, k :: 0 <= j < k < a.Length ==> a[j] < a[k]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod FindMax(a: array<int>) returns (i: int)\n  requires a.Length >= 1 \n  ensures 0 <= i < a.Length\n  ensures forall k :: 0 <= k < a.Length ==> a[k] <= a[i]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_632_MoveZeroesToEnd.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_632_MoveZeroesToEnd.dfy", "// <vc-preamble>\nmethod swap(arr: array<int>, i: int, j: int)\n    requires arr.Length > 0\n    requires 0 <= i < arr.Length && 0 <= j < arr.Length\n    modifies arr\n    ensures arr[i] == old(arr[j]) && arr[j] == old(arr[i])\n    ensures forall k :: 0 <= k < arr.Length && k != i && k != j ==> arr[k] == old(arr[k])\n    ensures multiset(arr[..]) == multiset(old(arr[..]))\n{\n  assume{:axiom} false;\n}\n\nfunction count(arr: seq<int>, value: int) : (c: nat)\n    ensures c <= |arr|\n{\n    if |arr| == 0 then 0 else (if arr[0] == value then 1 else 0) + count(arr[1..], value)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod MoveZeroesToEnd(arr: array<int>)\n    requires arr.Length >= 2\n    modifies arr\n\n    ensures arr.Length == old(arr.Length)\n\n    ensures forall i, j :: 0 <= i < j < arr.Length && arr[i] == 0 ==> arr[j] == 0\n\n    ensures multiset(arr[..]) == multiset(old(arr[..]))\n\n    ensures forall n, m :: 0 <= n < m < arr.Length && old(arr[n]) != 0 && old(arr[m]) != 0 ==> \n            exists k, l :: 0 <= k < l < arr.Length && arr[k] == old(arr[n]) && arr[l] == old(arr[m])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_insert_insert.dfy", "root", true, "", "", false, "Clover_insert_insert.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod insert(line:array<char>, l:int, nl:array<char>, p:int, at:int)\n  requires 0 <= l+p <= line.Length\n  requires 0 <= p <= nl.Length\n  requires 0 <= at <= l\n  modifies line\n  ensures forall i :: (0<=i<p) ==> line[at+i] == nl[i]\n  ensures forall i :: (0<=i<at) ==> line[i] == old(line[i])\n  ensures forall i :: (at+p<=i<l+p) ==> line[i] == old(line[i-p])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod insert(line:array<char>, l:int, nl:array<char>, p:int, at:int)\n  requires 0 <= l+p <= line.Length\n  requires 0 <= p <= nl.Length\n  requires 0 <= at <= l\n  modifies line\n  ensures forall i :: (0<=i<p) ==> line[at+i] == nl[i]\n  ensures forall i :: (0<=i<at) ==> line[i] == old(line[i])\n  ensures forall i :: (at+p<=i<l+p) ==> line[i] == old(line[i-p])\n// </vc-spec>\n// <vc-code>\n{\n  var i := l - 1;\n  while (i >= at)\n    invariant at <= i+1\n    invariant i <= l-1\n    invariant forall j | i+1 <= j <= l-1 :: line[j+p] == old(line[j])\n    invariant forall j | at <= j <= i :: line[j] == old(line[j])\n    invariant forall j | 0 <= j < at :: line[j] == old(line[j])\n  {\n    line[i+p] := line[i];\n    i := i - 1;\n  }\n  \n  var j := 0;\n  while (j < p)\n    invariant 0 <= j <= p\n    invariant forall k | 0 <= k < at :: line[k] == old(line[k])\n    invariant forall k | at <= k < at+j :: line[k] == nl[k - at]\n    invariant forall k | at+p <= k < l+p :: line[k] == old(line[k - p])\n  {\n    line[at+j] := nl[j];\n    j := j + 1;\n  }\n}\n// </vc-code>\n\n", "", "", ""], ["Software-Verification_tmp_tmpv4ueky2d_Valid_Palindrome_valid_panlindrome_isPalindrome.dfy", "root", false, "", "", false, "Software-Verification_tmp_tmpv4ueky2d_Valid_Palindrome_valid_panlindrome_isPalindrome.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod isPalindrome(s: array<char>) returns (result: bool)\n    requires 1<= s.Length <= 200000\n    ensures result <==> (forall i:: 0 <= i < s.Length / 2 ==> s[i] == s[s.Length - 1 - i])\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_slope_search_SlopeSearch.dfy", "root", true, "", "", false, "Clover_slope_search_SlopeSearch.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SlopeSearch(a: array2<int>, key: int) returns (m:int, n:int)\n  requires forall i,j,j'::0<=i<a.Length0 && 0<=j<j'<a.Length1 ==> a[i,j]<=a[i,j']\n  requires forall i,i',j::0<=i<i'<a.Length0 && 0<=j<a.Length1 ==> a[i,j]<=a[i',j]\n  requires exists i,j :: 0<=i<a.Length0 && 0<=j<a.Length1 && a[i,j]==key\n  ensures 0<=m<a.Length0 && 0<=n<a.Length1\n  ensures a[m,n]==key\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\npredicate YoungTableau(a: array2<int>)\n  reads a\n{\n  (forall i,j,j' :: 0<=i<a.Length0 && 0<=j<j'<a.Length1 ==> a[i,j]<=a[i,j']) &&\n  (forall i,i',j :: 0<=i<i'<a.Length0 && 0<=j<a.Length1 ==> a[i,j]<=a[i',j])\n}\n\nlemma FindKeyInYoungTableau(a: array2<int>, key: int)\n  requires forall i,j,j'::0<=i<a.Length0 && 0<=j<j'<a.Length1 ==> a[i,j]<=a[i,j']\n  requires forall i,i',j::0<=i<i'<a.Length0 && 0<=j<a.Length1 ==> a[i,j]<=a[i',j]\n  requires exists i,j :: 0<=i<a.Length0 && 0<=j<a.Length1 && a[i,j]==key\n  ensures exists i,j :: 0<=i<a.Length0 && 0<=j<a.Length1 && a[i,j]==key\n{\n  // The lemma ensures that the existence of i,j in the method's precondition is maintained\n}\n// </vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SlopeSearch(a: array2<int>, key: int) returns (m:int, n:int)\n  requires forall i,j,j'::0<=i<a.Length0 && 0<=j<j'<a.Length1 ==> a[i,j]<=a[i,j']\n  requires forall i,i',j::0<=i<i'<a.Length0 && 0<=j<a.Length1 ==> a[i,j]<=a[i',j]\n  requires exists i,j :: 0<=i<a.Length0 && 0<=j<a.Length1 && a[i,j]==key\n  ensures 0<=m<a.Length0 && 0<=n<a.Length1\n  ensures a[m,n]==key\n// </vc-spec>\n// <vc-code>\n{\n  var i := 0;\n  var j := a.Length1 - 1;\n  while i < a.Length0 && 0 <= j\n    invariant 0<=i<=a.Length0\n    invariant 0<=j<a.Length1\n    invariant forall ii,jj :: 0<=ii<i && jj==j ==> a[ii,jj] < key\n    invariant forall ii,jj :: 0<=ii<a.Length0 && j<jj<a.Length1 ==> a[ii,jj] > key\n  {\n    if a[i,j] == key {\n      return (i, j);\n    } else if a[i,j] < key {\n      i := i + 1;\n    } else {\n      j := j - 1;\n    }\n  }\n  assert false;\n}\n// </vc-code>\n\n", "", "", ""], ["MIEIC_mfes_tmp_tmpq3ho7nve_exams_mt2_19_p4_calcR.dfy", "root", true, "", "", false, "MIEIC_mfes_tmp_tmpq3ho7nve_exams_mt2_19_p4_calcR.dfy", "// <vc-preamble>\nfunction R(n: nat): nat {\n    if n == 0 then 0 else if R(n-1) > n then R(n-1) - n else R(n-1) + n\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod calcR(n: nat) returns (r: nat)\n    ensures r == R(n)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "function R(n: nat): nat {\n    if n == 0 then 0 else if R(n-1) > n then R(n-1) - n else R(n-1) + n\n}\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod calcR(n: nat) returns (r: nat)\n    ensures r == R(n)\n// </vc-spec>\n// <vc-code>\n{\n    if n == 0 {\n        return 0;\n    }\n    var a := new nat[n+1];\n    a[0] := 0;\n    for i := 1 to n+1\n        invariant forall j :: 0 <= j < i ==> a[j] == R(j)\n    {\n        var prev := a[i-1];\n        if prev > i {\n            a[i] := prev - i;\n        } else {\n            a[i] := prev + i;\n        }\n    }\n    return a[n];\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_238_CountNonEmptySubstrings.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_238_CountNonEmptySubstrings.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod CountNonEmptySubstrings(s: string) returns (count: int)\n    ensures count >= 0\n    ensures count == (|s| * (|s| + 1)) / 2\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_algorithms_and_leetcode_ProgramProofs_ch15_Partition.dfy", "root", false, "", "", false, "Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_algorithms_and_leetcode_ProgramProofs_ch15_Partition.dfy", "// <vc-preamble>\npredicate SplitPoint(a: array<int>, n: int)\n    reads a\n    requires 0 <= n <= n\n\n{\n    forall i,j :: 0 <= i < n <= j < a.Length ==> a[i] <= a[j]\n}\n\ntwostate predicate SwapFrame(a: array<int>, lo: int, hi: int)\n    requires 0 <= lo <= hi <= a.Length\n    reads a\n{\n    (forall i :: 0 <= i < lo || hi <= i < a.Length ==> a[i] == old(a[i])) && multiset(a[..]) == old(multiset(a[..]))\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Partition(a: array<int>, lo: int, hi: int) returns (p: int)\n    requires 0 <= lo < hi <= a.Length\n    requires SplitPoint(a, lo) && SplitPoint(a, hi)\n    modifies a\n    ensures lo <= p < hi\n    ensures forall i :: lo <= i < p ==> a[i] < a[p]\n    ensures forall i :: p <= i < hi ==> a[p] <= a[i]\n    ensures SplitPoint(a, lo) && SplitPoint(a, hi)\n    ensures SwapFrame(a, lo, hi)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_760_HasOnlyOneDistinctElement.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_760_HasOnlyOneDistinctElement.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod HasOnlyOneDistinctElement(a: array<int>) returns (result: bool)\n    requires a != null\n    ensures result ==> forall i, j :: 0 <= i < a.Length && 0 <= j < a.Length ==> a[i] == a[j]\n    ensures !result ==> exists i, j :: 0 <= i < a.Length && 0 <= j < a.Length && a[i] != a[j]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_triple3_Triple.dfy", "root", true, "", "", false, "Clover_triple3_Triple.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Triple (x:int) returns (r:int)\n  ensures r==3*x\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod Triple (x:int) returns (r:int)\n  ensures r==3*x\n// </vc-spec>\n// <vc-code>\n{\n  return 3*x;\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_113_IsInteger.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_113_IsInteger.dfy", "// <vc-preamble>\npredicate IsDigit(c: char)\n{\n    48 <= c as int <= 57\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod IsInteger(s: string) returns (result: bool)\n    ensures result <==> (|s| > 0) && (forall i :: 0 <= i < |s| ==> IsDigit(s[i]))\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny_Programs_tmp_tmp99966ew4_binary_search_BinarySearch.dfy", "root", true, "", "", false, "Dafny_Programs_tmp_tmp99966ew4_binary_search_BinarySearch.dfy", "// <vc-preamble>\npredicate sorted(a: array<int>)\n   requires a != null\n   reads a\n{\n   forall j, k :: 0 <= j < k < a.Length ==> a[j] <= a[k]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod BinarySearch(a: array<int>, value: int) returns (index: int)\n   requires a != null && 0 <= a.Length && sorted(a)\n   ensures 0 <= index ==> index < a.Length && a[index] == value\n   ensures index < 0 ==> forall k :: 0 <= k < a.Length ==> a[k] != value\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "predicate sorted(a: array<int>)\n   requires a != null\n   reads a\n{\n   forall j, k :: 0 <= j < k < a.Length ==> a[j] <= a[k]\n}\n\n// <vc-helpers>\n// </vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod BinarySearch(a: array<int>, value: int) returns (index: int)\n   requires a != null && 0 <= a.Length && sorted(a)\n   ensures 0 <= index ==> index < a.Length && a[index] == value\n   ensures index < 0 ==> forall k :: 0 <= k < a.Length ==> a[k] != value\n// </vc-spec>\n// <vc-code>\n{\n  var low := 0;\n  var high := a.Length - 1;\n  while low <= high\n    invariant 0 <= low <= high+1 <= a.Length\n    invariant forall k :: 0 <= k < low ==> a[k] != value\n    invariant forall k :: high < k < a.Length ==> a[k] != value\n  {\n    var mid := (low + high) / 2;\n    if a[mid] == value {\n      return mid;\n    } else if a[mid] < value {\n      low := mid + 1;\n    } else {\n      high := mid - 1;\n    }\n  }\n  return -1;\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_161_RemoveElements.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_161_RemoveElements.dfy", "// <vc-preamble>\npredicate InArray(a: array<int>, x: int)\n    reads a\n{\n    exists i :: 0 <= i < a.Length && a[i] == x\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod RemoveElements(a: array<int>, b: array<int>) returns (result: seq<int>)\n\n    ensures forall x :: x in result ==> InArray(a, x) && !InArray(b, x)\n\n    ensures forall i, j :: 0 <= i < j < |result| ==> result[i] != result[j]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["cmsc433_tmp_tmpe3ob3a0o_dafny_project1_p1-assignment-2_Euclid.dfy", "root", false, "", "", false, "cmsc433_tmp_tmpe3ob3a0o_dafny_project1_p1-assignment-2_Euclid.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Euclid (m : int, n : int) returns (gcd : int)\n    requires m > 1 && n > 1 && m >= n\n    ensures gcd > 0 && gcd <= n && gcd <= m && m % gcd == 0 && n % gcd == 0\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-language-server_tmp_tmpkir0kenl_Test_tutorial_maximum_Maximum.dfy", "root", false, "", "", false, "dafny-language-server_tmp_tmpkir0kenl_Test_tutorial_maximum_Maximum.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod Maximum(values: seq<int>) returns (max: int)\n  requires values != []\n  ensures max in values\n  ensures forall i | 0 <= i < |values| :: values[i] <= max\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_126_SumOfCommonDivisors.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_126_SumOfCommonDivisors.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod SumOfCommonDivisors(a: int, b: int) returns (sum: int)\n    requires a > 0 && b > 0\n    ensures sum >= 0\n    ensures forall d :: 1 <= d <= a && 1 <= d <= b && a % d == 0 && b % d == 0 ==> sum >= d\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["dafny-synthesis_task_id_106_AppendArrayToSeq.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_106_AppendArrayToSeq.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod AppendArrayToSeq(s: seq<int>, a: array<int>) returns (r: seq<int>)\n    requires a != null\n    ensures |r| == |s| + a.Length\n    ensures forall i :: 0 <= i < |s| ==> r[i] == s[i]\n    ensures forall i :: 0 <= i < a.Length ==> r[|s| + i] == a[i]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_algorithms_and_leetcode_leetcode_validAnagram_isAnagram.dfy", "root", false, "", "", false, "Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_algorithms_and_leetcode_leetcode_validAnagram_isAnagram.dfy", "// <vc-preamble>\nmethod toMultiset(s: string) returns (mset: multiset<char>)\n    ensures multiset(s) == mset\n{\n  assume{:axiom} false;\n}\n\nmethod msetEqual(s: multiset<char>, t: multiset<char>) returns (equal: bool)\n    ensures s == t <==> equal\n{\n  assume{:axiom} false;\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod isAnagram(s: string, t: string) returns (equal: bool)\n    ensures (multiset(s) == multiset(t)) == equal\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["AssertivePrograming_tmp_tmpwf43uz0e_MergeSort_MergeLoop.dfy", "root", true, "", "", false, "AssertivePrograming_tmp_tmpwf43uz0e_MergeSort_MergeLoop.dfy", "// <vc-preamble>\npredicate Sorted(q: seq<int>) {\n    forall i,j :: 0 <= i <= j < |q| ==> q[i] <= q[j]\n}\n\nghost predicate Inv(a: seq<int>, a1: seq<int>, a2: seq<int>, i: nat, mid: nat){\n    (i <= |a1|) && (i <= |a2|) && (i+mid <= |a|) &&\n    (a1[..i] == a[..i]) && (a2[..i] == a[mid..(i+mid)])\n}\n\nghost predicate InvSorted(b: seq<int>, c: seq<int>, d: seq<int>, i: nat, j: nat){\n    i <= |c| && j <= |d| && i + j <= |b| &&\n    ((i+j > 0 && i < |c|) ==> (b[j + i - 1] <= c[i])) &&\n    ((i+j > 0 && j < |d|) ==> (b[j + i - 1] <= d[j])) &&\n    Sorted(b[..i+j])\n    }\n\nghost predicate InvSubSet(b: seq<int>, c: seq<int>, d: seq<int>, i: nat, j: nat){\n    i <= |c| && j <= |d| && i + j <= |b| &&\n    multiset(b[..i+j]) == multiset(c[..i]) + multiset(d[..j])\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod MergeLoop(b: array<int>, c: array<int>, d: array<int>,i0: nat , j0: nat)  returns (i: nat, j: nat)\n        requires b != c && b != d && b.Length == c.Length + d.Length\n        requires Sorted(c[..]) && Sorted(d[..])\n        requires i0 <= c.Length && j0 <= d.Length && i0 + j0 <= b.Length\n        requires InvSubSet(b[..],c[..],d[..],i0,j0)\n        requires InvSorted(b[..],c[..],d[..],i0,j0)\n        requires i0 + j0 < b.Length\n\n        modifies b\n\n        ensures i <= c.Length && j <= d.Length && i + j <= b.Length\n        ensures InvSubSet(b[..],c[..],d[..],i,j)\n        ensures InvSorted(b[..],c[..],d[..],i,j)\n\n        ensures 0 <= c.Length - i < c.Length - i0 || (c.Length - i == c.Length - i0 && 0 <= d.Length - j < d.Length - j0)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "// Noa Leron 207131871\n// Tsuri Farhana 315016907\n\n\n\n\npredicate Sorted(q: seq<int>) {\n    forall i,j :: 0 <= i <= j < |q| ==> q[i] <= q[j]\n}\n\n/*\nGoal: Implement the well known merge sort algorithm in O(a.Length X log_2(a.Length)) time, recursively.\n\n- Divide the contents of the original array into two local arrays\n- After sorting the local arrays (recursively), merge the contents of the two returned arrays using the Merge method (see below)\n- DO NOT modify the specification or any other part of the method's signature\n- DO NOT introduce any further methods\n*/\n\nghost predicate Inv(a: seq<int>, a1: seq<int>, a2: seq<int>, i: nat, mid: nat){\n    (i <= |a1|) && (i <= |a2|) && (i+mid <= |a|) &&\n    (a1[..i] == a[..i]) && (a2[..i] == a[mid..(i+mid)])\n}\n\n\n/*\nGoal: Implement iteratively, correctly, efficiently, clearly\n\nDO NOT modify the specification or any other part of the method's signature\n*/\n\n\n//This is a method that replace the loop body\n\n//Loop invariant - b is sprted so far and the next two potential values that will go into b are bigger then the biggest value in b.\nghost predicate InvSorted(b: seq<int>, c: seq<int>, d: seq<int>, i: nat, j: nat){\n    i <= |c| && j <= |d| && i + j <= |b| &&\n    ((i+j > 0 && i < |c|) ==> (b[j + i - 1] <= c[i])) &&\n    ((i+j > 0 && j < |d|) ==> (b[j + i - 1] <= d[j])) &&\n    Sorted(b[..i+j])\n    }\n\n\n//Loop invariant - the multiset of the prefix of b so far is the same multiset as the prefixes of c and d so far.\nghost predicate InvSubSet(b: seq<int>, c: seq<int>, d: seq<int>, i: nat, j: nat){\n    i <= |c| && j <= |d| && i + j <= |b| &&\n    multiset(b[..i+j]) == multiset(c[..i]) + multiset(d[..j])\n}\n\n//This lemma helps dafny see that if the prefixs of arrays are the same multiset until the end of the arrays,\n//all the arrays are the same multiset.\n\n\n//This lemma helps dafny see that after adding the next value from c to b the prefixes are still the same subsets.\n\n// <vc-helpers>\nlemma lemma_AddMultiset<T(!new)>(b: seq<T>, c: seq<T>, d: seq<T>, i: nat, j: nat, v: T)\n    requires i < |c| && j <= |d| && i+j < |b|\n    requires multiset(b[..i+j]) == multiset(c[..i]) + multiset(d[..j])\n    requires v == c[i]\n    requires b[i+j] == v\n    ensures multiset(b[..i+j+1]) == multiset(c[..i+1]) + multiset(d[..j])\n{\n    calc {\n        multiset(b[..i+j+1]);\n        multiset(b[..i+j]) + multiset([b[i+j]]);\n        { assert b[i+j] == v; }\n        multiset(b[..i+j]) + multiset([v]);\n        { assert v == c[i]; }\n        multiset(c[..i]) + multiset(d[..j]) + multiset([c[i]]);\n        multiset(c[..i+1]) + multiset(d[..j]);\n    }\n}\n\nlemma lemma_AddMultisetD<T(!new)>(b: seq<T>, c: seq<T>, d: seq<T>, i: nat, j: nat, v: T)\n    requires i <= |c| && j < |d| && i+j < |b|\n    requires multiset(b[..i+j]) == multiset(c[..i]) + multiset(d[..j])\n    requires v == d[j]\n    requires b[i+j] == v\n    ensures multiset(b[..i+j+1]) == multiset(c[..i]) + multiset(d[..j+1])\n{\n    calc {\n        multiset(b[..i+j+1]);\n        multiset(b[..i+j]) + multiset([b[i+j]]);\n        { assert b[i+j] == v; }\n        multiset(b[..i+j]) + multiset([v]);\n        { assert v == d[j]; }\n        multiset(c[..i]) + multiset(d[..j]) + multiset([d[j]]);\n        multiset(c[..i]) + multiset(d[..j+1]);\n    }\n}\n\nlemma lemma_ExtendSorted(s: seq<int>, x: int)\n    requires Sorted(s)\n    requires |s| == 0 || s[|s|-1] <= x\n    ensures Sorted(s + [x])\n{\n    if |s| == 0 {\n        forall i,j | 0<=i<=j<1 {\n            assert i == 0 && j == 0;\n            assert x == x;\n        }\n    } else {\n        var t := s + [x];\n        forall i,j | 0<=i<=j<|t|\n        ensures t[i] <= t[j]\n        {\n            if j < |s| {\n                assert s[i] <= s[j];\n            } else {\n                assert j == |s|;\n                if i < |s| {\n                    calc {\n                        t[i];\n                        s[i];\n                        <= s[|s|-1];   // by sortedness of s since i <= |s|-1\n                        <= x;            // by requirement\n                        t[j];\n                    }\n                } else {\n                    assert i == |s|;\n                    assert t[i] == x && t[j] == x;\n                }\n            }\n        }\n    }\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod MergeLoop(b: array<int>, c: array<int>, d: array<int>,i0: nat , j0: nat)  returns (i: nat, j: nat)\n        requires b != c && b != d && b.Length == c.Length + d.Length\n        requires Sorted(c[..]) && Sorted(d[..])\n        requires i0 <= c.Length && j0 <= d.Length && i0 + j0 <= b.Length\n        requires InvSubSet(b[..],c[..],d[..],i0,j0)\n        requires InvSorted(b[..],c[..],d[..],i0,j0)\n        requires i0 + j0 < b.Length\n\n        modifies b\n\n        ensures i <= c.Length && j <= d.Length && i + j <= b.Length\n        ensures InvSubSet(b[..],c[..],d[..],i,j)\n        ensures InvSorted(b[..],c[..],d[..],i,j)\n        //decreases ensures\n        ensures 0 <= c.Length - i < c.Length - i0 || (c.Length - i == c.Length - i0 && 0 <= d.Length - j < d.Length - j0)\n// </vc-spec>\n// <vc-code>\n{\n    i := i0;\n    j := j0;\n\n    while i + j < b.Length\n        invariant i <= c.Length && j <= d.Length && i+j <= b.Length\n        invariant InvSubSet(b[..], c[..], d[..], i, j)\n        invariant InvSorted(b[..], c[..], d[..], i, j)\n        decreases c.Length - i, d.Length - j\n    {\n        if i < c.Length && (j >= d.Length || c[i] <= d[j]) {\n            b[i+j] := c[i];\n            lemma_AddMultiset(b[..], c[..], d[..], i, j, c[i]);\n            lemma_ExtendSorted(b[..i+j], c[i]);\n            i := i + 1;\n        } else {\n            b[i+j] := d[j];\n            lemma_AddMultisetD(b[..], c[..], d[..], i, j, d[j]);\n            lemma_ExtendSorted(b[..i+j], d[j]);\n            j := j + 1;\n        }\n    }\n}\n// </vc-code>\n\n", "", "", ""], ["cs245-verification_tmp_tmp0h_nxhqp_A8_Q1_A8Q1.dfy", "root", false, "", "", false, "cs245-verification_tmp_tmp0h_nxhqp_A8_Q1_A8Q1.dfy", "// <vc-preamble>\nfunction power(a: int, n: int): int\n  requires 0 <= n;\n  decreases n;\n  {\n    if (n == 0) then 1 else a * power(a, n - 1)\n  }\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod A8Q1(y0: int, x: int) returns (z: int)\nrequires y0 >= 0\nensures z==power(x,y0)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny_Learning_Experience_tmp_tmpuxvcet_u_week1_7_A2_Q1_trimmed_copy_-_\u526f\u672c_FooCount.dfy", "root", false, "", "", false, "Dafny_Learning_Experience_tmp_tmpuxvcet_u_week1_7_A2_Q1_trimmed_copy_-_\u526f\u672c_FooCount.dfy", "// <vc-preamble>\nghost function Count(hi: nat, s:seq<int>): int\n    requires 0 <= hi <= |s|\n    decreases hi\n{\n    if hi == 0 then 0\n    else if s[hi-1]%2 == 0 then 1 + Count(hi-1, s) else Count(hi-1, s)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod FooCount(CountIndex:nat, a:seq<int>,b:array<int>) returns (p:nat)\n    requires  CountIndex == 0 || (|a| == b.Length && 1 <= CountIndex <= |a|)\n    decreases CountIndex\n    modifies b\n    ensures p == Count(CountIndex,a)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["assertive-programming-assignment-1_tmp_tmp3h_cj44u_FindRange_BinarySearch.dfy", "root", false, "", "", false, "assertive-programming-assignment-1_tmp_tmp3h_cj44u_FindRange_BinarySearch.dfy", "// <vc-preamble>\npredicate Sorted(q: seq<int>)\n{\n    forall i,j :: 0 <= i <= j < |q| ==> q[i] <= q[j] \n}\n\npredicate RangeSatisfiesComparer(q: seq<int>, key: int, lowerBound: nat, upperBound: nat, comparer: (int, int) -> bool)\n    requires 0 <= lowerBound <= upperBound <= |q|\n{\n    forall i :: lowerBound <= i < upperBound ==> comparer(q[i], key)\n}\n\npredicate RangeSatisfiesComparerNegation(q: seq<int>, key: int, lowerBound: nat, upperBound: nat, comparer: (int, int) -> bool)\n    requires 0 <= lowerBound <= upperBound <= |q|\n{\n    RangeSatisfiesComparer(q, key, lowerBound, upperBound, (n1, n2) => !comparer(n1, n2))\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod BinarySearch(q: seq<int>, key: int, lowerBound: nat, upperBound: nat, comparer: (int, int) -> bool) returns (index: nat)\n    requires Sorted(q)\n    requires 0 <= lowerBound <= upperBound <= |q|\n    requires RangeSatisfiesComparerNegation(q, key, 0, lowerBound, comparer)\n    requires RangeSatisfiesComparer(q, key, upperBound, |q|, comparer)\n\n    requires\n        (forall n1, n2 :: comparer(n1, n2) == (n1 >  n2)) ||\n        (forall n1, n2 :: comparer(n1, n2) == (n1 >= n2))\n\n    ensures lowerBound <= index <= upperBound\n    ensures RangeSatisfiesComparerNegation(q, key, 0, index, comparer)\n    ensures RangeSatisfiesComparer(q, key, index, |q|, comparer)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Formal-Verification_tmp_tmpuyt21wjt_Dafny_strings1_maxCommonSubstringLength.dfy", "root", true, "", "", false, "Formal-Verification_tmp_tmpuyt21wjt_Dafny_strings1_maxCommonSubstringLength.dfy", "// <vc-preamble>\npredicate isNotPrefixPred(pre:string, str:string)\n{\n    (|pre| > |str|) || \n    pre != str[..|pre|]\n}\n\nmethod isPrefix(pre: string, str: string) returns (res:bool)\n    ensures !res <==> isNotPrefixPred(pre,str)\n    ensures  res <==> isPrefixPredicate(pre,str)\n{\n  assume{:axiom} false;\n}\n\npredicate isPrefixPredicate(pre: string, str:string)\n{\n  |str| >= |pre| && pre <= str\n}\n\npredicate isSubstringPredicate (sub: string, str:string)\n{\n  |str| >= |sub| && (exists i :: 0 <= i <= |str| && isPrefixPredicate(sub, str[i..]))\n}\n\nmethod isSubstring(sub: string, str: string) returns (res:bool)\nensures res == isSubstringPredicate(sub, str)\n{\n  assume{:axiom} false;\n}\n\npredicate haveCommonKSubstringPredicate(k: nat, str1: string, str2: string)\n{\n  |str1| >= k && |str2| >= k && (exists i :: 0 <= i <= |str1| - k && isSubstringPredicate((str1[i..])[..k], str2))\n}\n\nmethod haveCommonKSubstring(k: nat, str1: string, str2: string) returns (found: bool)\n  ensures |str1| < k || |str2| < k ==> !found\n  ensures haveCommonKSubstringPredicate(k,str1,str2) == found\n{\n  assume{:axiom} false;\n}\n\npredicate maxCommonSubstringPredicate(str1: string, str2: string, len:nat)\n{\n   forall k :: len < k <= |str1| ==> !haveCommonKSubstringPredicate(k, str1, str2)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod maxCommonSubstringLength(str1: string, str2: string) returns (len:nat)\nensures len <= |str1| && len <= |str2|\nensures len >= 0\nensures maxCommonSubstringPredicate(str1, str2, len)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "predicate isNotPrefixPred(pre:string, str:string)\n{\n    (|pre| > |str|) || \n    pre != str[..|pre|]\n}\n\n\nmethod isPrefix(pre: string, str: string) returns (res:bool)\n    ensures !res <==> isNotPrefixPred(pre,str)\n    ensures  res <==> isPrefixPredicate(pre,str)\n{\n  assume{:axiom} false;\n}\n\n\n\npredicate isPrefixPredicate(pre: string, str:string)\n{\n  |str| >= |pre| && pre <= str\n}\n\n\npredicate isSubstringPredicate (sub: string, str:string)\n{\n  |str| >= |sub| && (exists i :: 0 <= i <= |str| && isPrefixPredicate(sub, str[i..]))\n}\n\nmethod isSubstring(sub: string, str: string) returns (res:bool)\nensures res == isSubstringPredicate(sub, str)\n{\n  assume{:axiom} false;\n}\n\npredicate haveCommonKSubstringPredicate(k: nat, str1: string, str2: string)\n{\n  |str1| >= k && |str2| >= k && (exists i :: 0 <= i <= |str1| - k && isSubstringPredicate((str1[i..])[..k], str2))\n}\n\n\nmethod haveCommonKSubstring(k: nat, str1: string, str2: string) returns (found: bool)\n  ensures |str1| < k || |str2| < k ==> !found\n  ensures haveCommonKSubstringPredicate(k,str1,str2) == found\n{\n  assume{:axiom} false;\n}\n\n\npredicate maxCommonSubstringPredicate(str1: string, str2: string, len:nat)\n{\n   forall k :: len < k <= |str1| ==> !haveCommonKSubstringPredicate(k, str1, str2)\n}\n\n// <vc-helpers>\nlemma isPrefixLemma(pre: string, str: string)\n  ensures isPrefixPredicate(pre, str) <==> (|str| >= |pre| && pre == str[..|pre|])\n{\n  calc {\n    isPrefixPredicate(pre, str);\n  ==  { assert pre == str[..|pre|] <==> pre <= str && (str[..|pre|] <= pre || |pre| == |str|); }\n    |str| >= |pre| && pre <= str;\n  ==  { assert |str| >= |pre|; }\n    |str| >= |pre| && (pre <= str && |pre| <= |str|);\n  ==  { assert pre <= str && |pre| <= |str| <==> pre == str[..|pre|]; }\n    |str| >= |pre| && pre == str[..|pre|];\n  }\n}\n\nlemma isPrefixImpliesSubstring(sub: string, str: string)\n  requires isPrefixPredicate(sub, str)\n  ensures isSubstringPredicate(sub, str)\n{\n  calc {\n    isSubstringPredicate(sub, str);\n  ==  { reveal isSubstringPredicate(); }\n    |str| >= |sub| && (exists i :: 0 <= i <= |str| && isPrefixPredicate(sub, str[i..]));\n  ==  { assert |str| >= |sub|; }\n    |str| >= |sub| && isPrefixPredicate(sub, str[0..]);\n  ==  { assert str[0..] == str; }\n    |str| >= |sub| && isPrefixPredicate(sub, str);\n  ==  { assert isPrefixPredicate(sub, str); }\n    true;\n  }\n}\n\nmethod isSubstringImpl(sub: string, str: string) returns (res:bool)\n  ensures res == isSubstringPredicate(sub, str)\n{\n  if |sub| > |str| {\n    return false;\n  }\n  var i := 0;\n  while i <= |str| - |sub|\n    invariant 0 <= i <= |str| - |sub| + 1\n    invariant forall j :: 0 <= j < i ==> !isPrefixPredicate(sub, str[j..])\n  {\n    if isPrefixPredicate(sub, str[i..]) {\n      return true;\n    }\n    i := i + 1;\n  }\n  return false;\n}\n\nmethod haveCommonKSubstringImpl(k: nat, str1: string, str2: string) returns (found: bool)\n  ensures |str1| < k || |str2| < k ==> !found\n  ensures haveCommonKSubstringPredicate(k,str1,str2) == found\n{\n  if |str1| < k || |str2| < k {\n    return false;\n  }\n  var i := 0;\n  while i <= |str1| - k\n    invariant 0 <= i <= |str1| - k + 1\n    invariant forall j :: 0 <= j < i ==> !isSubstringPredicate((str1[j..])[..k], str2)\n  {\n    var substr := (str1[i..])[..k];\n    if isSubstringImpl(substr, str2) {\n      return true;\n    }\n    i := i + 1;\n  }\n  return false;\n}\n// </vc-helpers>\n\n// <vc-spec>\nmethod maxCommonSubstringLength(str1: string, str2: string) returns (len:nat)\nensures len <= |str1| && len <= |str2|\nensures len >= 0\nensures maxCommonSubstringPredicate(str1, str2, len)\n// </vc-spec>\n// <vc-code>\n{\n  if |str1| == 0 || |str2| == 0 {\n    return 0;\n  }\n  var k := 0;\n  var lo := 0;\n  var hi := if |str1| < |str2| then |str1| else |str2|;\n  while lo <= hi\n    invariant 0 <= lo <= hi + 1 <= |str1| + 1 && lo <= |str2| + 1\n    invariant forall j :: lo <= j <= hi ==> haveCommonKSubstringPredicate(j, str1, str2) <==> j <= k\n    invariant forall j :: 0 <= j < lo ==> !haveCommonKSubstringPredicate(j, str1, str2)\n    invariant forall j :: hi < j <= |str1| ==> !haveCommonKSubstringPredicate(j, str1, str2)\n  {\n    if lo == hi {\n      if haveCommonKSubstringImpl(lo, str1, str2) {\n        k := lo;\n        lo := lo + 1;\n      } else {\n        hi := hi - 1;\n      }\n    } else {\n      var mid := (lo + hi) / 2;\n      if haveCommonKSubstringImpl(mid, str1, str2) {\n        k := mid;\n        lo := mid + 1;\n      } else {\n        hi := mid - 1;\n      }\n    }\n  }\n  return k;\n}\n// </vc-code>\n\n", "", "", ""], ["Dafny_Verify_tmp_tmphq7j0row_Generated_Code_ComputePower_ComputePower.dfy", "root", true, "", "", false, "Dafny_Verify_tmp_tmphq7j0row_Generated_Code_ComputePower_ComputePower.dfy", "// <vc-preamble>\nfunction Power(n: nat): nat {\n    if n == 0 then 1 else 2 * Power(n - 1)\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod ComputePower(n: nat) returns (p: nat)\n    ensures p == Power(n)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "function Power(n: nat): nat {\n    if n == 0 then 1 else 2 * Power(n - 1)\n}\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod ComputePower(n: nat) returns (p: nat)\n    ensures p == Power(n)\n// </vc-spec>\n// <vc-code>\n{\n  var i: nat := 0;\n  var result: nat := 1;\n  while i < n\n    invariant result == Power(i)\n    invariant i <= n\n  {\n    result := result * 2;\n    i := i + 1;\n  }\n  return result;\n}\n// </vc-code>\n\n", "", "", ""], ["SENG2011_tmp_tmpgk5jq85q_ass2_ex1_StringSwap.dfy", "root", false, "", "", false, "SENG2011_tmp_tmpgk5jq85q_ass2_ex1_StringSwap.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod StringSwap(s: string, i:nat, j:nat) returns (t: string)\nrequires i >= 0 && j >= 0 && |s| >= 0;\nrequires |s| > 0 ==> i < |s| && j < |s|;\nensures multiset(s[..]) == multiset(t[..]);\nensures |s| == |t|;\nensures |s| > 0 ==> forall k:nat :: k != i && k != j && k < |s| ==> t[k] == s[k]\nensures |s| > 0 ==> t[i] == s[j] && t[j] == s[i];\nensures |s| == 0 ==> t == s;\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Clover_multi_return_MultipleReturns.dfy", "root", true, "", "", false, "Clover_multi_return_MultipleReturns.dfy", "// <vc-preamble>\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod MultipleReturns(x: int, y: int) returns (more: int, less: int)\n  ensures more == x+y\n  ensures less == x-y\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod MultipleReturns(x: int, y: int) returns (more: int, less: int)\n  ensures more == x+y\n  ensures less == x-y\n// </vc-spec>\n// <vc-code>\n{\n    return x+y, x-y;\n}\n// </vc-code>\n\n", "", "", ""], ["dafny-synthesis_task_id_790_IsEvenAtIndexEven.dfy", "root", false, "", "", false, "dafny-synthesis_task_id_790_IsEvenAtIndexEven.dfy", "// <vc-preamble>\npredicate IsEven(n: int)\n{\n    n % 2 == 0\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod IsEvenAtIndexEven(lst: seq<int>) returns (result: bool)\n    ensures result <==> forall i :: 0 <= i < |lst| ==> (IsEven(i) ==> IsEven(lst[i]))\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Software-Verification_tmp_tmpv4ueky2d_Contains_Duplicate_contains_duplicate_contains_duplicate.dfy", "root", false, "", "", false, "Software-Verification_tmp_tmpv4ueky2d_Contains_Duplicate_contains_duplicate_contains_duplicate.dfy", "// <vc-preamble>\npredicate distinct(nums: seq<int>) {\n    forall i, j :: 0 <= i < j < |nums| ==> nums[i] != nums[j]\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod contains_duplicate(nums: seq<int>) returns (result: bool)\n    requires 1 <= |nums| <= 100000\n    requires forall i :: 0 <= i < |nums| ==> -1000000000 <= nums[i] <= 1000000000\n    ensures result <==> distinct(nums)\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "", "", "", ""], ["Dafny_tmp_tmpv_d3qi10_2_min_minArray.dfy", "root", true, "", "", false, "Dafny_tmp_tmpv_d3qi10_2_min_minArray.dfy", "// <vc-preamble>\nfunction min(a: int, b: int): int\n    ensures min(a, b) <= a && min(a, b) <= b\n    ensures min(a, b) == a || min(a, b) == b\n{\n    if a < b then a else b\n}\n\nghost function minFunction(a: int, b: int): int\n    ensures minFunction(a, b) <= a && minFunction(a, b) <= b\n    ensures minFunction(a, b) == a || minFunction(a, b) == b\n{\n    if a < b then a else b\n}\n// </vc-preamble>\n\n// <vc-helpers>\n// </vc-helpers>\n\n// <vc-spec>\nmethod minArray(a: array<int>) returns (m: int)\n    requires a!= null  && a.Length > 0 \n    ensures forall k | 0 <= k < a.Length :: m <= a[k]\n    ensures exists k | 0 <= k < a.Length :: m == a[k]\n// </vc-spec>\n// <vc-code>\n{\n  assume {:axiom} false;\n}\n// </vc-code>\n", "function min(a: int, b: int): int\n    ensures min(a, b) <= a && min(a, b) <= b\n    ensures min(a, b) == a || min(a, b) == b\n{\n    if a < b then a else b\n}\n\n\nghost function minFunction(a: int, b: int): int\n    ensures minFunction(a, b) <= a && minFunction(a, b) <= b\n    ensures minFunction(a, b) == a || minFunction(a, b) == b\n{\n    if a < b then a else b\n}\n\n\n// Return a minimum of a.\n\n// <vc-helpers>\n\n// </vc-helpers>\n\n// <vc-spec>\nmethod minArray(a: array<int>) returns (m: int)\n    requires a!= null  && a.Length > 0 \n    ensures forall k | 0 <= k < a.Length :: m <= a[k]\n    ensures exists k | 0 <= k < a.Length :: m == a[k]\n// </vc-spec>\n// <vc-code>\n{\n    m := a[0];\n    var i := 1;\n    while i < a.Length\n        invariant 0 < i <= a.Length\n        invariant forall k | 0 <= k < i :: m <= a[k]\n        invariant exists k | 0 <= k < i :: m == a[k]\n    {\n        m := min(m, a[i]);\n        i := i + 1;\n    }\n}\n// </vc-code>\n\n", "", "", ""]]}