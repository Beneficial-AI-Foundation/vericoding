vc-preamble: |-
  predicate IsSorted(s:seq<int>)
  {
    forall i :: 0 <= i < |s|-1 ==> s[i] <= s[i+1]
  }

  predicate SortSpec(input:seq<int>, output:seq<int>)
  {
    && IsSorted(output)
    && multiset(output) == multiset(input)
  }

  //lemma SequenceConcat(s:seq<int>, pivot:int)
  //  requires 0<=pivot<|s|
  //  ensures s[..pivot] + s[pivot..] == s
  //{
  //}

vc-helpers: |-
  // <vc-helpers>
  // </vc-helpers>

vc-spec: |-
  method merge(a:seq<int>, b:seq<int>) returns (output:seq<int>)
    requires IsSorted(a)
    requires IsSorted(b)
  //  ensures IsSorted(output)
    ensures SortSpec(a+b, output)
    //decreases |a|+|b|

vc-code: |-
  // <vc-code>
  {
    assume false;
  }
  // </vc-code>

vc-postamble: |-

