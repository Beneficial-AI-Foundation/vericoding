vc-preamble: |-
  predicate allEqual(s:seq<int>)
  {forall i,j::0<=i<|s| && 0<=j<|s| ==> s[i]==s[j] }
  //{forall i,j::0<=i<=j<|s| ==> s[i]==s[j] }
  //{forall i::0<i<|s| ==> s[i-1]==s[i]} 
  //{forall i::0<=i<|s|-1 ==> s[i]==s[i+1]}


  //Ordered indexes
  lemma equivalenceNoOrder(s:seq<int>)
  ensures allEqual(s) <==> forall i,j::0<=i<=j<|s| ==> s[i]==s[j]
  {}

  //All equal to first
  lemma equivalenceEqualtoFirst(s:seq<int>)
  requires s!=[]
  ensures allEqual(s) <==> (forall i::0<=i<|s| ==> s[0]==s[i])
  {}



  lemma equivalenceContiguous(s:seq<int>)
  ensures (allEqual(s) ==> forall i::0<=i<|s|-1 ==> s[i]==s[i+1])
  ensures (allEqual(s) <== forall i::0<=i<|s|-1 ==> s[i]==s[i+1])
  {
    assert allEqual(s) ==> forall i::0<=i<|s|-1 ==> s[i]==s[i+1];

    if(|s|==0 || |s|==1){

    }
    else{
      calc {
        forall i::0<=i<|s|-1 ==> s[i]==s[i+1];
        ==>
        {
          equivalenceContiguous(s[..|s|-1]);
          assert s[|s|-2] == s[|s|-1];
        }
        allEqual(s);
      }
    }

  }

vc-helpers: |-
  // <vc-helpers>
  // </vc-helpers>

vc-spec: |-
  method mallEqual2(v:array<int>) returns (b:bool)
  ensures b==allEqual(v[0..v.Length])

vc-code: |-
  // <vc-code>
  {
    assume false;
  }
  // </vc-code>

vc-postamble: |-

