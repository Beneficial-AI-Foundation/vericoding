vc-preamble: |-
  // Bubble Sort

vc-helpers: |-
  <vc-helpers>
  </vc-helpers>

vc-spec: |-
  method bubble_sort(a: array2<int>)
      modifies a
      requires a.Length1 == 2
      ensures sorted(a, 0, a.Length0 - 1)

vc-code: |-
  {
      var i := a.Length0 - 1;
      while (i > 0)
          invariant i < 0 ==> a.Length0 == 0
          invariant sorted(a, i, a.Length0 - 1)
          invariant partitioned(a, i)
      {
          var j := 0;
          while (j < i)
              invariant 0 < i < a.Length0 && 0 <= j <= i
              invariant sorted(a, i, a.Length0 - 1)
              invariant partitioned(a, i)
              invariant forall k :: 0 <= k <= j ==> a[k, 1] <= a[j, 1]
          {
              if (a[j, 1] > a[j + 1, 1])
              {
                  a[j, 1], a[j + 1, 1] := a[j + 1, 1], a[j, 1];
              }
              j := j + 1;
          }
          i := i -1;
      }
  }

vc-postamble: |-
  // Predicates for Bubble Sort
  predicate sorted(a: array2<int>, l: int, u: int)
      reads a
      requires a.Length1 == 2
  {
      forall i, j :: 0 <= l <= i <= j <= u < a.Length0 ==> a[i, 1] <= a[j, 1]
  }

  predicate partitioned(a: array2<int>, i: int)
      reads a
      requires a.Length1 == 2
  {
      forall k, k' :: 0 <= k <= i < k' < a.Length0 ==> a[k, 1] <= a[k', 1]
  }

