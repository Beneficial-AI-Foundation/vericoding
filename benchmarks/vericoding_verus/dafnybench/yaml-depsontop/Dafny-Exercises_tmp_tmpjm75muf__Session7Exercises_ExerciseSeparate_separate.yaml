vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn strict_negative(v: &Vec<i32>, i: usize, j: usize) -> bool
      recommends 0 <= i <= j <= v.len()
  {
      forall|u: usize| i <= u < j ==> v[u as int] < 0
  }
  
  spec fn positive(s: Seq<i32>) -> bool {
      forall|u: int| 0 <= u < s.len() ==> s[u] >= 0
  }
  
  spec fn is_permutation(s: Seq<i32>, t: Seq<i32>) -> bool {
      s.to_multiset() == t.to_multiset()
  }
  
  /**
  returns an index st new array is a permutation of the old array
  positive first and then strictnegative, i is the firs neg or len if not any */

vc-helpers: |-
  // <vc-helpers>
  // </vc-helpers>

vc-spec: |-
  // <vc-spec>
  fn separate(v: &mut Vec<i32>) -> (i: usize)
      ensures
          0 <= i <= v.len(),
          positive(v@.subrange(0, i as int)),
          strict_negative(v, i, v.len()),
          is_permutation(v@, old(v)@),
  // </vc-spec>

vc-code: |-
  // <vc-code>
  {
      assume(false);
      0
  }
  // </vc-code>

vc-postamble: |-
  
  fn main() {}
  
  }