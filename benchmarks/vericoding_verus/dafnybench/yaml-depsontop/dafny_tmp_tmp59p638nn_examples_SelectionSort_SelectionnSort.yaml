vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  // Two-state predicate for checking if multiset is preserved
  spec fn preserved(a_old: Seq<i32>, a_new: Seq<i32>, left: nat, right: nat) -> bool
      recommends left <= right <= a_old.len() && a_old.len() == a_new.len()
  {
      a_old.subrange(left as int, right as int).to_multiset() == a_new.subrange(left as int, right as int).to_multiset()
  }
  
  // Predicate for checking if array slice is ordered
  spec fn ordered(a: Seq<i32>, left: nat, right: nat) -> bool
      recommends left <= right <= a.len()
  {
      forall|i: int| #![trigger a[i]] left < i < right ==> a[i-1] <= a[i]
  }
  
  // Two-state predicate for sorted array
  spec fn sorted(a_old: Seq<i32>, a_new: Seq<i32>) -> bool
      recommends a_old.len() == a_new.len()
  {
      ordered(a_new, 0, a_new.len() as nat) && preserved(a_old, a_new, 0, a_old.len() as nat)
  }

vc-helpers: |-
  // <vc-helpers>
  // </vc-helpers>

vc-spec: |-
  // <vc-spec>
  fn selection_sort(a: &mut Vec<i32>)
      ensures sorted(old(a)@, a@)
  // </vc-spec>

vc-code: |-
  // <vc-code>
  {
      assume(false);
  }
  // </vc-code>

vc-postamble: |-
  
  fn main() {
  }
  
  }