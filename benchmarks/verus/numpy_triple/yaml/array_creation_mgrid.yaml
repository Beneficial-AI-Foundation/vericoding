vc-description: |-
  An instance which returns a dense multi-dimensional meshgrid

  An instance of numpy.lib.ndmgr.MGridClass which, when indexed, returns a dense multi-dimensional meshgrid.

  Parameters
  ----------
  [slice1, slice2, ..., sliceN] : slice objects or integers
      If the input is a slice, the syntax start:stop:step is equivalent to np.arange(start, stop, step) 
      inside of the brackets. If the input is an integer, the syntax i is equivalent to np.arange(i)+1.

  Returns
  -------
  out : one ndarray or tuple of ndarrays
      If only one slice is passed, returns an array. If multiple slices are passed, returns a tuple 
      of arrays with one array for each dimension.

  Creates a 1D meshgrid from start to stop with step size.
  This is a simplified version of mgrid that handles only the single-slice case.

  Specification: mgrid creates a vector of evenly spaced values from start to stop (exclusive) with given step

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn mgrid(start: i8, stop: i8, step: i8, n: usize) -> (result: Vec<i8>)
      requires
          step > 0,
          start < stop,
          n == ((stop as int - start as int) / step as int) as usize,
      ensures
          result@.len() == n,
          forall|i: int| 0 <= i < result@.len() ==> #[trigger] result@[i] == start as int + i * step as int,
          forall|i: int| 0 <= i < result@.len() ==> #[trigger] result@[i] < stop as int,

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}