vc-description: |-
  Return element-wise a copy of the string with uppercase characters converted to lowercase and vice versa
  
  Return element-wise a copy of the string with uppercase characters converted to lowercase and vice versa
  
  Specification: numpy.strings.swapcase returns a vector where each string element
  has its case swapped (uppercase becomes lowercase and vice versa).
  
  Mathematical Properties:
  1. Element-wise correctness: Each element has its alphabetic characters case-swapped
  2. Length preservation: Each transformed string has the same length as the original
  3. Case transformation: Uppercase→lowercase, lowercase→uppercase, non-alpha unchanged
  4. Involutive property: swapcase(swapcase(x)) = x
  5. Empty string handling: Empty strings remain empty
  6. Character-level correctness: Each character is correctly transformed
  
  Precondition: True (no special preconditions for case swapping)
  Postcondition: For all indices i, result[i] is the case-swapped version of a[i]

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn char_swapcase(c: char) -> char;
  
  spec fn string_swapcase(s: Seq<char>) -> Seq<char>
      decreases s.len()
  {
      if s.len() == 0 {
          Seq::<char>::empty()
      } else {
          seq![char_swapcase(s[0])] + string_swapcase(s.skip(1))
      }
  }
  
  fn swapcase(a: Vec<String>) -> (result: Vec<String>)
      ensures
          result.len() == a.len(),
          forall|i: int| 0 <= i < a.len() ==> result[i]@.len() == a[i]@.len(),
          forall|i: int, j: int| 0 <= i < a.len() && 0 <= j < a[i]@.len() ==> 
              #[trigger] result[i]@[j] == char_swapcase(a[i]@[j])

vc-code: |-
  {
      assume(false);
      unreached();
  }

vc-postamble: |-
  }
  fn main() {}

