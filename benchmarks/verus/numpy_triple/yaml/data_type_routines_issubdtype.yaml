vc-description: |-
  numpy.issubdtype: Returns True if first argument is a typecode lower/equal in type hierarchy.
  
  This function checks if the first data type is a subtype of the second data type
  in the NumPy type hierarchy. It's similar to Python's built-in issubclass but
  operates on NumPy data types.
  
  The function implements the NumPy type hierarchy where types are organized
  in a tree structure with 'generic' at the root.
  
  Specification: issubdtype returns True if arg1 is a subtype of arg2 in the NumPy type hierarchy.
  
  Precondition: True (works with any valid NumPy data types)
  Postcondition: The result is True if and only if arg1 is a subtype of arg2 
  according to the NumPy type hierarchy rules.
  
  Key properties:
  1. Reflexivity: Every type is a subtype of itself
  2. Transitivity: If A is subtype of B and B is subtype of C, then A is subtype of C
  3. Hierarchy rules: Specific types are subtypes of their parent categories
  4. Root type: All types are subtypes of 'generic'
  
  /* Define a NumPy-like type hierarchy representing the data type system in NumPy */
  
  /* Generic root type */
  
  /* Inexact numeric type */
  
  /* Floating point type */
  
  /* 32-bit floating point */
  
  /* 64-bit floating point */
  
  /* Numeric type */
  
  /* Integer type */
  
  /* Signed integer type */
  
  /* 8-bit signed integer */
  
  /* 16-bit signed integer */
  
  /* 32-bit signed integer */
  
  /* 64-bit signed integer */
  
  /* Unsigned integer type */
  
  /* 8-bit unsigned integer */
  
  /* 16-bit unsigned integer */
  
  /* 32-bit unsigned integer */
  
  /* 64-bit unsigned integer */
  
  /* Character type */
  
  /* Bytes type */
  
  /* String type */
  
  /* Boolean type */
  
  /* Define the subtype relation for NumPy types */
  
  /* Float hierarchy */
  
  /* Integer hierarchy */
  
  /* Character hierarchy */
  
  /* Boolean hierarchy */
  
  /* Number hierarchy */
  
  /* Reflexivity property */
  
  /* Generic is supertype of all types */
  
  /* Specific hierarchy rules */
  
  /* Non-subtype examples */

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  pub enum NumpyDType {
  
      Generic,
  
      Inexact(Box<NumpyDType>),
  
      Floating(Box<NumpyDType>),
  
      Float32,
  
      Float64,
  
      Number(Box<NumpyDType>),
  
      Integer(Box<NumpyDType>),
  
      SignedInteger(Box<NumpyDType>),
  
      Int8,
  
      Int16,
  
      Int32,
  
      Int64,
  
      UnsignedInteger(Box<NumpyDType>),
  
      UInt8,
  
      UInt16,
  
      UInt32,
  
      UInt64,
  
      Character(Box<NumpyDType>),
  
      Bytes_,
  
      Str_,
  
      Bool_,
  }
  
  spec fn is_sub_dtype_spec(dtype1: NumpyDType, dtype2: NumpyDType) -> bool {
      if dtype1 == dtype2 {
          true
      } else {
          match (dtype1, dtype2) {
  
              (NumpyDType::Float32, NumpyDType::Floating(_)) => true,
              (NumpyDType::Float64, NumpyDType::Floating(_)) => true,
              (NumpyDType::Floating(_), NumpyDType::Inexact(_)) => true,
              (NumpyDType::Floating(_), NumpyDType::Number(_)) => true,
              (NumpyDType::Floating(_), NumpyDType::Generic) => true,
  
              (NumpyDType::Int8, NumpyDType::SignedInteger(_)) => true,
              (NumpyDType::Int16, NumpyDType::SignedInteger(_)) => true,
              (NumpyDType::Int32, NumpyDType::SignedInteger(_)) => true,
              (NumpyDType::Int64, NumpyDType::SignedInteger(_)) => true,
              (NumpyDType::UInt8, NumpyDType::UnsignedInteger(_)) => true,
              (NumpyDType::UInt16, NumpyDType::UnsignedInteger(_)) => true,
              (NumpyDType::UInt32, NumpyDType::UnsignedInteger(_)) => true,
              (NumpyDType::UInt64, NumpyDType::UnsignedInteger(_)) => true,
              (NumpyDType::SignedInteger(_), NumpyDType::Integer(_)) => true,
              (NumpyDType::UnsignedInteger(_), NumpyDType::Integer(_)) => true,
              (NumpyDType::Integer(_), NumpyDType::Number(_)) => true,
              (NumpyDType::Integer(_), NumpyDType::Generic) => true,
  
              (NumpyDType::Str_, NumpyDType::Character(_)) => true,
              (NumpyDType::Bytes_, NumpyDType::Character(_)) => true,
              (NumpyDType::Character(_), NumpyDType::Generic) => true,
  
              (NumpyDType::Bool_, NumpyDType::Generic) => true,
  
              (NumpyDType::Number(_), NumpyDType::Generic) => true,
              (NumpyDType::Inexact(_), NumpyDType::Generic) => true,
              _ => false,
          }
      }
  }

vc-helpers: |-

vc-spec: |-
  fn issubdtype(arg1: NumpyDType, arg2: NumpyDType) -> (result: bool)
      ensures 
          result == is_sub_dtype_spec(arg1, arg2) &&
  
          (arg1 == arg2 ==> result == true) &&
  
          (arg2 == NumpyDType::Generic ==> result == true) &&
  
          (arg1 == NumpyDType::Float32 && matches!(arg2, NumpyDType::Floating(_)) ==> result == true) &&
          (arg1 == NumpyDType::Float64 && matches!(arg2, NumpyDType::Floating(_)) ==> result == true) &&
          (arg1 == NumpyDType::Int32 && matches!(arg2, NumpyDType::SignedInteger(_)) ==> result == true) &&
          (arg1 == NumpyDType::UInt32 && matches!(arg2, NumpyDType::UnsignedInteger(_)) ==> result == true) &&
  
          (arg1 == NumpyDType::Float32 && arg2 == NumpyDType::Float64 ==> result == false) &&
          (arg1 == NumpyDType::Float64 && arg2 == NumpyDType::Float32 ==> result == false) &&
          (arg1 == NumpyDType::Int32 && matches!(arg2, NumpyDType::Floating(_)) ==> result == false)

vc-code: |-
  {
      assume(false);
      unreached();
  }

vc-postamble: |-
  }
  fn main() {}

