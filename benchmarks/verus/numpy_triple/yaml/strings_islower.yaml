vc-description: |-
  numpy.strings.islower: Returns true for each element if all cased characters in the string are lowercase and there is at least one cased character, false otherwise.

  Tests whether all cased characters in each string are lowercase.
  A string is considered to satisfy islower if:
  1. It contains at least one cased character (letters that have uppercase/lowercase versions)
  2. All cased characters are lowercase
  3. Non-cased characters (numbers, symbols, whitespace) are ignored for the check

  Examples:
  - Empty string "" → false (no cased characters)
  - "123" → false (no cased characters)
  - "abc" → true (all lowercase, has cased characters)
  - "ABC" → false (has uppercase)
  - "aBc" → false (has uppercase)
  - "abc123" → true (has lowercase, no uppercase)
  - "   " → false (no cased characters)

  Specification: numpy.strings.islower returns a vector where each element indicates
  whether the corresponding string element has all cased characters in lowercase
  and contains at least one cased character.

  Mathematical Properties:
  1. A string is considered "islower" if it has at least one cased character AND
     all cased characters are lowercase
  2. Empty strings return false (no cased characters)
  3. Strings with only non-cased characters (digits, symbols, whitespace) return false
  4. Strings with any uppercase letters return false
  5. Strings with at least one lowercase letter and no uppercase letters return true

  Edge Cases:
  - Empty string: false (no cased characters)
  - "123": false (no cased characters) 
  - "abc": true (all lowercase, has cased characters)
  - "ABC": false (has uppercase)
  - "aBc": false (has uppercase)
  - "abc123": true (has lowercase, no uppercase)
  - "   ": false (no cased characters)

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn is_alpha_char(c: char) -> bool {
      ('a' <= c <= 'z') || ('A' <= c <= 'Z')
  }

  spec fn is_lower_char(c: char) -> bool {
      'a' <= c <= 'z'
  }

  spec fn string_has_cased_char(s: Seq<char>) -> bool {
      exists|i: int| 0 <= i < s.len() && is_alpha_char(s[i])
  }

  spec fn string_all_cased_are_lowercase(s: Seq<char>) -> bool {
      forall|i: int| 0 <= i < s.len() && is_alpha_char(s[i]) ==> is_lower_char(s[i])
  }

  fn islower(a: Vec<String>) -> (result: Vec<bool>)
      ensures
          result.len() == a.len(),
          forall|i: int| 0 <= i < result.len() ==> 
              result[i] == (string_has_cased_char(a[i]@) && string_all_cased_are_lowercase(a[i]@))

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}