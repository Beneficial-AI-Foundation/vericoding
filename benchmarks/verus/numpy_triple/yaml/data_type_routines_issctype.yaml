vc-description: |-
  Determines whether the given object represents a scalar data-type
  
  /* Represents different kinds of data types that can be tested */
  
  /* Scalar integer type */
  
  /* Scalar floating point type */
  
  /* Scalar complex number type */
  
  /* Scalar boolean type */
  
  /* Scalar string type */
  
  /* Array type */
  
  /* Composite type */
  
  /* Unknown type */
  
  /* Helper function to check if a DataType is a scalar type */

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  enum DataType {
  
      ScalarInt,
  
      ScalarFloat,
  
      ScalarComplex,
  
      ScalarBool,
  
      ScalarString,
  
      ArrayType,
  
      CompositeType,
  
      UnknownType,
  }
  
  spec fn is_scalar_type(dt: DataType) -> bool {
      match dt {
          DataType::ScalarInt => true,
          DataType::ScalarFloat => true,
          DataType::ScalarComplex => true,
          DataType::ScalarBool => true,
          DataType::ScalarString => true,
          DataType::ArrayType => false,
          DataType::CompositeType => false,
          DataType::UnknownType => false,
      }
  }

vc-helpers: |-

vc-spec: |-
  fn issctype(rep: DataType) -> (result: bool)
      ensures result == (rep == DataType::ScalarInt || 
                        rep == DataType::ScalarFloat || 
                        rep == DataType::ScalarComplex || 
                        rep == DataType::ScalarBool || 
                        rep == DataType::ScalarString)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}

