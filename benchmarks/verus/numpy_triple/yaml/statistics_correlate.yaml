vc-description: |-
  Cross-correlation of two 1-dimensional sequences in 'valid' mode.
  Computes c_k = sum_i a_{k+i} * v_i for positions where both sequences fully overlap.

  Specification: correlate computes cross-correlation with valid mode overlap.
  Each output element is the sum of products of overlapping elements from the input sequences.

  Mathematical properties:
  1. The result has size (m + 1 - n) for valid mode
  2. Each output element k is computed as: sum_i a[k+i] * v[i] for i in [0, n-1]
  3. Only positions where both sequences fully overlap are computed
  4. The correlation preserves the mathematical definition of cross-correlation

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn correlation_sum(a: Seq<i32>, v: Seq<i32>, k: int) -> int
      decreases v.len()
  {
      if v.len() == 0 {
          0
      } else {
          a[k] * v[0] + correlation_sum(a, v.skip(1), k + 1)
      }
  }

  fn correlate(a: Vec<i32>, v: Vec<i32>) -> (result: Vec<i32>)
      requires 
          v.len() > 0,
          v.len() <= a.len(),
      ensures
          result.len() == a.len() + 1 - v.len(),
          forall|k: int| 0 <= k < result.len() ==> 
              result[k] == correlation_sum(a@, v@, k),

vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}