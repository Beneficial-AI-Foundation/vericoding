vc-description: |-
  numpy.ndarray.flatten: Return a copy of the array collapsed into one dimension.
  
  Flattens a 2D matrix into a 1D vector using row-major (C-style) order.
  Each row is placed sequentially in the output vector.
  
  Parameters:
  - mat: 2D matrix represented as Vector of Vectors
  
  Returns:
  - 1D vector containing all elements in row-major order
  
  Example: [[1,2], [3,4]] becomes [1, 2, 3, 4]
  
  Specification: flatten returns a 1D vector containing all elements of the 2D matrix
  in row-major order.
  
  Precondition: True (no special preconditions)
  Postcondition: 
  - The result has size rows * cols
  - Each element at position (row * cols + col) equals the original element at (row, col)
  - Elements are ordered by row-major traversal (row 0 first, then row 1, etc.)

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn flatten(mat: Vec<Vec<f32>>) -> (result: Vec<f32>)
      requires 
          mat.len() > 0,
          forall|i: int| 0 <= i < mat.len() ==> mat[i].len() > 0,
          forall|i: int, j: int| 0 <= i < mat.len() && 0 <= j < mat.len() ==> mat[i].len() == mat[j].len(),
      ensures 
          result.len() == mat.len() * mat[0].len(),
          forall|r: int, c: int| 
              0 <= r < mat.len() && 0 <= c < mat[0].len() ==>
              result[r * mat[0].len() + c] == mat[r][c]

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}

