vc-description: |-
  numpy.issubclass_: Determine if a class is a subclass of a second class.
  
  This function is equivalent to the Python built-in issubclass, except that it returns 
  False instead of raising a TypeError if one of the arguments is not a class.
  
  In the context of NumPy, this tests relationships between NumPy data type classes
  such as whether int32 is a subclass of integer, or whether float64 is a subclass of float.
  
  Specification: issubclass_ correctly determines class hierarchy relationships.
  
  This function tests whether arg1 is a subclass of arg2 according to NumPy's type
  hierarchy. The specification ensures that:
  1. The function respects the established type hierarchy (e.g., int32 ⊆ integer ⊆ number ⊆ scalar)
  2. It handles reflexivity correctly (every class is a subclass of itself)
  3. It returns False for unrelated classes
  4. It never raises exceptions (returns False instead of error for invalid inputs)
  
  Precondition: True (no special preconditions, handles all inputs gracefully)
  Postcondition: Returns True if arg1 is a subclass of arg2, False otherwise
  
  /* Represents a NumPy type class for hierarchy testing */
  
  /* Integer types */
  
  /* Floating point types */
  
  /* Complex number types */
  
  /* Boolean type */
  
  /* Scalar types (superclass of all numeric types) */
  
  /* Number types (excludes boolean) */
  
  /* Inexact types (floating and complex) */
  
  /* 8-bit signed integer type */
  
  /* 16-bit signed integer type */
  
  /* 32-bit signed integer type */
  
  /* 64-bit signed integer type */
  
  /* 8-bit unsigned integer type */
  
  /* 16-bit unsigned integer type */
  
  /* 32-bit unsigned integer type */
  
  /* 64-bit unsigned integer type */
  
  /* 32-bit floating point type */
  
  /* 64-bit floating point type */
  
  /* 64-bit complex number type */
  
  /* 128-bit complex number type */
  
  /* Generic object type */
  
  /* Defines the class hierarchy relationships for NumPy types */
  
  /* Reflexivity: every class is a subclass of itself */
  
  /* Concrete integer types are subclasses of IntegerType */
  
  /* Concrete floating types are subclasses of FloatingType */
  
  /* Concrete complex types are subclasses of ComplexType */
  
  /* Integer types are subclasses of NumberType */
  
  /* Floating types are subclasses of InexactType and NumberType */
  
  /* Complex types are subclasses of InexactType and NumberType */
  
  /* All numeric types are subclasses of ScalarType */
  
  /* Default case */
  
  /* Result matches the defined hierarchy */
  
  /* Reflexivity: every class is a subclass of itself */
  
  /* Concrete examples from NumPy documentation */
  
  /* Transitivity: int32 → integer → number → scalar */
  
  /* All numeric types are subclasses of ScalarType */

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  #[derive(PartialEq, Eq)]
  enum NumpyTypeClass {
  
      IntegerType,
  
      FloatingType,
  
      ComplexType,
  
      BooleanType,
  
      ScalarType,
  
      NumberType,
  
      InexactType,
  
      Int8Type,
  
      Int16Type,
  
      Int32Type,
  
      Int64Type,
  
      UInt8Type,
  
      UInt16Type,
  
      UInt32Type,
  
      UInt64Type,
  
      Float32Type,
  
      Float64Type,
  
      Complex64Type,
  
      Complex128Type,
  
      ObjectType,
  }
  
  spec fn is_subclass_spec(t: NumpyTypeClass, t_prime: NumpyTypeClass) -> bool {
  
      if t == t_prime {
          true
      } else {
          match (t, t_prime) {
  
              (NumpyTypeClass::Int8Type, NumpyTypeClass::IntegerType) => true,
              (NumpyTypeClass::Int16Type, NumpyTypeClass::IntegerType) => true,
              (NumpyTypeClass::Int32Type, NumpyTypeClass::IntegerType) => true,
              (NumpyTypeClass::Int64Type, NumpyTypeClass::IntegerType) => true,
              (NumpyTypeClass::UInt8Type, NumpyTypeClass::IntegerType) => true,
              (NumpyTypeClass::UInt16Type, NumpyTypeClass::IntegerType) => true,
              (NumpyTypeClass::UInt32Type, NumpyTypeClass::IntegerType) => true,
              (NumpyTypeClass::UInt64Type, NumpyTypeClass::IntegerType) => true,
  
              (NumpyTypeClass::Float32Type, NumpyTypeClass::FloatingType) => true,
              (NumpyTypeClass::Float64Type, NumpyTypeClass::FloatingType) => true,
  
              (NumpyTypeClass::Complex64Type, NumpyTypeClass::ComplexType) => true,
              (NumpyTypeClass::Complex128Type, NumpyTypeClass::ComplexType) => true,
  
              (NumpyTypeClass::IntegerType, NumpyTypeClass::NumberType) => true,
  
              (NumpyTypeClass::FloatingType, NumpyTypeClass::InexactType) => true,
              (NumpyTypeClass::FloatingType, NumpyTypeClass::NumberType) => true,
  
              (NumpyTypeClass::ComplexType, NumpyTypeClass::InexactType) => true,
              (NumpyTypeClass::ComplexType, NumpyTypeClass::NumberType) => true,
  
              (NumpyTypeClass::NumberType, NumpyTypeClass::ScalarType) => true,
              (NumpyTypeClass::BooleanType, NumpyTypeClass::ScalarType) => true,
              (NumpyTypeClass::IntegerType, NumpyTypeClass::ScalarType) => true,
              (NumpyTypeClass::FloatingType, NumpyTypeClass::ScalarType) => true,
              (NumpyTypeClass::ComplexType, NumpyTypeClass::ScalarType) => true,
              (NumpyTypeClass::InexactType, NumpyTypeClass::ScalarType) => true,
  
              _ => false,
          }
      }
  }

vc-helpers: |-

vc-spec: |-
  fn issubclass_(arg1: NumpyTypeClass, arg2: NumpyTypeClass) -> (result: bool)
      ensures
  
          result == is_subclass_spec(arg1, arg2),
  
          (arg1 == arg2) ==> (result == true),
  
          (arg1 == NumpyTypeClass::Int32Type && arg2 == NumpyTypeClass::IntegerType) ==> (result == true),
          (arg1 == NumpyTypeClass::Float64Type && arg2 == NumpyTypeClass::FloatingType) ==> (result == true),
          (arg1 == NumpyTypeClass::Int32Type && arg2 == NumpyTypeClass::FloatingType) ==> (result == false),
  
          (arg1 == NumpyTypeClass::Int32Type && arg2 == NumpyTypeClass::NumberType) ==> 
           (is_subclass_spec(NumpyTypeClass::Int32Type, NumpyTypeClass::IntegerType) &&
            is_subclass_spec(NumpyTypeClass::IntegerType, NumpyTypeClass::NumberType)),
  
          (arg1 == NumpyTypeClass::IntegerType && arg2 == NumpyTypeClass::ScalarType) ==> (result == true),
          (arg1 == NumpyTypeClass::FloatingType && arg2 == NumpyTypeClass::ScalarType) ==> (result == true),
          (arg1 == NumpyTypeClass::ComplexType && arg2 == NumpyTypeClass::ScalarType) ==> (result == true)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}