vc-description: |-
  numpy.linalg.svdvals: Compute singular values of a matrix.

  Computes the singular values of a matrix without computing the U and V matrices.
  The singular values are the square roots of the eigenvalues of A^T @ A (or A @ A^T),
  returned in descending order.

  This is equivalent to calling numpy.linalg.svd(x, compute_uv=False).
  For an mÃ—n matrix, this returns min(m,n) singular values.

  Specification: svdvals returns the singular values of the input matrix.

  The singular values are:
  1. Non-negative real numbers
  2. Sorted in descending order
  3. Square roots of eigenvalues of x^T @ x
  4. Measure the "magnitude" of the matrix in each singular direction

  Precondition: True (singular values are defined for any matrix)
  Postcondition: Returns singular values in descending order with mathematical properties

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn min_nat(a: nat, b: nat) -> nat {
      if a <= b { a } else { b }
  }

  fn svdvals(x: Vec<Vec<i8>>) -> (result: Vec<i8>)
      requires 
          x.len() > 0,
          x.len() < usize::MAX,
          x@[0].len() > 0,
      ensures 
          result.len() == min_nat(x.len() as nat, x@[0].len() as nat),
          /* Property 1: All singular values are non-negative */
          forall|i: int| 0 <= i < result.len() ==> #[trigger] result@[i] as int >= 0,
          /* Property 2: Singular values are sorted in descending order */
          forall|i: int, j: int| 0 <= i <= j < result.len() ==> #[trigger] result@[i] as int >= #[trigger] result@[j] as int,
          /* Property 4: If the matrix is zero, all singular values are zero */
          (forall|i: int, j: int| 0 <= i < x.len() && 0 <= j < x@[i].len() ==> #[trigger] x@[i]@[j] as int == 0) ==>
              (forall|i: int| 0 <= i < result.len() ==> #[trigger] result@[i] as int == 0)

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}