vc-description: |-
  Return the floor of the input, element-wise.
  
  The floor of each element x is the largest integer i, such that i <= x.
  This is a fundamental mathematical operation that rounds down to the
  nearest integer.
  
  Returns an array of the same shape as x, containing the floor of each element.
  
  Specification: numpy.floor returns a vector where each element is the
  floor (largest integer less than or equal to) the corresponding element in x.
  
  Precondition: True (floor is defined for all real numbers)
  Postcondition: For all indices i, result[i] is the floor of x[i], meaning:
  - result[i] is an integer value (represented as Float)
  - result[i] ≤ x[i]
  - x[i] < result[i] + 1
  - There is no integer k such that result[i] < k ≤ x[i]
  - Monotonicity: if x[i] ≤ x[j] then result[i] ≤ result[j]
  - Idempotence: floor(floor(x)) = floor(x)
  - Relationship with ceiling: result[i] = -((-x[i]).ceil) when x[i] is not an integer
  - Integer preservation: if x[i] is an integer, then result[i] = x[i]

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn numpy_floor(x: Vec<i32>) -> (result: Vec<i32>)
      requires x.len() > 0,
      ensures 
          result.len() == x.len(),
          forall|i: int| 0 <= i < result.len() ==> result[i] <= x[i],
          forall|i: int| 0 <= i < result.len() ==> x[i] < result[i] + 1,
          forall|i: int, j: int| 0 <= i < result.len() && 0 <= j < result.len() && x[i] <= x[j] ==> result[i] <= result[j],
          forall|i: int| 0 <= i < result.len() ==> result[i] == x[i]

vc-code: |-
  {
      assume(false);
      Vec::new()
  }

vc-postamble: |-
  }
  
  fn main() {}

