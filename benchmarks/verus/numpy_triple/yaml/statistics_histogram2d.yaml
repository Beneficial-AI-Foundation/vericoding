vc-description: |-
  Computes the bi-dimensional histogram of two data samples with equal number of bins.
  
  Specification: histogram2d computes a 2D histogram from two equal-length vectors.
  Mathematical properties:
  1. Input vectors must have the same length (enforced by type system)
  2. The histogram matrix has dimensions (nbins, nbins) where nbins = bins
  3. Each histogram bin counts the number of points falling within its boundaries
  4. The bin edges define the boundaries for both x and y dimensions
  5. The total count equals the input vector length
  6. All histogram values are non-negative
  7. Bin edges are monotonically increasing

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn histogram2d(x: &Vec<i8>, y: &Vec<i8>, bins: u8) -> (result: (Vec<Vec<u8>>, Vec<i8>, Vec<i8>))
      requires 
          x@.len() == y@.len(),
          bins > 0,
      ensures
          result.0@.len() == bins as nat,
          forall|i: int| 0 <= i < bins as int ==> result.0@[i]@.len() == bins as nat,
          result.1@.len() == bins as nat + 1,
          result.2@.len() == bins as nat + 1,
          forall|i: int, j: int| 0 <= i < bins as int && 0 <= j < bins as int ==> result.0@[i]@[j] as nat <= x@.len(),
          forall|i: int| 0 <= i < bins as int ==> #[trigger] result.1@[i] as int <= result.1@[i + 1] as int,
          forall|i: int| 0 <= i < bins as int ==> #[trigger] result.2@[i] as int <= result.2@[i + 1] as int,

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}