vc-description: |-
  Find the unique elements of a vector and return them in sorted order.
  
  Specification: unique returns sorted unique elements from the input vector.
  
  /* Result is sorted */
  
  /* All elements in result come from input array */
  
  /* All elements in result are unique */
  
  /* All elements from input appear in result */

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn unique(arr: Vec<i8>) -> (result: Vec<i8>)
      ensures
  
          forall|i: int, j: int| 0 <= i < j < result@.len() ==> #[trigger] result@[i] < #[trigger] result@[j],
  
          forall|i: int| 0 <= i < result@.len() ==> exists|j: int| 0 <= j < arr@.len() && #[trigger] result@[i] == #[trigger] arr@[j],
  
          forall|i: int, j: int| 0 <= i < result@.len() && 0 <= j < result@.len() && i != j ==> #[trigger] result@[i] != #[trigger] result@[j],
  
          forall|i: int| 0 <= i < arr@.len() ==> exists|j: int| 0 <= j < result@.len() && #[trigger] arr@[i] == #[trigger] result@[j],

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}