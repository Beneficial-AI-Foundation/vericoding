vc-description: |-
  numpy.polynomial.hermite.hermmul: Multiply one Hermite series by another.
  
  Returns the product of two Hermite series c1 * c2. The arguments
  are sequences of coefficients, from lowest order term to highest,
  e.g., [1,2,3] represents the series P_0 + 2*P_1 + 3*P_2 where P_i
  is the i-th Hermite polynomial.
  
  The product of two Hermite series requires reprojection onto the
  Hermite basis, which uses the recurrence relation for Hermite
  polynomials.
  
  For non-empty inputs of length m and n, the result has length m + n - 1.
  For empty inputs, returns a single zero coefficient.
  
  Specification: hermmul returns the coefficients of the product of two
  Hermite series.
  
  The key mathematical properties:
  1. Empty input handling: If either input is empty, returns [0]
  2. Degree property: For non-empty inputs of degree m-1 and n-1,
     the product has degree (m-1) + (n-1) = m + n - 2, requiring m + n - 1 coefficients
  3. Multiplication by constant: When one series has only one coefficient (constant polynomial),
     the result is element-wise scaling
  4. Commutativity: hermmul c1 c2 = hermmul c2 c1 (up to floating point precision)
  5. The general multiplication follows Hermite polynomial recurrence relations
  
  Precondition: True (works for all valid inputs)
  Postcondition: Captures empty input behavior, constant multiplication, and size properties
  
  /* Empty input handling */
  
  /* Non-empty inputs have correct output size */
  
  /* Multiplication by constant polynomial (degree 0) */
  
  /* Zero polynomial property */

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn hermmul(c1: Vec<i8>, c2: Vec<i8>) -> (result: Vec<i8>)
      ensures
  
          (c1.len() == 0 || c2.len() == 0) ==> (result.len() == 1 && result[0] == 0),
  
          (c1.len() > 0 && c2.len() > 0) ==> result.len() == c1.len() + c2.len() - 1,
  
          (c2.len() == 1 && c1.len() > 0) ==>
              forall|i: int| 0 <= i < c1.len() ==> result[i] as int == c1[i] as int * c2[0] as int,
          (c1.len() == 1 && c2.len() > 0) ==>
              forall|i: int| 0 <= i < c2.len() ==> result[i] as int == c2[i] as int * c1[0] as int,
  
          ((forall|i: int| 0 <= i < c1.len() ==> c1[i] == 0) || 
           (forall|j: int| 0 <= j < c2.len() ==> c2[j] == 0)) ==>
              forall|k: int| 0 <= k < result.len() ==> result[k] == 0,

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}