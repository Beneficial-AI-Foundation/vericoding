vc-description: |-
  numpy.strings.lower: Return an array with the elements converted to lowercase.

  Converts each string element in the input vector to lowercase. This transformation
  applies to all alphabetic characters while preserving non-alphabetic characters
  (digits, punctuation, whitespace) unchanged.

  The function preserves the shape of the input array and handles empty strings
  appropriately by returning them unchanged.

  From NumPy documentation:
  - Parameters: a (array_like) - Input array with string dtype
  - Returns: out (ndarray) - Output array with elements converted to lowercase

  Mathematical Properties:
  1. Element-wise transformation: result[i] = lower(a[i]) for all i
  2. Length preservation: result[i].length = a[i].length for all i
  3. Case transformation: uppercase letters become lowercase, others unchanged
  4. Idempotent: lower(lower(x)) = lower(x)
  5. Preserves vector length: result.size = a.size

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn char_to_lower(c: char) -> char;

  spec fn string_to_lower(s: Seq<char>) -> Seq<char>
      decreases s.len()
  {
      if s.len() == 0 {
          seq![]
      } else {
          seq![char_to_lower(s[0])] + string_to_lower(s.skip(1))
      }
  }

  fn lower(a: Vec<Vec<char>>) -> (result: Vec<Vec<char>>)
      ensures
          result.len() == a.len(),
          forall|i: int| 0 <= i < a.len() ==> #[trigger] result[i]@ == string_to_lower(a[i]@),
          forall|i: int| 0 <= i < a.len() ==> result[i].len() == a[i].len(),
          forall|i: int| 0 <= i < a.len() ==> (a[i].len() == 0 ==> result[i].len() == 0),
          forall|i: int| 0 <= i < a.len() ==> string_to_lower(result[i]@) == result[i]@,

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}