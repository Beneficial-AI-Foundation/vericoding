vc-description: |-
  Returns True if cast between data types can occur according to the casting rule
  
  /* Data type enumeration for casting rules */
  
  /* no casting is allowed */
  
  /* only byte-order changes are allowed */
  
  /* only casts which can preserve values are allowed */
  
  /* safe casts or casts within a kind */
  
  /* any data conversions may be done */
  
  /* Data type enumeration for supported numeric types */
  
  /* Basic reflexivity: any type can cast to itself with any rule */
  
  /* No casting rule: only identical types allowed */
  
  /* Safe casting preserves values */
  
  /* Integer widening is safe */
  
  /* Float widening is safe */
  
  /* Integer to float can be safe if no precision loss */
  
  /* Complex widening is safe */
  
  /* Float to complex is safe */
  
  /* Same type is always safe */
  
  /* Same kind casting allows within numeric families */
  
  /* Integer family */
  
  /* Float family */
  
  /* Complex family */
  
  /* Cross-family safe casts */
  
  /* Unrestricted casting allows any conversion */
  
  /* Equiv casting allows same types (byte-order changes only) */

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  #[derive(PartialEq, Eq)]
  pub enum CastingRule {
      No,
      Equiv,
      Safe,
      SameKind,
      Unrestricted,
  }
  
  #[derive(PartialEq, Eq)]
  pub enum DType {
      Int8,
      Int16,
      Int32,
      Int64,
      Float32,
      Float64,
      Complex64,
      Complex128,
      Bool,
  }

vc-helpers: |-

vc-spec: |-
  fn can_cast(from_dtype: DType, to_dtype: DType, casting: CastingRule) -> (result: bool)
      ensures
  
          (from_dtype == to_dtype ==> result == true) &&
  
          (casting == CastingRule::No ==> (result == true <==> from_dtype == to_dtype)) &&
  
          (casting == CastingRule::Safe ==> 
              (result == true ==> 
  
                  ((from_dtype == DType::Int8 && (to_dtype == DType::Int16 || to_dtype == DType::Int32 || to_dtype == DType::Int64)) ||
                   (from_dtype == DType::Int16 && (to_dtype == DType::Int32 || to_dtype == DType::Int64)) ||
                   (from_dtype == DType::Int32 && to_dtype == DType::Int64) ||
  
                   (from_dtype == DType::Float32 && to_dtype == DType::Float64) ||
  
                   ((from_dtype == DType::Int8 || from_dtype == DType::Int16) && (to_dtype == DType::Float32 || to_dtype == DType::Float64)) ||
                   (from_dtype == DType::Int32 && to_dtype == DType::Float64) ||
  
                   (from_dtype == DType::Complex64 && to_dtype == DType::Complex128) ||
  
                   ((from_dtype == DType::Float32 || from_dtype == DType::Float64) && (to_dtype == DType::Complex64 || to_dtype == DType::Complex128)) ||
  
                   (from_dtype == to_dtype)))) &&
  
          (casting == CastingRule::SameKind ==> 
              (result == true ==> 
  
                  (((from_dtype == DType::Int8 || from_dtype == DType::Int16 || from_dtype == DType::Int32 || from_dtype == DType::Int64) && 
                    (to_dtype == DType::Int8 || to_dtype == DType::Int16 || to_dtype == DType::Int32 || to_dtype == DType::Int64)) ||
  
                   ((from_dtype == DType::Float32 || from_dtype == DType::Float64) && 
                    (to_dtype == DType::Float32 || to_dtype == DType::Float64)) ||
  
                   ((from_dtype == DType::Complex64 || from_dtype == DType::Complex128) && 
                    (to_dtype == DType::Complex64 || to_dtype == DType::Complex128)) ||
  
                   ((from_dtype == DType::Int8 || from_dtype == DType::Int16 || from_dtype == DType::Int32 || from_dtype == DType::Int64) && 
                    (to_dtype == DType::Float32 || to_dtype == DType::Float64 || to_dtype == DType::Complex64 || to_dtype == DType::Complex128)) ||
                   ((from_dtype == DType::Float32 || from_dtype == DType::Float64) && 
                    (to_dtype == DType::Complex64 || to_dtype == DType::Complex128))))) &&
  
          (casting == CastingRule::Unrestricted ==> result == true) &&
  
          (casting == CastingRule::Equiv ==> (result == true <==> from_dtype == to_dtype))

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}

