vc-description: |-
  numpy.unique: Find the unique elements of a vector and return them sorted.

  Returns a new vector containing each distinct element from the input exactly once,
  sorted in ascending order. This is a simplified version that only returns the 
  unique values without the optional indices or counts.

  The output size depends on the number of unique elements in the input.

  Specification: numpy.unique returns a sorted vector containing each distinct element 
  from the input exactly once.

  Precondition: True
  Postcondition: 
  - The result is sorted in ascending order
  - No duplicates exist in the result
  - Every element in result comes from the input array
  - Every distinct element from input appears in result
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  spec fn is_sorted(arr: Seq<i32>) -> bool {
      forall|i: int, j: int| 0 <= i < j < arr.len() ==> arr[i] <= arr[j]
  }

  spec fn has_no_duplicates(arr: Seq<i32>) -> bool {
      forall|i: int, j: int| 0 <= i < arr.len() && 0 <= j < arr.len() && i != j ==> arr[i] != arr[j]
  }

  spec fn all_elements_from_input(result: Seq<i32>, input: Seq<i32>) -> bool {
      forall|i: int| 0 <= i < result.len() ==> #[trigger] input.contains(result[i])
  }

  spec fn all_distinct_elements_present(input: Seq<i32>, result: Seq<i32>) -> bool {
      forall|val: i32| input.contains(val) ==> #[trigger] result.contains(val)
  }

  fn numpy_unique(arr: Vec<i32>) -> (result: (usize, Vec<i32>))
      ensures
          is_sorted(result.1@),
          has_no_duplicates(result.1@),
          all_elements_from_input(result.1@, arr@),
          all_distinct_elements_present(arr@, result.1@),
vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {}