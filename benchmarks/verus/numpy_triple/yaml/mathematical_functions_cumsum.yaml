vc-description: |-
  numpy.cumsum: Return the cumulative sum of the elements along a given axis.

  For a 1D array, cumsum computes the cumulative sum where each element
  is the sum of all previous elements plus itself. For example:
  [1, 2, 3, 4] becomes [1, 3, 6, 10]

  The cumulative sum is defined as:
  - result[0] = a[0]
  - result[i] = result[i-1] + a[i] for i > 0

  Specification: numpy.cumsum returns a vector where each element is the
  cumulative sum up to that position.

  Precondition: True (no special preconditions)
  Postcondition: 
  - For non-empty vectors, the first element equals the first element of the input
  - Each subsequent element equals the previous cumulative sum plus the current element
  - The cumulative sum has the property that result[i] = sum of a[0] through a[i]

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn prefix_sum(a: Seq<i32>, i: int) -> int
      decreases i
  {
      if i < 0 || i >= a.len() {
          0
      } else if i == 0 {
          a[0] as int
      } else {
          prefix_sum(a, i - 1) + (a[i] as int)
      }
  }

  fn numpy_cumsum(a: Vec<i32>) -> (result: Vec<i32>)
      ensures 
          result.len() == a.len(),
          a.len() > 0 ==> result[0] == a[0],
          forall|i: int| 0 < i < a.len() ==> result[i] == result[i - 1] + a[i],
          forall|i: int| 0 <= i < a.len() ==> result[i] as int == prefix_sum(a@, i)

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}