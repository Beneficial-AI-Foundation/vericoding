vc-description: |-
  Like find, but raises ValueError when the substring is not found. For each element, return the lowest index in the string where substring is found. Unlike find, this function requires that the substring be found in each string, ensuring all results are non-negative indices. Specification: index returns the lowest index where substring is found within range. The key difference from find is that index has a stronger precondition: the substring must exist in each string within the specified range.

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn index(a: Vec<Seq<char>>, sub: Vec<Seq<char>>, start: Vec<i8>, end_pos: Vec<i8>) -> (result: Vec<i8>)
      requires 
          a.len() == sub.len() && sub.len() == start.len() && start.len() == end_pos.len(),
          forall|i: int| 0 <= i < a.len() ==> {
              &&& start[i] as int >= 0 
              &&& start[i] as int <= end_pos[i] as int
              &&& end_pos[i] as int <= a[i].len() as int
              &&& sub[i].len() > 0
          },
      ensures
          result.len() == a.len(),
          forall|i: int| 0 <= i < result.len() ==> {
              &&& result[i] as int >= 0
              &&& start[i] as int <= result[i] as int <= end_pos[i] as int
              &&& result[i] as int + sub[i].len() as int <= a[i].len() as int
          }

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}