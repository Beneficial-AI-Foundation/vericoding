vc-description: |-
  Universal function reduceat method: Performs reductions on specified slices of an array.
  
  For each index pair (indices[i], indices[i+1]), applies the reduction operation 
  to the slice array[indices[i]:indices[i+1]].
  
  Special behavior:
  - For the last index, reduces from indices[i] to the end of the array
  - If indices[i] >= indices[i+1], uses only the element at indices[i]
  - Output length equals the number of indices provided
  
  Example: np.add.reduceat([1,2,3,4,5,6,7,8], [0,4,1,5]) applies addition to slices:
  - [1,2,3,4] -> 10
  - [2,3,4,5] -> 14  
  - [5,6,7,8] -> 26
  Result: [10, 14, 26]

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn slice_sum(arr: Seq<i32>, start: int, end: int) -> int
      decreases (end - start)
  {
      if start >= end || start < 0 || end > arr.len() {
          0
      } else if start + 1 == end {
          arr[start] as int
      } else {
          (arr[start] as int) + slice_sum(arr, start + 1, end)
      }
  }

  fn reduceat_add(arr: Vec<i32>, indices: Vec<usize>) -> (result: Vec<i32>)
      requires 
          arr.len() > 0,
          indices.len() > 0,
          forall|i: int| 0 <= i < indices.len() ==> #[trigger] (indices[i] as int) < arr.len(),
      ensures
          result.len() == indices.len(),
          forall|i: int| 0 <= i < indices.len() ==> {
              let start_idx = indices[i] as int;
              if i < indices.len() - 1 {
                  let end_idx = indices[(i + 1) as int] as int;
                  if start_idx < end_idx {
                      /* Normal forward slice case */
                      #[trigger] (result[i] as int) == slice_sum(arr@, start_idx, end_idx)
                  } else {
                      /* Single element case when indices are non-increasing */
                      #[trigger] result[i] == arr[start_idx]
                  }
              } else {
                  /* Last index case - reduce to end of array */
                  #[trigger] (result[i] as int) == slice_sum(arr@, start_idx, arr.len() as int)
              }
          },

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}