vc-description: |-
  numpy.fft.fftfreq: Return the Discrete Fourier Transform sample frequencies.

  The function returns the discrete Fourier Transform sample frequencies
  with frequency bin centers in cycles per unit of sample spacing.

  For even n: frequencies are [0, 1, ..., n/2-1, -n/2, ..., -1] / (d*n)
  For odd n: frequencies are [0, 1, ..., (n-1)/2, -(n-1)/2, ..., -1] / (d*n)

  The frequencies are arranged in standard DFT order: positive frequencies
  first, then negative frequencies.

  Specification: fftfreq returns sample frequencies according to the DFT convention.

  The frequencies are arranged so that:
  - The first half contains non-negative frequencies [0, 1, ..., N-1] / (d*n)
  - The second half contains negative frequencies for the remaining indices

  where N = (n + 1) / 2 is the number of non-negative frequencies.

  Preconditions:
  - n > 0 (non-empty frequency array)
  - d ≠ 0 (valid sample spacing)

  Postconditions:
  - For indices i < N: result[i] = i / (d*n)
  - For indices i ≥ N: result[i] = (i - n) / (d*n)
  - The DC component (index 0) is always 0
  - The frequencies are symmetric around the Nyquist frequency
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  spec fn fft_freq_val(i: int, n: int, d: f64) -> f64;

  fn fftfreq(n: u8, d: f64) -> (result: Vec<f64>)
      requires 
          n > 0,
          d != 0.0,
      ensures
          result.len() == n as usize,
          forall|i: int| 0 <= i < ((n as int + 1) / 2) ==> 
              result[i] == fft_freq_val(i, n as int, d),
          forall|i: int| ((n as int + 1) / 2) <= i < n as int ==>
              result[i] == fft_freq_val(i, n as int, d),
          result[0] == 0.0,
vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {}