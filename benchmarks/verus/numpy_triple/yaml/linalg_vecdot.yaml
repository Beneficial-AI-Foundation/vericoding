vc-description: |-
  Compute the vector dot product of two vectors
  
  Specification: vecdot computes the mathematical dot product as the sum of element-wise products.
  This captures the mathematical definition: a · b = Σ(i=0 to n-1) a_i * b_i.
  
  Key properties:
  - Commutativity: vecdot(x1, x2) = vecdot(x2, x1)
  - Linearity: vecdot(c*x1, x2) = c * vecdot(x1, x2)
  - Zero vector: vecdot(0, x) = 0
  - Self-dot gives sum of squares: vecdot(x, x) = Σ(x_i²)

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn dot_product_spec(x1: Seq<i32>, x2: Seq<i32>) -> int
      decreases x1.len()
  {
      if x1.len() == 0 || x1.len() != x2.len() {
          0
      } else {
          x1[0] * x2[0] + dot_product_spec(x1.skip(1), x2.skip(1))
      }
  }
  
  fn vecdot(x1: Vec<i32>, x2: Vec<i32>) -> (result: i32)
      requires x1.len() == x2.len(),
      ensures 
          result as int == dot_product_spec(x1@, x2@),
          result as int == dot_product_spec(x2@, x1@)

vc-code: |-
  {
      assume(false);
      unreached();
  }

vc-postamble: |-
  }
  fn main() {}

