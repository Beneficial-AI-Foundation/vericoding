vc-description: |-
  Matrix multiplication for 2D matrices. Computes the matrix product of two 2D arrays following standard matrix multiplication rules. The result matrix C has dimensions (m x p) where A is (m x n) and B is (n x p).
  
  Specification: Matrix multiplication produces a result where each element is the dot product of the corresponding row from the first matrix and column from the second matrix.
  
  Mathematical properties:
  1. Dimensions are compatible: A is m×n, B is n×p, result is m×p
  2. Each element C[i][j] = sum of A[i][k] * B[k][j] for k from 0 to n-1
  3. The operation preserves the fundamental matrix multiplication identity
  4. Non-commutativity: A*B ≠ B*A in general (handled by type system)
  5. Associativity: (A*B)*C = A*(B*C) when dimensions are compatible

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn matmul(A: Vec<Vec<i8>>, B: Vec<Vec<i8>>) -> (result: Vec<Vec<i8>>)
      requires
          A.len() > 0,
          B.len() > 0,
          A@[0].len() == B.len(),
          forall|i: int| 0 <= i < A.len() ==> #[trigger] A@[i].len() == A@[0].len(),
          forall|i: int| 0 <= i < B.len() ==> #[trigger] B@[i].len() == B@[0].len(),
      ensures
          result.len() == A.len(),
          result.len() > 0 ==> result@[0].len() == B@[0].len(),
          forall|i: int| 0 <= i < result.len() ==> #[trigger] result@[i].len() == B@[0].len(),

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}