vc-description: |-
  Differentiate a Hermite series.
  Returns the Hermite series coefficients differentiated `m` times.
  At each iteration the result is multiplied by `scl` (scaling factor).
  The coefficients are from low to high degree.
  
  Specification: hermder differentiates Hermite series coefficients according to
  the Hermite polynomial derivative rule: d/dx H_n(x) = 2n * H_{n-1}(x).
  The result has degree reduced by m (or becomes zero if m >= n).
  Each differentiation multiplies by the scaling factor scl.

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn hermder(c: Vec<i32>, m: usize, scl: i32) -> (result: Vec<i32>)
      ensures
          result.len() == if m >= c.len() { 0 } else { c.len() - m },
          m >= c.len() ==> result.len() == 0,
          m < c.len() ==> result.len() == c.len() - m,
          (m == 1 && c.len() > 0) ==> (
              forall|i: int| 0 <= i < result.len() ==> 
                  result[i] == scl * (2 * ((i + 1) as i32)) * c[i + 1]
          ),
          (m == 2 && c.len() > 1) ==> (
              forall|i: int| 0 <= i < result.len() ==>
                  result[i] == scl * scl * (2 * ((i + 2) as i32)) * (2 * ((i + 1) as i32)) * c[i + 2]
          ),

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}

