vc-description: |-
  numpy.linalg.matrix_transpose: Transposes a matrix (or a stack of matrices).
  
  For a 2D matrix, this operation swaps the rows and columns.
  The element at position (i, j) in the input matrix becomes the element
  at position (j, i) in the output matrix.
  
  Input: A matrix with rows × cols dimensions
  Output: A matrix with cols × rows dimensions (transposed)
  
  Specification: numpy.linalg.matrix_transpose returns the transpose of the input matrix.
  
  For a matrix x with dimensions rows × cols, the transpose x_T has dimensions cols × rows.
  The element at position (i, j) in the original matrix x becomes the element at position (j, i) in x_T.
  
  Precondition: True (no special preconditions for matrix transpose)
  Postcondition: For all valid indices i and j, x_T[j][i] = x[i][j]

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn numpy_matrix_transpose(x: Vec<Vec<f32>>) -> (result: Vec<Vec<f32>>)
      requires 
          x.len() > 0,
          forall|i: int| 0 <= i < x.len() ==> x[i].len() > 0,
          forall|i: int, j: int| 0 <= i < x.len() && 0 <= j < x.len() ==> x[i].len() == x[j].len(),
      ensures
          result.len() == (if x.len() > 0 { x[0].len() } else { 0 }),
          forall|i: int| 0 <= i < result.len() ==> result[i].len() == x.len(),
          forall|i: int, j: int| 0 <= i < x.len() && 0 <= j < x[0].len() ==> result[j][i] == x[i][j],

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}

