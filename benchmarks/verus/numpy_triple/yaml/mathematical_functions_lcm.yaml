vc-description: |-
  Returns the lowest common multiple of |x1| and |x2| element-wise.
  
  Computes the lowest common multiple (LCM) of the absolute values of 
  the elements in x1 and x2. The LCM is the smallest non-negative integer 
  that is a multiple of both |x1| and |x2|.
  
  Mathematical Properties:
  - lcm(a, b) = lcm(b, a) (commutativity)
  - lcm(a, b) * gcd(a, b) = |a * b| (fundamental relationship)
  - lcm(0, b) = lcm(a, 0) = 0 (zero property)
  - lcm(a, b) â‰¥ 0 (non-negativity)
  - |a| divides lcm(a, b) and |b| divides lcm(a, b) (divisibility)
  - lcm(a, b) is minimal among all positive integers divisible by both |a| and |b|

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn gcd_spec(a: int, b: int) -> nat;
  
  spec fn lcm_spec(a: int, b: int) -> nat;
  
  fn lcm(x1: Vec<i32>, x2: Vec<i32>) -> (result: Vec<i32>)
      requires x1.len() == x2.len(),
      ensures 
          result.len() == x1.len(),
          /* Basic correctness: each element is the LCM of corresponding elements */
          forall|i: int| 0 <= i < result.len() ==> result[i] >= 0,
          /* Non-negativity: LCM is always non-negative */
          forall|i: int| 0 <= i < result.len() ==> result[i] >= 0,
          /* Zero property: LCM with zero is zero */
          forall|i: int| 0 <= i < result.len() ==> 
              (x1[i] == 0 || x2[i] == 0) ==> result[i] == 0,
          /* Special case: when both are non-zero, LCM is positive */
          forall|i: int| 0 <= i < result.len() ==> 
              (x1[i] != 0 && x2[i] != 0) ==> result[i] > 0

vc-code: |-
  {
      assume(false);
      unreached();
  }

vc-postamble: |-
  }
  fn main() {}

