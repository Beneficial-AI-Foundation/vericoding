vc-description: |-
  Generate N-dimensional indices for an array with given shape.
  Returns a vector of index tuples, where each tuple represents a valid
  N-dimensional index for an array with the specified dimensions.
  
  For a 2D array with shape (m, n), this generates all index pairs
  (i, j) where 0 ≤ i < m and 0 ≤ j < n, in C-order (row-major).
  
  Example: For shape (2, 3), generates [(0,0), (0,1), (0,2), (1,0), (1,1), (1,2)]

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn ndindex(shape: (usize, usize)) -> (indices: Vec<(usize, usize)>)
      requires shape.0 > 0 && shape.1 > 0,
      ensures 
          indices.len() == shape.0 * shape.1,
          forall|k: int| 0 <= k < indices.len() ==> {
              let (i, j) = indices[k];
              i < shape.0 && j < shape.1
          },
          forall|i: usize, j: usize| i < shape.0 && j < shape.1 ==> {
              exists|k: int| 0 <= k < indices.len() && indices[k] == (i, j)
          },
          forall|k: int| 0 <= k < indices.len() ==> {
              let (i, j) = indices[k];
              k == i * shape.1 + j
          }

vc-code: |-
  {
      assume(false);
      unreached();
  }

vc-postamble: |-
  }
  fn main() {}

