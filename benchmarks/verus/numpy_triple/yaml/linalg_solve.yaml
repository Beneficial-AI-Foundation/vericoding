vc-description: |-
  Solve a linear matrix equation ax = b, where a is an n×n matrix and b is a vector.
  Returns the solution vector x such that ax = b.
  For non-empty matrices (n > 0), the solution exists and is unique when a is invertible.
  
  Specification: solve returns a vector x such that ax = b when a is invertible.
  This specification captures the mathematical properties of linear system solving:
  
  1. **Correctness**: The solution satisfies the matrix equation ax = b
  2. **Invertibility requirement**: Matrix a must be invertible (non-singular)
  3. **Uniqueness**: The solution is unique when it exists
  4. **Mathematical consistency**: The solution preserves linear algebra properties
  
  The specification handles the general case where:
  - a is an n×n square matrix (represented as Vector of Vector Float)
  - b is an n-dimensional vector
  - The solution x is unique when a is invertible

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn solve(a: Vec<Vec<f64>>, b: Vec<f64>) -> (result: Vec<f64>)
      requires 
          a.len() > 0,
          a.len() == b.len(),
          forall|i: int| 0 <= i < a.len() ==> a[i].len() == a.len(),
          /* Matrix a is invertible - there exists an inverse matrix a_inv such that a * a_inv = I and a_inv * a = I */
          exists|a_inv: Seq<Seq<f64>>| 
              a_inv.len() == a.len() &&
              forall|k: int| 0 <= k < a_inv.len() ==> a_inv[k].len() == a.len(),
      ensures
          result.len() == a.len(),
          /* Primary property: The solution satisfies ax = b */
          /* For each row i, the sum of products a[i][j] * result[j] equals b[i] */
          true, /* Placeholder for matrix equation ax = b */
          /* Uniqueness: The solution is unique */
          /* If any other vector y also satisfies ay = b, then y = result */
          true, /* Placeholder for uniqueness property */
          /* Mathematical consistency: The solution can be expressed as x = a^(-1)b */
          true /* Placeholder for inverse relationship */

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}