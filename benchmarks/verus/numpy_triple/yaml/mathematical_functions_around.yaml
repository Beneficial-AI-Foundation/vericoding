vc-description: |-
  numpy.around: Evenly round to the given number of decimals (alias for numpy.round).
  Uses banker's rounding (round half to even) for values exactly halfway between rounded decimal values.
  For example: 1.5 and 2.5 both round to 2.0, -0.5 and 0.5 both round to 0.0
  
  Specification: around rounds each element to the given number of decimals with the following properties:
  1. Basic rounding: rounds to nearest representable value at the specified decimal precision
  2. Banker's rounding: for values exactly halfway between rounded decimal values, rounds to nearest even
  3. Zero preservation: rounding zero always produces zero
  4. Order preservation: maintains relative ordering of elements
  5. Bounded difference: the rounded value is close to the original value
  6. Idempotency: rounding an already-rounded value doesn't change it
  
  /* Simplified to focus on the basic case */
  
  /* Zero preservation: rounding zero gives zero */
  
  /* Order preservation: maintains ordering */
  
  /* Boundedness: rounded values are close to original values */
  
  /* Symmetry: rounding non-negative values gives non-negative results */

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn around(a: Vec<i8>, decimals: i8) -> (result: Vec<i8>)
      requires decimals as int == 0,
      ensures
          result.len() == a.len(),
  
          forall|i: int| 0 <= i < a.len() && a[i] as int == 0 ==> result[i] as int == 0,
  
          forall|i: int, j: int| 0 <= i < a.len() && 0 <= j < a.len() && a[i] as int <= a[j] as int ==> result[i] as int <= result[j] as int,
  
          forall|i: int| 0 <= i < a.len() ==>
              result[i] as int - 1 <= a[i] as int && a[i] as int <= result[i] as int + 1,
  
          forall|i: int| 0 <= i < a.len() && a[i] as int >= 0 ==> result[i] as int >= 0,

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}