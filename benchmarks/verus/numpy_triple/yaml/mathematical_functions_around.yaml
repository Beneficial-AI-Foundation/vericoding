vc-description: |-
  numpy.around: Evenly round to the given number of decimals (alias for numpy.round).
  Uses banker's rounding (round half to even) for values exactly halfway between rounded decimal values.
  For example: 1.5 and 2.5 both round to 2.0, -0.5 and 0.5 both round to 0.0
  
  Specification: around rounds each element to the given number of decimals with the following properties:
  1. Basic rounding: rounds to nearest representable value at the specified decimal precision
  2. Banker's rounding: for values exactly halfway between rounded decimal values, rounds to nearest even
  3. Zero preservation: rounding zero always produces zero
  4. Order preservation: maintains relative ordering of elements
  5. Bounded difference: the rounded value is close to the original value
  6. Idempotency: rounding an already-rounded value doesn't change it

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn around(a: Vec<i32>, decimals: i32) -> (result: Vec<i32>)
      requires decimals == 0, /* Simplified to focus on the basic case */
      ensures
          result.len() == a.len(),
          /* Zero preservation: rounding zero gives zero */
          forall|i: int| 0 <= i < a.len() && a[i] == 0 ==> result[i] == 0,
          /* Order preservation: maintains ordering */
          forall|i: int, j: int| 0 <= i < a.len() && 0 <= j < a.len() && a[i] <= a[j] ==> result[i] <= result[j],
          /* Boundedness: rounded values are close to original values */
          forall|i: int| 0 <= i < a.len() ==>
              result[i] - 1 <= a[i] && a[i] <= result[i] + 1,
          /* Symmetry: rounding non-negative values gives non-negative results */
          forall|i: int| 0 <= i < a.len() && a[i] >= 0 ==> result[i] >= 0,

vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }

vc-postamble: |-
  }
  fn main() {}

