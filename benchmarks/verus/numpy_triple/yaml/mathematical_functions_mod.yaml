vc-description: |-
  numpy.mod: Returns the element-wise remainder of division.

  Computes the remainder complementary to the floor_divide function.
  This is equivalent to x1 % x2 in terms of array broadcasting.

  The result has the same sign as the divisor x2.
  For two arguments of floating point type, the result is:
  x1 - floor(x1/x2) * x2

  Specification: numpy.mod returns a vector where each element is the remainder
  of the corresponding elements from x1 and x2.

  Precondition: All elements in x2 must be non-zero
  Postcondition: For all indices i, result[i] = x1[i] % x2[i]

  Mathematical properties:
  1. The result has the same sign as x2[i] (when x2[i] â‰  0)
  2. The absolute value of result[i] is less than the absolute value of x2[i]
  3. x1[i] = floor(x1[i] / x2[i]) * x2[i] + result[i]

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn numpy_mod(x1: Vec<i8>, x2: Vec<i8>) -> (result: Vec<i8>)
      requires 
          x1.len() == x2.len(),
          forall|i: int| 0 <= i < x2.len() ==> x2[i] as int != 0,
      ensures
          result.len() == x1.len(),
          forall|i: int| 0 <= i < result.len() ==> 
              #[trigger] result[i] as int == (x1[i] as int) % (x2[i] as int),
          forall|i: int| 0 <= i < result.len() ==> {
              let r = #[trigger] result[i] as int;
              let a = x1[i] as int;
              let b = x2[i] as int;
              /* Basic remainder property: a = floor_div(a, b) * b + r */
              a == (a / b) * b + r &&
              /* Result has same sign as divisor (when divisor is non-zero) */
              (b > 0 ==> r >= 0 && r < b) &&
              (b < 0 ==> r <= 0 && r > b)
          }

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}