vc-description: |-
  Returns a bool array, where True if input element is complex.
  Returns a bool array, where True if input element has non-zero imaginary part.
  For complex numbers, checks if imaginary part is non-zero.
  For real numbers, returns false for all elements.
  Specification: iscomplex returns true for elements with non-zero imaginary parts,
  false for elements with zero imaginary parts, with the following properties:
  1. Basic definition: returns true iff imaginary part is non-zero
  2. Real number detection: pure real numbers (imag = 0) return false
  3. Complex number detection: numbers with non-zero imaginary part return true
  4. Idempotent on boolean interpretation: the mathematical meaning is preserved
  5. Element-wise operation: each element is tested independently

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  /* Structure representing a complex number with float components */
  struct Complex {
      /* The real part of the complex number */
      real: f64,
      /* The imaginary part of the complex number */
      imag: f64,
  }

vc-spec: |-
  fn is_complex(x: &Vec<Complex>) -> (result: Vec<bool>)
      ensures
          result.len() == x.len(),
          forall|i: int| 0 <= i < x.len() ==> result[i] == (x[i].imag != 0.0),
          forall|i: int| 0 <= i < x.len() ==> (x[i].imag == 0.0 ==> result[i] == false),
          forall|i: int| 0 <= i < x.len() ==> (x[i].imag != 0.0 ==> result[i] == true),
          forall|i: int| 0 <= i < x.len() ==> (result[i] == true ==> x[i].imag != 0.0),
          forall|i: int| 0 <= i < x.len() ==> (result[i] == false ==> x[i].imag == 0.0)

vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }

vc-postamble: |-
  }
  fn main() {}

