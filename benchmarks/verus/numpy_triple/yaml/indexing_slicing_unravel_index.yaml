vc-description: |-
  Converts a flat index or array of flat indices into a tuple of coordinate arrays.
  This is the inverse operation of ravel_multi_index.
  Specification: unravel_index converts flat indices to multi-dimensional coordinates
  such that the coordinates are valid for the given shape and represent the correct
  positions in the multi-dimensional array.

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  spec fn vec_product(shape: Seq<usize>) -> nat
      decreases shape.len()
  {
      if shape.len() == 0 {
          1nat
      } else {
          (shape[0] as nat) * vec_product(shape.skip(1))
      }
  }

vc-spec: |-
  fn unravel_index(indices: Vec<usize>, shape: Vec<usize>) -> (result: Vec<Vec<usize>>)
      requires 
          shape.len() > 0,
          forall|i: int| 0 <= i < shape.len() ==> shape[i] > 0,
          forall|i: int| 0 <= i < indices.len() ==> (indices[i] as nat) < vec_product(shape@),
      ensures
          result.len() == indices.len(),
          forall|i: int| 0 <= i < result.len() ==> #[trigger] result[i].len() == shape.len(),
          forall|i: int, j: int| 0 <= i < result.len() && 0 <= j < shape.len() ==> 
              #[trigger] result[i][j] < shape[j],
          forall|i: int, j: int| 0 <= i < result.len() && 0 <= j < result.len() && i != j ==> 
              (indices[i] != indices[j] ==> result[i] != result[j])

vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }

vc-postamble: |-
  }
  fn main() {}

