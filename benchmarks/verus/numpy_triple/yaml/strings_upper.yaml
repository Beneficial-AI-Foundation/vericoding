vc-description: |-
  numpy.strings.upper: Return an array with the elements converted to uppercase.

  Converts each string element in the input vector to uppercase. This transformation
  applies to all alphabetic characters while preserving non-alphabetic characters
  (digits, punctuation, whitespace) unchanged.

  The function preserves the shape of the input array and handles empty strings
  appropriately by returning them unchanged.

  From NumPy documentation:
  - Parameters: a (array_like) - Input array with string dtype
  - Returns: out (ndarray) - Output array with elements converted to uppercase

  Mathematical Properties:
  1. Element-wise transformation: result[i] = upper(a[i]) for all i
  2. Length preservation: result[i].length = a[i].length for all i
  3. Case transformation: lowercase letters become uppercase, others unchanged
  4. Idempotent: upper(upper(x)) = upper(x)
  5. Preserves vector length: result.size = a.size

  Specification: numpy.strings.upper returns a vector where each string element
  is converted to uppercase.

  Mathematical Properties:
  1. Element-wise correctness: Each element is correctly converted to uppercase
  2. Length preservation: Each transformed string has the same length as the original
  3. Case transformation: Lowercase letters become uppercase, others unchanged
  4. Idempotent property: Applying upper twice gives the same result as applying it once
  5. Empty string handling: Empty strings remain empty
  6. Character-level correctness: Each character is correctly transformed

  Precondition: True (no special preconditions for uppercase conversion)
  Postcondition: For all indices i, result[i] is the uppercase version of a[i]

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn string_to_upper(s: Seq<char>) -> Seq<char> {
      s
  }

vc-helpers: |

vc-spec: |-
  fn upper(a: Vec<String>) -> (result: Vec<String>)
      ensures
          result.len() == a.len(),
          forall|i: int| 0 <= i < a.len() as int ==>
              result[i]@ == string_to_upper(a[i]@) &&
              result[i]@.len() == a[i]@.len()

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |2-

  }
  fn main() {}