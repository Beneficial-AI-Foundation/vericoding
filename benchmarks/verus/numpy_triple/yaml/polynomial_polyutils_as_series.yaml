vc-description: |-
  Return argument as a list of 1-d arrays. Takes a 2-d array of shape (M,N)
  and returns M arrays of size N (parsed by row). Optionally trims trailing 
  zeros from each array.
  
  Specification: as_series returns a list of 1-d arrays where each row of the
  input becomes a separate 1-d array. When trim is false, arrays are unchanged.
  When trim is true, trailing zeros are removed from each array.

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn as_series(arr: Vec<Vec<f64>>, trim: bool) -> (result: Vec<Vec<f64>>)
      requires 
          arr.len() > 0,
          forall|i: int| 0 <= i < arr.len() ==> arr[i].len() > 0,
      ensures 
          result.len() == arr.len(),
          forall|i: int| 0 <= i < result.len() ==> {
              if !trim {
                  result[i].len() == arr[i].len() &&
                  forall|j: int| 0 <= j < arr[i].len() ==> result[i][j] == arr[i][j]
              } else {
                  forall|j: int| 0 <= j < result[i].len() ==> {
                      result[i][j] == arr[i][j] || result[i][j] == 0.0
                  }
              }
          }

vc-code: |-
  {
      assume(false);
      Vec::new()
  }

vc-postamble: |-
  }
  fn main() {}

