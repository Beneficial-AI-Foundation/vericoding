vc-description: |-
  numpy.strings.greater_equal: Return the truth value of (x1 >= x2) element-wise for string arrays.
  
  Performs element-wise string comparison between two vectors of strings.
  Returns a boolean vector indicating whether each string in x1 is greater than or equal 
  to the corresponding string in x2 using lexicographic ordering.

  This function compares strings lexicographically and returns True for each
  position where x1[i] >= x2[i], False otherwise.

  Examples:
  - greater_equal ["apple", "banana"] ["apple", "banana"] = [true, true]
  - greater_equal ["zebra", "apple"] ["apple", "banana"] = [true, false]
  - greater_equal ["a", "bb"] ["aa", "b"] = [false, true]

  Specification: numpy.strings.greater_equal returns element-wise greater-than-or-equal comparison.

  This specification captures the mathematical properties of lexicographic string comparison:

  1. Core Property: Each position compares strings lexicographically
  2. Reflexive Property: Every string is >= itself
  3. Antisymmetric Property: If s1 >= s2 and s2 >= s1, then s1 = s2
  4. Transitive Property: If s1 >= s2 and s2 >= s3, then s1 >= s3
  5. Total Ordering: For any two strings, either s1 >= s2 or s2 >= s1 (or both)
  6. Consistency: Result is deterministic for same inputs

  Precondition: True (no special preconditions for string comparison)
  Postcondition: Element-wise lexicographic greater-than-or-equal comparison
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  spec fn string_lex_ge(s1: Seq<char>, s2: Seq<char>) -> bool
      decreases s1.len() + s2.len()
  {
      if s1.len() == 0 {
          true
      } else if s2.len() == 0 {
          true
      } else if s1[0] == s2[0] {
          string_lex_ge(s1.skip(1), s2.skip(1))
      } else {
          s1[0] >= s2[0]
      }
  }

  fn greater_equal(x1: Vec<String>, x2: Vec<String>) -> (result: Vec<bool>)
      requires x1.len() == x2.len(),
      ensures 
          result.len() == x1.len(),
          forall|i: int| 0 <= i < result.len() ==> result[i] == string_lex_ge(x1[i]@, x2[i]@),
          /* Reflexive property: every string is >= itself */
          forall|i: int| 0 <= i < result.len() && x1[i] == x2[i] ==> result[i] == true,
          /* Empty string properties */
          forall|i: int| 0 <= i < result.len() && x1[i]@ == Seq::<char>::empty() && x2[i]@ == Seq::<char>::empty() ==> result[i] == true,
          forall|i: int| 0 <= i < result.len() && x1[i]@ != Seq::<char>::empty() && x2[i]@ == Seq::<char>::empty() ==> result[i] == true,
vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {}