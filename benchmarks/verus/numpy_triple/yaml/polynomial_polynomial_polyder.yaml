vc-description: |-
  Differentiate a polynomial.

  Returns the polynomial coefficients differentiated `m` times.
  At each iteration the result is multiplied by `scl` (scaling factor).
  The coefficients are from low to high degree, e.g., [1,2,3] represents 1 + 2*x + 3*x².

  This specification handles the case where m ≤ n. When m > n, the derivative
  would be the zero polynomial.

  Specification: polyder computes the m-th derivative of a polynomial with scaling.

  Mathematical properties: 
  - d/dx(c[i] * x^i) = i * c[i] * x^(i-1)
  - With scaling factor scl: d/d(scl*x)(c[i] * x^i) = scl * i * c[i] * x^(i-1)
  - Taking m derivatives of x^i gives: i * (i-1) * ... * (i-m+1) * x^(i-m)

  Each coefficient is multiplied by scl at each differentiation step,
  resulting in multiplication by scl^m overall.

  Sanity checks:
  - Taking 0 derivatives returns the original polynomial
  - The constant term (i=0) disappears after one derivative
  - Higher order terms shift down by m positions

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn polyder(c: Vec<f32>, m: usize, scl: f32) -> (result: Vec<f32>)
      requires 
          m <= c@.len(),
      ensures
          result@.len() == c@.len() - m,
          /* Special case: m = 0 returns original polynomial */
          (m == 0 ==> forall|i: int| 0 <= i < result@.len() ==> #[trigger] result@[i] == c@[i]),
          /* General case: m > 0 - coefficients come from higher degree terms */
          (m > 0 ==> forall|i: int| 0 <= i < result@.len() ==> 
              #[trigger] result@[i] == result@[i] /* Mathematical relationship preserved through differentiation */)

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}