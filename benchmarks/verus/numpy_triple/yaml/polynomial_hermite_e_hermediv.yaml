vc-description: |-
  Divide one Hermite series by another, returning quotient and remainder.
  The dividend c1 and divisor c2 are coefficient vectors representing Hermite polynomials.
  The division is performed in the Hermite polynomial basis with reprojection.

  Specification: hermediv performs polynomial division of Hermite series, returning
  both quotient and remainder such that c1 = quo * c2 + rem (in Hermite basis).

  Key mathematical properties:
  1. Division identity: The dividend equals quotient times divisor plus remainder
  2. Remainder degree constraint: The remainder has degree less than the divisor
  3. Non-zero divisor: The divisor must not be the zero polynomial
  4. Reprojection: Results are reprojected onto the Hermite polynomial basis

  The specification captures the fundamental division algorithm for polynomials
  adapted to the Hermite polynomial basis set.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn hermediv(c1: Vec<f64>, c2: Vec<f64>) -> (result: (Vec<f64>, Vec<f64>))
      requires 
          c2.len() > 0,
          exists|i: int| 0 <= i < c2@.len() && c2[i] != 0.0,
      ensures 
          (result.0@.len() >= 1) &&
          (result.1@.len() < c2@.len()) &&
          /* Division property: degree of remainder < degree of divisor */
          /* This is the key mathematical property of polynomial division */
          (result.1@.len() < c2@.len()) &&
          /* Well-formedness: all coefficients are real numbers (not NaN or infinite) */
          (forall|i: int| 0 <= i < result.0@.len() ==> result.0[i] == result.0[i]) &&
          (forall|j: int| 0 <= j < result.1@.len() ==> result.1[j] == result.1[j]) &&
          /* Mathematical property: division preserves degree relationships */
          /* The quotient degree + divisor degree should not exceed dividend degree */
          (result.0@.len() + c2@.len() >= c1@.len() || c1@.len() == 0) &&
          /* Remainder constraint: remainder degree is less than divisor degree */
          /* This ensures the division algorithm terminates correctly */
          (result.1@.len() < c2@.len())

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}