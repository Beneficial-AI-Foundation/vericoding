vc-description: |-
  Dictionary mapping strings to corresponding type character codes
  
  A dictionary with string keys that represent NumPy dtype categories and string values that contain type codes for the NumPy data types in each category.
  
  Keys include:
  - 'Character': 'S1'
  - 'Integer': 'bhilqnp'
  - 'UnsignedInteger': 'BHILQNP'
  - 'Float': 'fdg'
  - 'Complex': 'FDG'
  - 'AllInteger': 'bBhHiIlLqQnNpP'
  - 'AllFloat': 'fdgFDG'
  - 'Datetime': 'Mm'
  - 'All': '?bhilqnpBHILQNPfdgFDGSUVOMm'
  
  This is useful for iterating over all dtypes of a certain kind.

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn typecodes(category: &str) -> (result: Option<&str>)
      ensures
          (category == "Character") ==> (result == Some("S1")),
          (category == "Integer") ==> (result == Some("bhilqnp")),
          (category == "UnsignedInteger") ==> (result == Some("BHILQNP")),
          (category == "Float") ==> (result == Some("fdg")),
          (category == "Complex") ==> (result == Some("FDG")),
          (category == "AllInteger") ==> (result == Some("bBhHiIlLqQnNpP")),
          (category == "AllFloat") ==> (result == Some("fdgFDG")),
          (category == "Datetime") ==> (result == Some("Mm")),
          (category == "All") ==> (result == Some("?bhilqnpBHILQNPfdgFDGSUVOMm")),
          (category != "Character" && category != "Integer" && category != "UnsignedInteger" && 
           category != "Float" && category != "Complex" && category != "AllInteger" && 
           category != "AllFloat" && category != "Datetime" && category != "All") ==> (result == None::<&str>)

vc-code: |-
  {
      assume(false);
      unreached();
  }

vc-postamble: |-
  }
  fn main() {}

