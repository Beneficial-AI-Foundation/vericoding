vc-description: |-
  numpy.full: Return a new array of given shape and type, filled with fill_value.
  
  Creates a new vector of size n where every element is set to the specified
  fill_value. This is the 1D version of numpy.full, focusing on the core
  functionality of creating uniform arrays.
  
  The function creates a vector filled with identical values, which is useful
  for initialization and creating constant arrays.
  
  Specification: numpy.full returns a vector where every element equals fill_value.
  
  This specification captures the complete mathematical behavior of numpy.full:
  
  1. **Sanity checks**:
     - The result vector has exactly n elements (enforced by type)
     - The function is deterministic (same inputs always produce same output)
  
  2. **Core property**: Every element in the result equals fill_value
     - ∀ i : Fin n, result[i] = fill_value
  
  3. **Mathematical properties**:
     - Uniformity: All elements are identical
     - Idempotence of fill value: Filling with the same value multiple times yields the same result
     - Independence from index: The value at any position doesn't depend on the position
  
  4. **Additional properties**:
     - For n = 0, the result is an empty vector
     - For n > 0, all elements are equal to each other
     - The result is functionally equivalent to Vector.replicate n fill_value
  
  5. **Relationship properties**:
     - full α n v is equivalent to creating an array and setting each element to v
     - If two vectors are created with full using the same fill_value and size,
       they are element-wise equal
     - full preserves the fill_value exactly (no transformation or casting)
  
  /* Core property: every element equals fill_value */
  
  /* Uniformity property: all elements are equal to each other */
  
  /* First and last element property (when n > 0) */

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn full<T>(n: usize, fill_value: T) -> (result: Vec<T>)
      ensures 
          result.len() == n,
  
          forall|i: int| 0 <= i < n ==> result[i] == fill_value,
  
          forall|i: int, j: int| 0 <= i < n && 0 <= j < n ==> result[i] == result[j],
  
          n > 0 ==> result[0] == fill_value,
          n > 0 ==> result[(n-1) as int] == fill_value,

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}

