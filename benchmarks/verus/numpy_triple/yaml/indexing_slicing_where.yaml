vc-description: |-
  Return elements chosen from x or y depending on condition.
  Given vectors of equal length for condition, x, and y, constructs a result vector
  where each element is selected from x if the corresponding condition is true,
  otherwise from y.
  
  This implements the core ternary conditional operation:
  result[i] = condition[i] ? x[i] : y[i]
  
  The function requires all three input vectors to have the same length, which
  is enforced by the type system using Vector types.
  
  Specification: where returns elements chosen from x or y based on condition.
  This captures the essential behavior of numpy.where function:
  
  Mathematical properties:
  1. The result has the same length as all input vectors
  2. For each position i, if condition[i] is true, then result[i] = x[i]
  3. For each position i, if condition[i] is false, then result[i] = y[i]
  4. The function is deterministic - same inputs always produce same output
  5. The result is well-defined for all inputs (no partial functions)
  
  This specification captures the core ternary conditional semantics:
  result[i] = if condition.get i then x.get i else y.get i
  
  The use of Vector types ensures type safety and eliminates the need for
  size compatibility checks at runtime. All vectors must have the same length
  by construction.

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn where_fn(condition: Vec<bool>, x: Vec<f32>, y: Vec<f32>) -> (result: Vec<f32>)
      requires 
          condition.len() == x.len(),
          x.len() == y.len(),
      ensures 
          result.len() == condition.len(),
          forall|i: int| 0 <= i < condition.len() ==> 
              result[i] == if condition[i] { x[i] } else { y[i] }

vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }

vc-postamble: |-
  }
  fn main() {}

