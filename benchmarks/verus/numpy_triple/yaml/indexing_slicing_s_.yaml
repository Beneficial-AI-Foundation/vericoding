vc-description: |-
  Index expression builder that creates slice objects for array indexing.
  This is a simplified version of numpy.s_ that creates slice objects
  for use in array indexing operations.
  
  Specification: s_ creates a well-formed slice object
  This comprehensive specification captures:
  1. The slice object contains the provided start, stop, and step values
  2. If step is provided, it must be positive (non-zero)
  3. If start and stop are both provided, start should be less than or equal to stop
  4. The resulting slice is valid for array indexing operations
  5. The slice preserves the ordering constraints (start â‰¤ stop when both present)
  6. The step value, if present, is positive for forward slicing
  
  /* A slice object representing a range of indices for array slicing.
     Contains start, stop, and step parameters for creating slices. */
  
  /* The starting index of the slice (inclusive). If None, starts from the beginning. */
  
  /* The stopping index of the slice (exclusive). If None, goes to the end. */
  
  /* The step size for the slice. If None, defaults to 1. */

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  pub struct Slice {
  
      pub start: Option<usize>,
  
      pub stop: Option<usize>,
  
      pub step: Option<usize>,
  }

vc-helpers: |-

vc-spec: |-
  fn s_(start: Option<usize>, stop: Option<usize>, step: Option<usize>) -> (slice: Slice)
      requires 
          step.is_some() ==> step.unwrap() > 0,
          (start.is_some() && stop.is_some()) ==> start.unwrap() <= stop.unwrap(),
      ensures 
          slice.start == start,
          slice.stop == stop,
          slice.step == step,
          slice.step.is_some() ==> slice.step.unwrap() > 0,
          (slice.start.is_some() && slice.stop.is_some()) ==> slice.start.unwrap() <= slice.stop.unwrap(),

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}