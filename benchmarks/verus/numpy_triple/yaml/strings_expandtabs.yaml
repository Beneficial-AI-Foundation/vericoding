vc-description: |-
  Return a copy of each string element where all tab characters are replaced by spaces
  
  Expand tabs in strings to spaces with configurable tab size
  
  Specification: expandtabs replaces tab characters with appropriate number of spaces
  
  /* Core property: result contains no tab characters */
  
  /* Identity property: strings without tabs remain unchanged */
  
  /* Length property: result is at least as long as original */
  
  /* Tab expansion property: tabs are replaced by 1 to tab_sz spaces */

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn expandtabs(a: Vec<String>, tabsize: Vec<u8>) -> (result: Vec<String>)
      requires 
          a.len() == tabsize.len(),
          forall|i: int| 0 <= i < tabsize.len() ==> #[trigger] tabsize[i] > 0,
      ensures
          result.len() == a.len(),
          forall|i: int| 0 <= i < result.len() ==> {
              let orig_str = #[trigger] &a[i];
              let result_str = &result[i];
              let tab_sz = tabsize[i] as nat;
  
              (forall|c: char| #[trigger] result_str@.contains(c) ==> c != '\t') &&
  
              (!orig_str@.contains('\t') ==> result_str@ == orig_str@) &&
  
              (result_str@.len() >= orig_str@.len()) &&
  
              (orig_str@.contains('\t') ==> result_str@.len() > orig_str@.len())
          }

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}