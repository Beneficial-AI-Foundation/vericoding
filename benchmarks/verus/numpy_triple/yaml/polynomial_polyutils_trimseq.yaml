vc-description: |-
  Remove small Poly series coefficients.
  
  Remove trailing zeros from a sequence of polynomial coefficients.
  Returns the sequence with trailing zeros removed. If the sequence would be empty 
  after trimming, returns the first element. Empty sequences are handled.
  
  Specification: trimseq removes trailing zeros while preserving at least one element.
  For non-empty sequences, if the last element is non-zero, return the sequence unchanged.
  If the last element is zero, trim trailing zeros but always keep at least one element.
  
  /* If empty or last element is non-zero, return unchanged */
  
  /* If last element is zero, trim properly */
  
  /* There exists a position k where trimming occurs */
  
  /* All elements after k in original sequence are zero */
  
  /* Result preserves elements up to k, zeros after */
  
  /* Element at k is non-zero unless k = 0 (all zeros case) */

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn trimseq(seq: Vec<f32>) -> (result: Vec<f32>)
      ensures
          result.len() == seq.len(),
  
          (seq.len() == 0 || (seq.len() > 0 && seq[seq.len() - 1] != 0.0f32)) ==> result@ == seq@,
  
          (seq.len() > 0 && seq[seq.len() - 1] == 0.0f32) ==>
  
              exists|k: int| 
                  0 <= k < seq.len() as int &&
  
                  (forall|j: int| k < j < seq.len() as int ==> seq[j] == 0.0f32) &&
  
                  (forall|i: int| 0 <= i <= k ==> result[i] == seq[i]) &&
                  (forall|i: int| k < i < result.len() as int ==> result[i] == 0.0f32) &&
  
                  (k > 0 ==> seq[k] != 0.0f32)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}