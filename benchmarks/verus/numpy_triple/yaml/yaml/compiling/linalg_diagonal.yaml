vc-description: |-
  numpy.linalg.diagonal: Returns specified diagonals of a matrix.
  
  Extracts the diagonal elements from a matrix. The offset parameter
  controls which diagonal to extract:
  - offset = 0: main diagonal (elements at position [i,i])
  - offset > 0: diagonals above the main diagonal (elements at [i,i+offset])
  - offset < 0: diagonals below the main diagonal (elements at [i-offset,i])
  
  For simplicity, we return a vector of size min(m,n) which is valid for offset=0.
  The actual diagonal length depends on the offset value and matrix dimensions.
  
  Specification: numpy.linalg.diagonal returns the diagonal elements of a matrix.
  
  Precondition: The matrix must be non-empty (both dimensions > 0)
  Postcondition: The result contains the diagonal elements extracted from the matrix.
                 - For offset = 0: result[i] = x[i][i] (main diagonal)
                 - The result vector has the same type as the input matrix elements
                 - The extraction respects the mathematical definition of matrix diagonals

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn spec_min(a: int, b: int) -> int {
      if a <= b { a } else { b }
  }

  fn numpy_diagonal(x: Vec<Vec<f32>>, offset: i32) -> (result: Vec<f32>)
      requires 
          x.len() > 0,
          x.len() < usize::MAX,
          forall|i: int| 0 <= i < x.len() ==> x[i].len() > 0,
          forall|i: int| 0 <= i < x.len() ==> x[i].len() == x[0].len(),
      ensures
          result.len() == spec_min(x.len() as int, x[0].len() as int),
          offset == 0 ==> forall|i: int| 0 <= i < result.len() ==> 
              result[i] == x[i][i],
          forall|i: int| 0 <= i < result.len() ==> 
              exists|r: int, c: int| 
                  0 <= r < x.len() && 0 <= c < x[0].len() &&
                  result[i] == x[r][c],

vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}