vc-description: |-
  Test whether all array elements evaluate to True.
  Elements are considered True if they are non-zero.
  NaN, positive infinity and negative infinity evaluate to True.

  Specification: all returns True if and only if all elements are non-zero.
  This includes proper handling of special float values:
  - NaN evaluates to True (it is not equal to zero)
  - Positive and negative infinity evaluate to True (they are not equal to zero)
  - Only 0.0 and -0.0 evaluate to False
  
  Mathematical properties:
  - Empty vector returns True (vacuous truth)
  - all is monotonic: if all(a) is True and b has same non-zero elements, then all(b) is True
  - all(a) = not(any(map(λx. x = 0, a))) - equivalent to checking no element is zero
  
  Sanity checks:
  - For empty vector (n = 0), the result is True by vacuous truth
  - For single element [x], result is True iff x ≠ 0
  - For vector with all non-zero elements, result is True
  - For vector with at least one zero element, result is False
  
  Additional properties:
  - Idempotent: all(all(a)) = all(a) (when treating Bool as numeric)
  - Distributive over logical AND: all(a) ∧ all(b) → all(pointwise_and(a, b))
  - Relationship to logical AND reduction: all(a) = fold(∧, true, map(≠ 0, a))

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn all(a: Vec<f32>) -> (result: bool)
      ensures
          result == (forall|i: int| 0 <= i < a.len() ==> a[i] != 0.0f32),
          (a.len() == 0 ==> result == true),
          ((exists|i: int| 0 <= i < a.len() && a[i] == 0.0f32) ==> result == false),
          ((forall|i: int| 0 <= i < a.len() ==> a[i] != 0.0f32) ==> result == true),

vc-code: |-
  {
      // impl-start
      assume(false);
      false
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}