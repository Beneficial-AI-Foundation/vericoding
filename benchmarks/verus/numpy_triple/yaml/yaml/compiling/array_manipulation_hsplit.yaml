vc-description: |-
  /*
  Split an array into multiple sub-arrays horizontally (column-wise).
  
  Split a 1D array into multiple sub-arrays horizontally.
  For simplicity, we focus on the 1D case where the array is split into 
  k equal parts. In numpy, hsplit on 1D arrays is equivalent to split with axis=0.
  
  Specification: hsplit divides a 1D array into k equal sub-arrays.
  Each sub-array has n/k elements. The i-th sub-array contains elements 
  from index i*(n/k) to (i+1)*(n/k)-1 of the original array.
  
  Mathematical properties:
  1. The concatenation of all sub-arrays equals the original array
  2. Each sub-array has exactly n/k elements
  3. Elements are distributed in order without overlapping
  */
vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn hsplit(arr: Vec<f32>, k: usize) -> (result: Vec<Vec<f32>>)
      requires 
          k > 0,
          arr.len() % k == 0,
      ensures
          result.len() == k,
          forall|part_idx: int| 0 <= part_idx < k ==> result[part_idx].len() == arr.len() / k,
          forall|part_idx: int, elem_idx: int| 
              0 <= part_idx < k && 0 <= elem_idx < arr.len() / k ==>
              result[part_idx][elem_idx] == arr[part_idx * (arr.len() / k) + elem_idx],
          forall|i: int| 0 <= i < arr.len() ==>
              exists|p: int, e: int| 
                  0 <= p < k && 0 <= e < arr.len() / k &&
                  i == p * (arr.len() / k) + e &&
                  arr[i] == result[p][e]

vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}