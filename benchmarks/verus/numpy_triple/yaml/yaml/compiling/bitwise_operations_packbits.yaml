vc-description: |-
  /*
  Packs binary-valued elements into bits in a UInt8 array.
  Each group of 8 binary values is packed into one UInt8.
  The result is padded with zeros if needed.
  
  Specification: packbits correctly packs binary values into UInt8 bytes according to bitorder.
  For big-endian: first element goes to MSB (bit 7)
  For little-endian: first element goes to LSB (bit 0)
  */
vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  /* Enumeration for bit ordering in packbits */
  #[derive(PartialEq, Eq)]
  enum BitOrder {
      Big,    // MSB first (default): bit 7 is first element
      Little  // LSB first: bit 0 is first element
  }

vc-helpers: |-

vc-spec: |-
  fn packbits(a: Vec<bool>, bitorder: BitOrder) -> (result: Vec<u8>)
      requires a.len() > 0,
      ensures 
          result.len() == (a.len() + 7) / 8,
          forall|byte_idx: int| 0 <= byte_idx < result.len() ==> {
              let start_idx = byte_idx * 8;
              let bits_in_byte = if start_idx + 8 <= a.len() { 8 } else { a.len() - start_idx };
              match bitorder {
                  BitOrder::Big => {
                      // Big-endian: bit 7 is first, bit 0 is last
                      forall|bit_pos: int| 0 <= bit_pos < bits_in_byte ==> {
                          let bit_value = if start_idx + bit_pos < a.len() && a[start_idx + bit_pos] { 1u8 } else { 0u8 };
                          (result[byte_idx] & (1u8 << (7 - bit_pos))) == (bit_value << (7 - bit_pos))
                      }
                  },
                  BitOrder::Little => {
                      // Little-endian: bit 0 is first, bit 7 is last
                      forall|bit_pos: int| 0 <= bit_pos < bits_in_byte ==> {
                          let bit_value = if start_idx + bit_pos < a.len() && a[start_idx + bit_pos] { 1u8 } else { 0u8 };
                          (result[byte_idx] & (1u8 << bit_pos)) == (bit_value << bit_pos)
                      }
                  }
              }
          }

vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}