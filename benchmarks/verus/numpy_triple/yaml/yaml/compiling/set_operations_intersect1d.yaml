vc-description: |-
  /*
  Find the intersection of two arrays.
  Returns the sorted, unique values that are in both input arrays.
  Specification: intersect1d returns a sorted array of unique values 
  that exist in both input arrays
  */
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  fn intersect1d(ar1: Vec<i32>, ar2: Vec<i32>) -> (result: Vec<i32>)
      ensures
          /* Result contains only values that exist in both arrays */
          forall|i: int| 0 <= i < result.len() ==> 
              (exists|j: int| 0 <= j < ar1.len() && result[i] == ar1[j]) &&
              (exists|l: int| 0 <= l < ar2.len() && result[i] == ar2[l]),
          /* Result is sorted in ascending order */
          forall|i: int, j: int| 0 <= i < j < result.len() ==> result[i] <= result[j],
          /* Result contains unique values (no duplicates) */
          forall|i: int, j: int| 0 <= i < result.len() && 0 <= j < result.len() && i != j ==> result[i] != result[j],
          /* Result is complete (contains all common values) */
          forall|val: i32| 
              (exists|i: int| 0 <= i < ar1.len() && ar1[i] == val) && 
              (exists|j: int| 0 <= j < ar2.len() && ar2[j] == val) ==>
              (exists|l: int| 0 <= l < result.len() && result[l] == val)
vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {}