vc-description: |-
  /*
  Evaluate a 2-D HermiteE series at points (x, y).
      
  This function computes the bivariate HermiteE polynomial:
  p(x,y) = âˆ‘_{i,j} c_{i,j} * He_i(x) * He_j(y)
      
  where He_i and He_j are the HermiteE basis polynomials.
  
  This function implements the mathematical formula:
  p(x,y) = âˆ‘_{i,j} c_{i,j} * He_i(x) * He_j(y)
  
  Key properties:
  1. Bivariate polynomial evaluation using HermiteE basis
  2. Mathematical correctness and linearity properties
  3. Point-wise evaluation for corresponding (x,y) pairs
  */
vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn hermite_e_basis(n: nat, x: int) -> int
      decreases n
  {
      if n == 0 {
          1
      } else if n == 1 {
          x
      } else {
          x * hermite_e_basis((n-1) as nat, x) - (n-1) as int * hermite_e_basis((n-2) as nat, x)
      }
  }

vc-spec: |-
  fn hermeval2d(x: Vec<f32>, y: Vec<f32>, c: Vec<Vec<f32>>) -> (result: Vec<f32>)
      requires 
          x.len() == y.len(),
          x.len() > 0,
          c.len() > 0,
          forall|i: int| 0 <= i < c.len() ==> c[i].len() > 0,
      ensures 
          result.len() == x.len(),
          forall|k: int| 0 <= k < result.len() ==> exists|hermite_basis: FnSpec(nat, int) -> int|
              (forall|t: int| hermite_basis(0nat, t) == 1) &&
              (c.len() > 0 ==> forall|t: int| hermite_basis(1nat, t) == t) &&
              (forall|i: nat, t: int| i + 1 < c.len() ==> 
                  hermite_basis(i + 2, t) == t * hermite_basis(i + 1, t) - (i as int + 1) * hermite_basis(i, t)),

vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}