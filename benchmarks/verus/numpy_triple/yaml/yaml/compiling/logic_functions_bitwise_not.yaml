vc-description: |-
  Compute bit-wise inversion, or bit-wise NOT, element-wise.
  
  Computes the bit-wise NOT of the underlying binary representation of
  the integers in the input arrays. This ufunc implements the C/Python
  operator ~.
  
  For signed integer inputs, the bit-wise NOT of the absolute value is
  returned. In a two's-complement system, this operation effectively flips
  all the bits, which results in -(x + 1). This is the most common method
  of representing signed integers on computers.
  
  Returns an array of the same shape as x, containing the bitwise NOT values.
  
  Specification: numpy.bitwise_not returns a vector where each element is the
  bitwise NOT of the corresponding element in x.
  
  Precondition: True (no special preconditions for bitwise NOT)
  Postcondition: For all indices i, result[i] = -(x[i] + 1)
  
  This specification captures the mathematical property that bitwise NOT
  of an integer x in two's complement representation equals -(x + 1).
  
  Key properties:
  - Bitwise NOT is its own inverse: ~~x = x
  - For any integer x: ~x = -(x + 1)
  - The operation is element-wise for arrays

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn numpy_bitwise_not(x: Vec<i32>) -> (result: Vec<i32>)
      ensures 
          result.len() == x.len(),
          forall|i: int| 0 <= i < result.len() ==> result[i] == -(x[i] + 1)

vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}