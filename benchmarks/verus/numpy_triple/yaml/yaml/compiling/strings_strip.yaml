vc-description: |-
  numpy.strings.strip: For each element in a vector, return a copy with the leading and trailing characters removed.
  
  Removes both leading and trailing characters from each string element in the input vector.
  This is a combination of lstrip and rstrip operations. The behavior depends on the chars parameter:
  - If chars is None, whitespace characters are removed from both ends
  - If chars is provided, any combination of those characters is removed from both ends
  
  The function preserves the shape of the input array and handles empty strings
  appropriately by returning them unchanged.
  
  From NumPy documentation:
  - Parameters: a (array_like) - Input array with string dtype
                chars (optional) - Characters to remove from both ends
  - Returns: out (ndarray) - Output array with leading and trailing characters removed
  
  Mathematical Properties:
  1. Element-wise transformation: result[i] = strip(a[i], chars) for all i
  2. Length preservation or reduction: result[i].length â‰¤ a[i].length for all i
  3. Substring property: result[i] is a substring of a[i] for all i
  4. Character set removal: only characters in chars are removed from both ends
  5. Preserves vector length: result.size = a.size
  6. Combination of lstrip and rstrip: strip(s) = rstrip(lstrip(s))

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn strip(a: Vec<String>, chars: Option<String>) -> (result: Vec<String>)
      ensures
          result.len() == a.len(),
          forall|i: int| #[trigger] result[i] == result[i] && 0 <= i < a.len() ==> {
              let original = a[i];
              let res = result[i];
              res@.len() <= original@.len() &&
              (original@.len() == 0 ==> res@.len() == 0)
          }

vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}