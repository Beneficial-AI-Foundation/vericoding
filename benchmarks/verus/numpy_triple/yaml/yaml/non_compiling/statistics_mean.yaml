vc-description: |-
  /*
  Computes the arithmetic mean of all elements in a non-empty vector.
  
  Specification: mean computes the arithmetic average of all elements.
  Mathematical properties:
  1. The result is the sum of all elements divided by the count
  2. The mean lies between the minimum and maximum values
  3. For constant vectors, mean equals the constant value
  */
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  spec fn vec_sum(a: Seq<f32>) -> f32 
      decreases a.len()
  {
      if a.len() == 0 {
          0.0
      } else {
          a[0] + vec_sum(a.skip(1))
      }
  }

  spec fn vec_min(a: Seq<f32>) -> f32
      requires a.len() > 0,
      decreases a.len()
  {
      if a.len() == 1 {
          a[0]
      } else {
          let rest_min = vec_min(a.skip(1));
          if a[0] <= rest_min { a[0] } else { rest_min }
      }
  }

  spec fn vec_max(a: Seq<f32>) -> f32
      requires a.len() > 0,
      decreases a.len()
  {
      if a.len() == 1 {
          a[0]
      } else {
          let rest_max = vec_max(a.skip(1));
          if a[0] >= rest_max { a[0] } else { rest_max }
      }
  }

  spec fn all_equal(a: Seq<f32>) -> bool {
      forall|i: int, j: int| 0 <= i < a.len() && 0 <= j < a.len() ==> a[i] == a[j]
  }

  fn mean(a: Vec<f32>) -> (result: f32)
      requires a.len() > 0,
      ensures 
          result == vec_sum(a@) / (a.len() as f32),
          vec_min(a@) <= result <= vec_max(a@),
          all_equal(a@) ==> result == a[0]
vc-code: |-
  {
      // impl-start
      assume(false);
      0.0
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {}