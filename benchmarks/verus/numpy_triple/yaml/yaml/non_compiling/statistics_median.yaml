vc-description: |-
  Compute the median of a vector.
  For odd-length vectors, returns the middle value of the sorted array.
  For even-length vectors, returns the average of the two middle values.
  
  Specification: median returns the middle value(s) of a sorted vector.
  - For odd length (n+1), the median is the middle element when sorted
  - For even length (n+1), the median is the average of the two middle elements when sorted
  - The median divides the data such that approximately half the values are ≤ it,
    and approximately half are ≥ it
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  /* Helper spec function for checking if a sequence is sorted */
  spec fn is_sorted(v: Seq<f32>) -> bool {
      forall|i: int, j: int| 0 <= i < j < v.len() ==> 
          v.index(i) <= v.index(j)
  }

  /* Helper spec function for checking if two sequences are permutations */
  spec fn is_permutation(a: Seq<f32>, b: Seq<f32>) -> bool {
      a.len() == b.len() &&
      forall|x: f32| count_occurrences(a, x) == count_occurrences(b, x)
  }

  /* Count how many times an element appears in a sequence */
  spec fn count_occurrences(s: Seq<f32>, x: f32) -> nat
      decreases s.len()
  {
      if s.len() == 0 {
          0
      } else if s.index(0) == x {
          1 + count_occurrences(s.skip(1), x)
      } else {
          count_occurrences(s.skip(1), x)
      }
  }

  fn median(a: Vec<f32>) -> (result: f32)
      requires a.len() > 0,
      ensures 
          exists|sorted: Seq<f32>| 
              is_permutation(a@, sorted) &&
              is_sorted(sorted) &&
              if a.len() % 2 == 1 {
                  /* odd case: result is the middle element */
                  result == sorted.index(((a.len() - 1) / 2) as int)
              } else {
                  /* even case: result is average of two middle elements */
                  exists|mid1: f32, mid2: f32| 
                      mid1 == sorted.index((a.len() / 2 - 1) as int) &&
                      mid2 == sorted.index((a.len() / 2) as int) &&
                      result == (mid1 + mid2) / 2.0
              }
vc-code: |-
  {
      // impl-start
      assume(false);
      0.0
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {}