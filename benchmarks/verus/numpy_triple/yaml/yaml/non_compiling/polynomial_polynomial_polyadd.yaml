vc-description: |-
  Add one polynomial to another.
      
      Given two polynomials represented as coefficient vectors (from lowest to highest degree),
      returns their sum. The result has length equal to the maximum of the input lengths,
      with shorter polynomials implicitly padded with zeros.
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  fn polyadd(c1: Vec<f32>, c2: Vec<f32>) -> (result: Vec<f32>)
      ensures
          result.len() == std::cmp::max(c1.len(), c2.len()),
          forall|i: int| 0 <= i < result.len() ==> {
              if i < c1.len() && i < c2.len() {
                  result[i] == c1[i] + c2[i]
              } else if i < c1.len() && i >= c2.len() {
                  result[i] == c1[i]
              } else if i >= c1.len() && i < c2.len() {
                  result[i] == c2[i]
              } else {
                  result[i] == 0.0
              }
          }
vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {}