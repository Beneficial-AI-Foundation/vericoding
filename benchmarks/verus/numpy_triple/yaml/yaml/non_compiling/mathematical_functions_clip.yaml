vc-description: |-
  numpy.clip: Clip (limit) the values in an array.

  Given an interval [min_val, max_val], values outside the interval are clipped to the interval edges.
  Values smaller than min_val become min_val, and values larger than max_val become max_val.
  
  This operation is equivalent to but faster than np.minimum(max_val, np.maximum(arr, min_val)).
  The function performs element-wise clipping and preserves the shape of the input array.
  
  From NumPy documentation:
  - Parameters: 
    - a (array_like) - Array containing elements to clip
    - a_min (scalar) - Minimum value threshold
    - a_max (scalar) - Maximum value threshold
  - Returns: clipped array with values limited to [a_min, a_max]
  
  Special behavior:
  - If a_min > a_max, all values become a_max
  - No validation is performed to ensure a_min < a_max

  Specification: numpy.clip returns a vector where each element is clipped to the interval [min_val, max_val].

  Mathematical Properties:
  1. Element-wise correctness: 
     - If arr[i] < min_val, then result[i] = min_val
     - If arr[i] > max_val, then result[i] = max_val  
     - If min_val ≤ arr[i] ≤ max_val, then result[i] = arr[i]
  2. Boundary behavior: Values are clamped to the closed interval [min_val, max_val]
  3. Preserves vector length: result.size = arr.size
  4. Idempotency: clip(clip(arr, min_val, max_val), min_val, max_val) = clip(arr, min_val, max_val)
  5. Monotonicity: If min_val ≤ max_val, then min_val ≤ result[i] ≤ max_val for all i
  6. Special case: If min_val > max_val, then result[i] = max_val for all i
  
  Precondition: True (no special preconditions, handles all real number inputs)
  Postcondition: For all indices i, result[i] is the clipped value of arr[i]

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn clip(arr: Vec<f32>, min_val: f32, max_val: f32) -> (result: Vec<f32>)
      ensures 
          result.len() == arr.len(),
          forall|i: int| 0 <= i < arr.len() ==> {
              if min_val <= max_val {
                  if arr[i] < min_val {
                      result[i] == min_val
                  } else if arr[i] > max_val {
                      result[i] == max_val
                  } else {
                      result[i] == arr[i]
                  }
              } else {
                  result[i] == max_val
              }
          }

vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}