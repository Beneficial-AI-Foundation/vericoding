vc-description: |-
  /*
  Computes the element-wise inverse tangent of a vector
  */
vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn arctan(x: Vec<f32>) -> (result: Vec<f32>)
      requires x.len() > 0,
      ensures 
          result.len() == x.len(),
          forall|i: int| 0 <= i < result.len() as int ==> {
              -1.5708 < result[i] as real && (result[i] as real) < 1.5708 &&
              (forall|j: int| 0 <= j < result.len() as int && (x[i] as real) < (x[j] as real) ==> (result[i] as real) < (result[j] as real)) &&
              ((x[i] as real) > 0.0 ==> (result[i] as real) > 0.0) &&
              ((x[i] as real) < 0.0 ==> (result[i] as real) < 0.0) &&
              (x[i] == 0.0f32 ==> result[i] == 0.0f32) &&
              ((x[i] as real).abs() < 0.1 ==> ((result[i] as real) - (x[i] as real)).abs() < 0.01) &&
              ((x[i] as real) > 10.0 ==> (result[i] as real) > 1.4) &&
              ((x[i] as real) < -10.0 ==> (result[i] as real) < -1.4) &&
              (result[i] as real).abs() <= 1.5708 &&
              (((x[i] as real) - 1.0).abs() < 1e-10 ==> ((result[i] as real) - 0.7854).abs() < 1e-6) &&
              (((x[i] as real) + 1.0).abs() < 1e-10 ==> ((result[i] as real) + 0.7854).abs() < 1e-6)
          }

vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }

vc-postamble: |-
  
  }
  fn main() {}