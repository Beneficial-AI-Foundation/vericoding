vc-description: |-
  /*
  numpy.strings.islower: Returns true for each element if all cased characters in the string are lowercase and there is at least one cased character, false otherwise.
  
  Tests whether all cased characters in each string are lowercase.
  A string is considered to satisfy islower if:
  1. It contains at least one cased character (letters that have uppercase/lowercase versions)
  2. All cased characters are lowercase
  3. Non-cased characters (numbers, symbols, whitespace) are ignored for the check
  
  Examples:
  - Empty string "" → false (no cased characters)
  - "123" → false (no cased characters)
  - "abc" → true (all lowercase, has cased characters)
  - "ABC" → false (has uppercase)
  - "aBc" → false (has uppercase)
  - "abc123" → true (has lowercase, no uppercase)
  - "   " → false (no cased characters)
  */
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  spec fn uninterp is_alphabetic(c: char) -> bool;

  spec fn uninterp is_lowercase(c: char) -> bool;

  spec fn has_cased_char(s: &str) -> bool {
      exists|i: int| 0 <= i < s.len() && is_alphabetic(s.get_char(i))
  }

  spec fn all_cased_are_lowercase(s: &str) -> bool {
      forall|i: int| 0 <= i < s.len() && is_alphabetic(s.get_char(i)) ==> is_lowercase(s.get_char(i))
  }

  fn islower(a: Vec<String>) -> (result: Vec<bool>)
      ensures
          result.len() == a.len(),
          forall|i: int| 0 <= i < a.len() ==> 
              result[i] == (has_cased_char(&a[i]) && all_cased_are_lowercase(&a[i]))
vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {}