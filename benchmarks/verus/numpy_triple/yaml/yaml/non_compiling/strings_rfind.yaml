vc-description: |-
  For each element, return the highest index in the string where substring sub is found, such that sub is contained within [start, end]
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  fn rfind(a: Vec<String>, sub: Vec<String>, start: Vec<i32>, end_pos: Vec<i32>) -> (result: Vec<i32>)
      requires 
          a.len() == sub.len() && sub.len() == start.len() && start.len() == end_pos.len(),
          forall|i: int| 0 <= i < start.len() ==> 0 <= start[i] && start[i] <= end_pos[i],
      ensures 
          result.len() == a.len(),
          forall|i: int| 0 <= i < result.len() ==> {
              /* Basic range constraint: result is -1 or within string bounds */
              (result[i] == -1 || (0 <= result[i] && result[i] < a[i].len() as i32)) &&
              /* If result is -1, no occurrence of substring within the specified range */
              (result[i] == -1 ==> 
                  forall|j: int| start[i] <= j && j + sub[i].len() as i32 <= end_pos[i] + 1 && 
                           j + sub[i].len() as i32 <= a[i].len() as i32 ==> 
                      !a[i].subrange(j as usize, (j + sub[i].len() as i32) as usize).eq(&sub[i])) &&
              /* If result is non-negative, it's the rightmost valid occurrence */
              (result[i] >= 0 ==> 
                  start[i] <= result[i] && 
                  result[i] + sub[i].len() as i32 <= end_pos[i] + 1 &&
                  a[i].subrange(result[i] as usize, (result[i] + sub[i].len() as i32) as usize).eq(&sub[i]) &&
                  forall|j: int| result[i] < j && j + sub[i].len() as i32 <= end_pos[i] + 1 && 
                            start[i] <= j && j + sub[i].len() as i32 <= a[i].len() as i32 ==> 
                      !a[i].subrange(j as usize, (j + sub[i].len() as i32) as usize).eq(&sub[i]))
          },
vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {}