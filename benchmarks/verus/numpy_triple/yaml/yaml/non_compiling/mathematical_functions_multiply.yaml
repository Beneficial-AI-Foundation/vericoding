vc-description: |-
  numpy.multiply: Multiply arguments element-wise.
  
  Multiplies two vectors element-wise. If the vectors have the same shape,
  each element of the result is the product of the corresponding elements
  from the input vectors.
  
  This is equivalent to x1 * x2 in terms of array broadcasting.
  The function supports all numeric types and handles overflow according
  to the IEEE 754 standard for floating-point arithmetic.
  
  From NumPy documentation:
  - Parameters: x1, x2 (array_like) - The arrays to be multiplied
  - Returns: multiply (ndarray) - The product of x1 and x2, element-wise
  - The function is a universal function (ufunc) implemented in C
  - Uses optimized C loops for different data types
  
  Specification: numpy.multiply returns a vector where each element is the product
  of the corresponding elements from x1 and x2.
  
  Mathematical Properties:
  1. Element-wise correctness: result[i] = x1[i] * x2[i]
  2. Commutativity: multiply(x1, x2) = multiply(x2, x1)
  3. Associativity: multiply(multiply(x1, x2), x3) = multiply(x1, multiply(x2, x3))
  4. Identity: multiply(x, ones) = x
  5. Zero property: multiply(x, zeros) = zeros
  6. Preserves vector length: result.size = x1.size = x2.size
  7. Handles finite arithmetic: supports IEEE 754 floating-point multiplication
  8. Distributivity over addition: multiply(x1, add(x2, x3)) = add(multiply(x1, x2), multiply(x1, x3))
  
  Precondition: True (no special preconditions for basic multiplication)
  Postcondition: For all indices i, result[i] = x1[i] * x2[i]

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn multiply(x1: Vec<f32>, x2: Vec<f32>) -> (result: Vec<f32>)
      requires 
          x1.len() == x2.len(),
      ensures 
          result.len() == x1.len(),
          forall|i: int| 0 <= i < result.len() ==> result[i] == x1[i] * x2[i]

vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}