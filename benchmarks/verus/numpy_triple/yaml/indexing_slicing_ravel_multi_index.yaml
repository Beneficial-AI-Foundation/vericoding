vc-description: |-
  Converts a tuple of index arrays into an array of flat indices, applying boundary modes to the multi-index.
  
  Convert 2D multi-indices to flat indices using C-style (row-major) ordering.
  
  Takes arrays of row and column indices and converts them to flat indices
  for an array with given dimensions. The conversion uses row-major ordering
  where flat_index = row_index * cols + col_index.
  
  The function requires that all indices are within bounds of the specified dimensions.
  
  Specification: ravel_multi_index converts 2D indices to flat indices using row-major ordering.
  
  Precondition: All row and column indices must be within bounds
  Postcondition: Each flat index is computed as row_index * cols + col_index
  
  Mathematical properties:
  1. The flat index correctly represents the 2D position in a flattened array
  2. All resulting indices are within bounds of the flattened array
  3. The conversion preserves the ordering relationship between multi-indices
  
  This specification captures the essential behavior of NumPy's ravel_multi_index
  for the 2D case with C-style ordering. The function maps 2D coordinates to
  their corresponding positions in a flattened representation of the array.

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn ravel_multi_index(row_indices: &Vec<usize>, col_indices: &Vec<usize>, rows: usize, cols: usize) -> (result: Vec<usize>)
      requires 
          row_indices.len() == col_indices.len(),
          forall|i: int| 0 <= i < row_indices.len() ==> row_indices[i] < rows,
          forall|i: int| 0 <= i < col_indices.len() ==> col_indices[i] < cols,
      ensures 
          result.len() == row_indices.len(),
          forall|i: int| 0 <= i < result.len() ==> 
              result[i] == row_indices[i] * cols + col_indices[i] && 
              result[i] < rows * cols,

vc-code: |-
  {
      assume(false);
      Vec::new()
  }

vc-postamble: |-
  }
  fn main() {}

