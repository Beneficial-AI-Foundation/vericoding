vc-description: |-
  numpy.savez: Save several arrays into a single file in uncompressed .npz format.
  
  Saves multiple Vector arrays to a single .npz archive file. This operation
  serializes multiple arrays into a single compressed archive, where each array
  is stored as a separate .npy file within the archive.
  
  Key functionality:
  - Multiple arrays can be saved in a single operation
  - Each array is stored with an associated name within the archive
  - The resulting .npz file can be loaded later to recover the arrays
  - Arrays are stored in uncompressed .npy format within the archive
  
  The function takes a file path and multiple arrays to save. For simplicity,
  this specification focuses on saving exactly two arrays (commonly used case).
  
  Security considerations:
  - Pickle support is controlled by allow_pickle parameter
  - Invalid file paths or write permissions can cause failures
  - The archive format ensures data integrity through checksums
  
  Specification: numpy.savez creates a .npz archive containing multiple arrays.
  
  This specification captures the essential properties of the savez operation:
  
  1. Data Persistence: Arrays are written to disk in a retrievable format
  2. Archive Structure: Multiple arrays are bundled into a single .npz file
  3. Data Integrity: Saved arrays can be loaded with identical values
  4. Name Association: Arrays are stored with identifiable names in the archive
  5. Format Compliance: Output follows .npz format specification
  
  Mathematical Properties:
  - Bijection: There exists a one-to-one correspondence between saved and loaded arrays
  - Preservation: All array values are preserved exactly in the archive
  - Atomicity: Either all arrays are saved successfully or none are saved
  - Idempotence: Saving the same arrays multiple times produces identical files
  
  Security Properties:
  - Pickle safety: Object arrays are only saved when explicitly allowed
  - File system safety: Operation respects file system permissions
  
  Precondition: File path is writable and arrays are valid
  Postcondition: Archive file exists and contains both arrays with recoverable data

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn savez(file: String, arr1: Vec<f32>, arr2: Vec<f32>, allow_pickle: bool) -> (result: ())
      requires 
          true, /* h_writable and h_valid_path assumptions */
      ensures 
          result == (),
          exists|archive_exists: bool| archive_exists == true,
          exists|recoverable_arr1: Vec<f32>| 
              recoverable_arr1.len() == arr1.len() &&
              forall|i: int| 0 <= i < arr1.len() ==> recoverable_arr1[i] == arr1[i],
          exists|recoverable_arr2: Vec<f32>| 
              recoverable_arr2.len() == arr2.len() &&
              forall|i: int| 0 <= i < arr2.len() ==> recoverable_arr2[i] == arr2[i],
          exists|file_size: nat| file_size > 0

vc-code: |-
  {
      assume(false);
      unreached();
  }

vc-postamble: |-
  }
  fn main() {}

