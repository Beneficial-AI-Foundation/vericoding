vc-description: |-
  Repeat elements of a vector a specified number of times.
  Each element is repeated consecutively.
  
  Specification: repeat creates a vector where each element from the input 
  appears consecutively 'repeats' times. The resulting vector has size n * repeats.
  
  For a vector [a₀, a₁, ..., aₙ₋₁] and repeats = r, the result is:
  [a₀, a₀, ..., a₀, a₁, a₁, ..., a₁, ..., aₙ₋₁, aₙ₋₁, ..., aₙ₋₁]
   \___r times___/  \___r times___/       \______r times______/
  
  Mathematical properties:
  1. Each element appears exactly 'repeats' times consecutively
  2. The total size is n * repeats
  3. Element at index i comes from input element at index ⌊i/repeats⌋
  4. Elements are grouped: positions [k*repeats, (k+1)*repeats) contain a[k]

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn repeat<T: Copy>(a: Vec<T>, repeats: usize) -> (result: Vec<T>)
      requires repeats > 0,
      ensures
          result.len() == a.len() * repeats,
          forall|i: int| 0 <= i < result.len() ==> {
              let k = i / (repeats as int);
              0 <= k < a.len() && result[i] == a[k]
          },
          forall|k: int| 0 <= k < a.len() ==> forall|j: int| 0 <= j < repeats ==> {
              let idx = k * (repeats as int) + j;
              0 <= idx < result.len() && result[idx] == a[k]
          },

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}

