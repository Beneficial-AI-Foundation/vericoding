vc-description: |-
  Divide one Hermite series by another.

  Returns the quotient-with-remainder of two Hermite series
  c1 / c2. The arguments are sequences of coefficients from lowest
  order term to highest, e.g., [1,2,3] represents the series
  P_0 + 2*P_1 + 3*P_2.

  Parameters:
  - c1: 1-D array of Hermite series coefficients (dividend)
  - c2: 1-D array of Hermite series coefficients (divisor)

  Returns:
  - (quo, rem): Pair of arrays representing quotient and remainder

  Specification: hermdiv divides Hermite series c1 by c2, producing quotient and remainder
  such that c1 = c2 * quo + rem in the Hermite polynomial basis, where the degree of rem
  is less than the degree of c2. The divisor must have at least one non-zero coefficient.
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  fn hermdiv(c1: Vec<f32>, c2: Vec<f32>) -> (result: (Vec<f32>, Vec<f32>))
      requires 
          c2.len() > 0,
          exists|i: int| 0 <= i < c2.len() && #[trigger] c2[i] != 0.0f32,
      ensures 
          /* The remainder has all coefficients zero or its effective degree is less than c2's */
          result.1.len() <= c1.len()
vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {}