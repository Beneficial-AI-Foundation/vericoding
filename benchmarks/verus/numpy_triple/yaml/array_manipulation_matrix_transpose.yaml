vc-description: |-
  Transposes a matrix by swapping rows and columns.
  For a matrix with shape (m, n), returns a matrix with shape (n, m)
  where result[i, j] = input[j, i]
  
  Specification: matrix_transpose swaps rows and columns, producing a transposed matrix
  where the element at position (i, j) in the result equals the element at position (j, i)
  in the input. The result has dimensions swapped: an m×n matrix becomes n×m.
  
  /* Dimension check: result is n×m when input is m×n */
  
  /* Transpose property: result[i][j] = mat[j][i] */

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn matrix_transpose(mat: &Vec<Vec<f32>>) -> (result: Vec<Vec<f32>>)
      requires 
          mat.len() > 0,
          forall|i: int| 0 <= i < mat.len() ==> mat[i].len() == mat[0].len(),
      ensures
  
          result.len() == mat[0].len(),
          forall|i: int| 0 <= i < result.len() ==> result[i].len() == mat.len(),
  
          forall|i: int, j: int| 0 <= i < result.len() && 0 <= j < result[i].len() ==> 
              result[i][j] == mat[j][i],

vc-code: |-
  {
      assume(false);
      unreached();
  }

vc-postamble: |-
  }
  fn main() {}

