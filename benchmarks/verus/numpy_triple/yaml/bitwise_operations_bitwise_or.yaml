vc-description: |-
  Compute the bit-wise OR of two vectors element-wise

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn bitwise_or_int(x: i32, y: i32) -> i32 {
      x // placeholder implementation
  }
  
  spec fn bitwise_and_int(x: i32, y: i32) -> i32 {
      x // placeholder implementation
  }
  
  spec fn bitwise_or_vec(x: Seq<i32>, y: Seq<i32>) -> Seq<i32>
      recommends x.len() == y.len()
  {
      Seq::new(x.len(), |i: int| x[i])
  }
  
  fn bitwise_or_fn(x1: Vec<i32>, x2: Vec<i32>) -> (result: Vec<i32>)
      requires x1.len() == x2.len(),
      ensures 
          result.len() == x1.len(),
          forall|i: int| 0 <= i < result.len() ==> result[i] == bitwise_or_int(x1[i], x2[i]),
          forall|i: int| 0 <= i < result.len() && x2[i] == 0 ==> result[i] == x1[i],
          forall|i: int| 0 <= i < result.len() && x1[i] == 0 ==> result[i] == x2[i],
          forall|i: int| 0 <= i < result.len() && (x1[i] == -1i32 || x2[i] == -1i32) ==> result[i] == -1i32,
          result@ == bitwise_or_vec(x1@, x2@)

vc-code: |-
  {
      assume(false);
      unreached();
  }

vc-postamble: |-
  }
  fn main() {}

