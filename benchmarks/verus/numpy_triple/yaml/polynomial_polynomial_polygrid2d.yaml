vc-description: |-
  Evaluate a 2-D polynomial on the Cartesian product of x and y.
  
  This function returns the values:
  p(a,b) = sum_{i,j} c_{i,j} * a^i * b^j
  
  where the points (a, b) consist of all pairs formed by taking
  a from x and b from y. The resulting points form a grid with
  x in the first dimension and y in the second.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn polygrid2d(x: Vec<f32>, y: Vec<f32>, c: Vec<Vec<f32>>) -> (result: Vec<Vec<f32>>)
      requires 
          x.len() > 0,
          y.len() > 0,
          c.len() > 0,
          forall|i: int| 0 <= i < c.len() as int ==> c[i]@.len() > 0,
      ensures 
          result.len() == x.len(),
          forall|i: int| 0 <= i < result.len() as int ==> result[i]@.len() == y.len(),

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}