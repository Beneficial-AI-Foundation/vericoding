vc-description: |-
  {
    "name": "identity",
    "description": "The identity value for the ufunc",
    "details": "Value such that func(x, identity) == x for all x",
    "examples": {
      "add.identity": "0",
      "multiply.identity": "1",
      "logical_and.identity": "True",
      "logical_or.identity": "False"
    }
  }

  ufunc.identity: Get the identity element for a ufunc operation.

  Returns the identity element for a given binary operation, which is the value
  that when combined with any other value using that operation, leaves the other
  value unchanged. For example:
  - Addition: identity is 0 (x + 0 = x)
  - Multiplication: identity is 1 (x * 1 = x)
  - Logical AND: identity is True (x ∧ True = x)
  - Logical OR: identity is False (x ∨ False = x)

  Some operations may have no identity element, in which case None is returned.

  Specification: ufunc_identity returns the identity element if it exists.

  Precondition: The operation is a valid binary function
  Postcondition: If an identity element exists, applying the operation with
                 that element leaves any other element unchanged

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  enum OpType {
      Add,
      Multiply,
      LogicalAnd,
      LogicalOr,
  }

  spec fn apply_op(op: OpType, x: int, y: int) -> int {
      match op {
          OpType::Add => x + y,
          OpType::Multiply => x * y,
          OpType::LogicalAnd => if x != 0 && y != 0 { 1 } else { 0 },
          OpType::LogicalOr => if x != 0 || y != 0 { 1 } else { 0 },
      }
  }

  spec fn has_identity(op: OpType, id: int) -> bool {
      forall|x: int| apply_op(op, x, id) == x && apply_op(op, id, x) == x
  }

vc-helpers: |

vc-spec: |-
  fn ufunc_identity(op: OpType) -> (result: Option<i8>)
      ensures
          match result {
              Some(id) => has_identity(op, id as int),
              None => forall|id: int| !has_identity(op, id)
          }

vc-code: |-
  {
      // impl-start
      assume(false);
      None
      // impl-end
  }

vc-postamble: |2-

  }
  fn main() {}