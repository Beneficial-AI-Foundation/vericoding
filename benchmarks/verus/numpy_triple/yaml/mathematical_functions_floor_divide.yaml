vc-description: |-
  numpy.floor_divide: Return the largest integer smaller or equal to the division of the inputs.
  
  Performs element-wise floor division of two vectors. For each pair of elements,
  returns the largest integer less than or equal to their division.
  
  This is equivalent to the Python // operator and pairs with the modulo operation
  such that a = a % b + b * (a // b) up to roundoff.
  
  Specification: numpy.floor_divide returns a vector where each element is the floor
  of the division of the corresponding elements from x1 and x2.
  
  This function implements Python's // operator behavior for element-wise operations.
  
  Precondition: All elements in x2 must be non-zero
  Postcondition: 
  1. For all indices i, result[i] = floor(x1[i] / x2[i])
  2. For all indices i, result[i] is the largest integer ≤ x1[i] / x2[i]
  3. The fundamental floor division property: result[i] ≤ x1[i] / x2[i] < result[i] + 1
  4. This pairs with modulo such that: x1[i] = x2[i] * result[i] + remainder
  
  /* Floor division properties:
               * 1. result[i] is the floor of x1[i] / x2[i]
               * 2. result[i] <= x1[i] / x2[i] 
               * 3. x1[i] / x2[i] < result[i] + 1.0
               */

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn floor_div_prop(x: f64, y: f64) -> bool {
      y != 0.0
  }
  
  fn numpy_floor_divide(x1: Vec<f64>, x2: Vec<f64>) -> (result: Vec<f64>)
      requires 
          x1.len() == x2.len(),
          forall|i: int| 0 <= i < x2.len() ==> x2[i] != 0.0,
      ensures
          result.len() == x1.len(),
          forall|i: int| 0 <= i < result.len() ==> {
  
              floor_div_prop(x1[i], x2[i])
          },

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}

