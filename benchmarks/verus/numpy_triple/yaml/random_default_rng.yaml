vc-description: |-
  numpy.random.default_rng: Construct a new Generator with the default BitGenerator (PCG64).
  
  Creates a new Generator instance using PCG64 as the underlying BitGenerator.
  This is the recommended way to create random number generators in NumPy.
  
  If seed is None, the generator will be initialized with fresh entropy from the OS.
  If seed is provided, the generator will be deterministically initialized with that seed.
  
  Specification: default_rng returns a properly initialized Generator object.
  
  Precondition: True (no restrictions on the seed parameter)
  Postcondition: The returned Generator is properly initialized with the given seed
  and uses PCG64 as the underlying BitGenerator.

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  /* BitGenerator represents the underlying random number generator engine */
  struct BitGenerator {
      /* Internal state of the generator */
      state: u64,
      /* Seed used to initialize the generator */
      seed: Option<u64>,
  }
  
  /* Generator provides high-level random number generation methods */
  struct Generator {
      /* The underlying BitGenerator (PCG64 by default) */
      bit_generator: BitGenerator,
      /* Whether the generator has been properly initialized */
      initialized: bool,
  }

vc-helpers: |-

vc-spec: |-
  fn default_rng(seed: Option<u64>) -> (result: Generator)
      ensures
          result.initialized == true,
          result.bit_generator.seed == seed,
          seed.is_some() ==> result.bit_generator.state != 0,

vc-code: |-
  {
      assume(false);
      unreached();
  }

vc-postamble: |-
  }
  fn main() {}

