vc-description: |-
  Compute the outer product of two vectors.
  Given vectors a of size m and b of size n, produces an m√ón matrix
  where element (i,j) equals a[i] * b[j].
  
  Specification: The outer product produces a matrix where each element (i,j)
  is the product of the i-th element of the first vector and the j-th element
  of the second vector. This captures the fundamental mathematical property
  that outer(a,b)[i,j] = a[i] * b[j].
  
  The specification includes:
  1. Core property: Each matrix element equals the product of corresponding vector elements
  2. Row structure: Each row i is the vector b scaled by a[i]
  3. Column structure: Each column j is the vector a scaled by b[j]
  4. Bilinearity: The outer product is linear in both arguments
  
  This captures the essential mathematical behavior of the outer product operation,
  which is fundamental in linear algebra and tensor analysis.

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn outer_i32(a: Vec<i8>, b: Vec<i8>) -> (result: Vec<Vec<i8>>)
      ensures
          result.len() == a.len(),
          forall|i: int| 0 <= i < result.len() ==> result[i].len() == b.len(),
          forall|i: int, j: int| 0 <= i < result.len() && 0 <= j < result[i].len() ==> 
              result[i][j] as int == a[i] as int * b[j] as int,

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}