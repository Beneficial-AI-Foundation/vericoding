vc-description: |-
  Get information about the step size of a date or time type.
      
      Returns a tuple containing the datetime unit and count for the given dtype.
      This information can be used to construct datetime64 and timedelta64 objects.
      
      For example, 'timedelta64[25s]' would return ('s', 25).
  
  Specification: datetime_data extracts the unit and count from a datetime dtype.
      
      Precondition: The dtype must be a valid datetime64 or timedelta64 type.
      Postcondition: The returned tuple contains the unit and count that define the dtype.
      
      For datetime64[N unit], returns (unit, N).
      For timedelta64[N unit], returns (unit, N).
      
      This ensures that the returned information can be used to reconstruct
      the original dtype or create compatible datetime objects.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  /* Datetime unit enumeration representing the time scales used in datetime operations */
  #[derive(PartialEq, Eq)]
  pub enum DatetimeUnit {
      /* Years */
      Y,
      /* Months */
      M,
      /* Weeks */
      W,
      /* Days */
      D,
      /* Hours */
      H,
      /* Minutes */
      Min,
      /* Seconds */
      S,
      /* Milliseconds */
      Ms,
      /* Microseconds */
      Us,
      /* Nanoseconds */
      Ns,
  }

  /* Structure containing datetime type information including unit and count */
  pub struct DatetimeTypeInfo {
      /* The time unit (seconds, minutes, hours, etc.) */
      pub unit: DatetimeUnit,
      /* The count of base units in a step (e.g., 25 for "25 seconds") */
      pub count: usize,
  }

  /* Datetime dtype representing either datetime64 or timedelta64 types */
  pub enum DatetimeDtype {
      /* A datetime64 type with specified unit and count */
      Datetime64(DatetimeTypeInfo),
      /* A timedelta64 type with specified unit and count */
      Timedelta64(DatetimeTypeInfo),
  }

vc-helpers: |-

vc-spec: |-
  fn datetime_data(dtype: DatetimeDtype) -> (result: (DatetimeUnit, usize))
      ensures
          match dtype {
              DatetimeDtype::Datetime64(info) => result == (info.unit, info.count) && info.count > 0,
              DatetimeDtype::Timedelta64(info) => result == (info.unit, info.count) && info.count > 0,
          }

vc-code: |-
  {
      // impl-start
      assume(false);
      (DatetimeUnit::S, 0)
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}