vc-description: |-
  Matrix multiplication for 2D matrices. 
  Computes the matrix product of two 2D arrays following standard matrix multiplication rules.
  The result matrix C has dimensions (m x p) where A is (m x n) and B is (n x p).

  Specification: Matrix multiplication produces a result where each element is the dot product 
  of the corresponding row from the first matrix and column from the second matrix.
  
  Mathematical properties:
  1. Dimensions are compatible: A is m×n, B is n×p, result is m×p
  2. Each element C[i][j] = sum of A[i][k] * B[k][j] for k from 0 to n-1
  3. The operation preserves the fundamental matrix multiplication identity
  4. Non-commutativity: A*B ≠ B*A in general (handled by type system)
  5. Associativity: (A*B)*C = A*(B*C) when dimensions are compatible

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn matmul(a: &Vec<Vec<f32>>, b: &Vec<Vec<f32>>) -> (result: Vec<Vec<f32>>)
      requires 
          a.len() > 0,
          b.len() > 0,
          a.len() <= usize::MAX,
          b.len() <= usize::MAX,
          a[0].len() == b.len(),
          forall|i: int| 0 <= i < a.len() ==> #[trigger] a[i].len() == b.len(),
          forall|i: int| 0 <= i < b.len() ==> #[trigger] b[i].len() == b[0].len(),
      ensures
          result.len() == a.len(),
          forall|i: int| 0 <= i < result.len() ==> #[trigger] result[i].len() == b[0].len(),

vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}