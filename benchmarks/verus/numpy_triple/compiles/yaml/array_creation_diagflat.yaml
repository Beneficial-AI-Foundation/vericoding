vc-description: |-
  numpy.diagflat: Create a two-dimensional array with the flattened input as a diagonal.

  Takes an input vector (representing flattened data) and creates a square matrix
  where the input values appear along the k-th diagonal. The parameter k determines
  which diagonal to use: k=0 for main diagonal, k>0 for super-diagonals,
  and k<0 for sub-diagonals.

  For simplicity, we focus on the main diagonal case (k=0) and return a 1D flattened
  representation of the square matrix.

  Specification: diagflat creates a square matrix with input values on the main diagonal.

  Precondition: True (no special preconditions)
  Postcondition: The result is a flattened square matrix where:
  1. The input vector v appears along the main diagonal
  2. All other elements are zero
  3. The matrix has dimensions n × n (flattened to n² elements)
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  fn diagflat(v: &Vec<f32>) -> (result: Vec<f32>)
      ensures
          result.len() == v.len() * v.len(),
          forall|i: int| 0 <= i < v.len() ==> result[i * v.len() + i] == v[i],
          forall|i: int, j: int| 0 <= i < v.len() && 0 <= j < v.len() && i != j ==> 
              #[trigger] result[i * v.len() + j] == 0.0f32,
vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {}