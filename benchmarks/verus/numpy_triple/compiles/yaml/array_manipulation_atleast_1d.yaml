vc-description: |-
  /* 
  {
    "name": "numpy.atleast_1d",
    "category": "Changing Dimensions",
    "description": "Convert inputs to arrays with at least one dimension",
    "url": "https://numpy.org/doc/stable/reference/generated/numpy.atleast_1d.html",
    "doc": "Convert inputs to arrays with at least one dimension.\n\nScalar inputs are converted to 1-dimensional arrays, whilst\nhigher-dimensional inputs are preserved.\n\nParameters\n----------\n*arrays : array_like\n    One or more input arrays.\n\nReturns\n-------\nret : ndarray\n    An array, or list of arrays, each with ``a.ndim >= 1``.\n    Copies are made only if necessary.\n\nExamples\n--------\n>>> np.atleast_1d(1.0)\narray([1.])\n>>> x = np.arange(9.0).reshape(3,3)\n>>> np.atleast_1d(x)\narray([[0., 1., 2.],\n       [3., 4., 5.],\n       [6., 7., 8.]])\n>>> np.atleast_1d(x) is x\nTrue\n>>> np.atleast_1d(1, [3, 4])\n[array([1]), array([3, 4])]",
    "source_location": "numpy/_core/shape_base.py",
    "signature": "numpy.atleast_1d(*arrays)"
  }
  */
  
  /*  numpy.atleast_1d: Convert inputs to arrays with at least one dimension.
      
      This function ensures that the input has at least one dimension.
      - Scalar inputs are converted to 1-dimensional arrays with a single element
      - Higher-dimensional inputs (vectors) are preserved unchanged
      
      For the Vector-based implementation, we provide a version that takes
      a vector and returns it unchanged, since Vectors already have at least
      one dimension by construction.
  */
  
  /*  Specification: atleast_1d returns the input vector unchanged.
      
      Since Vectors in Verus already have at least one dimension by their type,
      this function acts as an identity function for vectors.
      
      Precondition: True (no special preconditions)
      Postcondition: The result is identical to the input vector
  */

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  // <vc-helpers>
  // </vc-helpers>

vc-signature: |-
  fn atleast_1d(arr: Vec<f64>) -> (result: Vec<f64>)
      requires true
      ensures result == arr && result.len() == arr.len()

vc-implementation: |-
  // <vc-implementation>
  {
      return arr; // TODO: Remove this line and implement the function body
  }
  // </vc-implementation>

vc-condition: |-
  proof fn atleast_1d_spec(arr: Vec<f64>)
      ensures true

vc-proof: |-
  // <vc-proof>
  {
      assume(false); // TODO: Remove this line and implement the proof
  }
  // </vc-proof>

vc-postamble: |-
  fn main() {}
  
  }