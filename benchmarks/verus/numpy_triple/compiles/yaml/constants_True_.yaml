vc-description: |-
  /*
  {
    "name": "numpy.True_",
    "category": "Boolean constants",
    "description": "NumPy boolean scalar representing True",
    "url": "https://numpy.org/doc/stable/reference/arrays.scalars.html",
    "doc": "NumPy's boolean type. Character code: '?'. Alias for numpy.bool_.\n\nComparison operations in NumPy return numpy.True_ or numpy.False_ instead of Python's built-in True or False.",
  }
  */
  
  /* NumPy's boolean scalar type representing True.
     This is NumPy's equivalent of Python's built-in True, but as a NumPy scalar type.
     Comparison operations in NumPy return this type instead of Python's bool. */
  
  /* Specification: numpy.True_ represents the boolean value true and has the following properties:
     1. It equals the Verus boolean true
     2. It is the identity element for logical AND operations
     3. It is the absorbing element for logical OR operations
     4. Its negation gives false */

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  /* <vc-helpers> */
  /* </vc-helpers> */

vc-signature: |-
  fn True_() -> (result: bool)
      ensures
          result == true,
          !result == false,

vc-implementation: |-
  /* <vc-implementation> */
  {
      return true; // TODO: Remove this line and implement the function body
  }
  /* </vc-implementation> */

vc-condition: |-
  proof fn True__spec() {

vc-proof: |-
  /* <vc-proof> */
      assume(false); // TODO: Remove this line and implement the proof
  /* </vc-proof> */

vc-postamble: |-
  }
  
  fn main() {}
  
  }