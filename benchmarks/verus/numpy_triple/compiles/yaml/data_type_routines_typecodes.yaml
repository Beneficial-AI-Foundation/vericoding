vc-description: |-
  /* 
  {
    "name": "numpy.typecodes",
    "category": "Miscellaneous Type Utilities",
    "description": "Dictionary mapping strings to corresponding type character codes",
    "url": "https://numpy.org/doc/stable/reference/generated/numpy.typecodes.html",
    "doc": "typecodes : dict\n\nA dictionary with string keys that represent NumPy dtype categories and string values that contain type codes for the NumPy data types in each category.\n\nKeys include:\n- 'Character': 'S1'\n- 'Integer': 'bhilqnp'\n- 'UnsignedInteger': 'BHILQNP'\n- 'Float': 'fdg'\n- 'Complex': 'FDG'\n- 'AllInteger': 'bBhHiIlLqQnNpP'\n- 'AllFloat': 'fdgFDG'\n- 'Datetime': 'Mm'\n- 'All': '?bhilqnpBHILQNPfdgFDGSUVOMm'\n\nThis is useful for iterating over all dtypes of a certain kind.\n\nExamples\n--------\n>>> np.typecodes['Character']\n'S1'\n>>> for typechar in np.typecodes['Integer']:\n...     print(typechar)\n...\nb\nh\ni\nl\nq\nn\np",
  }
  */
  
  /* Returns the type character codes for a given NumPy dtype category */
  
  /* Specification: typecodes returns the correct type character codes for each NumPy dtype category */

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  /* <vc-helpers> */
  /* </vc-helpers> */

vc-signature: |-
  spec fn typecodes(category: &str) -> Option<&str>;

vc-implementation: |-
  /* <vc-implementation> */
  /* </vc-implementation> */

vc-condition: |-
  proof fn typecodes_spec(category: &str)
      ensures
          (category == "Character" ==> typecodes(category) == Some("S1")) &&
          (category == "Integer" ==> typecodes(category) == Some("bhilqnp")) &&
          (category == "UnsignedInteger" ==> typecodes(category) == Some("BHILQNP")) &&
          (category == "Float" ==> typecodes(category) == Some("fdg")) &&
          (category == "Complex" ==> typecodes(category) == Some("FDG")) &&
          (category == "AllInteger" ==> typecodes(category) == Some("bBhHiIlLqQnNpP")) &&
          (category == "AllFloat" ==> typecodes(category) == Some("fdgFDG")) &&
          (category == "Datetime" ==> typecodes(category) == Some("Mm")) &&
          (category == "All" ==> typecodes(category) == Some("?bhilqnpBHILQNPfdgFDGSUVOMm")) &&
          (!(category == "Character" || category == "Integer" || category == "UnsignedInteger" || category == "Float" || category == "Complex" || category == "AllInteger" || category == "AllFloat" || category == "Datetime" || category == "All") ==> typecodes(category) == Option::<&str>::None)

vc-proof: |-
  /* <vc-proof> */
      {
          assume(false); // TODO: Remove this line and implement the proof
      }
  /* </vc-proof> */

vc-postamble: |-
  fn main() {}

  }