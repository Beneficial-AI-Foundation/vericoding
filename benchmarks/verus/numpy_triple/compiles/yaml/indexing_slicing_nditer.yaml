vc-description: |-
  numpy.nditer: Creates an iterator for a vector that provides position and element access.
      
  This is a simplified 1D version of numpy's nditer functionality.
  Returns an iterator that starts at position 0 and holds the original data.
  The iterator can be used to traverse the vector elements sequentially.
  
  In numpy, nditer is a powerful multi-dimensional iterator, but for our
  Vector-based specification, we simplify it to basic position tracking.

  Specification: nditer creates a valid iterator that starts at position 0.
      
  This comprehensive specification captures:
  1. The iterator starts at position 0
  2. The iterator contains the original data unchanged
  3. The iterator position is valid (within bounds)
  4. The iterator provides access to all elements of the original vector
  5. The iterator follows numpy's iteration semantics
  6. The iterator state is consistent and predictable
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  fn nditer(arr: Vec<f32>) -> (iter: (usize, Vec<f32>))
      ensures
          iter.0 == 0,
          iter.1 == arr,
          iter.0 <= arr.len(),
          forall|i: int| 0 <= i < arr.len() ==> iter.1[i] == arr[i],
vc-code: |-
  {
      // impl-start
      assume(false);
      (0, Vec::new())
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {}