vc-description: |-
  Return argument as a list of 1-d arrays.

  The returned list contains array(s) of dtype double, complex double, or
  object.  A 1-d argument of shape ``(N,)`` is parsed into ``N`` arrays of
  size one; a 2-d argument of shape ``(M,N)`` is parsed into ``M`` arrays
  of size ``N`` (i.e., is "parsed by row"); and a higher dimensional array
  raises a Value Error if it is not first reshaped into either a 1-d or 2-d
  array.

  Parameters
  ----------
  alist : array_like
      A 1- or 2-d array_like
  trim : boolean, optional
      When True, trailing zeros are removed from the inputs.
      When False, the inputs are passed through intact.

  Returns
  -------
  [a1, a2,...] : list of 1-D arrays
      A copy of the input data as a list of 1-d arrays.

  Raises
  ------
  ValueError
      Raised when `as_series` cannot convert its input to 1-d arrays, or at
      least one of the resulting arrays is empty.

  Return argument as a list of 1-d arrays. Takes a 2-d array of shape (M,N)
  and returns M arrays of size N (parsed by row). Optionally trims trailing 
  zeros from each array.

  Specification: as_series returns a list of 1-d arrays where each row of the
  input becomes a separate 1-d array. When trim is false, arrays are unchanged.
  When trim is true, trailing zeros are removed from each array.
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  fn as_series(arr: &Vec<Vec<f32>>, trim: bool) -> (result: Vec<Vec<f32>>)
      requires
          arr.len() > 0,
          forall|i: int| 0 <= i < arr.len() ==> arr[i].len() > 0,
      ensures
          result.len() == arr.len(),
          forall|i: int| 0 <= i < result.len() ==> (
              !trim ==> (
                  result[i].len() == arr[i].len() &&
                  forall|j: int| 0 <= j < arr[i].len() ==> result[i][j] == arr[i][j]
              )
          ),
          forall|i: int| 0 <= i < result.len() ==> (
              trim ==> (
                  result[i].len() <= arr[i].len() &&
                  forall|j: int| 0 <= j < result[i].len() ==> result[i][j] == arr[i][j]
              )
          ),
vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {}