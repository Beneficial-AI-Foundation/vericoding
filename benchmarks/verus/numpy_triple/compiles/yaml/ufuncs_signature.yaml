vc-description: |-
  Core signature for generalized ufuncs
  
  Defines core dimensionality of inputs and outputs
  
  Parse a ufunc signature string into a structured representation
  
  Specification: parseSignature correctly parses ufunc signature strings
vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  /* A signature represents the core dimensionality pattern for a generalized ufunc */
  pub struct UfuncSignature {
      /* Input dimension patterns as list of dimension lists */
      pub inputs: Vec<Vec<String>>,
      /* Output dimension patterns as list of dimension lists */
      pub outputs: Vec<Vec<String>>,
      /* All unique dimension names used in the signature */
      pub dimension_names: Vec<String>,
  }
vc-helpers: |-

vc-spec: |-
  fn parse_signature(sig: &Vec<String>) -> (result: UfuncSignature)
      requires sig.len() > 0,
      ensures
          /* The parsed signature preserves essential structure */
          (result.inputs.len() > 0 || result.outputs.len() > 0),
          /* All dimension names in inputs are included in dimension_names */
          forall|i: int| 0 <= i < result.inputs.len() ==>
              forall|j: int| 0 <= j < result.inputs[i].len() ==>
                  exists|k: int| 0 <= k < result.dimension_names.len() &&
                      result.inputs[i][j] == result.dimension_names[k],
          /* All dimension names in outputs are included in dimension_names */
          forall|i: int| 0 <= i < result.outputs.len() ==>
              forall|j: int| 0 <= j < result.outputs[i].len() ==>
                  exists|k: int| 0 <= k < result.dimension_names.len() &&
                      result.outputs[i][j] == result.dimension_names[k],
          /* Dimension names list contains only valid identifiers */
          forall|i: int| 0 <= i < result.dimension_names.len() ==>
              result.dimension_names[i]@.len() > 0,
          /* Result is well-formed (has inputs or outputs) */
          result.inputs.len() + result.outputs.len() > 0,
vc-code: |-
  {
      // impl-start
      assume(false);
      UfuncSignature {
          inputs: Vec::new(),
          outputs: Vec::new(),
          dimension_names: Vec::new(),
      }
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {}