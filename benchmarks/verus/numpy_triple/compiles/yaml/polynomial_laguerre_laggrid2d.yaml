vc-description: |-
  numpy.polynomial.laguerre.laggrid2d: Evaluate a 2-D Laguerre series on the Cartesian product of x and y.
  
  This function computes the values p(a,b) = ∑_{i,j} c_{i,j} * L_i(a) * L_j(b)
  where the points (a,b) consist of all pairs formed by taking a from x and b from y.
  The resulting points form a grid with x in the first dimension and y in the second.
  
  The coefficients c represent a 2D matrix where c[i,j] is the coefficient for
  the term of multi-degree i,j in the Laguerre series expansion.
  
  Specification: laggrid2d evaluates a 2D Laguerre series on the Cartesian product of x and y.
  
  The function computes p(a,b) = ∑_{i,j} c_{i,j} * L_i(a) * L_j(b) for each point (a,b)
  in the Cartesian product of x and y.
  
  Precondition: The coefficient matrix c must be non-empty (rows > 0 and cols > 0)
  Postcondition: The result is a grid where result[i][j] represents the evaluation
  of the Laguerre series at point (x[i], y[j]).
  
  Mathematical properties:
  1. The result has shape (nx, ny) - same as the Cartesian product of x and y
  2. Each element result[i][j] is the sum over all coefficient terms c[k][l] * L_k(x[i]) * L_l(y[j])
  3. For constant coefficients (c[0][0] only), the result should be constant
  4. The function is linear in the coefficients
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  fn laggrid2d(x: &Vec<f64>, y: &Vec<f64>, c: &Vec<Vec<f64>>) -> (result: Vec<Vec<f64>>)
      requires
          x.len() > 0,
          y.len() > 0,
          c.len() > 0,
          forall|i: int| 0 <= i < c.len() ==> c[i].len() > 0,
      ensures
          result.len() == x.len(),
          forall|i: int| 0 <= i < result.len() ==> result[i].len() == y.len(),
vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {}