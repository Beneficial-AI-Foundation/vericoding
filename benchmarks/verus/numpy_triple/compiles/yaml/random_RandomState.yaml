vc-description: |-
  /*
  {
    "name": "numpy.random.RandomState",
    "description": "Container for the slow Mersenne Twister pseudo-random number generator",
    "url": "https://numpy.org/doc/stable/reference/random/legacy.html#numpy.random.RandomState",
    "doc": "RandomState(seed=None)\n\nContainer for the slow Mersenne Twister pseudo-random number generator.\n\nConsider using the more modern np.random.Generator instead.\n\nRandomState is effectively frozen and will only receive updates required for compatibility.\n\nParameters:\n- seed : None, int, array_like[ints], SeedSequence, BitGenerator, Generator\n    Random seed initializing the pseudo-random number generator",
  }
  */
  
  /* Generate a random float in the range [0, 1) using the RandomState
     This models the RandomState.random() method which is the most fundamental
     operation for generating uniformly distributed random numbers.
  */
  
  /* Specification: random generates a float in the range [0, 1)
     
     The random function should satisfy:
     1. The result is always in the range [0, 1)
     2. The result is deterministic given the same seed
     3. The result follows uniform distribution properties
  */

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  /* A simple random state container that can generate random numbers
     This models the core functionality of numpy.random.RandomState.
     We focus on the random() method which generates random floats in [0, 1).
  */
  struct RandomState {
      /* The seed value used to initialize the random number generator */
      seed: nat,
  }

vc-helpers: |-
  // <vc-helpers>
  // </vc-helpers>

vc-signature: |-
  fn random(state: RandomState) -> (result: u32)
      ensures 0 <= result < 1000000,

vc-implementation: |-
  // <vc-implementation>
  {
      return 0; // TODO: Remove this line and implement the function body
  }
  // </vc-implementation>

vc-condition: |-
  proof fn random_spec(state: RandomState)

vc-proof: |-
  // <vc-proof>
  {
      assume(false); // TODO: Remove this line and implement the proof
  }
  // </vc-proof>

vc-postamble: |-
  
  fn main() {}
  
  }