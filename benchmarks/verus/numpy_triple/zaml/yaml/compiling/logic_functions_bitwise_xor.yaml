vc-description: |-
  /*
  numpy.bitwise_xor: Compute the bit-wise XOR of two arrays element-wise.
  
  Computes the bit-wise XOR of the underlying binary representation of
  the integers in the input arrays. This ufunc implements the C/Python
  operator ^.
  
  The function works on integer and boolean types, computing the XOR
  of corresponding elements from two input vectors.
  
  Specification: numpy.bitwise_xor returns a vector where each element is the 
  bitwise XOR of the corresponding elements from x1 and x2.
  
  Precondition: All elements are non-negative (to use well-defined bitwise operations)
  Postcondition: For all indices i, result[i] = x1[i] XOR x2[i]
  
  Mathematical properties:
  - XOR is commutative: x1[i] XOR x2[i] = x2[i] XOR x1[i]
  - XOR is associative: (a XOR b) XOR c = a XOR (b XOR c)
  - XOR with zero is identity: x XOR 0 = x
  - XOR is self-inverse: x XOR x = 0
  */
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  fn bitwise_xor(x1: Vec<u32>, x2: Vec<u32>) -> (result: Vec<u32>)
      requires 
          x1.len() == x2.len(),
      ensures
          result.len() == x1.len(),
          forall|i: int| 0 <= i < result.len() ==> result[i] == (x1[i] ^ x2[i]),
          forall|i: int| 0 <= i < result.len() && x1[i] == 0 ==> result[i] == x2[i],
          forall|i: int| 0 <= i < result.len() && x2[i] == 0 ==> result[i] == x1[i],
          forall|i: int| 0 <= i < result.len() && x1[i] == x2[i] ==> result[i] == 0,
vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {}