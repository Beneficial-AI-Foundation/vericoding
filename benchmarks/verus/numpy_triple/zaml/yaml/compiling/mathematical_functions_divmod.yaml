vc-description: |-
  /*
  numpy.divmod: Return element-wise quotient and remainder simultaneously.
  
  Performs element-wise division returning both the quotient and remainder.
  For each pair of elements (x, y), returns (x // y, x % y) where:
  - x // y is the floor division (largest integer ≤ x/y)
  - x % y is the remainder such that x = y * (x // y) + (x % y)
  
  This is equivalent to (x // y, x % y) but faster because it avoids
  redundant work by computing both values in a single operation.
  
  From NumPy documentation:
  - Parameters: x1, x2 (array_like) - The dividend and divisor arrays
  - Returns: (quotient, remainder) - tuple of ndarrays with element-wise results
  
  Mathematical properties:
  1. Division identity: x1[i] = x2[i] * quotient[i] + remainder[i]
  2. Remainder bounds: 0 ≤ |remainder[i]| < |x2[i]| (for positive divisors)
  3. Sign consistency: remainder has same sign as divisor (Python % semantics)
  
  Specification: numpy.divmod returns a tuple of vectors containing the quotient 
  and remainder of element-wise division.
  
  Mathematical Properties:
  1. Division identity: For all i, x1[i] = x2[i] * quotient[i] + remainder[i]
  2. Quotient correctness: quotient[i] = floor(x1[i] / x2[i])
  3. Remainder correctness: remainder[i] = x1[i] - x2[i] * quotient[i]
  4. Remainder bounds: |remainder[i]| < |x2[i]| (when x2[i] ≠ 0)
  5. Sign consistency: remainder[i] has same sign as x2[i] (Python % semantics)
  6. Equivalence: divmod(x1, x2) = (floor_divide(x1, x2), mod(x1, x2))
  
  Precondition: All elements in x2 must be non-zero
  Postcondition: Returns (quotient, remainder) where the mathematical properties hold
  */
vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn divmod(x1: Vec<i32>, x2: Vec<i32>) -> (result: (Vec<i32>, Vec<i32>))
      requires 
          x1.len() == x2.len(),
          forall|i: int| 0 <= i < x2.len() ==> x2[i] != 0,
      ensures ({
          let (quotient, remainder) = result;
          quotient.len() == x1.len() &&
          remainder.len() == x1.len() &&
          forall|i: int| 0 <= i < x1.len() ==> {
              x1[i] == x2[i] * quotient[i] + remainder[i] &&
              (x2[i] > 0 ==> 0 <= remainder[i] && remainder[i] < x2[i]) &&
              (x2[i] < 0 ==> x2[i] < remainder[i] && remainder[i] <= 0)
          }
      })

vc-code: |-
  {
      // impl-start
      assume(false);
      (Vec::new(), Vec::new())
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}