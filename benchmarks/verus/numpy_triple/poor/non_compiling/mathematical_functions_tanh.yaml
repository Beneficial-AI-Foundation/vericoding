```rust
vc-description: |-
  /*
  Compute hyperbolic tangent element-wise.
  
  The hyperbolic tangent function is defined as:
  tanh(x) = sinh(x) / cosh(x) = (e^x - e^(-x)) / (e^x + e^(-x))
  
  This function is bounded between -1 and 1, and is the ratio of
  hyperbolic sine to hyperbolic cosine. It has a sigmoid-like shape,
  approaching -1 as x approaches negative infinity and approaching 1
  as x approaches positive infinity.
  
  Returns an array of the same shape as x, containing the hyperbolic tangent of each element.
  */

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn tanh(x: Vec<f64>) -> (result: Vec<f64>)
      requires x.len() > 0,
      ensures 
          result.len() == x.len(),
          forall|i: int| 0 <= i < result.len() ==> {
              let xi = x[i];
              /* Core mathematical definition: tanh(x) = sinh(x) / cosh(x) */
              result[i] == (xi.exp() - (-xi).exp()) / (xi.exp() + (-xi).exp()) &&
              /* Bounded property: -1 < tanh(x) < 1 for all finite x */
              result[i].abs() < 1.0 &&
              /* Zero property: tanh(0) = 0 */
              (xi == 0.0 ==> result[i] == 0.0) &&
              /* Sign property: tanh(x) has the same sign as x */
              (xi > 0.0 ==> result[i] > 0.0) &&
              (xi < 0.0 ==> result[i] < 0.0) &&
              /* Asymptotic behavior properties */
              (xi > 0.0 ==> result[i] > 0.0 && result[i] < 1.0) &&
              (xi < 0.0 ==> result[i] < 0.0 && result[i] > -1.0)
          },
          /* Monotonicity property: tanh is strictly increasing */
          forall|i: int, j: int| 0 <= i < x.len() && 0 <= j < x.len() && x[i] < x[j] ==> result[i] < result[j],

vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}
```