```yaml
vc-description: |-
  /*
  Return the sum of array elements treating Not a Numbers (NaNs) as zero
  */

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  #[verifier(external_body)]
  spec fn is_nan(f: f32) -> bool uninterp;

  #[verifier(external_body)]
  spec fn is_finite(f: f32) -> bool uninterp;

  spec fn nansum_helper(a: Seq<f32>, i: usize) -> f32
      decreases a.len() - i
  {
      if i >= a.len() {
          0.0f32
      } else {
          let val = a[i as int];
          let contribution = if is_nan(val) { 0.0f32 } else { val };
          contribution + nansum_helper(a, i + 1)
      }
  }

  fn nansum(a: Vec<f32>) -> (result: f32)
      ensures
          result == nansum_helper(a@, 0),
          (a.len() == 0) ==> (result == 0.0f32),

vc-code: |-
  {
      // impl-start
      assume(false);
      0.0f32
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}
```