vc-description: |-
  /*
  Compute the eigenvalues of a complex Hermitian or real symmetric matrix.
  
  This function computes the eigenvalues of a real symmetric matrix and returns them in ascending order without computing the eigenvectors. This is the eigenvalues-only version of the symmetric eigenvalue problem.
  
  Key mathematical properties:
  1. The eigenvalues are real for symmetric matrices
  2. They are returned in ascending order
  3. The trace equals the sum of eigenvalues
  4. The determinant equals the product of eigenvalues
  5. For the identity matrix, all eigenvalues are 1
  6. For diagonal matrices, eigenvalues are the diagonal elements (sorted)
  7. Matrix symmetry: a[i][j] = a[j][i] for all i,j
  */
vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn eigvalsh(a: Vec<Vec<f32>>) -> (result: Vec<f32>)
      requires 
          a.len() > 0,
          forall|i: int| 0 <= i < a.len() ==> a[i].len() == a.len(),
          /* Matrix symmetry: a[i][j] = a[j][i] for all i,j */
          forall|i: int, j: int| 0 <= i < a.len() && 0 <= j < a.len() ==> a[i][j] == a[j][i],
      ensures
          result.len() == a.len(),
          /* Eigenvalues are in ascending order */
          forall|i: int, j: int| 0 <= i < j < result.len() ==> result[i] <= result[j],
          /* Identity matrix has all eigenvalues equal to 1 */
          (forall|i: int, j: int| 0 <= i < a.len() && 0 <= j < a.len() ==> 
              a[i][j] == if i == j { 1.0 } else { 0.0 }) ==> 
          (forall|i: int| 0 <= i < result.len() ==> result[i] == 1.0),
          /* Zero matrix has all eigenvalues equal to 0 */
          (forall|i: int, j: int| 0 <= i < a.len() && 0 <= j < a.len() ==> a[i][j] == 0.0) ==> 
          (forall|i: int| 0 <= i < result.len() ==> result[i] == 0.0),

vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}