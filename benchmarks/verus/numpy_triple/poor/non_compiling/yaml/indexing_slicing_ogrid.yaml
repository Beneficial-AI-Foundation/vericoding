vc-description: |-
  /*
  numpy.ogrid: Open multi-dimensional "meshgrid".
      
  Returns an open (i.e. not fleshed out) mesh-grid when indexed, 
  so that only one dimension of each returned array is greater than 1.
      
  This is a simplified 1D version that generates a linear sequence
  similar to arange but with the ogrid interface. The dimension and 
  number of the output arrays are equal to the number of indexing dimensions.
      
  For the 1D case, it returns a single vector with evenly spaced values
  from start to stop (exclusive) with the given step size.
  
  Specification: ogrid returns a vector of evenly spaced values.
      
  Precondition: step ≠ 0 and n = ⌊(stop - start) / step⌋
  Postcondition: The result is a vector where each element i satisfies:
  - result[i] = start + i * step
  - All elements are in the range [start, stop)
  - The sequence is arithmetic with common difference step
  */
vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn ogrid(start: f32, stop: f32, step: f32, n: usize) -> (result: Vec<f32>)
      requires 
          step != 0.0,
          n == ((stop - start) / step).floor() as usize,
      ensures
          result.len() == n,
          forall|i: int| 0 <= i < n ==> {
              let val = start + (i as f32) * step;
              result[i] == val && (
                  if step > 0.0 { 
                      start <= val && val < stop 
                  } else { 
                      stop < val && val <= start 
                  }
              )
          }

vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}