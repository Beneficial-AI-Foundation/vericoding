vc-description: |-
  numpy.delete: Return a new array with sub-arrays along an axis deleted.
  
  For a one dimensional array, this returns those entries not returned by
  arr[obj]. The function removes elements at the specified index and
  returns a new array with the remaining elements.
  
  This specification handles the 1D case where we delete a single element
  at a specified index from a vector.
  
  Specification: numpy.delete removes the element at the specified index and returns
  a new vector containing all other elements in their original order.
  
  The specification ensures:
  1. The result has size n (one less than the input)
  2. Elements before the deleted index maintain their positions
  3. Elements after the deleted index are shifted left by one position
  
  Mathematical properties:
  - Order preservation: Elements maintain their relative order
  - Deletion correctness: The element at the specified index is removed
  - Shift property: Elements after the deleted index have their indices decreased by 1
  
  Sanity checks:
  - The result size is exactly one less than the input size
  - No elements are duplicated or lost (except the deleted one)
  - The deleted element does not appear in the result
  
  Precondition: The array must have at least one element (enforced by type)
  
  Postcondition:
  - For indices i < index: result[i] = arr[i]
  - For indices i â‰¥ index: result[i] = arr[i+1]
  - The element arr[index] does not appear in the result (unless duplicated elsewhere)

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn delete(arr: Vec<f32>, index: usize) -> (result: Vec<f32>)
      requires 
          arr.len() > 0,
          index < arr.len(),
      ensures 
          result.len() == arr.len() - 1,
          forall|i: int| 0 <= i < index ==> result[i] == arr[i],
          forall|i: int| index <= i < result.len() ==> result[i] == arr[i + 1],
          forall|i: int| 0 <= i < arr.len() && i != index ==> 
              exists|j: int| 0 <= j < result.len() && result[j] == arr[i],

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}

