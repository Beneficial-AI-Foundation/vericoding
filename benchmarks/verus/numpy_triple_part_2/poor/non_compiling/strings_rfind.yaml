vc-description: |-
  For each element, return the highest index in the string where substring is found, such that sub is contained within [start, end]. Returns -1 if sub is not found.
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  spec fn string_starts_with(s: Seq<char>, prefix: Seq<char>, start_pos: int) -> bool {
      start_pos >= 0 && start_pos + prefix.len() <= s.len() &&
      forall|i: int| 0 <= i < prefix.len() ==> s[start_pos + i] == prefix[i]
  }

  fn rfind(a: Vec<String>, sub: Vec<String>, start: Vec<i8>, end_pos: Vec<i8>) -> (result: Vec<i8>)
      requires 
          a.len() == sub.len() && sub.len() == start.len() && start.len() == end_pos.len(),
          forall|i: int| 0 <= i < start.len() ==> 0 <= start[i] as int && start[i] as int <= end_pos[i] as int,
      ensures
          result.len() == a.len(),
          forall|i: int| 0 <= i < result.len() ==> (
              /* Basic range constraint: result is -1 or within string bounds */
              (result[i] == -1 || (0 <= result[i] as int && result[i] as int < a[i].len())) &&
              /* If result is -1, no occurrence of substring within the specified range */
              (result[i] == -1 ==> 
                  forall|j: int| start[i] as int <= j && j + sub[i].len() <= end_pos[i] as int + 1 && 
                                 j + sub[i].len() <= a[i].len() ==> 
                      !string_starts_with(a[i]@, sub[i]@, j)) &&
              /* If result is non-negative, it's the rightmost valid occurrence */
              (result[i] >= 0 ==> 
                  /* The result is within the search range */
                  start[i] as int <= result[i] as int && 
                  result[i] as int + sub[i].len() <= end_pos[i] as int + 1 &&
                  /* The substring matches at this position */
                  string_starts_with(a[i]@, sub[i]@, result[i] as int) &&
                  /* This is the rightmost occurrence within the range */
                  (forall|j: int| result[i] as int < j && j + sub[i].len() <= end_pos[i] as int + 1 && 
                                  start[i] as int <= j && j + sub[i].len() <= a[i].len() ==> 
                      !string_starts_with(a[i]@, sub[i]@, j)))
          ),
vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {}