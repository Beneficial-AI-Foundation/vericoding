vc-description: |-
  Returns the maximum value of all elements in a non-empty vector, ignoring NaN values.
  When all elements are NaN, returns NaN.

  Mathematical Properties:
  - Ignores NaN values in the computation
  - Returns the maximum of all non-NaN elements
  - If all elements are NaN, returns NaN
  - If at least one element is not NaN, returns the maximum non-NaN value
  - For vectors with no NaN values, behaves identically to regular max

  Specification: nanmax returns the maximum value in the vector, ignoring NaN values.

  Mathematical properties:
  1. If there exists at least one non-NaN element, the result is the maximum among non-NaN elements
  2. If all elements are NaN, the result is NaN
  3. The result is either a non-NaN element from the vector or NaN
  4. For vectors without NaN values, nanmax behaves identically to regular max
  5. NaN values are completely ignored during the maximum computation
  6. Sanity check: result is either NaN or exists in the vector
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  fn nanmax(a: Vec<i32>) -> (result: i32)
      requires a.len() > 0,
      ensures
          /* Case 1: If there exists at least one element, the result is from the vector */
          (exists|max_idx: int| 
              0 <= max_idx < a.len() &&
              result == a[max_idx]) &&
          /* Case 2: Result is maximum among all elements */
          (forall|j: int| 0 <= j < a.len() ==> a[j] <= result) &&
          /* Case 3: Result exists in the vector */
          (exists|witness: int| 0 <= witness < a.len() && result == a[witness])
vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {}