vc-description: |-
  Returns a vector representing a linear polynomial off + scl*x.

  For the linear polynomial off + scl*x, this returns:
  - [off, scl] when scl ≠ 0 (degree 1 polynomial)
  - [off] when scl = 0 (degree 0 polynomial, constant)

  This follows NumPy's convention where coefficients are ordered from
  lowest to highest degree, so [off, scl] represents off + scl*x.

  We use Vector Float 2 to represent the general case, with the understanding
  that when scl = 0, the second coefficient is meaningless.

  Specification: polyline creates correct linear polynomial representation.

  The function returns coefficients for the linear polynomial off + scl*x:
  - Always returns [off, scl] as a 2-element vector
  - When scl = 0, this represents the constant polynomial off
  - When scl ≠ 0, this represents the linear polynomial off + scl*x

  Key properties:
  1. Coefficient structure: coefficients are ordered from lowest to highest degree
  2. Constant term is always off (at index 0)
  3. Linear term coefficient is scl (at index 1)
  4. Evaluation property: at x=0, polynomial evaluates to off
  5. Slope property: derivative of polynomial is scl
  6. Mathematical correctness: represents polynomial off + scl*x

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn polyline(off: i32, scl: i32) -> (result: [i32; 2])
      ensures
          /* Constant term is always off */
          result[0] == off,
          /* Linear coefficient is always scl */
          result[1] == scl,
          /* Size is always 2 (representing up to degree 1 polynomial) */
          result.len() == 2,
          /* Example evaluation: if we evaluate at x=1, we get off + scl */
          result[0] + result[1] == off + scl

vc-code: |-
  {
      // impl-start
      assume(false);
      [0; 2]
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}