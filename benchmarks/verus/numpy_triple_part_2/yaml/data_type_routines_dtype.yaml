vc-description: |-
  numpy.dtype: Create a data type object.

  A numpy array is homogeneous, and contains elements described by a dtype object. 
  A dtype object can be constructed from different combinations of fundamental numeric types.

  This specification focuses on creating basic numeric data types like int16, int32, float32, float64.
  The function maps type specifications to their corresponding DType objects with proper
  attributes like size, alignment, and signedness.

  Specification: numpy.dtype creates a valid data type object with consistent attributes.

  Precondition: The type_spec is a valid NumPy type specification
  Postcondition: The resulting DType has consistent attributes that match the specified type

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  /* Represents a NumPy data type object with its essential attributes */
  pub struct DType {
      /* The fundamental numeric type category */
      pub kind: &'static str,
      /* The element size in bytes */
      pub itemsize: usize,
      /* The alignment requirement in bytes */
      pub alignment: usize,
      /* A descriptive name for the data type */
      pub name: &'static str,
      /* Whether the data type is signed (for numeric types) */
      pub signed: bool,
  }

vc-helpers: |-

vc-spec: |-
  fn numpy_dtype(type_spec: &str) -> (result: DType)
      requires type_spec == "int8" || type_spec == "int16" || type_spec == "int32" || 
               type_spec == "int64" || type_spec == "float32" || type_spec == "float64" || 
               type_spec == "bool",
      ensures
          /* The data type has a valid kind character */
          (result.kind == "i" || result.kind == "f" || result.kind == "b") &&
          /* The itemsize is positive and matches the type specification */
          (result.itemsize > 0) &&
          /* The alignment is positive and does not exceed the itemsize */
          (result.alignment > 0 && result.alignment <= result.itemsize) &&
          /* The name is non-empty */
          (result.name != "") &&
          /* Size consistency for specific types */
          ((type_spec == "int8" ==> result.itemsize == 1 && result.signed == true && result.kind == "i") &&
           (type_spec == "int16" ==> result.itemsize == 2 && result.signed == true && result.kind == "i") &&
           (type_spec == "int32" ==> result.itemsize == 4 && result.signed == true && result.kind == "i") &&
           (type_spec == "int64" ==> result.itemsize == 8 && result.signed == true && result.kind == "i") &&
           (type_spec == "float32" ==> result.itemsize == 4 && result.kind == "f") &&
           (type_spec == "float64" ==> result.itemsize == 8 && result.kind == "f") &&
           (type_spec == "bool" ==> result.itemsize == 1 && result.kind == "b"))

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}