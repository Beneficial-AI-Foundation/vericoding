vc-description: |-
  numpy.searchsorted: Find indices where elements should be inserted to maintain order.
  
  Given a sorted array `a` and values `v`, returns indices such that inserting 
  each element of `v` at the corresponding index would preserve the sorted order of `a`.

  This implementation focuses on the 'left' side behavior where for each value v[i],
  it returns the leftmost suitable insertion position. The returned indices are
  in the range [0, n] where n is the length of the sorted array.
  
  Specification: numpy.searchsorted returns indices for sorted insertion.

  Precondition: The input array `a` must be sorted in ascending order
  Postcondition: For each element v[i], the returned index idx satisfies:
  - All elements before idx are strictly less than v[i] (left insertion property)
  - All elements at or after idx are greater than or equal to v[i] (sorted property)
  - The index is valid for insertion (between 0 and n inclusive)
  - Inserting v[i] at idx preserves the sorted order of the array

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn numpy_searchsorted(a: Vec<i8>, v: Vec<i8>) -> (result: Vec<usize>)
      requires 
          forall|i: int, j: int| 0 <= i < j < a.len() ==> a[i] as int <= a[j] as int,
      ensures 
          result.len() == v.len()

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}