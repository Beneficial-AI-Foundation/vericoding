vc-description: |-
  numpy.strings.encode: Encode strings using the codec
  
  Calls str.encode element-wise on a vector of strings.
  Converts strings to byte arrays using the specified encoding.
  
  This function takes a vector of strings and returns a vector
  of encoded byte arrays. The encoding process depends on the encoding
  parameter, with UTF-8 being the default.
  
  Specification: numpy.strings.encode returns a vector where each element is the encoded byte array
  from the corresponding string in the input vector.
  
  Key properties:
  1. Deterministic encoding: same input produces same output
  2. Empty strings encode to empty byte arrays
  3. Encoding preserves string order and length
  4. For UTF-8 encoding, ASCII characters are preserved with same byte length
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  fn encode(a: Vec<Vec<char>>, encoding: Vec<char>, errors: Vec<char>) -> (result: Vec<Vec<u8>>)
      ensures
          result@.len() == a@.len(),
          /* Deterministic encoding: same input produces same output */
          forall|i: int, j: int| 0 <= i < a@.len() && 0 <= j < a@.len() && a@[i] == a@[j] ==> result@[i] == result@[j],
          /* Empty strings encode to empty byte arrays */
          forall|i: int| 0 <= i < a@.len() && a@[i].len() == 0 ==> result@[i].len() == 0,
          /* Non-empty strings produce non-empty byte arrays */
          forall|i: int| 0 <= i < a@.len() && a@[i].len() > 0 ==> result@[i].len() > 0,
          /* For UTF-8 encoding, encoded size is at least the string length */
          forall|i: int| 0 <= i < a@.len() ==> result@[i].len() >= a@[i].len(),
vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {}