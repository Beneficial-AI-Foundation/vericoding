vc-description: |-
  Perform an indirect stable sort using a sequence of keys.
  Given multiple sorting keys, lexsort returns an array of integer indices that 
  describes the sort order by multiple columns. The last key in the sequence is used
  for the primary sort order, ties are broken by the second-to-last key, and so on.
  
  Specification: lexsort returns indices that lexicographically sort the keys.
  The result is a permutation of indices where for any two positions i, j:
  - If primary key differs, sort by primary key
  - If primary key is equal, sort by second-to-last key, etc.
  - The sort is stable (preserves relative order of equal elements)

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn lexsort(keys: Vec<Vec<i8>>) -> (indices: Vec<u8>)
      requires 
          keys.len() > 0,
          keys.len() > 0 ==> keys[0].len() > 0,
          forall|i: int| 0 <= i < keys.len() ==> #[trigger] keys[i as int]@.len() == keys[0]@.len(),
      ensures
          indices@.len() == keys[0]@.len(),
          /* indices contains all values from 0 to n-1 exactly once */
          forall|i: int| 0 <= i < keys[0]@.len() ==> #[trigger] indices@.contains(i as u8),
          forall|i: int, j: int| 0 <= i < indices@.len() && 0 <= j < indices@.len() && i != j ==> indices[i as int] != indices[j as int]

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}