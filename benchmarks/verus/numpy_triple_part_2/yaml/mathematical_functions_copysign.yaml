vc-description: |-
  numpy.copysign: Change the sign of x1 to that of x2, element-wise.

  Returns an array where each element has the magnitude of x1 but the sign of x2.
  This function is useful for combining the absolute value of one array with 
  the sign pattern of another.

  For each element:
  - If x2 >= 0, returns |x1|
  - If x2 < 0, returns -|x1|

  Special cases:
  - copysign(x, 0) returns |x| (positive sign)
  - copysign(0, y) returns 0 with the sign of y

  Specification: numpy.copysign returns a vector where each element has
  the magnitude of the corresponding element in x1 but the sign of the
  corresponding element in x2.

  Precondition: True (no special preconditions for copysign)
  Postcondition: For all indices i:
    - If x2[i] >= 0, then result[i] = |x1[i]|
    - If x2[i] < 0, then result[i] = -|x1[i]|

  Mathematical properties:
    1. result[i] = |x1[i]| * sign(x2[i]) where sign(x) = 1 if x >= 0, -1 if x < 0
    2. |result[i]| = |x1[i]| (magnitude preservation)
    3. sign(result[i]) = sign(x2[i]) (sign copying)
    4. copysign(x1, x2) = copysign(|x1|, x2) (idempotence on magnitude)

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn copysign(x1: Vec<i8>, x2: Vec<i8>) -> (result: Vec<i8>)
      requires x1.len() == x2.len(),
      ensures 
          result.len() == x1.len(),
          forall|i: int| 0 <= i < result.len() ==> {
              /* Basic behavior: sign copying with magnitude preservation */
              (x2@[i] >= 0 ==> result@[i] as int == if x1@[i] >= 0 { x1@[i] as int } else { -(x1@[i] as int) }) &&
              (x2@[i] < 0 ==> result@[i] as int == if x1@[i] >= 0 { -(x1@[i] as int) } else { x1@[i] as int }) &&
              /* Magnitude preservation property: |result[i]| = |x1[i]| */
              (if result@[i] >= 0 { result@[i] as int } else { -(result@[i] as int) }) == 
              (if x1@[i] >= 0 { x1@[i] as int } else { -(x1@[i] as int) }) &&
              /* Sign copying property: result has same sign as x2 */
              (x2@[i] >= 0 ==> result@[i] >= 0) &&
              (x2@[i] < 0 ==> result@[i] < 0)
          }

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}