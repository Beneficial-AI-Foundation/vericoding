vc-description: |-
  Split an array into multiple sub-arrays.

  Please refer to the split documentation. The only difference
  between these functions is that array_split allows
  indices_or_sections to be an integer that does *not* equally
  divide the axis. For an array of length l that should be split
  into n sections, it returns l % n sub-arrays of size l//n + 1
  and the rest of size l//n.

  Split a vector into k sub-vectors.

  When splitting a vector of length n into k sections:
  - The first (n % k) sub-vectors have size ⌈n/k⌉ = (n + k - 1) / k
  - The remaining sub-vectors have size ⌊n/k⌋ = n / k

  This ensures all elements are distributed as evenly as possible,
  with larger sub-vectors appearing first.

  Specification: array_split distributes elements evenly with mathematical properties

  The specification captures:
  1. Size distribution: larger chunks come first
  2. Element preservation: all elements from the original vector appear in order
  3. No gaps or overlaps: elements are contiguously distributed

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn chunk_size(i: int, n: int, k: int) -> int {
      if i < n % k {
          (n + k - 1) / k
      } else {
          n / k
      }
  }

  spec fn start_index(i: int, n: int, k: int) -> int 
      decreases i
  {
      if i <= 0 {
          0
      } else {
          start_index(i - 1, n, k) + chunk_size(i - 1, n, k)
      }
  }

vc-helpers: |

vc-spec: |-
  fn array_split(v: Vec<i8>, k: usize) -> (result: Vec<Vec<i8>>)
      requires k > 0,
      ensures
          result.len() == k,
          /* Each sub-vector has the correct size based on its position */
          forall|i: int| 0 <= i < k as int ==> #[trigger] result[i].len() == chunk_size(i, v.len() as int, k as int),
          /* Elements are preserved in order across all sub-vectors */
          forall|i: int, j: int| 0 <= i < k as int && 0 <= j < result[i].len() ==> 
              #[trigger] result[i][j] == v[start_index(i, v.len() as int, k as int) + j]

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |2-

  }
  fn main() {}