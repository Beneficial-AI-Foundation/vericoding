vc-description: |-
  Convert a polynomial to a Hermite series. 
  Converts coefficients from standard polynomial basis to Hermite series basis.
  Uses Horner's method with Hermite operations: for polynomial p(x) = aₙxⁿ + ... + a₁x + a₀,
  builds the equivalent Hermite series by iteratively applying hermeadd(hermemulx(result), coefficient).

  Specification: poly2herme converts polynomial coefficients to equivalent Hermite series coefficients.

  The conversion preserves the polynomial's mathematical value but represents it in the Hermite basis.
  This is a fundamental basis transformation in polynomial algebra.

  Key mathematical properties:
  1. Basis transformation: standard polynomial basis {1, x, x², x³, ...} → Hermite basis {He₀, He₁, He₂, He₃, ...}
  2. Value preservation: ∑ᵢ polᵢ·xⁱ = ∑ᵢ resultᵢ·Heᵢ(x) for all x
  3. Degree preservation: polynomial of degree n maps to Hermite series of degree n
  4. Invertibility: conversion can be reversed with herme2poly
  5. Horner's method: algorithm uses iterative structure for numerical stability

  The algorithm implements: result = hermeadd(hermemulx(previous_result), current_coefficient)
  applied from highest to lowest degree coefficients.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn poly2herme(pol: Vec<f32>) -> (result: Vec<f32>)
      ensures
          result.len() == pol.len(),
          forall|i: int| 0 <= i < pol.len() && pol[i] != 0.0f32 ==> exists|j: int| 0 <= j < result.len() && result[j] != 0.0f32,
          (exists|i: int| 0 <= i < pol.len() && pol[i] != 0.0f32) ==> (exists|j: int| 0 <= j < result.len() && result[j] != 0.0f32),

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}