vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn gcd(m: nat, n: nat) -> nat
  recommends m > 0 && n > 0
  decreases m + n
  {
      if m == n { 
          n 
      } else if m > n { 
          gcd(sub(m, n), n)
      } else {
          gcd(m, sub(n, m))
      }
  }
  
  spec fn exp(x: f64, n: nat) -> f64
  decreases n
  {
      if n == 0 {
          1.0
      } else if x == 0.0 {
          0.0
      } else if n == 0 && x == 0.0 {
          1.0
      } else {
          x * exp(x, sub(n, 1))
      }
  }

vc-helpers: |-
  // <vc-helpers>
  // </vc-helpers>

vc-spec: |-
  // <vc-spec>
  fn Product(m: u64, n: u64) -> (res: u64)
  ensures res == m * n
  // </vc-spec>

vc-code: |-
  // <vc-code>
  {
    assume(false);
    0
  }
  // </vc-code>

vc-postamble: |-
  fn main() {}
  
  }