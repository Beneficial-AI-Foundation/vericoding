vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  // Author: Snorri Agnarsson, snorri@hi.is
  
  // Search1000 is a Verus version of a function shown
  // by Jon Bentley in his old Programming Pearls
  // column in CACM.  
  
  // Is2Pow(n) is true iff n==2^k for some k>=0.
  spec fn is_2_pow(n: int) -> bool
      decreases n
  {
      if n < 1 {
          false
      } else if n == 1 {
          true
      } else {
          n % 2 == 0 && is_2_pow(n / 2)
      }
  }
  
  // This method is a binary search that only works for array
  // segments of size n == 2^k-1 for some k>=0.

vc-helpers: |-
  // <vc-helpers>
  // </vc-helpers>

vc-spec: |-
  // <vc-spec>
  fn search_2_pow_loop(a: &[i32], i: usize, n: usize, x: i32) -> (k: usize)
      requires
          i <= i + n <= a.len(),
          forall|p: int, q: int| i <= p < q < (i + n) && 0 <= p < a.len() && 0 <= q < a.len() ==> 
              a@[p] <= a@[q],
          is_2_pow((n + 1) as int),
      ensures
          i <= k <= i + n,
          forall|r: int| i <= r < k && 0 <= r < a.len() ==> a@[r] < x,
          forall|r: int| k <= r < (i + n) && 0 <= r < a.len() ==> a@[r] >= x,
  // </vc-spec>

vc-code: |-
  // <vc-code>
  {
    assume(false);
    0
  }
  // </vc-code>

vc-postamble: |-
  // This method is a binary search that only works for array
  // segments of size n == 2^k-1 for some k>=0.
  
  fn main() {}
  
  }