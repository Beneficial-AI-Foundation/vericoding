vc-description: |-

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn gcd(m: nat, n: nat) -> nat
      recommends m > 0 && n > 0
      decreases m + n
      when m > 0 && n > 0
  {
      if m == n {
          n
      } else if m > n {
          gcd(sub(m, n), n)
      } else {
          gcd(m, sub(n, m))
      }
  }
  
  spec fn exp_nat(base: nat, n: nat) -> nat
      decreases n
  {
      if n == 0 {
          1nat
      } else if base == 0 {
          0nat
      } else {
          base * exp_nat(base, sub(n, 1))
      }
  }

vc-helpers: |-

vc-spec: |-
  fn gcd_calc(m: u8, n: u8) -> (res: u8)
      requires m > 0 && n > 0
      ensures res as nat == gcd(m as nat, n as nat)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}