vc-description: |-

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn has_count(v: int, a: Seq<int>, n: nat) -> int
      decreases n
  {
      if n == 0 {
          0
      } else {
          if a[n-1] == v {
              has_count(v, a, (n-1) as nat) + 1
          } else {
              has_count(v, a, (n-1) as nat)
          }
      }
  }

vc-helpers: |-

vc-spec: |-
  fn count(v: i8, a: &Vec<i8>, n: u8) -> (r: i8)
      requires n as nat <= a@.len()
      ensures n as nat <= a@.len() ==> has_count(v as int, a@.map_values(|x: i8| x as int), n as nat) == r as int

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}