vc-description: |-

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn has_count(v: int, a: Seq<int>, n: nat) -> int
      decreases n
  {
      if n == 0 {
          0
      } else {
          if a[n-1] == v {
              has_count(v, a, (n-1) as nat) + 1
          } else {
              has_count(v, a, (n-1) as nat)
          }
      }
  }

vc-helpers: |-
  // <vc-helpers>
  // </vc-helpers>

vc-spec: |-
  // <vc-spec>
  fn count(v: i32, a: &[i32], n: usize) -> (r: i32)
      requires n <= a.len()
      ensures n <= a.len() ==> has_count(v as int, a@.map_values(|x: i32| x as int), n as nat) == r as int
  // </vc-spec>

vc-code: |-
  // <vc-code>
  {
      assume(false);
      0
  }
  // </vc-code>

vc-postamble: |-
  fn main() {
  }
  
  }

