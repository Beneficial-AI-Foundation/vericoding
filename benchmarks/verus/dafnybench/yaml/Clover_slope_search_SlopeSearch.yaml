vc-description: |-

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  // <vc-helpers>
  // </vc-helpers>

vc-spec: |-
  // <vc-spec>
  fn slope_search(a: &Vec<Vec<i32>>, key: i32) -> (result: (usize, usize))
    requires 
        a.len() > 0,
        forall|i: int| 0 <= i < a.len() ==> #[trigger] a@[i].len() == a@[0].len(),
        a@[0].len() > 0,
        // Each row is sorted (non-decreasing)
        forall|i: int, j: int, j_prime: int| 
            0 <= i < a.len() && 0 <= j < j_prime < a@[0].len()
            ==> #[trigger] a@[i]@[j] <= #[trigger] a@[i]@[j_prime],
        // Each column is sorted (non-decreasing)  
        forall|i: int, i_prime: int, j: int| 
            0 <= i < i_prime < a.len() && 0 <= j < a@[0].len()
            ==> #[trigger] a@[i]@[j] <= #[trigger] a@[i_prime]@[j],
        // Key exists in the matrix
        exists|i: int, j: int| 
            0 <= i < a.len() && 0 <= j < a@[0].len()
            && #[trigger] a@[i]@[j] == key
    ensures
        result.0 < a.len(),
        result.1 < a@[0].len(),
        a@[result.0 as int]@[result.1 as int] == key
  // </vc-spec>

vc-code: |-
  // <vc-code>
  {
    assume(false);
    (0, 0)
  }
  // </vc-code>

vc-postamble: |-
  
  fn main() {
  }
  
  }

