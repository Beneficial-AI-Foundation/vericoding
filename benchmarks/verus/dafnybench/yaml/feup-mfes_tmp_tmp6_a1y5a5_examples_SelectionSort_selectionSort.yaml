vc-description: |-

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  /* 
  * Formal verification of the selection sort algorithm with Verus.
  * FEUP, MIEIC, MFES, 2020/21.
  */
  
  // Checks if array 'a' is sorted between positions 'from' (inclusive) and 'to' (exclusive).
  spec fn is_sorted(a: Seq<i32>, from: int, to: int) -> bool
      recommends 0 <= from <= to <= a.len()
  {
      forall|i: int, j: int| from <= i < j < to ==> a[i] <= a[j]
  }
  
  // Sorts array 'a' using the selection sort algorithm.
  
  // Finds the position of a minimum value in non-empty subarray 'a' between positions 
  // 'from' (inclusive) and 'to' (exclusive)
  fn find_min(a: &Vec<i32>, from: usize, to: usize) -> (index: usize)
      requires 
          0 <= from < to <= a.len(),
      ensures 
          from <= index < to,
          forall|k: int| from as int <= k < to as int ==> a@[k] >= a@[index as int],
  {
      assume(false);
      0
  }

vc-helpers: |-

vc-spec: |-
  fn selection_sort(a: &mut Vec<i32>)
      ensures 
          is_sorted(a@, 0, a@.len() as int),
          a@.to_multiset() == old(a)@.to_multiset(),

vc-code: |-
  {
      assume(false);
      unreached();
  }

vc-postamble: |-
  fn main() {}
  
  }

