vc-description: |-
  // A8Q1 â€” Steph Renee McIntyre
  
  // Following the solutions from Carmen Bruni
  
  // There is no definition for power, so this function will be used for validating that our imperative program is correct. This is just for Verus.
  
  //function for a to the power of n
  
  /* Proof of implieds can be seen on LEARN.
      Note: If you are unconvinced, putting asserts for each condition will demonstrate the correctness of the statements. 
  */

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn power(a: int, n: int) -> int
      recommends 0 <= n
      decreases n when 0 <= n
  {
      if n <= 0 { 1 } else { a * power(a, n - 1) }
  }

vc-helpers: |-

vc-spec: |-
  fn A8Q1(y0: int, x: int) -> (z: int)
      requires y0 >= 0
      ensures z == power(x, y0)

vc-code: |-
  {
      assume(false);
      unreached();
  }

vc-postamble: |-
  }
  fn main() {}

