vc-description: |-
  // 2.
  
  // 3.
  
  // 5.
  
  // 6

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn fib(n: nat) -> nat 
      decreases n
  {
      if n == 0 { 
          1 
      } else if n == 1 { 
          1 
      } else { 
          fib((n-1) as nat) + fib((n-2) as nat)
      }
  }
  
  enum List<T> {
      Nil,
      Cons(T, Box<List<T>>)
  }
  
  spec fn add(l: List<int>) -> int 
      decreases l
  {
      match l {
          List::Nil => 0,
          List::Cons(x, xs) => x + add(*xs)
      }
  }
  
  spec fn sum(n: nat) -> nat 
      decreases n
  {
      if n == 0 { 
          0 
      } else { 
          n + sum((n-1) as nat)
      }
  }

vc-helpers: |-

vc-spec: |-
  fn sum_backwards(n: u8) -> (r: u8)
      ensures r == sum(n as nat) as u8

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}