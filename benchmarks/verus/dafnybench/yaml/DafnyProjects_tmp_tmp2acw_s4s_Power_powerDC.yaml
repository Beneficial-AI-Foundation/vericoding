vc-description: |-
  /* 
  * Formal verification of an O(log n) algorithm to calculate the natural power of an integer (x^n), 
  * illustrating the usage of lemmas and automatic induction in Verus.
  * Translated from Dafny to Verus.
  */
  
  // Recursive definition of x^n in functional style, with time and space complexity O(n).
  
  // Computation of x^n in time and space O(log n).
  
  // A few test cases would go here

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn power(x: int, n: nat) -> int
      decreases n
  {
      if n == 0 { 1 } else { x * power(x, (n - 1) as nat) }
  }

vc-helpers: |-

vc-spec: |-
  fn power_dc(x: i64, n: u64) -> (p: i64)
      ensures p == power(x as int, n as nat)

vc-code: |-
  {
      assume(false);
      unreached();
  }

vc-postamble: |-
  }
  fn main() {}

