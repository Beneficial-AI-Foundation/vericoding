vc-description: |-
  // The order of the recursion in these two functions
  
  // must match the order of the iteration in the algorithm above

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn min(a: Seq<int>) -> int
      recommends a.len() > 0
      decreases a.len() when a.len() > 0
  {
      if a.len() == 1 {
          a[0]
      } else {
          let prefix = a.take(a.len() - 1);
          let min_prefix = min(prefix);
          if a[a.len() - 1] <= min_prefix {
              a[a.len() - 1]
          } else {
              min_prefix
          }
      }
  }
  
  spec fn max(a: Seq<int>) -> int
      recommends a.len() > 0  
      decreases a.len() when a.len() > 0
  {
      if a.len() == 1 {
          a[0]
      } else {
          let prefix = a.take(a.len() - 1);
          let max_prefix = max(prefix);
          if a[a.len() - 1] >= max_prefix {
              a[a.len() - 1]
          } else {
              max_prefix
          }
      }
  }

vc-helpers: |-

vc-spec: |-
  fn difference_min_max(a: Vec<i8>) -> (diff: i8)
      requires a.len() > 0
      ensures diff as int == max(a@.map(|i, x| x as int)) - min(a@.map(|i, x| x as int))

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}