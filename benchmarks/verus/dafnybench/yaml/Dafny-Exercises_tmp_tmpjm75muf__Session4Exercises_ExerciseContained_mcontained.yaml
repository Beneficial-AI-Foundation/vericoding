vc-description: |-
  //Specify and implement an O(m+n) algorithm that returns b
  
  //v and w are strictly increasing ordered arrays
  
  //b is true iff the first n elements of v are contained in the first m elements of w

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn strict_sorted(s: Seq<i32>) -> bool {
      forall|u: int, w: int| 0 <= u < w < s.len() ==> s[u] < s[w]
  }

vc-helpers: |-

vc-spec: |-
  fn mcontained(v: &[i32], w: &[i32], n: usize, m: usize) -> (b: bool)
      requires 
          n <= m,
          n >= 0,
          strict_sorted(v@),
          strict_sorted(w@),
          v@.len() >= n,
          w@.len() >= m,
      ensures
          b == forall|k: int| 0 <= k < n ==> w@.subrange(0, m as int).contains(v@[k])

vc-code: |-
  {
      assume(false);
      unreached();
  }

vc-postamble: |-
  }
  fn main() {}

