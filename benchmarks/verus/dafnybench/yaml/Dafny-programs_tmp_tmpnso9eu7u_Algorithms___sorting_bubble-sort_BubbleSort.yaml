vc-description: |-

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  /*
  Bubble Sort is the simplest sorting algorithm that works by 
  repeatedly swapping the adjacent elements if they are in wrong order.
  */
  
  spec fn sorted_between(a: Seq<int>, from: int, to: int) -> bool {
      forall|i: int, j: int| 0 <= i <= j < a.len() && from <= i <= j <= to ==> a[i] <= a[j]
  }
  
  spec fn sorted(a: Seq<int>) -> bool {
      sorted_between(a, 0, (a.len() - 1) as int)
  }
  
  /* Explanation:
  
  invariant forall n, m :: 0 <= n <= i <m <N ==> A [n] <= A [m]
       // A is ordered for each pair of elements such that
       // the first element belongs to the left partition of i
       // and the second element belongs to the right partition of i
  
  invariant forall n :: 0 <= n <= j ==> A [n] <= A [j]
       // There is a variable defined by the value that the array takes at position j
       // Therefore, each value that the array takes for all elements from 0 to j
       // They are less than or equal to the value of the variable
  */

vc-helpers: |-

vc-spec: |-
  fn bubble_sort(a: &mut Vec<int>)
      ensures 
          sorted(a@),
          a@.to_multiset() == old(a)@.to_multiset()

vc-code: |-
  {
      assume(false);
      unreached();
  }

vc-postamble: |-
  fn main() {}
  
  }

