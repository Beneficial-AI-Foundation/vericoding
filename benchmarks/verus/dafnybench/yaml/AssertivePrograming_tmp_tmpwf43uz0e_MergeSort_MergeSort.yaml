vc-description: |-
  // Noa Leron 207131871
  
  // Tsuri Farhana 315016907
  
  /*
  Goal: Implement the well known merge sort algorithm in O(a.Length X log_2(a.Length)) time, recursively.
  
  - Divide the contents of the original array into two local arrays
  - After sorting the local arrays (recursively), merge the contents of the two returned arrays using the Merge method (see below)
  - DO NOT modify the specification or any other part of the method's signature
  - DO NOT introduce any further methods
  */
  
  /*
  Goal: Implement iteratively, correctly, efficiently, clearly
  
  DO NOT modify the specification or any other part of the method's signature
  */
  
  //This is a method that replace the loop body
  
  //Loop invariant - b is sorted so far and the next two potential values that will go into b are bigger then the biggest value in b.
  
  //Loop invariant - the multiset of the prefix of b so far is the same multiset as the prefixes of c and d so far.
  
  //This lemma helps verus see that if the prefixes of arrays are the same multiset until the end of the arrays,
  
  //all the arrays are the same multiset.
  
  //This lemma helps verus see that after adding the next value from c to b the prefixes are still the same subsets.

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn sorted(q: Seq<int>) -> bool {
      forall|i: int, j: int| 0 <= i <= j < q.len() ==> q[i] <= q[j]
  }
  
  spec fn inv(a: Seq<int>, a1: Seq<int>, a2: Seq<int>, i: nat, mid: nat) -> bool {
      (i <= a1.len()) && (i <= a2.len()) && (i + mid <= a.len()) &&
      (a1.subrange(0, i as int) =~= a.subrange(0, i as int)) && 
      (a2.subrange(0, i as int) =~= a.subrange(mid as int, (i + mid) as int))
  }
  
  fn merge(b: &mut Vec<int>, c: &Vec<int>, d: &Vec<int>)
      requires
          old(b).len() == c.len() + d.len(),
          sorted(c@),
          sorted(d@),
      ensures
          sorted(b@),
          b@.to_multiset() == c@.to_multiset().add(d@.to_multiset()),
  {
    assume(false);
  }
  
  spec fn inv_sorted(b: Seq<int>, c: Seq<int>, d: Seq<int>, i: nat, j: nat) -> bool {
      i <= c.len() && j <= d.len() && i + j <= b.len() &&
      ((i + j > 0 && i < c.len()) ==> (b[(j + i - 1) as int] <= c[i as int])) &&
      ((i + j > 0 && j < d.len()) ==> (b[(j + i - 1) as int] <= d[j as int])) &&
      sorted(b.subrange(0, (i + j) as int))
      }
  
  spec fn inv_sub_set(b: Seq<int>, c: Seq<int>, d: Seq<int>, i: nat, j: nat) -> bool {
      i <= c.len() && j <= d.len() && i + j <= b.len() &&
      b.subrange(0, (i + j) as int).to_multiset() == 
          c.subrange(0, i as int).to_multiset().add(d.subrange(0, j as int).to_multiset())
  }

vc-helpers: |-

vc-spec: |-
  fn merge_sort(a: Vec<i8>) -> (b: Vec<i8>)
      ensures
          b.len() == a.len(),
          sorted(b@.map(|i: int, x: i8| x as int)),
          a@.map(|i: int, x: i8| x as int).to_multiset() == b@.map(|i: int, x: i8| x as int).to_multiset(),
      decreases a.len()

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}