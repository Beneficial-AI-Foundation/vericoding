vc-description: |-
  // verifies
  
  // all bs are before all as which are before all ds
  
  // all b's are before all a's and d's
  
  // all a's are after all b's
  
  // all a's are before all d's
  
  // all d's are after all b's and a's

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn sortedbad(s: Seq<char>) -> bool {
  
      (forall|i: int, j: int| 0 <= i < s.len() && 0 <= j < s.len() && s[i] == 'b' && (s[j] == 'a' || s[j] == 'd') ==> i < j) &&
  
      (forall|i: int, j: int| 0 <= i < s.len() && 0 <= j < s.len() && s[i] == 'a' && s[j] == 'b' ==> i > j) &&
  
      (forall|i: int, j: int| 0 <= i < s.len() && 0 <= j < s.len() && s[i] == 'a' && s[j] == 'd' ==> i < j) &&
  
      (forall|i: int, j: int| 0 <= i < s.len() && 0 <= j < s.len() && s[i] == 'd' && (s[j] == 'a' || s[j] == 'b') ==> i > j)
  }

vc-helpers: |-

vc-spec: |-
  fn bad_sort(a: Vec<char>) -> (b: Vec<char>)
      requires
          forall|k: int| 0 <= k < a.len() ==> a[k] == 'b' || a[k] == 'a' || a[k] == 'd',
      ensures
          sortedbad(b@),
          a@.to_multiset() =~= b@.to_multiset(),
          a.len() == b.len(),

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}

