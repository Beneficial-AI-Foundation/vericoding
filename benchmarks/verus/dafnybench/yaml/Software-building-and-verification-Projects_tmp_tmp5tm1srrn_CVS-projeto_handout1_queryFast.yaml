vc-description: |-
  // 1 a)
  
  // [ai, aj[
  
  // 1 b)
  
  // 1 c)
  
  // a -> [1, 10, 3, âˆ’4, 5]
  
  // c -> [0, 1, 11, 14, 10, 15]

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn sum(a: Seq<int>, i: int, j: int) -> int
      recommends 0 <= i <= j <= a.len()
      decreases j - i
      when 0 <= i <= j <= a.len()
  {
      if i == j { 0 }
      else { a[j-1] + sum(a, i, j-1) }
  }
  
  spec fn is_prefix_sum_for(a: Seq<int>, c: Seq<int>) -> bool
  {
      a.len() + 1 == c.len() && 
      forall|i: int| #![auto] 0 <= i <= a.len() ==> c[i] == sum(a, 0, i)
  }

vc-helpers: |-

vc-spec: |-
  fn queryFast(a: Vec<i8>, c: Vec<i8>, i: i8, j: i8) -> (r: i8)
      requires 0 <= i as int <= j as int <= a@.len(),
               is_prefix_sum_for(a@.map(|_idx, x| x as int), c@.map(|_idx, x| x as int))
      ensures r as int == sum(a@.map(|_idx, x| x as int), i as int, j as int)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}