vc-description: |-

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  /* 
   * Formal specification and verification of a dynamic programming algorithm for calculating C(n, k).
   * FEUP, MIEIC, MFES, 2020/21.
   */
  
  // Initial recursive definition of C(n, k), based on the Pascal equality.
  spec fn comb(n: nat, k: nat) -> nat
      recommends 0 <= k <= n
      decreases n
      when n >= 1 && k >= 1
  {
      if k == 0 || k == n { 
          1 
      } else { 
          comb((n - 1) as nat, k) + comb((n - 1) as nat, (k - 1) as nat)
      }
  }

vc-helpers: |-
  // <vc-helpers>
  // </vc-helpers>

vc-spec: |-
  // <vc-spec>
  fn Comb(n: u64, k: u64) -> (res: u64)
      requires 0 <= k <= n
      ensures res == comb(n as nat, k as nat)
  // </vc-spec>

vc-code: |-
  // <vc-code>
  {
      assume(false);
      0
  }
  // </vc-code>

vc-postamble: |-
  fn main() {}
  
  }

