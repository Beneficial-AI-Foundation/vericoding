vc-description: |-

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn contains(v: i32, a: Seq<i32>, n: int) -> bool {
      exists|j: int| 0 <= j < n && a[j] == v
  }
  
  spec fn upper_bound(v: i32, a: Seq<i32>, n: int) -> bool {
      forall|j: int| 0 <= j < n ==> a[j] <= v
  }
  
  spec fn is_max(m: i32, a: Seq<i32>, n: int) -> bool {
      contains(m, a, n) && upper_bound(m, a, n)
  }

vc-helpers: |-

vc-spec: |-
  fn max(a: &[i32], n: usize) -> (max: i32)
      requires 0 < n <= a.len(),
      ensures is_max(max, a@, n as int),

vc-code: |-
  {
      assume(false);
      unreached();
  }

vc-postamble: |-
  }
  fn main() {}

