vc-description: |-
  // Noa Leron 207131871
  
  // Tsuri Farhana 315016907
  
  /*
  Goal: Implement the well known merge sort algorithm in O(a.Length X log_2(a.Length)) time, recursively.
  
  - Divide the contents of the original array into two local arrays
  - After sorting the local arrays (recursively), merge the contents of the two returned arrays using the Merge method (see below)
  - DO NOT modify the specification or any other part of the method's signature
  - DO NOT introduce any further methods
  */
  
  /*
  Goal: Implement iteratively, correctly, efficiently, clearly
  
  DO NOT modify the specification or any other part of the method's signature
  */
  
  //This is a method that replace the loop body
  
  // in this case we take the next value from d
  
  // in this case we take the next value from c
  
  //Loop invariant - b is sorted so far and the next two potential values that will go into b are bigger than the biggest value in b.
  
  //Loop invariant - the multiset of the prefix of b so far is the same multiset as the prefixes of c and d so far.
  
  //This lemma helps Verus see that if the prefixes of arrays are the same multiset until the end of the arrays,
  
  //all the arrays are the same multiset.
  
  //This lemma helps Verus see that after adding the next value from c to b the prefixes are still the same subsets.

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn sorted(q: Seq<i32>) -> bool {
      forall|i: int, j: int| 0 <= i <= j < q.len() ==> q[i] <= q[j]
  }
  
  spec fn inv(a: Seq<i32>, a1: Seq<i32>, a2: Seq<i32>, i: usize, mid: usize) -> bool {
      (i <= a1.len()) && (i <= a2.len()) && (i + mid <= a.len()) &&
      (a1.subrange(0, i as int) == a.subrange(0, i as int)) && 
      (a2.subrange(0, i as int) == a.subrange(mid as int, (i + mid) as int))
  }
  
  fn merge_loop(b: &mut Vec<i32>, c: &Vec<i32>, d: &Vec<i32>, i0: usize, j0: usize) -> (usize, usize)
          requires
              old(b).len() == c.len() + d.len(),
              sorted(c@),
              sorted(d@),
              i0 <= c.len(),
              j0 <= d.len(),
              i0 + j0 <= old(b).len(),
              inv_sub_set(old(b)@, c@, d@, i0, j0),
              inv_sorted(old(b)@, c@, d@, i0, j0),
              i0 + j0 < old(b).len(),
  {
      let mut i = i0;
      let mut j = j0;
  
      if i == c.len() || (j < d.len() && d[j] < c[i]) {
  
          b.set(i + j, d[j]);
          j = j + 1;
      } else {
  
          b.set(i + j, c[i]);
          i = i + 1;
      }
  
      (i, j)
  }
  
  spec fn inv_sorted(b: Seq<i32>, c: Seq<i32>, d: Seq<i32>, i: usize, j: usize) -> bool {
      i <= c.len() && j <= d.len() && i + j <= b.len() &&
      ((i + j > 0 && i < c.len()) ==> (b[j + i - 1] <= c[i as int])) &&
      ((i + j > 0 && j < d.len()) ==> (b[j + i - 1] <= d[j as int])) &&
      sorted(b.subrange(0, (i + j) as int))
  }
  
  spec fn inv_sub_set(b: Seq<i32>, c: Seq<i32>, d: Seq<i32>, i: usize, j: usize) -> bool {
      i <= c.len() && j <= d.len() && i + j <= b.len() &&
      b.subrange(0, (i + j) as int).to_multiset() == 
          c.subrange(0, i as int).to_multiset().add(d.subrange(0, j as int).to_multiset())
  }

vc-helpers: |-

vc-spec: |-
  fn merge(b: &mut Vec<i32>, c: &Vec<i32>, d: &Vec<i32>)
      requires
          old(b).len() == c.len() + d.len(),
          sorted(c@),
          sorted(d@),
      ensures
          sorted(b@),
          b@.to_multiset() == c@.to_multiset().add(d@.to_multiset()),

vc-code: |-
  {
      assume(false);
      unreached();
  }

vc-postamble: |-
  }
  fn main() {}

