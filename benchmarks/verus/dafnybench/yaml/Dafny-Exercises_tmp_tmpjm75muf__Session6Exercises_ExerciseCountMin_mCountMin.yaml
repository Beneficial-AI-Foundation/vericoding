vc-description: |-
  // dummy value for invalid inputs
  
  // dummy value for invalid inputs
  
  //Implement and verify an O(v.len()) algorithm

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn min(v: Seq<int>, i: int) -> int
      decreases i
  {
      if 1 <= i <= v.len() {
          if i == 1 {
              v[0]
          } else if v[i-1] <= min(v, i-1) {
              v[i-1]
          } else {
              min(v, i-1)
          }
      } else {
          0
      }
  }
  
  proof fn min_property(v: Seq<int>, i: int)
      requires 1 <= i <= v.len()
      ensures forall|k: int| 0 <= k < i ==> v[k] >= min(v, i)
      decreases i
  {
      if i > 1 {
          min_property(v, i-1);
      }
  }
  
  spec fn count_min(v: Seq<int>, x: int, i: int) -> int
      decreases i
  {
      if 0 <= i <= v.len() {
          if i == 0 {
              0
          } else if v[i-1] == x {
              1 + count_min(v, x, i-1)
          } else {
              count_min(v, x, i-1)
          }
      } else {
          0
      }
  }
  
  proof fn count_min_property(v: Seq<int>, x: int, i: int)
      requires 0 <= i <= v.len()
      ensures !(exists|k: int| 0 <= k < i && v[k] == x) ==> count_min(v, x, i) == 0
      decreases i
  {
      if i > 0 {
          count_min_property(v, x, i-1);
      }
  }

vc-helpers: |-

vc-spec: |-
  fn m_count_min(v: &Vec<i8>) -> (c: i8)
      requires v.len() > 0
      ensures c as int == count_min(v@.map_values(|x: i8| x as int), 
                            min(v@.map_values(|x: i8| x as int), v.len() as int), 
                            v.len() as int)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}