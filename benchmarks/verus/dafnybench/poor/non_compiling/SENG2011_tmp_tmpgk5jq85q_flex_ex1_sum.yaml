vc-description: |-
  // sums from index 0 -> i - 1
  
  // returns sum of array

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn sumcheck(s: &[int], i: int) -> int
      recommends 0 <= i <= s.len()
      decreases i when 0 <= i <= s.len()
  {
      if i == 0 { 0 }
      else { s[i as nat - 1] + sumcheck(s, i - 1) }
  }

vc-helpers: |-
  spec fn int_slice_from_i8_slice(s: &[i8]) -> &[int] {
      &s@.map(|_i: int, x: i8| x as int)
  }

vc-spec: |-
  #[verifier::exec_allows_no_decreases_clause]
  fn sum(s: &[i8]) -> (a: i8)
      requires s.len() > 0
      ensures sumcheck(int_slice_from_i8_slice(s), s.len() as int) == a as int

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}