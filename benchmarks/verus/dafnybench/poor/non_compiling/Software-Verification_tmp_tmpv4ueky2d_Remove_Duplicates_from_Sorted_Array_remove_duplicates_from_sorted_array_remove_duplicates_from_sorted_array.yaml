vc-description: |-
  // Helper predicate

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_sorted(nums: Seq<int>) -> bool {
      forall|i: int, j: int| 0 <= i < j < nums.len() ==> nums[i] <= nums[j]
  }
  
  spec fn is_sorted_and_distinct(nums: Seq<int>) -> bool {
      forall|i: int, j: int| 0 <= i < j < nums.len() ==> nums[i] < nums[j]
  }

vc-helpers: |-

vc-spec: |-
  fn remove_duplicates_from_sorted_array(nums: Vec<i8>) -> (result: Vec<i8>)
      requires 
          is_sorted(nums@.map(|i: int, x: i8| x as int)),
          1 <= nums@.len() <= 30000,
          forall|i: int| #![trigger nums@[i]] 0 <= i < nums@.len() ==> -100 <= nums@[i] <= 100,
      ensures 
          is_sorted_and_distinct(result@.map(|i: int, x: i8| x as int)),
          forall|x: int| nums@.map(|i: int, y: i8| y as int).contains(x) <==> result@.map(|i: int, y: i8| y as int).contains(x),

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}