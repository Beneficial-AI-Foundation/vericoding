vc-description: |-

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn summing_pair(i: nat, j: nat, nums: Seq<int>, target: int) -> bool
      recommends 
          i < nums.len(),
          j < nums.len(),
  {
      i != j && nums[i as int] + nums[j as int] == target
  }

vc-helpers: |-

vc-spec: |-
  fn two_sum(nums: Vec<i8>, target: i8) -> (pair: (usize, usize))
      requires exists|i: nat, j: nat| i < j < nums@.len() && summing_pair(i, j, nums@.map(|_, x| x as int), target as int) && forall|l: nat, m: nat| l < m < nums@.len() && l != i && m != j ==> !summing_pair(l, m, nums@.map(|_, x| x as int), target as int)
      ensures 
          0 <= pair.0 < nums@.len() && 
          0 <= pair.1 < nums@.len() && 
          summing_pair(pair.0 as nat, pair.1 as nat, nums@.map(|_, x| x as int), target as int)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}