vc-description: |-
  Given two positive integers n and k.
  A factor of an integer n is defined as an integer i where n % i == 0.
  Consider a list of all factors of n sorted in ascending order, return the kth factor in this list or return -1 if n has less than k factors.

  Example 1:
  Input: n = 12, k = 3
  Output: 3
  Explanation: Factors list is [1, 2, 3, 4, 6, 12], the 3rd factor is 3.

  Example 2:
  Input: n = 7, k = 2
  Output: 7
  Explanation: Factors list is [1, 7], the 2nd factor is 7.

  Example 3:
  Input: n = 4, k = 4
  Output: -1
  Explanation: Factors list is [1, 2, 4], there is only 3 factors. We should return -1.

  Example 4:
  Input: n = 1, k = 1
  Output: 1
  Explanation: Factors list is [1], the 1st factor is 1.

  Example 5:
  Input: n = 1000, k = 3
  Output: 4
  Explanation: Factors list is [1, 2, 4, 5, 8, 10, 20, 25, 40, 50, 100, 125, 200, 250, 500, 1000].

  Constraints:

  1 <= k <= n <= 1000

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn count_factors_up_to(n: nat, limit: nat) -> nat 
      decreases limit
  {
      if limit == 0 {
          0nat
      } else {
          count_factors_up_to(n, (limit - 1) as nat) + 
          if n > 0 && limit > 0 && n % limit == 0 { 1nat } else { 0nat }
      }
  }

  fn kth_factor(n: u32, k: u32) -> (result: i32)
      requires n > 0 && k > 0,
      ensures 
          (k == 1 ==> result == 1),
          (result != -1 ==> result > 0 && n % (result as u32) == 0),
          (result == -1 ==> count_factors_up_to(n as nat, n as nat) < k as nat),

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {
      // Apps difficulty: interview
      // Assurance level: guarded

      // Example outputs:
      // kth_factor(12, 3) should return 3
      // kth_factor(7, 2) should return 7  
      // kth_factor(4, 4) should return -1
  }