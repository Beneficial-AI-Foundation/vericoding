vc-description: |-
  Given an array A of positive integers, call a (contiguous, not necessarily distinct) subarray of A good if the number of different integers in that subarray is exactly K.
  (For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.)
  Return the number of good subarrays of A.

  Example 1:
  Input: A = [1,2,1,2,3], K = 2
  Output: 7
  Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].

  Example 2:
  Input: A = [1,2,1,3,4], K = 3
  Output: 3
  Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].

  Note:

  1 <= A.length <= 20000
  1 <= A[i] <= A.length
  1 <= K <= A.length
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-
  spec fn unique_elements(a: Seq<nat>) -> Set<nat>
      decreases a.len()
  {
      if a.len() == 0 {
          set![]
      } else {
          unique_elements(a.skip(1)).insert(a[0])
      }
  }
vc-spec: |-
  fn subarrays_with_k_distinct(a: Vec<nat>, k: nat) -> (result: nat)
      requires 
          a.len() > 0,
          1 <= k <= 50,
          forall|x: nat| a@.contains(x) ==> 1 <= x <= 100,
      ensures 
          result >= 0,
          k == 1 ==> result >= a.len(),
          k == unique_elements(a@).len() ==> result >= 1,
vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {}