vc-description: |-
  Given a non-empty array of numbers, a0, a1, a2, … , an-1, where 0 ≤ ai < 231.
  
  Find the maximum result of ai XOR aj, where 0 ≤ i, j < n.
  
  Could you do this in O(n) runtime?
  
  Example:
  
  Input: [3, 10, 5, 25, 2, 8]
  
  Output: 28
  
  Explanation: The maximum result is 5 ^ 25 = 28.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn max_xor_brute_force(nums: Seq<u32>) -> u32 
      decreases nums.len()
  {
      if nums.len() <= 1 {
          0
      } else {
          let max_rest = max_xor_brute_force(nums.skip(1));
          let max_with_first = spec_max_xor_with_element(nums[0], nums.skip(1));
          if max_with_first > max_rest { max_with_first } else { max_rest }
      }
  }

  spec fn spec_max_xor_with_element(x: u32, nums: Seq<u32>) -> u32 
      decreases nums.len()
  {
      if nums.len() == 0 {
          0
      } else {
          let current_xor = x ^ nums[0];
          let rest_max = spec_max_xor_with_element(x, nums.skip(1));
          if current_xor > rest_max { current_xor } else { rest_max }
      }
  }

  fn find_maximum_xor(nums: Vec<u32>) -> (result: u32)
      requires nums.len() > 0,
      ensures 
          result <= max_xor_brute_force(nums@),
          nums.len() == 1 ==> result == 0,
          (exists|i: int, j: int| 0 <= i < nums.len() && 0 <= j < nums.len() && (nums[i] ^ nums[j]) == result) || result == 0,

vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}