vc-description: |-
  Chef lives in a big apartment in Chefland. The apartment charges maintenance fees that he is supposed to pay monthly on time. But Chef is a lazy person and sometimes misses the deadlines. The apartment charges 1000 Rs per month as maintenance fees. Also, they also charge a one-time fine of 100 Rs for each of the late payments. It does not matter how late the payment is done, the fine is fixed to be Rs.100.
  Chef has been living in the apartment for N months. Now, he wants to switch the apartment, so he has to pay the entire dues to the apartment. The deadline for the N-th month is also over. From his bank statement, he finds the information whether he paid apartment rent for a particular month for not. You are given this information by an array A of size N, where Ai (can be either 0 or 1) specifies whether he has paid the 1000Rs in the i-th month or not. Assume that Chef paid the fees in the i-th month, then this fees will be considered for the earliest month for which Chef has not yet paid the fees.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn calculate_maintenance_due(n: usize, payments: Vec<String>) -> (result: usize)
      ensures
          n == 0 ==> result == 0,
          payments.len() == 0 ==> result == 0

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {
      // Apps difficulty: interview
      // Assurance level: guarded_and_plausible

      // let result1 = calculate_maintenance_due(2, vec!["1".to_string(), "1".to_string()]);
      // assert!(result1 == 0);

      // let result2 = calculate_maintenance_due(2, vec!["0".to_string(), "0".to_string()]);
      // assert!(result2 == 2200);

      // let result3 = calculate_maintenance_due(3, vec!["0".to_string(), "1".to_string(), "0".to_string()]);
      // assert!(result3 == 2300);
  }