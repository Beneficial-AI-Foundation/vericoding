vc-description: |-
  This is a peculiar functioning setup.
  Two Tanks are separated from each other by a wall. There is a pipe in the wall which connects both tanks which allows flow of water between them. Due to this, there is change in temperature of both tanks, every minute temperature of Tank with larger temperature among two decreases by one and temperature of Tank with smaller temperature among two increases by two until equilibrium is reached, But there is a problem.
  The pipe can't control this flow of water if there is Non-equilibrium (inequality of temperature on both sides) even after m minutes and the pipe will burst after it, your task is to predict whether the pipe will burst or not.
  Note: If equilibrium cannot be reached the process will continue forever.
  The initial temperature of Cold Tank is Tc, of Hot Tank it is Th.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn will_pipe_burst(m: nat, tc: int, th: int) -> (result: bool)
      requires tc <= th,
      ensures 
          ((th - tc) % 3 != 0) ==> result == true,
          ((th - tc) % 3 == 0) ==> result == ((th - tc) / 3 > m),
          (tc == th) ==> result == false

vc-code: |-
  {
      // impl-start
      assume(false);
      false
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {
      // #guard_msgs in
      // #eval will_pipe_burst 4 5 10

      // #guard_msgs in  
      // #eval will_pipe_burst 2 2 5

      // #guard_msgs in
      // #eval will_pipe_burst 1 1 7
  }