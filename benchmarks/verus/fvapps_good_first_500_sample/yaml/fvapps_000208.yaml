vc-description: |-
  Given an array of unique integers, each integer is strictly greater than 1.
  We make a binary tree using these integers and each number may be used for any number of times.
  Each non-leaf node's value should be equal to the product of the values of it's children.
  How many binary trees can we make?  Return the answer modulo 10 ** 9 + 7.
  Example 1:
  Input: A = [2, 4]
  Output: 3
  Explanation: We can make these trees: [2], [4], [4, 2, 2]
  Example 2:
  Input: A = [2, 4, 5, 10]
  Output: 7
  Explanation: We can make these trees: [2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2].

  Note:

  1 <= A.length <= 1000.
  2 <= A[i] <= 10 ^ 9.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn num_factored_binary_trees(arr: Vec<u32>) -> (result: u32)
      requires 
          arr.len() >= 1,
          arr.len() <= 1000,
          forall|i: int| 0 <= i < arr.len() ==> arr[i] >= 2,
          forall|i: int, j: int| 0 <= i < j < arr.len() ==> arr[i] != arr[j],
      ensures 
          result > 0

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-
  /* Apps difficulty: interview
     Assurance level: guarded_and_plausible */

  }

  fn main() {
      // print!("{}", num_factored_binary_trees(vec![2, 4]));
      // print!("{}", num_factored_binary_trees(vec![2, 4, 5, 10]));
      // print!("{}", num_factored_binary_trees(vec![2, 3]));
  }