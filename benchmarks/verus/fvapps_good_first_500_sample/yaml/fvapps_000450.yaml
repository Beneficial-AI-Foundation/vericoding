vc-description: |-
  A zero-indexed array A of length N contains all integers from 0 to N-1. Find and return the longest length of set S, where S[i] = {A[i], A[A[i]], A[A[A[i]]], ... } subjected to the rule below.

  Suppose the first element in S starts with the selection of element A[i] of index = i, the next element in S should be A[A[i]], and then A[A[A[i]]]â€¦ By that analogy, we stop adding right before a duplicate element occurs in S.

  Example 1:

  Input: A = [5,4,0,3,1,6,2]
  Output: 4
  Explanation: 
  A[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.

  One of the longest S[K]:
  S[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}

  Note:

  N is an integer within the range [1, 20,000].
  The elements of A are all distinct.
  Each element of A is an integer within the range [0, N-1].

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn array_nesting(nums: Vec<usize>) -> (result: usize)

vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {
      // let test1 = vec![5, 4, 0, 3, 1, 6, 2];
      // assert(array_nesting(test1) == 4);
      
      // let test2 = vec![0, 1, 2];
      // assert(array_nesting(test2) == 1);
      
      // let test3 = vec![1, 2, 0];
      // assert(array_nesting(test3) == 3);
  }