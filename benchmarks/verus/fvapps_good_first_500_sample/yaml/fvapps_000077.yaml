vc-description: |-
  You are given a picture consisting of n rows and m columns. Rows are numbered from 1 to n from the top to the bottom, columns are numbered from 1 to m from the left to the right. Each cell is painted either black or white. 

  You think that this picture is not interesting enough. You consider a picture to be interesting if there is at least one cross in it. A cross is represented by a pair of numbers x and y, where 1 ≤ x ≤ n and 1 ≤ y ≤ m, such that all cells in row x and all cells in column y are painted black.

  For examples, each of these pictures contain crosses:

   [Image] 

  The fourth picture contains 4 crosses: at (1, 3), (1, 5), (3, 3) and (3, 5).

  Following images don't contain crosses:

   [Image] 

  You have a brush and a can of black paint, so you can make this picture interesting. Each minute you may choose a white cell and paint it black.

  What is the minimum number of minutes you have to spend so the resulting picture contains at least one cross?

  You are also asked to answer multiple independent queries.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn is_valid_grid(grid: Seq<Vec<char>>) -> bool {
      grid.len() > 0 && 
      forall|i: int| #![trigger grid[i]] 0 <= i < grid.len() ==> grid[i].len() == grid[0].len()
  }

  spec fn has_cross_at(grid: Seq<Vec<char>>, row: int, col: int) -> bool 
      recommends is_valid_grid(grid)
  {
      0 <= row < grid.len() && 
      0 <= col < grid[0].len() &&
      forall|j: int| #![trigger grid[row][j]] 0 <= j < grid[0].len() ==> grid[row][j] == '*' &&
      forall|i: int| #![trigger grid[i][col]] 0 <= i < grid.len() ==> grid[i][col] == '*'
  }

  spec fn has_any_cross(grid: Seq<Vec<char>>) -> bool 
      recommends is_valid_grid(grid)
  {
      exists|row: int, col: int| has_cross_at(grid, row, col)
  }

  fn min_minutes_for_cross(grid: Vec<Vec<char>>) -> (result: usize)
      requires 
          grid.len() > 0,
          grid.len() <= 50000,
          forall|i: int| #![trigger grid[i]] 0 <= i < grid.len() ==> grid[i].len() == grid[0].len(),
          grid[0].len() > 0,
          grid[0].len() <= 50000,
          is_valid_grid(grid@),
      ensures 
          result <= grid.len() + grid[0].len() - 1,
          has_any_cross(grid@) ==> result == 0,

vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}