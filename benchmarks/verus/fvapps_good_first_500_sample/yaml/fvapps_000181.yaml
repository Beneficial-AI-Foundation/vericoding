vc-description: |-
  Given a string text, we are allowed to swap two of the characters in the string. Find the length of the longest substring with repeated characters.

  Example 1:
  Input: text = "ababa"
  Output: 3
  Explanation: We can swap the first 'b' with the last 'a', or the last 'b' with the first 'a'. Then, the longest repeated character substring is "aaa", which its length is 3.

  Example 2:
  Input: text = "aaabaaa"
  Output: 6
  Explanation: Swap 'b' with the last 'a' (or the first 'a'), and we get longest repeated character substring "aaaaaa", which its length is 6.

  Example 3:
  Input: text = "aaabbaaa"
  Output: 4

  Example 4:
  Input: text = "aaaaa"
  Output: 5
  Explanation: No need to swap, longest repeated character substring is "aaaaa", length is 5.

  Example 5:
  Input: text = "abcdef"
  Output: 1

  Constraints:

  1 <= text.length <= 20000
  text consist of lowercase English characters only.
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  spec fn count_unique_chars(s: Seq<char>) -> nat
      decreases s.len()
  {
      if s.len() == 0 {
          0
      } else {
          let first = s[0];
          let rest_count = count_unique_chars(s.skip(1));
          if s.skip(1).contains(first) {
              rest_count
          } else {
              rest_count + 1
          }
      }
  }

  fn max_repeated_chars_with_swap(s: Vec<char>) -> (result: usize)
      requires s.len() > 0,
      ensures 
          1 <= result && result <= s.len(),
          (count_unique_chars(s@) == 1 ==> result == s.len()),
vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {
      // let result1 = max_repeated_chars_with_swap(vec!['a', 'b', 'a', 'b', 'a']);
      // println!("{}", result1); // Should print 3
      
      // let result2 = max_repeated_chars_with_swap(vec!['a', 'a', 'a', 'b', 'a', 'a', 'a']);
      // println!("{}", result2); // Should print 6
      
      // let result3 = max_repeated_chars_with_swap(vec!['a', 'a', 'a', 'b', 'b', 'a', 'a', 'a']);
      // println!("{}", result3); // Should print 4
  }