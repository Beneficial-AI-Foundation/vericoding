vc-description: |-
  Given a positive integer n, break it into the sum of at least two positive integers and maximize the product of those integers. Return the maximum product you can get.

  For example, given n = 2, return 1 (2 = 1 + 1); given n = 10, return 36 (10 = 3 + 3 + 4).

  Note: You may assume that n is not less than 2 and not larger than 58.

  Credits:Special thanks to @jianchao.li.fighter for adding this problem and creating all test cases.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn integer_break(n: nat) -> (result: nat)
      requires n >= 2
      ensures 
          result > 0,
          n >= 4 ==> result >= n,
          n == 2 ==> result == 1,
          n == 3 ==> result == 2

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {
      // Apps difficulty: interview
      // Assurance level: guarded

      // #guard_msgs in
      // #eval integer_break 2

      // #guard_msgs in  
      // #eval integer_break 10

      // #guard_msgs in
      // #eval integer_break 8
  }