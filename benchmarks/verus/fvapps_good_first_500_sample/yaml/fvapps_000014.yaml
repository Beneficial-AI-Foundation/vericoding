vc-description: |-
  Vasya claims that he had a paper square. He cut it into two rectangular parts using one vertical or horizontal cut. Then Vasya informed you the dimensions of these two rectangular parts. You need to check whether Vasya originally had a square. In other words, check if it is possible to make a square using two given rectangles.

  -----Input-----

  The first line contains an integer $t$ ($1 \le t \le 10^4$) — the number of test cases in the input. Then $t$ test cases follow.

  Each test case is given in two lines.

  The first line contains two integers $a_1$ and $b_1$ ($1 \le a_1, b_1 \le 100$) — the dimensions of the first one obtained after cutting rectangle. The sizes are given in random order (that is, it is not known which of the numbers is the width, and which of the numbers is the length).

  The second line contains two integers $a_2$ and $b_2$ ($1 \le a_2, b_2 \le 100$) — the dimensions of the second obtained after cutting rectangle. The sizes are given in random order (that is, it is not known which of the numbers is the width, and which of the numbers is the length).

  -----Output-----

  Print $t$ answers, each of which is a string "YES" (in the case of a positive answer) or "NO" (in the case of a negative answer). The letters in words can be printed in any case (upper or lower).

  -----Example-----
  Input
  3
  2 3
  3 1
  3 2
  1 3
  3 3
  1 3

  Output
  Yes
  Yes
  No
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  spec fn can_make_square_spec(a1: u32, b1: u32, a2: u32, b2: u32) -> bool {
      /* Two rectangles can form a square if they can be arranged to create a square
         Either horizontally adjacent or vertically adjacent */
      (a1 == a2 && b1 + b2 == a1) || 
      (a1 == b2 && b1 + a2 == a1) ||
      (b1 == a2 && a1 + b2 == b1) ||
      (b1 == b2 && a1 + a2 == b1)
  }

  fn can_make_square(a1: u32, b1: u32, a2: u32, b2: u32) -> (result: bool)
      requires a1 > 0 && b1 > 0 && a2 > 0 && b2 > 0,
      ensures result == can_make_square_spec(a1, b1, a2, b2),
vc-code: |-
  {
      // impl-start
      assume(false);
      false
      // impl-end
  }
vc-postamble: |-
  proof fn can_make_square_symmetric_first_rect(a1: u32, b1: u32, a2: u32, b2: u32)
      requires a1 > 0 && b1 > 0 && a2 > 0 && b2 > 0,
      ensures can_make_square_spec(a1, b1, a2, b2) == can_make_square_spec(b1, a1, a2, b2),
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  proof fn can_make_square_symmetric_second_rect(a1: u32, b1: u32, a2: u32, b2: u32)
      requires a1 > 0 && b1 > 0 && a2 > 0 && b2 > 0,
      ensures can_make_square_spec(a1, b1, a2, b2) == can_make_square_spec(a1, b1, b2, a2),
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  proof fn can_make_square_symmetric_swap_rects(a1: u32, b1: u32, a2: u32, b2: u32)
      requires a1 > 0 && b1 > 0 && a2 > 0 && b2 > 0,
      ensures can_make_square_spec(a1, b1, a2, b2) == can_make_square_spec(a2, b2, a1, b1),
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  proof fn can_make_square_identical_rects_false(n: u32)
      requires n > 0,
      ensures can_make_square_spec(n, n, n, n) == false,
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  proof fn can_make_square_known_case1()
      ensures can_make_square_spec(2, 3, 3, 1) == true,
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  proof fn can_make_square_known_case2()
      ensures can_make_square_spec(3, 2, 1, 3) == true,
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  proof fn can_make_square_known_case3()
      ensures can_make_square_spec(3, 3, 1, 3) == false,
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  }

  fn main() {}