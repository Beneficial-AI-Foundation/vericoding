vc-description: |-
  Given a positive integer N, return the number of positive integers less than or equal to N that have at least 1 repeated digit.

  Example 1:
  Input: 20
  Output: 1
  Explanation: The only positive number (<= 20) with at least 1 repeated digit is 11.

  Example 2:
  Input: 100
  Output: 10
  Explanation: The positive numbers (<= 100) with atleast 1 repeated digit are 11, 22, 33, 44, 55, 66, 77, 88, 99, and 100.

  Example 3:
  Input: 1000
  Output: 262

  Note:

  1 <= N <= 10^9

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn count_numbers_with_repeated_digits(n: u32) -> (result: u32)
      requires n > 0,
      ensures 
          result <= n,
          (n > 0 && n < 10) ==> result == 0,
          n == 20 ==> result == 1,
          n == 100 ==> result == 10,
          n == 1000 ==> result == 262,

vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {
      // let test1 = count_numbers_with_repeated_digits(20);
      // assert(test1 == 1);
      // let test2 = count_numbers_with_repeated_digits(100);
      // assert(test2 == 10);
      // let test3 = count_numbers_with_repeated_digits(1000);
      // assert(test3 == 262);
  }