vc-description: |-
  You are given a sequence A_1, A_2, ..., A_N. You have to split the array into maximum number of non-empty subarrays such that the gcd of elements of each subarray is equal to 1.

  Input:
  - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.
  - The first line of each test case contains a single integer N.
  - The second line contains N space-separated integers A_1, A_2, ..., A_N.

  Output:
  For each test case, print a single line containing one integer — the maximum number of subarrays formed, or -1 if the array cannot be split while satisfying the above condition.

  Constraints:
  - 1 ≤ T ≤ 3
  - 1 ≤ N ≤ 5 × 10^5
  - 1 ≤ A_i ≤ 10^6 for each valid i

  Sample Input:
  2
  3
  2 2 3
  4
  2 3 3 2

  Sample Output:
  1
  2

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn gcd_of_list(nums: Seq<nat>) -> nat
  {
      1nat
  }

  fn max_gcd_subarrays(n: nat, arr: Vec<nat>) -> (result: i32)
      requires arr.len() == n,
      ensures 
          (forall|i: int| 0 <= i < arr.len() ==> arr[i] >= 1),
          result == -1 || result > 0,

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {
      // let result1 = max_gcd_subarrays(3, vec![2, 2, 3]);
      // println!("{}", result1); // Expected: 1
      
      // let result2 = max_gcd_subarrays(4, vec![2, 3, 3, 2]);
      // println!("{}", result2); // Expected: 2
      
      // let result3 = max_gcd_subarrays(2, vec![4, 6]);
      // println!("{}", result3); // Expected: -1
  }