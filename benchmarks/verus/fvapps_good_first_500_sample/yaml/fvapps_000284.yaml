vc-description: |-
  Given an array of integers arr. Return the number of sub-arrays with odd sum.
  As the answer may grow large, the answer must be computed modulo 10^9 + 7.

  Example 1:
  Input: arr = [1,3,5]
  Output: 4
  Explanation: All sub-arrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]]
  All sub-arrays sum are [1,4,9,3,8,5].
  Odd sums are [1,9,3,5] so the answer is 4.

  Example 2:
  Input: arr = [2,4,6]
  Output: 0
  Explanation: All sub-arrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]]
  All sub-arrays sum are [2,6,12,4,10,6].
  All sub-arrays have even sum and the answer is 0.

  Example 3:
  Input: arr = [1,2,3,4,5,6,7]
  Output: 16

  Example 4:
  Input: arr = [100,100,99,99]
  Output: 4

  Example 5:
  Input: arr = [7]
  Output: 1

  Constraints:

  1 <= arr.length <= 10^5
  1 <= arr[i] <= 100
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  spec fn count_odd_subarrays(arr: Seq<nat>) -> nat
      decreases arr.len()
  {
      if arr.len() == 0 {
          0
      } else {
          let first = arr[0];
          let rest = arr.skip(1);
          let current_odd_count = if first % 2 == 1 { 
              (arr.len() + 1) / 2 
          } else { 
              arr.len() / 2 
          };
          current_odd_count + count_odd_subarrays(rest)
      }
  }

  fn num_of_subarrays(arr: Vec<nat>) -> (result: nat)
      requires 
          arr.len() > 0,
          arr.len() <= 100000,
          forall|i: int| 0 <= i < arr.len() ==> #[trigger] arr[i] >= 1 && #[trigger] arr[i] <= 100,
      ensures
          result < 1000000007,
          result >= 0,
vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {
      // let test1 = vec![1, 3, 5];
      // let result1 = num_of_subarrays(test1);
      // assert(result1 == 4);
      
      // let test2 = vec![2, 4, 6];
      // let result2 = num_of_subarrays(test2);
      // assert(result2 == 0);
      
      // let test3 = vec![1, 2, 3, 4, 5, 6, 7];
      // let result3 = num_of_subarrays(test3);
      // assert(result3 == 16);
  }