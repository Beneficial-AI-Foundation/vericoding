vc-description: |-
  An encoded string S is given.  To find and write the decoded string to a tape, the encoded string is read one character at a time and the following steps are taken:

  If the character read is a letter, that letter is written onto the tape.
  If the character read is a digit (say d), the entire current tape is repeatedly written d-1 more times in total.

  Now for some encoded string S, and an index K, find and return the K-th letter (1 indexed) in the decoded string.

  Example 1:
  Input: S = "leet2code3", K = 10
  Output: "o"
  Explanation: 
  The decoded string is "leetleetcodeleetleetcodeleetleetcode".
  The 10th letter in the string is "o".

  Example 2:
  Input: S = "ha22", K = 5
  Output: "h"
  Explanation: 
  The decoded string is "hahahaha".  The 5th letter is "h".

  Example 3:
  Input: S = "a2345678999999999999999", K = 1
  Output: "a"
  Explanation: 
  The decoded string is "a" repeated 8301530446056247680 times.  The 1st letter is "a".

  Constraints:

  2 <= S.length <= 100
  S will only contain lowercase letters and digits 2 through 9.
  S starts with a letter.
  1 <= K <= 10^9
  It's guaranteed that K is less than or equal to the length of the decoded string.
  The decoded string is guaranteed to have less than 2^63 letters.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn is_letter(c: char) -> bool {
      'a' <= c && c <= 'z'
  }

  spec fn char_to_digit(c: char) -> int {
      (c as u8 - '0' as u8) as int
  }

  spec fn string_contains_letter(s: Seq<char>) -> bool {
      exists|i: int| 0 <= i < s.len() && is_letter(s[i])
  }

  spec fn string_starts_with_letter(s: Seq<char>) -> bool {
      s.len() > 0 && is_letter(s[0])
  }

  fn decode_at_index(s: Vec<char>, k: usize) -> (result: char)
      requires 
          k > 0,
          string_contains_letter(s@),
          string_starts_with_letter(s@),
      ensures 
          is_letter(result),
          exists|i: int| 0 <= i < s.len() && is_letter(s[i]) && result == s[i],

vc-code: |-
  {
      // impl-start
      assume(false);
      'a'
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {
      // let s1 = vec!['l', 'e', 'e', 't', '2', 'c', 'o', 'd', 'e', '3'];
      // println!("{}", decode_at_index(s1, 10));
      // let s2 = vec!['h', 'a', '2', '2'];
      // println!("{}", decode_at_index(s2, 5));
      // let s3 = vec!['a', '2', '3', '4', '5', '6', '7', '8', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9'];
      // println!("{}", decode_at_index(s3, 1));
  }