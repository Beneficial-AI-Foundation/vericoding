vc-description: |-
  Our Chef is doing what he is best at, COOKING A BARBECUE for his guests. He has invited all of us, and taking the help of his apprentice to smoke the barbecues. The chef has got BBQ sticks, each can take N fillings, and he presents N distinctly filled sticks in front his guests forming a N*N  matrix

  But here is the problem, he has got only two type of fillings, meat and capsicum, but still wants the N  sticks to look "presentable", he is very particular about it. As a solution he fills the main diagonal of the N*N  matrix with the same type of filling (either meat or capsicum) forming a "presentable" set

  The Chef's apprentice is a fool, so the Chef asks him to cook M distinctly filled sticks ,so that the Chef is sure that among M there exist N sticks forming a "presentable" set. Your job is to determine smallest possible value of M.

  -----Input-----
  T, the number of test cases, followed by T lines. 
  Each line containing the positive integer N >= 4

  -----Output-----
  T lines of output, each line contain the positive integer M

  -----Example-----
  Input:
  1
  4

  Output:
  5
vc-preamble: |-
  use vstd::prelude::*;
  use vstd::arithmetic::power2::pow2;

  verus! {
vc-helpers: |-

vc-spec: |-
  fn solve_barbecue_sticks(n: nat) -> (result: nat)
      requires n >= 3,
      ensures 
          result > 0,
          result % 2 == 1,
          result >= pow2((n - 2) as nat)
vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {
      // #eval solve_barbecue_sticks 4  // Expected: 5
      // #eval solve_barbecue_sticks 5  // Expected: 9  
      // #eval solve_barbecue_sticks 6  // Expected: 17
  }