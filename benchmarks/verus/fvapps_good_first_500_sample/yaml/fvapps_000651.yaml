vc-description: |-
  Sereja has an array A of N positive integers : A[1], A[2], A[3], ... , A[N]. 

  In a single operation on the array, he performs the following two steps :  

  - Pick two indices i, j s.t. A[i] > A[j]
  - A[i] -= A[j]

  Sereja can apply these operations any number of times (possibly zero), such that the sum of resulting elements of the array is as small as possible.

  Help Sereja find this minimum sum.

  -----Input-----

  First line of input contains an integer T - the number of test cases. T test cases follow.

  First line of each test case contains the integer N. The next line contains N integers — A[1], A[2], A[3], ... , A[N].

  -----Output-----
  For each test case, output a single line with the answer.

  -----Constraints-----
  - 1 ≤ T ≤ 10
  - 1 ≤ N ≤ 105
  - 1 ≤ A[i] ≤ 109

  -----Example-----
  Input:
  2
  1
  1
  3
  2 4 6

  Output:
  1
  6

  -----Explanation-----
  Example case 2. In this case, one possible way in which Sereja can perform the operations could be as follows. 

  -  Pick i = 2, j = 1. A[2] -= A[1]. Now the resulting array would be [2, 2, 6].
  -  Pick i = 3, j = 2. A[3] -= A[2]. Now the resulting array would be [2, 2, 4].
  -  Pick i = 3, j = 2. A[3] -= A[2]. Now the resulting array would be [2, 2, 2]. 

  As the resulting array is [2 2 2], so the sum is 6.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn gcd(a: nat, b: nat) -> nat
      decreases a + b
  {
      if a == 0 {
          b
      } else if b == 0 {
          a
      } else if a <= b {
          gcd(a, (b - a) as nat)
      } else {
          gcd((a - b) as nat, b)
      }
  }

  spec fn gcd_list(arr: Seq<nat>) -> nat
      decreases arr.len()
  {
      if arr.len() == 0 {
          0
      } else if arr.len() == 1 {
          arr[0]
      } else {
          gcd(arr[0], gcd_list(arr.skip(1)))
      }
  }

vc-spec: |-
  fn find_minimum_array_sum(arr: Vec<nat>) -> (result: nat)
      requires 
          arr.len() > 0,
          forall|i: int| 0 <= i < arr.len() ==> arr[i] > 0,
      ensures 
          result == (arr.len() as nat) * gcd_list(arr@),

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {
      // let test1 = vec![1nat];
      // let result1 = find_minimum_array_sum(test1);
      // assert(result1 == 1);
      
      // let test2 = vec![2nat, 4nat, 6nat];
      // let result2 = find_minimum_array_sum(test2);
      // assert(result2 == 6);
      
      // let test3 = vec![3nat, 6nat, 9nat, 12nat];
      // let result3 = find_minimum_array_sum(test3);
      // assert(result3 == 12);
  }