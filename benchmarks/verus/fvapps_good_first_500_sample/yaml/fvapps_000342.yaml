vc-description: |-
  On a broken calculator that has a number showing on its display, we can perform two operations:

  Double: Multiply the number on the display by 2, or;
  Decrement: Subtract 1 from the number on the display.

  Initially, the calculator is displaying the number X.
  Return the minimum number of operations needed to display the number Y.

  Example 1:
  Input: X = 2, Y = 3
  Output: 2
  Explanation: Use double operation and then decrement operation {2 -> 4 -> 3}.

  Example 2:
  Input: X = 5, Y = 8
  Output: 2
  Explanation: Use decrement and then double {5 -> 4 -> 8}.

  Example 3:
  Input: X = 3, Y = 10
  Output: 3
  Explanation:  Use double, decrement and double {3 -> 6 -> 5 -> 10}.

  Example 4:
  Input: X = 1024, Y = 1
  Output: 1023
  Explanation: Use decrement operations 1023 times.

  Note:

  1 <= X <= 10^9
  1 <= Y <= 10^9
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  fn broken_calc(start: nat, target: nat) -> (result: nat)
      requires
          1 <= start <= 1000000000,
          1 <= target <= 1000000000,
      ensures
          result >= 0,
          start == target ==> result == 0,
          start > target ==> result == start - target,
vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {
      // Apps difficulty: interview
      // Assurance level: guarded_and_plausible

      // #eval broken_calc 2 3  // Expected: 2
      // #eval broken_calc 5 8  // Expected: 2 
      // #eval broken_calc 3 10 // Expected: 3
  }