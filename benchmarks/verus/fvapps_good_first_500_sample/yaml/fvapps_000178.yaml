vc-description: |-
  Say you have an array for which the ith element is the price of a given stock on day i.

  Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:

         You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
         After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)

  Example:

  Input: [1,2,3,0,2]
  Output: 3 
  Explanation: transactions = [buy, sell, cooldown, buy, sell]
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  spec fn spec_adjacent_diffs_sum(prices: Seq<nat>) -> nat
      decreases prices.len()
  {
      if prices.len() <= 1 {
          0nat
      } else {
          let diff = if prices[1] > prices[0] { (prices[1] - prices[0]) as nat } else { 0nat };
          diff + spec_adjacent_diffs_sum(prices.skip(1))
      }
  }

  spec fn max_stock_profit_with_cooldown_spec(prices: Seq<nat>) -> nat {
      0nat  /* placeholder uninterpreted function body */
  }

  fn max_stock_profit_with_cooldown(prices: Vec<nat>) -> (result: nat)
      ensures
          /* Empty or single price returns zero profit */
          prices.len() <= 1 ==> result == 0,
          /* Result is always non-negative */
          result >= 0,
          /* Decreasing prices yield zero profit */
          (prices.len() >= 2 && (forall|i: int, j: int| 0 <= i < j < prices.len() ==> prices[i] >= prices[j])) ==> result == 0,
          /* Profit is bounded by sum of positive adjacent differences */
          prices.len() >= 2 ==> result <= spec_adjacent_diffs_sum(prices@),
          /* Repeated list profit is at least original profit */
          prices.len() >= 1 ==> max_stock_profit_with_cooldown_spec(prices@ + prices@) >= result,
vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }
vc-postamble: |-
  }

  fn main() {
      // let result1 = max_stock_profit_with_cooldown(vec![1, 2, 3, 0, 2]);
      // println!("Result 1: {}", result1); // Expected: 3
      
      // let result2 = max_stock_profit_with_cooldown(vec![1]);
      // println!("Result 2: {}", result2); // Expected: 0
      
      // let result3 = max_stock_profit_with_cooldown(vec![2, 1, 4]);
      // println!("Result 3: {}", result3); // Expected: 3
  }