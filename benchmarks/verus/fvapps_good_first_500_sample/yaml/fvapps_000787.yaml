vc-description: |-
  You are given an array A of size N. Let us list down all the subarrays of the given array. There will be a total of N * (N + 1) / 2 subarrays of the given array. Let us sort each of the subarrays in descending order of the numbers in it. 

  Now you want to sort these subarrays in descending order. You can compare two subarrays B, C, as follows.

  compare(B, C):
  Append N - |B| zeros at the end of the array B.
  Append N - |C| zeros at the end of the array C.
  for i = 1 to N:
  if B[i] < C[i]:
  return B is less than C
  if B[i] > C[i]:
  return B is greater than C
  return B and C are equal.

  You are given M queries asking for the maximum element in the pth subarray (1-based indexing).

  -----Input-----
  The first line of input contains T, the number of test cases.
  The first line of each test case contains two space separated integers N and M, denoting the array size and the number of queries respectively.
  The next line contains N space-separated integers denoting the array elements.

  Each of the next M lines contains a single integer - p.

  -----Output-----
  Output a single integer corresponding to the maximum element in the pth subarray.

  -----Constraints-----
  - 1 ≤ Ai ≤ 109
  - 1 ≤ p ≤ N+1C2

  -----Subtasks-----Subtask #1 (20 points):
  - 1 ≤ T ≤ 20
  - 1 ≤ N ≤ 200
  - 1 ≤ M ≤ 104
  Subtask #2 (30 points):
  - 1 ≤ T ≤ 20
  - 1 ≤ N ≤ 3000
  - 1 ≤ M ≤ 104
  Subtask #3 (50 points):
  - 1 ≤ T ≤ 5
  - 1 ≤ N ≤ 105
  - 1 ≤ M ≤ 105

  -----Example-----
  Input:1
  4 2
  3 1 2 4
  1
  5

  Output:4
  3
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  spec fn list_maximum(l: Seq<i32>) -> i32 
      decreases l.len()
  {
      if l.len() == 0 {
          0
      } else if l.len() == 1 {
          l[0]
      } else {
          let first = l[0];
          let rest_max = list_maximum(l.subrange(1, l.len() as int));
          if first > rest_max { first } else { rest_max }
      }
  }

  fn solve_max_subarray_query(n: usize, arr: Vec<i32>, queries: Vec<usize>) -> (result: Vec<i32>)
      requires 
          arr.len() > 0,
          arr.len() <= 5,
          queries.len() > 0,
          queries.len() <= 3,
          forall|x: i32| arr@.contains(x) ==> -100 <= x && x <= 100,
          forall|q: usize| queries@.contains(q) ==> 1 <= q && q <= 15,
      ensures
          result.len() == queries.len(),
          forall|x: i32| result@.contains(x) ==> x <= list_maximum(arr@),
vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }
vc-postamble: |-

  }

  fn main() {
      // let test_result = solve_max_subarray_query(4, vec![3, 1, 2, 4], vec![1, 5]);
      // println!("{:?}", test_result);
      
      // let test_result2 = solve_max_subarray_query(3, vec![1, 2, 3], vec![1, 2, 3]);
      // println!("{:?}", test_result2);
  }