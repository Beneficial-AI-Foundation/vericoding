vc-description: |-
  Given an array of citations sorted in ascending order (each citation is a non-negative integer) of a researcher, write a function to compute the researcher's h-index.

  According to the definition of h-index on Wikipedia: "A scientist has index h if h of his/her N papers have at least h citations each, and the other N âˆ’ h papers have no more than h citations each."

  Example:

  Input: citations = [0,1,3,5,6]
  Output: 3 
  Explanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had 
               received 0, 1, 3, 5, 6 citations respectively. 
               Since the researcher has 3 papers with at least 3 citations each and the remaining 
               two with no more than 3 citations each, her h-index is 3.

  Note:

  If there are several possible values for h, the maximum one is taken as the h-index.

  Follow up:

         This is a follow up problem to H-Index, where citations is now guaranteed to be sorted in ascending order.
         Could you solve it in logarithmic time complexity?

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn count_papers_with_at_least_citations(citations: Seq<u32>, h: u32) -> nat {
      citations.filter(|x: u32| x >= h).len()
  }

  spec fn is_valid_h_index(citations: Seq<u32>, h: u32) -> bool {
      let papers_with_at_least_h = count_papers_with_at_least_citations(citations, h);
      papers_with_at_least_h >= h && (citations.len() - papers_with_at_least_h) <= h
  }

  fn h_index(citations: Vec<u32>) -> (result: u32)
      ensures 
          result <= citations.len(),
          is_valid_h_index(citations@, result),
          forall|h: u32| h > result ==> !is_valid_h_index(citations@, h),

vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {
      // #eval h_index [0, 1, 3, 5, 6]  // Expected: 3
      // #eval h_index [0]              // Expected: 0  
      // #eval h_index [5, 5, 5]        // Expected: 3
  }