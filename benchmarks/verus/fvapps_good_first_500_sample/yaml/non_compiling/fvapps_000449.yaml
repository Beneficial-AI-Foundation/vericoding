vc-description: |-
  Given a string that consists of only uppercase English letters, you can replace any letter in the string with another letter at most k times. Find the length of a longest substring containing all repeating letters you can get after performing the above operations.

  Note:
  Both the string's length and k will not exceed 104.

  Example 1:

  Input:
  s = "ABAB", k = 2

  Output:
  4

  Explanation:
  Replace the two 'A's with two 'B's or vice versa.

  Example 2:

  Input:
  s = "AABABBA", k = 1

  Output:
  4

  Explanation:
  Replace the one 'A' in the middle with 'B' and form "AABBBBA".
  The substring "BBBB" has the longest repeating letters, which is 4.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn character_replacement(s: &String, k: usize) -> (result: usize)
      ensures
          result <= s.len(),
          s.len() == 0 ==> result == 0,
          s.len() > 0 && s.len() <= k + 1 ==> result >= s.len(),
          s.len() > 0 && s.len() > k + 1 ==> result >= k + 1,
          k >= s.len() ==> result == s.len(),

vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {
      // println!("{}", character_replacement(&"ABAB".to_string(), 2));
      // println!("{}", character_replacement(&"AABABBA".to_string(), 1));
      // println!("{}", character_replacement(&"".to_string(), 2));
  }