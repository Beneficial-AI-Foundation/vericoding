vc-description: |-
  Consider the following operations on a triple of integers. In one operation, you should:
  - Choose an integer $d$ and an arithmetic operation ― either addition or multiplication.
  - Choose a subset of elements of the triple.
  - Apply the arithmetic operation to each of the chosen elements, i.e. either add $d$ to each of them or multiply each of them by $d$.
  For example, if we have a triple $(3, 5, 7)$, we may choose to add $3$ to the first and third element, and we get $(6, 5, 10)$ using one operation.
  You are given an initial triple $(p, q, r)$ and a target triple $(a, b, c)$. Find the minimum number of operations needed to transform $(p, q, r)$ into $(a, b, c)$.

  -----Input-----
  - The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.
  - The first line of each test case contains three space-separated integers $p$, $q$ and $r$.
  - The second line contains three space-separated integers $a$, $b$ and $c$.

  -----Output-----
  For each test case, print a single line containing one integer ― the minimum required number of operations.

  -----Constraints-----
  - $1 \le T \le 1,000$
  - $|p|, |q|, |r|, |a|, |b|, |c| \le 10^9$

  -----Subtasks-----
  Subtask #1 (10 points): $|p|, |q|, |r|, |a|, |b|, |c| \le 10$
  Subtask #2 (90 points): original constraints

  -----Example Input-----
  2
  3 5 7
  6 5 10
  8 6 3
  9 7 8

  -----Example Output-----
  1
  2

  -----Explanation-----
  Example case 1: We add $3$ to the first and third element of $(3, 5, 7)$ to form $(6, 5, 10)$.
  Example case 2: We can add $1$ to each element to form $(9, 7, 4)$ and then multiply the third element by $2$.
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  fn eq_solve(v0: i32, v1: i32, u0: i32, u1: i32) -> (result: f32)
      ensures (v0 == 0 && u0 == 0) ==> result == 1.0
  {
      // impl-start
      assume(false);
      0.0
      // impl-end
  }

  fn min_operations(p: i32, q: i32, r: i32, a: i32, b: i32, c: i32) -> (result: usize)
      ensures result <= 3,
      ensures (p == a && q == b && r == c) ==> result == 0
vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }
vc-postamble: |-

  }

  fn main() {
      // println!("{}", min_operations(3, 5, 7, 6, 5, 10));
      // println!("{}", min_operations(8, 6, 3, 9, 7, 8));
  }