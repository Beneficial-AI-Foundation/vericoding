vc-description: |-
  Given an n x n binary grid, in one step you can choose two adjacent rows of the grid and swap them.
  A grid is said to be valid if all the cells above the main diagonal are zeros.
  Return the minimum number of steps needed to make the grid valid, or -1 if the grid cannot be valid.
  The main diagonal of a grid is the diagonal that starts at cell (1, 1) and ends at cell (n, n).

  Example 1:

  Input: grid = [[0,0,1],[1,1,0],[1,0,0]]
  Output: 3

  Example 2:

  Input: grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]
  Output: -1
  Explanation: All rows are similar, swaps have no effect on the grid.

  Example 3:

  Input: grid = [[1,0,0],[1,1,0],[1,1,1]]
  Output: 0

  Constraints:

  n == grid.length
  n == grid[i].length
  1 <= n <= 200
  grid[i][j] is 0 or 1
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  spec fn is_valid_final_grid(grid: Seq<Vec<nat>>) -> bool {
      grid.len() > 0 && grid.len() == grid[0].len() &&
      forall|i: int, j: int| 0 <= i < grid.len() && 0 <= j < grid.len() && i < j ==> grid[i][j] == 0
  }

  spec fn is_identity_matrix(grid: Seq<Vec<nat>>) -> bool {
      grid.len() > 0 && grid.len() == grid[0].len() &&
      forall|i: int, j: int| 0 <= i < grid.len() && 0 <= j < grid.len() ==> 
          if i == j { grid[i][j] == 1 } else { grid[i][j] == 0 }
  }

  spec fn is_all_ones_matrix(grid: Seq<Vec<nat>>) -> bool {
      grid.len() > 0 && grid.len() == grid[0].len() &&
      forall|i: int, j: int| 0 <= i < grid.len() && 0 <= j < grid.len() ==> grid[i][j] == 1
  }

  fn min_swaps(grid: Vec<Vec<nat>>) -> (result: i32)
      requires 
          grid.len() > 0,
          forall|i: int| 0 <= i < grid.len() ==> grid[i].len() == grid.len(),
          forall|i: int, j: int| 0 <= i < grid.len() && 0 <= j < grid.len() ==> grid[i][j] <= 1,
      ensures
          (is_identity_matrix(grid@) ==> result == 0) &&
          (is_all_ones_matrix(grid@) ==> result == -1) &&
          (result >= 0 ==> is_valid_final_grid(grid@)) &&
          (result >= 0 ==> result <= (grid.len() * (grid.len() - 1)) / 2)

  fn is_valid_final_grid_fn(grid: Vec<Vec<nat>>) -> (result: bool)
      requires 
          grid.len() > 0,
          forall|i: int| 0 <= i < grid.len() ==> grid[i].len() == grid.len(),
      ensures result == is_valid_final_grid(grid@)
vc-code: |-
  {
      // impl-start
      assume(false);
      -1
      // impl-end
  }

  {
      // impl-start  
      assume(false);
      false
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {
      // let grid1 = vec![vec![0, 0, 1], vec![1, 1, 0], vec![1, 0, 0]];
      // assert(min_swaps(grid1) == 3);
      
      // let grid2 = vec![vec![0, 1, 1, 0], vec![0, 1, 1, 0], vec![0, 1, 1, 0], vec![0, 1, 1, 0]];
      // assert(min_swaps(grid2) == -1);
      
      // let grid3 = vec![vec![1, 0, 0], vec![1, 1, 0], vec![1, 1, 1]];
      // assert(min_swaps(grid3) == 0);
  }