vc-description: |-
  Chef gives an integer K in the input. If the given number is beautiful binary number, print it, Else find its previous beautiful binary number. A beautiful binary number is a number whose binary representation does not contain any consecutive 1s.
  Note: 1 is also a beautiful binary number.
  
  -----Input:-----
  - First-line will contain T, the number of test cases. Then the test cases follow. 
  - Each test case contains a single line of input, one integer K. 
  
  -----Output:-----
  For each test case, print a beautiful number.
  
  -----Constraints-----
  - 1 ≤ T ≤ 10^5
  - 1 ≤ K ≤ 10^5
  
  -----Sample Input:-----
  3
  3
  6
  8
  
  -----Sample Output:-----
  2
  5
  8
  
  -----EXPLANATION:-----
  For 1) 3 is not a beautiful binary number because the binary representation of 3 is "11" which has consecutive 1s.  hence 2 which is less than 3 is printed.
  For 3) 8 is already a beautiful binary number with no consecutive 1s in its binary representation. so, print 8 as it is.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn string_to_int(s: Seq<char>) -> int
  {
      if s.len() == 0 {
          0
      } else if s.len() == 1 {
          if s[0] == '0' { 0 }
          else if s[0] == '1' { 1 }
          else if s[0] == '2' { 2 }
          else if s[0] == '3' { 3 }
          else if s[0] == '4' { 4 }
          else if s[0] == '5' { 5 }
          else if s[0] == '6' { 6 }
          else if s[0] == '7' { 7 }
          else if s[0] == '8' { 8 }
          else if s[0] == '9' { 9 }
          else { 0 }
      } else {
          10 * string_to_int(s.drop_last()) + string_to_int(s.last(1))
      }
  }

vc-spec: |-
  fn consecutive_sum(arr: Vec<i32>) -> (result: Vec<String>)
      requires arr.len() >= 3,
      ensures 
          result.len() == arr.len() - 2,
          forall|i: int| 0 <= i < result.len() ==> result[i]@.len() >= 1,
          forall|i: int| 0 <= i < result.len() ==> {
              let sum_val = arr[i] + arr[i + 1] + arr[i + 2];
              string_to_int(result[i]@) == sum_val
          },
          forall|i: int| 0 <= i < result.len() ==> {
              let min_val = if arr[i] <= arr[i + 1] && arr[i] <= arr[i + 2] { arr[i] }
                           else if arr[i + 1] <= arr[i + 2] { arr[i + 1] }
                           else { arr[i + 2] };
              string_to_int(result[i]@) >= min_val
          },
          (forall|x: i32| arr@.contains(x) ==> x == 0) ==> 
              (forall|i: int| 0 <= i < result.len() ==> result[i]@ == "0"@)

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}