vc-description: |-
  For a string S let the unique set of characters that occur in it one or more times be C. Consider a permutation of the elements of C as (c_1, c_2, c_3 ... ). Let f(c) be the number of times c occurs in S.
  If any such permutation of the elements of C satisfies f(c_i) = f(c_{i-1}) + f(c_{i-2}) for all i >= 3, the string is said to be a dynamic string.
  Mr Bancroft is given the task to check if the string is dynamic, but he is busy playing with sandpaper. Would you help him in such a state?
  Note that if the number of distinct characters in the string is less than 3, i.e. if |C| < 3, then the string is always dynamic.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn is_dynamic_string(s: Seq<char>) -> (result: Seq<char>)
      requires s.len() > 0,
      ensures
          result == "Dynamic"@ || result == "Not"@,

vc-code: |-
  {
      // impl-start
      assume(false);
      seq![]
      // impl-end
  }

  proof fn dynamic_string_returns_valid_outputs(s: Seq<char>)
      requires s.len() > 0
      ensures 
          is_dynamic_string(s) == "Dynamic"@ || is_dynamic_string(s) == "Not"@
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  proof fn few_unique_chars_is_dynamic(s: Seq<char>)
      requires 
          s.len() > 0,
          /* unique character count < 3 */
      ensures is_dynamic_string(s) == "Dynamic"@
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  proof fn binary_string_is_dynamic(s: Seq<char>)
      requires 
          s.len() > 0,
          /* all chars are 'a' or 'b' */
      ensures is_dynamic_string(s) == "Dynamic"@
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  proof fn single_char_is_dynamic(c: char)
      ensures is_dynamic_string(seq![c]) == "Dynamic"@
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  proof fn repeated_char_is_dynamic(c: char, n: nat)
      requires n > 0
      ensures /* is_dynamic_string(repeated_char_seq(c, n)) == "Dynamic"@ */
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  proof fn equal_freq_three_chars_not_dynamic(s: Seq<char>)
      requires 
          s.len() >= 6,
          /* all chars are 'a', 'b', or 'c' with equal frequencies */
      ensures is_dynamic_string(s) == "Not"@
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

vc-postamble: |-

  }

  fn main() {}