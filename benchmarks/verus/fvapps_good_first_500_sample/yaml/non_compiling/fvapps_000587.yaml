vc-description: |-
  You are given a grid with R rows (numbered 1 through R) and C columns (numbered 1 through C). A cell in row r and column c is denoted by (r, c). Two cells in the grid are adjacent if they have a common side. For each valid i and j, there is a value a_{i, j} written in cell a_{i, j}.
  A cell in the grid is stable if the number of cells in the grid which are adjacent to this cell is strictly greater than the value written in this cell. The whole grid is stable if all cells in the grid are stable.
  Can you determine whether the grid is stable?

  -----Input-----
  - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.
  - The first line of each test case contains two space-separated integers R and C.
  - R lines follow. For each i (1 ≤ i ≤ R), the i-th of these lines contains C space-separated integers a_{i, 1}, a_{i, 2}, ..., a_{i, C}.

  -----Output-----
  For each test case, print a single line containing the string "Stable" if the grid is stable or "Unstable" if it is unstable (without quotes).

  -----Constraints-----
  - 1 ≤ T ≤ 3,000
  - 3 ≤ R, C ≤ 10
  - 0 ≤ a_{i, j} ≤ 4 for each valid i, j

  -----Example Input-----
  2
  3 3
  1 2 1
  2 3 2
  1 2 1
  3 4
  0 0 0 0
  0 0 0 0
  0 0 4 0

  -----Example Output-----
  Stable
  Unstable

  -----Explanation-----
  Example case 1: Each cell of the grid is stable, so the grid is stable.
  Example case 2: The cell in row 3 and column 3 is unstable since the number of cells adjacent to this cell is 3.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn count_adjacent_cells(rows: nat, cols: nat, r: nat, c: nat) -> nat {
      let mut count: nat = 0;
      if r > 0 { count = count + 1; }
      if r + 1 < rows { count = count + 1; }
      if c > 0 { count = count + 1; }
      if c + 1 < cols { count = count + 1; }
      count
  }

  spec fn is_cell_stable(grid: Seq<Seq<nat>>, rows: nat, cols: nat, r: nat, c: nat) -> bool {
      r < rows && c < cols ==>
      count_adjacent_cells(rows, cols, r, c) > grid[r as int][c as int]
  }

  spec fn is_grid_stable(grid: Seq<Seq<nat>>, rows: nat, cols: nat) -> bool {
      forall|r: nat, c: nat| r < rows && c < cols ==> is_cell_stable(grid, rows, cols, r, c)
  }

  fn modify_list(xs: Vec<nat>, i: usize, v: nat) -> (result: Vec<nat>)
      requires i < xs.len(),
      ensures
          result.len() == xs.len(),
          result[i as int] == v,
          forall|j: int| 0 <= j < xs.len() && j != i ==> result[j] == xs[j]
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }

  fn check_grid_stability(grid: Vec<Vec<nat>>, rows: usize, cols: usize) -> (result: String)
      requires 
          grid.len() == rows,
          rows >= 3 && cols >= 3,
          forall|i: int| 0 <= i < grid.len() ==> grid[i].len() == cols,
          forall|i: int, j: int| 0 <= i < grid.len() && 0 <= j < grid[i].len() ==> grid[i][j] <= 4,
      ensures
          equal(result@, "Stable".view()) || equal(result@, "Unstable".view())
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-code: |-

vc-postamble: |-
  proof fn corner_cells_stability(n: nat)
      requires n >= 2,
      ensures
          ({
              let grid1 = Seq::<Seq<nat>>::new(n as nat, |_i: int| Seq::<nat>::new(n as nat, |_j: int| 0));
              let grid2 = grid1.update(0int, grid1[0int].update(0int, 2));
              let grid3 = grid1.update(0int, grid1[0int].update(0int, 1));
              !is_grid_stable(grid2, n, n) && is_grid_stable(grid3, n, n)
          })
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  proof fn center_cells_stability(n: nat)
      requires n >= 3,
      ensures
          ({
              let grid1 = Seq::<Seq<nat>>::new(n as nat, |_i: int| Seq::<nat>::new(n as nat, |_j: int| 0));
              let center = (n / 2) as int;
              let grid2 = grid1.update(center, grid1[center].update(center, 4));
              let grid3 = grid1.update(center, grid1[center].update(center, 3));
              !is_grid_stable(grid2, n, n) && is_grid_stable(grid3, n, n)
          })
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  proof fn arbitrary_grid_stability(grid: Seq<Seq<nat>>)
      requires
          grid.len() > 0,
          grid[0int].len() > 0,
          forall|i: int| 0 <= i < grid.len() ==> grid[i].len() == grid[0int].len(),
          forall|i: int, j: int| 0 <= i < grid.len() && 0 <= j < grid[i].len() ==> grid[i][j] <= 4,
      ensures
          ({
              let rows = grid.len() as nat;
              let cols = grid[0int].len() as nat;
              is_grid_stable(grid, rows, cols) || !is_grid_stable(grid, rows, cols)
          })
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  }

  fn main() {
      // let test1 = vec![vec![1, 2, 1], vec![2, 3, 2], vec![1, 2, 1]];
      // println!("{}", check_grid_stability(test1, 3, 3));
      
      // let test2 = vec![vec![0, 0, 0, 0], vec![0, 0, 0, 0], vec![0, 0, 4, 0]];
      // println!("{}", check_grid_stability(test2, 3, 4));
      
      // let test3 = vec![vec![1, 1, 1], vec![1, 4, 1], vec![1, 1, 1]];
      // println!("{}", check_grid_stability(test3, 3, 3));
  }