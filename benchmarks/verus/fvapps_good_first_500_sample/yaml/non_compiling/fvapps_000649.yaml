vc-description: |-
  You are given an array A with size N (indexed from 0) and an integer K. Let's define another array B with size N · K as the array that's formed by concatenating K copies of array A.
  For example, if A = {1, 2} and K = 3, then B = {1, 2, 1, 2, 1, 2}.
  You have to find the maximum subarray sum of the array B. Fomally, you should compute the maximum value of Bi + Bi+1 + Bi+2 + ... + Bj, where 0 ≤ i ≤ j < N · K.

  -----Input-----

  - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.
  - The first line of each test case contains two space-separated integers N and K.
  - The second line contains N space-separated integers A0, A1, ..., AN-1.

  -----Output-----
  For each test case, print a single line containing the maximum subarray sum of B.

  -----Constraints-----
  - 1 ≤ T ≤ 10
  - 1 ≤ N ≤ 105
  - 1 ≤ K ≤ 105
  - -106 ≤ Ai ≤ 106 for each valid i

  -----Subtasks-----
  Subtask #1 (18 points): N · K ≤ 105
  Subtask #2 (82 points): original constraints

  -----Example-----
  Input:

  2
  2 3
  1 2
  3 2
  1 -2 1

  Output:

  9
  2

  -----Explanation-----
  Example case 1: B = {1, 2, 1, 2, 1, 2} and the subarray with maximum sum is the whole {1, 2, 1, 2, 1, 2}. Hence, the answer is 9.
  Example case 2: B = {1, -2, 1, 1, -2, 1} and the subarray with maximum sum is {1, 1}. Hence, the answer is 2.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn maximum(xs: Seq<i32>) -> i32 {
      if xs.len() == 0 {
          0
      } else {
          if xs.len() == 1 {
              if xs[0] > 0 { xs[0] } else { 0 }
          } else {
              let max_rest = maximum(xs.skip(1));
              if xs[0] > max_rest { xs[0] } else { max_rest }
          }
      }
  }

  spec fn sum(xs: Seq<i32>) -> i32 
      decreases xs.len()
  {
      if xs.len() == 0 {
          0
      } else {
          xs[0] + sum(xs.skip(1))
      }
  }

vc-spec: |-
  spec fn max_sum_spec(arr: Seq<i32>) -> i32 {
      if arr.len() == 0 {
          0
      } else {
          maximum(arr)
      }
  }

  fn max_sum(arr: Vec<i32>) -> (result: i32)
      requires arr.len() > 0,
      ensures result == max_sum_spec(arr@)

  fn solve(arr: Vec<i32>, k: usize) -> (result: i32)
      requires arr.len() > 0,
      requires k > 0,
      ensures result >= max_sum_spec(arr@)

vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {
      // Apps difficulty: interview
      // Assurance level: guarded_and_plausible

      // #guard_msgs in
      // #eval solve [1, 2] 3

      // #guard_msgs in
      // #eval solve [1, -2, 1] 2

      // #guard_msgs in
      // #eval solve [-1, -2, -3] 4
  }