vc-description: |-
  Chef got in the trouble! He is the king of Chefland and Chessland. There is one queen in Chefland and one queen in Chessland and they both want a relationship with him. Chef is standing before a difficult choiceâ€¦
  Chessland may be considered a chessboard with $N$ rows (numbered $1$ through $N$) and $M$ columns (numbered $1$ through $M$). Let's denote a unit square in row $r$ and column $c$ by $(r, c)$. Chef lives at square $(X, Y)$ of this chessboard.
  Currently, both queens are living in Chessland too. Each queen, when alone on the chessboard, can see all squares that lie on the same row, column or diagonal as itself. A queen from $(x_q, y_q)$ cannot see a square $(r, c)$ if the square $(X, Y)$ is strictly between them. Of course, if the queens can see each other, the kingdom will soon be in chaos!
  Help Chef calculate the number of possible configurations of the queens such that the kingdom will not be in chaos. A configuration is an unordered pair of distinct squares $(x_{q1}, y_{q1})$ and $(x_{q2}, y_{q2})$ such that neither of them is the square $(X, Y)$. Two configurations are different if the position of queen $1$ is different or the position of queen $2$ is different.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn solve_queens(n: nat, m: nat, x: nat, y: nat) -> (result: nat)
      requires 
          n >= 2,
          m >= 2,
          x >= 1 && x <= n,
          y >= 1 && y <= m,
      ensures
          result >= 0,
          result % 2 == 0,
          result <= (n * m) * (n * m - 1),

vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }

vc-postamble: |-

  /* proof functions for theorem properties */
  proof fn queens_symmetry_rotate_180(n: nat, m: nat, x: nat, y: nat)
      requires x <= n && y <= m && n >= x && m >= y
      ensures solve_queens(n, m, x, y) == solve_queens(n, m, n.checked_sub(x).unwrap_or(0) + 1, m.checked_sub(y).unwrap_or(0) + 1)
  {
      assume(false);
  }

  proof fn queens_square_board_nonnegative(n: nat, x: nat, y: nat)
      requires x <= n && y <= n
      ensures solve_queens(n, n, x, y) >= 0
  {
      assume(false);
  }

  proof fn queens_corner_symmetry(n: nat, m: nat)
      requires n >= 2 && m >= 2
      ensures solve_queens(n, m, 1, 1) == solve_queens(n, m, n, m)
  {
      assume(false);
  }

  }
  fn main() {
      // #guard_msgs in
      // #eval solve_queens 3 3 2 2
      
      // #guard_msgs in
      // #eval solve_queens 4 4 2 3
  }