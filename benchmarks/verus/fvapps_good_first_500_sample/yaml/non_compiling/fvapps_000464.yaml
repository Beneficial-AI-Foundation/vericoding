vc-description: |-
  Given a list of words, list of single letters (might be repeating) and score of every character.
  Return the maximum score of any valid set of words formed by using the given letters (words[i] cannot be used two or more times).
  It is not necessary to use all characters in letters and each letter can only be used once. Score of letters 'a', 'b', 'c', ... ,'z' is given by score[0], score[1], ... , score[25] respectively.

  Example 1:
  Input: words = ["dog","cat","dad","good"], letters = ["a","a","c","d","d","d","g","o","o"], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]
  Output: 23
  Explanation:
  Score  a=1, c=9, d=5, g=3, o=2
  Given letters, we can form the words "dad" (5+1+5) and "good" (3+2+2+5) with a score of 23.
  Words "dad" and "dog" only get a score of 21.
  Example 2:
  Input: words = ["xxxz","ax","bx","cx"], letters = ["z","a","b","c","x","x","x"], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]
  Output: 27
  Explanation:
  Score  a=4, b=4, c=4, x=5, z=10
  Given letters, we can form the words "ax" (4+5), "bx" (4+5) and "cx" (4+5) with a score of 27.
  Word "xxxz" only get a score of 25.
  Example 3:
  Input: words = ["leetcode"], letters = ["l","e","t","c","o","d"], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]
  Output: 0
  Explanation:
  Letter "e" can only be used once.

  Constraints:
  1 <= words.length <= 14
  1 <= words[i].length <= 15
  1 <= letters.length <= 100
  letters[i].length == 1
  score.length == 26
  0 <= score[i] <= 10
  words[i], letters[i] contains only lower case English letters.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn letter_count(letters: Seq<char>) -> Map<char, nat>
      decreases letters.len()
  {
      if letters.len() == 0 {
          Map::empty()
      } else {
          let head = letters[0];
          let tail_count = letter_count(letters.skip(1));
          if tail_count.dom().contains(head) {
              tail_count.insert(head, tail_count[head] + 1)
          } else {
              tail_count.insert(head, 1)
          }
      }
  }

  spec fn word_score(word: Seq<char>, scores: Seq<nat>) -> nat
      decreases word.len()
  {
      if word.len() == 0 {
          0
      } else {
          let ch = word[0];
          let index = (ch as u8 - 'a' as u8) as nat;
          if index < scores.len() {
              scores[index as int] + word_score(word.skip(1), scores)
          } else {
              0
          }
      }
  }

  spec fn total_letter_score(letters: Seq<char>, scores: Seq<nat>) -> nat
      decreases letters.len()
  {
      if letters.len() == 0 {
          0
      } else {
          let ch = letters[0];
          let index = (ch as u8 - 'a' as u8) as nat;
          if index < scores.len() {
              scores[index as int] + total_letter_score(letters.skip(1), scores)
          } else {
              0
          }
      }
  }

  fn max_score_words(words: Vec<String>, letters: Vec<char>, scores: Vec<nat>) -> (result: nat)
      requires
          1 <= words.len() <= 14,
          1 <= letters.len() <= 100,
          scores.len() == 26,
          forall|i: int| 0 <= i < scores.len() ==> scores[i] <= 10,
          forall|i: int| 0 <= i < words.len() ==> 1 <= words[i]@.len() <= 15,
          forall|i: int| 0 <= i < letters.len() ==> 'a' <= letters[i] <= 'z',
          forall|i: int| 0 <= i < words.len() ==> forall|j: int| 0 <= j < words[i]@.len() ==> 'a' <= words[i]@[j] <= 'z',
      ensures
          result <= total_letter_score(letters@, scores@),
          result >= 0,

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {
      // Example usage (commented out):
      // let words1 = vec!["dog".to_string(), "cat".to_string(), "dad".to_string(), "good".to_string()];
      // let letters1 = vec!['a', 'a', 'c', 'd', 'd', 'd', 'g', 'o', 'o'];
      // let scores1 = vec![1, 0, 9, 5, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      // println!("Result: {}", max_score_words(words1, letters1, scores1));
  }