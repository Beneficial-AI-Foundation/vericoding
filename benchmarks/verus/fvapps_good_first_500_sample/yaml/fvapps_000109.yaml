vc-description: |-
  You are given an image, that can be represented with a 2-d n by m grid of pixels. Each pixel of the image is either on or off, denoted by the characters "0" or "1", respectively. You would like to compress this image. You want to choose an integer k > 1 and split the image into k by k blocks. If n and m are not divisible by k, the image is padded with only zeros on the right and bottom so that they are divisible by k. Each pixel in each individual block must have the same value. The given image may not be compressible in its current state. Find the minimum number of pixels you need to toggle (after padding) in order for the image to be compressible for some k. More specifically, the steps are to first choose k, then the image is padded with zeros, then, we can toggle the pixels so it is compressible for this k. The image must be compressible in that state.
  
  -----Input-----
  
  The first line of input will contain two integers n, m (2 ≤ n, m ≤ 2 500), the dimensions of the image.
  
  The next n lines of input will contain a binary string with exactly m characters, representing the image.
  
  -----Output-----
  
  Print a single integer, the minimum number of pixels needed to toggle to make the image compressible.
  
  -----Example-----
  Input
  3 5
  00100
  10110
  11001
  
  Output
  5
  
  -----Note-----
  
  We first choose k = 2.
  
  The image is padded as follows: 
  
  001000
  
  101100
  
  110010
  
  000000
  
  We can toggle the image to look as follows: 
  
  001100
  
  001100
  
  000000
  
  000000
  
  We can see that this image is compressible for k = 2.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn compress_image(m: usize, n: usize, grid: Seq<Seq<char>>) -> usize
      decreases grid.len() + m + n
  {
      0
  }

vc-code: |-
  proof fn compress_minimal_cases_2x2_perfect(grid: Seq<Seq<char>>)
      requires 
          grid.len() == 2,
          grid[0] == seq!['1', '1'],
          grid[1] == seq!['1', '1'],
      ensures compress_image(2, 2, grid) == 0
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  proof fn compress_minimal_cases_2x2_worst(grid: Seq<Seq<char>>)
      requires
          grid.len() == 2,
          grid[0] == seq!['1', '0'],
          grid[1] == seq!['0', '1'],
      ensures compress_image(2, 2, grid) == 2
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  proof fn compress_minimal_cases_rect_2x3(grid: Seq<Seq<char>>)
      requires
          grid.len() == 2,
          grid[0] == seq!['0', '1', '0'],
          grid[1] == seq!['1', '0', '1'],
      ensures compress_image(2, 3, grid) == 3
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  proof fn compress_minimal_cases_rect_3x2(grid: Seq<Seq<char>>)
      requires
          grid.len() == 3,
          grid[0] == seq!['0', '1'],
          grid[1] == seq!['1', '0'],
          grid[2] == seq!['0', '1'],
      ensures compress_image(3, 2, grid) == 3
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  proof fn compress_example_case(grid: Seq<Seq<char>>)
      requires
          grid.len() == 3,
          grid[0] == seq!['0', '0', '1', '0', '0'],
          grid[1] == seq!['1', '0', '1', '1', '0'],
          grid[2] == seq!['1', '1', '0', '0', '1'],
      ensures compress_image(3, 5, grid) == 5
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  proof fn compress_larger_3x3_all_ones(grid: Seq<Seq<char>>)
      requires
          grid.len() == 3,
          grid[0] == seq!['1', '1', '1'],
          grid[1] == seq!['1', '1', '1'],
          grid[2] == seq!['1', '1', '1'],
      ensures compress_image(3, 3, grid) == 0
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  proof fn compress_larger_3x3_all_zeros(grid: Seq<Seq<char>>)
      requires
          grid.len() == 3,
          grid[0] == seq!['0', '0', '0'],
          grid[1] == seq!['0', '0', '0'],
          grid[2] == seq!['0', '0', '0'],
      ensures compress_image(3, 3, grid) == 0
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  proof fn compress_larger_3x3_checkerboard(grid: Seq<Seq<char>>)
      requires
          grid.len() == 3,
          grid[0] == seq!['1', '0', '1'],
          grid[1] == seq!['0', '1', '0'],
          grid[2] == seq!['1', '0', '1'],
      ensures compress_image(3, 3, grid) == 4
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

vc-postamble: |-

  }
  fn main() {}