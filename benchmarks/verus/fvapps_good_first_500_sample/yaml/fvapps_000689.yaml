vc-description: |-
  You are given a square matrix M with N rows (numbered 1 through N) and N columns (numbered 1 through N). Initially, all the elements of this matrix are equal to A. The matrix is broken down in N steps (numbered 1 through N); note that during this process, some elements of the matrix are simply marked as removed, but all elements are still indexed in the same way as in the original matrix. For each valid i, the i-th step consists of the following:
  - Elements M_{1, N-i+1}, M_{2, N-i+1}, ..., M_{i-1, N-i+1} are removed.
  - Elements M_{i, N-i+1}, M_{i, N-i+2}, ..., M_{i, N} are removed.
  - Let's denote the product of all 2i-1 elements removed in this step by p_i. Each of the remaining elements of the matrix (those which have not been removed yet) is multiplied by p_i.
  Find the sum p_1 + p_2 + p_3 + ... + p_N. Since this number could be very large, compute it modulo 10^9+7.

  Input:
  - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.
  - The first and only line of each test case contains two space-separated integers N and A.

  Output:
  For each test case, print a single line containing one integer ― the sum of products at each step modulo 10^9+7.

  Constraints:
  - 1 ≤ T ≤ 250
  - 1 ≤ N ≤ 10^5
  - 0 ≤ A ≤ 10^9
  - the sum of N over all test cases does not exceed 10^5

  Example Input:
  1
  3 2

  Example Output:
  511620149

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn solve_matrix_product(n: u32, a: u32) -> (result: u32)
      requires n >= 1,
      ensures 
          result < 1000000007,
          n >= 1 ==> (a == 0 ==> result == 0),
          n == 1 ==> result == a % 1000000007

vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }

vc-postamble: |-
  }

  fn main() {
      // // let test_result_1 = solve_matrix_product(3, 2);
      // // println!("Test result 1: {}", test_result_1); // Expected: 511620149
      
      // // let test_result_2 = solve_matrix_product(1, 2);
      // // println!("Test result 2: {}", test_result_2); // Expected: 2
      
      // // let test_result_3 = solve_matrix_product(5, 0);
      // // println!("Test result 3: {}", test_result_3); // Expected: 0
  }