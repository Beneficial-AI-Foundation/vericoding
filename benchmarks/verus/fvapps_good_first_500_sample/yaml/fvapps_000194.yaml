vc-description: |-
  You are given two strings s and t of the same length. You want to change s to t. Changing the i-th character of s to i-th character of t costs |s[i] - t[i]| that is, the absolute difference between the ASCII values of the characters.
  You are also given an integer maxCost.
  Return the maximum length of a substring of s that can be changed to be the same as the corresponding substring of twith a cost less than or equal to maxCost.
  If there is no substring from s that can be changed to its corresponding substring from t, return 0.

  Example 1:
  Input: s = "abcd", t = "bcdf", maxCost = 3
  Output: 3
  Explanation: "abc" of s can change to "bcd". That costs 3, so the maximum length is 3.
  Example 2:
  Input: s = "abcd", t = "cdef", maxCost = 3
  Output: 1
  Explanation: Each character in s costs 2 to change to charactor in t, so the maximum length is 1.

  Example 3:
  Input: s = "abcd", t = "acde", maxCost = 0
  Output: 1
  Explanation: You can't make any change, so the maximum length is 1.

  Constraints:

  1 <= s.length, t.length <= 10^5
  0 <= maxCost <= 10^6
  s and t only contain lower case English letters.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn equal_substring(s: Vec<char>, t: Vec<char>, max_cost: u32) -> (result: u32)
      requires s.len() == t.len(),
      ensures
          result <= s.len(),

vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {
      // Apps difficulty: interview
      // Assurance level: guarded_and_plausible

      // println!("{}", equal_substring("abcd", "bcdf", 3)); // Should output 3
      // println!("{}", equal_substring("abcd", "cdef", 3)); // Should output 1  
      // println!("{}", equal_substring("abcd", "acde", 0)); // Should output 1
  }