vc-description: |-
  The chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K(odd) to form a new pattern. Help the chef to code this pattern problem.

  -----Input:-----
  - First-line will contain $T$, the number of test cases. Then the test cases follow. 
  - Each test case contains a single line of input, one integer $K$. 

  -----Output:-----
  For each test case, output as the pattern.

  -----Constraints-----
  - $1 \leq T \leq 50$
  - $1 \leq K \leq 50$

  -----Sample Input:-----
  4
  1
  3
  5
  7

  -----Sample Output:-----
  *
  *
  *
  *
  *
  *
  *
  *
  *
  *
  *
  *
  *
  *
  *
  *

  -----EXPLANATION:-----
  No need, else pattern can be decode easily.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn pattern_generator(k: usize) -> (result: Vec<String>)
      requires k > 0,
      ensures result.len() == k

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {
      // let test_result_1 = pattern_generator(1);
      // println!("{:?}", test_result_1);
      
      // let test_result_3 = pattern_generator(3);
      // println!("{:?}", test_result_3);
      
      // let test_result_5 = pattern_generator(5);
      // println!("{:?}", test_result_5);
  }