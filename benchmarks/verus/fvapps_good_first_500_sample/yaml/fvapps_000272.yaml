vc-description: |-
  The set [1,2,3,...,n] contains a total of n! unique permutations.

  By listing and labeling all of the permutations in order, we get the following sequence for n = 3:

         "123"
         "132"
         "213"
         "231"
         "312"
         "321"

  Given n and k, return the kth permutation sequence.

  Note:

         Given n will be between 1 and 9 inclusive.
         Given k will be between 1 and n! inclusive.

  Example 1:

  Input: n = 3, k = 3
  Output: "213"

  Example 2:

  Input: n = 4, k = 9
  Output: "2314"

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn factorial(n: nat) -> nat
      decreases n
  {
      if n == 0 {
          1
      } else {
          n * factorial((n - 1) as nat)
      }
  }

vc-helpers: |-

vc-spec: |-
  fn get_permutation(n: usize, k: usize) -> (result: Vec<char>)
      requires
          n >= 1,
          n <= 9,
          k >= 1,
          k <= factorial(n as nat),
      ensures
          result.len() == n,

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {
      // let perm = get_permutation(3, 3);
      // println!("{:?}", perm); // Should output ['2', '1', '3']
      // let perm = get_permutation(4, 9);
      // println!("{:?}", perm); // Should output ['2', '3', '1', '4']
      // let perm = get_permutation(2, 2);
      // println!("{:?}", perm); // Should output ['2', '1']
  }