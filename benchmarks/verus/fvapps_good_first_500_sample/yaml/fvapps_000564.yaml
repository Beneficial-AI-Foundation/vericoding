vc-description: |-
  The chef is trying to decode some pattern problems, Chef wants your help to code it. Chef has one number K(odd) to form a new pattern. Help the chef to code this pattern problem.
  
  -----Input:-----
  - First-line will contain $T$, the number of test cases. Then the test cases follow. 
  - Each test case contains a single line of input, one integer $K$. 
  
  -----Output:-----
  For each test case, output as the pattern.
  
  -----Constraints-----
  - $1 \leq T \leq 100$
  - $1 \leq K \leq 100$
  
  -----Sample Input:-----
  4
  1
  3
  5
  7
  
  -----Sample Output:-----
  1
  111
  111
  111
  11111
  11 11
  1 1 1
  11 11
  11111
  1111111
  11   11
  1 1 1 1
  1  1  1
  1 1 1 1
  11   11
  1111111
  
  -----EXPLANATION:-----
  No need, else pattern can be decode easily.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn print_pattern(n: usize) -> (result: Vec<Vec<char>>)
      requires n > 0,
      ensures 
          result.len() == n,
          forall|i: int| 0 <= i < result.len() ==> result[i].len() == n,
          forall|i: int, j: int| 0 <= i < result.len() && 0 <= j < result[i].len() ==> (result[i][j] == '1' || result[i][j] == ' ')

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}