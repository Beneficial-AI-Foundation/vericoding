vc-description: |-
  Given an integer array nums, return the sum of divisors of the integers in that array that have exactly four divisors.
  If there is no such integer in the array, return 0.

  Example 1:
  Input: nums = [21,4,7]
  Output: 32
  Explanation:
  21 has 4 divisors: 1, 3, 7, 21
  4 has 3 divisors: 1, 2, 4
  7 has 2 divisors: 1, 7
  The answer is the sum of divisors of 21 only.

  Constraints:

  1 <= nums.length <= 10^4
  1 <= nums[i] <= 10^5

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn count_divisors(n: nat) -> nat;

  spec fn sum_divisors(n: nat) -> nat;

  fn sum_four_divisors(nums: Vec<u32>) -> (result: u32)
      requires nums.len() >= 1,
      ensures result >= 0

vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {
      // Apps difficulty: interview
      // Assurance level: guarded_and_plausible

      // let result1 = sum_four_divisors(vec![21, 4, 7]);
      // assert_eq!(result1, 32);

      // let result2 = sum_four_divisors(vec![1, 2, 3, 4]);
      // assert_eq!(result2, 0);

      // let result3 = sum_four_divisors(vec![21]);
      // assert_eq!(result3, 32);
  }