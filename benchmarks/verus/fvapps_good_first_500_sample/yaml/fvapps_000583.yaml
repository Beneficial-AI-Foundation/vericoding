vc-description: |-
  The Fibonacci sequence F_0, F_1, ... is a special infinite sequence of non-negative integers, where F_0 = 0, F_1 = 1 and for each integer n >= 2, F_n = F_{n-1} + F_{n-2}.
  Consider the sequence D of the last decimal digits of the first N Fibonacci numbers, i.e. D = (F_0 % 10, F_1 % 10, ..., F_{N-1} % 10). Now, you should perform the following process:
  - Let D = (D_1, D_2, ..., D_l).
  - If l = 1, the process ends.
  - Create a new sequence E = (D_2, D_4, ..., D_{2 floor(l/2)}). In other words, E is the sequence created by removing all odd-indexed elements from D.
  - Change D to E.
  When this process terminates, the sequence D contains only one number. You have to find this number.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn find_last_fibonacci_digit(n: u64) -> (result: u64)
      requires n >= 1,
      ensures 
          0 <= result <= 9,
          n == 1 ==> result == 0,
          n == 2 ==> result == 1,
          n == 4 ==> result == 2,
          n == 8 ==> result == 3,
          n == 9 ==> result == 3,
          n == 10 ==> result == 3

vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {
      // let test_result = find_last_fibonacci_digit(9);
      // println!("Result for n=9: {}", test_result);
      
      // let test_result_1 = find_last_fibonacci_digit(1);
      // println!("Result for n=1: {}", test_result_1);
      
      // let test_result_10 = find_last_fibonacci_digit(10);
      // println!("Result for n=10: {}", test_result_10);
  }