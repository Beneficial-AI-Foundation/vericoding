vc-description: |-
  Hooray! Polycarp turned n years old! The Technocup Team sincerely congratulates Polycarp!

  Polycarp celebrated all of his n birthdays: from the 1-th to the n-th. At the moment, he is wondering: how many times he turned beautiful number of years?

  According to Polycarp, a positive integer is beautiful if it consists of only one digit repeated one or more times. For example, the following numbers are beautiful: 1, 77, 777, 44 and 999999. The following numbers are not beautiful: 12, 11110, 6969 and 987654321.

  Of course, Polycarpus uses the decimal numeral system (i.e. radix is 10).

  Help Polycarpus to find the number of numbers from 1 to n (inclusive) that are beautiful.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn is_beautiful(x: nat) -> bool {
      x > 0
  }

  spec fn count_beautiful_numbers_spec(n: nat) -> nat {
      1
  }

  fn count_beautiful_numbers(n: u32) -> (result: u32)
      requires n > 0,
      ensures 
          1 <= result && result <= 81,
          count_beautiful_numbers_spec(n as nat) == result as nat

vc-code: |-
  {
      // impl-start
      assume(false);
      1u32
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {
      // Apps difficulty: interview
      // Assurance level: guarded_and_plausible

      // println!("{}", count_beautiful_numbers(18)); // Should output 10
      // println!("{}", count_beautiful_numbers(9));  // Should output 9
      // println!("{}", count_beautiful_numbers(100500)); // Should output 45
  }