vc-description: |-
  The chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K (odd) to form a new pattern. Help the chef to code this pattern problem.

  -----Input:-----
  - First-line will contain $T$, the number of test cases. Then the test cases follow. 
  - Each test case contains a single line of input, one integer $K$. 

  -----Output:-----
  For each test case, output as the pattern.

  -----Constraints-----
  - $1 \leq T \leq 100$
  - $1 \leq K \leq 100$

  -----Sample Input:-----
  4
  1
  3
  5
  7

  -----Sample Output:-----
  *
  *
  **
  *
  *
  **
  * *
  **
  *
  *
  **
  * *
  *  *
  * *
  **
  *

  -----EXPLANATION:-----
  No need, else pattern can be decode easily.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn generate_pattern(k: usize) -> (result: Vec<String>)
      requires k % 2 == 1,
      ensures
          result.len() == k,
          result@ == result@.reverse(),
          k >= 1 ==> result[0]@ == seq!['*'],
          k >= 1 ==> result[k - 1]@ == seq!['*'],
          k > 1 ==> result[1]@ == seq!['*', '*'],

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {
      // let pattern1 = generate_pattern(1);
      // println!("{:?}", pattern1);
      
      // let pattern3 = generate_pattern(3);
      // println!("{:?}", pattern3);
      
      // let pattern5 = generate_pattern(5);
      // println!("{:?}", pattern5);
  }