vc-description: |-
  The chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.
  
  -----Input:-----
  - First-line will contain $T$, the number of test cases. Then the test cases follow. 
  - Each test case contains a single line of input, one integer $K$. 
  
  -----Output:-----
  For each test case, output as the pattern.
  
  -----Constraints-----
  - $1 \leq T \leq 100$
  - $1 \leq K \leq 100$
  
  -----Sample Input:-----
  4
  1
  2
  3
  4
  
  -----Sample Output:-----
  *
  *
  *
  *
  ***
  ***
  *
  *
  ***
  ***
  *****
  *****
  *
  *
  ***
  ***
  *****
  *****
  *******
  *******
  
  -----EXPLANATION:-----
  No need, else pattern can be decode easily.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn generate_pattern(k: usize) -> (result: Vec<String>)
      requires k > 0,
      ensures
          result.len() == 2 * k,
          forall|i: int| 0 <= i < k ==> #[trigger] result[2*i as int] == #[trigger] result[2*i as int + 1]

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-
  }

  fn main() {}