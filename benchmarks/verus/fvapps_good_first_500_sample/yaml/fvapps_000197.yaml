vc-description: |-
  Given n, how many structurally unique BST's (binary search trees) that store values 1 ... n?

  Example:

  Input: 3
  Output: 5
  Explanation:
  Given n = 3, there are a total of 5 unique BST's:

     1         3     3      2      1
      \       /     /      / \      \
       3     2     1      1   3      2
      /     /       \                 \
     2     1         2                 3
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-
  spec fn num_unique_bst_spec(n: nat) -> nat
      decreases n
  {
      if n == 0 { 1 }
      else if n == 1 { 1 }
      else if n == 2 { 2 }
      else if n == 3 { 5 }
      else if n == 4 { 14 }
      else if n == 5 { 42 }
      else if n == 6 { 132 }
      else if n == 7 { 429 }
      else { 1 } /* placeholder for unknown values */
  }
vc-spec: |-
  fn num_unique_bst(n: nat) -> (result: nat)
      ensures 
          result > 0,
          result == num_unique_bst_spec(n),
          n == 0 ==> result == 1,
          n == 1 ==> result == 1,
          n == 2 ==> result == 2,
          n == 3 ==> result == 5,
          n == 4 ==> result == 14,
          n == 5 ==> result == 42,
          n == 6 ==> result == 132,
          n == 7 ==> result == 429,
vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {}