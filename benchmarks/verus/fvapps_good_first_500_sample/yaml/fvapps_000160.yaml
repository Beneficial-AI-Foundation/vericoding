vc-description: |-
  Given a string s and a string t, check if s is subsequence of t.

  You may assume that there is only lower case English letters in both s and t. t is potentially a very long (length ~= 500,000) string, and s is a short string (

  A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ace" is a subsequence of "abcde" while "aec" is not).

  Example 1:
  s = "abc", t = "ahbgdc"

  Return true.

  Example 2:
  s = "axc", t = "ahbgdc"

  Return false.

  Follow up:
  If there are lots of incoming S, say S1, S2, ... , Sk where k >= 1B, and you want to check one by one to see if T has its subsequence. In this scenario, how would you change your code?

  Credits:Special thanks to @pbrother for adding this problem and creating all test cases.
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  fn is_subsequence(s: Vec<u8>, t: Vec<u8>) -> (result: bool)
      ensures
          s.len() == 0 ==> result == true,
          s@ == t@ ==> result == true,
          s.len() > t.len() ==> result == false,
vc-code: |-
  {
      // impl-start
      assume(false);
      false
      // impl-end
  }
vc-postamble: |-
  /* Apps difficulty: interview
     Assurance level: unguarded */

  }
  
  fn main() {
      // let s1 = "abc".as_bytes().to_vec();
      // let t1 = "ahbgdc".as_bytes().to_vec();
      // println!("{}", is_subsequence(s1, t1));
      // 
      // let s2 = "axc".as_bytes().to_vec();
      // let t2 = "ahbgdc".as_bytes().to_vec();
      // println!("{}", is_subsequence(s2, t2));
      // 
      // let s3 = "".as_bytes().to_vec();
      // let t3 = "ahbgdc".as_bytes().to_vec();
      // println!("{}", is_subsequence(s3, t3));
  }