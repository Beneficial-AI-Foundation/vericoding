vc-description: |-
  You are given a string s that consists of lower case English letters and brackets. 
  Reverse the strings in each pair of matching parentheses, starting from the innermost one.
  Your result should not contain any brackets.

  Example 1:
  Input: s = "(abcd)"
  Output: "dcba"

  Example 2:
  Input: s = "(u(love)i)"
  Output: "iloveu"
  Explanation: The substring "love" is reversed first, then the whole string is reversed.

  Example 3:
  Input: s = "(ed(et(oc))el)"
  Output: "leetcode"
  Explanation: First, we reverse the substring "oc", then "etco", and finally, the whole string.

  Example 4:
  Input: s = "a(bcdefghijkl(mno)p)q"
  Output: "apmnolkjihgfedcbq"

  Constraints:

  0 <= s.length <= 2000
  s only contains lower case English characters and parentheses.
  It's guaranteed that all parentheses are balanced.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn count_char(s: Seq<char>, c: char) -> nat
      decreases s.len()
  {
      if s.len() == 0 {
          0nat
      } else {
          (if s[0] == c { 1nat } else { 0nat }) + count_char(s.skip(1), c)
      }
  }

  spec fn contains_char(s: Seq<char>, c: char) -> bool {
      exists|i: int| 0 <= i < s.len() && s[i] == c
  }

  fn reverse_parentheses(s: &str) -> (result: String)
      ensures 
          result@.len() + count_char(s@, '(') + count_char(s@, ')') == s@.len(),
          !contains_char(result@, '('),
          !contains_char(result@, ')'),

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {
      // let test1 = reverse_parentheses("(abcd)");
      // println!("Test 1: {}", test1);
      
      // let test2 = reverse_parentheses("(u(love)i)");
      // println!("Test 2: {}", test2);
      
      // let test3 = reverse_parentheses("a(bcdefghijkl(mno)p)q");
      // println!("Test 3: {}", test3);
  }