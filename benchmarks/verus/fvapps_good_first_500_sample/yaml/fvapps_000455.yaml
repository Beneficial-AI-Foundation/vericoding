vc-description: |-
  Given a string s, partition s such that every substring of the partition is a palindrome.

  Return the minimum cuts needed for a palindrome partitioning of s.

  Example:

  Input: "aab"
  Output: 1
  Explanation: The palindrome partitioning ["aa","b"] could be produced using 1 cut.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn is_palindrome(s: Seq<char>) -> bool {
      s =~= s.reverse()
  }

  spec fn min_palindrome_cuts(s: Seq<char>) -> nat {
      0
  }

  proof fn min_cuts_nonnegative(s: Seq<char>)
      ensures min_palindrome_cuts(s) >= 0,
  {
      assume(false);
  }

  proof fn binary_string_small_cuts(s: Seq<char>)
      requires s.len() <= 2,
      ensures min_palindrome_cuts(s) <= 1,
  {
      assume(false);
  }

  proof fn empty_string_no_cuts()
      ensures min_palindrome_cuts(Seq::<char>::empty()) == 0,
  {
      assume(false);
  }

  proof fn single_char_no_cuts(c: char)
      ensures min_palindrome_cuts(seq![c]) == 0,
  {
      assume(false);
  }

  proof fn cuts_monotonicity()
      ensures min_palindrome_cuts(seq!['a']) <= min_palindrome_cuts(seq!['a', 'b']) && 
              min_palindrome_cuts(seq!['a', 'b']) <= min_palindrome_cuts(seq!['a', 'b', 'c']),
  {
      assume(false);
  }

vc-code: |-

vc-postamble: |-
  /* Apps difficulty: interview
     Assurance level: guarded_and_plausible */

  }

  fn main() {
      // let result1 = min_palindrome_cuts(seq!['a', 'a', 'b']);
      // println!("{}", result1); // Should print 1
      
      // let result2 = min_palindrome_cuts(seq!['a', 'b', 'a']);
      // println!("{}", result2); // Should print 0
      
      // let result3 = min_palindrome_cuts(seq!['a', 'b', 'b', 'a']);
      // println!("{}", result3); // Should print 0
  }