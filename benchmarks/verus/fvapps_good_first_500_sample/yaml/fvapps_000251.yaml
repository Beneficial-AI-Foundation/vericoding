vc-description: |-
  Given an array of non-negative integers, you are initially positioned at the first index of the array.

  Each element in the array represents your maximum jump length at that position.

  Your goal is to reach the last index in the minimum number of jumps.

  Example:

  Input: [2,3,1,1,4]
  Output: 2
  Explanation: The minimum number of jumps to reach the last index is 2.
      Jump 1 step from index 0 to 1, then 3 steps to the last index.

  Note:

  You can assume that you can always reach the last index.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn jump_spec(v: Seq<usize>) -> usize;

  fn jump(v: Vec<usize>) -> (result: usize)
      requires v.len() > 0,
      ensures 
          result == jump_spec(v@),
          /* Property that result is the minimum number of jumps to reach the last index */

vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }

vc-postamble: |-
  proof fn jump_single_element(n: usize)
      ensures jump_spec(seq![n]) == 0
  {
      assume(false);
  }

  proof fn jump_two_elements()
      ensures jump_spec(seq![2, 1]) == 1
  {
      assume(false);
  }

  proof fn jump_three_ones()
      ensures jump_spec(seq![1, 1, 1]) == 2
  {
      assume(false);
  }

  proof fn jump_complex_case1()
      ensures jump_spec(seq![2, 3, 1, 1, 4]) == 2
  {
      assume(false);
  }

  proof fn jump_complex_case2()
      ensures jump_spec(seq![2, 1, 1, 1]) == 2
  {
      assume(false);
  }

  proof fn jump_ascending()
      ensures jump_spec(seq![1, 2, 3]) == 2
  {
      assume(false);
  }

  proof fn jump_long_sequence()
      ensures jump_spec(seq![5, 9, 3, 2, 1, 0, 2, 3, 3, 1, 0, 0]) == 3
  {
      assume(false);
  }

  proof fn jump_descending()
      ensures jump_spec(seq![3, 2, 1]) == 1
  {
      assume(false);
  }

  proof fn jump_mixed_sequence()
      ensures jump_spec(seq![4, 1, 1, 3, 1, 1, 1]) == 2
  {
      assume(false);
  }

  }

  fn main() {
      // println!("{}", jump(vec![2, 3, 1, 1, 4]));
      // println!("{}", jump(vec![1, 2, 3]));
      // println!("{}", jump(vec![1]));
  }