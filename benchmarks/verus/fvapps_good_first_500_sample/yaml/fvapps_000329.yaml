vc-description: |-
  Given the strings s1 and s2 of size n, and the string evil. Return the number of good strings.
  A good string has size n, it is alphabetically greater than or equal to s1, it is alphabetically smaller than or equal to s2, and it does not contain the string evil as a substring. Since the answer can be a huge number, return this modulo 10^9 + 7.

  Example 1:
  Input: n = 2, s1 = "aa", s2 = "da", evil = "b"
  Output: 51 
  Explanation: There are 25 good strings starting with 'a': "aa","ac","ad",...,"az". Then there are 25 good strings starting with 'c': "ca","cc","cd",...,"cz" and finally there is one good string starting with 'd': "da". 

  Example 2:
  Input: n = 8, s1 = "leetcode", s2 = "leetgoes", evil = "leet"
  Output: 0 
  Explanation: All strings greater than or equal to s1 and smaller than or equal to s2 start with the prefix "leet", therefore, there is not any good string.

  Example 3:
  Input: n = 2, s1 = "gx", s2 = "gz", evil = "x"
  Output: 2

  Constraints:

  s1.length == n
  s2.length == n
  s1 <= s2
  1 <= n <= 500
  1 <= evil.length <= 50
  All strings consist of lowercase English letters.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn string_lex_ge(s1: Seq<char>, s2: Seq<char>) -> bool
      decreases s1.len()
  {
      if s1.len() == 0 && s2.len() == 0 {
          true
      } else if s1.len() == 0 {
          false
      } else if s2.len() == 0 {
          true
      } else if s1[0] > s2[0] {
          true
      } else if s1[0] < s2[0] {
          false
      } else {
          string_lex_ge(s1.skip(1), s2.skip(1))
      }
  }

  spec fn string_lex_le(s1: Seq<char>, s2: Seq<char>) -> bool
      decreases s1.len()
  {
      if s1.len() == 0 && s2.len() == 0 {
          true
      } else if s1.len() == 0 {
          true
      } else if s2.len() == 0 {
          false
      } else if s1[0] < s2[0] {
          true
      } else if s1[0] > s2[0] {
          false
      } else {
          string_lex_le(s1.skip(1), s2.skip(1))
      }
  }

  spec fn has_substring_at(s: Seq<char>, pattern: Seq<char>, pos: int) -> bool
  {
      pos >= 0 && pos + pattern.len() <= s.len() &&
      s.subrange(pos, pos + pattern.len()) == pattern
  }

  spec fn contains_substring(s: Seq<char>, pattern: Seq<char>) -> bool
  {
      pattern.len() > 0 && 
      (exists|pos: int| #[trigger] has_substring_at(s, pattern, pos))
  }

  fn failure(pattern: &Vec<char>) -> (result: Vec<usize>)
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }

  fn find_good_strings(n: usize, s1: &Vec<char>, s2: &Vec<char>, evil: &Vec<char>) -> (result: usize)
      requires 
          n > 0,
          s1.len() == n,
          s2.len() == n,
          evil.len() > 0,
          string_lex_le(s1@, s2@),
      ensures 
          result < 1000000007

vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {
      /*
      let s1 = vec!['a', 'a'];
      let s2 = vec!['d', 'a'];
      let evil = vec!['b'];
      println!("{}", find_good_strings(2, &s1, &s2, &evil));
      
      let s1 = vec!['l', 'e', 'e', 't', 'c', 'o', 'd', 'e'];
      let s2 = vec!['l', 'e', 'e', 't', 'g', 'o', 'e', 's'];
      let evil = vec!['l', 'e', 'e', 't'];
      println!("{}", find_good_strings(8, &s1, &s2, &evil));
      
      let s1 = vec!['g', 'x'];
      let s2 = vec!['g', 'z'];
      let evil = vec!['x'];
      println!("{}", find_good_strings(2, &s1, &s2, &evil));
      */
  }