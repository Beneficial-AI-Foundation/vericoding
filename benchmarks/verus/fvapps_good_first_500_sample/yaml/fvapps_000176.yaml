vc-description: |-
  Run-length encoding is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string "aabccc" we replace "aa" by "a2" and replace "ccc" by "c3". Thus the compressed string becomes "a2bc3".
  Notice that in this problem, we are not adding '1' after single characters.
  Given a string s and an integer k. You need to delete at most k characters from s such that the run-length encoded version of s has minimum length.
  Find the minimum length of the run-length encoded version of s after deleting at most k characters.

  Example 1:
  Input: s = "aaabcccd", k = 2
  Output: 4
  Explanation: Compressing s without deleting anything will give us "a3bc3d" of length 6. Deleting any of the characters 'a' or 'c' would at most decrease the length of the compressed string to 5, for instance delete 2 'a' then we will have s = "abcccd" which compressed is abc3d. Therefore, the optimal way is to delete 'b' and 'd', then the compressed version of s will be "a3c3" of length 4.
  Example 2:
  Input: s = "aabbaa", k = 2
  Output: 2
  Explanation: If we delete both 'b' characters, the resulting compressed string would be "a4" of length 2.

  Example 3:
  Input: s = "aaaaaaaaaaa", k = 0
  Output: 3
  Explanation: Since k is zero, we cannot delete anything. The compressed string is "a11" of length 3.

  Constraints:

  1 <= s.length <= 100
  0 <= k <= s.length
  s contains only lowercase English letters.
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  spec fn naive_compression_length(s: Seq<char>) -> nat
  {
      s.len()
  }

  spec fn get_length_of_optimal_compression_spec(s: Seq<char>, k: nat) -> nat
  {
      0
  }

  fn get_length_of_optimal_compression(s: Vec<char>, k: usize) -> (result: usize)
      requires 
          s.len() >= 1,
          k <= s.len(),
      ensures 
          result >= 0,
          result <= naive_compression_length(s@),
          result <= s.len(),
          result == get_length_of_optimal_compression_spec(s@, k as nat),
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }

  proof fn compressed_length_non_negative(s: Vec<char>, k: usize)
      requires s.len() >= 1, k <= s.len(),
      ensures get_length_of_optimal_compression_spec(s@, k as nat) >= 0,
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  proof fn compressed_length_not_longer_than_naive(s: Vec<char>, k: usize)
      requires s.len() >= 1, k <= s.len(),
      ensures get_length_of_optimal_compression_spec(s@, k as nat) <= naive_compression_length(s@),
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  proof fn compressed_length_not_longer_than_original(s: Vec<char>, k: usize)
      requires s.len() >= 1, k <= s.len(),
      ensures get_length_of_optimal_compression_spec(s@, k as nat) <= s.len(),
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  proof fn binary_string_min_length(s: Vec<char>, k: usize)
      requires 
          s.len() > 0,
          k < s.len(),
      ensures get_length_of_optimal_compression_spec(s@, k as nat) >= 1,
  {
      assume(false); // TODO: Remove this line and implement the proof
  }
vc-code: |-

vc-postamble: |-
  /* Apps difficulty: interview */
  /* Assurance level: unguarded */

  /*
  Test cases:
  get_length_of_optimal_compression(vec!['a','a','a','b','c','c','c','d'], 2) should return 4
  get_length_of_optimal_compression(vec!['a','a','b','b','a','a'], 2) should return 2
  get_length_of_optimal_compression(vec!['a','a','a','a','a','a','a','a','a','a','a'], 0) should return 3
  */

  }

  fn main() {
      // let test1 = vec!['a','a','a','b','c','c','c','d'];
      // println!("{}", get_length_of_optimal_compression(test1, 2));
      // let test2 = vec!['a','a','b','b','a','a'];
      // println!("{}", get_length_of_optimal_compression(test2, 2));
      // let test3 = vec!['a','a','a','a','a','a','a','a','a','a','a'];
      // println!("{}", get_length_of_optimal_compression(test3, 0));
  }