vc-description: |-
  Given an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it.
  Return the number of nice sub-arrays.

  Example 1:
  Input: nums = [1,1,2,1,1], k = 3
  Output: 2
  Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].

  Example 2:
  Input: nums = [2,4,6], k = 1
  Output: 0
  Explanation: There is no odd numbers in the array.

  Example 3:
  Input: nums = [2,2,2,1,2,2,1,2,2,2], k = 2
  Output: 16

  Constraints:

  1 <= nums.length <= 50000
  1 <= nums[i] <= 10^5
  1 <= k <= nums.length

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn count_odd_in_range(nums: Seq<i32>, start: int, end: int) -> int 
      decreases end - start
  {
      if start >= end {
          0int
      } else if start < 0 || start >= nums.len() {
          0int
      } else {
          (if nums[start] % 2 == 1 { 1int } else { 0int }) + count_odd_in_range(nums, start + 1, end)
      }
  }

  spec fn is_nice_subarray(nums: Seq<i32>, start: int, end: int, k: int) -> bool {
      start >= 0 && end <= nums.len() && start < end &&
      count_odd_in_range(nums, start, end) == k
  }

  fn number_of_subarrays(nums: Vec<i32>, k: i32) -> (result: i32)
      requires 
          nums.len() >= 1,
          nums.len() <= 50000,
          forall|i: int| 0 <= i < nums.len() ==> 1 <= nums[i] && nums[i] <= 100000,
          1 <= k && k <= nums.len(),
      ensures 
          result >= 0,
          k > nums.len() ==> result == 0,

vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {
      // let result1 = number_of_subarrays(vec![1, 1, 2, 1, 1], 3);
      // println!("Result 1: {}", result1); // Expected: 2
      
      // let result2 = number_of_subarrays(vec![2, 4, 6], 1);
      // println!("Result 2: {}", result2); // Expected: 0
      
      // let result3 = number_of_subarrays(vec![2, 2, 2, 1, 2, 2, 1, 2, 2, 2], 2);
      // println!("Result 3: {}", result3); // Expected: 16
  }