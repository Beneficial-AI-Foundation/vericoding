vc-description: |-
  Nobody knows, but N frogs live in Chef's garden.
  Now they are siting on the X-axis and want to speak to each other. One frog can send a message to another one if the distance between them is less or equal to K.
  Chef knows all P pairs of frogs, which want to send messages. Help him to define can they or not!
  Note : More than 1 frog can be on the same point on the X-axis.
  
  -----Input-----
  - The first line contains three integers N, K and P.
  - The second line contains N space-separated integers A_1, A_2, …, A_N denoting the x-coordinates of frogs".
  - Each of the next P lines contains two integers A and B denoting the numbers of frogs according to the input.
  
  -----Output-----
  For each pair print "Yes" without a brackets if frogs can speak and "No" if they cannot.
  
  -----Constraints-----
  - 1 ≤ N, P ≤ 10^5
  - 0 ≤ A_i, K ≤ 10^9
  - 1 ≤ A, B ≤ N
  
  -----Example-----
  
  -----Sample Input:-----
  5 3 3
  0 3 8 5 12
  1 2
  1 3
  2 5
  
  -----Sample Output:-----
  Yes
  Yes
  No
  
  -----Explanation-----
  - 
  For pair (1, 2) frog 1 can directly speak to the frog 2 as the distance between them is 3 - 0 = 3 ≤ K . 
  - 
  For pair (1, 3) frog 1 can send a message to frog 2, frog 2 can send it to frog 4 and it can send it to frog 3.
  - 
  For pair (2, 5) frogs can't send a message under current constraints.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn absolute_value(x: int) -> int {
      if x >= 0 { x } else { -x }
  }

  spec fn is_valid_result(s: String) -> bool {
      s@ =~= "Yes"@ || s@ =~= "No"@
  }

  fn can_frogs_communicate(n: usize, k: int, coords: Vec<int>, pairs: Vec<(usize, usize)>) -> (result: Vec<String>)
      requires 
          n >= 2,
          coords.len() == n,
          pairs.len() > 0,
          forall|i: int| 0 <= i < pairs.len() ==> pairs[i].0 >= 1 && pairs[i].0 <= n && pairs[i].1 >= 1 && pairs[i].1 <= n,
      ensures
          result.len() == pairs.len(),
          forall|i: int| 0 <= i < result.len() ==> is_valid_result(result[i]),

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}