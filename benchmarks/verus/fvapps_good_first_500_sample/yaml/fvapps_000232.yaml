vc-description: |-
  A string of '0's and '1's is monotone increasing if it consists of some number of '0's (possibly 0), followed by some number of '1's (also possibly 0.)
  We are given a string S of '0's and '1's, and we may flip any '0' to a '1' or a '1' to a '0'.
  Return the minimum number of flips to make S monotone increasing.

  Example 1:
  Input: "00110"
  Output: 1
  Explanation: We flip the last digit to get 00111.

  Example 2:
  Input: "010110"
  Output: 2
  Explanation: We flip to get 011111, or alternatively 000111.

  Example 3:
  Input: "00011000"
  Output: 2
  Explanation: We flip to get 00000000.

  Note:

  1 <= S.length <= 20000
  S only consists of '0' and '1' characters.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn min_flips_mono_incr(s: Vec<char>) -> (result: usize)
      requires s.len() > 0,
      ensures result <= s.len()

vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }

vc-postamble: |-

  /* Apps difficulty: interview */
  /* Assurance level: guarded_and_plausible */

  }

  fn main() {
      // let test1 = vec!['0', '0', '1', '1', '0'];
      // println!("{}", min_flips_mono_incr(test1)); // Expected: 1
      
      // let test2 = vec!['0', '1', '0', '1', '1', '0'];
      // println!("{}", min_flips_mono_incr(test2)); // Expected: 2
      
      // let test3 = vec!['0', '0', '0', '1', '1', '0', '0', '0'];
      // println!("{}", min_flips_mono_incr(test3)); // Expected: 2
  }