vc-description: |-
  Given an array of integers nums and an integer target.
  Return the number of non-empty subsequences of nums such that the sum of the minimum and maximum element on it is less or equal than target.
  Since the answer may be too large, return it modulo 10^9 + 7.

  Example 1:
  Input: nums = [3,5,6,7], target = 9
  Output: 4
  Explanation: There are 4 subsequences that satisfy the condition.
  [3] -> Min value + max value <= target (3 + 3 <= 9)
  [3,5] -> (3 + 5 <= 9)
  [3,5,6] -> (3 + 6 <= 9)
  [3,6] -> (3 + 6 <= 9)

  Example 2:
  Input: nums = [3,3,6,8], target = 10
  Output: 6
  Explanation: There are 6 subsequences that satisfy the condition. (nums can have repeated numbers).
  [3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6]
  Example 3:
  Input: nums = [2,3,3,4,6,7], target = 12
  Output: 61
  Explanation: There are 63 non-empty subsequences, two of them don't satisfy the condition ([6,7], [7]).
  Number of valid subsequences (63 - 2 = 61).

  Example 4:
  Input: nums = [5,2,4,1,7,6,8], target = 16
  Output: 127
  Explanation: All non-empty subset satisfy the condition (2^7 - 1) = 127

  Constraints:

  1 <= nums.length <= 10^5
  1 <= nums[i] <= 10^6
  1 <= target <= 10^6
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-
  spec fn minimum(l: Seq<u32>) -> Option<u32> {
      if l.len() == 0 {
          None
      } else {
          Some(l.fold_left(l[0], |acc: u32, x: u32| if x < acc { x } else { acc }))
      }
  }
vc-spec: |-
  fn num_subseq(nums: Vec<u32>, target: u32) -> (result: u32)
      requires
          target >= 2,
          nums.len() >= 1,
          forall|i: int| 0 <= i < nums.len() ==> nums[i] >= 1 && nums[i] <= 1000,
      ensures
          result < 1000000007,
          (nums.len() == 1 && nums[0] >= 1 && nums[0] <= 100) ==> 
              result == (if nums[0] * 2 <= nums[0] * 3 { 1u32 } else { 0u32 })
vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {
      // Apps difficulty: interview
      // Assurance level: guarded_and_plausible

      // #eval numSubseq [3, 5, 6, 7] 9 should output 4
      // #eval numSubseq [3, 3, 6, 8] 10 should output 6  
      // #eval numSubseq [2, 3, 3, 4, 6, 7] 12 should output 61
  }