vc-description: |-
  You have a fence consisting of n vertical boards. The width of each board is 1. The height of the i-th board is a_i. You think that the fence is great if there is no pair of adjacent boards having the same height. More formally, the fence is great if and only if for all indices from 2 to n, the condition a_{i-1} â‰  a_i holds.

  Unfortunately, it is possible that now your fence is not great. But you can change it! You can increase the length of the i-th board by 1, but you have to pay b_i rubles for it. The length of each board can be increased any number of times (possibly, zero).

  Calculate the minimum number of rubles you have to spend to make the fence great again!

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn list_sum(costs: Seq<nat>) -> nat
      decreases costs.len()
  {
      if costs.len() == 0 {
          0
      } else {
          costs[0] + list_sum(costs.drop_first())
      }
  }

vc-spec: |-
  fn solve_fence(heights: Vec<nat>, costs: Vec<nat>) -> (result: nat)
      requires heights.len() == costs.len(),
      ensures 
          result >= 0,
          heights.len() <= 1 ==> result == 0,
          result <= list_sum(costs@.map_values(|c: nat| c * 2))

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {
      // let result1 = solve_fence(vec![2, 2, 3], vec![4, 1, 5]);
      // println!("Result 1: {}", result1); // Expected: 2
      
      // let result2 = solve_fence(vec![2, 2, 2], vec![3, 10, 6]);
      // println!("Result 2: {}", result2); // Expected: 9
      
      // let result3 = solve_fence(vec![1, 3, 2, 1000000000], vec![7, 3, 6, 2]);
      // println!("Result 3: {}", result3); // Expected: 0
  }