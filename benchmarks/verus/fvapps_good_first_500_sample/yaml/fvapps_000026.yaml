vc-description: |-
  You are given a special jigsaw puzzle consisting of n⋅m identical pieces. Every piece has three tabs and one blank, as pictured below.

  The jigsaw puzzle is considered solved if the following conditions hold: The pieces are arranged into a grid with n rows and m columns. For any two pieces that share an edge in the grid, a tab of one piece fits perfectly into a blank of the other piece.

  Through rotation and translation of the pieces, determine if it is possible to solve the jigsaw puzzle.

  Input: The test consists of multiple test cases. The first line contains a single integer t (1≤t≤1000) — the number of test cases. Next t lines contain descriptions of test cases.

  Each test case contains two integers n and m (1 ≤ n,m ≤ 10^5).

  Output: For each test case output a single line containing "YES" if it is possible to solve the jigsaw puzzle, or "NO" otherwise. You can print each letter in any case (upper or lower).

  Example:
  Input
  3
  1 3
  100000 100000
  2 2

  Output
  YES
  NO
  YES

  Note: For the first test case, this is an example solution. For the second test case, we can show that no solution exists. For the third test case, this is an example solution.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn solve_jigsaw_spec(n: nat, m: nat) -> bool {
      n == 1 || m == 1 || (n == 2 && m == 2)
  }

  fn solve_jigsaw(n: nat, m: nat) -> (result: bool)
      ensures result == solve_jigsaw_spec(n, m)

vc-code: |-
  {
      // impl-start
      assume(false);
      false
      // impl-end
  }

vc-postamble: |-
  proof fn solve_jigsaw_symmetry(n: nat, m: nat)
      ensures solve_jigsaw_spec(n, m) == solve_jigsaw_spec(m, n)
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  proof fn solve_jigsaw_one_row(n: nat)
      ensures solve_jigsaw_spec(1, n) == true
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  proof fn solve_jigsaw_2x2()
      ensures solve_jigsaw_spec(2, 2) == true
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  proof fn solve_jigsaw_large_grids(n: nat, m: nat)
      requires n >= 3 && m >= 3,
      ensures solve_jigsaw_spec(n, m) == false
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  }

  fn main() {
      // assert(solve_jigsaw(1, 3) == true);
      // assert(solve_jigsaw(100000, 100000) == false);
      // assert(solve_jigsaw(2, 2) == true);
  }