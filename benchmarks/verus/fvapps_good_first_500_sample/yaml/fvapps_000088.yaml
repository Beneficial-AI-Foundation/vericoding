vc-description: |-
  Monocarp had a tree which consisted of n vertices and was rooted at vertex 1. He decided to study BFS (Breadth-first search), so he ran BFS on his tree, starting from the root. BFS can be described by the following pseudocode:a = [] # the order in which vertices were processed

  q = Queue()

  q.put(1) # place the root at the end of the queue

  while not q.empty():

      k = q.pop() # retrieve the first vertex from the queue

      a.append(k) # append k to the end of the sequence in which vertices were visited

      for y in g[k]: # g[k] is the list of all children of vertex k, sorted in ascending order

          q.put(y)

  Monocarp was fascinated by BFS so much that, in the end, he lost his tree. Fortunately, he still has a sequence of vertices, in which order vertices were visited by the BFS algorithm (the array a from the pseudocode). Monocarp knows that each vertex was visited exactly once (since they were put and taken from the queue exactly once). Also, he knows that all children of each vertex were viewed in ascending order.

  Monocarp knows that there are many trees (in the general case) with the same visiting order a, so he doesn't hope to restore his tree. Monocarp is okay with any tree that has minimum height.

  The height of a tree is the maximum depth of the tree's vertices, and the depth of a vertex is the number of edges in the path from the root to it. For example, the depth of vertex 1 is 0, since it's the root, and the depth of all root's children are 1.

  Help Monocarp to find any tree with given visiting order a and minimum height.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn solve_minimum_tree_height(n: usize, xs: Vec<i32>) -> (result: usize)
      requires 
          xs.len() > 0,
          n >= 2,
          xs.len() == n,
      ensures 
          result <= xs.len() - 1,

vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {
      // let result1 = solve_minimum_tree_height(4, vec![1, 4, 3, 2]);
      // assert(result1 == 3);
      
      // let result2 = solve_minimum_tree_height(2, vec![1, 2]);
      // assert(result2 == 1);
      
      // let result3 = solve_minimum_tree_height(3, vec![1, 2, 3]);
      // assert(result3 == 1);
  }