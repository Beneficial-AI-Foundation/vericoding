vc-description: |-
  Today is rose day, batch mates of Kabir and Tara decided to celebrate this day by exchanging roses with each other. 
  Note: exchanging means both the boy and the girl will give rose to each other. 
  In the class there are B boys and G girls. 
  Exchange of rose will take place if and only if at least one of them hasn't received a rose from anyone else and a rose can be exchanged only once.
  Tara has to bring maximum sufficient roses for everyone and is confused as she don't know how many roses to buy.You are a friend of Kabir, so help him to solve the problem so that he can impress Tara by helping her. 

  -----Input:-----
  - First line will contain T, number of test cases. 
  - Each test case contains two space separated integers B (Number of boys) and  G (Number of Girls).

  -----Output:-----
  For each test case, output in a single line the total number of roses exchanged.

  -----Constraints:-----
  - 1≤T≤10^5
  - 1≤B≤10^9
  - 1≤G≤10^9

  -----Sample Input:-----
  1
  2 3

  -----Sample Output:-----
  8

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn calculate_roses_spec(boys: nat, girls: nat) -> nat 
      recommends boys > 0 && girls > 0
  {
      ((2 * ((boys + girls) - 1)) as nat)
  }

  fn calculate_roses(boys: nat, girls: nat) -> (result: nat)
      requires boys > 0 && girls > 0,
      ensures result % 2 == 0 && result >= 0 && result == calculate_roses_spec(boys, girls),

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  proof fn roses_is_even(boys: nat, girls: nat)
      requires boys > 0 && girls > 0,
      ensures calculate_roses_spec(boys, girls) % 2 == 0,
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  proof fn roses_is_nonnegative(boys: nat, girls: nat)
      requires boys > 0 && girls > 0,
      ensures calculate_roses_spec(boys, girls) >= 0,
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  proof fn roses_formula(boys: nat, girls: nat)
      requires boys > 0 && girls > 0,
      ensures calculate_roses_spec(boys, girls) == ((2 * ((boys + girls) - 1)) as nat),
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  proof fn equal_boys_girls(n: nat)
      requires n > 0,
      ensures calculate_roses_spec(n, n) == ((2 * (2 * n - 1)) as nat),
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  proof fn minimum_case()
      ensures calculate_roses_spec(1, 1) == 2,
  {
      assume(false); // TODO: Remove this line and implement the proof
  }

  }

  fn main() {
      // assert(calculate_roses(2, 3) == 8);
      // assert(calculate_roses(3, 3) == 10);
      // assert(calculate_roses(1, 1) == 2);
  }