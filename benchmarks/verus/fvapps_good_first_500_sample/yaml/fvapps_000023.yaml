vc-description: |-
  The only difference between easy and hard versions is constraints.

  Now elections are held in Berland and you want to win them. More precisely, you want everyone to vote for you.

  There are $n$ voters, and two ways to convince each of them to vote for you. The first way to convince the $i$-th voter is to pay him $p_i$ coins. The second way is to make $m_i$ other voters vote for you, and the $i$-th voter will vote for free.

  Moreover, the process of such voting takes place in several steps. For example, if there are five voters with $m_1 = 1$, $m_2 = 2$, $m_3 = 2$, $m_4 = 4$, $m_5 = 5$, then you can buy the vote of the fifth voter, and eventually everyone will vote for you. Set of people voting for you will change as follows: ${5} \rightarrow {1, 5} \rightarrow {1, 2, 3, 5} \rightarrow {1, 2, 3, 4, 5}$.

  Calculate the minimum number of coins you have to spend so that everyone votes for you.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn sum_prices(voters: Seq<(usize, usize)>) -> nat 
      decreases voters.len()
  {
      if voters.len() == 0 {
          0nat
      } else {
          voters[0].1 as nat + sum_prices(voters.skip(1))
      }
  }

vc-spec: |-
  fn solve_elections(n: usize, voters: Vec<(usize, usize)>) -> (result: usize)
      requires 
          n > 0,
          voters.len() == n,
          forall|i: int| 0 <= i < voters.len() ==> voters[i].0 < n,
      ensures
          result >= 0,
          result <= sum_prices(voters@),
          (forall|i: int| 0 <= i < voters.len() ==> voters[i].0 == 0) ==> result == 0,

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-
  }

  fn main() {
      // let test1 = solve_elections(3, vec![(1, 5), (2, 10), (2, 8)]);
      // println!("{}", test1); // Expected: 8

      // let test2 = solve_elections(7, vec![(0, 1), (3, 1), (1, 1), (6, 1), (1, 1), (4, 1), (4, 1)]);
      // println!("{}", test2); // Expected: 0

      // let test3 = solve_elections(6, vec![(2, 6), (2, 3), (2, 8), (2, 7), (4, 4), (5, 5)]);
      // println!("{}", test3); // Expected: 7
  }