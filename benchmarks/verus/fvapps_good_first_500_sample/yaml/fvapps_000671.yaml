vc-description: |-
  You are a king and you are at war. If the enemy breaks through your frontline you lose.
  Enemy can break the line only if the sum of morale of any K continuous soldiers is strictly less than M. So, you being a motivational orator decides to boost their morale by giving a speech. On hearing it morale of a soldier multiplies by X which depends on you and your speech (i.e. X can be any positive value) but atmost only K continuous speakers can hear your speech.
  N soldiers are standing on the frontline with A[i] morale. 
  Determine the minimum number of speeches you need to give.

  -----Input:-----
  The first line contains three space seperated integers N,K,M.
  The next line contains N space integers, ith of which denotes the morale of ith soldier.

  -----Output:-----
  Output the minimum number of speeches required. In case if it is impossible to achieve, print -1.

  -----Constraints:-----
  1 ≤ N,M ≤ 10^5
  1 ≤ k ≤ N
  0 ≤ Ai ≤ 10^5 

  -----Sample Input:-----
  6 2 5
  1 1 1 1 1 1

  -----Sample Output:-----
  2

  -----Explanation:-----
  We multiply 2nd ,3rd  and 5th,6th by 5. Resulting array will be 1 5 5 1 5 5.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn min_speeches(n: usize, k: usize, m: usize, arr: Vec<usize>) -> (result: i32)
      requires 
          k <= n,
          arr.len() == n,
          k > 0,
          n > 0,
      ensures
          /* If array contains 0, result is -1 */
          (exists|i: int| 0 <= i < arr.len() && arr[i] == 0) ==> result == -1,
          /* If no zeros in array, result is non-negative */
          (forall|i: int| 0 <= i < arr.len() ==> arr[i] != 0) ==> result >= 0,

vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {
      // let result1 = min_speeches(6, 2, 5, vec![1, 1, 1, 1, 1, 1]);
      // assert(result1 == 3);
      
      // let result2 = min_speeches(5, 2, 4, vec![1, 1, 1, 1, 1]);
      // assert(result2 == 2);
      
      // let result3 = min_speeches(4, 2, 3, vec![0, 1, 1, 0]);
      // assert(result3 == -1);
  }