vc-description: |-
  We are committed to the well being of all participants. Therefore, instead of the problem, we suggest you enjoy a piece of cake.

  Uh oh. Somebody cut the cake. We told them to wait for you, but they did it anyway. There is still some left, though, if you hurry back. Of course, before you taste the cake, you thought about how the cake was cut.

  It is known that the cake was originally a regular n-sided polygon, each vertex of which had a unique number from 1 to n. The vertices were numbered in random order.

  Each piece of the cake is a triangle. The cake was cut into n - 2 pieces as follows: each time one cut was made with a knife (from one vertex to another) such that exactly one triangular piece was separated from the current cake, and the rest continued to be a convex polygon. In other words, each time three consecutive vertices of the polygon were selected and the corresponding triangle was cut off.

  A possible process of cutting the cake is presented in the picture below. [Image] Example of 6-sided cake slicing. 

  You are given a set of n-2 triangular pieces in random order. The vertices of each piece are given in random order — clockwise or counterclockwise. Each piece is defined by three numbers — the numbers of the corresponding n-sided cake vertices.

  For example, for the situation in the picture above, you could be given a set of pieces: [3, 6, 5], [5, 2, 4], [5, 4, 6], [6, 3, 1].

  You are interested in two questions.  What was the enumeration of the n-sided cake vertices?  In what order were the pieces cut? 

  Formally, you have to find two permutations p_1, p_2, ..., p_n (1 ≤ p_i ≤ n) and q_1, q_2, ..., q_{n - 2} (1 ≤ q_i ≤ n - 2) such that if the cake vertices are numbered with the numbers p_1, p_2, ..., p_n in order clockwise or counterclockwise, then when cutting pieces of the cake in the order q_1, q_2, ..., q_{n - 2} always cuts off a triangular piece so that the remaining part forms one convex polygon.

  For example, in the picture above the answer permutations could be: p=[2, 4, 6, 1, 3, 5] (or any of its cyclic shifts, or its reversal and after that any cyclic shift) and q=[2, 4, 1, 3].

  Write a program that, based on the given triangular pieces, finds any suitable permutations p and q.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn is_triangle(x: nat, y: nat, z: nat) -> bool {
      x > 0 && y > 0 && z > 0
  }

  fn polygon_cut(n: nat, triangles: Vec<(nat, nat, nat)>) -> (result: (Vec<nat>, Vec<nat>))
      requires 
          n >= 3,
          triangles.len() == n - 2,
      ensures
          result.0.len() == n,
          result.1.len() == n - 2,
          forall|i: int| 0 <= i < result.0.len() ==> #[trigger] result.0[i] >= 1 && result.0[i] <= n,
          forall|i: int| 0 <= i < result.1.len() ==> #[trigger] result.1[i] >= 1 && result.1[i] <= (triangles.len() as int),

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-
  /* Apps difficulty: interview */
  /* Assurance level: unguarded */

  }

  fn main() {
      // let n1 = 6;
      // let vertices1 = vec![1, 6, 4, 2, 5, 3];
      // let cuts1 = vec![4, 2, 3, 1];
      
      // let n2 = 6; 
      // let vertices2 = vec![1, 4, 2, 6, 5, 3];
      // let cuts2 = vec![3, 4, 2, 1];
      
      // println!("n1: {}", n1);
      // println!("vertices1 length: {}", vertices1.len());
      // println!("cuts1 length: {}", cuts1.len());
      
      // println!("n2: {}", n2);
      // println!("vertices2 length: {}", vertices2.len()); 
      // println!("cuts2 length: {}", cuts2.len());
  }