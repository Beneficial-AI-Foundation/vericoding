vc-description: |-
  Given a square matrix of size NÃ—N, calculate the absolute difference between the sums of its diagonals. 

  -----Input-----
  The first line contains a single integer N. The next N lines denote the matrix's rows, with each line containing N space-separated integers describing the columns.

  -----Output-----
  Print the absolute difference between the two sums of the matrix's diagonals as a single integer.

  -----Constraints-----
  1<=N<=10

  -----Example-----
  Input:
  3
  11 2 4
  4 5 6
  10 8 -12

  Output:
  15

  -----Explanation-----
  The primary diagonal is: 
  11
  5
  -12
  Sum across the primary diagonal: 11 + 5 - 12 = 4
  The secondary diagonal is:
  4
  5
  10
  Sum across the secondary diagonal: 4 + 5 + 10 = 19 
  Difference: |4 - 19| = 15

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn is_square_matrix(matrix: Seq<Seq<i32>>) -> bool {
      matrix.len() > 0 && forall|i: int| 0 <= i < matrix.len() ==> matrix[i].len() == matrix.len()
  }

  spec fn primary_diagonal_sum(matrix: Seq<Seq<i32>>, idx: nat) -> int
      decreases matrix.len() - idx
  {
      if idx >= matrix.len() || !is_square_matrix(matrix) {
          0
      } else {
          (matrix[idx as int][idx as int] as int) + primary_diagonal_sum(matrix, idx + 1)
      }
  }

  spec fn secondary_diagonal_sum(matrix: Seq<Seq<i32>>, idx: nat) -> int
      decreases matrix.len() - idx
  {
      if idx >= matrix.len() || !is_square_matrix(matrix) {
          0
      } else {
          (matrix[idx as int][(matrix.len() - 1 - idx) as int] as int) + secondary_diagonal_sum(matrix, idx + 1)
      }
  }

  fn diagonal_difference(matrix: Vec<Vec<i32>>) -> (result: i32)
      requires 
          matrix.len() > 0,
          forall|i: int| 0 <= i < matrix.len() ==> matrix[i]@.len() == matrix.len(),
      ensures 
          matrix.len() == 1 ==> result == 0,
          result >= 0,

vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {
      // let test_matrix = vec![vec![11, 2, 4], vec![4, 5, 6], vec![10, 8, -12]];
      // println!("{}", diagonal_difference(test_matrix));
      
      // let test_matrix2 = vec![vec![1, 2], vec![3, 4]];
      // println!("{}", diagonal_difference(test_matrix2));
      
      // let test_matrix3 = vec![vec![5]];
      // println!("{}", diagonal_difference(test_matrix3));
  }