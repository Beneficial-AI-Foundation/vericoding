vc-description: |-
  Say you have an array for which the ith element is the price of a given stock on day i.

  Design an algorithm to find the maximum profit. You may complete at most two transactions.

  Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).

  Example 1:

  Input: [3,3,5,0,0,3,1,4]
  Output: 6
  Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
               Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.

  Example 2:

  Input: [1,2,3,4,5]
  Output: 4
  Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
               Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are
               engaging multiple transactions at the same time. You must sell before buying again.

  Example 3:

  Input: [7,6,4,3,1]
  Output: 0
  Explanation: In this case, no transaction is done, i.e. max profit = 0.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn is_descending(prices: Seq<u32>) -> bool {
      forall|i: int, j: int| 0 <= i < j < prices.len() ==> prices[i] >= prices[j]
  }

  spec fn is_ascending(prices: Seq<u32>) -> bool {
      forall|i: int, j: int| 0 <= i < j < prices.len() ==> prices[i] <= prices[j]
  }

  spec fn is_constant(prices: Seq<u32>) -> bool {
      forall|i: int, j: int| 0 <= i < prices.len() && 0 <= j < prices.len() ==> prices[i] == prices[j]
  }

  fn max_profit(prices: Vec<u32>) -> (result: u32)
      ensures 
          result >= 0,
          prices.len() == 0 ==> result == 0,
          prices.len() > 0 && is_descending(prices@) ==> result == 0,
          prices.len() > 0 && is_constant(prices@) ==> result == 0,
          prices.len() >= 4 && is_ascending(prices@) ==> 
              result <= (prices[prices.len() - 1] - prices[0]) + (prices[prices.len() - 2] - prices[1]),
          prices.len() >= 2 && prices.len() < 4 && is_ascending(prices@) ==> 
              result == prices[prices.len() - 1] - prices[0]

vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {
      // println!("{}", max_profit(vec![3, 3, 5, 0, 0, 3, 1, 4])); // Expected: 6
      // println!("{}", max_profit(vec![1, 2, 3, 4, 5]));          // Expected: 4  
      // println!("{}", max_profit(vec![7, 6, 4, 3, 1]));          // Expected: 0
  }