vc-description: |-
  You are given three non-negative integers X, Y and N. Find the number of integers Z such that 0 ≤ Z ≤ N and (X ⊕ Z) < (Y ⊕ Z), where ⊕ denotes the bitwise XOR operation.

  -----Input-----
  - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.
  - The first and only line of each test case contains three space-separated integers X, Y and N.

  -----Output-----
  For each test case, print a single line containing one integer ― the number of integers Z which satisfy all conditions.

  -----Constraints-----
  - 1 ≤ T ≤ 1,000
  - 0 ≤ X, Y, N ≤ 2^30 - 1

  -----Subtasks-----
  Subtask #1 (5 points): X, Y, N ≤ 2^6 - 1
  Subtask #2 (95 points): original constraints

  -----Example Input-----
  3
  1 2 10
  2 1 10
  0 0 7

  -----Example Output-----
  6
  5
  0

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn count_xor_pairs(x: u32, y: u32, n: u32) -> (result: u32)
      ensures 
          result >= 0,
          result <= n + 1,
          (x == y) ==> (result == 0),

vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }

vc-postamble: |-

  /* Apps difficulty: interview */
  /* Assurance level: guarded_and_plausible */

  }

  fn main() {
      // let test1 = count_xor_pairs(1, 2, 10);
      // println!("{}", test1); // Expected: 6
      
      // let test2 = count_xor_pairs(2, 1, 10);
      // println!("{}", test2); // Expected: 5
      
      // let test3 = count_xor_pairs(0, 0, 7);
      // println!("{}", test3); // Expected: 0
  }