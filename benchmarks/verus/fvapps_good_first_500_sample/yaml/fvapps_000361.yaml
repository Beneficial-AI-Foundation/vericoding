vc-description: |-
  Given a non-empty array of unique positive integers A, consider the following graph:

  There are A.length nodes, labelled A[0] to A[A.length - 1];
  There is an edge between A[i] and A[j] if and only if A[i] and A[j] share a common factor greater than 1.

  Return the size of the largest connected component in the graph.

  Example 1:
  Input: [4,6,15,35]
  Output: 4

  Example 2:
  Input: [20,50,9,63]
  Output: 2

  Example 3:
  Input: [2,3,6,7,4,12,21,39]
  Output: 8

  Note:

  1 <= A.length <= 20000
  1 <= A[i] <= 100000

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn gcd(a: nat, b: nat) -> nat
      decreases b
  {
      if b == 0 { a } else { gcd(b, a % b) }
  }

  spec fn have_common_factor(a: nat, b: nat) -> bool {
      gcd(a, b) > 1
  }

  fn largest_component_size(nums: Vec<nat>) -> (result: nat)
      requires nums.len() > 0,
      ensures 
          result > 0,
          result <= nums.len(),

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  /* Apps difficulty: interview */
  /* Assurance level: unguarded */

  /*
  fn test_examples() {
      // Example 1: [4,6,15,35] should output 4
      // Example 2: [20,50,9,63] should output 2  
      // Example 3: [2,3,6,7,4,12,21,39] should output 8
  }
  */

  }

  fn main() {}