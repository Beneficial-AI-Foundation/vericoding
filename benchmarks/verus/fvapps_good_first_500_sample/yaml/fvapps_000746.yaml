vc-description: |-
  Chef likes to travel a lot. Every day Chef tries to visit as much cities as possible. Recently he had a quite a few trips of great Chefland for learning various recipes. Chefland had N cities numbered from 1 to N. People in Chefland are very friendly, friendliness of i-th city is given by Fi.
  
  Before starting of each trip, Chef's initial enjoyment is 1 unit. Whenever he visits a city with friendliness Fi, his enjoyment gets multiplied by Fi units. 
  
  City 1 is the home city of Chef. He starts each trip from his home city. Before starting a trip, he chooses a parameter R which denotes that he will start from city 1, and go to city 1 + R, then to 1 + 2 * R, then to 1 + 3 * R, till 1 + i * R such that i is largest integer satisfying 1 + i * R â‰¤ N.
  
  Now, Chef wants you to help him recreate his visit of the cities. Specifically, he will ask you Q queries, each of which can be of following two types.
  
  - 1 p f : friendliness of p-th city changes to f, i.e. Fp = f 
  - 2 R   : Find out the total enjoyment Chef will have during this trip. As Chef does not like big numbers, he just asks you to output two things, first digit of the enjoyment and value of enjoyment modulo 10^9 + 7.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn count_type2_queries(queries: Seq<Vec<usize>>) -> nat
      decreases queries.len()
  {
      if queries.len() == 0 {
          0
      } else {
          let first_query = queries[0];
          let rest_count = count_type2_queries(queries.skip(1));
          if first_query.len() >= 1 && first_query[0] == 2 {
              rest_count + 1
          } else {
              rest_count
          }
      }
  }

  fn solve_chef_cities(n: usize, friendliness: Vec<usize>, queries: Vec<Vec<usize>>) -> (result: Vec<(usize, usize)>)
      requires 
          0 < n && n <= 100000,
          friendliness.len() == n,
          forall|i: int| 0 <= i < friendliness.len() ==> 0 < friendliness[i] && friendliness[i] <= 1000000000,
          forall|i: int| 0 <= i < queries.len() ==> (
              (queries[i].len() == 3 && queries[i][0] == 1 && 1 <= queries[i][1] && queries[i][1] <= n && 1 <= queries[i][2] && queries[i][2] <= 1000000000) ||
              (queries[i].len() == 2 && queries[i][0] == 2 && 1 <= queries[i][1] && queries[i][1] <= n)
          ),
      ensures
          result.len() == count_type2_queries(queries@),
          forall|i: int| 0 <= i < result.len() ==> (
              1 <= result[i].0 && result[i].0 <= 9 && 
              result[i].1 < 1000000007
          ),

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}