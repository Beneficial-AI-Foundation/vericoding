vc-description: |-
  A subarray A[i], A[i+1], ..., A[j] of A is said to be turbulent if and only if:

  For i <= k < j, A[k] > A[k+1] when k is odd, and A[k] < A[k+1] when k is even;
  OR, for i <= k < j, A[k] > A[k+1] when k is even, and A[k] < A[k+1] when k is odd.

  That is, the subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.
  Return the length of a maximum size turbulent subarray of A.

  Example 1:
  Input: [9,4,2,10,7,8,8,1,9]
  Output: 5
  Explanation: (A[1] > A[2] < A[3] > A[4] < A[5])

  Example 2:
  Input: [4,8,12,16]
  Output: 2

  Example 3:
  Input: [100]
  Output: 1

  Note:

  1 <= A.length <= 40000
  0 <= A[i] <= 10^9
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  fn max_turbulence_size(arr: Vec<i32>) -> (result: nat)
      requires arr.len() >= 1,
      ensures 
          1 <= result <= arr.len(),
          result >= 1,
          result <= arr.len(),
vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {
      // let test1 = vec![9, 4, 2, 10, 7, 8, 8, 1, 9];
      // assert(max_turbulence_size(test1) == 5);
      // 
      // let test2 = vec![4, 8, 12, 16];
      // assert(max_turbulence_size(test2) == 2);
      // 
      // let test3 = vec![100];
      // assert(max_turbulence_size(test3) == 1);
  }