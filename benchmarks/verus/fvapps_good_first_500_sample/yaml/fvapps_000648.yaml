vc-description: |-
  Diana is planning to make a very long journey. Her journey consists of N bus routes, numbered from 1 to N in the order she must take them. The buses themselves are very fast but do not run often. The i-th bus route only runs every Xi days.

  More specifically, she can only take the i-th bus on day Xi, 2Xi, 3Xi, and so on. Since the buses are very fast, she can take multiple buses on the same day.

  Diana must finish her journey by day D, but she would like to start the journey as late as possible. What is the latest day she could take the first bus, and still finish her journey by day D?
  It is guaranteed that it is possible for Diana to finish her journey by day D.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn solve_latest_bus(n: usize, d: usize, buses: Vec<usize>) -> (result: usize)
      requires 
          n > 0,
          d > 0,
          buses.len() == n,
          forall|i: int| 0 <= i < buses.len() ==> buses[i] > 0 && buses[i] <= d,
      ensures 
          result <= d,
          result > 0,

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {
      // let result1 = solve_latest_bus(3, 10, vec![3, 7, 2]);
      // println!("{}", result1); // Should print 6
      
      // let result2 = solve_latest_bus(4, 100, vec![11, 10, 5, 50]);
      // println!("{}", result2); // Should print 99
      
      // let result3 = solve_latest_bus(1, 1, vec![1]);
      // println!("{}", result3); // Should print 1
  }