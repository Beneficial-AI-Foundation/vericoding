vc-description: |-
  Some people will make friend requests. The list of their ages is given and ages[i] is the age of the ith person. 
  Person A will NOT friend request person B (B != A) if any of the following conditions are true:

  age[B] <= 0.5 * age[A] + 7
  age[B] > age[A]
  age[B] > 100 && age[A] < 100

  Otherwise, A will friend request B.
  Note that if A requests B, B does not necessarily request A.  Also, people will not friend request themselves.
  How many total friend requests are made?
  Example 1:
  Input: [16,16]
  Output: 2
  Explanation: 2 people friend request each other.

  Example 2:
  Input: [16,17,18]
  Output: 2
  Explanation: Friend requests are made 17 -> 16, 18 -> 17.
  Example 3:
  Input: [20,30,100,110,120]
  Output: 3
  Explanation: Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100.

  Notes:

  1 <= ages.length <= 20000.
  1 <= ages[i] <= 120.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn will_friend_request(age_a: nat, age_b: nat) -> bool {
      age_a != age_b &&
      !(age_b <= (age_a / 2) + 7) &&
      !(age_b > age_a) &&
      !(age_b > 100 && age_a < 100)
  }

  fn num_friend_requests(ages: Vec<nat>) -> (result: nat)
      requires 
          ages.len() >= 1,
          ages.len() <= 20000,
          forall|i: int| #[trigger] ages[i] == ages[i] && 0 <= i < ages.len() ==> 1 <= ages[i] <= 120,
      ensures 
          result >= 0,

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {
      // println!("{}", num_friend_requests(vec![16, 16]));
      // println!("{}", num_friend_requests(vec![16, 17, 18]));  
      // println!("{}", num_friend_requests(vec![20, 30, 100, 110, 120]));
  }