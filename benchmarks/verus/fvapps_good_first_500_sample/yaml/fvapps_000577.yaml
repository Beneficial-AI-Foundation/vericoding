vc-description: |-
  Mathison recently inherited an ancient papyrus that contained some text. Unfortunately, the text was not a
  pangram. Now, Mathison has a particular liking for holoalphabetic strings and the text bothers him. The good news is that Mathison can buy letters from the local store in order to turn his text into a pangram.

  However, each letter has a price and Mathison is not very rich. Can you help Mathison find the cheapest way to obtain a pangram?

  -----Input-----
  The first line of the input file will contain one integer, T, representing the number of tests.
  Each test will be formed from two lines. The first one contains 26 space-separated integers, representing the prices of all letters.
  The second will contain Mathison's initial text (a string of N lowercase letters).

  -----Output-----
  The output file will contain T lines, one for each test. Each line will contain the answer for the corresponding test.

  -----Constraints and notes-----
  - 1 ≤ T ≤ 10
  - 1 ≤ N ≤ 50,000
  - All prices are natural numbers between 1 and 1,000,000 (i.e. 106).
  - A pangram is a string that contains every letter of the Latin alphabet at least once.
  - All purchased letters are added to the end of the string.

  -----Subtaks-----
  Subtask #1 (30 points):

  - N = 1

  Subtask #2 (70 points):

  - Original constraints

  -----Example-----
  Input:
  2
  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
  abcdefghijklmopqrstuvwz
  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
  thequickbrownfoxjumpsoverthelazydog

  Output:
  63
  0

  -----Explanation-----
  First test
  There are three letters missing from the original string: n (price 14), x (price 24), and y (price 25).
  Therefore the answer is 14 + 24 + 25 = 63.

  Second test
  No letter is missing so there is no point in buying something. The answer is 0.
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  spec fn sum_list(prices: Seq<nat>) -> nat 
      decreases prices.len()
  {
      if prices.len() == 0 {
          0
      } else {
          prices[0] + sum_list(prices.skip(1))
      }
  }

  fn get_pangram_cost(prices: Vec<nat>, text: Vec<u8>) -> (result: nat)
      requires prices.len() == 26,
      ensures 
          result >= 0,
          text.len() == 0 ==> result == sum_list(prices@)
vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }
vc-postamble: |-
  
  }
  fn main() {
      // Apps difficulty: interview
      // Assurance level: guarded_and_plausible

      // Test cases would go here but are commented out for verification
      // let prices1 = vec![1nat, 2nat, 3nat, 4nat, 5nat, 6nat, 7nat, 8nat, 9nat, 10nat, 11nat, 12nat, 13nat, 14nat, 15nat, 16nat, 17nat, 18nat, 19nat, 20nat, 21nat, 22nat, 23nat, 24nat, 25nat, 26nat];
      // let result1 = get_pangram_cost(prices1, "abcdefghijklmopqrstuvwz".as_bytes().to_vec());
      // println!("{}", result1); // Expected: 63
      
      // let prices2 = vec![1nat, 2nat, 3nat, 4nat, 5nat, 6nat, 7nat, 8nat, 9nat, 10nat, 11nat, 12nat, 13nat, 14nat, 15nat, 16nat, 17nat, 18nat, 19nat, 20nat, 21nat, 22nat, 23nat, 24nat, 25nat, 26nat];
      // let result2 = get_pangram_cost(prices2, "thequickbrownfoxjumpsoverthelazydog".as_bytes().to_vec());
      // println!("{}", result2); // Expected: 0
      
      // let prices3 = vec![1nat; 26];
      // let result3 = get_pangram_cost(prices3, "a".as_bytes().to_vec());
      // println!("{}", result3); // Expected: 25
  }