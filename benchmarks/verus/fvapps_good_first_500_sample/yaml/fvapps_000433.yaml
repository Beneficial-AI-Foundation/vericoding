vc-description: |-
  There are n soldiers standing in a line. Each soldier is assigned a unique rating value.
  You have to form a team of 3 soldiers amongst them under the following rules:

  Choose 3 soldiers with index (i, j, k) with rating (rating[i], rating[j], rating[k]).
  A team is valid if:  (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]) where (0 <= i < j < k < n).

  Return the number of teams you can form given the conditions. (soldiers can be part of multiple teams).

  Example 1:
  Input: rating = [2,5,3,4,1]
  Output: 3
  Explanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1). 

  Example 2:
  Input: rating = [2,1,3]
  Output: 0
  Explanation: We can't form any team given the conditions.

  Example 3:
  Input: rating = [1,2,3,4]
  Output: 4

  Constraints:

  n == rating.length
  1 <= n <= 200
  1 <= rating[i] <= 10^5

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn num_teams(rating: Vec<i32>) -> (result: usize)
      ensures 
          result >= 0,
          rating.len() < 3 ==> result == 0,
          (forall|x: i32, y: i32| #[trigger] rating@.contains(x) && #[trigger] rating@.contains(y) ==> x == y) ==> result == 0,

vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {
      // Apps difficulty: interview
      // Assurance level: unguarded

      // println!("{}", num_teams(vec![2, 5, 3, 4, 1])); // Expected: 3
      // println!("{}", num_teams(vec![2, 1, 3])); // Expected: 0  
      // println!("{}", num_teams(vec![1, 2, 3, 4])); // Expected: 4
  }