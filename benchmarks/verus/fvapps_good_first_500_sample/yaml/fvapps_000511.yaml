vc-description: |-
  Maheshmati and Sangu are playing a game. First, Maheshmati gives Sangu a sequence of N distinct integers a_1, a_2, ..., a_N (not necessarily sorted) and an integer K. Sangu has to create all subsequences of this sequence with length K. For each subsequence, he has to write down the product of K-2 integers: all elements of this subsequence except the minimum and maximum element.
  Sangu wins the game if he is able to write down all these numbers and tell Maheshmati their product (modulo 10^9+7, since it can be very large). However, Sangu is a very lazy child and thus wants you to help him win this game. Compute the number Sangu should tell Maheshmati!
  
  Input:
  - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.
  - The first line of each test case contains two space-separated integers N and K.
  - The second line contains N space-separated integers a_1, a_2, ..., a_N.
  
  Output:
  For each test case, print a single line containing one integer — the product of all numbers written down by Sangu modulo 10^9+7.
  
  Constraints:
  - 1 ≤ T ≤ 10
  - 3 ≤ N ≤ 5,000
  - 3 ≤ K ≤ N
  - 1 ≤ a_i ≤ 10,000 for each valid i
  - the numbers a_1, a_2, ..., a_N are pairwise distinct
  
  Example Input:
  1
  4 3 
  1 2 3 4 
  
  Example Output:
  36
  
  Explanation:
  Example case 1: There are four possible subsequences:
  - [1, 2, 3] (Sangu should write down 2.)
  - [1, 3, 4] (Sangu should write down 3.)
  - [1, 2, 4] (Sangu should write down 2.)
  - [2, 3, 4] (Sangu should write down 3.)
  The required product is 2 * 3 * 2 * 3 = 36.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn solve_game(n: nat, k: nat, arr: Vec<nat>) -> (result: nat)
      requires 
          n > 0,
          k > 0,
          k <= n,
          arr.len() == n,
          forall|i: int| 0 <= i < arr.len() ==> arr[i] > 0 && arr[i] <= 1000,
      ensures
          result < 1000000007,

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}