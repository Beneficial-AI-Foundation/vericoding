vc-description: |-
  A chef has collected data on the satisfaction level of his n dishes. Chef can cook any dish in 1 unit of time.
  Like-time coefficient of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level  i.e.  time[i]*satisfaction[i]
  Return the maximum sum of Like-time coefficient that the chef can obtain after dishes preparation.
  Dishes can be prepared in any order and the chef can discard some dishes to get this maximum value.

  Example 1:
  Input: satisfaction = [-1,-8,0,5,-9]
  Output: 14
  Explanation: After Removing the second and last dish, the maximum total Like-time coefficient will be equal to (-1*1 + 0*2 + 5*3 = 14). Each dish is prepared in one unit of time.
  Example 2:
  Input: satisfaction = [4,3,2]
  Output: 20
  Explanation: Dishes can be prepared in any order, (2*1 + 3*2 + 4*3 = 20)

  Example 3:
  Input: satisfaction = [-1,-4,-5]
  Output: 0
  Explanation: People don't like the dishes. No dish is prepared.

  Example 4:
  Input: satisfaction = [-2,5,-1,0,3,-3]
  Output: 35

  Constraints:

  n == satisfaction.length
  1 <= n <= 500
  -10^3 <= satisfaction[i] <= 10^3
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  fn max_satisfaction(satisfaction: Vec<i32>) -> (result: i32)
      ensures
          result >= 0,
          satisfaction@ == Seq::<i32>::empty() ==> result == 0,
          satisfaction@.len() == 1 && satisfaction@[0] == 0 ==> result == 0,
          satisfaction@.len() == 1 && satisfaction@[0] == 1 ==> result == 1,
          satisfaction@.len() == 1 && satisfaction@[0] == -1 ==> result == 0
vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }
vc-postamble: |-
  /* Apps difficulty: interview
     Assurance level: guarded_and_plausible */

  }

  fn main() {
      // let result1 = max_satisfaction(vec![-1, -8, 0, 5, -9]);
      // println!("Result 1: {}", result1); // Expected: 14

      // let result2 = max_satisfaction(vec![4, 3, 2]);
      // println!("Result 2: {}", result2); // Expected: 20

      // let result3 = max_satisfaction(vec![-2, 5, -1, 0, 3, -3]);
      // println!("Result 3: {}", result3); // Expected: 35
  }