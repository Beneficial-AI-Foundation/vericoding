vc-description: |-
  Given a positive integer n and you can do operations as follow:

  If n is even, replace n with n/2.
  If n is odd, you can replace n with either n + 1 or n - 1.

  What is the minimum number of replacements needed for n to become 1?

  Example 1:

  Input:
  8

  Output:
  3

  Explanation:
  8 -> 4 -> 2 -> 1

  Example 2:

  Input:
  7

  Output:
  4

  Explanation:
  7 -> 8 -> 4 -> 2 -> 1
  or
  7 -> 6 -> 3 -> 2 -> 1

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn integer_replacement(n: u32) -> (result: u32)
      requires n > 0
      ensures 
          result >= 0,
          n == 1 ==> result == 0,
          n == 2 ==> result == 1

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {
      // Apps difficulty: interview
      // Assurance level: guarded_and_plausible

      // println!("{}", integer_replacement(8)); // Should output 3
      // println!("{}", integer_replacement(7)); // Should output 4
      // println!("{}", integer_replacement(3)); // Should output 2
  }