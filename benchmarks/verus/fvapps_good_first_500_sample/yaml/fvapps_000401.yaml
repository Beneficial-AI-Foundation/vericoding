vc-description: |-
  Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.

  Note:

         The same word in the dictionary may be reused multiple times in the segmentation.
         You may assume the dictionary does not contain duplicate words.

  Example 1:

  Input: s = "leetcode", wordDict = ["leet", "code"]
  Output: true
  Explanation: Return true because "leetcode" can be segmented as "leet code".

  Example 2:

  Input: s = "applepenapple", wordDict = ["apple", "pen"]
  Output: true
  Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
               Note that you are allowed to reuse a dictionary word.

  Example 3:

  Input: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
  Output: false
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-
  spec fn join_words_spec(words: Seq<Seq<char>>) -> Seq<char>
      decreases words.len()
  {
      if words.len() == 0 {
          seq![]
      } else {
          words[0] + join_words_spec(words.skip(1))
      }
  }

  spec fn join_words(words: Seq<Seq<char>>) -> Seq<char> {
      join_words_spec(words)
  }
vc-spec: |-
  fn word_break(s: String, dict: Vec<String>) -> (result: bool)
      ensures 
          (dict.len() == 0 && s@.len() > 0) ==> result == false,
          s@.len() == 0 ==> result == true
vc-code: |-
  {
      // impl-start
      assume(false);
      false
      // impl-end
  }
vc-postamble: |-
  /* Apps difficulty: interview */
  /* Assurance level: unguarded */

  fn main() {
      // let result1 = word_break("leetcode".to_string(), vec!["leet".to_string(), "code".to_string()]);
      // println!("Result 1: {}", result1); // Should be true
      
      // let result2 = word_break("applepenapple".to_string(), vec!["apple".to_string(), "pen".to_string()]);
      // println!("Result 2: {}", result2); // Should be true
      
      // let result3 = word_break("catsandog".to_string(), vec!["cats".to_string(), "dog".to_string(), "sand".to_string(), "and".to_string(), "cat".to_string()]);
      // println!("Result 3: {}", result3); // Should be false
  }

  }