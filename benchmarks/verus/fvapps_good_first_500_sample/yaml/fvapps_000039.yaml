vc-description: |-
  After a long party Petya decided to return home, but he turned out to be at the opposite end of the town from his home. There are n crossroads in the line in the town, and there is either the bus or the tram station at each crossroad.

  The crossroads are represented as a string s of length n, where s_i = A, if there is a bus station at i-th crossroad, and s_i = B, if there is a tram station at i-th crossroad. Currently Petya is at the first crossroad (which corresponds to s_1) and his goal is to get to the last crossroad (which corresponds to s_n).

  If for two crossroads i and j for all crossroads i, i+1, ..., j-1 there is a bus station, one can pay a roubles for the bus ticket, and go from i-th crossroad to the j-th crossroad by the bus (it is not necessary to have a bus station at the j-th crossroad). Formally, paying a roubles Petya can go from i to j if s_t = A for all i ≤ t < j.

  If for two crossroads i and j for all crossroads i, i+1, ..., j-1 there is a tram station, one can pay b roubles for the tram ticket, and go from i-th crossroad to the j-th crossroad by the tram (it is not necessary to have a tram station at the j-th crossroad). Formally, paying b roubles Petya can go from i to j if s_t = B for all i ≤ t < j.

  Now Petya is at the first crossroad, and he wants to get to the n-th crossroad. After the party he has left with p roubles. He's decided to go to some station on foot, and then go to home using only public transport.

  Help him to choose the closest crossroad i to go on foot the first, so he has enough money to get from the i-th crossroad to the n-th, using only tram and bus tickets.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn find_min_start_point(cost1: u32, cost2: u32, cost3: u32, str: Vec<char>) -> (result: u32)
      requires 
          cost1 > 0,
          cost2 > 0,
          cost3 > 0,
          str.len() >= 1,
      ensures 
          result >= 1,
          result <= str.len() as u32,

vc-code: |-
  {
      // impl-start
      assume(false);
      1
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {
      // let str1: Vec<char> = "BB".chars().collect();
      // let result1 = find_min_start_point(2, 2, 1, str1);
      // println!("{}", result1);
      
      // let str2: Vec<char> = "AB".chars().collect();
      // let result2 = find_min_start_point(1, 1, 1, str2);
      // println!("{}", result2);
      
      // let str3: Vec<char> = "AABBBBAABB".chars().collect();
      // let result3 = find_min_start_point(3, 2, 8, str3);
      // println!("{}", result3);
  }