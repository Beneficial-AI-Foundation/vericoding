vc-description: |-
  Flattens a 2D matrix into a 1D vector in row-major order.
vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  /* Matrix type definition - 2D array represented as vector of vectors */
  pub struct Matrix {
      pub data: Vec<Vec<i32>>,
      pub rows: usize,
      pub cols: usize,
  }

  impl Matrix {
      pub open spec fn size(&self) -> nat {
          (self.rows * self.cols) as nat
      }

      pub open spec fn valid(&self) -> bool {
          &&& self.data.len() == self.rows
          &&& forall|i: int| 0 <= i < self.rows ==> self.data[i].len() == self.cols
      }

      pub open spec fn get(&self, i: usize, j: usize) -> i32 
          recommends self.valid() && i < self.rows && j < self.cols
      {
          self.data[i as int][j as int]
      }
  }
vc-helpers: |-

vc-spec: |-
  fn flatten2(mat: &Matrix) -> (ret: Vec<i32>)
      requires 
          mat.rows > 0,
          mat.cols > 0,
          mat.valid(),
      ensures
          ret.len() == mat.rows * mat.cols,
          forall|i: int, j: int| 
              0 <= i < mat.rows && 0 <= j < mat.cols ==> 
              #[trigger] ret[(i * (mat.cols as int) + j) as int] == mat.get(i as usize, j as usize),
vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {}