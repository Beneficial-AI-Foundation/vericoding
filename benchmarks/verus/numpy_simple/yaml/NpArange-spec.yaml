vc-description: |-

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  spec fn arange_length(start: int, stop: int, step: int) -> nat
  {
      if step != 0 {
          if step < 0 {
              if start > stop {
                  ((start - stop) / (-step)) as nat
              } else {
                  0
              }
          } else {
              if start < stop {
                  ((stop - start) / step) as nat
              } else {
                  0
              }
          }
      } else {
          0
      }
  }

  fn arange(start: int, stop: int, step: int) -> (result: Vec<int>)
      requires 
          step != 0,
          if step < 0 { start > stop } else { start < stop },
      ensures
          result.len() == arange_length(start, stop, step),
          result.len() > 0,
          result[0] == start

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}