vc-description: |-

vc-preamble: |-
  use vstd::prelude::*;
  use vstd::arithmetic::power2::pow2;

  verus! {
  spec fn shift_right_int(x: int, n: nat) -> int {
      if x >= 0 {
          x / (pow2(n) as int)
      } else {
          -((((-x) - 1) / (pow2(n) as int)) + 1)
      }
  }

vc-helpers: |

vc-spec: |-
  fn right_shift(a: Vec<i8>, b: Vec<u8>) -> (result: Vec<i8>)
      requires 
          a@.len() == b@.len(),
          forall|i: int| 0 <= i < b@.len() ==> b@[i] as nat < 64,
      ensures 
          result@.len() == a@.len(),
          forall|i: int| 0 <= i < result@.len() ==> 
              result@[i] as int == shift_right_int(a@[i] as int, b@[i] as nat),

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |2-

  }
  fn main() {}