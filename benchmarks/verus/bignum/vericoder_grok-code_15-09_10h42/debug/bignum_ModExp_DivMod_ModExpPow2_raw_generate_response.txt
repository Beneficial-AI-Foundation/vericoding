=== Raw LLM Generate Response ===
Length: 1502 characters
--------------------------------------------------------------------------------
["exec fn str2nat(s: Seq<char>) -> (r: nat)\n    requires ValidBitString(s)\n    ensures r == Str2Int(s)\n    decreases s.len()\n{\n    if s.len() == 0 {\n        0\n    } else {\n        let sub_s = s.subrange(0, s.len() as int - 1);\n        let rec = str2nat(sub_s);\n        let bit = s.index(s.len() as int - 1);\n        2 * rec + if bit == '1' { 1nat } else { 0nat }\n    }\n}\n\nexec fn nat2str(n: nat) -> (s: Seq<char>)\n    requires true\n    ensures ValidBitString(s), Str2Int(s) == n\n    decreases n\n{\n    if n == 0 {\n        let s = Seq::<char>::empty();\n        s\n    } else {\n        let quot = n / 2;\n        let rem = n % 2;\n        let char = if rem == 0 { '0' } else { '1' };\n        let sub = nat2str(quot);\n        sub.push(char)\n    }\n}\n\nexec fn pow_mod(x: nat, y: nat, m: nat) -> (res: nat)\n    requires m > 1\n    ensures res == Exp_int(x, y) % m\n    decreases y\n{\n    if y == 0 {\n        1 % m\n    } else {\n        let half_pow = pow_mod(x, y / 2, m);\n        let temp = (half_pow * half_pow) % m;\n        if y % 2 == 1 {\n            (temp * (x % m)) % m\n        } else {\n            temp\n        }\n    }\n}", "{\n    let x = str2nat(sx@);\n    let y = str2nat(sy@);\n    let z = str2nat(sz@);\n    let r = pow_mod(x, y, z);\n    let seq_s = nat2str(r);\n    let mut v = Vec::<char>::new();\n    let mut i = 0usize;\n    while i < seq_s.len()\n        invariant i <= seq_s.len()\n    {\n        v.push(seq_s[i]);\n        i += 1;\n    }\n    v\n}"]
--------------------------------------------------------------------------------
