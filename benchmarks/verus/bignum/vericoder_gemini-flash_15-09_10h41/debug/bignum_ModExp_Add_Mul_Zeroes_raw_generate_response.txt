=== Raw LLM Generate Response ===
Length: 1294 characters
--------------------------------------------------------------------------------
["spec fn modular_exponentiation_recursive(base: nat, exp: nat, modulus: nat) -> nat\ndecreases exp\n{\n    if exp == 0 { 1 }\n    else if exp % 2 == 0 {\n        let half_exp = modular_exponentiation_recursive(base, exp / 2, modulus);\n        (half_exp * half_exp) % modulus\n    }\n    else {\n        (base * modular_exponentiation_recursive(base, exp - 1, modulus)) % modulus\n    }\n}", "{\n    let x_int = Str2Int(sx@);\n    let y_int = Str2Int(sy@);\n    let z_int = Str2Int(sz@);\n\n    let result_nat = modular_exponentiation_recursive(x_int, y_int, z_int);\n\n    let mut result_vec: Vec<char> = Vec::new();\n    \n    if result_nat == 0 {\n        result_vec.push('0');\n        return result_vec;\n    }\n\n    let mut temp_val = result_nat;\n    while temp_val > 0\n        invariant\n            temp_val >= 0,\n            result_vec@.len() >= 0,\n            // Proof relies on properties of division and modulo which are hard to express simply\n            // ensures the digits are being built correctly in reverse\n    {\n        let digit = temp_val % 2;\n        if digit == 1 {\n            result_vec.push('1');\n        } else {\n            result_vec.push('0');\n        }\n        temp_val = temp_val / 2;\n    }\n    \n    result_vec.reverse();\n    result_vec\n}"]
--------------------------------------------------------------------------------
