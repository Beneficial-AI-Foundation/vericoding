=== LLM Response - generate_code - Iteration 0 ===
File: benchmarks/verus/bignum/files/bignum_ModExpPow2.rs
Prompt Hash: 1b857e07
JSON Parsed Successfully: True
Timestamp: 1757925764.287175
Content Length: 2610 chars
--------------------------------------------------------------------------------
["spec fn get_power(sy: Seq<char>) -> nat {\n  if sy.index(0) == '1' { Exp_int(2, (sy.len() - 1) as nat) } else { 0 }\n}", "{\n  let sx_int = Str2Int(sx@);\n  let sz_int = Str2Int(sz@);\n  let sy_seq = sy@;\n\n  if n == 0 {\n    assert(sy_seq.len() == 1);\n    assert(sy_seq.index(0) == '0' || sy_seq.index(0) == '1');\n\n    if Str2Int(sy_seq) == 0 && !sz_int.is_zero() {\n      let mut v = Vec::<char>::new();\n      v.push('1');\n      return v;\n    } else {\n      // For sy = 1 (2^0), the calculation is (sx % sz)\n      let rem = sx_int % sz_int;\n      let mut s = Seq::<char>::new();\n      let mut temp_rem = rem;\n      if temp_rem == 0 {\n        s = s.push('0');\n      } else {\n        while temp_rem > 0 {\n          if temp_rem % 2 == 1 {\n            s = s.push('1');\n          } else {\n            s = s.push('0');\n          }\n          temp_rem = temp_rem / 2;\n        }\n      }\n      let mut v = Vec::<char>::new();\n      let mut i = s.len() as int - 1;\n      while i >= 0 \n        invariant\n          0 <= i + 1 && i + 1 <= s.len() as int,\n          v.len() + i + 1 == s.len() as int,\n          forall |j: int| 0 <= j && j < v.len() ==> v@[j] == s@[s.len() as int - 1 -j],\n      {\n        v.push(s@[i]);\n        i = i - 1;\n      }\n      return v;\n    }\n  }\n\n  let k = n as nat - 1;\n  let sy_prime: Seq<char> = sy_seq.subrange(1, sy_seq.len() as int);\n  let sy_prime_vec: Vec<char> = sy_prime.to_vec();\n\n  let res_k = ModExpPow2(sx, sy_prime_vec.as_slice(), k as int, sz);\n  let res_k_int = Str2Int(res_k@);\n\n  let s_int_val = get_power(sy_seq);\n  let mut final_int_val: nat = 0;\n\n  if s_int_val == 0 {\n    final_int_val = res_k_int % sz_int;\n  } else if s_int_val == Exp_int(2, n as nat) {\n    final_int_val = (res_k_int * res_k_int) % sz_int;\n  }\n\n  let mut s = Seq::<char>::new();\n  let mut temp_final_int = final_int_val;\n  if temp_final_int == 0 {\n    s = s.push('0');\n  } else {\n    while temp_final_int > 0 \n      invariant\n        final_int_val == (temp_final_int * Exp_int(2, s.len() as nat)) + Str2Int(s.reverse()),\n    {\n      if temp_final_int % 2 == 1 {\n        s = s.push('1');\n      } else {\n        s = s.push('0');\n      }\n      temp_final_int = temp_final_int / 2;\n    }\n  }\n  \n  let mut v = Vec::<char>::new();\n  let mut i = s.len() as int - 1;\n  while i >= 0 \n    invariant\n      0 <= i + 1 && i + 1 <= s.len() as int,\n      v.len() + i + 1 == s.len() as int,\n      forall |j: int| 0 <= j && j < v.len() ==> v@[j] == s@[s.len() as int - 1 -j],\n  {\n    v.push(s@[i]);\n    i = i - 1;\n  }\n  return v;\n}"]
--------------------------------------------------------------------------------
