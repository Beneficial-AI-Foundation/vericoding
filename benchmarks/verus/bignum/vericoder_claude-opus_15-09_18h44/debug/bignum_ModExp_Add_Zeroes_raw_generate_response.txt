=== Raw LLM Generate Response ===
Length: 2997 characters
--------------------------------------------------------------------------------
["proof fn pow_mod_mul(a: nat, b: nat, c: nat, m: nat)\n    requires m > 1\n    ensures (a * b) % m == ((a % m) * (b % m)) % m\n{\n}\n\nproof fn pow_mod_square(a: nat, m: nat)\n    requires m > 1\n    ensures (a * a) % m == ((a % m) * (a % m)) % m\n{\n}\n\nproof fn exp_split(x: nat, y: nat)\n    requires y > 0\n    ensures Exp_int(x, y) == x * Exp_int(x, (y - 1) as nat)\n{\n}\n\nproof fn exp_even(x: nat, y: nat)\n    requires y > 0, y % 2 == 0\n    ensures Exp_int(x, y) == Exp_int(x * x, y / 2)\n    decreases y\n{\n    if y == 2 {\n        assert(Exp_int(x, 2) == x * x);\n        assert(Exp_int(x * x, 1) == x * x);\n    } else {\n        let half = y / 2;\n        assert(y == 2 * half);\n        exp_even(x, y - 2);\n    }\n}\n\nexec fn compute_mod(a: nat, m: nat) -> (res: nat)\n    requires m > 0\n    ensures res == a % m, res < m\n{\n    (a % m) as nat\n}\n\nexec fn str_to_nat(s: &[char]) -> (res: nat)\n    requires ValidBitString(s@)\n    ensures res == Str2Int(s@)\n    decreases s@.len()\n{\n    if s.len() == 0 {\n        0nat\n    } else {\n        let prefix = &s[..s.len() - 1];\n        let last = s[s.len() - 1];\n        let prefix_val = str_to_nat(prefix);\n        2 * prefix_val + (if last == '1' { 1nat } else { 0nat })\n    }\n}\n\nexec fn nat_to_str(mut n: nat) -> (res: Vec<char>)\n    ensures ValidBitString(res@), Str2Int(res@) == n\n    decreases n\n{\n    let mut result = Vec::<char>::new();\n    if n == 0 {\n        result.push('0');\n        return result;\n    }\n    \n    while n > 0\n        invariant\n            ValidBitString(result@),\n            n + Str2Int(result@) == old(n),\n        decreases n\n    {\n        if n % 2 == 0 {\n            result.push('0');\n        } else {\n            result.push('1');\n        }\n        n = n / 2;\n    }\n    \n    result.reverse();\n    result\n}\n\nexec fn mod_exp_helper(base: nat, exp: nat, modulus: nat) -> (res: nat)\n    requires modulus > 1\n    ensures res == Exp_int(base, exp) % modulus\n    decreases exp\n{\n    if exp == 0 {\n        1nat\n    } else if exp == 1 {\n        compute_mod(base, modulus)\n    } else if exp % 2 == 0 {\n        proof { exp_even(base, exp); }\n        let half_exp = exp / 2;\n        let sqrt_res = mod_exp_helper(base, half_exp, modulus);\n        let squared = compute_mod(sqrt_res * sqrt_res, modulus);\n        proof { pow_mod_square(Exp_int(base, half_exp), modulus); }\n        squared\n    } else {\n        proof { exp_split(base, exp); }\n        let sub_res = mod_exp_helper(base, (exp - 1) as nat, modulus);\n        let result = compute_mod(base * sub_res, modulus);\n        proof { pow_mod_mul(base, Exp_int(base, (exp - 1) as nat), base * Exp_int(base, (exp - 1) as nat), modulus); }\n        result\n    }\n}", "{\n    let x_val = str_to_nat(sx);\n    let y_val = str_to_nat(sy);\n    let z_val = str_to_nat(sz);\n    \n    let result_val = mod_exp_helper(x_val, y_val, z_val);\n    let result = nat_to_str(result_val);\n    \n    result\n}"]
--------------------------------------------------------------------------------
