=== Raw LLM Generate Response ===
Length: 1633 characters
--------------------------------------------------------------------------------
["spec fn Int2Str(n: nat) -> Seq<char>\n  decreases n\n{\n  if n == 0 {\n    seq!['0']\n  } else if n == 1 {\n    seq!['1']\n  } else {\n    Int2Str(n / 2).push(if n % 2 == 0 { '0' } else { '1' })\n  }\n}\n\nproof fn lemma_str2int_int2str(n: nat)\n  ensures Int2Str(n).len() >= 1,\n          ValidBitString(Int2Str(n)),\n          Str2Int(Int2Str(n)) == n\n  decreases n\n{\n  if n == 0 {\n  } else if n == 1 {\n  } else {\n    lemma_str2int_int2str(n / 2);\n    let s = Int2Str(n / 2);\n    assert(Int2Str(n) == s.push(if n % 2 == 0 { '0' } else { '1' }));\n    assert(Str2Int(Int2Str(n)) == 2 * Str2Int(s) + (n % 2)) by {\n      let full = Int2Str(n);\n      assert(full.len() == s.len() + 1);\n      assert(full.subrange(0, full.len() as int - 1) == s);\n      assert(full.index(full.len() as int - 1) == (if n % 2 == 0 { '0' } else { '1' }));\n    }\n    assert(Str2Int(s) == n / 2);\n    assert(n == 2 * (n / 2) + n % 2);\n  }\n}\n\nexec fn add_binary(a: &[char], b: &[char]) -> Vec<char>\n  requires ValidBitString(a@), ValidBitString(b@)\n  ensures ValidBitString(result@), Str2Int(result@) == Str2Int(a@) + Str2Int(b@)\n{\n  let n1 = Str2Int(a@);\n  let n2 = Str2Int(b@);\n  let sum = n1 + n2;\n  proof {\n    lemma_str2int_int2str(sum);\n  }\n  let mut result = Vec::<char>::new();\n  let s = Int2Str(sum);\n  let mut i = 0;\n  while i < s.len()\n    invariant\n      0 <= i <= s.len(),\n      result@.len() == i,\n      forall |j: int| 0 <= j && j < i ==> result@[j] == s[j]\n  {\n    result.push(s[i as int]);\n    i = i + 1;\n  }\n  assert(result@ == s);\n  result\n}", "{\n  let result = add_binary(a, b);\n  result\n}"]
--------------------------------------------------------------------------------
