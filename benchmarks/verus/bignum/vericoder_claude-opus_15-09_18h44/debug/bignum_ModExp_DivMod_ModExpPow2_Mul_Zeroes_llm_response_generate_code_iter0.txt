=== LLM Response - generate_code - Iteration 0 ===
File: /Users/sergiu.bursuc/baif/vericoding/benchmarks/verus/bignum/files/bignum_ModExp_DivMod_ModExpPow2_Mul_Zeroes.rs
Prompt Hash: 66fb6206
JSON Parsed Successfully: True
Timestamp: 1757957243.721524
Content Length: 2557 chars
--------------------------------------------------------------------------------
["spec fn Exp_mod(base: nat, exp: nat, modulus: nat) -> nat\n    recommends modulus > 0\n    decreases exp\n{\n    if exp == 0 {\n        1 % modulus\n    } else {\n        let half = Exp_mod(base, exp / 2, modulus);\n        let square = (half * half) % modulus;\n        if exp % 2 == 0 {\n            square\n        } else {\n            (square * base) % modulus\n        }\n    }\n}\n\nproof fn exp_mod_correct(base: nat, exp: nat, modulus: nat)\n    requires modulus > 0\n    ensures Exp_mod(base, exp, modulus) == Exp_int(base, exp) % modulus\n    decreases exp\n{\n    if exp == 0 {\n    } else {\n        exp_mod_correct(base, exp / 2, modulus);\n        assert(Exp_int(base, exp) == if exp % 2 == 0 { Exp_int(base, exp / 2) * Exp_int(base, exp / 2) } else { Exp_int(base, exp / 2) * Exp_int(base, exp / 2) * base });\n    }\n}\n\nexec fn int_to_binary(mut n: u64) -> (res: Vec<char>)\n    ensures ValidBitString(res@),\n            Str2Int(res@) == n\n{\n    let mut result = Vec::new();\n    if n == 0 {\n        result.push('0');\n        return result;\n    }\n    while n > 0\n        invariant\n            ValidBitString(result@),\n            Str2Int(result@) + n * Exp_int(2, result.len() as nat) == old(n)\n    {\n        if n % 2 == 1 {\n            result.push('1');\n        } else {\n            result.push('0');\n        }\n        n = n / 2;\n    }\n    result\n}\n\nexec fn binary_to_int(s: &[char]) -> (res: u64)\n    requires ValidBitString(s@),\n             Str2Int(s@) < 0x10000000000000000\n    ensures res == Str2Int(s@)\n{\n    let mut result: u64 = 0;\n    let mut i: usize = 0;\n    while i < s.len()\n        invariant\n            0 <= i <= s.len(),\n            result == Str2Int(s@.subrange(0, i as int)),\n            result < 0x10000000000000000\n    {\n        result = result * 2;\n        if s[i] == '1' {\n            result = result + 1;\n        }\n        i = i + 1;\n    }\n    result\n}", "{\n    let x = binary_to_int(sx);\n    let y = binary_to_int(sy);\n    let z = binary_to_int(sz);\n    \n    let mut base = x % z;\n    let mut exp = y;\n    let mut result: u64 = 1;\n    \n    while exp > 0\n        invariant\n            result * Exp_int(base as nat, exp as nat) % z == Exp_int(x as nat, y as nat) % z,\n            z > 1\n    {\n        if exp % 2 == 1 {\n            result = (result * base) % z;\n        }\n        base = (base * base) % z;\n        exp = exp / 2;\n    }\n    \n    proof {\n        exp_mod_correct(x as nat, y as nat, z as nat);\n    }\n    \n    int_to_binary(result)\n}"]
--------------------------------------------------------------------------------
