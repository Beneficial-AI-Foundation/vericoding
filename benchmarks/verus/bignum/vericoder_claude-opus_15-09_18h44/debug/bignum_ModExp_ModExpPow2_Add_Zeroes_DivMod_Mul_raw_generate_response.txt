=== Raw LLM Generate Response ===
Length: 2340 characters
--------------------------------------------------------------------------------
["spec fn power_mod(base: nat, exp: nat, modulus: nat) -> nat\n    recommends modulus > 1\n    decreases exp\n{\n    if exp == 0 {\n        1 % modulus\n    } else {\n        let half = power_mod(base, exp / 2, modulus);\n        let half_squared = (half * half) % modulus;\n        if exp % 2 == 0 {\n            half_squared\n        } else {\n            (half_squared * base) % modulus\n        }\n    }\n}\n\nproof fn power_mod_correct(base: nat, exp: nat, modulus: nat)\n    requires modulus > 1\n    ensures power_mod(base, exp, modulus) == Exp_int(base, exp) % modulus\n    decreases exp\n{\n    if exp == 0 {\n    } else {\n        power_mod_correct(base, exp / 2, modulus);\n        if exp % 2 == 0 {\n            assert(Exp_int(base, exp) == Exp_int(base, exp / 2) * Exp_int(base, exp / 2));\n        } else {\n            assert(Exp_int(base, exp) == Exp_int(base, exp / 2) * Exp_int(base, exp / 2) * base);\n        }\n    }\n}\n\nexec fn int_to_bit_string(n: nat) -> (res: Vec<char>)\n    ensures ValidBitString(res@),\n            Str2Int(res@) == n\n{\n    let mut result = Vec::<char>::new();\n    let mut num = n;\n    \n    if num == 0 {\n        result.push('0');\n        return result;\n    }\n    \n    while num > 0\n        invariant\n            ValidBitString(result@),\n            Str2Int(result@) + num * Exp_int(2, result.len() as nat) == n,\n        decreases num\n    {\n        if num % 2 == 0 {\n            result.push('0');\n        } else {\n            result.push('1');\n        }\n        num = num / 2;\n    }\n    \n    result\n}\n\nexec fn compute_mod_exp(base: nat, exp: nat, modulus: nat) -> (res: nat)\n    requires modulus > 1\n    ensures res == power_mod(base, exp, modulus)\n    decreases exp\n{\n    if exp == 0 {\n        return 1 % modulus;\n    }\n    \n    let half = compute_mod_exp(base, exp / 2, modulus);\n    let half_squared = (half * half) % modulus;\n    \n    if exp % 2 == 0 {\n        half_squared\n    } else {\n        (half_squared * base) % modulus\n    }\n}", "{\n    let x_val = Str2Int(sx@);\n    let y_val = Str2Int(sy@);\n    let z_val = Str2Int(sz@);\n    \n    proof {\n        power_mod_correct(x_val, y_val, z_val);\n    }\n    \n    let result_val = compute_mod_exp(x_val, y_val, z_val);\n    let result = int_to_bit_string(result_val);\n    \n    result\n}"]
--------------------------------------------------------------------------------
