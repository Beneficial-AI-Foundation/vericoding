=== Raw LLM Fix Response - Iteration 5 ===
Length: 1878 characters
--------------------------------------------------------------------------------
["/* helper modified by LLM (iteration 6): Fixed missing decreases clause in while loop */\nproof fn lemma_exp_zero(x: nat)\n    ensures Exp_int(x, 0) == 1\n{\n}\n\nproof fn lemma_exp_succ(x: nat, y: nat)\n    ensures Exp_int(x, y + 1) == x * Exp_int(x, y)\n{\n}\n\nproof fn lemma_exp_mod(x: nat, y: nat, z: nat)\n    requires z > 0,\n            y > 0\n    ensures Exp_int(x, y) % z == ((x % z) * Exp_int(x, (y - 1) as nat)) % z\n{\n    // Base case handled by definition\n}\n\nexec fn int_to_binary(mut n: u64) -> (res: Vec<char>)\n    ensures ValidBitString(res@),\n            res@.len() > 0,\n            Str2Int(res@) == n as nat\n{\n    let mut result = Vec::new();\n    if n == 0 {\n        result.push('0');\n        assert(result@.len() == 1);\n        assert(result@[0] == '0');\n        assert(Str2Int(result@) == 0);\n        return result;\n    }\n    \n    let ghost old_n = n;\n    let ghost mut bits_collected = 0nat;\n    \n    while n > 0\n        invariant\n            ValidBitString(result@),\n            bits_collected == Str2Int(result@),\n            n as nat * Exp_int(2, result@.len() as nat) + bits_collected == old_n as nat,\n            old_n > 0 ==> (n > 0 || bits_collected > 0)\n        decreases n\n    {\n        let ghost old_bits = bits_collected;\n        let ghost old_len = result@.len();\n        \n        if n % 2 == 1 {\n            result.push('1');\n            proof {\n                bits_collected = old_bits + Exp_int(2, old_len as nat);\n            }\n        } else {\n            result.push('0');\n        }\n        n = n / 2;\n    }\n    \n    // Reverse the result to get proper bit order\n    let mut reversed = Vec::new();\n    let mut i = result.len();\n    while i > 0\n        invariant\n            0 <= i <= result.len(),\n            ValidBitString(reversed@),\n            reversed@.len() == result.len() - i\
--------------------------------------------------------------------------------
