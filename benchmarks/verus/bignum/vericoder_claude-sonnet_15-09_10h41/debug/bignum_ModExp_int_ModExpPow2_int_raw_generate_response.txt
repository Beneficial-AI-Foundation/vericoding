=== Raw LLM Generate Response ===
Length: 1623 characters
--------------------------------------------------------------------------------
[
"fn char_to_digit(c: char) -> nat\n    requires c == '0' || c == '1'\n    ensures c == '0' ==> char_to_digit(c) == 0,\n            c == '1' ==> char_to_digit(c) == 1\n{\n    if c == '1' { 1 } else { 0 }\n}\n\nfn digit_to_char(d: nat) -> char\n    requires d == 0 || d == 1\n    ensures d == 0 ==> digit_to_char(d) == '0',\n            d == 1 ==> digit_to_char(d) == '1'\n{\n    if d == 1 { '1' } else { '0' }\n}\n\nfn nat_to_bitstring(n: nat) -> Vec<char>\n    ensures ValidBitString(nat_to_bitstring(n)@),\n            Str2Int(nat_to_bitstring(n)@) == n\n{\n    if n == 0 {\n        vec!['0']\n    } else {\n        let mut result = Vec::new();\n        let mut temp = n;\n        while temp > 0\n            invariant ValidBitString(result@)\n        {\n            let bit = if temp % 2 == 1 { '1' } else { '0' };\n            result.push(bit);\n            temp = temp / 2;\n        }\n        result.reverse();\n        result\n    }\n}\n\nfn mod_exp_helper(base: nat, exp: nat, modulus: nat) -> nat\n    requires modulus > 1\n    ensures mod_exp_helper(base, exp, modulus) == Exp_int(base, exp) % modulus\n{\n    if exp == 0 {\n        1 % modulus\n    } else if exp % 2 == 0 {\n        let half_exp = mod_exp_helper(base, exp / 2, modulus);\n        (half_exp * half_exp) % modulus\n    } else {\n        (base * mod_exp_helper(base, exp - 1, modulus)) % modulus\n    }\n}",

"{\n    let base = Str2Int(sx@);\n    let exp = Str2Int(sy@);\n    let modulus = Str2Int(sz@);\n    \n    let result_nat = mod_exp_helper(base, exp, modulus);\n    let result_vec = nat_to_bitstring(result_nat);\n    \n    result_vec\n}"
]
--------------------------------------------------------------------------------
