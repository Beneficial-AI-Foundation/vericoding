=== Raw LLM Generate Response ===
Length: 1822 characters
--------------------------------------------------------------------------------
["exec fn add_bit_strings(s1: &[char], s2: &[char]) -> (res: Vec<char>)\n    requires\n        ValidBitString(s1@),\n        ValidBitString(s2@),\n    ensures\n        ValidBitString(res@),\n        Str2Int(res@) == Str2Int(s1@) + Str2Int(s2@),\n{\n    let mut result = Vec::new();\n    let mut carry = 0;\n    let mut i = s1.len();\n    let mut j = s2.len();\n    \n    while i > 0 || j > 0 || carry > 0\n        invariant\n            ValidBitString(result@),\n            carry <= 1,\n    {\n        let bit1 = if i > 0 { if s1[i-1] == '1' { 1 } else { 0 } } else { 0 };\n        let bit2 = if j > 0 { if s2[j-1] == '1' { 1 } else { 0 } } else { 0 };\n        let sum = bit1 + bit2 + carry;\n        result.push(if sum % 2 == 1 { '1' } else { '0' });\n        carry = sum / 2;\n        if i > 0 { i -= 1; }\n        if j > 0 { j -= 1; }\n    }\n    \n    result.reverse();\n    result\n}\n\nexec fn shift_left(s: &[char], positions: usize) -> (res: Vec<char>)\n    requires ValidBitString(s@)\n    ensures\n        ValidBitString(res@),\n        Str2Int(res@) == Str2Int(s@) * nat_pow(2, positions as nat),\n{\n    let mut result = Vec::new();\n    for i in 0..s.len() {\n        result.push(s[i]);\n    }\n    for _ in 0..positions {\n        result.push('0');\n    }\n    result\n}\n\nspec fn nat_pow(base: nat, exp: nat) -> nat\n    decreases exp\n{\n    if exp == 0 { 1 } else { base * nat_pow(base, exp - 1) }\n}", "{\n    if s1.len() == 0 || s2.len() == 0 {\n        return vec!['0'];\n    }\n    \n    let mut result = vec!['0'];\n    \n    for i in 0..s2.len()\n        invariant\n            ValidBitString(result@),\n    {\n        if s2[s2.len() - 1 - i] == '1' {\n            let shifted = shift_left(s1, i);\n            result = add_bit_strings(&result, &shifted);\n        }\n    }\n    \n    result\n}"]
--------------------------------------------------------------------------------
