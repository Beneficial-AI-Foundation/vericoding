=== Raw LLM Generate Response ===
Length: 2025 characters
--------------------------------------------------------------------------------
["spec fn pow_mod_helper(base: nat, exp: nat, modulus: nat) -> nat\n    requires modulus > 0\n    decreases exp\n{\n    if exp == 0 {\n        1 % modulus\n    } else if exp % 2 == 0 {\n        let half = pow_mod_helper(base, exp / 2, modulus);\n        (half * half) % modulus\n    } else {\n        (base * pow_mod_helper(base, exp - 1, modulus)) % modulus\n    }\n}\n\nspec fn char_to_digit(c: char) -> nat\n{\n    if c == '1' { 1 } else { 0 }\n}\n\nproof fn str2int_bounds(s: Seq<char>)\n    requires ValidBitString(s)\n    ensures Str2Int(s) < Exp_int(2, s.len())\n    decreases s.len()\n{\n    if s.len() == 0 {\n    } else {\n        str2int_bounds(s.subrange(0, s.len() as int - 1));\n    }\n}", "{\n    if sy.len() == 1 && sy[0] == '0' {\n        let mut result = Vec::new();\n        result.push('1');\n        return result;\n    }\n    \n    let base_val = Str2Int(sx@);\n    let exp_val = Str2Int(sy@);\n    let mod_val = Str2Int(sz@);\n    \n    let mut result_val = 1;\n    let mut base_curr = base_val % mod_val;\n    let mut exp_curr = exp_val;\n    \n    while exp_curr > 0\n        invariant\n            mod_val > 1,\n            result_val < mod_val,\n            base_curr < mod_val,\n            (result_val * Exp_int(base_curr, exp_curr)) % mod_val == Exp_int(base_val, exp_val) % mod_val\n        decreases exp_curr\n    {\n        if exp_curr % 2 == 1 {\n            result_val = (result_val * base_curr) % mod_val;\n        }\n        base_curr = (base_curr * base_curr) % mod_val;\n        exp_curr = exp_curr / 2;\n    }\n    \n    let mut result = Vec::new();\n    if result_val == 0 {\n        result.push('0');\n    } else {\n        let mut temp = result_val;\n        while temp > 0\n            invariant temp >= 0\n            decreases temp\n        {\n            if temp % 2 == 1 {\n                result.push('1');\n            } else {\n                result.push('0');\n            }\n            temp = temp / 2;\n        }\n        result.reverse();\n    }\n    \n    result\n}"]
--------------------------------------------------------------------------------
