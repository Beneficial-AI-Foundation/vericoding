=== Raw LLM Generate Response ===
Length: 1997 characters
--------------------------------------------------------------------------------
["\nproof fn lemma_exp_zero(x: nat)\n    ensures Exp_int(x, 0) == 1\n{\n}\n\nproof fn lemma_exp_rec(x: nat, y: nat)\n    requires y > 0\n    ensures Exp_int(x, y) == x * Exp_int(x, (y - 1) as nat)\n{\n}\n\nproof fn lemma_str2int_empty()\n    ensures Str2Int(Seq::empty()) == 0\n{\n}\n\nproof fn lemma_str2int_rec(s: Seq<char>)\n    requires ValidBitString(s), s.len() > 0\n    ensures Str2Int(s) == 2 * Str2Int(s.subrange(0, s.len() as int - 1)) + (if s.index(s.len() as int - 1) == '1' { 1nat } else { 0nat })\n{\n}\n\nproof fn lemma_mod_exp_property(x: nat, y: nat, m: nat)\n    requires m > 1\n    ensures Exp_int(x, y) % m == (x % m) * Exp_int(x, (y - 1) as nat) % m when y > 0\n{\n}\n", "{\n    let mut x_val = Str2Int(sx@);\n    let mut y_val = Str2Int(sy@);\n    let m = Str2Int(sz@);\n    let mut result = 1nat;\n    \n    proof {\n        lemma_exp_zero(x_val);\n    }\n    \n    let mut i = 0;\n    while i < sy@.len()\n        invariant\n            result == Exp_int(x_val % m, Str2Int(sy@.subrange(i, sy@.len() as int))),\n            ValidBitString(sy@.subrange(i, sy@.len() as int)),\n            i <= sy@.len()\n        decreases sy@.len() - i\n    {\n        let bit = sy@[i as int];\n        proof {\n            lemma_str2int_rec(sy@.subrange(i, sy@.len() as int));\n        }\n        \n        if bit == '1' {\n            result = (result * (x_val % m)) % m;\n        }\n        \n        x_val = (x_val * x_val) % m;\n        i += 1;\n    }\n    \n    let mut res_vec = Vec::new();\n    if result == 0 {\n        res_vec.push('0');\n    } else {\n        let mut temp = result;\n        while temp > 0\n            invariant\n                temp >= 0,\n                ValidBitString(res_vec@)\n            decreases temp\n        {\n            if temp % 2 == 0 {\n                res_vec.push('0');\n            } else {\n                res_vec.push('1');\n            }\n            temp = temp / 2;\n        }\n        res_vec.reverse();\n    }\n    \n    res_vec\n}"]
--------------------------------------------------------------------------------
