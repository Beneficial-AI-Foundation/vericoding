=== Raw LLM Generate Response ===
Length: 2204 characters
--------------------------------------------------------------------------------
["proof fn helper_lemma_1(s1: Seq<char>, s2: Seq<char>, res: Seq<char>) \n    ensures \n        ValidBitString(res) ==> Str2Int(res) == Str2Int(s1) + Str2Int(s2)\n  { }\n\nproof fn helper_lemma_2(x: nat, y: nat, z: nat, res: nat) \n    requires \n        z > 1, y > 0\n    ensures \n        res == Exp_int(x, y) % z\n  { }\n\nspec fn adjust_carry(c: int) -> int { if c == 1 { 1 } else { 0 } }", "{\n    let mut result = Vec::new();\n    let mut i = (s1.len() as int) - 1;\n    let mut j = (s2.len() as int) - 1;\n    let mut carry = 0;\n\n    while i >= 0 || j >= 0 || carry > 0\n        invariant\n            0 <= i, i < s1.len() as int,\n            0 <= j, j < s2.len() as int,\n            0 <= carry, carry <= 1,\n            ValidBitString(result@)\n    {\n        let d1 = if i >= 0 { if s1[i as usize] == '1' { 1 } else { 0 } } else { 0 };\n        let d2 = if j >= 0 { if s2[j as usize] == '1' { 1 } else { 0 } } else { 0 };\n        let sum = d1 + d2 + carry;\n        \n        if sum % 2 == 1 { result.push('1'); } else { result.push('0'); }\n        carry = sum / 2;\n        \n        if i >= 0 { i -= 1; }\n        if j >= 0 { j -= 1; }\n    }\n    \n    result.reverse();\n    result\n}", "{\n    let x = Str2Int(sx@);\n    let y = Str2Int(sy@);\n    let z = Str2Int(sz@);\n    \n    let base: nat = x % z;\n    let exp: nat = y;\n    let modulus: nat = z;\n    let mut result: nat = 1;\n    \n    while exp > 0\n        invariant\n            result == Exp_int(base, exp) % modulus\n    {\n        if exp % 2 == 1 {\n            result = (result * base) % modulus;\n        }\n        let new_base = (base * base) % modulus;\n        let new_exp = exp / 2;\n        base = new_base;\n        exp = new_exp;\n    }\n    \n    let mut res_vec = Vec::new();\n    let mut temp = result;\n    \n    while temp > 0\n        invariant\n            temp >= 0,\n            ValidBitString(res_vec@)\n    {\n        if temp % 2 == 0 {\n            res_vec.push('0');\n        } else {\n            res_vec.push('1');\n        }\n        temp = temp / 2;\n    }\n    \n    if res_vec.is_empty() {\n        res_vec.push('0');\n    } else {\n        res_vec.reverse();\n    }\n    \n    res_vec\n}"]
--------------------------------------------------------------------------------
