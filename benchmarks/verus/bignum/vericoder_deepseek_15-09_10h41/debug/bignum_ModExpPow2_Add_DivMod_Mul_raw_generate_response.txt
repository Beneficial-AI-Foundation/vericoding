=== Raw LLM Generate Response ===
Length: 1863 characters
--------------------------------------------------------------------------------
["proof fn Str2Int_nonnegative(s: Seq<char>) \n  requires ValidBitString(s)\n  ensures Str2Int(s) >= 0\n  decreases s.len()\n{\n  if s.len() == 0 {\n  } else {\n    Str2Int_nonnegative(s.subrange(0, s.len() as int - 1));\n  }\n}\n\nproof fn Str2Int_monotonic(s: Seq<char>, t: Seq<char>) \n  requires ValidBitString(s), ValidBitString(t), s.len() <= t.len()\n  ensures Str2Int(s) <= Str2Int(t)\n  decreases s.len(), t.len()\n{\n  if s.len() == 0 {\n  } else {\n    Str2Int_monotonic(s.subrange(0, s.len() as int - 1), t.subrange(0, t.len() as int - 1));\n  }\n}\n\nproof fn BitString_length_positive(s: Seq<char>) \n  requires ValidBitString(s), s.len() > 0\n  ensures s@[s.len() as int - 1] == '0' || s@[s.len() as int - 1] == '1'\n{\n}\n\nproof fn Str2Int_append(s: Seq<char>, bit: char) \n  requires ValidBitString(s), bit == '0' || bit == '1'\n  ensures Str2Int(s.push(bit)) == 2 * Str2Int(s) + (if bit == '1' {1} else {0})\n  decreases s.len()\n{\n  if s.len() == 0 {\n  } else {\n    Str2Int_append(s.subrange(0, s.len() as int - 1), s@[s.len() as int - 1]);\n  }\n}", "{\n  let mut result = Vec::new();\n  let mut power_seq = a.to_owned();\n  let length_helper = vstd::seq::new_seq(0, b.len() as int, |i| b@[i]);\n\n  proof {\n    Str2Int_nonnegative(a@);\n    if b.len() > 0 { BitString_length_positive(b@); }\n  }\n\n  for i in 0..b.len()\n      invariant ValidBitString(result@), ValidBitString(power_seq@)\n      invariant BinaryBitStringValidLengthInvariant(result, power_seq, b, i)\n      decreases b.len() - i\n  {\n    if b[i] == '1' {\n      result = append_bit_strings(&result, &power_seq);\n      proof { BinaryAdditionPreservesValidity(result@, power_seq@); }\n    }\n    \n    if i < b.len() - 1 {\n      power_seq = multiply_by_two(&power_seq);\n      proof { BinaryMultiplicationPreservesValidity(power_seq@); }\n    }\n  }\n  \n  result\n}"]
--------------------------------------------------------------------------------
