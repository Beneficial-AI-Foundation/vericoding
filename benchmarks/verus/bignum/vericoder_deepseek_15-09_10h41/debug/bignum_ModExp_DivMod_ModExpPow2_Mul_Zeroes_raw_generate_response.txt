=== Raw LLM Generate Response ===
Length: 1858 characters
--------------------------------------------------------------------------------
["\nproof fn lemma_exp_int_recursive(x: nat, y: nat)\n    requires y > 0\n    ensures Exp_int(x, y) == x * Exp_int(x, (y - 1) as nat)\n{\n    if y > 0 {\n        assert(Exp_int(x, y) == x * Exp_int(x, (y - 1) as nat)) by {\n            reveal(Exp_int);\n        }\n    }\n}\n\nproof fn lemma_str2int_recursive(s: Seq<char>)\n    requires ValidBitString(s), s.len() > 0\n    ensures Str2Int(s) == 2 * Str2Int(s.subrange(0, s.len() as int - 1)) + (if s.index(s.len() as int - 1) == '1' { 1nat } else { 0nat })\n{\n    if s.len() > 0 {\n        assert(Str2Int(s) == 2 * Str2Int(s.subrange(0, s.len() as int - 1)) + (if s.index(s.len() as int - 1) == '1' { 1nat } else { 0nat })) by {\n            reveal(Str2Int);\n        }\n    }\n}\n\nproof fn lemma_exp_mod(x: nat, y: nat, z: nat)\n    requires z > 1\n    ensures Exp_int(x, y) % z == (x % z) * Exp_int(x, y - 1) % z if y > 0 else 1 % z\n{\n    if y == 0 {\n        assert(Exp_int(x, y) == 1);\n        assert(1 % z == 1 % z);\n    } else {\n        lemma_exp_int_recursive(x, y);\n        assert(Exp_int(x, y) == x * Exp_int(x, (y - 1) as nat));\n        assert((x * Exp_int(x, (y - 1) as nat)) % z == ((x % z) * (Exp_int(x, (y - 1) as nat) % z)) % z);\n    }\n}\n","{\n    let mut result = Vec::new();\n    let mut base = Str2Int(sx@) % Str2Int(sz@);\n    let mut exponent = Str2Int(sy@);\n    let modulus = Str2Int(sz@);\n    \n    result.push('1');\n    \n    while exponent > 0\n        invariant\n            ValidBitString(result@),\n            Str2Int(result@) == Exp_int(base, exponent) % modulus,\n        decreases exponent\n    {\n        if exponent % 2 == 1 {\n            let temp = (Str2Int(result@) * base) % modulus;\n            result = int_to_bitstring(temp);\n        }\n        \n        base = (base * base) % modulus;\n        exponent = exponent / 2;\n    }\n    \n    result\n}"]
--------------------------------------------------------------------------------
