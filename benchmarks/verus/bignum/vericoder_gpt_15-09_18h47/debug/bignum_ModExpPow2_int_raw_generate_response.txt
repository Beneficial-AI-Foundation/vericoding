=== Raw LLM Generate Response ===
Length: 1874 characters
--------------------------------------------------------------------------------
["fn mul_mod_u64(a: u64, b: u64, m: u64) -> (res: u64)\n    requires\n        m > 0u64,\n    ensures\n        (res as nat) == ((a as nat) * (b as nat)) % (m as nat),\n        res < m,\n{\n    let prod: u128 = (a as u128) * (b as u128);\n    let rem: u128 = prod % (m as u128);\n    assert(rem < (m as u128));\n    assert((m as u128) <= (u64::MAX as u128));\n    let r: u64 = rem as u64;\n    r\n}\n\nproof fn lemma_mod_mul_congruence(a: nat, b: nat, m: nat)\n    requires\n        m > 0,\n    ensures\n        ((a % m) * (b % m)) % m == (a * b) % m\n{\n}\n\nproof fn lemma_exp_addition(a: nat, m: nat, n: nat)\n    ensures\n        Exp_int(a, m + n) == Exp_int(a, m) * Exp_int(a, n)\n    decreases n\n{\n    if n == 0 {\n    } else {\n        lemma_exp_addition(a, m, (n - 1) as nat);\n    }\n}\n\nproof fn lemma_pow2_step(k: nat)\n    ensures\n        Exp_int(2, k + 1) == Exp_int(2, k) + Exp_int(2, k)\n    decreases k\n{\n}\n\nproof fn lemma_exp_zero(a: nat)\n    ensures\n        Exp_int(a, 0) == 1\n{\n}\n\nproof fn lemma_exp_one(a: nat)\n    ensures\n        Exp_int(a, 1) == a\n{\n}","{\n    let mut r: u64 = x % z;\n    let mut k: u64 = 0u64;\n    proof {\n        lemma_exp_zero(2);\n        lemma_exp_one(x as nat);\n    }\n    while k < n\n        invariant\n            z > 0u64,\n            k <= n,\n            (r as nat) == Exp_int(x as nat, Exp_int(2, k as nat)) % (z as nat),\n        decreases n - k\n    {\n        let old_k: u64 = k;\n        let old_r: u64 = r;\n        r = mul_mod_u64(old_r, old_r, z);\n        proof {\n            lemma_mod_mul_congruence(Exp_int(x as nat, Exp_int(2, old_k as nat)), Exp_int(x as nat, Exp_int(2, old_k as nat)), z as nat);\n            lemma_exp_addition(x as nat, Exp_int(2, old_k as nat), Exp_int(2, old_k as nat));\n            lemma_pow2_step(old_k as nat);\n        }\n        k = k + 1u64;\n    }\n    r\n}"]
--------------------------------------------------------------------------------
