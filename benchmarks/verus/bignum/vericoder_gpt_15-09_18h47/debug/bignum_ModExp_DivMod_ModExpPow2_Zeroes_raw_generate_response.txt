=== Raw LLM Generate Response ===
Length: 1412 characters
--------------------------------------------------------------------------------
[
"spec fn Nat2Bits(n: nat) -> Seq<char>\n    decreases n\n{\n    if n == 0 {\n        Seq::<char>::empty()\n    } else {\n        let b: char = if n % 2 == 1 { '1' } else { '0' };\n        Nat2Bits(n / 2) + seq![b]\n    }\n}\n\nproof fn lemma_valid_nat2bits(n: nat)\n    ensures\n        ValidBitString(Nat2Bits(n)),\n    decreases n\n{\n    if n == 0 {\n    } else {\n        lemma_valid_nat2bits(n / 2);\n        let b: char = if n % 2 == 1 { '1' } else { '0' };\n        assert(b == '0' || b == '1');\n    }\n}\n\nproof fn lemma_str2int_nat2bits(n: nat)\n    ensures\n        Str2Int(Nat2Bits(n)) == n,\n    decreases n\n{\n    if n == 0 {\n        assert(Str2Int(Seq::<char>::empty()) == 0);\n    } else {\n        lemma_str2int_nat2bits(n / 2);\n        let s = Nat2Bits(n);\n        let t = Nat2Bits(n / 2);\n        let b: char = if n % 2 == 1 { '1' } else { '0' };\n        assert(s == t + seq![b]);\n        assert(s.len() > 0);\n        assert(Str2Int(s) == 2 * Str2Int(s.subrange(0, s.len() as int - 1)) + (if s.index(s.len() as int - 1) == '1' { 1nat } else { 0nat }));\n        assert(s.subrange(0, s.len() as int - 1) == t);\n        assert(s.index(s.len() as int - 1) == b);\n        assert(Str2Int(s) == 2 * Str2Int(t) + (if b == '1' { 1nat } else { 0nat }));\n        assert(Str2Int(t) == n / 2);\n        if n % 2 == 1 {\n            assert(b == '1');\n            assert((if b == '1' { 1nat }
--------------------------------------------------------------------------------
