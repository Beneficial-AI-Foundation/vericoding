=== Raw LLM Generate Response ===
Length: 2462 characters
--------------------------------------------------------------------------------
[
"spec fn Nat2Bits(n: nat) -> Seq<char>\n    decreases n\n{\n    if n == 0 {\n        Seq::<char>::empty()\n    } else {\n        let q = n / 2;\n        let r = n % 2;\n        if r == 0 { Nat2Bits(q).push('0') } else { Nat2Bits(q).push('1') }\n    }\n}\n\nproof fn lemma_ValidBitString_push(s: Seq<char>, c: char)\n    requires\n        ValidBitString(s),\n        c == '0' || c == '1',\n    ensures\n        ValidBitString(s.push(c)),\n{\n    assert_forall_by(|i: int| {\n        requires\n            0 <= i && i < s.push(c).len() as int,\n        ensures\n            s.push(c).index(i) == '0' || s.push(c).index(i) == '1',\n        if i < s.len() as int {\n            assert(0 <= i && i < s.len() as int);\n            assert(ValidBitString(s));\n            assert(s.index(i) == '0' || s.index(i) == '1');\n            assert(s.push(c).index(i) == s.index(i));\n        } else {\n            assert(i == s.len() as int);\n            assert(s.push(c).index(i) == c);\n            assert(c == '0' || c == '1');\n        }\n    });\n}\n\nproof fn lemma_Nat2Bits_correct(n: nat)\n    ensures\n        ValidBitString(Nat2Bits(n)),\n        Str2Int(Nat2Bits(n)) == n,\n    decreases n\n{\n    if n == 0 {\n        reveal(Str2Int);\n        assert(Str2Int(Nat2Bits(0)) == 0);\n        assert(ValidBitString(Nat2Bits(0)));\n    } else {\n        let q = n / 2;\n        let r = n % 2;\n        lemma_Nat2Bits_correct(q);\n        let s = Nat2Bits(q);\n        let c: char = if r == 0 { '0' } else { '1' };\n        lemma_ValidBitString_push(s, c);\n        assert(Nat2Bits(n) == if r == 0 { s.push('0') } else { s.push('1') });\n        assert(ValidBitString(Nat2Bits(n)));\n        reveal(Str2Int);\n        assert(Str2Int(s.push(c)) == 2 * Str2Int(s) + (if c == '1' { 1nat } else { 0nat }));\n        assert(r < 2);\n        if r == 0 {\n            assert(c == '0');\n            assert((if c == '1' { 1nat } else { 0nat }) == 0);\n        } else {\n            assert(r == 1);\n            assert(c == '1');\n            assert((if c == '1' { 1nat } else { 0nat }) == 1);\n        }\n        assert(Str2Int(s) == q);\n        assert(n == 2 * q + r);\n        assert(Str2Int(s.push(c)) == n);\n        assert(Str2Int(Nat2Bits(n)) == n);\n    }\n}",
"{\n    proof {\n        lemma_Nat2Bits_correct(Exp_int(Str2Int(sx@), Str2Int(sy@)) % Str2Int(sz@));\n    }\n    let res = Nat2Bits(Exp_int(Str2Int(sx@), Str2Int(sy@)) % Str2Int(sz@)).to_vec();\n    res\n}"
]
--------------------------------------------------------------------------------
