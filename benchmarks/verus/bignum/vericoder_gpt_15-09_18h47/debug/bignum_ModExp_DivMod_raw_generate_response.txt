=== Raw LLM Generate Response ===
Length: 1965 characters
--------------------------------------------------------------------------------
[
"fn bit_of(c: char) -> u128 { if c == '1' { 1 } else { 0 } }\n\nfn slice_bits_to_u128(s: &[char]) -> u128 {\n    let mut i: usize = 0;\n    let mut val: u128 = 0;\n    while i < s.len()\n        invariant\n            i <= s.len(),\n        decreases s.len() as int - i as int\n    {\n        let b: u128 = if s[i] == '1' { 1 } else { 0 };\n        val = val * 2 + b;\n        i += 1;\n    }\n    val\n}\n\nfn u128_to_bit_vec(n: u128) -> Vec<char> {\n    let mut v: Vec<char> = Vec::new();\n    if n == 0 {\n        v.push('0');\n        return v;\n    }\n    let mut tmp: u128 = n;\n    while tmp > 0\n        invariant\n            v.len() as int >= 0,\n        decreases tmp as int\n    {\n        let bit = (tmp & 1) as u8;\n        if bit == 1 { v.push('1'); } else { v.push('0'); }\n        tmp = tmp >> 1;\n    }\n    let mut i: usize = 0;\n    let mut j: usize = if v.len() == 0 { 0 } else { v.len() - 1 };\n    while i < j\n        invariant\n            j + 1 <= v.len(),\n        decreases j as int - i as int\n    {\n        let ci = v[i];\n        let cj = v[j];\n        v[i] = cj;\n        v[j] = ci;\n        i += 1;\n        if j == 0 { break; } else { j -= 1; }\n    }\n    v\n}\n\nfn mod_pow_u128(a: u128, e: u128, m: u128) -> u128 {\n    let mut base: u128 = if m == 0 { a } else { a % m };\n    let mut exp: u128 = e;\n    let mut result: u128 = if m == 0 { 0 } else { 1 % m };\n    while exp > 0\n        invariant\n            true,\n        decreases exp as int\n    {\n        if (exp & 1) == 1 {\n            result = if m == 0 { 0 } else { (result * base) % m };\n        }\n        base = if m == 0 { base } else { (base * base) % m };\n        exp = exp >> 1;\n    }\n    result\n}",
"{\n    let a: u128 = slice_bits_to_u128(sx);\n    let e: u128 = slice_bits_to_u128(sy);\n    let m: u128 = slice_bits_to_u128(sz);\n    let r: u128 = mod_pow_u128(a, e, m);\n    let res_vec: Vec<char> = u128_to_bit_vec(r);\n    return res_vec;\n}"
]
--------------------------------------------------------------------------------
