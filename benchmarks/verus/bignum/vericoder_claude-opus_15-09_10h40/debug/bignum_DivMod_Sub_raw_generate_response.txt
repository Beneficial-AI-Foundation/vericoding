=== Raw LLM Generate Response ===
Length: 4435 characters
--------------------------------------------------------------------------------
[
"proof fn lemma_str2int_append(s: Seq<char>, c: char)\n    requires\n        ValidBitString(s),\n        c == '0' || c == '1',\n    ensures\n        Str2Int(s.push(c)) == 2 * Str2Int(s) + if c == '1' { 1nat } else { 0nat },\n{\n    let s_new = s.push(c);\n    assert(s_new.len() == s.len() + 1);\n    assert(s_new.subrange(0, s_new.len() as int - 1) == s);\n    assert(s_new.index(s_new.len() as int - 1) == c);\n}\n\nproof fn lemma_str2int_zero()\n    ensures\n        Str2Int(seq!['0']) == 0,\n{\n    assert(seq!['0'].len() == 1);\n    assert(seq!['0'].subrange(0, 0) == seq![]);\n    assert(seq!['0'].index(0) == '0');\n}\n\nproof fn lemma_str2int_bounds(s: Seq<char>)\n    requires\n        ValidBitString(s),\n        s.len() > 0,\n    ensures\n        Str2Int(s) < pow2(s.len()),\n    decreases s.len(),\n{\n    if s.len() == 1 {\n        assert(pow2(1) == 2);\n        if s.index(0) == '0' {\n            assert(Str2Int(s) == 0);\n        } else {\n            assert(Str2Int(s) == 1);\n        }\n    } else {\n        let prefix = s.subrange(0, s.len() as int - 1);\n        lemma_str2int_bounds(prefix);\n        assert(Str2Int(prefix) < pow2(prefix.len()));\n        assert(pow2(s.len()) == 2 * pow2(prefix.len()));\n    }\n}\n\nspec fn pow2(n: nat) -> nat\n    decreases n,\n{\n    if n == 0 { 1 } else { 2 * pow2(n - 1) }\n}\n\nexec fn compare_binary(a: &[char], b: &[char]) -> (res: bool)\n    requires\n        ValidBitString(a@),\n        ValidBitString(b@),\n    ensures\n        res == (Str2Int(a@) >= Str2Int(b@)),\n{\n    if a.len() > b.len() {\n        return true;\n    } else if a.len() < b.len() {\n        return false;\n    } else {\n        let mut i = 0;\n        while i < a.len()\n            invariant\n                0 <= i <= a.len(),\n                forall |j: int| 0 <= j && j < i ==> a@.index(j) == b@.index(j),\n        {\n            if a[i] == '1' && b[i] == '0' {\n                return true;\n            } else if a[i] == '0' && b[i] == '1' {\n                return false;\n            }\n            i = i + 1;\n        }\n        return true;\n    }\n}\n\nexec fn subtract_binary(a: &[char], b: &[char]) -> (res: Vec<char>)\n    requires\n        ValidBitString(a@),\n        ValidBitString(b@),\n        Str2Int(a@) >= Str2Int(b@),\n    ensures\n        ValidBitString(res@),\n        Str2Int(res@) == Str2Int(a@) - Str2Int(b@),\n{\n    let mut result = Vec::new();\n    let mut borrow = 0u8;\n    let mut i = 0;\n    \n    while i < a.len() || i < b.len() || borrow > 0\n        invariant\n            0 <= i <= a.len() + b.len(),\n            borrow == 0 || borrow == 1,\n            ValidBitString(result@),\n    {\n        let a_bit = if i < a.len() {\n            if a[a.len() - 1 - i] == '1' { 1u8 } else { 0u8 }\n        } else { 0u8 };\n        \n        let b_bit = if i < b.len() {\n            if b[b.len() - 1 - i] == '1' { 1u8 } else { 0u8 }\n        } else { 0u8 };\n        \n        let diff = (a_bit + 2) - b_bit - borrow;\n        if diff >= 2 {\n            result.push('1');\n            borrow = 0;\n        } else if diff == 1 {\n            result.push('1');\n            borrow = 0;\n        } else if diff == 0 {\n            result.push('0');\n            borrow = 1;\n        } else {\n            result.push('1');\n            borrow = 1;\n        }\n        i = i + 1;\n    }\n    \n    result.reverse();\n    \n    while result.len() > 1 && result[0] == '0'\n        invariant\n            ValidBitString(result@),\n            result.len() >= 1,\n    {\n        result.remove(0);\n    }\n    \n    if result.len() == 0 {\n        result.push('0');\n    }\n    \n    result\n}",
"{\n    let mut quotient = Vec::new();\n    let mut remainder = Vec::new();\n    \n    for i in 0..dividend.len() {\n        remainder.push(dividend[i]);\n        \n        while remainder.len() > 1 && remainder[0] == '0' {\n            remainder.remove(0);\n        }\n        \n        if compare_binary(&remainder, divisor) {\n            quotient.push('1');\n            remainder = subtract_binary(&remainder, divisor);\n        } else {\n            quotient.push('0');\n        }\n    }\n    \n    while quotient.len() > 1 && quotient[0] == '0' {\n        quotient.remove(0);\n    }\n    \n    if quotient.len() == 0 {\n        quotient.push('0');\n    }\n    \n    if remainder.len() == 0 {\n        remainder.push('0');\n    }\n    \n    (quotient, remainder)\n}"
]
--------------------------------------------------------------------------------
