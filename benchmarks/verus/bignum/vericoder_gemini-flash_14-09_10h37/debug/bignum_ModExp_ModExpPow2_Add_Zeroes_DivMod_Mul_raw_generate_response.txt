=== Raw LLM Generate Response ===
Length: 1392 characters
--------------------------------------------------------------------------------
["spec fn exp_mod(base: nat, exp: nat, modulus: nat) -> nat {\n    if exp == 0 {\n        1 % modulus\n    } else if exp % 2 == 0 {\n        let half_exp = exp / 2;\n        let res = exp_mod(base, half_exp, modulus);\n        (res * res) % modulus\n    } else {\n        (base * exp_mod(base, (exp - 1) as nat, modulus)) % modulus\n    }\n}", "{\n        let x = Str2Int(sx@);\n        let y = Str2Int(sy@);\n        let z = Str2Int(sz@);\n\n        let result_nat = exp_mod(x, y, z);\n        \n        // Convert the nat result to a binary string (Seq<char>) and then to Vec<char>\n        let mut result_seq = Seq::<char>::new();\n        let mut temp_val = result_nat;\n        if temp_val == 0 {\n            result_seq = Seq::singleton('0');\n        } else {\n            while temp_val > 0 {\n                let digit = if temp_val % 2 == 0 { '0' } else { '1' };\n                result_seq = Seq::new(1, |i| digit).add(result_seq);\n                temp_val = temp_val / 2;\n            }\n        }\n\n        let mut res_vec = Vec::<char>::new();\n        let mut i = 0;\n        while i < result_seq.len()\n            invariant\n                res_vec.len() == i,\n                forall |j: int| 0 <= j && j < i ==> res_vec.index(j) == result_seq.index(j)\n        {\n            res_vec.push(result_seq.index(i));\n            i = i + 1;\n        }\n        res_vec\n    }"]
--------------------------------------------------------------------------------
