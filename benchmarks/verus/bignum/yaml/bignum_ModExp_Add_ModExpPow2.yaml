vc-description: |-
  Bignum task: bignum_ModExp[Add,ModExpPow2].
  Implement the method according to the Verus specification.
  
  /* All characters must be '0' or '1'. */
  
  /* sy is power of 2 or zero */
  
  /* requires y < Exp_int(2,n+1) */
  
  /* && n > 0 */

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn str2int(s: Seq<u8>) -> nat
    decreases s.len()
  {
    if s.len() == 0 { 
      0nat 
    } else { 
      2nat * str2int(s.subrange(0, s.len() - 1)) + (if s[s.len() - 1] == 49u8 { 1nat } else { 0nat })
    }
  }

  spec fn exp_int(x: nat, y: nat) -> nat
    decreases y
  {
    if y == 0 { 1nat } else { x * exp_int(x, (y - 1) as nat) }
  }

  spec fn valid_bit_string(s: Seq<u8>) -> bool {
    forall|i: int| 0 <= i < s.len() ==> (s[i] == 48u8 || s[i] == 49u8)
  }
  
  fn add(s1: Seq<u8>, s2: Seq<u8>) -> (res: Seq<u8>)
    requires 
      valid_bit_string(s1) && valid_bit_string(s2)
    ensures 
      valid_bit_string(res) &&
      str2int(res) == str2int(s1) + str2int(s2)
  {
    assume(false);
    unreached()
  }
  
  fn mod_exp_pow2(sx: Seq<u8>, sy: Seq<u8>, n: nat, sz: Seq<u8>) -> (res: Seq<u8>)
    requires 
      valid_bit_string(sx) && valid_bit_string(sy) && valid_bit_string(sz) &&
      (str2int(sy) == exp_int(2nat, n) || str2int(sy) == 0) &&
      sy.len() == n + 1 &&
      str2int(sz) > 1
    ensures 
      valid_bit_string(res) &&
      str2int(res) == exp_int(str2int(sx), str2int(sy)) % str2int(sz)
    decreases n
  {
    assume(false);
    unreached()
  }

vc-helpers: |-

vc-spec: |-
  fn mod_exp(sx: Seq<u8>, sy: Seq<u8>, sz: Seq<u8>) -> (res: Seq<u8>)
    requires 
      valid_bit_string(sx) && valid_bit_string(sy) && valid_bit_string(sz) &&
      sy.len() > 0 && str2int(sz) > 1
    ensures 
      valid_bit_string(res) &&
      str2int(res) == exp_int(str2int(sx), str2int(sy)) % str2int(sz)
    decreases sy.len()

vc-code: |-
  {
    // impl-start
    assume(false);
    unreached()
    // impl-end
  }

vc-postamble: |-

  }

  fn main() {}