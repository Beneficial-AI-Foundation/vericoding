vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn Str2Int(s: Seq<char>) -> nat
  recommends ValidBitString(s)
  decreases s.len()
  {
    if s.len() == 0 {
      0
    } else {
      2 * Str2Int(s.subrange(0, s.len() as int - 1))
        + (if s.index(s.len() as int - 1) == '1' { 1nat } else { 0nat })
    }
  }

  spec fn ValidBitString(s: Seq<char>) -> bool
  {
    forall |i: int| 0 <= i && i < s.len() as int ==>
      (s.index(i) == '0' || s.index(i) == '1')
  }

vc-helpers: |-


vc-description: |-
  Bignum task: bignum_Mul_Add_NormalizeBitString.
  Implement the method according to the Verus specification.

vc-spec: |-
  exec fn Mul_Add_NormalizeBitString(s1: &[char], s2: &[char]) -> (res: Vec<char>)
    requires ValidBitString(s1@), ValidBitString(s2@)
    ensures ValidBitString(res@), Str2Int(res@) == Str2Int(s1@) * Str2Int(s2@)

vc-code: |-
  {
    assume(false);
    return Vec::<char>::new();
  }

vc-postamble: |-

  fn main() {}
  }

