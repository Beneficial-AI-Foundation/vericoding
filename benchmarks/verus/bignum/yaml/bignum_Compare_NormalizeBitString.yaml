vc-description: |-
  Bignum task: bignum_Compare[NormalizeBitString].
  Implement the method according to the Verus specification.

  /* All characters must be '0' or '1'. */

  /* Remove leading zeros, except keep at least one digit */

  /* I added and proved some extra post-conditions: */

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn str2int(s: Seq<char>) -> nat
    decreases s.len()
  {
    if s.len() == 0 {
        0nat
    } else {
        2nat * str2int(s.subrange(0, s.len() - 1)) + (if s[s.len() - 1] == '1' { 1nat } else { 0nat })
    }
  }

  spec fn valid_bit_string(s: Seq<char>) -> bool {
    forall|i: int| 0 <= i < s.len() ==> (s[i] == '0' || s[i] == '1')
  }

  fn normalize_bit_string(s: Seq<char>) -> (t: Seq<char>)
    ensures 
        valid_bit_string(t) &&
        t.len() > 0 &&
        (t.len() > 1 ==> t[0] != '0') &&
        (valid_bit_string(s) ==> str2int(s) == str2int(t))
  {
    assume(false);
    unreached()
  }

vc-helpers: |

vc-spec: |-
  fn compare(s1: Seq<char>, s2: Seq<char>) -> (res: int)
    requires valid_bit_string(s1) && valid_bit_string(s2)
    ensures 
        (str2int(s1) < str2int(s2) ==> res == -1) &&
        (str2int(s1) == str2int(s2) ==> res == 0) &&
        (str2int(s1) > str2int(s2) ==> res == 1)
    decreases str2int(s1) + str2int(s2)

vc-code: |-
  {
    assume(false);
    unreached()
  }

vc-postamble: |2-

  }

  fn main() {}
