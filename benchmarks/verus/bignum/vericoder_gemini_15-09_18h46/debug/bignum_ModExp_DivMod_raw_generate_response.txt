=== Raw LLM Generate Response ===
Length: 1669 characters
--------------------------------------------------------------------------------
```json
["\nexec fn Str2Int_exec(s: &[char]) -> (res: nat)\n    requires ValidBitString(s@)\n    ensures res == Str2Int(s@)\n{\n    let mut res: nat = 0;\n    let mut i: nat = 0;\n    while i < s.len()\n        invariant\n            ValidBitString(s@),\n            0 <= i <= s.len(),\n            res == Str2Int(s@.subrange(0, i as int)),\n        decreases s.len() - i\n    {\n        proof {\n            if i < s.len() {\n                let sub = s@.subrange(0, (i + 1) as int);\n                assert(Str2Int(sub) == 2 * Str2Int(sub.subrange(0, sub.len() - 1)) + (if sub.last() == '1' { 1 } else { 0 }));\n            }\n        }\n        let digit = if s[i as usize] == '1' { 1nat } else { 0nat };\n        res = res * 2 + digit;\n        i = i + 1;\n    }\n    res\n}\n\nexec fn Int2Str_exec(n: nat) -> (res: Vec<char>)\n    ensures\n        (n == 0 ==> res@ =~= seq!['0']),\n        (n > 0 ==> res@.len() > 0 && res@[0] == '1'),\n        ValidBitString(res@),\n        Str2Int(res@) == n,\n    decreases n\n{\n    if n == 0 {\n        let mut v = Vec::new();\n        v.push('0');\n        proof { assert(Str2Int(seq!['0']) == 0); }\n        return v;\n    }\n    if n == 1 {\n        let mut v = Vec::new();\n        v.push('1');\n        proof { assert(Str2Int(seq!['1']) == 1); }\n        return v;\n    }\n\n    let mut res = Int2Str_exec(n / 2);\n    let last_char = if n % 2 == 1 { '1' } else { '0' };\n    res.push(last_char);\n\n    proof {\n        let n_div_2 = n / 2;\n        vstd::arithmetic::div_mod::lemma_div_mod_auto(n, 2nat);\n        assert(res@.len() > 0);\n        let sub_seq = res@.subrange(0, res@.len() - 1);\n        assert(Str2Int
--------------------------------------------------------------------------------
