=== Raw LLM Generate Response ===
Length: 1564 characters
--------------------------------------------------------------------------------
```json
["spec fn Int2Str(n: nat) -> Seq<char>\n    decreases n\n{\n    if n == 0 { seq!['0'] }\n    else if n == 1 { seq!['1'] }\n    else { Int2Str(n / 2).push(if n % 2 == 1 { '1' } else { '0' }) }\n}\n\nproof fn lemma_Str2Int_of_Int2Str(n: nat)\n    ensures\n        Str2Int(Int2Str(n)) == n,\n        ValidBitString(Int2Str(n)),\n    decreases n\n{\n    if n > 1 {\n        lemma_Str2Int_of_Int2Str(n / 2);\n    }\n}\n\nexec fn str_to_int_exec(s: &[char]) -> (res: nat)\n    requires\n        ValidBitString(s@),\n    ensures\n        res == Str2Int(s@),\n{\n    let mut res: nat = 0;\n    let mut i: nat = 0;\n    while i < s.len()\n        invariant\n            ValidBitString(s@),\n            i <= s.len(),\n            res == Str2Int(s@.subrange(0, i as int)),\n        decreases s.len() - i\n    {\n        assert(s@.subrange(0, (i+1) as int).last() == s@[i as int]);\n        let d = if s[i as usize] == '1' { 1 } else { 0 };\n        res = res * 2 + d;\n        i = i + 1;\n    }\n    res\n}\n\nexec fn int_to_str_exec(n: nat) -> (res: Vec<char>)\n    ensures\n        ValidBitString(res@),\n        Str2Int(res@) == n,\n        res@ == Int2Str(n),\n    decreases n\n{\n    if n == 0 {\n        return vec!['0'];\n    }\n    if n == 1 {\n        return vec!['1'];\n    }\n\n    let mut res = int_to_str_exec(n / 2);\n    let c = if n % 2 == 1 { '1' } else { '0' };\n    res.push(c);\n\n    proof {\n        lemma_Str2Int_of_Int2Str(n);\n        assert(res@ == Int2Str(n));\n    }\n\n    res\n}", "{\n    if sy.len() == 1 {\n        if sy[0] == '0' {\n
--------------------------------------------------------------------------------
