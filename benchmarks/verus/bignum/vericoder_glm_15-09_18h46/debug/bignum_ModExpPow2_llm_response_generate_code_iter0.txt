=== LLM Response - generate_code - Iteration 0 ===
File: /Users/sergiu.bursuc/baif/vericoding/benchmarks/verus/bignum/files/bignum_ModExpPow2.rs
Prompt Hash: dd74ed7b
JSON Parsed Successfully: True
Timestamp: 1757955652.8275719
Content Length: 2244 chars
--------------------------------------------------------------------------------
["spec fn Exp_int(x: nat, y: nat) -> nat\n    decreases y \n  {\n    if y == 0 { 1 } else { x * Exp_int(x, (y - 1) as nat) }\n  }\n  \nspec fn Str2Int(s: Seq<char>) -> nat\n  recommends ValidBitString(s)\n  decreases s.len()\n{\n  if s.len() == 0 {\n    0\n  } else {\n    2 * Str2Int(s.subrange(0, s.len() as int - 1))\n      + (if s.index(s.len() as int - 1) == '1' { 1nat } else { 0nat })\n  }\n}\n\nspec fn ValidBitString(s: Seq<char>) -> bool\n{\n  // All characters must be '0' or '1'.\n  forall |i: int| 0 <= i && i < s.len() as int ==>\n    (s.index(i) == '0' || s.index(i) == '1')\n}", "{\n  let base = Str2Int(sx@);\n  let exponent = Str2Int(sy@);\n  let modulus = Str2Int(sz@);\n  proof {\n    if exponent == 0 {\n      assert(Exp_int(base, 0) == 1);\n      assert(1 % modulus == 1);\n    } else {\n      assert(exponent == Exp_int(2, n as nat));\n    }\n  }\n  let mut result = 1;\n  let mut current = base % modulus;\n  let mut i = 0;\n  while i < n\n      invariant\n          0 <= i && i <= n,\n          result == Exp_int(base, Exp_int(2, i as nat)) % modulus,\n          current == (Exp_int(base, Exp_int(2, i as nat)) % modulus),\n          1 < modulus,\n      decreases (n - i)\n  {\n    i = i + 1;\n    current = (current * current) % modulus;\n    proof {\n      assert(Exp_int(2, i as nat) == Exp_int(2, (i - 1) as nat) * 2);\n    }\n  }\n  result = current;\n  let res_str = nat_to_bitstring(result);\n  res_str\n}\n\nfn nat_to_bitstring(n: nat) -> Vec<char>\n    ensures ValidBitString(result@),\n        Str2Int(result@) == n\n{\n  if n == 0 {\n    Vec::from(['0'])\n  } else {\n    let mut chars = Vec::<char>::new();\n    let mut current = n;\n    while current > 0\n        invariant\n            n >= 0,\n            current >= 0,\n            Str2Int(chars@) == n - current * Exp_int(2, chars.len()),\n            Str2Int(chars@) >= 0,\n            forall |i: int| 0 <= i && i < chars.len() as int ==> [][\"'\"][\"'0\"], [][\"'\"][\"'1\"].contains(chars@[i]),\n        decreases current\n    {\n      let bit = if current % 2 == 1 { '1' } else { '0' };\n      chars.push(bit);\n      current = current / 2;\n    }\n    chars.reverse();\n    if chars.is_empty() {\n      chars.push('0');\n    }\n    chars\n  }\n}"]
--------------------------------------------------------------------------------
