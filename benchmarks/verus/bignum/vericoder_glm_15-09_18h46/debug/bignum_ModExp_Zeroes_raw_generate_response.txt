=== Raw LLM Generate Response ===
Length: 2115 characters
--------------------------------------------------------------------------------
["spec fn bits_to_nat_reversed(bits: Seq<char>) -> nat\n    decreases bits.len()\n{\n    if bits.len() == 0 { 0 }\n    else { (if bits.index(0) == '1' { 1 } else { 0 }) + 2 * bits_to_nat_reversed(bits.subrange(1, bits.len() as int)) }\n}\nexec fn str2int(s: &[char]) -> (res: nat)\n    requires ValidBitString(s@)\n    ensures res == Str2Int(s@)\n{\n    let mut n: nat = 0;\n    for i in 0..s.len()\n        invariant 0 <= i <= s.len()\n        invariant n == Str2Int(s@.subrange(0, i as int))\n    {\n        let bit = s[i];\n        let digit = if bit == '1' { 1 } else { 0 };\n        n = n * 2 + digit;\n    }\n    n\n}\nexec fn int2str(n: nat) -> (res: Vec<char>)\n    ensures ValidBitString(res@) && Str2Int(res@) == n\n{\n    if n == 0 {\n        vec!['0']\n    } else {\n        let mut bits = Vec::new();\n        let mut current = n;\n        while current > 0\n            invariant current >= 0\n            invariant n == current * (2 as nat).pow(bits.len() as nat) + bits_to_nat_reversed(bits@)\n        {\n            let bit = if current % 2 == 1 { '1' } else { '0' };\n            bits.push(bit);\n            current = current / 2;\n        }\n        bits.reverse();\n        bits\n    }\n}\nexec fn mod_exp(base: nat, exponent: &[char], modulus: nat) -> (res: nat)\n    requires ValidBitString(exponent@) && modulus > 1\n    ensures res == Exp_int(base, Str2Int(exponent@)) % modulus\n{\n    if exponent.len() == 0 {\n        1 % modulus\n    } else {\n        let mut result = 1;\n        let mut base = base % modulus;\n        for i in 0..exponent.len()\n            invariant 0 <= i <= exponent.len()\n            invariant result == Exp_int(base, Str2Int(exponent@.subrange(0, i as int))) % modulus\n        {\n            result = (result * result) % modulus;\n            if exponent[i] == '1' {\n                result = (result * base) % modulus;\n            }\n        }\n        result\n    }\n}", "{\n    let base = str2int(sx);\n    let modulus_val = str2int(sz);\n    let result_nat = mod_exp(base, sy, modulus_val);\n    let result_vec = int2str(result_nat);\n    result_vec\n}"]
--------------------------------------------------------------------------------
