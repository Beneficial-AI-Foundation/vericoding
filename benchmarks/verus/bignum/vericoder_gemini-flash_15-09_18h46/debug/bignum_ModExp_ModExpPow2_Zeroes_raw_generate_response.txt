=== Raw LLM Generate Response ===
Length: 2216 characters
--------------------------------------------------------------------------------
["proof fn lemma_mult_rec_by_exp_n_is_mult_to_rec<A>(s: Seq<A>, x: A, n: nat)
  requires n > 0 && s.len() == n
  ensures s.subrange(0, n as int - 1).ext_int(x) == s
{
  assert(s.subrange(0, n as int - 1).ext_int(x)@ == s@);
}", "{\n    let len_y = sy.len();\n    let x_int = Str2Int(sx@);\n    let y_int = Str2Int(sy@);\n    let z_int = Str2Int(sz@);\n    if len_y == 1 {\n        let last_char_y = sy[0];\n        let mut res_nat = 0nat;\n        if last_char_y == '0' {\n            res_nat = 1nat % z_int;\n        } else {\n            res_nat = x_int % z_int;\n        }\n        let mut res_vec = Vec::new();\n        let mut temp_res = res_nat;\n        if temp_res == 0 {\n            res_vec.push('0');\n        } else {\n          while temp_res > 0\n              invariant\n                  temp_res >= 0,\n                  ValidBitString(res_vec@),\n              decreases temp_res\n          {\n              if temp_res % 2 == 1 {\n                  res_vec.insert(0, '1');\n              } else {\n                  res_vec.insert(0, '0');\n              }\n              temp_res = temp_res / 2;\n          }\n        }\n        return res_vec;\n    }\n\n    let sy_prefix = sy.subslice(0, len_y - 1);\n    let sy_last_char = sy[len_y - 1];\n\n    let recursive_result = ModExp_ModExpPow2_Zeroes(sx, sy_prefix, sz);\n    let recursive_val = Str2Int(recursive_result@);\n\n    let mut final_res_nat = 0nat;\n    if sy_last_char == '0' {\n        final_res_nat = (recursive_val * recursive_val) % z_int;\n    } else {\n        final_res_nat = (recursive_val * recursive_val * x_int) % z_int;\n    }\n\n    let mut final_res_vec = Vec::new();\n    let mut temp_final_res = final_res_nat;\n    if temp_final_res == 0 {\n        final_res_vec.push('0');\n    } else {\n      while temp_final_res > 0\n          invariant\n              temp_final_res >= 0,\n              ValidBitString(final_res_vec@),\n          decreases temp_final_res\n      {\n          if temp_final_res % 2 == 1 {\n              final_res_vec.insert(0, '1');\n          } else {\n              final_res_vec.insert(0, '0');\n          }\n          temp_final_res = temp_final_res / 2;\n      }\n    }\n\n    final_res_vec\n}"]
--------------------------------------------------------------------------------
