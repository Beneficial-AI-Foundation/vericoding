=== Raw LLM Generate Response ===
Length: 1474 characters
--------------------------------------------------------------------------------
["\nproof fn lemma_pow_add(x: nat, y: nat, z: nat)\n    ensures Exp_int(x, y + z) == Exp_int(x, y) * Exp_int(x, z)\n    decreases y\n{\n    if y > 0 {\n        lemma_pow_add(x, y - 1, z + 1);\n        assert(Exp_int(x, y + z) == x * Exp_int(x, y - 1 + z)) by {}\n        assert(Exp_int(x, y - 1 + z) == Exp_int(x, y - 1) * Exp_int(x, z)) by {}\n    }\n}\n\nproof fn lemma_mod_mul_property(a: nat, b: nat, m: nat)\n    requires m > 0\n    ensures (a * b) % m == ((a % m) * (b % m)) % m\n{\n}\n\nproof fn lemma_pow2_exp(n: nat)\n    ensures Exp_int(2, n) == (1u64 << n) as nat\n    decreases n\n{\n    if n > 0 {\n        lemma_pow2_exp(n - 1);\n        assert((1u64 << n) == 2 * (1u64 << (n - 1))) by { bit_shl_repr(n as u64); };\n    }\n}\n", "{\n    if n == 0 {\n        assert(Exp_int(2, 0) == 1) by { compute; };\n        assert(y == 1) by { lemma_pow2_exp(n as nat); };\n        return x % z;\n    }\n    \n    let half_n = n - 1;\n    let half_y = y / 2;\n    \n    proof {\n        lemma_pow2_exp(n as nat);\n        lemma_pow2_exp((n - 1) as nat);\n        assert(Exp_int(2, n as nat) == 2 * Exp_int(2, (n - 1) as nat)) by { lemma_pow_add(2, (n - 1) as nat, 1); };\n        assert(y == 2 * half_y) by {};\n    }\n    \n    let half_result = ModExpPow2_int(x, half_y, half_n, z);\n    \n    proof {\n        lemma_mod_mul_property(half_result as nat, half_result as nat, z as nat);\n    }\n    \n    let result = (half_result * half_result) % z;\n    \n    result\n}"]
--------------------------------------------------------------------------------
