=== Raw LLM Generate Response ===
Length: 1678 characters
--------------------------------------------------------------------------------
["\nproof fn lemma_exp_zero(x: nat)\n    ensures Exp_int(x, 0) == 1\n{\n}\n\nproof fn lemma_exp_rec(x: nat, y: nat)\n    requires y > 0\n    ensures Exp_int(x, y) == x * Exp_int(x, (y - 1) as nat)\n{\n}\n\nproof fn lemma_str2int_empty()\n    ensures Str2Int(Seq::<char>::empty()) == 0\n{\n}\n\nproof fn lemma_str2int_rec(s: Seq<char>)\n    requires ValidBitString(s), s.len() > 0\n    ensures Str2Int(s) == 2 * Str2Int(s.subrange(0, s.len() as int - 1)) + (if s.index(s.len() as int - 1) == '1' { 1nat } else { 0nat })\n{\n}\n\nproof fn lemma_mod_properties(a: nat, b: nat, m: nat)\n    requires m > 1\n    ensures (a * b) % m == ((a % m) * (b % m)) % m\n{\n}\n\nproof fn lemma_exp_mod(x: nat, y: nat, m: nat)\n    requires m > 1\n    ensures Exp_int(x, y) % m == Exp_int(x % m, y) % m\n    decreases y\n{\n    if y > 0 {\n        lemma_exp_rec(x, y);\n        lemma_exp_mod(x, (y - 1) as nat, m);\n        lemma_mod_properties(x, Exp_int(x, (y - 1) as nat), m);\n    }\n}\n", "{\n    let mut result = Vec::<char>::new();\n    let mut base = Str2Int(sx@) % Str2Int(sz@);\n    let mut exponent = Str2Int(sy@);\n    \n    while exponent > 0\n        invariant\n            ValidBitString(result@),\n            Str2Int(result@) == Exp_int(base, exponent) % Str2Int(sz@),\n        decreases exponent\n    {\n        if exponent % 2 == 1 {\n            proof { lemma_exp_mod(base, exponent, Str2Int(sz@)); }\n            result = format_binary_number((Str2Int(result@) * base) % Str2Int(sz@));\n        }\n        base = (base * base) % Str2Int(sz@);\n        exponent = exponent / 2;\n    }\n    \n    if result.is_empty() {\n        result.push('1');\n    }\n    \n    result\n}"]
--------------------------------------------------------------------------------
