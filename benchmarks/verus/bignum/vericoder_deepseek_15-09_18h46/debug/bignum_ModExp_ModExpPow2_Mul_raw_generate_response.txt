=== Raw LLM Generate Response ===
Length: 2082 characters
--------------------------------------------------------------------------------
["proof fn exp_int_monotonic(x: nat, y1: nat, y2: nat) requires y1 <= y2, x >= 1 ensures Exp_int(x, y1) <= Exp_int(x, y2) { if y1 < y2 { exp_int_monotonic(x, y1, y2 - 1); } } proof fn str2int_nonnegative(s: Seq<char>) requires ValidBitString(s) ensures Str2Int(s) >= 0 { } proof fn str2int_monotonic(s1: Seq<char>, s2: Seq<char>) requires ValidBitString(s1), ValidBitString(s2), s1.len() <= s2.len() ensures Str2Int(s1) <= Str2Int(s2) { } proof fn exp_int_property(x: nat, y: nat) requires x >= 1 ensures Exp_int(x, y) >= 1 { } proof fn mod_exp_lemma(a: nat, b: nat, m: nat) requires m > 1, b >= 1 ensures Exp_int(a, b) % m == (a * Exp_int(a, b - 1)) % m { }", "{\n    let mut x_val = Str2Int(sx@);\n    let mut y_val = Str2Int(sy@);\n    let z_val = Str2Int(sz@);\n    let mut result = 1;\n    let mut base = x_val % z_val;\n    let mut exp = y_val;\n    \n    proof {\n        str2int_nonnegative(sx@);\n        str2int_nonnegative(sy@);\n        str2int_nonnegative(sz@);\n        exp_int_property(x_val, y_val);\n    }\n    \n    while exp > 0\n        invariant\n            result >= 0, result < z_val,\n            Exp_int(x_val, y_val) % z_val == (result * Exp_int(base, exp)) % z_val,\n            base == Exp_int(x_val % z_val, 1) % z_val\n        decreases exp\n    {\n        if exp % 2 == 1 {\n            result = (result * base) % z_val;\n        }\n        base = (base * base) % z_val;\n        exp = exp / 2;\n        \n        proof {\n            mod_exp_lemma(x_val, exp, z_val);\n        }\n    }\n    \n    let mut res_vec = Vec::new();\n    let mut temp = result;\n    \n    while temp > 0\n        invariant\n            temp >= 0,\n            ValidBitString(res_vec@),\n            Str2Int(res_vec@) == result - temp * Exp_int(2, res_vec@.len() as nat)\n        decreases temp\n    {\n        if temp % 2 == 1 {\n            res_vec.push('1');\n        } else {\n            res_vec.push('0');\n        }\n        temp = temp / 2;\n    }\n    \n    if res_vec.is_empty() {\n        res_vec.push('0');\n    }\n    \n    res_vec.reverse();\n    res_vec\n}"]
--------------------------------------------------------------------------------
