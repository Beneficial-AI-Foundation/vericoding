=== Raw LLM Generate Response ===
Length: 6187 characters
--------------------------------------------------------------------------------
[
"{\n    let mut v1: nat = 0;\n    let mut i: int = 0;\n    while i < s1.len() as int\n        invariant\n            0 <= i && i <= s1.len() as int,\n            v1 == Str2Int(s1@.subrange(0, i as int)),\n        decreases s1.len() as int - i\n    {\n        let bit = if s1[i as usize] == '1' { 1nat } else { 0nat };\n        v1 = 2 * v1 + bit;\n        i += 1;\n    }\n\n    let mut v2: nat = 0;\n    let mut j: int = 0;\n    while j < s2.len() as int\n        invariant\n            0 <= j && j <= s2.len() as int,\n            v2 == Str2Int(s2@.subrange(0, j as int)),\n        decreases s2.len() as int - j\n    {\n        let bit = if s2[j as usize] == '1' { 1nat } else { 0nat };\n        v2 = 2 * v2 + bit;\n        j += 1;\n    }\n\n    let mut sum: nat = v1 + v2;\n    if sum == 0 {\n        return Vec::<char>::new();\n    }\n\n    let mut power: nat = 1;\n    while power * 2 <= sum\n        invariant\n            power >= 1,\n            power <= sum,\n        decreases sum - power\n    {\n        power = power * 2;\n    }\n\n    let mut rem: nat = sum;\n    let mut res = Vec::<char>::new();\n    let mut p: nat = power;\n    while p > 1\n        invariant\n            rem < 2 * p,\n            rem + Str2Int(res@) * 2 * p == sum,\n        decreases p\n    {\n        if rem >= p {\n            res.push('1');\n            rem = rem - p;\n        } else {\n            res.push('0');\n        }\n        p = p / 2;\n    }\n\n    if rem >= 1 {\n        res.push('1');\n        rem = rem - 1;\n    } else {\n        res.push('0');\n    }\n\n    res\n}",
"{\n    // convert dividend to nat\n    let mut n: nat = 0;\n    let mut i: int = 0;\n    while i < dividend.len() as int\n        invariant\n            0 <= i && i <= dividend.len() as int,\n            n == Str2Int(dividend@.subrange(0, i as int)),\n        decreases dividend.len() as int - i\n    {\n        let bit = if dividend[i as usize] == '1' { 1nat } else { 0nat };\n        n = 2 * n + bit;\n        i += 1;\n    }\n    // convert divisor to nat\n    let mut d: nat = 0;\n    let mut j: int = 0;\n    while j < divisor.len() as int\n        invariant\n            0 <= j && j <= divisor.len() as int,\n            d == Str2Int(divisor@.subrange(0, j as int)),\n        decreases divisor.len() as int - j\n    {\n        let bit = if divisor[j as usize] == '1' { 1nat } else { 0nat };\n        d = 2 * d + bit;\n        j += 1;\n    }\n\n    // compute quotient and remainder using native division\n    let q: nat = n / d;\n    let r: nat = n % d;\n\n    // helper: convert nat -> Vec<char>\n    fn __nat_to_vec(mut value: nat) -> Vec<char> {\n        if value == 0 {\n            return Vec::<char>::new();\n        }\n        let mut power: nat = 1;\n        while power * 2 <= value\n            invariant\n                power >= 1,\n                power <= value,\n            decreases value - power\n        {\n            power = power * 2;\n        }\n        let mut rem2: nat = value;\n        let mut out = Vec::<char>::new();\n        let mut p2: nat = power;\n        while p2 > 1\n            invariant\n                rem2 < 2 * p2,\n                rem2 + Str2Int(out@) * 2 * p2 == value,\n            decreases p2\n        {\n            if rem2 >= p2 {\n                out.push('1');\n                rem2 = rem2 - p2;\n            } else {\n                out.push('0');\n            }\n            p2 = p2 / 2;\n        }\n        if rem2 >= 1 {\n            out.push('1');\n            rem2 = rem2 - 1;\n        } else {\n            out.push('0');\n        }\n        out\n    }\n\n    let qv = __nat_to_vec(q);\n    let rv = __nat_to_vec(r);\n    (qv, rv)\n}",
"{\n    // convert sx, sy, sz to nats\n    let mut base0: nat = 0;\n    let mut i: int = 0;\n    while i < sx.len() as int\n        invariant\n            0 <= i && i <= sx.len() as int,\n            base0 == Str2Int(sx@.subrange(0, i as int)),\n        decreases sx.len() as int - i\n    {\n        let bit = if sx[i as usize] == '1' { 1nat } else { 0nat };\n        base0 = 2 * base0 + bit;\n        i += 1;\n    }\n    let mut exp0: nat = 0;\n    let mut j: int = 0;\n    while j < sy.len() as int\n        invariant\n            0 <= j && j <= sy.len() as int,\n            exp0 == Str2Int(sy@.subrange(0, j as int)),\n        decreases sy.len() as int - j\n    {\n        let bit = if sy[j as usize] == '1' { 1nat } else { 0nat };\n        exp0 = 2 * exp0 + bit;\n        j += 1;\n    }\n    let mut m: nat = 0;\n    let mut k: int = 0;\n    while k < sz.len() as int\n        invariant\n            0 <= k && k <= sz.len() as int,\n            m == Str2Int(sz@.subrange(0, k as int)),\n        decreases sz.len() as int - k\n    {\n        let bit = if sz[k as usize] == '1' { 1nat } else { 0nat };\n        m = 2 * m + bit;\n        k += 1;\n    }\n\n    // compute pow = Exp_int(base0, exp0) via fast exponentiation (exact, no mod)\n    let mut pow: nat = 1;\n    let mut b: nat = base0;\n    let mut e: nat = exp0;\n    while e > 0\n        invariant\n            pow * Exp_int(b, e) == Exp_int(base0, exp0),\n        decreases e\n    {\n        if e % 2 == 1 {\n            pow = pow * b;\n            e = e - 1;\n        } else {\n            b = b * b;\n            e = e / 2;\n        }\n    }\n\n    let res_nat: nat = pow % m;\n\n    // convert res_nat to Vec<char>\n    if res_nat == 0 {\n        return Vec::<char>::new();\n    }\n    let mut power: nat = 1;\n    while power * 2 <= res_nat\n        invariant\n            power >= 1,\n            power <= res_nat,\n        decreases res_nat - power\n    {\n        power = power * 2;\n    }\n    let mut rem2: nat = res_nat;\n    let mut out = Vec::<char>::new();\n    let mut p2: nat = power;\n    while p2 > 1\n        invariant\n            rem2 < 2 * p2,\n            rem2 + Str2Int(out@) * 2 * p2 == res_nat,\n        decreases p2\n    {\n        if rem2 >= p2 {\n            out.push('1');\n            rem2 = rem2 - p2;\n        } else {\n            out.push('0');\n        }\n        p2 = p2 / 2;\n    }\n    if rem2 >= 1 {\n        out.push('1');\n        rem2 = rem2 - 1;\n    } else {\n        out.push('0');\n    }\n\n    out\n}"
]
--------------------------------------------------------------------------------
