=== Raw LLM Generate Response ===
Length: 2049 characters
--------------------------------------------------------------------------------
["spec fn bit_val(c: char) -> nat { if c == '1' { 1 } else { 0 } }\n\nproof fn congruence_pow(a: nat, b: nat, m: nat, k: nat)\n    requires\n        a % m == b % m,\n    ensures\n        Exp_int(a, k) % m == Exp_int(b, k) % m,\n{\n}\n\nproof fn mul_mod_congruence(a: nat, b: nat, m: nat)\n    ensures\n        (a % m) * (b % m) % m == (a * b) % m,\n{\n}\n", "{\n    let base: nat = Str2Int(sx@);\n    let exp: nat = Str2Int(sy@);\n    let modu: nat = Str2Int(sz@);\n    let n: int = sy@.len() as int;\n\n    let mut i: int = 0;\n    let mut res_nat: nat = 1 % modu;\n    let mut pow_nat: nat = base % modu;\n\n    while i < n\n        invariant\n            0 <= i && i <= n,\n            res_nat == Exp_int(base, exp % Exp_int(2, i as nat)) % modu,\n            pow_nat == Exp_int(base, Exp_int(2, i as nat)) % modu,\n        decreases\n            (n as nat - i as nat),\n    {\n        let idx: int = n as int - 1 - i;\n        let b: char = sy@.index(idx);\n        if b == '1' {\n            res_nat = (res_nat * pow_nat) % modu;\n        }\n        pow_nat = (pow_nat * pow_nat) % modu;\n        i = i + 1;\n    }\n\n    // convert res_nat to Vec<char> in MSB-first order (so last char is LSB as required by Str2Int)\n    let mut v = Vec::<char>::new();\n    let mut temp: nat = res_nat;\n    if temp == 0 {\n        return v;\n    }\n\n    // find highest power p such that 2^p <= temp\n    let mut p: int = 0;\n    let mut t: nat = temp;\n    while t >= 2\n        invariant\n            t >= 1,\n        decreases\n            t,\n    {\n        t = t / 2;\n        p = p + 1;\n    }\n\n    // emit bits from p down to 0\n    let mut j: int = p;\n    while j >= 0\n        invariant\n            -1 <= j && j <= p,\n        decreases\n            (j as nat + 1),\n    {\n        let denom: nat = Exp_int(2, j as nat);\n        let bit: nat = (temp / denom) % 2;\n        if bit == 1 {\n            v.push('1');\n            temp = temp - denom;\n        } else {\n            v.push('0');\n        }\n        j = j - 1;\n    }\n\n    v\n}"]
--------------------------------------------------------------------------------
