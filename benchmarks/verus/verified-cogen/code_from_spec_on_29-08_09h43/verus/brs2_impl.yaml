vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus!{

vc-helpers: |-


vc-spec: |-
  fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32) 
  	// pre-conditions-start
  	requires 
  		old(a).len() == N,
  		old(sum).len() == 1,
  		N > 0,
  		N < 1000,
  	// pre-conditions-end
  	// post-conditions-start
  	ensures
  		sum[0] <= 2 * N,
  	// post-conditions-end

vc-code: |-
  {
      // impl-start
      let mut total: i32 = 0;
      let mut i: usize = 0;
      /* code modified by LLM (iteration 2): added decreases clause to fix verification error */
      while i < a.len()
          invariant
              i <= a.len(),
              a.len() == N,
              sum.len() == 1,
              N > 0,
              N < 1000,
              total <= 2 * (i as i32),
          decreases a.len() - i,
      {
          if a[i] > 0 {
              total = total + 1;
          }
          if a[i] < 0 {
              total = total + 1;
          }
          i = i + 1;
      }
      sum.set(0, total);
      // impl-end
  }

vc-postamble: |-
  
  }
  
  fn main() {}

