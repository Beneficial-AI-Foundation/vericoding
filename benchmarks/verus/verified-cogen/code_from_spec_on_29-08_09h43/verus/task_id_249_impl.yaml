vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  fn contains(arr: &Vec<i32>, key: i32) -> (result: bool)
      ensures
          result == (exists|i: int| 0 <= i < arr.len() && (arr[i] == key)),
  {
      let mut i = 0;
      while i < arr.len()
          invariant
              forall|m: int| 0 <= m < i ==> (arr[m] != key),
          decreases arr.len() - i,
      {
          if (arr[i] == key) {
              return true;
          }
          i += 1;
      }
      false
  }

vc-spec: |-
  fn intersection(arr1: &Vec<i32>, arr2: &Vec<i32>) -> (result: Vec<i32>)
      // post-conditions-start
      ensures
          forall|i: int|
              0 <= i < result.len() ==> (arr1@.contains(#[trigger] result[i]) && arr2@.contains(
                  #[trigger] result[i],
              )),
          forall|i: int, j: int| 0 <= i < j < result.len() ==> result[i] != result[j],
      // post-conditions-end

vc-code: |-
  {
      let mut result: Vec<i32> = Vec::new();
      let mut i = 0;
      
      /* code modified by LLM (iteration 2): added decreases clause to fix verification error */
      while i < arr1.len()
          invariant
              forall|k: int| 0 <= k < result.len() ==> (arr1@.contains(result[k]) && arr2@.contains(result[k])),
              forall|k1: int, k2: int| 0 <= k1 < k2 < result.len() ==> result[k1] != result[k2],
          decreases arr1.len() - i,
      {
          if contains(arr2, arr1[i]) && !contains(&result, arr1[i]) {
              result.push(arr1[i]);
          }
          i += 1;
      }
      
      result
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

