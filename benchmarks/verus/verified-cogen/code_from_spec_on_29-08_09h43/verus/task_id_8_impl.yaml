vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  
  verus! {

vc-helpers: |-
  fn lemma_invariant_preserved(nums: &Vec<i32>, squared: &Vec<i32>, i: usize)
      requires
          i < nums.len(),
          squared.len() == i,
          forall|k: int| 0 <= k < i ==> squared@[k] == nums@[k] * nums@[k],
          0 <= nums@[i as int] * nums@[i as int] < i32::MAX,
      ensures
          forall|k: int| 0 <= k < (i + 1) ==> squared.push(nums@[i as int] * nums@[i as int])@[k] == nums@[k] * nums@[k],
      proof {
          let new_squared = squared.push(nums@[i as int] * nums@[i as int]);
          assert forall|k: int| 0 <= k < (i + 1) implies new_squared@[k] == nums@[k] * nums@[k] by {
              if k < i {
                  assert(new_squared@[k] == squared@[k]);
                  assert(squared@[k] == nums@[k] * nums@[k]);
              } else if k == i {
                  assert(new_squared@[k] == nums@[i as int] * nums@[i as int]);
                  assert(k == i as int);
                  assert(nums@[k] == nums@[i as int]);
              }
          }
      }

vc-spec: |-
  fn square_nums(nums: &Vec<i32>) -> (squared: Vec<i32>)
      // pre-conditions-start
      requires
          forall|k: int|
              0 <= k < nums.len() ==> (0 <= #[trigger] nums[k] * #[trigger] nums[k] < i32::MAX),
      // pre-conditions-end
      // post-conditions-start
      ensures
          nums.len() == squared.len(),
          forall|k: int| 0 <= k < nums.len() ==> (#[trigger] squared[k] == nums[k] * nums[k]),
      // post-conditions-end

vc-code: |-
  fn square_nums(nums: &Vec<i32>) -> (squared: Vec<i32>)
      requires
          forall|k: int|
              0 <= k < nums.len() ==> (0 <= #[trigger] nums[k] * #[trigger] nums[k] < i32::MAX),
      ensures
          nums.len() == squared.len(),
          forall|k: int| 0 <= k < nums.len() ==> (#[trigger] squared[k] == nums[k] * nums[k]),
  {
      let mut squared = Vec::new();
      let mut i = 0;
      
      /* code modified by LLM (iteration 5): fixed function syntax by moving body inside function declaration */
      while i < nums.len()
          invariant
              i <= nums.len(),
              squared.len() == i,
              forall|k: int| 0 <= k < i ==> squared@[k] == nums@[k] * nums@[k],
          decreases nums.len() - i,
      {
          /* code modified by LLM (iteration 5): directly use nums[i] * nums[i] since precondition ensures no overflow */
          let square = nums[i] * nums[i];
          
          proof {
              lemma_invariant_preserved(&nums, &squared, i);
          }
          
          squared.push(square);
          i += 1;
      }
      
      squared
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

