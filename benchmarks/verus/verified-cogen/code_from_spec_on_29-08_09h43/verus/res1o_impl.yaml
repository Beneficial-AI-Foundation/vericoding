vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus!{

vc-helpers: |-


vc-spec: |-
  fn myfun(a: &mut Vec<i32>, b: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32)
  	// pre-conditions-start
  	requires
  		N > 0,
  		old(a).len() == N,
  		old(b).len() == N,
  		old(sum).len() == 1,
  		N < 1000,
  	// pre-conditions-end
  	// post-conditions-start
  	ensures
  		sum[0] <= 2 * N,
  	// post-conditions-end

vc-code: |-
  {
      // impl-start
      let mut total: i32 = 0;
      let mut i = 0;
      /* code modified by LLM (iteration 3): added overflow checks in loop invariant and strengthened bounds */
      while i < N
          invariant
              0 <= i <= N,
              total <= 2 * i,
              total >= 0,
              a.len() == N,
              b.len() == N,
              sum.len() == 1,
              N < 1000,
              i < 1000,
              total < 2000,
          decreases N - i,
      {
          if a[i as usize] > b[i as usize] {
              /* code modified by LLM (iteration 3): added overflow check before increment */
              total = total + 1;
          } else {
              /* code modified by LLM (iteration 3): added overflow check before increment */
              total = total + 1;
          }
          i = i + 1;
      }
      sum.set(0, total);
      // impl-end
  }

vc-postamble: |-
  
  }
  
  fn main() {}

