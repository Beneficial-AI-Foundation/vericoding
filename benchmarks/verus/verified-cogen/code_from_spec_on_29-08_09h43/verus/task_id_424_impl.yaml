vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  fn lemma_string_nonempty(s: &Vec<Vec<char>>, i: int)
      requires
          forall|j: int| 0 <= j < s.len() ==> #[trigger] s[j].len() > 0,
          0 <= i < s.len(),
      ensures
          s[i as usize].len() > 0,
  {
  }

vc-spec: |-
  fn extract_rear_chars(s: &Vec<Vec<char>>) -> (result: Vec<char>)
      // pre-conditions-start
      requires
          forall|i: int| 0 <= i < s.len() ==> #[trigger] s[i].len() > 0,
      // pre-conditions-end
      // post-conditions-start
      ensures
          s.len() == result.len(),
          forall|i: int| 0 <= i < s.len() ==> result[i] == #[trigger] s[i][s[i].len() - 1],
      // post-conditions-end

vc-code: |-
  {
      let mut result = Vec::new();
      let mut i = 0;
      /* code modified by LLM (iteration 5): fixed indexing bounds and arithmetic underflow */
      while i < s.len()
          invariant
              0 <= i <= s.len(),
              result.len() == i,
              forall|j: int| 0 <= j < i ==> #[trigger] result[j] == s[j as usize][s[j as usize].len() - 1],
          decreases s.len() - i
      {
          /* code modified by LLM (iteration 5): added lemma call and bounds check for safe indexing */
          proof {
              lemma_string_nonempty(s, i);
          }
          let last_char = s[i as usize][s[i as usize].len() - 1];
          result.push(last_char);
          i += 1;
      }
      result
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

