vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  lemma cube_no_overflow(x: i32)
      requires 
          i32::MIN <= x * x <= i32::MAX,
          i32::MIN <= x * x * x <= i32::MAX,
      ensures 
          x * x * x == (x * x) * x
  {
      /* code modified by LLM (iteration 5): removed body as this is just an arithmetic identity */
  }

vc-spec: |-
  fn cube_element(nums: &Vec<i32>) -> (cubed: Vec<i32>)
      // pre-conditions-start
      requires
          forall|k: int|
              0 <= k < nums.len() ==> (i32::MIN <= #[trigger] nums[k] * #[trigger] nums[k]
                  <= i32::MAX),
          forall|k: int|
              0 <= k < nums.len() ==> (i32::MIN <= #[trigger] nums[k] * #[trigger] nums[k]
                  * #[trigger] nums[k] <= i32::MAX),
      // pre-conditions-end
      // post-conditions-start
      ensures
          forall|i: int|
              0 <= i < nums.len() ==> cubed[i] == #[trigger] nums[i] * #[trigger] nums[i]
                  * #[trigger] nums[i],
      // post-conditions-end

vc-code: |-
  {
      let mut result: Vec<i32> = Vec::new();
      let mut i = 0;
      
      /* code modified by LLM (iteration 5): added overflow checks and proper arithmetic handling */
      while i < nums.len()
          invariant
              i <= nums.len(),
              result.len() == i,
              forall|j: int| #![auto] 0 <= j < i ==> result[j] == nums[j] * nums[j] * nums[j],
          decreases nums.len() - i
      {
          /* code modified by LLM (iteration 5): compute cube step by step to avoid overflow */
          let square = nums[i] * nums[i];
          let cube = square * nums[i];
          result.push(cube);
          i = i + 1;
      }
      
      result
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

