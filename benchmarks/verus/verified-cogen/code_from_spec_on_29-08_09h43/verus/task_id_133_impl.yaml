vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  
  verus! {
  
  spec fn sum_negative_to(seq: Seq<i64>) -> (res: int)
      decreases seq.len(),
  {
      if seq.len() == 0 {
          0
      } else {
          sum_negative_to(seq.drop_last()) + if (seq.last() < 0) {
              seq.last() as int
          } else {
              0 as int
          }
      }
  }
  // pure-end

vc-helpers: |-
  proof fn lemma_sum_negative_to_empty()
      ensures sum_negative_to(Seq::<i64>::empty()) == 0
  {
  }
  
  proof fn lemma_sum_negative_to_push(seq: Seq<i64>, x: i64)
      ensures sum_negative_to(seq.push(x)) == sum_negative_to(seq) + if x < 0 { x as int } else { 0 as int }
  {
      if seq.len() == 0 {
          assert(seq.push(x).drop_last() =~= seq);
          assert(seq.push(x).last() == x);
      } else {
          assert(seq.push(x).drop_last() =~= seq);
          assert(seq.push(x).last() == x);
      }
  }
  
  proof fn lemma_sum_negative_bounds(seq: Seq<i64>) 
      ensures sum_negative_to(seq) <= 0
      ensures sum_negative_to(seq) >= (seq.len() as int) * (i64::MIN as int)
      decreases seq.len()
  {
      if seq.len() == 0 {
      } else {
          lemma_sum_negative_bounds(seq.drop_last());
          if seq.last() < 0 {
              assert(seq.last() as int >= i64::MIN as int);
          }
      }
  }

vc-spec: |-
  fn sum_negatives(arr: &Vec<i64>) -> (sum_neg: i128)
      // post-conditions-start
      ensures
          sum_negative_to(arr@) == sum_neg,
      // post-conditions-end

vc-code: |-
  /* code modified by LLM (iteration 5): fixed ensures clause syntax error by adding opening brace */
  fn sum_negatives(arr: &Vec<i64>) -> (sum_neg: i128)
      ensures sum_negative_to(arr@) == sum_neg
  {
      let mut sum: i128 = 0;
      let mut i: usize = 0;
      
      proof {
          lemma_sum_negative_bounds(arr@);
      }
      
      while i < arr.len()
          invariant
              i <= arr.len(),
              sum == sum_negative_to(arr@.take(i as int)),
              sum >= (i as int) * (i64::MIN as i128),
              sum <= 0,
      {
          proof {
              lemma_sum_negative_to_push(arr@.take(i as int), arr@[i as int]);
              assert(arr@.take(i as int).push(arr@[i as int]) =~= arr@.take((i + 1) as int));
          }
          
          if arr[i] < 0 {
              sum = sum + arr[i] as i128;
          }
          i = i + 1;
      }
      
      proof {
          assert(arr@.take(i as int) =~= arr@);
      }
      
      sum
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

