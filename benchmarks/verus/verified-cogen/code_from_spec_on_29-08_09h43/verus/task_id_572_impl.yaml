vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn count_frequency_rcr(seq: Seq<i32>, key: i32) -> (result: int)
      decreases seq.len(),
  {
      if seq.len() == 0 {
          0
      } else {
          count_frequency_rcr(seq.drop_last(), key) + if (seq.last() == key) {
              1 as int
          } else {
              0 as int
          }
      }
  }
  // pure-end

vc-helpers: |-
  fn count_frequency(arr: &Vec<i32>, key: i32) -> (frequency: usize)
      ensures
          count_frequency_rcr(arr@, key) == frequency,
  {
      let mut index = 0;
      let mut counter = 0;
      while index < arr.len()
          invariant
              0 <= index <= arr.len(),
              0 <= counter <= index,
              count_frequency_rcr(arr@.subrange(0, index as int), key) == counter,
          decreases arr.len() - index,
      {
          if (arr[index] == key) {
              counter += 1;
          }
          index += 1;
          assert(arr@.subrange(0, index - 1 as int) == arr@.subrange(0, index as int).drop_last());
      }
      assert(arr@ == arr@.subrange(0, index as int));
      counter
  }
  
  proof fn lemma_count_frequency_rcr_filter(seq: Seq<i32>, x: i32)
      ensures
          seq.filter(|y: i32| count_frequency_rcr(seq, y) == 1).contains(x) <==> 
          seq.contains(x) && count_frequency_rcr(seq, x) == 1,
  {
      if seq.filter(|y: i32| count_frequency_rcr(seq, y) == 1).contains(x) {
          assert(seq.contains(x));
          assert(count_frequency_rcr(seq, x) == 1);
      }
      if seq.contains(x) && count_frequency_rcr(seq, x) == 1 {
          assert(seq.filter(|y: i32| count_frequency_rcr(seq, y) == 1).contains(x));
      }
  }
  
  proof fn lemma_subrange_filter_property(seq: Seq<i32>, i: int)
      requires 0 <= i <= seq.len()
      ensures
          forall |x: i32| seq.subrange(0, i).contains(x) && count_frequency_rcr(seq, x) == 1 ==> 
              seq.subrange(0, i).filter(|y: i32| count_frequency_rcr(seq, y) == 1).contains(x)
  {
      forall |x: i32| seq.subrange(0, i).contains(x) && count_frequency_rcr(seq, x) == 1 
      implies {
          seq.subrange(0, i).filter(|y: i32| count_frequency_rcr(seq, y) == 1).contains(x);
      } {
          lemma_count_frequency_rcr_filter(seq.subrange(0, i), x);
      }
  }

vc-spec: |-
  fn remove_duplicates(arr: &Vec<i32>) -> (unique_arr: Vec<i32>)
      // post-conditions-start
      ensures
          unique_arr@ == arr@.filter(|x: i32| count_frequency_rcr(arr@, x) == 1),
      // post-conditions-end

vc-code: |-
  {
      let mut unique_arr: Vec<i32> = Vec::new();
      let mut i = 0;
      
      /* code modified by LLM (iteration 5): fixed invariant syntax and proof block */
      while i < arr.len()
          invariant
              0 <= i <= arr.len(),
              forall |j: int| 0 <= j < unique_arr.len() ==> 
                  (exists |k: int| 0 <= k < i && arr@[k] == unique_arr@[j] && count_frequency_rcr(arr@, unique_arr@[j]) == 1),
              forall |j: int| 0 <= j < i ==> 
                  (count_frequency_rcr(arr@, arr@[j]) == 1) ==> unique_arr@.contains(arr@[j]),
          decreases arr.len() - i,
      {
          let freq = count_frequency(arr, arr[i]);
          if freq == 1 {
              unique_arr.push(arr[i]);
          }
          
          i += 1;
      }
      
      proof {
          /* code modified by LLM (iteration 5): complete proof of postcondition */
          assert(i == arr.len());
          let result_seq = arr@.filter(|x: i32| count_frequency_rcr(arr@, x) == 1);
          
          forall |x: i32| result_seq.contains(x) implies unique_arr@.contains(x) {
              lemma_count_frequency_rcr_filter(arr@, x);
              assert(arr@.contains(x) && count_frequency_rcr(arr@, x) == 1);
              assert(exists |k: int| 0 <= k < arr.len() && arr@[k] == x);
              let k = choose |k: int| 0 <= k < arr.len() && arr@[k] == x;
              assert(unique_arr@.contains(x));
          }
          
          forall |x: i32| unique_arr@.contains(x) implies result_seq.contains(x) {
              assert(exists |k: int| 0 <= k < arr.len() && arr@[k] == x && count_frequency_rcr(arr@, x) == 1);
              lemma_count_frequency_rcr_filter(arr@, x);
              assert(result_seq.contains(x));
          }
          
          assert(unique_arr@ =~= result_seq);
      }
      
      unique_arr
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

