vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  proof fn lemma_all_equal_implies_forall(seq: &Vec<Vec<i32>>, first_len: usize)
      requires
          seq.len() > 0,
          forall|k: int| 0 <= k < seq.len() ==> seq[k].len() == first_len,
      ensures
          forall|i: int, j: int| (0 <= i < seq.len() && 0 <= j < seq.len()) ==> seq[i].len() == seq[j].len(),
  {
      assert forall|i: int, j: int| (0 <= i < seq.len() && 0 <= j < seq.len()) implies seq[i].len() == seq[j].len() by {
          if 0 <= i < seq.len() && 0 <= j < seq.len() {
              assert(seq[i].len() == first_len);
              assert(seq[j].len() == first_len);
          }
      }
  }
  
  proof fn lemma_exists_different_implies_not_forall(seq: &Vec<Vec<i32>>, i: int, j: int)
      requires
          seq.len() > 0,
          0 <= i < seq.len(),
          0 <= j < seq.len(),
          seq[i].len() != seq[j].len(),
      ensures
          !(forall|x: int, y: int| (0 <= x < seq.len() && 0 <= y < seq.len()) ==> seq[x].len() == seq[y].len()),
  {
      /* code modified by LLM (iteration 3): fixed type compatibility by using int indexing */
      assert(0 <= i < seq.len() && 0 <= j < seq.len());
      assert(seq[i].len() != seq[j].len());
  }

vc-spec: |-
  fn all_sequence_equal_length(seq: &Vec<Vec<i32>>) -> (result: bool)
      // pre-conditions-start
      requires
          seq.len() > 0,
      // pre-conditions-end
      // post-conditions-start
      ensures
          result == (forall|i: int, j: int|
              (0 <= i < seq.len() && 0 <= j < seq.len()) ==> (#[trigger] seq[i].len()
                  == #[trigger] seq[j].len())),
      // post-conditions-end

vc-code: |-
  {
      if seq.len() == 1 {
          return true;
      }
      
      let first_len = seq[0].len();
      
      for i in 1..seq.len()
          invariant
              forall|k: int| 0 <= k < i ==> seq[k].len() == first_len,
      {
          /* code modified by LLM (iteration 3): fixed type compatibility by using int indexing for lemma call */
          if seq[i].len() != first_len {
              proof {
                  lemma_exists_different_implies_not_forall(seq, 0, i as int);
              }
              return false;
          }
      }
      
      proof {
          lemma_all_equal_implies_forall(seq, first_len);
      }
      
      true
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

