vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn sum_to(arr: Seq<i64>) -> (result: int)
      decreases arr.len(),
  {
      if arr.len() == 0 {
          0
      } else {
          sum_to(arr.drop_last()) + arr.last()
      }
  }
  // pure-end

vc-helpers: |-
  proof fn sum_to_extend(arr: Seq<i64>, x: i64)
      ensures sum_to(arr.push(x)) == sum_to(arr) + x
      decreases arr.len()
  {
      if arr.len() == 0 {
          assert(arr.push(x).last() == x);
          assert(arr.push(x).drop_last() =~= arr);
      } else {
          assert(arr.push(x).last() == x);
          assert(arr.push(x).drop_last() == arr);
      }
  }
  
  proof fn sum_to_empty()
      ensures sum_to(Seq::<i64>::empty()) == 0
  {
  }
  
  proof fn sum_to_bounds(arr: Seq<i64>)
      ensures sum_to(arr) >= -(arr.len() as int) * (i64::MAX as int)
      ensures sum_to(arr) <= (arr.len() as int) * (i64::MAX as int)
      decreases arr.len()
  {
      if arr.len() == 0 {
      } else {
          sum_to_bounds(arr.drop_last());
      }
  }

vc-spec: |-
  fn sum(arr: &Vec<i64>) -> (sum: i128)
      // post-conditions-start
      ensures
          sum_to(arr@) == sum,
      // post-conditions-end

vc-code: |-
  fn sum(arr: &Vec<i64>) -> (sum: i128)
      ensures sum_to(arr@) == sum
  {
      let mut result: i128 = 0;
      let mut i: usize = 0;
      
      /* code modified by LLM (iteration 5): fixed compilation error by adding missing curly braces */
      while i < arr.len()
          invariant
              0 <= i <= arr.len(),
              result == sum_to(arr@.subrange(0, i as int)),
              result >= -(i as int) * (i64::MAX as int),
              result <= (i as int) * (i64::MAX as int),
          decreases arr.len() - i,
      {
          proof {
              sum_to_extend(arr@.subrange(0, i as int), arr@[i as int]);
              assert(arr@.subrange(0, i as int).push(arr@[i as int]) =~= arr@.subrange(0, i as int + 1));
              sum_to_bounds(arr@);
          }
          result = result + arr[i] as i128;
          i = i + 1;
      }
      
      proof {
          assert(arr@.subrange(0, i as int) =~= arr@);
      }
      
      result
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

