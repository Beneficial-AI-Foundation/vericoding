vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  fn contains(arr: &Vec<i32>, key: i32) -> (result: bool)
      // post-conditions-start
      ensures
          result == (exists|i: int| 0 <= i < arr.len() && (arr[i] == key)),
      // post-conditions-end
  {
      // impl-start
      let mut i = 0;
      /* code modified by LLM (iteration 2): added decreases clause */
      while i < arr.len()
          // invariants-start
          invariant
              forall|m: int| 0 <= m < i ==> (arr[m] != key),
          // invariants-end
          decreases arr.len() - i
      {
          if (arr[i] == key) {
              return true;
          }
          i += 1;
      }
      false
      // impl-end
  }

vc-spec: |-
  fn intersection(arr1: &Vec<i32>, arr2: &Vec<i32>) -> (result: Vec<i32>)
      // post-conditions-start
      ensures
          forall|i: int|
              0 <= i < result.len() ==> (arr1@.contains(#[trigger] result[i]) && arr2@.contains(
                  #[trigger] result[i],
              )),
          forall|i: int, j: int| 0 <= i < j < result.len() ==> result[i] != result[j],
      // post-conditions-end

vc-code: |-
  {
      // impl-start
      let mut result: Vec<i32> = vec![];
      
      for i in 0..arr1.len()
          invariant
              forall|k: int| 0 <= k < result.len() ==> (arr1@.contains(#[trigger] result[k]) && arr2@.contains(#[trigger] result[k])),
              forall|k1: int, k2: int| 0 <= k1 < k2 < result.len() ==> result[k1] != result[k2],
      {
          let val = arr1[i];
          if contains(arr2, val) {
              let mut already_added = false;
              /* code modified by LLM (iteration 5): removed invariant_except_break and used standard loop */
              for j in 0..result.len()
                  invariant
                      already_added == (exists|m: int| 0 <= m < j && result[m] == val),
              {
                  if result[j] == val {
                      already_added = true;
                      break;
                  }
              }
              if !already_added {
                  result.push(val);
              }
          }
      }
      
      result
      // impl-end
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

