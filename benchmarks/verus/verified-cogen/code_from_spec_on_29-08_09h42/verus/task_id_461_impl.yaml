vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_lower_case(c: char) -> (result: bool) {
      (c as u32) >= 97 && (c as u32) <= 122
  }
  // pure-end
  // pure-end
  
  spec fn is_upper_case(c: char) -> (result: bool) {
      (c as u32) >= 65 && (c as u32) <= 90
  }
  // pure-end
  // pure-end
  
  spec fn count_uppercase_recursively(seq: Seq<char>) -> (result: int)
      decreases seq.len(),
  {
      if seq.len() == 0 {
          0
      } else {
          count_uppercase_recursively(seq.drop_last()) + if is_upper_case(seq.last()) {
              1 as int
          } else {
              0 as int
          }
      }
  }
  // pure-end

vc-helpers: |-
  proof fn count_uppercase_recursively_bound(seq: Seq<char>)
      ensures count_uppercase_recursively(seq) >= 0,
              count_uppercase_recursively(seq) <= seq.len(),
      decreases seq.len(),
  {
      if seq.len() == 0 {
      } else {
          count_uppercase_recursively_bound(seq.drop_last());
      }
  }
  
  /* code modified by LLM (iteration 5): fixed to use correct recursive structure matching the spec */
  proof fn count_uppercase_recursively_prefix(seq: Seq<char>, i: int)
      requires 0 <= i <= seq.len(),
      ensures count_uppercase_recursively(seq.take(i as int)) <= i,
              count_uppercase_recursively(seq.take(i as int)) >= 0,
      decreases i,
  {
      if i == 0 {
          assert(seq.take(0) =~= Seq::<char>::empty());
      } else {
          count_uppercase_recursively_prefix(seq, i - 1);
          let prefix = seq.take(i as int);
          let shorter_prefix = seq.take((i - 1) as int);
          assert(prefix.len() == i);
          assert(shorter_prefix.len() == i - 1);
          if i > 0 {
              assert(prefix =~= shorter_prefix.push(seq[i - 1]));
              assert(prefix.drop_last() =~= shorter_prefix);
              assert(prefix.last() == seq[i - 1]);
          }
      }
  }
  
  /* code modified by LLM (iteration 5): added lemma to help with loop assertion */
  proof fn count_uppercase_take_extend(seq: Seq<char>, i: int)
      requires 0 <= i < seq.len(),
      ensures count_uppercase_recursively(seq.take((i + 1) as int)) == 
              count_uppercase_recursively(seq.take(i as int)) + 
              if is_upper_case(seq[i]) { 1int } else { 0int },
  {
      let full_prefix = seq.take((i + 1) as int);
      let short_prefix = seq.take(i as int);
      assert(full_prefix =~= short_prefix.push(seq[i]));
      assert(full_prefix.drop_last() =~= short_prefix);
      assert(full_prefix.last() == seq[i]);
  }
  
  fn is_upper_case_exec(c: char) -> (result: bool)
      ensures result == is_upper_case(c),
  {
      let code = c as u32;
      code >= 65 && code <= 90
  }

vc-spec: |-
  fn count_uppercase(text: &Vec<char>) -> (count: u64)
      // post-conditions-start
      ensures
          0 <= count <= text.len(),
          count_uppercase_recursively(text@) == count,
      // post-conditions-end

vc-code: |-
  {
      let mut count: u64 = 0;
      let mut i: usize = 0;
      
      proof {
          count_uppercase_recursively_bound(text@);
      }
      
      while i < text.len()
          invariant
              0 <= i <= text.len(),
              0 <= count <= i,
              count == count_uppercase_recursively(text@.take(i as int)),
          decreases text.len() - i,
      {
          /* code modified by LLM (iteration 5): moved proof block before increment to use old_i properly */
          proof {
              let old_i = i;
              count_uppercase_take_extend(text@, old_i as int);
          }
          
          if is_upper_case_exec(text[i]) {
              count = count + 1;
          }
          
          i = i + 1;
      }
      
      proof {
          assert(text@.take(text@.len() as int) =~= text@);
      }
      
      count
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

