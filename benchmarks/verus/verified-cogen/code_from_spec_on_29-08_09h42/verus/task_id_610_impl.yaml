vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  fn lemma_subrange_properties(s: Seq<i32>, start: int, end: int)
      requires 0 <= start <= end <= s.len()
      ensures s.subrange(start, end).len() == end - start
  {
  }
  
  fn lemma_subrange_add(s: Seq<i32>, k: int)
      requires 0 < k < s.len()
      ensures s.subrange(0, k).add(s.subrange(k, s.len() as int)) == s.subrange(0, k).add(s.subrange(k, s.len() as int))
  {
  }

vc-spec: |-
  fn remove_kth_element(list: &Vec<i32>, k: usize) -> (new_list: Vec<i32>)
      // pre-conditions-start
      requires
          list.len() > 0,
          0 < k < list@.len(),
      // pre-conditions-end
      // post-conditions-start
      ensures
          new_list@ == list@.subrange(0, k - 1 as int).add(
              list@.subrange(k as int, list.len() as int),
          ),
      // post-conditions-end

vc-code: |-
  {
      let mut new_list = Vec::new();
      
      let mut i = 0;
      /* code modified by LLM (iteration 5): fixed bounds check and invariant */
      while i < k - 1
          invariant
              0 <= i <= k - 1,
              k - 1 <= list.len(),
              new_list@ == list@.subrange(0, i as int),
          decreases k - 1 - i
      {
          new_list.push(list[i]);
          i += 1;
      }
      
      let mut j = k;
      /* code modified by LLM (iteration 5): fixed invariant with proper type casting */
      while j < list.len()
          invariant
              k <= j <= list.len(),
              k < list.len(),
              new_list@ == list@.subrange(0, k - 1 as int).add(
                  list@.subrange(k as int, j as int)
              ),
          decreases list.len() - j
      {
          new_list.push(list[j]);
          j += 1;
      }
      
      new_list
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

