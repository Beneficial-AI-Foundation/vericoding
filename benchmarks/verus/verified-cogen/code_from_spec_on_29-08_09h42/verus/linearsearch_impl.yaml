vc-description: |-


vc-preamble: |-
  #[allow(unused_imports)]
  use vstd::prelude::*;
  
  
  verus! {

vc-helpers: |-


vc-spec: |-
  fn linear_search(nums: Vec<i32>, target: i32) -> (ret: i32)
      // pre-conditions-start
      requires
          nums@.len() < 0x8000_0000,
      // pre-conditions-end
      // post-conditions-start
      ensures
          ret < nums@.len(),
          ret >=0 ==> nums@[ret as int] == target,
          ret >=0 ==> forall |i: int| 0 <= i < ret as int ==> #[trigger]nums@[i]!= target,
          ret < 0 ==> forall |i: int| 0 <= i < nums@.len() as int ==> #[trigger]nums@[i] != target,
      // post-conditions-end

vc-code: |-
  {
      let mut i: usize = 0;
      /* code modified by LLM (iteration 5): added bound check in proof and truncate attribute for cast */
      while i < nums.len()
          invariant
              i <= nums@.len(),
              forall |j: int| 0 <= j < i ==> #[trigger]nums@[j] != target,
          decreases nums@.len() - i
      {
          if nums[i] == target {
              /* code modified by LLM (iteration 5): added bound check proof for cast safety */
              proof {
                  assert(i < nums@.len());
                  assert(nums@[i as int] == target);
                  assert(forall |j: int| 0 <= j < i ==> #[trigger]nums@[j] != target);
                  assert(i < 0x8000_0000);
              }
              return #[verifier::truncate] i as i32;
          }
          i += 1;
      }
      /* code modified by LLM (iteration 5): updated proof block for -1 case with proper postcondition verification */
      proof {
          assert(i == nums@.len());
          assert(forall |j: int| 0 <= j < nums@.len() as int ==> #[trigger]nums@[j] != target);
      }
      -1
  }

vc-postamble: |-
  
  }
  
  fn main() {}

