vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  
  verus!{
  
  spec fn triangle(n: nat) -> (result: nat)
      decreases n
  {
      if n == 0 {
          0
      } else {
          n + triangle((n - 1) as nat)
      }
  }
  // pure-end

vc-helpers: |-
  proof fn triangle_is_monotonic(i: nat, j: nat)
      requires
          i <= j,
      ensures
          triangle(i) <= triangle(j),
      decreases j
  {
      if i < j {
          triangle_is_monotonic(i, (j - 1) as nat);
      }
  }
  
  proof fn triangle_accumulates(start: nat, end: nat, acc: nat)
      requires
          start <= end,
          acc == triangle(start),
      ensures
          acc + (triangle(end) - triangle(start)) == triangle(end),
      decreases end - start
  {
      if start < end {
          assert(triangle(end) == end + triangle((end - 1) as nat));
          if start < end - 1 {
              triangle_accumulates(start, (end - 1) as nat, acc);
          }
      }
  }
  
  proof fn triangle_step_property(k: nat)
      ensures
          triangle(k + 1) == triangle(k) + (k + 1),
  {
      assert(triangle(k + 1) == (k + 1) + triangle(k));
  }

vc-spec: |-
  fn tail_triangle(n: u32, idx: u32, sum: &mut u32)
      // pre-conditions-start
      requires
          idx <= n,
          *old(sum) == triangle(idx as nat),
          triangle(n as nat) < 0x1_0000_0000,
      // pre-conditions-end
      // post-conditions-start
      ensures
          *sum == triangle(n as nat),
      // post-conditions-end

vc-code: |-
  {
      let mut current_idx = idx;
      /* code modified by LLM (iteration 5): update sum before incrementing current_idx to maintain invariant and avoid overflow */
      while current_idx < n
          invariant
              current_idx <= n,
              *sum == triangle(current_idx as nat),
              triangle(n as nat) < 0x1_0000_0000,
          decreases n - current_idx,
      {
          /* code modified by LLM (iteration 5): update sum first with next value, then increment */
          *sum = *sum + (current_idx + 1);
          current_idx = current_idx + 1;
          proof {
              triangle_step_property((current_idx - 1) as nat);
          }
      }
  }

vc-postamble: |-
  
  }
  
  fn main() {}

