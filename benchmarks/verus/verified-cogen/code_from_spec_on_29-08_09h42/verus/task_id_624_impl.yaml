vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_lower_case(c: char) -> (result: bool) {
      c >= 'a' && c <= 'z'
  }
  // pure-end
  // pure-end
  
  spec fn shift_minus_32_spec(c: char) -> (result: char) {
      ((c as u8) - 32) as char
  }
  // pure-end
  // pure-end
  
  spec fn inner_expr_to_uppercase(str1: &Vec<char>, i: int) -> (result:char) {
      if is_lower_case(#[trigger] str1[i]) {
          shift_minus_32_spec(str1[i])
      } else {
          str1[i]
      }
  }

vc-helpers: |-
  proof fn lemma_shift_minus_32_bounds(c: char)
      requires c >= 'a' && c <= 'z'
      ensures ((c as u8) - 32) >= ('A' as u8) && ((c as u8) - 32) <= ('Z' as u8)
  {
      assert('a' as u8 == 97);
      assert('z' as u8 == 122);
      assert('A' as u8 == 65);
      assert('Z' as u8 == 90);
  }
  
  fn is_lower_case_exec(c: char) -> (result: bool)
      ensures result == is_lower_case(c)
  {
      c >= 'a' && c <= 'z'
  }

vc-spec: |-
  fn to_uppercase(str1: &Vec<char>) -> (result: Vec<char>)
      // post-conditions-start
      ensures
          str1@.len() == result@.len(),
          forall|i: int|
              0 <= i < str1.len() ==> (result[i] == (inner_expr_to_uppercase(str1, i))),
      // post-conditions-end

vc-code: |-
  {
      let mut result = Vec::new();
      let mut i = 0;
      
      /* code modified by LLM (iteration 3): added decreases clause to fix verification error */
      while i < str1.len()
          invariant
              0 <= i <= str1.len(),
              result@.len() == i,
              forall|j: int| 0 <= j < i ==> result[j] == inner_expr_to_uppercase(str1, j)
          decreases str1.len() - i
      {
          let c = str1[i];
          /* code modified by LLM (iteration 2): replaced spec function call with executable version */
          if is_lower_case_exec(c) {
              proof {
                  lemma_shift_minus_32_bounds(c);
              }
              let upper_c = ((c as u8) - 32) as char;
              result.push(upper_c);
          } else {
              result.push(c);
          }
          i += 1;
      }
      
      result
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

