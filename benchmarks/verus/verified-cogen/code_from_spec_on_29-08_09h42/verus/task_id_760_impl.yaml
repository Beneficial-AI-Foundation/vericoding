vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  
  verus! {

vc-helpers: |-


vc-spec: |-
  fn has_only_one_distinct_element(arr: &Vec<i32>) -> (result: bool)
      // pre-conditions-start
      ensures
          result == (forall|i: int| 1 <= i < arr@.len() ==> arr[0] == #[trigger] arr[i]),
      // pre-conditions-end

vc-code: |-
  {
      if arr.len() == 0 {
          return true;
      }
      
      let first_element = arr[0];
      
      for i in 1..arr.len()
          invariant
              /* code modified by LLM (iteration 5): fixed invariant and postcondition bounds */
              forall|j: int| 1 <= j < i ==> arr[0] == #[trigger] arr[j]
      {
          if arr[i] != first_element {
              /* code modified by LLM (iteration 5): added proof block with explicit trigger annotations */
              proof {
                  assert(arr[0] != arr[i as int]);
                  assert(1 <= i < arr@.len());
                  assert(exists|k: int| 1 <= k < arr@.len() && arr[0] != #[trigger] arr[k]) by {
                      assert(arr[0] != arr[i as int]);
                      assert(1 <= i < arr@.len());
                  };
              }
              return false;
          }
      }
      
      /* code modified by LLM (iteration 5): added proof block to establish postcondition with trigger */
      proof {
          assert(forall|j: int| 1 <= j < arr@.len() ==> arr[0] == #[trigger] arr[j]);
      }
      true
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

