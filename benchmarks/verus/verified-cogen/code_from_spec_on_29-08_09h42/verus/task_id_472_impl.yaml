vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-


vc-spec: |-
  fn contains_consecutive_numbers(arr: &Vec<i32>) -> (is_consecutive: bool)
      // pre-conditions-start
      requires
          arr.len() > 0,
          forall|i: int| 0 <= i < arr.len() ==> (0 <= #[trigger] arr[i] + 1 < i32::MAX),
      // pre-conditions-end
      // post-conditions-start
      ensures
          is_consecutive == (forall|i: int, j: int|
              0 <= i < j < arr.len() && j == i + 1 ==> (arr[i] + 1 == arr[j])),
      // post-conditions-end

vc-code: |-
  {
      // impl-start
      if arr.len() == 1 {
          return true;
      }
      
      let mut i = 0;
      /* code modified by LLM (iteration 5): fixed invariant to match postcondition exactly */
      while i < arr.len() - 1
          invariant
              0 <= i <= arr.len() - 1,
              forall|k: int, l: int| 0 <= k < l < arr.len() && l == k + 1 && l <= i ==> arr[k] + 1 == arr[l],
          decreases arr.len() - 1 - i
      {
          /* code modified by LLM (iteration 5): added proof block to establish postcondition on early return */
          if arr[i] == i32::MAX || arr[i] + 1 != arr[i + 1] {
              proof {
                  assert(arr[i] + 1 != arr[i + 1]);
                  assert(0 <= i < i + 1 < arr.len() && i + 1 == i + 1);
                  assert(exists|x: int, y: int| 0 <= x < y < arr.len() && y == x + 1 && arr[x] + 1 != arr[y]);
              }
              return false;
          }
          i += 1;
      }
      /* code modified by LLM (iteration 5): added proof block to establish postcondition on success */
      proof {
          assert(forall|k: int, l: int| 0 <= k < l < arr.len() && l == k + 1 ==> arr[k] + 1 == arr[l]);
      }
      true
      // impl-end
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

