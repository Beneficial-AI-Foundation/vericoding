vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  proof fn lemma_subrange_full<T>(s: Seq<T>)
      ensures s.subrange(0, s.len() as int) == s
  {
  }
  
  proof fn lemma_subrange_extend_filter<T>(s: Seq<T>, i: int, pred: spec_fn(T) -> bool)
      requires 0 <= i < s.len()
      ensures s.subrange(0, i + 1).filter(pred) == 
              if pred(s[i]) { 
                  s.subrange(0, i).filter(pred).push(s[i])
              } else { 
                  s.subrange(0, i).filter(pred)
              }
  {
      assert(s.subrange(0, i + 1) == s.subrange(0, i).push(s[i]));
  }

vc-spec: |-
  fn find_odd_numbers(arr: &Vec<u32>) -> (odd_numbers: Vec<u32>)
      // post-conditions-start
      ensures
          odd_numbers@ == arr@.filter(|x: u32| x % 2 != 0),
      // post-conditions-end

vc-code: |-
  {
      let mut odd_numbers = Vec::new();
      let mut i = 0;
      
      /* code modified by LLM (iteration 5): added proof block to establish invariant maintenance */
      while i < arr.len()
          invariant
              0 <= i <= arr.len(),
              odd_numbers@ == arr@.subrange(0, i as int).filter(|x: u32| x % 2 != 0),
          decreases arr.len() - i,
      {
          if arr[i] % 2 != 0 {
              odd_numbers.push(arr[i]);
              /* code modified by LLM (iteration 5): added proof to maintain invariant after push */
              proof {
                  lemma_subrange_extend_filter(arr@, i as int, |x: u32| x % 2 != 0);
              }
          } else {
              /* code modified by LLM (iteration 5): added proof to maintain invariant when not pushing */
              proof {
                  lemma_subrange_extend_filter(arr@, i as int, |x: u32| x % 2 != 0);
              }
          }
          i += 1;
      }
      
      /* code modified by LLM (iteration 5): added proof to establish postcondition */
      proof {
          lemma_subrange_full(arr@);
      }
      
      odd_numbers
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() { }

