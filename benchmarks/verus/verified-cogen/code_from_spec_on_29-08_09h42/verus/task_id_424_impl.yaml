vc-description: |-


vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  fn lemma_string_nonempty_has_last_char(s: &Vec<char>)
      requires s.len() > 0
      ensures s.len() - 1 < s.len()
  {
      assert(s.len() >= 1);
      assert(s.len() - 1 < s.len());
  }

vc-spec: |-
  fn extract_rear_chars(s: &Vec<Vec<char>>) -> (result: Vec<char>)
      // pre-conditions-start
      requires
          forall|i: int| 0 <= i < s.len() ==> #[trigger] s[i].len() > 0,
      // pre-conditions-end
      // post-conditions-start
      ensures
          s.len() == result.len(),
          forall|i: int| 0 <= i < s.len() ==> result[i] == #[trigger] s[i][s[i].len() - 1],
      // post-conditions-end

vc-code: |-
  {
      let mut result = Vec::new();
      
      let mut i = 0;
      /* code modified by LLM (iteration 5): fixed type mismatch by converting usize to int for comparisons */
      while i < s.len()
          invariant
              i <= s.len(),
              result.len() == i,
              forall|j: int| 0 <= j < i ==> result[j] == s[j][s[j].len() - 1],
          decreases s.len() - i
      {
          proof {
              assert(i < s.len());
              assert(s[i].len() as int > 0);
              assert(s[i].len() as int >= 1);
              assert(s[i].len() as int - 1 < s[i].len() as int);
          }
          let last_char = s[i][s[i].len() - 1];
          result.push(last_char);
          i += 1;
      }
      
      result
  }

vc-postamble: |-
  
  } // verus!
  
  fn main() {}

