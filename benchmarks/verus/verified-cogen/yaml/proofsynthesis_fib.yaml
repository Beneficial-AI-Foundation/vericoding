vc-description: |-

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn fibo(n: int) -> (result:nat)
      decreases n
  {
      if n <= 0 { 0 } else if n == 1 { 1 }
      else { fibo(n - 2) + fibo(n - 1) }
  }
  // pure-end
  // pure-end
  
  spec fn fibo_fits_i32(n: int) -> (result:bool) {
      fibo(n) < 0x8000_0000
  }
  // pure-end

vc-helpers: |-

vc-spec: |-
  fn fibonacci(n: usize) -> (ret: Vec<i32>)
      // pre-conditions-start
      requires
          fibo_fits_i32(n as int),
          n >= 2,
      // pre-conditions-end
      // post-conditions-start
      ensures
          forall |i: int| 2 <= i < n ==> #[trigger] ret@[i] ==  fibo(i), 
          ret@.len() == n,
      // post-conditions-end

vc-code: |-
  {
      assume(false);
      vec![]
  }

vc-postamble: |-
  }
  
  fn main() {}

