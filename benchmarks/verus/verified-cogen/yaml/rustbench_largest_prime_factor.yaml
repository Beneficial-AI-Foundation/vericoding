vc-description: |-

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn is_prime_pred(n: u32) -> bool {
      forall|k: int| 2 <= k < n ==> #[trigger] (n as int % k) != 0
  }

vc-helpers: |-
  #[verifier::loop_isolation(false)]
  fn is_prime(n: u32) -> (result: bool)
      requires
          n >= 2,
      ensures
          result ==> (forall|k: int| 2 <= k < n ==> #[trigger] (n as int % k) != 0),
          !result ==> exists|k: int| 2 <= k < n && #[trigger] (n as int % k) == 0,
  {
      let mut i = 2;
      let mut result = true;
      while i < n
          invariant
              2 <= i <= n,
              result ==> forall|k: int| 2 <= k < i ==> #[trigger] (n as int % k) != 0,
              !result ==> exists|k: int| 2 <= k < i && #[trigger] (n as int % k) == 0,
      {
          if n % i == 0 {
              result = false;
          }
          i = i + 1;
      }
      result
  }

vc-spec: |-
  #[verifier::loop_isolation(false)]
  fn largest_prime_factor(n: u32) -> (result: u32)
      requires
          2 <= n <= u32::MAX - 1,
      ensures
          1 <= result <= n,
          result == 1 || (result > 1 && is_prime_pred(result))

vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }

vc-postamble: |-

  fn main() {}
  }