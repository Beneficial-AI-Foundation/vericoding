vc-description: |-

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  fn contains(arr: &Vec<i32>, key: i32) -> (result: bool)
      // post-conditions-start
      ensures
          result == (exists|i: int| 0 <= i < arr.len() && (arr[i] == key)),
      // post-conditions-end
  {
      // impl-start
      let mut i = 0;
      while i < arr.len()
          // invariants-start
          invariant
              forall|m: int| 0 <= m < i ==> (arr[m] != key),
          // invariants-end
      {
          if (arr[i] == key) {
              return true;
          }
          i += 1;
      }
      false
      // impl-end
  }

vc-spec: |-
  fn shared_elements(list1: &Vec<i32>, list2: &Vec<i32>) -> (shared: Vec<i32>)
      // post-conditions-start
      ensures
          forall|i: int|
              0 <= i < shared.len() ==> (list1@.contains(#[trigger] shared[i]) && list2@.contains(
                  #[trigger] shared[i],
              )),
          forall|i: int, j: int| 0 <= i < j < shared.len() ==> shared[i] != shared[j],
      // post-conditions-end

vc-code: |-
  {
      // impl-start
      assume(false);
      vec![]
      // impl-end
  }

vc-postamble: |-

  } // verus!

  fn main() {}