{"id": "VH0004", "language": "verus", "source": "humaneval", "source_id": "humaneval_004", "vc-description": "This task implements the calculation of Mean Absolute Deviation (MAD)\nfor a sequence of floating-point numbers. The MAD is defined as the average of the\nabsolute deviations from the arithmetic mean of the data set.\n\nThe implementation should calculate the arithmetic mean, compute absolute deviations\nfrom this mean for each element, and then return the average of these absolute deviations\nwhile ensuring the result is non-negative.", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn sum(numbers: Seq<f64>) -> f64\n    decreases numbers.len()\n{\n    if numbers.len() == 0 {\n        0.0\n    } else {\n        numbers[0] + sum(numbers.drop_first())\n    }\n}\n\nspec fn abs(x: f64) -> f64 {\n    if x >= 0.0 { x } else { -x }\n}\n\nspec fn valid_input(numbers: Seq<f64>) -> bool {\n    numbers.len() > 0\n}\n\nspec fn arithmetic_mean(numbers: Seq<f64>) -> f64 {\n    sum(numbers) / (numbers.len() as f64)\n}\n\nspec fn absolute_deviations(numbers: Seq<f64>) -> Seq<f64> {\n    Seq::new(numbers.len(), |i: int| abs(numbers[i] - arithmetic_mean(numbers)))\n}\n\nspec fn mad(numbers: Seq<f64>) -> f64 {\n    sum(absolute_deviations(numbers)) / (numbers.len() as f64)\n}", "vc-helpers": "proof fn sum_non_negative(numbers: Seq<f64>)\n    requires forall|i: int| 0 <= i < numbers.len() ==> numbers[i] >= 0.0,\n    ensures sum(numbers) >= 0.0,\n    decreases numbers.len(),\n{\n    if numbers.len() == 0 {\n    } else {\n        sum_non_negative(numbers.drop_first());\n    }\n}", "vc-spec": "fn mean_absolute_deviation(numbers: Vec<f64>) -> (result: f64)\n    requires valid_input(numbers@)\n    ensures result >= 0.0 && result == mad(numbers@)", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "\n}\n\nfn main() {}", "qa-issue": 1, "qa-issue-type": "non_compiling"}
