vc-description: |-
  /--
  function_signature: "fn rolling_max(numbers: Vec<i32>) -> (result: Vec<i32>)"
  docstring: Compute rolling maximum values over a sliding window in an array.
  -/

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn seq_max(a: Seq<i32>) -> (ret: i32)
      decreases a.len(),
  {
      if a.len() == 0 {
          i32::MIN
      } else if a.last() > seq_max(a.drop_last()) {
          a.last()
      } else {
          seq_max(a.drop_last())
      }
  }

vc-helpers: |-
  proof fn seq_max_extend(a: Seq<i32>, x: i32)
      requires a.len() > 0,
      ensures seq_max(a.push(x)) == if x > seq_max(a) { x } else { seq_max(a) },
  {
      let extended = a.push(x);
      assert(extended.last() == x);
      assert(extended.drop_last() == a);
  }
  
  proof fn seq_max_single(x: i32)
      ensures seq_max(seq![x]) == x,
  {
      let s = seq![x];
      assert(s.len() == 1);
      assert(s.last() == x);
      assert(s.drop_last().len() == 0);
      assert(seq_max(s.drop_last()) == i32::MIN);
      assert(x > i32::MIN);
  }
  
  proof fn seq_max_prefix_monotonic(a: Seq<i32>, i: int, j: int)
      requires 0 <= i <= j < a.len(),
      ensures seq_max(a.take(j + 1)) >= seq_max(a.take(i + 1)),
      decreases j - i,
  {
      if i == j {
      } else {
          seq_max_prefix_monotonic(a, i, j - 1);
          let prefix_j = a.take(j + 1);
          let prefix_j_minus_1 = a.take(j);
          assert(prefix_j == prefix_j_minus_1.push(a[j]));
          seq_max_extend(prefix_j_minus_1, a[j]);
      }
  }

vc-spec: |-
  fn rolling_max(numbers: Vec<i32>) -> (result: Vec<i32>)
      // post-conditions-start
      ensures
          result.len() == numbers.len(),
          forall|i: int| 0 <= i < numbers.len() ==> result[i] == seq_max(numbers@.take(i + 1)),
      // post-conditions-end

vc-code: |-
  {
      let mut result = Vec::new();
      let mut current_max = i32::MIN;
      
      for i in 0..numbers.len()
          invariant
              result.len() == i,
              forall|j: int| 0 <= j < i ==> result[j] == seq_max(numbers@.take(j + 1)),
              i == 0 ==> current_max == i32::MIN,
              i > 0 ==> current_max == seq_max(numbers@.take(i as int)),
      {
          if i == 0 {
              current_max = numbers[i];
          } else {
              if numbers[i] > current_max {
                  current_max = numbers[i];
              }
          }
          
          proof {
              if i == 0 {
                  seq_max_single(numbers[i as int]);
                  assert(numbers@.take(1) == seq![numbers[0]]);
              } else {
                  let prev_seq = numbers@.take(i as int);
                  let curr_seq = numbers@.take(i as int + 1);
                  assert(curr_seq == prev_seq.push(numbers[i as int]));
                  seq_max_extend(prev_seq, numbers[i as int]);
                  assert(seq_max(curr_seq) == if numbers[i as int] > seq_max(prev_seq) { numbers[i as int] } else { seq_max(prev_seq) });
                  assert(current_max == seq_max(curr_seq));
              }
          }
          
          result.push(current_max);
      }
      
      result
  }

vc-postamble: |-
  
  fn main() {}
  }

