vc-description: |-
  /--
  function_signature: "def correct_bracketing(brackets: str) -> Bool"
  docstring: |
      brackets is a string of "<" and ">".
      return True if every opening bracket has a corresponding closing bracket, i.e., (each open bracket is properly closed)
  test_cases:
    - input: "<"
      expected_output: False
    - input: "<>"
      expected_output: True
    - input: "<<><>>"
      expected_output: True
    - input: "><<>"
      expected_output: False
  -/

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn spec_bracketing_helper(brackets: Seq<char>) -> (result:(int, bool)) {
      brackets.fold_left(
          (0, true),
          |p: (int, bool), c|
              {
                  let (x, b) = p;
                  match (c) {
                      '<' => (x + 1, b),
                      '>' => (x - 1, b && x - 1 >= 0),
                      _ => (x, b),
                  }
              },
      )
  }
  // pure-end
  // pure-end
  
  spec fn spec_bracketing(brackets: Seq<char>) -> (result:bool) {
      let p = spec_bracketing_helper(brackets);
      p.1 && p.0 == 0
  }
  // pure-end

vc-helpers: |-
  proof fn lemma_fold_left_step(
      brackets: Seq<char>, 
      i: int, 
      acc: (int, bool)
  ) 
      requires 0 <= i < brackets.len()
      ensures ({
          let new_acc = match brackets[i] {
              '<' => (acc.0 + 1, acc.1),
              '>' => (acc.0 - 1, acc.1 && acc.0 - 1 >= 0),
              _ => acc,
          };
          brackets.subrange(0, i + 1).fold_left((0, true), |p: (int, bool), c| {
              let (x, b) = p;
              match c {
                  '<' => (x + 1, b),
                  '>' => (x - 1, b && x - 1 >= 0),
                  _ => (x, b),
              }
          }) == {
              let fold_result = brackets.subrange(0, i).fold_left((0, true), |p: (int, bool), c| {
                  let (x, b) = p;
                  match c {
                      '<' => (x + 1, b),
                      '>' => (x - 1, b && x - 1 >= 0),
                      _ => (x, b),
                  }
              });
              let (x, b) = fold_result;
              match brackets[i] {
                  '<' => (x + 1, b),
                  '>' => (x - 1, b && x - 1 >= 0),
                  _ => (x, b),
              }
          }
      })
  {
  }

vc-spec: |-
  fn correct_bracketing(brackets: &str) -> (ret: bool)
      // pre-conditions-start
      requires
          brackets@.len() <= i32::MAX,
          -brackets@.len() >= i32::MIN,
      // pre-conditions-end
      // post-conditions-start
      ensures
          ret <==> spec_bracketing(brackets@),
      // post-conditions-end

vc-code: |-
  {
      let mut count: i32 = 0;
      let mut valid = true;
      let mut i = 0;
      
      while i < brackets.len()
          invariant
              0 <= i <= brackets.len(),
              valid ==> count >= 0,
              spec_bracketing_helper(brackets@.subrange(0, i as int)).0 == count,
              spec_bracketing_helper(brackets@.subrange(0, i as int)).1 == valid
      {
          let c = brackets.chars().nth(i).unwrap();
          if c == '<' {
              count += 1;
          } else if c == '>' {
              count -= 1;
              if count < 0 {
                  valid = false;
              }
          }
          i += 1;
      }
      
      valid && count == 0
  }

vc-postamble: |-
  
  } // verus!
  fn main() {}

