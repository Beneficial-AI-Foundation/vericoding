vc-description: |-
  /--
  function_signature: "def remove_vowels(string: str) -> string"
  docstring: |
      remove_vowels is a function that takes string and returns string without vowels.
  test_cases:
    - input: ""
      expected_output: ""
    - input: "abcdef\nghijklm"
      expected_output: "bcdf\nghjklm"
    - input: "abcdef"
      expected_output: "bcdf"
    - input: "aaaaa"
      expected_output: ""
    - input: "aaBAA"
      expected_output: "B"
  -/

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_vowel_spec(c: char) -> (result:bool) {
      c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I'
          || c == 'O' || c == 'U'
  }
  // pure-end

vc-helpers: |-
  fn is_vowel(c: char) -> (is_vowel: bool)
      ensures
          is_vowel == is_vowel_spec(c),
  {
      c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I'
          || c == 'O' || c == 'U'
  }

vc-spec: |-
  fn remove_vowels(str: &[char]) -> (str_without_vowels: Vec<char>)
      // post-conditions-start
      ensures
          str_without_vowels@ == str@.filter(|x: char| !is_vowel_spec(x)),
      // post-conditions-end

vc-code: |-
  {
      let mut result = Vec::new();
      let mut i = 0;
      
      while i < str.len()
          invariant
              i <= str.len(),
              result@ == str@.subrange(0, i as int).filter(|x: char| !is_vowel_spec(x)),
          decreases
              str.len() - i
      {
          if !is_vowel(str[i]) {
              result.push(str[i]);
              proof {
                  assert(str@.subrange(0, (i + 1) as int) == str@.subrange(0, i as int).push(str[i as int]));
                  assert(str@.subrange(0, i as int).filter(|x: char| !is_vowel_spec(x)).push(str[i as int]) == str@.subrange(0, (i + 1) as int).filter(|x: char| !is_vowel_spec(x)));
              }
          } else {
              proof {
                  assert(str@.subrange(0, (i + 1) as int) == str@.subrange(0, i as int).push(str[i as int]));
                  assert(is_vowel_spec(str[i as int]));
                  assert(str@.subrange(0, i as int).filter(|x: char| !is_vowel_spec(x)) == str@.subrange(0, (i + 1) as int).filter(|x: char| !is_vowel_spec(x)));
              }
          }
          i += 1;
      }
      
      proof {
          assert(str@.subrange(0, i as int) == str@);
      }
      
      result
  }

vc-postamble: |-
  
  } // verus!
  fn main() {}

