vc-description: |-
  /--
  function_signature: "def fib(n: int) -> int"
  docstring: |
      Return n-th Fibonacci number.
  test_cases:
    - input: 10
      expected_output: 55
    - input: 1
      expected_output: 1
    - input: 8
      expected_output: 21
  -/

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  #[verifier::memoize]
  spec fn spec_fib(n: nat) -> (ret:nat)
      decreases n,
  {
      if (n == 0) {
          0
      } else if (n == 1) {
          1
      } else {
          spec_fib((n - 1) as nat) + spec_fib((n - 2) as nat)
      }
  }
  // pure-end
  // pure-end
  
  spec fn inner_expr_fib(n: u32, ret: Option<u32>) -> (result:bool) {
      match ret {
          None => spec_fib(n as nat) > u32::MAX,
          Some(f) => f == spec_fib(n as nat),
      }
  }
  // pure-end

vc-helpers: |-
  proof fn lemma_fib_monotonic(i: nat, j: nat)
      requires
          i <= j,
      ensures
          spec_fib(i) <= spec_fib(j),
      decreases j - i,
  {
      if (i < 2 && j < 2) || i == j {
      } else if i == j - 1 {
          reveal_with_fuel(spec_fib, 2);
          lemma_fib_monotonic(i, (j - 1) as nat);
      } else {
          lemma_fib_monotonic(i, (j - 1) as nat);
          lemma_fib_monotonic(i, (j - 2) as nat);
      }
  }
  
  proof fn lemma_fib_bounds(n: nat)
      requires n >= 2,
      ensures spec_fib(n) >= n,
      decreases n,
  {
      if n == 2 {
          reveal_with_fuel(spec_fib, 3);
      } else {
          reveal_with_fuel(spec_fib, 3);
          lemma_fib_bounds((n - 1) as nat);
          lemma_fib_bounds((n - 2) as nat);
          assert(spec_fib(n) == spec_fib((n - 1) as nat) + spec_fib((n - 2) as nat));
          assert(spec_fib((n - 1) as nat) >= (n - 1));
          assert(spec_fib((n - 2) as nat) >= (n - 2));
          assert(spec_fib(n) >= (n - 1) + (n - 2));
          assert((n - 1) + (n - 2) >= n);
      }
  }
  
  proof fn lemma_fib_overflow_propagates(n: u32)
      requires n >= 47,
      ensures spec_fib(n as nat) > u32::MAX,
      decreases n,
  {
      reveal_with_fuel(spec_fib, 48);
      if n == 47 {
      } else {
          lemma_fib_monotonic(47, n as nat);
          lemma_fib_overflow_propagates(47);
      }
  }

vc-spec: |-
  fn fib(n: u32) -> (ret: Option<u32>)
      // post-conditions-start
      ensures
          inner_expr_fib(n, ret),
      // post-conditions-end

vc-code: |-
  {
      if n == 0 {
          Some(0)
      } else if n == 1 {
          Some(1)
      } else if n >= 47 {
          proof {
              lemma_fib_overflow_propagates(n);
          }
          None
      } else {
          let mut a: u32 = 0;
          let mut b: u32 = 1;
          let mut i: u32 = 2;
          
          while i <= n
              invariant
                  2 <= i <= n + 1,
                  a == spec_fib((i - 2) as nat),
                  b == spec_fib((i - 1) as nat),
                  i <= 46,
                  n < 47,
              decreases n - i,
          {
              proof {
                  reveal_with_fuel(spec_fib, 3);
                  assert(spec_fib(i as nat) == spec_fib((i - 1) as nat) + spec_fib((i - 2) as nat));
                  assert(spec_fib(i as nat) == b + a);
              }
              
              let old_a = a;
              let old_b = b;
              
              a = old_b;
              b = old_a + old_b;
              i = i + 1;
          }
          
          Some(b)
      }
  }

vc-postamble: |-
  
  } // verus!
  fn main() {}

