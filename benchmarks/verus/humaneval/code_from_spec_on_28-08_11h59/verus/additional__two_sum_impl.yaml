vc-description: |-
  /--
  function_signature: "fn two_sum(nums: &[i32], target: i32) -> (result: (usize, usize))"
  docstring: Perform addition or summation operations.
  -/

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  proof fn lemma_sum_exists_witness(nums: &[i32], target: i32) -> (witness: (int, int))
      requires
          nums.len() >= 2,
          exists|i: int, j: int| 0 <= i < j < nums.len() && nums[i] + nums[j] == target,
      ensures
          ({ let (i, j) = witness; 0 <= i < j < nums.len() && nums[i] + nums[j] == target })
  {
      choose|i: int, j: int| 0 <= i < j < nums.len() && nums[i] + nums[j] == target
  }
  
  proof fn lemma_nested_loop_finds_solution(nums: &[i32], target: i32, outer_idx: int)
      requires
          nums.len() >= 2,
          exists|i: int, j: int| 0 <= i < j < nums.len() && nums[i] + nums[j] == target,
          0 <= outer_idx < nums.len(),
          exists|j: int| outer_idx < j < nums.len() && nums[outer_idx] + nums[j] == target,
      ensures
          exists|j: int| outer_idx < j < nums.len() && nums[outer_idx] + nums[j] == target
  {
  }

vc-spec: |-
  #[verifier::loop_isolation(false)]
  fn two_sum(nums: &[i32], target: i32) -> (result: (usize, usize))
      // pre-conditions-start
      requires
          nums.len() >= 2,
          exists|i: int, j: int| 0 <= i < j < nums.len() && nums[i] + nums[j] == target,
          forall|i: int, j: int|
              0 <= i < nums.len() && 0 <= j < nums.len()
                  ==> nums[i] + nums[j] <= i32::MAX
                      && nums[i] + nums[j] >= i32::MIN,
      // pre-conditions-end
      // post-conditions-start
      ensures
          ({ let (i, j) = result; 0 <= i < nums.len() }),
          ({ let (i, j) = result; 0 <= j < nums.len() }),
          ({ let (i, j) = result; i != j }),
          ({ let (i, j) = result; nums[i as int] + nums[j as int] == target })
      // post-conditions-end

vc-code: |-
  {
      let mut i = 0;
      
      while i < nums.len() - 1
          invariant
              0 <= i < nums.len(),
              nums.len() >= 2,
              exists|x: int, y: int| 0 <= x < y < nums.len() && nums[x] + nums[y] == target,
              forall|x: int, y: int|
                  0 <= x < nums.len() && 0 <= y < nums.len()
                      ==> nums[x] + nums[y] <= i32::MAX
                          && nums[x] + nums[y] >= i32::MIN,
              forall|x: int| #[trigger] (nums[x]) (0 <= x < i ==> !exists|y: int| x < y < nums.len() && nums[x] + nums[y] == target),
          decreases nums.len() - i
      {
          let mut j = i + 1;
          
          while j < nums.len()
              invariant
                  0 <= i < nums.len() - 1,
                  i + 1 <= j <= nums.len(),
                  nums.len() >= 2,
                  exists|x: int, y: int| 0 <= x < y < nums.len() && nums[x] + nums[y] == target,
                  forall|x: int, y: int|
                      0 <= x < nums.len() && 0 <= y < nums.len()
                          ==> nums[x] + nums[y] <= i32::MAX
                              && nums[x] + nums[y] >= i32::MIN,
                  forall|y: int| i < y < j ==> nums[i as int] + nums[y] != target,
              decreases nums.len() - j
          {
              if nums[i] + nums[j] == target {
                  return (i, j);
              }
              j += 1;
          }
          i += 1;
      }
      
      proof {
          let witness = lemma_sum_exists_witness(nums, target);
          let (wi, wj) = witness;
          assert(0 <= wi < wj < nums.len() && nums[wi] + nums[wj] == target);
          assert(wi < nums.len() - 1);
          assert(false);
      }
      
      (0, 1)
  }

vc-postamble: |-
  
  fn main() {}
  }

