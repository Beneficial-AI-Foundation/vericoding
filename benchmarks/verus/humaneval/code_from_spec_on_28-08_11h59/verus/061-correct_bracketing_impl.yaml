vc-description: |-
  /--
  function_signature: "def correct_bracketing(brackets: str) -> Bool"
  docstring: |
      brackets is a string of "(" and ")".
      return True if every opening bracket has a corresponding closing bracket.
  test_cases:
    - input: "("
      expected_output: False
    - input: "()"
      expected_output: True
    - input: "(()())"
      expected_output: True
    - input: ")(()"
      expected_output: False
  -/

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn spec_bracketing_helper(brackets: Seq<char>) -> (ret:(int, bool)) {
      brackets.fold_left(
          (0, true),
          |p: (int, bool), c|
              {
                  let (x, b) = p;
                  match (c) {
                      '(' => (x + 1, b),
                      ')' => (x - 1, b && x - 1 >= 0),
                      _ => (x, b),
                  }
              },
      )
  }
  // pure-end
  // pure-end
  
  spec fn spec_bracketing(brackets: Seq<char>) -> (ret:bool) {
      let p = spec_bracketing_helper(brackets);
      p.1 && p.0 == 0
  }
  // pure-end

vc-helpers: |-
  proof fn lemma_fold_left_property(brackets: Seq<char>, i: int)
      requires 0 <= i <= brackets.len()
      ensures 
          ({
              let partial = brackets.subrange(0, i);
              let (count, valid) = spec_bracketing_helper(partial);
              valid ==> count >= 0
          })
  {
      if i == 0 {
          // Base case: empty sequence
      } else {
          // Inductive case
          lemma_fold_left_property(brackets, i - 1);
          let prev_partial = brackets.subrange(0, i - 1);
          let (prev_count, prev_valid) = spec_bracketing_helper(prev_partial);
          let current_char = brackets[i - 1];
          
          match current_char {
              '(' => {},
              ')' => {
                  if prev_valid && prev_count > 0 {
                      assert(prev_count - 1 >= 0);
                  }
              },
              _ => {}
          }
      }
  }
  
  proof fn lemma_subrange_fold_equivalence(brackets: Seq<char>, i: int)
      requires 0 <= i <= brackets.len()
      ensures 
          ({
              let partial = brackets.subrange(0, i);
              let manual_result = if i == 0 {
                  (0, true)
              } else {
                  let prev_partial = brackets.subrange(0, i - 1);
                  let (prev_count, prev_valid) = spec_bracketing_helper(prev_partial);
                  let c = brackets[i - 1];
                  match c {
                      '(' => (prev_count + 1, prev_valid),
                      ')' => (prev_count - 1, prev_valid && prev_count - 1 >= 0),
                      _ => (prev_count, prev_valid),
                  }
              };
              spec_bracketing_helper(partial) == manual_result
          })
  {
      // This lemma establishes the recursive structure of fold_left
  }

vc-spec: |-
  fn correct_bracketing(brackets: &str) -> (ret: bool)
      // pre-conditions-start
      requires
          brackets@.len() <= i32::MAX,
          -brackets@.len() >= i32::MIN,
      // pre-conditions-end
      // post-conditions-start
      ensures
          ret <==> spec_bracketing(brackets@),
      // post-conditions-end

vc-code: |-
  {
      let mut count: i32 = 0;
      let mut valid: bool = true;
      let mut i: usize = 0;
      
      while i < brackets@.len() as usize
          invariant
              0 <= i <= brackets@.len(),
              count as int == spec_bracketing_helper(brackets@.subrange(0, i as int)).0,
              valid <==> spec_bracketing_helper(brackets@.subrange(0, i as int)).1,
              valid ==> count >= 0
          decreases brackets@.len() - i
      {
          proof {
              lemma_subrange_fold_equivalence(brackets@, i as int + 1);
              lemma_fold_left_property(brackets@, i as int);
          }
          
          let c = brackets.as_bytes()[i] as char;
          match c {
              '(' => {
                  count = count + 1;
              },
              ')' => {
                  count = count - 1;
                  if count < 0 {
                      valid = false;
                  }
              },
              _ => {},
          }
          i = i + 1;
      }
      
      proof {
          assert(brackets@.subrange(0, brackets@.len() as int) == brackets@);
          assert(spec_bracketing_helper(brackets@) == (count as int, valid));
      }
      
      valid && count == 0
  }

vc-postamble: |-
  
  } // verus!
  fn main() {}

