vc-description: |-
  /--
  function_signature: "def has_close_elements(numbers: List[float], threshold: float) -> bool"
  docstring: Check if in given list of numbers, are any two numbers closer to each other than given threshold.
  test_cases:
    - input: [[1.0, 2.0, 3.0], 0.5]
      expected_output: False
    - input: [[1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3]
      expected_output: True
  -/

vc-preamble: |-
  use vstd::math::abs;
  use vstd::prelude::*;
  use vstd::slice::*;
  
  verus! {

vc-helpers: |-
  // Helper functions and specifications

vc-spec: |-
  fn has_close_elements(numbers: &[i64], threshold: i64) -> (result: bool)
      // post-conditions-start
      ensures
          result == exists|i: int, j: int|
              0 <= i < j < numbers@.len() && abs(numbers[i] - numbers[j]) < threshold,
      // post-conditions-end

vc-code: |-
  {
      let len = numbers.len();
      for i in 0..len
          invariant
              forall|x: int, y: int| 0 <= x < y < i ==> abs(numbers[x] - numbers[y]) >= threshold,
      {
          for j in (i + 1)..len
              invariant
                  forall|x: int, y: int| 0 <= x < y < i ==> abs(numbers[x] - numbers[y]) >= threshold,
                  forall|y: int| (i + 1) <= y < j ==> abs(numbers[i as int] - numbers[y]) >= threshold,
          {
              if abs(numbers[i] - numbers[j]) < threshold {
                  return true;
              }
          }
      }
      false
  }

vc-postamble: |-
  
  }
  fn main() {}

