vc-description: |-
  This verification task involves implementing a function that checks if three real numbers satisfy two conditions: all three must be integers, and one of the numbers must equal the sum of the other two. The function should return true only if both conditions are met, false otherwise.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn is_integer(x: int) -> bool {
      true
  }

  spec fn all_integers(x: int, y: int, z: int) -> bool {
      is_integer(x) && is_integer(y) && is_integer(z)
  }

  spec fn one_equals_sum_of_other_two(x: int, y: int, z: int) -> bool {
      x == y + z || y == x + z || z == x + y
  }

  spec fn valid_result(x: int, y: int, z: int, result: bool) -> bool {
      result <==> (all_integers(x, y, z) && one_equals_sum_of_other_two(x, y, z))
  }

  // </vc-preamble>

vc-helpers: |-

vc-spec: |-
  fn any_int(x: i8, y: i8, z: i8) -> (result: bool)
      ensures valid_result(x as int, y as int, z as int, result)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}