vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-


vc-description: |-
  function_signature: "def pairs_sum_to_zero(numbers: List[int]) -> Bool"
  docstring: |
  pairs_sum_to_zero takes a list of integers as an input.
  it returns True if there are two distinct elements in the list that
  sum to zero, and False otherwise.
  test_cases:
  - input: [1, 3, 5, 0]
  expected_output: False
  - input: [1, 3, -2, 1]
  expected_output: False
  - input: [1]
  expected_output: False
  - input: [2, 4, -5, 3, 5, 7]
  expected_output: True

vc-spec: |-
  #[verifier::loop_isolation(false)]
  fn pairs_sum_to_zero(nums: &[i32], target: i32) -> (found: bool)
      // pre-conditions-start
      requires
          nums.len() >= 2,
          forall|i: int, j: int|
              0 <= i < j < nums.len() ==> nums[i] + nums[j] <= i32::MAX && nums[i] + nums[j]
                  >= i32::MIN,
      // pre-conditions-end
      // post-conditions-start
      ensures
          found <==> exists|i: int, j: int| 0 <= i < j < nums.len() && nums[i] + nums[j] == target,
      // post-conditions-end

vc-code: |-
  {
      // impl-start
      assume(false);
      false
      // impl-end
  }

vc-postamble: |-

  fn main() {}
  }
