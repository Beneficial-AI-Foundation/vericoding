vc-description: |-
  This task implements a function to compute the product of the unit
  digits of two integers. The unit digit is defined as the ones place digit of the
  absolute value of a number. Given two integers (which can be positive, negative,
  or zero), the method should return the product of their respective unit digits.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn unit_digit(n: int) -> int {
      (if n >= 0 { n } else { -n }) % 10
  }

  spec fn product_of_unit_digits(a: int, b: int) -> int {
      unit_digit(a) * unit_digit(b)
  }

  spec fn valid_result(result: int) -> bool {
      result >= 0 && result <= 81
  }

vc-helpers: |-

vc-spec: |-
  fn multiply(a: i8, b: i8) -> (result: i8)
      ensures 
          result as int == product_of_unit_digits(a as int, b as int),
          valid_result(result as int),

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}