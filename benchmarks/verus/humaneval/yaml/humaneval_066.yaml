vc-description: |-
  This task involves calculating the sum of ASCII values of all uppercase letters in a string. The function should return 0 for empty strings and only consider characters from 'A' to 'Z' as uppercase. The implementation needs to be verified with an iterative method that maintains proper loop invariants.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn sum_of_uppercase_ascii(s: Seq<char>) -> int
      decreases s.len()
  {
      if s.len() == 0 { 
          0
      } else {
          let c = s[0];
          let rest = sum_of_uppercase_ascii(s.subrange(1, s.len() as int));
          if 'A' <= c && c <= 'Z' { 
              (c as int) + rest
          } else {
              rest
          }
      }
  }

vc-helpers: |-

vc-spec: |-
  fn digit_sum(s: Vec<char>) -> (result: i32)
      ensures 
          result >= 0,
          result == sum_of_uppercase_ascii(s@)

vc-code: |-
  {
      assume(false);
      0
  }

vc-postamble: |-

  }

  fn main() {}