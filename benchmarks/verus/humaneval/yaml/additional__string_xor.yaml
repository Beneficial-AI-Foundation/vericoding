vc-description: |-
  /--
  function_signature: "fn string_xor(a: &[char], b: &[char]) -> (result: Vec<char>)"
  docstring: Implement string xor functionality.
  -/
vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  #[verifier::loop_isolation(false)]
  fn string_xor(a: &[char], b: &[char]) -> (result: Vec<char>)
      // pre-conditions-start
      requires
          a.len() == b.len(),
          forall|i: int| 0 <= i && i < a.len() ==> a[i] == '0' || a[i] == '1',
          forall|i: int| 0 <= i && i < b.len() ==> b[i] == '0' || b[i] == '1',
      // pre-conditions-end
      // post-conditions-start
      ensures
          result.len() == a.len(),
          forall|i: int| 0 <= i && i < result.len() ==> (result[i] == '0' || result[i] == '1'),
          forall|i: int| 0 <= i && i < result.len() ==> result[i] == (if a[i] == b[i] { '0' } else { '1' })
      // post-conditions-end

vc-code: |-
  {
      // impl-start
      assume(false);
      vec![]
      // impl-end
  }

vc-postamble: |-

  fn main() {}
  }
