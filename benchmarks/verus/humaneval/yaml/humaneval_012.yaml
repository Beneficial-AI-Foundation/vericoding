vc-description: |-
  This task involves finding the longest string in a sequence of strings.
  If multiple strings have the same maximum length, the method should return the first
  one that appears in the list. If the list is empty, it should return None using
  an Option type.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_result(strings: Seq<Seq<char>>, result: Option<Seq<char>>) -> bool {
      if strings.len() == 0 {
          matches!(result, Option::None)
      } else {
          match result {
              Option::Some(value) => {
                  exists|i: int| 0 <= i < strings.len() && strings[i] == value &&
                  (forall|s: Seq<char>| strings.contains(s) ==> value.len() >= s.len()) &&
                  (forall|j: int| 0 <= j < i ==> strings[j].len() < value.len())
              },
              Option::None => false
          }
      }
  }

vc-helpers: |-

vc-spec: |-
  fn longest(strings: Vec<Vec<char>>) -> (result: Option<Vec<char>>)
      ensures match result {
          Option::Some(value) => valid_result(strings@.map(|_i: int, v: Vec<char>| v@), Option::Some(value@)),
          Option::None => valid_result(strings@.map(|_i: int, v: Vec<char>| v@), Option::None),
      }

vc-code: |-
  {
      assume(false);
      Option::None
  }

vc-postamble: |-

  }

  fn main() {}