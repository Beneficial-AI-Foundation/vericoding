vc-description: |-
  function_signature: def intersection(interval1: Tuple[Int, Int], interval2: Tuple[Int, Int]) -> str
  You are given two intervals, where each interval is a pair of integers. For example, interval = (start, end) = (1, 2). The given intervals are closed which means that the interval (start, end) includes both start and end. For each given interval, it is assumed that its start is less or equal its end. Your task is to determine whether the length of intersection of these two intervals is a prime number. Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3) which its length is 1, which not a prime number. If the length of the intersection is a prime number, return "YES", otherwise, return "NO". If the two intervals do not intersect, return "NO".

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn is_prime(n: nat) -> bool {
      n > 1 &&
      forall|k: nat| #[trigger] (n % k) != 0 ==> 2 <= k < n
  }

  spec fn min(a: int, b: int) -> int {
      if a <= b { a } else { b }
  }

  spec fn max(a: int, b: int) -> int {
      if a >= b { a } else { b }
  }

vc-spec: |-
  fn intersection(start1: i8, end1: i8, start2: i8, end2: i8) -> (result: String)
      requires start1 as int <= end1 as int && start2 as int <= end2 as int,
      ensures (result@ =~= seq!['Y', 'E', 'S'] || result@ =~= seq!['N', 'O']) && (result@ =~= seq!['Y', 'E', 'S'] <==> (max(start1 as int, start2 as int) <= min(end1 as int, end2 as int) && is_prime((min(end1 as int, end2 as int) - max(start1 as int, start2 as int) + 1) as nat))),

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}