vc-description: |-
  This verification task implements a rolling maximum function that
  takes a list of integers and returns a list where each element represents the maximum
  value encountered from the beginning of the list up to and including the current
  position.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn max_up_to(numbers: Seq<int>, index: int) -> int
      decreases index when 0 <= index < numbers.len()
  {
      if 0 <= index < numbers.len() {
          if index == 0 {
              numbers[0]
          } else {
              let prev_max = max_up_to(numbers, index - 1);
              if numbers[index] > prev_max { numbers[index] } else { prev_max }
          }
      } else {
          0
      }
  }

vc-helpers: |-
  spec fn vec_to_seq_int(v: Vec<i8>) -> Seq<int> {
      v@.map(|i, x| x as int)
  }

vc-spec: |-
  fn rolling_max(numbers: Vec<i8>) -> (result: Vec<i8>)
      ensures 
          result.len() == numbers.len() &&
          (numbers.len() == 0 ==> result.len() == 0) &&
          (numbers.len() > 0 ==> result.len() > 0) &&
          (forall|i: int| #![trigger result[i]] 0 <= i < result.len() ==>
              result[i] as int == max_up_to(vec_to_seq_int(numbers), i)) &&
          (forall|i: int| #![trigger result[i]] 0 <= i < result.len() ==>
              forall|j: int| #![trigger numbers@[j]] 0 <= j <= i ==> numbers@[j] as int <= result[i] as int) &&
          (forall|i: int| #![trigger result[i]] 0 <= i < result.len() ==>
              exists|j: int| 0 <= j <= i && numbers@[j] as int == result[i] as int)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}