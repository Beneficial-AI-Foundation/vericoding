vc-description: |-
  This verification task involves implementing a string case-flipping
  function that converts all lowercase letters to uppercase and all uppercase letters
  to lowercase, while leaving non-alphabetic characters unchanged. The implementation
  should process each character in the input string and return a new string with the
  appropriate case transformations.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn is_lowercase(c: char) -> bool {
      'a' <= c <= 'z'
  }

  spec fn is_uppercase(c: char) -> bool {
      'A' <= c <= 'Z'
  }

  spec fn flip_char(c: char) -> char {
      if is_lowercase(c) { 
          ((c as u8) - ('a' as u8) + ('A' as u8)) as char
      } else if is_uppercase(c) { 
          ((c as u8) - ('A' as u8) + ('a' as u8)) as char
      } else { 
          c 
      }
  }

  spec fn valid_flip_case(s: Seq<char>, result: Seq<char>) -> bool {
      result.len() == s.len() &&
      forall|i: int| 0 <= i < s.len() ==> result[i] == flip_char(s[i])
  }

vc-helpers: |-

vc-spec: |-
  fn flip_case(s: Vec<char>) -> (result: Vec<char>)
      ensures valid_flip_case(s@, result@)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}