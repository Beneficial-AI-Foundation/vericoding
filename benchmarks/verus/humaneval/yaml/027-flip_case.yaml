vc-description: |-

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_upper_case(c: char) -> (result:bool) {
      c >= 'A' && c <= 'Z'
  }
  
  spec fn is_lower_case(c: char) -> (result:bool) {
      c >= 'a' && c <= 'z'
  }
  
  spec fn shift_plus_32_spec(c: char) -> (result:char) {
      ((c as u8) + 32) as char
  }
  
  spec fn shift_minus_32_spec(c: char) -> (result:char) {
      ((c as u8) - 32) as char
  }
  
  spec fn flip_case_spec(c: char) -> (result:char) {
      if is_lower_case(c) {
          shift_minus_32_spec(c)
      } else if is_upper_case(c) {
          shift_plus_32_spec(c)
      } else {
          c
      }
  }

vc-helpers: |-

vc-spec: |-
  fn flip_case(str: &[char]) -> (flipped_case: Vec<char>)
  
      ensures
          str@.len() == flipped_case@.len(),
          forall|i: int| 0 <= i < str.len() ==> flipped_case[i] == flip_case_spec(#[trigger] str[i]),

vc-code: |-
  {
      assume(false);
      unreached();
  }

vc-postamble: |-
  }
  fn main() {}

