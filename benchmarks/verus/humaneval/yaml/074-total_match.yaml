vc-description: |-

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn spec_sum(s: Seq<nat>) -> (ret: int) {
      s.fold_left(0, |x: int, y| x + y)
  }
  // pure-end
  // pure-end
  
  spec fn total_str_len(strings: Seq<&str>) -> (ret: int) {
      spec_sum(strings.map_values(|s: &str| s@.len()))
  }
  // pure-end
  spec fn inner_expr_total_match<'a>(lst1: Vec<&'a str>, lst2: Vec<&'a str>, ret: Option<Vec<&'a str>>) -> (ret:bool) {
      ret.is_some() ==> ret.unwrap() == if total_str_len(lst1@) <= total_str_len(lst2@) {
          lst1
      } else {
          lst2
      }
  }
  // pure-end

vc-helpers: |-

vc-spec: |-
  fn total_match<'a>(lst1: Vec<&'a str>, lst2: Vec<&'a str>) -> (ret: Option<Vec<&'a str>>)
      // post-conditions-start
      ensures
          ret.is_some() <== total_str_len(lst1@) <= usize::MAX && total_str_len(lst2@) <= usize::MAX,
          inner_expr_total_match(lst1, lst2, ret),
      // post-conditions-end

vc-code: |-
  {
      assume(false);
      None
  }

vc-postamble: |-
  }
  fn main() {}

