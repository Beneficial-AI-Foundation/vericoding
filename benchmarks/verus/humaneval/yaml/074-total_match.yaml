vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn spec_sum(s: Seq<nat>) -> (ret: int) {
      s.fold_left(0, |x: int, y| x + y)
  }
  // pure-end
  // pure-end

  spec fn total_str_len(strings: Seq<&str>) -> (ret: int) {
      spec_sum(strings.map_values(|s: &str| s@.len()))
  }
  // pure-end
  spec fn inner_expr_total_match<'a>(lst1: Vec<&'a str>, lst2: Vec<&'a str>, ret: Option<Vec<&'a str>>) -> (ret:bool) {
      ret.is_some() ==> ret.unwrap() == if total_str_len(lst1@) <= total_str_len(lst2@) {
          lst1
      } else {
          lst2
      }
  }
  // pure-end

vc-helpers: |-


vc-description: |-
  function_signature: "def total_match(lst1: List[str], lst2: List[str]) -> List[str]"
  docstring: |
  Write a function that accepts two lists of strings and returns the list that has
  total number of chars in the all strings of the list less than the other list.
  If the two lists have the same number of chars, return the first list.
  test_cases:
  - input: ([], [])
  expected_output: []
  - input: (['hi', 'admin'], ['hI', 'Hi'])
  expected_output: ['hI', 'Hi']
  - input: (['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])
  expected_output: ['hi', 'admin']
  - input: (['hi', 'admin'], ['hI', 'hi', 'hi'])
  expected_output: ['hI', 'hi', 'hi']
  - input: (['4'], ['1', '2', '3', '4', '5'])
  expected_output: ['4']

vc-spec: |-
  fn total_match<'a>(lst1: Vec<&'a str>, lst2: Vec<&'a str>) -> (ret: Option<Vec<&'a str>>)
      // post-conditions-start
      ensures
          ret.is_some() <== total_str_len(lst1@) <= usize::MAX && total_str_len(lst2@) <= usize::MAX,
          inner_expr_total_match(lst1, lst2, ret),
      // post-conditions-end

vc-code: |-
  {
      // impl-start
      assume(false);
      None
      // impl-end
  }

vc-postamble: |-

  fn main() {}
  }
