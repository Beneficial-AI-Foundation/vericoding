vc-preamble: |-

  use vstd::prelude::*;

  verus! {

  spec fn single_digit_number_to_char(n: nat) -> (result:char) {
      if n == 0 {
          '0'
      } else if n == 1 {
          '1'
      } else if n == 2 {
          '2'
      } else if n == 3 {
          '3'
      } else if n == 4 {
          '4'
      } else if n == 5 {
          '5'
      } else if n == 6 {
          '6'
      } else if n == 7 {
          '7'
      } else if n == 8 {
          '8'
      } else {
          '9'
      }
  }
  // pure-end
  // pure-end

  spec fn number_to_char(n: nat) -> (result:Seq<char>)
      decreases n,
  {
      if (n == 0) {
          seq![]
      } else {
          number_to_char(n / 10).add(seq![single_digit_number_to_char(n % 10)])
      }
  }
  // pure-end
  // pure-end

  spec fn string_sequence(n: nat) -> (result:Seq<char>)
      decreases n,
  {
      if n == 0 {
          seq!['0']
      } else {
          string_sequence((n - 1) as nat).add(seq![' '].add(number_to_char(n)))
      }
  }
  // pure-end

vc-helpers: |-


vc-description: |-
  function_signature: "def string_sequence(n: int) -> str"
  docstring: |
  Return a string containing space-delimited numbers starting from 0 upto n inclusive.
  test_cases:
  - input: 0
  expected_output: "0"
  - input: 5
  expected_output: "0 1 2 3 4 5"

vc-spec: |-
  fn string_sequence_impl(n: u8) -> (string_seq: Vec<char>)
      // post-conditions-start
      ensures
          string_seq@ == string_sequence(n as nat),
      // post-conditions-end

vc-code: |-
  {
      // impl-start
      assume(false);
      vec![]
      // impl-end
  }

vc-postamble: |-

  } // verus!
  fn main() {}
