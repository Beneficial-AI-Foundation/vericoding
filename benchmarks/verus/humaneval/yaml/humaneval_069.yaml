vc-description: |-
  This verification task involves finding the greatest integer in a
  list whose frequency is greater than or equal to its own value. Given a non-empty
  list of positive integers, the implementation should return this greatest qualifying
  integer, or -1 if no such integer exists.

  The task requires building a frequency map for all elements in the list, then identifying
  which elements have frequencies meeting the criteria, and finally selecting the
  maximum among those valid elements.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn count(s: Seq<int>, x: int) -> int {
      s.filter(|i: int| i == x).len() as int
  }

  spec fn max_seq(s: Seq<int>) -> int
      recommends s.len() > 0
  {
      if s.len() == 1 { s[0] } else { choose|x: int| s.contains(x) }
  }

  spec fn valid_input(lst: Seq<int>) -> bool {
      lst.len() > 0 && forall|i: int| 0 <= i < lst.len() ==> lst[i] > 0
  }

  spec fn valid_result(lst: Seq<int>, result: int) -> bool
      recommends valid_input(lst)
  {
      if result == -1 {
          forall|x: int| #![auto] lst.contains(x) ==> count(lst, x) < x
      } else {
          result > 0 &&
          lst.contains(result) && 
          count(lst, result) >= result &&
          forall|y: int| #![auto] lst.contains(y) && count(lst, y) >= y ==> y <= result
      }
  }

  proof fn count_append_lemma(s: Seq<int>, elem: int, x: int)
      ensures count(s.push(elem), x) == count(s, x) + (if x == elem { 1int } else { 0int })
  {
      assume(false); /* TODO: Remove this line and implement the proof */
  }

vc-spec: |-
  fn search(lst: Vec<i8>) -> (result: i8)
      requires valid_input(lst@.map(|_index: int, x: i8| x as int))
      ensures valid_result(lst@.map(|_index: int, x: i8| x as int), result as int)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}