vc-description: |-
  Find and return the maximum element in a given list of numbers. The
  list must be non-empty, and the maximum element is the largest value present in
  the list, which must be an actual element of the list.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_input(l: Seq<int>) -> bool {
      l.len() > 0
  }

  spec fn is_max_element(l: Seq<int>, max_val: int) -> bool {
      l.contains(max_val) && forall|i: int| 0 <= i < l.len() ==> l[i] <= max_val
  }

  spec fn max_element_func(l: Seq<int>) -> int
      decreases l.len()
  {
      if l.len() == 1 {
          l[0]
      } else if l.len() > 1 {
          let rest_max = max_element_func(l.subrange(1, l.len() as int));
          if l[0] > rest_max { l[0] } else { rest_max }
      } else {
          0int
      }
  }

  // </vc-preamble>

vc-helpers: |-

vc-spec: |-
  fn find_max_element(l: Vec<i8>) -> (max_val: i8)
      requires valid_input(l@.map(|i, x| x as int))
      ensures is_max_element(l@.map(|i, x| x as int), max_val as int)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}