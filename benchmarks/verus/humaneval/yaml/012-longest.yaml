vc-description: |-

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn expr_inner_longest(strings: &Vec<Vec<u8>>, result: Option<&Vec<u8>>) -> (result: bool) {
      match result {
          None => strings.len() == 0,
          Some(s) => {
              (forall|i: int| #![auto] 0 <= i < strings.len() ==> s.len() >= strings[i].len())
                  && (exists|i: int|
                  #![auto]
                  (0 <= i < strings.len() && s == strings[i] && (forall|j: int|
                      #![auto]
                      0 <= j < i ==> strings[j].len() < s.len())))
          },
      }
  }
  // pure-end

vc-helpers: |-

vc-spec: |-
  fn longest(strings: &Vec<Vec<u8>>) -> (result: Option<&Vec<u8>>)
      // post-conditions-start
      ensures
          expr_inner_longest(strings, result),
      // post-conditions-end

vc-code: |-
  {
      // impl-start
      assume(false);
      None
      // impl-end
  }

vc-postamble: |-
  }
  fn main() {}

