vc-preamble: |-
  use vstd::prelude::*;
  use vstd::slice::*;

  verus! {

  spec fn is_binary_digit(c: char) -> (ret: bool) {
      c == '0' || c == '1'
  }
  // pure-end
  // pure-end

  spec fn xor_char(a: char, b: char) -> (result: char)
      recommends
          is_binary_digit(a),
          is_binary_digit(b),
  {
      if a == b {
          '0'
      } else {
          '1'
      }
  }
  // pure-end

vc-helpers: |-


vc-description: |-
  function_signature: "def string_xor(a: str, b: str) -> str"
  docstring: |
  Input are two strings a and b consisting only of 1s and 0s.
  Perform binary XOR on these inputs and return result also as a string.
  test_cases:
  - input:
  - "010"
  - "110"
  expected_output: "100"

vc-spec: |-
  fn string_xor(a: &[char], b: &[char]) -> (result: Vec<char>)
      // pre-conditions-start
      requires
          a@.len() == b@.len(),
          forall|i: int| 0 <= i < a@.len() as int ==> is_binary_digit(#[trigger] a[i]),
          forall|i: int| 0 <= i < b@.len() as int ==> is_binary_digit(#[trigger] b[i]),
      // pre-conditions-end
      // post-conditions-start
      ensures
          result.len() == a@.len(),
          forall|i: int|
              0 <= i < result.len() as int ==> #[trigger] result[i] == xor_char(a[i], b[i]),
      // post-conditions-end

vc-code: |-
  {
      // impl-start
      assume(false);
      vec![]
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}
