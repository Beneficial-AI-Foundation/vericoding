vc-description: |-
  This verification task implements a bracket matching algorithm that
  determines if a string containing only "<" and ">" characters has properly nested
  brackets. Every opening bracket "<" must have a corresponding closing bracket ">"
  and they must be correctly nested, meaning at no point should the number of closing
  brackets exceed the number of opening brackets in any prefix.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn count_brackets_prefix(s: Seq<char>, end: int, bracket: char) -> int
      decreases end
  {
      if end == 0 {
          0
      } else if 0 <= end <= s.len() && (bracket == '<' || bracket == '>') && s[end - 1] == bracket {
          1 + count_brackets_prefix(s, end - 1, bracket)
      } else if 0 <= end <= s.len() && (bracket == '<' || bracket == '>') {
          count_brackets_prefix(s, end - 1, bracket)
      } else {
          0
      }
  }

  spec fn valid_bracket_string(s: Seq<char>) -> bool {
      forall|i: int| 0 <= i < s.len() ==> s[i] == '<' || s[i] == '>'
  }

  spec fn properly_nested(brackets: Seq<char>) -> bool {
      valid_bracket_string(brackets) &&
      (forall|k: int| 0 <= k <= brackets.len() ==> 
          count_brackets_prefix(brackets, k, '<') >= count_brackets_prefix(brackets, k, '>')) &&
      count_brackets_prefix(brackets, brackets.len() as int, '<') == count_brackets_prefix(brackets, brackets.len() as int, '>')
  }

vc-helpers: |-

vc-spec: |-
  fn correct_bracketing(brackets: Vec<char>) -> (result: bool)
      requires valid_bracket_string(brackets@)
      ensures result <==> properly_nested(brackets@)

vc-code: |-
  {
      // impl-start
      assume(false);
      false
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {}