vc-description: |-
  This task involves computing the derivative of a polynomial given its coefficients. Given a sequence of coefficients where xs[i] represents the coefficient of x^i, the method should return the derivative coefficients where [a₀, a₁, a₂, ...] becomes [a₁, 2a₂, 3a₃, ...].

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_input(xs: Seq<int>) -> bool {
      true  /* Any sequence of coefficients is valid input */
  }

  spec fn derivative_length(xs: Seq<int>) -> nat {
      if xs.len() <= 1 { 0nat } else { (xs.len() - 1) as nat }
  }

  spec fn correct_derivative_coefficients(xs: Seq<int>, result: Seq<int>) -> bool {
      xs.len() <= 1 ==> result == Seq::<int>::empty() &&
      xs.len() > 1 ==> (result.len() == xs.len() - 1 && 
                        forall|j: int| 0 <= j < result.len() ==> result[j] == (j + 1) * xs[j + 1])
  }

vc-helpers: |-

vc-spec: |-
  fn derivative(xs: Vec<i8>) -> (result: Vec<i8>)
      requires 
          valid_input(xs@.map(|i: int, x: i8| x as int))
      ensures 
          correct_derivative_coefficients(xs@.map(|i: int, x: i8| x as int), result@.map(|i: int, x: i8| x as int)),
          result@.len() == derivative_length(xs@.map(|i: int, x: i8| x as int))

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}