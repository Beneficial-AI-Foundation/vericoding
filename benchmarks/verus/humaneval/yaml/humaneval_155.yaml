vc-description: |-
  This verification task implements a function to count the number of even and odd digits in the absolute value of an integer. The function should return a tuple containing the count of even digits and the count of odd digits.

  The implementation uses helper functions to define digit counting operations and ensures correctness through loop invariants that maintain the relationship between processed and remaining digits.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn abs_value(x: int) -> nat {
      if x < 0 { (-x) as nat } else { x as nat }
  }

  spec fn count_digits(n: nat) -> nat
      recommends n >= 0
      decreases n
  {
      if n < 10 { 1nat } else { 1nat + count_digits(n / 10) }
  }

  spec fn is_even_digit(d: nat) -> bool
      recommends d < 10
  {
      d % 2 == 0
  }

  spec fn count_even_digits(n: nat) -> nat
      recommends n >= 0
      decreases n
  {
      if n < 10 {
          if is_even_digit(n) { 1nat } else { 0nat }
      } else {
          (if is_even_digit(n % 10) { 1nat } else { 0nat }) + count_even_digits(n / 10)
      }
  }

  spec fn count_odd_digits(n: nat) -> nat
      recommends n >= 0
      decreases n
  {
      if n < 10 {
          if !is_even_digit(n) { 1nat } else { 0nat }
      } else {
          (if !is_even_digit(n % 10) { 1nat } else { 0nat }) + count_odd_digits(n / 10)
      }
  }

vc-helpers: |-

vc-spec: |-
  fn even_odd_count(num: i8) -> (result: (i8, i8))
      ensures 
          result.0 >= 0 && result.1 >= 0 &&
          result.0 + result.1 >= 1 &&
          ({
              let abs_num = abs_value(num as int);
              result.0 as nat == count_even_digits(abs_num) &&
              result.1 as nat == count_odd_digits(abs_num)
          }) &&
          result.0 + result.1 == count_digits(abs_value(num as int)) as i8 &&
          (num == 0 ==> (result.0 == 1 && result.1 == 0)) &&
          (abs_value(num as int) == abs_value((-num) as int) ==> 
              (result.0 as nat == count_even_digits(abs_value((-num) as int)) && 
               result.1 as nat == count_odd_digits(abs_value((-num) as int))))

vc-code: |-
  {
      // impl-start
      assume(false);
      (0, 0)
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {}