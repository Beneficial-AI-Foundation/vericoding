vc-description: |-
  This verification task implements a string encryption algorithm that shifts each alphabetic character forward by 4 positions in the alphabet with wraparound. The implementation should preserve the case of letters and leave non-alphabetic characters unchanged.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn encrypt_char(c: char) -> char {
      if 'a' <= c && c <= 'z' {
          (((c as int - 'a' as int + 4) % 26) + 'a' as int) as char
      } else if 'A' <= c && c <= 'Z' {
          (((c as int - 'A' as int + 4) % 26) + 'A' as int) as char
      } else {
          c
      }
  }

vc-helpers: |-

vc-spec: |-
  fn encrypt(s: Vec<char>) -> (result: Vec<char>)
      requires s@.len() >= 0
      ensures result@.len() == s@.len(),
              forall|i: int| 0 <= i < s@.len() ==> #[trigger] result@[i] == #[trigger] encrypt_char(#[trigger] s@[i])

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {}