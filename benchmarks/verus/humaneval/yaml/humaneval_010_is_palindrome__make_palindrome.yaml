vc-description: |-
  function_signature: fn make_palindrome(s: &str) -> (result: String)

  Process input. Ensures: the size is bounded; the result is a palindrome; ensures starts_with(result, s).

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn is_palindrome(s: Seq<char>) -> bool {
      forall|k: int| #![trigger s.index(k)] 0 <= k < s.len() ==> s.index(k) == s.index(s.len() - 1 - k)
  }

  spec fn starts_with(result: Seq<char>, s: Seq<char>) -> bool {
      result.len() >= s.len() && forall|k: int| #![trigger result.index(k)] 0 <= k < s.len() ==> result.index(k) == s.index(k)
  }

vc-helpers: |-

vc-spec: |-
  fn make_palindrome(s: &str) -> (result: String)
      ensures 
          result@.len() <= 2 * s@.len(),
          is_palindrome(result@),
          starts_with(result@, s@)

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {}