vc-description: |-
  function_signature: def rescale_to_unit(numbers: List[float]) -> List[float]

  Given list of numbers (of at least two elements), apply a linear transform to that
  list, such that the smallest number will become 0 and the largest will become 1

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn affine(x: int, shift: int, scale: int) -> int {
      if scale > 0 { (x + shift) / scale } else { 0 }
  }

  spec fn affine_seq(s: Seq<int>, r: Seq<int>, shift: int, scale: int) -> bool {
          scale > 0 && r.len() == s.len() &&
          forall|i: int| 0 <= i < s.len() ==> #[trigger] r[i] == #[trigger] affine(s[i], shift, scale)
  }

vc-helpers: |-

vc-spec: |-
  fn rescale_to_unit(s: Vec<i8>) -> (r: Vec<i8>)
      requires s@.len() >= 2,
               exists|i: int, j: int| (0 <= i < j < s@.len()) && s@[i] != s@[j]
      ensures r@.len() == s@.len(),
              forall|i: int| 0 <= i < s@.len() ==> 0 <= r@[i] as int && r@[i] as int <= 1,
              exists|i: int| 0 <= i < s@.len() && r@[i] as int == 0,
              exists|i: int| 0 <= i < s@.len() && r@[i] as int == 1,
              ({
                  let s_int = s@.map(|i, x| x as int);
                  let r_int = r@.map(|i, x| x as int);
                  exists|shift: int, scale: int| affine_seq(s_int, r_int, shift, scale) && scale > 0
              })

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}