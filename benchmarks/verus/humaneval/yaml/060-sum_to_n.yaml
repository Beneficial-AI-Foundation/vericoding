vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn spec_sum_to_n(n: nat) -> (ret:nat)
      decreases n,
  {
      if (n == 0) {
          0
      } else {
          n + spec_sum_to_n((n - 1) as nat)
      }
  }
  // pure-end

vc-helpers: |-


vc-description: |-
  function_signature: "def sum_to_n(n: Nat) -> Nat"
  docstring: |
  sum_to_n is a function that sums numbers from 1 to n.
  test_cases:
  - input: 30
  expected_output: 465
  - input: 100
  expected_output: 4950

vc-spec: |-
  fn sum_to_n(n: u32) -> (sum: Option<u32>)
      // post-conditions-start
      ensures
          sum.is_some() ==> sum.unwrap() == spec_sum_to_n(n as nat),
      // post-conditions-end

vc-code: |-
  {
      // impl-start
      assume(false);
      None
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}
