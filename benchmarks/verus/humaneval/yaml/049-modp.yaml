vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn modp_rec(n: nat, p: nat) -> (result:nat)
      decreases n,
  {
      if n == 0 {
          1nat % p
      } else {
          (modp_rec((n - 1) as nat, p) * 2) % p
      }
  }
  // pure-end

vc-helpers: |-


vc-description: |-
  function_signature: "def modp(n: Nat, p: Nat) -> Nat"
  docstring: |
  Return 2^n modulo p (be aware of numerics).
  test_cases:
  - input: [3, 5]
  expected_output: 3
  - input: [1101, 101]
  expected_output: 2
  - input: [0, 101]
  expected_output: 0
  - input: [100, 101]
  expected_output: 1

vc-spec: |-
  #[verifier::loop_isolation(false)]
  fn modp(n: u32, p: u32) -> (r: u32)
      by (nonlinear_arith)
      // pre-conditions-start
      requires
          p > 0,
      // pre-conditions-end
      // post-conditions-start
      ensures
          r == modp_rec(n as nat, p as nat),
      // post-conditions-end

vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}
