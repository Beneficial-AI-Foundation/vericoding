vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-


vc-description: |-
  function_signature: "def filter_by_substring(strings: List[str], substring: str) -> List[str]"
  docstring: |
  Filter an input list of strings only for ones that contain given substring
  test_cases:
  - input:
  - []
  - "a"
  expected_output: []
  - input:
  - ["abc", "bacd", "cde", "array"]
  - "a"
  expected_output: ["abc", "bacd", "array"]

vc-spec: |-
  fn filter_by_substring<'a>(strings: &Vec<&'a str>, substring: &str) -> (res: Vec<&'a str>)
      // post-conditions-start
      ensures
          forall|i: int|
              0 <= i < strings@.len() && (exists|j: int|
                  0 <= j <= strings@[i]@.len() - substring@.len() && strings[i]@.subrange(
                      j,
                      #[trigger] (j + substring@.len()),
                  ) == substring@) ==> res@.contains(#[trigger] (strings[i])),
      // post-conditions-end

vc-code: |-
  {
      // impl-start
      assume(false);
      vec![]
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}
