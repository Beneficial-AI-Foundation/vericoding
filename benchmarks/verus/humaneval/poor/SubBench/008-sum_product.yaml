vc-description: |-

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn sum(numbers: Seq<u32>) -> (result:int) {
      numbers.fold_left(0, |acc: int, x| acc + x)
  }
  // pure-end
  // pure-end

  spec fn product(numbers: Seq<u32>) -> (result:int) {
      numbers.fold_left(1, |acc: int, x| acc * x)
  }
  // pure-end

vc-helpers: |-
  // pure-end

  proof fn sum_bound(numbers: Seq<u32>)
      ensures
          sum(numbers) <= numbers.len() * u32::MAX,
      decreases numbers.len(),
  {
      // impl-start
      if numbers.len() == 0 {
      } else {
          sum_bound(numbers.drop_last());
      }
      // impl-end
  }
  // pure-end

vc-spec: |-
  fn sum_product(numbers: Vec<u32>) -> (result: (u64, Option<u32>))
      // pre-conditions-start
      requires
          numbers.len() < u32::MAX,
      // pre-conditions-end
      // post-conditions-start
      ensures
          result.0 == sum(numbers@),
          result.1 matches Some(v) ==> v == product(numbers@),
      // post-conditions-end

vc-code: |-
  {
      // impl-start
      assume(false);
      (0, None)
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}