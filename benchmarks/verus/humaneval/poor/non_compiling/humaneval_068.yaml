vc-description: |-
  This verification task implements a function that finds the smallest
  even value in an array of non-negative integers and returns it along with its index.
  If multiple occurrences of the same smallest even value exist, it should return
  the one with the smallest index. If no even values exist or the array is empty,
  it returns an empty list.

  The implementation must correctly handle edge cases and maintain loop invariants
  to prove that the returned result satisfies all the postconditions, including finding
  the true minimum even value and the earliest index for that value.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_input(arr: Seq<int>) -> bool {
      forall|i: int| 0 <= i < arr.len() ==> arr[i] >= 0
  }

  spec fn has_even_value(arr: Seq<int>) -> bool {
      exists|i: int| 0 <= i < arr.len() && arr[i] % 2 == 0
  }

  spec fn smallest_even_value(arr: Seq<int>) -> int {
      smallest_even_value_helper(arr, 0, -1)
  }

  spec fn smallest_even_value_helper(arr: Seq<int>, index: int, current_min: int) -> int
      decreases arr.len() - index
  {
      if index >= arr.len() {
          current_min
      } else if arr[index] % 2 == 0 {
          if current_min == -1 || arr[index] < current_min {
              smallest_even_value_helper(arr, index + 1, arr[index])
          } else {
              smallest_even_value_helper(arr, index + 1, current_min)
          }
      } else {
          smallest_even_value_helper(arr, index + 1, current_min)
      }
  }

  spec fn first_index_of_value(arr: Seq<int>, value: int) -> int
      decreases arr.len()
  {
      if arr.len() > 0 && arr[0] == value {
          0
      } else if arr.len() > 0 {
          1 + first_index_of_value(arr.subrange(1, arr.len() as int), value)
      } else {
          0
      }
  }

vc-helpers: |-

vc-spec: |-
  fn pluck(arr: Seq<int>) -> (result: Vec<int>)
      requires 
          valid_input(arr)
      ensures 
          arr.len() == 0 ==> result.len() == 0,
          !has_even_value(arr) ==> result.len() == 0,
          has_even_value(arr) ==> result.len() == 2,
          result.len() == 2 ==> 0 <= result[1] < arr.len(),
          result.len() == 2 ==> arr[result[1] as int] == result[0],
          result.len() == 2 ==> result[0] % 2 == 0,
          result.len() == 2 ==> forall|i: int| 0 <= i < arr.len() && arr[i] % 2 == 0 ==> result[0] <= arr[i],
          result.len() == 2 ==> forall|i: int| 0 <= i < arr.len() && arr[i] % 2 == 0 && arr[i] == result[0] ==> result[1] <= i

vc-code: |-
  {
      assume(false);
      Vec::new()
  }

vc-postamble: |-

  }

  fn main() {}