vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_divisible(n: int, divisor: int) -> (ret:bool) {
      (n % divisor) == 0
  }
  // pure-end
  // pure-end
  
  spec fn is_prime(n: int) -> (ret:bool) {
      if n < 2 {
          false
      } else {
          (forall|k: int| 2 <= k < n ==> !is_divisible(n as int, k))
      }
  }
  // pure-end

vc-helpers: |-
  proof fn prove_small_primes()
      ensures is_prime(2),
      ensures is_prime(3),
      ensures is_prime(5),
      ensures is_prime(7),
      ensures !is_prime(0),
      ensures !is_prime(1),
      ensures !is_prime(4),
      ensures !is_prime(6),
      ensures !is_prime(8),
      ensures !is_prime(9),
      ensures !is_prime(10),
  {
  }
  
  fn is_prime_check(n: usize) -> (result: bool)
      requires n <= 10,
      ensures result == is_prime(n as int),
  {
      proof { prove_small_primes(); }
      
      if n < 2 {
          false
      } else if n == 2 || n == 3 || n == 5 || n == 7 {
          true
      } else {
          false
      }
  }
  
  proof fn primality_check_correctness(n: int, bound: int)
      requires n >= 2,
      requires bound >= 2,
      requires bound * bound > n,
      requires forall|k: int| 2 <= k < bound ==> !is_divisible(n, k),
      ensures is_prime(n),
  {
  }

vc-description: |-
  function_signature: "def prime_length(s: str) -> bool"
  docstring: |
  Write a function that takes a string and returns True if the string
  length is a prime number or False otherwise
  test_cases:
  - input: "Hello"
  output: True
  - input: "abcdcba"
  output: True
  - input: "kittens"
  output: True
  - input: "orange"
  output: False

vc-spec: |-
  fn prime_length(str: &[char]) -> (result: bool)
      // post-conditions-start
      ensures
          result == is_prime(str.len() as int),
      // post-conditions-end

vc-code: |-
  fn prime_length(str: &[char]) -> (result: bool)
      ensures result == is_prime(str.len() as int),
  {
      /* code modified by LLM (iteration 5): added proper curly braces and fixed function structure */
      let len = str.len();
      if len <= 10 {
          is_prime_check(len)
      } else {
          let mut i = 2;
          while i * i <= len
              invariant
                  2 <= i <= len + 1,
                  forall|k: int| 2 <= k < i ==> !is_divisible(len as int, k),
          {
              if len % i == 0 {
                  return false;
              }
              i += 1;
          }
          proof {
              primality_check_correctness(len as int, i as int);
          }
          true
      }
  }

vc-postamble: |-
  
  } // verus!
  fn main() {}

