vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  spec fn is_max_index(nums: &[i32], idx: usize) -> bool {
      idx < nums.len() && 
      (forall|i: usize| i < nums.len() ==> nums[i] <= nums[idx])
  }

vc-description: |-
  function_signature: "fn max_array(nums: &[i32]) -> (idx: usize)"
  docstring: Find the maximum value or element.

vc-spec: |-
  fn max_array(nums: &[i32]) -> (idx: usize)
      requires nums.len() > 0
      ensures idx < nums.len()
      ensures is_max_index(nums, idx)

vc-code: |-
  {
      let mut max_idx = 0;
      let mut i = 1;
      
      /* code modified by LLM (iteration 5): added proof block to establish post-condition */
      while i < nums.len()
          invariant 
              max_idx < nums.len(),
              i <= nums.len(),
              forall|j: usize| j < i ==> nums[j] <= nums[max_idx]
          decreases nums.len() - i
      {
          if nums[i] > nums[max_idx] {
              max_idx = i;
          }
          i += 1;
      }
      
      proof {
          assert(forall|j: usize| j < nums.len() ==> nums[j] <= nums[max_idx]) by {
              assert(i == nums.len());
              assert(forall|j: usize| j < i ==> nums[j] <= nums[max_idx]);
          }
      }
      
      max_idx
  }

vc-postamble: |-
  
  fn main() {}
  }

