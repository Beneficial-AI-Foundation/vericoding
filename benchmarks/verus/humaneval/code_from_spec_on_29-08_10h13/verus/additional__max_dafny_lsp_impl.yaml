vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-


vc-description: |-
  function_signature: "fn max_dafny_lsp(a: &[i32]) -> (x: usize)"
  docstring: Find the maximum element in an array.

vc-spec: |-
  fn max_dafny_lsp(a: &[i32]) -> (x: usize)
      requires a.len() > 0
      ensures x < a.len()
      ensures forall|i: int| 0 <= i < a.len() ==> a[x as int] >= a[i]

vc-code: |-
  {
      let mut max_idx = 0;
      let mut i = 1;
      
      /* code modified by LLM (iteration 5): added invariant for max_idx bounds and strengthened loop invariant */
      while i < a.len()
          invariant 0 <= max_idx < a.len()
          invariant 1 <= i <= a.len()
          invariant forall|j: int| 0 <= j < i ==> a[max_idx as int] >= a[j]
      {
          if a[i] > a[max_idx] {
              max_idx = i;
          }
          i += 1;
      }
      
      max_idx
  }

vc-postamble: |-
  
  fn main() {}
  }

