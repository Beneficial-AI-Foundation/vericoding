vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  spec fn intersperse_seq(numbers: Seq<i32>, delim: i32) -> Seq<i32> {
      if numbers.len() <= 1 {
          numbers
      } else {
          let mut result = seq![];
          let mut i: int = 0;
          while i < numbers.len()
              invariant
                  0 <= i <= numbers.len(),
                  result.len() == if i == 0 { 0 } else { 2 * i - 1 },
                  forall|j: int| 0 <= j < result.len() ==> {
                      if j % 2 == 0 {
                          result[j] == numbers[j / 2]
                      } else {
                          result[j] == delim
                      }
                  }
          {
              if i > 0 {
                  result = result.push(delim);
              }
              result = result.push(numbers[i]);
              i = i + 1;
          }
          result
      }
  }
  
  proof fn intersperse_lemma(numbers: Seq<i32>, delim: i32)
      ensures
          numbers.len() <= 1 ==> intersperse_seq(numbers, delim) == numbers,
          numbers.len() > 1 ==> intersperse_seq(numbers, delim).len() == 2 * numbers.len() - 1,
          numbers.len() > 1 ==> forall|i: int| 0 <= i < intersperse_seq(numbers, delim).len() ==> {
              if i % 2 == 0 {
                  intersperse_seq(numbers, delim)[i] == numbers[i / 2]
              } else {
                  intersperse_seq(numbers, delim)[i] == delim
              }
          }
  {
  }

vc-description: |-
  function_signature: "fn intersperse(numbers: &[i32], delim: i32) -> (res: Vec<i32>)"
  docstring: Implement intersperse functionality.

vc-spec: |-
  fn intersperse(numbers: &[i32], delim: i32) -> (res: Vec<i32>)
      ensures
          numbers.len() <= 1 ==> res@ == numbers@,
          numbers.len() > 1 ==> res@.len() == 2 * numbers@.len() - 1,
          numbers.len() > 1 ==> forall|i: int| 0 <= i < res@.len() ==> {
              if i % 2 == 0 {
                  res@[i] == numbers@[i / 2]
              } else {
                  res@[i] == delim
              }
          }

vc-code: |-
  {
      if numbers.len() <= 1 {
          /* code modified by LLM (iteration 5): replaced manual Vec construction with to_vec() */
          return numbers.to_vec();
      }
      
      let mut result = Vec::new();
      let mut i: usize = 0;
      
      while i < numbers.len()
          invariant
              0 <= i <= numbers.len(),
              numbers.len() > 1,
              result.len() == if i == 0 { 0 } else { 2 * i - 1 },
              forall|j: int| 0 <= j < result@.len() ==> {
                  if j % 2 == 0 {
                      result@[j] == numbers@[j / 2]
                  } else {
                      result@[j] == delim
                  }
              }
      {
          if i > 0 {
              result.push(delim);
          }
          result.push(numbers[i]);
          i = i + 1;
      }
      
      result
  }

vc-postamble: |-
  
  fn main() {}
  }

