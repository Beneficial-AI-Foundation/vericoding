vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  spec fn contains_duplicate(s: Seq<i32>) -> bool {
      exists|i: int, j: int| 0 <= i < s.len() && 0 <= j < s.len() && i != j && s[i] == s[j]
  }
  
  spec fn is_unique_sequence(s: Seq<i32>) -> bool {
      !contains_duplicate(s)
  }
  
  /* code modified by LLM (iteration 5): removed invalid trigger annotation */
  spec fn is_subsequence_of(sub: Seq<i32>, original: Seq<i32>) -> bool {
      forall|i: int| 0 <= i < sub.len() ==> exists|j: int| 0 <= j < original.len() && sub[i] == original[j]
  }
  
  spec fn preserves_all_unique_elements(original: Seq<i32>, result: Seq<i32>) -> bool {
      forall|val: i32| (exists|i: int| 0 <= i < original.len() && original[i] == val) 
          ==> (exists|j: int| 0 <= j < result.len() && result[j] == val)
  }

vc-description: |-
  function_signature: "fn unique_better(a: &[i32]) -> (result: Vec<i32>)"
  docstring: Implement unique better functionality.

vc-spec: |-
  fn unique_better(a: &[i32]) -> (result: Vec<i32>)
      ensures
          is_unique_sequence(result@),
          is_subsequence_of(result@, a@),
          preserves_all_unique_elements(a@, result@)

vc-code: |-
  {
      let mut result = Vec::new();
      let mut i = 0;
      
      /* code modified by LLM (iteration 3): added decreases clause for outer loop */
      while i < a.len()
          invariant
              0 <= i <= a.len(),
              is_unique_sequence(result@),
              is_subsequence_of(result@, a@),
              preserves_all_unique_elements(a@.subrange(0, i as int), result@)
          decreases a.len() - i
      {
          let mut found = false;
          let mut j = 0;
          
          /* code modified by LLM (iteration 3): added decreases clause for inner loop */
          while j < result.len()
              invariant
                  0 <= j <= result.len(),
                  found ==> exists|k: int| 0 <= k < j && result@[k] == a[i as int],
                  !found ==> forall|k: int| 0 <= k < j ==> result@[k] != a[i as int]
              decreases result.len() - j
          {
              if result[j] == a[i] {
                  found = true;
                  break;
              }
              j += 1;
          }
          
          if !found {
              result.push(a[i]);
          }
          
          i += 1;
      }
      
      result
  }

vc-postamble: |-
  
  fn main() {}
  }

