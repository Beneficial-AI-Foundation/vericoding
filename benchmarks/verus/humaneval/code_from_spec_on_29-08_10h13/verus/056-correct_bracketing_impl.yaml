vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn spec_bracketing_helper(brackets: Seq<char>) -> (result:(int, bool)) {
      brackets.fold_left(
          (0, true),
          |p: (int, bool), c|
              {
                  let (x, b) = p;
                  match (c) {
                      '<' => (x + 1, b),
                      '>' => (x - 1, b && x - 1 >= 0),
                      _ => (x, b),
                  }
              },
      )
  }
  // pure-end
  // pure-end
  
  spec fn spec_bracketing(brackets: Seq<char>) -> (result:bool) {
      let p = spec_bracketing_helper(brackets);
      p.1 && p.0 == 0
  }
  // pure-end

vc-helpers: |-
  proof fn lemma_fold_left_append(s1: Seq<char>, s2: Seq<char>, init: (int, bool))
      ensures spec_bracketing_helper(s1 + s2) == 
              s2.fold_left(spec_bracketing_helper(s1), |p: (int, bool), c| {
                  let (x, b) = p;
                  match c {
                      '<' => (x + 1, b),
                      '>' => (x - 1, b && x - 1 >= 0),
                      _ => (x, b),
                  }
              })
  {
  }
  
  proof fn lemma_step_preserves_invariant(state: (int, bool), c: char)
      ensures (
          {
              let (x, b) = state;
              let new_state = match c {
                  '<' => (x + 1, b),
                  '>' => (x - 1, b && x - 1 >= 0),
                  _ => (x, b),
              };
              new_state == seq![c].fold_left(state, |p: (int, bool), ch| {
                  let (count, valid) = p;
                  match ch {
                      '<' => (count + 1, valid),
                      '>' => (count - 1, valid && count - 1 >= 0),
                      _ => (count, valid),
                  }
              })
          }
      )
  {
  }
  
  proof fn lemma_char_at_index(brackets: &str, i: usize)
      requires i < brackets@.len()
      ensures brackets@[i as int] == brackets.chars().nth(i).unwrap()
  {
  }

vc-description: |-
  function_signature: "def correct_bracketing(brackets: str) -> Bool"
  docstring: |
  brackets is a string of "<" and ">".
  return True if every opening bracket has a corresponding closing bracket, i.e., (each open bracket is properly closed)
  test_cases:
  - input: "<"
  expected_output: False
  - input: "<>"
  expected_output: True
  - input: "<<><>>"
  expected_output: True
  - input: "><<>"
  expected_output: False

vc-spec: |-
  fn correct_bracketing(brackets: &str) -> (ret: bool)
      // pre-conditions-start
      requires
          brackets@.len() <= i32::MAX,
          -brackets@.len() >= i32::MIN,
      // pre-conditions-end
      // post-conditions-start
      ensures
          ret <==> spec_bracketing(brackets@),
      // post-conditions-end

vc-code: |-
  {
      /* code modified by LLM (iteration 5): Use brackets.chars().nth(i).unwrap() to access characters */
      let mut count: i32 = 0;
      let mut valid: bool = true;
      let mut i: usize = 0;
      
      while i < brackets@.len()
          invariant
              0 <= i <= brackets@.len(),
              brackets@.len() <= i32::MAX,
              -brackets@.len() >= i32::MIN,
              spec_bracketing_helper(brackets@.subrange(0, i as int)) == (count as int, valid),
      {
          let c = brackets.chars().nth(i).unwrap();
          
          proof {
              lemma_char_at_index(brackets, i);
          }
          
          match c {
              '<' => {
                  count = count + 1;
              },
              '>' => {
                  count = count - 1;
                  if count < 0 {
                      valid = false;
                  }
              },
              _ => {},
          }
          
          i = i + 1;
      }
      
      valid && count == 0
  }

vc-postamble: |-
  
  } // verus!
  fn main() {}

