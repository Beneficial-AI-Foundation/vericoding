vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-


vc-description: |-
  function_signature: "fn last_position(a: &[i32], elem: i32) -> (result: usize)"
  docstring: Implement last position functionality.

vc-spec: |-
  fn last_position(a: &[i32], elem: i32) -> (result: usize)
      requires a.len() > 0,
      requires exists|i: int| 0 <= i < a.len() && a@[i] == elem,
      ensures result < a.len(),
      ensures a@[result as int] == elem,
      ensures forall|i: int| result < i < a.len() ==> a@[i] != elem

vc-code: |-
  {
      let mut last_idx = 0;
      let mut i = 0;
      
      /* code modified by LLM (iteration 5): find first occurrence to initialize last_idx */
      while i < a.len() && a[i] != elem
          invariant 0 <= i <= a.len()
          invariant forall|j: int| 0 <= j < i ==> a@[j] != elem
      {
          i += 1;
      }
      
      last_idx = i;
      i += 1;
      
      /* code modified by LLM (iteration 5): continue searching for last occurrence */
      while i < a.len()
          invariant last_idx < a.len()
          invariant last_idx < i <= a.len()
          invariant a@[last_idx as int] == elem
          invariant forall|j: int| last_idx < j < i ==> a@[j] != elem
      {
          if a[i] == elem {
              last_idx = i;
          }
          i += 1;
      }
      
      last_idx
  }

vc-postamble: |-
  
  fn main() {}
  }

