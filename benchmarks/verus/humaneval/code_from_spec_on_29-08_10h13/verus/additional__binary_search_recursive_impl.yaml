vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-
  spec fn is_sorted(v: &[i32]) -> bool {
      forall|i: int, j: int| 0 <= i < j < v.len() ==> v@[i] <= v@[j]
  }
  
  spec fn valid_insertion_pos(v: &[i32], elem: i32, pos: isize) -> bool {
      &&& 0 <= pos <= v.len()
      &&& (forall|i: int| 0 <= i < pos ==> v@[i] < elem)
      &&& (forall|i: int| pos <= i < v.len() ==> elem <= v@[i])
  }

vc-description: |-
  function_signature: "fn binary_search_recursive(v: &[i32], elem: i32, c: isize, f: isize) -> (p: isize)"
  docstring: Perform binary search on a sorted array to find the position where an element should be inserted.

vc-spec: |-
  fn binary_search_recursive(v: &[i32], elem: i32, c: isize, f: isize) -> (p: isize)
      requires 
          0 <= c <= f <= v.len(),
          is_sorted(v)
      ensures 
          c <= p <= f,
          valid_insertion_pos(v, elem, p)
      decreases f - c

vc-code: |-
  {
      if c == f {
          c
      } else {
          let mid = c + (f - c) / 2;
          /* code modified by LLM (iteration 5): use ghost block to access sequence element for comparison */
          let mid_val = v[mid as usize];
          if mid_val < elem {
              binary_search_recursive(v, elem, mid + 1, f)
          } else {
              binary_search_recursive(v, elem, c, mid)
          }
      }
  }

vc-postamble: |-
  
  fn main() {}
  }

