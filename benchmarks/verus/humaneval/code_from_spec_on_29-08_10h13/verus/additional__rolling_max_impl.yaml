vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn seq_max(a: Seq<i32>) -> (ret: i32)
      decreases a.len(),
  {
      if a.len() == 0 {
          i32::MIN
      } else if a.last() > seq_max(a.drop_last()) {
          a.last()
      } else {
          seq_max(a.drop_last())
      }
  }

vc-helpers: |-
  proof fn seq_max_properties(a: Seq<i32>)
      requires a.len() > 0
      ensures seq_max(a) >= seq_max(a.drop_last())
      decreases a.len()
  {
      if a.len() == 1 {
          // Base case: seq_max(a) = a.last(), seq_max(a.drop_last()) = i32::MIN
      } else {
          seq_max_properties(a.drop_last());
          if a.last() > seq_max(a.drop_last()) {
              // seq_max(a) = a.last() >= seq_max(a.drop_last())
          } else {
              // seq_max(a) = seq_max(a.drop_last())
          }
      }
  }
  
  proof fn seq_max_in_sequence(a: Seq<i32>)
      requires a.len() > 0
      ensures exists|k: int| 0 <= k < a.len() && a[k] == seq_max(a)
      decreases a.len()
  {
      if a.len() == 1 {
          /* code modified by LLM (iteration 5): fix base case by showing seq_max equals a.last() which equals a[0] */
          assert(a.drop_last().len() == 0);
          assert(seq_max(a.drop_last()) == i32::MIN);
          assert(a.last() > i32::MIN || a.last() == i32::MIN);
          if a.last() > seq_max(a.drop_last()) {
              assert(seq_max(a) == a.last());
          } else {
              assert(seq_max(a) == seq_max(a.drop_last()));
              assert(seq_max(a) == i32::MIN);
              assert(a.last() == i32::MIN);
              assert(seq_max(a) == a.last());
          }
          assert(a.last() == a[0]);
          assert(a[0] == seq_max(a));
          assert(0 <= 0 < a.len());
      } else {
          if a.last() > seq_max(a.drop_last()) {
              /* code modified by LLM (iteration 5): add explicit witness for existence */
              assert(seq_max(a) == a.last());
              assert(seq_max(a) == a[a.len() - 1]);
              assert(0 <= a.len() - 1 < a.len());
          } else {
              seq_max_in_sequence(a.drop_last());
              /* code modified by LLM (iteration 5): use the witness from recursive call */
              let witness_k = choose|k: int| 0 <= k < a.drop_last().len() && a.drop_last()[k] == seq_max(a.drop_last());
              assert(seq_max(a) == seq_max(a.drop_last()));
              assert(a[witness_k] == seq_max(a));
              assert(0 <= witness_k < a.len());
          }
      }
  }
  
  proof fn seq_max_single_element(a: Seq<i32>)
      requires a.len() == 1
      ensures seq_max(a) == a[0]
  {
      assert(a.last() == a[0]);
      assert(seq_max(a) == a.last());
  }

vc-description: |-
  function_signature: "fn rolling_max(numbers: Vec<i32>) -> (result: Vec<i32>)"
  docstring: Compute rolling maximum values over a sliding window in an array.

vc-spec: |-
  fn rolling_max(numbers: Vec<i32>) -> (result: Vec<i32>)
      // post-conditions-start
      ensures
          result.len() == numbers.len(),
          forall|i: int| 0 <= i < numbers.len() ==> result[i] == seq_max(numbers@.take(i + 1)),
      // post-conditions-end

vc-code: |-
  {
      let mut result: Vec<i32> = Vec::new();
      
      for i in 0..numbers.len()
          invariant
              result.len() == i,
              forall|j: int| 0 <= j < i ==> result[j] == seq_max(numbers@.take(j + 1)),
      {
          /* code modified by LLM (iteration 5): use usize indexing in executable code, cast to int only in proof blocks */
          let current_max = if i == 0 {
              numbers[i]
          } else {
              let prev_max = result[i - 1];
              if numbers[i] > prev_max {
                  numbers[i]
              } else {
                  prev_max
              }
          };
          
          proof {
              let prefix = numbers@.take(i as int + 1);
              if i == 0 {
                  assert(prefix.len() == 1);
                  seq_max_single_element(prefix);
                  assert(seq_max(prefix) == prefix[0]);
                  assert(prefix[0] == numbers@[0]);
              } else {
                  let prev_prefix = numbers@.take(i as int);
                  assert(prefix == prev_prefix.push(numbers@[i as int]));
                  assert(prefix.drop_last() == prev_prefix);
                  assert(seq_max(prev_prefix) == result@[i as int - 1]);
                  
                  if numbers@[i as int] > result@[i as int - 1] {
                      assert(prefix.last() > seq_max(prefix.drop_last()));
                      assert(seq_max(prefix) == prefix.last());
                      assert(current_max == numbers@[i as int]);
                  } else {
                      assert(prefix.last() <= seq_max(prefix.drop_last()));
                      assert(seq_max(prefix) == seq_max(prefix.drop_last()));
                      assert(current_max == result@[i as int - 1]);
                  }
              }
          }
          
          result.push(current_max);
      }
      
      /* code modified by LLM (iteration 5): only call seq_max_in_sequence if numbers is non-empty */
      proof {
          if numbers.len() > 0 {
              seq_max_in_sequence(numbers@);
          }
      }
      
      result
  }

vc-postamble: |-
  
  fn main() {}
  }

