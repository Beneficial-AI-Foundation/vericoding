vc-preamble: |-
  use vstd::arithmetic::div_mod::{
      lemma_div_is_ordered, lemma_div_is_ordered_by_denominator, lemma_div_multiples_vanish,
      lemma_fundamental_div_mod, lemma_fundamental_div_mod_converse,
  };
  use vstd::arithmetic::mul::{
      lemma_mul_inequality, lemma_mul_is_distributive_add, lemma_mul_is_distributive_add_other_way,
      lemma_mul_unary_negation,
  };
  use vstd::prelude::*;
  
  verus! {
  
  spec fn sum(numbers: Seq<int>) -> (result:int) {
      numbers.fold_left(0, |acc: int, x| acc + x)
  }
  // pure-end
  // pure-end
  
  spec fn mean(values: Seq<int>) -> (result:int)
      recommends
          values.len() > 0,
  {
      sum(values) / (values.len() as int)
  }
  // pure-end
  // pure-end
  
  spec fn abs(n: int) -> (result:int) {
      if n >= 0 {
          n
      } else {
          -n
      }
  }
  // pure-end
  // pure-end
  
  spec fn spec_mean_absolute_deviation(numbers: Seq<int>) -> (result:int)
      recommends
          numbers.len() > 0,
  {
      let avg = mean(numbers);
      sum(numbers.map(|_index, n: int| abs(n - avg))) / (numbers.len() as int)
  }
  // pure-end
  // pure-end
  
  spec fn if_inner_lemma_how_to_add_then_divide(x : int, y : int, d : int) -> (result: bool) {
      if (x % d) + (y % d) >= d {
          &&& (x + y) / d == (x / d) + (y / d) + 1
          &&& (x + y) % d == (x % d) + (y % d) - d
      } else {
          &&& (x + y) / d == (x / d) + (y / d)
          &&& (x + y) % d == (x % d) + (y % d)
      }
  }
  // pure-end
  // pure-end
  
  
  spec fn expr_inner_divide_i32_by_u32(qr : (i32, u32), x: i32, d: u32) -> (result:bool) {
      let (q, r) = qr;
      q == x as int / d as int && r == x as int % d as int
  }
  // pure-end
  spec fn expr_inner_divide_i32_by_usize(qr : (i32, usize), x: i32, d: usize) -> (result:bool) {
      let (q, r) = qr;
      q == x as int / d as int && r == x as int % d as int
  }
  // pure-end

vc-helpers: |-


vc-description: |-
  function_signature: "def mean_absolute_deviation(numbers: List[float]) -> float"
  docstring: |
  For a given list of input numbers, calculate Mean Absolute Deviation
  around the mean of this dataset.
  Mean Absolute Deviation is the average absolute difference between each
  element and a centerpoint (mean in this case):
  MAD = average | x - x_mean |
  test_cases:
  - input:
  - 1.0
  - 2.0
  - 3.0
  - 4.0
  expected_output: 1.0

vc-spec: |-
  fn mean_absolute_deviation(numbers: &[i32]) -> (result: u32)
      // pre-conditions-start
      requires
          numbers.len() > 0,
      // pre-conditions-end
      // post-conditions-start
      ensures
          result == spec_mean_absolute_deviation(numbers@.map(|_index, n: i32| n as int)),
      // post-conditions-end

vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }

vc-postamble: |-
  
  }
  fn main() {}

