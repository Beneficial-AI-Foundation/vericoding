vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn abs_spec(i: int) -> int {
      if i < 0 { -i } else { i }
  }

vc-helpers: |-


vc-description: |-
  function_signature: "fn has_close_elements(numbers: &[i32], threshold: i32) -> (flag: bool)"
  docstring: Implement has close elements functionality.

vc-spec: |-
  #[verifier::loop_isolation(false)]
  fn has_close_elements(numbers: &[i32], threshold: i32) -> (flag: bool)
      // pre-conditions-start
      requires
          threshold > 0,
          forall|i: int, j: int| 0 <= i && i < numbers.len() && 0 <= j && j < numbers.len() ==> numbers[i] - numbers[j] < i32::MAX && -(numbers[i] - numbers[j]) < i32::MAX
      // pre-conditions-end
      // post-conditions-start
      ensures
          flag == exists|i: int, j: int| 0 <= i && 0 <= j && i < numbers.len() && j < numbers.len() && i != j && abs_spec(numbers[i] - numbers[j]) < threshold
      // post-conditions-end

vc-code: |-
  {
      // impl-start
      assume(false);
      false
      // impl-end
  }

vc-postamble: |-
  
  fn main() {}
  }

