vc-preamble: |-
  use vstd::assert_seqs_equal;
  use vstd::prelude::*;
  
  verus! {
  
  spec fn intersperse_spec(numbers: Seq<u64>, delimiter: u64) -> (result:Seq<u64>)
      decreases numbers.len(),
  {
      if numbers.len() <= 1 {
          numbers
      } else {
          intersperse_spec(numbers.drop_last(), delimiter) + seq![delimiter, numbers.last()]
      }
  }
  // pure-end
  // pure-end
  
  spec fn even(i: int) -> (result:int) {
      2 * i
  }
  // pure-end
  // pure-end
  
  spec fn odd(i: int) -> (result:int) {
      2 * i + 1
  }
  // pure-end
  // pure-end
  
  spec fn intersperse_quantified(numbers: Seq<u64>, delimiter: u64, interspersed: Seq<u64>) -> (result:bool) {
      (if numbers.len() == 0 {
          interspersed.len() == 0
      } else {
          interspersed.len() == 2 * numbers.len() - 1
      }) && (forall|i: int| 0 <= i < numbers.len() ==> #[trigger] interspersed[even(i)] == numbers[i])
          && (forall|i: int|
          0 <= i < numbers.len() - 1 ==> #[trigger] interspersed[odd(i)] == delimiter)
  }
  // pure-end

vc-helpers: |-


vc-description: |-
  function_signature: "def intersperse(numbers: List[int], delimeter: int) -> List[int]"
  docstring: |
  Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
  test_cases:
  - input:
  - []
  - 4
  expected_output: []
  - input:
  - [1, 2, 3]
  - 4
  expected_output: [1, 4, 2, 4, 3]

vc-spec: |-
  fn intersperse(numbers: Vec<u64>, delimiter: u64) -> (result: Vec<u64>)
      // post-conditions-start
      ensures
          result@ == intersperse_spec(numbers@, delimiter),
      // post-conditions-end

vc-code: |-
  {
      // impl-start
      assume(false);
      vec![]
      // impl-end
  }

vc-postamble: |-
  
  }
  fn main() {}

