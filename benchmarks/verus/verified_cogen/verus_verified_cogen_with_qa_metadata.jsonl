{"id": "proofsynthesis_arg_free", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn choose_odd()", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_binary_search", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn binary_search(v: &Vec<u64>, k: u64) -> (result:usize)\n\n    requires\n        forall|i:int, j:int| 0 <= i <= j < v.len() ==> v[i] <= v[j],\n        exists|i:int| 0 <= i < v.len() && k == v[i],\n\n    ensures\n        result < v.len(),\n        k == v[result as int],", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_brs1", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32)\n\n    requires\n        N > 0,\n        old(a).len() == N,\n        old(sum).len() == 1,\n\n    ensures\n        sum[0] <= N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_brs2", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32) \n\n\trequires \n\t\told(a).len() == N,\n\t\told(sum).len() == 1,\n\t\tN > 0,\n\t\tN < 1000,\n\n\tensures\n\t\tsum[0] <= 2 * N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_brs3", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32) \n\n\trequires \n\t\told(a).len() == N,\n\t\told(sum).len() == 1,\n\t\tN > 0,\n\t\tN < 1000,\n\n\tensures\n\t\tsum[0] <= 3 * N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_brs4", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32) \n\n\trequires \n\t\told(a).len() == N,\n\t\told(sum).len() == 1,\n\t\tN > 0,\n\t\tN < 1000,\n\n\tensures\n\t\tsum[0] <= 4 * N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_brs5", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32) \n\n\trequires \n\t\told(a).len() == N,\n\t\told(sum).len() == 1,\n\t\tN > 0,\n\t\tN < 1000,\n\n\tensures\n\t\tsum[0] <= 5 * N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_bubble_v1", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn sorted_between(a: Seq<u32>, from: int, to: int) -> (result:bool) {\n        forall |i: int, j:int|  from <= i < j < to ==> a[i] <= a[j]\n    }\n\nspec fn is_reorder_of<T>(r: Seq<int>, p: Seq<T>, s: Seq<T>) -> (result:bool) {\n    &&& r.len() == s.len()\n    &&& forall|i: int| 0 <= i < r.len() ==> 0 <= #[trigger] r[i] < r.len()\n    &&& forall|i: int, j: int| 0 <= i < j < r.len() ==> r[i] != r[j]\n    &&& p =~= r.map_values(|i: int| s[i])\n}", "vc-helpers": "", "vc-spec": "fn test1(nums: &mut Vec<u32>)\n\n        ensures\n            sorted_between(nums@, 0, nums@.len() as int),\n            exists|r: Seq<int>| is_reorder_of(r, nums@, old(nums)@),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_bubble_v2", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn sorted_between(a: Seq<u32>, from: int, to: int) -> (result:bool) {\n    forall |i: int, j:int|  from <= i < j < to ==> a[i] <= a[j]\n}\n\nspec fn is_reorder_of<T>(r: Seq<int>, p: Seq<T>, s: Seq<T>) -> (result:bool) {\n    &&& r.len() == s.len()\n    &&& forall|i: int| 0 <= i < r.len() ==> 0 <= #[trigger] r[i] < r.len()\n    &&& forall|i: int, j: int| 0 <= i < j < r.len() ==> r[i] != r[j]\n    &&& p =~= r.map_values(|i: int| s[i])\n}", "vc-helpers": "", "vc-spec": "fn test1(nums: &mut Vec<u32>)\n\n    ensures\n        sorted_between(nums@, 0, nums@.len() as int),\n        exists|r: Seq<int>| is_reorder_of(r, nums@, old(nums)@),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_cell_2_sum", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<u32>, N: u32) -> (sum: u32)\n\n    requires \n        old(a).len() == N,\n        N <= 0x7FFF_FFFF,\n\n    ensures\n        sum <= 2*N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_choose_odd", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn choose_odd(v: &Vec<u64>) -> (odd_index: usize)\n\n    requires    \n        exists |q:int| 0 <= q < v.len() && v[q] % 2 == 1,\n\n    ensures\n        odd_index < v.len(),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_conda", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32)\n\n\trequires\n\t\tN > 0,\n\t\told(a).len() == N,\n\t\told(sum).len() == 1,\n\t\tN < 1000,\n\n\tensures\n\t\tsum[0] == 2 * N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_condg", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32)\n\n\trequires\n\t\tN > 0,\n\t\told(a).len() == N,\n\t\told(sum).len() == 1,\n\n\tensures\n\t\tforall |k:int| 0 <= k < N ==> a[k] == 0,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_conditional_average", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn conditional_average(vals_1: &Vec<u64>, vals_2: &Vec<u64>, conds_1: &Vec<bool>, conds_2: &Vec<bool>, avgs: &mut Vec<u64>) \n\n    requires \n        vals_1.len() == vals_2.len(),\n        vals_1.len() == conds_1.len(),\n        vals_1.len() == conds_2.len(),\n        forall |idx:int| 0 <= idx < vals_1.len() ==> conds_1[idx] || conds_2[idx],\n        forall |idx:int| 0 <= idx < vals_1.len() ==> vals_1[idx] < 1000,\n        forall |idx:int| 0 <= idx < vals_2.len() ==> vals_2[idx] < 1000,\n\n    ensures\n        avgs.len() == vals_1.len(),\n        forall |idx:int| 0 <= idx < vals_1.len() ==> (\n            (conds_1[idx] && conds_2[idx] ==> avgs[idx] == (vals_1[idx] + vals_2[idx]) / 2) &&\n            (conds_1[idx] && !conds_2[idx] ==> avgs[idx] == vals_1[idx]) &&\n            (!conds_1[idx] && conds_2[idx] ==> avgs[idx] == vals_2[idx])\n        )", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_condm", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, N: u32)\n\n\t\trequires\n\t\t\tN > 0,\n\t\t\told(a).len() == N,\n\n\t\tensures\n\t\t\tforall |k:int| 0 <= k < N ==> a[k] % 2 == N % 2,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_condn", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, N: i32, m: i32)\n\n\trequires\n\t\tN > 0,\n\t\told(a).len() == N,\n\n\tensures\n\t\tforall |k:int| 0 <= k < N ==> a[k] <= N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_fib", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn fibo(n: int) -> (result:nat)\n    decreases n\n{\n    if n <= 0 { 0 } else if n == 1 { 1 }\n    else { fibo(n - 2) + fibo(n - 1) }\n}\n\nspec fn fibo_fits_i32(n: int) -> (result:bool) {\n    fibo(n) < 0x8000_0000\n}", "vc-helpers": "", "vc-spec": "fn fibonacci(n: usize) -> (ret: Vec<i32>)\n\n    requires\n        fibo_fits_i32(n as int),\n        n >= 2,\n\n    ensures\n        forall |i: int| 2 <= i < n ==> #[trigger] ret@[i] ==  fibo(i), \n        ret@.len() == n,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_filter", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun4(x: &Vec<u64>, y: &mut Vec<u64>)\n\n    requires \n        old(y).len() == 0,\n\n    ensures \n        y@ == x@.filter(|k:u64| k%3 == 0),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_filter_v2", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun4(x: &Vec<u64>, y: &mut Vec<u64>)\n\n    requires \n        old(y).len() == 0,\n\n    ensures \n        y@ == x@.filter(|k:u64| k%3 == 0),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_filter_weak", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun4(x: &Vec<u64>, y: &mut Vec<u64>)\n\n    requires \n        old(y).len() == 0,\n\n    ensures \n        forall |k:int| 0 <= k < y.len() ==> y[k] % 3 == 0 && x@.contains(y@[k]),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_findmax", "vc-description": "", "vc-preamble": "#[allow(unused_imports)]\nuse vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn find_max(nums: Vec<i32>) -> (ret:i32)\n\n    requires\n        nums.len() > 0,\n\n    ensures\n        forall |i: int| 0 <= i < nums@.len() ==> nums@[i] <= ret,\n        exists |i: int| 0 <= i < nums@.len() ==> nums@[i] == ret,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_linearsearch", "vc-description": "", "vc-preamble": "#[allow(unused_imports)]\nuse vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn linear_search(nums: Vec<i32>, target: i32) -> (ret: i32)\n\n    requires\n        nums@.len() < 0x8000_0000,\n\n    ensures\n        ret < nums@.len(),\n        ret >=0 ==> nums@[ret as int] == target,\n        ret >=0 ==> forall |i: int| 0 <= i < ret as int ==> #[trigger]nums@[i]!= target,\n        ret < 0 ==> forall |i: int| 0 <= i < nums@.len() as int ==> #[trigger]nums@[i] != target,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_map", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun2(x: &mut Vec<i32>) \n\n    requires \n        forall |k:int| 0 <= k < old(x).len() ==> old(x)[k] <= 0x7FFF_FFFB,\n\n    ensures \n        x@.len() == old(x)@.len(),\n        forall |k:int| 0 <= k < x.len() ==> #[trigger] x@[k] == old(x)@[k] + 4,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_max_index", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn myfun1(x: &Vec<i32>) -> (max_index: usize)\n\n    requires\n        x.len() >= 1,\n\n    ensures\n        forall|k: int| 0 <= k < x.len() ==> x[max_index as int] >= x[k],\n        max_index < x.len(),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_ms1", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<usize>, sum: &mut Vec<usize>, N: usize) \n\n\trequires \n\t\told(a).len() == N,\n\t\told(sum).len() == 1,\n\t\tN > 0,\n\n\tensures\n\t\tsum[0] == 0,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_ms2", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<usize>, sum: &mut Vec<usize>, N: usize) \n\n\trequires \n\t\told(a).len() == N,\n\t\told(sum).len() == 1,\n\t\tN > 0,\n\n\tensures\n\t\tsum[0] <= N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_ms3", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32) \n\n\trequires \n\t\told(a).len() == N,\n\t\told(sum).len() == 1,\n\t\tN > 0,\n\t\tN < 1000,\n\n\tensures\n\t\tsum[0] <= 2 * N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_ms4", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32) \n\n\trequires \n\t\told(a).len() == N,\n\t\told(sum).len() == 1,\n\t\tN > 0,\n\t\tN < 1000,\n\n\tensures\n\t\tsum[0] <= 3 * N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_ms5", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32) \n\n\trequires \n\t\told(a).len() == N,\n\t\told(sum).len() == 1,\n\t\tN > 0,\n\t\tN < 1000,\n\n\tensures\n\t\tsum[0] <= 4 * N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_remove_all_greater", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn remove_all_greater(v: Vec<i32>, e: i32) -> (result: Vec<i32>)\n\n    requires \n        forall |k1:int,k2:int| 0 <= k1 < k2 < v.len() ==> v[k1] != v[k2],\n\n    ensures\n        forall |k:int| 0 <= k < result.len() ==> result[k] <= e && v@.contains(result[k]),\n        forall |k:int| 0 <= k < v.len() && v[k] <= e ==> result@.contains(v[k]),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_remove_all_greater_v2", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn remove_all_greater(v: Vec<i32>, e: i32) -> (result: Vec<i32>)\n\n    requires \n        forall |k1:int,k2:int| 0 <= k1 < k2 < v.len() ==> v[k1] != v[k2],\n\n    ensures\n        forall |k:int| 0 <= k < result.len() ==> result[k] <= e && v@.contains(result[k]),\n        forall |k:int| 0 <= k < v.len() && v[k] <= e ==> result@.contains(v[k]),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_res1", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, b: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32)\n\n\trequires\n\t\tN > 0,\n\t\told(a).len() == N,\n\t\told(b).len() == N,\n\t\told(sum).len() == 1,\n        N < 1000,\n\n\tensures\n\t\tsum[0] <= 2 * N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_res1o", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, b: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32)\n\n\trequires\n\t\tN > 0,\n\t\told(a).len() == N,\n\t\told(b).len() == N,\n\t\told(sum).len() == 1,\n\t\tN < 1000,\n\n\tensures\n\t\tsum[0] <= 2 * N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_res2o", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, b: &mut Vec<i32>, c: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32)\n\n\trequires\n\t\tN > 0,\n\t\told(a).len() == N,\n\t\told(b).len() == N,\n\t\told(c).len() == N,\n\t\told(sum).len() == 1,\n\t\tN < 1000,\n\n\tensures\n\t\tsum[0] <= 3 * N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_s12if", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: usize)\n\n\trequires\n\t\tN > 0,\n\t\told(a).len() == N,\n\t\told(sum).len() == 1,\n\t\tN < 1000,\n\n\tensures\n\t\tsum[0] == 2 * N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_s1if", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32)\n\n\trequires\n\t\tN > 0,\n\t\told(a).len() == N,\n\t\told(sum).len() == 1,\n\n\tensures\n\t\tsum[0] == N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_s1lif", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32)\n\n\trequires\n\t\tN > 0,\n\t\told(a).len() == N,\n\t\told(sum).len() == 1,\n\t\tN < 1000,\n\n\tensures\n\t\tsum[0] == 2 * N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_s22if", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: usize)\n\n\trequires\n\t\tN > 0,\n\t\told(a).len() == N,\n\t\told(sum).len() == 1,\n\t\tN < 1000,\n\n\tensures\n\t\tsum[0] == 3 * N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_s2if", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32)\n\n\trequires\n\t\tN > 0,\n\t\told(a).len() == N,\n\t\told(sum).len() == 1,\n\t\tN < 1000,\n\n\tensures\n\t\tsum[0] == 2 * N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_s2lif", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "pub fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32)\n\n\trequires\n\t\tN > 0,\n\t\told(a).len() == N,\n\t\told(sum).len() == 1,\n\t\tN < 1000,\n\n\tensures\n\t\tsum[0] == 3 * N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_s32if", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: usize)\n\n\trequires\n\t\tN > 0,\n\t\told(a).len() == N,\n\t\told(sum).len() == 1,\n\t\tN < 1000,\n\n\tensures\n\t\tsum[0] == 4 * N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_s3if", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32)\n\n    requires\n        N > 0,\n        old(a).len() == N,\n        old(sum).len() == 1,\n        N < 1000,\n\n    ensures\n        sum[0] == 3 * N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_s3lif", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32)\n\n    requires\n        N > 0,\n        old(a).len() == N,\n        old(sum).len() == 1,\n        N < 1000,\n\n    ensures\n        sum[0] == 4 * N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_s42if", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: usize)\n\n\trequires\n\t\tN > 0,\n\t\told(a).len() == N,\n\t\told(sum).len() == 1,\n\t\tN < 1000,\n\n\tensures\n\t\tsum[0] == 5 * N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_s4if", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32)\n\n    requires\n        N > 0,\n        old(a).len() == N,\n        old(sum).len() == 1,\n        N < 1000,\n\n    ensures\n        sum[0] == 4 * N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_s4lif", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32)\n\n    requires\n        N > 0,\n        old(a).len() == N,\n        old(sum).len() == 1,\n        N < 1000,\n\n    ensures\n        sum[0] == 5 * N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_s52if", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: usize)\n\n\trequires\n\t\tN > 0,\n\t\told(a).len() == N,\n\t\told(sum).len() == 1,\n\t\tN < 1000,\n\n\tensures\n\t\tsum[0] == 6 * N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_s5if", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32)\n\n\trequires\n\t\tN > 0,\n\t\told(a).len() == N,\n\t\told(sum).len() == 1,\n\t\tN < 1000,\n\n\tensures\n\t\tsum[0] == 5 * N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_s5lif", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32)\n\n\trequires\n\t\tN > 0,\n\t\told(a).len() == N,\n\t\told(sum).len() == 1,\n\t\tN < 1000,\n\n\tensures\n\t\tsum[0] == 6 * N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_simple_nested", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn simple_nested(a: &mut Vec<i32>, b: &Vec<i32>, N: i32) -> (sum: i32)\n\n    requires \n        forall |k:int| k <= #[trigger] b[k] <= k + 1,\n        old(a).len() == N,\n        b.len() == N,\n        N <= 0x3FFF_FFFF,\n\n    ensures\n        N <= sum <= 2*N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_sina1", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32)\n\n\trequires\n\t\tN > 0,\n\t\told(a).len() == N,\n\t\told(sum).len() == 1,\n\n\tensures\n\t\tforall |k:int| 0 <= k < N ==> a[k] == N,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_sina2", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32)\n\n\trequires\n\t\tN > 0,\n\t\told(a).len() == N,\n\t\told(sum).len() == 1,\n\t\tN < 1000,\n\n\tensures\n\t\tforall |k:int| 0 <= k < N ==> a[k] == N + 1,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_sina3", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, b: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32)\n\n\trequires\n\t\tN > 0,\n\t\told(a).len() == N,\n\t\told(b).len() == N,\n\t\told(sum).len() == 1,\n\t\tN < 1000,\n\n\tensures\n\t\tforall |k:int| 0 <= k < N ==> a[k] == N + 1,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_sina4", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, b: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32)\n\n\trequires\n\t\tN > 0,\n\t\told(a).len() == N,\n\t\told(b).len() == N,\n\t\told(sum).len() == 1,\n\t\tN < 1000,\n\n\tensures\n\t\tforall |k:int| 0 <= k < N ==> b[k] == N + 2,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_sina5", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{", "vc-helpers": "", "vc-spec": "fn myfun(a: &mut Vec<i32>, b: &mut Vec<i32>, sum: &mut Vec<i32>, N: i32)\n\n\trequires\n\t\tN > 0,\n\t\told(a).len() == N,\n\t\told(b).len() == N,\n\t\told(sum).len() == 1,\n\t\tN < 1000,\n\n\tensures\n\t\tforall |k:int| 0 <= k < N ==> a[k] == 2 * N + 1,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_tail_triangle", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus!{\n\nspec fn triangle(n: nat) -> (result: nat)\n    decreases n\n{\n    if n == 0 {\n        0\n    } else {\n        n + triangle((n - 1) as nat)\n    }\n}", "vc-helpers": "", "vc-spec": "fn tail_triangle(n: u32, idx: u32, sum: &mut u32)\n\n    requires\n        idx <= n,\n        *old(sum) == triangle(idx as nat),\n        triangle(n as nat) < 0x1_0000_0000,\n\n    ensures\n        *sum == triangle(n as nat),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_105", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn count_boolean(seq: Seq<bool>) -> (result: int)\n    decreases seq.len(),\n{\n    if seq.len() == 0 {\n        0\n    } else {\n        count_boolean(seq.drop_last()) + if (seq.last()) {\n            1 as int\n        } else {\n            0 as int\n        }\n    }\n}", "vc-helpers": "", "vc-spec": "fn count_true(arr: &Vec<bool>) -> (count: u64)\n\n    ensures\n        0 <= count <= arr.len(),\n        count_boolean(arr@) == count,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_113", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn is_digit_sepc(c: char) -> (res: bool) {\n    (c as u32) >= 48 && (c as u32) <= 57\n}", "vc-helpers": "", "vc-spec": "fn is_integer(text: &Vec<char>) -> (result: bool)\n\n    ensures\n        result == (forall|i: int| 0 <= i < text.len() ==> (#[trigger] is_digit_sepc(text[i]))),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_133", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn sum_negative_to(seq: Seq<i64>) -> (res: int)\n    decreases seq.len(),\n{\n    if seq.len() == 0 {\n        0\n    } else {\n        sum_negative_to(seq.drop_last()) + if (seq.last() < 0) {\n            seq.last() as int\n        } else {\n            0 as int\n        }\n    }\n}", "vc-helpers": "", "vc-spec": "fn sum_negatives(arr: &Vec<i64>) -> (sum_neg: i128)\n\n    ensures\n        sum_negative_to(arr@) == sum_neg,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_142", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn count_identical(s1: Seq<i32>, s2: Seq<i32>, s3: Seq<i32>) -> (result: int)\n    decreases s1.len(), s2.len(), s3.len(),\n{\n    if s1.len() == 0 || s2.len() == 0 || s3.len() == 0 {\n        0\n    } else {\n        count_identical(s1.drop_last(), s2.drop_last(), s3.drop_last()) + if (s1.last() == s2.last()\n            && s2.last() == s3.last()) {\n            1 as int\n        } else {\n            0 as int\n        }\n    }\n}", "vc-helpers": "", "vc-spec": "fn count_identical_position(arr1: &Vec<i32>, arr2: &Vec<i32>, arr3: &Vec<i32>) -> (count: usize)\n\n    requires\n        arr1.len() == arr2.len() && arr2.len() == arr3.len(),\n\n    ensures\n        0 <= count <= arr1.len(),\n        count_identical(arr1@, arr2@, arr3@) == count,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_145", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn max_difference(arr: &Vec<i32>) -> (diff: i32)\n\n    requires\n        arr.len() > 0,\n        forall|i: int| 0 <= i < arr.len() ==> i32::MIN / 2 < #[trigger] arr[i] < i32::MAX / 2,\n\n    ensures\n        forall|i: int, j: int| 0 <= i < arr.len() && 0 <= j < arr.len() ==> arr[i] - arr[j] <= diff,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_161", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn remove_elements(arr1: &Vec<i32>, arr2: &Vec<i32>) -> (result: Vec<i32>)\n\n    ensures\n        forall|i: int|\n            0 <= i < result.len() ==> (arr1@.contains(#[trigger] result[i]) && !arr2@.contains(\n                #[trigger] result[i],\n            )),\n        forall|i: int|\n            0 <= i < arr1.len() ==> (arr2@.contains(#[trigger] arr1[i]) || result@.contains(\n                #[trigger] arr1[i],\n            )),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_170", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn sum_to(arr: Seq<i64>) -> (result: int)\n    decreases arr.len(),\n{\n    if arr.len() == 0 {\n        0\n    } else {\n        sum_to(arr.drop_last()) + arr.last()\n    }\n}", "vc-helpers": "", "vc-spec": "fn sum_range_list(arr: &Vec<i64>, start: usize, end: usize) -> (sum: i128)\n\n    requires\n        0 <= start <= end,\n        start <= end < arr.len(),\n\n    ensures\n        sum_to(arr@.subrange(start as int, end + 1 as int)) == sum,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_18", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn remove_chars(str1: &Vec<char>, str2: &Vec<char>) -> (result: Vec<char>)\n\n    ensures\n        forall|i: int|\n            0 <= i < result.len() ==> (str1@.contains(#[trigger] result[i]) && !str2@.contains(\n                #[trigger] result[i],\n            )),\n        forall|i: int|\n            0 <= i < str1.len() ==> (str2@.contains(#[trigger] str1[i]) || result@.contains(\n                #[trigger] str1[i],\n            )),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_2", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn shared_elements(list1: &Vec<i32>, list2: &Vec<i32>) -> (shared: Vec<i32>)\n\n    ensures\n        forall|i: int|\n            0 <= i < shared.len() ==> (list1@.contains(#[trigger] shared[i]) && list2@.contains(\n                #[trigger] shared[i],\n            )),\n        forall|i: int, j: int| 0 <= i < j < shared.len() ==> shared[i] != shared[j],", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_230", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn inner_expr_replace_blanks_with_chars(str1: &Vec<char>, ch: char, i: int) -> (result: char) {\n    if str1[i] == 32 {\n        ch\n    } else {\n        str1[i]\n    }\n}", "vc-helpers": "", "vc-spec": "fn replace_blanks_with_chars(str1: &Vec<char>, ch: char) -> (result: Vec<char>)\n\n    ensures\n        str1@.len() == result@.len(),\n        forall|i: int|\n            0 <= i < str1.len() ==> result[i] == inner_expr_replace_blanks_with_chars(str1, ch, i),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_240", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn replace_last_element(first: &Vec<i32>, second: &Vec<i32>) -> (replaced_list: Vec<i32>)\n\n    requires\n        first.len() > 0,\n\n    ensures\n        replaced_list@ == first@.subrange(0, first.len() - 1).add(second@),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_249", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn intersection(arr1: &Vec<i32>, arr2: &Vec<i32>) -> (result: Vec<i32>)\n\n    ensures\n        forall|i: int|\n            0 <= i < result.len() ==> (arr1@.contains(#[trigger] result[i]) && arr2@.contains(\n                #[trigger] result[i],\n            )),\n        forall|i: int, j: int| 0 <= i < j < result.len() ==> result[i] != result[j],", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_251", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn insert_before_each(arr: &Vec<i32>, elem: i32) -> (result: Vec<i32>)\n\n    ensures\n        result@.len() == (2 * arr.len()),\n        forall|k: int| 0 <= k < arr.len() ==> #[trigger] result[2 * k] == elem,\n        forall|k: int| 0 <= k < arr.len() ==> #[trigger] result[2 * k + 1] == arr[k],", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_261", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn element_wise_division(arr1: &Vec<u32>, arr2: &Vec<u32>) -> (result: Vec<u32>)\n\n    requires\n        arr1.len() == arr2.len(),\n        forall|i: int| 0 <= i < arr2.len() ==> arr2[i] != 0,\n        forall|m: int|\n            0 <= m < arr1.len() ==> (u32::MIN <= #[trigger] arr1[m] / #[trigger] arr2[m]\n                <= u32::MAX),\n\n    ensures\n        result.len() == arr1.len(),\n        forall|i: int|\n            0 <= i < result.len() ==> #[trigger] result[i] == #[trigger] (arr1[i] / arr2[i]),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_262", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn split_array(list: &Vec<i32>, l: usize) -> (new_list: (Vec<i32>, Vec<i32>))\n\n    requires\n        list@.len() > 0,\n        0 < l < list@.len(),\n\n    ensures\n        new_list.0@ == list@.subrange(0, l as int),\n        new_list.1@ == list@.subrange(l as int, list.len() as int),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_273", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn element_wise_subtract(arr1: &Vec<i32>, arr2: &Vec<i32>) -> (result: Vec<i32>)\n\n    requires\n        arr1.len() == arr2.len(),\n        forall|i: int|\n            (0 <= i < arr1.len()) ==> (i32::MIN <= #[trigger] (arr1[i] - arr2[i]) <= i32::MAX),\n\n    ensures\n        result.len() == arr1.len(),\n        forall|i: int|\n            0 <= i < result.len() ==> #[trigger] result[i] == #[trigger] (arr1[i] - arr2[i]),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_282", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn element_wise_subtract(arr1: &Vec<i32>, arr2: &Vec<i32>) -> (result: Vec<i32>)\n\n    requires\n        arr1.len() == arr2.len(),\n        forall|i: int|\n            (0 <= i < arr1.len()) ==> (i32::MIN <= #[trigger] (arr1[i] - arr2[i]) <= i32::MAX),\n\n    ensures\n        result.len() == arr1.len(),\n        forall|i: int|\n            0 <= i < result.len() ==> #[trigger] result[i] == #[trigger] (arr1[i] - arr2[i]),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_284", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn all_elements_equals(arr: &Vec<i32>, element: i32) -> (result: bool)\n\n    ensures\n        result == (forall|i: int| 0 <= i < arr.len() ==> (arr[i] == element)),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_3", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn is_divisible(n: int, divisor: int) -> bool {\n    (n % divisor) == 0\n}", "vc-helpers": "", "vc-spec": "fn is_non_prime(n: u64) -> (result: bool)\n\n    requires\n        n >= 2,\n\n    ensures\n        result == (exists|k: int| 2 <= k < n && is_divisible(n as int, k)),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_307", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn list_deep_clone(arr: &Vec<u64>) -> (copied: Vec<u64>)\n\n    ensures\n        arr@.len() == copied@.len(),\n        forall|i: int| (0 <= i < arr.len()) ==> arr[i] == copied[i],", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_399", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn bit_wise_xor(arr1: &Vec<i32>, arr2: &Vec<i32>) -> (result: Vec<i32>)\n\n    requires\n        arr1.len() == arr2.len(),\n\n    ensures\n        result.len() == arr1.len(),\n        forall|i: int|\n            0 <= i < result.len() ==> result[i] == #[trigger] arr1[i] ^ #[trigger] arr2[i],", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_412", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn remove_odds(arr: &Vec<u32>) -> (even_list: Vec<u32>)\n\n    ensures\n        even_list@ == arr@.filter(|x: u32| x % 2 == 0),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_414", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn any_value_exists(arr1: &Vec<i32>, arr2: &Vec<i32>) -> (result: bool)\n\n    ensures\n        result == exists|k: int| 0 <= k < arr1.len() && arr2@.contains(#[trigger] arr1[k]),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_424", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn extract_rear_chars(s: &Vec<Vec<char>>) -> (result: Vec<char>)\n\n    requires\n        forall|i: int| 0 <= i < s.len() ==> #[trigger] s[i].len() > 0,\n\n    ensures\n        s.len() == result.len(),\n        forall|i: int| 0 <= i < s.len() ==> result[i] == #[trigger] s[i][s[i].len() - 1],", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_426", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn filter_odd_numbers(arr: &Vec<u32>) -> (odd_list: Vec<u32>)\n\n    ensures\n        odd_list@ == arr@.filter(|x: u32| x % 2 != 0),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_431", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn has_common_element(list1: &Vec<i32>, list2: &Vec<i32>) -> (result: bool)\n\n    ensures\n        result == (exists|i: int, j: int|\n            0 <= i < list1.len() && 0 <= j < list2.len() && (list1[i] == list2[j])),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_433", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn is_greater(arr: &Vec<i32>, number: i32) -> (result: bool)\n\n    ensures\n        result == (forall|i: int| 0 <= i < arr.len() ==> number > arr[i]),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_436", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn find_negative_numbers(arr: &Vec<i32>) -> (negative_list: Vec<i32>)\n\n    ensures\n        negative_list@ == arr@.filter(|x: i32| x < 0),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_445", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn element_wise_multiplication(arr1: &Vec<i32>, arr2: &Vec<i32>) -> (result: Vec<i32>)\n\n    requires\n        arr1.len() == arr2.len(),\n        forall|i: int|\n            (0 <= i < arr1.len()) ==> (i32::MIN <= #[trigger] (arr1[i] * arr2[i]) <= i32::MAX),\n\n    ensures\n        result.len() == arr1.len(),\n        forall|i: int|\n            0 <= i < result.len() ==> #[trigger] result[i] == #[trigger] (arr1[i] * arr2[i]),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_447", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn cube_element(nums: &Vec<i32>) -> (cubed: Vec<i32>)\n\n    requires\n        forall|k: int|\n            0 <= k < nums.len() ==> (i32::MIN <= #[trigger] nums[k] * #[trigger] nums[k]\n                <= i32::MAX),\n        forall|k: int|\n            0 <= k < nums.len() ==> (i32::MIN <= #[trigger] nums[k] * #[trigger] nums[k]\n                * #[trigger] nums[k] <= i32::MAX),\n\n    ensures\n        forall|i: int|\n            0 <= i < nums.len() ==> cubed[i] == #[trigger] nums[i] * #[trigger] nums[i]\n                * #[trigger] nums[i],", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_454", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn contains_z(text: &Vec<char>) -> (result: bool)\n\n    ensures\n        result == (exists|i: int| 0 <= i < text.len() && (text[i] == 'Z' || text[i] == 'z')),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_460", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn get_first_elements(arr: &Vec<Vec<i32>>) -> (result: Vec<i32>)\n\n    requires\n        forall|i: int| 0 <= i < arr.len() ==> #[trigger] arr[i].len() > 0,\n\n    ensures\n        arr.len() == result.len(),\n        forall|i: int| 0 <= i < arr.len() ==> #[trigger] result[i] == #[trigger] arr[i][0],", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_461", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn is_lower_case(c: char) -> (result: bool) {\n    (c as u32) >= 97 && (c as u32) <= 122\n}\n\nspec fn is_upper_case(c: char) -> (result: bool) {\n    (c as u32) >= 65 && (c as u32) <= 90\n}\n\nspec fn count_uppercase_recursively(seq: Seq<char>) -> (result: int)\n    decreases seq.len(),\n{\n    if seq.len() == 0 {\n        0\n    } else {\n        count_uppercase_recursively(seq.drop_last()) + if is_upper_case(seq.last()) {\n            1 as int\n        } else {\n            0 as int\n        }\n    }\n}", "vc-helpers": "", "vc-spec": "fn count_uppercase(text: &Vec<char>) -> (count: u64)\n\n    ensures\n        0 <= count <= text.len(),\n        count_uppercase_recursively(text@) == count,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_472", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn contains_consecutive_numbers(arr: &Vec<i32>) -> (is_consecutive: bool)\n\n    requires\n        arr.len() > 0,\n        forall|i: int| 0 <= i < arr.len() ==> (0 <= #[trigger] arr[i] + 1 < i32::MAX),\n\n    ensures\n        is_consecutive == (forall|i: int, j: int|\n            0 <= i < j < arr.len() && j == i + 1 ==> (arr[i] + 1 == arr[j])),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_474", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn inner_epxr_replace_chars(str1: &Vec<char>, old_char: char, new_char: char, i: int) -> (result: char) {\n    if str1[i] == old_char {\n        new_char\n    } else {\n        str1[i]\n    }\n}", "vc-helpers": "", "vc-spec": "fn replace_chars(str1: &Vec<char>, old_char: char, new_char: char) -> (result: Vec<char>)\n\n    ensures\n        str1@.len() == result@.len(),\n        forall|i: int|\n            0 <= i < str1.len() ==> result[i] == inner_epxr_replace_chars(str1, old_char, new_char, i),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_476", "vc-description": "", "vc-preamble": "#![verifier::loop_isolation(false)]\nuse vstd::math::*;\nuse vstd::prelude::*;\n\nverus! {\n\nspec fn max_rcur(seq: Seq<i32>) -> (result:int)\n    decreases seq.len(),\n{\n    if seq.len() <= 1 {\n        seq.first() as int\n    } else {\n        max(seq.last() as int, max_rcur(seq.drop_last()))\n    }\n}\n\nspec fn min_rcur(seq: Seq<i32>) -> (result:int)\n    decreases seq.len(),\n{\n    if seq.len() <= 1 {\n        seq.first() as int\n    } else {\n        min(seq.last() as int, min_rcur(seq.drop_last()))\n    }\n}", "vc-helpers": "", "vc-spec": "fn sum_min_max(arr: &Vec<i32>) -> (sum: i32)\n\n    requires\n        arr.len() > 0,\n        forall|i: int| 0 <= i < arr.len() ==> i32::MIN / 2 < #[trigger] arr[i] < i32::MAX / 2,\n\n    ensures\n        sum == max_rcur(arr@) + min_rcur(arr@),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_477", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn is_upper_case(c: char) -> (result:bool) {\n    c >= 'A' && c <= 'Z'\n}\n\nspec fn shift32_spec(c: char) -> (result:char) {\n    ((c as u8) + 32) as char\n}", "vc-helpers": "", "vc-spec": "fn to_lowercase(str1: &Vec<char>) -> (result: Vec<char>)\n\n    ensures\n        str1@.len() == result@.len(),\n        forall|i: int|\n            0 <= i < str1.len() ==> result[i] == (if is_upper_case(#[trigger] str1[i]) {\n                shift32_spec(str1[i])\n            } else {\n                str1[i]\n            }),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_554", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn find_odd_numbers(arr: &Vec<u32>) -> (odd_numbers: Vec<u32>)\n\n    ensures\n        odd_numbers@ == arr@.filter(|x: u32| x % 2 != 0),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_557", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn is_upper_case(c: char) -> (result:bool) {\n    c >= 'A' && c <= 'Z'\n}\n\nspec fn shift32_spec(c: char) -> (result:char) {\n    ((c as u8) + 32) as char\n}\n\nspec fn is_lower_case(c: char) -> (result:bool) {\n    c >= 'a' && c <= 'z'\n}\n\nspec fn shift_minus_32_spec(c: char) -> (result:char) {\n    ((c as u8) - 32) as char\n}\n\nspec fn to_toggle_case_spec(s: char) -> (result:char) {\n    if is_lower_case(s) {\n        shift_minus_32_spec(s)\n    } else if is_upper_case(s) {\n        shift32_spec(s)\n    } else {\n        s\n    }\n}", "vc-helpers": "", "vc-spec": "fn to_toggle_case(str1: &Vec<char>) -> (toggle_case: Vec<char>)\n\n    ensures\n        str1@.len() == toggle_case@.len(),\n        forall|i: int|\n            0 <= i < str1.len() ==> toggle_case[i] == to_toggle_case_spec(#[trigger] str1[i]),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_567", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn is_sorted(arr: &Vec<i32>) -> (result: bool)\n\n    requires\n        arr.len() > 0,\n\n    ensures\n        result == (forall|i: int, j: int| 0 <= i < j < arr.len() ==> (arr[i] <= arr[j])),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_572", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn count_frequency_rcr(seq: Seq<i32>, key: i32) -> (result: int)\n    decreases seq.len(),\n{\n    if seq.len() == 0 {\n        0\n    } else {\n        count_frequency_rcr(seq.drop_last(), key) + if (seq.last() == key) {\n            1 as int\n        } else {\n            0 as int\n        }\n    }\n}", "vc-helpers": "", "vc-spec": "fn remove_duplicates(arr: &Vec<i32>) -> (unique_arr: Vec<i32>)\n\n    ensures\n        unique_arr@ == arr@.filter(|x: i32| count_frequency_rcr(arr@, x) == 1),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_576", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn is_sub_array(main: &Vec<i32>, sub: &Vec<i32>) -> (result: bool)\n\n    requires\n        sub.len() <= main.len(),\n\n    ensures\n        result == (exists|k: int, l: int|\n            0 <= k <= (main.len() - sub.len()) && l == k + sub.len() && (#[trigger] (main@.subrange(\n                k,\n                l,\n            ))) =~= sub@),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_576_v2", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn is_subrange_at(main: Seq<i32>, sub: Seq<i32>, i: int) -> (result: bool) {\n    sub =~= main.subrange(i, i+sub.len())\n}", "vc-helpers": "", "vc-spec": "fn is_sub_array(main: &Vec<i32>, sub: &Vec<i32>) -> (result: bool)\n\n    ensures\n        result == (exists|k: int|\n            0 <= k <= (main.len() - sub.len()) && is_subrange_at(main@, sub@, k)),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_578", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn interleave(s1: &Vec<i32>, s2: &Vec<i32>, s3: &Vec<i32>) -> (res: Vec<i32>)\n\n    requires\n        s1@.len() == s2@.len() && s2@.len() == s3@.len(),\n        0 <= (s1@.len() * 3) <= i32::MAX,\n\n    ensures\n        res@.len() == s1@.len() * 3,\n        forall|i: int|\n            0 <= i < s1@.len() ==> (res[3 * i] == s1[i] && res[3 * i + 1] == s2[i] && res[3 * i + 2]\n                == s3[i]),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_579", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn find_dissimilar(arr1: &Vec<i32>, arr2: &Vec<i32>) -> (result: Vec<i32>)\n\n    ensures\n        forall|i: int|\n            0 <= i < arr1.len() ==> (!arr2@.contains(#[trigger] arr1[i]) ==> result@.contains(\n                arr1[i],\n            )),\n        forall|i: int|\n            0 <= i < arr2.len() ==> (!arr1@.contains(#[trigger] arr2[i]) ==> result@.contains(\n                arr2[i],\n            )),\n        forall|i: int, j: int|\n            0 <= i < j < result.len() ==> #[trigger] result[i] != #[trigger] result[j],", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_586", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn split_and_append(list: &Vec<i32>, n: usize) -> (new_list: Vec<i32>)\n\n    requires\n        list@.len() > 0,\n        0 < n < list@.len(),\n\n    ensures\n        new_list@ == list@.subrange(n as int, list@.len() as int).add(list@.subrange(0, n as int)),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_588", "vc-description": "", "vc-preamble": "#![verifier::loop_isolation(false)]\nuse vstd::math::*;\nuse vstd::prelude::*;\n\nverus! {\n\nspec fn max_rcur(seq: Seq<i32>) -> (result: int)\n    decreases seq.len(),\n{\n    if seq.len() <= 1 {\n        seq.first() as int\n    } else {\n        max(seq.last() as int, max_rcur(seq.drop_last()))\n    }\n}\n\nspec fn min_rcur(seq: Seq<i32>) -> (result: int)\n    decreases seq.len(),\n{\n    if seq.len() <= 1 {\n        seq.first() as int\n    } else {\n        min(seq.last() as int, min_rcur(seq.drop_last()))\n    }\n}", "vc-helpers": "", "vc-spec": "fn difference_max_min(arr: &Vec<i32>) -> (diff: i32)\n\n    requires\n        arr.len() > 0,\n        forall|i: int| 0 <= i < arr.len() ==> i32::MIN / 2 < #[trigger] arr[i] < i32::MAX / 2,\n\n    ensures\n        diff == max_rcur(arr@) - min_rcur(arr@),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_602", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn count_frequency_rcr(seq: Seq<char>, key: char) -> (result: int)\n    decreases seq.len(),\n{\n    if seq.len() == 0 {\n        0\n    } else {\n        count_frequency_rcr(seq.drop_last(), key) + if (seq.last() == key) {\n            1 as int\n        } else {\n            0 as int\n        }\n    }\n}\nspec fn check_first_repeated_char(str1: &Vec<char>, repeated_char: Option<(usize, char)>) -> (res: bool) {\n    if let Some((idx, rp_char)) = repeated_char {\n        &&& str1@.take(idx as int) =~= str1@.take(idx as int).filter(\n            |x: char| count_frequency_rcr(str1@, x) <= 1,\n        )\n        &&& count_frequency_rcr(str1@, rp_char) > 1\n    } else {\n        forall|k: int|\n            0 <= k < str1.len() ==> count_frequency_rcr(str1@, #[trigger] str1[k]) <= 1\n    }\n}", "vc-helpers": "", "vc-spec": "fn first_repeated_char(str1: &Vec<char>) -> (repeated_char: Option<(usize, char)>)\n\n    ensures\n        check_first_repeated_char(str1, repeated_char),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_605", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn is_divisible(n: int, divisor: int) -> (result: bool) {\n    (n % divisor) == 0\n}", "vc-helpers": "", "vc-spec": "fn prime_num(n: u64) -> (result: bool)\n\n    requires\n        n >= 2,\n\n    ensures\n        result == (forall|k: int| 2 <= k < n ==> !is_divisible(n as int, k)),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_610", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn remove_kth_element(list: &Vec<i32>, k: usize) -> (new_list: Vec<i32>)\n\n    requires\n        list.len() > 0,\n        0 < k < list@.len(),\n\n    ensures\n        new_list@ == list@.subrange(0, k - 1 as int).add(\n            list@.subrange(k as int, list.len() as int),\n        ),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_616", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn element_wise_module(arr1: &Vec<u32>, arr2: &Vec<u32>) -> (result: Vec<u32>)\n\n    requires\n        arr1.len() == arr2.len(),\n        forall|i: int| 0 <= i < arr2.len() ==> arr2[i] != 0,\n        forall|i: int|\n            (0 <= i < arr1.len()) ==> (i32::MIN <= #[trigger] (arr1[i] % arr2[i]) <= i32::MAX),\n\n    ensures\n        result@.len() == arr1@.len(),\n        forall|i: int|\n            0 <= i < result.len() ==> #[trigger] result[i] == #[trigger] (arr1[i] % arr2[i]),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_618", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn element_wise_divide(arr1: &Vec<u32>, arr2: &Vec<u32>) -> (result: Vec<u32>)\n\n    requires\n        arr1.len() == arr2.len(),\n        forall|i: int| 0 <= i < arr2.len() ==> arr2[i] != 0,\n        forall|i: int|\n            (0 <= i < arr1.len()) ==> (i32::MIN <= #[trigger] (arr1[i] / arr2[i]) <= i32::MAX),\n\n    ensures\n        result@.len() == arr1@.len(),\n        forall|i: int|\n            0 <= i < result.len() ==> #[trigger] result[i] == #[trigger] (arr1[i] / arr2[i]),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_62", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn smallest_num(nums: &Vec<i32>) -> (min: i32)\n\n    requires\n        nums.len() > 0,\n\n    ensures\n        forall|i: int| 0 <= i < nums.len() ==> min <= nums[i],\n        exists|i: int| 0 <= i < nums.len() && min == nums[i],", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_624", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn is_lower_case(c: char) -> (result: bool) {\n    c >= 'a' && c <= 'z'\n}\n\nspec fn shift_minus_32_spec(c: char) -> (result: char) {\n    ((c as u8) - 32) as char\n}\n\nspec fn inner_expr_to_uppercase(str1: &Vec<char>, i: int) -> (result:char) {\n    if is_lower_case(#[trigger] str1[i]) {\n        shift_minus_32_spec(str1[i])\n    } else {\n        str1[i]\n    }\n}", "vc-helpers": "", "vc-spec": "fn to_uppercase(str1: &Vec<char>) -> (result: Vec<char>)\n\n    ensures\n        str1@.len() == result@.len(),\n        forall|i: int|\n            0 <= i < str1.len() ==> (result[i] == (inner_expr_to_uppercase(str1, i))),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_629", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn find_even_numbers(arr: &Vec<u32>) -> (even_numbers: Vec<u32>)\n\n    ensures\n        even_numbers@ == arr@.filter(|x: u32| x % 2 == 0),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_644", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn reverse_to_k(list: &Vec<i32>, n: usize) -> (reversed_list: Vec<i32>)\n\n    requires\n        list@.len() > 0,\n        0 < n < list@.len(),\n\n    ensures\n        reversed_list@ == list@.subrange(0, n as int).reverse().add(\n            list@.subrange(n as int, list.len() as int),\n        ),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_69", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn is_sub_list(main: &Vec<i32>, sub: &Vec<i32>) -> (result: bool)\n\n    requires\n        sub.len() <= main.len(),\n\n    ensures\n        result == (exists|k: int, l: int|\n            0 <= k <= (main.len() - sub.len()) && l == k + sub.len() && (#[trigger] (main@.subrange(\n                k,\n                l,\n            ))) =~= sub@),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_70", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn all_sequence_equal_length(seq: &Vec<Vec<i32>>) -> (result: bool)\n\n    requires\n        seq.len() > 0,\n\n    ensures\n        result == (forall|i: int, j: int|\n            (0 <= i < seq.len() && 0 <= j < seq.len()) ==> (#[trigger] seq[i].len()\n                == #[trigger] seq[j].len())),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_728", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn add_list(arr1: &Vec<i32>, arr2: &Vec<i32>) -> (result: Vec<i32>)\n\n    requires\n        arr1.len() == arr2.len(),\n        forall|i: int|\n            (0 <= i < arr1.len()) ==> (i32::MIN <= #[trigger] (arr1[i] + arr2[i]) <= i32::MAX),\n\n    ensures\n        result.len() == arr1.len(),\n        forall|i: int|\n            0 <= i < result.len() ==> #[trigger] result[i] == #[trigger] (arr1[i] + arr2[i]),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_732", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn is_space_comma_dot_spec(c: char) -> (result: bool) {\n    (c == ' ') || (c == ',') || (c == '.')\n}\n\nspec fn inner_expr_replace_with_colon(str1: &Vec<char>, k: int) -> (result: char) {\n    if is_space_comma_dot_spec(str1[k]) {\n        ':'\n    } else {\n        str1[k]\n    }\n}", "vc-helpers": "", "vc-spec": "fn replace_with_colon(str1: &Vec<char>) -> (result: Vec<char>)\n\n    ensures\n        str1@.len() == result@.len(),\n        forall|k: int|\n            0 <= k < result.len() ==> #[trigger] result[k] == inner_expr_replace_with_colon(str1, k),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_733", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn find_first_occurrence(arr: &Vec<i32>, target: i32) -> (index: Option<usize>)\n\n    requires\n        forall|i: int, j: int| 0 <= i < j < arr.len() ==> arr[i] <= arr[j],\n\n    ensures\n        if let Some(idx) = index {\n            &&& 0 <= idx < arr.len()\n            &&& forall|k: int| 0 <= k < idx ==> arr[k] != target\n            &&& arr[idx as int] == target\n        } else {\n            forall|k: int| 0 <= k < arr.len() ==> arr[k] != target\n        },", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_741", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn all_characters_same(char_arr: &Vec<char>) -> (result: bool)\n\n    ensures\n        result == (forall|i: int|\n            1 <= i < char_arr@.len() ==> char_arr[0] == #[trigger] char_arr[i]),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_743", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn rotation_split(len: usize, n: usize) -> (result: int) {\n    len - (n % len)\n}", "vc-helpers": "", "vc-spec": "fn rotate_right(list: &Vec<u32>, n: usize) -> (new_list: Vec<u32>)\n\n    requires\n        list.len() > 0,\n\n    ensures\n        new_list.len() == list.len(),\n        new_list@ == list@.subrange(rotation_split(list.len(), n) as int, list@.len() as int).add(\n            list@.subrange(0, rotation_split(list.len(), n) as int),\n        ),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_755", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn min_spec(seq: Seq<i32>) -> (result: int)\n    recommends\n        0 < seq.len(),\n    decreases seq.len(),\n{\n    if seq.len() == 1 {\n        seq[0] as int\n    } else if seq.len() == 0 {\n        0\n    } else {\n        let later_min = min_spec(seq.drop_first());\n        if seq[0] <= later_min {\n            seq[0] as int\n        } else {\n            later_min as int\n        }\n    }\n}", "vc-helpers": "", "vc-spec": "fn second_smallest(numbers: &Vec<i32>) -> (indices: (usize, usize))\n\n    requires\n        numbers.len() >= 2,\n\n    ensures\n        forall|k: int|\n            0 <= k < numbers.len() && k != indices.0 && numbers[indices.0 as int] == min_spec(\n                numbers@,\n            ) ==> (#[trigger] numbers[k] >= numbers[indices.1 as int]),\n        exists|k: int|\n            0 <= k < numbers.len() && k != indices.0 && (#[trigger] numbers[k]\n                == numbers[indices.1 as int]),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_760", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn has_only_one_distinct_element(arr: &Vec<i32>) -> (result: bool)\n\n    ensures\n        result == (forall|i: int| 1 <= i < arr@.len() ==> arr[0] == #[trigger] arr[i]),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_764", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn is_digit(c: char) -> (result: bool) {\n    (c as u8) >= 48 && (c as u8) <= 57\n}\n\nspec fn count_digits_recursively(seq: Seq<char>) -> (result: int)\n    decreases seq.len(),\n{\n    if seq.len() == 0 {\n        0\n    } else {\n        count_digits_recursively(seq.drop_last()) + if is_digit(seq.last()) {\n            1 as int\n        } else {\n            0 as int\n        }\n    }\n}", "vc-helpers": "", "vc-spec": "fn count_digits(text: &Vec<char>) -> (count: usize)\n\n    ensures\n        0 <= count <= text.len(),\n        count_digits_recursively(text@) == count,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_769", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn difference(arr1: &Vec<i32>, arr2: &Vec<i32>) -> (result: Vec<i32>)\n\n    ensures\n        forall|i: int|\n            0 <= i < arr1.len() ==> (!arr2@.contains(#[trigger] arr1[i]) ==> result@.contains(\n                arr1[i],\n            )),\n        forall|i: int|\n            0 <= i < arr2.len() ==> (!arr1@.contains(#[trigger] arr2[i]) ==> result@.contains(\n                arr2[i],\n            )),\n        forall|i: int, j: int|\n            0 <= i < j < result.len() ==> #[trigger] result[i] != #[trigger] result[j],", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_775", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn is_odd_at_odd_index(arr: &Vec<usize>) -> (result: bool)\n\n    ensures\n        result == forall|i: int| 0 <= i < arr.len() ==> ((i % 2) == (arr[i] % 2)),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_790", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn is_even_at_even_index(arr: &Vec<usize>) -> (result: bool)\n\n    ensures\n        result == forall|i: int| 0 <= i < arr.len() ==> ((i % 2) == (arr[i] % 2)),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_798", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn sum_to(arr: Seq<i64>) -> (result: int)\n    decreases arr.len(),\n{\n    if arr.len() == 0 {\n        0\n    } else {\n        sum_to(arr.drop_last()) + arr.last()\n    }\n}", "vc-helpers": "", "vc-spec": "fn sum(arr: &Vec<i64>) -> (result: i128)\n\n    ensures\n        sum_to(arr@) == result", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_8", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn square_nums(nums: &Vec<i32>) -> (squared: Vec<i32>)\n\n    requires\n        forall|k: int|\n            0 <= k < nums.len() ==> (0 <= #[trigger] nums[k] * #[trigger] nums[k] < i32::MAX),\n\n    ensures\n        nums.len() == squared.len(),\n        forall|k: int| 0 <= k < nums.len() ==> (#[trigger] squared[k] == nums[k] * nums[k]),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_804", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn is_even(n: u32) -> (result: bool) {\n    (n % 2) == 0\n}", "vc-helpers": "", "vc-spec": "fn is_product_even(arr: &Vec<u32>) -> (result: bool)\n\n    ensures\n        result <==> (exists|k: int| 0 <= k < arr.len() && is_even(#[trigger] arr[k])),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_807", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn check_find_first_odd(arr: &Vec<u32>, index: Option<usize>) -> (result: bool)\n{\n    if let Some(idx) = index {\n        &&& arr@.take(idx as int) == arr@.take(idx as int).filter(|x: u32| x % 2 == 0)\n        &&& arr[idx as int] % 2 != 0\n    } else {\n        forall|k: int| 0 <= k < arr.len() ==> (arr[k] % 2 == 0)\n    }\n}", "vc-helpers": "", "vc-spec": "fn find_first_odd(arr: &Vec<u32>) -> (index: Option<usize>)\n\n    ensures check_find_first_odd(arr, index),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_808", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn contains_k(arr: &Vec<i32>, k: i32) -> (result: bool)\n\n    ensures\n        result == (exists|i: int| 0 <= i < arr.len() && (arr[i] == k)),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_809", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn is_smaller(arr1: &Vec<i32>, arr2: &Vec<i32>) -> (result: bool)\n\n    requires\n        arr1.len() == arr2.len(),\n\n    ensures\n        result == (forall|i: int| 0 <= i < arr1.len() ==> arr1[i] > arr2[i]),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_94", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn min_second_value_first(arr: &Vec<Vec<i32>>) -> (first_of_min_second: i32)\n\n    requires\n        arr.len() > 0,\n        forall|i: int| 0 <= i < arr.len() ==> #[trigger] arr[i].len() >= 2,\n\n    ensures\n        exists|i: int|\n            0 <= i < arr.len() && first_of_min_second == #[trigger] arr[i][0] && (forall|j: int|\n                0 <= j < arr.len() ==> (arr[i][1] <= #[trigger] arr[j][1])),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_95", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn smallest_list_length(list: &Vec<Vec<i32>>) -> (min: usize)\n\n    requires\n        list.len() > 0,\n\n    ensures\n        min >= 0,\n        forall|i: int| 0 <= i < list.len() ==> min <= #[trigger] list[i].len(),\n        exists|i: int| 0 <= i < list.len() && min == #[trigger] list[i].len(),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_trigger", "vc-description": "", "vc-preamble": "#[allow(unused_imports)]\nuse vstd::prelude::*;\n\nverus!{\n\nspec fn f(seq: Seq<u64>, i: int) -> (result: bool) {\n    seq[i] == i + 2\n}", "vc-helpers": "", "vc-spec": "fn get_element_check_property(arr: Vec<u64>, i: usize) -> (ret: u64)\n\n    requires\n        arr.len() > 0,\n        0 < i < arr@.len(),\n        forall |i: int| f(arr@, i),\n\n    ensures\n        ret == i + 2,\n        ret == arr@[i as int],", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_abs", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn abs(x: i32) -> (result: i32)\n    requires\n        x != i32::MIN,\n    ensures\n        result >= 0,\n        result == x || result == -x,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_arithmetic_weird", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "#[verifier::loop_isolation(false)]\nfn arithmetic_weird() -> (result: i32)\n    ensures\n        result < 10", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_array_append", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "#[verifier::loop_isolation(false)]\nfn array_append(a: Vec<i32>, b: i32) -> (result: Vec<i32>)\n    ensures\n        result.len() == a.len() + 1,\n        forall|i: int| #![auto] 0 <= i && i < result.len() ==> result[i] == (if i < a.len() { a[i] } else { b }),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_array_concat", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "#[verifier::loop_isolation(false)]\nfn array_concat(a: Vec<i32>, b: Vec<i32>) -> (result: Vec<i32>)\n    ensures\n        result.len() == a.len() + b.len(),\n        forall|i: int| 0 <= i && i < a.len() ==> result[i] == a[i],\n        forall|i: int| 0 <= i && i < b.len() ==> result[i + a.len()] == b[i],", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_array_copy", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "#[verifier::loop_isolation(false)]\nfn array_copy(a: Vec<i32>) -> (result: Vec<i32>)\n    ensures\n        result.len() == a.len(),\n        forall|i: int| 0 <= i && i < a.len() ==> result[i] == a[i],", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_array_product", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "#[verifier::loop_isolation(false)]\nfn array_product(a: Vec<i32>, b: Vec<i32>) -> (result: Vec<i64>) by (nonlinear_arith)\n    requires\n        a.len() == b.len(),\n    ensures\n        result.len() == a.len(),\n        forall|i: int| #![auto] 0 <= i && i < a.len() ==> result[i] == (a[i] as i64) * (b[i] as i64),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_barrier", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "#[verifier::loop_isolation(false)]\nfn barrier(arr: &[i32], p: usize) -> (result: bool)\n    requires\n        arr.len() > 0,\n        0 <= p < arr.len(),\n    ensures\n        result == forall|k: int, l: int| 0 <= k <= p && p < l < arr.len() ==> arr[k] < arr[l],", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_binary_search", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "#[verifier::loop_isolation(false)]\nfn binary_search(arr: &[i32], target: i32) -> (result: Option<usize>)\n    requires\n        forall|i: int, j: int| 0 <= i && i < j && j < arr.len() ==> arr[i] <= arr[j],\n    ensures\n        match result {\n            Some(index) => arr[index as int] == target && arr.len() > 0 && index < arr.len(),\n            None => forall|i: int| 0 <= i && i < arr.len() ==> arr[i] != target,\n        },", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_binary_search_recursive", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn binary_search_recursive(v: &[i32], elem: i32, c: isize, f: isize) -> (p: isize)\n    requires\n        v.len() <= 100_000,\n        forall|i: int, j: int| 0 <= i < j < v.len() ==> v[i] <= v[j],\n        0 <= c <= f + 1 <= v.len(),\n        forall|k: int| 0 <= k < c ==> v[k] <= elem,\n        forall|k: int| f < k < v.len() ==> v[k] > elem,\n    ensures\n        -1 <= p < v.len(),\n        forall|u: int| 0 <= u <= p ==> v[u] <= elem,\n        forall|w: int| p < w < v.len() ==> v[w] > elem,\n    decreases f - c + 1", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_cubes", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "#[verifier::loop_isolation(false)]\nfn cubes(len: usize) -> (result: Vec<i32>) by (nonlinear_arith)\n    ensures\n        result.len() == len,\n        forall|i: int| 0 <= i && i < len ==> result[i] == i * i * i", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_has_close_elements", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn abs_spec(i: int) -> int {\n    if i < 0 { -i } else { i }\n}", "vc-helpers": "", "vc-spec": "#[verifier::loop_isolation(false)]\nfn has_close_elements(numbers: &[i32], threshold: i32) -> (flag: bool)\n    requires\n        threshold > 0,\n        forall|i: int, j: int| 0 <= i && i < numbers.len() && 0 <= j && j < numbers.len() ==> numbers[i] - numbers[j] < i32::MAX && -(numbers[i] - numbers[j]) < i32::MAX\n    ensures\n        flag == exists|i: int, j: int| 0 <= i && 0 <= j && i < numbers.len() && j < numbers.len() && i != j && abs_spec(numbers[i] - numbers[j]) < threshold", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_has_only_one_distinct_element", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "#[verifier::loop_isolation(false)]\nfn has_only_one_distinct_element(a: &[i32]) -> (result: bool)\n    ensures\n        result ==> forall|i: int, j: int| 0 <= i < a.len() && 0 <= j < a.len() ==> a[i] == a[j],\n        !result ==> exists|i: int, j: int| 0 <= i < a.len() && 0 <= j < a.len() && a[i] != a[j],", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_index_wise_addition", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "#[verifier::loop_isolation(false)]\nfn index_wise_addition(a: &Vec<Vec<i32>>, b: &Vec<Vec<i32>>) -> (c: Vec<Vec<i32>>)\n    requires\n        a.len() == b.len(),\n        forall|i: int| #![auto] 0 <= i < a.len() ==> a[i].len() == b[i].len(),\n        forall|i: int| #![trigger a[i], b[i]] \n            0 <= i < a.len() \n                ==> forall|j: int| 0 <= j < a[i].len() ==> a[i][j] + b[i][j] <= i32::MAX,\n        forall|i: int| #![trigger a[i], b[i]] \n            0 <= i < a.len() \n                ==> forall|j: int| 0 <= j < a[i].len() ==> a[i][j] + b[i][j] >= i32::MIN,\n    ensures\n        c.len() == a.len(),\n        forall|i: int| #![auto] 0 <= i < c.len() ==> c[i].len() == a[i].len(),\n        forall|i: int| #![trigger a[i], b[i], c[i]] \n            0 <= i < c.len() \n                ==> forall|j: int| #![auto] 0 <= j < c[i].len() ==> c[i][j] == a[i][j] + b[i][j],", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_integer_square_root", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn integer_square_root(n: i32) -> (result: i32)\n    requires\n        n >= 1,\n    ensures\n        0 <= result * result,\n        result * result <= n,\n        n < (result + 1) * (result + 1)", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_intersperse", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn intersperse(numbers: &[i32], delim: i32) -> (res: Vec<i32>)\n    ensures\n        numbers.len() == 0 ==> res.len() == 0,\n        numbers.len() != 0 ==> res.len() == 2 * numbers.len() - 1,\n        forall|i: int| 0 <= i && i < res.len() && i % 2 == 0 ==> res[i] == numbers[i / 2],\n        forall|i: int| 0 <= i && i < res.len() && i % 2 == 1 ==> res[i] == delim", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_is_non_prime", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "#[verifier::loop_isolation(false)]\nfn is_non_prime(n: u32) -> (result: bool)\n    requires\n        n >= 2,\n    ensures\n        result == exists|k: int| 2 <= k < n && #[trigger] (n as int % k) == 0,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_is_sorted", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "#[verifier::loop_isolation(false)]\nfn is_sorted(lst: &[i32]) -> (result: bool)\n    requires\n        lst.len() >= 1,\n    ensures\n        result <== forall|i: int, j: int| 0 <= i && i < j && j < lst.len() ==> lst[i] <= lst[j],\n        !result ==> exists|i: int, j: int| 0 <= i && i < j && j < lst.len() && lst[i] > lst[j],", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_largest_prime_factor", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn is_prime_pred(n: u32) -> bool {\n    forall|k: int| 2 <= k < n ==> #[trigger] (n as int % k) != 0\n}", "vc-helpers": "", "vc-spec": "#[verifier::loop_isolation(false)]\nfn largest_prime_factor(n: u32) -> (result: u32)\n    requires\n        2 <= n <= u32::MAX - 1,\n    ensures\n        1 <= result <= n,\n        result == 1 || (result > 1 && is_prime_pred(result))", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_last_position", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "#[verifier::loop_isolation(false)]\nfn last_position(a: &[i32], elem: i32) -> (result: usize)\n    requires\n        0 < a.len() < 100_000,\n        exists|i: int| 0 <= i < a.len() && a[i] == elem,\n    ensures\n        0 <= result < a.len(),\n        forall|i: int| result < i < a.len() ==> a[i] != elem,\n        a[result as int] == elem,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_max_array", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn max_array(nums: &[i32]) -> (idx: usize)\n    requires\n        nums.len() >= 1,\n    ensures\n        0 <= idx && idx < nums.len(),\n        forall|i: int| 0 <= i && i < nums.len() ==> nums[i] <= nums[idx as int],", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_max_dafny_lsp", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "#[verifier::loop_isolation(false)]\nfn max_dafny_lsp(a: &[i32]) -> (x: usize)\n    requires\n        a.len() > 0,\n    ensures\n        0 <= x < a.len(),\n        forall|k: int| 0 <= k < a.len() ==> a[k] <= a[x as int],", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_remove_duplicates", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn in_array(a: Seq<i32>, x: i32) -> bool {\n    exists|i: int| 0 <= i < a.len() && a[i] == x\n}", "vc-helpers": "", "vc-spec": "#[verifier::loop_isolation(false)]\nfn remove_duplicates(a: &[i32]) -> (result: Vec<i32>)\n    requires\n        a.len() >= 1,\n    ensures\n        forall|i: int| #![auto] 0 <= i < result.len() ==> in_array(a@, result[i]),\n        forall|i: int, j: int| 0 <= i < j < result.len() ==> result[i] != result[j],", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_remove_element", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "#[verifier::loop_isolation(false)]\nfn remove_element(a: &[i32], pos: usize) -> (result: Vec<i32>)\n    requires\n        0 <= pos < a.len(),\n    ensures\n        result.len() == a.len() - 1,\n        forall|i: int| 0 <= i < pos ==> result[i] == a[i],\n        forall|i: int| pos <= i < result.len() ==> result[i] == a[i + 1],", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_remove_elements", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn in_array(a: Seq<i32>, x: i32) -> bool {\n    exists|i: int| 0 <= i < a.len() && a[i] == x\n}", "vc-helpers": "", "vc-spec": "#[verifier::loop_isolation(false)]\nfn remove_elements(a: &Vec<i32>, b: &Vec<i32>) -> (c: Vec<i32>)\n    ensures\n        forall|k: int| #![auto] 0 <= k < c.len() ==> in_array(a@, c[k]) && !in_array(b@, c[k]),\n        forall|i: int, j: int| 0 <= i < j < c.len() ==> c[i] != c[j],", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_replace", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "#[verifier::loop_isolation(false)]\nfn replace(a: &mut Vec<i32>, x: i32, y: i32)\n    ensures\n        a.len() == old(a).len(),\n        forall|k: int| 0 <= k < old(a).len() && old(a)[k] == x ==> a[k] == y,\n        forall|k: int| 0 <= k < old(a).len() && old(a)[k] != x ==> a[k] == old(a)[k],", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_replace_chars", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn replace_chars(s: &[char], old: char, new: char) -> (result: Vec<char>)\n    ensures\n        result.len() == s.len(),\n        forall|i: int| 0 <= i && i < result.len() ==> result[i] == (if s[i] == old { new } else { s[i] }),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_reverse", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "fn reverse(a: &[i32]) -> (result: Vec<i32>)\n    ensures\n        result.len() == a.len(),\n        forall|i: int| 0 <= i && i < result.len() ==> result[i] == a[a.len() - 1 - i],", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_rolling_max", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {\n\nspec fn seq_max(a: Seq<i32>) -> i32\n    decreases a.len(),\n{\n    if a.len() == 0 {\n        i32::MIN\n    } else if a.last() > seq_max(a.drop_last()) {\n        a.last()\n    } else {\n        seq_max(a.drop_last())\n    }\n}", "vc-helpers": "", "vc-spec": "fn rolling_max(numbers: Vec<i32>) -> (result: Vec<i32>)\n    ensures\n        result.len() == numbers.len(),\n        forall|i: int| 0 <= i < numbers.len() ==> result[i] == seq_max(numbers@.take(i + 1)),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_smallest_list_length", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "#[verifier::loop_isolation(false)]\nfn smallest_list_length(lists: Vec<Vec<i32>>) -> (result: usize)\n    requires\n        lists.len() > 0,\n    ensures\n        exists|i: int| #![auto] 0 <= i < lists.len() && result == lists[i].len(),\n        forall|i: int| #![auto] 0 <= i < lists.len() ==> result <= lists[i].len(),", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_smallest_missing_number", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "#[verifier::loop_isolation(false)]\nfn smallest_missing_number(s: &[i32]) -> (v: i32)\n    requires\n        forall|i: int, j: int| 0 <= i < j < s.len() ==> s[i] <= s[j],\n        forall|i: int| 0 <= i < s.len() ==> s[i] >= 0,\n        s.len() <= 100_000,\n    ensures\n        0 <= v,\n        forall|i: int| 0 <= i < s.len() ==> s[i] != v,\n        forall|k: int| 0 <= k < v && s[k] != v ==> exists|j: int| 0 <= j < s.len() && s[j] == k,", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_string_xor", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "#[verifier::loop_isolation(false)]\nfn string_xor(a: &[char], b: &[char]) -> (result: Vec<char>)\n    requires\n        a.len() == b.len(),\n        forall|i: int| 0 <= i && i < a.len() ==> a[i] == '0' || a[i] == '1',\n        forall|i: int| 0 <= i && i < b.len() ==> b[i] == '0' || b[i] == '1',\n    ensures\n        result.len() == a.len(),\n        forall|i: int| 0 <= i && i < result.len() ==> (result[i] == '0' || result[i] == '1'),\n        forall|i: int| 0 <= i && i < result.len() ==> result[i] == (if a[i] == b[i] { '0' } else { '1' })", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_two_sum", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "#[verifier::loop_isolation(false)]\nfn two_sum(nums: &[i32], target: i32) -> (result: (usize, usize))\n    requires\n        nums.len() >= 2,\n        exists|i: int, j: int| 0 <= i < j < nums.len() && nums[i] + nums[j] == target,\n        forall|i: int, j: int|\n            0 <= i < nums.len() && 0 <= j < nums.len()\n                ==> nums[i] + nums[j] <= i32::MAX\n                    && nums[i] + nums[j] >= i32::MIN,\n    ensures\n        ({ let (i, j) = result; 0 <= i < nums.len() }),\n        ({ let (i, j) = result; 0 <= j < nums.len() }),\n        ({ let (i, j) = result; i != j }),\n        ({ let (i, j) = result; nums[i as int] + nums[j as int] == target })", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_two_way_sort", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "#[verifier::loop_isolation(false)]\nfn two_way_sort(a: &mut Vec<bool>)\n    requires\n        old(a).len() <= 100_000,\n    ensures\n        a.len() == old(a).len(),\n        a@.to_multiset() == old(a)@.to_multiset(),\n        forall|i: int, j: int| 0 <= i < j < a.len() ==> !a[i] || a[j],", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_unique", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "#[verifier::loop_isolation(false)]\nfn unique(a: &[i32]) -> (result: Vec<i32>)\n    requires\n        forall|i: int, j: int|\n            #![trigger a[i], a[j]]\n            0 <= i && i < j && j < a.len() ==> a[i] <= a[j],\n    ensures\n        forall|i: int, j: int|\n            #![trigger result[i], result[j]]\n            0 <= i && i < j && j < result.len() ==> result[i] < result[j],", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_unique_better", "vc-description": "", "vc-preamble": "use vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "#[verifier::loop_isolation(false)]\nfn unique_better(a: &[i32]) -> (result: Vec<i32>)\n    requires\n        forall|i: int, j: int|\n            #![trigger a[i], a[j]]\n            0 <= i && i < j && j < a.len() ==> a[i] <= a[j],\n    ensures\n        forall|i: int, j: int|\n            #![trigger result[i], result[j]]\n            0 <= i && i < j && j < result.len() ==> result[i] < result[j],", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_wip_max_segment_sum", "vc-description": "", "vc-preamble": "#![crate_name = \"max_segment_sum\"]\n\nuse vstd::prelude::*;\n\nverus! {\n\nspec fn sum(a: Seq<i32>, s: int, t: int) -> int\n    decreases t - s,\n{\n    if s < 0 || s >= t || t > a.len() {\n        0\n    } else {\n        a[t - 1] + sum(a, s, t - 1)\n    }\n}", "vc-helpers": "", "vc-spec": "#[verifier::loop_isolation(false)]\nfn max_segment_sum(a: &Vec<i32>, s: usize, t: usize) -> (p: (usize, usize)) by (nonlinear_arith)\n    ensures\n        ({ let (i, j) = p; 0 <= i <= j <= a.len() }),\n        ({ let (i, j) = p; forall|k: int, l: int| 0 <= k <= l <= a.len() ==> sum(a@, k, l) <= sum(a@, i as int, j as int) })", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_wip_mcontained", "vc-description": "", "vc-preamble": "#![crate_name = \"mcontained\"]\n\nuse vstd::prelude::*;\n\nverus! {\n\nspec fn strict_sorted(arr: &[i32]) -> bool {\n    forall|k: int, l: int| 0 <= k < l < arr.len() ==> arr[k] < arr[l]\n}", "vc-helpers": "", "vc-spec": "#[verifier::loop_isolation(false)]\nfn mcontained(v: &[i32], w: &[i32], n: usize, m: usize) -> (b: bool)\n    requires\n        n <= m && n>= 0,\n        strict_sorted(v),\n        strict_sorted(w),\n        v.len() >= n && w.len() >= m\n    ensures\n        b ==> (forall|k: int| #![trigger v[k]]\n            0 <= k < n ==> (\n                exists|j: int| #![trigger w[j]]\n                0 <= j < m && v[k] == w[j]\n            ))", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_wip_transpose_matrix", "vc-description": "", "vc-preamble": "#![crate_name = \"transpose_matrix\"]\n\nuse vstd::prelude::*;\n\nverus! {", "vc-helpers": "", "vc-spec": "#[verifier::loop_isolation(false)]\nfn transpose(matrix: Vec<Vec<i32>>) -> (result: Vec<Vec<i32>>)\n    requires\n        matrix.len() > 0,\n        forall|i: int| #![trigger matrix[i]]\n            0 <= i < matrix.len() ==> matrix[i].len() == matrix[0].len(),\n        forall|i: int| #![trigger matrix[i]]\n            0 <= i < matrix.len() ==> matrix[i].len() == matrix.len()\n    ensures\n        result.len() == matrix[0].len(),\n        forall|i: int| #![trigger result[i]]\n            0 <= i < result.len() ==> result[i].len() == matrix.len(),\n        forall|i: int, j: int| #![trigger result[i], matrix[j]]\n            0 <= i < result.len() && 0 <= j < result[i].len() ==> result[i][j] == matrix[j][i]", "vc-code": "{\n    assume(false);\n    unreached()\n}", "vc-postamble": "}\nfn main() {}", "qa_metadata": {"specs_with_default_values": [], "execs_with_bodies": [], "execs_with_ghost_types": [], "score": 86.0, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
