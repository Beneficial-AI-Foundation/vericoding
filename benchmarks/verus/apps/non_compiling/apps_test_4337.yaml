vc-description: |-
  Given N colorful crackers with colors P, W, G, or Y, determine if exactly 3 or 4 distinct colors are present.
  The bag always contains at least one cracker of each color P, W, and G.
  Output "Three" if 3 distinct colors, "Four" if 4 distinct colors.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(n: int, colors: Seq<char>) -> bool {
      1 <= n <= 100 &&
      colors.len() == n &&
      (forall|c: char| colors.contains(c) ==> (c == 'P' || c == 'W' || c == 'G' || c == 'Y')) &&
      colors.contains('P') && colors.contains('W') && colors.contains('G')
  }
  
  spec fn distinct_colors(colors: Seq<char>) -> Set<char> {
      colors.to_set()
  }
  
  spec fn solution_string(distinct_count: int) -> &'static str
      recommends distinct_count == 3 || distinct_count == 4
  {
      if distinct_count == 3 { "Three" } else { "Four" }
  }

vc-helpers: |-

vc-spec: |-
  fn solve(n: int, colors: Seq<char>) -> (result: &'static str)
      requires valid_input(n, colors),
      ensures distinct_colors(colors).len() == 3 || distinct_colors(colors).len() == 4,
      ensures (distinct_colors(colors).len() == 3 ==> result == "Three") && (distinct_colors(colors).len() == 4 ==> result == "Four"),
      ensures result == "Three" || result == "Four",

vc-code: |-
  {
      assume(false);
      "Three"
  }

vc-postamble: |-

  }

  fn main() {}