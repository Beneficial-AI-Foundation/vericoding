vc-description: |-
  Given a string representing a lever with weights and a pivot, determine if the lever
  tilts left, right, or remains balanced based on torque calculations.
  The pivot is marked by '^', weights are digits 1-9, and empty positions are '='.
  Torque = weight Ã— distance from pivot. Left weights contribute positive torque,
  right weights contribute negative torque.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_lever_input(s: Seq<char>) -> bool {
      s.len() >= 3 &&
      (exists|i: int| 0 <= i < s.len() && s[i] == '^') &&
      (forall|i: int| 0 <= i < s.len() ==> (s[i] == '^' || s[i] == '=' || ('1' <= s[i] <= '9'))) &&
      (forall|i: int, j: int| 0 <= i < j < s.len() && s[i] == '^' ==> s[j] != '^') &&
      (forall|i: int| 0 <= i < s.len() && s[i] == '^' ==> (i != 0 && i != s.len() - 1))
  }
  
  spec fn find_pivot(s: Seq<char>) -> int {
      find_pivot_helper(s, 0)
  }
  
  spec fn find_pivot_helper(s: Seq<char>, index: int) -> int
      decreases s.len() - index
  {
      if index >= s.len() {
          0
      } else if s[index] == '^' {
          index
      } else {
          find_pivot_helper(s, index + 1)
      }
  }
  
  spec fn calculate_torque(s: Seq<char>, pivot_pos: int) -> int {
      calculate_torque_helper(s, pivot_pos, 0)
  }
  
  spec fn calculate_torque_helper(s: Seq<char>, pivot_pos: int, index: int) -> int
      decreases s.len() - index
  {
      if index >= s.len() {
          0
      } else if '1' <= s[index] <= '9' {
          let weight = (s[index] as int) - ('0' as int);
          (pivot_pos - index) * weight + calculate_torque_helper(s, pivot_pos, index + 1)
      } else {
          calculate_torque_helper(s, pivot_pos, index + 1)
      }
  }
  
  spec fn calculate_torque_partial(s: Seq<char>, pivot_pos: int, up_to: int) -> int {
      calculate_torque_helper(s, pivot_pos, 0) - calculate_torque_helper(s, pivot_pos, up_to)
  }

vc-helpers: |-

vc-spec: |-
  fn solve(s: Seq<char>) -> (result: Seq<char>)
      requires valid_lever_input(s)
      ensures result == seq!['l','e','f','t'] || result == seq!['r','i','g','h','t'] || result == seq!['b','a','l','a','n','c','e']
      ensures (forall |x: Seq<char>| x == result ==> {
          let pivot_pos = find_pivot(s);
          let torque = calculate_torque(s, pivot_pos);
          (torque > 0 ==> x == seq!['l','e','f','t']) &&
          (torque < 0 ==> x == seq!['r','i','g','h','t']) &&
          (torque == 0 ==> x == seq!['b','a','l','a','n','c','e'])
      })

vc-code: |-
  {
      // impl-start
      assume(false);
      seq!['b','a','l','a','n','c','e']
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {}