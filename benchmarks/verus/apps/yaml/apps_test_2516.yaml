vc-description: |-
  Given a string S of length N containing only digits 0-9 and a prime number P,
  count how many contiguous substrings of S are divisible by P when interpreted
  as base-10 integers.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn is_prime(p: int) -> bool {
      p >= 2 && forall|k: int| 2 <= k < p ==> p % k != 0
  }

  spec fn valid_input(n: usize, p: usize, s: Seq<char>) -> bool {
      n >= 1 &&
      p >= 2 &&
      is_prime(p as int) &&
      s.len() == n &&
      forall|i: int| 0 <= i < s.len() ==> '0' <= s[i] <= '9'
  }

  spec fn substring_to_int(s: Seq<char>) -> int
      decreases s.len()
  {
      if s.len() == 0 { 
          0 as int
      } else if s.len() == 1 { 
          (s[0] as int) - ('0' as int) 
      } else { 
          substring_to_int(s.subrange(0, s.len() - 1)) * 10 + ((s[s.len() - 1] as int) - ('0' as int)) 
      }
  }

  spec fn valid_result(result: usize, n: usize) -> bool {
      result <= n * (n + 1) / 2
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: usize, p: usize, s: Seq<char>) -> (result: usize)
      requires valid_input(n, p, s)
      ensures valid_result(result, n)

vc-code: |-
  {
      assume(false);
      0
  }

vc-postamble: |2-

  }

  fn main() {}
