vc-description: |-
  Given n students across m schools, where each student has a unique power level,
  the Technogoblet selects the strongest student from each school. We want k specific 
  students (Chosen Ones) to be selected. We can create new schools and reassign students.
  Find the minimum number of new schools needed so all k Chosen Ones get selected.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn is_strongest_in_school(student_idx: int, powers: Seq<int>, schools: Seq<int>) -> bool
    recommends 0 <= student_idx < powers.len() && powers.len() == schools.len()
  {
    forall|j: int| 0 <= j < powers.len() && schools[j] == schools[student_idx] ==> powers[j] <= powers[student_idx]
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: int, m: int, k: int, powers: Seq<int>, schools: Seq<int>, chosen: Seq<int>) -> (result: int)
    requires 
        n >= 1 && m >= 1 && k >= 1 && k <= n && m <= n,
        powers.len() == n && schools.len() == n && chosen.len() == k
    ensures 
        result >= 0 && result <= k

vc-code: |-
  {
    assume(false);
    unreached()
  }

vc-postamble: |2-

  }

  fn main() {}
