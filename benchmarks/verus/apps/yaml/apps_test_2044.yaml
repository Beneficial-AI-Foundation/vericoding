vc-description: |-
  Given a notebook with infinite pages where each page holds exactly m names,
  write names for n consecutive days. On day i, write exactly a_i names.
  Fill pages sequentially - when a page becomes full, turn to the next page.
  Determine how many times you turn pages on each day.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_input(n: int, m: int, a: Seq<int>) -> bool {
      n >= 1 && m >= 1 && a.len() == n && 
      (forall|i: int| 0 <= i < a.len() ==> a[i] >= 1)
  }
  
  spec fn valid_output(result: Seq<int>, n: int) -> bool {
      result.len() == n && (forall|i: int| 0 <= i < result.len() ==> result[i] >= 0)
  }
  
  spec fn compute_page_turns(a: Seq<int>, m: int, i: int, s: int) -> int {
      if i >= a.len() { 0 }
      else { (s + a[i]) / m }
  }
  
  spec fn compute_next_state(a: Seq<int>, m: int, i: int, s: int) -> int {
      if i >= a.len() { s }
      else { (s + a[i]) % m }
  }
  
  spec fn correct_page_turns(result: Seq<int>, a: Seq<int>, m: int) -> bool {
      result.len() == a.len() &&
      (forall|i: int| 0 <= i < a.len() ==> {
          let s = compute_state_at(a, m, i);
          result[i] == (s + a[i]) / m
      })
  }
  
  spec fn compute_state_at(a: Seq<int>, m: int, day: int) -> int
      decreases day
  {
      if day == 0 { 0 }
      else if day > a.len() { compute_state_at(a, m, a.len() as int) }
      else { (compute_state_at(a, m, day - 1) + a[day - 1]) % m }
  }

vc-helpers: |-

vc-spec: |-
  fn solve(n: int, m: int, a: Seq<int>) -> (result: Seq<int>)
      requires 
          valid_input(n, m, a),
      ensures 
          valid_output(result, n),
          correct_page_turns(result, a, m)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}