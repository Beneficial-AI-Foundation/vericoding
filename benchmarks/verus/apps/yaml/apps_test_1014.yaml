vc-description: |-
  Given an nÃ—n chessboard where white queen starts at (1,1), black queen at (1,n),
  and all other squares contain green pawns. Players alternate turns capturing pieces
  with standard queen movement. Determine the winner under optimal play.

vc-preamble: |-
  use vstd::prelude::*;
  use vstd::string::*;

  verus! {
  spec fn valid_input(n: int) -> bool {
      n >= 2
  }

  spec fn is_win_for_white(n: int) -> bool {
      n % 2 == 0
  }

  spec fn is_win_for_black(n: int) -> bool {
      n % 2 == 1
  }

  spec fn optimal_white_move(n: int) -> (int, int)
      recommends valid_input(n) && is_win_for_white(n)
  {
      (1, 2)
  }

  spec fn valid_result(n: int, result: String) -> bool
      recommends valid_input(n)
  {
      if is_win_for_black(n) {
          result@ == "black\n"@
      } else {
          result@ == "white\n1 2\n"@
      }
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: int) -> (result: String)
      requires valid_input(n)
      ensures valid_result(n, result)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}
