vc-description: |-
  Given three integers A, B, and C, determine if it's possible to select one or more 
  positive multiples of A such that their sum is congruent to C modulo B.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(a: int, b: int, c: int) -> bool {
      1 <= a <= 100 && 1 <= b <= 100 && 0 <= c < b
  }

  spec fn is_solvable(a: int, b: int, c: int) -> bool {
      exists|i: int| 1 <= i < b && #[trigger] ((i * (a % b)) % b) == c
  }

vc-helpers: |

vc-spec: |-
  fn solve(a: int, b: int, c: int) -> (result: String)
      requires 
          valid_input(a, b, c)
      ensures 
          (result@ == "YES"@) <==> is_solvable(a, b, c),
          (result@ == "NO"@) || (result@ == "YES"@)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}
