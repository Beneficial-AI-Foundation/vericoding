vc-description: |-
  Count pairs of positive integers (w, h) such that:
  - w ≤ a (width constraint)  
  - h ≤ b (height constraint)
  - w/h = x/y (aspect ratio constraint)
  The solution reduces x/y to lowest terms and finds the maximum multiplier k
  such that valid pairs have the form (k×x', k×y') where x' = x/gcd(x,y) and y' = y/gcd(x,y)

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_input(a: int, b: int, x: int, y: int) -> bool {
    a > 0 && b > 0 && x > 0 && y > 0
  }
  
  spec fn gcd(a: int, b: int) -> int
    recommends a >= 0 && b >= 0
    decreases b when b >= 0
  {
    if b == 0 { a } else { gcd(b, a % b) }
  }
  
  spec fn min(a: int, b: int) -> int {
    if a <= b { a } else { b }
  }
  
  spec fn expected_result(a: int, b: int, x: int, y: int) -> int
    recommends valid_input(a, b, x, y)
  {
    let g = gcd(x, y);
    let x_reduced = x / g;
    let y_reduced = y / g;
    min(a / x_reduced, b / y_reduced)
  }

vc-helpers: |-

vc-spec: |-
  fn solve(a: int, b: int, x: int, y: int) -> (result: int)
  requires 
    valid_input(a, b, x, y)
  ensures 
    result >= 0,
    result == expected_result(a, b, x, y)

vc-code: |-
  {
    assume(false);
    unreached()
  }

vc-postamble: |-

  }

  fn main() {}