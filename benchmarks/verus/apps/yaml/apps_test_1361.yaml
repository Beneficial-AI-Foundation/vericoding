vc-description: |-
  Given n holds at increasing heights, remove exactly one hold (not the first or last) 
  to minimize the track difficulty. The difficulty is the maximum difference between 
  consecutive hold heights.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_input(holds: Seq<int>) -> bool {
      holds.len() >= 3 && forall|i: int| 0 <= i < holds.len() - 1 ==> holds[i] < holds[i + 1]
  }
  
  spec fn max_diff(s: Seq<int>) -> int {
      if s.len() <= 1 { 0 }
      else {
          let max_so_far = if s[1] - s[0] >= 0 { s[1] - s[0] } else { 0 };
          max_diff_helper(s, 2, max_so_far)
      }
  }
  
  spec fn max_diff_helper(s: Seq<int>, index: int, current_max: int) -> int
      decreases s.len() - index
  {
      if index >= s.len() { current_max }
      else {
          let diff = s[index] - s[index - 1];
          let new_max = if diff > current_max { diff } else { current_max };
          max_diff_helper(s, index + 1, new_max)
      }
  }

vc-helpers: |-

vc-spec: |-
  fn solve(holds: Seq<int>) -> (result: int)
      requires valid_input(holds)
      ensures result >= 0

vc-code: |-
  {
      assume(false);
      0
  }

vc-postamble: |-

  }

  fn main() {}