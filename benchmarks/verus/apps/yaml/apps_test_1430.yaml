vc-description: |-
  Given a binary string S of length N and an integer K, find the maximum length of 
  consecutive '1's achievable using at most K flip operations. Each flip operation 
  chooses a contiguous range and flips all bits in that range (0→1, 1→0).

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn valid_input(n: int, k: int, s: Seq<char>) -> bool {
      n > 0 && k >= 0 && s.len() == n && 
      forall|i: int| 0 <= i < s.len() ==> (#[trigger] s[i]) == '0' || s[i] == '1'
  }
  
  spec fn string_to_bits(s: Seq<char>) -> Seq<int>
      recommends forall|i: int| 0 <= i < s.len() ==> s[i] == '0' || s[i] == '1'
  {
      Seq::new(s.len(), |i: int| if s[i] == '0' { 0 } else { 1 })
  }
  
  spec fn valid_result(result: int, n: int) -> bool {
      0 <= result <= n
  }

vc-spec: |-
  fn solve(n: int, k: int, s: Seq<char>) -> (result: int)
      requires valid_input(n, k, s)
      ensures valid_result(result, n)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}