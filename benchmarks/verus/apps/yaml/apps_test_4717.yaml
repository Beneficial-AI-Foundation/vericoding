vc-description: |-
  Given three distinct positions x, a, and b on a number line, determine whether position a or position b 
  is closer to position x. Output "A" if position a is closer, "B" if position b is closer.
  Distance between two positions s and t is |s-t|.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(x: int, a: int, b: int) -> bool {
      1 <= x <= 1000 &&
      1 <= a <= 1000 &&
      1 <= b <= 1000 &&
      x != a && x != b && a != b &&
      distance(x, a) != distance(x, b)
  }

  spec fn distance(s: int, t: int) -> nat {
      if s >= t { (s - t) as nat } else { (t - s) as nat }
  }

  spec fn correct_result(x: int, a: int, b: int, result: Seq<char>) -> bool {
      (result == seq!['A'] <==> distance(x, a) < distance(x, b)) &&
      (result == seq!['B'] <==> distance(x, b) < distance(x, a))
  }

vc-helpers: |

vc-spec: |-
  fn solve(x: int, a: int, b: int) -> (result: String)
      requires 
          valid_input(x, a, b),
      ensures 
          result@ == seq!['A'] || result@ == seq!['B'],
          correct_result(x, a, b, result@),

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}
