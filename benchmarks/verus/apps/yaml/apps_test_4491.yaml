vc-description: |-
  Given a 2Ã—N grid where each cell contains candies, find the maximum number of candies
  that can be collected when traveling from top-left to bottom-right. You can only move
  right or down, and you collect all candies from visited cells.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn valid_input(n: int, a_1: Seq<int>, a_2: Seq<int>) -> bool {
      n >= 1 &&
      a_1.len() == n && a_2.len() == n &&
      forall|i: int| 0 <= i < n ==> 1 <= a_1[i] <= 100 && 1 <= a_2[i] <= 100
  }
  
  spec fn sum_range(s: Seq<int>, start: int, end: int) -> int
      decreases end - start
  {
      if start >= end || start < 0 || end > s.len() {
          0int
      } else if start == end {
          0int
      } else {
          s[start] + sum_range(s, start + 1, end)
      }
  }
  
  spec fn is_valid_result(n: int, a_1: Seq<int>, a_2: Seq<int>, result: int) -> bool {
      valid_input(n, a_1, a_2) ==>
      (result >= n + 1 &&
      result <= (n + 1) * 100 &&
      exists|i: int| 0 <= i < n && result == sum_range(a_1, 0, i + 1) + sum_range(a_2, i, n) &&
      forall|i: int| 0 <= i < n ==> result >= sum_range(a_1, 0, i + 1) + sum_range(a_2, i, n))
  }

vc-spec: |-
  fn solve(n: int, a_1: Seq<int>, a_2: Seq<int>) -> (result: int)
      requires valid_input(n, a_1, a_2)
      ensures is_valid_result(n, a_1, a_2, result)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}