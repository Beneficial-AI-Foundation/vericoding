vc-description: |-
  Given an array of positive integers, find the maximum number of operations possible where each operation
  allows dividing elements by 2 (if even) or multiplying by 3, with at least one division by 2 required per operation.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(a: Seq<int>) -> bool {
      forall|i: int| 0 <= i < a.len() ==> a[i] > 0
  }

  spec fn count_factors_of_two(n: int) -> int
      decreases n when n > 0
  {
      if n > 0 && n % 2 == 0 { 1 + count_factors_of_two(n / 2) }
      else { 0 }
  }

  spec fn sum_factors(a: Seq<int>, i: int) -> int
      decreases a.len() - i when 0 <= i <= a.len()
  {
      if 0 <= i < a.len() && (forall|j: int| 0 <= j < a.len() ==> a[j] > 0) {
          count_factors_of_two(a[i]) + sum_factors(a, i + 1)
      } else if i == a.len() {
          0
      } else {
          0
      }
  }

  spec fn max_operations(a: Seq<int>) -> int {
      if valid_input(a) { sum_factors(a, 0) } else { 0 }
  }

vc-helpers: |

vc-spec: |-
  fn solve(a: Vec<i8>) -> (result: i8)
      requires 
          valid_input(a@.map(|i, x| x as int)),
      ensures 
          result >= 0,
          result as int == max_operations(a@.map(|i, x| x as int)),

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}