vc-description: |-
  Given n apples numbered 1 to n, distribute all apples between two hamsters (Arthur and Alexander) 
  such that each hamster receives only apples they like. Arthur gets '1', Alexander gets '2'.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn valid_input(input: &str) -> bool {
      let lines = split_lines(input);
      lines.len() >= 3 && split_spaces(lines[0]).len() >= 3 &&
      {
          let n = parse_int(split_spaces(lines[0])[0]);
          n > 0
      }
  }
  
  spec fn valid_output(input: &str, result: &Seq<char>) -> bool {
      let lines = split_lines(input);
      let n = parse_int(split_spaces(lines[0])[0]);
      result.len() == 2 * n - 1 &&
      (forall|i: int| 0 <= i < n ==> result[2*i] == '1' || result[2*i] == '2') &&
      (forall|i: int| 0 <= i < n-1 ==> result[2*i+1] == ' ')
  }
  
  spec fn correct_assignment(input: &str, result: &Seq<char>) -> bool {
      let lines = split_lines(input);
      let n = parse_int(split_spaces(lines[0])[0]);
      let arthur_apples = parse_int_seq(split_spaces(lines[1]));
      let arthur_set = arthur_apples.to_set();
      forall|i: int| 1 <= i <= n ==> 
          (arthur_set.contains(i) ==> result[2*(i-1)] == '1') &&
          (!arthur_set.contains(i) ==> result[2*(i-1)] == '2')
  }

  /* Helper function specifications - these would need actual implementations */
  spec fn split_lines(input: &str) -> Seq<&str>;
  spec fn split_spaces(line: &str) -> Seq<&str>;
  spec fn parse_int(s: &str) -> int;
  spec fn parse_int_seq(parts: Seq<&str>) -> Seq<int>;

vc-spec: |-
  fn solve(input: &str) -> (result: Seq<char>)
      requires input.len() > 0
      ensures !valid_input(input) ==> result.len() == 0
      ensures valid_input(input) ==> valid_output(input, &result) && correct_assignment(input, &result)
      ensures forall|i: int| 0 <= i < result.len() ==> result[i] == '1' || result[i] == '2' || result[i] == ' '

vc-code: |-
  {
      assume(false);
      Seq::empty()
  }

vc-postamble: |-

  }

  fn main() {}