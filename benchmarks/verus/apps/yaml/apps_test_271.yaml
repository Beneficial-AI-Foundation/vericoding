vc-description: |-
  Given a non-negative integer n, round it to the nearest integer that ends with 0.
  If n already ends with 0, return n unchanged. When there are two equally distant
  options (when the last digit is 5), use banker's rounding (round half to even).

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_result(n: int, result: int) -> bool
    recommends n >= 0
  {
    let quotient = n / 10;
    let remainder = n % 10;
    result % 10 == 0 && 
    result >= 0 &&
    (remainder < 5 ==> result == quotient * 10) &&
    (remainder > 5 ==> result == (quotient + 1) * 10) &&
    (remainder == 5 ==> (quotient % 2 == 0 ==> result == quotient * 10) && 
                        (quotient % 2 == 1 ==> result == (quotient + 1) * 10))
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: i8) -> (result: i8)
    requires n >= 0
    ensures valid_result(n as int, result as int)

vc-code: |-
  {
    assume(false);
    unreached()
  }

vc-postamble: |2-

  }

  fn main() {}