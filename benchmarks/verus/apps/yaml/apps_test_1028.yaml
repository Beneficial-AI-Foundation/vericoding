vc-description: |-
  Given n participants split into m teams where each team has at least one participant,
  find the minimum and maximum possible number of friendship pairs that can form.
  Friendship pairs are formed between all participants within the same team.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn comb2(n: int) -> int
      recommends n >= 0
  {
      n * (n - 1) / 2
  }
  
  spec fn valid_input(n: int, m: int) -> bool
  {
      1 <= m <= n
  }
  
  spec fn min_friendship_pairs(n: int, m: int) -> int
      recommends valid_input(n, m)
  {
      let k = n / m;
      let p = n % m;
      p * comb2(k + 1) + (m - p) * comb2(k)
  }
  
  spec fn max_friendship_pairs(n: int, m: int) -> int
      recommends valid_input(n, m)
  {
      comb2(n - m + 1)
  }

vc-spec: |-
  fn solve(n: int, m: int) -> (result: (int, int))
      requires valid_input(n, m)
      ensures ({
          let (min_pairs, max_pairs) = result;
          min_pairs >= 0
      })
      ensures ({
          let (min_pairs, max_pairs) = result;
          max_pairs >= 0
      })
      ensures ({
          let (min_pairs, max_pairs) = result;
          min_pairs <= max_pairs
      })
      ensures ({
          let (min_pairs, max_pairs) = result;
          min_pairs == min_friendship_pairs(n, m)
      })
      ensures ({
          let (min_pairs, max_pairs) = result;
          max_pairs == max_friendship_pairs(n, m)
      })

vc-code: |-
  {
      // impl-start
      assume(false);
      (0, 0)
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {}