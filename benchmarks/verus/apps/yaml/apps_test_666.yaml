vc-description: |-
  Find the n-th element (1-indexed) in an infinite sequence constructed as blocks:
  Block 1: [1], Block 2: [1,2], Block 3: [1,2,3], etc.
  The complete sequence is: 1, 1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, ...

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn triangular_number(m: int) -> int
      recommends m >= 0
  {
      m * (m + 1) / 2
  }
  
  spec fn valid_input(n: int) -> bool
  {
      n >= 1
  }
  
  spec fn valid_result(n: int, result: int) -> bool
      recommends valid_input(n)
  {
      result >= 1 && result <= n
  }

vc-helpers: |-

vc-spec: |-
  fn solve(n: i8) -> (result: i8)
      requires valid_input(n as int)
      ensures valid_result(n as int, result as int)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}