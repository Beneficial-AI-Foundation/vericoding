vc-description: |-
  Given N attendees at a brain dinner (including Heidi), determine the minimum number of brains needed
  in a chest for Heidi to survive. Heidi makes the first proposal for brain distribution, which must be 
  accepted by at least half of all attendees (including herself) for her to survive.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn is_power_of_two(n: int) -> bool
      decreases n
  {
      if n <= 0 {
          false
      } else if n == 1 {
          true
      } else if n % 2 == 1 {
          false
      } else {
          is_power_of_two(n / 2)
      }
  }

  spec fn valid_input(n: int) -> bool {
      n >= 1
  }

  spec fn correct_result(n: int, result: int) -> bool {
      if n % 2 == 1 {
          result == (n - 1) / 2
      } else {
          exists|z: int| 1 <= z <= n && is_power_of_two(z) && z <= n && z * 2 > n && result == (n - z) / 2
      }
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: int) -> (result: int)
      requires valid_input(n)
      ensures correct_result(n, result)

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |2-

  }

  fn main() {}
