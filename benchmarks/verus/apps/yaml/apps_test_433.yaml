vc-description: |-
  Given a circular building with n entrances numbered 1 to n, determine the final entrance
  number after walking from entrance a by b entrances. Positive b means walking forward
  (increasing order), negative b means walking backward (decreasing order), and b=0 means
  staying at the starting entrance.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
      spec fn valid_input(n: int, a: int, b: int) -> bool {
          n >= 1 && 1 <= a <= n && -100 <= b <= 100
      }
      
      spec fn final_entrance(n: int, a: int, b: int) -> int {
          ((a - 1 + b) % n + n) % n + 1
      }
      
      spec fn valid_output(result: int, n: int) -> bool {
          1 <= result <= n
      }

vc-helpers: |-

vc-spec: |-
      fn solve(n: int, a: int, b: int) -> (result: int)
          requires 
              valid_input(n, a, b)
          ensures 
              valid_output(result, n),
              result == final_entrance(n, a, b)

vc-code: |-
      {
          assume(false);
          unreached()
      }

vc-postamble: |-

  }

  fn main() {}