vc-description: |-
  Given N integers, find the minimum cost to make all integers equal by transforming some of them.
  Each integer can be transformed at most once. The cost of transforming integer x to integer y is (x-y)Â².

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn sum_squares(p: int, a: Seq<int>) -> int
      decreases a.len()
  {
      if a.len() == 0 {
          0
      } else {
          (p - a[0]) * (p - a[0]) + sum_squares(p, a.subrange(1, a.len() as int))
      }
  }

  spec fn valid_input(n: int, a: Seq<int>) -> bool {
      n >= 1 && n <= 100 && a.len() == n && 
      forall|i: int| 0 <= i < a.len() ==> -100 <= a[i] <= 100
  }

  spec fn is_optimal_cost(result: int, a: Seq<int>) -> bool {
      result >= 0 &&
      exists|p: int| -100 <= p <= 100 && result == sum_squares(p, a) &&
      forall|p: int| -100 <= p <= 100 ==> result <= sum_squares(p, a)
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: int, a: Seq<int>) -> (result: int)
      requires valid_input(n, a)
      ensures is_optimal_cost(result, a)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}
