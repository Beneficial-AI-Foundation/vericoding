vc-description: |-
  Given a complete binary tree of depth n, find the minimum number of additional
  street lights needed so that all paths from entrance (node 1) to exits have
  the same total number of lights.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_input(n: int, lights: Seq<int>) -> bool {
      1 <= n <= 10 &&
      lights.len() == power2(n+1) - 2 &&
      forall|i: int| 0 <= i < lights.len() ==> #[trigger] lights[i] >= 1 && #[trigger] lights[i] <= 100
  }
  
  spec fn power2(n: int) -> int
      decreases n
  {
      if n <= 0 { 1 }
      else { 2 * power2(n - 1) }
  }
  
  spec fn dfs_result(i: int, n: int, a: Seq<int>) -> (int, int) {
      /* Placeholder implementation for complex recursive specification */
      (0, 0)
  }

vc-helpers: |-

vc-spec: |-
  fn solve(n: int, lights: Seq<int>) -> (result: int)
      requires valid_input(n, lights)
      ensures result >= 0

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}