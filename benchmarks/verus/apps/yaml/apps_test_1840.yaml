vc-description: |-
  Given s spaceships with attacking powers and b bases with defensive powers and gold amounts,
  determine the maximum gold each spaceship can steal. A spaceship can attack any base where 
  the spaceship's attacking power is greater than or equal to the base's defensive power.
  When attacking a base, the spaceship steals all gold from that base.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn valid_input(s: nat, b: nat, attacking_powers: Seq<nat>, bases: Seq<(nat, nat)>) -> bool {
      attacking_powers.len() == s && bases.len() == b
  }
  
  spec fn sum_gold_for_spaceship(attacking_power: nat, bases: Seq<(nat, nat)>) -> nat
      decreases bases.len()
  {
      if bases.len() == 0 {
          0
      } else if attacking_power >= bases[0].0 {
          bases[0].1 + sum_gold_for_spaceship(attacking_power, bases.subrange(1, bases.len() as int))
      } else {
          sum_gold_for_spaceship(attacking_power, bases.subrange(1, bases.len() as int))
      }
  }
  
  spec fn valid_output(s: nat, attacking_powers: Seq<nat>, bases: Seq<(nat, nat)>, result: Seq<nat>) -> bool {
      result.len() == s &&
      (forall|i: int| 0 <= i < s ==> result[i] >= 0) &&
      (forall|i: int| 0 <= i < s && i < attacking_powers.len() ==> 
          result[i] == sum_gold_for_spaceship(attacking_powers[i], bases))
  }

vc-spec: |-
  fn solve(s: nat, b: nat, attacking_powers: Seq<nat>, bases: Seq<(nat, nat)>) -> (result: Seq<nat>)
      requires valid_input(s, b, attacking_powers, bases)
      ensures valid_output(s, attacking_powers, bases, result)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}