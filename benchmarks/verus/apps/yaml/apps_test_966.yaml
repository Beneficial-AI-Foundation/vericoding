vc-description: |-
  Given a year number, find the minimum year that is strictly greater than the given year 
  and contains only distinct digits (no repeated digits).

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_input(y: int) -> bool {
      1000 <= y <= 9000
  }
  
  spec fn has_distinct_digits(n: int) -> bool {
      let digits = number_to_digits(n);
      all_distinct(digits)
  }
  
  spec fn number_to_digits(n: int) -> Seq<int> {
      if n == 0 {
          seq![0]
      } else if n > 0 {
          number_to_digits_helper(n, Seq::empty())
      } else {
          number_to_digits_helper(-n, Seq::empty())
      }
  }
  
  spec fn number_to_digits_helper(n: int, acc: Seq<int>) -> Seq<int>
      decreases n
  {
      if n == 0 {
          acc
      } else {
          number_to_digits_helper(n / 10, seq![n % 10].add(acc))
      }
  }
  
  spec fn all_distinct(digits: Seq<int>) -> bool {
      forall|i: int, j: int| 0 <= i < j < digits.len() ==> digits[i] != digits[j]
  }

vc-helpers: |-

vc-spec: |-
  fn solve(y: int) -> (result: int)
  requires valid_input(y)
  ensures result > y,
      has_distinct_digits(result),
      forall|n: int| y < n < result ==> !has_distinct_digits(n)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}