vc-description: |-
  Given n students where each student has participated in ACM ICPC championship y_i times (0 ≤ y_i ≤ 5),
  form the maximum number of teams such that: each team has exactly 3 students, no student can be on 
  multiple teams, and each team can participate together at least k more times (since each student can 
  participate at most 5 times total). Find the maximum number of teams that can be formed.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn count_eligible(participations: Seq<int>, k: int) -> int
      decreases participations.len()
  {
      if participations.len() == 0 {
          0 as int
      } else {
          (if 5 - participations[0] >= k { 1 as int } else { 0 as int }) + count_eligible(participations.subrange(1, participations.len() as int), k)
      }
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: usize, k: usize, participations: Vec<usize>) -> (result: usize)

vc-code: |-
  {
      assume(false);
      0
  }

vc-postamble: |2-

  }

  fn main() {}
