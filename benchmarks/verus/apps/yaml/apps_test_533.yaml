vc-description: |-
  Given two football teams with a1 and a2 players respectively, where players from team 1
  are sent off after k1 yellow cards and players from team 2 are sent off after k2 yellow cards.
  A total of n yellow cards were shown during the match. Find the minimum and maximum number
  of players that could have been sent off.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(a1: int, a2: int, k1: int, k2: int, n: int) -> bool {
      a1 >= 1 && a2 >= 1 && k1 >= 1 && k2 >= 1 && n >= 1
  }

  spec fn minimum_sent_off(a1: int, a2: int, k1: int, k2: int, n: int) -> int
      recommends valid_input(a1, a2, k1, k2, n)
  {
      let max_non_sendoff_cards = (k1 - 1) * a1 + (k2 - 1) * a2;
      if n - max_non_sendoff_cards > 0 { n - max_non_sendoff_cards } else { 0 }
  }

  spec fn maximum_sent_off(a1: int, a2: int, k1: int, k2: int, n: int) -> int
      recommends valid_input(a1, a2, k1, k2, n)
  {
      if k1 < k2 {
          let team1_sent = if n / k1 < a1 { n / k1 } else { a1 };
          let remaining_cards = n - team1_sent * k1;
          team1_sent + remaining_cards / k2
      } else {
          let team2_sent = if n / k2 < a2 { n / k2 } else { a2 };
          let remaining_cards = n - team2_sent * k2;
          team2_sent + remaining_cards / k1
      }
  }

  spec fn valid_result(a1: int, a2: int, k1: int, k2: int, n: int, minimum: int, maximum: int) -> bool
      recommends valid_input(a1, a2, k1, k2, n)
  {
      minimum >= 0 && maximum >= 0 &&
      minimum <= maximum &&
      maximum <= a1 + a2 &&
      minimum <= n &&
      maximum <= n &&
      minimum == minimum_sent_off(a1, a2, k1, k2, n) &&
      maximum == maximum_sent_off(a1, a2, k1, k2, n)
  }

vc-helpers: |

vc-spec: |-
  fn solve(a1: int, a2: int, k1: int, k2: int, n: int) -> (ret: (int, int))
      requires valid_input(a1, a2, k1, k2, n)
      ensures valid_result(a1, a2, k1, k2, n, ret.0, ret.1)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}
