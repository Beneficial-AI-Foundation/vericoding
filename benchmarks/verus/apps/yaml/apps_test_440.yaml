vc-description: |-
  Given a string of lowercase Latin letters, repeatedly remove consecutive vowels 
  by deleting the second vowel in each consecutive pair until no consecutive vowels remain.
  Vowels are defined as: a, e, i, o, u, y. Process the string from left to right.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn is_vowel(c: char) -> bool {
      c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y'
  }
  
  spec fn no_consecutive_vowels(s: Seq<char>) -> bool {
      forall|i: int| 0 <= i < s.len() - 1 ==> !(is_vowel(s[i]) && is_vowel(s[i+1]))
  }
  
  spec fn valid_output(input: Seq<char>, output: Seq<char>) -> bool {
      output.len() <= input.len() &&
      no_consecutive_vowels(output) &&
      (input.len() > 0 ==> output.len() > 0) &&
      (input.len() > 0 ==> output[0] == input[0])
  }

vc-spec: |-
  fn solve(s: Seq<char>) -> (result: Seq<char>)
      ensures valid_output(s, result)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}