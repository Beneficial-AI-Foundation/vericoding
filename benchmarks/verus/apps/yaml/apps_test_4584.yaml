vc-description: |-
  Given N company members with ID numbers 1 to N, where each member (except member 1) has exactly one immediate boss with a smaller ID number.
  For member i (where i > 1), their immediate boss is member A_i. Count the number of immediate subordinates for each member.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(n: int, aa: Seq<int>) -> bool {
      n >= 2 &&
      aa.len() == n - 1 &&
      forall|i: int| 0 <= i < aa.len() ==> 1 <= aa[i] < i + 2
  }

  spec fn subordinate_count(aa: Seq<int>, boss_id: int) -> int {
      Set::new(|j: int| 0 <= j < aa.len() && aa[j] == boss_id).len() as int
  }

  spec fn valid_output(n: int, aa: Seq<int>, result: Seq<int>) -> bool {
      result.len() == n &&
      forall|i: int| 0 <= i < n ==> result[i] >= 0 &&
      forall|i: int| 0 <= i < n ==> result[i] == subordinate_count(aa, i + 1)
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: int, aa: Seq<int>) -> (result: Seq<int>)
      requires valid_input(n, aa)
      ensures valid_output(n, aa, result)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}
