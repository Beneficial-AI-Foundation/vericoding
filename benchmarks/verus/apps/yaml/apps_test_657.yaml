vc-description: |-
  Given initial counts of yellow and blue crystals, determine the minimum additional crystals needed to produce a specified number of colored balls.
  Yellow ball requires 2 yellow crystals, green ball requires 1 yellow + 1 blue crystal, blue ball requires 3 blue crystals.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn max(a: int, b: int) -> int {
      if a >= b { a } else { b }
  }
  
  spec fn valid_input(a: int, b: int, x: int, y: int, z: int) -> bool {
      a >= 0 && b >= 0 && x >= 0 && y >= 0 && z >= 0
  }
  
  spec fn yellow_crystals_needed(x: int, y: int) -> int {
      x * 2 + y
  }
  
  spec fn blue_crystals_needed(y: int, z: int) -> int {
      y + z * 3
  }
  
  spec fn min_additional_crystals(a: int, b: int, x: int, y: int, z: int) -> int {
      max(0, yellow_crystals_needed(x, y) - a) + max(0, blue_crystals_needed(y, z) - b)
  }

vc-spec: |-
  fn solve(a: int, b: int, x: int, y: int, z: int) -> (result: int)
      requires 
          valid_input(a, b, x, y, z)
      ensures 
          result >= 0,
          result == min_additional_crystals(a, b, x, y, z)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}