vc-description: |-
  Given N positive integers, repeatedly perform the operation: find maximum X and minimum x,
  if X != x then replace all X with (X - x), until all integers are equal.
  Return the final common value.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(values: Seq<int>) -> bool {
      values.len() >= 1 && forall|i: int| 0 <= i < values.len() ==> values[i] > 0
  }

  spec fn gcd(a: int, b: int) -> int
      decreases (if a >= b { a } else { b }) when a > 0 && b > 0
  {
      if a > 0 && b > 0 {
          if a == b {
              a
          } else if a > b {
              gcd(a - b, b)
          } else {
              gcd(a, b - a)
          }
      } else {
          1
      }
  }

  spec fn gcd_seq(values: Seq<int>, index: int, current: int) -> int
      decreases values.len() - index when 0 <= index <= values.len() && current > 0 && forall|i: int| 0 <= i < values.len() ==> values[i] > 0
  {
      if 0 <= index <= values.len() && current > 0 && forall|i: int| 0 <= i < values.len() ==> values[i] > 0 {
          if index == values.len() {
              current
          } else {
              gcd_seq(values, index + 1, gcd(current, values[index as int]))
          }
      } else {
          1
      }
  }

  spec fn gcd_of_all(values: Seq<int>) -> int {
      if values.len() >= 1 && forall|i: int| 0 <= i < values.len() ==> values[i] > 0 {
          gcd_seq(values, 1, values[0])
      } else {
          1
      }
  }

vc-helpers: |

vc-spec: |-
  fn solve(values: Seq<int>) -> (result: int)
      requires valid_input(values)
      ensures 
          result > 0 &&
          result == gcd_of_all(values) &&
          forall|i: int| 0 <= i < values.len() ==> values[i] % result == 0

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |2-

  }

  fn main() {}
