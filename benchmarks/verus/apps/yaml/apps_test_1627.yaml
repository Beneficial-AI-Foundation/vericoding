vc-description: |-
  Given an array of n integers representing animal heights, sort the array in non-decreasing order
  using a specific operation that selects a segment of even length and swaps adjacent pairs within it.
  Output the sequence of operations (at most 20,000) needed to sort the array.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_input(n: int, arr: Seq<int>) -> bool {
      n >= 1 && arr.len() == n && forall|i: int| 0 <= i < arr.len() ==> arr[i] >= 1
  }
  
  spec fn valid_operations(operations: Seq<(int, int)>, n: int) -> bool {
      forall|op: (int, int)| operations.contains(op) ==> 1 <= op.0 <= n && 1 <= op.1 <= n && op.1 == op.0 + 1
  }
  
  spec fn is_sorted(arr: Seq<int>) -> bool {
      forall|i: int| 0 <= i < arr.len() - 1 ==> arr[i] <= arr[i+1]
  }
  
  spec fn swap_adjacent(arr: Seq<int>, i: int, j: int) -> Seq<int> {
      if 0 <= i < arr.len() && 0 <= j < arr.len() && j == i + 1 {
          arr.update(i, arr[j]).update(j, arr[i])
      } else {
          arr
      }
  }
  
  spec fn apply_operations(arr: Seq<int>, operations: Seq<(int, int)>) -> Seq<int>
      decreases operations.len()
  {
      if operations.len() == 0 {
          arr
      } else {
          let op = operations[0];
          if 1 <= op.0 <= arr.len() && 1 <= op.1 <= arr.len() && op.1 == op.0 + 1 {
              let new_arr = swap_adjacent(arr, (op.0 - 1) as int, (op.1 - 1) as int);
              apply_operations(new_arr, operations.drop_first())
          } else {
              apply_operations(arr, operations.drop_first())
          }
      }
  }
  
  spec fn count_inversions(arr: Seq<int>) -> nat {
      0nat /* simplified implementation */
  }

vc-helpers: |-

vc-spec: |-
  fn solve(n: int, arr: Seq<int>) -> (operations: Vec<(int, int)>)
    requires 
        valid_input(n, arr),
    ensures 
        valid_operations(operations@, n),
        is_sorted(apply_operations(arr, operations@)) || operations.len() == 20000,
        operations.len() <= 20000,
        is_sorted(arr) ==> operations.len() == 0,

vc-code: |-
  {
      assume(false);
      Vec::new()
  }

vc-postamble: |-

  }

  fn main() {}