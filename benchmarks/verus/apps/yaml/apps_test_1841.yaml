vc-description: |-
  Given an array of n integers and m queries, for each query l_i, find the number of distinct elements
  in the suffix of the array starting from position l_i (1-indexed). The suffix includes all elements
  from position l_i to the end of the array.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(n: int, m: int, a: Seq<int>, queries: Seq<int>) -> bool {
      a.len() == n && queries.len() == m && n >= 1 && m >= 1 &&
      forall|i: int| 0 <= i < m ==> (#[trigger] queries[i], 1 <= queries[i] <= n).1
  }

  spec fn distinct_count(a: Seq<int>, start: int) -> int
      recommends 0 <= start < a.len()
  {
      let suffix_indices = Set::new(|j: int| start <= j < a.len());
      let suffix_values = suffix_indices.map(|j: int| a[j]);
      suffix_values.len() as int
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: i8, m: i8, a: Vec<i8>, queries: Vec<i8>) -> (result: Vec<i8>)
      requires 
          valid_input(n as int, m as int, a@.map(|i, x| x as int), queries@.map(|i, x| x as int))
      ensures 
          result.len() == m &&
          (forall|i: int| 0 <= i < m ==> (#[trigger] result@[i], result@[i] as int == distinct_count(a@.map(|i, x| x as int), queries@[i] as int - 1)).1)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}