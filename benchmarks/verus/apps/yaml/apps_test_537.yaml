vc-description: |-
  Given n students and a ratio k, distribute awards (diplomas and certificates) to maximize 
  the number of winners while following constraints: certificates = k Ã— diplomas, 
  total winners â‰¤ n/2. Output the number of diplomas, certificates, and non-winners.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn valid_input(n: int, k: int) -> bool {
      n >= 0 && k >= 0 && k + 1 > 0
  }
  
  spec fn valid_output(result: Seq<int>, n: int, k: int) -> bool {
      result.len() == 3 &&
      result[0] >= 0 && result[1] >= 0 && result[2] >= 0 &&
      result[1] == result[0] * k &&
      result[0] + result[1] <= n / 2 &&
      result[2] == n - result[0] - result[1]
  }
  
  spec fn optimal_diplomas(n: int, k: int) -> int
      recommends valid_input(n, k)
  {
      (n / 2) / (k + 1)
  }

vc-spec: |-
  fn solve(n: int, k: int) -> (result: Vec<int>)
      requires valid_input(n, k)
      ensures 
          valid_output(result@, n, k) &&
          result@[0] == optimal_diplomas(n, k)

vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {}