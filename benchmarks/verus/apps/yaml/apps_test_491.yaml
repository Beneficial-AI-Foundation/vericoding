vc-description: |-
  Given an integer n representing a bank account balance, perform at most one operation:
  delete the last digit, delete the digit before the last digit, or do nothing.
  Find the maximum possible balance after performing the operation.
  Constraint: absolute value of n is at least 10.

  /* delete last digit */

  /* delete digit before last */

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(n: int) -> bool {
      n >= 10 || n <= -10
  }

  spec fn max_balance_after_operation(n: int) -> int
      recommends valid_input(n)
  {
      if n >= 0 {
          n
      } else {
          /* For negative numbers, we need to delete either the last digit
             or the digit before the last digit to maximize the balance.
             Since this involves string operations that are not easily
             expressible in pure logic, we use a simplified specification. */
          let option1 = n / 10;
          let option2 = (n / 100) * 10 + (n % 10);
          if option1 > option2 { option1 } else { option2 }
      }
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: int) -> (result: int)
      requires valid_input(n)
      ensures result == max_balance_after_operation(n)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}
