vc-description: |-
  Given n real numbers with sum equal to 0, construct a sequence where each element 
  is either the floor or ceiling of the corresponding input number, such that the 
  sum of the constructed sequence is also 0.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_input_format(input: Seq<char>) -> bool 
  {
      input.len() > 0 && contains_newline(input) && 
      has_valid_structure(input) && 
      first_line_is_valid_integer(input) &&
      remaining_lines_are_valid_reals(input)
  }
  
  spec fn input_sum_is_zero(input: Seq<char>) -> bool
  {
      has_valid_structure(input) ==> sum_of_input_reals(input) == 0.0
  }
  
  spec fn valid_output_format(output: Seq<char>) -> bool
  {
      output.len() >= 0 && 
      (output.len() == 0 || (ends_with_newline(output) && all_lines_are_integers(output)))
  }
  
  spec fn output_has_correct_length(input: Seq<char>, output: Seq<char>) -> bool
  {
      has_valid_structure(input) && has_valid_structure(output) ==>
      count_lines(output) == get_n_from_input(input)
  }
  
  spec fn each_output_is_floor_or_ceiling(input: Seq<char>, output: Seq<char>) -> bool
  {
      has_valid_structure(input) && has_valid_structure(output) ==>
      forall|i: int| 0 <= i < get_n_from_input(input) ==> {
          let input_val = get_ith_real(input, i as nat);
          let output_val = get_ith_integer(output, i as nat);
          output_val == floor_of(input_val) || output_val == ceiling_of(input_val)
      }
  }
  
  spec fn output_sum_is_zero(input: Seq<char>, output: Seq<char>) -> bool
  {
      has_valid_structure(input) && has_valid_structure(output) ==>
      sum_of_output_integers(output) == 0
  }
  
  spec fn output_preserves_integers(input: Seq<char>, output: Seq<char>) -> bool
  {
      has_valid_structure(input) && has_valid_structure(output) ==>
      forall|i: int| 0 <= i < get_n_from_input(input) ==> {
          let input_val = get_ith_real(input, i as nat);
          is_integer(input_val) ==> get_ith_integer(output, i as nat) == int_value_of(input_val)
      }
  }
  
  spec fn contains_newline(s: Seq<char>) -> bool
  {
      exists|i: int| 0 <= i < s.len() && s[i] == '\n'
  }
  
  spec fn ends_with_newline(s: Seq<char>) -> bool
  {
      s.len() > 0 && s[s.len()-1] == '\n'
  }
  
  spec fn has_valid_structure(s: Seq<char>) -> bool { true }
  spec fn first_line_is_valid_integer(s: Seq<char>) -> bool { true }
  spec fn remaining_lines_are_valid_reals(s: Seq<char>) -> bool { true }
  spec fn all_lines_are_integers(s: Seq<char>) -> bool { true }
  spec fn is_integer(r: f64) -> bool { true }
  
  spec fn sum_of_input_reals(input: Seq<char>) -> f64 { 0.0 }
  spec fn sum_of_output_integers(output: Seq<char>) -> int { 0 }
  spec fn get_n_from_input(input: Seq<char>) -> int { 1 }
  spec fn count_lines(s: Seq<char>) -> int { 
      if s == seq!['0', '\n'] { 1 } else { 0 }
  }
  spec fn get_ith_real(input: Seq<char>, i: nat) -> f64 { 0.0 }
  spec fn get_ith_integer(output: Seq<char>, i: nat) -> int { 0 }
  spec fn floor_of(r: f64) -> int { 0 }
  spec fn ceiling_of(r: f64) -> int { 0 }
  spec fn int_value_of(r: f64) -> int { 0 }

vc-helpers: |-

vc-spec: |-
  fn solve(stdin_input: Seq<char>) -> (output: Seq<char>)
      requires 
          stdin_input.len() > 0,
          valid_input_format(stdin_input),
          input_sum_is_zero(stdin_input),
      ensures 
          valid_output_format(output),
          output_has_correct_length(stdin_input, output),
          each_output_is_floor_or_ceiling(stdin_input, output),
          output_sum_is_zero(stdin_input, output),
          output_preserves_integers(stdin_input, output),

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {}