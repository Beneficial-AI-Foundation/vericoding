vc-description: |-
  Find the minimum distance Winnie-the-Pooh must travel to have n meals.
  Winnie starts at Rabbit's house and has his first meal there.
  There are 3 houses: Rabbit, Owl, and Eeyore, forming a triangle.
  Distances: Rabbit↔Owl = a meters, Rabbit↔Eeyore = b meters, Owl↔Eeyore = c meters.
  After each meal, Winnie must leave the current house and go to one of the two adjacent houses.
  He needs n meals total, so he makes (n-1) moves.
  Find the minimum total distance for all moves.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(n: int, a: int, b: int, c: int) -> bool {
      1 <= n <= 100 && 1 <= a <= 100 && 1 <= b <= 100 && 1 <= c <= 100
  }

  spec fn min_distance(n: int, a: int, b: int, c: int) -> int
      recommends valid_input(n, a, b, c)
  {
      if n == 1 { 0 } else { (n - 1) * min(a, b) }
  }

  spec fn min(x: int, y: int) -> int {
      if x <= y { x } else { y }
  }

  spec fn max(x: int, y: int) -> int {
      if x >= y { x } else { y }
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: int, a: int, b: int, c: int) -> (result: int)
      requires 
          valid_input(n, a, b, c)
      ensures 
          result >= 0,
          n == 1 ==> result == 0,
          result <= (n-1) * max(a, max(b, c)),
          result == min_distance(n, a, b, c)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}
