vc-description: |-
  Given n positive integers and a threshold k, count how many integers contain at most k lucky digits.
  Lucky digits are 4 and 7.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn valid_input(n: int, k: int, numbers: Seq<int>) -> bool {
      n >= 1 && k >= 0 && numbers.len() == n && forall|i: int| 0 <= i < numbers.len() ==> numbers[i] > 0
  }
  
  spec fn count_lucky_digits(num: int) -> int
      decreases num
  {
      if num == 0 {
          0
      } else {
          let digit = num % 10;
          let rest = num / 10;
          let digit_count = if digit == 4 || digit == 7 { 1 } else { 0 };
          digit_count + count_lucky_digits(rest)
      }
  }
  
  spec fn count_valid_numbers(numbers: Seq<int>, k: int, up_to: int) -> int
      decreases up_to
  {
      if up_to == 0 {
          0
      } else {
          let prev_count = count_valid_numbers(numbers, k, up_to - 1);
          if count_lucky_digits(numbers[up_to - 1]) <= k {
              prev_count + 1
          } else {
              prev_count
          }
      }
  }

vc-spec: |-
  fn solve(n: int, k: int, numbers: Seq<int>) -> (result: int)
      requires
          valid_input(n, k, numbers),
      ensures
          0 <= result <= n,
          result == count_valid_numbers(numbers, k, numbers.len()),

vc-code: |-
  {
      assume(false);
      0
  }

vc-postamble: |-

  }

  fn main() {}