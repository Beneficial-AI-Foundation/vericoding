vc-description: |-
  Given n stones in a row colored R, G, or B, find the minimum number of stones
  to remove so that no two adjacent stones have the same color.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_input(n: int, s: Seq<char>) -> bool
  {
      n >= 1 && s.len() == n
  }
  
  spec fn count_adjacent_same_pairs(s: Seq<char>, n: int) -> int
  {
      count_adjacent_same_pairs_up_to(s, n)
  }
  
  spec fn count_adjacent_same_pairs_up_to(s: Seq<char>, i: int) -> int
      decreases i
  {
      if i <= 1 { 0int }
      else { (if s[i-1] == s[i-2] { 1int } else { 0int }) + count_adjacent_same_pairs_up_to(s, i-1) }
  }

vc-helpers: |-

vc-spec: |-
  fn solve(n: int, s: Seq<char>) -> (result: int)
      requires 
          valid_input(n, s),
      ensures 
          result >= 0,
          result <= n - 1,
          result == count_adjacent_same_pairs(s, n),

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}