vc-description: |-
  Given an n×m grid of lowercase Latin letters, count the number of 2×2 squares 
  where the four letters can form the word "face" (i.e., the four letters are 
  exactly 'f', 'a', 'c', 'e' in any arrangement). Overlapping squares are counted separately.

vc-preamble: |-
  use vstd::prelude::*;
  use vstd::string::*;

  verus! {

  spec fn valid_input(input: Seq<char>) -> bool {
      input.len() > 0
  }
  
  spec fn valid_grid(grid: Seq<Seq<char>>, n: int, m: int) -> bool {
      n >= 1 && m >= 1 && grid.len() == n &&
      forall|i: int| 0 <= i < grid.len() ==> grid[i].len() == m
  }
  
  spec fn count_face_squares(input: Seq<char>) -> int
      decreases input.len()
  {
      if input.len() == 0 {
          0
      } else {
          /* Parse input and count valid face squares */
          0  /* Placeholder - actual implementation would parse lines and count squares */
      }
  }
  
  spec fn count_face_squares_as_string(input: Seq<char>) -> Seq<char> {
      /* Convert count to string representation */
      seq!['0', '\n']  /* Placeholder */
  }

vc-helpers: |-

vc-spec: |-
  fn solve(input: String) -> (result: String)
      requires 
          valid_input(input@),
      ensures 
          result@.len() > 0,
          result@ == count_face_squares_as_string(input@)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}