vc-description: |-
  Given an integer N, determine if the sum of its digits divides N evenly.
  Let S(N) be the sum of all digits in the decimal representation of N.
  Check if N is divisible by S(N).
  Input: A single integer N (1 â‰¤ N â‰¤ 10^9)
  Output: "Yes" if S(N) divides N, "No" otherwise

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn is_digit(c: char) -> bool {
      '0' <= c <= '9'
  }
  
  spec fn digit_value(c: char) -> int 
      recommends is_digit(c)
  {
      c as int - '0' as int
  }
  
  spec fn sum_of_digits(s: Seq<char>) -> int 
      decreases s.len()
  {
      if s.len() == 0 {
          0
      } else if is_digit(s[0]) {
          digit_value(s[0]) + sum_of_digits(s.skip(1))
      } else {
          sum_of_digits(s.skip(1))
      }
  }
  
  spec fn string_to_int(s: Seq<char>) -> int 
      decreases s.len()
  {
      if s.len() == 0 {
          0
      } else if is_digit(s[0]) {
          string_to_int(s.skip(1)) + digit_value(s[0]) * power10(s.len() - 1)
      } else {
          string_to_int(s.skip(1))
      }
  }
  
  spec fn power10(n: int) -> int 
      recommends n >= 0
      decreases n
  {
      if n == 0 { 1 } else { 10 * power10(n - 1) }
  }
  
  spec fn clean_input(input: Seq<char>) -> Seq<char> 
      decreases input.len()
  {
      if input.len() == 0 {
          input
      } else if input[input.len() - 1] == '\n' || input[input.len() - 1] == ' ' {
          clean_input(input.take(input.len() - 1))
      } else {
          input
      }
  }
  
  spec fn valid_positive_integer_string(s: Seq<char>) -> bool {
      s.len() > 0 && 
      (forall|i: int| 0 <= i < s.len() ==> is_digit(s[i])) && 
      (s.len() > 1 ==> s[0] != '0') && 
      string_to_int(s) > 0
  }
  
  spec fn valid_input(input: Seq<char>) -> bool {
      valid_positive_integer_string(clean_input(input))
  }

vc-helpers: |-

vc-spec: |-
  fn solve(input: &str) -> (result: String)
      requires valid_input(input@)
      ensures result@ == "Yes"@ || result@ == "No"@

vc-code: |-
  {
      // impl-start
      assume(false);
      "No".to_string()
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {}