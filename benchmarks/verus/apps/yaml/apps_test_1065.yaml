vc-description: |-
  Given n candies and k people (numbered 1 to k), find the maximum number of candies person 1 can receive.
  Person 1 chooses an integer x and distributes candies cyclically: first x candies to person 1, next x to person 2, 
  ..., next x to person k, then repeat the cycle. Remaining candies are discarded.
  Constraints: 1 ≤ x ≤ M, no person can receive candies more than D times.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn valid_input(n: int, k: int, m: int, d: int) -> bool {
      2 <= n && 2 <= k <= n && 1 <= m <= n && 1 <= d <= n && m * d * k >= n
  }
  
  spec fn candies_used(x: int, d: int, k: int) -> int {
      x * ((d - 1) * k + 1)
  }
  
  spec fn valid_distribution(x: int, d: int, n: int, k: int, m: int, d_max: int) -> bool {
      1 <= x <= m && 1 <= d <= d_max && candies_used(x, d, k) <= n
  }
  
  spec fn person1_candies(x: int, d: int) -> int {
      x * d
  }

vc-spec: |-
  fn solve(n: int, k: int, m: int, d: int) -> (result: int)
      requires valid_input(n, k, m, d)
      ensures
          result >= 0 &&
          result <= m * d &&
          (forall|x: int, d_val: int| valid_distribution(x, d_val, n, k, m, d) ==> person1_candies(x, d_val) <= result) &&
          (exists|x: int, d_val: int| valid_distribution(x, d_val, n, k, m, d) && person1_candies(x, d_val) == result)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}