vc-description: |-
  Given n planes numbered 1 to n, where each plane i likes exactly one other plane f_i (f_i â‰  i),
  determine if there exists a love triangle. A love triangle occurs when plane A likes plane B,
  plane B likes plane C, and plane C likes plane A.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(n: int, f: Seq<int>) -> bool {
      n >= 2 && n <= 5000 &&
      f.len() == n &&
      forall|i: int| 0 <= i < f.len() ==> 1 <= f[i] <= n && f[i] != i + 1
  }

  spec fn zero_indexed_array(n: int, f: Seq<int>) -> Seq<int>
      recommends valid_input(n, f)
  {
      Seq::new(n as nat, |j: int| f[j] - 1)
  }

  spec fn has_love_triangle_with(n: int, a: Seq<int>) -> bool
      recommends 
          a.len() == n &&
          forall|k: int| 0 <= k < n ==> #[trigger] a[k] >= 0 && #[trigger] a[k] < n
  {
      exists|i: int| 0 <= i < n && 
          0 <= a[i] < n && 0 <= a[a[i]] < n && a[a[a[i]]] == i
  }

  spec fn has_love_triangle(n: int, f: Seq<int>) -> bool
      recommends valid_input(n, f)
  {
      let a = zero_indexed_array(n, f);
      has_love_triangle_with(n, a)
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: i8, f: Vec<i8>) -> (result: String)
      requires 
          valid_input(n as int, f@.map(|i: int, x: i8| x as int)),
      ensures 
          result@.len() == 2 || result@.len() == 3,
          (result@.len() == 3) <==> has_love_triangle(n as int, f@.map(|i: int, x: i8| x as int)),

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |2-

  }

  fn main() {}