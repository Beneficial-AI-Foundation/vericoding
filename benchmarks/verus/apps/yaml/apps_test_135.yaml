vc-description: |-
  Given two integers n and k, determine whether all remainders n mod i for i = 1, 2, ..., k are distinct.
  Specifically, check if n mod 1 = 0, n mod 2 = 1, n mod 3 = 2, ..., n mod k = k-1.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(n: int, k: int) -> bool {
      n >= 1 && k >= 1
  }

  spec fn all_remainders_distinct(n: int, k: int) -> bool
      recommends valid_input(n, k)
  {
      forall|i: int| 1 <= i <= k ==> n % i == (i - 1)
  }

  spec fn has_non_distinct_remainder(n: int, k: int) -> bool
      recommends valid_input(n, k)
  {
      exists|i: int| 1 <= i <= k && n % i != (i - 1)
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: int, k: int) -> (result: String)
      requires 
          valid_input(n, k),
      ensures 
          result@ =~= seq!['Y', 'e', 's', '\n'] <==> all_remainders_distinct(n, k),
          result@ =~= seq!['N', 'o', '\n'] <==> has_non_distinct_remainder(n, k),

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |2-

  }

  fn main() {}
