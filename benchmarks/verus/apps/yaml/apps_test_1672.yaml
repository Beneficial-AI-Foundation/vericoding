vc-description: |-
  Given a sequence of magnets with orientations "01" or "10", count the number of groups formed.
  Adjacent magnets with same orientation attract (same group), different orientations repel (separate groups).

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_input(magnets: Seq<Seq<char>>) -> bool {
      forall|i: int| 0 <= i < magnets.len() ==> 
          (magnets[i].len() == 2 && 
           ((magnets[i][0] == '0' && magnets[i][1] == '1') || 
            (magnets[i][0] == '1' && magnets[i][1] == '0')))
  }
  
  spec fn count_groups(magnets: Seq<Seq<char>>) -> int {
      if magnets.len() == 0 { 
          0 as int
      } else { 
          1 + (Set::new(|i: int| 1 <= i < magnets.len() && magnets[i] != magnets[i-1]).len() as int)
      }
  }

vc-helpers: |-

vc-spec: |-
  fn solve(magnets: Seq<Seq<char>>) -> (result: usize)
      requires 
          valid_input(magnets)
      ensures 
          result >= 0,
          magnets.len() == 0 ==> result == 0,
          magnets.len() > 0 ==> result >= 1,
          result <= magnets.len(),
          valid_input(magnets) ==> result == count_groups(magnets) as usize

vc-code: |-
  {
      assume(false);
      0
  }

vc-postamble: |-

  }

  fn main() {}