vc-description: |-
  Given three tasks with integer values A1, A2, A3, find the minimum cost to complete all tasks.
  Rules: Complete any one task first at cost 0, then completing task i followed by task j costs |Aj - Ai|.
  All tasks must be completed.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(a1: int, a2: int, a3: int) -> bool {
      1 <= a1 <= 100 && 1 <= a2 <= 100 && 1 <= a3 <= 100
  }

  spec fn max_of_three(a1: int, a2: int, a3: int) -> int {
      if a1 >= a2 && a1 >= a3 { a1 } else if a2 >= a3 { a2 } else { a3 }
  }

  spec fn min_of_three(a1: int, a2: int, a3: int) -> int {
      if a1 <= a2 && a1 <= a3 { a1 } else if a2 <= a3 { a2 } else { a3 }
  }

  spec fn minimum_cost(a1: int, a2: int, a3: int) -> int {
      max_of_three(a1, a2, a3) - min_of_three(a1, a2, a3)
  }

vc-helpers: |

vc-spec: |-
  fn solve(a1: i8, a2: i8, a3: i8) -> (result: i8)
      requires 
          valid_input(a1 as int, a2 as int, a3 as int)
      ensures 
          result as int >= 0,
          result as int == minimum_cost(a1 as int, a2 as int, a3 as int)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}