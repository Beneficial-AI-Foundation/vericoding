vc-description: |-
  Find the sum of all integers i where 1 ≤ i ≤ N and the sum of digits of i (in base 10) is between A and B inclusive.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(n: int, a: int, b: int) -> bool {
      n >= 1 && a >= 1 && a <= b && b <= 36
  }

  spec fn digit_sum(n: int) -> int 
      decreases n
  {
      if n <= 0 { 0 }
      else { (n % 10) + digit_sum(n / 10) }
  }

  spec fn sum_in_range(n: int, a: int, b: int) -> int
      decreases n
  {
      if n <= 0 { 0 }
      else if a <= digit_sum(n) && digit_sum(n) <= b { 
          n + sum_in_range(n - 1, a, b) 
      }
      else { 
          sum_in_range(n - 1, a, b) 
      }
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: i8, a: i8, b: i8) -> (result: i8)
      requires valid_input(n as int, a as int, b as int)
      ensures 
          result as int == sum_in_range(n as int, a as int, b as int) &&
          result >= 0

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}