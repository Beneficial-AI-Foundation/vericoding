vc-description: |-
  Given an array of n positive integers where the number of distinct elements 
  is between l and r (inclusive) and each element is either 1 or even with its 
  half also present in the array, find the minimum and maximum possible sums.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_input(n: int, l: int, r: int) -> bool {
      n >= 1 && l >= 1 && r >= l && r <= n && r <= 20
  }
  
  spec fn power(base: int, exp: int) -> int
      decreases exp
  {
      if exp <= 0 { 1 } else { base * power(base, exp - 1) }
  }
  
  spec fn sum_with_decreasing_powers(n: int, start_power: int) -> int {
      if n <= 0 { 0 } else if start_power <= 1 { n } else { start_power + sum_with_decreasing_powers(n - 1, start_power / 2) }
  }
  
  spec fn sum_with_increasing_powers(n: int, max_power: int) -> int {
      if n <= 0 { 0 } else if max_power <= 1 { n } else { max_power + sum_with_increasing_powers(n - 1, max_power * 2) }
  }
  
  spec fn min_sum_calculation(n: int, l: int) -> int {
      if n >= 1 && l >= 1 {
          let start_power = power(2, l - 1);
          sum_with_decreasing_powers(n, start_power)
      } else {
          0
      }
  }
  
  spec fn max_sum_calculation(n: int, r: int) -> int {
      if n >= 1 && r >= 1 {
          let max_power = power(2, r - 1);
          sum_with_increasing_powers(n, max_power)
      } else {
          0
      }
  }

vc-helpers: |-

vc-spec: |-
  fn solve(n: int, l: int, r: int) -> (result: (int, int))
      requires valid_input(n, l, r)
      ensures ({
          let (min_sum, max_sum) = result;
          min_sum > 0 &&
          max_sum > 0 &&
          min_sum <= max_sum &&
          min_sum == min_sum_calculation(n, l) &&
          max_sum == max_sum_calculation(n, r)
      })

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}