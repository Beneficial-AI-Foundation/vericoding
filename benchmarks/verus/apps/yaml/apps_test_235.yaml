vc-description: |-
  Given n candies, find the minimum k such that Vasya eats at least half of the original candies.
  Daily process: Vasya eats k candies in morning, Petya eats floor(remaining/10) in evening.
  Continue until no candies remain.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(n: int) -> bool {
      n >= 1
  }

  spec fn vasya_eats_with_strategy(n: int, k: int) -> int
      decreases n
  {
      if n <= 0 || k < 1 { 
          0 
      } else {
          let cur = if n < k { n } else { k };
          let remaining_after_vasya = n - cur;
          let remaining_after_petya = remaining_after_vasya - remaining_after_vasya / 10;
          cur + vasya_eats_with_strategy(remaining_after_petya, k)
      }
  }

  spec fn is_minimal_solution(n: int, k: int) -> bool {
      valid_input(n) && k >= 1 && 
      vasya_eats_with_strategy(n, k) * 2 >= n &&
      (k == 1 || vasya_eats_with_strategy(n, k - 1) * 2 < n)
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: i8) -> (result: i8)
      requires valid_input(n as int)
      ensures
          1 <= result as int <= n as int,
          is_minimal_solution(n as int, result as int)

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |2-

  }

  fn main() {}