vc-description: |-
  Two friends at integer positions a and b on a number line need to meet at the same position.
  Each move costs increasing tiredness: 1st move costs 1, 2nd move costs 2, etc.
  Find the minimum total tiredness for both friends to meet.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(a: int, b: int) -> bool {
      a >= 1 && a <= 1000 && b >= 1 && b <= 1000 && a != b
  }

  spec fn optimal_meeting_point(a: int, b: int) -> int {
      (a + b) / 2
  }

  spec fn tiredness_for_steps(steps: int) -> int
      decreases steps
  {
      if steps <= 0 { 0 } else { steps + tiredness_for_steps(steps - 1) }
  }

  spec fn minimum_total_tiredness(a: int, b: int) -> int
      recommends valid_input(a, b)
  {
      let c = optimal_meeting_point(a, b);
      tiredness_for_steps(if c >= a { c - a } else { a - c }) + 
      tiredness_for_steps(if b >= c { b - c } else { c - b })
  }

vc-helpers: |

vc-spec: |-
  fn solve(a: i32, b: i32) -> (result: i32)
      requires 
          valid_input(a as int, b as int),
      ensures 
          result >= 0,
          result == minimum_total_tiredness(a as int, b as int),

vc-code: |-
  {
      assume(false);
      0
  }

vc-postamble: |2-

  }

  fn main() {}
