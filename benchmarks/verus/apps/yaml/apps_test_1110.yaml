vc-description: |-
  Find the worst-case number of button presses needed to open a lock with n buttons.
  The lock has a specific unknown sequence. When a button is pressed:
  - If it's the next correct button, it stays pressed
  - If it's incorrect, all pressed buttons reset
  - The lock opens when all n buttons are pressed simultaneously (sequence complete)

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
      spec fn valid_input(n: int) -> bool {
          n >= 1
      }
      
      spec fn worst_case_presses(n: int) -> int
          recommends valid_input(n)
      {
          n * (n * n + 5) / 6
      }

vc-helpers: |-

vc-spec: |-
      fn solve(n: int) -> (result: int)
          requires valid_input(n)
          ensures result == worst_case_presses(n) && result >= 1

vc-code: |-
      {
          // impl-start
          assume(false);
          unreached()
          // impl-end
      }

vc-postamble: |-

  }

  fn main() {}