vc-description: |-
  Given N vacation days and M assignments where assignment i takes A_i days to complete,
  find the maximum number of days available for hanging out. Each assignment must be
  completed on consecutive days, and no hanging out is allowed on assignment days.
  If all assignments cannot be completed within the vacation period, return -1.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn valid_input(n: int, m: int, a: Seq<int>) -> bool {
      n >= 0 && m >= 0 && m == a.len()
  }
  
  spec fn can_complete_all_assignments(n: int, a: Seq<int>) -> bool {
      sum_seq(a) <= n
  }
  
  spec fn total_assignment_days(a: Seq<int>) -> int {
      sum_seq(a)
  }
  
  spec fn sum_seq(s: Seq<int>) -> int 
      decreases s.len()
  {
      if s.len() == 0 { 
          0 
      } else { 
          s[0] + sum_seq(s.subrange(1, s.len() as int))
      }
  }

vc-spec: |-
  fn solve(n: int, m: int, a: Seq<int>) -> (result: int)
      requires 
          valid_input(n, m, a)
      ensures 
          m == 0 ==> result == n,
          m > 0 && can_complete_all_assignments(n, a) ==> result == n - total_assignment_days(a),
          m > 0 && !can_complete_all_assignments(n, a) ==> result == -1,
          result >= -1

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {}