vc-description: |-
  Find the minimum positive integer x such that x is divisible by n and x ends with k or more zeros in base 10.
  A number ends with k zeros if and only if it's divisible by 10^k = 2^k Ã— 5^k.
  Algorithm: Factor out powers of 2 and 5 from n, then multiply n by additional factors needed to achieve k trailing zeros.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn power(base: int, exp: int) -> int
      decreases exp
  {
      if exp <= 0 { 1 }
      else { base * power(base, exp - 1) }
  }

vc-helpers: |-

vc-spec: |-
  fn solve(n: int, k: int) -> (result: int)
      requires 
          n > 0 && k >= 0,
      ensures 
          result > 0,
          result % n == 0,
          result % power(10, k) == 0,
          forall|m: int| #[trigger] (m % n) == 0 && #[trigger] (m % power(10, k)) == 0 && m > 0 ==> result <= m,

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}