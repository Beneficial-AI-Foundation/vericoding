vc-description: |-
  Given an array of n integers, for each k from 1 to n-1, construct a k-ary heap structure 
  and count the number of min-heap property violations. In a k-ary heap with 1-indexed elements,
  element at index i has parent at index ⌊(i+k-2)/k⌋ (for i > 1). A violation occurs when 
  a[child] < a[parent].

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(n: int, a: Seq<int>) -> bool {
    n >= 2 && a.len() == n
  }

  spec fn count_violations_for_k(a: Seq<int>, n: int, k: int) -> int {
    let violations = Set::new(|i: int| 2 <= i <= n && {
      let parent_idx = (i + k - 2) / k;
      parent_idx >= 1 && a[i-1] < a[parent_idx-1]
    });
    violations.len() as int
  }

  spec fn valid_output(result: Seq<int>, n: int, a: Seq<int>) -> bool {
    result.len() == n - 1 &&
    (forall|k: int| 1 <= k <= n - 1 ==> #[trigger] result[k-1] >= 0) &&
    (forall|k: int| 1 <= k <= n - 1 ==> #[trigger] result[k-1] == count_violations_for_k(a, n, k))
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: i8, a: Vec<i8>) -> (result: Vec<i8>)
    requires valid_input(n as int, a@.map(|_i, x| x as int))
    ensures valid_output(result@.map(|_i, x| x as int), n as int, a@.map(|_i, x| x as int))

vc-code: |-
  {
    assume(false);
    unreached()
  }

vc-postamble: |2-

  }

  fn main() {}