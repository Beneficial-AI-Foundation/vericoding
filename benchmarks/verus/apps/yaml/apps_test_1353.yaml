vc-description: |-
  Find the minimum cost for Ann to make exactly n subway rides, given two ticket options:
  single-ride tickets (cost a rubles each) and multi-ride tickets (cost b rubles, covers m rides).
  Ann can buy any combination of these tickets.

  /* All single tickets */

  /* All multi-ride tickets (with potential waste) */

  /* Mixed: multi-ride + single for remainder */

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(n: int, m: int, a: int, b: int) -> bool {
      n >= 1 && n <= 1000 &&
      m >= 1 && m <= 1000 &&
      a >= 1 && a <= 1000 &&
      b >= 1 && b <= 1000
  }

  spec fn optimal_cost(n: int, m: int, a: int, b: int) -> int
      recommends valid_input(n, m, a, b)
  {
      if n * a <= ((n + m - 1) / m) * b {
          if n * a <= (n / m) * b + (n % m) * a {
              n * a
          } else {
              (n / m) * b + (n % m) * a
          }
      } else {
          if ((n + m - 1) / m) * b <= (n / m) * b + (n % m) * a {
              ((n + m - 1) / m) * b
          } else {
              (n / m) * b + (n % m) * a
          }
      }
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: int, m: int, a: int, b: int) -> (result: int)
      requires 
          valid_input(n, m, a, b),
      ensures 
          result >= 0,
          result == optimal_cost(n, m, a, b),

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}
