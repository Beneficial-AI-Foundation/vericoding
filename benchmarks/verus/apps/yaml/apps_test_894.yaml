vc-description: |-
  Given a rectangle with vertices at (0,0) and (x,y), find two points A=(x₁,y₁) and C=(x₂,y₂) 
  such that triangle ABC with B=(0,0) is right-angled and isosceles at B, contains the entire 
  rectangle, has minimum area, and all coordinates are integers with x₁ < x₂.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(x: int, y: int) -> bool {
      x != 0 && y != 0
  }

  spec fn valid_output(result: Seq<int>, x: int, y: int) -> bool {
      result.len() == 4 &&
      result[0] < result[2] &&
      (x * y > 0 && x < 0 ==> result =~= seq![x + y, 0, 0, x + y]) &&
      (x * y > 0 && x >= 0 ==> result =~= seq![0, x + y, x + y, 0]) &&
      (x * y <= 0 && x < 0 ==> result =~= seq![x - y, 0, 0, y - x]) &&
      (x * y <= 0 && x >= 0 ==> result =~= seq![0, y - x, x - y, 0])
  }

vc-helpers: |

vc-spec: |-
  fn solve(x: int, y: int) -> (result: Vec<int>)
      requires valid_input(x, y)
      ensures valid_output(result@, x, y)

vc-code: |-
  {
      assume(false);
      Vec::new()
  }

vc-postamble: |2-

  }

  fn main() {}
