vc-description: |-
  Given a sequence of N integers, for each position i, find the maximum value 
  among all N-1 elements excluding the element at position i.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn max_of_seq(s: Seq<int>) -> int
      recommends s.len() >= 1
      decreases s.len()
  {
      if s.len() == 1 {
          s[0]
      } else if s[0] >= max_of_seq(s.subrange(1, s.len() as int)) {
          s[0]
      } else {
          max_of_seq(s.subrange(1, s.len() as int))
      }
  }

  spec fn max_excluding(s: Seq<int>, exclude_idx: int) -> int
      recommends 0 <= exclude_idx < s.len() && s.len() >= 2
  {
      let others = s.subrange(0, exclude_idx).add(s.subrange(exclude_idx + 1, s.len() as int));
      max_of_seq(others)
  }

vc-helpers: |

vc-spec: |-
  fn solve(input: Seq<int>) -> (result: Seq<int>)
      requires input.len() >= 2
      ensures 
          result.len() == input.len(),
          forall|i: int| 0 <= i < input.len() ==> result[i] == max_excluding(input, i),

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}
