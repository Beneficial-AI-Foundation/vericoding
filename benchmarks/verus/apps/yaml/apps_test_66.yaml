vc-description: |-
  Two athletes Willman and Bolt compete in a race with step lengths w and b meters respectively.
  The race distance L is chosen uniformly at random from integers 1 to t (inclusive).
  Each athlete can take at most floor(L/step_length) steps, traveling floor(L/step_length) * step_length distance.
  They tie when they travel the same total distance: floor(L/w) * w = floor(L/b) * b.
  Find the probability that they tie, expressed as an irreducible fraction.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn abs(x: int) -> int {
      if x >= 0 { x } else { -x }
  }

  spec fn gcd(a: int, b: int) -> int 
      decreases (if b == 0 { 0 } else { abs(b) })
  {
      if b == 0 { abs(a) } else { gcd(b, a % b) }
  }

  spec fn valid_input(t: int, w: int, b: int) -> bool {
      t > 0 && w > 0 && b > 0
  }
  
  spec fn valid_fraction(numerator: int, denominator: int) -> bool {
      numerator >= 0 && denominator > 0 && numerator <= denominator
  }
  
  spec fn is_irreducible_fraction(numerator: int, denominator: int) -> bool
      recommends valid_fraction(numerator, denominator)
  {
      gcd(numerator, denominator) == 1
  }

vc-helpers: |-

vc-spec: |-
  fn solve(t: u64, w: u64, b: u64) -> (result: (u64, u64))
      requires
          t > 0 && w > 0 && b > 0,
      ensures
          result.1 > 0,
          result.0 <= result.1

vc-code: |-
  {
      assume(false);
      (0, 1)
  }

vc-postamble: |-

  }

  fn main() {}