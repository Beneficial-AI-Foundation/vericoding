vc-description: |-
  Given a sequence of integers, partition it into two subsequences such that
  every element belongs to exactly one subsequence. Find the maximum possible
  value of B - C, where B is the sum of elements in the first subsequence
  and C is the sum of elements in the second subsequence.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn sum_abs(arr: Seq<int>, i: int) -> int
      decreases arr.len() - i when 0 <= i <= arr.len()
  {
      if i == arr.len() {
          0
      } else {
          (if arr[i] >= 0 { arr[i] } else { -arr[i] }) + sum_abs(arr, i + 1)
      }
  }

  spec fn valid_input(n: int, arr: Seq<int>) -> bool {
      0 <= n == arr.len()
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: i8, arr: Vec<i8>) -> (result: i8)
      requires valid_input(n as int, arr@.map(|i: int, v: i8| v as int))
      ensures result as int == sum_abs(arr@.map(|i: int, v: i8| v as int), 0)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}