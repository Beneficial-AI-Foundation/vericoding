vc-description: |-
  Two participants compete in a typing race. Each participant has a ping delay and typing speed.
  The total time for participant i is 2*t_i + s*v_i where t_i is ping, v_i is typing speed per character, s is text length.
  Determine winner based on who completes first, or declare friendship if tied.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_input(s: int, v1: int, v2: int, t1: int, t2: int) -> bool
  {
      1 <= s <= 1000 && 1 <= v1 <= 1000 && 1 <= v2 <= 1000 && 1 <= t1 <= 1000 && 1 <= t2 <= 1000
  }
  
  spec fn participant_time(s: int, v: int, t: int) -> int
  {
      2 * t + s * v
  }
  
  spec fn correct_result(s: int, v1: int, v2: int, t1: int, t2: int) -> Seq<char>
  {
      let time1 = participant_time(s, v1, t1);
      let time2 = participant_time(s, v2, t2);
      if time1 < time2 { seq!['F','i','r','s','t'] }
      else if time1 > time2 { seq!['S','e','c','o','n','d'] }
      else { seq!['F','r','i','e','n','d','s','h','i','p'] }
  }
  
  spec fn valid_result(result: Seq<char>) -> bool
  {
      result == seq!['F','i','r','s','t'] || result == seq!['S','e','c','o','n','d'] || result == seq!['F','r','i','e','n','d','s','h','i','p']
  }

vc-helpers: |-

vc-spec: |-
  fn solve(s: i32, v1: i32, v2: i32, t1: i32, t2: i32) -> (result: Vec<char>)
      requires 
          valid_input(s as int, v1 as int, v2 as int, t1 as int, t2 as int)
      ensures 
          valid_result(result@) &&
          result@ == correct_result(s as int, v1 as int, v2 as int, t1 as int, t2 as int)

vc-code: |-
  {
      assume(false);
      Vec::new()
  }

vc-postamble: |-

  }

  fn main() {}