vc-description: |-
  Given three integers representing colors, count the number of distinct colors.
  Input constraints: 1 ≤ a,b,c ≤ 100
  Output: number of different kinds of colors (1, 2, or 3)

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_input(a: int, b: int, c: int) -> bool {
      1 <= a <= 100 && 1 <= b <= 100 && 1 <= c <= 100
  }
  
  spec fn count_distinct_colors(a: int, b: int, c: int) -> int {
      if a == b && b == c { 1 }
      else if a == b || b == c || a == c { 2 }
      else { 3 }
  }
  
  spec fn all_same(a: int, b: int, c: int) -> bool {
      a == b && b == c
  }
  
  spec fn exactly_two_same(a: int, b: int, c: int) -> bool {
      (a == b && b != c) || (b == c && a != b) || (a == c && a != b)
  }
  
  spec fn all_different(a: int, b: int, c: int) -> bool {
      a != b && b != c && a != c
  }

vc-helpers: |-

vc-spec: |-
  fn solve(a: int, b: int, c: int) -> (result: int)
      requires 
          valid_input(a, b, c)
      ensures 
          1 <= result <= 3,
          result == count_distinct_colors(a, b, c),
          result == 1 <==> all_same(a, b, c),
          result == 2 <==> exactly_two_same(a, b, c),
          result == 3 <==> all_different(a, b, c)

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {}