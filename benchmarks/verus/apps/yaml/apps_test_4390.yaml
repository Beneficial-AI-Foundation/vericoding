vc-description: |-
  Given two positive integers a and b, find the minimum number of increments needed 
  to make a divisible by b. In each move, you can increase a by 1.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(test_cases: Seq<(int, int)>) -> bool {
      forall|i: int| 0 <= i < test_cases.len() ==> 
          test_cases[i].0 > 0 && test_cases[i].1 > 0
  }

  spec fn min_moves_to_divisible(a: int, b: int) -> int
      recommends a > 0 && b > 0
  {
      (b - a % b) % b
  }

  spec fn valid_output(test_cases: Seq<(int, int)>, results: Seq<int>) -> bool
      recommends valid_input(test_cases)
  {
      results.len() == test_cases.len() &&
      forall|i: int| 0 <= i < results.len() ==> 
          results[i] == min_moves_to_divisible(test_cases[i].0, test_cases[i].1) &&
          results[i] >= 0
  }

vc-helpers: |

vc-spec: |-
  fn solve(test_cases: Seq<(int, int)>) -> (results: Seq<int>)
      requires valid_input(test_cases)
      ensures valid_output(test_cases, results)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}
