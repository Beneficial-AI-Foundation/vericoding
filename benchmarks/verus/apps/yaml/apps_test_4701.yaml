vc-description: |-
  Start with value 1 and perform exactly N operations. Each operation is either:
  Operation A: multiply current value by 2, or Operation B: add K to current value.
  Find the minimum possible final value after N operations.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_input(n: int, k: int) -> bool {
      n >= 1 && k >= 1
  }
  
  spec fn apply_operations(start: int, operations: Seq<bool>, k: int) -> int
      decreases operations.len()
  {
      if operations.len() == 0 {
          start
      } else if operations[0] {
          apply_operations(start * 2, operations.subrange(1, operations.len() as int), k)
      } else {
          apply_operations(start + k, operations.subrange(1, operations.len() as int), k)
      }
  }

vc-helpers: |-

vc-spec: |-
  fn solve(n: int, k: int) -> (result: int)
      requires valid_input(n, k)
      ensures result >= 1

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}