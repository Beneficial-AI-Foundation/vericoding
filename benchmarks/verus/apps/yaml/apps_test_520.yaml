vc-description: |-
  Given a list of university entrance years for groups that student Igor joined,
  determine Igor's entrance year. Igor joins his own group and all groups
  where the entrance year differs by at most x years from his entrance year.
  The solution computes Igor's entrance year as the average of all group years.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn sum_range(s: Seq<int>, start: int, end: int) -> int
      decreases end - start when 0 <= start <= end <= s.len()
  {
      if start == end {
          0
      } else {
          s[start] + sum_range(s, start + 1, end)
      }
  }

  spec fn valid_input(n: int, years: Seq<int>) -> bool
  {
      n > 0 && years.len() == n
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: i8, years: Vec<i8>) -> (result: i8)
      requires n > 0 && years.len() == n as nat
      ensures result as int == sum_range(years@.map(|i, x| x as int), 0, years.len() as int) / (n as int)

vc-code: |-
  {
      assume(false);
      0
  }

vc-postamble: |2-

  }

  fn main() {}