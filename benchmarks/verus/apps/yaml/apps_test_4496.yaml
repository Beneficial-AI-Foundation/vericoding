vc-description: |-
  Given an integer D representing a December date (22-25), output the corresponding Christmas-related string:
  D=25: "Christmas", D=24: "Christmas Eve", D=23: "Christmas Eve Eve", D=22: "Christmas Eve Eve Eve"

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_input(d: int) -> bool {
      22 <= d <= 25
  }
  
  spec fn expected_output(d: int) -> Seq<char> {
      if valid_input(d) {
          let eve_count = 25 - d;
          let base_string = seq!['C', 'h', 'r', 'i', 's', 't', 'm', 'a', 's'];
          if eve_count == 0 {
              base_string
          } else {
              base_string + repeat_eve(eve_count)
          }
      } else {
          seq![]
      }
  }
  
  spec fn repeat_eve(count: int) -> Seq<char>
      decreases count
  {
      if count <= 0 {
          seq![]
      } else {
          seq![' ', 'E', 'v', 'e'] + repeat_eve(count - 1)
      }
  }

vc-helpers: |-

vc-spec: |-
  fn solve(d: int) -> (result: String)
      requires valid_input(d)
      ensures result@ == expected_output(d)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}