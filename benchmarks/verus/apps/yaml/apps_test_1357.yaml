vc-description: |-
  Given n houses numbered 1 to n arranged in a clockwise ring with one-way clockwise traffic,
  find the minimum time to complete m tasks in sequence. Each task must be completed at a 
  specific house. Starting at house 1, moving from one house to the next adjacent house takes 
  1 time unit. Tasks must be completed in the given order.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(n: int, m: int, tasks: Seq<int>) -> bool {
      n >= 2 && m >= 1 && tasks.len() == m && 
      forall|i: int| 0 <= i < tasks.len() ==> 1 <= tasks[i] <= n
  }

  spec fn min_time_to_complete(n: int, tasks: Seq<int>, current_pos: int, task_index: int) -> int
      recommends
          n >= 2,
          forall|i: int| 0 <= i < tasks.len() ==> 1 <= tasks[i] <= n,
          1 <= current_pos <= n,
          0 <= task_index < tasks.len()
  {
      let target = tasks[task_index];
      if target >= current_pos { target - current_pos }
      else { (n - current_pos) + target }
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: int, m: int, tasks: Seq<int>) -> (result: int)
      requires valid_input(n, m, tasks)
      ensures 
          result >= 0,
          m > 0 ==> result >= tasks[m-1] - 1,
          result <= (m - 1) * n + tasks[m-1] - 1

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}
