vc-description: |-
  Given n robots with unique identifiers, they play a game where robot i says identifiers
  of robots 1 through i. Find the k-th identifier pronounced in the entire sequence.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn valid_input(n: int, k: int, l: Seq<int>) -> bool {
      n >= 1 && k >= 1 && l.len() == n && k <= n * (n + 1) / 2
  }
  
  spec fn total_identifiers_after_robot(i: int) -> int {
      i * (i + 1) / 2
  }
  
  spec fn correct_result(n: int, k: int, l: Seq<int>, result: int) -> bool {
      valid_input(n, k, l) ==> (
          exists|i: int| 1 <= i <= n && 
            total_identifiers_after_robot(i - 1) < k <= total_identifiers_after_robot(i) &&
            result == l[k - total_identifiers_after_robot(i - 1) - 1]
      )
  }

vc-spec: |-
  fn solve(n: int, k: int, l: Seq<int>) -> (result: int)
      requires valid_input(n, k, l)
      ensures correct_result(n, k, l, result)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}