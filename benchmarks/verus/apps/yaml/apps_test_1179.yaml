vc-description: |-
  Given n robots with unique identifiers, they play a game where robot i says identifiers
  of robots 1 through i. Find the k-th identifier pronounced in the entire sequence.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(n: int, k: int, l: Seq<int>) -> bool {
      n >= 1 && k >= 1 && l.len() == n && k <= n * (n + 1) / 2
  }

  spec fn total_identifiers_after_robot(i: int) -> int 
      recommends i >= 0
  {
      i * (i + 1) / 2
  }

  spec fn correct_result(n: int, k: int, l: Seq<int>, result: int) -> bool
      recommends valid_input(n, k, l)
  {
      exists|i: int| #[trigger] total_identifiers_after_robot(i) > 0 &&
        1 <= i <= n && 
        total_identifiers_after_robot(i - 1) < k <= total_identifiers_after_robot(i) &&
        result == l[k - total_identifiers_after_robot(i - 1) - 1]
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: i8, k: i8, l: Vec<i8>) -> (result: i8)
      requires valid_input(n as int, k as int, l@.map(|i: int, x: i8| x as int))
      ensures correct_result(n as int, k as int, l@.map(|i: int, x: i8| x as int), result as int)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}