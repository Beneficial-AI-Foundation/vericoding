vc-description: |-
  Given a string of '+' and '-' characters, simulate finding the minimum initial value
  needed to keep a running sum non-negative throughout the string. Count the total
  number of characters processed across all attempts until finding a successful initial value.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn valid_input(s: Seq<char>) -> bool {
      s.len() > 0 && forall|i: int| 0 <= i < s.len() ==> s[i] == '+' || s[i] == '-'
  }
  
  spec fn compute_result(s: Seq<char>) -> int {
      compute_result_helper(s, 0, 0, 0, s.len())
  }
  
  spec fn compute_result_helper(s: Seq<char>, i: int, cur: int, pm: int, ans: int) -> int
      decreases s.len() - i when 0 <= i <= s.len()
  {
      if i == s.len() {
          ans
      } else if s[i] == '+' {
          compute_result_helper(s, i + 1, cur + 1, pm, ans)
      } else {
          let new_cur = cur - 1;
          if new_cur < pm {
              compute_result_helper(s, i + 1, new_cur, new_cur, ans + i + 1)
          } else {
              compute_result_helper(s, i + 1, new_cur, pm, ans)
          }
      }
  }

vc-spec: |-
  fn solve(s: Seq<char>) -> (result: int)
      requires valid_input(s),
      ensures result >= s.len(),
      ensures result == compute_result(s),

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}