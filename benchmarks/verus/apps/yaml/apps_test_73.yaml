vc-description: |-
  Calculate the minimum number of days needed to finish reading a book with c pages.
  Day 1: Read min(v_1, v_0) pages. Day n (n >= 2): Go back l pages, then read min(v_1, v_0 + (n-1) * a) pages total.
  The book is finished when the last page is read for the first time.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn compute_position(days: int, v0: int, v1: int, a: int, l: int) -> int
      decreases days
  {
      if days <= 0 {
          0
      } else {
          let prev_pos = compute_position(days - 1, v0, v1, a, l);
          let after_reread = if prev_pos - l > 0 { prev_pos - l } else { 0 };
          let read_today = if v1 < v0 + a * (days - 1) { v1 } else { v0 + a * (days - 1) };
          after_reread + read_today
      }
  }

vc-helpers: |-

vc-spec: |-
  fn solve(c: u32, v0: u32, v1: u32, a: u32, l: u32) -> (result: u32)
      requires
          1 <= c && c <= 1000,
          0 <= l && l < v0 && v0 <= v1 && v1 <= 1000,
          0 <= a && a <= 1000
      ensures
          result >= 1,
          compute_position(result as int, v0 as int, v1 as int, a as int, l as int) >= c as int,
          forall|days: int| 1 <= days && days < result as int ==> compute_position(days, v0 as int, v1 as int, a as int, l as int) < c as int

vc-code: |-
  {
      assume(false);
      1
  }

vc-postamble: |-

  }

  fn main() {}