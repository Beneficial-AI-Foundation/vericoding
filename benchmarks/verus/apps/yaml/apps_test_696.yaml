vc-description: |-
  Given a prime number p, find the count of primitive roots modulo p.
  A primitive root modulo prime p is an integer x where 1 ≤ x < p such that
  x^k ≢ 1 (mod p) for all positive integers k < p-1, but x^(p-1) ≡ 1 (mod p).

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn valid_input(p: int) -> bool {
      2 <= p < 2000
  }
  
  spec fn count_primitive_roots(p: int) -> int
      recommends valid_input(p)
  {
      if p == 2 { 1 }
      else { 
          /* Count of integers i where 1 <= i < p-1 and for all j where 2 <= j <= i,
             if (p-1) % j == 0 then i % j != 0 */
          (Set::new(|i: int| 1 <= i < p-1 && (forall|j: int| 2 <= j <= i ==> !((p-1) % j == 0 && i % j == 0)))).len() as int
      }
  }

vc-spec: |-
  fn solve(p: int) -> (result: int)
      requires valid_input(p)
      ensures 
          result >= 0 &&
          result == count_primitive_roots(p)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}