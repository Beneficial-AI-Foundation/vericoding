vc-description: |-
  Find minimum cost to travel from city 1 to city n on a straight line where adjacent cities are 1 km apart,
  roads are directional (can only go from lower to higher numbered cities), car has fuel tank capacity v liters
  consuming 1 liter per km, and each city i sells fuel at i dollars per liter.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn valid_input(n: int, v: int) -> bool {
      2 <= n <= 100 && 1 <= v <= 100
  }
  
  spec fn min_cost(n: int, v: int) -> int {
      let req = n - 1;
      if req <= v {
          req
      } else {
          let remaining = req - v;
          v + remaining * (remaining + 3) / 2
      }
  }

vc-spec: |-
  fn solve(n: int, v: int) -> (result: int)
      requires valid_input(n, v)
      ensures result == min_cost(n, v)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}