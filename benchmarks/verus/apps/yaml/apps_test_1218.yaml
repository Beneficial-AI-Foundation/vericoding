vc-description: |-
  Find the minimum number of splitters needed to transform 1 pipe into n pipes.
  Available splitters have 2, 3, 4, ..., k outputs respectively.
  Each splitter takes 1 input pipe and produces multiple output pipes.
  Return -1 if impossible.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn valid_input(n: int, k: int) -> bool {
      n >= 1 && k >= 2
  }
  
  spec fn impossibility_condition(n: int, k: int) -> bool
      recommends valid_input(n, k)
  {
      2 * (n - 1) - k * (k - 1) > 0
  }
  
  spec fn valid_solution(n: int, k: int, result: int) -> bool
      recommends valid_input(n, k)
  {
      if impossibility_condition(n, k) {
          result == -1
      } else {
          result >= 0 && result <= k &&
          exists|x: int| 
              x >= 0 && 
              x * x - x + (2 * (n - 1) - k * (k - 1)) <= 0 && 
              (x == 0 || (x + 1) * (x + 1) - (x + 1) + (2 * (n - 1) - k * (k - 1)) > 0) &&
              result == k - x
      }
  }

vc-spec: |-
  fn solve(n: int, k: int) -> (result: int)
      requires 
          valid_input(n, k)
      ensures 
          result >= -1,
          (result == -1) <==> impossibility_condition(n, k),
          valid_solution(n, k, result)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}