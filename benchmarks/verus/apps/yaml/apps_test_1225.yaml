vc-description: |-
  Given a monster with initial health H, find the minimum number of attacks needed to defeat it.
  Attack rules: If health is 1, monster dies. If health > 1, monster splits into two monsters
  with health floor(X/2). Goal is to make all monsters have health <= 0.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(h: int) -> bool {
      h >= 1
  }

  spec fn compute_attacks(h: int) -> int
      recommends h >= 0
  {
      if h == 0 { 0 }
      else { compute_attacks_iterative(h, 0) }
  }

  spec fn compute_attacks_iterative(h: int, n: int) -> int
      recommends h >= 0 && n >= 0
      decreases h when h > 0
  {
      if h == 0 { 0 }
      else { pow2(n) + compute_attacks_iterative(h / 2, n + 1) }
  }

  spec fn pow2(n: int) -> int
      recommends n >= 0
      decreases n
  {
      if n <= 0 { 1 }
      else { 2 * pow2(n - 1) }
  }

  spec fn parse_int_func(s: Seq<char>) -> int
      recommends s.len() > 0
  {
      parse_int_helper(s, 0, 0)
  }

  spec fn parse_int_helper(s: Seq<char>, i: int, acc: int) -> int
      recommends 0 <= i <= s.len() && acc >= 0
      decreases s.len() - i
  {
      if i >= s.len() || s[i] == '\n' || s[i] == ' ' {
          acc
      } else if '0' <= s[i] <= '9' {
          parse_int_helper(s, i + 1, acc * 10 + (s[i] as int - '0' as int))
      } else {
          parse_int_helper(s, i + 1, acc)
      }
  }

  spec fn int_to_string_func(n: int) -> Seq<char>
      recommends n >= 0
  {
      if n == 0 { seq!['0'] }
      else { int_to_string_helper(n, seq![]) }
  }

  spec fn int_to_string_helper(n: int, acc: Seq<char>) -> Seq<char>
      recommends n >= 0
      decreases n when n > 0
  {
      if n == 0 { acc }
      else {
          let digit = n % 10;
          let digit_char = ('0' as int + digit) as char;
          int_to_string_helper(n / 10, seq![digit_char].add(acc))
      }
  }

vc-helpers: |

vc-spec: |-
  fn solve(stdin_input: Seq<char>) -> (output: Seq<char>)
      requires stdin_input.len() > 0

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |2-

  }

  fn main() {}
