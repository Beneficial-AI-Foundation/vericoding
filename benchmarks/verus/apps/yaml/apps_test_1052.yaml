vc-description: |-
  Count the number of permutations of [1, 2, ..., n] where at least n-k positions
  have the correct value (i.e., p[i] = i for at least n-k indices i).

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_input(n: int, k: int) -> bool {
      4 <= n <= 1000 && 1 <= k <= 4 && k < n
  }

  spec fn factorial(n: int) -> int
      decreases n
  {
      if n <= 1 { 1 } else { n * factorial(n - 1) }
  }

  spec fn derangement(n: int) -> int
      decreases n
  {
      if n <= 1 { 0 }
      else if n == 2 { 1 }
      else { (n - 1) * (derangement(n - 1) + derangement(n - 2)) }
  }

  spec fn binomial(n: int, k: int) -> int {
      if k > n { 0 }
      else if k == 0 || k == n { 1 }
      else { factorial(n) / (factorial(k) * factorial(n - k)) }
  }

  spec fn sum_binomial_derangement(n: int, k: int, i: int) -> int
      decreases n - k - i
  {
      if i >= n - k { 0 }
      else { binomial(n, i) * derangement(n - i) + sum_binomial_derangement(n, k, i + 1) }
  }

vc-helpers: |-

vc-spec: |-
  fn solve(n: int, k: int) -> (result: int)
      requires valid_input(n, k)
      ensures result == factorial(n) - sum_binomial_derangement(n, k, 0)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}