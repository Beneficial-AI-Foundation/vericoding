vc-description: |-
  Two wires run from left to right between a wall and device. Given a string of '+' and '-' 
  representing wire crossings, determine if wires can be untangled by free movement without
  unplugging. Uses stack algorithm where same adjacent characters cancel out.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn extract_first_line(input: Seq<char>) -> Seq<char>
      decreases input.len()
  {
      if input.len() == 0 {
          Seq::empty()
      } else if input[0] == '\n' {
          Seq::empty()
      } else {
          seq![input[0]] + extract_first_line(input.subrange(1, input.len() as int))
      }
  }

  spec fn process_string(input: Seq<char>, stack: Seq<char>) -> Seq<char>
      decreases input.len()
  {
      if input.len() == 0 {
          stack
      } else {
          let c = input[0];
          let new_stack = if stack.len() > 0 && stack[stack.len() - 1] == c {
              stack.subrange(0, stack.len() - 1)
          } else {
              stack.push(c)
          };
          process_string(input.subrange(1, input.len() as int), new_stack)
      }
  }

  spec fn stack_algorithm_results_in_empty_stack(input: Seq<char>) -> bool
  {
      let stack = process_string(input, Seq::empty());
      stack.len() == 0
  }

vc-helpers: |

vc-spec: |-
  fn solve(input: Vec<char>) -> (result: Vec<char>)
      ensures result@.len() > 0

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |2-

  }

  fn main() {}