vc-description: |-
  Given n books numbered 1 to n and a library with capacity k, over n consecutive days
  a person requests book a_i on day i. The library starts empty and each book costs 1 CHF.
  When at capacity, one existing book must be removed before adding a new one.
  Find the minimum cost to satisfy all requests using optimal cache replacement strategy.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(n: int, k: int, requests: Seq<int>) -> bool {
      n >= 1 && k >= 1 && requests.len() == n &&
      forall|i: int| 0 <= i < requests.len() ==> #[trigger] requests[i] >= 1 && #[trigger] requests[i] <= n
  }

  spec fn valid_solution(n: int, k: int, requests: Seq<int>, cost: int) -> bool {
      valid_input(n, k, requests) && cost >= 0 && cost <= n
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: i8, k: i8, requests: Vec<i8>) -> (cost: i8)
      requires valid_input(n as int, k as int, requests@.map(|i: int, x: i8| x as int))
      ensures valid_solution(n as int, k as int, requests@.map(|i: int, x: i8| x as int), cost as int)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}