vc-description: |-
  Given a classroom with n lanes and m desks per lane, where each desk has 2 seats (left and right),
  find the lane, desk, and side for seat number k. Seats are numbered 1 to 2nm in order:
  by lane first, then by desk within each lane, then left seat before right seat within each desk.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn valid_input(n: int, m: int, k: int) -> bool {
      1 <= n <= 10000 && 1 <= m <= 10000 && 1 <= k <= 2 * n * m
  }
  
  spec fn valid_output(n: int, m: int, lane: int, desk: int, side: char) -> bool {
      1 <= lane <= n && 1 <= desk <= m && (side == 'L' || side == 'R')
  }
  
  spec fn correct_solution(n: int, m: int, k: int, lane: int, desk: int, side: char) -> bool
      recommends valid_input(n, m, k)
  {
      lane == (k - 1) / (2 * m) + 1 &&
      desk == (k - 1) % (2 * m) / 2 + 1 &&
      (side == 'L' <==> (k - 1) % (2 * m) % 2 == 0)
  }

vc-spec: |-
  fn solve(n: int, m: int, k: int) -> (result: (int, int, char))
      requires valid_input(n, m, k)
      ensures 
          valid_output(n, m, result.0, result.1, result.2) &&
          correct_solution(n, m, k, result.0, result.1, result.2)

vc-code: |-
  {
      assume(false);
      (0int, 0int, 'L')
  }

vc-postamble: |-

  }

  fn main() {}