vc-description: |-
  Given a single socket that can be extended using power strips, find the minimum number of power strips needed to have at least B empty sockets. Each power strip has A sockets and when plugged into an empty socket, it replaces that 1 socket with A sockets (net gain of A-1 sockets).

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(a: int, b: int) -> bool {
      a > 1 && b >= 0
  }

  spec fn sockets_after_strips(strips: int, a: int) -> int
      recommends a > 1 && strips >= 0
  {
      1 + strips * (a - 1)
  }

  spec fn ceiling_division(x: int, y: int) -> int
      recommends y > 0
  {
      if x % y == 0 {
          x / y
      } else if x >= 0 {
          x / y + 1
      } else {
          x / y
      }
  }

  spec fn min_strips_needed(a: int, b: int) -> int
      recommends valid_input(a, b)
  {
      if b <= 1 {
          0
      } else {
          ceiling_division(b - 1, a - 1)
      }
  }

  spec fn correct_result(a: int, b: int, result: int) -> bool
      recommends valid_input(a, b)
  {
      result >= 0 &&
      sockets_after_strips(result, a) >= b &&
      (result == 0 || sockets_after_strips(result - 1, a) < b)
  }

vc-helpers: |

vc-spec: |-
  fn solve(a: int, b: int) -> (result: int)
      requires valid_input(a, b)
      ensures correct_result(a, b, result)

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |2-

  }

  fn main() {}
