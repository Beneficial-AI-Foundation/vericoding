vc-description: |-
  Given a string of lowercase English letters, find the minimum number of character 
  changes needed to make all substrings distinct. If the string length exceeds 26,
  it's impossible since we only have 26 distinct lowercase letters available.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn valid_input(n: int, s: Seq<char>) -> bool {
      n == s.len() && n >= 1
  }
  
  spec fn count_distinct_chars(s: Seq<char>) -> int {
      s.to_set().len() as int
  }

vc-spec: |-
  fn solve(n: usize, s: Seq<char>) -> (result: i32)
      requires 
          valid_input(n as int, s)
      ensures 
          n > 26 ==> result == -1,
          n <= 26 ==> result >= 0 && result < n as i32,
          n <= 26 ==> result == s.len() as i32 - count_distinct_chars(s)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}