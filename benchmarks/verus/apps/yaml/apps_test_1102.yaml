vc-description: |-
  Given n cities in a row, Limak lives in city a and uses a Bear Criminal Detector (BCD) 
  that reports total criminals at each distance. He can only catch criminals where he can 
  definitively determine their presence: at distance d with 1 city and 1 criminal reported, 
  or at distance d with 2 cities and 2 criminals reported. Return total criminals caught.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(n: int, a: int, x: Seq<int>) -> bool {
      n > 0 && 1 <= a <= n && x.len() == n && 
      forall|i: int| 0 <= i < n ==> (x[i] == 0 || x[i] == 1)
  }

  spec fn sum_criminals_caught(n: int, a_idx: int, x: Seq<int>, distance: int) -> int
      decreases n + 1 - distance
  {
      if distance > n { 
          0
      } else {
          let le = a_idx - distance;
          let rg = a_idx + distance;
          let le_valid = le >= 0 && le < n;
          let rg_valid = rg >= 0 && rg < n;
          let current_caught = if !le_valid && !rg_valid {
              0
          } else if le_valid && !rg_valid {
              x[le]
          } else if !le_valid && rg_valid {
              x[rg]
          } else if le_valid && rg_valid && x[le] == 1 && x[rg] == 1 {
              2
          } else {
              0
          };
          if !le_valid && !rg_valid {
              current_caught
          } else {
              current_caught + sum_criminals_caught(n, a_idx, x, distance + 1)
          }
      }
  }

  spec fn total_criminals_caught(n: int, a: int, x: Seq<int>) -> int {
      x[a-1] + sum_criminals_caught(n, a-1, x, 1)
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: int, a: int, x: Seq<int>) -> (result: int)
      requires valid_input(n, a, x)
      ensures 
          result >= 0 &&
          result == total_criminals_caught(n, a, x)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}
