vc-description: |-
  Given N hamsters and K types of boxes with capacities, find which single box type
  to buy (and how many boxes) to transport the maximum number of hamsters.
  Each box must be completely filled.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(n: int, k: int, a: Seq<int>) -> bool {
      k > 0 && a.len() == k && (forall|i: int| 0 <= i < k ==> #[trigger] a[i] > 0) && n >= 0
  }

  spec fn hamsters_transported(n: int, capacity: int) -> int {
      if capacity > 0 {
          capacity * (n / capacity)
      } else {
          0
      }
  }

  spec fn optimal_solution(n: int, a: Seq<int>, box_type: int, num_boxes: int) -> bool {
      valid_input(n, a.len() as int, a) &&
      1 <= box_type <= a.len() &&
      num_boxes == n / a[box_type - 1] &&
      forall|i: int| 0 <= i < a.len() ==> #[trigger] hamsters_transported(n, a[box_type - 1]) >= #[trigger] hamsters_transported(n, a[i])
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: i32, k: i32, a: Seq<i32>) -> (result: (i32, i32))
      requires valid_input(n as int, k as int, a.map(|i, x: i32| x as int))
      ensures ({
          let (box_type, num_boxes) = result;
          1 <= box_type <= k &&
          num_boxes >= 0 &&
          optimal_solution(n as int, a.map(|i, x: i32| x as int), box_type as int, num_boxes as int)
      })

vc-code: |-
  {
      assume(false);
      (0, 0)
  }

vc-postamble: |2-

  }

  fn main() {}
