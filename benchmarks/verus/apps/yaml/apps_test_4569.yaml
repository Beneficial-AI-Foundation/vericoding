vc-description: |-
  Given today's weather from a 3-day repeating cycle (Sunny → Cloudy → Rainy → Sunny → ...), determine tomorrow's weather.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_weather(weather: Seq<char>) -> bool {
      weather == "Sunny"@ || weather == "Cloudy"@ || weather == "Rainy"@
  }

  spec fn trim_newline(input: Seq<char>) -> Seq<char> {
      if input.len() > 0 && input[input.len() as int - 1] == '\n' {
          input.subrange(0, input.len() as int - 1)
      } else {
          input
      }
  }

  spec fn next_weather(weather: Seq<char>) -> Seq<char>
      recommends valid_weather(weather)
  {
      if weather == "Sunny"@ { "Cloudy"@ }
      else if weather == "Cloudy"@ { "Rainy"@ }
      else { "Sunny"@ }
  }

vc-helpers: |

vc-spec: |-
  fn solve(input: String) -> (result: String)
      ensures ({
          let trimmed = trim_newline(input@);
          if valid_weather(trimmed) {
              result@ == next_weather(trimmed) + seq!['\n']
          } else {
              result@ == Seq::<char>::empty()
          }
      })

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}