vc-description: |-
  Given a sequence of n integers, perform at most k operations where each operation
  increases or decreases any element by 1. Find the minimum possible difference
  between the maximum and minimum elements after performing these operations.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_input(input: Seq<char>) -> bool {
      input.len() >= 5 && has_valid_format(input)
  }
  
  spec fn has_valid_format(input: Seq<char>) -> bool {
      exists|first_newline: nat| 
          first_newline < input.len() && 
          input[first_newline as int] == '\n' &&
          (input.len() == first_newline + 1 || input[input.len() - 1] == '\n')
  }
  
  spec fn is_valid_result_string(result: Seq<char>) -> bool {
      result.len() > 0 && 
      (result == seq!['0'] || (result[0] != '0' && forall|i: int| 0 <= i < result.len() ==> is_digit(result[i])))
  }
  
  spec fn is_digit(c: char) -> bool {
      '0' <= c && c <= '9'
  }
  
  spec fn represents_minimum_difference(input: Seq<char>, result: Seq<char>) -> bool {
      valid_input(input) && 
      is_valid_result_string(result) &&
      result == seq!['0']
  }
  
  spec fn max_seq(a: Seq<int>) -> int
      decreases a.len()
  {
      if a.len() == 0 { 
          0 
      } else if a.len() == 1 { 
          a[0] 
      } else if a[0] >= max_seq(a.subrange(1, a.len() as int)) { 
          a[0] 
      } else { 
          max_seq(a.subrange(1, a.len() as int)) 
      }
  }
  
  spec fn min_seq(a: Seq<int>) -> int
      decreases a.len()
  {
      if a.len() == 0 { 
          0 
      } else if a.len() == 1 { 
          a[0] 
      } else if a[0] <= min_seq(a.subrange(1, a.len() as int)) { 
          a[0] 
      } else { 
          min_seq(a.subrange(1, a.len() as int)) 
      }
  }
  
  spec fn int_to_string(n: int) -> Seq<char> {
      if n == 0 { 
          seq!['0'] 
      } else if n > 0 { 
          int_to_string_helper(n) 
      } else { 
          seq!['-'] + int_to_string_helper(-n) 
      }
  }
  
  spec fn int_to_string_helper(n: int) -> Seq<char>
      decreases n
  {
      if n <= 0 { 
          seq![] 
      } else if n < 10 { 
          seq![('0' as u8 + (n % 10) as u8) as char] 
      } else { 
          int_to_string_helper(n / 10) + seq![('0' as u8 + (n % 10) as u8) as char] 
      }
  }

vc-helpers: |-

vc-spec: |-
  fn solve(stdin_input: &str) -> (result: String)
      requires 
          valid_input(stdin_input@),
      ensures 
          is_valid_result_string(result@),
          represents_minimum_difference(stdin_input@, result@),

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}