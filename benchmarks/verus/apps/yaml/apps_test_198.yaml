vc-description: |-
  Given a positive integer n, cut a stick of length n into exactly 4 parts with positive integer lengths.
  Count the number of ways to do this such that the parts can form a rectangle (two pairs of equal lengths)
  but cannot form a square (all four lengths equal). Two cutting methods are distinct if the number of
  parts of any given length differs between them.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_rectangle_parts(a: int, b: int, n: int) -> bool {
      a > 0 && b > 0 && a != b && 2 * a + 2 * b == n
  }

  spec fn count_valid_rectangles(n: int) -> int
      recommends n > 0
  {
      if n % 2 == 1 { 0 }
      else if n % 4 == 2 { n / 4 }
      else { n / 4 - 1 }
  }

  spec fn valid_input(n: int) -> bool {
      n > 0
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: int) -> (result: int)
      requires valid_input(n)
      ensures 
          result == count_valid_rectangles(n) &&
          (n % 2 == 1 ==> result == 0) &&
          (n % 2 == 0 && n % 4 == 2 ==> result == n / 4) &&
          (n % 2 == 0 && n % 4 == 0 ==> result == n / 4 - 1)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}
