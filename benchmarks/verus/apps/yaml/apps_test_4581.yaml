vc-description: |-
  Calculate the price of a bowl of ramen based on selected toppings.
  Base price is 700 yen, each topping ('o') adds 100 yen.
  Input is a 3-character string with 'o' (included) or 'x' (not included).

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn valid_input(s: Seq<char>) -> bool {
      s.len() == 3 && forall|i: int| 0 <= i < s.len() ==> s[i] == 'o' || s[i] == 'x'
  }
  
  spec fn count_o(s: Seq<char>) -> int
      decreases s.len()
  {
      if s.len() == 0 {
          0int
      } else {
          (if s[0] == 'o' { 1int } else { 0int }) + count_o(s.subrange(1, s.len() as int))
      }
  }
  
  spec fn calculate_price(s: Seq<char>) -> int {
      count_o(s) * 100int + 700int
  }
  
  spec fn int_to_string_spec(n: int) -> Seq<char> {
      if n == 0 {
          seq!['0']
      } else {
          int_to_string_helper_spec(n, seq![])
      }
  }
  
  spec fn int_to_string_helper_spec(n: int, acc: Seq<char>) -> Seq<char>
      decreases n
  {
      if n == 0 {
          acc
      } else {
          int_to_string_helper_spec(n / 10, seq![((n % 10) + 48) as char] + acc)
      }
  }

vc-spec: |-
  fn solve(s: &str) -> (result: String)
      requires s.len() == 3

vc-code: |-
  {
      assume(false);
      String::new()
  }

vc-postamble: |-

  }

  fn main() {}