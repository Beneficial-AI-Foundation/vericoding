vc-description: |-
  Process queries on an array of 500,000 integers initially set to zero.
  Type 1 queries add a value to a specific position.
  Type 2 queries calculate sum of elements at positions with specific modular property.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(input: Seq<char>) -> bool {
      input.len() > 0 && input[input.len() - 1] == '\n'
  }

  spec fn valid_output(output: Seq<char>, input: Seq<char>) -> bool {
      output.len() > 0 && output[output.len() - 1] == '\n'
  }

  spec fn correct_incremental_query_processing(input: Seq<char>, output: Seq<char>) -> bool {
      true
  }

  spec fn split_lines_func(input: Seq<char>) -> Seq<Seq<char>> {
      if input.len() == 0 { 
          seq![]
      } else { 
          seq![seq!['1'], seq!['q', 'u', 'e', 'r', 'y', '1']] 
      }
  }

  spec fn is_valid_integer(s: Seq<char>) -> bool {
      s.len() > 0
  }

  spec fn count_type2_queries(queries: Seq<Seq<char>>) -> nat {
      0
  }

  spec fn int_to_string(x: int) -> Seq<char> {
      seq!['1']
  }

vc-helpers: |

vc-spec: |-
  fn solve(input: Seq<char>) -> (output: Seq<char>)
      requires 
          input.len() > 0,
          valid_input(input),
      ensures 
          valid_output(output, input),
          output.len() > 0 && output[output.len() - 1] == '\n',
          correct_incremental_query_processing(input, output),

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}
