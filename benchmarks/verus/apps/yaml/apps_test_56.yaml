vc-description: |-
  Simulate pouring champagne into a pyramid of glasses for t seconds.
  The pyramid has n levels where level i has i glasses (1-indexed).
  Each second, 1 unit is poured into the top glass. Each glass has capacity 1.
  When a glass overflows, excess champagne splits equally to the two glasses below.
  Count the number of completely full glasses after t seconds.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(n: int, t: int) -> bool {
      1 <= n <= 10 && 0 <= t <= 10000
  }

  spec fn total_glasses(n: int) -> int {
      n * (n + 1) / 2
  }

  spec fn valid_result(result: int, n: int, t: int) -> bool {
      result >= 0 && result <= total_glasses(n)
  }

  spec fn correct_for_edge_cases(result: int, n: int, t: int) -> bool {
      (t == 0 ==> result == 0) &&
      (n == 1 && t >= 1 ==> result == 1) &&
      (n == 1 && t == 0 ==> result == 0) &&
      (t >= 1 && n > 1 ==> result >= 1)
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: int, t: int) -> (result: int)
  requires 
      valid_input(n, t)
  ensures 
      valid_result(result, n, t),
      correct_for_edge_cases(result, n, t)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}
