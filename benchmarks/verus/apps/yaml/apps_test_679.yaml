vc-description: |-
  Given a string representing a row of cells with flowers (A, B, C) or empty cells (.),
  determine if it's possible for at least one cell to contain all three colors after
  some flowers wither and spread petals to adjacent cells.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(s: Seq<char>) -> bool {
      s.len() >= 0 && forall|i: int| 0 <= i < s.len() ==> s[i] == 'A' || s[i] == 'B' || s[i] == 'C' || s[i] == '.'
  }

  spec fn has_all_three_colors(s: Seq<char>, start: int) -> bool
      recommends 0 <= start <= s.len() - 3
  {
      s.subrange(start, start + 3).contains('A') && 
      s.subrange(start, start + 3).contains('B') && 
      s.subrange(start, start + 3).contains('C')
  }

  spec fn possible_to_get_all_colors(s: Seq<char>) -> bool {
      s.len() >= 3 && exists|i: int| 0 <= i <= s.len() - 3 && has_all_three_colors(s, i)
  }

vc-helpers: |

vc-spec: |-
  fn solve(s: &[char]) -> (result: Vec<char>)
      requires 
          s.len() >= 0 && forall|i: int| 0 <= i < s.len() ==> s[i] == 'A' || s[i] == 'B' || s[i] == 'C' || s[i] == '.'
      ensures 
          result@ == seq!['Y', 'e', 's'] ==> possible_to_get_all_colors(s@),
          result@ == seq!['N', 'o'] ==> !possible_to_get_all_colors(s@),
          result@ == seq!['Y', 'e', 's'] || result@ == seq!['N', 'o']

vc-code: |-
  {
      /* impl-start */
      assume(false);
      vec!['N', 'o']
      /* impl-end */
  }

vc-postamble: |2-

  }

  fn main() {}
