vc-description: |-
  Given a string of stones ('B' for black, 'W' for white), find the minimum number 
  of stones to place at either end to make all stones the same color. When placing 
  a stone, all stones of opposite color between the new stone and the nearest 
  existing stone of the same color are flipped.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(s: Seq<char>) -> bool {
      s.len() > 0 && forall|i: int| 0 <= i < s.len() ==> s[i] == 'B' || s[i] == 'W'
  }

  spec fn count_segments(s: Seq<char>) -> int
      decreases s.len()
  {
      if s.len() <= 1 {
          1int
      } else {
          count_segments(s.subrange(0, s.len() - 1)) + 
          (if s[s.len() - 1] != s[s.len() - 2] { 1int } else { 0int })
      }
  }

vc-helpers: |

vc-spec: |-
  fn solve(s: Vec<char>) -> (result: i8)
      requires 
          valid_input(s@),
      ensures 
          result >= 0,
          result as int == count_segments(s@) - 1,
          result as int <= s.len() - 1,

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |2-

  }

  fn main() {}