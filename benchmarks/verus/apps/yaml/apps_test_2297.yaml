vc-description: |-
  Given an array where element a[i] = i * (-1)^i (so a[1] = -1, a[2] = 2, a[3] = -3, etc.),
  answer queries asking for the sum of elements from index l to r inclusive.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_query(query: (int, int)) -> bool {
      query.0 >= 1 && query.0 <= query.1
  }

  spec fn valid_input(queries: Seq<(int, int)>) -> bool {
      forall|i: int| 0 <= i < queries.len() ==> valid_query(queries[i])
  }

  spec fn array_element(i: int) -> int
      recommends i >= 1
  {
      i * (if i % 2 == 1 { -1 } else { 1 })
  }

  spec fn range_sum(l: int, r: int) -> int
      recommends l >= 1
      decreases r - l + 1
  {
      if l > r { 0 } else { array_element(l) + range_sum(l + 1, r) }
  }

  spec fn prefix_sum(k: int) -> int {
      if k % 2 == 0 { k / 2 } else { -(k + 1) / 2 }
  }

  spec fn correct_result(queries: Seq<(int, int)>, results: Seq<int>) -> bool
      recommends valid_input(queries)
  {
      results.len() == queries.len() &&
      forall|i: int| 0 <= i < queries.len() ==> results[i] == prefix_sum(queries[i].1) - prefix_sum(queries[i].0 - 1)
  }

vc-helpers: |

vc-spec: |-
  fn solve(queries: Seq<(int, int)>) -> (results: Seq<int>)
      requires valid_input(queries)
      ensures correct_result(queries, results)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}
