vc-description: |-
  Given n columns and m squares appearing in specified columns, calculate points earned.
  Each square stacks in its column. When all columns have at least one square,
  the bottom row is removed (earning 1 point) and squares drop down.
  Return total points earned.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(n: int, m: int, squares: Seq<int>) -> bool {
      n >= 1 && n <= 1000 &&
      m >= 1 && m <= 1000 &&
      squares.len() == m &&
      forall|i: int| 0 <= i < squares.len() ==> 1 <= squares[i] <= n
  }

  spec fn count_occurrences(s: Seq<int>, value: int) -> int
      decreases s.len()
  {
      if s.len() == 0 {
          0
      } else {
          (if s[0] == value { 1nat } else { 0nat }) + count_occurrences(s.subrange(1, s.len() as int), value)
      }
  }

  spec fn correct_result(n: int, squares: Seq<int>, result: int) -> bool {
      0 <= result <= squares.len() &&
      (forall|col: int| 1 <= col <= n ==> result <= count_occurrences(squares, col)) &&
      (exists|col: int| 1 <= col <= n && result == count_occurrences(squares, col))
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: int, m: int, squares: Seq<int>) -> (result: int)
      requires valid_input(n, m, squares)
      ensures correct_result(n, squares, result)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}
