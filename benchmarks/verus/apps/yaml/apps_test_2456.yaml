vc-description: |-
  Given integers n and r, determine the number of distinct shapes that can be formed
  by painting n consecutive days on calendars where a week can have k days (1 ≤ k ≤ r).
  Days are arranged left-to-right in rows, wrapping to the next row when reaching 
  the end of a week. All painted cells must be connected by sides. Two shapes are 
  considered the same if one can be moved to exactly overlap the other using only 
  parallel translations.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_input(n: int, r: int) -> bool {
      n >= 1 && r >= 1
  }
  
  spec fn expected_result(n: int, r: int) -> int {
      if valid_input(n, r) {
          let k = if r < n - 1 { r } else { n - 1 };
          k * (k + 1) / 2 + if r >= n { 1int } else { 0int }
      } else {
          0int
      }
  }

  fn solve_shapes(n: int, r: int) -> (result: int)
      requires valid_input(n, r)
      ensures result == expected_result(n, r)

vc-helpers: |-

vc-spec: |-

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}