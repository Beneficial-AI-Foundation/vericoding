vc-description: |-
  Given a positive integer n, construct a string of length n using only characters 'a', 'b', and 'c' such that:
  1. The string contains no palindromic substrings of length 3
  2. The number of 'c' characters is minimized

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(n: int) -> bool {
    n >= 1
  }

  spec fn valid_output(s: Seq<char>, n: int) -> bool {
    s.len() == n &&
    (forall|i: int| 0 <= i < s.len() ==> s[i] == 'a' || s[i] == 'b' || s[i] == 'c') &&
    (forall|i: int| 0 <= i <= s.len() - 3 ==> !(s[i] == s[i+2]))
  }

  spec fn minimal_c_usage(s: Seq<char>) -> bool {
    forall|i: int| 0 <= i < s.len() ==> s[i] == 'a' || s[i] == 'b'
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: int) -> (result: Seq<char>)
    requires 
      valid_input(n)
    ensures 
      valid_output(result, n) &&
      minimal_c_usage(result)

vc-code: |-
  {
    assume(false);
    unreached()
  }

vc-postamble: |2-

  }

  fn main() {}
