vc-description: |-
  Given an odd integer n (3 ≤ n ≤ 101), create an n×n matrix representing a crystal with a diamond pattern.
  Use 'D' for diamond cells and '*' for all other cells.
  The diamond pattern forms a symmetric diamond shape where the top half starts with 1 'D' and increases by 2 'D's per row
  until the middle row has n 'D's, then the bottom half decreases symmetrically.
  All 'D's in each row are centered with '*' characters filling remaining positions.

  /* First half (including middle): rows 0 to magic */

  /* Second half: rows magic+1 to n-1 */

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(n: int) -> bool {
      n >= 3 && n <= 101 && n % 2 == 1
  }

  spec fn valid_result(result: Seq<String>, n: int) -> bool {
      result.len() == n &&
      forall|i: int| 0 <= i < result.len() ==> #[trigger] result[i]@.len() == n
  }

  spec fn repeat_char(c: char, count: int) -> Seq<char>
      decreases count
  {
      if count <= 0 { Seq::empty() }
      else { repeat_char(c, count - 1).push(c) }
  }

  spec fn correct_diamond_pattern(result: Seq<String>, n: int) -> bool {
      result.len() == n ==> {
          let magic = (n - 1) / 2;
          
          (forall|i: int| 0 <= i <= magic && i < result.len() ==> {
              let stars = magic - i;
              let diamonds = n - 2 * stars;
              #[trigger] result[i]@ == repeat_char('*', stars) + repeat_char('D', diamonds) + repeat_char('*', stars)
          }) &&
          
          (forall|i: int| magic + 1 <= i < n && i < result.len() ==> {
              let u = i - magic;
              let stars = u;
              let diamonds = n - 2 * stars;
              #[trigger] result[i]@ == repeat_char('*', stars) + repeat_char('D', diamonds) + repeat_char('*', stars)
          })
      }
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: usize) -> (result: Vec<String>)
      requires 
          valid_input(n as int)
      ensures 
          valid_result(result@, n as int),
          correct_diamond_pattern(result@, n as int)

vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }

vc-postamble: |2-

  }

  fn main() {}
