vc-description: |-
  Check if a string is an "s-palindrome" - meaning it is symmetric when mirrored horizontally about its center.
  Some letters are symmetric: A, H, I, M, O, o, T, U, V, v, W, w, X, x, Y
  Some letters are mirror pairs: (p,q) and (b,d)
  All other letters cannot form valid s-palindromes

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn is_s_palindrome(s: Seq<char>) -> bool {
      let pal = seq!['A', 'H', 'I', 'M', 'O', 'o', 'T', 'U', 'V', 'v', 'W', 'w', 'X', 'x', 'Y'];
      
      forall|i: int| #![trigger s[i]] 0 <= i < s.len() ==> {
          let j = s.len() - 1 - i;
          if i >= j {
              true
          } else {
              if s[i] == s[j] {
                  pal.contains(s[i])
              } else {
                  (s[i] == 'p' && s[j] == 'q') || (s[i] == 'q' && s[j] == 'p') ||
                  (s[i] == 'b' && s[j] == 'd') || (s[i] == 'd' && s[j] == 'b')
              }
          }
      }
  }

vc-helpers: |

vc-spec: |-
  fn solve(s: &str) -> (result: String)
      requires
          s@.len() >= 1,
      ensures
          result@ == seq!['T', 'A', 'K'] || result@ == seq!['N', 'I', 'E'],
          (result@ == seq!['T', 'A', 'K']) <==> is_s_palindrome(s@),

vc-code: |-
  {
      assume(false);
      "NIE".to_string()
  }

vc-postamble: |2-

  }

  fn main() {}
