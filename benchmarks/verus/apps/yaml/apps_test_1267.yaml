vc-description: |-
  Given n participants with integer scores, determine the number of ways to award diplomas such that:
  1. At least one participant receives a diploma
  2. No participant with score 0 receives a diploma  
  3. If a participant with score X receives a diploma, then all participants with score >= X must also receive diplomas

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(n: int, scores: Seq<int>) -> bool {
      n == scores.len() && n >= 1 && exists|i: int| 0 <= i < scores.len() && scores[i] != 0
  }

  spec fn unique_non_zero_scores(scores: Seq<int>) -> Set<int> {
      Set::new(|x: int| exists|i: int| 0 <= i < scores.len() && scores[i] != 0 && scores[i] == x)
  }

  spec fn valid_result(scores: Seq<int>, result: int) -> bool {
      result >= 1 && 
      result == unique_non_zero_scores(scores).len() && 
      result <= scores.len()
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: i8, scores: Vec<i8>) -> (result: i8)
      requires valid_input(n as int, scores@.map(|i, x| x as int))
      ensures valid_result(scores@.map(|i, x| x as int), result as int)

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |2-

  }

  fn main() {}