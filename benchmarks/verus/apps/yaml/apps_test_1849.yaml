vc-description: |-
  Given an integer n, consider all integers from 0 to 10^n - 1, each padded with leading zeros to exactly n digits.
  A "block" is a maximal consecutive sequence of identical digits.
  For each length i from 1 to n, count the total number of blocks of length i across all these padded numbers.
  Output n integers modulo 998244353, where the i-th integer is the number of blocks of length i.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec const MOD: int = 998244353int;
  
  spec fn valid_input(n: int) -> bool
  {
    n >= 1
  }
  
  spec fn pow(base: int, exp: int, modulus: int) -> int
    decreases exp
  {
    if exp <= 0 { 1int }
    else { (base * pow(base, exp - 1, modulus)) % modulus }
  }
  
  spec fn block_count_formula(n: int, i: int) -> int
    recommends n >= 1 && 1 <= i <= n
  {
    if i == n { 10int }
    else { 
      ((2int * 9int * pow(10int, n - i - 1, MOD) * 10int) + 
       (if i < n - 1 { ((n - 1 - i) * 9int * 9int * pow(10int, n - i - 2, MOD) * 10int) } else { 0int })) % MOD
    }
  }
  
  spec fn valid_result(result: Seq<int>, n: int) -> bool
    recommends n >= 1
  {
    result.len() == n &&
    (forall|k: int| 0 <= k < n ==> #[trigger] result[k] >= 0 && #[trigger] result[k] < MOD) &&
    (n >= 1 ==> result[n-1] == 10int) &&
    (forall|i: int| 0 <= i < n-1 ==> #[trigger] result[i] == block_count_formula(n, i+1))
  }

vc-helpers: |-

vc-spec: |-
  fn solve(n: i8) -> (result: Vec<i8>)
    requires valid_input(n as int)
    ensures valid_result(result@.map(|_index: int, x: i8| x as int), n as int)

vc-code: |-
  {
    assume(false);
    unreached()
  }

vc-postamble: |-

  }

  fn main() {}