vc-description: |-
  Given an nÃ—m grid representing an ice cave level, determine if you can move from starting position (r1, c1) to target position (r2, c2) and fall through the target cell.
  Grid representation: '.' = intact ice, 'X' = cracked ice
  Movement rules: Move to side-adjacent cells only, cannot move to same cell, moving to intact ice cracks it, moving to cracked ice causes fall through
  Goal: Reach (r2, c2) when it's cracked ice and fall through it
  Starting cell (r1, c1) is guaranteed to contain 'X' in the input

vc-preamble: |-
  use vstd::prelude::*;
  use vstd::string::*;

  verus! {

  spec fn valid_input_format(stdin_input: &str) -> bool {
      stdin_input.len() > 0 &&
      stdin_input.len() >= 7 &&
      contains_required_newlines(stdin_input) &&
      ends_with_newline_or_can_append(stdin_input) &&
      has_valid_structure(stdin_input) &&
      all_grid_characters_valid(stdin_input) &&
      has_exactly_required_lines(stdin_input)
  }
  
  spec fn valid_grid_bounds(stdin_input: &str) -> bool
      recommends stdin_input.len() > 0
  {
      let parsed = parse_dimensions(stdin_input);
      parsed.0 >= 1 && parsed.0 <= 500 && parsed.1 >= 1 && parsed.1 <= 500
  }
  
  spec fn valid_coordinates(stdin_input: &str) -> bool
      recommends stdin_input.len() > 0
  {
      let dims = parse_dimensions(stdin_input);
      let coords = parse_coordinates(stdin_input);
      coords.0 >= 1 && coords.0 <= dims.0 && coords.1 >= 1 && coords.1 <= dims.1 &&
      coords.2 >= 1 && coords.2 <= dims.0 && coords.3 >= 1 && coords.3 <= dims.1
  }
  
  spec fn starting_cell_is_cracked(stdin_input: &str) -> bool
      recommends stdin_input.len() > 0
  {
      let grid = parse_grid(stdin_input);
      let coords = parse_coordinates(stdin_input);
      valid_grid_index(&grid, coords.0-1, coords.1-1) &&
      grid[coords.0-1][coords.1-1] == 'X'
  }
  
  spec fn well_formed_input(stdin_input: &str) -> bool
      recommends stdin_input.len() > 0
  {
      valid_input_format(stdin_input) &&
      valid_grid_bounds(stdin_input) &&
      valid_coordinates(stdin_input) &&
      starting_cell_is_cracked(stdin_input) &&
      grid_contains_only_valid_chars(stdin_input) &&
      coordinates_within_bounds(stdin_input)
  }
  
  spec fn can_solve_ice_maze(stdin_input: &str) -> bool
      recommends stdin_input.len() > 0
  {
      let grid = parse_grid(stdin_input);
      let coords = parse_coordinates(stdin_input);
      let (r1, c1, r2, c2) = (coords.0-1, coords.1-1, coords.2-1, coords.3-1);
      let target_is_cracked = grid[r2][c2] == 'X';
      let surrounding_dots = count_surrounding_intact_ice(&grid, r2, c2);
  
      if target_is_cracked {
          if r1 == r2 && c1 == c2 {
              surrounding_dots >= 1
          } else {
              can_reach_target_with_bfs(&grid, r1, c1, r2, c2)
          }
      } else {
          if surrounding_dots >= 2 {
              can_reach_target_with_bfs(&grid, r1, c1, r2, c2)
          } else if surrounding_dots == 0 {
              false
          } else {
              is_adjacent(r1+1, c1+1, r2+1, c2+1)
          }
      }
  }
  
  spec fn parse_dimensions(stdin_input: &str) -> (int, int) {
      (1, 1)
  }
  
  spec fn parse_grid(stdin_input: &str) -> Seq<Seq<char>> {
      seq![seq!['X']]
  }
  
  spec fn parse_coordinates(stdin_input: &str) -> (int, int, int, int) {
      (1, 1, 1, 1)
  }
  
  spec fn valid_grid_index(grid: &Seq<Seq<char>>, r: int, c: int) -> bool {
      0 <= r < grid.len() && 0 <= c < grid[r].len()
  }

  /* Helper functions referenced but not defined */
  spec fn contains_required_newlines(stdin_input: &str) -> bool { true }
  spec fn ends_with_newline_or_can_append(stdin_input: &str) -> bool { true }
  spec fn has_valid_structure(stdin_input: &str) -> bool { true }
  spec fn all_grid_characters_valid(stdin_input: &str) -> bool { true }
  spec fn has_exactly_required_lines(stdin_input: &str) -> bool { true }
  spec fn grid_contains_only_valid_chars(stdin_input: &str) -> bool { true }
  spec fn coordinates_within_bounds(stdin_input: &str) -> bool { true }
  spec fn count_surrounding_intact_ice(grid: &Seq<Seq<char>>, r: int, c: int) -> int { 0 }
  spec fn can_reach_target_with_bfs(grid: &Seq<Seq<char>>, r1: int, c1: int, r2: int, c2: int) -> bool { true }
  spec fn is_adjacent(r1: int, c1: int, r2: int, c2: int) -> bool { true }

vc-helpers: |-

vc-spec: |-
  fn solve(stdin_input: &str) -> (result: String)
      requires 
          stdin_input.len() > 0,
          valid_input_format(stdin_input),
          valid_grid_bounds(stdin_input),
          valid_coordinates(stdin_input),
          starting_cell_is_cracked(stdin_input),
          well_formed_input(stdin_input)
      ensures 
          result.view() == "YES\n" || result.view() == "NO\n",
          result.view().len() > 0,
          (result.view() == "YES\n") <==> can_solve_ice_maze(stdin_input)

vc-code: |-
  {
      assume(false);
      "NO\n".to_string()
  }

vc-postamble: |-

  }

  fn main() {}