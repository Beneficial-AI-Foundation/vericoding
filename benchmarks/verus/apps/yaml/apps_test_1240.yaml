vc-description: |-
  Given n columns of soldiers where column i has l_i soldiers starting with left leg 
  and r_i soldiers starting with right leg, find which column to swap (change all 
  left-leg soldiers to right-leg and vice versa) to maximize the beauty of the parade.
  Beauty is defined as |L - R| where L is total left-leg soldiers and R is total 
  right-leg soldiers across all columns. You can swap at most one column. 
  Output the 1-indexed column number to swap, or 0 if no swap improves the current beauty.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(columns: Seq<(int, int)>) -> bool {
      forall|i: int| 0 <= i < columns.len() ==> columns[i].0 > 0 && columns[i].1 > 0
  }

  spec fn abs(x: int) -> int {
      if x >= 0 { x } else { -x }
  }

  spec fn sum_left(columns: Seq<(int, int)>) -> int
      decreases columns.len()
  {
      if columns.len() == 0 {
          0
      } else {
          columns[0].0 + sum_left(columns.drop_first())
      }
  }

  spec fn sum_right(columns: Seq<(int, int)>) -> int
      decreases columns.len()
  {
      if columns.len() == 0 {
          0
      } else {
          columns[0].1 + sum_right(columns.drop_first())
      }
  }

vc-helpers: |

vc-spec: |-
  fn solve(columns: Vec<(i8, i8)>) -> (result: i8)
      requires valid_input(columns@.map(|i: int, pair: (i8, i8)| (pair.0 as int, pair.1 as int)))
      ensures 0 <= result as int <= columns@.len()

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}