vc-description: |-
  There are n+1 people (Dima and n friends) standing in a circle. Each person shows 1-5 fingers.
  Starting from Dima, they count around the circle a total number equal to the sum of all fingers.
  The person where counting stops must clean the apartment.
  Given the fingers shown by Dima's n friends, determine how many different ways Dima can show
  his fingers (1-5) such that he does NOT have to clean the apartment.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(n: int, friends: Seq<int>) -> bool {
    n >= 1 && friends.len() == n && forall|i: int| 0 <= i < friends.len() ==> #[trigger] friends[i] >= 1 && #[trigger] friends[i] <= 5
  }

  spec fn sum_sequence(s: Seq<int>) -> int
    decreases s.len()
  {
    if s.len() == 0 { 0 } else { s[0] + sum_sequence(s.subrange(1, s.len() as int)) }
  }

  spec fn dima_cleans(n: int, friends: Seq<int>, dima_fingers: int) -> bool {
    &&& valid_input(n, friends)
    &&& 1 <= dima_fingers <= 5
    &&& {
      let total_sum = sum_sequence(friends) + dima_fingers;
      let total_people = n + 1;
      total_sum % total_people == 1
    }
  }

  spec fn count_valid_choices(n: int, friends: Seq<int>) -> int {
    if valid_input(n, friends) {
      count_valid_choices_helper(n, friends, 1)
    } else {
      0
    }
  }

  spec fn count_valid_choices_helper(n: int, friends: Seq<int>, finger_count: int) -> int
    decreases 6 - finger_count
  {
    if !(valid_input(n, friends) && 1 <= finger_count <= 6) {
      0
    } else if finger_count > 5 {
      0
    } else if !dima_cleans(n, friends, finger_count) {
      1 + count_valid_choices_helper(n, friends, finger_count + 1)
    } else {
      count_valid_choices_helper(n, friends, finger_count + 1)
    }
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: int, friends: Seq<int>) -> (result: int)
    requires 
      valid_input(n, friends)
    ensures 
      0 <= result <= 5,
      result == count_valid_choices(n, friends)

vc-code: |-
  {
    assume(false);
    unreached()
  }

vc-postamble: |2-

  }

  fn main() {}
