vc-description: |-
  Given two strings S and T as space-separated input, concatenate T and S (in that order) and output the result.
  Input format: "S T" where S and T contain only lowercase English letters.
  Output format: "TS\n" (T concatenated with S followed by newline).

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(input: Seq<char>) -> bool {
      input.len() > 2 &&
      (exists|i: int| 0 < i < input.len() && input[i] == ' ') &&
      (forall|i: int| 0 <= i < input.len() ==> (input[i] == ' ' || input[i] == '\n' || ('a' <= input[i] <= 'z'))) &&
      (exists|i: int| 0 < i < input.len() && input[i] == ' ' && 
       (forall|j: int| 0 <= j < i ==> input[j] != ' ' && input[j] != '\n') &&
       (forall|j: int| i+1 <= j < input.len() ==> input[j] != ' ' && input[j] != '\n'))
  }

  spec fn valid_output(output: Seq<char>) -> bool {
      output.len() > 0 &&
      output[output.len() as int - 1] == '\n' &&
      (forall|i: int| 0 <= i < output.len() - 1 ==> ('a' <= output[i] <= 'z'))
  }

  spec fn extract_strings(input: Seq<char>) -> (Seq<char>, Seq<char>)
      recommends valid_input(input)
  {
      let space_pos = choose|space_pos: int| 0 < space_pos < input.len() && input[space_pos] == ' ' &&
                         (forall|j: int| 0 <= j < space_pos ==> input[j] != ' ') &&
                         (forall|j: int| space_pos+1 <= j < input.len() ==> input[j] != ' ' && input[j] != '\n');
      let s = input.subrange(0, space_pos);
      let t = if input[input.len() as int - 1] == '\n' { 
                  input.subrange(space_pos+1, input.len() as int - 1) 
              } else { 
                  input.subrange(space_pos+1, input.len() as int)
              };
      (s, t)
  }

  spec fn correct_concatenation(input: Seq<char>, output: Seq<char>) -> bool
      recommends valid_input(input)
  {
      let (s, t) = extract_strings(input);
      output == t.add(s).push('\n')
  }

vc-helpers: |

vc-spec: |-
  fn solve(input: Seq<char>) -> (output: Seq<char>)
      requires 
          valid_input(input),
      ensures 
          valid_output(output),
          correct_concatenation(input, output),

vc-code: |-
  {
      /* impl-start */
      assume(false);
      unreached()
      /* impl-end */
  }

vc-postamble: |2-

  }

  fn main() {}
