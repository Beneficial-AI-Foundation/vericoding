vc-description: |-
  Given n buyers and cost p per apple, determine total money seller should receive.
  Each buyer purchased exactly half the apples available at their turn.
  If apples were odd, buyer received additional half apple as gift.
  Seller started with some positive number of apples and ended with zero apples.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(n: int, p: int, buyers: Seq<&str>) -> bool {
      1 <= n <= 40 &&
      2 <= p <= 1000 &&
      p % 2 == 0 &&
      buyers.len() == n &&
      forall|i: int| 0 <= i < buyers.len() ==> buyers[i] == "half" || buyers[i] == "halfplus"
  }

  spec fn compute_total_payment(buyers: Seq<&str>, p: int) -> int
      recommends p >= 0,
                  p % 2 == 0,
                  forall|i: int| 0 <= i < buyers.len() ==> buyers[i] == "half" || buyers[i] == "halfplus"
  {
      compute_payment_backward(buyers, p, buyers.len() - 1, 0)
  }

  spec fn compute_payment_backward(buyers: Seq<&str>, p: int, current_index: int, current_apples: int) -> int
      recommends p >= 0,
                  p % 2 == 0,
                  -1 <= current_index < buyers.len(),
                  current_apples >= 0,
                  forall|i: int| 0 <= i < buyers.len() ==> buyers[i] == "half" || buyers[i] == "halfplus"
      decreases current_index + 1
  {
      if current_index < 0 {
          0
      } else {
          let new_apples = if buyers[current_index] == "halfplus" { 
                              current_apples * 2 + 1
                           } else { 
                              current_apples * 2
                           };
          let payment = if buyers[current_index] == "halfplus" { 
                            (new_apples / 2) * p
                         } else { 
                            current_apples * p
                         };
          payment + compute_payment_backward(buyers, p, current_index - 1, new_apples)
      }
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: i8, p: i8, buyers: Vec<&str>) -> (result: i8)
      requires valid_input(n as int, p as int, buyers@)
      ensures result >= 0,
              result as int == compute_total_payment(buyers@, p as int)

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |2-

  }

  fn main() {}