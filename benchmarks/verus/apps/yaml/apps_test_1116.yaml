vc-description: |-
  Given three integers r, b, and k, determine if it's possible to paint planks on a fence
  according to specific rules without creating k consecutive planks of the same color.
  Paint plank i red if i is divisible by r, blue if divisible by b, either color if 
  divisible by both, and don't paint otherwise. Return "OBEY" if possible to avoid
  k consecutive same-color planks, "REBEL" if unavoidable.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn gcd(a: int, b: int) -> int
    decreases b when a > 0 && b >= 0
  {
    if b == 0 { a } else { gcd(b, a % b) }
  }

  spec fn valid_input(r: int, b: int, k: int) -> bool {
    r > 0 && b > 0 && k > 0
  }

  spec fn max_consecutive_same_color(r: int, b: int) -> int {
    let a = if r <= b { r } else { b };
    let b_val = if r <= b { b } else { r };
    let n = gcd(a, b_val);
    -((n - b_val) / a)
  }

  spec fn can_avoid_consecutive(r: int, b: int, k: int) -> bool {
    valid_input(r, b, k) && max_consecutive_same_color(r, b) < k
  }

vc-helpers: |

vc-spec: |-
  fn solve(r: i8, b: i8, k: i8) -> (result: String)
    requires valid_input(r as int, b as int, k as int)
    ensures result@ == (if can_avoid_consecutive(r as int, b as int, k as int) { "OBEY"@ } else { "REBEL"@ })

vc-code: |-
  {
    assume(false);
    unreached()
  }

vc-postamble: |2-

  }

  fn main() {}