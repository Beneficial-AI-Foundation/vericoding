vc-description: |-
  Given n words forming a message, determine if a received text could have been encoded by:
  1. Creating coded string with "<3" before each word and after last word
  2. Inserting additional characters anywhere in the coded string
  Check if received message contains expected coded string as subsequence.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn parse_int_helper(s: Seq<char>, index: nat, acc: nat) -> nat
      decreases s.len() - index
  {
      if index >= s.len() {
          acc
      } else if '0' <= s[index as int] && s[index as int] <= '9' {
          parse_int_helper(s, index + 1, acc * 10 + (s[index as int] as nat - '0' as nat))
      } else {
          acc
      }
  }

  spec fn valid_input(input: Seq<Seq<char>>) -> bool {
      input.len() >= 2 && {
          let n = parse_int_helper(input[0], 0, 0);
          n >= 1 && n + 1 < input.len()
      }
  }
  
  spec fn build_expected_pattern(words: Seq<Seq<char>>) -> Seq<char> 
      decreases words.len()
  {
      if words.len() == 0 { 
          seq!['<', '3']
      } else { 
          seq!['<', '3'] + words[0] + build_expected_pattern(words.subrange(1, words.len() as int))
      }
  }
  
  spec fn is_subsequence(pattern: Seq<char>, text: Seq<char>) -> bool {
      is_subsequence_helper(pattern, text, 0, 0)
  }
  
  spec fn is_subsequence_helper(
      pattern: Seq<char>, 
      text: Seq<char>, 
      pattern_index: nat, 
      text_index: nat
  ) -> bool
      requires pattern_index <= pattern.len()
      requires text_index <= text.len()
      decreases text.len() - text_index
  {
      if pattern_index == pattern.len() {
          true
      } else if text_index == text.len() {
          false
      } else if pattern[pattern_index as int] == text[text_index as int] {
          is_subsequence_helper(pattern, text, pattern_index + 1, text_index + 1)
      } else {
          is_subsequence_helper(pattern, text, pattern_index, text_index + 1)
      }
  }

vc-spec: |-
  fn solve(input: Seq<Seq<char>>) -> (result: Seq<char>)
      requires input.len() >= 2
      requires valid_input(input)
      ensures result == seq!['y', 'e', 's'] || result == seq!['n', 'o']
      ensures result == seq!['y', 'e', 's'] <==> {
          let valid = valid_input(input);
          let n = parse_int_helper(input[0], 0, 0);
          let expected = build_expected_pattern(input.subrange(1, n + 1));
          let message = input[n + 1];
          valid && is_subsequence(expected, message)
      }

vc-code: |-
  {
      // impl-start
      assume(false);
      seq!['n', 'o']
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {}