vc-description: |-
  Given n rooms in a row (some occupied, some free) and k cows, find k+1 free rooms to book 
  such that when one room is assigned to Farmer John and k rooms to his cows, the maximum 
  distance from Farmer John's room to any cow's room is minimized.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn is_valid_placement(rooms: Seq<char>, k: int, placement: Seq<int>) -> bool {
      placement.len() == k + 1 &&
      (forall|i: int| 0 <= i < placement.len() ==> 0 <= #[trigger] placement[i] < rooms.len()) &&
      (forall|i: int| 0 <= i < placement.len() ==> #[trigger] rooms[placement[i]] == '0') &&
      (forall|i: int, j: int| 0 <= i < j < placement.len() ==> #[trigger] placement[i] != #[trigger] placement[j]) &&
      (forall|i: int| 0 <= i < placement.len() - 1 ==> #[trigger] placement[i] < placement[i+1])
  }

  spec fn optimal_max_distance(placement: Seq<int>) -> int {
      if placement.len() == 0 {
          0
      } else {
          placement[0]
      }
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: usize, k: usize, rooms: Seq<char>) -> (result: usize)
      requires 
          n > 0 &&
          k > 0 &&
          k < n &&
          rooms.len() == n &&
          (forall|i: int| 0 <= i < n ==> #[trigger] rooms[i] == '0' || #[trigger] rooms[i] == '1') &&
          Set::new(|i: int| 0 <= i < n && rooms[i] == '0').len() >= k + 1
      ensures 
          result >= 0

vc-code: |-
  {
      assume(false);
      0
  }

vc-postamble: |2-

  }

  fn main() {}
