vc-description: |-
  Given n rooms in a row (some occupied, some free) and k cows, find k+1 free rooms to book 
  such that when one room is assigned to Farmer John and k rooms to his cows, the maximum 
  distance from Farmer John's room to any cow's room is minimized.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn is_valid_placement(rooms: Seq<char>, k: int, placement: Seq<int>) -> bool {
      placement.len() == k + 1 &&
      (forall|i: int| 0 <= i < placement.len() ==> 0 <= placement[i] < rooms.len()) &&
      (forall|i: int| 0 <= i < placement.len() ==> rooms[placement[i]] == '0') &&
      (forall|i: int, j: int| 0 <= i < j < placement.len() ==> placement[i] != placement[j]) &&
      (forall|i: int| 0 <= i < placement.len() - 1 ==> placement[i] < placement[i+1])
  }

vc-helpers: |-
  spec fn optimal_max_distance(placement: Seq<int>) -> int {
      /* TODO: Define optimal max distance calculation */
      0int
  }

  spec fn count_free_rooms(rooms: Seq<char>, n: int) -> int {
      /* Count of rooms with '0' */
      if n <= 0 { 0int } else {
          if rooms[n-1] == '0' { 1int + count_free_rooms(rooms, n-1) } else { count_free_rooms(rooms, n-1) }
      }
  }

vc-spec: |-
  fn solve(n: int, k: int, rooms: Seq<char>) -> (result: int)
      requires 
          n > 0 &&
          k > 0 &&
          k < n &&
          rooms.len() == n &&
          (forall|i: int| 0 <= i < n ==> rooms[i] == '0' || rooms[i] == '1') &&
          count_free_rooms(rooms, n) >= k + 1
      ensures 
          result >= 0 &&
          (exists|placement: Seq<int>| is_valid_placement(rooms, k, placement) && optimal_max_distance(placement) == result)

vc-code: |-
  {
      // impl-start
      assume(false);
      0int
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {}