vc-description: |-
  Schedule an optimal event with singer Devu and comedian Churu within a time limit.
  Devu must sing all n songs in order with 10-minute rest periods between songs.
  Churu tells 5-minute jokes during rest periods and any remaining time.
  Find the maximum number of jokes possible, or return -1 if impossible.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn sum_seq(s: Seq<int>) -> int
      decreases s.len()
  {
      if s.len() == 0 {
          0
      } else {
          s[0] + sum_seq(s.subrange(1, s.len() as int))
      }
  }

  spec fn valid_input(n: int, d: int, t: Seq<int>) -> bool {
      1 <= n <= 100 && 1 <= d <= 10000 &&
      t.len() == n &&
      forall|i: int| 0 <= i < t.len() ==> #[trigger] t[i] >= 1 && #[trigger] t[i] <= 100
  }

  spec fn min_time_needed(n: int, t: Seq<int>) -> int {
      sum_seq(t) + 10 * (n - 1)
  }

  spec fn valid_result(n: int, d: int, t: Seq<int>, result: int) -> bool {
      let song_sum = sum_seq(t);
      let min_time = min_time_needed(n, t);
      if min_time > d {
          result == -1
      } else {
          result == (d - song_sum) / 5 && result >= 0
      }
  }

vc-spec: |-
  fn solve(n: int, d: int, t: Seq<int>) -> (result: int)
      requires valid_input(n, d, t)
      ensures valid_result(n, d, t, result)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}