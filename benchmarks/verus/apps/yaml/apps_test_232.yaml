vc-description: |-
  Given an array of n integers representing lightsaber colors (each integer is between 1 and m),
  determine if there exists a contiguous subarray where each color i appears exactly k_i times.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn count_occurrences(s: Seq<nat>, value: nat) -> nat
      decreases s.len()
  {
      if s.len() == 0 {
          0
      } else if s[0] == value {
          1 + count_occurrences(s.subrange(1, s.len() as int), value)
      } else {
          count_occurrences(s.subrange(1, s.len() as int), value)
      }
  }
  
  spec fn sum_seq(s: Seq<nat>) -> nat
      decreases s.len()
  {
      if s.len() == 0 {
          0
      } else {
          s[0] + sum_seq(s.subrange(1, s.len() as int))
      }
  }
  
  spec fn subarray_matches_desired(subarray: Seq<nat>, desired: Seq<nat>, m: nat) -> bool
  {
      desired.len() == m ==> 
      forall|color: nat| 1 <= color <= m ==> count_occurrences(subarray, color) == desired[color as int - 1]
  }
  
  spec fn valid_input(n: nat, m: nat, colors: Seq<nat>, desired: Seq<nat>) -> bool
  {
      colors.len() == n &&
      desired.len() == m &&
      (forall|i: int| 0 <= i < colors.len() ==> 1 <= colors[i] <= m) &&
      (forall|i: int| 0 <= i < desired.len() ==> desired[i] >= 0) &&
      sum_seq(desired) <= n
  }

vc-spec: |-
  fn solve(n: nat, m: nat, colors: Seq<nat>, desired: Seq<nat>) -> (result: String)
      requires
          valid_input(n, m, colors, desired),
      ensures
          result@ == seq!['Y', 'E', 'S'] <==> exists|i: int, j: int| 0 <= i <= j < n && subarray_matches_desired(colors.subrange(i, j + 1), desired, m),
          result@ == seq!['Y', 'E', 'S'] || result@ == seq!['N', 'O'],

vc-code: |-
  {
      assume(false);
      String::new()
  }

vc-postamble: |-

  }

  fn main() {}