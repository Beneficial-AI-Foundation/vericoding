vc-description: |-
  Given a positive integer n, create an n×n matrix filled with integers from 1 to n² 
  arranged in clockwise spiral order, starting from the top-left corner.

  /* Top row of current layer */

  /* Right column of current layer */

  /* Bottom row of current layer */

  /* Left column of current layer */

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn min(a: int, b: int) -> int {
      if a <= b { a } else { b }
  }

  spec fn spiral_order(row: int, col: int, n: int) -> int
      recommends 0 <= row < n && 0 <= col < n && n >= 1
      decreases n - 2 * min(min(row, col), min(n-1-row, n-1-col)) - 1
  {
      let layer = min(min(row, col), min(n-1-row, n-1-col));
      let layer_start = 4 * layer * (n - layer - 1) + layer;

      if row == layer {
          /* Top row of current layer */
          layer_start + (col - layer)
      } else if col == n - 1 - layer {
          /* Right column of current layer */
          layer_start + (n - 2 * layer - 1) + (row - layer)
      } else if row == n - 1 - layer {
          /* Bottom row of current layer */
          layer_start + 2 * (n - 2 * layer - 1) + (n - 1 - layer - col)
      } else {
          /* Left column of current layer */
          layer_start + 3 * (n - 2 * layer - 1) + (n - 1 - layer - row)
      }
  }

  spec fn valid_input(n: int) -> bool {
      n >= 1
  }

  spec fn valid_spiral_matrix(matrix: &Vec<Vec<int>>, n: int) -> bool {
      matrix.len() == n &&
      (forall|i: int| 0 <= i < n ==> (#[trigger] matrix[i]).len() == n) &&
      (forall|i: int, j: int| 0 <= i < n && 0 <= j < n ==> #[trigger] matrix[i][j] == spiral_order(i, j, n) + 1)
  }

vc-helpers: |

vc-spec: |-
  fn generate_matrix(n: int) -> (matrix: Vec<Vec<int>>)
      requires 
          valid_input(n)
      ensures 
          valid_spiral_matrix(&matrix, n) &&
          matrix.len() == n && (forall|i: int| 0 <= i < n ==> (#[trigger] matrix[i]).len() == n) &&
          (forall|i: int, j: int| 0 <= i < n && 0 <= j < n ==> 1 <= #[trigger] matrix[i][j] <= n * n)

vc-code: |-
  {
      assume(false);
      Vec::new()
  }

vc-postamble: |2-

  }

  fn main() {}
