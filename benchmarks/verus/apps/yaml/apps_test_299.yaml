vc-description: |-
  Given n exercises with repetition counts, determine which muscle group receives the most total repetitions.
  Exercises cycle through three types based on position (0-indexed):
  - Position 0, 3, 6, ... : chest exercises
  - Position 1, 4, 7, ... : biceps exercises  
  - Position 2, 5, 8, ... : back exercises
  Return the muscle group with the highest total repetitions.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn chest_total(reps: Seq<int>) -> int 
  decreases reps.len()
  {
      if reps.len() == 0 {
          0int
      } else {
          let first = if 0int % 3 == 0 { reps[0int] } else { 0int };
          first + chest_total_helper(reps.subrange(1, reps.len() as int), 1int)
      }
  }

  spec fn chest_total_helper(reps: Seq<int>, index: int) -> int 
  decreases reps.len()
  {
      if reps.len() == 0 {
          0int
      } else {
          let first = if index % 3 == 0 { reps[0int] } else { 0int };
          first + chest_total_helper(reps.subrange(1, reps.len() as int), index + 1)
      }
  }

  spec fn biceps_total(reps: Seq<int>) -> int 
  decreases reps.len()
  {
      if reps.len() == 0 {
          0int
      } else {
          let first = if 0int % 3 == 1 { reps[0int] } else { 0int };
          first + biceps_total_helper(reps.subrange(1, reps.len() as int), 1int)
      }
  }

  spec fn biceps_total_helper(reps: Seq<int>, index: int) -> int 
  decreases reps.len()
  {
      if reps.len() == 0 {
          0int
      } else {
          let first = if index % 3 == 1 { reps[0int] } else { 0int };
          first + biceps_total_helper(reps.subrange(1, reps.len() as int), index + 1)
      }
  }

  spec fn back_total(reps: Seq<int>) -> int 
  decreases reps.len()
  {
      if reps.len() == 0 {
          0int
      } else {
          let first = if 0int % 3 == 2 { reps[0int] } else { 0int };
          first + back_total_helper(reps.subrange(1, reps.len() as int), 1int)
      }
  }

  spec fn back_total_helper(reps: Seq<int>, index: int) -> int 
  decreases reps.len()
  {
      if reps.len() == 0 {
          0int
      } else {
          let first = if index % 3 == 2 { reps[0int] } else { 0int };
          first + back_total_helper(reps.subrange(1, reps.len() as int), index + 1)
      }
  }

  spec fn valid_input(reps: Seq<int>) -> bool {
      reps.len() > 0 && forall|i: int| 0 <= i < reps.len() ==> reps[i] > 0
  }

  spec fn is_winner(muscle: &str, reps: Seq<int>) -> bool {
      let chest_total_val = chest_total(reps);
      let biceps_total_val = biceps_total(reps);
      let back_total_val = back_total(reps);

      match muscle {
          "chest" => chest_total_val >= biceps_total_val && chest_total_val >= back_total_val,
          "biceps" => biceps_total_val > chest_total_val && biceps_total_val >= back_total_val,
          "back" => back_total_val > chest_total_val && back_total_val > biceps_total_val,
          _ => false,
      }
  }

vc-helpers: |

vc-spec: |-
  fn find_strongest_muscle_group(reps: Seq<int>) -> (result: &'static str)
      requires 
          valid_input(reps)
      ensures 
          result == "chest" || result == "biceps" || result == "back",
          is_winner(result, reps)

vc-code: |-
  {
      assume(false);
      "chest"
  }

vc-postamble: |2-

  }

  fn main() {}
