vc-description: |-
  Given a positive integer n, find the smallest positive integer x such that
  x² + s(x)·x - n = 0, where s(x) is the sum of digits of x in decimal notation.
  If no such positive integer x exists, return -1.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn digit_sum(n: int) -> int
    decreases n when n >= 0
  {
    if n <= 0 { 
      0 
    } else { 
      (n % 10) + digit_sum(n / 10) 
    }
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: i8) -> (result: i8)
    requires 
      n >= 1,
    ensures 
      n == 1 ==> result == -1,
      n > 1 && result > 0 ==> (result as int) * (result as int) + digit_sum(result as int) * (result as int) == n as int,
      n > 1 && result > 0 ==> forall|y: int| y > 0 && y < result as int ==> y * y + digit_sum(y) * y != n as int,
      n > 1 && result == -1 ==> forall|x: int| x > 0 ==> x * x + digit_sum(x) * x != n as int,
      result == -1 || result > 0,

vc-code: |-
  {
    // impl-start
    assume(false);
    unreached()
    // impl-end
  }

vc-postamble: |2-

  }

  fn main() {}