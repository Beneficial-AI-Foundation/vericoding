vc-description: |-
  Given a positive integer n, find the smallest positive integer x such that
  x² + s(x)·x - n = 0, where s(x) is the sum of digits of x in decimal notation.
  If no such positive integer x exists, return -1.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

      spec fn digit_sum(n: int) -> int
          recommends n >= 0
          decreases n
      {
          if n == 0 { 0 }
          else { (n % 10) + digit_sum(n / 10) }
      }

vc-helpers: |-

vc-spec: |-
      fn solve(n: int) -> (result: int)
          requires n >= 1
          ensures 
              n == 1 ==> result == -1,
          ensures 
              n > 1 && result > 0 ==> result * result + digit_sum(result) * result == n,
          ensures 
              n > 1 && result > 0 ==> forall|y: int| y > 0 && y < result ==> y * y + digit_sum(y) * y != n,
          ensures 
              n > 1 && result == -1 ==> forall|x: int| x > 0 ==> x * x + digit_sum(x) * x != n,
          ensures 
              result == -1 || result > 0,

vc-code: |-
      {
          // impl-start
          assume(false);
          unreached()
          // impl-end
      }

vc-postamble: |-

  }

  fn main() {}