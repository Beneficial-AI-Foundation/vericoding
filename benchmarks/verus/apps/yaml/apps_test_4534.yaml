vc-description: |-
  Given a non-negative integer k where 0 ≤ k ≤ 33, return the kth row of Pascal's triangle 
  as a list of integers. Row indexing starts from 0. In Pascal's triangle, each element 
  equals the sum of the two elements directly above it in the previous row.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn binomial(n: int, k: int) -> int
      decreases n when 0 <= k <= n
  {
      if k == 0 || k == n { 1 }
      else if k == 1 { n }
      else { binomial(n-1, k-1) + binomial(n-1, k) }
  }

vc-helpers: |-

vc-spec: |-
  fn get_row(k: int) -> (result: Vec<int>)
      requires 0 <= k <= 33
      ensures 
          result.len() == k + 1,
          forall|i: int| 0 <= i < result.len() ==> #[trigger] result[i] == binomial(k, i),
          forall|i: int| 0 <= i < result.len() ==> result[i] > 0,

vc-code: |-
  {
      assume(false);
      Vec::new()
  }

vc-postamble: |-

  }

  fn main() {}