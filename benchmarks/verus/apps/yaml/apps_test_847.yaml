vc-description: |-
  Given n cards with integers (absolute value â‰¤ x), find the minimum number of additional cards
  needed to make the total sum equal to zero. Additional cards can have integer values from -x to x.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn sum(cards: Seq<int>) -> int
      decreases cards.len()
  {
      if cards.len() == 0 {
          0
      } else {
          cards[0] + sum(cards.subrange(1, cards.len() as int))
      }
  }

  spec fn abs(x: int) -> int {
      if x >= 0 { x } else { -x }
  }

  spec fn valid_input(cards: Seq<int>, x: int) -> bool {
      x > 0 && cards.len() >= 1 && forall|i: int| 0 <= i < cards.len() ==> #[trigger] cards[i] >= -x && #[trigger] cards[i] <= x
  }

  spec fn solve_result(cards: Seq<int>, x: int) -> int {
      if sum(cards) == 0 { 0 } else { (abs(sum(cards)) + x - 1) / x }
  }

vc-helpers: |

vc-spec: |-
  fn solve(cards: Vec<i8>, x: i8) -> (result: i8)
      requires 
          valid_input(cards@.map(|i: int, v: i8| v as int), x as int),
      ensures 
          result as int >= 0,
          result as int == solve_result(cards@.map(|i: int, v: i8| v as int), x as int),

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |2-

  }

  fn main() {}