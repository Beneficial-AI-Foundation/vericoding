vc-description: |-
  Given a string s of lowercase English letters, extract all characters at odd-numbered positions
  (using 1-based indexing) and concatenate them into a new string. This corresponds to extracting
  characters at even indices in 0-based indexing (positions 0, 2, 4, 6, ...).

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(s: Seq<char>) -> bool {
      s.len() >= 1 && forall|i: int| 0 <= i < s.len() ==> 'a' <= #[trigger] s[i] <= 'z'
  }

  spec fn expected_length(s: Seq<char>) -> nat {
      (s.len() + 1) / 2
  }

  spec fn correct_extraction(s: Seq<char>, result: Seq<char>) -> bool {
      result.len() == expected_length(s) &&
      forall|i: int| 0 <= i < result.len() ==> 0 <= 2*i < s.len() && #[trigger] result[i] == s[2*i] &&
      forall|i: int| 0 <= i < s.len() && i % 2 == 0 ==> exists|j: int| 0 <= j < result.len() && result[j] == #[trigger] s[i] && j == i / 2
  }

vc-helpers: |

vc-spec: |-
  fn solve(s: Seq<char>) -> (result: Seq<char>)
      requires valid_input(s)
      ensures correct_extraction(s, result)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}
