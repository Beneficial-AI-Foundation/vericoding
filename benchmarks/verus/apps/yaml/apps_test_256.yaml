vc-description: |-
  Game theory problem: Two teams of 2 players each compete. Each player has defense and attack skills.
  Team 1 chooses their defense/attack assignment first, then Team 2 responds optimally.
  A team wins if their defense > opponent's attack AND their attack > opponent's defense.
  Determine which team can guarantee a win with optimal play, or if neither can.
  
  /* player 1 defense */
  
  /* player 1 attack */
  
  /* player 2 defense */
  
  /* player 2 attack */
  
  /* player 3 defense */
  
  /* player 3 attack */
  
  /* player 4 defense */
  
  /* player 4 attack */

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  #[verifier::external_body]
  spec fn split_lines(input: &str) -> Seq<&str> {
      seq![]
  }

  #[verifier::external_body]
  spec fn split_by_char(line: &str, c: char) -> Seq<&str> {
      seq![]
  }

  #[verifier::external_body]
  spec fn char_at(s: &str, i: int) -> char {
      'a'
  }

  spec fn is_valid_integer(s: &str) -> bool {
      s.len() > 0 && forall|i: int| 0 <= i < s.len() ==> '0' <= char_at(s, i) && char_at(s, i) <= '9'
  }

  #[verifier::external_body]
  spec fn parse_line(line: &str) -> Seq<int> {
      seq![]
  }

  spec fn valid_player_line(line: &str) -> bool {
      let parts = split_by_char(line, ' ');
      parts.len() == 2 &&
      is_valid_integer(parts.index(0)) &&
      is_valid_integer(parts.index(1))
  }

  spec fn valid_input(input: &str) -> bool {
      let lines = split_lines(input);
      lines.len() >= 4 &&
      forall|i: int| 0 <= i < 4 ==> valid_player_line(lines.index(i))
  }

  #[verifier::external_body]
  spec fn compute_result(input: &str) -> Seq<char> {
      let lines = split_lines(input);
      if lines.len() < 4 {
          "".@
      } else {
          let player1 = parse_line(lines.index(0));
          let player2 = parse_line(lines.index(1));
          let player3 = parse_line(lines.index(2));
          let player4 = parse_line(lines.index(3));

          if player1.len() != 2 || player2.len() != 2 || player3.len() != 2 || player4.len() != 2 {
              "".@
          } else {
              let a = player1.index(0);
              let b = player1.index(1);
              let c = player2.index(0);
              let d = player2.index(1);
              let x = player3.index(0);
              let y = player3.index(1);
              let z = player4.index(0);
              let w = player4.index(1);

              let team1 = (a > w && a > y && d > x && d > z) || (c > w && c > y && b > x && b > z);
              let team2 = ((x > b && w > c) || (z > b && y > c)) && ((x > d && w > a) || (z > d && y > a));

              if team1 {
                  "Team 1\n".@
              } else if team2 {
                  "Team 2\n".@
              } else {
                  "Draw\n".@
              }
          }
      }
  }

vc-helpers: |-

vc-spec: |-
  fn solve(input: &str) -> (result: String)
      requires
          valid_input(input),
      ensures
          result@ == compute_result(input),
          result@ == "Team 1\n".@ || result@ == "Team 2\n".@ || result@ == "Draw\n".@,

vc-code: |-
  {
      assume(false);
      "".to_string()
  }

vc-postamble: |-

  }

  fn main() {}