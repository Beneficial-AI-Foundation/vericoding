vc-description: |-
  Given two polynomials f(x) and g(x) with positive integer coefficients,
  find any coefficient in their product h(x) = f(x) Â· g(x) that is not
  divisible by a given prime p. The gcd constraint ensures at least one
  coefficient in each polynomial is not divisible by p.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(n: int, m: int, p: int, f: Seq<int>, g: Seq<int>) -> bool {
      n >= 1 && m >= 1 &&
      p >= 2 &&
      f.len() == n && g.len() == m &&
      (forall|k: int| 0 <= k < f.len() ==> f[k] > 0) &&
      (forall|k: int| 0 <= k < g.len() ==> g[k] > 0) &&
      (exists|k: int| 0 <= k < f.len() && f[k] % p != 0) &&
      (exists|k: int| 0 <= k < g.len() && g[k] % p != 0)
  }

  spec fn valid_result(result: int, n: int, m: int, p: int, f: Seq<int>, g: Seq<int>) -> bool 
      recommends p != 0
  {
      exists|i: int, j: int| 0 <= i < f.len() && 0 <= j < g.len() &&
              (forall|k: int| 0 <= k < i ==> f[k] % p == 0) &&
              f[i] % p != 0 &&
              (forall|k: int| 0 <= k < j ==> g[k] % p == 0) &&
              g[j] % p != 0 &&
              result == i + j &&
              0 <= result < f.len() + g.len()
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: int, m: int, p: int, f: Seq<int>, g: Seq<int>) -> (result: int)
      requires 
          valid_input(n, m, p, f, g),
          p != 0,
      ensures valid_result(result, n, m, p, f, g)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}
