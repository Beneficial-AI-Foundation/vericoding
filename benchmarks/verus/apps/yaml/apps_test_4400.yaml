vc-description: |-
  Given a string S of length 3 representing weather records for 3 consecutive days
  (where 'S' means sunny and 'R' means rainy), find the maximum number of consecutive rainy days.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn valid_input(s: Seq<char>) -> bool {
      s.len() == 3 && forall|i: int| 0 <= i < s.len() ==> s[i] == 'S' || s[i] == 'R'
  }
  
  spec fn max_consecutive_rainy_days(s: Seq<char>) -> int
      recommends valid_input(s)
  {
      if s =~= seq!['R', 'R', 'R'] {
          3
      } else if s.subrange(0, 2) =~= seq!['R', 'R'] || s.subrange(1, 3) =~= seq!['R', 'R'] {
          2
      } else if s.contains('R') {
          1
      } else {
          0
      }
  }

vc-spec: |-
  fn solve(input: Seq<char>) -> (result: int)
      requires 
          valid_input(input),
      ensures 
          result == max_consecutive_rainy_days(input),
          0 <= result && result <= 3,

vc-code: |-
  {
      assume(false);
      0
  }

vc-postamble: |-

  }

  fn main() {}