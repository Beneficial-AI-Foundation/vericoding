vc-description: |-
  Decode a string that was encoded by repeatedly extracting median characters.
  The decoding process inserts each character from the encoded string back into
  its proper median position in the reconstructed word.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn valid_input(n: int, s: Seq<char>) -> bool {
      n >= 1 && n <= 2000 && s.len() == n && 
      forall|i: int| 0 <= i < s.len() ==> 'a' <= s[i] <= 'z'
  }
  
  spec fn valid_output(result: Seq<char>, n: int) -> bool {
      result.len() == n && 
      forall|i: int| 0 <= i < result.len() ==> 'a' <= result[i] <= 'z'
  }
  
  spec fn preserves_characters(s: Seq<char>, result: Seq<char>) -> bool {
      s.to_multiset() == result.to_multiset()
  }

vc-spec: |-
  fn solve(n: usize, s: Seq<char>) -> (result: Seq<char>)
      requires 
          valid_input(n as int, s),
      ensures 
          valid_output(result, n as int),
          preserves_characters(s, result),

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {}