vc-description: |-
  Given a string q and an integer k, split the string into exactly k non-empty substrings
  such that the substrings concatenate to form the original string and each substring 
  starts with a different character (all first characters are distinct).

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn concat_seqs(seqs: Seq<Seq<char>>) -> Seq<char>
      decreases seqs.len()
  {
      if seqs.len() == 0 { 
          Seq::<char>::empty() 
      } else { 
          seqs[0] + concat_seqs(seqs.subrange(1, seqs.len() as int))
      }
  }
  
  spec fn valid_split(result: Seq<Seq<char>>, k: int, q: Seq<char>) -> bool {
      result.len() == k &&
      (forall|i: int| 0 <= i < result.len() ==> result[i].len() > 0) &&
      (forall|i: int, j: int| 0 <= i < j < result.len() ==> result[i][0] != result[j][0]) &&
      concat_seqs(result) == q
  }

vc-spec: |-
  fn solve(k: int, q: Seq<char>) -> (result: Seq<Seq<char>>)
      requires 
          k >= 0,
          q.len() >= 0,
      ensures 
          k <= 0 || q.len() == 0 ==> result.len() == 0,
          k > 0 && q.len() > 0 ==> (
              (result.len() == 0) || valid_split(result, k, q)
          ),

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}