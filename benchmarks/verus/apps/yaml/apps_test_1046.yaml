vc-description: |-
  Given n secretaries, each assigned either a positive session ID if on a call or 0 if not talking.
  When two people call each other, they share the same unique session ID. Each call connects exactly 
  two people (no conferences). Determine how many pairs of secretaries are talking to each other, 
  or return -1 if the situation is impossible (any session ID appears more than twice).

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn count_occurrences(s: Seq<int>, x: int) -> int
      decreases s.len()
  {
      if s.len() == 0 {
          0int
      } else {
          (if s[0] == x { 1int } else { 0int }) + count_occurrences(s.subrange(1, s.len() as int), x)
      }
  }
  
  spec fn count_pairs(s: Seq<int>) -> int
  {
      let positive_sessions = filter_positive(s);
      count_pairs_helper(positive_sessions)
  }
  
  spec fn filter_positive(s: Seq<int>) -> Seq<int>
      decreases s.len()
  {
      if s.len() == 0 {
          Seq::empty()
      } else if s[0] > 0 {
          seq![s[0]].add(filter_positive(s.subrange(1, s.len() as int)))
      } else {
          filter_positive(s.subrange(1, s.len() as int))
      }
  }
  
  spec fn count_pairs_helper(s: Seq<int>) -> int
      decreases s.len()
  {
      if s.len() <= 1 {
          0int
      } else {
          let count = count_occurrences(s, s[0]);
          let remaining = remove_all_occurrences(s, s[0]);
          (if count == 2 { 1int } else { 0int }) + count_pairs_helper(remaining)
      }
  }
  
  spec fn remove_all_occurrences(s: Seq<int>, x: int) -> Seq<int>
      decreases s.len()
  {
      if s.len() == 0 {
          Seq::empty()
      } else if s[0] == x {
          remove_all_occurrences(s.subrange(1, s.len() as int), x)
      } else {
          seq![s[0]].add(remove_all_occurrences(s.subrange(1, s.len() as int), x))
      }
  }
  
  spec fn exists_index(s: Seq<int>, x: int) -> bool
  {
      exists|i: int| 0 <= i < s.len() && s[i] == x
  }

vc-helpers: |-

vc-spec: |-
  fn solve(n: int, sessions: Seq<int>) -> (result: int)
      requires 
          n >= 1,
          sessions.len() == n,
          forall|i: int| 0 <= i < sessions.len() ==> sessions[i] >= 0,
      ensures 
          result == -1 || result >= 0,
          result == -1 ==> exists|id: int| id > 0 && count_occurrences(sessions, id) > 2,
          result >= 0 ==> forall|id: int| id > 0 ==> count_occurrences(sessions, id) <= 2,
          result >= 0 ==> result == count_pairs(sessions),

vc-code: |-
  {
      // impl-start
      assume(false);
      (-1int)
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {}