vc-description: |-
  Given a window of width A and two curtains each of horizontal length B,
  determine the minimum total horizontal length of the uncovered part when 
  the curtains are optimally positioned to minimize uncovered area.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(a: int, b: int) -> bool {
      1 <= a <= 100 && 1 <= b <= 100
  }

  spec fn uncovered_length(a: int, b: int) -> int {
      if a - 2 * b > 0 { a - 2 * b } else { 0 }
  }

vc-helpers: |

vc-spec: |-
  fn solve(a: i8, b: i8) -> (result: i8)
      requires 
          valid_input(a as int, b as int)
      ensures 
          result >= 0,
          result as int == uncovered_length(a as int, b as int),
          result as int == if a as int > 2 * (b as int) { a as int - 2 * (b as int) } else { 0 }

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}