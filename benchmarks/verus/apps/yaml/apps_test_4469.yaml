vc-description: |-
  Given a shelf, process queries of three types:
  - L id: Add book with index id to the leftmost position
  - R id: Add book with index id to the rightmost position  
  - ? id: Find the minimum number of books to remove from either end to make book id leftmost or rightmost
  For each ? query, output the minimum number of removals needed.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(queries: Seq<(char, int)>) -> bool {
      &&& queries.len() > 0
      &&& (forall|i: int| 0 <= i < queries.len() ==> queries[i].0 == 'L' || queries[i].0 == 'R' || queries[i].0 == '?')
      &&& (forall|i: int| 0 <= i < queries.len() ==> queries[i].1 > 0)
      &&& (forall|i: int, j: int| 0 <= i < j < queries.len() && (queries[i].0 == 'L' || queries[i].0 == 'R') && (queries[j].0 == 'L' || queries[j].0 == 'R') ==> queries[i].1 != queries[j].1)
      &&& (forall|i: int| 0 <= i < queries.len() && queries[i].0 == '?' ==> 
          exists|j: int| 0 <= j < i && (queries[j].0 == 'L' || queries[j].0 == 'R') && queries[j].1 == queries[i].1)
      &&& (exists|i: int| 0 <= i < queries.len() && queries[i].0 == '?')
  }

  spec fn count_query_questions(queries: Seq<(char, int)>) -> int {
      queries.len() as int  /* placeholder count */
  }

  spec fn valid_output(queries: Seq<(char, int)>, results: Seq<int>) -> bool {
      let query_count = count_query_questions(queries);
      &&& results.len() >= 0
      &&& (forall|i: int| 0 <= i < results.len() ==> results[i] >= 0)
      &&& (forall|r_idx: int| 0 <= r_idx < results.len() ==> 
          exists|q_idx: int| 0 <= q_idx < queries.len() && queries[q_idx].0 == '?' &&
           results[r_idx] == compute_min_removals(queries, q_idx))
      &&& (forall|q_idx: int| 0 <= q_idx < queries.len() && queries[q_idx].0 == '?' ==>
          exists|r_idx: int| 0 <= r_idx < results.len() &&
           results[r_idx] == compute_min_removals(queries, q_idx))
  }

  struct BookshelfState {
      positions: Map<int, int>,
      head: int,
      tail: int,
  }

  spec fn compute_min_removals(queries: Seq<(char, int)>, query_idx: int) -> int {
      let book_id = queries[query_idx].1;
      let state = simulate_queries(queries, query_idx);
      let pos = state.positions[book_id];
      let left_removals = pos - state.head;
      let right_removals = state.tail - pos;
      let min_removals = if left_removals <= right_removals { left_removals } else { right_removals };
      min_removals - 1
  }

  spec fn simulate_queries(queries: Seq<(char, int)>, up_to_idx: int) -> BookshelfState {
      /* Simulates processing queries up to the given index and returns the resulting bookshelf state */
      BookshelfState {
          positions: Map::empty(),
          head: 0,
          tail: 0,
      }
  }

vc-helpers: |

vc-spec: |-
  fn solve(queries: Seq<(char, int)>) -> (results: Seq<int>)
      requires valid_input(queries)
      ensures valid_output(queries, results)

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |2-

  }

  fn main() {}
