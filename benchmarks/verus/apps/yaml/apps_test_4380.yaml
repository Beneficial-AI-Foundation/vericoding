vc-description: |-
  Given two integers A and B (each between 1 and 3 inclusive), determine if there exists 
  an integer C (also between 1 and 3 inclusive) such that the product A Ã— B Ã— C is odd.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(a: int, b: int) -> bool {
      1 <= a <= 3 && 1 <= b <= 3
  }

  spec fn is_odd(n: int) -> bool {
      n % 2 == 1
  }

  spec fn exists_odd_product(a: int, b: int) -> bool {
      valid_input(a, b) ==> exists|c: int| 1 <= c <= 3 && #[trigger] is_odd(a * b * c)
  }

  spec fn should_answer_yes(a: int, b: int) -> bool {
      valid_input(a, b) ==> (a != 2 && b != 2)
  }

vc-helpers: |

vc-spec: |-
  fn solve(a: i8, b: i8) -> (result: Seq<char>)
    requires valid_input(a as int, b as int)
    ensures result == (if should_answer_yes(a as int, b as int) { "Yes"@ } else { "No"@ })

vc-code: |-
  {
    assume(false);
    unreached()
  }

vc-postamble: |2-

  }

  fn main() {}