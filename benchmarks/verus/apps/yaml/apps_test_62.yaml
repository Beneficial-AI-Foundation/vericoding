vc-description: |-
  Two players play a game on a sequence of n non-negative integers. Each player can either
  reduce a single element by some value or globally reduce all elements by the minimum value.
  The player who cannot make a move (all elements are 0) loses. Determine the winner assuming
  both players play optimally.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(stdin_input: Seq<char>) -> bool {
      stdin_input.len() > 0 &&
      (stdin_input[stdin_input.len() as int - 1] == '\n' || 
       !exists|i: int| 0 <= i < stdin_input.len() && stdin_input[i] == '\n')
  }

  spec fn valid_result(result: Seq<char>) -> bool {
      result == seq!['B','i','t','A','r','y','o'] || result == seq!['B','i','t','L','G','M']
  }

  spec fn game_result(stdin_input: Seq<char>) -> Seq<char>
      recommends valid_input(stdin_input)
  {
      seq!['B','i','t','L','G','M']
  }

vc-helpers: |

vc-spec: |-
  fn solve(stdin_input: Seq<char>) -> (result: Seq<char>)
      requires valid_input(stdin_input)
      ensures valid_result(result)

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |2-

  }

  fn main() {}
