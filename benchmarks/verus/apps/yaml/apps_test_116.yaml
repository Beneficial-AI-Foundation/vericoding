vc-description: |-
  Given two time intervals [l1, r1] and [l2, r2], and a specific minute k,
  find the number of minutes in the intersection of these intervals,
  excluding minute k if it falls within the intersection.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_input(l1: int, r1: int, l2: int, r2: int, k: int) -> bool {
      l1 <= r1 && l2 <= r2
  }
  
  spec fn intersection_left(l1: int, l2: int) -> int {
      if l1 > l2 { l1 } else { l2 }
  }
  
  spec fn intersection_right(r1: int, r2: int) -> int {
      if r1 < r2 { r1 } else { r2 }
  }
  
  spec fn intersection_size(l1: int, r1: int, l2: int, r2: int) -> int {
      let left = intersection_left(l1, l2);
      let right = intersection_right(r1, r2);
      if right - left + 1 > 0 { right - left + 1 } else { 0 }
  }
  
  spec fn k_in_intersection(l1: int, r1: int, l2: int, r2: int, k: int) -> bool {
      let left = intersection_left(l1, l2);
      let right = intersection_right(r1, r2);
      left <= k <= right
  }
  
  spec fn expected_result(l1: int, r1: int, l2: int, r2: int, k: int) -> int {
      let intersection_size_val = intersection_size(l1, r1, l2, r2);
      if k_in_intersection(l1, r1, l2, r2, k) {
          if intersection_size_val - 1 > 0 { intersection_size_val - 1 } else { 0 }
      } else {
          intersection_size_val
      }
  }

vc-helpers: |-

vc-spec: |-
  fn solve(l1: int, r1: int, l2: int, r2: int, k: int) -> (result: int)
      requires 
          valid_input(l1, r1, l2, r2, k)
      ensures 
          result == expected_result(l1, r1, l2, r2, k),
          result >= 0

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}