vc-description: |-
  Given three distinct integers representing positions of three friends on a number line,
  find the minimum total distance they need to travel to meet at a single point.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_input(x1: int, x2: int, x3: int) -> bool {
      1 <= x1 <= 100 && 1 <= x2 <= 100 && 1 <= x3 <= 100 &&
      x1 != x2 && x1 != x3 && x2 != x3
  }
  
  spec fn min_total_distance(x1: int, x2: int, x3: int) -> int
      recommends valid_input(x1, x2, x3)
  {
      let max_pos = if x1 >= x2 && x1 >= x3 { x1 }
                    else if x2 >= x1 && x2 >= x3 { x2 }
                    else { x3 };
      let min_pos = if x1 <= x2 && x1 <= x3 { x1 }
                    else if x2 <= x1 && x2 <= x3 { x2 }
                    else { x3 };
      max_pos - min_pos
  }

vc-helpers: |-

vc-spec: |-
  fn find_minimum_total_distance(x1: int, x2: int, x3: int) -> (result: int)
      requires 
          valid_input(x1, x2, x3)
      ensures 
          result == min_total_distance(x1, x2, x3),
          result >= 1 && result <= 99

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}