vc-description: |-
  Given N points in a 2D plane, count how many points are within distance D from the origin (0,0).
  Distance is measured using Euclidean distance, and we check if distance <= D.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(n: int, d: int, points: Seq<(int, int)>) -> bool {
      n >= 0 && d >= 0 && points.len() >= n
  }

  spec fn within_distance(point: (int, int), d: int) -> bool {
      point.0 * point.0 + point.1 * point.1 <= d * d
  }

  spec fn count_points_within_distance(n: int, d: int, points: Seq<(int, int)>) -> int
      recommends valid_input(n, d, points)
  {
      points.subrange(0, n).filter(|point: (int, int)| within_distance(point, d)).len() as int
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: i8, d: i8, points: Vec<(i8, i8)>) -> (result: i8)
      requires 
          valid_input(n as int, d as int, points@.map_values(|p: (i8, i8)| (p.0 as int, p.1 as int))),
      ensures 
          0 <= result as int <= n as int,
          result as int == count_points_within_distance(n as int, d as int, points@.map_values(|p: (i8, i8)| (p.0 as int, p.1 as int)))

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}