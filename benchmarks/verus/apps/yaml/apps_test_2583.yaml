vc-description: |-
  Two players play a game starting with integer n. Players alternate turns, with the first player moving first.
  On each turn, a player must make exactly one of these moves:
  1. Divide n by any odd divisor of n greater than 1
  2. Subtract 1 from n (only if n > 1)
  The player unable to make a move loses. Determine the winner assuming both players play optimally.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn determine_winner(n: int) -> &'static str
      recommends n >= 1
  {
      if n == 1 { "FastestFinger" }
      else if n == 2 { "Ashishgup" }
      else if is_power_of_two(n) { "FastestFinger" }
      else if n % 4 != 2 { "Ashishgup" }
      else if is_limited_prime(n / 2) { "FastestFinger" }
      else { "Ashishgup" }
  }
  
  spec fn is_power_of_two(n: int) -> bool
      recommends n >= 1
      decreases n
  {
      if n <= 0 { false }
      else { n == 1 || (n % 2 == 0 && is_power_of_two(n / 2)) }
  }
  
  spec fn is_limited_prime(p: int) -> bool
      recommends p >= 1
  {
      if p <= 1 { false }
      else if p == 2 { true }
      else if p % 2 == 0 { false }
      else { true /* simplified primality check */ }
  }

vc-helpers: |-

vc-spec: |-
  fn solve(input: Vec<i8>) -> (result: Vec<&'static str>)
      requires
          input.len() >= 1,
          input[0] as int >= 1,
          input.len() == input[0] as int + 1,
          forall|i: int| #![auto] 1 <= i < input.len() ==> input[i as int] as int >= 1
      ensures
          result.len() == input[0] as int,
          forall|i: int| #![auto] 0 <= i < result.len() ==> result[i as int] == "FastestFinger" || result[i as int] == "Ashishgup",
          forall|i: int| #![auto] 1 <= i < input.len() ==> result[(i-1) as int] == determine_winner(input[i as int] as int)

vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {}