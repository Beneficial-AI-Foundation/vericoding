vc-description: |-
  Given a cupboard with n shelves, determine if all cups and medals can be placed
  following constraints: cups and medals cannot be on the same shelf, each shelf
  can hold at most 5 cups, and each shelf can hold at most 10 medals.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(a: Seq<int>, b: Seq<int>, n: int) -> bool {
      a.len() >= 0 && b.len() >= 0 &&
      (forall|i: int| 0 <= i < a.len() ==> a[i] >= 0) &&
      (forall|j: int| 0 <= j < b.len() ==> b[j] >= 0) &&
      n >= 1
  }

  spec fn sum_seq(s: Seq<int>) -> int
      recommends forall|i: int| 0 <= i < s.len() ==> s[i] >= 0
      decreases s.len()
  {
      if s.len() == 0 { 0 } else { s[0] + sum_seq(s.drop_first()) }
  }

  spec fn shelves_needed(total: int, capacity: int) -> int
      recommends capacity > 0
  {
      if total == 0 { 0 } else { (total - 1) / capacity + 1 }
  }

  spec fn can_place_all(a: Seq<int>, b: Seq<int>, n: int) -> bool
      recommends valid_input(a, b, n)
  {
      let total_cups = sum_seq(a);
      let total_medals = sum_seq(b);
      let shelves_for_cups = shelves_needed(total_cups, 5);
      let shelves_for_medals = shelves_needed(total_medals, 10);
      shelves_for_cups + shelves_for_medals <= n
  }

vc-helpers: |

vc-spec: |-
  fn solve(a: Seq<int>, b: Seq<int>, n: int) -> (result: String)
      requires valid_input(a, b, n)
      ensures result@ == (if can_place_all(a, b, n) { "YES"@ } else { "NO"@ })

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}
