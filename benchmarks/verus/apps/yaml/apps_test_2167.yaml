vc-description: |-
  Given an array of n integers, find the maximum number of elements that can be made equal
  after performing any number of operations where each operation chooses two different elements
  and simultaneously increases one by 1 and decreases the other by 1.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(n: int, arr: Seq<int>) -> bool {
      n >= 1 && arr.len() == n
  }

  spec fn sum_seq(s: Seq<int>) -> int
      decreases s.len()
  {
      if s.len() == 0 {
          0
      } else {
          s[0] + sum_seq(s.subrange(1, s.len() as int))
      }
  }

  spec fn correct_result(n: int, arr: Seq<int>, result: int) -> bool {
      &&& (sum_seq(arr) % n == 0 ==> result == n)
      &&& (sum_seq(arr) % n != 0 ==> result == n - 1)
      &&& (result == n || result == n - 1)
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: i8, arr: Vec<i8>) -> (result: i8)
      requires valid_input(n as int, arr@.map(|i: int, x: i8| x as int))
      ensures correct_result(n as int, arr@.map(|i: int, x: i8| x as int), result as int)

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |2-

  }

  fn main() {}