vc-description: |-
  Given an array of n integers, find the maximum number of elements that can be made equal
  after performing any number of operations where each operation chooses two different elements
  and simultaneously increases one by 1 and decreases the other by 1.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn valid_input(n: int, arr: Seq<int>) -> bool {
      n >= 1 && arr.len() == n
  }
  
  spec fn sum_seq(s: Seq<int>) -> int
      decreases s.len()
  {
      if s.len() == 0 {
          0
      } else {
          s[0] + sum_seq(s.subrange(1, s.len() as int))
      }
  }
  
  spec fn correct_result(n: int, arr: Seq<int>, result: int) -> bool {
      &&& (sum_seq(arr) % n == 0 ==> result == n)
      &&& (sum_seq(arr) % n != 0 ==> result == n - 1)
      &&& (result == n || result == n - 1)
  }

vc-spec: |-
  fn solve(n: int, arr: Seq<int>) -> (result: int)
      requires valid_input(n, arr)
      ensures correct_result(n, arr, result)

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {}