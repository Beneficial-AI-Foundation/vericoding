vc-description: |-
  Given dimensions of two rectangles (AÃ—B and CÃ—D), return the area of the rectangle with the larger area.
  If both rectangles have equal areas, return that common area.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_input(a: int, b: int, c: int, d: int) -> bool {
      1 <= a <= 10000 && 1 <= b <= 10000 && 1 <= c <= 10000 && 1 <= d <= 10000
  }
  
  spec fn max_area(a: int, b: int, c: int, d: int) -> int {
      if a * b >= c * d { a * b } else { c * d }
  }

vc-helpers: |-

vc-spec: |-
  fn solve(a: i8, b: i8, c: i8, d: i8) -> (result: i8)
      requires 
          valid_input(a as int, b as int, c as int, d as int)
      ensures 
          result as int == max_area(a as int, b as int, c as int, d as int),
          result as int >= (a as int) * (b as int) && result as int >= (c as int) * (d as int),
          result as int == (a as int) * (b as int) || result as int == (c as int) * (d as int)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}