vc-description: |-
  Given a circular cake divided into 16 equal pieces, determine if two people can take A and B pieces 
  respectively such that neither person takes two adjacent pieces. The maximum number of non-adjacent 
  pieces any person can take from 16 pieces arranged in a circle is 8.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(a: int, b: int) -> bool {
      1 <= a <= 16 && 1 <= b <= 16 && a + b <= 16
  }

  spec fn can_take_non_adjacent(pieces: int, total: int) -> bool {
      pieces <= total / 2
  }

  spec fn both_can_take(a: int, b: int) -> bool {
      can_take_non_adjacent(a, 16) && can_take_non_adjacent(b, 16)
  }

vc-helpers: |

vc-spec: |-
  fn solve_cake_problem(a: int, b: int) -> (result: &'static str)
      requires 
          valid_input(a, b),
      ensures 
          both_can_take(a, b) <==> (result == "Yay!"),
          (!both_can_take(a, b)) <==> (result == ":("),
          (result == "Yay!") || (result == ":("),

vc-code: |-
  {
      assume(false);
      ""
  }

vc-postamble: |2-

  }

  fn main() {}
