vc-description: |-
  Given an n × n chessboard, find the maximum number of "Coders" that can be placed
  such that none attacks another. A Coder at position (x, y) can attack positions
  (x±1, y) and (x, y±1) (horizontally and vertically adjacent squares).
  Output the maximum count and a valid placement configuration using checkerboard pattern.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn valid_input(n: int) -> bool {
      n >= 1
  }
  
  spec fn max_coders(n: int) -> int
      requires n >= 1
  {
      n * n / 2 + n * n % 2
  }
  
  spec fn int_to_string(x: int) -> Seq<char>;
  
  spec fn valid_output_format(result: Seq<Seq<char>>, n: int) -> bool
      requires n >= 1
  {
      result.len() == n + 1 &&
      result[0] == int_to_string(max_coders(n)) &&
      (forall|i: int| 1 <= i <= n ==> result[i].len() == n)
  }
  
  spec fn valid_checkerboard_placement(result: Seq<Seq<char>>, n: int) -> bool {
      n >= 1 &&
      valid_output_format(result, n) &&
      (forall|i: int| 1 <= i <= n ==> forall|j: int| 0 <= j < n ==>
          (result[i][j] == 'C' <==> 
              (if (i - 1) % 2 == 0 { j % 2 == 0 } else { j % 2 == 1 })))
  }

vc-spec: |-
  fn solve(n: int) -> (result: Seq<Seq<char>>)
      requires valid_input(n)
      ensures valid_output_format(result, n),
      ensures valid_checkerboard_placement(result, n)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}