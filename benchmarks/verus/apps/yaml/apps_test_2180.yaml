vc-description: |-
  Given an n × n chessboard, find the maximum number of "Coders" that can be placed
  such that none attacks another. A Coder at position (x, y) can attack positions
  (x±1, y) and (x, y±1) (horizontally and vertically adjacent squares).
  Output the maximum count and a valid placement configuration using checkerboard pattern.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(n: int) -> bool {
      n >= 1
  }

  spec fn max_coders(n: int) -> int {
      if n >= 1 { n * n / 2 + n * n % 2 } else { 0 }
  }

  spec fn valid_output_format(result: Seq<Seq<char>>, n: int) -> bool {
      n >= 1 &&
      result.len() == (n + 1) &&
      (forall|i: int| 1 <= i <= n ==> #[trigger] result[i].len() == n)
  }

  spec fn valid_checkerboard_placement(result: Seq<Seq<char>>, n: int) -> bool {
      n >= 1 &&
      valid_output_format(result, n) &&
      (forall|i: int, j: int| 1 <= i <= n && 0 <= j < n ==>
          (#[trigger] result[i][j] == 'C') <==> 
              (if (i - 1) % 2 == 0 { j % 2 == 0 } else { j % 2 == 1 }))
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: i8) -> (result: Vec<String>)
      requires valid_input(n as int)

vc-code: |-
  {
      assume(false);
      Vec::new()
  }

vc-postamble: |2-

  }

  fn main() {}