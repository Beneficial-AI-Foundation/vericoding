vc-description: |-
  Given a rectangular piece of paper of dimensions a × b and n rectangular seals with dimensions x_i × y_i,
  find the maximum total area that can be covered by placing exactly two different seals on the paper.
  Each seal can be rotated 90 degrees, and the impressions must not overlap (but can touch).
  If no two seals can fit on the paper, return 0.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn check_pair_func(seal1: (int, int), seal2: (int, int), a: int, b: int) -> int
  {
      let orientations = seq![(seal1, seal2), (seal1, (seal2.1, seal2.0)), ((seal1.1, seal1.0), seal2), ((seal1.1, seal1.0), (seal2.1, seal2.0))];
  
      let area0 = if can_fit(orientations[0].0, orientations[0].1, a, b) {
          orientations[0].0.0 * orientations[0].0.1 + orientations[0].1.0 * orientations[0].1.1
      } else {
          0
      };
  
      let area1 = if can_fit(orientations[1].0, orientations[1].1, a, b) {
          orientations[1].0.0 * orientations[1].0.1 + orientations[1].1.0 * orientations[1].1.1
      } else {
          0
      };
  
      let area2 = if can_fit(orientations[2].0, orientations[2].1, a, b) {
          orientations[2].0.0 * orientations[2].0.1 + orientations[2].1.0 * orientations[2].1.1
      } else {
          0
      };
  
      let area3 = if can_fit(orientations[3].0, orientations[3].1, a, b) {
          orientations[3].0.0 * orientations[3].0.1 + orientations[3].1.0 * orientations[3].1.1
      } else {
          0
      };
  
      max_spec(max_spec(area0, area1), max_spec(area2, area3))
  }
  
  spec fn can_fit(r1: (int, int), r2: (int, int), a: int, b: int) -> bool
  {
      (r1.0 + r2.0 <= a && max_spec(r1.1, r2.1) <= b) || (max_spec(r1.0, r2.0) <= a && r1.1 + r2.1 <= b)
  }
  
  spec fn max_spec(x: int, y: int) -> int
  {
      if x >= y { x } else { y }
  }

vc-helpers: |-

vc-spec: |-
  fn solve(n: int, a: int, b: int, seals: Seq<(int, int)>) -> (result: int)
      requires n >= 0,
              a >= 1 && b >= 1,
              seals.len() == n,
              forall|i: int| 0 <= i < n ==> seals[i].0 >= 1 && seals[i].1 >= 1,
      ensures result >= 0,
              result == 0 ==> (forall|i: int, j: int| 0 <= i < n && i < j < n ==> check_pair_func(seals[i], seals[j], a, b) == 0),
              result > 0 ==> (exists|i: int, j: int| 0 <= i < n && i < j < n && check_pair_func(seals[i], seals[j], a, b) == result),
              forall|i: int, j: int| 0 <= i < n && i < j < n ==> check_pair_func(seals[i], seals[j], a, b) <= result,

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {}