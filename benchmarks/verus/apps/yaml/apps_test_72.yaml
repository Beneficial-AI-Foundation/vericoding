vc-description: |-
  Three players each have a ribbon (string). The beauty of a ribbon is the maximum frequency of any character.
  In n turns, each player must change exactly one character. After n turns, the player with highest beauty wins.
  Find the winner assuming optimal play, or "Draw" if tied.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_input(input: &str) -> bool {
      input.len() > 0
  }
  
  spec fn valid_output(result: &str) -> bool {
      result == "Kuro" || result == "Shiro" || result == "Katie" || result == "Draw" || result == ""
  }
  
  spec fn optimal_score(ribbon: &str, turns: int) -> int
      decreases turns
  {
      let max_freq = max_char_freq(ribbon);
      let length = ribbon.len() as int;
      if turns == 1 && max_freq == length {
          if max_freq > 0 { max_freq - 1 } else { 0 }
      } else if length < max_freq + turns {
          length
      } else {
          max_freq + turns
      }
  }

vc-helpers: |-
  spec fn max_char_freq(s: &str) -> int {
      /* Returns the maximum frequency of any character in the string */
      if s.len() == 0 { 0 } else { s.len() as int }
  }

  spec fn split_lines(input: &str) -> Seq<&str> {
      /* Returns a sequence of lines from the input string */
      seq![]
  }

  spec fn parse_int(s: &str) -> int {
      /* Parses a string to an integer */
      0
  }

  spec fn max3(a: int, b: int, c: int) -> int {
      if a >= b && a >= c { a } else if b >= c { b } else { c }
  }

vc-spec: |-
  fn solve(input: &str) -> (result: String)
      requires 
          valid_input(input),
      ensures 
          valid_output(result.as_str()),
          ({
              let lines = split_lines(input);
              if lines.len() < 4 {
                  result == ""
              } else {
                  let turns = parse_int(lines[0]);
                  let s0 = lines[1];
                  let s1 = lines[2]; 
                  let s2 = lines[3];
                  let score0 = optimal_score(s0, turns);
                  let score1 = optimal_score(s1, turns);
                  let score2 = optimal_score(s2, turns);
                  let max_score = max3(score0, score1, score2);
                  let winners = (if score0 == max_score { 1int } else { 0int }) + 
                               (if score1 == max_score { 1int } else { 0int }) + 
                               (if score2 == max_score { 1int } else { 0int });
                  (winners > 1 ==> result == "Draw") &&
                  (winners == 1 && score0 == max_score ==> result == "Kuro") &&
                  (winners == 1 && score1 == max_score ==> result == "Shiro") &&
                  (winners == 1 && score2 == max_score ==> result == "Katie")
              }
          })

vc-code: |-
  {
      assume(false);
      String::new()
  }

vc-postamble: |-

  }

  fn main() {}