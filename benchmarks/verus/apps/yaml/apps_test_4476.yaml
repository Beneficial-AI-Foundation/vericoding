vc-description: |-
  Given two positive integers a and b, find the minimum number of moves to transform 
  a into b using these operations: add any positive odd integer to a, or subtract 
  any positive even integer from a. It is guaranteed that b can always be obtained from a.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_input(input: Seq<(int, int)>) -> bool {
      forall|i: int| 0 <= i < input.len() ==> input[i].0 >= 1 && input[i].1 >= 1
  }
  
  spec fn min_moves(a: int, b: int) -> int
      recommends a >= 1 && b >= 1
  {
      if a == b {
          0
      } else if a < b {
          if (b - a) % 2 == 1 { 1 } else { 2 }
      } else {
          if (a - b) % 2 == 0 { 1 } else { 2 }
      }
  }
  
  spec fn valid_output(input: Seq<(int, int)>, result: Seq<int>) -> bool {
      valid_input(input) ==> (
          result.len() == input.len() &&
          forall|i: int| 0 <= i < input.len() ==> result[i] == min_moves(input[i].0, input[i].1) &&
          forall|i: int| 0 <= i < result.len() ==> result[i] >= 0
      )
  }

vc-helpers: |-

vc-spec: |-
  fn solve(input: Seq<(int, int)>) -> (result: Seq<int>)
      requires valid_input(input)
      ensures valid_output(input, result)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}