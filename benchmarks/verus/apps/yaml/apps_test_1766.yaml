vc-description: |-
  Two players take turns picking cards from either end of a row of n cards. Each card has a distinct
  integer value. The first player (Sereja) goes first. Both players use a greedy strategy: they always
  choose the card with the larger value between the leftmost and rightmost available cards. Determine
  the final scores of both players.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(cards: Seq<int>) -> bool {
      cards.len() >= 1 &&
      (forall|i: int| 0 <= i < cards.len() ==> cards[i] > 0) &&
      (forall|i: int, j: int| 0 <= i < j < cards.len() ==> cards[i] != cards[j])
  }

  spec fn sum(cards: Seq<int>) -> int 
      decreases cards.len()
  {
      if cards.len() == 0 { 
          0 
      } else { 
          cards[0] + sum(cards.subrange(1, cards.len() as int))
      }
  }

  spec fn sereja_optimal_score(cards: Seq<int>, left: int, right: int, sereja_turn: bool) -> int
      decreases right - left + 1
      when 0 <= left <= right < cards.len()
  {
      if left == right {
          if sereja_turn { cards[left] } else { 0 }
      } else if cards[left] > cards[right] {
          (if sereja_turn { cards[left] } else { 0 }) + sereja_optimal_score(cards, left+1, right, !sereja_turn)
      } else {
          (if sereja_turn { cards[right] } else { 0 }) + sereja_optimal_score(cards, left, right-1, !sereja_turn)
      }
  }

  spec fn valid_output(scores: Seq<int>, cards: Seq<int>) -> bool {
      valid_input(cards) ==>
      scores.len() == 2 &&
      scores[0] >= 0 && scores[1] >= 0 &&
      scores[0] + scores[1] == sum(cards) &&
      scores[0] == sereja_optimal_score(cards, 0, cards.len()-1, true) &&
      scores[1] == sum(cards) - sereja_optimal_score(cards, 0, cards.len()-1, true)
  }

vc-helpers: |

vc-spec: |-
  fn solve(cards: Seq<int>) -> (scores: Seq<int>)
      requires valid_input(cards)
      ensures valid_output(scores, cards)

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |2-

  }

  fn main() {}
