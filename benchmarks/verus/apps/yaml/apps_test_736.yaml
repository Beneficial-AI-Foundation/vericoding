vc-description: |-
  Given a staircase with n steps, find the minimum number of moves to reach the top
  where each move climbs 1 or 2 steps, and total moves must be a multiple of m.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(n: int, m: int) -> bool {
      n > 0 && n <= 10000 && m > 1 && m <= 10
  }

  spec fn min_moves(n: int) -> int
      recommends n > 0
  {
      if n % 2 == 0 { n / 2 } else { n / 2 + 1 }
  }

  spec fn valid_move_count(n: int, k: int) -> bool
      recommends n > 0
  {
      min_moves(n) <= k <= n
  }

  spec fn is_valid_solution(n: int, m: int, result: int) -> bool
      recommends valid_input(n, m)
  {
      result == -1 || (result > 0 && result % m == 0 && valid_move_count(n, result))
  }

  spec fn no_smaller_solution(n: int, m: int, result: int) -> bool
      recommends valid_input(n, m)
  {
      result == -1 ==> forall|k: int| min_moves(n) <= k <= n ==> #[trigger] (k % m) != 0
  }

  spec fn is_minimal_solution(n: int, m: int, result: int) -> bool
      recommends valid_input(n, m)
  {
      result != -1 ==> forall|k: int| (min_moves(n) <= k <= n && k < result) ==> #[trigger] (k % m) != 0
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: i32, m: i32) -> (result: i32)
      requires 
          valid_input(n as int, m as int)
      ensures 
          is_valid_solution(n as int, m as int, result as int) &&
          no_smaller_solution(n as int, m as int, result as int) &&
          is_minimal_solution(n as int, m as int, result as int)

vc-code: |-
  {
      assume(false);
      -1
  }

vc-postamble: |2-

  }

  fn main() {}
