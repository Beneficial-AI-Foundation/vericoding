vc-description: |-
  Find the minimum number of bacteria to add to an initially empty box to achieve exactly x bacteria at some point in time.
  Each morning we can add bacteria, each night bacteria double.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn count_ones_in_binary(n: int) -> int
      recommends n >= 1
      decreases n
      when n >= 1
  {
      if n == 1 {
          1
      } else if n % 2 == 1 {
          1 + count_ones_in_binary(n / 2)
      } else {
          count_ones_in_binary(n / 2)
      }
  }
  
  spec fn valid_input(x: int) -> bool {
      x >= 1
  }
  
  spec fn valid_output(x: int, result: int) -> bool {
      valid_input(x) && result == count_ones_in_binary(x)
  }

vc-helpers: |-

vc-spec: |-
  fn min_bacteria(x: i8) -> (result: i8)
      requires valid_input(x as int)
      ensures valid_output(x as int, result as int)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}