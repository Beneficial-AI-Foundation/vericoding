vc-description: |-
  Given two integers A and B representing possible numbers of guests at a party,
  find the minimum number of snack pieces that can be evenly distributed among
  the guests in both scenarios (A guests or B guests). Each piece must go to
  exactly one guest, and each guest must receive the same number of pieces
  within each scenario. This is equivalent to finding the LCM of A and B.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_input(input: &str) -> bool {
      input.len() > 0 &&
      exists|space_index: int| 0 <= space_index < input.len() && input[space_index] == ' ' &&
      forall|i: int| 0 <= i < input.len() ==> (input[i] == ' ' || ('0' <= input[i] && input[i] <= '9'))
  }
  
  spec fn parse_two_ints(s: &str) -> (int, int)
      recommends valid_input(s)
  {
      let space_index = find_space(s, 0);
      if space_index == -1 || space_index == 0 || space_index == s.len() - 1 {
          (1, 1)
      } else {
          let first_part = s.subrange(0, space_index);
          let second_part = s.subrange(space_index + 1, s.len() as int);
          if first_part.len() == 0 || second_part.len() == 0 {
              (1, 1)
          } else if !(forall|i: int| 0 <= i < first_part.len() ==> ('0' <= first_part[i] && first_part[i] <= '9')) {
              (1, 1)
          } else if !(forall|i: int| 0 <= i < second_part.len() ==> ('0' <= second_part[i] && second_part[i] <= '9')) {
              (1, 1)
          } else {
              let first = string_to_int(first_part);
              let second = string_to_int(second_part);
              if first <= 0 || second <= 0 {
                  (1, 1)
              } else {
                  (first, second)
              }
          }
      }
  }
  
  spec fn lcm(a: int, b: int) -> int
      recommends a > 0 && b > 0
  {
      (a * b) / gcd(a, b)
  }
  
  spec fn valid_output(output: &str) -> bool {
      output.len() > 0 &&
      forall|i: int| 0 <= i < output.len() ==> ('0' <= output[i] && output[i] <= '9')
  }

vc-helpers: |-

vc-spec: |-
  fn solve(input: &str) -> (result: String)
      requires valid_input(input)
      ensures
          let nums = parse_two_ints(input);
          let a = nums.0;
          let b = nums.1;
          result == int_to_string(lcm(a, b))
      ensures valid_output(&result)

vc-code: |-
  {
      assume(false);
      String::new()
  }

vc-postamble: |-

  }

  fn main() {}