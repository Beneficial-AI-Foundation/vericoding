vc-description: |-
  Given n bishops on a 1000Ã—1000 grid, count the number of pairs that attack each other.
  Two bishops attack each other if and only if they are on the same diagonal (either main diagonal or anti-diagonal).
  Main diagonal: x - y is constant, Anti-diagonal: x + y is constant.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(positions: Seq<(int, int)>) -> bool {
      positions.len() >= 1 && positions.len() <= 200000 &&
      (forall|i: int| 0 <= i < positions.len() ==> 
          1 <= #[trigger] positions[i].0 <= 1000 && 1 <= positions[i].1 <= 1000) &&
      (forall|i: int, j: int| 0 <= i < j < positions.len() ==> 
          #[trigger] positions[i] != #[trigger] positions[j])
  }

  spec fn count_attacking_pairs(positions: Seq<(int, int)>) -> int
      recommends valid_input(positions)
  {
      /* Count pairs (i,j) where i < j and bishops at positions[i] and positions[j] attack each other */
      positions.len() * (positions.len() - 1) / 2 /* placeholder - actual implementation would count diagonal pairs */
  }

  spec fn valid_output(positions: Seq<(int, int)>, result: int) -> bool
      recommends valid_input(positions)
  {
      result == count_attacking_pairs(positions) && result >= 0
  }

vc-helpers: |

vc-spec: |-
  fn solve_bishops(positions: Seq<(int, int)>) -> (result: u64)
      requires
          valid_input(positions),
      ensures
          valid_output(positions, result as int),
          result >= 0,

vc-code: |-
  {
      assume(false);
      0
  }

vc-postamble: |2-

  }

  fn main() {}
