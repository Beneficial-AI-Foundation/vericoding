vc-description: |-
  Given a king's position on a standard 8Ã—8 chess board, determine the number of valid moves 
  the king can make. The position is given as a two-character string "cd" where 'c' is the 
  column ('a' to 'h') and 'd' is the row ('1' to '8'). A king can move exactly one square 
  in any direction but cannot move outside the board boundaries.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(position: Seq<char>) -> bool {
    position.len() == 2 && 
    'a' <= position[0] && position[0] <= 'h' && 
    '1' <= position[1] && position[1] <= '8'
  }

  spec fn is_corner(position: Seq<char>) -> bool
    recommends valid_input(position)
  {
    (position[0] == 'a' || position[0] == 'h') && 
    (position[1] == '1' || position[1] == '8')
  }

  spec fn is_edge(position: Seq<char>) -> bool
    recommends valid_input(position)
  {
    (position[0] == 'a' || position[0] == 'h' || 
     position[1] == '1' || position[1] == '8') && 
    !is_corner(position)
  }

  spec fn is_interior(position: Seq<char>) -> bool
    recommends valid_input(position)
  {
    !is_corner(position) && !is_edge(position)
  }

  spec fn valid_moves(position: Seq<char>) -> int
    recommends valid_input(position)
  {
    if is_corner(position) { 3 }
    else if is_edge(position) { 5 }
    else { 8 }
  }

vc-helpers: |

vc-spec: |-
  fn solve(position: Seq<char>) -> (moves: i32)
    requires 
      valid_input(position),
    ensures 
      moves == valid_moves(position),
      is_corner(position) ==> moves == 3,
      is_edge(position) ==> moves == 5,
      is_interior(position) ==> moves == 8,
      moves == 3 || moves == 5 || moves == 8,

vc-code: |-
  {
    assume(false);
    unreached()
  }

vc-postamble: |2-

  }

  fn main() {}
