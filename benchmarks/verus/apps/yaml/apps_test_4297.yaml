vc-description: |-
  Given a positive integer N, find the smallest positive integer that is divisible by both 2 and N.
  This is equivalent to finding the least common multiple of 2 and N.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn valid_input(n: int) -> bool {
      n >= 1
  }
  
  spec fn divisible_by_both(result: int, n: int) -> bool 
      recommends n >= 1
  {
      result % 2 == 0 && result % n == 0
  }
  
  spec fn is_smallest(result: int, n: int) -> bool
      recommends n >= 1
  {
      forall|k: int| 1 <= k < result ==> !(k % 2 == 0 && k % n == 0)
  }
  
  spec fn lcm(a: int, b: int) -> int
      recommends a >= 1 && b >= 1
  {
      if a % b == 0 { a }
      else if b % a == 0 { b }
      else { a * b }
  }

vc-spec: |-
  fn solve(n: int) -> (result: int)
      requires valid_input(n)
      ensures result >= 1,
              divisible_by_both(result, n),
              is_smallest(result, n),
              (n % 2 == 0 ==> result == n) && (n % 2 != 0 ==> result == n * 2)

vc-code: |-
  {
      assume(false);
      0
  }

vc-postamble: |-

  }

  fn main() {}