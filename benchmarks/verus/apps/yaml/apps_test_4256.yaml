vc-description: |-
  Given three integers A (cost per drink), B (available money), and C (maximum drinks desired),
  determine how many drinks will be purchased. The number of drinks purchased is the minimum of:
  - How many drinks can be afforded: B // A  
  - The satisfaction limit: C

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn valid_input(input: Seq<char>) -> bool {
      input.len() > 0 &&
      exists|i: int, j: int| 0 <= i < j < input.len() && input[i] == ' ' && input[j] == ' ' &&
      {
          let parts = split_string_spec(input);
          parts.len() >= 3 && 
          is_valid_integer(parts[0]) && is_valid_integer(parts[1]) && is_valid_integer(parts[2]) &&
          {
              let a = string_to_int_spec(parts[0]);
              let b = string_to_int_spec(parts[1]);
              let c = string_to_int_spec(parts[2]);
              1 <= a <= 100 && 1 <= b <= 100 && 1 <= c <= 100
          }
      }
  }
  
  spec fn compute_drinks(a: int, b: int, c: int) -> int {
      if b / a < c { b / a } else { c }
  }
  
  spec fn is_valid_integer(s: Seq<char>) -> bool {
      s.len() > 0 && forall|i: int| 0 <= i < s.len() ==> '0' <= s[i] <= '9'
  }
  
  spec fn string_to_int_spec(s: Seq<char>) -> int {
      if s.len() == 1 { 
          s[0] as int - '0' as int
      } else { 
          string_to_int_spec(s.subrange(0, s.len() - 1)) * 10 + (s[s.len() - 1] as int - '0' as int)
      }
  }
  
  spec fn split_string_spec(s: Seq<char>) -> Seq<Seq<char>>
      decreases s.len()
  {
      if s.len() == 0 { 
          seq![]
      } else {
          let parts = split_helper(s, 0, seq![]);
          parts
      }
  }
  
  spec fn split_helper(s: Seq<char>, index: int, current: Seq<char>) -> Seq<Seq<char>>
      decreases s.len() - index
  {
      if index >= s.len() {
          if current.len() > 0 { seq![current] } else { seq![] }
      } else if s[index] == ' ' || s[index] == '\n' || s[index] == '\t' {
          if current.len() > 0 { 
              seq![current].add(split_helper(s, index + 1, seq![]))
          } else { 
              split_helper(s, index + 1, seq![])
          }
      } else {
          split_helper(s, index + 1, current.push(s[index]))
      }
  }
  
  spec fn int_to_string_spec(n: int) -> Seq<char> {
      if n == 0 { 
          seq!['0']
      } else if n < 10 { 
          seq![('0' as int + n) as char]
      } else { 
          int_to_string_spec(n / 10).add(seq![('0' as int + (n % 10)) as char])
      }
  }

vc-spec: |-
  fn solve(input: Seq<char>) -> (result: Seq<char>)
      requires 
          valid_input(input),
      ensures 
          result.len() > 0,
      ensures 
          result[result.len() - 1] == '\n',
      ensures {
          let parts = split_string_spec(input);
          let a = string_to_int_spec(parts[0]);
          let b = string_to_int_spec(parts[1]);
          let c = string_to_int_spec(parts[2]);
          let drinks = compute_drinks(a, b, c);
          result == int_to_string_spec(drinks).push('\n')
      }

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {}