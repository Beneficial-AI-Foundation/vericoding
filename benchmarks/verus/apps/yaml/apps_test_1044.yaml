vc-description: |-
  Two players play a cycle-splitting game alternately. Player 1 goes first.
  Players split cycles with â‰¥2 vertices into two smaller cycles.
  Process n operations sequentially, each adding a cycle.
  After each operation, determine who wins if the game starts with current cycle set.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn valid_input(s: Seq<char>) -> bool {
      let lines = split_by_newline_spec(s);
      lines.len() >= 2 &&
      is_valid_integer(lines[0]) &&
      {
          let n = parse_int_spec(lines[0]);
          let numbers = split_by_space_spec(lines[1]);
          numbers.len() == n &&
          forall|i: int| 0 <= i < numbers.len() ==> is_valid_integer(numbers[i])
      }
  }
  
  spec fn is_valid_integer(s: Seq<char>) -> bool {
      s.len() > 0 && forall|i: int| 0 <= i < s.len() ==> '0' <= s[i] && s[i] <= '9'
  }
  
  spec fn split_by_newline_spec(s: Seq<char>) -> Seq<Seq<char>> {
      seq![seq![], seq![]]
  }
  
  spec fn split_by_space_spec(s: Seq<char>) -> Seq<Seq<char>> {
      seq![seq![]]
  }
  
  spec fn parse_int_spec(s: Seq<char>) -> int {
      if is_valid_integer(s) { 0 } else { 0 }
  }
  
  spec fn simulates_game_logic(numbers: Seq<Seq<char>>, result: Seq<char>) -> bool {
      if forall|i: int| 0 <= i < numbers.len() ==> is_valid_integer(numbers[i]) {
          let output_lines = split_by_newline_spec(result);
          computes_correct_players(numbers, output_lines)
      } else {
          false
      }
  }
  
  spec fn computes_correct_players(numbers: Seq<Seq<char>>, outputs: Seq<Seq<char>>) -> bool {
      if forall|i: int| 0 <= i < numbers.len() ==> is_valid_integer(numbers[i]) {
          numbers.len() == outputs.len() && {
              let players = compute_players_sequence(numbers);
              players.len() == outputs.len() &&
              forall|i: int| 0 <= i < outputs.len() ==> 
                  (players[i] == 1 ==> outputs[i] == seq!['1']) &&
                  (players[i] == 2 ==> outputs[i] == seq!['2'])
          }
      } else {
          false
      }
  }
  
  spec fn compute_players_sequence(numbers: Seq<Seq<char>>) -> Seq<int>
      decreases numbers.len()
  {
      if forall|i: int| 0 <= i < numbers.len() ==> is_valid_integer(numbers[i]) {
          if numbers.len() == 0 {
              seq![]
          } else {
              compute_players_helper(numbers, 0, 2)
          }
      } else {
          seq![]
      }
  }
  
  spec fn compute_players_helper(numbers: Seq<Seq<char>>, index: int, current_player: int) -> Seq<int>
      decreases numbers.len() - index
  {
      if 0 <= index <= numbers.len() && (current_player == 1 || current_player == 2) && forall|i: int| 0 <= i < numbers.len() ==> is_valid_integer(numbers[i]) {
          if index >= numbers.len() {
              seq![]
          } else {
              let num = parse_int_spec(numbers[index]);
              let next_player = if num % 2 == 0 { 3 - current_player } else { current_player };
              seq![next_player].add(compute_players_helper(numbers, index + 1, next_player))
          }
      } else {
          seq![]
      }
  }
  
  spec fn count_lines(s: Seq<char>) -> int {
      count_newlines(s, 0, 0)
  }
  
  spec fn count_newlines(s: Seq<char>, index: int, count: int) -> int
      decreases s.len() - index
  {
      if 0 <= index <= s.len() {
          if index >= s.len() {
              count
          } else if s[index] == '\n' {
              count_newlines(s, index + 1, count + 1)
          } else {
              count_newlines(s, index + 1, count)
          }
      } else {
          count
      }
  }
  
  spec fn starts_with_player2_and_toggles_on_even(numbers: Seq<Seq<char>>, result: Seq<char>) -> bool {
      if forall|i: int| 0 <= i < numbers.len() ==> is_valid_integer(numbers[i]) {
          let output_lines = split_by_newline_spec(result);
          let computed_players = compute_players_sequence(numbers);
          output_lines.len() == computed_players.len() &&
          forall|i: int| 0 <= i < output_lines.len() ==>
              (computed_players[i] == 1 ==> output_lines[i] == seq!['1']) &&
              (computed_players[i] == 2 ==> output_lines[i] == seq!['2'])
      } else {
          false
      }
  }
  
  spec fn alternates_correctly(input: Seq<char>, output: Seq<char>) -> bool {
      let lines = split_by_newline_spec(input);
      lines.len() >= 2 ==> {
          let numbers = split_by_space_spec(lines[1]);
          let output_lines = split_by_newline_spec(output);
          output_lines.len() == numbers.len() &&
          computes_correct_players(numbers, output_lines)
      }
  }
  
  spec fn partial_simulation(numbers: Seq<Seq<char>>, output: Seq<char>, processed: int, current_player: int) -> bool {
      if 0 <= processed <= numbers.len() && forall|i: int| 0 <= i < numbers.len() ==> is_valid_integer(numbers[i]) {
          let output_lines = split_by_newline_spec(output);
          output_lines.len() == processed && {
              let partial_computed = compute_players_sequence(numbers.subrange(0, processed));
              output_lines.len() == partial_computed.len() &&
              forall|i: int| 0 <= i < output_lines.len() ==>
                  (partial_computed[i] == 1 ==> output_lines[i] == seq!['1']) &&
                  (partial_computed[i] == 2 ==> output_lines[i] == seq!['2'])
          }
      } else {
          false
      }
  }

vc-spec: |-
  fn solve(s: Seq<char>) -> (result: Seq<char>)
      requires
          s.len() > 0,
          exists|i: int| 0 <= i < s.len() && s[i] == '\n',
          valid_input(s),
      ensures
          result.len() > 0,
          forall|i: int| 0 <= i < result.len() ==> result[i] == '1' || result[i] == '2' || result[i] == '\n',
          result[result.len() - 1] == '\n',
          ({
              let lines = split_by_newline_spec(s);
              lines.len() >= 2 ==> {
                  let numbers = split_by_space_spec(lines[1]);
                  count_lines(result) == numbers.len()
              }
          }),
          ({
              let lines = split_by_newline_spec(s);
              lines.len() >= 2 ==> {
                  let numbers = split_by_space_spec(lines[1]);
                  simulates_game_logic(numbers, result)
              }
          }),
          ({
              let lines = split_by_newline_spec(s);
              lines.len() >= 2 ==> {
                  let numbers = split_by_space_spec(lines[1]);
                  starts_with_player2_and_toggles_on_even(numbers, result)
              }
          }),
          alternates_correctly(s, result),

vc-code: |-
  {
      // impl-start
      assume(false);
      seq![]
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {}