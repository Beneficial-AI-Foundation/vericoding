vc-description: |-
  Find the minimum time needed for a kangaroo to reach position X on a number line.
  The kangaroo starts at position 0 at time 0. At each time step i (i = 1, 2, 3, ...),
  the kangaroo can stay at current position or jump exactly i units left or right.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(x: int) -> bool {
      x >= 1
  }

  spec fn triangular_number(n: int) -> int
      recommends n >= 0
  {
      n * (n + 1) / 2
  }

  spec fn is_minimal_time(t: int, x: int) -> bool
      recommends x >= 1
  {
      t >= 1 && 
      triangular_number(t) >= x &&
      (t == 1 || triangular_number(t - 1) < x)
  }

vc-helpers: |

vc-spec: |-
  fn solve(x: int) -> (result: int)
      requires valid_input(x)
      ensures is_minimal_time(result, x)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}
