vc-description: |-
  Count the integers from 1 to N (inclusive) that have exactly K non-zero digits 
  in their decimal representation. N can be very large (up to 10^100) and K is 
  between 1 and 3.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn count_non_zero_digits(n: int) -> int
      recommends n >= 0
  {
      if n == 0 { 0 }
      else if n % 10 == 0 { count_non_zero_digits(n / 10) }
      else { 1 + count_non_zero_digits(n / 10) }
  }
  
  spec fn count_numbers_with_k_non_zero_digits(n: int, k: int) -> int
      recommends n >= 1 && k >= 1
  {
      count_range(n, k, 1, n)
  }
  
  spec fn count_range(n: int, k: int, start: int, end: int) -> int
      recommends n >= 1 && k >= 1 && start >= 1 && end >= start - 1
      decreases if end < start { 0 } else { end - start + 1 }
  {
      if start > end { 0 }
      else if count_non_zero_digits(start) == k { 
          1 + count_range(n, k, start + 1, end)
      } else { 
          count_range(n, k, start + 1, end)
      }
  }
  
  spec fn valid_input(n: int, k: int) -> bool
  {
      n >= 1 && k >= 1 && k <= 3
  }

vc-helpers: |-

vc-spec: |-
  fn count_numbers_with_exactly_k_non_zero_digits(n: int, k: int) -> (count: int)
      requires valid_input(n, k)
      ensures count == count_numbers_with_k_non_zero_digits(n, k)
      ensures count >= 0
      ensures count <= n

vc-code: |-
  {
      assume(false);
      0
  }

vc-postamble: |-

  }

  fn main() {}