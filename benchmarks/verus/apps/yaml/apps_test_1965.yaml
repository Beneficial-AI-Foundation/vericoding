vc-description: |-
  Given n accounts with integer ratings and one infected account (Killjoy's) with rating x,
  find the minimum number of contests needed to infect all n accounts.
  Infection spreads instantly to accounts with the same rating.
  In contests, participants can change ratings (sum of changes = 0), Killjoy cannot participate.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn count_occurrences(s: Seq<int>, x: int) -> int
      decreases s.len()
  {
      if s.len() == 0 {
          0
      } else if s[0] == x {
          1 + count_occurrences(s.drop_first(), x)
      } else {
          count_occurrences(s.drop_first(), x)
      }
  }

  spec fn sum(s: Seq<int>) -> int
      decreases s.len()
  {
      if s.len() == 0 {
          0
      } else {
          s[0] + sum(s.drop_first())
      }
  }

  spec fn valid_input(n: int, ratings: Seq<int>) -> bool {
      n >= 2 && ratings.len() == n
  }

  spec fn all_infected(k: int, ratings: Seq<int>) -> bool {
      ratings.contains(k) && count_occurrences(ratings, k) == ratings.len()
  }

  spec fn can_infect_in_one_contest(k: int, ratings: Seq<int>) -> bool {
      (ratings.contains(k) && count_occurrences(ratings, k) != ratings.len()) ||
      (!ratings.contains(k) && k * ratings.len() == sum(ratings))
  }

  spec fn requires_two_contests(k: int, ratings: Seq<int>) -> bool {
      !ratings.contains(k) && k * ratings.len() != sum(ratings)
  }

vc-spec: |-
  fn solve_case(n: int, k: int, ratings: Seq<int>) -> (answer: int)
      requires 
          valid_input(n, ratings)
      ensures 
          answer >= 0 && answer <= 2,
          all_infected(k, ratings) ==> answer == 0,
          can_infect_in_one_contest(k, ratings) && !all_infected(k, ratings) ==> answer == 1,
          requires_two_contests(k, ratings) ==> answer == 2

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}