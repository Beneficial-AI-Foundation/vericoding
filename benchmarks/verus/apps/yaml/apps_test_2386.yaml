vc-description: |-
  Given an integer sequence A of length N, find the minimum value of:
  abs(A₁ - (b+1)) + abs(A₂ - (b+2)) + ... + abs(Aₙ - (b+N))
  where b is any integer we can choose.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn valid_input(n: int, a: Seq<int>) -> bool {
      n >= 1 && a.len() == n && forall|i: int| 0 <= i < a.len() ==> a[i] >= 1
  }
  
  spec fn transform(a: Seq<int>) -> Seq<int> {
      Seq::new(a.len(), |i: int| a[i] - (i + 1))
  }
  
  spec fn sum_abs_diffs(a: Seq<int>, target: int) -> int
      decreases a.len()
  {
      if a.len() == 0 {
          0
      } else {
          abs_spec(a[0] - target) + sum_abs_diffs(a.subrange(1, a.len() as int), target)
      }
  }
  
  spec fn median_of(a: Seq<int>) -> int {
      let sorted = sorted_seq(a);
      if sorted.len() == 0 {
          0
      } else if sorted.len() % 2 == 1 {
          sorted[sorted.len() as int / 2]
      } else if sorted.len() == 2 {
          (sorted[0] + sorted[1]) / 2
      } else {
          (sorted[sorted.len() as int / 2 - 1] + sorted[sorted.len() as int / 2]) / 2
      }
  }
  
  spec fn sorted_seq(a: Seq<int>) -> Seq<int> {
      a
  }
  
  spec fn abs_spec(x: int) -> int {
      if x >= 0 { x } else { -x }
  }

vc-spec: |-
  fn solve(n: int, a: Seq<int>) -> (result: int)
      requires 
          valid_input(n, a)
      ensures 
          result >= 0,
          result == sum_abs_diffs(transform(a), median_of(transform(a)))

vc-code: |-
  {
      assume(false);
      0int
  }

vc-postamble: |-

  }

  fn main() {}