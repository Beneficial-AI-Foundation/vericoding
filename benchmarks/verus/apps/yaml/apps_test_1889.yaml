vc-description: |-
  Given an n√óm grid where each cell contains either 0 or 1, process q queries.
  Each query flips the value at position (i,j) from 0 to 1 or 1 to 0.
  After each query, calculate the score: the maximum length of consecutive 1s across all rows in the grid.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_grid(grid: Seq<Seq<int>>, n: int, m: int) -> bool {
      grid.len() == n && n > 0 && m > 0 &&
      (forall|i: int| 0 <= i < n ==> grid[i].len() == m) &&
      (forall|i: int, j: int| 0 <= i < n && 0 <= j < m ==> grid[i][j] == 0 || grid[i][j] == 1)
  }

  spec fn valid_queries(queries: Seq<(int, int)>, q: int, n: int, m: int) -> bool {
      queries.len() == q && q >= 0 &&
      (forall|k: int| 0 <= k < q ==> #[trigger] queries[k].0 >= 1 && queries[k].0 <= n && queries[k].1 >= 1 && queries[k].1 <= m)
  }

  spec fn cons_helper(l: Seq<int>, index: int, current: int, max_so_far: int) -> int
      decreases l.len() - index
  {
      if index >= l.len() {
          max_so_far
      } else if l[index] == 1 {
          let new_current = current + 1;
          let new_max = if new_current > max_so_far { new_current } else { max_so_far };
          cons_helper(l, index + 1, new_current, new_max)
      } else {
          cons_helper(l, index + 1, 0, max_so_far)
      }
  }

  spec fn cons(l: Seq<int>) -> int {
      cons_helper(l, 0, 0, 0)
  }

  spec fn max_in_seq(s: Seq<int>) -> int
      decreases s.len()
  {
      if s.len() == 0 {
          0
      } else if s.len() == 1 {
          s[0]
      } else {
          let rest = max_in_seq(s.subrange(1, s.len() as int));
          if s[0] > rest { s[0] } else { rest }
      }
  }

  spec fn compute_score(grid: Seq<Seq<int>>) -> int {
      if grid.len() == 0 {
          0
      } else {
          let row_scores = Seq::new(grid.len(), |i: int| cons(grid[i]));
          max_in_seq(row_scores)
      }
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: int, m: int, q: int, grid: Seq<Seq<int>>, queries: Seq<(int, int)>) -> (results: Vec<int>)
      requires 
          valid_grid(grid, n, m),
          valid_queries(queries, q, n, m),
      ensures 
          results.len() == q,

vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }

vc-postamble: |2-

  }

  fn main() {}
