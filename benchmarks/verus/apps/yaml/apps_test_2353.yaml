vc-description: |-
  Given four integers representing sleep requirements and alarm timing,
  simulate an alarm system where: first alarm rings after b minutes,
  if total sleep >= a then wake permanently, otherwise set alarm for c minutes later
  and spend d minutes falling asleep. If alarm rings while falling asleep (c <= d),
  reset and repeat. Find total time until permanent wake or -1 if never happens.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(a: int, b: int, c: int, d: int) -> bool {
      a >= 0 && b >= 0 && c >= 0 && d >= 0
  }

  spec fn first_alarm_sufficient(a: int, b: int) -> bool {
      a <= b
  }

  spec fn never_wakes(a: int, b: int, c: int, d: int) -> bool {
      a > b && c <= d
  }

  spec fn eventually_wakes(a: int, b: int, c: int, d: int) -> bool {
      a > b && c > d
  }

  spec fn calculate_wake_time(a: int, b: int, c: int, d: int) -> int {
      let remaining = a - b;
      let cycles = (remaining - 1) / (c - d) + 1;
      b + c * cycles
  }

vc-helpers: |

vc-spec: |-
  fn solve(a: int, b: int, c: int, d: int) -> (result: int)
      requires 
          valid_input(a, b, c, d)
      ensures 
          first_alarm_sufficient(a, b) ==> result == b,
          never_wakes(a, b, c, d) ==> result == -1,
          eventually_wakes(a, b, c, d) ==> result == calculate_wake_time(a, b, c, d)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}
