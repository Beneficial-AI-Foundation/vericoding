vc-description: |-
  Find the number of polynomials P(x) with non-negative integer coefficients 
  such that P(t) = a and P(P(t)) = b, where t, a, and b are given positive integers.
  Since P(t) = a, the second condition becomes P(a) = b.
  Output "inf" if infinitely many such polynomials exist, otherwise output the count.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(t: int, a: int, b: int) -> bool {
      t > 0 && a > 0 && b > 0
  }

  spec fn valid_output(res: String) -> bool {
      res@ == "0"@ || res@ == "1"@ || res@ == "2"@ || res@ == "inf"@
  }

  spec fn infinite_case(t: int, a: int, b: int) -> bool {
      a == t && a == b && a == 1
  }

  spec fn two_solutions_case(t: int, a: int, b: int) -> bool {
      a == t && a == b && a != 1
  }

  spec fn zero_solutions_case(t: int, a: int, b: int) -> bool {
      (t == 2 && a == 3 && b > 10000) ||
      (a == t && a != b) ||
      (a != t && (a - b) % (t - a) == 0) ||
      (a != t && (a - b) % (t - a) != 0 && t == b)
  }

  spec fn one_solution_case(t: int, a: int, b: int) -> bool {
      a != t && (a - b) % (t - a) != 0 && t != b
  }

vc-helpers: |

vc-spec: |-
  fn solve(t: int, a: int, b: int) -> (res: String)
      requires 
          valid_input(t, a, b),
      ensures 
          valid_output(res),
          infinite_case(t, a, b) ==> res@ == "inf"@,
          two_solutions_case(t, a, b) ==> res@ == "2"@,
          zero_solutions_case(t, a, b) ==> res@ == "0"@,
          one_solution_case(t, a, b) ==> res@ == "1"@

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |2-

  }

  fn main() {}
