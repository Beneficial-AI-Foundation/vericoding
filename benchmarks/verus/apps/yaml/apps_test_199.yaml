vc-description: |-
  Given n kegs containing v_i liters of kvass each, pour exactly s liters total 
  such that the minimum amount remaining in any keg is maximized. Each keg can 
  only have kvass removed, not added. Return -1 if impossible to pour s liters,
  otherwise return the maximum possible minimum remaining amount in any keg.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(n: int, s: int, v: Seq<int>) -> bool {
      n > 0 && v.len() == n && s >= 0 && forall|i: int| 0 <= i < v.len() ==> v[i] >= 0
  }

  spec fn sum(v: Seq<int>) -> int
      decreases v.len()
  {
      if v.len() == 0 {
          0
      } else {
          v[0] + sum(v.subrange(1, v.len() as int))
      }
  }

  spec fn min_seq(v: Seq<int>) -> int
      recommends v.len() > 0
      decreases v.len()
  {
      if v.len() == 1 {
          v[0]
      } else if v.len() > 1 && v[0] <= min_seq(v.subrange(1, v.len() as int)) {
          v[0]
      } else if v.len() > 1 {
          min_seq(v.subrange(1, v.len() as int))
      } else {
          0
      }
  }

  spec fn min(a: int, b: int) -> int {
      if a <= b { a } else { b }
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: i8, s: i8, v: Vec<i8>) -> (result: i8)
      requires 
          valid_input(n as int, s as int, v@.map(|i, x| x as int))
      ensures 
          sum(v@.map(|i, x| x as int)) < s as int ==> result == -1,
          sum(v@.map(|i, x| x as int)) >= s as int ==> result == min((sum(v@.map(|i, x| x as int)) - s as int) / n as int, min_seq(v@.map(|i, x| x as int))) as i8,
          result == -1 || result >= 0

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |2-

  }

  fn main() {}