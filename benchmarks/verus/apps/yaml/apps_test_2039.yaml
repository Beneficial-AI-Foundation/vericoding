vc-description: |-
  Given an array of integers, count the number of local extrema.
  A local minimum is an element strictly less than both neighbors.
  A local maximum is an element strictly greater than both neighbors.
  First and last elements cannot be local extrema since they lack two neighbors.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn valid_input(n: int, a: Seq<int>) -> bool {
      n >= 1 && a.len() == n
  }

  spec fn count_local_extrema(n: int, a: Seq<int>) -> int
      recommends valid_input(n, a)
  {
      Set::<int>::new(|i: int| 1 <= i < n - 1 && ((a[i] > a[i-1] && a[i] > a[i+1]) || (a[i] < a[i-1] && a[i] < a[i+1]))).len() as int
  }

  spec fn is_local_extremum(a: Seq<int>, i: int) -> bool
      recommends 0 <= i < a.len()
  {
      1 <= i < a.len() - 1 && ((a[i] > a[i-1] && a[i] > a[i+1]) || (a[i] < a[i-1] && a[i] < a[i+1]))
  }

vc-helpers: |

vc-spec: |-
  fn solve(n: int, a: Seq<int>) -> (result: int)
      requires 
          valid_input(n, a)
      ensures 
          result >= 0,
          n <= 2 ==> result == 0,
          n > 2 ==> result <= n - 2,
          result == count_local_extrema(n, a)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}
