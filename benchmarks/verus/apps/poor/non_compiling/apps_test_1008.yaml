vc-description: |-
  Given a string s and an integer k, determine if s can be split into exactly k
  palindromes of equal length. Return "YES" if possible, "NO" otherwise.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
      spec fn is_palindrome(s: Seq<char>) -> bool {
          forall|i: int| 0 <= i < s.len() / 2 ==> s[i] == s[s.len() - 1 - i]
      }

vc-helpers: |-

vc-spec: |-
      fn solve(s: Seq<char>, k: int) -> (result: Seq<char>)
          requires k > 0
          ensures result == seq!['Y', 'E', 'S'] || result == seq!['N', 'O']
          ensures s.len() % k != 0 ==> result == seq!['N', 'O']
          ensures s.len() % k == 0 && (forall|i: int| 0 <= i < k ==> is_palindrome(s.subrange(i * (s.len() / k), (i + 1) * (s.len() / k)))) ==> result == seq!['Y', 'E', 'S']
          ensures s.len() % k == 0 && (exists|i: int| 0 <= i < k && !is_palindrome(s.subrange(i * (s.len() / k), (i + 1) * (s.len() / k)))) ==> result == seq!['N', 'O']

vc-code: |-
      {
          // impl-start
          assume(false);
          seq!['N', 'O']
          // impl-end
      }

vc-postamble: |-

  }

  fn main() {}