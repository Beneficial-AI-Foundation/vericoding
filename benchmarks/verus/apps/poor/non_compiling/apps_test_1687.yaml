vc-description: |-
  Given an array of positive integers, find an element from the array such that all elements
  in the array are divisible by it. If no such element exists, return -1. If multiple valid
  elements exist, return any one of them.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {
  spec fn min(a: Seq<int>) -> int
      recommends a.len() > 0
  {
      choose|x: int| a.contains(x) && forall|i: int| 0 <= i < a.len() ==> x <= a[i]
  }

vc-helpers: |

vc-spec: |-
  fn solve(a: Vec<i8>) -> (result: i8)
      requires 
          a.len() > 0,
          forall|i: int| 0 <= i < a.len() ==> a[i] as int > 0,
      ensures 
          result as int == -1 || exists|i: int| 0 <= i < a.len() && a[i] == result,
          result as int != -1 ==> forall|i: int| 0 <= i < a.len() ==> a[i] as int % result as int == 0,
          result as int == -1 ==> forall|x: int| (exists|i: int| 0 <= i < a.len() && a[i] as int == x) ==> exists|i: int| 0 <= i < a.len() && a[i] as int % x != 0,
          (forall|i: int| 0 <= i < a.len() ==> a[i] as int % min(a@.map(|i: int, x: i8| x as int)) == 0) ==> result as int == min(a@.map(|i: int, x: i8| x as int)),
          (exists|i: int| 0 <= i < a.len() && a[i] as int % min(a@.map(|i: int, x: i8| x as int)) != 0) ==> result as int == -1,

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |2-

  }

  fn main() {}