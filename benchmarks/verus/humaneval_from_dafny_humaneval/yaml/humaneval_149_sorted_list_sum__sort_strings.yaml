vc-description: |-
  function_signature: fn sort_strings(list: Seq<Seq<char>>) -> (sorted: Seq<Seq<char>>)

  Sort elements. Ensures: returns the correct size/count; returns a sorted permutation
  of the input.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn comparison(a: Seq<char>, b: Seq<char>, i: int) -> bool 
      decreases a.len() - i, b.len() - i
  {
      if (0 <= i <= a.len() && 0 <= i <= b.len()) {
          if (i < a.len() && i < b.len()) {
              if a.index(i) < b.index(i) {
                  true
              } else if a.index(i) > b.index(i) {
                  false
              } else {
                  comparison(a, b, i + 1)
              }
          } else {
              if a.len() <= b.len() {
                  true
              } else {
                  false
              }
          }
      } else {
          false
      }
  }

vc-helpers: |-

vc-spec: |-
  fn sort_strings(list: Seq<Seq<char>>) -> (sorted: Seq<Seq<char>>)
      ensures
          sorted.len() == list.len(),
          sorted.to_multiset() == list.to_multiset(),

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}