vc-description: |-
  This task involves counting hexadecimal digits that represent prime numbers in a given hexadecimal string. The prime hexadecimal digits are: 2, 3, 5, 7, B (decimal 11), and D (decimal 13). The implementation should iterate through the string and count occurrences of these specific characters.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn is_hex_char(c: char) -> bool {
      '0' <= c <= '9' || 'A' <= c <= 'F'
  }

  spec fn is_valid_hex_string(s: Seq<char>) -> bool {
      forall|i: int| #![auto] 0 <= i < s.len() ==> is_hex_char(s[i])
  }

  spec fn is_prime_hex_digit(c: char) -> bool {
      c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D'
  }

  spec fn count_prime_hex_digits(s: Seq<char>) -> int
      decreases s.len()
  {
      if s.len() == 0 {
          0int
      } else {
          (if is_prime_hex_digit(s[0]) { 1int } else { 0int }) + count_prime_hex_digits(s.subrange(1, s.len() as int))
      }
  }

vc-helpers: |-
  proof fn append_count_lemma(s: Seq<char>, c: char)
      ensures count_prime_hex_digits(s.push(c)) == count_prime_hex_digits(s) + (if is_prime_hex_digit(c) { 1int } else { 0int })
      decreases s.len()
  {
      assume(false); /* TODO: Remove this line and implement the proof */
  }

vc-spec: |-
  fn hex_key(num: &str) -> (count: usize)
      requires
          is_valid_hex_string(num@),
      ensures
          count >= 0,
          count <= num@.len(),
          count == count_prime_hex_digits(num@),

vc-code: |-
  {
      assume(false);
      0
  }

vc-postamble: |-

  }

  fn main() {}