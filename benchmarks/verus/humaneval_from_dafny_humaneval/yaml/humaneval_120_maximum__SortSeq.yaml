vc-description: |-
  function_signature: fn sort_seq(s: &Seq<int>) -> (sorted: Seq<int>)

  Sort elements. Ensures: the result is sorted according to the ordering relation;
  returns the correct size/count; returns a sorted permutation of the input; the result
  is sorted according to the ordering relation; the result is sorted according to
  the ordering relation; the result is sorted according to the ordering relation;
  the result is sorted according to the ordering relation.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn sort_seq(s: &Seq<int>) -> (sorted: Seq<int>)
      ensures 
          forall|i: int, j: int| 0 <= i < j < sorted.len() ==> #[trigger] sorted[i] <= #[trigger] sorted[j],
          sorted.len() == s.len(),
          s.to_multiset() == sorted.to_multiset(),
          forall|i: int| 0 <= i < s.len() ==> exists|j: int| 0 <= j < sorted.len() && #[trigger] s[i] == #[trigger] sorted[j],
          forall|x: int| #[trigger] s.contains(x) ==> #[trigger] sorted.contains(x),
          forall|i: int| 0 <= i < s.len() ==> exists|j: int| 0 <= j < sorted.len() && #[trigger] sorted[i] == #[trigger] s[j],
          forall|x: int| #[trigger] sorted.contains(x) ==> #[trigger] s.contains(x),

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}