vc-description: |-
  function_signature: fn decimal_to_binary(decimal: nat) -> Seq<char>

  You will be given a number in decimal form and your task is to convert it to binary
  format. The function should return a sequence, with each character representing a
  binary number. Each character in the sequence will be '0' or '1'.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn is_binary_string(s: Seq<char>) -> bool {
    s.len() > 0 && (s.len() > 1 ==> s[0] != '0') &&
    forall|i: int| 0 <= i < s.len() ==> (s[i] == '0' || s[i] == '1')
  }

  spec fn decimal_to_binary_helper(n: nat) -> Seq<char>
    decreases n
  {
    if n == 0 {
      seq!['0']
    } else if n == 1 {
      seq!['1']
    } else {
      decimal_to_binary_helper(n / 2).add(decimal_to_binary_helper(n % 2))
    }
  }

  spec fn binary_to_decimal(s: Seq<char>) -> nat
    decreases s.len()
  {
    if s.len() <= 0 {
      0
    } else if s.len() == 1 {
      if s[0] == '0' { 0 } else { 1 }
    } else {
      binary_to_decimal(s.take((s.len() - 1) as int)) * 2 + 
      binary_to_decimal(s.skip((s.len() - 1) as int))
    }
  }

vc-helpers: |-

vc-spec: |-
  fn decimal_to_binary(n: nat) -> (s: Seq<char>)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}