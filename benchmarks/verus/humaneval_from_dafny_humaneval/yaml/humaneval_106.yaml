vc-description: |-
  This task requires implementing a method that generates a sequence
  of natural numbers based on position-dependent calculations. For each position i
  (0-indexed), if (i+1) is even, the element should be the factorial of (i+1); if
  (i+1) is odd, the element should be the sum of integers from 1 to (i+1).

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn factorial(n: nat) -> nat
      decreases n
  {
      if n <= 1 { 1 } else { n * factorial((n - 1) as nat) }
  }

  spec fn sum_range(n: nat) -> nat
      decreases n
  {
      if n == 0 { 0 } else { n + sum_range((n - 1) as nat) }
  }

  spec fn valid_result(n: nat, result: Seq<nat>) -> bool
  {
      result.len() == n &&
      forall|i: int| 0 <= i < n ==> 
          (if (i + 1) % 2 == 0 { result[i] == factorial((i + 1) as nat) }
           else { result[i] == sum_range((i + 1) as nat) })
  }

vc-helpers: |-

vc-spec: |-
  fn f(n: nat) -> (result: Vec<nat>)
      ensures valid_result(n, result@)

vc-code: |-
  {
      assume(false);
      Vec::new()
  }

vc-postamble: |-

  }

  fn main() {}