vc-description: |-
  This verification task involves implementing a method to determine
  if there exist three distinct elements at different positions in a list of integers
  that sum to zero. The implementation should exhaustively check all possible combinations
  of three indices and return true if any triple sums to zero.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn has_triple_sum_to_zero(l: Seq<int>) -> bool {
      exists|i: int, j: int, k: int| 0 <= i < j < k < l.len() && l[i] + l[j] + l[k] == 0
  }

vc-helpers: |-

vc-spec: |-
  fn triples_sum_to_zero(l: Seq<int>) -> (result: bool)
      ensures result == has_triple_sum_to_zero(l)

vc-code: |-
  {
      // impl-start
      assume(false);
      false
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {}