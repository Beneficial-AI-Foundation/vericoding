vc-description: |-
  This verification task implements a function that computes the sum
  of squares of all positive odd integers in a list containing both integers and real
  numbers. The function should ignore negative numbers and non-integers, returning
  0 for an empty list.

  The implementation needs to handle a mixed datatype that can represent both integers
  and reals, properly identify positive odd integers (including reals that represent
  integers), and maintain correctness through loop invariants.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  enum Number {
      Int(int),
      Real(int), /* Using int to represent real since Verus doesn't have native real type */
  }

  spec fn is_integer(r: int) -> bool {
      true /* Since we're using int to represent real, this is always true */
  }

  spec fn is_positive_odd_integer(n: Number) -> bool {
      match n {
          Number::Int(i) => i > 0 && i % 2 == 1,
          Number::Real(r) => is_integer(r) && r > 0 && r % 2 == 1,
      }
  }

  spec fn square_value(n: Number) -> int {
      match n {
          Number::Int(i) => i * i,
          Number::Real(r) => r * r,
      }
  }

  spec fn sum_of_squares(lst: Seq<Number>, i: nat) -> int
      decreases i
  {
      if i == 0 {
          0
      } else if is_positive_odd_integer(lst[(i - 1) as int]) {
          square_value(lst[(i - 1) as int]) + sum_of_squares(lst, (i - 1) as nat)
      } else {
          sum_of_squares(lst, (i - 1) as nat)
      }
  }

vc-helpers: |-

vc-spec: |-
  fn double_the_difference(lst: Seq<Number>) -> (result: i32)
      ensures 
          result >= 0,
          result == sum_of_squares(lst, lst.len()) as i32,
          lst.len() == 0 ==> result == 0

vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {}