vc-description: |-
  function_signature: fn sort_seq(s: SortSeqState) -> (sorted: SortSeqState)

  Sort elements. Ensures: the result is sorted according to the ordering relation;
  returns the correct size/count; returns a sorted permutation of the input.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  type SortSeqState = Seq<(int, int)>;

  spec fn less(a: (int, int), b: (int, int)) -> bool {
      let (x, y) = a;
      let (u, v) = b;
      x < u || (x == u && y > v)
  }

  spec fn less_eq(a: (int, int), b: (int, int)) -> bool {
      let (x, y) = a;
      let (u, v) = b;
      (x == u && y == v) || less(a, b)
  }

vc-helpers: |-

vc-spec: |-
  fn sort_seq(s: SortSeqState) -> (sorted: SortSeqState)
      ensures 
          forall|i: int, j: int| 0 <= i < j < sorted.len() ==> less_eq(sorted[i], sorted[j]),
          sorted.len() == s.len(),
          s.to_multiset() == sorted.to_multiset()

vc-code: |-
  {
      assume(false);
      s
  }

vc-postamble: |-

  }

  fn main() {}