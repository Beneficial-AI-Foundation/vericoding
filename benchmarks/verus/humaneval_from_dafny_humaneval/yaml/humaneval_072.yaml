vc-description: |-
  This task determines if an object will fly based on two conditions:
  the given list of numbers must be palindromic, and the sum of all elements must
  be within a specified weight limit. The implementation needs to check both conditions
  and return true only if both are satisfied.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  spec fn is_palindrome(s: Seq<int>) -> bool {
      forall|i: int| #![trigger s[i]] 0 <= i < s.len() ==> s[i] == s[s.len() - 1 - i]
  }

  spec fn sum_elements(s: Seq<int>) -> int
      decreases s.len()
  {
      if s.len() == 0 {
          0
      } else {
          s[0] + sum_elements(s.subrange(1, s.len() as int))
      }
  }

vc-spec: |-
  fn will_it_fly(q: Vec<i8>, w: i8) -> (result: bool)
      ensures result == (is_palindrome(q@.map(|i: int, x: i8| x as int)) && sum_elements(q@.map(|i: int, x: i8| x as int)) <= w as int)

vc-code: |-
  {
      assume(false);
      false
  }

vc-postamble: |-

  }

  fn main() {}