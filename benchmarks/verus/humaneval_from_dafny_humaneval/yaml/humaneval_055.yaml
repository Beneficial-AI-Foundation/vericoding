vc-description: |-
  This task involves computing the n-th Fibonacci number using 1-based
  indexing, where fib(1) = 1 and fib(2) = 1. The implementation should efficiently
  calculate the result for positive integers n.

  The solution uses an iterative approach with loop invariants to maintain correctness
  while avoiding the exponential time complexity of a naive recursive implementation.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_input(n: int) -> bool {
      n > 0
  }

  spec fn fib_spec(n: int) -> int
      decreases n
  {
      if n <= 0 { 1 }
      else if n == 1 { 1 }
      else if n == 2 { 1 }
      else { fib_spec(n - 1) + fib_spec(n - 2) }
  }

vc-helpers: |-

vc-spec: |-
  fn fib(n: i8) -> (result: i8)
      requires valid_input(n as int)
      ensures 
          result as int == fib_spec(n as int) &&
          result > 0

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {}