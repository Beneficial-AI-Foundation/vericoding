vc-description: |-
  function_signature: def next_smallest(lst: List[int]) -> Optional[int]

  You are given a list of integers. Write a function next_smallest() that returns
  the 2nd smallest element of the list. Return None if there is no such element. TODO(George):
  Remove this when being reviewed The spec is defined as: if result is none there
  is no second smallest element, which exists in a finite list iff there are at least
  two distinct elements in the list. If result is some x, then x is the second smallest
  element of the list, the spec obtains the sublist of elements smaller than the result,
  and checks that this sublist does not contain two distinct elements (they are all
  the same).

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn get_val(mx: Option<int>) -> int
      recommends matches!(mx, Some(_))
  {
      match mx {
          Some(n) => n,
          None => 0
      }
  }

vc-helpers: |-

vc-spec: |-
  fn rolling_max(s: &[int]) -> (res: Option<int>)
      ensures 
          matches!(res, None) <==> s.len() < 2,
          matches!(res, Some(_)) ==> exists|x: int| 0 <= x < s.len() && s[x] == get_val(res),
          forall|x: int, y: int| 0 <= x < y < s.len() ==> s[x] <= get_val(res) || s[y] <= get_val(res),

vc-code: |-
  {
      assume(false);
      None
  }

vc-postamble: |-

  }

  fn main() {}