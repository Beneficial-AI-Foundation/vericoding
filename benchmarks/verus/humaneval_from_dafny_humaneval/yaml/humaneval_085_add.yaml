vc-description: |-
  function_signature: def solve(n: list[int]) -> int

  Given a non-empty list of integers lst, add the even elements that are at odd indices.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn sumc(s: Seq<int>, p: Seq<bool>) -> int
      recommends s.len() == p.len()
      decreases s.len()
  {
      if s.len() == 0 {
          0
      } else {
          (if p[0] { s[0] } else { 0 }) + sumc(s.subrange(1, s.len() as int), p.subrange(1, p.len() as int))
      }
  }

  spec fn add_condition(lst: Seq<int>) -> Seq<bool> {
      Seq::new(lst.len(), |i: int| i % 2 == 1 && lst[i] % 2 == 0)
  }

vc-helpers: |-

vc-spec: |-
  fn add(v: Seq<int>) -> (r: int)
      ensures r == sumc(v, add_condition(v))

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}