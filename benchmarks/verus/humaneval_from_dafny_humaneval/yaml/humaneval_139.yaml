vc-description: |-
  Compute the special factorial of a positive integer n, defined as the product of all factorials from 1! to n!: special_factorial(n) = n! × (n-1)! × (n-2)! × ... × 1!. The implementation should use an iterative approach with proper loop invariants to ensure correctness.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn factorial_func(num: int) -> int
      recommends num >= 0
      decreases num
  {
      if num <= 1 { 1 } else { num * factorial_func(num - 1) }
  }

  spec fn special_factorial_func(n: int) -> int
      recommends n >= 0
      decreases n
  {
      if n <= 0 { 1 }
      else { special_factorial_func(n - 1) * factorial_func(n) }
  }

  fn factorial(num: int) -> (result: int)
      requires 
          num >= 0,
      ensures 
          result == factorial_func(num),
          result > 0,
  {
      assume(false);
      unreached()
  }

vc-helpers: |-

vc-spec: |-
  fn special_factorial(n: int) -> (result: int)
      requires 
          n >= 0,
      ensures 
          result == special_factorial_func(n),
          result > 0,

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {}