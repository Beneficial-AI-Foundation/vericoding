vc-description: |-
  Count n-digit positive integers that start with 1 OR end with 1 using
  inclusion-exclusion principle. The task requires implementing a function that uses
  the inclusion-exclusion principle to count numbers that either start with 1, end
  with 1, or both, avoiding double-counting those that satisfy both conditions.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_input(n: int) -> bool {
    n >= 1
  }

  spec fn power(base: int, exp: int) -> int
    decreases exp when exp >= 0
  {
    if exp <= 0 { 1 } else { base * power(base, exp - 1) }
  }

  spec fn count_starts_with_1(n: int) -> int {
    power(10, n - 1)
  }

  spec fn count_ends_with_1(n: int) -> int {
    if n == 1 { 1 } else { 9 * power(10, n - 2) }
  }

  spec fn count_starts_and_ends_with_1(n: int) -> int {
    if n <= 2 { 1 } else { power(10, n - 2) }
  }

vc-helpers: |-

vc-spec: |-
  fn starts_one_ends(n: int) -> (result: int)
    requires 
      valid_input(n)
    ensures 
      result == count_starts_with_1(n) + count_ends_with_1(n) - count_starts_and_ends_with_1(n),
      result >= 0

vc-code: |-
  {
    assume(false);
    unreached()
  }

vc-postamble: |-

  }

  fn main() {}