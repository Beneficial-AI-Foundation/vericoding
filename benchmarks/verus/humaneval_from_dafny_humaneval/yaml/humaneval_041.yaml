vc-description: |-
  Given n cars moving left-to-right and n cars moving right-to-left
  on a straight infinite road, all at the same speed, calculate the total number of
  collisions. Cars pass through each other when they collide and continue moving.
  Each left-moving car will collide with each right-moving car exactly once, resulting
  in n * n total collisions.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_input(n: int) -> bool {
      n >= 0
  }

  spec fn collision_count(n: int) -> int
      recommends valid_input(n)
  {
      n * n
  }

  spec fn valid_result(n: int, result: int) -> bool
      recommends valid_input(n)
  {
      result == collision_count(n) && result >= 0
  }

vc-helpers: |-

vc-spec: |-
  fn car_race_collision(n: i32) -> (result: i32)
      requires valid_input(n as int)
      ensures valid_result(n as int, result as int)

vc-code: |-
  {
      assume(false);
      0
  }

vc-postamble: |-

  }

  fn main() {}