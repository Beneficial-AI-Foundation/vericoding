vc-description: |-
  This verification task implements a function to convert an integer
  from base 10 to a specified base (where base < 10) and return its string representation.
  The implementation should correctly handle the conversion process by repeatedly
  dividing by the target base to extract digits, then reversing the resulting digit
  sequence to produce the final string representation.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn power_of_base(base: int, exp: int) -> int
    decreases exp
  {
    if base >= 2 && exp >= 0 {
      if exp == 0 { 1 } else { base * power_of_base(base, exp - 1) }
    } else {
      0
    }
  }

  spec fn digits_to_int(digits: Seq<char>, base: int) -> int
    decreases digits.len()
  {
    if base >= 2 && (forall|i: int| 0 <= i < digits.len() ==> '0' <= digits[i] <= '9' && (digits[i] as int) - ('0' as int) < base) {
      if digits.len() == 0 { 0 }
      else { (digits[0] as int) - ('0' as int) + base * digits_to_int(digits.subrange(1, digits.len() as int), base) }
    } else {
      0
    }
  }

  spec fn string_to_int_in_base(s: Seq<char>, base: int) -> int
    decreases s.len()
  {
    if base >= 2 && s.len() > 0 && (forall|i: int| 0 <= i < s.len() ==> '0' <= s[i] <= '9' && (s[i] as int) - ('0' as int) < base) {
      if s.len() == 1 {
        (s[0] as int) - ('0' as int)
      } else {
        string_to_int_in_base(s.subrange(0, s.len() - 1), base) * base + ((s[s.len() - 1] as int) - ('0' as int))
      }
    } else {
      0
    }
  }

vc-helpers: |-
  proof fn digits_reversal_lemma(digits: Seq<char>, reversed: Seq<char>, base: int)
    requires 
      base >= 2,
      digits.len() == reversed.len() > 0,
      forall|i: int| 0 <= i < digits.len() ==> '0' <= digits[i] <= '9' && (digits[i] as int) - ('0' as int) < base,
      forall|i: int| 0 <= i < reversed.len() ==> reversed[i] == digits[digits.len() - 1 - i],
    ensures string_to_int_in_base(reversed, base) == digits_to_int(digits, base)
    decreases digits.len()
  {
    assume(false); /* TODO: Remove this line and implement the proof */
  }

vc-spec: |-
  fn change_base(x: int, base: int) -> (result: Vec<char>)
    requires 
      base >= 2 && base < 10,
      x >= 0,
    ensures 
      x == 0 ==> result@ == seq!['0'],
      x > 0 ==> result@.len() > 0 && result@[0] != '0',
      forall|i: int| 0 <= i < result@.len() ==> '0' <= result@[i] <= '9' && (result@[i] as int) - ('0' as int) < base,
      x > 0 ==> string_to_int_in_base(result@, base) == x,

vc-code: |-
  {
    assume(false);
    Vec::new()
  }

vc-postamble: |-

  }

  fn main() {}