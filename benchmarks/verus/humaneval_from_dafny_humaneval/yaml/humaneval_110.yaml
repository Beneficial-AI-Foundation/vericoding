vc-description: |-
  This task involves determining if it's possible to exchange elements
  between two non-empty lists of integers such that the first list contains only even
  numbers. The method should return "YES" if such an exchange is possible, "NO" otherwise.


  The key insight is that we need at least as many even numbers across both lists
  as the length of the first list to make the first list contain only even numbers.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn count_even(lst: Seq<int>) -> int
      decreases lst.len()
  {
      if lst.len() == 0 {
          0
      } else {
          if lst[0] % 2 == 0 {
              1 + count_even(lst.skip(1))
          } else {
              count_even(lst.skip(1))
          }
      }
  }

  spec fn valid_input(lst1: Seq<int>, lst2: Seq<int>) -> bool {
      lst1.len() > 0 && lst2.len() > 0
  }

  spec fn can_exchange(lst1: Seq<int>, lst2: Seq<int>) -> bool {
      count_even(lst1) + count_even(lst2) >= lst1.len()
  }

vc-helpers: |-

vc-spec: |-
  fn exchange(lst1: Vec<i8>, lst2: Vec<i8>) -> (result: String)
      requires 
          valid_input(lst1.view().map(|_i, x| x as int), lst2.view().map(|_i, x| x as int)),
      ensures 
          result@ == seq!['Y', 'E', 'S'] || result@ == seq!['N', 'O'],
          (result@ == seq!['Y', 'E', 'S']) == can_exchange(lst1.view().map(|_i, x| x as int), lst2.view().map(|_i, x| x as int)),

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}