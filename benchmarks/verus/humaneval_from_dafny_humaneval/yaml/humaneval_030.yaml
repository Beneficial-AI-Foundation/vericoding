vc-description: |-
  This task implements a function to filter positive numbers from a
  list of integers. The function should return a new sequence containing only the
  positive numbers (greater than 0) while preserving their original order from the
  input sequence.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn is_positive(x: int) -> bool {
      x > 0
  }

  spec fn all_positive(s: Seq<int>) -> bool {
      forall|i: int| 0 <= i < s.len() ==> is_positive(#[trigger] s[i])
  }

  spec fn all_elements_from_original(result: Seq<int>, original: Seq<int>) -> bool {
      forall|x: int| #[trigger] result.contains(x) ==> original.contains(x)
  }

  spec fn contains_all_positives(result: Seq<int>, original: Seq<int>) -> bool {
      forall|i: int| 0 <= i < original.len() && is_positive(original[i]) ==> result.contains(#[trigger] original[i])
  }

  spec fn preserves_order(result: Seq<int>, original: Seq<int>) -> bool {
      forall|i: int, j: int| 0 <= i < j < result.len() ==> 
          (exists|k1: int, k2: int| 0 <= k1 < k2 < original.len() && original[k1] == #[trigger] result[i] && original[k2] == #[trigger] result[j] &&
          forall|k: int| k1 < k < k2 ==> !is_positive(original[k]))
  }

  spec fn count_positives(s: Seq<int>) -> int {
      s.len() as int
  }

vc-helpers: |-

vc-spec: |-
  fn get_positive(l: Seq<int>) -> (result: Seq<int>)
      ensures 
          all_positive(result),
          all_elements_from_original(result, l),
          contains_all_positives(result, l),
          result.len() == count_positives(l),
          preserves_order(result, l),

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {}