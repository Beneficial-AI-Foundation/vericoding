vc-description: |-
  function_signature: fn encode_shift(s: Vec<char>) -> (t: Vec<char>)

  Encode data. Requires: the condition holds for all values. Ensures: returns the
  correct size/count; the condition holds for all values.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn encode_char(c: char) -> char {
      ((c as int - 'a' as int + 5) % 26 + 'a' as int) as char
  }

  spec fn decode_char(c: char) -> char {
      ((c as int - 'a' as int - 5) % 26 + 'a' as int) as char
  }

vc-helpers: |-

vc-spec: |-
  fn encode_shift(s: Vec<char>) -> (t: Vec<char>)
      requires forall|i: int| 0 <= i < s.len() ==> 'a' <= #[trigger] s[i] <= 'z'
      ensures s.len() == t.len() && forall|i: int| 0 <= i < s.len() ==> t[i] == encode_char(s[i])

vc-code: |-
  {
      assume(false);
      Vec::new()
  }

vc-postamble: |-

  }

  fn main() {}