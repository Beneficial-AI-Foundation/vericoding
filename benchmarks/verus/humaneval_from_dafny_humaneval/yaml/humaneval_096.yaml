vc-description: |-
  This verification task involves implementing a function that returns
  all prime numbers strictly less than a given non-negative integer n, in ascending
  order. The implementation should correctly identify prime numbers using a helper
  method and build the result sequence while maintaining the sorted order.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn is_prime_number(num: int) -> bool {
      num >= 2 && forall|k: int| 2 <= k < num ==> #[trigger] (num % k) != 0
  }

  fn is_prime(num: int) -> (prime: bool)
      requires num >= 0
      ensures prime == is_prime_number(num)
  {
      assume(false);
      false
  }

vc-helpers: |-

vc-spec: |-
  fn count_up_to(n: i8) -> (result: Vec<i8>)
      requires n as int >= 0
      ensures 
          forall|i: int| 0 <= i < result.len() ==> is_prime_number(result[i] as int),
          forall|i: int| 0 <= i < result.len() ==> (result[i] as int) < (n as int),
          forall|p: int| 2 <= p < (n as int) && is_prime_number(p) ==> result@.contains(p as i8),
          forall|i: int, j: int| 0 <= i < j < result.len() ==> (result[i] as int) < (result[j] as int)

vc-code: |-
  {
      assume(false);
      Vec::new()
  }

vc-postamble: |-

  }

  fn main() {}