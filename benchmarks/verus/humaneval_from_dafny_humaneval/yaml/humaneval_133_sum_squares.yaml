vc-description: |-
  function_signature: def sum_squares(lst: List[float]) -> int

  You are given a list of numbers. You need to return the sum of squared numbers in
  the given list, round each element in the list to the upper int(Ceiling) first.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn sum(s: Seq<int>) -> int
      decreases s.len()
  {
      if s.len() == 0 { 0 } else { s[0] + sum(s.subrange(1, s.len() as int)) }
  }

  spec fn ceil(f: int) -> int {
      f + 1
  }

  spec fn square_seq(lst: Seq<int>) -> Seq<int> {
      Seq::new(lst.len(), |i: int| ceil(lst[i]) * ceil(lst[i]))
  }

vc-helpers: |-

vc-spec: |-
  fn sum_squares(lst: Seq<int>) -> (r: int)
      ensures r == sum(square_seq(lst))

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}