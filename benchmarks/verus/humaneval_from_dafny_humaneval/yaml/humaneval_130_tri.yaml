vc-description: |-
  function_signature: fn tri(n: nat) -> nat

  Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in the
  last couple centuries. However, what people don't know is Tribonacci sequence.
  Tribonacci sequence is defined by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2,
  if n is even. tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd. For example:
  tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 +
  3 = 8 You are given a non-negative integer number n, you have to a return a list
  of the first n + 1 numbers of the Tribonacci sequence.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn tri(n: nat) -> nat
    decreases if n % 2 == 0 { 0 } else { n }
  {
    if n == 1 { 3 }
    else if n % 2 == 0 { 1 + n / 2 }
    else { tri((n - 1) as nat) + tri((n - 2) as nat) + tri(n + 1) }
  }

vc-helpers: |-

vc-spec: |-
  fn tribonacci(n: nat) -> (result: Vec<nat>)
    ensures 
      result.len() == n + 1 &&
      (forall|i: int| 0 <= i <= n ==> result[i] == tri(i as nat))

vc-code: |-
  {
    assume(false);
    Vec::new()
  }

vc-postamble: |-

  }

  fn main() {}