vc-description: |-
  This task implements a function that compares two lists of strings
  by their total character count. Given two lists of strings, the function should
  return the list that has the smaller total character count across all its strings.
  If both lists have the same total character count, return the first list.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn total_chars(lst: Seq<Seq<char>>) -> nat
      decreases lst.len()
  {
      if lst.len() == 0 {
          0
      } else {
          lst[0].len() + total_chars(lst.subrange(1, lst.len() as int))
      }
  }

vc-helpers: |-
  proof fn total_chars_prefix(lst: Seq<Seq<char>>, i: nat)
      requires 0 <= i < lst.len()
      ensures total_chars(lst.subrange(0, i as int + 1)) == total_chars(lst.subrange(0, i as int)) + lst[i as int].len()
      decreases i
  {
      assume(false); /* TODO: Remove this line and implement the proof */
  }

vc-spec: |-
  fn total_match(lst1: Vec<Vec<char>>, lst2: Vec<Vec<char>>) -> (result: Vec<Vec<char>>)
      ensures 
          result@ == lst1@ || result@ == lst2@,
          total_chars(lst1@.map_values(|v: Vec<char>| v@)) <= total_chars(lst2@.map_values(|v: Vec<char>| v@)) ==> result@ == lst1@,
          total_chars(lst1@.map_values(|v: Vec<char>| v@)) > total_chars(lst2@.map_values(|v: Vec<char>| v@)) ==> result@ == lst2@

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}