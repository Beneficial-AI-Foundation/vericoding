vc-description: |-
  function_signature: fn how_many_times(string: Seq<char>, substring: Seq<char>) -> usize

  Find how many times a given substring can be found in the original string. Count
  overlaping cases.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn how_many_times(s: Seq<char>, substr: Seq<char>) -> (times: usize)
      ensures times == Set::new(|i: int| 0 <= i <= s.len() - substr.len() && s.subrange(i, i + substr.len()) == substr).len()

vc-code: |-
  {
      assume(false);
      0
  }

vc-postamble: |-

  }

  fn main() {}