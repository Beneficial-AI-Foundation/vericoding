vc-description: |-
  This task involves implementing the greatest common divisor (GCD)
  function for two integers. The GCD is the largest positive integer that divides
  both numbers without remainder, with special cases for zero values.

  The implementation should use the Euclidean algorithm, which repeatedly applies
  the property that GCD(a,b) = GCD(b, a mod b) until one operand becomes zero.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn abs(x: int) -> nat {
      if x >= 0 { x as nat } else { (-x) as nat }
  }

  spec fn divides(d: int, n: int) -> bool {
      if d == 0 { n == 0 } else { n % d == 0 }
  }

vc-helpers: |-

vc-spec: |-
  fn greatest_common_divisor(a: i64, b: i64) -> (result: u64)
      ensures 
          result > 0 <==> (a != 0 || b != 0),
          result == 0 <==> (a == 0 && b == 0),
          divides(result as int, a as int) && divides(result as int, b as int),
          forall|d: int| d > 0 && divides(d, a as int) && divides(d, b as int) ==> d <= result

vc-code: |-
  {
      assume(false);
      0
  }

vc-postamble: |-

  }

  fn main() {}