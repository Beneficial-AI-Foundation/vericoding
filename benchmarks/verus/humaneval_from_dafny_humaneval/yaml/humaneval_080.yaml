vc-description: |-
  This task involves determining if a string is "happy". A string is
  considered happy if it has a length of at least 3 characters and in every substring
  of 3 consecutive characters, all characters are distinct (no duplicates). The implementation
  should efficiently check this condition and return the appropriate boolean result.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_length(s: Seq<char>) -> bool {
      s.len() >= 3
  }

  spec fn all_windows_distinct(s: Seq<char>) -> bool {
      forall|i: int| 0 <= i <= s.len() - 3 ==> #[trigger] s[i] != s[i+1] && s[i] != s[i+2] && s[i+1] != s[i+2]
  }

  spec fn is_happy_spec(s: Seq<char>) -> bool {
      valid_length(s) && all_windows_distinct(s)
  }

vc-helpers: |-

vc-spec: |-
  fn is_happy(s: Seq<char>) -> (result: bool)
      ensures result == is_happy_spec(s)

vc-code: |-
  {
      // impl-start
      assume(false);
      false
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {}