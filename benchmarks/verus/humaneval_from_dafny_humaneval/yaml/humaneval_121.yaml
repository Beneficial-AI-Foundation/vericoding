vc-description: |-
  This task requires implementing a method that calculates the sum of all odd numbers located at even-indexed positions in a non-empty sequence of integers. The positions are 0-indexed, so we consider positions 0, 2, 4, etc.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn sum_odd_at_even_positions(lst: Seq<int>, pos: int) -> int
      decreases if pos < lst.len() { lst.len() - pos } else { 0 }
  {
      if pos >= lst.len() {
          0
      } else if lst[pos] % 2 == 1 {
          lst[pos] + sum_odd_at_even_positions(lst, pos + 2)
      } else {
          sum_odd_at_even_positions(lst, pos + 2)
      }
  }

vc-helpers: |-

vc-spec: |-
  fn solution(lst: Seq<int>) -> (result: int)
      requires lst.len() > 0
      ensures result == sum_odd_at_even_positions(lst, 0)

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-

  }

  fn main() {}