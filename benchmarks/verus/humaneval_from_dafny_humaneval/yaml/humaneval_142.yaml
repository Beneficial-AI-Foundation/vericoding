vc-description: 'Transform each element in a list of integers based on its index position:
  square elements at indices that are multiples of 3, cube elements at indices that
  are multiples of 4 but not 3, and leave other elements unchanged. Return the sum
  of all transformed elements.'
vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn transform_element(value: int, index: int) -> int
  {
      if index % 3 == 0 { 
          value * value
      } else if index % 4 == 0 { 
          value * value * value
      } else { 
          value
      }
  }

  spec fn sum_partial(lst: Seq<int>, n: int) -> int
      decreases n
      when 0 <= n <= lst.len()
  {
      if n == 0 { 
          0
      } else { 
          sum_partial(lst, n-1) + transform_element(lst[n-1], n-1)
      }
  }

  spec fn sum_transformed(lst: Seq<int>) -> int
  {
      sum_partial(lst, lst.len() as int)
  }

vc-helpers: ''
vc-spec: |-
  fn sum_squares(lst: Seq<int>) -> (result: int)
      ensures result == sum_transformed(lst)

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {}