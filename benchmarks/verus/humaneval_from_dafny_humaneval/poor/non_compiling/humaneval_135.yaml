vc-description: |-
  The task is to find the largest index in an array of distinct integers
  where an element is smaller than the element immediately before it. If no such index
  exists (i.e., the array is non-decreasing), return -1. The implementation should
  scan from right to left to efficiently find the largest such index.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn valid_input(arr: Seq<int>) -> bool {
      forall|i: int, j: int| 0 <= i < j < arr.len() ==> arr[i] != arr[j]
  }

  spec fn has_decrease_at(arr: Seq<int>, i: int) -> bool {
      1 <= i < arr.len() && arr[i] < arr[i-1]
  }

  spec fn is_largest_decrease_index(arr: Seq<int>, result: int) -> bool {
      has_decrease_at(arr, result) && 
      (forall|j: int| #[trigger] arr.index(j) >= 0 && result < j < arr.len() ==> arr.index(j) >= arr.index(j-1))
  }

  spec fn is_non_decreasing(arr: Seq<int>) -> bool {
      forall|i: int| #[trigger] arr.index(i) >= 0 && 1 <= i < arr.len() ==> arr.index(i) >= arr.index(i-1)
  }

vc-helpers: |-

vc-spec: |-
  fn can_arrange(arr: Seq<int>) -> (result: int)
      requires 
          valid_input(arr),
      ensures 
          result == -1 || (0 < result < arr.len()),
          result == -1 ==> is_non_decreasing(arr),
          result != -1 ==> is_largest_decrease_index(arr, result),
          result != -1 ==> (exists|i: int| has_decrease_at(arr, i)),

vc-code: |-
  {
      // impl-start
      assume(false);
      unreached()
      // impl-end
  }

vc-postamble: |-

  }

  fn main() {}