vc-description: |-
  This task requires writing a Verus method that inserts a subarray of characters into another array of characters at a specified index. The method takes the original array (oline) and, given the effective length l to consider, inserts another array of characters (nl) of effective length p starting at the index atPos. The resulting array is of length l + p and is constructed as follows:
  • All characters before the insertion position (atPos) remain unchanged.
  • The new characters from nl are inserted starting at index atPos.
  • The remaining characters from the original array (starting at atPos) are shifted right by p positions.
  
  -----Input-----
  The input consists of:
  • oline: An array of characters representing the original sequence.
  • l: A natural number indicating how many characters from oline to consider.
  • nl: An array of characters to be inserted into oline.
  • p: A natural number indicating how many characters from nl to consider for insertion.
  • atPos: A natural number indicating the position in oline where the insertion should occur (0-indexed).
  
  -----Output-----
  The output is an array of characters that is the result of inserting nl into oline at the given atPos. Specifically, the output array should:
  • Contain the original characters from index 0 up to (but not including) atPos.
  • Have the next p characters equal to the characters from nl.
  • Contain the remaining characters from oline (starting from atPos) shifted right by p positions.
  
  -----Note-----
  It is assumed that:
  • atPos is within the range [0, l].
  • l does not exceed the size of oline.
  • p does not exceed the size of nl.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn insert(oline: &Vec<char>, l: usize, nl: &Vec<char>, p: usize, at_pos: usize) -> (result: Vec<char>)
      requires
          l <= oline.len(),
          p <= nl.len(),
          at_pos <= l,
      ensures
          result.len() == l + p,
          forall|i: int| 0 <= i < p ==> #[trigger] result[at_pos + i] == nl[i],
          forall|i: int| 0 <= i < at_pos ==> #[trigger] result[i] == oline[i],
          forall|i: int| 0 <= i < (l - at_pos) ==> #[trigger] result[at_pos + p + i] == oline[at_pos + i],

vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}