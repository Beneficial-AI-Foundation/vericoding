vc-description: |-
  /*
  This task requires writing a Verus method that rotates an array of integers to the left by a specified offset.
  
  -----Input-----
  The input consists of:
  • a: An array of integers (which may be empty or non-empty).
  • offset: An integer representing the number of positions to rotate the array. The offset is assumed to be non-negative.
  
  -----Output-----
  The output is an array of integers that:
  • Has the same length as the input array.
  • For every valid index i, the output element at index i is equal to the input element at index ((i + offset) mod n), where n is the array size.
  
  -----Note-----
  If the array is empty, the method should return an empty array.
  */
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  fn rotate(a: &Vec<i32>, offset: int) -> (result: Vec<i32>)
      requires offset >= 0,
      ensures
          result.len() == a.len(),
          forall|i: int| 0 <= i < a.len() ==> {
              let src_idx = (i + offset) % (a.len() as int);
              #[trigger] result[i] == a[src_idx]
          },
vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {}