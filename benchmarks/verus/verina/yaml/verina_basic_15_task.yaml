vc-description: |-
  This task requires writing a Verus method that determines whether an array of integers contains at least one pair of consecutive numbers. The method should return true if there is any index where an element, when increased by one, equals the next element in the array. If no such consecutive pair exists, the method should return false.
  
  -----Input-----
  The input consists of:
  a: An array of integers (the array may be empty or non-empty).
  
  -----Output-----
  The output is a Boolean value:
  Returns true if there is at least one index where an element plus one equals the following element.
  Returns false if the array does not contain any consecutive numbers.
  
  -----Note-----
  There are no additional preconditions; the method will function correctly regardless of the array's size.
  
  /* 
      -- Invalid Inputs
      []
      -- Tests
      [
          {
              "input": {
                  "a": "#[1, 2, 3, 5]"
              },
              "expected": true,
              "unexpected": [
                  false
              ]
          },
          {
              "input": {
                  "a": "#[1, 3, 5, 7]"
              },
              "expected": false,
              "unexpected": [
                  true
              ]
          },
          {
              "input": {
                  "a": "#[]"
              },
              "expected": false,
              "unexpected": [
                  true
              ]
          },
          {
              "input": {
                  "a": "#[10]"
              },
              "expected": false,
              "unexpected": [
                  true
              ]
          },
          {
              "input": {
                  "a": "#[5, 6]"
              },
              "expected": true,
              "unexpected": [
                  false
              ]
          },
          {
              "input": {
                  "a": "#[5, 7, 8, 10]"
              },
              "expected": true,
              "unexpected": [
                  false
              ]
          },
          {
              "input": {
                  "a": "#[9, 9, 10]"
              },
              "expected": true,
              "unexpected": [
                  false
              ]
          },
          {
              "input": {
                  "a": "#[3, 3, 3]"
              },
              "expected": false,
              "unexpected": [
                  true
              ]
          }
      ]
      */

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn contains_consecutive_numbers(a: &Vec<i32>) -> (result: bool)
      ensures
          result <==> exists|i: int| {
              &&& 0 <= i < a.len() - 1
              &&& #[trigger] a[i] + 1 == a[(i + 1) as int]
          },

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}

