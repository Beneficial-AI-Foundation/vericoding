vc-description: |-
  This task requires writing a Verus method that determines whether a given natural number is prime. A number (with n ≥ 2) is considered prime if it is divisible only by 1 and itself. The method should return true when the input number is prime and false otherwise.
  
  Input:
  The input consists of:
  n: A natural number (nat) such that n ≥ 2.
  
  Output:
  The output is a Boolean value:
  Returns true if the input number is prime (i.e., there is no integer k with 1 < k < n that divides n).
  Returns false if the input number is not prime (i.e., there exists an integer k with 1 < k < n that divides n).
  
  Note:
  The input is expected to satisfy the condition n ≥ 2.
  
  /* 
      Invalid Inputs
      [
          {
              "input": {
                  "n": 0
              }
          }
      ]
      Tests
      [
          {
              "input": {
                  "n": 2
              },
              "expected": true,
              "unexpected": [
                  false
              ]
          },
          {
              "input": {
                  "n": 3
              },
              "expected": true,
              "unexpected": [
                  false
              ]
          },
          {
              "input": {
                  "n": 4
              },
              "expected": false,
              "unexpected": [
                  true
              ]
          },
          {
              "input": {
                  "n": 5
              },
              "expected": true,
              "unexpected": [
                  false
              ]
          },
          {
              "input": {
                  "n": 9
              },
              "expected": false,
              "unexpected": [
                  true
              ]
          },
          {
              "input": {
                  "n": 11
              },
              "expected": true,
              "unexpected": [
                  false
              ]
          },
          {
              "input": {
                  "n": 12
              },
              "expected": false,
              "unexpected": [
                  true
              ]
          },
          {
              "input": {
                  "n": 13
              },
              "expected": true,
              "unexpected": [
                  false
              ]
          }
      ]
      */

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn is_prime(n: nat) -> (result: bool)
      requires n >= 2,
      ensures
          result ==> forall|k: nat| 2 <= k < n ==> #[trigger] (n % k) != 0,
          !result ==> exists|k: nat| 2 <= k < n && #[trigger] (n % k) == 0,

vc-code: |-
  {
      assume(false);
      unreached();
  }

vc-postamble: |-
  }
  fn main() {}

