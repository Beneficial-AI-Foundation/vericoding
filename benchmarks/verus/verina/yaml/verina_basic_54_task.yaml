vc-description: |-
  This task is about determining the minimum absolute difference between any pair of integers, where one integer is taken from the first sorted array and the other integer is taken from the second sorted array. The focus is on accurately finding the smallest absolute difference between any two elements from the arrays, independent of the specific techniques or programming language used.
  
  Input: The input consists of:
  • a: An array of integers, sorted in non-decreasing order and guaranteed to be non-empty.
  • b: An array of integers, also sorted in non-decreasing order and non-empty.
  
  Output: The output is a natural number (Nat) representing the minimum absolute difference between any element a[i] from the first array and b[j] from the second array.
  
  Note:
  • It is assumed that both arrays are non-empty.
  • The arrays are assumed to be sorted in non-decreasing order.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

  spec fn is_sorted(s: Seq<i32>) -> bool {
      forall|i: int, j: int| 0 <= i < j < s.len() ==> s[i] <= s[j]
  }

  spec fn abs_diff(x: int, y: int) -> nat {
      if x >= y { (x - y) as nat } else { (y - x) as nat }
  }

vc-helpers: |-

vc-spec: |-
  fn canyon_search(a: &Vec<i32>, b: &Vec<i32>) -> (result: u32)
      requires
          a.len() > 0,
          b.len() > 0,
          is_sorted(a@),
          is_sorted(b@),
      ensures
          exists|i: int, j: int| 0 <= i < a.len() && 0 <= j < b.len() && result as int == abs_diff(a[i], b[j]),
          forall|i: int, j: int| 0 <= i < a.len() && 0 <= j < b.len() ==> result as int <= abs_diff(a[i], b[j]),

vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}