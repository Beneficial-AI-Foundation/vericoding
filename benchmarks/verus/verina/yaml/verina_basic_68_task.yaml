vc-description: |-
  The task is to determine the position of a target integer in a given array. The goal is to return the index corresponding to the first occurrence of the target value. If the target is not present in the array, the result should indicate that by returning the size of the array. This description focuses entirely on understanding the problem without specifying any particular implementation method.
  
  -----Input-----
  The input consists of:
  • a: An array of integers.
  • e: An integer representing the target to search for in the array.
  
  -----Output-----
  The output is a natural number (Nat) which is:
  • The index of the first occurrence of the target integer if found.
  • The size of the array if the target integer is not present.
  
  -----Note-----
  There are no strict preconditions on the input; the method should work correctly for any array of integers. The specification ensures that the returned index is always valid: it is either within the array bounds with a matching element or equals the array's size if the element is absent.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn linear_search(a: &Vec<i32>, e: i32) -> (result: usize)
      ensures
          result <= a.len(),
          result == a.len() || a[result as int] == e,
          forall|i: int| 0 <= i < result ==> a[i] != e,

vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {
      /*
      -- Invalid Inputs
      []
      -- Tests
      [
          {
              "input": {
                  "a": "#[1, 3, 5, 7, 9]",
                  "e": 5
              },
              "expected": "2",
              "unexpected": [
                  "1",
                  "3",
                  "4"
              ]
          },
          {
              "input": {
                  "a": "#[2, 4, 6, 8]",
                  "e": 5
              },
              "expected": "4",
              "unexpected": [
                  "1",
                  "3",
                  "5"
              ]
          },
          {
              "input": {
                  "a": "#[5, 5, 5]",
                  "e": 5
              },
              "expected": "0",
              "unexpected": [
                  "1",
                  "2",
                  "3"
              ]
          },
          {
              "input": {
                  "a": "#[10, 9, 8, 7]",
                  "e": 10
              },
              "expected": "0",
              "unexpected": [
                  "1",
                  "2",
                  "3"
              ]
          },
          {
              "input": {
                  "a": "#[1, 2, 3, 3, 4]",
                  "e": 3
              },
              "expected": "2",
              "unexpected": [
                  "1",
                  "3",
                  "4"
              ]
          }
      ]
      */
  }