vc-description: |-
  This task is about calculating the absolute value of an integer. The goal is to determine the non-negative value of a given integer: if the integer is non-negative, it remains unchanged; if it is negative, its positive counterpart is returned.
  
  -----Input-----
  The input consists of:
  • x: An integer.
  
  -----Output-----
  The output is an integer that represents the absolute value of the input. Specifically:
  • If x is non-negative, the output is x.
  • If x is negative, the output is the negation of x (that is, a value y such that x + y = 0).
  
  -----Note-----
  This function should correctly handle zero, positive, and negative integers.

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn abs(x: int) -> int {
      if x >= 0 { x } else { -x }
  }

vc-helpers: |-

vc-spec: |-
  fn abs_impl(x: i32) -> (result: i32)
      ensures
          (x >= 0 ==> result == x) && (x < 0 ==> x + result == 0),

vc-code: |-
  {
      assume(false);
      0
  }

vc-postamble: |-
  }
  fn main() {}

