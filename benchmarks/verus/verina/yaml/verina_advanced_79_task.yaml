vc-description: |-
  This task requires writing a Verus method that implementing the "Two Sum" problem. Given a list of integers
  and a target integer, the function should return the indices of the two numbers that add up to
  the target. If no valid pair exists, the function should return none. And the indices returned must
  be within the bounds of the list. If multiple pair exists, return the first pair.
  
  -----Input-----
  - nums: A list of integers.
  - target: An integer representing the target sum.
  
  -----Output-----
  - An option type containing a pair of natural numbers (indices) such that
    nums[i] + nums[j] = target, if such a pair exists. Otherwise, it returns none.

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn two_sum(nums: Vec<i32>, target: i32) -> (result: Option<(usize, usize)>)
      ensures
          match result {
              None => {
                  forall|i: int, j: int| 0 <= i < nums.len() && 0 <= j < nums.len() && i != j ==> nums[i] + nums[j] != target
              },
              Some((i, j)) => {
                  i < j &&
                  j < nums.len() &&
                  nums[i as int] + nums[j as int] == target &&
                  forall|k1: int, k2: int| 0 <= k1 < nums.len() && 0 <= k2 < nums.len() && k1 < k2 && (k1 < i || (k1 == i && k2 < j)) ==> nums[k1] + nums[k2] != target
              }
          },

vc-code: |-
  {
      assume(false);
      None
  }

vc-postamble: |-
  }
  fn main() {
      /*
      -- Tests
      [
          {
              "input": {
                  "nums": "[2, 7, 11, 15]",
                  "target": 9
              },
              "expected": "some (0, 1)",
              "unexpected": [
                  "some (1, 2)",
                  "none"
              ]
          },
          {
              "input": {
                  "nums": "[3, 2, 4]",
                  "target": 6
              },
              "expected": "some (1, 2)",
              "unexpected": [
                  "some (0, 2)",
                  "none"
              ]
          },
          {
              "input": {
                  "nums": "[3, 3]",
                  "target": 6
              },
              "expected": "some (0, 1)",
              "unexpected": [
                  "some (1, 1)",
                  "none"
              ]
          },
          {
              "input": {
                  "nums": "[1, 2, 3]",
                  "target": 7
              },
              "expected": "none",
              "unexpected": [
                  "some (0, 2)"
              ]
          },
          {
              "input": {
                  "nums": "[0, 4, 3, 0]",
                  "target": 0
              },
              "expected": "some (0, 3)",
              "unexpected": [
                  "some (1, 2)",
                  "none"
              ]
          }
      ]
      */
  }

