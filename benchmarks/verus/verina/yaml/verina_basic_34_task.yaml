vc-description: |-
  /*
  This task requires writing a Verus method that extracts even numbers from an array of integers. The method should return a new array containing only the even numbers found in the input array, while preserving the order in which they appear.
  
  -----Input-----
  The input consists of:
  arr: An array of integers.
  
  -----Output-----
  The output is an array of integers:
  Returns an array containing all the even numbers from the input array. Specifically:
  - Every element in the output array is an even integer.
  - All even integers present in the input array are included in the output array.
  - The relative order of the even integers is preserved as in the input array.
  
  -----Note-----
  There are no preconditions for this task; the method will work with any array, including empty arrays (which are not null).
  */
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-
  spec fn is_even(n: i32) -> bool {
      n % 2 == 0
  }
vc-spec: |-
  fn find_even_numbers(arr: &Vec<i32>) -> (result: Vec<i32>)
      ensures
          forall|x: i32| result@.contains(x) ==> is_even(x) && arr@.contains(x),
          forall|x: i32| arr@.contains(x) && is_even(x) ==> result@.contains(x),
          forall|i: int, j: int| 0 <= i < arr.len() && 0 <= j < arr.len() && i <= j && 
              is_even(arr[i]) && is_even(arr[j]) ==> {
                  exists|ri: int, rj: int| 0 <= ri < result.len() && 0 <= rj < result.len() && 
                      ri <= rj && result[ri] == arr[i] && result[rj] == arr[j]
              },
vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {}