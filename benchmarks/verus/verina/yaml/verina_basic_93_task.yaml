vc-description: |-
  This task requires swapping two 8-bit unsigned integers. Given two unsigned integer inputs, the goal is to produce an output pair where the first element is the original second input and the second element is the original first input. The problem focuses solely on exchanging the values without specifying any particular method to achieve the swap.
  
  Input:
  The input consists of:
  • X: A u8 value.
  • Y: A u8 value.
  
  Output:
  The output is a pair of u8 values (newX, newY) where:
  • newX is equal to the original Y.
  • newY is equal to the original X.
  
  Note:
  There are no additional preconditions; the function is meant to work correctly for any pair of u8 values by leveraging bitwise xor operations.

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn swap_bitvectors(x: u8, y: u8) -> (result: (u8, u8))
      ensures
          result.0 == y && result.1 == x,
          x != y ==> (result.0 != x && result.1 != y),

vc-code: |-
  {
      assume(false);
      unreached();
  }

vc-postamble: |-
  }
  fn main() {
      /* 
      -- Invalid Inputs
      []
      -- Tests
      [
          {
              "input": {
                  "X": 0,
                  "Y": 0
              },
              "expected": "(0, 0)",
              "unexpected": [
                  "(0, 1)",
                  "(1, 0)"
              ]
          },
          {
              "input": {
                  "X": 5,
                  "Y": 10
              },
              "expected": "(10, 5)",
              "unexpected": [
                  "(5, 10)",
                  "(10, 10)",
                  "(5, 5)"
              ]
          },
          {
              "input": {
                  "X": 255,
                  "Y": 1
              },
              "expected": "(1, 255)",
              "unexpected": [
                  "(255, 1)",
                  "(1, 254)",
                  "(0, 255)"
              ]
          },
          {
              "input": {
                  "X": 128,
                  "Y": 64
              },
              "expected": "(64, 128)",
              "unexpected": [
                  "(128, 64)",
                  "(64, 64)",
                  "(0, 128)"
              ]
          },
          {
              "input": {
                  "X": 15,
                  "Y": 15
              },
              "expected": "(15, 15)",
              "unexpected": [
                  "(15, 16)",
                  "(16, 15)",
                  "(14, 15)"
              ]
          }
      ]
      */
  }

