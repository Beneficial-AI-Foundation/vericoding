vc-description: |-
  This task requires writing a Verus method that computes the element-wise modulo between two arrays of integers. The method should produce a new array where each element is the remainder after dividing the corresponding element from the first array by the element from the second array.
  
  Input:
  The input consists of:
  a: An array of integers.
  b: An array of integers.
  
  Output:
  The output is an array of integers:
  Returns a new array in which each element is the result of taking the modulo of the corresponding elements from the two input arrays.
  
  Note:
  Preconditions:
  - Both arrays must be non-null.
  - Both arrays must have the same length.
  - All elements in the second array should be non-zero.
  
  Postconditions:
  - The length of the resulting array is the same as the length of the input arrays.
  - Each element in the resulting array is the modulo of the corresponding elements in the input arrays.

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn element_wise_modulo(a: &Vec<i32>, b: &Vec<i32>) -> (result: Vec<i32>)
      requires
          a.len() == b.len(),
          a.len() > 0,
          forall|i: int| 0 <= i < b.len() ==> b[i] != 0,
      ensures
          result.len() == a.len(),
          forall|i: int| 0 <= i < result.len() ==> result[i] == a[i] % b[i],

vc-code: |-
  {
      assume(false);
      unreached();
  }

vc-postamble: |-
  }
  fn main() {
      // Invalid Inputs
      // [
      //     {
      //         "input": {
      //             "a": "[1]",
      //             "b": "[4, 0]"
      //         }
      //     }
      // ]
      // Tests
      // [
      //     {
      //         "input": {
      //             "a": "[10, 20, 30]",
      //             "b": "[3, 7, 5]"
      //         },
      //         "expected": "[1, 6, 0]",
      //         "unexpected": [
      //             "[1, 0, 0]",
      //             "[0, 6, 0]"
      //         ]
      //     },
      //     {
      //         "input": {
      //             "a": "[100, 200, 300, 400]",
      //             "b": "[10, 20, 30, 50]"
      //         },
      //         "expected": "[0, 0, 0, 0]",
      //         "unexpected": [
      //             "[0, 0, 0, 1]",
      //             "[1, 0, 0, 0]"
      //         ]
      //     },
      //     {
      //         "input": {
      //             "a": "[-10, -20, 30]",
      //             "b": "[3, -7, 5]"
      //         },
      //         "expected": "[2, 1, 0]",
      //         "unexpected": [
      //             "[-1, -5, 0]",
      //             "[-1, -6, 1]",
      //             "[0, -6, 0]"
      //         ]
      //     }
      // ]
  }

