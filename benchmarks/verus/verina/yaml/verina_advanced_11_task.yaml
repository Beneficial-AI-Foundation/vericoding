vc-description: |-
  This task requires writing a Verus method that finds the **majority element** in a list of integers. A majority element is defined as an element that appears **strictly more than half** the number of times in the list.
  
  If such an element exists, the method should return that element. Otherwise, it should return `-1`. The implementation must ensure that the result is either the majority element (if one exists) or `-1` (when no such element appears more than ⌊n/2⌋ times).
  
  **Input**
  The input consists of a list of integers:
  - lst: A list of integers, which may include duplicates and negative numbers. The list may also be empty.
  
  **Output**
  The output is a single integer:
  - If a majority element exists in the input list, return that element.
  - If no majority element exists, return `-1`.

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn count_occurrences(x: i32, lst: Seq<i32>) -> nat {
      lst.filter(|y: i32| y == x).len()
  }

vc-helpers: |-

vc-spec: |-
  fn find_majority_element(lst: &Vec<i32>) -> (result: i32)
      ensures ({
          let lst_seq = lst@;
          let n = lst_seq.len();
          let majority = count_occurrences(result, lst_seq) > n / 2 && 
                        forall|x: i32| count_occurrences(x, lst_seq) <= n / 2 || x == result;
          (result == -1 ==> forall|x: i32| count_occurrences(x, lst_seq) <= n / 2) &&
          (result != -1 ==> majority)
      })

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}

