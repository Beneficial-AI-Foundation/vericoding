vc-description: |-
  This problem asks for a method to determine the sum of the first N natural numbers. The task focuses on computing the total when given an input N, ensuring that the value is 0 when N is 0 and correctly calculated for positive values of N.
  
  Input:
  The input consists of:
  â€¢ N: A natural number (nat) representing the count of the first natural numbers to sum.
  
  Output:
  The output is a natural number (nat), which is the sum of the first N natural numbers computed as: N * (N + 1) / 2.
  
  Note:
  The computation leverages a recursive implementation. There are no additional preconditions beyond providing a valid natural number.
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  fn cal_sum(n: nat) -> (result: nat)
      ensures 2 * result == n * (n + 1),
vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {}