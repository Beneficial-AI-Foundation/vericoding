vc-description: |-
  This task requires implementing the "Longest Increasing Subsequence" problem in Verus.
  Given a list of integers, the function should compute the length of the longest strictly increasing
  subsequence. A subsequence is formed by deleting zero or more elements without changing the order.
  If the list is empty, the function should return 0.
  
  -----Input-----
  - nums: A list of integers.
  
  -----Output-----
  - A natural number representing the length of the longest strictly increasing subsequence.
  - If there is no increasing subsequence, return 0.
  
  /* 
      -- Invalid Inputs
      []
      -- Tests
      [
          {
              "input": {
                  "nums": "[10, 9, 2, 5, 3, 7, 101, 18]"
              },
              "expected": 4,
              "unexpected": [
                  3,
                  5
              ]
          },
          {
              "input": {
                  "nums": "[0, 1, 0, 3, 2, 3]"
              },
              "expected": 4,
              "unexpected": [
                  3
              ]
          },
          {
              "input": {
                  "nums": "[7, 7, 7, 7, 7]"
              },
              "expected": 1,
              "unexpected": [
                  0,
                  2
              ]
          },
          {
              "input": {
                  "nums": "[]"
              },
              "expected": 0,
              "unexpected": [
                  1
              ]
          },
          {
              "input": {
                  "nums": "[4, 10, 4, 3, 8, 9]"
              },
              "expected": 3,
              "unexpected": [
                  2,
                  4
              ]
          }
      ]
      */

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn longest_increasing_subsequence(nums: Vec<i32>) -> (result: usize)
      ensures
          result >= 0,
          nums.len() == 0 ==> result == 0,

vc-code: |-
  {
      assume(false);
      unreached();
  }

vc-postamble: |-
  }
  fn main() {}

