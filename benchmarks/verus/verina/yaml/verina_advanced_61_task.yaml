vc-description: |-
  /*
  This task requires writing a Verus function that takes a list of integers and returns a new list. For each index i in the input list, the output at i is equal to the product of all numbers in the list except the number at index i. The solution must run in O(n) time without using the division operation.
  
  The input is a list of integers. For example, [1,2,3,4].
  
  The output is a list of integers where each element at index i is the product of every input element except the one at that index. For example, for the input [1,2,3,4], the output should be [24,12,8,6]. Each intermediate product is guaranteed to fit in a 32-bit integer.
  */
vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-
  /* Helper: Product of a sequence of integers */
  spec fn list_product(nums: Seq<i32>) -> int
      decreases nums.len()
  {
      if nums.len() == 0 { 1int } else { nums[0] as int * list_product(nums.subrange(1, nums.len() as int)) }
  }

vc-spec: |-
  fn product_except_self(nums: &Vec<i32>) -> (result: Vec<i32>)
      ensures
          result.len() == nums.len(),
          forall|i: int| 0 <= i < nums.len() ==> 
              result[i] as int == list_product(nums@.subrange(0, i)) * list_product(nums@.subrange(i + 1, nums.len() as int)),

vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }

vc-postamble: |-

  }
  fn main() {}