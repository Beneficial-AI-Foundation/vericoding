vc-description: |-
  This task requires writing a Verus method that given a natural number n, returns the smallest prime factor that is less than 10. If none exist, return 0

  -----Input-----
  The input consists of one natural number:
  n: The main natural number.

  -----Output-----
  The output is a natural number:
  Returns the smallest prime factor that is less than 10 or, if none exist, 0
vc-preamble: |-
  use vstd::prelude::*;

  verus! {
vc-helpers: |-

vc-spec: |-
  fn single_digit_prime_factor(n: nat) -> (result: nat)
      ensures
          result == 0 || result == 2 || result == 3 || result == 5 || result == 7,
          result == 0 ==> (n == 0 || (n % 2 != 0 && n % 3 != 0 && n % 5 != 0 && n % 7 != 0)),
          result != 0 ==> (n != 0 && n % result == 0 && 
              (result == 2 || n % 2 != 0) &&
              (result == 3 || n % 3 != 0) &&
              (result == 5 || n % 5 != 0) &&
              (result == 7 || n % 7 != 0)),
vc-code: |-
  {
      // impl-start
      assume(false);
      0
      // impl-end
  }
vc-postamble: |-

  }
  fn main() {}