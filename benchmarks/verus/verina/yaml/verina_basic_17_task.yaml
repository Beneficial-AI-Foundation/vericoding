vc-description: |-
  This task requires writing a Verus method that converts all uppercase characters in a given string to their lowercase equivalents while keeping the other characters unchanged. The output string must have the same length as the input string.
  
  -----Input-----
  The input consists of:
  s: A string that may contain both uppercase and lowercase characters.
  
  -----Output-----
  The output is a string:
  Returns a new string where every uppercase letter has been converted to lowercase, and every non-uppercase character remains exactly as in the input.
  
  -----Note-----
  There are no preconditions; the method is expected to work for any non-null string.
  
  /* Helper function to check if a character is uppercase */
  
  /* Helper function to shift character by 32 positions */

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_uppercase(c: char) -> bool {
      'A' <= c && c <= 'Z'
  }
  
  spec fn shift32(c: char) -> char {
      ((c as int) + 32) as char
  }

vc-helpers: |-

vc-spec: |-
  fn to_lowercase(s: &Vec<char>) -> (result: Vec<char>)
      ensures
          result.len() == s.len(),
          forall|i: int| 0 <= i < s@.len() ==> {
              if is_uppercase(s@[i]) {
                  result@[i] == shift32(s@[i])
              } else {
                  result@[i] == s@[i]
              }
          },

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}