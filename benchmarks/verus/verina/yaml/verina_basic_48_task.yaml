vc-description: |-
  This task requires writing a Verus method that determines whether a given non-negative natural number is a perfect square. In other words, the method should return true if there exists a natural number whose square is equal to the input number, and false if no such number exists.
  
  Input:
  The input consists of a single natural number:
  n: A non-negative natural number (nat).
  
  Output:
  The output is a Boolean value:
  Returns true if there exists an integer such that its square equals the input n.
  Returns false if no integer squared equals the input n.
  
  /* 
      Invalid Inputs
      []
      Tests
      [
          {
              "input": {
                  "n": 0
              },
              "expected": true,
              "unexpected": [
                  false
              ]
          },
          {
              "input": {
                  "n": 1
              },
              "expected": true,
              "unexpected": [
                  false
              ]
          },
          {
              "input": {
                  "n": 4
              },
              "expected": true,
              "unexpected": [
                  false
              ]
          },
          {
              "input": {
                  "n": 9
              },
              "expected": true,
              "unexpected": [
                  false
              ]
          },
          {
              "input": {
                  "n": 2
              },
              "expected": false,
              "unexpected": [
                  true
              ]
          },
          {
              "input": {
                  "n": 3
              },
              "expected": false,
              "unexpected": [
                  true
              ]
          },
          {
              "input": {
                  "n": 10
              },
              "expected": false,
              "unexpected": [
                  true
              ]
          },
          {
              "input": {
                  "n": 16
              },
              "expected": true,
              "unexpected": [
                  false
              ]
          },
          {
              "input": {
                  "n": 25
              },
              "expected": true,
              "unexpected": [
                  false
              ]
          },
          {
              "input": {
                  "n": 26
              },
              "expected": false,
              "unexpected": [
                  true
              ]
          }
      ]
      */

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_perfect_square(n: nat) -> bool {
      exists|i: nat| #[trigger] (i * i) == n
  }

vc-helpers: |-

vc-spec: |-
  fn is_perfect_square_fn(n: u8) -> (result: bool)
      ensures result <==> is_perfect_square(n as nat),

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}