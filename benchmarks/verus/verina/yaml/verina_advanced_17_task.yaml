vc-description: |-
  This task requires implementing the insertion sort algorithm to sort a list of integers in ascending order. The function should take a list of integers as input and return a new list containing the same elements sorted in non-decreasing order.
  
  -----Input-----
  The input is:
  
  l: A list of integers to be sorted.
  
  -----Output-----
  The output is:
  
  A list of integers that is sorted in non-decreasing order and is a permutation of the input list.

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn insertion_sort(l: Vec<i32>) -> (result: Vec<i32>)
      ensures
          /* The result is sorted in non-decreasing order */
          forall|i: int, j: int| 0 <= i < j < result.len() ==> result[i] <= result[j],
          /* The result is a permutation of the input */
          result@.to_multiset() == l@.to_multiset(),

vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }

vc-postamble: |-
  }
  fn main() {}

