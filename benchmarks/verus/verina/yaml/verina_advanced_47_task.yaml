vc-description: |-
  This task requires writing a Verus method that merges all overlapping intervals from a given list of intervals.
  
  Each interval is represented as a pair [start, end], indicating the start and end of the interval. If two intervals overlap, they should be merged into a single interval that spans from the minimum start to the maximum end of the overlapping intervals.
  
  The goal is to return a list of non-overlapping intervals that cover all the input intervals after merging.
  
  -----Input-----
  The input consists of one array:
  
  intervals: An array of pairs of integers where intervals[i] = [startᵢ, endᵢ] represents the start and end of the ith interval.
  
  -----Output-----
  The output is an array of pairs of integers:
  Returns the list of merged, non-overlapping intervals sorted by their start times.

vc-preamble: |-
  use vstd::prelude::*;

  verus! {

vc-helpers: |-

vc-spec: |-
  fn merge_intervals(intervals: &Vec<(i32, i32)>) -> (result: Vec<(i32, i32)>)
      ensures
          /* All original intervals are covered by some result interval */
          forall|i: int| 0 <= i < intervals.len() ==> 
              exists|j: int| 0 <= j < result.len() && {
                  let (s, e) = intervals[i];
                  let (rs, re) = result[j];
                  rs <= s && e <= re
              },
          /* No intervals in the result overlap */
          forall|i: int, j: int| 0 <= i < j < result.len() ==> {
              let (_, e1) = result[i];
              let (s2, _) = result[j];
              e1 < s2
          },

vc-code: |-
  {
      // impl-start
      assume(false);
      Vec::new()
      // impl-end
  }

  proof fn merge_intervals_spec_satisfied(intervals: &Vec<(i32, i32)>)
      ensures
          /* All original intervals are covered by some result interval */
          forall|i: int| 0 <= i < intervals.len() ==> 
              exists|j: int| 0 <= j < merge_intervals(intervals).len() && {
                  let (s, e) = intervals[i];
                  let (rs, re) = merge_intervals(intervals)[j];
                  rs <= s && e <= re
              },
          /* No intervals in the result overlap */
          forall|i: int, j: int| 0 <= i < j < merge_intervals(intervals).len() ==> {
              let (_, e1) = merge_intervals(intervals)[i];
              let (s2, _) = merge_intervals(intervals)[j];
              e1 < s2
          }
  {
      assume(false); /* TODO: Remove this line and implement the proof */
  }

vc-postamble: |-

  }
  fn main() {
      /*
      -- Invalid Inputs
      []
      -- Tests
      [
          {
              "input": {
                  "intervals": "[(1, 3), (2, 6), (8, 10), (15, 18)]"
              },
              "expected": "[(1, 6), (8, 10), (15, 18)]",
              "unexpected": [
                  "[(1, 3), (2, 6), (15, 19)]"
              ]
          },
          {
              "input": {
                  "intervals": "[(1, 4), (4, 5)]"
              },
              "expected": "[(1, 5)]",
              "unexpected": [
                  "[(1, 4), (4, 5), (1, 6)]"
              ]
          },
          {
              "input": {
                  "intervals": "[(1, 10), (2, 3), (4, 5)]"
              },
              "expected": "[(1, 10)]",
              "unexpected": [
                  "[(2, 3), (4, 5), (1, 5)]"
              ]
          },
          {
              "input": {
                  "intervals": "[(1, 2), (3, 4), (5, 6)]"
              },
              "expected": "[(1, 2), (3, 4), (5, 6)]",
              "unexpected": [
                  "[(1, 4), (5, 6), (1, 6)]"
              ]
          },
          {
              "input": {
                  "intervals": "[(5, 6), (1, 3), (2, 4)]"
              },
              "expected": "[(1, 4), (5, 6)]",
              "unexpected": [
                  "[(1, 3), (2, 4), (1, 6)]"
              ]
          }
      ]
      */
  }