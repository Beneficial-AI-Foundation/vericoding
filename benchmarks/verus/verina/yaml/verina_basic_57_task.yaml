vc-description: |-
  This task involves determining how many numbers within an array are less than a specified threshold. The problem is focused on identifying and counting such numbers based purely on their value in relation to the threshold.
  
  -----Input-----
  The input consists of:
  • numbers: An array of integers (which may be empty or non-empty).
  • threshold: An integer that serves as the comparison threshold.
  
  -----Output-----
  The output is a natural number (Nat) representing the count of elements in the array that are less than the given threshold.
  
  -----Note-----
  There are no additional preconditions; the function should work correctly for any array of integers and any integer threshold.

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  /* Helper function to recursively count elements less than threshold */
  spec fn count_less_than_spec(numbers: Seq<i32>, threshold: i32) -> nat
      decreases numbers.len()
  {
      if numbers.len() == 0 {
          0
      } else {
          let first = numbers[0];
          let rest = numbers.subrange(1, numbers.len() as int);
          if first < threshold {
              1 + count_less_than_spec(rest, threshold)
          } else {
              count_less_than_spec(rest, threshold)
          }
      }
  }

vc-helpers: |-

vc-spec: |-
  fn count_less_than(numbers: &Vec<i32>, threshold: i32) -> (result: usize)
      ensures
          result == count_less_than_spec(numbers@, threshold),

vc-code: |-
  {
      assume(false);
      unreached();
  }

vc-postamble: |-
  }
  fn main() {}

