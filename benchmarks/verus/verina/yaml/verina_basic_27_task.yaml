vc-description: |-
  This task requires writing a Verus method that identifies the first repeated character in a given string. The method should return an Option containing a character. The Option value indicates whether any character in the string is repeated. If it is Some(c), the accompanying character is the first character that appears more than once. If it is None, it indicates that there are no repeated characters in the string.
  
  Input:
  The input consists of:
  s: A vector of characters.
  
  Output:
  The output is Option<char>:
  - Returns Some(c) with the first repeated character in the string if any repeated character is found.
  - Returns None if no repeated characters are present.
  
  Note:
  There are no preconditions; the method is expected to work for any vector of characters.

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn count_char(chars: Seq<char>, c: char) -> nat 
      decreases chars.len()
  {
      if chars.len() == 0 {
          0
      } else if chars[0] == c {
          1 + count_char(chars.subrange(1, chars.len() as int), c)
      } else {
          count_char(chars.subrange(1, chars.len() as int), c)
      }
  }
  
  spec fn has_no_duplicates_up_to(chars: Seq<char>, end_idx: int) -> bool {
      forall|i: int, j: int| 0 <= i < j < end_idx ==> #[trigger] chars[i] != #[trigger] chars[j]
  }
  
  spec fn has_no_duplicates(chars: Seq<char>) -> bool {
      forall|i: int, j: int| 0 <= i < j < chars.len() ==> #[trigger] chars[i] != #[trigger] chars[j]
  }
  
  spec fn first_occurrence_index(chars: Seq<char>, c: char) -> int {
      choose|i: int| 0 <= i < chars.len() && chars[i] == c
  }
  
  spec fn second_occurrence_exists(chars: Seq<char>, c: char) -> bool {
      exists|i: int, j: int| 0 <= i < j < chars.len() && #[trigger] chars[i] == c && #[trigger] chars[j] == c
  }

vc-helpers: |-

vc-spec: |-
  fn find_first_repeated_char(s: &Vec<char>) -> (result: Option<char>)
      ensures match result {
          Some(c) => {
              let chars = s@;
              count_char(chars, c) >= 2 &&
              second_occurrence_exists(chars, c) &&
              {
                  let first_idx = first_occurrence_index(chars, c);
                  let second_idx = choose|j: int| first_idx < j < chars.len() && chars[j] == c;
                  has_no_duplicates_up_to(chars, second_idx)
              }
          },
          None => {
              has_no_duplicates(s@)
          }
      }

vc-code: |-
  {
      assume(false);
      unreached()
  }

vc-postamble: |-
  }
  fn main() {}