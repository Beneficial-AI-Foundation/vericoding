vc-description: |-
  This task requires writing a Verus method that returns the k most frequent elements from a list of integers. The method should count the frequency of each distinct element in the list and return the k elements with the highest frequency.
  
  -----Input-----
  The input consists of two values:
  nums: A list of integers, possibly with duplicates.
  k: A natural number indicating how many of the most frequent elements to return. Assuming k <= # of distinct elements in nums.
  
  -----Output-----
  The output is a list of integers:
  Returns exactly k integers representing the elements that appear most frequently in the input list in the order from the higher frequency to lower frequency.
  If two numbers have the same frequency, use the order of the first occurrence in nums.

vc-preamble: |-
  use vstd::prelude::*;
  use vstd::seq_lib::*;
  
  verus! {

vc-helpers: |-

vc-spec: |-
  fn top_k_frequent(nums: &Vec<i32>, k: usize) -> (result: Vec<i32>)
      requires 
          k <= nums@.to_set().len(),
      ensures
          result.len() == k,
          forall|x: i32| result@.contains(x) ==> nums@.contains(x),
          result@.no_duplicates(),

vc-code: |-
  {
      assume(false);
      unreached();
  }

vc-postamble: |-
  }
  fn main() {
      /*
      -- Invalid Inputs
      [
          {
              "input": {
                  "nums": "[1, 2, 3]",
                  "k": 4
              }
          }
      ]
      -- Tests
      [
          {
              "input": {
                  "nums": "[1, 1, 1, 2, 2, 3]",
                  "k": 2
              },
              "expected": "[1, 2]",
              "unexpected": [
                  "[1, 3]",
                  "[2, 3]"
              ]
          },
          {
              "input": {
                  "nums": "[4, 1, -1, 2, -1, 2, 3]",
                  "k": 2
              },
              "expected": "[-1, 2]",
              "unexpected": [
                  "[-1, 4]",
                  "[4, 3]"
              ]
          },
          {
              "input": {
                  "nums": "[5]",
                  "k": 1
              },
              "expected": "[5]",
              "unexpected": [
                  "[]"
              ]
          },
          {
              "input": {
                  "nums": "[7, 7, 7, 8, 8, 9]",
                  "k": 1
              },
              "expected": "[7]",
              "unexpected": [
                  "[8]"
              ]
          },
          {
              "input": {
                  "nums": "[]",
                  "k": 0
              },
              "expected": "[]",
              "unexpected": [
                  "[0]"
              ]
          }
      ]
      */
  }

