vc-description: |-
  This task requires writing a Verus method that searches an array of integers to locate the first odd number. The method should return a pair where the first element is a Boolean indicating whether an odd number was found, and the second element is the index of that odd number if found, or -1 if no odd number exists. When an odd number is found, the method should return the smallest index at which an odd number occurs.
  
  -----Input-----
  The input consists of:
  a: An array of integers.
  
  -----Output-----
  The output is a pair (Bool, Int):
  - If the Boolean is true, then the integer represents the smallest index of an odd number in the array.
  - If the Boolean is false, then there are no odd numbers in the array, and the accompanying integer is -1.
  
  -----Note-----
  - The input array is assumed to be non-null.
  - If multiple odd numbers are present, the index returned should correspond to the first occurrence.

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_odd(x: i32) -> bool {
      x % 2 != 0
  }

vc-helpers: |-

vc-spec: |-
  fn find_first_odd(a: &Vec<i32>) -> (result: Option<usize>)
      requires a.len() > 0,
      ensures
          match result {
              Some(idx) => idx < a.len() && is_odd(a[idx as int]) &&
                  forall|j: int| 0 <= j < idx ==> !is_odd(a[j]),
              None => forall|i: int| 0 <= i < a.len() ==> !is_odd(a[i]),
          },

vc-code: |-
  {
      assume(false);
      unreached();
  }

vc-postamble: |-
  }
  fn main() {}

