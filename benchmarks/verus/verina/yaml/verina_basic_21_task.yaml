vc-description: |-
  This task requires writing a Verus method that determines whether one list is a sublist of another. In other words, the method should check if the first list appears as a contiguous sequence within the second list and return true if it does, and false otherwise.
  
  -----Input-----
  The input consists of two lists of integers:
  sub: A list of integers representing the potential sublist.
  main: A list of integers in which to search for the sublist.
  
  -----Output-----
  The output is a Boolean value:
  Returns true if the first list appears as a contiguous sequence within the second list.
  Returns false if the first list does not appear as a contiguous sequence in the second list.
  
  -----Note-----
  There are no preconditions for this method; the sequences are always non-null.

vc-preamble: |-
  use vstd::prelude::*;
  
  verus! {
  
  spec fn is_subseq_at(sub: Vec<i32>, main: Vec<i32>, i: int) -> bool {
      0 <= i && i + sub.len() <= main.len() && 
      (forall|j: int| 0 <= j < sub.len() ==> sub[j] == main[i + j])
  }

vc-helpers: |-

vc-spec: |-
  fn is_sublist(sub: &Vec<i32>, main: &Vec<i32>) -> (result: bool)
      ensures
          result <==> exists|i: int| is_subseq_at(*sub, *main, i),

vc-code: |-
  {
      // impl-start
      assume(false);
      false
      // impl-end
  }

vc-postamble: |-
  }
  fn main() {}

