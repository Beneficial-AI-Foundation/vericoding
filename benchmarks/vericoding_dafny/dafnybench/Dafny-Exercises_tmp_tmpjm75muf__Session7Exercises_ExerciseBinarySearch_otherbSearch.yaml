vc-description: |-

vc-preamble: |-
  predicate sorted(s : seq<int>) {
      forall u, w :: 0 <= u < w < |s| ==> s[u] <= s[w]
  }

  method binarySearch(v:array<int>, elem:int) returns (p:int)
   requires sorted(v[0..v.Length])
   ensures -1<=p<v.Length
   ensures (forall u::0<=u<=p ==> v[u]<=elem) && (forall w::p<w<v.Length ==> v[w]>elem)
   {
    var c,f:=0,v.Length-1;
    while (c<=f)
       decreases f-c
       invariant 0<=c<=v.Length && -1<=f<=v.Length-1 && c<=f+1
       invariant (forall u::0<=u<c ==> v[u]<=elem) && 
                 (forall w::f<w<v.Length ==> v[w]>elem)
    {
     var m:=(c+f)/2;
     if (v[m]<=elem) 
          {c:=m+1;}
     else {f:=m-1;}
     }
     p:=c-1;


   }






  //Recursive binary search

vc-helpers: |-
  // <vc-helpers>
  // </vc-helpers>

vc-spec: |-
  method otherbSearch(v:array<int>, elem:int) returns (b:bool,p:int)
   requires sorted(v[0..v.Length])
   ensures 0<=p<=v.Length
   ensures b == (elem in v[0..v.Length])
   ensures b ==> p<v.Length && v[p]==elem
   ensures !b ==> (forall u::0<=u<p ==> v[u]<elem) && 
                 (forall w::p<=w<v.Length ==> v[w]>elem)
   //Implement and verify

vc-code: |-
  {
      p:=binarySearch(v, elem);

      if(p==-1){
        b:= false;
        p:=p+1;
      }
      else{
         b:=v[p] == elem;
         p:=p + if b then 0 else 1;
      }
  }

vc-postamble: |-

