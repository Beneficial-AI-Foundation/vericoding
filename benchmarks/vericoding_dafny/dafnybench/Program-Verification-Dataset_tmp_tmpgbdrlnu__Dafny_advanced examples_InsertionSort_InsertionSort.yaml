vc-description: |-

vc-preamble: |-
  predicate sorted (a:array<int>, start:int, end:int) // all "before" end are sorted      
   requires a!=null       
   requires 0<=start<=end<=a.Length       
   reads a       
   {           
     forall j,k:: start<=j<k<end ==> a[j]<=a[k]
   }

vc-helpers: |-
  // <vc-helpers>
  // </vc-helpers>

vc-spec: |-
  method InsertionSort (a:array<int>)
  requires a!=null && a.Length>1 
  ensures sorted(a, 0, a.Length) 
  modifies a

vc-code: |-
  {
      var up := 1;   

      while (up < a.Length)   // outer loop   
      invariant 1 <= up <= a.Length 
      invariant sorted(a,0,up)
      {  
          var down := up-1;      
          var temp := a[up];          
          while down >= 0 && a[down+1] < a[down]    // inner loop
              invariant forall j,k | 0 <= j < k < up+1 && k != down+1 :: a[j]<=a[k]
          {
              a[down],a[down+1] := a[down+1],a[down];           
              down := down-1;       
          }            
          up := up+1;

      }
  }

vc-postamble: |-

