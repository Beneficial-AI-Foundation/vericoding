vc-preamble: |-
  // Checks if array 'a' is sorted.
  predicate isSorted(a: array<int>)
    reads a
  {
      forall i, j :: 0 <= i < j < a.Length ==> a[i] <= a[j]
  }

  // Finds a value 'x' in a sorted array 'a', and returns its index,
  // or -1 if not found.
vc-helpers: ''
vc-spec: "method binarySearch(a: array<int>, x: int) returns (index: int) \n    requires isSorted(a)\n    ensures -1 <= index < a.Length\n    ensures if index != -1 then a[index] == x \n        else x !in a[..] //forall i :: 0 <= i < a.Length ==> a[i] != x"
vc-code: |-
  {
    assume false;
  }
vc-postamble: "// Simple test cases to check the post-condition.\n\n/*\na) Identify adequate pre and post-conditions for this method, \nand encode them as “requires” and “ensures” clauses in Dafny. \nYou can use the predicate below if needed.\n\nb) Identify an adequate loop variant and loop invariant, and encode them \nas “decreases” and “invariant” clauses in Dafny.\n*/"
