vc-preamble: |-
  predicate sorted(s : seq<int>) {
      forall u, w :: 0 <= u < w < |s| ==> s[u] <= s[w]
  }

  method binarySearch(v:array<int>, elem:int) returns (p:int)
   requires sorted(v[0..v.Length])
   ensures -1<=p<v.Length
   ensures (forall u::0<=u<=p ==> v[u]<=elem) && (forall w::p<w<v.Length ==> v[w]>elem)
  {
    assume{:axiom} false;
  }






  //Recursive binary search
vc-helpers: ''
vc-spec: "method otherbSearch(v:array<int>, elem:int) returns (b:bool,p:int)\n requires sorted(v[0..v.Length])\n ensures 0<=p<=v.Length\n ensures b == (elem in v[0..v.Length])\n ensures b ==> p<v.Length && v[p]==elem\n ensures !b ==> (forall u::0<=u<p ==> v[u]<elem) && \n               (forall w::p<=w<v.Length ==> v[w]>elem)\n //Implement and verify"
vc-code: |-
  {
    assume false;
  }
vc-postamble: ''
