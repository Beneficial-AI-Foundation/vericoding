vc-preamble: |-

vc-helpers: |-

vc-spec: |-
  method swap<T>(a: array<T>, i: int, j: int)
    // requires a != null
    requires 0 <= i < a.Length && 0 <= j < a.Length
    modifies a
    ensures a[i] == old(a[j])
    ensures a[j] == old(a[i])
    ensures forall m :: 0 <= m < a.Length && m != i && m != j ==> a[m] == old(a[m])
    ensures multiset(a[..]) == old(multiset(a[..]))

vc-code: |-
  {
    assume false;
  }

vc-postamble: |-
  lemma eqMultiset_t<T>(t: T, s1: seq<T>, s2: seq<T>)
    requires multiset(s1) == multiset(s2)
    ensures t in s1 <==> t in s2
  {
    calc <==> {
      t in s1;
      t in multiset(s1);
      // Not necessary:
  //    t in multiset(s2);
  //    t in s2;
    }
  /*
    if (t in s1) {
      assert t in multiset(s1);
    }
    else {
      assert t !in multiset(s1);
    }
  */
  }

  lemma eqMultiset<T>(s1: seq<T>, s2: seq<T>)
    requires multiset(s1) == multiset(s2)
    ensures forall t :: t in s1 <==> t in s2
  {
    forall t {
      eqMultiset_t(t, s1, s2);
    }
  }

  function set_of_seq<T>(s: seq<T>): set<T>
  {
    set x: T | x in s :: x
  }

  lemma in_set_of_seq<T>(x: T, s: seq<T>)
    ensures x in s <==> x in set_of_seq(s)

  lemma subset_set_of_seq<T>(s1: seq<T>, s2: seq<T>)
    requires set_of_seq(s1) <= set_of_seq(s2)
    ensures forall x :: x in s1 ==> x in s2

