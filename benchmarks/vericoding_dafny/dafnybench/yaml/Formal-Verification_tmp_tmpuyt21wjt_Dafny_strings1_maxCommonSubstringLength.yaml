vc-preamble: "predicate isNotPrefixPred(pre:string, str:string)\n{\n    (|pre| > |str|) || \n    pre != str[..|pre|]\n}\n\n\nmethod isPrefix(pre: string, str: string) returns (res:bool)\n    ensures !res <==> isNotPrefixPred(pre,str)\n    ensures  res <==> isPrefixPredicate(pre,str)\n{\n  assume{:axiom} false;\n}\n\n\n\npredicate isPrefixPredicate(pre: string, str:string)\n{\n  |str| >= |pre| && pre <= str\n}\n\n\npredicate isSubstringPredicate (sub: string, str:string)\n{\n  |str| >= |sub| && (exists i :: 0 <= i <= |str| && isPrefixPredicate(sub, str[i..]))\n}\n\nmethod isSubstring(sub: string, str: string) returns (res:bool)\nensures res == isSubstringPredicate(sub, str)\n{\n  assume{:axiom} false;\n}\n\npredicate haveCommonKSubstringPredicate(k: nat, str1: string, str2: string)\n{\n  |str1| >= k && |str2| >= k && (exists i :: 0 <= i <= |str1| - k && isSubstringPredicate((str1[i..])[..k], str2))\n}\n\n\nmethod haveCommonKSubstring(k: nat, str1: string, str2: string) returns (found: bool)\n\
  \  ensures |str1| < k || |str2| < k ==> !found\n  ensures haveCommonKSubstringPredicate(k,str1,str2) == found\n{\n  assume{:axiom} false;\n}\n\n\npredicate maxCommonSubstringPredicate(str1: string, str2: string, len:nat)\n{\n   forall k :: len < k <= |str1| ==> !haveCommonKSubstringPredicate(k, str1, str2)\n}"
vc-helpers: ''
vc-spec: |-
  method maxCommonSubstringLength(str1: string, str2: string) returns (len:nat)
  ensures len <= |str1| && len <= |str2|
  ensures len >= 0
  ensures maxCommonSubstringPredicate(str1, str2, len)
vc-code: |-
  {
    assume false;
  }
vc-postamble: ''
