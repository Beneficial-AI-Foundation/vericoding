vc-preamble: "predicate isSubstring(sub: string, str: string)\n{\n    exists i :: 0 <= i <= |str| - |sub| && str[i..i+|sub|] == sub\n}\n\npredicate isPrefixPred(pre:string, str:string)\n{\n    (|pre| <= |str|) && \n    pre == str[..|pre|]\n}\n\npredicate isNotPrefixPred(pre:string, str:string)\n{\n    (|pre| > |str|) || \n    pre != str[..|pre|]\n}\n\npredicate isSubstringPred(sub:string, str:string)\n{\n    (exists i :: 0 <= i <= |str| &&  isPrefixPred(sub, str[i..]))\n}\n\npredicate isNotSubstringPred(sub:string, str:string)\n{\n    (forall i :: 0 <= i <= |str| ==> isNotPrefixPred(sub,str[i..]))\n}\n\n\n\n\npredicate haveCommonKSubstringPred(k:nat, str1:string, str2:string)\n{\n    exists i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k && isSubstringPred(str1[i1..j1],str2)\n}\n\npredicate haveNotCommonKSubstringPred(k:nat, str1:string, str2:string)\n{\n    forall i1, j1 :: 0 <= i1 <= |str1|- k && j1 == i1 + k ==>  isNotSubstringPred(str1[i1..j1],str2)\n}\n\nmethod haveCommonKSubstring(k:\
  \ nat, str1: string, str2: string) returns (found: bool)\n    ensures found  <==>  haveCommonKSubstringPred(k,str1,str2)\n    ensures !found <==> haveNotCommonKSubstringPred(k,str1,str2) // This postcondition follows from the above lemma.\n{\n  assume{:axiom} false;\n}"
vc-helpers: ''
vc-spec: |-
  method maxCommonSubstringLength(str1: string, str2: string) returns (len:nat)
      requires (|str1| <= |str2|)
      ensures (forall k :: len < k <= |str1| ==> !haveCommonKSubstringPred(k,str1,str2))
      ensures haveCommonKSubstringPred(len,str1,str2)
vc-code: |-
  {
    assume false;
  }
vc-postamble: ''
