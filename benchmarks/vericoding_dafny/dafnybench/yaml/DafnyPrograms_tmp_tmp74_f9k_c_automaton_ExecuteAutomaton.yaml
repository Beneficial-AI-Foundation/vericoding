vc-preamble: "/**\nConsider cellular automata: a row of cells is repeatedly updated according to a rule. In this exercise I dabbled with,\neach cell has the value either false or true. Each cell's next state depends only on the immediate neighbours, in the \ncase where the cell is at the edges of the row, the inexistent neighbours are replaced by \"false\". The automaton table \nwill contain the initial row, plus a row for each number of steps.\n */\nclass Automaton {\n\n/**\nThis method computes the automaton.\nProvide the initial row: init, the rule and the desired number of steps\n */"
vc-helpers: ''
vc-spec: |-
  method ExecuteAutomaton(init: seq<bool>, rule: (bool, bool, bool) -> bool, steps: nat)
    returns (table: seq<seq<bool>>)
    // we need the initial row to have the length bigger or equal to two
    requires |init| >= 2
    // after computation the automaton is made of the initial row plus a row for each of the steps
    ensures |table| == 1 + steps
    // the automaton must have the initial row at the top
    ensures table[0] == init;
    // all rows in the automaton must be the same length
    ensures forall i | 0 <= i < |table| :: |table[i]| == |init|
    // all the middle row elements (with existing neighbours) after a step, will be equal to the rule applied on the element in the previous state
    // and its neigbours
    ensures forall i | 0 <= i < |table| - 1 ::
              forall j | 1 <= j <= |table[i]| - 2 :: table[i + 1][j] == rule(table[i][j - 1], table[i][j], table[i][j + 1])
    // the corner row elements (with non-existing neighbours) after a step, will be equal to the rule applied on the element in the previous state,
    // its neighbour and false
    ensures forall i | 0 <= i < |table| - 1 ::
              table[i + 1][0] == rule(false, table[i][0], table[i][1]) && table[i + 1][|table[i]| - 1] == rule(table[i][|table[i]| - 2], table[i][|table[i]| - 1], false)
vc-code: |-
  {
    assume false;
  }
vc-postamble: '}'
