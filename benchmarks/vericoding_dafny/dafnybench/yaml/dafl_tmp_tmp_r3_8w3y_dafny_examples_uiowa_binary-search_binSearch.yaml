vc-preamble: |-
  ///////////////////
  // Binary search
  ///////////////////


  predicate isSorted(a:array<int>)
    reads a
  {
    forall i:nat, j:nat :: i <= j < a.Length ==> a[i] <= a[j]
  }


  // a[lo] <= a[lo+1] <= ... <= a[hi-2] <= a[hi-1]
vc-helpers: ''
vc-spec: |-
  method binSearch(a:array<int>, K:int) returns (b:bool)
    requires isSorted(a)
    ensures b == exists i:nat :: i < a.Length && a[i] == K
vc-code: |-
  {
    assume false;
  }
vc-postamble: "/* Note: the following definition of isSorted:\n\n\nalthough equivalent to the one above is not enough for Dafny to be able \nto prove the invariants for the loop in binSearch.\n\nThe given one works because it *explicitly* states that every element \nof the input array is smaller than or equal to all later elements. \nThis fact is implied by the alternative definition of isSorted given \nhere (which only talks about array elements and their successors). \nHowever, it needs to be derived as an auxiliary lemma first, something \nthat Dafny is not currently able to do automatically. \n*/"
