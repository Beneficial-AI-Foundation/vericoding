vc-preamble: "predicate Sorted(q: seq<int>)\n{\n    forall i,j :: 0 <= i <= j < |q| ==> q[i] <= q[j] \n}\n\n\n// all the values in the range satisfy `comparer` (comparer(q[i], key) == true)\npredicate RangeSatisfiesComparer(q: seq<int>, key: int, lowerBound: nat, upperBound: nat, comparer: (int, int) -> bool)\n    requires 0 <= lowerBound <= upperBound <= |q|\n{\n    forall i :: lowerBound <= i < upperBound ==> comparer(q[i], key)\n}\n\n// all the values in the range satisfy `!comparer` (comparer(q[i], key) == false)\npredicate RangeSatisfiesComparerNegation(q: seq<int>, key: int, lowerBound: nat, upperBound: nat, comparer: (int, int) -> bool)\n    requires 0 <= lowerBound <= upperBound <= |q|\n{\n    RangeSatisfiesComparer(q, key, lowerBound, upperBound, (n1, n2) => !comparer(n1, n2))\n}"
vc-helpers: ''
vc-spec: |-
  method BinarySearch(q: seq<int>, key: int, lowerBound: nat, upperBound: nat, comparer: (int, int) -> bool) returns (index: nat)
      requires Sorted(q)
      requires 0 <= lowerBound <= upperBound <= |q|
      requires RangeSatisfiesComparerNegation(q, key, 0, lowerBound, comparer)
      requires RangeSatisfiesComparer(q, key, upperBound, |q|, comparer)
      // comparer is '>' or '>='
      requires
          (forall n1, n2 :: comparer(n1, n2) == (n1 >  n2)) ||
          (forall n1, n2 :: comparer(n1, n2) == (n1 >= n2))

      ensures lowerBound <= index <= upperBound
      ensures RangeSatisfiesComparerNegation(q, key, 0, index, comparer)
      ensures RangeSatisfiesComparer(q, key, index, |q|, comparer)
vc-code: |-
  {
    assume false;
  }
vc-postamble: ''
