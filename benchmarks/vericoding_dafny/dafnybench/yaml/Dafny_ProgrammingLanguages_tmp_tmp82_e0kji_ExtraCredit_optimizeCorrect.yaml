vc-preamble: "datatype Exp = Const(int) | Var(string) | Plus(Exp, Exp) |  Mult(Exp, Exp)\n\nfunction eval(e:Exp, store:map<string, int>):int\n{\n    match(e)\n        case Const(n) => n\n        case Var(s) => if(s in store) then store[s] else -1\n        case Plus(e1, e2) => eval(e1, store) + eval(e2, store)\n        case Mult(e1, e2) => eval(e1, store) * eval(e2, store)\n}\n\n//fill this function in to make optimizeFeatures work\nfunction optimize(e:Exp):Exp\n{\n    match e\n    case Mult(Const(0), e) => Const(0)\n    case Mult(e, Const(0)) => Const(0)\n    case Mult(Const(1), e) => e\n    case Mult(e, Const(1)) => e\n    case Mult(Const(n1), Const(n2)) => Const(n1*n2)\n    case Plus(Const(0), e) => e\n    case Plus(e, Const(0)) => e\n    case Plus(Const(n1), Const(n2)) => Const(n1+ n2)\n    case e => e\n\n} \n\n//as you write optimize this will become unproved\n//you must write proof code so that Dafny can prove this"
vc-helpers: ''
vc-spec: |-
  method optimizeCorrect(e:Exp, s:map<string, int>)
  ensures eval(e,s) == eval(optimize(e), s)
vc-code: |-
  {
    assume false;
  }
vc-postamble: ''
