vc-preamble: "/* \nMIPS 0\nWe implement the following with bitvectors in Dafny.\nhere s' and t' are converted to decimal scalars\ns = [1,1,1], t = [1,0,1], ys = [1, 0, 0], s' = 7, t' = 5, ys' = 4\nys' % 2 ^ (len(s)) = (s' + t') % 2 ^ (len(s))\n4 % 8 = 12 % 8\n\ndef f(s,t):\n    a = 0;b = 0;\n    ys = []\n    for i in range(10):\n        c = s[i]; d = t[i];\n        next_a = b ^ c ^ d\n        next_b = b+c+d>1\n        a = next_a;b = next_b;\n        y = a\n        ys.append(y)\n    return ys\n*/\n\nfunction ArrayToBv10(arr: array<bool>): bv10 // Converts boolean array to bitvector\n    reads arr\n    requires arr.Length == 10\n{\n    ArrayToBv10Helper(arr, arr.Length - 1)\n}\n\nfunction ArrayToBv10Helper(arr: array<bool>, index: nat): bv10\n    reads arr\n    requires arr.Length == 10\n    requires 0 <= index < arr.Length\n    decreases index\n    ensures forall i :: 0 <= i < index ==> ((ArrayToBv10Helper(arr, i) >> i) & 1) == (if arr\n        [i] then 1 else 0)\n{\n    if index == 0 then\n\
  \        (if arr[0] then 1 else 0) as bv10\n    else\n        var bit: bv10 := if arr[index] then 1 as bv10 else 0 as bv10;\n        (bit << index) + ArrayToBv10Helper(arr, index - 1)\n}"
vc-helpers: ''
vc-spec: |-
  method ArrayToSequence(arr: array<bool>) returns (res: seq<bool>) // Converts boolean array to boolean sequence
      ensures |res| == arr.Length
      ensures forall k :: 0 <= k < arr.Length ==> res[k] == arr[k]
vc-code: |-
  {
    assume false;
  }
vc-postamble: |-
  function isBitSet(x: bv10, bitIndex: nat): bool
      requires bitIndex < 10
      ensures isBitSet(x, bitIndex) <==> (x & (1 << bitIndex)) != 0
  {
      (x & (1 << bitIndex)) != 0
  }

  function Bv10ToSeq(x: bv10): seq<bool> // Converts bitvector to boolean sequence
      ensures |Bv10ToSeq(x)| == 10
      ensures forall i: nat :: 0 <= i < 10 ==> Bv10ToSeq(x)[i] == isBitSet(x, i)
  {
      [isBitSet(x, 0), isBitSet(x, 1), isBitSet(x, 2), isBitSet(x, 3),
      isBitSet(x, 4), isBitSet(x, 5), isBitSet(x, 6), isBitSet(x, 7),
      isBitSet(x, 8), isBitSet(x, 9)]
  }

  function BoolToInt(a: bool): int {
      if a then 1 else 0
  }

  function XOR(a: bool, b: bool): bool {
      (a || b) && !(a && b)
  }

  function BitAddition(s: array<bool>, t: array<bool>): seq<bool> // Performs traditional bit addition
      reads s
      reads t
      requires s.Length == 10 && t.Length == 10
  {
      var a: bv10 := ArrayToBv10(s);
      var b: bv10 := ArrayToBv10(t);
      var c: bv10 := a + b;
      Bv10ToSeq(c)
  }
