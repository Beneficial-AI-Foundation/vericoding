vc-preamble: "// Simple directed graph with vertices of any type T.\nclass {:autocontracts} Graph<T(==)> {\n   var V: set<T>; // vertex-set\n   var E: set<(T, T)>; // edge-set\n\n   // Class invariant.\n   ghost predicate Valid() {\n       // edges must refer to vertices that belong to the vertex-set \n       // and self-loops (edges connecting a vertex to itself) are not allowed \n       forall e :: e in E ==> e.0 in V && e.1 in V && e.0 != e.1\n   } \n\n   // Creates an empty graph.\n   constructor ()\n     ensures V == {} && E == {}\n     {\n       V:= {};\n       E := {};\n     }\n\n\n   // Obtains the set of vertices adjacent to a given vertex v. \n   function getAdj(v: T): set<T>\n     requires v in V\n     {\n        set e | e in E && e.0 == v :: e.1\n     } \n\n\n    // Collapses a subset C of vertices to a single vertex v (belonging to C).\n    // All vertices in C are removed from the graph, except v.  \n    // Edges that connect vertices in C are removed from the graph.  \n  \
  \  // In all other edges, vertices belonging to C are replaced by v."
vc-helpers: ''
vc-spec: "method collapseVertices(C: set<T>, v: T)\n      requires v in C && C <= V \n      ensures V == old(V) - C + {v}\n      ensures E == set e | e in old(E) && (e.0 !in C || e.1 !in C) ::\n                          (if e.0 in C then v else e.0, if e.1 in C then v else e.1)"
vc-code: |-
  {
    assume false;
  }
vc-postamble: '}'
