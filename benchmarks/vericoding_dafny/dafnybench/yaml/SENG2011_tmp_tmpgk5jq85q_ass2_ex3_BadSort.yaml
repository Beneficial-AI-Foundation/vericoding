vc-preamble: "// verifies\n// all bs are before all as which are before all ds\n\npredicate sortedbad(s:string) \n{\n    // all b's are before all a's and d's\n    forall i,j :: 0 <= i < |s| && 0 <= j < |s| && s[i] == 'b' && (s[j] == 'a' || s[j] == 'd') ==> i < j &&\n    // all a's are after all b's\n    forall i,j :: 0 <= i < |s| && 0 <= j < |s| && s[i] == 'a' && s[j] == 'b' ==> i > j &&\n    // all a's are before all d's\n    forall i,j :: 0 <= i < |s| && 0 <= j < |s| && s[i] == 'a' && s[j] == 'd' ==> i < j &&\n    // all d's are after a;; b's and a's\n    forall i,j :: 0 <= i < |s| && 0 <= j < |s| && s[i] == 'd' && (s[j] == 'a' || s[j] == 'b') ==> i > j\n}"
vc-helpers: ''
vc-spec: |-
  method BadSort(a: string) returns (b: string)
  requires forall k :: 0 <= k < |a| ==> a[k] == 'b' || a[k] == 'a' || a[k] == 'd';
  ensures sortedbad(b);
  ensures multiset(a[..]) == multiset(b[..]);
  ensures |a| == |b|;
vc-code: |-
  {
    assume false;
  }
vc-postamble: ''
