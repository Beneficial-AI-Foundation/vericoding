vc-preamble: "// A LIFO queue (aka a stack) with limited capacity.\nclass LimitedStack{\n\n      var capacity : int; // capacity, max number of elements allowed on the stack.\n      var arr : array<int>; // contents of stack.\n      var top : int; // The index of the top of the stack, or -1 if the stack is empty\n\n      // This predicate express a class invariant: All objects of this calls should satisfy this.\n      predicate Valid()\n      reads this;\n      {\n        arr != null && capacity > 0 && capacity == arr.Length &&  top >= -1 && top < capacity \n      }\n\n      predicate Empty()\n      reads this`top;\n      {\n            top == -1\n      }\n\n      predicate Full()\n      reads this`top, this`capacity;\n      {\n        top == (capacity - 1)\n      }\n\n\n\n\n\n\n\n      // Returns the top element of the stack, without removing it.\n\n\n\n      // Pushed an element to the top of a (non full) stack. \n\n      // Pops the top element off the stack.\n\n\n\n      method Shift()\n\
  \      requires Valid() && !Empty();\n      ensures Valid();\n      ensures forall i : int :: 0 <= i < capacity - 1 ==> arr[i] == old(arr[i + 1]);\n      ensures top == old(top) - 1;\n      modifies this.arr, this`top;\n{\n  assume{:axiom} false;\n}\n\n\n      //Push onto full stack, oldest element is discarded."
vc-helpers: ''
vc-spec: "method Push2(elem : int)\n      modifies this.arr, this`top\n      requires Valid()\n      ensures Valid() && !Empty() \n      ensures arr[top] == elem\n      ensures old(!Full()) ==> top == old(top) + 1 && old(Full()) ==> top == old(top)\n      ensures ((old(Full()) ==> arr[capacity - 1] == elem)  && (old(!Full()) ==> (top == old(top) + 1 && arr[top] == elem) ))\n      ensures old(Full()) ==> forall i : int :: 0 <= i < capacity - 1 ==> arr[i] == old(arr[i + 1]);"
vc-code: |-
  {
    assume false;
  }
vc-postamble: "// When you are finished,  all the below assertions should be provable. \n// Feel free to add extra ones as well.\n}"
