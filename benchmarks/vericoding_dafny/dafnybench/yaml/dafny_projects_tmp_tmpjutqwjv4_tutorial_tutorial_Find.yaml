vc-preamble: |-
  // Working through https://dafny.org/dafny/OnlineTutorial/guide

  function fib(n: nat): nat
  {
    if n == 0 then 0
    else if n == 1 then 1
    else fib(n - 1) + fib(n - 2)
  }
vc-helpers: ''
vc-spec: |-
  method Find(a: array<int>, key: int) returns (index: int)
    ensures 0 <= index ==> index < a.Length && a[index] == key
    ensures index < 0 ==> (forall k :: 0 <= k < a.Length ==> a[k] != key)
vc-code: |-
  {
    assume false;
  }
vc-postamble: |-
  predicate sorted(a: array<int>)
    reads a
  {
    forall n, m :: 0 <= n < m < a.Length ==> a[n] <= a[m]
  }



  // https://dafny.org/dafny/OnlineTutorial/ValueTypes

  function update(s: seq<int>, i: int, v: int): seq<int>
    requires 0 <= i < |s|
    ensures update(s, i, v) == s[i := v]
  {
    s[..i] + [v] + s[i+1..]
  }


  // https://dafny.org/dafny/OnlineTutorial/Lemmas



  function count(a: seq<bool>): nat
  {
    if |a| == 0 then 0 else
    (if a[0] then 1 else 0) + count(a[1..])
  }


  class Node
  {
    var next: seq<Node>
  }
  predicate closed(graph: set<Node>)
    reads graph
  {
    forall i :: i in graph ==> forall k :: 0 <= k < |i.next| ==> i.next[k] in graph && i.next[k] != i
  }
  predicate path(p: seq<Node>, graph: set<Node>)
    requires closed(graph) && 0 < |p|
    reads graph
  {
    p[0] in graph &&
      (|p| > 1 ==> p[1] in p[0].next && // the first link is valid, if it exists
       path(p[1..], graph)) // and the rest of the sequence is a valid
  }
  predicate pathSpecific(p: seq<Node>, start: Node, end: Node, graph: set<Node>)
    requires closed(graph)
    reads graph
  {
    0 < |p| && // path is nonempty
    start == p[0] && end == p[|p|-1] && // it starts and ends correctly
    path(p, graph) // and it is a valid path
  }
