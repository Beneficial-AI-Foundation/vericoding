vc-description: |-

vc-preamble: |-
  predicate triple(a: array<int>) 
  reads a
  {
      exists i :: 0 <= i < a.Length - 2 && a[i] == a[i + 1] == a[i + 2]
  }

vc-helpers: |-
  // <vc-helpers>
  // </vc-helpers>

vc-spec: |-
  method GetTriple(a: array<int>) returns (index: int)
  ensures 0 <= index < a.Length - 2 || index == a.Length
  ensures index == a.Length <==> !triple(a)
  ensures 0 <= index < a.Length - 2 <==> triple(a)
  ensures 0 <= index < a.Length - 2 ==> a[index] == a[index + 1] == a[index + 2]

vc-code: |-
  {
      var i: nat := 0;
      index := a.Length;
      if a.Length < 3 {
          return a.Length;
      }
      while i < a.Length - 2
      decreases a.Length - i
      invariant 0 <= i <= a.Length - 2
      invariant index == a.Length <==> (!exists j :: 0 <= j < i && a[j] == a[j + 1] == a[j + 2])
      invariant 0 <= index < a.Length - 2 ==> a[index] == a[index + 1] == a[index + 2]
      {
          if a[i] == a[i + 1] == a[i + 2] {
              return i;
          }
          i := i + 1;
      }
  }

vc-postamble: |-

