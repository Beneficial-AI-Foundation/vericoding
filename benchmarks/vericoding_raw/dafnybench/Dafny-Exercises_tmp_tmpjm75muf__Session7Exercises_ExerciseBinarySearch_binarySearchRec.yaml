vc-preamble: |-
  predicate sorted(s : seq<int>) {
      forall u, w :: 0 <= u < w < |s| ==> s[u] <= s[w]
  }







  //Recursive binary search

vc-helpers: |-

vc-spec: |-
  method binarySearchRec(v:array<int>, elem:int, c:int, f:int) returns (p:int)
   requires sorted(v[0..v.Length])
   requires 0<=c<=f+1<=v.Length//0<=c<=v.Length && -1<=f<v.Length && c<=f+1
   requires forall k::0<=k<c ==> v[k]<=elem
   requires forall k::f<k<v.Length ==> v[k]>elem
   decreases f-c
   ensures -1<=p<v.Length
   ensures (forall u::0<=u<=p ==> v[u]<=elem) && (forall w::p<w<v.Length ==> v[w]>elem)

vc-code: |-
  {
    if (c==f+1) 
       {p:=c-1;} //empty case: c-1 contains the last element less or equal than elem
    else 
    {
     var m:=(c+f)/2;

     if (v[m]<=elem) 
        {p:=binarySearchRec(v,elem,m+1,f);}
     else 
        {p:=binarySearchRec(v,elem,c,m-1);}

    }
  }

vc-postamble: |-

