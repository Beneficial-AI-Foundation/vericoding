vc-preamble: |-
  predicate quickSorted(Seq: seq<int>)
  {
    forall idx_1, idx_2 :: 0 <= idx_1 < idx_2 < |Seq| ==> Seq[idx_1] <= Seq[idx_2]
  }

vc-helpers: |-
  // <vc-helpers>
  // </vc-helpers>

vc-spec: |-
  method threshold(thres:int,Seq:seq<int>) returns (Seq_1:seq<int>,Seq_2:seq<int>)
    ensures (forall x | x in Seq_1 :: x <= thres) && (forall x | x in Seq_2 :: x >= thres)
    ensures |Seq_1| + |Seq_2| == |Seq| 
    ensures multiset(Seq_1) + multiset(Seq_2) == multiset(Seq)

vc-code: |-
  // <vc-code>
  {
    assume false;
  }
  // </vc-code>

vc-postamble: |-
  lemma Lemma_1(Seq_1:seq,Seq_2:seq)  // The proof of the lemma is not necessary
    requires multiset(Seq_1) == multiset(Seq_2)
    ensures forall x | x in Seq_1 :: x in Seq_2

  {
    forall x | x in Seq_1
      ensures x in multiset(Seq_1)
    {
      var i := 0;
      while (i < |Seq_1|)
        invariant 0 <= i <= |Seq_1|
        invariant forall idx_1 | 0 <= idx_1 < i :: Seq_1[idx_1] in multiset(Seq_1)
      {
        i := i + 1;
      }
    }

  }

