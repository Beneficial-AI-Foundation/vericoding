vc-preamble: |-
  predicate isPrefixPredicate(pre: string, str:string)
  {
    |str| >= |pre| && pre <= str
  }

  method isPrefix(pre: string, str: string) returns (res: bool)
    ensures |pre| > |str| ==> !res
    ensures res == isPrefixPredicate(pre, str)
  {
    if |pre| > |str|
      {return false;}

    var i := 0;
    while i < |pre|
      decreases |pre| - i
      invariant 0 <= i <= |pre|
      invariant forall j :: 0 <= j < i ==> pre[j] == str[j]
    {
      if pre[i] != str[i]
      {
          return false;
      } 
      i := i + 1;
    }
   return true;
  }

  predicate isSubstringPredicate (sub: string, str:string)
  {
    |str| >= |sub| && (exists i :: 0 <= i <= |str| && isPrefixPredicate(sub, str[i..]))
  }

vc-helpers: |-
  // <vc-helpers>
  // </vc-helpers>

vc-spec: |-
  method isSubstring(sub: string, str: string) returns (res:bool)
  ensures res == isSubstringPredicate(sub, str)

vc-code: |-
  // <vc-code>
  {
    assume false;
  }
  // </vc-code>

vc-postamble: |-
  predicate haveCommonKSubstringPredicate(k: nat, str1: string, str2: string)
  {
    |str1| >= k && |str2| >= k && (exists i :: 0 <= i <= |str1| - k && isSubstringPredicate((str1[i..])[..k], str2))
  }




  predicate maxCommonSubstringPredicate(str1: string, str2: string, len:nat)
  {
     forall k :: len < k <= |str1| ==> !haveCommonKSubstringPredicate(k, str1, str2)
  }

