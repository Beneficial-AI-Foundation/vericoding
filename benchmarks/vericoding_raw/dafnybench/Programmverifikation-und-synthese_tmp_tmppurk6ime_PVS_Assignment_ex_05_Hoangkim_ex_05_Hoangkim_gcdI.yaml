vc-preamble: |-
  //Problem01
  function fib(n: nat):nat
  {
      if n < 2 then n else fib(n-2)+fib(n-1)
  }

  //# 2 pts

  //Problem02
  function fact(n:nat):nat
  {if n==0 then 1 else n*fact(n-1)}

  //# 3 pts
  //Problem03
  function gcd(m: nat, n: nat): nat
      requires m > 0 && n > 0
  {
      if m == n then m
      else if m > n then gcd(m - n, n)
      else gcd(m, n - m)
  }

vc-helpers: |-

vc-spec: |-
  method gcdI(m: int, n: int) returns (g: int)
      requires  m > 0 && n > 0 
      ensures g == gcd(m, n);

vc-code: |-
  {
          var x: int;
          g := m;
          x := n;
          while (g != x)
          invariant x > 0;
          invariant g > 0;
          invariant gcd(g, x) == gcd(m, n);
          decreases x+g;
          {
            if (g > x)
            {
               g := g - x;
            }
            else
            {
               x := x - g;
            }
          }
  }

vc-postamble: |-
  //# 3 pts


  // # sum: 9 pts

