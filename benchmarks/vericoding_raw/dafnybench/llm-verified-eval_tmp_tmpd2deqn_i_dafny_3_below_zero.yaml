vc-preamble: |-
  function sum(s: seq<int>, n: nat): int
      requires n <= |s|
  {
      if |s| == 0 || n == 0 then
          0
      else
          s[0] + sum(s[1..], n-1)
  }

vc-helpers: |-

vc-spec: |-
  method below_zero(ops: seq<int>) returns (result: bool)
      ensures result <==> exists n: nat :: n <= |ops| && sum(ops, n) < 0

vc-code: |-
  {
      result := false;
      var t := 0;
      for i := 0 to |ops|
          invariant t == sum(ops, i)
          invariant forall n: nat :: n <= i ==> sum(ops, n) >= 0
      {
          t := t + ops[i];
          assume false;
          if t < 0 {
              result := true;
              return;
          }
      }
  }

vc-postamble: |-

