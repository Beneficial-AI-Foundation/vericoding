/-!
{
  "name": "numpy.testing.clear_and_catch_warnings",
  "category": "Testing Utilities",
  "description": "Context manager that resets warning registry for catching warnings",
  "url": "https://numpy.org/doc/stable/reference/generated/numpy.testing.clear_and_catch_warnings.html",
  "doc": "Context manager that resets warning registry for catching warnings.\n\nWarnings can be slippery, because, whenever a warning is triggered, Python adds a \`\`__warningregistry__\`\` member to the *calling* module. This makes it impossible to retrigger the warning in this module, whatever you put in the warnings filters. This context manager accepts a sequence of \`modules\` as a keyword argument to its constructor and:\n\n* stores and removes any \`\`__warningregistry__\`\` entries in given \`modules\` on entry;\n* resets \`\`__warningregistry__\`\` to its previous state on exit.\n\nThis makes it possible to trigger any warning afresh inside the context manager without disturbing the state of warnings outside.",
  "code": "class clear_and_catch_warnings(warnings.catch_warnings):\n    \"\"\" Context manager that resets warning registry for catching warnings\n\n    Warnings can be slippery, because, whenever a warning is triggered, Python\n    adds a \`\`__warningregistry__\`\` member to the *calling* module.  This makes\n    it impossible to retrigger the warning in this module, whatever you put in\n    the warnings filters.  This context manager accepts a sequence of \`modules\`\n    as a keyword argument to its constructor and:\n\n    * stores and removes any \`\`__warningregistry__\`\` entries in given \`modules\`\n      on entry;\n    * resets \`\`__warningregistry__\`\` to its previous state on exit.\n\n    This makes it possible to trigger any warning afresh inside the context\n    manager without disturbing the state of warnings outside.\n\n    For compatibility with Python, please consider all arguments to be\n    keyword-only.\n\n    Parameters\n    ----------\n    record : bool, optional\n        Specifies whether warnings should be captured by a custom\n        implementation of \`\`warnings.showwarning()\`\` and be appended to a list\n        returned by the context manager. Otherwise None is returned by the\n        context manager. The objects appended to the list are arguments whose\n        attributes mirror the arguments to \`\`showwarning()\`\`.\n    modules : sequence, optional\n        Sequence of modules for which to reset warnings registry on entry and\n        restore on exit. To work correctly, all 'ignore' filters should\n        filter by one of these modules.\n\n    Examples\n    --------\n    >>> import warnings\n    >>> with np.testing.clear_and_catch_warnings(\n    ...         modules=[np._core.fromnumeric]):\n    ...     warnings.simplefilter('always')\n    ...     warnings.filterwarnings('ignore', module='np._core.fromnumeric')\n    ...     # do something that raises a warning but ignore those in\n    ...     # np._core.fromnumeric\n    \"\"\"\n    class_modules = ()\n\n    def __init__(self, record=False, modules=()):\n        self.modules = set(modules).union(self.class_modules)\n        self._warnreg_copies = {}\n        super().__init__(record=record)\n\n    def __enter__(self):\n        for mod in self.modules:\n            if hasattr(mod, '__warningregistry__'):\n                mod_reg = mod.__warningregistry__\n                self._warnreg_copies[mod] = mod_reg.copy()\n                mod_reg.clear()\n        return super().__enter__()\n\n    def __exit__(self, *exc_info):\n        super().__exit__(*exc_info)\n        for mod in self.modules:\n            if hasattr(mod, '__warningregistry__'):\n                mod.__warningregistry__.clear()\n            if mod in self._warnreg_copies:\n                mod.__warningregistry__.update(self._warnreg_copies[mod])"
}
-/

-- TODO: Implement clear_and_catch_warnings
