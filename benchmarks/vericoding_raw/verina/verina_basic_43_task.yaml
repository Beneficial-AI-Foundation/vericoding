vc-description: |-
  /--
  -----Description----- 
  This task requires writing a Lean 4 method that computes the sum of the fourth power of the first n odd natural numbers. In other words, given a non-negative integer n, the method should calculate the sum: 1⁴ + 3⁴ + 5⁴ + ... for the first n odd numbers.

  -----Input-----
  The input consists of:
  n: A non-negative natural number representing the number of odd natural numbers to consider.

  -----Output----- 
  The output is a natural number:
  Returns the sum of the fourth power of the first n odd natural numbers.

  -----Note----- 
  The input n is assumed to be a non-negative integer.
  The correctness of the result is established by a theorem that relates the computed sum to a specific formula.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def sumOfFourthPowerOfOddNumbers (n : Nat) (h_precond : sumOfFourthPowerOfOddNumbers_precond (n)) : Nat :=

vc-implementation: |-
  -- <vc-implementation>
    match n with
    | 0 => 0
    | n + 1 =>
      let prev := sumOfFourthPowerOfOddNumbers n h_precond
      let nextOdd := 2 * n + 1
      prev + nextOdd^4
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def sumOfFourthPowerOfOddNumbers_precond (n : Nat) : Prop :=
    True

  @[reducible, simp]
  def sumOfFourthPowerOfOddNumbers_postcond (n : Nat) (result: Nat) (h_precond : sumOfFourthPowerOfOddNumbers_precond (n)) :=
    15 * result = n * (2 * n + 1) * (7 + 24 * n^3 - 12 * n^2 - 14 * n)

  theorem sumOfFourthPowerOfOddNumbers_spec_satisfied (n: Nat) (h_precond : sumOfFourthPowerOfOddNumbers_precond (n)) :
      sumOfFourthPowerOfOddNumbers_postcond (n) (sumOfFourthPowerOfOddNumbers (n) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  /--
  -- Reject Inputs
  []
  -- Test
  [
      {
          "input": {
              "n": 0
          },
          "expected": 0,
          "unexpected": [
              1,
              10
          ]
      },
      {
          "input": {
              "n": 1
          },
          "expected": 1,
          "unexpected": [
              2,
              0,
              5
          ]
      },
      {
          "input": {
              "n": 2
          },
          "expected": 82,
          "unexpected": [
              81,
              83,
              80
          ]
      },
      {
          "input": {
              "n": 3
          },
          "expected": 707,
          "unexpected": [
              706,
              708,
              700
          ]
      },
      {
          "input": {
              "n": 4
          },
          "expected": 3108,
          "unexpected": [
              3107,
              3109,
              3000
          ]
      },
      {
          "input": {
              "n": 5
          },
          "expected": 9669,
          "unexpected": [
              9668,
              9670,
              9000
          ]
      }
  ]
  -/
