vc-description: |-
  /--
  -----Description-----
  This task requires writing a Lean 4 function that converts a binary number represented as a list of digits (0 or 1) into its corresponding decimal value. The list is ordered in big-endian format, meaning the most significant digit comes first.
  The function should interpret the list as a binary number and return its decimal representation as a natural number.

  -----Input-----
  The input is a list of natural numbers:
  digits: A list of digits, each of which is either 0 or 1, representing a binary number in big-endian order.

  -----Output-----
  The output is a natural number:
  Returns the decimal value of the binary number represented by the input list.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def binaryToDecimal (digits : List Nat) (h_precond : binaryToDecimal_precond (digits)) : Nat :=

vc-implementation: |-
  -- <vc-implementation>
    let rec helper (digits : List Nat) : Nat :=
      match digits with
      | [] => 0
      | first :: rest => first * Nat.pow 2 rest.length + helper rest
    helper digits
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible]
  def binaryToDecimal_precond (digits : List Nat) : Prop :=
    digits.all (fun d => d = 0 ∨ d = 1)

  @[reducible]
  def binaryToDecimal_postcond (digits : List Nat) (result: Nat) (h_precond : binaryToDecimal_precond (digits)) : Prop :=
    result - List.foldl (λ acc bit => acc * 2 + bit) 0 digits = 0 ∧
    List.foldl (λ acc bit => acc * 2 + bit) 0 digits - result = 0

  theorem binaryToDecimal_spec_satisfied (digits: List Nat) (h_precond : binaryToDecimal_precond (digits)) :
      binaryToDecimal_postcond (digits) (binaryToDecimal (digits) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  /-
  -- Invalid Inputs
  [
      {
          "input": {
              "digits": "[2]"
          }
      }
  ]
  -- Tests
  [
      {
          "input": {
              "digits": "[1, 0, 1]"
          },
          "expected": 5,
          "unexpected": [
              3,
              4,
              6
          ]
      },
      {
          "input": {
              "digits": "[1, 1, 1, 1]"
          },
          "expected": 15,
          "unexpected": [
              14,
              16
          ]
      },
      {
          "input": {
              "digits": "[0, 0, 0]"
          },
          "expected": 0,
          "unexpected": [
              1,
              2
          ]
      },
      {
          "input": {
              "digits": "[1, 0, 0, 0, 0]"
          },
          "expected": 16,
          "unexpected": [
              8,
              0
          ]
      },
      {
          "input": {
              "digits": "[]"
          },
          "expected": 0,
          "unexpected": [
              1
          ]
      },
      {
          "input": {
              "digits": "[1]"
          },
          "expected": 1,
          "unexpected": [
              0
          ]
      }
  ]
  -/
