vc-description: |-
  /--
  -----Description-----
  This problem asks for a method to determine the sum of the first N natural numbers. The task focuses on computing the total when given an input N, ensuring that the value is 0 when N is 0 and correctly calculated for positive values of N.

  -----Input-----
  The input consists of:
  • N: A natural number (Nat) representing the count of the first natural numbers to sum.

  -----Output-----
  The output is a natural number (Nat), which is the sum of the first N natural numbers computed as: N * (N + 1) / 2.

  -----Note-----
  The computation leverages a recursive implementation. There are no additional preconditions beyond providing a valid natural number.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def CalSum (N : Nat) (h_precond : CalSum_precond (N)) : Nat :=

vc-implementation: |-
  -- <vc-implementation>
    let rec loop (n : Nat) : Nat :=
      if n = 0 then 0
      else n + loop (n - 1)
    loop N
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def CalSum_precond (N : Nat) : Prop :=
    True

  @[reducible, simp]
  def CalSum_postcond (N : Nat) (result: Nat) (h_precond : CalSum_precond (N)) :=
    2 * result = N * (N + 1)

  theorem CalSum_spec_satisfied (N: Nat) (h_precond : CalSum_precond (N)) :
      CalSum_postcond (N) (CalSum (N) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    unfold CalSum_postcond CalSum
    induction N with
    | zero =>
      unfold CalSum.loop
      simp
    | succ n ih =>
      unfold CalSum_precond at ih
      simp at ih
      unfold CalSum.loop
      simp
      rw [Nat.mul_add]
      rw [ih]
      rw [← Nat.add_mul]
      rw [Nat.add_comm, Nat.mul_comm]
  -- </vc-proof>

vc-postamble: |-
  /-
  -- Invalid Inputs
  []
  -- Tests
  [
      {
          "input": {
              "N": 0
          },
          "expected": 0,
          "unexpected": [
              1,
              2,
              3
          ]
      },
      {
          "input": {
              "N": 1
          },
          "expected": 1,
          "unexpected": [
              0,
              2,
              3
          ]
      },
      {
          "input": {
              "N": 5
          },
          "expected": 15,
          "unexpected": [
              10,
              16,
              20
          ]
      },
      {
          "input": {
              "N": 10
          },
          "expected": 55,
          "unexpected": [
              54,
              56,
              50
          ]
      },
      {
          "input": {
              "N": 20
          },
          "expected": 210,
          "unexpected": [
              200,
              220,
              205
          ]
      }
  ]
  -/
