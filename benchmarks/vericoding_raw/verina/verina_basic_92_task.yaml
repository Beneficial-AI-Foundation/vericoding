vc-description: |-
  /--
  -----Description-----  
  This problem involves swapping the values of two integers. Given two integers as inputs, the objective is to return the two numbers in reversed order.

  -----Input-----  
  The input consists of two integers:  
  • X: The first integer.  
  • Y: The second integer.

  -----Output-----  
  The output is a tuple of two integers (Int × Int) where:  
  • The first element is equal to Y.  
  • The second element is equal to X.

  -----Note-----  
  There are no restrictions on the input values. The function must correctly swap the inputs regardless of whether they are positive, negative, or zero.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def SwapArithmetic (X : Int) (Y : Int) (h_precond : SwapArithmetic_precond (X) (Y)) : (Int × Int) :=

vc-implementation: |-
  -- <vc-implementation>
    let x1 := X
    let y1 := Y
    let x2 := y1 - x1
    let y2 := y1 - x2
    let x3 := y2 + x2
    (x3, y2)
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def SwapArithmetic_precond (X : Int) (Y : Int) : Prop :=
    True

  @[reducible, simp]
  def SwapArithmetic_postcond (X : Int) (Y : Int) (result: (Int × Int)) (h_precond : SwapArithmetic_precond (X) (Y)) :=
    result.1 = Y ∧ result.2 = X ∧
    (X ≠ Y → result.fst ≠ X ∧ result.snd ≠ Y)

  theorem SwapArithmetic_spec_satisfied (X: Int) (Y: Int) (h_precond : SwapArithmetic_precond (X) (Y)) :
      SwapArithmetic_postcond (X) (Y) (SwapArithmetic (X) (Y) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    unfold SwapArithmetic_postcond SwapArithmetic
    simp
    rw [Int.sub_sub_self]
    simp_all
    exact fun a a_1 => a (id (Eq.symm a_1))
  -- </vc-proof>

vc-postamble: |-
  /-
  -- Invalid Inputs
  []
  -- Tests
  [
      {
          "input": {
              "X": 3,
              "Y": 4
          },
          "expected": "(4, 3)",
          "unexpected": [
              "(3, 4)",
              "(3, 3)",
              "(4, 4)"
          ]
      },
      {
          "input": {
              "X": -1,
              "Y": 10
          },
          "expected": "(10, -1)",
          "unexpected": [
              "(-1, 10)",
              "(10, 1)",
              "(-10, -1)"
          ]
      },
      {
          "input": {
              "X": 0,
              "Y": 0
          },
          "expected": "(0, 0)",
          "unexpected": [
              "(0, 1)",
              "(1, 0)",
              "(-1, 0)"
          ]
      },
      {
          "input": {
              "X": 100,
              "Y": 50
          },
          "expected": "(50, 100)",
          "unexpected": [
              "(100, 50)",
              "(50, 50)",
              "(100, 100)"
          ]
      },
      {
          "input": {
              "X": -5,
              "Y": -10
          },
          "expected": "(-10, -5)",
          "unexpected": [
              "(-5, -10)",
              "(-10, -10)",
              "(-5, -5)"
          ]
      }
  ]
  -/
