vc-description: |-
  /--
  -----Description----- 
  This task requires writing a Lean 4 method that determines whether a given integer is a power of two.
  An integer n is a power of two if there exists an integer x such that n = 2^x.
  The method should return true if n is a power of two, and false otherwise.
  Note that negative numbers and zero are not powers of two.

  -----Input-----
  The input consists of one integer:
  n: The integer to be tested.

  -----Output-----
  The output is a boolean:
  Returns true if there exists an integer x such that n = 2^x (with n > 0), otherwise false.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def isPowerOfTwo (n : Int) (h_precond : isPowerOfTwo_precond (n)) : Bool :=

vc-implementation: |-
  -- <vc-implementation>
    if n <= 0 then false
    else
      let rec aux (m : Int) (fuel : Nat) : Bool :=
        if fuel = 0 then false
        else if m = 1 then true
        else if m % 2 ≠ 0 then false
        else aux (m / 2) (fuel - 1)
      aux n n.natAbs
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible]
  def isPowerOfTwo_precond (n : Int) : Prop :=
    True

  def pow (base : Int) (exp : Nat) : Int :=
    match exp with
    | 0 => 1
    | n+1 => base * pow base n
  @[reducible]
  def isPowerOfTwo_postcond (n : Int) (result: Bool) (h_precond : isPowerOfTwo_precond (n)) : Prop :=
    if result then ∃ (x : Nat), (pow 2 x = n) ∧ (n > 0)
    else ¬ (∃ (x : Nat), (pow 2 x = n) ∧ (n > 0))

  theorem isPowerOfTwo_spec_satisfied (n: Int) (h_precond : isPowerOfTwo_precond (n)) :
      isPowerOfTwo_postcond (n) (isPowerOfTwo (n) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  /-
  -- Invalid Inputs
  []
  -- Tests
  [
      {
          "input": {
              "n": 1
          },
          "expected": true,
          "unexpected": [
              false
          ]
      },
      {
          "input": {
              "n": 16
          },
          "expected": true,
          "unexpected": [
              false
          ]
      },
      {
          "input": {
              "n": 3
          },
          "expected": false,
          "unexpected": [
              true
          ]
      },
      {
          "input": {
              "n": 0
          },
          "expected": false,
          "unexpected": [
              true
          ]
      },
      {
          "input": {
              "n": -2
          },
          "expected": false,
          "unexpected": [
              true
          ]
      },
      {
          "input": {
              "n": 8
          },
          "expected": true,
          "unexpected": [
              false
          ]
      },
      {
          "input": {
              "n": 10
          },
          "expected": false,
          "unexpected": [
              true
          ]
      }
  ]
  -/
