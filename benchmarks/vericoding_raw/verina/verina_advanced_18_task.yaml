vc-description: |-
  /--
  -----Description-----
  This task requires writing a Lean 4 method that determines whether a given number `n` is an Armstrong number (also known as a Narcissistic number). An Armstrong number is a number that is equal to the sum of its own digits raised to the power of the number of digits.

  -----Input-----
  The input consists of one natural number:
  - `n: Nat`: The number to check if it satisfies the Armstrong property.

  -----Output-----
  The output is a boolean value:
  - `Bool`: Return `true` if `n` is an Armstrong number, otherwise return `false`.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  def countDigits (n : Nat) : Nat :=
    let rec go (n acc : Nat) : Nat :=
      if n = 0 then acc
      else go (n / 10) (acc + 1)
    go n (if n = 0 then 1 else 0)

  def sumPowers (n : Nat) (k : Nat) : Nat :=
    let rec go (n acc : Nat) : Nat :=
      if n = 0 then acc
      else
        let digit := n % 10
        go (n / 10) (acc + digit ^ k)
    go n 0
  -- </vc-helpers>

vc-signature: |-
  def isArmstrong (n : Nat) (h_precond : isArmstrong_precond (n)) : Bool :=

vc-implementation: |-
  -- <vc-implementation>
    let k := countDigits n
    sumPowers n k = n
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible]
  def isArmstrong_precond (n : Nat) : Prop :=
    True

  @[reducible]
  def isArmstrong_postcond (n : Nat) (result: Bool) (h_precond : isArmstrong_precond (n)) : Prop :=
    let n' := List.foldl (fun acc d => acc + d ^ countDigits n) 0 (List.map (fun c => c.toNat - '0'.toNat) (toString n).toList)
    (result → (n = n')) ∧
    (¬ result → (n ≠ n'))

  theorem isArmstrong_spec_satisfied (n: Nat) (h_precond : isArmstrong_precond (n)) :
      isArmstrong_postcond (n) (isArmstrong (n) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  /--
  -- Reject Inputs
  []
  -- Test
  [
      {
          "input": {
              "n": 0
          },
          "expected": true,
          "unexpected": [
              false
          ]
      },
      {
          "input": {
              "n": 1
          },
          "expected": true,
          "unexpected": [
              false
          ]
      },
      {
          "input": {
              "n": 10
          },
          "expected": false,
          "unexpected": [
              true
          ]
      },
      {
          "input": {
              "n": 153
          },
          "expected": true,
          "unexpected": [
              false
          ]
      },
      {
          "input": {
              "n": 9474
          },
          "expected": true,
          "unexpected": [
              false
          ]
      },
      {
          "input": {
              "n": 9475
          },
          "expected": false,
          "unexpected": [
              true
          ]
      }
  ]
  -/
