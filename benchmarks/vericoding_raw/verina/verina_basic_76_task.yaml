vc-description: |-
  /--
  -----Description-----
  This task requires determining the smaller of two integers. Given two input numbers, the goal is to compare them and return the one that is less than or equal to the other.
  
  -----Input-----
  The input consists of two integers:
  • x: The first integer.
  • y: The second integer.
  
  -----Output-----
  The output is an integer representing the minimum of the two input integers:
  • Returns x if x is less than or equal to y.
  • Returns y if x is greater than y.
  -/

vc-preamble: |-
  @[reducible, simp]
  def myMin_precond (x : Int) (y : Int) : Prop :=
    True

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def myMin (x : Int) (y : Int) (h_precond : myMin_precond (x) (y)) : Int :=

vc-implementation: |-
  -- <vc-implementation>
    if x < y then x else y
  -- </vc-implementation>

vc-condition: |-
  @[reducible, simp]
  def myMin_postcond (x : Int) (y : Int) (result: Int) (h_precond : myMin_precond (x) (y)) :=
    (x ≤ y → result = x) ∧ (x > y → result = y)
  
  theorem myMin_spec_satisfied (x: Int) (y: Int) (h_precond : myMin_precond (x) (y)) :
      myMin_postcond (x) (y) (myMin (x) (y) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    unfold myMin_postcond myMin
    simp
    have h_left : (x ≤ y → y ≤ x → y = x) := by
      intro h₁ h₂
      exact Int.le_antisymm h₂ h₁
    have h_right : (y < x → x < y → x = y) := by
      intro h₁ h₂
      have h_contr : False := Int.lt_irrefl x (Int.lt_trans h₂ h₁)
      contradiction
    exact ⟨h_left, h_right⟩
  -- </vc-proof>

vc-postamble: |-
  /-
  -- Invalid Inputs
  []
  -- Tests
  [
      {
          "input": {
              "x": 3,
              "y": 5
          },
          "expected": 3,
          "unexpected": [
              5,
              8
          ]
      },
      {
          "input": {
              "x": 10,
              "y": 7
          },
          "expected": 7,
          "unexpected": [
              10,
              17
          ]
      },
      {
          "input": {
              "x": 4,
              "y": 4
          },
          "expected": 4,
          "unexpected": [
              0,
              8
          ]
      },
      {
          "input": {
              "x": -5,
              "y": 0
          },
          "expected": -5,
          "unexpected": [
              0,
              -4
          ]
      },
      {
          "input": {
              "x": 0,
              "y": -10
          },
          "expected": -10,
          "unexpected": [
              0,
              -8
          ]
      }
  ]
  -/

