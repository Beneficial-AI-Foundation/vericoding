vc-description: |-
  /--
  -----Description-----
  This task requires writing a Lean 4 method that finds the majority element in a list of natural numbers. The majority element is defined as the element that appears more than ⌊n / 2⌋ times in the list, where n is the total number of elements.

  You may assume that the input list always contains a majority element.

  -----Input-----
  The input consists of one list:
  xs: A list of natural numbers (List Nat), where a majority element is guaranteed to exist.

  -----Output-----
  The output is a natural number:
  Returns the element that appears more than half the time in the input list.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def majorityElement (xs : List Nat) (h_precond : majorityElement_precond (xs)) : Nat :=

vc-implementation: |-
  -- <vc-implementation>
    let rec countOccurrences (target : Nat) (lst : List Nat) : Nat :=
      match lst with
      | [] => 0
      | y :: ys =>
        if y = target then 1 + countOccurrences target ys
        else countOccurrences target ys
  
    let rec findCandidate (lst : List Nat) (candidate : Option Nat) (count : Nat) : Nat :=
      match lst with
      | [] =>
        match candidate with
        | some c => c
        | none => 0 -- unreachable since we assume majority element exists
      | x :: xs =>
        match candidate with
        | some c =>
          if x = c then
            findCandidate xs (some c) (count + 1)
          else if count = 0 then
            findCandidate xs (some x) 1
          else
            findCandidate xs (some c) (count - 1)
        | none =>
          findCandidate xs (some x) 1
  
    let cand := findCandidate xs none 0
    cand
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible]
  def majorityElement_precond (xs : List Nat) : Prop :=
    xs.length > 0 ∧ xs.any (fun x => xs.count x > xs.length / 2)

  @[reducible]
  def majorityElement_postcond (xs : List Nat) (result: Nat) (h_precond : majorityElement_precond (xs)) : Prop :=
    let count := xs.count result
    count > xs.length / 2

  theorem majorityElement_spec_satisfied (xs: List Nat) (h_precond : majorityElement_precond (xs)) :
      majorityElement_postcond (xs) (majorityElement (xs) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  /--
  -- Reject Inputs
  [
      {
          "input": {
              "xs": "[1, 2, 3]"
          }
      },
      {
          "input": {
              "xs": "[]"
          }
      }
  ]
  -- Test
  [
      {
          "input": {
              "xs": "[3, 3, 4, 2, 3, 3, 3]"
          },
          "expected": 3,
          "unexpected": [
              2,
              4
          ]
      },
      {
          "input": {
              "xs": "[1, 1, 2, 1, 3, 1, 1]"
          },
          "expected": 1,
          "unexpected": [
              2,
              3
          ]
      },
      {
          "input": {
              "xs": "[2, 2, 2, 1, 1]"
          },
          "expected": 2,
          "unexpected": [
              1
          ]
      },
      {
          "input": {
              "xs": "[9, 9, 9, 9, 1, 2, 3]"
          },
          "expected": 9,
          "unexpected": [
              1,
              2,
              3
          ]
      },
      {
          "input": {
              "xs": "[5, 5, 5, 5, 5, 6, 7]"
          },
          "expected": 5,
          "unexpected": [
              6,
              7
          ]
      }
  ]
  -/
