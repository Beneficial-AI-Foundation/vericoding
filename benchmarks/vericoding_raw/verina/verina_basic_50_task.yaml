vc-description: |-
  /--
  -----Description-----  
  This task is about calculating the absolute value of an integer. The goal is to determine the non-negative value of a given integer: if the integer is non-negative, it remains unchanged; if it is negative, its positive counterpart is returned.

  -----Input-----  
  The input consists of:  
  • x: An integer.

  -----Output-----  
  The output is an integer that represents the absolute value of the input. Specifically:  
  • If x is non-negative, the output is x.  
  • If x is negative, the output is the negation of x (that is, a value y such that x + y = 0).

  -----Note-----  
  This function should correctly handle zero, positive, and negative integers.
  -/

vc-preamble: |-
  import Mathlib

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def Abs (x : Int) (h_precond : Abs_precond (x)) : Int :=

vc-implementation: |-
  -- <vc-implementation>
    if x < 0 then -x else x
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def Abs_precond (x : Int) : Prop :=
    True

  @[reducible, simp]
  def Abs_postcond (x : Int) (result: Int) (h_precond : Abs_precond (x)) :=
    (x ≥ 0 → x = result) ∧ (x < 0 → x + result = 0)

  theorem Abs_spec_satisfied (x: Int) (h_precond : Abs_precond (x)) :
      Abs_postcond (x) (Abs (x) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
      simp [Abs_postcond, Abs]
      apply And.intro
      . intro h
        split
        case isTrue ht =>
          have h': ¬0 ≤ x := not_le.mpr ht
          contradiction
        case isFalse =>
          rfl
      . intro h
        split
        case isTrue =>
          simp
        case isFalse =>
          contradiction
  -- </vc-proof>

vc-postamble: |-
  /-
  -- Invalid Inputs
  []
  -- Tests
  [
      {
          "input": {
              "x": 5
          },
          "expected": 5,
          "unexpected": [
              -5,
              0,
              10
          ]
      },
      {
          "input": {
              "x": 0
          },
          "expected": 0,
          "unexpected": [
              -1,
              1,
              -5
          ]
      },
      {
          "input": {
              "x": -5
          },
          "expected": 5,
          "unexpected": [
              -5,
              -10,
              0
          ]
      },
      {
          "input": {
              "x": 10
          },
          "expected": 10,
          "unexpected": [
              -10,
              0,
              5
          ]
      },
      {
          "input": {
              "x": -10
          },
          "expected": 10,
          "unexpected": [
              -10,
              -1,
              0
          ]
      }
  ]
  -/
