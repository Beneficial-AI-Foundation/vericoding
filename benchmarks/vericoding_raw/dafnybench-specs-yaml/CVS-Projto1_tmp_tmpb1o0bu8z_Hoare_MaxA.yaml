vc-preamble: |-
  function fib (n: nat) : nat
  {
      if n == 0 then 1 else
      if n == 1 then 1 else
      fib(n -1) + fib (n-2)
  }



  datatype List<T> = Nil | Cons(head: T, tail: List<T>)

  function add(l:List<int>) : int
  {
      match l
      case Nil => 0
      case Cons(x, xs) => x + add(xs)
  }

vc-helpers: |-
  // <vc-helpers>
  // </vc-helpers>

vc-spec: |-
  method MaxA (a: array<int>) returns (m: int)
      requires a.Length > 0
      ensures forall i :: 0 <= i < a.Length ==> a[i] <= m
      ensures exists i :: 0 <= i < a.Length && a[i] == m

vc-code: |-
  // <vc-code>
  {
    assume false;
  }
  // </vc-code>

vc-postamble: |-

