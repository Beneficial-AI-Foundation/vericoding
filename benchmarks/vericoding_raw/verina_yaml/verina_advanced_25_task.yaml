vc-description: |-
  /--
  -----Description----- 
  This task requires implementing a Lean 4 method that finds the length of the longest strictly increasing subsequence in an array of integers. A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements.

  -----Input-----
  The input consists of one parameter:
  nums: A list of integers representing the input array.

  -----Output-----
  The output is an integer:
  Returns the length of the longest strictly increasing subsequence in the input array.
  -/

vc-preamble: |-
  import Mathlib.Data.List.Basic

vc-helpers: |-
  -- <vc-helpers>
  def maxInArray (arr : Array Nat) : Nat :=
    arr.foldl (fun a b => if a ≥ b then a else b) 0
  -- </vc-helpers>

vc-signature: |-
  def lengthOfLIS (nums : List Int) (h_precond : lengthOfLIS_precond (nums)) : Nat :=

vc-implementation: |-
  -- <vc-implementation>
    if nums.isEmpty then 0
    else
      let n := nums.length
      Id.run do
        let mut dp : Array Nat := Array.mkArray n 1
  
        for i in [1:n] do
          for j in [0:i] do
            if nums[j]! < nums[i]! && dp[j]! + 1 > dp[i]! then
              dp := dp.set! i (dp[j]! + 1)
  
        maxInArray dp
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible]
  def lengthOfLIS_precond (nums : List Int) : Prop :=
    True

  @[reducible]
  def lengthOfLIS_postcond (nums : List Int) (result: Nat) (h_precond : lengthOfLIS_precond (nums)) : Prop :=
    let allSubseq := (nums.foldl fun acc x => acc ++ acc.map (fun sub => x :: sub)) [[]] |>.map List.reverse
    let increasingSubseqLens := allSubseq.filter (fun l => List.Pairwise (· < ·) l) |>.map (·.length)
    increasingSubseqLens.contains result ∧ increasingSubseqLens.all (· ≤ result)

  theorem lengthOfLIS_spec_satisfied (nums: List Int) (h_precond : lengthOfLIS_precond (nums)) :
      lengthOfLIS_postcond (nums) (lengthOfLIS (nums) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-