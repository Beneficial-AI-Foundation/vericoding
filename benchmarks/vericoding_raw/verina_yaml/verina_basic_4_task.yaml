vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def kthElement (arr : Array Int) (k : Nat) (h_precond : kthElement_precond (arr) (k)) : Int :=

vc-implementation: |-
  -- <vc-implementation>
    arr[k - 1]!
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def kthElement_precond (arr : Array Int) (k : Nat) : Prop :=
    k ≥ 1 ∧ k ≤ arr.size

  @[reducible, simp]
  def kthElement_postcond (arr : Array Int) (k : Nat) (result: Int) (h_precond : kthElement_precond (arr) (k)) :=
    arr.any (fun x => x = result ∧ x = arr[k - 1]!)

  theorem kthElement_spec_satisfied (arr: Array Int) (k: Nat) (h_precond : kthElement_precond (arr) (k)) :
      kthElement_postcond (arr) (k) (kthElement (arr) (k) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    unfold kthElement kthElement_postcond
    unfold kthElement_precond at h_precond
    have ⟨hp1, hp2⟩ := h_precond
    simp_all
    have h': k - 1 < arr.size := by
      exact Nat.sub_one_lt_of_le hp1 hp2
    exists k - 1
    exists h'
    exact Eq.symm (getElem!_pos arr (k - 1) ((Iff.of_eq (Eq.refl (k - 1 < arr.size))).mpr h'))
  -- </vc-proof>

vc-postamble: |-