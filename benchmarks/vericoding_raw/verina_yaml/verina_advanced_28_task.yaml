vc-description: |-
  /--
  -----Description-----
  This task requires writing a Lean 4 function that finds the length of the longest sequence of consecutive integers present in a given list. The numbers do not need to appear in order. The elements are unique.

  A consecutive sequence consists of integers that can be arranged in increasing order with no gaps. Your function should find the longest such streak.

  -----Input-----
  - nums: A list of integers (no duplicates).

  -----Output-----
  - A natural number: the length of the longest consecutive sequence.
  -/

vc-preamble: |-
  import Std.Data.HashSet
  import Mathlib
  open Std

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def longestConsecutive (nums : List Int) (h_precond : longestConsecutive_precond (nums)) : Nat :=

vc-implementation: |-
  -- <vc-implementation>
    Id.run do
      let mut set := HashSet.empty
      for x in nums do
        set := set.insert x
  
      let mut maxLen := 0
  
      for x in nums do
        if !set.contains (x - 1) then
          let mut curr := x
          let mut length := 1
          while set.contains (curr + 1) do
            curr := curr + 1
            length := length + 1
          maxLen := Nat.max maxLen length
  
      return maxLen
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def longestConsecutive_precond (nums : List Int) : Prop :=
    List.Nodup nums

  def isConsecutive (seq : List Int) : Bool :=
    seq.length = 0 ∨ seq.zipIdx.all (fun (x, i) => x = i + seq[0]!)
  @[reducible, simp]
  def longestConsecutive_postcond (nums : List Int) (result: Nat) (h_precond : longestConsecutive_precond (nums)) : Prop :=
    let sorted_nums := nums.mergeSort
    let consec_sublist_lens := List.range nums.length |>.flatMap (fun start =>
      List.range (nums.length - start + 1) |>.map (fun len => sorted_nums.extract start (start + len))) |>.filter isConsecutive |>.map (·.length)
  
    (nums = [] → result = 0) ∧
    (nums ≠ [] → consec_sublist_lens.contains result ∧ consec_sublist_lens.all (· ≤ result))

  theorem longestConsecutive_spec_satisfied (nums: List Int) (h_precond : longestConsecutive_precond (nums)) :
      longestConsecutive_postcond (nums) (longestConsecutive (nums) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-