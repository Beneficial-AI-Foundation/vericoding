vc-description: |-
  /--
  -----Description-----
  This task involves determining how many numbers within an array are less than a specified threshold. The problem is focused on identifying and counting such numbers based purely on their value in relation to the threshold.

  -----Input-----
  The input consists of:
  • numbers: An array of integers (which may be empty or non-empty).
  • threshold: An integer that serves as the comparison threshold.

  -----Output-----
  The output is a natural number (Nat) representing the count of elements in the array that are less than the given threshold.

  -----Note-----
  There are no additional preconditions; the function should work correctly for any array of integers and any integer threshold.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  def countLessThan (numbers : Array Int) (threshold : Int) : Nat :=
    let rec count (i : Nat) (acc : Nat) : Nat :=
      if i < numbers.size then
        let new_acc := if numbers[i]! < threshold then acc + 1 else acc
        count (i + 1) new_acc
      else
        acc
    count 0 0
  -- </vc-helpers>

vc-signature: |-
  def CountLessThan (numbers : Array Int) (threshold : Int) (h_precond : CountLessThan_precond (numbers) (threshold)) : Nat :=

vc-implementation: |-
  -- <vc-implementation>
    countLessThan numbers threshold
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def CountLessThan_precond (numbers : Array Int) (threshold : Int) : Prop :=
    True

  @[reducible, simp]
  def CountLessThan_postcond (numbers : Array Int) (threshold : Int) (result: Nat) (h_precond : CountLessThan_precond (numbers) (threshold)) :=
    result - numbers.foldl (fun count n => if n < threshold then count + 1 else count) 0 = 0 ∧
    numbers.foldl (fun count n => if n < threshold then count + 1 else count) 0 - result = 0

  theorem CountLessThan_spec_satisfied (numbers: Array Int) (threshold: Int) (h_precond : CountLessThan_precond (numbers) (threshold)) :
      CountLessThan_postcond (numbers) (threshold) (CountLessThan (numbers) (threshold) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-