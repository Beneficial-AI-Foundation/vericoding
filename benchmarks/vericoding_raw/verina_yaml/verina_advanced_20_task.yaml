vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def isItEight (n : Int) (h_precond : isItEight_precond (n)) : Bool :=

vc-implementation: |-
  -- <vc-implementation>
    let rec hasDigitEight (m : Nat) : Bool :=
      if m <= 0 then false
      else if m % 10 == 8 then true
      else hasDigitEight (m / 10)
      termination_by m
  
    let absN := Int.natAbs n
    n % 8 == 0 || hasDigitEight absN
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible]
  def isItEight_precond (n : Int) : Prop :=
    True

  @[reducible]
  def isItEight_postcond (n : Int) (result: Bool) (h_precond : isItEight_precond (n)) : Prop :=
    let absN := Int.natAbs n;
    (n % 8 == 0 ∨ ∃ i, absN / (10^i) % 10 == 8) ↔ result

  theorem isItEight_spec_satisfied (n: Int) (h_precond : isItEight_precond (n)) :
      isItEight_postcond (n) (isItEight (n) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-