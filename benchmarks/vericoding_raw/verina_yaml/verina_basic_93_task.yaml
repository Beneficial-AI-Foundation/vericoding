vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def SwapBitvectors (X : UInt8) (Y : UInt8) (h_precond : SwapBitvectors_precond (X) (Y)) : UInt8 × UInt8 :=

vc-implementation: |-
  -- <vc-implementation>
    let temp := X.xor Y
    let newY := temp.xor Y
    let newX := temp.xor newY
    (newX, newY)
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def SwapBitvectors_precond (X : UInt8) (Y : UInt8) : Prop :=
    True

  @[reducible, simp]
  def SwapBitvectors_postcond (X : UInt8) (Y : UInt8) (result: UInt8 × UInt8) (h_precond : SwapBitvectors_precond (X) (Y)) :=
    result.fst = Y ∧ result.snd = X ∧
    (X ≠ Y → result.fst ≠ X ∧ result.snd ≠ Y)

  theorem SwapBitvectors_spec_satisfied (X: UInt8) (Y: UInt8) (h_precond : SwapBitvectors_precond (X) (Y)) :
      SwapBitvectors_postcond (X) (Y) (SwapBitvectors (X) (Y) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-