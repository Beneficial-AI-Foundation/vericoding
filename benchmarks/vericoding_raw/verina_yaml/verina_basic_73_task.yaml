vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def Match (s : String) (p : String) (h_precond : Match_precond (s) (p)) : Bool :=

vc-implementation: |-
  -- <vc-implementation>
    let sList := s.toList
    let pList := p.toList
    let rec loop (i : Nat) : Bool :=
      if i < sList.length then
        if (sList[i]! ≠ pList[i]!) ∧ (pList[i]! ≠ '?') then false
        else loop (i + 1)
      else true
    loop 0
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def Match_precond (s : String) (p : String) : Prop :=
    s.toList.length = p.toList.length

  @[reducible, simp]
  def Match_postcond (s : String) (p : String) (result: Bool) (h_precond : Match_precond (s) (p)) :=
    (result = true ↔ ∀ n : Nat, n < s.toList.length → ((s.toList[n]! = p.toList[n]!) ∨ (p.toList[n]! = '?')))

  theorem Match_spec_satisfied (s: String) (p: String) (h_precond : Match_precond (s) (p)) :
      Match_postcond (s) (p) (Match (s) (p) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-