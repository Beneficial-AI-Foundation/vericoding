vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  def countOccurrences (n : Int) (lst : List Int) : Nat :=
    lst.foldl (fun acc x => if x = n then acc + 1 else acc) 0
  -- </vc-helpers>

vc-signature: |-
  def findMajorityElement (lst : List Int) (h_precond : findMajorityElement_precond (lst)) : Int :=

vc-implementation: |-
  -- <vc-implementation>
    let n := lst.length
    let majority := lst.find? (fun x => countOccurrences x lst > n / 2)
    match majority with
    | some x => x
    | none => -1
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def findMajorityElement_precond (lst : List Int) : Prop :=
    True

  @[reducible, simp]
  def findMajorityElement_postcond (lst : List Int) (result: Int) (h_precond : findMajorityElement_precond (lst)) : Prop :=
    let count := fun x => (lst.filter (fun y => y = x)).length
    let n := lst.length
    let majority := count result > n / 2 ∧ lst.all (fun x => count x ≤ n / 2 ∨ x = result)
    (result = -1 → lst.all (count · ≤ n / 2) ∨ majority) ∧
    (result ≠ -1 → majority)

  theorem findMajorityElement_spec_satisfied (lst: List Int) (h_precond : findMajorityElement_precond (lst)) :
      findMajorityElement_postcond (lst) (findMajorityElement (lst) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-