vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def SquareRoot (N : Nat) (h_precond : SquareRoot_precond (N)) : Nat :=

vc-implementation: |-
  -- <vc-implementation>
    let rec boundedLoop : Nat → Nat → Nat
      | 0, r => r
      | bound+1, r =>
          if (r + 1) * (r + 1) ≤ N then
            boundedLoop bound (r + 1)
          else
            r
    boundedLoop (N+1) 0
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def SquareRoot_precond (N : Nat) : Prop :=
    True

  @[reducible, simp]
  def SquareRoot_postcond (N : Nat) (result: Nat) (h_precond : SquareRoot_precond (N)) :=
    result * result ≤ N ∧ N < (result + 1) * (result + 1)

  theorem SquareRoot_spec_satisfied (N: Nat) (h_precond : SquareRoot_precond (N)) :
      SquareRoot_postcond (N) (SquareRoot (N) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-