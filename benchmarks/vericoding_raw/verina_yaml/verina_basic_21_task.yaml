vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def isSublist (sub : List Int) (main : List Int) (h_precond : isSublist_precond (sub) (main)) : Bool :=

vc-implementation: |-
  -- <vc-implementation>
    let subLen := sub.length
    let mainLen := main.length
    if subLen > mainLen then
      false
    else
      let rec check (i : Nat) : Bool :=
        if i + subLen > mainLen then
          false
        else if sub = (main.drop i).take subLen then
          true
        else if i + 1 ≤ mainLen then
          check (i + 1)
        else
          false
      termination_by mainLen - i
      check 0
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def isSublist_precond (sub : List Int) (main : List Int) : Prop :=
    True

  @[reducible, simp]
  def isSublist_postcond (sub : List Int) (main : List Int) (result: Bool) (h_precond : isSublist_precond (sub) (main)) :=
    (∃ i, i + sub.length ≤ main.length ∧ sub = (main.drop i).take sub.length) ↔ result

  theorem isSublist_spec_satisfied (sub: List Int) (main: List Int) (h_precond : isSublist_precond (sub) (main)) :
      isSublist_postcond (sub) (main) (isSublist (sub) (main) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-