vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  def isEven (n : Int) : Bool :=
    n % 2 = 0
  -- </vc-helpers>

vc-signature: |-
  def FindEvenNumbers (arr : Array Int) (h_precond : FindEvenNumbers_precond (arr)) : Array Int :=

vc-implementation: |-
  -- <vc-implementation>
    let rec loop (i : Nat) (acc : Array Int) : Array Int :=
      if i < arr.size then
        if isEven (arr.getD i 0) then
          loop (i + 1) (acc.push (arr.getD i 0))
        else
          loop (i + 1) acc
      else
        acc
    loop 0 (Array.mkEmpty 0)
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def FindEvenNumbers_precond (arr : Array Int) : Prop :=
    True

  @[reducible, simp]
  def FindEvenNumbers_postcond (arr : Array Int) (result: Array Int) (h_precond : FindEvenNumbers_precond (arr)) :=
    result.all (fun x => isEven x && x ∈ arr) ∧
    List.Pairwise (fun (x, i) (y, j) => if i < j then arr.idxOf x ≤ arr.idxOf y else true) (result.toList.zipIdx)

  theorem FindEvenNumbers_spec_satisfied (arr: Array Int) (h_precond : FindEvenNumbers_precond (arr)) :
      FindEvenNumbers_postcond (arr) (FindEvenNumbers (arr) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-