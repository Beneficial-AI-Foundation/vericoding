vc-description: |-
  /--
  -----Description----- 
  This task requires writing a Lean 4 method that determines whether a given string contains all 5 English vowels: a, e, i, o, u.

  The check is case-insensitive, meaning that both uppercase and lowercase vowels count.

  -----Input-----
  The input consists of a string:
  s: A string of alphabetic characters (may include uppercase and lowercase)

  -----Output-----
  The output is true or false:
  Returns true if the input string contains all 5 vowels (a, e, i, o, u), false otherwise.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  def toLower (c : Char) : Char :=
    if 'A' ≤ c && c ≤ 'Z' then
      Char.ofNat (Char.toNat c + 32)
    else
      c
  
  def normalize_str (s : String) : List Char :=
    s.data.map toLower
  -- </vc-helpers>

vc-signature: |-
  def allVowels (s : String) (h_precond : allVowels_precond (s)) : Bool :=

vc-implementation: |-
  -- <vc-implementation>
    let chars := normalize_str s
    let vowelSet := ['a', 'e', 'i', 'o', 'u']
    vowelSet.all (fun v => chars.contains v)
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible]
  def allVowels_precond (s : String) : Prop :=
    True

  @[reducible]
  def allVowels_postcond (s : String) (result: Bool) (h_precond : allVowels_precond (s)) : Prop :=
    let chars := normalize_str s
    (result ↔ List.all ['a', 'e', 'i', 'o', 'u'] (fun v => chars.contains v))

  theorem allVowels_spec_satisfied (s: String) (h_precond : allVowels_precond (s)) :
      allVowels_postcond (s) (allVowels (s) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-