vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def lastPosition (arr : Array Int) (elem : Int) (h_precond : lastPosition_precond (arr) (elem)) : Int :=

vc-implementation: |-
  -- <vc-implementation>
    let rec loop (i : Nat) (pos : Int) : Int :=
      if i < arr.size then
        let a := arr[i]!
        if a = elem then loop (i + 1) i
        else loop (i + 1) pos
      else pos
    loop 0 (-1)
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def lastPosition_precond (arr : Array Int) (elem : Int) : Prop :=
    List.Pairwise (· ≤ ·) arr.toList

  @[reducible, simp]
  def lastPosition_postcond (arr : Array Int) (elem : Int) (result: Int) (h_precond : lastPosition_precond (arr) (elem)) :=
    (result ≥ 0 →
      arr[result.toNat]! = elem ∧ (arr.toList.drop (result.toNat + 1)).all (· ≠ elem)) ∧
    (result = -1 → arr.toList.all (· ≠ elem))

  theorem lastPosition_spec_satisfied (arr: Array Int) (elem: Int) (h_precond : lastPosition_precond (arr) (elem)) :
      lastPosition_postcond (arr) (elem) (lastPosition (arr) (elem) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-