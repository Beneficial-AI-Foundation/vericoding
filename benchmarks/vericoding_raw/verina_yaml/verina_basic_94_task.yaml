vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def iter_copy (s : Array Int) (h_precond : iter_copy_precond (s)) : Array Int :=

vc-implementation: |-
  -- <vc-implementation>
    let rec loop (i : Nat) (acc : Array Int) : Array Int :=
      if i < s.size then
        match s[i]? with
        | some val => loop (i + 1) (acc.push val)
        | none => acc  -- This case shouldn't happen when i < s.size
      else
        acc
    loop 0 Array.empty
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def iter_copy_precond (s : Array Int) : Prop :=
    True

  @[reducible, simp]
  def iter_copy_postcond (s : Array Int) (result: Array Int) (h_precond : iter_copy_precond (s)) :=
    (s.size = result.size) ∧ (∀ i : Nat, i < s.size → s[i]! = result[i]!)

  theorem iter_copy_spec_satisfied (s: Array Int) (h_precond : iter_copy_precond (s)) :
      iter_copy_postcond (s) (iter_copy (s) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-