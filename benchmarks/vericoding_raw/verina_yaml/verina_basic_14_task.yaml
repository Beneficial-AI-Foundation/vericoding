vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def containsZ (s : String) (h_precond : containsZ_precond (s)) : Bool :=

vc-implementation: |-
  -- <vc-implementation>
    s.toList.any fun c => c = 'z' || c = 'Z'
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def containsZ_precond (s : String) : Prop :=
    True

  @[reducible, simp]
  def containsZ_postcond (s : String) (result: Bool) (h_precond : containsZ_precond (s)) :=
    let cs := s.toList
    (∃ x, x ∈ cs ∧ (x = 'z' ∨ x = 'Z')) ↔ result

  theorem containsZ_spec_satisfied (s: String) (h_precond : containsZ_precond (s)) :
      containsZ_postcond (s) (containsZ (s) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    unfold containsZ containsZ_postcond
    simp_all
  -- </vc-proof>

vc-postamble: |-