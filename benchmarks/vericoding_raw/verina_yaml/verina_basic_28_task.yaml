vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def isPrime (n : Nat) (h_precond : isPrime_precond (n)) : Bool :=

vc-implementation: |-
  -- <vc-implementation>
    let bound := n
    let rec check (i : Nat) (fuel : Nat) : Bool :=
      if fuel = 0 then true
      else if i * i > n then true
      else if n % i = 0 then false
      else check (i + 1) (fuel - 1)
    check 2 bound
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def isPrime_precond (n : Nat) : Prop :=
    n ≥ 2

  @[reducible, simp]
  def isPrime_postcond (n : Nat) (result: Bool) (h_precond : isPrime_precond (n)) :=
    (result → (List.range' 2 (n - 2)).all (fun k => n % k ≠ 0)) ∧
    (¬ result → (List.range' 2 (n - 2)).any (fun k => n % k = 0))

  theorem isPrime_spec_satisfied (n: Nat) (h_precond : isPrime_precond (n)) :
      isPrime_postcond (n) (isPrime (n) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-