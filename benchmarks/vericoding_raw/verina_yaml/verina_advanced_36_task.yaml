vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def majorityElement (xs : List Nat) (h_precond : majorityElement_precond (xs)) : Nat :=

vc-implementation: |-
  -- <vc-implementation>
    let rec countOccurrences (target : Nat) (lst : List Nat) : Nat :=
      match lst with
      | [] => 0
      | y :: ys =>
        if y = target then 1 + countOccurrences target ys
        else countOccurrences target ys
  
    let rec findCandidate (lst : List Nat) (candidate : Option Nat) (count : Nat) : Nat :=
      match lst with
      | [] =>
        match candidate with
        | some c => c
        | none => 0 -- unreachable since we assume majority element exists
      | x :: xs =>
        match candidate with
        | some c =>
          if x = c then
            findCandidate xs (some c) (count + 1)
          else if count = 0 then
            findCandidate xs (some x) 1
          else
            findCandidate xs (some c) (count - 1)
        | none =>
          findCandidate xs (some x) 1
  
    let cand := findCandidate xs none 0
    cand
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible]
  def majorityElement_precond (xs : List Nat) : Prop :=
    xs.length > 0 âˆ§ xs.any (fun x => xs.count x > xs.length / 2)

  @[reducible]
  def majorityElement_postcond (xs : List Nat) (result: Nat) (h_precond : majorityElement_precond (xs)) : Prop :=
    let count := xs.count result
    count > xs.length / 2

  theorem majorityElement_spec_satisfied (xs: List Nat) (h_precond : majorityElement_precond (xs)) :
      majorityElement_postcond (xs) (majorityElement (xs) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-