vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def removeDuplicates (nums : List Int) (h_precond : removeDuplicates_precond (nums)) : Nat :=

vc-implementation: |-
  -- <vc-implementation>
    match nums with
    | [] =>
      0
    | h :: t =>
      let init := h
      let initCount := 1
      let rec countUniques (prev : Int) (xs : List Int) (k : Nat) : Nat :=
        match xs with
        | [] =>
          k
        | head :: tail =>
          let isDuplicate := head = prev
          if isDuplicate then
            countUniques prev tail k
          else
            let newK := k + 1
            countUniques head tail newK
      countUniques init t initCount
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible]
  def removeDuplicates_precond (nums : List Int) : Prop :=
    -- nums are sorted in non-decreasing order
    List.Pairwise (· ≤ ·) nums

  @[reducible]
  def removeDuplicates_postcond (nums : List Int) (result: Nat) (h_precond : removeDuplicates_precond (nums)) : Prop :=
    result - nums.eraseDups.length = 0 ∧
    nums.eraseDups.length ≤ result

  theorem removeDuplicates_spec_satisfied (nums: List Int) (h_precond : removeDuplicates_precond (nums)) :
      removeDuplicates_postcond (nums) (removeDuplicates (nums) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-