vc-description: |-
  /--
  -----Description-----  
  This task focuses on determining if a given integer is even. The problem requires checking whether the integer can be represented as twice another integer, meaning it is divisible by 2 without any remainder.

  -----Input-----  
  The input consists of a single integer:  
  • x: An integer to be evaluated.

  -----Output-----  
  The output is a boolean value:  
  • true if x is even (x mod 2 equals 0).  
  • false if x is odd.

  -----Note-----  
  No additional preconditions are required. The method should work correctly for any integer value.
  -/

vc-preamble: |-
  import Mathlib

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def ComputeIsEven (x : Int) (h_precond : ComputeIsEven_precond (x)) : Bool :=

vc-implementation: |-
  -- <vc-implementation>
    if x % 2 = 0 then true else false
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def ComputeIsEven_precond (x : Int) : Prop :=
    True

  @[reducible, simp]
  def ComputeIsEven_postcond (x : Int) (result: Bool) (h_precond : ComputeIsEven_precond (x)) :=
    result = true ↔ ∃ k : Int, x = 2 * k

  theorem ComputeIsEven_spec_satisfied (x: Int) (h_precond : ComputeIsEven_precond (x)) :
      ComputeIsEven_postcond (x) (ComputeIsEven (x) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    unfold ComputeIsEven ComputeIsEven_postcond
    simp
    rfl
  -- </vc-proof>

vc-postamble: |-