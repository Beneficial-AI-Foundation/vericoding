vc-description: |-
  /--
  -----Description-----
  This task requires writing a Lean 4 function that finds the maximum subarray sum from a given list of integers. 
  A subarray is a contiguous sequence of elements within the list. 
  The function should return the maximum sum that can be obtained from any subarray.

  -----Input-----
  The input is a list of integers:
  xs: A list of integers (can include negative numbers).

  -----Output-----
  The output is an integer:
  Returns the maximum sum among all contiguous subarrays of xs. 
  If the list is empty, the result should be 0.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def maxSubarraySum (xs : List Int) (h_precond : maxSubarraySum_precond (xs)) : Int :=

vc-implementation: |-
  -- <vc-implementation>
    let rec helper (lst : List Int) (curMax : Int) (globalMax : Int) : Int :=
      match lst with
      | [] => globalMax
      | x :: rest =>
        let newCurMax := max x (curMax + x)
        let newGlobal := max globalMax newCurMax
        helper rest newCurMax newGlobal
    match xs with
    | [] => 0
    | x :: rest => helper rest x x
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def maxSubarraySum_precond (xs : List Int) : Prop :=
    True

  @[reducible, simp]
  def maxSubarraySum_postcond (xs : List Int) (result: Int) (h_precond : maxSubarraySum_precond (xs)) : Prop :=
    -- Find all possible subarrays and their sums
    let subarray_sums := List.range (xs.length + 1) |>.flatMap (fun start =>
      List.range' 1 (xs.length - start) |>.map (fun len =>
        ((xs.drop start).take len).sum
      ))
  
    -- Check if there exists a subarray with sum equal to result
    let has_result_subarray := subarray_sums.any (fun sum => sum == result)
  
  
    -- Check if result is the maximum among all subarray sums
    let is_maximum := subarray_sums.all (· ≤ result)
  
    match xs with
    | [] => result == 0
    | _ => has_result_subarray ∧ is_maximum

  theorem maxSubarraySum_spec_satisfied (xs: List Int) (h_precond : maxSubarraySum_precond (xs)) :
      maxSubarraySum_postcond (xs) (maxSubarraySum (xs) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  /--
  -- Reject Inputs
  []
  -- Test
  [
      {
          "input": {
              "xs": "[1, -2, 3, 4, -1]"
          },
          "expected": 7,
          "unexpected": [
              6,
              5
          ]
      },
      {
          "input": {
              "xs": "[-2, -3, -1, -5]"
          },
          "expected": -1,
          "unexpected": [
              -2,
              0
          ]
      },
      {
          "input": {
              "xs": "[5, -1, 2, -1, 3]"
          },
          "expected": 8,
          "unexpected": [
              9
          ]
      },
      {
          "input": {
              "xs": "[]"
          },
          "expected": 0,
          "unexpected": [
              1
          ]
      },
      {
          "input": {
              "xs": "[4, -1, -2, 1, 5]"
          },
          "expected": 7,
          "unexpected": [
              8
          ]
      }
  ]
  -/
