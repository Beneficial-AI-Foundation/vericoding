vc-description: |-

vc-preamble: |-
  import Mathlib

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def isDivisibleBy11 (n : Int) (h_precond : isDivisibleBy11_precond (n)) : Bool :=

vc-implementation: |-
  -- <vc-implementation>
    n % 11 == 0
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def isDivisibleBy11_precond (n : Int) : Prop :=
    True

  @[reducible, simp]
  def isDivisibleBy11_postcond (n : Int) (result: Bool) (h_precond : isDivisibleBy11_precond (n)) :=
    (result → (∃ k : Int, n = 11 * k)) ∧ (¬ result → (∀ k : Int, ¬ n = 11 * k))

  theorem isDivisibleBy11_spec_satisfied (n: Int) (h_precond : isDivisibleBy11_precond (n)) :
      isDivisibleBy11_postcond (n) (isDivisibleBy11 (n) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    unfold isDivisibleBy11 isDivisibleBy11_postcond
    constructor
    · simp_all
      exact fun a => a
    · apply Not.imp_symm
      rw [not_forall_not]
      intro h
      rw [beq_iff_eq]
      exact Int.emod_eq_zero_of_dvd h
  -- </vc-proof>

vc-postamble: |-