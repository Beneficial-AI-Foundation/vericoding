vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def sumOfSquaresOfFirstNOddNumbers (n : Nat) (h_precond : sumOfSquaresOfFirstNOddNumbers_precond (n)) : Nat :=

vc-implementation: |-
  -- <vc-implementation>
    let rec loop (k : Nat) (sum : Nat) : Nat :=
      if k = 0 then
        sum
      else
        loop (k - 1) (sum + (2 * k - 1) * (2 * k - 1))
    loop n 0
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def sumOfSquaresOfFirstNOddNumbers_precond (n : Nat) : Prop :=
    True

  @[reducible, simp]
  def sumOfSquaresOfFirstNOddNumbers_postcond (n : Nat) (result: Nat) (h_precond : sumOfSquaresOfFirstNOddNumbers_precond (n)) :=
    result - (n * (2 * n - 1) * (2 * n + 1)) / 3 = 0 âˆ§
    (n * (2 * n - 1) * (2 * n + 1)) / 3 - result = 0

  theorem sumOfSquaresOfFirstNOddNumbers_spec_satisfied (n: Nat) (h_precond : sumOfSquaresOfFirstNOddNumbers_precond (n)) :
      sumOfSquaresOfFirstNOddNumbers_postcond (n) (sumOfSquaresOfFirstNOddNumbers (n) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-