vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def SetToSeq (s : List Int) (h_precond : SetToSeq_precond (s)) : List Int :=

vc-implementation: |-
  -- <vc-implementation>
    s.foldl (fun acc x => if acc.contains x then acc else acc ++ [x]) []
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def SetToSeq_precond (s : List Int) : Prop :=
    True

  @[reducible, simp]
  def SetToSeq_postcond (s : List Int) (result: List Int) (h_precond : SetToSeq_precond (s)) :=
    -- Contains exactly the elements of the set
    result.all (fun a => a ∈ s) ∧ s.all (fun a => a ∈ result) ∧
    -- All elements are unique in the result
    result.all (fun a => result.count a = 1) ∧
    -- The order of elements in the result is preserved
    List.Pairwise (fun a b => (result.idxOf a < result.idxOf b) → (s.idxOf a < s.idxOf b)) result

  theorem SetToSeq_spec_satisfied (s: List Int) (h_precond : SetToSeq_precond (s)) :
      SetToSeq_postcond (s) (SetToSeq (s) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-