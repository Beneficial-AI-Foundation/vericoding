vc-description: |-
  /--
  -----Description-----
  Implement a Lean 4 function that merges two ascendingly sorted lists of integers into one single sorted list (ascending). The resulting list must contain all elements from both input lists, preserving their ascending order.

  -----Input-----
  The input consists of two lists of integers:
  arr1: A sorted list of integers (ascending)
  arr2: Another sorted list of integers (ascending)

  -----Output-----
  The output is a list of integers:
  Returns a new list containing all elements from arr1 and arr2, sorted in ascending order.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def mergeSortedLists (arr1 : List Int) (arr2 : List Int) (h_precond : mergeSortedLists_precond (arr1) (arr2)) : List Int :=

vc-implementation: |-
  -- <vc-implementation>
    let rec merge (xs : List Int) (ys : List Int) : List Int :=
      match xs, ys with
      | [], _ => ys
      | _, [] => xs
      | x :: xt, y :: yt =>
        if x <= y then
          x :: merge xt (y :: yt)
        else
          y :: merge (x :: xt) yt
  
    merge arr1 arr2
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible]
  def mergeSortedLists_precond (arr1 : List Int) (arr2 : List Int) : Prop :=
    List.Pairwise (· ≤ ·) arr1 ∧ List.Pairwise (· ≤ ·) arr2

  @[reducible]
  def mergeSortedLists_postcond (arr1 : List Int) (arr2 : List Int) (result: List Int) (h_precond : mergeSortedLists_precond (arr1) (arr2)) : Prop :=
    List.Pairwise (· ≤ ·) result ∧ List.isPerm (arr1 ++ arr2) result

  theorem mergeSortedLists_spec_satisfied (arr1: List Int) (arr2: List Int) (h_precond : mergeSortedLists_precond (arr1) (arr2)) :
      mergeSortedLists_postcond (arr1) (arr2) (mergeSortedLists (arr1) (arr2) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-