vc-description: |-
  /--
  -----Description-----  
  This problem involves computing the triple of a given integer. The goal is to produce an output that is exactly three times the input value.

  -----Input-----  
  The input consists of:  
  • x: An integer representing the value to be tripled.

  -----Output-----  
  The output is an integer that is three times the input value (i.e., 3 * x).

  -----Note-----  
  The implementation uses a local variable to first compute double the input and then adds the original input to get the final result. The accompanying theorem asserts that the function satisfies the specification of computing 3 * x.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def Triple (x : Int) (h_precond : Triple_precond (x)) : Int :=

vc-implementation: |-
  -- <vc-implementation>
    let y := x * 2
    y + x
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def Triple_precond (x : Int) : Prop :=
    True

  @[reducible, simp]
  def Triple_postcond (x : Int) (result: Int) (h_precond : Triple_precond (x)) :=
    result / 3 = x ∧ result / 3 * 3 = result

  theorem Triple_spec_satisfied (x: Int) (h_precond : Triple_precond (x)) :
      Triple_postcond (x) (Triple (x) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    unfold Triple_postcond Triple
    simp
    rw (occs := [2]) [←Int.mul_one x]
    rw [←Int.mul_add]
    simp +arith
  -- </vc-proof>

vc-postamble: |-
  /--
  -- Reject Inputs
  []
  -- Test
  [
      {
          "input": {
              "x": 0
          },
          "expected": 0,
          "unexpected": [
              1,
              -1,
              2
          ]
      },
      {
          "input": {
              "x": 1
          },
          "expected": 3,
          "unexpected": [
              2,
              4,
              5
          ]
      },
      {
          "input": {
              "x": -1
          },
          "expected": -3,
          "unexpected": [
              -2,
              0,
              -1
          ]
      },
      {
          "input": {
              "x": 5
          },
          "expected": 15,
          "unexpected": [
              14,
              16,
              10
          ]
      },
      {
          "input": {
              "x": -10
          },
          "expected": -30,
          "unexpected": [
              -20,
              -40,
              -10
          ]
      }
  ]
  -/
