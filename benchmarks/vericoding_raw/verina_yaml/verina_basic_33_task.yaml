vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def smallestMissingNumber (s : List Nat) (h_precond : smallestMissingNumber_precond (s)) : Nat :=

vc-implementation: |-
  -- <vc-implementation>
    let rec findMissing (v : Nat) (l : List Nat) : Nat :=
      match l with
      | [] => v
      | x :: xs =>
        if x > v then v
        else if x = v then findMissing (v + 1) xs
        else findMissing v xs
    findMissing 0 s
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def smallestMissingNumber_precond (s : List Nat) : Prop :=
    List.Pairwise (· ≤ ·) s

  @[reducible, simp]
  def smallestMissingNumber_postcond (s : List Nat) (result: Nat) (h_precond : smallestMissingNumber_precond (s)) :=
    ¬ List.elem result s ∧ (∀ k : Nat, k < result → List.elem k s)

  theorem smallestMissingNumber_spec_satisfied (s: List Nat) (h_precond : smallestMissingNumber_precond (s)) :
      smallestMissingNumber_postcond (s) (smallestMissingNumber (s) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-