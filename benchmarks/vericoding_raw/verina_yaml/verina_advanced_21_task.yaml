vc-description: |-
  /--
  -----Description-----
  Implement a Lean 4 function that checks if a given string is a palindrome. A string is considered a palindrome
  if it reads the same forward and backward.

  -----Input-----
  The input consists of a single string:
  s: A string

  -----Output-----
  The output is a boolean:
  Returns true if s is a palindrome, false otherwise.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def isPalindrome (s : String) (h_precond : isPalindrome_precond (s)) : Bool :=

vc-implementation: |-
  -- <vc-implementation>
    let length := s.length
  
  if length <= 1 then
    true
  else
    let arr := s.toList
  
    let rec checkIndices (left : Nat) (right : Nat) (chars : List Char) : Bool :=
      if left >= right then
        true
      else
        match chars[left]?, chars[right]? with
        | some cLeft, some cRight =>
          if cLeft == cRight then
            checkIndices (left + 1) (right - 1) chars
          else
            false
        | _, _ => false
    let approach1 := checkIndices 0 (length - 1) arr
  
    let rec reverseList (acc : List Char) (xs : List Char) : List Char :=
      match xs with
      | []      => acc
      | h :: t  => reverseList (h :: acc) t
    let reversed := reverseList [] arr
    let approach2 := (arr == reversed)
  
    approach1 && approach2
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def isPalindrome_precond (s : String) : Prop :=
    True

  @[reducible, simp]
  def isPalindrome_postcond (s : String) (result: Bool) (h_precond : isPalindrome_precond (s)) : Prop :=
    (result → (s.toList == s.toList.reverse)) ∧
    (¬ result → (s.toList ≠ [] ∧ s.toList != s.toList.reverse))

  theorem isPalindrome_spec_satisfied (s: String) (h_precond : isPalindrome_precond (s)) :
      isPalindrome_postcond (s) (isPalindrome (s) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  /--
  -- Reject Inputs
  []
  -- Test
  [
      {
          "input": {
              "s": "racecar"
          },
          "expected": true,
          "unexpected": [
              false
          ]
      },
      {
          "input": {
              "s": "abba"
          },
          "expected": true,
          "unexpected": [
              false
          ]
      },
      {
          "input": {
              "s": "abc"
          },
          "expected": false,
          "unexpected": [
              true
          ]
      },
      {
          "input": {
              "s": ""
          },
          "expected": true,
          "unexpected": [
              false
          ]
      },
      {
          "input": {
              "s": "a"
          },
          "expected": true,
          "unexpected": [
              false
          ]
      }
  ]
  -/
