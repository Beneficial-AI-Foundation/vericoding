vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def myMin (x : Int) (y : Int) (h_precond : myMin_precond (x) (y)) : Int :=

vc-implementation: |-
  -- <vc-implementation>
    if x < y then x else y
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def myMin_precond (x : Int) (y : Int) : Prop :=
    True

  @[reducible, simp]
  def myMin_postcond (x : Int) (y : Int) (result: Int) (h_precond : myMin_precond (x) (y)) :=
    (x ≤ y → result = x) ∧ (x > y → result = y)

  theorem myMin_spec_satisfied (x: Int) (y: Int) (h_precond : myMin_precond (x) (y)) :
      myMin_postcond (x) (y) (myMin (x) (y) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    unfold myMin_postcond myMin
    simp
    have h_left : (x ≤ y → y ≤ x → y = x) := by
      intro h₁ h₂
      exact Int.le_antisymm h₂ h₁
    have h_right : (y < x → x < y → x = y) := by
      intro h₁ h₂
      have h_contr : False := Int.lt_irrefl x (Int.lt_trans h₂ h₁)
      contradiction
    exact ⟨h_left, h_right⟩
  -- </vc-proof>

vc-postamble: |-