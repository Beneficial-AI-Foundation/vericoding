vc-description: |-
  /--
  -----Description-----
  This task requires implementing the "Longest Increasing Subsequence" problem in Lean 4.
  Given a list of integers, the function should compute the length of the longest strictly increasing
  subsequence. A subsequence is formed by deleting zero or more elements without changing the order.
  If the list is empty, the function should return 0.

  -----Input-----
  - nums: A list of integers.

  -----Output-----
  - A natural number representing the length of the longest strictly increasing subsequence.
  - If there is no increasing subsequence, return 0.
  -/

vc-preamble: |-
  import Mathlib.Data.List.Basic

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def longestIncreasingSubsequence (nums : List Int) (h_precond : longestIncreasingSubsequence_precond (nums)) : Nat :=

vc-implementation: |-
  -- <vc-implementation>
    let max2 (a : Nat) (b : Nat) : Nat :=
      if a > b then a else b
  
    let rec listLength (l : List Int) : Nat :=
      match l with
      | []      => 0
      | _ :: xs => 1 + listLength xs
  
    let rec helper (lst : List Int) (prev : Option Int) : Nat :=
      match lst with
      | [] => 0
      | h :: t =>
          let canTake : Bool :=
            if prev = none then true
            else if prev.get! < h then true else false
          let withTake : Nat :=
            if canTake then 1 + helper t (some h) else 0
          let withoutTake : Nat := helper t prev
          max2 withTake withoutTake
  
    let result := helper nums none
    result
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def longestIncreasingSubsequence_precond (nums : List Int) : Prop :=
    True

  @[reducible, simp]
  def longestIncreasingSubsequence_postcond (nums : List Int) (result: Nat) (h_precond : longestIncreasingSubsequence_precond (nums)) : Prop :=
    let allSubseq := (nums.foldl fun acc x => acc ++ acc.map (fun sub => x :: sub)) [[]] |>.map List.reverse
    let increasingSubseqLens := allSubseq.filter (fun l => List.Pairwise (· < ·) l) |>.map (·.length)
    increasingSubseqLens.contains result ∧ increasingSubseqLens.all (· ≤ result)

  theorem longestIncreasingSubsequence_spec_satisfied (nums: List Int) (h_precond : longestIncreasingSubsequence_precond (nums)) :
      longestIncreasingSubsequence_postcond (nums) (longestIncreasingSubsequence (nums) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-