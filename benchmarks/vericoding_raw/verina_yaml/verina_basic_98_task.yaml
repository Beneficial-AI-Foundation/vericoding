vc-description: |-
  /--
  -----Description-----
  This task involves computing three times a given integer. Given an integer, the goal is to produce a value that is exactly three times its value.

  -----Input-----
  The input consists of a single integer:
  x: An integer.

  -----Output-----
  The output is an integer:
  Returns the product of the input integer and 3.

  -----Note-----
  There are no additional preconditions.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def Triple (x : Int) (h_precond : Triple_precond (x)) : Int :=

vc-implementation: |-
  -- <vc-implementation>
    x * 3
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def Triple_precond (x : Int) : Prop :=
    True

  @[reducible, simp]
  def Triple_postcond (x : Int) (result: Int) (h_precond : Triple_precond (x)) :=
    result / 3 = x âˆ§ result / 3 * 3 = result

  theorem Triple_spec_satisfied (x: Int) (h_precond : Triple_precond (x)) :
      Triple_postcond (x) (Triple (x) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    unfold Triple_postcond Triple
    simp +arith
  -- </vc-proof>

vc-postamble: |-