vc-description: |-
  /--
  -----Description-----
  This task requires writing a Lean 4 method that determines if a given string is a palindrome, ignoring all
  non-alphanumeric characters and case differences. For example, the string "A man, a plan, a canal: Panama" should return
  true.

  -----Input-----
  A single string:
  s: The string to check for palindrome property.

  -----Output-----
  A boolean (Bool):
  true if s is a palindrome when ignoring non-alphanumeric characters and case. false otherwise.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def palindromeIgnoreNonAlnum (s : String) (h_precond : palindromeIgnoreNonAlnum_precond (s)) : Bool :=

vc-implementation: |-
  -- <vc-implementation>
    let cleaned : List Char :=
      s.data.filter (fun c => c.isAlpha || c.isDigit)
        |>.map Char.toLower
  
    let n := cleaned.length
    let startIndex := 0
    let endIndex := if n = 0 then 0 else n - 1
  
    let rec check (l r : Nat) : Bool :=
      if l >= r then
        true
      else if cleaned[l]? = cleaned[r]? then
        check (l + 1) (r - 1)
      else
        false
  
    check startIndex endIndex
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible]
  def palindromeIgnoreNonAlnum_precond (s : String) : Prop :=
    True

  @[reducible]
  def palindromeIgnoreNonAlnum_postcond (s : String) (result: Bool) (h_precond : palindromeIgnoreNonAlnum_precond (s)) : Prop :=
    let cleaned := s.data.filter (fun c => c.isAlpha || c.isDigit) |>.map Char.toLower
  let forward := cleaned
  let backward := cleaned.reverse
  
  if result then
    forward = backward
  else
    forward â‰  backward

  theorem palindromeIgnoreNonAlnum_spec_satisfied (s: String) (h_precond : palindromeIgnoreNonAlnum_precond (s)) :
      palindromeIgnoreNonAlnum_postcond (s) (palindromeIgnoreNonAlnum (s) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-