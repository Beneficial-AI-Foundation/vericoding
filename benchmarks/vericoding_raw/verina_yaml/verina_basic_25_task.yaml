vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def sumAndAverage (n : Nat) (h_precond : sumAndAverage_precond (n)) : Int × Float :=

vc-implementation: |-
  -- <vc-implementation>
    if n ≤ 0 then (0, 0.0)
    else
      let sum := (List.range (n + 1)).sum
      let average : Float := sum.toFloat / (n.toFloat)
      (sum, average)
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def sumAndAverage_precond (n : Nat) : Prop :=
    True

  @[reducible, simp]
  def sumAndAverage_postcond (n : Nat) (result: Int × Float) (h_precond : sumAndAverage_precond (n)) :=
    (n = 0 → result == (0, 0.0)) ∧
    (n > 0 →
      result.1 == n * (n + 1) / 2 ∧
      result.2 == ((n * (n + 1) / 2).toFloat) / (n.toFloat))

  theorem sumAndAverage_spec_satisfied (n: Nat) (h_precond : sumAndAverage_precond (n)) :
      sumAndAverage_postcond (n) (sumAndAverage (n) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-