vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def allCharactersSame (s : String) (h_precond : allCharactersSame_precond (s)) : Bool :=

vc-implementation: |-
  -- <vc-implementation>
    match s.toList with
    | []      => true
    | c :: cs => cs.all (fun x => x = c)
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def allCharactersSame_precond (s : String) : Prop :=
    True

  @[reducible, simp]
  def allCharactersSame_postcond (s : String) (result: Bool) (h_precond : allCharactersSame_precond (s)) :=
    let cs := s.toList
    (result → List.Pairwise (· = ·) cs) ∧
    (¬ result → (cs ≠ [] ∧ cs.any (fun x => x ≠ cs[0]!)))

  theorem allCharactersSame_spec_satisfied (s: String) (h_precond : allCharactersSame_precond (s)) :
      allCharactersSame_postcond (s) (allCharactersSame (s) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-