vc-description: |-
  /--
  -----Description-----  
  This task requires writing a Lean 4 method that locates the first occurrence of a specified integer within a sorted array of integers. The method returns the index corresponding to the first time the target value appears in the array; if the target is absent, it returns -1. It is also essential that the original array remains unchanged.

  -----Input-----  
  The input consists of:  
  • arr: An array of integers sorted in non-decreasing order.  
  • target: An integer representing the value to search for.

  -----Output-----  
  The output is an integer:  
  • If the target is found, the method returns the index of its first occurrence.  
  • If the target is not found, the method returns -1.

  -----Note-----  
  • The input array must be sorted in non-decreasing order.  
  • The array is guaranteed to remain unmodified after the method executes.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def findFirstOccurrence (arr : Array Int) (target : Int) (h_precond : findFirstOccurrence_precond (arr) (target)) : Int :=

vc-implementation: |-
  -- <vc-implementation>
    let rec loop (i : Nat) : Int :=
      if i < arr.size then
        let a := arr[i]!
        if a = target then i
        else if a > target then -1
        else loop (i + 1)
      else -1
    loop 0
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def findFirstOccurrence_precond (arr : Array Int) (target : Int) : Prop :=
    List.Pairwise (· ≤ ·) arr.toList

  @[reducible, simp]
  def findFirstOccurrence_postcond (arr : Array Int) (target : Int) (result: Int) (h_precond : findFirstOccurrence_precond (arr) (target)) :=
    (result ≥ 0 →
      arr[result.toNat]! = target ∧
      (∀ i : Nat, i < result.toNat → arr[i]! ≠ target)) ∧
    (result = -1 →
      (∀ i : Nat, i < arr.size → arr[i]! ≠ target))

  theorem findFirstOccurrence_spec_satisfied (arr: Array Int) (target: Int) (h_precond : findFirstOccurrence_precond (arr) (target)) :
      findFirstOccurrence_postcond (arr) (target) (findFirstOccurrence (arr) (target) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-