vc-description: |-

vc-preamble: |-
  import Std.Data.HashSet

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def findFirstRepeatedChar (s : String) (h_precond : findFirstRepeatedChar_precond (s)) : Option Char :=

vc-implementation: |-
  -- <vc-implementation>
    let cs := s.toList
    let rec loop (i : Nat) (seen : Std.HashSet Char) : Option Char :=
      if i < cs.length then
        let c := cs[i]!
        if seen.contains c then
          some c
        else
          loop (i + 1) (seen.insert c)
      else
        -- When no repeated char is found, return (false, arbitrary char)
        none
    loop 0 Std.HashSet.empty
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def findFirstRepeatedChar_precond (s : String) : Prop :=
    True

  @[reducible, simp]
  def findFirstRepeatedChar_postcond (s : String) (result: Option Char) (h_precond : findFirstRepeatedChar_precond (s)) :=
    let cs := s.toList
    match result with
    | some c =>
      let secondIdx := cs.zipIdx.findIdx (fun (x, i) => x = c && i ≠ cs.idxOf c)
      -- Exists repeated char
      cs.count c ≥ 2 ∧
      -- There is no other repeated char before the found one
      List.Pairwise (· ≠ ·) (cs.take secondIdx)
    | none =>
      -- There is no repeated char
      List.Pairwise (· ≠ ·) cs

  theorem findFirstRepeatedChar_spec_satisfied (s: String) (h_precond : findFirstRepeatedChar_precond (s)) :
      findFirstRepeatedChar_postcond (s) (findFirstRepeatedChar (s) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-