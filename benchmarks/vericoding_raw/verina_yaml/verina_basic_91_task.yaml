vc-description: |-
  /--
  -----Description-----  
  This task involves creating a function that swaps two integer values. Given two integers, the function should return a pair where the first element is the second input value and the second element is the first input value.

  -----Input-----  
  The input consists of two integers:  
  • X: An integer representing the first value.  
  • Y: An integer representing the second value.

  -----Output-----  
  The output is a pair (Int × Int) that:  
  • Contains the original Y as the first element.  
  • Contains the original X as the second element.

  -----Note-----  
  There are no additional preconditions. The function simply swaps the two input values.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def Swap (X : Int) (Y : Int) (h_precond : Swap_precond (X) (Y)) : Int × Int :=

vc-implementation: |-
  -- <vc-implementation>
    let x := X
    let y := Y
    let tmp := x
    let x := y
    let y := tmp
    (x, y)
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def Swap_precond (X : Int) (Y : Int) : Prop :=
    True

  @[reducible, simp]
  def Swap_postcond (X : Int) (Y : Int) (result: Int × Int) (h_precond : Swap_precond (X) (Y)) :=
    result.fst = Y ∧ result.snd = X ∧
    (X ≠ Y → result.fst ≠ X ∧ result.snd ≠ Y)

  theorem Swap_spec_satisfied (X: Int) (Y: Int) (h_precond : Swap_precond (X) (Y)) :
      Swap_postcond (X) (Y) (Swap (X) (Y) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    unfold Swap_postcond Swap
    simp_all
    exact fun a a_1 => a (id (Eq.symm a_1))
  -- </vc-proof>

vc-postamble: |-