vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def smallestMissing (l : List Nat) (h_precond : smallestMissing_precond (l)) : Nat :=

vc-implementation: |-
  -- <vc-implementation>
    let sortedList := l
    let rec search (lst : List Nat) (n : Nat) : Nat :=
      match lst with
      | [] => n
      | x :: xs =>
        let isEqual := x = n
        let isGreater := x > n
        let nextCand := n + 1
        if isEqual then
          search xs nextCand
        else if isGreater then
          n
        else
          search xs n
    let result := search sortedList 0
    result
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible]
  def smallestMissing_precond (l : List Nat) : Prop :=
    List.Pairwise (· < ·) l

  @[reducible]
  def smallestMissing_postcond (l : List Nat) (result: Nat) (h_precond : smallestMissing_precond (l)) : Prop :=
    result ∉ l ∧ ∀ candidate : Nat, candidate < result → candidate ∈ l

  theorem smallestMissing_spec_satisfied (l: List Nat) (h_precond : smallestMissing_precond (l)) :
      smallestMissing_postcond (l) (smallestMissing (l) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-