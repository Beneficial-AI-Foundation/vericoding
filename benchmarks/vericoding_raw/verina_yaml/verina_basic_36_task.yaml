vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  def isSpaceCommaDot (c : Char) : Bool :=
    if c = ' ' then true
    else if c = ',' then true
    else if c = '.' then true
    else false
  -- </vc-helpers>

vc-signature: |-
  def replaceWithColon (s : String) (h_precond : replaceWithColon_precond (s)) : String :=

vc-implementation: |-
  -- <vc-implementation>
    let cs := s.toList
    let cs' := cs.map (fun c => if isSpaceCommaDot c then ':' else c)
    String.mk cs'
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def replaceWithColon_precond (s : String) : Prop :=
    True

  @[reducible, simp]
  def replaceWithColon_postcond (s : String) (result: String) (h_precond : replaceWithColon_precond (s)) :=
    let cs := s.toList
    let cs' := result.toList
    result.length = s.length ∧
    (∀ i, i < s.length →
      (isSpaceCommaDot cs[i]! → cs'[i]! = ':') ∧
      (¬isSpaceCommaDot cs[i]! → cs'[i]! = cs[i]!))

  theorem replaceWithColon_spec_satisfied (s: String) (h_precond : replaceWithColon_precond (s)) :
      replaceWithColon_postcond (s) (replaceWithColon (s) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    unfold replaceWithColon replaceWithColon_postcond
    simp
    constructor
    · unfold String.length
      simp
    · intro i hi
      have hi' : i < s.data.length := by
        unfold String.length at hi
        simp at hi
        exact hi
      constructor <;> simp_all
  -- </vc-proof>

vc-postamble: |-