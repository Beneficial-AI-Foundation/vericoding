vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def LinearSearch3 (a : Array Int) (P : Int -> Bool) (h_precond : LinearSearch3_precond (a) (P)) : Nat :=

vc-implementation: |-
  -- <vc-implementation>
    let rec loop (n : Nat) : Nat :=
      if n < a.size then
        if P (a[n]!) then n else loop (n + 1)
      else
        0
    loop 0
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def LinearSearch3_precond (a : Array Int) (P : Int -> Bool) : Prop :=
    ∃ i, i < a.size ∧ P (a[i]!)

  @[reducible, simp]
  def LinearSearch3_postcond (a : Array Int) (P : Int -> Bool) (result: Nat) (h_precond : LinearSearch3_precond (a) (P)) :=
    result < a.size ∧ P (a[result]!) ∧ (∀ k, k < result → ¬ P (a[k]!))

  theorem LinearSearch3_spec_satisfied (a: Array Int) (P: Int -> Bool) (h_precond : LinearSearch3_precond (a) (P)) :
      LinearSearch3_postcond (a) (P) (LinearSearch3 (a) (P) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-