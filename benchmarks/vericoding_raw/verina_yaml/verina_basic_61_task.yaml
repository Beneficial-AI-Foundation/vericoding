vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  def isDigit (c : Char) : Bool :=
    (c ≥ '0') && (c ≤ '9')
  -- </vc-helpers>

vc-signature: |-
  def allDigits (s : String) (h_precond : allDigits_precond (s)) : Bool :=

vc-implementation: |-
  -- <vc-implementation>
    let rec loop (it : String.Iterator) : Bool :=
      if it.atEnd then
        true
      else
        if !isDigit it.curr then
          false
        else
          loop it.next
    loop s.iter
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def allDigits_precond (s : String) : Prop :=
    True

  @[reducible, simp]
  def allDigits_postcond (s : String) (result: Bool) (h_precond : allDigits_precond (s)) :=
    (result = true ↔ ∀ c ∈ s.toList, isDigit c)

  theorem allDigits_spec_satisfied (s: String) (h_precond : allDigits_precond (s)) :
      allDigits_postcond (s) (allDigits (s) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-