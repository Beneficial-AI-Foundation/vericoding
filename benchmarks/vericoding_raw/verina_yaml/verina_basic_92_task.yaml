vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def SwapArithmetic (X : Int) (Y : Int) (h_precond : SwapArithmetic_precond (X) (Y)) : (Int × Int) :=

vc-implementation: |-
  -- <vc-implementation>
    let x1 := X
    let y1 := Y
    let x2 := y1 - x1
    let y2 := y1 - x2
    let x3 := y2 + x2
    (x3, y2)
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def SwapArithmetic_precond (X : Int) (Y : Int) : Prop :=
    True

  @[reducible, simp]
  def SwapArithmetic_postcond (X : Int) (Y : Int) (result: (Int × Int)) (h_precond : SwapArithmetic_precond (X) (Y)) :=
    result.1 = Y ∧ result.2 = X ∧
    (X ≠ Y → result.fst ≠ X ∧ result.snd ≠ Y)

  theorem SwapArithmetic_spec_satisfied (X: Int) (Y: Int) (h_precond : SwapArithmetic_precond (X) (Y)) :
      SwapArithmetic_postcond (X) (Y) (SwapArithmetic (X) (Y) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    unfold SwapArithmetic_postcond SwapArithmetic
    simp
    rw [Int.sub_sub_self]
    simp_all
    exact fun a a_1 => a (id (Eq.symm a_1))
  -- </vc-proof>

vc-postamble: |-