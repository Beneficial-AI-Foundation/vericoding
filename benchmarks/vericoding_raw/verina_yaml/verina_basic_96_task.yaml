vc-description: |-
  /--
  -----Description-----  
  This task requires swapping two integer values. Given two integers as input, the objective is to produce an output where their order is reversed: the first element of the output corresponds to the second input and the second element corresponds to the first input.

  -----Input-----  
  The input consists of two integers:  
  • X: An integer value.  
  • Y: Another integer value.

  -----Output-----  
  The output is a tuple (Int × Int) where:  
  • The first element is equal to Y.  
  • The second element is equal to X.

  -----Note-----  
  There are no additional preconditions for this task. The function simply returns a swapped tuple of its two input integers.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def SwapSimultaneous (X : Int) (Y : Int) (h_precond : SwapSimultaneous_precond (X) (Y)) : Int × Int :=

vc-implementation: |-
  -- <vc-implementation>
    (Y, X)
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def SwapSimultaneous_precond (X : Int) (Y : Int) : Prop :=
    True

  @[reducible, simp]
  def SwapSimultaneous_postcond (X : Int) (Y : Int) (result: Int × Int) (h_precond : SwapSimultaneous_precond (X) (Y)) :=
    result.1 = Y ∧ result.2 = X ∧
    (X ≠ Y → result.fst ≠ X ∧ result.snd ≠ Y)

  theorem SwapSimultaneous_spec_satisfied (X: Int) (Y: Int) (h_precond : SwapSimultaneous_precond (X) (Y)) :
      SwapSimultaneous_postcond (X) (Y) (SwapSimultaneous (X) (Y) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    unfold SwapSimultaneous_postcond SwapSimultaneous
    simp_all
    exact fun a a_1 => a (id (Eq.symm a_1))
  -- </vc-proof>

vc-postamble: |-