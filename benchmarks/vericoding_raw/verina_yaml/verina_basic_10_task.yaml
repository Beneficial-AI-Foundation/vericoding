vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def isGreater (n : Int) (a : Array Int) (h_precond : isGreater_precond (n) (a)) : Bool :=

vc-implementation: |-
  -- <vc-implementation>
    a.all fun x => n > x
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def isGreater_precond (n : Int) (a : Array Int) : Prop :=
    a.size > 0

  @[reducible, simp]
  def isGreater_postcond (n : Int) (a : Array Int) (result: Bool) (h_precond : isGreater_precond (n) (a)) :=
    (∀ i, (hi : i < a.size) → n > a[i]) ↔ result

  theorem isGreater_spec_satisfied (n: Int) (a: Array Int) (h_precond : isGreater_precond (n) (a)) :
      isGreater_postcond (n) (a) (isGreater (n) (a) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    unfold isGreater isGreater_postcond
    simp [Array.all_eq]
  -- </vc-proof>

vc-postamble: |-