vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def isPowerOfTwo (n : Int) (h_precond : isPowerOfTwo_precond (n)) : Bool :=

vc-implementation: |-
  -- <vc-implementation>
    if n <= 0 then false
    else
      let rec aux (m : Int) (fuel : Nat) : Bool :=
        if fuel = 0 then false
        else if m = 1 then true
        else if m % 2 ≠ 0 then false
        else aux (m / 2) (fuel - 1)
      aux n n.natAbs
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible]
  def isPowerOfTwo_precond (n : Int) : Prop :=
    True

  def pow (base : Int) (exp : Nat) : Int :=
    match exp with
    | 0 => 1
    | n+1 => base * pow base n
  @[reducible]
  def isPowerOfTwo_postcond (n : Int) (result: Bool) (h_precond : isPowerOfTwo_precond (n)) : Prop :=
    if result then ∃ (x : Nat), (pow 2 x = n) ∧ (n > 0)
    else ¬ (∃ (x : Nat), (pow 2 x = n) ∧ (n > 0))

  theorem isPowerOfTwo_spec_satisfied (n: Int) (h_precond : isPowerOfTwo_precond (n)) :
      isPowerOfTwo_postcond (n) (isPowerOfTwo (n) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-