vc-description: |-
  /--
  -----Description-----  
  Given two integers, the task is to compute two output values: one being the sum of the integers and the other being their difference.

  -----Input-----  
  The input consists of two integers:  
  • x: An integer.  
  • y: An integer.

  -----Output-----  
  The output is a tuple of two integers:  
  • The first element is x + y.  
  • The second element is x - y.

  -----Note-----  
  It is assumed that x and y are valid integers. There are no additional constraints on the inputs.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def MultipleReturns (x : Int) (y : Int) (h_precond : MultipleReturns_precond (x) (y)) : (Int × Int) :=

vc-implementation: |-
  -- <vc-implementation>
    let more := x + y
    let less := x - y
    (more, less)
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def MultipleReturns_precond (x : Int) (y : Int) : Prop :=
    True

  @[reducible, simp]
  def MultipleReturns_postcond (x : Int) (y : Int) (result: (Int × Int)) (h_precond : MultipleReturns_precond (x) (y)) :=
    result.1 = x + y ∧ result.2 + y = x

  theorem MultipleReturns_spec_satisfied (x: Int) (y: Int) (h_precond : MultipleReturns_precond (x) (y)) :
      MultipleReturns_postcond (x) (y) (MultipleReturns (x) (y) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    unfold MultipleReturns_postcond MultipleReturns
    simp
  -- </vc-proof>

vc-postamble: |-