vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def isEven (n : Int) (h_precond : isEven_precond (n)) : Bool :=

vc-implementation: |-
  -- <vc-implementation>
    n % 2 == 0
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def isEven_precond (n : Int) : Prop :=
    True

  @[reducible, simp]
  def isEven_postcond (n : Int) (result: Bool) (h_precond : isEven_precond (n)) :=
    (result → n % 2 = 0) ∧ (¬ result → n % 2 ≠ 0)

  theorem isEven_spec_satisfied (n: Int) (h_precond : isEven_precond (n)) :
      isEven_postcond (n) (isEven (n) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    unfold isEven isEven_postcond
    simp
  -- </vc-proof>

vc-postamble: |-