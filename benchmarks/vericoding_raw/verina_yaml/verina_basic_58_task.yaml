vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  def double_array_elements_aux (s_old s : Array Int) (i : Nat) : Array Int :=
    if i < s.size then
      let new_s := s.set! i (2 * (s_old[i]!))
      double_array_elements_aux s_old new_s (i + 1)
    else
      s
  -- </vc-helpers>

vc-signature: |-
  def double_array_elements (s : Array Int) (h_precond : double_array_elements_precond (s)) : Array Int :=

vc-implementation: |-
  -- <vc-implementation>
    double_array_elements_aux s s 0
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def double_array_elements_precond (s : Array Int) : Prop :=
    True

  @[reducible, simp]
  def double_array_elements_postcond (s : Array Int) (result: Array Int) (h_precond : double_array_elements_precond (s)) :=
    result.size = s.size ∧ ∀ i, i < s.size → result[i]! = 2 * s[i]!

  theorem double_array_elements_spec_satisfied (s: Array Int) (h_precond : double_array_elements_precond (s)) :
      double_array_elements_postcond (s) (double_array_elements (s) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-