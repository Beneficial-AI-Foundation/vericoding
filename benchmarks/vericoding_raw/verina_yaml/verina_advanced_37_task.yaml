vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def majorityElement (nums : List Int) (h_precond : majorityElement_precond (nums)) : Int :=

vc-implementation: |-
  -- <vc-implementation>
    let rec insert (x : Int) (xs : List Int) : List Int :=
      match xs with
      | [] => [x]
      | h :: t =>
        if x ≤ h then
          x :: h :: t
        else
          h :: insert x t
  
    let rec insertionSort (xs : List Int) : List Int :=
      match xs with
      | [] => []
      | h :: t =>
        let sortedTail := insertionSort t
        let sorted := insert h sortedTail
        sorted
  
    let getAt := fun (xs : List Int) (i : Nat) =>
      match xs.drop i with
      | [] => 0
      | h :: _ => h
  
    let sorted := insertionSort nums
  
    let len := sorted.length
    let mid := len / 2
    getAt sorted mid
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def majorityElement_precond (nums : List Int) : Prop :=
    True

  @[reducible, simp]
  def majorityElement_postcond (nums : List Int) (result: Int) (h_precond : majorityElement_precond (nums)) : Prop :=
    let n := nums.length
    (List.count result nums > n / 2) ∧
    nums.all (fun x => x = result ∨ List.count x nums ≤ n / 2)

  theorem majorityElement_spec_satisfied (nums: List Int) (h_precond : majorityElement_precond (nums)) :
      majorityElement_postcond (nums) (majorityElement (nums) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-