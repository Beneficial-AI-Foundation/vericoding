vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  def linearSearchAux (a : Array Int) (e : Int) (n : Nat) : Nat :=
    if n < a.size then
      if a[n]! = e then n else linearSearchAux a e (n + 1)
    else
      0
  -- </vc-helpers>

vc-signature: |-
  def LinearSearch (a : Array Int) (e : Int) (h_precond : LinearSearch_precond (a) (e)) : Nat :=

vc-implementation: |-
  -- <vc-implementation>
    linearSearchAux a e 0
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def LinearSearch_precond (a : Array Int) (e : Int) : Prop :=
    ∃ i, i < a.size ∧ a[i]! = e

  @[reducible, simp]
  def LinearSearch_postcond (a : Array Int) (e : Int) (result: Nat) (h_precond : LinearSearch_precond (a) (e)) :=
    (result < a.size) ∧ (a[result]! = e) ∧ (∀ k : Nat, k < result → a[k]! ≠ e)

  theorem LinearSearch_spec_satisfied (a: Array Int) (e: Int) (h_precond : LinearSearch_precond (a) (e)) :
      LinearSearch_postcond (a) (e) (LinearSearch (a) (e) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-