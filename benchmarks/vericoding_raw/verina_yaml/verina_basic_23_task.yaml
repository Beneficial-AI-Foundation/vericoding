vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def differenceMinMax (a : Array Int) (h_precond : differenceMinMax_precond (a)) : Int :=

vc-implementation: |-
  -- <vc-implementation>
    let rec loop (i : Nat) (minVal maxVal : Int) : Int :=
      if i < a.size then
        let x := a[i]!
        let newMin := if x < minVal then x else minVal
        let newMax := if x > maxVal then x else maxVal
        loop (i + 1) newMin newMax
      else
        maxVal - minVal
    loop 1 (a[0]!) (a[0]!)
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def differenceMinMax_precond (a : Array Int) : Prop :=
    a.size > 0

  @[reducible, simp]
  def differenceMinMax_postcond (a : Array Int) (result: Int) (h_precond : differenceMinMax_precond (a)) :=
    result + (a.foldl (fun acc x => if x < acc then x else acc) (a[0]!)) = (a.foldl (fun acc x => if x > acc then x else acc) (a[0]!))

  theorem differenceMinMax_spec_satisfied (a: Array Int) (h_precond : differenceMinMax_precond (a)) :
      differenceMinMax_postcond (a) (differenceMinMax (a) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-