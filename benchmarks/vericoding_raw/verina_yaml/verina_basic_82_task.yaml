vc-description: |-
  /--
  -----Description-----  
  This task is about processing an array of integers by producing a new array that excludes the first element. The objective is to define a clear behavior: if the array contains at least one element, return a modified array starting from the second element.

  -----Input-----  
  The input consists of:  
  • a: An array of integers.

  -----Output-----  
  The output is an array of integers that:  
  • Has a length equal to the original array's length minus one.  
  • Contains the same elements as the input array except for the first element.  
  • Satisfies the condition that for every index i in the output array, the element at position i is equal to the element at position i+1 in the input array.

  -----Note-----  
  It is assumed that the input array is non-empty.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  def copyFrom (a : Array Int) (i : Nat) (acc : Array Int) : Array Int :=
    if i < a.size then
      copyFrom a (i + 1) (acc.push (a[i]!))
    else
      acc
  -- </vc-helpers>

vc-signature: |-
  def remove_front (a : Array Int) (h_precond : remove_front_precond (a)) : Array Int :=

vc-implementation: |-
  -- <vc-implementation>
    if a.size > 0 then
      let c := copyFrom a 1 (Array.mkEmpty (a.size - 1))
      c
    else
      panic "Precondition violation: array is empty"
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def remove_front_precond (a : Array Int) : Prop :=
    a.size > 0

  @[reducible, simp]
  def remove_front_postcond (a : Array Int) (result: Array Int) (h_precond : remove_front_precond (a)) :=
    a.size > 0 ∧ result.size = a.size - 1 ∧ (∀ i : Nat, i < result.size → result[i]! = a[i + 1]!)

  theorem remove_front_spec_satisfied (a: Array Int) (h_precond : remove_front_precond (a)) :
      remove_front_postcond (a) (remove_front (a) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  /--
  -- Reject Inputs
  [
      {
          "input": {
              "a": "#[]"
          }
      }
  ]
  -- Test
  [
      {
          "input": {
              "a": "#[1, 2, 3, 4, 5]"
          },
          "expected": "#[2, 3, 4, 5]",
          "unexpected": [
              "#[1, 2, 3, 4, 5]",
              "#[3, 4, 5]",
              "#[2, 3, 4]"
          ]
      },
      {
          "input": {
              "a": "#[10, 20, 30]"
          },
          "expected": "#[20, 30]",
          "unexpected": [
              "#[10, 20, 30]",
              "#[10, 30]",
              "#[10, 20]"
          ]
      },
      {
          "input": {
              "a": "#[0, -1, -2, -3]"
          },
          "expected": "#[-1, -2, -3]",
          "unexpected": [
              "#[0, -1, -2, -3]",
              "#[-1, -3]",
              "#[-2, -3]"
          ]
      },
      {
          "input": {
              "a": "#[7]"
          },
          "expected": "#[]",
          "unexpected": [
              "#[7]",
              "#[0]",
              "#[7, 7]"
          ]
      },
      {
          "input": {
              "a": "#[100, 0, 50]"
          },
          "expected": "#[0, 50]",
          "unexpected": [
              "#[100, 0, 50]",
              "#[50]",
              "#[0]"
          ]
      }
  ]
  -/
