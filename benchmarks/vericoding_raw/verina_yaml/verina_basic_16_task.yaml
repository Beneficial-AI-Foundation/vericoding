vc-description: |-

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def replaceChars (s : String) (oldChar : Char) (newChar : Char) (h_precond : replaceChars_precond (s) (oldChar) (newChar)) : String :=

vc-implementation: |-
  -- <vc-implementation>
    let cs := s.toList
    let cs' := cs.map (fun c => if c = oldChar then newChar else c)
    String.mk cs'
  -- </vc-implementation>
  
vc-condition: |-
  @[reducible, simp]
  def replaceChars_precond (s : String) (oldChar : Char) (newChar : Char) : Prop :=
    True

  @[reducible, simp]
  def replaceChars_postcond (s : String) (oldChar : Char) (newChar : Char) (result: String) (h_precond : replaceChars_precond (s) (oldChar) (newChar)) :=
    let cs := s.toList
    let cs' := result.toList
    result.length = s.length ∧
    (∀ i, i < cs.length →
      (cs[i]! = oldChar → cs'[i]! = newChar) ∧
      (cs[i]! ≠ oldChar → cs'[i]! = cs[i]!))

  theorem replaceChars_spec_satisfied (s: String) (oldChar: Char) (newChar: Char) (h_precond : replaceChars_precond (s) (oldChar) (newChar)) :
      replaceChars_postcond (s) (oldChar) (newChar) (replaceChars (s) (oldChar) (newChar) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    -- Unfold the definitions of replaceChars and replaceChars_postcond
    unfold replaceChars replaceChars_postcond
    -- Split the goal into two parts
    constructor
    · -- First part: length is preserved
      simp [String.length]
    · -- Second part: character replacement specification
      simp_all
  -- </vc-proof>

vc-postamble: |-