vc-description: |-
  /- Function that modifies an array to satisfy certain parity conditions -/

vc-preamble: |-
  @[reducible, simp]
  def myfun_precond (a : Array Int) (N : Nat) : Prop :=
    N > 0 ∧ a.size = N

vc-helpers: |-

vc-signature: |-
  def myfun (a : Array Int) (N : Nat) (h_precond : myfun_precond a N) : Array Int :=

vc-implementation: |-
  -- <vc-implementation>
    sorry
  -- </vc-implementation>

vc-condition: |-
  @[reducible, simp]
  def myfun_postcond (a : Array Int) (N : Nat) (result: Array Int) (h_precond : myfun_precond a N) :=
    ∀ k : Int, 0 ≤ k ∧ k < N → result[k.toNat]! % 2 = N % 2

  theorem myfun_spec_satisfied (a: Array Int) (N: Nat) (h_precond : myfun_precond a N) :
      myfun_postcond a N (myfun a N h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  def main : IO Unit := return ()