vc-description: |-

vc-preamble: |-
  @[reducible, simp]
  def findFirstOdd_precond (arr : Array UInt32) : Prop := True
  
  @[reducible, simp]
  def checkFindFirstOdd (arr : Array UInt32) (index : Option Nat) : Prop :=
    match index with
    | some idx => 
      (∀ i, i < idx → arr[i]! % 2 = 0) ∧ arr[idx]! % 2 ≠ 0
    | none => 
      ∀ k, k < arr.size → arr[k]! % 2 = 0

vc-helpers: |-

vc-signature: |-
  def findFirstOdd (arr : Array UInt32) (h_precond : findFirstOdd_precond arr) : Option Nat :=

vc-implementation: |-
  -- <vc-implementation>
    sorry
  -- </vc-implementation>

vc-condition: |-
  @[reducible, simp]
  def findFirstOdd_postcond (arr : Array UInt32) (index : Option Nat) (h_precond : findFirstOdd_precond arr) : Prop :=
    checkFindFirstOdd arr index
  
  theorem findFirstOdd_spec_satisfied (arr : Array UInt32) (h_precond : findFirstOdd_precond arr) :
      findFirstOdd_postcond arr (findFirstOdd arr h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  def main : IO Unit := do
    return ()
