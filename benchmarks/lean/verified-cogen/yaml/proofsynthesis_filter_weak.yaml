vc-description: |-
  /- Function myfun4 that modifies array y based on array x -/

vc-preamble: |-
  @[reducible, simp]
  def myfun4_precond (x : Array Nat) (y : Array Nat) : Prop :=
    y.size = 0

vc-helpers: |-

vc-definitions: |-
  def myfun4 (x : Array Nat) (y : Array Nat) (h_precond : myfun4_precond x y) : Array Nat :=
    sorry

vc-theorems: |-
  @[reducible, simp]
  def myfun4_postcond (x : Array Nat) (y : Array Nat) (result_y : Array Nat) (h_precond : myfun4_precond x y) : Prop :=
    ∀ k, k < result_y.size → result_y[k]! % 3 = 0 ∧ ∃ i, i < x.size ∧ x[i]! = result_y[k]!
  
  theorem myfun4_spec_satisfied (x : Array Nat) (y : Array Nat) (h_precond : myfun4_precond x y) :
      myfun4_postcond x y (myfun4 x y h_precond) h_precond := by
    sorry

vc-postamble: |-
  def main : IO Unit := return ()

