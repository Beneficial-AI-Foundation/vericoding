vc-description: |-

vc-preamble: |-
  @[reducible, simp]
  def binarySearch_precond (arr : Array Int) (target : Int) : Prop :=
    ∀ i j, i < j → j < arr.size → arr[i]! ≤ arr[j]!

vc-helpers: |-

vc-signature: |-
  def binarySearch (arr : Array Int) (target : Int) (h_precond : binarySearch_precond arr target) : Option Nat :=

vc-implementation: |-
  -- <vc-implementation>
    sorry
  -- </vc-implementation>

vc-condition: |-
  @[reducible, simp]
  def binarySearch_postcond (arr : Array Int) (target : Int) (result : Option Nat) (h_precond : binarySearch_precond arr target) : Prop :=
    match result with
    | some index => arr[index]! = target ∧ arr.size > 0 ∧ index < arr.size
    | none => ∀ i, i < arr.size → arr[i]! ≠ target
  
  theorem binarySearch_spec_satisfied (arr : Array Int) (target : Int) (h_precond : binarySearch_precond arr target) :
      binarySearch_postcond arr target (binarySearch arr target h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  def main : IO Unit := return ()
