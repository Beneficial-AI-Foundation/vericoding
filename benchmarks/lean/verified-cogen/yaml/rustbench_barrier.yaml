vc-description: |-

vc-preamble: |-
  @[reducible, simp]
  def barrier_precond (arr : Array Int) (p : Nat) :=
    arr.size > 0 ∧ p < arr.size

vc-helpers: |-

vc-signature: |-
  def barrier (arr : Array Int) (p : Nat) (h_precond : barrier_precond arr p) : Bool :=

vc-implementation: |-
  -- <vc-implementation>
    sorry
  -- </vc-implementation>

vc-condition: |-
  @[reducible, simp]
  def barrier_postcond (arr : Array Int) (p : Nat) (result : Bool) (h_precond : barrier_precond arr p) :=
    (∀ k l, k ≤ p ∧ p < l ∧ l < arr.size → arr[k]! < arr[l]!) ↔ result
  
  theorem barrier_spec_satisfied (arr : Array Int) (p : Nat) (h_precond : barrier_precond arr p) :
      barrier_postcond arr p (barrier arr p h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  def main : IO Unit := return ()
