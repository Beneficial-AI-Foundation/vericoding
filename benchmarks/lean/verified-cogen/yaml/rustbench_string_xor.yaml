vc-description: |-

vc-preamble: |-
  @[reducible, simp]
  def stringXor_precond (a : Array Char) (b : Array Char) : Prop :=
    a.size = b.size ∧ 
    (∀ i, i < a.size → a[i]! = '0' ∨ a[i]! = '1') ∧
    (∀ i, i < b.size → b[i]! = '0' ∨ b[i]! = '1')

vc-helpers: |-

vc-signature: |-
  def stringXor (a : Array Char) (b : Array Char) (h_precond : stringXor_precond a b) : Array Char :=

vc-implementation: |-
  -- <vc-implementation>
    sorry
  -- </vc-implementation>

vc-condition: |-
  @[reducible, simp]
  def stringXor_postcond (a : Array Char) (b : Array Char) (result: Array Char) (h_precond : stringXor_precond a b) : Prop :=
    result.size = a.size ∧ 
    (∀ i, i < result.size → result[i]! = '0' ∨ result[i]! = '1') ∧
    (∀ i, i < result.size → result[i]! = (if a[i]! = b[i]! then '0' else '1'))
  
  theorem stringXor_spec_satisfied (a: Array Char) (b: Array Char) (h_precond : stringXor_precond a b) :
      stringXor_postcond a b (stringXor a b h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  def main : IO Unit := pure ()
