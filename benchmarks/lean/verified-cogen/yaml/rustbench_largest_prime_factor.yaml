vc-description: |-

vc-preamble: |-
  /- Specification predicate to check if a number is prime -/
  @[reducible, simp]
  def isPrimePred (n : Nat) : Prop :=
    ∀ k : Nat, 2 ≤ k → k < n → n % k ≠ 0
  
  /- Precondition for largestPrimeFactor function -/
  @[reducible, simp]
  def largestPrimeFactor_precond (n : Nat) : Prop :=
    2 ≤ n ∧ n ≤ 4294967294

vc-helpers: |-

vc-signature: |-
  def largestPrimeFactor (n : Nat) (h_precond : largestPrimeFactor_precond n) : Nat :=

vc-implementation: |-
  -- <vc-implementation>
    sorry
  -- </vc-implementation>

vc-condition: |-
  @[reducible, simp]
  def largestPrimeFactor_postcond (n : Nat) (result : Nat) (_ : largestPrimeFactor_precond n) : Prop :=
    1 ≤ result ∧ result ≤ n ∧ (result = 1 ∨ (result > 1 ∧ isPrimePred result))
  
  theorem largestPrimeFactor_spec_satisfied (n : Nat) (h_precond : largestPrimeFactor_precond n) :
      largestPrimeFactor_postcond n (largestPrimeFactor n h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  def main : IO Unit := do
    IO.println "Main function"
