vc-description: |-

vc-preamble: |-
  -- <vc-preamble>
  @[reducible, simp]
  def listDeepClone_precond (arr : Array Nat) := 
    True

vc-helpers: |-

vc-signature: |-
  def listDeepClone (arr : Array Nat) (h_precond : listDeepClone_precond (arr)) : Array Nat :=

vc-implementation: |-
  -- <vc-implementation>
    sorry
  -- </vc-implementation>

vc-condition: |-
  @[reducible, simp]
  def listDeepClone_postcond (arr : Array Nat) (copied: Array Nat) (h_precond : listDeepClone_precond (arr)) :=
    arr.size = copied.size ∧ (∀ i, i < arr.size → arr[i]! = copied[i]!)
  
  theorem listDeepClone_spec_satisfied (arr: Array Nat) (h_precond : listDeepClone_precond (arr)) :
      listDeepClone_postcond (arr) (listDeepClone (arr) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  def main : IO Unit := return ()
