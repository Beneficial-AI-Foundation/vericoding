vc-description: |-
  /- 
  Function: simple_nested
  This function demonstrates nested loops and array operations with verification constraints.
  -/

vc-preamble: |-
  @[reducible, simp]
  def simpleNested_precond (a : Array Int) (b : Array Int) (N : Int) :=
    (∀ k : Int, k ≤ b[k.toNat]! ∧ b[k.toNat]! ≤ k + 1) ∧
    a.size = N.toNat ∧
    b.size = N.toNat ∧
    N ≤ 0x3FFF_FFFF

vc-helpers: |-

vc-signature: |-
  def simpleNested (a : Array Int) (b : Array Int) (N : Int) (h_precond : simpleNested_precond (a) (b) (N)) : Int :=

vc-implementation: |-
  -- <vc-implementation>
    sorry
  -- </vc-implementation>

vc-condition: |-
  @[reducible, simp]
  def simpleNested_postcond (a : Array Int) (b : Array Int) (N : Int) (sum : Int) (h_precond : simpleNested_precond (a) (b) (N)) :=
    N ≤ sum ∧ sum ≤ 2 * N

  theorem simpleNested_spec_satisfied (a : Array Int) (b : Array Int) (N : Int) (h_precond : simpleNested_precond (a) (b) (N)) :
      simpleNested_postcond (a) (b) (N) (simpleNested (a) (b) (N) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  def main : IO Unit := return ()