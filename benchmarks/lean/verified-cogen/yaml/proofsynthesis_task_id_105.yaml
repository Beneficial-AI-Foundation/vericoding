vc-description: |-
  /- Count true values in a boolean array -/

vc-preamble: |-
  /- Precondition for count_true -/
  @[reducible, simp]
  def countTrue_precond (arr : Array Bool) : Prop := True

  /- Helper function to count boolean values -/
  def countBoolean (seq : List Bool) : Int :=
    match seq with
    | [] => 0
    | hd :: tl => countBoolean tl + if hd then 1 else 0

vc-helpers: |-

vc-signature: |-
  def countTrue (arr : Array Bool) (h_precond : countTrue_precond arr) : Nat :=

vc-implementation: |-
  -- <vc-implementation>
    sorry
  -- </vc-implementation>

vc-condition: |-
  @[reducible, simp]
  def countTrue_postcond (arr : Array Bool) (count : Nat) (h_precond : countTrue_precond arr) : Prop :=
    0 ≤ count ∧ count ≤ arr.size ∧ countBoolean arr.toList = count

  theorem countTrue_spec_satisfied (arr : Array Bool) (h_precond : countTrue_precond arr) :
      countTrue_postcond arr (countTrue arr h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  /- Main function -/
  def main : IO Unit := return ()