vc-description: |-
  /- Function that takes a mutable vector a and sum, along with integer N,
     with specifications about their initial and final states -/

vc-preamble: |-
  @[reducible, simp]
  def myfun_precond (a : Array Int) (sum : Array Int) (N : Int) :=
    N > 0 ∧ a.size = N ∧ sum.size = 1

vc-helpers: |-

vc-signature: |-
  def myfun (a : Array Int) (sum : Array Int) (N : Int) (h_precond : myfun_precond (a) (sum) (N)) : Array Int :=

vc-implementation: |-
  -- <vc-implementation>
    sorry
  -- </vc-implementation>

vc-condition: |-
  @[reducible, simp]
  def myfun_postcond (a : Array Int) (sum : Array Int) (N : Int) (result: Array Int) (h_precond : myfun_precond (a) (sum) (N)) :=
    result[0]! = N

  theorem myfun_spec_satisfied (a: Array Int) (sum: Array Int) (N: Int) (h_precond : myfun_precond (a) (sum) (N)) :
      myfun_postcond (a) (sum) (N) (myfun (a) (sum) (N) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  #check myfun