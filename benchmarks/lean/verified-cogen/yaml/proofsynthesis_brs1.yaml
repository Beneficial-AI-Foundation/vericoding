vc-description: |-
  
vc-preamble: |-
  @[reducible, simp]
  def myfun_precond (a : Array Int) (sum : Array Int) (N : Int) : Prop :=
    N > 0 ∧ a.size = N.natAbs ∧ sum.size = 1

vc-helpers: |-

vc-signature: |-
  def myfun (a : Array Int) (sum : Array Int) (N : Int) (h_precond : myfun_precond a sum N) : Unit :=

vc-implementation: |-
  -- <vc-implementation>
    sorry
  -- </vc-implementation>

vc-condition: |-
  @[reducible, simp]
  def myfun_postcond (a : Array Int) (sum : Array Int) (N : Int) (h_precond : myfun_precond a sum N) : Prop :=
    sum[0]! ≤ N

  theorem myfun_spec_satisfied (a : Array Int) (sum : Array Int) (N : Int) (h_precond : myfun_precond a sum N) :
      myfun_postcond a sum N h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  def main : IO Unit := pure ()