vc-description: |-
  /- Function that modifies arrays according to specification -/

vc-preamble: |-
  -- Precondition definitions
  @[reducible, simp]
  def myfun_precond (a : Array Nat) (sum : Array Nat) (N : Nat) : Prop :=
    a.size = N ∧ sum.size = 1 ∧ N > 0

vc-helpers: |-

vc-signature: |-
  def myfun (a : Array Nat) (sum : Array Nat) (N : Nat) (h_precond : myfun_precond a sum N) : Array Nat × Array Nat :=

vc-implementation: |-
  -- <vc-implementation>
    sorry
  -- </vc-implementation>

vc-condition: |-
  @[reducible, simp]
  def myfun_postcond (a : Array Nat) (sum : Array Nat) (N : Nat) (result : Array Nat × Array Nat) (h_precond : myfun_precond a sum N) : Prop :=
    result.2[0]! = 0

  theorem myfun_spec_satisfied (a : Array Nat) (sum : Array Nat) (N : Nat) (h_precond : myfun_precond a sum N) :
      myfun_postcond a sum N (myfun a sum N h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  def main : IO Unit := pure ()