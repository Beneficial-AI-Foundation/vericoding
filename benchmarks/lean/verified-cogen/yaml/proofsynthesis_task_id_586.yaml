vc-description: |-

vc-preamble: |-
  @[reducible, simp]
  def splitAndAppend_precond (list : Array Int) (n : Nat) :=
    list.size > 0 ∧ 0 < n ∧ n < list.size

vc-helpers: |-

vc-signature: |-
  def splitAndAppend (list : Array Int) (n : Nat) (h_precond : splitAndAppend_precond (list) (n)) : Array Int :=

vc-implementation: |-
  -- <vc-implementation>
    sorry
  -- </vc-implementation>

vc-condition: |-
  @[reducible, simp]
  def splitAndAppend_postcond (list : Array Int) (n : Nat) (new_list: Array Int) (h_precond : splitAndAppend_precond (list) (n)) :=
    new_list.toList = (list.toList.drop n) ++ (list.toList.take n)
  
  theorem splitAndAppend_spec_satisfied (list: Array Int) (n: Nat) (h_precond : splitAndAppend_precond (list) (n)) :
      splitAndAppend_postcond (list) (n) (splitAndAppend (list) (n) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  def main : IO Unit := return ()
