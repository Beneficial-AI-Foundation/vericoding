vc-description: |-

vc-preamble: |-
  @[reducible, simp]
  def smallestNum_precond (nums : Array Int) :=
    nums.size > 0

vc-helpers: |-

vc-signature: |-
  def smallestNum (nums : Array Int) (h_precond : smallestNum_precond nums) : Int :=

vc-implementation: |-
  -- <vc-implementation>
    sorry
  -- </vc-implementation>

vc-condition: |-
  @[reducible, simp]
  def smallestNum_postcond (nums : Array Int) (min : Int) (h_precond : smallestNum_precond nums) :=
    (∀ i, i < nums.size → min ≤ nums[i]!) ∧ (∃ i, i < nums.size ∧ min = nums[i]!)
  
  theorem smallestNum_spec_satisfied (nums : Array Int) (h_precond : smallestNum_precond nums) :
      smallestNum_postcond nums (smallestNum nums h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  #check smallestNum_spec_satisfied
