vc-description: |-
  /- Function for mutating arrays -/

vc-preamble: |-
  @[reducible, simp]
  def myfun_precond (a : Array Int) (sum : Array Int) (N : Nat) :=
    N > 0 ∧ a.size = N ∧ sum.size = 1 ∧ N < 1000

vc-helpers: |-

vc-signature: |-
  def myfun (a : Array Int) (sum : Array Int) (N : Nat) (h_precond : myfun_precond a sum N) : Array Int × Array Int :=

vc-implementation: |-
  -- <vc-implementation>
    sorry
  -- </vc-implementation>

vc-condition: |-
  @[reducible, simp]
  def myfun_postcond (a : Array Int) (sum : Array Int) (N : Nat) (result_a : Array Int) (result_sum : Array Int) (h_precond : myfun_precond a sum N) :=
    result_sum[0]! = 4 * N

  theorem myfun_spec_satisfied (a : Array Int) (sum : Array Int) (N : Nat) (h_precond : myfun_precond a sum N) :
      let result := myfun a sum N h_precond
      myfun_postcond a sum N result.1 result.2 h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  def main : IO Unit := 
    pure ()