vc-description: |-

vc-preamble: |-
  @[reducible, simp]
  def arrayAppend_precond (a : Array Int) (b : Int) := True

vc-helpers: |-

vc-signature: |-
  def arrayAppend (a : Array Int) (b : Int) (h_precond : arrayAppend_precond (a) (b)) : Array Int :=

vc-implementation: |-
  -- <vc-implementation>
    sorry
  -- </vc-implementation>

vc-condition: |-
  @[reducible, simp]
  def arrayAppend_postcond (a : Array Int) (b : Int) (result: Array Int) (h_precond : arrayAppend_precond (a) (b)) :=
    result.size = a.size + 1 ∧ (∀ i, i < result.size → (if i < a.size then result[i]! = a[i]! else result[i]! = b))
  
  theorem arrayAppend_spec_satisfied (a: Array Int) (b: Int) (h_precond : arrayAppend_precond (a) (b)) :
      arrayAppend_postcond (a) (b) (arrayAppend (a) (b) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  def main : IO Unit := return ()
