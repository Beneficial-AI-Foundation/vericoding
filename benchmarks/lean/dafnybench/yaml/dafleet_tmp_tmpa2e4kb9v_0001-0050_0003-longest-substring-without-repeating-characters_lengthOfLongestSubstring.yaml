vc-description: |-
  /- 
  {
  "name": "dafleet_tmp_tmpa2e4kb9v_0001-0050_0003-longest-substring-without-repeating-characters_lengthOfLongestSubstring",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: dafleet_tmp_tmpa2e4kb9v_0001-0050_0003-longest-substring-without-repeating-characters_lengthOfLongestSubstring",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /-  Represents an interval with left-inclusive, right-exclusive bounds -/
  
  /-  Length of an interval -/
  
  /-  Predicate for valid interval within a string with no repeating characters -/
  
  -- Interval is in valid range
  
  (0 ≤ iv.left ∧ iv.left ≤ iv.right ∧ iv.right ≤ s.length) ∧
  
  -- No repeating characters in interval
  
  (∀ i j, iv.left ≤ i ∧ i < j ∧ j < iv.right → s.get ⟨i.toNat⟩ ≠ s.get ⟨j.toNat⟩)
  
  /- 
  Finds length of longest substring without repeating characters.
  Returns both the length and the interval containing the substring.
  -/

  -- best_iv is valid

  -- best_iv is longest

vc-preamble: |-
  structure Interval where
  left : Int
  right : Int
  valid : left ≤ right

  def length (iv : Interval) : Int :=
  iv.right - iv.left
  
  def valid_interval (s : String) (iv : Interval) : Prop :=
  (0 ≤ iv.left ∧ iv.left ≤ iv.right ∧ iv.right ≤ s.length) ∧
  (∀ i j, iv.left ≤ i ∧ i < j ∧ j < iv.right → s.get ⟨i.toNat⟩ ≠ s.get ⟨j.toNat⟩)

vc-helpers: |-

vc-definitions: |-
  def lengthOfLongestSubstring (s : String) : Int × Interval :=
  sorry

vc-theorems: |-
  theorem lengthOfLongestSubstring_spec (s : String) :
  let result := lengthOfLongestSubstring s
  let n := result.1
  let best_iv := result.2
  valid_interval s best_iv ∧
  length best_iv = n ∧
  (∀ iv : Interval, valid_interval s iv → length iv ≤ n) :=
  sorry

vc-postamble: |-

