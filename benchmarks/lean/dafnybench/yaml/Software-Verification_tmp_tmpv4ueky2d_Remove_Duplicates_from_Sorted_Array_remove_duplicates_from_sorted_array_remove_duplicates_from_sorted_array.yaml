vc-description: |-
  /- 
  {
  "name": "Software-Verification_tmp_tmpv4ueky2d_Remove Duplicates from Sorted Array_remove_duplicates_from_sorted_array_remove_duplicates_from_sorted_array",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: Software-Verification_tmp_tmpv4ueky2d_Remove Duplicates from Sorted Array_remove_duplicates_from_sorted_array_remove_duplicates_from_sorted_array",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /-  Helper predicate for checking if an array is sorted -/
  
  /-  Helper predicate for checking if an array is sorted and has no duplicates -/
  
  /- 
  Removes duplicates from a sorted array while preserving order
  
  @param nums Input array that must be sorted
  @return Array with duplicates removed
  -/

vc-preamble: |-
  def is_sorted (nums : Array Int) : Prop :=
  ∀ i j:Nat, 0 ≤ i → i < j → j < nums.size → nums[i]! ≤ nums[j]!
  def is_sorted_and_distinct (nums : Array Int) : Prop :=
  ∀ i j:Nat, 0 ≤ i → i < j → j < nums.size → nums[i]! < nums[j]!

vc-helpers: |-

vc-definitions: |-
  def remove_duplicates_from_sorted_array (nums : Array Int) : Array Int :=
  sorry

vc-theorems: |-
  theorem remove_duplicates_from_sorted_array_spec (nums : Array Int) :
  is_sorted nums →
  1 ≤ nums.size →
  nums.size ≤ 30000 →
  (∀ i, 0 ≤ i → i < nums.size → -100 ≤ nums[i]! ∧ nums[i]! ≤ 100) →
  let result := remove_duplicates_from_sorted_array nums
  is_sorted_and_distinct result ∧
  (∀ x, (∃ i, 0 ≤ i ∧ i < nums.size ∧ nums[i]! = x) ↔
  (∃ i, 0 ≤ i ∧ i < result.size ∧ result[i]! = x)) :=
  sorry

vc-postamble: |-

