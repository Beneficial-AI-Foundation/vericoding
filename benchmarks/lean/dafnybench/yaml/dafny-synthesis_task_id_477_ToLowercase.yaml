vc-description: |-
  /- 
  {
  "name": "dafny-synthesis_task_id_477_ToLowercase",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: dafny-synthesis_task_id_477_ToLowercase",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /-  Predicate indicating if a character is uppercase (ASCII 65-90) -/
  
  /-  Predicate indicating if two characters form an uppercase/lowercase pair -/
  
  /-  Function to shift a character by 32 positions (for case conversion) -/
  
  /-  Main function to convert a string to lowercase -/

vc-preamble: |-
  def IsUpperCase (c : Char) : Bool :=
  65 ≤ c.toNat ∧ c.toNat ≤ 90
  def IsUpperLowerPair (C : Char) (c : Char) : Bool :=
  C.toNat = c.toNat - 32
  def Shift32 (c : Char) : Char :=
  Char.ofNat ((c.toNat + 32) % 128)

vc-helpers: |-

vc-definitions: |-
  def ToLowercase (s : String) : String :=
  sorry

vc-theorems: |-
  theorem ToLowercase_spec (s : String) :
  let v := ToLowercase s
  v.length = s.length ∧
  ∀ i, 0 ≤ i ∧ i < s.length →
  (if IsUpperCase (s.get ⟨i⟩)
  then IsUpperLowerPair (s.get ⟨i⟩) (v.get ⟨i⟩)
  else v.get ⟨i⟩ = s.get ⟨i⟩) :=
  sorry

vc-postamble: |-

