vc-description: |-
  /- 
  {
  "name": "formal-methods-in-software-engineering_tmp_tmpe7fjnek6_Labs4_gr2_SqrSum1",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: formal-methods-in-software-engineering_tmp_tmpe7fjnek6_Labs4_gr2_SqrSum1",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /- 
  Recursive function to calculate sum of squares from 0 to n.
  Translated from Dafny's SqrSumRec function.
  -/
  
  /- 
  Specification for SqrSumRec ensuring it equals n(n+1)(2n+1)/6
  -/
  
  /- 
  Method to calculate sum of squares.
  Translated from Dafny's SqrSum1 method.
  -/
  
  /- 
  Specification for SqrSum1 method ensuring it matches SqrSumRec
  -/

vc-preamble: |-
  partial def SqrSumRec (n : Int) : Int :=
  if n == 0 then 0
  else n * n + SqrSumRec (n - 1)

vc-helpers: |-

vc-definitions: |-
  def SqrSum1 (n : Int) : Int :=
  sorry

vc-theorems: |-
  theorem SqrSumRec_spec (n : Int) :
  n ≥ 0 → SqrSumRec n = n * (n + 1) * (2 * n + 1) / 6 :=
  sorry
  
  theorem SqrSum1_spec (n : Int) (s : Int) :
  n ≥ 0 → s = SqrSum1 n → s = SqrSumRec n :=
  sorry

vc-postamble: |-

