vc-description: |-
  /- 
  {
  "name": "Dafny-Grind75_tmp_tmpsxfz3i4r_problems_twoSum_twoSum",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: Dafny-Grind75_tmp_tmpsxfz3i4r_problems_twoSum_twoSum",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /- 
  Predicate indicating if two indices form a valid summing pair in the array
  that adds up to the target value.
  -/
  
  /- 
  Main twoSum function that finds a pair of indices whose elements sum to target.
  Translated from Dafny method specification.
  -/

vc-preamble: |-
  def summingPair (i j : Nat) (nums : Array Int) (target : Int) : Prop :=
  i < nums.size ∧ j < nums.size ∧ i ≠ j ∧ nums[i]! + nums[j]! = target

vc-helpers: |-

vc-definitions: |-
  def twoSum (nums : Array Int) (target : Int) : Nat × Nat :=
  sorry

vc-theorems: |-
  theorem twoSum_spec (nums : Array Int) (target : Int) :
  (∃ i j : Nat, i < j ∧ j < nums.size ∧
  summingPair i j nums target ∧
  ∀ l m : Nat, l < m ∧ m < nums.size ∧ l ≠ i ∧ m ≠ j →
  ¬summingPair l m nums target) →
  let pair := twoSum nums target
  pair.1 < nums.size ∧ pair.2 < nums.size ∧
  summingPair pair.1 pair.2 nums target :=
  sorry

vc-postamble: |-

