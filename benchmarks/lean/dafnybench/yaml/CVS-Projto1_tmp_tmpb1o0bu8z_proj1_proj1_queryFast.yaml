vc-description: |-
  /- 
  {
  "name": "CVS-Projto1_tmp_tmpb1o0bu8z_proj1_proj1_queryFast",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: CVS-Projto1_tmp_tmpb1o0bu8z_proj1_proj1_queryFast",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /-  Recursive sum function over array slice -/
  
  /-  Predicate checking if array c is prefix sum of array a -/
  
  /-  List_ datatype definition -/
  
  /-  Check if element exists in List_ -/
  
  /-  Convert array to List_ -/
  
  /-  Fast query implementation -/
  
  /-  Fast query method specification -/

vc-preamble: |-
  partial def sum (a : Array Int) (i j : Int) : Int :=
  if i = j then
  0
  else
  a[(j-1).toNat]! + sum a i (j-1)
  
  def is_prefix_sum_for (a c : Array Int) : Prop :=
  a.size + 1 = c.size ∧
  c[0]! = 0 ∧
  ∀ j, 1 ≤ j ∧ j ≤ a.size → c[j]! = sum a 0 j
  
  inductive List_ (T : Type)
  | Nil : List_ T
  | Cons : T → List_ T → List_ T
  
  def mem {T : Type} [BEq T] (x : T) (l : List_ T) : Bool :=
  match l with
  | List_.Nil => false
  | List_.Cons y r => if x == y then true else mem x r

vc-helpers: |-

vc-definitions: |-
  def from_array {T : Type} (a : Array T) : List_ T :=
  sorry
  
  def queryFast (a c : Array Int) (i j : Int) : Int :=
  sorry

vc-theorems: |-
  theorem queryFast_spec (a c : Array Int) (i j : Int) :
  is_prefix_sum_for a c ∧
  0 ≤ i ∧ i ≤ j ∧ j ≤ a.size ∧ a.size < c.size →
  queryFast a c i j = sum a i j :=
  sorry

vc-postamble: |-

