vc-description: |-
  /- 
  {
  "name": "Dafny-demo_tmp_tmpkgr_dvdi_Dafny_BinarySearch_BinarySearch",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: Dafny-demo_tmp_tmpkgr_dvdi_Dafny_BinarySearch_BinarySearch",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /- 
  Predicate indicating if an array is sorted between indices l and u.
  Translated from Dafny's sorted predicate.
  -/
  
  /- 
  Binary search implementation translated from Dafny.
  Returns index of key if found, negative number if not found.
  -/

vc-preamble: |-
  def sorted (a : Array Int) (l : Int) (u : Int) : Prop :=
  ∀ i j, 0 ≤ l ∧ l ≤ i ∧ i ≤ j ∧ j ≤ u ∧ u < a.size → a[i.toNat]! ≤ a[j.toNat]!

vc-helpers: |-

vc-definitions: |-
  def BinarySearch (a : Array Int) (key : Int) : Int :=
  sorry

vc-theorems: |-
  theorem BinarySearch_spec (a : Array Int) (key : Int) :
  sorted a 0 (a.size - 1) →
  let index := BinarySearch a key
  (index ≥ 0 → index < a.size ∧ a[index.toNat]! = key) ∧
  (index < 0 → ∀ k, 0 ≤ k ∧ k < a.size → a[k]! ≠ key) :=
  sorry

vc-postamble: |-

