vc-description: |-
  /- 
  {
  "name": "Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_verified algorithms_lol_sort_lol_sort",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_verified algorithms_lol_sort_lol_sort",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /-  Count the number of occurrences of an element in an array -/
  
  /-  Predicate defining if two arrays are valid permutations of each other -/
  
  /-  Swaps two elements in an array -/
  
  /-  Theorem specifying the properties of swap -/
  
  /-  Predicate defining if an array is sorted in increasing order -/
  
  /-  The lol sort algorithm implementation -/
  
  /-  Theorem specifying the properties of lol_sort -/

vc-preamble: |-
  def count (a : Array Int) (x : Int) : Nat :=
  a.foldl (fun acc y => if y = x then acc + 1 else acc) 0
  
  def valid_permut (a b : Array Int) : Prop :=
  a.size = b.size ∧ ∀ x : Int, count a x = count b x
  
  def sorted (a : Array Int) : Prop :=
  ∀ i j, 0 ≤ i ∧ i ≤ j ∧ j < a.size → a[i]! ≤ a[j]!

vc-helpers: |-

vc-definitions: |-
  def swap (a : Array Int) (i j : Int) : Array Int :=
  sorry
  
  def lol_sort (a : Array Int) : Array Int :=
  sorry

vc-theorems: |-
  theorem swap_spec (a : Array Int) (i j : Int) :
  0 ≤ i ∧ i < a.size ∧ 0 ≤ j ∧ j < a.size →
  let result := swap a i j
  result.size = a.size ∧ valid_permut result a :=
  sorry
  
  theorem lol_sort_spec (a : Array Int) :
  let result := lol_sort a
  valid_permut result a ∧ sorted result :=
  sorry

vc-postamble: |-

