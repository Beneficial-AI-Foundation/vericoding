vc-description: |-
  /- 
  {
  "name": "MIEIC_mfes_tmp_tmpq3ho7nve_TP3_binary_search_binarySearch",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: MIEIC_mfes_tmp_tmpq3ho7nve_TP3_binary_search_binarySearch",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /- 
  Predicate checking if an array is sorted in ascending order.
  -/
  
  /- 
  Binary search implementation that finds a value in a sorted array.
  Returns the index of the value if found, -1 if not found.
  
  @param a The sorted array to search in
  @param x The value to search for
  @return The index of x in a, or -1 if not found
  -/

vc-preamble: |-
  def isSorted (a : Array Int) : Prop :=
  ∀ i j, 0 ≤ i → i < j → j < a.size → a[i]! ≤ a[j]!

vc-helpers: |-

vc-definitions: |-
  def binarySearch (a : Array Int) (x : Int) : Int :=
  sorry

vc-theorems: |-
  theorem binarySearch_spec (a : Array Int) (x : Int) :
  isSorted a →
  let index := binarySearch a x
  (-1 ≤ index ∧ index < a.size ∧
  (index ≠ -1 → a[index.toNat]! = x) ∧
  (index = -1 → ∀ i:Nat, 0 ≤ i → i < a.size → a[i]! ≠ x)) :=
  sorry

vc-postamble: |-

