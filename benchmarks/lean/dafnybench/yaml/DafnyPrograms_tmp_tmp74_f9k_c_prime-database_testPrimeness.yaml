vc-description: |-
  /- 
  {
  "name": "DafnyPrograms_tmp_tmp74_f9k_c_prime-database_testPrimeness",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: DafnyPrograms_tmp_tmp74_f9k_c_prime-database_testPrimeness",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /-  Predicate defining primeness of a natural number -/
  
  /-  Answer type for prime database queries -/
  
  /-  Class representing a database of prime numbers -/
  
  /-  Valid invariant for PrimeMap -/
  
  /-  Constructor for PrimeMap -/
  
  /-  Method to check if a number is prime using the database -/
  
  /-  Specification for isPrime? method -/
  
  /-  Method to test primeness of a number -/
  
  /-  Specification for testPrimeness method -/

vc-preamble: |-
  import Std
  
  def prime (n : Nat) : Prop :=
  n > 1 ∧ (∀ nr, 1 < nr → nr < n → n % nr ≠ 0)
  
  inductive Answer where
  | Yes : Answer
  | No : Answer
  | Unknown : Answer
  deriving Repr
  
  structure PrimeMap where
  database : Std.HashMap Nat Bool
  
  def PrimeMap.valid (pm : PrimeMap) : Prop :=
  ∀ i, pm.database.contains i →
  (pm.database[i]! = true ↔ prime i)
  
  def PrimeMap.new : PrimeMap :=
  { database := Std.HashMap.emptyWithCapacity 0 }

vc-helpers: |-

vc-definitions: |-
  def PrimeMap.isPrime? (pm : PrimeMap) (n : Nat) : Answer :=
  sorry
  
  def testPrimeness (n : Nat) : Bool :=
  sorry

vc-theorems: |-
  theorem PrimeMap.new_spec :
  (PrimeMap.new).database.isEmpty :=
  sorry
  
  theorem PrimeMap.isPrime?_spec (pm : PrimeMap) (n : Nat) :
  let result := pm.isPrime? n
  (pm.database.contains n ∧ prime n ↔ result = Answer.Yes) ∧
  (pm.database.contains n ∧ ¬prime n ↔ result = Answer.No) ∧
  (¬pm.database.contains n ↔ result = Answer.Unknown) :=
  sorry
  
  theorem testPrimeness_spec (n : Nat) :
  n ≥ 0 → (testPrimeness n = true ↔ prime n) :=
  sorry

vc-postamble: |-

