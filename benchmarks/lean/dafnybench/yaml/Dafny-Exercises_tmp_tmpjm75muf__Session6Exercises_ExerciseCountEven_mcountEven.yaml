vc-description: |-
  /- 
  {
  "name": "Dafny-Exercises_tmp_tmpjm75muf__Session6Exercises_ExerciseCountEven_mcountEven",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: Dafny-Exercises_tmp_tmpjm75muf__Session6Exercises_ExerciseCountEven_mcountEven",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /-  Predicate that checks if all elements in an array are non-negative -/
  
  /-  Predicate that checks if a non-negative integer is even -/
  
  /-  Function that counts even numbers in an array -/
  
  /-  Method specification for counting even numbers in an array -/

vc-preamble: |-
  def positive (s : Array Int) : Prop :=
  ∀ u, 0 ≤ u ∧ u < s.size → s[u]! ≥ 0
  def isEven (i : Int) : Bool :=
  i ≥ 0 → i % 2 = 0
  partial def CountEven (s : Array Int) : Int :=
  if s.size = 0 then 0
  else
  let last := s[s.size - 1]!
  let rest := s.extract 0 (s.size - 1)
  (if last % 2 = 0 then 1 else 0) + CountEven rest

vc-helpers: |-

vc-definitions: |-
  def mcountEven (v : Array Int) : Int :=
  sorry

vc-theorems: |-
  theorem mcountEven_spec (v : Array Int) :
  positive v → mcountEven v = CountEven v :=
  sorry

vc-postamble: |-

