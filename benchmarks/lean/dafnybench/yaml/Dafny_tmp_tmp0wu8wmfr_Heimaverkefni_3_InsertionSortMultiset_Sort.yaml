vc-description: |-
  /- 
  {
  "name": "Dafny_tmp_tmp0wu8wmfr_Heimaverkefni 3_InsertionSortMultiset_Sort",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: Dafny_tmp_tmp0wu8wmfr_Heimaverkefni 3_InsertionSortMultiset_Sort",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /- 
  Search function that finds insertion point in sorted array.
  Translated from Dafny's Search method.
  -/
  
  /- 
  Sort function that sorts a list into a sorted array.
  Translated from Dafny's Sort method.
  -/
  
  /- 
  Specification for Search function ensuring sorted result and proper element placement
  -/
  
  /- 
  Specification for Sort function ensuring list equality and sorted result
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def Search (s : Array Int) (x : Int) : Int :=
  sorry
  
  def sort (m : List Int) : Array Int :=
  sorry

vc-theorems: |-
  theorem Search_spec (s : Array Int) (x : Int) (k : Int) :
  (∀ p q : Nat, p < q ∧ q < s.size → s[p]! ≤ s[q]!) →
  (0 ≤ k ∧ k ≤ s.size) ∧
  (∀ i : Nat, i < k.toNat → s[i]! ≤ x) ∧
  (∀ i : Nat, k.toNat ≤ i ∧ i < s.size → s[i]! ≥ x) :=
  sorry
  
  theorem Sort_spec (m : List Int) (r : Array Int) :
  (∀ x : Int, x ∈ m → (∃ i : Nat, i < r.size ∧ r[i]! = x)) ∧
  (∀ i : Nat, i < r.size → r[i]! ∈ m) ∧
  (∀ p q : Nat, p < q ∧ q < r.size → r[p]! ≤ r[q]!) :=
  sorry

vc-postamble: |-

