vc-description: |-
  /- 
  {
  "name": "formal-methods-in-software-engineering_tmp_tmpe7fjnek6_Labs4_gr2_DivMod1",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: formal-methods-in-software-engineering_tmp_tmpe7fjnek6_Labs4_gr2_DivMod1",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /- 
  Recursive function to calculate sum of squares from 0 to n
  -/
  
  /- 
  Lemma showing that SqrSumRec equals the closed form n(n+1)(2n+1)/6
  -/
  
  /- 
  Method to compute quotient and remainder of division
  Translated from Dafny method DivMod1
  -/
  
  /- 
  Specification for DivMod1 method
  -/

vc-preamble: |-
  partial def SqrSumRec (n : Int) : Int :=
  if n == 0 then 0 else n*n + SqrSumRec (n-1)

vc-helpers: |-

vc-definitions: |-
  def DivMod1 (a : Int) (b : Int) : Int × Int :=
  sorry

vc-theorems: |-
  theorem L1_spec (n : Int) :
  n ≥ 0 → SqrSumRec n = n * (n + 1) * (2 * n + 1) / 6 :=
  sorry
  
  theorem DivMod1_spec (a b : Int) :
  b > 0 ∧ a ≥ 0 →
  let (q, r) := DivMod1 a b
  a = b*q + r ∧ 0 ≤ r ∧ r < b :=
  sorry

vc-postamble: |-

