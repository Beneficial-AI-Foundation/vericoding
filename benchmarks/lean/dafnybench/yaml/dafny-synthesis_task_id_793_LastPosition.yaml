vc-description: |-
  /- 
  {
  "name": "dafny-synthesis_task_id_793_LastPosition",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: dafny-synthesis_task_id_793_LastPosition",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /- 
  Finds the last position of an element in a sorted array.
  Input:
  - arr: Array of integers
  - elem: Integer to search for
  Returns:
  - Position of the last occurrence of elem, or -1 if not found
  Requires:
  - Array is non-empty
  - Array is sorted in non-decreasing order
  Ensures:
  - Result is -1 or a valid index with the element
  - If result is valid, it's the last occurrence
  - Array contents remain unchanged
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def LastPosition (arr : Array Int) (elem : Int) : Int :=
  sorry

vc-theorems: |-
  theorem LastPosition_spec (arr : Array Int) (elem : Int) :
  arr.size > 0 ∧
  (∀ i j, 0 ≤ i ∧ i < j ∧ j < arr.size → arr[i]! ≤ arr[j]!) →
  let pos := LastPosition arr elem
  (pos = -1 ∨
  (0 ≤ pos ∧ pos < arr.size ∧
  arr[pos.toNat]! = elem ∧
  (pos ≤ arr.size - 1 ∨ arr[(pos + 1).toNat]! > elem))) ∧
  (∀ i, 0 ≤ i ∧ i < arr.size → arr[i]! = arr[i]!) :=
  sorry

vc-postamble: |-

