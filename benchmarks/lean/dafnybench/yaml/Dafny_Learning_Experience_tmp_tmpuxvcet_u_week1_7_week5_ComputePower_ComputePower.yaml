vc-description: |-
  /- 
  {
  "name": "Dafny_Learning_Experience_tmp_tmpuxvcet_u_week1_7_week5_ComputePower_ComputePower",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: Dafny_Learning_Experience_tmp_tmpuxvcet_u_week1_7_week5_ComputePower_ComputePower",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /- 
  Recursive function that computes 2^n for natural numbers.
  Translated from Dafny's Power function.
  -/
  
  /- 
  Method to calculate 2*n.
  Translated from Dafny's CalcPower method.
  -/
  
  /- 
  Specification for CalcPower ensuring result equals 2*n
  -/
  
  /- 
  Method to compute 2^n using Power function.
  Translated from Dafny's ComputePower method.
  -/
  
  /- 
  Specification for ComputePower ensuring result equals Power(n)
  -/

vc-preamble: |-
  def Power (n : Nat) : Nat :=
  if n = 0 then 1 else 2 * Power (n-1)

vc-helpers: |-

vc-definitions: |-
  def CalcPower (n : Nat) : Nat :=
  sorry
  
  def ComputePower (n : Nat) : Nat :=
  sorry

vc-theorems: |-
  theorem CalcPower_spec (n : Nat) : CalcPower n = 2*n :=
  sorry
  
  theorem ComputePower_spec (n : Nat) : ComputePower n = Power n :=
  sorry

vc-postamble: |-

