vc-description: |-
  /- 
  {
  "name": "dafny-synthesis_task_id_629_FindEvenNumbers",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: dafny-synthesis_task_id_629_FindEvenNumbers",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /- 
  Predicate that checks if a number is even
  -/
  
  /- 
  Function that finds all even numbers in an array.
  Returns a sequence containing all even numbers from the input array.
  
  Ensures:
  - All numbers in output are even and exist in input
  - All even numbers from input exist in output
  -/

vc-preamble: |-
  def IsEven (n : Int) : Bool :=
  n % 2 = 0

vc-helpers: |-

vc-definitions: |-
  def FindEvenNumbers (arr : Array Int) : Array Int :=
  sorry

vc-theorems: |-
  theorem FindEvenNumbers_spec (arr : Array Int) :
  let result := FindEvenNumbers arr
  (∀ i, 0 ≤ i ∧ i < result.size → IsEven (result[i]!) ∧ (result[i]!) ∈ arr.toList) ∧
  (∀ i, 0 ≤ i ∧ i < arr.size ∧ IsEven (arr[i]!) → (arr[i]!) ∈ result.toList) :=
  sorry

vc-postamble: |-

