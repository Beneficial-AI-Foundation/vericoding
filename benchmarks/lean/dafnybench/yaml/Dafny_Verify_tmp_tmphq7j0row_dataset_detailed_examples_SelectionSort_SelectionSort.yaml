vc-description: |-
  /- 
  {
  "name": "Dafny_Verify_tmp_tmphq7j0row_dataset_detailed_examples_SelectionSort_SelectionSort",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: Dafny_Verify_tmp_tmphq7j0row_dataset_detailed_examples_SelectionSort_SelectionSort",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /- 
  SelectionSort implementation that sorts an array in ascending order.
  Works by dividing the input list into two parts: sorted and unsorted.
  At the beginning, the sorted part is empty and the unsorted part contains all elements.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def SelectionSort (a : Array Int) : Array Int :=
  sorry

vc-theorems: |-
  theorem SelectionSort_spec (a : Array Int) :
  let result := SelectionSort a
  
  -- Array is sorted in ascending order
  
  (∀ i j, 0 ≤ i → i < j → j < result.size → result[i]! ≤ result[j]!) ∧
  
  -- Array contains same elements (using multiset equality)
  
  (result.toList = a.toList)
  
  :=
  sorry

vc-postamble: |-

