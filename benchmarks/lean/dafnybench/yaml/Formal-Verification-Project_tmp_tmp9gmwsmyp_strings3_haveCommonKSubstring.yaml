vc-description: |-
  /- 
  {
  "name": "Formal-Verification-Project_tmp_tmp9gmwsmyp_strings3_haveCommonKSubstring",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: Formal-Verification-Project_tmp_tmp9gmwsmyp_strings3_haveCommonKSubstring",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /-  Predicate defining when one string is a prefix of another -/
  
  /-  Predicate defining when one string is not a prefix of another -/
  
  /-  Function checking if one string is a prefix of another -/
  
  /-  Specification for isPrefix function -/
  
  /-  Predicate defining when one string is a substring of another -/
  
  /-  Predicate defining when one string is not a substring of another -/
  
  /-  Function checking if one string is a substring of another -/
  
  /-  Specification for isSubstring function -/
  
  /-  Predicate defining when two strings have a common substring of length k -/
  
  /-  Predicate defining when two strings do not have a common substring of length k -/
  
  /-  Function checking if two strings have a common substring of length k -/
  
  /-  Specification for haveCommonKSubstring function -/

vc-preamble: |-
  def isPrefixPred (pre str : String) : Prop :=
  pre.length ≤ str.length ∧
  pre = str.take pre.length
  
  def isNotPrefixPred (pre str : String) : Prop :=
  pre.length > str.length ∨
  pre ≠ str.take pre.length
  
  def isSubstringPred (sub str : String) : Prop :=
  ∃ i, 0 ≤ i ∧ i ≤ str.length ∧ isPrefixPred sub (str.drop i)
  
  def isNotSubstringPred (sub str : String) : Prop :=
  ∀ i, 0 ≤ i ∧ i ≤ str.length → isNotPrefixPred sub (str.drop i)
  
  def haveCommonKSubstringPred (k : Nat) (str1 str2 : String) : Prop :=
  ∃ i1 j1, 0 ≤ i1 ∧ i1 ≤ str1.length - k ∧ j1 = i1 + k ∧
  isSubstringPred (str1.extract ⟨i1⟩ ⟨j1-i1⟩) str2
  
  def haveNotCommonKSubstringPred (k : Nat) (str1 str2 : String) : Prop :=
  ∀ i1 j1, 0 ≤ i1 ∧ i1 ≤ str1.length - k ∧ j1 = i1 + k →
  isNotSubstringPred (str1.extract ⟨i1⟩ ⟨j1-i1⟩) str2

vc-helpers: |-

vc-definitions: |-
  def isPrefix (pre str : String) : Bool :=
  sorry
  
  def isSubstring (sub str : String) : Bool :=
  sorry
  
  def haveCommonKSubstring (k : Nat) (str1 str2 : String) : Bool :=
  sorry

vc-theorems: |-
  theorem isPrefix_spec (pre str : String) :
  isPrefix pre str = false ↔ isNotPrefixPred pre str ∧
  (isPrefix pre str = true ↔ isPrefixPred pre str) :=
  sorry
  
  theorem isSubstring_spec (sub str : String) :
  isSubstring sub str = true ↔ isSubstringPred sub str :=
  sorry
  
  theorem haveCommonKSubstring_spec (k : Nat) (str1 str2 : String) :
  haveCommonKSubstring k str1 str2 = true ↔ haveCommonKSubstringPred k str1 str2 :=
  sorry

vc-postamble: |-

