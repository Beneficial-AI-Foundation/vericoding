vc-description: |-
  /- 
  {
  "name": "Dafny-Exercises_tmp_tmpjm75muf__Session8Exercises_ExerciseInsertionSort_InsertionSort",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: Dafny-Exercises_tmp_tmpjm75muf__Session8Exercises_ExerciseInsertionSort_InsertionSort",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /- 
  Predicate indicating if array segment from index i to j (inclusive) is sorted
  -/
  
  /- 
  InsertionSort method specification:
  - Ensures array is sorted from index 0 to length-1
  - Ensures multiset of elements is preserved
  -/

vc-preamble: |-
  def sorted_seg (a : Array Int) (i j : Int) : Prop :=
  ∀ l k, i ≤ l ∧ l ≤ k ∧ k ≤ j → a[l.toNat]! ≤ a[k.toNat]!

vc-helpers: |-

vc-definitions: |-
  def InsertionSort (a : Array Int) : Array Int :=
  sorry

vc-theorems: |-
  theorem InsertionSort_spec (a : Array Int) :
  let result := InsertionSort a
  sorted_seg result 0 (result.size - 1) :=
  sorry

vc-postamble: |-

