vc-description: |-
  /- 
  {
  "name": "feup-mfes_tmp_tmp6_a1y5a5_examples_SelectionSort_selectionSort",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: feup-mfes_tmp_tmp6_a1y5a5_examples_SelectionSort_selectionSort",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /- 
  Predicate checking if array is sorted between positions 'from' (inclusive) and 'to' (exclusive)
  -/
  
  /- 
  Finds minimum value position in array between 'from' (inclusive) and 'to' (exclusive)
  -/
  
  /- 
  Specification for findMin method
  -/
  
  /- 
  Selection sort implementation
  -/
  
  /- 
  Specification for selectionSort method
  -/

vc-preamble: |-
  def isSorted (a : Array Float) (_from : Nat) (to : Nat) : Prop :=
  0 ≤ _from ∧ _from ≤ to ∧ to ≤ a.size ∧
  ∀ i j, _from ≤ i ∧ i < j ∧ j < to → a[i]! ≤ a[j]!

vc-helpers: |-

vc-definitions: |-
  def findMin (a : Array Float) (_from : Nat) (to : Nat) : Nat :=
  sorry
  
  def selectionSort (a : Array Float) : Array Float :=
  sorry

vc-theorems: |-
  theorem findMin_spec (a : Array Float) (_from : Nat) (to : Nat) :
  0 ≤ _from ∧ _from < to ∧ to ≤ a.size →
  let index := findMin a _from to
  _from ≤ index ∧ index < to ∧
  ∀ k, _from ≤ k ∧ k < to → a[k]! ≥ a[index]! :=
  sorry
  
  theorem selectionSort_spec (a : Array Float) :
  let result := selectionSort a
  isSorted result 0 result.size ∧
  
  -- Note: multiset equality check simplified since complex array ops not supported
  
  result.size = a.size :=
  sorry

vc-postamble: |-

