vc-description: |-
  /- 
  {
  "name": "Dafny_Verify_tmp_tmphq7j0row_Generated_Code_Count_count",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: Dafny_Verify_tmp_tmphq7j0row_Generated_Code_Count_count",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /- 
  Recursively counts occurrences of value v in array a up to index n.
  Translated from Dafny function has_count.
  -/
  
  /- 
  Returns count of occurrences of v in array a up to index n.
  Translated from Dafny method count.
  -/

vc-preamble: |-
  partial def has_count (v : Int) (a : Array Int) (n : Int) : Int :=
  if n == 0 then 0
  else if a[(n-1).toNat]! == v
  then has_count v a (n-1) + 1
  else has_count v a (n-1)

vc-helpers: |-

vc-definitions: |-
  def count (v : Int) (a : Array Int) (n : Int) : Int :=
  sorry

vc-theorems: |-
  theorem count_spec (v : Int) (a : Array Int) (n : Int) :
  n ≥ 0 ∧ n ≤ a.size →
  count v a n = has_count v a n :=
  sorry

vc-postamble: |-

