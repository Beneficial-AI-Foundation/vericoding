vc-description: |-
  /- 
  {
  "name": "assertive-programming-assignment-1_tmp_tmp3h_cj44u_FindRange_FindRange",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: assertive-programming-assignment-1_tmp_tmp3h_cj44u_FindRange_FindRange",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /-  Predicate indicating if an array is sorted in ascending order -/
  
  /-  Predicate indicating if all elements in a range satisfy a comparison with key -/
  
  /-  Predicate indicating if all elements in a range satisfy the negation of a comparison with key -/
  
  /-  Binary search implementation with comparison function -/
  
  /-  Specification for BinarySearch -/
  
  /-  Find range of elements equal to key in sorted array -/
  
  /-  Specification for FindRange -/

vc-preamble: |-
  def Sorted (q : Array Int) : Prop :=
  ∀ i j, 0 ≤ i → i ≤ j → j < q.size → q[i]! ≤ q[j]!
  
  def RangeSatisfiesComparer (q : Array Int) (key : Int) (lowerBound upperBound : Nat)
  (comparer : Int → Int → Bool) : Prop :=
  0 ≤ lowerBound ∧ lowerBound ≤ upperBound ∧ upperBound ≤ q.size →
  ∀ i, lowerBound ≤ i → i < upperBound → comparer (q[i]!) key
  
  def RangeSatisfiesComparerNegation (q : Array Int) (key : Int) (lowerBound upperBound : Nat)
  (comparer : Int → Int → Bool) : Prop :=
  RangeSatisfiesComparer q key lowerBound upperBound (fun n1 n2 => ¬(comparer n1 n2))

vc-helpers: |-

vc-definitions: |-
  def BinarySearch (q : Array Int) (key : Int) (lowerBound upperBound : Nat)
  (comparer : Int → Int → Bool) : Nat :=
  sorry
  
  def FindRange (q : Array Int) (key : Int) : Nat × Nat :=
  sorry

vc-theorems: |-
  theorem BinarySearch_spec (q : Array Int) (key : Int) (lowerBound upperBound : Nat)
  (comparer : Int → Int → Bool) :
  Sorted q →
  0 ≤ lowerBound → lowerBound ≤ upperBound → upperBound ≤ q.size →
  RangeSatisfiesComparerNegation q key 0 lowerBound comparer →
  RangeSatisfiesComparer q key upperBound q.size comparer →
  ((∀ n1 n2, comparer n1 n2 = (n1 > n2)) ∨ (∀ n1 n2, comparer n1 n2 = (n1 ≥ n2))) →
  let index := BinarySearch q key lowerBound upperBound comparer
  lowerBound ≤ index ∧ index ≤ upperBound ∧
  RangeSatisfiesComparerNegation q key 0 index comparer ∧
  RangeSatisfiesComparer q key index q.size comparer :=
  sorry
  
  theorem FindRange_spec (q : Array Int) (key : Int) :
  Sorted q →
  let (left, right) := FindRange q key
  left ≤ right ∧ right ≤ q.size ∧
  (∀ i, 0 ≤ i → i < left → q[i]! < key) ∧
  (∀ i, left ≤ i → i < right → q[i]! = key) ∧
  (∀ i, right ≤ i → i < q.size → q[i]! > key) :=
  sorry

vc-postamble: |-

