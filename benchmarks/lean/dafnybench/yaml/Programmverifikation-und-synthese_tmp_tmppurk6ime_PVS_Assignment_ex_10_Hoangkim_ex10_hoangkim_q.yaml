vc-description: |-
  /- 
  {
  "name": "Programmverifikation-und-synthese_tmp_tmppurk6ime_PVS_Assignment_ex_10_Hoangkim_ex10_hoangkim_q",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: Programmverifikation-und-synthese_tmp_tmppurk6ime_PVS_Assignment_ex_10_Hoangkim_ex10_hoangkim_q",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /-  Translation of method q from Dafny:
  Requires y - x > 2
  Ensures x < z*z < y
  -/
  
  /-  Specification for method q -/
  
  /-  Translation of method strange from Dafny:
  Ensures 1 = 2
  -/
  
  /-  Specification for method strange -/
  
  /-  Verification condition 1: Precondition implies loop variant -/
  
  /-  Verification condition 2: Loop invariant preservation -/
  
  /-  Verification condition 3: Loop termination and postcondition -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def q (x : Nat) (y : Nat) : Nat :=
  sorry
  
  def strange : Unit :=
  sorry

vc-theorems: |-
  theorem q_spec (x y z : Nat) :
  y - x > 2 →
  x < z*z ∧ z*z < y :=
  sorry
  
  theorem strange_spec :
  1 = 2 :=
  sorry
  
  theorem vc1 (n : Nat) :
  n ≥ 0 → 0 = 0*0 ∧ 0 ≤ n :=
  sorry
  
  theorem vc2 (i n sqn x : Nat) :
  i < n ∧ i + 1 ≤ n ∧ sqn = i * i →
  sqn = sqn + x ∧ i = i + 1 ∧ x = 2 * i + 1 :=
  sorry
  
  theorem vc3 (i n sqn : Nat) :
  ¬(i < n) ∧ i ≤ n ∧ sqn = i * i →
  sqn = n * n :=
  sorry

vc-postamble: |-

