vc-description: |-
  /- 
  {
  "name": "dafny-synthesis_task_id_776_CountVowelNeighbors",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: dafny-synthesis_task_id_776_CountVowelNeighbors",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /- 
  Predicate that checks if a character is a vowel.
  -/
  
  /- 
  Counts the number of characters in a string that have vowels as neighbors.
  Returns the count of positions where both the previous and next characters are vowels.
  -/

vc-preamble: |-
  def IsVowel (c : Char) : Bool :=
  c ∈ ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']

vc-helpers: |-

vc-definitions: |-
  def CountVowelNeighbors (s : String) : Int :=
  sorry

vc-theorems: |-
  theorem CountVowelNeighbors_spec (s : String) :
  let count := CountVowelNeighbors s
  count ≥ 0 ∧
  count = ((List.range s.length).filter (fun i =>
  i ≥ 1 ∧ i < s.length - 1 ∧
  IsVowel (s.toList[i-1]!) ∧
  IsVowel (s.toList[i+1]!))).length
  :=
  sorry

vc-postamble: |-

