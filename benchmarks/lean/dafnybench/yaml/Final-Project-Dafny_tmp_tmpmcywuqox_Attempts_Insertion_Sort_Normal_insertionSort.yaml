vc-description: |-
  /- 
  {
  "name": "Final-Project-Dafny_tmp_tmpmcywuqox_Attempts_Insertion_Sort_Normal_insertionSort",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: Final-Project-Dafny_tmp_tmpmcywuqox_Attempts_Insertion_Sort_Normal_insertionSort",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /-  Helper predicate for checking if array is sorted up to index i -/
  
  /-  Predicate indicating if an array is sorted -/
  
  /-  Look for minimum element in array starting from index i -/
  
  /-  Specification for lookForMin -/
  
  /-  Insertion sort implementation -/
  
  /-  Specification for insertionSort -/

vc-preamble: |-
  def sortedA (a : Array Int) (i : Nat) : Prop :=
  ∀ k, 0 < k ∧ k < i → a[k-1]! ≤ a[k]!

vc-helpers: |-

vc-definitions: |-
  def sorted (a : Array Int) : Bool :=
  sorry
  
  def lookForMin (a : Array Int) (i : Int) : Int :=
  sorry
  
  def insertionSort (a : Array Int) : Array Int :=
  sorry

vc-theorems: |-
  theorem lookForMin_spec (a : Array Int) (i : Nat) :
  0 ≤ i ∧ i < a.size →
  let m := lookForMin a i
  i ≤ m ∧ m < a.size ∧
  (∀ k, i ≤ k ∧ k < a.size → a[k]!  ≥ a[m.toNat]!) :=
  sorry
  
  theorem insertionSort_spec (a : Array Int) :
  sorted (insertionSort a) :=
  sorry

vc-postamble: |-

