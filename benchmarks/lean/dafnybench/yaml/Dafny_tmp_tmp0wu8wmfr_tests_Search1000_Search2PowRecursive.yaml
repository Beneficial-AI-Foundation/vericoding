vc-description: |-
  /- 
  {
  "name": "Dafny_tmp_tmp0wu8wmfr_tests_Search1000_Search2PowRecursive",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: Dafny_tmp_tmp0wu8wmfr_tests_Search1000_Search2PowRecursive",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /-  Is2Pow(n) is true iff n==2^k for some k>=0 -/
  
  /-  Search2PowRecursive performs binary search on array segments of size n = 2^k-1 -/

vc-preamble: |-
  partial def Is2Pow (n : Int) : Bool :=
  if n < 1 then
  false
  else if n == 1 then
  true
  else
  n % 2 == 0 ∧ Is2Pow (n/2)

vc-helpers: |-

vc-definitions: |-
  def Search2PowRecursive (a : Array Int) (i : Int) (n : Int) (x : Int) : Int :=
  sorry

vc-theorems: |-
  theorem Search2PowRecursive_spec
  (a : Array Int) (i : Int) (n : Int) (x : Int) :
  0 ≤ i →
  i + n ≤ a.size →
  (∀ p q, i ≤ p → p < q → q < i + n → a[p.toNat]! ≤ a[q.toNat]!) →
  Is2Pow (n + 1) →
  let k := Search2PowRecursive a i n x;
  i ≤ k ∧ k ≤ i + n ∧
  (∀ r, i ≤ r → r < k → a[r.toNat]! < x) ∧
  (∀ r, k ≤ r → r < i + n → a[r.toNat]! ≥ x) :=
  sorry

vc-postamble: |-

