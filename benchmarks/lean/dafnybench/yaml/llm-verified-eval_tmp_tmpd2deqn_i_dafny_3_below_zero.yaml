vc-description: |-
  /- 
  {
  "name": "llm-verified-eval_tmp_tmpd2deqn_i_dafny_3_below_zero",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: llm-verified-eval_tmp_tmpd2deqn_i_dafny_3_below_zero",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /- 
  Recursively sums the first n elements of an array of integers.
  Translated from Dafny's sum function.
  
  @param s The input array of integers
  @param n The number of elements to sum (must be ≤ array size)
  -/
  
  /- 
  Specification for sum function requiring n ≤ array size
  -/
  
  /- 
  Determines if there exists a prefix of the input array that sums to less than zero.
  Translated from Dafny's below_zero method.
  
  @param ops The input array of integers
  @return True if there exists a prefix summing to less than 0
  -/
  
  /- 
  Specification for below_zero ensuring result is true iff
  there exists a prefix that sums to less than zero
  -/

vc-preamble: |-
  def sum (s : Array Int) (n : Nat) : Int :=
  if s.size = 0 ∨ n = 0 then
  0
  else
  s[0]! + sum (s.extract 1 s.size) (n-1)

vc-helpers: |-

vc-definitions: |-
  def below_zero (ops : Array Int) : Bool :=
  sorry

vc-theorems: |-
  theorem sum_spec (s : Array Int) (n : Nat) :
  n ≤ s.size → sum s n = sum s n :=
  sorry
  
  theorem below_zero_spec (ops : Array Int) :
  below_zero ops = true ↔ ∃ n : Nat, n ≤ ops.size ∧ sum ops n < 0 :=
  sorry

vc-postamble: |-

