vc-description: |-
  /- 
  {
  "name": "dafny-synthesis_task_id_105_CountTrue",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: dafny-synthesis_task_id_105_CountTrue",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /- 
  Recursively counts the number of true values in an array up to index n.
  Translated from Dafny's countTo function.
  -/
  
  /- 
  Main function that counts total number of true values in array.
  Translated from Dafny's CountTrue method.
  -/
  
  /- 
  Specification for countTo function.
  Ensures proper array bounds and null checks are maintained.
  -/
  
  /- 
  Specification for CountTrue function.
  Ensures result matches counting all true values in array.
  -/

vc-preamble: |-
  def countTo (a : Array Bool) (n : Nat) : Int :=
  if n = 0 then 0
  else countTo a (n-1) + (if a[n-1]! then 1 else 0)
  
  def CountTrue (a : Array Bool) : Int :=
  countTo a a.size

vc-helpers: |-

vc-definitions: |-

vc-theorems: |-
  theorem countTo_spec (a : Array Bool) (n : Nat) :
  n ≥ 0 ∧ n ≤ a.size →
  countTo a n ≥ 0 :=
  sorry
  
  theorem CountTrue_spec (a : Array Bool) :
  CountTrue a = countTo a a.size :=
  sorry

vc-postamble: |-

