vc-description: |-
  /- 
  {
  "name": "Software-Verification_tmp_tmpv4ueky2d_Counting Bits_counting_bits_counting_bits",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: Software-Verification_tmp_tmpv4ueky2d_Counting Bits_counting_bits_counting_bits",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /- 
  Translates the Dafny counting_bits method which computes an array where each element
  contains the number of 1 bits in its index.
  
  @param n The size parameter determining array length
  @return Array containing bit counts
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def counting_bits (n : Int) : Array Int :=
  sorry

vc-theorems: |-
  theorem counting_bits_spec (n : Int) :
  0 ≤ n ∧ n ≤ 100000 →
  let result := counting_bits n
  result.size = n + 1 ∧
  ∀ i, 1 ≤ i ∧ i < n + 1 → result[i.toNat]! = result[(i / 2).toNat]! + i % 2 :=
  sorry

vc-postamble: |-

