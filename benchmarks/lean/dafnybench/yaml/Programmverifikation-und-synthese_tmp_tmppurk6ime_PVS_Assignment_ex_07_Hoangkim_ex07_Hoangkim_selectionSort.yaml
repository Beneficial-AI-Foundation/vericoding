vc-description: |-
  /- 
  {
  "name": "Programmverifikation-und-synthese_tmp_tmppurk6ime_PVS_Assignment_ex_07_Hoangkim_ex07_Hoangkim_selectionSort",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: Programmverifikation-und-synthese_tmp_tmppurk6ime_PVS_Assignment_ex_07_Hoangkim_ex07_Hoangkim_selectionSort",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /-  FindMin returns the index of the minimum element in array a starting from index lo -/
  
  /-  Specification for FindMin -/
  
  /-  Predicate indicating if an array is sorted -/
  
  /-  Selection sort implementation -/
  
  /-  Specification for selectionSort -/

vc-preamble: |-
  def sorted (a : Array Int) : Prop :=
  ∀ i, 0 < i ∧ i < a.size → a[i-1]! ≤ a[i]!

vc-helpers: |-

vc-definitions: |-
  def FindMin (a : Array Int) (lo : Nat) : Nat :=
  sorry
  
  def selectionSort (a : Array Int) : Array Int :=
  sorry

vc-theorems: |-
  theorem FindMin_spec (a : Array Int) (lo : Nat) :
  a.size > 0 ∧ lo < a.size →
  let minIdx := FindMin a lo
  lo ≤ minIdx ∧ minIdx < a.size ∧
  ∀ x, lo ≤ x ∧ x < a.size → a[minIdx]! ≤ a[x]! :=
  sorry
  
  theorem selectionSort_spec (a : Array Int) :
  sorted (selectionSort a) :=
  sorry

vc-postamble: |-

