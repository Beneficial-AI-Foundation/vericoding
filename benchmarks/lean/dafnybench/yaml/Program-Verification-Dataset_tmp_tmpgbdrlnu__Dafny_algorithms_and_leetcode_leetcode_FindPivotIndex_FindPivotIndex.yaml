vc-description: |-
  /- 
  {
  "name": "Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_algorithms and leetcode_leetcode_FindPivotIndex_FindPivotIndex",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: Program-Verification-Dataset_tmp_tmpgbdrlnu__Dafny_algorithms and leetcode_leetcode_FindPivotIndex_FindPivotIndex",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /-  Sum of elements in an array from start to end -/
  
  /- 
  Find pivot index in array where sum of elements to left equals sum of elements to right.
  Returns leftmost such index or -1 if none exists.
  -/

vc-preamble: |-
  partial def sum (nums : Array Int) : Int :=
  if nums.size = 0 then 0
  else sum (nums.extract 0 (nums.size - 1)) + nums[nums.size - 1]!

vc-helpers: |-

vc-definitions: |-
  def FindPivotIndex (nums : Array Int) : Int :=
  sorry

vc-theorems: |-
  theorem FindPivotIndex_spec (nums : Array Int) :
  nums.size > 0 →
  (let index := FindPivotIndex nums
  (index = -1 →
  ∀ k : Nat, k < nums.size →
  sum (nums.extract 0 k) ≠ sum (nums.extract (k+1) nums.size)) ∧
  (0 ≤ index ∧ index < nums.size →
  sum (nums.extract 0 index.toNat) = sum (nums.extract (index.toNat+1) nums.size))) :=
  sorry

vc-postamble: |-

