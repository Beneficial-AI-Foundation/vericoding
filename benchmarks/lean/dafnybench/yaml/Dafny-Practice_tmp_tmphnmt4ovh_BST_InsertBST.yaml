vc-description: |-
  /- 
  {
  "name": "Dafny-Practice_tmp_tmphnmt4ovh_BST_InsertBST",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: Dafny-Practice_tmp_tmphnmt4ovh_BST_InsertBST",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /-  Binary tree datatype -/
  
  /-  Convert sequence to set -/
  
  /-  Get inorder traversal of tree -/
  
  /-  Get set of numbers in a tree -/
  
  /-  Check if sequence is ascending -/
  
  /-  Check if tree is a binary search tree -/
  
  /-  Check if sequence has no duplicates -/
  
  /-  Insert value into BST maintaining BST property -/

vc-preamble: |-
  inductive Tree where
  | Empty : Tree
  | Node : Int → Tree → Tree → Tree
  deriving Repr
  def NumbersInSequence (q : Array Int) : List Int :=
  q.toList
  def Inorder (t : Tree) : Array Int :=
  match t with
  | Tree.Empty => #[]
  | Tree.Node n t1 t2 => (Inorder t1).append (#[n]) ++ (Inorder t2)
  def NumbersInTree (t : Tree) : List Int :=
  NumbersInSequence (Inorder t)
  def Ascending (q : Array Int) : Prop :=
  ∀ i j : Nat, i < j → j < q.size → q[i]! < q[j]!
  def BST (t : Tree) : Prop :=
  Ascending (Inorder t)
  def NoDuplicates (q : Array Int) : Prop :=
  ∀ i j : Nat, i < j → j < q.size → q[i]! ≠ q[j]!

vc-helpers: |-

vc-definitions: |-
  def InsertBST (t0 : Tree) (x : Int) : Tree :=
  sorry

vc-theorems: |-
  theorem InsertBST_spec (t0 : Tree) (x : Int) :
  BST t0 ∧ x ∉ NumbersInTree t0 →
  let t := InsertBST t0 x
  BST t ∧ NumbersInTree t = NumbersInTree t0 ++ [x] :=
  sorry

vc-postamble: |-

