vc-description: |-
  /- 
  {
  "name": "dafny-synthesis_task_id_807_FindFirstOdd",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: dafny-synthesis_task_id_807_FindFirstOdd",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /-  Predicate indicating if a number is odd -/
  
  /-  FindFirstOdd takes an array of integers and returns:
  - found: whether an odd number was found
  - index: the index of the first odd number if found
  -/

vc-preamble: |-
  def IsOdd (x : Int) : Bool :=
  x % 2 ≠ 0

vc-helpers: |-

vc-definitions: |-
  def FindFirstOdd (a : Array Int) : Bool × Int :=
  sorry

vc-theorems: |-
  theorem FindFirstOdd_spec (a : Array Int) (result : Bool × Int) :
  let (found, index) := result
  (¬found → ∀ i, 0 ≤ i ∧ i < a.size → ¬IsOdd (a[i]!)) ∧
  (found → 0 ≤ index ∧ index < a.size ∧
  IsOdd (a[index.toNat]!) ∧
  ∀ i:Nat, 0 ≤ i ∧ i < index → ¬IsOdd (a[i]!)) :=
  sorry

vc-postamble: |-

