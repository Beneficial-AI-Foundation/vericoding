vc-description: |-
  /- 
  {
  "name": "Formal-Verification_tmp_tmpuyt21wjt_Dafny_strings1_haveCommonKSubstring",
  "category": "Dafny Translation",
  "description": "Automatically translated from Dafny specification: Formal-Verification_tmp_tmpuyt21wjt_Dafny_strings1_haveCommonKSubstring",
  "source": "Dafny",
  "translation_date": "2024",
  "functions": ,
  "methods":
  }
  -/
  
  /-  Predicate indicating when a string is not a prefix of another string -/
  
  /-  Function checking if one string is a prefix of another -/
  
  /-  Specification for isPrefix -/
  
  /-  Predicate indicating when one string is a prefix of another -/
  
  /-  Predicate indicating when one string is a substring of another -/
  
  /-  Function checking if one string is a substring of another -/
  
  /-  Specification for isSubstring -/
  
  /-  Predicate indicating if two strings have a common substring of length k -/
  
  /-  Predicate indicating if len is the maximum length of common substrings -/
  
  /-  Function checking if two strings have a common substring of length k -/
  
  /-  Specification for haveCommonKSubstring -/

vc-preamble: |-
  def isNotPrefixPred (pre str : String) : Bool :=
  (pre.length > str.length) ∨ pre ≠ str.take pre.length
  
  def isPrefixPredicate (pre str : String) : Bool :=
  str.length ≥ pre.length ∧ pre ≤ str
  
  def isSubstringPredicate (sub str : String) : Prop :=
  str.length ≥ sub.length ∧ ∃ i, 0 ≤ i ∧ i ≤ str.length ∧
  isPrefixPredicate sub (str.drop i)
  
  def haveCommonKSubstringPredicate (k : Nat) (str1 str2 : String) : Prop :=
  str1.length ≥ k ∧ str2.length ≥ k ∧
  ∃ i, 0 ≤ i ∧ i ≤ str1.length - k ∧
  isSubstringPredicate ((str1.drop i).take k) str2
  
  def maxCommonSubstringPredicate (str1 str2 : String) (len : Nat) : Prop :=
  ∀ k, len < k ∧ k ≤ str1.length → ¬(haveCommonKSubstringPredicate k str1 str2)

vc-helpers: |-

vc-definitions: |-
  def isPrefix (pre str : String) : Bool :=
  sorry
  
  def isSubstring (sub str : String) : Bool :=
  sorry
  
  def haveCommonKSubstring (k : Nat) (str1 str2 : String) : Bool :=
  sorry

vc-theorems: |-
  theorem isPrefix_spec (pre str : String) :
  ¬(isPrefix pre str) ↔ isNotPrefixPred pre str :=
  sorry
  
  theorem isSubstring_spec (sub str : String) :
  isSubstring sub str = isSubstringPredicate sub str :=
  sorry
  
  theorem haveCommonKSubstring_spec (k : Nat) (str1 str2 : String) :
  (str1.length < k ∨ str2.length < k → ¬(haveCommonKSubstring k str1 str2)) ∧
  haveCommonKSubstringPredicate k str1 str2 = haveCommonKSubstring k str1 str2 :=
  sorry

vc-postamble: |-

