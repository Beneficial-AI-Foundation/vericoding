vc-description: |-
  /- 
  function_signature: "def flip_case(string: str) -> str"
  docstring: |
      For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
  test_cases:
    - input: "Hello"
      expected_output: "hELLO"
  -/

vc-preamble: |-
  import Imports.AllImports

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def implementation (string: String) : String :=

vc-implementation: |-
  -- <vc-implementation>
  string.map (λ c => if c.isUpper then c.toLower else c.toUpper)
  -- </vc-implementation>
  
vc-condition: |-
  def problem_spec
  -- function signature
  (implementation: String → String)
  -- inputs
  (string: String) :=
  -- spec
  let spec (result: String) :=
  let chars_in_result := result.toList;
  let chars_in_string := string.toList;
  chars_in_result.length = string.length ∧
  (∀ i, i < chars_in_result.length →
    let c := chars_in_result.get! i;
    let c' := chars_in_string.get! i;
    (c.isUpper → c'.isLower) ∧
    (c.isLower → c'.isUpper) ∧
    ((¬ c.isUpper ∧ ¬ c.isLower) → c = c')
  );
  -- program termination
  ∃ result, implementation string = result ∧
  spec result
  
  theorem correctness
  (string: String)
  : problem_spec implementation string
  :=

vc-proof: |-
  -- <vc-proof>
  by
  unfold problem_spec
  let result := implementation string
  use result
  simp [result]
  sorry
  -- </vc-proof>

vc-postamble: |-
  #test implementation "Hello" = "hELLO"
  
  

