vc-description: |-
  /- 
  function_signature: "def all_prefixes(string: str) -> List[str]"
  docstring: |
      Return list of all prefixes from shortest to longest of the input string
  test_cases:
    - input: "abc"
      expected_output:
        - "a"
        - "ab"
        - "abc"
  -/

vc-preamble: |-
  import Imports.AllImports

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def implementation (string: String) : List String :=

vc-implementation: |-
  -- <vc-implementation>
  let rec aux (chars: List Char) (result: List String) (i: Nat) :=
  if i < chars.length then
    aux chars (result ++ [(chars.take (i + 1)).asString]) (i + 1)
  else
    result;
  aux string.toList [] 0
  -- </vc-implementation>
  
vc-condition: |-
  def problem_spec
  -- function signature
  (implementation: String → List String)
  -- inputs
  (string: String) :=
  -- spec
  let spec (result: List String) :=
  result.length = string.length ∧
  ∀ i, i < result.length →
  result[i]! = string.take (i + 1);
  -- program termination
  ∃ result, implementation string = result ∧
  spec result
  
  theorem correctness
  (string: String)
  : problem_spec implementation string
  :=

vc-proof: |-
  -- <vc-proof>
  by
  unfold problem_spec
  let result := implementation string
  use result
  simp [result]
  sorry
  -- </vc-proof>

vc-postamble: |-
  #test implementation "abc" = ["a", "ab", "abc"]
  
  

