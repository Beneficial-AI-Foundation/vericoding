vc-description: |-
  /- 
  function_signature: "def digitSum(string: str) -> Nat"
  docstring: |
      Write a function that takes a string as input and returns the sum of the upper characters only'
      ASCII codes.
  test_cases:
    - input: ""
      expected_output: 0
    - input: "abAB"
      expected_output: 131
    - input: "helloE"
      expected_output: 69
  -/

vc-preamble: |-
  import Imports.AllImports

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def implementation (string: String) : Nat :=

vc-implementation: |-
  -- <vc-implementation>
  sorry
  -- </vc-implementation>
  
vc-condition: |-
  def problem_spec
  -- function signature
  (implementation: String → Nat)
  -- inputs
  (string: String) :=
  let isUpper (c : Char) :=
    65 ≤ c.toNat ∧ c.toNat ≤ 90
  -- spec
  let spec (result: Nat) :=
  if string.length = 1 then
    result = if isUpper string.data[0]! then string.data[0]!.toNat else 0
  else
    result = (if isUpper string.data[0]! then string.data[0]!.toNat else 0) + implementation (string.drop 1);
  -- program termination
  ∃ result, implementation string = result ∧
  spec result
  
  theorem correctness
  (s: String)
  : problem_spec implementation s
  :=

vc-proof: |-
  -- <vc-proof>
  by
  unfold problem_spec
  let result := implementation s
  use result
  simp [result]
  sorry
  -- </vc-proof>

vc-postamble: |-
  -- #test implementation "" = 0
  -- #test implementation "abAB" = 131
  -- #test implementation "abcCd" = 67
  -- #test implementation "helloE" = 69
  -- #test implementation "woArBld" = 131
  -- #test implementation "aAaaaXa" = 153
  
  

