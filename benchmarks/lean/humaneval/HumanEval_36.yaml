vc-description: |-
  /--
  function_signature: "def fizz_buzz(n: int)"
  docstring: |
      Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
  test_cases:
    - input: 50
      output: 0
    - input: 78
      output: 2
    - input: 79
      output: 3
  -/

vc-preamble: |-
  import Imports.AllImports

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def implementation (n: Nat) : Nat :=

vc-implementation: |-
  -- <vc-implementation>
  let all_numbers_lt_n := {x | x < n};
  let multiples_of_11_or_13 := all_numbers_lt_n ∩ {x | x % 11 = 0 ∨ x % 13 = 0};
  let possible_multiple_with_7 := multiples_of_11_or_13 ∩ {x | x.repr.contains '7'};
  possible_multiple_with_7.toFinset.sum (λ x => x.repr.count '7')
  -- </vc-implementation>
  
vc-condition: |-
  def problem_spec
  -- function signature
  (implementation: Nat → Nat)
  -- inputs
  (n: Nat) :=
  -- spec
  let spec (result: Nat) :=
    (n = 0 → result = 0) ∧
    (0 < n → result = implementation (n - 1) →
      (n % 11 ≠  0 ∧  n % 13 ≠  0) ∨ n.repr.count '7' = 0) ∧
    (0 < n → result ≠ implementation (n - 1) →
      (n % 11 = 0 ∨  n % 13 = 0) ∧
      result - implementation (n - 1) = n.repr.count '7')
  -- program termination
  ∃ result, implementation n = result ∧
  spec result
  
  theorem correctness
  (n: Nat)
  : problem_spec implementation n
  :=

vc-proof: |-
  -- <vc-proof>
  by
  unfold problem_spec
  let result := implementation n
  use result
  simp [result]
  simp [implementation]
  sorry
  -- </vc-proof>

vc-postamble: |-
  #test implementation 50 = 0
  #test implementation 78 = 2
  #test implementation 79 = 3
  
  

