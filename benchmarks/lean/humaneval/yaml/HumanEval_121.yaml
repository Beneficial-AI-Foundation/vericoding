vc-description: |-
  function_signature: "def solution(lst: List[int]) -> int"
  docstring: |
      Given a non-empty list of integers, return the sum of all of the odd elements that
      are in even positions.
  test_cases:
    - input: [5, 8, 7, 1]
      expected_output: 12
    - input: [3, 3, 3, 3, 3]
      expected_output: 9
    - input: [30, 13, 24, 321]
      expected_output: 0

vc-preamble: |-
  import Mathlib
  import Mathlib.Algebra.Polynomial.Basic
  import Std.Data.HashMap
  
  def problem_spec
  -- function signature
  (impl: List Int → Int)
  -- inputs
  (lst: List Int) :=
  -- spec
  let spec (_ : Int) :=
  lst ≠ [] → ∀ i,  i < lst.length ∧ i % 2 = 0 →
    (lst.length = 1 → impl lst = 0) ∧
    (i + 1 < lst.length →
      (lst[i + 1]! % 2 = 1 →
      impl (lst.drop i) = lst[i + 1]! + (if i + 2 < lst.length then impl (lst.drop (i+2)) else 0)) ∧
      (lst[i + 1]! % 2 = 0 →
      impl (lst.drop i) = if i + 2 < lst.length then impl (lst.drop (i+2)) else 0)
    )
  -- program terminates
  ∃ result, impl lst = result ∧
  -- return value satisfies spec
  spec result

vc-helpers: |-
  

vc-spec: |-
  def implementation (lst: List Int) : Int :=

vc-code: |-
  sorry

vc-theorem: |-
  theorem correctness
  (lst: List Int)
  : problem_spec implementation lst :=

vc-proof: |-
  by
    sorry

vc-postamble: |-
  -- #test implementation ([5, 8, 7, 1]: List Int) = 12
  -- #test implementation ([3, 3, 3, 3, 3]: List Int) = 9
  -- #test implementation ([30, 13, 24, 321]: List Int) = 0
