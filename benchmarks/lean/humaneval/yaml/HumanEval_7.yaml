vc-description: |-
  function_signature: "def filter_by_substring(strings: List[str], substring: str) -> List[str]"
  docstring: |
    Filter an input list of strings only for ones that contain given substring
  test_cases:
    - input:
      - []
      - "a"
      expected_output: []
    - input:
      - ["abc", "bacd", "cde", "array"]
      - "a"
      expected_output: ["abc", "bacd", "array"]

vc-preamble: |-
  import Mathlib
  import Mathlib.Algebra.Polynomial.Basic
  import Std.Data.HashMap
  
  def problem_spec
  -- function signature
  (implementation: List String → String → List String)
  -- inputs
  (strings: List String)
  (substring: String)
  :=
  -- spec
  let spec (result: List String) :=
  (∀ i, i < result.length → result[i]!.containsSubstr substring →
  ∀ j, j < strings.length ∧ strings[j]!.containsSubstr substring → strings[j]! ∈ result →
  ∀ j, j < result.length → result.count result[j]! = strings.count result[j]!);
  -- program termination
  ∃ result, implementation strings substring = result ∧
  spec result

vc-helpers: |-
  

vc-spec: |-
  def implementation (strings: List String) (substring: String): List String :=

vc-code: |-
  sorry

vc-theorem: |-
  theorem correctness
  (strings: List String)
  (substring: String)
  : problem_spec implementation strings substring
  :=

vc-proof: |-
  by
    sorry

vc-postamble: |-
  -- #test implementation [] "a" = []
  -- #test implementation ["abc", "bacd", "cde", "array"] "a" = ["abc", "bacd", "array"]
