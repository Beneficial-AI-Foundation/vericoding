vc-description: |-
  function_signature: "def flip_case(string: str) -> str"
  docstring: |
      For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
  test_cases:
    - input: "Hello"
      expected_output: "hELLO"

vc-preamble: |-
  import Mathlib
  import Mathlib.Algebra.Polynomial.Basic
  import Std.Data.HashMap
  
  def problem_spec
  -- function signature
  (implementation: String → String)
  -- inputs
  (string: String) :=
  -- spec
  let spec (result: String) :=
  let chars_in_result := result.toList;
  let chars_in_string := string.toList;
  chars_in_result.length = string.length ∧
  (∀ i, i < chars_in_result.length →
    let c := chars_in_result[i]!;
    let c' := chars_in_string[i]!;
    (c.isUpper → c'.isLower) ∧
    (c.isLower → c'.isUpper) ∧
    ((¬ c.isUpper ∧ ¬ c.isLower) → c = c')
  );
  -- program termination
  ∃ result, implementation string = result ∧
  spec result

vc-helpers: |-
  

vc-spec: |-
  def implementation (string: String) : String :=

vc-code: |-
  sorry

vc-theorem: |-
  theorem correctness
  (string: String)
  : problem_spec implementation string
  :=

vc-proof: |-
  by
    sorry

vc-postamble: |-
  -- #test implementation "Hello" = "hELLO"
