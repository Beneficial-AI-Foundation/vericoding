vc-description: |-
  /- 
  function_signature: "def fib(n: int) -> int"
  docstring: |
      Return n-th Fibonacci number.
  test_cases:
    - input: 10
      expected_output: 55
    - input: 1
      expected_output: 1
    - input: 8
      expected_output: 21
  -/

vc-preamble: |-
  import Imports.AllImports

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def implementation (n: Nat) : Nat :=

vc-implementation: |-
  -- <vc-implementation>
  sorry
  -- </vc-implementation>
  
vc-condition: |-
  def problem_spec
  -- function signature
  (implementation: Nat → Nat)
  -- inputs
  (n: Nat) :=
  -- spec
  let spec (result: Nat) :=
  fibonacci_non_computable n result
  -- program termination
  ∃ result, implementation n = result ∧
  spec result
  
  theorem correctness
  (n: Nat)
  : problem_spec implementation n
  :=

vc-proof: |-
  -- <vc-proof>
  by
  unfold problem_spec
  let result := implementation n
  use result
  simp [result]
  repeat sorry
  -- </vc-proof>

vc-postamble: |-
  -- #test implementation 10 = 55
  -- #test implementation 1 = 1
  -- #test implementation 8 = 21
  
  

