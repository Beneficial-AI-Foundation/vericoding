vc-description: |-
  /-
  Alice and Bob take turns playing a game, with Alice starting first.
  Initially, there is a number N on the chalkboard.  On each player's turn, that player makes a move consisting of:

  Choosing any x with 0 < x < N and N % x == 0.
  Replacing the number N on the chalkboard with N - x.

  Also, if a player cannot make a move, they lose the game.
  Return True if and only if Alice wins the game, assuming both players play optimally.

  Example 1:
  Input: 2
  Output: true
  Explanation: Alice chooses 1, and Bob has no more moves.

  Example 2:
  Input: 3
  Output: false
  Explanation: Alice chooses 1, Bob chooses 1, and Alice has no more moves.

  Note:

  1 <= N <= 1000
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def divisorGame (n : Nat) : Bool := sorry

  theorem divisorGame_type (n : Nat) :
    divisorGame n = true ∨ divisorGame n = false := sorry

vc-theorems: |-
  theorem divisorGame_parity (n : Nat) :
    divisorGame n = (n % 2 = 0) := sorry

  theorem divisorGame_base_cases : 
    divisorGame 1 = false ∧ divisorGame 2 = true := sorry

  theorem divisorGame_bounds (n : Nat) : 
    n = 1 ∨ n = 1000 → (divisorGame n = true ∨ divisorGame n = false) := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: True
  -/
  #guard_msgs in
  #eval divisorGame 2

  /-
  info: False
  -/
  #guard_msgs in
  #eval divisorGame 3

  /-
  info: True
  -/
  #guard_msgs in
  #eval divisorGame 4

