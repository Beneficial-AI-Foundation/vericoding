vc-description: |-
  /-
  #Find the missing letter

  Write a method that takes an array of consecutive (increasing) letters as input and that returns the missing letter in the array.

  You will always get an valid array. And it will be always exactly one letter be missing. The length of the array will always be at least 2.
  The array will always contain letters in only one case.

  Example:
  ```if-not:swift
  ['a','b','c','d','f'] -> 'e'
  ['O','Q','R','S'] -> 'P'
  ```

  (Use the English alphabet with 26 letters!)

  Have fun coding it and please don't forget to vote and rank this kata! :-) 

  I have also created other katas. Take a look if you enjoyed this kata!
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def find_missing_letter (chars : List Char) : Option Char := sorry

  theorem find_missing_letter_with_gap {chars : List Char} 
      (h₁ : chars.length > 1)
      (h₂ : ∀ i j, i < j → j < chars.length → Char.toNat (chars.get! i) < Char.toNat (chars.get! j))
      (h₃ : ∀ (i : Nat), i + 1 < chars.length → 
            Char.toNat (chars.get! i) + 1 = Char.toNat (chars.get! (i + 1))) :
      let missing := chars.get! 0
      let test_input := chars.get! 0 :: chars.tail!
      find_missing_letter test_input = some missing := sorry

vc-theorems: |-
  theorem find_missing_letter_consecutive {chars : List Char}
      (h₁ : chars.length > 1) 
      (h₂ : ∀ i j, i < j → j < chars.length → Char.toNat (chars.get! i) < Char.toNat (chars.get! j))
      (h₃ : ∀ (i : Nat), i + 1 < chars.length → 
            Char.toNat (chars.get! i) + 1 = Char.toNat (chars.get! (i + 1))) :
      find_missing_letter chars = none := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /--
  info: 'e'
  -/
  #guard_msgs in
  #eval find_missing_letter ["a", "b", "c", "d", "f"]

  /--
  info: 'P'
  -/
  #guard_msgs in
  #eval find_missing_letter ["O", "Q", "R", "S"]

  /--
  info: 'c'
  -/
  #guard_msgs in
  #eval find_missing_letter ["b", "d"]

