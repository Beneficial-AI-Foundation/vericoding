vc-description: |-
  /-
  This function takes two numbers as parameters, the first number being the coefficient, and the second number being the exponent.

  Your function should multiply the two numbers, and then subtract 1 from the exponent. Then, it has to print out an expression (like 28x^7). `"^1"` should not be truncated when exponent = 2.

  For example:
  ```
  derive(7, 8)
  ```
  In this case, the function should multiply 7 and 8, and then subtract 1 from 8. It should output `"56x^7"`, the first number 56 being the product of the two numbers, and the second number being the exponent minus 1.

  ```
  derive(7, 8) --> this should output "56x^7" 
  derive(5, 9) --> this should output "45x^8" 
  ```

  **Notes:**
  * The output of this function should be a string
  * The exponent will never be 1, and neither number will ever be 0
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def derive (coefficient : Int) (exponent : Int) : String := sorry 

  theorem derive_coefficient_correct {c e : Int} 
    (h : e > 0) : 
    let result := derive c e
    let coef := result.splitOn "x^" |>.get! 0
    String.toInt! coef = c * e := sorry

vc-theorems: |-
  theorem derive_exponent_correct {c e : Int}
    (h : e > 0) :
    let result := derive c e
    let exp := result.splitOn "x^" |>.get! 1 
    String.toInt! exp = e - 1 := sorry

  theorem derive_format {c e : Int}
    (h : e > 0) :
    String.contains (derive c e) 'x' := sorry

  theorem derive_matches_derivative_formula {c e : Int}
    (h : e > 0) :
    derive c e = toString (c * e) ++ "x^" ++ toString (e - 1) := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /--
  info: '56x^7'
  -/
  #guard_msgs in
  #eval derive 7 8

  /--
  info: '45x^8'
  -/
  #guard_msgs in
  #eval derive 5 9

  /--
  info: '20x^1'
  -/
  #guard_msgs in
  #eval derive 10 2

