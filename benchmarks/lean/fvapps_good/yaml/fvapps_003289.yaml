vc-description: |-
  /-
  # Description
  Write a function that checks whether a credit card number is correct or not, using the Luhn algorithm.

  The algorithm is as follows:

  * From the rightmost digit, which is the check digit, moving left, double the value of every second digit; if the product of this doubling operation is greater than 9 (e.g., 8 × 2 = 16), then sum the digits of the products (e.g., 16: 1 + 6 = 7, 18: 1 + 8 = 9) or alternatively subtract 9 from the product (e.g., 16: 16 - 9 = 7, 18: 18 - 9 = 9).
  * Take the sum of all the digits.
  * If the total modulo 10 is equal to 0 (if the total ends in zero) then the number is valid according to the Luhn formula; else it is not valid.

  The input is a string with the full credit card number, in groups of 4 digits separated by spaces, i.e. "1234 5678 9012 3456"  
  Don´t worry about wrong inputs, they will always be a string with 4 groups of 4 digits each separated by space.

  # Examples

  `valid_card?("5457 6238 9823 4311") # True`

  `valid_card?("5457 6238 9323 4311") # False`

  for reference check: https://en.wikipedia.org/wiki/Luhn_algorithm
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def valid_card (s : String) : Bool := sorry

  def make_valid_number (digits : String) : String := sorry

vc-theorems: |-
  theorem invalid_format_raises {s : String} 
    (h : ¬ ∀ c, c ∈ s.data → c = ' ' ∨ ('0' ≤ c ∧ c ≤ '9')) :
    valid_card s = false :=
  sorry

  theorem valid_card_with_valid_number {digits : List Nat}
    (h1 : digits.length = 16) 
    (h2 : ∀ d ∈ digits, 0 ≤ d ∧ d ≤ 9) :
    let card := make_valid_number (String.join (digits.map toString))
    valid_card card = true ∧
    valid_card (card.take 4 ++ " " ++ card.drop 4) = true ∧ 
    valid_card (String.join [(card.take 4), " ", (card.drop 4).take 4, " ", 
                            (card.drop 8).take 4, " ", (card.drop 12).take 4]) = true :=
  sorry

  theorem invalid_card_remains_invalid {digits : List Nat}
    (h1 : digits.length = 15)
    (h2 : ∀ d ∈ digits, 0 ≤ d ∧ d ≤ 9) :
    let card := String.join (digits.map toString) ++ "0"
    ¬valid_card card →
    ¬valid_card card ∧
    ¬valid_card (String.join [(card.take 4), " ", (card.drop 4).take 4, " ",
                             (card.drop 8).take 4, " ", (card.drop 12).take 4]) :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /--
  info: True
  -/
  #guard_msgs in
  #eval valid_card "5457 6238 9823 4311"

  /--
  info: False
  -/
  #guard_msgs in
  #eval valid_card "5457 6238 9323 4311"

  /--
  info: True
  -/
  #guard_msgs in
  #eval valid_card "2222 2222 2222 2224"

