vc-description: |-
  /-
  The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)

  P   A   H   N
  A P L S I I G
  Y   I   R

  And then read line by line: "PAHNAPLSIIGYIR"

  Write the code that will take a string and make this conversion given a number of rows:

  string convert(string s, int numRows);

  Example 1:

  Input: s = "PAYPALISHIRING", numRows = 3
  Output: "PAHNAPLSIIGYIR"

  Example 2:

  Input: s = "PAYPALISHIRING", numRows = 4
  Output: "PINALSIGYAHRPI"
  Explanation:

  P     I    N
  A   L S  I G
  Y A   H R
  P     I
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def convert_zigzag (s : String) (numRows : Nat) : String :=
    sorry

vc-theorems: |-
  theorem zigzag_properties {s : String} {numRows : Nat} 
    (h1 : s.length > 0) (h2 : numRows > 0) (h2a : numRows ≤ 100) :
    let result := convert_zigzag s numRows
    (result.length = s.length) :=
  sorry

  theorem single_row_is_identity {s : String} (h : s.length > 0) :
    convert_zigzag s 1 = s :=
  sorry

  theorem first_char_pattern {s : String} {numRows : Nat}
    (h1 : s.length ≥ numRows) (h2 : numRows > 1) (h3 : numRows ≤ 100) :
    let result := convert_zigzag s numRows
    result.get 0 = s.get 0 :=
  sorry

  theorem empty_string_identity {s : String} {n : Nat}
    (h1 : s.length = 0) (h2 : n > 0) (h3 : n < 4) :
    convert_zigzag s n = s :=
  sorry

  theorem single_char_identity {s : String} {n : Nat}
    (h1 : s.length = 1) (h2 : n > 0) (h3 : n < 4) :
    convert_zigzag s n = s := 
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

  /--
  info: 'PAHNAPLSIIGYIR'
  -/
  #guard_msgs in
  #eval convert_zigzag "PAYPALISHIRING" 3

  /--
  info: 'PINALSIGYAHRPI'
  -/
  #guard_msgs in
  #eval convert_zigzag s1 4

  /--
  info: 'AB'
  -/
  #guard_msgs in
  #eval convert_zigzag "AB" 1

