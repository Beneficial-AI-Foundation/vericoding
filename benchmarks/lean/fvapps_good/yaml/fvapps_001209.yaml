vc-description: |-
  /-
  Given a number $n$, give the last digit of sum of all the prime numbers from 1 to $n$ inclusive.

  -----Input:-----
  - First line contains number of testcase $t$.
  - Each testcase contains of a single line of input, number $n$. 

  -----Output:-----
  Last digit of sum of every prime number till n.

  -----Constraints-----
  - $1 \leq T \leq 10$
  - $2 \leq N \leq 10^6$

  -----Sample Input:-----
  1
  10

  -----Sample Output:-----
  7
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def isPrime (n : Nat) : Bool := sorry
  def last_digit_prime_sum (n : Nat) : Nat := sorry

  -- Results are natural numbers between 0 and 9 inclusive

vc-theorems: |-
  theorem last_digit_bounds (n : Nat) (h : n ≥ 2) : 
    0 ≤ last_digit_prime_sum n ∧ last_digit_prime_sum n ≤ 9 := sorry

  -- Known value cases

  theorem small_primes_cases : 
    last_digit_prime_sum 2 = 2 ∧ 
    last_digit_prime_sum 3 = 5 ∧
    last_digit_prime_sum 4 = 5 ∧
    last_digit_prime_sum 5 = 0 := sorry

  -- Result is equal to its modulo 10

  theorem modulo_property (n : Nat) (h : n ≥ 2) :
    last_digit_prime_sum n = last_digit_prime_sum n % 10 := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

  /-
  info: 7
  -/
  #guard_msgs in
  #eval last_digit_prime_sum 10

  /-
  info: 0
  -/
  #guard_msgs in
  #eval last_digit_prime_sum 5

  /-
  info: 0
  -/
  #guard_msgs in
  #eval last_digit_prime_sum 100

