vc-description: |-
  /-
  In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.
  Some nodes initial are initially infected by malware.  Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.  This spread of malware will continue until no more nodes can be infected in this manner.
  Suppose M(initial) is the final number of nodes infected with malware in the entire network, after the spread of malware stops.
  We will remove one node from the initial list.  Return the node that if removed, would minimize M(initial).  If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.
  Note that if a node was removed from the initial list of infected nodes, it may still be infected later as a result of the malware spread.

  Example 1:
  Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
  Output: 0

  Example 2:
  Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
  Output: 0

  Example 3:
  Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
  Output: 1

  Note:

  1 < graph.length = graph[0].length <= 300
  0 <= graph[i][j] == graph[j][i] <= 1
  graph[i][i] == 1
  1 <= initial.length <= graph.length
  0 <= initial[i] < graph.length
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def min_malware_spread (graph : List (List Nat)) (initial : List Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem min_malware_spread_result_in_initial {graph : List (List Nat)} {initial : List Nat} 
      (h_graph_valid : List.length graph > 0)
      (h_initial_valid : List.length initial > 0)
      (h_initial_bounded : ∀ x, x ∈ initial → x < List.length graph)
      : min_malware_spread graph initial ∈ initial := 
    sorry

  theorem min_malware_spread_minimum_node {graph : List (List Nat)} {initial : List Nat}
      (h_graph_valid : List.length graph > 0) 
      (h_initial_valid : List.length initial > 0)
      (h_initial_bounded : ∀ x, x ∈ initial → x < List.length graph)
      : ∀ x, x ∈ initial → min_malware_spread graph initial ≤ x := 
    sorry

  theorem graph_symmetry {graph : List (List Nat)}
      (h_graph_valid : List.length graph > 0)
      : ∀ i j, i < List.length graph → j < List.length graph →
        (List.get! graph i).get! j = (List.get! graph j).get! i :=
    sorry

  theorem graph_self_connections {graph : List (List Nat)}
      (h_graph_valid : List.length graph > 0)
      : ∀ i, i < List.length graph → (List.get! graph i).get! i = 1 :=
    sorry

  theorem graph_binary_adjacency {graph : List (List Nat)}
      (h_graph_valid : List.length graph > 0)
      : ∀ i j, i < List.length graph → j < List.length graph →
        (List.get! graph i).get! j ≤ 1 :=
    sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

  /--
  info: 0
  -/
  #guard_msgs in
  #eval min_malware_spread [[1, 1, 0], [1, 1, 0], [0, 0, 1]] [0, 1]

  /--
  info: 0
  -/
  #guard_msgs in
  #eval min_malware_spread [[1, 0, 0], [0, 1, 0], [0, 0, 1]] [0, 2]

  /--
  info: 1
  -/
  #guard_msgs in
  #eval min_malware_spread [[1, 1, 1], [1, 1, 1], [1, 1, 1]] [1, 2]

