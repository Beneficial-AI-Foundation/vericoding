vc-description: |-
  /-
  To pass the series of gates guarded by the owls, Kenneth needs to present them each with a highly realistic portrait of one.  Unfortunately, he is absolutely rubbish at drawing, and needs some code to return a brand new portrait with a moment's notice.

  All owl heads look like this:

      ''0v0''

  Such beautiful eyes!
  However, they differ in their plumage, which is always symmetrical, eg.:

         VVHVAV''0v0''VAVHVV

  or

      YYAYAH8XH''0v0''HX8HAYAYY

  So Kenneth needs a method that will take a garble of text generated by mashing at his keyboard (numbers and letters, but he knows how to avoid punctuation etc.) for a bit and give him a symmetrical owl with a lovely little face, with a truly symmetrical plumage made of uppercase letters and numbers.

  (To be clear, the acceptable characters for the plumage are 8,W,T,Y,U,I,O,A,H,X,V and M.)
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def owl_pic (s : String) : String := sorry

  def containsSubstr (s : String) (sub : String) : Bool := sorry

vc-theorems: |-
  theorem owl_pic_result_structure (s : String) :
    let result := owl_pic s
    let parts := result.splitOn "''0v0''"
    parts.length = 2 âˆ§ 
    parts[0]! = String.join (parts[1]!.data.reverse.map toString) := sorry

  theorem owl_pic_uppercase (s : String) :
    let result := owl_pic s
    let leftSide := (result.splitOn "''0v0''")[0]!
    leftSide.toUpper = leftSide := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

  /--
  info: "XW''0v0''WX"
  -/
  #guard_msgs in
  #eval owl_pic "xwe"

  /--
  info: "UAW8Y8T''0v0''T8Y8WAU"
  -/
  #guard_msgs in
  #eval owl_pic "kuawd6r8q27y87t93r76352475437"

  /--
  info: "XWWXO''0v0''OXWWX"
  -/
  #guard_msgs in
  #eval owl_pic "xweWXo"

