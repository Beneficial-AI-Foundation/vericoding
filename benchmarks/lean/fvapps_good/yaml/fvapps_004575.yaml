vc-description: |-
  /-
  # Description
  You are required to implement a function `find_nth_occurrence` that returns the index of the nth occurrence of a substring within a string (considering that those substring could overlap each others). If there are less than n occurrences of the substring, return -1.

  # Example
  ```python
  string = "This is an example. Return the nth occurrence of example in this example string."
  find_nth_occurrence("example", string, 1) == 11
  find_nth_occurrence("example", string, 2) == 49
  find_nth_occurrence("example", string, 3) == 65
  find_nth_occurrence("example", string, 4) == -1
  ```

  Multiple occurrences of a substring are allowed to overlap, e.g.
  ```python
  find_nth_occurrence("TestTest", "TestTestTestTest", 1) == 0
  find_nth_occurrence("TestTest", "TestTestTestTest", 2) == 4
  find_nth_occurrence("TestTest", "TestTestTestTest", 3) == 8
  find_nth_occurrence("TestTest", "TestTestTestTest", 4) == -1
  ```
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def find_nth_occurrence (substring : String) (string : String) (occurrence : Nat) : Int := sorry

  theorem find_nth_occurrence_result_valid {string substring : String} {occurrence : Nat}
      (h : substring.length > 0) :
    let result := find_nth_occurrence substring string occurrence
    result = -1 ∨ (0 ≤ result ∧ result < string.length) := sorry

vc-theorems: |-
  theorem find_nth_occurrence_substring_exists {string substring : String} {occurrence : Nat}
      (h : substring.length > 0)
      (h2 : find_nth_occurrence substring string occurrence ≠ -1) :
    let result := find_nth_occurrence substring string occurrence
    ∃ (pos : String.Pos), 
      pos.byteIdx = result.toNat ∧ 
      string.extract pos (String.Pos.mk (result.toNat + substring.length)) = substring := sorry

  theorem find_nth_occurrence_earlier_exist {string substring : String} {occurrence : Nat}
      (h : substring.length > 0)
      (h2 : find_nth_occurrence substring string occurrence ≠ -1) :
    ∀ i, 1 ≤ i → i < occurrence → 
      let prev := find_nth_occurrence substring string i
      prev ≠ -1 ∧ prev < find_nth_occurrence substring string occurrence := sorry

  theorem occurrence_ordering {string substring : String}
      (h : substring.length > 0) :
    let second := find_nth_occurrence substring string 2
    second ≠ -1 →
      let first := find_nth_occurrence substring string 1
      first ≠ -1 ∧ first < second := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /--
  info: 11
  -/
  #guard_msgs in
  #eval find_nth_occurrence "example" "This is an example. Return the nth occurrence of example in this example string." 1

  /--
  info: 49
  -/
  #guard_msgs in
  #eval find_nth_occurrence "example" test_str 2

  /--
  info: 65
  -/
  #guard_msgs in
  #eval find_nth_occurrence "example" test_str 3

  /--
  info: -1
  -/
  #guard_msgs in
  #eval find_nth_occurrence "example" test_str 4

  /--
  info: 0
  -/
  #guard_msgs in
  #eval find_nth_occurrence "TestTest" "TestTestTestTest" 1

  /--
  info: 4
  -/
  #guard_msgs in
  #eval find_nth_occurrence "TestTest" test_str2 2

  /--
  info: 8
  -/
  #guard_msgs in
  #eval find_nth_occurrence "TestTest" test_str2 3

  /--
  info: -1
  -/
  #guard_msgs in
  #eval find_nth_occurrence "TestTest" test_str2 4

