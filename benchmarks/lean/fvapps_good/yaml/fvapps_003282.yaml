vc-description: |-
  /-
  Create a function that accepts dimensions, of Rows x Columns, as parameters in order to create a multiplication table sized according to the given dimensions.  **The return value of the function must be an array, and the numbers must be Fixnums, NOT strings.

  Example:

  multiplication_table(3,3)

  1       2       3       
  2       4       6       
  3       6       9

  -->[[1,2,3],[2,4,6],[3,6,9]]

  Each value on the table should be equal to the value of multiplying the number in its first row times the number in its first column.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def multiplication_table (rows cols : Nat) : List (List Nat) := sorry

  theorem multiplication_table_dimensions 
    (rows cols : Nat) (h1 : rows > 0) (h2 : cols > 0) :
    let table := multiplication_table rows cols
    (table.length = rows) ∧ 
    (∀ row ∈ table, row.length = cols) := sorry

vc-theorems: |-
  theorem multiplication_table_values
    (rows cols : Nat) (h1 : rows > 0) (h2 : cols > 0) :
    let table := multiplication_table rows cols
    ∀ i j, i < rows → j < cols →
      table[i]!.get! j = (i + 1) * (j + 1) := sorry

  theorem multiplication_table_square_properties
    (size : Nat) (h : size > 0) :
    let table := multiplication_table size size
    (∀ i, i < size → table[i]!.get! i = (i + 1) * (i + 1)) ∧
    (∀ i j, i < size → j < size → 
      table[i]!.get! j = table[j]!.get! i) := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

  /-
  info: [[1, 2], [2, 4]]
  -/
  #guard_msgs in
  #eval multiplication_table 2 2

  /-
  info: [[1, 2, 3], [2, 4, 6], [3, 6, 9]]
  -/
  #guard_msgs in
  #eval multiplication_table 3 3

  /-
  info: [[1, 2, 3, 4, 5], [2, 4, 6, 8, 10]]
  -/
  #guard_msgs in
  #eval multiplication_table 2 5

