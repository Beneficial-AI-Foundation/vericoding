vc-description: |-
  /-
  Your task is to return the sum of Triangular Numbers up-to-and-including the `nth` Triangular Number.

  Triangular Number: "any of the series of numbers (1, 3, 6, 10, 15, etc.) obtained by continued summation of the natural numbers 1, 2, 3, 4, 5, etc."

  ```
  [01]
  02 [03]
  04 05 [06]
  07 08 09 [10]
  11 12 13 14 [15]
  16 17 18 19 20 [21]
  ```

  e.g. If `4` is given: `1 + 3 + 6 + 10 = 20`.

  Triangular Numbers cannot be negative so return 0 if a negative number is given.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def sumTriangularNumbers (n : Int) : Int :=
    sorry

vc-theorems: |-
  theorem sum_triangular_negative_returns_zero {n : Int}
    (h : n ≤ 0) : sumTriangularNumbers n = 0 := sorry

  theorem sum_triangular_positive_properties {n : Int} 
    (h : n > 0) : 
    sumTriangularNumbers n > 0 ∧ 
    sumTriangularNumbers n = n * (n + 1) * (n + 2) / 6 := sorry

  theorem sum_triangular_increasing {n : Int}
    (h : n > 1) : sumTriangularNumbers n > sumTriangularNumbers (n-1) := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: 20
  -/
  #guard_msgs in
  #eval sum_triangular_numbers 4

  /-
  info: 56
  -/
  #guard_msgs in
  #eval sum_triangular_numbers 6

  /-
  info: 0
  -/
  #guard_msgs in
  #eval sum_triangular_numbers -3

