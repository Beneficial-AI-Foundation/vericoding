vc-description: |-
  /-
  Given an array of integers nums, you start with an initial positive value startValue.
  In each iteration, you calculate the step by step sum of startValue plus elements in nums (from left to right).
  Return the minimum positive value of startValue such that the step by step sum is never less than 1.

  Example 1:
  Input: nums = [-3,2,-3,4,2]
  Output: 5
  Explanation: If you choose startValue = 4, in the third iteration your step by step sum is less than 1.
                  step by step sum
                  startValue = 4 | startValue = 5 | nums
                    (4 -3 ) = 1  | (5 -3 ) = 2    |  -3
                    (1 +2 ) = 3  | (2 +2 ) = 4    |   2
                    (3 -3 ) = 0  | (4 -3 ) = 1    |  -3
                    (0 +4 ) = 4  | (1 +4 ) = 5    |   4
                    (4 +2 ) = 6  | (5 +2 ) = 7    |   2

  Example 2:
  Input: nums = [1,2]
  Output: 1
  Explanation: Minimum start value should be positive. 

  Example 3:
  Input: nums = [1,-2,-3]
  Output: 5

  Constraints:

  1 <= nums.length <= 100
  -100 <= nums[i] <= 100
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def min_start_value (nums : List Int) : Int := sorry

  def running_sums (start : Int) (nums : List Int) : List Int :=
    match nums with
    | [] => [start]
    | x::xs => let rest := running_sums (start + x) xs
               start :: rest

vc-theorems: |-
  theorem min_start_single_element (x : Int) :
    let start := min_start_value [x]
    start ≥ 1 ∧ start + x ≥ 1 := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

  /--
  info: 5
  -/
  #guard_msgs in
  #eval min_start_value [-3, 2, -3, 4, 2]

  /--
  info: 1
  -/
  #guard_msgs in
  #eval min_start_value [1, 2]

  /--
  info: 5
  -/
  #guard_msgs in
  #eval min_start_value [1, -2, -3]

