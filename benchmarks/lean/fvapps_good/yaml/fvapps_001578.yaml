vc-description: |-
  /-
  A product-sum number is a natural number N which can be expressed as both the product and the sum of the same set of numbers.

  N = a1 × a2 × ... × ak = a1 + a2 + ... + ak

  For example, 6 = 1 × 2 × 3 = 1 + 2 + 3.

  For a given set of size, k, we shall call the smallest N with this property a minimal product-sum number. The minimal product-sum numbers for sets of size, k = 2, 3, 4, 5, and 6 are as follows.
  ```
  k=2: 4 = 2 × 2 = 2 + 2
  k=3: 6 = 1 × 2 × 3 = 1 + 2 + 3
  k=4: 8 = 1 × 1 × 2 × 4 = 1 + 1 + 2 + 4
  k=5: 8 = 1 × 1 × 2 × 2 × 2 = 1 + 1 + 2 + 2 + 2
  k=6: 12 = 1 × 1 × 1 × 1 × 2 × 6 = 1 + 1 + 1 + 1 + 2 + 6
  ```

  Hence for 2 ≤ k ≤ 6, the sum of all the minimal product-sum numbers is 4+6+8+12 = 30; note that 8 is only counted once in the sum.

  Your task is to write an algorithm to compute the sum of all minimal product-sum numbers where 2 ≤ k ≤ n.

  Courtesy of ProjectEuler.net
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def productsum (n: Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem productsum_basic_cases :
    productsum 2 = 4 ∧ productsum 3 = 10 ∧ productsum 4 = 18 :=
    sorry

  theorem productsum_positive (n: Nat) (h: n ≥ 2) :
    productsum n > 0 :=
    sorry

  theorem productsum_increases (n: Nat) (h: n ≥ 2) :
    productsum (n + 1) > productsum n :=
    sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

  /-
  info: 10
  -/
  #guard_msgs in
  #eval productsum 3

  /-
  info: 30
  -/
  #guard_msgs in
  #eval productsum 6

  /-
  info: 4
  -/
  #guard_msgs in
  #eval productsum 2

