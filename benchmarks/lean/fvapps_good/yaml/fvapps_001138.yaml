vc-description: |-
  /-
  Chef has N subordinates. In order to complete a very important order he will choose exactly K of them. He can't choose less than K since it will be not enough to complete the order in time. On the other hand if he chooses more than K subordinates he can't control them during the operation. Help him to find the number of ways he can choose the team to complete this very important order.

  -----Input-----
  The first line contains a single positive integer T <= 100, the number of test cases. T test cases follow. The only line of each test case contains two integers N and K, where 0 <= N, K < 2^64. It is guaranteed that the answer will be less than 2^64.

  -----Output-----
  For each test case, output a single line containing the number of ways to choose the required team.

  -----Example-----
  Input:
  3
  2 1
  3 3
  10 5

  Output:
  2
  1
  252
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def choose_team (n k : Nat) : Nat := sorry

  theorem non_negative (n k : Nat) : 0 ≤ choose_team n k := by sorry

vc-theorems: |-
  theorem k_greater_than_n (n k : Nat) : k > n → choose_team n k = 0 := by sorry

  theorem k_equals_0_or_n (n k : Nat) : n > 0 ∧ (k = 0 ∨ k = n) → choose_team n k = 1 := by sorry

  theorem symmetry (n k : Nat) : k ≤ n → choose_team n k = choose_team n (n-k) := by sorry

  theorem pascal_triangle (n k : Nat) : 
    n > 0 ∧ k > 0 ∧ k < n → 
    choose_team n k = choose_team (n-1) (k-1) + choose_team (n-1) k := by sorry

  theorem ones_property (n : Nat) : 
    n > 0 → choose_team n 0 = 1 ∧ choose_team n n = 1 := by sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

  /-
  info: 2
  -/
  #guard_msgs in
  #eval choose_team 2 1

  /-
  info: 1
  -/
  #guard_msgs in
  #eval choose_team 3 3

  /-
  info: 252
  -/
  #guard_msgs in
  #eval choose_team 10 5

