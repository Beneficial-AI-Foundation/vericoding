vc-description: |-
  /-
  Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.

  Example 1:

  Input: [1,3,4,2,2]
  Output: 2

  Example 2:

  Input: [3,1,3,4,2]
  Output: 3

  Note:

         You must not modify the array (assume the array is read only).
         You must use only constant, O(1) extra space.
         Your runtime complexity should be less than O(n2).
         There is only one duplicate number in the array, but it could be repeated more than once.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def findDuplicate (nums : List Nat) : Option Nat :=
    sorry

vc-theorems: |-
  theorem emptyListReturnNone :
    findDuplicate [] = none := by sorry

  theorem findsDuplicateInList1 :
    findDuplicate [1, 3, 4, 2, 2] = some 2 := by sorry

  theorem findsDuplicateInList2 :
    findDuplicate [3, 1, 3, 4, 2] = some 3 := by sorry

  theorem findsDuplicateInList3 :
    findDuplicate [2, 2, 2, 2, 2] = some 2 := by sorry

  theorem findsDuplicateInList4 :
    findDuplicate [1, 1] = some 1 := by sorry

  theorem minimalCaseFindsOne :
    findDuplicate [1, 1] = some 1 := by sorry

  theorem findsInLargerList :
    findDuplicate [1, 2, 3, 4, 5, 6, 7, 8, 9, 5] = some 5 := by sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

  /-
  info: 2
  -/
  #guard_msgs in
  #eval find_duplicate [1, 3, 4, 2, 2]

  /-
  info: 3
  -/
  #guard_msgs in
  #eval find_duplicate [3, 1, 3, 4, 2]

  /-
  info: 2
  -/
  #guard_msgs in
  #eval find_duplicate [2, 2, 2, 2, 2]

