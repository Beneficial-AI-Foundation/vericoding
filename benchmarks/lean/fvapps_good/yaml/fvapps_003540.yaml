vc-description: |-
  /-
  Define n!! as

  n!! = 1 \* 3 \* 5 \* ... \* n  if n is odd, 

  n!! = 2 \* 4 \* 6 \* ... \* n  if n is even. 

  Hence 8!! = 2 \* 4 \* 6 \* 8 = 384, there is no zero at the end. 
  30!! has 3 zeros at the end. 

  For a positive integer n, please count how many zeros are there at 
  the end of n!!. 

  Example: 

  count\_zeros\_n\_double\_fact(30) should return 3
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def count_zeros_n_double_fact (n : Int) : Nat := sorry

  theorem count_zeros_non_negative (n : Int) : 
    count_zeros_n_double_fact n ≥ 0 := sorry

vc-theorems: |-
  theorem odd_numbers_return_zero (n : Int) :
    n % 2 ≠ 0 → count_zeros_n_double_fact n = 0 := sorry

  theorem larger_n_has_more_zeros (n : Int) :
    n % 2 = 0 → n ≥ 10 → 
    count_zeros_n_double_fact (2 * n) ≥ count_zeros_n_double_fact n := sorry

  theorem small_numbers_have_zero_count (n : Int) :
    n ≤ 8 → count_zeros_n_double_fact n = 0 := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

  /--
  info: 0
  -/
  #guard_msgs in
  #eval count_zeros_n_double_fact 8

  /--
  info: 3
  -/
  #guard_msgs in
  #eval count_zeros_n_double_fact 30

  /--
  info: 62
  -/
  #guard_msgs in
  #eval count_zeros_n_double_fact 500

