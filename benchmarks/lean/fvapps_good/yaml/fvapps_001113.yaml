vc-description: |-
  /-
  There is a city with $N$ numbered $0 - N-1$ shops. A market is a place where we can reach from one shop to another using some road. There are $M$ roads in this city connecting each connecting any two shops. 
  Find the number of markets in the city.
  NOTE:  A market having only one shop is also a valid market.

  -----Input:-----
  - First line will contain $T$, number of testcases. Then the testcases follow. 
  - First line of Each Test Case is $N, M$, denoting the number of shops and the number of roads respectively.
  - Next M lines consist of two integers $A$ and $B$ denoting that there exists a road between Shop A and Shop B

  -----Output:-----
  For each testcase, output the number of markets.

  -----Constraints-----
  - $1 \leq T \leq 100$
  - $1 \leq N,M \leq 10^3$
  - $0 \leq A,B < N$

  -----Sample Input:-----
  1
  5 3
  0 1
  2 3
  3 4

  -----Sample Output:-----
  2
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def count_markets (n : Nat) (m : Nat) (edges : List (Nat × Nat)) : Nat :=
    sorry

vc-theorems: |-
  theorem count_markets_bounds (n : Nat) (m : Nat) (edges : List (Nat × Nat))
    (h1 : n > 0)
    (h2 : ∀ (e : Nat × Nat), e ∈ edges → e.1 < n ∧ e.2 < n)
    (h3 : ∀ (e : Nat × Nat), e ∈ edges → e.1 ≠ e.2) :
    1 ≤ count_markets n m edges ∧ count_markets n m edges ≤ n := sorry

  theorem empty_graph_markets (n : Nat) (h : n > 0) :
    count_markets n 0 [] = n := sorry

  theorem path_graph_one_market (n : Nat) (h : n > 0) :
    count_markets n (n-1) (List.range (n-1) |>.map (λ i => (i, i+1))) = 1 := sorry

  theorem isolated_vertices (n : Nat) (h : n > 0) :
    count_markets n 0 [] = n := sorry

  theorem cycle_one_market (n : Nat) (h : n ≥ 2) :
    count_markets n n (List.range n |>.map (λ i => (i, (i+1) % n))) = 1 := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

  /-
  info: 2
  -/
  #guard_msgs in
  #eval count_markets 5 3 [[0, 1], [2, 3], [3, 4]]

  /-
  info: 3
  -/
  #guard_msgs in
  #eval count_markets 3 0 []

  /-
  info: 1
  -/
  #guard_msgs in
  #eval count_markets 4 3 [[0, 1], [1, 2], [2, 3]]

