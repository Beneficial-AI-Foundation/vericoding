vc-description: |-
  /-
  Initially, there is a Robot at position (0, 0). Given a sequence of its moves, judge if this robot makes a circle, which means it moves back to the original place. 

  The move sequence is represented by a string. And each move is represent by a character. The valid robot moves are R (Right), L (Left), U (Up) and D (down). The output should be true or false representing whether the robot makes a circle.

  Example 1:

  Input: "UD"
  Output: true

  Example 2:

  Input: "LL"
  Output: false
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def judge_circle (s : String) : Bool :=
    sorry

vc-theorems: |-
  theorem judge_circle_duplicate (moves : String) :
    judge_circle (moves ++ moves) = judge_circle moves :=
  sorry

  theorem judge_circle_empty :
    judge_circle "" = true :=
  sorry

  theorem judge_circle_permutation (moves1 moves2 : String) :
    -- Assuming moves2 is a permutation of moves1
    judge_circle moves1 = judge_circle moves2 :=
  sorry

  theorem judge_circle_balanced (n : Nat) (s : String) :
    -- Assuming s consists of n U's, n D's, n L's, and n R's in some order
    (s.length = 4 * n) â†’ judge_circle s = true :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: True
  -/
  #guard_msgs in
  #eval judge_circle "UD"

  /-
  info: False
  -/
  #guard_msgs in
  #eval judge_circle "LL"

  /-
  info: True
  -/
  #guard_msgs in
  #eval judge_circle "URDL"

