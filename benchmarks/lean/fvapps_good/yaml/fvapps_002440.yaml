vc-description: |-
  /-
  =====Problem Statement=====
  You are given two sets, A and B.
  Your job is to find whether set A is a subset of set B.

  If set A is subset of set B, print True.
  If set A is not a subset of set B, print False.

  =====Input Format=====
  The first line will contain the number of test cases, T.
  The first line of each test case contains the number of elements in set A.
  The second line of each test case contains the space separated elements of set A.
  The third line of each test case contains the number of elements in set B.
  The fourth line of each test case contains the space separated elements of set B.

  =====Constraints=====
  0<T<21
  0<Number of elements in each set<1001

  =====Output Format=====
  Output True or False for each test case on separate lines.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def check_subset {α} [BEq α] (subset : List α) (fullset : List α) : Bool := sorry

  theorem proper_subset_property {α} [BEq α] (subset additional : List α) 
    (h1 : List.Nodup subset) (h2 : List.Nodup additional) :
    check_subset subset (subset ++ additional) = true := sorry

vc-theorems: |-
  theorem subset_reflexive {α} [BEq α] (set_a set_b : List α) 
    (h1 : List.Nodup set_a) (h2 : List.Nodup set_b) :
    check_subset set_a set_b = 
      (∀ x, x ∈ set_a → x ∈ set_b) := sorry

  theorem empty_set_is_subset {α} [BEq α] (set_b : List α) 
    (h : List.Nodup set_b) :
    check_subset [] set_b = true := sorry

  theorem set_is_subset_of_itself {α} [BEq α] (set_a : List α)
    (h : List.Nodup set_a) :
    check_subset set_a set_a = true := sorry

  theorem disjoint_sets_not_subset {α} [BEq α] (set_a set_b : List α)
    (h1 : List.Nodup set_a) (h2 : List.Nodup set_b)
    (h3 : ¬List.isEmpty set_a)
    (h4 : ∀ x, x ∈ set_a → x ∉ set_b) :
    check_subset set_a set_b = false := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: True
  -/
  #guard_msgs in
  #eval check_subset ["1", "2", "3", "5", "6"] ["9", "8", "5", "6", "3", "2", "1", "4", "7"]

  /-
  info: False
  -/
  #guard_msgs in
  #eval check_subset ["2"] ["3", "6", "5", "4", "1"]

  /-
  info: True
  -/
  #guard_msgs in
  #eval check_subset ["9", "8", "2"] ["1", "2", "3", "5", "6", "8", "9"]

