vc-description: |-
  /-
  Transpose means is to interchange rows and columns of a two-dimensional array matrix.

  [A^(T)]ij=[A]ji

  ie:
  Formally, the i th row, j th column element of AT is the j th row, i th column element of A:

  Example :

  ```
  [[1,2,3],[4,5,6]].transpose() //should return [[1,4],[2,5],[3,6]]
  ```

  Write a prototype transpose to array in JS or add a .transpose method in Ruby or create a transpose function in Python so that any matrix of order ixj 2-D array returns transposed Matrix of jxi .

  Link:  To understand array prototype
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def List.transpose {α : Type} : List (List α) → List (List α)
    | _ => sorry

vc-theorems: |-
  theorem empty_matrix_transpose {α : Type} :
    @List.transpose α [[]] = [[]] := by sorry

  theorem transpose_dimensions_correct {α : Type} (m : List (List α)) 
    (h1 : m.length > 0) (h2 : (m[0]!).length > 0) 
    (h3 : ∀ i < m.length, (m[i]!).length = (m[0]!).length) :
    let t := List.transpose m
    (t.length = (m[0]!).length) ∧ 
    (t[0]!.length = m.length) := by sorry

  theorem double_transpose_identity {α : Type} (m : List (List α))
    (h1 : m.length > 0) (h2 : (m[0]!).length > 0)
    (h3 : ∀ i < m.length, (m[i]!).length = (m[0]!).length) :
    List.transpose (List.transpose m) = m := by sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /--
  info: [[]]
  -/
  #guard_msgs in
  #eval transpose [[]]

  /--
  info: [[1]]
  -/
  #guard_msgs in
  #eval transpose [[1]]

  /--
  info: expected
  -/
  #guard_msgs in
  #eval transpose [[1, 2, 3], [4, 5, 6]]

