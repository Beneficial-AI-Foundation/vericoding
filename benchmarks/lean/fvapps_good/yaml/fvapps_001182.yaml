vc-description: |-
  /-
  Eugene loves sequences, especially arithmetic progressions. One day he was asked to solve a difficult problem.

  If a sequence of numbers A1, A2, ... , AN form an arithmetic progression A, he was asked to calculate sum of F(Ai), for L ≤ i ≤ R.
  F(X) is defined as:

  If X < 10 then F(X) = X.

  Else F(X) = F(sum_of_digits(X)).

  Example:
  F(1378) = 
  F(1+3+7+8) = 
  F(19) = 
  F(1 + 9) = 
  F(10) = 
  F(1+0) = 
  F(1) = 1

  -----Input-----
  - The first line of the input contains an integer T denoting the number of test cases.
  - Each test case is described in one line containing four integers: A1 denoting the first element of the arithmetic progression A, D denoting the common difference between successive members of A, and L and R as described in the problem statement.

  -----Output-----
  - For each test case, output a single line containing one integer denoting sum of F(Ai).

  -----Constraints-----
  - 1 ≤ T ≤ 105
  - 1 ≤ A1 ≤ 109
  - 0 ≤ D ≤ 109
  - 1 ≤ R ≤ 1018
  - 1 ≤ L ≤ R

  -----Subtasks-----
  - Subtask 1:  0 ≤ D ≤ 100, 1 ≤ A1 ≤ 109, 1 ≤ R ≤ 100  - 15 points
  - Subtask 2:  0 ≤ D ≤ 109, 1 ≤ A1 ≤ 109, 1 ≤ R ≤ 106  - 25 points
  - Subtask 3: Original constraints - 60 points

  -----Example-----
  Input:
  2
  1 1 1 3
  14 7 2 4

  Output:
  6
  12

  -----Explanation-----
  Example case 1.
  A = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, ...}
  A1 = 1
  A2 = 2
  A3 = 3
  F(A1) = 1
  F(A2) = 2
  F(A3) = 3
  1+2+3=6
  Example case 2.
  A = {14, 21, 28, 35, 42, 49, 56, 63, 70, 77,  ...}
  A2 = 21
  A3 = 28
  A4 = 35
  F(A2) = 3
  F(A3) = 1
  F(A4) = 8
  3+1+8=12
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def sum_digits_function (n : Nat) : Nat := sorry

  def solve_sequence_sum (first diff left right : Nat) : Nat := sorry

vc-theorems: |-
  theorem sum_digits_function_bounds (x : Nat) (h : x ≥ 1) :
    let result := sum_digits_function x
    1 ≤ result ∧ result ≤ 9 ∧ result = sum_digits_function result := sorry

  theorem sequence_sum_zero_diff (first length left : Nat) (h : length > 0) :
    let right := left + length - 1
    solve_sequence_sum first 0 left right = length * sum_digits_function first := sorry

  theorem sequence_sum_bounds (first diff left length : Nat) 
    (h1 : first > 0) (h2 : diff > 0) (h3 : left > 0) (h4 : length > 0) :
    let right := left + length - 1
    let result := solve_sequence_sum first diff left right
    length ≤ result ∧ result ≤ 9 * length := sorry

  theorem sequence_sum_single_element (first diff pos : Nat)
    (h1 : first > 0) (h2 : diff > 0) (h3 : pos > 0) :
    solve_sequence_sum first diff pos pos = 
      sum_digits_function (first + diff * (pos - 1)) := sorry

  theorem sequence_sum_order_invariant (first diff left delta : Nat)
    (h1 : first > 0) :
    let right := left + delta
    left = right → 
      solve_sequence_sum first diff left right = 
      solve_sequence_sum first diff right left := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible

  /--
  info: 6
  -/
  #guard_msgs in
  #eval solve_sequence_sum 1 1 1 3

  /--
  info: 12
  -/
  #guard_msgs in
  #eval solve_sequence_sum 14 7 2 4

  /--
  info: 10
  -/
  #guard_msgs in
  #eval solve_sequence_sum 1 0 1 10

