vc-description: |-
  /-
  Two tortoises named ***A*** and ***B*** must run a race. ***A*** starts with an average speed of ```720 feet per hour```.
  Young ***B*** knows she runs faster than ***A***, and furthermore has not finished her cabbage.

  When she starts, at last, she can see that ***A*** has a `70 feet lead` but ***B***'s speed is `850 feet per hour`.
  How long will it take ***B*** to catch ***A***?

  More generally:
  given two speeds `v1` (***A***'s speed, integer > 0) and `v2` (***B***'s speed, integer > 0) and a lead `g` (integer > 0)
  how long will it take ***B*** to catch ***A***? 

  The result will be an array ```[hour, min, sec]``` which is the time needed in hours, minutes and seconds (round down to the nearest second)
  or a string in some languages.

  If `v1 >= v2` then return `nil`, `nothing`, `null`, `None` or `{-1, -1, -1}` for C++, C, Go, Nim, `[]` for Kotlin or "-1 -1 -1".

  ## Examples:
  (form of the result depends on the language)
  ```
  race(720, 850, 70) => [0, 32, 18] or "0 32 18"
  race(80, 91, 37)   => [3, 21, 49] or "3 21 49"
  ```

  ** Note: 

  - See other examples in "Your test cases".

  - In Fortran - as in any other language - the returned string is not permitted to contain any redundant trailing whitespace: you can use dynamically allocated character strings.

  ** Hints for people who don't know how to convert to hours, minutes, seconds:

  - Tortoises don't care about fractions of seconds

  - Think of calculation by hand using only integers (in your code use or simulate integer division)

  - or Google: "convert decimal time to hours minutes seconds"
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def race (v1 v2 g : Nat) : Option (Nat × Nat × Nat) := sorry

  theorem race_slower_returns_none {v1 v2 g : Nat} :
    v2 ≤ v1 → race v1 v2 g = none := sorry

vc-theorems: |-
  theorem race_result_non_negative {v1 v2 g : Nat} 
    (h : v2 > v1) (result : Nat × Nat × Nat) :
    race v1 v2 g = some result →
    result.1 ≥ 0 ∧ result.2.1 ≥ 0 ∧ result.2.2 ≥ 0 := sorry

  theorem race_result_valid_minutes_seconds {v1 v2 g : Nat}
    (h : v2 > v1) (result : Nat × Nat × Nat) :
    race v1 v2 g = some result →
    result.2.1 < 60 ∧ result.2.2 < 60 := sorry

  theorem race_satisfies_distance_equation {v1 v2 g : Nat}
    (h : v2 > v1) (result : Nat × Nat × Nat) :
    race v1 v2 g = some result →
    (result.1 * 3600 + result.2.1 * 60 + result.2.2) * (v2 - v1) = g * 3600 := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: [0, 32, 18]
  -/
  #guard_msgs in
  #eval race 720 850 70

  /-
  info: [3, 21, 49]
  -/
  #guard_msgs in
  #eval race 80 91 37

  /-
  info: None
  -/
  #guard_msgs in
  #eval race 820 81 550

