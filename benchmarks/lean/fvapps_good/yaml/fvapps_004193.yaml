vc-description: |-
  /-
  # Task

  * **_Given_** *three integers* `a` ,`b` ,`c`, **_return_** *the **_largest number_** obtained after inserting the following operators and brackets*: `+`, `*`, `()`
  * In other words , **_try every combination of a,b,c with [*+()] , and return the Maximum Obtained_**
  ___
  # Consider an Example :

  **_With the numbers are 1, 2 and 3_** , *here are some ways of placing signs and brackets*:

  * `1 * (2 + 3) = 5`
  * `1 * 2 * 3 = 6`
  * `1 + 2 * 3 = 7`
  * `(1 + 2) * 3 = 9`

  So **_the maximum value_** that you can obtain is  **_9_**.

  ___
  # Notes 

  * **_The numbers_** *are always* **_positive_**. 
  * **_The numbers_** *are in the range* **_(1  ≤  a, b, c  ≤  10)_**.
  * *You can use the same operation* **_more than once_**.
  * **It's not necessary** *to place all the signs and brackets*.
  * **_Repetition_** *in numbers may occur* .
  * You **_cannot swap the operands_**. For instance, in the given example **_you cannot get expression_** `(1 + 3) * 2 = 8`.

  ___
  # Input >> Output Examples:

  ```
  expressionsMatter(1,2,3)  ==>  return 9
  ```
  ## **_Explanation_**:
  *After placing signs and brackets, the **_Maximum value_** obtained from the expression* `(1+2) * 3 = 9`.
  ___

  ```
  expressionsMatter(1,1,1)  ==>  return 3
  ```
  ## **_Explanation_**:
  *After placing signs, the **_Maximum value_** obtained from the expression is* `1 + 1 + 1 = 3`.
  ___

  ```
  expressionsMatter(9,1,1)  ==>  return 18
  ```
  ## **_Explanation_**:
  *After placing signs and brackets, the **_Maximum value_** obtained from the expression is* `9 * (1+1) = 18`.
  ___
  ___
  ___

  # [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)

  # [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)

  # [Bizarre Sorting-katas](https://www.codewars.com/collections/bizarre-sorting-katas)

  # [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)
  ___

  ## ALL translations are welcomed

  ## Enjoy Learning !!
  # Zizou
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def expression_matter (a b c : Nat) : Nat := sorry

  theorem result_greater_than_inputs (a b c : Nat) 
    (h₁ : 1 ≤ a ∧ a ≤ 10) 
    (h₂ : 1 ≤ b ∧ b ≤ 10)
    (h₃ : 1 ≤ c ∧ c ≤ 10) :
    expression_matter a b c ≥ max a (max b c) := sorry

vc-theorems: |-
  theorem result_greater_than_sum (a b c : Nat)
    (h₁ : 1 ≤ a ∧ a ≤ 10)
    (h₂ : 1 ≤ b ∧ b ≤ 10) 
    (h₃ : 1 ≤ c ∧ c ≤ 10) :
    expression_matter a b c ≥ a + b + c := sorry

  theorem result_greater_than_min_products (a b c : Nat)
    (h₁ : 1 ≤ a ∧ a ≤ 10)
    (h₂ : 1 ≤ b ∧ b ≤ 10)
    (h₃ : 1 ≤ c ∧ c ≤ 10) :
    expression_matter a b c ≥ min (a*b*c) (min ((a+b)*c) (a*(b+c))) := sorry

  theorem result_bounded_above (a b c : Nat)
    (h₁ : 1 ≤ a ∧ a ≤ 10)
    (h₂ : 1 ≤ b ∧ b ≤ 10)
    (h₃ : 1 ≤ c ∧ c ≤ 10) :
    expression_matter a b c ≤ max (a*b*c) (max (a+b+c) (max ((a+b)*c) (a*(b+c)))) := sorry

  theorem result_equal_inputs (x : Nat)
    (h : 1 ≤ x ∧ x ≤ 10) :
    expression_matter x x x = max (x*x*x) (max (3*x) (2*x*x)) := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

  /-
  info: 9
  -/
  #guard_msgs in
  #eval expression_matter 1 2 3

  /-
  info: 3
  -/
  #guard_msgs in
  #eval expression_matter 1 1 1

  /-
  info: 18
  -/
  #guard_msgs in
  #eval expression_matter 9 1 1

