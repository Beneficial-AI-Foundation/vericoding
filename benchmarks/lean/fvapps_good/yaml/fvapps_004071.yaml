vc-description: |-
  /-
  Write
  ```python
  remove(text, what)
  ```
  that takes in a string ```str```(```text``` in Python) and an object/hash/dict/Dictionary ```what``` and returns a string with the chars removed in ```what```.
  For example:
  ```python
  remove('this is a string',{'t':1, 'i':2}) == 'hs s a string'
  # remove from 'this is a string' the first 1 't' and the first 2 i's.
  remove('hello world',{'x':5, 'i':2}) == 'hello world'
  # there are no x's or i's, so nothing gets removed
  remove('apples and bananas',{'a':50, 'n':1}) == 'pples d bnns'
  # we don't have 50 a's, so just remove it till we hit end of string.
  ```
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def String.count (s : String) (c : Char) : Nat := sorry

  def remove (text : String) (what : Char → Nat) : String := sorry

vc-theorems: |-
  theorem remove_length_le_input (text : String) (what : Char → Nat) :
    (remove text what).length ≤ text.length := sorry

  theorem remove_preserves_nonremoved_chars (text : String) (what : Char → Nat) (c : Char) :
    what c = 0 → (remove text what).count c = text.count c := sorry

  theorem remove_chars_count (text : String) (what : Char → Nat) (c : Char) :
    (remove text what).count c = max 0 (text.count c - what c) := sorry

  theorem remove_empty_unchanged (text : String) :
    remove text (fun _ => 0) = text := sorry

  theorem remove_repeated_char (n : Nat) (what : Char → Nat) :
    remove (String.mk (List.replicate n 'a')) what = 
      String.mk (List.replicate (max 0 (n - what 'a')) 'a') := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /--
  info: 'hs s a string'
  -/
  #guard_msgs in
  #eval remove "this is a string" {"t": 1, "i": 2}

  /--
  info: 'hello world'
  -/
  #guard_msgs in
  #eval remove "hello world" {"x": 5, "i": 2}

  /--
  info: 'pples d bnns'
  -/
  #guard_msgs in
  #eval remove "apples and bananas" {"a": 50, "n": 1}

