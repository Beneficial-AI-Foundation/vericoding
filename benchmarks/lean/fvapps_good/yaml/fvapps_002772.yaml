vc-description: |-
  /-
  In this simple exercise, you will build a program that takes a value, `integer `, and returns a list of its multiples up to another value, `limit `. If `limit` is a multiple of ```integer```, it should be included as well. There will only ever be positive integers passed into the function, not consisting of 0. The limit will always be higher than the base.

  For example, if the parameters passed are `(2, 6)`, the function should return `[2, 4, 6]` as 2, 4, and 6 are the multiples of 2 up to 6.

  If you can, try writing it in only one line of code.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def find_multiples (n : Nat) (limit : Nat) : List Nat :=
  sorry

vc-theorems: |-
  theorem find_multiples_empty_when_limit_less {n : Nat} {limit : Nat} 
    (h : limit < n) : find_multiples n limit = [] :=
  sorry

  theorem find_multiples_all_divisible {n : Nat} {limit : Nat} {x : Nat}
    (h : x ∈ find_multiples n limit) : 
    x % n = 0 :=
  sorry

  theorem find_multiples_all_within_limit {n : Nat} {limit : Nat} {x : Nat}
    (h : x ∈ find_multiples n limit) :
    x ≤ limit :=
  sorry

  theorem find_multiples_ordered {n : Nat} {limit : Nat} {i j : Nat}
    (hi : i < (find_multiples n limit).length)
    (hj : j < (find_multiples n limit).length)
    (h : i < j) :
    (find_multiples n limit)[i] < (find_multiples n limit)[j] :=
  sorry

  theorem find_multiples_first_element {n : Nat} {limit : Nat}
    (h : limit ≥ n) :
    (find_multiples n limit).head? = some n :=
  sorry

  theorem find_multiples_consecutive_diff {n : Nat} {limit : Nat} {i : Nat}
    (h : i + 1 < (find_multiples n limit).length) :
    (find_multiples n limit)[i+1] - (find_multiples n limit)[i] = n :=
  sorry

  theorem find_multiples_same_limit {n : Nat} :
    find_multiples n n = [n] :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

  /-
  info: [5, 10, 15, 20, 25]
  -/
  #guard_msgs in
  #eval find_multiples 5 25

  /-
  info: [1, 2]
  -/
  #guard_msgs in
  #eval find_multiples 1 2

  /-
  info: [4, 8, 12, 16, 20, 24]
  -/
  #guard_msgs in
  #eval find_multiples 4 27

