vc-description: |-
  /-
  Given an array (or list or vector) of arrays (or, guess what, lists or vectors) of integers, your goal is to return the sum of a specific set of numbers, starting with elements whose position is equal to the main array length and going down by one at each step.

  Say for example the parent array (etc, etc) has 3 sub-arrays inside: you should consider the third  element of the first sub-array, the second of the second array and the first element in the third one: `[[3, 2, 1, 0], [4, 6, 5, 3, 2], [9, 8, 7, 4]]` would have you considering `1` for `[3, 2, 1, 0]`, `6` for `[4, 6, 5, 3, 2]` and `9` for `[9, 8, 7, 4]`, which sums up to `16`.

  One small note is that not always each sub-array will have enough elements, in which case you should then use a default value (if provided) or `0` (if not provided), as shown in the test cases.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def elements_sum (arr : List (List Int)) (default : Int := 0) : Int := sorry

  theorem elements_sum_with_default 
    (arr : List (List Int)) (default : Int) :
    elements_sum arr default = 
    let reversed := arr.reverse
    (List.range reversed.length).foldl
      (fun sum i => sum + 
        match reversed.get? i with
        | some row => match row.get? i with
                     | some x => x
                     | none => default
        | none => default) 0
    := sorry

vc-theorems: |-
  theorem elements_sum_type (arr : List (List Int)) :
    ∃ (n : Int), elements_sum arr = n := sorry

  theorem elements_sum_nonempty
    (arr : List (List Int))
    (h : ∀ l ∈ arr, l.length > 0) :
    elements_sum arr = 
    let reversed := arr.reverse
    (List.range reversed.length).foldl
      (fun sum i => sum + 
        match reversed.get? i with
        | some row => match row.get? i with
                     | some x => x
                     | none => 0
        | none => 0) 0
    := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

  /--
  info: 16
  -/
  #guard_msgs in
  #eval elements_sum [[3, 2, 1, 0], [4, 6, 5, 3, 2], [9, 8, 7, 4]]

  /--
  info: 15
  -/
  #guard_msgs in
  #eval elements_sum [[3], [4, 6, 5, 3, 2], [9, 8, 7, 4]]

  /--
  info: 7
  -/
  #guard_msgs in
  #eval elements_sum [[3, 2, 1, 0], [4, 6, 5, 3, 2], []]

