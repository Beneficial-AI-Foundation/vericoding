vc-description: |-
  /-
  Create a function that transforms any positive number to a string representing the number in words.  The function should work for all numbers between 0 and 999999.
  
  ### Examples
  
  ```
  number2words(0)  ==>  "zero"
  number2words(1)  ==>  "one"
  number2words(9)  ==>  "nine"
  number2words(10)  ==>  "ten"
  number2words(17)  ==>  "seventeen"
  number2words(20)  ==>  "twenty"
  number2words(21)  ==>  "twenty-one"
  number2words(45)  ==>  "forty-five"
  number2words(80)  ==>  "eighty"
  number2words(99)  ==>  "ninety-nine"
  number2words(100)  ==>  "one hundred"
  number2words(301)  ==>  "three hundred one"
  number2words(799)  ==>  "seven hundred ninety-nine"
  number2words(800)  ==>  "eight hundred"
  number2words(950)  ==>  "nine hundred fifty"
  number2words(1000)  ==>  "one thousand"
  number2words(1002)  ==>  "one thousand two"
  number2words(3051)  ==>  "three thousand fifty-one"
  number2words(7200)  ==>  "seven thousand two hundred"
  number2words(7219)  ==>  "seven thousand two hundred nineteen"
  number2words(8330)  ==>  "eight thousand three hundred thirty"
  number2words(99999)  ==>  "ninety-nine thousand nine hundred ninety-nine"
  number2words(888888)  ==>  "eight hundred eighty-eight thousand eight hundred eighty-eight"
  ```
  -/

vc-preamble: |-
  def countChar (s : String) (c : Char) : Nat := 
    s.data.filter (·= c) |>.length

vc-helpers: |-

vc-definitions: |-
  def isSubstring (pattern : String) (s : String) : Bool := sorry
  
  def number2words (n : Nat) : String := sorry
  
  -- All outputs are strings containing only letters, spaces, and hyphens

vc-theorems: |-
  theorem number2words_valid_chars (n : Nat) (h : n ≤ 999999) :
    ∃ s, number2words n = s ∧ 
    (∀ c ∈ s.data, c.isAlpha ∨ c = ' ' ∨ c = '-') := sorry
  
  -- Numbers 0-19 are written as single words without spaces or hyphens 
  
  theorem small_numbers_single_word (n : Nat) (h : n ≤ 19) :
    ∀ c ∈ (number2words n).data, c.isAlpha := sorry
  
  -- Numbers 20-99: if multiple of 10 then no hyphen, else exactly one hyphen
  
  theorem two_digit_numbers (n : Nat) (h1 : 20 ≤ n) (h2 : n ≤ 99) :
    if n % 10 = 0 
    then ∀ c ∈ (number2words n).data, c ≠ '-'
    else countChar (number2words n) '-' = 1 := sorry
  
  -- Numbers 100-999 contain "hundred" and have one space if multiple of 100
  
  theorem hundreds (n : Nat) (h1 : 100 ≤ n) (h2 : n ≤ 999) :
    isSubstring "hundred" (number2words n) ∧
    (if n % 100 = 0 
     then countChar (number2words n) ' ' = 1
     else True) := sorry
  
  -- Numbers 1000-999999 contain exactly one "thousand"
  
  theorem thousands (n : Nat) (h1 : 1000 ≤ n) (h2 : n ≤ 999999) :
    isSubstring "thousand" (number2words n) ∧
    countChar (number2words n) 't' = 1 := sorry
  
  -- Zero is written as "zero"
  
  theorem zero : number2words 0 = "zero" := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

