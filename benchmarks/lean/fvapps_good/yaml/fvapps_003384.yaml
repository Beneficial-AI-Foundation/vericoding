vc-description: |-
  /-
  Your car is old, it breaks easily. The shock absorbers are gone and you think it can handle about 15 more bumps before it dies totally.

  Unfortunately for you, your drive is very bumpy! Given a string showing either flat road ("\_") or bumps ("n"), work out if you make it home safely. 15 bumps or under, return "Woohoo!", over 15 bumps return "Car Dead".
  -/

vc-preamble: |-
  def countChar (s : String) (c : Char) : Nat := 
    (s.data.filter (· = c)).length

vc-helpers: |

vc-definitions: |-
  def bumps (road : String) : String :=
    sorry

vc-theorems: |-
  theorem bumps_returns_valid_output (road : String) :
    (bumps road = "Woohoo!" ∨ bumps road = "Car Dead") ∧
    (bumps road = "Woohoo!" ↔ countChar road 'n' ≤ 15) :=
  sorry

  theorem no_bumps_woohoo (road : String) :
    (∀ c ∈ road.toList, c = '_') →
    bumps road = "Woohoo!" :=
  sorry

  theorem too_many_bumps_dead (road : String) :
    (∀ c ∈ road.toList, c = 'n') →
    road.length ≥ 16 →
    bumps road = "Car Dead" :=
  sorry

  theorem empty_road_woohoo :
    bumps "" = "Woohoo!" :=
  sorry

  theorem edge_case_fifteen :
    let nStr15 := String.mk (List.replicate 15 'n')
    let nStr16 := String.mk (List.replicate 16 'n')
    bumps nStr15 = "Woohoo!" ∧
    bumps nStr16 = "Car Dead" :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: 'Woohoo!'
  -/
  #guard_msgs in
  #eval bumps "n"

  /-
  info: 'Car Dead'
  -/
  #guard_msgs in
  #eval bumps "_nnnnnnn_n__n______nn__nn_nnn"

  /-
  info: 'Woohoo!'
  -/
  #guard_msgs in
  #eval bumps "______n___n_"

