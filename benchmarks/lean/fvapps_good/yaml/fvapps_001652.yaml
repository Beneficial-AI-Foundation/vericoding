vc-description: |-
  /-
  Write a function that, given a string of text (possibly with punctuation and line-breaks),
  returns an array of the top-3 most occurring words, in descending order of the number of occurrences.

  Assumptions:
  ------------

  - A word is a string of letters (A to Z) optionally containing one or more apostrophes (') in ASCII. (No need to handle fancy punctuation.)
  - Matches should be case-insensitive, and the words in the result should be lowercased.
  - Ties may be broken arbitrarily.
  - If a text contains fewer than three unique words, then either the top-2 or top-1 words should be returned, or an empty array if a text contains no words.

  Examples:
  ------------

  ```
  top_3_words("In a village of La Mancha, the name of which I have no desire to call to
  mind, there lived not long since one of those gentlemen that keep a lance
  in the lance-rack, an old buckler, a lean hack, and a greyhound for
  coursing. An olla of rather more beef than mutton, a salad on most
  nights, scraps on Saturdays, lentils on Fridays, and a pigeon or so extra
  on Sundays, made away with three-quarters of his income.")
  # => ["a", "of", "on"]

  top_3_words("e e e e DDD ddd DdD: ddd ddd aa aA Aa, bb cc cC e e e")
  # => ["e", "ddd", "aa"]

  top_3_words("  //wont won't won't")
  # => ["won't", "wont"]
  ```

  ```if:java
  For java users, the calls will actually be in the form: `TopWords.top3(String s)`, expecting you to return a `List`.
  ```

  Bonus points (not really, but just for fun):
  ------------

  1. Avoid creating an array whose memory footprint is roughly as big as the input text.
  2. Avoid sorting the entire array of unique words.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def top_3_words (s : String) : List String := sorry 

  theorem empty_string_returns_empty_list :
    top_3_words "" = [] := sorry

vc-theorems: |-
  theorem space_returns_empty_list :
    top_3_words " " = [] := sorry

  theorem special_chars_return_empty_list (s : String) :
    (∀ c ∈ s.data, !c.isAlpha ∧ c ≠ '\'') → 
    top_3_words s = [] := sorry

  theorem simple_word_count :
    top_3_words "aaa bbb aaa ccc bbb aaa" = ["aaa", "bbb", "ccc"] := sorry

  theorem case_insensitive_count :
    top_3_words "AAA bbb AAA ccc BBB aaa" = ["aaa", "bbb", "ccc"] := sorry

  theorem valid_apostrophes :
    top_3_words "can't won't don't can't won't can't" = ["can't", "won't", "don't"] := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

  /-
  info: ['a', 'of', 'on']
  -/
  #guard_msgs in
  #eval top_3_words "In a village of La Mancha, the name of which I have no desire to call to \n            mind, there lived not long since one of those gentlemen that keep a lance\n            in the lance-rack, an old buckler, a lean hack, and a greyhound for\n            coursing. An olla of rather more beef than mutton, a salad on most\n            nights, scraps on Saturdays, lentils on Fridays, and a pigeon or so extra\n            on Sundays, made away with three-quarters of his income."

  /-
  info: ['e', 'ddd', 'aa']
  -/
  #guard_msgs in
  #eval top_3_words "e e e e DDD ddd DdD: ddd ddd aa aA Aa, bb cc cC e e e"

  /-
  info: ["won't", 'wont']
  -/
  #guard_msgs in
  #eval top_3_words "  //wont won"t won"t"

