vc-description: |-
  /-
  # Task
   Call two arms equally strong if the heaviest weights they each are able to lift are equal.
  
   Call two people equally strong if their strongest arms are equally strong (the strongest arm can be both the right and the left), and so are their weakest arms.
  
   Given your and your friend's arms' lifting capabilities find out if you two are equally strong.
  
  # Example
  
   For `yourLeft = 10, yourRight = 15, friendsLeft = 15 and friendsRight = 10`, the output should be `true`;
  
   For `yourLeft = 15, yourRight = 10, friendsLeft = 15 and friendsRight = 10`, the output should be `true`;
  
   For `yourLeft = 15, yourRight = 10, friendsLeft = 15 and friendsRight = 9,` the output should be `false`.
  
  # Input/Output
  
   - `[input]` integer `yourLeft`
  
      A non-negative integer representing the heaviest weight you can lift with your left arm.
  
   - `[input]` integer `yourRight`
  
      A non-negative integer representing the heaviest weight you can lift with your right arm.
  
   - `[input]` integer `friendsLeft`
  
      A non-negative integer representing the heaviest weight your friend can lift with his or her left arm.
  
   - `[input]` integer `friendsRight`
  
      A non-negative integer representing the heaviest weight your friend can lift with his or her right arm.
  
   - `[output]` a boolean value
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def are_equally_strong (your_left right friends_left friends_right : Int) : Bool := sorry
  
  -- Symmetry property

vc-theorems: |-
  theorem are_equally_strong_symmetric 
    (your_left your_right friends_left friends_right : Int) :
    are_equally_strong your_left your_right friends_left friends_right =
    are_equally_strong your_right your_left friends_left friends_right ∧
    are_equally_strong your_left your_right friends_right friends_left := sorry
  
  -- Reflexivity property 
  
  theorem are_equally_strong_reflexive (left right : Int) :
    are_equally_strong left right left right = true := sorry
  
  -- Transitivity property
  
  theorem are_equally_strong_transitive (a1 a2 b1 b2 : Int) :
    are_equally_strong a1 a2 b1 b2 → are_equally_strong b1 b2 b1 b2 →
    are_equally_strong a1 a2 b1 b2 := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

