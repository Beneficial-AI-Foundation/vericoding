vc-description: |-
  /-
  A `bouncy number` is a positive integer whose digits neither increase nor decrease. For example, 1235 is an increasing number, 5321 is a decreasing number, and 2351 is a bouncy number. By definition, all numbers under 100 are non-bouncy, and 101 is the first bouncy number.

  Determining if a number is bouncy is easy, but counting all bouncy numbers with N digits can be challenging for large values of N. To complete this kata, you must write a function that takes a number N and return the count of bouncy numbers with N digits. For example, a "4 digit" number includes zero-padded, smaller numbers, such as 0001, 0002, up to 9999.

  For clarification, the bouncy numbers between 100 and 125 are: 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, and 121.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def bouncyCount (m : Nat) : Nat := sorry

  theorem bouncy_count_non_negative (m : Nat) :
    bouncyCount m ≥ 0 := sorry

vc-theorems: |-
  theorem bouncy_count_upper_bound (m : Nat) (h : m ≤ 10) :
    bouncyCount m ≤ 10^m := sorry

  theorem bouncy_count_monotone (m : Nat) :
    bouncyCount m ≤ bouncyCount (m + 1) := sorry

  theorem bouncy_count_zero_small_inputs :
    ∀ m : Nat, m < 3 → bouncyCount m = 0 := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /--
  info: 0
  -/
  #guard_msgs in
  #eval bouncy_count 0

  /--
  info: 0
  -/
  #guard_msgs in
  #eval bouncy_count 1

  /--
  info: 0
  -/
  #guard_msgs in
  #eval bouncy_count 2

  /--
  info: 525
  -/
  #guard_msgs in
  #eval bouncy_count 3

