vc-description: |-
  /-
  Our Chef is doing what he is best at, COOKING A BARBECUE for his guests. He has invited all of us, and taking the help of his apprentice to smoke the barbecues. The chef has got BBQ sticks, each can take N fillings, and he presents N distinctly filled sticks in front his guests forming a N*N  matrix

  But here is the problem, he has got only two type of fillings, meat and capsicum, but still wants the N  sticks to look "presentable", he is very particular about it. As a solution he fills the main diagonal of the N*N  matrix with the same type of filling (either meat or capsicum) forming a "presentable" set

  The Chef's apprentice is a fool, so the Chef asks him to cook M distinctly filled sticks ,so that the Chef is sure that among M there exist N sticks forming a "presentable" set. Your job is to determine smallest possible value of M.

  -----Input-----
  T, the number of test cases, followed by T lines. 
  Each line containing the positive integer N >= 4

  -----Output-----
  T lines of output, each line contain the positive integer M

  -----Example-----
  Input:
  1
  4

  Output:
  5
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def solve_barbecue_sticks (n: Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem bbq_sticks_positive (n: Nat) (h: n ≥ 3): 
    solve_barbecue_sticks n > 0 :=
    sorry

  theorem bbq_sticks_odd (n: Nat) (h: n ≥ 3):
    solve_barbecue_sticks n % 2 = 1 :=
    sorry 

  theorem bbq_sticks_exponential_growth (n: Nat) (h: n ≥ 3):
    solve_barbecue_sticks n ≥ 2^(n-2) :=
    sorry

  theorem bbq_sticks_strictly_increasing {n: Nat} (h: n > 3):
    solve_barbecue_sticks n > solve_barbecue_sticks (n-1) :=
    sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible

  /-
  info: 5
  -/
  #guard_msgs in
  #eval solve_barbecue_sticks 4

  /-
  info: 9
  -/
  #guard_msgs in
  #eval solve_barbecue_sticks 5

  /-
  info: 17
  -/
  #guard_msgs in
  #eval solve_barbecue_sticks 6

