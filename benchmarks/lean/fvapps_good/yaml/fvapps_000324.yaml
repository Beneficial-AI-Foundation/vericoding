vc-description: |-
  /-
  Given an array of integers arr, you are initially positioned at the first index of the array.
  In one step you can jump from index i to index:

  i + 1 where: i + 1 < arr.length.
  i - 1 where: i - 1 >= 0.
  j where: arr[i] == arr[j] and i != j.

  Return the minimum number of steps to reach the last index of the array.
  Notice that you can not jump outside of the array at any time.

  Example 1:
  Input: arr = [100,-23,-23,404,100,23,23,23,3,404]
  Output: 3
  Explanation: You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array.

  Example 2:
  Input: arr = [7]
  Output: 0
  Explanation: Start index is the last index. You don't need to jump.

  Example 3:
  Input: arr = [7,6,9,6,9,6,9,7]
  Output: 1
  Explanation: You can jump directly from index 0 to index 7 which is last index of the array.

  Example 4:
  Input: arr = [6,1,9]
  Output: 2

  Example 5:
  Input: arr = [11,22,7,7,7,7,7,7,7,22,13]
  Output: 3

  Constraints:

  1 <= arr.length <= 5 * 10^4
  -10^8 <= arr[i] <= 10^8
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def min_jumps (arr : List Int) : Int := sorry

  theorem min_jumps_single_element (x : Int) :
    min_jumps [x] = 0 := sorry

vc-theorems: |-
  theorem min_jumps_non_negative (arr : List Int) : 
    min_jumps arr ≥ -1 := sorry

  theorem min_jumps_bound_by_length (arr : List Int) :
    min_jumps arr ≤ arr.length := sorry

  theorem min_jumps_all_same {arr : List Int} (h : arr.length > 1) 
    (h2 : ∀ x ∈ arr, x = arr.head!) :
    min_jumps arr = 1 := sorry

  theorem min_jumps_same_ends {arr : List Int} (h : arr.length > 1)
    (h2 : arr.head! = arr.getLast!) :
    min_jumps arr = 1 := sorry

  theorem min_jumps_identical_elements (n : Nat) (h : n ≥ 2) :
    min_jumps (List.replicate n 1) = 1 := sorry

  theorem min_jumps_adjacent_reachable {arr : List Int} (h : arr.length ≥ 2)
    (h2 : ∀ i, i < arr.length - 1 → arr[i]! = arr[i+1]!) :
    min_jumps arr ≤ arr.length - 1 := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

  /-
  info: 3
  -/
  #guard_msgs in
  #eval min_jumps [100, -23, -23, 404, 100, 23, 23, 23, 3, 404]

  /-
  info: 0
  -/
  #guard_msgs in
  #eval min_jumps [7]

  /-
  info: 1
  -/
  #guard_msgs in
  #eval min_jumps [7, 6, 9, 6, 9, 6, 9, 7]

