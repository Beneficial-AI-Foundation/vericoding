vc-description: |-
  /-
  Your task is to define a function that understands basic mathematical expressions and solves them.
  For example:

  ```python
  calculate("1 + 1")        # => 2
  calculate("18 + 4*6")     # => 42
  calculate("245 - 826")    # => -581
  calculate("09 + 000482")  # => 491
  calculate("8 / 4 + 6")    # => 8
  calculate("5 + 1 / 5")    # => 5.2
  calculate("1+2+3")        # => 6
  calculate("9 /3 + 12/ 6") # => 5
  ```
  Notes:

  - Input string will contain numbers (may be integers and floats) and arithmetic operations.
  - Input string may contain spaces, and all space characters should be ignored.
  - Operations that will be used: addition (+), subtraction (-), multiplication (*), and division (/)
  - Operations must be done in the order of operations: First multiplication and division, then addition and subtraction.
  - In this kata, input expression will not have negative numbers. (ex: "-4 + 5")
  - If output is an integer, return as integer. Else return as float.
  - If input string is empty, contains letters, has a wrong syntax, contains division by zero or is not a string, return False.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def calculate (s : String) : Option Float := sorry

  theorem invalid_input_returns_none {s : String} 
    (h : s.isEmpty ∨ ¬∀ c ∈ s.data, c ∈ ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '-', '*', '/', ' ']) :
    calculate s = none := sorry

vc-theorems: |-
  theorem valid_expr_returns_some {expr : String} 
    (h : ∃ n : Float, calculate expr = some n) :
    ∃ n : Float, calculate expr = some n := sorry

  theorem addition_commutative {a b : Nat} :
    calculate s!"{a}+{b}" = calculate s!"{b}+{a}" := sorry

  theorem addition_associative {a b c : Nat} :
    ∀ n1 n2 : Float,
    calculate s!"({a}+{b})+{c}" = some n1 →
    calculate s!"{a}+({b}+{c})" = some n2 →
    Float.abs (n1 - n2) < 0.0001 := sorry

  theorem division_by_nonzero {a : Nat} {b : Nat} (h : b > 0) :
    ∃ n : Float, calculate s!"{a}/{b}" = some n := sorry

  theorem division_by_zero {a : Nat} :
    calculate s!"{a}/0" = none := sorry

  theorem whitespace_invariant {expr : String} 
    (h : ∀ c ∈ expr.data, c ∈ ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '-', '*', '/', ' ']) :
    calculate (expr.replace " " "") = calculate expr := sorry

  theorem multiplication_by_one {x : Nat} :
    calculate s!"{x}*1" = some (x.toFloat) := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /--
  info: 2
  -/
  #guard_msgs in
  #eval calculate "1 + 1"

  /--
  info: 42
  -/
  #guard_msgs in
  #eval calculate "18 + 4*6"

  /--
  info: 5.2
  -/
  #guard_msgs in
  #eval calculate "5 + 1 / 5"

