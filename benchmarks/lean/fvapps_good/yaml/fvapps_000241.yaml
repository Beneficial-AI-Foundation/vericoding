vc-description: |-
  /-
  Given a list of positive integers, the adjacent integers will perform the float division. For example, [2,3,4] -> 2 / 3 / 4.
  
  However, you can add any number of parenthesis at any position to change the priority of operations. You should find out how to add parenthesis to get the maximum result, and return the corresponding expression in string format. Your expression should NOT contain redundant parenthesis.
  
  Example:
  
  Input: [1000,100,10,2]
  Output: "1000/(100/10/2)"
  Explanation:
  1000/(100/10/2) = 1000/((100/10)/2) = 200
  However, the bold parenthesis in "1000/((100/10)/2)" are redundant, since they don't influence the operation priority. So you should return "1000/(100/10/2)". 
  
  Other cases:
  1000/(100/10)/2 = 50
  1000/(100/(10/2)) = 50
  1000/100/10/2 = 0.5
  1000/100/(10/2) = 2
  
  Note:
  
  The length of the input array is [1, 10].
  Elements in the given array will be in range [2, 1000].
  There is only one optimal division for each test case.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def optimalDivision (nums: List Nat) : String := sorry
  
  theorem optimal_division_empty (nums: List Nat) :
    nums = [] → optimalDivision nums = "" := sorry

vc-theorems: |-
  theorem optimal_division_single (n: Nat) :
    optimalDivision [n] = toString n := sorry
  
  theorem optimal_division_two (n m: Nat) :
    optimalDivision [n, m] = toString n ++ "/" ++ toString m := sorry
  
  theorem division_format_parts (nums: List Nat) :
    nums.length ≥ 3 →
    let parts := (optimalDivision nums).splitOn "/"
    parts.length = nums.length ∧
    parts[0]! = toString nums[0]! ∧ 
    parts[1]!.startsWith "(" ∧
    parts[parts.length - 1]!.endsWith ")" := sorry
  
  theorem first_number_preserved (nums: List Nat) :
    nums ≠ [] →
    (optimalDivision nums).startsWith (toString nums[0]!) := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible

