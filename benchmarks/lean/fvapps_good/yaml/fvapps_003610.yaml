vc-description: |-
  /-
  You will be given an array which lists the current inventory of stock in your store and another array which lists the new inventory being delivered to your store today.

  Your task is to write a function that returns the updated list of your current inventory **in alphabetical order**.

  ## Example

  ```python
  cur_stock = [(25, 'HTC'), (1000, 'Nokia'), (50, 'Samsung'), (33, 'Sony'), (10, 'Apple')]
  new_stock = [(5, 'LG'), (10, 'Sony'), (4, 'Samsung'), (5, 'Apple')]

  update_inventory(cur_stock, new_stock)  ==>
  [(15, 'Apple'), (25, 'HTC'), (5, 'LG'), (1000, 'Nokia'), (54, 'Samsung'), (43, 'Sony')]
  ```

  ___

  *Kata inspired by the FreeCodeCamp's 'Inventory Update' algorithm.*
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def List.update_inventory (cur_stock: List (Nat × String)) (new_stock: List (Nat × String)) : List (Nat × String) := 
    sorry

vc-theorems: |-
  theorem update_inventory_sorted (cur_stock new_stock: List (Nat × String)) :
    let result := List.update_inventory cur_stock new_stock
    ∀ i j, i < j → j < result.length → (result.get ⟨i, by sorry⟩).2 ≤ (result.get ⟨j, by sorry⟩).2 := 
    sorry

  theorem update_inventory_unique_length (cur_stock new_stock: List (Nat × String)) :
    let result := List.update_inventory cur_stock new_stock
    let unique_items := (cur_stock ++ new_stock).map Prod.snd |>.eraseDups
    result.length = unique_items.length :=
    sorry

  theorem update_inventory_quantities (cur_stock new_stock: List (Nat × String)) (item : String) :
    let result := List.update_inventory cur_stock new_stock
    let expected_sum := (cur_stock ++ new_stock).filter (·.2 = item) |>.map Prod.fst |>.foldl (·+·) 0
    let actual_sum := result.filter (·.2 = item) |>.map Prod.fst |>.foldl (·+·) 0
    expected_sum = actual_sum :=
    sorry

  theorem update_inventory_empty :
    List.update_inventory [] [] = [] :=
    sorry

  theorem update_inventory_empty_plus_list (stock: List (Nat × String)) :
    List.update_inventory stock [] = List.update_inventory [] stock :=
    sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /--
  info: []
  -/
  #guard_msgs in
  #eval update_inventory [] []

  /--
  info: [(8, 'Apple')]
  -/
  #guard_msgs in
  #eval update_inventory [(5, "Apple")] [(3, "Apple")]

  /--
  info: [(25, 'HTC'), (5, 'LG'), (1000, 'Nokia'), (54, 'Samsung')]
  -/
  #guard_msgs in
  #eval update_inventory [(25, "HTC"), (1000, "Nokia"), (50, "Samsung")] [(5, "LG"), (4, "Samsung")]

