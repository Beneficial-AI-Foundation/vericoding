vc-description: |-
  /-
  Given N, count how many permutations of [1, 2, 3, ..., N] satisfy the following property.

  Let P1, P2, ..., PN denote the permutation. The property we want to satisfy is that there exists an i between 2 and n-1 (inclusive) such that

  - Pj > Pj + 1  ∀    i ≤ j ≤ N - 1.
  - Pj > Pj - 1  ∀    2 ≤ j ≤ i.

  -----Input-----
  First line contains T, the number of test cases. Each test case consists of N in one line.

  -----Output-----
  For each test case, output the answer modulo 109+7.

  -----Constraints-----
  - 1 ≤ T ≤ 100
  - 1 ≤ N ≤ 109

  -----Subtasks-----
  - Subtask #1(40 points): 1 ≤ N ≤ 1000
  - Subtask #2(60 points): original constraints

  -----Example-----
  Input:
  2
  2
  3

  Output:
  0
  2

  -----Explanation-----

  Test case 1:

  No permutation satisfies.

  Test case 2:

  Permutations [1, 3, 2] and [2, 3, 1] satisfy the property.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def MOD := 1000000007

  def count_special_permutations (n : Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem count_special_permutations_non_negative (n : Nat) (h : n > 0) : 
    count_special_permutations n ≥ 0 :=
    sorry

  theorem count_special_permutations_one_is_zero :
    count_special_permutations 1 = 0 :=
    sorry

  theorem count_special_permutations_two_is_zero :
    count_special_permutations 2 = 0 :=
    sorry

  theorem count_special_permutations_positive_for_n_gt_two (n : Nat) (h : n > 2) :
    count_special_permutations n > 0 :=
    sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible

  /-
  info: 0
  -/
  #guard_msgs in
  #eval count_special_permutations 2

  /-
  info: 2
  -/
  #guard_msgs in
  #eval count_special_permutations 3

  /-
  info: 6
  -/
  #guard_msgs in
  #eval count_special_permutations 4

