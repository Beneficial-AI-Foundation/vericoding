vc-description: |-
  /-
  It's Friday night, and Chuck is bored. He's already run 1,000 miles, stopping only to eat a family sized bag of Heatwave Doritos and a large fistful of M&Ms. He just can't stop thinking about kicking something! 

  There is only one thing for it, Chuck heads down to his local MMA gym and immediately challenges every fighter there to get in the cage and try and take him down... AT THE SAME TIME! 

  You are provided an array of strings that represent the cage and Chuck's opponents. Your task, in traditional Chuck style, is to take their heads off!! Throw punches, kicks, headbutts (or more likely - regex or iteration...) but whatever you do, remove their heads. Return the same array of strings, but with the heads ('O') removed and replaced with a space (' ').

  If the provided array is empty, or is an empty string, return 'Gym is empty'. If you are given an array of numbers, return 'This isn't the gym!!'.

  FIGHT!!

  *Original design of this kata was a much more beautiful thing - the test cases illustrate the idea, and the intended output. I am unable to make the actual output go over multiple lines so for now at least you will have to imagine the beauty!*
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def head_smash (arr : List String) : List String ⊕ String := sorry

  theorem head_smash_empty : 
    head_smash [] = Sum.inr "Gym is empty" := sorry

vc-theorems: |-
  theorem head_smash_nonempty_properties {arr : List String} (h : arr ≠ []) :
    match head_smash arr with
    | Sum.inl result => 
        -- Same length as input
        result.length = arr.length ∧  
        -- Each string in result has same length as corresponding input
        (∀ i, i < result.length → (result.get ⟨i, by sorry⟩).length = (arr.get ⟨i, by sorry⟩).length) ∧
        -- No O characters in result
        (∀ s ∈ result, ∀ c ∈ s.data, c ≠ 'O') ∧
        -- Only O characters were replaced with spaces
        (∀ i < result.length, ∀ j < (result.get ⟨i, by sorry⟩).length,
          (let orig := (arr.get ⟨i, by sorry⟩).data.get ⟨j, by sorry⟩;
           let transformed := (result.get ⟨i, by sorry⟩).data.get ⟨j, by sorry⟩;
           orig = transformed ∨ (orig = 'O' ∧ transformed = ' ')))
    | Sum.inr _ => False
    := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: expected1
  -/
  #guard_msgs in
  #eval head_smash ["*****************************************", "**  _O_   *   _O_   *   _O_   *   _O_  **", "** /(.)J  *  C(.)J  *  /(.)J  *  C(.)J **", "** _| |_  *  _| |_  *  _( )_  *  _( )_ *"]

  /-
  info: 'Gym is empty'
  -/
  #guard_msgs in
  #eval head_smash []

  /-
  info: "This isn't the gym!!"
  -/
  #guard_msgs in
  #eval head_smash 876

