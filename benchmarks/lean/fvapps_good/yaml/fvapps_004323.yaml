vc-description: |-
  /-
  Consider the string `"adfa"` and the following rules: 
  ```Pearl
  a) each character MUST be changed either to the one before or the one after in alphabet. 
  b) "a" can only be changed to "b" and "z" to "y". 
  ```
  From our string, we get:
  ```Pearl
  "adfa" -> ["begb","beeb","bcgb","bceb"]
  Another example: "bd" -> ["ae","ac","ce","cc"]
  --We see that in each example, one of the possibilities is a palindrome.
  ```
  I was working on the code for this but I couldn't quite figure it out. So far I have:

  ```python
  def solve(st):
      return [all(ord(x) - ord(y) in ["FIX"] for x, y in zip(st, st[::-1]))][0]
  ```
  I'm not sure what three numbers go into the array labelled `["FIX"]`. This is the only thing missing. 

  You will be given a lowercase string and your task is to return `True` if at least one of the possiblities is a palindrome or `False` otherwise. You can use your own code or fix mine. 

  More examples in test cases. Good luck!
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def get_options (c : Char) : List Char := sorry

  def solve (s : String) : Bool := sorry

vc-theorems: |-
  theorem get_options_a : 
    get_options 'a' = ['b'] := sorry

  theorem get_options_z : 
    get_options 'z' = ['y'] := sorry

  theorem get_options_middle (c : Char) (prev next : Char) :
    'a' < c → c < 'z' →
    get_options c = [prev, next] := sorry 

  theorem solve_symmetry (s : String) (s_rev : String) :
    s_rev = String.mk s.data.reverse →
    solve s = solve s_rev := sorry

  theorem solve_single_char (c : Char) : 
    'a' ≤ c → c ≤ 'z' →
    solve c.toString = true := sorry

  theorem solve_empty :
    solve "" = true := sorry

  theorem solve_edge_chars_az (s : String) :
    s.length ≥ 2 →
    s.data.get ⟨0, sorry⟩ = 'a' →
    s.data.get ⟨s.length - 1, sorry⟩ = 'z' →
    solve s = false := sorry

  theorem solve_edge_chars_za (s : String) :
    s.length ≥ 2 →
    s.data.get ⟨0, sorry⟩ = 'z' →
    s.data.get ⟨s.length - 1, sorry⟩ = 'a' →
    solve s = false := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: True
  -/
  #guard_msgs in
  #eval solve "adfa"

  /-
  info: True
  -/
  #guard_msgs in
  #eval solve "bd"

  /-
  info: False
  -/
  #guard_msgs in
  #eval solve "abzy"

