vc-description: |-
  /-
  Consider the range `0` to `10`. The primes in this range are: `2, 3, 5, 7`, and thus the prime pairs are: `(2,2), (2,3), (2,5), (2,7), (3,3), (3,5), (3,7),(5,5), (5,7), (7,7)`.

  Let's take one pair `(2,7)` as an example and get the product, then sum the digits of the result as follows:  `2 * 7 = 14`, and `1 + 4 = 5`. We see that `5` is a prime number. Similarly, for the pair `(7,7)`, we get: `7 * 7 = 49`, and `4 + 9 = 13`, which is a prime number. 

  You will be given a range and your task is to return the number of pairs that revert to prime as shown above. In the range `(0,10)`, there are only `4` prime pairs that end up being primes in a similar way: `(2,7), (3,7), (5,5), (7,7)`. Therefore, `solve(0,10) = 4)`

  Note that the upperbound of the range will not exceed `10000`. A range of `(0,10)` means that: `0 <= n < 10`.

  Good luck!

  If you like this Kata, please try 

  [Simple Prime Streaming](https://www.codewars.com/kata/5a908da30025e995880000e3)

  [Prime reduction](https://www.codewars.com/kata/59aa6567485a4d03ff0000ca)

  [Dominant primes](https://www.codewars.com/kata/59ce11ea9f0cbc8a390000ed)
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def isPrime (n : Int) : Bool := sorry

  def solve (a b : Int) : Int := sorry

vc-theorems: |-
  theorem prime_properties (n : Int) : 
    isPrime n → n > 1 ∧ 
    (n > 2 ∧ n % 2 = 0 → ¬isPrime n) ∧
    (n = 2 → isPrime n) ∧ 
    (n < 2 → ¬isPrime n) := sorry

  theorem solve_properties (a b : Int) :
    let b' := max a b
    solve a b' ≥ 0 ∧
    (b' ≤ a → solve a b' = 0) ∧
    (0 ≤ a ∧ a ≤ b' ∧ b' ≤ 2 → solve a b' = 0) ∧
    (a ≤ 2 ∧ 2 < b' ∧ b' ≤ 3 → solve a b' = 0) := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

  /-
  info: 14
  -/
  #guard_msgs in
  #eval solve 0 20

  /-
  info: 457
  -/
  #guard_msgs in
  #eval solve 2 200

  /-
  info: 25005
  -/
  #guard_msgs in
  #eval solve 2000 5000

