vc-description: |-
  /-
  My washing machine uses ```water``` amount of water to wash ```clothes``` amount of clothes. You are given a ```load``` amount of clothes to wash.  For each single item of load above the standard amount of clothes, the washing machine will use 10% more water (multiplicative) to clean.
  For example, if the amount of clothes is ```10```, the amount of water it requires is ```5``` and the load is  ```14```, then you need ```5 * 1.1 ^ (14 - 10)``` amount of water.

  Write a function ```howMuchWater``` (JS)/```how_much_water``` (Python) to work out how much water is needed if you have a ```clothes``` amount of clothes.  The function will accept 3 parameters - ```howMuchWater(water, load, clothes)``` / ```how_much_water(water, load, clothes)```

  My washing machine is an old model that can only handle double the amount of ```load```.  If the amount of ```clothes``` is more than 2 times the standard amount of ```load```, return ```'Too much clothes'```.  The washing machine also cannot handle any amount of clothes less than ```load```.  If that is the case, return ```'Not enough clothes'```.

  The answer should be rounded to the nearest 2 decimal places.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def how_much_water (water : Float) (clothes load : Nat) : Float ⊕ String := sorry

  def isGreaterThan (a b : Float ⊕ String) : Prop :=
    match a, b with
    | Sum.inl x, Sum.inl y => x > y
    | _, _ => False

vc-theorems: |-
  theorem water_calculation_properties
    (water : Float) (clothes load : Nat)
    (h1 : water > 0)
    (h2 : water ≤ 1000)
    (h3 : clothes > 0)
    (h4 : clothes ≤ 100)
    (h5 : load ≤ 200) :
    let result := how_much_water water clothes load
    (load > 2 * clothes → result = Sum.inr "Too much clothes") ∧
    (load < clothes → result = Sum.inr "Not enough clothes") ∧
    (clothes ≤ load ∧ load ≤ 2 * clothes →
      match result with
      | Sum.inl x => x ≥ 0 ∧ isGreaterThan (how_much_water (2 * water) clothes load) result
      | Sum.inr _ => False) := sorry

  theorem increasing_load_increases_water
    (water : Float) (clothes load : Nat)
    (h1 : water ≥ 0.1)
    (h2 : water ≤ 100)
    (h3 : clothes > 0)
    (h4 : clothes ≤ 20)
    (h5 : load = clothes)
    (h6 : load + 1 ≤ 2 * clothes) :
    isGreaterThan (how_much_water water clothes (load + 1)) (how_much_water water clothes load) := sorry

  theorem known_value_test :
    how_much_water 50 15 29 = Sum.inl 189.87 := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: 'Too much clothes'
  -/
  #guard_msgs in
  #eval how_much_water 10 10 21

  /-
  info: 'Not enough clothes'
  -/
  #guard_msgs in
  #eval how_much_water 10 10 2

  /-
  info: 189.87
  -/
  #guard_msgs in
  #eval how_much_water 50 15 29

