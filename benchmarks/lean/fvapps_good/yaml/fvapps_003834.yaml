vc-description: |-
  /-
  Given a string S.
  You have to return another string such that even-indexed and odd-indexed characters of S are grouped and groups are space-separated (see sample below)

  Note: 
  0 is considered to be an even index. 
  All input strings are valid with no spaces

  input:
  'CodeWars'

  output
  'CdWr oeas'

  S[0] = 'C'
  S[1] = 'o'
  S[2] = 'd'
  S[3] = 'e'
  S[4] = 'W'
  S[5] = 'a'
  S[6] = 'r'
  S[7] = 's'

  Even indices 0, 2, 4, 6, so we have 'CdWr' as the first group
  odd ones are 1, 3, 5, 7, so the second group is 'oeas'
  And the final string to return is 'Cdwr oeas'

  Enjoy.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def sort_my_string (s : String) : String := sorry

  theorem sort_my_string_preserves_length (s : String) (h : s.length > 0) :
    let result := sort_my_string s
    let result_no_spaces := result.replace " " ""
    result_no_spaces.length = s.length := sorry

vc-theorems: |-
  theorem sort_my_string_splits_even_indexed (s : String) (h : s.length > 0) :
    let result := sort_my_string s
    let parts := result.split (fun x => decide (x = ' '))
    parts.length > 0 → 
    (parts.get? 0).isSome := sorry

  theorem sort_my_string_splits_odd_indexed (s : String) (h : s.length > 1) :
    let result := sort_my_string s
    let parts := result.split (fun x => decide (x = ' '))
    parts.length > 1 → 
    (parts.get? 1).isSome := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /--
  info: 'CdWr oeas'
  -/
  #guard_msgs in
  #eval sort_my_string "CodeWars"

  /--
  info: 'ACE BDF'
  -/
  #guard_msgs in
  #eval sort_my_string "ABCDEF"

  /--
  info: 'Wleclgltihuebredrf ofsheesenasnegrof'
  -/
  #guard_msgs in
  #eval sort_my_string "Wolfeschlegelsteinhausenbergerdorff"

