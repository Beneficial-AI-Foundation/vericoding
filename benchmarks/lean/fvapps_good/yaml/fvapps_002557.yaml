vc-description: |-
  /-
  Remove the parentheses
  =
  In this kata you are given a string for example:

  ```python
  "example(unwanted thing)example"
  ```

  Your task is to remove everything inside the parentheses as well as the parentheses themselves.

  The example above would return:

  ```python
  "exampleexample"
  ```

  Other than parentheses only letters and spaces can occur in the string. Don't worry about other brackets like ```"[]"``` and ```"{}"``` as these will never appear.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def remove_parentheses (s : String) : String :=
    sorry

vc-theorems: |-
  theorem string_without_parens_unchanged (s : String)
    (h : ∀ c ∈ s.data, c ≠ '(' ∧ c ≠ ')') :
    remove_parentheses s = s :=
  sorry

  theorem nested_parens_give_empty_string (texts : List String)
    (h₁ : texts ≠ [])
    (h₂ : ∀ s ∈ texts, ∀ c ∈ s.data, c ≠ '(' ∧ c ≠ ')') :
    remove_parentheses (String.join (texts.map (fun s => "(" ++ s ++ ")"))) = "" :=
  sorry

  theorem balanced_parens_give_empty_string_1 :
    remove_parentheses "(())" = "" :=
  sorry

  theorem balanced_parens_give_empty_string_2 :
    remove_parentheses "((()))" = "" :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: 'exampleexample'
  -/
  #guard_msgs in
  #eval remove_parentheses "example(unwanted thing)example"

  /-
  info: 'a'
  -/
  #guard_msgs in
  #eval remove_parentheses "a(b(c))"

  /-
  info: '  '
  -/
  #guard_msgs in
  #eval remove_parentheses "(first group) (second group) (third group)"

