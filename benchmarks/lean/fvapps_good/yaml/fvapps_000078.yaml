vc-description: |-
  /-
  An agent called Cypher is decrypting a message, that contains a composite number $n$. All divisors of $n$, which are greater than $1$, are placed in a circle. Cypher can choose the initial order of numbers in the circle.

  In one move Cypher can choose two adjacent numbers in a circle and insert their least common multiple between them. He can do that move as many times as needed.

  A message is decrypted, if every two adjacent numbers are not coprime. Note that for such constraints it's always possible to decrypt the message.

  Find the minimal number of moves that Cypher should do to decrypt the message, and show the initial order of numbers in the circle for that.

  -----Input-----

  The first line contains an integer $t$ $(1 \le t \le 100)$ — the number of test cases. Next $t$ lines describe each test case.

  In a single line of each test case description, there is a single composite number $n$ $(4 \le n \le 10^9)$ — the number from the message.

  It's guaranteed that the total number of divisors of $n$ for all test cases does not exceed $2 \cdot 10^5$.

  -----Output-----

  For each test case in the first line output the initial order of divisors, which are greater than $1$, in the circle. In the second line output, the minimal number of moves needed to decrypt the message.

  If there are different possible orders with a correct answer, print any of them.

  -----Example-----
  Input
  3
  6
  4
  30

  Output
  2 3 6 
  1
  2 4 
  0
  2 30 6 3 15 5 10 
  0

  -----Note-----

  In the first test case $6$ has three divisors, which are greater than $1$: $2, 3, 6$. Regardless of the initial order, numbers $2$ and $3$ are adjacent, so it's needed to place their least common multiple between them. After that the circle becomes $2, 6, 3, 6$, and every two adjacent numbers are not coprime.

  In the second test case $4$ has two divisors greater than $1$: $2, 4$, and they are not coprime, so any initial order is correct, and it's not needed to place any least common multiples.

  In the third test case all divisors of $30$ greater than $1$ can be placed in some order so that there are no two adjacent numbers that are coprime.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def getPrimeFactors (n : Nat) : List Nat := sorry
  def solveCipher (n : Nat) : List Nat × Nat := sorry

vc-theorems: |-
  theorem result_factors_product_match {n : Nat} (h : n ≥ 4) (h₂ : n ≤ 10^4) 
    (h₃ : (getPrimeFactors n).length ≥ 3) :
    let result := (solveCipher n).fst
    (∀ x, x ∈ result → n % x = 0) ∧ 
    (∀ x y, x ∈ result → y ∈ result → x ≠ y) := sorry

  theorem prime_power_handling {n : Nat} (h : n ≥ 4) (h₂ : n ≤ 10^4)
    (h₃ : (getPrimeFactors n).length ≥ 3) :
    let result := solveCipher n
    let distinctFactors := List.eraseDups (getPrimeFactors n)
    (distinctFactors.length = 2 ∧ (getPrimeFactors n).length = 2) →
      result.snd = 1 ∧
      let pf := List.eraseDups (getPrimeFactors n)
      (∃ x y z, x ∈ result.fst ∧ y ∈ result.fst ∧ z ∈ result.fst ∧ 
        x = List.head! pf ∧ y = List.get! pf 1 ∧ z = (List.head! pf) * (List.get! pf 1)) ∧
    (¬(distinctFactors.length = 2 ∧ (getPrimeFactors n).length = 2)) →
      result.snd = 0 := sorry

  theorem contains_prime_factors {n : Nat} (h : n ≥ 4) (h₂ : n ≤ 10^4)
    (h₃ : (getPrimeFactors n).length ≥ 3) :
    let result := (solveCipher n).fst
    let primeFactors := List.eraseDups (getPrimeFactors n)
    ∀ p, p ∈ primeFactors → ∃ x, x ∈ result ∧ x % p = 0 := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

  /-
  info: 3
  -/
  #guard_msgs in
  #eval len ans[0]

  /-
  info: {2, 3, 6}
  -/
  #guard_msgs in
  #eval set ans[0]

  /-
  info: 2
  -/
  #guard_msgs in
  #eval len ans[0]

  /-
  info: {2, 4}
  -/
  #guard_msgs in
  #eval set ans[0]

  /-
  info: 7
  -/
  #guard_msgs in
  #eval len ans[0]

  /-
  info: {2, 3, 5, 6, 10, 15, 30}
  -/
  #guard_msgs in
  #eval set ans[0]

