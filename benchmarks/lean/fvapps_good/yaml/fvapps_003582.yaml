vc-description: |-
  /-
  Now we will confect a reagent. There are eight materials to choose from, numbered 1,2,..., 8 respectively.

  We know the rules of confect:
  ```
  material1 and material2 cannot be selected at the same time
  material3 and material4 cannot be selected at the same time
  material5 and material6 must be selected at the same time
  material7 or  material8 must be selected(at least one, or both)
  ```

  # Task

  You are given a integer array `formula`. Array contains only digits 1-8 that represents material 1-8. Your task is to determine if the formula is valid. Returns `true` if it's valid, `false` otherwise.

  # Example

  For `formula = [1,3,7]`, The output should be `true`.

  For `formula = [7,1,2,3]`, The output should be `false`.

  For `formula = [1,3,5,7]`, The output should be `false`.

  For `formula = [1,5,6,7,3]`, The output should be `true`.

  For `formula = [5,6,7]`, The output should be `true`.

  For `formula = [5,6,7,8]`, The output should be `true`.

  For `formula = [6,7,8]`, The output should be `false`.

  For `formula = [7,8]`, The output should be `true`.

  # Note

  - All inputs are valid. Array contains at least 1 digit. Each digit appears at most once. 

  - Happy Coding `^_^`
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def isValid (formula : List Nat) : Bool := sorry

  theorem valid_formula_characterization (formula : List Nat) :
    isValid formula = ¬(
      ((1 ∈ formula) ∧ (2 ∈ formula)) ∨
      ((3 ∈ formula) ∧ (4 ∈ formula)) ∨
      ((5 ∈ formula) ∧ (6 ∉ formula)) ∨
      ((6 ∈ formula) ∧ (5 ∉ formula)) ∨
      ((7 ∉ formula) ∧ (8 ∉ formula))
    ) := sorry

vc-theorems: |-
  theorem out_of_range_elements (formula : List Nat) :
    (∀ x ∈ formula, x < 1 ∨ x > 8) →
    isValid formula = isValid [] := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: True
  -/
  #guard_msgs in
  #eval isValid [1, 3, 7]

  /-
  info: False
  -/
  #guard_msgs in
  #eval isValid [7, 1, 2, 3]

  /-
  info: True
  -/
  #guard_msgs in
  #eval isValid [1, 5, 6, 7, 3]

