vc-description: |-
  /-
  In this Kata, we are going to see how a Hash (or Map or dict) can be used to keep track of characters in a string. 

  Consider two strings `"aabcdefg"` and `"fbd"`. How many characters do we have to remove from the first string to get the second string?  Although not the only way to solve this, we could create a Hash of counts for each string and see which character counts are different. That should get us close to the answer. I will leave the rest to you. 

  For this example, `solve("aabcdefg","fbd") = 5`. Also, `solve("xyz","yxxz") = 0`, because we cannot get second string from the first since the second string is longer.

  More examples in the test cases.

  Good luck!
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def solve (s1 s2 : String) : Nat :=
    sorry

vc-theorems: |-
  theorem nonmatching_returns_zero {s1 s2 : String} (h1 : s1.length > 0) (h2 : s2.length > 0) 
    (h3 : ∃ c ∈ s2.data, c ∉ s1.data) : solve s1 s2 = 0 :=
    sorry 

  theorem identical_strings_returns_zero {s : String} (h : s.length > 0) :
    solve s s = 0 :=
    sorry

  theorem result_is_nonnegative {s1 s2 : String} (h1 : s1.length > 0) (h2 : s2.length > 0) :
    solve s1 s2 ≥ 0 :=
    sorry

  theorem empty_second_string {s : String} (h : s.length > 0) :
    solve s "" = s.length :=
    sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

  /-
  info: 0
  -/
  #guard_msgs in
  #eval solve "xyz" "yxz"

  /-
  info: 2
  -/
  #guard_msgs in
  #eval solve "abcxyz" "ayxz"

  /-
  info: 5
  -/
  #guard_msgs in
  #eval solve "aabcdefg" "fbd"

