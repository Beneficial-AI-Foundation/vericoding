vc-description: |-
  /-
  There is an array with some numbers. All numbers are equal except for one. Try to find it!

  ```python
  find_uniq([ 1, 1, 1, 2, 1, 1 ]) == 2
  find_uniq([ 0, 0, 0.55, 0, 0 ]) == 0.55
  ```

  It’s guaranteed that array contains at least 3 numbers.

  The tests contain some very huge arrays, so think about performance.

  This is the first kata in series:

  1. Find the unique number (this kata)
  2. [Find the unique string](https://www.codewars.com/kata/585d8c8a28bc7403ea0000c3)
  3. [Find The Unique](https://www.codewars.com/kata/5862e0db4f7ab47bed0000e5)
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def find_uniq (arr : List Float) : Float := sorry

  theorem find_uniq_returns_unique (numbers : List Float) (unique_num : Float) (base_num : Float)
      (h1 : numbers.length ≥ 3)
      (h2 : base_num ≠ unique_num)
      (arr := List.replicate (numbers.length + 1) base_num)
      (h3 : ∀ (i : Fin arr.length), (
        if i.val = numbers.length/2 
        then arr.get i = unique_num
        else arr.get i = base_num)) :
      find_uniq arr = unique_num := sorry

vc-theorems: |-
  theorem find_uniq_basic (common unique : Float)
      (h : common ≠ unique) :
      find_uniq [common, common, unique, common, common] = unique := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: 2
  -/
  #guard_msgs in
  #eval find_uniq [1, 1, 1, 2, 1, 1]

  /-
  info: 0.55
  -/
  #guard_msgs in
  #eval find_uniq [0, 0, 0.55, 0, 0]

  /-
  info: 3
  -/
  #guard_msgs in
  #eval find_uniq [4, 4, 4, 3, 4, 4, 4, 4]

