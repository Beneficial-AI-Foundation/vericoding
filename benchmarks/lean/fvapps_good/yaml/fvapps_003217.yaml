vc-description: |-
  /-
  Find the longest substring in alphabetical order.

  Example: the longest alphabetical substring in `"asdfaaaabbbbcttavvfffffdf"` is `"aaaabbbbctt"`.

  There are tests with strings up to `10 000` characters long so your code will need to be efficient.

  The input will only consist of lowercase characters and will be at least one letter long.

  If there are multiple solutions, return the one that appears first.

  Good luck :)
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def longest (s : String) : String := sorry

  theorem longest_is_substring (s : String) :
    ∃ i j, s.extract i j = longest s := sorry

vc-theorems: |-
  theorem longest_is_ordered (s : String) :
    let result := longest s
    ∀ (i j : String.Pos), i < j → result.get i ≤ result.get j := sorry

  theorem longest_length_bounded (s : String) :
    (longest s).length ≤ s.length := sorry

  theorem nonempty_input_nonempty_output (s : String) (h : s.length > 0) :
    (longest s).length > 0 := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: 'as'
  -/
  #guard_msgs in
  #eval longest "asd"

  /-
  info: 'abcde'
  -/
  #guard_msgs in
  #eval longest "abcdeapbcdef"

  /-
  info: 'aaaabbbbctt'
  -/
  #guard_msgs in
  #eval longest "asdfaaaabbbbcttavvfffffdf"

