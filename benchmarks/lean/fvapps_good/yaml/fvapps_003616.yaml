vc-description: |-
  /-
  Cara is applying for several different jobs.
  The online application forms ask her to respond within a specific character count.
  Cara needs to check that her answers fit into the character limit.
  
  Annoyingly, some application forms count spaces as a character, and some don't.
  
  Your challenge: 
  
  Write Cara a function `charCheck()` with the arguments:
  
  - `"text"`: a string containing Cara's answer for the question
  - `"max"`: a number equal to the maximum number of characters allowed in the answer
  - `"spaces"`: a boolean which is `True` if spaces are included in the character count and `False` if they are not
  
  The function `charCheck()` should return an array: `[True, "Answer"]` , where `"Answer"` is equal to the original text, if Cara's answer is short enough.
  
  If her answer `"text"` is too long, return an array: `[False, "Answer"]`. 
  The second element should be the original `"text"` string truncated to the length of the limit.
  
  When the `"spaces"` argument is `False`, you should remove the spaces from the `"Answer"`.
  
  For example:
  
  - `charCheck("Cara Hertz", 10, True)` should return `[ True, "Cara Hertz" ]`
  - `charCheck("Cara Hertz", 9, False)` should return `[ True, "CaraHertz" ]`
  - `charCheck("Cara Hertz", 5, True)` should return `[ False, "Cara " ]`
  - `charCheck("Cara Hertz", 5, False)` should return `[ False, "CaraH" ]`
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def charCheck (text : String) (max_len : Nat) (spaces : Bool) : Bool × String := sorry
  
  theorem charCheck_return_type 
    (text : String) (max_len : Nat) (spaces : Bool) :
    let result := charCheck text max_len spaces
    result.1 = true ∨ result.1 = false ∧ result.2.length ≤ max_len := sorry

vc-theorems: |-
  theorem charCheck_with_spaces 
    (text : String) (max_len : Nat) :
    let result := charCheck text max_len true 
    result.2 = text.take max_len ∧ result.1 = (text.length ≤ max_len) := sorry
  
  theorem charCheck_without_spaces
    (text : String) (max_len : Nat) :
    let result := charCheck text max_len false
    let text_no_spaces := text.replace " " ""
    result.2 = text_no_spaces.take max_len ∧ 
    result.1 = (text_no_spaces.length ≤ max_len) := sorry
  
  theorem charCheck_empty_max
    (text : String) :
    let result := charCheck text 0 true
    result.1 = (text.length = 0) ∧
    result.2 = "" := sorry
  
  theorem charCheck_spaces_consistency
    (text : String) :
    let result_with_spaces := charCheck text text.length true
    let result_no_spaces := charCheck text text.length false
    result_with_spaces.2.replace " " "" = result_no_spaces.2 := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

