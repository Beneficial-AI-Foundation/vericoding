vc-description: |-
  /- 
  {
    "name": "numpy.put",
    "category": "Basic indexing",
    "description": "Replaces specified elements of an array with given values",
    "url": "https://numpy.org/doc/stable/reference/generated/numpy.put.html",
    "doc": "Replaces specified elements of an array with given values.\n\nThe indexing works on the flattened target array.\n\nParameters\n----------\na : ndarray\n    Target array.\nind : array_like\n    Target indices, interpreted as integers.\nv : array_like\n    Values to place in \`a\` at target indices.\nmode : {'raise', 'wrap', 'clip'}, optional\n    Specifies how out-of-bounds indices will behave.\n\nReturns\n-------\nNone",
  }
  -/
  
  /-  
  numpy.put: Replaces specified elements of an array with given values.
  
  The indexing works on the flattened target array. This operation mutates the input array
  in-place by placing values from `v` at the positions specified by `ind`.
  
  For simplicity, we ignore the `mode` parameter and assume all indices are valid.
  -/
  
  /-  
  Specification: numpy.put modifies specific elements of the input array.
  
  This theorem captures the core mathematical properties:
  1. Elements at specified indices are replaced with corresponding values from `v`
  2. All other elements remain unchanged
  3. The result vector has the same length as the input vector
  4. Index bounds are respected (enforced by precondition)
  
  Precondition: All indices in `ind` must be valid (less than array length)
  Postcondition: Elements at specified indices are replaced with corresponding values from `v`,
                while all other elements remain unchanged.
  
  This specification handles the case where indices may be duplicated - in such cases,
  the later occurrence in the index vector takes precedence.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def put {n m : Nat} (a : Vector Float n) (ind : Vector Nat m) (v : Vector Float m) 
      (h_valid : ∀ i : Fin m, ind.get i < n) : Id (Vector Float n) :=

vc-implementation: |-
  -- <vc-implementation>
    sorry
  -- </vc-implementation>

vc-condition: |-
  theorem put_spec {n m : Nat} (a : Vector Float n) (ind : Vector Nat m) (v : Vector Float m) 
      (h_valid : ∀ i : Fin m, ind.get i < n) :
      let result := put a ind v h_valid
      -- Main properties
      (-- Elements at specified indices are replaced with values from v
       ∀ i : Fin m, result.get ⟨ind.get i, h_valid i⟩ = v.get i) ∧
      (-- All other elements remain unchanged
       ∀ j : Fin n, (∀ i : Fin m, j.val ≠ ind.get i) → result.get j = a.get j) ∧
      -- Sanity checks
      (-- Vector length is preserved (n is the length for both vectors)
       True) ∧
      (-- If no indices are provided, the result equals the input
       m = 0 → result = a) ∧
      (-- If all indices are distinct and cover the entire array, 
       -- the result is the permutation of v according to ind
       (∀ i j : Fin m, i ≠ j → ind.get i ≠ ind.get j) → 
       (∀ k : Fin n, ∃ i : Fin m, ind.get i = k) → 
       (∀ k : Fin n, ∃ i : Fin m, ind.get i = k ∧ result.get k = v.get i)) := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-

