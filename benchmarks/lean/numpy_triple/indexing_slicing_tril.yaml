vc-description: |-
  /- 
  {
    "name": "numpy.tril",
    "category": "Diagonal operations",
    "description": "Lower triangle of an array",
    "url": "https://numpy.org/doc/stable/reference/generated/numpy.tril.html",
    "doc": "Lower triangle of an array.\n\nReturn a copy of an array with elements above the \`k\`-th diagonal zeroed. For arrays with \`\`ndim\`\` exceeding 2, \`tril\` will apply to the final two axes.\n\nParameters\n----------\nm : array_like, shape (..., M, N)\n    Input array.\nk : int, optional\n    Diagonal above which to zero elements. \`k = 0\` (the default) is the main diagonal, \`k < 0\` is below it and \`k > 0\` is above.\n\nReturns\n-------\ntril : ndarray, shape (..., M, N)\n    Lower triangle of \`m\`, of same shape and data-type as \`m\`.",
  }
  -/

  /-  numpy.tril: Lower triangle of an array.
      
      Return a copy of an array with elements above the k-th diagonal zeroed.
      For simplicity, this specification focuses on square matrices and k=0 (main diagonal).
      
      Given a flattened square matrix (stored in row-major order), returns a copy
      where elements above the main diagonal are set to zero.
      
      This captures the essential mathematical property of extracting the lower
      triangular part of a matrix.
  -/

  /-  Specification: tril returns the lower triangle of a matrix with elements above the main diagonal zeroed.
      
      Mathematical Properties:
      1. Shape Preservation: The output has the same shape as the input
      2. Lower Triangle Preservation: Elements at or below the main diagonal are unchanged
      3. Upper Triangle Zeroing: Elements above the main diagonal are set to zero
      4. Diagonal Definition: For a square matrix stored in row-major order,
         element at position (i,j) corresponds to index i*n + j in the flattened vector
      
      The main diagonal consists of elements where i = j.
      Lower triangle consists of elements where i ≥ j.
      Upper triangle consists of elements where i < j.
      
      This specification provides a foundation for formal verification of
      triangular matrix operations in numerical computing.
  -/

vc-preamble: |-
  import Std.Do.Triple
  import Std.Tactic.Do
  open Std.Do

vc-helpers: |-
  <vc-helpers>
  </vc-helpers>

vc-signature: |-
  def tril {n : Nat} (matrix : Vector Float (n * n)) : Id (Vector Float (n * n)) :=

vc-implementation: |-
  <vc-implementation>
    sorry
  </vc-implementation>

vc-condition: |-
  theorem tril_spec {n : Nat} (matrix : Vector Float (n * n)) :
      ⦃⌜True⌝⦄
      tril matrix
      ⦃⇓result => ⌜
        -- The result has the same shape as the input
        result.size = matrix.size ∧
        -- For the lower triangle (i ≥ j), elements are preserved
        (∀ i : Fin n, ∀ j : Fin n, i.val ≥ j.val → 
          ∃ (hi : i.val * n + j.val < n * n) (hj : i.val * n + j.val < n * n),
            result.get ⟨i.val * n + j.val, hi⟩ = matrix.get ⟨i.val * n + j.val, hj⟩) ∧
        -- For the upper triangle (i < j), elements are zero
        (∀ i : Fin n, ∀ j : Fin n, i.val < j.val → 
          ∃ (hi : i.val * n + j.val < n * n),
            result.get ⟨i.val * n + j.val, hi⟩ = 0)⌝⦄ := by

vc-proof: |-
  <vc-proof>
    sorry
  </vc-proof>

vc-postamble: |-
