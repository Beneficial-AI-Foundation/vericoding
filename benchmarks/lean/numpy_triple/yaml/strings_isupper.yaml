vc-description: |-
  /- 
  {
    "name": "numpy.strings.isupper",
    "category": "String information",
    "description": "Return true for each element if all cased characters in the string are uppercase and there is at least one character, false otherwise",
    "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.isupper.html",
    "doc": "Return true for each element if all cased characters in the string are uppercase and there is at least one character, false otherwise.\n\nParameters\n----------\na : array_like, with \`StringDType\`, \`bytes_\` or \`str_\` dtype\n\nReturns\n-------\nout : ndarray\n    Output array of bools",
  }
  -/
  
  /-  Checks if all cased characters in each string are uppercase and there is at least one character -/
  
  /-  Specification: isupper returns true for each element if all cased characters 
      in the string are uppercase and there is at least one character, false otherwise.
      Mathematical properties:
      1. Empty strings return false
      2. Strings with no cased characters return false  
      3. Strings with mixed case return false
      4. Strings with all cased characters uppercase return true -/

vc-preamble: |-
  import Std.Do.Triple
  import Std.Tactic.Do
  open Std.Do

vc-helpers: |-

vc-definitions: |-
  def isupper {n : Nat} (a : Vector String n) : Id (Vector Bool n) :=
    sorry

vc-theorems: |-
  theorem isupper_spec {n : Nat} (a : Vector String n) :
      ⦃⌜True⌝⦄
      isupper a
      ⦃⇓result => ⌜∀ i : Fin n, 
                     let s := a.get i
                     let chars := s.toList
                     result.get i = (chars.length > 0 ∧ 
                                    (∃ c ∈ chars, c.isAlpha) ∧
                                    (∀ c ∈ chars, c.isAlpha → c.isUpper))⌝⦄ := by
    sorry

vc-postamble: |-

