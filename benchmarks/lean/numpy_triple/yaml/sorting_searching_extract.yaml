vc-description: |-
  /- 
  {
    "name": "numpy.extract",
    "category": "Searching",
    "description": "Return the elements of an array that satisfy some condition",
    "url": "https://numpy.org/doc/stable/reference/generated/numpy.extract.html",
    "doc": "Return the elements of an array that satisfy some condition.\n\nThis is equivalent to \`\`np.compress(ravel(condition), ravel(arr))\`\`. If\n\`condition\` is boolean \`\`np.extract\`\` is equivalent to \`\`arr[condition]\`\`.\n\nNote that \`place\` does the exact opposite of \`extract\`.\n\nParameters\n----------\ncondition : array_like\n    An array whose nonzero or True entries indicate the elements of \`arr\`\n    to extract.\narr : array_like\n    Input array of the same size as \`condition\`.\n\nReturns\n-------\nextract : ndarray\n    Rank 1 array of values from \`arr\` where \`condition\` is True.\n\nSee Also\n--------\ntake, put, copyto, compress, place",
  }
  -/
  
  /-  Return the elements of an array that satisfy some condition.
      The result size is the number of True entries in the condition array. -/
  
  /-  Specification: extract returns elements from arr where condition is True.
      The result contains exactly those elements from arr at positions where condition is True,
      preserving their original order. The result size m equals the number of True values in condition. -/

vc-preamble: |-
  import Std.Do.Triple
  import Std.Tactic.Do
  open Std.Do

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def extract {n m : Nat} (condition : Vector Bool n) (arr : Vector Int n) : 
    Id (Vector Int m) :=

vc-implementation: |-
  -- <vc-implementation>
    sorry
  -- </vc-implementation>

vc-condition: |-
  theorem extract_spec {n m : Nat} (condition : Vector Bool n) (arr : Vector Int n) :
      ⦃⌜True⌝⦄
      extract condition arr
      ⦃⇓result => ⌜-- Each element in result comes from arr at a position where condition is true
        (∀ (k : Fin m), ∃ (i : Fin n), condition.get i = true ∧ result.get k = arr.get i) ∧
        -- The order is preserved: elements appear in the same relative order as in arr
        (∀ (k₁ k₂ : Fin m), k₁ < k₂ → 
          ∃ (i₁ i₂ : Fin n), condition.get i₁ = true ∧ condition.get i₂ = true ∧
          result.get k₁ = arr.get i₁ ∧ result.get k₂ = arr.get i₂ ∧ i₁ < i₂) ∧
        -- Every True position in condition contributes exactly one element to the result  
        (∀ (i : Fin n), condition.get i = true → 
          ∃ (k : Fin m), result.get k = arr.get i)⌝⦄ := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-

