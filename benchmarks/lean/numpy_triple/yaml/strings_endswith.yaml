vc-description: |-
  /- 
  {
    "name": "numpy.strings.endswith",
    "category": "String information",
    "description": "Returns a boolean array which is True where the string element in a ends with suffix, otherwise False",
    "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.endswith.html",
    "doc": "Returns a boolean array which is \`True\` where the string element in \`a\` ends with \`suffix\`, otherwise \`False\`.\n\nParameters\n----------\na : array_like, with \`StringDType\`, \`bytes_\` or \`str_\` dtype\nsuffix : array_like, with \`StringDType\`, \`bytes_\` or \`str_\` dtype\nstart, end : array_like, with any integer dtype, optional\n    With optional \`start\`, test beginning at that position. With optional \`end\`, stop comparing at that position.\n\nReturns\n-------\nout : ndarray\n    Output array of bools",
  }
  -/
  
  /-  Check if strings in array end with given suffixes -/
  
  /-  Specification: endswith returns boolean array indicating which strings end with corresponding suffixes -/

vc-preamble: |-
  import Std.Do.Triple
  import Std.Tactic.Do
  open Std.Do

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def endswith {n : Nat} (a : Vector String n) (suffix : Vector String n) : Id (Vector Bool n) :=
    sorry

vc-theorems: |-
  theorem endswith_spec {n : Nat} (a : Vector String n) (suffix : Vector String n) :
      ⦃⌜True⌝⦄
      endswith a suffix
      ⦃⇓r => ⌜∀ i : Fin n, 
        -- Main specification: result matches String.endsWith for each pair
        (r.get i = (a.get i).endsWith (suffix.get i)) ∧
        -- Mathematical property: if result is true, suffix appears at the end
        (r.get i = true → 
          (suffix.get i).length ≤ (a.get i).length ∧
          (a.get i).drop ((a.get i).length - (suffix.get i).length) = (suffix.get i)) ∧
        -- Mathematical property: if result is false, suffix does not appear at the end
        (r.get i = false → 
          (suffix.get i).length > (a.get i).length ∨
          (a.get i).drop ((a.get i).length - (suffix.get i).length) ≠ (suffix.get i))⌝⦄ := by
    sorry

vc-postamble: |-

