vc-description: |-
  /- 
  {
    "name": "numpy.savez",
    "category": "Binary file I/O",
    "description": "Save several arrays into a single file in uncompressed .npz format",
    "url": "https://numpy.org/doc/stable/reference/generated/numpy.savez.html",
    "doc": "Save several arrays into a single file in uncompressed \`\`.npz\`\` format.\n\n    Provide arrays as keyword arguments to store them under the\n    corresponding name in the output file: \`\`savez(fn, x=x, y=y)\`\`.\n\n    If arrays are specified as positional arguments, i.e., \`\`savez(fn,\n    x, y)\`\`, their names will be \`arr_0\`, \`arr_1\`, etc.\n\n    Parameters\n    ----------\n    file : file, str, or pathlib.Path\n        Either the filename (string) or an open file (file-like object)\n        where the data wil...",
  }
  -/
  
  /-  numpy.savez: Save several arrays into a single file in uncompressed .npz format.
  
      Saves multiple Vector arrays to a single .npz archive file. This operation
      serializes multiple arrays into a single compressed archive, where each array
      is stored as a separate .npy file within the archive.
      
      Key functionality:
      - Multiple arrays can be saved in a single operation
      - Each array is stored with an associated name within the archive
      - The resulting .npz file can be loaded later to recover the arrays
      - Arrays are stored in uncompressed .npy format within the archive
      
      The function takes a file path and multiple arrays to save. For simplicity,
      this specification focuses on saving exactly two arrays (commonly used case).
      
      Security considerations:
      - Pickle support is controlled by allow_pickle parameter
      - Invalid file paths or write permissions can cause failures
      - The archive format ensures data integrity through checksums
  -/
  
  /-  Specification: numpy.savez creates a .npz archive containing multiple arrays.
  
      This specification captures the essential properties of the savez operation:
      
      1. Data Persistence: Arrays are written to disk in a retrievable format
      2. Archive Structure: Multiple arrays are bundled into a single .npz file
      3. Data Integrity: Saved arrays can be loaded with identical values
      4. Name Association: Arrays are stored with identifiable names in the archive
      5. Format Compliance: Output follows .npz format specification
      
      Mathematical Properties:
      - Bijection: There exists a one-to-one correspondence between saved and loaded arrays
      - Preservation: All array values are preserved exactly in the archive
      - Atomicity: Either all arrays are saved successfully or none are saved
      - Idempotence: Saving the same arrays multiple times produces identical files
      
      Security Properties:
      - Pickle safety: Object arrays are only saved when explicitly allowed
      - File system safety: Operation respects file system permissions
      
      Precondition: File path is writable and arrays are valid
      Postcondition: Archive file exists and contains both arrays with recoverable data
  -/

vc-preamble: |-
  import Std.Do.Triple
  import Std.Tactic.Do
  open Std.Do

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def savez {n m : Nat} (file : String) (arr1 : Vector Float n) (arr2 : Vector Float m) 
      (allow_pickle : Bool := true) : Id Unit :=

vc-implementation: |-
  -- <vc-implementation>
    sorry
  -- </vc-implementation>

vc-condition: |-
  theorem savez_spec {n m : Nat} (file : String) (arr1 : Vector Float n) (arr2 : Vector Float m) 
      (allow_pickle : Bool := true) 
      (h_writable : True) (h_valid_path : True) :
      ⦃⌜True⌝⦄
      savez file arr1 arr2 allow_pickle
      ⦃⇓result => ⌜result = () ∧ 
                    (∃ (archive_exists : Bool), archive_exists = true) ∧
                    (∃ (recoverable_arr1 : Vector Float n), 
                      (∀ i : Fin n, recoverable_arr1.get i = arr1.get i)) ∧
                    (∃ (recoverable_arr2 : Vector Float m), 
                      (∀ i : Fin m, recoverable_arr2.get i = arr2.get i)) ∧
                    (∃ (file_size : Nat), file_size > 0)⌝⦄ := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-

