vc-description: |-
  /- 
  {
    "name": "numpy.modf",
    "description": "Return the fractional and integral parts of an array, element-wise",
    "url": "https://numpy.org/doc/stable/reference/generated/numpy.modf.html",
    "doc": "Return the fractional and integral parts of an array, element-wise.\n\nThe fractional and integral parts are negative if the given number is negative.",
  }
  -/
  
  /-  numpy.modf: Return the fractional and integral parts of an array, element-wise.
  
      Returns a tuple (fractional_parts, integral_parts) where both parts
      have the same sign as the input. The fractional and integral parts
      are negative if the given number is negative.
  -/
  
  /-  Specification: numpy.modf returns fractional and integral parts where:
      1. The fractional and integral parts sum to the original value
      2. The fractional part has absolute value less than 1
      3. Both parts have the same sign as the original number (or zero)
      4. The integral part is the truncated integer part
  
      Precondition: True (no special preconditions for modf)
      Postcondition: For all indices i, the fractional and integral parts satisfy mathematical properties
  -/

vc-preamble: |-
  import Std.Do.Triple
  import Std.Tactic.Do
  open Std.Do

vc-helpers: |-

vc-definitions: |-
  def numpy_modf {n : Nat} (x : Vector Float n) : Id (Vector Float n × Vector Float n) :=
    sorry

vc-theorems: |-
  theorem numpy_modf_spec {n : Nat} (x : Vector Float n) :
      ⦃⌜True⌝⦄
      numpy_modf x
      ⦃⇓result => ⌜∀ i : Fin n, 
        let frac := result.1.get i
        let int := result.2.get i
        let orig := x.get i
        -- Parts sum to original
        (frac + int = orig) ∧
        -- Fractional part has absolute value less than 1
        (Float.abs frac < 1) ∧
        -- Both parts have same sign as original (or are zero)
        ((orig ≥ 0 → frac ≥ 0 ∧ int ≥ 0) ∧ (orig < 0 → frac ≤ 0 ∧ int ≤ 0)) ∧
        -- Integral part is truncated towards zero (floor for positive, ceiling for negative)
        (orig ≥ 0 → int = Float.floor orig) ∧
        (orig < 0 → int = -Float.floor (-orig))⌝⦄ := by
    sorry

vc-postamble: |-

