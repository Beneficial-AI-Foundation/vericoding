vc-description: |-
  /- 
  {
    "name": "numpy.strings.istitle",
    "category": "String information",
    "description": "Returns true for each element if the element is a titlecased string and there is at least one character, false otherwise",
    "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.istitle.html",
    "doc": "Returns true for each element if the element is a titlecased string and there is at least one character, false otherwise.\n\nParameters\n----------\na : array_like, with \`StringDType\`, \`bytes_\` or \`str_\` dtype\n\nReturns\n-------\nout : ndarray\n    Output array of bools",
  }
  -/
  
  /-  numpy.strings.istitle: Returns true for each element if the element is a titlecased string and there is at least one character, false otherwise.
  
      A string is considered titlecased if:
      1. It contains at least one character
      2. Each word starts with an uppercase letter followed by lowercase letters
      3. Words are separated by non-alphabetic characters
      4. There is at least one cased character in the string
      
      Examples:
      - "Title Case" → True
      - "Numpy Is Great" → True  
      - "numpy is great" → False
      - "NUMPY IS GREAT" → False
      - "" → False
      - "123" → False
  -/
  
  /-  Specification: numpy.strings.istitle returns a vector where each element indicates
      whether the corresponding string element is titlecased.
      
      Mathematical properties:
      1. Empty strings return False
      2. Strings with no alphabetic characters return False
      3. Strings where every word starts with uppercase followed by lowercase return True
      4. Words are defined as sequences of alphabetic characters separated by non-alphabetic characters
      5. At least one cased character must be present
  -/

vc-preamble: |-
  import Std.Do.Triple
  import Std.Tactic.Do
  open Std.Do
  
  /-- Helper function to check if a string is titlecased according to Python's str.istitle() logic -/
  def isTitlecased (s : String) : Bool :=
    if s.isEmpty then false
    else
      let chars := s.toList
      let hasCasedChar := chars.any (fun c => c.isUpper || c.isLower)
      if ¬hasCasedChar then false
      else
        let rec checkTitleCase (cs : List Char) (expectUpper : Bool) : Bool :=
          match cs with
          | [] => true
          | c :: rest =>
            if c.isUpper then
              if expectUpper then checkTitleCase rest false
              else false
            else if c.isLower then
              if expectUpper then false
              else checkTitleCase rest false
            else
              checkTitleCase rest true
        checkTitleCase chars true

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def istitle {n : Nat} (a : Vector String n) : Id (Vector Bool n) :=

vc-implementation: |-
  -- <vc-implementation>
    sorry
  -- </vc-implementation>

vc-condition: |-
  theorem istitle_spec {n : Nat} (a : Vector String n) :
      ⦃⌜True⌝⦄
      istitle a
      ⦃⇓result => ⌜∀ i : Fin n, result.get i = isTitlecased (a.get i)⌝⦄ := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-

