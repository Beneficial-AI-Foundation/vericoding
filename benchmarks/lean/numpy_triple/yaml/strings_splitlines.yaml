vc-description: |-
  /- 
  {
    "name": "numpy.strings.splitlines",
    "category": "String operations",
    "description": "For each element in a, return a list of the lines in the element, breaking at line boundaries",
    "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.splitlines.html",
    "doc": "For each element in \`a\`, return a list of the lines in the element, breaking at line boundaries.\n\nLine breaks are not included in the resulting list unless keepends is given and true.\n\nParameters\n----------\na : array_like, with \`StringDType\`, \`bytes_\` or \`str_\` dtype\nkeepends : bool, optional\n    Line breaks are not included in the resulting list unless keepends is given and true.\n\nReturns\n-------\nout : ndarray\n    Output array of objects",
  }
  -/
  
  /-  For each element in a vector of strings, return a list of the lines in the element, breaking at line boundaries -/
  
  /-  Specification: splitlines returns a vector where each string is split into a list of lines
      based on line boundaries, with proper handling of keepends and line break characters -/

vc-preamble: |-
  import Std.Do.Triple
  import Std.Tactic.Do
  open Std.Do

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def splitlines {n : Nat} (a : Vector String n) (keepends : Bool) : Id (Vector (List String) n) :=
    sorry

vc-theorems: |-
  theorem splitlines_spec {n : Nat} (a : Vector String n) (keepends : Bool) :
      ⦃⌜True⌝⦄
      splitlines a keepends
      ⦃⇓result => ⌜
        ∀ i : Fin n, 
          let lines := result.get i
          let original := a.get i
          -- The result is always non-empty (at least contains one element)
          lines.length ≥ 1 ∧
          -- If original is empty, return empty string as single element
          (original.isEmpty → lines = [""]) ∧
          -- If original has no line breaks, return original as single element
          (¬original.contains '\n' ∧ ¬original.contains '\r' → lines = [original]) ∧
          -- If keepends is false, no line in result contains line break characters
          (¬keepends → ∀ line ∈ lines, ¬line.contains '\n' ∧ ¬line.contains '\r') ∧
          -- If keepends is false, no line endings in result
          (¬keepends → ∀ line ∈ lines, ¬line.endsWith "\n" ∧ ¬line.endsWith "\r" ∧ ¬line.endsWith "\r\n") ∧
          -- If keepends is true, only the last line may lack line ending
          (keepends → ∀ j : Fin lines.length, j.val < lines.length - 1 → 
            let line := lines.get j
            line.endsWith "\n" ∨ line.endsWith "\r" ∨ line.endsWith "\r\n") ∧
          -- Basic reconstruction property: joining with newlines gives back normalized original
          (¬keepends → String.intercalate "\n" lines = (original.replace "\r\n" "\n").replace "\r" "\n") ∧
          -- Line count property: lines should be related to line break count
          (¬original.contains '\n' ∧ ¬original.contains '\r' → lines.length = 1) ∧
          -- Empty string property
          (original = "" → lines = [""]) ∧
          -- Single newline property
          (original = "\n" → (if keepends then lines = ["\n"] else lines = ["", ""]))⌝⦄ := by
    sorry

vc-postamble: |-

