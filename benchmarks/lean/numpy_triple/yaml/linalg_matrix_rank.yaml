vc-description: |-
  /- 
  {
    "name": "numpy.linalg.matrix_rank",
    "category": "Norms and numbers",
    "description": "Return matrix rank of array using SVD method",
    "url": "https://numpy.org/doc/stable/reference/generated/numpy.linalg.matrix_rank.html",
    "doc": "Return matrix rank of array using SVD method.\n\nRank is the number of singular values greater than a threshold.\n\nParameters:\n- A: Input vector or matrix\n- tol: Threshold for 'small' singular values\n- hermitian: If True, A is assumed to be Hermitian\n\nReturns:\n- rank: Rank of matrix",
  }
  -/
  
  /-  numpy.linalg.matrix_rank: Return matrix rank of array using SVD method.
  
      The rank of a matrix is the number of linearly independent columns
      (or rows). For numerical computation, this is determined by counting
      the number of singular values greater than a threshold.
  
      This implementation focuses on the core mathematical behavior for
      square matrices, using default tolerance.
  -/
  
  /-  Specification: matrix_rank computes the rank of a matrix using SVD method.
  
      The rank is the number of singular values greater than a numerical threshold.
      This corresponds to the number of linearly independent columns (or rows).
  
      Mathematical definition:
      - For a matrix A, rank(A) = number of non-zero singular values
      - In numerical computation, "non-zero" means above a threshold
  
      Key properties verified:
      1. Bounds: 0 ≤ rank(A) ≤ min(m, n) for m×n matrix
      2. Zero matrix: rank(0) = 0 (all elements zero)
      3. Identity matrix: rank(I) = n for n×n identity matrix
      4. Rank deficiency: If a row/column is all zeros, rank < full rank
      5. Linear dependence: If rows/columns are linearly dependent, rank < full rank
  
      The threshold behavior ensures numerical stability but is not explicitly
      specified here for simplicity.
  -/

vc-preamble: |-
  import Std.Do.Triple
  import Std.Tactic.Do
  open Std.Do

vc-helpers: |-

vc-definitions: |-
  def matrix_rank {m n : Nat} (A : Vector (Vector Float n) m) : Id Nat :=
    sorry

vc-theorems: |-
  theorem matrix_rank_spec {m n : Nat} (A : Vector (Vector Float n) m) :
      ⦃⌜True⌝⦄
      matrix_rank A
      ⦃⇓result => ⌜
        -- Basic bounds: rank is bounded by matrix dimensions
        result ≤ min m n ∧
        -- Zero matrix has rank 0
        ((∀ i : Fin m, ∀ j : Fin n, (A.get i).get j = 0) → result = 0) ∧
        -- Identity matrix has full rank (for square matrices)
        ((m = n) → 
          (∀ i : Fin m, ∀ j : Fin n, (A.get i).get j = if i.val = j.val then 1 else 0) → 
          result = n) ∧
        -- If any row is all zeros, rank is less than m
        ((∃ i : Fin m, ∀ j : Fin n, (A.get i).get j = 0) → result < m) ∧
        -- If any column is all zeros, rank is less than n  
        ((∃ j : Fin n, ∀ i : Fin m, (A.get i).get j = 0) → result < n) ∧
        -- If two rows are identical, rank is less than m (when m > 1)
        ((m > 1) → 
          (∃ i₁ i₂ : Fin m, i₁ ≠ i₂ ∧ (∀ j : Fin n, (A.get i₁).get j = (A.get i₂).get j)) → 
          result < m) ∧
        -- If two columns are identical, rank is less than n (when n > 1)
        ((n > 1) → 
          (∃ j₁ j₂ : Fin n, j₁ ≠ j₂ ∧ (∀ i : Fin m, (A.get i).get j₁ = (A.get i).get j₂)) → 
          result < n) ∧
        -- For 1×1 matrices, rank is 1 if non-zero, 0 if zero
        ((m = 1 ∧ n = 1) → 
          ∃ h₁ : 0 < m, ∃ h₂ : 0 < n,
          (result = 1 ↔ (A.get ⟨0, h₁⟩).get ⟨0, h₂⟩ ≠ 0))
      ⌝⦄ := by
    sorry

vc-postamble: |-

