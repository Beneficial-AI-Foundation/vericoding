vc-description: |-
  /- 
  {
    "name": "numpy.cos",
    "description": "Cosine element-wise",
    "url": "https://numpy.org/doc/stable/reference/generated/numpy.cos.html",
    "doc": "Cosine element-wise.\n\nSignature: numpy.cos(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True)\n\nParameters:\n  x: array_like - Input array in radians\n  out: ndarray, optional - A location into which the result is stored\n\nReturns:\n  y: array_like - The corresponding cosine values",
  }
  -/
  
  /-  numpy.cos: Cosine element-wise.
  
      Computes the cosine of each element in the input array.
      The cosine is one of the fundamental functions of trigonometry.
      For a real number x interpreted as an angle in radians, cos(x)
      gives the x-coordinate of the point on the unit circle.
  
      Returns an array of the same shape as x, containing the cosine of each element.
  -/
  
  /-  Specification: numpy.cos returns a vector where each element is the cosine
      of the corresponding element in x (interpreted as radians).
  
      Precondition: True (no special preconditions for cosine)
      Postcondition: For all indices i, result[i] = Float.cos x[i]
                    and result[i] is bounded between -1 and 1
                    with cos(0) = 1
  -/

vc-preamble: |-
  import Std.Do.Triple
  import Std.Tactic.Do
  open Std.Do

vc-helpers: |-

vc-definitions: |-
  def numpy_cos {n : Nat} (x : Vector Float n) : Id (Vector Float n) :=
    sorry

vc-theorems: |-
  theorem numpy_cos_spec {n : Nat} (x : Vector Float n) :
      ⦃⌜True⌝⦄
      numpy_cos x
      ⦃⇓result => ⌜∀ i : Fin n, result.get i = Float.cos (x.get i) ∧
                    result.get i ≥ -1 ∧ result.get i ≤ 1 ∧
                    (x.get i = 0 → result.get i = 1)⌝⦄ := by
    sorry

vc-postamble: |-

