vc-description: |-
  /- 
  {
    "name": "numpy.fill_diagonal",
    "category": "Diagonal operations",
    "description": "Fill the main diagonal of the given array of any dimensionality",
    "url": "https://numpy.org/doc/stable/reference/generated/numpy.fill_diagonal.html",
    "doc": "Fill the main diagonal of the given array of any dimensionality.\n\nFor an array \`a\` with \`\`a.ndim >= 2\`\`, the diagonal is the list of locations with indices \`\`a[i, ..., i]\`\` all identical. This function modifies the input array in-place, it does not return a value.\n\nParameters\n----------\na : array, at least 2-D.\n    Array whose diagonal is to be filled, it gets modified in-place.\nval : scalar or array_like\n    Value(s) to write on the diagonal. If \`val\` is scalar, the value is written along the diagonal. If array-like, the flattened \`val\` is written along the diagonal, repeating if necessary to fill all diagonal entries.\nwrap : bool\n    For tall matrices in NumPy version up to 1.6.2, the diagonal \"wrapped\" after N columns. You can have this behavior with this option. This affects only tall matrices.",
  }
  -/
  
  /-  Fill the main diagonal of a 2D matrix with a specified value -/
  
  /-  Specification: fill_diagonal modifies the diagonal entries to the specified value -/

vc-preamble: |-
  import Std.Do.Triple
  import Std.Tactic.Do
  open Std.Do

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def fill_diagonal {T : Type} {rows cols : Nat} (mat : Vector (Vector T cols) rows) (val : T) : 
      Id (Vector (Vector T cols) rows) :=

vc-implementation: |-
  -- <vc-implementation>
    sorry
  -- </vc-implementation>

vc-condition: |-
  theorem fill_diagonal_spec {T : Type} {rows cols : Nat} (mat : Vector (Vector T cols) rows) (val : T) :
      ⦃⌜True⌝⦄
      fill_diagonal mat val
      ⦃⇓result => ⌜-- Diagonal elements are filled with val
        (∀ i : Fin rows, ∀ j : Fin cols, i.val = j.val → 
          (result.get i).get j = val) ∧
        -- Non-diagonal elements remain unchanged
        (∀ i : Fin rows, ∀ j : Fin cols, i.val ≠ j.val → 
          (result.get i).get j = (mat.get i).get j)⌝⦄ := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-

