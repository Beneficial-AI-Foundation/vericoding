vc-description: |-
  /- 
  {
    "name": "numpy.strings.not_equal",
    "category": "String comparison",
    "description": "Return (x1 != x2) element-wise",
    "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.not_equal.html",
    "doc": "Return (x1 != x2) element-wise.\n\nFor string arrays, performs element-wise string comparison.\n\nParameters\n----------\nx1, x2 : array_like\n    Input arrays with string dtype.\n    If \`\`x1.shape != x2.shape\`\`, they must be broadcastable to a common\n    shape (which becomes the shape of the output).\nout : ndarray, None, or tuple of ndarray and None, optional\n    A location into which the result is stored.\nwhere : array_like, optional\n    This condition is broadcast over the input.\nkwargs\n    For other keyword-only arguments, see the ufunc docs.\n\nReturns\n-------\nout : ndarray or scalar\n    Output array, element-wise comparison of x1 and x2.\n    Typically of type bool, unless \`\`dtype=object\`\` is passed.",
  }
  -/

  /-  numpy.strings.not_equal: Return (x1 != x2) element-wise for string arrays.
  
      Performs element-wise string inequality comparison between two vectors of strings.
      Returns a boolean vector indicating whether corresponding strings are not equal.
      
      This function compares strings lexicographically and returns True for each
      position where the strings are different, False where they are identical.
  -/

  /-  Specification: numpy.strings.not_equal returns element-wise inequality comparison.
  
      Precondition: True (no special preconditions for string inequality)
      Postcondition: For all indices i, result[i] = (x1[i] != x2[i])
      
      Mathematical Properties:
      - Irreflexive: not_equal x x returns all False
      - Symmetric: not_equal x y = not_equal y x  
      - Negation of equality: not_equal x y = ¬(equal x y)
      - Decidable: String inequality is decidable for all strings
      - Type-safe: Result vector has same length as input vectors
      - Complementary: for any two strings s1 and s2, exactly one of (s1 = s2) or (s1 ≠ s2) holds
  -/

vc-preamble: |-
  import Std.Do.Triple
  import Std.Tactic.Do
  open Std.Do

vc-helpers: |-
  <vc-helpers>
  </vc-helpers>

vc-signature: |-
  def not_equal {n : Nat} (x1 x2 : Vector String n) : Id (Vector Bool n) :=

vc-implementation: |-
  <vc-implementation>
    sorry
  </vc-implementation>

vc-condition: |-
  theorem not_equal_spec {n : Nat} (x1 x2 : Vector String n) :
      ⦃⌜True⌝⦄
      not_equal x1 x2
      ⦃⇓result => ⌜∀ i : Fin n, result.get i = (x1.get i ≠ x2.get i)⌝⦄ := by

vc-proof: |-
  <vc-proof>
    sorry
  </vc-proof>

vc-postamble: |-
