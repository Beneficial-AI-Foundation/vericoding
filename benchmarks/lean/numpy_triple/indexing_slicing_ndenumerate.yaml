vc-description: |-
  /- 
  {
    "name": "numpy.ndenumerate",
    "category": "Iterating over arrays",
    "description": "Multidimensional index iterator",
    "url": "https://numpy.org/doc/stable/reference/generated/numpy.ndenumerate.html",
    "doc": "Multidimensional index iterator.\n\nReturn an iterator yielding pairs of array coordinates and values.\n\nParameters\n----------\narr : ndarray\n    Input array.",
  }
  -/

  /-  numpy.ndenumerate: Multidimensional index iterator that yields pairs of array coordinates and values.
      
      For a 1D array, this creates a vector of tuples where each tuple contains
      the index and the corresponding value from the input array.
      
      The function essentially enumerates through the array, providing both
      the position (index) and the value at that position.
  -/

  /-  Specification: ndenumerate returns a vector of index-value pairs.
      
      For each position i in the input array, the result contains a tuple
      (i, arr[i]) where i is the index and arr[i] is the value at that index.
      
      Precondition: True (no special preconditions needed)
      Postcondition: For all indices i, result[i] = (i, arr[i])
  -/

vc-preamble: |-
  import Std.Do.Triple
  import Std.Tactic.Do
  open Std.Do

vc-helpers: |-
  <vc-helpers>
  </vc-helpers>

vc-signature: |-
  def ndenumerate {n : Nat} (arr : Vector Float n) : Id (Vector (Fin n × Float) n) :=

vc-implementation: |-
  <vc-implementation>
    sorry
  </vc-implementation>

vc-condition: |-
  theorem ndenumerate_spec {n : Nat} (arr : Vector Float n) :
      ⦃⌜True⌝⦄
      ndenumerate arr
      ⦃⇓result => ⌜∀ i : Fin n, result.get i = (i, arr.get i)⌝⦄ := by

vc-proof: |-
  <vc-proof>
    sorry
  </vc-proof>

vc-postamble: |-
