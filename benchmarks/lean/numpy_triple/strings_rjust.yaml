vc-description: |-
  /- 
  {
    "name": "numpy.strings.rjust",
    "category": "String operations",
    "description": "Return an array with the elements of a right-justified in a string of length width",
    "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.rjust.html",
    "doc": "Return an array with the elements of \`a\` right-justified in a string of length \`width\`.\n\nParameters\n----------\na : array_like, with \`StringDType\`, \`bytes_\` or \`str_\` dtype\nwidth : array_like, with any integer dtype\n    The length of the resulting strings, unless \`\`width < str_len(a)\`\`.\nfillchar : array_like, with \`StringDType\`, \`bytes_\` or \`str_\` dtype, optional\n    The character to use for padding. Default is space.\n\nReturns\n-------\nout : ndarray\n    Output array of \`StringDType\`, \`bytes_\` or \`str_\` dtype,\n    depending on input types",
  }
  -/

  /-  numpy.strings.rjust: Return an array with the elements of a right-justified in a string of length width.
  
      Right-justifies each string in the input array by padding it with the specified
      fill character (default is space) to reach the specified width. If the original
      string is longer than or equal to the width, it remains unchanged.
  
      Parameters:
      - a: Input array of strings
      - width: Target width for each string
      - fillchar: Character to use for padding (must be exactly one character)
      
      Returns:
      - Array where each string is right-justified to the specified width
      
      Mathematical Properties:
      1. Length preservation: If original.length >= width, return original unchanged
      2. Right-justification: If original.length < width, pad on the left with fillchar
      3. Padding placement: Original string appears as suffix in the result
      4. Character preservation: Original string appears as contiguous substring
      5. Width compliance: Result length equals max(original.length, width)
  -/

  /-  Specification: rjust returns a vector where each string is right-justified
      to the specified width using the given fill character.
  
      Mathematical Properties:
      - Length preservation: Result length is max(original_length, width)
      - Identity: Strings already >= width remain unchanged
      - Right-justification: Original content preserved as suffix, padding on left
      - Minimality: No unnecessary padding beyond required width
      - Fillchar constraint: Padding uses specified fill character
  -/

vc-preamble: |-
  import Std.Do.Triple
  import Std.Tactic.Do
  open Std.Do

vc-helpers: |-
  <vc-helpers>
  </vc-helpers>

vc-signature: |-
  def rjust {n : Nat} (a : Vector String n) (width : Nat) (fillchar : String) : Id (Vector String n) :=

vc-implementation: |-
  <vc-implementation>
    sorry
  </vc-implementation>

vc-condition: |-
  theorem rjust_spec {n : Nat} (a : Vector String n) (width : Nat) (fillchar : String)
      (h_fillchar : fillchar.length = 1) :
      ⦃⌜fillchar.length = 1⌝⦄
      rjust a width fillchar
      ⦃⇓result => ⌜∀ i : Fin n, 
          let orig := a.get i
          let res := result.get i
          -- Core mathematical properties of right-justification
          -- 1. Length invariant: result length is exactly max(orig.length, width)
          res.length = max orig.length width ∧
          -- 2. Identity morphism: strings already >= width are unchanged (f(x) = x when |x| >= w)
          (orig.length ≥ width → res = orig) ∧
          -- 3. Padding morphism: strings < width are extended (f(x) = p ++ x when |x| < w)
          (orig.length < width → 
              res.length = width ∧
              (∃ padding : String, res = padding ++ orig ∧ 
                  padding.length = width - orig.length) ∧
              -- Right-justification property: original is preserved as suffix
              res.endsWith orig) ∧
          -- 4. Minimality constraint: no over-padding (efficient operation)
          (orig.length ≥ width → res.length = orig.length) ∧
          -- 5. Exactness constraint: padding achieves exact width requirement
          (orig.length < width → res.length = width) ∧
          -- 6. Consistency constraint: all operations preserve the vector structure
          (orig.length = 0 → res.length = width)⌝⦄ := by

vc-proof: |-
  <vc-proof>
    sorry
  </vc-proof>

vc-postamble: |-
