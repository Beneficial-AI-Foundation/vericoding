vc-description: |-
  /-  numpy.full_like: Return a full array with the same shape and type as a given array.
  
      Creates a new array with the same shape as the input array `a`, where all
      elements are set to the specified `fill_value`. This is useful for creating
      arrays of a specific constant value while preserving the shape of an existing
      array.
  
      The actual type of fill_value will be cast to match the array's type,
      similar to numpy's behavior where 0.1 becomes 0 for integer arrays.
  -/

  /-  Specification: numpy.full_like returns a vector with the same shape as `a`
      where every element equals `fill_value`.
  
      Precondition: True (no special preconditions needed)
      Postcondition: The result has the same length as `a` and all elements equal `fill_value`
  -/

vc-preamble: |-
  import Std.Do.Triple
  import Std.Tactic.Do
  open Std.Do

vc-helpers: |-
  <vc-helpers>
  </vc-helpers>

vc-signature: |-
  def numpy_full_like {n : Nat} (a : Vector Float n) (fill_value : Float) : Id (Vector Float n) :=

vc-implementation: |-
  <vc-implementation>
    sorry
  </vc-implementation>

vc-condition: |-
  theorem numpy_full_like_spec {n : Nat} (a : Vector Float n) (fill_value : Float) :
      ⦃⌜True⌝⦄
      numpy_full_like a fill_value
      ⦃⇓result => ⌜∀ i : Fin n, result.get i = fill_value⌝⦄ := by

vc-proof: |-
  <vc-proof>
    sorry
  </vc-proof>

vc-postamble: |-
