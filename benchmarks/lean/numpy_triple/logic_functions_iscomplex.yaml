vc-description: |-
  /-  Returns a bool array, where True if input element has non-zero imaginary part.
      For complex numbers, checks if imaginary part is non-zero.
      For real numbers, returns false for all elements. -/

  /-  Specification: iscomplex returns true for elements with non-zero imaginary parts,
      false for elements with zero imaginary parts, with the following properties:
      1. Basic definition: returns true iff imaginary part is non-zero
      2. Real number detection: pure real numbers (imag = 0) return false
      3. Complex number detection: numbers with non-zero imaginary part return true
      4. Idempotent on boolean interpretation: the mathematical meaning is preserved
      5. Element-wise operation: each element is tested independently -/

vc-preamble: |-
  import Std.Do.Triple
  import Std.Tactic.Do
  open Std.Do
  
  /-  Structure representing a complex number with float components -/
  
  structure Complex where
    /-- The real part of the complex number -/
    real : Float
    /-- The imaginary part of the complex number -/
    imag : Float

vc-helpers: |-
  <vc-helpers>
  </vc-helpers>

vc-signature: |-
  def iscomplex {n : Nat} (x : Vector Complex n) : Id (Vector Bool n) :=

vc-implementation: |-
  <vc-implementation>
    sorry
  </vc-implementation>

vc-condition: |-
  theorem iscomplex_spec {n : Nat} (x : Vector Complex n) :
      ⦃⌜True⌝⦄
      iscomplex x
      ⦃⇓result => ⌜(∀ i : Fin n, result.get i = ((x.get i).imag ≠ 0.0)) ∧
                   (∀ i : Fin n, (x.get i).imag = 0.0 → result.get i = false) ∧
                   (∀ i : Fin n, (x.get i).imag ≠ 0.0 → result.get i = true) ∧
                   (∀ i : Fin n, result.get i = true → (x.get i).imag ≠ 0.0) ∧
                   (∀ i : Fin n, result.get i = false → (x.get i).imag = 0.0)⌝⦄ := by

vc-proof: |-
  <vc-proof>
    sorry
  </vc-proof>

vc-postamble: |-
