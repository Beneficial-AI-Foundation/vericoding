vc-description: |-
  /- 
  {
    "name": "ufunc.reduce",
    "category": "Reduction Method",
    "description": "Reduces array's dimension by applying ufunc along specified axis",
    "url": "https://numpy.org/doc/stable/reference/generated/numpy.ufunc.reduce.html",
    "signature": "ufunc.reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)",
    "parameters": {
      "array": "Array to be reduced",
      "axis": "Axis or axes along which to reduce",
      "dtype": "Data type for intermediate computations",
      "out": "Location for the result",
      "keepdims": "If True, axes which are reduced are left as dimensions with size one",
      "initial": "Starting value for the reduction",
      "where": "Boolean array for selective reduction"
    },
    "example": "np.multiply.reduce([2,3,5])  # Returns 30\nnp.add.reduce([[1,2],[3,4]], axis=0)  # Returns [4, 6]",
    "notes": [
      "For add.reduce, equivalent to sum()",
      "For multiply.reduce, equivalent to prod()",
      "Supports multi-axis reduction"
    ]
  }
  -/

  /-  Reduces an array by applying a binary operation repeatedly along an axis.
      For 1D arrays, this applies the operation successively to pairs of elements. -/

  /-  Specification: reduce applies a binary operation repeatedly to reduce an array to a single value.
      The operation is applied left-associatively: ((a[0] op a[1]) op a[2]) op ... op a[n-1] -/

vc-preamble: |-
  import Std.Do.Triple
  import Std.Tactic.Do
  open Std.Do

vc-helpers: |-
  <vc-helpers>
  </vc-helpers>

vc-signature: |-
  def reduce {n : Nat} (op : Float → Float → Float) (arr : Vector Float (n + 1)) : Id Float :=

vc-implementation: |-
  <vc-implementation>
    sorry
  </vc-implementation>

vc-condition: |-
  theorem reduce_spec {n : Nat} (op : Float → Float → Float) (arr : Vector Float (n + 1)) :
      ⦃⌜True⌝⦄
      reduce op arr
      ⦃⇓result => ⌜(n = 0 → result = arr.get ⟨0, Nat.zero_lt_succ _⟩) ∧
                   (n > 0 → ∃ (fold_fn : Fin (n + 1) → Float), 
                            fold_fn ⟨0, Nat.zero_lt_succ _⟩ = arr.get ⟨0, Nat.zero_lt_succ _⟩ ∧
                            (∀ i : Fin n, fold_fn ⟨i.val + 1, Nat.succ_lt_succ i.isLt⟩ = 
                              op (fold_fn ⟨i.val, Nat.lt_succ_of_lt i.isLt⟩) 
                                 (arr.get ⟨i.val + 1, Nat.succ_lt_succ i.isLt⟩)) ∧
                            result = fold_fn ⟨n, Nat.lt_succ_self _⟩)⌝⦄ := by

vc-proof: |-
  <vc-proof>
    sorry
  </vc-proof>

vc-postamble: |-
