vc-description: |-
  /- 
  {
    "name": "numpy.polynomial.legendre.legcompanion",
    "category": "Legendre polynomials",
    "description": "Return the scaled companion matrix of c.",
    "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.legendre.legcompanion.html",
    "doc": "Return the scaled companion matrix of c.\n\n    The basis polynomials are scaled so that the companion matrix is\n    symmetric when \`c\` is an Legendre basis polynomial. This provides\n    better eigenvalue estimates than the unscaled case and for basis\n    polynomials the eigenvalues are guaranteed to be real if\n    \`numpy.linalg.eigvalsh\` is used to obtain them.\n\n    Parameters\n    ----------\n    c : array_like\n        1-D array of Legendre series coefficients ordered from low to high\n        degree.\n\n    Returns\n    -------\n    mat : ndarray\n        Scaled companion matrix of dimensions (deg, deg).",
  }
  -/

  /-  Return the scaled companion matrix of Legendre series coefficients.
      The companion matrix is symmetric when c is a Legendre basis polynomial,
      providing better eigenvalue estimates. -/

  /-  Specification: legcompanion returns a symmetric companion matrix of appropriate dimensions -/

vc-preamble: |-
  import Std.Do.Triple
  import Std.Tactic.Do
  open Std.Do

vc-helpers: |-
  <vc-helpers>
  </vc-helpers>

vc-signature: |-
  def legcompanion {n : Nat} (c : Vector Float (n + 2)) : Id (Vector (Vector Float (n + 1)) (n + 1)) :=

vc-implementation: |-
  <vc-implementation>
    sorry
  </vc-implementation>

vc-condition: |-
  theorem legcompanion_spec {n : Nat} (c : Vector Float (n + 2)) 
      (h_nonzero : c.get ⟨n + 1, by simp⟩ ≠ 0) :
      ⦃⌜c.get ⟨n + 1, by simp⟩ ≠ 0⌝⦄
      legcompanion c
      ⦃⇓result => ⌜
        (∀ i j : Fin (n + 1), (result.get i).get j = (result.get j).get i) ∧
        (result.size = n + 1) ∧
        (∀ i : Fin (n + 1), (result.get i).size = n + 1)
      ⌝⦄ := by

vc-proof: |-
  <vc-proof>
    sorry
  </vc-proof>

vc-postamble: |-
