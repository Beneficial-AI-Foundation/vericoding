vc-description: |-
  /- 
  {
    "name": "numpy.strings.less",
    "category": "String comparison",
    "description": "Return the truth value of (x1 < x2) element-wise",
    "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.less.html",
    "doc": "Return the truth value of (x1 < x2) element-wise.\n\nFor string arrays, performs element-wise string comparison.\n\nParameters\n----------\nx1, x2 : array_like\n    Input arrays with string dtype.\n    If \`\`x1.shape != x2.shape\`\`, they must be broadcastable to a common\n    shape (which becomes the shape of the output).\nout : ndarray, None, or tuple of ndarray and None, optional\n    A location into which the result is stored.\nwhere : array_like, optional\n    This condition is broadcast over the input.\nkwargs\n    For other keyword-only arguments, see the ufunc docs.\n\nReturns\n-------\nout : ndarray or scalar\n    Output array, element-wise comparison of x1 and x2.\n    Typically of type bool, unless \`\`dtype=object\`\` is passed.",
  }
  -/

  /-  numpy.strings.less: Return the truth value of (x1 < x2) element-wise for string arrays.
  
      Performs element-wise string comparison between two vectors of strings.
      Returns a boolean vector indicating whether corresponding strings from x1 
      are lexicographically less than corresponding strings from x2.
      
      This function compares strings lexicographically and returns True for each
      position where x1[i] < x2[i] in lexicographic ordering, False otherwise.
  -/

  /-  Specification: numpy.strings.less returns element-wise lexicographic comparison.
  
      This function performs element-wise lexicographic comparison between two vectors
      of strings, returning a boolean vector where each element indicates whether
      the corresponding element in x1 is lexicographically less than the corresponding
      element in x2.
      
      Precondition: True (no special preconditions for string comparison)
      Postcondition: For all indices i, result[i] = (x1[i] < x2[i])
      
      Mathematical Properties:
      - Asymmetric: if less x1 x2 is True at position i, then less x2 x1 is False at position i
      - Transitive: if less x1 x2 and less x2 x3 are both True at position i, then less x1 x3 is True at position i
      - Irreflexive: less x x returns all False (no string is less than itself)
      - Trichotomous: for any two strings s1 and s2, exactly one of s1 < s2, s1 = s2, or s1 > s2 holds
      - Decidable: String comparison is decidable for all strings
      - Type-safe: Result vector has same length as input vectors
      
      String Comparison Properties:
      - Empty string is less than any non-empty string
      - Lexicographic ordering follows dictionary order (case-sensitive)
      - Comparison is based on Unicode code point values
      - Preserves strict ordering properties of the underlying string type
  -/

vc-preamble: |-
  import Std.Do.Triple
  import Std.Tactic.Do
  open Std.Do

vc-helpers: |-
  <vc-helpers>
  </vc-helpers>

vc-signature: |-
  def less {n : Nat} (x1 x2 : Vector String n) : Id (Vector Bool n) :=

vc-implementation: |-
  <vc-implementation>
    sorry
  </vc-implementation>

vc-condition: |-
  theorem less_spec {n : Nat} (x1 x2 : Vector String n) :
      ⦃⌜True⌝⦄
      less x1 x2
      ⦃⇓result => ⌜-- Core property: result[i] = (x1[i] < x2[i]) for all indices
                   (∀ i : Fin n, result.get i = (x1.get i < x2.get i)) ∧
                   -- Asymmetry: if x1[i] < x2[i], then NOT (x2[i] < x1[i])
                   (∀ i : Fin n, result.get i = true → ¬(x2.get i < x1.get i)) ∧
                   -- Irreflexivity: no string is less than itself
                   (∀ i : Fin n, x1.get i = x2.get i → result.get i = false) ∧
                   -- Transitivity property: if x1[i] < x2[i] and we have a third string x3[i], transitivity holds
                   (∀ i : Fin n, result.get i = true → ∀ s : String, x2.get i < s → x1.get i < s) ∧
                   -- Decidability: result is always boolean (true or false)
                   (∀ i : Fin n, result.get i = true ∨ result.get i = false) ∧
                   -- Empty string property: empty string is less than any non-empty string
                   (∀ i : Fin n, x1.get i = "" → x2.get i ≠ "" → result.get i = true) ∧
                   -- Non-empty string property: non-empty string is not less than empty string
                   (∀ i : Fin n, x1.get i ≠ "" → x2.get i = "" → result.get i = false) ∧
                   -- Length invariant: result has same length as input vectors  
                   (result.toList.length = n) ∧
                   -- Consistency with String's built-in less-than operator
                   (∀ i : Fin n, result.get i = true ↔ x1.get i < x2.get i) ∧
                   -- Prefix property: if s1 is a proper prefix of s2, then s1 < s2
                   (∀ i : Fin n, (x1.get i).isPrefixOf (x2.get i) → x1.get i ≠ x2.get i → result.get i = true) ∧
                   -- Strict ordering: if result[i] is true, then x1[i] and x2[i] are different
                   (∀ i : Fin n, result.get i = true → x1.get i ≠ x2.get i) ∧
                   -- Totality of comparison: for any two strings, exactly one of <, =, > holds
                   (∀ i : Fin n, result.get i = true ∨ x1.get i = x2.get i ∨ x2.get i < x1.get i)⌝⦄ := by

vc-proof: |-
  <vc-proof>
    sorry
  </vc-proof>

vc-postamble: |-
