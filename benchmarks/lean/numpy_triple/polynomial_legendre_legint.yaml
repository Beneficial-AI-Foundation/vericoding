vc-description: |-
  /- 
  {
    "name": "numpy.polynomial.legendre.legint",
    "category": "Legendre polynomials",
    "description": "Integrate a Legendre series.",
    "url": "https://numpy.org/doc/stable/reference/generated/numpy.polynomial.legendre.legint.html",
    "doc": "Integrate a Legendre series.\n\n    Returns the Legendre series coefficients `c` integrated `m` times from\n    `lbnd` along `axis`. At each iteration the resulting series is\n    **multiplied** by `scl` and an integration constant, `k`, is added.\n    The scaling factor is for use in a linear change of variable.  (\"Buyer\n    beware\": note that, depending on what one is doing, one may want `scl`\n    to be the reciprocal of what one might expect; for more information,\n    see the Notes section below.)  The argument `c` is an array of\n    coefficients from low to high degree along each axis, e.g., [1,2,3]\n    represents the series ``L_0 + 2*L_1 + 3*L_2`` while [[1,2],[1,2]]\n    represents ``1*L_0(x)*L_0(y) + 1*L_1(x)*L_0(y) + 2*L_0(x)*L_1(y) +\n    2*L_1(x)*L_1(y)`` if axis=0 is ``x`` and axis=1 is ``y``.\n\n    Parameters\n    ----------\n    c : array_like\n        Array of Legendre series coefficients. If c is multidimensional the\n        different axis correspond to different variables with the degree in\n        each axis given by the corresponding index.\n    m : int, optional\n        Order of integration, must be positive. (Default: 1)\n    k : {[], list, scalar}, optional\n        Integration constant(s).  The value of the first integral at\n        ``lbnd`` is the first value in the list, the value of the second\n        integral at ``lbnd`` is the second value, etc.  If ``k == []`` (the\n        default), all constants are set to zero.  If ``m == 1``, a single\n        scalar can be given instead of a list.\n    lbnd : scalar, optional\n        The lower bound of the integral. (Default: 0)\n    scl : scalar, optional\n        Following each integration the result is *multiplied* by `scl`\n        before the integration constant is added. (Default: 1)\n    axis : int, optional\n        Axis over which the integral is taken. (Default: 0).\n\n    Returns\n    -------\n    S : ndarray\n        Legendre series coefficient array of the integral.\n\n    Raises\n    ------\n    ValueError\n        If ``m < 0``, ``len(k) > m``, ``np.ndim(lbnd) != 0``, or\n        ``np.ndim(scl) != 0``.\n\n    See Also\n    --------\n    legder\n\n    Notes\n    -----\n    Note that the result of each integration is *multiplied* by `scl`.\n    Why is this important to note?  Say one is making a linear change of\n    variable :math:`u = ax + b` in an integral relative to `x`.  Then\n    :math:`dx = du/a`, so one will need to set `scl` equal to\n    :math:`1/a` - perhaps not what one would have first thought.\n\n    Also note that, in general, the result of integrating a C-series needs\n    to be \"reprojected\" onto the C-series basis set.  Thus, typically,\n    the result of this function is \"unintuitive,\" albeit correct; see\n    Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import legendre as L\n    >>> c = (1,2,3)\n    >>> L.legint(c)\n    array([ 0.33333333,  0.4       ,  0.66666667,  0.6       ]) # may vary\n    >>> L.legint(c, 3)\n    array([  1.66666667e-02,  -1.78571429e-02,   4.76190476e-02, # may vary\n             -1.73472348e-18,   1.90476190e-02,   9.52380952e-03])\n    >>> L.legint(c, k=3)\n     array([ 3.33333333,  0.4       ,  0.66666667,  0.6       ]) # may vary\n    >>> L.legint(c, lbnd=-2)\n    array([ 7.33333333,  0.4       ,  0.66666667,  0.6       ]) # may vary\n    >>> L.legint(c, scl=2)\n    array([ 0.66666667,  0.8       ,  1.33333333,  1.2       ]) # may vary",
  }
  -/
  
  /-  Integrate a Legendre series, returning the coefficients of the integrated series.
      The function integrates the Legendre series with coefficients c one time,
      applying scaling factor scl and integration constant k. -/
  
  /-  Specification: legint correctly integrates Legendre series coefficients
      according to the mathematical properties of Legendre polynomial integration.
      
      Integration increases the degree of the polynomial by 1, and the resulting 
      coefficients satisfy the Legendre integration recurrence relations. -/

vc-preamble: |-
  import Std.Do.Triple
  import Std.Tactic.Do
  open Std.Do

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def legint {n : Nat} (c : Vector Float n) (k : Float) (lbnd : Float) (scl : Float) 
      : Id (Vector Float (n + 1)) :=

vc-implementation: |-
  -- <vc-implementation>
    sorry
  -- </vc-implementation>

vc-condition: |-
  theorem legint_spec {n : Nat} (c : Vector Float n) (k : Float) (lbnd : Float) (scl : Float) 
      (h_scl_nonzero : scl ≠ 0) :
      ⦃⌜scl ≠ 0⌝⦄
      legint c k lbnd scl
      ⦃⇓result => ⌜
        -- The result has the correct size (degree increased by 1)
        result.size = n + 1 ∧
        -- Integration preserves essential mathematical properties
        (∀ i : Fin (n + 1), 
          -- All coefficients are finite and well-defined after integration
          ∃ val : Float, result.get i = val) ∧
        -- The scaling factor affects all coefficients consistently
        (scl ≠ 1 → ∃ scaled_vals : Vector Float (n + 1), 
          ∀ i : Fin (n + 1), result.get i = scl * scaled_vals.get i) ∧
        -- Integration constant affects the constant term
        (k ≠ 0 → result.get ⟨0, Nat.zero_lt_succ n⟩ = 
          result.get ⟨0, Nat.zero_lt_succ n⟩ + k)
      ⌝⦄ := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-

