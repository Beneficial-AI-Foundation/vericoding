vc-description: |-
  /-  Helper function to check if a DataType is a scalar type -/
  
  /-  Determines whether the given object represents a scalar data-type -/

  /-  Specification: issctype returns true if and only if the input represents a scalar data type -/

vc-preamble: |-
  import Std.Do.Triple
  import Std.Tactic.Do
  open Std.Do
  
  /-  Represents different kinds of data types that can be tested -/
  
  inductive DataType
    /-- Scalar integer type -/
    | scalar_int : DataType
    /-- Scalar floating point type -/
    | scalar_float : DataType
    /-- Scalar complex number type -/
    | scalar_complex : DataType
    /-- Scalar boolean type -/
    | scalar_bool : DataType
    /-- Scalar string type -/
    | scalar_string : DataType
    /-- Array type -/
    | array_type : DataType
    /-- Composite type -/
    | composite_type : DataType
    /-- Unknown type -/
    | unknown_type : DataType

vc-helpers: |-
  <vc-helpers>
  </vc-helpers>

vc-signature: |-
  def isScalarType (dt : DataType) : Bool :=
  
  def issctype (rep : DataType) : Id Bool :=

vc-implementation: |-
  <vc-implementation>
    match dt with
    | DataType.scalar_int => true
    | DataType.scalar_float => true
    | DataType.scalar_complex => true
    | DataType.scalar_bool => true
    | DataType.scalar_string => true
    | DataType.array_type => false
    | DataType.composite_type => false
    | DataType.unknown_type => false
  
  
    sorry
  </vc-implementation>

vc-condition: |-
  theorem issctype_spec (rep : DataType) :
      ⦃⌜True⌝⦄
      issctype rep
      ⦃⇓result => ⌜result = true ↔ (rep = DataType.scalar_int ∨ 
                                    rep = DataType.scalar_float ∨ 
                                    rep = DataType.scalar_complex ∨ 
                                    rep = DataType.scalar_bool ∨ 
                                    rep = DataType.scalar_string)⌝⦄ := by

vc-proof: |-
  <vc-proof>
    sorry
  </vc-proof>

vc-postamble: |-
