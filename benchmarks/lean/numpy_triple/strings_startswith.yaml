vc-description: |-
  /- 
  {
    "name": "numpy.strings.startswith",
    "category": "String information",
    "description": "Returns a boolean array which is True where the string element in a starts with prefix, otherwise False",
    "url": "https://numpy.org/doc/stable/reference/generated/numpy.strings.startswith.html",
    "doc": "Returns a boolean array which is \`True\` where the string element in \`a\` starts with \`prefix\`, otherwise \`False\`.\n\nParameters\n----------\na : array_like, with \`StringDType\`, \`bytes_\` or \`str_\` dtype\nprefix : array_like, with \`StringDType\`, \`bytes_\` or \`str_\` dtype\nstart, end : array_like, with any integer dtype, optional\n    With optional \`start\`, test beginning at that position. With optional \`end\`, stop comparing at that position.\n\nReturns\n-------\nout : ndarray\n    Output array of bools",
  }
  -/
  
  /-  Check if strings in array start with given prefixes -/
  
  /-  Specification: startswith returns boolean array indicating which strings start with corresponding prefixes -/

vc-preamble: |-
  import Std.Do.Triple
  import Std.Tactic.Do
  open Std.Do

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def startswith {n : Nat} (a : Vector String n) (prefixes : Vector String n) : Id (Vector Bool n) :=

vc-implementation: |-
  -- <vc-implementation>
    sorry
  -- </vc-implementation>

vc-condition: |-
  theorem startswith_spec {n : Nat} (a : Vector String n) (prefixes : Vector String n) :
      ⦃⌜True⌝⦄
      startswith a prefixes
      ⦃⇓r => ⌜∀ i : Fin n, 
        -- Main specification: result matches String.startsWith for each pair
        (r.get i = (a.get i).startsWith (prefixes.get i)) ∧
        -- Mathematical property: if result is true, prefix appears at the beginning
        (r.get i = true → 
          (prefixes.get i).length ≤ (a.get i).length ∧
          (a.get i).take (prefixes.get i).length = (prefixes.get i)) ∧
        -- Mathematical property: if result is false, prefix does not appear at the beginning
        (r.get i = false → 
          (prefixes.get i).length > (a.get i).length ∨
          (a.get i).take (prefixes.get i).length ≠ (prefixes.get i))⌝⦄ := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-

