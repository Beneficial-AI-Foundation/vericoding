vc-description: |-
  Mobile Display Keystrokes

  Do you remember the old mobile display keyboards? Do you also remember how inconvenient it was to write on it?
  Well, here you have to calculate how much keystrokes you have to do for a specific word.

  This is the layout:



  Return the amount of keystrokes of input str (! only letters, digits and special characters in lowercase included in layout without whitespaces !)

  e.g:


  mobileKeyboard("123") => 3 (1+1+1)
  mobileKeyboard("abc") => 9 (2+3+4)
  mobileKeyboard("codewars") => 26 (4+4+2+3+2+2+4+5)
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def mobile_keyboard (s : String) : Nat :=
    sorry
vc-theorems: |
  theorem mobile_keyboard_non_negative (s : String) :
    mobile_keyboard s ≥ 0 := sorry 


  theorem mobile_keyboard_sum_of_costs (s : String) (char_costs : Char → Nat) :
    mobile_keyboard s = s.foldl (fun acc c => acc + char_costs c) 0 := sorry


  theorem mobile_keyboard_empty :
    mobile_keyboard "" = 0 := sorry


  theorem mobile_keyboard_single_char (c : Char) (pos : Nat) :
    mobile_keyboard c.toString = pos := sorry


  theorem mobile_keyboard_valid_chars (s : String) :
    s.all (fun c => c ∈ ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '*', '#', 
                        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 
                        'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']) →
    mobile_keyboard s ≥ 0 := sorry

  /--
  info: 0
  -/
  #guard_msgs in
  #eval mobile_keyboard ""

  /--
  info: 3
  -/
  #guard_msgs in
  #eval mobile_keyboard "123"

  /--
  info: 26
  -/
  #guard_msgs in
  #eval mobile_keyboard "codewars"
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
