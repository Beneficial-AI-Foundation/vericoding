vc-description: |-
  # Task:
  Given a list of numbers, determine whether the sum of its elements is odd or even.
  
  Give your answer as a string matching `"odd"` or `"even"`.
  
  If the input array is empty consider it as: `[0]` (array with a zero).
  
  ## Example:
  
  ```
  odd_or_even([0])          ==  "even"
  odd_or_even([0, 1, 4])    ==  "odd"
  odd_or_even([0, -1, -5])  ==  "even"
  ```
  
  Have fun!

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def odd_or_even (nums : List Int) : String :=
    sorry

vc-theorems: |-
  theorem odd_or_even_result_valid (nums : List Int) :
    (odd_or_even nums = "odd") ∨ (odd_or_even nums = "even") :=
    sorry
  
  theorem odd_or_even_matches_sum (nums : List Int) :
    odd_or_even nums = (if (nums.foldl (· + ·) 0) % 2 = 0 then "even" else "odd") :=
    sorry
  
  theorem empty_equals_zero :
    odd_or_even [] = odd_or_even [0] := 
    sorry
  
  theorem odd_or_even_concatenation (nums1 nums2 : List Int) 
    (h1 : nums1 ≠ []) (h2 : nums2 ≠ []) :
    odd_or_even (nums1 ++ nums2) = 
      if odd_or_even nums1 = odd_or_even nums2 
      then "even" 
      else "odd" :=
    sorry
  
  /--
  info: 'odd'
  -/
  #guard_msgs in
  #eval odd_or_even [0, 1, 2]
  
  /--
  info: 'even'
  -/
  #guard_msgs in
  #eval odd_or_even [0, 1, 3]
  
  /--
  info: 'even'
  -/
  #guard_msgs in
  #eval odd_or_even [1023, 1, 2]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

