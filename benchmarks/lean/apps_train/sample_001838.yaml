vc-description: |-
  There are a total of n courses you have to take, labeled from 0 to n-1.
  
  Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]
  
  Given the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses.
  
  There may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.
  
  Example 1:
  
  Input: 2, [[1,0]] 
  Output: [0,1]
  Explanation: There are a total of 2 courses to take. To take course 1 you should have finished   
               course 0. So the correct course order is [0,1] .
  
  Example 2:
  
  Input: 4, [[1,0],[2,0],[3,1],[3,2]]
  Output: [0,1,2,3] or [0,2,1,3]
  Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both     
               courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. 
               So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3] .
  
  Note:
  
         The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
         You may assume that there are no duplicate edges in the input prerequisites.

vc-preamble: |-
  def find_course_order (numCourses : Nat) (prerequisites : List (Nat × Nat)) : List Nat :=
    sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def isSorted (l : List Nat) : Prop :=
    ∀ i j, i < j → j < l.length → l[i]! ≤ l[j]!

vc-theorems: |-
  theorem empty_prerequisites (n : Nat) (h : 0 < n) :
    let result := find_course_order n []
    (result.length = n) ∧ 
    (isSorted result) ∧
    (∀ i < n, i ∈ result) := by
    sorry
  
  theorem prerequisites_in_range (n : Nat) (prereqs : List (Nat × Nat)) (h : 0 < n) :
    let valid_prereqs := prereqs.filter (fun p => p.1 < n ∧ p.2 < n)
    let result := find_course_order n valid_prereqs
    result.length ≠ 0 → 
    (result.length = n) ∧
    (isSorted result) ∧
    (∀ i < n, i ∈ result) ∧
    (∀ course, ∀ post pre, 
      course ∈ result →
      (post, pre) ∈ valid_prereqs →
      post = course → 
      pre ∈ (result.take (result.indexOf course))) := by
    sorry
  
  theorem cycle_detection (n : Nat) (h : 1 < n) :
    let cyclic_prereqs := 
      (List.range (n-1)).map (fun i => (i+1, i)) ++ [(0, n-1)]
    find_course_order n cyclic_prereqs = [] := by
    sorry
  
  theorem linear_chain (n : Nat) (h : 0 < n) :
    let linear_prereqs := 
      (List.range (n-1)).map (fun i => (i+1, i))
    find_course_order n linear_prereqs = List.range n := by
    sorry
  
  /--
  info: [0, 1]
  -/
  #guard_msgs in
  #eval find_course_order 2 [[1, 0]]
  
  /--
  info: []
  -/
  #guard_msgs in
  #eval find_course_order 2 [[1, 0], [0, 1]]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

