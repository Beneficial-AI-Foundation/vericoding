vc-description: |-
  The goal of this Kata is to return the greatest distance of index positions between matching number values in an array or 0 if there are no matching values.  

  Example:
  In an array with the values [0, 2, 1, 2, 4, 1] the greatest index distance is between the matching '1' values at index 2 and 5.  Executing greatestDistance against this array would return 3. (i.e. 5 - 2)  

  Here's the previous example in test form:
  ```python
  test.assert_equals(greatest_distance([0, 2, 1, 2, 4, 1]), 3)
  ```

  This is based on a Kata I had completed only to realize I has misread the instructions.  I enjoyed solving the problem I thought it was asking me to complete so I thought I'd add a new Kata for others to enjoy.  There are no tricks in this one, good luck!
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def greatest_distance (lst: List Int) : Nat :=
    sorry
vc-theorems: |
  theorem greatest_distance_nonnegative (lst: List Int) : 
    greatest_distance lst ≥ 0 :=
  sorry




  theorem greatest_distance_duplicate_lower_bound {lst : List Int} {i j : Nat} : 
    i < j → j < lst.length → 
    (h1 : i < lst.length) → (h2 : j < lst.length) →
    lst.get ⟨i, h1⟩ = lst.get ⟨j, h2⟩ → 
    greatest_distance lst ≥ j - i :=
  sorry


  theorem greatest_distance_unique_list {lst : List Int} : 
    lst.Nodup → greatest_distance lst = 0 :=
  sorry


  theorem greatest_distance_repeated_element (x : Int) :
    greatest_distance [x, x, x] = 2 :=
  sorry

  /--
  info: 4
  -/
  #guard_msgs in
  #eval greatest_distance [9, 7, 1, 2, 3, 7, 0, -1, -2]

  /--
  info: 6
  -/
  #guard_msgs in
  #eval greatest_distance [0, 7, 0, 2, 3, 7, 0, -1, -2]

  /--
  info: 0
  -/
  #guard_msgs in
  #eval greatest_distance [1, 2, 3, 4]
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible
