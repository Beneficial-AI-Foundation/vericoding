vc-description: |-
  # Task
   Let's say that `"g" is happy` in the given string, if there is another "g" immediately to the right or to the left of it.
   
   Find out if all "g"s in the given string are happy.

  # Example
   For `str = "gg0gg3gg0gg"`, the output should be `true`.
   
   For `str = "gog"`, the output should be `false`.

  # Input/Output


   - `[input]` string `str`

    A random string of lower case letters, numbers and spaces.


   - `[output]` a boolean value

    `true` if all `"g"`s are happy, `false` otherwise.
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def happy_g (s : String) : Bool := sorry

  theorem happy_g_empty_or_no_g (s : String) :
    ¬ s.contains 'g' → happy_g s := sorry
vc-theorems: |
  theorem happy_g_multiple_grouped (s : String) :
    (∀ i j : String.Pos, 
      s.get i = 'g' → s.get j = 'g' →
      i.1 + 1 = j.1 → ∃ k : String.Pos, k.1 > j.1 ∧ s.get k = 'g') →
    happy_g s := sorry


  theorem happy_g_single_g_unhappy (s : String) (pos : Nat) :
    ¬ s.contains 'g' →
    pos ≤ s.length →
    ¬ happy_g (s.push 'g') := sorry

  /--
  info: True
  -/
  #guard_msgs in
  #eval happy_g "gg0gg3gg0gg"

  /--
  info: False
  -/
  #guard_msgs in
  #eval happy_g "gog"

  /--
  info: True
  -/
  #guard_msgs in
  #eval happy_g "gggggggggg"
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
