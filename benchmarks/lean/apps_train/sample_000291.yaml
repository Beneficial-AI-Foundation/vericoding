vc-description: |-
  Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.
  
  Example 1:
  
  Input: num1 = "2", num2 = "3"
  Output: "6"
  
  Example 2:
  
  Input: num1 = "123", num2 = "456"
  Output: "56088"
  
  Note:
  
         The length of both num1 and num2 is < 110.
         Both num1 and num2 contain only digits 0-9.
         Both num1 and num2 do not contain any leading zero, except the number 0 itself.
         You must not use any built-in BigInteger library or convert the inputs to integer directly.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def multiply (a b : String) : String := sorry 
  
  theorem multiply_matches_integer_multiplication {a b : Nat} : 
    multiply (toString a) (toString b) = toString (a * b) := sorry

vc-theorems: |-
  theorem multiply_by_zero {n : String} : 
    (multiply n "0" = "0") ∧ (multiply "0" n = "0") := sorry
  
  theorem multiply_by_one {n : String} :
    (multiply n "1" = n) ∧ (multiply "1" n = n) := sorry
  
  theorem multiply_commutative {a b : String} :
    multiply a b = multiply b a := sorry
  
  theorem multiply_associative {a b c : String} :
    multiply (multiply a b) c = multiply a (multiply b c) := sorry
  
  /--
  info: '6'
  -/
  #guard_msgs in
  #eval multiply "2" "3"
  
  /--
  info: '56088'
  -/
  #guard_msgs in
  #eval multiply "123" "456"
  
  /--
  info: '0'
  -/
  #guard_msgs in
  #eval multiply "0" "0"

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

