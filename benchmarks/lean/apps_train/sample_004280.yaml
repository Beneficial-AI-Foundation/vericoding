vc-description: |-
  Your task is to find the number couple with the greatest difference from a given array of number-couples. 

  All number couples will be given as strings and all numbers in them will be positive integers.  

  For instance: ['56-23','1-100']; in this case, you should identify '1-100' as the number couple with the greatest difference and return it.

  In case there are more than one option, for instance ['1-3','5-7','2-3'], you should identify whichever is first, so in this case '1-3'. 

  If there is no difference, like so ['11-11', '344-344'], return false.
vc-preamble: |
  import Imports.AllImports

  def abs (n : Int) : Int := 
    if n ≥ 0 then n else -n
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def diff (arr : List String) : Option String := sorry

  theorem diff_empty_list :
    diff [] = none := sorry
vc-theorems: |
  theorem diff_equal_pairs (n : Nat) :
    diff [s!"{n}-{n}"] = none := sorry


  theorem diff_result_in_input (arr : List String) :
    match diff arr with
    | none => True  
    | some result => result ∈ arr
    := sorry


  theorem diff_has_largest_diff (arr : List String) (result : String) :
    diff arr = some result →
    let result_nums := (result.splitOn "-").map String.toNat!
    let result_diff := abs (result_nums[0]! - result_nums[1]!)
    ∀ pair ∈ arr,
      let nums := (pair.splitOn "-").map String.toNat!
      let diff_val := abs (nums[0]! - nums[1]!)
      diff_val ≤ result_diff
    := sorry

  /--
  info: '000-18888'
  -/
  #guard_msgs in
  #eval diff ["43-45", "1021-55", "000-18888", "92-34", "76-32", "99-1", "1020-54"]

  /--
  info: False
  -/
  #guard_msgs in
  #eval diff ["33-33", "77-77"]

  /--
  info: False
  -/
  #guard_msgs in
  #eval diff []
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
