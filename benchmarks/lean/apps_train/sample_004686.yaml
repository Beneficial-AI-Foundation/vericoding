vc-description: |-
  You and your friends have been battling it out with your Rock 'Em, Sock 'Em robots, but things have gotten a little boring. You've each decided to add some amazing new features to your robot and automate them to battle to the death.
  
  Each robot will be represented by an object. You will be given two robot objects, and an object of battle tactics and how much damage they produce. Each robot will have a name, hit points, speed, and then a list of battle tacitcs they are to perform in order. Whichever robot has the best speed, will attack first with one battle tactic. 
  
  Your job is to decide who wins.
  
  Example:
  ```python
   robot_1 = {
    "name": "Rocky",
    "health": 100,
    "speed": 20,
    "tactics": ["punch", "punch", "laser", "missile"]
   }
   robot_2 = {
     "name": "Missile Bob",
     "health": 100,
     "speed": 21,
     "tactics": ["missile", "missile", "missile", "missile"]
   }
   tactics = {
     "punch": 20,
     "laser": 30,
     "missile": 35
   }
  
   fight(robot_1, robot_2, tactics) -> "Missile Bob has won the fight."
  ```
  
  robot2 uses the first tactic, "missile" because he has the most speed. This reduces robot1's health by 35. Now robot1 uses a punch, and so on. 
  
  **Rules**
  
  - A robot with the most speed attacks first. If they are tied, the first robot passed in attacks first.
  - Robots alternate turns attacking. Tactics are used in order.
  - A fight is over when a robot has 0 or less health or both robots have run out of tactics.
  - A robot who has no tactics left does no more damage, but the other robot may use the rest of his tactics.
  - If both robots run out of tactics, whoever has the most health wins. Return the message "{Name} has won the fight."
  - If both robots run out of tactics and are tied for health, the fight is a draw. Return "The fight was a draw."
  
  **To Java warriors**
  
  `Robot` class is immutable.
  
  Check out my other 80's Kids Katas:
  
  80's Kids #1: How Many Licks Does It Take
  80's Kids #2: Help Alf Find His Spaceship
  80's Kids #3: Punky Brewster's Socks
  80's Kids #4: Legends of the Hidden Temple
  80's Kids #5: You Can't Do That on Television
  80's Kids #6: Rock 'Em, Sock 'Em Robots
  80's Kids #7: She's a Small Wonder
  80's Kids #8: The Secret World of Alex Mack
  80's Kids #9: Down in Fraggle Rock 
  80's Kids #10: Captain Planet

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def fight (r1 r2 : Robot) (t : Tactics) : String :=
    sorry

vc-theorems: |-
  theorem fight_returns_valid_result (r1 r2 : Robot) (t : Tactics) :
    let result := fight r1 r2 t
    (result = s!"{r1.name} has won the fight." ∨ 
     result = s!"{r2.name} has won the fight." ∨
     result = "The fight was a draw.") :=
  sorry
  
  theorem faster_robot_attacks_first (r1 r2 : Robot) (t : Tactics) :
    r1.speed ≠ r2.speed →
    r1.tactics ≠ [] →
    r2.tactics ≠ [] →
    let faster := if r1.speed > r2.speed then r1 else r2
    let slower := if r1.speed > r2.speed then r2 else r1
    let firstDamage := match faster.tactics.head? with
      | none => 0 
      | some tactic => match t.val.lookup tactic with
        | none => 0
        | some dmg => dmg
    firstDamage ≥ slower.health →
    fight r1 r2 t = s!"{faster.name} has won the fight." :=
  sorry
  
  theorem equal_health_no_tactics_draws (r1 r2 : Robot) (t : Tactics) :
    r1.health = r2.health →
    r1.tactics = [] →
    r2.tactics = [] →
    fight r1 r2 t = "The fight was a draw." :=
  sorry
  
  /--
  info: 'Missile Bob has won the fight.'
  -/
  #guard_msgs in
  #eval fight {"name": "Rocky", "health": 100, "speed": 20, "tactics": ["punch", "punch", "laser", "missile"]} {"name": "Missile Bob", "health": 100, "speed": 21, "tactics": ["missile", "missile", "missile", "missile"]} {"punch": 20, "laser": 30, "missile": 35}
  
  /--
  info: 'The fight was a draw.'
  -/
  #guard_msgs in
  #eval fight {"name": "Bot1", "health": 100, "speed": 20, "tactics": ["punch"]} {"name": "Bot2", "health": 100, "speed": 20, "tactics": ["punch"]} tactics

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

