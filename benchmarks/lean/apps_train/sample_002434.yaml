vc-description: |-
  Return the number of permutations of 1 to n so that prime numbers are at prime indices (1-indexed.)
  (Recall that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers both smaller than it.)
  Since the answer may be large, return the answer modulo 10^9 + 7.
  
  Example 1:
  Input: n = 5
  Output: 12
  Explanation: For example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at index 1.
  
  Example 2:
  Input: n = 100
  Output: 682289015
  
  Constraints:
  
  1 <= n <= 100

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def num_prime_arrangements (n: Nat) : Nat := sorry
  
  theorem num_prime_arrangements_positive (n: Nat) :
    n ≥ 1 → num_prime_arrangements n > 0 := sorry

vc-theorems: |-
  theorem num_prime_arrangements_modulo_bound (n: Nat) :
    n ≥ 1 → num_prime_arrangements n < 10^9 + 7 := sorry
  
  theorem num_prime_arrangements_base_case : 
    num_prime_arrangements 1 = 1 := sorry
  
  theorem num_prime_arrangements_ordering (n: Nat) :
    n > 1 → (num_prime_arrangements n - num_prime_arrangements (n-1)) ≤ 10^9 + 7 := sorry
  
  /--
  info: 12
  -/
  #guard_msgs in
  #eval num_prime_arrangements 5
  
  /--
  info: 682289015
  -/
  #guard_msgs in
  #eval num_prime_arrangements 100
  
  /--
  info: 1
  -/
  #guard_msgs in
  #eval num_prime_arrangements 1

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

