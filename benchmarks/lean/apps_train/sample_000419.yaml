vc-description: |-
  You are playing the following Bulls and Cows game with your friend: You write down a number and ask your friend to guess what the number is. Each time your friend makes a guess, you provide a hint that indicates how many digits in said guess match your secret number exactly in both digit and position (called "bulls") and how many digits match the secret number but locate in the wrong position (called "cows"). Your friend will use successive guesses and hints to eventually derive the secret number.

  Write a function to return a hint according to the secret number and friend's guess, use A to indicate the bulls and B to indicate the cows. 

  Please note that both secret number and friend's guess may contain duplicate digits.

  Example 1:


  Input: secret = "1807", guess = "7810"

  Output: "1A3B"

  Explanation: 1 bull and 3 cows. The bull is 8, the cows are 0, 1 and 7.

  Example 2:


  Input: secret = "1123", guess = "0111"

  Output: "1A1B"

  Explanation: The 1st 1 in friend's guess is a bull, the 2nd or 3rd 1 is a cow.

  Note: You may assume that the secret number and your friend's guess only contain digits, and their lengths are always equal.
vc-preamble: |
  import Imports.AllImports

  def get_hint (secret: String) (guess: String) : String :=
    sorry


  def countMatches (s1 s2: String) : Nat :=
    sorry


  def natToString (n: Nat) : String :=
    sorry
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def splitHint (hint: String) : HintResult :=
    sorry
vc-theorems: |
  theorem hint_format {secret guess: String} (h: secret.length = guess.length):
    let hint := get_hint secret guess 
    let bulls_cows := hint.dropRight 1
    let parts := bulls_cows.split (λc => c = 'A')
    (hint.takeRight 1 = "B" ∧ 
     parts.length = 2 ∧
     parts[0]!.all Char.isDigit ∧
     parts[1]!.all Char.isDigit)
    := sorry


  theorem hint_counts_valid {secret guess : String} (h: secret.length = guess.length):
    let hint := get_hint secret guess
    let result := splitHint hint
    (result.bulls + result.cows ≤ secret.length ∧
     result.bulls ≤ countMatches secret guess)
    := sorry


  theorem identical_strings_hint {s : String}:
    get_hint s s = natToString s.length ++ "A0B"
    := sorry


  theorem hint_symmetry {secret guess : String} (h: secret.length = guess.length):
    let hint1 := get_hint secret guess
    let hint2 := get_hint guess secret
    (splitHint hint1).bulls = (splitHint hint2).bulls
    := sorry

  /--
  info: '1A3B'
  -/
  #guard_msgs in
  #eval get_hint "1807" "7810"

  /--
  info: '1A1B'
  -/
  #guard_msgs in
  #eval get_hint "1123" "0111"

  /--
  info: '0A0B'
  -/
  #guard_msgs in
  #eval get_hint "1234" "5678"
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
