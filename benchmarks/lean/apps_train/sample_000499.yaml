vc-description: |-
  You are given a string S of length N consisting of lowercase English letters.
  Process Q queries of the following two types:
   - Type 1: change the i_q-th character of S to c_q. (Do nothing if the i_q-th character is already c_q.)
   - Type 2: answer the number of different characters occurring in the substring of S between the l_q-th and r_q-th characters (inclusive).
  
  -----Constraints-----
   - N, Q, i_q, l_q, and r_q are integers.
   - S is a string consisting of lowercase English letters.
   - c_q is a lowercase English letter.
   - 1 \leq N \leq 500000
   - 1 \leq Q \leq 20000
   - |S| = N
   - 1 \leq i_q \leq N
   - 1 \leq l_q \leq r_q \leq N
   - There is at least one query of type 2 in each testcase.
  
  -----Input-----
  Input is given from Standard Input in the following format:
  N
  S
  Q
  Query_1
  \vdots
  Query_Q
  
  Here, Query_i in the 4-th through (Q+3)-th lines is one of the following:
  1 i_q c_q
  
  2 l_q r_q
  
  -----Output-----
  For each query of type 2, print a line containing the answer.
  
  -----Sample Input-----
  7
  abcdbbd
  6
  2 3 6
  1 5 z
  2 1 1
  1 4 a
  1 7 d
  2 1 7
  
  -----Sample Output-----
  3
  1
  5
  
  In the first query, cdbb contains three kinds of letters: b , c , and d, so we print 3.
  In the second query, S is modified to abcdzbd.
  In the third query, a contains one kind of letter: a, so we print 1.
  In the fourth query, S is modified to abcazbd.
  In the fifth query, S does not change and is still abcazbd.
  In the sixth query, abcazbd contains five kinds of letters: a, b, c, d, and z, so we print 5.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def process_string_queries (s : String) (queries : List Query) : List Nat :=
    sorry

vc-theorems: |-
  theorem process_string_queries_no_queries (s : String) :
    process_string_queries s [] = [] := sorry
  
  theorem process_string_queries_only_substring_queries (s : String) (queries : List Query) 
    (h : ∀ q ∈ queries, q.queryType = 2 ∧ q.position ≤ s.length) :
    let result := process_string_queries s queries
    result.length = queries.length ∧ 
    (∀ x ∈ result, 0 ≤ x ∧ x ≤ 26) := sorry 
  
  theorem process_string_queries_only_change_queries (s : String) (queries : List Query)
    (h : ∀ q ∈ queries, q.queryType = 1 ∧ q.position ≤ s.length) :
    process_string_queries s queries = [] := sorry
  
  theorem process_string_queries_single_char (s : String) (i : Nat)
    (h1 : s.length > 0)
    (h2 : i ≤ s.length) :
    process_string_queries s [⟨2, i, (i, 'a')⟩] = [1] := sorry
  
  theorem process_string_queries_change_then_query (s : String) (pos : Nat) (new_char : Char)
    (h1 : s.length > 0)
    (h2 : pos ≤ s.length) :
    process_string_queries s [⟨1, pos, (pos, new_char)⟩, ⟨2, pos, (pos, new_char)⟩] = [1] := sorry
  
  /--
  info: [3, 1, 5]
  -/
  #guard_msgs in
  #eval process_string_queries "abcdbbd" [(2, 3, 6), (1, 5, "z"), (2, 1, 1), (1, 4, "a"), (1, 7, "d"), (2, 1, 7)]
  
  /--
  info: [3, 3]
  -/
  #guard_msgs in
  #eval process_string_queries "abc" [(2, 1, 3), (1, 2, "d"), (2, 1, 3)]
  
  /--
  info: [1, 2]
  -/
  #guard_msgs in
  #eval process_string_queries "aaa" [(2, 1, 3), (1, 2, "b"), (2, 1, 3)]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

