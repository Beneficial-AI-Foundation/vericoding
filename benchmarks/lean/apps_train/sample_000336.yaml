vc-description: |-
  Given an array which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these m subarrays.


  Note:
  If n is the length of array, assume the following constraints are satisfied:

  1 ≤ n ≤ 1000
  1 ≤ m ≤ min(50, n)



  Examples: 

  Input:
  nums = [7,2,5,10,8]
  m = 2

  Output:
  18

  Explanation:
  There are four ways to split nums into two subarrays.
  The best way is to split it into [7,2,5] and [10,8],
  where the largest sum among the two subarrays is only 18.
vc-preamble: |
  import Imports.AllImports

  def splitArray (nums : List Nat) (m : Nat) : Nat := sorry

  def listSum : List Nat → Nat 
    | [] => 0
    | (x::xs) => x + listSum xs
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def listMax : List Nat → Nat 
    | [] => 0
    | [x] => x
    | (x::xs) => max x (listMax xs)
vc-theorems: |
  theorem splitArray_bounds (nums : List Nat) (m : Nat) (h1 : nums ≠ []) (h2 : m > 0) :
    let m' := min m (List.length nums)
    let result := splitArray nums m'
    result ≥ (listMax nums) ∧ result ≤ (listSum nums) := sorry


  theorem splitArray_m_one (nums : List Nat) (h1 : nums ≠ []) :
    splitArray nums 1 = listSum nums := sorry


  theorem splitArray_m_len (nums : List Nat) (h1 : nums ≠ []) :
    splitArray nums (List.length nums) = listMax nums := sorry


  theorem splitArray_valid_split (nums : List Nat) (m : Nat) (h1 : nums ≠ []) (h2 : m > 0) :
    let m' := min m (List.length nums)
    let maxSum := splitArray nums m'
    ∃ splits : Nat, splits ≤ m' ∧
      ∃ partitions : List (List Nat),
        List.length partitions = splits ∧
        List.join partitions = nums ∧
        (∀ p ∈ partitions, listSum p ≤ maxSum) := sorry

  /--
  info: 18
  -/
  #guard_msgs in
  #eval split_array #[7, 2, 5, 10, 8] 2

  /--
  info: 9
  -/
  #guard_msgs in
  #eval split_array #[1, 2, 3, 4, 5] 2

  /--
  info: 4
  -/
  #guard_msgs in
  #eval split_array #[1, 4, 4] 3
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded
