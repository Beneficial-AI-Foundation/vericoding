vc-description: |-
  =====Problem Statement=====
  Given the names and grades for each student in a class of N students, store them in a nested list and print the name(s) of any student(s) having the second lowest grade.
  NOTE: If there are multiple students with the second lowest grade, order their names alphabetically and print each name on a new line.
  
  =====Example=====
  records = [["chi",20.0],["beta",50.0],["alpha",50.0]]
  The ordered list of scores is [20.0,50.0], so the second lowest score is 50.0. There are two students with that score: ["beta","alpha"]. Ordered alphabetically, the names are printed as:
  alpha
  beta
  
  =====Input Format=====
  The first line contains an integer, N, the number of students.
  The 2N subsequent lines describe each student over 2 lines.
  - The first line contains a student's name.
  - The second line contains their grade. 
  
  =====Constraints=====
  2≤N≤5
  There will always be one or more students having the second lowest grade.
  
  =====Output Format=====
  Print the name(s) of any student(s) having the second lowest grade in. If there are multiple students, order their names alphabetically and print each one on a new line.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def find_second_lowest_students (records: List (String × Float)) : List String :=
    sorry

vc-theorems: |-
  theorem all_same_grade_failures 
    (records: List (String × Float))
    (h1: records.length > 0)
    (h2: ∀ x y, x ∈ records → y ∈ records → x.2 = y.2) :
    ∀ result, result ≠ find_second_lowest_students records :=
  sorry
  
  theorem multiple_second_lowest_properties
    (n: Nat)
    (h1: n ≥ 2)
    (h2: n ≤ 100)
    (records := ("A", 10.0) :: 
                (List.range n).map (fun i => ("Student" ++ toString i, 20.0)) ++
                [("Z", 30.0)]) :
    let result := find_second_lowest_students records;
    -- Result has correct length
    result.length = n
    -- All elements start with "Student"
    ∧ (∀ x, x ∈ result → x.startsWith "Student")
    -- Adjacent elements are ordered
    ∧ (∀ i, i < result.length - 1 → result[i]! ≤ result[i+1]!) :=
  sorry
  
  theorem basic_properties
    (records := [("A", 10.0), ("B", 20.0), ("C", 20.0), ("D", 30.0)]) :
    let result := find_second_lowest_students records;
    -- Correct result elements
    result = ["B", "C"]
    -- Correct length 
    ∧ result.length = 2
    -- Adjacent elements are ordered
    ∧ (∀ i, i < result.length - 1 → result[i]! ≤ result[i+1]!) :=
  sorry
  
  /--
  info: ['Berry', 'Harry']
  -/
  #guard_msgs in
  #eval find_second_lowest_students [["Harry", 37.21], ["Berry", 37.21], ["Tina", 37.2], ["Akriti", 41], ["Harsh", 39]]
  
  /--
  info: ['alpha', 'beta']
  -/
  #guard_msgs in
  #eval find_second_lowest_students [["chi", 20.0], ["beta", 50.0], ["alpha", 50.0]]
  
  /--
  info: ['B', 'C']
  -/
  #guard_msgs in
  #eval find_second_lowest_students [["A", 10.0], ["B", 20.0], ["C", 20.0]]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

