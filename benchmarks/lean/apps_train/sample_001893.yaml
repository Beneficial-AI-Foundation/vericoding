vc-description: |-
  Implement a magic directory with buildDict, and search methods.



  For the method buildDict, you'll be given a list of non-repetitive words to build a dictionary.



  For the method search, you'll be given a word, and judge whether if you modify exactly one character into another character in this word, the modified word is in the dictionary you just built.


  Example 1:

  Input: buildDict(["hello", "leetcode"]), Output: Null
  Input: search("hello"), Output: False
  Input: search("hhllo"), Output: True
  Input: search("hell"), Output: False
  Input: search("leetcoded"), Output: False



  Note:

  You may assume that all the inputs are consist of lowercase letters a-z.
  For contest purpose, the test data is rather small by now. You could think about highly efficient algorithm after the contest.
  Please remember to RESET your class variables declared in class MagicDictionary, as static/class variables are persisted across multiple test cases. Please see here for more details.
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def defaultMagicDictionary : MagicDictionary := {
    l := []
    buildDict := fun words => words
    search := fun _ => false
  }
vc-theorems: |-
  theorem buildDict_preserves_words (md : MagicDictionary) (words : List String) : 
    md.buildDict words = words := sorry


  theorem length_mismatch_returns_false (md : MagicDictionary) (word : String) (delta : Nat) :
    delta ≥ 1 →
    ¬(md.search (word ++ String.mk (List.replicate delta 'a'))) := sorry


  theorem single_char_diff_returns_true (md : MagicDictionary) (word : String) (pos : Nat) :
    pos < word.length →
    let newChar := if word.get ⟨pos⟩ = 'x' then 'y' else 'x'
    let modified := word.set ⟨pos⟩ newChar
    md.search modified := sorry
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
