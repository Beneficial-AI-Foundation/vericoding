vc-description: |-
  You are the principal of the Cake school in chefland and today is your birthday. You want to treat each of the children with a small cupcake which is made by you. But there is a problem, You don't know how many students are present today.
  The students have gathered of the morning assembly in $R$ rows and $C$ columns. Now you have to calculate how many cakes you have to make such that each child gets a cupcake. 

  -----Input:-----
  - First-line will contain $T$, the number of test cases. Then the test cases follow. 
  - Each test case contains a single line of input, two integers $R$ and $C$. 

  -----Output:-----
  For each test case, output number of cupcakes you have to make.

  -----Constraints-----
  - $1 \leq T \leq 1000$
  - $2 \leq R,C \leq 10^6$

  -----Sample Input:-----
  1
  5 10

  -----Sample Output:-----
  50
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def calculate_cupcakes (rows cols : Nat) : Nat :=
    sorry
vc-theorems: |-
  theorem cupcakes_non_negative (rows cols : Nat) : 
    calculate_cupcakes rows cols ≥ 0 ∧ calculate_cupcakes rows cols = rows * cols :=
    sorry


  theorem cupcakes_positive (rows cols : Nat) (h1 : rows > 0) (h2 : cols > 0) :
    calculate_cupcakes rows cols > 0 ∧ 
    calculate_cupcakes rows cols = rows * cols ∧
    calculate_cupcakes rows cols ≥ max rows cols :=
    sorry


  theorem cupcakes_commutative (rows cols : Nat) :
    calculate_cupcakes rows cols = calculate_cupcakes cols rows :=
    sorry


  theorem cupcakes_zero_cases (n : Nat) :
    calculate_cupcakes 0 n = 0 ∧ 
    calculate_cupcakes n 0 = 0 ∧
    calculate_cupcakes 0 0 = 0 :=
    sorry
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible
