vc-description: |-
  You must have tried to solve the Rubik’s cube. You might even have succeeded at it. Rubik’s cube is a 3x3x3 cube which has 6 different color for each face.The Rubik’s cube is made from 26 smaller pieces which are called cubies. There are 6 cubies at the centre of each face and these comprise of a single color. There are 8 cubies at the 8 corners which comprise of exactly 3 colors. The 12 reamaining cubies comprise of exactly 2 colors.
  
  Apple has come up with a variation of the Rubik’s Cube, it’s the Rubik’s cuboid which has different colors on its 6 faces. The Rubik’s Cuboid comes in various sizes represented by M x N x O (M,N,O are natural numbers). Apple is giving away 100 Rubik’s cuboid for free to people who can answer a simple questions. Apple wants to know, in a Rubik’s cuboid with arbitrary dimensions, how many cubies would be there, which comprise of exactly 2 color.
  
  -----Input-----
  The input contains several test cases.The first line of the input contains an integer T denoting the number of test cases.
  
  Each test case comprises of 3 natural numbers, M,N & O, which denote the dimensions of the Rubiks Cuboid.
  
  -----Output-----
  For each test case you are required to output the number of  cubies which comprise of 2 squares, each of which is of a different color.
  
  -----Constraints-----
  - 1 ≤ T ≤ <1000
  - 1 ≤ M ≤ <100000
  - 1 ≤ N ≤ <100000
  - 1 ≤ O ≤ <100000
  
  -----Example-----
  Input:
  1
  3
  3
  3
  
  Output:
  
  12

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def solve_rubiks_cuboid (m n o : Nat) : Nat := sorry
  
  theorem solve_non_negative (m n o : Nat) : 
    solve_rubiks_cuboid m n o ≥ 0 := sorry

vc-theorems: |-
  theorem solve_commutative (m n o : Nat) :
    solve_rubiks_cuboid m n o = solve_rubiks_cuboid m o n ∧
    solve_rubiks_cuboid m n o = solve_rubiks_cuboid n m o ∧ 
    solve_rubiks_cuboid m n o = solve_rubiks_cuboid n o m ∧
    solve_rubiks_cuboid m n o = solve_rubiks_cuboid o m n ∧
    solve_rubiks_cuboid m n o = solve_rubiks_cuboid o n m := sorry
  
  theorem small_cubes_zero (m n o : Nat) :
    m ≤ 2 → n ≤ 2 → o ≤ 2 → solve_rubiks_cuboid m n o = 0 := sorry
  
  theorem increases_with_size (m n o : Nat) :
    solve_rubiks_cuboid (m + 1) n o ≥ solve_rubiks_cuboid m n o ∧
    solve_rubiks_cuboid m (n + 1) o ≥ solve_rubiks_cuboid m n o ∧
    solve_rubiks_cuboid m n (o + 1) ≥ solve_rubiks_cuboid m n o := sorry
  
  /--
  info: 12
  -/
  #guard_msgs in
  #eval solve_rubiks_cuboid 3 3 3
  
  /--
  info: 0
  -/
  #guard_msgs in
  #eval solve_rubiks_cuboid 1 1 1
  
  /--
  info: 12
  -/
  #guard_msgs in
  #eval solve_rubiks_cuboid 4 3 2

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible

