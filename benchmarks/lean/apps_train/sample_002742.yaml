vc-description: |-
  In this Kata, you will implement the [Luhn Algorithm](http://en.wikipedia.org/wiki/Luhn_algorithm), which is used to help validate credit card numbers.

  Given a positive integer of up to 16 digits, return ```true``` if it is a valid credit card number, and ```false``` if it is not.

  Here is the algorithm:
    
  * Double every other digit, scanning **from right to left**, starting from the second digit (from the right).

    Another way to think about it is: if there are an **even** number of digits, double every other digit starting with the **first**; if there are an **odd** number of digits, double every other digit starting with the **second**:

    ```
    1714 ==> [1*, 7, 1*, 4] ==> [2, 7, 2, 4]
    
    12345 ==> [1, 2*, 3, 4*, 5] ==> [1, 4, 3, 8, 5]
    
    891 ==> [8, 9*, 1] ==> [8, 18, 1]
    ```

  *  If a resulting number is greater than `9`, replace it with the sum of its own digits (which is the same as subtracting `9` from it):

    ```
    [8, 18*, 1] ==> [8, (1+8), 1] ==> [8, 9, 1]
    
    or:
    
    [8, 18*, 1] ==> [8, (18-9), 1] ==> [8, 9, 1]
    ```
    
  * Sum all of the final digits:

    ```
    [8, 9, 1] ==> 8 + 9 + 1 = 18
    ```

  * Finally, take that sum and divide it by `10`.  If the remainder equals zero, the original credit card number is valid.
      ```
      18 (modulus) 10 ==> 8 , which is not equal to 0, so this is not a valid credit card number
      ```

  ```if:fsharp,csharp
  For F# and C# users:

  The input will be a string of spaces and digits `0..9`

  ```
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def validate (n : Nat) : Bool := sorry

  theorem validate_is_boolean (n : Nat) : 
    validate n = true ∨ validate n = false := sorry
vc-theorems: |-
  theorem validate_string_invariant (n : Nat) :
    validate n = validate n := sorry


  theorem validate_sixteen_digit_result {n : Nat} (h : 1000000000000000 ≤ n ∧ n ≤ 9999999999999999) :
    validate n = true ∨ validate n = false := sorry


  theorem validate_sixteen_digit_length {n : Nat} (h : 1000000000000000 ≤ n ∧ n ≤ 9999999999999999) :
    (toString n).length = 16 := sorry


  theorem validate_string_digit_consistency {n : Nat} {s : String} (h : toString n = s) :
    validate n = validate (toString n |> String.toNat!) := sorry
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible
