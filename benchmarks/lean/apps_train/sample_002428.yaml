vc-description: |-
  Given a m * n matrix grid which is sorted in non-increasing order both row-wise and column-wise. 
  Return the number of negative numbers in grid.
   
  Example 1:
  Input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]
  Output: 8
  Explanation: There are 8 negatives number in the matrix.

  Example 2:
  Input: grid = [[3,2],[1,0]]
  Output: 0

  Example 3:
  Input: grid = [[1,-1],[-1,-1]]
  Output: 3

  Example 4:
  Input: grid = [[-1]]
  Output: 1

   
  Constraints:

  m == grid.length
  n == grid[i].length
  1 <= m, n <= 100
  -100 <= grid[i][j] <= 100
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def count_negatives (grid : List (List Int)) : Nat := sorry

  theorem count_negatives_matches_direct_count (grid : List (List Int)) : 
    count_negatives grid = (grid.bind (·.filter (·<0))).length := sorry
vc-theorems: |
  theorem count_negatives_nonnegative (grid : List (List Int)) :
    count_negatives grid ≥ 0 := sorry

  /--
  info: 8
  -/
  #guard_msgs in
  #eval count_negatives [[4, 3, 2, -1], [3, 2, 1, -1], [1, 1, -1, -2], [-1, -1, -2, -3]]

  /--
  info: 0
  -/
  #guard_msgs in
  #eval count_negatives [[3, 2], [1, 0]]

  /--
  info: 3
  -/
  #guard_msgs in
  #eval count_negatives [[1, -1], [-1, -1]]
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible
