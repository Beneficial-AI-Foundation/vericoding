vc-description: |-
  Computation of the date either previous or forthcoming dates is quiet easy. But it is quiet difficult to calculate the day from a particular given date. 
  You are required to find a day from a particular date given to you.
  
  -----Input-----
  It consists of a single line entry consisting of date in format dd mm yyyy.
  i.e. the input line consists of the three numbers written in order followed by spaces.
  Eg. Input for 18-12-1990 is be written as 18 12 1990
  
  -----Output-----
  It consists of single line output showing the day for that particular date.
  
  -----Example-----
  Input:
  14 3 2012
  
  Output:
  Wednesday

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def isValidDate (d : Date) : Bool := sorry
  
  def get_day_for_date (day month year : Nat) : Option Weekday := sorry

vc-theorems: |-
  theorem get_day_for_date_valid_output 
    {day month year : Nat}
    (h1: 1 ≤ day ∧ day ≤ 31)
    (h2: 1 ≤ month ∧ month ≤ 12) 
    (h3: 1 ≤ year ∧ year ≤ 9999)
    (h4: isValidDate ⟨day, month, year⟩ = true) :
    ∃ w : Weekday, get_day_for_date day month year = some w :=
  sorry
  
  theorem get_day_for_date_invalid_dates :
    get_day_for_date 31 2 2023 = none :=
  sorry
  
  theorem get_day_for_date_invalid_zero
    {day month year : Nat}
    (h1: day = 0 ∨ month = 0) :
    get_day_for_date day month year = none :=
  sorry
  
  /--
  info: 'Wednesday'
  -/
  #guard_msgs in
  #eval get_day_for_date 14 3 2012
  
  /--
  info: 'Saturday'
  -/
  #guard_msgs in
  #eval get_day_for_date 1 1 2000
  
  /--
  info: 'Monday'
  -/
  #guard_msgs in
  #eval get_day_for_date 25 12 2023

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

