vc-description: |-
  /-
  Just like in the ["father" kata](http://www.codewars.com/kata/find-fibonacci-last-digit/), you will have to return the last digit of the nth element in the Fibonacci sequence (starting with 1,1, to be extra clear, not with 0,1 or other numbers).
  
  You will just get much bigger numbers, so good luck bruteforcing your way through it ;)
  ```python
  last_fib_digit(1) == 1
  last_fib_digit(2) == 1
  last_fib_digit(3) == 2
  last_fib_digit(1000) == 5
  last_fib_digit(1000000) == 5
  ```
  ``` haskell
  lastFibDigit       1 == 1
  lastFibDigit       2 == 1
  lastFibDigit       3 == 2
  lastFibDigit    1000 == 5
  lastFibDigit 1000000 == 5
  ```
  -/

vc-preamble: |-
  def fibNaive (n : Nat) : Nat := 
    match n with
    | 0 => 0
    | 1 => 1
    | n + 2 =>
      let rec fib_iter (i : Nat) (a b : Nat) : Nat :=
        match i with
        | 0 => b
        | i + 1 => fib_iter i b (a + b)
      fib_iter (n) 0 1

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def lastFibDigit (n : Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem matches_naive_for_small_n (n : Nat) (h : n ≤ 100) :
    lastFibDigit n = fibNaive n % 10 :=
  sorry
  
  theorem returns_single_digit (n : Nat) :
    0 ≤ lastFibDigit n ∧ lastFibDigit n ≤ 9 :=
  sorry
  
  theorem periodic_behavior_sixty (n : Nat) :
    lastFibDigit n = lastFibDigit (n + 60) :=
  sorry
  
  theorem periodic_behavior_mod (n : Nat) :
    lastFibDigit n = lastFibDigit (n % 60) :=
  sorry
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval last_fib_digit 1
  
  /-
  info: 6
  -/
  -- #guard_msgs in
  -- #eval last_fib_digit 21
  
  /-
  info: 5
  -/
  -- #guard_msgs in
  -- #eval last_fib_digit 1000

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

