vc-description: |-
  Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.
  
  Note:
  
  Each of the array element will not exceed 100.
  The array size will not exceed 200.
  
  Example 1:
  
  Input: [1, 5, 11, 5]
  
  Output: true
  
  Explanation: The array can be partitioned as [1, 5, 5] and [11].
  
  Example 2:
  
  Input: [1, 2, 3, 5]
  
  Output: false
  
  Explanation: The array cannot be partitioned into equal sum subsets.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def canPartition (nums : List Nat) : Bool := sorry
  
  def List.sum : List Nat → Nat 
    | [] => 0
    | x::xs => x + List.sum xs

vc-theorems: |-
  theorem canPartition_returns_bool (nums : List Nat) :
    canPartition nums = true ∨ canPartition nums = false :=
  sorry
  
  theorem canPartition_odd_sum_false (nums : List Nat) :
    (List.sum nums % 2 ≠ 0) → canPartition nums = false :=
  sorry 
  
  theorem canPartition_same_nums_even_length (n : Nat) (len : Nat) :
    len % 2 = 0 →
    canPartition (List.replicate len n) = true :=
  sorry
  
  theorem canPartition_singleton_false (n : Nat) :
    canPartition [n] = false :=
  sorry
  
  theorem canPartition_pair_same_true (n : Nat) :
    canPartition [n, n] = true :=
  sorry
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval can_partition [1, 5, 5, 11]
  
  /--
  info: False
  -/
  #guard_msgs in
  #eval can_partition [1, 2, 3, 5]
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval can_partition [2, 2, 2, 2]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

