vc-description: |-
  Given a rooted binary tree, return the lowest common ancestor of its deepest leaves.
  Recall that:
  
  The node of a binary tree is a leaf if and only if it has no children
  The depth of the root of the tree is 0, and if the depth of a node is d, the depth of each of its children is d+1.
  The lowest common ancestor of a set S of nodes is the node A with the largest depth such that every node in S is in the subtree with root A.
  
  Example 1:
  Input: root = [1,2,3]
  Output: [1,2,3]
  Explanation: 
  The deepest leaves are the nodes with values 2 and 3.
  The lowest common ancestor of these leaves is the node with value 1.
  The answer returned is a TreeNode object (not an array) with serialization "[1,2,3]".
  
  Example 2:
  Input: root = [1,2,3,4]
  Output: [4]
  
  Example 3:
  Input: root = [1,2,3,4,5]
  Output: [2,4,5]
  
  Constraints:
  
  The given tree will have between 1 and 1000 nodes.
  Each node of the tree will have a distinct value between 1 and 1000.

vc-preamble: |-
  def build_tree (values : List Int) : Option TreeNode := sorry
  def lcaDeepestLeaves (root : TreeNode) : TreeNode := sorry
  
  def get_depth (node : TreeNode) : Int := sorry
  def get_leaves_at_depth (node : TreeNode) (target_depth : Int) (current_depth : Int := 0) : List TreeNode := sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def find_node (node target : TreeNode) : Bool := sorry
  
  theorem lca_deepest_leaves_in_tree (values : List Int) (tree : TreeNode) 
    (h1 : build_tree values = some tree) :
    find_node tree (lcaDeepestLeaves tree) = true := sorry

vc-theorems: |-
  theorem lca_deepest_leaves_contains_all_deepest_leaves (values : List Int) (tree : TreeNode)
    (h1 : build_tree values = some tree)
    (max_depth : Int)
    (h2 : max_depth = get_depth tree)
    (deepest_leaves : List TreeNode) 
    (h3 : deepest_leaves = get_leaves_at_depth tree max_depth) :
    ∀ leaf, leaf ∈ deepest_leaves → find_node (lcaDeepestLeaves tree) leaf = true := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

