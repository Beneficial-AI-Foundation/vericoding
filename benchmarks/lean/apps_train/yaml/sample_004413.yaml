vc-description: |-
  Because my other two parts of the serie were pretty well received I decided to do another part.
  
  Puzzle Tiles
  
  You will get two Integer n (width) and m (height) and your task is to draw following pattern. Each line is seperated with '\n'.
  
  Both integers are equal or greater than 1. No need to check for invalid parameters.
  There are no whitespaces at the end of each line.
  
  e.g.:
  
                                         \_( )\_\_ \_( )\_\_ \_( )\_\_ \_( )\_\_
                                       \_|     \_|     \_|     \_|     \_|
                                      (\_   \_ (\_   \_ (\_   \_ (\_   \_ (\_
                                       |\_\_( )\_|\_\_( )\_|\_\_( )\_|\_\_( )\_|
                                       |\_     |\_     |\_     |\_     |\_
               puzzleTiles(4,3)=>       \_) \_   \_) \_   \_) \_   \_) \_   \_)
                                       |\_\_( )\_|\_\_( )\_|\_\_( )\_|\_\_( )\_|
                                       \_|     \_|     \_|     \_|     \_|
                                      (\_   \_ (\_   \_ (\_   \_ (\_   \_ (\_
                                       |\_\_( )\_|\_\_( )\_|\_\_( )\_|\_\_( )\_|
  
  For more informations take a look in the test cases!
  
   Serie: ASCII Fun
  
  ASCII Fun #1: X-Shape
  ASCII Fun #2: Funny Dots
  ASCII Fun #3: Puzzle Tiles
  ASCII Fun #4: Build a pyramid

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def puzzle_tiles (width height : Nat) : String := sorry
  
  def String.repeat (s : String) (n : Nat) : String := sorry

vc-theorems: |-
  theorem puzzle_tiles_result_lines_first_line {w h : Nat} :
    let result := puzzle_tiles w h
    let lines := result.splitOn "\n"
    lines[0]! = "  " ++ (String.repeat " _( )__" w) := sorry
  
  theorem puzzle_tiles_even_pattern {w h : Nat} {i : Nat} :
    let result := puzzle_tiles w h
    let lines := result.splitOn "\n"
    let remaining_lines := lines.tail
    2 * i / 3 % 2 = 0 →
    i < remaining_lines.length - 2 →
    (remaining_lines[i]!).endsWith "_|" = true ∧
    (remaining_lines[i+1]!).endsWith "(_" = true ∧
    (remaining_lines[i+2]!).endsWith "_|" = true := sorry
  
  theorem puzzle_tiles_odd_pattern {w h : Nat} {i : Nat} :
    let result := puzzle_tiles w h
    let lines := result.splitOn "\n"
    let remaining_lines := lines.tail
    2 * i / 3 % 2 = 1 →
    i < remaining_lines.length - 2 →
    (remaining_lines[i]!).endsWith "|_" = true ∧
    (remaining_lines[i+1]!).endsWith "_)" = true ∧
    (remaining_lines[i+2]!).endsWith "_|" = true := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

