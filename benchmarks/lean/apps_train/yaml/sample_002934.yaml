vc-description: |-
  You will be given a string and you task is to check if it is possible to convert that string into a palindrome by removing a single character. If the string is already a palindrome, return `"OK"`. If it is not, and we can convert it to a palindrome by removing one character, then return `"remove one"`, otherwise return `"not possible"`. The order of the characters should not be changed.
  
  For example:
  ```Haskell
  solve("abba") = "OK". -- This is a palindrome
  solve("abbaa") = "remove one". -- remove the 'a' at the extreme right. 
  solve("abbaab") = "not possible". 
  ```
  
  More examples in the test cases. 
  
  Good luck!
  
  If you like this Kata, please try [Single Character Palindromes II](https://www.codewars.com/kata/5a66ea69e6be38219f000110)

vc-preamble: |-
  def solve (s : String) : String := sorry
  
  def isPalindrome (s : String) : Bool := sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def canBePalindromeWithOneRemoval (s : String) : Bool := sorry
  
  def reverse (s : String) : String := sorry

vc-theorems: |-
  theorem solve_result_valid (s : String) :
    solve s = "OK" ∨ solve s = "remove one" ∨ solve s = "not possible" := sorry
  
  theorem ok_means_palindrome (s : String) :
    solve s = "OK" → isPalindrome s := sorry
  
  theorem remove_one_means_possible_palindrome (s : String) :
    solve s = "remove one" → canBePalindromeWithOneRemoval s := sorry
  
  theorem not_possible_means_neither (s : String) :
    solve s = "not possible" → ¬isPalindrome s ∧ ¬canBePalindromeWithOneRemoval s := sorry
  
  theorem solve_symmetric (s : String) :
    solve s = solve (reverse s) := sorry
  
  theorem single_char_ok (s : String) : 
    s.length = 1 → solve s = "OK" := sorry
  
  theorem two_chars_property (s : String) (h : s.length = 2) :
    (s.front = s.back → solve s = "OK") ∧
    (s.front ≠ s.back → solve s = "remove one") := sorry
  
  /--
  info: 'OK'
  -/
  #guard_msgs in
  #eval solve "abba"
  
  /--
  info: 'remove one'
  -/
  #guard_msgs in
  #eval solve "abbaa"
  
  /--
  info: 'not possible'
  -/
  #guard_msgs in
  #eval solve "abbaab"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

