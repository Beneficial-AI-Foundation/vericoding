vc-description: |-
  Permutation p is an ordered set of integers p_1,   p_2,   ...,   p_{n}, consisting of n distinct positive integers not larger than n. We'll denote as n the length of permutation p_1,   p_2,   ...,   p_{n}.
  
  Your task is to find such permutation p of length n, that the group of numbers |p_1 - p_2|, |p_2 - p_3|, ..., |p_{n} - 1 - p_{n}| has exactly k distinct elements.
  
  -----Input-----
  
  The single line of the input contains two space-separated positive integers n, k (1 ≤ k < n ≤ 10^5).
  
  -----Output-----
  
  Print n integers forming the permutation. If there are multiple answers, print any of them.
  
  -----Examples-----
  Input
  3 2
  
  Output
  1 3 2
  
  Input
  3 1
  
  Output
  1 2 3
  
  Input
  5 2
  
  Output
  1 3 2 4 5
  
  -----Note-----
  
  By |x| we denote the absolute value of number x.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def find_permutation (n k : Nat) : List Nat := sorry
  
  def count_differences (arr : List Nat) : Nat := sorry

vc-theorems: |-
  theorem find_perm_length (n k : Nat) (h1 : n ≥ 2) (h2 : k ≥ 1) (h3 : k ≤ n-1) :
    List.length (find_permutation n k) = n := sorry
  
  theorem find_perm_contains_all (n k : Nat) (h1 : n ≥ 2) (h2 : k ≥ 1) (h3 : k ≤ n-1) (i : Nat) (hi : i < n) :
    i + 1 ∈ find_permutation n k := sorry
  
  theorem find_perm_k_one (n : Nat) (h : n ≥ 1) :
    find_permutation n 1 = List.range n := sorry
  
  theorem find_perm_edge_cases :
    find_permutation 1 1 = [1] ∧ 
    find_permutation 5 1 = [1,2,3,4,5] := sorry
  
  theorem find_perm_three_two :
    count_differences (find_permutation 3 2) = 2 := sorry
  
  /--
  info: [1, 3, 2]
  -/
  #guard_msgs in
  #eval find_permutation 3 2
  
  /--
  info: [1, 2, 3]
  -/
  #guard_msgs in
  #eval find_permutation 3 1
  
  /--
  info: [1, 3, 2, 4, 5]
  -/
  #guard_msgs in
  #eval find_permutation 5 2

vc-postamble: |-
  -- Apps difficulty: competition
  -- Assurance level: unguarded

