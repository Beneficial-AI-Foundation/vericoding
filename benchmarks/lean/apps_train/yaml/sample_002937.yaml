vc-description: |-
  Find the 2nd largest integer in array
  If the array has no 2nd largest integer then return nil.
  Reject all non integers elements and then find the 2nd largest integer in array
  
  find_2nd_largest([1,2,3]) => 2
  
  find_2nd_largest([1,1,1,1,1]) => nil
  because all elements are same. Largest no. is 1. and there is no 2nd largest no.
  
  find_2nd_largest([1,'a','2',3,3,4,5,'b']) => 4
  as after rejecting non integers array will be [1,3,3,4,5]
  Largest no. is 5. and 2nd largest is 4.
  
  Return nil if there is no 2nd largest integer.
  Take care of big numbers as well

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def find_2nd_largest {α : Type u} (arr : List α) : Option α := sorry
  
  theorem find_2nd_largest_mixed_property 
    {α : Type} (arr : List (Int ⊕ String)) :
    let ints := arr.filterMap (fun x => match x with | Sum.inl i => some i | _ => none)
    match find_2nd_largest arr with
    | none => ints.eraseDups.length ≤ 1
    | some x => ints.eraseDups.length > 1 ∧ 
               match x with
               | Sum.inl i => ∃ j, j = i ∧ (ints.eraseDups.filter (fun y => y > j)).length = 1
               | _ => False
    := sorry

vc-theorems: |-
  theorem find_2nd_largest_ints_property
    (arr : List Int) (h1 : arr.length ≥ 2) (h2 : arr.eraseDups = arr) :
    match find_2nd_largest arr with
    | none => False 
    | some x => ∃ max min : Int, 
               (∀ y ∈ arr, y ≤ max) ∧
               (∀ y ∈ arr, y ≥ min) ∧
               x ≤ max ∧ 
               x ≥ min ∧ 
               x ≠ max
    := sorry
  
  theorem find_2nd_largest_ordering
    (arr : List Int) :
    match find_2nd_largest arr with
    | none => True
    | some x => (arr.eraseDups.filter (fun y => y > x)).length = 1
    := sorry
  
  /--
  info: 2
  -/
  #guard_msgs in
  #eval find_2nd_largest [1, 2, 3]
  
  /--
  info: 4
  -/
  #guard_msgs in
  #eval find_2nd_largest [1, "a", "2", 3, 3, 4, 5, "b"]
  
  /--
  info: 3333333333333333333334
  -/
  #guard_msgs in
  #eval find_2nd_largest [1, "a", "2", 3, 3, 3333333333333333333334, 544444444444444444444444444444, "b"]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

