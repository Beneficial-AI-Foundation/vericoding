vc-description: |-
  Define a "prime prime" number to be a rational number written as one prime number over another prime number: `primeA / primeB` (e.g. `7/31`)
  
  Given a whole number `N`, generate the number of "prime prime" rational numbers less than 1, using only prime numbers between `0` and `N` (non inclusive).
  
  Return the count of these "prime primes", and the integer part  of their sum.
  
  ## Example
  
  ```python
  N = 6
  
  # The "prime primes" less than 1 are:
  2/3, 2/5, 3/5               # count: 3
  
  2/3 + 2/5 + 3/5 = 1.6667    # integer part: 1
  
  Thus, the function should return 3 and 1.
  ```

vc-preamble: |-
  def sieve (n : Nat) : List Nat := sorry
  
  def prime_primes (n : Nat) : Nat × Nat := sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def is_prime (n : Nat) : Bool := sorry
  
  theorem sieve_sorted (n : Nat) (h : n ≥ 2) :
    let primes := sieve n
    ∀ i h1 h2, primes.get ⟨i, h1⟩ < primes.get ⟨i+1, h2⟩ := sorry

vc-theorems: |-
  theorem prime_primes_nonneg (n : Nat) (h : n ≥ 2) :
    let (count, total) := prime_primes n
    count ≥ 0 ∧ total ≥ 0 := sorry
  
  theorem prime_primes_small_bound (n : Nat) (h : n ≥ 2) (h2 : n ≤ 10) :
    let (count, _) := prime_primes n
    count ≤ n * n / 2 := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

