vc-description: |-
  The Fibonacci numbers are the numbers in the following integer sequence (Fn):
  >0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, ...
  
  such as 
  >F(n) = F(n-1) + F(n-2) with F(0) = 0 and F(1) = 1.
  
  Given a number, say prod (for product), we search two Fibonacci numbers F(n) and F(n+1) verifying 
  >F(n) * F(n+1) = prod.
  
  Your function productFib takes an integer (prod) and returns
  an array: 
  ```
  [F(n), F(n+1), true] or {F(n), F(n+1), 1} or (F(n), F(n+1), True)
  ```
  depending on the language if F(n) * F(n+1) = prod.
  
  If you don't find two consecutive F(m) verifying `F(m) * F(m+1) = prod`you will return
  ```
  [F(m), F(m+1), false] or {F(n), F(n+1), 0} or (F(n), F(n+1), False)
  ```
  F(m) being the smallest one such as `F(m) * F(m+1) > prod`.
  
  ### Some Examples of Return:
  (depend on the language)
  
  ```
  productFib(714) # should return (21, 34, true), 
                  # since F(8) = 21, F(9) = 34 and 714 = 21 * 34
  
  productFib(800) # should return (34, 55, false), 
                  # since F(8) = 21, F(9) = 34, F(10) = 55 and 21 * 34 < 800 < 34 * 55
  -----
  productFib(714) # should return [21, 34, true], 
  productFib(800) # should return [34, 55, false], 
  -----
  productFib(714) # should return {21, 34, 1}, 
  productFib(800) # should return {34, 55, 0},        
  -----
  productFib(714) # should return {21, 34, true}, 
  productFib(800) # should return {34, 55, false}, 
  ```
  
  ### Note:
  
  - You can see examples for your language in "Sample Tests".

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def productFib (n : Nat) : (Nat × Nat × Bool) := sorry
  
  def fib : Nat → Nat := sorry

vc-theorems: |-
  theorem product_fib_valid_structure 
    (n : Nat) 
    (h : n ≤ 10^8) :
    let (a, b, bool) := productFib n
    a ≥ 0 ∧ b ≥ a := sorry
  
  theorem product_fib_consecutive_fibs
    (n : Nat)
    (h : n ≤ 10^8) :
    let (a, b, _) := productFib n
    ∃ k, fib k = a ∧ fib (k + 1) = b := sorry
  
  theorem product_fib_boolean_correctness
    (n : Nat)
    (h : n ≤ 10^8) :
    let (a, b, isExact) := productFib n
    (isExact → a * b = n) ∧ 
    (¬isExact → a * b > n) ∧
    (¬isExact → ∃ k, fib k = a ∧ fib (k-1) * fib k < n) := sorry
  
  /--
  info: [21, 34, True]
  -/
  #guard_msgs in
  #eval productFib 714
  
  /--
  info: [34, 55, False]
  -/
  #guard_msgs in
  #eval productFib 800
  
  /--
  info: [0, 1, True]
  -/
  #guard_msgs in
  #eval productFib 0

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

