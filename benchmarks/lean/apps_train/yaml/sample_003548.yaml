vc-description: |-
  **Steps**
  1. Square the numbers that are greater than zero.
  2. Multiply by 3 every third number.
  3. Multiply by -1 every fifth number.
  4. Return the sum of the sequence.
  
  **Example**   
  `{ -2, -1, 0, 1, 2 }` returns `-6`
  ```
  1. { -2, -1, 0, 1 * 1, 2 * 2 }
  2. { -2, -1, 0 * 3, 1, 4 }
  3. { -2, -1, 0, 1, -1 * 4 }
  4. -6
  ```
  
  P.S.: The sequence consists only of integers. And try not to use "for", "while" or "loop" statements.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-

vc-theorems: |-
  theorem operation_type_nonempty {sequence : List Int} (h : sequence ≠ []) :
    ∃ (result : Int), operation sequence = result :=
    sorry
  
  theorem operation_empty_case :
    operation [] = 0 :=
    operation_empty operation
  
  theorem operation_type_bounded_length {sequence : List Int} (h : sequence.length ≤ 100) :
    ∃ (result : Int), operation sequence = result :=
    sorry
  
  theorem operation_type_repeated (x : Int) (length : Nat) (h : 0 < length ∧ length ≤ 10) :
    ∃ (result : Int), operation (List.replicate length x) = result :=
    sorry
  
  theorem operation_type_alternating_signs {sequence : List Int} (h : sequence ≠ []) :
    ∃ (result : Int), operation sequence = result :=
    sorry
  
  theorem operation_type_small_ints {sequence : List Int}
      (h1 : sequence ≠ [])
      (h2 : sequence.length ≤ 10)
      (h3 : ∀ x ∈ sequence, -100 ≤ x ∧ x ≤ 100) :
    ∃ (result : Int), operation sequence = result :=
    sorry
  
  /--
  info: -6
  -/
  #guard_msgs in
  #eval calc [-2, -1, 0, 1, 2]
  
  /--
  info: 31
  -/
  #guard_msgs in
  #eval calc [0, 2, 1, -6, -3, 3]
  
  /--
  info: 5
  -/
  #guard_msgs in
  #eval calc [1, 1, 1, 1, 1]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

