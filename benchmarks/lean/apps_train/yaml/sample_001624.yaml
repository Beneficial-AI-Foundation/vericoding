vc-description: |-
  /-
  Salmon is playing a game!
  He is given two integers $N$ and $K$. His goal is to output $K$ pairs $(x_i,y_i)$. He creates a function $f$ such that $f(x_i) = y_i$ and $f$ is undefined for all other values of $x$. His pairs must then meet the following conditions:
  - All $x_i$ are distinct.
  - All $y_i$ are distinct.
  - All $x_i, y_i$ are in the range $[0,2^N - 1]$ and are integers.
  - $f(f(x_i))$ is defined for all $i$.
  - Let $H(x)$ be the number of set bits in the binary representation of $x$. Then, $H(x_i) \neq H(f(f(x_i)))$ for all $i$.
  Unfortunately, Salmon is unable to solve this. Help Salmon win the game!
  
  If there are multiple correct solutions, you may output any one of them. It can be proven that a solution exists for all $N$ and $K$ that meet constraints.
  
  -----Input-----
  - The first line input contains a single integer $T$ denoting the number of testcases
  - Each of the next $T$ lines contains two space-separated integers $N$ and $K$ respectively.
  
  -----Output-----
  - Output $K$ lines for each testcase.
  - The $i$-th line of a testcase should contain two space-separated integers: $x_i$ and $y_i$, following the given constraints.
  
  -----Constraints-----
  - $1 \leq T \leq 2^{15}$
  - $3 \leq N \leq 18$ 
  - $3 \leq K \leq 2^N$ 
  - The sum of $2^N$ over all testcases doesn't exceed $2^{18}$
  
  -----Subtasks-----
  - Subtask 1 [20 points]: $K \leq 8$
  - Subtask 2 [40 points]: $K = 2^N$
  - Subtask 3 [40 points]: No additional constraints.
  
  -----Sample Input-----
  2
  3 7
  4 6
  
  -----Sample Output-----
  5 3
  1 7
  0 4
  2 5
  3 1
  4 2 
  7 0
  1 10
  10 14
  15 1
  14 13
  5 15
  13 5
  
  -----Explanation-----
  In the answer to the first testcase, there are 7 pairs. $x_i$ and $y_i$ are all in the range $[0,2^3 - 1]$, which is the range $[0,7]$. All values of $x_i$ are distinct, and all values of $y_i$ are distinct. However, note that some integers appear in both lists. For example, 5 appears both as $x_1$ and as $y_4$. This is allowed. For all $x_i$, $f(f(x_i))$ is defined and $H(f(f(x_i))) \neq H(x_i)$. For example, $f(f(7)) = 4$. $H(7) = 3$, but $H(4) = 1$. Therefore, $H(f(f(7))) \neq H(7)$, as desired.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def solve_salmon_game (n k : Nat) : List (Nat × Nat) := sorry 
  
  theorem valid_edge_range {n k : Nat} {edges : List (Nat × Nat)}
    (h1 : n ≥ 2) (h2 : k ≥ 3) (h3 : k ≤ 2^n)
    (h4 : edges = solve_salmon_game n k) :
    ∀ (e : Nat × Nat), e ∈ edges → 
      e.1 < 2^n ∧ e.2 < 2^n ∧ e.1 ≠ e.2 := sorry

vc-theorems: |-
  theorem valid_edge_count {n k : Nat} {edges : List (Nat × Nat)} 
    (h1 : n ≥ 2) (h2 : k ≥ 3) (h3 : k ≤ 2^n)
    (h4 : edges = solve_salmon_game n k) :
    edges.length = k := sorry
  
  theorem forms_cycle {n k : Nat} {edges : List (Nat × Nat)}
    (h1 : n ≥ 2) (h2 : k ≥ 3) (h3 : k ≤ 2^n) 
    (h4 : edges = solve_salmon_game n k) :
    ∃ (start : Nat), start ∈ (edges.map Prod.fst) ∧
    ∃ (vertices : List Nat), vertices.length = k ∧
      vertices.head? = some start ∧
      ∀ i, i < k - 1 → 
        ∃ v1 v2, (v1, v2) ∈ edges ∧ 
        vertices.get? i = some v1 ∧ 
        vertices.get? (i+1) = some v2 := sorry
  
  theorem special_case_k3 {n : Nat} {edges : List (Nat × Nat)}
    (h1 : n ≥ 2)
    (h2 : edges = solve_salmon_game n 3) :
    edges = [(0,1), (1,3), (3,0)] := sorry
  
  theorem special_case_k4_cycle {n : Nat} {edges : List (Nat × Nat)}
    (h1 : n ≥ 2)
    (h2 : edges = solve_salmon_game n 4) :
    edges.length = 4 ∧
    ∃ (start : Nat), start ∈ (edges.map Prod.fst) ∧
    ∃ (vertices : List Nat), vertices.length = 4 ∧
      vertices.head? = some start ∧
      ∀ i, i < 3 → 
        ∃ v1 v2, (v1, v2) ∈ edges ∧ 
        vertices.get? i = some v1 ∧ 
        vertices.get? (i+1) = some v2 := sorry
  
  /-
  info: k
  -/
  -- #guard_msgs in
  -- #eval len solve_salmon_game(n, k)
  
  /-
  info: k
  -/
  -- #guard_msgs in
  -- #eval len solve_salmon_game(n, k)
  
  /-
  info: k
  -/
  -- #guard_msgs in
  -- #eval len solve_salmon_game(n, k)

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

