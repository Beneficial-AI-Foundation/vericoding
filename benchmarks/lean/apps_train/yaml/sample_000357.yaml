vc-description: |-
  Find the length of the longest substring T of a given string (consists of lowercase letters only) such that every character in T appears no less than k times.
  
  Example 1:
  
  Input:
  s = "aaabb", k = 3
  
  Output:
  3
  
  The longest substring is "aaa", as 'a' is repeated 3 times.
  
  Example 2:
  
  Input:
  s = "ababbc", k = 2
  
  Output:
  5
  
  The longest substring is "ababb", as 'a' is repeated 2 times and 'b' is repeated 3 times.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def longest_substring_with_k_occurrences (s : String) (k : Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem output_bounds (s : String) (k : Nat) 
    (h1 : s.length > 0) (h2 : k > 0) (h3 : k ≤ 10) :
    let result := longest_substring_with_k_occurrences s k
    0 ≤ result ∧ result ≤ s.length :=
    sorry
  
  theorem singleton_strings_k_one (s : String) (k : Nat)
    (h1 : s.length = 1) (h2 : k = 1) :
    longest_substring_with_k_occurrences s k = 1 :=
    sorry
  
  theorem singleton_strings_k_gt_one (s : String) (k : Nat)
    (h1 : s.length = 1) (h2 : k > 1) :
    longest_substring_with_k_occurrences s k = 0 :=
    sorry
  
  /--
  info: 3
  -/
  #guard_msgs in
  #eval longest_substring_with_k_occurrences "aaabb" 3
  
  /--
  info: 5
  -/
  #guard_msgs in
  #eval longest_substring_with_k_occurrences "ababbc" 2
  
  /--
  info: 0
  -/
  #guard_msgs in
  #eval longest_substring_with_k_occurrences "abcdef" 2

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible

