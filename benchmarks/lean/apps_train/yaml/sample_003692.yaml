vc-description: |-
  /-
  Note : Issues Fixed with python 2.7.6 , Use any one you like :D , ( Thanks to 
  
  Time , time , time . Your task is to write a function that will return the degrees on a analog clock from a digital time that is passed in as parameter . The digital time is type string and will be in the format 00:00 . You also need to return the degrees on the analog clock in type string and format 360:360 . Remember to round of the degrees . Remeber the basic time rules and format like 24:00 = 00:00 and 12:60 = 13:00 . Create your own validation that should return "Check your time !" in any case the time is incorrect or the format is wrong , remember this includes passing in negatives times like "-01:-10".
  ``` 
  A few examples :
  clock_degree("00:00") will return : "360:360"
  clock_degree("01:01") will return : "30:6"
  clock_degree("00:01") will return : "360:6"
  clock_degree("01:00") will return : "30:360"
  clock_degree("01:30") will return : "30:180"
  clock_degree("24:00") will return : "Check your time !"
  clock_degree("13:60") will return : "Check your time !"
  clock_degree("20:34") will return : "240:204"
  ```
  Remember that discrete hour hand movement is required - snapping to each hour position and also coterminal angles are not allowed. Goodluck and Enjoy !
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def clock_degree (time: String): String := sorry
  
  theorem valid_time_degree_bounds 
    (h: Nat) (m: Nat) 
    (h_valid: h ≤ 23)
    (m_valid: m ≤ 59)
    (result: String)
    (h_result: result = clock_degree s!"{h}:{m}")
    (h_not_check: result ≠ "Check your time !")
    (hours minutes: String)
    (h_split: result.splitOn ":" = [hours, minutes]): 
    0 ≤ hours.toNat! ∧ hours.toNat! ≤ 360 ∧ 
    0 ≤ minutes.toNat! ∧ minutes.toNat! ≤ 360 := sorry

vc-theorems: |-
  theorem invalid_format_check
    (s: String)
    (h_invalid: ¬s.contains ':' ∨ ¬(s.splitOn ":").all (·.all Char.isDigit)):
    clock_degree s = "Check your time !" := sorry
  
  theorem zero_time:
    clock_degree "00:00" = "360:360" := sorry
  
  theorem hour_conversion_12hr
    (h: Nat) (m: Nat)
    (h_valid: h ≤ 11)
    (m_valid: m ≤ 59)
    (result: String)
    (h_result: result = clock_degree s!"{h}:{m}")
    (hours minutes: Nat)
    (h_split: (result.splitOn ":").map String.toNat! = [hours, minutes]):
    (hours = 360 ∨ hours = h * 30) ∧
    (minutes = 360 ∨ minutes = m * 6) := sorry
  
  theorem hour_conversion_24hr
    (h: Nat) (m: Nat)
    (h_valid: 12 ≤ h ∧ h ≤ 23)
    (m_valid: m ≤ 59)
    (result: String)
    (h_result: result = clock_degree s!"{h}:{m}")
    (hours minutes: Nat)
    (h_split: (result.splitOn ":").map String.toNat! = [hours, minutes]):
    (hours = 360 ∨ hours = (h % 12) * 30) ∧
    (minutes = 360 ∨ minutes = m * 6) := sorry
  
  /-
  info: '30:6'
  -/
  -- #guard_msgs in
  -- #eval clock_degree "01:01"
  
  /-
  info: '360:360'
  -/
  -- #guard_msgs in
  -- #eval clock_degree "00:00"
  
  /-
  info: 'Check your time !'
  -/
  -- #guard_msgs in
  -- #eval clock_degree "24:00"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

