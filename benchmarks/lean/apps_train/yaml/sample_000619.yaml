vc-description: |-
  You will be given m strings. For each of those strings, you need to count the total number of appearances of that string as substrings in all possible strings of length n containing only lower case English letters. 
  
  A string may appear in a string multiple times. Also, these appearances may overlap. All these must be counted separately. For example, aa appears thrice in the string aaacaa: aaacaa, aaacaa and aaacaa.
  
  -----Input-----
  - The first line contains one integer, T, the number of test cases. The description of each test case follows:
  - The first line of each test case will contain two integers n and m.
  - The ith of the next m lines will have one string in each line. All the strings will consist only of lower case English letters.
  
  -----Output-----
  - For each test case, print "Case x:" (without quotes. x is the test case number, 1-indexed) in the first line.
  - Then print m lines. The ith line should contain the number of appearances of the ith string in all possible strings of length n. As the numbers can be very large, print the answers modulo 109+7.
  
  -----Constraints-----
  - 1 ≤ T ≤ 100
  - 1 ≤ n ≤ 100000
  - 1 ≤ m ≤ 1000 
  - 1 ≤ Length of every string in input
  - 1 ≤ Total length of all strings in one test case ≤ 5 * 105
  - 1 ≤ Total length of all strings in one test file ≤ 5 * 106
  
  -----Example-----
  Input:
  3
  2 1
  aa
  2 1
  d
  12 3
  cdmn
  qweewef
  qs
  
  Output:
  Case 1:
  1
  Case 2:
  52
  Case 3:
  443568031
  71288256
  41317270
  
  -----Explanation:-----
  Testcase 1: aa is the only string of length 2 which contains aa as a substring. And it occurs only once. Hence the answer is 1.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def MOD := 1000000007
  
  def count_substring_appearances (n: Nat) (strings: List String) : List Nat :=
    sorry

vc-theorems: |-
  theorem count_substring_output_length {n: Nat} {strings: List String} :
    strings ≠ [] →
    List.length (count_substring_appearances n strings) = List.length strings :=
    sorry
  
  theorem count_substring_long_string_zero {n: Nat} {s: String} {strings: List String} :  
    String.length s > n →
    s ∈ strings → 
    ∃ i, i < List.length strings ∧ 
      (List.get! (count_substring_appearances n strings) i) = 0 :=
    sorry
  
  theorem count_substring_empty_list {n: Nat} : 
    count_substring_appearances n [] = [] :=
    sorry
  
  theorem count_substring_min_n :
    count_substring_appearances 1 ["a"] = [1] ∧
    count_substring_appearances 1 ["aa"] = [0] :=
    sorry
  
  /--
  info: [1]
  -/
  #guard_msgs in
  #eval count_substring_appearances 2 ["aa"]
  
  /--
  info: [52]
  -/
  #guard_msgs in
  #eval count_substring_appearances 2 ["d"]
  
  /--
  info: [443568031, 71288256, 41317270]
  -/
  #guard_msgs in
  #eval count_substring_appearances 12 ["cdmn", "qweewef", "qs"]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible

