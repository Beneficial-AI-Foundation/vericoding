vc-description: |-
  The chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.
  
  -----Input:-----
  - First-line will contain $T$, the number of test cases. Then the test cases follow. 
  - Each test case contains a single line of input, one integer $K$. 
  
  -----Output:-----
  For each test case, output as the pattern.
  
  -----Constraints-----
  - $1 \leq T \leq 100$
  - $1 \leq K \leq 100$
  
  -----Sample Input:-----
  4
  1
  2
  3
  4
  
  -----Sample Output:-----
  1
  12
  34
  123
  456
  789
  1234
  5678
  9101112
  13141516
  
  -----EXPLANATION:-----
  No need, else pattern can be decode easily.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def solve_pattern (k : Nat) : List String := sorry
  
  theorem test_base_case :
    solve_pattern 1 = ["1"] := sorry

vc-theorems: |-
  theorem test_pattern_props {k : Nat} (h : k > 0) (h2 : k ≤ 10) :
    let result := solve_pattern k
    -- Number of rows equals k
    List.length result = k ∧  
    -- First row is 1..k concatenated
    List.head! result = toString k ∧ 
    -- Each element is a string containing only digits
    ∀ x ∈ result, ∃ n : Nat, toString n = x
    := sorry
  
  /--
  info: ['1']
  -/
  #guard_msgs in
  #eval solve_pattern 1
  
  /--
  info: ['12', '34']
  -/
  #guard_msgs in
  #eval solve_pattern 2
  
  /--
  info: ['123', '456', '789']
  -/
  #guard_msgs in
  #eval solve_pattern 3
  
  /--
  info: ['1234', '5678', '9101112', '13141516']
  -/
  #guard_msgs in
  #eval solve_pattern 4

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

