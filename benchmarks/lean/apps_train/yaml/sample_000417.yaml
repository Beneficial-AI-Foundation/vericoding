vc-description: |-
  /-
  Given n orders, each order consist in pickup and delivery services. 
  Count all valid pickup/delivery possible sequences such that delivery(i) is always after of pickup(i). 
  Since the answer may be too large, return it modulo 10^9 + 7.
  
  Example 1:
  Input: n = 1
  Output: 1
  Explanation: Unique order (P1, D1), Delivery 1 always is after of Pickup 1.
  
  Example 2:
  Input: n = 2
  Output: 6
  Explanation: All possible orders: 
  (P1,P2,D1,D2), (P1,P2,D2,D1), (P1,D1,P2,D2), (P2,P1,D1,D2), (P2,P1,D2,D1) and (P2,D2,P1,D1).
  This is an invalid order (P1,D2,P2,D1) because Pickup 2 is after of Delivery 2.
  
  Example 3:
  Input: n = 3
  Output: 90
  
  Constraints:
  
  1 <= n <= 500
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def M := 10^9 + 7
  
  def count_valid_delivery_orders (n : Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem count_valid_delivery_orders_positive (n : Nat) 
    (h : n > 0) : 
    count_valid_delivery_orders n > 0 :=
    sorry
  
  theorem count_valid_delivery_orders_base_case :
    count_valid_delivery_orders 1 = 1 :=
    sorry
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval count_valid_delivery_orders 1
  
  /-
  info: 6
  -/
  -- #guard_msgs in
  -- #eval count_valid_delivery_orders 2
  
  /-
  info: 90
  -/
  -- #guard_msgs in
  -- #eval count_valid_delivery_orders 3

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible

