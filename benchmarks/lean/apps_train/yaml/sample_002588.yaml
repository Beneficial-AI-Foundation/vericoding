vc-description: |-
  The task is very simple.
  
  You must to return pyramids. Given a number ```n```  you print a pyramid with ```n``` floors
  
  For example , given a ```n=4``` you must to print this pyramid:
  
  ```
     /\
    /  \
   /    \
  /______\ 
  
  ```
  
  Other example, given a ```n=6``` you must to print this pyramid:
  
  ```  
       /\
      /  \
     /    \
    /      \
   /        \
  /__________\
  
  ```
  
  Another example, given a ```n=10```, you must to print this pyramid:
  
  ```
           /\
          /  \
         /    \
        /      \
       /        \
      /          \
     /            \
    /              \
   /                \
  /__________________\
  
  ```
  
  Note: an extra line feed character is needed at the end of the string. Case `n=0` should so return `"\n"`.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def pyramid (n : Nat) : String := sorry
  
  def String.stripRight (s : String) : String := sorry

vc-theorems: |-
  theorem pyramid_empty_newline : pyramid 0 = "\n" := sorry
  
  theorem pyramid_single_level : pyramid 1 = "/\\\n" := sorry
  
  theorem pyramid_ends_with_newline {n : Nat} : 
    (pyramid n).endsWith "\n" := sorry 
  
  theorem pyramid_line_structure {n : Nat} (h : n > 0) :
    let lines := (pyramid n).splitOn "\n"
    ∀ i < n,
    let line := (lines.get! i)
    let content := line.trim
    content.front = '/' ∧ 
    content.back = '\\' := sorry
  
  theorem pyramid_last_line_underscores {n : Nat} (h : n > 1) :
    let lines := (pyramid n).splitOn "\n"
    let lastLine := lines.get! (n-1)
    lastLine.contains '_' := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

