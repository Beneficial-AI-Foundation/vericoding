vc-description: |-
  # Task
  A cake is sliced with `n` straight lines. Your task is to calculate the maximum number of pieces the cake can have.
  
  # Example
  
   For `n = 0`, the output should be `1`.
  
   For `n = 1`, the output should be `2`.
  
   For `n = 2`, the output should be `4`.
  
   For `n = 3`, the output should be `7`.
  
   See the following image to understand it:
  
   ![](https://cdn2.scratch.mit.edu/get_image/project/92275349_500x400.png?v=1450672809.79)
  
  # Input/Output
  
   - `[input]` integer `n`
  
    `0 ≤ n ≤ 10000`
  
   - `[output]` an integer
  
    The maximum number of pieces the sliced cake can have.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def cake_slice (n : Nat) : Nat := sorry
  
  theorem cake_slice_positive (n : Nat) :
    cake_slice n > 0 := sorry

vc-theorems: |-
  theorem cake_slice_grows (n : Nat) :
    cake_slice n ≥ n + 1 := sorry 
  
  theorem cake_slice_formula (n : Nat) :
    cake_slice n = (n * n + n + 2) / 2 := sorry
  
  theorem cake_slice_bounded_growth (n : Nat) (h : n > 0) :
    cake_slice n ≤ cake_slice (n-1) + n := sorry
  
  /--
  info: 1
  -/
  #guard_msgs in
  #eval cake_slice 0
  
  /--
  info: 2
  -/
  #guard_msgs in
  #eval cake_slice 1
  
  /--
  info: 4
  -/
  #guard_msgs in
  #eval cake_slice 2
  
  /--
  info: 7
  -/
  #guard_msgs in
  #eval cake_slice 3

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

