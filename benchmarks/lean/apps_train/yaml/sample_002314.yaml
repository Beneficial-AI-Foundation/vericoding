vc-description: |-
  /-
  Given an array A of integers, for each integer A[i] we may choose any x with -K <= x <= K, and add x to A[i].
  After this process, we have some array B.
  Return the smallest possible difference between the maximum value of B and the minimum value of B.
  
  Example 1:
  Input: A = [1], K = 0
  Output: 0
  Explanation: B = [1]
  
  Example 2:
  Input: A = [0,10], K = 2
  Output: 6
  Explanation: B = [2,8]
  
  Example 3:
  Input: A = [1,3,6], K = 3
  Output: 0
  Explanation: B = [3,3,3] or B = [4,4,4]
  
  Note:
  
  1 <= A.length <= 10000
  0 <= A[i] <= 10000
  0 <= K <= 10000
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def smallest_range_i (arr : List Int) (k : Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem smallest_range_i_non_negative {arr : List Int} {k : Nat} (h : arr.length > 0) :
    smallest_range_i arr k ≥ 0 := sorry
  
  theorem smallest_range_i_single_element {arr : List Int} {k : Nat} (h : arr.length = 1) : 
    smallest_range_i arr k = 0 := sorry
  
  theorem smallest_range_i_bound {arr : List Int} {k : Nat} (h : arr.length > 0) :
    smallest_range_i arr k ≤ (arr.maximum?.getD 0) - (arr.minimum?.getD 0) := sorry
  
  theorem smallest_range_i_reduction {arr : List Int} {k : Nat} (h : arr.length > 0) :
    smallest_range_i arr k = max 0 ((arr.maximum?.getD 0) - (arr.minimum?.getD 0) - 2 * k) := sorry
  
  theorem smallest_range_i_zero_k {arr : List Int} (h₁ : arr.length > 0) (h₂ : arr.length > 1) :
    smallest_range_i arr 0 = (arr.maximum?.getD 0) - (arr.minimum?.getD 0) := sorry
  
  theorem smallest_range_i_large_k {arr : List Int} {k : Nat} (h₁ : arr.length > 0)
    (h₂ : k ≥ (arr.maximum?.getD 0) - (arr.minimum?.getD 0)) :
    smallest_range_i arr k = 0 := sorry
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval smallest_range_i [1] 0
  
  /-
  info: 6
  -/
  -- #guard_msgs in
  -- #eval smallest_range_i [0, 10] 2
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval smallest_range_i [1, 3, 6] 3

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

