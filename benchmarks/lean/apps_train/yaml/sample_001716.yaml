vc-description: |-
  Let's say you have a bunch of points, and you want to round them all up and calculate the area of the smallest polygon containing all of the points (nevermind why, you just want a challenge). What you're looking for is the area of the *convex hull* of these points. Here is an example, delimited in blue :
  
  ## Your task
  
  Implement a function that will compute the area covered by the convex hull that can be formed from an array of points, the area being rounded to two decimal places. The points are given as `(x,y)`, like in an orthonormal coordinates system.
  
  ```python
  points = [(0, 0), (0, 3), (4, 0)]
  convex_hull_area(points) == 6.00
  ```
  
  *Note* : In Python, the scipy module has a [ready made solution](https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.ConvexHull.html) for this. Of course, if you use it here, you are lame.
  
  *P. S.* : If you enjoy this kata, you may also like this one, which asks you to compute a convex hull, without finding its area.

vc-preamble: |-
  def Point := Float × Float
  
  def convex_hull_area (points : List Point) : Float :=
    sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def is_internal_point (p : Point) (points : List Point) : Prop :=
    sorry

vc-theorems: |-
  theorem convex_hull_area_non_negative (points : List Point) :
    convex_hull_area points ≥ 0 :=
  sorry
  
  theorem convex_hull_area_less_than_three_points (points : List Point) :
    points.length < 3 → convex_hull_area points = 0 :=
  sorry
  
  theorem convex_hull_area_permutation_invariant {points perm : List Point} :
    points.length > 0 →
    points.Perm perm →
    convex_hull_area points = convex_hull_area perm :=
  sorry
  
  theorem convex_hull_area_internal_points {points : List Point} {p : Point} :
    points.length ≥ 3 →
    is_internal_point p points →
    convex_hull_area (p::points) = convex_hull_area points :=
  sorry
  
  /--
  info: 6.0
  -/
  #guard_msgs in
  #eval convex_hull_area [(0, 0), (0, 3), (4, 0)]
  
  /--
  info: 4.0
  -/
  #guard_msgs in
  #eval convex_hull_area [(0, 0), (0, 2), (2, 2), (2, 0)]
  
  /--
  info: 6.0
  -/
  #guard_msgs in
  #eval convex_hull_area [(0, 0), (0, 3), (4, 0), (1, 1), (2, 1)]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

