vc-description: |-
  Given a string s and an array of integers cost where cost[i] is the cost of deleting the ith character in s.
  Return the minimum cost of deletions such that there are no two identical letters next to each other.
  Notice that you will delete the chosen characters at the same time, in other words, after deleting a character, the costs of deleting other characters will not change.
  
  Example 1:
  Input: s = "abaac", cost = [1,2,3,4,5]
  Output: 3
  Explanation: Delete the letter "a" with cost 3 to get "abac" (String without two identical letters next to each other).
  
  Example 2:
  Input: s = "abc", cost = [1,2,3]
  Output: 0
  Explanation: You don't need to delete any character because there are no identical letters next to each other.
  
  Example 3:
  Input: s = "aabaa", cost = [1,2,3,4,1]
  Output: 2
  Explanation: Delete the first and the last character, getting the string ("aba").
  
  Constraints:
  
  s.length == cost.length
  1 <= s.length, cost.length <= 10^5
  1 <= cost[i] <= 10^4
  s contains only lowercase English letters.

vc-preamble: |-
  def List.sum : List Nat → Nat 
    | [] => 0
    | x::xs => x + sum xs

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def min_cost (s : String) (cost : List Nat) : Nat := sorry
  
  def is_valid_result (s : String) (cost : List Nat) (result : Nat) : Bool := sorry

vc-theorems: |-
  theorem min_cost_properties {s : String} {cost : List Nat} 
    (h : cost.length = s.length) :
    let result := min_cost s cost
    (result ≥ 0) ∧ 
    (result ≤ List.sum cost) ∧
    (is_valid_result s cost result = true) :=
  sorry
  
  theorem same_chars_cost {s : String} {cost : List Nat}
    (h1 : cost.length = s.length)
    (h2 : ∀ (i j : String.Pos), s.get i = s.get j)
    (h3 : ∀ (i : Fin cost.length), cost.get i = i.val + 1) :
    min_cost s cost = List.sum (cost.take (cost.length - 1)) :=
  sorry
  
  theorem unique_chars_zero_cost {s : String} {cost : List Nat}
    (h1 : cost.length = s.length) 
    (h2 : ∀ (i j : String.Pos), i ≠ j → s.get i ≠ s.get j)
    (h3 : ∀ (i : Fin cost.length), cost.get i = i.val + 1) :
    min_cost s cost = 0 :=
  sorry
  
  /--
  info: 3
  -/
  #guard_msgs in
  #eval min_cost "abaac" [1, 2, 3, 4, 5]
  
  /--
  info: 0
  -/
  #guard_msgs in
  #eval min_cost "abc" [1, 2, 3]
  
  /--
  info: 2
  -/
  #guard_msgs in
  #eval min_cost "aabaa" [1, 2, 3, 4, 1]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

