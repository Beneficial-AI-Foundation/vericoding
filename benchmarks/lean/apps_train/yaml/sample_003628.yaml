vc-description: |-
  /-
  For a given array whose element values are randomly picked from single-digit integers `0` to `9`, return an array with the same digit order but all `0`'s paired. Paring two `0`'s generates one `0` at the location of the first.
  
  Ex:
  ```python
  pair_zeros([0, 1, 0, 2])
  # paired: ^-----^ cull second zero
         == [0, 1, 2];
  #   kept: ^
  
  pair_zeros([0, 1, 0, 0])
  # paired: ^-----^
         == [0, 1,    0];
  #   kept: ^
  
  pair_zeros([1, 0, 7, 0, 1])
  # paired:    ^-----^
         == [1, 0, 7,    1];
  #   kept:    ^
  
  pair_zeros([0, 1, 7, 0, 2, 2, 0, 0, 1, 0])
  # paired: ^--------^ 
  #        [0, 1, 7,    2, 2, 0, 0, 1, 0]
  #   kept: ^         paired: ^--^
         == [0, 1, 7,    2, 2, 0,    1, 0];
  #   kept:                   ^
  ```
  
  Here are the 2 important rules:
  
  1. Pairing happens from left to right in the array. However, for each pairing, the "second" `0` will always be paired towards the first (right to left)
  2. `0`'s generated by pairing can NOT be paired again
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def pair_zeros (xs : List Int) : List Int := sorry
  
  theorem pair_zeros_length_valid (xs : List Int) : 
    List.length (pair_zeros xs) ≤ List.length xs := sorry

vc-theorems: |-
  theorem pair_zeros_preserves_nonzero (xs : List Int) (x : Int) :
    x ∈ pair_zeros xs → x ≠ 0 → x ∈ xs := sorry
  
  theorem pair_zeros_zero_count (xs : List Int) :
    let input_zeros := (xs.filter (· = 0)).length
    let output_zeros := ((pair_zeros xs).filter (· = 0)).length
    output_zeros = (input_zeros + 1) / 2 := sorry
  
  theorem pair_zeros_preserves_ordering (xs : List Int) :
    (xs.filter (· ≠ 0)) = ((pair_zeros xs).filter (· ≠ 0)) := sorry
  
  /-
  info: []
  -/
  -- #guard_msgs in
  -- #eval pair_zeros []
  
  /-
  info: [1]
  -/
  -- #guard_msgs in
  -- #eval pair_zeros [1]
  
  /-
  info: [0]
  -/
  -- #guard_msgs in
  -- #eval pair_zeros [0]
  
  /-
  info: [0, 1, 2]
  -/
  -- #guard_msgs in
  -- #eval pair_zeros [0, 1, 0, 2]
  
  /-
  info: [1, 0, 1, 2, 0]
  -/
  -- #guard_msgs in
  -- #eval pair_zeros [1, 0, 1, 0, 2, 0, 0]
  
  /-
  info: [0, 0, 0]
  -/
  -- #guard_msgs in
  -- #eval pair_zeros [0, 0, 0, 0, 0, 0]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

