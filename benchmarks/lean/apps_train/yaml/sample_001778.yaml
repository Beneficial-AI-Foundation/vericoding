vc-description: |-
  The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the "root." Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that "all houses in this place forms a binary tree". It will automatically contact the police if two directly-linked houses were broken into on the same night.
  
  Determine the maximum amount of money the thief can rob tonight without alerting the police.
  
  Example 1:
  
       3
      / \
     2   3
      \   \ 
       3   1
  
  Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.
  
  Example 2:
  
       3
      / \
     4   5
    / \   \ 
   1   3   1
  
  Maximum amount of money the thief can rob = 4 + 5 = 9.
  
  Credits:Special thanks to @dietpepsi for adding this problem and creating all test cases.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def rob_house : TreeNode → Nat
    | _ => sorry
  
  -- Property: Result is always natural number

vc-theorems: |-
  theorem rob_house_nat (t : TreeNode) : 
    rob_house t ≥ 0 := by sorry
  
  -- Base case: Empty tree returns 0
  
  theorem rob_house_empty :
    rob_house TreeNode.nil = 0 := by sorry
  
  -- Base case: Single node returns its value 
  
  theorem rob_house_single (n : Nat) :
    rob_house (TreeNode.node n TreeNode.nil TreeNode.nil) = n := by sorry
  
  -- Property: Result for tree with children is at least as large as root value
  
  theorem rob_house_with_children (v : Nat) (l r : TreeNode) :
    rob_house (TreeNode.node v l r) ≥ v := by sorry
  
  /--
  info: 7
  -/
  #guard_msgs in
  #eval rob_house TreeNode(3)
  
  /--
  info: 9
  -/
  #guard_msgs in
  #eval rob_house TreeNode(3)

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

