vc-description: |-
  The chef is trying to decode some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.
  
  -----Input:-----
  - First-line will contain $T$, the number of test cases. Then the test cases follow. 
  - Each test case contains a single line of input, one integer $K$. 
  
  -----Output:-----
  For each test case, output as the pattern.
  
  -----Constraints-----
  - $1 \leq T \leq 10$
  - $1 \leq K \leq 10$
  
  -----Sample Input:-----
  4
  1
  2
  3
  4
  
  -----Sample Output:-----
  0 
  0 
  1 1 
  0 
  1 1 
  2 3 5 
  0 
  1 1 
  2 3 5 
  8 13 21 34  
  
  -----EXPLANATION:-----
  No need, else pattern can be decode easily.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def pattern_sequence (k: Nat) : String := sorry
  
  def parseInts (s: String) : List Int := 
    (s.splitOn " ").filterMap String.toInt?

vc-theorems: |-
  theorem pattern_sequence_line_count {k: Nat} (hk: k > 0) :
    ((pattern_sequence k).splitOn "\n").length = k := sorry
  
  theorem pattern_sequence_numbers_per_line {k: Nat} (hk: k > 0) :
    let lines := (pattern_sequence k).splitOn "\n"
    ∀ i : Nat, i < lines.length → 
    ((lines[i]!).splitOn " ").length = i.succ := sorry
  
  theorem pattern_sequence_valid_ints {k: Nat} (hk: k > 0) :
    let lines := (pattern_sequence k).splitOn "\n"
    ∀ line ∈ lines,
    ∀ num ∈ line.splitOn " ",
    String.toInt? num ≠ none := sorry
  
  theorem pattern_sequence_fibonacci {k: Nat} (hk: k > 0) :
    let lines := (pattern_sequence k).splitOn "\n"
    let nums := lines.bind (λ line => parseInts line)
    ∀ i, i ≥ 2 → i < nums.length →
      nums[i]! = nums[i-1]! + nums[i-2]! := sorry
  
  /--
  info: '0'
  -/
  #guard_msgs in
  #eval pattern_sequence 1
  
  /--
  info: expected
  -/
  #guard_msgs in
  #eval pattern_sequence 2
  
  /--
  info: expected
  -/
  #guard_msgs in
  #eval pattern_sequence 3

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

