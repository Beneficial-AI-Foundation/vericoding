vc-description: |-
  /-
  Given a positive integer n, break it into the sum of at least two positive integers and maximize the product of those integers. Return the maximum product you can get.
  
  For example, given n = 2, return 1 (2 = 1 + 1); given n = 10, return 36 (10 = 3 + 3 + 4).
  
  Note: You may assume that n is not less than 2 and not larger than 58.
  
  Credits:Special thanks to @jianchao.li.fighter for adding this problem and creating all test cases.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def integerBreak (n : Nat) : Nat := sorry
  
  theorem integerBreak_positive (n : Nat) (h : n ≥ 2) : 
    integerBreak n > 0 := sorry

vc-theorems: |-
  theorem integerBreak_geq_n (n : Nat) (h : n ≥ 4) :
    integerBreak n ≥ n := sorry
  
  theorem integerBreak_2 :
    integerBreak 2 = 1 := sorry 
  
  theorem integerBreak_3 :
    integerBreak 3 = 2 := sorry
  
  theorem integerBreak_better_than_naive_split (n : Nat) (h : n ≥ 4) :
    integerBreak n ≥ 2^(n/2) * (if n % 2 = 0 then 1 else n % 2) := sorry
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval integer_break 2
  
  /-
  info: 36
  -/
  -- #guard_msgs in
  -- #eval integer_break 10
  
  /-
  info: 18
  -/
  -- #guard_msgs in
  -- #eval integer_break 8

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

