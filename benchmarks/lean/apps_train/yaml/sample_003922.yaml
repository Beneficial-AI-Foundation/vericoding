vc-description: |-
  In this Kata, we are going to determine if the count of each of the characters in a string can be equal if we remove a single character from that string.
  
  For example:
  ```
  solve('abba') = false -- if we remove any character, the count of each character will not be equal.
  solve('abbba') = true -- if we remove one b, the count of each character becomes 2.
  solve('aaaa') = true -- if we remove one character, the remaining characters have same count.
  solve('wwwf') = true -- if we remove f, the remaining letters have same count.
  ```
  More examples in the test cases. Empty string is not tested.
  
  Good luck!

vc-preamble: |-
  def solve (s : String) : Bool := sorry
  
  def countOccurrences (c : Char) (s : String) : Nat := sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def allCountsEqual (s : String) : Bool := sorry 
  
  theorem solve_exists_char_removal 
    {s : String} 
    (h1 : solve s = true)
    (h2 : s.length ≥ 2) :
    ∃ c : Char, c ∈ s.data ∧ 
    allCountsEqual (s.replace (String.mk [c]) "") = true := sorry

vc-theorems: |-
  theorem solve_equal_counts_after_removal 
    {s : String}
    (h1 : solve s = true)
    (h2 : s.length ≥ 2) :
    ∃ c : Char, c ∈ s.data ∧
    let s' := s.replace (String.mk [c]) ""
    (∀ c₁ c₂, c₁ ∈ s'.data → c₂ ∈ s'.data → 
      countOccurrences c₁ s' = countOccurrences c₂ s') := sorry
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval solve "aaaa"
  
  /--
  info: False
  -/
  #guard_msgs in
  #eval solve "abba"
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval solve "abbba"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

