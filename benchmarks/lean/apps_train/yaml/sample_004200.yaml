vc-description: |-
  You have managed to intercept an important message and you are trying to read it.
  
  You realise that the message has been encoded and can be decoded by switching each letter with a corresponding letter.
  
  You also notice that each letter is paired with the letter that it coincides with when the alphabet is reversed.
  
  For example: "a" is encoded with "z", "b" with "y", "c" with "x", etc
  
  You read the first sentence:
  ```
  "r slkv mlylwb wvxlwvh gsrh nvhhztv"
  ```
  
  After a few minutes you manage to decode it:
  ```
  "i hope nobody decodes this message"
  ```
  Create a function that will instantly decode any of these messages
  
  You can assume no punctuation or capitals, only lower case letters, but remember spaces!

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def decode (s : String) : String := sorry
  
  theorem decode_involution {s : String} (h : ∀ c ∈ s.data, c.isLower) : 
    decode (decode s) = s := sorry

vc-theorems: |-
  theorem decode_length_preservation {s : String} (h : ∀ c ∈ s.data, c.isLower) :
    (decode s).length = s.length := sorry
  
  theorem decode_preserves_spaces {s : String} 
    (h : ∀ c ∈ s.data, c.isLower ∨ c = ' ') :
    s.data.countP (fun c => c = ' ') = (decode s).data.countP (fun c => c = ' ') := sorry
  
  theorem decode_with_spacing {s : String} (n : Nat)
    (h : ∀ c ∈ s.data, c.isLower) :
    let spaced := String.mk (List.replicate n ' ' ++ s.data ++ List.replicate n ' ')
    (decode spaced).length = spaced.length ∧ 
    (decode spaced).trim = decode s := sorry
  
  /--
  info: 'hi'
  -/
  #guard_msgs in
  #eval decode "sr"
  
  /--
  info: 'hello'
  -/
  #guard_msgs in
  #eval decode "svool"
  
  /--
  info: 'i hope nobody decodes this message'
  -/
  #guard_msgs in
  #eval decode "r slkv mlylwb wvxlwvh gsrh nvhhztv"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

