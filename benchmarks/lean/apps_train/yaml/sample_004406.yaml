vc-description: |-
  ### Introduction and Warm-up (Highly recommended)
  
  ### [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)
  ___
  
  ## Task
  
  **_Given_** an *array/list [] of integers* , **_Find the product of the k maximal_** numbers.
  ___
  
  ### Notes 
  
  * **_Array/list_** size is *at least 3* .
  
  * **_Array/list's numbers_**  *Will be* **_mixture of positives , negatives and zeros_** 
  
  * **_Repetition_** of numbers in *the array/list could occur*.
  ___
  
  ### Input >> Output Examples 
  
  ```
  maxProduct ({4, 3, 5}, 2) ==>  return (20)
  ```
  
  #### _Explanation_:
  
  * **_Since_** *the size (k) equal 2* , then **_the subsequence of size 2_** *whose gives* **_product of maxima_**  is `5 * 4 = 20` .
  ___
  
  ```
  maxProduct ({8, 10 , 9, 7}, 3) ==>  return (720)
  ```
  
  #### _Explanation_:
  
  * **_Since_** *the size (k) equal 3* , then **_the subsequence of size 3_** *whose gives* **_product of maxima_**  is ` 8 * 9 * 10 = 720` .
  ___
  
  ```
  maxProduct ({10, 8, 3, 2, 1, 4, 10}, 5) ==> return (9600)
  ```
  
  #### _Explanation_:
  
  * **_Since_** *the size (k) equal 5* , then **_the subsequence of size 5_** *whose gives* **_product of maxima_**  is ` 10 * 10 * 8 * 4 * 3 = 9600` .
  ___
  
  ```
  maxProduct ({-4, -27, -15, -6, -1}, 2) ==> return (4)
  ```
  
  #### _Explanation_:
  
  * **_Since_** *the size (k) equal 2* , then **_the subsequence of size 2_** *whose gives* **_product of maxima_**  is ` -4 * -1 = 4` .
  ___
  
  ```
  maxProduct ({10, 3, -1, -27} , 3)  return (-30)
  ``` 
  
  #### _Explanation_:
  * **_Since_** *the size (k) equal 3* , then **_the subsequence of size 3_** *whose gives* **_product of maxima_**  is ` 10 * 3 * -1 = -30 ` .
  ___
  ___
  ___
  ___
  
  #### [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)
  
  #### [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)
  
  #### [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)
  ___
  
  ##### ALL translations are welcomed
  
  ##### Enjoy Learning !!
  ##### Zizou

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def max_product (lst : List Int) (n : Nat) : Int :=
    sorry

vc-theorems: |-
  theorem max_product_single_equals_maximum {lst : List Int} 
    (h : lst.length > 0) :
    ∃ m ∈ lst, (max_product lst 1 = m ∧ ∀ x ∈ lst, x ≤ m) :=
    sorry
  
  theorem max_product_full_list {lst : List Int}
    (h : lst.length > 0) :
    max_product lst lst.length = List.foldl (· * ·) 1 lst :=
    sorry
  
  theorem max_product_singleton_positive :
    max_product [1] 1 = 1 :=
    sorry
  
  theorem max_product_singleton_negative :
    max_product [-1] 1 = -1 :=
    sorry
  
  theorem max_product_singleton_zero :
    max_product [0] 1 = 0 :=
    sorry
  
  /--
  info: 20
  -/
  #guard_msgs in
  #eval max_product [4, 3, 5] 2
  
  /--
  info: 720
  -/
  #guard_msgs in
  #eval max_product [10, 8, 7, 9] 3
  
  /--
  info: 4
  -/
  #guard_msgs in
  #eval max_product [-4, -27, -15, -6, -1] 2

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

