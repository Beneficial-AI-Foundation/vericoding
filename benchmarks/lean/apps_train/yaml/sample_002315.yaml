vc-description: |-
  /-
  Given a binary array, find the maximum number of consecutive 1s in this array.
  
  Example 1:
  
  Input: [1,1,0,1,1,1]
  Output: 3
  Explanation: The first two digits or the last three digits are consecutive 1s.
      The maximum number of consecutive 1s is 3.
  
  Note:
  
  The input array will only contain 0 and 1.
  The length of input array is a positive integer and will not exceed 10,000
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def find_max_consecutive_ones (nums: List Nat) : Nat := sorry
  
  -- Main property

vc-theorems: |-
  theorem find_max_consecutive_ones_valid (nums: List Nat) : 
    let result := find_max_consecutive_ones nums
    result ≥ 0 ∧ result ≤ nums.length ∧
    (let max_ones := nums.foldl
      (fun acc x => 
        if x = 1 
        then max acc (acc + 1)
        else 0) 
      0
    result = max_ones) := sorry
  
  -- Empty and single element cases
  
  theorem find_max_consecutive_ones_edge_cases (nums: List Nat) :
    (nums = [] → find_max_consecutive_ones nums = 0) ∧
    (nums.length = 1 → 
      find_max_consecutive_ones nums = 0 ∨ 
      find_max_consecutive_ones nums = 1) := sorry
  
  -- All zeros case
  
  theorem find_max_consecutive_ones_all_zeros (nums: List Nat) :
    (∀ x ∈ nums, x = 0) → find_max_consecutive_ones nums = 0 := sorry
  
  /-
  info: 3
  -/
  -- #guard_msgs in
  -- #eval find_max_consecutive_ones [1, 1, 0, 1, 1, 1]
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval find_max_consecutive_ones [1, 0, 1, 1, 0, 1]
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval find_max_consecutive_ones []

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

