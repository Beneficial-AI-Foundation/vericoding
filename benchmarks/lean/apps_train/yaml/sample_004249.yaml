vc-description: |-
  ## Description
  You are a *Fruit Ninja*, your skill is cutting fruit. All the fruit will be cut in half by your knife. For example:
  
  ```
  [  "apple",     "pear",     "banana"  ]  --> ["app", "le", "pe", "ar", "ban", "ana"]
  ```
  As you see, all fruits are cut in half. You should pay attention to `"apple"`: if you cannot cut a fruit into equal parts, then the first part will has a extra character.
  
  You should only cut the fruit, other things **should not be cut**, such as the `"bomb"`:
  ```
  [  "apple",     "pear",     "banana",   "bomb"]  -->
  ["app", "le", "pe", "ar", "ban", "ana", "bomb"]
  ```
  
  The valid fruit names are preloded for you as:
  ```python
  FRUIT_NAMES
  ```
  
  ## Task
  
  ```if:javascript
  Complete function `cutFruits` that accepts argument `fruits`.
  Returns the result in accordance with the rules above.
  ```
  ```if:ruby,python
  Complete function `cut_fruits` that accepts argument `fruits`.
  Returns the result in accordance with the rules above.
  ```
  ```if:haskell
  Complete function cutFruits that accepts a String array/list.
  Returns the result in accordance with the rules above.
  ```
  
  OK, that's all. I guess this is a 7kyu kata. If you agree, please rank it as 7kyu and vote `very`;-) If you think this kata is too easy or too hard, please shame me by rank it as you want and vote `somewhat` or `none` :[
  
  ---
  
  ##### *[Click here](https://www.codewars.com/kata/search/?q=i+guess+this+is+a+kyu+kata)  for more more "I guess this is ...kyu" katas!*

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def FRUIT_NAMES : List String := sorry
  
  def cut_fruits (fruits : List String) : List String := sorry

vc-theorems: |-
  theorem cut_fruits_output_length (fruits : List String) : 
    let result := cut_fruits fruits
    let num_fruits := (fruits.filter (fun f => f ∈ FRUIT_NAMES)).length
    let num_non_fruits := fruits.length - num_fruits
    result.length = (2 * num_fruits) + num_non_fruits := sorry
  
  theorem cut_fruits_split_fruits (fruits : List String) 
    (h : ∀ f ∈ fruits, f ∈ FRUIT_NAMES) :
    let result := cut_fruits fruits
    result.length = 2 * fruits.length ∧ 
    ∀ i < fruits.length, 
      let j := 2 * i
      (result.get! j ++ result.get! (j+1)) ∈ FRUIT_NAMES := sorry
  
  theorem cut_fruits_non_fruits (non_fruits : List String)
    (h : ∀ f ∈ non_fruits, f ∉ FRUIT_NAMES) :
    cut_fruits non_fruits = non_fruits := sorry
  
  theorem cut_fruits_empty :
    cut_fruits [] = [] := sorry
  
  /--
  info: ['app', 'le', 'pe', 'ar', 'ban', 'ana']
  -/
  #guard_msgs in
  #eval cut_fruits ["apple", "pear", "banana"]
  
  /--
  info: ['app', 'le', 'pe', 'ar', 'ban', 'ana', 'bomb']
  -/
  #guard_msgs in
  #eval cut_fruits ["apple", "pear", "banana", "bomb"]
  
  /--
  info: []
  -/
  #guard_msgs in
  #eval cut_fruits []

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

