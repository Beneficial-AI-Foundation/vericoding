vc-description: |-
  Bob has ladder. He wants to climb this ladder, but being a precocious child, he wonders about exactly how many ways he could to climb this `n` size ladder using jumps of up to distance `k`.
  
  Consider this example...
  
  n = 5\
  k = 3
  
  Here, Bob has ladder of length 5, and with each jump, he can ascend up to 3 steps (he can either jump step 1 or 2 or 3). This gives the below possibilities
  
  ```
  1 1 1 1 1
  1 1 1 2
  1 1 2 1 
  1 2 1 1
  2 1 1 1
  1 2 2
  2 2 1
  2 1 2
  1 1 3
  1 3 1
  3 1 1
  2 3
  3 2
  ```
  
  Your task to calculate number of ways to climb ladder of length `n` with upto `k` steps for Bob. (13 in above case)
  
  Constraints:
  
  ```python
  1<=n<=50
  1<=k<=15
  ```
  
  _Tip: try fibonacci._

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def count_ways (n k : Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem count_ways_positive {n k : Nat} (h1 : n ≥ 1) (h2 : k ≥ 1) : 
    count_ways n k ≥ 1 :=
    sorry
  
  theorem count_ways_k_one {n : Nat} (h : n ≥ 1) :
    count_ways n 1 = 1 :=
    sorry
  
  theorem count_ways_k_geq_n {n k : Nat} (h1 : n ≥ 1) (h2 : k ≥ n) :
    count_ways n k = count_ways n n :=
    sorry
  
  /--
  info: 1
  -/
  #guard_msgs in
  #eval count_ways 1 3
  
  /--
  info: 13
  -/
  #guard_msgs in
  #eval count_ways 5 3
  
  /--
  info: 492
  -/
  #guard_msgs in
  #eval count_ways 10 6

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

