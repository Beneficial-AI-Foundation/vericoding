vc-description: |-
  There are n people, each person has a unique id between 0 and n-1. Given the arrays watchedVideos and friends, where watchedVideos[i] and friends[i] contain the list of watched videos and the list of friends respectively for the person with id = i.
  Level 1 of videos are all watched videos by your friends, level 2 of videos are all watched videos by the friends of your friends and so on. In general, the level k of videos are all watched videos by people with the shortest path exactly equal to k with you. Given your id and the level of videos, return the list of videos ordered by their frequencies (increasing). For videos with the same frequency order them alphabetically from least to greatest. 
  
  Example 1:
  
  Input: watchedVideos = [["A","B"],["C"],["B","C"],["D"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 1
  Output: ["B","C"] 
  Explanation: 
  You have id = 0 (green color in the figure) and your friends are (yellow color in the figure):
  Person with id = 1 -> watchedVideos = ["C"] 
  Person with id = 2 -> watchedVideos = ["B","C"] 
  The frequencies of watchedVideos by your friends are: 
  B -> 1 
  C -> 2
  
  Example 2:
  
  Input: watchedVideos = [["A","B"],["C"],["B","C"],["D"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 2
  Output: ["D"]
  Explanation: 
  You have id = 0 (green color in the figure) and the only friend of your friends is the person with id = 3 (yellow color in the figure).
  
  Constraints:
  
  n == watchedVideos.length == friends.length
  2 <= n <= 100
  1 <= watchedVideos[i].length <= 100
  1 <= watchedVideos[i][j].length <= 8
  0 <= friends[i].length < n
  0 <= friends[i][j] < n
  0 <= id < n
  1 <= level < n
  if friends[i] contains j, then friends[j] contains i

vc-preamble: |-
  def PersonId := Nat
  def Video := String
  
  def WatchedVideos := List (List Video)
  def Friends := List (List PersonId)
  
  instance : Inhabited PersonId where
    default := Nat.zero

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def watched_videos_by_friends (watchedVideos : WatchedVideos) 
    (friends : Friends) (id : PersonId) (level : Nat) : List Video := sorry

vc-theorems: |-
  theorem watched_videos_by_friends_result_subset_all_videos 
    (watchedVideos : WatchedVideos) (friends : Friends) 
    (id : PersonId) (level : Nat) :
    let result := watched_videos_by_friends watchedVideos friends id level
    let allVideos := List.join watchedVideos
    ∀ v, v ∈ result → v ∈ allVideos := sorry
  
  theorem friends_lists_symmetric
    (friends : Friends) (i j : Nat) (h1 : i < friends.length) (h2 : j < friends.length)
    (h3 : j ∈ List.get! friends i) :
    i ∈ List.get! friends j := sorry
  
  theorem friends_lists_ascending
    (friends : Friends) (i : Nat) (h : i < friends.length) (x y : Nat) :
    x ∈ List.get! friends i → y ∈ List.get! friends i → x ≤ y ∨ y ≤ x := sorry
  
  theorem friends_lists_unique
    (friends : Friends) (i : Nat) (h : i < friends.length) :
    List.Nodup (List.get! friends i) := sorry
  
  theorem friends_not_self_referential
    (friends : Friends) (i : Nat) (h : i < friends.length) :
    i ∉ List.get! friends i := sorry
  
  /--
  info: ['B', 'C']
  -/
  #guard_msgs in
  #eval watched_videos_by_friends [["A", "B"], ["C"], ["B", "C"], ["D"]] [[1, 2], [0, 3], [0, 3], [1, 2]] 0 1
  
  /--
  info: ['D']
  -/
  #guard_msgs in
  #eval watched_videos_by_friends videos1 friends1 0 2
  
  /--
  info: ['B', 'C']
  -/
  #guard_msgs in
  #eval watched_videos_by_friends [["A"], ["B"], ["C"], ["A", "B"]] [[1, 2], [0, 3], [0, 3], [1, 2]] 0 1

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

