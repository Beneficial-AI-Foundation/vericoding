vc-description: |-
  ## **Instructions**
  
  The goal of this kata is two-fold:
  
  1.) You must produce a fibonacci sequence in the form of an array, containing a number of items equal to the input provided.
  
  2.) You must replace all numbers in the sequence `divisible by 3` with `Fizz`, those `divisible by 5` with `Buzz`, and those `divisible by both 3 and 5` with `FizzBuzz`.
  
  For the sake of this kata, you can assume all input will be a positive integer.
  
  ## **Use Cases**
  
  Return output must be in the form of an array, with the numbers as integers and the replaced numbers (fizzbuzz) as strings.
  
  ## **Examples**
  
  Input: 
  
  ```python
  fibs_fizz_buzz(5)
  ```
  Output:
  ~~~~
  [ 1, 1, 2, 'Fizz', 'Buzz' ]
  ~~~~
  
  Input:
  
  ```python
  fibs_fizz_buzz(1)
  ```
  Output:
  ~~~~
  [1]
  ~~~~
  
  Input:
  
  ```python
  fibs_fizz_buzz(20)
  ```
  Output:
  ~~~~
  [1,1,2,"Fizz","Buzz",8,13,"Fizz",34,"Buzz",89,"Fizz",233,377,"Buzz","Fizz",1597,2584,4181,"FizzBuzz"]
  ~~~~
  
  ##Good Luck!##

vc-preamble: |-
  def fib : Nat → Nat 
  | 0 => 0
  | 1 => 1
  | n + 2 => fib (n + 1) + fib n

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def fibs_fizz_buzz (n : Nat) : List (String ⊕ Nat) :=
    sorry

vc-theorems: |-
  theorem fibs_fizz_buzz_length (n : Nat) :
    List.length (fibs_fizz_buzz n) = n :=
  sorry
  
  theorem fibs_fizz_buzz_first_values {n : Nat} (h : n ≥ 1) :
    match fibs_fizz_buzz n with
    | [] => False
    | x::_ => x = Sum.inr 1
  :=
  sorry
  
  theorem fibs_fizz_buzz_first_two {n : Nat} (h : n ≥ 2) :
    match fibs_fizz_buzz n with
    | []      => False 
    | [_]     => False
    | x::y::_ => x = Sum.inr 1 ∧ y = Sum.inr 1
  :=
  sorry
  
  theorem fibs_fizz_buzz_rules {n : Nat} (i : Nat) (h : i < n) :
    let result := (fibs_fizz_buzz n).get ⟨i, by {
      rw [fibs_fizz_buzz_length n]
      exact h
    }⟩
    let fibonacci := fib i
    match result with
    | Sum.inl s => 
      (fibonacci % 15 = 0 ∧ s = "FizzBuzz") ∨
      (fibonacci % 3 = 0 ∧ fibonacci % 5 ≠ 0 ∧ s = "Fizz") ∨
      (fibonacci % 5 = 0 ∧ fibonacci % 3 ≠ 0 ∧ s = "Buzz")
    | Sum.inr k => fibonacci % 3 ≠ 0 ∧ fibonacci % 5 ≠ 0 ∧ k = fibonacci
  :=
  sorry
  
  /--
  info: [1, 1, 2, 'Fizz', 'Buzz']
  -/
  #guard_msgs in
  #eval fibs_fizz_buzz 5
  
  /--
  info: [1]
  -/
  #guard_msgs in
  #eval fibs_fizz_buzz 1
  
  /--
  info: [1, 1, 2, 'Fizz', 'Buzz', 8, 13, 'Fizz', 34, 'Buzz', 89, 'Fizz', 233, 377, 'Buzz', 'Fizz', 1597, 2584, 4181, 'FizzBuzz']
  -/
  #guard_msgs in
  #eval fibs_fizz_buzz 20

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

