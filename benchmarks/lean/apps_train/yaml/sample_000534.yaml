vc-description: |-
  The chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.
  
  -----Input:-----
  - First-line will contain $T$, the number of test cases. Then the test cases follow. 
  - Each test case contains a single line of input, one integer $K$. 
  
  -----Output:-----
  For each test case, output as the pattern.
  
  -----Constraints-----
  - $1 \leq T \leq 100$
  - $1 \leq K \leq 100$
  
  -----Sample Input:-----
  4
  1
  2
  3
  4
  
  -----Sample Output:-----
  *
  *
  *
  *
  ***
  ***
  *
  *
  ***
  ***
  *****
  *****
  *
  *
  ***
  ***
  *****
  *****
  *******
  *******
  
  -----EXPLANATION:-----
  No need, else pattern can be decode easily.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def generate_pattern (k : Nat) : List String :=
    sorry

vc-theorems: |-
  theorem pattern_length {k : Nat} (h : k > 0) :
    (generate_pattern k).length = 2 * k :=
    sorry
  
  theorem paired_lines {k : Nat} (h : k > 0) :
    ∀ i, i < k → 
      List.get! (generate_pattern k) (2*i) = List.get! (generate_pattern k) (2*i + 1) :=
    sorry
  
  theorem pattern_contents {k : Nat} (h : k > 0) :
    ∀ line ∈ generate_pattern k,
      ∀ c ∈ line.data, c = '*' :=
    sorry
  
  theorem increasing_widths {k : Nat} (h : k > 0) :
    ∀ i, i < k - 1 →
      (List.get! (generate_pattern k) (2*i)).length < (List.get! (generate_pattern k) (2*i + 2)).length :=
    sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

