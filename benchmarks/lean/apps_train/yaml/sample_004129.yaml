vc-description: |-
  The Padovan sequence is the sequence of integers `P(n)` defined by the initial values
  
  `P(0)=P(1)=P(2)=1`
  
  and the recurrence relation
  
  `P(n)=P(n-2)+P(n-3)`
  
  The first few values of `P(n)` are
  
  `1, 1, 1, 2, 2, 3, 4, 5, 7, 9, 12, 16, 21, 28, 37, 49, 65, 86, 114, 151, 200, 265, ...`
  
  ### Task 
  
  The task is to write a method that returns i-th Padovan number
  
  ```python
  > padovan(0) == 1
  > padovan(1) == 1
  > padovan(2) == 1
  > padovan(n) = padovan(n-2) + padovan(n-3)
  ```

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def padovan (n : Nat) : Nat := sorry
  
  theorem padovan_positive (n : Nat) : 
    padovan n > 0 := sorry

vc-theorems: |-
  theorem padovan_first_three : 
    (padovan 0 = 1) ∧ (padovan 1 = 1) ∧ (padovan 2 = 1) := sorry
  
  theorem padovan_recurrence (n : Nat) :
    padovan (n + 3) = padovan n + padovan (n + 1) := sorry
  
  theorem padovan_monotonic (n : Nat) :
    n > 0 → padovan n ≥ padovan (n - 1) := sorry
  
  /--
  info: 1
  -/
  #guard_msgs in
  #eval padovan 0
  
  /--
  info: 1
  -/
  #guard_msgs in
  #eval padovan 1
  
  /--
  info: 1
  -/
  #guard_msgs in
  #eval padovan 2
  
  /--
  info: 2
  -/
  #guard_msgs in
  #eval padovan 3
  
  /--
  info: 2
  -/
  #guard_msgs in
  #eval padovan 4
  
  /--
  info: 12
  -/
  #guard_msgs in
  #eval padovan 10
  
  /--
  info: 1177482265857
  -/
  #guard_msgs in
  #eval padovan 100

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

