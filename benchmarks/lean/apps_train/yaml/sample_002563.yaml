vc-description: |-
  /-
  # Task
   The string is called `prime` if it cannot be constructed by concatenating some (more than one) equal strings together.
  
   For example, "abac" is prime, but "xyxy" is not("xyxy"="xy"+"xy").
  
   Given a string determine if it is prime or not.
  
  # Input/Output
  
   - `[input]` string `s`
  
    string containing only lowercase English letters
  
   - `[output]` a boolean value
  
    `true` if the string is prime, `false` otherwise
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def prime_string (s : String) : Bool := sorry
  
  theorem prime_string_empty_or_single {s : String} (h : s.length ≤ 1) :
    prime_string s = true := sorry

vc-theorems: |-
  theorem prime_string_repeated {s : String} (h : s.length ≥ 1) :
    prime_string (s ++ s ++ s) = false := sorry
  
  theorem prime_string_self_concat {s : String} (h : s.length ≥ 1) :
    prime_string s = true ↔ 
    ∀ (i : Nat), 0 < i → i < (s ++ s).length → 
      (s ++ s).data[i]! ≠ s.data[0]! := sorry
  
  theorem prime_string_palindrome {s : String} 
    (h1 : s.length > 1)
    (h2 : ∀ (i : Nat), i < s.length → 
      s.data[i]! = s.data[s.length - 1 - i]!) :
    prime_string (s ++ s) = false := sorry
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval prime_string "abac"
  
  /-
  info: False
  -/
  -- #guard_msgs in
  -- #eval prime_string "abab"
  
  /-
  info: False
  -/
  -- #guard_msgs in
  -- #eval prime_string "aaaa"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

