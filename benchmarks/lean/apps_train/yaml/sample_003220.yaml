vc-description: |-
  Write a function that takes in a binary string and returns the equivalent decoded text (the text is ASCII encoded).
  
  Each 8 bits on the binary string represent 1 character on the ASCII table.
  
  The input string will always be a valid binary string.
  
  Characters can be in the range from "00000000" to "11111111" (inclusive)
  
  Note: In the case of an empty binary string your function should return an empty string.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def binary_to_string (s : String) : String := sorry
  
  def is_binary_string (s : String) : Bool := sorry

vc-theorems: |-
  theorem binary_to_string_length 
    (binary : String)
    (h : is_binary_string binary)
    (h2 : String.length binary % 8 = 0) :
    String.length (binary_to_string binary) = String.length binary / 8 := sorry
  
  theorem binary_to_string_roundtrip
    (binary : String)
    (h : is_binary_string binary)
    (h2 : String.length binary % 8 = 0)
    (h3 : binary â‰  "") :
    let result := binary_to_string binary
    let binary_again := String.join (result.data.map (fun c => 
      String.mk [c]))
    binary = binary_again := sorry
  
  /--
  info: ''
  -/
  #guard_msgs in
  #eval binary_to_string ""
  
  /--
  info: 'Hello'
  -/
  #guard_msgs in
  #eval binary_to_string "0100100001100101011011000110110001101111"
  
  /--
  info: '1011'
  -/
  #guard_msgs in
  #eval binary_to_string "00110001001100000011000100110001"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

