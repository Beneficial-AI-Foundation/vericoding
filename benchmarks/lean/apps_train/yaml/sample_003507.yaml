vc-description: |-
  Much cooler than your run-of-the-mill Fibonacci numbers, the Triple Shiftian are so defined: `T[n] = 4 * T[n-1] - 5 * T[n-2] + 3 * T[n-3]`.
  
  You are asked to create a function which accept a base with the first 3 numbers and then returns the nth element.
  ```python
  triple_shiftian([1,1,1],25) == 1219856746
  triple_shiftian([1,2,3],25) == 2052198929
  triple_shiftian([6,7,2],25) == -2575238999
  triple_shiftian([3,2,1],35) == 23471258855679
  triple_shiftian([1,9,2],2) ==  2
  ```
  *Note: this is meant to be an interview quiz, so the description is scarce in detail on purpose*
  
  Special thanks to the [first person I met in person here in London just because of CW](http://www.codewars.com/users/webtechalex) and that assisted me during the creation of this kata ;)

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def tripleShiftian (T : List Int) (n : Nat) : Int := sorry
  
  theorem tripleShiftian_first_three_elements {T : List Int} (h : T.length = 3) (i : Nat) (h' : i < 3) : 
    tripleShiftian T i = T.get ⟨i, by sorry⟩ := sorry

vc-theorems: |-
  theorem tripleShiftian_recurrence {T : List Int} (h : T.length = 3) (n : Nat) (h' : n ≥ 3) :
    tripleShiftian T n = 
      4 * tripleShiftian T (n-1) - 
      5 * tripleShiftian T (n-2) + 
      3 * tripleShiftian T (n-3) := sorry
  
  structure Matrix (m n : Nat) where
    data : Array (Array Int)
  
  theorem tripleShiftian_matrix_formula {T : List Int} (h : T.length = 3) (n : Nat) :
    ∃ A : Matrix 3 3,
    ∃ x₀ : Matrix 3 1,
      tripleShiftian T n = 
        if n < 3 
        then T.get ⟨n, by sorry⟩  
        else sorry := sorry
  
  /--
  info: 1219856746
  -/
  #guard_msgs in
  #eval triple_shiftian #[1, 1, 1] 25
  
  /--
  info: 2052198929
  -/
  #guard_msgs in
  #eval triple_shiftian #[1, 2, 3] 25
  
  /--
  info: 2
  -/
  #guard_msgs in
  #eval triple_shiftian #[6, 7, 2] 2

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

