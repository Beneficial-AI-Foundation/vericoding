vc-description: |-
  You are given two jugs with capacities x and y litres. There is an infinite amount of water supply available.
  You need to determine whether it is possible to measure exactly z litres using these two jugs.
  
  If z liters of water is measurable, you must have z liters of water contained within one or both buckets by the end.
  
  Operations allowed:
  
  Fill any of the jugs completely with water.
  Empty any of the jugs.
  Pour water from one jug into another till the other jug is completely full or the first jug itself is empty.
  
  Example 1: (From the famous "Die Hard" example)
  
  Input: x = 3, y = 5, z = 4
  Output: True
  
  Example 2:
  
  Input: x = 2, y = 6, z = 5
  Output: False
  
  Credits:Special thanks to @vinod23 for adding this problem and creating all test cases.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def can_measure_water (x y z : Nat) : Bool := sorry
  
  def gcd (a b : Nat) : Nat := sorry

vc-theorems: |-
  theorem measurement_bounds {x y z : Nat} :
    can_measure_water x y z → z ≤ x + y ∧ z ≥ 0 := sorry
  
  theorem zero_target_always_possible {x y : Nat} :
    can_measure_water x y 0 = true := sorry
  
  theorem single_jug_measurements {cap : Nat} (h : cap > 0) :
    can_measure_water cap 0 cap = true ∧
    can_measure_water cap 0 (cap + 1) = false := sorry
  
  theorem commutative {x y z : Nat} :
    can_measure_water x y z = can_measure_water y x z := sorry
  
  theorem gcd_property {x y z : Nat} (hx : x > 0) (hy : y > 0) :
    can_measure_water x y z → z % gcd x y = 0 := sorry
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval can_measure_water 3 5 4
  
  /--
  info: False
  -/
  #guard_msgs in
  #eval can_measure_water 2 6 5
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval can_measure_water 4 6 8

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

