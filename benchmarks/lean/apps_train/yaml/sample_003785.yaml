vc-description: |-
  Complete the method which returns the number which is most frequent in the given input array. If there is a tie for most frequent number, return the largest number among them.
  
  Note: no empty arrays will be given.
  
  ## Examples
  
  ```
  [12, 10, 8, 12, 7, 6, 4, 10, 12]              -->  12
  [12, 10, 8, 12, 7, 6, 4, 10, 12, 10]          -->  12
  [12, 10, 8, 8, 3, 3, 3, 3, 2, 4, 10, 12, 10]  -->   3
  ```

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def highest_rank (arr : List Int) : Int :=
  sorry

vc-theorems: |-
  theorem highest_rank_in_input {arr : List Int} (h : arr ≠ []) :
    highest_rank arr ∈ arr :=
  sorry
  
  theorem highest_rank_max_frequency {arr : List Int} (h : arr ≠ []) :
    ∀ x ∈ arr, (List.count x arr) ≤ (List.count (highest_rank arr) arr) :=
  sorry
  
  theorem highest_rank_max_value {arr : List Int} (h : arr ≠ []) :
    ∀ x ∈ arr, (List.count x arr = List.count (highest_rank arr) arr) → 
    x ≤ highest_rank arr :=
  sorry
  
  theorem highest_rank_deterministic {arr : List Int} (h : arr ≠ []) :
    highest_rank arr = highest_rank arr :=
  sorry
  
  theorem highest_rank_order_independent {arr : List Int} (h : arr ≠ []) :
    highest_rank arr = highest_rank (List.reverse arr) :=
  sorry
  
  /--
  info: 12
  -/
  #guard_msgs in
  #eval highest_rank [12, 10, 8, 12, 7, 6, 4, 10, 12]
  
  /--
  info: 12
  -/
  #guard_msgs in
  #eval highest_rank [12, 10, 8, 12, 7, 6, 4, 10, 12, 10]
  
  /--
  info: 3
  -/
  #guard_msgs in
  #eval highest_rank [12, 10, 8, 8, 3, 3, 3, 3, 2, 4, 10, 12, 10]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

