vc-description: |-
  There are two sorted arrays nums1 and nums2 of size m and n respectively.
  
  Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).
  
  Example 1:
  
  nums1 = [1, 3]
  nums2 = [2]
  
  The median is 2.0
  
  Example 2:
  
  nums1 = [1, 2]
  nums2 = [3, 4]
  
  The median is (2 + 3)/2 = 2.5

vc-preamble: |-
  def findMedianSortedArrays (nums1 : List Int) (nums2 : List Int) : Float :=
    sorry
  
  def getMedian (l : List Int) : Float :=
    sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def mergeSorted (l1 l2 : List Int) : List Int :=
    sorry

vc-theorems: |-
  theorem findMedianSortedArrays_correct (nums1 nums2 : List Int)
    (h : ¬(nums1.length = 0 ∧ nums2.length = 0)) :
    findMedianSortedArrays nums1 nums2 = getMedian (mergeSorted nums1 nums2) := by
    sorry
  
  theorem findMedianSortedArrays_symmetric (nums1 nums2 : List Int) 
    (h : ¬(nums1.length = 0 ∧ nums2.length = 0)) :
    findMedianSortedArrays nums1 nums2 = findMedianSortedArrays nums2 nums1 := by
    sorry
  
  theorem findMedianSortedArrays_bounded (nums1 nums2 : List Int) 
    (h1 : ∀ x ∈ nums1, -1000 ≤ x ∧ x ≤ 1000)
    (h2 : ∀ x ∈ nums2, -1000 ≤ x ∧ x ≤ 1000)
    (h3 : ¬(nums1.length = 0 ∧ nums2.length = 0)) :
    -1000 ≤ findMedianSortedArrays nums1 nums2 ∧ 
    findMedianSortedArrays nums1 nums2 ≤ 1000 := by
    sorry
  
  /--
  info: 2.0
  -/
  #guard_msgs in
  #eval find_median_sorted_arrays #[1, 3] #[2]
  
  /--
  info: 2.5
  -/
  #guard_msgs in
  #eval find_median_sorted_arrays #[1, 2] #[3, 4]
  
  /--
  info: 3.0
  -/
  #guard_msgs in
  #eval find_median_sorted_arrays #[1] #[2, 3, 4, 5]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

