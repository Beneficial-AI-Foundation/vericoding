vc-description: |-
  ## Task:
  
  You have to write a function **pattern** which returns the following Pattern(See Examples) upto (2n-1) rows, where n is parameter.
  
  ### Rules/Note:
  * If the Argument is 0 or a Negative Integer then it should return "" i.e. empty string.
  * All the lines in the pattern have same length i.e equal to the number of characters in the longest line.
  * Range of n is (-∞,100]
  
  ## Examples:
  
  pattern(5):
  
          1    
         121   
        12321  
       1234321 
      123454321
       1234321 
        12321  
         121   
          1    
  
  pattern(10):
  
               1         
              121        
             12321       
            1234321      
           123454321     
          12345654321    
         1234567654321   
        123456787654321  
       12345678987654321 
      1234567890987654321
       12345678987654321 
        123456787654321  
         1234567654321   
          12345654321    
           123454321     
            1234321      
             12321       
              121        
               1         
  
  pattern(15):
  
                    1              
                   121             
                  12321            
                 1234321           
                123454321          
               12345654321         
              1234567654321        
             123456787654321       
            12345678987654321      
           1234567890987654321     
          123456789010987654321    
         12345678901210987654321   
        1234567890123210987654321  
       123456789012343210987654321 
      12345678901234543210987654321
       123456789012343210987654321 
        1234567890123210987654321  
         12345678901210987654321   
          123456789010987654321    
           1234567890987654321     
            12345678987654321      
             123456787654321       
              1234567654321        
               12345654321         
                123454321          
                 1234321           
                  12321            
                   121             
                    1              
  
  pattern(20):
  
                         1                   
                        121                  
                       12321                 
                      1234321                
                     123454321               
                    12345654321              
                   1234567654321             
                  123456787654321            
                 12345678987654321           
                1234567890987654321          
               123456789010987654321         
              12345678901210987654321        
             1234567890123210987654321       
            123456789012343210987654321      
           12345678901234543210987654321     
          1234567890123456543210987654321    
         123456789012345676543210987654321   
        12345678901234567876543210987654321  
       1234567890123456789876543210987654321 
      123456789012345678909876543210987654321
       1234567890123456789876543210987654321 
        12345678901234567876543210987654321  
         123456789012345676543210987654321   
          1234567890123456543210987654321    
           12345678901234543210987654321     
            123456789012343210987654321      
             1234567890123210987654321       
              12345678901210987654321        
               123456789010987654321         
                1234567890987654321          
                 12345678987654321           
                  123456787654321            
                   1234567654321             
                    12345654321              
                     123454321               
                      1234321                
                       12321                 
                        121                  
                         1

vc-preamble: |-
  def pattern (n : Int) : String := sorry
  
  def lines (s : String) : List String := sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def reverseString (s : String) : String := sorry
  
  theorem pattern_negative_or_zero (n : Int) : 
    n ≤ 0 → pattern n = "" :=
  sorry

vc-theorems: |-
  theorem pattern_num_lines (n : Int) :
    n > 0 → (lines (pattern n)).length = 2*n - 1 :=
  sorry
  
  theorem pattern_symmetric_lines (n : Int) (i : Nat) :
    n > 0 → i < n-1 → 
    (lines (pattern n)).get ⟨i, sorry⟩ = (lines (pattern n)).get ⟨n.toNat * 2 - 2 - i, sorry⟩ :=
  sorry
  
  theorem pattern_middle_line_palindrome (n : Int) :
    n > 0 → 
    let middle := (lines (pattern n)).get ⟨(n-1).toNat, sorry⟩
    middle = reverseString middle :=
  sorry
  
  theorem pattern_middle_line_length (n : Int) :
    n > 0 →
    let middle := (lines (pattern n)).get ⟨(n-1).toNat, sorry⟩
    middle.length = 2*n-1 :=
  sorry
  
  theorem pattern_line_length (n : Int) (i : Nat) :
    n > 0 → i < n →
    let line := (lines (pattern n)).get ⟨i, sorry⟩ 
    line.length = 2*(i+1)-1 + 2*(n.toNat-(i+1)) :=
  sorry
  
  theorem pattern_line_palindrome (n : Int) (i : Nat) :
    n > 0 → i < n →
    let line := (lines (pattern n)).get ⟨i, sorry⟩
    line.trim = reverseString (line.trim) :=
  sorry
  
  /--
  info: '1'
  -/
  #guard_msgs in
  #eval pattern 1
  
  /--
  info: '  1  \n 121 \n12321\n 121 \n  1  '
  -/
  #guard_msgs in
  #eval pattern 3
  
  /--
  info: ''
  -/
  #guard_msgs in
  #eval pattern 0

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

