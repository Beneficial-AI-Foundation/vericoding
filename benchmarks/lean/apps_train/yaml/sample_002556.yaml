vc-description: |-
  You get a new job working for Eggman Movers.  Your first task is to write a method that will allow the admin staff to enter a person’s name and return what that person's role is in the company.
  
  You will be given an array of object literals holding the current employees of the company.  You code must find the employee with the matching firstName and lastName and then return the role for that employee or if no employee is not found it should return "Does not work here!"
  
  The array is preloaded and can be referenced using the variable `employees` (`$employees` in Ruby). It uses the following structure.
  
  ```python
  employees = [ {'first_name': "Dipper", 'last_name': "Pines", 'role': "Boss"}, ...... ]
  ```
  
  There are no duplicate names in the array and the name passed in will be a single string with a space between the first and last name i.e. Jane Doe or just a name.

vc-preamble: |-
  def find_employees_role (name : String) : String :=
    sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def valid_roles : List String := 
    ["Boss", "Truck Driver", "Warehouse Manager", "Sales Assistant",
     "Admin", "Sales Manager", "Warehouse Picker", "Receptionist", "Trainee"]
  
  theorem known_employee_roles_are_valid (name : String) (h : name.length > 0) :
    let role := find_employees_role name
    role = "Does not work here!" ∨ role ∈ valid_roles :=
  sorry

vc-theorems: |-
  theorem returns_string (name : String) (h : name.length > 0) : 
    String.length (find_employees_role name) > 0 :=
  sorry
  
  theorem unknown_single_name_returns_not_found (name : String) (h1 : name.length > 0) 
      (h2 : ¬(name.contains ' ')) :
    find_employees_role name = "Does not work here!" :=
  sorry
  
  theorem name_order_matters (first last : String) 
      (h1 : first.length > 0) (h2 : last.length > 0) :
    let role1 := find_employees_role (first ++ " " ++ last)
    let role2 := find_employees_role (last ++ " " ++ first)
    (role1 ≠ "Does not work here!" ∧ role2 ≠ "Does not work here!") →
    role1 ≠ role2 :=
  sorry
  
  /--
  info: 'Truck Driver'
  -/
  #guard_msgs in
  #eval find_employees_role "Morty Smith"
  
  /--
  info: 'Admin'
  -/
  #guard_msgs in
  #eval find_employees_role "Anna Bell"
  
  /--
  info: 'Does not work here!'
  -/
  #guard_msgs in
  #eval find_employees_role "Bell Jewel"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

