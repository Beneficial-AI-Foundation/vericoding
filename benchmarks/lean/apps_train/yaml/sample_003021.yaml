vc-description: |-
  # Task
   You are given three integers `l, d and x`. Your task is:
  ```
  • determine the minimal integer n 
      such that l ≤ n ≤ d, and the sum of its digits equals x.
  • determine the maximal integer m 
      such that l ≤ m ≤ d, and the sum of its digits equals x.
  ```
  It is guaranteed that such numbers always exist.
  
  # Input/Output
  
   - `[input]` integer `l`
  
   - `[input]` integer `d`
  
    `1 ≤ l ≤ d ≤ 10000.`
  
   - `[input]` integer `x`
  
    `1 ≤ x ≤ 36`
  
   - `[output]` an integer array
  
    Array of two elements, where the first element is `n`, and the second one is `m`.
  
  # Example
  
   For `l = 500, d = 505, x = 10`, the output should be `[505, 505]`.
  
   For `l = 100, d = 200, x = 10`, the output should be `[109, 190]`.

vc-preamble: |-
  def min_and_max (l d x : Nat) : List Nat :=
    sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def sum_of_digits (n : Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem min_and_max_properties {l d x : Nat}
    (h1: l ≤ d) 
    (h2: l > 0)
    (h3: d ≤ 1000)
    (h4: x ≤ 27)
    (h5: ∃ n, l ≤ n ∧ n ≤ d ∧ sum_of_digits n = x) :
    let result := min_and_max l d x
    List.length result = 2 ∧
    result[0]! ≤ result[1]! ∧
    l ≤ result[0]! ∧ result[0]! ≤ d ∧
    l ≤ result[1]! ∧ result[1]! ≤ d ∧
    sum_of_digits result[0]! = x ∧
    sum_of_digits result[1]! = x :=
    sorry
  
  theorem min_and_max_identical_bounds {n : Nat}
    (h1: n > 0)
    (h2: n ≤ 1000) :
    let x := sum_of_digits n
    let result := min_and_max n n x
    result[0]! = n ∧ result[1]! = n :=
    sorry
  
  /--
  info: [109, 190]
  -/
  #guard_msgs in
  #eval min_and_max 100 200 10
  
  /--
  info: [505, 505]
  -/
  #guard_msgs in
  #eval min_and_max 500 505 10
  
  /--
  info: [104, 500]
  -/
  #guard_msgs in
  #eval min_and_max 99 501 5

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

