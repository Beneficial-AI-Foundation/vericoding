vc-description: |-
  Make multiple functions that will return the sum, difference, modulus, product, quotient, and the exponent respectively.
  
  Please use the following function names:
  
  addition = **add**
  
  multiply = **multiply**
  
  division = **divide** (both integer and float divisions are accepted)
  
  modulus = **mod**
  
  exponential = **exponent**
  
  subtraction = **subt**
  
  *Note: All math operations will be:
  a (operation) b*

vc-preamble: |-
  def add (a b : Int) : Int := sorry
  def multiply (a b : Int) : Int := sorry
  
  def divide (a b : Int) : Int := sorry 
  def mod (a b : Int) : Int := sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def exponent (a b : Int) : Int := sorry
  def subt (a b : Int) : Int := sorry
  
  -- Addition properties

vc-theorems: |-
  theorem add_commutative (a b : Int) : add a b = add b a := sorry
  
  theorem add_identity (a : Int) : add a 0 = a := sorry 
  
  theorem add_associative (a b : Int) : add (add a b) 0 = add a (add b 0) := sorry
  
  -- Multiplication properties 
  
  theorem mult_commutative (a b : Int) : multiply a b = multiply b a := sorry
  
  theorem mult_identity (a : Int) : multiply a 1 = a := sorry
  
  theorem mult_zero (a : Int) : multiply a 0 = 0 := sorry
  
  -- Division properties
  
  theorem div_self {a : Int} (h : a ≠ 0) : divide a a = 1 := sorry
  
  theorem div_mult_cancel (a b : Int) (h : b ≠ 0) : 
    multiply (divide a b) b = a := sorry
  
  -- Modulo properties
  
  theorem mod_bounds (a b : Int) (h : b > 0) : 
    0 ≤ mod a b ∧ mod a b < b := sorry
  
  theorem mod_reconstruction (a b : Int) (h : b ≠ 0) :
    a = multiply (divide a b) b + mod a b := sorry
  
  -- Exponentiation properties
  
  theorem exp_zero (a : Int) (h : a > 0) : exponent a 0 = 1 := sorry
  
  theorem exp_one (a : Int) : exponent a 1 = a := sorry
  
  theorem exp_growth (a b : Int) (h1 : a > 0) (h2 : b > 0) :
    exponent a b ≥ a := sorry
  
  -- Subtraction properties
  
  theorem subt_as_add (a b : Int) : subt a b = add a (-b) := sorry
  
  theorem subt_self (a : Int) : subt a a = 0 := sorry
  
  /--
  info: 3
  -/
  #guard_msgs in
  #eval add 1 2
  
  /--
  info: 12
  -/
  #guard_msgs in
  #eval add 5 7
  
  /--
  info: 0
  -/
  #guard_msgs in
  #eval add 0 0
  
  /--
  info: 6
  -/
  #guard_msgs in
  #eval multiply 2 3
  
  /--
  info: 25
  -/
  #guard_msgs in
  #eval multiply 5 5
  
  /--
  info: 3
  -/
  #guard_msgs in
  #eval divide 6 2
  
  /--
  info: 2.5
  -/
  #guard_msgs in
  #eval divide 5 2
  
  /--
  info: 1
  -/
  #guard_msgs in
  #eval mod 7 3
  
  /--
  info: 1
  -/
  #guard_msgs in
  #eval mod 10 3
  
  /--
  info: 8
  -/
  #guard_msgs in
  #eval exponent 2 3
  
  /--
  info: 9
  -/
  #guard_msgs in
  #eval exponent 3 2
  
  /--
  info: 2
  -/
  #guard_msgs in
  #eval subt 5 3
  
  /--
  info: 3
  -/
  #guard_msgs in
  #eval subt 10 7

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

