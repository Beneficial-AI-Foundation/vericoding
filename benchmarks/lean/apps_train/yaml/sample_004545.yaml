vc-description: |-
  You will be given an array `a` and a value `x`. All you need to do is check whether the provided array contains the value.
  
  ~~~if:swift
  The type of `a` and `x` can be `String` or `Int`.
  ~~~
  ~~~if-not:swift
  Array can contain numbers or strings. X can be either.
  ~~~
  ~~~if:racket
  In racket, you'll be given a list instead of an array. If the value is in the list,
  return #t instead of another value that is also considered true.
  ```racket
  (contains '(1 2 3) 3) ; returns #t
  (contains '(1 2 3) 5) ; returns #f
  ```
  ~~~
  
  Return `true` if the array contains the value, `false` if not.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def check (seq : List α) (elem : α) : Bool :=
    sorry

vc-theorems: |-
  theorem check_membership_true {α} (seq : List α) (elem : α) :
    elem ∈ seq → check seq elem = true := by
    sorry
  
  theorem check_membership_false {α} (seq : List α) (elem : α) :
    elem ∉ seq → check seq elem = false := by
    sorry
  
  theorem check_reflexive {α} (seq : List α) (elem : α) :
    check (seq ++ [elem]) elem = true := by
    sorry
  
  end CheckSequence
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval check [1, 2, 3] 2
  
  /--
  info: False
  -/
  #guard_msgs in
  #eval check ["hello", "world"] "cat"
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval check [66.25, 333, 333.5] 333

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

