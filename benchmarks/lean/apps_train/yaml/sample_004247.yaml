vc-description: |-
  Imagine there's a big cube consisting of n^3 small cubes. Calculate, how many small cubes are not visible from outside.
  
  For example, if we have a cube which has 4 cubes in a row, then the function should return 8, because there are 8 cubes inside our cube (2 cubes in each dimension)

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def not_visible_cubes (n : Int) : Int := sorry
  
  theorem not_visible_cubes_nonnegative (n : Int) (h : n ≥ 0) :
    not_visible_cubes n ≥ 0 := sorry

vc-theorems: |-
  theorem not_visible_cubes_small_cases (n : Int) (h : n ≤ 2) :
    not_visible_cubes (max 0 n) = 0 := sorry
  
  theorem not_visible_cubes_large_cases (n : Int) (h : n ≥ 3) :
    not_visible_cubes n = (n - 2) ^ 3 := sorry
  
  /--
  info: 0
  -/
  #guard_msgs in
  #eval not_visible_cubes 0
  
  /--
  info: 8
  -/
  #guard_msgs in
  #eval not_visible_cubes 4
  
  /--
  info: 27
  -/
  #guard_msgs in
  #eval not_visible_cubes 5

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

