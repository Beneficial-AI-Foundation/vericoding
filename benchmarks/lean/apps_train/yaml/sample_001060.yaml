vc-description: |-
  /-
  Two words rhyme if their last 3 letters are a match. Given N words, print the test case number (of the format Case : num) followed by the rhyming words in separate line adjacent to each other.
  
  The output can be in anyorder.
  
  -----Input-----
  First line contains the number of test case T
  
  The next line contains the number of words N
  
  Next N words follow . They’ll contain only alphabets from ‘a’-‘z’.
  
  -----Output-----
  Print case number (for each test case) of the format Case : num followed by the words that rhyme in a new line.
  
  -----Constraints-----
  1 <= T <= 5
  
  1 <= N <= 1000
  
  3 <= length of each word <= 1000
  
  -----Example-----
  Input:
  3
  3
  nope qwerty hope
  5 
  brain drain request grain nest
  4
  these words dont rhyme
  
  Output:
  Case : 1
  hope nope
  qwerty
  Case : 2
  brain drain grain
  nest request
  Case : 3
  these
  dont
  words
  rhyme
  
  -----Explanation-----
  Case : 2
  
  brain drain grain
  
  nest request
  
  Case : 3
  
  these
  
  dont
  
  words
  
  rhyme
  Explanation for case 1: since hope and nope rhyme (suffix “ope” matches), we print them in the same line and qwerty In a new line.
  
  Note that
  
  qwerty
  
  nope hope
  
  is also correct (the output can be in any order )
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def find_rhyming_words (test_cases : List (List String)) : List String :=
    sorry

vc-theorems: |-
  theorem result_format_prop {test_cases : List (List String)}
    (h1 : ∀ case ∈ test_cases, case.length > 0)
    (h2 : test_cases.length > 0) :
    let result := find_rhyming_words test_cases
    result.head? = some "Case : 1" ∧ 
    (result.filter (fun line => line.startsWith "Case :")).length = test_cases.length :=
  sorry
  
  theorem words_preserved_prop {test_cases : List (List String)} 
    (h1 : ∀ case ∈ test_cases, case.length > 0)
    (h2 : test_cases.length > 0) :
    let result := find_rhyming_words test_cases
    let input_words := test_cases.join
    let output_words := (result.filter (fun line => ¬line.startsWith "Case :")).bind (fun s => (s.split (. = ' ')))
    List.all input_words (fun w => w ∈ output_words) ∧
    List.all output_words (fun w => w ∈ input_words) :=
  sorry
  
  theorem rhyming_words_grouped_prop {test_cases : List (List String)}
    (h1 : ∀ case ∈ test_cases, case.length ≥ 2)
    (h2 : test_cases.length > 0) :
    let result := find_rhyming_words test_cases
    ∀ line ∈ result, ¬line.startsWith "Case :" →
      let words := line.split (. = ' ')
      words.length > 1 →
      let suffix := (words.head?.getD "").takeRight 3
      (∀ w ∈ words, w.takeRight 3 = suffix) ∧
      ∀ x ∈ words, ∀ y ∈ words, x ≤ y ∨ y ≤ x :=
  sorry
  
  /-
  info: expected1
  -/
  -- #guard_msgs in
  -- #eval find_rhyming_words [["nope", "qwerty", "hope"]]
  
  /-
  info: expected2
  -/
  -- #guard_msgs in
  -- #eval find_rhyming_words [["brain", "drain", "request", "grain", "nest"]]
  
  /-
  info: expected3
  -/
  -- #guard_msgs in
  -- #eval find_rhyming_words [["these", "words", "dont", "rhyme"]]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

