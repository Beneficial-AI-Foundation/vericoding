vc-description: |-
  Write a function that receives two strings and returns n, where n is equal to the number of characters we should shift the first string forward to match the second.
  
  For instance, take the strings "fatigue" and "tiguefa". In this case, the first string has been rotated 5 characters forward to produce the second string, so 5 would be returned.
  If the second string isn't a valid rotation of the first string, the method returns -1. 
  
  Examples:
  ```
  "coffee", "eecoff" => 2
  "eecoff", "coffee" => 4
  "moose", "Moose" => -1
  "isn't", "'tisn" => 2
  "Esham", "Esham" => 0
  "dog", "god" => -1
  ```
  
  For Swift, your function should return an Int?. So rather than returning -1 when the second string isn't a valid rotation of the first, return nil.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def shifted_diff (s1 s2 : String) : Int :=
    sorry

vc-theorems: |-
  theorem shifted_diff_same_string (s : String) (h : s.length > 0) :
    shifted_diff s s = 0 := 
    sorry
  
  theorem shifted_diff_rotation (s : String) (n : Nat) (h : s.length > 0) :
    let rotated := (s.drop (n % s.length)).append (s.take (n % s.length))
    shifted_diff s rotated ≥ 0 :=
    sorry
  
  theorem shifted_diff_different_lengths (s1 s2 : String) 
    (h1 : s1.length > 0) (h2 : s2.length > 0) (h3 : s1.length ≠ s2.length) :
    shifted_diff s1 s2 = -1 :=
    sorry
  
  theorem shifted_diff_not_rotation (s1 s2 : String)
    (h1 : s1.length > 0) (h2 : s2.length > 0) 
    (h3 : s1.length = s2.length)
    (h4 : s1.data ≠ s2.data) :
    shifted_diff s1 s2 = -1 :=
    sorry
  
  /--
  info: 5
  -/
  #guard_msgs in
  #eval shifted_diff "fatigue" "tiguefa"
  
  /--
  info: 2
  -/
  #guard_msgs in
  #eval shifted_diff "coffee" "eecoff"
  
  /--
  info: -1
  -/
  #guard_msgs in
  #eval shifted_diff "dog" "god"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

