vc-description: |-
  Validate if a given string is numeric.
  
  Some examples:
  "0" => true
  " 0.1 " => true
  "abc" => false
  "1 a" => false
  "2e10" => true
  
  Note: It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one.
  
  Update (2015-02-10):
  The signature of the C++ function had been updated. If you still see your function signature accepts a const char * argument, please click the reload button to reset your code definition.

vc-preamble: |-
  def is_numeric (s : String) : Bool := sorry
  
  def isInteger (s : String) : Bool := sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def isDecimal (s : String) : Bool := sorry
  def isWhitespace (c : Char) : Bool := c = ' ' || c = '\t' || c = '\n' || c = '\r'

vc-theorems: |-
  theorem integer_pattern (s : String) 
    (h : isInteger s) :
    is_numeric s = true := sorry
  
  theorem decimal_pattern (s : String)
    (h : isDecimal s) :
    is_numeric s = true := sorry
  
  theorem invalid_chars (s : String)
    (h₁ : s.length > 0)
    (h₂ : ∀ c ∈ s.data, c ∈ ['a', 'b', 'c', 'd', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 
                             'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',
                             'x', 'y', 'z', 'A', 'B', 'C', 'D', 'F', 'G', 'H', 'I',
                             'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',
                             'U', 'V', 'W', 'X', 'Y', 'Z', '!', '@', '#', '$', '%',
                             '^', '&', '*', '(', ')', '_', '{', '}', '[', ']', ';',
                             ':', '<', '>', '?'])
    (h₃ : ∀ c ∈ s.data, c ≠ 'e' ∧ c ≠ 'E') :
    is_numeric s = false := sorry
  
  theorem whitespace_handling (s : String) (ws : String)
    (h₁ : ∀ c ∈ ws.data, isWhitespace c)
    (h₂ : isInteger s ∨ isDecimal s) 
    (h₃ : s.trim ≠ "") :
    is_numeric (ws ++ s ++ ws) = is_numeric s := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

