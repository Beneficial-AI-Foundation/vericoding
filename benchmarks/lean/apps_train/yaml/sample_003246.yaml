vc-description: |-
  # Task
    You are given `N` ropes, where the length of each rope is a positive integer. At each step, you have to reduce all the ropes by the length of the smallest rope.
  
   The step will be repeated until no ropes are left. Given the length of N ropes, print the number of ropes that are left before each step.
  
  # Example
  
   For `a = [3, 3, 2, 9, 7]`, the result should be `[5, 4, 2, 1]`
   ```
  You have 5 ropes:       
                     3 3 2 9 7   ( 5 left)
  step 1:          1 1 0 7 5   ( 4 left)
  step 2:          0 0 0 6 4   ( 2 left)
  step 3:          0 0 0 0 2   ( 1 left)
  step 4:          0 0 0 0 0    
  Hence the result is [5, 4, 2, 1]```
  
  # Input/Output
  
   - `[input]` integer array `a`
  
    length of each rope.
  
    `3 <= a.length <= 2000`
  
    `1 <= a[i] <= 100`
  
   - `[output]` an integer array
  
    number of ropes before each step.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def List.uniques {α : Type u} [BEq α] (xs : List α) : List α := sorry
  
  def cut_the_ropes (arr : List Nat) : List Nat := sorry

vc-theorems: |-
  theorem cut_ropes_first_element (arr : List Nat) 
    (h : arr.length ≥ 1) :
    let result := cut_the_ropes arr
    result.head! = arr.length := sorry
  
  theorem cut_ropes_strictly_decreasing (arr : List Nat) 
    (h : arr.length ≥ 1) :
    let result := cut_the_ropes arr
    ∀ i, i + 1 < result.length → result[i]! > result[i+1]! := sorry
  
  theorem cut_ropes_length_bounded (arr : List Nat)
    (h : arr.length ≥ 1) :
    let result := cut_the_ropes arr  
    result.length ≤ (List.uniques arr).length := sorry
  
  theorem cut_ropes_all_positive (arr : List Nat)
    (h : arr.length ≥ 1) :
    let result := cut_the_ropes arr
    ∀ x ∈ result, x > 0 := sorry
  
  theorem cut_ropes_identical_elements (n : Nat) (len : Nat)
    (h : len ≥ 1)
    (arr : List Nat)
    (h_arr : arr = List.replicate len n) :
    let result := cut_the_ropes arr
    result = [len] := sorry
  
  theorem cut_ropes_min_decrease (arr : List Nat)
    (h : arr.length ≥ 2) :
    let result := cut_the_ropes arr
    ∀ i, i + 1 < result.length → result[i]! - result[i+1]! ≥ 1 := sorry
  
  /--
  info: expected1
  -/
  #guard_msgs in
  #eval cut_the_ropes [3, 3, 2, 9, 7]
  
  /--
  info: expected2
  -/
  #guard_msgs in
  #eval cut_the_ropes [1, 2, 3, 4, 3, 3, 2, 1]
  
  /--
  info: expected3
  -/
  #guard_msgs in
  #eval cut_the_ropes [9, 9, 9, 9, 7]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

