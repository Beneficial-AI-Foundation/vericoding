vc-description: |-
  /-
  A nested list (or *array* in JavaScript) is a list that apears as a value inside another list, 
  ```python
  [item, item, [item, item], item]
  ```
  in the above list, [item, item] is a nested list.  
  
  Your goal is to write a function that determines the depth of the deepest nested list within a given list.  
  return 1 if there are no nested lists.
  The list passed to your function can contain any data types.  
  
  A few examples:
  
  ```python
  list_depth([True])
  return 1
  
  list_depth([])
  return 1
  
  list_depth([2, "yes", [True, False]])
  return 2
  
  list_depth([1, [2, [3, [4, [5, [6], 5], 4], 3], 2], 1])
  return 6
  
  list_depth([2.0, [2, 0], 3.7, [3, 7], 6.7, [6, 7]])
  return 2
  ```
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def NestedList.depth {α : Type} : NestedList α → Nat
    | elem _ => sorry
    | list _ => sorry

vc-theorems: |-
  theorem flat_list_depth {α : Type} (l : List α) : 
    NestedList.depth (NestedList.list (l.map NestedList.elem)) = 1 := sorry
  
  theorem list_depth_lower_bound {α : Type} (nl : NestedList α) :
    NestedList.depth nl ≥ 1 := sorry
  
  theorem nested_list_depth_greater {α : Type} (outer : NestedList α) (inner : NestedList α)
    (h : inner ≠ outer) : 
    NestedList.depth outer > NestedList.depth inner := sorry
  
  /-
  info: 6
  -/
  -- #guard_msgs in
  -- #eval list_depth [1, [2, [3, [4, [5, [6], 5], 4], 3], 2], 1]
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval list_depth [2, "yes", [True, False]]
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval list_depth [2.0, [2, 0], 3.7, [3, 7], 6.7, [6, 7]]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

