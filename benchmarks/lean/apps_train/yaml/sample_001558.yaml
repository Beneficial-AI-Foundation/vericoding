vc-description: |-
  /-
  In this kata we want to convert a string into an integer. The strings simply represent the numbers in words.
  
  Examples:
  
  * "one" => 1
  * "twenty" => 20
  * "two hundred forty-six" => 246
  * "seven hundred eighty-three thousand nine hundred and nineteen" => 783919
  
  Additional Notes:
  
  * The minimum number is "zero" (inclusively)
  * The maximum number, which must be supported is 1 million (inclusively)
  * The "and" in e.g. "one hundred and twenty-four" is optional, in some cases it's present and in others it's not
  * All tested numbers are valid, you don't need to validate them
  -/

vc-preamble: |-
  def parse_int (s : String) : Nat :=
    sorry
  
  def normalize_text (s : String) : String :=
    sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def int_to_english (n : Nat) : String :=
    sorry
  
  -- Main theorems based on property tests

vc-theorems: |-
  theorem parse_int_inverse (n : Nat) (h : n â‰¤ 999) : 
    parse_int (int_to_english n) = n :=
  sorry
  
  theorem parse_int_specific_example :
    parse_int "one hundred twenty three" = 123 :=
  sorry
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval parse_int "zero"
  
  /-
  info: 123
  -/
  -- #guard_msgs in
  -- #eval parse_int "one hundred twenty-three"
  
  /-
  info: 200003
  -/
  -- #guard_msgs in
  -- #eval parse_int "two hundred thousand three"

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible

