vc-description: |-
  /-
  In this kata, you should calculate type of triangle with three given sides ``a``, ``b`` and ``c`` (given in any order).
  
  If all angles are less than ``90°``, this triangle is ``acute`` and function should return ``1``.
  
  If one angle is strictly ``90°``, this triangle is ``right`` and function should return ``2``.
  
  If one angle more than ``90°``, this triangle is ``obtuse`` and function should return ``3``.
  
  If three sides cannot form triangle, or one angle is ``180°`` (which turns triangle into segment) - function should return ``0``.
  
  Input parameters are ``sides`` of given triangle. All input values are non-negative floating point or integer numbers (or both).
  
  Acute
  
  Right
  
  Obtuse
  
  ### Examples:
  ```python
  triangle_type(2, 4, 6) # return 0 (Not triangle)
  triangle_type(8, 5, 7) # return 1 (Acute, angles are approx. 82°, 38° and 60°)
  triangle_type(3, 4, 5) # return 2 (Right, angles are approx. 37°, 53° and exactly 90°)
  triangle_type(7, 12, 8) # return 3 (Obtuse, angles are approx. 34°, 106° and 40°)
  ```
  
  If you stuck, this can help you: http://en.wikipedia.org/wiki/Law_of_cosines. But you can solve this kata even without angle calculation.
  
  There is very small chance of random test to fail due to round-off error, in such case resubmit your solution.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def triangle_type (a b c : Int) : Int :=
    sorry

vc-theorems: |-
  theorem triangle_type_symmetric (a b c : Int) : 
    a > 0 → b > 0 → c > 0 →
    triangle_type a b c = triangle_type a c b ∧
    triangle_type a b c = triangle_type b a c ∧ 
    triangle_type a b c = triangle_type b c a ∧
    triangle_type a b c = triangle_type c a b ∧
    triangle_type a b c = triangle_type c b a :=
  sorry
  
  theorem triangle_inequality (a b c : Int) :
    a > 0 → b > 0 → c > 0 →
    let x := min a (min b c)
    let y := max (min a (max b c)) (min b c)
    let z := max a (max b c) 
    (if z ≥ x + y then triangle_type a b c = 0 
     else triangle_type a b c ≠ 0) :=
  sorry
  
  theorem right_triangle_scaling (a b c : Int) :
    a > 0 → b > 0 → 
    c*c = a*a + b*b →
    triangle_type a b c = 2 ∧
    triangle_type (2*a) (2*b) (2*c) = 2 :=
  sorry
  
  theorem triangle_type_range (a b c : Int) :
    a > 0 → b > 0 → c > 0 →
    triangle_type a b c = 0 ∨ 
    triangle_type a b c = 1 ∨
    triangle_type a b c = 2 ∨ 
    triangle_type a b c = 3 :=
  sorry
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval triangle_type 2 4 6
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval triangle_type 8 5 7
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval triangle_type 3 4 5
  
  /-
  info: 3
  -/
  -- #guard_msgs in
  -- #eval triangle_type 7 12 8

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

