vc-description: |-
  /-
  Given the root of a tree, you are asked to find the most frequent subtree sum. The subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself). So what is the most frequent subtree sum value? If there is a tie, return all the values with the highest frequency in any order.
  
  Examples 1
  Input:
  
    5
   /  \
  2   -3
  
  return [2, -3, 4], since all the values happen only once, return all of them in any order.
  
  Examples 2
  Input:
  
    5
   /  \
  2   -5
  
  return [2], since 2 happens twice, however -5 only occur once.
  
  Note:
  You may assume the sum of values in any subtree is in the range of 32-bit signed integer.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def make_tree (values : List Int) : TreeNode := sorry
  
  def find_frequent_tree_sum (root : TreeNode) : List Int := sorry

vc-theorems: |-
  theorem find_frequent_sum_properties 
    (values : List Int) 
    (result := find_frequent_tree_sum (make_tree values)) : 
    -- Empty tree returns empty list
    (values = [] → result = []) ∧
    -- Result is list of integers (satisfied by type system)
    -- All frequencies are equal
    (result ≠ [] → 
      ∀ x y, x ∈ result → y ∈ result → 
      (List.count x result) = (List.count y result))
    := sorry
  
  theorem single_node_tree_property
    (value : Int)
    (root := TreeNode.node value TreeNode.none TreeNode.none) :
    find_frequent_tree_sum root = [value] := sorry
  
  theorem empty_tree_property :
    find_frequent_tree_sum TreeNode.none = [] := sorry
  
  /-
  info: [2]
  -/
  -- #guard_msgs in
  -- #eval find_frequent_tree_sum TreeNode(5)
  
  /-
  info: []
  -/
  -- #guard_msgs in
  -- #eval find_frequent_tree_sum None

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

