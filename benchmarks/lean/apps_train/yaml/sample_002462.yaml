vc-description: |-
  =====Function Descriptions=====
  identity
  
  The identity tool returns an identity array. An identity array is a square matrix with all the main diagonal elements as 1 and the rest as 0. The default type of elements is float.
  
  import numpy
  print numpy.identity(3) #3 is for  dimension 3 X 3
  
  #Output
  [[ 1.  0.  0.]
   [ 0.  1.  0.]
   [ 0.  0.  1.]]
  
  eye
  
  The eye tool returns a 2-D array with 1's as the diagonal and 0's elsewhere. The diagonal can be main, upper or lower depending on the optional parameter k. A positive k is for the upper diagonal, a negative k is for the lower, and a 0 k (default) is for the main diagonal.
  
  import numpy
  print numpy.eye(8, 7, k = 1)    # 8 X 7 Dimensional array with first upper diagonal 1.
  
  #Output
  [[ 0.  1.  0.  0.  0.  0.  0.]
   [ 0.  0.  1.  0.  0.  0.  0.]
   [ 0.  0.  0.  1.  0.  0.  0.]
   [ 0.  0.  0.  0.  1.  0.  0.]
   [ 0.  0.  0.  0.  0.  1.  0.]
   [ 0.  0.  0.  0.  0.  0.  1.]
   [ 0.  0.  0.  0.  0.  0.  0.]
   [ 0.  0.  0.  0.  0.  0.  0.]]
  
  print numpy.eye(8, 7, k = -2)   # 8 X 7 Dimensional array with second lower diagonal 1.
  
  =====Problem Statement=====
  Your task is to print an array of size NXM with its main diagonal elements as 1's and 0's everywhere else.
  
  =====Input Format=====
  A single line containing the space separated values of N and M.
  N denotes the rows.
  M denotes the columns.
  
  =====Output Format=====
  Print the desired NXM array.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def Matrix (n m : Nat) := Fin n → Fin m → Nat
  
  def generate_eye_matrix (n m : Nat) : Matrix n m := sorry

vc-theorems: |-
  theorem eye_matrix_valid_dimensions {n m : Nat} (h1 : n > 0) (h2 : m > 0) :
    ∃ (M : Matrix n m), M = generate_eye_matrix n m := sorry
  
  theorem eye_matrix_diagonal_ones {n m : Nat} (h1 : n > 0) (h2 : m > 0) 
    (i : Fin n) (h3 : i.val < m) :
    (generate_eye_matrix n m) i ⟨i.val, h3⟩ = 1 := sorry
  
  theorem eye_matrix_off_diagonal_zeros {n m : Nat} (h1 : n > 0) (h2 : m > 0)
    (i : Fin n) (j : Fin m) :
    i.val ≠ j.val → (generate_eye_matrix n m) i j = 0 := sorry
  
  theorem eye_matrix_invalid_input {n m : Int} :
    n < 0 ∨ m < 0 → generate_eye_matrix n.natAbs m.natAbs = λ i j => 0 := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

