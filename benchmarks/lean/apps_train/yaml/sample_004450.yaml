vc-description: |-
  In this kata you must take an input string, reverse the order of the words, and reverse the order of the letters within the words.
  
  But, as a bonus, every test input will end with a punctuation mark (! ? .) and the output should be returned with the mark at the end.
  
  A few examples should help clarify:
  
  ```python
  esrever("hello world.") == "dlrow olleh."
  
  esrever("Much l33t?") == "t33l hcuM?"
  
  esrever("tacocat!") == "tacocat!"
  ```
  
  Quick Note: A string will always be passed in (though it may be empty) so no need for error-checking other types.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def esrever (s : String) : String := sorry
  
  theorem esrever_preserves_length (s : String) (h : s ≠ "") :
    String.length (esrever s) = String.length s := sorry

vc-theorems: |-
  theorem empty_string_reversed_empty : 
    esrever "" = "" := sorry 
  
  theorem double_reverse_equals_original (s : String) (h : s ≠ "") : 
    esrever (esrever s) = s := sorry
  
  /-- For any character that appears in the string, it appears the same number of times
      in the reversed string -/
  
  theorem reverse_maintains_character_counts (s : String) (h : s ≠ "") (c : Char) :
    (s.data.countP (· = c)) = ((esrever s).data.countP (· = c)) := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

