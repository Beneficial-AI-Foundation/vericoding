vc-description: |-
  For every good kata idea there seem to be quite a few bad ones!
  
  In this kata you need to check the provided array (x) for good ideas 'good' and bad ideas 'bad'. If there are one or two good ideas, return 'Publish!', if there are more than 2 return 'I smell a series!'. If there are no good ideas, as is often the case, return 'Fail!'.
  
  ~~~if:c
  For C: do not dynamically allocate memory,
        instead return a string literal
  ~~~

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def well (ideas : List String) : String := sorry
  
  theorem well_output_valid (ideas : List String) (h : ideas ≠ []) :
    well ideas = "Fail!" ∨ well ideas = "Publish!" ∨ well ideas = "I smell a series!" := sorry

vc-theorems: |-
  theorem well_case_no_good (ideas : List String) (h1 : ideas ≠ []) 
    (h2 : ∀ x ∈ ideas, x ≠ "good") :
    well ideas = "Fail!" := sorry
  
  theorem well_case_one_or_two_good (ideas : List String) (h : ideas ≠ [])
    (h_count : (ideas.filter (· = "good")).length ≥ 1 ∧ 
               (ideas.filter (· = "good")).length ≤ 2) :
    well ideas = "Publish!" := sorry
  
  theorem well_case_many_good (ideas : List String) (h : ideas ≠ [])
    (h_count : (ideas.filter (· = "good")).length > 2) :
    well ideas = "I smell a series!" := sorry
  
  theorem well_case_sensitive (ideas : List String) (h : ideas ≠ [])
    (h_no_good : "good" ∉ ideas) :
    well ideas = "Fail!" := sorry
  
  /--
  info: 'Fail!'
  -/
  #guard_msgs in
  #eval well ["bad", "bad", "bad"]
  
  /--
  info: 'Publish!'
  -/
  #guard_msgs in
  #eval well ["good", "bad", "bad", "bad", "bad"]
  
  /--
  info: 'I smell a series!'
  -/
  #guard_msgs in
  #eval well ["good", "bad", "bad", "bad", "bad", "good", "bad", "bad", "good"]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

