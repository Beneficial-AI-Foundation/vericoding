vc-description: |-
  Raj was to move up through a pattern of stairs of a given number **(n)**. Help him to get to the    top using the function **stairs**.
  
  ##Keep in mind :
    * If **n<1** then return ' ' .
    * There are a lot of spaces before the stair starts except for **pattern(1)**
  
  ##Examples :
    pattern(1)
  
            1 1
  
    pattern(6)
  
                            1 1
                        1 2 2 1  
                    1 2 3 3 2 1
                1 2 3 4 4 3 2 1
            1 2 3 4 5 5 4 3 2 1
        1 2 3 4 5 6 6 5 4 3 2 1
  
  pattern(12)
  
                                                    1 1
                                                1 2 2 1
                                            1 2 3 3 2 1
                                        1 2 3 4 4 3 2 1
                                    1 2 3 4 5 5 4 3 2 1
                                1 2 3 4 5 6 6 5 4 3 2 1
                            1 2 3 4 5 6 7 7 6 5 4 3 2 1
                        1 2 3 4 5 6 7 8 8 7 6 5 4 3 2 1
                    1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1
                1 2 3 4 5 6 7 8 9 0 0 9 8 7 6 5 4 3 2 1
            1 2 3 4 5 6 7 8 9 0 1 1 0 9 8 7 6 5 4 3 2 1
        1 2 3 4 5 6 7 8 9 0 1 2 2 1 0 9 8 7 6 5 4 3 2 1

vc-preamble: |-
  def stairs (n : Int) : String := sorry 
  def step (n : Int) : String := sorry
  
  def splitLines (s : String) : List String := sorry
  def rightJustify (s : String) (width : Int) : String := sorry
  
  def isDigit (c : Char) : Bool := sorry
  def listToString (l : List Nat) : String := sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def stringContains (s : String) (c : Char) : Prop := sorry
  
  -- Properties for stairs function

vc-theorems: |-
  theorem stairs_empty_for_invalid_input (n : Int) : 
    n < 1 → stairs n = " " := sorry
  
  theorem stairs_line_count (n : Int) : 
    n ≥ 1 → (splitLines (stairs n)).length = n.toNat := sorry
  
  theorem stairs_line_width (n : Int) (line : String) :
    n ≥ 1 → line ∈ splitLines (stairs n) → line.length ≤ (4 * n - 1).toNat := sorry
  
  theorem stairs_right_justified (n : Int) (line : String) :
    n ≥ 1 → line ∈ splitLines (stairs n) → 
    line = rightJustify line (4 * n - 1) := sorry
  
  -- Properties for step function
  
  theorem step_length_correct (n : Int) :
    n ≥ 1 → (splitLines (step n)).length = (2 * n - 1).toNat := sorry
  
  theorem step_digits_only (n : Int) (c : Char) :
    n ≥ 1 → stringContains (step n) c → isDigit c ∨ c = ' ' := sorry
  
  theorem step_sequence (n : Int) (i : Nat) :
    n ≥ 1 → i < n.toNat → 
    let nums := splitLines (step n);
    let expected := toString ((i + 1) % 10);
    nums.get? i = some expected := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

