vc-description: |-
  < PREVIOUS KATA
  NEXT KATA >
  
  ## Task:
  
  You have to write a function `pattern` which returns the following Pattern(See Examples) upto desired number of rows. 
  
  * Note:```Returning``` the pattern is not the same as ```Printing``` the pattern.
  
  ### Parameters:
  
      pattern(        n        ,        x        ,        y        );
                      ^                 ^                 ^   
                      |                 |                 |
               Term upto which   Number of times   Number of times
                Basic Pattern     Basic Pattern     Basic Pattern
                  should be         should be         should be
                   created          repeated           repeated
                                  horizontally        vertically
  
  * Note: `Basic Pattern` means what we created in Complete The Pattern #12
  
  ## Rules/Note:
  
  * The pattern should be created using only unit digits.
  * If `n < 1` then it should return "" i.e. empty string.
  * If `x <= 1` then the basic pattern should not be repeated horizontally.
  * If `y <= 1` then the basic pattern should not be repeated vertically.
  * `The length of each line is same`, and is equal to the length of longest line in the pattern.
  * Range of Parameters (for the sake of CW Compiler) :
    + `n ∈ (-∞,25]`
    + `x ∈ (-∞,10]`
    + `y ∈ (-∞,10]`
  * If only two arguments are passed then the function `pattern` should run as if `y <= 1`.
  * If only one argument is passed then the function `pattern` should run as if `x <= 1` & `y <= 1`.
  * The function `pattern` should work when extra arguments are passed, by ignoring the extra arguments.
  
  ## Examples:
  
  * Having Three Arguments-
  
   + pattern(4,3,2):
  
          1     1     1     1
           2   2 2   2 2   2 
            3 3   3 3   3 3  
             4     4     4   
            3 3   3 3   3 3  
           2   2 2   2 2   2 
          1     1     1     1
           2   2 2   2 2   2 
            3 3   3 3   3 3  
             4     4     4   
            3 3   3 3   3 3  
           2   2 2   2 2   2 
          1     1     1     1
  
  * Having Two Arguments-
  
    + pattern(10,2):
  
          1                 1                 1
           2               2 2               2 
            3             3   3             3  
             4           4     4           4   
              5         5       5         5    
               6       6         6       6     
                7     7           7     7      
                 8   8             8   8       
                  9 9               9 9        
                   0                 0         
                  9 9               9 9        
                 8   8             8   8       
                7     7           7     7      
               6       6         6       6     
              5         5       5         5    
             4           4     4           4   
            3             3   3             3  
           2               2 2               2 
          1                 1                 1
  
  * Having Only One Argument-
  
    + pattern(25):
  
          1                                               1
           2                                             2 
            3                                           3  
             4                                         4   
              5                                       5    
               6                                     6     
                7                                   7      
                 8                                 8       
                  9                               9        
                   0                             0         
                    1                           1          
                     2                         2           
                      3                       3            
                       4                     4             
                        5                   5              
                         6                 6               
                          7               7                
                           8             8                 
                            9           9                  
                             0         0                   
                              1       1                    
                               2     2                     
                                3   3                      
                                 4 4                       
                                  5                        
                                 4 4                       
                                3   3                      
                               2     2                     
                              1       1                    
                             0         0                   
                            9           9                  
                           8             8                 
                          7               7                
                         6                 6               
                        5                   5              
                       4                     4             
                      3                       3            
                     2                         2           
                    1                           1          
                   0                             0         
                  9                               9        
                 8                                 8       
                7                                   7      
               6                                     6     
              5                                       5    
             4                                         4   
            3                                           3  
           2                                             2 
          1                                               1
  
  >>>LIST OF ALL MY KATAS<<<

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def pattern (n : Int) (x : Int := 1) (y : Int := 1) : String :=
    sorry

vc-theorems: |-
  theorem pattern_invalid_input {n : Int} (h : n ≤ 0) :
    pattern n = "" := sorry
  
  theorem pattern_valid_chars {n x y : Int} (hn : 1 ≤ n ∧ n ≤ 9) (hx : 1 ≤ x ∧ x ≤ 5) (hy : 1 ≤ y ∧ y ≤ 5) :
    ∀ c ∈ (pattern n x y).data, 
      c ∈ ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ' ', '\n'] := sorry
  
  theorem pattern_first_line {n x y : Int} (hn : 1 ≤ n ∧ n ≤ 9) (hx : 1 ≤ x ∧ x ≤ 5) (hy : 1 ≤ y ∧ y ≤ 5) :
    let lines := String.split (pattern n x y) (· = '\n')
    String.trim (lines.head!) = "1" := sorry
  
  theorem pattern_indentation_increases {n x y : Int} (hn : 1 ≤ n ∧ n ≤ 9) (hx : 1 ≤ x ∧ x ≤ 5) (hy : 1 ≤ y ∧ y ≤ 5) :
    let lines := String.split (pattern n x y) (· = '\n')
    let middle := min (n-1) (lines.length - 1)
    ∀ i : Nat, i < middle →
      (lines.get! i).length - (String.trimLeft (lines.get! i)).length + 1 = 
      (lines.get! (i+1)).length - (String.trimLeft (lines.get! (i+1))).length := sorry
  
  theorem pattern_line_numbers {n : Int} (hn : 1 ≤ n ∧ n ≤ 9) :
    let lines := String.split (pattern n) (· = '\n')
    ∀ i : Nat, i < min n lines.length →
      let num_char := Char.ofNat ((i + 1) % 10 + '0'.toNat)
      (lines.get! i).contains num_char := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

