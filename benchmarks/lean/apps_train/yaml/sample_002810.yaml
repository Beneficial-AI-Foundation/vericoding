vc-description: |-
  /-
  A forest fire has been spotted at *fire*, a simple 2 element array with x, y coordinates.
  
  The forest service has decided to send smoke jumpers in by plane and drop them in the forest.
  
  The terrain is dangerous and surveyors have determined that there are three possible safe *dropzones*, an array of three simple arrays with x, y coordinates. 
  
  The plane is en route and time is of the essence. Your mission is to return a simple [x,y] array with the coordinates of the dropzone closest to the fire. 
  
  EDIT: 
  The airplane is leaving from the origin at 0,0. If your result returns two possible dropzones that are both an equal distance from the fire, choose the dropzone that is closest to 0,0.
  
  If the two dropzones are both equal distance away from 0,0, then return the dropzone that is first in the given array. 
  
  For example, if you are given: fire = [1,1], possibleDZ = [0,1],[1,0],[2,2] . The answer is [0,1] because that is the first possible drop zone in the given array.
  -/

vc-preamble: |-
  def dropzone (fire : List Int) (dropzones : List (List Int)) : List Int := sorry
  
  def hypot (x y : Int) : Float := sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def isClosestToFire (point fire : List Int) (points : List (List Int)) : Bool := sorry
  
  def isClosestToOrigin (point fire : List Int) (points : List (List Int)) : Bool := sorry

vc-theorems: |-
  theorem dropzone_is_valid_point (fire : List Int) (dropzones : List (List Int)) :
    fire.length = 2 → dropzones.length > 0 → dropzone fire dropzones ∈ dropzones := sorry
  
  theorem dropzone_is_closest_to_fire (fire : List Int) (dropzones : List (List Int)) :
    fire.length = 2 → dropzones.length > 0 → 
    isClosestToFire (dropzone fire dropzones) fire dropzones = true := sorry
  
  theorem dropzone_is_closest_to_origin (fire : List Int) (dropzones : List (List Int)) :
    fire.length = 2 → dropzones.length > 0 →
    isClosestToOrigin (dropzone fire dropzones) fire dropzones = true := sorry
  
  theorem single_dropzone (fire dropzone_single : List Int) :
    fire.length = 2 → dropzone_single.length = 2 →
    dropzone fire [dropzone_single] = dropzone_single := sorry
  
  /-
  info: [7, 9]
  -/
  -- #guard_msgs in
  -- #eval dropzone [6, 8] [[3, 2], [6, 1], [7, 9]]
  
  /-
  info: [5, 5]
  -/
  -- #guard_msgs in
  -- #eval dropzone [9, 2] [[1, 4], [9, 9], [5, 5]]
  
  /-
  info: [0, 1]
  -/
  -- #guard_msgs in
  -- #eval dropzone [1, 1] [[0, 1], [1, 0], [2, 2]]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

