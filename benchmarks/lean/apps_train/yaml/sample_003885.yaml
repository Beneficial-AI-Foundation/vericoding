vc-description: |-
  Write a function called that takes a string of parentheses, and determines if the order of the parentheses is valid. The function should return `true` if the string is valid, and `false` if it's invalid.
  
  ## Examples
  
  ```
  "()"              =>  true
  ")(()))"          =>  false
  "("               =>  false
  "(())((()())())"  =>  true
  ```
  
  ## Constraints
  
  `0 <= input.length <= 100`
  
  ~~~if-not:javascript,go
  Along with opening (`(`) and closing (`)`) parenthesis, input may contain any valid ASCII characters.  Furthermore, the input string may be empty and/or not contain any parentheses at all.  Do **not** treat other forms of brackets as parentheses (e.g. `[]`, `{}`, `<>`).
  ~~~

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def valid_parentheses (s : String) : Bool := sorry 
  
  theorem valid_balanced_strings 
    (s : String)
    (h : ∃ n : Nat, ∃ positions : List Nat, 
      -- Properties of balanced parentheses:
      -- 1. Equal number of '(' and ')'
      -- 2. Each ')' has matching '(' before it
      -- 3. Characters between parentheses can be arbitrary
      True) :
    valid_parentheses s = true := sorry

vc-theorems: |-
  theorem string_without_parens
    (s : String)
    (h : ∀ c, c ∈ s.data → c ≠ '(' ∧ c ≠ ')') :
    valid_parentheses s = true := sorry
  
  theorem only_closing_parens
    (s : String)
    (h₁ : s.length > 0)
    (h₂ : ∀ c, c ∈ s.data → c = ')') :
    valid_parentheses s = false := sorry
  
  theorem only_opening_parens
    (s : String)
    (h₁ : s.length > 0)
    (h₂ : ∀ c, c ∈ s.data → c = '(') :
    valid_parentheses s = false := sorry
  
  theorem empty_string_valid :
    valid_parentheses "" = true := sorry
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval valid_parentheses "hi(hi)"
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval valid_parentheses "((())()())"
  
  /--
  info: False
  -/
  #guard_msgs in
  #eval valid_parentheses "hi(hi))("

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

