vc-description: |-
  We are given S, a length n string of characters from the set {'D', 'I'}. (These letters stand for "decreasing" and "increasing".)
  A valid permutation is a permutation P[0], P[1], ..., P[n] of integers {0, 1, ..., n}, such that for all i:
  
  If S[i] == 'D', then P[i] > P[i+1], and;
  If S[i] == 'I', then P[i] < P[i+1].
  
  How many valid permutations are there?  Since the answer may be large, return your answer modulo 10^9 + 7.
  
  Example 1:
  Input: "DID"
  Output: 5
  Explanation: 
  The 5 valid permutations of (0, 1, 2, 3) are:
  (1, 0, 3, 2)
  (2, 0, 3, 1)
  (2, 1, 3, 0)
  (3, 0, 2, 1)
  (3, 1, 2, 0)
  
  Note:
  
  1 <= S.length <= 200
  S consists only of characters from the set {'D', 'I'}.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def num_perms_di_sequence (s : String) : Nat := sorry
  
  def MOD := 1000000007

vc-theorems: |-
  theorem num_perms_di_sequence_nonneg (s : String) :
    num_perms_di_sequence s ≥ 0 := sorry 
  
  theorem num_perms_di_sequence_within_mod (s : String) :
    num_perms_di_sequence s < MOD := sorry
  
  theorem all_decreasing_sequence_one_perm (s : String) :
    (∀ c ∈ s.data, c = 'D') → 
    num_perms_di_sequence s = 1 := sorry
  
  theorem all_increasing_sequence_one_perm (s : String) :
    (∀ c ∈ s.data, c = 'I') → 
    num_perms_di_sequence s = 1 := sorry
  
  /--
  info: 5
  -/
  #guard_msgs in
  #eval num_perms_di_sequence "DID"
  
  /--
  info: 1
  -/
  #guard_msgs in
  #eval num_perms_di_sequence "D"
  
  /--
  info: 1
  -/
  #guard_msgs in
  #eval num_perms_di_sequence "III"

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

