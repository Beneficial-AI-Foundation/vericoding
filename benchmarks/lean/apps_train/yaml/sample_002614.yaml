vc-description: |-
  /-
  We are given a sequence of coplanar points and see all the possible triangles that may be generated which all combinations of three points.
  
  We have the following list of points with the cartesian coordinates of each one:
  ```
  Points [x, y]
     A   [1, 2]
     B   [3, 3]
     C   [4, 1]
     D   [1, 1]
     E   [4, -1]
  ```
  With these points we may have the following triangles: ```ABC, ABD, ABE, ACD, ACE, ADE, BCD, BCE, BDE, CDE.``` There are three special ones: ```ABC, ACD and CDE```, that have an angle of 90°. All is shown in the picture below:
  
  We need to count all the rectangle triangles that may be formed by a given list of points.
  
  The case decribed above will be:
  ```python
  count_rect_triang([[1, 2],[3, 3],[4, 1],[1, 1],[4, -1]]) == 3
  ```
  
  Observe this case:
  ```python
  count_rect_triang([[1, 2],[4, -1],[3, 3],[4, -1],[4, 1],[1, 1],[4, -1], [4, -1], [3, 3], [1, 2]]) == 3
  ```
  If no rectangle triangles may be generated the function will output ```0```.
  
  Enjoy it!
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def count_rect_triang (points : List (Int × Int)) : Nat := sorry
  
  theorem result_properties {points : List (Int × Int)}
      (h : points.length ≥ 3) :
      let n := points.length
      0 ≤ count_rect_triang points ∧ 
      count_rect_triang points ≤ n * (n - 1) * (n - 2) / 6 := by sorry

vc-theorems: |-
  theorem known_right_triangle :
      count_rect_triang [(0,0), (0,3), (4,0)] = 1 := by sorry
  
  theorem duplicate_handling {points : List (Int × Int)} :
      count_rect_triang points = count_rect_triang (List.eraseDups points) := by sorry
  
  theorem order_invariance {points : List (Int × Int)}
      (h : points.length ≥ 3) :
      count_rect_triang points = count_rect_triang points.reverse := by sorry
  
  /-
  info: 3
  -/
  -- #guard_msgs in
  -- #eval count_rect_triang [[1, 2], [3, 3], [4, 1], [1, 1], [4, -1]]
  
  /-
  info: 3
  -/
  -- #guard_msgs in
  -- #eval count_rect_triang [[1, 2], [4, -1], [3, 3], [4, -1], [4, 1], [1, 1], [4, -1], [4, -1], [3, 3], [1, 2]]
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval count_rect_triang [[0, 0], [1, 1], [2, 2]]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

