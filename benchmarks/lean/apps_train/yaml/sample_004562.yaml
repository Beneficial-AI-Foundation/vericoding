vc-description: |-
  # Introduction
  
  Mastermind or Master Mind is a code-breaking game for two players. The modern game with pegs was invented in 1970 by Mordecai Meirowitz, an Israeli postmaster and telecommunications expert. It resembles an earlier pencil and paper game called Bulls and Cows that may date back a century or more. (Source Wikipedia)
  
  # Rules
  
  1. The Mastermind (computer) will select 4 colours. The colours are randomly selected from ["Red", "Blue", "Green", "Orange", "Purple", "Yellow"]. Colours can be duplicated but there will always be exactly 4.
  
  2. The Mastermind will return an array back to you. For every correctly positioned colour in the array an element of “Black” is returned. For every correct colour but in the wrong position an element of “White” will be returned.
  
  3. Passing the correct array will pass the Kata test and return "WON!".
  
  4. Passing an invalid colour will fail the test with the error "Error: you have given an invalid colour!"
  
  5. Passing an invalid array length will fail the test with the error "Error: you must pass 4 colours!"
  
  6. Guessing more than 60 times will fail the test with the error "Error: you have had more than 60 tries!"
  
  7. All colours are capitalised
  
  8. The return array will be shuffled!
  
  # Task
  
  Your task is to create a method called mastermind() that will take an object called  game. The object has already been preloaded so you do not need to worry about it.
  
  Within your method you must pass an array into the game object method .check(). This will evoke the object to check your array to see if it is correct.
  
  # Example
  
  If the Mastermind selected the following colours
  
  Then the array you are trying to solve is `["Red", "Blue", "Green", "Yellow"]`
  So you guess with 
  
  `["Red", "Orange", "Yellow", "Orange"]`
  
  Your method would look like this.
  ```python
  def mastermind(game):
    answer = game.check(["Red", "Orange", "Yellow", "Orange"])
  ```
  The element `0 => Red` is at the correct index so `Black` is added to the return array. Element `2 => Yellow` is in the array but at the wrong index possition so `White` is added to the return array.
  
  The Mastermind would then return `["Black", "White"]` (But not necessarily in that order as the return array is shuffled my the Mastermind).
  
  Keep guessing until you pass the correct solution which will pass the Kata.
  
  # Check result
  To check the Masterminds return value
  ```python
    answer = game.check(["Red", "Orange", "Yellow", "Orange"])
    print (answer)
  ```
  
  Good luck and enjoy!
  
  # Kata Series
  If you enjoyed this, then please try one of my other Katas. Any feedback, translations and grading of beta Katas are greatly appreciated. Thank you.
  
   Maze Runner
   Scooby Doo Puzzle
   Driving License
   Connect 4
   Vending Machine
   Snakes and Ladders
   Mastermind
   Guess Who?
   Am I safe to drive?
   Mexican Wave
   Pigs in a Pen
   Hungry Hippos
   Plenty of Fish in the Pond
   Fruit Machine
   Car Park Escape

vc-preamble: |-
  def VALID_COLORS := ["Red", "Blue", "Green", "Orange", "Purple", "Yellow"]
  
  structure Game where
    solution : List String := []
    tries : Nat := 0
    deriving Repr
  
  def Game.check (g : Game) (guess : List String) : List String := sorry
  
  def matches_result (code guess result : List String) : Bool := sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def mastermind (g : Game) : Unit := sorry
  
  theorem mastermind_always_solves {solution : List String} 
    (h1 : solution.length = 4)
    (h2 : ∀ x ∈ solution, x ∈ VALID_COLORS) :
    ∀ g : Game, g.solution = solution → g.tries ≤ 60 := sorry

vc-theorems: |-
  theorem matches_result_symmetric {code guess : List String} 
    (h1 : code.length = 4) 
    (h2 : guess.length = 4)
    (h3 : ∀ x ∈ code, x ∈ VALID_COLORS)
    (h4 : ∀ x ∈ guess, x ∈ VALID_COLORS) :
    matches_result code guess (List.replicate 4 "Black") = 
    matches_result guess code (List.replicate 4 "Black") := sorry
  
  theorem matches_result_self {guess : List String}
    (h1 : guess.length = 4)
    (h2 : ∀ x ∈ guess, x ∈ VALID_COLORS) :
    matches_result guess guess (List.replicate 4 "Black") = true := sorry
  
  theorem game_check_invalid_inputs (g : Game) :
    (∀ guess : List String, guess.length ≠ 4 → g.check guess = []) ∧
    (∀ guess : List String, (∃ x ∈ guess, x ∉ VALID_COLORS) → g.check guess = []) ∧
    (g.tries ≥ 60 → ∀ guess : List String, g.check guess = []) := sorry
  
  theorem check_result_length {solution guess : List String} 
    (h1 : solution.length = 4)
    (h2 : guess.length = 4)
    (h3 : ∀ x ∈ solution, x ∈ VALID_COLORS)
    (h4 : ∀ x ∈ guess, x ∈ VALID_COLORS)
    (g : Game)
    (h5 : g.solution = solution) :
    let result := g.check guess
    (result.length ≤ 4 ∧ ∀ x ∈ result, x = "Black" ∨ x = "White") := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

