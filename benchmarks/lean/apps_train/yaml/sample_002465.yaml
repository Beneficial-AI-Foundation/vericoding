vc-description: |-
  /-
  =====Function Descriptions=====
  *This section assumes that you understand the basics discussed in HTML Parser - Part 1
  
  .handle_comment(data)
  This method is called when a comment is encountered (e.g. <!--comment-->).
  The data argument is the content inside the comment tag:
  
  from HTMLParser import HTMLParser
  
  class MyHTMLParser(HTMLParser):
      def handle_comment(self, data):
            print "Comment  :", data
  
  .handle_data(data)
  This method is called to process arbitrary data (e.g. text nodes and the content of <script>...</script> and <style>...</style>).
  The data argument is the text content of HTML.
  
  from HTMLParser import HTMLParser
  
  class MyHTMLParser(HTMLParser):
      def handle_data(self, data):
          print "Data     :", data
  
  =====Problem Statement=====
  You are given an HTML code snippet of N lines.
  Your task is to print the single-line comments, multi-line comments and the data.
  
  Print the result in the following format:
  
  >>> Single-line Comment  
  Comment
  >>> Data                 
  My Data
  >>> Multi-line Comment  
  Comment_multiline[0]
  Comment_multiline[1]
  >>> Data
  My Data
  >>> Single-line Comment:  
  
  Note: Do not print data if data == '\n'. 
  
  =====Input Format=====
  The first line contains integer N, the number of lines in the HTML code snippet.
  The next N lines contains HTML code.
  
  =====Constraints=====
  0<N<100
  
  =====Output Format=====
  Print the single-line comments, multi-line comments and the data in order of their occurrence from top to bottom in the snippet.
  
  Format the answers as explained in the problem statement.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def String.isInfixOf (sub : String) (str : String) : Bool := 
    sorry
  
  variable (parse_html_code : String → String)
  
  /- Single line comments are correctly identified and preserved --/

vc-theorems: |-
  theorem single_line_comment_handling 
    (text : String)
    (h₁ : ¬ String.contains text '\n') :
    let comment := s!"<!--{text}-->"
    String.isInfixOf ">>> Single-line Comment" (parse_html_code comment) ∧ 
    (text.length > 0 → String.isInfixOf text (parse_html_code comment)) := sorry
  
  /- Multi line comments are correctly identified and preserved --/
  
  theorem multi_line_comment_handling 
    (text : String)
    (h₁ : String.contains text '\n') :
    let comment := s!"<!--{text}-->"
    String.isInfixOf ">>> Multi-line Comment" (parse_html_code comment) ∧
    (text.length > 0 → String.isInfixOf text (parse_html_code comment)) := sorry
  
  /- Whitespace-only input results in empty output --/
  
  theorem whitespace_handling 
    (s : String)
    (h₁ : ∀ c ∈ s.data, c = ' ' ∨ c = '\n' ∨ c = '\t') :
    parse_html_code s = "" := sorry
  
  /- Empty input results in empty output --/
  
  theorem empty_input_handling :
    parse_html_code "" = "" := sorry
  
  /- Regular text is marked as data and preserved --/
  
  theorem basic_data_handling :
    let input := "Hello World"
    String.isInfixOf ">>> Data" (parse_html_code input) ∧
    String.isInfixOf "Hello World" (parse_html_code input) := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

