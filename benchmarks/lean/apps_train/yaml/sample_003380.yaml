vc-description: |-
  write me a function `stringy` that takes a `size` and returns a `string` of alternating `'1s'` and `'0s'`.
  
  the string should start with a `1`.
  
  a string with `size` 6 should return :`'101010'`.
  
  with `size` 4 should return : `'1010'`.
  
  with `size` 12 should return : `'101010101010'`.
  
  The size will always be positive and will only use whole numbers.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def stringy (n : Int) : String := sorry 
  
  theorem stringy_length {n : Int} (h : n > 0) (h2 : n ≤ 500) : 
    (stringy n).length = n := sorry

vc-theorems: |-
  theorem stringy_alternating {n : Int} (h : n > 0) (h2 : n ≤ 500) (i : Nat) (h3 : i < n - 1) :
    have h4 : i < (stringy n).length := sorry
    have h5 : i + 1 < (stringy n).length := sorry
    (stringy n).data[i]'h4 ≠ (stringy n).data[i+1]'h5 := sorry
  
  theorem stringy_starts_with_one {n : Int} (h : n > 0) (h2 : n ≤ 500) :
    have h3 : 0 < (stringy n).length := sorry
    (stringy n).data[0]'h3 = '1' := sorry
  
  theorem stringy_only_ones_and_zeros {n : Int} (h : n > 0) (h2 : n ≤ 500) (i : Nat) (h3 : i < n) :
    have h4 : i < (stringy n).length := sorry
    (stringy n).data[i]'h4 = '0' ∨ (stringy n).data[i]'h4 = '1' := sorry
  
  theorem stringy_empty : stringy 0 = "" := sorry
  
  theorem stringy_negative {n : Int} (h : n < 0) : stringy n = "" := sorry
  
  /--
  info: '101'
  -/
  #guard_msgs in
  #eval stringy 3
  
  /--
  info: '10101'
  -/
  #guard_msgs in
  #eval stringy 5
  
  /--
  info: '101010101010'
  -/
  #guard_msgs in
  #eval stringy 12

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

