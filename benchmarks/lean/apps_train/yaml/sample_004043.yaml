vc-description: |-
  # Task
  
  Write a function that accepts `msg` string and returns local tops of string from the highest to the lowest.  
  The string's tops are from displaying the string in the below way:
  
  ```      
                                                        3 
                                p                     2   4
              g               o   q                 1
    b       f   h           n       r             z 
  a   c   e       i       m          s          y
        d           j   l             t       x
                      k                 u   w 
                                          v
  
  ```
  The next top is always 1 character higher than the previous one. 
  For the above example, the solution for the `abcdefghijklmnopqrstuvwxyz1234` input string is `3pgb`.
  
  - When the `msg` string is empty, return an empty string.
  - The input strings may be very long. Make sure your solution has good performance.
  
  Check the test cases for more samples.
  
  # **Note** for C++
  
  Do not post an issue in my solution without checking if your returned string doesn't have some invisible characters. You read most probably outside of `msg` string.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def tops (s : String) : String := sorry
  
  -- Empty string returns empty string

vc-theorems: |-
  theorem tops_empty_string :
    tops "" = "" := by sorry
  
  -- Single char string returns empty string
  
  theorem tops_single_char (c : Char) :
    tops (String.mk [c]) = "" := by sorry
  
  -- Output chars are subset of input chars
  
  theorem tops_chars_in_input {s : String} {c : Char} :
    c ∈ (tops s).data → c ∈ s.data := by sorry
  
  -- Simple version of output length follows pattern
  
  theorem tops_output_length {s : String} (h : s.length > 0) :
    ∃ n, (tops s).length = n ∧ n ≥ 0 := by sorry
  
  -- Simple version of output order
  
  theorem tops_output_order {s : String} (h : s.length ≥ 10) :
    ∃ chars : List Char, 
      tops s = String.mk chars ∧
      ∀ c ∈ chars, c ∈ s.data := by sorry
  
  -- Output is deterministic
  
  theorem tops_deterministic {s : String} :
    tops s = tops s := by sorry
  
  /--
  info: ''
  -/
  #guard_msgs in
  #eval tops ""
  
  /--
  info: '2'
  -/
  #guard_msgs in
  #eval tops "12"
  
  /--
  info: '3pgb'
  -/
  #guard_msgs in
  #eval tops "abcdefghijklmnopqrstuvwxyz12345"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

