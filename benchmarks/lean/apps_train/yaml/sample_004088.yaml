vc-description: |-
  In this kata, you will write a function that returns the positions and the values of the "peaks" (or local maxima) of a numeric array.
  
  For example, the array `arr = [0, 1, 2, 5, 1, 0]` has a peak at position `3` with a value of `5` (since `arr[3]` equals `5`).
  
  ~~~if-not:php,cpp,java,csharp
  The output will be returned as an object with two properties: pos and peaks. Both of these properties should be arrays. If there is no peak in the given array, then the output should be `{pos: [], peaks: []}`.
  ~~~
  ~~~if:php
  The output will be returned as an associative array with two key-value pairs: `'pos'` and `'peaks'`.  Both of them should be (non-associative) arrays.  If there is no peak in the given array, simply return `['pos' => [], 'peaks' => []]`.
  ~~~
  ~~~if:cpp
  The output will be returned as an object of type `PeakData` which has two members: `pos` and `peaks`.  Both of these members should be `vector`s.  If there is no peak in the given array then the output should be a `PeakData` with an empty vector for both the `pos` and `peaks` members.
  
  `PeakData` is defined in Preloaded as follows:
  
  ~~~
  ~~~if:java
  The output will be returned as a ``Map>` with two key-value pairs: `"pos"` and `"peaks"`. If there is no peak in the given array, simply return `{"pos" => [], "peaks" => []}`.
  ~~~
  ~~~if:csharp
  The output will be returned as a `Dictionary>` with two key-value pairs: `"pos"` and `"peaks"`. 
  If there is no peak in the given array, simply return `{"pos" => new List(), "peaks" => new List()}`.
  ~~~
  
  Example: `pickPeaks([3, 2, 3, 6, 4, 1, 2, 3, 2, 1, 2, 3])` should return `{pos: [3, 7], peaks: [6, 3]}` (or equivalent in other languages)
  
  All input arrays will be valid integer arrays (although it could still be empty), so you won't need to validate the input.
  
  The first and last elements of the array will not be considered as peaks (in the context of a mathematical function, we don't know what is after and before and therefore, we don't know if it is a peak or not).
  
  Also, beware of plateaus !!! `[1, 2, 2, 2, 1]` has a peak while `[1, 2, 2, 2, 3]` does not. In case of a plateau-peak, please only return the position and value of the beginning of the plateau. For example: 
  `pickPeaks([1, 2, 2, 2, 1])` returns `{pos: [1], peaks: [2]}` (or equivalent in other languages)
  
  Have fun!

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def pickPeaks : List Int → PeakResult := sorry
  
  theorem pick_peaks_result_structure (arr : List Int) : 
    let result := pickPeaks arr
    List.length result.pos = List.length result.peaks := sorry

vc-theorems: |-
  theorem peaks_correspond_to_positions (arr : List Int) :
    let result := pickPeaks arr
    ∀ (i : Nat), i < result.pos.length →
      arr[result.pos[i]!]! = result.peaks[i]! := sorry
  
  theorem positions_are_ordered (arr : List Int) :
    let result := pickPeaks arr
    ∀ i j, i < j → j < result.pos.length → 
      result.pos[i]! < result.pos[j]! := sorry
  
  theorem peaks_higher_than_neighbors (arr : List Int) :
    let result := pickPeaks arr
    ∀ (pos : Nat), pos ∈ result.pos →
      pos > 0 ∧ pos < arr.length - 1 ∧
      arr[pos]! > arr[pos-1]! ∧
      (∃ i, i > pos ∧ i < arr.length ∧
        (∀ j, pos ≤ j ∧ j < i → arr[j]! = arr[pos]!) ∧
        arr[i]! < arr[pos]!) := sorry
  
  theorem plateau_peak_leftmost (arr : List Int) :
    let result := pickPeaks arr
    ∀ (pos : Nat), pos ∈ result.pos →
      ∃ i, i > pos ∧ i < arr.length ∧
      (∀ j, pos ≤ j ∧ j < i → arr[j]! = arr[pos]!) ∧
      arr[i]! < arr[pos]! := sorry
  
  /--
  info: expected1
  -/
  #guard_msgs in
  #eval pick_peaks [1, 2, 3, 6, 4, 1, 2, 3, 2, 1]
  
  /--
  info: expected2
  -/
  #guard_msgs in
  #eval pick_peaks [2, 1, 3, 1, 2, 2, 2, 2, 1]
  
  /--
  info: expected3
  -/
  #guard_msgs in
  #eval pick_peaks []

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

