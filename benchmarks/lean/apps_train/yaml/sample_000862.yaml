vc-description: |-
  Arya and Aryan live in a country called Nadaca. Nadaca consists of $N$ cities numbered $1$ through $N$, which are connected by some bidirectional roads. Each road has a positive (not necessarily integer) length. Arya lives in city $1$ and Aryan lives in city $N$.
  Arya claims that for each city $v$, the shortest path from city $1$ to city $v$ has length $a_v$. Aryan does not disagree, but claims that for each city $v$, the shortest path from city $N$ to city $v$ has length $b_v$. You are the wisest person they know, so they asked you to tell them if it is possible for their claims to be true, i.e. if a road network which fully satisfies their claims exists. Help them!
  
  -----Input-----
  - The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.
  - The first line of each test case contains a single integer $N$.
  - The second line contains $N$ space-separated integers $a_1, a_2, \ldots, a_N$.
  - The third line contains $N$ space-separated integers $b_1, b_2, \ldots, b_N$.
  
  -----Output-----
  For each test case, print a single line containing the string "Yes" if Arya's and Aryan's claims can be true or "No" otherwise.
  
  -----Constraints-----
  - $1 \le T \le 10^3$
  - $2 \le N \le 10^6$
  - $0 \le a_i, b_i \le 10^9$ for each valid $i$
  - the sum of $N$ over all test cases does not exceed $10^6$
  
  -----Subtasks-----
  Subtask #1 (50 points): the sum of $N$ over all test cases does not exceed $10^3$
  Subtask #2 (50 points): original constraints
  
  -----Example Input-----
  2
  3
  0 1 1
  1 1 0
  3
  0 1 5
  5 1 0
  
  -----Example Output-----
  Yes
  No

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def is_valid_path (n : Nat) (a b : List Nat) : Bool := sorry
  
  def solve_test_case (n : Nat) (a b : List Nat) : String := sorry

vc-theorems: |-
  theorem valid_path_structure {n : Nat} {middle_vals : List Nat} {connecting_val : Nat}
    (h1 : n ≥ 3) (h2 : n ≤ 10)
    (h3 : ∀ x ∈ middle_vals, x ≥ 1 ∧ x ≤ 20)
    (h4 : connecting_val ≥ 1) (h5 : connecting_val ≤ 20)
    (a b : List Nat)
    (hpath : is_valid_path n a b) :
    a.head? = some 0 ∧ 
    b.getLast? = some 0 ∧
    a.getLast? = b.head? ∧
    (∀ x ∈ a.tail.dropLast, x > 0) ∧
    (∀ x ∈ b.tail.dropLast, x > 0) := sorry
  
  theorem invalid_endpoints {n : Nat} (h1 : n ≥ 3) (h2 : n ≤ 10)
    (a b : List Nat)
    (h3 : a = List.replicate n 1)
    (h4 : b = List.replicate n 1) :
    ¬ is_valid_path n a b := sorry
  
  theorem invalid_middle_zero {n : Nat} (h1 : n ≥ 3) (h2 : n ≤ 10)
    (a b : List Nat)
    (h3 : a = 0 :: 0 :: List.replicate (n-3) 1 ++ [1])
    (h4 : b = 1 :: List.replicate (n-2) 1 ++ [0]) :
    ¬ is_valid_path n a b := sorry
  
  theorem solve_matches_valid {n : Nat} {val : Nat}
    (h1 : n ≥ 3) (h2 : n ≤ 10)
    (h3 : val ≥ 1) (h4 : val ≤ 20)
    (a b : List Nat)
    (h5 : a = 0 :: List.replicate (n-2) val ++ [val])
    (h6 : b = val :: List.replicate (n-2) val ++ [0]) :
    solve_test_case n a b = if is_valid_path n a b then "Yes" else "No" := sorry
  
  /--
  info: 'Yes'
  -/
  #guard_msgs in
  #eval solve_test_case 3 [0, 1, 1] [1, 1, 0]
  
  /--
  info: 'No'
  -/
  #guard_msgs in
  #eval solve_test_case 3 [0, 1, 5] [5, 1, 0]
  
  /--
  info: 'Yes'
  -/
  #guard_msgs in
  #eval solve_test_case 4 [0, 2, 2, 3] [3, 2, 2, 0]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

