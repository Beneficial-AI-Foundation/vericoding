vc-description: |-
  Given 3 positives numbers a, b and c. Return the minimum flips required in some bits of a and b to make ( a OR b == c ). (bitwise OR operation).
  Flip operation consists of change any single bit 1 to 0 or change the bit 0 to 1 in their binary representation.
  
  Example 1:
  
  Input: a = 2, b = 6, c = 5
  Output: 3
  Explanation: After flips a = 1 , b = 4 , c = 5 such that (a OR b == c)
  Example 2:
  Input: a = 4, b = 2, c = 7
  Output: 1
  
  Example 3:
  Input: a = 1, b = 2, c = 3
  Output: 0
  
  Constraints:
  
  1 <= a <= 10^9
  1 <= b <= 10^9
  1 <= c <= 10^9

vc-preamble: |-
  def min_flips (a b c : Nat) : Nat := sorry
  
  def count_ones (n : Nat) : Nat := sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def bitwise_or (a b : Nat) : Nat := sorry
  
  theorem min_flips_non_negative (a b c : Nat) :
    min_flips a b c ≥ 0 := sorry

vc-theorems: |-
  theorem min_flips_identity_left (c : Nat) :
    min_flips c 0 c = 0 := sorry
  
  theorem min_flips_identity_right (c : Nat) :
    min_flips 0 c c = 0 := sorry
  
  /--
  info: 3
  -/
  #guard_msgs in
  #eval min_flips 2 6 5
  
  /--
  info: 1
  -/
  #guard_msgs in
  #eval min_flips 4 2 7
  
  /--
  info: 0
  -/
  #guard_msgs in
  #eval min_flips 1 2 3

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible

