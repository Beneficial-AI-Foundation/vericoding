vc-description: |-
  Return the number of distinct non-empty substrings of text that can be written as the concatenation of some string with itself (i.e. it can be written as a + a where a is some string).
  
  Example 1:
  Input: text = "abcabcabc"
  Output: 3
  Explanation: The 3 substrings are "abcabc", "bcabca" and "cabcab".
  
  Example 2:
  Input: text = "leetcodeleetcode"
  Output: 2
  Explanation: The 2 substrings are "ee" and "leetcodeleetcode".
  
  Constraints:
  
  1 <= text.length <= 2000
  text has only lowercase English letters.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def distinctEchoSubstrings (text: String) : Nat :=
    sorry

vc-theorems: |-
  theorem output_type_and_range (text: String)
    (h: text.length > 0) :
    distinctEchoSubstrings text ≥ 0 ∧ 
    distinctEchoSubstrings text ≤ text.length / 2 :=
    sorry
  
  theorem repeating_char (text: String) 
    (h1: text.length > 0)
    (h2: ∀ (i j : String.Pos), text.get i = text.get j) :
    distinctEchoSubstrings text = text.length / 2 :=
    sorry
  
  theorem doubled_string (text: String)
    (h: text.length > 0) :
    distinctEchoSubstrings (text ++ text) ≥ 1 :=
    sorry
  
  /--
  info: 3
  -/
  #guard_msgs in
  #eval distinct_echo_substrings "abcabcabc"
  
  /--
  info: 2
  -/
  #guard_msgs in
  #eval distinct_echo_substrings "leetcodeleetcode"
  
  /--
  info: 1
  -/
  #guard_msgs in
  #eval distinct_echo_substrings "aaa"

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

