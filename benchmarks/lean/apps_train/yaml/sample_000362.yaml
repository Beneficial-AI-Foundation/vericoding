vc-description: |-
  /-
  We have a list of bus routes. Each routes[i] is a bus route that the i-th bus repeats forever. For example if routes[0] = [1, 5, 7], this means that the first bus (0-th indexed) travels in the sequence 1->5->7->1->5->7->1->... forever.
  We start at bus stop S (initially not on a bus), and we want to go to bus stop T. Travelling by buses only, what is the least number of buses we must take to reach our destination? Return -1 if it is not possible.
  Example:
  Input: 
  routes = [[1, 2, 7], [3, 6, 7]]
  S = 1
  T = 6
  Output: 2
  Explanation: 
  The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.
  
  Constraints:
  
  1 <= routes.length <= 500.
  1 <= routes[i].length <= 10^5.
  0 <= routes[i][j] < 10 ^ 6.
  -/

vc-preamble: |-
  def numBusesToDestination (routes: List (List Nat)) (source: Nat) (target: Nat) : Int :=
    sorry
  
  def findMaxInList (l: List Nat) : Nat :=
    sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def findMaxInRoutes (routes: List (List Nat)) : Nat :=
    sorry

vc-theorems: |-
  theorem impossible_path_property
    (routes: List (List Nat))
    (h: routes ≠ [])
    (h2: ∀ r ∈ routes, r ≠ []) : 
    let maxStop := findMaxInRoutes routes
    numBusesToDestination routes 0 (maxStop + 1) = -1 :=
  sorry
  
  theorem result_range_property
    (routes: List (List Nat))
    (h: routes ≠ [])
    (h2: ∀ r ∈ routes, r ≠ [])
    (start: Nat)
    (route: List Nat)
    (routeEnd: Nat)
    (h3: route ∈ routes)
    (h4: routeEnd ∈ route) :
    numBusesToDestination routes start routeEnd ≥ -1 := 
  sorry
  
  theorem empty_routes_property
    (routes: List (List Nat))
    (h: routes = [] ∨ routes = [[]]) :
    numBusesToDestination routes 1 2 = -1 := 
  sorry
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval numBusesToDestination [[1, 2, 7], [3, 6, 7]] 1 6
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval numBusesToDestination [[1, 2, 3], [3, 4, 5]] 1 5
  
  /-
  info: 3
  -/
  -- #guard_msgs in
  -- #eval numBusesToDestination [[1, 2], [2, 3], [3, 4]] 1 4

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

