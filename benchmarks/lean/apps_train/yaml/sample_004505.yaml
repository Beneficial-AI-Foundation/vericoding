vc-description: |-
  A [binary search tree](https://en.wikipedia.org/wiki/Binary_search_tree) is a binary tree that is ordered. This means that if you were to convert the tree to an array using an in-order traversal, the array would be in sorted order. The benefit gained by this ordering is that when the tree is balanced, searching is a logarithmic time operation, since each node you look at that isn't the one you're searching for lets you discard half of the tree.
  
  If you haven't worked with binary trees before or don't understand what a traversal is, you can learn more about that here: https://www.codewars.com/kata/binary-tree-traversal.
  
  In this kata, you will write a function that will validate that a given binary tree is a binary search tree. The sort order is not predefined so it should work with either.
  
  These are valid binary search trees:
  
          5
         / \
        2   7
       / \   \
      1   3   9
  
        7
       / \
      9   2
  
  while these are not:
  
        1
       / \
      2   3
  
        5
       / \
      2   9
       \
        7
  
  There are several different approaches you can take to solve this kata. If you're not as comfortable with recursion I'd recommend practicing that.
  
  Note: no test case tree will contain duplicate numbers.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def make_bst {α : Type} [Ord α] (values : List α) : Tree α := sorry
  
  def is_bst {α : Type} [Ord α] (t : Tree α) : Bool := sorry

vc-theorems: |-
  theorem sorted_values_make_valid_bst {α : Type} [Ord α] (values : List α) :
    is_bst (make_bst values) = true := sorry
  
  theorem empty_tree_is_bst {α : Type} [Ord α] :
    is_bst (Tree.leaf : Tree α) = true := sorry 
  
  theorem single_node_is_bst {α : Type} [Ord α] (x : α) :
    is_bst (Tree.node x Tree.leaf Tree.leaf) = true := sorry
  
  theorem valid_bst_example :
    let t := Tree.node 2 (Tree.node 1 Tree.leaf Tree.leaf) (Tree.node 3 Tree.leaf Tree.leaf)
    is_bst t = true := sorry
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval is_bst T(5, T(2, T(1), T(3)), T(7, None, T(9)))
  
  /--
  info: False
  -/
  #guard_msgs in
  #eval is_bst T(1, T(2), T(3))
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval is_bst T(7, T(9), T(2))

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

