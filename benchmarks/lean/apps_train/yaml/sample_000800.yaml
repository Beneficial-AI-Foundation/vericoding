vc-description: |-
  The Little Elephant from the Zoo of Lviv is going to the Birthday Party of  the Big Hippo tomorrow. Now he wants to prepare a gift for the Big Hippo.
  
  He has N balloons, numbered from 1 to N. The i-th balloon has the color Ci and it costs Pi dollars. The gift for the Big Hippo will be any subset (chosen randomly, possibly empty) of the balloons such that the number of different colors in that subset is at least M.
  
  Help Little Elephant to find the expected cost of the gift.
  
  -----Input-----
  The first line of the input contains a single integer T - the number of test cases. T test cases follow. The first line of each test case contains a pair of integers N and M. The next N lines contain N pairs of integers Ci and Pi, one pair per line.
  
  -----Output-----
  In T lines print T real numbers - the answers for the corresponding test cases. Your answer will considered correct if it has at most 10^-6 absolute or relative error.
  
  -----Constraints-----
  - 1 ≤ T ≤ 40
  - 1 ≤ N,  Ci≤ 40
  - 1 ≤ Pi ≤ 1000000
  - 0 ≤ M ≤ K, where K is the number of different colors in the test case.
  
  -----Example-----
  Input:
  2
  2 2
  1 4
  2 7
  2 1
  1 4
  2 7
  
  Output:
  11.000000000
  7.333333333

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def calc_gift_cost (n m : Nat) (color_prices : List (Nat × Nat)) : Nat := sorry
  
  theorem gift_cost_positive (n m : Nat) (color_prices : List (Nat × Nat)) :
    calc_gift_cost n m color_prices > 0 := sorry

vc-theorems: |-
  theorem gift_cost_bounded (n m : Nat) (color_prices : List (Nat × Nat)) 
    (h1 : color_prices ≠ []) :
    let prices := List.map Prod.snd color_prices
    calc_gift_cost n m color_prices ≥ (List.minimum? prices).getD 0 ∧ 
    calc_gift_cost n m color_prices ≤ ((List.maximum? prices).getD 0) * color_prices.length 
    := sorry
  
  theorem gift_cost_monotonic (n m : Nat) (color_prices : List (Nat × Nat))
    (h : m > 1) :
    calc_gift_cost n m color_prices ≥ 
    calc_gift_cost n (m-1) color_prices := sorry
  
  theorem gift_cost_single_color :
    calc_gift_cost 1 1 [(1, 10)] = 10 := sorry
  
  theorem gift_cost_duplicate_color :
    calc_gift_cost 2 1 [(1, 5), (1, 5)] = 7 := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

