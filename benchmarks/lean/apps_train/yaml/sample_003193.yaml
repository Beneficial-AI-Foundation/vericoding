vc-description: |-
  ~~~if:csharp,javascript,cfml,php
  Given a 2D array of size `m * n`. Your task is to find the sum of minimum value in each row.
  ~~~
  ~~~if:cpp
  Given a 2D vector of size `m * n`. Your task is to find the sum of minimum value in each row.
  ~~~
  ~~~if:python,ruby
  Given a 2D list of size `m * n`. Your task is to find the sum of minimum value in each row.
  ~~~
  
  For Example:
  ```python
  [
    [1, 2, 3, 4, 5],       # minimum value of row is 1
    [5, 6, 7, 8, 9],       # minimum value of row is 5
    [20, 21, 34, 56, 100]  # minimum value of row is 20
  ]
  ```
  So, the function should return `26` because sum of minimums is as `1 + 5 + 20 = 26`
  
  ~~~if:javascript,php
  Note: You will be always given non-empty array containing Positive values.
  ~~~
  ~~~if:python
  Note: You will be always given non-empty list containing Positive values.
  ~~~
  ~~~if:cpp
  Note: You will be always given non-empty vector containing Positive values.
  ~~~
  ~~~if:c#
  Note: You will be always given non-empty vector containing Positive values.
  ~~~
  ~~~if:cfml
  Note: You will be always given non-empty array containing Positive values.
  ~~~
  
  ENJOY CODING :)

vc-preamble: |-
  def List.minimums (l : List (List Int)) : Int := sorry 
  
  def List.sum (l : List Int) : Int := sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def List.minimum (l : List Int) : Int := sorry
  
  theorem minimums_eq_sum_of_mins (numbers : List (List Int))
    (h : ∀ l ∈ numbers, l.length > 0) :
    numbers.minimums = (numbers.map List.minimum).sum := sorry

vc-theorems: |-
  theorem single_element_minimums (numbers : List (List Int))
    (h1 : ∀ l ∈ numbers, l.length = 1) :
    numbers.minimums = numbers.join.sum := sorry
  
  /--
  info: 9
  -/
  #guard_msgs in
  #eval sum_of_minimums [[7, 9, 8, 6, 2], [6, 3, 5, 4, 3], [5, 8, 7, 4, 5]]
  
  /--
  info: 76
  -/
  #guard_msgs in
  #eval sum_of_minimums [[11, 12, 14, 54], [67, 89, 90, 56], [7, 9, 4, 3], [9, 8, 6, 7]]
  
  /--
  info: 12
  -/
  #guard_msgs in
  #eval sum_of_minimums [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

