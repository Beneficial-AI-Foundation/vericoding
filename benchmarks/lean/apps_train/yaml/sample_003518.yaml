vc-description: |-
  /-
  Write function heron which calculates the area of a triangle with sides a, b, and c.
  
  Heron's formula: sqrt (s \* (s - a) \* (s - b) \* (s - c)), where s = (a + b + c) / 2.
  Output should have 2 digits precision.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def heron (a b c : Float) : Float := sorry
  
  theorem heron_positive (a b c : Float)
    (h1 : a > 0) (h2 : b > 0) (h3 : c > 0)
    (h4 : a + b > c) (h5 : b + c > a) (h6 : a + c > b) :
    heron a b c > 0 := sorry

vc-theorems: |-
  theorem heron_matches_formula (a b c : Float)
    (h1 : a > 0) (h2 : b > 0) (h3 : c > 0)
    (h4 : a + b > c) (h5 : b + c > a) (h6 : a + c > b) :
    let s := (a + b + c) / 2
    heron a b c = Float.sqrt (s * (s - a) * (s - b) * (s - c)) := sorry
  
  theorem heron_symmetric (a b c : Float)
    (h1 : a > 0) (h2 : b > 0) (h3 : c > 0)  
    (h4 : a + b > c) (h5 : b + c > a) (h6 : a + c > b) :
    heron a b c = heron a c b âˆ§ 
    heron a b c = heron b a c := sorry
  
  theorem heron_equilateral (side : Float)
    (h : side > 0) :
    heron side side side = (side * side * Float.sqrt 3) / 4 := sorry
  
  /-
  info: 6.0
  -/
  -- #guard_msgs in
  -- #eval heron 3 4 5
  
  /-
  info: 24.0
  -/
  -- #guard_msgs in
  -- #eval heron 6 8 10
  
  /-
  info: 10.83
  -/
  -- #guard_msgs in
  -- #eval heron 5 5 5

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

