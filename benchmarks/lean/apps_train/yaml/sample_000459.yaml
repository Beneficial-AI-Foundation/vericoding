vc-description: |-
  You have n binary tree nodes numbered from 0 to n - 1 where node i has two children leftChild[i] and rightChild[i], return true if and only if all the given nodes form exactly one valid binary tree.
  If node i has no left child then leftChild[i] will equal -1, similarly for the right child.
  Note that the nodes have no values and that we only use the node numbers in this problem.
  
  Example 1:
  
  Input: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]
  Output: true
  
  Example 2:
  
  Input: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]
  Output: false
  
  Example 3:
  
  Input: n = 2, leftChild = [1,0], rightChild = [-1,-1]
  Output: false
  
  Example 4:
  
  Input: n = 6, leftChild = [1,-1,-1,4,-1,-1], rightChild = [2,-1,-1,5,-1,-1]
  Output: false
  
  Constraints:
  
  1 <= n <= 10^4
  leftChild.length == rightChild.length == n
  -1 <= leftChild[i], rightChild[i] <= n - 1

vc-preamble: |-
  def validate_binary_tree_nodes (n : Nat) (leftChild : List Int) (rightChild : List Int) : Bool :=
    sorry
  
  -- Predicate for valid list input

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def is_valid_list (n : Nat) (lst : List Int) : Bool :=
    sorry
  
  -- Property: Result must be of type Bool

vc-theorems: |-
  theorem validate_returns_bool (n : Nat) (leftChild rightChild : List Int) :
    ∃ (b : Bool), validate_binary_tree_nodes n leftChild rightChild = b :=
    sorry
  
  -- Property: If result is True, each node has exactly one parent except root
  
  theorem valid_tree_parent_counts {n : Nat} {leftChild rightChild : List Int} 
    (h : validate_binary_tree_nodes n leftChild rightChild = true) :
    ∃ (parent_count : List Nat),
      parent_count.length = n ∧ 
      (parent_count.filter (· = 1)).length = n - 1 ∧
      (parent_count.filter (· = 0)).length = 1 :=
    sorry
  
  -- Property: Empty trees are only valid for n = 1
  
  theorem empty_tree_validity {n : Nat} 
    (h_left : leftChild = List.replicate n (-1))
    (h_right : rightChild = List.replicate n (-1)) :
    validate_binary_tree_nodes n leftChild rightChild = (n = 1) :=
    sorry
  
  -- Property: Invalid node references result in false
  
  theorem invalid_references {n : Nat} {leftChild rightChild : List Int}
    (h : ¬(is_valid_list n leftChild ∧ is_valid_list n rightChild)) :
    validate_binary_tree_nodes n leftChild rightChild = false :=
    sorry
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval validate_binary_tree_nodes 4 [1, -1, 3, -1] [2, -1, -1, -1]
  
  /--
  info: False
  -/
  #guard_msgs in
  #eval validate_binary_tree_nodes 4 [1, -1, 3, -1] [2, 3, -1, -1]
  
  /--
  info: False
  -/
  #guard_msgs in
  #eval validate_binary_tree_nodes 2 [1, 0] [-1, -1]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

