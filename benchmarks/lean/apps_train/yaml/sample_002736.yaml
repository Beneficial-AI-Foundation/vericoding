vc-description: |-
  JavaScript provides a built-in parseInt method.
  
  It can be used like this:
  
  - `parseInt("10")` returns `10`
  - `parseInt("10 apples")` also returns `10`
  
  We would like it to return `"NaN"` (as a string) for the second case because the input string is not a valid number.
  
  You are asked to write a `myParseInt` method with the following rules:
  
  - It should make the conversion if the given string only contains a single integer value (and possibly spaces - including tabs, line feeds... - at both ends)
  - For all other strings (including the ones representing float values), it should return NaN
  - It should assume that all numbers are not signed and written in base 10

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def my_parse_int (s : String) : String ⊕ Int := sorry
  
  theorem valid_integer_string (s : String) (h : ∀ c ∈ s.data, c.isDigit) : 
    my_parse_int s = Sum.inr (String.toInt! s) := sorry

vc-theorems: |-
  theorem padded_integer_string (s : String) (n : Int) 
    (h : String.toInt! (String.trim s) = n) :
    my_parse_int s = Sum.inr n := sorry
  
  theorem invalid_string (s : String) 
    (h : ∃ c ∈ s.data, ¬c.isDigit ∧ ¬c.isWhitespace) :
    my_parse_int s = Sum.inl "NaN" := sorry
  
  theorem arbitrary_string (s : String) :
    (my_parse_int s = Sum.inl "NaN") ∨ 
    (my_parse_int s = Sum.inr (String.toInt! (String.trim s))) := sorry
  
  /--
  info: 9
  -/
  #guard_msgs in
  #eval my_parse_int "9"
  
  /--
  info: 9
  -/
  #guard_msgs in
  #eval my_parse_int "  9  "
  
  /--
  info: 'NaN'
  -/
  #guard_msgs in
  #eval my_parse_int "5 friends"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

