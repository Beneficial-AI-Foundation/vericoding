vc-description: |-
  /-
  Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.
  Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.
  
  Example 1:
  
  Input: [1, 2, 2, 3, 1]
  Output: 2
  Explanation: 
  The input array has a degree of 2 because both elements 1 and 2 appear twice.
  Of the subarrays that have the same degree:
  [1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
  The shortest length is 2. So return 2.
  
  Example 2:
  
  Input: [1,2,2,3,1,4,2]
  Output: 6
  
  Note:
  nums.length will be between 1 and 50,000.
  nums[i] will be an integer between 0 and 49,999.
  -/

vc-preamble: |-
  def max_freq (l: List Int) : Nat :=
    sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def find_shortest_subarray (l : List Int) : Nat :=
    sorry

vc-theorems: |-
  theorem shortest_subarray_bounds {l : List Int} (h: l ≠ []) :
    1 ≤ find_shortest_subarray l ∧ find_shortest_subarray l ≤ l.length :=
    sorry
  
  theorem single_element_list {l : List Int} (h: l.length = 1) :
    find_shortest_subarray l = 1 :=
    sorry
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval find_shortest_subarray [1, 2, 2, 3, 1]
  
  /-
  info: 6
  -/
  -- #guard_msgs in
  -- #eval find_shortest_subarray [1, 2, 2, 3, 1, 4, 2]
  
  /-
  info: 3
  -/
  -- #guard_msgs in
  -- #eval find_shortest_subarray [1, 1, 2, 2, 2, 1]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

