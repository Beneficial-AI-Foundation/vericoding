vc-description: |-
  =====Function Descriptions=====
  dot
  
  The dot tool returns the dot product of two arrays.
  
  import numpy
  
  A = numpy.array([ 1, 2 ])
  B = numpy.array([ 3, 4 ])
  
  print numpy.dot(A, B)       #Output : 11
  
  cross
  
  The cross tool returns the cross product of two arrays.
  
  import numpy
  
  A = numpy.array([ 1, 2 ])
  B = numpy.array([ 3, 4 ])
  
  print numpy.cross(A, B)     #Output : -2
  
  =====Problem Statement=====
  You are given two arrays A and B. Both have dimensions of NXN.
  Your task is to compute their matrix product.
  
  =====Input Format=====
  The first line contains the integer N.
  The next N lines contains N space separated integers of array A.
  The following N lines contains N space separated integers of array B.
  
  =====Output Format=====
  Print the matrix multiplication of A and B.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def matrix_multiply (n : Nat) (A B : List (List Int)) : List (List Int) := sorry
  
  theorem matrix_multiply_shape (n : Nat) (A B : List (List Int)) :
    let result := matrix_multiply n A B 
    result.length = n ∧ 
    (∀ row ∈ result, row.length = n) := sorry

vc-theorems: |-
  theorem matrix_multiply_matches_expected (n : Nat) (A : List (List Int)) : 
    matrix_multiply n A A = 
      let expected := List.replicate n (List.replicate n 0) -- simplified for theorem
      expected := sorry
  
  theorem matrix_multiply_identity (n : Nat) (A : List (List Int)) :
    let I := List.replicate n (List.replicate n 0) -- identity matrix
    matrix_multiply n A I = A := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

