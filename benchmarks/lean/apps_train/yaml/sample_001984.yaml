vc-description: |-
  /-
  Bike loves looking for the second maximum element in the sequence. The second maximum element in the sequence of distinct numbers x_1, x_2, ..., x_{k} (k > 1) is such maximum element x_{j}, that the following inequality holds: $x_{j} \neq \operatorname{max}_{i = 1}^{k} x_{i}$.
  
  The lucky number of the sequence of distinct positive integers x_1, x_2, ..., x_{k} (k > 1) is the number that is equal to the bitwise excluding OR of the maximum element of the sequence and the second maximum element of the sequence.
  
  You've got a sequence of distinct positive integers s_1, s_2, ..., s_{n} (n > 1). Let's denote sequence s_{l}, s_{l} + 1, ..., s_{r} as s[l..r] (1 ≤ l < r ≤ n). Your task is to find the maximum number among all lucky numbers of sequences s[l..r].
  
  Note that as all numbers in sequence s are distinct, all the given definitions make sence.
  
  -----Input-----
  
  The first line contains integer n (1 < n ≤ 10^5). The second line contains n distinct integers s_1, s_2, ..., s_{n} (1 ≤ s_{i} ≤ 10^9).
  
  -----Output-----
  
  Print a single integer — the maximum lucky number among all lucky numbers of sequences s[l..r].
  
  -----Examples-----
  Input
  5
  5 2 1 4 3
  
  Output
  7
  
  Input
  5
  9 8 3 5 7
  
  Output
  15
  
  -----Note-----
  
  For the first sample you can choose s[4..5] = {4, 3} and its lucky number is (4 xor 3) = 7. You can also choose s[1..2].
  
  For the second sample you must choose s[2..5] = {8, 3, 5, 7}.
  -/

vc-preamble: |-
  def find_max_lucky_number (nums : List Nat) : Nat := sorry
  
  theorem result_non_negative
    (nums : List Nat)
    (h : nums.length > 0) :
    find_max_lucky_number nums ≥ 0 := sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def isSorted (l : List Nat) : Prop :=
    ∀ i j, i < l.length → j < l.length → i < j → l[i]'sorry ≤ l[j]'sorry

vc-theorems: |-
  theorem result_bounded_by_max_xor
    (nums : List Nat)
    (h : nums.length > 0) :
    ∀ max_xor : Nat,
    (∀ i j, i < nums.length → j < nums.length → i < j →
      (nums[i]'sorry) ^^^ (nums[j]'sorry) ≤ max_xor) →
    find_max_lucky_number nums ≤ max_xor := sorry
  
  theorem single_element_zero
    (x : Nat) :
    find_max_lucky_number [x] = 0 := sorry
  
  theorem reverse_invariant_unique
    (nums : List Nat)
    (h1 : nums.length ≥ 2)
    (h2 : ∀ i j, i < nums.length → j < nums.length → i ≠ j → nums[i]'sorry ≠ nums[j]'sorry) :
    find_max_lucky_number nums = find_max_lucky_number nums.reverse := sorry
  
  theorem sorted_sequence_maintains_xor_pair
    (nums : List Nat)
    (h : nums.length ≥ 2)
    (sorted : List Nat)
    (h_sorted : isSorted sorted) :
    let result := find_max_lucky_number sorted
    ∃ i j, i < sorted.length ∧ j < sorted.length ∧ i < j ∧
      result = (sorted[i]'sorry) ^^^ (sorted[j]'sorry) := sorry
  
  /-
  info: 7
  -/
  -- #guard_msgs in
  -- #eval find_max_lucky_number [5, 2, 1, 4, 3]
  
  /-
  info: 15
  -/
  -- #guard_msgs in
  -- #eval find_max_lucky_number [9, 8, 3, 5, 7]
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval find_max_lucky_number [11, 10, 8]

vc-postamble: |-
  -- Apps difficulty: competition
  -- Assurance level: unguarded

