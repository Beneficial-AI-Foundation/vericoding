vc-description: |-
  This kata explores writing an AI for a two player, turn based game called *NIM*.
  
  The Board
  --------------
  
  The board starts out with several piles of straw.  Each pile has a random number of straws.
  
  ```
  Pile 0: ||||
  
  Pile 1: ||
  
  Pile 2: |||||
  
  Pile 3: |
  
  Pile 4: ||||||
  
  ...or more concisely: [4,2,5,1,6]
  ```
  
  The Rules
  --------------
  
  - The players take turns picking a pile, and removing any number of straws from the pile they pick
  - A player must pick at least one straw
  - If a player picks the last straw, she wins!
  
  The Task
  ------------
  
  In this kata, you have to write an AI to play the straw picking game.
  
  You have to encode an AI in a function `choose_move` (or `chooseMove`, or `choose-move`) that takes a board, represented as a list of positive integers, and returns
  
  ```python
  (pile_index, number_of_straws)
  ```
  
  Which refers to an index of a pile on the board, and some none-zero number of straws to draw from that pile.
  
  The test suite is written so that your AI is expected to play 50 games and win every game it plays.

vc-preamble: |-
  def choose_move (gameState : List Nat) : Nat × Nat :=
    sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def nimSum (xs : List Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem choose_move_valid {gameState : List Nat} (h : gameState ≠ []) :
    let move := choose_move gameState
    let (pileIdx, straws) := move
    pileIdx < gameState.length ∧ 
    0 < straws ∧
    straws ≤ gameState[pileIdx]! :=
  sorry
  
  theorem winning_move_reduces_nim_sum {gameState : List Nat} (h : gameState ≠ []) :
    let move := choose_move gameState
    let (pileIdx, straws) := move
    let initialNimSum := nimSum gameState
    let newState := gameState.set pileIdx (gameState[pileIdx]! - straws)
    let newNimSum := nimSum newState
    initialNimSum > 0 → newNimSum < initialNimSum :=
  sorry
  
  theorem modify_nonempty_pile {gameState : List Nat} (h : gameState ≠ []) :
    let move := choose_move gameState
    let (pileIdx, straws) := move
    gameState[pileIdx]! > 0 :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

