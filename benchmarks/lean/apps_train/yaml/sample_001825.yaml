vc-description: |-
  Suppose you have a random list of people standing in a queue. Each person is described by a pair of integers (h, k), where h is the height of the person and k is the number of people in front of this person who have a height greater than or equal to h. Write an algorithm to reconstruct the queue.
  
  Note:
  The number of people is less than 1,100.
  
  Example
  
  Input:
  [[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]
  
  Output:
  [[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def reconstruct_queue (people : List (Nat × Nat)) : List (Nat × Nat) := sorry 
  
  theorem reconstruct_queue_maintains_length 
    (people : List (Nat × Nat)) : 
    List.length (reconstruct_queue people) = List.length people := sorry
  
  /-- For any two heights in the input and output list, if we count their occurrences,
      they should be equal -/

vc-theorems: |-
  theorem reconstruct_queue_maintains_elements
    (people : List (Nat × Nat)) (h : Nat) :
    List.countP (fun p => p.1 = h) (reconstruct_queue people) = 
    List.countP (fun p => p.1 = h) people := sorry
  
  theorem reconstruct_queue_height_bounds
    (people : List (Nat × Nat)) :
    ∀ p ∈ people, 1 ≤ p.fst ∧ p.fst ≤ 100 := sorry
  
  theorem reconstruct_queue_count_bounds
    (people : List (Nat × Nat)) :
    ∀ p ∈ people, 0 ≤ p.snd ∧ p.snd ≤ 20 := sorry
  
  theorem reconstruct_queue_size_bounds
    (people : List (Nat × Nat)) :
    1 ≤ List.length people ∧ List.length people ≤ 20 := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

