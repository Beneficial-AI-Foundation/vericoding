vc-description: |-
  Sam has been teaching Jon the Game of Stones to sharpen his mind and help him devise a strategy to fight the white walkers. The rules of this game are quite simple:  The game starts with n piles of stones indexed from 1 to n. The i-th pile contains s_{i} stones. The players make their moves alternatively. A move is considered as removal of some number of stones from a pile. Removal of 0 stones does not count as a move. The player who is unable to make a move loses.
  
  Now Jon believes that he is ready for battle, but Sam does not think so. To prove his argument, Sam suggested that they play a modified version of the game.
  
  In this modified version, no move can be made more than once on a pile. For example, if 4 stones are removed from a pile, 4 stones cannot be removed from that pile again.
  
  Sam sets up the game and makes the first move. Jon believes that Sam is just trying to prevent him from going to battle. Jon wants to know if he can win if both play optimally.
  
  -----Input-----
  
  First line consists of a single integer n (1 ≤ n ≤ 10^6) — the number of piles.
  
  Each of next n lines contains an integer s_{i} (1 ≤ s_{i} ≤ 60) — the number of stones in i-th pile.
  
  -----Output-----
  
  Print a single line containing "YES" (without quotes) if Jon wins, otherwise print "NO" (without quotes)
  
  -----Examples-----
  Input
  1
  5
  
  Output
  NO
  Input
  2
  1
  2
  
  Output
  YES
  
  -----Note-----
  
  In the first case, Sam removes all the stones and Jon loses.
  
  In second case, the following moves are possible by Sam: $\{1,2 \} \rightarrow \{0,2 \}, \{1,2 \} \rightarrow \{1,0 \}, \{1,2 \} \rightarrow \{1,1 \}$ 
  
  In each of these cases, last move can be made by Jon to win the game as follows: $\{0,2 \} \rightarrow \{0,0 \}, \{1,0 \} \rightarrow \{0,0 \}, \{1,1 \} \rightarrow \{0,1 \}$

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def stones_game (n : Nat) (stones : List Nat) : String := sorry
  
  theorem stones_game_output_valid (n : Nat) (stones : List Nat) :
    stones_game n stones = "YES" ∨ stones_game n stones = "NO" := sorry

vc-theorems: |-
  theorem stones_game_consistent (stones : List Nat) :
    let n := stones.length
    stones_game n stones = stones_game n stones := sorry
  
  /-- We can represent permutation invariance by showing that if we have
      two lists with the same elements (possibly in different order), 
      they produce the same result -/
  
  theorem stones_game_permutation_invariant (stones stones_permuted : List Nat) :
    stones.length = stones_permuted.length →
    stones_game stones.length stones = stones_game stones_permuted.length stones_permuted := sorry
  
  theorem stones_game_identical_stones (n : Nat) :
    let stones := List.replicate n 1
    stones_game n stones = stones_game n stones := sorry
  
  /--
  info: 'NO'
  -/
  #guard_msgs in
  #eval stones_game 1 [5]
  
  /--
  info: 'YES'
  -/
  #guard_msgs in
  #eval stones_game 2 [1, 2]
  
  /--
  info: 'NO'
  -/
  #guard_msgs in
  #eval stones_game 3 [34, 44, 21]

vc-postamble: |-
  -- Apps difficulty: competition
  -- Assurance level: unguarded

