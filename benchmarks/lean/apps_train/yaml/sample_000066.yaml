vc-description: |-
  This problem is different from the easy version. In this version Ujan makes at most $2n$ swaps. In addition, $k \le 1000, n \le 50$ and it is necessary to print swaps themselves. You can hack this problem if you solve it. But you can hack the previous problem only if you solve both problems.
  
  After struggling and failing many times, Ujan decided to try to clean up his house again. He decided to get his strings in order first.
  
  Ujan has two distinct strings $s$ and $t$ of length $n$ consisting of only of lowercase English characters. He wants to make them equal. Since Ujan is lazy, he will perform the following operation at most $2n$ times: he takes two positions $i$ and $j$ ($1 \le i,j \le n$, the values $i$ and $j$ can be equal or different), and swaps the characters $s_i$ and $t_j$.
  
  Ujan's goal is to make the strings $s$ and $t$ equal. He does not need to minimize the number of performed operations: any sequence of operations of length $2n$ or shorter is suitable.
  
  -----Input-----
  
  The first line contains a single integer $k$ ($1 \leq k \leq 1000$), the number of test cases.
  
  For each of the test cases, the first line contains a single integer $n$ ($2 \leq n \leq 50$), the length of the strings $s$ and $t$. 
  
  Each of the next two lines contains the strings $s$ and $t$, each having length exactly $n$. The strings consist only of lowercase English letters. It is guaranteed that strings are different.
  
  -----Output-----
  
  For each test case, output "Yes" if Ujan can make the two strings equal with at most $2n$ operations and "No" otherwise. You can print each letter in any case (upper or lower).
  
  In the case of "Yes" print $m$ ($1 \le m \le 2n$) on the next line, where $m$ is the number of swap operations to make the strings equal. Then print $m$ lines, each line should contain two integers $i, j$ ($1 \le i, j \le n$) meaning that Ujan swaps $s_i$ and $t_j$ during the corresponding operation. You do not need to minimize the number of operations. Any sequence of length not more than $2n$ is suitable.
  
  -----Example-----
  Input
  4
  5
  souse
  houhe
  3
  cat
  dog
  2
  aa
  az
  3
  abc
  bca
  
  Output
  Yes
  1
  1 4
  No
  No
  Yes
  3
  1 2
  3 1
  2 3

vc-preamble: |-
  def solve_string_swaps (n: Nat) (s t: String) : String × List (Nat × Nat) :=
    sorry
  
  def apply_swaps (s t: String) (swaps: List (Nat × Nat)) : String × String :=
    sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def count_chars (s: String) : Char → Nat :=
    sorry
  
  inductive Even : Nat → Prop where
    | zero : Even 0
    | plus_two : (n : Nat) → Even n → Even (n + 2)

vc-theorems: |-
  theorem identical_strings_always_possible 
    (n: Nat) (s: String) (h1: n > 0) (h2: n ≤ 100) :
    let res := solve_string_swaps n s s
    res.1 = "Yes" ∧ res.2.length ≤ 2 * n :=
    sorry
  
  theorem valid_solution
    (n: Nat) (s t: String) (h1: n > 0) (h2: n ≤ 100) :
    let res := solve_string_swaps n s t
    res.1 = "Yes" →
      (res.2.length ≤ 2 * n ∧
       ∃ final_s final_t, 
         (apply_swaps s t res.2) = (final_s, final_t) ∧
         final_s = final_t) ∧
    res.1 = "No" →
      res.2 = [] :=
    sorry
  
  theorem character_count_invariant
    (n: Nat) (s t: String) (h1: n > 0) (h2: n ≤ 100) :
    let res := solve_string_swaps n s t
    let char_counts := count_chars (s ++ t)
    res.1 = "Yes" ↔ ∀ c, Even (char_counts c) :=
    sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

