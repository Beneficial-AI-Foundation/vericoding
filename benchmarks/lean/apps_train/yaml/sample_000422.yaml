vc-description: |-
  /-
  Given an array of integers nums and a positive integer k, find whether it's possible to divide this array into sets of k consecutive numbers
  Return True if its possible otherwise return False.
  
  Example 1:
  Input: nums = [1,2,3,3,4,4,5,6], k = 4
  Output: true
  Explanation: Array can be divided into [1,2,3,4] and [3,4,5,6].
  
  Example 2:
  Input: nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3
  Output: true
  Explanation: Array can be divided into [1,2,3] , [2,3,4] , [3,4,5] and [9,10,11].
  
  Example 3:
  Input: nums = [3,3,2,2,1,1], k = 3
  Output: true
  
  Example 4:
  Input: nums = [1,2,3,4], k = 3
  Output: false
  Explanation: Each array should be divided in subarrays of size 3.
  
  Constraints:
  
  1 <= nums.length <= 10^5
  1 <= nums[i] <= 10^9
  1 <= k <= nums.length
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def is_possible_divide (nums : List Nat) (k : Nat) : Bool := 
    sorry

vc-theorems: |-
  theorem list_length_div_k {nums : List Nat} {k : Nat} (h : k > 0) : 
    nums.length % k ≠ 0 → ¬(is_possible_divide nums k) :=
    sorry
  
  theorem single_number_sequence {nums : List Nat} (h : nums.length > 0) :
    is_possible_divide nums 1 :=
    sorry
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval is_possible_divide [1, 2, 3, 3, 4, 4, 5, 6] 4
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval is_possible_divide [3, 2, 1, 2, 3, 4, 3, 4, 5, 9, 10, 11] 3
  
  /-
  info: False
  -/
  -- #guard_msgs in
  -- #eval is_possible_divide [1, 2, 3, 4] 3

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

