vc-description: |-
  Master Oogway has forseen that a panda named Po will be the dragon warrior, and the master of Chi. But he did not tell anyone about the spell that would make him the master of Chi, and has left Po confused. Now Po has to defeat Kai, who is the super villian, the strongest of them all. Po needs to master Chi, and he finds a spell which unlocks his powerful Chi. But the spell is rather strange. It asks Po to calculate the factorial of a number! Po is very good at mathematics, and thinks that this is very easy. So he leaves the spell, thinking it's a hoax. But little does he know that this can give him the ultimate power of Chi. Help Po by solving the spell and proving that it's not a hoax.
  
  -----Input-----
  First line of input contains an integer T denoting the number of test cases.
  The next T lines contain an integer N.
  
  -----Output-----
  For each test case, print a single line containing the solution to the spell which is equal to factorial of N, i.e. N!. Since the output could be large, output it modulo 1589540031(Grand Master Oogway's current age).
  
  -----Constraints-----
  - 1 ≤ T ≤ 100000
  - 1 ≤ N ≤ 100000
  
  -----Example-----
  Input:
  4
  1
  2
  3
  4
  
  Output:
  1
  2
  6
  24

vc-preamble: |-
  def modInv (a n : Nat) : Nat :=
    sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def solve_factorial_spell (input : List Nat) : List Nat :=
    sorry

vc-theorems: |-
  theorem solve_factorial_spell_output_length 
    (input : List Nat) 
    : List.length (solve_factorial_spell input) = List.length input :=
  sorry
  
  theorem solve_factorial_spell_modulo_bounds
    (input : List Nat)
    (i : Nat)
    (h : i < List.length (solve_factorial_spell input))
    : (List.get! (solve_factorial_spell input) i) < 1589540031 :=
  sorry
  
  theorem solve_factorial_spell_zero_case
    (input : List Nat)
    (i : Nat) 
    (h : i < List.length input)
    (h2 : List.get! input i = 0)
    : List.get! (solve_factorial_spell input) i = 1 :=
  sorry
  
  theorem solve_factorial_spell_consecutive_ratio
    (input : List Nat)
    (i : Nat)
    (h1 : i + 1 < List.length input)
    (h2 : List.get! input (i + 1) = List.get! input i + 1)
    (h3 : List.get! input i > 0)
    : (List.get! (solve_factorial_spell input) (i + 1) * 
       (modInv (List.get! (solve_factorial_spell input) i) 1589540031)) % 1589540031 = 
      List.get! input (i + 1) :=
  sorry
  
  theorem solve_factorial_spell_input_bound
    (input : List Nat)
    (h : ∃ i, i < List.length input ∧ List.get! input i > 100000)
    : solve_factorial_spell input = [] :=
  sorry
  
  /--
  info: expected1
  -/
  #guard_msgs in
  #eval solve_factorial_spell [1, 2, 3, 4]
  
  /--
  info: expected2
  -/
  #guard_msgs in
  #eval solve_factorial_spell [5]
  
  /--
  info: expected3
  -/
  #guard_msgs in
  #eval solve_factorial_spell [6, 7]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

