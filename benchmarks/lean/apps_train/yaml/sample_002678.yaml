vc-description: |-
  Your task is to make a program takes in a sentence (without puncuation), adds all words to a list and returns the sentence as a string which is the positions of the word in the list. Casing should not matter too.
  
  Example
  -----
  
  `"Ask not what your COUNTRY can do for you ASK WHAT YOU CAN DO FOR YOUR country"`
  
  becomes
  
  `"01234567802856734"`
  
  Another example
  -----
  
  `"the one bumble bee one bumble the bee"`
  
  becomes
  
  `"01231203"`

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def compress (s : String) : String := sorry
  
  theorem compress_case_insensitive (s : String) : 
    compress s = compress s.toUpper ∧ compress s = compress s.toLower := by sorry

vc-theorems: |-
  theorem compress_only_digits (s : String) :
    s ≠ "" → compress s ≠ "" → 
    (∀ c : Char, c ∈ (compress s).data → c.isDigit) := by sorry
  
  theorem compress_maps_repeat_words (s : String) (i : Nat) :
    s ≠ "" →
    let words := s.toLower.split (· = ' ')
    i < words.length →
    let result := compress s
    String.toNat! ((result.data.get! i).toString) = words.indexOf (words.get! i) := by sorry
  
  /--
  info: '012'
  -/
  #guard_msgs in
  #eval compress "The bumble bee"
  
  /--
  info: '012012'
  -/
  #guard_msgs in
  #eval compress "SILLY LITTLE BOYS silly little boys"
  
  /--
  info: '01234567802856734'
  -/
  #guard_msgs in
  #eval compress "Ask not what your COUNTRY can do for you ASK WHAT YOU CAN DO FOR YOUR country"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

