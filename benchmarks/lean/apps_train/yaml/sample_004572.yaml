vc-description: |-
  /-
  Backwards Read Primes are primes that when read backwards in base 10 (from right to left) 
  are a different prime. (This rules out primes which are palindromes.)
  ```
  Examples:
  13 17 31 37 71 73 are Backwards Read Primes
  ```
  13 is such because it's prime and read from right to left writes 31 which is prime too. Same for the others.
  
  ## Task
  Find all Backwards Read Primes between two positive given numbers (both inclusive), the second one always being greater than or equal to the first one. The resulting array or the resulting string will be ordered following the natural order of the prime numbers.
  
  ## Example
  
  backwardsPrime(2, 100) => [13, 17, 31, 37, 71, 73, 79, 97] 
  backwardsPrime(9900, 10000) => [9923, 9931, 9941, 9967]
  backwardsPrime(501, 599) => []
  
  ## Note for Forth
  Return only the first backwards-read prime between start and end
  or 0 if you don't find any
  
  ```python
  backwards_prime(2, 100) => [13, 17, 31, 37, 71, 73, 79, 97] 
  backwards_prime(9900, 10000) => [9923, 9931, 9941, 9967]
  ```
  -/

vc-preamble: |-
  def is_prime : Nat → Bool := sorry
  
  def reverse : Nat → Nat := sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def backwards_prime : Nat → Nat → List Nat := sorry
  
  theorem backwards_prime_empty_range : 
    backwards_prime 1 0 = [] ∧ 
    backwards_prime 0 1 = [] := sorry

vc-theorems: |-
  /-
  info: [13, 17, 31, 37, 71, 73, 79, 97]
  -/
  -- #guard_msgs in
  -- #eval backwards_prime 2 100
  
  /-
  info: [9923, 9931, 9941, 9967]
  -/
  -- #guard_msgs in
  -- #eval backwards_prime 9900 10000
  
  /-
  info: []
  -/
  -- #guard_msgs in
  -- #eval backwards_prime 501 599

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

