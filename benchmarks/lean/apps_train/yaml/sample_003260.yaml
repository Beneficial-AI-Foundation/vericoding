vc-description: |-
  Given an array containing only zeros and ones, find the index of the zero that, if converted to one, will make the longest sequence of ones.
  
  For instance, given the array:
  
  ```
  [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1]
  ```
  
  replacing the zero at index 10 (counting from 0) forms a sequence of 9 ones:
  
  ```
  [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1]
                    '------------^------------'
  ```
  
  Your task is to complete the function that determines where to replace a zero with a one to make the maximum length subsequence.
  
  **Notes:**
  - If there are multiple results, return the last one:
  
   `[1, 1, 0, 1, 1, 0, 1, 1] ==> 5`
  
  - The array will always contain only zeros and ones.
  
  Can you do this in one pass?

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def replace_zero (arr : List Nat) : Int := sorry
  
  def consecutive_ones (l : List Nat) : Nat := sorry

vc-theorems: |-
  theorem replace_zero_valid_output (arr : List Nat)
      (h : ∀ x ∈ arr, x = 0 ∨ x = 1) : 
      -1 ≤ replace_zero arr ∧ replace_zero arr < arr.length := sorry
  
  theorem replace_zero_no_zeros (arr : List Nat)
      (h1 : ∀ x ∈ arr, x = 0 ∨ x = 1)
      (h2 : ∀ x ∈ arr, x ≠ 0) :
      replace_zero arr = -1 := sorry
  
  theorem replace_zero_optimal (arr : List Nat) (idx : Int)
      (h1 : ∀ x ∈ arr, x = 0 ∨ x = 1)
      (h2 : idx = replace_zero arr)
      (h3 : idx ≠ -1) :
      ∀ i, 0 ≤ i → i < arr.length →
          consecutive_ones (arr.set (Int.toNat idx) 1) ≥ consecutive_ones (arr.set (Int.toNat i) 1) := sorry
  
  theorem replace_zero_padding (arr : List Nat)
      (h : ∀ x ∈ arr, x = 0 ∨ x = 1) :
      let padded := 0 :: arr ++ [0]
      replace_zero padded = -1 ∧ replace_zero arr = -1 ∨
      replace_zero padded = replace_zero arr + 1 ∨
      replace_zero padded = 0 ∨
      replace_zero padded = arr.length + 1 := sorry
  
  /--
  info: 10
  -/
  #guard_msgs in
  #eval replace_zero [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1]
  
  /--
  info: 5
  -/
  #guard_msgs in
  #eval replace_zero [1, 1, 0, 1, 1, 0, 1, 1]
  
  /--
  info: 6
  -/
  #guard_msgs in
  #eval replace_zero [1, 1, 1, 0, 1, 1, 0, 1, 1, 1]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

