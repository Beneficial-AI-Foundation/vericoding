vc-description: |-
  /-
  You are given three numbers $a$, $b$, $c$ . Write a program to determine the largest number that is less than or equal to $c$ and leaves a remainder $b$ when divided by $a$.
  
  -----Input:-----
  - First line will contain $T$, number of testcases. Then the testcases follow.
  - Each testcase contains a single line of input, having three integers $a$, $b$, $c$.
  
  -----Output:-----
  - For each testcase, output in a single line the largest number less than or equal to $c$.
  
  -----Constraints:-----
  - $1 \leq T  \leq 100000$
  - $0 \leq b < a < c \leq$ $10$^18
  
  -----Sample Input:-----
  1
  7 2 10
  
  -----Sample Output:-----
  9
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def solve_remainder (a b c : Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem solve_remainder_bounded
    (a b c : Nat)
    (h1 : a > 0)
    (h2 : b < a)
    (h3 : c > 0) :
    solve_remainder a b c ≤ c :=
  sorry
  
  theorem solve_remainder_mod
    (a b c : Nat)
    (h1 : a > 0)
    (h2 : b < a)
    (h3 : c > 0) :
    solve_remainder a b c % a = b :=
  sorry
  
  theorem solve_remainder_largest
    (a b c : Nat)
    (h1 : a > 0)
    (h2 : b < a)
    (h3 : c > 0) :
    let next := solve_remainder a b c + a
    next > c ∨ next % a ≠ b :=
  sorry
  
  /-
  info: 9
  -/
  -- #guard_msgs in
  -- #eval solve_remainder 7 2 10
  
  /-
  info: 8
  -/
  -- #guard_msgs in
  -- #eval solve_remainder 5 3 12
  
  /-
  info: 95
  -/
  -- #guard_msgs in
  -- #eval solve_remainder 10 5 100

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible

