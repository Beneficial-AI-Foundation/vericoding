vc-description: |-
  Every Friday and Saturday night, farmer counts amount of sheep returned back to his farm (sheep returned on Friday stay and don't leave for a weekend).
  
  Sheep return in groups each of the days -> you will be given two arrays with these numbers (one for Friday and one for Saturday night). Entries are always positive ints, higher than zero.
  
  Farmer knows the total amount of sheep, this is a third parameter. You need to return the amount of sheep lost (not returned to the farm) after final sheep counting on Saturday.
  
  Example 1: Input: {1, 2}, {3, 4}, 15 --> Output: 5
  
  Example 2: Input: {3, 1, 2}, {4, 5}, 21 --> Output: 6
  
  Good luck! :-)

vc-preamble: |-
  def sum_list : List Nat â†’ Nat
    | [] => 0
    | x::xs => x + sum_list xs

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def lost_sheep (friday : List Nat) (saturday : List Nat) (total : Nat) : Nat :=
  sorry

vc-theorems: |-
  theorem lost_sheep_reverse_invariant (friday : List Nat) (saturday : List Nat) (total : Nat) :
    lost_sheep friday saturday total = lost_sheep friday.reverse saturday.reverse total :=
  sorry
  
  theorem lost_sheep_empty_lists (total : Nat) :
    lost_sheep [] [] total = total :=
  sorry
  
  /--
  info: 5
  -/
  #guard_msgs in
  #eval lost_sheep [1, 2] [3, 4] 15
  
  /--
  info: 6
  -/
  #guard_msgs in
  #eval lost_sheep [3, 1, 2] [4, 5] 21
  
  /--
  info: 10
  -/
  #guard_msgs in
  #eval lost_sheep [5, 1, 4] [5, 4] 29

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

