vc-description: |-
  /-
  In this Kata, you will be given an array of integers whose elements have both a negative and a positive value, except for one integer that is either only negative or only positive. Your task will be to find that integer. 
  
  Examples:
  
  `[1, -1, 2, -2, 3] => 3`
  
  `3` has no matching negative appearance
  
  `[-3, 1, 2, 3, -1, -4, -2] => -4`
  
  `-4` has no matching positive appearance
  
  `[1, -1, 2, -2, 3, 3] => 3`
  
  (the only-positive or only-negative integer may appear more than once)
  
  Good luck!
  -/

vc-preamble: |-
  def solve (arr : List Int) : Int := sorry
  
  def getUnique (arr : List Int) : List Int :=
    arr.foldl (fun acc x => if acc.contains x then acc else x::acc) []
  
  def sumList (l : List Int) : Int :=
    match l with
    | [] => 0
    | x :: xs => x + sumList xs
  
  def filterPositive (l : List Int) : List Int :=
    l.filter (fun x => x > 0)

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def filterNegative (l : List Int) : List Int :=
    l.filter (fun x => x < 0)

vc-theorems: |-
  theorem solve_invariant_under_duplication : ∀ (arr : List Int),
    arr ≠ [] → solve (arr ++ arr) = solve arr := sorry
  
  theorem solve_positive_result_implies_positive_element : ∀ (arr : List Int),
    arr ≠ [] → solve arr > 0 → ∃ x ∈ arr, x > 0 := sorry
  
  theorem solve_negative_result_implies_negative_element : ∀ (arr : List Int),
    arr ≠ [] → solve arr < 0 → ∃ x ∈ arr, x < 0 := sorry
  
  /-
  info: 3
  -/
  -- #guard_msgs in
  -- #eval solve [1, -1, 2, -2, 3]
  
  /-
  info: -4
  -/
  -- #guard_msgs in
  -- #eval solve [-3, 1, 2, 3, -1, -4, -2]
  
  /-
  info: 3
  -/
  -- #guard_msgs in
  -- #eval solve [1, -1, 2, -2, 3, 3]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

