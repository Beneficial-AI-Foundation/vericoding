vc-description: |-
  There are several (or no) spiders, butterflies, and dragonflies. 
  
  In this kata, a spider has eight legs. A dragonfly or a butterfly has six legs. A __dragonfly__ has __two__ pairs of wings, while a __butterfly__ has __one__ pair of wings. __I am not sure whether they are biologically correct, but the values apply here. __
  
  Given the number of total heads, legs, and __pairs of__ wings, please calculate numbers of each kind of bugs. Of course they are integers. 
  _However, I do not guarantee that they are positive in the test cases. 
  Please regard the minus numbers as cases that does not make sense. _
  
  If answers make sense, return [n\_spider, n\_butterfly, n\_dragonfly]; 
  else, please return [-1, -1, -1]. 
  
  Example: 
  
  cal\_n\_bug(3, 20, 3) = [1, 1, 1]
  One spider, one butterfly, one dragonfly in total have three heads, twenty legs (8 for the spider, 6 for the butterfly, and 6 for the dragonfly), and _three pairs_ of wings (1 for the butterfly and 2 for the dragonfly).

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def cal_n_bug (heads : Int) (legs : Int) (wings : Int) : List Int :=
    sorry

vc-theorems: |-
  theorem valid_output_structure_heads_spiders
    (n : Int) :
    let result := cal_n_bug n (n*6) n
    result.length = 3 ∧ 
    (∀ x ∈ result, x ≥ 0 ∨ result = [-1, -1, -1]) :=
  sorry
  
  theorem total_creatures_match_heads
    (heads legs wings : Int) :
    let result := cal_n_bug heads legs wings
    result ≠ [-1, -1, -1] →
    result.foldl (init := 0) (·+·) = heads :=
  sorry
  
  theorem legs_and_wings_match
    (spider butterfly dragonfly : Int) :
    let total := spider + butterfly + dragonfly
    let legs := spider*8 + butterfly*6 + dragonfly*6 
    let wings := butterfly + dragonfly*2
    cal_n_bug total legs wings = [spider, butterfly, dragonfly] := 
  sorry
  
  theorem negative_heads_invalid
    (n : Int) :
    n < 0 →
    cal_n_bug n 0 0 = [-1, -1, -1] :=
  sorry
  
  theorem impossible_combinations
    (n : Int) :
    n > 0 →
    cal_n_bug n 3 n = [-1, -1, -1] ∧
    cal_n_bug n (n*8) n = [-1, -1, -1] :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

