vc-description: |-
  Here's a way to construct a list containing every positive rational number:
  
  Build a binary tree where each node is a rational and the root is `1/1`, with the following rules for creating the nodes below:
  * The value of the left-hand node below `a/b` is `a/a+b`
  * The value of the right-hand node below `a/b` is `a+b/b`
  
  So the tree will look like this:
  
  ```
                         1/1
                    /           \ 
              1/2                  2/1
             /    \              /     \
         1/3        3/2        2/3       3/1
        /   \      /   \      /   \     /   \
     1/4    4/3  3/5   5/2  2/5   5/3  3/4   4/1
  
   ...
  ```
  
  Now traverse the tree, breadth first, to get a list of rationals.
  
  ```
  [ 1/1, 1/2, 2/1, 1/3, 3/2, 2/3, 3/1, 1/4, 4/3, 3/5, 5/2, .. ]
  ```
  
  Every positive rational will occur, in its reduced form, exactly once in the list, at a finite index.
  
  ```if:haskell
  In the kata, we will use tuples of type `(Integer, Integer)` to represent rationals, where `(a, b)` represents `a / b`
  ```
  ```if:javascript
  In the kata, we will use tuples of type `[ Number, Number ]` to represent rationals, where `[a,b]` represents `a / b`
  ```
  
  Using this method you could create an infinite list of tuples:
  
  matching the list described above:
  
  However, constructing the actual list is too slow for our purposes. Instead, study the tree above, and write two functions:
  
  For example:

vc-preamble: |-
  def gcd (x y : Nat) : Nat :=
    sorry
  
  def coprime (x y : Nat) : Prop :=
    gcd x y = 1
  
  def rat_at (n : Nat) : Nat × Nat := 
    sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def index_of (a b : Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem rat_at_index_inverse (n : Nat) :
    let (a, b) := rat_at n
    index_of a b = n :=
    sorry
  
  theorem base_cases :
    rat_at 0 = (1, 1) ∧ 
    index_of 1 1 = 0 :=
    sorry
  
  /--
  info: (1, 1)
  -/
  #guard_msgs in
  #eval rat_at 0
  
  /--
  info: (1, 3)
  -/
  #guard_msgs in
  #eval rat_at 3
  
  /--
  info: (3, 2)
  -/
  #guard_msgs in
  #eval rat_at 4
  
  /--
  info: 0
  -/
  #guard_msgs in
  #eval index_of 1 1

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

