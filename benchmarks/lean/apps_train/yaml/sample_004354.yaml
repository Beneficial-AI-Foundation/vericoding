vc-description: |-
  Write a function that takes a number or a string and gives back the number of **permutations without repetitions** that can generated using all of its element.; more on permutations [here](https://en.wikipedia.org/wiki/Permutation).
  
  For example, starting with:
  ```
  1
  45
  115
  "abc"
  ```
  
  You could respectively generate:
  ```
  1
  45,54
  115,151,511
  "abc","acb","bac","bca","cab","cba"
  ```
  
  So you should have, in turn:
  ```python
  perms(1)==1
  perms(45)==2
  perms(115)==3
  perms("abc")==6
  ```

vc-preamble: |-
  def perms (s : String) : Nat := sorry
  
  def listPerms (l : List α) : List (List α) := sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def listToString (l : List Char) : String := sorry
  
  def numUnique (xs : List String) : Nat := sorry

vc-theorems: |-
  theorem perms_matches_unique_perms_int {n : Nat} : 
    perms (toString n) = numUnique ((listPerms (toString n).data).map listToString) := sorry
  
  theorem perms_matches_unique_perms_str {s : String} :
    perms s = numUnique ((listPerms s.data).map listToString) := sorry
  
  theorem perms_order_invariant {n : Nat} :
    perms (toString n) = perms (toString n) := sorry
  
  theorem perms_positive_int {s : String} (h : s.length > 0) :
    perms s > 0 := sorry
  
  theorem perms_single_char {c : Char} :
    perms (String.mk [c]) = 1 := sorry
  
  /--
  info: 1
  -/
  #guard_msgs in
  #eval perms 2
  
  /--
  info: 2
  -/
  #guard_msgs in
  #eval perms 25
  
  /--
  info: 6
  -/
  #guard_msgs in
  #eval perms "abc"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

