vc-description: |-
  # Story
  
  Well, here I am stuck in another traffic jam.
  
  *Damn all those courteous people!*
  
  Cars are trying to enter the main road from side-streets somewhere ahead of me and people keep letting them cut in.
  
  Each time somebody is let in the effect ripples back down the road, so pretty soon I am not moving at all.
  
  (Sigh... late again...)
  
  ## Visually
  
  The diagram below shows lots of cars all attempting to go North.
  * the `a`,`b`,`c`... cars are on the main road with me (`X`)
  * the `B` cars and `C` cars are merging from side streets
  
            |  a  |   
            |  b  | ↑  
    --------+  c  |  
       BBBBBB  d  |   
    --------+  e  |  
            |  f  | ↑
            |  g  |   
    --------+  h  |
        CCCCC  i  |
    --------+  j  | ↑
            |  k  |
            |  l  |
            |  m  |
            |  X  | 
  
  This can be represented as
  
  * `mainRoad` = `"abcdefghijklmX"`
  * `sideStreets` = `["","","","BBBBBB","","","","","CCCCC"]`
  
  # Kata Task
  
  Assume every car on the main road will "give way" to 1 car entering from each side street.
  
  Return a string representing the cars (up to and including me) in the order they exit off the top of the diagram.
  
  ## Notes
  
  * My car is the only `X`, and I am always on the main road
  * Other cars may be any alpha-numeric character (except `X` of course)
  * There are no "gaps" between cars
  * Assume side streets are always on the left (as in the diagram)
  * The `sideStreets` array length may vary but is never more than the length of the main road
  * A pre-loaded `Util.display(mainRoad,sideStreets)` method is provided which may help to visualise the data
   * (Util.Display for C#)
  
  ## Example
  Here are the first few iterations of my example, showing that I am hardly moving at all...
  
  InitialIter 1Iter 2Iter 3Iter 4Iter 5Iter 6Iter 7
  
        a   
        b
        c  
  BBBBBBd   
        e  
        f
        g   
        h
   CCCCCi
        j
        k
        l
        m
        X 
  
        b   
        c
        d 
   BBBBBB   
        e  
        f
        g   
        h
   CCCCCi
        j
        k
        l
        m
        X
  
        c   
        d
        B
   BBBBBe
        f  
        g
        h   
        i
    CCCCC
        j
        k
        l
        m
        X
  
         d
         B
         e
     BBBBB
         f
         g
         h
         i
     CCCCC
         j
         k
         l
         m
         X
  
       B
       e
       B
   BBBBf
       g
       h
       i
       C
   CCCCj
       k
       l
       m
       X
  
       e
       B
       f
    BBBB
       g
       h
       i
       C
   CCCCj
       k
       l
       m
       X
  
       B
       f
       B
    BBBg
       h
       i
       C
       j
    CCCC
       k
       l
       m
       X
  
       f
       B
       g
     BBB
       h
       i
       C
       j
    CCCC
       k
       l
       m
       X
  
  :-) 
  
  DM

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def trafficJam (road: String) (sides: List String) : String := sorry 
  
  theorem trafficJam_endsWith_X (road: String) (sides: List String) 
    (h1: ∃ i, road.get i = 'X') :
    ∃ j, (trafficJam road sides).get j = 'X' := sorry

vc-theorems: |-
  theorem trafficJam_result_length 
    (road: String) (sides: List String) 
    (h1: ∃ i, road.get i = 'X')
    (h2: road.length > 0) :
    (trafficJam road sides).length ≥ road.length := sorry
  
  theorem trafficJam_preserve_first_char
    (road: String) (sides: List String)
    (h1: sides.length > 0)
    (h2: sides[0] = "") 
    (h3: road.length > 0) :
    (trafficJam road sides).front = road.front := sorry
  
  theorem trafficJam_minimal_case :
    trafficJam "X" [] = "X" := sorry
  
  theorem trafficJam_single_char
    (road: String) (sides: List String)
    (h1: road.length = 2)
    (h2: road.back = 'X')
    (h3: sides = [""]) :
    (trafficJam road sides).length ≥ 2 ∧
    ∃ i, (trafficJam road sides).get i = 'X' := sorry
  
  /--
  info: 'abcCdCeCECX'
  -/
  #guard_msgs in
  #eval traffic_jam "abcdeXghi" ["", "", "CCCCC", "", "EEEEEEEEEE", "FFFFFF", "", "", "IIIIII"]
  
  /--
  info: 'abcdefX'
  -/
  #guard_msgs in
  #eval traffic_jam "abcdefX" []
  
  /--
  info: 'abcdBeBfBgBhBiBCjCkClCmCX'
  -/
  #guard_msgs in
  #eval traffic_jam "abcdefghijklmX" ["", "", "", "BBBBBB", "", "", "", "", "CCCCC"]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

