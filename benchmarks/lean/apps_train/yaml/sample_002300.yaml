vc-description: |-
  /-
  Given a string S of lowercase letters, a duplicate removal consists of choosing two adjacent and equal letters, and removing them.
  We repeatedly make duplicate removals on S until we no longer can.
  Return the final string after all such duplicate removals have been made.  It is guaranteed the answer is unique.
  
  Example 1:
  Input: "abbaca"
  Output: "ca"
  Explanation: 
  For example, in "abbaca" we could remove "bb" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is "aaca", of which only "aa" is possible, so the final string is "ca".
  
  Note:
  
  1 <= S.length <= 20000
  S consists only of English lowercase letters.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def remove_duplicates (s : String) : String := sorry
  
  theorem result_is_subsequence (s : String) : 
    let result := remove_duplicates s
    ∃ indices : List String.Pos, 
      (∀ (i j : Fin indices.length), i.val < j.val → indices[i.val]! < indices[j.val]!) ∧ 
      indices.map (String.get s) = result.data := sorry

vc-theorems: |-
  theorem all_same_char_gives_empty_or_single (c : Char) (s : String) :
    (∀ i : String.Pos, s.get i = c) →
    remove_duplicates s = "" ∨ remove_duplicates s = String.mk [c] := sorry
  
  theorem repeated_application_stable (s : String) :
    remove_duplicates (remove_duplicates s) = remove_duplicates s := sorry
  
  theorem empty_string :
    remove_duplicates "" = "" := sorry
  
  theorem non_letters_unchanged (s : String) :
    (∀ c ∈ s.data, ¬ c.isAlpha) →
    remove_duplicates s = s := sorry
  
  /-
  info: 'ca'
  -/
  -- #guard_msgs in
  -- #eval remove_duplicates "abbaca"
  
  /-
  info: ''
  -/
  -- #guard_msgs in
  -- #eval remove_duplicates "aaaaaa"
  
  /-
  info: ''
  -/
  -- #guard_msgs in
  -- #eval remove_duplicates "abba"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

