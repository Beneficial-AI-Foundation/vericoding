vc-description: |-
  /-
  A few years ago, Aaron left his old school and registered at another due to security reasons. Now he wishes to find Jane, one of his schoolmates and good friends.
  
  There are `n` schools numbered from 1 to `n`. One can travel between each pair of schools by buying a ticket. The ticket between schools `i` and `j` costs `(i + j) modulo (n + 1)` and can be used multiple times. Help Aaron find the minimum total cost to visit all schools. He can start and finish at any school.
  
  Range : 1 ≤ n ≤ 10^(6)
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def findJane (n : Nat) : Nat := sorry 
  
  theorem findJane_non_negative (n : Nat) 
    (h : n ≥ 2) : 
    findJane n ≥ 0 := sorry

vc-theorems: |-
  theorem findJane_less_than_n (n : Nat)
    (h : n ≥ 2) :
    findJane n < n := sorry
  
  theorem findJane_formula (n : Nat)
    (h : n ≥ 2) :
    findJane n = (n-1)/2 := sorry
  
  theorem findJane_small_cases :
    findJane 2 = 0 ∧ 
    findJane 3 = 1 ∧
    findJane 4 = 1 ∧
    findJane 5 = 2 := sorry
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval find_jane 2
  
  /-
  info: 4
  -/
  -- #guard_msgs in
  -- #eval find_jane 10
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval find_jane 5

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

