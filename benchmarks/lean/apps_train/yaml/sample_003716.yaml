vc-description: |-
  /-
  A zero-indexed array ```arr``` consisting of n integers is given. The dominator of array ```arr``` is the value that occurs in more than half of the elements of ```arr```.
  For example, consider array ```arr``` such that ```arr = [3,4,3,2,3,1,3,3]``` The dominator of ```arr``` is 3 because it occurs in 5 out of 8 elements of ```arr``` and 5 is more than a half of 8.
  Write a function ```dominator(arr)``` that, given a zero-indexed array ```arr``` consisting of n integers, returns the dominator of ```arr```. The function should return âˆ’1 if array does not have a dominator. All values in ```arr``` will be >=0.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def dominator (arr : List Int) : Int := sorry
  
  theorem dominator_empty_list :
    dominator [] = -1 := sorry

vc-theorems: |-
  theorem dominator_singleton (x : Int) :
    dominator [x] = x := sorry
  
  theorem dominator_majority {base : List Int} {dom_value : Int} {repeats : Nat}
    (h_repeats : repeats > base.length) :
    dominator (base ++ List.replicate repeats dom_value) = dom_value := sorry
  
  /-
  info: 3
  -/
  -- #guard_msgs in
  -- #eval dominator [3, 4, 3, 2, 3, 1, 3, 3]
  
  /-
  info: -1
  -/
  -- #guard_msgs in
  -- #eval dominator [1, 2, 3, 4, 5]
  
  /-
  info: -1
  -/
  -- #guard_msgs in
  -- #eval dominator []

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

