vc-description: |-
  /-
  The chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K to form new pattern. Help the chef to code this pattern problem.
  
  -----Input:-----
  - First line will contain $T$, number of testcases. Then the testcases follow. 
  - Each testcase contains of a single line of input, one integer $K$. 
  
  -----Output:-----
  For each testcase, output as pattern.
  
  -----Constraints-----
  - $1 \leq T \leq 100$
  - $1 \leq K \leq 100$
  
  -----Sample Input:-----
  2
  2
  4
  
  -----Sample Output:-----
  2
  12
  012
  12
  2
  
  4
  34
  234
  1234
  01234
  1234
  234
  34
  4
  
  -----EXPLANATION:-----
  No need, else pattern can be decode easily.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def pattern_triangle (k : Nat) : List String := sorry
  
  theorem pattern_triangle_symmetry (k : Nat) :
    pattern_triangle k = (pattern_triangle k).reverse := sorry

vc-theorems: |-
  theorem pattern_triangle_length (k : Nat) :
    (pattern_triangle k).length = 2 * k + 1 := sorry
  
  theorem pattern_triangle_first_last (k : Nat) :
    (pattern_triangle k).head! = toString k ∧ 
    (pattern_triangle k).getLast! = toString k := sorry
  
  theorem pattern_triangle_digits (k : Nat) : 
    ∀ s ∈ pattern_triangle k, (∀ c ∈ s.data, c.isDigit) := sorry
  
  theorem pattern_triangle_middle_row (k : Nat) {h : k < (pattern_triangle k).length}: 
    let middle := (pattern_triangle k)[k]'h
    middle.take 1 = "0" ∧ 
    middle.takeRight 1 = toString k := sorry
  
  theorem pattern_triangle_row_lengths_monotone (k : Nat) :
    let rows := pattern_triangle k
    let lens := rows.map String.length
    let mid := lens.length / 2
    (∀ i j, i < j → j < mid → i < lens.length → j < lens.length → lens[i]! ≤ lens[j]!) ∧
    (∀ i j, mid ≤ i → i < j → i < lens.length → j < lens.length → lens[i]! ≥ lens[j]!) := sorry
  
  theorem pattern_triangle_zero :
    pattern_triangle 0 = ["0"] := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

