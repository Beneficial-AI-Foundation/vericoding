vc-description: |-
  /-
  When working with color values it can sometimes be useful to extract the individual red, green, and blue (RGB) component values for a color. Implement a function that meets these requirements:
  
  + Accepts a case-insensitive hexadecimal color string as its parameter (ex. `"#FF9933"` or `"#ff9933"`)
  + Returns an object with the structure `{r: 255, g: 153, b: 51}` where *r*, *g*, and *b* range from 0 through 255
  
  **Note:** your implementation does not need to support the shorthand form of hexadecimal notation (ie `"#FFF"`)
  
  ## Example
  
  ```
  "#FF9933" --> {r: 255, g: 153, b: 51}
  ```
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def hexStringToRGB (s : String) : Option RGB := sorry
  
  theorem hex_string_to_RGB_valid {r g b : Nat} 
    (hr : r ≤ 255) (hg : g ≤ 255) (hb : b ≤ 255) :
    ∀ (hex : String),
    match hexStringToRGB hex with
    | none => True
    | some rgb => 
      rgb.r ≤ 255 ∧ 
      rgb.g ≤ 255 ∧ 
      rgb.b ≤ 255 := sorry

vc-theorems: |-
  theorem hex_string_to_RGB_correct {r g b : Nat}
    (hr : r ≤ 255) (hg : g ≤ 255) (hb : b ≤ 255) :
    ∀ (hex : String),
    match hexStringToRGB hex with
    | none => True
    | some rgb =>
      rgb.r = r ∧
      rgb.g = g ∧
      rgb.b = b := sorry
  
  /-
  info: {'r': 255, 'g': 153, 'b': 51}
  -/
  -- #guard_msgs in
  -- #eval hex_string_to_RGB "#FF9933"
  
  /-
  info: {'r': 190, 'g': 173, 'b': 237}
  -/
  -- #guard_msgs in
  -- #eval hex_string_to_RGB "#beaded"
  
  /-
  info: {'r': 0, 'g': 0, 'b': 0}
  -/
  -- #guard_msgs in
  -- #eval hex_string_to_RGB "#000000"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

