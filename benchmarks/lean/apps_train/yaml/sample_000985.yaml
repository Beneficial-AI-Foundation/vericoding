vc-description: |-
  You have been recently hired as a developer in CodeChef. Your first mission is to implement a feature that will determine the number of submissions that were judged late in a contest.
  There are $N$ submissions, numbered $1$ through $N$. For each valid $i$, the $i$-th submission was submitted at time $S_i$ and judged at time $J_i$ (in minutes). Submitting and judging both take zero time. Please determine how many submissions received their verdicts after a delay of more than $5$ minutes.
  
  -----Input-----
  - The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.
  - The first line of the input contains a single integer $N$.
  - $N$ lines follow. For each valid $i$, the $i$-th of these lines contains two space-separated integers $S_i$ and $J_i$.
  
  -----Output-----
  For each test case, print a single line containing one integer — the number of submissions for which the judging was delayed by more than 5 minutes.
  
  -----Constraints-----
  - $1 \le T \le 100$
  - $1 \le N \le 100$
  - $1 \le S_i \le J_i \le 300$ for each valid $i$
  
  -----Subtasks-----
  Subtask #1 (100 points): original constraints
  
  -----Example Input-----
  1
  5
  1 3
  4 4
  4 10
  1 11
  2 7
  
  -----Example Output-----
  2
  
  -----Explanation-----
  Example case 1: The delays of the respective submissions are $2$ minutes, $0$ minutes, $6$ minutes, $10$ minutes and $5$ minutes. Only submissions $3$ and $4$ are delayed by more than $5$ minutes, hence the answer is $2$.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def count_late_submissions (submissions : List (Nat × Nat)) : Nat := sorry
  
  theorem count_late_submissions_non_negative (submissions : List (Nat × Nat)) :
    count_late_submissions submissions ≥ 0 := sorry

vc-theorems: |-
  theorem count_late_submissions_upper_bound (submissions : List (Nat × Nat)) :
    count_late_submissions submissions ≤ submissions.length := sorry
  
  theorem count_late_submissions_manual_count (submissions : List (Nat × Nat)) :
    count_late_submissions submissions = 
      (submissions.filter (fun p => p.2 - p.1 > 5)).length := sorry
  
  /--
  info: 2
  -/
  #guard_msgs in
  #eval count_late_submissions [(1, 3), (4, 4), (4, 10), (1, 11), (2, 7)]
  
  /--
  info: 0
  -/
  #guard_msgs in
  #eval count_late_submissions [(1, 2), (3, 4), (5, 6)]
  
  /--
  info: 3
  -/
  #guard_msgs in
  #eval count_late_submissions [(1, 7), (2, 8), (3, 9)]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible

