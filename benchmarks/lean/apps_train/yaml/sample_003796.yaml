vc-description: |-
  Roma is programmer and he likes memes about IT,  
  Maxim is chemist and he likes memes about chemistry,  
  Danik is designer and he likes memes about design,  
  and Vlad likes all other memes.
  
  ___
  
  You will be given a meme (string), and your task is to identify its category, and send it to the right receiver: `IT - 'Roma'`, `chemistry - 'Maxim'`, `design - 'Danik'`, or `other - 'Vlad'`.
  
  IT meme has letters `b, u, g`.  
  Chemistry meme has letters `b, o, o, m`.  
  Design meme has letters `e, d, i, t, s`.  
  If there is more than 1 possible answer, the earliest match should be chosen.
  
  **Note:** letters are case-insensetive and should come in the order specified above.
  
  ___
  
  ## Examples:
  
  (Matching letters are surrounded by curly braces for readability.)
  
  ```
  this is programmer meme {b}ecause it has b{ug}
  this is also program{bu}r meme {g}ecause it has needed key word
  this is {ed}s{i}gner meme cause i{t} ha{s} key word
  
  this could {b}e chemistry meme b{u}t our{g}Gey word 'boom' is too late
      instead of
  this could {b}e chemistry meme but {o}ur gey w{o}rd 'boo{m}' is too late
  ```

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def meme_sorting (s : String) : String := sorry
  
  theorem meme_sorting_returns_valid_name (s : String) : 
    meme_sorting s = "Roma" ∨ meme_sorting s = "Maxim" ∨ meme_sorting s = "Danik" ∨ meme_sorting s = "Vlad" := sorry

vc-theorems: |-
  theorem bug_pattern_returns_roma {s : String} (h : ∃ i j k : String.Pos, 
    s.get i = 'b' ∧ 
    s.get j = 'u' ∧ 
    s.get k = 'g' ∧
    i < j ∧ j < k) :
    meme_sorting s = "Roma" := sorry
  
  theorem boom_pattern_returns_maxim {s : String} (h : ∃ i j k l : String.Pos,
    s.get i = 'b' ∧
    s.get j = 'o' ∧ 
    s.get k = 'o' ∧
    s.get l = 'm' ∧
    i < j ∧ j < k ∧ k < l) :
    meme_sorting s = "Maxim" := sorry
  
  theorem edits_pattern_returns_danik {s : String} (h : ∃ i j k l m : String.Pos,
    s.get i = 'e' ∧
    s.get j = 'd' ∧
    s.get k = 'i' ∧
    s.get l = 't' ∧
    s.get m = 's' ∧
    i < j ∧ j < k ∧ k < l ∧ l < m) :
    meme_sorting s = "Danik" := sorry
  
  theorem no_pattern_returns_vlad {s : String} 
    (h1 : ¬∃ i j k : String.Pos, s.get i = 'b' ∧ s.get j = 'u' ∧ s.get k = 'g' ∧ i < j ∧ j < k)
    (h2 : ¬∃ i j k l : String.Pos, s.get i = 'b' ∧ s.get j = 'o' ∧ s.get k = 'o' ∧ s.get l = 'm' ∧ i < j ∧ j < k ∧ k < l)
    (h3 : ¬∃ i j k l m : String.Pos, s.get i = 'e' ∧ s.get j = 'd' ∧ s.get k = 'i' ∧ s.get l = 't' ∧ s.get m = 's' ∧ i < j ∧ j < k ∧ k < l ∧ l < m) :
    meme_sorting s = "Vlad" := sorry
  
  theorem case_insensitive (s1 s2 : String) (h : s1.toLower = s2.toLower) :
    meme_sorting s1 = meme_sorting s2 := sorry
  
  /--
  info: 'Roma'
  -/
  #guard_msgs in
  #eval meme_sorting "This is programmer meme ecause it has bug"
  
  /--
  info: 'Danik'
  -/
  #guard_msgs in
  #eval meme_sorting "This is edsigner meme cause it has key word"
  
  /--
  info: 'Vlad'
  -/
  #guard_msgs in
  #eval meme_sorting "This is meme"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

