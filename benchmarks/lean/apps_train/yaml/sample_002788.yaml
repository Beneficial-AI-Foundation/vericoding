vc-description: |-
  #### Task:
  
  Your job here is to implement a function `factors`, which takes a number `n`, and outputs an array of arrays comprised of two
  parts, `sq` and `cb`. The part `sq` will contain all the numbers that, when squared, yield a number which is a factor of `n`,
  while the `cb` part will contain all the numbers that, when cubed, yield a number which is a factor of `n`.  Discard all `1`s
  from both arrays.
  
  Both `sq` and `cb` should be sorted in ascending order.
  
  #### What it looks like:
  
  ```python
  factors(int) #=> [
    sq (all the numbers that can be squared to give a factor of n) : list,
    cb (all the numbers that can be cubed   to give a factor of n) : list
  ]
  ```
  
  #### Some examples:
  
  Also check out my other creations — [Keep the Order](https://www.codewars.com/kata/keep-the-order), [Naming Files](https://www.codewars.com/kata/naming-files), [Elections: Weighted Average](https://www.codewars.com/kata/elections-weighted-average), [Identify Case](https://www.codewars.com/kata/identify-case), [Split Without Loss](https://www.codewars.com/kata/split-without-loss), [Adding Fractions](https://www.codewars.com/kata/adding-fractions),
  [Random Integers](https://www.codewars.com/kata/random-integers), [Implement String#transpose](https://www.codewars.com/kata/implement-string-number-transpose), [Implement Array#transpose!](https://www.codewars.com/kata/implement-array-number-transpose), [Arrays and Procs #1](https://www.codewars.com/kata/arrays-and-procs-number-1), and [Arrays and Procs #2](https://www.codewars.com/kata/arrays-and-procs-number-2).
  
  If you notice any issues or have any suggestions/comments whatsoever, please don't hesitate to mark an issue or just comment. Thanks!

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def factors (n : Nat) : List Nat × List Nat := sorry
  
  theorem factors_returns_two_lists (n : Nat) (h : n > 0) :
    let (sq, cb) := factors n
    ∀ x ∈ sq, n % x^2 = 0 ∧ 
    ∀ x ∈ cb, n % x^3 = 0 := sorry

vc-theorems: |-
  theorem factors_lists_are_sorted (n : Nat) (h : n > 0) :
    let (sq, cb) := factors n
    (∀ i j, i < j → i < List.length sq → j < List.length sq → 
      sq[i]! ≤ sq[j]!) ∧
    (∀ i j, i < j → i < List.length cb → j < List.length cb → 
      cb[i]! ≤ cb[j]!) := sorry
  
  theorem factors_lists_contain_valid_factors (n : Nat) (h : n > 0) :
    let (sq, cb) := factors n
    (∀ x ∈ sq, x ≥ 2 ∧ n % x^2 = 0) ∧
    (∀ x ∈ cb, x ≥ 2 ∧ n % x^3 = 0) := sorry
  
  theorem cube_factors_subset_of_square_factors (n : Nat) (h : n > 0) :
    let (sq, cb) := factors n
    ∀ x ∈ cb, x ∈ sq := sorry
  
  /--
  info: [[2, 4], [2]]
  -/
  #guard_msgs in
  #eval factors 16
  
  /--
  info: [[3, 9], [3]]
  -/
  #guard_msgs in
  #eval factors 81
  
  /--
  info: [[2, 5, 10], []]
  -/
  #guard_msgs in
  #eval factors 100

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

