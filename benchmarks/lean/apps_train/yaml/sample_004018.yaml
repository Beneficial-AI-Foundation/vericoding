vc-description: |-
  Write a function called "filterEvenLengthWords".
  
  Given an array of strings, "filterEvenLengthWords" returns an array containing only the elements of the given array whose length is an even number.
  
  var output = filterEvenLengthWords(['word', 'words', 'word', 'words']);
  
  console.log(output); // --> ['word', 'word']

vc-preamble: |-
  def evenLength (s : String) : Bool :=
    s.length % 2 = 0

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def filterEvenLengthWords (words : List String) : List String :=
    sorry

vc-theorems: |-
  theorem output_elements_have_even_length (words : List String) :
    ∀ w ∈ filterEvenLengthWords words, evenLength w :=
  sorry
  
  theorem output_is_subset_of_input (words : List String) :
    ∀ w ∈ filterEvenLengthWords words, w ∈ words :=
  sorry
  
  theorem all_even_length_words_included (words : List String) :
    ∀ w ∈ words, evenLength w → w ∈ filterEvenLengthWords words :=
  sorry
  
  theorem maintains_order (words : List String) :
    filterEvenLengthWords words = words.filter evenLength :=
  sorry
  
  /--
  info: ['word', 'word']
  -/
  #guard_msgs in
  #eval filter_even_length_words ["word", "words", "word", "words"]
  
  /--
  info: []
  -/
  #guard_msgs in
  #eval filter_even_length_words ["Hello", "World"]
  
  /--
  info: ['Four']
  -/
  #guard_msgs in
  #eval filter_even_length_words ["One", "Two", "Three", "Four"]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

