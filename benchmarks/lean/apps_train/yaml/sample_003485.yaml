vc-description: |-
  /-
  Given a string of integers, return the number of odd-numbered substrings that can be formed. 
  
  For example, in the case of `"1341"`, they are `1, 1, 3, 13, 41, 341, 1341`, a total of `7` numbers. 
  
  `solve("1341") = 7`.  See test cases for more examples.
  
  Good luck!
  
  If you like substring Katas, please try 
  
  [Longest vowel chain](https://www.codewars.com/kata/59c5f4e9d751df43cf000035)
  
  [Alphabet symmetry](https://www.codewars.com/kata/59d9ff9f7905dfeed50000b0)
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def solve (s : String) : Nat :=
    sorry

vc-theorems: |-
  theorem solve_bounds {s : String} (h : s.length > 0) :
    solve s ≥ 0 ∧ solve s ≤ (s.length * (s.length + 1)) / 2 :=
    sorry
  
  theorem solve_expected {s : String} (h : s.length > 0) :
    solve s = s.data.enum.foldl (fun acc (i, c) => 
      if c.toNat % 2 = 1 then 
        acc + (i + 1)
      else acc) 0 :=
    sorry
  
  theorem solve_even_only {s : String} (h : s.length > 0)
    (h_even : ∀ c ∈ s.data, c.toNat % 2 = 0) :
    solve s = 0 :=
    sorry
  
  theorem solve_odd_only {s : String} (h : s.length > 0)
    (h_odd : ∀ c ∈ s.data, c.toNat % 2 = 1) :
    solve s = (s.length * (s.length + 1)) / 2 :=
    sorry
  
  /-
  info: 7
  -/
  -- #guard_msgs in
  -- #eval solve "1341"
  
  /-
  info: 10
  -/
  -- #guard_msgs in
  -- #eval solve "1357"
  
  /-
  info: 12
  -/
  -- #guard_msgs in
  -- #eval solve "13471"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

