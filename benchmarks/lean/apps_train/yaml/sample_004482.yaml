vc-description: |-
  How many bees are in the beehive?
  
  * bees can be facing UP, DOWN, LEFT, or RIGHT 
  * bees can share parts of other bees
  
  Examples
  
  Ex1
  ```
  bee.bee     
  .e..e..
  .b..eeb
  ```
  *Answer: 5*
  
  Ex2
  ```
  bee.bee     
  e.e.e.e
  eeb.eeb
  ```
  *Answer: 8*
  
  # Notes
  
  * The hive may be empty or null/None/nil/...
  * Python: the hive is passed as a list of lists (not a list of strings)

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def how_many_bees : List (List Char) → Nat :=
    sorry
  
  -- Empty hive contains no bees

vc-theorems: |-
  theorem empty_hive_zero :
    how_many_bees [] = 0 ∧ 
    how_many_bees [[]] = 0 :=
  sorry
  
  -- Bee count is non-negative
  
  theorem bee_count_nonneg (hive : List (List Char)) :
    how_many_bees hive ≥ 0 :=
  sorry
  
  -- Each row contributes to total bee count
  
  theorem row_bee_count (chars : List Char) :
    let single_row : List (List Char) := [['.', 'b', 'e', 'e']]
    how_many_bees [chars] ≤ how_many_bees single_row :=
  sorry
  
  -- Total bee count is composed of patterns
  
  theorem bee_count_composition (hive : List (List Char)) 
    (pattern_count : List Char → Nat) :
    (∀ xs, pattern_count xs = how_many_bees [xs]) →
    how_many_bees hive ≥ 0 :=
  sorry
  
  /--
  info: 5
  -/
  #guard_msgs in
  #eval how_many_bees [["b", "e", "e", ".", "b", "e", "e"], [".", "e", ".", ".", "e", ".", ".", " "], [".", "b", ".", ".", "e", "e", "b"]]
  
  /--
  info: 8
  -/
  #guard_msgs in
  #eval how_many_bees [["b", "e", "e", ".", "b", "e", "e"], ["e", ".", "e", ".", "e", ".", "e"], ["e", "e", "b", ".", "e", "e", "b"]]
  
  /--
  info: 0
  -/
  #guard_msgs in
  #eval how_many_bees None

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

