vc-description: |-
  Don Drumphet lives in a nice neighborhood, but one of his neighbors has started to let his house go.  Don Drumphet wants to build a wall between his house and his neighbor’s, and is trying to get the neighborhood association to pay for it.  He begins to solicit his neighbors to petition to get the association to build the wall.  Unfortunately for Don Drumphet, he cannot read very well, has a very limited attention span, and can only remember two letters from each of his neighbors’ names.  As he collects signatures, he insists that his neighbors keep truncating their names until two letters remain, and he can finally read them.
  
  Your code will show Full name of the neighbor and the truncated version of the name as an array. If the number of the characters in name is less than or equal to two, it will return an array containing only the name as is"

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def who_is_paying (name : String) : List String := sorry
  
  theorem who_is_paying_result_properties (name : String) :
    let result := who_is_paying name
    -- Result has first element equal to full name
    result.head! = name ∧ 
    -- Result length is either 1 or 2
    (result.length = 1 ∨ result.length = 2) ∧
    -- For strings > 2 chars, length is 2 and second element is first 2 chars
    (name.length > 2 → 
      result.length = 2 ∧ 
      result.get! 1 = name.take 2) ∧
    -- For strings ≤ 2 chars, length is 1
    (name.length ≤ 2 → result.length = 1) := sorry

vc-theorems: |-
  theorem who_is_paying_long_strings (name : String) (h : name.length ≥ 3) :
    let result := who_is_paying name
    result.length = 2 ∧ 
    result.get! 1 = name.take 2 := sorry
  
  theorem who_is_paying_short_strings (name : String) (h : name.length ≤ 2) :
    let result := who_is_paying name
    result.length = 1 ∧
    result.head! = name := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

