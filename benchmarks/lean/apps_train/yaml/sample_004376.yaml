vc-description: |-
  /-
  Take an input string and return a string that is made up of the number of occurences of each english letter in the input followed by that letter, sorted alphabetically. The output string shouldn't contain chars missing from input (chars with 0 occurence); leave them out.
  
  An empty string, or one with no letters, should return an empty string.
  
  Notes:
  
  * the input will always be valid;
  * treat letters as **case-insensitive**
  
  ## Examples
  
  ```
  "This is a test sentence."  ==>  "1a1c4e1h2i2n4s4t"
  ""                          ==>  ""
  "555"                       ==>  ""
  ```
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def string_letter_count (s : String) : String :=
    sorry

vc-theorems: |-
  theorem string_letter_count_output_alnum (s : String) : ∀ c ∈ (string_letter_count s).data, 
    c.isAlphanum := by sorry
  
  theorem string_letter_count_unique_letters (s : String) : 
    let letters := (string_letter_count s).data.filter Char.isAlpha
    letters.Nodup := by sorry 
  
  theorem string_letter_count_correct_counts (s : String) (c : Char) : 
    let result := string_letter_count s
    let resultLetters := result.data.filter Char.isAlpha
    c ∈ resultLetters →
    let count := (s.data.filter (fun x => x.toLower = c.toLower)).length
    let numStr := String.mk (result.data.takeWhile Char.isDigit)
    numStr.length > 0 ∧ String.toNat! numStr = count := by sorry
  
  theorem string_letter_count_sorted (s : String) :
    let letters := (string_letter_count s).data.filter Char.isAlpha
    List.Pairwise (· ≤ ·) letters := by sorry
  
  /-
  info: expected1
  -/
  -- #guard_msgs in
  -- #eval string_letter_count "The quick brown fox jumps over the lazy dog."
  
  /-
  info: expected2
  -/
  -- #guard_msgs in
  -- #eval string_letter_count "This is a test sentence."
  
  /-
  info: expected3
  -/
  -- #guard_msgs in
  -- #eval string_letter_count ""

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

