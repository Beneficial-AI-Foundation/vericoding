vc-description: |-
  Given an integer k, return the minimum number of Fibonacci numbers whose sum is equal to k. The same Fibonacci number can be used multiple times.
  The Fibonacci numbers are defined as:
  
  F1 = 1
  F2 = 1
  Fn = Fn-1 + Fn-2 for n > 2.
  
  It is guaranteed that for the given constraints we can always find such Fibonacci numbers that sum up to k.
  
  Example 1:
  Input: k = 7
  Output: 2 
  Explanation: The Fibonacci numbers are: 1, 1, 2, 3, 5, 8, 13, ... 
  For k = 7 we can use 2 + 5 = 7.
  Example 2:
  Input: k = 10
  Output: 2 
  Explanation: For k = 10 we can use 2 + 8 = 10.
  
  Example 3:
  Input: k = 19
  Output: 3 
  Explanation: For k = 19 we can use 1 + 5 + 13 = 19.
  
  Constraints:
  
  1 <= k <= 10^9

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def find_min_fibonacci_numbers (k : Nat) : Nat := sorry
  
  def phi : Float := (1 + Float.sqrt 5) / 2

vc-theorems: |-
  theorem find_min_fibonacci_bounded (k : Nat) (h : k > 0) : 
    find_min_fibonacci_numbers k ≤ k := sorry
  
  theorem find_min_fibonacci_log_bound (k : Nat) (h : k > 0) :
    find_min_fibonacci_numbers k ≤ 2 * (Nat.log2 k + 1) := sorry
  
  theorem find_min_fibonacci_small_numbers (k : Nat) (h1 : k > 0) (h2 : k ≤ 10) :
    find_min_fibonacci_numbers k ≤ 3 := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible

