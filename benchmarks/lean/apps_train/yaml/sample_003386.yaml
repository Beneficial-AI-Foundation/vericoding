vc-description: |-
  In this Kata, we will calculate the **minumum positive number that is not a possible sum** from a list of positive integers. 
  
  ```
  solve([1,2,8,7]) = 4 => we can get 1, 2, 3 (from 1+2), but we cannot get 4. 4 is the minimum number not possible from the list. 
  solve([4,1,2,3,12]) = 11. We can get 1, 2, 3, 4, 4+1=5, 4+2=6,4+3=7,4+3+1=8,4+3+2=9,4+3+2+1=10. But not 11. 
  solve([2,3,2,3,4,2,12,3]) = 1. We cannot get 1.
  ```
  More examples in test cases. 
  
  Good luck!

vc-preamble: |-
  def solve (nums : List Nat) : Nat := sorry
  
  theorem solve_returns_positive (nums : List Nat)
    (h : ∀ x ∈ nums, x > 0 ∧ x ≤ 1000)
    : solve nums > 0 := sorry
  
  def sums (l : List Nat) : List Nat := sorry
  
  def findMin (s : List Nat) : Nat := sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def sortList (l : List Nat) : List Nat := sorry
  
  theorem solve_order_invariant (nums : List Nat)
    (h : ∀ x ∈ nums, x > 0 ∧ x ≤ 100)
    : solve nums = solve (sortList nums) := sorry

vc-theorems: |-
  theorem solve_is_min_missing_sum {nums : List Nat} 
    (h : ∀ x ∈ nums, x > 0 ∧ x ≤ 10)
    (h2 : nums.length ≤ 5)
    : solve nums = findMin (sums nums) := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

