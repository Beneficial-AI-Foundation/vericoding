vc-description: |-
  One day, Chef found a cube which has each of its sides painted in some color out of black, blue, red, green, yellow and orange.
  Now he asks you to check if he can choose three sides such that they are pairwise adjacent and painted in the same color.
  
  -----Input-----
  - The first line of the input contains an integer T denoting the number of test cases.
  - A single line of each test case contains six words denoting the colors of painted sides in the order: front, back, left, right, top and bottom, respectively.
  
  -----Output-----
  For each test case, output a single line containing the word "YES" or "NO" (without quotes) corresponding to the answer of the problem.
  
  -----Constraints-----
  - 1 ≤ T ≤  50000 
  - Each color will be from the list {"black", "blue", "red", "green", "yellow", "orange"}
  
  -----Subtasks-----
  Subtask 1: (25 points)
  - 1 ≤ T ≤  12000 
  - For each test case there will be at most three different colors
  
  Subtask 2: (75 points)
  - Original constraints
  
  -----Example-----
  Input:
  2
  blue yellow green orange black green
  green yellow green orange black green
  
  Output:
  NO
  YES
  
  -----Explanation-----
  
  Example case 1.
  There are no three sides with the same color.
  
  Example case 2.
  In this test case, the front, bottom and left sides are green (see picture).

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def check_cube_sides {α : Type} [DecidableEq α] (colors : List α) : String := sorry
  
  theorem check_cube_sides_returns_valid_result {α : Type} [DecidableEq α] [Inhabited α]
    (colors : List α) (h : colors.length = 6) :
    check_cube_sides colors = "YES" ∨ check_cube_sides colors = "NO" := sorry

vc-theorems: |-
  theorem check_cube_sides_yes_has_adjacent_set {α : Type} [DecidableEq α] [Inhabited α]
    (colors : List α) (h : colors.length = 6) :
    check_cube_sides colors = "YES" →
    ∃ i j k, i ≠ j ∧ j ≠ k ∧ i ≠ k ∧ 
            i < colors.length ∧ j < colors.length ∧ k < colors.length ∧
            colors[i]! = colors[j]! ∧ colors[j]! = colors[k]! := sorry
  
  theorem check_cube_sides_no_has_no_adjacent_set {α : Type} [DecidableEq α] [Inhabited α]
    (colors : List α) (h : colors.length = 6) :
    check_cube_sides colors = "NO" →
    ∀ i j k, i ≠ j → j ≠ k → i ≠ k →
            i < colors.length → j < colors.length → k < colors.length →
            ¬(colors[i]! = colors[j]! ∧ colors[j]! = colors[k]!) := sorry
  
  theorem all_same_color_returns_yes {α : Type} [DecidableEq α] [Inhabited α]
    (colors : List α) (h : colors.length = 6)
    (h_same : ∀ i j, i < colors.length → j < colors.length → colors[i]! = colors[j]!) :
    check_cube_sides colors = "YES" := sorry
  
  /--
  info: 'NO'
  -/
  #guard_msgs in
  #eval check_cube_sides "blue yellow green orange black green".split()
  
  /--
  info: 'YES'
  -/
  #guard_msgs in
  #eval check_cube_sides "green yellow green orange black green".split()
  
  /--
  info: 'NO'
  -/
  #guard_msgs in
  #eval check_cube_sides "red red red blue yellow orange".split()

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

