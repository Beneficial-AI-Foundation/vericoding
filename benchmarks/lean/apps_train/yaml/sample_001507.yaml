vc-description: |-
  /-
  "I'm a fan of anything that tries to replace actual human contact." - Sheldon.
  After years of hard work, Sheldon was finally able to develop a formula which would diminish the real human contact.  
  He found k$k$ integers n1,n2...nk$n_1,n_2...n_k$ . Also he found that if he could minimize the value of m$m$ such that  ∑ki=1$\sum_{i=1}^k$n$n$i$i$C$C$m$m$i$i$ is even, where m$m$ = ∑ki=1$\sum_{i=1}^k$mi$m_i$, he would finish the real human contact.  
  Since Sheldon is busy choosing between PS-4 and XBOX-ONE, he want you to help him to calculate the minimum value of m$m$. 
  
  -----Input:-----
  - The first line of the input contains a single integer T$T$ denoting the number of test cases. The 
  description of T$T$ test cases follows.
  - The first line of each test case contains a single integer k$k$.
  - Next line contains k space separated integers n1,n2...nk$n_1,n_2...n_k$ .
  
  -----Output:-----
  For each test case output the minimum value of m for which ∑ki=1$\sum_{i=1}^k$n$n$i$i$C$C$m$m$i$i$ is even, where  m$m$=m1$m_1$+m2$m_2$+. . . mk$m_k$   and  0$0$ <= mi$m_i$<= ni$n_i$ .  If no such answer exists print -1.
  
  -----Constraints-----
  - 1≤T≤1000$1 \leq T \leq 1000$
  - 1≤k≤1000$1 \leq k \leq 1000$
  - 1≤ni≤10$1 \leq n_i \leq 10$18$18$
  
  -----Sample Input:-----
  1
  1
  5
  
  -----Sample Output:-----
  2
  
  -----EXPLANATION:-----
  5$5$C$C$2$2$ = 10 which is even and m is minimum.
  -/

vc-preamble: |-
  def find_min_m (n : Nat) (nums : List Nat) : Int :=
  sorry
  
  def hasAllOnes (n : Nat) : Bool :=
  sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def hasPowerOfTwo (n : Int) (pos : Nat) : Bool :=
  sorry

vc-theorems: |-
  theorem all_ones_returns_negative_one (nums : List Nat) :
    (∃ n ∈ nums, hasAllOnes n = true) →
    find_min_m 1 nums = -1 :=
  sorry
  
  theorem result_nonnegative_when_valid (nums : List Nat) :
    (¬∃ n ∈ nums, hasAllOnes n = true) →
    find_min_m 1 nums ≥ 0 :=
  sorry
  
  theorem result_is_power_of_two_sum (nums : List Nat) (i : Nat) :
    let result := find_min_m 1 nums
    result ≠ -1 →
    hasPowerOfTwo result i = true →
    ∃ k, result = 2^k :=
  sorry
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval find_min_m 1 [5]
  
  /-
  info: -1
  -/
  -- #guard_msgs in
  -- #eval find_min_m 1 [7]
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval find_min_m 1 [10]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

