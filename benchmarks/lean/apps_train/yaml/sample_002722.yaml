vc-description: |-
  Two strings ```a``` and b are called isomorphic if there is a one to one mapping possible for every character of ```a``` to every character of ```b```. And all occurrences of every character in ```a``` map to same character in ```b```.
  
  ## Task
  
  In this kata you will create a function that return ```True``` if two given strings are isomorphic to each other, and ```False``` otherwise. Remember that order is important.
  
  Your solution must be able to handle words with more than 10 characters.
  
  ## Example
  True:
  ```
  CBAABC DEFFED
  XXX YYY
  RAMBUNCTIOUSLY THERMODYNAMICS
  ```
  
  False:
  ```
  AB CC
  XXY XYY
  ABAB CD
  ```

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def isomorph (s1 s2 : String) : Bool :=
    sorry

vc-theorems: |-
  theorem string_isomorphic_to_itself {s : String} (h : s.length > 0) :
    isomorph s s = true :=
  sorry
  
  theorem different_length_strings_not_isomorphic {s1 s2 : String} 
    (h1 : s1.length > 0) (h2 : s2.length > 0) (h3 : s1.length ≠ s2.length) :
    isomorph s1 s2 = false :=
  sorry
  
  theorem symmetrical_property {s1 : String} (h : s1.length > 0) :
    ∀ s2, isomorph s1 s2 = isomorph s2 s1 :=
  sorry
  
  theorem preserves_pattern {s mapped : String} (h1 : s.length > 0) (h2 : s.length ≤ 100) :
    mapped.length = s.length →
    (∀ (i j : Fin s.length), s.data[i]! = s.data[j]! ↔ mapped.data[i]! = mapped.data[j]!) →
    isomorph s mapped = true :=
  sorry
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval isomorph "ESTATE" "DUELED"
  
  /--
  info: False
  -/
  #guard_msgs in
  #eval isomorph "AB" "CC"
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval isomorph "RAMBUNCTIOUSLY" "THERMODYNAMICS"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

