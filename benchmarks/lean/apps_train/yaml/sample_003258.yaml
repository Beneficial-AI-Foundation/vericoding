vc-description: |-
  # A wolf in sheep's clothing
  
  Wolves have been reintroduced to Great Britain. You are a sheep farmer, and are now plagued by wolves which pretend to be sheep. Fortunately, you are good at spotting them. 
  
  Warn the sheep in front of the wolf that it is about to be eaten. Remember that you are standing **at the front of the queue** which is at the end of the array:
  
  ```
  [sheep, sheep, sheep, sheep, sheep, wolf, sheep, sheep]      (YOU ARE HERE AT THE FRONT OF THE QUEUE)
     7      6      5      4      3            2      1
  ```
  
  If the wolf is the closest animal to you, return `"Pls go away and stop eating my sheep"`. Otherwise, return `"Oi! Sheep number N! You are about to be eaten by a wolf!"` where `N` is the sheep's position in the queue.
  
  **Note:** there will always be exactly one wolf in the array.
  
  ## Examples
  
  ```python
  warn_the_sheep(["sheep", "sheep", "sheep", "wolf", "sheep"]) == 'Oi! Sheep number 1! You are about to be eaten by a wolf!'
  
  warn_the_sheep(['sheep', 'sheep', 'wolf']) == 'Pls go away and stop eating my sheep'
  ```

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def warn_the_sheep (queue : List String) : String := sorry
  
  theorem wolf_at_end_gives_warning_message {queue : List String} 
    (h : queue = queue.dropLast ++ [("wolf" : String)]) :
    warn_the_sheep queue = "Pls go away and stop eating my sheep" := sorry

vc-theorems: |-
  theorem wolf_with_sheep_after_gives_warning {queue : List String}
    (h1 : ∃ i, queue.get? i = some "wolf")
    (h2 : ∃ n, n > 0 ∧ queue.length = (queue.indexOf "wolf" + 1 + n)) :
    let sheep_after := queue.length - queue.indexOf "wolf" - 1
    warn_the_sheep queue = s!"Oi! Sheep number {sheep_after}! You are about to be eaten by a wolf!" := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

