vc-description: |-
  /-
  On an 8 x 8 chessboard, there is one white rook.  There also may be empty squares, white bishops, and black pawns.  These are given as characters 'R', '.', 'B', and 'p' respectively. Uppercase characters represent white pieces, and lowercase characters represent black pieces.
  The rook moves as in the rules of Chess: it chooses one of four cardinal directions (north, east, west, and south), then moves in that direction until it chooses to stop, reaches the edge of the board, or captures an opposite colored pawn by moving to the same square it occupies.  Also, rooks cannot move into the same square as other friendly bishops.
  Return the number of pawns the rook can capture in one move.
  
  Example 1:
  
  Input: [[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","R",".",".",".","p"],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
  Output: 3
  Explanation: 
  In this example the rook is able to capture all the pawns.
  
  Example 2:
  
  Input: [[".",".",".",".",".",".",".","."],[".","p","p","p","p","p",".","."],[".","p","p","B","p","p",".","."],[".","p","B","R","B","p",".","."],[".","p","p","B","p","p",".","."],[".","p","p","p","p","p",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
  Output: 0
  Explanation: 
  Bishops are blocking the rook to capture any pawn.
  
  Example 3:
  
  Input: [[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","p",".",".",".","."],["p","p",".","R",".","p","B","."],[".",".",".",".",".",".",".","."],[".",".",".","B",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."]]
  Output: 3
  Explanation: 
  The rook can capture the pawns at positions b5, d6 and f5.
  
  Note:
  
  board.length == board[i].length == 8
  board[i][j] is either 'R', '.', 'B', or 'p'
  There is exactly one cell with board[i][j] == 'R'
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def num_rook_captures (board: Board) : Nat :=
    sorry

vc-theorems: |-
  theorem rook_captures_bounds {b : List (List Char)} : 
    b.length = 8 ∧ 
    (∀ r ∈ b, r.length = 8) →
    let board := Board.mk b
    let captures := num_rook_captures board 
    0 ≤ captures ∧ captures ≤ 4 := 
    sorry
  
  theorem rook_presence {b : List (List Char)} :
    b.length = 8 ∧
    (∀ r ∈ b, r.length = 8) →
    let board := Board.mk b
    ((b.map (fun row => row.filter (· = 'R'))).join).length = 1 :=
    sorry
  
  theorem blocked_by_bishop {b : List (List Char)} :
    b.length = 8 ∧
    (∀ r ∈ b, r.length = 8) →
    let board := Board.mk b
    let blocked_pawns := -- count of pawns blocked by bishops
      0 -- placeholder
    num_rook_captures board ≤ 4 - blocked_pawns :=
    sorry
  
  /-
  info: 3
  -/
  -- #guard_msgs in
  -- #eval num_rook_captures [[".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", "p", ".", ".", ".", "."], [".", ".", ".", "R", ".", ".", ".", "p"], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", "p", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."]]
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval num_rook_captures [[".", ".", ".", ".", ".", ".", ".", "."], [".", "p", "p", "p", "p", "p", ".", "."], [".", "p", "p", "B", "p", "p", ".", "."], [".", "p", "B", "R", "B", "p", ".", "."], [".", "p", "p", "B", "p", "p", ".", "."], [".", "p", "p", "p", "p", "p", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."]]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

