vc-description: |-
  Chef has many friends, but his best friend is Hemant. They both love to watch anime.
  In fact, their weekends are meant for that only. Also, Hemant is highly into games, of which Chef is unaware. Hemant once gave a game to Chef and asked him to determine the winner of the game. Since the Chef is busy, and you are also his friend, he asked you to help him.
  The Game is played between two players, $A$ and $B$. There are $N$ marbles. $A$ and $B$ plays alternately, and $A$ goes first. Each player can choose $1$ marble or $even$ number of marbles in his turn. The player who is not able to choose any marbles loses the game.
  
  -----Input:-----
  - The first line consists of a single integer $T$ denoting the number of test cases.
  - The Second line contains an integers $N$, denoting the number of marbles.
  
  -----Output:-----
  For each test case, print the name of the player who loses the game.
  
  -----Constraints-----
  - $1 \leq T \leq 10^5$
  - $1 \leq N \leq 10^9$
  
  -----Sample Input:-----
  3
  1 
  3
  7 
  
  -----Sample Output:-----
  B
  A
  B

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def solve_marbles_game (n: Int) : String := sorry
  
  theorem solve_marbles_game_returns_valid_player (n: Int) :
    solve_marbles_game n = "A" ∨ solve_marbles_game n = "B" := sorry

vc-theorems: |-
  theorem large_n_returns_b (n: Int) (h: n ≥ 4) :
    solve_marbles_game n = "B" := sorry
  
  theorem small_n_returns_b (n: Int) (h: n ≤ 2) :
    solve_marbles_game n = "B" := sorry
  
  theorem three_marbles_returns_a :
    solve_marbles_game 3 = "A" := sorry
  
  /--
  info: 'B'
  -/
  #guard_msgs in
  #eval solve_marbles_game 1
  
  /--
  info: 'A'
  -/
  #guard_msgs in
  #eval solve_marbles_game 3
  
  /--
  info: 'B'
  -/
  #guard_msgs in
  #eval solve_marbles_game 7

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

