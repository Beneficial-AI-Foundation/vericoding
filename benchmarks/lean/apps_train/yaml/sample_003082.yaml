vc-description: |-
  It's been a tough week at work and you are stuggling to get out of bed in the morning.
  
  While waiting at the bus stop you realise that if you could time your arrival to the nearest minute you could get valuable extra minutes in bed.
  
  There is a bus that goes to your office every 15 minute, the first bus is at `06:00`, and the last bus is at `00:00`.
  
  Given that it takes 5 minutes to walk from your front door to the bus stop, implement a function that when given the curent time will tell you much time is left, before you must leave to catch the next bus.
  
  ## Examples
  
  ```
  "05:00"  =>  55
  "10:00"  =>  10
  "12:10"  =>  0
  "12:11"  =>  14
  ```
  
  ### Notes
  
  1. Return the number of minutes till the next bus
  2. Input will be formatted as `HH:MM` (24-hour clock)
  3. The input time might be after the buses have stopped running, i.e. after `00:00`

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def busTimer (t : Time) : Nat := sorry
  
  theorem bus_timer_range_bounds (t : Time) :
    0 ≤ busTimer t ∧ busTimer t ≤ 600 := sorry

vc-theorems: |-
  theorem exact_hours_normal_hours (t : Time)
    (h : 6 ≤ t.hours ∧ t.hours < 23) (m : t.minutes = 0) :
    busTimer t ≤ 10 := sorry
  
  theorem normal_schedule (t : Time)
    (h : 6 ≤ t.hours ∧ t.hours ≤ 22) :
    busTimer t ≤ 10 := sorry
  
  theorem early_morning_bound (t : Time)
    (h : t.hours ≤ 5) (m : t.minutes = 30) :
    busTimer t ≥ (5 - t.hours) * 60 - 35 := sorry
  
  theorem specific_late_night_values (t : Time) :
    (t.hours = 23 ∧ t.minutes = 56 → busTimer t = 359) ∧
    (t.hours = 23 ∧ t.minutes = 59 → busTimer t = 356) := sorry
  
  /--
  info: 10
  -/
  #guard_msgs in
  #eval bus_timer "10:00"
  
  /--
  info: 45
  -/
  #guard_msgs in
  #eval bus_timer "05:10"
  
  /--
  info: 358
  -/
  #guard_msgs in
  #eval bus_timer "23:57"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

