vc-description: |-
  Given a list of strings, you need to find the longest uncommon subsequence among them. The longest uncommon subsequence is defined as the longest subsequence of one of these strings and this subsequence should not be any subsequence of the other strings.
  
  A subsequence is a sequence that can be derived from one sequence by deleting some characters without changing the order of the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string.
  
  The input will be a list of strings, and the output needs to be the length of the longest uncommon subsequence. If the longest uncommon subsequence doesn't exist, return -1.
  
  Example 1:
  
  Input: "aba", "cdc", "eae"
  Output: 3
  
  Note:
  
  All the given strings' lengths will not exceed 10.
  The length of the given list will be in the range of [2, 50].

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def find_longest_uncommon_subseq (strs : List String) : Int := sorry
  
  theorem find_longest_uncommon_subseq_output_type_and_range
    (strs : List String)
    (h : strs.length > 0) :
    let result := find_longest_uncommon_subseq strs
    result = -1 ∨ result ≥ 0 := sorry

vc-theorems: |-
  theorem find_longest_uncommon_subseq_bounded_by_max_length
    (strs : List String)
    (h : strs.length > 0) :
    find_longest_uncommon_subseq strs ≤ (strs.map String.length).maximum?.getD 0 := sorry
  
  theorem find_longest_uncommon_subseq_single_string
    (s : String)
    (strs : List String)
    (h : strs = [s]) :
    find_longest_uncommon_subseq strs = s.length := sorry
  
  /--
  info: 3
  -/
  #guard_msgs in
  #eval find_longest_uncommon_subseq ["aba", "cdc", "eae"]
  
  /--
  info: -1
  -/
  #guard_msgs in
  #eval find_longest_uncommon_subseq ["aaa", "aaa", "aa"]
  
  /--
  info: -1
  -/
  #guard_msgs in
  #eval find_longest_uncommon_subseq ["aabb", "aabb", "ab"]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible

