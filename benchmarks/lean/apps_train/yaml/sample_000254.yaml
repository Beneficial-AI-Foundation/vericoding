vc-description: |-
  Given an array of integers nums and an integer threshold, we will choose a positive integer divisor and divide all the array by it and sum the result of the division. Find the smallest divisor such that the result mentioned above is less than or equal to threshold.
  Each result of division is rounded to the nearest integer greater than or equal to that element. (For example: 7/3 = 3 and 10/2 = 5).
  It is guaranteed that there will be an answer.
  
  Example 1:
  Input: nums = [1,2,5,9], threshold = 6
  Output: 5
  Explanation: We can get a sum to 17 (1+2+5+9) if the divisor is 1. 
  If the divisor is 4 we can get a sum to 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2). 
  
  Example 2:
  Input: nums = [2,3,5,7,11], threshold = 11
  Output: 3
  
  Example 3:
  Input: nums = [19], threshold = 5
  Output: 4
  
  Constraints:
  
  1 <= nums.length <= 5 * 10^4
  1 <= nums[i] <= 10^6
  nums.length <= threshold <= 10^6

vc-preamble: |-
  def find_smallest_divisor (nums : List Nat) (threshold : Nat) : Nat :=
    sorry
  
  def ceil_div (a b : Nat) : Nat :=
    (a + b - 1) / b

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def list_max (l : List Nat) : Nat :=
    match l with
    | [] => 0
    | (x::xs) => List.foldl max x xs

vc-theorems: |-
  theorem single_element_case {nums : List Nat} {threshold : Nat} 
    (h1 : nums.length = 1) 
    (h2 : threshold > 0)
    (h3 : ∀ x ∈ nums, 1 ≤ x ∧ x ≤ 1000000)
    (h4 : threshold ≤ 1000000) :
    find_smallest_divisor nums threshold = ceil_div nums[0] threshold :=
  sorry
  
  theorem result_bounded {nums : List Nat} {threshold : Nat}
    (h1 : nums.length > 0)
    (h2 : nums.length ≤ 10)
    (h3 : ∀ x ∈ nums, 1 ≤ x ∧ x ≤ 100)
    (h4 : 1 ≤ threshold ∧ threshold ≤ 100) :
    1 ≤ find_smallest_divisor nums threshold ∧ 
    find_smallest_divisor nums threshold ≤ list_max nums :=
  sorry
  
  /--
  info: 5
  -/
  #guard_msgs in
  #eval find_smallest_divisor [1, 2, 5, 9] 6
  
  /--
  info: 3
  -/
  #guard_msgs in
  #eval find_smallest_divisor [2, 3, 5, 7, 11] 11
  
  /--
  info: 4
  -/
  #guard_msgs in
  #eval find_smallest_divisor [19] 5

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

