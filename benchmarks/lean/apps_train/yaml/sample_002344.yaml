vc-description: |-
  Given an integer, write an algorithm to convert it to hexadecimal. For negative integer, two’s complement method is used.
  
  Note:
  
  All letters in hexadecimal (a-f) must be in lowercase.
  The hexadecimal string must not contain extra leading 0s. If the number is zero, it is represented by a single zero character '0'; otherwise, the first character in the hexadecimal string will not be the zero character.
  The given number is guaranteed to fit within the range of a 32-bit signed integer.
  You must not use any method provided by the library which converts/formats the number to hex directly.
  
  Example 1:
  
  Input:
  26
  
  Output:
  "1a"
  
  Example 2:
  
  Input:
  -1
  
  Output:
  "ffffffff"

vc-preamble: |-
  def to_hex (n : Int) : String := sorry
  
  /-- Helper function to convert hex string to number (just for theorem statements) -/

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def hexToNat (s : String) : Nat := sorry
  
  theorem to_hex_positive_integers (n : Nat) (h : n < 2^32) : 
    let result := to_hex n
    (hexToNat result = n) ∧ 
    (result.length ≤ 8) ∧
    (∀ c ∈ result.data, c ∈ ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']) := 
  sorry

vc-theorems: |-
  theorem to_hex_negative_integers (n : Int) (h1 : -(2^31) ≤ n) (h2 : n < 0) :
    let result := to_hex n
    (result.length = 8) ∧
    (∀ c ∈ result.data, c ∈ ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']) ∧
    (let value := hexToNat result
     if value ≥ 2^31 then
       value - 2^32 = n
     else
       value = n) :=
  sorry
  
  theorem to_hex_zero :
    to_hex 0 = "0" := sorry
  
  theorem to_hex_length (n : Int) :
    let result := to_hex n
    1 ≤ result.length ∧ result.length ≤ 8 := sorry
  
  /--
  info: '1a'
  -/
  #guard_msgs in
  #eval to_hex 26
  
  /--
  info: 'ffffffff'
  -/
  #guard_msgs in
  #eval to_hex -1
  
  /--
  info: '0'
  -/
  #guard_msgs in
  #eval to_hex 0

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

