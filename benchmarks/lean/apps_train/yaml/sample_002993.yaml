vc-description: |-
  /-
  # Story
  
  John found a path to a treasure, and while searching for its precise location he wrote a list of directions using symbols `"^"`, `"v"`, `"<"`, `">"` which mean `north`, `east`, `west`, and `east` accordingly. On his way John had to try many different paths, sometimes walking in circles, and even missing the treasure completely before finally noticing it.
  
  ___
  
  ## Task
  
  Simplify the list of directions written by John by eliminating any loops.
  
  **Note**: a loop is any sublist of directions which leads John to the coordinate he had already visited.
  
  ___
  
  ## Examples
  
  ```
  simplify("<>>")        ==  ">"
  simplify("<^^>v<^^^")  ==  "<^^^^"
  simplify("")           ==  ""
  simplify("^< > v
      ^   v
  > > C > D > >
  ^   ^   v
  ^ < B < <
      ^
      A
  ```
  
  John visits points `A -> B -> C -> D -> B -> C -> D`, realizes that `-> C -> D -> B` steps are meaningless and removes them, getting this path: `A -> B -> (*removed*) -> C -> D`.
  
  ```
      ∙ ∙ ∙
      ∙   ∙
  > > C > D > >
  ^   ∙   ∙
  ^ < B ∙ ∙
      ^
      A
  ```
  
  Following the final, simplified route John visits points `C` and `D`, but for the first time, not the second (because we ignore the steps made on a hypothetical path), and he doesn't need to alter the directions list anymore.
  -/

vc-preamble: |-
  def dirList := List Dir
  
  def getEndpoint (path : dirList) : Int × Int := sorry
  
  def simplify (path : dirList) : dirList := sorry 
  
  theorem simplify_same_endpoint (path : dirList) : 
    getEndpoint path = getEndpoint (simplify path) := sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def isValidDir (d : Dir) : Bool := sorry
  
  theorem simplify_valid_chars (path : dirList) (d : Dir) :
    List.elem d (simplify path) → isValidDir d := sorry

vc-theorems: |-
  theorem simplify_shorter (path : dirList) :
    (simplify path).length ≤ path.length := sorry
  
  theorem simplify_empty (path : dirList) :
    path = [] → simplify path = [] := sorry
  
  theorem simplify_idempotent (path : dirList) :
    simplify (simplify path) = simplify path := sorry
  
  /-
  info: '>'
  -/
  -- #guard_msgs in
  -- #eval simplify "<>>"
  
  /-
  info: '<^^^^'
  -/
  -- #guard_msgs in
  -- #eval simplify "<^^>v<^^^"
  
  /-
  info: ''
  -/
  -- #guard_msgs in
  -- #eval simplify ""

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

