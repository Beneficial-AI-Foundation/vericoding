vc-description: |-
  Motu and Patlu are playing with a Magical Ball. Patlu find some interesting pattern in the motion of the ball that ball always bounce back from the ground after travelling a linear distance whose value is some power of $2$. Patlu gave Motu total distance $D$ travelled by the ball and ask him to calculate the minimum number of bounces that the ball makes before coming to rest.
  
  -----Input:-----
  - First line will contain $T$, number of testcases. Then the testcases follow. 
  - Each testcase contains of a single line of input, single integers $D$.
  - Note : Power of $2$ must be a non-negative integer. 
  
  -----Output:-----
  For each testcase, output in a single line answer, the minimum number of bounces the ball makes before coming to rest.
  
  -----Constraints-----
  - $1 \leq T \leq 10^5$
  - $1$ $\leq$ $M$< $10$^18
  
  -----Sample Input:-----
  1
  13 
  
  -----Sample Output:-----
  2
  
  -----EXPLANATION:-----

vc-preamble: |-
  def count_ball_bounces (n: Nat) : Nat := sorry
  
  def isPowerOfTwo (n: Nat) : Bool := sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def allOnesInBinary (n: Nat) : Bool := sorry 
  
  def countOnesInBinary (n: Nat) : Nat := sorry

vc-theorems: |-
  theorem non_negative_result (distance : Nat) :
    count_ball_bounces distance â‰¥ 0 := sorry
  
  /--
  info: 2
  -/
  #guard_msgs in
  #eval count_ball_bounces 13
  
  /--
  info: 2
  -/
  #guard_msgs in
  #eval count_ball_bounces 7
  
  /--
  info: 0
  -/
  #guard_msgs in
  #eval count_ball_bounces 16

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible

