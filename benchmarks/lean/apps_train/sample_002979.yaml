vc-description: |-
  ### Vaccinations for children under 5
  You have been put in charge of administrating vaccinations for children in your local area. Write a function that will generate a list of vaccines for each child presented for vaccination, based on the child's age and vaccination history, and the month of the year.
  #### The function takes three parameters: age, status and month
  - The parameter 'age' will be given in weeks up to 16 weeks, and thereafter in months. You can assume that children presented will be scheduled for vaccination (eg '16 weeks', '12 months' etc).
  - The parameter 'status' indicates if the child has missed a scheduled vaccination, and the argument will be a string that says 'up-to-date', or a scheduled stage (eg '8 weeks') that has been missed, in which case you need to add any missing shots to the list. Only one missed vaccination stage will be passed in per function call.
  - If the month is 'september', 'october' or 'november' add 'offer fluVaccine' to the list.
  - Make sure there are no duplicates in the returned list, and sort it alphabetically.

  #### Example input and output
  ~~~~
  input     ('12 weeks', 'up-to-date', 'december')
  output    ['fiveInOne', 'rotavirus']

  input     ('12 months', '16 weeks', 'june')
  output     ['fiveInOne', 'hibMenC', 'measlesMumpsRubella', 'meningitisB', 'pneumococcal']

  input     ('40 months', '12 months', 'october') 
  output    ['hibMenC', 'measlesMumpsRubella', 'meningitisB', 'offer fluVaccine', 'preSchoolBooster']
  ~~~~

  #### To save you typing it up, here is the vaccinations list
  ~~~~
  fiveInOne : ['8 weeks', '12 weeks', '16 weeks'],
  //Protects against: diphtheria, tetanus, whooping cough, polio and Hib (Haemophilus influenzae type b)
  pneumococcal : ['8 weeks', '16 weeks'],
  //Protects against: some types of pneumococcal infection
  rotavirus : ['8 weeks', '12 weeks'],
  //Protects against: rotavirus infection, a common cause of childhood diarrhoea and sickness
  meningitisB : ['8 weeks', '16 weeks', '12 months'],
  //Protects against: meningitis caused by meningococcal type B bacteria
  hibMenC : ['12 months'],
  //Protects against: Haemophilus influenzae type b (Hib), meningitis caused by meningococcal group C bacteria    
  measlesMumpsRubella : ['12 months', '40 months'],
  //Protects against: measles, mumps and rubella
  fluVaccine : ['september','october','november'],
  //Given at: annually in Sept/Oct
  preSchoolBooster : ['40 months']
  //Protects against: diphtheria, tetanus, whooping cough and polio
  ~~~~
vc-preamble: |
  import Imports.AllImports

  def TOME : List (String × List Vaccine) :=
    sorry
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def vaccine_list (age status month : String) : List Vaccine :=
    sorry
vc-theorems: |-
  theorem vaccine_list_ordered (age status month : String) :
    let l := vaccine_list age status month
    ∀ i v₁ v₂, i < l.length - 1 → 
    v₁ = l[i]! → v₂ = l[i+1]! → 
    v₁ ≤ v₂ := by
    sorry


  theorem vaccine_list_unique (age status month : String) :
    let l := vaccine_list age status month
    ∀ i j, i < l.length → j < l.length → i ≠ j →
    l[i]! ≠ l[j]! := by
    sorry


  theorem vaccine_list_subset_of_valid_vaccines (age status month : String) (v : Vaccine) :
    v ∈ vaccine_list age status month →
    ∃ p : String × List Vaccine, p ∈ TOME ∧ v ∈ p.2 := by
    sorry


  theorem vaccine_list_contains_required (age status month : String) :
    ∀ k : String, k ∈ [age, status, month] →
    ∀ p : String × List Vaccine, p ∈ TOME →
    ∀ v : Vaccine, v ∈ p.2 → v ∈ vaccine_list age status month := by
    sorry


  theorem vaccine_list_invalid_empty (age status month : String) :
    (∀ p : String × List Vaccine, p ∈ TOME → p.1 ≠ age ∧ p.1 ≠ status ∧ p.1 ≠ month) →
    vaccine_list age status month = [] := by
    sorry
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded
