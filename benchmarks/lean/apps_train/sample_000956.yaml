vc-description: |-
  This problem is about sequences of positive integers $a_1,a_2,...,a_N$. A subsequence of a sequence is anything obtained by dropping some of the elements. For example, $3,7,11,3$ is a subsequence of $6,3,11,5,7,4,3,11,5,3$ , but $3,3,7$ is not a subsequence of $6,3,11,5,7,4,3,11,5,3$ .
  A fully dividing sequence is a sequence $a_1,a_2,...,a_N$ where $a_i$ divides $a_j$ whenever $i < j$. For example, $3,15,60,720$ is a fully dividing sequence.
  Given a sequence of integers your aim is to find the length of the longest fully dividing subsequence of this sequence.
  Consider the sequence $2,3,7,8,14,39,145,76,320$
  It has a fully dividing sequence of length $3$, namely $2,8,320$, but none of length $4$ or greater.
  Consider the sequence $2,11,16,12,36,60,71,17,29,144,288,129,432,993$.
  It has two fully dividing subsequences of length $5$,
  - $2,11,16,12,36,60,71,17,29,144,288,129,432,993$ and
  - $2,11,16,12,36,60,71,17,29,144,288,129,432,993$
  and none of length $6$ or greater.

  -----Input:-----
  The first line of input contains a single positive integer $N$ indicating the length of the input sequence. Lines $2,...,N+1$ contain one integer each. The integer on line $i+1$ is $a_i$.

  -----Output:-----
  Your output should consist of a single integer indicating the length of the longest fully dividing subsequence of the input sequence.

  -----Constraints:-----
  - $1 \leq N \leq 10000$
  - $1 \leq a_i \leq 1000000000$

  -----Sample input 1:-----
  9
  2 
  3 
  7 
  8 
  14 
  39 
  145 
  76 
  320

  -----Sample output 1:-----
  3

  -----Sample input 2:-----
  14
  2
  11 
  16 
  12 
  36 
  60 
  71 
  17 
  29 
  144 
  288 
  129 
  432 
  993

  -----Sample output 2:-----
  5
vc-preamble: |
  import Imports.AllImports

  def find_longest_dividing_subsequence (nums: List Nat) : Nat :=
    sorry
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def powers_of_two : List Nat :=
    let rec mk_powers : Nat → List Nat
      | 0 => []
      | n+1 => if (2^n ≤ 1000) then (2^n)::(mk_powers n) else mk_powers n
    mk_powers 10
vc-theorems: |
  theorem length_bounds {nums: List Nat} 
    (h1: ∀ x ∈ nums, 1 ≤ x ∧ x ≤ 1000)
    (h2: nums.length > 0) :
    1 ≤ find_longest_dividing_subsequence nums ∧ 
    find_longest_dividing_subsequence nums ≤ nums.length :=
    sorry


  theorem powers_of_two_sequence :
    find_longest_dividing_subsequence powers_of_two = powers_of_two.length :=
    sorry


  theorem sorted_divisible_sequence {nums: List Nat}
    (h1: ∀ x ∈ nums, 1 ≤ x ∧ x ≤ 1000)
    (h2: nums.length ≥ 2)
    (h3: ∀ (i: Fin nums.length) (j: Fin nums.length), 
      i.val < j.val → (nums.get j) % (nums.get i) = 0)
    (h4: ∀ (i: Fin nums.length) (j: Fin nums.length),
      i.val < j.val → nums.get i ≤ nums.get j) :
    find_longest_dividing_subsequence nums = nums.length :=
    sorry


  theorem edge_case_singleton :
    find_longest_dividing_subsequence [1] = 1 :=
    sorry

  /--
  info: 3
  -/
  #guard_msgs in
  #eval find_longest_dividing_subsequence [2, 3, 7, 8, 14, 39, 145, 76, 320]

  /--
  info: 5
  -/
  #guard_msgs in
  #eval find_longest_dividing_subsequence [2, 11, 16, 12, 36, 60, 71, 17, 29, 144, 288, 129, 432, 993]

  /--
  info: 4
  -/
  #guard_msgs in
  #eval find_longest_dividing_subsequence [1, 2, 4, 8]
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
