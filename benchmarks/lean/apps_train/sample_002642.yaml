vc-description: |-
  You probably know the "like" system from Facebook and other pages. People can "like" blog posts, pictures or other items. We want to create the text that should be displayed next to such an item.
  
  Implement a function `likes :: [String] -> String`, which must take in input array, containing the names of people who like an item. It must return the display text as shown in the examples:
  
  ```python
  likes([]) # must be "no one likes this"
  likes(["Peter"]) # must be "Peter likes this"
  likes(["Jacob", "Alex"]) # must be "Jacob and Alex like this"
  likes(["Max", "John", "Mark"]) # must be "Max, John and Mark like this"
  likes(["Alex", "Jacob", "Mark", "Max"]) # must be "Alex, Jacob and 2 others like this"
  ```
  
  For 4 or more names, the number in `and 2 others` simply increases.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def likes (names : List String) : String := sorry
  
  theorem likes_output_is_string (names : List String) : 
    ∃ s : String, likes names = s := by sorry

vc-theorems: |-
  theorem likes_output_ends_correctly (names : List String) :
    (likes names).endsWith " likes this" ∨ (likes names).endsWith " like this" := by sorry
  
  theorem likes_empty_case : 
    likes [] = "no one likes this" := by sorry
  
  theorem likes_single_case (name : String) :
    likes [name] = name ++ " likes this" := by sorry
  
  theorem likes_two_case (name1 name2 : String) :
    likes [name1, name2] = name1 ++ " and " ++ name2 ++ " like this" := by sorry
  
  theorem likes_three_case (name1 name2 name3 : String) :
    likes [name1, name2, name3] = name1 ++ ", " ++ name2 ++ " and " ++ name3 ++ " like this" := by sorry
  
  theorem likes_four_plus_case (names : List String) (h : names.length ≥ 4) :
    likes names = names[0]! ++ ", " ++ names[1]! ++ " and " ++ toString (names.length - 2) ++ " others like this" := by sorry
  
  theorem likes_others_count_correct (names : List String) (h : names.length ≥ 4) :
    ∃ pre post : String, likes names = pre ++ toString (names.length - 2) ++ post := by sorry
  
  /--
  info: 'no one likes this'
  -/
  #guard_msgs in
  #eval likes []
  
  /--
  info: 'Peter likes this'
  -/
  #guard_msgs in
  #eval likes ["Peter"]
  
  /--
  info: 'Jacob and Alex like this'
  -/
  #guard_msgs in
  #eval likes ["Jacob", "Alex"]
  
  /--
  info: 'Max, John and Mark like this'
  -/
  #guard_msgs in
  #eval likes ["Max", "John", "Mark"]
  
  /--
  info: 'Alex, Jacob and 2 others like this'
  -/
  #guard_msgs in
  #eval likes ["Alex", "Jacob", "Mark", "Max"]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

