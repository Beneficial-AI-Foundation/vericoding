vc-description: |-
  **This Kata is intended as a small challenge for my students**

  All Star Code Challenge #19

  You work for an ad agency and your boss, Bob, loves a catchy slogan. He's always jumbling together "buzz" words until he gets one he likes. You're looking to impress Boss Bob with a function that can do his job for him.

  Create a function called sloganMaker() that accepts an array of string "buzz" words. The function returns an array of all possible UNIQUE string permutations of the buzz words (concatonated and separated by spaces).

  Your boss is not very bright, so anticipate him using the same "buzz" word more than once, by accident. The function should ignore these duplicate string inputs.

  ```
  sloganMaker(["super", "hot", "guacamole"]);
  //[ 'super hot guacamole',
  //  'super guacamole hot',
  //  'hot super guacamole',
  //  'hot guacamole super',
  //  'guacamole super hot',
  //  'guacamole hot super' ]

  sloganMaker(["cool", "pizza", "cool"]); // => [ 'cool pizza', 'pizza cool' ]
  ```

  Note:  
  There should be NO duplicate strings in the output array

  The input array MAY contain duplicate strings, which should STILL result in an output array with all unique strings

  An empty string is valid input

  ```if-not:python,crystal
  The order of the permutations in the output array does not matter
  ```
  ```if:python,crystal
  The order of the output array must match those rules:
  1. Generate the permutations in lexicographic order of the original array.
  2. keep only the first occurence of a permutation, when duplicates are found.
  ```
vc-preamble: |
  import Imports.AllImports

  def List.factorial : Nat → Nat
    | 0 => 1
    | n + 1 => (n + 1) * factorial n


  def List.unique {α} [BEq α] (xs : List α) : List α := sorry

  def slogan_maker (words: List String) : List String := sorry
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def containsString (s1 s2: String) : Bool := sorry  

  theorem slogan_maker_returns_string_list (words : List String) :
    ∀ s, s ∈ slogan_maker words → s.length ≥ 0 := sorry
vc-theorems: |
  theorem slogan_maker_contains_all_words (words : List String) :
    ∀ slogan, slogan ∈ slogan_maker words →
    ∀ word, word ∈ List.unique words →
    containsString slogan word = true := sorry


  theorem slogan_maker_length (words : List String) :
    (slogan_maker words).length = List.factorial (List.unique words).length := sorry 


  theorem slogan_maker_order_independent (words₁ words₂ : List String) :
    List.unique words₁ = List.unique words₂ →
    slogan_maker words₁ = slogan_maker words₂ := sorry


  theorem slogan_maker_unique_results (words : List String) :
    ∀ s₁ s₂, s₁ ∈ slogan_maker words → s₂ ∈ slogan_maker words →
    s₁ = s₂ ∨ s₁ ≠ s₂ := sorry

  /--
  info: ['super']
  -/
  #guard_msgs in
  #eval slogan_maker ["super"]

  /--
  info: set(['super hot', 'hot super'])
  -/
  #guard_msgs in
  #eval set slogan_maker(["super", "hot"])

  /--
  info: set(['super hot guacamole', 'super guacamole hot', 'hot super guacamole', 'hot guacamole super', 'guacamole super hot', 'guacamole hot super'])
  -/
  #guard_msgs in
  #eval set slogan_maker(["super", "hot", "guacamole"])
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
