vc-description: |-
  # RegExp Fun #1 - When I miss few days of gym

  ## Disclaimer

  The background story of this Kata is 100% fiction.  Any resemblance to real people or real events is **nothing more than a coincidence** and should be regarded as such.

  ## Background Story

  You are a person who loves to go to the gym everyday with the squad of people that you've known since early childhood.  However, you recently contracted a sickness that forced you to stay at home for over a week.  As you see your body getting weaker and weaker every day and as you see your biceps and triceps disappearing, you can't help but lay in bed and cry.  You're usually an optimistic person but this time negative thoughts come to your head ... 

  ![When I miss few days of gym](https://pics.onsizzle.com/Instagram-faf8c9.png)


  ## Task

  As can be seen from the funny image above (or am I the only person to find the picture above hilarious?) there is lots of slang.  Your task is to define a function ```gymSlang``` which accepts a string argument and does the following:

  1. Replace *all* instances of ```"probably"``` to ```"prolly"```
  2. Replace *all* instances of ```"i am"``` to ```"i'm"```
  3. Replace *all* instances of ```"instagram"``` to ```"insta"```
  4. Replace *all* instances of ```"do not"``` to ```"don't"```
  5. Replace *all* instances of ```"going to"``` to ```"gonna"```
  6. Replace *all* instances of ```"combination"``` to ```"combo"```

  Your replacement regexes **should be case-sensitive**, only replacing the words above with slang if the detected pattern is in **lowercase**.  However, please note that apart from 100% lowercase matches, you will **also have to replace matches that are correctly capitalized** (e.g. ```"Probably" => "Prolly"``` or ```"Instagram" => "Insta"```).

  Finally, your code will be tested to make sure that you have used **RegExp** replace in your code.

  Enjoy :D
vc-preamble: |
  import Imports.AllImports

  def String.findSubstr? (pattern : String) (s : String) : Option String.Pos := 
    sorry 
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def gym_slang (s : String) : String :=
    sorry
vc-theorems: |-
  theorem gym_slang_length (s : String) :
    String.length (gym_slang s) ≤ String.length s :=
    sorry


  theorem gym_slang_case_preserving_prob (s : String) :
    (String.findSubstr? "Probably" s).isSome → (String.findSubstr? "Prolly" (gym_slang s)).isSome :=
    sorry


  theorem gym_slang_case_preserving_prob_lower (s : String) :  
    (String.findSubstr? "probably" s).isSome → (String.findSubstr? "prolly" (gym_slang s)).isSome :=
    sorry


  theorem gym_slang_all_transformations (s : String) : 
    let sLower := s.toLower
    let resultLower := (gym_slang s).toLower
    (Option.isSome (String.findSubstr? "probably" sLower) ↔ Option.isSome (String.findSubstr? "prolly" resultLower)) ∧
    (Option.isSome (String.findSubstr? "combination" sLower) ↔ Option.isSome (String.findSubstr? "combo" resultLower)) :=
    sorry


  theorem gym_slang_identity (s : String) :
    (Option.isNone (String.findSubstr? "probably" s.toLower)) →
    (Option.isNone (String.findSubstr? "i am" s.toLower)) →
    (Option.isNone (String.findSubstr? "instagram" s.toLower)) →
    (Option.isNone (String.findSubstr? "do not" s.toLower)) →
    (Option.isNone (String.findSubstr? "going to" s.toLower)) →
    (Option.isNone (String.findSubstr? "combination" s.toLower)) →
    gym_slang s = s :=
    sorry
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded
