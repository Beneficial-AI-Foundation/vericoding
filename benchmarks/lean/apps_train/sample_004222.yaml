vc-description: |-
  Consider integer coordinates x, y in the Cartesian plan and three functions f, g, h
  defined by:
  ```
  f: 1 <= x <= n, 1 <= y <= n --> f(x, y) = min(x, y)
  g: 1 <= x <= n, 1 <= y <= n --> g(x, y) = max(x, y)
  h: 1 <= x <= n, 1 <= y <= n --> h(x, y) = x + y
  ``` 
  where n is a given integer (n >= 1, guaranteed) and x, y are integers.

  In the table below you can see the value of the function f with n = 6.

    ---|*0* |*1*|*2*|*3*|*4*|*5*|*6*|
    -- |--|--|--|--|--|--|--|
    *6*|- |1 |2 |3 |4 |5 |6 |
    *5*|- |1 |2 |3 |4 |5 |5 |
    *4*|- |1 |2 |3 |4 |4 |4 |
    *3*|- |1 |2 |3 |3 |3 |3 |
    *2*|- |1 |2 |2 |2 |2 |2 |
    *1*|- |1 |1 |1 |1 |1 |1 |
    *0*|- |- |- |- |- |- |- |

  The task is to calculate the sum of f(x, y), g(x, y) and h(x, y) for all integers x and y such that (1 <= x <= n, 1 <= y <= n).

  The function sumin (sum of f) will take n as a parameter and return the sum of min(x, y) in the domain 1 <= x <= n, 1 <= y <= n.
  The function sumax (sum of g) will take n as a parameter and return the sum of max(x, y) in the same domain.
  The function sumsum (sum of h) will take n as a parameter and return the sum of x + y in the same domain.


  #Examples:
  ```
  sumin(6) --> 91
  sumin(45) --> 31395
  sumin(999) --> 332833500
  sumin(5000) --> 41679167500

  sumax(6) --> 161
  sumax(45) --> 61755
  sumax(999) --> 665167500
  sumax(5000) --> 83345832500

  sumsum(6) --> 252
  sumsum(45) --> 93150
  sumsum(999) --> 998001000
  sumsum(5000) --> 125025000000
  ```

  #Hint:
  1. Try to avoid nested loops
  2. Note that h = f + g
vc-preamble: |
  import Imports.AllImports

  def sumin (n : Nat) : Nat := sorry
  def sumax (n : Nat) : Nat := sorry

  def sumsum (n : Nat) : Nat := sorry

  def sumOfMins (n : Nat) : Nat := sorry




  def sumOfMaxs (n : Nat) : Nat := sorry



  theorem sumax_positive (n : Nat) (h : n > 0) :
    sumax n > 0 :=
  sorry
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def sumOfSums (n : Nat) : Nat := sorry



  theorem sumsum_equals_sumin_plus_sumax (n : Nat) :
    sumsum n = sumin n + sumax n :=
  sorry
vc-theorems: |
  theorem sumin_positive (n : Nat) (h : n > 0) : 
    sumin n > 0 :=
  sorry


  theorem sumin_le_sumax (n : Nat) :
    sumin n ≤ sumax n :=
  sorry


  theorem sumax_ge_sumin (n : Nat) :
    sumax n ≥ sumin n :=
  sorry


  theorem sumsum_positive (n : Nat) (h : n > 0) :
    sumsum n > 0 :=
  sorry

  /--
  info: 55
  -/
  #guard_msgs in
  #eval sumin 5

  /--
  info: 91
  -/
  #guard_msgs in
  #eval sumin 6

  /--
  info: 1240
  -/
  #guard_msgs in
  #eval sumin 15

  /--
  info: 161
  -/
  #guard_msgs in
  #eval sumax 6

  /--
  info: 61755
  -/
  #guard_msgs in
  #eval sumax 45

  /--
  info: 671650
  -/
  #guard_msgs in
  #eval sumax 100

  /--
  info: 252
  -/
  #guard_msgs in
  #eval sumsum 6

  /--
  info: 93150
  -/
  #guard_msgs in
  #eval sumsum 45

  /--
  info: 1010000
  -/
  #guard_msgs in
  #eval sumsum 100
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible
