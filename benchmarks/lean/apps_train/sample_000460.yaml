vc-description: |-
  Given an integer array A, and an integer target, return the number of tuples i, j, k  such that i < j < k and A[i] + A[j] + A[k] == target.
  As the answer can be very large, return it modulo 109 + 7.
   
  Example 1:
  Input: A = [1,1,2,2,3,3,4,4,5,5], target = 8
  Output: 20
  Explanation: 
  Enumerating by the values (A[i], A[j], A[k]):
  (1, 2, 5) occurs 8 times;
  (1, 3, 4) occurs 8 times;
  (2, 2, 4) occurs 2 times;
  (2, 3, 3) occurs 2 times.

  Example 2:
  Input: A = [1,1,2,2,2,2], target = 5
  Output: 12
  Explanation: 
  A[i] = 1, A[j] = A[k] = 2 occurs 12 times:
  We choose one 1 from [1,1] in 2 ways,
  and two 2s from [2,2,2,2] in 6 ways.

   
  Constraints:

  3 <= A.length <= 3000
  0 <= A[i] <= 100
  0 <= target <= 300
vc-preamble: |
  import Imports.AllImports

  def threeSumMulti (arr : List Nat) (target : Nat) : Nat := sorry

  def MOD := 1000000007
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def List.sum : List Nat → Nat 
    | [] => 0
    | x::xs => x + List.sum xs
vc-theorems: |
  theorem output_range (arr : List Nat) (target : Nat)
    (h1 : arr.length ≥ 1)
    (h2 : arr.length ≤ 3000)
    (h3 : ∀ x ∈ arr, x ≤ 100)
    (h4 : target ≤ 300) :
    threeSumMulti arr target < MOD := sorry


  theorem zero_target (arr : List Nat)
    (h1 : arr.length ≥ 1)
    (h2 : arr.length ≤ 3000)
    (h3 : ∀ x ∈ arr, x ≤ 100)
    (h4 : arr.length ≥ 3) :
    threeSumMulti (List.replicate arr.length 0) 0 > 0 := sorry


  theorem identical_elements (arr : List Nat) (target : Nat)
    (h1 : arr.length ≥ 3)
    (h2 : arr.length ≤ 3000)
    (h3 : target % 3 = 0)
    (h4 : target / 3 ≤ 100) :
    threeSumMulti (List.replicate arr.length (target / 3)) target > 0 := sorry


  theorem small_arrays (arr : List Nat)
    (h1 : arr.length = 3)
    (h2 : ∀ x ∈ arr, x ≤ 100) :
    threeSumMulti arr (List.sum arr) ≥ 1 := sorry


  theorem order_independence (arr arr' : List Nat) (target : Nat)
    (h1 : arr.length ≥ 1)
    (h2 : arr.length ≤ 3000)
    (h3 : ∀ x ∈ arr, x ≤ 100)
    (h4 : target ≤ 300)
    (h5 : arr.length = arr'.length)
    (h6 : ∀ n, (arr.count n) = (arr'.count n)) :
    threeSumMulti arr target = threeSumMulti arr' target := sorry

  /--
  info: 20
  -/
  #guard_msgs in
  #eval three_sum_multi [1, 1, 2, 2, 3, 3, 4, 4, 5, 5] 8

  /--
  info: 12
  -/
  #guard_msgs in
  #eval three_sum_multi [1, 1, 2, 2, 2, 2] 5

  /--
  info: 1
  -/
  #guard_msgs in
  #eval three_sum_multi [2, 2, 2] 6
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
