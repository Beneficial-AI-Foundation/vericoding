vc-description: |-
  Same as [the original](https://www.codewars.com/kata/simple-fun-number-258-is-divisible-by-6) (same rules, really, go there for example and I strongly recommend completing it first), but with more than one asterisk (but always at least one).

  For example, `"*2"` should return `["12", "42", "72"]`.

  Similarly, `"*2*"` should return `["024", "120", "126", "222", "228", "324", "420", "426", "522", "528", "624", "720", "726", "822", "828", "924"]`. Order matters and returning the right one is part of the challenge itself, yep!

  More examples in the test codes and, of course, if you cannot generate any number divisible by 6, just return `[]` (or `[] of String` in Crystal).
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def is_divisible_by_6 (s: String): List String := sorry

  def verify_divisible_by_6 (s: String): Bool := sorry
vc-theorems: |
  theorem valid_number_without_wildcards (n: Nat) :
    let s := toString n
    n % 6 = 0 → is_divisible_by_6 s = [s] ∧
    n % 6 ≠ 0 → is_divisible_by_6 s = [] :=
  sorry  


  theorem wildcard_pattern_properties (n: Nat) (h: 1 ≤ n ∧ n ≤ 5) :
    let pattern := String.mk (List.replicate n '*')
    ∀ num ∈ is_divisible_by_6 pattern,
      String.length num = n ∧
      verify_divisible_by_6 num = true ∧ 
      ∀ c ∈ String.toList num, '0' ≤ c ∧ c ≤ '9' :=
  sorry


  theorem odd_ending_gives_empty {d: Char} (h: d ∈ ['1', '3', '5', '7', '9']) : 
    is_divisible_by_6 ("*" ++ toString d) = [] :=
  sorry

  /--
  info: ['12', '42', '72']
  -/
  #guard_msgs in
  #eval is_divisible_by_6 "*2"

  /--
  info: []
  -/
  #guard_msgs in
  #eval is_divisible_by_6 "*21"

  /--
  info: ['024', '120', '126', '222', '228', '324', '420', '426', '522', '528', '624', '720', '726', '822', '828', '924']
  -/
  #guard_msgs in
  #eval is_divisible_by_6 "*2*"
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
