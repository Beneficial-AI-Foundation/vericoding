vc-description: |-
  In the previous Kata we discussed the OR case.

  We will now discuss the AND case, where rather than calculating the probablility for either of two (or more) possible results, we will calculate the probability of receiving all of the viewed outcomes.

  For example, if we want to know the probability of receiving head OR tails in two tosses of a coin, as in the last Kata we add the two probabilities together. However if we want to know the probability of receiving head AND tails, in that order, we have to work differently.

  The probability of an AND event is calculated by the following rule:

  `P(A ∩ B) = P(A | B) * P(B)`

  or

  `P(B ∩ A) = P(B | A) * P(A)`

  That is, the probability of A and B both occuring is equal to the probability of A given B occuring times the probability of B occuring or vice versa. 
  If the events are mutually exclusive like in the case of tossing a coin, the probability of A occuring if B has occured is equal to the probability of A occuring by itself. In this case, the probability can be written as the below:

  `P(A ∩ B) = P(A) * P(B)`

  or

  `P(B ∩ A) = P(B) * P(A)`

  Applying to the heads and tails case:

  `P(H ∩ T) = P(0.5) * P(0.5)`

  or

  `P(H ∩ T) = P(0.5) * P(0.5)`

  The task:

  You are given a random bag of 10 balls containing 4 colours. `Red`, `Green`, `Yellow` and `Blue`. You will also be given a sequence of 2 balls of any colour e.g. `Green` and `Red` or `Yellow` and `Yellow`. 

  You have to return the probability of pulling a ball at random out of the bag and it matching the first colour and then pulling a ball at random out of the bag and it matching the second colour.

  You will be given a boolean value of `true` or `false` which indicates whether the balls that is taken out in the first draw is replaced in to the bag for the second draw. Hint: this will determine whether the events are mutually exclusive or not.

  You will receive two arrays and a boolean value. The first array contains the colours of the balls in the bag and the second contains the colour of the two balls you have to receive. As per above the final boolean value will indicate whether the bals arel being replaced `true` or not `false`.

  Return the probability to 3 decimal places.

  e.g. `[["y","r","g","b","b","y","r","g","r","r"],["r","b"],false]`


  Other Kata in this series:
  Statistics in Kata 1: OR case - Unfair dice
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def ball_probability (bag : List String) (target : List String) (replace : Bool) : Float := sorry

  theorem probability_bounds {bag : List String} {target : List String} {replace : Bool}
    (h1 : target.length = 2)
    (h2 : bag.length ≥ 2) :
    let prob := ball_probability bag target replace;
    0 ≤ prob ∧ prob ≤ 1 := sorry
vc-theorems: |
  theorem impossible_cases {bag : List String} {target : List String} {replace : Bool}
    (h1 : target.length = 2) 
    (h2 : ¬(∃ x ∈ bag, x = target[0]!)) 
    (h3 : ¬(∃ x ∈ bag, x = target[1]!)) :
    ball_probability bag target replace = 0 := sorry


  theorem replacement_vs_no_replacement {bag : List String} {target : List String}
    (h1 : target.length = 2)
    (h2 : bag.length ≥ 2)
    (h3 : target[0]! = target[1]!) :
    ball_probability bag target true ≥ ball_probability bag target false := sorry

  /--
  info: 0.09
  -/
  #guard_msgs in
  #eval ball_probability *test1

  /--
  info: 0.1
  -/
  #guard_msgs in
  #eval ball_probability *test2

  /--
  info: 0
  -/
  #guard_msgs in
  #eval ball_probability *test3
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
