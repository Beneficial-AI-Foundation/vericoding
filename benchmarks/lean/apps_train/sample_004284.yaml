vc-description: |-
  # Task 

  **_Given_**   *a number* , **_Return_**  **_The Maximum number _**  *could be formed from the digits of the number given* . 
  ___
  # Notes

  * **_Only Natural numbers_** *passed to the function , numbers Contain digits [0:9] inclusive*

  * **_Digit Duplications_** *could occur* , So also **_consider it when forming the Largest_**

  ____
  # Input >> Output Examples:

  ```
  maxNumber (213) ==> return (321)
  ```
  ## **_Explanation_**:

  As `321` is **_The Maximum number _**  *could be formed from the digits of the number   **_213_*** . 
  ___

  ```
  maxNumber (7389) ==> return (9873)
  ```
  ## **_Explanation_**:

  As `9873` is **_The Maximum number _**  *could be formed from the digits of the number  **_7389_*** . 
  ___

  ```
  maxNumber (63729) ==> return (97632)
  ```
  ## **_Explanation_**:

  As `97632` is **_The Maximum number _**  *could be formed from the digits of the number  **_63729_*** . 
  ___

  ```
  maxNumber (566797) ==> return (977665)
  ```
  ## **_Explanation_**:

  As `977665` is **_The Maximum number _**  *could be formed from the digits of the number  **_566797_*** .

  **_Note_** : **_Digit duplications are considered when forming the largest_** . 
  ___

  ```
  maxNumber (17693284) ==> return (98764321)
  ```
  ## **_Explanation_**:
   
  As `98764321` is **_The Maximum number _**  *could be formed from the digits of the number  **_17693284_*** .
  ___
  ___
  ___

  # [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)

  # [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)

  # [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)
  ___

  ## ALL translations are welcomed

  ## Enjoy Learning !!
  # Zizou
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def max_number (n : Nat) : Nat := sorry

  theorem max_number_type (n : Nat) : Nat.succ (max_number n) > 0 := sorry
vc-theorems: |
  theorem max_number_digit_count (n : Nat) : 
    String.length (toString (max_number n)) = String.length (toString n) := sorry


  theorem max_number_same_digits (n : Nat) :
    (toString (max_number n)).data = (toString n).data := sorry


  theorem max_number_geq_input (n : Nat) : 
    max_number n ≥ n := sorry


  theorem max_number_digits_descending (n : Nat) (i : String.Pos) : 
    i.1 + 1 < String.length (toString (max_number n)) →
    (toString (max_number n)).get i ≥ (toString (max_number n)).get ⟨i.1 + 1⟩ := sorry


  theorem max_number_idempotent (n : Nat) :
    max_number (max_number n) = max_number n := sorry


  theorem max_number_deterministic (n : Nat) :
    max_number n = max_number n := sorry

  /--
  info: 321
  -/
  #guard_msgs in
  #eval max_number 213

  /--
  info: 9873
  -/
  #guard_msgs in
  #eval max_number 7389

  /--
  info: 977665
  -/
  #guard_msgs in
  #eval max_number 566797
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
