vc-description: |-
  Chef has a sequence of $N$ integers, $A_1, A_2, ... , A_N$. He likes this sequence if it contains a  subsequence of $M$ integers, $B_1, B_2, ... , B_M$ within it.
  A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.
  You will be given a sequence of $N$ integers, $A_1, A_2, ..., A_N$ followed by another sequence of $M$ integers, $B_1, B_2, ..., B_M$. Given these, you have to tell whether Chef likes the sequence of $N$ integers($A_1, A_2, ..., A_N$) or not. 
  Formally, output "Yes" if
  $\exists idx_1, idx_2, ..., idx_M | 1 \le idx_1 < idx_2 < ... < idx_M \le N$ and $A_{idx_i} = B_i \forall i, 1 \le i \le M$
  Otherwise output "No". Note that the quotes are for clarity.

  -----Input-----
  The first line contains a single integer, $T$.
  $T$ test cases follow where each test case contains four lines:
  - The first line of a test case contains a single integer $N$
  - The second line of the test case contains $N$ space separated integers, $A_1, A_2, ..., A_N$
  - The third line of the test case contains a single integer $M$.
  - The fourth line contains $M$ space separated integers, $B_1, B_2, ..., B_M$
  Symbols have usual meanings as described in the statement.

  -----Output-----
  For each test case, output a single line containing the output. Output is "Yes" if Chef likes the sequence $A$. Output is "No" if Chef dislikes the sequence $A$.

  -----Constraints-----
  - $1 \le T \le 100$
  - $1 \le N \le 10^3$
  - $1 \le M \le 10^3$
  - $1 \le A_i, B_i \le 10^9$

  -----Sample Input-----
  3
  6
  1 2 3 4 5 6
  3
  2 3 4
  6
  22 5 6 33 1 4
  2
  4 15
  4
  1 3 4 2
  2
  1 2

  -----Sample Output-----
  Yes
  No
  Yes

  -----Explanation:-----
  In sample test case $1$, the sequence $1,2,3,4,5,6$ contains the subsequence $2, 3, 4$. The subsequence is present at indices $1, 2, 3$ of the original sequence.
  Hence, $1,2,3,4,5,6$ is a sequence which Chef likes it. Therefore, we output "Yes".
  In sample test case $2$, the subsequence $4, 15$ is not present in sequence $22, 5, 6, 33, 1, 4$. Hence, we output "No".
  In sample test case $3$, the sequence $1, 3, 4, 2$ contains the subsequence $1, 2$. The subsequence is present at indices $0, 3$. Therefore, we output "Yes".
vc-preamble: |
  import Imports.AllImports

  def List.index {α} [BEq α] (xs : List α) (x : α) : Nat :=
    sorry
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def check_subsequence (s1 : String) (s2 : String) : String :=
    sorry
vc-theorems: |
  theorem sequence_is_subsequence_of_itself (seq : List Nat) (h : seq.length > 0) :
    ∀ x ∈ seq, x > 0 ∧ x ≤ 100 →
    check_subsequence (toString seq) (toString seq) = "Yes" :=
    sorry


  theorem invalid_element_not_subsequence (seq : List Nat) (invalid : Nat) (h1 : seq.length > 0) :
    (∀ x ∈ seq, x > 0 ∧ x ≤ 100) →
    invalid > 100 ∧ invalid ≤ 200 →
    check_subsequence (toString seq) (toString invalid) = "No" :=
    sorry


  theorem first_element_is_subsequence (seq : List Nat) (h : seq.length > 1) :
    ∀ x ∈ seq, x > 0 ∧ x ≤ 100 →
    check_subsequence (toString seq) (toString (seq.get! 0)) = "Yes" :=
    sorry


  theorem consecutive_elements_subsequence (seq : List Nat) (start : Nat) 
    (h1 : seq.length ≥ 3) (h2 : start < seq.length - 1) :
    ∀ x ∈ seq, x > 0 ∧ x ≤ 100 →
    let subseq := (seq.drop start).take 2
    ∀ i < subseq.length - 1, 
      seq.index (subseq[i]!) < seq.index (subseq[i+1]!) →
    check_subsequence (toString seq) (toString subseq) = "Yes" :=
    sorry

  /--
  info: 'Yes'
  -/
  #guard_msgs in
  #eval check_subsequence "1 2 3 4 5 6" "2 3 4"

  /--
  info: 'No'
  -/
  #guard_msgs in
  #eval check_subsequence "22 5 6 33 1 4" "4 15"

  /--
  info: 'Yes'
  -/
  #guard_msgs in
  #eval check_subsequence "1 3 4 2" "1 2"
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
