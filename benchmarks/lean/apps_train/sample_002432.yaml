vc-description: |-
  Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

  An input string is valid if:


         Open brackets must be closed by the same type of brackets.
         Open brackets must be closed in the correct order.


  Note that an empty string is also considered valid.

  Example 1:


  Input: "()"
  Output: true


  Example 2:


  Input: "()[]{}"
  Output: true


  Example 3:


  Input: "(]"
  Output: false


  Example 4:


  Input: "([)]"
  Output: false


  Example 5:


  Input: "{[]}"
  Output: true
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def OPENING : List Char := ['(', '{', '[']
  def CLOSING : List Char := [')', '}', ']']

  def is_valid_parentheses (s: String) : Bool :=
    sorry
vc-theorems: |
  theorem valid_implies_even_length (s: String) : 
    is_valid_parentheses s → s.length % 2 = 0 :=
    sorry


  theorem valid_implies_balanced_counts (s: String) :
    is_valid_parentheses s → 
    (s.data.filter (·∈ OPENING)).length = (s.data.filter (·∈ CLOSING)).length :=
    sorry


  theorem nested_brackets_valid {pattern : List Nat} (h: ∀ n ∈ pattern, n ≤ 2) :
    let brackets := ["()", "[]", "{}"] 
    is_valid_parentheses (String.join (pattern.map (fun i => brackets.get! (i % 3)))) :=
    sorry


  theorem empty_string_valid :
    is_valid_parentheses "" = true :=
    sorry


  theorem non_bracket_chars_invalid (s: String) :
    (∃ c ∈ s.data, c ∉ (OPENING ++ CLOSING)) →
    is_valid_parentheses s = false :=
    sorry


  theorem closing_only_invalid (s: String) :
    (∀ c ∈ s.data, c ∈ CLOSING) →
    s.length > 0 →
    is_valid_parentheses s = false :=
    sorry

  /--
  info: True
  -/
  #guard_msgs in
  #eval is_valid_parentheses "()"

  /--
  info: True
  -/
  #guard_msgs in
  #eval is_valid_parentheses "()[]{}"

  /--
  info: False
  -/
  #guard_msgs in
  #eval is_valid_parentheses "(]"
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
