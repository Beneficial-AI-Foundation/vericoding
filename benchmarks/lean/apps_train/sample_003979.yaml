vc-description: |-
  ### What is simplifying a square root?
  
  If you have a number, like 80, for example, you would start by finding the greatest perfect square divisible by 80. In this case, that's 16. Find the square root of 16, and multiply it by 80 / 16. Answer = 4 √5. 
  
  ##### The above example:
  
  ![simplify_roots_example.png](https://i.postimg.cc/gjv2NwCm/simplify-roots-example.png)
  
  ### Task:
  
  Your job is to write two functions, `simplify`, and `desimplify`, that simplify and desimplify square roots, respectively. (Desimplify isn't a word, but I couldn't come up with a better way to put it.) `simplify` will take an integer and return a string like "x sqrt y", and `desimplify` will take a string like "x sqrt y" and return an integer. For `simplify`, if a square root cannot be simplified, return "sqrt y". 
  
  _Do not modify the input._
  
  ### Some examples:
  
  ```python
  simplify(1)  #=> "1"
  simplify(2)  #=> "sqrt 2"
  simplify(3)  #=> "sqrt 3"
  simplify(8)  #=> "2 sqrt 2"
  simplify(15) #=> "sqrt 15"
  simplify(16) #=> "4"
  simplify(18) #=> "3 sqrt 2"
  simplify(20) #=> "2 sqrt 5"
  simplify(24) #=> "2 sqrt 6"
  simplify(32) #=> "4 sqrt 2"
  
  desimplify("1")        #=> 1
  desimplify("sqrt 2")   #=> 2
  desimplify("sqrt 3")   #=> 3
  desimplify("2 sqrt 2") #=> 8
  desimplify("sqrt 15")  #=> 15
  desimplify("4")        #=> 16
  desimplify("3 sqrt 2") #=> 18
  desimplify("2 sqrt 5") #=> 20
  desimplify("2 sqrt 6") #=> 24
  desimplify("4 sqrt 2") #=> 32
  ```
  
  Also check out my other creations — [Square Roots: Approximation](https://www.codewars.com/kata/square-roots-approximation), [Square and Cubic Factors](https://www.codewars.com/kata/square-and-cubic-factors), [Keep the Order](https://www.codewars.com/kata/keep-the-order), [Naming Files](https://www.codewars.com/kata/naming-files), [Elections: Weighted Average](https://www.codewars.com/kata/elections-weighted-average), [Identify Case](https://www.codewars.com/kata/identify-case), [Split Without Loss](https://www.codewars.com/kata/split-without-loss), [Adding Fractions](https://www.codewars.com/kata/adding-fractions),
  [Random Integers](https://www.codewars.com/kata/random-integers), [Implement String#transpose](https://www.codewars.com/kata/implement-string-number-transpose), [Implement Array#transpose!](https://www.codewars.com/kata/implement-array-number-transpose), [Arrays and Procs #1](https://www.codewars.com/kata/arrays-and-procs-number-1), and [Arrays and Procs #2](https://www.codewars.com/kata/arrays-and-procs-number-2).

vc-preamble: |-
  def simplify (n : Nat) : String := sorry
  def desimplify (s : String) : Nat := sorry
  
  def containsSqrt (s : String) : Bool := sorry
  def countSqrt (s : String) : Nat := sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def isNumeric (s : String) : Bool := sorry
  def splitByWhitespace (s : String) : List String := sorry
  
  /-- Desimplifying a simplified number returns the original number -/

vc-theorems: |-
  theorem simplify_desimplify_roundtrip (n : Nat) (h : n > 0) :
    desimplify (simplify n) = n := sorry
  
  /-- A simplified expression contains at most one sqrt -/
  
  theorem simplify_sqrt_count (n : Nat) (h : n > 0) :
    countSqrt (simplify n) ≤ 1 := sorry
  
  /-- A simplified expression with no sqrt is a single number -/
  
  theorem simplify_no_sqrt (n : Nat) (h : n > 0) :
    ¬containsSqrt (simplify n) → isNumeric (simplify n).trim := sorry
  
  /-- A simplified expression with sqrt is in format "a sqrt b" or "sqrt b" -/
  
  theorem simplify_with_sqrt (n : Nat) (h : n > 0) :
    let s := simplify n
    let parts := splitByWhitespace s
    containsSqrt s →
      (parts.length = 2 ∧ parts.get! 0 = "sqrt" ∧ isNumeric (parts.get! 1)) ∨
      (parts.length = 3 ∧ isNumeric (parts.get! 0) ∧ parts.get! 1 = "sqrt" ∧ isNumeric (parts.get! 2)) := sorry
  
  /-- Desimplifying returns a positive integer -/
  
  theorem desimplify_range (n : Nat) (h : n > 0) :
    desimplify (simplify n) > 0 := sorry
  
  /--
  info: '1'
  -/
  #guard_msgs in
  #eval simplify 1
  
  /--
  info: '2 sqrt 2'
  -/
  #guard_msgs in
  #eval simplify 8
  
  /--
  info: '2 sqrt 5'
  -/
  #guard_msgs in
  #eval simplify 20
  
  /--
  info: 1
  -/
  #guard_msgs in
  #eval desimplify "1"
  
  /--
  info: 8
  -/
  #guard_msgs in
  #eval desimplify "2 sqrt 2"
  
  /--
  info: 20
  -/
  #guard_msgs in
  #eval desimplify "2 sqrt 5"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

