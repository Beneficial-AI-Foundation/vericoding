vc-description: |-
  Create a timebased key-value store class TimeMap, that supports two operations.
  1. set(string key, string value, int timestamp)

  Stores the key and value, along with the given timestamp.

  2. get(string key, int timestamp)

  Returns a value such that set(key, value, timestamp_prev) was called previously, with timestamp_prev <= timestamp.
  If there are multiple such values, it returns the one with the largest timestamp_prev.
  If there are no values, it returns the empty string ("").

   

  Example 1:
  Input: inputs = ["TimeMap","set","get","get","set","get","get"], inputs = [[],["foo","bar",1],["foo",1],["foo",3],["foo","bar2",4],["foo",4],["foo",5]]
  Output: [null,null,"bar","bar",null,"bar2","bar2"]
  Explanation:   
  TimeMap kv;   
  kv.set("foo", "bar", 1); // store the key "foo" and value "bar" along with timestamp = 1   
  kv.get("foo", 1);  // output "bar"   
  kv.get("foo", 3); // output "bar" since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 ie "bar"   
  kv.set("foo", "bar2", 4);   
  kv.get("foo", 4); // output "bar2"   
  kv.get("foo", 5); //output "bar2"   



  Example 2:
  Input: inputs = ["TimeMap","set","set","get","get","get","get","get"], inputs = [[],["love","high",10],["love","low",20],["love",5],["love",10],["love",15],["love",20],["love",25]]
  Output: [null,null,null,"","high","high","low","low"]



   
  Note:

  All key/value strings are lowercase.
  All key/value strings have length in the range [1, 100]
  The timestamps for all TimeMap.set operations are strictly increasing.
  1 <= timestamp <= 10^7
  TimeMap.set and TimeMap.get functions will be called a total of 120000 times (combined) per test case.
vc-preamble: |
  import Imports.AllImports

  def TimeMap.set (tm : TimeMap) (key : String) (value : String) (timestamp : Nat) : TimeMap :=
    sorry
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def TimeMap.get (tm : TimeMap) (key : String) (timestamp : Nat) : String :=
    sorry
vc-theorems: |-
  theorem set_then_get_returns_same_value 
    (key : String) (value : String) (timestamp : Nat) :
    ∀ tm : TimeMap,
    TimeMap.get (TimeMap.set tm key value timestamp) key timestamp = value :=
  sorry


  theorem multiple_values_preserved_order
    (key : String) (value1 value2 : String) (ts1 ts2 : Nat) :
    ts1 ≠ ts2 →
    let first_ts := min ts1 ts2
    let second_ts := max ts1 ts2
    let first_val := if ts1 < ts2 then value1 else value2
    let second_val := if ts1 < ts2 then value2 else value1
    ∀ tm : TimeMap,
    let tm' := TimeMap.set tm key first_val first_ts
    let tm'' := TimeMap.set tm' key second_val second_ts
    (TimeMap.get tm'' key first_ts = first_val) ∧
    (TimeMap.get tm'' key second_ts = second_val) :=
  sorry


  theorem timestamp_boundaries
    (key : String) (value : String) (timestamp query_time : Nat) :
    ∀ tm : TimeMap,
    let tm' := TimeMap.set tm key value timestamp
    (query_time < timestamp → 
      TimeMap.get tm' key query_time = "" ∨ 
      TimeMap.get tm' key query_time = value) ∧
    (query_time ≥ timestamp →
      TimeMap.get tm' key query_time = value) :=
  sorry


  theorem nonexistent_key
    (key : String) (timestamp : Nat) :
    ∀ tm : TimeMap,
    TimeMap.get tm key timestamp = "" :=
  sorry
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
