vc-description: |-
  Given an array A of positive integers, A[i] represents the value of the i-th sightseeing spot, and two sightseeing spots i and j have distance j - i between them.
  The score of a pair (i < j) of sightseeing spots is (A[i] + A[j] + i - j) : the sum of the values of the sightseeing spots, minus the distance between them.
  Return the maximum score of a pair of sightseeing spots.
  
  Example 1:
  Input: [8,1,5,2,6]
  Output: 11
  Explanation: i = 0, j = 2, A[i] + A[j] + i - j = 8 + 5 + 0 - 2 = 11
  
  Note:
  
  2 <= A.length <= 50000
  1 <= A[i] <= 1000

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def max_score_sightseeing_pair (values: List Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem max_score_basic_case (values: List Nat) :
    values = [8,1,5,2,6] → max_score_sightseeing_pair values = 11 :=
    sorry
  
  theorem max_score_min_case (values: List Nat) :
    values = [1,2] → max_score_sightseeing_pair values = 2 :=
    sorry
  
  theorem max_score_equal_values (values: List Nat) :
    values = [5,5,5,5] → max_score_sightseeing_pair values = 9 :=
    sorry
  
  theorem max_score_two_ones (values: List Nat) :
    values = [1,1] → max_score_sightseeing_pair values = 1 :=
    sorry
  
  /--
  info: 11
  -/
  #guard_msgs in
  #eval max_score_sightseeing_pair [8, 1, 5, 2, 6]
  
  /--
  info: 2
  -/
  #guard_msgs in
  #eval max_score_sightseeing_pair [1, 2]
  
  /--
  info: 9
  -/
  #guard_msgs in
  #eval max_score_sightseeing_pair [5, 5, 5, 5]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

