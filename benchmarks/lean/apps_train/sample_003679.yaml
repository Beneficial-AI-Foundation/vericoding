vc-description: |-
  #Sorting on planet Twisted-3-7

  There is a planet... in a galaxy far far away. It is exactly like our planet, but it has one difference:
  #The values of the digits 3 and 7 are twisted.
  Our 3 means 7 on the planet Twisted-3-7. And 7 means 3.

  Your task is to create a method, that can sort an array the way it would be sorted on Twisted-3-7.

  7 Examples from a friend from Twisted-3-7:
  ```
  [1,2,3,4,5,6,7,8,9] -> [1,2,7,4,5,6,3,8,9]
  [12,13,14] -> [12,14,13]
  [9,2,4,7,3] -> [2,7,4,3,9]
  ```

  There is no need for a precheck. The array will always be not null and will always contain at least one number.

  You should not modify the input array!

  Have fun coding it and please don't forget to vote and rank this kata! :-) 

  I have also created other katas. Take a look if you enjoyed this kata!
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def sort_twisted37 (arr : List Int) : List Int := sorry

  def twist37 (n : Int) : Int := sorry
vc-theorems: |
  theorem sort_twisted37_invariants {arr : List Int} :
    let result := sort_twisted37 arr
    (List.length result = List.length arr) ∧ 
    (∀ x, x ∈ result ↔ x ∈ arr) ∧
    (∀ i j, i < j → j < result.length → 
      let i' : Fin result.length := ⟨i, by sorry⟩
      let j' : Fin result.length := ⟨j, by sorry⟩
      twist37 (result.get i') ≤ twist37 (result.get j')) :=
  sorry


  theorem sort_twisted37_no_changes {arr : List Int} 
    (h : ∀ x ∈ arr, ¬ (toString x).contains '3' ∧ ¬ (toString x).contains '7') :
    sort_twisted37 arr = arr :=
  sorry


  theorem sort_twisted37_idempotent {arr : List Int} :
    sort_twisted37 (sort_twisted37 arr) = sort_twisted37 arr :=
  sorry

  /--
  info: expected1
  -/
  #guard_msgs in
  #eval sort_twisted37 [1, 2, 3, 4, 5, 6, 7, 8, 9]

  /--
  info: expected2
  -/
  #guard_msgs in
  #eval sort_twisted37 [12, 13, 14]

  /--
  info: expected3
  -/
  #guard_msgs in
  #eval sort_twisted37 [9, 2, 4, 7, 3]
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
