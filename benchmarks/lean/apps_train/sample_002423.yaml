vc-description: |-
  An array is monotonic if it is either monotone increasing or monotone decreasing.
  An array A is monotone increasing if for all i <= j, A[i] <= A[j].  An array A is monotone decreasing if for all i <= j, A[i] >= A[j].
  Return true if and only if the given array A is monotonic.
   



  Example 1:
  Input: [1,2,2,3]
  Output: true


  Example 2:
  Input: [6,5,4,4]
  Output: true


  Example 3:
  Input: [1,3,2]
  Output: false


  Example 4:
  Input: [1,2,4,5]
  Output: true


  Example 5:
  Input: [1,1,1]
  Output: true

   
  Note:

  1 <= A.length <= 50000
  -100000 <= A[i] <= 100000
vc-preamble: |
  import Imports.AllImports

  def is_monotonic (nums: List Int) : Bool := sorry

  theorem empty_or_single_element_lists_monotonic (nums: List Int) : 
    nums.length ≤ 1 → is_monotonic nums := sorry
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def isSorted (nums: List Int) : Bool := 
    match nums with
    | [] => true
    | [_] => true
    | x::y::rest => x ≤ y && isSorted (y::rest)
vc-theorems: |
  theorem identical_elements_monotonic (nums: List Int) (x: Int) (h: nums.length ≥ 2) :
    (∀ i: Fin nums.length, nums.get i = x) → is_monotonic nums := sorry


  theorem sorted_lists_monotonic (nums: List Int) (h: nums.length ≥ 2) :
    isSorted nums → is_monotonic nums := sorry


  theorem non_monotonic_lists_false (nums: List Int) (h: nums.length ≥ 3) :
    (∀ i: Fin nums.length, ∀ j: Fin nums.length, 
      i.val + 1 = j.val → ¬(nums.get i ≤ nums.get j)) ∧
    (∀ i: Fin nums.length, ∀ j: Fin nums.length,
      i.val + 1 = j.val → ¬(nums.get i ≥ nums.get j)) →
    ¬is_monotonic nums := sorry

  /--
  info: True
  -/
  #guard_msgs in
  #eval is_monotonic [1, 2, 2, 3]

  /--
  info: True
  -/
  #guard_msgs in
  #eval is_monotonic [6, 5, 4, 4]

  /--
  info: False
  -/
  #guard_msgs in
  #eval is_monotonic [1, 3, 2]
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
