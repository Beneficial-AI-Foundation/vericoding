vc-description: |-
  Complete the solution so that it takes the object (JavaScript/CoffeeScript) or hash (ruby) passed in and generates a human readable string from its key/value pairs. 
  
  The format should be "KEY = VALUE". Each key/value pair should be separated by a comma except for the last pair.
  
  **Example:**
  ```python
  solution({"a": 1, "b": '2'}) # should return "a = 1,b = 2"
  ```

vc-preamble: |-
  def Dict := List (String × (String ⊕ Int))
  
  def solution (d : Dict) : String :=
    sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def isSorted (xs : List String) : Prop :=
    ∀ i j, i < j → j < xs.length → xs[i]! ≤ xs[j]!

vc-theorems: |-
  theorem solution_output_sorted (d : Dict) (h : d.length > 0) : 
    let result := solution d
    let pairs := result.splitOn ","
    isSorted pairs := by
    sorry
  
  theorem solution_contains_all_pairs (d : Dict) (h : d.length > 0) : 
    let result := solution d
    let pairs := result.splitOn ","  
    ∀ p ∈ d, ∃ pair ∈ pairs, 
      match p.2 with
      | Sum.inl s => pair = s!"{p.1} = {s}"
      | Sum.inr n => pair = s!"{p.1} = {n}" := by
    sorry 
  
  theorem solution_empty (d : Dict) (h : d = []) :
    solution d = "" := by
    sorry
  
  /--
  info: 'a = 1,b = 2'
  -/
  #guard_msgs in
  #eval solution {"a": 1, "b": 2}
  
  /--
  info: 'a = b,b = a'
  -/
  #guard_msgs in
  #eval solution {"a": "b", "b": "a"}
  
  /--
  info: ''
  -/
  #guard_msgs in
  #eval solution {}

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

