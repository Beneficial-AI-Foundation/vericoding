vc-description: |-
  Your task is to ___find the next higher number (int) with same '1'- Bits___.
  
  I.e. as much `1` bits as before and output next higher than input. Input is always an int in between 1 and 1<<30 (inclusive). No bad cases or special tricks... 
  
  ### Some easy examples:
  
  ```
  Input: 129  => Output: 130 (10000001 => 10000010)
  Input: 127 => Output: 191 (01111111 => 10111111)
  Input: 1 => Output: 2 (01 => 10)
  Input: 323423 => Output: 323439 (1001110111101011111 => 1001110111101101111)
  ```
  
  First some static tests, later on many random tests too;-)!
  
  ### Hope you have fun! :-)

vc-preamble: |-
  def next_higher (n : Nat) : Nat :=
    sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def countOnes (n : Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem next_higher_preserves_bit_count (n : Nat) (h : n > 0) (h2 : n < 2^16) :
    countOnes n = countOnes (next_higher n) :=
    sorry
  
  theorem next_higher_is_higher (n : Nat) (h : n > 0) (h2 : n < 2^16) :
    next_higher n > n :=
    sorry
  
  theorem next_higher_power_two (i : Nat) (h : i < 8) :
    next_higher (2^i) = 2^(i+1) :=
    sorry
  
  /--
  info: 256
  -/
  #guard_msgs in
  #eval next_higher 128
  
  /--
  info: 191
  -/
  #guard_msgs in
  #eval next_higher 127
  
  /--
  info: 2
  -/
  #guard_msgs in
  #eval next_higher 1

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

