vc-description: |-
  Your task is to write a function named `do_math` that receives a single argument. 
  This argument is a string that contains multiple whitespace delimited numbers. Each number has a single alphabet letter somewhere within it.
  ```
  Example : "24z6 1x23 y369 89a 900b"
  ```
  As shown above, this alphabet letter can appear anywhere within the number. You have to extract the letters and sort the numbers according to their corresponding letters. 
  ```
  Example : "24z6 1x23 y369 89a 900b" will become 89 900 123 369 246 (ordered according to the alphabet letter)
  ```
  Here comes the difficult part, now you have to do a series of computations on the numbers you have extracted.

  * The sequence of computations are `+ - * /`. Basic math rules do **NOT** apply, you have to do each computation in exactly this order.
  * This has to work for any size of numbers sent in (after division, go back to addition, etc).
  * In the case of duplicate alphabet letters, you have to arrange them according to the number that appeared first in the input string.
  * Remember to also round the final answer to the nearest integer.

  ```
  Examples :
  "24z6 1x23 y369 89a 900b" = 89 + 900 - 123 * 369 / 246 = 1299
  "24z6 1z23 y369 89z 900b" = 900 + 369 - 246 * 123 / 89 = 1414
  "10a 90x 14b 78u 45a 7b 34y" = 10 + 45 - 14 * 7 / 78 + 90 - 34 = 60
  ``` 
  Good luck and may the CODE be with you!
vc-preamble: |
  import Imports.AllImports

  def do_math (input : String) : Int :=
    sorry
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def make_alpha_num (nums : List Int) (letters : List String) : String :=
    sorry
vc-theorems: |
  theorem do_math_returns_int {nums : List Int} {letters : List String}
    (h_nums_size : nums.length ≥ 2 ∧ nums.length ≤ 10)
    (h_letters_size : letters.length ≥ 2 ∧ letters.length ≤ 10)
    (h_nums_bound : ∀ n ∈ nums, 1 ≤ n ∧ n ≤ 1000)
    (h_letters_single : ∀ l ∈ letters, l.length = 1)
    : ∃ n : Int, do_math (make_alpha_num nums letters) = n :=
    sorry


  theorem letter_position_invariant {letter : String} 
    (h_letter_single : letter.length = 1) :
    do_math ("123" ++ letter ++ " 456" ++ letter) = 
    do_math (letter ++ "123 " ++ letter ++ "456") :=
    sorry

  /--
  info: 1414
  -/
  #guard_msgs in
  #eval do_math "24z6 1z23 y369 89z 900b"

  /--
  info: 1299
  -/
  #guard_msgs in
  #eval do_math "24z6 1x23 y369 89a 900b"

  /--
  info: 60
  -/
  #guard_msgs in
  #eval do_math "10a 90x 14b 78u 45a 7b 34y"
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
