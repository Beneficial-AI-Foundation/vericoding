vc-description: |-
  We write the integers of A and B (in the order they are given) on two separate horizontal lines.
  Now, we may draw connecting lines: a straight line connecting two numbers A[i] and B[j] such that:
  
  A[i] == B[j];
  The line we draw does not intersect any other connecting (non-horizontal) line.
  
  Note that a connecting lines cannot intersect even at the endpoints: each number can only belong to one connecting line.
  Return the maximum number of connecting lines we can draw in this way.
  
  Example 1:
  
  Input: A = [1,4,2], B = [1,2,4]
  Output: 2
  Explanation: We can draw 2 uncrossed lines as in the diagram.
  We cannot draw 3 uncrossed lines, because the line from A[1]=4 to B[2]=4 will intersect the line from A[2]=2 to B[1]=2.
  
  Example 2:
  Input: A = [2,5,1,2,5], B = [10,5,2,1,5,2]
  Output: 3
  
  Example 3:
  Input: A = [1,3,7,1,7,5], B = [1,9,2,5,1]
  Output: 2
  
  Note:
  
  1 <= A.length <= 500
  1 <= B.length <= 500
  1 <= A[i], B[i] <= 2000

vc-preamble: |-
  def max_uncrossed_lines (a b : List Nat) : Nat :=
    sorry
  
  def List.min_length (a b : List α) : Nat :=
    min a.length b.length

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def List.everyOther : List α → List α
    | [] => []
    | [x] => [x]
    | x :: _ :: xs => x :: everyOther xs

vc-theorems: |-
  theorem max_uncrossed_lines_nonnegative (a b : List Nat) :
    max_uncrossed_lines a b ≥ 0 :=
    sorry
  
  theorem max_uncrossed_lines_upper_bound (a b : List Nat) :
    max_uncrossed_lines a b ≤ min a.length b.length :=
    sorry
  
  theorem max_uncrossed_lines_empty (a b : List Nat) :
    a = [] ∨ b = [] → max_uncrossed_lines a b = 0 :=
    sorry
  
  theorem max_uncrossed_lines_identical (a : List Nat) :
    max_uncrossed_lines a a = a.length :=
    sorry
  
  theorem max_uncrossed_lines_reverse (a b : List Nat) :
    max_uncrossed_lines a b = max_uncrossed_lines a.reverse b.reverse :=
    sorry
  
  theorem max_uncrossed_lines_edge_cases :
    max_uncrossed_lines [] [] = 0 ∧
    max_uncrossed_lines [1] [] = 0 ∧ 
    max_uncrossed_lines [] [1] = 0 :=
    sorry
  
  /--
  info: 2
  -/
  #guard_msgs in
  #eval max_uncrossed_lines [1, 4, 2] [1, 2, 4]
  
  /--
  info: 3
  -/
  #guard_msgs in
  #eval max_uncrossed_lines [2, 5, 1, 2, 5] [10, 5, 2, 1, 5, 2]
  
  /--
  info: 2
  -/
  #guard_msgs in
  #eval max_uncrossed_lines [1, 3, 7, 1, 7, 5] [1, 9, 2, 5, 1]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible

