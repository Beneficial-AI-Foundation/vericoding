vc-description: |-
  Create a function that returns an array containing the first `l` digits from the `n`th diagonal of [Pascal's triangle](https://en.wikipedia.org/wiki/Pascal's_triangle).

  `n = 0` should generate the first diagonal of the triangle (the 'ones'). The first number in each diagonal should be 1.

  If `l = 0`, return an empty array. Assume that both `n` and `l` will be non-negative integers in all test cases.
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def generate_diagonal (d : Nat) (l : Nat) : List Nat :=
    sorry
vc-theorems: |
  theorem generate_diagonal_length
    (d l : Nat) :
    (generate_diagonal d l).length = l :=
    sorry


  theorem generate_diagonal_first_element
    {d l : Nat}
    (h : l > 0) :
    (generate_diagonal d l).get ⟨0, sorry⟩ = 1 :=
    sorry


  theorem generate_diagonal_pattern
    {d l i: Nat}
    (h1 : i < l)
    (h2 : i > 0) :
    let result := generate_diagonal d l
    (result.get ⟨i, sorry⟩) = (result.get ⟨i-1, sorry⟩) * (d+i) / i :=
    sorry


  theorem zero_diagonal_all_ones
    (l : Nat) : 
    List.all (generate_diagonal 0 l) (· = 1) :=
    sorry


  theorem empty_length
    (d : Nat) :
    generate_diagonal d 0 = [] :=
    sorry

  /--
  info: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
  -/
  #guard_msgs in
  #eval generate_diagonal 0 10

  /--
  info: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  -/
  #guard_msgs in
  #eval generate_diagonal 1 10

  /--
  info: [1, 101, 5151, 176851, 4598126, 96560646]
  -/
  #guard_msgs in
  #eval generate_diagonal 100 6
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible
