vc-description: |-
  Given an array A of integers, return the length of the longest arithmetic subsequence in A.
  Recall that a subsequence of A is a list A[i_1], A[i_2], ..., A[i_k] with 0 <= i_1 < i_2 < ... < i_k <= A.length - 1, and that a sequence B is arithmetic if B[i+1] - B[i] are all the same value (for 0 <= i < B.length - 1).
   
  Example 1:
  Input: A = [3,6,9,12]
  Output: 4
  Explanation: 
  The whole array is an arithmetic sequence with steps of length = 3.

  Example 2:
  Input: A = [9,4,7,2,10]
  Output: 3
  Explanation: 
  The longest arithmetic subsequence is [4,7,10].

  Example 3:
  Input: A = [20,1,15,3,10,5,8]
  Output: 4
  Explanation: 
  The longest arithmetic subsequence is [20,15,10,5].

   
  Constraints:

  2 <= A.length <= 1000
  0 <= A[i] <= 500
vc-preamble: |
  import Imports.AllImports

  def longestArithSeqLength (arr : List Int) : Nat :=
    sorry
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def countMaxOccurrences (arr : List Int) : Nat :=
    let counts := arr.map (λ x => arr.count x)
    counts.foldl Nat.max 0
vc-theorems: |
  theorem min_length_at_least_two {arr : List Int} (h : arr.length ≥ 1) :
    longestArithSeqLength arr ≥ 2 :=
    sorry


  theorem dupes_counted_properly {arr : List Int} (h : arr.length ≥ 2) :
    longestArithSeqLength arr ≥ countMaxOccurrences arr :=
    sorry


  theorem arithmetic_sequence_preserved {arr : List Int} (h₁ : arr.length ≥ 3) (h₂ : arr.length ≤ 10) :
    let diff := arr[1]! - arr[0]!
    let arithSeq := (List.range arr.length).map (λ i => arr[0]! + diff * (Int.ofNat i))
    longestArithSeqLength arithSeq = arithSeq.length :=
    sorry


  theorem reverse_same_result {arr : List Int} (h : arr.length ≥ 2) :
    longestArithSeqLength arr = longestArithSeqLength arr.reverse :=
    sorry

  /--
  info: 4
  -/
  #guard_msgs in
  #eval longestArithSeqLength [3, 6, 9, 12]

  /--
  info: 3
  -/
  #guard_msgs in
  #eval longestArithSeqLength [9, 4, 7, 2, 10]

  /--
  info: 4
  -/
  #guard_msgs in
  #eval longestArithSeqLength [20, 1, 15, 3, 10, 5, 8]
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
