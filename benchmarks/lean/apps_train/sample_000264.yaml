vc-description: |-
  Given an array of non-negative integers, you are initially positioned at the first index of the array.
  
  Each element in the array represents your maximum jump length at that position.
  
  Determine if you are able to reach the last index.
  
  Example 1:
  
  Input: [2,3,1,1,4]
  Output: true
  Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
  
  Example 2:
  
  Input: [3,2,1,0,4]
  Output: false
  Explanation: You will always arrive at index 3 no matter what. Its maximum
               jump length is 0, which makes it impossible to reach the last index.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def can_jump (nums : List Nat) : Bool :=
    sorry

vc-theorems: |-
  theorem single_element_always_true (nums : List Nat) :
    nums.length = 1 → can_jump nums = true :=
    sorry
  
  theorem all_nonzero_jumps_reach_end (nums : List Nat) :
    nums.length > 0 → 
    (∀ i, i < nums.length - 1 → nums[i]! > 0) →
    can_jump nums = true :=
    sorry
  
  theorem zero_at_start_cant_jump (nums : List Nat) :
    nums.length > 1 →
    nums[0]! = 0 →
    can_jump nums = false :=
    sorry
  
  theorem reaching_end_property (nums : List Nat) (i : Nat) :
    i < nums.length - 1 →
    nums[i]! = 0 →
    can_jump nums = true →
    ∃ j, j < i ∧ j + nums[j]! > i :=
    sorry
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval can_jump [2, 3, 1, 1, 4]
  
  /--
  info: False
  -/
  #guard_msgs in
  #eval can_jump [3, 2, 1, 0, 4]
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval can_jump [0]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

