vc-description: |-
  You have a very large square wall and a circular dartboard placed on the wall. You have been challenged to throw darts into the board blindfolded. Darts thrown at the wall are represented as an array of points on a 2D plane. 
  Return the maximum number of points that are within or lie on any circular dartboard of radius r.
   
  Example 1:

  Input: points = [[-2,0],[2,0],[0,2],[0,-2]], r = 2
  Output: 4
  Explanation: Circle dartboard with center in (0,0) and radius = 2 contain all points.

  Example 2:

  Input: points = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5
  Output: 5
  Explanation: Circle dartboard with center in (0,4) and radius = 5 contain all points except the point (7,8).

  Example 3:
  Input: points = [[-2,0],[2,0],[0,2],[0,-2]], r = 1
  Output: 1

  Example 4:
  Input: points = [[1,2],[3,5],[1,-1],[2,3],[4,1],[1,3]], r = 2
  Output: 4

   
  Constraints:

  1 <= points.length <= 100
  points[i].length == 2
  -10^4 <= points[i][0], points[i][1] <= 10^4
  1 <= r <= 5000
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def numPoints (points : List Point) (r : Float) : Nat :=
    sorry
vc-theorems: |
  theorem numPoints_bounds {points : List Point} {r : Float} 
    (h1 : r > 0)
    (h2 : points ≠ []) :
    1 ≤ numPoints points r ∧ numPoints points r ≤ points.length :=
  sorry


  theorem numPoints_tiny_radius {points : List Point} 
    (h1 : points ≠ [])
    (h2 : r = 0.1) :
    numPoints points r = 1 :=
  sorry


  theorem numPoints_huge_radius {points : List Point}
    (h1 : points ≠ [])
    (h2 : r = 1000) :
    numPoints points r = points.length :=
  sorry


  theorem numPoints_shuffle {points perm : List Point} {r : Float}
    (h1 : r > 0)
    (h2 : perm.length = points.length)
    (h3 : ∀ p, p ∈ points ↔ p ∈ perm) :
    numPoints points r = numPoints perm r :=
  sorry


  theorem numPoints_single_point {r : Float}
    (h : r > 0) :
    numPoints [Point.mk 0 0] r = 1 :=
  sorry


  theorem numPoints_exact_radius :
    numPoints [Point.mk 0 0, Point.mk 2 0] 1 = 2 :=
  sorry

  /--
  info: 4
  -/
  #guard_msgs in
  #eval numPoints [[-2, 0], [2, 0], [0, 2], [0, -2]] 2

  /--
  info: 5
  -/
  #guard_msgs in
  #eval numPoints [[-3, 0], [3, 0], [2, 6], [5, 4], [0, 9], [7, 8]] 5

  /--
  info: 4
  -/
  #guard_msgs in
  #eval numPoints [[1, 2], [3, 5], [1, -1], [2, 3], [4, 1], [1, 3]] 2
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
