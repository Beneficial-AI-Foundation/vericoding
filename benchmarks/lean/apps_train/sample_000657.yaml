vc-description: |-
  There is an event in DUCS where boys get a chance to show off their skills to impress girls. The boy who impresses the maximum number of girls will be honoured with the title “Charming Boy of the year”.
  There are $N$ girls in the department. Each girl gives the name of a boy who impressed her the most. You need to find the name of a boy who will be honoured with the title. 
  If there are more than one possible winners, then the one with the lexicographically smallest name is given the title. 
  It is guaranteed that each boy participating in the event has a unique name.

  -----Input-----
  - The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows. 
  - The first line of each test case contains an integer $N$ denoting the number of girls.
  - The second line contains $N$ space-separated strings $S_1, S_2, \ldots, S_N$, denoting the respective names given by the girls.

  -----Output-----
  For each test case, print a single line containing a string — the name of the boy who impressed the maximum number of girls. In case of a tie, print the lexicographically smallest name.

  -----Constraints-----
  - $1 \leq T \leq 100$
  - $1 \leq N \leq 10^5$
  - $1 \leq |S_i| \leq 10$, for each valid $i$
  $(|S_i|$ is the length of the string $S_i)$
  - For each valid $i$, $S_i$ contains only lowercase English alphabets
  - Sum of $N$ over all the test cases is $\leq 10^6$

  -----Subtasks-----
  - 30 points: $1 \leq N \leq 100$
  - 70 points: original constraints

  -----Sample Input-----
  2

  10

  john berry berry thomas thomas john john berry thomas john

  4

  ramesh suresh suresh ramesh   

  -----Sample Output-----
  john

  ramesh
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def find_charming_boy (n : Nat) (votes : List String) : String :=
    sorry
vc-theorems: |
  theorem find_charming_boy_in_votes (n : Nat) (votes : List String) :
    votes ≠ [] → find_charming_boy n votes ∈ votes :=
    sorry


  theorem find_charming_boy_is_top_voted (n : Nat) (votes : List String) :
    votes ≠ [] →
    let result := find_charming_boy n votes 
    let count := votes.countP (· = result)
    let max_count := (votes.map (λ v => votes.countP (· = v))).maximum?.get!
    count = max_count :=
    sorry


  theorem find_charming_boy_is_lex_min (n : Nat) (votes : List String) :
    votes ≠ [] →
    let result := find_charming_boy n votes
    let count := votes.countP (· = result)
    ∀ v ∈ votes, votes.countP (· = v) = count → result ≤ v :=
    sorry


  theorem find_charming_boy_order_independent (n : Nat) (votes₁ votes₂ : List String) :
    votes₁.length = n →
    votes₂.length = n →
    (∀ v, votes₁.countP (· = v) = votes₂.countP (· = v)) →
    find_charming_boy n votes₁ = find_charming_boy n votes₂ :=
    sorry


  theorem find_charming_boy_duplicate_invariant (n : Nat) (votes : List String) :
    votes.length = n →
    find_charming_boy n votes = find_charming_boy (2*n) (votes ++ votes) :=
    sorry

  /--
  info: 'john'
  -/
  #guard_msgs in
  #eval find_charming_boy 10 "john berry berry thomas thomas john john berry thomas john".split()

  /--
  info: 'ramesh'
  -/
  #guard_msgs in
  #eval find_charming_boy 4 "ramesh suresh suresh ramesh".split()

  /--
  info: 'andy'
  -/
  #guard_msgs in
  #eval find_charming_boy 5 "andy bob bob andy charlie".split()
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
