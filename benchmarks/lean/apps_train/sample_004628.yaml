vc-description: |-
  Brief
  =====
  In this easy kata your function has to take a **string** as input and **return a string** with everything removed (*whitespaces* included) but the **digits**. As you may have guessed **empty strings** are to be returned as they are & if the input string contains no digits then the output will be an **empty string**.By the way , you have to watch out for **non-string** inputs too.Return **'Invalid input !'** for them.    

  Hint
  ====
  If you're writing more than 1 line of code, then think again! ;)   
  Good luck!
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def digit_all (x : String) : String := sorry

  theorem digit_all_only_digits (s : String) :
    let result := digit_all s
    (∀ c ∈ result.data, c.isDigit) ∨ result = "" := sorry
vc-theorems: |
  theorem digit_all_preserves_digits (s : String) :
    let result := digit_all s
    String.mk (s.data.filter Char.isDigit) = result := sorry  


  theorem digit_all_output_is_subsequence (s : String) :
    let result := digit_all s
    result ≠ "Invalid input !" →
    ∃ l : List Nat, 
      (∀ i j, i < j → i < l.length → j < l.length → l[i]! < l[j]!) ∧ 
      (result.data = l.map (fun i => s.data[i]!)) := sorry

  /--
  info: '123456'
  -/
  #guard_msgs in
  #eval digit_all "123abc456"

  /--
  info: ''
  -/
  #guard_msgs in
  #eval digit_all ""

  /--
  info: 'Invalid input !'
  -/
  #guard_msgs in
  #eval digit_all 123
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
