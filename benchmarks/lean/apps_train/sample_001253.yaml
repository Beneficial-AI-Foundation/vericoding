vc-description: |-
  Chef has just started Programming, he is in first year of Engineering. Chef is reading about Relational Operators. 
  
  Relational Operators are operators which check relatioship between two values. Given two numerical values A and B you need to help chef in finding the relationship between them that is, 
  
  - First one is greater than second or,
  - First one is less than second or,
  - First and second one are equal.
  
  -----Input-----
  First line contains an integer T, which denotes the number of testcases. Each of the T lines contain two integers A and B. 
  
  -----Output-----
  For each line of input produce one line of output. This line contains any one of the relational operators
  
  '<' , '>' , '='.
  
  -----Constraints-----
  
  - 1 ≤ T ≤ 10000
  - 1 ≤ A, B ≤ 1000000001
  
  -----Example-----
  Input:
  3
  10 20
  20 10
  10 10
  
  Output:
  <
  >
  =
  
  -----Explanation-----
  Example case 1. In this example 1 as 10 is lesser than 20.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def check_relation (a b : Int) : RelationType := sorry
  
  def solve_multiple_testcases (cases : List (Int × Int)) : List RelationType := sorry

vc-theorems: |-
  theorem check_relation_valid (a b : Int) :
    let r := check_relation a b
    match r with
    | RelationType.less => a < b
    | RelationType.greater => a > b
    | RelationType.equal => a = b
    := sorry
  
  theorem check_relation_total (a b : Int) :
    let r := check_relation a b
    (r = RelationType.less ∨ r = RelationType.greater ∨ r = RelationType.equal)
    := sorry
  
  theorem solve_multiple_testcases_valid (cases : List (Int × Int)) :
    let results := solve_multiple_testcases cases
    (results.length = cases.length) ∧
    (∀ i : Nat, i < results.length → 
      results[i]! = check_relation cases[i]!.1 cases[i]!.2)
    := sorry
  
  theorem check_relation_transitive (a b c : Int) :
    (check_relation a b = RelationType.less ∧ check_relation b c = RelationType.less 
      → check_relation a c = RelationType.less) ∧
    (check_relation a b = RelationType.greater ∧ check_relation b c = RelationType.greater
      → check_relation a c = RelationType.greater)
    := sorry
  
  /--
  info: ['<', '>', '=']
  -/
  #guard_msgs in
  #eval solve_multiple_testcases [(10, 20), (20, 10), (10, 10)]
  
  /--
  info: ['<']
  -/
  #guard_msgs in
  #eval solve_multiple_testcases [(5, 7)]
  
  /--
  info: ['=']
  -/
  #guard_msgs in
  #eval solve_multiple_testcases [(1000000000, 1000000000)]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

