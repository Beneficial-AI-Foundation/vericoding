vc-description: |-
  Given an integer N, Chef wants to find the smallest positive integer M such that the bitwise XOR of M and M+1 is N. If no such M exists output -1.

  -----Input-----
  The first line of input contain an integer T denoting the number of test cases. Each of the following T lines contains an integer N for that test case.

  -----Output-----
  For each test case, output a single line containing the number M or -1 as described above.

  -----Constraints-----
  - 1 ≤ T ≤ 5000
  - 1 ≤ N ≤ 230

  -----Example-----
  Input:
  1
  3

  Output:
  1

  -----Explanation-----First Example :  M desired in the problem would be 1. As bitwise XOR of 1 and 2 is equal to 3.
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |+
  def find_smallest_xor_m (n : Nat) : Int :=
  sorry


vc-theorems: |
  theorem find_smallest_xor_m_no_solution (n : Nat) :
    find_smallest_xor_m n = -1 →
    ∀ m : Nat, m ≤ n + 2 → m ^^^ (m + 1) ≠ n :=
  sorry


  theorem find_smallest_xor_m_invalid_inputs (n : Int) :
    n ≤ 0 → find_smallest_xor_m n.toNat = -1 :=
  sorry

  /--
  info: 1
  -/
  #guard_msgs in
  #eval find_smallest_xor_m 3

  /--
  info: 2
  -/
  #guard_msgs in
  #eval find_smallest_xor_m 1

  /--
  info: -1
  -/
  #guard_msgs in
  #eval find_smallest_xor_m 4
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible
