vc-description: |-
  # Task
  Imagine `n` horizontal lines and `m` vertical lines.
  
  Some of these lines intersect, creating rectangles.
  
  How many rectangles are there?
  
  # Examples
  
  For `n=2, m=2,` the result should be `1`.
  
  there is only one 1x1 rectangle.
  
  For `n=2, m=3`, the result should be `3`.
  
  there are two 1x1 rectangles and one 1x2 rectangle. So `2 + 1 = 3`.
  
  For n=3, m=3, the result should be `9`.
  
  there are four 1x1 rectangles, two 1x2 rectangles, two 2x1 rectangles and one 2x2 rectangle. So `4 + 2 + 2 + 1 = 9`.
  
  # Input & Output
  
  - `[input]` integer `n`
  
  Number of horizontal lines.
  
  Constraints: `0 <= n <= 100`
  
  - `[input]` integer `m`
  
  Number of vertical lines.
  
  Constraints: `0 <= m <= 100`
  
  - `[output]` an integer
  
  Number of rectangles.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def rectangles (n m : Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem rectangles_symmetry
    (n m : Nat)
    (h1 : n ≥ 2)
    (h2 : m ≥ 2) :
    rectangles n m = rectangles m n :=
    sorry
  
  theorem rectangles_non_negative
    (n m : Nat)
    (h1 : n ≥ 2)
    (h2 : m ≥ 2) :
    rectangles n m ≥ 0 :=
    sorry
  
  theorem rectangles_single_line_n
    (n : Nat)
    (h : n ≥ 1) :
    rectangles 1 n = 0 :=
    sorry
  
  theorem rectangles_single_line_m
    (n : Nat)
    (h : n ≥ 1) :
    rectangles n 1 = 0 :=
    sorry
  
  theorem rectangles_monotonic_n
    (n m : Nat)
    (h1 : n ≥ 2)
    (h2 : m ≥ 2) :
    rectangles (n + 1) m ≥ rectangles n m :=
    sorry
  
  theorem rectangles_monotonic_m
    (n m : Nat)
    (h1 : n ≥ 2)
    (h2 : m ≥ 2) :
    rectangles n (m + 1) ≥ rectangles n m :=
    sorry
  
  /--
  info: 3
  -/
  #guard_msgs in
  #eval rectangles 2 3
  
  /--
  info: 1
  -/
  #guard_msgs in
  #eval rectangles 2 2
  
  /--
  info: 9
  -/
  #guard_msgs in
  #eval rectangles 3 3

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

