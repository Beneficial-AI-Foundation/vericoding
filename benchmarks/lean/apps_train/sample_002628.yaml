vc-description: |-
  Find the length between 2 co-ordinates.  The co-ordinates are made of integers between -20 and 20 and will be given in the form of a 2D array:

  (0,0) and (5,-7) would be [ [ 0 , 0 ] , [ 5, -7 ] ]

  The function must return the answer rounded to 2 decimal places in the form of a string.

  ```python
  length_of_line([[0, 0], [5, -7]]) => "8.60"
  ```

  If the 2 given co-ordinates are the same, the returned length should be "0.00"
vc-preamble: |
  import Imports.AllImports

  def length_of_line (coords : List (List Int)) : String := sorry

  def string_to_float (s : String) : Float := sorry
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def int_to_float (i : Int) : Float := sorry

  theorem length_matches_pythagorean 
    (coords : List (List Int))
    (x1 y1 x2 y2 : Int)
    (h1 : coords.length = 2)
    (h2 : coords[0]!.length = 2)
    (h3 : coords[1]!.length = 2)
    (h4 : coords[0]![0]! = x1)
    (h5 : coords[0]![1]! = y1) 
    (h6 : coords[1]![0]! = x2)
    (h7 : coords[1]![1]! = y2) :
    let result := string_to_float (length_of_line coords)
    let expected := Float.sqrt (int_to_float ((x2 - x1) ^ 2 + (y2 - y1) ^ 2))
    Float.abs (result - expected) < 0.01 := sorry
vc-theorems: |
  theorem length_commutative
    (coords : List (List Int))
    (h1 : coords.length = 2)
    (h2 : coords[0]!.length = 2)
    (h3 : coords[1]!.length = 2) :
    length_of_line coords = length_of_line [coords[1]!, coords[0]!] := sorry


  theorem same_point_zero
    (coords : List (List Int))
    (h1 : coords.length = 2)
    (h2 : coords[0]!.length = 2) :
    length_of_line [coords[0]!, coords[0]!] = "0.00" := sorry


  theorem triangle_inequality
    (coords : List (List Int))
    (x1 y1 x2 y2 : Int)
    (h1 : coords.length = 2)
    (h2 : coords[0]!.length = 2)
    (h3 : coords[1]!.length = 2)
    (h4 : coords[0]![0]! = x1)
    (h5 : coords[0]![1]! = y1)
    (h6 : coords[1]![0]! = x2)
    (h7 : coords[1]![1]! = y2) :
    let mx := (x1 + x2) / 2
    let my := (y1 + y2) / 2
    let midpoint := [mx, my]
    let result := string_to_float (length_of_line coords)
    let via_mid := string_to_float (length_of_line [coords[0]!, midpoint]) + 
                   string_to_float (length_of_line [midpoint, coords[1]!])
    result â‰¤ via_mid + 0.01 := sorry

  /--
  info: '1.41'
  -/
  #guard_msgs in
  #eval length_of_line [[0, 0], [1, 1]]

  /--
  info: '0.00'
  -/
  #guard_msgs in
  #eval length_of_line [[0, 0], [0, 0]]

  /--
  info: '13.04'
  -/
  #guard_msgs in
  #eval length_of_line [[-3, 4], [10, 5]]
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
