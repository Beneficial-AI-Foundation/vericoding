vc-description: |-
  You are a king and you are at war. If the enemy breaks through your frontline you lose.
  Enemy can break the line only if the sum of morale of any $K$ continuous soldiers is strictly less than $M$. So, you being a motivational orator decides to boost their morale by giving a speech. On hearing it morale of a soldier multiplies by $X$ which depends on you and your speech (i.e. $X$ can be any positive value) but atmost only $K$ continuous speakers can hear your speech.
  N soldiers are standing on the frontline with $A[i]$ morale. 
  Determine the minimum number of speeches you need to give.

  -----Input:-----
  The first line contains three space seperated integers $N,K,M$.
  The next line contains $N$ space integers, ith of which denotes the morale of $ith$ soldier.

  -----Output:-----
  Output the minimum number of speeches required. In case if it is impossible to achieve, print $-1$.

  -----Constraints:-----
  $1 \leq N,M \leq 10^5$
  $1 \leq k \leq N$
  $0 \leq Ai \leq 10^5$ 

  -----Sample Input:-----
  6 2 5
  1 1 1 1 1 1

  -----Sample Output:-----
  2

  -----Explanation:-----
  We multiply 2nd ,3rd  and 5th,6th by 5. Resulting array will be 1 5 5 1 5 5.
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |-
  def min_speeches (n k m : Nat) (arr : List Nat) : Int := sorry

  -- Theorem 1: If input array contains 0, result is -1
vc-theorems: |
  theorem min_speeches_zero_in_array
    (n k m : Nat)
    (arr : List Nat)
    (h1 : k ≤ n)
    (h2 : arr.length = n)
    (h3 : ∃ x ∈ arr, x = 0) :
    min_speeches n k m arr = -1 := sorry

  -- Theorem 2: If no zeros in array, result is non-negative

  theorem min_speeches_no_zero_nonneg
    (n k m : Nat)
    (arr : List Nat)
    (h1 : k ≤ n) 
    (h2 : arr.length = n)
    (h3 : ∀ x ∈ arr, x ≠ 0) :
    min_speeches n k m arr ≥ 0 := sorry

  -- Theorem 3: Large enough values need 0 speeches

  theorem min_speeches_large_values_zero
    (n k : Nat)
    (h : k ≤ n) :
    min_speeches n k 1 (List.replicate n 1000) = 0 := sorry

  /--
  info: 3
  -/
  #guard_msgs in
  #eval min_speeches 6 2 5 [1, 1, 1, 1, 1, 1]

  /--
  info: 2
  -/
  #guard_msgs in
  #eval min_speeches 5 2 4 [1, 1, 1, 1, 1]

  /--
  info: -1
  -/
  #guard_msgs in
  #eval min_speeches 4 2 3 [0, 1, 1, 0]
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded
