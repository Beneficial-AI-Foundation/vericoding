vc-description: |-
  Create a `Vector` class with `x` and a `y` attributes that represent component magnitudes in the x and y directions.

  Your vectors should handle vector additon with an `.add()` method that takes a second vector as an argument and returns a new vector equal to the sum of the vector you call `.add()` on and the vector you pass in.

  For example:

  ```python
  >>> a = Vector(3, 4)
  >>> a.x
  3
  >>> a.y
  4
  >>> b = Vector(1, 2)
  >>> c = a.add(b)
  >>> c.x
  4
  >>> c.y
  6
  ```

  Adding vectors when you have their components is easy: just add the two x components together and the two y components together to get the x and y components for the vector sum.
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def Vector.add : Vector → Vector → Vector
    | v1, v2 => sorry
vc-theorems: |-
  theorem vector_addition_coordinates (v1 v2 : Vector) :
    let result := v1.add v2
    result.x = v1.x + v2.x ∧ result.y = v1.y + v2.y :=
  sorry


  theorem vector_addition_commutative (v1 v2 : Vector) : 
    v1.add v2 = v2.add v1 :=
  sorry


  theorem zero_vector_identity (v : Vector) :
    let zero := Vector.mk 0 0
    v.add zero = v :=
  sorry


  theorem inverse_vector_sum_zero (v : Vector) :
    let inverse := Vector.mk (-v.x) (-v.y)
    let result := v.add inverse
    result.x = 0 ∧ result.y = 0 :=
  sorry
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded
