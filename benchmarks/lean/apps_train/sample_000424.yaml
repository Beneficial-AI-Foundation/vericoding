vc-description: |-
  Given a binary array nums, you should delete one element from it.
  Return the size of the longest non-empty subarray containing only 1's in the resulting array.
  Return 0 if there is no such subarray.
   
  Example 1:
  Input: nums = [1,1,0,1]
  Output: 3
  Explanation: After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's.
  Example 2:
  Input: nums = [0,1,1,1,0,1,1,0,1]
  Output: 5
  Explanation: After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1].
  Example 3:
  Input: nums = [1,1,1]
  Output: 2
  Explanation: You must delete one element.
  Example 4:
  Input: nums = [1,1,0,0,1,1,1,0,1]
  Output: 4

  Example 5:
  Input: nums = [0,0,0]
  Output: 0

   
  Constraints:

  1 <= nums.length <= 10^5
  nums[i] is either 0 or 1.
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def longest_subarray_ones_after_delete (nums: List Nat) : Nat :=
    sorry
vc-theorems: |
  theorem longest_subarray_basic_properties {nums : List Nat}
    (h: ∀ x, x ∈ nums → x ≤ 1) : 
    let result := longest_subarray_ones_after_delete nums
    -- Result non-negative
    result ≥ 0 ∧ 
    -- Result not exceeding input length
    result ≤ nums.length :=
  sorry


  theorem longest_subarray_all_ones {nums : List Nat}
    (h1: nums.length > 0)
    (h2: ∀ x, x ∈ nums → x = 1) :
    longest_subarray_ones_after_delete nums = nums.length - 1 :=
  sorry


  theorem longest_subarray_concatenation {arr1 arr2 : List Nat}
    (h: ∀ x, (x ∈ arr1 ∨ x ∈ arr2) → x ≤ 1) :
    let result := longest_subarray_ones_after_delete (arr1 ++ arr2)
    result ≥ longest_subarray_ones_after_delete arr1 ∧
    result ≥ longest_subarray_ones_after_delete arr2 :=
  sorry

  /--
  info: 3
  -/
  #guard_msgs in
  #eval longest_subarray_ones_after_delete [1, 1, 0, 1]

  /--
  info: 5
  -/
  #guard_msgs in
  #eval longest_subarray_ones_after_delete [0, 1, 1, 1, 0, 1, 1, 0, 1]

  /--
  info: 2
  -/
  #guard_msgs in
  #eval longest_subarray_ones_after_delete [1, 1, 1]
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded
