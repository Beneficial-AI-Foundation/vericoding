vc-description: |-
  Given a list of intervals, remove all intervals that are covered by another interval in the list.
  Interval [a,b) is covered by interval [c,d) if and only if c <= a and b <= d.
  After doing so, return the number of remaining intervals.
   
  Example 1:
  Input: intervals = [[1,4],[3,6],[2,8]]
  Output: 2
  Explanation: Interval [3,6] is covered by [2,8], therefore it is removed.

  Example 2:
  Input: intervals = [[1,4],[2,3]]
  Output: 1

  Example 3:
  Input: intervals = [[0,10],[5,12]]
  Output: 2

  Example 4:
  Input: intervals = [[3,10],[4,10],[5,11]]
  Output: 2

  Example 5:
  Input: intervals = [[1,2],[1,4],[3,4]]
  Output: 1

   
  Constraints:

  1 <= intervals.length <= 1000
  intervals[i].length == 2
  0 <= intervals[i][0] < intervals[i][1] <= 10^5
  All the intervals are unique.
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |+
  def remove_covered_intervals (intervals: List Interval) : Int :=
    sorry


vc-theorems: |
  theorem remove_covered_intervals_empty :
    remove_covered_intervals [] = 0 :=
    sorry

  /--
  info: 2
  -/
  #guard_msgs in
  #eval remove_covered_intervals [[1, 4], [3, 6], [2, 8]]

  /--
  info: 1
  -/
  #guard_msgs in
  #eval remove_covered_intervals [[1, 4], [2, 3]]

  /--
  info: 2
  -/
  #guard_msgs in
  #eval remove_covered_intervals [[3, 10], [4, 10], [5, 11]]
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible
