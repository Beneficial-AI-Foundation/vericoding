vc-description: |-
  Robinson Crusoe decides to explore his isle. On a sheet of paper he plans the following process.

  His hut has coordinates `origin = [0, 0]`. From that origin he walks a given distance `d` on a line
  that has a given angle `ang` with the x-axis. He gets to a point A.
  (Angles are measured with respect to the x-axis) 

  From that point A he walks the distance `d` multiplied by a constant `distmult` on a line that 
  has the angle `ang` multiplied by a constant `angmult` and so on and on.

  We have `d0 = d`, `ang0 = ang`; then `d1 = d * distmult`, `ang1 = ang * angmult` etc ...

  Let us suppose he follows this process n times.
  What are the coordinates `lastx, lasty` of the last point?

  The function `crusoe` has parameters;
  - n        : numbers of steps in the process
  - d        : initial chosen distance
  - ang      : initial chosen angle in degrees
  - distmult : constant multiplier of the previous distance
  - angmult  : constant multiplier of the previous angle

  `crusoe(n, d, ang, distmult, angmult)` should return
  `lastx, lasty` as an array or a tuple depending on the language.

  ### Example:
  `crusoe(5, 0.2, 30, 1.02, 1.1)` ->

  The successive `x` are : `0.0, 0.173205, 0.344294, 0.511991, 0.674744, 0.830674` (approximately)

  The successive `y` are : `0.0, 0.1, 0.211106, 0.334292, 0.47052, 0.620695` (approximately)

  and
  ```
  lastx: 0.8306737544381833
  lasty: 0.620694691344071
  ```
  ### A drawing:

  ![alternative text](https://i.imgur.com/SGHbb6Vl.png)

  Successive points:

  - x: `0.0, 0.9659..., 1.8319..., 2.3319..., 1.8319...`
  - y: `0.0, 0.2588..., 0.7588..., 1.6248..., 2.4908...`

  ### Note
  Please could you ask before translating: some translations are already written and published when/if the kata is approved.
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def crusoe (n : Nat) (d ang dist_mult ang_mult : Float) : Float × Float :=
    sorry
vc-theorems: |
  theorem crusoe_results_finite (n : Nat) (d ang dist_mult ang_mult : Float)
    (h1 : 0 ≤ n ∧ n ≤ 100)
    (h2 : 0 ≤ d ∧ d ≤ 10) 
    (h3 : -360 ≤ ang ∧ ang ≤ 360)
    (h4 : 0.1 < dist_mult ∧ dist_mult ≤ 2.0)
    (h5 : 0.1 < ang_mult ∧ ang_mult ≤ 2.0) :
    let (x, y) := crusoe n d ang dist_mult ang_mult
    Float.isFinite x ∧ Float.isFinite y :=
  sorry


  theorem crusoe_zero_steps (d ang dist_mult ang_mult : Float) :
    crusoe 0 d ang dist_mult ang_mult = (0, 0) :=
  sorry


  theorem crusoe_zero_distance (ang dist_mult ang_mult : Float) :
    crusoe 1 0 ang dist_mult ang_mult = (0, 0) :=
  sorry


  theorem crusoe_symmetry (d ang : Float)
    (h1 : 0 ≤ d ∧ d ≤ 10)
    (h2 : -360 ≤ ang ∧ ang ≤ 360) :
    let (x1, y1) := crusoe 1 d ang 1.0 1.0
    let (x2, y2) := crusoe 1 d (ang + 180) 1.0 1.0
    x1 = -x2 ∧ y1 = -y2 := 
  sorry

  /--
  info: round(0.8306737544381833, 7)
  -/
  #guard_msgs in
  #eval round 0 7

  /--
  info: round(0.620694691344071, 7)
  -/
  #guard_msgs in
  #eval round y 7

  /--
  info: 0.7071068
  -/
  #guard_msgs in
  #eval round x 7

  /--
  info: 0.7071068
  -/
  #guard_msgs in
  #eval round y 7
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
