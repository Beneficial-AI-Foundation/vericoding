vc-description: |-
  You are given an array x of n positive numbers. You start at point (0,0) and moves x[0] metres to the north, then x[1] metres to the west,
      x[2] metres to the south,
      x[3] metres to the east and so on. In other words, after each move your direction changes
      counter-clockwise.


      Write a one-pass algorithm with O(1) extra space to determine, if your path crosses itself, or not.



  Example 1:

  Given x = [2, 1, 1, 2],
  ?????
  ?   ?
  ???????>
      ?

  Return true (self crossing)




  Example 2:

  Given x = [1, 2, 3, 4],
  ????????
  ?      ?
  ?
  ?
  ?????????????>

  Return false (not self crossing)




  Example 3:

  Given x = [1, 1, 1, 1],
  ?????
  ?   ?
  ?????>

  Return true (self crossing)



  Credits:Special thanks to @dietpepsi for adding this problem and creating all test cases.
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def isSelfCrossing (moves : List Int) : Bool := sorry

  theorem short_sequences_never_cross (moves: List Int)
    (h: moves.length < 4)
    (h_nonneg : ∀ x ∈ moves, x ≥ 0) :
    ¬(isSelfCrossing moves) := sorry
vc-theorems: |
  theorem equal_square_forms_crossing (moves: List Int)
    (h_len: moves.length = 4)
    (h_pos: ∀ x ∈ moves, x > 0)
    (h_equal: ∀ i j, i < moves.length → j < moves.length → moves[i]! = moves[j]!) :
    isSelfCrossing moves := sorry


  theorem growing_spiral_never_crosses (moves: List Int)
    (h_len: moves.length = 4)
    (h_pos: ∀ x ∈ moves, x > 0)
    (h_increasing: ∀ i, i + 1 < moves.length → moves[i]! < moves[i+1]!) :
    ¬(isSelfCrossing moves) := sorry


  theorem negative_moves_invalid (moves: List Int)
    (h: ∃ x ∈ moves, x < 0) :
    isSelfCrossing moves = false := sorry


  theorem delayed_crossing_occurs (moves: List Int)
    (h_len: moves.length = 6)
    (h_nonneg: ∀ x ∈ moves, x ≥ 0)
    (h_cross: moves[5]! ≥ moves[3]! ∧ moves[4]! = moves[2]!) :
    isSelfCrossing moves := sorry

  /--
  info: True
  -/
  #guard_msgs in
  #eval is_self_crossing [2, 1, 1, 2]

  /--
  info: False
  -/
  #guard_msgs in
  #eval is_self_crossing [1, 2, 3, 4]

  /--
  info: True
  -/
  #guard_msgs in
  #eval is_self_crossing [1, 1, 1, 1]
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
