vc-description: |-
  If you like Taco Bell, you will be familiar with their signature doritos locos taco. They're very good.


  Why can't everything be a taco? We're going to attempt that here, turning every word we find into the taco bell recipe with each ingredient.


  We want to input a word as a string, and return a list representing that word as a taco.

  ***Key***

  all vowels (except 'y') = beef

  t = tomato

  l = lettuce

  c = cheese

  g = guacamole

  s = salsa

    
  ***NOTE***    
  We do not care about case here. 'S' is therefore equivalent to 's' in our taco.
    
  Ignore all other letters; we don't want our taco uneccesarily clustered or else it will be too difficult to eat.

  Note that no matter what ingredients are passed, our taco will always have a shell.
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def tacofy (word : String) : List String := sorry

  def VALID_INGREDIENTS : List String := ["tomato", "lettuce", "cheese", "guacamole", "salsa", "beef"]
vc-theorems: |
  theorem tacofy_always_has_shells (word : String) :
    let result := tacofy word
    result.head? = some "shell" ∧ 
    result.getLast? = some "shell" ∧
    result.length ≥ 2 := sorry 


  theorem tacofy_valid_ingredients (word : String) :
    let result := tacofy word
    let middle := result.drop 1 |>.dropLast
    ∀ ing ∈ middle, ing ∈ VALID_INGREDIENTS := sorry

  /--
  info: ['shell', 'shell']
  -/
  #guard_msgs in
  #eval tacofy ""

  /--
  info: ['shell', 'beef', 'guacamole', 'lettuce', 'shell']
  -/
  #guard_msgs in
  #eval tacofy "ogl"

  /--
  info: ['shell', 'beef', 'tomato', 'lettuce', 'cheese', 'guacamole', 'salsa', 'shell']
  -/
  #guard_msgs in
  #eval tacofy "abtlcgs"
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
