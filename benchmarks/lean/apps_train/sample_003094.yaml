vc-description: |-
  Given a string, remove any characters that are unique from the string.

  Example: 

  input: "abccdefee"

  output: "cceee"
vc-preamble: |
  import Imports.AllImports

  def countChar (s : String) (c : Char) : Nat :=
    s.toList.filter (· = c) |>.length
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def only_duplicates (s : String) : String := sorry

  theorem only_duplicates_contains_multiple_occurrences 
    (s : String) (c : Char) : 
    c ∈ (only_duplicates s).data → 
    countChar s c > 1 := 
  sorry
vc-theorems: |
  theorem only_duplicates_is_substring
    (s : String) (c : Char) :
    c ∈ (only_duplicates s).data →
    c ∈ s.data := 
  sorry


  theorem only_duplicates_length
    (s : String) :
    (only_duplicates s).length ≤ s.length :=
  sorry


  theorem only_duplicates_empty
    (s : String) :
    s = "" → only_duplicates s = "" :=
  sorry


  theorem only_duplicates_unique_chars
    (s : String) :
    (∀ c, countChar s c ≤ 1) →
    only_duplicates s = "" :=
  sorry

  /--
  info: 'cceee'
  -/
  #guard_msgs in
  #eval only_duplicates "abccdefee"

  /--
  info: 'll'
  -/
  #guard_msgs in
  #eval only_duplicates "hello"

  /--
  info: 'ondersndoders'
  -/
  #guard_msgs in
  #eval only_duplicates "foundersandcoders"
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
