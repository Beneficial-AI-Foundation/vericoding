vc-description: |-
  Given a string S, return the "reversed" string where all characters that are not a letter stay in the same place, and all letters reverse their positions.
   









  Example 1:
  Input: "ab-cd"
  Output: "dc-ba"


  Example 2:
  Input: "a-bC-dEf-ghIj"
  Output: "j-Ih-gfE-dCba"


  Example 3:
  Input: "Test1ng-Leet=code-Q!"
  Output: "Qedo1ct-eeLg=ntse-T!"

   

  Note:

  S.length <= 100
  33 <= S[i].ASCIIcode <= 122 
  S doesn't contain \ or "
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def isAlpha (c : Char) : Bool := sorry
  def reverseOnlyLetters (s : String) : String := sorry
vc-theorems: |
  theorem length_preservation (s : String) :
    (reverseOnlyLetters s).length = s.length := sorry


  theorem non_letters_unchanged (s : String) (i : String.Pos) :
    ¬(isAlpha (s.get i)) → (reverseOnlyLetters s).get i = s.get i := sorry


  theorem letter_count_preserved (s : String) :
    (s.data.filter isAlpha).length = ((reverseOnlyLetters s).data.filter isAlpha).length := sorry


  theorem double_reverse_identity (s : String) :
    reverseOnlyLetters (reverseOnlyLetters s) = s := sorry


  theorem all_letters_simple_reverse (s : String) :
    (∀ c ∈ s.data, isAlpha c) → reverseOnlyLetters s = String.mk s.data.reverse := sorry


  theorem no_letters_unchanged (s : String) :
    (∀ c ∈ s.data, ¬(isAlpha c)) → reverseOnlyLetters s = s := sorry

  /--
  info: 'dc-ba'
  -/
  #guard_msgs in
  #eval reverse_only_letters "ab-cd"

  /--
  info: 'j-Ih-gfE-dCba'
  -/
  #guard_msgs in
  #eval reverse_only_letters "a-bC-dEf-ghIj"

  /--
  info: 'Qedo1ct-eeLg=ntse-T!'
  -/
  #guard_msgs in
  #eval reverse_only_letters "Test1ng-Leet=code-Q!"
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
