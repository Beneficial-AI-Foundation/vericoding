vc-description: |-
  Given a string `s` of uppercase letters, your task is to determine how many strings `t` (also uppercase) with length equal to that of `s` satisfy the followng conditions:

  * `t` is lexicographical larger than `s`, and
  * when you write both `s` and `t` in reverse order, `t` is still lexicographical larger than `s`.


  ```Haskell
  For example:
  solve('XYZ') = 5. They are: YYZ, ZYZ, XZZ, YZZ, ZZZ
  ```
  String lengths are less than `5000`. Return you answer `modulo 10^9+7 (= 1000000007)`.

  More examples in test cases. Good luck!
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def solve (s : String) : Nat :=
    sorry
vc-theorems: |
  theorem result_is_non_negative (s : String) : 
    solve s â‰¥ 0 :=
  sorry


  theorem result_is_within_modulo (s : String) :
    solve s < 1000000007 :=
  sorry






  theorem single_char_properties (s : String) (c : Char) (h : s = String.mk [c]) :
    solve s = (Char.toNat 'Z' - Char.toNat c) :=
  sorry

  /--
  info: 5
  -/
  #guard_msgs in
  #eval solve "XYZ"

  /--
  info: 16174
  -/
  #guard_msgs in
  #eval solve "ABC"

  /--
  info: 25
  -/
  #guard_msgs in
  #eval solve "ZAZ"
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible
