vc-description: |-
  Thanks to the effects of El Nino this year my holiday snorkelling trip was akin to being in a washing machine... Not fun at all.

  Given a string made up of '~' and '\_' representing waves and calm respectively, your job is to check whether a person would become seasick.

  Remember, only the process of change from wave to calm (and vice versa) will add to the effect (really wave peak to trough but this will do). Find out how many changes in level the string has and if that figure is more than 20% of the string, return "Throw Up", if less, return "No Problem".
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def String.count (needle haystack : String) : Nat := sorry

  def sea_sick (s : String) : String := sorry
vc-theorems: |-
  theorem sea_sick_output_valid (s : String)
      (h : ∀ c : Char, c ∈ s.data → (c = '~' ∨ c = '_'))
      (h_size : s.length > 0) :
    sea_sick s = "Throw Up" ∨ sea_sick s = "No Problem" := sorry


  theorem sea_sick_uniform_string (s : String)
      (h : ∀ c : Char, c ∈ s.data → (c = '~' ∨ c = '_'))
      (h_size : s.length > 0)
      (h_uniform : ∀ (i j : Fin s.length), s.data[i.val]'i.isLt = s.data[j.val]'j.isLt) :
    sea_sick s = "No Problem" := sorry
    

  theorem sea_sick_transition_ratio (s : String)
      (h : ∀ c : Char, c ∈ s.data → (c = '~' ∨ c = '_'))
      (h_size : s.length > 0) :
    let transitions := (String.count "~_" s) + (String.count "_~" s)
    let ratio : Float := Float.ofNat transitions / Float.ofNat s.length
    sea_sick s = "Throw Up" ↔ ratio > 0.2 := sorry


  theorem sea_sick_all_waves (s : String)
      (h : ∀ c : Char, c ∈ s.data → c = '~')
      (h_size : s.length > 0) :
    sea_sick s = "No Problem" := sorry


  theorem sea_sick_all_flat (s : String)
      (h : ∀ c : Char, c ∈ s.data → c = '_')
      (h_size : s.length > 0) :
    sea_sick s = "No Problem" := sorry
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded
