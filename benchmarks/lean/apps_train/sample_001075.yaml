vc-description: |-
  The chef is trying to decode some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.

  -----Input:-----
  - First-line will contain $T$, the number of test cases. Then the test cases follow. 
  - Each test case contains a single line of input, one integer $K$. 

  -----Output:-----
  For each test case, output as the pattern.

  -----Constraints-----
  - $1 \leq T \leq 100$
  - $1 \leq K \leq 100$

  -----Sample Input:-----
  4
  1
  2
  3
  4

  -----Sample Output:-----
  1
  12
  3
  123
  45
  6
  1234
  567
  89
  10

  -----EXPLANATION:-----
  No need, else pattern can be decode easily.
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def generate_pattern (n : Nat) : List String := sorry



  theorem pattern_digits (n : Nat) (h : n > 0) :
    ∀ row ∈ generate_pattern n, ∀ c ∈ String.toList row, '0' ≤ c ∧ c ≤ '9' :=
  sorry 
vc-theorems: |-
  theorem pattern_nonempty_rows (n : Nat) (h : n > 0) :
    ∀ row ∈ generate_pattern n, String.length row > 0 :=
  sorry


  theorem pattern_total_digits (n : Nat) (h : n > 0) :
    (generate_pattern n).foldl (fun acc row => acc + String.length row) 0 ≥ n :=
  sorry
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible
