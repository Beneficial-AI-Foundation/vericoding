vc-description: |-
  You have initially a string of N characters, denoted by A1,A2...AN. You have to print the size of the largest subsequence of string A such that all the characters in that subsequence are distinct ie. no two characters in that subsequence should be same.
  
  A subsequence of string A is a sequence that can be derived from A by deleting some elements  and without changing the order of the remaining elements.
  
  -----Input-----
  First line contains T, number of testcases. Each testcase consists of a single string in one line. Each character of the string will be a small alphabet(ie. 'a' to 'z').
  
  -----Output-----
  For each testcase, print the required answer in one line.
  
  -----Constraints-----
  - 1 ≤ T ≤ 10
  - Subtask 1 (20 points):1 ≤ N ≤ 10
  - Subtask 2 (80 points):1 ≤ N ≤ 105
  
  -----Example-----
  Input:
  2
  abc
  aba
  
  Output:
  3
  2
  
  -----Explanation-----
  For first testcase, the whole string is a subsequence which has all distinct characters.
  
  In second testcase, the we can delete last or first 'a' to get the required subsequence.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def longest_distinct_subsequence (s : String) : Nat :=
    sorry
  
  -- Property: output is always between 0 and length of input string

vc-theorems: |-
  theorem output_bounds (s : String) : 
    let result := longest_distinct_subsequence s
    0 ≤ result ∧ result ≤ s.length :=
  sorry
  
  -- Property: output equals number of unique characters 
  
  theorem equals_unique_chars (s : String) :
    longest_distinct_subsequence s = s.toList.eraseDups.length :=
  sorry
  
  -- Property: result is at most size of alphabet used
  
  theorem max_alphabet_size (s : String) :
    longest_distinct_subsequence s ≤ 26 :=
  sorry
  
  -- Property: empty string has 0 distinct chars
  
  theorem empty_string :
    longest_distinct_subsequence "" = 0 :=
  sorry
  
  -- Property: string of repeated chars has length 1
  
  theorem repeated_chars (c : Char) (n : Nat) :
    n > 0 → longest_distinct_subsequence (String.mk (List.replicate n c)) = 1 :=
  sorry
  
  /--
  info: 3
  -/
  #guard_msgs in
  #eval longest_distinct_subsequence "abc"
  
  /--
  info: 2
  -/
  #guard_msgs in
  #eval longest_distinct_subsequence "aba"
  
  /--
  info: 3
  -/
  #guard_msgs in
  #eval longest_distinct_subsequence "aabbcc"

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

