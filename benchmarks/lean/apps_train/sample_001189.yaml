vc-description: |-
  The chef won a duet singing award at Techsurge & Mridang 2012. From that time he is obsessed with the number 2.

  He just started calculating the powers of two. And adding the digits of the results.

  But he got puzzled after a few calculations. So gave you the job to generate the solutions to 2^n and find their sum of digits.

  -----Input-----
  N : number of inputs N<=100

  then N lines with input T<=2000

  -----Output-----
  The output for the corresponding input T

  -----Example-----
  Input:
  3
  5
  10
  4

  Output:
  5
  7
  7

  Explanation:
  2^5=32
  3+2=5
  2^10=1024
  1+0+2+4=7
  2^4=16
  1+6=7
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def calc_digit_sums (nums : List Nat) : List Nat := sorry

  def sumDigits (n : Nat) : Nat := sorry
vc-theorems: |-
  theorem calc_digit_sums_length {nums : List Nat} :
    (calc_digit_sums nums).length = nums.length := sorry




  theorem calc_digit_sums_non_negative {nums : List Nat} {i : Nat} :
    i < nums.length →
    ∃ n, (calc_digit_sums nums)[i]? = some n ∧ n ≥ 0 := sorry


  theorem calc_digit_sums_order_independent {nums1 nums2 : List Nat} :
    List.Perm nums1 nums2 →
    List.Perm (calc_digit_sums nums1) (calc_digit_sums nums2) := sorry
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible
