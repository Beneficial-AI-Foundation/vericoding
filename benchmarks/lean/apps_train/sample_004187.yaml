vc-description: |-
  This is a follow-up from my previous Kata which can be found here: http://www.codewars.com/kata/5476f4ca03810c0fc0000098

  This time, for any given linear sequence, calculate the function [f(x)] and return it as a function in Javascript or Lambda/Block in Ruby.

  For example:

  ```python
  get_function([0, 1, 2, 3, 4])(5) => 5
  get_function([0, 3, 6, 9, 12])(10) => 30
  get_function([1, 4, 7, 10, 13])(20) => 61
  ```

  Assumptions for this kata are:
  ```
  The sequence argument will always contain 5 values equal to f(0) - f(4).
  The function will always be in the format "nx +/- m", 'x +/- m', 'nx', 'x' or 'm'
  If a non-linear sequence simply return 'Non-linear sequence' for javascript, ruby, and python. For C#, throw an ArgumentException.
  ```
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def isLinear (xs : List Int) : Bool := sorry

  theorem linear_sequence_gives_linear_function
    {seq : List Int} (h : seq.length = 5) (hlin : isLinear seq) :
    ∃ f : Int → Int, get_function seq = Sum.inl f ∧
    ∀ x : Int, f x = (seq[1]! - seq[0]!) * x + seq[0]! :=
  sorry
vc-theorems: |
  theorem nonlinear_sequence_gives_error
    {seq : List Int} (h : seq.length = 5) (hnlin : ¬isLinear seq) :
    get_function seq = Sum.inr "Non-linear sequence" :=
  sorry


  theorem linear_function_matches_input_points
    {seq : List Int} (h : seq.length = 5) (hlin : isLinear seq) :
    match get_function seq with
    | Sum.inl f => ∀ i : Fin 5, f i.val = seq[i]!
    | Sum.inr _ => False :=
  sorry

  /--
  info: 5
  -/
  #guard_msgs in
  #eval f1 5

  /--
  info: 30
  -/
  #guard_msgs in
  #eval f2 10
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
