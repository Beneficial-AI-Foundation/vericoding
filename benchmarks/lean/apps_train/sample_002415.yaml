vc-description: |-
  You have a total of n coins that you want to form in a staircase shape, where every k-th row must have exactly k coins.
   
  Given n, find the total number of full staircase rows that can be formed.

  n is a non-negative integer and fits within the range of a 32-bit signed integer.

  Example 1:

  n = 5

  The coins can form the following rows:
  ¤
  ¤ ¤
  ¤ ¤

  Because the 3rd row is incomplete, we return 2.



  Example 2:

  n = 8

  The coins can form the following rows:
  ¤
  ¤ ¤
  ¤ ¤ ¤
  ¤ ¤

  Because the 4th row is incomplete, we return 3.
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def arrangeCoins (n: Nat) : Nat := sorry

  theorem arrange_coins_valid_input (n: Nat) (h: n ≥ 1) :
    let result := arrangeCoins n
    result ≥ 1 ∧ 
    result * (result + 1) / 2 ≤ n ∧
    (result + 1) * (result + 2) / 2 > n := sorry
vc-theorems: |
  theorem arrange_coins_monotonic (n: Nat) (h: n ≥ 1) :
    arrangeCoins (n + 1) ≥ arrangeCoins n := sorry

  /--
  info: 2
  -/
  #guard_msgs in
  #eval arrange_coins 5

  /--
  info: 3
  -/
  #guard_msgs in
  #eval arrange_coins 8

  /--
  info: 1
  -/
  #guard_msgs in
  #eval arrange_coins 1
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded
