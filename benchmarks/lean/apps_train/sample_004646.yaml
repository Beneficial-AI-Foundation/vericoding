vc-description: |-
  Linked lists are data structures composed of nested or chained objects, each containing a single value and a reference to the next object. 

  Here's an example of a list:

  ```python
  class LinkedList:
      def __init__(self, value=0, next=None):
          self.value = value
          self.next = next
          
  LinkedList(1, LinkedList(2, LinkedList(3)))

  ```

  Write a function listToArray (or list\_to\_array in Python) that converts a list to an array, like this:

  ```
  [1, 2, 3]
  ```

  Assume all inputs are valid lists with at least one value. For the purpose of simplicity, all values will be either numbers, strings, or Booleans.
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def list_to_array {α : Type} : LinkedList α → List α
    | _ => sorry
vc-theorems: |
  theorem list_to_array_preserves_values {α : Type} (l : LinkedList α) :
    list_to_array l = LinkedList.rec [] (fun head tail arr => head :: arr) l :=
  sorry


  theorem list_to_array_maintains_order {α : Type} [Inhabited α] (l : LinkedList α) :
    ∀ i < (list_to_array l).length,
      (list_to_array l).get ⟨i, by sorry⟩ = LinkedList.rec default (fun head tail res => head) l :=
  sorry


  theorem list_to_array_empty {α : Type} :
    list_to_array (@LinkedList.nil α) = @List.nil α :=
  sorry

  /--
  info: [1, 2, 3]
  -/
  #guard_msgs in
  #eval list_to_array LinkedList(1, LinkedList(2, LinkedList(3)))

  /--
  info: ['hello', True, 42]
  -/
  #guard_msgs in
  #eval list_to_array LinkedList("hello", LinkedList(True, LinkedList(42)))

  /--
  info: ['solo']
  -/
  #guard_msgs in
  #eval list_to_array LinkedList("solo")
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
