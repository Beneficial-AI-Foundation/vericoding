vc-description: |-
  You are given two positive integer lists with a random number of elements (1 <= n <= 100). Create a [GCD](https://en.wikipedia.org/wiki/Greatest_common_divisor) matrix and calculate the average of all values. 

  Return a float value rounded to 3 decimal places. 


  ## Example

  ```
  a = [1, 2, 3]
  b = [4, 5, 6]

  #       a =    1  2  3     b =
  gcd(a, b) = [ [1, 2, 1],   # 4
                [1, 1, 1],   # 5
                [1, 2, 3] ]  # 6

  average(gcd(a, b)) = 1.444
  ```
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def gcdMatrix (a : List Nat) (b : List Nat) : Nat :=
    sorry
vc-theorems: |
  theorem gcdMatrix_bounds {a b : List Nat} (ha : ∀ x ∈ a, x > 0) (hb : ∀ x ∈ b, x > 0) :
    ∃ min max : Nat,
      (∀ x ∈ a, ∀ y ∈ b, Nat.gcd x y ≥ min) ∧ 
      (∀ x ∈ a, ∀ y ∈ b, Nat.gcd x y ≤ max) ∧
      min ≤ gcdMatrix a b ∧ gcdMatrix a b ≤ max :=
    sorry


  theorem gcdMatrix_positive {a b : List Nat} (ha : ∀ x ∈ a, x > 0) (hb : ∀ x ∈ b, x > 0) :
    gcdMatrix a b > 0 :=
    sorry


  theorem gcdMatrix_identical_inputs {a b : List Nat} (ha : ∀ x ∈ a, x = List.head! a)
    (hb : ∀ x ∈ b, x = List.head! b) (heq : List.head! a = List.head! b) :
    gcdMatrix a b = List.head! a :=
    sorry


  theorem gcdMatrix_multiples {a b : List Nat} (ha : List.length a = 1)
    (hb : ∀ y ∈ b, y % List.head! a = 0) :
    gcdMatrix a b = List.head! a :=
    sorry


  theorem gcdMatrix_coprime : gcdMatrix [2,3,5,7] [11,13,17,19] = 1 :=
    sorry

  /--
  info: 1.444
  -/
  #guard_msgs in
  #eval gcd_matrix [1, 2, 3] [4, 5, 6]

  /--
  info: 5.0
  -/
  #guard_msgs in
  #eval gcd_matrix [5, 5, 5] [10, 10, 10]

  /--
  info: 2.0
  -/
  #guard_msgs in
  #eval gcd_matrix [4, 7, 2, 10, 99, 4] [55, 32, 1, 344, 35234, 3]
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
