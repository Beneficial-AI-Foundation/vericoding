vc-description: |-
  We have an array A of non-negative integers.
  For every (contiguous) subarray B = [A[i], A[i+1], ..., A[j]] (with i <= j), we take the bitwise OR of all the elements in B, obtaining a result A[i] | A[i+1] | ... | A[j].
  Return the number of possible results.  (Results that occur more than once are only counted once in the final answer.)
  
  Example 1:
  Input: [0]
  Output: 1
  Explanation: 
  There is only one possible result: 0.
  
  Example 2:
  Input: [1,1,2]
  Output: 3
  Explanation: 
  The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].
  These yield the results 1, 1, 2, 1, 3, 3.
  There are 3 unique values, so the answer is 3.
  
  Example 3:
  Input: [1,2,4]
  Output: 6
  Explanation: 
  The possible results are 1, 2, 3, 4, 6, and 7.
  
  Note:
  
  1 <= A.length <= 50000
  0 <= A[i] <= 10^9

vc-preamble: |-
  def subarrayBitwiseORs (nums: List Nat) : Nat := sorry
  
  theorem result_is_nonnegative {nums: List Nat} (h: nums ≠ []) :
    subarrayBitwiseORs nums ≥ 0 := sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def countUnique (l: List Nat) : Nat := 
    (List.foldl (fun acc x => if acc.contains x then acc else x::acc) [] l).length

vc-theorems: |-
  theorem result_upper_bound {nums: List Nat} (h: nums ≠ []) :
    subarrayBitwiseORs nums ≤ (nums.length * (nums.length + 1)) / 2 := sorry
  
  theorem single_element_subarray {nums: List Nat} (h: nums ≠ []) :
    subarrayBitwiseORs nums ≥ countUnique nums := sorry
  
  /--
  info: 1
  -/
  #guard_msgs in
  #eval subarrayBitwiseORs [0]
  
  /--
  info: 3
  -/
  #guard_msgs in
  #eval subarrayBitwiseORs [1, 1, 2]
  
  /--
  info: 6
  -/
  #guard_msgs in
  #eval subarrayBitwiseORs [1, 2, 4]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

