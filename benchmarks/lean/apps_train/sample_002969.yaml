vc-description: |-
  Write a function that returns the count of characters that have to be removed in order to get a string with no consecutive repeats.

  *Note:* This includes any characters

  ##  Examples

  ```python
  'abbbbc'  => 'abc'    #  answer: 3
  'abbcca'  => 'abca'   #  answer: 2
  'ab cca'  => 'ab ca'  #  answer: 1
  ```
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def count_repeats (s : String) : Nat :=
    sorry
vc-theorems: |
  theorem count_repeats_nonnegative (s : String) :
    count_repeats s ≥ 0 :=
    sorry


  theorem count_repeats_bounded (s : String) :
    count_repeats s ≤ max 0 (s.length - 1) :=
    sorry


  theorem count_repeats_empty :
    count_repeats "" = 0 :=
    sorry


  theorem count_repeats_length_after_removal (s : String) (h : s.length > 0) :
    s.length - count_repeats s = (s.foldl (fun acc c => if acc.isEmpty || acc.back ≠ c then acc.push c else acc) "").length :=
    sorry


  theorem count_repeats_monotonic_on_duplication (s : String) (h : s.length > 0) :
    let doubled := String.join (s.data.map (fun c => String.mk [c, c]))
    count_repeats doubled ≥ count_repeats s :=
    sorry

  /--
  info: 0
  -/
  #guard_msgs in
  #eval count_repeats "abcdefg"

  /--
  info: 3
  -/
  #guard_msgs in
  #eval count_repeats "aabbcc"

  /--
  info: 3
  -/
  #guard_msgs in
  #eval count_repeats "@*$##^^^*)*"
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible
