vc-description: |-
  # SpeedCode #2 - Array Madness
  
  ## Objective
  
  Given two **integer arrays** ```a, b```, both of ```length >= 1```, create a program that returns ```true``` if the **sum of the squares** of each element in ```a``` is **strictly greater than** the **sum of the cubes** of each element in ```b```.
  
  E.g.
  ```python
  array_madness([4, 5, 6], [1, 2, 3]) => True #because 4 ** 2 + 5 ** 2 + 6 ** 2 > 1 ** 3 + 2 ** 3 + 3 ** 3
  ```
  Get your timer out.  Are you ready?  Ready, get set, GO!!!

vc-preamble: |-
  def sumOfSquares (l : List Int) : Int :=
    sorry
  
  def sumOfCubes (l : List Int) : Int :=
    sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def array_madness (a b : List Int) : Bool :=
    sorry

vc-theorems: |-
  theorem array_madness_correct (a b : List Int) (h1 : a.length > 0) (h2 : b.length > 0) :
    array_madness a b = (sumOfSquares a > sumOfCubes b) :=
    sorry
  
  theorem small_numbers_property
      (a b : List Int)
      (h1 : a.length > 0)
      (h2 : b.length > 0)
      (ha : ∀ x ∈ a, 0 ≤ x ∧ x ≤ 10)
      (hb : ∀ x ∈ b, 1 ≤ x ∧ x ≤ 10)
      (h : sumOfSquares a ≤ sumOfCubes b) :
    array_madness a b = false :=
    sorry
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval array_madness [4, 5, 6] [1, 2, 3]
  
  /--
  info: False
  -/
  #guard_msgs in
  #eval array_madness [1, 2] [2, 3]
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval array_madness [5, 6, 7] [1, 1, 1]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

