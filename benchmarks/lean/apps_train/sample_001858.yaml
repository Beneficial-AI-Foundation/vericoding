vc-description: |-
  Given a wordlist, we want to implement a spellchecker that converts a query word into a correct word.
  For a given query word, the spell checker handles two categories of spelling mistakes:

  Capitalization: If the query matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the case in the wordlist.

          
  Example: wordlist = ["yellow"], query = "YellOw": correct = "yellow"
  Example: wordlist = ["Yellow"], query = "yellow": correct = "Yellow"
  Example: wordlist = ["yellow"], query = "yellow": correct = "yellow"


  Vowel Errors: If after replacing the vowels ('a', 'e', 'i', 'o', 'u') of the query word with any vowel individually, it matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the match in the wordlist.
          
  Example: wordlist = ["YellOw"], query = "yollow": correct = "YellOw"
  Example: wordlist = ["YellOw"], query = "yeellow": correct = "" (no match)
  Example: wordlist = ["YellOw"], query = "yllw": correct = "" (no match)



  In addition, the spell checker operates under the following precedence rules:

  When the query exactly matches a word in the wordlist (case-sensitive), you should return the same word back.
  When the query matches a word up to capitlization, you should return the first such match in the wordlist.
  When the query matches a word up to vowel errors, you should return the first such match in the wordlist.
  If the query has no matches in the wordlist, you should return the empty string.

  Given some queries, return a list of words answer, where answer[i] is the correct word for query = queries[i].
   
  Example 1:
  Input: wordlist = ["KiTe","kite","hare","Hare"], queries = ["kite","Kite","KiTe","Hare","HARE","Hear","hear","keti","keet","keto"]
  Output: ["kite","KiTe","KiTe","Hare","hare","","","KiTe","","KiTe"]
   
  Note:

  1 <= wordlist.length <= 5000
  1 <= queries.length <= 5000
  1 <= wordlist[i].length <= 7
  1 <= queries[i].length <= 7
  All strings in wordlist and queries consist only of english letters.
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def spellchecker (wordlist : List String) (queries : List String) : List String :=
    sorry
vc-theorems: |-
  theorem spellchecker_output_length 
    (wordlist : List String) (queries : List String) :
    List.length (spellchecker wordlist queries) = List.length queries :=
  sorry


  theorem spellchecker_result_in_wordlist
    (wordlist : List String) (queries : List String) :
    ∀ r ∈ spellchecker wordlist queries, r = "" ∨ r ∈ wordlist :=
  sorry


  theorem spellchecker_exact_match
    (wordlist : List String) (queries : List String) :
    ∀ (q : String), q ∈ queries → q ∈ wordlist → 
    List.get! (spellchecker wordlist queries) (List.indexOf q queries) = q :=
  sorry


  theorem spellchecker_case_insensitive
    (wordlist : List String) (queries : List String) :
    ∀ (q : String) (r : String),
    q ∈ queries →
    r = List.get! (spellchecker wordlist queries) (List.indexOf q queries) →
    r ≠ "" →
    String.toLower r = String.toLower q →
    r ∈ wordlist :=
  sorry


  theorem spellchecker_self_query
    (wordlist : List String) :
    spellchecker wordlist wordlist = wordlist :=
  sorry


  theorem spellchecker_vowel_patterns
    (wordlist : List String) (queries : List String) :
    ∀ (q : String) (r : String),
    q ∈ queries →
    r = List.get! (spellchecker wordlist queries) (List.indexOf q queries) →
    r ≠ "" →
    let q_pattern := (String.toLower q).replace "a" "_"
                      |>.replace "e" "_"
                      |>.replace "i" "_"
                      |>.replace "o" "_"
                      |>.replace "u" "_"
    let r_pattern := (String.toLower r).replace "a" "_"
                      |>.replace "e" "_"
                      |>.replace "i" "_"
                      |>.replace "o" "_"
                      |>.replace "u" "_"
    q_pattern = r_pattern →
    r ∈ wordlist :=
  sorry
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible
