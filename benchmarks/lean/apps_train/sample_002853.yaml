vc-description: |-
  # Invalid Login - Bug Fixing #11
  
  Oh NO! Timmy has moved divisions... but now he's in the field of security. Timmy, being the top coder he is, has allowed some bad code through. You must help Timmy and filter out any injected code!
  
  ## Task
  
  Your task is simple, search the password string for any injected code (Injected code is any thing that would be used to exploit flaws in the current code, so basically anything that contains `||` or `//`) if you find any you must return `"Wrong username or password!"` because no one likes someone trying to cheat their way in!
  
  ## Preloaded
  
  You will be given a preloaded class called `Database` with a method `login` this takes two parameters `username` and `password`. This is a generic login function which will check the database for the user it will return either `'Successfully Logged in!'` if it passes the test or `'Wrong username or password!'` if either the password is wrong or username does not exist.
  
  ## Usage
  
  ```python
  database = Database()
  database.login('Timmy', 'password')
  ```

vc-preamble: |-
  def validate (username password : String) : String :=
    sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def validUsers : List String := ["Timmy", "Alice", "Johny", "Roger", "Simon", "Admin"]
  
  theorem invalid_username {username password : String} 
    (h : username ∉ validUsers) : 
    validate username password = "Wrong username or password!" :=
  sorry

vc-theorems: |-
  theorem injection_attempt {username password1 password2 : String}
    (h : username ∈ validUsers) :
    validate username (password1 ++ "||" ++ password2) = "Wrong username or password!" :=
  sorry
  
  theorem injection_attempt_slash {username password1 password2 : String}
    (h : username ∈ validUsers) :
    validate username (password1 ++ "//" ++ password2) = "Wrong username or password!" :=
  sorry
  
  theorem valid_login_timmy :
    validate "Timmy" "password" = "Successfully Logged in!" :=
  sorry
  
  theorem valid_login_alice :
    validate "Alice" "alice" = "Successfully Logged in!" :=
  sorry
  
  theorem valid_user_response {username password : String}
    (h : username ∈ validUsers) :
    validate username password = "Successfully Logged in!" ∨ 
    validate username password = "Wrong username or password!" :=
  sorry
  
  /--
  info: 'Successfully Logged in!'
  -/
  #guard_msgs in
  #eval validate "Timmy" "password"
  
  /--
  info: 'Wrong username or password!'
  -/
  #guard_msgs in
  #eval validate "Timmy" "h4x0r"
  
  /--
  info: 'Successfully Logged in!'
  -/
  #guard_msgs in
  #eval validate "Alice" "alice"
  
  /--
  info: 'Wrong username or password!'
  -/
  #guard_msgs in
  #eval validate "Timmy" "password"||""==""
  
  /--
  info: 'Wrong username or password!'
  -/
  #guard_msgs in
  #eval validate "Admin" "gs5bw"||1==1//"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

