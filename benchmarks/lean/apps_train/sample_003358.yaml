vc-description: |-
  According to ISO 8601, the first calendar week (1) starts with the week containing the first thursday in january.
  Every year contains of 52 (53 for leap years) calendar weeks.
  
  **Your task is** to calculate the calendar week (1-53) from a given date.
  For example, the calendar week for the date `2019-01-01` (string) should be 1 (int).
  
  Good luck üëç
  
  See also [ISO week date](https://en.wikipedia.org/wiki/ISO_week_date) and [Week Number](https://en.wikipedia.org/wiki/Week#Week_numbering) on Wikipedia for further information about calendar weeks.
  
  On [whatweekisit.org](http://whatweekisit.org/) you may click through the calender and study calendar weeks in more depth.
  
  *heads-up:* `require(xxx)` has been disabled
  
  Thanks to @ZED.CWT, @Unnamed and @proxya for their feedback.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def get_calendar_week (date_str : String) : Nat :=
    sorry

vc-theorems: |-
  theorem calendar_week_bounds
      (date_str : String)
      (h : ‚àÉ year month day : Nat,
           year ‚â• 1900 ‚àß year ‚â§ 2100 ‚àß
           month ‚â• 1 ‚àß month ‚â§ 12 ‚àß
           day ‚â• 1 ‚àß day ‚â§ 31 ‚àß
           date_str = toString year ++ "-" ++ toString month ++ "-" ++ toString day)
      : 1 ‚â§ get_calendar_week date_str ‚àß get_calendar_week date_str ‚â§ 53 :=
    sorry
  
  theorem invalid_date_format_slash
      (date_str : String)
      (h : ‚àÉ year month day : Nat,
           date_str = toString year ++ "/" ++ toString month ++ "/" ++ toString day)
      : ‚àÄ n, get_calendar_week date_str ‚â† n :=
    sorry
  
  theorem invalid_date_format_invalid_string
      (date_str : String) 
      (h : ¬¨‚àÉ year month day : Nat,
           date_str = toString year ++ "-" ++ toString month ++ "-" ++ toString day ‚à®
           date_str = toString year ++ "/" ++ toString month ++ "/" ++ toString day)
      : ‚àÄ n, get_calendar_week date_str ‚â† n :=
    sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

