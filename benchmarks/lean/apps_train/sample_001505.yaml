vc-description: |-
  Chef has an array A consisting of N integers. He also has an intger K.
  Chef wants you to find out number of different arrays he can obtain from array A by applying the following operation exactly K times.

  - Pick some element in the array and multiply it by -1

  As answer could be quite large, print it modulo 109 + 7.

  -----Input-----
  - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.
  - The first line of each test case contains two space separated integers N, K as defined above.
  - The second line contains N space-separated integers A1, A2, ..., AN denoting the elements of the array.

  -----Output-----
  - For each test case, output a single line containing an integer corresponding to the number of different arrays Chef can get modulo 109 + 7.

  -----Constraints-----
  - 1 ≤ T ≤ 10
  - 1 ≤ N, K ≤ 105
  - -106 ≤ Ai ≤ 106

  -----Subtasks-----
  - Subtask #1 (10 points) : N, K ≤ 10
  - Subtask #2 (30 points) : N, K ≤ 100
  - Subtask #3 (60 points) : N, K ≤ 105

  -----Example-----
  Input:
  3
  1 3
  100
  3 1
  1 2 1
  3 2
  1 2 1

  Output:
  1
  3
  4

  -----Explanation-----
  Example case 1.
  Chef has only one element and must apply the operation 3 times to it. After applying the operations, he will end up with -100. That is the only array he will get.

  Example case 2.
  Chef can apply operation to one of three elements. So, he can obtain three different arrays.

  Example case 3.
  Note that other than applying operation to positions (1, 2), (1, 3), (2, 3), Chef can also apply the operation twice on some element and get the original.

  In summary, Chef can get following four arrays.

  [1, 2, 1]
  [-1, -2, 1]
  [-1, 2, -1]
  [1, -2, -1]
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def count_possible_arrays (N: Nat) (K: Nat) (A: List Nat) : Nat := sorry

  theorem single_element_array (N K : Nat) (h1: N > 0) (h2: K > 0) :
    count_possible_arrays 1 K [1] = 1 := sorry
vc-theorems: |-
  theorem result_bounds (N K: Nat) (A: List Nat) (h1: N > 0) (h2: K > 0) :
    count_possible_arrays N K A < 1000000007 ∧ 
    count_possible_arrays N K A ≥ 0 := sorry




  theorem symmetry (N K: Nat) (h1: N > 0) (h2: K > 0) :
    let A1 := List.replicate N 1
    let A2 := List.replicate N 2
    count_possible_arrays N K A1 = count_possible_arrays N K A2 := sorry
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible
