vc-description: |-
  I assume most of you are familiar with the ancient legend of the rice (but I see wikipedia suggests [wheat](https://en.wikipedia.org/wiki/Wheat_and_chessboard_problem), for some reason) problem, but a quick recap for you: a young man asks as a compensation only `1` grain of rice for the first square, `2` grains for the second, `4` for the third, `8` for the fourth and so on, always doubling the previous.

  Your task is pretty straightforward (but not necessarily easy): given an amount of grains, you need to return up to which square of the chessboard one should count in order to get at least as many.

  As usual, a few examples might be way better than thousands of words from me:

  ```python
  squares_needed(0) == 0
  squares_needed(1) == 1
  squares_needed(2) == 2
  squares_needed(3) == 2
  squares_needed(4) == 3
  ```

  Input is always going to be valid/reasonable: ie: a non negative number; extra cookie for *not* using a loop to compute square-by-square (at least not directly) and instead trying a smarter approach [hint: some peculiar operator]; a trick converting the number might also work: impress me!
vc-preamble: |
  import Imports.AllImports

  def sum (f: Nat â†’ Nat) (n: Nat) : Nat :=
    sorry
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |+
  def squares_needed (n: Nat) : Nat :=
    sorry


vc-theorems: |
  theorem squares_needed_zero :
    squares_needed 0 = 0 :=
    sorry


  theorem squares_needed_one :
    squares_needed 1 = 1 :=
    sorry


  theorem squares_needed_power_two :
    squares_needed (2^10) = 11 :=
    sorry

  /--
  info: 0
  -/
  #guard_msgs in
  #eval squares_needed 0

  /--
  info: 1
  -/
  #guard_msgs in
  #eval squares_needed 1

  /--
  info: 2
  -/
  #guard_msgs in
  #eval squares_needed 2

  /--
  info: 2
  -/
  #guard_msgs in
  #eval squares_needed 3

  /--
  info: 3
  -/
  #guard_msgs in
  #eval squares_needed 4
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible
