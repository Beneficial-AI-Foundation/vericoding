vc-description: |-
  How much bigger is a 16-inch pizza compared to an 8-inch pizza? A more pragmatic question is: How many 8-inch pizzas "fit" in a 16-incher?

  The answer, as it turns out, is exactly four 8-inch pizzas. For sizes that don't correspond to a round number of 8-inchers, you must round the number of slices (one 8-inch pizza = 8 slices), e.g.:

  ```python
  how_many_pizzas(16) -> "pizzas: 4, slices: 0"
  how_many_pizzas(12) -> "pizzas: 2, slices: 2"
  how_many_pizzas(8) -> "pizzas: 1, slices: 0"
  how_many_pizzas(6) -> "pizzas: 0, slices: 4"
  how_many_pizzas(0) -> "pizzas: 0, slices: 0"
  ```
  Get coding quick, so you can choose the ideal size for your next meal!
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def how_many_pizzas (n: Nat) : String := sorry

  theorem how_many_pizzas_format (n: Nat) (h: n ≤ 1000) :
    let result := how_many_pizzas n
    result.startsWith "pizzas: " ∧ 
    result.length > 8 ∧
    (result.drop 8 |>.startsWith ", slices: ") = true := sorry
vc-theorems: |
  theorem how_many_pizzas_values_nonnegative (n: Nat) (h: n ≤ 1000) :
    let result := how_many_pizzas n
    let pizzas := (result.splitOn ", ").get! 0 |>.splitOn ": " |>.get! 1 |>.toNat!
    let slices := (result.splitOn ": ").get! 2 |>.toNat!
    pizzas ≥ 0 ∧ 0 ≤ slices ∧ slices < 8 := sorry


  theorem how_many_pizzas_math (n: Nat) (h: n ≤ 1000) :
    let total_area := n * n
    let expected_pizzas := total_area / 64
    let expected_slices := (total_area / 8) % 8
    let result := how_many_pizzas n
    let actual_pizzas := (result.splitOn ", ").get! 0 |>.splitOn ": " |>.get! 1 |>.toNat!
    let actual_slices := (result.splitOn ": ").get! 2 |>.toNat!
    actual_pizzas = expected_pizzas ∧ actual_slices = expected_slices := sorry

  /--
  info: 'pizzas: 4, slices: 0'
  -/
  #guard_msgs in
  #eval how_many_pizzas 16

  /--
  info: 'pizzas: 2, slices: 2'
  -/
  #guard_msgs in
  #eval how_many_pizzas 12

  /--
  info: 'pizzas: 0, slices: 0'
  -/
  #guard_msgs in
  #eval how_many_pizzas 0
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
