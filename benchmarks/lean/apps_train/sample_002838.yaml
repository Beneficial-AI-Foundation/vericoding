vc-description: |-
  In this kata, the number 0 is infected. You are given a list. Every turn, any item in the list that is adjacent to a 0 becomes infected and transforms into a 0. How many turns will it take for the whole list to become infected?
  
  ```
  [0,1,1,0] ==> [0,0,0,0] 
  All infected in 1 turn.
  
  [1,1,0,1,1] --> [1,0,0,0,1] --> [0,0,0,0,0]
  All infected in 2 turns
  
  [0,1,1,1] --> [0,0,1,1] --> [0,0,0,1] --> [0,0,0,0]
  All infected in 3 turns.
  ```
  
  All lists will contain at least one item, and at least one zero, and the only items will be 0s and 1s. Lists may be very very long, so pure brute force approach will not work.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def infected_zeroes (arr : List Nat) : Nat := sorry
  
  theorem infected_zeroes_singleton_zero (arr : List Nat)
    (h : arr = [0]) :
    infected_zeroes arr = 0 := sorry

vc-theorems: |-
  theorem infected_zeroes_singleton_one (arr : List Nat)
    (h : arr = [1]) :
    infected_zeroes arr = 1 := sorry
  
  /--
  info: 1
  -/
  #guard_msgs in
  #eval infected_zeroes [0, 1, 1, 0]
  
  /--
  info: 2
  -/
  #guard_msgs in
  #eval infected_zeroes [1, 1, 0, 1, 1]
  
  /--
  info: 3
  -/
  #guard_msgs in
  #eval infected_zeroes [0, 1, 1, 1]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

