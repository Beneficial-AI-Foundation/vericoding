vc-description: |-
  Your boss decided to save money by purchasing some cut-rate optical character recognition software for scanning in the text of old novels to your database. At first it seems to capture words okay, but you quickly notice that it throws in a lot of numbers at random places in the text. For example:
  
  ```python
  string_clean('! !') == '! !'
  string_clean('123456789') == ''
  string_clean('This looks5 grea8t!') == 'This looks great!'
  
  ```
  
  Your harried co-workers are looking to you for a solution to take this garbled text and remove all of the numbers. Your program will take in a string and clean out all numeric characters, and return a string with spacing and special characters `~#$%^&!@*():;"'.,?` all intact.

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def string_clean (s : String) : String := sorry
  
  -- Main properties of string_clean

vc-theorems: |-
  theorem string_clean_properties (s : String) :
    let result := string_clean s
    -- No digits in result
    (∀ c ∈ result.data, !c.isDigit) ∧
    -- Maintains relative order of non-digits
    (result = String.mk (s.data.filter (fun c => !c.isDigit))) ∧ 
    -- Result length ≤ original length
    (result.length ≤ s.length) := sorry
  
  -- String with only letters remains unchanged
  
  theorem string_clean_only_letters (s : String) :
    (∀ c ∈ s.data, c.isAlpha) →
    string_clean s = s := sorry
  
  -- String with only digits returns empty string 
  
  theorem string_clean_only_digits (s : String) :
    (∀ c ∈ s.data, c.isDigit) →
    string_clean s = "" := sorry
  
  /--
  info: ''
  -/
  #guard_msgs in
  #eval string_clean ""
  
  /--
  info: ''
  -/
  #guard_msgs in
  #eval string_clean "123456789"
  
  /--
  info: 'This looks great!'
  -/
  #guard_msgs in
  #eval string_clean "This looks5 grea8t!"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

