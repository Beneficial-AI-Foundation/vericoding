vc-description: |-
  You are given a sequence of a journey in London, UK. The sequence will contain bus **numbers** and TFL tube names as **strings** e.g.
  
  ```python
  ['Northern', 'Central', 243, 1, 'Victoria']
  ```
  Journeys will always only contain a combination of tube names and bus numbers. Each tube journey costs `£2.40` and each bus journey costs `£1.50`. If there are `2` or more adjacent bus journeys, the bus fare is capped for sets of two adjacent buses and calculated as one bus fare for each set.
  
  Your task is to calculate the total cost of the journey and return the cost `rounded to 2 decimal places` in the format (where x is a number): `£x.xx`

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def london_city_hacker (journey : List (Unit ⊕ Unit)) : String := sorry
  
  def is_valid_fare_string (fare : String) : Bool := sorry

vc-theorems: |-
  theorem journey_fare_is_valid {journey : List (Unit ⊕ Unit)} :
    is_valid_fare_string (london_city_hacker journey) := sorry
  
  theorem journey_fare_calculation {journey : List (Unit ⊕ Unit)} :
    ∃ total : Float,
    london_city_hacker journey = toString ("£" ++ toString total) ∧
    total = journey.foldr
      (fun x acc => match x with
        | Sum.inr _ => acc + 2.40
        | Sum.inl _ => match journey with
          | _::next::_ => if next = Sum.inl () then acc + 0.75 else acc + 1.50  
          | _ => acc + 1.50) 0 := sorry
  
  theorem all_bus_journey_calculation {buses : List Unit} :
    let busCount := buses.length
    london_city_hacker (buses.map Sum.inl) = 
    toString ("£" ++ toString ((Float.ofNat busCount / 2) * 1.50 + 
      (Float.ofNat (busCount % 2)) * 1.50)) := sorry
  
  theorem all_tube_journey_calculation {tubes : List Unit} :
    london_city_hacker (tubes.map Sum.inr) = 
    toString ("£" ++ toString (Float.ofNat tubes.length * 2.40)) := sorry
  
  /--
  info: '£7.80'
  -/
  #guard_msgs in
  #eval london_city_hacker [12, "Central", "Circle", 21]
  
  /--
  info: '£3.00'
  -/
  #guard_msgs in
  #eval london_city_hacker [386, 56, 1, 876]
  
  /--
  info: '£7.20'
  -/
  #guard_msgs in
  #eval london_city_hacker ["Northern", "Central", "Circle"]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

