vc-description: |-
  > [Run-length encoding](https://en.wikipedia.org/w/index.php?title=Run-length_encoding) (RLE) is a very simple form of data compression in which runs of data (that is, sequences in which the same data value occurs in many consecutive data elements) are stored as a single data value and count, rather than as the original run. Wikipedia
  
  ## Task
  
  Your task is to write such a run-length encoding. For a given string, return a list (or array) of pairs (or arrays) 
  [
   (i1, s1),
   (i2, s2),
   …,
   (in, sn)
  ], such that one can reconstruct the original string by replicating the character sx ix times and concatening all those strings. Your run-length encoding should be minimal, ie. for all i the values si and si+1 should differ.
  
  ## Examples
  
  As the article states, RLE is a _very_ simple form of data compression. It's only suitable for runs of data, as one can see in the following example:
  
  ```python
  run_length_encoding("hello world!")
   //=>      [[1,'h'], [1,'e'], [2,'l'], [1,'o'], [1,' '], [1,'w'], [1,'o'], [1,'r'], [1,'l'], [1,'d'], [1,'!']]
  ```
  
  It's very effective if the same data value occurs in many consecutive data elements:
  ```python
  run_length_encoding("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbb")
  # => [[34,'a'], [3,'b']]
  ```

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def join (chars : List (Nat × String)) : String := sorry
  
  def run_length_encoding (s : String) : List (Nat × String) := sorry

vc-theorems: |-
  theorem rle_valid_pairs (s : String) :
    ∀ pair ∈ run_length_encoding s,
    ∃ (n : Nat) (c : String), pair = (n, c) := sorry
  
  theorem rle_positive_counts (s : String) :
    ∀ (n : Nat) (c : String), (n, c) ∈ run_length_encoding s → n > 0 := sorry 
  
  theorem rle_adjacent_chars_differ (s : String) :
    ∀ (n₁ n₂ : Nat) (c₁ c₂ : String),
    let encoded := run_length_encoding s
    let pairs := List.zip encoded (encoded.tail)
    ((n₁, c₁), (n₂, c₂)) ∈ pairs → c₁ ≠ c₂ := sorry
  
  theorem rle_decode_matches_input (s : String) :
    join (run_length_encoding s) = s := sorry
  
  theorem rle_empty_string :
    run_length_encoding "" = [] := sorry
  
  /--
  info: []
  -/
  #guard_msgs in
  #eval run_length_encoding ""
  
  /--
  info: [[1, 'a'], [1, 'b'], [1, 'c']]
  -/
  #guard_msgs in
  #eval run_length_encoding "abc"
  
  /--
  info: [[34, 'a'], [3, 'b']]
  -/
  #guard_msgs in
  #eval run_length_encoding "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbb"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

