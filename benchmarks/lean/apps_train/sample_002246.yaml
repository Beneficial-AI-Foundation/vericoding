vc-description: |-
  Vasya is an active Internet user. One day he came across an Internet resource he liked, so he wrote its address in the notebook. We know that the address of the written resource has format: <protocol>://<domain>.ru[/<context>] 

  where:  <protocol> can equal either "http" (without the quotes) or "ftp" (without the quotes),  <domain> is a non-empty string, consisting of lowercase English letters,  the /<context> part may not be present. If it is present, then <context> is a non-empty string, consisting of lowercase English letters. 

  If string <context> isn't present in the address, then the additional character "/" isn't written. Thus, the address has either two characters "/" (the ones that go before the domain), or three (an extra one in front of the context).

  When the boy came home, he found out that the address he wrote in his notebook had no punctuation marks. Vasya must have been in a lot of hurry and didn't write characters ":", "/", ".".

  Help Vasya to restore the possible address of the recorded Internet resource.


  -----Input-----

  The first line contains a non-empty string that Vasya wrote out in his notebook. This line consists of lowercase English letters only. 

  It is guaranteed that the given string contains at most 50 letters. It is guaranteed that the given string can be obtained from some correct Internet resource address, described above.


  -----Output-----

  Print a single line — the address of the Internet resource that Vasya liked. If there are several addresses that meet the problem limitations, you are allowed to print any of them.


  -----Examples-----
  Input
  httpsunrux

  Output
  http://sun.ru/x

  Input
  ftphttprururu

  Output
  ftp://http.ru/ruru



  -----Note-----

  In the second sample there are two more possible answers: "ftp://httpruru.ru" and "ftp://httpru.ru/ru".
vc-preamble: |
  import Imports.AllImports

  def ValidProtocol (s : String) : Prop := s = "http" ∨ s = "ftp"

  def IsValidDomainChar (c : Char) : Prop := c.isUpper ∨ c.isLower ∨ c.isDigit

  def IsValidPathChar (c : Char) : Prop := c.isUpper ∨ c.isLower ∨ c.isDigit

  def format_internet_address (s : String) : String := sorry
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def countChar (s : String) (c : Char) : Nat :=
    s.foldl (fun acc x => if x = c then acc + 1 else acc) 0
vc-theorems: |-
  theorem format_internet_address_starts_with_protocol (s : String) :
    (s.startsWith "http" ∨ s.startsWith "ftp") →
    (format_internet_address s).startsWith "http://" ∨ 
    (format_internet_address s).startsWith "ftp://" := sorry


  theorem format_internet_address_preserves_protocol (s : String) :
    s.startsWith "http" → (format_internet_address s).startsWith "http://" := sorry


  theorem format_internet_address_preserves_ftp (s : String) :
    s.startsWith "ftp" → (format_internet_address s).startsWith "ftp://" := sorry

  partial def containsSubstr (haystack needle : String) : Bool :=
    if needle.length = 0 then true
    else if haystack.length < needle.length then false
    else if haystack.take needle.length = needle then true
    else containsSubstr (haystack.drop 1) needle


  theorem format_internet_address_contains_ru (s : String) :
    containsSubstr (format_internet_address s) ".ru" = true := sorry

  partial def countSubstr (haystack needle : String) : Nat :=
    if needle.length = 0 then 0
    else if haystack.length < needle.length then 0
    else if haystack.take needle.length = needle 
      then 1 + countSubstr (haystack.drop needle.length) needle
      else countSubstr (haystack.drop 1) needle


  theorem format_internet_address_single_ru (s : String) :
    countSubstr (format_internet_address s) ".ru" = 1 := sorry


  theorem format_internet_address_path_slashes (s : String) :
    containsSubstr s "ru" = true →
    s.length > (s.length - (s.takeRight (s.length - 2)).length) + 2 →
    countChar (format_internet_address s) '/' = 3 := sorry
vc-postamble: |-
  -- Apps difficulty: competition
  -- Assurance level: unguarded
