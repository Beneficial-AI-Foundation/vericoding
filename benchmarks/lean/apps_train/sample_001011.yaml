vc-description: |-
  Chef wants to gift pairs to his friends this new year. But his friends like good pairs
  only.
  A pair (a , b) is called a good pair if 1 <= a < b <= N such that GCD(a*b , P) = 1.
  Since Chef is busy in preparation for the party, he wants your help to find all the
  good pairs.
  —————————————————————————————————————
  INPUT
  • The first line of the input contains a single integer T.
  • The first and only line of each test case contain two integer N,P.
  ————————————————————————————————————————
  OUTPUT
  For each test case, print a single line containing one integer — the total number of good
  pairs
  ————————————————————————————————————————
  CONSTRAINTS
  • 1 ≤ T≤ 50
  • 2 ≤ N,P ≤10^5
  —————————————————————————————————————
  Example Input
  2
  2 3
  3 3
  ————————————————————————————————————————
  Example Output
  1
  1
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |+
  def gcd (a b : Nat) : Nat := sorry

  def count_good_pairs (n p : Nat) : Nat := sorry 






vc-theorems: |
  theorem count_good_pairs_bounds (n p : Nat) (h1 : n > 0) (h2 : p > 0) :
    0 ≤ count_good_pairs n p ∧ count_good_pairs n p ≤ (n * (n-1)) / 2 := sorry


  theorem count_good_pairs_monotonic (n p : Nat) (h1 : n > 1) (h2 : p > 0) :
    count_good_pairs n p ≥ count_good_pairs (n-1) p := sorry

  /--
  info: 1
  -/
  #guard_msgs in
  #eval count_good_pairs 2 3

  /--
  info: 1
  -/
  #guard_msgs in
  #eval count_good_pairs 3 3

  /--
  info: 6
  -/
  #guard_msgs in
  #eval count_good_pairs 4 5
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible
