vc-description: |-
  Create a function that takes 2 positive integers in form of a string as an input, and outputs the sum (also as a string):

  If either input is an empty string, consider it as zero.
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def sum_str (a b : String) : String := sorry

  def isValidInt (s : String) : Bool := sorry
vc-theorems: |
  theorem sum_str_matches_actual_sum (a b : Int) : 
    sum_str (toString a) (toString b) = toString (a + b) := sorry


  theorem empty_string_treated_as_zero (empty : Option String) : 
    sum_str "1" (empty.getD "") = "1" ∧ 
    sum_str (empty.getD "") "1" = "1" ∧
    sum_str (empty.getD "") (empty.getD "") = "0" := sorry


  theorem invalid_inputs_raise (s : String) : 
    ¬s.trim.isEmpty → ¬(isValidInt s) →
    (∀ (t : String), sum_str s t = "error" ∧ sum_str t s = "error") := sorry

  /--
  info: '9'
  -/
  #guard_msgs in
  #eval sum_str "4" "5"

  /--
  info: '39'
  -/
  #guard_msgs in
  #eval sum_str "34" "5"

  /--
  info: '9'
  -/
  #guard_msgs in
  #eval sum_str "9" ""
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
