vc-description: |-
  Let's pretend your company just hired your friend from college and paid you a referral bonus. Awesome! To celebrate, you're taking your team out to the terrible dive bar next door and using the referral bonus to buy, and build, the largest three-dimensional beer can pyramid you can. And then probably drink those beers, because let's pretend it's Friday too. 

  A beer can pyramid will square the number of cans in each level - 1 can in the top level, 4 in the second, 9 in the next, 16, 25... 

  Complete the beeramid function to return the number of **complete** levels of a beer can pyramid you can make, given the parameters of: 

  1) your referral bonus, and

  2) the price of a beer can

  For example:
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def beeramid (bonus: Int) (price: Int) : Int :=
    sorry
vc-theorems: |
  theorem beeramid_non_negative (bonus price: Int) (h: price > 0) : 
    beeramid bonus price ≥ 0 := 
    sorry


  theorem negative_bonus_gives_zero (bonus price: Int) (h1: bonus < 0) (h2: price > 0) :
    beeramid bonus price = 0 :=
    sorry


  theorem monotonic_bonus (bonus price: Int) (h1: bonus ≥ 0) (h2: price > 0) :
    beeramid (bonus + price) price ≥ beeramid bonus price :=
    sorry


  theorem monotonic_price (bonus price: Int) (h1: bonus ≥ 0) (h2: price > 0) :
    beeramid bonus (2 * price) ≤ beeramid bonus price :=
    sorry

  /--
  info: 1
  -/
  #guard_msgs in
  #eval beeramid 9 2

  /--
  info: 3
  -/
  #guard_msgs in
  #eval beeramid 21 1.5

  /--
  info: 0
  -/
  #guard_msgs in
  #eval beeramid -1 4
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
