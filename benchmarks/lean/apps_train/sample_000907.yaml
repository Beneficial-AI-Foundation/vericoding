vc-description: |-
  Chef develops his own computer program for playing chess. He is at the very beginning. At first he needs to write the module that will receive moves written by the players and analyze it. The module will receive a string and it should report at first whether this string represents the correct pair of cells on the chess board (we call such strings correct) and then report whether it represents the correct move depending on the situation on the chess board. Chef always has troubles with analyzing knight moves. So at first he needs a test program that can say whether a given string is correct and then whether it represents a correct knight move (irregardless of the situation on the chess board). The cell on the chessboard is represented as a string of two characters: first character is a lowercase Latin letter from a to h and the second character is a digit from 1 to 8. The string represents the correct pair of cells on the chess board if it composed of 5 characters where first two characters represent the cell where chess figure was, 3rd character is the dash "-" and the last two characters represent the destination cell.

  -----Input-----
  The first line contains a single integer T <= 50000, the number of test cases. T test cases follow. The only line of each test case contains a non-empty string composed the characters with ASCII-codes from 32 to 126. The length of the string is not greater than 10.

  -----Output-----
  For each test case, output a single line containing the word "Error" if the corresponding string does not represent the correct pair of cells on the chess board. Otherwise output "Yes" if this pair of cells represents the correct knight move and "No" otherwise.

  -----Example-----
  Input:
  4
  a1-b3
  d2-h8
  a3 c4
  ErrorError

  Output:
  Yes
  No
  Error
  Error
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def is_valid_knight_move (move : String) : String := sorry

  theorem valid_moves_only_returns_yes_or_no (pos1_col pos1_row pos2_col pos2_row : Char) 
      (h1 : 'a' ≤ pos1_col ∧ pos1_col ≤ 'h')
      (h2 : '1' ≤ pos1_row ∧ pos1_row ≤ '8')  
      (h3 : 'a' ≤ pos2_col ∧ pos2_col ≤ 'h')
      (h4 : '1' ≤ pos2_row ∧ pos2_row ≤ '8') :
      let move := s!"{pos1_col}{pos1_row}-{pos2_col}{pos2_row}"
      (is_valid_knight_move move = "Yes" ∨ is_valid_knight_move move = "No") := sorry
vc-theorems: |-
  theorem invalid_format_returns_error (move : String) :
      (String.length move ≠ 5 ∨ 
       move.get ⟨2⟩ ≠ '-' ∨
       ¬('a' ≤ move.get ⟨0⟩ ∧ move.get ⟨0⟩ ≤ 'h') ∨
       ¬('1' ≤ move.get ⟨1⟩ ∧ move.get ⟨1⟩ ≤ '8') ∨
       ¬('a' ≤ move.get ⟨3⟩ ∧ move.get ⟨3⟩ ≤ 'h') ∨
       ¬('1' ≤ move.get ⟨4⟩ ∧ move.get ⟨4⟩ ≤ '8')) →
      is_valid_knight_move move = "Error" := sorry


  theorem symmetric_moves (pos1_col pos1_row pos2_col pos2_row : Char)
      (h1 : 'a' ≤ pos1_col ∧ pos1_col ≤ 'h')
      (h2 : '1' ≤ pos1_row ∧ pos1_row ≤ '8')
      (h3 : 'a' ≤ pos2_col ∧ pos2_col ≤ 'h')
      (h4 : '1' ≤ pos2_row ∧ pos2_row ≤ '8') :
      let move1 := s!"{pos1_col}{pos1_row}-{pos2_col}{pos2_row}"
      let move2 := s!"{pos2_col}{pos2_row}-{pos1_col}{pos1_row}"
      is_valid_knight_move move1 = is_valid_knight_move move2 := sorry


  theorem same_position_invalid (col row : Char)
      (h1 : 'a' ≤ col ∧ col ≤ 'h')
      (h2 : '1' ≤ row ∧ row ≤ '8') :
      let move := s!"{col}{row}-{col}{row}"
      is_valid_knight_move move = "No" := sorry
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded
