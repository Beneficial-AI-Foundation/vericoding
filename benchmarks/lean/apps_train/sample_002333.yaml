vc-description: |-
  Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.
  
  This is case sensitive, for example "Aa" is not considered a palindrome here.
  
  Note:
  Assume the length of given string will not exceed 1,010.
  
  Example: 
  
  Input:
  "abccccdd"
  
  Output:
  7
  
  Explanation:
  One longest palindrome that can be built is "dccaccd", whose length is 7.

vc-preamble: |-
  def String.freq (s : String) (c : Char) : Nat :=
    s.toList.filter (· = c) |>.length

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def longest_palindrome (s : String) : Nat := sorry
  
  theorem longest_palindrome_length_bounds 
    (s : String) (h : s.length > 0) : 
    let res := longest_palindrome s
    res ≤ s.length ∧ res ≥ 1 := sorry

vc-theorems: |-
  theorem longest_palindrome_monotonic
    (s : String) (h : s.length > 0) :
    let res1 := longest_palindrome s
    let res2 := longest_palindrome (s.push 'a')
    res2 ≥ res1 := sorry
  
  theorem longest_palindrome_repeated_char
    (s : String) (h : s.length > 0) :
    let c := s.get 0
    let repeated := String.mk (List.replicate s.length c)
    longest_palindrome repeated = s.length := sorry
  
  theorem longest_palindrome_single_space :
    longest_palindrome " " = 1 := sorry
  
  /--
  info: 7
  -/
  #guard_msgs in
  #eval longest_palindrome "abccccdd"
  
  /--
  info: 3
  -/
  #guard_msgs in
  #eval longest_palindrome "ccc"
  
  /--
  info: 1
  -/
  #guard_msgs in
  #eval longest_palindrome "Aa"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

