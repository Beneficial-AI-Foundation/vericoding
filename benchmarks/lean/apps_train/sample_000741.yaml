vc-description: |-
  Sereja has a string A consisting of n lower case English letters. 

  Sereja calls two strings X and Y each of length n similar if they can be made equal by applying the following operation at most once in each of them.

  - Chose any two position i, j in the string (i can be equal to j too). Swap the characters at position i with character at position j.

  For example strings "abcd" and "acbd" are similar, strings "ab" and "ab" are similar, but strings "abcde" and "bcdea" are not similar. Note that strings  "abc" and "cab" are also similar, as you can swap 'a' and 'c' in the first string to get "cba" and 'a' and 'b' in the second string to get "cba". 

  Now Sereja is interested in finding number of ordered pairs of non similar strings X and Y such that they can be constructed from a given string A by permutation of its characters. As answer could be large, please output your answer modulo  (109 + 7).

  Note 

  A string s (of size n) is said to be constructed from string t (also of size n) by permutation of its characters if there exists a permutation P (of length n), such that s[i] = t[P[i]] for each i from 1 to n.

  -----Input-----
  - First line contain integer T - number of test cases. 
  - For each of the next T lines: 
  	
  - Each line contains a string A as defined in the problem.

  -----Output-----
  For each test case, output answer modulo 1000000007 (109 + 7) in separate line. 

  -----Constraints-----
  - 1 ≤ T ≤  10 
  - 1 ≤ n ≤  10^5 

  -----Constraints-----
  - Subtask #1: 1 ≤ n ≤  10  (25 points)
  - Subtask #2: 1 ≤ n ≤  100  (25 points)
  - Subtask #3: 1 ≤ n ≤  1000  (25 points)
  - Subtask #4: original constraints (25 points)

  -----Example-----
  Input:
  2
  z
  abcd

  Output:
  0
  144
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def solve_string_similarity (s : String) : Nat :=
    if s.length = 0 then panic! "Empty string not allowed"
    else sorry
vc-theorems: |
  theorem solve_string_similarity_non_negative {s : String} (h : s.length > 0) : 
    solve_string_similarity s ≥ 0 := by sorry


  theorem solve_string_similarity_bounded {s : String} (h : s.length > 0) :
    solve_string_similarity s < 10^9 + 7 := by sorry


  theorem single_char_string {s : String} (h1 : s.length = 1) :
    solve_string_similarity s = 0 := by sorry


  theorem same_char_string {s : String} (h1 : s.length > 0) 
    (h2 : ∀ (i j : String.Pos), s.get i = s.get j) :
    solve_string_similarity s = 0 := by sorry


  theorem repeated_char_string (n : Nat) (h : n > 0) :
    solve_string_similarity (String.mk (List.replicate n 'a')) = 0 := by sorry


  theorem alternating_string_bounded (n : Nat) (h : 0 < n) :
    let s := String.mk (List.join (List.replicate n ['a', 'b']))
    0 ≤ solve_string_similarity s ∧ solve_string_similarity s < 10^9 + 7 := by sorry


  theorem unique_chars_bounded (n : Nat) (h : 0 < n) :
    let s := String.mk (List.map (fun i => Char.ofNat (Char.toNat 'a' + i)) (List.range n))
    0 ≤ solve_string_similarity s ∧ solve_string_similarity s < 10^9 + 7 := by sorry

  /--
  info: 0
  -/
  #guard_msgs in
  #eval solve_string_similarity "z"

  /--
  info: 144
  -/
  #guard_msgs in
  #eval solve_string_similarity "abcd"

  /--
  info: 0
  -/
  #guard_msgs in
  #eval solve_string_similarity "aaaa"
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
