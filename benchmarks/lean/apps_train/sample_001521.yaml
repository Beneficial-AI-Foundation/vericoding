vc-description: |-
  Given an alphanumeric string made up of digits and lower case Latin characters only, find the sum of all the digit characters in the string.
  
  -----Input-----
  - The first line of the input contains an integer T denoting the number of test cases. Then T test cases follow.
  - Each test case is described with a single line containing a string S, the alphanumeric string.
  
  -----Output-----
  - For each test case, output a single line containing the sum of all the digit characters in that string.
  
  -----Constraints-----
  - 1 ≤ T ≤ 1000
  - 1 ≤ |S| ≤ 1000, where |S| is the length of the string S.
  
  -----Example-----
  Input:
  1
  ab1231da
  
  Output:
  7
  
  -----Explanation-----
  The digits in this string are 1, 2, 3 and 1. Hence, the sum of all of them is 7.

vc-preamble: |-
  def sum_of_digits (s : String) : Nat :=
    sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def List.sum : List Nat → Nat 
    | [] => 0
    | x::xs => x + sum xs

vc-theorems: |-
  theorem sum_of_digits_no_digits (s : String) 
    (h : ∀ c ∈ s.data, !c.isDigit) : 
    sum_of_digits s = 0 := 
    sorry
  
  theorem sum_of_digits_all_digits (digits : List Nat)
    (h : ∀ d ∈ digits, d ≤ 9) :
    sum_of_digits (String.join (digits.map toString)) = List.sum digits := 
    sorry
  
  theorem sum_of_digits_mixed (letters digits : String)
    (h1 : ∀ c ∈ letters.data, !c.isDigit)
    (h2 : ∀ c ∈ digits.data, c.isDigit) :
    sum_of_digits (letters ++ digits) = sum_of_digits digits :=
    sorry
  
  /--
  info: 7
  -/
  #guard_msgs in
  #eval sum_of_digits "ab1231da"
  
  /--
  info: 6
  -/
  #guard_msgs in
  #eval sum_of_digits "a1b2c3"
  
  /--
  info: 0
  -/
  #guard_msgs in
  #eval sum_of_digits "nodigits"

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

