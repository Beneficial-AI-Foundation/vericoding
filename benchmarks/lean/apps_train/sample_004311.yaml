vc-description: |-
  ## Sum Even Fibonacci Numbers

  * Write a func named SumEvenFibonacci that takes a parameter of type int and returns a value of type int

  * Generate all of the Fibonacci numbers starting with 1 and 2 and ending on the highest number before exceeding the parameter's value 


  #### Each new number in the Fibonacci sequence is generated by adding the previous two numbers - by starting with 1 and 2(the input could be smaller), the first 10 numbers will be:


  ```
   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  ```

  * Sum all of the even numbers you generate and return that int

  #### Example:

  ```
  sumEvenFibonacci(8) // returns 10 by adding the even values 2 and 8
  ```
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |-
  def SumEvenFibonacci (n : Int) : Int :=
    sorry

  -- Properties for any non-negative input
vc-theorems: |
  theorem sum_even_fibonacci_non_negative (n : Int) : 
    n ≥ 0 → SumEvenFibonacci n ≥ 0 :=
    sorry





  -- Base cases

  theorem sum_even_fibonacci_zero :
    SumEvenFibonacci 0 = 0 :=
    sorry


  theorem sum_even_fibonacci_one :
    SumEvenFibonacci 1 = 0 :=
    sorry


  theorem sum_even_fibonacci_two :
    SumEvenFibonacci 2 = 2 :=
    sorry

  -- Property for negative inputs

  theorem sum_even_fibonacci_negative (n : Int) :
    n < 0 → SumEvenFibonacci n = 0 :=
    sorry

  /--
  info: 10
  -/
  #guard_msgs in
  #eval SumEvenFibonacci 8

  /--
  info: 60696
  -/
  #guard_msgs in
  #eval SumEvenFibonacci 111111

  /--
  info: 82790070
  -/
  #guard_msgs in
  #eval SumEvenFibonacci 144100000
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible
