vc-description: |-
  /-
  Dhiraj loves Chocolates.He loves chocolates so much that he can eat up to $1000$ chocolates a day. But his mom is fed up by this habit of him and decides to take things in her hand.
  Its diwali Season and Dhiraj has got a lot of boxes of chocolates and Dhiraj's mom is afraid that dhiraj might eat all boxes of chocolates.
  So she told Dhiraj that he can eat only exactly $k$ number of chocolates and dhiraj has to finish all the chocolates in box selected by him and then move on to next box of chocolate.Now Dhiraj is confused that whether he will be able to eat $k$ number of chocolates or not. Since dhiraj is weak at maths,he asks for your help to tell him whether he can eat $k$ number of chocolates or not. 
  So given number of chocolates  are $k$ which dhiraj has to eat and the boxes of chocolates each containing some number of chocolates, tell whether dhiraj will be able to eat $k$ number of chocolates or not.
  
  -----Input:-----
  - First line will contain $T$, number of testcases. Then the testcases follow. 
  - $k$, representing the number of chocolates dhiraj has to eat.
  - the third line contains $N$ representing the no. of boxes of chocolates.
  - fourth line contains list of $a[]$ size $N$ specifying the number of chocolates in each Box.
  
  -----Output:-----
  - For each testcase, output in a single line answer $0$ or $1$.
  - $0$ if dhiraj cant eat $k$ chocolates from given combination and $1$ if he can eat $k$ chocolates from given combination.
  
  -----Constraints-----
  - $1 \leq T \leq 100$
  - $1 \leq K \leq 10^7$
  - $1 \leq  N \leq 800$
  - $1 \leq a[i] \leq 10^3$
  
  -----Sample Input:-----
  2
  20
  5
  8 7 2 10 5
  11
  4
  6 8 2 10
  
  -----Sample Output:-----
  1
  0
  -/

vc-preamble: |-
  def sumList (list : List Int) : Int :=
    sorry
  
  def isSubsetSum (arr : List Int) (n : Int) (k : Int) : Bool :=
    sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def can_eat_chocolates (k : Int) (n : Int) (arr : List Int) : Int :=
    sorry

vc-theorems: |-
  theorem sum_less_than_k_returns_0 (arr : List Int) (k : Int):
    arr.length > 0 → 
    (∀ x ∈ arr, x > 0 ∧ x ≤ 100) →
    k > 0 →
    k ≤ 1000 →
    sumList arr < k →
    can_eat_chocolates k arr.length arr = 0 :=
    sorry
  
  theorem target_sum_of_array_is_possible (arr : List Int):
    arr.length > 0 →
    (∀ x ∈ arr, x > 0 ∧ x ≤ 100) →
    can_eat_chocolates (sumList arr) arr.length arr = 1 :=
    sorry
  
  theorem k_less_than_min_returns_0 (arr : List Int):
    arr.length > 0 →
    (∀ x ∈ arr, x > 0 ∧ x ≤ 100) →
    let k := (arr.minimum?.getD 0) - 1
    k > 0 →
    can_eat_chocolates k arr.length arr = 0 :=
    sorry
  
  theorem subset_sum_matches_chocolates (arr : List Int) (k : Int):
    arr.length > 0 →
    (∀ x ∈ arr, x > 0 ∧ x ≤ 100) →
    k > 0 →
    k ≤ 1000 →
    (can_eat_chocolates k arr.length arr = 1) = isSubsetSum arr arr.length k :=
    sorry
  
  theorem single_matching_element_returns_1 (arr : List Int):
    arr.length > 0 →
    (∀ x ∈ arr, x > 0 ∧ x ≤ 100) →
    let k := arr[0]!
    can_eat_chocolates k arr.length arr = 1 :=
    sorry
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval can_eat_chocolates 20 5 [8, 7, 2, 10, 5]
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval can_eat_chocolates 11 4 [6, 8, 2, 10]
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval can_eat_chocolates 15 3 [5, 5, 5]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

