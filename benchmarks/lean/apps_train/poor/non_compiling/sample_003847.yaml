vc-description: |-
  /-
  # Leaderboard climbers
  
  In this kata you will be given a leaderboard of unique names for example:
  
  ```python
  ['John',
   'Brian',
   'Jim',
   'Dave',
   'Fred']
  ```
  
  Then you will be given a list of strings for example:
  
  ```python
  ['Dave +1', 'Fred +4', 'Brian -1']
  ```
  
  Then you sort the leaderboard.
  
  The steps for our example would be:
  
  ```python
  # Dave up 1
  ['John',
   'Brian',
   'Dave',
   'Jim',
   'Fred']
  ```
  
  ```python
  # Fred up 4
  ['Fred',
   'John',
   'Brian',
   'Dave',
   'Jim']
  ```
  
  ```python
  # Brian down 1
  ['Fred',
   'John',
   'Dave',
   'Brian',
   'Jim']
  ```
  
  Then once you have done this you need to return the leaderboard.
  
  All inputs will be valid. All strings in the second list will never ask to move a name up higher or lower than possible eg. `"John +3"` could not be added to the end of the second input list in the example above.
  
  The strings in the second list will always be something in the leaderboard followed by a space and a `+` or `-` sign followed by a number.
  -/

vc-preamble: |-
  def leaderboard_sort (names : List String) (changes : List String) : List String :=
    sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def parseChange (change : String) : String × Int :=
    sorry

vc-theorems: |-
  theorem leaderboard_invariants
    (names : List String)
    (changes : List String)
    (h_names : names.length > 0)
    (h_unique : ∀ x y, x ∈ names → y ∈ names → x = y → names.indexOf x = names.indexOf y) :
    let result := leaderboard_sort names changes
    -- Length preserved
    (result.length = names.length) ∧
    -- All elements preserved
    (∀ x, x ∈ names ↔ x ∈ result) ∧
    -- Valid movements
    (∀ change ∈ changes,
      let (name, delta) := parseChange change
      name ∈ names →
      names.indexOf name - result.indexOf name = delta) :=
    sorry
  
  theorem leaderboard_bounds
    (names : List String)
    (changes : List String)
    (h : changes.length = 1) :
    let result := leaderboard_sort names changes
    let (name, delta) := parseChange changes.head!
    -- Result maintains bounds
    (result.indexOf name ≥ 0) ∧
    (result.indexOf name < names.length) :=
    sorry
  
  /-
  info: expected1
  -/
  -- #guard_msgs in
  -- #eval leaderboard_sort ["John", "Brian", "Jim", "Dave", "Fred"] ["Dave +1", "Fred +4", "Brian -1"]
  
  /-
  info: expected2
  -/
  -- #guard_msgs in
  -- #eval leaderboard_sort ["Bob", "Larry", "Kevin", "Jack", "Max"] ["Max +3", "Kevin -1", "Kevin +3"]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

