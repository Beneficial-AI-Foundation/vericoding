vc-description: |-
  /-
  Given two arrays nums1 and nums2.
  Return the maximum dot product between non-empty subsequences of nums1 and nums2 with the same length.
  A subsequence of a array is a new array which is formed from the original array by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, [2,3,5] is a subsequence of [1,2,3,4,5] while [1,5,3] is not).
  
  Example 1:
  Input: nums1 = [2,1,-2,5], nums2 = [3,0,-6]
  Output: 18
  Explanation: Take subsequence [2,-2] from nums1 and subsequence [3,-6] from nums2.
  Their dot product is (2*3 + (-2)*(-6)) = 18.
  Example 2:
  Input: nums1 = [3,-2], nums2 = [2,-6,7]
  Output: 21
  Explanation: Take subsequence [3] from nums1 and subsequence [7] from nums2.
  Their dot product is (3*7) = 21.
  Example 3:
  Input: nums1 = [-1,-1], nums2 = [1,1]
  Output: -1
  Explanation: Take subsequence [-1] from nums1 and subsequence [1] from nums2.
  Their dot product is -1.
  
  Constraints:
  
  1 <= nums1.length, nums2.length <= 500
  -1000 <= nums1[i], nums2[i] <= 1000
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def max_dot_product (nums1 nums2 : List Int) : Int := sorry
  
  theorem max_dot_product_bounds 
    (nums1 nums2 : List Int) :
    let min_product := (List.map (fun x => List.map (fun y => x * y) nums2) nums1).join.minimum?
    let max_product := (List.map (fun x => List.map (fun y => x * y) nums2) nums1).join.maximum?
    match min_product, max_product with
    | some min, some max => 
      max_dot_product nums1 nums2 ≥ min ∧ 
      max_dot_product nums1 nums2 ≤ nums1.length * max
    | _, _ => True := sorry

vc-theorems: |-
  theorem max_dot_product_reverse_invariant
    (nums1 nums2 : List Int) :
    max_dot_product nums1 nums2 = max_dot_product nums1.reverse nums2.reverse := sorry
  
  theorem max_dot_product_neg_invariant
    (nums1 nums2 : List Int) :
    max_dot_product nums1 nums2 = 
      - (max_dot_product (nums1.map (fun x => -x)) (nums2.map (fun x => -x))) := sorry
  
  theorem max_dot_product_monotonic
    (nums1 nums2 : List Int) :
    let big_num := max (nums1.maximum?.getD 0) (nums2.maximum?.getD 0) + 100
    max_dot_product (nums1 ++ [big_num]) (nums2 ++ [big_num]) ≥ 
      max_dot_product nums1 nums2 := sorry
  
  /-
  info: 18
  -/
  -- #guard_msgs in
  -- #eval max_dot_product [2, 1, -2, 5] [3, 0, -6]
  
  /-
  info: 21
  -/
  -- #guard_msgs in
  -- #eval max_dot_product [3, -2] [2, -6, 7]
  
  /-
  info: -1
  -/
  -- #guard_msgs in
  -- #eval max_dot_product [-1, -1] [1, 1]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

