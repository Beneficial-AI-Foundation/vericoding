vc-description: |-
  /-
  You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol.
  
  Find out how many ways to assign symbols to make sum of integers equal to target S.  
  
  Example 1:
  
  Input: nums is [1, 1, 1, 1, 1], S is 3. 
  Output: 5
  Explanation: 
  
  -1+1+1+1+1 = 3
  +1-1+1+1+1 = 3
  +1+1-1+1+1 = 3
  +1+1+1-1+1 = 3
  +1+1+1+1-1 = 3
  
  There are 5 ways to assign symbols to make the sum of nums be target 3.
  
  Note:
  
  The length of the given array is positive and will not exceed 20. 
  The sum of elements in the given array will not exceed 1000.
  Your output answer is guaranteed to be fitted in a 32-bit integer.
  -/

vc-preamble: |-
  def List.sum (xs : List Nat) : Nat :=
    match xs with
    | [] => 0
    | h :: t => h + List.sum t
  
  def Int.abs (n : Int) : Int :=
    if n ≥ 0 then n else -n
  
  def List.sort (xs : List Nat) : List Nat :=
    sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def find_target_sum_ways (nums : List Nat) (target : Int) : Nat :=
    sorry

vc-theorems: |-
  theorem output_bounds_nonnegative {nums : List Nat} {target : Int} :
    find_target_sum_ways nums target ≥ 0 := sorry
  
  theorem output_bounds_impossible {nums : List Nat} {target : Int} :
    ((nums.sum : Int) < target.abs) → find_target_sum_ways nums target = 0 := sorry
  
  theorem invariant_permutation {nums : List Nat} {target : Int} :
    find_target_sum_ways nums target = find_target_sum_ways (List.sort nums) target := sorry
  
  theorem invariant_odd_sum {nums : List Nat} {target : Int} :
    ((nums.sum : Int) + target) % 2 = 1 → find_target_sum_ways nums target = 0 := sorry
  
  theorem all_ones_symmetric {n : Nat} {nums : List Nat} :
    (∀ x ∈ nums, x = 1) →
    find_target_sum_ways nums (n / 2) = find_target_sum_ways nums (-n / 2) := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

