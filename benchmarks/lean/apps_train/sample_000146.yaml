vc-description: |-
  We have jobs: difficulty[i] is the difficulty of the ith job, and profit[i] is the profit of the ith job. 
  Now we have some workers. worker[i] is the ability of the ith worker, which means that this worker can only complete a job with difficulty at most worker[i]. 
  Every worker can be assigned at most one job, but one job can be completed multiple times.
  For example, if 3 people attempt the same job that pays $1, then the total profit will be $3.  If a worker cannot complete any job, his profit is $0.
  What is the most profit we can make?
  Example 1:
  Input: difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]
  Output: 100 
  Explanation: Workers are assigned jobs of difficulty [4,4,6,6] and they get profit of [20,20,30,30] seperately.
  Notes:

  1 <= difficulty.length = profit.length <= 10000
  1 <= worker.length <= 10000
  difficulty[i], profit[i], worker[i]  are in range [1, 10^5]
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def max_profit_assignment (difficulty profit worker : List Int) : Int :=
    sorry
vc-theorems: |
  theorem max_profit_basic_properties
    (difficulty : List Int) 
    (profit : List Int)
    (worker : List Int)
    (hdiff : ∀ d ∈ difficulty, 1 ≤ d ∧ d ≤ 20)
    (hprof : ∀ p ∈ profit, 1 ≤ p ∧ p ≤ 100)
    (hwork : ∀ w ∈ worker, 1 ≤ w ∧ w ≤ 20)
    (hlen : difficulty.length = profit.length)
    : let result := max_profit_assignment difficulty profit worker
      result ≥ 0 ∧ result ≤ (List.foldl max 0 profit) * worker.length :=
    sorry


  theorem zero_skill_workers_result
    (difficulty : List Int)
    (profit : List Int)
    (worker : List Int)
    (hdiff : ∀ d ∈ difficulty, 1 ≤ d ∧ d ≤ 10)
    (hprof : ∀ p ∈ profit, 0 ≤ p ∧ p ≤ 10)
    (hwork : ∀ w ∈ worker, w = 0)
    (hlen : difficulty.length = profit.length)
    : max_profit_assignment difficulty profit worker = 0 :=
    sorry


  theorem overskilled_workers_result
    (difficulty : List Int)
    (profit : List Int)
    (worker : List Int)
    (hdiff : ∀ d ∈ difficulty, 1 ≤ d ∧ d ≤ 10)
    (hprof : ∀ p ∈ profit, 0 ≤ p ∧ p ≤ 100)
    (hwork : ∀ w ∈ worker, 100 ≤ w ∧ w ≤ 200)
    (hlen : difficulty.length = profit.length)
    : max_profit_assignment difficulty profit worker = worker.length * (List.foldl max 0 profit) :=
    sorry

  /--
  info: 100
  -/
  #guard_msgs in
  #eval max_profit_assignment [2, 4, 6, 8, 10] [10, 20, 30, 40, 50] [4, 5, 6, 7]

  /--
  info: 30
  -/
  #guard_msgs in
  #eval max_profit_assignment [1, 2, 3] [10, 20, 30] [1, 2]

  /--
  info: 0
  -/
  #guard_msgs in
  #eval max_profit_assignment [5] [100] [1, 2, 3]
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
