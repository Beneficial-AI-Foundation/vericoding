vc-description: |-
  You are given an array with $N$ integers: $A[1], A[2], \ldots, A[N]$ (where $N$ is even). You are allowed to permute the elements however you want. Say, after permuting the elements, you end up with the array $A'[1], A'[2], \ldots, A'[N]$. Your goal is to maximize the following sum:
  |A′[1]−A′[2]| + |A′[3]−A′[4]| + ... + |A′[N−1]−A′[N]||A′[1]−A′[2]| + |A′[3]−A′[4]| + ... + |A′[N−1]−A′[N]|
  |A'[1] - A'[2]| \ + \ |A'[3] - A'[4]| \ + \ ... \ + \ |A'[N - 1] - A'[N]|

  Here, $|x|$ denotes the absolute value of $x$.
  You have to print the maximum sum achievable.

  -----Input-----
  - The first line contains $T$, the number of test cases.
  - Each test case starts with an integer $N$ in the first line.
  - The second line of each test case contains $N$ space separated integers, denoting the values of array $A$.

  -----Output-----
  For each test case, output the maximum sum achievable in a new line.

  -----Constraints-----
  - $1 \le T \le 10^5$
  - $1 \le N \le 10^5$
  - $N$ is even
  - $|A[i]| \le 10^9$
  - Sum of $N$ over all test cases $\le 2 * 10^5$

  -----Example Input 1-----
  1
  4
  1 -3 2 -3

  -----Example Output 1-----
  9

  -----Explanation 1-----
  The original array is {$1, -3, 2, -3$}. Suppose you permute it and get the array {$2, 1, -3, -3$}. Then the corresponding sum would be $|2 - 1| \ + \ |-3 - (-3)| = 1 + 0 = 1$.
  But suppose you permute it differently and get the array {$-3, 2, 1, -3$}. Then the corresponding sum would be $|-3 - 2| \ + \ |1 - (-3)| = 5 + 4 = 9$. You can check that you cannot do any better, and hence the answer is 9.
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |-
  def max_abs_sum_pairs (n : Nat) (arr : List Int) : Int :=
    sorry

  -- Length of input array is even and at least 2
vc-theorems: |
  theorem max_abs_sum_pairs_input_valid (n : Nat) (arr : List Int) :
    n ≥ 2 → n % 2 = 0 → arr.length = n := by
    sorry


  theorem max_abs_sum_pairs_non_negative (n : Nat) (arr : List Int) :
    max_abs_sum_pairs n arr ≥ 0 := by 
    sorry


  theorem max_abs_sum_pairs_preserves_length (n : Nat) (arr : List Int) :
    arr.length = n := by
    sorry


  theorem max_abs_sum_pairs_same_elements (n : Nat) (arr : List Int) :
    List.length arr = n := by
    sorry


  theorem max_abs_sum_pairs_bounded (n : Nat) (arr : List Int) (bound : Int) : 
    (∀ x ∈ arr, -1000 ≤ x ∧ x ≤ 1000) →
    max_abs_sum_pairs n arr ≤ bound := by
    sorry


  theorem max_abs_sum_pairs_achieves_maximum (n : Nat) (arr : List Int) (max : Int) :
    max_abs_sum_pairs n arr = max := by
    sorry


  theorem max_abs_sum_pairs_zero_array (n : Nat) :
    n ≥ 2 → n % 2 = 0 →
    max_abs_sum_pairs n (List.replicate n 0) = 0 := by
    sorry

  /--
  info: 9
  -/
  #guard_msgs in
  #eval max_abs_sum_pairs 4 [1, -3, 2, -3]

  /--
  info: 10
  -/
  #guard_msgs in
  #eval max_abs_sum_pairs 2 [5, -5]

  /--
  info: 12
  -/
  #guard_msgs in
  #eval max_abs_sum_pairs 6 [1, 2, 3, -1, -2, -3]
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
