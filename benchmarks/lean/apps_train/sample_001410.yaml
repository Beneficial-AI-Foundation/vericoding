vc-description: |-
  Consider the fraction, $a/b$, where $a$ and $b$ are positive integers. If $a < b$ and $GCD(a,b) = 1$, it is called a reduced proper fraction.
  If we list the set of a reduced proper fraction for $d \leq 8$, (where $d$ is the denominator) in ascending order of size, we get:
  $1/8$, $1/7$, $1/6$, $1/5$, $1/4$, $2/7$, $1/3$, $3/8$, $2/5$ , $3/7$, $1/2$, $4/7$, $3/5$, $5/8$, $2/3$, $5/7$, $3/4$, $4/5$,  $5/6$, $6/7$, $7/8$
  It can be seen that $2/5$ is the fraction immediately to the left of $3/7$.
  By listing the set of reduced proper fractions for $d \leq N$ in ascending order of value, find the numerator and denominator of the fraction immediately to the left of $a/b$ when $a$ and $b$ are given.

  -----Input:-----
  - First line of input contains an integer $T$, number of test cases
  - Next $T$ lines contain $a$ $b$ $N$ separated by space

  -----Output:-----
  Print the numerator and denominator separated by a space corresponding to each test case on a new line

  -----Constraints-----
  - $1 \leq T \leq 50$
  - $1 \leq a < b \leq 10^9$
  - $GCD(a,b) = 1$
  - $b < N \leq 10^{15}$

  -----Subtasks-----
  - 10 points: $1 \leq N \leq 100$
  - 30 points : $1 \leq N \leq 10^6$
  - 60 points : $1 \leq N \leq 10^{15}$

  -----Sample Input:-----
  5
  3 7 8
  3 5 8
  4 5 8
  6 7 8
  1 5 8

  -----Sample Output:-----
  2 5
  4 7
  3 4
  5 6
  1 6
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def find_left_fraction (a b n : Nat) : Nat × Nat := sorry

  theorem find_left_fraction_properties {a b n : Nat}
    (ha : 2 ≤ a) (hb : 3 ≤ b) (hn : 3 ≤ n)
    (hab : a < b) (hbn : b ≤ n) :
    let (num, den) := find_left_fraction a b n
    -- Result is proper fraction within bounds
    0 < num ∧ num < den ∧ den ≤ n ∧
    -- Result is less than target
    num * b < a * den ∧
    -- Result is maximal among such fractions
    ∀ n2 d : Nat,
      1 ≤ d → d ≤ n →
      1 ≤ n2 → n2 < d →
      n2 * b < a * d →
      n2 * den ≤ num * d := sorry
vc-theorems: |-
  theorem find_left_fraction_reduced {a b n : Nat}
    (ha : 2 ≤ a) (hb : 3 ≤ b) (hn : 3 ≤ n)
    (hab : a < b) (hbn : b ≤ n) :
    let (num, den) := find_left_fraction a b n
    ∀ k : Nat,
      k > 1 →
      ¬(k ∣ num ∧ k ∣ den) := sorry
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded
