vc-description: |-
  # Task
   Given a string `str`, find the shortest possible string which can be achieved by adding characters to the end of initial string to make it a palindrome.

  # Example

   For `str = "abcdc"`, the output should be `"abcdcba"`.

  # Input/Output


   - `[input]` string `str`

      A string consisting of lowercase latin letters.

      Constraints: `3 ≤ str.length ≤ 10`.


   - `[output]` a string
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |-
  def build_palindrome (s : String) : String := sorry

  def is_palindrome (s : String) : Bool := sorry

  -- Result should be palindrome and contain input as prefix
vc-theorems: |
  theorem build_palindrome_valid (s : String) (h : s.length > 0) :
    let result := build_palindrome s
    is_palindrome result ∧ result.startsWith s := sorry

  -- Result length should be at most double input length  

  theorem build_palindrome_minimal (s : String) (h : s.length > 0) :
    (build_palindrome s).length ≤ 2 * s.length := sorry

  -- Already palindrome string should be unchanged

  theorem build_palindrome_idempotent (s : String) (h₁ : s.length > 0) (h₂ : is_palindrome s) :
    build_palindrome s = s := sorry

  /--
  info: 'abcdcba'
  -/
  #guard_msgs in
  #eval build_palindrome "abcdc"

  /--
  info: 'abababa'
  -/
  #guard_msgs in
  #eval build_palindrome "ababab"

  /--
  info: 'abcba'
  -/
  #guard_msgs in
  #eval build_palindrome "abc"
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
