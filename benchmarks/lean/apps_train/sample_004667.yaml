vc-description: |-
  # Task
   A boy is walking a long way from school to his home. To make the walk more fun he decides to add up all the numbers of the houses that he passes by during his walk. Unfortunately, not all of the houses have numbers written on them, and on top of that the boy is regularly taking turns to change streets, so the numbers don't appear to him in any particular order.

   At some point during the walk the boy encounters a house with number `0` written on it, which surprises him so much that he stops adding numbers to his total right after seeing that house.

   For the given sequence of houses determine the sum that the boy will get. It is guaranteed that there will always be at least one 0 house on the path.

  # Example

   For `inputArray = [5, 1, 2, 3, 0, 1, 5, 0, 2]`, the output should be `11`.

   The answer was obtained as `5 + 1 + 2 + 3 = 11`.

  # Input/Output


   - `[input]` integer array `inputArray`

      Constraints: `5 ≤ inputArray.length ≤ 50, 0 ≤ inputArray[i] ≤ 10.`


   - `[output]` an integer
vc-preamble: |
  import Imports.AllImports

  def List.sum : List Nat → Nat 
    | [] => 0
    | (x :: xs) => x + sum xs
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |+
  def house_numbers_sum (nums : List Nat) : Nat := sorry

  theorem house_numbers_sum_non_negative {nums : List Nat} (h : 0 ∈ nums) :
    house_numbers_sum nums ≥ 0 := sorry


vc-theorems: |
  theorem house_numbers_sum_ignore_after_zero {nums modified : List Nat} 
    (h : 0 ∈ nums)
    (h2 : modified.take (nums.indexOf 0 + 1) = nums.take (nums.indexOf 0 + 1)) :
    house_numbers_sum modified = house_numbers_sum nums := sorry


  theorem house_numbers_sum_ones (n : Nat) :
    house_numbers_sum (List.replicate n 1 ++ [0]) = n := sorry


  theorem house_numbers_sum_zero :
    house_numbers_sum [0] = 0 := sorry


  theorem house_numbers_sum_zero_prefix :
    house_numbers_sum [0, 1, 2, 3] = 0 := sorry

  /--
  info: 11
  -/
  #guard_msgs in
  #eval house_numbers_sum [5, 1, 2, 3, 0, 1, 5, 0, 2]

  /--
  info: 0
  -/
  #guard_msgs in
  #eval house_numbers_sum [0, 1, 2, 3]

  /--
  info: 13
  -/
  #guard_msgs in
  #eval house_numbers_sum [4, 2, 1, 6, 0, 3, 2]
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible
