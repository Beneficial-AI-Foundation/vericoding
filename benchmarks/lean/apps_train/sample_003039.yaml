vc-description: |-
  The first input array is the key to the correct answers to an exam, like ["a", "a", "b", "d"]. The second one contains a student's submitted answers. 
  
  The two arrays are not empty and are the same length. Return the score for this array of answers, giving +4 for each correct answer, -1 for each incorrect answer, and +0 for each blank answer, represented as an empty string (in C the space character is used).
  
  If the score < 0, return 0.
  
  For example:
  ```
  checkExam(["a", "a", "b", "b"], ["a", "c", "b", "d"]) → 6
  checkExam(["a", "a", "c", "b"], ["a", "a", "b",  ""]) → 7
  checkExam(["a", "a", "b", "c"], ["a", "a", "b", "c"]) → 16
  checkExam(["b", "c", "b", "a"], ["",  "a", "a", "c"]) → 0
  ```

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def check_exam (arr1 arr2 : List Char) : Int :=
    sorry

vc-theorems: |-
  theorem check_exam_non_negative (arr1 arr2 : List Char) : 
    check_exam arr1 arr2 ≥ 0 :=
    sorry
  
  theorem check_exam_perfect_score {arr1 arr2 : List Char} (h : arr1 = arr2) :  
    check_exam arr1 arr2 = 4 * arr1.length :=
    sorry 
  
  theorem check_exam_empty_answers {arr1 arr2 : List Char} 
    (h : ∀ x, x ∈ arr2 → x = ' ') :
    check_exam arr1 arr2 = 0 :=
    sorry
  
  theorem check_exam_imperfect_score {arr1 arr2 : List Char} 
    (h : arr1.length = arr2.length) (h2 : arr1 ≠ arr2) :
    check_exam arr1 arr2 < 4 * arr1.length :=
    sorry
  
  /--
  info: 6
  -/
  #guard_msgs in
  #eval check_exam ["a", "a", "b", "b"] ["a", "c", "b", "d"]
  
  /--
  info: 7
  -/
  #guard_msgs in
  #eval check_exam ["a", "a", "c", "b"] ["a", "a", "b", ""]
  
  /--
  info: 0
  -/
  #guard_msgs in
  #eval check_exam ["b", "c", "b", "a"] ["", "a", "a", "c"]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

