vc-description: |-
  Given an integer n, your task is to count how many strings of length n can be formed under the following rules:

  Each character is a lower case vowel ('a', 'e', 'i', 'o', 'u')
  Each vowel 'a' may only be followed by an 'e'.
  Each vowel 'e' may only be followed by an 'a' or an 'i'.
  Each vowel 'i' may not be followed by another 'i'.
  Each vowel 'o' may only be followed by an 'i' or a 'u'.
  Each vowel 'u' may only be followed by an 'a'.

  Since the answer may be too large, return it modulo 10^9 + 7.
   
  Example 1:
  Input: n = 1
  Output: 5
  Explanation: All possible strings are: "a", "e", "i" , "o" and "u".

  Example 2:
  Input: n = 2
  Output: 10
  Explanation: All possible strings are: "ae", "ea", "ei", "ia", "ie", "io", "iu", "oi", "ou" and "ua".

  Example 3: 
  Input: n = 5
  Output: 68
   
  Constraints:

  1 <= n <= 2 * 10^4
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def count_vowel_permutation (n : Nat) : Nat := sorry

  theorem count_vowel_permutation_positive (n : Nat) (h : n > 0): 
    count_vowel_permutation n > 0 := sorry
vc-theorems: |
  theorem count_vowel_permutation_bounded (n : Nat) (h : n > 0):
    count_vowel_permutation n < 1000000007 := sorry


  theorem count_vowel_permutation_base_one :
    count_vowel_permutation 1 = 5 := sorry


  theorem count_vowel_permutation_base_two :
    count_vowel_permutation 2 = 10 := sorry

  /--
  info: 5
  -/
  #guard_msgs in
  #eval count_vowel_permutation 1

  /--
  info: 10
  -/
  #guard_msgs in
  #eval count_vowel_permutation 2

  /--
  info: 68
  -/
  #guard_msgs in
  #eval count_vowel_permutation 5
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible
