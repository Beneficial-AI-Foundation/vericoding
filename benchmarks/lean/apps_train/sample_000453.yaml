vc-description: |-
  You are given an integer array nums. The value of this array is defined as the sum of |nums[i]-nums[i+1]| for all 0 <= i < nums.length-1.
  You are allowed to select any subarray of the given array and reverse it. You can perform this operation only once.
  Find maximum possible value of the final array.
   
  Example 1:
  Input: nums = [2,3,1,5,4]
  Output: 10
  Explanation: By reversing the subarray [3,1,5] the array becomes [2,5,1,3,4] whose value is 10.

  Example 2:
  Input: nums = [2,4,9,24,2,1,10]
  Output: 68

   
  Constraints:

  1 <= nums.length <= 3*10^4
  -10^5 <= nums[i] <= 10^5
vc-preamble: |
  import Imports.AllImports

  def abs (n : Int) : Int := 
    if n ≥ 0 then n else -n


  def maxValueAfterReverse (nums : List Int) : Int :=
    sorry
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def diffSum (nums : List Int) : Int :=
    match nums with
    | [] => 0
    | [_] => 0
    | x :: xs => List.foldl (fun acc (pair : Int × Int) => acc + abs (pair.1 - pair.2)) 0 (List.zip (x::xs) xs)
vc-theorems: |
  theorem maxValueAfterReverse_nonnegative (nums : List Int) :
    maxValueAfterReverse nums ≥ 0 :=
    sorry


  theorem maxValueAfterReverse_geq_base (nums : List Int) :
    maxValueAfterReverse nums ≥ diffSum nums :=
    sorry


  theorem maxValueAfterReverse_small_lists {nums : List Int} (h : nums.length ≤ 2) :
    match nums with
    | [] => maxValueAfterReverse nums = 0
    | [_] => maxValueAfterReverse nums = 0 
    | [x, y] => maxValueAfterReverse nums = abs (x - y)
    | _ => True
    :=
    sorry


  theorem maxValueAfterReverse_monotonic_defined (nums : List Int) (h : nums.length ≥ 3) :
    ∃ (n n' : Int), maxValueAfterReverse nums = n :=
    sorry

  /--
  info: 10
  -/
  #guard_msgs in
  #eval maxValueAfterReverse [2, 3, 1, 5, 4]

  /--
  info: 68
  -/
  #guard_msgs in
  #eval maxValueAfterReverse [2, 4, 9, 24, 2, 1, 10]

  /--
  info: 8
  -/
  #guard_msgs in
  #eval maxValueAfterReverse [1, 2, 3, 4, 5]
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
