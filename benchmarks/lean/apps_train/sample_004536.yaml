vc-description: |-
  Linked Lists - Get Nth

  Implement a GetNth() function that takes a linked list and an integer index and returns the node stored at the Nth index position. GetNth() uses the C numbering convention that the first node is index 0, the second is index 1, ... and so on. So for the list 42 -> 13 -> 666, GetNth() with index 1 should return Node(13);

  The index should be in the range [0..length-1]. If it is not, GetNth() should throw/raise an exception (`ArgumentException` in C#, `InvalidArgumentException` in PHP). You should also raise an exception (`ArgumentException` in C#, `InvalidArgumentException` in PHP) if the list is empty/null/None.

  Prerequisite Kata (may be in beta):

  - Linked Lists - Push & BuildOneTwoThree
  - Linked Lists - Length & Count

  > The push() and buildOneTwoThree() (`BuildOneTwoThree` in C#, `build_one_two_three()` in PHP) functions do not need to be redefined.
vc-preamble: |
  import Imports.AllImports

  def Node.data : Node → Int
    | mk d _ => d


  def get_nth (head : Option Node) (n : Nat) : Option Node :=
    sorry
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def build_list : List Int → Option Node :=
    sorry
vc-theorems: |-
  theorem get_nth_valid_index_returns_correct_value (head : Option Node) (values : List Int) (index : Nat) :
    head = build_list values →
    index < values.length →
    ∃ (h : index < values.length), 
      (get_nth head index).map Node.data = some (values.get ⟨index, h⟩) :=
    sorry


  theorem get_nth_invalid_index_returns_none (head : Option Node) (values : List Int) (index : Nat) : 
    head = build_list values →
    index ≥ values.length →
    get_nth head index = none :=
    sorry


  theorem get_nth_empty_list_returns_none (index : Nat) :
    get_nth none index = none :=
    sorry


  theorem get_nth_zero_returns_first (head : Option Node) (values : List Int) :
    head = build_list values →
    values ≠ [] →
    (get_nth head 0).map Node.data = some (values.head!) :=
    sorry


  theorem get_nth_last_returns_last (head : Option Node) (values : List Int) :
    head = build_list values →
    values ≠ [] →
    ∃ (h : values.length - 1 < values.length),
      (get_nth head (values.length - 1)).map Node.data = some (values.get ⟨values.length - 1, h⟩) :=
    sorry
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded
