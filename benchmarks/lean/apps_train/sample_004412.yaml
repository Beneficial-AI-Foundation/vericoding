vc-description: |-
  Lucy loves to travel. Luckily she is a renowned computer scientist and gets to travel to international conferences using her department's budget.

  Each year, Society for Exciting Computer Science Research (SECSR) organizes several conferences around the world. Lucy always picks one conference from that list that is hosted in a city she hasn't been to before, and if that leaves her with more than one option, she picks the conference that she thinks would be most relevant for her field of research.

  Write a function `conferencePicker` that takes in two arguments:

  - `citiesVisited`, a list of cities that Lucy has visited before, given as an array of strings.
  - `citiesOffered`, a list of cities that will host SECSR conferences this year, given as an array of strings. `citiesOffered` will already be ordered in terms of the relevance of the conferences for Lucy's research (from the most to the least relevant).

  The function should return the city that Lucy should visit, as a string.

  Also note:

  - You should allow for the possibility that Lucy hasn't visited any city before.
  - SECSR organizes at least two conferences each year.
  - If all of the offered conferences are hosted in cities that Lucy has visited before, the function should return `'No worthwhile conferences this year!'` (`Nothing` in Haskell)

  Example:
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |-
  def conference_picker (visited offered : List String) : String := sorry

  -- if result is not "No worthwhile conferences this year!", then:
  -- 1. result must be in offered cities
  -- 2. result must not be in visited cities
  -- else all offered cities must be in visited cities
vc-theorems: |
  theorem result_validity (visited offered : List String) :
    let result := conference_picker visited offered
    match result with
    | "No worthwhile conferences this year!" => ∀ city, city ∈ offered → city ∈ visited
    | other => other ∈ offered ∧ other ∉ visited
    := sorry

  -- if all cities in offered list are also in visited list, result is "No worthwhile conferences this year!"

  theorem all_cities_visited_returns_no_conferences (cities : List String) : 
    conference_picker cities cities = "No worthwhile conferences this year!" := sorry

  -- if there is exactly one new city offered that hasn't been visited,
  -- that city will be returned

  theorem single_new_city_is_returned (visited : List String) (new_city : String)
    (h : new_city ∉ visited) :
    conference_picker visited [new_city] = new_city := sorry

  /--
  info: 'Philadelphia'
  -/
  #guard_msgs in
  #eval conference_picker [] ["Philadelphia", "Osaka", "Tokyo", "Melbourne"]

  /--
  info: 'No worthwhile conferences this year!'
  -/
  #guard_msgs in
  #eval conference_picker ["Rome"] ["Rome"]

  /--
  info: 'London'
  -/
  #guard_msgs in
  #eval conference_picker ["Milan"] ["London"]
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
