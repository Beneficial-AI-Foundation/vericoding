vc-description: |-
  Given two strings s and t, determine if they are isomorphic.

  Two strings are isomorphic if the characters in s can be replaced to get t.

  All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.

  Example 1:


  Input: s = "egg", t = "add"
  Output: true


  Example 2:


  Input: s = "foo", t = "bar"
  Output: false

  Example 3:


  Input: s = "paper", t = "title"
  Output: true

  Note:
  You may assume both s and t have the same length.
vc-preamble: |
  import Imports.AllImports

  def is_isomorphic (s1 s2 : List Char) : Bool :=
    sorry
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def unique_chars (s : List Char) : Nat :=
    sorry
vc-theorems: |
  theorem isomorphic_same_length {s1 s2 : List Char} : 
    s1.length ≠ s2.length → ¬is_isomorphic s1 s2 := sorry


  theorem isomorphic_identical_strings {s : List Char} :
    is_isomorphic s s := sorry


  theorem isomorphic_reversible {s1 s2 : List Char} :
    s1.length = s2.length → 
    is_isomorphic s1 s2 = is_isomorphic s2 s1 := sorry


  theorem isomorphic_preserves_uniqueness {s1 s2 : List Char} :
    s1.length = s2.length →
    is_isomorphic s1 s2 →
    unique_chars s1 = unique_chars s2 := sorry


  theorem isomorphic_repeated_chars {s1 s2 : List Char} :
    s1.length = s2.length →
    s1.length ≥ 2 →
    unique_chars s1 = 1 →
    (is_isomorphic s1 s2 ↔ unique_chars s2 = 1) := sorry

  /--
  info: True
  -/
  #guard_msgs in
  #eval is_isomorphic "egg" "add"

  /--
  info: False
  -/
  #guard_msgs in
  #eval is_isomorphic "foo" "bar"

  /--
  info: True
  -/
  #guard_msgs in
  #eval is_isomorphic "paper" "title"
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
