vc-preamble: |-
  -- <vc-preamble>
  def splitLines (input : String) : List String := sorry

  def isValidFirstLine (line : String) : Bool := sorry

  def parseFirstLineAsNat (line : String) : Nat := sorry

  def isValidCoordinateLine (line : String) : Bool := sorry

  def getDistinctLines (points : List (Int × Int)) : List (Int × Int × Int × Int) := sorry

  def groupLinesBySlope (lines : List (Int × Int × Int × Int)) : List (List (Int × Int × Int × Int)) := sorry

  def sumOverSlopeGroups (groups : List (List (Int × Int × Int × Int))) (totalLines : Nat) : Nat := sorry

  def validInputFormat (input : String) : Prop :=
    input.length > 0 ∧ input.data[input.length - 1]! = '\n' ∧
    (let lines := splitLines input;
    lines.length ≥ 3 ∧ lines.length ≤ 1001 ∧
    isValidFirstLine lines[0]! ∧
    (let n := parseFirstLineAsNat lines[0]!;
    n ≥ 2 ∧ n ≤ 1000 ∧ lines.length = n + 1 ∧
    (∀ i, 1 ≤ i ∧ i < lines.length → isValidCoordinateLine lines[i]!)))

  def isNonNegativeNumericString (s : String) : Prop :=
    s.length > 0 ∧ (∀ i, 0 ≤ i ∧ i < s.length → '0' ≤ s.data[i]! ∧ s.data[i]! ≤ '9')

  def validCoordinate (point : Int × Int) : Prop :=
    (let (x, y) := point;
    -10000 ≤ x ∧ x ≤ 10000 ∧ -10000 ≤ y ∧ y ≤ 10000)

  def extractN (input : String) : Nat :=
    (let lines := splitLines input;
    parseFirstLineAsNat lines[0]!)

  def extractPoints (_ : String) : List (Int × Int) :=
    [(0, 0), (1, 1)]

  def countIntersectingLinePairs (points : List (Int × Int)) : Nat :=
    (let distinctLines := getDistinctLines points;
    let slopeGroups := groupLinesBySlope distinctLines;
    let totalLines := distinctLines.length;
    (sumOverSlopeGroups slopeGroups totalLines) / 2)

  def stringToInt (_ : String) : Nat := 0

  @[reducible, simp]
  def solve_precond (stdin_input : String) : Prop :=
    stdin_input.length > 0 ∧ validInputFormat stdin_input
  -- </vc-preamble>

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  -- <vc-definitions>
  def solve (stdin_input : String) (_ : solve_precond stdin_input) : String :=
    sorry
  -- </vc-definitions>

vc-theorems: |-
  -- <vc-theorems>
  @[reducible, simp]
  def solve_postcond (stdin_input : String) (result : String) (h_precond : solve_precond stdin_input) : Prop :=
    result.length > 0 ∧
    isNonNegativeNumericString result ∧
    (let n := extractN stdin_input;
    let points := extractPoints stdin_input;
    points.length = n ∧ n ≥ 2 ∧ n ≤ 1000 ∧
    (∀ i, 0 ≤ i ∧ i < points.length → validCoordinate points[i]!) ∧
    (∀ i j, 0 ≤ i ∧ i < j ∧ j < points.length → points[i]! ≠ points[j]!) ∧
    stringToInt result = countIntersectingLinePairs points)

  theorem solve_spec_satisfied (stdin_input : String) (h_precond : solve_precond stdin_input) :
      solve_postcond stdin_input (solve stdin_input h_precond) h_precond := by
    sorry
  -- </vc-theorems>

vc-postamble: |-