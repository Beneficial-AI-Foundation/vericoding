vc-preamble: |-
  -- <vc-preamble>
  def ValidInput (n : Int) (a : List Int) : Prop :=
    n ≥ 1 ∧ a.length = n

  def reverseSeq (s : List Int) : List Int :=
    s.reverse

  def simulateOperations (a : List Int) : List Int :=
    sorry

  def computeResult (a : List Int) : List Int :=
    sorry

  @[reducible, simp]
  def solve_precond (n : Int) (a : List Int) : Prop :=
    ValidInput n a
  -- </vc-preamble>

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  -- <vc-definitions>
  def solve (n : Int) (a : List Int) (h_precond : solve_precond n a) : List Int :=
    sorry
  -- </vc-definitions>

vc-theorems: |-
  -- <vc-theorems>
  @[reducible, simp]
  def solve_postcond (n : Int) (a : List Int) (result : List Int) (h_precond : solve_precond n a) : Prop :=
    result.length = n ∧ result = computeResult a

  theorem solve_spec_satisfied (n : Int) (a : List Int) (h_precond : solve_precond n a) :
      solve_postcond n a (solve n a h_precond) h_precond := by
    sorry
  -- </vc-theorems>

vc-postamble: |-