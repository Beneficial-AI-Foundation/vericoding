vc-preamble: |-
  -- Helper functions translated from Dafny
  def SplitLines (input : String) : List String := sorry

  def ParseInt (s : String) : Int := sorry

  def ParseIntArray (s : String) : List Int := sorry

  def SumList (nums : List Int) : Int :=
    nums.sum

  def IsValidInput (input : String) : Prop :=
    let lines := SplitLines input
    lines.length ≥ 3 ∧ 
    ParseInt lines[0]! > 0 ∧
    (ParseIntArray lines[1]!).length = ParseInt lines[0]! ∧
    (ParseIntArray lines[2]!).length = ParseInt lines[0]!

  def GetInitialSum (input : String) : Int :=
    let lines := SplitLines input
    SumList (ParseIntArray lines[1]!)

  def GetTargetSum (input : String) : Int :=
    let lines := SplitLines input
    SumList (ParseIntArray lines[2]!)

  @[reducible, simp]
  def solve_precond (input : String) : Prop :=
    True

vc-helpers: |-

vc-definitions: |-
  def solve (input : String) (h_precond : solve_precond input) : String :=
    sorry

vc-theorems: |-
  @[reducible, simp]
  def solve_postcond (input : String) (result : String) (h_precond : solve_precond input) : Prop :=
    (result = "Yes" ∨ result = "No") ∧
    (IsValidInput input → (result = "Yes" ↔ GetInitialSum input ≥ GetTargetSum input)) ∧
    (¬IsValidInput input → result = "No")

  theorem solve_spec_satisfied (input : String) (h_precond : solve_precond input) :
      solve_postcond input (solve input h_precond) h_precond := by
    sorry

vc-postamble: |-