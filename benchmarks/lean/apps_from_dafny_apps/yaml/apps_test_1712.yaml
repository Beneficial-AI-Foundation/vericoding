vc-preamble: |-
  -- <vc-preamble>
  def ValidInput (n : Int) (a : Int) (b : Int) (mobs : List Int) : Prop :=
    n ≥ 0 ∧ a > 0 ∧ b > 0 ∧ mobs.length = n ∧
    ∀ i, 0 ≤ i ∧ i < n → i.natAbs < mobs.length ∧ mobs[i.natAbs]! ≥ 0

  def ValidOutput (result : List String) (n : Int) : Prop :=
    result.length = n ∧
    ∀ i, 0 ≤ i ∧ i < n → i.natAbs < result.length ∧ result[i.natAbs]! ∈ ["Vanya", "Vova", "Both"]

  def determineWinner (k : Int) (a : Int) (b : Int) : Int :=
    sorry

  def CorrectResult (result : List String) (n : Int) (a : Int) (b : Int) (mobs : List Int) : Prop :=
    ValidOutput result n ∧
    ∀ i, 0 ≤ i ∧ i < n →
      let total := a + b
      let k := if mobs[i.natAbs]! = 0 then 0 else mobs[i.natAbs]! % total
      (result[i.natAbs]! = "Vanya" ↔ determineWinner k a b = 0) ∧
      (result[i.natAbs]! = "Vova" ↔ determineWinner k a b = 1) ∧
      (result[i.natAbs]! = "Both" ↔ determineWinner k a b = 2)

  @[reducible, simp]
  def solve_precond (n : Int) (a : Int) (b : Int) (mobs : List Int) : Prop :=
    ValidInput n a b mobs
  -- </vc-preamble>

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  -- <vc-definitions>
  def solve (n : Int) (a : Int) (b : Int) (mobs : List Int) (h_precond : solve_precond n a b mobs) : List String :=
    sorry
  -- </vc-definitions>

vc-theorems: |-
  -- <vc-theorems>
  @[reducible, simp]
  def solve_postcond (n : Int) (a : Int) (b : Int) (mobs : List Int) (result : List String) (h_precond : solve_precond n a b mobs) : Prop :=
    CorrectResult result n a b mobs

  theorem solve_spec_satisfied (n : Int) (a : Int) (b : Int) (mobs : List Int) (h_precond : solve_precond n a b mobs) :
      solve_postcond n a b mobs (solve n a b mobs h_precond) h_precond := by
    sorry
  -- </vc-theorems>

vc-postamble: |-