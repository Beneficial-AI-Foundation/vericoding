vc-preamble: |-
  def LastOccurrenceHelper (cafes : List Int) (cafe : Int) (index : Int) : Int :=
    sorry

  def LastOccurrencePosition (cafes : List Int) (cafe : Int) (h : cafe ∈ cafes) : Int :=
    LastOccurrenceHelper cafes cafe (cafes.length - 1)

  @[reducible, simp]
  def solve_precond (cafes : List Int) : Prop :=
    cafes.length > 0

vc-helpers: |-

vc-definitions: |-
  def solve (cafes : List Int) (h_precond : solve_precond cafes) : Int :=
    sorry

vc-theorems: |-
  @[reducible, simp]
  def solve_postcond (cafes : List Int) (mini : Int) (h_precond : solve_precond cafes) : Prop :=
    mini ∈ cafes ∧ 
    ∀ cafe, cafe ∈ cafes → 
      LastOccurrencePosition cafes mini (by sorry) ≤ LastOccurrencePosition cafes cafe (by sorry)

  theorem solve_spec_satisfied (cafes : List Int) (h_precond : solve_precond cafes) :
      solve_postcond cafes (solve cafes h_precond) h_precond := by
    sorry

vc-postamble: |-