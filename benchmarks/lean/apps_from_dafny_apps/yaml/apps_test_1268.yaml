vc-preamble: |-
  -- <vc-preamble>
  def ValidInput (a b : List Int) : Prop :=
    a.length = b.length ∧ a.length ≥ 2 ∧ ∀ i, 0 ≤ i ∧ i < a.length → 0 ≤ a[i]! ∧ a[i]! ≤ b[i]!

  def sumSeq (s : List Int) : Int :=
    s.sum

  def findMax (s : List Int) : Int :=
    sorry

  def findMaxExcluding (s : List Int) (exclude : Int) : Int :=
    sorry

  def findTwoLargestSum (s : List Int) : Int :=
    sorry

  @[reducible, simp]
  def solve_precond (a b : List Int) : Prop :=
    ValidInput a b
  -- </vc-preamble>

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  -- <vc-definitions>
  def solve (a b : List Int) (h_precond : solve_precond a b) : String :=
    sorry
  -- </vc-definitions>

vc-theorems: |-
  -- <vc-theorems>
  @[reducible, simp]
  def solve_postcond (a b : List Int) (result : String) (h_precond : solve_precond a b) : Prop :=
    (result = "YES" ∨ result = "NO") ∧ (result = "YES" ↔ findTwoLargestSum b ≥ sumSeq a)

  theorem solve_spec_satisfied (a b : List Int) (h_precond : solve_precond a b) :
      solve_postcond a b (solve a b h_precond) h_precond := by
    sorry
  -- </vc-theorems>

vc-postamble: |-