vc-preamble: |-
  def ValidInput (input : String) : Prop :=
    input.length > 0

  def ValidGrid (grid : List String) (n m : Int) : Prop :=
    n ≥ 1 ∧ m ≥ 1 ∧ grid.length = n ∧
    ∀ i, 0 ≤ i ∧ i < grid.length → (grid[i]!).length = m

  def CountFaceSquares (input : String) : Int :=
    sorry

  def CountFaceSquaresAsString (input : String) : String :=
    sorry

  @[reducible, simp]
  def solve_precond (input : String) : Prop :=
    ValidInput input

vc-helpers: |-

vc-definitions: |-
  def solve (input : String) (h_precond : solve_precond input) : String :=
    sorry

vc-theorems: |-
  @[reducible, simp]
  def solve_postcond (input : String) (result : String) (h_precond : solve_precond input) : Prop :=
    result.length > 0 ∧ result = CountFaceSquaresAsString input

  theorem solve_spec_satisfied (input : String) (h_precond : solve_precond input) :
      solve_postcond input (solve input h_precond) h_precond := by
    sorry

vc-postamble: |-