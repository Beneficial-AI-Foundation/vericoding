vc-preamble: |-
  -- <vc-preamble>
  -- Helper functions for string processing
  def SplitLines (input : String) : List String := sorry
  def IsValidInteger (s : String) : Bool := sorry
  def StringToInt (s : String) : Nat := sorry
  def IsValidString (s : String) : Bool := sorry
  def IsValidIntegerArray (s : String) : Bool := sorry
  def ParseIntegerArray (s : String) : Array Nat := sorry
  def GetTestCases (input : String) : List (String × Nat × Array Nat) := sorry
  def CountChar (s : String) (c : Char) : Nat := sorry
  def SumDistancesToGreaterCharsHelper (t : String) (j : Nat) (k : Nat) : Nat := sorry

  def SumDistancesToGreaterChars (t : String) (j : Nat) : Nat :=
    SumDistancesToGreaterCharsHelper t j 0

  def ValidInputFormat (input : String) : Prop :=
    input.length > 0 ∧ 
    ∃ lines : List String,
      lines = SplitLines input ∧
      lines.length ≥ 1 ∧
      IsValidInteger (lines[0]!) ∧
      let t := StringToInt (lines[0]!)
      1 ≤ t ∧ t ≤ 100 ∧
      lines.length ≥ 1 + 3*t ∧
      ∀ i, 0 ≤ i ∧ i < t → 
        let base_idx := (1 + 3*i : Nat)
        base_idx + 2 < lines.length ∧
        IsValidString (lines[base_idx]!) ∧
        IsValidInteger (lines[base_idx + 1]!) ∧
        IsValidIntegerArray (lines[base_idx + 2]!) ∧
        let s := lines[base_idx]!
        let m := StringToInt (lines[base_idx + 1]!)
        let b_array := ParseIntegerArray (lines[base_idx + 2]!)
        1 ≤ s.length ∧ s.length ≤ 50 ∧
        (∀ j, j < s.length → 'a' ≤ s.data[j]! ∧ s.data[j]! ≤ 'z') ∧
        1 ≤ m ∧ m ≤ s.length ∧
        b_array.size = m ∧
        ∀ k, k < m → b_array[k]! ≤ 1225

  def ValidOutputFormat (output : String) (input : String) : Prop :=
    let test_cases := GetTestCases input
    test_cases.length > 0 → 
    ∃ output_lines : List String,
      output_lines = SplitLines output ∧
      output_lines.length ≥ test_cases.length ∧
      ∀ i, i < test_cases.length → 
        let (_, m, _) := test_cases[i]!
        i < output_lines.length ∧
        (output_lines[i]!).length = m ∧
        ∀ j, j < (output_lines[i]!).length → 'a' ≤ (output_lines[i]!).data[j]! ∧ (output_lines[i]!).data[j]! ≤ 'z'

  def OutputSatisfiesConstraints (output : String) (input : String) : Prop :=
    let test_cases := GetTestCases input
    let output_lines := SplitLines output
    test_cases.length > 0 ∧ output_lines.length ≥ test_cases.length →
    ∀ i, i < test_cases.length → 
      let (_, m, b) := test_cases[i]!
      i < output_lines.length ∧
      let t := output_lines[i]!
      t.length = m ∧
      (∀ j, j < m → 
        b[j]! = SumDistancesToGreaterChars t j)

  def PreservesCharacterUsage (output : String) (input : String) : Prop :=
    let test_cases := GetTestCases input
    let output_lines := SplitLines output
    test_cases.length > 0 ∧ output_lines.length ≥ test_cases.length →
    ∀ i, i < test_cases.length → 
      let (s, _, _) := test_cases[i]!
      i < output_lines.length ∧
      let t := output_lines[i]!
      ∀ c, 'a' ≤ c ∧ c ≤ 'z' → CountChar t c ≤ CountChar s c

  def ContainsNewlineTerminatedResults (output : String) : Prop :=
    output.length > 0 → output.data[output.length - 1]! = '\n'

  def AbsDiff (i : Int) (j : Int) : Int :=
    if i ≥ j then i - j else j - i

  @[reducible, simp]
  def solve_precond (stdin_input : String) : Prop :=
    stdin_input.length > 0 ∧ ValidInputFormat stdin_input
  -- </vc-preamble>

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  -- <vc-definitions>
  def solve (stdin_input : String) (h_precond : solve_precond stdin_input) : String :=
    sorry
  -- </vc-definitions>

vc-theorems: |-
  -- <vc-theorems>
  @[reducible, simp]
  def solve_postcond (stdin_input : String) (result : String) (h_precond : solve_precond stdin_input) : Prop :=
    ValidOutputFormat result stdin_input ∧
    OutputSatisfiesConstraints result stdin_input ∧
    PreservesCharacterUsage result stdin_input ∧
    (result ≠ "" → ContainsNewlineTerminatedResults result)

  theorem solve_spec_satisfied (stdin_input : String) (h_precond : solve_precond stdin_input) :
      solve_postcond stdin_input (solve stdin_input h_precond) h_precond := by
    sorry
  -- </vc-theorems>

vc-postamble: |-