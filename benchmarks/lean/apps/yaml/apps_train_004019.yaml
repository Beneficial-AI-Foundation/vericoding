vc-description: |-
  /-
  Your task is to make function, which returns the sum of a sequence of integers.
  
  The sequence is defined by 3 non-negative values: **begin**, **end**, **step**.
  
  If **begin** value is greater than the **end**, function should returns **0**
  
  *Examples*
  
  ~~~if-not:nasm
  
  ~~~
  
  This is the first kata in the series:
  
  1) Sum of a sequence (this kata)  
  2) [Sum of a Sequence [Hard-Core Version]](https://www.codewars.com/kata/sum-of-a-sequence-hard-core-version/javascript)
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def sequenceSum (a b c : Int) : Int :=
    sorry

vc-theorems: |-
  theorem sequence_sum_zero_when_start_greater_than_end
    {s e p : Int}
    (h1 : p > 0)
    (h2 : s > e) :
    sequenceSum s e p = 0 :=
  sorry
  
  theorem sequence_sum_equals_arithmetic_sum
    {s e p : Int}
    (h1 : p > 0)
    (h2 : s ≤ e) :
    let n := (e - s) / p + 1
    sequenceSum s e p = n * (2 * s + (n - 1) * p) / 2 :=
  sorry
  
  theorem sequence_sum_equals_manual_sum
    {s e p : Int}
    (h1 : p > 0)
    (h2 : s ≤ e) :
    sequenceSum s e p = sequenceSum s e p :=
  sorry
  
  theorem sequence_sum_equal_bounds
    {s p : Int}
    (h1 : p > 0) :
    sequenceSum s s p = s :=
  sorry
  
  /-
  info: 12
  -/
  -- #guard_msgs in
  -- #eval sequence_sum 2 6 2
  
  /-
  info: 15
  -/
  -- #guard_msgs in
  -- #eval sequence_sum 1 5 1
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval sequence_sum 16 15 3

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

