vc-description: |-
  /-
  Rahul is a serial killer. Rahul has been betrayed by his lover in the past and now he want to eliminate entire Universe.He has already Eliminated majority of the population and now only a handful number of people are left. Like other Serial killers, he has an interesting pattern of killing people. 
  He either kill one individual at a time or if he find two individuals of different heights,he eliminates both of them simultaneously. Now Rahul wants to eliminate them as quickly as he can.
  So given $N$ as the number of people left and an array containing height of those $N$ people,tell the minimum number of kills Rahul require to eliminate the entire universe.
  
  -----Input:-----
  - First line will contain $T$, number of testcases. Then the testcases follow. 
  - Each test case constitutes of Two lines. 
  - First line contains $N$, representing the number of people left in the universe
  - The second line contains an array $a[i]$ of size $N$ containing heights of those $N$ people.
  
  -----Output:-----
  For each testcase, you have to output a Single line Containing the minimum number of kills required by Rahul to eliminate the Universe.
  
  -----Constraints-----
  - $1 \leq T \leq 50000$
  - $1 \leq N \leq 50000$
  - $100 \leq a[i] \leq 10^5$
  
  -----Sample Input:-----
  1
  10
  178 184 178 177 171 173 171 183 171 175
  
  -----Sample Output:-----
  5
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def min_kills_needed (n : Nat) (heights : List Nat) : Nat := sorry
  
  theorem result_bounds {n : Nat} {heights : List Nat} (h1 : heights.length = n) (h2 : n > 0) :
    let result := min_kills_needed n heights
    result ≤ n ∧ result ≥ (n + 1) / 2 := sorry

vc-theorems: |-
  theorem same_height {n : Nat} {heights : List Nat} {h : Nat}
    (h1 : heights = List.replicate n h) (h2 : n > 0) :
    min_kills_needed n heights = n := sorry
  
  theorem alternating_heights {n : Nat} {h : Nat} (h1 : n > 0) :
    let heights := List.replicate (n/2) h ++ List.replicate (n/2) (h+1) ++
                   (if n % 2 = 1 then [h] else [])
    min_kills_needed n heights = (n + 1) / 2 := sorry
  
  theorem mode_dominance {n : Nat} {heights : List Nat} (h1 : heights.length = n) (h2 : n > 0)
    (h3 : ∃ x : Nat, (List.count x heights) * 2 > n) :
    min_kills_needed n heights = List.count (Classical.choose h3) heights := sorry
  
  /-
  info: 5
  -/
  -- #guard_msgs in
  -- #eval min_kills_needed 10 [178, 184, 178, 177, 171, 173, 171, 183, 171, 175]
  
  /-
  info: 5
  -/
  -- #guard_msgs in
  -- #eval min_kills_needed 5 [100, 100, 100, 100, 100]
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval min_kills_needed 4 [101, 102, 103, 104]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

