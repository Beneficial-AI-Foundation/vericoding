vc-description: |-
  /-
  *This is the advanced version of the 
  [Minimum and Maximum Product of k Elements](https://www.codewars.com/kata/minimum-and-maximum-product-of-k-elements/) kata.*
  
  ---
  
  Given a list of **integers** and a positive integer `k` (> 0), find the minimum and maximum possible product of `k` elements taken from the list.
  
  If you cannot take enough elements from the list, return `None`/`nil`.
  
  ## Examples
  
  ```python
  numbers = [1, -2, -3, 4, 6, 7]
  
  k = 1  ==>  -3, 7
  k = 2  ==>  -21, 42    # -3*7, 6*7
  k = 3  ==>  -126, 168  # -3*6*7, 4*6*7
  k = 7  ==>  None       # there are only 6 elements in the list
  ```
  
  Note: the test lists can contain up to 500 elements, so a naive approach will not work.
  
  ---
  
  ## My other katas
  
  If you enjoyed this kata then please try [my other katas](https://www.codewars.com/collections/katas-created-by-anter69)! :-)
  
  #### *Translations are welcome!*
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def find_min_max_product (arr : List Int) (k : Nat) : Option (Int × Int) := sorry
  
  theorem find_min_max_product_result_ordered 
      {arr : List Int} {k : Nat} 
      (h : k ≤ arr.length) :
      (find_min_max_product arr k).all (fun (min_max : Int × Int) => min_max.1 ≤ min_max.2) := sorry

vc-theorems: |-
  theorem find_min_max_product_bounds
      {arr : List Int} {k : Nat}
      (h : k ≤ arr.length)
      (i : Nat)
      (hi : i + k ≤ arr.length) :
      (find_min_max_product arr k).all (fun (min_max : Int × Int) =>
        let prod := (List.range k).foldl (fun acc j => acc * arr[i + j]!) 1
        min_max.1 ≤ prod ∧ prod ≤ min_max.2) := sorry
  
  theorem find_min_max_product_empty_list
      {arr : List Int} {k : Nat}
      (hempty : arr = []) 
      (hk : k > 0) :
      find_min_max_product arr k = none := sorry
  
  theorem find_min_max_product_k_too_large
      {arr : List Int} {k : Nat}
      (h : k > arr.length) :
      find_min_max_product arr k = none := sorry
  
  /-
  info: (-21, 42)
  -/
  -- #guard_msgs in
  -- #eval find_min_max_product [1, -2, -3, 4, 6, 7] 2
  
  /-
  info: (0, 12)
  -/
  -- #guard_msgs in
  -- #eval find_min_max_product [0, -1, -2, -3, -4] 2
  
  /-
  info: None
  -/
  -- #guard_msgs in
  -- #eval find_min_max_product [] 2

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

