vc-description: |-
  /-
  A sequence of number is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.
  
  For example, these are arithmetic sequence:
  1, 3, 5, 7, 9
  7, 7, 7, 7
  3, -1, -5, -9
  
  The following sequence is not arithmetic. 1, 1, 2, 5, 7 
  
  A zero-indexed array A consisting of N numbers is given. A slice of that array is any pair of integers (P, Q) such that 0 
  
  A slice (P, Q) of array A is called arithmetic if the sequence:
      A[P], A[p + 1], ..., A[Q - 1], A[Q] is arithmetic. In particular, this means that P + 1 < Q.
  
  The function should return the number of arithmetic slices in the array A. 
  
  Example:
  
  A = [1, 2, 3, 4]
  
  return: 3, for 3 arithmetic slices in A: [1, 2, 3], [2, 3, 4] and [1, 2, 3, 4] itself.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def numberOfArithmeticSlices (nums : List Int) : Nat :=
    sorry

vc-theorems: |-
  theorem number_of_slices_nonnegative (nums : List Int) :
    numberOfArithmeticSlices nums ≥ 0 := by
    sorry
  
  theorem arithmetic_sequence_count (nums : List Int) (n : Nat) (h : nums.length = n) (h2 : n ≥ 3) :
    let d := nums[1]! - nums[0]!
    let isArithmetic := ∀ i, 2 ≤ i → i < n → nums[i]! = nums[i-1]! + d
    isArithmetic →
    numberOfArithmeticSlices nums = (n - 2) * (n - 1) / 2 := by
    sorry
  
  theorem bounded_integers_nonnegative (nums : List Int) 
    (h : ∀ x ∈ nums, -1000 ≤ x ∧ x ≤ 1000) :
    numberOfArithmeticSlices nums ≥ 0 := by
    sorry
  
  theorem short_list_zero_slices (nums : List Int)
    (h : nums.length < 3) :
    numberOfArithmeticSlices nums = 0 := by
    sorry
  
  theorem constant_sequence_count (nums : List Int) (n : Nat) (val : Int)
    (h : nums.length = n)
    (h2 : n ≥ 3)
    (h3 : ∀ i, i < n → nums[i]! = val) :
    numberOfArithmeticSlices nums = (n - 2) * (n - 1) / 2 := by
    sorry
  
  /-
  info: 3
  -/
  -- #guard_msgs in
  -- #eval number_of_arithmetic_slices [1, 2, 3, 4]
  
  /-
  info: 6
  -/
  -- #guard_msgs in
  -- #eval number_of_arithmetic_slices [1, 2, 3, 4, 5]
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval number_of_arithmetic_slices [1, 1, 2, 5, 7]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

