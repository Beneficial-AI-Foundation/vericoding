vc-description: |-
  /-
  Implement a function which takes a string, and returns its hash value.
  
  Algorithm steps:
  
  * `a` := sum of the ascii values of the input characters
  * `b` := sum of every difference between the consecutive characters of the input (second char minus first char, third minus second, ...)
  * `c` := (`a` OR `b`) AND ((NOT `a`) shift left by 2 bits)
  * `d` := `c` XOR (32 * (`total_number_of_spaces` + 1))
  * return `d`
  
  **Note**: OR, AND, NOT, XOR are bitwise operations.
  
  ___
  
  ### Examples
  
  ```
  input = "a"
  a = 97
  b = 0
  result = 64
  
  input = "ca"
  a = 196
  b = -2
  result = -820
  ```
  
  ___
  
  Give an example why this hashing algorithm is bad?
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def string_hash (s : String) : Int :=
    sorry

vc-theorems: |-
  theorem string_hash_returns_integer (s : String) (h : s.length > 0) :
    ∃ n : Int, string_hash s = n :=
    sorry
  
  theorem string_hash_deterministic (s : String) (h : s.length > 1) :
    string_hash s = string_hash s :=
    sorry
  
  theorem string_hash_space_sensitive (s : String) (h : s.length > 0) :
    string_hash s ≠ string_hash (s ++ " ") ∧
    string_hash (s ++ " ") = string_hash (s ++ " ") :=
    sorry
  
  theorem string_hash_specific_value : 
    string_hash "a" = 64 :=
    sorry
  
  /-
  info: 64
  -/
  -- #guard_msgs in
  -- #eval string_hash "a"
  
  /-
  info: -820
  -/
  -- #guard_msgs in
  -- #eval string_hash "ca"
  
  /-
  info: 1120
  -/
  -- #guard_msgs in
  -- #eval string_hash "global hash"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

