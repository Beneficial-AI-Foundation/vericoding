vc-description: |-
  /-
  # ASC Week 1 Challenge 5 (Medium #2)
  
  Create a function that takes a 2D array as an input, and outputs another array that contains the average values for the numbers in the nested arrays at the corresponding indexes. 
  
  Note: the function should also work with negative numbers and floats.
  
  ## Examples
  ```
  [ [1, 2, 3, 4], [5, 6, 7, 8] ]  ==>  [3, 4, 5, 6]
  
  1st array: [1, 2, 3, 4]
  2nd array: [5, 6, 7, 8]
              |  |  |  |
              v  v  v  v
  average:   [3, 4, 5, 6]
  
  ```
  
  And another one:
  ```
  [ [2, 3, 9, 10, 7], [12, 6, 89, 45, 3], [9, 12, 56, 10, 34], [67, 23, 1, 88, 34] ]  ==>  [22.5, 11, 38.75, 38.25, 19.5]
  
  1st array: [  2,   3,    9,   10,    7]
  2nd array: [ 12,   6,   89,   45,    3]
  3rd array: [  9,  12,   56,   10,   34]
  4th array: [ 67,  23,    1,   88,   34]
                |    |     |     |     |
                v    v     v     v     v
  average:   [22.5, 11, 38.75, 38.25, 19.5]
  ```
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def avgArray (arrays : List (List Int)) : List Float := sorry
  
  theorem avg_array_length_preserving (arrays : List (List Int)) 
    (h1 : arrays.length > 0) (h2 : ∀ arr ∈ arrays, arr.length = arrays[0]!.length) :
    (avgArray arrays).length = arrays[0]!.length := sorry

vc-theorems: |-
  theorem avg_array_result_within_bounds (arrays : List (List Int)) (i : Nat)
    (h1 : arrays.length > 0) 
    (h2 : ∀ arr ∈ arrays, arr.length = arrays[0]!.length)
    (h3 : i < arrays[0]!.length) :
    let col := arrays.map (λ arr => arr[i]!)
    let result := avgArray arrays
    let colMin := Float.ofInt (col.foldl min col[0]!)
    let colMax := Float.ofInt (col.foldl max col[0]!)
    result[i]! ≥ colMin ∧ result[i]! ≤ colMax := sorry
  
  theorem avg_array_singleton (arr : List Int) :
    avgArray [arr] = arr.map Float.ofInt := sorry
  
  theorem avg_array_non_negative (arrays : List (List Int))
    (h1 : arrays.length > 0)
    (h2 : ∀ arr ∈ arrays, arr.length = arrays[0]!.length)
    (h3 : ∀ arr ∈ arrays, ∀ x ∈ arr, x ≥ 0) :
    ∀ x ∈ avgArray arrays, x ≥ 0 := sorry
  
  /-
  info: expected1
  -/
  -- #guard_msgs in
  -- #eval avg_array #[[1, 2, 3, 4], [5, 6, 7, 8]]
  
  /-
  info: expected2
  -/
  -- #guard_msgs in
  -- #eval avg_array #[[2, 5, 4, 3, 19], [2, 5, 6, 7, 10]]
  
  /-
  info: expected3
  -/
  -- #guard_msgs in
  -- #eval avg_array #[[2, 5, -4, 3, -19], [-2, -5, 6, 7, 10]]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

