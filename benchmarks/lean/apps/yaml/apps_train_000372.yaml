vc-description: |-
  /-
  Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum ≥ s. If there isn't one, return 0 instead.
  
  Example: 
  
  Input: s = 7, nums = [2,3,1,2,4,3]
  Output: 2
  Explanation: the subarray [4,3] has the minimal length under the problem constraint.
  
  Follow up:
  
  If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n).
  -/

vc-preamble: |-
  def min_subarray_len (target : Nat) (nums : List Nat) : Nat :=
  sorry
  
  def sum_list (l : List Nat) : Nat :=
  sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def slice (l : List Nat) (start : Nat) (len : Nat) : List Nat :=
  sorry

vc-theorems: |-
  theorem min_subarray_len_empty {target : Nat} :
    min_subarray_len target [] = 0 :=
  sorry
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval min_subarray_len 7 [2, 3, 1, 2, 4, 3]
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval min_subarray_len 5 []
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval min_subarray_len 10 [1, 1, 1]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible

