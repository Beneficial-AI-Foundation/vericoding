vc-description: |-
  /-
  You are given an array of `n+1` integers `1` through `n`. In addition there is a single duplicate integer.
  
  The array is unsorted.
  
  An example valid array would be `[3, 2, 5, 1, 3, 4]`. It has the integers `1` through `5` and `3` is duplicated. `[1, 2, 4, 5, 5]` would not be valid as it is missing `3`.
  
  You should return the duplicate value as a single integer.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def find_dup (arr : List Nat) : Nat := sorry
  
  theorem find_dup_correct (n : Nat) (duplicate : Nat) 
    (h1 : n ≥ 2)
    (h2 : duplicate < n)
    (h3 : duplicate > 0)
    (arr : List Nat)
    (h4 : arr = (List.range (n-1)).append [duplicate]) :
    find_dup arr = duplicate ∧ 
    (arr.filter (λ x => x = duplicate)).length = 2 ∧
    ∀ x ∈ arr, x ≤ n-1 := sorry

vc-theorems: |-
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval find_dup [1, 1, 2, 3]
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval find_dup [1, 2, 2, 3]
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval find_dup [5, 4, 3, 2, 1, 1]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

