vc-description: |-
  /-
  In an infinite binary tree where every node has two children, the nodes are labelled in row order.
  In the odd numbered rows (ie., the first, third, fifth,...), the labelling is left to right, while in the even numbered rows (second, fourth, sixth,...), the labelling is right to left.
  
  Given the label of a node in this tree, return the labels in the path from the root of the tree to the node with that label.
  
  Example 1:
  Input: label = 14
  Output: [1,3,4,14]
  
  Example 2:
  Input: label = 26
  Output: [1,2,6,10,26]
  
  Constraints:
  
  1 <= label <= 10^6
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def path_in_zigzag_tree (label: Nat) : List Nat := sorry
  
  theorem path_starts_with_one {label: Nat} :
    label > 0 → (path_in_zigzag_tree label).head? = some 1 := sorry

vc-theorems: |-
  theorem path_strictly_increasing {label: Nat} (i: Nat) :
    label > 0 → i > 0 → i < (path_in_zigzag_tree label).length →
    (path_in_zigzag_tree label)[i-1]! < (path_in_zigzag_tree label)[i]! := sorry
  
  theorem path_length_matches_binary {label: Nat} :
    label > 0 → (path_in_zigzag_tree label).length = Nat.log2 label + 1 := sorry
  
  theorem path_elements_in_valid_range {label: Nat} (i: Nat) :
    label > 0 → i < (path_in_zigzag_tree label).length →
    2^i ≤ (path_in_zigzag_tree label)[i]! ∧ 
    (path_in_zigzag_tree label)[i]! < 2^(i+1) := sorry
  
  theorem path_for_small_labels_one :
    path_in_zigzag_tree 1 = [1] := sorry
  
  theorem path_for_small_labels_two_three (label: Nat) :
    label > 1 → label ≤ 3 →
    path_in_zigzag_tree label = [1, label] := sorry
  
  theorem path_for_powers_of_two (n: Nat) :
    n > 0 →
    let label := 2^n
    (path_in_zigzag_tree label).length = n + 1 ∧
    (path_in_zigzag_tree label).head? = some 1 ∧
    (path_in_zigzag_tree label).getLast? = some label := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

