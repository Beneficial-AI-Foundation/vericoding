vc-description: |-
  /-
  In this Kata, you will be given an array of strings and your task is to remove all consecutive duplicate letters from each string in the array.
  
  For example: 
  
    * `dup(["abracadabra","allottee","assessee"]) = ["abracadabra","alote","asese"]`. 
  
    * `dup(["kelless","keenness"]) = ["keles","kenes"]`.
  
  Strings will be lowercase only, no spaces. See test cases for more examples.
  
  ~~~if:rust
  For the sake of simplicity you can use the macro 'vec_of_string' to create a Vec with an array of string literals.
  ~~~
  
  Good luck!
  
  If you like this Kata, please try:
  
  [Alternate capitalization](https://www.codewars.com/kata/59cfc000aeb2844d16000075)
  
  [Vowel consonant lexicon](https://www.codewars.com/kata/59cf8bed1a68b75ffb000026)
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def dup (strings : List String) : List String := sorry
  
  theorem dup_same_length (strings : List String) (h : strings ≠ []) : 
    List.length (dup strings) = List.length strings := 
  sorry

vc-theorems: |-
  theorem dup_no_consecutive_duplicates (strings : List String) (h : strings ≠ []) :
    ∀ s ∈ dup strings, ∀ i, i + 1 < s.length → 
    s.data[i]? = some c₁ → s.data[i+1]? = some c₂ → c₁ ≠ c₂ :=
  sorry
  
  theorem dup_chars_from_input (strings : List String) (h : strings ≠ []) :
    ∀ (out_str : String), out_str ∈ dup strings → 
    ∀ (in_str : String), in_str ∈ strings → 
    ∀ c, c ∈ out_str.data → c ∈ in_str.data :=
  sorry
  
  theorem dup_preserves_order (strings : List String) (h : strings ≠ []) :
    ∀ (out_str : String), out_str ∈ dup strings →
    ∀ (in_str : String), in_str ∈ strings →
    ∀ i j, i < j → i < out_str.length → j < out_str.length →
    out_str.data[i]? = out_str.data[j]? → i + 1 < j :=
  sorry
  
  theorem dup_output_length (strings : List String) (h : strings ≠ []) (h2 : ∀ s ∈ strings, s.length > 0) :
    ∀ s ∈ dup strings, s.length ≤ List.foldl (fun acc x => max acc x.length) 0 strings :=
  sorry
  
  /-
  info: expected1
  -/
  -- #guard_msgs in
  -- #eval dup ["abracadabra", "allottee", "assessee"]
  
  /-
  info: expected2
  -/
  -- #guard_msgs in
  -- #eval dup ["kelless", "keenness"]
  
  /-
  info: expected3
  -/
  -- #guard_msgs in
  -- #eval dup ["ccooddddddewwwaaaaarrrrsssss"]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

