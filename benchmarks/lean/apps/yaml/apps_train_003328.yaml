vc-description: |-
  /-
  ## Enough is enough!
  
  Alice and Bob were on a holiday. Both of them took many pictures of the places they've been, and now they want to show Charlie their entire collection. However, Charlie doesn't like these sessions, since the motive usually repeats. He isn't fond of seeing the Eiffel tower 40 times. He tells them that he will only sit during the session if they show the same motive at most N times. Luckily, Alice and Bob are able to encode the motive as a number. Can you help them to remove numbers such that their list contains each number only up to N times, without changing the order?
  
  ## Task
  
  Given a list lst and a number N, create a new list that contains each number of lst at most N times without reordering. For example if N = 2, and the input is [1,2,3,1,2,1,2,3], you take [1,2,3,1,2], drop the next [1,2] since this would lead to 1 and 2 being in the result 3 times, and then take 3, which leads to [1,2,3,1,2,3].
  
  ~~~if:nasm
  ## NASM notes
  
  Write the output numbers into the `out` parameter, and return its length.
  
  The input array will contain only integers between 1 and 50 inclusive. Use it to your advantage.
  ~~~
  
  ~~~if:c
  For C:
  * Assign the return array length to the pointer parameter `*szout`.
  * Do not mutate the input array.
  ~~~
  
  ## Example
  ```python
    delete_nth ([1,1,1,1],2) # return [1,1]
  
    delete_nth ([20,37,20,21],1) # return [20,37,21]
  ```
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def delete_nth (lst: List Int) (max_e: Nat) : List Int := sorry
  
  theorem delete_nth_length {lst: List Int} {max_e: Nat} :
    List.length (delete_nth lst max_e) ≤ List.length lst := sorry

vc-theorems: |-
  theorem delete_nth_max_occurrences {lst: List Int} {max_e: Nat} {x: Int} :
    x ∈ delete_nth lst max_e → List.count x (delete_nth lst max_e) ≤ max_e := sorry
  
  theorem delete_nth_elements_from_original {lst: List Int} {max_e: Nat} {x: Int} :
    x ∈ delete_nth lst max_e → x ∈ lst := sorry 
  
  theorem delete_nth_zero {lst: List Int} :
    delete_nth lst 0 = [] := sorry
  
  theorem delete_nth_empty {lst: List Int} {max_e: Nat} :
    lst = [] → delete_nth lst max_e = [] := sorry
  
  theorem delete_nth_preserves_first {lst: List Int} {max_e: Nat} :
    max_e > 0 → ∀ x, x ∈ lst → x ∈ delete_nth lst max_e := sorry
  
  /-
  info: [20, 37, 21]
  -/
  -- #guard_msgs in
  -- #eval delete_nth [20, 37, 20, 21] 1
  
  /-
  info: [1, 1, 3, 3, 7, 2, 2, 2]
  -/
  -- #guard_msgs in
  -- #eval delete_nth [1, 1, 3, 3, 7, 2, 2, 2, 2] 3
  
  /-
  info: []
  -/
  -- #guard_msgs in
  -- #eval delete_nth [] 5

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

