vc-description: |-
  /-
  For all x in the range of integers [0, 2 ** n), let y[x] be the binary exclusive-or of x and x // 2. Find the sum of all numbers in y.
  
  Write a function sum_them that, given n, will return the value of the above sum.
  
  This can be implemented a simple loop as shown in the initial code. But once n starts getting to higher numbers, such as 2000 (which will be tested), the loop is too slow.
  
  There is a simple solution that can quickly find the sum. Find it!
  
  Assume that n is a nonnegative integer.
  
  Hint: The complete solution can be written in two lines.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def sum_them (n : Nat) : Nat := sorry
  
  @[simp]

vc-theorems: |-
  theorem sum_them_non_negative (n : Nat) : 
    sum_them n ≥ 0 := sorry
  
  @[simp] 
  
  theorem sum_them_zero :
    sum_them 0 = 0 := sorry
  
  theorem sum_them_monotonic (n : Nat) :
    n > 0 → sum_them n > sum_them (n-1) := sorry
  
  theorem sum_them_closed_form (n : Nat) :
    n > 0 → sum_them n = 2^(n-1) * (2^n - 1) := sorry
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval sum_them 0
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval sum_them 1
  
  /-
  info: 6
  -/
  -- #guard_msgs in
  -- #eval sum_them 2
  
  /-
  info: 28
  -/
  -- #guard_msgs in
  -- #eval sum_them 3
  
  /-
  info: 120
  -/
  -- #guard_msgs in
  -- #eval sum_them 4

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

