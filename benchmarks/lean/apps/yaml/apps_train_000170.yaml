vc-description: |-
  /-
  Given an array of integers arr of even length n and an integer k.
  We want to divide the array into exactly n / 2 pairs such that the sum of each pair is divisible by k.
  Return True If you can find a way to do that or False otherwise.
  
  Example 1:
  Input: arr = [1,2,3,4,5,10,6,7,8,9], k = 5
  Output: true
  Explanation: Pairs are (1,9),(2,8),(3,7),(4,6) and (5,10).
  
  Example 2:
  Input: arr = [1,2,3,4,5,6], k = 7
  Output: true
  Explanation: Pairs are (1,6),(2,5) and(3,4).
  
  Example 3:
  Input: arr = [1,2,3,4,5,6], k = 10
  Output: false
  Explanation: You can try all possible pairs to see that there is no way to divide arr into 3 pairs each with sum divisible by 10.
  
  Example 4:
  Input: arr = [-10,10], k = 2
  Output: true
  
  Example 5:
  Input: arr = [-1,1,-2,2,-3,3,-4,4], k = 3
  Output: true
  
  Constraints:
  
  arr.length == n
  1 <= n <= 10^5
  n is even.
  -10^9 <= arr[i] <= 10^9
  1 <= k <= 10^5
  -/

vc-preamble: |-
  def can_arrange (arr : List Int) (k : Nat) : Bool := sorry
  
  def Even (n : Nat) : Prop := ∃ k, n = 2 * k

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def countOdds (xs : List Int) : Nat :=
    xs.foldl (fun acc x => if x % 2 = 1 then acc + 1 else acc) 0

vc-theorems: |-
  theorem can_arrange_result_type (arr : List Int) (k : Nat) :
    can_arrange arr k = true ∨ can_arrange arr k = false := sorry
  
  theorem can_arrange_even_length {arr : List Int} {k : Nat} :
    can_arrange arr k = true → List.length arr % 2 = 0 := sorry
  
  theorem can_arrange_k_one {arr : List Int} :
    can_arrange arr 1 = true ↔ List.length arr % 2 = 0 := sorry
  
  theorem can_arrange_k_two {arr : List Int} :
    can_arrange arr 2 = true →
    Even (countOdds arr) := sorry
  
  theorem can_arrange_empty {k : Nat} :
    can_arrange [] k = true := sorry
  
  theorem can_arrange_singleton {x : Int} {k : Nat} :
    can_arrange [x] k = false := sorry
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval can_arrange [1, 2, 3, 4, 5, 10, 6, 7, 8, 9] 5
  
  /-
  info: False
  -/
  -- #guard_msgs in
  -- #eval can_arrange [1, 2, 3, 4, 5, 6] 10
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval can_arrange [-1, 1, -2, 2, -3, 3, -4, 4] 3

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

