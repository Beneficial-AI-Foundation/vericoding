vc-description: |-
  /-
  You have 4 cards each containing a number from 1 to 9.  You need to judge whether they could operated through *, /, +, -, (, ) to get the value of 24.
  
  Example 1:
  
  Input: [4, 1, 8, 7]
  Output: True
  Explanation: (8-4) * (7-1) = 24
  
  Example 2:
  
  Input: [1, 2, 1, 2]
  Output: False
  
  Note:
  
  The division operator / represents real division, not integer division.  For example, 4 / (1 - 2/3) = 12.
  Every operation done is between two numbers.  In particular, we cannot use - as a unary operator.  For example, with [1, 1, 1, 1] as input, the expression -1 - 1 - 1 - 1 is not allowed.
  You cannot concatenate numbers together.  For example, if the input is [1, 2, 1, 2], we cannot write this as 12 + 12.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def judge_point24 (nums : List Nat) : Bool := sorry
  
  theorem judge_point24_returns_bool (nums : List Nat) (h : nums.length = 4) 
    (h₂ : ∀ n ∈ nums, 1 ≤ n ∧ n ≤ 9) : 
    (judge_point24 nums = true) ∨ (judge_point24 nums = false) := sorry

vc-theorems: |-
  theorem judge_point24_permutation_invariant (nums₁ nums₂ : List Nat) 
    (h : nums₁.length = 4) (h₂ : nums₂.length = 4)
    (h₃ : ∀ n ∈ nums₁, 1 ≤ n ∧ n ≤ 9) (h₄ : ∀ n ∈ nums₂, 1 ≤ n ∧ n ≤ 9)
    (h₅ : ∀ x, x ∈ nums₁ ↔ x ∈ nums₂) :
    judge_point24 nums₁ = judge_point24 nums₂ := sorry
  
  theorem judge_point24_all_ones_impossible (nums : List Nat) 
    (h : nums.length = 4) (h₂ : ∀ n ∈ nums, n ≤ 1) :
    judge_point24 nums = false := sorry
  
  theorem judge_point24_with_24_and_ones (nums : List Nat)
    (h : nums.length = 4) (h₂ : 24 ∈ nums) 
    (h₃ : (nums.filter (· = 1)).length = 3) :
    judge_point24 nums = true := sorry
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval judge_point24 [4, 1, 8, 7]
  
  /-
  info: False
  -/
  -- #guard_msgs in
  -- #eval judge_point24 [1, 2, 1, 2]
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval judge_point24 [3, 3, 8, 8]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

