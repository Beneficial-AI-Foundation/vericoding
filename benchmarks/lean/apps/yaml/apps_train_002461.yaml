vc-description: |-
  /-
  =====Function Descriptions=====
  itertools.combinations(iterable, r)
  This tool returns the r length subsequences of elements from the input iterable.
  
  Combinations are emitted in lexicographic sorted order. So, if the input iterable is sorted, the combination tuples will be produced in sorted order.
  
  Sample Code
  
  >>> from itertools import combinations
  >>> 
  >>> print list(combinations('12345',2))
  [('1', '2'), ('1', '3'), ('1', '4'), ('1', '5'), ('2', '3'), ('2', '4'), ('2', '5'), ('3', '4'), ('3', '5'), ('4', '5')]
  >>> 
  >>> A = [1,1,3,3,3]
  >>> print list(combinations(A,4))
  [(1, 1, 3, 3), (1, 1, 3, 3), (1, 1, 3, 3), (1, 3, 3, 3), (1, 3, 3, 3)]
  
  =====Problem Statement=====
  You are given a string S.
  Your task is to print all possible combinations, up to size k, of the string in lexicographic sorted order.
  
  =====Constraints=====
  0<k≤len(S)
  
  =====Input Format=====
  A single line containing the string S and integer value k separated by a space.
  
  =====Output Format=====
  Print the different combinations of string S on separate lines.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def dedupe_sort_string (s : String) : String := sorry
  def print_string_combinations (s : String) (k : Nat) : String := sorry

vc-theorems: |-
  theorem test_k_equals_one {s : String} (h : s ≠ "") :
    let deduped := dedupe_sort_string s
    let result := print_string_combinations deduped 1
    let lines := result.splitOn "\n"
    lines = (s.data.eraseDups).map toString := sorry
  
  theorem test_dedupe_properties {s : String} (h₁ : s.all Char.isUpper) (h₂ : s.length ≤ 5) (h₃ : s ≠ "") :
    let deduped := dedupe_sort_string s
    deduped.data = deduped.data.eraseDups := sorry
  
  /-
  info: 'A\nC\nH\nK\nAC\nAH\nAK\nCH\nCK\nHK'
  -/
  -- #guard_msgs in
  -- #eval print_string_combinations "HACK" 2
  
  /-
  info: 'X\nY\nZ'
  -/
  -- #guard_msgs in
  -- #eval print_string_combinations "XYZ" 1
  
  /-
  info: 'A\nB\nC\nAB\nAC\nBC\nABC'
  -/
  -- #guard_msgs in
  -- #eval print_string_combinations "ABC" 3

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

