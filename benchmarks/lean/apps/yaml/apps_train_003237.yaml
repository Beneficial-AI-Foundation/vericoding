vc-description: |-
  /-
  Mutual Recursion allows us to take the fun of regular recursion (where a function calls itself until a terminating condition) and apply it to multiple functions calling each other! 
  
  Let's use the Hofstadter Female and Male sequences to demonstrate this technique. You'll want to create two functions `F` and `M` such that the following equations are true: 
  
  ```
  F(0) = 1
  M(0) = 0
  F(n) = n - M(F(n - 1))
  M(n) = n - F(M(n - 1))
  ```
  
  Don't worry about negative numbers, `n` will always be greater than or equal to zero.
  
  ~~~if:php,csharp
  You *do* have to worry about performance though, mutual recursion uses up a lot of stack space (and is highly inefficient) so you may have to find a way to make your solution consume less stack space (and time).  Good luck :)
  ~~~
  
  Hofstadter Wikipedia Reference http://en.wikipedia.org/wiki/Hofstadter_sequence#Hofstadter_Female_and_Male_sequences
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def f (n : Nat) : Nat := sorry
  def m (n : Nat) : Nat := sorry

vc-theorems: |-
  theorem f_non_negative (n : Nat) : f n ≥ 0 := sorry
  
  theorem m_non_negative (n : Nat) : m n ≥ 0 := sorry
  
  theorem f_less_than_input (n : Nat) : n > 0 → f n ≤ n := sorry
  
  theorem m_less_than_input (n : Nat) : n > 0 → m n ≤ n := sorry
  
  theorem f_base_case : f 0 = 1 := sorry
  
  theorem m_base_case : m 0 = 0 := sorry
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval f 0
  
  /-
  info: 3
  -/
  -- #guard_msgs in
  -- #eval f 5
  
  /-
  info: 6
  -/
  -- #guard_msgs in
  -- #eval f 10

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

