vc-description: |-
  /-
  You are given a string S consisting of lowercase English letters.
  Determine whether we can turn S into a palindrome by repeating the operation of swapping two adjacent characters. If it is possible, find the minimum required number of operations.
  
  -----Constraints-----
   - 1 \leq |S| \leq 2 × 10^5
   - S consists of lowercase English letters.
  
  -----Input-----
  Input is given from Standard Input in the following format:
  S
  
  -----Output-----
  If we cannot turn S into a palindrome, print -1. Otherwise, print the minimum required number of operations.
  
  -----Sample Input-----
  eel
  
  -----Sample Output-----
  1
  
  We can turn S into a palindrome by the following operation:
   - Swap the 2-nd and 3-rd characters. S is now ele.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def solve_palindrome_swaps (s : String) : Int :=
    sorry

vc-theorems: |-
  theorem makeable_palindrome_valid (s : String) :
    solve_palindrome_swaps s ≥ 0 ∧ solve_palindrome_swaps s ≠ -1 :=
  sorry
  
  theorem unmakeable_palindrome_invalid (s : String) :
    solve_palindrome_swaps s = -1 :=
  sorry
  
  theorem solve_palindrome_swaps_bounds (s : String)
    (h : solve_palindrome_swaps s ≠ -1) :
    0 ≤ solve_palindrome_swaps s ∧ 
    solve_palindrome_swaps s ≤ (s.length * (s.length - 1)) / 2 :=
  sorry
  
  theorem empty_string_zero : 
    solve_palindrome_swaps "" = 0 :=
  sorry
  
  theorem single_char_zero (c : Char) :
    solve_palindrome_swaps (String.mk [c]) = 0 :=
  sorry
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval solve_palindrome_swaps "eel"
  
  /-
  info: 4
  -/
  -- #guard_msgs in
  -- #eval solve_palindrome_swaps "ataatmma"
  
  /-
  info: -1
  -/
  -- #guard_msgs in
  -- #eval solve_palindrome_swaps "snuke"

vc-postamble: |-
  -- Apps difficulty: competition
  -- Assurance level: unguarded

