vc-description: |-
  /-
  Your job is to write function last_digits(n,d) which return the last `d` digits of an integer `n` as a list.
  `n` will be from 0 to 10^10
  
  Examples:
  
  `last_digits(1,1)     --> [1]`
  
  `last_digits(1234,2)   --> [3,4]`
  
  `last_digits(637547,6) --> [6,3,7,5,4,7]`
  
  Special cases:
  
  If `d` > the number of digits, just return the number's digits as a list.
  
  If `d` <= 0, then return an empty list.
  
  This is the first kata I have made, so please report any issues.
  -/

vc-preamble: |-
  def last_digits (n : Nat) (d : Int) : List Nat := sorry
  
  def list_to_string (l : List Nat) : String := sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def nat_to_string (n : Nat) : String := sorry
  
  theorem last_digits_empty_for_nonpositive (n : Nat) (d : Int) :
    d <= 0 → last_digits n d = [] := sorry

vc-theorems: |-
  theorem last_digits_length_bound (n : Nat) (d : Int) :
    d > 0 → List.length (last_digits n d) = min d.toNat (nat_to_string n).length := sorry
  
  theorem last_digits_are_digits (n : Nat) (d : Int) (x : Nat) :
    x ∈ last_digits n d → x ≤ 9 := sorry
  
  theorem last_digits_match_string_suffix (n : Nat) (d : Int) :
    d > 0 → list_to_string (last_digits n d) = (nat_to_string n).takeRight d.toNat := sorry
  
  theorem last_digits_full_number (n : Nat) :
    list_to_string (last_digits n ((nat_to_string n).length + 1)) = nat_to_string n := sorry
  
  /-
  info: [1]
  -/
  -- #guard_msgs in
  -- #eval last_digits 1 1
  
  /-
  info: [3, 7, 6, 7]
  -/
  -- #guard_msgs in
  -- #eval last_digits 123767 4
  
  /-
  info: [1, 3, 4, 3]
  -/
  -- #guard_msgs in
  -- #eval last_digits 1343 5

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

