vc-description: |-
  /-
  Your colleagues have been looking over you shoulder. When you should have been doing your boring real job, you've been using the work computers to smash in endless hours of codewars.
  
  In a team meeting, a terrible, awful person declares to the group that you aren't working. You're in trouble. You quickly have to gauge the feeling in the room to decide whether or not you should gather your things and leave. 
  
  ```if-not:java
  Given an object (meet) containing team member names as keys, and their happiness rating out of 10 as the value, you need to assess the overall happiness rating of the group. If <= 5, return 'Get Out Now!'. Else return 'Nice Work Champ!'.
  ```
  ```if:java
  Given a `Person` array (meet) containing team members, you need to assess the overall happiness rating of the group. If <= 5, return "Get Out Now!". Else return "Nice Work Champ!".
  
  The `Person` class looks like:
  ~~~java
  class Person {
    final String name;    // team memnber's name
    final int happiness;  // happiness rating out of 10
  }
  ~~~
  ```
  
  Happiness rating will be total score / number of people in the room.
  
  Note that your boss is in the room (boss), their score is worth double it's face value (but they are still just one person!).
  
  The Office II - Boredom Score
  The Office III - Broken Photocopier
  The Office IV - Find a Meeting Room
  The Office V - Find a Chair
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def outed (meet : Array (String × Nat)) (boss : String) : String :=
    sorry

vc-theorems: |-
  theorem outed_result_valid (meet : Array (String × Nat)) (boss : String) :
    (outed meet boss = "Get Out Now!") ∨ (outed meet boss = "Nice Work Champ!") :=
    sorry
  
  theorem outed_avg_determines_result (meet : Array (String × Nat)) (boss : String) :
    let total := (meet.map (fun x => x.2)).foldl (· + ·) 0
    let avg := total / meet.size
    (avg > 5 → outed meet boss = "Nice Work Champ!") ∧
    (avg ≤ 5 → outed meet boss = "Get Out Now!") :=
    sorry
  
  theorem outed_all_happy (meet : Array (String × Nat)) (boss : String) 
    (h : ∀ x ∈ meet, x.2 = 10) :
    outed meet boss = "Nice Work Champ!" :=
    sorry
  
  theorem outed_all_unhappy (meet : Array (String × Nat)) (boss : String)
    (h : ∀ x ∈ meet, x.2 = 0) :
    outed meet boss = "Get Out Now!" :=
    sorry
  
  /-
  info: 'Get Out Now!'
  -/
  -- #guard_msgs in
  -- #eval outed {"tim": 0, "jim": 2, "randy": 0, "sandy": 7, "andy": 0, "katie": 5, "laura": 1, "saajid": 2, "alex": 3, "john": 2, "mr": 0} "laura"
  
  /-
  info: 'Nice Work Champ!'
  -/
  -- #guard_msgs in
  -- #eval outed {"tim": 1, "jim": 3, "randy": 9, "sandy": 6, "andy": 7, "katie": 6, "laura": 9, "saajid": 9, "alex": 9, "john": 9, "mr": 8} "katie"
  
  /-
  info: 'Get Out Now!'
  -/
  -- #guard_msgs in
  -- #eval outed {"tim": 2, "jim": 4, "randy": 0, "sandy": 5, "andy": 8, "katie": 6, "laura": 2, "saajid": 2, "alex": 3, "john": 2, "mr": 8} "john"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

