vc-description: |-
  /-
  You're in ancient Greece and giving Philoctetes a hand in preparing a training exercise for Hercules! You've filled a pit with two different ferocious mythical creatures for Hercules to battle!
  
  The formidable **"Orthus"** is a 2 headed dog with 1 tail.  The mighty **"Hydra"** has 5 heads and 1 tail. 
  
  Before Hercules goes in, he asks you "How many of each beast am  I up against!?".
  
  You know the total number of heads and the total number of tails, that's the dangerous parts, right? But you didn't consider how many of each beast. 
  
  ## Task
  
  Given the number of heads and the number of tails, work out the number of each mythical beast! 
  
  The data is given as two parameters. Your answer should be returned as an array:
  ```python 
   VALID ->      [24 , 15]           INVALID ->  "No solutions"
  ```
  
  If there aren't any cases for the given amount of heads and tails - return "No solutions" or null (C#).
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def beasts (heads tails : Int) : Option (Int × Int) := sorry
  
  theorem beasts_valid_solution {heads tails : Int} (orthus hydra : Int) 
    (h : beasts heads tails = some (orthus, hydra)) : 
    orthus * 2 + hydra * 5 = heads ∧ orthus + hydra = tails := sorry

vc-theorems: |-
  theorem beasts_negative_inputs {n : Int} (h : n < 0) :
    beasts n n = none ∧ beasts n 0 = none ∧ beasts 0 n = none := sorry
  
  theorem beasts_zero :
    beasts 0 0 = some (0, 0) := sorry
  
  theorem beasts_impossible_ratios {n : Int} (h : n > 0) :
    beasts n 0 = none ∧ 
    beasts (6*n) n = none ∧
    beasts n n = none := sorry
  
  /-
  info: [24, 15]
  -/
  -- #guard_msgs in
  -- #eval beasts 123 39
  
  /-
  info: 'No solutions'
  -/
  -- #guard_msgs in
  -- #eval beasts -1 -1
  
  /-
  info: [0, 0]
  -/
  -- #guard_msgs in
  -- #eval beasts 0 0

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

