vc-description: |-
  /-
  Write a program to determine if two numbers are coprime. A pair of numbers are coprime if their greatest shared factor is 1. For example:
  ```
  20 and 27
  Factors of 20: 1, 2, 4, 5, 10, 20
  Factors of 27: 1, 3, 9, 27
  Greatest shared factor: 1
  20 and 27 are coprime```
  An example of two numbers that are not coprime:
  ```
  12 and 39
  Factors of 12: 1, 2, 3, 4, 6, 12
  Factors of 39: 1, 3, 13, 39
  Greatest shared factor: 3
  12 and 39 are not coprime```
  If the two inputs are coprime, your program should return true. If they are not coprime, your program should return false.
  
  The inputs will always be two positive integers between 2 and 99.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def are_coprime (a b : Int) : Bool := sorry
  
  theorem self_coprime (n : Int) : 
    are_coprime n n = (n.natAbs = 1) := sorry

vc-theorems: |-
  theorem symmetry (n m : Int) : 
    are_coprime n m = are_coprime m n := sorry
  
  theorem sign_invariance (n m : Int) :
    are_coprime n m = are_coprime n.natAbs m.natAbs := sorry
  
  theorem multiplication_property (n m k : Int) :
    (are_coprime n m ∧ are_coprime n k) → are_coprime n (m * k) := sorry
  
  theorem zero_coprime (n : Int) :
    are_coprime n 0 = (n.natAbs = 1) := sorry
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval are_coprime 20 27
  
  /-
  info: False
  -/
  -- #guard_msgs in
  -- #eval are_coprime 12 39
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval are_coprime 64 27

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

