vc-description: |-
  /-
  Create a function which accepts one arbitrary string as an argument, and return a string of length 26.
  
  The objective is to set each of the 26 characters of the output string to either `'1'` or `'0'` based on the fact whether the Nth letter of the alphabet is present in the input (independent of its case).
  
  So if an `'a'` or an `'A'` appears anywhere in the input string (any number of times), set the first character of the output string to `'1'`, otherwise to `'0'`. if `'b'` or `'B'` appears in the string, set the second character to `'1'`, and so on for the rest of the alphabet.
  
  For instance:
  
  ```
  "a   **&  cZ"  =>  "10100000000000000000000001"
  ```
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def change (s : String) : String := sorry 
  
  theorem change_output_format (s : String) : 
    let result := change s
    (result.length = 26) ∧ 
    (∀ c ∈ result.data, c = '0' ∨ c = '1')  := sorry

vc-theorems: |-
  theorem change_letter_detection (s : String) (i : Nat) (h : i < 26) :
    let result := change s
    let letter := Char.ofNat (i + 'a'.toNat)
    (result.data.get! i) = if letter ∈ s.toLower.data then '1' else '0' := sorry
  
  theorem change_empty_string :
    change "" = String.mk (List.replicate 26 '0') := sorry
  
  theorem change_all_lowercase (s : String) (h : ∀ c ∈ s.data, 'a' ≤ c ∧ c ≤ 'z') :
    let result := change s
    ∀ i, i < 26 →
      let c := Char.ofNat (i + 'a'.toNat)
      if c ∈ s.data 
      then (result.data.get! i) = '1'
      else True := sorry
  
  /-
  info: '11000000000000000000000001'
  -/
  -- #guard_msgs in
  -- #eval change "a **&  bZ"
  
  /-
  info: '11101000000000000000000001'
  -/
  -- #guard_msgs in
  -- #eval change "Abc e  $$  z"
  
  /-
  info: '00000000000000000000000000'
  -/
  -- #guard_msgs in
  -- #eval change ""

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

