vc-description: |-
  /-
  Given an integer array of digits, return the largest multiple of three that can be formed by concatenating some of the given digits in any order.
  Since the answer may not fit in an integer data type, return the answer as a string.
  If there is no answer return an empty string.
  
  Example 1:
  Input: digits = [8,1,9]
  Output: "981"
  
  Example 2:
  Input: digits = [8,6,7,1,0]
  Output: "8760"
  
  Example 3:
  Input: digits = [1]
  Output: ""
  
  Example 4:
  Input: digits = [0,0,0,0,0,0]
  Output: "0"
  
  Constraints:
  
  1 <= digits.length <= 10^4
  0 <= digits[i] <= 9
  The returning answer must not contain unnecessary leading zeros.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def largestMultipleOfThree (digits : List Nat) : Option String := sorry
  
  def stringToNat (s : String) : Nat := sorry

vc-theorems: |-
  theorem result_is_multiple_of_three (digits : List Nat) :
    ∀ result : String,
    largestMultipleOfThree digits = some result →
    (stringToNat result % 3 = 0) := sorry
  
  theorem result_uses_valid_digits (digits : List Nat) :
    ∀ result : String,
    largestMultipleOfThree digits = some result →
    ∀ d : Nat,
    (result.data.count (Char.ofNat d)) ≤ (digits.count d) := sorry
  
  theorem handles_leading_zeros (digits : List Nat) :
    ∀ result : String,
    largestMultipleOfThree digits = some result →
    (result = "0" ∨ result.data.get! 0 ≠ '0') := sorry
  
  /-
  info: '981'
  -/
  -- #guard_msgs in
  -- #eval largest_multiple_of_three [9, 8, 1]
  
  /-
  info: '8760'
  -/
  -- #guard_msgs in
  -- #eval largest_multiple_of_three [8, 6, 7, 1, 0]
  
  /-
  info: ''
  -/
  -- #guard_msgs in
  -- #eval largest_multiple_of_three [1]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

