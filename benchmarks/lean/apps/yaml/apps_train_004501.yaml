vc-description: |-
  /-
  =====Function Descriptions=====
  re.findall()
  
  The expression re.findall() returns all the non-overlapping matches of patterns in a string as a list of strings.
  Code
  
  >>> import re
  >>> re.findall(r'\w','http://www.hackerrank.com/')
  ['h', 't', 't', 'p', 'w', 'w', 'w', 'h', 'a', 'c', 'k', 'e', 'r', 'r', 'a', 'n', 'k', 'c', 'o', 'm']
  
  re.finditer()
  
  The expression re.finditer() returns an iterator yielding MatchObject instances over all non-overlapping matches for the re pattern in the string.
  Code
  
  >>> import re
  >>> re.finditer(r'\w','http://www.hackerrank.com/')
  <callable-iterator object at 0x0266C790>
  >>> map(lambda x: x.group(),re.finditer(r'\w','http://www.hackerrank.com/'))
  ['h', 't', 't', 'p', 'w', 'w', 'w', 'h', 'a', 'c', 'k', 'e', 'r', 'r', 'a', 'n', 'k', 'c', 'o', 'm']
  
  =====Problem Statement=====
  You are given a string S. It consists of alphanumeric characters, spaces and symbols(+,-).
  Your task is to find all the substrings of S that contains 2 or more vowels.
  Also, these substrings must lie in between 2 consonants and should contain vowels only.
  
  Note :
  Vowels are defined as: AEIOU and aeiou.
  Consonants are defined as: QWRTYPSDFGHJKLZXCVBNM and qwrtypsdfghjklzxcvbnm.
  
  =====Input Format=====
  A single line of input containing string S.
  
  =====Constraints=====
  0<len(S)<100
  
  =====Output Format=====
  Print the matched substrings in their order of occurrence on separate lines.
  If no match is found, print -1.
  -/

vc-preamble: |-
  def isVowel (c : Char) : Bool :=
    sorry

vc-helpers: |-

vc-definitions: |-
  def find_vowel_substrings (s : String) : List String :=
    sorry

vc-theorems: |-
  theorem find_vowel_substrings_valid_input {s : String} 
    (h : ∃ pre mid post : String, 
      (∀ c, c ∈ pre.data → !isVowel c) ∧ 
      (∀ c, c ∈ mid.data → isVowel c) ∧ 
      (∀ c, c ∈ post.data → !isVowel c) ∧
      mid.length ≥ 2 ∧
      s = pre ++ mid ++ post) :
    ∃ result : List String,
      find_vowel_substrings s = result ∧ 
      result ≠ ["-1"] ∧
      ∀ substr ∈ result,
        substr.length ≥ 2 ∧ 
        ∀ c, c ∈ substr.data → isVowel c :=
  sorry
  
  theorem find_vowel_substrings_invalid_input {s : String}
    (h : ∀ c, c ∈ s.data → !isVowel c) :
    find_vowel_substrings s = ["-1"] :=
  sorry
  
  theorem find_vowel_substrings_general {s : String} :
    let result := find_vowel_substrings s
    result = ["-1"] ∨
    (∀ substr ∈ result,
      substr.length ≥ 2 ∧
      ∀ c, c ∈ substr.data → isVowel c) :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

