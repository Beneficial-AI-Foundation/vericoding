vc-description: |-
  /-
  Given a long number, return all the possible sum of two digits of it.
  
  For example, `12345`: all possible sum of two digits from that number are:
  
      [ 1 + 2, 1 + 3, 1 + 4, 1 + 5, 2 + 3, 2 + 4, 2 + 5, 3 + 4, 3 + 5, 4 + 5 ]
  
  Therefore the result must be:
  
      [ 3, 4, 5, 6, 5, 6, 7, 7, 8, 9 ]
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def digits (n : Nat) : List Nat := sorry
  
  def combinations (xs : List α) (k : Nat) : List (List α) := sorry

vc-theorems: |-
  theorem single_digit (n : Nat) (h : n ≤ 9) :
    digits n = [] := sorry
  
  theorem two_digits (n : Nat) (h₁ : n ≥ 10) (h₂ : n ≤ 99) :
    let result := digits n
    result.length = 1 ∧ 
    result.head! = ((toString n).toList.map (fun c => c.toNat - '0'.toNat)).foldl (·+·) 0 := sorry
  
  /-
  info: [6, 7, 11]
  -/
  -- #guard_msgs in
  -- #eval digits 156
  
  /-
  info: [9, 13, 17, 14, 6, 10, 7, 14, 11, 15]
  -/
  -- #guard_msgs in
  -- #eval digits 81596
  
  /-
  info: [11, 8, 5, 13, 10, 7]
  -/
  -- #guard_msgs in
  -- #eval digits 3852

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

