vc-description: |-
  /-
  The [half-life](https://en.wikipedia.org/wiki/Half-life) of a radioactive substance is the time it takes (on average) for one-half of its atoms to undergo radioactive decay.
  
  # Task Overview
  Given the initial quantity of a radioactive substance, the quantity remaining after a given period of time, and the period of time, return the half life of that substance. 
  
  # Usage Examples
  
  ```if:csharp
  Documentation:
  Kata.HalfLife Method (Double, Double, Int32)
  
  Returns the half-life for a substance given the initial quantity, the remaining quantity, and the elasped time.
  
  Syntax
  
  public
  static
  double HalfLife(
  double quantityInitial,
      double quantityRemaining,
  int time
      )
  
  Parameters
  
  quantityInitial
  
  Type: System.Double
  The initial amount of the substance.
  
  quantityRemaining
  
  Type: System.Double
  The current amount of the substance.
  
  time
  
  Type: System.Int32
  The amount of time elapsed.
  
  Return Value
  
  Type: System.Double
    A floating-point number representing the half-life of the substance.
  
  ```
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def half_life (n0 : Float) (n : Float) (t : Int) : Float := sorry
  
  theorem half_life_positive (n0 : Float) (n : Float) (t : Int)
    (h1 : n0 > 0)
    (h2 : n > 0)
    (h3 : n < n0)
    (h4 : t > 0) :
    half_life n0 n t > 0 := sorry

vc-theorems: |-
  theorem half_life_inverse_equation (n0 : Float) (n : Float) (t : Int)
    (h1 : n0 > 0)
    (h2 : n > 0) 
    (h3 : n < n0)
    (h4 : t > 0) :
    let hl := half_life n0 n t
    n = n0 * (Float.pow 0.5 (Float.ofInt t / hl)) := sorry 
  
  theorem half_life_exact_halving (n0 : Float) (num_halvings : Int)
    (h1 : n0 > 0)
    (h2 : num_halvings > 0) :
    let n := n0 * (Float.pow 0.5 (Float.ofInt num_halvings))
    half_life n0 n num_halvings = 1.0 := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

