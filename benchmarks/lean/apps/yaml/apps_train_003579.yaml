vc-description: |-
  /-
  Hello! Your are given x and y and 2D array size tuple (width, height) and you have to:
  Calculate the according index in 1D space (zero-based). 
  Do reverse operation.
  
  Implement:
  to_1D(x, y, size):
    --returns index in 1D space
  to_2D(n, size)
    --returns x and y in 2D space
  
  1D array: [0, 1, 2, 3, 4, 5, 6, 7, 8]
  2D array: [[0 -> (0,0), 1 -> (1,0), 2 -> (2,0)], 
             [3 -> (0,1), 4 -> (1,1), 5 -> (2,1)], 
             [6 -> (0,2), 7 -> (1,2), 8 -> (2,2)]]
  
  to_1D(0, 0, (3,3)) returns 0
  to_1D(1, 1, (3,3)) returns 4
  to_1D(2, 2, (3,3)) returns 8
  to_2D(5, (3,3)) returns (2,1)
  to_2D(3, (3,3)) returns (0,1)
  
  Assume all input are valid:
  
  1 < width  < 500; 
  1 < height < 500
  -/

vc-preamble: |-
  def to_1D (x y : Nat) (size : Nat × Nat) : Nat :=
    sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def to_2D (idx : Nat) (size : Nat × Nat) : Nat × Nat :=
    sorry

vc-theorems: |-
  theorem to_1D_to_2D_roundtrip (x y width height : Nat) (h1 : width > 0) (h2 : height > 0) :
    let size := (width, height)
    let x' := x % width
    let y' := y % height
    let (x2, y2) := to_2D (to_1D x' y' size) size
    x2 = x' ∧ y2 = y' :=
    sorry
  
  theorem to_2D_to_1D_roundtrip (idx width height : Nat) (h1 : width > 0) (h2 : height > 0) :
    let size := (width, height)
    let idx' := idx % (width * height)
    let (x, y) := to_2D idx' size
    to_1D x y size = idx' :=
    sorry
  
  theorem to_1D_bounds (x y width height : Nat) (h1 : width > 0) (h2 : height > 0) :
    let size := (width, height)
    let x' := x % width
    let y' := y % height
    let idx := to_1D x' y' size
    0 ≤ idx ∧ idx < width * height :=
    sorry
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval to_1D 0 0 (3, 3)
  
  /-
  info: (0, 0)
  -/
  -- #guard_msgs in
  -- #eval to_2D 0 (3, 3)
  
  /-
  info: 4
  -/
  -- #guard_msgs in
  -- #eval to_1D 1 1 (3, 3)
  
  /-
  info: (1, 1)
  -/
  -- #guard_msgs in
  -- #eval to_2D 4 (3, 3)
  
  /-
  info: 14
  -/
  -- #guard_msgs in
  -- #eval to_1D 2 3 (4, 6)
  
  /-
  info: (2, 3)
  -/
  -- #guard_msgs in
  -- #eval to_2D 14 (4, 6)

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

