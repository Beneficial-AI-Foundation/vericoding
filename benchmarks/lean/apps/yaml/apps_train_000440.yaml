vc-description: |-
  /-
  A character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:
  
  For 1-byte character, the first bit is a 0, followed by its unicode code.
  For n-bytes character, the first n-bits are all one's, the n+1 bit is 0, followed by n-1 bytes with most significant 2 bits being 10.
  
  This is how the UTF-8 encoding would work:
  
     Char. number range  |        UTF-8 octet sequence
        (hexadecimal)    |              (binary)
     --------------------+---------------------------------------------
     0000 0000-0000 007F | 0xxxxxxx
     0000 0080-0000 07FF | 110xxxxx 10xxxxxx
     0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx
     0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
  
  Given an array of integers representing the data, return whether it is a valid utf-8 encoding.
  
  Note:
  The input is an array of integers. Only the least significant 8 bits of each integer is used to store the data. This means each integer represents only 1 byte of data.
  
  Example 1:
  
  data = [197, 130, 1], which represents the octet sequence: 11000101 10000010 00000001.
  
  Return true.
  It is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.
  
  Example 2:
  
  data = [235, 140, 4], which represented the octet sequence: 11101011 10001100 00000100.
  
  Return false.
  The first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.
  The next byte is a continuation byte which starts with 10 and that's correct.
  But the second continuation byte does not start with 10, so it is invalid.
  -/

vc-preamble: |-
  def isContinuationByte (x : Nat) : Bool :=
    sorry
  
  def countRequiredBytes (firstByte : Nat) : Int :=
    sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def validUtf8 (data : List Nat) : Bool :=
    sorry

vc-theorems: |-
  theorem valid_utf8_property (data : List Nat) (h : ∀ x ∈ data, x ≤ 255) :
    validUtf8 data = true →
    ∃ i : Nat,
      i < data.length ∧
      let required := countRequiredBytes (data.get ⟨i, sorry⟩)
      required ≥ 0 ∧
      i + required < data.length ∧
      ∀ j, i + 1 ≤ j ∧ j ≤ i + required →
        isContinuationByte (data.get ⟨j, sorry⟩) = true :=
    sorry
  
  theorem valid_utf8_property_contra (data : List Nat) (h : ∀ x ∈ data, x ≤ 255) :
    validUtf8 data = false →
    ∃ i : Nat,
      i < data.length ∧
      (countRequiredBytes (data.get ⟨i, sorry⟩) < 0 ∨
       i + countRequiredBytes (data.get ⟨i, sorry⟩) ≥ data.length ∨
       ∃ j, i + 1 ≤ j ∧ j ≤ i + countRequiredBytes (data.get ⟨i, sorry⟩) ∧
         isContinuationByte (data.get ⟨j, sorry⟩) = false) :=
    sorry
  
  theorem ascii_always_valid (data : List Nat) (h : ∀ x ∈ data, x ≤ 127) :
    validUtf8 data = true :=
    sorry
  
  theorem continuation_bytes_invalid (data : List Nat) (h1 : data ≠ []) 
      (h2 : ∀ x ∈ data, x ≥ 128 ∧ x ≤ 191) :
    validUtf8 data = false :=
    sorry
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval valid_utf8 [197, 130, 1]
  
  /-
  info: False
  -/
  -- #guard_msgs in
  -- #eval valid_utf8 [235, 140, 4]
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval valid_utf8 [240, 162, 138, 147]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

