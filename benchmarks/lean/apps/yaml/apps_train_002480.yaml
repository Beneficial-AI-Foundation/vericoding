vc-description: |-
  /-
  =====Function Descriptions=====
  itertools.permutations(iterable[, r])
  
  This tool returns successive rlength permutations of elements in an iterable.
  If r is not specified or is None, then r defaults to the length of the iterable, and all possible full length permutations are generated.
  Permutations are printed in a lexicographic sorted order. So, if the input iterable is sorted, the permutation tuples will be produced in a sorted order.
  
  Sample Code
  >>> from itertools import permutations
  >>> print permutations(['1','2','3'])
  <itertools.permutations object at 0x02A45210>
  >>> 
  >>> print list(permutations(['1','2','3']))
  [('1', '2', '3'), ('1', '3', '2'), ('2', '1', '3'), ('2', '3', '1'), ('3', '1', '2'), ('3', '2', '1')]
  >>> 
  >>> print list(permutations(['1','2','3'],2))
  [('1', '2'), ('1', '3'), ('2', '1'), ('2', '3'), ('3', '1'), ('3', '2')]
  >>>
  >>> print list(permutations('abc',3))
  [('a', 'b', 'c'), ('a', 'c', 'b'), ('b', 'a', 'c'), ('b', 'c', 'a'), ('c', 'a', 'b'), ('c', 'b', 'a')]
  
  =====Problem Statement=====
  You are given a string S.
  Your task is to print all possible permutations of size k of the string in lexicographic sorted order.
  
  =====Input Format=====
  A single line containing the space separated string S and the integer value k.
  
  =====Output Format=====
  Print the permutations of the string S on separate lines.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def get_permutations (input: String) (k: Nat) : String := sorry 
  
  theorem permutation_length {s: String} {k: Nat} {h: k ≤ String.length s}:
    let perms := get_permutations s k
    ∀ perm ∈ perms.splitOn "\n", String.length perm = k := sorry

vc-theorems: |-
  theorem permutation_chars {s: String} {k: Nat} {h: k ≤ String.length s}:
    let perms := get_permutations s k
    let s_chars := s.toList
    ∀ perm ∈ perms.splitOn "\n", ∀ c ∈ perm.toList, c ∈ s_chars := sorry
  
  theorem permutation_sorted {s: String} {k: Nat} {h: k ≤ String.length s}:
    let perms := get_permutations s k
    let perm_list := perms.splitOn "\n"
    ∀ i j: Nat, i < j → j < perm_list.length → 
      perm_list.get ⟨i, by sorry⟩ ≤ perm_list.get ⟨j, by sorry⟩ := sorry
  
  theorem single_char_permutation {s: String} {h: String.length s = 1}:
    get_permutations s 1 = s := sorry
  
  /-
  info: expected1
  -/
  -- #guard_msgs in
  -- #eval get_permutations "HACK 2" 2
  
  /-
  info: expected2
  -/
  -- #guard_msgs in
  -- #eval get_permutations "ABC 2" 2

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

