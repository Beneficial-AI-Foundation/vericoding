vc-description: |-
  /-
  You've got a bunch of textual data with embedded phone numbers. Write a function `area_code()` that finds and returns just the area code portion of the phone number.
  ```python
  >>> message = "The supplier's phone number is (555) 867-5309"
  >>> area_code(message)
  '555'
  ```
  The returned area code should be a string, not a number.
  Every phone number is formatted like in the example, and the only non-alphanumeric characters in the string are apostrophes `'` or the punctuation used in the phone number.
  -/

vc-preamble: |-
  def phone_number_format (a p l: String) : String :=
    s!"({a}) {p}-{l}"

vc-helpers: |-

vc-definitions: |-
  def area_code (s: String) : String :=
  sorry

vc-theorems: |-
  theorem area_code_extracts_area_from_standard_format {a p l : String}
    (h1: a.length = 3) (h2: p.length = 3) (h3: l.length = 4) :
    area_code (phone_number_format a p l) = a := by
    sorry
  
  theorem area_code_extracts_area_with_surrounding_text {a p l t1 t2 : String}
    (h1: a.length = 3) (h2: p.length = 3) (h3: l.length = 4) :
    area_code (t1 ++ phone_number_format a p l ++ t2) = a := by
    sorry
  
  theorem area_code_empty_parens :
    area_code "()" = "" := by
    sorry
  
  theorem area_code_nested_parens :
    area_code "(123(456)789)" = "123(456" := by
    sorry
  
  /-
  info: '555'
  -/
  -- #guard_msgs in
  -- #eval area_code "The supplier"s phone number is (555) 867-5309"
  
  /-
  info: '123'
  -/
  -- #guard_msgs in
  -- #eval area_code "Grae"s cell number used to be (123) 456-7890"
  
  /-
  info: '124'
  -/
  -- #guard_msgs in
  -- #eval area_code "The 102nd district court"s fax line is (124) 816-3264"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

