vc-description: |-
  /-
  There's a waiting room with N chairs set in single row. Chairs are consecutively numbered from 1 to N. First is closest to the entrance (which is exit as well).
  
  For some reason people choose a chair in the following way
  
  1. Find a place as far from other people as possible
  2. Find a place as close to exit as possible
  
  All chairs must be occupied before the first person will be served
  
  So it looks like this for 10 chairs and 10 patients
  
  Chairs
  1
  2
  3
  4
  5
  6
  7
  8
  9
  10
  
  Patients
  1
  7
  5
  8
  3
  9
  4
  6
  10
  2
  
  Your task is to find last patient's chair's number. 
  
  Input - N - integer greater than 2 - number of chairs.
  Output should positive integer too - last patient's chair's number
  
  Have fun :)
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def last_chair (n : Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem last_chair_range {n : Nat} (h : n ≥ 3) :
    1 ≤ last_chair n ∧ last_chair n ≤ n := by
    sorry
  
  theorem last_chair_value {n : Nat} (h : n ≥ 3) :
    last_chair n = n - 1 := by
    sorry
  
  /-
  info: 9
  -/
  -- #guard_msgs in
  -- #eval last_chair 10
  
  /-
  info: 4
  -/
  -- #guard_msgs in
  -- #eval last_chair 5
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval last_chair 3

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

