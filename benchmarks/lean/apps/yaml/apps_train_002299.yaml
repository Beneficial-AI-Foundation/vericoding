vc-description: |-
  /-
  Given a non-empty array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).
  
  Example 1:
  
  Input: [3, 2, 1]
  
  Output: 1
  
  Explanation: The third maximum is 1.
  
  Example 2:
  
  Input: [1, 2]
  
  Output: 2
  
  Explanation: The third maximum does not exist, so the maximum (2) is returned instead.
  
  Example 3:
  
  Input: [2, 2, 3, 1]
  
  Output: 1
  
  Explanation: Note that the third maximum here means the third maximum distinct number.
  Both numbers with value 2 are both considered as second maximum.
  -/

vc-preamble: |-
  def third_max (nums : List Int) : Int := sorry
  
  def max (nums : List Int) : Int := sorry

vc-helpers: |-

vc-definitions: |-
  def uniqueSorted (nums : List Int) : List Int := sorry
  
  theorem third_max_is_in_list {nums : List Int} (h : nums ≠ []) :
    third_max nums ∈ nums := sorry

vc-theorems: |-
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval third_max [3, 2, 1]
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval third_max [1, 2]
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval third_max [2, 2, 3, 1]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

