vc-description: |-
  /-
  Our chef has been assigned a task to make a necklace of length N, from gold, diamond and platinum.There is single kind of gold, two types of diamond and three types of platinum available.
  A necklace can be represented as strings of the form (G)∗(D1|D2)∗(P1|P2|P3)∗$ (G)*(D1|D2)*(P1|P2|P3)* $ where (x|y) means we can use x or y and ∗$ * $ means we can repeat the previous parenthesized expression 0 or more times.
  Instead of making necklace he choose to count all such distinct necklaces possible for a given length N.
  
  -----Input:-----
  -The first line of the input contains a single integer T$T$ denoting the number of test cases. The description of T$T$ test cases follows.
  -Only line of every test case contains an integer N$N$ denoting the length of the necklace required.
  
  -----Output:-----
  For each test case, print the number of all such distinct necklaces, with given length. As the number can be really large, print it modulo  109+7$10^{9}+7$.
  
  -----Constraints-----
  - 1≤T≤10000$1 \leq T \leq 10000$
  - 2≤N≤1000000000$2 \leq N \leq 1000000000$
  - String S$S$ consists of only upper case english alphabets.
  
  -----Subtasks-----
  - 20 points : 1≤N≤5$1 \leq N \leq 5$
  - 70 points : Original$Original$ Constraints$Constraints$
  
  -----Sample Input:-----
  2
  1
  2
  
  -----Sample Output:-----
  6
  25
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def count_necklace_combinations (n : Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem count_necklace_combinations_range (n : Nat) :
    n ≥ 1 → count_necklace_combinations n ≥ 0 ∧ count_necklace_combinations n < 1000000007 := by
    sorry
  
  /-
  info: 6
  -/
  -- #guard_msgs in
  -- #eval count_necklace_combinations 1
  
  /-
  info: 25
  -/
  -- #guard_msgs in
  -- #eval count_necklace_combinations 2
  
  /-
  info: 90
  -/
  -- #guard_msgs in
  -- #eval count_necklace_combinations 3

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

