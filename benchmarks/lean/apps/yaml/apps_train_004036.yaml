vc-description: |-
  /-
  ## Task:
  
  Your task is to write a function which returns the sum of following series upto nth term(parameter).
  
      Series: 1 + 1/4 + 1/7 + 1/10 + 1/13 + 1/16 +...
  
  ## Rules:
  
  * You need to round the answer to 2 decimal places and return it as String.
  
  * If the given value is 0 then it should return 0.00
  
  * You will only be given Natural Numbers as arguments.
  
  ## Examples:
  
      SeriesSum(1) => 1 = "1.00"
      SeriesSum(2) => 1 + 1/4 = "1.25"
      SeriesSum(5) => 1 + 1/4 + 1/7 + 1/10 + 1/13 = "1.57"
  
  **NOTE**: In PHP the function is called `series_sum()`.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def series_sum (n : Int) : String := sorry
  
  theorem series_sum_has_decimal (n : Int) :
    ∃ s₁ s₂, series_sum n = s₁ ++ "." ++ s₂ := sorry

vc-theorems: |-
  theorem series_sum_has_two_decimals (n : Int) :
    ∃ s₁ s₂, series_sum n = s₁ ++ "." ++ s₂ ∧ s₂.length = 2 := sorry
  
  theorem series_sum_geq_one_if_positive (n : Int) :
    n > 0 → series_sum n = "1.00" ∨ series_sum n > "1.00" := sorry
  
  theorem series_sum_monotonic (n m : Int) :
    n ≥ m → series_sum n ≥ series_sum m := sorry
  
  theorem series_sum_zero : series_sum 0 = "0.00" := sorry
  
  theorem series_sum_negative (n : Int) :
    n < 0 → series_sum n = "0.00" := sorry
  
  /-
  info: '1.00'
  -/
  -- #guard_msgs in
  -- #eval series_sum 1
  
  /-
  info: '1.25'
  -/
  -- #guard_msgs in
  -- #eval series_sum 2
  
  /-
  info: '1.57'
  -/
  -- #guard_msgs in
  -- #eval series_sum 5
  
  /-
  info: '0.00'
  -/
  -- #guard_msgs in
  -- #eval series_sum 0

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

