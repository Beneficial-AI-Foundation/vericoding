vc-description: |-
  /-
  Write a function, `gooseFilter` / `goose-filter` / `goose_filter` /` GooseFilter`, that takes an array of strings as an argument and returns a filtered array containing the same elements but with the 'geese' removed.
  
  The geese are any strings in the following array, which is pre-populated in your solution:
  
  ```python
  geese = ["African", "Roman Tufted", "Toulouse", "Pilgrim", "Steinbacher"]
  ```
  
  For example, if this array were passed as an argument:
  
  ```python
  ["Mallard", "Hook Bill", "African", "Crested", "Pilgrim", "Toulouse", "Blue Swedish"]
  ```
  
  Your function would return the following array:
  
  ```python
  ["Mallard", "Hook Bill", "Crested", "Blue Swedish"]
  ```
  
  The elements in the returned array should be in the same order as in the initial array passed to your function, albeit with the 'geese' removed. Note that all of the strings will be in the same case as those provided, and some elements may be repeated.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def GEESE : List String := ["African", "Roman Tufted", "Toulouse", "Pilgrim", "Steinbacher"]
  
  def goose_filter (birds : List String) : List String := sorry

vc-theorems: |-
  theorem output_is_subset {birds : List String} : 
    ∀ x ∈ goose_filter birds, x ∈ birds := sorry
  
  theorem no_geese_in_output {birds : List String} :
    ∀ x ∈ goose_filter birds, x ∉ GEESE := sorry
  
  theorem all_non_geese_preserved {birds : List String} :
    goose_filter birds = birds.filter (λ x => x ∉ GEESE) := sorry
  
  /-
  info: ['Mallard', 'Hook Bill', 'Crested', 'Blue Swedish']
  -/
  -- #guard_msgs in
  -- #eval goose_filter ["Mallard", "Hook Bill", "African", "Crested", "Pilgrim", "Toulouse", "Blue Swedish"]
  
  /-
  info: ['Mallard', 'Barbary', 'Hook Bill', 'Blue Swedish', 'Crested']
  -/
  -- #guard_msgs in
  -- #eval goose_filter ["Mallard", "Barbary", "Hook Bill", "Blue Swedish", "Crested"]
  
  /-
  info: []
  -/
  -- #guard_msgs in
  -- #eval goose_filter ["African", "Roman Tufted", "Toulouse", "Pilgrim", "Steinbacher"]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

