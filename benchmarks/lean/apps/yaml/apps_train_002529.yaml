vc-description: |-
  /-
  Given an array of arguments, representing system call arguments keys and values, join it into a single, space-delimited string. You don't need to care about the application name -- your task is only about parameters.
  
  Each element of the given array can be:
  * a single string,
  * a single string array,
  * an array of two strings
  
  In the last case (array of two strings) the first string should have a `"--"` prefix if it is more than one character long; or a `"-"` prefix otherwise; e.g.:
    * `["foo", "bar"]` becomes `"--foo bar"`
    * `["f", "bar"]` becomes `"-f bar"`
  
  You may assume that all strings are non-empty and have no spaces.
  
  ## Examples
  
  ```python
  ["foo", "bar"]                    #  "foo bar"
  [["foo", "bar"]]                  #  "--foo bar"
  [["f", "bar"]]                    #  "-f bar"
  [["foo", "bar"], "baz"]           #  "--foo bar baz"
  [["foo"], ["bar", "baz"], "qux"]  #  "foo --bar baz qux"
  ```
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def argsToString (args : List (String ⊕ (List String))) : String :=
    sorry

vc-theorems: |-
  theorem args_to_string_non_empty {args : List (String ⊕ (List String))} 
    (h : args ≠ []) : 
    argsToString args ≠ "" :=
  sorry 
  
  theorem args_to_string_contains_original_elements {args : List (String ⊕ (List String))}
    (arg : String ⊕ List String)
    (h : arg ∈ args) :
    match arg with
    | Sum.inl s => s.data ⊆ (argsToString args).data 
    | Sum.inr lst => ∀ s ∈ lst, s.data ⊆ (argsToString args).data
    :=
  sorry
  
  theorem args_to_string_parts_non_empty {args : List (String ⊕ (List String))} :
    let parts := (argsToString args).splitOn " "
    ∀ p ∈ parts, p ≠ "" ∧ p ≠ " " :=
  sorry
  
  theorem args_to_string_parts_exist {args : List (String ⊕ (List String))}
    (h : args ≠ []) :
    let parts := (argsToString args).splitOn " " 
    parts ≠ [] :=
  sorry
  
  /-
  info: '--foo bar'
  -/
  -- #guard_msgs in
  -- #eval args_to_string [["foo", "bar"]]
  
  /-
  info: '-f bar'
  -/
  -- #guard_msgs in
  -- #eval args_to_string [["f", "bar"]]
  
  /-
  info: 'foo bar --baz qux -a plugh'
  -/
  -- #guard_msgs in
  -- #eval args_to_string [["foo"], "bar", ["baz", "qux"], ["a", "plugh"]]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

