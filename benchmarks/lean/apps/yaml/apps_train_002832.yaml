vc-description: |-
  /-
  The numbers 12, 63 and 119 have something in common related with their divisors and their prime factors, let's see it.
  ```
  Numbers PrimeFactorsSum(pfs)        DivisorsSum(ds)              Is ds divisible by pfs
  12         2 + 2 + 3 = 7         1 + 2 + 3 + 4 + 6 + 12 = 28            28 / 7 = 4,  Yes
  63         3 + 3 + 7 = 13        1 + 3 + 7 + 9 + 21 + 63 = 104         104 / 13 = 8, Yes
  119        7 + 17 = 24           1 + 7 + 17 + 119 = 144                144 / 24 = 6, Yes
  ```
  There is an obvius property you can see: the sum of the divisors of a number is divisible by the sum of its prime factors.
  
  We need the function ```ds_multof_pfs()``` that receives two arguments: ```nMin``` and  ```nMax```, as a lower and upper limit (inclusives), respectively, and outputs a sorted list with the numbers that fulfill the property described above.
  
  We represent the features of the described function:
  ```python
  ds_multof_pfs(nMin, nMax) -----> [n1, n2, ....., nl] # nMin ≤ n1 < n2 < ..< nl ≤ nMax
  ```
  Let's see some cases:
  ```python
  ds_multof_pfs(10, 100) == [12, 15, 35, 42, 60, 63, 66, 68, 84, 90, 95]
  
  ds_multof_pfs(20, 120) == [35, 42, 60, 63, 66, 68, 84, 90, 95, 110, 114, 119]
  ```
  Enjoy it!!
  -/

vc-preamble: |-
  def sqrt (n : Nat) : Nat := sorry
  
  def is_prime (n : Nat) : Bool := sorry
  
  def prime_factors_sum (n : Nat) : Nat := sorry 
  
  def divisors_sum (n : Nat) : Nat := sorry

vc-helpers: |-

vc-definitions: |-
  def ds_multof_pfs (nMin nMax : Nat) : List Nat := sorry
  
  structure IsSorted (xs : List Nat) : Prop where
    sorted : ∀ i j, i < xs.length → j < xs.length → i ≤ j → xs[i]! ≤ xs[j]!

vc-theorems: |-
  theorem is_prime_properties {n : Nat} : 
    (n < 2 → is_prime n = false) ∧ 
    (is_prime n = true → n ≥ 2) ∧
    (is_prime n = true → ∀ i : Nat, 2 ≤ i ∧ i ≤ sqrt n → n % i ≠ 0) := sorry
  
  theorem prime_factors_sum_properties {n : Nat} (h : n ≥ 2) :
    prime_factors_sum n > 0 ∧ 
    prime_factors_sum n ≤ n * n := sorry
  
  theorem ds_multof_pfs_properties {nMin nMax : Nat} (h : nMin ≤ nMax) :
    let result := ds_multof_pfs nMin nMax 
    IsSorted result ∧
    (∀ x ∈ result, nMin ≤ x ∧ x ≤ nMax) ∧
    (∀ n ∈ result, prime_factors_sum n > 0 ∧ (divisors_sum n) % (prime_factors_sum n) = 0) ∧
    (∀ i j, i < result.length → j < result.length → i ≠ j → result[i]! ≠ result[j]!) := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

