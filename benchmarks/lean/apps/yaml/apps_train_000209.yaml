vc-description: |-
  /-
  Implement pow(x, n), which calculates x raised to the power n (xn).
  
  Example 1:
  
  Input: 2.00000, 10
  Output: 1024.00000
  
  Example 2:
  
  Input: 2.10000, 3
  Output: 9.26100
  
  Example 3:
  
  Input: 2.00000, -2
  Output: 0.25000
  Explanation: 2-2 = 1/22 = 1/4 = 0.25
  
  Note:
  
         -100.0 < x < 100.0
         n is a 32-bit signed integer, within the range [−231, 231 − 1]
  -/

vc-preamble: |-
  def myPow (x : Float) (n : Int) : Float :=
    sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def isClose (a b : Float) (relTol absTol : Float := 0.0) : Bool :=
    sorry

vc-theorems: |-
  theorem myPow_matches_mathPow {x : Float} {n : Int} 
    (x_range : 0.1 ≤ x ∧ x ≤ 10)
    (n_range : -5 ≤ n ∧ n ≤ 5) :
    isClose (myPow x n) (Float.pow x (Float.ofInt n)) (relTol := 1e-5) (absTol := 1e-5) := 
    sorry
  
  theorem myPow_zero_exponent {x : Float}  
    (x_range : 0.1 ≤ x ∧ x ≤ 10) :
    myPow x 0 = 1.0 :=
    sorry
  
  theorem myPow_inverse_property {x : Float} {n : Int}
    (x_range : 0.1 ≤ x ∧ x ≤ 10)
    (n_range : 1 ≤ n ∧ n ≤ 2) :
    isClose ((myPow x n) * (myPow x (-n))) 1.0 (relTol := 1e-5) (absTol := 1e-5) :=
    sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

