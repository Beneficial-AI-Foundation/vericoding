vc-description: |-
  /-
  Given a list of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to the multiple of k, that is, sums up to n*k where n is also an integer.
  
  Example 1:
  
  Input: [23, 2, 4, 6, 7],  k=6
  Output: True
  Explanation: Because [2, 4] is a continuous subarray of size 2 and sums up to 6.
  
  Example 2:
  
  Input: [23, 2, 6, 4, 7],  k=6
  Output: True
  Explanation: Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.
  
  Note:
  
  The length of the array won't exceed 10,000.
  You may assume the sum of all the numbers is in the range of a signed 32-bit integer.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def check_subarray_sum (nums : List Int) (k : Int) : Bool :=
    sorry

vc-theorems: |-
  theorem short_arrays {nums : List Int} {k : Int} (h1 : k ≠ 0) (h2 : nums.length ≤ 1) :
    check_subarray_sum nums k = false :=
    sorry
  
  theorem properties_abs_k {nums : List Int} {k : Int} (h : k ≠ 0) :
    check_subarray_sum nums k = check_subarray_sum nums k.natAbs :=
    sorry
  
  theorem properties_short {nums : List Int} {k : Int} (h : nums.length < 2) :
    check_subarray_sum nums k = false :=
    sorry
  
  theorem zero_k {nums : List Int} (h : ∀ n ∈ nums, n ≥ 0) :
    check_subarray_sum nums 0 = 
      (∃ i, i + 1 < nums.length ∧ nums[i]! = 0 ∧ nums[i+1]! = 0) :=
    sorry
  
  theorem k_one {nums : List Int} (h : nums.length ≥ 2) :
    check_subarray_sum nums 1 = true :=
    sorry
  
  theorem multiples {nums : List Int} {k : Int} 
    (h1 : ∀ n ∈ nums, 0 ≤ n ∧ n ≤ 100)
    (h2 : 1 ≤ k ∧ k ≤ 100)
    (h3 : nums.length ≥ 2) :
    check_subarray_sum (nums.map (· * k)) k = true :=
    sorry
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval check_subarray_sum [23, 2, 4, 6, 7] 6
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval check_subarray_sum [23, 2, 6, 4, 7] 6
  
  /-
  info: False
  -/
  -- #guard_msgs in
  -- #eval check_subarray_sum [1, 2] 2

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

