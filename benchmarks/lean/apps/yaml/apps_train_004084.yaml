vc-description: |-
  /-
  Implement a function called makeAcronym that returns the first letters of each word in a passed in string.
  
  Make sure the letters returned are uppercase.
  
  If the value passed in is not a string return 'Not a string'.
  
  If the value passed in is a string which contains characters other than spaces and alphabet letters, return 'Not letters'.
  
  If the string is empty, just return the string itself: "".
  
  **EXAMPLES:**
  ```
  'Hello codewarrior' -> 'HC'
  
  'a42' -> 'Not letters'
  
  42 -> 'Not a string'
  
  [2,12] -> 'Not a string'
  
  {name: 'Abraham'} -> 'Not a string'
  ```
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def make_acronym (s : String) : String := sorry
  
  theorem empty_string_returns_empty :
    make_acronym "" = "" := sorry

vc-theorems: |-
  theorem non_letter_strings_returns_not_letters (s : String) :
    (∃ c ∈ s.data, ¬c.isAlpha ∧ ¬c.isWhitespace) →
    make_acronym s = "Not letters" := sorry
  
  theorem valid_input_produces_uppercase_first_letters (words : List String) : 
    (words.length > 0) →
    (∀ w ∈ words, w.length > 0 ∧ (∀ c ∈ w.data, c.isAlpha)) →
    make_acronym (" ".intercalate words) = 
      String.mk (words.map (λ w => w.data.head!.toUpper)) := sorry
  
  /-
  info: 'MAS'
  -/
  -- #guard_msgs in
  -- #eval make_acronym "My aunt sally"
  
  /-
  info: 'Not a string'
  -/
  -- #guard_msgs in
  -- #eval make_acronym [1, 2, 3]
  
  /-
  info: 'Not letters'
  -/
  -- #guard_msgs in
  -- #eval make_acronym "a42"
  
  /-
  info: ''
  -/
  -- #guard_msgs in
  -- #eval make_acronym ""

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

