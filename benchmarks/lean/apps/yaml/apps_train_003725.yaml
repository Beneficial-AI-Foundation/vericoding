vc-description: |-
  /-
  # Task
  
  John and Alice have an appointment today. 
  
  In the morning, John starts from (`0,0`) and goes to the place (`a,b`) where he is dating. Unfortunately, John had no sense of direction at all, so he moved 1 step in a random direction(up, down, left or right) each time. For example, if John at (x,y), next step he may move to `(x+1,y), (x-1,y),(x,y+1) or (x,y-1)`. 
  
  Obviously, when he arrived at the destination, it was already too late and Alice had already left. It's a sadly story :(
  
  The second day, Alice asked John why he didn't go to the dating place. John said he took `s` steps to his date yesterday.
  
  Alice wants to know whether John is lying. Please help Alice to judge.
  
  Given two coordinates `a, b` and the step `s`, return `true` if John tells the truth, `false` otherwise.
  
  # Input/Output
  
  `[input]` integer `a`
  
  The x-coordinates of the dating site.
  
  `-10^7 <= a <= 10^7`
  
  `[input]` integer `b`
  
  The y-coordinates of the dating site.
  
  `-10^7 <= b <= 10^7`
  
  `[input]` integer `s`
  
  A positive integer.  The steps John using.
  
  `0 < s <= 10^9`
  
  `[output]` a boolean value
  
  return `true` if John tells the truth, `false` otherwise.
  
  # Example
  
  For `a = 3, b = 3, s = 6`, the output should be `true`.
  
  A possible path is: 
  
  `(0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3)`
  
  For `a = 3, b = 3, s = 8`, the output should be `true`.
  
  A possible path is: 
  
  `(0,0) -> (0,1) -> (1,1) -> (1,2) -> (2,2) -> (2,1) -> (3,1) -> (3,2) -> (3,3)`
  
  For `a = 4, b = 5, s = 10`, the output should be `false`.
  
  John can't reach coordinates (a, b) using 10 steps, he's lying ;-)
  -/

vc-preamble: |-
  def abs (x : Int) : Int := 
    if x ≥ 0 then x else -x

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def is_john_lying (x y steps : Int) : Bool := sorry
  
  theorem symmetry_properties {x y steps : Int} (h : steps ≥ 0) :
    is_john_lying x y steps = is_john_lying (-x) y steps ∧
    is_john_lying x y steps = is_john_lying x (-y) steps ∧
    is_john_lying x y steps = is_john_lying y x steps := sorry

vc-theorems: |-
  theorem min_steps_required {x y : Int} :
    ¬(is_john_lying x y (abs x + abs y - 1)) := sorry
  
  theorem parity_constraint {x y extra_steps : Int} (h : extra_steps ≥ 0) :
    let min_steps := abs x + abs y
    let steps := min_steps + extra_steps
    if extra_steps % 2 = 0 then 
      is_john_lying x y steps = (steps ≥ min_steps)
    else
      ¬(is_john_lying x y steps) := sorry
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval is_john_lying 3 3 6
  
  /-
  info: False
  -/
  -- #guard_msgs in
  -- #eval is_john_lying 4 5 10
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval is_john_lying -5 -5 10

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

