vc-description: |-
  /-
  In computer science and discrete mathematics, an [inversion](https://en.wikipedia.org/wiki/Inversion_%28discrete_mathematics%29) is a pair of places in a sequence where the elements in these places are out of their natural order. So, if we use ascending order for a group of numbers, then an inversion is when larger numbers appear before lower number in a sequence.
  
  Check out this example sequence: ```(1, 2, 5, 3, 4, 7, 6)``` and we can see here three inversions
  ```5``` and ```3```; ```5``` and ```4```; ```7``` and ```6```.
  
  You are given a sequence of numbers and you should count the number of inversions in this sequence.
  
  ```Input```: A sequence as a tuple of integers.
  
  ```Output```: The inversion number as an integer.
  
  Example:
  ```python
    count_inversion((1, 2, 5, 3, 4, 7, 6)) == 3
    count_inversion((0, 1, 2, 3)) == 0
  ```
  -/

vc-preamble: |-
  def countInversion (s : List Int) : Nat := sorry
  
  def isSorted (s : List Int) : Bool := sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def isAntiSorted (s : List Int) : Bool := sorry
  
  theorem countInversion_nonnegative (s : List Int) :
    countInversion s ≥ 0 := sorry

vc-theorems: |-
  theorem countInversion_sorted_zero (s : List Int) :
    isSorted s = true → countInversion s = 0 := sorry
  
  theorem countInversion_reverse_sorted_max (s : List Int) :
    let maxInv := s.length * (s.length - 1) / 2
    isAntiSorted s = true → countInversion s ≤ maxInv := sorry
  
  theorem countInversion_small_seq (s : List Int) : 
    s.length ≤ 1 → countInversion s = 0 := sorry
  
  /-
  info: 3
  -/
  -- #guard_msgs in
  -- #eval count_inversion (1, 2, 5, 3, 4, 7, 6)
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval count_inversion (0, 1, 2, 3)
  
  /-
  info: 6
  -/
  -- #guard_msgs in
  -- #eval count_inversion (3, 2, 1, 0)

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

