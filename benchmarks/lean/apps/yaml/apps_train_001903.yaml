vc-description: |-
  /-
  We are stacking blocks to form a pyramid.  Each block has a color which is a one letter string, like `'Z'`.
  
  For every block of color `C` we place not in the bottom row, we are placing it on top of a left block of color `A` and right block of color `B`.  We are allowed to place the block there only if `(A, B, C)` is an allowed triple.
  
  We start with a bottom row of bottom, represented as a single string.  We also start with a list of allowed triples allowed.  Each allowed triple is represented as a string of length 3.
  
  Return true if we can build the pyramid all the way to the top, otherwise false.
  
  Example 1:
  
  Input: bottom = "XYZ", allowed = ["XYD", "YZE", "DEA", "FFF"]
  Output: true
  Explanation:
  We can stack the pyramid like this:
      A
     / \
    D   E
   / \ / \
  X   Y   Z
  
  This works because ('X', 'Y', 'D'), ('Y', 'Z', 'E'), and ('D', 'E', 'A') are allowed triples.
  
  Example 2:
  
  Input: bottom = "XXYX", allowed = ["XXX", "XXY", "XYX", "XYY", "YXZ"]
  Output: false
  Explanation:
  We can't stack the pyramid to the top.
  Note that there could be allowed triples (A, B, C) and (A, B, D) with C != D.
  
  Note:
  
  bottom will be a string with length in range [2, 8].
  allowed will have length in range [0, 200].
  Letters in all strings will be chosen from the set {'A', 'B', 'C', 'D', 'E', 'F', 'G'}.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def can_build_pyramid (bottom : String) (allowed : List String) : Bool := sorry
  
  theorem pyramid_single_char_valid 
    (bottom : String) (allowed : List String)
    (h : bottom.length = 1) : 
    can_build_pyramid bottom allowed = true := sorry

vc-theorems: |-
  theorem empty_rules_property
    (bottom : String) :
    can_build_pyramid bottom [] = (bottom.length = 1) := sorry
  
  theorem duplicate_rules_irrelevant
    (bottom : String) (allowed : List String) :
    can_build_pyramid bottom allowed = can_build_pyramid bottom (allowed ++ allowed) := sorry 
  
  theorem empty_rules_single_char
    (bottom : String) :
    can_build_pyramid bottom [] = (bottom.length = 1) := sorry
  
  theorem known_valid_case1 :
    can_build_pyramid "ABC" ["ABC", "BCD", "CDE"] = true := sorry
  
  theorem known_valid_case2 :
    can_build_pyramid "XY" ["XYZ"] = true := sorry
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval can_build_pyramid "XYZ" ["XYD", "YZE", "DEA", "FFF"]
  
  /-
  info: False
  -/
  -- #guard_msgs in
  -- #eval can_build_pyramid "XXYX" ["XXX", "XXY", "XYX", "XYY", "YXZ"]
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval can_build_pyramid "ABC" ["ABC", "BCD", "CDE", "DEF"]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

