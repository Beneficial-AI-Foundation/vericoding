vc-description: |-
  /-
  # Task
   Round the given number `n` to the nearest multiple of `m`.
  
   If `n` is exactly in the middle of 2 multiples of m, return `n` instead.
  
  # Example
  
   For `n = 20, m = 3`, the output should be `21`.
  
   For `n = 19, m = 3`, the output should be `18`.
  
   For `n = 50, m = 100`, the output should be `50`.
  
  # Input/Output
  
   - `[input]` integer `n`
  
   `1 ≤ n < 10^9.`
  
   - `[input]` integer `m`
  
   `3 ≤ m < 109`.
  
   - `[output]` an integer
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def rounding (n : Int) (m : Int) : Int := sorry
  
  theorem rounding_symmetry 
    {n : Int} {m : Int} (hm : m > 0) (hn : n ≥ -1000) (hn2 : n ≤ 1000) (hm2 : m ≤ 100) :
    rounding n m = rounding (2 * rounding n m - n) m := sorry

vc-theorems: |-
  theorem rounding_zero :
    rounding 0 1 = 0 := sorry
  
  theorem result_near_input 
    {n m : Int} (hm : m > 0) (hn : n ≥ -100) (hn2 : n ≤ 100) (hm2 : m ≤ 10) :
    (rounding n m - n).natAbs ≤ m/2 := sorry
  
  /-
  info: 21
  -/
  -- #guard_msgs in
  -- #eval rounding 20 3
  
  /-
  info: 18
  -/
  -- #guard_msgs in
  -- #eval rounding 19 3
  
  /-
  info: 50
  -/
  -- #guard_msgs in
  -- #eval rounding 50 100

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

