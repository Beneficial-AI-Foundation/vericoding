vc-description: |-
  /-
  # Kata Task
  
  You are given a list of cogs in a gear train
  
  Each element represents the number of teeth of that cog
  
  e.g. `[100, 50, 25]` means 
  * 1st cog has 100 teeth 
  * 2nd cog has 50 teeth
  * 3rd cog has 25 teeth
  
  If the ``nth`` cog rotates clockwise at 1 RPM what is the RPM of the cogs at each end of the gear train? 
  
  **Notes**
  * no two cogs share the same shaft
  * return an array whose two elements are RPM of the first and last cogs respectively
  * use negative numbers for anti-clockwise rotation
  * for convenience `n` is zero-based
  * For C and NASM coders, the returned array will be `free`'d.
  
  ---
  
  Series:
  * Cogs
  * Cogs 2
  -/

vc-preamble: |-
  def cog_RPM (cogs: List Nat) (n: Nat) : List Int := sorry
  
  /- For accessing array elements safely -/

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def get? {α : Type} (xs : List α) (i : Nat) : Option α :=
    if h : i < xs.length then some (xs.get ⟨i, h⟩) else none

vc-theorems: |-
  theorem single_cog_property {cogs : List Nat} {n : Nat} (h : cogs.length = 1) :
    cog_RPM cogs 0 = [1, 1] := sorry
  
  theorem cog_direction_property {cogs : List Nat} {n : Nat} 
    (h1 : cogs.length > 1) (h2 : n < cogs.length) :
    ∃ x y : Int, cog_RPM cogs n = [x, y] ∧
    ((x > 0) ↔ (n % 2 = 0)) ∧ 
    ((y > 0) ↔ ((cogs.length - n) % 2 = 1)) := sorry
  
  theorem cog_ratio_property {cogs : List Nat} {n : Nat}
    (h1 : cogs.length > 1) (h2 : n < cogs.length) 
    (h3 : ∀ i, get? cogs i ≠ none) :
    match get? cogs n, get? cogs 0, get? cogs (cogs.length - 1) with
    | some cn, some c0, some cl =>
      ∃ x y : Int, cog_RPM cogs n = [x, y] ∧
      x.natAbs = cn / c0 ∧
      y.natAbs = cn / cl
    | _, _, _ => True := sorry
  
  theorem identical_cogs_property {cogs : List Nat} {n : Nat}
    (h1 : cogs.length > 1) (h2 : n < cogs.length)
    (h3 : ∀ i j, i < cogs.length → j < cogs.length → get? cogs i = get? cogs j) :
    ∃ x y : Int, cog_RPM cogs n = [x, y] ∧
    x.natAbs = 1 ∧ y.natAbs = 1 := sorry
  
  /-
  info: [1, 1]
  -/
  -- #guard_msgs in
  -- #eval cog_RPM [100] 0
  
  /-
  info: [1, -1]
  -/
  -- #guard_msgs in
  -- #eval cog_RPM [100, 100, 100, 100] 0
  
  /-
  info: [-1, 1]
  -/
  -- #guard_msgs in
  -- #eval cog_RPM [100, 100, 100, 100] 1

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

