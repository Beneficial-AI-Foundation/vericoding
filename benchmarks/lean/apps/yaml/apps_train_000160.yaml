vc-description: |-
  /-
  Given a string s and a string t, check if s is subsequence of t.
  
  You may assume that there is only lower case English letters in both s and t. t is potentially a very long (length ~= 500,000) string, and s is a short string (
  
  A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ace" is a subsequence of "abcde" while "aec" is not).
  
  Example 1:
  s = "abc", t = "ahbgdc"
  
  Return true.
  
  Example 2:
  s = "axc", t = "ahbgdc"
  
  Return false.
  
  Follow up:
  If there are lots of incoming S, say S1, S2, ... , Sk where k >= 1B, and you want to check one by one to see if T has its subsequence. In this scenario, how would you change your code?
  
  Credits:Special thanks to @pbrother for adding this problem and creating all test cases.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def is_subsequence (s t : String) : Bool :=
    sorry

vc-theorems: |-
  theorem empty_string_is_subsequence {t : String} :
    is_subsequence "" t = true := sorry 
  
  theorem string_is_subsequence_of_itself {s : String} :
    is_subsequence s s = true := sorry
  
  theorem longer_string_not_subsequence {s t : String} :
    s.length > t.length → is_subsequence s t = false := sorry
  
  theorem subsequence_in_concatenation {s t : String} :
    s ≠ "" → 
    is_subsequence s (s ++ t) = true ∧ is_subsequence s (t ++ s) = true := sorry
  
  theorem inserting_chars_preserves_subsequence {s t : String} :
    s ≠ "" →
    (let result := String.intercalate t (s.data.map toString);
     is_subsequence s result = true) := sorry
  
  theorem subsequence_maintains_order {s t : String} :
    s.length ≥ 2 →
    let reversed := String.mk s.data.reverse;
    s ≠ reversed →
    is_subsequence s t = true →
    is_subsequence reversed t = false := sorry
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval is_subsequence "abc" "ahbgdc"
  
  /-
  info: False
  -/
  -- #guard_msgs in
  -- #eval is_subsequence "axc" "ahbgdc"
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval is_subsequence "" "ahbgdc"

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

