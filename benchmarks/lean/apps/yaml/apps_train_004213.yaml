vc-description: |-
  /-
  An abundant number or excessive number is a number for which the sum of its proper divisors is greater than the number itself. 
  
  The integer 12 is the first abundant number. Its proper divisors are 1, 2, 3, 4 and 6 for a total of 16 (> 12).
  
  Derive function `abundantNumber(num)/abundant_number(num)` which returns `true/True/.true.` if `num` is abundant, `false/False/.false.` if not.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def abundant_number (n : Nat) : Bool := sorry
  
  def divisors_sum (n : Nat) : Nat := sorry

vc-theorems: |-
  theorem abundant_number_is_bool (n : Nat) : 
    abundant_number n = true ∨ abundant_number n = false := sorry
  
  theorem abundant_number_matches_definition (n : Nat) :
    abundant_number n = (divisors_sum n > n) := sorry 
  
  theorem abundant_number_true_implies_sum_greater (n : Nat) :
    abundant_number n = true → divisors_sum n > n := sorry
  
  theorem abundant_number_false_implies_sum_leq (n : Nat) :
    abundant_number n = false → divisors_sum n ≤ n := sorry
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval abundant_number 12
  
  /-
  info: False
  -/
  -- #guard_msgs in
  -- #eval abundant_number 37
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval abundant_number 120

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

