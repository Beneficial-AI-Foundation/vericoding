vc-description: |-
  /-
  Given time in 24-hour format, convert it to words. 
  
  ```
  For example:
  13:00 = one o'clock 
  13:09 = nine minutes past one 
  13:15 = quarter past one 
  13:29 = twenty nine minutes past one
  13:30 = half past one 
  13:31 = twenty nine minutes to two
  13:45 = quarter to two 
  00:48 = twelve minutes to one
  00:08 = eight minutes past midnight
  12:00 = twelve o'clock
  00:00 = midnight
  
  Note: If minutes == 0, use 'o'clock'. If minutes <= 30, use 'past', and for minutes > 30, use 'to'. 
  
  ```
  
  More examples in test cases. Good luck!
  -/

vc-preamble: |-
  def timeToWords (time: String) : String := sorry
  
  def hasSubstring (s1 s2 : String) : Bool := sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def endsWithStr (s1 s2 : String) : Bool := sorry
  
  theorem time_to_words_basic_format (hours : Nat) (minutes : Nat) 
    (h_hours : hours ≤ 23) (h_minutes : minutes ≤ 59) :
    let result := timeToWords s!"#{hours}:#{minutes}"
    (hasSubstring result "o'clock" ∨ hasSubstring result "past" ∨ 
     hasSubstring result "to" ∨ result = "midnight") := sorry

vc-theorems: |-
  theorem time_to_words_oclock (hours : Nat) (h_hours : hours ≤ 23) :
    let result := timeToWords s!"#{hours}:00"
    (hours = 0 → result = "midnight") ∧ 
    (hours ≠ 0 → endsWithStr result "o'clock") := sorry
  
  theorem time_to_words_quarter_past (hours : Nat) (h_hours : hours ≤ 23) :
    let result := timeToWords s!"#{hours}:15"
    (hours = 0 → hasSubstring result "quarter past midnight") ∧
    (hours ≠ 0 → hasSubstring result "quarter past") := sorry
  
  theorem time_to_words_half_past (hours : Nat) (h_hours : hours ≤ 23) :
    let result := timeToWords s!"#{hours}:30"
    (hours = 0 → hasSubstring result "half past midnight") ∧
    (hours ≠ 0 → hasSubstring result "half past") := sorry
  
  theorem time_to_words_past_minutes (hours minutes : Nat) 
    (h_hours : hours ≤ 23) (h_minutes : minutes ≤ 29) (h_minutes_pos : minutes ≥ 1)
    (h_not_quarter : minutes ≠ 15) :
    let result := timeToWords s!"#{hours}:#{minutes}"
    hasSubstring result "past" ∧ hasSubstring result "minute" ∧
    (hasSubstring result "minutes" ↔ minutes ≠ 1) := sorry
  
  theorem time_to_words_to_minutes (hours minutes : Nat)
    (h_hours : hours ≤ 23) (h_minutes : minutes ≤ 59) (h_minutes_low : minutes ≥ 31)
    (h_not_quarter : minutes ≠ 45) :
    let result := timeToWords s!"#{hours}:#{minutes}"
    hasSubstring result "to" ∧ hasSubstring result "minute" := sorry
  
  /-
  info: "one o'clock"
  -/
  -- #guard_msgs in
  -- #eval time_to_words "13:00"
  
  /-
  info: 'quarter past one'
  -/
  -- #guard_msgs in
  -- #eval time_to_words "13:15"
  
  /-
  info: 'midnight'
  -/
  -- #guard_msgs in
  -- #eval time_to_words "00:00"
  
  /-
  info: 'quarter to midnight'
  -/
  -- #guard_msgs in
  -- #eval time_to_words "23:45"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

