vc-description: |-
  /-
  Baby is getting his frst tooth. This means more sleepless nights, but with the fun of feeling round his gums and trying to guess which will be first out! 
  
  Probably best have a sweepstake with your friends - because you have the best chance of knowing. You can feel the gums and see where the raised bits are - most raised, most likely tooth to come through first!
  
  Given an array of numbers (t) to represent baby's gums, you need to return the index of the lump that is most pronounced. 
  
  The most pronounced lump is the one that has the biggest differential to its surrounding values. e.g.:
  
  ```
  [1, 2, 4] = 2
  
  index 0 has a differential of -1 to its right (it is lower so the figure is negative)
  
  index 1 has a differential of +1 to its left, and -2 to its right. Total is -1.
  
  index 2 has a differential of +2 to its left, and nothing to its right, 
  ```
  
  If there is no distinct highest value (more than one occurence of the largest differential), return -1.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def first_tooth (lst : List Int) : Int := sorry
  
  theorem first_tooth_output_range {lst : List Int} (h : lst.length ≥ 2) :
    let result := first_tooth lst
    result = -1 ∨ (0 ≤ result ∧ result < lst.length) := sorry

vc-theorems: |-
  theorem constant_list_gives_negative_one {lst : List Int} (h : lst.length ≥ 2) :
    let val := lst.get ⟨0, sorry⟩
    let constant_list := List.replicate lst.length val
    first_tooth constant_list = -1 := sorry
  
  /-
  info: 3
  -/
  -- #guard_msgs in
  -- #eval first_tooth [1, 2, 3, 4]
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval first_tooth [1, 2, 6, 4]
  
  /-
  info: -1
  -/
  -- #guard_msgs in
  -- #eval first_tooth [1, 1, 1, 1]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

