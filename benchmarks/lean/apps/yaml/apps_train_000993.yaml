vc-description: |-
  /-
  Note : This question carries $100$ $points$
  CodeLand is celebrating a festival by baking cakes! In order to avoid wastage, families follow a unique way of distributing cakes.
  For $T$ families in the locality, $i$-th family (1 <= $i$ <= $T$) has $N$ members. They baked $S$ slices of cakes. The smallest member of the family gets $K$ slices of cakes. Each family has a lucky number of $R$ and they agree to distribute the slices such that the member gets $R$ times more slices than the member just smaller than them. Since the family is busy in festival preparations, find out if the number of slices would be sufficient for the family or not. Also, find how many extra slices they have or how many slices are they short of.
  Also, the locality is kind and believes in sharing. So, you also need to determine if each family would have sufficient slices if families shared their cakes among each other!
  
  -----Input :-----
  - First line of input will have a single integer $T$ i.e. the number of families in the locality
  - For next $T$ lines, each line will describe one family through 4 integers i.e. $S$, $N$, $K$, $R$ separated by spaces
  
  -----Output-----
  - First $T$ lines of output will show if slices are enough for the family or not, followed by extra or required slices. For example, if slices are sufficient, the output would be $POSSIBLE$ $10$ which implies 10 slices are extra. If slices are insufficient, the output would be $IMPOSSIBLE$ $15$ which implies 15 slices are required to fulfill the requirement.
  - Last line of output would be $IMPOSSIBLE$ or $POSSIBLE$ depending on whether each family would get enough slices after sharing.
  
  -----Constraints:-----
  - 1 ≤ $T$ ≤ 50
  - 1 ≤ $N$ ≤ 15
  - 1 ≤ $S$ ≤ 10^9
  - 1 ≤ $K$ ≤ 5
  - 1 ≤ $R$ ≤ 5
  
  -----Sample Input:-----
  5
  100 4 2 2
  100 4 3 2
  100 4 3 3
  200 4 4 2
  10 3 2 2
  
  -----Sample Output:-----
  POSSIBLE 70
  POSSIBLE 55
  IMPOSSIBLE 20
  POSSIBLE 140
  IMPOSSIBLE 4
  POSSIBLE
  
  -----Explanation-----
  For the first home, the youngest member has got 2 slices, the one older than them gets 2 times more slices, and so forth. So, first home needs 2 + 4 + 8 + 16 = 30 slices. But since they made 100, they have 70 extra, hence we print 'POSSIBLE 70'.
  Doing the same for other houses, we find 20 + 4 = 24 slices extra are required so that all families have enough slices. In this case we have 70 + 55 + 140 = 265 extra slices which is > 24, so we print 'POSSIBLE' in last line.
  -/

vc-preamble: |-
  def solve_cake_festival (families : List (Nat × Nat × Nat × Nat)) : List String := sorry
  
  def isVerdict (s : String) : Bool :=
    s = "POSSIBLE" || s = "IMPOSSIBLE"

vc-helpers: |-

vc-definitions: |-
  def isVerdictWithNumber (s : String) : Bool :=
    let parts := s.splitOn " "
    match parts with
    | [verdict, num] => isVerdict verdict && (num.toInt?.isSome)
    | _ => false
  
  -- Output format theorem

vc-theorems: |-
  theorem cake_festival_output_format (families : List (Nat × Nat × Nat × Nat)) :
    let results := solve_cake_festival families;
    -- Results is non-empty
    results.length > 0
    -- All but last result have format "VERDICT N"
    ∧ (∀ i : Fin (results.length - 1), isVerdictWithNumber results[i]!)
    -- Last result is just POSSIBLE/IMPOSSIBLE
    ∧ isVerdict results[results.length - 1]! := sorry
  
  -- Valid differences theorem
  
  theorem cake_festival_valid_diffs (families : List (Nat × Nat × Nat × Nat)) :
    let results := solve_cake_festival families;
    results.length = families.length + 1
    ∧ ∀ i : Fin families.length,
      let (slices, _, _, _) := families[i];
      let parts := (results[i]!).splitOn " ";
      match parts with
      | ["POSSIBLE", n] => (n.toInt?.get! ≥ 0)
      | ["IMPOSSIBLE", n] => (n.toInt?.get! > 0)
      | _ => False := sorry
  
  -- Final verdict theorem 
  
  theorem cake_festival_final_verdict (families : List (Nat × Nat × Nat × Nat)) :
    let results := solve_cake_festival families;
    let extra := results.take (results.length - 1) |>.foldl (λ acc res => 
      let parts := res.splitOn " "
      match parts with
      | ["POSSIBLE", n] => acc + n.toInt?.getD 0
      | _ => acc) 0;
    let less := results.take (results.length - 1) |>.foldl (λ acc res =>
      let parts := res.splitOn " "
      match parts with 
      | ["IMPOSSIBLE", n] => acc + n.toInt?.getD 0
      | _ => acc) 0;
    results[results.length - 1]! = "POSSIBLE" ↔ extra ≥ less := sorry
  
  -- Single member family theorem
  
  theorem single_member_family 
    (slices smallest luck : Nat)
    (h1 : slices > 0) (h2 : smallest > 0) (h3 : luck > 0) :
    let results := solve_cake_festival [(slices, 1, smallest, luck)];
    results.length = 2
    ∧ if smallest ≤ slices then
        results[0]! = s!"POSSIBLE {slices - smallest}"
      else  
        results[0]! = s!"IMPOSSIBLE {smallest - slices}" := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

