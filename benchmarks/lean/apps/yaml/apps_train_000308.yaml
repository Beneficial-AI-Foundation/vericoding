vc-description: |-
  /-
  A string is called a happy prefix if is a non-empty prefix which is also a suffix (excluding itself).
  Given a string s. Return the longest happy prefix of s .
  Return an empty string if no such prefix exists.
  
  Example 1:
  Input: s = "level"
  Output: "l"
  Explanation: s contains 4 prefix excluding itself ("l", "le", "lev", "leve"), and suffix ("l", "el", "vel", "evel"). The largest prefix which is also suffix is given by "l".
  
  Example 2:
  Input: s = "ababab"
  Output: "abab"
  Explanation: "abab" is the largest prefix which is also suffix. They can overlap in the original string.
  
  Example 3:
  Input: s = "leetcodeleet"
  Output: "leet"
  
  Example 4:
  Input: s = "a"
  Output: ""
  
  Constraints:
  
  1 <= s.length <= 10^5
  s contains only lowercase English letters.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def longest_prefix (s : String) : String :=
    sorry

vc-theorems: |-
  theorem output_is_prefix {s : String} (h : s.length > 0) :
    (longest_prefix s).isPrefixOf s := by
    sorry
  
  theorem output_is_suffix {s : String} (h : s.length > 0) :
    String.drop s (s.length - (longest_prefix s).length) = longest_prefix s := by
    sorry
  
  theorem output_length_less_than_input {s : String} (h : s.length > 0) :
    (longest_prefix s).length ≤ s.length := by
    sorry
  
  theorem output_matches_input_chars {s : String} (h : s.length > 0) :
    ∀ c, c ∈ (longest_prefix s).data → c ∈ s.data := by
    sorry
  
  /-
  info: 'l'
  -/
  -- #guard_msgs in
  -- #eval longest_prefix "level"
  
  /-
  info: 'abab'
  -/
  -- #guard_msgs in
  -- #eval longest_prefix "ababab"
  
  /-
  info: 'leet'
  -/
  -- #guard_msgs in
  -- #eval longest_prefix "leetcodeleet"

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

