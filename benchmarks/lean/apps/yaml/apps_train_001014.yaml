vc-description: |-
  /-
  You are given Name of chef's friend and using chef's new method of calculating value of string , chef have to find the value of all the names. Since chef is busy , he asked you to do the work from him .
  The method is a function $f(x)$ as follows - 
  - 
  $f(x)$ = $1$ , if $x$ is a consonent
  - 
  $f(x)$ = $0$ , if $x$ is a vowel 
  Your task is to apply the above function on all the characters in the string $S$ and convert the obtained binary string in decimal number N. Since the number N can be very large, compute it modulo $10^9+7$ .
  Input:
  - First line will contain $T$, number of testcases. Then the testcases follow. 
  - Each test line contains one String $S$ composed of lowercase English alphabet letters. 
  
  -----Output:-----
  For each case, print a single line containing one integer $N$ modulo  $10^9+7$ .
  
  -----Constraints-----
  - $1 \leq T \leq 50$
  - $1 \leq |S| \leq 10^5$
  
  -----Sample Input:-----
  1
  codechef
  
  -----Sample Output:-----
  173
  
  -----EXPLANATION:-----
  The string "codechef" will be converted to 10101101 ,using the chef's method function . Which is equal to 173.
  -/

vc-preamble: |-
  def solveBinaryNames (name : String) : Nat :=
    sorry
  
  def MOD := 1000000007
  
  theorem binary_names_result_range
    (name : String)
    (h : ∃ c ∈ name.data, c.isAlpha) :
    0 ≤ solveBinaryNames name ∧ solveBinaryNames name < MOD :=
  sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def isVowel (c : Char) : Bool :=
    match c.toLower with
    | 'a' | 'e' | 'i' | 'o' | 'u' => true
    | _ => false

vc-theorems: |-
  theorem only_letters_matter
    (name : String)
    (h : ∃ c ∈ name.data, c.isAlpha) :
    solveBinaryNames name = solveBinaryNames (String.mk (name.data.filter Char.isAlpha)) :=
  sorry
  
  theorem all_vowels_zero
    (name : String)
    (h₁ : name.length > 0)
    (h₂ : ∀ c ∈ name.data, isVowel c) :
    solveBinaryNames name = ((2 ^ name.length - 1) % MOD) :=
  sorry
  
  theorem all_consonants_one
    (name : String)
    (h₁ : name.length > 0)
    (h₂ : ∀ c ∈ name.data, c.isAlpha ∧ ¬isVowel c) :
    solveBinaryNames name = ((2 ^ name.length - 1) % MOD) :=
  sorry
  
  /-
  info: 173
  -/
  -- #guard_msgs in
  -- #eval solve_binary_names "codechef"

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

