vc-description: |-
  /-
  Given an array of citations sorted in ascending order (each citation is a non-negative integer) of a researcher, write a function to compute the researcher's h-index.
  
  According to the definition of h-index on Wikipedia: "A scientist has index h if h of his/her N papers have at least h citations each, and the other N − h papers have no more than h citations each."
  
  Example:
  
  Input: citations = [0,1,3,5,6]
  Output: 3 
  Explanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had 
               received 0, 1, 3, 5, 6 citations respectively. 
               Since the researcher has 3 papers with at least 3 citations each and the remaining 
               two with no more than 3 citations each, her h-index is 3.
  
  Note:
  
  If there are several possible values for h, the maximum one is taken as the h-index.
  
  Follow up:
  
         This is a follow up problem to H-Index, where citations is now guaranteed to be sorted in ascending order.
         Could you solve it in logarithmic time complexity?
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def h_index (citations : List Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem h_index_bounded_by_length {citations : List Nat} (h : citations ≠ []) :
    h_index citations ≤ citations.length :=
    sorry
  
  theorem h_index_nonnegative (citations : List Nat) :
    h_index citations ≥ 0 :=
    sorry
  
  /-
  info: 3
  -/
  -- #guard_msgs in
  -- #eval h_index [0, 1, 3, 5, 6]
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval h_index [0]
  
  /-
  info: 3
  -/
  -- #guard_msgs in
  -- #eval h_index [5, 5, 5]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible

