vc-description: |-
  /-
  Lots of geeky customers visit our chef's restaurant everyday. So, when asked to fill the feedback form, these customers represent the feedback using a binary string (i.e a string that contains only characters '0' and '1'. 
  
  Now since chef is not that great in deciphering binary strings, he has decided the following criteria to classify the feedback as Good or Bad : 
  
  If the string contains the substring "010" or "101", then the feedback is Good, else it is Bad. Note that, to be Good it is not necessary to have both of them as substring.
  
  So given some binary strings, you need to output whether according to the chef, the strings are Good or Bad. 
  
  -----Input-----
  The first line contains an integer T denoting the number of feedbacks. Each of the next T lines contains a string composed of only '0'  and '1'.
  
  -----Output-----
  For every test case, print in a single line Good or Bad as per the Chef's method of classification.
  
  -----Constraints-----
  -  1 ≤  T ≤   100 
  -  1  ≤  |S|   ≤  105 
  
  Sum of length of all strings in one test file will not exceed 6*106.
  
  -----Example-----
  Input:
  2
  11111110
  10101010101010
  
  Output:
  Bad
  Good
  
  -----Explanation-----
  Example case 1.
  
  The string doesn't contain 010 or 101 as substrings.
  
  Example case 2.
  
  The string contains both 010 and 101 as substrings.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def classify_feedback (s : String) : String := sorry
  
  def containsSubstring (s : String) (sub : String) : Bool := sorry

vc-theorems: |-
  theorem classify_feedback_returns_valid_output (s : String) (h : s.length > 0) :
    (classify_feedback s = "Good" ∨ classify_feedback s = "Bad") := sorry
  
  theorem good_feedback_contains_pattern (s : String) (h : s.length > 0) :
    classify_feedback s = "Good" → (containsSubstring s "010" ∨ containsSubstring s "101") := sorry
  
  theorem no_pattern_implies_bad (s : String) (h : s.length > 0) :
    ¬(containsSubstring s "010" ∨ containsSubstring s "101") → classify_feedback s = "Bad" := sorry
  
  theorem size_three_good_iff_pattern (s : String) (h : s.length = 3) :
    classify_feedback s = "Good" ↔ (s = "010" ∨ s = "101") := sorry
  
  theorem short_string_is_bad (s : String) (h : s.length < 3) :
    classify_feedback s = "Bad" := sorry
  
  /-
  info: 'Bad'
  -/
  -- #guard_msgs in
  -- #eval classify_feedback "11111110"
  
  /-
  info: 'Good'
  -/
  -- #guard_msgs in
  -- #eval classify_feedback "10101010101010"
  
  /-
  info: 'Good'
  -/
  -- #guard_msgs in
  -- #eval classify_feedback "00010"

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

