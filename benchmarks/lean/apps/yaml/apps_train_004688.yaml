vc-description: |-
  /-
  Two numbers are **relatively prime** if their greatest common factor is 1; in other words: if they cannot be divided by any other common numbers than 1.
  
  `13, 16, 9, 5, and 119` are all relatively prime because they share no common factors, except for 1. To see this, I will show their factorizations:
  ```python
   13: 13
   16: 2 * 2 * 2 * 2
    9: 3 * 3
    5: 5
  119: 17 * 7
  ```
  
  Complete the function that takes 2 arguments: a number (`n`), and a list of numbers (`arr`). The function should return a list of all the numbers in `arr` that are relatively prime to `n`. All numbers in will be positive integers.
  
  ## Examples
  
  ```python
  relatively_prime(8, [1, 2, 3, 4, 5, 6, 7])
  >> [1, 3, 5, 7]
  
  relatively_prime(15, [72, 27, 32, 61, 77, 11, 40])
  >> [32, 61, 77, 11]
  
  relatively_prime(210, [15, 100, 2222222, 6, 4, 12369, 99])
  >> []
  ```
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def relativePrime (n : Nat) (arr : List Int) : List Int := sorry
  
  def isGCD (a b : Int) : Int := sorry

vc-theorems: |-
  theorem relatively_prime_subset (n : Nat) (arr : List Int) (x : Int) :
    x ∈ relativePrime n arr → x ∈ arr := sorry
  
  theorem relatively_prime_coprime (n : Nat) (arr : List Int) (x : Int) :
    x ∈ relativePrime n arr → isGCD n x = 1 := sorry
  
  theorem relatively_prime_complete (n : Nat) (arr : List Int) (x : Int) :
    x ∈ arr → isGCD n x = 1 → x ∈ relativePrime n arr := sorry
  
  theorem relatively_prime_empty (n : Nat) :
    relativePrime n [] = [] := sorry
  
  theorem relatively_prime_one (n : Nat) :
    relativePrime n [1] = [1] := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

