vc-description: |-
  /-
  You know how sometimes you write the the same word twice in a sentence, but then don't notice that it happened? For example, you've been distracted for a second. Did you notice that *"the"* is doubled in the first sentence of this description?
  
  As as aS you can see, it's not easy to spot those errors, especially if words differ in case, like *"as"* at the beginning of the sentence.
  
  Write a function that counts the number of sections repeating the same word (case insensitive). The occurence of two or more equal words next after each other count as one.
  
  **Example:**
  ```
  "dog cat"                 --> 0
  "dog DOG cat"             --> 1
  "apple dog cat"           --> 0
  "pineapple apple dog cat" --> 0
  "apple     apple dog cat" --> 1
  "apple dog apple dog cat" --> 0
  "dog dog DOG dog dog dog" --> 1
  "dog dog dog dog cat cat" --> 2
  "cat cat dog dog cat cat" --> 3
  ```
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def count_adjacent_pairs (s : String) : Nat :=
    sorry

vc-theorems: |-
  theorem count_adjacent_pairs_nonnegative (s : String) :
    count_adjacent_pairs s ≥ 0 :=
    sorry
  
  theorem count_adjacent_pairs_max_bound (words : List String) :
    count_adjacent_pairs (String.join (List.intersperse " " words)) ≤ words.length / 2 :=
    sorry
  
  theorem count_adjacent_pairs_empty_or_single (words : List String) :
    words.length ≤ 1 → count_adjacent_pairs (String.join (List.intersperse " " words)) = 0 :=
    sorry
  
  theorem count_adjacent_pairs_case_insensitive (s : String) :
    count_adjacent_pairs s = count_adjacent_pairs (s.toUpper) ∧
    count_adjacent_pairs s = count_adjacent_pairs (s.toLower) :=
    sorry
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval count_adjacent_pairs ""
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval count_adjacent_pairs "dog DOG cat"
  
  /-
  info: 3
  -/
  -- #guard_msgs in
  -- #eval count_adjacent_pairs "cat cat dog dog cat cat"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

