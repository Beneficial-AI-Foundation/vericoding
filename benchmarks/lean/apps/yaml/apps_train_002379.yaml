vc-description: |-
  /-
  Given two integer arrays of equal length target and arr.
  In one step, you can select any non-empty sub-array of arr and reverse it. You are allowed to make any number of steps.
  Return True if you can make arr equal to target, or False otherwise.
  
  Example 1:
  Input: target = [1,2,3,4], arr = [2,4,1,3]
  Output: true
  Explanation: You can follow the next steps to convert arr to target:
  1- Reverse sub-array [2,4,1], arr becomes [1,4,2,3]
  2- Reverse sub-array [4,2], arr becomes [1,2,4,3]
  3- Reverse sub-array [4,3], arr becomes [1,2,3,4]
  There are multiple ways to convert arr to target, this is not the only way to do so.
  
  Example 2:
  Input: target = [7], arr = [7]
  Output: true
  Explanation: arr is equal to target without any reverses.
  
  Example 3:
  Input: target = [1,12], arr = [12,1]
  Output: true
  
  Example 4:
  Input: target = [3,7,9], arr = [3,7,11]
  Output: false
  Explanation: arr doesn't have value 9 and it can never be converted to target.
  
  Example 5:
  Input: target = [1,1,1,1,1], arr = [1,1,1,1,1]
  Output: true
  
  Constraints:
  
  target.length == arr.length
  1 <= target.length <= 1000
  1 <= target[i] <= 1000
  1 <= arr[i] <= 1000
  -/

vc-preamble: |-
  def can_be_equal (xs ys : List Int) : Bool :=
    sorry
  
  def isPerm (xs ys : List Int) : Bool :=
    sorry
  
  /- Helper function for list sum -/
  
  def listSum (xs : List Int) : Int :=
    sorry
  
  /- Helper function to get nth element -/

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def getNth (xs : List Int) (n : Nat) : Int :=
    sorry

vc-theorems: |-
  theorem identical_lists_are_equal (xs : List Int) : 
    can_be_equal xs xs = true :=
  sorry
  
  /- Helper function to check if one list is a permutation of another -/
  
  theorem permuted_lists_are_equal {xs ys : List Int} :
    isPerm xs ys → can_be_equal xs ys = true :=
  sorry
  
  theorem different_value_not_equal {xs ys : List Int} (h1 : xs ≠ []) (h2 : ys ≠ []) :
    (∃ i : Nat, getNth ys i = getNth xs i + (listSum xs + 1)) → 
    can_be_equal xs ys = false :=
  sorry
  
  theorem different_length_not_equal {xs : List Int} (y : Int) :
    can_be_equal xs (xs ++ [y]) = false :=
  sorry
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval can_be_equal [1, 2, 3, 4] [2, 4, 1, 3]
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval can_be_equal [7] [7]
  
  /-
  info: False
  -/
  -- #guard_msgs in
  -- #eval can_be_equal [3, 7, 9] [3, 7, 11]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

