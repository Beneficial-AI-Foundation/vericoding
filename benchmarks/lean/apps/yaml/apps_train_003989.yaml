vc-description: |-
  /-
  ## Task
  
  Generate a sorted list of all possible IP addresses in a network.
  
  For a subnet that is not a valid IPv4 network return `None`.
  
  ## Examples
  ```
  ipsubnet2list("192.168.1.0/31") == ["192.168.1.0", "192.168.1.1"]
  ipsubnet2list("213.256.46.160/28") == None
  ```
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def ipsubnet2list (subnet : String) : Option (List String) := sorry
  
  def is_valid_ip_network (subnet : String) : Bool := sorry

vc-theorems: |-
  theorem ipsubnet2list_properties {a b c d : Nat} {mask : Nat} 
    (h1 : a ≤ 255) (h2 : b ≤ 255) (h3 : c ≤ 255) (h4 : d ≤ 255)
    (h5 : 24 ≤ mask) (h6 : mask ≤ 32) :
    let subnet := s!"{a}.{b}.{c}.{d}/{mask}"
    match ipsubnet2list subnet with
    | none => ¬is_valid_ip_network subnet 
    | some result => 
      is_valid_ip_network subnet ∧ 
      List.length result = 2^(32 - mask) ∧
      List.Nodup result
    := sorry
  
  theorem ipsubnet2list_invalid_input (s : String) :
    ¬is_valid_ip_network s → 
    ipsubnet2list s = none := sorry
  
  /-
  info: ['192.168.1.0', '192.168.1.1']
  -/
  -- #guard_msgs in
  -- #eval ipsubnet2list "192.168.1.0/31"
  
  /-
  info: ['195.20.15.0', '195.20.15.1', '195.20.15.2', '195.20.15.3', '195.20.15.4', '195.20.15.5', '195.20.15.6', '195.20.15.7', '195.20.15.8', '195.20.15.9', '195.20.15.10', '195.20.15.11', '195.20.15.12', '195.20.15.13', '195.20.15.14', '195.20.15.15']
  -/
  -- #guard_msgs in
  -- #eval ipsubnet2list "195.20.15.0/28"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

