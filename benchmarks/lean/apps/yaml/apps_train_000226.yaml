vc-description: |-
  /-
  Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.
  
  Note:
  
  The length of num is less than 10002 and will be ≥ k.
  The given num does not contain any leading zero.
  
  Example 1:
  
  Input: num = "1432219", k = 3
  Output: "1219"
  Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
  
  Example 2:
  
  Input: num = "10200", k = 1
  Output: "200"
  Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
  
  Example 3:
  
  Input: num = "10", k = 2
  Output: "0"
  Explanation: Remove all the digits from the number and it is left with nothing which is 0.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def removeKDigits (num : String) (k : Nat) : String := sorry
  
  theorem remove_zero_digits 
    (num : String)
    (h : num.any (fun c => '0' ≤ c ∧ c ≤ '9')) :
    removeKDigits num 0 = 
      if (num.dropWhile (· = '0')).isEmpty 
      then "0" 
      else num.dropWhile (· = '0')
    := sorry

vc-theorems: |-
  theorem remove_all_digits
    (num : String) 
    (h1 : num.any (fun c => '0' ≤ c ∧ c ≤ '9'))
    (h2 : num.length ≤ 10) :
    removeKDigits num num.length = "0"
    := sorry
  
  /-
  info: '1219'
  -/
  -- #guard_msgs in
  -- #eval remove_k_digits "1432219" 3
  
  /-
  info: '200'
  -/
  -- #guard_msgs in
  -- #eval remove_k_digits "10200" 1
  
  /-
  info: '0'
  -/
  -- #guard_msgs in
  -- #eval remove_k_digits "10" 2

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

