vc-description: |-
  /-
  The chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K (odd) to form a new pattern. Help the chef to code this pattern problem.
  
  -----Input:-----
  - First-line will contain $T$, the number of test cases. Then the test cases follow. 
  - Each test case contains a single line of input, one integer $K$. 
  
  -----Output:-----
  For each test case, output as the pattern.
  
  -----Constraints-----
  - $1 \leq T \leq 100$
  - $1 \leq K \leq 100$
  
  -----Sample Input:-----
  4
  1
  3
  5
  7
  
  -----Sample Output:-----
  *
  *
  **
  *
  *
  **
  * *
  **
  *
  *
  **
  * *
  *  *
  * *
  **
  *
  
  -----EXPLANATION:-----
  No need, else pattern can be decode easily.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def generate_pattern (k : Nat) : List String := sorry
  
  theorem pattern_length_is_k {k : Nat} (h : k % 2 = 1) :
    let pattern := generate_pattern k
    List.length pattern = k := sorry

vc-theorems: |-
  theorem pattern_is_symmetric {k : Nat} (h : k % 2 = 1) :
    let pattern := generate_pattern k
    pattern = List.reverse pattern := sorry
  
  theorem pattern_content_valid {k : Nat} (h : k % 2 = 1) :
    let pattern := generate_pattern k
    (∀ line ∈ pattern, ∀ c ∈ line.data, c = '*' ∨ c = ' ') ∧ 
    pattern.head? = some "*" ∧
    pattern.getLast? = some "*" ∧
    (k > 1 → pattern.get? 1 = some "**") := sorry
  
  theorem middle_lines_format {k : Nat} (h : k % 2 = 1) :
    let pattern := generate_pattern k
    let mid := k / 2
    ∀ i, 2 ≤ i → i < mid →
      let line := pattern.get! i
      line.data.head? = some '*' ∧ 
      line.data.getLast? = some '*' ∧
      (∀ c ∈ (line.data.drop 1).dropLast, c = ' ') := sorry
  
  /-
  info: ['*']
  -/
  -- #guard_msgs in
  -- #eval generate_pattern 1
  
  /-
  info: ['*', '**', '*']
  -/
  -- #guard_msgs in
  -- #eval generate_pattern 3
  
  /-
  info: ['*', '**', '* *', '**', '*']
  -/
  -- #guard_msgs in
  -- #eval generate_pattern 5

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

