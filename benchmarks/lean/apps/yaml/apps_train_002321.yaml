vc-description: |-
  /-
  You are given a license key represented as a string S which consists only alphanumeric character and dashes. The string is separated into N+1 groups by N dashes.
  
  Given a number K, we would want to reformat the strings such that each group contains exactly K characters, except for the first group which could be shorter than K, but still must contain at least one character. Furthermore, there must be a dash inserted between two groups and all lowercase letters should be converted to uppercase.
  
  Given a non-empty string S and a number K, format the string according to the rules described above.
  
  Example 1:
  
  Input: S = "5F3Z-2e-9-w", K = 4
  
  Output: "5F3Z-2E9W"
  
  Explanation: The string S has been split into two parts, each part has 4 characters.
  Note that the two extra dashes are not needed and can be removed.
  
  Example 2:
  
  Input: S = "2-5g-3-J", K = 2
  
  Output: "2-5G-3J"
  
  Explanation: The string S has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above.
  
  Note:
  
  The length of string S will not exceed 12,000, and K is a positive integer.
  String S consists only of alphanumerical characters (a-z and/or A-Z and/or 0-9) and dashes(-).
  String S is non-empty.
  -/

vc-preamble: |-
  def isUppercase (c : Char) : Bool := sorry
  def toCharList (s : String) : List Char := sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def removeDashes (s : String) : String := sorry
  def licenseKeyFormatting (s : String) (k : Nat) : String := sorry

vc-theorems: |-
  theorem license_key_uppercase (s : String) (k : Nat) : 
    ∀ c ∈ toCharList (licenseKeyFormatting s k), isUppercase c = true 
    := sorry
  
  theorem license_key_same_length (s : String) (k : Nat) :
    String.length (removeDashes (licenseKeyFormatting s k)) = 
    String.length (removeDashes s)
    := sorry
  
  theorem license_key_group_sizes (s : String) (k : Nat) :
    let result := licenseKeyFormatting s k
    let groups := String.splitOn result "-"
    groups.length ≤ 1 ∨ 
    (∀ g ∈ groups.tail, String.length g = k) ∧ String.length groups.head! ≤ k
    := sorry
  
  theorem license_key_empty (k : Nat) :
    licenseKeyFormatting "" k = ""
    := sorry
  
  theorem license_key_single_dash (k : Nat) :
    licenseKeyFormatting "-" k = ""
    := sorry
  
  theorem license_key_no_dashes (s : String) (k : Nat) :
    (∀ c ∈ toCharList s, c ≠ '-') → 
    removeDashes (licenseKeyFormatting s k) = String.mk (List.map Char.toUpper (toCharList s))
    := sorry
  
  /-
  info: '5F3Z-2E9W'
  -/
  -- #guard_msgs in
  -- #eval license_key_formatting "5F3Z-2e-9-w" 4
  
  /-
  info: '2-5G-3J'
  -/
  -- #guard_msgs in
  -- #eval license_key_formatting "2-5g-3-J" 2
  
  /-
  info: 'A-B-C'
  -/
  -- #guard_msgs in
  -- #eval license_key_formatting "a-b-c" 1

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

