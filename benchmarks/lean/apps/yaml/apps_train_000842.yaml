vc-description: |-
  /-
  These days, chef is very much interested in Mathematics. He has started attending Recitations too! His hunger for problems is increasing day by day!
  Today, chef was a given a crumpled maths problem, which he is stuck with . He needs your help to do it
  Here's what his teacher said: "Find sum of all numbers till N, do not include numbers which are powers of K from K, K2, K3... which are less than or equal to N"
  Easy, right? Can you solve it?
  
  -----INPUT-----
  The first line of the input contains an integer T, denoting the number of test cases. The description of T test cases follows. The first line of each test contains two integers N and K, as per the above given problem specification.
  
  -----OUTPUT-----
  For each test case, output a single line printing the sum of the each test case, in format Case #T: S, where T is the Tth test case running and S is sum of corresponding test case.
  
  -----CONSTRAINTS-----
  
  10 < T < 50
  
  10 < N < 104
  
  0 < K < 100
  
  -----EXAMPLE-----
  Input:
  
  2
  
  10 3
  
  20 2
  
  Output:
  
  Case #1: 43
  
  Case #2: 180
  -/

vc-preamble: |-
  def calculate_special_sum (n: Int) (k: Int) : Int :=
    sorry
  
  def solve_case (n: Int) (k: Int) : String :=
    sorry

vc-helpers: |-

vc-definitions: |-
  def pow (x: Int) (n: Nat) : Int :=
    match n with
    | 0 => 1
    | n + 1 => x * pow x n

vc-theorems: |-
  theorem calculate_special_sum_nonnegative 
    (n: Int) (k: Int)
    (hn: n ≥ 0) (hk: k ≥ 2) (hk2: k ≤ 100) :
    calculate_special_sum n k ≥ 0 :=
    sorry
  
  theorem calculate_special_sum_upper_bound
    (n: Int) (k: Int) (power: Nat)
    (hn: n ≥ 0) (hk: k ≥ 2) (hk2: k ≤ 100)
    (hp: pow k power ≤ n) :
    calculate_special_sum n k ≤ (n * (n+1))/2 :=
    sorry
  
  theorem calculate_special_sum_negative_input
    (n: Int) (k: Int)
    (hn: n < 0) (hk: k ≥ 2) (hk2: k ≤ 100) :
    calculate_special_sum n k = 0 :=
    sorry
  
  theorem solve_case_format
    (n: Int) (k: Int)
    (hn: n ≥ 0) (hk: k ≥ 2) (hk2: k ≤ 100) :
    solve_case n k = "Case #1: " ++ toString (calculate_special_sum n k) :=
    sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

