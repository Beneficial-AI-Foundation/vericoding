vc-description: |-
  /-
  You are fishing with polar bears Alice and Bob. While waiting for the fish to bite, the polar bears get bored. They come up with a game. First Alice and Bob each writes a 01-string (strings that only contain character "0" and "1") a and b. Then you try to turn a into b using two types of operations:  Write parity(a) to the end of a. For example, $1010 \rightarrow 10100$.  Remove the first character of a. For example, $1001 \rightarrow 001$. You cannot perform this operation if a is empty. 
  
  You can use as many operations as you want. The problem is, is it possible to turn a into b?
  
  The parity of a 01-string is 1 if there is an odd number of "1"s in the string, and 0 otherwise.
  
  -----Input-----
  
  The first line contains the string a and the second line contains the string b (1 ≤ |a|, |b| ≤ 1000). Both strings contain only the characters "0" and "1". Here |x| denotes the length of the string x.
  
  -----Output-----
  
  Print "YES" (without quotes) if it is possible to turn a into b, and "NO" (without quotes) otherwise.
  
  -----Examples-----
  Input
  01011
  0110
  
  Output
  YES
  
  Input
  0011
  1110
  
  Output
  NO
  
  -----Note-----
  
  In the first sample, the steps are as follows: 01011 → 1011 → 011 → 0110
  -/

vc-preamble: |-
  def is_possible (a b : String) : Bool :=
    sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def count_ones (s : String) : Nat :=
    sorry

vc-theorems: |-
  theorem ones_diff_bounds (a b : String) :
    is_possible a b →
    count_ones b ≤ ((count_ones a + 1) / 2) * 2
    ∧
    ¬is_possible a b →
    count_ones b > ((count_ones a + 1) / 2) * 2 :=
  sorry
  
  theorem same_string_always_possible (s : String) :
    is_possible s s :=
  sorry
  
  theorem all_zeros_possible (s zeros : String) :
    (∀ c ∈ zeros.data, c = '0') →
    s.length = zeros.length →
    is_possible s zeros :=
  sorry
  
  theorem length_invariant (s ones : String) :
    (∀ c ∈ ones.data, c = '1') →
    is_possible s ones ↔ 
    ones.length ≤ ((count_ones s + 1) / 2) * 2 :=
  sorry
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval is_possible "01011" "0110"
  
  /-
  info: False
  -/
  -- #guard_msgs in
  -- #eval is_possible "0011" "1110"
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval is_possible "1" "0"

vc-postamble: |-
  -- Apps difficulty: competition
  -- Assurance level: unguarded

