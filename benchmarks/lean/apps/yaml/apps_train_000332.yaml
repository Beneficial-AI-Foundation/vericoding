vc-description: |-
  /-
  Write a program to find the n-th ugly number.
  
  Ugly numbers are positive numbers whose prime factors only include 2, 3, 5. 
  
  Example:
  
  Input: n = 10
  Output: 12
  Explanation: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 is the sequence of the first 10 ugly numbers.
  
  Note:  
  
         1 is typically treated as an ugly number.
         n does not exceed 1690.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def nth_ugly_number (n : Int) : Option Int := sorry
  
  theorem nth_ugly_invalid_inputs {n : Int} (h : n ≤ 0) : 
    nth_ugly_number n = none := sorry

vc-theorems: |-
  theorem nth_ugly_positive {n : Int} (h : n > 0) : 
    ∀ x, nth_ugly_number n = some x → x > 0 := sorry
  
  theorem nth_ugly_prime_factors {n : Int} (h : n > 0) :
    ∀ x, nth_ugly_number n = some x → 
      ∃ a b c, x = 2^a * 3^b * 5^c := sorry
  
  theorem nth_ugly_monotonic {n : Int} (h₁ : n > 1) :
    ∀ x y, nth_ugly_number n = some x → nth_ugly_number (n-1) = some y → 
      x > y := sorry
  
  theorem nth_ugly_one : nth_ugly_number 1 = some 1 := sorry
  
  /-
  info: 12
  -/
  -- #guard_msgs in
  -- #eval nth_ugly_number 10
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval nth_ugly_number 1
  
  /-
  info: 8
  -/
  -- #guard_msgs in
  -- #eval nth_ugly_number 7

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

