vc-description: |-
  /-
  Your task is to write a function that takes two or more objects and returns a new object which combines all the input objects. 
  
  All input object properties will have only numeric values. Objects are combined together so that the values of matching keys are added together.
  
  An example:
  
  ```python
  objA = { 'a': 10, 'b': 20, 'c': 30 }
  objB = { 'a': 3, 'c': 6, 'd': 3 }
  combine(objA, objB) # Returns { a: 13, b: 20, c: 36, d: 3 }
  ```
  
  The combine function should be a good citizen, so should not mutate the input objects.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def combine : List (String × Int) → List (String × Int) → List (String × Int) := sorry
  
  def combineMulti : List (List (String × Int)) → List (String × Int) := sorry

vc-theorems: |-
  theorem combine_key_preservation {d1 d2 : List (String × Int)} :
    ∀ k, (combine d1 d2).any (λ p => p.1 = k) ↔ 
         d1.any (λ p => p.1 = k) ∨ d2.any (λ p => p.1 = k) := sorry
  
  theorem combine_value_sum {d1 d2 : List (String × Int)} (k : String) :
    let v1 := (d1.find? (λ p => p.1 = k)).map Prod.snd |>.getD 0
    let v2 := (d2.find? (λ p => p.1 = k)).map Prod.snd |>.getD 0
    let vr := ((combine d1 d2).find? (λ p => p.1 = k)).map Prod.snd |>.getD 0
    vr = v1 + v2 := sorry
  
  theorem combine_single_dict {d : List (String × Int)} :
    combine d [] = d := sorry 
  
  theorem combine_with_empty {d : List (String × Int)} :
    combine d [] = d ∧ combine [] d = d := sorry
  
  theorem combine_associative {d1 d2 d3 : List (String × Int)} :
    combine (combine d1 d2) d3 = combine d1 (combine d2 d3) := sorry
  
  /-
  info: {'a': 13, 'b': 20, 'c': 36, 'd': 3}
  -/
  -- #guard_msgs in
  -- #eval combine {"a": 10, "b": 20, "c": 30} {"a": 3, "c": 6, "d": 3}
  
  /-
  info: {}
  -/
  -- #guard_msgs in
  -- #eval combine {} {}
  
  /-
  info: {'x': 3, 'y': 7, 'z': 5}
  -/
  -- #guard_msgs in
  -- #eval combine {"x": 1} {"x": 2, "y": 3} {"y": 4, "z": 5}

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

