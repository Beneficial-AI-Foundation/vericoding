vc-description: |-
  /-
  An array is defined to be `odd-heavy` if it contains at least one odd element and every element whose value is `odd` is greater than 
  every even-valued element. 
  
  eg.
  ```
  Array [11,4,9,2,8] is odd-heavy 
  because:- its odd elements [11,9] are greater than all the even elements [4,2,8]
  
  Array [11,4,9,2,3,10] is not odd-heavy
  because:- one of it's even element 10 from [4,2,10] is greater than two of its odd elements [9,3] from [ 11,9,3]
  
  ```
  write a function called `isOddHeavy` or `is_odd_heavy` that accepts an integer array and returns `true` if the array is `odd-heavy` else return `false`.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def isOddHeavy (lst : List Int) : Bool :=
    sorry

vc-theorems: |-
  theorem empty_list_not_odd_heavy :
    isOddHeavy [] = false :=
  sorry
  
  theorem all_evens_not_odd_heavy (lst : List Int) :
    (lst ≠ []) → (∀ x ∈ lst, x % 2 = 0) → isOddHeavy lst = false :=
  sorry
  
  theorem odd_heavy_characterization (lst : List Int) :
    (isOddHeavy lst = true) ↔
    (∃ x ∈ lst, x % 2 ≠ 0) ∧ 
    (∀ e ∈ lst, e % 2 = 0 → 
     ∀ o ∈ lst, o % 2 ≠ 0 → o > e) :=
  sorry
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval is_odd_heavy [0, 2, 19, 4, 4]
  
  /-
  info: False
  -/
  -- #guard_msgs in
  -- #eval is_odd_heavy [0, 0, 0, 0]
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval is_odd_heavy [-1, -2, 21]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

