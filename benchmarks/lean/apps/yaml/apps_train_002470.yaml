vc-description: |-
  /-
  =====Problem Statement=====
  Kevin and Stuart want to play the 'The Minion Game'.
  
  Game Rules
  
  Both players are given the same string, S.
  Both players have to make substrings using the letters of the string S.
  Stuart has to make words starting with consonants.
  Kevin has to make words starting with vowels.
  The game ends when both players have made all possible substrings.
  
  Scoring
  A player gets +1 point for each occurrence of the substring in the string S.
  
  =====Example=====
  String S = BANANA
  Kevin's vowel beginning word = ANA
  Here, ANA occurs twice in BANANA. Hence, Kevin will get 2 Points.
  
  Your task is to determine the winner of the game and their score.
  
  =====Input Format=====
  A single line of input containing the string S.
  Note: The string S will contain only uppercase letters: [A-Z].
  
  =====Constraints=====
  0 < len(S) < 10^6
  
  =====Output Format=====
  Print one line: the name of the winner and their score separated by a space.
  If the game is a draw, print Draw.
  -/

vc-preamble: |-
  def minion_game (s : String) : String := sorry 
  
  def is_vowel (c : Char) : Bool := 
    c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def score_from_result (result : String) : Nat :=
    if result == "Draw" then 0
    else String.toNat! (result.splitOn " " |>.get! 1)

vc-theorems: |-
  theorem minion_game_result_format (s : String) (h : s.all (fun c => c.isUpper)) :
    let result := minion_game s
    result.startsWith "Kevin " ∨ result.startsWith "Stuart " ∨ result = "Draw" := sorry
  
  theorem minion_game_score_bounds (s : String) (h : s.all (fun c => c.isUpper)) :
    let result := minion_game s
    let score := score_from_result result
    result ≠ "Draw" →
    score > 0 ∧ score ≤ (s.length * (s.length + 1)) / 2 := sorry
  
  theorem minion_game_scores_sum (s : String) (h : s.all (fun c => c.isUpper)) :
    let result := minion_game s
    let total := (s.length * (s.length + 1)) / 2
    result ≠ "Draw" →
    score_from_result result + (total - score_from_result result) = total := sorry
  
  theorem minion_game_all_vowels (s : String) 
    (h₁ : s.length > 0)
    (h₂ : s.all (fun c => is_vowel c)) :
    (minion_game s).startsWith "Kevin " := sorry
  
  theorem minion_game_all_consonants (s : String)
    (h₁ : s.length > 0) 
    (h₂ : s.all (fun c => c.isUpper ∧ !is_vowel c)) :
    (minion_game s).startsWith "Stuart " := sorry
  
  /-
  info: 'Stuart 12'
  -/
  -- #guard_msgs in
  -- #eval minion_game "BANANA"
  
  /-
  info: 'Stuart 6'
  -/
  -- #guard_msgs in
  -- #eval minion_game "MINE"
  
  /-
  info: 'Kevin 3'
  -/
  -- #guard_msgs in
  -- #eval minion_game "AE"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

