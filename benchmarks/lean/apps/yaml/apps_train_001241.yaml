vc-description: |-
  /-
  Chef is learning linear algebra. Recently, he learnt that for a square matrix $M$, $\mathop{\rm trace}(M)$ is defined as the sum of all elements on the main diagonal of $M$ (an element lies on the main diagonal if its row index and column index are equal).
  Now, Chef wants to solve some excercises related to this new quantity, so he wrote down a square matrix $A$ with size $N\times N$. A square submatrix of $A$ with size $l\times l$ is a contiguous block of $l\times l$ elements of $A$. Formally, if $B$ is a submatrix of $A$ with size $l\times l$, then there must be integers $r$ and $c$ ($1\le r, c \le N+1-l$) such that $B_{i,j} = A_{r+i-1, c+j-1}$ for each $1 \le i, j \le l$.
  Help Chef find the maximum trace of a square submatrix of $A$.
  
  -----Input-----
  - The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.
  - The first line of each test case contains a single integer $N$.
  - $N$ lines follow. For each $i$ ($1 \le i \le N$), the $i$-th of these lines contains $N$ space-separated integers $A_{i,1}, A_{i,2}, \dots, A_{i, N}$ denoting the $i$-th row of the matrix $A$.
  
  -----Output-----
  For each test case, print a single line containing one integer — the maximum possible trace.
  
  -----Constraints-----
  - $1 \le T \le 100$
  - $2 \le N \le 100$
  - $1 \le A_{i,j} \le 100$ for each valid $i, j$
  
  -----Subtasks-----
  Subtask #1 (100 points): original constraints
  
  -----Example Input-----
  1
  3
  1 2 5
  6 3 4
  2 7 1
  
  -----Example Output-----
  13
  
  -----Explanation-----
  Example case 1: The submatrix with the largest trace is 
  6 3
  2 7
  
  which has trace equal to $6 + 7 = 13$. (This submatrix is obtained for $r=2, c=1, l=2$.)
  -/

vc-preamble: |-
  def isValidMatrix (matrix : List (List Int)) : Bool :=
    match matrix with
    | [] => false
    | x::xs => let n := x.length
               matrix.length = n && matrix.all (fun row => row.length = n)

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def findMaxTrace (matrix : List (List Int)) : Int :=
    sorry

vc-theorems: |-
  theorem max_trace_geq_main_diagonal (matrix : List (List Int)) 
    (h : isValidMatrix matrix = true) : 
    findMaxTrace matrix ≥ 
      (List.range matrix.length).foldl 
        (fun acc i => acc + (matrix.get! i).get! i) 0 :=
  sorry
  
  theorem max_trace_geq_max_element (matrix : List (List Int)) 
    (h : isValidMatrix matrix = true) :
    findMaxTrace matrix ≥ 
      (matrix.map (List.foldl max 0)).foldl max 0 :=
  sorry
  
  theorem constant_matrix_trace (n : Nat) (h : n > 0) :
    let matrix := List.replicate n (List.replicate n 1)
    findMaxTrace matrix = n :=
  sorry
  
  theorem identity_matrix_trace (n : Nat) (h : n > 0) :
    let matrix := List.range n |> List.map (fun i => 
      List.range n |> List.map (fun j => if i = j then 1 else 0))
    findMaxTrace matrix = n :=
  sorry
  
  theorem empty_matrix_error : 
    isValidMatrix [] = false :=
  sorry
  
  /-
  info: 13
  -/
  -- #guard_msgs in
  -- #eval find_max_trace [[1, 2, 5], [6, 3, 4], [2, 7, 1]]
  
  /-
  info: 5
  -/
  -- #guard_msgs in
  -- #eval find_max_trace [[1, 2], [3, 4]]
  
  /-
  info: 3
  -/
  -- #guard_msgs in
  -- #eval find_max_trace [[1, 1, 1], [1, 1, 1], [1, 1, 1]]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

