vc-description: |-
  /-
  In this Kata, you will be given two strings `a` and `b` and your task will be to return the characters that are not common in the two strings. 
  
  For example:
  ```Haskell
  solve("xyab","xzca") = "ybzc" 
  --The first string has 'yb' which is not in the second string. 
  --The second string has 'zc' which is not in the first string. 
  ```
  Notice also that you return the characters from the first string concatenated with those from the second string.
  
  More examples in the tests cases. 
  
  Good luck!
  
  Please also try [Simple remove duplicates](https://www.codewars.com/kata/5ba38ba180824a86850000f7)
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def solve (a b : String) : String := sorry
  
  theorem solve_contains_non_common_chars (a b : String) (c : Char) :
    c ∈ a.data ∨ c ∈ b.data →
    (¬ (c ∈ a.data ∧ c ∈ b.data)) →
    c ∈ (solve a b).data
    := sorry

vc-theorems: |-
  theorem solve_excludes_common_chars (a b : String) :
    ∀ c, c ∈ (solve a b).data →
    ¬ (c ∈ a.data ∧ c ∈ b.data)
    := sorry
  
  theorem solve_maintains_relative_order (a b : String) :
    let a_filtered := a.data.filter (fun c => ¬(c ∈ a.data ∧ c ∈ b.data))
    let b_filtered := b.data.filter (fun c => ¬(c ∈ a.data ∧ c ∈ b.data))
    solve a b = String.mk (a_filtered ++ b_filtered)
    := sorry
  
  theorem solve_length_property (a b : String) :
    let a_filtered := a.data.filter (fun c => ¬(c ∈ a.data ∧ c ∈ b.data))
    let b_filtered := b.data.filter (fun c => ¬(c ∈ a.data ∧ c ∈ b.data))
    (solve a b).length = a_filtered.length + b_filtered.length
    := sorry
  
  theorem solve_identical_strings (s : String) :
    solve s s = ""
    := sorry
  
  theorem solve_with_empty (s : String) :
    solve s "" = s ∧
    solve "" s = s
    := sorry
  
  /-
  info: 'ybzc'
  -/
  -- #guard_msgs in
  -- #eval solve "xyab" "xzca"
  
  /-
  info: 'ybbzc'
  -/
  -- #guard_msgs in
  -- #eval solve "xyabb" "xzca"
  
  /-
  info: 'abcdxyz'
  -/
  -- #guard_msgs in
  -- #eval solve "abcd" "xyz"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

