vc-description: |-
  /-
  Given a non-negative integer n, count all numbers with unique digits, x, where 0 ≤ x < 10n.
  
      Example:
  Given n = 2, return 91. (The answer should be the total numbers in the range of 0 ≤ x < 100, excluding [11,22,33,44,55,66,77,88,99])
  
  Credits:Special thanks to @memoryless for adding this problem and creating all test cases.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def countNumbersWithUniqueDigits (n : Nat) : Nat := sorry
  
  theorem countNumbersWithUniqueDigits_positive (n : Nat) :
    countNumbersWithUniqueDigits n > 0 := sorry

vc-theorems: |-
  theorem countNumbersWithUniqueDigits_monotonic (n : Nat) :
    n > 0 → countNumbersWithUniqueDigits n ≥ countNumbersWithUniqueDigits (n-1) := sorry
  
  theorem countNumbersWithUniqueDigits_plateau (n : Nat) :
    n ≥ 10 → countNumbersWithUniqueDigits n = countNumbersWithUniqueDigits 10 := sorry
  
  theorem countNumbersWithUniqueDigits_zero :
    countNumbersWithUniqueDigits 0 = 1 := sorry
  
  theorem countNumbersWithUniqueDigits_one :
    countNumbersWithUniqueDigits 1 = 10 := sorry
  
  /-
  info: 91
  -/
  -- #guard_msgs in
  -- #eval count_numbers_with_unique_digits 2
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval count_numbers_with_unique_digits 0
  
  /-
  info: 10
  -/
  -- #guard_msgs in
  -- #eval count_numbers_with_unique_digits 1

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

