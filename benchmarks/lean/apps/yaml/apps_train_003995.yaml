vc-description: |-
  /-
  In this kata you will have to modify a sentence so it meets the following rules:
  
  convert every word backwards that is:
  
      longer than 6 characters
  
    OR
  
      has 2 or more 'T' or 't' in it
  
  convert every word uppercase that is:
  
      exactly 2 characters long
  
    OR
  
      before a comma
  
  convert every word to a "0" that is:
  
      exactly one character long
  
   NOTES: 
  
        Punctuation must not be touched. if a word is 6 characters long, and a "." is behind it,
        it counts as 6 characters so it must not be flipped, but if a word is 7 characters long,
        it must be flipped but the "." must stay at the end of the word.
        -----------------------------------------------------------------------------------------
        Only the first transformation applies to a given word, for example 'companions,'
        will be 'snoinapmoc,' and not 'SNOINAPMOC,'.
        -----------------------------------------------------------------------------------------
        As for special characters like apostrophes or dashes, they count as normal characters, 
        so e.g 'sand-colored' must be transformed to 'deroloc-dnas'.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def spin_solve (s : String) : String := sorry
  
  def countChar (s : String) (c : Char) : Nat := 
    s.foldl (fun acc x => if x = c then acc + 1 else acc) 0
  
  /- The output of spin_solve is always a string -/

vc-theorems: |-
  theorem output_is_string (s : String) :
    ∃ (result : String), spin_solve s = result := sorry
  
  /- Properties of single word transformations -/
  
  theorem single_word_properties (word : String) :
    word ≠ "" →
    (word.length > 6 ∨ (countChar word.toLower 't' > 1) → 
      spin_solve word = String.join (word.data.reverse.map toString)) ∧
    (word.length = 2 → spin_solve word = word.toUpper) ∧
    (word.length = 1 → spin_solve word = "0") := sorry
  
  /- Punctuation is preserved at the end of words -/
  
  theorem punctuation_preservation (word : String) (punct : Char) :
    word ≠ "" →
    punct ∈ ['.', '!', '?', ',', ':', ';'] →
    (spin_solve (word.push punct)).back = punct := sorry
  
  /- The number of spaces is preserved in the output -/
  
  theorem space_preservation (sentence : String) :
    countChar sentence ' ' = countChar (spin_solve sentence) ' ' := sorry
  
  /-
  info: 'emocleW.'
  -/
  -- #guard_msgs in
  -- #eval spin_solve "Welcome."
  
  /-
  info: 'MOTHER, PLEASE, HELP, ME.'
  -/
  -- #guard_msgs in
  -- #eval spin_solve "Mother, please, help, me."
  
  /-
  info: 'IF 0 man does not keep pace with his snoinapmoc, spahrep IT IS esuaceb HE hears 0 tnereffid remmurd.'
  -/
  -- #guard_msgs in
  -- #eval spin_solve "If a man does not keep pace with his companions, perhaps it is because he hears a different drummer."

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

