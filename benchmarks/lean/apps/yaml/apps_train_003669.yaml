vc-description: |-
  /-
  Take the following IPv4 address: `128.32.10.1`
  
  This address has 4 octets where each octet is a single byte (or 8 bits).
  
  * 1st octet `128` has the binary representation: `10000000`
  * 2nd octet `32` has the binary representation: `00100000`
  * 3rd octet `10` has the binary representation: `00001010`
  * 4th octet `1` has the binary representation: `00000001`
  
  So `128.32.10.1` == `10000000.00100000.00001010.00000001`
  
  Because the above IP address has 32 bits, we can represent it as the unsigned 32 bit number: `2149583361`
  
  Complete the function that takes an unsigned 32 bit number and returns a string representation of its IPv4 address.
  
  ## Examples
  ```
  2149583361 ==> "128.32.10.1"
  32         ==> "0.0.0.32"
  0          ==> "0.0.0.0"
  ```
  -/

vc-preamble: |-
  def int32_to_ip (n : Nat) : String := sorry
  
  def toOctets (n : Nat) : List Nat := sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def countChar (s : String) (c : Char) : Nat :=
    s.data.filter (· = c) |>.length

vc-theorems: |-
  theorem int32_to_ip_has_three_dots (n : Nat)
      (h : n < 2^32) :
      let result := int32_to_ip n
      (countChar result '.' = 3) := sorry
  
  theorem int32_to_ip_octets_valid (n : Nat) 
      (h : n < 2^32) :
      let octets := toOctets n
      (octets.length = 4 ∧ 
       octets.all (fun x => x ≤ 255)) := sorry
  
  theorem int32_to_ip_preserves_value (n : Nat)
      (h : n < 2^32) :
      let octets := toOctets n
      let reconstructed := (octets.get! 0) * 256^3 + 
                          (octets.get! 1) * 256^2 +
                          (octets.get! 2) * 256^1 +
                          (octets.get! 3) * 256^0
      (reconstructed = n) := sorry
  
  theorem int32_to_ip_format (octets : List Nat)
      (h1 : octets.length = 4)
      (h2 : octets.all (fun x => x ≤ 255)) :
      let n := (octets.get! 0) * 256^3 + 
               (octets.get! 1) * 256^2 +
               (octets.get! 2) * 256^1 + 
               (octets.get! 3) * 256^0
      (int32_to_ip n = String.intercalate "." (octets.map toString)) := sorry
  
  /-
  info: '128.114.17.104'
  -/
  -- #guard_msgs in
  -- #eval int32_to_ip 2154959208
  
  /-
  info: '0.0.0.0'
  -/
  -- #guard_msgs in
  -- #eval int32_to_ip 0
  
  /-
  info: '128.32.10.1'
  -/
  -- #guard_msgs in
  -- #eval int32_to_ip 2149583361

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

