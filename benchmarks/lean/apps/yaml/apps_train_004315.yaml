vc-description: |-
  /-
  You are given an array of unique numbers. The numbers represent points. The higher the number the higher the points.  
  In the array [1,3,2] 3 is the highest point value so it gets 1st place. 2 is the second highest so it gets second place. 1 is the 3rd highest so it gets 3rd place. 
  
  Your task is to return an array giving each number its rank in the array.  
  input // [1,3,2] 
  output // [3,1,2]
  
  ```rankings([1,2,3,4,5]) // [5,4,3,2,1]``` 
  ```rankings([3,4,1,2,5])//  [3,2,5,4,1]``` 
  ```rankings([10,20,40,50,30]) //  [5, 4, 2, 1, 3]``` 
  ```rankings([1, 10]) //   [2, 1]``` 
  ```rankings([22, 33, 18, 9, 110, 4, 1, 88, 6, 50]) //```
  ```[5, 4, 6, 7, 1, 9, 10, 2, 8, 3]```
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def rankings (arr : List Int) : List Nat :=
    sorry

vc-theorems: |-
  theorem rankings_length {arr : List Int} (h : arr ≠ []) :
    (rankings arr).length = arr.length :=
  sorry
  
  theorem rankings_range {arr : List Int} (h : arr ≠ []) :
    let ranks := rankings arr 
    (∀ r ∈ ranks, 1 ≤ r ∧ r ≤ arr.length) ∧ 
    (ranks.length = arr.length) :=
  sorry
  
  /-
  info: [3, 1, 2]
  -/
  -- #guard_msgs in
  -- #eval rankings [1, 3, 2]
  
  /-
  info: [5, 4, 3, 2, 1]
  -/
  -- #guard_msgs in
  -- #eval rankings [1, 2, 3, 4, 5]
  
  /-
  info: [5, 4, 6, 7, 1, 9, 10, 2, 8, 3]
  -/
  -- #guard_msgs in
  -- #eval rankings [22, 33, 18, 9, 110, 4, 1, 88, 6, 50]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

