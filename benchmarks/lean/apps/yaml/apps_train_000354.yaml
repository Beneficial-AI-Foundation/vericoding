vc-description: |-
  /-
  Given a 2D array A, each cell is 0 (representing sea) or 1 (representing land)
  A move consists of walking from one land square 4-directionally to another land square, or off the boundary of the grid.
  Return the number of land squares in the grid for which we cannot walk off the boundary of the grid in any number of moves.
  
  Example 1:
  Input: [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]
  Output: 3
  Explanation: 
  There are three 1s that are enclosed by 0s, and one 1 that isn't enclosed because its on the boundary.
  Example 2:
  Input: [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]
  Output: 0
  Explanation: 
  All 1s are either on the boundary or can reach the boundary.
  
  Note:
  
  1 <= A.length <= 500
  1 <= A[i].length <= 500
  0 <= A[i][j] <= 1
  All rows have the same size.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def num_enclaves (grid: List (List Nat)) : Nat := sorry
  
  theorem empty_grid_enclave {rows cols : Nat} (h1: 0 < rows) (h2: 0 < cols) (h3: rows ≤ 10) (h4: cols ≤ 10) :
    let grid := List.replicate rows (List.replicate cols 0)
    num_enclaves grid = 0 := sorry

vc-theorems: |-
  theorem all_ones_grid_enclave {rows cols : Nat} (h1: 0 < rows) (h2: 0 < cols) (h3: rows ≤ 10) (h4: cols ≤ 10) :
    let grid := List.replicate rows (List.replicate cols 1)
    num_enclaves grid = 0 := sorry
  
  theorem interior_ones_enclave {rows cols : Nat} (h1: 2 < rows) (h2: 2 < cols) (h3: rows ≤ 10) (h4: cols ≤ 10) :
    let grid := List.map (fun i => List.map (fun j => 
      if i > 0 ∧ i < rows - 1 ∧ j > 0 ∧ j < cols - 1 then 1 else 0
    ) (List.range cols)) (List.range rows)
    num_enclaves grid = (rows - 2) * (cols - 2) := sorry
  
  theorem input_unchanged {grid : List (List Nat)} (h1: grid ≠ []) (h2: grid.head! ≠ [])
    (h3: ∀ x ∈ grid, ∀ y ∈ x, y ≤ 1) :
    let grid_copy := grid;
    num_enclaves grid = num_enclaves grid ∧ grid = grid_copy := sorry
  
  theorem result_non_negative {grid : List (List Nat)} (h1: grid ≠ []) (h2: grid.head! ≠ [])
    (h3: ∀ x ∈ grid, ∀ y ∈ x, y ≤ 1) :
    num_enclaves grid ≥ 0 := sorry
  
  /-
  info: 3
  -/
  -- #guard_msgs in
  -- #eval num_enclaves [[0, 0, 0, 0], [1, 0, 1, 0], [0, 1, 1, 0], [0, 0, 0, 0]]
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval num_enclaves [[0, 1, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 0]]
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval num_enclaves [[0, 0, 0, 1], [0, 1, 1, 0], [0, 1, 0, 0]]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

