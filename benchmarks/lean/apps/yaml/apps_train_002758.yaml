vc-description: |-
  /-
  You are given two arrays `arr1` and `arr2`, where `arr2` always contains integers.
  
  Write the function `find_array(arr1, arr2)` such that:
  
  For `arr1 = ['a', 'a', 'a', 'a', 'a']`, `arr2 = [2, 4]`
  `find_array returns ['a', 'a']`
  
  For `arr1 = [0, 1, 5, 2, 1, 8, 9, 1, 5]`, `arr2 = [1, 4, 7]`
  `find_array returns [1, 1, 1]`
  
  For `arr1 = [0, 3, 4]`, `arr2 = [2, 6]`
  `find_array returns [4]`
  
  For `arr1=["a","b","c","d"]` , `arr2=[2,2,2]`,
  `find_array returns ["c","c","c"]`
  
  For `arr1=["a","b","c","d"]`, `arr2=[3,0,2]`
  `find_array returns ["d","a","c"]`
  
  If either `arr1` or `arr2` is empty, you should return an empty arr (empty list in python,
  empty vector in c++). Note for c++ use std::vector arr1, arr2.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def find_array {α : Type} (arr1 : List α) (arr2 : List Nat) : List α := sorry 
  
  theorem find_array_length_bound {α : Type} (arr1 : List α) (arr2 : List Nat) :
    List.length (find_array arr1 arr2) ≤ min (List.length arr1) (List.length arr2) := sorry

vc-theorems: |-
  theorem find_array_elements_from_arr1 {α : Type} (arr1 : List α) (arr2 : List Nat) :
    ∀ x ∈ find_array arr1 arr2, x ∈ arr1 := sorry
  
  theorem find_array_matches_valid_indexes {α : Type} (arr1 : List α) (arr2 : List Nat) :
    find_array arr1 arr2 = arr2.filterMap (fun i => if h : i < arr1.length then some (arr1.get ⟨i, h⟩) else none) := sorry
  
  theorem find_array_empty {α : Type} :
    find_array ([] : List α) ([] : List Nat) = [] ∧
    ∀ (l : List α), find_array l [] = [] ∧
    ∀ (l : List Nat), find_array ([] : List α) l = [] := sorry
  
  theorem find_array_non_empty {α : Type} (arr1 : List α) (arr2 : List Nat) (h1 : arr1 ≠ []) (h2 : arr2 ≠ []) :
    ∀ (i : Nat) (x : α) (h : i < arr1.length), 
      i ∈ arr2 → 
      x = arr1.get ⟨i, h⟩ →
      x ∈ find_array arr1 arr2 := sorry
  
  /-
  info: ['a', 'a']
  -/
  -- #guard_msgs in
  -- #eval find_array ["a", "a", "a", "a", "a"] [2, 4]
  
  /-
  info: [1, 1, 1]
  -/
  -- #guard_msgs in
  -- #eval find_array [0, 1, 5, 2, 1, 8, 9, 1, 5] [1, 4, 7]
  
  /-
  info: []
  -/
  -- #guard_msgs in
  -- #eval find_array [] [2]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

