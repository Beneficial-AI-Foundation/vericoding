vc-description: |-
  /-
  DevOps legacy roasting!
  Save the business from technological purgatory. 
  
  Convert IT to DevOps, modernize application workloads, take it all to the Cloud…….
  
  You will receive a string of workloads represented by words….some legacy and some modern mixed in with complaints from the business….your job is to burn the legacy in a disco inferno and count the value of each roasting and the number of complaints resolved. 
  
  ```
  complaints (in this format, case-insensitive) -> "slow!", "expensive!", "manual!", "down!", "hostage!", "security!"
  
  ```
  
  The value is based on real or perceived pain by the business and the expense of keeping it all running. 
  
  Pull the values from the list below...
  
  ```
  1970s Disco Fever Architecture………
  Sort of like a design from Saturday night Fever….
  
              (  .      )
                  )           (              )
                        .  '   .   '  .  '  .
               (    , )       (.   )  (   ',    )
                .' ) ( . )    ,  ( ,     )   ( .
             ). , ( .   (  ) ( , ')  .' (  ,    )
            (_,) . ), ) _) _,')  (, ) '. )  ,. (' )
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
              Burn Baby Burn in a Disco Inferno
  
  Legacy is identified by the following keywords:
  
  1000 points - COBOL of any kind whatsoever
                keyword => "COBOL"
  500 points  - non-object oriented architecture
                keyword => "nonobject"
  500 points  - monolithic architecture
                keyword => "monolithic"
  100 points  - fax system dependencies
                keyword => "fax"
  100 points  - modem dependencies
                keyword => "modem"
  50 points   - thick client dependencies
                keyword => "thickclient"
  50 points   - tape drive dependencies
                keyword => "tape"
  50 points   - floppy drive dependencies
                keyword => "floppy"
  50 points   - workloads with DevOps Anti-patterns
                keyword => "oldschoolIT"
  
  The count is based on case-insensitive words!
  
  Return a string in the following format
  
  ->'Burn baby burn disco inferno 2400 points earned in this roasting and 2 complaints resolved!'
  
  If there are no complaints and no legacy from above return
  
  ->'These guys are already DevOps and in the Cloud and the business is happy!'
  
  ```
  If you have any doubt COBOL should be burned.. just look at
  this quote from Dijkstra.
  
  The use of COBOL cripples the mind; its teaching should, therefore, be regarded as a criminal offense. Edsger Dijkstra
  
  For more information on how to have a disco inferno
  
  https://www.youtube.com/watch?v=A_sY2rjxq6M
  
  Disclaimer - this should only be attempted by trained professionals and in accordance with local ordinances. EX: Disco may be outlawed in certain countries.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def countSubstr (s : String) (substr : String) : Nat := sorry
  
  def roast_legacy (workload : String) : String := sorry

vc-theorems: |-
  theorem roast_legacy_score_and_complaints 
    (terms : List String) 
    (fillers : List String)
    (h_terms : ∀ t ∈ terms, t.length > 0)
    (h_fillers : ∀ f ∈ fillers, f.length > 0 ∧ f.length ≤ 10)
    (h_terms_bound : terms.length ≤ 10)
    (h_fillers_bound : fillers.length ≤ 5) :
    let workload := String.intercalate " " (terms ++ fillers)
    let legacy_count := (countSubstr workload.toLower "cobol") * 1000 + 
                       (countSubstr workload.toLower "nonobject") * 500 +
                       (countSubstr workload.toLower "monolithic") * 500 +
                       (countSubstr workload.toLower "fax") * 100 +  
                       (countSubstr workload.toLower "modem") * 100 +
                       (countSubstr workload.toLower "thickclient") * 50 +
                       (countSubstr workload.toLower "tape") * 50 +
                       (countSubstr workload.toLower "floppy") * 50 +
                       (countSubstr workload.toLower "oldschoolit") * 50
    let complaint_count := countSubstr workload.toLower "slow!" +
                          countSubstr workload.toLower "expensive!" +
                          countSubstr workload.toLower "manual!" +
                          countSubstr workload.toLower "down!" +
                          countSubstr workload.toLower "hostage!" +
                          countSubstr workload.toLower "security!"
    let result := roast_legacy workload
    (legacy_count = 0 ∧ complaint_count = 0 → 
      result = "These guys are already DevOps and in the Cloud and the business is happy!") ∧
    (legacy_count ≠ 0 ∨ complaint_count ≠ 0 →
      result = s!"Burn baby burn disco inferno {legacy_count} points earned in this roasting and {complaint_count} complaints resolved!") :=
  sorry
  
  theorem roast_legacy_output_type (s : String) :
    let result := roast_legacy s
    result.length > 0 ∧
    (result.startsWith "Burn baby burn" ∨ result.startsWith "These guys") :=
  sorry
  
  theorem roast_legacy_case_insensitive (s : String) :
    roast_legacy (s.toLower) = roast_legacy (s.toUpper) :=
  sorry
  
  /-
  info: 'Burn baby burn disco inferno 1100 points earned in this roasting and 2 complaints resolved!'
  -/
  -- #guard_msgs in
  -- #eval roast_legacy "We have COBOL and fax systems that are slow! and expensive!"
  
  /-
  info: 'These guys are already DevOps and in the Cloud and the business is happy!'
  -/
  -- #guard_msgs in
  -- #eval roast_legacy "Everything is modern and cloud native"
  
  /-
  info: 'Burn baby burn disco inferno 550 points earned in this roasting and 1 complaints resolved!'
  -/
  -- #guard_msgs in
  -- #eval roast_legacy "Our MonoLithic system is Down! and we use ThickClient"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

