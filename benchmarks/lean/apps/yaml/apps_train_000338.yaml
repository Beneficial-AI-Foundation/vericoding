vc-description: |-
  /-
  Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.
  
  Example 1:
  
  Input:s1 = "ab" s2 = "eidbaooo"
  Output:True
  Explanation: s2 contains one permutation of s1 ("ba").
  
  Example 2:
  
  Input:s1= "ab" s2 = "eidboaoo"
  Output: False
  
  Note:
  
  The input strings only contain lower case letters.
  The length of both given strings is in range [1, 10,000].
  -/

vc-preamble: |-
  def contains_permutation (s1 s2 : String) : Bool :=
    sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def IsPermutation (s1 s2 : String) : Prop :=
    sorry

vc-theorems: |-
  theorem contains_permutation_empty_string {s : String} :
    contains_permutation "" s = true :=
  sorry
  
  theorem contains_permutation_shorter_string {s1 s2 : String} :
    s2.length < s1.length → contains_permutation s1 s2 = false :=
  sorry
  
  theorem contains_permutation_self {s : String} :
    contains_permutation s s = true :=
  sorry 
  
  theorem contains_permutation_concat {s : String} :
    contains_permutation s (s ++ s) = true :=
  sorry
  
  theorem contains_permutation_permutation_invariant {s1 s2 s1_perm : String} :
    IsPermutation s1 s1_perm →
    contains_permutation s1 s2 = contains_permutation s1_perm s2 :=
  sorry
  
  theorem contains_permutation_single_char {c : Char} {s : String} :
    contains_permutation (String.mk [c]) s = String.contains s c :=
  sorry
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval contains_permutation "ab" "eidbaooo"
  
  /-
  info: False
  -/
  -- #guard_msgs in
  -- #eval contains_permutation "ab" "eidboaoo"
  
  /-
  info: False
  -/
  -- #guard_msgs in
  -- #eval contains_permutation "hello" "ooolleoabceh"

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

