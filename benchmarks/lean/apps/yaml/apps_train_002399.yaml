vc-description: |-
  /-
  A sentence S is given, composed of words separated by spaces. Each word consists of lowercase and uppercase letters only.
  We would like to convert the sentence to "Goat Latin" (a made-up language similar to Pig Latin.)
  The rules of Goat Latin are as follows:
  
  If a word begins with a vowel (a, e, i, o, or u), append "ma" to the end of the word.
          For example, the word 'apple' becomes 'applema'.
  
  If a word begins with a consonant (i.e. not a vowel), remove the first letter and append it to the end, then add "ma".
          For example, the word "goat" becomes "oatgma".
  
  Add one letter 'a' to the end of each word per its word index in the sentence, starting with 1.
          For example, the first word gets "a" added to the end, the second word gets "aa" added to the end and so on.
  
  Return the final sentence representing the conversion from S to Goat Latin. 
  
  Example 1:
  Input: "I speak Goat Latin"
  Output: "Imaa peaksmaaa oatGmaaaa atinLmaaaaa"
  
  Example 2:
  Input: "The quick brown fox jumped over the lazy dog"
  Output: "heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa"
  
  Notes:
  
  S contains only uppercase, lowercase and spaces. Exactly one space between each word.
  1 <= S.length <= 150.
  -/

vc-preamble: |-
  def to_goat_latin (s : String) : String := sorry
  
  def splitString (s : String) : List String := sorry
  
  def getStringAt (words : List String) (i : Nat) : String := sorry
  
  def endsWith (s : String) (suffix : String) : Bool := sorry
  
  def dropRight (s : String) (n : Nat) : String := sorry
  def firstChar (s : String) : Char := sorry
  
  def dropFirst (s : String) : String := sorry
  
  theorem to_goat_latin_vowel_rule {s : String} (i : Nat) (h : i < (splitString s).length) :
    let orig := splitString s
    let result := splitString (to_goat_latin s)
    let orig_word := getStringAt orig i
    let transformed := dropRight (getStringAt result i) (2 + (i+1))
    if (firstChar orig_word).toLower ∈ ['a', 'e', 'i', 'o', 'u'] then
      transformed = orig_word
    else
      transformed = dropFirst orig_word ++ String.mk [firstChar orig_word] := sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def countChar (s : String) (c : Char) : Nat := sorry
  
  theorem to_goat_latin_trailing_a_count {s : String} (i : Nat) (h : i < (splitString s).length) :
    let result := splitString (to_goat_latin s)
    countChar (getStringAt result i) 'a' ≥ i + 1 := sorry

vc-theorems: |-
  theorem to_goat_latin_preserves_word_count {s : String} :
    (splitString s).length = (splitString (to_goat_latin s)).length := sorry
  
  theorem to_goat_latin_ma_suffix_rule {s : String} (i : Nat) (h : i < (splitString s).length) :
    let result := splitString (to_goat_latin s)
    let suffix := "ma" ++ String.mk (List.replicate (i+1) 'a')
    endsWith (getStringAt result i) suffix := sorry
  
  /-
  info: expected1
  -/
  -- #guard_msgs in
  -- #eval to_goat_latin "I speak Goat Latin"
  
  /-
  info: expected2
  -/
  -- #guard_msgs in
  -- #eval to_goat_latin "The quick brown fox"
  
  /-
  info: expected3
  -/
  -- #guard_msgs in
  -- #eval to_goat_latin "Each word"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

