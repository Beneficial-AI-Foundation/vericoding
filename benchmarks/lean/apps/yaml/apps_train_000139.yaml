vc-description: |-
  /-
  The i-th person has weight people[i], and each boat can carry a maximum weight of limit.
  Each boat carries at most 2 people at the same time, provided the sum of the weight of those people is at most limit.
  Return the minimum number of boats to carry every given person.  (It is guaranteed each person can be carried by a boat.)
  
  Example 1:
  Input: people = [1,2], limit = 3
  Output: 1
  Explanation: 1 boat (1, 2)
  
  Example 2:
  Input: people = [3,2,2,1], limit = 3
  Output: 3
  Explanation: 3 boats (1, 2), (2) and (3)
  
  Example 3:
  Input: people = [3,5,3,4], limit = 5
  Output: 4
  Explanation: 4 boats (3), (3), (4), (5)
  Note:
  
  1 <= people.length <= 50000
  1 <= people[i] <= limit <= 30000
  -/

vc-preamble: |-
  def numRescueBoats (people : List Nat) (limit : Nat) : Nat :=
    sorry
  
  def listMax (l : List Nat) : Nat :=
    sorry
  
  def listMin (l : List Nat) : Nat :=
    sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def listSort (l : List Nat) : List Nat :=
    sorry

vc-theorems: |-
  theorem rescue_boats_minimum (people : List Nat) (h : people ≠ []) :
    let limit := listMax people
    numRescueBoats people limit ≥ (people.length + 1) / 2 := by
    sorry
  
  theorem rescue_boats_maximum (people : List Nat) (h : people ≠ []) :
    let limit := listMax people
    numRescueBoats people limit ≤ people.length := by
    sorry
  
  theorem rescue_boats_deterministic (people : List Nat) (h : people ≠ []) :
    let limit := listMax people
    numRescueBoats people limit = numRescueBoats people limit := by
    sorry
  
  theorem single_person_per_boat (weights : List Nat) (h : weights ≠ []) :
    let min_limit := listMin weights
    numRescueBoats weights min_limit = weights.length := by
    sorry
  
  theorem sorted_same_result (people : List Nat) (limit : Nat) 
      (h1 : people.length ≥ 2) (h2 : ∀ x ∈ people, x ≤ 100) (h3 : limit ≤ 100) :
    numRescueBoats people limit = numRescueBoats (listSort people) limit := by
    sorry
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval numRescueBoats [1, 2] 3
  
  /-
  info: 3
  -/
  -- #guard_msgs in
  -- #eval numRescueBoats [3, 2, 2, 1] 3
  
  /-
  info: 4
  -/
  -- #guard_msgs in
  -- #eval numRescueBoats [3, 5, 3, 4] 5

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

