vc-description: |-
  /-
  # Task
   When a candle finishes burning it leaves a leftover. makeNew leftovers can be combined to make a new candle, which, when burning down, will in turn leave another leftover.
  
   You have candlesNumber candles in your possession. What's the total number of candles you can burn, assuming that you create new candles as soon as you have enough leftovers?
  
  # Example
  
   For candlesNumber = 5 and makeNew = 2, the output should be `9`.
  
   Here is what you can do to burn 9 candles:
  ```
  burn 5 candles, obtain 5 leftovers;
  create 2 more candles, using 4 leftovers (1 leftover remains);
  burn 2 candles, end up with 3 leftovers;
  create another candle using 2 leftovers (1 leftover remains);
  burn the created candle, which gives another leftover (2 leftovers in total);
  create a candle from the remaining leftovers;
  burn the last candle.
  Thus, you can burn 5 + 2 + 1 + 1 = 9 candles, which is the answer.
  ```
  
  # Input/Output
  
   - `[input]` integer `candlesNumber`
  
      The number of candles you have in your possession.
  
      Constraints: 1 ≤ candlesNumber ≤ 50.
  
   - `[input]` integer `makeNew`
  
      The number of leftovers that you can use up to create a new candle.
  
      Constraints: 2 ≤ makeNew ≤ 5.
  
   - `[output]` an integer
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def candles (initialCandles : Nat) (makeNew : Nat) : Nat := sorry
  
  theorem candles_at_least_initial (initialCandles : Nat) (makeNew : Nat)
    (h1 : initialCandles ≥ 1) (h2 : makeNew ≥ 2) :
    candles initialCandles makeNew ≥ initialCandles := by sorry
  
  /- The candles_is_nat theorem is not needed since the return type is already Nat -/

vc-theorems: |-
  theorem candles_upper_bound (initialCandles : Nat) (makeNew : Nat)
    (h1 : initialCandles ≥ 1) (h2 : makeNew ≥ 2) :
    candles initialCandles makeNew ≤ initialCandles + (initialCandles - 1) / (makeNew - 1) := by sorry
  
  theorem candles_make_new_2 (initialCandles : Nat)
    (h : initialCandles ≥ 1) :
    candles initialCandles 2 = initialCandles * 2 - 1 := by sorry
  
  theorem candles_edge_case_min :
    candles 1 2 = 1 := by sorry
  
  theorem candles_no_new_possible (n m : Nat)
    (h1 : n ≥ 1) (h2 : m > n) :
    candles n m = n := by sorry
  
  /-
  info: 9
  -/
  -- #guard_msgs in
  -- #eval candles 5 2
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval candles 1 2
  
  /-
  info: 11
  -/
  -- #guard_msgs in
  -- #eval candles 8 3

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

