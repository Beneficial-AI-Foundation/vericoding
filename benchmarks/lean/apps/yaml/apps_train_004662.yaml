vc-description: |-
  /-
  Suzuki needs help lining up his students!
  
  Today Suzuki will be interviewing his students to ensure they are progressing in their training. He decided to schedule the interviews based on the length of the students name in descending order. The students will line up and wait for their turn.
  
  You will be given a string of student names. Sort them and return a list of names in descending order.
  
  Here is an example input:
  ```python
  string = 'Tadashi Takahiro Takao Takashi Takayuki Takehiko Takeo Takeshi Takeshi'
  ```
  Here is an example return from your function:
  
  ```python
   lst = ['Takehiko',
          'Takayuki',
          'Takahiro',
          'Takeshi',
          'Takeshi',
          'Takashi',
          'Tadashi',
          'Takeo',
          'Takao']
  ``` 
  
  Names of equal length will be returned in reverse alphabetical order (Z->A) such that:
  
  ```python
  string = "xxa xxb xxc xxd xa xb xc xd"
  
  ```
  Returns
  
  ```python
  ['xxd', 'xxc', 'xxb', 'xxa', 'xd', 'xc', 'xb', 'xa']
  
  ``` 
  Please also try the other Kata in this series..
  
  * [Help Suzuki count his vegetables...](https://www.codewars.com/kata/56ff1667cc08cacf4b00171b)
  * [Help Suzuki purchase his Tofu!](https://www.codewars.com/kata/57d4ecb8164a67b97c00003c)
  * [Help Suzuki pack his coal basket!](https://www.codewars.com/kata/57f09d0bcedb892791000255)
  * [Help Suzuki rake his garden!](https://www.codewars.com/kata/571c1e847beb0a8f8900153d)
  * [How many stairs will Suzuki climb in 20 years?](https://www.codewars.com/kata/56fc55cd1f5a93d68a001d4e)
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def lineup_students (input : String) : List String := sorry
  
  /-
    lineupStudentsLengthPreserved:
    For any list of students, the length of the output list
    equals the length of the input list
  -/

vc-theorems: |-
  theorem lineupStudentsLengthPreserved (input : String) (names : List String) :
    names = lineup_students input → 
    (lineup_students input).length = names.length := sorry
  
  /-
    lineupStudentsSorted:
    For any two adjacent elements in the result,
    if they have equal length then they are reverse alphabetically sorted,
    otherwise the first is longer than the second
  -/
  
  theorem lineupStudentsSorted {result : List String} (i : Nat) (h : i + 1 < result.length) :
    let a := result[i]!
    let b := result[i+1]!
    (a.length = b.length → a ≥ b) ∧
    (a.length ≠ b.length → a.length > b.length) := sorry 
  
  /-
    lineupStudentsPreservesElements:
    The output list contains exactly the same elements as the input
  -/
  
  theorem lineupStudentsPreservesElements (input : String) (names : List String) :
    names = lineup_students input → 
    ∀ x, (x ∈ names ↔ x ∈ lineup_students input) := sorry
  
  /-
    lineupStudentsSingleElement:
    A single name returns a singleton list with that name
  -/
  
  theorem lineupStudentsSingleElement (name : String) :
    lineup_students name = [name] := sorry
  
  /-
    lineupStudentsEmpty:
    An empty string input returns an empty list
  -/
  
  theorem lineupStudentsEmpty :
    lineup_students "" = [] := sorry
  
  /-
  info: expected1
  -/
  -- #guard_msgs in
  -- #eval lineup_students "Tadashi Takahiro Takao Takashi Takayuki Takehiko Takeo Takeshi Takeshi"
  
  /-
  info: expected2
  -/
  -- #guard_msgs in
  -- #eval lineup_students "xxa xxb xxc xxd xa xb xc xd"
  
  /-
  info: expected3
  -/
  -- #guard_msgs in
  -- #eval lineup_students "aaa bbb ccc"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

