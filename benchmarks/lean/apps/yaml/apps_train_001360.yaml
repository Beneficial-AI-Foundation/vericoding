vc-description: |-
  /-
  Motu and Patlu are racing against each other on a circular track of radius $R$. Initially they are at the same point on the track and will run in same direction .The coach ordered them to run $X$ rounds of the circular field. Patlu wants to know how many times they will meet after the race starts and  before any of them finishes $X$ rounds. But he is busy in warm up so he wants you to calculate this. You are given speed of both Motu and Patlu ($A$ and $B$). 
  
  -----Input:-----
  - First line will contain $T$, number of testcases. Then the testcases follow. 
  - Each testcase contains of a single line of input, four integers $X, R, A, B$. 
  
  -----Output:-----
  For each testcase, output in a single line answer the number of times whey will meet before any of them completes $X$ rounds.
  
  -----Constraints-----
  - $1 \leq T \leq 1000$
  - $1 \leq R \leq 10^9$
  - $1 \leq X \leq 10^9$
  - $1 \leq A \leq 10^9$
  - $1 \leq B \leq 10^9$
  - Speed of both are different
  
  -----Sample Input:-----
  2
  3 10 2 5
  2 20 5 10
  
  -----Sample Output:-----
  1
  0
  -/

vc-preamble: |-
  def solve_race_encounters (x : Int) (r speed1 speed2 : Float) : Int :=
    sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def abs (x : Float) : Float :=
    sorry

vc-theorems: |-
  theorem race_encounters_non_negative
    (x : Int) (r speed1 speed2 : Float)
    (h1 : x > 0)
    (h2 : r > 0)
    (h3 : speed1 > 0)
    (h4 : speed2 > 0) 
    (h5 : Float.abs (speed1 - speed2) > 0.0001) :
    solve_race_encounters x r speed1 speed2 â‰¥ -1 :=
  sorry
  
  theorem race_encounters_less_than_laps
    (x : Int) (r speed1 speed2 : Float)
    (h1 : x > 0)
    (h2 : r > 0)
    (h3 : speed1 > 0)
    (h4 : speed2 > 0)
    (h5 : Float.abs (speed1 - speed2) > 0.0001) :
    solve_race_encounters x r speed1 speed2 < x :=
  sorry
  
  theorem race_encounters_speed_symmetry
    (x : Int) (r speed1 speed2 : Float)
    (h1 : x > 0)
    (h2 : r > 0)
    (h3 : speed1 > 0)
    (h4 : speed2 > 0)
    (h5 : Float.abs (speed1 - speed2) > 0.0001) :
    solve_race_encounters x r speed1 speed2 = solve_race_encounters x r speed2 speed1 :=
  sorry
  
  theorem race_encounters_speed_scaling
    (x : Int) (r speed1 speed2 : Float)
    (h1 : x > 0)
    (h2 : r > 0)
    (h3 : speed1 > 0)
    (h4 : speed2 > 0)
    (h5 : Float.abs (speed1 - speed2) > 0.0001) :
    solve_race_encounters x r speed1 speed2 = solve_race_encounters x r (2 * speed1) (2 * speed2) :=
  sorry
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval solve_race_encounters 3 10 2 5
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval solve_race_encounters 2 20 5 10
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval solve_race_encounters 4 15 3 6

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

