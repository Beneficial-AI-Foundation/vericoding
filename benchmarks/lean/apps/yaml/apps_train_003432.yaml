vc-description: |-
  /-
  In this kata, we want to discover a small property of numbers. 
  We say that a number is a **dd** number if it contains d occurences of a digit d, (d is in [1,9]).
  
  ## Examples
  
  * 664444309 is a **dd** number, as it contains 4 occurences of the number 4
  * 30313, 122 are **dd** numbers as they respectively contain 3 occurences of the number 3, and (1 occurence of the number 1 AND 2 occurences of the number 2)
  * 123109, 0, 56542 are not **dd** numbers
  
  ## Task 
  
  Your task is to implement a function called `is_dd` (`isDd` in javascript) that takes a **positive** number (type depends on the language) and returns a boolean corresponding to whether the number is a **dd** number or not.
  -/

vc-preamble: |-
  def is_dd (n : Nat) : Bool := sorry 
  
  def countDigit (n : Nat) (d : Nat) : Nat := sorry

vc-helpers: |-

vc-definitions: |-
  def digits (n : Nat) : List Nat := sorry 
  
  theorem dd_characterization (n : Nat) :
    is_dd n = (∃ d : Nat, 1 ≤ d ∧ d ≤ 9 ∧ countDigit n d = d) := sorry

vc-theorems: |-
  theorem zero_not_counted (n : Nat) :
    (∀ d : Nat, d ≠ 0 → countDigit n d ≠ d) → 
    is_dd n = false := sorry
  
  theorem count_digit_bounds (n d : Nat) :
    countDigit n d ≤ (digits n).length := sorry
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval is_dd 664444309
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval is_dd 122
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval is_dd 30313
  
  /-
  info: False
  -/
  -- #guard_msgs in
  -- #eval is_dd 5023011

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

