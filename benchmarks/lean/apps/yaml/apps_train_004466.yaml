vc-description: |-
  /-
  In this kata, we will check is an array is (hyper)rectangular.  
  A rectangular array is an N-dimensional array with fixed sized within one dimension. Its sizes can be repsented like A1xA2xA3...xAN. That means a N-dimensional array has N sizes. The 'As' are the hyperrectangular properties of an array.
  
  You should implement a functions that returns a N-tuple with the arrays hyperrectangular properties or None if the array is not hyperrectangular.
  ```
  hyperrectangularity_properties(arr)
  ```
  ## Note
  An empty array IS rectagular and has one dimension of length 0
  ```
  hyperrectangularity_properties([]) == (0,)
  ```
  ## Example
  ```
  1D array
  hyperrectangularity_properties([1,2,3]) == (3,)
  
  2D arrays  
  
  hyperrectangularity_properties(
                                  [[0,1,2],
                                   [3,4,5],           
                                   [6,7,8]] ) == (3,3)                              
  hyperrectangularity_properties(
                                  [[0,1,2],
                                   [3,4,5]] ) == (2,3)
  hyperrectangularity_properties( 
                                  [[0,1,2],
                                   [3,4]  ] ) == None
  3D arrays  
  hyperrectangularity_properties(  
                                  [
                                   [ [0], [2] ],
                                   [ [0], [2] ],  
                                   [ [0], [2] ]
                                                ] ) == (3,2,1)    
  hyperrectangularity_properties(  
                                  [
                                     [[0],[2]],
                                     [[0],[2,2]],   
                                     [[0],[2]]
                                                ] )  ==  None 
  hyperrectangularity_properties(
                                  [[ [], [], [] ]]
                                                  ) ==  (1,3,0) 
  ```
  ### Heterogeneous Arrays can appear too
  ```
  hyperrectangularity_properties(      
                                  [[0,1,2],
                                   3,   
                                   [[4],5,6]] ) ==  None
  hyperrectangularity_properties(      
                                  [1,
                                   [1,2],   
                                   [[3],[4,[5]],[6]]
                                                    ] ) ==  None
                                                    hyperrectangularity_properties(
                                  [[ [], [] ], [] ]
                                                    ) ==  None
  hyperrectangularity_properties(
                                  [ 1, [], [2, [3]] ]
                                                    ) ==  None
  ```
  The first property shows the length of the outer layer. The second of the layer one step deeper and so on. The function should handle higher dimensions too.
  
  ## Input
  ##### N-dimensional array of integers
  
  ## Expected Ouput
  ##### An N-tuple with the hyperrectangularity properties
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def hyperrectangularity_properties : List α → Option (List Nat) := sorry
  
  theorem hyperrectangularity_2d_rectangular {rows cols : Nat} 
    (h1 : 0 < rows) (h2 : rows ≤ 5)
    (h3 : 0 < cols) (h4 : cols ≤ 5)
    (arr : List (List Nat)) 
    (h5 : arr = List.map (fun j => List.map (fun i => i + j*cols) (List.range cols)) (List.range rows))
    : hyperrectangularity_properties arr = some [rows, cols] := sorry

vc-theorems: |-
  theorem hyperrectangularity_1d {arr : List α}
    : hyperrectangularity_properties arr = 
      if arr.isEmpty then some [0] else some [arr.length] := sorry
  
  theorem hyperrectangularity_3d {x y z : Nat}
    (h1 : 0 < x) (h2 : x ≤ 3)
    (h3 : 0 < y) (h4 : y ≤ 3)  
    (h5 : 0 < z) (h6 : z ≤ 3)
    (arr : List (List (List Nat)))
    (h7 : arr = List.map (fun i => 
            List.map (fun j =>
              List.map (fun k => k + j*z + i*y*z) (List.range z)) 
            (List.range y))
          (List.range x))
    : hyperrectangularity_properties arr = some [x, y, z] := sorry
  
  theorem hyperrectangularity_empty 
    : hyperrectangularity_properties ([] : List α) = some [0] := sorry
  
  theorem hyperrectangularity_non_rectangular
    (arr : List (List Nat))
    (h : arr = [[1,2], [1]])
    : hyperrectangularity_properties arr = none := sorry
  
  /-
  info: (0,)
  -/
  -- #guard_msgs in
  -- #eval hyperrectangularity_properties []
  
  /-
  info: (3, 3)
  -/
  -- #guard_msgs in
  -- #eval hyperrectangularity_properties [[0, 1, 2], [3, 4, 5], [6, 7, 8]]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

