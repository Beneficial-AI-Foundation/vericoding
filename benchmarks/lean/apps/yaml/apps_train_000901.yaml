vc-description: |-
  /-
  Mohit(Ex GenSec ) is the most active member of the roasting club who loves giving tasks to other members. One day he observed that none of the members were paying attention to the online classes, so he decided to have some fun and overcome the boring lectures. He wrote N numbers on the virtual board (where the first number is 1, the last one is N and the ith number being i).
  Then he asked M questions to every other member of the club. In each question, a number K was given by Mohit and the members had to give a single integer as an answer which will be the sum of all numbers present on the whiteboard.
  There are some conditions that every member has to follow while answering.
  - If K is already present on the whiteboard then swap the first and last number.
  - Otherwise, replace the last number with K.
  
  -----Input:-----
  - First-line will consist of space-separated integers N and M. The board will contain the list of numbers from 1 to N and M is the number of questions that Mohit will ask.
  - Next M lines contain the number Ki, which will be provided by Mohit and (1<=i<=M).
  
  -----Output:-----
  For each question, report the sum of all integers present
  
  -----Constraints-----
  - $1 \leq N,M \leq 1000000$
  - $2 \leq K \leq 10^9$
  
  -----Sample Input:-----
  5 4
  7
  12 
  10 
  1  
  
  -----Sample Output:-----
  17
  22  
  20
  20
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def solve_roasting_club (n : Nat) (qlen : Nat) (queries : List Nat) : List Nat := sorry
  
  def list_minimum (l : List Nat) : Nat := 
    match l with
    | [] => 0  
    | x::xs => xs.foldl min x

vc-theorems: |-
  theorem roasting_club_properties 
    (n : Nat)
    (queries : List Nat)
    (h1 : n ≥ 2)
    (h2 : n ≤ 100) 
    (h3 : queries.length ≥ 1)
    (h4 : queries.length ≤ 10)
    (h5 : ∀ q ∈ queries, q ≥ 1 ∧ q ≤ 1000) :
    let result := solve_roasting_club n queries.length queries
    -- Results match length of queries
    (result.length = queries.length) ∧ 
    -- All results are positive
    (∀ x ∈ result, x > 0) ∧
    -- Each result includes first and last numbers
    (let first_last_min := 1 + min n (list_minimum queries)
     ∀ x ∈ result, x ≥ first_last_min) := 
  sorry
  
  theorem single_query_properties
    (n : Nat)
    (k : Nat)
    (h1 : n ≥ 2)
    (h2 : n ≤ 100)
    (h3 : k ≥ 1)
    (h4 : k ≤ 1000) :
    let result := solve_roasting_club n 1 [k]
    -- Single query returns single result
    (result.length = 1) ∧
    -- Result is positive
    (∀ x ∈ result, x > 0) :=
  sorry
  
  /-
  info: [17, 22, 20, 20]
  -/
  -- #guard_msgs in
  -- #eval solve_roasting_club 5 4 [7, 12, 10, 1]
  
  /-
  info: [7, 7]
  -/
  -- #guard_msgs in
  -- #eval solve_roasting_club 3 2 [4, 2]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

