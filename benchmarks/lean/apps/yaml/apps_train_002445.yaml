vc-description: |-
  /-
  =====Function Descriptions=====
  In Python, a string of text can be aligned left, right and center.
  
  .ljust(width)
  
  This method returns a left aligned string of length width.
  
  >>> width = 20
  >>> print 'HackerRank'.ljust(width,'-')
  HackerRank----------  
  
  .center(width)
  
  This method returns a centered string of length width.
  
  >>> width = 20
  >>> print 'HackerRank'.center(width,'-')
  -----HackerRank-----
  
  .rjust(width)
  
  This method returns a right aligned string of length width.
  
  >>> width = 20
  >>> print 'HackerRank'.rjust(width,'-')
  ----------HackerRank
  
  =====Problem Statement=====
  You are given a partial code that is used for generating the HackerRank Logo of variable thickness.
  Your task is to replace the blank (______) with rjust, ljust or center.
  
  =====Input Format=====
  A single line containing the thickness value for the logo.
  
  =====Constraints=====
  The thickness must be an odd number.
  0 < thickness < 50
  
  =====Output Format=====
  Output the desired logo.
  -/

vc-preamble: |-
  def generateLogo (thickness : Nat) : String := sorry
  
  def countChar (s : String) (c : Char) : Nat :=
    s.data.filter (· = c) |>.length
  
  def splitLines (s : String) : List String :=
    s.splitOn "\n"

vc-helpers: |-

vc-definitions: |-
  def makeHString (n : Nat) : String :=
    String.mk (List.replicate n 'H')

vc-theorems: |-
  theorem logo_lines_count (thickness : Nat) (h : thickness > 0) :
    let result := generateLogo thickness
    let lines := splitLines result
    lines.length = thickness + (thickness + 1) + ((thickness + 1)/2) + (thickness + 1) + thickness :=
  sorry
  
  theorem logo_valid_chars (thickness : Nat) (h : thickness > 0) :
    let result := generateLogo thickness
    let lines := splitLines result
    ∀ line ∈ lines, ∀ c ∈ line.data, c = 'H' ∨ c = ' ' :=
  sorry
  
  theorem logo_first_last_line_H_count (thickness : Nat) (h : thickness > 0) :
    let result := generateLogo thickness
    let lines := splitLines result
    (countChar lines[0]! 'H' = 1) ∧
    (countChar lines[lines.length - 1]! 'H' = 1) :=
  sorry
  
  theorem logo_middle_section_solid (thickness : Nat) (h : thickness > 0) :
    let result := generateLogo thickness
    let lines := splitLines result
    let middleStart := thickness + (thickness + 1)
    let middleSection := lines.drop middleStart |>.take ((thickness + 1)/2)
    ∀ line ∈ middleSection, ∀ i ∈ line.data.take (5 * thickness), i = 'H' :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

