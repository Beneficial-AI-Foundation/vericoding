vc-description: |-
  /-
  A subsequence of a string S is a string that can be obtained by deleting zero or more characters from S without changing the order of the remaining characters.
  For example, arc, artistic and (an empty string) are all subsequences of artistic; abc and ci are not.
  You are given a string A consisting of lowercase English letters.
  Find the shortest string among the strings consisting of lowercase English letters that are not subsequences of A.
  If there are more than one such string, find the lexicographically smallest one among them.
  
  -----Constraints-----
   - 1 \leq |A| \leq 2 \times 10^5
   - A consists of lowercase English letters.
  
  -----Input-----
  Input is given from Standard Input in the following format:
  A
  
  -----Output-----
  Print the lexicographically smallest string among the shortest strings consisting of lowercase English letters that are not subsequences of A.
  
  -----Sample Input-----
  atcoderregularcontest
  
  -----Sample Output-----
  b
  
  The string atcoderregularcontest contains a as a subsequence, but not b.
  -/

vc-preamble: |-
  def find_shortest_non_subsequence (s : String) : String :=
    sorry
  
  def is_subsequence (needle haystack : String) : Bool :=
    sorry
  
  def generate_strings (length : Nat) : List String :=
    sorry
  
  def all_chars_in_range (s : String) : Bool :=
    sorry

vc-helpers: |-

vc-definitions: |-
  def all_lower (s : String) : Bool :=
    sorry

vc-theorems: |-
  theorem result_is_valid_string (s : String) :
    let result := find_shortest_non_subsequence s
    (result.length > 0) ∧ (all_lower result) := by
    sorry
  
  theorem result_is_minimal (s : String) :
    let result := find_shortest_non_subsequence s
    ∀ n : Nat, n < result.length → 
    ∀ possible : String, possible.length = n →
    is_subsequence possible s := by
    sorry
  
  theorem result_for_all_letters {s : String} :
    s.length = 26 →
    (∀ c : Char, c.isLower → s.contains c) → 
    find_shortest_non_subsequence s = "aa" := by
    sorry
  
  /-
  info: 'b'
  -/
  -- #guard_msgs in
  -- #eval find_shortest_non_subsequence "atcoderregularcontest"
  
  /-
  info: 'aa'
  -/
  -- #guard_msgs in
  -- #eval find_shortest_non_subsequence "abcdefghijklmnopqrstuvwxyz"
  
  /-
  info: 'aca'
  -/
  -- #guard_msgs in
  -- #eval find_shortest_non_subsequence "frqnvhydscshfcgdemurlfrutcpzhopfotpifgepnqjxupnskapziurswqazdwnwbgdhyktfyhqqxpoidfhjdakoxraiedxskywuepzfniuyskxiyjpjlxuqnfgmnjcvtlpnclfkpervxmdbvrbrdn"

vc-postamble: |-
  -- Apps difficulty: competition
  -- Assurance level: unguarded

