vc-description: |-
  /-
  *Based on this Numberphile video: https://www.youtube.com/watch?v=Wim9WJeDTHQ*
  
  ---
  
  Multiply all the digits of a nonnegative integer `n` by each other, repeating with the product until a single digit is obtained. The number of steps required is known as the **multiplicative persistence**.
  
  Create a function that calculates the individual results of each step, not including the original number, but including the single digit, and outputs the result as a list/array. If the input is a single digit, return an empty list/array.
  
  ## Examples
  ```
  per(1)  = []
  
  per(10) = [0]
  // 1*0 = 0
  
  per(69) = [54, 20, 0]
  // 6*9 = 54 --> 5*4 = 20 --> 2*0 = 0
  
  per(277777788888899) = [4996238671872, 438939648, 4478976, 338688, 27648, 2688, 768, 336, 54, 20, 0]
  // 2*7*7*7*7*7*7*8*8*8*8*8*8*9*9 = 4996238671872 --> 4*9*9*6*2*3*8*6*7*1*8*7*2 = 4478976 --> ...
  ```
  -/

vc-preamble: |-
  def per (n : Nat) : List Nat := sorry
  
  def productOfDigits (n : Nat) : Nat := sorry

vc-helpers: |-

vc-definitions: |-
  def digitsOfNat (n : Nat) : List Nat := sorry
  
  theorem per_empty_for_single_digit (n : Nat) : 
    n < 10 → per n = [] := sorry

vc-theorems: |-
  theorem per_decreasing {n : Nat} {result : List Nat} :
    result = per n →
    ∀ i, ∀ h : i < result.length - 1,
    result.get ⟨i, sorry⟩ ≥ result.get ⟨i+1, sorry⟩ := sorry
  
  theorem per_bounded_length (n : Nat) :
    (per n).length ≤ 100 := sorry
  
  /-
  info: []
  -/
  -- #guard_msgs in
  -- #eval per 1
  
  /-
  info: [54, 20, 0]
  -/
  -- #guard_msgs in
  -- #eval per 69
  
  /-
  info: [4996238671872, 438939648, 4478976, 338688, 27648, 2688, 768, 336, 54, 20, 0]
  -/
  -- #guard_msgs in
  -- #eval per 277777788888899

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

