vc-description: |-
  /-
  Yup!! The problem name reflects your task; just add a set of numbers. But you may feel yourselves condescended, to write a C/C++ program just to add a set of numbers. Such a problem will simply question your erudition. So, lets add some flavor of ingenuity to it. Addition operation requires cost now, and the cost is the summation of those two to be added. So,to add 1 and 10, you need a cost of 11. If you want to add 1, 2 and 3. There are several ways
  
  ```c++
  1 + 2 = 3, cost = 3,
  3 + 3 = 6, cost = 6,
  Total = 9.
  ```
  ```c++
  1 + 3 = 4, cost = 4,
  2 + 4 = 6, cost = 6,
  Total = 10.
  ```
  ```c++
  2 + 3 = 5, cost = 5,
  1 + 5 = 6, cost = 6,
  Total = 11.
  ```
  I hope you have understood already your mission, to add a set of integers so that the cost is minimal
  
  # Your Task 
  Given a vector of integers, return the minimum total cost of addition.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def add_all (lst: List Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem add_all_non_negative (lst: List Nat) (h: lst ≠ []) :
    add_all lst ≥ 0 :=
    sorry
  
  theorem add_all_preserves_input (lst: List Nat) (h: lst ≠ []) :
    let lst' := lst
    add_all lst = add_all lst' ∧ lst = lst' :=
    sorry
  
  theorem add_all_larger_than_pairwise (lst: List Nat) (h: lst.length ≥ 2) :
    ∀ i j, i < j → j < lst.length →
      add_all lst ≥ lst[i]! + lst[j]! :=
    sorry
  
  theorem add_all_singleton (lst: List Nat) (h: lst.length = 1) :
    add_all lst = 0 :=
    sorry
  
  /-
  info: 9
  -/
  -- #guard_msgs in
  -- #eval add_all [1, 2, 3]
  
  /-
  info: 19
  -/
  -- #guard_msgs in
  -- #eval add_all [1, 2, 3, 4]
  
  /-
  info: 33
  -/
  -- #guard_msgs in
  -- #eval add_all [1, 2, 3, 4, 5]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

