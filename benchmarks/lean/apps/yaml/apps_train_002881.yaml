vc-description: |-
  /-
  Take an integer `n (n >= 0)` and a digit `d (0 <= d <= 9)` as an integer. Square all numbers `k (0 <= k <= n)` between 0 and n. Count the numbers of 
  digits `d` used in the writing of all the `k**2`. Call `nb_dig` (or nbDig or ...) the function taking `n` and `d` as parameters and returning this count.
  
  #Examples:
  ```
  n = 10, d = 1, the k*k are 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100
  We are using the digit 1 in 1, 16, 81, 100. The total count is then 4.
  
  nb_dig(25, 1):
  the numbers of interest are
  1, 4, 9, 10, 11, 12, 13, 14, 19, 21 which squared are 1, 16, 81, 100, 121, 144, 169, 196, 361, 441
  so there are 11 digits `1` for the squares of numbers between 0 and 25.
  ```
  Note that `121` has twice the digit `1`.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def nb_dig (n : Nat) (d : Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem nb_dig_properties (n : Nat) (d : Nat) (h1 : n ≤ 10000) (h2 : d ≤ 9) :
    nb_dig n d ≥ 0 ∧ 
    nb_dig n d ≤ (n + 1) * (String.length (toString (n * n))) :=
    sorry
  
  theorem nb_dig_zero_digit (n : Nat) (h : n ≤ 1000) :
    let squares := (List.range (n + 1)).map (fun i => i * i)
    let countZeroes := fun num => (toString num).data.filter (fun c => c = '0') |>.length
    let totalZeroes := squares.foldl (fun acc x => acc + countZeroes x) 0
    nb_dig n 0 = totalZeroes :=
    sorry
  
  theorem nb_dig_manual_count (n : Nat) (d : Nat) (h1 : n ≤ 100) (h2 : d ≤ 9) :
    let squares := (List.range (n + 1)).map (fun i => i * i)
    let countDigit := fun num => (toString num).data.filter (· = (toString d).get! 0) |>.length
    let totalCount := squares.foldl (fun acc x => acc + countDigit x) 0
    nb_dig n d = totalCount :=
    sorry
  
  theorem nb_dig_edge_cases :
    nb_dig 0 1 = 0 ∧
    nb_dig 0 0 = 1 :=
    sorry
  
  /-
  info: 4
  -/
  -- #guard_msgs in
  -- #eval nb_dig 10 1
  
  /-
  info: 11
  -/
  -- #guard_msgs in
  -- #eval nb_dig 25 1
  
  /-
  info: 4700
  -/
  -- #guard_msgs in
  -- #eval nb_dig 5750 0

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

