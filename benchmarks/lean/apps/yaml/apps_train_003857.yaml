vc-description: |-
  /-
  # Task
   Mr.Nam has `n` candies, he wants to put one candy in each cell of a table-box. The table-box has `r` rows and `c` columns.
  
   Each candy was labeled by its cell number. The cell numbers are in range from 1 to N and the direction begins from right to left and from bottom to top.
  
   Nam wants to know the position of a specific `candy` and which box is holding it.
  
   The result should be an array and contain exactly 3 elements. The first element is the `label` of the table; The second element is the `row` of the candy; The third element is the `column` of the candy.
  
   If there is no candy with the given number, return `[-1, -1, -1]`.
  
   Note: 
  
   When the current box is filled up, Nam buys another one. 
  
   The boxes are labeled from `1`.
  
   Rows and columns are `0`-based numbered from left to right and from top to bottom.
  
  # Example
  
   For `n=6,r=2,c=2,candy=3`, the result should be `[1,0,1]`
  
   the candies will be allocated like this:
  ```
  Box 1
  +-----+-----+
  |  4  | (3) | --> box 1,row 0, col 1
  +-----+-----+
  |  2  |  1  |
  +-----+-----+
  Box 2
  +-----+-----+
  |  x  |  x  |
  +-----+-----+
  |  6  | (5) | --> box 2,row 1, col 1
  +-----+-----+```
   For `candy = 5(n,r,c same as above)`, the output should be `[2,1,1]`.
  
   For `candy = 7(n,r,c same as above)`, the output should be `[-1,-1,-1]`.
  
   For `n=8,r=4,c=2,candy=3`, the result should be `[1,2,1]` 
  ```
  Box 1
  +-----+-----+
  |  8  |  7  |
  +-----+-----+
  |  6  |  5  |
  +-----+-----+
  |  4  | (3) |--> box 1,row 2, col 1
  +-----+-----+
  |  2  |  1  |
  +-----+-----+
  ```
  
  # Input/Output
  
   - `[input]` integer `n`
  
    The number of candies. 
  
    `0 < n <= 100`
  
   - `[input]` integer `r`
  
    The number of rows. 
  
    `0 < r <= 100`
  
   - `[input]` integer `c`
  
   The number of columns.
  
   `0 < c <= 100`
  
   - `[input]` integer `candy`
  
   The label of the candy Nam wants to get position of.
  
   `0 < c <= 120`
  
   - `[output]` an integer array
  
    Array of 3 elements: a label, a row and a column.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def get_candy_position (n r c candy : Nat) : Array Int :=
    sorry

vc-theorems: |-
  theorem candy_position_returns_three_elements {n r c candy : Nat} :
    let result := get_candy_position n r c candy
    result.size = 3 := by sorry
  
  theorem candy_beyond_n_returns_negative_ones {n r c candy : Nat} :
    candy > n →
    get_candy_position n r c candy = #[-1, -1, -1] := by sorry
  
  theorem position_coordinates_within_bounds {n r c candy : Nat} :
    candy ≤ n →
    let result := get_candy_position n r c candy
    let level := result[0]!
    let row := result[1]!
    let col := result[2]!
    (level ≠ -1 →
     (1 ≤ level ∧ level ≤ (n / (r * c)) + 1) ∧
     (0 ≤ row ∧ row < r) ∧
     (0 ≤ col ∧ col < c)) := by sorry
  
  theorem first_candy_at_bottom_right {r c : Nat} (hr : r > 0) (hc : c > 0) :
    get_candy_position 1 r c 1 = #[1, Int.ofNat (r-1), Int.ofNat (c-1)] := by sorry
  
  theorem last_candy_level_one_if_fits {n r c : Nat} (hr : r > 0) (hc : c > 0) :
    n ≤ r * c →
    (get_candy_position n r c n)[0]! = 1 := by sorry
  
  /-
  info: [1, 0, 1]
  -/
  -- #guard_msgs in
  -- #eval get_candy_position 6 2 2 3
  
  /-
  info: [2, 1, 1]
  -/
  -- #guard_msgs in
  -- #eval get_candy_position 6 2 2 5
  
  /-
  info: [-1, -1, -1]
  -/
  -- #guard_msgs in
  -- #eval get_candy_position 6 2 2 7

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

