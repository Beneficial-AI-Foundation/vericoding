vc-description: |-
  /-
  Your music player contains N different songs and she wants to listen to L (not necessarily different) songs during your trip.  You create a playlist so that:
  
  Every song is played at least once
  A song can only be played again only if K other songs have been played
  
  Return the number of possible playlists.  As the answer can be very large, return it modulo 10^9 + 7.
  
  Example 1:
  Input: N = 3, L = 3, K = 1
  Output: 6
  Explanation: There are 6 possible playlists. [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1].
  
  Example 2:
  Input: N = 2, L = 3, K = 0
  Output: 6
  Explanation: There are 6 possible playlists. [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], [1, 2, 2]
  
  Example 3:
  Input: N = 2, L = 3, K = 1
  Output: 2
  Explanation: There are 2 possible playlists. [1, 2, 1], [2, 1, 2]
  
  Note:
  
  0 <= K < N <= L <= 100
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def num_music_playlists (N L K : Nat) : Nat := sorry
  
  theorem playlists_bounds (N L K : Nat) 
    (h1: N > 0) 
    (h2: L ≥ N) 
    (h3: K < N) :
    let result := num_music_playlists N L K
    0 ≤ result ∧ result < (10^9 + 7) := sorry

vc-theorems: |-
  theorem playlists_k_eq_n_minus_one (N L K : Nat)
    (h1: N > 0)
    (h2: L ≥ N)
    (h3: K = N - 1) :
    num_music_playlists N L K > 0 := sorry
  
  theorem playlists_trivial_cases_one_song :
    num_music_playlists 1 1 0 = 1 := sorry
  
  theorem playlists_impossible_cases_one :
    num_music_playlists 1 2 1 = 0 := sorry 
  
  theorem playlists_impossible_cases_two :
    num_music_playlists 2 4 2 = 0 := sorry
  
  /-
  info: 6
  -/
  -- #guard_msgs in
  -- #eval num_music_playlists 3 3 1
  
  /-
  info: 6
  -/
  -- #guard_msgs in
  -- #eval num_music_playlists 2 3 0
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval num_music_playlists 2 3 1

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible

