vc-description: |-
  /-
  Complete the function that takes an array of words.
  
  You must concatenate the `n`th letter from each word to construct a new word which should be returned as a string, where `n` is the position of the word in the list.
  
  For example:
  
  ```
  ["yoda", "best", "has"]  -->  "yes"
    ^        ^        ^
    n=0     n=1     n=2
  ```
  
  **Note:** Test cases contain valid input only - i.e. a string array or an empty array; and each word will have enough letters.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def nth_char (words : List String) : String := sorry
  
  theorem nth_char_output_length (words : List String) :
    words.all (fun w => w.length ≥ 10) →
    (nth_char words).length = words.length := sorry

vc-theorems: |-
  theorem nth_char_chars_from_word_at_index (words : List String) (i : Fin words.length) :
    words ≠ [] →
    words.all (fun w => w.length ≥ 10) →
    (nth_char words).data.get? i.val = (words.get i).data.get? i.val := sorry
  
  theorem nth_char_empty_list :
    nth_char [] = "" := sorry
  
  /-
  info: 'yes'
  -/
  -- #guard_msgs in
  -- #eval nth_char ["yoda", "best", "has"]
  
  /-
  info: ''
  -/
  -- #guard_msgs in
  -- #eval nth_char []
  
  /-
  info: 'Codewars'
  -/
  -- #guard_msgs in
  -- #eval nth_char ["Chad", "Morocco", "India", "Algeria", "Botswana", "Bahamas", "Ecuador", "Micronesia"]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

