vc-description: |-
  /-
  Write function avg which calculates average of numbers in given list.
  -/

vc-preamble: |-
  def find_average (numbers : List Float) : Float := sorry
  
  def sum (l : List Float) : Float := sorry
  
  def minimum? (l : List Float) : Option Float := sorry
  
  def maximum? (l : List Float) : Option Float := sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def sumInt (l : List Int) : Int := sorry
  
  theorem integer_list_average (numbers : List Int) :
    find_average (numbers.map Float.ofInt) = 
      match numbers with
      | [] => 0
      | _  => Float.ofInt (sumInt numbers) / Float.ofInt numbers.length := sorry

vc-theorems: |-
  theorem empty_list_average :
    find_average [] = 0 := sorry
  
  theorem average_between_min_max (numbers : List Float) (h : numbers ≠ []) : 
    match minimum? numbers, maximum? numbers with
    | some min, some max => min ≤ find_average numbers ∧ find_average numbers ≤ max
    | _, _ => True := sorry
  
  theorem average_times_length_equals_sum (numbers : List Float) : 
    match numbers with
    | [] => find_average numbers = 0
    | _  => find_average numbers * (Float.ofNat numbers.length) = sum numbers := sorry
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval find_average [1, 2, 3]
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval find_average []
  
  /-
  info: 2.5
  -/
  -- #guard_msgs in
  -- #eval find_average [1.5, 2.5, 3.5]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

