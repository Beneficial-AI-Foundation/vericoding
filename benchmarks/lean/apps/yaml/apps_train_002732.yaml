vc-description: |-
  /-
  Given two arrays, the purpose of this Kata is to check if these two arrays are the same. "The same" in this Kata means the two arrays contains arrays of 2 numbers which are same and not necessarily sorted the same way. i.e. [[2,5], [3,6]] is same as [[5,2], [3,6]] or [[6,3], [5,2]] or [[6,3], [2,5]] etc
  
  [[2,5], [3,6]] is NOT the same as [[2,3], [5,6]]
  Two empty arrays [] are the same
  [[2,5], [5,2]] is the same as [[2,5], [2,5]] but NOT the same as [[2,5]]
  [[2,5], [3,5], [6,2]] is the same as [[2,6], [5,3], [2,5]] or [[3,5], [6,2], [5,2]], etc
  An array can be empty or contain a minimun of one array of 2 integers and up to 100 array of 2 integers 
  
  Note:
  1. [[]] is not applicable because if the array of array are to contain anything, there have to be two numbers.
  2. 100 randomly generated tests that can contains either "same" or "not same" arrays.
  -/

vc-preamble: |-
  def List.sort (l : List α) : List α :=
    sorry

vc-helpers: |-

vc-definitions: |-
  def same (a b : List (List Int)) : Bool := 
    sorry

vc-theorems: |-
  theorem same_reflexive (arr : List (List Int)) : same arr arr = true := by 
    sorry
  
  theorem same_symmetric (arr_a arr_b : List (List Int)) : 
    (List.map List.sort arr_a).sort = (List.map List.sort arr_b).sort →
    same arr_a arr_b = true ∧ same arr_b arr_a = true := by
    sorry
  
  theorem same_single_array (nums : List Int) :
    same [nums] [nums.reverse] = true := by
    sorry
  
  theorem same_order_invariant (arr_a arr_b : List (List Int)) :
    (List.map List.sort arr_a).sort = (List.map List.sort arr_b).sort →
    same arr_a arr_b = true := by
    sorry
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval same [[2, 5], [3, 6]] [[5, 2], [3, 6]]
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval same [] []
  
  /-
  info: False
  -/
  -- #guard_msgs in
  -- #eval same [[2, 3], [3, 2]] [[2, 3]]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

