vc-description: |-
  /-
  The chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.
  
  -----Input:-----
  - First-line will contain $T$, the number of test cases. Then the test cases follow. 
  - Each test case contains a single line of input, one integer $K$. 
  
  -----Output:-----
  For each test case, output as the pattern.
  
  -----Constraints-----
  - $1 \leq T \leq 100$
  - $1 \leq K \leq 100$
  
  -----Sample Input:-----
  4
  1
  2
  3
  4
  
  -----Sample Output:-----
  1 
  1 10 
  11 100 
  1 10 11 
  100 101 110 
  111 1000 1001 
  1 10 11 100 
  101 110 111 1000 
  1001 1010 1011 1100 
  1101 1110 1111 10000 
  
  -----EXPLANATION:-----
  No need, else pattern can be decode easily.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def generate_binary_pattern (k : Nat) : List (List String) := sorry
  
  theorem pattern_length (k : Nat) (h : 0 < k) (h2 : k ≤ 10) :
    let result := generate_binary_pattern k
    (result.length = k) ∧ 
    (∀ row ∈ result, (row.length = k)) := sorry

vc-theorems: |-
  theorem all_binary_strings (k : Nat) (h : 0 < k) (h2 : k ≤ 10) :
    let result := generate_binary_pattern k
    ∀ row ∈ result,
      ∀ num ∈ row,
        (∀ c ∈ num.data, c = '0' ∨ c = '1') ∧
        (num.data ≠ [] → List.head! num.data = '1') := sorry
  
  theorem increasing_values (k : Nat) (h : 0 < k) (h2 : k ≤ 10) :
    let result := generate_binary_pattern k
    ∀ row ∈ result,
      let binary_nums := row.map (fun s => String.toNat! s)
      ∀ i, i + 1 < binary_nums.length →
        binary_nums[i]! < binary_nums[i+1]! := sorry
  
  /-
  info: ['1']
  -/
  -- #guard_msgs in
  -- #eval generate_binary_pattern 1
  
  /-
  info: ['1 10', '11 100']
  -/
  -- #guard_msgs in
  -- #eval generate_binary_pattern 2
  
  /-
  info: ['1 10 11', '100 101 110', '111 1000 1001']
  -/
  -- #guard_msgs in
  -- #eval generate_binary_pattern 3

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

