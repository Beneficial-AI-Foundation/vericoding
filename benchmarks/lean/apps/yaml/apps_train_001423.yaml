vc-description: |-
  /-
  Abhiram needs to search for an antidote. He comes to know that clue for finding the antidote is carefully hidden by KrishnaMurthy in the form of a puzzle.
  
  The puzzle consists of a string S and a keywordK. Abhiram needs to find the string of position of anagrams R of the keyword in the string which is the clue. 
  The antidote is found in the box numbered R. Help him find his clue R.
  Anagram: A word or phrase that is made by arranging the letters of another word or phrase in a different order. Eg: 'elvis' and 'lives' are both anagrams of each other.
  Note: Consider, Tac and act are not anagrams(case sensitive).
  
  -----Input:-----
  The first line contains a string S of length land the second line contains a keyword K.
  
  -----Output:-----
  
  Output contains a line"The antidote is found in R." Where R= string of positions of anagrams.(the position of the first word in the string is 1).
  
  -----Constraints:-----
  1<=l<=500
  
  1<=k<=50
  
  -----Example:-----
  Input:
  cat is the act of tac
  cat
  
  Output:
  The antidote is found in 46.
  -/

vc-preamble: |-
  def find_anagram_positions (haystack : String) (needle : String) : String :=
    sorry
  
  /- Helper function that converts a string to a sorted char array for anagram comparison -/

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def stringToSortedArray (s : String) : Array Char :=
    (s.data.toArray).qsort (· ≤ ·)

vc-theorems: |-
  theorem output_format {s : String} :
    let result := find_anagram_positions s "test"
    result.startsWith "The antidote is found in" ∧ 
    result.endsWith "." :=
  sorry
  
  theorem identical_word_not_counted {word : String} :
    word ≠ "" →
    find_anagram_positions word word = "The antidote is found in ." :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible

