vc-description: |-
  /-
  The chef is having one string of English lower case alphabets only. The chef wants to remove all "abc" special pairs where a,b,c are occurring consecutively. After removing the pair, create a new string and again remove "abc" special pair from a newly formed string. Repeate the process until no such pair remains in a string.
  
  -----Input:-----
  - First line will contain $T$, number of testcases. Then the testcases follow. 
  - Each testcase contains of a single line of input, $String$. 
  
  -----Output:-----
  For each testcase, output in a single line answer, new String with no "abc" special pair.
  
  -----Constraints:-----
  $T \leq 2 $
  $1 \leq String length \leq 1000 $
  
  -----Sample Input:-----
  2
  aabcc
  bababccc
  
  -----Sample Output:-----
  ac
  bc
  
  -----EXPLANATION:-----
  For 1) after removing "abc" at middle we get a new string as ac.
  For 2) string = bababccc
  newString1 = babcc  // After removing middle "abc"
  newString2 = bc   //After removing "abc"
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def remove_abc_pairs : String → String := sorry
  
  def containsSubstr (s : String) (substr : String) : Bool := sorry

vc-theorems: |-
  theorem no_abc_in_result (s : String) : 
    ¬(containsSubstr (remove_abc_pairs s) "abc") := sorry
  
  theorem idempotent (s : String) : 
    remove_abc_pairs (remove_abc_pairs s) = remove_abc_pairs s := sorry
  
  theorem length_decreases (s : String) :
    (remove_abc_pairs s).length ≤ s.length := sorry
  
  theorem preserves_non_abc (s : String) : 
    ¬(containsSubstr s "abc") → remove_abc_pairs s = s := sorry
  
  theorem remaining_chars_unchanged (s : String) :
    ∃ n : Nat, remove_abc_pairs s = 
      let rec remove_all (s' : String) (fuel : Nat) : String :=
        match fuel with
        | 0 => s'
        | fuel'+1 => 
          if containsSubstr s' "abc" 
          then remove_all (s'.replace "abc" "") fuel'
          else s'
      remove_all s n := sorry
  
  /-
  info: 'ac'
  -/
  -- #guard_msgs in
  -- #eval remove_abc_pairs "aabcc"
  
  /-
  info: 'bc'
  -/
  -- #guard_msgs in
  -- #eval remove_abc_pairs "bababccc"
  
  /-
  info: ''
  -/
  -- #guard_msgs in
  -- #eval remove_abc_pairs "abcabcabc"

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

