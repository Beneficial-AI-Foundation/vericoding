vc-description: |-
  /-
  Given a triangle of consecutive odd numbers:
  
  ```
               1
            3     5
         7     9    11
     13    15    17    19
  21    23    25    27    29
  ...
  ```
  
  find the triangle's row knowing its index (the rows are 1-indexed), e.g.:
  
  ```
  odd_row(1)  ==  [1]
  odd_row(2)  ==  [3, 5]
  odd_row(3)  ==  [7, 9, 11]
  ```
  
  **Note**: your code should be optimized to handle big inputs.
  
  ___
  
  The idea for this kata was taken from this kata: [Sum of odd numbers](https://www.codewars.com/kata/sum-of-odd-numbers)
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def odd_row (n : Nat) : List Nat := sorry
  
  theorem odd_row_length (n : Nat) (h : n > 0) :
    (odd_row n).length = n := sorry

vc-theorems: |-
  theorem odd_row_all_odd (n : Nat) (h : n > 0) :
    ∀ x ∈ odd_row n, x % 2 = 1 := sorry
  
  theorem odd_row_sequential_differences (n : Nat) (h : n > 0) :
    ∀ i, i < (odd_row n).length - 1 → 
      ((odd_row n)[i+1]? >>= fun x => (odd_row n)[i]? >>= fun y => some (x - y)) = some 2 := sorry
  
  theorem odd_row_first_element (n : Nat) (h : n > 0) :
    (odd_row n).head? = some (n * (n-1) + 1) := sorry
  
  /-
  info: [1]
  -/
  -- #guard_msgs in
  -- #eval odd_row 1
  
  /-
  info: [3, 5]
  -/
  -- #guard_msgs in
  -- #eval odd_row 2
  
  /-
  info: [7, 9, 11]
  -/
  -- #guard_msgs in
  -- #eval odd_row 3

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

