vc-description: |-
  /-
  A string of '0's and '1's is monotone increasing if it consists of some number of '0's (possibly 0), followed by some number of '1's (also possibly 0.)
  We are given a string S of '0's and '1's, and we may flip any '0' to a '1' or a '1' to a '0'.
  Return the minimum number of flips to make S monotone increasing.
  
  Example 1:
  Input: "00110"
  Output: 1
  Explanation: We flip the last digit to get 00111.
  
  Example 2:
  Input: "010110"
  Output: 2
  Explanation: We flip to get 011111, or alternatively 000111.
  
  Example 3:
  Input: "00011000"
  Output: 2
  Explanation: We flip to get 00000000.
  
  Note:
  
  1 <= S.length <= 20000
  S only consists of '0' and '1' characters.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def minFlipsMonoIncr (s : String) : Nat :=
    sorry

vc-theorems: |-
  theorem result_length_within_bounds (s : String) : 
    let result := minFlipsMonoIncr s
    0 ≤ result ∧ result ≤ s.length :=
    sorry
  
  theorem edge_cases :
    minFlipsMonoIncr "" = 0 ∧ 
    (∀ n : Nat, minFlipsMonoIncr (String.mk (List.replicate n '0')) = 0) ∧
    (∀ n : Nat, minFlipsMonoIncr (String.mk (List.replicate n '1')) = 0) :=
    sorry
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval minFlipsMonoIncr "00110"
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval minFlipsMonoIncr "010110"
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval minFlipsMonoIncr "00011000"

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible

