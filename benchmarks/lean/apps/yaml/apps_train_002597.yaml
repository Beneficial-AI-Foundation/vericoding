vc-description: |-
  /-
  The new "Avengers" movie has just been released! There are a lot of people at the cinema box office standing in a huge line. Each of them has a single `100`, `50` or `25` dollar bill. An "Avengers" ticket costs `25 dollars`.
  
  Vasya is currently working as a clerk. He wants to sell a ticket to every single person in this line. 
  
  Can Vasya sell a ticket to every person and give change if he initially has no money and sells the tickets strictly in the order people queue?
  
  Return `YES`, if Vasya can sell a ticket to every person and give change with the bills he has at hand at that moment. Otherwise return `NO`.
  
  ### Examples:
  
  ```csharp 
  Line.Tickets(new int[] {25, 25, 50}) // => YES 
  Line.Tickets(new int[] {25, 100}) // => NO. Vasya will not have enough money to give change to 100 dollars
  Line.Tickets(new int[] {25, 25, 50, 50, 100}) // => NO. Vasya will not have the right bills to give 75 dollars of change (you can't make two bills of 25 from one of 50)
  ```
  ```python
  tickets([25, 25, 50]) # => YES 
  tickets([25, 100]) # => NO. Vasya will not have enough money to give change to 100 dollars
  tickets([25, 25, 50, 50, 100]) # => NO. Vasya will not have the right bills to give 75 dollars of change (you can't make two bills of 25 from one of 50)
  ```
  ```cpp 
  tickets({25, 25, 50}) // => YES 
  tickets({25, 100}) // => NO. Vasya will not have enough money to give change to 100 dollars
  tickets({25, 25, 50, 50, 100}) // => NO. Vasya will not have the right bills to give 75 dollars of change (you can't make two bills of 25 from one of 50)
  ```
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def tickets (bills : List Nat) : String := sorry
  
  theorem tickets_valid_output (bills: List Nat) :
    bills.length > 0 → tickets bills = "YES" ∨ tickets bills = "NO" := sorry

vc-theorems: |-
  theorem first_payment_25 (bills: List Nat) :
    bills.length > 0 → bills[0]! ≠ 25 → tickets bills = "NO" := sorry 
  
  theorem simple_cases_work :
    tickets [25] = "YES" ∧ tickets [25, 25] = "YES" := sorry
  
  theorem successful_case_has_change (bills : List Nat) (i : Nat) :
    i < bills.length →
    tickets bills = "YES" → 
    let payment := bills[i]!
    let prev_bills := List.take i bills
    let till_25 := prev_bills.filter (· == 25) |>.length
    let till_50 := prev_bills.filter (· == 50) |>.length
    till_25 * 25 + till_50 * 50 ≥ payment - 25 := sorry
  
  theorem invalid_bills_error (bills : List Nat) :
    (∃ x ∈ bills, x ≠ 25 ∧ x ≠ 50 ∧ x ≠ 100) →
    tickets bills = "NO" := sorry
  
  /-
  info: 'YES'
  -/
  -- #guard_msgs in
  -- #eval tickets [25, 25, 50]
  
  /-
  info: 'NO'
  -/
  -- #guard_msgs in
  -- #eval tickets [25, 100]
  
  /-
  info: 'NO'
  -/
  -- #guard_msgs in
  -- #eval tickets [25, 25, 50, 50, 100]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

