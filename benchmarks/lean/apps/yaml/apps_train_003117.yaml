vc-description: |-
  /-
  Given a string that includes alphanumeric characters ('3a4B2d') return the expansion of that string: The numeric values represent the occurrence of each letter preceding that numeric value. There should be no numeric characters in the final string. Empty strings should return an empty string. 
  
  The first occurrence of a numeric value should be the number of times each character behind it is repeated, until the next numeric value appears.
  ```python
  string_expansion('3D2a5d2f') == 'DDDaadddddff'
  ```
  ```python
  string_expansion('3abc') == 'aaabbbccc'       # correct
  string_expansion('3abc') != 'aaabc'           # wrong
  string_expansion('3abc') != 'abcabcabc'       # wrong
  ```
  If there are two consecutive numeric characters the first one is ignored.
  
  ```python
  string_expansion('3d332f2a') == 'dddffaa'
  ```
  If there are two consecutive alphabetic characters then the first character has no effect on the one after it.
  
  ```python
  string_expansion('abcde') == 'abcde'
  ```
  Your code should be able to work for both lower and capital case letters.
  
  ```python
  string_expansion('') == ''
  ```
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def string_expansion (s : String) : String := sorry
  
  -- We can remove the first theorem since String type guarantees it's a string

vc-theorems: |-
  theorem string_expansion_empty_string (s : String) :
    s = "" → string_expansion s = "" := sorry
  
  theorem string_expansion_only_numbers (s : String) :
    s.all Char.isDigit → string_expansion s = "" := sorry
  
  theorem string_expansion_fixed_cases :
    (string_expansion "3abc" = "aaabbbccc") ∧ 
    (string_expansion "3D2a5d2f" = "DDDaadddddff") ∧
    (string_expansion "0d0a" = "") ∧
    (string_expansion "" = "") := sorry
  
  /-
  info: 'DDDaadddddff'
  -/
  -- #guard_msgs in
  -- #eval string_expansion "3D2a5d2f"
  
  /-
  info: 'aaabbbccc'
  -/
  -- #guard_msgs in
  -- #eval string_expansion "3abc"
  
  /-
  info: ''
  -/
  -- #guard_msgs in
  -- #eval string_expansion ""

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

