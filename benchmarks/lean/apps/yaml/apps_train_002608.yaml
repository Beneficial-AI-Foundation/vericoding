vc-description: |-
  /-
  The "Russian Peasant Method" is an old algorithm used by Russian peasants (and before them ancient Egyptians) to perform multiplication.  Consider that X and Y are two numbers.  X can be any number but Y must be a positive integer. To multiply X and Y:
  
  1. Let the product = 0
  2. If Y is odd, then the product = product + X
  3. X = X + X
  4. Y = integer part of Y / 2 
  5. if Y is nonzero, repeat from step 2; otherwise the algorithm terminates and returns the product.
  
  For example:
  
  Let X = 10
  
  Let Y = 5
  
  X: 10 20 40 80
  
  Y: 5  2  1  0
  
  product = 10 + 40 = 50
  
  Note: usage of multiplication is of course forbidden...
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def russian_peasant_multiplication (a : Int) (b : Nat) : Int := sorry
  
  theorem russian_peasant_matches_multiplication {a : Int} {b : Nat} 
    (h1 : -10 ≤ a ∧ a ≤ 10) (h2 : b ≤ 10) :
    russian_peasant_multiplication a b = a * b := sorry

vc-theorems: |-
  theorem russian_peasant_multiply_zero_left :
    ∀ n : Nat, russian_peasant_multiplication 0 n = 0 := sorry
  
  theorem russian_peasant_multiply_zero_right {n : Nat} :
    russian_peasant_multiplication n (Nat.zero) = 0 := sorry
  
  theorem russian_peasant_small_nums_1 :
    russian_peasant_multiplication 2 3 = 6 := sorry
  
  theorem russian_peasant_small_nums_2 :
    russian_peasant_multiplication 5 4 = 20 := sorry
  
  /-
  info: 50
  -/
  -- #guard_msgs in
  -- #eval russian_peasant_multiplication 10 5
  
  /-
  info: 3150
  -/
  -- #guard_msgs in
  -- #eval russian_peasant_multiplication 175 18

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

