vc-description: |-
  /-
  We are given an array A of N lowercase letter strings, all of the same length.
  Now, we may choose any set of deletion indices, and for each string, we delete all the characters in those indices.
  For example, if we have an array A = ["abcdef","uvwxyz"] and deletion indices {0, 2, 3}, then the final array after deletions is ["bef","vyz"].
  Suppose we chose a set of deletion indices D such that after deletions, the final array has its elements in lexicographic order (A[0] <= A[1] <= A[2] ... <= A[A.length - 1]).
  Return the minimum possible value of D.length.
  
  Example 1:
  Input: ["ca","bb","ac"]
  Output: 1
  Explanation: 
  After deleting the first column, A = ["a", "b", "c"].
  Now A is in lexicographic order (ie. A[0] <= A[1] <= A[2]).
  We require at least 1 deletion since initially A was not in lexicographic order, so the answer is 1.
  
  Example 2:
  Input: ["xc","yb","za"]
  Output: 0
  Explanation: 
  A is already in lexicographic order, so we don't need to delete anything.
  Note that the rows of A are not necessarily in lexicographic order:
  ie. it is NOT necessarily true that (A[0][0] <= A[0][1] <= ...)
  
  Example 3:
  Input: ["zyx","wvu","tsr"]
  Output: 3
  Explanation: 
  We have to delete every column.
  
  Note:
  
  1 <= A.length <= 100
  1 <= A[i].length <= 100
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def minDeletionSize (A : List (List Char)) : Nat :=
    sorry
  
  /- Output is bounded between 0 and string length -/

vc-theorems: |-
  theorem output_bounds (A : List (List Char)) (h : A.all (λ s => s.length = A.head!.length)) :
    let result := minDeletionSize A
    0 ≤ result ∧ result ≤ A.head!.length :=
    sorry
  
  /- Already sorted columns need 0 deletions -/
  
  theorem sorted_columns_zero_deletions (A : List (List Char)) (h : A.all (λ s => s.length = A.head!.length)) :
    let sorted_columns := A -- imagine this is the input with sorted columns
    minDeletionSize sorted_columns = 0 :=
    sorry
  
  /- Reverse sorted columns need at most string length deletions -/
  
  theorem reverse_sorted_most_deletions (A : List (List Char)) (h₁ : A ≠ []) (h₂ : A.all (λ s => s.length = A.head!.length)) :
    let reverse_sorted := A -- imagine this is input with reverse sorted columns  
    minDeletionSize reverse_sorted ≤ A.head!.length :=
    sorry
  
  /- Identical strings need 0 deletions -/
  
  theorem identical_strings_zero_deletions (A : List (List Char)) (s : List Char) 
      (h₁ : A ≠ []) (h₂ : A.all (λ str => str = s)) :
    minDeletionSize A = 0 :=
    sorry
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval min_deletion_size ["ca", "bb", "ac"]
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval min_deletion_size ["xc", "yb", "za"]
  
  /-
  info: 3
  -/
  -- #guard_msgs in
  -- #eval min_deletion_size ["zyx", "wvu", "tsr"]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

