vc-description: |-
  /-
  Not considering number 1, the integer 153 is the first integer having this property:
  the sum of the third-power of each of its digits  is equal to 153. Take a look:
  153 = 1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153
  
  The next number that experiments this particular behaviour is 370 with the same power.
  
  Write the function `eq_sum_powdig()`, that finds the numbers below a given upper limit `hMax` that fulfill this property but with different exponents as a power for the digits.
  
  eq_sum_powdig(hMax, exp): ----> sequence of numbers (sorted list) (Number one should not be considered).
  
  Let's see some cases:
  ```python
  eq_sum_powdig(100, 2) ----> []
  
  eq_sum_powdig(1000, 2) ----> []
  
  eq_sum_powdig(200, 3) ----> [153]
  
  eq_sum_powdig(370, 3) ----> [153, 370]
  ```
  Enjoy it !!
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def eq_sum_powdig (hmax : Nat) (exp : Nat) : List Nat := sorry
  
  def sum_digit_powers : Nat → Nat → Nat := sorry

vc-theorems: |-
  theorem eq_sum_powdig_increasing_range {hmax : Nat} (h : hmax ≥ 1) :
    let small_result := eq_sum_powdig hmax 3;
    let large_result := eq_sum_powdig (hmax + 100) 3;
    ∀ x ∈ small_result, x ∈ large_result := sorry
  
  theorem eq_sum_powdig_known_values :
    153 ∈ eq_sum_powdig 153 3 ∧ 370 ∈ eq_sum_powdig 370 3 := sorry
  
  /-
  info: []
  -/
  -- #guard_msgs in
  -- #eval eq_sum_powdig 100 2
  
  /-
  info: [153]
  -/
  -- #guard_msgs in
  -- #eval eq_sum_powdig 200 3
  
  /-
  info: [153, 370]
  -/
  -- #guard_msgs in
  -- #eval eq_sum_powdig 370 3

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

