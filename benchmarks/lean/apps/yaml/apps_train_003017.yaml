vc-description: |-
  /-
  Write a function 
  ```javascript 
  tripledouble(num1,num2)
  ```
  ```python
  triple_double(num1, num2)
  ```
  which takes numbers `num1` and `num2` and returns `1` if there is a straight triple of a number at any place in `num1` and also a straight double of the **same** number in `num2`.
  
  If this isn't the case, return `0`
  
  ## Examples
  
  ```python
  triple_double(451999277, 41177722899) == 1
  # num1 has straight triple 999s and num2 has straight double 99s
  
  triple_double(1222345, 12345) == 0
  # num1 has straight triple 2s but num2 has only a single 2
  
  triple_double(12345, 12345) == 0
  
  triple_double(666789, 12345667) == 1
  ```
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def triple_double (n1 n2 : Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem triple_double_returns_zero_or_one (n1 n2 : Nat) :
    triple_double n1 n2 = 0 ∨ triple_double n1 n2 = 1 :=
    sorry
  
  theorem triple_double_basic_pattern (d : Nat) (h : d > 0 ∧ d ≤ 9) :
    triple_double (d * 111) (d * 11) = 1 :=
    sorry
  
  theorem triple_double_with_surrounding (d : Nat) (h : d > 0 ∧ d ≤ 9) :
    triple_double (42000 + d * 111 + 57) (98000 + d * 11 + 32) = 1 :=
    sorry
  
  theorem triple_double_no_triple (n1 n2 : Nat) :
    (∀ d : Nat, 0 ≤ d → d ≤ 9 → ¬ ∃ p : Nat, n1 = d * p) →
    triple_double n1 n2 = 0 :=
    sorry
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval triple_double 451999277 41177722899
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval triple_double 1222345 12345
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval triple_double 666789 12345667

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

