vc-description: |-
  /-
  We are given an array A of N lowercase letter strings, all of the same length.
  Now, we may choose any set of deletion indices, and for each string, we delete all the characters in those indices.
  For example, if we have an array A = ["abcdef","uvwxyz"] and deletion indices {0, 2, 3}, then the final array after deletions is ["bef", "vyz"], and the remaining columns of A are ["b","v"], ["e","y"], and ["f","z"].  (Formally, the c-th column is [A[0][c], A[1][c], ..., A[A.length-1][c]]).
  Suppose we chose a set of deletion indices D such that after deletions, each remaining column in A is in non-decreasing sorted order.
  Return the minimum possible value of D.length.
  
  Example 1:
  Input: A = ["cba","daf","ghi"]
  Output: 1
  Explanation: 
  After choosing D = {1}, each column ["c","d","g"] and ["a","f","i"] are in non-decreasing sorted order.
  If we chose D = {}, then a column ["b","a","h"] would not be in non-decreasing sorted order.
  
  Example 2:
  Input: A = ["a","b"]
  Output: 0
  Explanation: D = {}
  
  Example 3:
  Input: A = ["zyx","wvu","tsr"]
  Output: 3
  Explanation: D = {0, 1, 2}
  
  Constraints:
  
  1 <= A.length <= 100
  1 <= A[i].length <= 1000
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def min_deletion_size (strings : List String) : Nat :=
    sorry

vc-theorems: |-
  theorem min_deletion_sorted_cols_zero 
    (strings : List String)
    (h1 : strings.length > 1)
    (h2 : ∀ (i j : Nat), i < strings.length → j < strings.length → 
      strings[i]!.length = strings[j]!.length)
    (h3 : ∀ (col : Nat) (hcol: col < strings[0]!.length), 
      ∀ (i j : Nat) (hi : i < strings.length) (hj : j < strings.length), i < j →
        (strings[i]!.data.get ⟨col, by {
          rw [h2 0 i (by {exact Nat.zero_lt_of_lt hi}) hi] at hcol
          exact hcol
        }⟩) ≤ (strings[j]!.data.get ⟨col, by {
          rw [h2 0 j (by {exact Nat.zero_lt_of_lt hj}) hj] at hcol
          exact hcol
        }⟩)) :
    min_deletion_size strings = 0 :=
    sorry
  
  theorem min_deletion_size_bounds
    (strings : List String)  
    (h1 : strings.length > 1)
    (h2 : ∀ (i j : Nat), i < strings.length → j < strings.length → 
      strings[i]!.length = strings[j]!.length) :
    ∃ n, min_deletion_size strings = n ∧ 
      0 ≤ n ∧ n ≤ strings[0]!.length :=
    sorry
  
  /-
  info: expected1
  -/
  -- #guard_msgs in
  -- #eval min_deletion_size ["cba", "daf", "ghi"]
  
  /-
  info: expected2
  -/
  -- #guard_msgs in
  -- #eval min_deletion_size ["a", "b"]
  
  /-
  info: expected3
  -/
  -- #guard_msgs in
  -- #eval min_deletion_size ["zyx", "wvu", "tsr"]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

