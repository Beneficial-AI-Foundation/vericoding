vc-description: |-
  /-
  Jack really likes his number five: the trick here is that you have to multiply each number by 5 raised to the number of digits of each numbers, so, for example:
  ```python
  multiply(3)==15
  multiply(10)==250
  multiply(200)==25000
  multiply(0)==0
  multiply(-3)==-15
  ```
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def multiply (n : Int) : Int := sorry
  
  theorem multiply_sign_preservation (n : Int) :
    (multiply n ≥ 0) = (n ≥ 0) := sorry

vc-theorems: |-
  theorem multiply_digit_length_scaling (n : Int) (h : -999999 ≤ n ∧ n ≤ 999999) :
    let digit_count := String.length (toString n.natAbs)
    multiply n = n * (5 ^ digit_count) := sorry
  
  theorem multiply_single_digit (n : Int) (h : -9 ≤ n ∧ n ≤ 9) : 
    multiply n = n * 5 := sorry
  
  theorem multiply_zero_preservation (n : Int) :
    n = 0 → multiply n = 0 := sorry
  
  /-
  info: 250
  -/
  -- #guard_msgs in
  -- #eval multiply 10
  
  /-
  info: 25000
  -/
  -- #guard_msgs in
  -- #eval multiply 200
  
  /-
  info: -10
  -/
  -- #guard_msgs in
  -- #eval multiply -2

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

