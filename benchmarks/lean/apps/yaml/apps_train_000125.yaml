vc-description: |-
  /-
  There is a group of G members, and a list of various crimes they could commit.
  The ith crime generates a profit[i] and requires group[i] members to participate in it.
  If a member participates in one crime, that member can't participate in another crime.
  Let's call a profitable scheme any subset of these crimes that generates at least P profit, and the total number of members participating in that subset of crimes is at most G.
  How many schemes can be chosen?  Since the answer may be very large, return it modulo 10^9 + 7.
  
  Example 1:
  Input: G = 5, P = 3, group = [2,2], profit = [2,3]
  Output: 2
  Explanation: 
  To make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1.
  In total, there are 2 schemes.
  
  Example 2:
  Input: G = 10, P = 5, group = [2,3,5], profit = [6,7,8]
  Output: 7
  Explanation: 
  To make a profit of at least 5, the group could commit any crimes, as long as they commit one.
  There are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2).
  
  Note:
  
  1 <= G <= 100
  0 <= P <= 100
  1 <= group[i] <= 100
  0 <= profit[i] <= 100
  1 <= group.length = profit.length <= 100
  -/

vc-preamble: |-
  def profitable_schemes (G : Nat) (P : Nat) (group : List Nat) (profit : List Nat) : Nat :=
    sorry

vc-helpers: |-

vc-definitions: |-
  def MOD := 1000000007
  
  -- Basic properties

vc-theorems: |-
  theorem profitable_schemes_non_negative (G P : Nat) (group profit : List Nat) :
    profitable_schemes G P group profit ≥ 0 :=
    sorry
  
  theorem profitable_schemes_mod_bound (G P : Nat) (group profit : List Nat) :
    profitable_schemes G P group profit < MOD :=
    sorry
  
  -- Empty list cases
  
  theorem profitable_schemes_empty_zero_profit (G : Nat) :
    profitable_schemes G 0 [] [] = 1 :=
    sorry 
  
  theorem profitable_schemes_empty_positive_profit (G P : Nat) :
    P > 0 → profitable_schemes G P [] [] = 0 :=
    sorry
  
  -- Scaling property
  
  theorem profitable_schemes_scaling (G P : Nat) (group profit : List Nat) :
    group ≠ [] → 
    profit.length = group.length →
    profitable_schemes G P group profit = 
    profitable_schemes G (2 * P) group (List.map (fun p => 2 * p) profit) :=
    sorry
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval profitable_schemes 5 3 [2, 2] [2, 3]
  
  /-
  info: 7
  -/
  -- #guard_msgs in
  -- #eval profitable_schemes 10 5 [2, 3, 5] [6, 7, 8]
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval profitable_schemes 1 1 [1] [1]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

