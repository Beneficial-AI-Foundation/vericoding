vc-description: |-
  /-
  You are given a string representing an attendance record for a student. The record only contains the following three characters:
  
  'A' : Absent. 
  'L' : Late.
   'P' : Present. 
  
  A student could be rewarded if his attendance record doesn't contain more than one 'A' (absent) or more than two continuous 'L' (late).    
  
  You need to return whether the student could be rewarded according to his attendance record.
  
  Example 1:
  
  Input: "PPALLP"
  Output: True
  
  Example 2:
  
  Input: "PPALLL"
  Output: False
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def check_student_record (s : String) : Bool := sorry
  
  theorem empty_string_valid : 
    check_student_record "" = true := sorry

vc-theorems: |-
  theorem only_valid_chars_used (s : String) :
    s.data.all (fun c => c = 'P' ∨ c = 'L' ∨ c = 'A') → 
    ∃ (b : Bool), check_student_record s = b := sorry
  
  theorem two_absences_fail (s : String) :
    (s.data.filter (· = 'A')).length ≥ 2 →
    check_student_record s = false := sorry
  
  theorem three_consecutive_lates_fail (s : String) :
    s.data = [] ++ ['L', 'L', 'L'] ++ (List.drop 3 s.data) →
    check_student_record s = false := sorry
  
  theorem all_present_pass (s : String) :
    s.length > 0 →
    (∀ c ∈ s.data, c = 'P') →
    check_student_record s = true := sorry
  
  theorem no_absences_rule (s : String) :
    (∀ c ∈ s.data, c = 'P' ∨ c = 'L') →
    (¬(s.data = [] ++ ['L', 'L', 'L'] ++ (List.drop 3 s.data))) ↔
    check_student_record s = true := sorry
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval check_student_record "PPALLP"
  
  /-
  info: False
  -/
  -- #guard_msgs in
  -- #eval check_student_record "PPALLL"
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval check_student_record "PPALLP"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

