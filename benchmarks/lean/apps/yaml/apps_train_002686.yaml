vc-description: |-
  /-
  *This is the second Kata in the Ciphers series. This series is meant to test our coding knowledge.*
  
  ## Ciphers #2 - The reversed Cipher
  This is a lame method I use to write things such that my friends don't understand. It's still fairly readable if you think about it.
  
  ## How this cipher works
  First, you need to reverse the string. Then, the last character in the original string (the first character in the reversed string) needs to be moved to the back. Words will be separated by spaces, and punctuation marks can be counted as part of the word.
  
  ## Example
  
  This is because `"Hello"` reversed is `"olleH"` and `"o"` is moved to the back, and so on. The exclamation mark is considered to be part of the word `"World"`.
  
  Have fun (en)coding!
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def String.words (s : String) : List String := sorry
  def encode (s : String) : String := sorry

vc-theorems: |-
  theorem encode_preserves_spaces {s : String} : 
    (s.words).length = (encode s).words.length := sorry
  
  theorem encode_single_char_unchanged {s : String} :
    s.length = 1 → encode s = s := sorry
  
  theorem encode_preserves_last_chars {s : String} {w : String} :
    w ∈ s.words → w.length > 0 →
    (((encode s).words).find? (· = w)).map String.back = some w.back := sorry 
  
  theorem encode_idempotent {s : String} :
    encode (encode s) = encode s ↔ 
    ∀ w ∈ s.words, w.length ≤ 2 := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

