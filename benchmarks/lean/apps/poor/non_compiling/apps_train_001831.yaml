vc-description: |-
  /-
  Given many words, words[i] has weight i.
  
  Design a class WordFilter that supports one function, WordFilter.f(String prefix, String suffix).
  It will return the word with given prefix and suffix with maximum weight.  If no word exists, return -1.
  
  Examples:
  
  Input:
  WordFilter(["apple"])
  WordFilter.f("a", "e") // returns 0
  WordFilter.f("b", "") // returns -1
  
  Note:
  
  words has length in range [1, 15000].
  For each test case, up to words.length queries WordFilter.f may be made.
  words[i] has length in range [1, 10].
  prefix, suffix have lengths in range [0, 10].
  words[i] and prefix, suffix queries consist of lowercase letters only.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def WordFilter.new (words : List String) : WordFilter := sorry
  
  def mkString : List Char → String := sorry

vc-theorems: |-
  theorem wordfilter_result_bounds (words : List String) (wf : WordFilter)
      (h : words ≠ []) (p s : String) :
    wf.f p s ≤ words.length := sorry
  
  theorem wordfilter_match_criteria (words : List String) (wf : WordFilter)
      (h : words ≠ []) (p s : String)
      (startsWith endsWith : String → String → Bool)
      (h3 : wf.f p s < words.length) :
    let matching_word := words.get! (wf.f p s)
    startsWith matching_word p ∧ endsWith matching_word s := sorry
  
  theorem wordfilter_last_match (words : List String) (wf : WordFilter)
      (h : words ≠ []) (p s : String)
      (startsWith endsWith : String → String → Bool)
      (h3 : wf.f p s < words.length) :
    ∀ i, wf.f p s < i → i < words.length →
    ¬(startsWith (words.get! i) p ∧ endsWith (words.get! i) s) := sorry
  
  theorem wordfilter_empty_strings (words : List String) (wf : WordFilter)
      (h : words ≠ []) :
    wf.f "" "" = words.length - 1 := sorry
  
  theorem wordfilter_impossible_match (words : List String) (wf : WordFilter)
      (h : words ≠ []) (maxLen : Nat) (len : String → Nat)
      (h2 : maxLen = words.foldl (fun m w => max m (len w)) 0) :
    wf.f (mkString (List.replicate (maxLen + 1) 'a')) "" = words.length := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

