vc-description: |-
  /-
  Compare two strings by comparing the sum of their values (ASCII character code).
  
  * For comparing treat all letters as UpperCase
  * `null/NULL/Nil/None` should be treated as empty strings
  * If the string contains other characters than letters, treat the whole string as it would be empty
  
  Your method should return `true`, if the strings are equal and `false` if they are not equal.
  
  ## Examples:
  ```
  "AD", "BC"  -> equal
  "AD", "DD"  -> not equal
  "gf", "FG"  -> equal
  "zz1", ""   -> equal (both are considered empty)
  "ZzZz", "ffPFF" -> equal
  "kl", "lz"  -> not equal
  null, ""    -> equal
  ```
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def compare (s1 s2 : String) : Bool := sorry
  
  /-
  The comparison of strings is case-insensitive.
  In other words, comparing lowercase versions equals comparing uppercase versions.
  -/

vc-theorems: |-
  theorem compare_case_insensitive (s1 s2 : String) : 
    MyCompare.compare s1.toLower s2.toLower = MyCompare.compare s1.toUpper s2.toUpper := sorry
  
  /-
  The comparison is reflexive: a string equals itself.
  -/
  
  theorem compare_reflexive (s : String) :
    MyCompare.compare s s = true := sorry
  
  /-
  The comparison is symmetric: order of comparison doesn't matter.
  -/
  
  theorem compare_symmetric (s1 s2 : String) :
    MyCompare.compare s1 s2 = MyCompare.compare s2 s1 := sorry
  
  /-
  Invalid inputs compared with valid strings return false, but equal invalid inputs return true.
  -/
  
  theorem compare_invalid_input (s : String) (h : ¬s.all Char.isAlpha) :
    MyCompare.compare s "abc" = false ∧ 
    MyCompare.compare "abc" s = false ∧ 
    MyCompare.compare s s = true := sorry
  
  end MyCompare
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval compare "AD" "BC"
  
  /-
  info: False
  -/
  -- #guard_msgs in
  -- #eval compare "AD" "DD"
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval compare "gf" "FG"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

