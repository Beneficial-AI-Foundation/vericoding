vc-description: |-
  /-
  Given two binary trees original and cloned and given a reference to a node target in the original tree.
  The cloned tree is a copy of the original tree.
  Return a reference to the same node in the cloned tree.
  Note that you are not allowed to change any of the two trees or the target node and the answer must be a reference to a node in the cloned tree.
  Follow up: Solve the problem if repeated values on the tree are allowed.
  
  Example 1:
  
  Input: tree = [7,4,3,null,null,6,19], target = 3
  Output: 3
  Explanation: In all examples the original and cloned trees are shown. The target node is a green node from the original tree. The answer is the yellow node from the cloned tree.
  
  Example 2:
  
  Input: tree = [7], target =  7
  Output: 7
  
  Example 3:
  
  Input: tree = [8,null,6,null,5,null,4,null,3,null,2,null,1], target = 4
  Output: 4
  
  Example 4:
  
  Input: tree = [1,2,3,4,5,6,7,8,9,10], target = 5
  Output: 5
  
  Example 5:
  
  Input: tree = [1,2,null,3], target = 2
  Output: 2
  
  Constraints:
  
  The number of nodes in the tree is in the range [1, 10^4].
  The values of the nodes of the tree are unique.
  target node is a node from the original tree and is not null.
  -/

vc-preamble: |-
  def TreeNode.val : TreeNode → Int
    | mk v _ _ => v
  
  def TreeNode.left : TreeNode → Option TreeNode
    | mk _ l _ => l
  
  def TreeNode.right : TreeNode → Option TreeNode
    | mk _ _ r => r
  
  def build_tree_from_list (values : List Int) : Option TreeNode :=
    sorry
  
  def clone_tree (root : Option TreeNode) : Option TreeNode :=
    sorry
  
  def get_leftmost_node (root : Option TreeNode) : Option TreeNode :=
    sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def getTargetCopy (original cloned target: Option TreeNode) : Option TreeNode :=
    sorry

vc-theorems: |-
  theorem target_copy_leftmost_preserves_values
    (values : List Int) (h : values.length > 0)
    (original : Option TreeNode) (h₁ : original = build_tree_from_list values)
    (cloned : Option TreeNode) (h₂ : cloned = clone_tree original)
    (target : Option TreeNode) (h₃ : target = get_leftmost_node original) :
    match getTargetCopy original cloned target with
    | none => False
    | some result => 
      match target with
      | none => False
      | some t =>
        (TreeNode.val result = TreeNode.val t) ∧
        (Option.isSome (TreeNode.left t) → 
          Option.isSome (TreeNode.left result) ∧
          (∀ rl tl, TreeNode.left result = some rl → TreeNode.left t = some tl → 
            TreeNode.val rl = TreeNode.val tl)) ∧
        (Option.isSome (TreeNode.right t) →
          Option.isSome (TreeNode.right result) ∧
          (∀ rr tr, TreeNode.right result = some rr → TreeNode.right t = some tr → 
            TreeNode.val rr = TreeNode.val tr))
    :=
    sorry
  
  theorem target_copy_root_preserves_values
    (values : List Int) (h : values.length > 0)
    (original : Option TreeNode) (h₁ : original = build_tree_from_list values)
    (cloned : Option TreeNode) (h₂ : cloned = clone_tree original) :
    match getTargetCopy original cloned original, original with
    | some result, some orig => TreeNode.val result = TreeNode.val orig
    | _, _ => False :=
    sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

