{"id": "LA0240", "language": "lean", "source": "apps", "source_id": "apps_test_1116", "vc-preamble": "def gcd (a b : Nat) : Nat :=\n  if b = 0 then a else gcd b (a % b)\ntermination_by gcd a b => b\n\ndef ValidInput (r b k : Int) : Prop :=\n  r > 0 ∧ b > 0 ∧ k > 0\n\ndef MaxConsecutiveSameColor (r b : Int) : Int :=\n  let a := Int.min r b\n  let b_val := Int.max r b\n  let n := Int.ofNat (gcd a.natAbs b_val.natAbs)\n  -((n - b_val) / a)\n\ndef CanAvoidConsecutive (r b k : Int) : Bool :=\n  if r > 0 ∧ b > 0 ∧ k > 0 then MaxConsecutiveSameColor r b < k else false\n\n@[reducible, simp]\ndef solve_precond (r b k : Int) : Prop :=\n  ValidInput r b k", "vc-helpers": "", "vc-definitions": "def solve (r b k : Int) (_ : solve_precond r b k) : String :=\n  if CanAvoidConsecutive r b k then \"OBEY\" else \"REBEL\"", "vc-theorems": "@[reducible, simp]\ndef solve_postcond (r b k : Int) (result : String) (_ : solve_precond r b k) : Prop :=\n  result = (if CanAvoidConsecutive r b k then \"OBEY\" else \"REBEL\")\n\ntheorem solve_spec_satisfied (r b k : Int) (h_precond : solve_precond r b k) :\n    solve_postcond r b k (solve r b k h_precond) h_precond := by\n  simp [solve, solve_postcond]", "vc-postamble": "", "qa-issue": 1, "qa-issue-type": "non_compiling"}
