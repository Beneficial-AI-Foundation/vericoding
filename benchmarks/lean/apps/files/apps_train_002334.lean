/-
Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.
Return the minimum number of steps to make the given string empty.
A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without changing its order.
A string is called palindrome if is one that reads the same backward as well as forward.

Example 1:
Input: s = "ababa"
Output: 1
Explanation: String is already palindrome

Example 2:
Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "". 
Remove palindromic subsequence "a" then "bb".

Example 3:
Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "". 
Remove palindromic subsequence "baab" then "b".

Example 4:
Input: s = ""
Output: 0

Constraints:

0 <= s.length <= 1000
s only consists of letters 'a' and 'b'
-/

def remove_palindrome_subseq (s : String) : Nat := sorry

def is_palindrome (s : String) : Bool := sorry

-- <vc-helpers>
-- </vc-helpers>

def reverse (s : String) : String := sorry

theorem result_bounds (s : String) :
  0 ≤ remove_palindrome_subseq s ∧ remove_palindrome_subseq s ≤ 2 := sorry

theorem empty_string :
  remove_palindrome_subseq "" = 0 := sorry

theorem single_char_type (s : String) :
  s.length = 1 → remove_palindrome_subseq s = 1 := sorry

theorem only_valid_results (s : String) :
  remove_palindrome_subseq s = 0 ∨ 
  remove_palindrome_subseq s = 1 ∨
  remove_palindrome_subseq s = 2 := sorry

/-
info: 1
-/
-- #guard_msgs in
-- #eval remove_palindrome_subseq "ababa"

/-
info: 2
-/
-- #guard_msgs in
-- #eval remove_palindrome_subseq "abb"

/-
info: 2
-/
-- #guard_msgs in
-- #eval remove_palindrome_subseq "baabb"

/-
info: 0
-/
-- #guard_msgs in
-- #eval remove_palindrome_subseq ""

-- Apps difficulty: introductory
-- Assurance level: guarded_and_plausible