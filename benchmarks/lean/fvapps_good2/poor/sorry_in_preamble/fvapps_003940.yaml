vc-description: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
  
  /- The count is always less than or equal to the range size -/
  
  /- Empty range returns 0 -/
  
  /- Splitting range property - count over split ranges sums to total -/
  
  /- For valid rotation numbers, all digits must be from valid set -/
  
  /- For odd length valid rotation numbers, middle digit has restrictions -/
  
  /- For any valid range, the count is non-negative -/

vc-preamble: |-
  instance : ToString Nat where
    toString := sorry

vc-helpers: |-

vc-definitions: |-
  def solve (x y : Nat) : Nat :=
  sorry

vc-theorems: |-
  theorem solve_nonneg {x y : Nat} (h : x ≤ y) :
    solve x y ≥ 0 :=
  sorry
  
  theorem solve_le_range {x y : Nat} (h : x ≤ y) :
    solve x y ≤ y - x :=
  sorry
  
  theorem solve_empty_range (n : Nat) :
    solve n n = 0 :=
  sorry
  
  theorem solve_split_range {x y z : Nat}
    (h1 : x ≤ y) (h2 : y ≤ z) :
    solve x z = solve x y + solve y z :=
  sorry
  
  theorem valid_rotation_digits (n : Nat) :
    solve n (n+1) = 1 → ∀ c, c ∈ (ToString.toString n).data → c ∈ ['0', '1', '8', '6', '9'] :=
  sorry
  
  theorem odd_len_middle_digit (n : Nat) (h1 : solve n (n+1) = 1)
    (h2 : (ToString.toString n).length % 2 = 1) :
    let mid := (ToString.toString n).length / 2
    let c := ((ToString.toString n).data.get! mid)
    c ≠ '6' ∧ c ≠ '9' :=
  sorry

vc-postamble: |-
  /--
  info: 3
  -/
  #guard_msgs in
  #eval solve 0 10
  
  /--
  info: 4
  -/
  #guard_msgs in
  #eval solve 10 100
  
  /--
  info: 12
  -/
  #guard_msgs in
  #eval solve 100 1000

