vc-description: |-

vc-preamble: |-
  def determine_winner (n : Nat) (cells : List Nat) : String := sorry
  
  def is_valid_cell_list (cells : List Nat) : Bool :=
    cells.all (fun x => x = 0 ∨ x = 1)

vc-helpers: |-

vc-definitions: |-
  def count_max_consecutive_zeros (cells : List Nat) : Nat :=
  sorry

vc-theorems: |-
  theorem winner_determined_by_max_zeros (n : Nat) (cells : List Nat)
    (h : is_valid_cell_list cells) :
    determine_winner n cells =
      if count_max_consecutive_zeros cells % 2 = 1
      then "Yes"
      else "No" :=
  sorry
  
  theorem determine_winner_returns_yes_or_no (n : Nat) (cells : List Nat)
    (h : is_valid_cell_list cells) :
    determine_winner n cells = "Yes" ∨ determine_winner n cells = "No" :=
  sorry
  
  theorem all_ones_loses (n : Nat) :
    determine_winner n (List.replicate n 1) = "No" :=
  sorry
  
  theorem all_zeros_winner (n : Nat) :
    determine_winner n (List.replicate n 0) =
      if n % 2 = 1
      then "Yes"
      else "No" :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
  
  /--
  info: 'Yes'
  -/
  #guard_msgs in
  #eval determine_winner 7 [1, 1, 0, 0, 0, 1, 1]
  
  /--
  info: 'No'
  -/
  #guard_msgs in
  #eval determine_winner 8 [1, 0, 1, 1, 1, 0, 0, 1]
  
  /--
  info: 'Yes'
  -/
  #guard_msgs in
  #eval determine_winner 4 [1, 1, 0, 1]

