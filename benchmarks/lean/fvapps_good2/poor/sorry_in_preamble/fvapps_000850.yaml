vc-description: |-

vc-preamble: |-
  def list_any (l : List Nat) (f : Nat → Bool) : Bool := sorry
  
  def list_sum (l : List Nat) : Nat :=
    match l with
    | [] => 0
    | h :: t => h + list_sum t

vc-helpers: |-

vc-definitions: |-
  def max_topics_prepared (N M S : Nat) (topic_hours : List Nat) : Nat :=
  sorry

vc-theorems: |-
  theorem max_topics_non_negative (N M S : Nat) (topic_hours : List Nat) :
    N > 0 → M > 0 → S > 0 → S ≤ 16 → topic_hours.length > 0 →
    max_topics_prepared N M S topic_hours ≥ 0 :=
  sorry
  
  theorem max_topics_bounded_by_length (N M S : Nat) (topic_hours : List Nat) :
    N > 0 → M > 0 → S > 0 → S ≤ 16 → topic_hours.length > 0 →
    max_topics_prepared N M S topic_hours ≤ topic_hours.length :=
  sorry
  
  theorem max_topics_zero_when_s_too_large (N M S : Nat) (topic_hours : List Nat) :
    N > 0 → M > 0 → S ≥ 17 → topic_hours.length > 0 →
    max_topics_prepared N M S topic_hours = 0 :=
  sorry
  
  theorem max_topics_bounded_by_feasible (N M S : Nat) (topic_hours : List Nat) :
    N > 0 → M > 0 → S > 0 → S ≤ 16 → topic_hours.length > 0 →
    max_topics_prepared N M S topic_hours ≤
      (List.countP (fun h => h/S ≤ 2) topic_hours) :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible
  
  /-
  info: 2
  -/
  #guard_msgs in
  #eval max_topics_prepared 5 4 10 [10, 24, 30, 19, 40]
  
  /-
  info: 4
  -/
  #guard_msgs in
  #eval max_topics_prepared 5 4 16 [7, 16, 35, 10, 15]

