vc-description: |-

vc-preamble: |-
  def toOctets (n : Nat) : List Nat := sorry
  
  def countChar (s : String) (c : Char) : Nat :=
    s.data.filter (· = c) |>.length

vc-helpers: |-

vc-definitions: |-
  def int32_to_ip (n : Nat) : String :=
  sorry

vc-theorems: |-
  theorem int32_to_ip_has_three_dots (n : Nat)
      (h : n < 2^32) :
      let result := int32_to_ip n
      (countChar result '.' = 3) :=
  sorry
  
  theorem int32_to_ip_octets_valid (n : Nat)
      (h : n < 2^32) :
      let octets := toOctets n
      (octets.length = 4 ∧
       octets.all (fun x => x ≤ 255)) :=
  sorry
  
  theorem int32_to_ip_preserves_value (n : Nat)
      (h : n < 2^32) :
      let octets := toOctets n
      let reconstructed := (octets.get! 0) * 256^3 +
                          (octets.get! 1) * 256^2 +
                          (octets.get! 2) * 256^1 +
                          (octets.get! 3) * 256^0
      (reconstructed = n) :=
  sorry
  
  theorem int32_to_ip_format (octets : List Nat)
      (h1 : octets.length = 4)
      (h2 : octets.all (fun x => x ≤ 255)) :
      let n := (octets.get! 0) * 256^3 +
               (octets.get! 1) * 256^2 +
               (octets.get! 2) * 256^1 +
               (octets.get! 3) * 256^0
      (int32_to_ip n = String.intercalate "." (octets.map toString)) :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
  
  /--
  info: '128.114.17.104'
  -/
  #guard_msgs in
  #eval int32_to_ip 2154959208
  
  /--
  info: '0.0.0.0'
  -/
  #guard_msgs in
  #eval int32_to_ip 0
  
  /--
  info: '128.32.10.1'
  -/
  #guard_msgs in
  #eval int32_to_ip 2149583361

