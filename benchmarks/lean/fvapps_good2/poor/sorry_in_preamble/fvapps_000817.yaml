vc-description: |-

vc-preamble: |-
  def max_list (l : List Nat) : Nat := sorry
  
  def enumerate_add (shops : List Nat) : List Nat :=
    let range := List.range shops.length
    List.map (fun i => shops[i]! + i) range

vc-helpers: |-

vc-definitions: |-
  def find_min_velocity (n : Nat) (shops : List Nat) : Nat :=
  sorry

vc-theorems: |-
  theorem min_velocity_greater_than_max_attractiveness (n : Nat) (shops : List Nat)
    (h : shops.length > 0) :
    find_min_velocity n shops ≥ max_list shops :=
  sorry
  
  theorem min_velocity_accounts_for_position (n : Nat) (shops : List Nat) (pos : Nat)
    (h1 : pos < shops.length) (h2 : shops.length > 0) :
    find_min_velocity n shops ≥ shops[pos]! + pos :=
  sorry
  
  theorem min_velocity_allows_decreasing_speeds (n : Nat) (shops : List Nat)
    (h : shops.length ≥ 2) :
    ∀ i : Nat, i < shops.length →
    find_min_velocity n shops - i ≥ shops[i]! :=
  sorry
  
  theorem min_velocity_is_optimal (n : Nat) (shops : List Nat)
    (h : shops.length > 0) :
    find_min_velocity n shops = max_list (enumerate_add shops) :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded
  
  /--
  info: 6
  -/
  #guard_msgs in
  #eval find_min_velocity 5 [6, 5, 4, 3, 2]
  
  /--
  info: 5
  -/
  #guard_msgs in
  #eval find_min_velocity 5 [3, 4, 3, 1, 1]
  
  /--
  info: 4
  -/
  #guard_msgs in
  #eval find_min_velocity 3 [4, 2, 1]

