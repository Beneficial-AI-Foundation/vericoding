vc-description: |-

vc-preamble: |-
  def find_max_remainder (nums : List Nat) : Nat := sorry
  
  def list_maximum (nums : List Nat) : Nat :=
    match nums with
    | [] => 0
    | (x::xs) => List.foldl Nat.max x xs

vc-helpers: |-

vc-definitions: |-
  def list_sort (nums : List Nat) : List Nat :=
  sorry

vc-theorems: |-
  theorem find_max_remainder_nonnegative (nums : List Nat) (h : nums ≠ []) :
    find_max_remainder nums ≥ 0 :=
  sorry
  
  theorem find_max_remainder_less_than_max (nums : List Nat) (h : nums ≠ []) :
    find_max_remainder nums < list_maximum nums :=
  sorry
  
  theorem find_max_remainder_order_independent (nums : List Nat) (h : nums ≠ []) :
    find_max_remainder nums = find_max_remainder (list_sort nums) :=
  sorry
  
  theorem find_max_remainder_duplicates_independent (nums : List Nat) (h : nums ≠ []) :
    find_max_remainder nums = find_max_remainder (nums.eraseDups) :=
  sorry
  
  theorem find_max_remainder_all_same (n : Nat) (nums : List Nat)
    (h : nums = List.replicate (List.length nums) n) :
    find_max_remainder nums = 0 :=
  sorry

vc-postamble: |-
  -- Apps difficulty: competition
  -- Assurance level: unguarded
  
  /--
  info: 2
  -/
  #guard_msgs in
  #eval find_max_remainder [3, 4, 5]
  
  /--
  info: 0
  -/
  #guard_msgs in
  #eval find_max_remainder [1, 2, 4]
  
  /--
  info: 30
  -/
  #guard_msgs in
  #eval find_max_remainder [4, 4, 10, 13, 28, 30, 41, 43, 58, 61, 70, 88]

