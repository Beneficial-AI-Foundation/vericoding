vc-description: |-
  /-
  Here you have to do some mathematical operations on a "dirty string". This kata checks some basics, it's not too difficult.
  
  __So what to do?__
  
  Input: String which consists of two positive numbers (doubles) and exactly one operator like `+, -, * or /` always between these numbers. The string is dirty, which means that there are different characters inside too, not only numbers and the operator. You have to combine all digits left and right, perhaps with "." inside (doubles), and to calculate the result which has to be rounded to an integer and converted to a string at the end.
  
  ### Easy example:
  
  ```
  Input: "gdfgdf234dg54gf*23oP42"
  Output: "54929268" (because 23454*2342=54929268)
  ```
  
  First there are some static tests, later on random tests too...
  
  ### Hope you have fun! :-)
  -/

vc-preamble: |-
  def isValidDigit (c : Char) : Bool :=
    match c with
    | '0' => true | '1' => true | '2' => true | '3' => true | '4' => true
    | '5' => true | '6' => true | '7' => true | '8' => true | '9' => true
    | '.' => true | '+' => true | '-' => true | '*' => true | '/' => true
    | _ => false

vc-helpers: |-

vc-definitions: |-
  def String.filter (s : String) (p : Char → Bool) : String := sorry
  
  def calculate_string (s : String) : String :=
  sorry

vc-theorems: |-
  theorem calculate_string_evaluates_expressions
    (n₁ n₂ : Float) (op : Char)
    (h_op : op ∈ ['+', '-', '*', '/'])
    (h_div : op = '/' → n₂ ≠ 0)
    : let expr := s!"{n₁}{op}{n₂}"
      let noisy_expr := s!"abc{expr}xyz!@#"
      let result := calculate_string noisy_expr
      let clean_expr := String.filter expr isValidDigit
      let expected := toString (Float.round (match op with
        | '+' => n₁ + n₂
        | '-' => n₁ - n₂
        | '*' => n₁ * n₂
        | '/' => n₁ / n₂
        | _ => 0))
      result = expected :=
  sorry
  
  theorem calculate_string_preserves_single_number
    (n : Int) (h : -1000000 ≤ n ∧ n ≤ 1000000)
    : toString (String.toInt! (calculate_string (toString n))) = toString n :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
  
  /--
  info: '47'
  -/
  #guard_msgs in
  #eval calculate_string ";$%§fsdfsd235??df/sdfgf5gh.000kk0000"
  
  /--
  info: '54929268'
  -/
  #guard_msgs in
  #eval calculate_string "sdfsd23454sdf*2342"
  
  /--
  info: '234676'
  -/
  #guard_msgs in
  #eval calculate_string "fsdfsd234.4554s4234df+sf234442"

