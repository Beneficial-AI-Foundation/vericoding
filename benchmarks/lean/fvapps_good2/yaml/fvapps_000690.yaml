vc-description: |-
  /-
  $Gogi$, $Tapu$ and $Sonu$ are the elite members of $Tapu$ $Sena$. $Gogi$ is always stoned and asks absurd questions, But this time he asked a question which seems to be very serious and interesting. $Tapu$ wants to solve this question to impress $Sonu$. He  gave an array of length N to $Tapu$, $Tapu$ can perform the following operations exactly once:
  - Remove any subarray from the given array given the resulting array formed after the removal is non-empty.    
  - Reverse the whole array.
  Remember you can’t shuffle the elements of the array.
  Tapu needs to find out the maximum possible GCD of all the numbers in the array after applying the given operations exactly once. Tapu is very weak at programming, he wants you to solve this problem so that he can impress $Sonu$.
  
  -----Input:-----
  - The first line contains $T$, the number of test cases.
  - For each test case
  -FIrst line contains $N$.
  - Last line contains $N$ numbers of the array. 
  
  -----Output:-----
  A single integer in a new line, maximum possible GCD. 
  
  -----Constraints-----
  - $1 \leq T \leq 10^2$
  - $1 \leq N \leq 10^4$
  - $1 \leq a[i] \leq 10^9$
  
  Summation of N for all testcases is less than $10^6$ 
  
  -----Sample Input 1:-----
  1
  1
  2
  
  -----Sample Output 1:-----
  2
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def solve (n : Nat) (arr : List Nat) : Nat :=
    sorry
  
  def find_max_gcd (arr : List Nat) : Nat :=
    sorry
  
  def gcd_of_list (numbers : List Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem solve_returns_valid : ∀ (n : Nat) (arr : List Nat),
    arr ≠ [] → solve n arr = arr.head! ∨ solve n arr = arr.getLast! :=
  sorry
  
  theorem solve_optimality : ∀ (n : Nat) (arr : List Nat),
    arr ≠ [] →
    (arr.length = 1 → solve n arr = arr.head!) ∧
    (arr.length > 1 → solve n arr ≥ arr.head! ∧ solve n arr ≥ arr.getLast!) :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible
  
  /--
  info: 2
  -/
  #guard_msgs in
  #eval solve 1 [2]
  
  /--
  info: 6
  -/
  #guard_msgs in
  #eval solve 3 [6, 9, 3]
  
  /--
  info: 36
  -/
  #guard_msgs in
  #eval solve 4 [12, 18, 24, 36]

