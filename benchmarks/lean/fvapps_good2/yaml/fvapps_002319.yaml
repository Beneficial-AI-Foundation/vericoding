vc-description: |-

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def find_k_diff_pairs (nums : List Int) (k : Int) : Int :=
    sorry
  
  def countOccurrences (nums : List Int) (x : Int) : Nat :=
    sorry
  
  def dedup (nums : List Int) : List Int :=
    sorry

vc-theorems: |-
  theorem k_diff_pairs_property :
    ∀ (nums : List Int) (k : Int),
    let result := find_k_diff_pairs nums k
    result ≥ 0 ∧ (k < 0 → result = 0) :=
  sorry
  
  theorem positive_k_pairs_symmetric :
    ∀ (nums : List Int) (k : Int),
    k > 0 →
    find_k_diff_pairs nums (-k) = 0 :=
  sorry
  
  theorem k_diff_pairs_subset :
    ∀ (nums : List Int) (k : Int),
    k > 0 →
    nums.length > 0 →
    let subset := nums.take (nums.length / 2)
    find_k_diff_pairs subset k ≤ find_k_diff_pairs nums k :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible
  
  /-
  info: 2
  -/
  #guard_msgs in
  #eval find_k_diff_pairs [3, 1, 4, 1, 5] 2
  
  /-
  info: 4
  -/
  #guard_msgs in
  #eval find_k_diff_pairs [1, 2, 3, 4, 5] 1
  
  /-
  info: 1
  -/
  #guard_msgs in
  #eval find_k_diff_pairs [1, 3, 1, 5, 4] 0

