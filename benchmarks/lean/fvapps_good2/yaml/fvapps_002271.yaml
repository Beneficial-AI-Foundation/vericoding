vc-description: |-

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def hammingDistance (s1 s2 : String) : Nat :=
    sorry
  
  def verifyResult (result : String) (strings : List String) : Bool :=
    sorry
  
  def findSimilarString (strings : List String) (n m : Nat) : String :=
    sorry
  
  def isLower (c : Char) : Bool :=
    sorry

vc-theorems: |-
  theorem find_similar_string_properties {strings : List String} {n m : Nat}
    (h1 : n = strings.length)
    (h2 : m > 0)
    (h3 : ∀ s ∈ strings, s.length = m)
    (result := findSimilarString strings n m) :
      (result = "-1" ∨ result.length = m) ∧
      (result = "-1" ∨ ∀ c ∈ result.data, isLower c) ∧
      verifyResult result strings
    :=
  sorry
  
  theorem binary_strings_property {strings : List String} {n m : Nat}
    (h1 : strings.length = 2)
    (h2 : strings.head!.length = strings.tail!.head!.length)
    (h3 : ∀ s ∈ strings, ∀ c ∈ s.data, c = 'a' ∨ c = 'b')
    (result := findSimilarString strings n m) :
      verifyResult result strings
    :=
  sorry
  
  theorem small_inputs_property {strings : List String} {n m : Nat}
    (h1 : strings.length ≤ 3)
    (h2 : strings.length > 0)
    (h3 : ∀ s ∈ strings, s.length = strings.head!.length)
    (result := findSimilarString strings n m) :
      verifyResult result strings
    :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
  
  /--
  info: '-1'
  -/
  #guard_msgs in
  #eval find_similar_string ["aaaa", "bbbb"] 2 4
  
  /--
  info: 'aaa'
  -/
  #guard_msgs in
  #eval find_similar_string ["baa", "aaa", "aab"] 3 3

