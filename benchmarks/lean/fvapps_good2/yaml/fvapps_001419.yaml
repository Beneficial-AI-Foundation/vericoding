vc-description: |-
  /- Any valid result should be either -1 or non-negative -/
  
  -- Apps difficulty: interview
  -- Assurance level: unguarded
  
  /- Trivial 1x1 grid case should return 0 -/
  
  /- Any valid result should not exceed grid dimensions -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def solve_robots_meeting (n m k1 k2 : Nat) (grid : Array (Array Nat)) : Int :=
    sorry

vc-theorems: |-
  theorem result_valid_range {n m k1 k2 : Nat} {grid : Array (Array Nat)} :
    let result := solve_robots_meeting n m k1 k2 grid
    result = -1 ∨ result ≥ 0 := by
    sorry
  
  theorem trivial_case :
    let grid := #[#[0]]
    solve_robots_meeting 1 1 1 1 grid = 0 := by
    sorry
  
  theorem result_bounds {n m k1 k2 : Nat} {grid : Array (Array Nat)} :
    let result := solve_robots_meeting n m k1 k2 grid
    result = -1 ∨ result ≤ n * m := by
    sorry

vc-postamble: |-
  /-
  info: 5
  -/
  #guard_msgs in
  #eval solve_robots_meeting 4 4 1 1 #[[0, 1, 1, 0], [0, 1, 1, 0], [0, 1, 1, 0], [0, 0, 0, 0]]
  
  /-
  info: -1
  -/
  #guard_msgs in
  #eval solve_robots_meeting 4 4 1 1 #[[0, 1, 1, 0], [0, 1, 1, 0], [0, 1, 1, 0], [1, 0, 0, 1]]

