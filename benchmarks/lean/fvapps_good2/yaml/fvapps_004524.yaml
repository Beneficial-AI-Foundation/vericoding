vc-description: |-
  -- Apps difficulty: introductory
  
  -- Assurance level: unguarded

vc-preamble: |-
  def add : Int → Int → Int := fun a b => a + b
  
  def sub : Int → Int → Int := fun a b => a - b
  
  def mul : Int → Int → Int := fun a b => a * b
  
  def div : Int → Int → Int := fun a b => a / b
  
  axiom placeholder_identity (args : List Int) (h : args.length > 0) :
    x args = args.head!
  
  axiom placeholder_binary_ops_forward (a b : Int) :
    (add (x [a]) b) = add a b ∧
    (sub (x [a]) b) = sub a b ∧
    (mul (x [a]) b) = mul a b
  
  axiom placeholder_binary_ops_reverse (a b : Int) :
    add b (x [a]) = add b a ∧
    sub b (x [a]) = sub b a ∧
    mul b (x [a]) = mul b a
  
  axiom placeholder_binary_ops_div (a b : Int) :
    b ≠ 0 → div (x [a]) b = div a b
  
  axiom placeholder_binary_ops_div_reverse (a b : Int) :
    a ≠ 0 → div b (x [a]) = div b a
  
  axiom placeholder_chaining (args : List Int) (h : args.length > 1) :
    add (x [args.head!]) (x [args.tail.head!]) = add args.head! args.tail.head! ∧
    mul (x [args.head!]) (x [args.tail.head!]) = mul args.head! args.tail.head! ∧
    add (x [args.head!]) (mul 2 (x [args.tail.head!])) = add args.head! (mul 2 args.tail.head!)
  
  axiom placeholder_constant_folding (a : Int) :
    add (add 2 3) (x [a]) = add 5 a ∧
    add (mul 2 3) (x [a]) = add 6 a

vc-helpers: |-

vc-definitions: |-
  def x : List Int → Int :=
  sorry

vc-theorems: |-

vc-postamble: |-

