vc-description: |-
  -- Result is non-negative (trivial in Lean since Nat is used)
  
  -- Number of 1 bits is preserved
  
  -- Helper function to count ones
  
  -- Power of 2 input results in power of 2 output
  
  -- Edge cases

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def reverse_bits (n : Nat) : Nat :=
  sorry
  
  def count_ones (n : Nat) : Nat :=
  sorry

vc-theorems: |-
  theorem reverse_bits_nonneg (n : Nat) :
    reverse_bits n ≥ 0 :=
  sorry
  
  theorem reverse_bits_preserves_ones (n : Nat) (h : n < 2^32) :
    count_ones n = count_ones (reverse_bits n) :=
  sorry
  
  theorem reverse_bits_preserves_power_of_two (n : Nat) (h : n < 2^32)
    (h₁ : n ≠ 0) (h₂ : n &&& (n - 1) = 0) :
    (reverse_bits n) &&& ((reverse_bits n) - 1) = 0 :=
  sorry
  
  theorem reverse_bits_zero :
    reverse_bits 0 = 0 :=
  sorry
  
  theorem reverse_bits_one :
    reverse_bits 1 = 1 :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible
  
  /-
  info: 267
  -/
  #guard_msgs in
  #eval reverse_bits 417
  
  /-
  info: 0
  -/
  #guard_msgs in
  #eval reverse_bits 0
  
  /-
  info: 1
  -/
  #guard_msgs in
  #eval reverse_bits 1024

