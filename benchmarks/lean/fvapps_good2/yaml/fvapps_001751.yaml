vc-description: |-

vc-preamble: |-
  def isSorted (l : List Int) : Prop :=
    ∀ i j, i < j → j < l.length → l[i]! < l[j]!

vc-helpers: |-

vc-definitions: |-
  def find_number_of_lis (nums : List Int) : Nat :=
    sorry

vc-theorems: |-
  theorem number_of_lis_properties (nums : List Int) :
    let result := find_number_of_lis nums
    result ≥ 0 ∧
    (nums = [] → result = 0)
  := by
  sorry
  
  theorem constant_list_property {n : Nat} (x : Int) :
    find_number_of_lis (List.replicate n x) = n
  := by
  sorry
  
  theorem strictly_increasing_property (nums : List Int) (h : nums ≠ []) :
    isSorted nums →
    find_number_of_lis nums = 1
  := by
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded
  
  /-
  info: 2
  -/
  #guard_msgs in
  #eval find_number_of_lis [1, 3, 5, 4, 7]
  
  /-
  info: 5
  -/
  #guard_msgs in
  #eval find_number_of_lis [2, 2, 2, 2, 2]
  
  /-
  info: 3
  -/
  #guard_msgs in
  #eval find_number_of_lis [1, 2, 4, 3, 5, 4, 7, 2]

