vc-description: |-
  /-
  Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.
  
  Example 1:
  
  Input: [3,2,1,5,6,4] and k = 2
  Output: 5
  
  Example 2:
  
  Input: [3,2,3,1,2,4,5,5,6] and k = 4
  Output: 4
  
  Note: 
  You may assume k is always valid, 1 ≤ k ≤ array's length.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def find_kth_largest (nums : List Int) (k : Nat) : Int :=
    sorry
  
  def max_list (l : List Int) : Int :=
    sorry
  
  def min_list (l : List Int) : Int :=
    sorry
  
  def sort_desc (l : List Int) : List Int :=
    sorry

vc-theorems: |-
  theorem find_kth_largest_element_membership
    (nums : List Int) (k : Nat) (h : k > 0) (h' : k ≤ nums.length) :
    (find_kth_largest nums k) ∈ nums :=
  sorry
  
  theorem find_kth_largest_lower_bound
    (nums : List Int) (k : Nat) (h : k > 0) (h' : k ≤ nums.length) :
    (nums.filter (fun x => x ≥ find_kth_largest nums k)).length ≥ k :=
  sorry
  
  theorem find_kth_largest_upper_bound
    (nums : List Int) (k : Nat) (h : k > 0) (h' : k ≤ nums.length) :
    (nums.filter (fun x => x > find_kth_largest nums k)).length < k :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible
  
  /--
  info: 5
  -/
  #guard_msgs in
  #eval find_kth_largest [3, 2, 1, 5, 6, 4] 2
  
  /--
  info: 4
  -/
  #guard_msgs in
  #eval find_kth_largest [3, 2, 3, 1, 2, 4, 5, 5, 6] 4
  
  /--
  info: 5
  -/
  #guard_msgs in
  #eval find_kth_largest [2, 1, 3, 4, 5, 6] 2

