vc-description: |-
  /-
  Given: an array containing hashes of names
  
  Return: a string formatted as a list of names separated by commas except for the last two names, which should be separated by an ampersand.
  
  Example:
  
  ``` ruby
  list([ {name: 'Bart'}, {name: 'Lisa'}, {name: 'Maggie'} ])
  # returns 'Bart, Lisa & Maggie'
  
  list([ {name: 'Bart'}, {name: 'Lisa'} ])
  # returns 'Bart & Lisa'
  
  list([ {name: 'Bart'} ])
  # returns 'Bart'
  
  list([])
  # returns ''
  ```
  ``` elixir
  list([ %{name: "Bart"}, %{name: "Lisa"}, %{name: "Maggie"} ])
  # returns 'Bart, Lisa & Maggie'
  
  list([ %{name: "Bart"}, %{name: "Lisa"} ])
  # returns 'Bart & Lisa'
  
  list([ %{name: "Bart"} ])
  # returns 'Bart'
  
  list([])
  # returns ''
  ```
  ``` javascript
  list([ {name: 'Bart'}, {name: 'Lisa'}, {name: 'Maggie'} ])
  // returns 'Bart, Lisa & Maggie'
  
  list([ {name: 'Bart'}, {name: 'Lisa'} ])
  // returns 'Bart & Lisa'
  
  list([ {name: 'Bart'} ])
  // returns 'Bart'
  
  list([])
  // returns ''
  ```
  ```python
  namelist([ {'name': 'Bart'}, {'name': 'Lisa'}, {'name': 'Maggie'} ])
  # returns 'Bart, Lisa & Maggie'
  
  namelist([ {'name': 'Bart'}, {'name': 'Lisa'} ])
  # returns 'Bart & Lisa'
  
  namelist([ {'name': 'Bart'} ])
  # returns 'Bart'
  
  namelist([])
  # returns ''
  ```
  
  Note: all the hashes are pre-validated and will only contain A-Z, a-z, '-' and '.'.
  -/
  
  -- Result contains all original names
  
  -- Has & separator
  
  -- Has correct number of commas
  
  -- Last name appears after &

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def namelist (names : List (String × String)) : String :=
    sorry
  
  def containsSubstr (s₁ s₂ : String) : Bool :=
    sorry
  
  def String.count (s : String) (c : Char) : Nat :=
    sorry

vc-theorems: |-
  theorem namelist_empty_list :
    namelist [] = "" :=
  sorry
  
  theorem namelist_single_name (name : String) :
    namelist [(name, "name")] = name :=
  sorry
  
  theorem namelist_multiple_names {n : ℕ} (names : List (String × String))
    (h1 : names.length > 1)
    (h2 : ∀ p ∈ names, p.2 = "name") :
    let result := namelist names;
    let all_names := names.map Prod.fst;
  
    (∀ name ∈ all_names, containsSubstr result name)
  
    ∧ containsSubstr result " & "
  
    ∧ (String.count result ',' = names.length - 2)
  
    ∧ (result.splitOn " & ").get! 1 = names.getLast?.get!.1 :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
  
  /--
  info: 'Bart, Lisa & Maggie'
  -/
  #guard_msgs in
  #eval namelist [{"name": "Bart"}, {"name": "Lisa"}, {"name": "Maggie"}]
  
  /--
  info: 'Bart & Lisa'
  -/
  #guard_msgs in
  #eval namelist [{"name": "Bart"}, {"name": "Lisa"}]
  
  /--
  info: ''
  -/
  #guard_msgs in
  #eval namelist []

