vc-description: |-

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def solve_cyclic_permutation (n m q : Nat) (p : List Nat) (a : List Nat) (queries : List (Nat × Nat)) : String :=
    sorry
  
  def String.reverse (s : String) : String :=
  sorry

vc-theorems: |-
  theorem result_is_valid_binary_string {n m q : Nat} {p a : List Nat} {queries : List (Nat × Nat)}
    (h₁ : n > 0) (h₂ : m > 0) (h₃ : q > 0)
    (h₄ : p.length = n) (h₅ : a.length = m)
    (h₆ : queries.length = q)
    (h₇ : ∀ x ∈ p, 1 ≤ x ∧ x ≤ n)
    (h₈ : ∀ x ∈ a, 1 ≤ x ∧ x ≤ n)
    (h₉ : ∀ q ∈ queries, 1 ≤ q.1 ∧ q.1 ≤ m ∧ 1 ≤ q.2 ∧ q.2 ≤ m ∧ q.1 ≤ q.2) :
    let result := solve_cyclic_permutation n m q p a queries
    result.length = q ∧ ∀ c ∈ result.data, c = '0' ∨ c = '1' :=
  sorry
  
  theorem query_ordering_invariant {n m q : Nat} {p a : List Nat} {queries : List (Nat × Nat)}
    (h₁ : n > 0) (h₂ : m > 0) (h₃ : q > 0)
    (h₄ : p.length = n) (h₅ : a.length = m)
    (h₆ : queries.length = q)
    (h₇ : ∀ x ∈ p, 1 ≤ x ∧ x ≤ n)
    (h₈ : ∀ x ∈ a, 1 ≤ x ∧ x ≤ n)
    (h₉ : ∀ q ∈ queries, 1 ≤ q.1 ∧ q.1 ≤ m ∧ 1 ≤ q.2 ∧ q.2 ≤ m ∧ q.1 ≤ q.2) :
    solve_cyclic_permutation n m q p a queries =
    String.reverse (solve_cyclic_permutation n m q p a (List.reverse queries)) :=
  sorry

vc-postamble: |-
  -- Apps difficulty: competition
  -- Assurance level: unguarded
  
  /-
  info: '110'
  -/
  #guard_msgs in
  #eval solve_cyclic_permutation 3 6 3 [2, 1, 3] [1, 2, 3, 1, 2, 3] [[1, 5], [2, 6], [3, 5]]
  
  /-
  info: '010'
  -/
  #guard_msgs in
  #eval solve_cyclic_permutation 2 4 3 [2, 1] [1, 1, 2, 2] [[1, 2], [2, 3], [3, 4]]
  
  /-
  info: '1'
  -/
  #guard_msgs in
  #eval solve_cyclic_permutation 1 1 1 [1] [1] [[1, 1]]

