vc-description: |-

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def List.sort (l : List α) : List α :=
    sorry
  
  def same (a b : List (List Int)) : Bool :=
    sorry

vc-theorems: |-
  theorem same_reflexive (arr : List (List Int)) : same arr arr = true := by
    sorry
  
  theorem same_symmetric (arr_a arr_b : List (List Int)) :
    (List.map List.sort arr_a).sort = (List.map List.sort arr_b).sort →
    same arr_a arr_b = true ∧ same arr_b arr_a = true := by
    sorry
  
  theorem same_single_array (nums : List Int) :
    same [nums] [nums.reverse] = true := by
    sorry
  
  theorem same_order_invariant (arr_a arr_b : List (List Int)) :
    (List.map List.sort arr_a).sort = (List.map List.sort arr_b).sort →
    same arr_a arr_b = true := by
    sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval same [[2, 5], [3, 6]] [[5, 2], [3, 6]]
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval same [] []
  
  /--
  info: False
  -/
  #guard_msgs in
  #eval same [[2, 3], [3, 2]] [[2, 3]]

