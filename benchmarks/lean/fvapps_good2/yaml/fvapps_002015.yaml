vc-description: |-

vc-preamble: |-
  def Card := Nat
  
  def Pile := List Card

vc-helpers: |-

vc-definitions: |-
  def Game := List (Nat × Pile)
  
  def listSum (l : List Nat) : Nat :=
    sorry
  
  def solve_card_game (g : Game) : Nat × Nat :=
    sorry

vc-theorems: |-
  theorem solve_card_game_returns_tuple (g : Game) :
    let (a, b) := solve_card_game g
    a ≥ 0 ∧ b ≥ 0 :=
  sorry
  
  theorem sum_scores_equals_input (g : Game) :
    let (a, b) := solve_card_game g
    let total := g.map (fun p => listSum p.2) |> listSum
    a + b = total :=
  sorry
  
  theorem first_pile_split_correctly (g : Game) (h : g ≠ []) :
    let first := g.head h
    let k := first.1 / 2 + 1
    let first_sum := listSum first.2
    let rest_sum := g.tail.map (fun p => listSum p.2) |> listSum
    let (a, b) := solve_card_game g
    a + b = first_sum + rest_sum :=
  sorry

vc-postamble: |-
  -- Apps difficulty: competition
  -- Assurance level: unguarded
  
  /--
  info: (101, 10)
  -/
  #guard_msgs in
  #eval solve_card_game [[1, 100], [2, 1, 10]]
  
  /--
  info: (30, 15)
  -/
  #guard_msgs in
  #eval solve_card_game [[9, 2, 8, 6, 5, 9, 4, 7, 1, 3]]
  
  /--
  info: (18, 18)
  -/
  #guard_msgs in
  #eval solve_card_game [[3, 1, 3, 2], [3, 5, 4, 6], [2, 8, 7]]

