vc-description: |-

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def solve_max_path_profits (n: Nat) (values: List Nat) (edges: List (Nat × Nat)) : Nat :=
    sorry
  
  def is_valid_tree (n: Nat) (edges: List (Nat × Nat)) : Bool :=
    sorry

vc-theorems: |-
  theorem single_node_case (n: Nat) (values: List Nat) :
    n = 1 → solve_max_path_profits n values [] = 0 := by
    sorry
  
  theorem valid_inputs_result_properties (n: Nat) (values: List Nat) (edges: List (Nat × Nat)) :
    n ≥ 2 →
    values.length ≥ n →
    is_valid_tree n edges = true →
    let result := solve_max_path_profits n values edges
    (result ≥ 0 ∧ result ≤ 10^9 + 7) := by
    sorry
  
  theorem line_graph_properties (n: Nat) (values: List Nat) :
    n ≥ 2 →
    values.length ≥ n →
    let edges := List.range (n-1) |>.map (fun i => (i+1, i+2))
    let result := solve_max_path_profits n values edges
    result ≥ 0 := by
    sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
  
  /--
  info: 24
  -/
  #guard_msgs in
  #eval solve_max_path_profits 4 [1, 2, 3, 4] [(1, 2), (2, 3), (2, 4)]
  
  /--
  info: 15
  -/
  #guard_msgs in
  #eval solve_max_path_profits 5 [1, 2, 3, 4, 5] [(1, 2), (2, 3), (3, 4), (4, 5)]

