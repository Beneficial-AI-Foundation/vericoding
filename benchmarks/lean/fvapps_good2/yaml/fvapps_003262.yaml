vc-description: |-
  /-
  # Introduction
  
  There is a war and nobody knows - the alphabet war!  
  There are two groups of hostile letters. The tension between left side letters and right side letters was too high and the war began. The letters called airstrike to help them in war - dashes and dots are spreaded everywhere on the battlefield.
  
  # Task
  
  Write a function that accepts `fight` string consists of only small letters and `*` which means a bomb drop place. Return who wins the fight after bombs are exploded. When the left side wins return `Left side wins!`, when the right side wins return `Right side wins!`, in other case return `Let's fight again!`.
  
  The left side letters and their power:
  ```
   w - 4
   p - 3 
   b - 2
   s - 1
  ```
  The right side letters and their power:
  ```
   m - 4
   q - 3 
   d - 2
   z - 1
  ```
  The other letters don't have power and are only victims.  
  The `*` bombs kills the adjacent letters ( i.e. `aa*aa` => `a___a`, `**aa**` => `______` );
  
  # Example
  
  # Alphabet war Collection
  
  Alphavet war 
  
  Alphabet war - airstrike - letters massacre
  
  Alphabet wars - reinforces massacre
  
  Alphabet wars - nuclear strike
  
  Alphabet war - Wo lo loooooo priests join the war
  -/

vc-preamble: |-
  def Result := String
  deriving Repr, BEq

vc-helpers: |-

vc-definitions: |-
  def alphabet_war (s : String) : Result :=
  sorry
  
  def alphabet_war_valid_result (s : String) :
    let result := alphabet_war s
    result = "Left side wins!" ∨ result = "Right side wins!" ∨ result = "Let's fight again!" :=
  sorry
  
  def only_left_letters_never_right (s : String) :
    (∀ c ∈ s.data, c ∈ ['w', 'p', 'b', 's']) →
    s.length > 0 →
    alphabet_war s ≠ "Right side wins!" :=
  sorry
  
  def only_right_letters_never_left (s : String) :
    (∀ c ∈ s.data, c ∈ ['m', 'q', 'd', 'z']) →
    s.length > 0 →
    alphabet_war s ≠ "Left side wins!" :=
  sorry
  
  def only_bombs_is_draw (s : String) :
    (∀ c ∈ s.data, c = '*') →
    s.length > 0 →
    alphabet_war s = "Let's fight again!" :=
  sorry
  
  def adjacent_bomb_nullifies (c : Char) :
    c ∈ ['w', 'p', 'b', 's', 'm', 'q', 'd', 'z'] →
    alphabet_war (String.mk ['*', c]) = "Let's fight again!" ∧
    alphabet_war (String.mk [c, '*']) = "Let's fight again!" :=
  sorry
  
  def repeated_string_same_winner (s : String) :
    (∀ c ∈ s.data, c ∈ ['w', 'p', 'b', 's', 'm', 'q', 'd', 'z']) →
    s.length > 0 →
    alphabet_war s = alphabet_war (s ++ s) :=
  sorry

vc-theorems: |-

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
  
  /--
  info: 'Right side wins!'
  -/
  #guard_msgs in
  #eval alphabet_war "z"
  
  /--
  info: "Let's fight again!"
  -/
  #guard_msgs in
  #eval alphabet_war "z*dq*mw*pb*s"
  
  /--
  info: 'Left side wins!'
  -/
  #guard_msgs in
  #eval alphabet_war "sz**z**zs"

