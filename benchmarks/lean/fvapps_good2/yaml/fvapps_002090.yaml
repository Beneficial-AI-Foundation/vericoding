vc-description: |-

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def solve_max_chain_length (n m : Nat) (edges : List (Nat × Nat)) : Int :=
  sorry
  
  def to_adj_matrix (n : Nat) (edges : List (Nat × Nat)) : List (List Nat) :=
  sorry
  
  def is_bipartite (adj : List (List Nat)) (colors : List Int) (start n : Nat) : Bool :=
  sorry

vc-theorems: |-
  theorem bipartite_property (n m : Nat) (edges : List (Nat × Nat)) :
    let result := solve_max_chain_length n m edges
    let adj := to_adj_matrix n edges
    ∀ colors : List Int,
    result ≠ -1 →
    colors.length = n →
    (∀ i < n, colors[i]! = -1 ∨ colors[i]! = 0 ∨ colors[i]! = 1) →
    ∀ start < n,
    is_bipartite adj colors start n = true :=
  sorry
  
  theorem empty_graph_property (n m : Nat) (edges : List (Nat × Nat)) :
    m = 0 →
    solve_max_chain_length n m edges = 0 :=
  sorry

vc-postamble: |-
  -- Apps difficulty: competition
  -- Assurance level: guarded
  
  /--
  info: 3
  -/
  #guard_msgs in
  #eval solve_max_chain_length 5 4 [(1, 2), (2, 3), (3, 4), (3, 5)]
  
  /--
  info: -1
  -/
  #guard_msgs in
  #eval solve_max_chain_length 4 6 [(1, 2), (2, 3), (1, 3), (3, 4), (2, 4), (1, 4)]
  
  /--
  info: 2
  -/
  #guard_msgs in
  #eval solve_max_chain_length 4 2 [(1, 3), (2, 4)]

