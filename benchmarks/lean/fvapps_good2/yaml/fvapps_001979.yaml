vc-description: |-
  /- Helper function to get maximum of a list -/
  
  /- Main solve function signature -/
  
  /- Result of solve is always a natural number -/
  
  -- Apps difficulty: competition
  -- Assurance level: unguarded
  
  /- Result is at least the maximum weight in the input weights -/
  
  /- For singleton input, result equals the single weight -/
  
  /- Properties for small cases (n ≤ 3) -/

vc-preamble: |-
  def list_max (xs : List Nat) : Nat :=
  match xs with
  | [] => 0
  | (x::xs) => List.foldl Nat.max x xs

vc-helpers: |-

vc-definitions: |-
  def make_tree_edges (n : Nat) (edge_weights : List Nat) : List (Nat × Nat × Nat) :=
  sorry
  
  def solve (n : Nat) (weights : List Nat) (roads : List (Nat × Nat × Nat)) : Nat :=
  sorry

vc-theorems: |-
  theorem solve_produces_nat (n : Nat) (weights : List Nat) (roads : List (Nat × Nat × Nat)) :
    solve n weights roads ≥ 0 :=
  sorry
  
  theorem solve_at_least_max_weight (n : Nat) (weights : List Nat) (roads : List (Nat × Nat × Nat))
    (h : weights ≠ []) :
    solve n weights roads ≥ list_max weights :=
  sorry
  
  theorem solve_singleton (w : Nat) :
    solve 1 [w] [] = w :=
  sorry
  
  theorem solve_small_cases (n : Nat) (weights : List Nat) (h₁ : n ≤ 3) (h₂ : weights.length = n)
    (h₃ : weights ≠ []) :
    let roads := List.map (fun i => (i + 1, i + 2, 1)) (List.range (n-1))
    solve n weights roads ≥ list_max weights :=
  sorry

vc-postamble: |-
  /--
  info: 3
  -/
  #guard_msgs in
  #eval solve 3 [1, 3, 3] [[1, 2, 2], [1, 3, 2]]
  
  /--
  info: 7
  -/
  #guard_msgs in
  #eval solve 5 [6, 3, 2, 5, 0] [[1, 2, 10], [2, 3, 3], [2, 4, 1], [1, 5, 1]]
  
  /--
  info: 42
  -/
  #guard_msgs in
  #eval solve 1 [42] []

