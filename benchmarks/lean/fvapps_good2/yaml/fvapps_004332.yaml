vc-description: |-
  -- Property 1: Function should work for any valid positive integer string input
  
  -- Property 2: Powers of 2 should have n-1 consecutive zeros
  
  -- Property 3: Result should be same for equivalent decimal values

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def max_consec_zeros (n: String) : String :=
    sorry
  
  def toWord (n: Nat) : String :=
    sorry

vc-theorems: |-
  theorem max_consec_zeros_valid_input {n: String} (h: ∃ (k: Nat), k > 0 ∧ k ≤ 10^6 ∧ n = toString k) :
    let result := max_consec_zeros n
    ∃ word, word ∈ ["Zero", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine",
                    "Ten", "Eleven", "Twelve", "Thirteen"] ∧ result = word :=
  sorry
  
  theorem powers_of_two_zeros {n: Nat} (h: n > 0 ∧ n ≤ 12) :
    max_consec_zeros (toString (2^n)) = toWord (n-1) :=
  sorry
  
  theorem equivalent_decimal_values {n: Nat} (h: n > 0 ∧ n ≤ 10000) :
    max_consec_zeros (toString n) = max_consec_zeros (toString (n : Nat)) :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
  
  /-
  info: 'Two'
  -/
  #guard_msgs in
  #eval max_consec_zeros "9"
  
  /-
  info: 'Three'
  -/
  #guard_msgs in
  #eval max_consec_zeros "550"
  
  /-
  info: 'Eight'
  -/
  #guard_msgs in
  #eval max_consec_zeros "256"

