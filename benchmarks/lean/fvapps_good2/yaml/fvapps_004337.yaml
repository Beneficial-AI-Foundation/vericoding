vc-description: |-
  /-
  Take debugging to a whole new level:
  
  Given a string, remove every *single* bug.
  
  This means you must remove all instances of the word 'bug' from within a given string, *unless* the word is plural ('bugs').
  
  For example, given 'obugobugobuoobugsoo', you should return 'ooobuoobugsoo'.
  
  Another example: given 'obbugugo', you should return 'obugo'.
  
  Note that all characters will be lowercase.
  
  Happy squishing!
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def debug (s : String) : String :=
  sorry
  
  def String.containsSubstr (s str : String) : Bool :=
  sorry
  
  def String.countOccurrences (s str : String) : Nat :=
  sorry

vc-theorems: |-
  theorem debug_basic_properties (s : String) :
    let result := debug s
    (¬ result.containsSubstr "bug" ∨ result.containsSubstr "bugs") ∧
    result.length ≤ s.length ∧
    result = s.replace "bug" "" :=
  sorry
  
  theorem debug_preserves_bugs (s : String) (h : ∀ c ∈ s.data, c = 'b' ∨ c = 'u' ∨ c = 'g' ∨ c = 's') :
    (debug s).countOccurrences "bugs" = s.countOccurrences "bugs" :=
  sorry
  
  theorem debug_idempotent (s : String) :
    debug (debug s) = debug s :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
  
  /--
  info: 'ooobuoobugsoo'
  -/
  #guard_msgs in
  #eval debug "obugobugobuoobugsoo"
  
  /--
  info: 'bugs gy'
  -/
  #guard_msgs in
  #eval debug "bugs buggy"
  
  /--
  info: ''
  -/
  #guard_msgs in
  #eval debug "bugbugbugbug"

