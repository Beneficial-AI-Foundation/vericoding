vc-description: |-
  /-
  Indraneel's student has given him data from two sets of experiments that the student has performed. Indraneel wants to establish a correlation between the two sets of data. Each data set is a sequence of $N$ numbers. The two data sets do not match number for number, but Indraneel believes that this is because data has been shifted due to inexact tuning of the equipment.
  For example, consider the following two sequences:
  $ $
  3  8   4  23  9  11  28
  2  3  22  26  8  16  12
  
  $ $
  Indraneel observes that if we consider the subsequences $3,4,23,9$ and $2,3,22,8$ and examine their successive differences we get $1,19,-14$. He considers these two subsequences to be "identical". He would like to find the longest such pair of subsequences so that the successive differences are identical. Your task is to help him do this.
  
  -----Input:-----
  The first line of the input will contain a single integer $N$ indicating the number of data points in each of Indraneel's student's data sets. This is followed by two lines, each containing $N$ integers.
  
  -----Output:-----
  The output consists of three lines. The first line of output contains a single integer indicating the length of the longest pair of subsequences (one from each sequence) that has identical successive differences. This is followed by two lines each containing the corresponding subsequences. If there is more than one answer, it suffices to print one.
  
  -----Constraints:-----
  - $1 \leq N \leq 150$.
  - $0 \leq$ Each data point $\leq 1000$
  
  -----Sample Input-----
  7
  3 8 4 23 9 11 28  
  2 3 22 26 8 16 12 
  
  -----Sample Output-----
  4
  3 4 23 9
  2 3 22 8
  -/
  
  -- Apps difficulty: interview
  -- Assurance level: guarded

vc-preamble: |-
  def Point := Int × Int
  
  def Rectangle := List Point

vc-helpers: |-

vc-definitions: |-
  def calculate_rectangle_characteristics (points : Rectangle) : Float × Float × Float × Float × Float :=
    sorry

vc-theorems: |-
  def length (points : Rectangle) : Float :=
    let (l, _, _, _, _) := calculate_rectangle_characteristics points
    l
  
  def width (points : Rectangle) : Float :=
    let (_, w, _, _, _) := calculate_rectangle_characteristics points
    w
  
  def area (points : Rectangle) : Float :=
    let (_, _, a, _, _) := calculate_rectangle_characteristics points
    a
  
  def perimeter (points : Rectangle) : Float :=
    let (_, _, _, p, _) := calculate_rectangle_characteristics points
    p
  
  def diagonal (points : Rectangle) : Float :=
    let (_, _, _, _, d) := calculate_rectangle_characteristics points
    d
  
  theorem length_positive (points : Rectangle) :
    length points > 0 :=
  sorry
  
  theorem width_positive (points : Rectangle) :
    width points > 0 :=
  sorry
  
  theorem area_is_length_times_width (points : Rectangle) :
    area points = length points * width points :=
  sorry
  
  theorem perimeter_formula (points : Rectangle) :
    perimeter points = 2 * (length points + width points) :=
  sorry
  
  theorem diagonal_formula (points : Rectangle) :
    diagonal points = Float.sqrt (length points * length points + width points * width points) :=
  sorry
  
  theorem diagonal_larger_than_sides (points : Rectangle) :
    diagonal points > length points ∧ diagonal points > width points :=
  sorry
  
  theorem measurements_match_points (points : Rectangle) (h : points.length = 4) :
    ∃ x1 x2 y1 y2 : Int,
      (x2 > x1 ∧ y2 > y1) ∧
      points = [(x1, y1), (x1, y2), (x2, y1), (x2, y2)] ∧
      length points = Float.ofInt (x2 - x1) ∧
      width points = Float.ofInt (y2 - y1) :=
  sorry

vc-postamble: |-

