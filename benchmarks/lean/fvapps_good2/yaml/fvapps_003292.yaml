vc-description: |-
  -- Helper function to count char occurrences in string
  
  -- If scramble returns true, first string is at least as long as second
  
  -- A string can always be scrambled to form itself
  
  -- If scramble is true, all chars in s2 appear at least as many times in s1
  
  -- Any non-empty string can be scrambled to form empty string
  
  -- Empty string cannot form non-empty string
  
  -- Strings with disjoint character sets cannot be scrambled

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def scramble (s1 s2 : String) : Bool :=
    sorry
  
  def countChar (s : String) (c : Char) : Nat :=
    sorry

vc-theorems: |-
  theorem scramble_length_property (s1 s2 : String) :
    s1.length > 0 → s2.length > 0 → scramble s1 s2 = true → s1.length ≥ s2.length :=
  sorry
  
  theorem scramble_identical_strings (s : String) :
    s.length > 0 → scramble s s = true :=
  sorry
  
  theorem scramble_subset_property (s1 s2 : String) (c : Char) :
    s1.length > 0 → s2.length > 0 → scramble s1 s2 = true →
    (countChar s2 c) ≤ (countChar s1 c) :=
  sorry
  
  theorem scramble_empty_second_string (s : String) :
    s.length > 0 → scramble s "" = true :=
  sorry
  
  theorem scramble_empty_first_string (c : Char) :
    scramble "" (String.singleton c) = false :=
  sorry
  
  theorem scramble_disjoint_alphabets (s1 s2 : String) :
    s1.length > 0 → s2.length > 0 →
    (∀ c, s1.contains c → ¬s2.contains c) →
    scramble s1 s2 = false :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
  
  /-
  info: True
  -/
  #guard_msgs in
  #eval scramble "rkqodlw" "world"
  
  /-
  info: True
  -/
  #guard_msgs in
  #eval scramble "cedewaraaossoqqyt" "codewars"
  
  /-
  info: False
  -/
  #guard_msgs in
  #eval scramble "katas" "steak"

