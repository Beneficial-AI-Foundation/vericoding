vc-description: |-
  /-
  In this kata your mission is to rotate matrix counter - clockwise N-times.
  
  So, you will have 2 inputs:
  
      1)matrix
  
      2)a number, how many times to turn it
  
  And an output is turned matrix.  
  Example:
  
      matrix = [[1, 2, 3, 4],
                [5, 6, 7, 8],
                [9, 10, 11, 12],
                [13, 14, 15, 16]]
  
      times_to_turn = 1
  
  It should return this:
  
      [[4, 8, 12, 16],
       [3, 7, 11, 15],
       [2, 6, 10, 14],
       [1, 5, 9, 13]])
  
  Note: all matrixes will be square. Also random tests will have big numbers in input (times to turn)
  
  Happy coding!
  -/

vc-preamble: |-
  def Matrix (α : Type) [BEq α] := List (List α)

vc-helpers: |-

vc-definitions: |-
  def is_valid_matrix {α : Type} [BEq α] (m : Matrix α) : Bool :=
  sorry
  
  def rotate_against_clockwise {α : Type} [BEq α] (m : Matrix α) (times : Nat) : Matrix α :=
  sorry
  
  def get_matrix_dimensions {α : Type} [BEq α] (m : Matrix α) : Nat × Nat :=
  sorry

vc-theorems: |-
  theorem dimensions_preserved {α : Type} [BEq α] (m : Matrix α) :
    is_valid_matrix m →
    let dims := get_matrix_dimensions m
    get_matrix_dimensions (rotate_against_clockwise m 1) = dims :=
  sorry
  
  theorem rotation_modulo {α : Type} [BEq α] (m : Matrix α) (times : Nat) :
    is_valid_matrix m →
    rotate_against_clockwise m times = rotate_against_clockwise m (times % 4) :=
  sorry
  
  theorem four_rotations_identity {α : Type} [BEq α] (m : Matrix α) :
    is_valid_matrix m →
    rotate_against_clockwise m 4 = m :=
  sorry
  
  theorem single_column_dimensions {α : Type} [BEq α] (m : Matrix α) :
    is_valid_matrix m →
    (∀ (row : List α), List.elem row m → List.length row = 1) →
    let rotated := rotate_against_clockwise m 1
    List.length rotated = List.length (List.head! m) ∧
    ∀ (row : List α), List.elem row rotated → List.length row = List.length m :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
  
  /--
  info: expected1
  -/
  #guard_msgs in
  #eval rotate_against_clockwise [[1, 2], [3, 4]] 1
  
  /--
  info: expected2
  -/
  #guard_msgs in
  #eval rotate_against_clockwise [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]] 1
  
  /--
  info: expected3
  -/
  #guard_msgs in
  #eval rotate_against_clockwise matrix2 2

