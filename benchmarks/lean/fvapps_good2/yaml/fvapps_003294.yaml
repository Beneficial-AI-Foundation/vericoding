vc-description: |-
  /-
  The goal is to write a pair of functions the first of which will take a string of binary along with a specification of bits, which will return a numeric, signed complement in two's complement format. The second will do the reverse. It will take in an integer along with a number of bits, and return a binary string. 
  
  https://en.wikipedia.org/wiki/Two's_complement
  
  Thus, to_twos_complement should take the parameters binary = "0000 0001", bits = 8 should return 1. And, binary = "11111111", bits = 8 should return -1 . While, from_twos_complement should return "00000000" from the parameters n = 0, bits = 8 . And, "11111111" from n = -1, bits = 8. 
  
  You should account for some edge cases.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def to_twos_complement (binary : String) (bits : Nat) : Int :=
  sorry
  
  def from_twos_complement (n : Int) (bits : Nat) : String :=
  sorry
  
  def removeWhitespace (s : String) : String :=
  sorry

vc-theorems: |-
  theorem twos_complement_roundtrip (n : Int) (bits : Nat)
    (h1 : bits > 0) (h2 : bits ≤ 64)
    (h3 : n ≥ -(2^(bits-1))) (h4 : n ≤ 2^(bits-1) - 1) :
    to_twos_complement (from_twos_complement n bits) bits = n :=
  sorry
  
  theorem binary_roundtrip (binary : String) (bits : Nat)
    (h1 : bits > 0) (h2 : bits ≤ 64)
    (h3 : String.length binary = bits)
    (h4 : ∀ c ∈ binary.data, c = '0' ∨ c = '1') :
    from_twos_complement (to_twos_complement binary bits) bits = binary :=
  sorry
  
  theorem bit_length (n : Int) (bits : Nat)
    (h1 : bits > 0) (h2 : bits ≤ 64) :
    String.length (from_twos_complement n bits) = bits ∧
    (∀ c ∈ (from_twos_complement n bits).data, c = '0' ∨ c = '1') :=
  sorry
  
  theorem whitespace_handling (binary : String) (bits : Nat)
    (h1 : bits > 0) (h2 : bits ≤ 64)
    (h3 : String.length (removeWhitespace binary) = bits)
    (h4 : ∀ c ∈ (removeWhitespace binary).data, c = '0' ∨ c = '1') :
    to_twos_complement binary bits = to_twos_complement (removeWhitespace binary) bits :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
  
  /--
  info: 1
  -/
  #guard_msgs in
  #eval to_twos_complement "00000001" 8
  
  /--
  info: '00000001'
  -/
  #guard_msgs in
  #eval from_twos_complement 1 8
  
  /--
  info: -1
  -/
  #guard_msgs in
  #eval to_twos_complement "11111111" 8
  
  /--
  info: '11111111'
  -/
  #guard_msgs in
  #eval from_twos_complement -1 8
  
  /--
  info: -1440552402
  -/
  #guard_msgs in
  #eval to_twos_complement "1010 1010 0010 0010 1110 1010 0010 1110" 32
  
  /--
  info: '10101010001000101110101000101110'
  -/
  #guard_msgs in
  #eval from_twos_complement -1440552402 32

