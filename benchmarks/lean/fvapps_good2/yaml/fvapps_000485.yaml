vc-description: |-

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def min_increment_for_unique (nums : List Int) : Nat :=
    sorry
  
  def sorted (l : List Int) : List Int :=
    sorry
  
  def makeUnique (nums : List Int) : List Int :=
    sorry
  
  def sumList (l : List Int) : Int :=
    sorry

vc-theorems: |-
  theorem min_increment_nonneg (nums : List Int) :
    min_increment_for_unique nums ≥ 0 :=
  sorry
  
  theorem min_increment_empty (nums : List Int) :
    nums = [] → min_increment_for_unique nums = 0 :=
  sorry
  
  theorem min_increment_single (nums : List Int) (x : Int) :
    nums = [x] → min_increment_for_unique nums = 0 :=
  sorry
  
  theorem min_increment_sort_invariant (nums : List Int) :
    min_increment_for_unique nums = min_increment_for_unique (sorted nums) :=
  sorry
  
  theorem min_increment_makes_unique (nums : List Int) :
    let result := sorted nums
    let incremented := makeUnique result
    min_increment_for_unique nums = (sumList incremented - sumList result) :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
  
  /-
  info: 1
  -/
  #guard_msgs in
  #eval min_increment_for_unique [1, 2, 2]
  
  /-
  info: 6
  -/
  #guard_msgs in
  #eval min_increment_for_unique [3, 2, 1, 2, 1, 7]
  
  /-
  info: 0
  -/
  #guard_msgs in
  #eval min_increment_for_unique []

