vc-description: |-
  /-
  # Task
  Let's define a `parameter` of number `n` as the least common multiple (LCM) of the sum of its digits and their product.
  
  Calculate the parameter of the given number `n`.
  
  # Input/Output
  
  `[input]` integer `n`
  
   A positive integer. It is guaranteed that no zero appears in `n`.
  
  `[output]` an integer
  
   The parameter of the given number.
  
  # Example
  
  For `n = 22`, the output should be `4`.
  
  Both the sum and the product of digits equal 4, and LCM(4, 4) = 4.
  
  For `n = 1234`, the output should be `120`.
  
  `1+2+3+4=10` and `1*2*3*4=24`, LCM(10,24)=120
  -/

vc-preamble: |-
  def listSum (xs : List Nat) : Nat :=
    match xs with
    | [] => 0
    | x :: xs => x + listSum xs
  
  def listProd (xs : List Nat) : Nat :=
    match xs with
    | [] => 1
    | x :: xs => x * listProd xs

vc-helpers: |-

vc-definitions: |-
  def fromDigits (ds : List Nat) : Nat := sorry
  
  def parameter (n : Nat) : Nat :=
  sorry
  
  def digits (n : Nat) : List Nat :=
  sorry

vc-theorems: |-
  theorem parameter_single_digit (d : Nat)
    (h : d > 0)
    (h2 : d â‰¤ 9) :
    parameter d = d :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible
  
  /--
  info: 4
  -/
  #guard_msgs in
  #eval parameter 22
  
  /--
  info: 120
  -/
  #guard_msgs in
  #eval parameter 1234
  
  /--
  info: 378
  -/
  #guard_msgs in
  #eval parameter 239

