vc-description: |-

vc-preamble: |-
  def MOD : Nat := 1000000007

vc-helpers: |-

vc-definitions: |-
  def solve_binary_string (s : String) : Nat :=
  sorry
  
  def is_binary_string (s : String) : Bool :=
  sorry

vc-theorems: |-
  theorem solve_binary_string_properties {s : String} (h : is_binary_string s = true) :
    let result := solve_binary_string s
    0 ≤ result ∧ result ≤ MOD :=
  sorry
  
  theorem all_zeros {s : String} (h : ∀ c ∈ s.data, c = '0') :
    solve_binary_string s = s.length :=
  sorry
  
  theorem mod_property {s : String} (h : is_binary_string s = true) :
    solve_binary_string s < MOD :=
  sorry
  
  theorem split_ones {s : String} (h : is_binary_string s = true)
    (h2 : s.data.filter (· = '1') = []) :
    solve_binary_string s = String.length s :=
  sorry

vc-postamble: |-
  -- Apps difficulty: competition
  -- Assurance level: guarded
  
  /--
  info: 3
  -/
  #guard_msgs in
  #eval solve_binary_string "000"
  
  /--
  info: 6
  -/
  #guard_msgs in
  #eval solve_binary_string "0101"
  
  /--
  info: 16
  -/
  #guard_msgs in
  #eval solve_binary_string "0001111"

