vc-description: |-
  /-
  I found this interesting interview question just today:
  
  > *8 coins are given where all the coins have equal weight, except one. The odd one weights less than the others, not being of pure gold. In the worst case, how many iterations are actually needed to find the odd one out on a two plates scale*.
  
  I am asking you then to tell me what is the *minimum* amount of weighings it will take to measure `n` coins in every possible occurrence (including worst case scenario, ie: without relying on luck at all).
  
  `n` is guaranteed to be a positive integer.
  
  ***Tip:*** being able to think *recursively* might help here :p
  
  ***Note:*** albeit this is more clearly a logical than a coding problem, do not underestimate (or under-rank) the kata for requiring not necessarily wizard-class coding skills: a good coder is a master of pattern recognition and subsequent optimization ;)
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def how_many_measurements (n : Nat) : Nat :=
    sorry
  
  def log3ceil (n : Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem measurements_non_negative (n : Nat) (h : n > 0) :
    how_many_measurements n ≥ 0 :=
  sorry
  
  theorem measurements_sufficient (n : Nat) (h : n > 0) :
    3^(how_many_measurements n) ≥ n :=
  sorry
  
  theorem edge_case_one :
    how_many_measurements 1 = 0 :=
  sorry
  
  theorem edge_case_two :
    how_many_measurements 2 = 1 :=
  sorry
  
  theorem edge_case_three :
    how_many_measurements 3 = 1 :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible
  
  /--
  info: 0
  -/
  #guard_msgs in
  #eval how_many_measurements 1
  
  /--
  info: 1
  -/
  #guard_msgs in
  #eval how_many_measurements 2
  
  /--
  info: 1
  -/
  #guard_msgs in
  #eval how_many_measurements 3
  
  /--
  info: 2
  -/
  #guard_msgs in
  #eval how_many_measurements 8
  
  /--
  info: 5
  -/
  #guard_msgs in
  #eval how_many_measurements 100

