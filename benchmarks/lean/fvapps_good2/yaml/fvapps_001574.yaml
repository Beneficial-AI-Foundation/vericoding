vc-description: |-
  /-
  Given two numbers: 'left' and 'right' (1 <= 'left' <= 'right' <= 200000000000000)
  return sum of all '1' occurencies in binary representations of numbers between 'left' and 'right' (including both)
  
  ``` 
  Example:
  countOnes 4 7 should return 8, because:
  4(dec) = 100(bin), which adds 1 to the result.
  5(dec) = 101(bin), which adds 2 to the result.
  6(dec) = 110(bin), which adds 2 to the result.
  7(dec) = 111(bin), which adds 3 to the result.
  So finally result equals 8.
  ```
  WARNING: Segment may contain billion elements, to pass this kata, your solution cannot iterate through all numbers in the segment!
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def countOnes (a b : Nat) : Nat :=
  sorry
  
  def toBinary (n : Nat) : List Nat :=
  sorry
  
  def countBinaryOnes (n : Nat) : Nat :=
  sorry

vc-theorems: |-
  theorem countOnes_non_negative
    (a b : Nat)
    (h1 : 0 < a) (h2 : a ≤ 10^6)
    (h3 : 0 < b) (h4 : b ≤ 10^6) :
    0 ≤ countOnes a b :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible
  
  /--
  info: 8
  -/
  #guard_msgs in
  #eval countOnes 4 7
  
  /--
  info: 2
  -/
  #guard_msgs in
  #eval countOnes 5 5
  
  /--
  info: 14846928141
  -/
  #guard_msgs in
  #eval countOnes 1 1000000000

