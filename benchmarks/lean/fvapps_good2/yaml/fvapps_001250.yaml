vc-description: |-

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def can_obtain_k (n : Nat) (k : Nat) (edges : List (Nat × Nat)) (values : List Nat) : String :=
  sorry
  
  def is_valid_tree (n : Nat) (edges : List (Nat × Nat)) : Bool :=
  sorry

vc-theorems: |-
  theorem can_obtain_k_returns_valid_output (n : Nat) (k : Nat) (edges : List (Nat × Nat))
      (values : List Nat) (h1 : is_valid_tree n edges = true) :
    (can_obtain_k n k edges values = "YES") ∨ (can_obtain_k n k edges values = "NO") :=
  sorry
  
  theorem can_obtain_k_identical_values_consistent (n : Nat) (k : Nat) (edges : List (Nat × Nat))
      (h1 : is_valid_tree n edges = true) :
    let values := List.replicate n 1
    can_obtain_k n k edges values = can_obtain_k n k edges values :=
  sorry
  
  theorem can_obtain_k_valid_edges (n : Nat) (k : Nat) (edges : List (Nat × Nat))
      (values : List Nat) (h1 : is_valid_tree n edges = true) :
    edges.length = n - 1 :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
  
  /--
  info: 'YES'
  -/
  #guard_msgs in
  #eval can_obtain_k 6 85 [(1, 2), (2, 3), (2, 4), (4, 5), (3, 6)] [3, 5, 4, 7, 1, 9]
  
  /--
  info: 'YES'
  -/
  #guard_msgs in
  #eval can_obtain_k 3 4 [(1, 2), (1, 3)] [2, 3, 1]
  
  /--
  info: 'NO'
  -/
  #guard_msgs in
  #eval can_obtain_k 4 100 [(1, 2), (2, 3), (2, 4)] [3, 4, 2, 5]

