vc-description: |-

vc-preamble: |-
  def listSum : List Nat → Nat
  | [] => 0
  | x::xs => x + listSum xs
  
  def listMin : List Nat → Nat
  | [] => 0
  | [x] => x
  | x::xs => min x (listMin xs)
  
  def secondMin : List Nat → Nat
  | [] => 0
  | [_] => 0
  | l =>
    let m := listMin l
    listMin (l.filter (fun x => x ≠ m))

vc-helpers: |-

vc-definitions: |-
  def solve (chips : List Nat) : Nat :=
  sorry

vc-theorems: |-
  theorem solve_two_identical_bounded (a b : Nat)
    (h₁ : a > 0)
    (h₂ : b > 0) :
    solve [a, a, b] ≤ (a + a + b) / 2 :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible
  
  /--
  info: 1
  -/
  #guard_msgs in
  #eval solve [1, 1, 1]
  
  /--
  info: 2
  -/
  #guard_msgs in
  #eval solve [1, 2, 1]
  
  /--
  info: 9
  -/
  #guard_msgs in
  #eval solve [8, 2, 8]

