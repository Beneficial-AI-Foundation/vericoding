vc-description: |-

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def solve_proxy_attendance (D : Nat) (S : String) : Int :=
    sorry
  
  def countP (s : String) : Nat :=
    sorry

vc-theorems: |-
  theorem result_range {D : Nat} {S : String} (h : D ≥ 5) (h2 : D ≤ 100) (h3 : S.length = D) :
    let result := solve_proxy_attendance D S
    result = -1 ∨ result ≥ 0 :=
  sorry
  
  theorem all_present {D : Nat} (h : D ≥ 5) (h2 : D ≤ 100) :
    solve_proxy_attendance D (String.mk (List.replicate D 'P')) = 0 :=
  sorry
  
  theorem too_many_absences {D : Nat} (h : D ≥ 5) (h2 : D ≤ 100) :
    solve_proxy_attendance D (String.mk (List.replicate D 'A')) = -1 :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible
  
  /-
  info: 1
  -/
  #guard_msgs in
  #eval solve_proxy_attendance 9 "PAAPPAPPP"
  
  /-
  info: -1
  -/
  #guard_msgs in
  #eval solve_proxy_attendance 5 "PAAAA"
  
  /-
  info: 0
  -/
  #guard_msgs in
  #eval solve_proxy_attendance 8 "PPPPPPPP"

