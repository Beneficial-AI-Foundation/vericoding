vc-description: |-
  /-
  Given a char array representing tasks CPU need to do. It contains capital letters A to Z where different letters represent different tasks.Tasks could be done without original order. Each task could be done in one interval. For each interval, CPU could finish one task or just be idle.
  
  However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle. 
  
  You need to return the least number of intervals the CPU will take to finish all the given tasks.
  
  Example 1:
  
  Input: tasks = ["A","A","A","B","B","B"], n = 2
  Output: 8
  Explanation: A -> B -> idle -> A -> B -> idle -> A -> B.
  
  Note:
  
  The number of tasks is in the range [1, 10000].
  The integer n is in the range [0, 100].
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def least_interval (tasks : List Char) (n : Nat) : Nat :=
    sorry
  
  def countFrequencies (tasks : List Char) : List Nat :=
    sorry
  
  def maxFrequency (tasks : List Char) : Nat :=
    sorry
  
  def maxFrequencyCount (tasks : List Char) : Nat :=
    sorry

vc-theorems: |-
  theorem least_interval_zero_cooldown (tasks : List Char) (h : tasks ≠ []) :
    least_interval tasks 0 = tasks.length :=
  sorry
  
  theorem least_interval_basic_properties (tasks : List Char) (n : Nat) (h : tasks ≠ []) :
    let result := least_interval tasks n
    let max_freq := maxFrequency tasks
    let max_freq_count := maxFrequencyCount tasks
    let min_possible := (max_freq - 1) * (n + 1) + max_freq_count
    result ≥ tasks.length ∧ result ≥ min_possible :=
  sorry
  
  theorem least_interval_upper_bound (tasks : List Char) (n : Nat) (h : tasks ≠ []) :
    least_interval tasks n ≤ tasks.length * (n + 1) :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
  
  /--
  info: 8
  -/
  #guard_msgs in
  #eval least_interval ["A", "A", "A", "B", "B", "B"] 2
  
  /--
  info: 5
  -/
  #guard_msgs in
  #eval least_interval ["A", "A", "A"] 1
  
  /--
  info: 4
  -/
  #guard_msgs in
  #eval least_interval ["A", "B", "C", "D"] 0

