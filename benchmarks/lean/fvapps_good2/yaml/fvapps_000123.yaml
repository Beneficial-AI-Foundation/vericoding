vc-description: |-
  /-
  Your task is to calculate ab mod 1337 where a is a positive integer and b is an extremely large positive integer given in the form of an array.
  
  Example1:
  
  a = 2
  b = [3]
  
  Result: 8
  
  Example2:
  
  a = 2
  b = [1,0]
  
  Result: 1024
  
  Credits:Special thanks to @Stomach_ache for adding this problem and creating all test cases.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def super_pow (base : Int) (exponent_digits : List Int) : Int :=
    sorry
  
  def pow_mod (base exp m : Int) : Int :=
    sorry

vc-theorems: |-
  theorem super_pow_range (base : Int) (exp_digits : List Int)
    (h1 : base > 0)
    (h2 : exp_digits.length > 0)
    (h3 : exp_digits.length ≤ 10)
    (h4 : ∀ d ∈ exp_digits, 0 ≤ d ∧ d ≤ 9) :
    let result := super_pow base exp_digits
    0 ≤ result ∧ result < 1337 :=
  sorry
  
  theorem super_pow_small_exp (base : Int) (exp_digit : Int)
    (h1 : base > 0)
    (h2 : 0 ≤ exp_digit)
    (h3 : exp_digit < 5) :
    super_pow base [exp_digit] = pow_mod base exp_digit 1337 :=
  sorry
  
  theorem super_pow_zero (base : Int)
    (h : base > 0) :
    super_pow base [0] = 1 :=
  sorry
  
  theorem super_pow_one (base : Int) (exp_digits : List Int)
    (h1 : exp_digits.length > 0)
    (h2 : exp_digits.length ≤ 5)
    (h3 : ∀ d ∈ exp_digits, 0 ≤ d ∧ d ≤ 9) :
    super_pow 1 exp_digits = 1 :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
  
  /--
  info: 8
  -/
  #guard_msgs in
  #eval super_pow 2 [3]
  
  /--
  info: 1024
  -/
  #guard_msgs in
  #eval super_pow 2 [1, 0]
  
  /--
  info: 9
  -/
  #guard_msgs in
  #eval super_pow 3 [2]

