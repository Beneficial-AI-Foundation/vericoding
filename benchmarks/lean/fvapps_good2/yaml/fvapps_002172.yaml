vc-description: |-
  /- For any valid input arrays A and B of length N, the output is non-negative and less than 2^30 -/
  
  -- Apps difficulty: competition
  -- Assurance level: unguarded
  
  /- The result is symmetric with respect to input arrays -/
  
  /- When both input arrays are identical, the result is even -/
  
  /- When both input arrays contain only zeros, the result is zero -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def compute_xor_sum (N : Nat) (A B : List Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem output_bounds (N : Nat) (A B : List Nat) (h1 : A.length = N) (h2 : B.length = N) (h3 : ∀ x ∈ A, x ≤ 1000000) (h4 : ∀ x ∈ B, x ≤ 1000000) :
    compute_xor_sum N A B ≥ 0 ∧ compute_xor_sum N A B < 2^30 :=
  sorry
  
  theorem symmetry (N : Nat) (A B : List Nat) (h1 : A.length = N) (h2 : B.length = N) :
    compute_xor_sum N A B = compute_xor_sum N B A :=
  sorry
  
  theorem identical_arrays (N : Nat) (A : List Nat) (h : A.length = N) :
    2 ∣ compute_xor_sum N A A :=
  sorry
  
  theorem zero_arrays (N : Nat) :
    compute_xor_sum N (List.replicate N 0) (List.replicate N 0) = 0 :=
  sorry

vc-postamble: |-
  /-
  info: 2
  -/
  #guard_msgs in
  #eval compute_xor_sum 2 [1, 2] [3, 4]
  
  /-
  info: 8
  -/
  #guard_msgs in
  #eval compute_xor_sum 6 [4, 6, 0, 0, 3, 3] [0, 5, 6, 5, 0, 3]
  
  /-
  info: 2
  -/
  #guard_msgs in
  #eval compute_xor_sum 5 [1, 2, 3, 4, 5] [1, 2, 3, 4, 5]

