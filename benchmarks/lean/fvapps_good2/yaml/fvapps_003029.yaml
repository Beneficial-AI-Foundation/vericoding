vc-description: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
  
  /- Sum of empty nested lists is zero -/
  
  /- Sum of singleton list equals its element -/
  
  /- Sum of nested lists equals the sum of flattened list -/

vc-preamble: |-
  def listSum : List Int → Int
    | [] => 0
    | h :: t => h + listSum t

vc-helpers: |-

vc-definitions: |-
  def sumNested : List (List Int) → Int
    | _ =>
  sorry
  
  def flatten : List (List Int) → List Int
    | _ =>
  sorry

vc-theorems: |-
  theorem sum_nested_equals_flatten_sum (l : List (List Int)) :
    sumNested l = listSum (flatten l) := by
    sorry
  
  theorem sum_nested_empty_lists (l : List (List Int)) (h : ∀ x ∈ l, x = []) :
    sumNested l = 0 := by
    sorry
  
  theorem sum_nested_singleton (n : Int) :
    sumNested [[n]] = n := by
    sorry

vc-postamble: |-
  /-
  info: 10
  -/
  #guard_msgs in
  #eval sum_nested [1, [2, [3, [4]]]]
  
  /-
  info: 0
  -/
  #guard_msgs in
  #eval sum_nested [[[], []]]
  
  /-
  info: 8
  -/
  #guard_msgs in
  #eval sum_nested [1, [1], [1, [1]], [1, [1], [1, [1]]]]

