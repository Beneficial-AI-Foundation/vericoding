vc-description: |-

vc-preamble: |-
  inductive Category where
    | fruit : Category
    | meat : Category
    | vegetable : Category
    | other : Category
  deriving BEq, Repr
  
  structure GroceryItem where
    category : Category
    name : String
  deriving Repr
  
  def length4 (s : List α) : Prop := s.length = 4
  
  inductive isSorted : List String → Prop where
    | nil : isSorted []
    | single : (x : String) → isSorted [x]
    | cons : (x y : String) → (rest : List String) →
            x <= y → isSorted (y::rest) → isSorted (x::y::rest)

vc-helpers: |-

vc-definitions: |-
  def group_groceries (input : String) : String :=
    sorry
  
  def isValidCategoryName (name : String) : Bool :=
    sorry

vc-theorems: |-
  theorem group_groceries_produces_four_lines (input : String) :
    length4 ((group_groceries input).splitOn "\n") :=
  sorry
  
  theorem group_groceries_uses_expected_categories (input : String) :
    let lines := (group_groceries input).splitOn "\n"
    lines[0]!.startsWith "fruit:" ∧
    lines[1]!.startsWith "meat:" ∧
    lines[2]!.startsWith "other:" ∧
    lines[3]!.startsWith "vegetable:" :=
  sorry
  
  theorem group_groceries_items_sorted (input : String) (i : Nat) :
    let lines := (group_groceries input).splitOn "\n"
    let items := (lines[i]!.splitOn ":")[1]!.splitOn ","
    items.length > 0 → isSorted items :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
  
  /--
  info: expected1
  -/
  #guard_msgs in
  #eval group_groceries "fruit_banana,vegetable_carrot,meat_chicken,drink_juice"
  
  /--
  info: expected2
  -/
  #guard_msgs in
  #eval group_groceries "fruit_banana,vegetable_carrot,fruit_apple,canned_sardines,drink_juice,fruit_orange"
  
  /--
  info: expected3
  -/
  #guard_msgs in
  #eval group_groceries "fruit_orange"

