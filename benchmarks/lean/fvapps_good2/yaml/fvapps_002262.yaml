vc-description: |-
  /- Theorem stating that result is always a valid index or 0 -/
  
  -- Apps difficulty: introductory
  -- Assurance level: guarded
  
  /- Theorem stating that sorted ascending arrays return 0 -/
  
  /- Theorem stating that single element arrays return 0 -/
  
  /- Theorem stating that constant arrays return 0 -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def findShortestPrefix (n : Nat) (arr : List Int) : Nat :=
    sorry

vc-theorems: |-
  theorem find_shortest_prefix_bounds {n : Nat} {arr : List Int}
    (h : arr.length = n) (h1 : n > 0) :
    let result := findShortestPrefix n arr
    0 ≤ result ∧ result < n :=
  sorry
  
  theorem find_shortest_prefix_sorted_asc {n : Nat} {arr : List Int}
    (h : arr.length = n) (h1 : n > 0)
    (h2 : ∀ i j, i < j → j < arr.length → arr[i]! ≤ arr[j]!) :
    findShortestPrefix n arr = 0 :=
  sorry
  
  theorem find_shortest_prefix_single {arr : List Int}
    (h : arr.length = 1) :
    findShortestPrefix 1 arr = 0 :=
  sorry
  
  theorem find_shortest_prefix_constant {n : Nat} {arr : List Int}
    (h : arr.length = n) (h1 : n > 0)
    (h2 : ∀ i j, i < arr.length → j < arr.length → arr[i]! = arr[j]!) :
    findShortestPrefix n arr = 0 :=
  sorry

vc-postamble: |-
  /-
  info: 0
  -/
  #guard_msgs in
  #eval find_shortest_prefix 4 [1, 2, 3, 4]
  
  /-
  info: 4
  -/
  #guard_msgs in
  #eval find_shortest_prefix 7 [4, 3, 3, 8, 4, 5, 2]
  
  /-
  info: 0
  -/
  #guard_msgs in
  #eval find_shortest_prefix 3 [1, 1, 1]

