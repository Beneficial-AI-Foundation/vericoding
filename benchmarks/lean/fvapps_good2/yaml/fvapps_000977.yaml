vc-description: |-

vc-preamble: |-
  def triangular_num (n : Nat) : Nat :=
  n * (n + 1) / 2

vc-helpers: |-

vc-definitions: |-
  def solve_disjoint_subarrays (n : Nat) (arr : List Nat) : Nat :=
  sorry

vc-theorems: |-
  theorem solve_disjoint_subarrays_output_bounds {n : Nat} {arr : List Nat}
    (hn : n > 0)
    (harr_size : arr.length = n)
    (harr_bounds : ∀ x ∈ arr, 1 ≤ x ∧ x ≤ 1000) :
    let result := solve_disjoint_subarrays n arr
    0 ≤ result ∧ result < 1000000007 :=
  sorry
  
  theorem solve_disjoint_subarrays_singleton {arr : List Nat}
    (hsingle : arr.length = 1)
    (hbound : ∀ x ∈ arr, 1 ≤ x ∧ x ≤ 10) :
    solve_disjoint_subarrays 1 arr = 1 :=
  sorry
  
  theorem solve_disjoint_subarrays_all_equal {n : Nat} {arr : List Nat}
    (hn : n > 1)
    (harr_size : arr.length = n)
    (harr_bounds : ∀ x ∈ arr, 1 ≤ x ∧ x ≤ 10)
    (hall_equal : ∀ x ∈ arr, x = arr.head!) :
    solve_disjoint_subarrays n arr = (triangular_num n) * (triangular_num n) :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
  
  /--
  info: 1
  -/
  #guard_msgs in
  #eval solve_disjoint_subarrays 2 [3, 4]
  
  /--
  info: 3
  -/
  #guard_msgs in
  #eval solve_disjoint_subarrays 3 [1, 2, 2]
  
  /--
  info: 18
  -/
  #guard_msgs in
  #eval solve_disjoint_subarrays 5 [1, 1, 2, 2, 2]

