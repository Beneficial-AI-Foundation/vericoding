vc-description: |-

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def b (n : Int) : String :=
  sorry
  
  def d (s : String) : Int :=
  sorry
  
  def skrzat (mode : String) (input : Int ⊕ String) : String :=
  sorry
  
  def is_valid_binary (s : String) : Bool :=
  sorry

vc-theorems: |-
  theorem bidirectional_conversion : ∀ (n : Int),
    let bin := b n; d bin = n :=
  sorry
  
  theorem binary_valid : ∀ (n : Int),
    is_valid_binary (b n) = true :=
  sorry
  
  theorem skrzat_binary_format : ∀ (binary : String),
    is_valid_binary binary = true →
    ∃ n : Int, skrzat "b" (Sum.inr binary) = s!"From binary: {binary} is {n}" :=
  sorry
  
  theorem skrzat_decimal_format : ∀ (decimal : Int),
    ∃ binary : String,
      skrzat "d" (Sum.inl decimal) = s!"From decimal: {decimal} is {binary}" ∧
      is_valid_binary binary = true :=
  sorry
  
  theorem skrzat_invalid_base : ∀ (input : Int ⊕ String),
    skrzat "x" input ≠ skrzat "d" input ∧ skrzat "x" input ≠ skrzat "b" input :=
  sorry
  
  theorem positive_conversion : ∀ (n : Int),
    n ≥ 0 →
    let bin := b n
    ¬bin.startsWith "-" ∧ d bin = n :=
  sorry
  
  theorem zero_negative_conversion : ∀ (n : Int),
    n ≤ 0 →
    let bin := b n
    d bin = n :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
  
  /-
  info: 'From binary: 1001101 is 61'
  -/
  #guard_msgs in
  #eval skrzat "b" "1001101"
  
  /-
  info: 'From binary: 0111111 is -21'
  -/
  #guard_msgs in
  #eval skrzat "b" "0111111"
  
  /-
  info: 'From binary: 101001000100001 is 19937'
  -/
  #guard_msgs in
  #eval skrzat "b" "101001000100001"
  
  /-
  info: 'From decimal: -137 is 10001011'
  -/
  #guard_msgs in
  #eval skrzat "d" -137
  
  /-
  info: 'From decimal: 137 is 110011001'
  -/
  #guard_msgs in
  #eval skrzat "d" 137
  
  /-
  info: 'From decimal: 8191 is 110000000000011'
  -/
  #guard_msgs in
  #eval skrzat "d" 8191

