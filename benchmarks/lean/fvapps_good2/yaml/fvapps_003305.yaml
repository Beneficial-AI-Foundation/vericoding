vc-description: |-
  /-
  # Definition
  
  **_Extra perfect number_** *is the number that* **_first_** and **_last_** *bits* are **_set bits_**.
  
  ____
  
  # Task
  
  **_Given_**  *a positive integer*   `N` ,  **_Return_** the **_extra perfect numbers_** *in range from*  `1`  to  `N` .
  ____
  
  # Warm-up (Highly recommended)
  
  # [Playing With Numbers Series](https://www.codewars.com/collections/playing-with-numbers)
  ___
  
  # Notes 
  
  * **_Number_** *passed is always*  **_Positive_** .
  
  * **_Returned array/list_** should *contain the extra perfect numbers in ascending order*  **from lowest to highest**
  ___
  
  # Input >> Output Examples
  
  ```
  extraPerfect(3)  ==>  return {1,3}
  ```
  ## **_Explanation_**:
  
  # (1)10 =(1)2
  
  **First** and **last** bits as **_set bits_**.
  
  # (3)10 = (11)2
  
  **First** and **last** bits as **_set bits_**.
  ___
  
  ```
  extraPerfect(7)  ==>  return {1,3,5,7}
  ```
  
  ## **_Explanation_**:
  
  # (5)10 = (101)2
  
  **First** and **last** bits as **_set bits_**.
  
  # (7)10 = (111)2
  
  **First** and **last** bits as **_set bits_**.
  ___
  ___
  ___
  
  # [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)
  
  # [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)
  
  # [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)
  ___
  
  ## ALL translations are welcomed
  
  ## Enjoy Learning !!
  # Zizou
  -/
  
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

vc-preamble: |-
  def isSorted (xs : List Nat) : Prop :=
    ∀ i j, i < j → j < List.length xs → xs[i]! < xs[j]!

vc-helpers: |-

vc-definitions: |-
  def extra_perfect (n : Nat) : List Nat :=
    sorry

vc-theorems: |-
  theorem extra_perfect_only_odd {n : Nat} :
    ∀ x, x ∈ extra_perfect n → x % 2 = 1 :=
  sorry
  
  theorem extra_perfect_bounded {n : Nat} :
    ∀ x, x ∈ extra_perfect n → x ≤ n :=
  sorry
  
  theorem extra_perfect_length {n : Nat} :
    List.length (extra_perfect n) = (n + 1) / 2 :=
  sorry
  
  theorem extra_perfect_binary_ones {n : Nat} :
    ∀ x, x ∈ extra_perfect n →
      ((x &&& 1) = 1) ∧
      ((x &&& (1 <<< (Nat.log2 x))) = (1 <<< (Nat.log2 x))) :=
  sorry

vc-postamble: |-

