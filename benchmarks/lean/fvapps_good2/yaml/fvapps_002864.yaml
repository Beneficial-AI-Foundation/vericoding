vc-description: |-
  /-
  In this Kata you need to write the method SharedBits that returns true if 2 integers share at least two '1' bits. For simplicity assume that all numbers are positive
  
  For example
  int seven = 7;    //0111
  int ten = 10;     //1010
  int fifteen = 15; //1111
  SharedBits(seven, ten);     //false
  SharedBits(seven, fifteen); //true
  SharedBits(ten, fifteen);   //true
  
  - seven and ten share only a single '1' (at index 3)
  - seven and fifteen share 3 bits (at indexes 1, 2, and 3)
  - ten and fifteen  share 2 bits (at indexes 0 and 2)
  
  Hint: you can do this with just string manipulation, but binary operators will make your life much easier.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def countOnes (n : Nat) : Nat :=
    sorry
  
  def shared_bits (a b : Nat) : Bool :=
    sorry

vc-theorems: |-
  theorem shared_bits_symmetric
    {a b : Nat} : shared_bits a b = shared_bits b a := by
    sorry
  
  theorem shared_bits_self
    {x : Nat} : shared_bits x x = (countOnes x > 1) := by
    sorry
  
  theorem shared_bits_and
    {a b : Nat} : shared_bits a b = (countOnes (a &&& b) > 1) := by
    sorry
  
  theorem shared_bits_single_bit
    {x : Nat} (h : x ≤ 1) : shared_bits x x = false := by
    sorry
  
  theorem shared_bits_powers_two
    {p1 p2 : Nat} (h1 : ∃ k1, p1 = 2^k1) (h2 : ∃ k2, p2 = 2^k2) :
    shared_bits p1 p2 = false := by
    sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
  
  /--
  info: False
  -/
  #guard_msgs in
  #eval shared_bits 1 2
  
  /--
  info: False
  -/
  #guard_msgs in
  #eval shared_bits 7 10
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval shared_bits 7 15

