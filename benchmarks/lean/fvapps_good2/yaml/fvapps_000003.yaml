vc-description: |-
  /-
  You have $n$ barrels lined up in a row, numbered from left to right from one. Initially, the $i$-th barrel contains $a_i$ liters of water.
  
  You can pour water from one barrel to another. In one act of pouring, you can choose two different barrels $x$ and $y$ (the $x$-th barrel shouldn't be empty) and pour any possible amount of water from barrel $x$ to barrel $y$ (possibly, all water). You may assume that barrels have infinite capacity, so you can pour any amount of water in each of them. 
  
  Calculate the maximum possible difference between the maximum and the minimum amount of water in the barrels, if you can pour water at most $k$ times.
  
  Some examples:   if you have four barrels, each containing $5$ liters of water, and $k = 1$, you may pour $5$ liters from the second barrel into the fourth, so the amounts of water in the barrels are $[5, 0, 5, 10]$, and the difference between the maximum and the minimum is $10$;  if all barrels are empty, you can't make any operation, so the difference between the maximum and the minimum amount is still $0$. 
  
  -----Input-----
  
  The first line contains one integer $t$ ($1 \le t \le 1000$) — the number of test cases.
  
  The first line of each test case contains two integers $n$ and $k$ ($1 \le k < n \le 2 \cdot 10^5$) — the number of barrels and the number of pourings you can make.
  
  The second line contains $n$ integers $a_1, a_2, \dots, a_n$ ($0 \le a_i \le 10^{9}$), where $a_i$ is the initial amount of water the $i$-th barrel has.
  
  It's guaranteed that the total sum of $n$ over test cases doesn't exceed $2 \cdot 10^5$.
  
  -----Output-----
  
  For each test case, print the maximum possible difference between the maximum and the minimum amount of water in the barrels, if you can pour water at most $k$ times.
  
  -----Example-----
  Input
  2
  4 1
  5 5 5 5
  3 2
  0 0 0
  
  Output
  10
  0
  -/
  
  /- Helper function to sum a list -/
  
  /- Helper function to get maximum of non-empty list -/
  
  -- Apps difficulty: interview
  -- Assurance level: guarded
  
  /- max_water_difference result is greater than or equal to max barrel -/
  
  /- max_water_difference result is less than or equal to sum of all barrels -/
  
  /- max_water_difference does not modify input list -/
  
  /- Helper function to sort list descending -/
  
  /- Helper function to take first n elements -/
  
  /- max_water_difference returns sum of k+1 largest values -/

vc-preamble: |-
  def listSum : List Nat → Nat
    | [] => 0
    | x :: xs => x + listSum xs
  
  def listMaximum : List Nat → Nat
    | [] => 0
    | [x] => x
    | x :: xs => if x > listMaximum xs then x else listMaximum xs
  
  def takeFront : Nat → List Nat → List Nat
    | 0, _ => []
    | _, [] => []
    | n+1, x :: xs => x :: takeFront n xs

vc-helpers: |-

vc-definitions: |-
  def max_water_difference (n : Nat) (k : Nat) (barrels : List Nat) : Nat :=
    sorry
  
  def sortDescending (l : List Nat) : List Nat :=
    sorry

vc-theorems: |-
  theorem max_water_diff_equals_k_plus_one_largest
    {n k : Nat} {barrels : List Nat}
    (h₁ : barrels.length = n)
    (h₂ : k < n) :
    max_water_difference n k barrels =
      listSum (takeFront (k+1) (sortDescending barrels)) :=
  sorry
  
  theorem max_water_diff_ge_max_barrel
    {n k : Nat} {barrels : List Nat}
    (h₁ : barrels.length = n)
    (h₂ : k < n)
    (h₃ : barrels ≠ []) :
    max_water_difference n k barrels ≥ listMaximum barrels :=
  sorry
  
  theorem max_water_diff_le_total_sum
    {n k : Nat} {barrels : List Nat}
    (h₁ : barrels.length = n)
    (h₂ : k < n) :
    max_water_difference n k barrels ≤ listSum barrels :=
  sorry
  
  theorem max_water_diff_preserves_input
    {n k : Nat} {barrels : List Nat}
    (h₁ : barrels.length = n)
    (h₂ : k < n) :
    let original := barrels
    let _ := max_water_difference n k barrels
    barrels = original :=
  sorry

vc-postamble: |-
  /--
  info: 10
  -/
  #guard_msgs in
  #eval max_water_difference 4 1 [5, 5, 5, 5]
  
  /--
  info: 0
  -/
  #guard_msgs in
  #eval max_water_difference 3 2 [0, 0, 0]
  
  /--
  info: 12
  -/
  #guard_msgs in
  #eval max_water_difference 5 2 [1, 2, 3, 4, 5]

