vc-description: |-
  /-
  Given the list of numbers, you are to sort them in non decreasing order.
  
  -----Input-----
  t – the number of numbers in list, then t lines follow [t <= 10^6]. 
  
  Each line contains one integer: N [0 <= N <= 10^6]
  
  -----Output-----
  Output given numbers in non decreasing order.
  
  -----Example-----
  Input:
  5
  5
  3
  6
  7
  1
  
  Output:
  1
  3
  5
  6
  7
  -/
  
  -- Apps difficulty: interview
  -- Assurance level: guarded

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def sort_numbers (nums : List Int) : List String :=
    sorry
  
  def isSorted (l : List Int) : Bool :=
    sorry

vc-theorems: |-
  theorem sort_numbers_ascending (nums : List Int) :
    let result := sort_numbers nums;
    result.length = nums.length ∧
    isSorted (result.map String.toInt!) := by
    sorry
  
  theorem sort_numbers_idempotent_list (nums : List Int) :
    sort_numbers nums = sort_numbers nums := by
    sorry
  
  theorem sort_numbers_bounds (nums : List Int) (h : nums ≠ []) :
    let result := sort_numbers nums
    let vals := result.map String.toInt!
    vals.head! ≤ vals.getLast! ∧
    ∀ x ∈ vals, vals.head! ≤ x ∧ x ≤ vals.getLast! := by
    sorry

vc-postamble: |-

