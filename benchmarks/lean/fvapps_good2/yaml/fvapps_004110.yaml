vc-description: |-
  -- Result is subset of input
  
  -- Each result same length as input
  
  -- Each result has same letters
  
  -- Contains all valid anagrams

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def anagrams (word : String) (words : List String) : List String :=
  sorry
  
  def sameLetters (word1 word2 : String) : Bool :=
  sorry
  
  def reverseString (s : String) : String :=
  sorry

vc-theorems: |-
  theorem anagram_properties (word : String) (words : List String) :
    let result := anagrams word words
  
    (∀ w ∈ result, w ∈ words) ∧
  
    (∀ w ∈ result, String.length w = String.length word) ∧
  
    (∀ w ∈ result, sameLetters w word) ∧
  
    (∀ w ∈ words, sameLetters w word → w ∈ result) :=
  sorry
  
  theorem empty_list (word : String) :
    anagrams word [] = [] :=
  sorry
  
  theorem same_word (word : String) :
    anagrams word [word] = [word] :=
  sorry
  
  theorem reversed_word (word : String) :
    let reversed := reverseString word
    anagrams word [reversed] = [reversed] :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
  
  /--
  info: ['aabb', 'bbaa']
  -/
  #guard_msgs in
  #eval anagrams "abba" ["aabb", "abcd", "bbaa", "dada"]
  
  /--
  info: ['carer', 'racer']
  -/
  #guard_msgs in
  #eval anagrams "racer" ["crazer", "carer", "racar", "caers", "racer"]
  
  /--
  info: []
  -/
  #guard_msgs in
  #eval anagrams "laser" ["lazing", "lazy", "lacer"]

