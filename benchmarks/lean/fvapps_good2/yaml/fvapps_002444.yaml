vc-description: |-
  /- For a list of valid email addresses, all should be returned unchanged -/
  
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
  
  /- For a list of invalid email addresses, an empty list should be returned -/
  
  /- For a mixed list of valid and invalid emails, only valid ones should be returned -/
  
  /- Function should not crash on arbitrary string input -/

vc-preamble: |-
  def Email := String

vc-helpers: |-

vc-definitions: |-
  def validate_emails (emails : List Email) : List Email :=
  sorry
  
  def isValidEmailFormat (e : Email) : Bool :=
  sorry

vc-theorems: |-
  theorem validate_valid_emails (emails : List Email)
    (h : ∀ e ∈ emails, isValidEmailFormat e) :
    validate_emails emails = emails :=
  sorry
  
  theorem validate_invalid_emails (emails : List Email)
    (h : ∀ e ∈ emails, ¬ isValidEmailFormat e) :
    validate_emails emails = [] :=
  sorry
  
  theorem validate_mixed_emails (emails : List Email)
    (valid : List Email := emails.filter isValidEmailFormat) :
    validate_emails emails = valid :=
  sorry
  
  theorem validate_arbitrary_input (inputs : List String) :
    ∃ result, validate_emails inputs = result :=
  sorry

vc-postamble: |-
  /--
  info: ['DEXTER <dexter@hotmail.com>']
  -/
  #guard_msgs in
  #eval validate_emails ["DEXTER <dexter@hotmail.com>", "VIRUS <virus!@variable.:p>"]
  
  /--
  info: ['ALICE <alice123@gmail.com>']
  -/
  #guard_msgs in
  #eval validate_emails ["ALICE <alice123@gmail.com>"]
  
  /--
  info: ['CAROL <carol@xyz.com>']
  -/
  #guard_msgs in
  #eval validate_emails ["INVALID <inv@k.>", "CAROL <carol@xyz.com>"]

