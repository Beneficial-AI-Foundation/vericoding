vc-description: |-

vc-preamble: |-
  def fst_minus (a b : Nat) : Nat :=
    if a ≥ b then a - b else b - a

vc-helpers: |-

vc-definitions: |-
  def abs (n : Nat) : Nat :=
  sorry
  
  def list_sum (l : List Nat) : Nat :=
  sorry
  
  def min_delivery_time (n m k : Nat) (deliveries : List (Nat × Nat × Nat × Nat)) : Nat :=
  sorry

vc-theorems: |-
  theorem min_delivery_time_non_negative (n m k : Nat) (deliveries : List (Nat × Nat × Nat × Nat)) :
    min_delivery_time n m k deliveries ≥ 0 :=
  sorry
  
  theorem min_delivery_time_same_point (n : Nat) :
    let m := n
    let deliveries := [(1,1,1,1)]
    min_delivery_time n m 1 deliveries = 0 :=
  sorry
  
  theorem min_delivery_time_bounded (n m k : Nat) (deliveries : List (Nat × Nat × Nat × Nat)) :
    min_delivery_time n m k deliveries ≤
      list_sum (deliveries.map (fun (d: Nat × Nat × Nat × Nat) =>
        let (x1, y1, x2, y2) := d
        2 * (fst_minus x1 x2 + fst_minus y1 y2))) :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded
  
  /-
  info: 16
  -/
  #guard_msgs in
  #eval min_delivery_time 5 4 3 [[2, 3, 4, 1], [1, 4, 5, 2], [3, 3, 5, 3]]
  
  /-
  info: 23
  -/
  #guard_msgs in
  #eval min_delivery_time 10 2 3 [[1, 2, 10, 2], [2, 1, 9, 1], [4, 1, 7, 1]]

