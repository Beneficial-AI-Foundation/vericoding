vc-description: |-
  /- For small perfect cubes (n ≤ 10), find_nb correctly returns n when given sum of first n cubes -/
  
  -- Apps difficulty: introductory
  -- Assurance level: guarded
  
  /- For any volume that isn't sum of consecutive cubes, find_nb returns -1 -/
  
  /- find_nb returns -1 for non-positive inputs -/
  
  /- For valid inputs, find_nb returns a positive number that produces the input volume -/
  
  /- Any positive result from find_nb produces the claimed volume -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def find_nb (n : Int) : Int :=
  sorry
  
  def sum_cubes (n : Nat) : Nat :=
  sorry

vc-theorems: |-
  theorem find_nb_small_perfect_cubes (n : Nat) (h : n ≤ 10) :
    find_nb (sum_cubes n) = n :=
  sorry
  
  theorem find_nb_invalid_volumes {n : Int} (h : n > 0) :
    find_nb n = -1 ∨ sum_cubes (find_nb n).toNat = n :=
  sorry
  
  theorem find_nb_nonpositive {n : Int} (h : n ≤ 0) :
    find_nb n = -1 :=
  sorry
  
  theorem find_nb_valid_result (n : Nat) :
    let volume := sum_cubes n
    let result := find_nb volume
    result > 0 ∧ sum_cubes result.toNat = volume :=
  sorry
  
  theorem find_nb_produces_volume {n : Int} (h : find_nb n > 0) :
    sum_cubes (find_nb n).toNat = n :=
  sorry

vc-postamble: |-
  /--
  info: 45
  -/
  #guard_msgs in
  #eval find_nb 1071225
  
  /--
  info: -1
  -/
  #guard_msgs in
  #eval find_nb 91716553919377
  
  /--
  info: 2022
  -/
  #guard_msgs in
  #eval find_nb 4183059834009

