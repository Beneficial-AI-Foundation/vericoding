vc-description: |-
  /-
  We define the "unfairness" of a list/array as the *minimal* difference between max(x1,x2,...xk) and min(x1,x2,...xk), for all possible combinations of k elements you can take from the list/array; both minimum and maximum of an empty list/array are considered to be 0.
  
  **More info and constraints:**
  
  * lists/arrays can contain values repeated more than once, plus there are usually more combinations that generate the required minimum;
  * the list/array's length can be any value from 0 to 10^(6);
  * the value of k will range from 0 to the length of the list/array,
  * the minimum unfairness of an array/list with less than 2 elements is 0.
  
  For example:
  
  ```python
  min_unfairness([30,100,1000,150,60,250,10,120,20],3)==20 #from max(30,10,20)-min(30,10,20)==20, minimum unfairness in this sample
  min_unfairness([30,100,1000,150,60,250,10,120,20],5)==90 #from max(30,100,60,10,20)-min(30,100,60,10,20)==90, minimum unfairness in this sample
  min_unfairness([1,1,1,1,1,1,1,1,1,2,2,2,2,2,2],10)==1 #from max(1,1,1,1,1,1,1,1,1,2)-min(1,1,1,1,1,1,1,1,1,2)==1, minimum unfairness in this sample
  min_unfairness([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],10)==0 #from max(1,1,1,1,1,1,1,1,1,1)-min(1,1,1,1,1,1,1,1,1,1)==0, minimum unfairness in this sample
  min_unfairness([1,1,-1],2)==0 #from max(1,1)-min(1,1)==0, minimum unfairness in this sample
  ```
  
  **Note:** shamelessly taken from [here](https://www.hackerrank.com/challenges/angry-children), where it was created and debatably categorized and ranked.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def min_unfairness (arr : List Int) (k : Nat) : Int :=
    sorry
  
  def listMax (xs : List Int) : Int :=
    sorry
  
  def listMin (xs : List Int) : Int :=
    sorry
  
  def sortList (xs : List Int) : List Int :=
    sorry

vc-theorems: |-
  theorem min_unfairness_non_negative {arr : List Int} {k : Nat}
    (h : arr.length > 0) (h2 : k > 0) (h3 : k ≤ arr.length) :
    min_unfairness arr k ≥ 0 :=
  sorry
  
  theorem min_unfairness_k_one {arr : List Int}
    (h : arr.length > 0) :
    min_unfairness arr 1 = 0 :=
  sorry
  
  theorem min_unfairness_max_difference {arr : List Int} {k : Nat}
    (h1 : arr.length > 1) (h2 : k > 0) (h3 : k ≤ arr.length) :
    min_unfairness arr k ≤ listMax arr - listMin arr :=
  sorry
  
  theorem min_unfairness_sort_invariant {arr : List Int} {k : Nat}
    (h1 : k > 1) (h2 : arr.length ≥ k) :
    min_unfairness arr k = min_unfairness (sortList arr) k :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
  
  /--
  info: 20
  -/
  #guard_msgs in
  #eval min_unfairness [30, 100, 1000, 150, 60, 250, 10, 120, 20] 3
  
  /--
  info: 1
  -/
  #guard_msgs in
  #eval min_unfairness [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2] 10
  
  /--
  info: 0
  -/
  #guard_msgs in
  #eval min_unfairness [] 0

