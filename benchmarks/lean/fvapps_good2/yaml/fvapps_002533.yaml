vc-description: |-
  /-
  In this Kata, you will check if it is possible to convert a string to a palindrome by changing one character. 
  
  For instance:
  ```Haskell
  solve ("abbx") = True, because we can convert 'x' to 'a' and get a palindrome. 
  solve ("abba") = False, because we cannot get a palindrome by changing any character. 
  solve ("abcba") = True. We can change the middle character. 
  solve ("aa") = False 
  solve ("ab") = True
  ```
  
  Good luck!
  
  Please also try [Single Character Palindromes](https://www.codewars.com/kata/5a2c22271f7f709eaa0005d3)
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def solve (s : String) : Bool :=
  sorry
  
  def stringReverse (s : String) : String :=
  sorry
  
  def getMismatches (s : String) : Nat :=
  sorry

vc-theorems: |-
  theorem solve_distance_property (s : String)
      (h : s.length > 0)
      (h2 : ∀ c ∈ s.data, c = 'a' ∨ c = 'b' ∨ c = 'c') :
    let mismatches := getMismatches s
    solve s = (mismatches = 1 ∨ (mismatches = 0 ∧ s.length % 2 = 1)) :=
  sorry
  
  theorem solve_symmetry_property (s : String) (h : s.length > 0) :
    solve s = solve (stringReverse s) :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
  
  /--
  info: False
  -/
  #guard_msgs in
  #eval solve "abba"
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval solve "abbaa"
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval solve "abbx"
  
  /--
  info: False
  -/
  #guard_msgs in
  #eval solve "aa"
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval solve "ab"
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval solve "abcba"

