vc-description: |-

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def is_perfect_square (n : Nat) : Bool :=
    sorry
  
  def square_sums_row (n : Nat) : Option (List Nat) :=
    sorry

vc-theorems: |-
  theorem square_sums_row_length {n : Nat} {result : List Nat} :
    square_sums_row n = some result → result.length = n :=
  sorry
  
  theorem square_sums_row_elements {n : Nat} {result : List Nat} :
    square_sums_row n = some result →
    result = (List.map (λ x => x + 1) (List.range n)) :=
  sorry
  
  theorem square_sums_row_adjacent_pairs {n : Nat} {result : List Nat} :
    square_sums_row n = some result →
    ∀ i, i < result.length - 1 →
    is_perfect_square (result[i]! + result[i+1]!) = true :=
  sorry
  
  theorem square_sums_row_impossible_cases :
    (square_sums_row 2 = none) ∧
    (square_sums_row 3 = none) ∧
    (square_sums_row 5 = none) ∧
    (square_sums_row 24 = none) :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
  
  /-
  info: False
  -/
  #guard_msgs in
  #eval square_sums_row 5
  
  /-
  info: False
  -/
  #guard_msgs in
  #eval square_sums_row 24
  
  /-
  info: 15
  -/
  #guard_msgs in
  #eval len square_sums_row(15)
  
  /-
  info: list(range(1, 16))
  -/
  #guard_msgs in
  #eval sorted result

