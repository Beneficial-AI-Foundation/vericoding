vc-description: |-
  /-
  You are given a convex polygon $P$ with vertices $P_0, P_1, \ldots, P_{n-1}$, each having integer coordinates. On each edge $P_{i} P_{(i+1) \% n}$ of the polygon, choose a point $R_i$ uniformly at random. What is the expected area of the convex hull of these $n$ chosen points $R_0, R_1, \ldots R_{n-1}$ ?
  
  -----Note-----
  - Consider the area of the convex hull as zero if it contains less than 3 vertices.
  - All the points $R_i$ are chosen independently of each other.
  - Your answer is considered correct if and only if its absolute or relative error doesn't exceed $10^{-6}$.
  
  -----Input-----
  - The first line contains $n$, the number of vertices in the convex polygon.
  - The next $n$ lines contain the coordinates of the vertices of the polygon in anti-clockwise order. 
  
  -----Output-----
  For each testcase, print the expected area of the convex hull of the $n$ randomly chosen points.
  
  -----Constraints-----
  - $3 \leq n \leq 10^5$
  - The absolute values of all the coordinates $\leq 10^7$.
  - All the points in the input are distinct.
  - The described polygon $P$ is convex and the vertices of the polygon are given in anti-clockwise order. Also, no three vertices of the polygon are collinear.
  
  -----Example Input-----
  3
  0 0
  1 0
  0 1
  
  -----Example Output-----
  0.1250000000
  -/
  
  /- Helper function to get the minimum value from a list -/
  
  /- Helper function to get the maximum value from a list -/
  
  -- Apps difficulty: interview
  -- Assurance level: guarded

vc-preamble: |-
  def list_max (xs : List Float) : Float :=
    match xs with
    | [] => 0
    | x::xs => xs.foldl max x
  
  def list_min (xs : List Float) : Float :=
    match xs with
    | [] => 0
    | x::xs => xs.foldl min x

vc-helpers: |-

vc-definitions: |-
  def Point := Float × Float
  
  def calc_expected_area (n: Nat) (vertices: List Point) : Float :=
    sorry

vc-theorems: |-
  theorem area_is_non_negative {n: Nat} {vertices: List Point} :
    vertices.length = n → n ≥ 3 →
    calc_expected_area n vertices ≥ 0 :=
  sorry
  
  theorem area_smaller_than_bounding_box {n: Nat} {vertices: List Point} :
    vertices.length = n → n ≥ 3 →
    let xs := vertices.map (·.1)
    let ys := vertices.map (·.2)
    calc_expected_area n vertices ≤ (list_max xs - list_min xs) * (list_max ys - list_min ys) + 1e-10 :=
  sorry
  
  theorem area_invariant_under_translation {n: Nat} {vertices: List Point}
    {dx dy: Float} :
    vertices.length = n → n ≥ 3 →
    let translated := vertices.map (fun (x, y) => (x + dx, y + dy))
    (calc_expected_area n vertices - calc_expected_area n translated).abs < 1e-10 :=
  sorry
  
  theorem area_scales_quadratically {n: Nat} {vertices: List Point} :
    vertices.length = n → n ≥ 3 →
    let scaled := vertices.map (fun (x, y) => (2*x, 2*y))
    (calc_expected_area n scaled - 4 * calc_expected_area n vertices).abs < 1e-10 :=
  sorry

vc-postamble: |-

