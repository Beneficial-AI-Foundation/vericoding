vc-description: |-

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def count_peaks (window : List Nat) : Nat :=
    sorry
  
  def solve_door_peaks (n k : Nat) (arr : List Nat) : Nat × Nat :=
    sorry

vc-theorems: |-
  theorem peaks_atleast_one {n k : Nat} {arr : List Nat}
    (h1 : n ≥ 3)
    (h2 : k ≥ 3)
    (h3 : k ≤ n)
    (h4 : arr.length = n) :
    let (peaks, _) := solve_door_peaks n k arr
    peaks ≥ 1 :=
  sorry
  
  theorem position_in_range {n k : Nat} {arr : List Nat}
    (h1 : n ≥ 3)
    (h2 : k ≥ 3)
    (h3 : k ≤ n)
    (h4 : arr.length = n) :
    let (_, pos) := solve_door_peaks n k arr
    1 ≤ pos ∧ pos ≤ n - k + 1 :=
  sorry
  
  theorem peaks_match_window {n k : Nat} {arr : List Nat}
    (h1 : n ≥ 3)
    (h2 : k ≥ 3)
    (h3 : k ≤ n)
    (h4 : arr.length = n) :
    let (peaks, pos) := solve_door_peaks n k arr
    let window := arr.take k
    count_peaks window = peaks - 1 :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
  
  /--
  info: (3, 2)
  -/
  #guard_msgs in
  #eval solve_door_peaks 8 6 [1, 2, 4, 1, 2, 4, 1, 2]
  
  /--
  info: (2, 2)
  -/
  #guard_msgs in
  #eval solve_door_peaks 5 3 [3, 2, 3, 2, 1]
  
  /--
  info: (2, 1)
  -/
  #guard_msgs in
  #eval solve_door_peaks 10 4 [4, 3, 4, 3, 2, 3, 2, 1, 0, 1]

