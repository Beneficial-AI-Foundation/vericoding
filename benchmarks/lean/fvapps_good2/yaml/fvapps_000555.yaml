vc-description: |-
  /-
  Ayu loves distinct letter sequences ,a distinct letter sequence is defined by a sequence of small case english alphabets such that no character appears more then once.
  But however there are two phrases that she doesn't like these phrases are "kar" and "shi" and she is given a sequence of distinct characters and she wonders how many such sequences she can form using all the characters such that these phrases don't occur.
  Help her finding the number of such sequences.
  New Year Gift - It is guaranteed that for sequences of length greater then 6 letters k,a,r,s,h,i will be present(we thought of being generous, thank us later :)).
  
  -----Input:-----
  - First line will contain $T$, number of testcases. Then the testcases follow. 
  - Each line consists of a string $S$ (3<=s.length<=18) of distinct characters.
  
  -----Output:-----
  Print the number of sequences that can be formed by permuting all the characters such that phrases "kar" and "shi" don't occur.
  
  -----Constraints-----
  - $1 \leq T \leq 10$
  - $3 \leq S.length \leq 18$
  
  -----Sample Input:-----
  2
  karp
  abcd
  
  -----Sample Output:-----
  22
  24
  -/

vc-preamble: |-
  def factorial (n : Nat) : Nat :=
    match n with
    | 0 => 1
    | n + 1 => (n + 1) * factorial n
  
  def containsChar (s : String) (c : Char) : Bool :=
    s.data.contains c

vc-helpers: |-

vc-definitions: |-
  def count_distinct_sequences (s : String) : Nat :=
    sorry

vc-theorems: |-
  theorem count_distinct_basic_properties (s : String) :
    let result := count_distinct_sequences s
    result ≤ factorial s.length ∧
    0 < result ∧
    result = result
    :=
  sorry
  
  theorem count_distinct_special_substring (s : String) :
    let result := count_distinct_sequences s
    ((containsChar s 'k' ∧ containsChar s 'a' ∧ containsChar s 'r') ∨
     (containsChar s 's' ∧ containsChar s 'h' ∧ containsChar s 'i')) →
    result < factorial s.length
    :=
  sorry
  
  theorem count_distinct_karshi_all_letters (s : String) :
    let result := count_distinct_sequences s
    (containsChar s 'k' ∧ containsChar s 'a' ∧ containsChar s 'r' ∧
     containsChar s 's' ∧ containsChar s 'h' ∧ containsChar s 'i') →
    result < factorial s.length - factorial (s.length - 2)
    :=
  sorry
  
  theorem count_distinct_exact_karshi (s : String) :
    s.length = 6 →
    (s.data.toArray.qsort (· < ·) = "karshi".data.toArray.qsort (· < ·)) →
    count_distinct_sequences s = factorial 6 - 2 * factorial 4
    :=
  sorry
  
  theorem count_distinct_length_properties (s : String) :
    let result := count_distinct_sequences s
    (s.length ≤ 2 → result = factorial s.length) ∧
    (s.length > 6 ∧ containsChar s 'k' ∧ containsChar s 'a' ∧
     containsChar s 'r' ∧ containsChar s 's' ∧ containsChar s 'h' ∧
     containsChar s 'i' →
      result = factorial s.length - 2 * factorial (s.length - 2) + factorial (s.length - 4))
    :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
  
  /--
  info: 22
  -/
  #guard_msgs in
  #eval count_distinct_sequences "karp"
  
  /--
  info: 24
  -/
  #guard_msgs in
  #eval count_distinct_sequences "abcd"

