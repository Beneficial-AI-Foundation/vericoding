vc-description: |-
  /-
  Bessie and the cows are playing with sequences and need your help. They start with a sequence, initially containing just the number 0, and perform n operations. Each operation is one of the following:  Add the integer x_{i} to the first a_{i} elements of the sequence.  Append an integer k_{i} to the end of the sequence. (And hence the size of the sequence increases by 1)  Remove the last element of the sequence. So, the size of the sequence decreases by one. Note, that this operation can only be done if there are at least two elements in the sequence. 
  
  After each operation, the cows would like to know the average of all the numbers in the sequence. Help them!
  
  -----Input-----
  
  The first line contains a single integer n (1 ≤ n ≤ 2·10^5) — the number of operations. The next n lines describe the operations. Each line will start with an integer t_{i} (1 ≤ t_{i} ≤ 3), denoting the type of the operation (see above). If t_{i} = 1, it will be followed by two integers a_{i}, x_{i} (|x_{i}| ≤ 10^3; 1 ≤ a_{i}). If t_{i} = 2, it will be followed by a single integer k_{i} (|k_{i}| ≤ 10^3). If t_{i} = 3, it will not be followed by anything.
  
  It is guaranteed that all operations are correct (don't touch nonexistent elements) and that there will always be at least one element in the sequence.
  
  -----Output-----
  
  Output n lines each containing the average of the numbers in the sequence after the corresponding operation.
  
  The answer will be considered correct if its absolute or relative error doesn't exceed 10^{ - 6}.
  
  -----Examples-----
  Input
  5
  2 1
  3
  2 3
  2 1
  3
  
  Output
  0.500000
  0.000000
  1.500000
  1.333333
  1.500000
  
  Input
  6
  2 1
  1 2 20
  2 2
  1 2 -3
  3
  3
  
  Output
  0.500000
  20.500000
  14.333333
  12.333333
  17.500000
  17.000000
  
  -----Note-----
  
  In the second sample, the sequence becomes $\{0 \} \rightarrow \{0,1 \} \rightarrow \{20,21 \} \rightarrow \{20,21,2 \} \rightarrow \{17,18,2 \} \rightarrow \{17,18 \} \rightarrow \{17 \}$
  -/
  
  -- Apps difficulty: competition
  -- Assurance level: guarded

vc-preamble: |-
  def running_sum (xs: List Int) : List Int :=
    match xs with
    | [] => []
    | x::xs' => x :: (running_sum xs').map (λ s => s + x)

vc-helpers: |-

vc-definitions: |-
  def Operation := List Int
  
  def solve_sequence_ops (ops: List Operation) : List Float :=
    sorry

vc-theorems: |-
  theorem sequence_ops_result_properties (ops: List Operation) :
    let result := solve_sequence_ops ops
    (result.length = ops.length) ∧
    (∀ x ∈ result, -1000000 ≤ x ∧ x ≤ 1000000) :=
  sorry
  
  theorem remove_maintains_min_size (ops: List Operation) :
    let remove_count := (ops.filter (λ op => op.head! = 3)).length
    remove_count ≤ ops.length :=
  sorry
  
  theorem append_only_averages (values: List Int)
    (h1: ∀ x ∈ values, 1 ≤ x ∧ x ≤ 1000)
    (h2: values.length ≥ 1 ∧ values.length ≤ 10) :
    let ops := values.map (λ x => [2, x])
    let result := solve_sequence_ops ops
    ∀ i: Nat, i < values.length →
      let sum := (running_sum values)[i]!
      Float.abs (result[i]! - Float.ofInt (sum + 0) / Float.ofNat (i + 2)) < 0.000001 :=
  sorry

vc-postamble: |-

