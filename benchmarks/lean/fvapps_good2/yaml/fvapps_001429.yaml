vc-description: |-
  /- If the input string length is odd, min_ops_for_self_destruct returns -1 -/
  
  -- Apps difficulty: interview
  -- Assurance level: guarded
  
  /- If the input string contains only 0s or only 1s, min_ops_for_self_destruct returns -1 -/
  
  /- If min_ops_for_self_destruct returns a non-negative result, it is bounded by half the string length -/
  
  /- For balanced strings with equal counts of 0s and 1s and even length, min_ops_for_self_destruct returns 0 -/
  
  /- The result equals half the absolute difference between counts of 0s and 1s when not -1 -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def min_ops_for_self_destruct (s : String) : Int :=
    sorry

vc-theorems: |-
  theorem odd_length_returns_negative (s : String) :
    String.length s % 2 = 1 → min_ops_for_self_destruct s = -1 := by
    sorry
  
  theorem all_ones_or_zeroes_returns_negative (s : String) :
    (∀c ∈ s.data, c = '0') ∨ (∀c ∈ s.data, c = '1') →
    min_ops_for_self_destruct s = -1 := by
    sorry
  
  theorem result_bounds (s : String) :
    min_ops_for_self_destruct s ≠ -1 →
    0 ≤ min_ops_for_self_destruct s ∧ min_ops_for_self_destruct s ≤ String.length s / 2 := by
    sorry
  
  theorem balanced_strings_need_zero_ops (s : String) :
    String.length s % 2 = 0 →
    (s.data.filter (· = '0')).length = (s.data.filter (· = '1')).length →
    min_ops_for_self_destruct s = 0 := by
    sorry
  
  theorem operations_count (s : String) :
    min_ops_for_self_destruct s ≠ -1 →
    min_ops_for_self_destruct s =
      (Int.natAbs ((s.data.filter (· = '0')).length - (s.data.filter (· = '1')).length)) / 2 := by
    sorry

vc-postamble: |-
  /--
  info: 0
  -/
  #guard_msgs in
  #eval min_ops_for_self_destruct "001101"
  
  /--
  info: 1
  -/
  #guard_msgs in
  #eval min_ops_for_self_destruct "1101"
  
  /--
  info: -1
  -/
  #guard_msgs in
  #eval min_ops_for_self_destruct "110"

