vc-description: |-

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def get_winner (arr : List Int) (k : Int) : Int :=
    sorry
  
  def List.maximum (l : List Int) : Int :=
    sorry
  
  def List.maximum' (l : List Int) (h : l ≠ []) : Int :=
    sorry
  
  def List.findIndex (l : List Int) (p : Int → Bool) : Nat :=
    sorry
  
  def List.sorted (l : List Int) (r : Int → Int → Bool) : Prop :=
    sorry

vc-theorems: |-
  theorem winner_exists_in_array (arr : List Int) (h : arr ≠ []) :
    ∀ k, k > 0 → get_winner arr k ∈ arr :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible
  
  /--
  info: 5
  -/
  #guard_msgs in
  #eval get_winner [2, 1, 3, 5, 4, 6, 7] 2
  
  /--
  info: 3
  -/
  #guard_msgs in
  #eval get_winner [3, 2, 1] 10
  
  /--
  info: 9
  -/
  #guard_msgs in
  #eval get_winner [1, 9, 8, 2, 3, 7, 6, 4, 5] 7

