vc-description: |-
  /- 
  -----Description-----
  This task requires writing a Lean 4 method that extracts the last digit of a given non-negative integer. The method should return the last digit, which is obtained by computing the remainder when the number is divided by 10. The result must always be between 0 and 9.
  
  -----Input-----
  The input consists of a single value:
  n: A non-negative integer.
  
  -----Output-----
  The output is an integer:
  Returns the last digit of the input number, ensuring that the digit lies within the range 0 to 9.
  
  -----Note-----
  It is assumed that the input number n is non-negative.
  -/

vc-preamble: |-
  @[reducible, simp]
  def lastDigit_precond (n : Nat) : Prop :=
    True

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def lastDigit (n : Nat) (h_precond : lastDigit_precond (n)) : Nat :=

vc-implementation: |-
  -- <vc-implementation>
    n % 10
  -- </vc-implementation>

vc-condition: |-
  @[reducible, simp]
  def lastDigit_postcond (n : Nat) (result: Nat) (h_precond : lastDigit_precond (n)) :=
    (0 ≤ result ∧ result < 10) ∧
    (n % 10 - result = 0 ∧ result - n % 10 = 0)
  
  theorem lastDigit_spec_satisfied (n: Nat) (h_precond : lastDigit_precond (n)) :
      lastDigit_postcond (n) (lastDigit (n) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    unfold lastDigit lastDigit_postcond
    constructor
    · constructor
      · simp
      · exact Nat.mod_lt n (by decide)
    · simp
  -- </vc-proof>

vc-postamble: |-
  /-
  -- Invalid Inputs
  []
  -- Tests
  [
      {
          "input": {
              "n": 123
          },
          "expected": 3,
          "unexpected": [
              2,
              1,
              23
          ]
      },
      {
          "input": {
              "n": 0
          },
          "expected": 0,
          "unexpected": [
              10,
              5,
              9
          ]
      },
      {
          "input": {
              "n": 987654321
          },
          "expected": 1,
          "unexpected": [
              9,
              0,
              2
          ]
      },
      {
          "input": {
              "n": 10
          },
          "expected": 0,
          "unexpected": [
              1,
              10,
              5
          ]
      },
      {
          "input": {
              "n": 999
          },
          "expected": 9,
          "unexpected": [
              8,
              99,
              0
          ]
      },
      {
          "input": {
              "n": 45
          },
          "expected": 5,
          "unexpected": [
              4,
              0,
              55
          ]
      },
      {
          "input": {
              "n": 100
          },
          "expected": 0,
          "unexpected": [
              1,
              10,
              5
          ]
      },
      {
          "input": {
              "n": 5
          },
          "expected": 5,
          "unexpected": [
              4,
              0,
              6
          ]
      }
  ]
  -/

