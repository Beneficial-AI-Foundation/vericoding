vc-description: |-
  /- 
  -----Description-----
  This task requires writing a Lean 4 method that determines whether a natural number is a power of four. The method should return a boolean value that indicates whether the given natural number is a power of four. An integer n is a power of four, if there exists an natural number x such that n = 4^x.
  
  -----Input-----
  The input consists of one natural number:
  n: A natural number.
  
  -----Output-----
  The output is a boolean value:
  Return a boolean value that indicates whether the given natural number is a power of four. Return "true" if it is a power of four. Otherwise, return "false".
  -/

vc-preamble: |-
  @[reducible]
  def ifPowerOfFour_precond (n : Nat) : Prop :=
    True

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def ifPowerOfFour (n : Nat) (h_precond : ifPowerOfFour_precond (n)) : Bool :=

vc-implementation: |-
  -- <vc-implementation>
    sorry
  -- </vc-implementation>

vc-condition: |-
  @[reducible]
  def ifPowerOfFour_postcond (n : Nat) (result: Bool) (h_precond : ifPowerOfFour_precond (n)) : Prop :=
    result ↔ (∃ m:Nat, n=4^m)
  
  theorem ifPowerOfFour_spec_satisfied (n: Nat) (h_precond : ifPowerOfFour_precond (n)) :
      ifPowerOfFour_postcond (n) (ifPowerOfFour (n) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  /-
  -- Invalid Inputs
  []
  -- Tests
  [
      {
          "input": {
              "n": 0
          },
          "expected": false,
          "unexpected": [
              true
          ]
      },
      {
          "input": {
              "n": 1
          },
          "expected": true,
          "unexpected": [
              false
          ]
      },
      {
          "input": {
              "n": 2
          },
          "expected": false,
          "unexpected": [
              true
          ]
      },
      {
          "input": {
              "n": 3
          },
          "expected": false,
          "unexpected": [
              true
          ]
      },
      {
          "input": {
              "n": 4
          },
          "expected": true,
          "unexpected": [
              false
          ]
      },
      {
          "input": {
              "n": 8
          },
          "expected": false,
          "unexpected": [
              true
          ]
      },
      {
          "input": {
              "n": 16
          },
          "expected": true,
          "unexpected": [
              false
          ]
      },
      {
          "input": {
              "n": 64
          },
          "expected": true,
          "unexpected": [
              false
          ]
      },
      {
          "input": {
              "n": 95
          },
          "expected": false,
          "unexpected": [
              true
          ]
      },
      {
          "input": {
              "n": 100
          },
          "expected": false,
          "unexpected": [
              true
          ]
      },
      {
          "input": {
              "n": 256
          },
          "expected": true,
          "unexpected": [
              false
          ]
      },
      {
          "input": {
              "n": 520
          },
          "expected": false,
          "unexpected": [
              true
          ]
      },
      {
          "input": {
              "n": 1024
          },
          "expected": true,
          "unexpected": [
              false
          ]
      }
  ]
  -/

