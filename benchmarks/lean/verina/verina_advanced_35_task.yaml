vc-description: |-
  /- 
  -----Description-----
  This task requires writing a Lean 4 function that finds the majority element in a list of integers. The majority element is the element that appears more than ⌊n/2⌋ times, where n is the list’s length. You may assume that a majority element always exists in the input.
  
  -----Input-----
  - nums: A list of integers of length ≥ 1, containing a majority element.
  
  -----Output-----
  - An integer: the element that appears more than ⌊n/2⌋ times.
  -/

vc-preamble: |-
  import Std.Data.HashMap
  open Std
  
  @[reducible]
  def majorityElement_precond (nums : List Int) : Prop :=
    nums.length > 0 ∧ nums.any (fun x => nums.count x > nums.length / 2)

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def majorityElement (nums : List Int) (h_precond : majorityElement_precond (nums)) : Int :=

vc-implementation: |-
  -- <vc-implementation>
    sorry
  -- </vc-implementation>

vc-condition: |-
  @[reducible]
  def majorityElement_postcond (nums : List Int) (result: Int) (h_precond : majorityElement_precond (nums)) : Prop :=
    let n := nums.length
    (nums.count result) > n / 2
    ∧ ∀ x, x ≠ result → nums.count x ≤ n / 2
  
  theorem majorityElement_spec_satisfied (nums: List Int) (h_precond : majorityElement_precond (nums)) :
      majorityElement_postcond (nums) (majorityElement (nums) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  /-
  -- Invalid Inputs
  [
      {
          "input": {
              "nums": "[1, 2, 3]"
          }
      },
      {
          "input": {
              "nums": "[]"
          }
      }
  ]
  -- Tests
  [
      {
          "input": {
              "nums": "[3, 2, 3]"
          },
          "expected": 3,
          "unexpected": [
              2
          ]
      },
      {
          "input": {
              "nums": "[2, 2, 1, 1, 1, 2, 2]"
          },
          "expected": 2,
          "unexpected": [
              1
          ]
      },
      {
          "input": {
              "nums": "[1, 1, 1, 2, 3, 1]"
          },
          "expected": 1,
          "unexpected": [
              2,
              3
          ]
      },
      {
          "input": {
              "nums": "[0, 0, 0, 0]"
          },
          "expected": 0,
          "unexpected": [
              1
          ]
      },
      {
          "input": {
              "nums": "[7]"
          },
          "expected": 7,
          "unexpected": []
      }
  ]
  -/

