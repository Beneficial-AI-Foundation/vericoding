vc-description: |-
  /- 
  -----Description-----
  This task requires writing a Lean 4 method that finds the minimum among three given integers. The method should return the smallest value, ensuring that the result is less than or equal to each of the input numbers and that it is one of the provided integers.
  
  -----Input-----
  The input consists of three integers:
  a: The first integer.
  b: The second integer.
  c: The third integer.
  
  -----Output-----
  The output is an integer:
  Returns the minimum of the three input numbers, assuring that the returned value is less than or equal to a, b, and c, and that it matches one of these values.
  -/

vc-preamble: |-
  import Mathlib
  
  @[reducible, simp]
  def minOfThree_precond (a : Int) (b : Int) (c : Int) : Prop :=
    True

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def minOfThree (a : Int) (b : Int) (c : Int) (h_precond : minOfThree_precond (a) (b) (c)) : Int :=

vc-implementation: |-
  -- <vc-implementation>
    if a <= b && a <= c then a
    else if b <= a && b <= c then b
    else c
  -- </vc-implementation>

vc-condition: |-
  @[reducible, simp]
  def minOfThree_postcond (a : Int) (b : Int) (c : Int) (result: Int) (h_precond : minOfThree_precond (a) (b) (c)) :=
    (result <= a ∧ result <= b ∧ result <= c) ∧
    (result = a ∨ result = b ∨ result = c)
  
  theorem minOfThree_spec_satisfied (a: Int) (b: Int) (c: Int) (h_precond : minOfThree_precond (a) (b) (c)) :
      minOfThree_postcond (a) (b) (c) (minOfThree (a) (b) (c) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    unfold minOfThree minOfThree_postcond
  
    split
  
    -- Case 1: a is the minimum
    · by_cases h1: a <= b && a <= c
      · constructor
        · simp_all
        · simp
      · contradiction
  
    split
  
    -- Case 2: b is the minimum
    · by_cases h2: b <= a && b <= c
      · constructor
        · simp_all
        · simp
      · contradiction
  
    -- Case 3: c is the minimum
    · by_cases h3: c < a && c < b
      · constructor
        · simp_all
          constructor
          · exact le_of_lt h3.1
          · exact le_of_lt h3.2
        · simp
      · constructor
        · simp_all
          by_cases h': a <= b
          · simp_all
            have h'': a <= c := by
              exact le_trans h' h3
            rw [← not_lt] at h''
            contradiction
          · simp_all
            have _: b <= a := by exact le_of_lt h'
            simp_all
            have h'': c < b := by assumption
            have h''': c < a := by exact lt_trans h'' h'
            apply h3 at h'''
            rw [← not_lt] at h'''
            contradiction
        · simp
  -- </vc-proof>

vc-postamble: |-
  /-
  -- Invalid Inputs
  []
  -- Tests
  [
      {
          "input": {
              "a": 3,
              "b": 2,
              "c": 1
          },
          "expected": 1,
          "unexpected": [
              2,
              3,
              0
          ]
      },
      {
          "input": {
              "a": 5,
              "b": 5,
              "c": 5
          },
          "expected": 5,
          "unexpected": [
              4,
              6
          ]
      },
      {
          "input": {
              "a": 10,
              "b": 20,
              "c": 15
          },
          "expected": 10,
          "unexpected": [
              15,
              20,
              5
          ]
      },
      {
          "input": {
              "a": -1,
              "b": 2,
              "c": 3
          },
          "expected": -1,
          "unexpected": [
              2,
              3,
              0
          ]
      },
      {
          "input": {
              "a": 2,
              "b": -3,
              "c": 4
          },
          "expected": -3,
          "unexpected": [
              2,
              4,
              0
          ]
      },
      {
          "input": {
              "a": 2,
              "b": 3,
              "c": -5
          },
          "expected": -5,
          "unexpected": [
              2,
              3,
              0
          ]
      },
      {
          "input": {
              "a": 0,
              "b": 0,
              "c": 1
          },
          "expected": 0,
          "unexpected": [
              1,
              -1,
              2
          ]
      },
      {
          "input": {
              "a": 0,
              "b": -1,
              "c": 1
          },
          "expected": -1,
          "unexpected": [
              0,
              1,
              2
          ]
      },
      {
          "input": {
              "a": -5,
              "b": -2,
              "c": -3
          },
          "expected": -5,
          "unexpected": [
              -2,
              -3,
              0
          ]
      }
  ]
  -/

