vc-description: |-
  /- 
  -----Description-----
  This task requires writing a Lean 4 method that checks whether two arrays of integers have any elements in common. In other words, the method should return true if there is at least one element that appears in both arrays, and false if no such element exists.
  
  -----Input-----
  The input consists of:
  a: An array of integers.
  b: An array of integers.
  
  -----Output-----
  The output is a Boolean value:
  Returns true if there is at least one common element between the two arrays.
  Returns false if there are no common elements shared by the arrays.
  
  -----Note-----
  Both arrays are assumed to be non-null.
  -/

vc-preamble: |-
  @[reducible, simp]
  def hasCommonElement_precond (a : Array Int) (b : Array Int) : Prop :=
    a.size > 0 ∧ b.size > 0

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def hasCommonElement (a : Array Int) (b : Array Int) (h_precond : hasCommonElement_precond (a) (b)) : Bool :=

vc-implementation: |-
  -- <vc-implementation>
    a.any fun x => b.any fun y => x = y
  -- </vc-implementation>

vc-condition: |-
  @[reducible, simp]
  def hasCommonElement_postcond (a : Array Int) (b : Array Int) (result: Bool) (h_precond : hasCommonElement_precond (a) (b)) :=
    (∃ i j, i < a.size ∧ j < b.size ∧ a[i]! = b[j]!) ↔ result
  
  theorem hasCommonElement_spec_satisfied (a: Array Int) (b: Array Int) (h_precond : hasCommonElement_precond (a) (b)) :
      hasCommonElement_postcond (a) (b) (hasCommonElement (a) (b) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    unfold hasCommonElement hasCommonElement_postcond
    constructor
    · intro h
      rcases h with ⟨i, j, hi, hj, heq⟩
      simp [Array.any_eq]
      exists i
      exists hi
      exists j
      exists hj
      have heqa : a[i]! = a[i] := by
        exact getElem!_pos a i hi
      have heqb : b[j]! = b[j] := by
        exact getElem!_pos b j hj
      rw [heqa, heqb] at heq
      exact heq
    · intro h
      simp [Array.any_eq] at h
      rcases h with ⟨i, hi, j, hj, heq⟩
      exists i
      exists j
      simp [hi, hj]
      have heqa : a[i]! = a[i] := by
        exact getElem!_pos a i hi
      have heqb : b[j]! = b[j] := by
        exact getElem!_pos b j hj
      rw [heqa, heqb]
      exact heq
  -- </vc-proof>

vc-postamble: |-
  /-
  -- Invalid Inputs
  [
      {
          "input": {
              "a": "#[]",
              "b": "#[]"
          }
      }
  ]
  -- Tests
  [
      {
          "input": {
              "a": "#[1, 2, 3]",
              "b": "#[4, 5, 6]"
          },
          "expected": false,
          "unexpected": [
              true
          ]
      },
      {
          "input": {
              "a": "#[1, 2, 3]",
              "b": "#[3, 4, 5]"
          },
          "expected": true,
          "unexpected": [
              false
          ]
      },
      {
          "input": {
              "a": "#[7, 8, 9]",
              "b": "#[10, 11, 7]"
          },
          "expected": true,
          "unexpected": [
              false
          ]
      },
      {
          "input": {
              "a": "#[1, 2, 3, 4]",
              "b": "#[5, 6, 7, 8]"
          },
          "expected": false,
          "unexpected": [
              true
          ]
      },
      {
          "input": {
              "a": "#[1, 2, 3, 4]",
              "b": "#[4, 5, 6]"
          },
          "expected": true,
          "unexpected": [
              false
          ]
      },
      {
          "input": {
              "a": "#[1, 1, 1]",
              "b": "#[1, 2, 1]"
          },
          "expected": true,
          "unexpected": [
              false
          ]
      },
      {
          "input": {
              "a": "#[0]",
              "b": "#[0]"
          },
          "expected": true,
          "unexpected": [
              false
          ]
      },
      {
          "input": {
              "a": "#[0]",
              "b": "#[-1, 1]"
          },
          "expected": false,
          "unexpected": [
              true
          ]
      }
  ]
  -/

