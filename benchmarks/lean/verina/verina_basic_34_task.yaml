vc-description: |-
  /- 
  -----Description-----
  This task requires writing a Lean 4 method that extracts even numbers from an array of integers. The method should return a new array containing only the even numbers found in the input array, while preserving the order in which they appear.
  
  -----Input-----
  The input consists of:
  arr: An array of integers.
  
  -----Output-----
  The output is an array of integers:
  Returns an array containing all the even numbers from the input array. Specifically:
  - Every element in the output array is an even integer.
  - All even integers present in the input array are included in the output array.
  - The relative order of the even integers is preserved as in the input array.
  
  -----Note-----
  There are no preconditions for this task; the method will work with any array, including empty arrays (which are not null).
  -/

vc-preamble: |-
  @[reducible, simp]
  def findEvenNumbers_precond (arr : Array Int) : Prop :=
    True

vc-helpers: |-
  -- <vc-helpers>
  def isEven (n : Int) : Bool :=
    n % 2 = 0
  -- </vc-helpers>

vc-signature: |-
  def findEvenNumbers (arr : Array Int) (h_precond : findEvenNumbers_precond (arr)) : Array Int :=

vc-implementation: |-
  -- <vc-implementation>
    sorry
  -- </vc-implementation>

vc-condition: |-
  @[reducible, simp]
  def findEvenNumbers_postcond (arr : Array Int) (result: Array Int) (h_precond : findEvenNumbers_precond (arr)) :=
    (∀ x, x ∈ result → isEven x ∧ x ∈ arr.toList) ∧
    (∀ x, x ∈ arr.toList → isEven x → x ∈ result) ∧
    (∀ x y, x ∈ arr.toList → y ∈ arr.toList →
      isEven x → isEven y →
      arr.toList.idxOf x ≤ arr.toList.idxOf y →
      result.toList.idxOf x ≤ result.toList.idxOf y)
  
  theorem findEvenNumbers_spec_satisfied (arr: Array Int) (h_precond : findEvenNumbers_precond (arr)) :
      findEvenNumbers_postcond (arr) (findEvenNumbers (arr) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  /-
  -- Invalid Inputs
  []
  -- Tests
  [
      {
          "input": {
              "arr": "#[1, 2, 3, 4, 5, 6]"
          },
          "expected": "#[2, 4, 6]",
          "unexpected": [
              "#[1, 2, 3]",
              "#[2, 3, 4, 6]"
          ]
      },
      {
          "input": {
              "arr": "#[7, 8, 10, 13, 14]"
          },
          "expected": "#[8, 10, 14]",
          "unexpected": [
              "#[7, 8, 10]",
              "#[8, 14]"
          ]
      },
      {
          "input": {
              "arr": "#[1, 3, 5, 7]"
          },
          "expected": "#[]",
          "unexpected": [
              "#[1]",
              "#[1, 3]"
          ]
      },
      {
          "input": {
              "arr": "#[]"
          },
          "expected": "#[]",
          "unexpected": [
              "#[0]",
              "#[1]"
          ]
      },
      {
          "input": {
              "arr": "#[0, -2, -3, -4, 5]"
          },
          "expected": "#[0, -2, -4]",
          "unexpected": [
              "#[0, -3, -4]",
              "#[-2, -4]"
          ]
      }
  ]
  -/

