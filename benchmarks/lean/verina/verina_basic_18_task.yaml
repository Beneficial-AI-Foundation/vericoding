vc-description: |-
  /- 
  -----Description-----
  This task requires writing a Lean 4 method that computes the sum of the digits of a non-negative integer. The method should process each digit of the input number and return the total sum. The output is guaranteed to be a non-negative natural number.
  
  -----Input-----
  The input consists of:
  n: A non-negative integer.
  
  -----Output-----
  The output is a natural number:
  Returns the sum of the digits of the input integer.
  
  -----Note-----
  The input is assumed to be a valid non-negative integer.
  -/

vc-preamble: |-
  @[reducible, simp]
  def sumOfDigits_precond (n : Nat) : Prop :=
    True

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def sumOfDigits (n : Nat) (h_precond : sumOfDigits_precond (n)) : Nat :=

vc-implementation: |-
  -- <vc-implementation>
    let rec loop (n : Nat) (acc : Nat) : Nat :=
      if n = 0 then acc
      else loop (n / 10) (acc + n % 10)
    loop n 0
  -- </vc-implementation>

vc-condition: |-
  @[reducible, simp]
  def sumOfDigits_postcond (n : Nat) (result: Nat) (h_precond : sumOfDigits_precond (n)) :=
    result - List.sum (List.map (fun c => Char.toNat c - Char.toNat '0') (String.toList (Nat.repr n))) = 0 âˆ§
    List.sum (List.map (fun c => Char.toNat c - Char.toNat '0') (String.toList (Nat.repr n))) - result = 0
  
  theorem sumOfDigits_spec_satisfied (n: Nat) (h_precond : sumOfDigits_precond (n)) :
      sumOfDigits_postcond (n) (sumOfDigits (n) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  /-
  -- Invalid Inputs
  []
  -- Tests
  [
      {
          "input": {
              "n": 12345
          },
          "expected": 15,
          "unexpected": [
              12,
              16,
              14
          ]
      },
      {
          "input": {
              "n": 0
          },
          "expected": 0,
          "unexpected": [
              1,
              10,
              5
          ]
      },
      {
          "input": {
              "n": 987654321
          },
          "expected": 45,
          "unexpected": [
              44,
              46,
              50
          ]
      },
      {
          "input": {
              "n": 11111
          },
          "expected": 5,
          "unexpected": [
              6,
              4,
              7
          ]
      },
      {
          "input": {
              "n": 1001
          },
          "expected": 2,
          "unexpected": [
              1,
              3,
              11
          ]
      },
      {
          "input": {
              "n": 9999
          },
          "expected": 36,
          "unexpected": [
              35,
              37,
              34
          ]
      }
  ]
  -/

