vc-description: |-
  /--
  -----Description-----
  Given an integer x, determine a pair (a, b) where the first element is twice the value of x and the second element is four times the value of x.
  
  -----Input-----
  The input consists of:
  • x: An integer.
  
  -----Output-----
  The output is a tuple (a, b) where:
  • a = 2 * x
  • b = 4 * x
  
  -----Note-----
  There are no additional preconditions; the method is defined for all integers.
  -/

vc-preamble: |-
  @[reducible, simp]
  def DoubleQuadruple_precond (x : Int) : Prop :=
    True

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def DoubleQuadruple (x : Int) (h_precond : DoubleQuadruple_precond (x)) : (Int × Int) :=

vc-implementation: |-
  -- <vc-implementation>
    let a := 2 * x
    let b := 2 * a
    (a, b)
  -- </vc-implementation>

vc-condition: |-
  @[reducible, simp]
  def DoubleQuadruple_postcond (x : Int) (result: (Int × Int)) (h_precond : DoubleQuadruple_precond (x)) :=
    result.fst = 2 * x ∧ result.snd = 2 * result.fst
  
  theorem DoubleQuadruple_spec_satisfied (x: Int) (h_precond : DoubleQuadruple_precond (x)) :
      DoubleQuadruple_postcond (x) (DoubleQuadruple (x) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  /-
  -- Invalid Inputs
  []
  -- Tests
  [
      {
          "input": {
              "x": 0
          },
          "expected": "(0, 0)",
          "unexpected": [
              "(1, 0)",
              "(0, 1)",
              "(-1, 0)"
          ]
      },
      {
          "input": {
              "x": 1
          },
          "expected": "(2, 4)",
          "unexpected": [
              "(2, 2)",
              "(1, 4)",
              "(3, 4)"
          ]
      },
      {
          "input": {
              "x": -1
          },
          "expected": "(-2, -4)",
          "unexpected": [
              "(-2, -2)",
              "(-1, -4)",
              "(-3, -4)"
          ]
      },
      {
          "input": {
              "x": 10
          },
          "expected": "(20, 40)",
          "unexpected": [
              "(20, 20)",
              "(10, 40)",
              "(20, 0)"
          ]
      },
      {
          "input": {
              "x": -5
          },
          "expected": "(-10, -20)",
          "unexpected": [
              "(-10, -10)",
              "(-5, -20)",
              "(-15, -20)"
          ]
      }
  ]
  -/

