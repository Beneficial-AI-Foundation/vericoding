vc-description: |-
  /- 
  -----Description-----
  The task is to determine whether there exists at least one pair of different floating-point numbers in a list such that the absolute difference between them is less than a given threshold. The focus is solely on deciding if such a pair is present in the list.
  
  -----Input-----
  The input consists of:
  • numbers: A list of floating-point numbers.
  • threshold: A floating-point number representing the maximum allowed difference between two numbers for them to be considered "close."
  
  -----Output-----
  The output is a boolean value:
  • true – if there exists at least one pair of distinct elements in the list such that the absolute difference between them is less than the threshold.
  • false – if for every possible pair of elements, the absolute difference is greater than or equal to the threshold.
  
  -----Note-----
  It is assumed that the list of numbers is provided and that the threshold is non-negative.
  -/

vc-preamble: |-
  @[reducible, simp]
  def has_close_elements_precond (numbers : List Float) (threshold : Float) : Prop :=
    threshold ≥ 0.0

vc-helpers: |-
  -- <vc-helpers>
  def absDiff (a b : Float) : Float :=
    if a - b < 0.0 then b - a else a - b
  -- </vc-helpers>

vc-signature: |-
  def has_close_elements (numbers : List Float) (threshold : Float) (h_precond : has_close_elements_precond (numbers) (threshold)) : Bool :=

vc-implementation: |-
  -- <vc-implementation>
    sorry
  -- </vc-implementation>

vc-condition: |-
  @[reducible, simp]
  def has_close_elements_postcond (numbers : List Float) (threshold : Float) (result: Bool) (h_precond : has_close_elements_precond (numbers) (threshold)) :=
    ¬ result ↔ (List.Pairwise (fun a b => absDiff a b ≥ threshold) numbers)
  
  theorem has_close_elements_spec_satisfied (numbers: List Float) (threshold: Float) (h_precond : has_close_elements_precond (numbers) (threshold)) :
      has_close_elements_postcond (numbers) (threshold) (has_close_elements (numbers) (threshold) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  /-
  -- Invalid Inputs
  [
      {
          "input": {
              "numbers": "[1.0, 2.0, 3.0]",
              "threshold": -1.0
          }
      }
  ]
  -- Tests
  [
      {
          "input": {
              "numbers": "[1.0, 2.0, 3.0]",
              "threshold": 1.5
          },
          "expected": true,
          "unexpected": []
      },
      {
          "input": {
              "numbers": "[10.0, 12.0, 15.0]",
              "threshold": 1.5
          },
          "expected": false,
          "unexpected": []
      },
      {
          "input": {
              "numbers": "[5.0, 5.0]",
              "threshold": 0.1
          },
          "expected": true,
          "unexpected": []
      },
      {
          "input": {
              "numbers": "[]",
              "threshold": 2.0
          },
          "expected": false,
          "unexpected": []
      },
      {
          "input": {
              "numbers": "[0.0, 0.5, 1.1, 2.2]",
              "threshold": 0.6
          },
          "expected": true,
          "unexpected": []
      }
  ]
  -/

