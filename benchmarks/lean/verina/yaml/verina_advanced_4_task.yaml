vc-description: |-
  /- 
  -----Description-----
  This task requires writing a Lean 4 method that finds the length of the longest increasing sequence in a given array. The method should return the length of the longest increasing subsequence, in which every element is strictly less than the latter element.
  
  -----Input-----
  The input consists of an arrat:
  a: The input array.
  
  -----Output-----
  The output is an integer:
  Returns the length of the longest increasing subsequence, assuring that it is a subsequence of the input sequence and that every element in it is strictly less than the latter one.
  -/

vc-preamble: |-
  import Mathlib
  
  @[reducible, simp]
  def LongestIncreasingSubsequence_precond (a : Array Int) : Prop :=
    True

vc-helpers: |-
  -- <vc-helpers>
  def intMax (x y : Int) : Int :=
    if x < y then y else x
  -- </vc-helpers>

vc-definitions: |-
  def LongestIncreasingSubsequence (a : Array Int) (h_precond : LongestIncreasingSubsequence_precond (a)) : Int :=
    sorry

vc-theorems: |-
  @[reducible, simp]
  def LongestIncreasingSubsequence_postcond (a : Array Int) (result: Int) (h_precond : LongestIncreasingSubsequence_precond (a)) : Prop :=
    let allSubseq := (a.foldl fun acc x => acc ++ acc.map (fun sub => x :: sub)) [[]] |>.map List.reverse
    let increasingSubseqLens := allSubseq.filter (fun l => List.Pairwise (· < ·) l) |>.map (·.length)
    increasingSubseqLens.contains result ∧ increasingSubseqLens.all (· ≤ result)
  
  theorem LongestIncreasingSubsequence_spec_satisfied (a: Array Int) (h_precond : LongestIncreasingSubsequence_precond (a)) :
      LongestIncreasingSubsequence_postcond (a) (LongestIncreasingSubsequence (a) h_precond) h_precond := by
    sorry

vc-postamble: |-
  /-
  -- Invalid Inputs
  []
  -- Tests
  [
      {
          "input": {
              "a": "#[5, 2, 8, 6, 3, 6, 9, 7]"
          },
          "expected": 4,
          "unexpected": [
              2,
              3
          ]
      },
      {
          "input": {
              "a": "#[3, 1, 2, 1, 0]"
          },
          "expected": 2,
          "unexpected": [
              1,
              3
          ]
      },
      {
          "input": {
              "a": "#[2, 3, -2, -1, 7, 19, 3, 6, -4, 6, -7, 0, 9, 12, 10]"
          },
          "expected": 6,
          "unexpected": [
              5,
              3,
              10
          ]
      },
      {
          "input": {
              "a": "#[5, -5, -3, 2, 4, 1, 0, -1, 3, 2, 0]"
          },
          "expected": 4,
          "unexpected": [
              2,
              5
          ]
      },
      {
          "input": {
              "a": "#[1, 7, 23, 14, -4, 21, 8, 2, -1, 9, 12, 2]"
          },
          "expected": 5,
          "unexpected": [
              2,
              4
          ]
      },
      {
          "input": {
              "a": "#[]"
          },
          "expected": 0,
          "unexpected": [
              1,
              2
          ]
      }
  ]
  -/

