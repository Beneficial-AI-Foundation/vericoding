vc-description: |-
  /- 
  -----Description-----
  This task involves converting a list of integers into an array such that the array contains all the elements of the list in the exact same order. The objective is to ensure that the array has the same number of elements as the list and that each element in the array corresponds exactly to the element at the same position in the list.
  
  -----Input-----
  The input consists of:
  • xs: A list of integer elements.
  
  -----Output-----
  The output is an array of elements of type integer that:
  • Has a size equal to the length of the input list xs.
  • Contains all the elements from xs in the same order, ensuring that for every valid index i, the array element at i is equal to the list element at i.
  
  -----Note-----
  There are no additional preconditions; the method should work correctly for any list of elements.
  A corresponding specification is provided stating that the array’s size equals the list’s length and that each element is preserved.
  -/

vc-preamble: |-
  @[reducible, simp]
  def ToArray_precond (xs : List Int) : Prop :=
    True

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def ToArray (xs : List Int) (h_precond : ToArray_precond (xs)) : Array Int :=
    sorry

vc-theorems: |-
  @[reducible, simp]
  def ToArray_postcond (xs : List Int) (result: Array Int) (h_precond : ToArray_precond (xs)) :=
    result.size = xs.length ∧ ∀ (i : Nat), i < xs.length → result[i]! = xs[i]!
  
  theorem ToArray_spec_satisfied (xs: List Int) (h_precond : ToArray_precond (xs)) :
      ToArray_postcond (xs) (ToArray (xs) h_precond) h_precond := by
    sorry

vc-postamble: |-
  /-
  -- Invalid Inputs
  []
  -- Tests
  [
      {
          "input": {
              "xs": "[1, 2, 3]"
          },
          "expected": "#[1, 2, 3]",
          "unexpected": [
              "#[1, 2]",
              "#[1, 2, 3, 4]",
              "#[3, 2, 1]"
          ]
      },
      {
          "input": {
              "xs": "[]"
          },
          "expected": "#[]",
          "unexpected": [
              "#[0]",
              "#[1]",
              "#[1, 0]"
          ]
      },
      {
          "input": {
              "xs": "[0, -1, 5]"
          },
          "expected": "#[0, -1, 5]",
          "unexpected": [
              "#[-1, 0, 5]",
              "#[0, 5]",
              "#[0, -1, 4]"
          ]
      },
      {
          "input": {
              "xs": "[7]"
          },
          "expected": "#[7]",
          "unexpected": [
              "#[]",
              "#[0, 7]",
              "#[8]"
          ]
      },
      {
          "input": {
              "xs": "[100, 200, 300, 400]"
          },
          "expected": "#[100, 200, 300, 400]",
          "unexpected": [
              "#[100, 200, 300]",
              "#[100, 300, 200, 400]",
              "#[400, 300, 200, 100]"
          ]
      }
  ]
  -/

