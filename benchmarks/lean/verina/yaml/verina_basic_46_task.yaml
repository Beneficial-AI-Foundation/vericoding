vc-description: |-
  /- 
  -----Description-----
  This task requires writing a Lean 4 method that finds the last occurrence of a specified element in a sorted array of integers. The method should return the index corresponding to the last occurrence of the element if it is present; if the element is absent, it should return -1. Additionally, the array must remain unchanged after the method is executed.
  
  -----Input-----
  The input consists of:
  arr: A sorted array of integers in non-decreasing order.
  elem: An integer whose last occurrence position is to be determined.
  
  -----Output-----
  The output is an integer:
  Returns the index of the last occurrence of the specified integer in the array if it exists.
  Returns -1 if the integer is not found in the array.
  
  -----Note-----
  The input array is assumed to be sorted in non-decreasing order and remains unchanged by the method.
  -/

vc-preamble: |-
  @[reducible, simp]
  def lastPosition_precond (arr : Array Int) (elem : Int) : Prop :=
    List.Pairwise (· ≤ ·) arr.toList

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def lastPosition (arr : Array Int) (elem : Int) (h_precond : lastPosition_precond (arr) (elem)) : Int :=

vc-implementation: |-
  -- <vc-implementation>
    sorry
  -- </vc-implementation>

vc-condition: |-
  @[reducible, simp]
  def lastPosition_postcond (arr : Array Int) (elem : Int) (result: Int) (h_precond : lastPosition_precond (arr) (elem)) :=
    (result ≥ 0 →
      arr[result.toNat]! = elem ∧ (arr.toList.drop (result.toNat + 1)).all (· ≠ elem)) ∧
    (result = -1 → arr.toList.all (· ≠ elem))
  
  theorem lastPosition_spec_satisfied (arr: Array Int) (elem: Int) (h_precond : lastPosition_precond (arr) (elem)) :
      lastPosition_postcond (arr) (elem) (lastPosition (arr) (elem) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  /-
  -- Invalid Inputs
  [
      {
          "input": {
              "arr": "#[3, 2, 1]",
              "elem": 2
          }
      }
  ]
  -- Tests
  [
      {
          "input": {
              "arr": "#[1, 2, 2, 3, 4, 5]",
              "elem": 2
          },
          "expected": 2,
          "unexpected": [
              0,
              1,
              3
          ]
      },
      {
          "input": {
              "arr": "#[1, 2, 2, 3, 4, 5]",
              "elem": 6
          },
          "expected": -1,
          "unexpected": [
              0,
              1,
              2
          ]
      },
      {
          "input": {
              "arr": "#[1, 2, 2, 3, 4, 5]",
              "elem": 5
          },
          "expected": 5,
          "unexpected": [
              3,
              4,
              0
          ]
      },
      {
          "input": {
              "arr": "#[1]",
              "elem": 1
          },
          "expected": 0,
          "unexpected": [
              1,
              -1,
              2
          ]
      },
      {
          "input": {
              "arr": "#[1, 1, 1, 1]",
              "elem": 1
          },
          "expected": 3,
          "unexpected": [
              0,
              1,
              2
          ]
      },
      {
          "input": {
              "arr": "#[2, 2, 3, 3, 3]",
              "elem": 3
          },
          "expected": 4,
          "unexpected": [
              2,
              3,
              5
          ]
      }
  ]
  -/

