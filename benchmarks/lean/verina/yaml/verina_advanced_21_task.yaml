vc-description: |-
  /- 
  -----Description-----
  Implement a Lean 4 function that checks if a given string is a palindrome. A string is considered a palindrome
  if it reads the same forward and backward.
  
  -----Input-----
  The input consists of a single string:
  s: A string
  
  -----Output-----
  The output is a boolean:
  Returns true if s is a palindrome, false otherwise.
  -/

vc-preamble: |-
  @[reducible, simp]
  def isPalindrome_precond (s : String) : Prop :=
    True

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def isPalindrome (s : String) (h_precond : isPalindrome_precond (s)) : Bool :=
    sorry

vc-theorems: |-
  @[reducible, simp]
  def isPalindrome_postcond (s : String) (result: Bool) (h_precond : isPalindrome_precond (s)) : Prop :=
    (result → (s.toList == s.toList.reverse)) ∧
    (¬ result → (s.toList ≠ [] ∧ s.toList != s.toList.reverse))
  
  theorem isPalindrome_spec_satisfied (s: String) (h_precond : isPalindrome_precond (s)) :
      isPalindrome_postcond (s) (isPalindrome (s) h_precond) h_precond := by
    sorry

vc-postamble: |-
  /-
  -- Invalid Inputs
  []
  -- Tests
  [
      {
          "input": {
              "s": "racecar"
          },
          "expected": true,
          "unexpected": [
              false
          ]
      },
      {
          "input": {
              "s": "abba"
          },
          "expected": true,
          "unexpected": [
              false
          ]
      },
      {
          "input": {
              "s": "abc"
          },
          "expected": false,
          "unexpected": [
              true
          ]
      },
      {
          "input": {
              "s": ""
          },
          "expected": true,
          "unexpected": [
              false
          ]
      },
      {
          "input": {
              "s": "a"
          },
          "expected": true,
          "unexpected": [
              false
          ]
      }
  ]
  -/

