vc-description: |-
  /- 
  -----Description-----
  The problem asks you to construct a new list by adding an extra number to the end of an existing list of numbers. The focus is on understanding what the final list should look like when a given number is included as the last element.
  
  -----Input-----
  The input consists of:
  • a: An array of integers.
  • b: An integer to be appended to the array.
  
  -----Output-----
  The output is an array of integers which represents the original array with the element b added at the end. That is, the output array’s list representation equals a.toList concatenated with [b].
  
  -----Note-----
  There are no special preconditions; the method is expected to work correctly for any array of integers and any integer b.
  -/

vc-preamble: |-
  @[reducible, simp]
  def append_precond (a : Array Int) (b : Int) : Prop :=
    True

vc-helpers: |-
  -- <vc-helpers>
  def copy (a : Array Int) (i : Nat) (acc : Array Int) : Array Int :=
    if i < a.size then
      copy a (i + 1) (acc.push (a[i]!))
    else
      acc
  -- </vc-helpers>

vc-definitions: |-
  def append (a : Array Int) (b : Int) (h_precond : append_precond (a) (b)) : Array Int :=
    sorry

vc-theorems: |-
  @[reducible, simp]
  def append_postcond (a : Array Int) (b : Int) (result: Array Int) (h_precond : append_precond (a) (b)) :=
    (List.range' 0 a.size |>.all (fun i => result[i]! = a[i]!)) ∧
    result[a.size]! = b ∧
    result.size = a.size + 1
  
  theorem append_spec_satisfied (a: Array Int) (b: Int) (h_precond : append_precond (a) (b)) :
      append_postcond (a) (b) (append (a) (b) h_precond) h_precond := by
    sorry

vc-postamble: |-
  /-
  -- Invalid Inputs
  []
  -- Tests
  [
      {
          "input": {
              "a": "#[1, 2, 3]",
              "b": 4
          },
          "expected": "#[1, 2, 3, 4]",
          "unexpected": [
              "#[1, 2, 3, 0]",
              "#[1, 2, 4, 3]",
              "#[4, 1, 2, 3]"
          ]
      },
      {
          "input": {
              "a": "#[]",
              "b": 0
          },
          "expected": "#[0]",
          "unexpected": [
              "#[1]",
              "#[]",
              "#[0, 0]"
          ]
      },
      {
          "input": {
              "a": "#[5, 6]",
              "b": -1
          },
          "expected": "#[5, 6, -1]",
          "unexpected": [
              "#[5, -1, 6]",
              "#[5, 6, 0]",
              "#[6, 5, -1]"
          ]
      },
      {
          "input": {
              "a": "#[0, 0, 0]",
              "b": 1
          },
          "expected": "#[0, 0, 0, 1]",
          "unexpected": [
              "#[1, 0, 0, 0]",
              "#[0, 1, 0, 0]",
              "#[0, 0, 1, 0]"
          ]
      },
      {
          "input": {
              "a": "#[-2, -3]",
              "b": -4
          },
          "expected": "#[-2, -3, -4]",
          "unexpected": [
              "#[-2, -4, -3]",
              "#[-2, -3, 0]",
              "#[-3, -2, -4]"
          ]
      }
  ]
  -/

