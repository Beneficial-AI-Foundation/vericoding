vc-description: |-
  /- 
  -----Description-----
  This task involves determining the first index in an array where a given condition holds true. The goal is to identify the position of the first element that meets a specified criterion, ensuring that no preceding element does.
  
  -----Input-----
  The input consists of:
  • a: An array of elements (for testing purposes, you can assume it is an array of integers).
  • P: A predicate function on the elements (represented as a string for test cases, e.g., "fun x => x > 5"). It is assumed that at least one element in the array satisfies P.
  
  -----Output-----
  The output is a natural number (Nat) which represents the index of the first element in the array that satisfies the predicate P.
  • The index returned is less than the size of the array.
  • The element at the returned index satisfies P.
  • All elements before the returned index do not satisfy P.
  
  -----Note-----
  It is assumed that the array contains at least one element that satisfies P. In cases where this precondition does not hold, the behavior of the function is not guaranteed by the specification.
  -/

vc-preamble: |-
  @[reducible, simp]
  def LinearSearch3_precond (a : Array Int) (P : Int -> Bool) : Prop :=
    ∃ i, i < a.size ∧ P (a[i]!)

vc-helpers: |-

vc-definitions: |-
  def LinearSearch3 (a : Array Int) (P : Int -> Bool) (h_precond : LinearSearch3_precond (a) (P)) : Nat :=
    sorry

vc-theorems: |-
  @[reducible, simp]
  def LinearSearch3_postcond (a : Array Int) (P : Int -> Bool) (result: Nat) (h_precond : LinearSearch3_precond (a) (P)) :=
    result < a.size ∧ P (a[result]!) ∧ (∀ k, k < result → ¬ P (a[k]!))
  
  theorem LinearSearch3_spec_satisfied (a: Array Int) (P: Int -> Bool) (h_precond : LinearSearch3_precond (a) (P)) :
      LinearSearch3_postcond (a) (P) (LinearSearch3 (a) (P) h_precond) h_precond := by
    sorry

vc-postamble: |-
  /-
  -- Invalid Inputs
  [
      {
          "input": {
              "a": "#[1, 2, 3, 4, 5]",
              "P": "fun x => x > 10"
          }
      }
  ]
  -- Tests
  [
      {
          "input": {
              "a": "#[4, 7, 2, 9]",
              "P": "fun x => x > 5"
          },
          "expected": 1,
          "unexpected": [
              0,
              2,
              3
          ]
      },
      {
          "input": {
              "a": "#[10, 8, 6, 4, 2]",
              "P": "fun x => x < 5"
          },
          "expected": 3,
          "unexpected": [
              0,
              1,
              4
          ]
      },
      {
          "input": {
              "a": "#[5, 3, 1, 2]",
              "P": "fun x => x == 1"
          },
          "expected": 2,
          "unexpected": [
              0,
              1,
              3
          ]
      },
      {
          "input": {
              "a": "#[0, 1, 2, 3]",
              "P": "fun x => x == 0"
          },
          "expected": 0,
          "unexpected": [
              1,
              2,
              3
          ]
      },
      {
          "input": {
              "a": "#[9, 9, 9, 9]",
              "P": "fun x => x == 9"
          },
          "expected": 0,
          "unexpected": [
              1,
              2,
              3
          ]
      }
  ]
  -/

