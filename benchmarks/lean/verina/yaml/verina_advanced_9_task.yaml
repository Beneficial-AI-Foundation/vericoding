vc-description: |-
  /- 
  -----Description-----
  This task requires writing a Lean 4 method of which given a number n and divisor d, it counts all the number that is smaller than
  n whose sum of digits is divisible by d.
  -----Input-----
  The input consists of three Nat:
  n: Nat
  d:Nat where d > 0
  
  -----Output-----
  The output is an Natural number:
  Ensure this match the count that satisfy the property.
  -/

vc-preamble: |-
  @[reducible]
  def countSumDivisibleBy_precond (n : Nat) (d : Nat) : Prop :=
    d > 0

vc-helpers: |-
  -- <vc-helpers>
  def sumOfDigits (x : Nat) : Nat :=
    let rec go (n acc : Nat) : Nat :=
      if n = 0 then acc
      else go (n / 10) (acc + (n % 10))
    go x 0
  
  def isSumDivisibleBy (x : Nat) (d:Nat) : Bool :=
    (sumOfDigits x) % d = 0
  -- </vc-helpers>

vc-definitions: |-
  def countSumDivisibleBy (n : Nat) (d : Nat) (h_precond : countSumDivisibleBy_precond (n) (d)) : Nat :=
    sorry

vc-theorems: |-
  @[reducible]
  def countSumDivisibleBy_postcond (n : Nat) (d : Nat) (result: Nat) (h_precond : countSumDivisibleBy_precond (n) (d)) : Prop :=
    (List.length (List.filter (fun x => x < n ∧ (sumOfDigits x) % d = 0) (List.range n))) - result = 0 ∧
    result ≤ (List.length (List.filter (fun x => x < n ∧ (sumOfDigits x) % d = 0) (List.range n)))
  
  theorem countSumDivisibleBy_spec_satisfied (n: Nat) (d: Nat) (h_precond : countSumDivisibleBy_precond (n) (d)) :
      countSumDivisibleBy_postcond (n) (d) (countSumDivisibleBy (n) (d) h_precond) h_precond := by
    sorry

vc-postamble: |-
  /-
  -- Invalid Inputs
  [
      {
          "input": {
              "n": 1,
              "d": 0
          }
      }
  ]
  -- Tests
  [
      {
          "input": {
              "n": 0,
              "d": 2
          },
          "expected": 0,
          "unexpected": [
              1
          ]
      },
      {
          "input": {
              "n": 1,
              "d": 2
          },
          "expected": 1,
          "unexpected": [
              0
          ]
      },
      {
          "input": {
              "n": 10,
              "d": 3
          },
          "expected": 4,
          "unexpected": [
              3,
              5
          ]
      },
      {
          "input": {
              "n": 12,
              "d": 2
          },
          "expected": 6,
          "unexpected": [
              3,
              5
          ]
      },
      {
          "input": {
              "n": 20,
              "d": 5
          },
          "expected": 4,
          "unexpected": [
              0,
              10
          ]
      }
  ]
  -/

