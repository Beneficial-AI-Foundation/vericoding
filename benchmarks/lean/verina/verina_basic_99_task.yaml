vc-description: |-
  /- 
  -----Description-----
  This task requires computing three times the given integer. The goal is to determine the product of the input integer and 3.
  
  -----Input-----
  The input consists of:
  • x: An integer.
  
  -----Output-----
  The output is an integer that represents three times the input value.
  
  -----Note-----
  The implementation uses two different branches based on the value of x (i.e., x < 18 or x ≥ 18), but both branches guarantee that the result equals 3*x.
  -/

vc-preamble: |-
  import Mathlib
  
  @[reducible, simp]
  def Triple_precond (x : Int) : Prop :=
    True

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def Triple (x : Int) (h_precond : Triple_precond (x)) : Int :=

vc-implementation: |-
  -- <vc-implementation>
    if x < 18 then
      let a := 2 * x
      let b := 4 * x
      (a + b) / 2
    else
      let y := 2 * x
      x + y
  -- </vc-implementation>

vc-condition: |-
  @[reducible, simp]
  def Triple_postcond (x : Int) (result: Int) (h_precond : Triple_precond (x)) :=
    result / 3 = x ∧ result / 3 * 3 = result
  
  theorem Triple_spec_satisfied (x: Int) (h_precond : Triple_precond (x)) :
      Triple_postcond (x) (Triple (x) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    unfold Triple_postcond Triple
    simp
    split_ifs with h₁
    . rw [←Int.add_mul]
      simp
      have h : (6: ℤ) = 3 * 2 := by simp
      rw [h, Int.mul_comm, Int.mul_ediv_assoc, Int.mul_ediv_assoc]
      simp
      rw [Int.mul_comm]
      rfl
      simp
    . rw (occs := [1]) [←Int.one_mul x]
      rw [←Int.add_mul]
      simp +arith
  -- </vc-proof>

vc-postamble: |-
  /-
  -- Invalid Inputs
  []
  -- Tests
  [
      {
          "input": {
              "x": 10
          },
          "expected": 30,
          "unexpected": [
              20,
              25,
              35
          ]
      },
      {
          "input": {
              "x": 18
          },
          "expected": 54,
          "unexpected": [
              50,
              56,
              60
          ]
      },
      {
          "input": {
              "x": 0
          },
          "expected": 0,
          "unexpected": [
              1,
              -1,
              5
          ]
      },
      {
          "input": {
              "x": -5
          },
          "expected": -15,
          "unexpected": [
              -10,
              -20,
              0
          ]
      },
      {
          "input": {
              "x": 25
          },
          "expected": 75,
          "unexpected": [
              70,
              80,
              65
          ]
      }
  ]
  -/

