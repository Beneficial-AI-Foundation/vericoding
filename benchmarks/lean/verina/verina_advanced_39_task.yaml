vc-description: |-
  /- 
  -----Description-----
  This task requires writing a Lean 4 function that returns the maximum element from a non-empty list of natural numbers.
  
  -----Input-----
  The input consists of:
  lst: a non-empty list of natural numbers.
  
  -----Output-----
  The output is:
  A natural number representing the largest element in the list.
  -/

vc-preamble: |-
  @[reducible, simp]
  def maxOfList_precond (lst : List Nat) : Prop :=
    lst.length > 0

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def maxOfList (lst : List Nat) (h_precond : maxOfList_precond (lst)) : Nat :=

vc-implementation: |-
  -- <vc-implementation>
    let rec helper (lst : List Nat) : Nat :=
      match lst with
      | [] => 0  -- technically shouldn't happen if input is always non-empty
      | [x] => x
      | x :: xs =>
        let maxTail := helper xs
        if x > maxTail then x else maxTail
  
    helper lst
  -- </vc-implementation>

vc-condition: |-
  @[reducible, simp]
  def maxOfList_postcond (lst : List Nat) (result: Nat) (h_precond : maxOfList_precond (lst)) : Prop :=
    result ∈ lst ∧ ∀ x ∈ lst, x ≤ result
  
  theorem maxOfList_spec_satisfied (lst: List Nat) (h_precond : maxOfList_precond (lst)) :
      maxOfList_postcond (lst) (maxOfList (lst) h_precond) h_precond := by

vc-proof: |-
  -- <vc-proof>
    sorry
  -- </vc-proof>

vc-postamble: |-
  /-
  -- Invalid Inputs
  [
      {
          "input": {
              "lst": "[]"
          }
      }
  ]
  -- Tests
  [
      {
          "input": {
              "lst": "[1, 2, 3]"
          },
          "expected": 3,
          "unexpected": [
              2,
              1,
              0
          ]
      },
      {
          "input": {
              "lst": "[5, 5, 5]"
          },
          "expected": 5,
          "unexpected": [
              4,
              0
          ]
      },
      {
          "input": {
              "lst": "[10, 1, 9]"
          },
          "expected": 10,
          "unexpected": [
              1,
              9
          ]
      },
      {
          "input": {
              "lst": "[7]"
          },
          "expected": 7,
          "unexpected": [
              0,
              6
          ]
      },
      {
          "input": {
              "lst": "[0, 0, 0, 0]"
          },
          "expected": 0,
          "unexpected": [
              1
          ]
      }
  ]
  -/

