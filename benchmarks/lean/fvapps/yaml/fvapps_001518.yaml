vc-description: |-
  /-
  You like tracking airplane flights a lot. Specifically, you maintain history of an airplane’s flight at several instants and record them in your notebook. Today, you have recorded N such records h1, h2, ..., hN, denoting the heights of some airplane at several instants. These records mean that airplane was first flying on height h1, then started changing its height to h2, then from h2 to h3 and so on. The airplanes are usually on cruise control while descending or ascending, so 
  you can assume that plane will smoothly increase/decrease its height from hi to hi + 1 with a constant speed. You can see that during this period, the airplane will cover all possible heights in the range [min(hi, hi+1), max(hi, hi+1)] (both inclusive). It is easy to see that the plane will be at all possible heights in the range exactly a single instant of time during this ascend/descend.

  You are interested in finding the maximum integer K such that the plane was at some height exactly K times during the flight.

  -----Input-----
  There is a single test case.
  First line of the input contains an integer N denoting the number of records of heights of the plane.
  Second line contains N space separated integers denoting h1, h2, ..., hN.

  -----Output-----
  Output a single maximum integer K in one line, such that the plane was at some height exactly K times during the flight.

  -----Constraints-----
  - hi ≠ hi+1

  -----Subtasks-----
  Subtask #1: (30 points)
  - 1 ≤ N ≤ 1000
  - 1 ≤ hi ≤ 1000

  Subtask #2: (70 points)
  - 1 ≤ N ≤ 105
  - 1 ≤ hi ≤ 109

  -----Example-----
  Input:
  5
  1 2 3 2 3

  Output:
  3

  -----Explanation-----

  The flight can be draw as:

  3  /\/
  2 /
  1

  There are infinitely many heights at which the plane was 3 times during the flight, for example 2.5, 2.1. Notice that the plane was only 2 times at height 2. Moreover, there are no height at which the plane was more than 3 times, so the answer is 3.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def find_max_height_visits (n : Nat) (heights : List Nat) : Nat :=
  sorry

vc-theorems: |-
  theorem find_max_height_visits_bounds {n : Nat} {heights : List Nat} 
    (h1 : heights.length = n) (h2 : n > 0) :
    let result := find_max_height_visits n heights
    1 ≤ result ∧ result ≤ n :=
  sorry

  theorem find_max_height_visits_max_frequency {n : Nat} {heights : List Nat} 
    (h : heights.length = n) :
    find_max_height_visits n heights = 
      List.foldl (fun acc x => max acc (List.count x heights)) 0 heights :=
  sorry

  theorem find_max_height_visits_identical {n : Nat} {heights : List Nat} {h : Nat}
    (h1 : heights.length = n)
    (h2 : ∀ x ∈ heights, x = h) :
    find_max_height_visits n heights = n :=
  sorry

  theorem find_max_height_visits_order_invariant {n : Nat} {heights : List Nat}
    (h : heights.length = n) :
    find_max_height_visits n heights = find_max_height_visits n (List.reverse heights) :=
  sorry

  theorem find_max_height_visits_monotone {n : Nat} {heights : List Nat}
    (h : heights.length = n) :
    let result := find_max_height_visits n heights
    let max_freq_height := List.foldl 
      (fun acc x => if List.count x heights > List.count acc heights then x else acc) 
      (List.head! heights) 
      heights
    find_max_height_visits (n + 1) (heights ++ [max_freq_height]) ≥ result :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

  /--
  info: 3
  -/
  #guard_msgs in
  #eval find_max_height_visits 5 [2, 2, 1, 2, 4]

  /--
  info: 2
  -/
  #guard_msgs in
  #eval find_max_height_visits n2 heights2

  /--
  info: 5
  -/
  #guard_msgs in
  #eval find_max_height_visits n3 heights3

