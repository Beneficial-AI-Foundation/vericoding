vc-description: |-
  /-
  Tracy loves Donuts. She purchased a lots of Donuts for her birthday party. She learnt to calculate the area of the circle a few days back and she is fascinated to know the area of the donuts as well !! Help her finding the area of the Donuts…..
  
  -----Input:-----
  - First line will contain, number of testcases. Then the testcases follow. 
  - Each testcase contains of a single line of input, where in you have to provide the RADIUS of the Donuts. 
  
  -----Output:-----
  For each testcase, output in a single line answer is the AREA of the Donut.
  
  -----Constraints-----
  1 <= Radius <= 20.
  
  -----Sample Input:-----
  2
  5 
  12
  
  -----Sample Output:-----
  78.5
  
  452.16
  -/
  
  -- Apps difficulty: interview
  -- Assurance level: guarded

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def Float.ofString? (s: String) : Option Float :=
  sorry
  
  def calculate_donut_areas (radii : List Int) : List String :=
  sorry

vc-theorems: |-
  def Float.ofString! (s: String) : Float := (Float.ofString? s).get!
  
  theorem calculate_donut_areas_length_match (radii : List Int) :
    (calculate_donut_areas radii).length = radii.length :=
  sorry
  
  theorem calculate_donut_areas_decimal_format (radii : List Int) (result : String) :
    result ∈ calculate_donut_areas radii →
    (∃ n d : String, result = n ++ "." ++ d ∧ d.length = 2) :=
  sorry
  
  theorem calculate_donut_areas_accuracy (radius : Int) :
    let area := calculate_donut_areas [radius]
    let expected := (Float.ofInt (radius * radius)) * 3.14
    let actual := Float.ofString! area.head!
    (actual - expected).abs < 0.01 :=
  sorry
  
  theorem calculate_donut_areas_negative_valid (radii : List Int)
    (h : ∀ r ∈ radii, r < 0) :
    (calculate_donut_areas radii).length = radii.length :=
  sorry

vc-postamble: |-

