vc-description: |-
  /-
  Write a function that rearranges an integer into its largest possible value. 
  
  ```python
  super_size(123456) # 654321
  super_size(105)    # 510
  super_size(12)     # 21
  ```
  ``` haskell
  superSize 123456 `shouldBe` 654321
  superSize    105 `shouldBe`    510
  superSize     12 `shouldBe`     21
  ```
  
  If the argument passed through is single digit or is already the maximum possible integer, your function should simply return it.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def super_size (n : Nat) : Nat := sorry
  
  theorem super_size_same_digits {n : Nat} : 
    (toString n).data = (toString (super_size n)).data := sorry

vc-theorems: |-
  theorem super_size_greater_or_equal {n : Nat} :
    super_size n â‰¥ n := sorry
  
  theorem super_size_idempotent {n : Nat} :
    super_size (super_size n) = super_size n := sorry
  
  theorem super_size_same_length {n : Nat} :
    (toString n).length = (toString (super_size n)).length := sorry
  
  /-
  info: 654321
  -/
  -- #guard_msgs in
  -- #eval super_size 123456
  
  /-
  info: 510
  -/
  -- #guard_msgs in
  -- #eval super_size 105
  
  /-
  info: 21
  -/
  -- #guard_msgs in
  -- #eval super_size 12

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

