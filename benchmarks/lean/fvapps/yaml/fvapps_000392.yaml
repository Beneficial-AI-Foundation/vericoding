vc-description: |-
  /-
  In a 1 million by 1 million grid, the coordinates of each grid square are (x, y) with 0 <= x, y < 10^6.
  We start at the source square and want to reach the target square.  Each move, we can walk to a 4-directionally adjacent square in the grid that isn't in the given list of blocked squares.
  Return true if and only if it is possible to reach the target square through a sequence of moves.

  Example 1:
  Input: blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]
  Output: false
  Explanation: 
  The target square is inaccessible starting from the source square, because we can't walk outside the grid.

  Example 2:
  Input: blocked = [], source = [0,0], target = [999999,999999]
  Output: true
  Explanation: 
  Because there are no blocked cells, it's possible to reach the target square.

  Note:

  0 <= blocked.length <= 200
  blocked[i].length == 2
  0 <= blocked[i][j] < 10^6
  source.length == target.length == 2
  0 <= source[i][j], target[i][j] < 10^6
  source != target
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def Point := Nat × Nat

  def is_escape_possible (blocked : List Point) (source target : Point) : Bool := sorry

vc-theorems: |-
  theorem empty_blocked_always_possible (source target : Point) :
    is_escape_possible [] source target = true := sorry

  theorem blocked_source_target_impossible {blocked : List Point} {source target : Point} :
    (source ∈ blocked ∨ target ∈ blocked) →
    is_escape_possible blocked source target = false := sorry

  theorem same_source_target_possible {blocked : List Point} {source : Point} :
    source ∉ blocked →
    is_escape_possible blocked source source = true := sorry

  theorem symmetry {blocked : List Point} {source target : Point} :
    is_escape_possible blocked source target = is_escape_possible blocked target source := sorry

  theorem adjacent_points_blocked {source : Point} 
      (x := source.1)
      (y := source.2)
      (blocked := [(x+1,y), (x-1,y), (x,y+1), (x,y-1)])
      (target := (x+2, y+2)) :
    is_escape_possible blocked source target = false := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

  /-
  info: False
  -/
  #guard_msgs in
  #eval is_escape_possible [[0, 1], [1, 0]] [0, 0] [0, 2]

  /-
  info: True
  -/
  #guard_msgs in
  #eval is_escape_possible [] [0, 0] [999999, 999999]

  /-
  info: False
  -/
  #guard_msgs in
  #eval is_escape_possible [[10, 9], [9, 10], [10, 11], [11, 10]] [0, 0] [10, 10]

