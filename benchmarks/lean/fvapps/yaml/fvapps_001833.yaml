vc-description: |-
  /-
  A company is planning to interview 2n people. Given the array costs where costs[i] = [aCosti, bCosti], the cost of flying the ith person to city a is aCosti, and the cost of flying the ith person to city b is bCosti.
  Return the minimum cost to fly every person to a city such that exactly n people arrive in each city.
  
  Example 1:
  Input: costs = [[10,20],[30,200],[400,50],[30,20]]
  Output: 110
  Explanation: 
  The first person goes to city A for a cost of 10.
  The second person goes to city A for a cost of 30.
  The third person goes to city B for a cost of 50.
  The fourth person goes to city B for a cost of 20.
  
  The total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city.
  
  Example 2:
  Input: costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]
  Output: 1859
  
  Example 3:
  Input: costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]
  Output: 3086
  
  Constraints:
  
  2n == costs.length
  2 <= costs.length <= 100
  costs.length is even.
  1 <= aCosti, bCosti <= 1000
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def min_cost_two_cities (costs: List (List Nat)) : Nat := sorry
  
  def sum_all_costs (costs: List (List Nat)) : Nat :=
    costs.foldl (fun acc row => acc + row.foldl (· + ·) 0) 0

vc-theorems: |-
  theorem min_cost_two_cities_is_nonnegative 
    (costs: List (List Nat))
    (h1: costs.length % 2 = 0)
    (h2: ∀ cost ∈ costs, cost.length = 2) :
    min_cost_two_cities costs ≥ 0 := sorry
  
  theorem min_cost_two_cities_upper_bound
    (costs: List (List Nat)) 
    (h1: costs.length % 2 = 0)
    (h2: ∀ cost ∈ costs, cost.length = 2) :
    min_cost_two_cities costs ≤ sum_all_costs costs := sorry
  
  theorem min_cost_two_cities_swap_invariant
    (costs: List (List Nat))
    (h1: costs.length % 2 = 0) 
    (h2: ∀ cost ∈ costs, cost.length = 2) :
    min_cost_two_cities costs = 
    min_cost_two_cities (costs.map (fun cost => [cost.get! 1, cost.get! 0])) := sorry
  
  /-
  info: 110
  -/
  -- #guard_msgs in
  -- #eval min_cost_two_cities [[10, 20], [30, 200], [400, 50], [30, 20]]
  
  /-
  info: 1859
  -/
  -- #guard_msgs in
  -- #eval min_cost_two_cities [[259, 770], [448, 54], [926, 667], [184, 139], [840, 118], [577, 469]]
  
  /-
  info: 3086
  -/
  -- #guard_msgs in
  -- #eval min_cost_two_cities [[515, 563], [451, 713], [537, 709], [343, 819], [855, 779], [457, 60], [650, 359], [631, 42]]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

