vc-description: |-
  /-
  Given two strings S and T, return if they are equal when both are typed into empty text editors. # means a backspace character.
  Note that after backspacing an empty text, the text will continue empty.
  
  Example 1:
  Input: S = "ab#c", T = "ad#c"
  Output: true
  Explanation: Both S and T become "ac".
  
  Example 2:
  Input: S = "ab##", T = "c#d#"
  Output: true
  Explanation: Both S and T become "".
  
  Example 3:
  Input: S = "a##c", T = "#a#c"
  Output: true
  Explanation: Both S and T become "c".
  
  Example 4:
  Input: S = "a#c", T = "b"
  Output: false
  Explanation: S becomes "c" while T becomes "b".
  
  Note:
  
  1 <= S.length <= 200
  1 <= T.length <= 200
  S and T only contain lowercase letters and '#' characters.
  
  Follow up:
  
  Can you solve it in O(N) time and O(1) space?
  -/

vc-preamble: |-
  def backspace_compare (s1: String) (s2: String) : Bool :=
    sorry

vc-helpers: |-

vc-definitions: |-
  def normalize_backspace (s: String) : String :=
    sorry

vc-theorems: |-
  theorem backspace_compare_matches_naive (s1 s2: String) :
    backspace_compare s1 s2 = (normalize_backspace s1 = normalize_backspace s2) :=
  by sorry
  
  theorem self_compare (s: String) :
    backspace_compare s s = true :=
  by sorry
  
  theorem symmetric (s1 s2: String) :
    backspace_compare s1 s2 = backspace_compare s2 s1 :=
  by sorry
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval backspace_compare "ab#c" "ad#c"
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval backspace_compare "ab##" "c#d#"
  
  /-
  info: False
  -/
  -- #guard_msgs in
  -- #eval backspace_compare "a#c" "b"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

