vc-description: |-
  /-
  Find the difference between two collections. The difference means that either the character is present in one collection or it is present in other, but not in both. Return a sorted set with difference.

  The collections can contain any character and can contain duplicates.

  For instance:

  A = [a,a,t,e,f,i,j]

  B = [t,g,g,i,k,f]

  difference = [a,e,g,j,k]
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def List.diff : List α → List α → List α 
    | xs, ys => sorry

  -- Elements in result must come from input lists

vc-theorems: |-
  theorem diff_elements_from_inputs {α} (a b : List α) (x : α) :
    x ∈ List.diff a b → x ∈ a ∨ x ∈ b
    := sorry

  -- Elements in result must be unique 

  theorem diff_unique {α} (a b : List α) :
    List.Nodup (List.diff a b)
    := sorry

  -- If inputs are same (up to permutation), result is empty

  theorem diff_same {α} (a b : List α) :
    a = b → List.diff a b = []
    := sorry

  -- Symmetric property

  theorem diff_symmetric {α} (a b : List α) :
    List.diff a b = List.diff b a
    := sorry

  -- Identity property

  theorem diff_identity {α} (xs : List α) :
    List.diff xs xs = []
    := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /--
  info: []
  -/
  #guard_msgs in
  #eval diff ["a", "b"] ["a", "b"]

  /--
  info: []
  -/
  #guard_msgs in
  #eval diff [] []

  /--
  info: ['a', 'e', 'g', 'j', 'k']
  -/
  #guard_msgs in
  #eval diff ["a", "a", "t", "e", "f", "i", "j"] ["t", "g", "g", "i", "k", "f"]

