vc-description: |-
  /-
  In a directed graph, we start at some node and every turn, walk along a directed edge of the graph.  If we reach a node that is terminal (that is, it has no outgoing directed edges), we stop.
  Now, say our starting node is eventually safe if and only if we must eventually walk to a terminal node.  More specifically, there exists a natural number K so that for any choice of where to walk, we must have stopped at a terminal node in less than K steps.
  Which nodes are eventually safe?  Return them as an array in sorted order.
  The directed graph has N nodes with labels 0, 1, ..., N-1, where N is the length of graph.  The graph is given in the following form: graph[i] is a list of labels j such that (i, j) is a directed edge of the graph.
  Example:
  Input: graph = [[1,2],[2,3],[5],[0],[5],[],[]]
  Output: [2,4,5,6]
  Here is a diagram of the above graph.

  Note:

  graph will have length at most 10000.
  The number of edges in the graph will not exceed 32000.
  Each graph[i] will be a sorted list of different integers, chosen within the range [0, graph.length - 1].
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def eventual_safe_nodes (graph: List (List Nat)) : List Nat := sorry 

  theorem eventual_safe_nodes_increasing {graph : List (List Nat)} : 
    ∀ i j, i < j → 
    let result := eventual_safe_nodes graph
    ∀ hi : i < result.length,
    ∀ hj : j < result.length,
    result[i]'hi ≤ result[j]'hj := sorry

vc-theorems: |-
  theorem eventual_safe_nodes_valid_indices {graph : List (List Nat)} :
    ∀ x, x ∈ eventual_safe_nodes graph → x < graph.length := sorry

  theorem eventual_safe_nodes_no_duplicates {graph : List (List Nat)} :
    ∀ x y, x ∈ eventual_safe_nodes graph → 
    y ∈ eventual_safe_nodes graph →
    x = y → x = y := sorry

  theorem eventual_safe_nodes_contains_terminals {graph : List (List Nat)} :
    ∀ i h, graph[i]'h = [] →
    i ∈ eventual_safe_nodes graph := sorry

  theorem eventual_safe_nodes_only_points_to_safe {graph : List (List Nat)} :
    ∀ node h, node ∈ eventual_safe_nodes graph →
    ∀ neighbor, neighbor ∈ graph[node]'h →
    neighbor ∈ eventual_safe_nodes graph := sorry

  theorem eventual_safe_nodes_singleton_empty : 
    eventual_safe_nodes [List.nil] = [0] := sorry

  theorem eventual_safe_nodes_singleton_self_loop :
    eventual_safe_nodes [[0]] = [] := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

  /-
  info: [2, 4, 5, 6]
  -/
  #guard_msgs in
  #eval eventual_safe_nodes [[1, 2], [2, 3], [5], [0], [5], [], []]

  /-
  info: [0, 1, 2, 3, 4]
  -/
  #guard_msgs in
  #eval eventual_safe_nodes [[], [0, 2, 3, 4], [3], [4], []]

  /-
  info: [4]
  -/
  #guard_msgs in
  #eval eventual_safe_nodes [[1, 2, 3, 4], [1, 2], [3, 4], [0, 4], []]

