vc-description: |-
  /-
  Speedcubing is the hobby involving solving a variety of twisty puzzles, the most famous being the 3x3x3 puzzle or Rubik's Cube, as quickly as possible.
  
  In the majority of Speedcubing competitions, a Cuber solves a scrambled cube 5 times, and their result is found by taking the average of the middle 3 solves (ie. the slowest and fastest times are disregarded, and an average is taken of the remaining times).
  
  In some competitions, the unlikely event of a tie situation is resolved by comparing Cuber's fastest times.
  
  Write a function ```cube_times(times)``` that, given an array of floats ```times``` returns an array / tuple with the Cuber's result (to 2 decimal places) AND their fastest solve.
  
  For example:
  ```python
  cube_times([9.5, 7.6, 11.4, 10.5, 8.1]) = (9.37, 7.6)
  # Because (9.5 + 10.5 + 8.1) / 3 = 9.37 and 7.6 was the fastest solve.
  ```
  
  Note: ```times``` will always be a valid array of 5 positive floats (representing seconds)
  -/
  
  -- Apps difficulty: introductory
  -- Assurance level: guarded

vc-preamble: |-
  def List.minimum (xs : List Float) : Float :=
    match xs with
    | [] => 0
    | x::rest => rest.foldl min x

vc-helpers: |-

vc-definitions: |-
  def cubeTimes (times: List Float) : Float × Float := sorry
  
  def List.sort (xs : List Float) : List Float :=
  sorry
  
  def Float.decimalPlaces (x : Float) : Nat :=
  sorry

vc-theorems: |-
  theorem cubeTimes_avg_is_middle_three (times : List Float)
    (h : times.length = 5)
    (h2 : ∀ x ∈ times, 0.01 ≤ x ∧ x ≤ 1000) :
    let sorted := times.sort
    let middle_avg := (sorted[1]! + sorted[2]! + sorted[3]!) / 3
    (cubeTimes times).1 = Float.floor ((middle_avg * 100) + 0.5) / 100 :=
  sorry
  
  theorem cubeTimes_avg_decimal_places (times : List Float)
    (h : times.length = 5)
    (h2 : ∀ x ∈ times, 0.01 ≤ x ∧ x ≤ 1000) :
    let avg := (cubeTimes times).1
    Float.decimalPlaces avg ≤ 2 :=
  sorry
  
  theorem cubeTimes_fastest_is_min (times : List Float)
    (h : times.length = 5)
    (h2 : ∀ x ∈ times, 0.01 ≤ x ∧ x ≤ 1000) :
    (cubeTimes times).2 = List.minimum times :=
  sorry

vc-postamble: |-

