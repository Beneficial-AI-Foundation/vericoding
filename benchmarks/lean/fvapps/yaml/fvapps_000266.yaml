vc-description: |-
  /-
  Your car starts at position 0 and speed +1 on an infinite number line.  (Your car can go into negative positions.)
  Your car drives automatically according to a sequence of instructions A (accelerate) and R (reverse).
  When you get an instruction "A", your car does the following: position += speed, speed *= 2.
  When you get an instruction "R", your car does the following: if your speed is positive then speed = -1 , otherwise speed = 1.  (Your position stays the same.)
  For example, after commands "AAR", your car goes to positions 0->1->3->3, and your speed goes to 1->2->4->-1.
  Now for some target position, say the length of the shortest sequence of instructions to get there.
  Example 1:
  Input: 
  target = 3
  Output: 2
  Explanation: 
  The shortest instruction sequence is "AA".
  Your position goes from 0->1->3.

  Example 2:
  Input: 
  target = 6
  Output: 5
  Explanation: 
  The shortest instruction sequence is "AAARA".
  Your position goes from 0->1->3->7->7->6.

  Note: 

  1 <= target <= 10000.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def racecar (target : Nat) : Nat := sorry

  theorem racecar_output_positive (target : Nat) : 
    target > 0 → racecar target > 0 := sorry

vc-theorems: |-
  theorem racecar_growth (target : Nat) :
    target > 0 → racecar target ≤ 4 * target.log2 := sorry

  theorem racecar_optimal_for_power2minus1 (target : Nat) :
    target > 0 → 
    (∃ k : Nat, target + 1 = 2^k) →
    racecar target = (target + 1).log2 - 1 := sorry

  theorem racecar_consistent (target : Nat) :
    target > 0 →
    racecar target = racecar target := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

  /-
  info: 2
  -/
  #guard_msgs in
  #eval racecar 3

  /-
  info: 5
  -/
  #guard_msgs in
  #eval racecar 6

  /-
  info: 5
  -/
  #guard_msgs in
  #eval racecar 4

