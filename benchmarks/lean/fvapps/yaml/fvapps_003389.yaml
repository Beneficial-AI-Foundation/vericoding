vc-description: |-
  /-
  You are given three piles of casino chips: white, green and black chips:

  * the first pile contains only white chips
  * the second pile contains only green chips
  * the third pile contains only black chips

  Each day you take exactly two chips of different colors and head to the casino. You can choose any color, but you are not allowed to take two chips of the same color in a day.

  You will be given an array representing the number of chips of each color and your task is to return the maximum number of days you can pick the chips. Each day you need to take exactly two chips.

  ```python 
  solve([1,1,1]) = 1, because after you pick on day one, there will be only one chip left
  solve([1,2,1] = 2, you can pick twice; you pick two chips on day one then on day two
  solve([4,1,1]) = 2
  ```

  ```javascript 
  solve([1,1,1]) = 1, because after you pick on day one, there will be only one chip left
  solve([1,2,1]) = 2, you can pick twice; you pick two chips on day one then on day two
  solve([4,1,1]) = 2
  ```

  ```go 
  solve([1,1,1]) = 1, because after you pick on day one, there will be only one chip left
  solve([1,2,1]) = 2, you can pick twice; you pick two chips on day one then on day two
  solve([4,1,1]) = 2
  ```

  ```ruby 
  solve([1,1,1]) = 1, because after you pick on day one, there will be only one chip left
  solve([1,2,1]) = 2, you can pick twice; you pick two chips on day, two chips on day two
  solve([4,1,1]) = 2
  ```

  More examples in the test cases. Good luck!

  Brute force is not the way to go here. Look for a simplifying mathematical approach.
  -/

vc-preamble: |-
  def solve (chips : List Nat) : Nat := sorry

  def listSum : List Nat → Nat 
  | [] => 0
  | x::xs => x + listSum xs

  def listMin : List Nat → Nat
  | [] => 0
  | [x] => x
  | x::xs => min x (listMin xs)

vc-helpers: |

vc-definitions: |-
  def secondMin : List Nat → Nat
  | [] => 0
  | [_] => 0
  | l => 
    let m := listMin l
    listMin (l.filter (fun x => x ≠ m))

vc-theorems: |-
  theorem solve_two_identical_bounded (a b : Nat)
    (h₁ : a > 0)
    (h₂ : b > 0) :
    solve [a, a, b] ≤ (a + a + b) / 2 := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

  /-
  info: 1
  -/
  #guard_msgs in
  #eval solve [1, 1, 1]

  /-
  info: 2
  -/
  #guard_msgs in
  #eval solve [1, 2, 1]

  /-
  info: 9
  -/
  #guard_msgs in
  #eval solve [8, 2, 8]

