vc-description: |-
  /-
  Given an array of non-negative integers, you are initially positioned at the first index of the array.
  
  Each element in the array represents your maximum jump length at that position.
  
  Your goal is to reach the last index in the minimum number of jumps.
  
  Example:
  
  Input: [2,3,1,1,4]
  Output: 2
  Explanation: The minimum number of jumps to reach the last index is 2.
      Jump 1 step from index 0 to 1, then 3 steps to the last index.
  
  Note:
  
  You can assume that you can always reach the last index.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def jump (v : List Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem jump_single_element (n : Nat) :
    jump [n] = 0 :=
    sorry
  
  theorem jump_two_elements :
    jump [2, 1] = 1 :=
    sorry
  
  theorem jump_three_ones :
    jump [1, 1, 1] = 2 :=
    sorry
  
  theorem jump_complex_case1 :
    jump [2, 3, 1, 1, 4] = 2 :=
    sorry
  
  theorem jump_complex_case2 :
    jump [2, 1, 1, 1] = 2 :=
    sorry
  
  theorem jump_ascending :
    jump [1, 2, 3] = 2 :=
    sorry
  
  theorem jump_long_sequence :
    jump [5, 9, 3, 2, 1, 0, 2, 3, 3, 1, 0, 0] = 3 :=
    sorry
  
  theorem jump_descending :
    jump [3, 2, 1] = 1 :=
    sorry
  
  theorem jump_mixed_sequence :
    jump [4, 1, 1, 3, 1, 1, 1] = 2 :=
    sorry
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval jump [2, 3, 1, 1, 4]
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval jump [1, 2, 3]
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval jump [1]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

