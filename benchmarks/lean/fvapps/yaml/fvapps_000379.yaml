vc-description: |-
  /-
  In a given integer array A, we must move every element of A to either list B or list C. (B and C initially start empty.)
  Return true if and only if after such a move, it is possible that the average value of B is equal to the average value of C, and B and C are both non-empty.
  Example :
  Input: 
  [1,2,3,4,5,6,7,8]
  Output: true
  Explanation: We can split the array into [1,4,5,8] and [2,3,6,7], and both of them have the average of 4.5.
  
  Note:
  
  The length of A will be in the range [1, 30].
  A[i] will be in the range of [0, 10000].
  -/

vc-preamble: |-
  def split_array_same_average (arr : List Int) : Bool :=
  sorry

vc-helpers: |-

vc-definitions: |-
  def sum_list (l : List Int) : Int :=
  l.foldl (· + ·) 0

vc-theorems: |-
  theorem split_array_verification {arr : List Int} 
    (h : split_array_same_average arr = true) 
    (h1 : arr.length ≥ 2)
    (h2 : ∀ x ∈ arr, x ≥ 0 ∧ x ≤ 100) :
    ∃ (subset1 subset2 : List Int),
      subset1 ≠ [] ∧ 
      subset2 ≠ [] ∧
      (∀ x, x ∈ subset1 ∨ x ∈ subset2 ↔ x ∈ arr) ∧
      (sum_list subset1) * subset2.length = (sum_list subset2) * subset1.length :=
  sorry
  
  theorem single_element_false {x : Int} (h : x ≥ 1 ∧ x ≤ 10) :
    split_array_same_average [x] = false :=
  sorry
  
  theorem identical_elements_splittable {x : Int} {n : Nat}
    (h : n ≥ 2) :
    split_array_same_average (List.replicate n x) = true :=
  sorry
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval split_array_same_average [1, 2, 3, 4, 5, 6, 7, 8]
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval split_array_same_average [1, 2, 3]
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval split_array_same_average [3, 1, 2]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

