vc-description: |-
  /-
  Create a function that takes a Roman numeral as its argument and returns its value as a numeric decimal integer. You don't need to validate the form of the Roman numeral.
  
  Modern Roman numerals are written by expressing each decimal digit of the number to be encoded separately, starting with the leftmost digit and skipping any 0s. So 1990 is rendered "MCMXC" (1000 = M, 900 = CM, 90 = XC) and 2008 is rendered "MMVIII" (2000 = MM, 8 = VIII). The Roman numeral for 1666, "MDCLXVI", uses each letter in descending order.
  
  Example:
  
  ```python
  solution('XXI') # should return 21
  ```
  
  ```Elixir
  Solution.decode("XXI") # should return 21
  ```
  
  Help:
  ```
  Symbol  Value
  I             1
  V             5
  X             10
  L             50
  C             100
  D             500
  M             1,000
  ```
  
  *Courtesy of rosettacode.org*
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def solution (s : String) : Nat := sorry
  
  def isValidRoman (s : String) : Bool := sorry

vc-theorems: |-
  theorem single_repeated_numerals {roman : String} (c : Char)
    (h1 : roman.data.all (· = c))
    (h2 : c ∈ ['M', 'D', 'C', 'L', 'X', 'V', 'I']) :
    solution roman = solution (toString c) * roman.length := sorry
  
  theorem subtractive_pairs_less :
    solution "IV" < solution "VI" ∧
    solution "IX" < solution "XI" ∧ 
    solution "XL" < solution "LX" ∧
    solution "XC" < solution "CX" ∧
    solution "CD" < solution "DC" ∧
    solution "CM" < solution "MC" := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

