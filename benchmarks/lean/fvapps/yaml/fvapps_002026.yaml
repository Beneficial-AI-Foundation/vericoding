vc-description: |-
  /-
  Mike is the president of country What-The-Fatherland. There are n bears living in this country besides Mike. All of them are standing in a line and they are numbered from 1 to n from left to right. i-th bear is exactly a_{i} feet high. 
  
   [Image] 
  
  A group of bears is a non-empty contiguous segment of the line. The size of a group is the number of bears in that group. The strength of a group is the minimum height of the bear in that group.
  
  Mike is a curious to know for each x such that 1 ≤ x ≤ n the maximum strength among all groups of size x.
  
  -----Input-----
  
  The first line of input contains integer n (1 ≤ n ≤ 2 × 10^5), the number of bears.
  
  The second line contains n integers separated by space, a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^9), heights of bears.
  
  -----Output-----
  
  Print n integers in one line. For each x from 1 to n, print the maximum strength among all groups of size x.
  
  -----Examples-----
  Input
  10
  1 2 3 4 5 4 3 2 1 6
  
  Output
  6 4 4 3 3 2 2 1 1 1
  -/

vc-preamble: |-
  def maximum (l : List Nat) : Nat :=
    match l with
    | [] => 0
    | h::t => List.foldl max h t

vc-helpers: |-

vc-definitions: |-
  def find_max_group_strengths (n : Nat) (heights : List Nat) : List Nat :=
    sorry

vc-theorems: |-
  theorem length_matches_input 
    {n : Nat} {heights : List Nat} 
    (h1 : heights.length > 0) (h2 : heights.length = n) 
    (h3 : ∀ x ∈ heights, x > 0 ∧ x ≤ 10^9) :
    (find_max_group_strengths n heights).length = n :=
  sorry
  
  theorem monotonically_decreasing
    {n : Nat} {heights : List Nat}
    (h1 : heights.length > 0) (h2 : heights.length = n)
    (h3 : ∀ x ∈ heights, x > 0 ∧ x ≤ 10^9) :
    ∀ i, i + 1 < n → 
      (find_max_group_strengths n heights)[i]! ≥ (find_max_group_strengths n heights)[i+1]! :=
  sorry
  
  theorem first_value_is_max
    {n : Nat} {heights : List Nat}
    (h1 : heights.length > 0) (h2 : heights.length = n)
    (h3 : ∀ x ∈ heights, x > 0 ∧ x ≤ 10^9) :
    (find_max_group_strengths n heights)[0]! ≤ maximum heights :=
  sorry
  
  theorem preserves_input
    {n : Nat} {heights heights_copy : List Nat}
    (h1 : heights.length > 0) (h2 : heights.length = n)
    (h3 : heights = heights_copy)
    (h4 : ∀ x ∈ heights, x > 0) :
    let _ := find_max_group_strengths n heights_copy
    heights = heights_copy :=
  sorry
  
  theorem last_value_positive
    {n : Nat} {heights : List Nat}
    (h1 : heights.length > 0) (h2 : heights.length = n)
    (h3 : ∀ x ∈ heights, x > 0 ∧ x ≤ 10^9) :
    (find_max_group_strengths n heights)[heights.length - 1]! > 0 :=
  sorry
  
  /-
  info: [6, 4, 4, 3, 3, 2, 2, 1, 1, 1]
  -/
  -- #guard_msgs in
  -- #eval find_max_group_strengths 10 heights1.copy()
  
  /-
  info: [923264237, 524125987, 374288891]
  -/
  -- #guard_msgs in
  -- #eval find_max_group_strengths 3 heights2.copy()
  
  /-
  info: [585325539, 365329221, 365329221, 291882089, 291882089]
  -/
  -- #guard_msgs in
  -- #eval find_max_group_strengths 5 heights3.copy()

vc-postamble: |-
  -- Apps difficulty: competition
  -- Assurance level: unguarded

