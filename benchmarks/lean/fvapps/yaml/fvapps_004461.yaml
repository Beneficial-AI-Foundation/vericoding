vc-description: |-
  /-
  ## Task

  Given a string, add the fewest number of characters possible from the front or back to make it a palindrome.

  ## Example

  For the input `cdcab`, the output should be `bacdcab`

  ## Input/Output

  Input is a string consisting of lowercase latin letters with length 3 <= str.length <= 10

  The output is a palindrome string satisfying the task.

  For s = `ab` either solution (`aba` or `bab`) will be accepted.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def buildPalindrome (s : String) : String := sorry

  def isSubstring (sub str : String) : Bool := sorry

vc-theorems: |-
  theorem result_is_palindrome (s : String) (h : s.length > 0) :
    let result := buildPalindrome s
    result.data = result.data.reverse := sorry

  theorem original_string_is_substring (s : String) (h : s.length > 0) :
    let result := buildPalindrome s
    isSubstring s result = true := sorry

  theorem minimal_length (s : String) (h : s.length > 0) :
    let result := buildPalindrome s
    (result.length ≥ s.length) ∧ 
    (∀ sub : String, sub.length < result.length → 
      (sub.data = sub.data.reverse ∧ isSubstring s sub = true) → False) := sorry

  theorem preserved_characters (s : String) (h : s.length > 0) :
    let result := buildPalindrome s
    ∀ c : Char, 
      result.data.count c ≥ s.data.count c := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /--
  info: 'abcdcba'
  -/
  #guard_msgs in
  #eval build_palindrome "abcdc"

  /--
  info: 'ababa'
  -/
  #guard_msgs in
  #eval build_palindrome "ababa"

  /--
  info: 'bacdcab'
  -/
  #guard_msgs in
  #eval build_palindrome "cdcab"

