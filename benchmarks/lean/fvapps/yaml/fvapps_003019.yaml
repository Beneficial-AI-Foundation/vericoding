vc-description: |-
  /-
  A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward. Examples of numerical palindromes are: `2332, 110011, 54322345`

  For a given number ```num```, write a function which returns an array of all the numerical palindromes contained within each number. The array should be sorted in ascending order and any duplicates should be removed.

  In this kata, single digit numbers and numbers which start or end with zeros (such as `010` and `00`) are **NOT** considered valid numerical palindromes.  

  If `num` contains no valid palindromes, return `"No palindromes found"`. 
  Otherwise, return `"Not valid"` if the input is not an integer or is less than `0`.

  ## Examples

  ```
  palindrome(1221)      =>  [22, 1221]
  palindrome(34322122)  =>  [22, 212, 343, 22122]
  palindrome(1001331)   =>  [33, 1001, 1331]
  palindrome(1294)      =>  "No palindromes found"
  palindrome("1221")    =>  "Not valid"
  ```

  ---

  ### Other Kata in this Series:

  Numerical Palindrome #1
  Numerical Palindrome #1.5
  Numerical Palindrome #2
  Numerical Palindrome #3
  Numerical Palindrome #3.5
  Numerical Palindrome #4
  Numerical Palindrome #5
  -/

vc-preamble: |-
  def palindrome (n : Int) : String := sorry 

  def isNumericPalindrome (n : Int) : Bool := sorry

vc-helpers: |

vc-definitions: |-
  def contains (haystack : String) (needle : String) : Bool := sorry

  def stringToInt (s : String) : Option Int := sorry

vc-theorems: |-
  theorem invalid_input_negative (n : Int) : 
    n < 0 → palindrome n = "Not valid"
    := sorry

  theorem valid_input_contains_palindromes (n : Int) :
    n ≥ 0 → palindrome n ≠ "Not valid" →
    let result := palindrome n
    let numStr := toString n
    ∀ p ∈ result.split (· = ','), 
      (∃ s : String, s = p ∧ contains numStr s ∧ 
        match stringToInt s with
        | some i => isNumericPalindrome i
        | none => false)
    := sorry

  theorem valid_input_sorted_results (n : Int) :
    n ≥ 0 → palindrome n ≠ "Not valid" →
    let result := palindrome n
    let nums := result.split (· = ',')
    ∀ i j, i < j → j < nums.length →
      match stringToInt (nums.get! i), stringToInt (nums.get! j) with
      | some x, some y => x ≤ y
      | _, _ => true
    := sorry

  theorem no_palindromes_when_none_exist (n : Int) (numStr : String := toString n) :
    n ≥ 0 →
    (∀ s : String, contains numStr s → 
      match stringToInt s with
      | some i => ¬isNumericPalindrome i
      | none => true) →
    palindrome n = "No palindromes found"
    := sorry

  theorem invalid_input_float (f : Float) :
    palindrome 0 = "Not valid"
    := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: [22, 212, 343, 22122]
  -/
  #guard_msgs in
  #eval palindrome 34322122

  /-
  info: 'No palindromes found'
  -/
  #guard_msgs in
  #eval palindrome 1294

  /-
  info: 'Not valid'
  -/
  #guard_msgs in
  #eval palindrome -123

