vc-description: |-
  /-
  What's in a name?
  ..Or rather, what's a name in? For us, a particular string is where we are looking for a name.

  Task

  Test whether or not the string contains all of the letters which spell a given name, in order.

  The format
  A function passing two strings, searching for one (the name) within the other.
  ``function nameInStr(str, name){ return true || false }``

  Examples

      nameInStr("Across the rivers", "chris") --> true
                  ^      ^  ^^   ^
                  c      h  ri   s

      Contains all of the letters in "chris", in order.
  ----------------------------------------------------------
      nameInStr("Next to a lake", "chris") --> false

      Contains none of the letters in "chris".
  --------------------------------------------------------------------
      nameInStr("Under a sea", "chris") --> false
                     ^   ^
                     r   s

      Contains only some of the letters in "chris".
  --------------------------------------------------------------------
      nameInStr("A crew that boards the ship", "chris") --> false
                   cr    h              s i
                   cr                h  s i  
                   c     h      r       s i
                   ...

      Contains all of the letters in "chris", but not in order.
  --------------------------------------------------------------------
      nameInStr("A live son", "Allison") --> false
                 ^ ^^   ^^^
                 A li   son

      Contains all of the correct letters in "Allison", in order, 
      but not enough of all of them (missing an 'l').

  Note: testing will _not_ be case-sensitive.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def name_in_str (text name : String) : Bool := sorry

  theorem case_insensitivity (text name : String) :
    name_in_str text name = name_in_str text.toUpper name ∧
    name_in_str text name = name_in_str text name.toUpper ∧
    name_in_str text name = name_in_str text.toUpper name.toUpper := sorry

vc-theorems: |-
  theorem empty_name_true (text : String) :
    name_in_str text "" = true := sorry

  theorem empty_string_false (name : String) :
    name ≠ "" → name_in_str "" name = false := sorry

  theorem substring_implies_sequence (text name : String) :
    (∃ i : Nat, text.toLower.data.take i = name.toLower.data) → 
    name_in_str text name = true := sorry

  theorem concatenation_property (text1 text2 name : String) :
    name_in_str text1 name ∨ name_in_str text2 name →
    name_in_str (text1 ++ text2) name = true := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /--
  info: True
  -/
  #guard_msgs in
  #eval name_in_str "Across the rivers" "chris"

  /--
  info: False
  -/
  #guard_msgs in
  #eval name_in_str "Next to a lake" "chris"

  /--
  info: False
  -/
  #guard_msgs in
  #eval name_in_str "A crew that boards the ship" "chris"

