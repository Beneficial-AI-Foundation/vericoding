vc-description: |-
  /-
  Write function ```splitSentence``` which will create a list of strings from a string.
  
  Example:
  
  ```"hello world" -> ["hello", "world"]```
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def splitSentence (s : String) : List String := sorry
  
  theorem split_sentence_rejoin (s : String) : 
    String.intercalate " " (splitSentence s) = String.intercalate " " (s.split (· = ' ')) := sorry

vc-theorems: |-
  theorem split_sentence_nonempty_parts (s : String) :
    ∀ part ∈ splitSentence s, part.length > 0 := sorry
  
  theorem split_sentence_no_whitespace (s : String) :
    ∀ part ∈ splitSentence s, ' ' ∉ part.data := sorry
  
  /-
  info: ['This', 'string', 'is', 'splitsville']
  -/
  -- #guard_msgs in
  -- #eval splitSentence "This string is splitsville"
  
  /-
  info: ['something']
  -/
  -- #guard_msgs in
  -- #eval splitSentence "something"
  
  /-
  info: ['hello', 'world']
  -/
  -- #guard_msgs in
  -- #eval splitSentence "hello world"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

