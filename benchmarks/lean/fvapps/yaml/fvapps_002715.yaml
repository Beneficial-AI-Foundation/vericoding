vc-description: |-
  /-
  In this Kata, you will remove the left-most duplicates from a list of integers and return the result.

  ```python
  # Remove the 3's at indices 0 and 3
  # followed by removing a 4 at index 1
  solve([3, 4, 4, 3, 6, 3]) # => [4, 6, 3]
  ```

  More examples can be found in the test cases. 

  Good luck!
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def solve (arr : List Int) : List Int :=
    sorry

vc-theorems: |-
  theorem solve_no_duplicates (arr : List Int) :
    let result := solve arr
    ∀ x ∈ result, (result.count x = 1) ∧ (x ∈ arr) :=
  sorry

  theorem solve_preserves_elements (arr : List Int) :
    let result := solve arr 
    ∀ x ∈ arr, x ∈ result ↔ x ∈ arr :=
  sorry

  theorem solve_edge_cases_empty : 
    solve [] = [] :=
  sorry

  theorem solve_edge_cases_singleton (x : Int) :
    solve [x] = [x] :=
  sorry

  theorem solve_edge_cases_two_same (x : Int) :
    solve [x, x] = [x] :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /--
  info: [4, 6, 3]
  -/
  #guard_msgs in
  #eval solve [3, 4, 4, 3, 6, 3]

  /--
  info: [1, 2, 3]
  -/
  #guard_msgs in
  #eval solve [1, 2, 1, 2, 1, 2, 3]

  /--
  info: [4, 5, 2, 1]
  -/
  #guard_msgs in
  #eval solve [1, 1, 4, 5, 1, 2, 1]

