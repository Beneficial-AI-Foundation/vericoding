vc-description: |-
  /-
  Write a function that counts how many different ways you can make change for an amount of money, given an array of coin denominations. For example, there are 3 ways to give change for 4 if you have coins with denomination 1 and 2: 
  ```
  1+1+1+1, 1+1+2, 2+2.
  ```
  The order of coins does not matter:
  ```
  1+1+2 == 2+1+1
  ```
  Also, assume that you have an infinite amount of coins.
  
  Your function should take an amount to change and an array of unique denominations for the coins:
  
  ```python
    count_change(4, [1,2]) # => 3
    count_change(10, [5,2,3]) # => 4
    count_change(11, [5,7]) # => 0
  ```
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def count_change (money : Int) (coins : List Int) : Int :=
    sorry

vc-theorems: |-
  theorem count_change_no_coins (money : Int) :
    count_change money [] = (if money = 0 then 1 else 0) :=
  sorry
  
  /-
  info: 3
  -/
  -- #guard_msgs in
  -- #eval count_change 4 [1, 2]
  
  /-
  info: 4
  -/
  -- #guard_msgs in
  -- #eval count_change 10 [5, 2, 3]
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval count_change 11 [5, 7]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible

