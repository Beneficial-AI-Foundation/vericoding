vc-description: |-
  /-
  Your task is to create a function called ```sum_arrays()``` in Python or ```addArrays``` in Javascript, which takes two arrays consisting of integers, and returns the sum of those two arrays.

  The twist is that (for example) ```[3,2,9]``` does not equal ``` 3 + 2 + 9```, it would equal ```'3' + '2' + '9'``` converted to an integer for this kata, meaning it would equal ```329```. The output should be an array of the the sum  in a similar fashion to the input (for example, if the sum is ```341```, you would return ```[3,4,1]```). Examples are given below of what two arrays should return.
  ```python
  [3,2,9],[1,2] --> [3,4,1]
  [4,7,3],[1,2,3] --> [5,9,6]
  [1],[5,7,6] --> [5,7,7]
  ```
  If both arrays are empty, return an empty array.

  In some cases, there will be an array containing a negative number as the first index in the array. In this case treat the whole number as a negative number. See below:
  ```python
  [3,2,6,6],[-7,2,2,8] --> [-3,9,6,2] # 3266 + (-7228) = -3962
  ```
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def sumArrays (arr1 arr2 : List Int) : List Int := sorry

  -- Empty arrays sum to empty array

vc-theorems: |-
  theorem sum_empty : sumArrays [] [] = [] := sorry

  -- Empty array is neutral element

  theorem sum_empty_neutral (arr : List Int) : 
    sumArrays arr [] = arr âˆ§ sumArrays [] arr = arr := sorry

  -- Sum of arrays equals sum of their numerical values

  theorem sum_equals_numerical_sum (arr1 arr2 : List Int) :
    let toNum (arr : List Int) := if arr = [] then (0 : Int) else
      let digits := arr.tail.map (fun x => (x.toNat : Int))
      let num := digits.foldl (fun acc d => acc * 10 + d) (0 : Int)
      if arr.head! < 0 then -num else num
    toNum (sumArrays arr1 arr2) = toNum arr1 + toNum arr2 := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: [3, 4, 1]
  -/
  #guard_msgs in
  #eval sum_arrays #[3, 2, 9] #[1, 2]

  /-
  info: [-3, 9, 6, 2]
  -/
  #guard_msgs in
  #eval sum_arrays #[3, 2, 6, 6] #[-7, 2, 2, 8]

  /-
  info: []
  -/
  #guard_msgs in
  #eval sum_arrays #[] #[]

