vc-description: |-
  /-
  Zonal Computing Olympiad 2015, 29 Nov 2014
  
  We say that two integers x and y have a variation of at least K, if |x − y| ≥ K (the absolute value of their difference is at least K). Given a sequence of N integers a1,a2,...,aN and K, the total variation count is the number of pairs of elements in the sequence with variation at least K, i.e. it is the size of the set of pairs
  
  {(i,j)|1≤i<j≤N and|ai−aj|≥K} 
  
  For example if K = 1 and the sequence is 3,2,4 the answer is 3. If K = 1 and the sequence is 3, 1, 3 then the answer is 2.
  
  Your task is to write a program that takes a sequence and the value K as input and computes the total variation count.
  
  -----Input format-----
  The first line contains two positive integers N and K, separated by a space.
  
  This is followed by a line containing N integers separated by space giving the values
  of the sequence.
  
  -----Output format-----
  A single integer in a single line giving the total variation count.
  
  -----Test data-----
  You may assume that all integers in the input are in the range 0 to 10^8 inclusive.
  
  Subtask 1 (40 marks) : 1 ≤ N ≤ 4000, 1 ≤ K ≤ 10^8 
  Subtask 2 (60 marks) : 1 ≤ N ≤ 65000, 1 ≤ K ≤ 10^8 
  
  -----Sample Input-----
  3 1 
  3 1 3
  
  -----Sample Output-----
  2
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def total_variation_count (n : Nat) (k : Nat) (sequence : List Int) : Nat :=
  sorry

vc-theorems: |-
  theorem total_variation_nonNegative {n k : Nat} {sequence : List Int} :
    total_variation_count n k sequence ≥ 0 :=
  sorry
  
  theorem total_variation_upperBound {n k : Nat} {sequence : List Int} :
    sequence.length = n →
    total_variation_count n k sequence ≤ (n * (n-1)) / 2 :=
  sorry
  
  theorem total_variation_zeroK {n : Nat} {sequence : List Int} :
    sequence.length = n →
    total_variation_count n 0 sequence = 
      (List.range n).foldl (fun acc i => 
        acc + (List.range (n-i-1)).foldl (fun acc' j =>
          acc' + if sequence.get! i ≠ sequence.get! (i+j+1) then 1 else 0) 0) 0 :=
  sorry
  
  theorem total_variation_permutation {n k : Nat} {sequence : List Int} :
    sequence.length = n →
    ∀ perm : List Int, List.Perm sequence perm →
    total_variation_count n k sequence = total_variation_count n k perm :=
  sorry
  
  theorem total_variation_symmetry {n k : Nat} {sequence : List Int} :
    sequence.length = n →
    total_variation_count n k sequence = total_variation_count n k sequence.reverse :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

