vc-description: |-
  /-
  # Task
   A range-collapse representation of an array of integers looks like this: `"1,3-6,8"`, where `3-6` denotes the range from `3-6`, i.e. `[3,4,5,6]`. 

   Hence `"1,3-6,8"` = `[1,3,4,5,6,8]`. Some other range-collapse representations of `[1,3,4,5,6,8]` include `"1,3-5,6,8", "1,3,4,5,6,8", etc`.

   Each range is written in the following format `"a-b"`, where `a < b`, and the whole range must belong to the array in an increasing order.

   You are given an array `arr`. Your task is to find the number of different range-collapse representations of the given array.

  # Example

   For `arr = [1,3,4,5,6,8]`, the result should be `8`.
   ```
   "1,3-4,5,6,8"
   "1,3-4,5-6,8"
   "1,3-5,6,8"
   "1,3-6,8"
   "1,3,4-5,6,8"
   "1,3,4-6,8"
   "1,3,4,5-6,8"
   "1,3,4,5,6,8"```

  # Input/OutPut

   - `[input]` integer array `arr`

    sorted array of different positive integers.

   - `[output]` an integer

    the number of different range-collapse representations of the given array.
  -/

vc-preamble: |-
  def count_range_collapses (arr : List Int) : Nat := sorry

  def is_power_of_two (n : Nat) : Bool := 
    (n &&& (n - 1) = 0) && n > 0

  def count_consecutive_pairs (l : List Int) : Nat :=
    let pairs := l.zip (l.drop 1)
    pairs.foldl (fun acc p => if p.2 - p.1 = 1 then acc + 1 else acc) 0

vc-helpers: |

vc-definitions: |-
  def sort_list (l : List Int) : List Int :=
    l.mergeSort (fun a b => a ≤ b)

vc-theorems: |-
  theorem non_consecutive_array_returns_one 
    {arr : List Int} (h : arr.length > 0) :
    (∀ i, i + 1 < arr.length → arr[i]! + 1 < arr[i+1]!) → 
    count_range_collapses arr = 1 := sorry

  theorem result_is_power_of_two 
    {arr : List Int} (h : arr.length > 1) :
    is_power_of_two (count_range_collapses arr) := sorry

  theorem consecutive_pairs_determine_result
    {arr : List Int} (h : arr.length > 1) :
    let sorted := sort_list arr
    let consec_count := count_consecutive_pairs sorted
    count_range_collapses arr = 2 ^ consec_count := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

  /-
  info: 8
  -/
  #guard_msgs in
  #eval count_range_collapses [1, 3, 4, 5, 6, 8]

  /-
  info: 4
  -/
  #guard_msgs in
  #eval count_range_collapses [1, 2, 3]

  /-
  info: 1
  -/
  #guard_msgs in
  #eval count_range_collapses [11, 43, 66, 123]

