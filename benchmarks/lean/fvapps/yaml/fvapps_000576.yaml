vc-description: |-
  /-
  Teddy and Tracy like to play a game based on strings. The game is as follows. Initially, Tracy writes a long random string on a whiteboard. Then, each player starting with Teddy makes turn alternately. Each turn, the player must erase a contiguous substring that exists in the dictionary. The dictionary consists of N words.
  Of course, the player that can't erase any substring in his turn loses the game, and the other player is declared the winner.
  Note that after a substring R is erased, the remaining substring becomes separated, i.e. they cannot erase a word that occurs partially to the left of R and partially to the right of R.

  Determine the winner of the game, assuming that both players play optimally.

  -----Input-----
  The first line contains a single integer T, the number of test cases. T test cases follow. The first line of each testcase contains a string S, the string Tracy writes on the whiteboard. The next line contains a single integer N. N lines follow. The i-th line contains a single string wi, the i-th word in the dictionary.

  -----Output-----
  For each test case, output a single line containing the name of the winner of the game.

  -----Example-----
  Input:
  3
  codechef
  2
  code
  chef
  foo
  1
  bar
  mississippi
  4
  ssissi
  mippi
  mi
  ppi

  Output:
  Tracy
  Tracy
  Teddy

  -----Constraints-----
  - 1 <= T <= 5
  - 1 <= N <= 30
  - 1 <= |S| <= 30
  - 1 <= |wi| <= 30
  - S and wi contain only characters 'a'-'z'
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def solve_string_game (s : String) (dict : List String) : String :=
  sorry

vc-theorems: |-
  theorem valid_output (s : String) (dict : List String) :
    let result := solve_string_game s dict
    result = "Teddy" ∨ result = "Tracy" :=
  sorry

  theorem empty_dict_tracy (s : String) :
    solve_string_game s [] = "Tracy" :=
  sorry

  theorem full_string_valid (s : String) :
    let result := solve_string_game s [s]
    result = "Teddy" ∨ result = "Tracy" :=
  sorry

  theorem single_char_valid :
    let result := solve_string_game "a" ["a"]
    result = "Teddy" ∨ result = "Tracy" :=
  sorry

  theorem dict_order_invariant : 
    solve_string_game "abcd" ["ab", "cd"] = solve_string_game "abcd" ["cd", "ab"] :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

  /--
  info: 'Tracy'
  -/
  #guard_msgs in
  #eval solve_string_game "codechef" ["code", "chef"]

  /--
  info: 'Tracy'
  -/
  #guard_msgs in
  #eval solve_string_game "foo" ["bar"]

  /--
  info: 'Teddy'
  -/
  #guard_msgs in
  #eval solve_string_game "mississippi" ["ssissi", "mippi", "mi", "ppi"]

