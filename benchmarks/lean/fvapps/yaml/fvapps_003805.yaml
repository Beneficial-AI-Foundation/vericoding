vc-description: |-
  /-
  # How many urinals are free?
  In men's public toilets with urinals, there is this unwritten rule that you leave at least one urinal free
  between you and the next person peeing. 
  For example if there are 3 urinals and one person is already peeing in the left one, you will choose the
  urinal on the right and not the one in the middle.
  That means that a maximum of 3 people can pee at the same time on public toilets with 
  5 urinals when following this rule (Only 2 if the first person pees into urinal 2 or 4).
  
  ![Imgur Urinals](https://i.imgur.com/imZE6xm.png)
  
  ## Your task:
  You need to write a function that returns the maximum of free urinals as an integer according to the unwritten rule.
  
  ### Input
  A String containing 1s and 0s (Example: `10001`) (1 <= Length <= 20)  
  A one stands for a taken urinal and a zero for a free one. 
  
  ### Examples
  
  `10001` returns 1 (10101)  
  `1001` returns 0 (1001)  
  `00000` returns 3 (10101)  
  `0000` returns 2 (1001)  
  `01000` returns 1 (01010 or 01001) 
  
  ### Note
  When there is already a mistake in the input string (for example `011`), then return `-1`
  
  Have fun and don't pee into the wrong urinal ;)
  -/

vc-preamble: |-
  def hasConsecutiveOnes (chars : List Char) : Bool :=
    match chars with
    | '1' :: '1' :: _ => true
    | _ :: rest => hasConsecutiveOnes rest
    | [] => false
  
  def containsAdjacentOnes (s : String) : Bool :=
    hasConsecutiveOnes s.data

vc-helpers: |-

vc-definitions: |-
  def get_free_urinals (s : String) : Int := sorry

vc-theorems: |-
  theorem invalid_adjacent_urinals :
    ∀ s: String, containsAdjacentOnes s → get_free_urinals s = -1 :=
  sorry
  
  theorem result_nonnegative_if_valid :
    ∀ s: String, ¬containsAdjacentOnes s → get_free_urinals s ≥ 0 :=
  sorry
  
  theorem result_bounded_by_half_length :
    ∀ s: String, ¬containsAdjacentOnes s →
      get_free_urinals s ≤ (s.length + 1) / 2 :=
  sorry
  
  theorem alternating_pattern_valid :
    ∀ gaps: List Nat,
    let s := String.join (List.intersperse "0" (List.replicate gaps.length "1"))
    ¬containsAdjacentOnes s →
    get_free_urinals s ≥ 0 :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded
  
  /--
  info: 1
  -/
  #guard_msgs in
  #eval get_free_urinals "10001"
  
  /--
  info: 3
  -/
  #guard_msgs in
  #eval get_free_urinals "00000"
  
  /--
  info: -1
  -/
  #guard_msgs in
  #eval get_free_urinals "110"

