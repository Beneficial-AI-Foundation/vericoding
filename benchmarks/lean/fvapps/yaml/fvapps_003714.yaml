vc-description: |-
  /-
  Given an array containing only integers, add all the elements and return the binary equivalent of that sum.
  
  If the array contains any non-integer element (e.g. an object, a float, a string and so on), return false.
  
  **Note:** The sum of an empty array is zero.
  
  ```python
  arr2bin([1,2]) == '11'
  arr2bin([1,2,'a']) == False
  ```
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def arr2bin (arr : List α) : String :=
  sorry
  
  def sumList (l : List Int) : Int :=
  sorry
  
  def toBinaryString (n : Int) : String :=
  sorry
  
  def allBinary (s : String) : Bool :=
  sorry
  
  def stringToNat (s : String) : Nat :=
  sorry
  
  def isAllInts (arr : List α) : Bool :=
  sorry
  
  def listToInts (arr : List α) : List Int :=
  sorry

vc-theorems: |-
  theorem arr2bin_all_ints {arr : List Int} :
    arr2bin arr = toBinaryString (sumList arr) :=
  sorry
  
  theorem arr2bin_empty :
    arr2bin ([] : List α) = "0" :=
  sorry
  
  theorem arr2bin_positive_ints {arr : List Nat} :
    let result := arr2bin arr
    allBinary result ∧
    stringToNat result = arr.foldl (init := 0) (·+·) :=
  sorry
  
  theorem arr2bin_mixed_types {α} {arr : List α} :
    (¬isAllInts arr → arr2bin arr = "") ∧
    (isAllInts arr → arr2bin arr = toBinaryString (sumList (listToInts arr))) :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
  
  /--
  info: '11'
  -/
  #guard_msgs in
  #eval arr2bin [1, 2]
  
  /--
  info: False
  -/
  #guard_msgs in
  #eval arr2bin [1, 2, "a"]
  
  /--
  info: '0'
  -/
  #guard_msgs in
  #eval arr2bin []

