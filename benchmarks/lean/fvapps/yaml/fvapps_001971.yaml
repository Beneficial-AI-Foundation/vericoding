vc-description: |-
  /-
  Jeff's friends know full well that the boy likes to get sequences and arrays for his birthday. Thus, Jeff got sequence p_1, p_2, ..., p_{n} for his birthday.
  
  Jeff hates inversions in sequences. An inversion in sequence a_1, a_2, ..., a_{n} is a pair of indexes i, j (1 ≤ i < j ≤ n), such that an inequality a_{i} > a_{j} holds.
  
  Jeff can multiply some numbers of the sequence p by -1. At that, he wants the number of inversions in the sequence to be minimum. Help Jeff and find the minimum number of inversions he manages to get.
  
  -----Input-----
  
  The first line contains integer n (1 ≤ n ≤ 2000). The next line contains n integers — sequence p_1, p_2, ..., p_{n} (|p_{i}| ≤ 10^5). The numbers are separated by spaces.
  
  -----Output-----
  
  In a single line print the answer to the problem — the minimum number of inversions Jeff can get.
  
  -----Examples-----
  Input
  2
  2 1
  
  Output
  0
  
  Input
  9
  -2 0 -1 0 -1 2 1 0 -1
  
  Output
  6
  -/

vc-preamble: |-
  def absInt (i: Int) : Int :=
    if i < 0 then -i else i
  
  def rangeToInt (n: Nat) : List Int :=
    (List.range n).map Int.ofNat

vc-helpers: |-

vc-definitions: |-
  def countInversions (seq: List Int) : Nat := sorry
  
  def minInversions (n: Nat) (seq: List Int) : Nat :=
  sorry

vc-theorems: |-
  theorem minInversions_nonnegative (n: Nat) (seq: List Int) :
    minInversions n seq ≥ 0 :=
  sorry
  
  theorem minInversions_upper_bound (n: Nat) (seq: List Int) :
    minInversions n seq ≤ n * (n-1) / 2 :=
  sorry
  
  theorem minInversions_less_than_original {n: Nat} {seq: List Int} :
    minInversions n seq ≤ countInversions (seq.map absInt) :=
  sorry
  
  theorem binary_sequence_bound {n: Nat} {seq: List Int}
    (h: ∀ x ∈ seq, x = 0 ∨ x = 1) :
    minInversions n seq ≤ n * n / 4 :=
  sorry
  
  theorem sorted_sequence_zero {n: Nat} :
    minInversions n (rangeToInt n) = 0 :=
  sorry

vc-postamble: |-
  -- Apps difficulty: competition
  -- Assurance level: unguarded
  
  /--
  info: 0
  -/
  #guard_msgs in
  #eval min_inversions 2 [2, 1]
  
  /--
  info: 6
  -/
  #guard_msgs in
  #eval min_inversions 9 [-2, 0, -1, 0, -1, 2, 1, 0, -1]
  
  /--
  info: 5
  -/
  #guard_msgs in
  #eval min_inversions 9 [0, 0, 1, 1, 0, 0, 1, 0, 1]

