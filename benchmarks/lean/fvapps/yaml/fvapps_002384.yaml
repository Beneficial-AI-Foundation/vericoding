vc-description: |-
  /-
  Given a string s, the power of the string is the maximum length of a non-empty substring that contains only one unique character.
  Return the power of the string.

  Example 1:
  Input: s = "leetcode"
  Output: 2
  Explanation: The substring "ee" is of length 2 with the character 'e' only.

  Example 2:
  Input: s = "abbcccddddeeeeedcba"
  Output: 5
  Explanation: The substring "eeeee" is of length 5 with the character 'e' only.

  Example 3:
  Input: s = "triplepillooooow"
  Output: 5

  Example 4:
  Input: s = "hooraaaaaaaaaaay"
  Output: 11

  Example 5:
  Input: s = "tourist"
  Output: 1

  Constraints:

  1 <= s.length <= 500
  s contains only lowercase English letters.
  -/

vc-preamble: |-
  def max_power (s : List Char) : Nat :=
    sorry

vc-helpers: |

vc-definitions: |-
  def max_run (s : List Char) : Nat :=
    sorry

vc-theorems: |-
  theorem max_power_lower_bound (s : List Char) (h : s.length > 0) : 
    max_power s ≥ 1 :=
  sorry

  theorem max_power_upper_bound (s : List Char) :
    max_power s ≤ s.length :=
  sorry

  theorem max_power_equals_longest_run (s : List Char) (h : s.length > 0) :
    max_power s = max_run s :=
  sorry

  theorem max_power_single_char (s : List Char) (h : s.length > 0) 
    (h' : ∀ (i j : Fin s.length), s.get i = s.get j) :
    max_power s = s.length :=
  sorry

  theorem max_power_alternating (s : List Char) (h : s.length ≥ 2)
    (h' : ∀ (i : Fin s.length), 
      if i.val % 2 = 0 
      then s.get i = 'a'
      else s.get i = 'b') :
    max_power s = 1 :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

  /-
  info: 2
  -/
  #guard_msgs in
  #eval max_power "leetcode"

  /-
  info: 5
  -/
  #guard_msgs in
  #eval max_power "abbcccddddeeeeedcba"

  /-
  info: 1
  -/
  #guard_msgs in
  #eval max_power "tourist"

