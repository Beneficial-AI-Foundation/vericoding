vc-description: |-
  /-
  Write an algorithm to determine if a number is "happy".

  A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.

  Example: 

  Input: 19
  Output: true
  Explanation: 
  12 + 92 = 82
  82 + 22 = 68
  62 + 82 = 100
  12 + 02 + 02 = 1
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def is_happy (n : Nat) : Bool := sorry

  theorem is_happy_returns_bool (n : Nat) : 
    n > 0 → is_happy n = true ∨ is_happy n = false := sorry

vc-theorems: |-
  theorem is_happy_terminates (n : Nat) :
    n > 0 → ∃ (result : Bool), is_happy n = result := sorry

  theorem is_happy_known_happy :
    is_happy 1 = true ∧ is_happy 7 = true ∧ is_happy 10 = true ∧ is_happy 13 = true ∧ 
    is_happy 19 = true ∧ is_happy 23 = true ∧ is_happy 28 = true ∧ is_happy 31 = true := sorry

  theorem is_happy_known_unhappy :
    is_happy 2 = false ∧ is_happy 3 = false ∧ is_happy 4 = false ∧ is_happy 5 = false ∧ 
    is_happy 6 = false ∧ is_happy 8 = false ∧ is_happy 9 = false := sorry

  theorem is_happy_deterministic (n m : Nat) :
    n = m → is_happy n = is_happy m := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /--
  info: True
  -/
  #guard_msgs in
  #eval is_happy 19

  /--
  info: False
  -/
  #guard_msgs in
  #eval is_happy 2

  /--
  info: True
  -/
  #guard_msgs in
  #eval is_happy 100

