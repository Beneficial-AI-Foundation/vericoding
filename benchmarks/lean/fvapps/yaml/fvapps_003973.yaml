vc-description: |-
  /-
  Write a function, `persistence`, that takes in a positive parameter `num` and returns its multiplicative persistence, which is the number of times you must multiply the digits in `num` until you reach a single digit.
  
  For example:
  
  ```python
   persistence(39) => 3  # Because 3*9 = 27, 2*7 = 14, 1*4=4
                         # and 4 has only one digit.
  
   persistence(999) => 4 # Because 9*9*9 = 729, 7*2*9 = 126,
                         # 1*2*6 = 12, and finally 1*2 = 2.
  
   persistence(4) => 0   # Because 4 is already a one-digit number.
  ```
  ```python
   persistence(39) # returns 3, because 3*9=27, 2*7=14, 1*4=4
                   # and 4 has only one digit
  
   persistence(999) # returns 4, because 9*9*9=729, 7*2*9=126,
                    # 1*2*6=12, and finally 1*2=2
  
   persistence(4) # returns 0, because 4 is already a one-digit number
  ```
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def persistence (n : Nat) : Nat := sorry
  
  def multiplyDigits (n : Nat) : Nat := sorry

vc-theorems: |-
  theorem persistence_non_negative (n : Nat) : persistence n ≥ 0 := sorry
  
  theorem persistence_single_digit (n : Nat) : n < 10 → persistence n = 0 := sorry
  
  /-
  info: 3
  -/
  -- #guard_msgs in
  -- #eval persistence 39
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval persistence 4
  
  /-
  info: 4
  -/
  -- #guard_msgs in
  -- #eval persistence 999

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

