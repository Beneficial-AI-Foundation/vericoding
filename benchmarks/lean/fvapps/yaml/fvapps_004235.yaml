vc-description: |-
  /-
  ## Task
  
  Given a positive integer as input, return the output as a string in the following format: 
  
  Each element, corresponding to a digit of the number, multiplied by a power of 10 in such a way that with the sum of these elements you can obtain the original number.
  
  ## Examples
  
  Input | Output
  ---   | ---
  0     | ""
  56    | "5\*10+6"
  60    | "6\*10"
  999   | "9\*100+9\*10+9"
  10004 | "1\*10000+4"
  
  Note: `input >= 0`
  -/

vc-preamble: |-
  def splitString (s : String) (sep : String) : List String := sorry
  def containsString (s : String) (sub : String) : Bool := sorry

vc-helpers: |-

vc-definitions: |-
  def startsWithString (s : String) (pre : String) : Bool := sorry
  
  def simplify (n : Nat) : String := sorry

vc-theorems: |-
  theorem simplify_zero : 
    simplify 0 = "" := sorry
  
  theorem simplify_format_valid (n : Nat) (h : n > 0) :
    let terms := splitString (simplify n) "+"
    terms.length > 0 := sorry
  
  theorem simplify_terms_valid (n : Nat) (h : n > 0) :
    let terms := splitString (simplify n) "+"
    ∀ t ∈ terms, 
      (containsString t "*" ∧ 
       let parts := splitString t "*"
       parts.length = 2 ∧
       let digit := parts[0]!
       let power := parts[1]!
       startsWithString power "10" ∧
       let digitNum := digit.toNat!
       1 ≤ digitNum ∧ digitNum ≤ 9)
      ∨
      (¬containsString t "*" ∧
       t.all Char.isDigit ∧
       let termNum := t.toNat!
       1 ≤ termNum ∧ termNum ≤ 9) := sorry
  
  theorem simplify_sums_to_input (n : Nat) :
    let terms := splitString (simplify n) "+"
    terms.foldl
      (fun acc t => 
        if containsString t "*" then 
          let parts := splitString t "*"
          acc + parts[0]!.toNat! * parts[1]!.toNat!
        else
          acc + t.toNat!)
      0
    = n := sorry
  
  theorem simplify_no_leading_zeros (n : Nat) (h : n > 0) :
    let terms := splitString (simplify n) "+"
    ∀ t ∈ terms, ¬startsWithString t "0" := sorry
  
  /-
  info: '5*10+6'
  -/
  -- #guard_msgs in
  -- #eval simplify 56
  
  /-
  info: '9*100+9*10+9'
  -/
  -- #guard_msgs in
  -- #eval simplify 999
  
  /-
  info: '1*10000+4'
  -/
  -- #guard_msgs in
  -- #eval simplify 10004

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

