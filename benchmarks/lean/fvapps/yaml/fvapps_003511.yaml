vc-description: |-
  /-
  In this exercise, you will have to create a function named tiyFizzBuzz. This function will take on a string parameter and will return that string with some characters replaced, depending on the value:

  - If a letter is a upper case consonants, replace that character with "Iron".
  - If a letter is a lower case consonants or a non-alpha character, do nothing to that character
  - If a letter is a upper case vowel, replace that character with "Iron Yard".
  - If a letter is a lower case vowel, replace that character with "Yard".

  Ready?
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def tiy_fizz_buzz (s : String) : String := sorry

  def isSubstringOf (needle haystack : String) : Bool := sorry

vc-theorems: |-
  theorem output_length_never_shorter (s : String) :
    (tiy_fizz_buzz s).length ≥ s.length := sorry

  theorem preserves_non_letters (s : String) (c : Char) :
    c ∈ s.data → ¬c.isAlpha → c.toNat < 128 → c ∈ (tiy_fizz_buzz s).data := sorry 

  theorem uppercase_becomes_iron (s : String) (c : Char) :  
    c ∈ s.data → c.isUpper → isSubstringOf "Iron" (tiy_fizz_buzz s) = true := sorry

  theorem vowels_become_yard (s : String) (c : Char) :
    c ∈ s.data → c.toLower ∈ ['a', 'e', 'i', 'o', 'u'] → 
    isSubstringOf "Yard" (tiy_fizz_buzz s) = true := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /--
  info: ' '
  -/
  #guard_msgs in
  #eval tiy_fizz_buzz " "

  /--
  info: 'Iron'
  -/
  #guard_msgs in
  #eval tiy_fizz_buzz "H"

  /--
  info: 'Iron Yard'
  -/
  #guard_msgs in
  #eval tiy_fizz_buzz "A"

  /--
  info: 'IronYardllYard IronIron YardIronIronIron!'
  -/
  #guard_msgs in
  #eval tiy_fizz_buzz "Hello WORLD!"

