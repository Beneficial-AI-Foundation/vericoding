vc-description: |-
  /-
  Say you have an array for which the ith element is the price of a given stock on day i.

  Design an algorithm to find the maximum profit. You may complete at most k transactions.

  Note:
  You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

  Example 1:

  Input: [2,4,1], k = 2
  Output: 2
  Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.

  Example 2:

  Input: [3,2,6,5,0,3], k = 2
  Output: 7
  Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4.
  Â             Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
  -/

vc-preamble: |-
  def max_profit (k : Nat) (prices : List Nat) : Nat :=
    sorry

vc-helpers: |

vc-definitions: |-
  def lastElem (l : List Nat) : Nat :=
    match l with
    | [] => 0
    | [x] => x
    | x::xs => lastElem xs

vc-theorems: |-
  theorem single_price_zero_profit (k : Nat) (p : Nat) : 
    max_profit k [p] = 0 := sorry

  private def pairwise_profits (prices : List Nat) : Nat :=
    sorry

  private def isSorted (l : List Nat) : Prop :=
    sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible

  /-
  info: 2
  -/
  #guard_msgs in
  #eval max_profit 2 [2, 4, 1]

  /-
  info: 7
  -/
  #guard_msgs in
  #eval max_profit 2 [3, 2, 6, 5, 0, 3]

  /-
  info: 3
  -/
  #guard_msgs in
  #eval max_profit 1 [1, 2, 3, 4]

