vc-description: |-
  /-
  Consider a sequence, which is formed by the following rule: next term is taken as the smallest possible non-negative integer, which is not yet in the sequence, so that `no 3` terms of sequence form an arithmetic progression.
  
  ## Example
  
  `f(0) = 0` -- smallest non-negative  
  `f(1) = 1` -- smallest non-negative, which is not yet in the sequence  
  `f(2) = 3` -- since `0, 1, 2` form an arithmetic progression  
  `f(3) = 4` -- neither of `0, 1, 4`, `0, 3, 4`, `1, 3, 4` form an arithmetic progression, so we can take smallest non-negative, which is larger than `3`  
  `f(4) = 9` --  `5, 6, 7, 8` are not good, since `1, 3, 5`, `0, 3, 6`, `1, 4, 7`, `0, 4, 8` are all valid arithmetic progressions.  
  
  etc...
  
  ## The task
  
  Write a function `f(n)`, which returns the `n-th` member of sequence.
  
  ## Limitations
  
  There are `1000` random tests with `0 <= n <= 10^9`, so you should consider algorithmic complexity of your solution.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def sequence (n : Nat) : Nat :=
  sorry
  
  def toBinaryString (n : Nat) : List Nat :=
  sorry
  
  def fromBase3 (digits : List Nat) : Nat :=
  sorry

vc-theorems: |-
  theorem sequence_nonnegative (n : Nat) :
    sequence n â‰¥ 0 :=
  sorry
  
  theorem sequence_monotonic {n : Nat} (h : n > 0) :
    sequence n > sequence (n - 1) :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible
  
  /-- Helper functions for binary/base-3 conversion -/
  
  /--
  info: 0
  -/
  #guard_msgs in
  #eval sequence 0
  
  /--
  info: 1
  -/
  #guard_msgs in
  #eval sequence 1
  
  /--
  info: 3
  -/
  #guard_msgs in
  #eval sequence 2
  
  /--
  info: 4
  -/
  #guard_msgs in
  #eval sequence 3
  
  /--
  info: 9
  -/
  #guard_msgs in
  #eval sequence 4
  
  /--
  info: 7329
  -/
  #guard_msgs in
  #eval sequence 334

