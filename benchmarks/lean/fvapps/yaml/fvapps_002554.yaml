vc-description: |-
  /-
  Complete the method so that it formats the words into a single comma separated value. The last word should be separated by the word 'and' instead of a comma. The method takes in an array of strings and returns a single formatted string. Empty string values should be ignored. Empty arrays or null/nil values being passed into the method should result in an empty string being returned. 
  
  ```Python
  format_words(['ninja', 'samurai', 'ronin']) # should return "ninja, samurai and ronin"
  format_words(['ninja', '', 'ronin']) # should return "ninja and ronin"
  format_words([]) # should return ""
  ```
  ```Haskell
  formatWords ["ninja", "samurai", "ronin"] -- should return "ninja, samurai and ronin"
  formatWords ["ninja", "", "ronin"] -- should return "ninja and ronin"
  formatWords [] -- should return ""
  ```
  -/

vc-preamble: |-
  def format_words (words : List String) : String := sorry
  
  def String.countSubstr (s1 s2 : String) : Nat := sorry

vc-helpers: |-

vc-definitions: |-
  def substringExists (s1 s2 : String) : Bool := sorry
  
  theorem format_words_empty_filtered :
    ∀ (words : List String),
    (words.filter (fun w => w ≠ "")).isEmpty →  
    format_words words = "" := sorry

vc-theorems: |-
  theorem format_words_contains_filtered :
    ∀ (words : List String) (word : String),
    word ≠ "" →
    word ∈ words →
    substringExists (format_words words) word = true := sorry
  
  theorem format_words_single_and :
    ∀ (words : List String),
    (words.filter (fun w => w ≠ "")).length > 1 →
    substringExists (format_words words) " and " = true ∧
    String.countSubstr (format_words words) " and " = 1 := sorry
  
  theorem format_words_no_and :
    ∀ (words : List String),
    (words.filter (fun w => w ≠ "")).length ≤ 1 →
    substringExists (format_words words) "and" = false := sorry
  
  theorem format_words_maintains_order :
    ∀ (words : List String),
    ¬(words.filter (fun w => w ≠ "")).isEmpty →
    let filtered := words.filter (fun w => w ≠ "")
    substringExists (format_words words) filtered.head! ∧
    substringExists (format_words words) filtered.getLast! ∧
    format_words words = filtered.head! ∨
    format_words words = filtered.head! ++ ", " ++ filtered.getLast! ∨
    format_words words = filtered.head! ++ " and " ++ filtered.getLast! := sorry
  
  /-
  info: 'ninja, samurai and ronin'
  -/
  -- #guard_msgs in
  -- #eval format_words ["ninja", "samurai", "ronin"]
  
  /-
  info: 'ninja'
  -/
  -- #guard_msgs in
  -- #eval format_words ["ninja"]
  
  /-
  info: 'ninja and ronin'
  -/
  -- #guard_msgs in
  -- #eval format_words ["ninja", "", "ronin"]
  
  /-
  info: ''
  -/
  -- #guard_msgs in
  -- #eval format_words []

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

