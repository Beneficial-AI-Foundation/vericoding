vc-description: |-
  /-
  You are given an array $a$ consisting of $n$ integers numbered from $1$ to $n$.

  Let's define the $k$-amazing number of the array as the minimum number that occurs in all of the subsegments of the array having length $k$ (recall that a subsegment of $a$ of length $k$ is a contiguous part of $a$ containing exactly $k$ elements). If there is no integer occuring in all subsegments of length $k$ for some value of $k$, then the $k$-amazing number is $-1$.

  For each $k$ from $1$ to $n$ calculate the $k$-amazing number of the array $a$.

  -----Input-----

  The first line contains one integer $t$ ($1 \le t \le 1000$) — the number of test cases. Then $t$ test cases follow.

  The first line of each test case contains one integer $n$ ($1 \le n \le 3 \cdot 10^5$) — the number of elements in the array. The second line contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le n$) — the elements of the array. 

  It is guaranteed that the sum of $n$ over all test cases does not exceed $3 \cdot 10^5$.

  -----Output-----

  For each test case print $n$ integers, where the $i$-th integer is equal to the $i$-amazing number of the array.

  -----Example-----
  Input
  3
  5
  1 2 3 4 5
  5
  4 4 4 4 2
  6
  1 3 1 5 3 1

  Output
  -1 -1 3 2 1 
  -1 4 4 4 2 
  -1 -1 1 1 1 1
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def find_amazing_numbers (n : Nat) (arr : List Nat) : List Int := sorry

  theorem example_case_1 (n : Nat) (arr : List Nat)
    (hn : n = 5)
    (harr : arr = [1,2,3,4,5]) :
    find_amazing_numbers n arr = [-1,-1,3,2,1] := sorry

vc-theorems: |-
  theorem example_case_2 (n : Nat) (arr : List Nat)  
    (hn : n = 5)
    (harr : arr = [4,4,4,4,2]) :
    find_amazing_numbers n arr = [-1,4,4,4,2] := sorry

  theorem example_case_3 (n : Nat) (arr : List Nat)
    (hn : n = 6) 
    (harr : arr = [1,3,1,5,3,1]) :
    find_amazing_numbers n arr = [-1,-1,1,1,1,1] := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

  /-
  info: [-1, -1, 3, 2, 1]
  -/
  #guard_msgs in
  #eval find_amazing_numbers 5 [1, 2, 3, 4, 5]

  /-
  info: [-1, 4, 4, 4, 2]
  -/
  #guard_msgs in
  #eval find_amazing_numbers 5 [4, 4, 4, 4, 2]

  /-
  info: [-1, -1, 1, 1, 1, 1]
  -/
  #guard_msgs in
  #eval find_amazing_numbers 6 [1, 3, 1, 5, 3, 1]

