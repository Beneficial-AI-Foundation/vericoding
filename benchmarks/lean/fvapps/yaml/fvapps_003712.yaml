vc-description: |-
  /-
  An expression is formed by taking the digits 1 to 9 in numerical order and then inserting into each gap between the numbers either a plus sign or a minus sign or neither.
  
  Your task is to write a method which takes one parameter and returns the **smallest possible number** of plus and minus signs necessary to form such an expression which equals the input.
  
  **Note:** All digits from 1-9 must be used exactly once.
  
  If there is no possible expression that evaluates to the input, then return `null/nil/None`.
  
  ~~~if:haskell
  `eval :: String -> Int` is available in `Preloaded` for your convenience.
  ~~~
  
  There are 50 random tests with upper bound of the input = 1000.
  
  ## Examples
  
  When the input is 100, you need to return `3`, since that is the minimum number of signs required, because: 123 - 45 - 67 + 89 = 100 (3 operators in total).
  
  More examples:
  ```
   11  -->  5  #  1 + 2 + 34 + 56 + 7 - 89 = 11
  100  -->  3  #  123 - 45 - 67 + 89 = 100
  766  -->  4  #  1 - 2 + 34 - 56 + 789 = 766
  160  -->  -  #  no solution possible
  ```
  
  Inspired by a [puzzle on BBC Radio 4](https://www.bbc.co.uk/programmes/p057wxwl) (which is unfortunately not available anymore)
  -/
  
  /- Helper function to check if expression uses given operators -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def operator_insertor (n : Int) : Option Int :=
  sorry
  
  def expr_evaluates_to : Int → String → Prop :=
  sorry
  
  def expr_uses_ops : List String → String → Prop :=
  sorry

vc-theorems: |-
  theorem operator_insertor_output_range (n : Int) :
    match operator_insertor n with
    | none => True
    | some result => 0 ≤ result ∧ result ≤ 8
    :=
  sorry
  
  theorem operator_insertor_result_exists (n : Int) (result : Int) :
    operator_insertor n = some result →
    ∃ ops : List String,
      (ops.length = result) ∧
      (∀ op ∈ ops, op = "+" ∨ op = "-" ∨ op = "") ∧
      (∃ expr : String, expr_evaluates_to n expr ∧ expr_uses_ops ops expr)
    :=
  sorry
  
  theorem operator_insertor_impossible_large (n : Int) :
    n ≥ 10^10 → operator_insertor n = none :=
  sorry
  
  theorem operator_insertor_impossible_small (n : Int) :
    n ≤ -(10^10) → operator_insertor n = none :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
  
  /-- Helper function to check if a string expression evaluates to a number -/
  
  /--
  info: 5
  -/
  #guard_msgs in
  #eval operator_insertor 11
  
  /--
  info: 3
  -/
  #guard_msgs in
  #eval operator_insertor 100
  
  /--
  info: None
  -/
  #guard_msgs in
  #eval operator_insertor 160

