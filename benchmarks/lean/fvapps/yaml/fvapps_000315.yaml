vc-description: |-
  /-
  Given s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2.
  
  Example 1:
  
  Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
  Output: true
  
  Example 2:
  
  Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"
  Output: false
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def is_interleave (s1 s2 s3 : String) : Bool :=
    sorry

vc-theorems: |-
  theorem concat_is_interleave (s1 s2 : String) :
    is_interleave s1 s2 (s1 ++ s2) = true :=
  sorry
  
  theorem length_property (s1 s2 s3 : String) :
    s3.length ≠ s1.length + s2.length →
    is_interleave s1 s2 s3 = false :=
  sorry
  
  theorem empty_string_interleave (s : String) :
    is_interleave s "" s = true ∧ is_interleave "" s s = true :=
  sorry
  
  theorem concat_order_preservation (s1 s2 : String) :
    is_interleave s1 s2 (s1 ++ s2) = true :=
  sorry
  
  theorem interleave_commutative (s1 s2 s3 : String) :
    is_interleave s1 s2 s3 = is_interleave s2 s1 s3 :=
  sorry
  
  theorem invalid_chars (s1 s2 s3 : String) (c : Char) :
    c ∈ s3.data →
    c ∉ s1.data →
    c ∉ s2.data →
    is_interleave s1 s2 s3 = false :=
  sorry
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval is_interleave "aabcc" "dbbca" "aadbbcbcac"
  
  /-
  info: False
  -/
  -- #guard_msgs in
  -- #eval is_interleave "aabcc" "dbbca" "aadbbbaccc"
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval is_interleave "abc" "def" "abcdef"

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

