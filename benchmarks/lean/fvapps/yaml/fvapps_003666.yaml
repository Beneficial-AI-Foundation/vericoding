vc-description: |-
  /-
  # The President's phone is broken

  He is not very happy.

  The only letters still working are uppercase ```E```, ```F```, ```I```, ```R```, ```U```, ```Y```.

  An angry tweet is sent to the department responsible for presidential phone maintenance.

  # Kata Task

  Decipher the tweet by looking for words with known meanings.

  * ```FIRE``` = *"You are fired!"*
  * ```FURY``` = *"I am furious."*

  If no known words are found, or unexpected letters are encountered, then it must be a *"Fake tweet."*

  # Notes

  * The tweet reads left-to-right.
  * Any letters not spelling words ```FIRE``` or ```FURY``` are just ignored
  * If multiple of the same words are found in a row then plural rules apply -
   * ```FIRE``` x 1 = *"You are fired!"*
   * ```FIRE``` x 2 = *"You and you are fired!"*
   * ```FIRE``` x 3 = *"You and you and you are fired!"*
   * etc...
   * ```FURY``` x 1 = *"I am furious."*
   * ```FURY``` x 2 = *"I am really furious."*
   * ```FURY``` x 3 = *"I am really really furious."*
   * etc...

  # Examples

  * ex1. FURYYYFIREYYFIRE = *"I am furious. You and you are fired!"*
  * ex2. FIREYYFURYYFURYYFURRYFIRE = *"You are fired! I am really furious. You are fired!"*
  * ex3. FYRYFIRUFIRUFURE = *"Fake tweet."*

  ----
  DM :-)
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def fire_and_fury (tweet : String) : String := sorry

  def containsSubstring (s : String) (sub : String) : Bool := sorry

vc-theorems: |-
  theorem empty_string_fake_tweet :
    fire_and_fury "" = "Fake tweet." := sorry

  theorem numeric_input_fake_tweet (n : Nat) :
    fire_and_fury (toString n) = "Fake tweet." := sorry

  theorem invalid_chars_fake_tweet {s : String} :
    (∀ c ∈ s.data, c ∉ ['F', 'I', 'R', 'U', 'Y']) →
    fire_and_fury s = "Fake tweet." := sorry

  theorem valid_tweet_result {s : String} :
    fire_and_fury s = "Fake tweet." ∨ 
    (fire_and_fury s).endsWith "furious." ∨
    (fire_and_fury s).endsWith "fired!" := sorry

  theorem fury_only_result {s : String} :
    (∀ c ∈ s.data, c ∈ ['F', 'U', 'R', 'Y']) →
    (containsSubstring s "FURY" → containsSubstring (fire_and_fury s) "furious" ∧ 
      ¬containsSubstring (fire_and_fury s) "fired") ∧
    (¬containsSubstring s "FURY" → fire_and_fury s = "Fake tweet.") := sorry

  theorem no_fire_fury_fake_tweet {s : String} :
    (¬containsSubstring s "FIRE" ∧ ¬containsSubstring s "FURY") →
    fire_and_fury s = "Fake tweet." := sorry

  theorem fire_fury_valid_result {s : String} :
    (containsSubstring s "FIRE" ∨ containsSubstring s "FURY") →
    ¬(fire_and_fury s = "Fake tweet.") ∧
    ((fire_and_fury s).endsWith "furious." ∨ (fire_and_fury s).endsWith "fired!") := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: 'I am furious. You and you are fired!'
  -/
  #guard_msgs in
  #eval fire_and_fury "FURYYYFIREYYFIRE"

  /-
  info: 'You are fired! I am really furious. You are fired!'
  -/
  #guard_msgs in
  #eval fire_and_fury "FIREYYFURYYFURYYFURRYFIRE"

  /-
  info: 'Fake tweet.'
  -/
  #guard_msgs in
  #eval fire_and_fury "FYRYFIRUFIRUFURE"

