vc-description: |-
  /-
  ```if:python
  Create a function `args_count`, that returns the count of passed arguments
  ```
  ```if:kotlin
  Create a function `argsCount`, that returns the count of passed arguments
  ```
  ```if:ruby
  Create a method `args_count`, that returns the count of passed arguments
  ```
  ```if:julia
  Create a method `argscount`, that returns the count of passed arguments
  ```
  ```python
  args_count(1, 2, 3) -> 3
  args_count(1, 2, 3, 10) -> 4
  ```
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def argsCount {α : Type} (args : List α) : Nat := sorry
  
  theorem argsCount_equals_list_length {α : Type} (args : List α) : 
    argsCount args = args.length := by sorry

vc-theorems: |-
  theorem argsCount_with_mixed_types {α β : Type} (args : List (Sum α β)) :
    argsCount args = args.length := by sorry
  
  theorem argsCount_with_kwargs (map : List (String × Nat)) :
    argsCount map = map.length := by sorry
  
  theorem argsCount_mixed_total {α : Type} (args : List α) (kwargs : List (String × α)) :
    argsCount args + argsCount kwargs = args.length + kwargs.length := by sorry
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval args_count 1
  
  /-
  info: 3
  -/
  -- #guard_msgs in
  -- #eval args_count 1 2 3
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval args_count 
  
  /-
  info: 4
  -/
  -- #guard_msgs in
  -- #eval args_count 1 2

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

