vc-description: |-
  /-
  =====Problem Statement=====
  You and Fredrick are good friends. Yesterday, Fredrick received
  
  credit cards from ABCD Bank. He wants to verify whether his credit card numbers are valid or not. You happen to be great at regex so he is asking for your help!
  
  A valid credit card from ABCD Bank has the following characteristics:
  
  ► It must start with a 4, 5 or 6.
  ► It must contain exactly 16 digits.
  ► It must only consist of digits (0-9).
  ► It may have digits in groups of 4, separated by one hyphen "-".
  ► It must NOT use any other separator like ' ' , '_', etc.
  ► It must NOT have 4 or more consecutive repeated digits.
  
  =====Example=====
  
  Valid Credit Card Numbers
  
  4253625879615786
  4424424424442444
  5122-2368-7954-3214
  
  Invalid Credit Card Numbers
  
  42536258796157867       #17 digits in card number → Invalid 
  4424444424442444        #Consecutive digits are repeating 4 or more times → Invalid
  5122-2368-7954 - 3214   #Separators other than '-' are used → Invalid
  44244x4424442444        #Contains non digit characters → Invalid
  0525362587961578        #Doesn't start with 4, 5 or 6 → Invalid
  
  =====Input Format=====
  The first line of input contains an integer N.
  The next N lines contain credit card numbers. 
  
  =====Constraints=====
  0<N<100
  
  =====Output Format=====
  Print 'Valid' if the credit card number is valid. Otherwise, print 'Invalid'. Do not print the quotes.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def Result := String
  def validate_credit_cards : List String → List Result := sorry

vc-theorems: |-
  theorem validate_returns_valid_or_invalid (cards : List String) 
    (h : cards.length > 0) : 
    let results := validate_credit_cards cards
    results.length = cards.length ∧ 
    ∀ r ∈ results, r = "Valid" ∨ r = "Invalid"
    := sorry
  
  theorem consecutive_digits_invalid (card : String)
    (h : card ∈ ["4444444444444444", "5444-4444-4444-4444", "6444444444444444"]) :
    validate_credit_cards [card] = ["Invalid"] := sorry
  
  theorem invalid_format_cards (card : String)
    (h : card ∈ ["1234567890123456", "7234567890123456", "4123-456-789-0123", "4123-4567-8901"]) :
    validate_credit_cards [card] = ["Invalid"] := sorry
  
  theorem valid_format_cards (card : String) 
    (h : card ∈ ["4123456789123456", "5123-4567-8912-3456"]) :
    validate_credit_cards [card] = ["Valid"] := sorry
  
  theorem empty_list :
    validate_credit_cards [] = [] := sorry
  
  theorem whitespace_handling :
    validate_credit_cards [" 4123456789123456 "] = ["Valid"] := sorry
  
  /-
  info: ['Valid', 'Valid', 'Invalid']
  -/
  -- #guard_msgs in
  -- #eval validate_credit_cards ["4123456789123456", "5123-4567-8912-3456", "61234-567-8912-3456"]
  
  /-
  info: ['Valid', 'Invalid', 'Invalid']
  -/
  -- #guard_msgs in
  -- #eval validate_credit_cards ["4123356789123456", "5133-3367-8912-3456", "5123 - 3567 - 8912 - 3456"]
  
  /-
  info: ['Valid', 'Valid', 'Invalid']
  -/
  -- #guard_msgs in
  -- #eval validate_credit_cards ["4424424424442444", "5122-2368-7954-3214", "0525362587961578"]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

