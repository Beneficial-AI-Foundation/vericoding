vc-description: |-
  /-
  On a N * N grid, we place some 1 * 1 * 1 cubes that are axis-aligned with the x, y, and z axes.
  Each value v = grid[i][j] represents a tower of v cubes placed on top of grid cell (i, j).
  Now we view the projection of these cubes onto the xy, yz, and zx planes.
  A projection is like a shadow, that maps our 3 dimensional figure to a 2 dimensional plane. 
  Here, we are viewing the "shadow" when looking at the cubes from the top, the front, and the side.
  Return the total area of all three projections.
  
  Example 1:
  Input: [[2]]
  Output: 5
  
  Example 2:
  Input: [[1,2],[3,4]]
  Output: 17
  Explanation: 
  Here are the three projections ("shadows") of the shape made with each axis-aligned plane.
  
  Example 3:
  Input: [[1,0],[0,2]]
  Output: 8
  
  Example 4:
  Input: [[1,1,1],[1,0,1],[1,1,1]]
  Output: 14
  
  Example 5:
  Input: [[2,2,2],[2,1,2],[2,2,2]]
  Output: 21
  
  Note:
  
  1 <= grid.length = grid[0].length <= 50
  0 <= grid[i][j] <= 50
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def projectionArea (grid : List (List Nat)) : Nat :=
  sorry

vc-theorems: |-
  theorem projection_area_nonnegative (grid : List (List Nat)) :
    projectionArea grid ≥ 0 := sorry
  
  theorem projection_area_sum_of_views {n : Nat} (grid : List (List Nat)) 
    (h1 : grid.length = n) 
    (h2 : ∀ row ∈ grid, row.length = n) :
    projectionArea grid = 
      -- Top view (number of non-zero cells)
      (List.foldl (λ acc row => 
        acc + (List.foldl (λ acc' x => acc' + if x > 0 then 1 else 0) 0 row)) 0 grid)
      + 
      -- Front view (max of each column)
      (List.range n).foldl (λ acc j =>
        acc + (List.foldl (λ acc' row => Nat.max acc' (row.get! j)) 0 grid)) 0
      +
      -- Side view (max of each row)
      (List.foldl (λ acc row => acc + (List.foldl Nat.max 0 row)) 0 grid) := sorry
  
  theorem projection_area_single_cube (h : Nat) :
    projectionArea [[h]] = 2 * h + 1 := sorry
  
  /-
  info: 5
  -/
  -- #guard_msgs in
  -- #eval projection_area [[2]]
  
  /-
  info: 17
  -/
  -- #guard_msgs in
  -- #eval projection_area [[1, 2], [3, 4]]
  
  /-
  info: 8
  -/
  -- #guard_msgs in
  -- #eval projection_area [[1, 0], [0, 2]]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

