vc-description: |-
  /-
  We define the sequence ```SF``` in the following way in terms of four previous sequences: ```S1```, ```S2```, ```S3``` and ```ST```

  We are interested in collecting the terms of SF that are multiple of ten.

  The first term multiple of ten of this sequence is  ```60```

  Make the function ```find_mult10_SF()``` that you introduce the ordinal number of a term multiple of 10 of SF and gives us the value of this term.

  Let's see some cases: 
  ```python
  find_mult10_SF(1) == 60

  find_mult10_SF(2) == 70080

  find_mult10_SF(3) ==  90700800
  ```
  ``` haskell
  findMult10SF 1 `shouldBe` 60
  findMult10SF 2 `shouldBe` 70080
  findMult10SF 3 `shouldBe` 90700800
  ```
  Memoization is advisable to have a more agile code for tests.

  Your code will be tested up to the 300-th term, multiple of 10.

  Happy coding!!
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def find_mult10_SF (n : Nat) : Nat := sorry 

  theorem find_mult10_SF_is_multiple_of_10 (n : Nat) 
    (h : 1 ≤ n ∧ n ≤ 10) : 
    find_mult10_SF n % 10 = 0 := sorry

vc-theorems: |-
  theorem find_mult10_SF_strictly_increasing (n : Nat)  
    (h : 1 < n ∧ n ≤ 10) :
    find_mult10_SF n > find_mult10_SF (n-1) := sorry

  theorem find_mult10_SF_positive (n : Nat)
    (h : 1 ≤ n ∧ n ≤ 10) :
    find_mult10_SF n > 0 := sorry

  theorem find_mult10_SF_first_value :
    find_mult10_SF 1 = 60 := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

  /--
  info: 60
  -/
  #guard_msgs in
  #eval find_mult10_SF 1

  /--
  info: 70080
  -/
  #guard_msgs in
  #eval find_mult10_SF 2

  /--
  info: 90700800
  -/
  #guard_msgs in
  #eval find_mult10_SF 3

