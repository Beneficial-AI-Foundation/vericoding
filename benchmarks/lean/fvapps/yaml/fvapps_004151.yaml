vc-description: |-
  /-
  ### Combine strings function
  ```if:coffeescript,haskell,javascript
  Create a function named `combineNames` that accepts two parameters (first and last name). The function should return the full name.
  ```
  ```if:python,ruby
  Create a function named (`combine_names`) that accepts two parameters (first and last name). The function should return the full name.
  ```
  ```if:csharp
  Create a function named (`Combine_names`) that accepts two parameters (first and last name). The function should return the full name.
  ```

  Example: 
  ```python
  combine_names('James', 'Stevens')
  ```
  returns:
  ```python
  'James Stevens'
  ```
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def combine_names (first last : String) : String := sorry

  theorem combine_names_type (first last : String) :
    first.length > 0 → last.length > 0 →
    combine_names first last = combine_names first last :=
  sorry

vc-theorems: |-
  theorem combine_names_starts_ends (first last : String) :
    first.length > 0 → last.length > 0 →
    String.startsWith (combine_names first last) first ∧
    String.endsWith (combine_names first last) last :=
  sorry

  theorem combine_names_space_count (first last : String) :
    first.length > 0 → last.length > 0 →
    String.length (String.replace (combine_names first last) " " "") + 1 = 
    String.length (combine_names first last) :=
  sorry

  theorem combine_names_length (first last : String) :
    first.length > 0 → last.length > 0 →
    String.length (combine_names first last) = String.length first + String.length last + 1 :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: 'James Stevens'
  -/
  #guard_msgs in
  #eval combine_names "James" "Stevens"

  /-
  info: 'Davy Back'
  -/
  #guard_msgs in
  #eval combine_names "Davy" "Back"

  /-
  info: 'Arthur Dent'
  -/
  #guard_msgs in
  #eval combine_names "Arthur" "Dent"

