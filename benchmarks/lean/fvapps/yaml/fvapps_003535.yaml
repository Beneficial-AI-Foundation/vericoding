vc-description: |-
  /-
  ## Task
   You are given an array of integers. On each move you are allowed to increase exactly one of its element by one. Find the minimal number of moves required to obtain a strictly increasing sequence from the input.

  ## Example

   For `arr = [1, 1, 1]`, the output should be `3`.

  ## Input/Output

   - `[input]` integer array `arr`

      Constraints:

      `3 ≤ inputArray.length ≤ 100,`

      `-10000 ≤ inputArray[i] ≤ 10000.`

   - `[output]` an integer

      The minimal number of moves needed to obtain a strictly increasing sequence from inputArray.

      It's guaranteed that for the given test cases the answer always fits signed 32-bit integer type.
  -/

vc-preamble: |-
  def array_change (arr : List Int) : Nat :=
    sorry

vc-helpers: |

vc-definitions: |-
  def sum (l : List Int) : Int :=
    sorry

vc-theorems: |-
  theorem array_change_returns_nonnegative (arr : List Int) (h : arr.length ≥ 1) :
    array_change arr ≥ 0 :=
    sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

  /-
  info: 3
  -/
  #guard_msgs in
  #eval array_change [1, 1, 1]

  /-
  info: 5
  -/
  #guard_msgs in
  #eval array_change [-1000, 0, -2, 0]

  /-
  info: 12
  -/
  #guard_msgs in
  #eval array_change [2, 1, 10, 1]

