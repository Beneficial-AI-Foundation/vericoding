vc-description: |-
  /-
  Chef has a sequence $A_1, A_2, \ldots, A_N$; each element of this sequence is either $0$ or $1$. Appy gave him a string $S$ with length $Q$ describing a sequence of queries. There are two types of queries:
  - '!': right-shift the sequence $A$, i.e. replace $A$ by another sequence $B_1, B_2, \ldots, B_N$ satisfying $B_{i+1} = A_i$ for each valid $i$ and $B_1 = A_N$
  - '?': find the length of the longest contiguous subsequence of $A$ with length $\le K$ such that each element of this subsequence is equal to $1$
  Answer all queries of the second type.
  
  -----Input-----
  - The first line of the input contains three space-separated integers $N$, $Q$ and $K$.
  - The second line contains $N$ space-separated integers $A_1, A_2, \ldots, A_N$.
  - The third line contains a string with length $Q$ describing queries. Each character of this string is either '?', denoting a query of the second type, or '!', denoting a query of the first type.
  
  -----Output-----
  For each query of the second type, print a single line containing one integer — the length of the longest required subsequence.
  
  -----Constraints-----
  - $1 \le K \le N \le 10^5$
  - $1 \le Q \le 3 \cdot 10^5$
  - $0 \le A_i \le 1$ for each valid $i$
  - $S$ contains only characters '?' and '!'
  
  -----Subtasks-----
  Subtask #1 (30 points):
  - $1 \le N \le 10^3$
  - $1 \le Q \le 3 \cdot 10^3$
  Subtask #2 (70 points): original constraints 
  
  -----Example Input-----
  5 5 3
  1 1 0 1 1
  ?!?!?    
  
  -----Example Output-----
  2
  3
  3
  
  -----Explanation-----
  - In the first query, there are two longest contiguous subsequences containing only $1$-s: $A_1, A_2$ and $A_4, A_5$. Each has length $2$.
  - After the second query, the sequence $A$ is $[1, 1, 1, 0, 1]$.
  - In the third query, the longest contiguous subsequence containing only $1$-s is $A_1, A_2, A_3$.
  - After the fourth query, $A = [1, 1, 1, 1, 0]$.
  - In the fifth query, the longest contiguous subsequence containing only $1$-s is $A_1, A_2, A_3, A_4$ with length $4$. However, we only want subsequences with lengths $\le K$. One of the longest such subsequences is $A_2, A_3, A_4$, with length $3$.
  -/

vc-preamble: |-
  def longest_contiguous_subsequence (N Q K : Nat) (A : List Nat) (S : String) : List Nat :=
  sorry

vc-helpers: |-

vc-definitions: |-
  def count_max_consecutive_ones (A : List Nat) : Nat :=
  sorry

vc-theorems: |-
  theorem result_length_matches_question_marks {N Q K : Nat} {A : List Nat} {S : String} 
    (h1 : N > 0) (h2 : Q > 0) (h3 : K > 0) 
    (h4 : ∀ x ∈ A, x ≤ 1) :
    (longest_contiguous_subsequence N Q K A S).length = 
      (S.data.filter (. = '?')).length := 
  sorry
  
  theorem results_bounded_by_k {N Q K : Nat} {A : List Nat} {S : String}
    (h1 : N > 0) (h2 : Q > 0) (h3 : K > 0)
    (h4 : ∀ x ∈ A, x ≤ 1) :
    ∀ x ∈ (longest_contiguous_subsequence N Q K A S), x ≤ K :=
  sorry
  
  theorem results_non_negative {N Q K : Nat} {A : List Nat} {S : String}
    (h1 : N > 0) (h2 : Q > 0) (h3 : K > 0)
    (h4 : ∀ x ∈ A, x ≤ 1) :
    ∀ x ∈ (longest_contiguous_subsequence N Q K A S), x ≥ 0 :=
  sorry
  
  theorem zero_array_gives_zero_result {N Q K : Nat} {A : List Nat} {S : String}
    (h1 : N > 0) (h2 : Q > 0) (h3 : K > 0)
    (h4 : ∀ x ∈ A, x = 0) :
    ∀ x ∈ (longest_contiguous_subsequence N Q K A S), x = 0 :=
  sorry
  
  theorem single_question_mark_result {N K : Nat} {A : List Nat}
    (h1 : N > 0) (h2 : K > 0)
    (h3 : ∀ x ∈ A, x ≤ 1)
    (h4 : (longest_contiguous_subsequence N 1 K A "?").length > 0) :
    (longest_contiguous_subsequence N 1 K A "?")[0]! = min (count_max_consecutive_ones A) K :=
  sorry
  
  /-
  info: [2, 3, 3]
  -/
  -- #guard_msgs in
  -- #eval longest_contiguous_subsequence 5 5 3 [1, 1, 0, 1, 1] "?!?!?"
  
  /-
  info: [1, 1, 1]
  -/
  -- #guard_msgs in
  -- #eval longest_contiguous_subsequence 3 3 2 [1, 0, 1] "???"
  
  /-
  info: [4, 4]
  -/
  -- #guard_msgs in
  -- #eval longest_contiguous_subsequence 4 2 4 [1, 1, 1, 1] "??"

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

