vc-description: |-
  /-
  Given an array A of 0s and 1s, we may change up to K values from 0 to 1.
  Return the length of the longest (contiguous) subarray that contains only 1s. 

  Example 1:
  Input: A = [1,1,1,0,0,0,1,1,1,1,0], K = 2
  Output: 6
  Explanation: 
  [1,1,1,0,0,1,1,1,1,1,1]
  Bolded numbers were flipped from 0 to 1.  The longest subarray is underlined.

  Example 2:
  Input: A = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], K = 3
  Output: 10
  Explanation: 
  [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
  Bolded numbers were flipped from 0 to 1.  The longest subarray is underlined.

  Note:

  1 <= A.length <= 20000
  0 <= K <= A.length
  A[i] is 0 or 1
  -/

vc-preamble: |-
  def longestOnes (A : List Nat) (K : Nat) : Nat := sorry

  def isConsecutiveOnes (A : List Nat) (n : Nat) : Prop := sorry

vc-helpers: |

vc-definitions: |-
  def maxConsecutiveOnes (A : List Nat) : Nat := sorry

  theorem longestOnes_upper_bound (A : List Nat) (K : Nat) : 
    longestOnes A K ≤ A.length := sorry

vc-theorems: |-
  theorem longestOnes_min_bound (A : List Nat) (K : Nat) (n : Nat) :
    isConsecutiveOnes A n → n ≤ longestOnes A K := sorry

  theorem longestOnes_zero_k (A : List Nat) :
    longestOnes A 0 = maxConsecutiveOnes A := sorry

  theorem longestOnes_large_k (A : List Nat) (K : Nat) :
    K ≥ A.length → longestOnes A K = A.length := sorry

  theorem longestOnes_single_zero (K : Nat) :
    longestOnes [0] K = min 1 K := sorry

  theorem longestOnes_single_one (K : Nat) :
    longestOnes [1] K = 1 := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

  /-
  info: 6
  -/
  #guard_msgs in
  #eval longestOnes [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0] 2

  /-
  info: 10
  -/
  #guard_msgs in
  #eval longestOnes [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1] 3

  /-
  info: 4
  -/
  #guard_msgs in
  #eval longestOnes [1, 1, 1, 1] 2

