vc-description: |-
  /-
  Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.  You may assume the given string consists of lowercase English letters only and its length  will not exceed 10000. 
  
  Example 1:
  
  Input: "abab"
  
  Output: True
  
  Explanation: It's the substring "ab" twice.
  
  Example 2:
  
  Input: "aba"
  
  Output: False
  
  Example 3:
  
  Input: "abcabcabcabc"
  
  Output: True
  
  Explanation: It's the substring "abc" four times. (And the substring "abcabc" twice.)
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def repeatedSubstringPattern (s: String) : Bool :=
  sorry
  
  def rotateString (s: String) : String :=
  sorry
  
  def isPrime (n: Nat) : Bool :=
  sorry
  
  def allCharsSame (s: String) : Bool :=
  sorry

vc-theorems: |-
  theorem repeatedSubstringPattern_single_char {s: String} :
    s.length = 1 → ¬repeatedSubstringPattern s :=
  sorry
  
  theorem repeatedSubstringPattern_rotation {s: String} (h: s.length ≥ 2) :
    repeatedSubstringPattern s →
    repeatedSubstringPattern (rotateString s) :=
  sorry
  
  theorem repeatedSubstringPattern_doubled {s: String} (h: s.length > 0) :
    repeatedSubstringPattern (s ++ s) :=
  sorry
  
  theorem repeatedSubstringPattern_n_times {s: String} (n: Nat)
      (h1: s.length > 0) (h2: n ≥ 3) (h3: n ≤ 10) :
    repeatedSubstringPattern (String.append s (String.append s s)) :=
  sorry
  
  theorem repeatedSubstringPattern_prime_length {s: String} (h1: s.length > 1) :
    isPrime s.length →
    ¬allCharsSame s →
    ¬repeatedSubstringPattern s :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval repeatedSubstringPattern "abab"
  
  /--
  info: False
  -/
  #guard_msgs in
  #eval repeatedSubstringPattern "aba"
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval repeatedSubstringPattern "abcabcabcabc"

