vc-description: |-
  /-
  Given an array of ones and zeroes, convert the equivalent binary value to an integer.

  Eg: `[0, 0, 0, 1]` is treated as `0001` which is the binary representation of `1`.

  Examples:
  ```
  Testing: [0, 0, 0, 1] ==> 1
  Testing: [0, 0, 1, 0] ==> 2
  Testing: [0, 1, 0, 1] ==> 5
  Testing: [1, 0, 0, 1] ==> 9
  Testing: [0, 0, 1, 0] ==> 2
  Testing: [0, 1, 1, 0] ==> 6
  Testing: [1, 1, 1, 1] ==> 15
  Testing: [1, 0, 1, 1] ==> 11
  ```

  However, the arrays can have varying lengths, not just limited to `4`.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def binary_array_to_number (arr : List Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem binary_array_to_number_zero :
    binary_array_to_number [0] = 0 :=
  sorry

  theorem binary_array_to_number_one :
    binary_array_to_number [1] = 1 :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

  /-
  info: 1
  -/
  #guard_msgs in
  #eval binary_array_to_number [0, 0, 0, 1]

  /-
  info: 6
  -/
  #guard_msgs in
  #eval binary_array_to_number [0, 1, 1, 0]

  /-
  info: 15
  -/
  #guard_msgs in
  #eval binary_array_to_number [1, 1, 1, 1]

