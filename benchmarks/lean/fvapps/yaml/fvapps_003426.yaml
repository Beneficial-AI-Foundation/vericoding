vc-description: |-
  /-
  A country has coins with denominations
  ```python
  coins_list = d1 < d2 < · · · < dn.
  ```
  You want to make change for n cents, using the smallest number of coins.
  
  ```python
  # Example 1: U.S. coins
  d1 = 1 d2 = 5 d3 = 10 d4 = 25
  
  ## Optimal change for 37 cents – 1 quarter, 1 dime, 2 pennies.
  
  # Example 2: Alien Planet Z coins
  Z_coin_a = 1 Z_coin_b = 3 Z_coin_c = 4
  
  ## Optimal change for 6 cents - 2 Z_coin_b's
  ```
  
  Write a function that will take a list of coin denominations and a desired amount and provide the least amount of coins needed.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def looseChange (coins: List Nat) (amount: Nat) : Int :=
    sorry
  
  def listMin (l: List Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem looseChange_result_bound (coins: List Nat) (amount: Nat) :
    coins.length > 0 → let result := looseChange coins amount
    result ≥ -1 := by
  sorry
  
  theorem looseChange_zero (coins: List Nat) :
    coins.length > 0 → looseChange coins 0 = 0 := by
  sorry
  
  theorem looseChange_small_amount (coins: List Nat) (amount: Nat) :
    coins.length > 0 →
    amount > 0 →
    amount < listMin coins →
    looseChange coins amount = -1 := by
  sorry
  
  theorem looseChange_bounded_by_amount (coins: List Nat) (amount: Nat) :
    coins.length > 0 →
    looseChange coins amount ≠ -1 →
    looseChange coins amount ≤ amount := by
  sorry
  
  theorem looseChange_optimal (coins: List Nat) (amount: Nat) :
    coins.length > 0 →
    let result := looseChange coins amount
    result ≠ -1 →
    ∀ (c : Nat),
    c ∈ coins →
    ¬∃ (n : Nat), n > result ∧ n * c = amount := by
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
  
  /--
  info: 4
  -/
  #guard_msgs in
  #eval loose_change [1, 5, 10, 25] 37
  
  /--
  info: 2
  -/
  #guard_msgs in
  #eval loose_change [1, 3, 4] 6
  
  /--
  info: 3
  -/
  #guard_msgs in
  #eval loose_change [25, 5, 10, 1, 21] 63

