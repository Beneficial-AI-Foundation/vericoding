vc-description: |-
  /-
  Given a string s of '(' , ')' and lowercase English characters. 
  Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.
  Formally, a parentheses string is valid if and only if:
  
  It is the empty string, contains only lowercase characters, or
  It can be written as AB (A concatenated with B), where A and B are valid strings, or
  It can be written as (A), where A is a valid string.
  
  Example 1:
  Input: s = "lee(t(c)o)de)"
  Output: "lee(t(c)o)de"
  Explanation: "lee(t(co)de)" , "lee(t(c)ode)" would also be accepted.
  
  Example 2:
  Input: s = "a)b(c)d"
  Output: "ab(c)d"
  
  Example 3:
  Input: s = "))(("
  Output: ""
  Explanation: An empty string is also valid.
  
  Example 4:
  Input: s = "(a(b(c)d)"
  Output: "a(b(c)d)"
  
  Constraints:
  
  1 <= s.length <= 10^5
  s[i] is one of  '(' , ')' and lowercase English letters.
  -/
  
  -- Result has balanced parentheses
  
  -- Result is a subsequence of input
  
  -- Strings without parens are unchanged
  
  -- Empty string case
  
  -- Only open brackets become empty
  
  -- Only close brackets become empty
  
  -- All chars in result are valid

vc-preamble: |-
  inductive CharIn (s : String) where
    | mk (c : Char) (h : s.data.contains c) : CharIn s

vc-helpers: |-

vc-definitions: |-
  def validParens (s : String) : Bool :=
  sorry
  
  def isSubsequence (s1 s2 : String) : Bool :=
  sorry
  
  def minRemoveToMakeValid (s : String) : String :=
  sorry

vc-theorems: |-
  theorem result_contains_valid_chars (s : String) :
    ∀ c, (minRemoveToMakeValid s).data.contains c →
      c = '(' ∨ c = ')' ∨ c = 'a' ∨ c = 'b' ∨ c = 'c' :=
  sorry
  
  theorem result_has_balanced_parens (s : String) :
    validParens (minRemoveToMakeValid s) :=
  sorry
  
  theorem result_is_subsequence (s : String) :
    isSubsequence (minRemoveToMakeValid s) s :=
  sorry
  
  theorem no_parens_unchanged (s : String) :
    (∀ c, s.data.contains c → c ≠ '(' ∧ c ≠ ')') →
    minRemoveToMakeValid s = s :=
  sorry
  
  theorem empty_string :
    minRemoveToMakeValid "" = "" :=
  sorry
  
  theorem only_open_brackets (n : Nat) :
    minRemoveToMakeValid (String.mk (List.replicate n '(')) = "" :=
  sorry
  
  theorem only_close_brackets (n : Nat) :
    minRemoveToMakeValid (String.mk (List.replicate n ')')) = "" :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
  
  /--
  info: 'lee(t(c)o)de'
  -/
  #guard_msgs in
  #eval minRemoveToMakeValid "lee(t(c)o)de)"
  
  /--
  info: 'ab(c)d'
  -/
  #guard_msgs in
  #eval minRemoveToMakeValid "a)b(c)d"
  
  /--
  info: ''
  -/
  #guard_msgs in
  #eval minRemoveToMakeValid "))(("

