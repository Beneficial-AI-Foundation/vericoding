vc-description: |-
  /-
  Write a function that solves an algebraic expression given as a string. 
  
  * The expression can include only sums and products. 
  
  * The numbers in the expression are in standard notation (NOT scientific).
  
  * In contrast, the function should return a string with the calculated value given in scientific notation with 5 decimal digits. 
  
  # Example:
  ```python
  strexpression = "5 * 4 + 6"
  sum_prod(strexpression) = "2.60000e+01"
  ```
  -/

vc-preamble: |-
  def isScientificNotation (s : String) : Bool := sorry
  
  def sumProd (s : String) : String := sorry

vc-helpers: |-

vc-definitions: |-
  def stringToFloat (s : String) : Float := sorry 
  
  theorem sumProd_format {nums : List Float} 
    (h1 : ∀ n ∈ nums, 0.1 ≤ n ∧ n ≤ 100) 
    (h2 : 2 ≤ nums.length ∧ nums.length ≤ 4) : 
    isScientificNotation (sumProd ("+".intercalate (nums.map toString))) := sorry

vc-theorems: |-
  theorem sumProd_multiply (x y : Nat)
    (h1 : 1 ≤ x ∧ x ≤ 100)
    (h2 : 1 ≤ y ∧ y ≤ 100) :
    (stringToFloat (sumProd (s!"{x}*{y}"))) = Float.ofNat (x * y) := sorry
  
  theorem sumProd_add (x y : Nat)
    (h1 : 1 ≤ x ∧ x ≤ 100)
    (h2 : 1 ≤ y ∧ y ≤ 100) :
    (stringToFloat (sumProd (s!"{x}+{y}"))) = Float.ofNat (x + y) := sorry
  
  /-
  info: '2.60000e+01'
  -/
  -- #guard_msgs in
  -- #eval sum_prod "5*4+6"
  
  /-
  info: '2.90000e+01'
  -/
  -- #guard_msgs in
  -- #eval sum_prod "5+4*6"
  
  /-
  info: '3.58000e+01'
  -/
  -- #guard_msgs in
  -- #eval sum_prod "5.4*4.0+6.2+8.0"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

