vc-description: |-
  /-
  The look and say sequence is a sequence in which each number is the result of a "look and say" operation on the previous element.

  Considering for example the classical version startin with `"1"`: `["1", "11", "21, "1211", "111221", ...]`. You can see that the second element describes the first as `"1(times number)1"`, the third is `"2(times number)1"` describing the second, the fourth is `"1(times number)2(and)1(times number)1"` and so on.

  Your goal is to create a function which takes a starting string (not necessarily the classical `"1"`, much less a single character start) and return the nth element of the series.

  ## Examples

  ```python
  look_and_say_sequence("1", 1)   == "1"
  look_and_say_sequence("1", 3)   == "21"
  look_and_say_sequence("1", 5)   == "111221"
  look_and_say_sequence("22", 10) == "22"
  look_and_say_sequence("14", 2)  == "1114"
  ```
  Trivia: `"22"` is the only element that can keep the series constant.
  -/

vc-preamble: |-
  def isDigit (c : Char) : Bool := sorry

  def isNonZeroDigit (c : Char) : Bool := sorry

vc-helpers: |

vc-definitions: |-
  def look_and_say_sequence (s : String) (n : Nat) : String := sorry

  theorem sequence_preserves_digits (s : String) (n : Nat) 
    (h : ∀ c ∈ s.data, isNonZeroDigit c) :
    ∀ c ∈ (look_and_say_sequence s n).data, isDigit c := sorry

vc-theorems: |-
  theorem sequence_length_monotonic (s : String) (n : Nat)
    (h : ∀ c ∈ s.data, isNonZeroDigit c) :
    (look_and_say_sequence s n).length ≤ (look_and_say_sequence s (n+1)).length := sorry  

  theorem first_element_unchanged (s : String)
    (h : ∀ c ∈ s.data, isNonZeroDigit c) :
    look_and_say_sequence s 1 = s := sorry

  theorem repeating_digits_pattern (s : String)
    (h : ∀ c ∈ s.data, isNonZeroDigit c) :
    let result := look_and_say_sequence s 2
    ∀ i < result.length / 2,
      ∃ (p1 p2 : String.Pos),
      isNonZeroDigit (result.get p1) ∧ 
      isDigit (result.get p2) := sorry

  theorem known_repeating_sequence :
    look_and_say_sequence "22" 9 = look_and_say_sequence "22" 10 := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: '1'
  -/
  #guard_msgs in
  #eval look_and_say_sequence "1" 1

  /-
  info: '21'
  -/
  #guard_msgs in
  #eval look_and_say_sequence "1" 3

  /-
  info: '111221'
  -/
  #guard_msgs in
  #eval look_and_say_sequence "1" 5

  /-
  info: '22'
  -/
  #guard_msgs in
  #eval look_and_say_sequence "22" 10

  /-
  info: '1114'
  -/
  #guard_msgs in
  #eval look_and_say_sequence "14" 2

