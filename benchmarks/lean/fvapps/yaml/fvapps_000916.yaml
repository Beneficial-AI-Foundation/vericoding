vc-description: |-
  /-
  Tejas has invited the Clash Team for a Dinner Party. He places V empty plates (numbered from 1 to V inclusive) in a straight line on a table. He has prepared 2 kinds of Delicious Dishes named dish A and dish B.

  He has exactly V servings of Dish A and W servings of dish B. 

  Now he wants to serve the dishes in such a way that if theith plate has serving of Dish A then (i-1)th plate should not have serving of Dish B. Assuming all the Dishes are identical find number of ways Tejas can serve the Clash Team.

  -----Input-----
  - The first line of the input contains an integer T denoting the number of test cases . The description of T testcases follow.

  - The first line of each test case contains two space seperated integers V W .

  -----Output-----
  For each test case, output the number of ways Tejas can serve the Clash Team.

  -----Constraints-----

  - 1 ≤ T ≤ 100
  - 1 ≤ V ≤ 1000
  - 1 ≤ W ≤ 1000

  -----Example-----
  Input:

  1

  3 3 

  Output:
  4

  -----Explanation-----

  In the above example the 4 ways are:

  AAA

  AAB

  ABB

  BBB
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def solve_dish_distribution (v w : Nat) : Nat := sorry

  theorem dish_distribution_lower_bound (v w : Nat) :
    solve_dish_distribution v w ≥ 1 := sorry

vc-theorems: |-
  theorem dish_distribution_upper_bound (v w : Nat) :
    solve_dish_distribution v w ≤ min v w + 1 := sorry

  theorem dish_distribution_equals_min_plus_one (v w : Nat) :
    solve_dish_distribution v w = min v w + 1 := sorry

  theorem dish_distribution_symmetry (v w : Nat) :
    solve_dish_distribution v w = solve_dish_distribution w v := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible

  /--
  info: 4
  -/
  #guard_msgs in
  #eval solve_dish_distribution 3 3

  /--
  info: 4
  -/
  #guard_msgs in
  #eval solve_dish_distribution 5 3

  /--
  info: 3
  -/
  #guard_msgs in
  #eval solve_dish_distribution 2 4

