vc-description: |-
  /-
  In input string ```word```(1 word):
  * replace the vowel with the nearest left consonant.
  * replace the consonant with the nearest right vowel.
  
  P.S. To complete this task imagine the alphabet is a circle (connect the first and last element of the array in the mind). For example, 'a' replace with 'z', 'y' with 'a', etc.(see below)
  
  For example:
  ```
  'codewars' => 'enedazuu'
  'cat' => 'ezu'
  'abcdtuvwxyz' => 'zeeeutaaaaa'
  ```
  
  It is preloaded: 
  
  ```
  const alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']
  const consonants = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z'];
  const vowels = ['a','e','i','o','u'];
  ```
  
  P.S. You work with lowercase letters only.
  -/

vc-preamble: |-
  def isVowel (c : Char) : Bool :=
    c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'
  
  def isLowerAscii (c : Char) : Bool :=
    97 ≤ c.toNat ∧ c.toNat ≤ 122

vc-helpers: |-

vc-definitions: |-
  def transform_word (s : String) : String := sorry

vc-theorems: |-
  theorem transform_word_preserves_length (s : String) :
    s.length = (transform_word s).length :=
  sorry
  
  theorem transform_word_chars_are_ascii_lower (s : String) :
    ∀ c ∈ (transform_word s).data, isLowerAscii c :=
  sorry
  
  theorem transform_word_vowel_consonant_mapping (s : String) :
    ∀ i, i < s.length →
      let pos : String.Pos := ⟨i⟩
      (isVowel (s.get pos) → ¬isVowel ((transform_word s).get pos)) ∧
      (¬isVowel (s.get pos) → isVowel ((transform_word s).get pos)) :=
  sorry
  
  theorem transform_word_deterministic (s : String) :
    transform_word s = transform_word s :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
  
  /--
  info: 'ezu'
  -/
  #guard_msgs in
  #eval transform_word "cat"
  
  /--
  info: 'enedazuu'
  -/
  #guard_msgs in
  #eval transform_word "codewars"
  
  /--
  info: 'zeeeutaaaaa'
  -/
  #guard_msgs in
  #eval transform_word "abcdtuvwxyz"

