vc-description: |-
  /-
  ```if-not:sql
  Implement a function that receives two IPv4 addresses, and returns the number of addresses between them (including the first one, excluding the last one).
  ```

  ```if:sql
  Given a database of first and last IPv4 addresses, calculate the number of addresses between them (including the first one, excluding the last one).

  ## Input

  ~~~
  ---------------------------------
  |     Table    | Column | Type  |
  |--------------+--------+-------|
  | ip_addresses | id     | int   |
  |              | first  | text  |
  |              | last   | text  |
  ---------------------------------
  ~~~

  ## Output

  ~~~
  ----------------------
  |   Column    | Type |
  |-------------+------|
  | id          | int  |
  | ips_between | int  |
  ----------------------
  ~~~
  ```

  All inputs will be valid IPv4 addresses in the form of strings. The last address will always be greater than the first one.

  ___

  ## Examples

  ```python
  ips_between("10.0.0.0", "10.0.0.50")  ==   50 
  ips_between("10.0.0.0", "10.0.1.0")   ==  256 
  ips_between("20.0.0.10", "20.0.1.0")  ==  246
  ```
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def ipsBetween (start_ip end_ip : String) : Int := sorry

  theorem ipsBetween_range (start_ip end_ip : String) :
    let result := ipsBetween start_ip end_ip
    result ≥ 0 ∧ result < 2^32 := by sorry

vc-theorems: |-
  theorem ipsBetween_self (ip : String) :
    ipsBetween ip ip = 0 := by sorry

  theorem ipsBetween_symmetry 
    (ip1 ip2 : String)
    (h : ipsBetween ip1 ip2 > 0) : 
    ipsBetween ip2 ip1 = -(ipsBetween ip1 ip2) := by sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

  /--
  info: 50
  -/
  #guard_msgs in
  #eval ips_between "10.0.0.0" "10.0.0.50"

  /--
  info: 246
  -/
  #guard_msgs in
  #eval ips_between "20.0.0.10" "20.0.1.0"

  /--
  info: 256
  -/
  #guard_msgs in
  #eval ips_between "160.0.0.0" "160.0.1.0"

