vc-description: |-
  /-
  Write function isPalindrome that checks if a given string (case insensitive) is a palindrome.

  ```racket
  In Racket, the function is called palindrome?

  (palindrome? "nope") ; returns #f
  (palindrome? "Yay")  ; returns #t
  ```
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def is_palindrome (s : String) : Bool := sorry

  def String.reverse (s : String) : String := sorry

vc-theorems: |-
  theorem empty_single_char_palindrome (s : String) :
    s.length ≤ 1 → is_palindrome s := sorry 

  theorem case_insensitive (s : String) :
    is_palindrome s = is_palindrome (s.toLower) ∧ 
    is_palindrome s = is_palindrome s.toUpper := sorry

  theorem palindrome_reverse_property (s : String) :
    is_palindrome s = (s.toLower = (s.toLower).reverse) := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: False
  -/
  #guard_msgs in
  #eval is_palindrome "nope"

  /-
  info: True
  -/
  #guard_msgs in
  #eval is_palindrome "Yay"

  /-
  info: True
  -/
  #guard_msgs in
  #eval is_palindrome "racecar"

