vc-description: |-
  /-
  You're a buyer/seller and your buisness is at stake... You ___need___ to make profit... Or at least, you need to lose the least amount of money!  
  Knowing a list of prices for buy/sell operations, you need to pick two of them. Buy/sell market is evolving across time and the list represent this evolution. First, you need to buy one item, then sell it later. Find the best profit you can do.
  
  ### Example:
  
  Given an array of prices `[3, 10, 8, 4]`, the best profit you could make would be `7` because you buy at `3` first, then sell at `10`.
  
  # Input:
  
  A list of prices (integers), of length 2 or more.
  
  # Output:
  
  The result of the best buy/sell operation, as an integer.
  
  ### Note:
  Be aware you'll face lists with several thousands of elements, so think about performance.
  -/

vc-preamble: |-
  def max_profit (prices : List Nat) : Int := sorry
  
  def maximum (l : List Nat) : Nat := sorry

vc-helpers: |-

vc-definitions: |-
  def minimum (l : List Nat) : Nat := sorry
  
  theorem max_profit_bounds {prices : List Nat} (h : prices.length ≥ 2) : 
    max_profit prices ≤ (maximum prices) - (minimum prices) := sorry

vc-theorems: |-
  theorem ascending_max_profit {prices : List Nat} (h : prices.length ≥ 2) 
    (ascending : ∀ (i : Nat), i + 1 < prices.length → prices[i]! ≤ prices[i + 1]!) :
    max_profit prices = prices.getLast! - prices.head! := sorry
  
  /-
  info: 6
  -/
  -- #guard_msgs in
  -- #eval max_profit [10, 7, 5, 8, 11, 9]
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval max_profit [3, 4]
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval max_profit [9, 9]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

