vc-description: |-
  /-
  While most devs know about [big/little-endianness](https://en.wikipedia.org/wiki/Endianness), only a selected few know the secret of real hard core coolness with mid-endians.
  
  Your task is to take a number and return it in its mid-endian format, putting the most significant couple of bytes in the middle and all the others around it, alternating left and right.
  
  For example, consider the number `9999999`, whose hexadecimal representation would be `98967F` in big endian (the classic you get converting); it becomes `7F9698` in little-endian and `96987F` in mid-endian.
  
  Write a function to do that given a positive integer (in base 10) and remembering that you need to pad with `0`s when you get a single hex digit!
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def mid_endian (n : Nat) : String :=
  sorry
  
  def natToHexString (n : Nat) : String :=
  sorry
  
  def splitInPairs (s : String) : List String :=
  sorry

vc-theorems: |-
  theorem mid_endian_idempotent_bytes (n : Nat) :
    let result := mid_endian n
    let pairs := splitInPairs result
    String.join pairs = result :=
  sorry
  
  theorem mid_endian_valid_hex (n : Nat) :
    ∃ h, (mid_endian n).toNat? = some h :=
  sorry
  
  theorem mid_endian_even_length (n : Nat) :
    (mid_endian n).length % 2 = 0 :=
  sorry
  
  theorem mid_endian_sufficient_length (n : Nat) :
    (mid_endian n).length ≥ (natToHexString n).length :=
  sorry
  
  theorem mid_endian_hex_chars (n : Nat) :
    ∀ i : Fin (mid_endian n).length,
      (mid_endian n).data.get i ∈ ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'] :=
  sorry
  
  theorem mid_endian_single_byte (n : Nat) (h : n ≤ 0xFF) :
    mid_endian n = natToHexString n :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
  
  /--
  info: '96987F'
  -/
  #guard_msgs in
  #eval mid_endian 9999999
  
  /--
  info: '00'
  -/
  #guard_msgs in
  #eval mid_endian 0
  
  /--
  info: '0B0A0C'
  -/
  #guard_msgs in
  #eval mid_endian 658188

