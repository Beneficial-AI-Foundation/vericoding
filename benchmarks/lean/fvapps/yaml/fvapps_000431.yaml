vc-description: |-
  /-
  Given a positive integer N, how many ways can we write it as a sum of consecutive positive integers?
  Example 1:
  Input: 5
  Output: 2
  Explanation: 5 = 5 = 2 + 3
  Example 2:
  Input: 9
  Output: 3
  Explanation: 9 = 9 = 4 + 5 = 2 + 3 + 4
  Example 3:
  Input: 15
  Output: 4
  Explanation: 15 = 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5
  Note: 1 <= N <= 10 ^ 9.
  -/

vc-preamble: |-
  def consecutive_numbers_sum (n : Nat) : Nat :=
    sorry

  def isPrime (n : Nat) : Bool :=
    sorry

vc-helpers: |

vc-definitions: |-
  def isSquare (n : Nat) : Bool :=
    sorry

vc-theorems: |-
  theorem result_always_positive (n : Nat) (h : n > 0) : 
    consecutive_numbers_sum n ≥ 1 :=
    sorry

  theorem result_less_than_input (n : Nat) (h : n > 0) :
    consecutive_numbers_sum n ≤ n :=
    sorry

  theorem known_edge_cases :
    consecutive_numbers_sum 1 = 1 ∧ 
    consecutive_numbers_sum 2 = 1 ∧
    consecutive_numbers_sum 3 = 2 ∧
    consecutive_numbers_sum 4 = 1 :=
    sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible

  /-
  info: 2
  -/
  #guard_msgs in
  #eval consecutive_numbers_sum 5

  /-
  info: 3
  -/
  #guard_msgs in
  #eval consecutive_numbers_sum 9

  /-
  info: 4
  -/
  #guard_msgs in
  #eval consecutive_numbers_sum 15

