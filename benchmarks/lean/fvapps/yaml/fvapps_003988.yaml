vc-description: |-
  /-
  Write a function that takes a positive integer n, sums all the cubed values from 1 to n, and returns that sum.

  Assume that the input n will always be a positive integer.

  Examples:

  ```python
  sum_cubes(2)
  > 9 
  # sum of the cubes of 1 and 2 is 1 + 8
  ```
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def sum_cubes (n : Nat) : Nat := sorry

  theorem sum_cubes_positive (n : Nat) (h : n > 0) : 
    sum_cubes n > 0 :=
  sorry

vc-theorems: |-
  theorem sum_cubes_greater_eq_n (n : Nat) (h : n > 0) :
    sum_cubes n â‰¥ n :=
  sorry

  theorem sum_cubes_strictly_increasing (n : Nat) (h : n > 0) :
    sum_cubes (n + 1) > sum_cubes n :=
  sorry

  theorem sum_cubes_base_case_one :
    sum_cubes 1 = 1 :=
  sorry

  theorem sum_cubes_base_case_two :
    sum_cubes 2 = 9 :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

  /-
  info: 1
  -/
  #guard_msgs in
  #eval sum_cubes 1

  /-
  info: 9
  -/
  #guard_msgs in
  #eval sum_cubes 2

  /-
  info: 36
  -/
  #guard_msgs in
  #eval sum_cubes 3

