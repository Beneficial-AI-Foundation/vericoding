vc-description: |-
  /-
  If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

  Finish the solution so that it returns the sum of all the multiples of 3 or 5 **below** the number passed in. 

  > Note: If the number is a multiple of **both** 3 and 5, only count it *once*.
  > Also, if a number is negative, return 0(for languages that do have them)

  ###### *Courtesy of projecteuler.net*
  -/

vc-preamble: |-
  def solution (n : Int) : Int := sorry

  theorem solution_nonnegative (n : Int) : 
    solution n ≥ 0 ∧ (n ≤ 0 → solution n = 0) := sorry

vc-helpers: |

vc-definitions: |-
  def sumMultiples (n : Nat) : Int :=
    (List.range n).map Int.ofNat
    |>.filter (fun x => x % 3 = 0 ∨ x % 5 = 0)
    |>.foldl (· + ·) 0

vc-theorems: |-
  theorem multiples_property {n : Nat} : 
    0 < n →
    solution (Int.ofNat n) = sumMultiples n := sorry

  theorem result_smaller_than_input_squared {n : Int} :
    n > 0 → solution n < n * n := sorry

  theorem negative_inputs :
    ∀ n : Int, n < 0 → solution n = 0 := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

  /-
  info: 23
  -/
  #guard_msgs in
  #eval solution 10

  /-
  info: 78
  -/
  #guard_msgs in
  #eval solution 20

  /-
  info: 0
  -/
  #guard_msgs in
  #eval solution 0

