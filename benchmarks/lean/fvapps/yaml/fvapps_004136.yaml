vc-description: |-
  /-
  Take a sentence (string) and reverse each word in the sentence. Do not reverse the order of the words, just the letters in each word.

  If there is punctuation, it should be interpreted as a regular character; no special rules.

  If there is spacing before/after the input string, leave them there.

  String will not be empty.

  ## Examples

  ```
  "Hi mom" => "iH mom"
  " A fun little challenge! " => " A nuf elttil !egnellahc "
  ```
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def reverseWords (s : String) : String := sorry

  theorem reverseWords_preserves_length (s : String) :
    (reverseWords s).length = s.length := 
  sorry

vc-theorems: |-
  theorem reverseWords_preserves_spaces (s : String) (p : String.Pos) : 
    (s.get p = ' ') ↔ ((reverseWords s).get p = ' ') :=
  sorry 

  theorem reverseWords_involution (s : String) :
    reverseWords (reverseWords s) = s :=
  sorry

  theorem reverseWords_reverses_words_individually (s : String) :
    let orig_words := s.split (· = ' ')
    let result_words := (reverseWords s).split (· = ' ')
    orig_words.length = result_words.length ∧ 
    ∀ (i : Fin orig_words.length), 
      orig_words[i]! = String.mk (List.reverse (result_words[i]!).data) :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /--
  info: 'iH mom'
  -/
  #guard_msgs in
  #eval reverse_words "Hi mom"

  /--
  info: ' A nuf elttil !egnellahc '
  -/
  #guard_msgs in
  #eval reverse_words " A fun little challenge! "

  /--
  info: 'woH won nworb woc'
  -/
  #guard_msgs in
  #eval reverse_words "How now brown cow"

