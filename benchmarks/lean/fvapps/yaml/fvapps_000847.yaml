vc-description: |-
  /-
  You are given a grid with $R$ rows (numbered $1$ through $R$) and $C$ columns (numbered $1$ through $C$). Initially, each cell of this grid is either empty, contains an ant or an anteater. Each ant is moving in a fixed direction: up, down, left or right. The anteaters do not move.
  The movement of ants happens in discrete steps. For example, when an ant is in the cell in the $i$-th row and $j$-th column at some point in time (in some step) and it is moving down, then in the next step, it enters the cell in the $(i+1)$-th row and $j$-th column. Two ants meet each other when they enter the same cell at the same point in time (in the same step). When ants meet, they do not interact in any way and keep moving in their fixed directions.
  If an ant reaches an anteater, that anteater eats the ant, so the ant completely disappears. If an ant attempts to leave the grid, it also disappears. When two ants enter a cell containing an anteater at the same time, they are eaten before they could meet.
  Calculate the total number of pairs of ants that meet each other.

  -----Input-----
  - The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.
  - The first line of each test case contains two space-separated integers $R$ and $C$.
  - Each of the following $R$ lines contains a single string with length $C$. For each valid $i, j$, the $j$-th character in the $i$-th string is:
  - '#' if the cell in the $i$-th row and $j$-th column of the grid contains an anteater
  - 'U', 'D', 'L' or 'R' if this cell contains an ant moving up, down, left or right respectively
  - '-' if this cell is empty

  -----Output-----
  For each test case, print a single line containing one integer — the number of pairs of ants that meet.

  -----Constraints-----
  - $1 \le T \le 10$
  - $1 \le R, C \le 50$
  - each string contains only characters 'U', 'D', 'L', 'R', '#' and '-'

  -----Example Input-----
  10
  3 3
  R--
  ---
  --U
  1 4
  R--R
  2 2
  --
  --
  1 4
  R--L
  1 4
  -R-L
  1 4
  -R#L
  3 3
  R-D
  -#-
  R-U
  3 3
  R-D
  ---
  R#U
  3 3
  -D-
  R-L
  -U-
  1 7
  RLLLLLL

  -----Example Output-----
  1
  0
  0
  0
  1
  0
  3
  2
  6
  3
  -/

vc-preamble: |-
  def solve_ant_grid (R C : Nat) (grid : List String) : Nat :=
    sorry

  def is_direction (c : Char) : Bool :=
    c = 'U' || c = 'D' || c = 'L' || c = 'R'

  def make_empty_string (n : Nat) (c : Char) : String :=
    sorry

vc-helpers: |

vc-definitions: |-
  def count_directions (grid : List String) : Nat :=
    sorry

vc-theorems: |-
  theorem solve_ant_grid_output_props (R C : Nat) (grid : List String)
    (h : R > 0 ∧ C > 0) :
    let result := solve_ant_grid R C grid;
    result ≥ 0 :=
  sorry

  theorem empty_grid_zero_pairs (R C : Nat) (grid : List String)
    (h1 : R > 0 ∧ C > 0)
    (h2 : ∀ (row : String), row ∈ grid → ∀ (c : Char), c ∈ row.data → (c = '-' ∨ c = '#')) :
    solve_ant_grid R C grid = 0 :=
  sorry

  theorem single_ant_zero_pairs (R C : Nat) (grid : List String)
    (h1 : R > 0 ∧ C > 0)
    (h2 : count_directions grid ≤ 1) :
    solve_ant_grid R C grid = 0 :=
  sorry

  theorem all_empty_grid_zero (R C : Nat) (h : R > 0 ∧ C > 0) :
    let empty_row := make_empty_string C '-';
    let grid := List.replicate R empty_row;
    solve_ant_grid R C grid = 0 :=
  sorry

  theorem all_walls_grid_zero (R C : Nat) (h : R > 0 ∧ C > 0) :
    let wall_row := make_empty_string C '#';
    let grid := List.replicate R wall_row;
    solve_ant_grid R C grid = 0 :=
  sorry

  theorem single_ant_top_left_zero (R C : Nat) (ant : Char)
    (h1 : R > 0 ∧ C > 0)
    (h2 : is_direction ant) :
    let first_row := (String.push (make_empty_string (C-1) '-') ant);
    let empty_row := make_empty_string C '-';
    let rest_rows := List.replicate (R-1) empty_row;
    let grid := first_row :: rest_rows;
    solve_ant_grid R C grid = 0 :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

  /-
  info: 1
  -/
  #guard_msgs in
  #eval solve_ant_grid 3 3 ["R--", "---", "--U"]

  /-
  info: 1
  -/
  #guard_msgs in
  #eval solve_ant_grid 1 4 ["-R-L"]

  /-
  info: 6
  -/
  #guard_msgs in
  #eval solve_ant_grid 3 3 ["-D-", "R-L", "-U-"]

