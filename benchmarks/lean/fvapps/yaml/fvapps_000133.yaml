vc-description: |-
  /-
  Given two sequences pushed and popped with distinct values, return true if and only if this could have been the result of a sequence of push and pop operations on an initially empty stack.

  Example 1:
  Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
  Output: true
  Explanation: We might do the following sequence:
  push(1), push(2), push(3), push(4), pop() -> 4,
  push(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1

  Example 2:
  Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]
  Output: false
  Explanation: 1 cannot be popped before 2.

  Constraints:

  0 <= pushed.length == popped.length <= 1000
  0 <= pushed[i], popped[i] < 1000
  pushed is a permutation of popped.
  pushed and popped have distinct values.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def List.toMultiset : List α → List α := id

  def validate_stack_sequences (pushed : List Int) (popped : List Int) : Bool :=
    sorry

vc-theorems: |-
  theorem identical_sequences_valid {nums : List Int} (h : nums.length > 0) :
    validate_stack_sequences nums nums = true :=
  sorry

  theorem reverse_sequences_valid {nums : List Int} (h : nums.length > 0) :
    validate_stack_sequences nums nums.reverse = true :=
  sorry

  theorem permutations_have_consistent_length {nums popped : List Int} (h : nums.length > 0) :
    validate_stack_sequences nums popped = (nums.length = popped.length) :=
  sorry

  theorem shuffled_sequence_properties {nums popped : List Int} (h : nums.length > 0) :
    validate_stack_sequences nums popped = true →
    nums.toMultiset = popped.toMultiset :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

  /--
  info: True
  -/
  #guard_msgs in
  #eval validate_stack_sequences [1, 2, 3, 4, 5] [4, 5, 3, 2, 1]

  /--
  info: False
  -/
  #guard_msgs in
  #eval validate_stack_sequences [1, 2, 3, 4, 5] [4, 3, 5, 1, 2]

  /--
  info: True
  -/
  #guard_msgs in
  #eval validate_stack_sequences [1, 2, 3] [1, 2, 3]

