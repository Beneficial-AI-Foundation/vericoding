vc-description: |-
  /-
  It started as a discussion with a friend, who didn't fully grasp some way of setting defaults, but I thought the idea was cool enough for a beginner kata: binary `OR` each matching element of two given arrays (or lists, if you do it in Python; vectors in c++) of integers and give the resulting ORed array [starts to sound like a tonguetwister, doesn't it?].
  
  If one array is shorter than the other, use the optional third parametero (defaulted to `0`) to `OR` the unmatched elements.
  
  For example:
  
  ```python
  or_arrays([1,2,3],[1,2,3]) == [1,2,3]
  or_arrays([1,2,3],[4,5,6]) == [5,7,7]
  or_arrays([1,2,3],[1,2]) == [1,2,3]
  or_arrays([1,2],[1,2,3]) == [1,2,3]
  or_arrays([1,2,3],[1,2,3],3) == [1,2,3]
  ```
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def orArrays (arr1 : List Nat) (arr2 : List Nat) (default : Nat := 0) : List Nat := sorry
  
  theorem or_arrays_length (arr1 arr2 : List Nat) (default : Nat) :
    (orArrays arr1 arr2 default).length = max arr1.length arr2.length := sorry

vc-theorems: |-
  theorem or_arrays_elemwise (arr1 arr2 : List Nat) (default : Nat) (i : Nat) (h : i < (orArrays arr1 arr2 default).length) :
    (orArrays arr1 arr2 default)[i]'h = 
      (if h1 : i < arr1.length then arr1[i]'h1 else default) ||| 
      (if h2 : i < arr2.length then arr2[i]'h2 else default) := sorry
  
  theorem or_arrays_identity_right (arr : List Nat) : 
    orArrays arr (List.replicate arr.length 0) 0 = arr := sorry
  
  theorem or_arrays_identity_left (arr : List Nat) :
    orArrays (List.replicate arr.length 0) arr 0 = arr := sorry
  
  theorem or_arrays_commutative (arr1 arr2 : List Nat) (default : Nat) :
    orArrays arr1 arr2 default = orArrays arr2 arr1 default := sorry
  
  theorem or_arrays_empty :
    orArrays [] [] 0 = [] := sorry
  
  theorem or_arrays_empty_right (arr : List Nat) :
    orArrays arr [] 0 = arr := sorry
  
  theorem or_arrays_empty_left (arr : List Nat) :
    orArrays [] arr 0 = arr := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

