vc-description: |-
  /-
  You will be given a vector of strings. You must sort it alphabetically (case-sensitive, and based on the ASCII values of the chars) and then return the first value.
  
  The returned value must be a string, and have `"***"` between each of its letters.
  
  You should not remove or add elements from/to the array.
  -/

vc-preamble: |-
  def two_sort (strings : List String) : String := sorry
  
  def countSubstring (haystack : String) (needle : String) : Nat := sorry

vc-helpers: |-

vc-definitions: |-
  def minimum (xs : List String) : String := sorry 
  
  def splitString (s : String) (sep : String) : List String := sorry

vc-theorems: |-
  theorem two_sort_separator_count (strings : List String) 
    (h : strings.length > 0) : 
    (countSubstring (two_sort strings) "***") = (minimum strings).length - 1 := 
    sorry
  
  theorem two_sort_recovers_min (strings : List String)
    (h : strings.length > 0) :
    let result := two_sort strings
    let parts := splitString result "***"
    (String.join parts) = minimum strings :=
    sorry
  
  /-
  info: 'b***i***t***c***o***i***n'
  -/
  -- #guard_msgs in
  -- #eval two_sort ["bitcoin", "take", "over", "the", "world", "maybe", "who", "knows", "perhaps"]
  
  /-
  info: 'a***r***e'
  -/
  -- #guard_msgs in
  -- #eval two_sort ["turns", "out", "random", "test", "cases", "are", "easier", "than", "writing", "out", "basic", "ones"]
  
  /-
  info: 'L***e***t***s'
  -/
  -- #guard_msgs in
  -- #eval two_sort ["Lets", "all", "go", "on", "holiday", "somewhere", "very", "cold"]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

