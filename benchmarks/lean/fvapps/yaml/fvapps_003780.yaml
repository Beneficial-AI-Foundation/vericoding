vc-description: |-
  /-
  You are going to be given an array of integers. Your job is to take that array and find an index N where the sum of the integers to the left of N is equal to the sum of the integers to the right of N. If there is no index that would make this happen, return `-1`.

  __For example:__

  Let's say you are given the array `{1,2,3,4,3,2,1}`:  
  Your function will return the index `3`, because at the 3rd position of the array, the sum of left side of the index (`{1,2,3}`) and the sum of the right side of the index (`{3,2,1}`) both equal `6`.

  Let's look at another one.  
  You are given the array `{1,100,50,-51,1,1}`:  
  Your function will return the index `1`, because at the 1st position of the array, the sum of left side of the index (`{1}`) and the sum of the right side of the index (`{50,-51,1,1}`) both equal `1`.

  Last one:  
  You are given the array `{20,10,-80,10,10,15,35}`  
  At index 0 the left side is `{}`  
  The right side is `{10,-80,10,10,15,35}`  
  They both are equal to `0` when added. (Empty arrays are equal to 0 in this problem)  
  Index 0 is the place where the left side and right side are equal.  

  Note: Please remember that in most programming/scripting languages the index of an array starts at 0.

  __Input:__  
  An integer array of length `0 < arr < 1000`. The numbers in the array can be any integer positive or negative.

  __Output:__  
  The lowest index `N` where the side to the left of `N` is equal to the side to the right of `N`. If you do not find an index that fits these rules, then you will return `-1`.

  __Note:__  
  If you are given an array with multiple answers, return the lowest correct index.
  -/

vc-preamble: |-
  def find_even_index (arr : List Int) : Nat :=
    sorry

vc-helpers: |

vc-definitions: |-
  def sum_list (arr : List Int) : Int :=
    sorry

vc-theorems: |-
  theorem find_even_index_centered {n : Nat} :
    let arr := List.replicate n 1 ++ [0] ++ List.replicate n 1
    find_even_index arr = n
    := sorry

  theorem find_even_index_single_element :
    find_even_index [0] = 0 := sorry

  theorem find_even_index_single_nonzero :
    find_even_index [1] = 0 := sorry

  theorem find_even_index_all_zeros :
    find_even_index [0, 0, 0] = 0 := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

  /-
  info: 3
  -/
  #guard_msgs in
  #eval find_even_index [1, 2, 3, 4, 3, 2, 1]

  /-
  info: 1
  -/
  #guard_msgs in
  #eval find_even_index [1, 100, 50, -51, 1, 1]

  /-
  info: 0
  -/
  #guard_msgs in
  #eval find_even_index [20, 10, -80, 10, 10, 15, 35]

