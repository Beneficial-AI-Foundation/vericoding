vc-description: |-
  /-
  Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom 
  note can be constructed from the magazines ; otherwise, it will return false. 

  Each letter in the magazine string can only be used once in your ransom note.

  Note:
  You may assume that both strings contain only lowercase letters.

  canConstruct("a", "b") -> false
  canConstruct("aa", "ab") -> false
  canConstruct("aa", "aab") -> true
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def can_construct (ransomNote magazine : String) : Bool :=
    sorry

vc-theorems: |-
  theorem can_construct_empty_note (magazine : String) :
    can_construct "" magazine = true := sorry

  theorem can_construct_empty_magazine_only_empty_note :
    (can_construct "" "" = true) ∧ (can_construct "a" "" = false) := sorry

  theorem can_construct_length_property (note magazine : String) :
    note.length > magazine.length → can_construct note magazine = false := sorry

  theorem can_construct_same_string (s : String) :
    can_construct s s = true := sorry

  theorem can_construct_count_preservation (note magazine : String) (c : Char) :
    can_construct note magazine = true →
    note.data.foldl (λ acc x => if x = c then acc + 1 else acc) 0 ≤ 
    magazine.data.foldl (λ acc x => if x = c then acc + 1 else acc) 0 := sorry

  theorem can_construct_magazine_extension (note magazine extension : String) :
    can_construct note magazine = true →
    can_construct note (magazine ++ extension) = true := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: False
  -/
  #guard_msgs in
  #eval can_construct "a" "b"

  /-
  info: False
  -/
  #guard_msgs in
  #eval can_construct "aa" "ab"

  /-
  info: True
  -/
  #guard_msgs in
  #eval can_construct "aa" "aab"

