vc-description: |-
  /-
  Given an array of integers cost and an integer target. Return the maximum integer you can paint under the following rules:

  The cost of painting a digit (i+1) is given by cost[i] (0 indexed).
  The total cost used must be equal to target.
  Integer does not have digits 0.

  Since the answer may be too large, return it as string.
  If there is no way to paint any integer given the condition, return "0".

  Example 1:
  Input: cost = [4,3,2,5,6,7,2,5,5], target = 9
  Output: "7772"
  Explanation:  The cost to paint the digit '7' is 2, and the digit '2' is 3. Then cost("7772") = 2*3+ 3*1 = 9. You could also paint "977", but "7772" is the largest number.
  Digit    cost
    1  ->   4
    2  ->   3
    3  ->   2
    4  ->   5
    5  ->   6
    6  ->   7
    7  ->   2
    8  ->   5
    9  ->   5

  Example 2:
  Input: cost = [7,6,5,5,5,6,8,7,8], target = 12
  Output: "85"
  Explanation: The cost to paint the digit '8' is 7, and the digit '5' is 5. Then cost("85") = 7 + 5 = 12.

  Example 3:
  Input: cost = [2,4,6,2,4,6,4,4,4], target = 5
  Output: "0"
  Explanation: It's not possible to paint any integer with total cost equal to target.

  Example 4:
  Input: cost = [6,10,15,40,40,40,40,40,40], target = 47
  Output: "32211"

  Constraints:

  cost.length == 9
  1 <= cost[i] <= 5000
  1 <= target <= 5000
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def largest_number (costs : List Nat) (target : Int) : String := sorry

  theorem largest_number_output_properties
    (costs : List Nat) 
    (target : Int)
    (h1 : costs.length = 9)
    (h2 : ∀ x ∈ costs, 1 ≤ x ∧ x ≤ 100)
    (h3 : 1 ≤ target ∧ target ≤ 100) :
    let result := largest_number costs target
    -- Result is non-empty string
    (result.length > 0) ∧
    -- Contains only digits
    (∀ c ∈ result.data, c.isDigit) ∧
    -- Either 0 or valid cost sum
    (result = "0" ∨
      -- Sum of digit costs equals target
      (let digits := result.data.map (fun c => c.toNat - '0'.toNat)
       let costProducts := digits.zip costs |>.map (fun (d, c) => c * d)
       let cost_sum := costProducts.foldl (fun x y => x + y) (0 : Nat)
       Int.ofNat cost_sum = target)) ∧
    -- All digits between 1-9
    (result = "0" ∨ 
      (∀ d ∈ result.data.map (fun c => c.toNat - '0'.toNat), 1 ≤ d ∧ d ≤ 9)) := 
  sorry

vc-theorems: |-
  theorem zero_target_gives_zero 
    (costs : List Nat)
    (h1 : costs.length = 9)
    (h2 : ∀ x ∈ costs, 1 ≤ x ∧ x ≤ 100) :
    largest_number costs 0 = "0" := sorry

  theorem negative_target_gives_zero
    (costs : List Nat)
    (h1 : costs.length = 9)
    (h2 : ∀ x ∈ costs, 1 ≤ x ∧ x ≤ 100) :
    ∀ target < 0, largest_number costs target = "0" := sorry

  theorem impossible_costs_give_zero
    (costs : List Nat)
    (h1 : costs.length = 9)
    (h2 : ∀ x ∈ costs, x ≥ 1000) :
    largest_number costs 100 = "0" := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

  /-
  info: '7772'
  -/
  #guard_msgs in
  #eval largest_number [4, 3, 2, 5, 6, 7, 2, 5, 5] 9

  /-
  info: '85'
  -/
  #guard_msgs in
  #eval largest_number [7, 6, 5, 5, 5, 6, 8, 7, 8] 12

  /-
  info: '0'
  -/
  #guard_msgs in
  #eval largest_number [2, 4, 6, 2, 4, 6, 4, 4, 4] 5

