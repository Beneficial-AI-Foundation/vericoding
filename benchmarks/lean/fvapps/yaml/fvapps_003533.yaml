vc-description: |-
  /-
  Count how often sign changes in array.
  
  ### result
  number from `0` to ... . Empty array returns `0`
  
  ### example
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def catch_sign_change (lst : List Int) : Nat :=
    sorry

vc-theorems: |-
  theorem empty_or_singleton_lists (lst : List Int) :
    lst.length ≤ 1 → catch_sign_change lst = 0 :=
    sorry
  
  theorem count_is_nonnegative (lst : List Int) :
    catch_sign_change lst ≥ 0 :=
    sorry
  
  theorem count_is_bounded (lst : List Int) :
    lst.length ≥ 2 → catch_sign_change lst ≤ lst.length - 1 :=
    sorry
  
  theorem reversing_list_same_count (lst : List Int) :
    catch_sign_change lst = catch_sign_change lst.reverse :=
    sorry
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval catch_sign_change [-7, -7, 7, 0]
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval catch_sign_change [-1, 2, 2, 2, 2, -8, -1]
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval catch_sign_change []
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval catch_sign_change [0]
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval catch_sign_change [-1, -2, -3]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

