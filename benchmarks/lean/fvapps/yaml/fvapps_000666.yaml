vc-description: |-
  /-
  You are given an axis-aligned rectangle in a 2D Cartesian plane. The bottom left corner of this rectangle has coordinates (0,0)$(0, 0)$ and the top right corner has coordinates (N−1,N−1)$(N-1, N-1)$. You are also given K$K$ light sources; each light source is a point inside or on the perimeter of the rectangle.
  For each light source, let's divide the plane into four quadrants by a horizontal and a vertical line passing through this light source. The light source can only illuminate one of these quadrants (including its border, i.e. the point containing the light source and two half-lines), but the quadrants illuminated by different light sources may be different.
  You want to assign a quadrant to each light source in such a way that when they illuminate their respective quadrants, the entire rectangle (including its perimeter) is illuminated. Find out whether it is possible to assign quadrants to light sources in such a way.

  -----Input-----
  - The first line of the input contains an integer T$T$ denoting the number of test cases. The description of the test cases follows.
  - The first line of each test case contains two space-separated integers K$K$ and N$N$.
  - Each of the next K$K$ lines contains two space-separated integers x$x$ and y$y$ denoting a light source with coordinates (x,y)$(x, y)$.

  -----Output-----
  For each test case, print a single line containing the string "yes" if it is possible to illuminate the whole rectangle or "no" if it is impossible.

  -----Constraints-----
  - 1≤T≤5,000$1 \le T \le 5,000$
  - 1≤K≤100$1 \le K \le 100$
  - 1≤N≤109$1 \le N \le 10^9$
  - 0≤x,y≤N−1$0 \le x, y \le N-1$
  - no two light sources coincide

  -----Example Input-----
  2
  2 10
  0 0
  1 0
  2 10
  1 2
  1 1

  -----Example Output-----
  yes
  no
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def assess_lights (k : Nat) (n : Nat) (points : List (Nat × Nat)) : String := sorry

  theorem more_than_three_lights_always_yes {n k : Nat} {points : List (Nat × Nat)}
    (h1 : 1 ≤ n) (h2 : n ≤ 100) 
    (h3 : 1 ≤ k) (h4 : k ≤ 4)
    (h5 : k > 3)
    : assess_lights k n points = "yes" := sorry

vc-theorems: |-
  theorem corner_point_always_yes {n : Nat} {points : List (Nat × Nat)}
    (h1 : 2 ≤ n) (h2 : n ≤ 100)
    (h3 : points.length ≤ 3)
    (h4 : ∃ p ∈ points, p = (0,0) ∨ p = (0,n-1) ∨ p = (n-1,0) ∨ p = (n-1,n-1))
    : assess_lights points.length n points = "yes" := sorry

  theorem two_edge_points_yes {n : Nat}
    (h1 : 2 ≤ n) (h2 : n ≤ 100) :
    (assess_lights 2 n [(0,1), (0,n-2)] = "yes") ∧ 
    (assess_lights 2 n [(1,0), (n-2,0)] = "yes") := sorry

  theorem three_points_valid_result {n x y : Nat}
    (h1 : 2 ≤ n) (h2 : n ≤ 100)
    (h3 : x ≤ 99) (h4 : y ≤ 99) :
    (assess_lights 3 n [(0,0), (x % n, y % n), (n-1,n-1)] = "yes") ∨
    (assess_lights 3 n [(0,0), (x % n, y % n), (n-1,n-1)] = "no") := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

  /-
  info: 'yes'
  -/
  #guard_msgs in
  #eval assess_lights 2 10 [(0, 0), (1, 0)]

  /-
  info: 'no'
  -/
  #guard_msgs in
  #eval assess_lights 2 10 [(1, 2), (1, 1)]

  /-
  info: 'yes'
  -/
  #guard_msgs in
  #eval assess_lights 3 5 [(0, 0), (4, 2), (2, 4)]

