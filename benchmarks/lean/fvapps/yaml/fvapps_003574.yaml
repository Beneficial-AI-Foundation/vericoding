vc-description: |-
  /-
  When multiple master devices are connected to a single bus (https://en.wikipedia.org/wiki/System_bus), there needs to be an arbitration in order to choose which of them can have access to the bus (and 'talk' with a slave).

  We implement here a very simple model of bus mastering. Given `n`, a number representing the number of **masters** connected to the bus, and a fixed priority order (the first master has more access priority than the second and so on...), the task is to choose the selected master.
  In practice, you are given a string `inp` of length `n` representing the `n` masters' requests to get access to the bus, and you should return a string representing the masters, showing which (only one) of them was granted access:

  ```
  The string 1101 means that master 0, master 1 and master 3 have requested
  access to the bus. 
  Knowing that master 0 has the greatest priority, the output of the function should be: 1000
  ```

  ## Examples

  ## Notes

  * The resulting string (`char* `) should be allocated in the `arbitrate` function, and will be free'ed in the tests.

  * `n` is always greater or equal to 1.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def arbitrate (s : String) (n : Nat) : String := sorry

  theorem arbitrate_all_zeros (n : Nat) (h : 0 < n) :
    arbitrate (String.mk (List.replicate n '0')) n = String.mk (List.replicate n '0') := sorry

vc-theorems: |-
  theorem arbitrate_single_one (n i : Nat) (h1 : 0 < n) (h2 : i < n) :
    arbitrate (String.mk (List.replicate i '0' ++ '1' :: List.replicate (n - i - 1) '0')) n = 
    String.mk (List.replicate i '0' ++ '1' :: List.replicate (n - i - 1) '0') := sorry

  theorem arbitrate_single_one_count (n i : Nat) (h1 : 0 < n) (h2 : i < n) :
    ((arbitrate (String.mk (List.replicate i '0' ++ '1' :: List.replicate (n - i - 1) '0')) n).data.filter (Â· = '1')).length = 1 := sorry

  theorem arbitrate_all_ones (n : Nat) (h : 0 < n) :
    arbitrate (String.mk (List.replicate n '1')) n = 
    String.mk ('1' :: List.replicate (n - 1) '0') := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /--
  info: '001000000'
  -/
  #guard_msgs in
  #eval arbitrate "001000101" 9

  /--
  info: '000000100'
  -/
  #guard_msgs in
  #eval arbitrate "000000101" 9

  /--
  info: '0000'
  -/
  #guard_msgs in
  #eval arbitrate "0000" 4

