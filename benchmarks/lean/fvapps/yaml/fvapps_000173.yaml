vc-description: |-
  /-
  Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.
  
  Below is one possible representation of s1 = "great":
  
      great
     /    \
    gr    eat
   / \    /  \
  g   r  e   at
             / \
            a   t
  
  To scramble the string, we may choose any non-leaf node and swap its two children.
  
  For example, if we choose the node "gr" and swap its two children, it produces a scrambled string "rgeat".
  
      rgeat
     /    \
    rg    eat
   / \    /  \
  r   g  e   at
             / \
            a   t
  
  We say that "rgeat" is a scrambled string of "great".
  
  Similarly, if we continue to swap the children of nodes "eat" and "at", it produces a scrambled string "rgtae".
  
      rgtae
     /    \
    rg    tae
   / \    /  \
  r   g  ta  e
         / \
        t   a
  
  We say that "rgtae" is a scrambled string of "great".
  
  Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.
  
  Example 1:
  
  Input: s1 = "great", s2 = "rgeat"
  Output: true
  
  Example 2:
  
  Input: s1 = "abcde", s2 = "caebd"
  Output: false
  -/
  
  -- Apps difficulty: interview
  -- Assurance level: unguarded
  
  /- We'll use substring operations instead of direct char manipulation -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def isScramble (s1 s2 : String) : Bool :=
  sorry

vc-theorems: |-
  theorem equal_strings_are_scramble (s : String) :
    isScramble s s = true :=
  sorry
  
  theorem different_lengths_not_scramble (s : String) :
    isScramble s (s ++ "a") = false :=
  sorry
  
  theorem different_chars_not_scramble (s : String) (h : s.length > 0) :
    ∀ (s2 : String), s.length = s2.length → (∃ c, s.contains c ≠ s2.contains c) →
    isScramble s s2 = false :=
  sorry
  
  theorem length_two_strings_scramble (s1 s2 : String) :
    s1.length = 2 → s2.length = 2 → (∀ c, s1.contains c = s2.contains c) →
    isScramble s1 s2 = true :=
  sorry
  
  theorem scramble_symmetric (s1 s2 : String) :
    isScramble s1 s2 = isScramble s2 s1 :=
  sorry
  
  theorem empty_strings_are_scramble :
    isScramble "" "" = true :=
  sorry

vc-postamble: |-
  /--
  info: True
  -/
  #guard_msgs in
  #eval is_scramble "great" "rgeat"
  
  /--
  info: False
  -/
  #guard_msgs in
  #eval is_scramble "abcde" "caebd"
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval is_scramble "a" "a"

