vc-description: |-
  /-
  We have n chips, where the position of the ith chip is position[i].
  We need to move all the chips to the same position. In one step, we can change the position of the ith chip from position[i] to:
  
  position[i] + 2 or position[i] - 2 with cost = 0.
  position[i] + 1 or position[i] - 1 with cost = 1.
  
  Return the minimum cost needed to move all the chips to the same position.
  
  Example 1:
  
  Input: position = [1,2,3]
  Output: 1
  Explanation: First step: Move the chip at position 3 to position 1 with cost = 0.
  Second step: Move the chip at position 2 to position 1 with cost = 1.
  Total cost is 1.
  
  Example 2:
  
  Input: position = [2,2,2,3,3]
  Output: 2
  Explanation: We can move the two chips at poistion 3 to position 2. Each move has cost = 1. The total cost = 2.
  
  Example 3:
  Input: position = [1,1000000000]
  Output: 1
  
  Constraints:
  
  1 <= position.length <= 100
  1 <= position[i] <= 10^9
  -/

vc-preamble: |-
  def min_cost_to_move_chips (positions: List Nat) : Nat :=
  sorry

vc-helpers: |-

vc-definitions: |-
  def count_even (positions: List Nat) : Nat :=
  sorry

vc-theorems: |-
  theorem min_cost_upper_bound (positions: List Nat) (h: positions ≠ []) :
    min_cost_to_move_chips positions ≤ positions.length :=
  sorry
  
  theorem min_cost_non_negative (positions: List Nat) :
    min_cost_to_move_chips positions ≥ 0 :=
  sorry
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval min_cost_to_move_chips [1, 2, 3]
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval min_cost_to_move_chips [2, 2, 2, 3, 3]
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval min_cost_to_move_chips [1, 1000000000]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

