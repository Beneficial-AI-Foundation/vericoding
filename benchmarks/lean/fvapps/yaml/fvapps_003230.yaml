vc-description: |-
  /-
  In this kata you will be given a random string of letters and tasked with returning them as a string of comma-separated sequences sorted alphabetically, with each sequence starting with an uppercase character followed by `n-1` lowercase characters, where `n` is the letter's alphabet position `1-26`.

  ## Example

  ```python
  alpha_seq("ZpglnRxqenU") -> "Eeeee,Ggggggg,Llllllllllll,Nnnnnnnnnnnnnn,Nnnnnnnnnnnnnn,Pppppppppppppppp,Qqqqqqqqqqqqqqqqq,Rrrrrrrrrrrrrrrrrr,Uuuuuuuuuuuuuuuuuuuuu,Xxxxxxxxxxxxxxxxxxxxxxxx,Zzzzzzzzzzzzzzzzzzzzzzzzzz"
  ```

  ## Technical Details

  - The string will include only letters.
  - The first letter of each sequence is uppercase followed by `n-1` lowercase.
  - Each sequence is separated with a comma.
  - Return value needs to be a string.
  -/

vc-preamble: |-
  def isLower (c : Char) : Bool :=
    97 ≤ c.toNat && c.toNat ≤ 122

vc-helpers: |

vc-definitions: |-
  def alpha_seq (s : String) : String :=
    sorry

vc-theorems: |-
  theorem alpha_seq_parts_sorted {s : String} (h : s ≠ "") : 
    let parts := s.split (· = ',')
    ∀ i j, i < j → j < parts.length → 
      let p1 := (parts[i]?.getD "")
      let p2 := (parts[j]?.getD "")
      p1.length > 0 → p2.length > 0 →
      (p1.data[0]?.getD ' ').toLower ≤ (p2.data[0]?.getD ' ').toLower := by
    sorry 

  theorem alpha_seq_parts_capitalized {s : String} (h : s ≠ "") :
    let parts := s.split (· = ',')
    ∀ part ∈ parts, part.length > 0 → 
      part.data[0]?.getD ' ' = (part.data[0]?.getD ' ').toUpper := by
    sorry

  theorem alpha_seq_parts_rest_lowercase {s : String} (h : s ≠ "") :
    let parts := s.split (· = ',')
    ∀ part ∈ parts, ∀ i, 0 < i → i < part.length → 
      part.data[i]?.getD ' ' = (part.data[i]?.getD ' ').toLower := by
    sorry

  theorem alpha_seq_parts_length {s : String} (h : s ≠ "") :
    let parts := s.split (· = ',')
    ∀ part ∈ parts, part.length > 0 → 
      part.length = (part.data[0]?.getD ' ').toLower.toNat - 96 := by
    sorry

  theorem alpha_seq_parts_same_char {s : String} (h : s ≠ "") :
    let parts := s.split (· = ',')
    ∀ part ∈ parts, ∀ i, i < part.length →
      (part.data[i]?.getD ' ').toLower = (part.data[0]?.getD ' ').toLower := by
    sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /--
  info: 'A,Bb,Ccc,Ffffff,Ffffff'
  -/
  #guard_msgs in
  #eval alpha_seq "BfcFA"

  /--
  info: 'Ggggggg,Llllllllllll,Nnnnnnnnnnnnnn,Pppppppppppppppp,Rrrrrrrrrrrrrrrrrr,Zzzzzzzzzzzzzzzzzzzzzzzzzz'
  -/
  #guard_msgs in
  #eval alpha_seq "ZpglnR"

  /--
  info: 'A,Bb,Ccc'
  -/
  #guard_msgs in
  #eval alpha_seq "Abc"

