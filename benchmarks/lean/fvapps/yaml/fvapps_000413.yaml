vc-description: |-
  /-
  Given an integer array arr and an integer difference, return the length of the longest subsequence in arr which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals difference.

  Example 1:
  Input: arr = [1,2,3,4], difference = 1
  Output: 4
  Explanation: The longest arithmetic subsequence is [1,2,3,4].
  Example 2:
  Input: arr = [1,3,5,7], difference = 1
  Output: 1
  Explanation: The longest arithmetic subsequence is any single element.

  Example 3:
  Input: arr = [1,5,7,8,5,3,4,2,1], difference = -2
  Output: 4
  Explanation: The longest arithmetic subsequence is [7,5,3,1].

  Constraints:

  1 <= arr.length <= 10^5
  -10^4 <= arr[i], difference <= 10^4
  -/

vc-preamble: |-
  def longest_arithmetic_subsequence (arr: List Int) (diff: Int) : Nat :=
    sorry

  def countOccurrences (xs : List Int) (x : Int) : Nat :=
    sorry

vc-helpers: |

vc-definitions: |-
  def maxOccurrences (xs : List Int) : Nat :=
    sorry

vc-theorems: |-
  theorem las_length_bounded {arr: List Int} {diff: Int} :
    arr ≠ [] → longest_arithmetic_subsequence arr diff ≤ arr.length :=
  sorry

  theorem las_non_negative {arr: List Int} {diff: Int} :
    arr ≠ [] → longest_arithmetic_subsequence arr diff ≥ 0 :=
  sorry

  theorem las_zero_diff {arr: List Int} :
    arr ≠ [] → longest_arithmetic_subsequence arr 0 = maxOccurrences arr :=
  sorry

  theorem las_reverse_symmetry {arr: List Int} {diff: Int} :
    arr ≠ [] → diff > 0 →
      longest_arithmetic_subsequence arr diff = 
      longest_arithmetic_subsequence arr.reverse (-diff) :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

  /-
  info: 4
  -/
  #guard_msgs in
  #eval longest_arithmetic_subsequence [1, 2, 3, 4] 1

  /-
  info: 1
  -/
  #guard_msgs in
  #eval longest_arithmetic_subsequence [1, 3, 5, 7] 1

  /-
  info: 4
  -/
  #guard_msgs in
  #eval longest_arithmetic_subsequence [1, 5, 7, 8, 5, 3, 4, 2, 1] -2

