vc-description: |-
  /-
  In this kata, you will be given a string of text and valid parentheses, such as `"h(el)lo"`. You must return the string, with only the text inside parentheses reversed, so `"h(el)lo"` becomes `"h(le)lo"`. However, if said parenthesized text contains parenthesized text itself, then that too must reversed back, so it faces the original direction. When parentheses are reversed, they should switch directions, so they remain syntactically correct (i.e. `"h((el)l)o"` becomes `"h(l(el))o"`). This pattern should repeat for however many layers of parentheses. There may be multiple groups of parentheses at any level (i.e. `"(1) (2 (3) (4))"`), so be sure to account for these.
  
  For example:
  ```python
  reverse_in_parentheses("h(el)lo") == "h(le)lo"
  reverse_in_parentheses("a ((d e) c b)") == "a (b c (d e))"
  reverse_in_parentheses("one (two (three) four)") == "one (ruof (three) owt)"
  reverse_in_parentheses("one (ruof ((rht)ee) owt)") == "one (two ((thr)ee) four)"
  ```
  
  Input parentheses will always be valid (i.e. you will never get "(()").
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def count_char (c : Char) (s : String) : Nat := sorry
  
  def reverse_in_parentheses (s : String) : String := sorry

vc-theorems: |-
  theorem length_preserved (s : String) : 
    (reverse_in_parentheses s).length = s.length := by
    sorry
  
  theorem preserves_parens_count (s : String) : 
    (count_char '(' s = count_char '(' (reverse_in_parentheses s)) ∧ 
    (count_char ')' s = count_char ')' (reverse_in_parentheses s)) := by
    sorry
  
  theorem no_parens_unchanged (s : String) 
    (h : ∀ c ∈ s.data, c ≠ '(' ∧ c ≠ ')') :
    reverse_in_parentheses s = s := by
    sorry
  
  /-
  info: 'h(le)lo'
  -/
  -- #guard_msgs in
  -- #eval reverse_in_parentheses "h(el)lo"
  
  /-
  info: 'a (b c (d e))'
  -/
  -- #guard_msgs in
  -- #eval reverse_in_parentheses "a ((d e) c b)"
  
  /-
  info: 'one (ruof (three) owt)'
  -/
  -- #guard_msgs in
  -- #eval reverse_in_parentheses "one (two (three) four)"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

