vc-description: |-
  /-
  You are given a string $s$ of even length $n$. String $s$ is binary, in other words, consists only of 0's and 1's.

  String $s$ has exactly $\frac{n}{2}$ zeroes and $\frac{n}{2}$ ones ($n$ is even).

  In one operation you can reverse any substring of $s$. A substring of a string is a contiguous subsequence of that string.

  What is the minimum number of operations you need to make string $s$ alternating? A string is alternating if $s_i \neq s_{i + 1}$ for all $i$. There are two types of alternating strings in general: 01010101... or 10101010...

  -----Input-----

  The first line contains a single integer $t$ ($1 \le t \le 1000$) — the number of test cases.

  The first line of each test case contains a single integer $n$ ($2 \le n \le 10^5$; $n$ is even) — the length of string $s$.

  The second line of each test case contains a binary string $s$ of length $n$ ($s_i \in$ {0, 1}). String $s$ has exactly $\frac{n}{2}$ zeroes and $\frac{n}{2}$ ones.

  It's guaranteed that the total sum of $n$ over test cases doesn't exceed $10^5$.

  -----Output-----

  For each test case, print the minimum number of operations to make $s$ alternating.

  -----Example-----
  Input
  3
  2
  10
  4
  0110
  8
  11101000

  Output
  0
  1
  2

  -----Note-----

  In the first test case, string 10 is already alternating.

  In the second test case, we can, for example, reverse the last two elements of $s$ and get: 0110 $\rightarrow$ 0101.

  In the third test case, we can, for example, make the following two operations:   11101000 $\rightarrow$ 10101100;  10101100 $\rightarrow$ 10101010.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def solve_string_alternation (n : Nat) (s : String) : Nat := sorry

  /- Main theorem combining several properties of solve_string_alternation:
    1. Output is non-negative
    2. Output is less than string length 
    3. Output relates to number of adjacent duplicates
  -/

vc-theorems: |-
  theorem solve_string_alternation_properties (s : String) (n : Nat) 
    (h1 : s.length = n) (h2 : n > 0) (h3 : ∀c ∈ s.data, c = '0' ∨ c = '1') :
    let result := solve_string_alternation n s
    let adjacent_same := (List.zip s.data s.data.tail).filter (fun p => p.1 = p.2) |>.length
    (result ≥ 0) ∧ 
    (result < n) ∧
    (result = (adjacent_same + adjacent_same % 2) / 2) := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

  /- Perfectly alternating strings require no operations -/

  theorem solve_string_alternation_perfect_alt (n : Nat) (h : n ≥ 2) :  
    let s := String.mk (List.map (fun i => if i % 2 = 0 then '0' else '1') (List.range n))
    solve_string_alternation n s = 0 := sorry

  /- For strings of all same characters, result depends on length -/

  theorem solve_string_alternation_all_same (n : Nat) (h : n > 0) :
    let s := String.mk (List.replicate n '0')
    solve_string_alternation n s = ((n-1) + (n-1) % 2) / 2 := sorry

  /-
  info: 0
  -/
  #guard_msgs in
  #eval solve_string_alternation 2 "10"

  /-
  info: 1
  -/
  #guard_msgs in
  #eval solve_string_alternation 4 "0110"

  /-
  info: 2
  -/
  #guard_msgs in
  #eval solve_string_alternation 8 "11101000"

