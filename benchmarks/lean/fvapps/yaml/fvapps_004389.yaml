vc-description: |-
  /-
  # YOUR MISSION
  
  An [octahedron](https://en.wikipedia.org/wiki/Octahedron) is an 8-sided polyhedron whose faces are triangles. 
  
  Create a method that outputs a 3-dimensional array of an octahedron in which the height, width, and depth are equal to the provided integer `size`, which is equal to the length from one vertex to the opposite vertex on the octahedron.
  
  ## EXAMPLE
  
  ```python
  create_octahedron(7)
  
  [
      [[0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0]],
  
      [[0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 0, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 0, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0]],
  
      [[0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 0, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 1, 1, 1, 1, 1, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 0, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0]],
  
      [[0, 0, 0, 1, 0, 0, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 1, 1, 1, 1, 1, 0],
       [1, 1, 1, 1, 1, 1, 1],
       [0, 1, 1, 1, 1, 1, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 0, 0, 1, 0, 0, 0]],
  
      [[0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 0, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 1, 1, 1, 1, 1, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 0, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0]],
  
      [[0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 0, 0],
       [0, 0, 1, 1, 1, 0, 0],
       [0, 0, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0]],
  
      [[0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0]]
  ]
  ```
  
  where each 1 represents a cubic unit that the octahedron takes up and where 0 is a cubic unit of empty space.
  
  # NOTES
  
   - The method should return an empty array/list if either 
    - The input size is even (because then it wouldn't be an octahedron. It'd be an irregular polyhedron with 26 sides)
    - if the input size is 0 or less
    - if input size is 1 (that's called a cube).
   - If there's any problems with this kata (*COUGH* [my last Kata](https://www.codewars.com/kata/5bf76f953efcee37e2000061) *COUGH*), I'll try to get them fixed in the evenings before 10pm.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def create_octahedron (size : Nat) : List (List (List Nat)) := sorry
  
  theorem even_size_returns_empty (size : Int) :
    size > 0 ∧ size % 2 = 0 → create_octahedron size.toNat = [] := sorry

vc-theorems: |-
  theorem non_positive_returns_empty (size : Int) :
    size ≤ 0 → create_octahedron size.toNat = [] := sorry
  
  theorem octahedron_size_properties {size : Nat} (h1 : size ≥ 3) (h2 : size ≤ 11) (h3 : size % 2 = 1) :
    let result := create_octahedron size
    let center := size / 2
    -- Size checks
    (result.length = size) ∧
    (∀ layer ∈ result, layer.length = size) ∧
    (∀ layer ∈ result, ∀ row ∈ layer, row.length = size) ∧
    -- Value checks (0 or 1)
    (∀ layer ∈ result, ∀ row ∈ layer, ∀ v ∈ row, v = 0 ∨ v = 1) ∧
    -- Center is 1
    ((result.get! center).get! center).get! center = 1 ∧
    -- Corners are 0
    ((result.get! 0).get! 0).get! 0 = 0 ∧
    ((result.get! 0).get! 0).get! (size-1) = 0 ∧
    ((result.get! 0).get! (size-1)).get! 0 = 0 ∧
    ((result.get! 0).get! (size-1)).get! (size-1) = 0 ∧
    ((result.get! (size-1)).get! 0).get! 0 = 0 ∧
    ((result.get! (size-1)).get! 0).get! (size-1) = 0 ∧
    ((result.get! (size-1)).get! (size-1)).get! 0 = 0 ∧
    ((result.get! (size-1)).get! (size-1)).get! (size-1) = 0 := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

