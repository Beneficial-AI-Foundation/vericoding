vc-description: |-
  /-
  Given a string s and an integer k.
  Return the maximum number of vowel letters in any substring of s with length k.
  Vowel letters in English are (a, e, i, o, u).

  Example 1:
  Input: s = "abciiidef", k = 3
  Output: 3
  Explanation: The substring "iii" contains 3 vowel letters.

  Example 2:
  Input: s = "aeiou", k = 2
  Output: 2
  Explanation: Any substring of length 2 contains 2 vowels.

  Example 3:
  Input: s = "leetcode", k = 3
  Output: 2
  Explanation: "lee", "eet" and "ode" contain 2 vowels.

  Example 4:
  Input: s = "rhythms", k = 4
  Output: 0
  Explanation: We can see that s doesn't have any vowel letters.

  Example 5:
  Input: s = "tryhard", k = 4
  Output: 1

  Constraints:

  1 <= s.length <= 10^5
  s consists of lowercase English letters.
  1 <= k <= s.length
  -/

vc-preamble: |-
  def max_vowels (s : String) (k : Nat) : Nat := sorry

  def count_vowels (s : String) : Nat := sorry

vc-helpers: |

vc-definitions: |-
  def is_vowel (c : Char) : Bool := sorry

  theorem max_vowels_monotonic {s : String} {k : Nat}
    (h1 : k < String.length s) :
    max_vowels s k ≤ max_vowels s (k + 1) := sorry

vc-theorems: |-
  theorem max_vowels_empty {k : Nat}
    (h1 : k > 0) :
    max_vowels "" k = 0 := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible

  /-
  info: 3
  -/
  #guard_msgs in
  #eval max_vowels "abciiidef" 3

  /-
  info: 2
  -/
  #guard_msgs in
  #eval max_vowels "leetcode" 3

  /-
  info: 0
  -/
  #guard_msgs in
  #eval max_vowels "rhythms" 4

