vc-description: |-
  /-
  # Introduction and Warm-up (Highly recommended)
  
  # [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)
  ___
  
  # Task
  
  **_Given_** an *array/list [] of integers* , **_Construct_** a *product array **_Of same size_** Such That prod[i] is equal to The Product of all the elements of Arr[] except Arr[i]*. 
  ___
  
  # Notes 
  
  * **_Array/list_** size is *at least 2* .
  
  * **_Array/list's numbers_**  Will be **_only Positives_** 
  
  * **_Repetition_** of numbers in *the array/list could occur*.
  ___
  
  # Input >> Output Examples 
  
  ```
  productArray ({12,20}) ==>  return {20,12}
  ```
  ## **_Explanation_**:
  
  * **_The first element_**  *in prod [] array* **_12_**  *is the product of all array's elements except the first element*
  
  * **_The second element_** **_20_**  *is the product of all array's elements except the second element* .
  ___
  
  ```
  productArray ({1,5,2}) ==> return {10,2,5}
  ```
  
  ## **_Explanation_**: 
  
  * **_The first element_**  **_10_** *is the product of all array's elements* **_except_** *the first element **_1_***
  
  * **_The second element_** **_2_** *is the product of all array's elements* **_except_** *the second element* **_5_** 
  
  * **_The Third element_** **_5_** *is the product of all array's elements* **_except_** *the Third element* **_2_**.
  
  ___
  
  ```
  productArray ({10,3,5,6,2}) return ==> {180,600,360,300,900}
  ```
  
  ## **_Explanation_**: 
  
  * **_The first element_** **_180_**  *is the product of all array's elements* **_except_** *the first element*  **_10_** 
  
  * **_The second element_** **_600_** *is the product of all array's elements*  **_except_**  *the second element*  **_3_** 
  
  * **_The Third element_** **_360_** *is the product of all array's elements* **_except_** *the third element* **_5_**
  
  * **_The Fourth element_** **_300_** *is the product of all array's elements* **_except_** *the fourth element* **_6_** 
  
  * *Finally* ,**_The Fifth element_** **_900_** *is the product of all array's elements* **_except_** *the fifth element* **_2_** 
  
  ___
  # [A more challenging version of this kata by Firefly2002](https://www.codewars.com/kata/array-product-sans-n)
  ___
  ___
  
  # [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)
  
  # [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)
  
  # [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)
  ___
  
  ## ALL translations are welcomed
  
  ## Enjoy Learning !!
  # Zizou
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def productArray (nums : List Int) : List Int := sorry
  
  theorem product_array_length 
    (nums : List Int) 
    (h : nums.length ≥ 2) :
    (productArray nums).length = nums.length := sorry

vc-theorems: |-
  theorem product_array_element_is_product_of_others
    (nums : List Int)
    (h : nums.length ≥ 2)
    (i : Nat)
    (hi : i < nums.length) :
    let result := productArray nums
    have h_valid : i < result.length := by rw [product_array_length nums h]; exact hi
    result[i]'h_valid = 
      ((List.range nums.length).filter (· ≠ i)).foldl 
        (fun acc j => have h_j : j < nums.length := sorry; acc * nums[j]'h_j) 1 := sorry
  
  theorem product_array_symmetry
    (nums : List Int)
    (h : nums.length ≥ 2)
    (i : Nat)
    (hi : i < nums.length) :
    let result := productArray nums
    have h_valid : i < result.length := by rw [product_array_length nums h]; exact hi
    have h_valid_0 : 0 < result.length := by rw [product_array_length nums h]; exact Nat.zero_lt_of_lt hi
    result[i]'h_valid * nums[i]'hi = result[0]'h_valid_0 * nums[0]'(Nat.zero_lt_of_lt hi) := sorry
  
  /-
  info: [20, 12]
  -/
  -- #guard_msgs in
  -- #eval product_array #[12, 20]
  
  /-
  info: [216, 24, 162, 324]
  -/
  -- #guard_msgs in
  -- #eval product_array #[3, 27, 4, 2]
  
  /-
  info: [900, 1170, 2340, 5850, 1300]
  -/
  -- #guard_msgs in
  -- #eval product_array #[13, 10, 5, 2, 9]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

