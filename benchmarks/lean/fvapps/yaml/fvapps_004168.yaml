vc-description: |-
  /-
  Imagine you start on the 5th floor of a building, then travel down to the 2nd floor, then back up to the 8th floor. You have travelled a total of 3 + 6 = 9 floors of distance.

  Given an array representing a series of floors you must reach by elevator, return an integer representing the total distance travelled for visiting each floor in the array in order. 

  ```
  // simple examples
  elevatorDistance([5,2,8]) = 9
  elevatorDistance([1,2,3]) = 2
  elevatorDistance([7,1,7,1]) = 18

  // if two consecutive floors are the same,
  //distance travelled between them is 0
  elevatorDistance([3,3]) = 0
  ```

  Array will always contain at least 2 floors. Random tests will contain 2-20 elements in array, and floor values between 0 and 30.
  -/

vc-preamble: |-
  def abs (n : Int) : Nat := 
    if n ≥ 0 then n.toNat else (-n).toNat

  def sum (l : List Nat) : Nat :=
    l.foldl (·+·) 0

vc-helpers: |

vc-definitions: |-
  def elevator_distance (floors : List Int) : Nat := sorry

  theorem elevator_distance_non_negative (floors : List Int) 
    (h : floors.length ≥ 2) : 
    elevator_distance floors ≥ 0 := sorry

vc-theorems: |-
  theorem elevator_distance_reversal (floors : List Int)
    (h : floors.length ≥ 2) :
    elevator_distance floors = elevator_distance floors.reverse := sorry

  theorem elevator_distance_same_floor (n : Int) :
    elevator_distance [n, n] = 0 := sorry

  theorem elevator_distance_all_zero (n : Nat) 
    (h : n ≥ 2) :
    elevator_distance (List.replicate n 0) = 0 := sorry

  theorem elevator_distance_up_down : 
    elevator_distance [1, -1] = 2 := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

  /--
  info: 9
  -/
  #guard_msgs in
  #eval elevator_distance [5, 2, 8]

  /--
  info: 2
  -/
  #guard_msgs in
  #eval elevator_distance [1, 2, 3]

  /--
  info: 18
  -/
  #guard_msgs in
  #eval elevator_distance [7, 1, 7, 1]

