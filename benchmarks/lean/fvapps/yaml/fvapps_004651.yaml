vc-description: |-
  /-
  You are given an array of positive and negative integers and a number ```n``` and ```n > 1```. The array may have elements that occurs more than once.
  Find all the combinations of n elements of the array that their sum are 0.
  ```python
  arr = [1, -1, 2, 3, -2]
  n = 3
  find_zero_sum_groups(arr, n) == [-2, -1, 3] # -2 - 1 + 3 = 0
  ```
  The function should ouput every combination or group in increasing order.

  We may have more than one group:
  ```python
  arr = [1, -1, 2, 3, -2, 4, 5, -3 ]
  n = 3
  find_zero_sum_groups(arr, n) == [[-3, -2, 5], [-3, -1, 4], [-3, 1, 2], [-2, -1, 3]]
  ```
  In the case above the function should output a sorted 2D array.

  The function will not give a group twice, or more, only once.

  ```python
  arr = [1, -1, 2, 3, -2, 4, 5, -3, -3, -1, 2, 1, 4, 5, -3 ]
  n = 3
  find_zero_sum_groups(arr, n) == [[-3, -2, 5], [-3, -1, 4], [-3, 1, 2], [-2, -1, 3]]
  ```
  If there are no combinations with sum equals to 0, the function will output an alerting message.

  ```python
  arr = [1, 1, 2, 3]
  n = 2
  find_zero_sum_groups(arr, n) == "No combinations"
  ```
  If the function receives an empty array will output an specific alert:
  ```python
  arr = []
  n = 2
  find_zero_sum_groups(arr, n) == "No elements to combine"
  ```
  As you have seen the solutions may have a value occurring only once.
  Enjoy it!
  -/

vc-preamble: |-
  def find_zero_sum_groups (arr : List Int) (n : Nat) : String ⊕ List Int ⊕ List (List Int) := sorry

  def isSorted (l : List Int) : Bool := 
    match l with
    | [] => true
    | x :: xs => match xs with
      | [] => true
      | y :: _ => x ≤ y && isSorted xs

vc-helpers: |

vc-definitions: |-
  def isSortedBy {α : Type} (l : List α) (f : α → α → Bool) : Bool :=
    match l with
    | [] => true
    | x :: xs => match xs with
      | [] => true
      | y :: _ => f x y && isSortedBy xs f

vc-theorems: |-
  theorem empty_array_returns_no_elements {n : Nat} (h : n > 0) : 
    find_zero_sum_groups [] n = Sum.inl "No elements to combine" := sorry

  theorem valid_solution_has_correct_length {arr : List Int} {n : Nat} {result : List Int}
    (h : find_zero_sum_groups arr n = Sum.inr (Sum.inl result)) :
    result.length = n := sorry

  theorem valid_solution_sums_to_zero {arr : List Int} {n : Nat} {result : List Int}
    (h : find_zero_sum_groups arr n = Sum.inr (Sum.inl result)) :
    result.foldl (· + ·) 0 = 0 := sorry

  theorem valid_solution_elements_in_input {arr : List Int} {n : Nat} {result : List Int}
    (h : find_zero_sum_groups arr n = Sum.inr (Sum.inl result)) :
    ∀ x ∈ result, x ∈ arr := sorry

  theorem valid_solution_is_sorted {arr : List Int} {n : Nat} {result : List Int}
    (h : find_zero_sum_groups arr n = Sum.inr (Sum.inl result)) :
    isSorted result = true := sorry

  theorem multiple_solutions_all_valid {arr : List Int} {n : Nat} {results : List (List Int)}
    (h : find_zero_sum_groups arr n = Sum.inr (Sum.inr results)) :
    ∀ result ∈ results,
      result.length = n ∧ 
      result.foldl (· + ·) 0 = 0 ∧
      (∀ x ∈ result, x ∈ arr) ∧
      isSorted result = true := sorry

  theorem multiple_solutions_are_sorted {arr : List Int} {n : Nat} {results : List (List Int)}
    (h : find_zero_sum_groups arr n = Sum.inr (Sum.inr results)) :
    isSortedBy results (fun x y => x.foldl (· + ·) 0 ≤ y.foldl (· + ·) 0) = true := sorry

  theorem all_positive_has_no_solution {arr : List Int} {n : Nat}
    (h1 : ∀ x ∈ arr, x > 0)
    (h2 : n > 0)
    (h3 : n ≤ arr.length) :
    find_zero_sum_groups arr n = Sum.inl "No combinations" := sorry

  theorem size_larger_than_array_no_solution {arr : List Int} {n : Nat}
    (h : n > arr.length) :
    find_zero_sum_groups arr n = Sum.inl "No combinations" := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: [-2, -1, 3]
  -/
  #guard_msgs in
  #eval find_zero_sum_groups [1, -1, 2, 3, -2] 3

  /-
  info: [[-3, -2, 5], [-3, -1, 4], [-3, 1, 2], [-2, -1, 3]]
  -/
  #guard_msgs in
  #eval find_zero_sum_groups [1, -1, 2, 3, -2, 4, 5, -3] 3

  /-
  info: 'No combinations'
  -/
  #guard_msgs in
  #eval find_zero_sum_groups [1, 1, 2, 3] 2

