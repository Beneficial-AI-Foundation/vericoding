vc-description: |-
  /-
  A robot on an infinite grid starts at point (0, 0) and faces north.  The robot can receive one of three possible types of commands:

  -2: turn left 90 degrees
  -1: turn right 90 degrees
  1 <= x <= 9: move forward x units

  Some of the grid squares are obstacles. 
  The i-th obstacle is at grid point (obstacles[i][0], obstacles[i][1])
  If the robot would try to move onto them, the robot stays on the previous grid square instead (but still continues following the rest of the route.)
  Return the square of the maximum Euclidean distance that the robot will be from the origin.

  Example 1:
  Input: commands = [4,-1,3], obstacles = []
  Output: 25
  Explanation: robot will go to (3, 4)

  Example 2:
  Input: commands = [4,-1,4,-2,4], obstacles = [[2,4]]
  Output: 65
  Explanation: robot will be stuck at (1, 4) before turning left and going to (1, 8)

  Note:

  0 <= commands.length <= 10000
  0 <= obstacles.length <= 10000
  -30000 <= obstacle[i][0] <= 30000
  -30000 <= obstacle[i][1] <= 30000
  The answer is guaranteed to be less than 2 ^ 31.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def robotSim (commands : List Int) (obstacles : List (Int × Int)) : Int :=
    sorry

vc-theorems: |-
  theorem robotSim_result_nonnegative (commands : List Int) (obstacles : List (Int × Int)) :
    robotSim commands obstacles ≥ 0 := 
    sorry

  theorem robotSim_empty_commands (obstacles : List (Int × Int)) :
    robotSim [] obstacles = 0 :=
    sorry

  theorem robotSim_no_obstacles_consistent (commands : List Int) :
    robotSim commands [] = robotSim commands [] :=
    sorry

  theorem robotSim_obstacles_reduce_distance (commands : List Int) (obstacles : List (Int × Int)) :
    robotSim commands obstacles ≤ robotSim commands [] :=
    sorry

  theorem robotSim_turns_only_zero (commands : List Int) (h : ∀ x ∈ commands, x = -1 ∨ x = -2) :
    robotSim commands [] = 0 :=
    sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /--
  info: 25
  -/
  #guard_msgs in
  #eval robotSim [4, -1, 3] []

  /--
  info: 65
  -/
  #guard_msgs in
  #eval robotSim [4, -1, 4, -2, 4] [[2, 4]]

  /--
  info: 0
  -/
  #guard_msgs in
  #eval robotSim [-2, -1] []

