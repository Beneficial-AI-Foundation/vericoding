vc-description: |-
  /-
  Given an integer array arr and a target value target, return the integer value such that when we change all the integers larger than value in the given array to be equal to value, the sum of the array gets as close as possible (in absolute difference) to target.
  In case of a tie, return the minimum such integer.
  Notice that the answer is not neccesarilly a number from arr.

  Example 1:
  Input: arr = [4,9,3], target = 10
  Output: 3
  Explanation: When using 3 arr converts to [3, 3, 3] which sums 9 and that's the optimal answer.

  Example 2:
  Input: arr = [2,3,5], target = 10
  Output: 5

  Example 3:
  Input: arr = [60864,25176,27249,21296,20204], target = 56803
  Output: 11361

  Constraints:

  1 <= arr.length <= 10^4
  1 <= arr[i], target <= 10^5
  -/

vc-preamble: |-
  def find_best_value (arr : List Nat) (target : Nat) : Nat :=
    sorry

  def sum_capped_vals (arr : List Nat) (cap : Nat) : Nat :=
    sorry

  def list_maximum (arr : List Nat) (h : arr ≠ []) : Nat :=
    sorry

vc-helpers: |

vc-definitions: |-
  def abs (n : Int) : Nat :=
    sorry

vc-theorems: |-
  theorem find_best_value_bounds {arr : List Nat} {target : Nat} (h : arr ≠ []) :
    let result := find_best_value arr target
    0 ≤ result ∧ result ≤ list_maximum arr h :=
  sorry

  theorem find_best_value_minimizes {arr : List Nat} {target : Nat} (h : arr ≠ []) :
    let result := find_best_value arr target
    let curr_diff := abs (sum_capped_vals arr result - target)
    let less := max 0 (result - 1)
    let more := min (list_maximum arr h) (result + 1)
    curr_diff ≤ abs (sum_capped_vals arr less - target) ∧
    curr_diff ≤ abs (sum_capped_vals arr more - target) := 
  sorry

  theorem find_best_value_target_one {arr : List Nat} (h : arr ≠ []) :
    let result := find_best_value arr 1
    result = 0 ∨ result = 1 :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

  /-
  info: 3
  -/
  #guard_msgs in
  #eval find_best_value [4, 9, 3] 10

  /-
  info: 5
  -/
  #guard_msgs in
  #eval find_best_value [2, 3, 5] 10

  /-
  info: 11361
  -/
  #guard_msgs in
  #eval find_best_value [60864, 25176, 27249, 21296, 20204] 56803

