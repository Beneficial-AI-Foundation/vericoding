vc-description: |-
  /-
  Given a 2D array of characters grid of size m x n, you need to find if there exists any cycle consisting of the same value in grid.
  A cycle is a path of length 4 or more in the grid that starts and ends at the same cell. From a given cell, you can move to one of the cells adjacent to it - in one of the four directions (up, down, left, or right), if it has the same value of the current cell.
  Also, you cannot move to the cell that you visited in your last move. For example, the cycle (1, 1) -> (1, 2) -> (1, 1) is invalid because from (1, 2) we visited (1, 1) which was the last visited cell.
  Return true if any cycle of the same value exists in grid, otherwise, return false.
  
  Example 1:
  
  Input: grid = [["a","a","a","a"],["a","b","b","a"],["a","b","b","a"],["a","a","a","a"]]
  Output: true
  Explanation: There are two valid cycles shown in different colors in the image below:
  
  Example 2:
  
  Input: grid = [["c","c","c","a"],["c","d","c","c"],["c","c","e","c"],["f","c","c","c"]]
  Output: true
  Explanation: There is only one valid cycle highlighted in the image below:
  
  Example 3:
  
  Input: grid = [["a","b","b"],["b","z","b"],["b","b","a"]]
  Output: false
  
  Constraints:
  
  m == grid.length
  n == grid[i].length
  1 <= m <= 500
  1 <= n <= 500
  grid consists only of lowercase English letters.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def List.rectangular (grid : List (List α)) : Bool :=
    sorry
  
  def contains_cycle (grid : List (List Char)) : Bool :=
    sorry

vc-theorems: |-
  theorem contains_cycle_empty_raises : ∀ (grid : List (List Char)),
    grid = [] ∨ grid.head?.map (λ row => row = []) = some true →
    contains_cycle grid = false :=
  sorry
  
  theorem contains_cycle_returns_bool : ∀ (grid : List (List Char)),
    grid ≠ [] →
    grid.head?.map (λ row => row ≠ []) = some true →
    grid.rectangular = true →
    (contains_cycle grid = true ∨ contains_cycle grid = false) :=
  sorry
  
  theorem contains_cycle_all_same_char : ∀ (c : Char) (n : Nat),
    n > 0 →
    let grid := List.replicate n (List.replicate n c);
    contains_cycle grid = (n > 1) :=
  sorry
  
  theorem contains_cycle_checkerboard : ∀ (n : Nat),
    n ≥ 2 →
    let grid := List.map (λ i => List.map (λ j => if (i+j)%2 = 0 then 'a' else 'b') (List.range n)) (List.range n);
    contains_cycle grid = false :=
  sorry
  
  theorem contains_cycle_border : ∀ (n : Nat),
    n ≥ 3 →
    let grid := List.map (λ i => List.map (λ j =>
      if i = 0 ∨ i = n-1 ∨ j = 0 ∨ j = n-1
      then 'a'
      else 'b') (List.range n)) (List.range n);
    contains_cycle grid = true :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval contains_cycle [["a", "a", "a", "a"], ["a", "b", "b", "a"], ["a", "b", "b", "a"], ["a", "a", "a", "a"]]
  
  /--
  info: True
  -/
  #guard_msgs in
  #eval contains_cycle [["c", "c", "c", "a"], ["c", "d", "c", "c"], ["c", "c", "e", "c"], ["f", "c", "c", "c"]]
  
  /--
  info: False
  -/
  #guard_msgs in
  #eval contains_cycle [["a", "b", "b"], ["b", "z", "b"], ["b", "b", "a"]]

