vc-description: |-
  /-
  Every Turkish citizen has an identity number whose validity can be checked by these set of rules:

  - It is an 11 digit number
  - First digit can't be zero
  - Take the sum of 1st, 3rd, 5th, 7th and 9th digit and multiply it by 7.
  Then subtract the sum of 2nd, 4th, 6th and 8th digits from this value.
  Modulus 10 of the result should be equal to 10th digit.
  - Sum of first ten digits' modulus 10 should be equal to eleventh digit.

  Example:

      10167994524
      //  1+1+7+9+5= 23   // "Take the sum of 1st, 3rd, 5th, 7th and 9th digit..."
      //    23 * 7= 161   //  "...and multiply it by 7"
      //   0+6+9+4 = 19   // "Take the sum of 2nd, 4th, 6th and 8th digits..."
      // 161 - 19 = 142   // "...and subtract from first value"
      // "Modulus 10 of the result should be equal to 10th digit"
      10167994524
               ^ = 2 = 142 % 10
      // 1+0+1+6+7+9+9+4+5+2 = 44
      // "Sum of first ten digits' modulus 10 should be equal to eleventh digit"
      10167994524
                ^ = 4 = 44 % 10

  Your task is to write a function to check the validity of a given number.
  Return `true` or `false` accordingly.

  Note: The input can be a string in some cases.
  -/

vc-preamble: |-
  def calculate_tenth_digit (digits : List Nat) : Nat := sorry
  def calculate_last_digit (digits : List Nat) : Nat := sorry

vc-helpers: |

vc-definitions: |-
  def check_valid_tr_number (n : String) : Bool := sorry

  theorem invalid_length_returns_false (n : String) :
    n.length ≠ 11 → check_valid_tr_number n = false := sorry

vc-theorems: |-
  theorem valid_number_is_accepted {digits : List Nat} (h1 : digits.length = 9) 
    (h2 : digits.head! ≠ 0) :
    let tenth := calculate_tenth_digit digits
    let full_digits := digits ++ [tenth]
    let last := calculate_last_digit full_digits
    check_valid_tr_number (toString (full_digits ++ [last])) = true := sorry

  theorem invalid_check_digits_returns_false {n : String} (h1 : n.length = 11) :
    let digits := n.toList.map (·.toString.toNat!)
    digits[9]! ≠ calculate_tenth_digit (digits.take 9) ∨ 
    digits[10]! ≠ calculate_last_digit (digits.take 10) →
    check_valid_tr_number n = false := sorry

  theorem invalid_type_returns_false (n : String) :
    ¬(∀ c : Char, c ∈ n.data → c.isDigit) →
    check_valid_tr_number n = false := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: True
  -/
  #guard_msgs in
  #eval check_valid_tr_number 36637640050

  /-
  info: False
  -/
  #guard_msgs in
  #eval check_valid_tr_number 12762438338

  /-
  info: True
  -/
  #guard_msgs in
  #eval check_valid_tr_number 10167994524

