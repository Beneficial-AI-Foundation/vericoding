vc-description: |-
  /-
  Chef has some numbers. His girlfriend Chefina feels good when chef gives her a particular pattern number also called as Armstrong number.
  Armstrong number is a number whose sum of its all individual digit raise to the power of the number of digit in that number is equal to that number itself
  eg.. 153 = 1^3 + 5^3 + 3^3 (153 is an Armstrong number)
  1634 = 1^4 + 6^4 + 3^4 + 4^4 (1634 is an Armstrong number)
  As a love guru of chef you have to help chef to find Armstrong numbers Among the numbers which chef has initially so that Chefina feels good

  -----Input:-----
  First line will contain a positive Integer $T$ which is the number of testcases
  Next $T$ lines follows an Integer $N$.

  -----Output:-----
  For Every n You have to print "FEELS GOOD" without qoutes if it is an armstrong number otherwise Print "FEELS BAD" without quotes

  -----Constraints-----
  - $1 \leq T \leq 10$
  - $2 \leq N \leq 10^6$

  -----Sample Input:-----
  3
  153
  11
  1634

  -----Sample Output:-----
  FEELS GOOD
  FEELS BAD
  FEELS GOOD

  -----EXPLANATION:-----
  For test case 1 --> 153 = 1^3 + 5^3 + 3^3 (153 is an armstrong number)
  -/

vc-preamble: |-
  def power (x y : Nat) : Nat :=
    sorry

  def order (x : Nat) : Nat :=
    sorry

  def is_armstrong (x : Nat) : String :=
    sorry

vc-helpers: |

vc-definitions: |-
  def check_numbers (numbers : List Nat) : List String :=
    sorry

vc-theorems: |-
  theorem power_properties (x : Nat) (y : Nat) :
    (y = 0 → power x y = 1) ∧
    (y = 1 → power x y = x) ∧
    (y = 2 → power x y = x * x) :=
    sorry

  theorem order_properties (x : Nat) :
    (x = 0 → order x = 0) ∧
    (0 < x ∧ x < 10 → order x = 1) ∧
    (10 ≤ x ∧ x < 100 → order x = 2) :=
    sorry

  theorem is_armstrong_properties (x : Nat) :
    (x < 10 → is_armstrong x = "FEELS GOOD") ∧
    (is_armstrong x = "FEELS GOOD" ∨ is_armstrong x = "FEELS BAD") :=
    sorry

  theorem check_numbers_properties (numbers : List Nat) :
    (numbers = [] → check_numbers numbers = []) ∧
    (List.length (check_numbers numbers) = List.length numbers) ∧
    (∀ x ∈ check_numbers numbers, x = "FEELS GOOD" ∨ x = "FEELS BAD") :=
    sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

  /-
  info: ['FEELS GOOD', 'FEELS BAD', 'FEELS GOOD']
  -/
  #guard_msgs in
  #eval check_numbers [153, 11, 1634]

  /-
  info: ['FEELS GOOD', 'FEELS GOOD', 'FEELS GOOD']
  -/
  #guard_msgs in
  #eval check_numbers [370, 371, 407]

  /-
  info: ['FEELS BAD', 'FEELS BAD', 'FEELS BAD']
  -/
  #guard_msgs in
  #eval check_numbers [123, 555, 999]

