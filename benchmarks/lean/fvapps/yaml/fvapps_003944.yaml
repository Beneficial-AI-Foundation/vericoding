vc-description: |-
  /-
  *** Nova polynomial multiply*** 

  This kata is from a series on polynomial handling. ( [#1](http://www.codewars.com/kata/nova-polynomial-1-add-1)   [#2](http://www.codewars.com/kata/570eb07e127ad107270005fe)  [#3](http://www.codewars.com/kata/5714041e8807940ff3001140 )   [#4](http://www.codewars.com/kata/571a2e2df24bdfd4e20001f5))

  Consider a polynomial in a list where each element in the list element corresponds to the factors. The factor order is the position in the list. The first element is the zero order factor (the constant).

  p = [a0, a1, a2, a3] signifies the polynomial a0 + a1x + a2x^2 + a3*x^3

  In this kata multiply two polynomials:

  ```python 
  poly_multiply([1, 2], [1] ) = [1, 2]
  poly_multiply([2, 4], [4, 5] ) = [8, 26, 20]
  ```
  The first kata of this series is preloaded in the code and can be used: [poly_add](http://www.codewars.com/kata/nova-polynomial-1-add-1)
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def poly_multiply (p1 p2 : List Int) : List Int :=
    sorry

vc-theorems: |-
  theorem poly_multiply_length (p1 p2 : List Int) :
    (p1 = [] ∨ p2 = []) → poly_multiply p1 p2 = [] ∧
    (p1 ≠ [] ∧ p2 ≠ []) → List.length (poly_multiply p1 p2) = List.length p1 + List.length p2 - 1 :=
    sorry

  theorem poly_multiply_zero (poly : List Int) (h : poly ≠ []) :
    poly_multiply poly [0] = List.replicate (List.length poly) 0 ∧
    poly_multiply [0] poly = List.replicate (List.length poly) 0 :=
    sorry

  theorem poly_multiply_one (poly : List Int) (h : poly ≠ []) :
    poly_multiply poly [1] = poly ∧
    poly_multiply [1] poly = poly :=
    sorry

  theorem poly_multiply_commutative (p1 p2 : List Int) :
    poly_multiply p1 p2 = poly_multiply p2 p1 :=
    sorry

  theorem poly_multiply_empty (poly : List Int) :
    poly_multiply poly [] = [] ∧
    poly_multiply [] poly = [] :=
    sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

  /-
  info: []
  -/
  #guard_msgs in
  #eval poly_multiply [] []

  /-
  info: []
  -/
  #guard_msgs in
  #eval poly_multiply [1, 2, 3] []

  /-
  info: [8, 26, 20]
  -/
  #guard_msgs in
  #eval poly_multiply [2, 4] [4, 5]

