vc-description: |-
  /-
  # Task
   Given a sequence of 0s and 1s, determine if it is a prefix of Thue-Morse sequence.

   The infinite Thue-Morse sequence is obtained by first taking a sequence containing a single 0 and then repeatedly concatenating the current sequence with its binary complement.

   A binary complement of a sequence X is a sequence Y of the same length such that the sum of elements X_i and Y_i on the same positions is equal to 1 for each i.

   Thus the first few iterations to obtain Thue-Morse sequence are:
  ```
  0
  0 1
  0 1 1 0
  0 1 1 0 1 0 0 1
  ...
  ```

  # Examples

   For `seq=[0, 1, 1, 0, 1]`, the result should be `true`.

   For `seq=[0, 1, 0, 0]`, the result should be `false`.

  # Inputs & Output

   - `[input]` integer array `seq`

    An non-empty array.

    Constraints: 

    `1 <= seq.length <= 1000`

    `seq[i] ∈ [0,1]`

   - `[output]` a boolean value

    `true` if it is a prefix of Thue-Morse sequence. `false` otherwise.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def List.get_thue_morse_seq (n : Nat) : List Nat := sorry
  def is_thue_morse (seq : List Nat) : Bool := sorry

vc-theorems: |-
  theorem valid_sequence_length (n : Nat) (h : n > 0) :
    is_thue_morse (List.get_thue_morse_seq n) := sorry

  theorem invalid_sequences (seq : List Nat) (h₁ : seq.length > 0) (h₂ : ∀ x ∈ seq, x = 0 ∨ x = 1) :
    seq ≠ List.get_thue_morse_seq seq.length → ¬is_thue_morse seq := sorry

  theorem sequence_starts_with_zero (n : Nat) (h : n > 0) :
    (List.get_thue_morse_seq n).head? = some 0 := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: True
  -/
  #guard_msgs in
  #eval is_thue_morse [0, 1, 1, 0, 1]

  /-
  info: True
  -/
  #guard_msgs in
  #eval is_thue_morse [0]

  /-
  info: False
  -/
  #guard_msgs in
  #eval is_thue_morse [1]

