vc-description: |-
  /-
  In Scala, an underscore may be used to create a partially applied version of an infix operator using placeholder syntax. For example, `(_ * 3)` is a function that multiplies its input by 3. With a bit of manipulation, this idea can be extended to work on any arbitrary expression.
  
  Create an value/object named `x` that acts as a placeholder in an arithmetic expression. The placeholder should support the four basic integer arithmetic operations: addition, subtraction, multiplication, and integral (floor) division. When the expression with placeholders is called, it should fill the placeholders in the expression from left to right (regardless of operator precedence) with the values it is given.
  
  Here are a few examples:
  ```
  calling (x + 3)       with [1]   gives 1 + 3               = 4
  calling (10 - x)      with [4]   gives 10 - 4              = 6
  calling (x + 2 * x)   with [1 3] gives 1 + 2 * 3   = 1 + 6 = 7
  calling ((x + 2) * x) with [1 3] gives (1 + 2) * 3 = 3 * 3 = 9
  calling (4 * (x / 2)) with [5]   gives 4 * (5 / 2) = 4 * 2 = 8
  ```
  
  All inputs and outputs to/from the expression will be integer types. All expressions tested in this kata will be valid, i.e. there will be no division by zero and the number of values passed in will always be the same as the number of placeholders.
  
  Note: `eval` and `exec` are disabled
  -/

vc-preamble: |-
  def x : List Int → Int := sorry
  
  def add : Int → Int → Int := fun a b => a + b
  
  def sub : Int → Int → Int := fun a b => a - b
  
  def mul : Int → Int → Int := fun a b => a * b

vc-helpers: |-

vc-definitions: |-
  def div : Int → Int → Int := fun a b => a / b
  
  axiom placeholder_identity (args : List Int) (h : args.length > 0) :
    x args = args.head!
  
  axiom placeholder_binary_ops_forward (a b : Int) :
    (add (x [a]) b) = add a b ∧
    (sub (x [a]) b) = sub a b ∧ 
    (mul (x [a]) b) = mul a b
  
  axiom placeholder_binary_ops_reverse (a b : Int) :
    add b (x [a]) = add b a ∧
    sub b (x [a]) = sub b a ∧
    mul b (x [a]) = mul b a
  
  axiom placeholder_binary_ops_div (a b : Int) :
    b ≠ 0 → div (x [a]) b = div a b
  
  axiom placeholder_binary_ops_div_reverse (a b : Int) :
    a ≠ 0 → div b (x [a]) = div b a
  
  axiom placeholder_chaining (args : List Int) (h : args.length > 1) :
    add (x [args.head!]) (x [args.tail.head!]) = add args.head! args.tail.head! ∧
    mul (x [args.head!]) (x [args.tail.head!]) = mul args.head! args.tail.head! ∧ 
    add (x [args.head!]) (mul 2 (x [args.tail.head!])) = add args.head! (mul 2 args.tail.head!)
  
  axiom placeholder_constant_folding (a : Int) :
    add (add 2 3) (x [a]) = add 5 a ∧
    add (mul 2 3) (x [a]) = add 6 a

vc-theorems: |-

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

