vc-description: |-
  /-
  ## Description
  
  Peter enjoys taking risks, and this time he has decided to take it up a notch!
  
  Peter asks his local barman to pour him **n** shots, after which Peter then puts laxatives in **x** of them. He then turns around and lets the barman shuffle the shots. Peter approaches the shots and drinks **a** of them one at a time. Just one shot is enough to give Peter a runny tummy. What is the probability that Peter doesn't need to run to the loo?
  
  ## Task
  
  You are given:
  
  **n** - The total number of shots.
  
  **x** - The number of laxative laden shots.
  
  **a** - The number of shots that peter drinks.
  
  return the probability that Peter won't have the trots after drinking. **n** will always be greater than **x**, and **a** will always be less than **n**.
  
  **You must return the probability rounded to two decimal places i.e. 0.05 or 0.81**
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def get_chance (n : Nat) (x : Nat) (a : Nat) : Float :=
    sorry

vc-theorems: |-
  theorem probability_bounds (n : Nat) (x : Nat) (a : Nat) 
    (h1 : n > 0) (h2 : x ≤ n) (h3 : a ≤ n) :
    0 ≤ get_chance n x a ∧ get_chance n x a ≤ 1 :=
    sorry
  
  theorem zero_laxatives (n : Nat) (a : Nat)
    (h1 : n > 0) (h2 : a ≤ n) :
    get_chance n 0 a = 1 :=
    sorry
  
  theorem all_laxatives (n : Nat) (a : Nat) 
    (h1 : n > 0) (h2 : a ≤ n) :
    get_chance n n a = 0 :=
    sorry
  
  theorem one_shot :
    get_chance 1 1 1 = 0 ∧ get_chance 1 0 1 = 1 :=
    sorry
  
  /-
  info: 0.5
  -/
  -- #guard_msgs in
  -- #eval get_chance 2 1 1
  
  /-
  info: 0.25
  -/
  -- #guard_msgs in
  -- #eval get_chance 4 1 3
  
  /-
  info: 0.33
  -/
  -- #guard_msgs in
  -- #eval get_chance 100 10 10

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

