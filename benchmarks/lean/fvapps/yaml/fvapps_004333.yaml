vc-description: |-
  /-
  ### Task
  You've just moved into a perfectly straight street with exactly ```n``` identical houses on either side of the road. Naturally, you would like to find out the house number of the people on the other side of the street. The street looks something like this:

  --------------------
  ### Street
  ```
  1|   |6
  3|   |4
  5|   |2
  ```

  Evens increase on the right; odds decrease on the left. House numbers start at ```1``` and increase without gaps.
  When ```n = 3```, ```1``` is opposite ```6```, ```3``` opposite ```4```, and ```5``` opposite ```2```. 

  -----------------
  ### Example
  Given your house number ```address``` and length of street ```n```, give the house number on the opposite side of the street.

  ```CoffeeScript
  overTheRoad(address, n)
  overTheRoad(1, 3) = 6
  overTheRoad(3, 3) = 4
  overTheRoad(2, 3) = 5
  overTheRoad(3, 5) = 8
  ```

  ```python
  over_the_road(address, n)
  over_the_road(1, 3) = 6
  over_the_road(3, 3) = 4
  over_the_road(2, 3) = 5
  over_the_road(3, 5) = 8
  ```

  Both n and address could get upto 500 billion with over 200 random tests.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def over_the_road (address n : Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem over_the_road_in_range (address n : Nat) :
    address > 0 → address ≤ 2*n → 
    1 ≤ over_the_road address n ∧ over_the_road address n ≤ 2*n :=
    sorry

  theorem over_the_road_involution (address n : Nat) :
    address > 0 → address ≤ 2*n →
    over_the_road (over_the_road address n) n = address :=
    sorry 

  theorem over_the_road_sum (address n : Nat) :
    address > 0 → address ≤ 2*n →
    address + over_the_road address n = 2*n + 1 :=
    sorry

  theorem over_the_road_parity (address n : Nat) :
    address > 0 → address ≤ 2*n →
    (address % 2 = 0 ↔ over_the_road address n % 2 = 1) :=
    sorry

  theorem over_the_road_examples :
    over_the_road 1 3 = 6 ∧ 
    over_the_road 3 3 = 4 ∧ 
    over_the_road 2 3 = 5 :=
    sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

  /--
  info: 6
  -/
  #guard_msgs in
  #eval over_the_road 1 3

  /--
  info: 4
  -/
  #guard_msgs in
  #eval over_the_road 3 3

  /--
  info: 5
  -/
  #guard_msgs in
  #eval over_the_road 2 3

