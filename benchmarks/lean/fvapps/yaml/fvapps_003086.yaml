vc-description: |-
  /-
  # Task
   Some people are standing in a row in a park. There are trees between them which cannot be moved. 

   Your task is to rearrange the people by their heights in a non-descending order without moving the trees.

  # Example

   For `a = [-1, 150, 190, 170, -1, -1, 160, 180]`, the output should be

   `[-1, 150, 160, 170, -1, -1, 180, 190]`.

  # Input/Output

   - `[input]` integer array `a`

      If a[i] = -1, then the ith position is occupied by a tree. Otherwise a[i] is the height of a person standing in the ith position.

      Constraints:

      `5 ≤ a.length ≤ 30,`

      `-1 ≤ a[i] ≤ 200.`

   - `[output]` an integer array

      `Sorted` array a with all the trees untouched.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def sort_by_height (a : List Int) : List Int :=
    sorry

vc-theorems: |-
  theorem sort_by_height_length {a : List Int} :
    List.length (sort_by_height a) = List.length a :=
    sorry

  theorem sort_by_height_trees_unchanged {a : List Int} :
    ∀ i, i < List.length a → (a.get ⟨i, sorry⟩ = -1 ↔ (sort_by_height a).get ⟨i, sorry⟩ = -1) :=
    sorry

  theorem sort_by_height_non_trees_sorted {a : List Int} :
    let non_trees := (sort_by_height a).filterMap (fun x => if x = -1 then none else some x)
    ∀ i j, i < j → j < List.length non_trees → 
      non_trees.get ⟨i, sorry⟩ ≤ non_trees.get ⟨j, sorry⟩ :=
    sorry

  theorem sort_by_height_same_non_trees {a : List Int} :
    let f := fun x => if x = -1 then none else some x
    List.filterMap f a = List.filterMap f (sort_by_height a) :=
    sorry

  theorem sort_by_height_all_trees {a : List Int} :
    (∀ x ∈ a, x = -1) → sort_by_height a = a :=
    sorry

  theorem sort_by_height_no_trees {a : List Int} :
    (∀ x ∈ a, x ≠ -1) → 
    ∀ i j, i < j → j < List.length a → 
      (sort_by_height a).get ⟨i, sorry⟩ ≤ (sort_by_height a).get ⟨j, sorry⟩ :=
    sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /--
  info: expected1
  -/
  #guard_msgs in
  #eval sort_by_height [-1, 150, 190, 170, -1, -1, 160, 180]

  /--
  info: expected2
  -/
  #guard_msgs in
  #eval sort_by_height [-1, -1, -1, -1, -1]

  /--
  info: expected3
  -/
  #guard_msgs in
  #eval sort_by_height [4, 2, 9, 11, 2, 16]

