vc-description: |-
  /-
  You've had a baby.

  Well done. Nice isn't it? Life destroying... but in a good way.

  Part of your new routine is lying awake at night worrying that you've either lost the baby... or that you have more than 1!

  Given a string of words (x), you need to calculate how many babies are in it. To count as a baby you must have all of the letters in baby ('b', 'a', 'b', 'y'). That counts as 1. They do not need to be in order in the string. Upper and lower case letters count.

  Examples:

  If there are no babies in the string - you lost the baby!! Return a different value, as shown below:

  ```if-not:kotlin
  'none here' = "Where's the baby?!"
  '' = "Where's the baby?!"
  ```

  ```if:kotlin 
  "none here" = null
  "" = null
  ```
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def String.count (s : String) (c : Char) : Nat := sorry
  def baby_count (s : String) : Int ⊕ String := sorry

vc-theorems: |-
  theorem baby_count_result_type (s : String) :
    match baby_count s with
    | Sum.inl n => True 
    | Sum.inr str => str = "Where's the baby?!"
    := sorry

  theorem baby_count_matches_formula (s : String) :
    let lowered := s.toLower
    let count_a := lowered.count 'a'
    let count_b := lowered.count 'b' / 2
    let count_y := lowered.count 'y'
    let expected := min count_a (min count_b count_y)
    match baby_count s with
    | Sum.inl n => n = expected ∧ expected > 0
    | Sum.inr _ => expected = 0
    := sorry

  theorem baby_count_valid_chars_properties (s : String) :
    let result := baby_count s
    match result with
    | Sum.inl n => 
      n ≥ 0 ∧ 
      s.toLower.count 'a' ≥ n ∧
      s.toLower.count 'b' / 2 ≥ n ∧ 
      s.toLower.count 'y' ≥ n
    | Sum.inr _ => True
    := sorry

  theorem baby_count_invalid_chars (s : String) :
    (∀ c ∈ s.data, c ≠ 'a' ∧ c ≠ 'b' ∧ c ≠ 'y') →
    baby_count s = Sum.inr "Where's the baby?!"
    := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /--
  info: 1
  -/
  #guard_msgs in
  #eval baby_count "baby"

  /--
  info: 3
  -/
  #guard_msgs in
  #eval baby_count "baby baby baby"

  /--
  info: "Where's the baby?!"
  -/
  #guard_msgs in
  #eval baby_count "none here"

