vc-description: |-
  /-
  Say you have an array for which the ith element is the price of a given stock on day i.
  
  Design an algorithm to find the maximum profit. You may complete at most two transactions.
  
  Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).
  
  Example 1:
  
  Input: [3,3,5,0,0,3,1,4]
  Output: 6
  Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
               Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
  
  Example 2:
  
  Input: [1,2,3,4,5]
  Output: 4
  Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
               Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are
               engaging multiple transactions at the same time. You must sell before buying again.
  
  Example 3:
  
  Input: [7,6,4,3,1]
  Output: 0
  Explanation: In this case, no transaction is done, i.e. max profit = 0.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def maxProfit (prices: List Nat) : Nat :=
    sorry
  
  -- Maximum profit should be non-negative for any non-empty price list

vc-theorems: |-
  theorem maxprofit_non_negative {prices: List Nat} (h: prices ≠ []) : 
    maxProfit prices ≥ 0 :=
    sorry
  
  -- Descending prices should give zero profit 
  
  theorem maxprofit_descending {prices: List Nat} (h: prices ≠ []) 
    (hsorted: ∀ i j, i < j → j < prices.length → prices[i]! ≥ prices[j]!) :
    maxProfit prices = 0 :=
    sorry
  
  -- For ascending prices, profit should be max of single or double transaction
  
  theorem maxprofit_ascending {prices: List Nat} (h: prices ≠ [])
    (hsorted: ∀ i j, i < j → j < prices.length → prices[i]! ≤ prices[j]!)
    (hlen: prices.length ≥ 4) :
    maxProfit prices = min 
      (prices[prices.length-1]! - prices[0]!)
      ((prices[prices.length-1]! - prices[0]!) + (prices[prices.length-2]! - prices[1]!)) :=
    sorry
  
  -- Single transaction case for ascending prices
  
  theorem maxprofit_ascending_single {prices: List Nat} (h: prices ≠ [])
    (hsorted: ∀ i j, i < j → j < prices.length → prices[i]! ≤ prices[j]!)
    (hlen1: prices.length ≥ 2) (hlen2: prices.length < 4) :
    maxProfit prices = prices[prices.length-1]! - prices[0]! :=
    sorry
  
  -- Constant prices should give zero profit
  
  theorem maxprofit_constant {prices: List Nat} (h: prices ≠ [])
    (hconst: ∀ i j, i < prices.length → j < prices.length → prices[i]! = prices[j]!) :
    maxProfit prices = 0 :=
    sorry
  
  /-
  info: 6
  -/
  -- #guard_msgs in
  -- #eval maxProfit [3, 3, 5, 0, 0, 3, 1, 4]
  
  /-
  info: 4
  -/
  -- #guard_msgs in
  -- #eval maxProfit [1, 2, 3, 4, 5]
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval maxProfit [7, 6, 4, 3, 1]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

