vc-description: |-
  /-
  Nitika was once reading a history book and wanted to analyze it. So she asked her brother to create a list of names of the various famous personalities in the book. Her brother gave Nitika the list. Nitika was furious when she saw the list. The names of the people were not properly formatted. She doesn't like this and would like to properly format it.
  A name can have at most three parts: first name, middle name and last name. It will have at least one part. The last name is always present. The rules of formatting a name are very simple:
  
  - Only the first letter of each part of the name should be capital.
  - All the parts of the name except the last part should be represented by only two characters. The first character should be the first letter of the part and should be capitalized. The second character should be ".".
  
  Let us look at some examples of formatting according to these rules:
  - gandhi -> Gandhi
  
  - mahatma gandhI -> M. Gandhi 
  - Mohndas KaramChand ganDhi -> M. K. Gandhi 
  
  -----Input-----
  The first line of the input contains an integer T denoting the number of test cases.
  The only line of each test case contains the space separated parts of the name.
  
  -----Output-----
  For each case, output the properly formatted name.
  
  -----Constraints-----
  - 1 ≤ T ≤ 100
  - 2 ≤ Length of each part of the name ≤ 10
  - Each part of the name contains the letters from lower and upper case English alphabets (i.e. from 'a' to 'z', or 'A' to 'Z')
  
  -----Subtasks-----
  Subtask #1 (40 points)
  - There is exactly one part in the name.
  
  Subtask #2 (60 points)
  - Original constraints.
  
  -----Example-----
  Input:
  3
  gandhi
  mahatma gandhI
  Mohndas KaramChand gandhi
  
  Output:
  Gandhi 
  M. Gandhi 
  M. K. Gandhi 
  
  -----Explanation-----
  The examples are already explained in the problem statement.
  -/
  
  -- Result is a string
  
  -- Last part is capitalized original
  
  -- Other parts are initials
  
  -- Result is a string
  
  -- Parts lengths match
  
  -- Initials format
  
  -- Last name is starts with uppercase

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def isValidNamePart (s: String) : Bool :=
    sorry
  
  def formatName (input: List String) : String :=
    sorry
  
  def formatNameStr (input: String) : String :=
    sorry

vc-theorems: |-
  theorem format_name_list_properties {parts: List String}
    (h: ∃ p ∈ parts, isValidNamePart p = true) :
    let result := formatName parts
    let resultParts := result.split (· = ' ')
  
    result.length ≥ 0 ∧
  
    resultParts.getLast! = (parts.getLast!).capitalize ∧
  
    (parts.length > 1 →
      ∀ i < parts.length - 1,
      resultParts[i]! = s!"{(parts[i]!).get 0}.") :=
  sorry
  
  theorem format_name_string_properties {input: String}
    (h: ∃ c ∈ input.data, c.isAlpha) :
    let validParts := (input.split (· = ' ')).filter isValidNamePart
    let result := formatNameStr input
    let resultParts := result.split (· = ' ')
    (validParts.length > 0) →
  
    result.length ≥ 0 ∧
  
    resultParts.length = validParts.length ∧
  
    (validParts.length > 1 →
      ∀ i < validParts.length - 1,
      (resultParts[i]!).endsWith "." ∧
      (resultParts[i]!).length = 2) ∧
  
    (resultParts.getLast!).get 0 ≥ 'A' ∧
    (resultParts.getLast!).get 0 ≤ 'Z' :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
  
  /--
  info: 'Gandhi'
  -/
  #guard_msgs in
  #eval format_name "gandhi"
  
  /--
  info: 'M. Gandhi'
  -/
  #guard_msgs in
  #eval format_name "mahatma gandhI"
  
  /--
  info: 'M. K. Gandhi'
  -/
  #guard_msgs in
  #eval format_name "Mohndas KaramChand gandhi"

