vc-description: |-
  /-
  You are given an array of integers. Your task is to sort odd numbers within the array in ascending order, and even numbers in descending order.

  Note that zero is an even number. If you have an empty array, you need to return it.

  For example:
  ```
  [5, 3, 2, 8, 1, 4]  -->  [1, 3, 8, 4, 5, 2]

  odd numbers ascending:   [1, 3,       5   ]
  even numbers descending: [      8, 4,    2]
  ```
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def sort_array (arr : List Int) : List Int := sorry

  theorem sort_array_preserves_length {arr : List Int} : 
    (sort_array arr).length = arr.length := sorry

vc-theorems: |-
  theorem sort_array_preserves_elements {arr : List Int} :
    âˆ€ x, (List.count x arr) = (List.count x (sort_array arr)) := sorry

  theorem sort_array_empty :
    sort_array [] = [] := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

  /--
  info: [1, 3, 8, 4, 5, 2]
  -/
  #guard_msgs in
  #eval sort_array [5, 3, 2, 8, 1, 4]

  /--
  info: [22, 4, 1, 5, 2, 11, 37, 0]
  -/
  #guard_msgs in
  #eval sort_array [2, 22, 37, 11, 4, 1, 5, 0]

  /--
  info: []
  -/
  #guard_msgs in
  #eval sort_array []

