vc-description: |-
  /-
  Your task is to implement a function that calculates an election winner from a list of voter selections using an [Instant Runoff Voting](http://en.wikipedia.org/wiki/Instant-runoff_voting) algorithm. If you haven't heard of IRV, here's a basic overview (slightly altered for this kata):
  
  - Each voter selects several candidates in order of preference.
  - The votes are tallied from the each voter's first choice.
  - If the first-place candidate has more than half the total votes, they win.
  - Otherwise, find the candidate who got the least votes and remove them from each person's voting list.
  - In case of a tie for least, remove all of the tying candidates.
  - In case of a complete tie between every candidate, return nil(Ruby)/None(Python)/undefined(JS).
  - Start over.
  - Continue until somebody has more than half the votes; they are the winner.
  
  Your function will be given a list of voter ballots; each ballot will be a list of candidates (symbols) in descending order of preference. You should return the symbol corresponding to the winning candidate. See the default test for an example!
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def runoff (voters : List (List Char)) : Option Char := sorry
  
  variable (voters : List (List Char))

vc-theorems: |-
  theorem winner_must_be_candidate (voters : List (List Char)) :
    match runoff voters with
    | none => True 
    | some winner => ∀ voter ∈ voters, winner ∈ voter
    := sorry
  
  theorem voters_not_empty (voters : List (List Char)) :
    match runoff voters with
    | none => True
    | some _ => voters.length > 0 ∧ ∀ voter ∈ voters, voter.length > 0
    := sorry
  
  theorem preserves_input (voters : List (List Char)) :
    let original := voters
    let _ := runoff voters
    voters = original := sorry
  
  /-
  info: 'A'
  -/
  -- #guard_msgs in
  -- #eval runoff [["A", "B", "C"], ["A", "B", "C"], ["B", "C", "A"]]
  
  /-
  info: None
  -/
  -- #guard_msgs in
  -- #eval runoff [["A", "B", "C"], ["B", "C", "A"], ["C", "A", "B"]]
  
  /-
  info: 'A'
  -/
  -- #guard_msgs in
  -- #eval runoff [["A", "B", "C", "D"], ["A", "B", "C", "D"], ["B", "A", "C", "D"], ["C", "D", "A", "B"]]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

