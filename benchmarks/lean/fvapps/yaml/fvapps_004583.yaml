vc-description: |-
  /-
  # Task
   Imagine a white rectangular grid of `n` rows and `m` columns divided into two parts by a diagonal line running from the upper left to the lower right corner. Now let's paint the grid in two colors according to the following rules:
  ```
   A cell is painted black if it has at least one point in common with the diagonal;
  Otherwise, a cell is painted white.
  ```
   Count the number of cells painted black.

  # Example

   For n = 3 and m = 4, the output should be `6`

   There are 6 cells that have at least one common point with the diagonal and therefore are painted black.

   For n = 3 and m = 3, the output should be `7`

   7 cells have at least one common point with the diagonal and are painted black.

  # Input/Output

   - `[input]` integer `n`

     The number of rows.

     Constraints: 1 ≤ n ≤ 10000.

   - `[input]` integer `m`

     The number of columns.

     Constraints: 1 ≤ m ≤ 10000.

   - `[output]` an integer

     The number of black cells.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def count_black_cells (n m : Nat) : Nat := sorry

  theorem count_black_cells_positive (n m : Nat) (hn : n > 0) (hm : m > 0) : 
    count_black_cells n m > 0 := sorry

vc-theorems: |-
  theorem count_black_cells_lower_bound (n m : Nat) (hn : n > 0) (hm : m > 0) :
    count_black_cells n m ≥ n + m - 1 := sorry

  theorem count_black_cells_upper_bound (n m : Nat) (hn : n > 0) (hm : m > 0) :
    count_black_cells n m ≤ n * m := sorry

  theorem count_black_cells_1x1 :
    count_black_cells 1 1 = 1 := sorry

  theorem count_black_cells_symmetry (n m : Nat) (hn : n > 0) (hm : m > 0) :
    count_black_cells n m = count_black_cells m n := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

  /--
  info: 6
  -/
  #guard_msgs in
  #eval count_black_cells 3 4

  /--
  info: 7
  -/
  #guard_msgs in
  #eval count_black_cells 3 3

  /--
  info: 1
  -/
  #guard_msgs in
  #eval count_black_cells 1 1

