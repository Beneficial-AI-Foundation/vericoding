vc-description: |-
  /-
  This function should test if the `factor` is a factor of `base`.

  Return `true` if it is a factor or `false` if it is not.

  ## About factors
  Factors are numbers you can multiply together to get another number.

  2 and 3 are factors of 6 because: `2 * 3 = 6`

  - You can find a factor by dividing numbers. If the remainder is 0 then the number is a factor.
  - You can use the mod operator (`%`) in most languages to check for a remainder

  For example 2 is not a factor of 7 because: `7 % 2 = 1`

  Note: `base` is a non-negative number, `factor` is a positive number.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def check_for_factor (base factor : Nat) : Bool := sorry

  theorem check_for_factor_multiplies_back {base factor : Nat} (h : check_for_factor base factor = true) (h2 : factor > 0) :
    (base / factor) * factor = base := sorry

vc-theorems: |-
  theorem check_for_factor_has_remainder {base factor : Nat} (h : check_for_factor base factor = false) (h2 : factor > 0) :
    base % factor â‰  0 := sorry

  theorem one_always_factor {base : Nat} :
    check_for_factor base 1 = true := sorry

  theorem self_is_factor {base : Nat} (h : base > 0) :
    check_for_factor base base = true := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /--
  info: True
  -/
  #guard_msgs in
  #eval check_for_factor 10 2

  /--
  info: False
  -/
  #guard_msgs in
  #eval check_for_factor 9 2

  /--
  info: True
  -/
  #guard_msgs in
  #eval check_for_factor 24612 3

