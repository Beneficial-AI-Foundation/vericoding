vc-description: |-
  /-
  Given two strings, the first being a random string and the second being the same as the first, but with three added characters somewhere in the string (three same characters),
  
  Write a function that returns the added character
  
  ### E.g
  
  ```
  string1 = "hello"
  string2 = "aaahello"
  
  // => 'a'
  ```
  
  The above is just an example; the characters could be anywhere in the string and string2 is actually **shuffled**.
  
  ### Another example
  
  ```
  string1 = "abcde"
  string2 = "2db2a2ec"
  
  // => '2'
  ```
  
  Note that the added character could also exist in the original string
  
  ```
  string1 = "aabbcc"
  string2 = "aacccbbcc"
  
  // => 'c'
  ```
  
  You can assume that string2 will aways be larger than string1, and there will always be three added characters in string2.
  
  ```if:c
  Write the function `added_char()` that takes two strings and return the added character as described above.
  ```
  
  ```if:javascript
  Write the function `addedChar()` that takes two strings and return the added character as described above.
  ```
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def String.count (s : String) (c : Char) : Nat :=
    sorry
  
  def added_char (base modified : String) : Char :=
    sorry

vc-theorems: |-
  theorem added_char_correct (base : String) (c : Char) :
    let modified := base ++ String.mk (List.replicate 3 c)
    added_char base modified = c :=
  sorry
  
  theorem length_difference (base : String) (c : Char) :
    let modified := base ++ String.mk (List.replicate 3 c)
    modified.length = base.length + 3 :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible
  
  /--
  info: 'c'
  -/
  #guard_msgs in
  #eval added_char "hello" "checlclo"
  
  /--
  info: 'c'
  -/
  #guard_msgs in
  #eval added_char "aabbcc" "aacccbbcc"
  
  /--
  info: '2'
  -/
  #guard_msgs in
  #eval added_char "abcde" "2db2a2ec"

