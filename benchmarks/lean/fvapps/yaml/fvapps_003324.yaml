vc-description: |-
  /-
  The number ```89``` is the first integer with more than one digit that fulfills the property partially introduced in the title of this kata. 
  What's the use of saying "Eureka"? Because this sum gives the same number.
  
  In effect: ```89 = 8^1 + 9^2``` 
  
  The next number in having this property is ```135```.
  
  See this property again: ```135 = 1^1 + 3^2 + 5^3```
  
  We need a function to collect these numbers, that may receive two integers ```a```, ```b``` that defines the range ```[a, b]``` (inclusive) and outputs a list of the sorted numbers in the range that fulfills the property described above.
  
  Let's see some cases:
  ```python
  sum_dig_pow(1, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9]
  
  sum_dig_pow(1, 100) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 89]
  ```
  If there are no numbers of this kind in the range [a, b] the function should output an empty list.
  ```python
  sum_dig_pow(90, 100) == []
  ```
  Enjoy it!!
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def dig_pow (n : Nat) : Nat := sorry
  
  def sum_dig_pow (a b : Nat) : List Nat := sorry

vc-theorems: |-
  theorem dig_pow_nonnegative (n : Nat) : 
    0 ≤ dig_pow n := sorry
  
  theorem dig_pow_is_nat (n : Nat) : 
    dig_pow n = dig_pow n := sorry
  
  theorem sum_dig_pow_elements_in_range (a b : Nat) (h : a ≤ b) :
    ∀ x ∈ sum_dig_pow a b, a ≤ x ∧ x ≤ b := sorry
  
  theorem sum_dig_pow_all_satisfy_dig_pow (a b : Nat) (h : a ≤ b) :
    ∀ x ∈ sum_dig_pow a b, dig_pow x = x := sorry
  
  theorem sum_dig_pow_sorted (a b : Nat) (h : a ≤ b) :
    ∀ i j, i < j → j < (sum_dig_pow a b).length → 
    (sum_dig_pow a b).get ⟨i, sorry⟩ ≤ (sum_dig_pow a b).get ⟨j, sorry⟩ := sorry
  
  theorem sum_dig_pow_single (n : Nat) :
    sum_dig_pow n n = if dig_pow n = n then [n] else [] := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

