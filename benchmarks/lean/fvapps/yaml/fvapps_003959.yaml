vc-description: |-
  /-
  Write a function named `repeater()` that takes two arguments (a string and a number), and returns a new string where the input string is repeated that many times.
  
  ## Example:
  
  should return
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def repeater (s : String) (n : Nat) : String := sorry
  
  theorem repeater_length (s : String) (n : Nat) : 
    (repeater s n).length = s.length * n := sorry

vc-theorems: |-
  theorem repeater_eq_concat (s : String) (n : Nat) :
    repeater s n = String.join (List.replicate n s) := sorry
  
  /- For any non-empty repeater output, we can verify it consists of the original string repeated -/
  
  theorem repeater_validity (s : String) (n : Nat) (h : n > 0) :
    âˆ€ k : Nat, k < n â†’ String.isPrefixOf s (repeater s n) := sorry
  
  theorem repeater_zero (s : String) :
    repeater s 0 = "" := sorry
  
  theorem repeater_one (s : String) :
    repeater s 1 = s := sorry
  
  /-
  info: 'aaaaa'
  -/
  -- #guard_msgs in
  -- #eval repeater "a" 5
  
  /-
  info: 'NaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNa'
  -/
  -- #guard_msgs in
  -- #eval repeater "Na" 16
  
  /-
  info: 'Wub Wub Wub Wub Wub Wub '
  -/
  -- #guard_msgs in
  -- #eval repeater "Wub " 6

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

