vc-description: |-
  /-
  Beaches are filled with sand, water, fish, and sun. Given a string, calculate how many times the words `"Sand"`, `"Water"`, `"Fish"`, and `"Sun"` appear without overlapping (regardless of the case).
  
  ## Examples
  
  ```python
  sum_of_a_beach("WAtErSlIde")                    ==>  1
  sum_of_a_beach("GolDeNSanDyWateRyBeaChSuNN")    ==>  3
  sum_of_a_beach("gOfIshsunesunFiSh")             ==>  4
  sum_of_a_beach("cItYTowNcARShoW")               ==>  0
  ```
  -/
  
  -- Theorem: If a string has no beach words, sum is 0
  
  -- Theorem: Output is always non-negative and bounded by string length

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def sumOfABeach (s : String) : Nat :=
    sorry
  
  def substringExists (s : String) (substr : String) : Bool :=
    sorry

vc-theorems: |-
  theorem no_beach_words (s : String) :
    (¬ substringExists s "sand" ∧ ¬ substringExists s "SAND") →
    (¬ substringExists s "water" ∧ ¬ substringExists s "WATER") →
    (¬ substringExists s "fish" ∧ ¬ substringExists s "FISH") →
    (¬ substringExists s "sun" ∧ ¬ substringExists s "SUN") →
    sumOfABeach s = 0 :=
  sorry
  
  theorem output_range (s : String) :
    sumOfABeach s ≥ 0 ∧ sumOfABeach s ≤ s.length :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded
  
  /--
  info: 1
  -/
  #guard_msgs in
  #eval sum_of_a_beach "WAtErSlIde"
  
  /--
  info: 3
  -/
  #guard_msgs in
  #eval sum_of_a_beach "GolDeNSanDyWateRyBeaChSuNN"
  
  /--
  info: 4
  -/
  #guard_msgs in
  #eval sum_of_a_beach "gOfIshsunesunFiSh"

