vc-description: |-
  /-
  A [Power Law](https://en.wikipedia.org/wiki/Power_law) distribution occurs whenever "a relative change in one quantity results in a proportional relative change in the other quantity." For example, if *y* = 120 when *x* = 1 and *y* = 60 when *x* = 2 (i.e. *y* halves whenever *x* doubles) then when *x* = 4, *y* = 30 and when *x* = 8, *y* = 15.

  Therefore, if I give you any pair of co-ordinates (x1,y1) and (x2,y2) in a power law distribution, you can plot the entire rest of the distribution and tell me the value of *y* for any other value of *x*. 

  Given a pair of co-ordinates (x1,y1) and (x2,y2) and another x co-ordinate *x3*, return the value of *y3*

  ```
  powerLaw(x1y1, x2y2, x3)
  e.g. powerLaw([1,120], [2,60], 4)
  - when x = 1, y = 120
  - when x = 2, y = 60
  - therefore whenever x doubles, y halves
  - therefore when x = 4, y = 60 * 0.5
  - therfore solution = 30
  ```

  (x1,y1) and (x2,y2) will be given as arrays. Answer should be to the nearest integer, but random tests will give you leeway of 1% of the reference solution to account for possible discrepancies from different methods.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def power_law (p1 p2 : List Float) (x3 : Float) : Float := sorry

  theorem power_law_identity (value : Float) (h1 : value ≥ 1) (h2 : value ≤ 100) :
    power_law [value, value] [value, value] value = value := sorry

vc-theorems: |-
  theorem power_law_examples :
    power_law [1, 120] [2, 60] 4 = 30 ∧
    power_law [1, 81] [2, 27] 4 = 9 ∧
    power_law [4, 30] [2, 60] 1 = 120 := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /--
  info: 30
  -/
  #guard_msgs in
  #eval power_law [1, 120] [2, 60] 4

  /--
  info: 9
  -/
  #guard_msgs in
  #eval power_law [1, 81] [2, 27] 4

  /--
  info: 120
  -/
  #guard_msgs in
  #eval power_law [4, 30] [2, 60] 1

