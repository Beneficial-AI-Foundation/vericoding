vc-description: |-
  /-
  ## Task
  
  Implement a function which finds the numbers less than `2`, and the indices of numbers greater than `1` in the given sequence, and returns them as a pair of sequences. 
  
  Return a nested array or a tuple depending on the language:
  
  * The first sequence being only the `1`s and `0`s from the original sequence. 
  * The second sequence being the indexes of the elements greater than `1` in the original sequence.  
  
  ## Examples
  
  ```python
  [ 0, 1, 2, 1, 5, 6, 2, 1, 1, 0 ] => ( [ 0, 1, 1, 1, 1, 0 ], [ 2, 4, 5, 6 ] )
  ```
  
  Please upvote and enjoy!
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def binary_cleaner (seq : List Int) : List Int × List Nat := sorry
  
  theorem binary_cleaner_properties (seq : List Int) :
    let result := binary_cleaner seq
    (∀ x ∈ result.1, x < 2) ∧
    (∀ i ∈ result.2, i < seq.length) ∧
    (List.all result.2 fun i => seq.get! i ≥ 2) ∧
    result.1.length + result.2.length = seq.length := sorry

vc-theorems: |-
  /-
  info: ([0, 1, 1, 0, 1, 1], [2, 5])
  -/
  -- #guard_msgs in
  -- #eval binary_cleaner [0, 1, 2, 1, 0, 2, 1, 1]
  
  /-
  info: ([0, 1, 1, 0], [3])
  -/
  -- #guard_msgs in
  -- #eval binary_cleaner [0, 1, 1, 2, 0]
  
  /-
  info: ([1], [])
  -/
  -- #guard_msgs in
  -- #eval binary_cleaner [1]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

