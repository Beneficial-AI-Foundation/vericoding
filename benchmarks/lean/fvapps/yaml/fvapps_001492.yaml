vc-description: |-
  /-
  Increasing COVID cases have created panic amongst the people of Chefland, so the government is starting to push for production of a vaccine. It has to report to the media about the exact date when vaccines will be available.
  There are two companies which are producing vaccines for COVID. Company A starts producing vaccines on day $D_1$ and it can produce $V_1$ vaccines per day. Company B starts producing vaccines on day $D_2$ and it can produce $V_2$ vaccines per day. Currently, we are on day $1$.
  We need a total of $P$ vaccines. How many days are required to produce enough vaccines? Formally, find the smallest integer $d$ such that we have enough vaccines at the end of the day $d$.

  -----Input-----
  - The first and only line of the input contains five space-separated integers $D_1$, $V_1$, $D_2$, $V_2$ and $P$.

  -----Output-----
  Print a single line containing one integer ― the smallest required number of days.

  -----Constraints-----
  - $1 \le D_1, V_1, D_2, V_2 \le 100$
  - $1 \le P \le 1,000$

  -----Subtasks-----
  Subtask #1 (30 points): $D_1 = D_2$
  Subtask #2 (70 points): original constraints

  -----Example Input 1-----
  1 2 1 3 14

  -----Example Output 1-----
  3

  -----Explanation-----
  Since $D_1 = D_2 = 1$, we can produce $V_1 + V_2 = 5$ vaccines per day. In $3$ days, we produce $15$ vaccines, which satisfies our requirement of $14$ vaccines.

  -----Example Input 2-----
  5 4 2 10 100

  -----Example Output 2-----
  9

  -----Explanation-----
  There are $0$ vaccines produced on the first day, $10$ vaccines produced on each of days $2$, $3$ and $4$, and $14$ vaccines produced on the fifth and each subsequent day. In $9$ days, it makes a total of $0 + 10 \cdot 3 + 14 \cdot 5 = 100$ vaccines.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def find_vaccine_days (d1 v1 d2 v2 p : Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem find_vaccine_days_min_day
    (d1 v1 d2 v2 p : Nat)
    (h1 : d1 > 0) (h2 : v1 > 0) (h3 : d2 > 0) (h4 : v2 > 0) (h5 : p > 0) :
    find_vaccine_days d1 v1 d2 v2 p ≥ min d1 d2 :=
    sorry

  theorem find_vaccine_days_positive 
    (d1 v1 d2 v2 p : Nat)
    (h1 : d1 > 0) (h2 : v1 > 0) (h3 : d2 > 0) (h4 : v2 > 0) (h5 : p > 0) :
    find_vaccine_days d1 v1 d2 v2 p > 0 :=
    sorry

  theorem find_vaccine_days_meets_population
    (d1 v1 d2 v2 p : Nat)
    (h1 : d1 > 0) (h2 : v1 > 0) (h3 : d2 > 0) (h4 : v2 > 0) (h5 : p > 0) :
    let result := find_vaccine_days d1 v1 d2 v2 p 
    let vaccines_per_day := (if result ≥ d1 then v1 else 0) + (if result ≥ d2 then v2 else 0)
    let total_vaccinated := vaccines_per_day * (result - min d1 d2 + 1)
    total_vaccinated ≥ p :=
    sorry

  theorem find_vaccine_days_identical_schedules
    (d v p : Nat)
    (h1 : d > 0) (h2 : v > 0) (h3 : p > 0) :
    find_vaccine_days d v d v p = find_vaccine_days d (2*v) (d+100) 0 p :=
    sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

  /-
  info: 3
  -/
  #guard_msgs in
  #eval find_vaccine_days 1 2 1 3 14

  /-
  info: 9
  -/
  #guard_msgs in
  #eval find_vaccine_days 5 4 2 10 100

  /-
  info: 3
  -/
  #guard_msgs in
  #eval find_vaccine_days 1 1 1 1 5

