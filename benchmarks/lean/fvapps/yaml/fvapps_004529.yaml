vc-description: |-
  /-
  My 5th kata, and 1st in a planned series of rock climbing themed katas.

  In rock climbing ([bouldering](https://en.wikipedia.org/wiki/Bouldering) specifically), the V/Vermin (USA) climbing grades start at `'VB'` (the easiest grade), and then go `'V0'`, `'V0+'`, `'V1'`, `'V2'`, `'V3'`, `'V4'`, `'V5'` etc. up to `'V17'` (the hardest grade). You will be given a `list` (`lst`) of climbing grades and you have to write a function (`sort_grades`) to `return` a `list` of the grades sorted easiest to hardest.

  If the input is an empty `list`, `return` an empty `list`; otherwise the input will always be a valid `list` of one or more grades.

  Please do vote, rank, and provide any feedback on the kata.
  -/

vc-preamble: |-
  def GradeString : Type := String
  deriving Inhabited

  def grade_val (v : GradeString) : Int :=
    sorry

vc-helpers: |

vc-definitions: |-
  def sort_grades (grades : List GradeString) : List GradeString :=
    sorry

vc-theorems: |-
  theorem sort_preserves_size (grades : List GradeString) :
    List.length (sort_grades grades) = List.length grades :=
    sorry

  theorem sort_preserves_elements (grades : List GradeString) (g : GradeString) :
    g ∈ grades ↔ g ∈ sort_grades grades :=
    sorry

  theorem sort_is_ordered (grades : List GradeString) :
    ∀ i : Nat, i + 1 < List.length (sort_grades grades) →
    grade_val (List.get! (sort_grades grades) i) ≤ 
    grade_val (List.get! (sort_grades grades) (i + 1)) :=
    sorry

  theorem empty_list_sort :
    sort_grades [] = [] :=
    sorry

  theorem sort_idempotent (grades : List GradeString) :
    sort_grades (sort_grades grades) = sort_grades grades :=
    sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: []
  -/
  #guard_msgs in
  #eval sort_grades []

  /-
  info: ['VB', 'V0', 'V1', 'V3']
  -/
  #guard_msgs in
  #eval sort_grades ["V1", "VB", "V3", "V0"]

  /-
  info: ['V0+', 'V1', 'V2']
  -/
  #guard_msgs in
  #eval sort_grades ["V0+", "V2", "V1"]

