vc-description: |-
  /-
  # Convert number to reversed array of digits

  Given a random non-negative number, you have to return the digits of this number within an array in reverse order.

  ## Example:

  ```
  348597 => [7,9,5,8,4,3]
  ```
  -/

vc-preamble: |-
  def digitize (n : Nat) : List Nat :=
    sorry

vc-helpers: |

vc-definitions: |-
  def digitsToNat (digits : List Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem digitize_single_digits {n : Nat} :
    ∀ d ∈ digitize n, d ≤ 9 := by
    sorry

  theorem digitize_length_matches_input {n : Nat} :
    (List.length (digitize n)) = String.length (toString n) := by
    sorry

  theorem digitize_reconstruction {n : Nat} :
    n = digitsToNat (List.reverse (digitize n)) := by
    sorry

  theorem digitize_preserves_digits {n : Nat} :
    List.map (fun d => toString d) (digitize n) = 
    (toString n).toList.map toString := by
    sorry

  theorem digitize_zero :
    digitize 0 = [0] := by
    sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

  /-
  info: [1, 3, 2, 5, 3]
  -/
  #guard_msgs in
  #eval digitize 35231

  /-
  info: [7, 5, 3, 2, 8, 5, 3, 2]
  -/
  #guard_msgs in
  #eval digitize 23582357

  /-
  info: [8, 3, 7, 4, 6, 7, 4, 8, 9]
  -/
  #guard_msgs in
  #eval digitize 984764738

