vc-description: |-
  /-
  # Task
   Given a rectangular `matrix` and integers `a` and `b`, consider the union of the ath row and the bth (both 0-based) column of the `matrix`. Return sum of all elements of that union.

  # Example

   For
  ```
  matrix = [[1, 1, 1, 1], 
            [2, 2, 2, 2], 
            [3, 3, 3, 3]]
  a = 1 and b = 3 ```
  the output should be `12`.

   Here `(2 + 2 + 2 + 2) + (1 + 3) = 12`.

  # Input/Output

   - `[input]` 2D integer array `matrix`

      2-dimensional array of integers representing a rectangular matrix.

      Constraints: `1 ≤ matrix.length ≤ 5, 1 ≤ matrix[0].length ≤ 5, 1 ≤ matrix[i][j] ≤ 100.`

   - `[input]` integer `a`

    A non-negative integer less than the number of matrix rows.

     Constraints: `0 ≤ a < matrix.length.`

   - `[input]` integer `b`

     A non-negative integer less than the number of matrix columns.

     Constraints: `0 ≤ b < matrix[i].length. `

   - `[output]` an integer
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def crossing_sum (matrix : List (List Int)) (row col : Nat) : Int :=
    sorry

vc-theorems: |-
  theorem uniform_matrix_crossing_sum
    (rows cols : Nat)
    (val : Int) 
    (matrix : List (List Int))
    (h_rows : rows > 0)
    (h_cols : cols > 0)
    (h_matrix : matrix.length = rows)
    (h_matrix_cols : ∀ row ∈ matrix, row.length = cols)
    (h_uniform : ∀ i j, i < rows → j < cols → 
      (matrix.get! i).get! j = val) :
    ∀ a b, a < rows → b < cols →
      crossing_sum matrix a b = val * (rows + cols - 1) :=
  sorry

  theorem crossing_sum_manual_calc
    (matrix : List (List Int))
    (h_non_empty : matrix.length > 0)
    (h_rectangular : ∀ row ∈ matrix, row.length = (matrix.get! 0).length) :
    ∀ a b, a < matrix.length → b < (matrix.get! 0).length →
      crossing_sum matrix a b = 
        (matrix.get! a).foldl (· + ·) 0 + 
        (matrix.foldl (fun sum row => row.get! b + sum) 0) -
        (matrix.get! a).get! b :=
  sorry

  theorem one_by_one_matrix_crossing_sum
    (matrix : List (List Int))
    (h_size : matrix.length = 1 ∧ (matrix.get! 0).length = 1) :
    crossing_sum matrix 0 0 = (matrix.get! 0).get! 0 :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

  /-
  info: 12
  -/
  #guard_msgs in
  #eval crossing_sum [[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]] 1 3

  /-
  info: 9
  -/
  #guard_msgs in
  #eval crossing_sum [[1, 1], [3, 3], [1, 1], [2, 2]] 3 0

  /-
  info: 100
  -/
  #guard_msgs in
  #eval crossing_sum [[100]] 0 0

