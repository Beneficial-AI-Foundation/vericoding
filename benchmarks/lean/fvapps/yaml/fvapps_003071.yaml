vc-description: |-
  /-
  # Task
  Given an initial string `s`, switch case of the minimal possible number of letters to make the whole string written in the upper case or in the lower case.

  # Input/Output

  `[input]` string `s`

  String of odd length consisting of English letters.

  3 ≤ inputString.length ≤ 99.

  `[output]` a string

  The resulting string.

  # Example

  For `s = "Aba"`, the output should be `"aba"`

  For `s = "ABa"`, the output should be `"ABA"`
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def case_unification (s : String) : String := sorry

  theorem case_unification_preserves_length (s : String) 
    (h : s.length > 0) : 
    (case_unification s).length = s.length := sorry

vc-theorems: |-
  theorem already_upper_stays_upper (s : String)
    (h1 : s.length > 0)
    (h2 : ∀ c ∈ s.data, c.isUpper) :
    case_unification s = s.toUpper := sorry 

  theorem already_lower_stays_lower (s : String)
    (h1 : s.length > 0) 
    (h2 : ∀ c ∈ s.data, c.isLower) :
    case_unification s = s.toLower := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: 'aba'
  -/
  #guard_msgs in
  #eval case_unification "Aba"

  /-
  info: 'ABA'
  -/
  #guard_msgs in
  #eval case_unification "ABa"

  /-
  info: 'asdervt'
  -/
  #guard_msgs in
  #eval case_unification "asdERvT"

