vc-description: |-
  /-
  Given an integer n and an integer start.
  Define an array nums where nums[i] = start + 2*i (0-indexed) and n == nums.length.
  Return the bitwise XOR of all elements of nums.

  Example 1:
  Input: n = 5, start = 0
  Output: 8
  Explanation: Array nums is equal to [0, 2, 4, 6, 8] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8.
  Where "^" corresponds to bitwise XOR operator.

  Example 2:
  Input: n = 4, start = 3
  Output: 8
  Explanation: Array nums is equal to [3, 5, 7, 9] where (3 ^ 5 ^ 7 ^ 9) = 8.
  Example 3:
  Input: n = 1, start = 7
  Output: 7

  Example 4:
  Input: n = 10, start = 5
  Output: 2

  Constraints:

  1 <= n <= 1000
  0 <= start <= 1000
  n == nums.length
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def xorOperation (n: Nat) (start: Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem xorOperation_non_negative (n: Nat) (start: Nat) : 
    xorOperation n start ≥ 0 := 
    sorry

  theorem xorOperation_zero (start: Nat) :
    xorOperation 0 start = 0 :=
    sorry

  theorem xorOperation_one (start: Nat) :
    xorOperation 1 start = start :=
    sorry

  theorem xorOperation_deterministic (n: Nat) (start: Nat) :
    xorOperation n start = xorOperation n start :=
    sorry

  theorem xorOperation_edge_case_zero :
    xorOperation 0 100 = 0 :=
    sorry

  theorem xorOperation_edge_case_one :
    xorOperation 1 5 = 5 :=
    sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

  /--
  info: 8
  -/
  #guard_msgs in
  #eval xor_operation 5 0

  /--
  info: 8
  -/
  #guard_msgs in
  #eval xor_operation 4 3

  /--
  info: 7
  -/
  #guard_msgs in
  #eval xor_operation 1 7

