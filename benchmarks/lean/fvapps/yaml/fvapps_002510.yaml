vc-description: |-
  /-
  =====Function Descriptions=====
  The eval() expression is a very powerful built-in function of Python. It helps in evaluating an expression. The expression can be a Python statement, or a code object.

  For example:
  >>> eval("9 + 5")
  14
  >>> x = 2
  >>> eval("x + 3")
  5

  Here, eval() can also be used to work with Python keywords or defined functions and variables. These would normally be stored as strings.

  For example:
  >>> type(eval("len"))
  <type 'builtin_function_or_method'>

  Without eval()
  >>> type("len")
  <type 'str'>

  =====Problem Statement=====
  You are given an expression in a line. Read that line as a string variable, such as var, and print the result using eval(var).
  NOTE: Python2 users, please import from __future__ import print_function. 

  =====Constraints=====
  Input string is less than 100 characters.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def evaluate_expression (expr : String) (locals : Option (String → Nat) := none) : Nat :=
    sorry

vc-theorems: |-
  theorem arithmetic_addition (a b : Int) :
    evaluate_expression s!"{a} + {b}" = a + b :=
  sorry

  theorem arithmetic_multiplication (a b : Int) :
    evaluate_expression s!"{a} * {b}" = a * b :=
  sorry

  theorem local_variable_access (x : Nat) (locals : String → Nat) :
    locals "x" = x →
    evaluate_expression "x" (some locals) = x :=
  sorry

  theorem local_variable_multiplication (x : Nat) (locals : String → Nat) :
    locals "x" = x →
    evaluate_expression "x * 2" (some locals) = x * 2 :=
  sorry

  theorem builtin_string_length (s : String) (locals : String → Nat) :
    locals "s" = s.length →
    evaluate_expression "len(s)" (some locals) = s.length :=
  sorry

  theorem invalid_expression_raises_error :
    evaluate_expression "2 +" = 0 :=
  sorry

  theorem undefined_variable_raises_error :
    evaluate_expression "undefined_var" = 0 :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /--
  info: 5
  -/
  #guard_msgs in
  #eval evaluate_expression "2 + 3"

  /--
  info: 5
  -/
  #guard_msgs in
  #eval evaluate_expression "len("hello")"

  /--
  info: 20
  -/
  #guard_msgs in
  #eval evaluate_expression "x * 2" {"x": 10}

