vc-description: |-
  /-
  In mathematics, a [Diophantine equation](https://en.wikipedia.org/wiki/Diophantine_equation) is a polynomial equation, usually with two or more unknowns, such that only the integer solutions are sought or studied.

  In this kata we want to find all integers `x, y` (`x >= 0, y >= 0`) solutions of a diophantine equation of the form:
  #### x^(2) - 4 \* y^(2) = n

  (where the unknowns are `x` and `y`, and `n` is a given positive number)
  in decreasing order of the positive xi. 

  If there is no solution return `[]` or `"[]" or ""`. (See "RUN SAMPLE TESTS" for examples of returns).

  ## Examples:

  ```
  solEquaStr(90005) --> "[[45003, 22501], [9003, 4499], [981, 467], [309, 37]]"
  solEquaStr(90002) --> "[]"
  ```

  ## Hint:

  x^(2) - 4 \* y^(2) = (x - 2\*y) \* (x + 2\*y)
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def sol_equa (n : Nat) : List (List Nat) := sorry

  /- The solutions to x² - 4y² = n are well-formed lists of pairs of natural numbers -/

vc-theorems: |-
  theorem sol_equa_well_formed (n : Nat) :
    ∀ result : List (List Nat),
      result = sol_equa n →
      (∀ pair ∈ result, pair.length = 2) := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /- Each solution pair satisfies the equation x² - 4y² = n -/

  theorem sol_equa_satisfies_equation (n : Nat) : 
    ∀ result : List (List Nat),
      result = sol_equa n →
      ∀ pair ∈ result,
        pair.get! 0 * pair.get! 0 - 4 * pair.get! 1 * pair.get! 1 = n := sorry

  /- Solutions contain only positive x values and nonnegative y values -/

  theorem sol_equa_positive_values (n : Nat) :
    ∀ result : List (List Nat),
      result = sol_equa n → 
      ∀ pair ∈ result,
        pair.get! 0 > 0 ∧ pair.get! 1 ≥ 0 := sorry

  /- Solutions are ordered by descending x values -/

  theorem sol_equa_ordered (n : Nat) :
    ∀ result : List (List Nat),
      result = sol_equa n →
      ∀ i < result.length - 1,
        (result.get! i).get! 0 > (result.get! (i+1)).get! 0 := sorry

  /- For n = 90002, there are no solutions -/

  theorem sol_equa_90002_empty :
    sol_equa 90002 = [] := sorry

  /- For n = 5, there is exactly one solution: [[3,1]] -/

  theorem sol_equa_5_single :
    sol_equa 5 = [[3,1]] := sorry

  /-
  info: [[3, 1]]
  -/
  #guard_msgs in
  #eval sol_equa 5

  /-
  info: [[45003, 22501], [9003, 4499], [981, 467], [309, 37]]
  -/
  #guard_msgs in
  #eval sol_equa 90005

  /-
  info: []
  -/
  #guard_msgs in
  #eval sol_equa 90002

