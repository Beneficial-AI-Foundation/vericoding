vc-description: |-
  /-
  Given an integer num, find the closest two integers in absolute difference whose product equals num + 1 or num + 2.
  Return the two integers in any order.

  Example 1:
  Input: num = 8
  Output: [3,3]
  Explanation: For num + 1 = 9, the closest divisors are 3 & 3, for num + 2 = 10, the closest divisors are 2 & 5, hence 3 & 3 is chosen.

  Example 2:
  Input: num = 123
  Output: [5,25]

  Example 3:
  Input: num = 999
  Output: [40,25]

  Constraints:

  1 <= num <= 10^9
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def closestDivisors (n : Nat) : Nat × Nat := sorry

  def find_divisors (n : Nat) : List (Nat × Nat) := sorry

vc-theorems: |-
  theorem closestDivisors_returns_valid_factors (n : Nat) (h : n > 0) :
    let result := closestDivisors n
    result.1 ≤ result.2 ∧ 
    (result.1 * result.2 = n + 1 ∨ result.1 * result.2 = n + 2) := sorry

  theorem closestDivisors_finds_minimum_difference (n : Nat) (h : n > 0) :
    let result := closestDivisors n
    let diff := result.2 - result.1
    ∀ pair : Nat × Nat,
      pair ∈ find_divisors (n + 1) ∨ pair ∈ find_divisors (n + 2) →
      diff ≤ pair.2 - pair.1 := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

  /--
  info: [3, 3]
  -/
  #guard_msgs in
  #eval closestDivisors 8

  /--
  info: [5, 25]
  -/
  #guard_msgs in
  #eval closestDivisors 123

  /--
  info: sorted([25, 40])
  -/
  #guard_msgs in
  #eval sorted closestDivisors(999)

