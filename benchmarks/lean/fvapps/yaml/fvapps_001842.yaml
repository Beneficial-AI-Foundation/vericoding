vc-description: |-
  /-
  You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].
  
  Example:
  
  Input: [5,2,6,1]
  Output: [2,1,1,0] 
  Explanation:
  To the right of 5 there are 2 smaller elements (2 and 1).
  To the right of 2 there is only 1 smaller element (1).
  To the right of 6 there is 1 smaller element (1).
  To the right of 1 there is 0 smaller element.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def count_smaller (nums : List Int) : List Int := sorry
  
  theorem count_smaller_length {nums : List Int} (h : nums ≠ []) :
    (count_smaller nums).length = nums.length := sorry

vc-theorems: |-
  theorem count_smaller_range {nums : List Int} (h : nums ≠ []) :
    ∀ x ∈ count_smaller nums, 0 ≤ x ∧ x < nums.length := sorry
  
  theorem count_smaller_sorted {nums : List Int} (h : nums ≠ []) :
    (nums.zip (nums.tail?.getD [])).all (fun (a, b) => a ≤ b) → 
    count_smaller nums = List.replicate nums.length 0 := sorry
  
  theorem count_smaller_duplicates {nums : List Int} (h : nums ≠ []) :
    (count_smaller (nums ++ nums)).length = 2 * nums.length := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible

