vc-description: |-
  /-
  Given a list of unique words. Find all pairs of distinct indices (i, j) in the given list so that the concatenation of the two words, i.e. words[i] + words[j] is a palindrome.

  Examples:

  Non-string inputs should be converted to strings.

  Return an array of arrays containing pairs of distinct indices that form palindromes. Pairs should be returned in the order they appear in the original list.
  -/

vc-preamble: |-
  def palindrome (s : String) : Bool :=
  sorry

  def isPalindromePair (s1 s2 : String) : Bool :=
  sorry

vc-helpers: |

vc-definitions: |-
  def palindromePairs (words : List String) : List (Nat × Nat) :=
  sorry

vc-theorems: |-
  theorem palindrome_pairs_valid_indices 
    (words : List String) (result : List (Nat × Nat)) 
    (h : result = palindromePairs words) :
    ∀ pair, pair ∈ result →
      pair.1 < words.length ∧ 
      pair.2 < words.length ∧
      pair.1 ≠ pair.2 :=
  sorry

  theorem palindrome_pairs_forms_palindrome
    (words : List String) (result : List (Nat × Nat))
    (h : result = palindromePairs words) :
    ∀ pair, pair ∈ result →
      palindrome (words[pair.1]! ++ words[pair.2]!) :=
  sorry

  theorem palindrome_pairs_complete
    (words : List String) (result : List (Nat × Nat))
    (h : result = palindromePairs words) :
    ∀ i j, i < words.length → j < words.length → i ≠ j →
      palindrome (words[i]! ++ words[j]!) →
      (i,j) ∈ result :=
  sorry

  theorem palindrome_pairs_unique
    (words : List String) (result : List (Nat × Nat))
    (h : result = palindromePairs words) :
    ∀ p1 p2, p1 ∈ result → p2 ∈ result → p1 = p2 ∨ p1.1 ≠ p2.1 ∨ p1.2 ≠ p2.2 :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: [[0, 1], [1, 0]]
  -/
  #guard_msgs in
  #eval palindrome_pairs ["bat", "tab", "cat"]

  /-
  info: [[0, 3], [2, 4], [3, 0], [4, 2]]
  -/
  #guard_msgs in
  #eval palindrome_pairs ["dog", "cow", "tap", "god", "pat"]

  /-
  info: [[0, 4], [1, 2], [2, 1]]
  -/
  #guard_msgs in
  #eval palindrome_pairs [5777, "dog", "god", True, 75]

