vc-description: |-
  /-
  In this Kata, you will be given a string and your task is to determine if that string can be a palindrome if we rotate one or more characters to the left.
  
  ```Haskell
  solve("4455") = true, because after 1 rotation, we get "5445" which is a palindrome
  solve("zazcbaabc") = true, because after 3 rotations, we get "abczazcba", a palindrome
  ```
  
  More examples in test cases. Input will be strings of lowercase letters or numbers only.
  
  Good luck!
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def solve (s : String) : Bool := sorry
  
  def reverse (s : String) : String := sorry

vc-theorems: |-
  theorem solve_returns_bool (s : String) : 
    solve s = true ∨ solve s = false := sorry
  
  theorem empty_or_single_char_is_palindrome (s : String) :
    s.length ≤ 1 → solve s = true := sorry
  
  theorem palindrome_concat_is_palindrome (s : String) :
    let palindrome := s ++ reverse s
    solve palindrome = true := sorry
  
  theorem same_chars_is_palindrome (s : String) (n : Nat) :
    let same_chars := String.mk (List.replicate n 'a')
    solve same_chars = true := sorry
  
  theorem palindrome_stays_after_rotation (s : String) :
    s.length ≥ 2 →
    solve s = true →
    let rotated := (s.drop 1) ++ (s.take 1)
    solve rotated = true := sorry
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval solve "4455"
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval solve "zazcbaabc"
  
  /-
  info: False
  -/
  -- #guard_msgs in
  -- #eval solve "aaab"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

