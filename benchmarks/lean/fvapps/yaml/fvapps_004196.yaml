vc-description: |-
  /-
  # Task

  Given an array of integers, sum consecutive even numbers and consecutive odd numbers. Repeat the process while it can be done and return the length of the final array.

  # Example

  For `arr = [2, 1, 2, 2, 6, 5, 0, 2, 0, 5, 5, 7, 7, 4, 3, 3, 9]`

  The result should be `6`.

  ```
  [2, 1, 2, 2, 6, 5, 0, 2, 0, 5, 5, 7, 7, 4, 3, 3, 9]  -->
           2+2+6       0+2+0     5+5+7+7       3+3+9
  [2, 1,   10,    5,    2,        24,     4,   15   ] -->
                                 2+24+4
  [2, 1,   10,    5,             30,           15   ]
  The length of final array is 6
  ```

  # Input/Output

  - `[input]` integer array `arr`

    A non-empty array, 

    `1 ≤ arr.length ≤ 1000`

    `0 ≤ arr[i] ≤ 1000`

  - `[output]` an integer

    The length of the final array
  -/

vc-preamble: |-
  def sumGroups (arr : List Int) : Int := sorry

  def getNextArr (arr : List Int) : List Int := sorry

vc-helpers: |

vc-definitions: |-
  def countAlternatingParity (arr : List Int) : Nat := sorry

  theorem sum_groups_returns_positive : 
    ∀ (arr : List Int), arr ≠ [] → 0 < sumGroups arr := sorry

vc-theorems: |-
  theorem sum_groups_alternating_parity_bound :
    ∀ (arr : List Int), arr ≠ [] → 
    sumGroups arr ≤ countAlternatingParity arr := sorry

  theorem sum_groups_monotonic_reduction :
    ∀ (arr : List Int), arr ≠ [] →
    ∀ (next : List Int), next = getNextArr arr →
    next ≠ arr →
    List.length next ≤ List.length arr := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

  /-
  info: 6
  -/
  #guard_msgs in
  #eval sum_groups [2, 1, 2, 2, 6, 5, 0, 2, 0, 5, 5, 7, 7, 4, 3, 3, 9]

  /-
  info: 5
  -/
  #guard_msgs in
  #eval sum_groups [2, 1, 2, 2, 6, 5, 0, 2, 0, 3, 3, 3, 9, 2]

  /-
  info: 1
  -/
  #guard_msgs in
  #eval sum_groups [1, 1, 2, 2]

