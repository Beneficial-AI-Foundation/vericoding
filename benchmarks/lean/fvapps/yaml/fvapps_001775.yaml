vc-description: |-
  /-
  You are given a series of video clips from a sporting event that lasted T seconds.  These video clips can be overlapping with each other and have varied lengths.
  Each video clip clips[i] is an interval: it starts at time clips[i][0] and ends at time clips[i][1].  We can cut these clips into segments freely: for example, a clip [0, 7] can be cut into segments [0, 1] + [1, 3] + [3, 7].
  Return the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event ([0, T]).  If the task is impossible, return -1.
  
  Example 1:
  Input: clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], T = 10
  Output: 3
  Explanation: 
  We take the clips [0,2], [8,10], [1,9]; a total of 3 clips.
  Then, we can reconstruct the sporting event as follows:
  We cut [1,9] into segments [1,2] + [2,8] + [8,9].
  Now we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10].
  
  Example 2:
  Input: clips = [[0,1],[1,2]], T = 5
  Output: -1
  Explanation: 
  We can't cover [0,5] with only [0,1] and [1,2].
  
  Example 3:
  Input: clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], T = 9
  Output: 3
  Explanation: 
  We can take clips [0,4], [4,7], and [6,9].
  
  Example 4:
  Input: clips = [[0,4],[2,8]], T = 5
  Output: 2
  Explanation: 
  Notice you can have extra video after the event ends.
  
  Constraints:
  
  1 <= clips.length <= 100
  0 <= clips[i][0] <= clips[i][1] <= 100
  0 <= T <= 100
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def videoStitching (clips : List (List Nat)) (T : Nat) : Int :=
    sorry
  
  -- Property 1: If target is beyond max end point, result must be -1

vc-theorems: |-
  theorem target_beyond_max_end {clips : List (List Nat)} (h : clips ≠ []) :
    let maxEnd := List.foldl (fun acc clip => max acc (clip.get! 1)) 0 clips
    videoStitching clips (maxEnd + 1) = -1 := 
    sorry
  
  -- Property 2: Order of clips doesn't matter
  
  theorem order_invariant (clips : List (List Nat)) (T : Nat) :
    videoStitching clips T = videoStitching clips.reverse T :=
    sorry
  
  -- Property 3: Result is either -1 or positive
  
  theorem result_range (clips : List (List Nat)) (T : Nat) :
    videoStitching clips T ≥ -1 :=
    sorry
  
  -- Property 4: If result is positive, it must be less than or equal to number of clips
  
  theorem positive_result_bound (clips : List (List Nat)) (T : Nat) :
    videoStitching clips T > 0 → videoStitching clips T ≤ clips.length :=
    sorry
  
  /-
  info: 3
  -/
  -- #guard_msgs in
  -- #eval video_stitching [[0, 2], [4, 6], [8, 10], [1, 9], [1, 5], [5, 9]] 10
  
  /-
  info: -1
  -/
  -- #guard_msgs in
  -- #eval video_stitching [[0, 1], [1, 2]] 5
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval video_stitching [[0, 4], [2, 8]] 5

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

