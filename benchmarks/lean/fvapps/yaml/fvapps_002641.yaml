vc-description: |-
  /-
  ### Background

  We **all** know about "balancing parentheses" (plus brackets, braces and chevrons) and even balancing characters that are identical.  

  Read that last sentence again, I balanced different characters and identical characters twice and you didn't even notice... :)

  ### Kata
  Your challenge in this kata is to write a piece of code to validate that a supplied string is balanced.

  You must determine if all that is open is then closed, and nothing is closed which is not already open!

  You will be given a string to validate, and a second string, where each pair of characters defines an opening and closing sequence that needs balancing.

  You may assume that the second string always has an even number of characters.

  ### Example
  ```python
  # In this case '(' opens a section, and ')' closes a section
  is_balanced("(Sensei says yes!)", "()")       # => True
  is_balanced("(Sensei says no!", "()")         # => False

  # In this case '(' and '[' open a section, while ')' and ']' close a section
  is_balanced("(Sensei [says] yes!)", "()[]")   # => True
  is_balanced("(Sensei [says) no!]", "()[]")    # => False

  # In this case a single quote (') both opens and closes a section
  is_balanced("Sensei says 'yes'!", "''")       # => True
  is_balanced("Sensei say's no!", "''")         # => False
  ```
  -/

vc-preamble: |-
  def count_char (s : String) (c : Char) : Nat := sorry

  def take_prefix (s : String) (n : Nat) : String := sorry

vc-helpers: |

vc-definitions: |-
  def is_balanced (s : String) (caps : String) : Bool := sorry

  theorem single_char_caps_balance
    (s : String)
    (h : s.length > 0) :
    is_balanced s "xx" = ((count_char s 'x') % 2 = 0) := sorry

vc-theorems: |-
  theorem empty_caps_always_balanced
    (s : String) :
    is_balanced s "" = true := sorry

  theorem standard_parens_properties
    (s : String)
    (h : is_balanced s "()") :
    (count_char s '(' = count_char s ')') ∧ 
    ∀ (p : Nat), p ≤ s.length → 
      count_char (take_prefix s p) '(' ≥ count_char (take_prefix s p) ')' := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: True
  -/
  #guard_msgs in
  #eval is_balanced "(Sensei says yes!)" "()"

  /-
  info: False
  -/
  #guard_msgs in
  #eval is_balanced "(Sensei says no!" "()"

  /-
  info: True
  -/
  #guard_msgs in
  #eval is_balanced "-Hello Mother can you hear me?-" "--"

