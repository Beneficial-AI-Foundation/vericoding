vc-description: |-
  /-
  A boomerang is a set of 3 points that are all distinct and not in a straight line.
  Given a list of three points in the plane, return whether these points are a boomerang.

  Example 1:
  Input: [[1,1],[2,3],[3,2]]
  Output: true

  Example 2:
  Input: [[1,1],[2,2],[3,3]]
  Output: false

  Note:

  points.length == 3
  points[i].length == 2
  0 <= points[i][j] <= 100
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def isBoomerang (points: List (List Int)) : Bool := sorry

  def areCollinear (p1 p2 p3: List Int) : Bool :=
    (p2.get! 1 - p1.get! 1) * (p3.get! 0 - p1.get! 0) == 
    (p3.get! 1 - p1.get! 1) * (p2.get! 0 - p1.get! 0)

vc-theorems: |-
  theorem boomerang_collinear_points 
    (points: List (List Int))
    (h1: points.length = 3)
    (h2: ∀ p ∈ points, p.length = 2) :
    areCollinear (points.get! 0) (points.get! 1) (points.get! 2) = true →
    isBoomerang points = false := sorry

  theorem boomerang_non_collinear_points
    (points: List (List Int)) 
    (h1: points.length = 3)
    (h2: ∀ p ∈ points, p.length = 2) :
    areCollinear (points.get! 0) (points.get! 1) (points.get! 2) = false →
    isBoomerang points = true := sorry

  theorem boomerang_symmetric
    (points: List (List Int))
    (h1: points.length = 3)
    (h2: ∀ p ∈ points, p.length = 2) :
    isBoomerang points = isBoomerang [points.get! 1, points.get! 2, points.get! 0] := sorry

  theorem boomerang_duplicate_points
    (points: List (List Int))
    (h1: points.length = 3)
    (h2: ∀ p ∈ points, p.length = 2)
    (h3: points.get! 0 = points.get! 1) :
    isBoomerang points = false := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: True
  -/
  #guard_msgs in
  #eval isBoomerang [[1, 1], [2, 3], [3, 2]]

  /-
  info: False
  -/
  #guard_msgs in
  #eval isBoomerang [[1, 1], [2, 2], [3, 3]]

  /-
  info: True
  -/
  #guard_msgs in
  #eval isBoomerang [[0, 0], [1, 1], [1, 0]]

