vc-description: |-
  /-
  Shaun is very much interested in Subarrays. Shaun wants to count the number of subarrays in his chosen array with sum being a multiple of $10^9$. Since, Shaun is interested in huge numbers.He chose his array such that it contains only $10^8$ and $9*10^8$ as its elements.
  Help shaun to count the number of required subarrays.

  -----Input:-----
  - First line will contain $T$, number of testcases. Then the testcases follow. 
  - First line of each testcase contains one integer $N$,size of array $A$. 
  - Second line of each testcase contains $N$ space separated array elements

  -----Output:-----
  For each testcase, output in a single line number of subarrays with sum being multiple of $10^9$.

  -----Constraints-----
  - $1 \leq T \leq 10$
  - $1 \leq N \leq 10^5$
  - $A[i]$=$10^8$ , $9*10^8$

  -----Sample Input:-----
  2
  3
  100000000 900000000 100000000
  1
  900000000

  -----Sample Output:-----
  2
  0
  -/

vc-preamble: |-
  def solve_subarrays (n : Nat) (arr : List Nat) : Nat :=
  sorry

vc-helpers: |

vc-definitions: |-
  def count_valid_subarrays (n : Nat) (arr : List Nat) : Nat :=
  sorry

vc-theorems: |-
  theorem solve_subarrays_singleton (x : Nat) :
    solve_subarrays 1 [x] = 0 :=
  sorry

  theorem solve_subarrays_alternating_nonneg (n : Nat) :
    let arr := List.replicate (2*n) 100000000 ++ List.replicate (2*n) 900000000
    solve_subarrays (4*n) arr â‰¥ 0 :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible

  /-
  info: 2
  -/
  #guard_msgs in
  #eval solve_subarrays 3 [100000000, 900000000, 100000000]

  /-
  info: 0
  -/
  #guard_msgs in
  #eval solve_subarrays 1 [900000000]

  /-
  info: 0
  -/
  #guard_msgs in
  #eval solve_subarrays 2 [100000000, 100000000]

