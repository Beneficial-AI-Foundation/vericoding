vc-description: |-
  /-
  Maya writes weekly articles to a well known magazine, but she is missing one word each time she is about to send the article to the editor. The article is not complete without this word. Maya has a friend, Dan, and he is very good with words, but he doesn't like to just give them away. He texts Maya a number and she needs to find out the hidden word. 
  The words can contain only the letter: "a", "b", "d", "e", "i", "l", "m", "n", "o", and "t".
  
  Luckily, Maya has the key:
  
  "a" - 6
  "b" - 1 
  "d" - 7
  "e" - 4
  "i" - 3
  "l" - 2
  "m" - 9
  "n" - 8
  "o" - 0
  "t" - 5
  
  You can help Maya by writing a function that will take a number between 100 and 999999 and return a string with the word. 
  
  The input is always a number, contains only the numbers in the key. 
  The output should be always a string with one word, all lowercase.
  
  Maya won't forget to thank you at the end of her article :)
  -/

vc-preamble: |-
  def hidden (n : Nat) : String := sorry
  
  theorem hidden_length_matches_input {n : Nat} :
    (toString n).length = (hidden n).length := sorry

vc-helpers: |-

vc-definitions: |-
  def hidden_withInt (n : Int) : String := sorry
  
  theorem hidden_rejects_negative (n : Int) :
    n < 0 → hidden_withInt n = "" := sorry

vc-theorems: |-
  theorem hidden_valid_chars {n : Nat} {c : Char} :
    c ∈ (hidden n).data → c ∈ ['o', 'b', 'l', 'i', 'e', 'a', 't', 'd', 'n', 'm'] := sorry
  
  theorem hidden_consistent_mapping {n₁ n₂ : Nat} {i : Nat} {pos1 : String.Pos} {pos2 : String.Pos} :
    i < min (toString n₁).length (toString n₂).length →
    (toString n₁).get pos1 = (toString n₂).get pos2 →
    (hidden n₁).get pos1 = (hidden n₂).get pos2 := sorry
  
  /-
  info: 'aid'
  -/
  -- #guard_msgs in
  -- #eval hidden 637
  
  /-
  info: 'dean'
  -/
  -- #guard_msgs in
  -- #eval hidden 7468
  
  /-
  info: 'email'
  -/
  -- #guard_msgs in
  -- #eval hidden 49632

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

