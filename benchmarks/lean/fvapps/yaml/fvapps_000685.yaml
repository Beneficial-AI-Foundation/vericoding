vc-description: |-
  /-
  Eugene has to do his homework. But today, he is feeling very lazy and wants to you do his homework. His homework has the following given maths problem.
  You are given three integers: A, N, M. You write the number A appended to itself N times in a row. Let's call the resulting big number X. For example, if A = 120, N = 3, then X will be 120120120. Find out the value of X modulo M.
  
  -----Input-----
  The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follow.
  Each test case is described in one line containing three integers: A, N and M as described in the problem statement.
  
  -----Output-----
  For each test case, output a single line containing an integer denoting the value of X modulo M.
  
  -----Constraints-----
  - 1 ≤ T ≤ 105
  - 0 ≤ A ≤ 109
  - 1 ≤ N ≤ 1012
  - 2 ≤ M ≤ 109
  
  -----Subtasks-----
  Subtask #1 (15 points):
  - 0 ≤ A ≤ 100
  - 1 ≤ N ≤ 105
  
  Subtask #2 (25 points):
  - 1 ≤ N ≤ 109
  
  Subtask #3 (60 points):
  - Original constraints
  
  -----Example-----
  Input:
  2
  12 2 17
  523 3 11
  
  Output:
  5
  6
  
  -----Explanation-----
  Example 1: As A = 12, N = 2, X = 1212, 1212 modulo 17 = 5
  Example 2. As A = 523, N = 3, X = 523523523, 523523523 modulo 11 = 6
  -/

vc-preamble: |-
  def solveEugeneHomework (a n m : Nat) : Nat :=
    sorry

vc-helpers: |-

vc-definitions: |-
  def repeatedNum (a n : Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem solve_eugene_homework_range (a n m : Nat) 
    (ha : 1 ≤ a ∧ a ≤ 10^9)
    (hn : 1 ≤ n ∧ n ≤ 100) 
    (hm : 2 ≤ m ∧ m ≤ 10^9) :
    let result := solveEugeneHomework a n m
    0 ≤ result ∧ result < m :=
  sorry
  
  theorem solve_eugene_homework_correct (a n m : Nat)
    (ha : 1 ≤ a ∧ a ≤ 10^9)
    (hn : 1 ≤ n ∧ n ≤ 100)
    (hm : 2 ≤ m ∧ m ≤ 10^9) :
    solveEugeneHomework a n m = repeatedNum a n % m :=
  sorry
  
  theorem modulo_one_is_zero (a n : Nat)
    (ha : 1 ≤ a ∧ a ≤ 10^6)
    (hn : 1 ≤ n ∧ n ≤ 100) :
    solveEugeneHomework a n 1 = 0 :=
  sorry
  
  theorem single_repeat (a m : Nat)
    (ha : 1 ≤ a ∧ a ≤ 10^6)
    (hm : 2 ≤ m ∧ m ≤ 10^6) :
    solveEugeneHomework a 1 m = a % m :=
  sorry
  
  /-
  info: 5
  -/
  -- #guard_msgs in
  -- #eval solve_eugene_homework 12 2 17
  
  /-
  info: 6
  -/
  -- #guard_msgs in
  -- #eval solve_eugene_homework 523 3 11
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval solve_eugene_homework 1000 3 7

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

