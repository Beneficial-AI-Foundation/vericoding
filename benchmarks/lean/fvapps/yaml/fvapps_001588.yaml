vc-description: |-
  /-
  This is a very simply formulated task. Let's call an integer number `N` 'green' if `N²` ends with all of the digits of `N`. Some examples:

  `5` is green, because `5² = 25` and `25` ends with `5`.

  `11` is not green, because `11² = 121` and `121` does not end with `11`.

  `376` is green, because `376² = 141376` and `141376` ends with `376`.

  Your task is to write a function `green` that returns `n`th green number, starting with `1` - `green (1) == 1`

  ---

  ## Data range

  ```if:haskell
  `n <= 4000` for Haskell
  ```
  ```if:java
  `n <= 5000` for Java
  ```
  ```if:python
  `n <= 5000` for Python
  ```
  ```if:javascript
  `n <= 3000` for JavaScript

  Return values should be `String`s, and should be exact. A BigNum library is recommended.
  ```
  -/

vc-preamble: |-
  def green (n : Nat) : Nat :=
    sorry

  def first_5_green_numbers (n : Nat) (h : n > 0 ∧ n ≤ 5) : 
    green n = match n with
      | 1 => 1
      | 2 => 5  
      | 3 => 6
      | 4 => 25
      | 5 => 76
      | _ => 0 :=
    sorry

  def green_number_positive (n : Nat) (h : n > 0) :
    green n > 0 :=
    sorry

  def green_numbers_ordered (n : Nat) (h : n > 1) :
    green n > green (n-1) :=
    sorry

vc-helpers: |

vc-definitions: |-
  def green_numbers_unique (n m : Nat) (h1 : n > 0) (h2 : m > 0) (h3 : n ≠ m) :
    green n ≠ green m :=
    sorry

vc-theorems: |

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

  /-
  info: 1
  -/
  #guard_msgs in
  #eval green 1

  /-
  info: 5
  -/
  #guard_msgs in
  #eval green 2

  /-
  info: 76
  -/
  #guard_msgs in
  #eval green 5

