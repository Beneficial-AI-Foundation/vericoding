vc-description: |-
  /-
  You receive the name of a city as a string, and you need to return a string that shows how many times each letter shows up in the string by using an asterisk (`*`).

  For example:

  ```
  "Chicago"  -->  "c:**,h:*,i:*,a:*,g:*,o:*"
  ```

  As you can see, the letter `c` is shown only once, but with 2 asterisks.

  The return string should include **only the letters** (not the dashes, spaces, apostrophes, etc). There should be no spaces in the output, and the different letters are separated by a comma (`,`) as seen in the example above.

  Note that the return string must list the letters in order of their first appearence in the original string.

  More examples:
  ```
  "Bangkok"    -->  "b:*,a:*,n:*,g:*,k:**,o:*"
  "Las Vegas"  -->  "l:*,a:**,s:**,v:*,e:*,g:*"
  ```

  Have fun! ;)
  -/

vc-preamble: |-
  def get_strings (s : String) : String := sorry

  def is_alpha (c : Char) : Bool := sorry

  def to_lower (c : Char) : Char := sorry

  structure SegmentInfo where
    letter : Char
    stars : String

vc-helpers: |

vc-definitions: |-
  def parse_segment (s : String) : Option SegmentInfo := sorry

  theorem get_strings_format_valid (s : String) (h : s ≠ "") :
    let result := get_strings s
    let segments := result.splitOn ","
    ∀ part ∈ segments,
    part ≠ "" →
    match parse_segment part with
    | some info => 
      is_alpha info.letter ∧ 
      ∀ c ∈ info.stars.data, c = '*'
    | none => False := sorry

vc-theorems: |-
  theorem get_strings_count_matches_freq (s : String) (h : s ≠ "") :
    let result := get_strings s
    let segments := result.splitOn "," |>.filter (·≠ "")
    ∀ seg ∈ segments,
    match parse_segment seg with
    | some info =>
      let count := s.data.filter (fun c => to_lower c = to_lower info.letter) |>.length
      info.stars.length = count
    | none => False := sorry

  theorem get_strings_empty :
    get_strings "" = "" := sorry

  theorem get_strings_example :
    get_strings "Chicago" = "c:**,h:*,i:*,a:*,g:*,o:*" := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: 'c:**,h:*,i:*,a:*,g:*,o:*'
  -/
  #guard_msgs in
  #eval get_strings "Chicago"

  /-
  info: 'b:*,a:*,n:*,g:*,k:**,o:*'
  -/
  #guard_msgs in
  #eval get_strings "Bangkok"

  /-
  info: 'l:*,a:**,s:**,v:*,e:*,g:*'
  -/
  #guard_msgs in
  #eval get_strings "Las Vegas"

