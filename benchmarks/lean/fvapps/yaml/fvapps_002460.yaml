vc-description: |-
  /-
  =====Function Descriptions=====
  Concatenate
  
  Two or more arrays can be concatenated together using the concatenate function with a tuple of the arrays to be joined:
  
  import numpy
  
  array_1 = numpy.array([1,2,3])
  array_2 = numpy.array([4,5,6])
  array_3 = numpy.array([7,8,9])
  
  print numpy.concatenate((array_1, array_2, array_3))    
  
  #Output
  [1 2 3 4 5 6 7 8 9]
  
  If an array has more than one dimension, it is possible to specify the axis along which multiple arrays are concatenated. By default, it is along the first dimension.
  
  import numpy
  
  array_1 = numpy.array([[1,2,3],[0,0,0]])
  array_2 = numpy.array([[0,0,0],[7,8,9]])
  
  print numpy.concatenate((array_1, array_2), axis = 1)   
  
  #Output
  [[1 2 3 0 0 0]
   [0 0 0 7 8 9]]    
  
  =====Problem Statement=====
  You are given two integer arrays of size NXP and MXP (N & M are rows, and P is the column). Your task is to concatenate the arrays along axis 0.
  
  =====Input Format=====
  The first line contains space separated integers N, M and P .
  The next N lines contains the space separated elements of the P columns.
  After that, the next M lines contains the space separated elements of the P columns.
  
  =====Output Format=====
  Print the concatenated array of size (N + M)XP.
  -/

vc-preamble: |-
  def Array.shape (a : Array (Array α)) : Nat × Nat :=
    sorry

vc-helpers: |-

vc-definitions: |-
  def concatenate_arrays {α : Type} (n m p : Nat) (array1 array2 : Array (Array α)) : 
    Array (Array α) :=
    sorry

vc-theorems: |-
  theorem concatenate_arrays_shape (n m p : Nat) (array1 array2 : Array (Array α)) :
    (concatenate_arrays n m p array1 array2).shape = (n + m, p) :=
    sorry
  
  theorem concatenate_arrays_preserves_first (n m p : Nat) (array1 array2 : Array (Array α)) :
    ∀ i < n, (concatenate_arrays n m p array1 array2)[i]! = array1[i]! :=
    sorry
  
  theorem concatenate_arrays_preserves_second (n m p : Nat) (array1 array2 : Array (Array α)) :
    ∀ i < m, (concatenate_arrays n m p array1 array2)[n + i]! = array2[i]! :=
    sorry
  
  theorem concatenate_arrays_singleton (n p : Nat) (value : α) 
    (array1 : Array (Array α)) (array2 : Array (Array α)) :
    array2.size = 1 → 
    (∀ i < n, (array1[i]!).size = p) →
    (array2[0]!).size = p →
    (concatenate_arrays n 1 p array1 array2).shape = (n + 1, p) :=
    sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

