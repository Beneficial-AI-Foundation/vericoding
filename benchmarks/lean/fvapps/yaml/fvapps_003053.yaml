vc-description: |-
  /-
  The marketing team is spending way too much time typing in hashtags.   
  Let's help them with our own Hashtag Generator!

  Here's the deal:

  - It must start with a hashtag (`#`).
  - All words must have their first letter capitalized.
  - If the final result is longer than 140 chars it must return `false`.
  - If the input or the result is an empty string it must return `false`.

  ## Examples

  ```
  " Hello there thanks for trying my Kata"  =>  "#HelloThereThanksForTryingMyKata"
  "    Hello     World   "                  =>  "#HelloWorld"
  ""                                        =>  false
  ```
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def generate_hashtag (s : String) : Option String := sorry

  theorem generate_hashtag_basic_cases :
    generate_hashtag "hello world" = some "#HelloWorld" ∧
    generate_hashtag "   hello     world   " = some "#HelloWorld" ∧
    generate_hashtag "" = none := sorry

vc-theorems: |-
  theorem generate_hashtag_length_cases {n : Nat} :
    (n = 138 → generate_hashtag (String.mk (List.replicate n 'a')) = some ("#A" ++ String.mk (List.replicate 137 'a'))) ∧
    (n = 140 → generate_hashtag (String.mk (List.replicate n 'a')) = none) := sorry

  theorem generate_hashtag_capitalization :
    generate_hashtag "hello World" = some "#HelloWorld" ∧
    generate_hashtag "HELLO WORLD" = some "#HelloWorld" ∧
    generate_hashtag "hELLo wORLd" = some "#HelloWorld" := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: False
  -/
  #guard_msgs in
  #eval generate_hashtag ""

  /-
  info: '#HelloWorld'
  -/
  #guard_msgs in
  #eval generate_hashtag "hello world"

  /-
  info: '#HelloWorld'
  -/
  #guard_msgs in
  #eval generate_hashtag "   hello     world   "

  /-
  info: False
  -/
  #guard_msgs in
  #eval generate_hashtag "x" * 140

