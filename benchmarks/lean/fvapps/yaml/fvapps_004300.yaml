vc-description: |-
  /-
  Gray code is a form of binary encoding where transitions between consecutive numbers differ by only one bit. This is a useful encoding for reducing hardware data hazards with values that change rapidly and/or connect to slower hardware as inputs. It is also useful for generating inputs for Karnaugh maps.
  
  Here is an exemple of what the code look like:
  
  ```
  0:    0000
  1:    0001
  2:    0011
  3:    0010
  4:    0110
  5:    0111
  6:    0101
  7:    0100
  8:    1100
  ```
  
  The goal of this kata is to build two function bin2gray and gray2bin wich will convert natural binary to Gray Code and vice-versa. We will use the "binary reflected Gray code". The input and output will be arrays of 0 and 1, MSB at index 0.
  
  There are "simple" formula to implement these functions. It is a very interesting exercise to find them by yourself.
  
  All input will be correct binary arrays.
  -/

vc-preamble: |-
  def isBinary (n : Nat) : Bool :=
    n == 0 || n == 1

vc-helpers: |-

vc-definitions: |-
  def gray2bin (bits : List Nat) : List Nat := sorry
  
  def bin2gray (bits : List Nat) : List Nat :=
  sorry

vc-theorems: |-
  theorem gray_code_roundtrip (bits : List Nat) (h : ∀ x ∈ bits, isBinary x = true) :
    gray2bin (bin2gray bits) = bits :=
  sorry
  
  theorem gray_code_length (bits : List Nat) (h₁ : List.length bits > 0) (h₂ : ∀ x ∈ bits, isBinary x = true) :
    List.length (bin2gray bits) = List.length bits :=
  sorry
  
  theorem gray_code_first_bit (bits : List Nat) (h₁ : List.length bits > 0) (h₂ : ∀ x ∈ bits, isBinary x = true) :
    List.head! (bin2gray bits) = List.head! bits :=
  sorry
  
  theorem gray_code_values_binary (bits : List Nat) (h₁ : List.length bits > 0) (h₂ : ∀ x ∈ bits, isBinary x = true) :
    ∀ x ∈ bin2gray bits, isBinary x = true :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
  
  /--
  info: [1, 1, 1]
  -/
  #guard_msgs in
  #eval bin2gray [1, 0, 1]
  
  /--
  info: [1, 0]
  -/
  #guard_msgs in
  #eval bin2gray [1, 1]
  
  /--
  info: test3_input
  -/
  #guard_msgs in
  #eval gray2bin bin2gray(test3_input)

