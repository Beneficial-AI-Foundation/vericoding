vc-description: |-
  /-
  You are given a secret message you need to decipher. Here are the things you need to know to decipher it:

  For each word:
  - the second and the last letter is switched (e.g. `Hello` becomes `Holle`)
  - the first letter is replaced by its character code (e.g. `H` becomes `72`)

  Note: there are no special characters used, only letters and spaces

  Examples
  ```
  decipherThis('72olle 103doo 100ya'); // 'Hello good day'
  decipherThis('82yade 115te 103o'); // 'Ready set go'
  ```
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def decipher_word (s : String) : String := sorry

  def decipher_this (s : String) : String := sorry

vc-theorems: |-
  theorem decipher_this_preserves_word_count {words : List String} :
    let encoded := String.intercalate " " words
    let result := decipher_this encoded 
    words.length = (result.split (· = ' ')).length := sorry

  theorem decipher_word_length {word : String} :
    let result := decipher_word word
    result.length ≤ word.length := sorry 

  theorem decipher_word_first_char {word : String} 
    (h1 : (word.takeWhile Char.isDigit) ≠ "") 
    (h2 : (word.takeWhile Char.isDigit).all Char.isDigit) :
    let result := decipher_word word
    let n := String.toNat! (word.takeWhile Char.isDigit)
    result.length > 0 ∧ result.get! 0 = Char.ofNat n := sorry

  theorem decipher_this_total (s : String) :
    ∃ result, decipher_this s = result := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /--
  info: 'Hello good day'
  -/
  #guard_msgs in
  #eval decipher_this "72olle 103doo 100ya"

  /--
  info: 'Ready set go'
  -/
  #guard_msgs in
  #eval decipher_this "82yade 115te 103o"

  /--
  info: 'Thank you Piotr'
  -/
  #guard_msgs in
  #eval decipher_this "84kanh 121uo 80roti"

