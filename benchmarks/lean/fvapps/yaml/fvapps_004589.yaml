vc-description: |-
  /-
  This kata is the first of a sequence of four about "Squared Strings".
  
  You are given a string of `n` lines, each substring being `n` characters long: For example:
  
  `s = "abcd\nefgh\nijkl\nmnop"`
  
  We will study some transformations of this square of strings.
  
  - Vertical mirror:
  vert_mirror (or vertMirror or vert-mirror)
  ```
  vert_mirror(s) => "dcba\nhgfe\nlkji\nponm"
  ```
  - Horizontal mirror:
  hor_mirror (or horMirror or hor-mirror)
  ```
   hor_mirror(s) => "mnop\nijkl\nefgh\nabcd"
  ```
  
  or printed:
  
  ```
  vertical mirror   |horizontal mirror   
  abcd --> dcba     |abcd --> mnop 
  efgh     hgfe     |efgh     ijkl 
  ijkl     lkji     |ijkl     efgh 
  mnop     ponm     |mnop     abcd 
  ```
  
  # Task:
  - Write these two functions
  
  and
  
  - high-order function `oper(fct, s)` where
  
   - fct is the function of one variable f to apply to the string `s`
  (fct will be one of `vertMirror, horMirror`)
  
  # Examples:
  ```
  s = "abcd\nefgh\nijkl\nmnop"
  oper(vert_mirror, s) => "dcba\nhgfe\nlkji\nponm"
  oper(hor_mirror, s) => "mnop\nijkl\nefgh\nabcd"
  ```
  # Note:
  The form of the parameter `fct` in oper
  changes according to the language. You can see each form according to the language in "Sample Tests".
  
  # Bash Note:
  The input strings are separated by `,` instead of `\n`. The output strings should be separated by `\r` instead of `\n`. See "Sample Tests".
  
  Forthcoming katas will study other transformations.
  -/
  
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

vc-preamble: |-
  def line_lengths_preserved (orig result : List String) : Prop :=
    ∀ i, i < orig.length → (orig.get! i).length = (result.get! i).length

vc-helpers: |-

vc-definitions: |-
  def split (s : String) (c : Char) : List String :=
  sorry
  
  def vert_mirror (s : String) : String :=
  sorry
  
  def hor_mirror (s : String) : String :=
  sorry
  
  def oper (f : String → String) (s : String) : String :=
  sorry
  
  def reverse_string (s : String) : String :=
  sorry

vc-theorems: |-
  def all_lines_reversed (orig result : List String) : Prop :=
    ∀ i, i < orig.length → result.get! i = reverse_string (orig.get! i)
  
  theorem vert_mirror_properties (s : String) :
    let lines := split s '\n'
    let result_lines := split (oper vert_mirror s) '\n'
    lines.length = result_lines.length ∧
    all_lines_reversed lines result_lines ∧
    line_lengths_preserved lines result_lines := by
  sorry
  
  theorem hor_mirror_properties (s : String) :
    let lines := split s '\n'
    let result_lines := split (oper hor_mirror s) '\n'
    lines.length = result_lines.length ∧
    result_lines = List.reverse lines := by
  sorry
  
  theorem vert_mirror_involution (s : String) :
    oper vert_mirror (oper vert_mirror s) = s := by
  sorry
  
  theorem hor_mirror_involution (s : String) :
    oper hor_mirror (oper hor_mirror s) = s := by
  sorry

vc-postamble: |-
  /-
  info: 'dcba\nhgfe\nlkji\nponm'
  -/
  #guard_msgs in
  #eval oper vert_mirror "abcd\nefgh\nijkl\nmnop"
  
  /-
  info: 'mnop\nijkl\nefgh\nabcd'
  -/
  #guard_msgs in
  #eval oper hor_mirror s1
  
  /-
  info: 'ba\ndc'
  -/
  #guard_msgs in
  #eval oper vert_mirror "ab\ncd"
  
  /-
  info: 'cd\nab'
  -/
  #guard_msgs in
  #eval oper hor_mirror s2

