vc-description: |-
  /-
  Your task is to calculate logical value of boolean array. Test arrays are one-dimensional and their size is in the range 1-50.
  
  Links referring to logical operations: [AND](https://en.wikipedia.org/wiki/Logical_conjunction), [OR](https://en.wikipedia.org/wiki/Logical_disjunction) and [XOR](https://en.wikipedia.org/wiki/Exclusive_or).
  
  You should begin at the first value, and repeatedly apply the logical operation across the remaining elements in the array sequentially.
  
  First Example:
  
  Input: true, true, false, operator: AND
  
  Steps: true AND true -> true, true AND false -> false
  
  Output: false
  
  Second Example:
  
  Input: true, true, false, operator: OR
  
  Steps: true OR true -> true, true OR false -> true
  
  Output: true
  
  Third Example:
  
  Input: true, true, false, operator: XOR
  
  Steps: true XOR true -> false, false XOR false -> false
  
  Output: false
  ___
  
  Input:
  
  boolean array, string with operator' s name: 'AND', 'OR', 'XOR'.
  
  Output:
  
  calculated boolean
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def logical_calc (lst : List Bool) (op : String) : Bool := sorry
  
  def isOdd (n : Nat) : Bool :=
    n % 2 = 1

vc-theorems: |-
  theorem logical_calc_and {lst : List Bool} (h : lst.length > 0) :
    logical_calc lst "AND" = lst.all id := sorry
  
  theorem logical_calc_or {lst : List Bool} (h : lst.length > 0) :
    logical_calc lst "OR" = lst.any id := sorry
  
  theorem logical_calc_xor {lst : List Bool} (h : lst.length > 0) :
    logical_calc lst "XOR" = isOdd (lst.filter id).length := sorry
  
  theorem logical_calc_invalid_op {lst : List Bool} (op : String) (h : op ≠ "AND" ∧ op ≠ "OR" ∧ op ≠ "XOR") :
    logical_calc lst op = false := sorry
  
  theorem logical_calc_associative {lst : List Bool} (op : String)
      (h1 : lst.length > 1)
      (h2 : op = "AND" ∨ op = "OR" ∨ op = "XOR") :
    let mid := lst.length / 2
    let left := logical_calc (lst.take mid) op
    let right := logical_calc (lst.drop mid) op
    logical_calc [left, right] op = logical_calc lst op := sorry
  
  /-
  info: False
  -/
  -- #guard_msgs in
  -- #eval logical_calc [True, True, False] "AND"
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval logical_calc [True, True, False] "OR"
  
  /-
  info: False
  -/
  -- #guard_msgs in
  -- #eval logical_calc [True, True, False] "XOR"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

