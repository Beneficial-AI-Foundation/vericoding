vc-description: |-
  /-
  # Task
  Given some sticks by an array `V` of positive integers, where V[i] represents the length of the sticks, find the number of ways we can choose three of them to form a triangle.
  
  # Example
  
   For `V = [2, 3, 7, 4]`, the result should be `1`.
  
   There is only `(2, 3, 4)` can form a triangle.
  
   For `V = [5, 6, 7, 8]`, the result should be `4`.
  
   `(5, 6, 7), (5, 6, 8), (5, 7, 8), (6, 7, 8)` 
  
  # Input/Output
  
   - `[input]` integer array `V`
  
   stick lengths
  
   `3 <= V.length <= 100`
  
   `0 < V[i] <=100`
  
   - `[output]` an integer
  
   number of ways we can choose 3 sticks to form a triangle.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def choose (n : Nat) (k : Nat) : Nat :=
    sorry
  
  def counting_triangles (sticks : List Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem triangle_count_properties {sticks : List Nat}
    (h1 : sticks.length ≥ 3)
    (h2 : ∀ x ∈ sticks, x > 0 ∧ x ≤ 1000) :
    let result := counting_triangles sticks
    result ≥ 0 ∧ result ≤ choose sticks.length 3 :=
  sorry
  
  theorem same_lengths_make_triangles {n : Nat} (h : n > 0) :
    counting_triangles [n, n, n] = 1 :=
  sorry
  
  theorem triangle_inequality {sticks : List Nat}
    (h1 : sticks.length ≥ 3)
    (h2 : ∀ x ∈ sticks, x > 0 ∧ x ≤ 1000) :
    ∃ a b c, (a ∈ sticks ∧ b ∈ sticks ∧ c ∈ sticks) ∧
             (a + b > c → counting_triangles sticks > 0) :=
  sorry
  
  theorem order_invariance {sticks sticksSorted : List Nat}
    (h1 : sticks.length ≥ 3)
    (h2 : ∀ x ∈ sticks, x > 0 ∧ x ≤ 100)
    (h3 : ∀ x, (x ∈ sticks ↔ x ∈ sticksSorted)) :
    counting_triangles sticks = counting_triangles sticksSorted :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
  
  /--
  info: 1
  -/
  #guard_msgs in
  #eval counting_triangles [2, 3, 7, 4]
  
  /--
  info: 4
  -/
  #guard_msgs in
  #eval counting_triangles [5, 6, 7, 8]
  
  /--
  info: 4
  -/
  #guard_msgs in
  #eval counting_triangles [2, 2, 2, 2]

