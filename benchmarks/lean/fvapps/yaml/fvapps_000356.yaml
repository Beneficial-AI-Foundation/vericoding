vc-description: |-
  /-
  Let's define a function countUniqueChars(s) that returns the number of unique characters on s, for example if s = "LEETCODE" then "L", "T","C","O","D" are the unique characters since they appear only once in s, therefore countUniqueChars(s) = 5.

  On this problem given a string s we need to return the sum of countUniqueChars(t) where t is a substring of s. Notice that some substrings can be repeated so on this case you have to count the repeated ones too.
  Since the answer can be very large, return the answer modulo 10 ^ 9 + 7.

  Example 1:
  Input: s = "ABC"
  Output: 10
  Explanation: All possible substrings are: "A","B","C","AB","BC" and "ABC".
  Evey substring is composed with only unique letters.
  Sum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10

  Example 2:
  Input: s = "ABA"
  Output: 8
  Explanation: The same as example 1, except countUniqueChars("ABA") = 1.

  Example 3:
  Input: s = "LEETCODE"
  Output: 92

  Constraints:

  0 <= s.length <= 10^4
  s contain upper-case English letters only.
  -/

vc-preamble: |-
  def unique_letter_string (s : String) : Nat := sorry

  theorem unique_letter_string_positive (s : String) (h : s.length > 0) :
    unique_letter_string s > 0 := sorry

  def string_reverse (s : String) : String := sorry

  theorem unique_letter_string_reverse_invariant (s : String) (h : s.length > 0) :
    unique_letter_string s = unique_letter_string (string_reverse s) := sorry

vc-helpers: |

vc-definitions: |-
  def string_append_char (s : String) (c : Char) : String := sorry

  theorem unique_letter_string_monotone (s : String) (h : s.length > 0) 
    (h1 : 0 < s.length) : 
    unique_letter_string (string_append_char s (s.get 0)) > unique_letter_string s := sorry

vc-theorems: |-
  theorem unique_letter_string_bounded (s : String) (h : s.length > 0) :
    unique_letter_string s < 1000000007 := sorry

  theorem unique_letter_string_single_char (s : String) (h : s.length = 1) :
    unique_letter_string s = 1 := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

  /-
  info: 10
  -/
  #guard_msgs in
  #eval unique_letter_string "ABC"

  /-
  info: 8
  -/
  #guard_msgs in
  #eval unique_letter_string "ABA"

  /-
  info: 92
  -/
  #guard_msgs in
  #eval unique_letter_string "LEETCODE"

