vc-description: |-
  /-
  For encrypting strings this region of chars is given (in this order!):
  
  * all letters (ascending, first all UpperCase, then all LowerCase)
  * all digits (ascending)
  * the following chars: `.,:;-?! '()$%&"` 
  
  These are 77 chars! (This region is zero-based.)
  
  Write two methods: 
  ```python
  def encrypt(text)
  def decrypt(encrypted_text)
  ```
  
  Prechecks:
  1. If the input-string has chars, that are not in the region, throw an Exception(C#, Python) or Error(JavaScript).
  2. If the input-string is null or empty return exactly this value!
  
  For building the encrypted string:
  1. For every second char do a switch of the case.
  2. For every char take the index from the region. Take the difference from the region-index of the char before (from the input text! Not from the fresh encrypted char before!). (Char2 = Char1-Char2)
  Replace the original char by the char of the difference-value from the region. In this step the first letter of the text is unchanged.
  3. Replace the first char by the mirror in the given region. (`'A' -> '"'`, `'B' -> '&'`, ...)
  
  Simple example:
  
  * Input:  `"Business"`
  * Step 1: `"BUsInEsS"`
  * Step 2: `"B61kujla"`
    * `B -> U`
      * `B (1) - U (20) = -19`
      * `-19 + 77 = 58`
      * `Region[58] = "6"`
    * `U -> s`
      * `U (20) - s (44) = -24`
      * `-24 + 77 = 53`
      * `Region[53] = "1"`
  * Step 3: `"&61kujla"`
  
  This kata is part of the Simple Encryption Series:
  Simple Encryption #1 - Alternating Split
  Simple Encryption #2 - Index-Difference
  Simple Encryption #3 - Turn The Bits Around
  Simple Encryption #4 - Qwerty
  
  Have fun coding it and please don't forget to vote and rank this kata! :-)
  -/

vc-preamble: |-
  def REGION : String := "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
  
  def encrypt (s : String) : String := sorry
  
  def decrypt (s : String) : String := sorry
  def isValidText (s : String) : Bool := sorry

vc-helpers: |-

vc-definitions: |-
  def charAtPos (s : String) (pos : Nat) : Char := s.data[pos]!
  
  theorem encryption_decryption_roundtrip (s : String) (h : isValidText s = true) :
    decrypt (encrypt s) = s := sorry

vc-theorems: |-
  theorem encrypted_uses_valid_chars (s : String) (h : isValidText s = true) (h2 : s ≠ "") :
    isValidText (encrypt s) = true := sorry
  
  theorem invalid_chars_raise_exception (s : String) (h : isValidText s = false) :
    encrypt s = "" ∧ decrypt s = "" := sorry
  
  theorem empty_string :
    encrypt "" = "" ∧ decrypt "" = "" := sorry
  
  theorem second_chars_different (s : String) (h : isValidText s = true) (h2 : s.length ≥ 2) :
    encrypt s ≠ s := sorry
  
  theorem first_char_mirrored (s : String) (h : isValidText s = true) (h2 : s ≠ "") :
    (charAtPos (encrypt s) 0) = (charAtPos REGION (REGION.length - 1)) := sorry
  
  /-
  info: encrypted1
  -/
  -- #guard_msgs in
  -- #eval encrypt "Business"
  
  /-
  info: text1
  -/
  -- #guard_msgs in
  -- #eval decrypt encrypted1
  
  /-
  info: encrypted2
  -/
  -- #guard_msgs in
  -- #eval encrypt "This is a test!"
  
  /-
  info: text2
  -/
  -- #guard_msgs in
  -- #eval decrypt encrypted2
  
  /-
  info: ''
  -/
  -- #guard_msgs in
  -- #eval encrypt ""
  
  /-
  info: ''
  -/
  -- #guard_msgs in
  -- #eval decrypt ""

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

