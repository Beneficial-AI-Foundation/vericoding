vc-description: |-
  /-
  Your are given a string $S$ containing only lowercase letter and a array of character $arr$. Find whether the given string only contains characters from the given character array. 
  Print $1$ if the string contains characters from the given array only else print $0$.
  Note: string contains characters in lower case only.

  -----Input:-----
  - First line will contain $T$, number of testcases. Then the testcases follow. 
  - Each testcase contains- 
  a string $S$ of lowercase letter
  a integer $n$ denoting length of character array $arr$
  next line contains $n$ space separated characters.

  -----Output:-----
  For each testcase, Print $1$ if the string contains characters from the given array only else print $0$.

  -----Constraints-----
  - $1 \leq T \leq 1000$
  - $0 \leq n \leq 10^5$

  -----Sample Input:-----
  3
  abcd
  4
  a b c d
  aabbbcccdddd
  4
  a b c d
  acd
  3
  a b d

  -----Sample Output:-----
  1
  1
  0
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def check_string_chars (s : String) (n : Nat) (chars : String) : Nat :=
    sorry

vc-theorems: |-
  theorem invalid_chars_check {test_str chars_str : String} {n : Nat}
    (h1 : test_str.length > 0)
    (h2 : chars_str.length > 0) 
    (h3 : ∃ c ∈ test_str.data, c ∉ chars_str.data) :
    check_string_chars test_str test_str.length chars_str = 0 :=
  sorry

  theorem empty_string_check {chars : String}
    (h : chars.length > 0) :
    check_string_chars "" 0 chars = 1 := 
  sorry

  theorem empty_chars_check {s : String} 
    (h : s.length > 0) :
    check_string_chars s s.length "" = 0 :=
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible

  /--
  info: 1
  -/
  #guard_msgs in
  #eval check_string_chars "abcd" 4 "a b c d"

  /--
  info: 1
  -/
  #guard_msgs in
  #eval check_string_chars "aabbbcccdddd" 4 "a b c d"

  /--
  info: 0
  -/
  #guard_msgs in
  #eval check_string_chars "acd" 3 "a b d"

