vc-description: |-
  /-
  # Task
   A lock has `n` buttons in it, numbered from `1 to n`. To open the lock, you have to press all buttons in some order, i.e. a key to the lock is a permutation of the first `n` integers. If you push the right button in the right order, it will be pressed into the lock. Otherwise all pressed buttons will pop out. When all buttons are pressed into the lock, it opens.

   Your task is to calculate the number of times you've got to push buttons in order to open the lock in the `worst-case scenario`.

  # Example

   For `n = 3`, the result should be `7`.
   ```
   Let's assume the right order is 3-2-1.
   In the worst-case scenario, we press the buttons:
   Press 1, wrong, button 1 pop out
   Press 2, wrong, button 2 pop out
   Press 3, right, button 3 pressed in
   Press 1, wrong, button 1,3 pop out
   Press 3, right, button 3 pressed in
   Press 2, right, button 2 pressed in
   Press 1, right, button 1 pressed in
   We pressed button total 7 times.``` 

   For `n = 4`, the result should be `14`.
   ```
   Let's assume the right order is 4-3-2-1.
   In the worst-case scenario, we press the buttons:
   Press 1, wrong, button 1 pop out
   Press 2, wrong, button 2 pop out
   Press 3, wrong, button 3 pop out
   Press 4, right, button 4 pressed in
   Press 1, wrong, button 1,4 pop out
   Press 4, right, button 4 pressed in
   Press 2, wrong, button 2,4 pop out
   Press 4, right, button 4 pressed in
   Press 3, right, button 3 pressed in
   Press 1, wrong, button 1,3,4 pop out
   Press 4, right, button 4 pressed in
   Press 3, right, button 3 pressed in
   Press 2, right, button 2 pressed in
   Press 1, right, button 1 pressed in
   We pressed button total 14 times.``` 

  # Input/Output

   - `[input]` integer `n`

    The number of buttons in the lock.

    `0 < n ≤ 2000`

   - `[output]` an integer

   The number of times you've got to push buttons in the `worst-case scenario`.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def press_button (n : Int) : Int := sorry 

  theorem press_button_positive_bounds {n : Int} (h : n > 0) (h2 : n ≤ 1000) :
    press_button n ≥ 0 ∧ press_button n ≤ n * n * n := sorry

vc-theorems: |-
  theorem press_button_non_positive (n : Int) (h : n ≤ 0) :
    press_button n = (n * n + 5) * n / 6 := sorry

  theorem press_button_fixed_points :
    press_button 0 = 0 ∧ press_button 1 = 1 := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

  /-
  info: 1
  -/
  #guard_msgs in
  #eval press_button 1

  /-
  info: 7
  -/
  #guard_msgs in
  #eval press_button 3

  /-
  info: 14
  -/
  #guard_msgs in
  #eval press_button 4

