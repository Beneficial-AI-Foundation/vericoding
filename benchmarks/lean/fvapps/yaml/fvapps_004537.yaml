vc-description: |-
  /-
  Given 2 strings, `a` and `b`, return a string of the form: `shorter+reverse(longer)+shorter.`
  
  In other words, the shortest string has to be put as prefix and as suffix of the reverse of the longest.
  
  Strings `a` and `b` may be empty, but not null (In C# strings may also be null. Treat them as if they are empty.).  
  If `a` and `b` have the same length treat `a` as the longer producing `b+reverse(a)+b`
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def shorter_reverse_longer (a b : String) : String := sorry
  
  def reverse (s : String) : String := sorry

vc-theorems: |-
  theorem shorter_reverse_longer_length (a b : String) : 
    let result := shorter_reverse_longer a b
    String.length result = 2 * min (String.length a) (String.length b) + max (String.length a) (String.length b)
    := sorry
  
  theorem shorter_reverse_longer_empty_left (s : String) :
    shorter_reverse_longer "" s = reverse s := sorry
  
  theorem shorter_reverse_longer_empty_right (s : String) :
    shorter_reverse_longer s "" = reverse s := sorry
  
  /-
  info: 'abcdtsrifabcd'
  -/
  -- #guard_msgs in
  -- #eval shorter_reverse_longer "first" "abcd"
  
  /-
  info: 'bauollehbau'
  -/
  -- #guard_msgs in
  -- #eval shorter_reverse_longer "hello" "bau"
  
  /-
  info: 'dcba'
  -/
  -- #guard_msgs in
  -- #eval shorter_reverse_longer "" "abcd"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

