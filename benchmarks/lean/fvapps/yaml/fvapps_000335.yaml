vc-description: |-
  /-
  We are given an array A of N lowercase letter strings, all of the same length.
  Now, we may choose any set of deletion indices, and for each string, we delete all the characters in those indices.
  For example, if we have an array A = ["babca","bbazb"] and deletion indices {0, 1, 4}, then the final array after deletions is ["bc","az"].
  Suppose we chose a set of deletion indices D such that after deletions, the final array has every element (row) in lexicographic order.
  For clarity, A[0] is in lexicographic order (ie. A[0][0] <= A[0][1] <= ... <= A[0][A[0].length - 1]), A[1] is in lexicographic order (ie. A[1][0] <= A[1][1] <= ... <= A[1][A[1].length - 1]), and so on.
  Return the minimum possible value of D.length.

  Example 1:
  Input: ["babca","bbazb"]
  Output: 3
  Explanation: After deleting columns 0, 1, and 4, the final array is A = ["bc", "az"].
  Both these rows are individually in lexicographic order (ie. A[0][0] <= A[0][1] and A[1][0] <= A[1][1]).
  Note that A[0] > A[1] - the array A isn't necessarily in lexicographic order.

  Example 2:
  Input: ["edcba"]
  Output: 4
  Explanation: If we delete less than 4 columns, the only row won't be lexicographically sorted.

  Example 3:
  Input: ["ghi","def","abc"]
  Output: 0
  Explanation: All rows are already lexicographically sorted.

  Note:

  1 <= A.length <= 100
  1 <= A[i].length <= 100
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def min_deletion_size (strings : List String) : Nat :=
    sorry

vc-theorems: |-
  theorem min_deletion_size_single_char (s : String) :
    s.length = 1 → min_deletion_size [s] = 0 := 
    sorry

  theorem min_deletion_size_same_chars (s : String) :
    s = "aa" → min_deletion_size [s] = 0 :=
    sorry

  theorem min_deletion_size_reverse_chars (s : String) :
    s = "ba" → min_deletion_size [s] = 1 :=
    sorry

  theorem min_deletion_size_identical_sorted_strs (s : String) :
    s = "ab" → min_deletion_size [s, s] = 0 :=
    sorry

  theorem min_deletion_size_identical_unsorted_strs (s : String) :
    s = "ba" → min_deletion_size [s, s] = 1 :=
    sorry

  theorem min_deletion_size_different_sorted_strs :
    min_deletion_size ["abc", "def", "ghi"] = 0 :=
    sorry

  theorem min_deletion_size_reverse_sorted_str :
    min_deletion_size ["edcba"] = 4 :=
    sorry

  theorem min_deletion_size_complex_case :
    min_deletion_size ["babca", "bbazb"] = 3 :=
    sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

  /-
  info: 3
  -/
  #guard_msgs in
  #eval min_deletion_size ["babca", "bbazb"]

  /-
  info: 4
  -/
  #guard_msgs in
  #eval min_deletion_size ["edcba"]

  /-
  info: 0
  -/
  #guard_msgs in
  #eval min_deletion_size ["ghi", "def", "abc"]

