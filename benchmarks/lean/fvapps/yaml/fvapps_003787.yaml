vc-description: |-
  /-
  Given an array, return the difference between the count of even numbers and the count of odd numbers. `0` will be considered an even number. 
  
  ```
  For example:
  solve([0,1,2,3]) = 0 because there are two even numbers and two odd numbers. Even - Odd = 2 - 2 = 0.  
  ```
  
  Let's now add two letters to the last example: 
  ```
  solve([0,1,2,3,'a','b']) = 0. Again, Even - Odd = 2 - 2 = 0. Ignore letters. 
  ```
  
  The input will be an array of lowercase letters and numbers only. 
  
  In some languages (Haskell, C++, and others), input will be an array of strings:
  
  ```
  solve ["0","1","2","3","a","b"] = 0 
  ```
  
  Good luck!
  
  If you like this Kata, please try: 
  
  [Longest vowel chain](https://www.codewars.com/kata/59c5f4e9d751df43cf000035)
  
  [Word values](https://www.codewars.com/kata/598d91785d4ce3ec4f000018)
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def solve (arr : List (Sum Int String)) : Int := sorry
  
  theorem solve_matches_even_odd_difference (arr : List (Sum Int String)) :
    solve arr = 
      (List.filter (fun x => match x with
        | Sum.inl n => n % 2 = 0
        | Sum.inr _ => false) arr).length -
      (List.filter (fun x => match x with
        | Sum.inl n => n % 2 = 1
        | Sum.inr _ => false) arr).length :=
  sorry

vc-theorems: |-
  theorem solve_all_strings (arr : List String) :
    solve (arr.map Sum.inr) = 0 :=
  sorry
  
  theorem solve_bounded_by_length (arr : List Int) :
    -arr.length ≤ solve (arr.map Sum.inl) ∧ 
    solve (arr.map Sum.inl) ≤ arr.length :=
  sorry
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval solve [0, 1, 2, 3]
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval solve [0, 1, 2, 3, "a", "b"]
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval solve [13, 6, 8, 15, 4, 8, 13]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

