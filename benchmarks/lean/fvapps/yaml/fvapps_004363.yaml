vc-description: |-
  /-
  Given a certain number, how many multiples of three could you obtain with its digits?

  Suposse that you have the number 362. The numbers that can be generated from it are:
  ```
  362 ----> 3, 6, 2, 36, 63, 62, 26, 32, 23, 236, 263, 326, 362, 623, 632 
  ```
  But only:

  ```3, 6, 36, 63``` are multiple of three.

  We need a function that can receive a number ann may output in the following order:

  - the amount of multiples

  - the maximum multiple

  Let's see a case the number has a the digit 0 and repeated digits:
  ```
  6063 ----> 0, 3, 6, 30, 36, 60, 63, 66, 306, 360, 366, 603, 606, 630, 636, 660, 663, 3066, 3606, 3660, 6036, 6063, 6306, 6360, 6603, 6630
  ```
  In this case the multiples of three will be all except 0

  ```
  6063 ----> 3, 6, 30, 36, 60, 63, 66, 306, 360, 366, 603, 606, 630, 636, 660, 663, 3066, 3606, 3660, 6036, 6063, 6306, 6360, 6603, 6630
  ```

  The cases above for the function:
  ```python
  find_mult_3(362) == [4, 63]

  find_mult_3(6063) == [25, 6630]
  ```
  In Javascript ```findMult_3()```.
  The function will receive only positive integers (num > 0), and you don't have to worry for validating the entries.

  Features of the random tests:
  ```
  Number of test = 100
  1000 ≤ num ≤ 100000000
  ```
  Enjoy it!!
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def find_mult_3 (n : Nat) : List Nat := sorry

  theorem find_mult_3_correct_for_362 :
    find_mult_3 362 = [4, 63] := sorry

vc-theorems: |-
  theorem find_mult_3_correct_for_6063 :
    find_mult_3 6063 = [25, 6630] := sorry

  theorem find_mult_3_correct_for_7766553322 :
    find_mult_3 7766553322 = [55510, 766553322] := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: [4, 63]
  -/
  #guard_msgs in
  #eval find_mult_3 362

  /-
  info: [25, 6630]
  -/
  #guard_msgs in
  #eval find_mult_3 6063

  /-
  info: [55510, 766553322]
  -/
  #guard_msgs in
  #eval find_mult_3 7766553322

