vc-description: |-
  /-
  Problem description.
  Winston and Royce love sharing memes with each other. They express the amount of seconds they laughed ar a meme as the number of ‘XD’ subsequences in their messages. Being optimization freaks, they wanted to find the string with minimum possible length and having exactly the given number of ‘XD’ subsequences.

  -----Input-----
  - The first line of the input contains an integer T denoting the number of test cases.
  - Next T lines contains a single integer N, the no of seconds laughed.

  -----Output-----
  - 
  For each input, print the corresponding string having minimum length. If there are multiple possible answers, print any.

  -----Constraints-----
  - 1 ≤ T ≤ 1000
  - 1 ≤ N ≤ 109
  - 1 ≤ Sum of length of output over all testcases ≤ 5*105

  -----Example-----
  Input:
  1
  9

  Output:
  XXXDDD

  -----Explanation-----
  Some of the possible strings are - XXDDDXD,XXXDDD,XDXXXDD,XDXDXDD etc. Of these, XXXDDD is the smallest.
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def min_length_xd_sequence (n : Nat) : String := sorry

  theorem min_length_xd_sequence_only_contains_x_d (n : Nat) :
    let result := min_length_xd_sequence n
    ∀ c ∈ result.data, c = 'X' ∨ c = 'D' := sorry

vc-theorems: |-
  theorem min_length_xd_sequence_has_n_subsequences (n : Nat) :
    let result := min_length_xd_sequence n
    let x_count := (result.data.filter (· = 'X')).length
    let d_count := (result.data.filter (· = 'D')).length
    x_count * d_count = n := sorry

  theorem min_length_xd_sequence_min_length (n : Nat) : 
    let result := min_length_xd_sequence n
    result.length ≥ 2 ∧
    ∀ (shorter : String), shorter.length = result.length - 1 →
    let x_shorter := (shorter.data.filter (· = 'X')).length
    let d_shorter := (shorter.data.filter (· = 'D')).length
    x_shorter * d_shorter < n := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

  /-
  info: 'XXXDDD'
  -/
  #guard_msgs in
  #eval min_length_xd_sequence 9

  /-
  info: 'XXDD'
  -/
  #guard_msgs in
  #eval min_length_xd_sequence 4

  /-
  info: 'XD'
  -/
  #guard_msgs in
  #eval min_length_xd_sequence 1

