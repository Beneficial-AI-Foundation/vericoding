vc-description: |-
  /-
  In this Kata you must convert integers numbers from and to a negative-base binary system.

  Negative-base systems can accommodate all the same numbers as standard place-value systems, but both positive and negative numbers are represented without the use of a minus sign (or, in computer representation, a sign bit); this advantage is countered by an increased complexity of arithmetic operations.

  To help understand, the first eight digits (in decimal) of the Base(-2) system is: 

  `[1, -2, 4, -8, 16, -32, 64, -128]`

  Example conversions:

  `Decimal, negabinary`
  ```
  6,   '11010'
  -6,  '1110'
  4,   '100'
  18,  '10110'
  -11, '110101'
  ```
  -/

vc-preamble: |-
  def int_to_negabinary (n : Int) : String := sorry
  def negabinary_to_int (s : String) : Int := sorry

vc-helpers: |

vc-definitions: |-
  def isValidBinaryStr (s : String) : Bool :=
    s.length > 0 && s.all (fun c => c = '0' || c = '1')

vc-theorems: |-
  theorem round_trip (n : Int) : 
    negabinary_to_int (int_to_negabinary n) = n := sorry

  theorem valid_binary_string (n : Int) :
    isValidBinaryStr (int_to_negabinary n) := sorry 

  theorem neg_bin_str_converts (s : String) (h : isValidBinaryStr s) :
    âˆƒ n : Int, negabinary_to_int s = n := sorry

  theorem zero_special_case :
    int_to_negabinary 0 = "0" := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: '11010'
  -/
  #guard_msgs in
  #eval int_to_negabinary 6

  /-
  info: 6
  -/
  #guard_msgs in
  #eval negabinary_to_int "11010"

  /-
  info: '1110'
  -/
  #guard_msgs in
  #eval int_to_negabinary -6

  /-
  info: -6
  -/
  #guard_msgs in
  #eval negabinary_to_int "1110"

  /-
  info: '100'
  -/
  #guard_msgs in
  #eval int_to_negabinary 4

  /-
  info: 4
  -/
  #guard_msgs in
  #eval negabinary_to_int "100"

