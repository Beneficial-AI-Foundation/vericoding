vc-description: |-
  /-
  The students of Codechef Middle School are visiting an amusement park. The children want to go on a ride, however, there is a minimum height requirement of $X$ cm. Determine if the children are eligible to go on the ride. 
  Print "Yes" if they are eligible, "No" otherwise.

  -----Input:-----
  - First line will contain $T$, number of testcases. Then the testcases follow. 
  - Each testcase contains of a single line of input, two integers $H$ which is a child's height in cm and $X$ which is the minimum permissible height. 

  -----Output:-----
  For each testcase, output in a single line $"Yes"$ or $"No"$. You cannot give your answer as "YeS", "YES", "yes" or any other variation.

  -----Constraints-----
  - $1 \leq T \leq 10^4$
  - $50 \leq H \leq 200$
  - $50 \leq X \leq 200$

  -----Sample Input:-----
  2
  120 100
  90 100

  -----Sample Output:-----
  Yes
  No

  -----EXPLANATION:-----
  The first child has height more than minimum permissible height, so he can go on the ride while the other person cannot!
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def check_height_eligibility (height min_height : Int) : String := sorry

  def process_test_cases (cases : List (Int × Int)) : List String := sorry

vc-theorems: |-
  theorem check_height_eligibility_valid (height min_height : Int) :
    let result := check_height_eligibility height min_height
    result = "Yes" ∨ result = "No" ∧ 
    (result = "Yes" ↔ height ≥ min_height) := sorry

  theorem process_test_cases_length (cases : List (Int × Int)) :
    (process_test_cases cases).length = cases.length := sorry

  theorem process_test_cases_valid_outputs (cases : List (Int × Int)) :
    ∀ x ∈ process_test_cases cases, x = "Yes" ∨ x = "No" := sorry

  theorem process_test_cases_correct (cases : List (Int × Int)) (i : Nat) (h : i < cases.length) :
    let result := (process_test_cases cases)[i]'(by rw [process_test_cases_length]; exact h)
    let case := cases[i]'h
    result = (if case.1 ≥ case.2 then "Yes" else "No") := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

  /--
  info: ['Yes', 'No']
  -/
  #guard_msgs in
  #eval process_test_cases [(120, 100), (90, 100)]

  /--
  info: ['Yes']
  -/
  #guard_msgs in
  #eval process_test_cases [(100, 100)]

  /--
  info: ['Yes', 'No', 'Yes']
  -/
  #guard_msgs in
  #eval process_test_cases [(150, 120), (80, 90), (200, 200)]

