vc-description: |-
  /-
  You are given K eggs, and you have access to a building with N floors from 1 to N. 
  Each egg is identical in function, and if an egg breaks, you cannot drop it again.
  You know that there exists a floor F with 0 <= F <= N such that any egg dropped at a floor higher than F will break, and any egg dropped at or below floor F will not break.
  Each move, you may take an egg (if you have an unbroken one) and drop it from any floor X (with 1 <= X <= N). 
  Your goal is to know with certainty what the value of F is.
  What is the minimum number of moves that you need to know with certainty what F is, regardless of the initial value of F?

  Example 1:
  Input: K = 1, N = 2
  Output: 2
  Explanation: 
  Drop the egg from floor 1.  If it breaks, we know with certainty that F = 0.
  Otherwise, drop the egg from floor 2.  If it breaks, we know with certainty that F = 1.
  If it didn't break, then we know with certainty F = 2.
  Hence, we needed 2 moves in the worst case to know what F is with certainty.

  Example 2:
  Input: K = 2, N = 6
  Output: 3

  Example 3:
  Input: K = 3, N = 14
  Output: 4

  Note:

  1 <= K <= 100
  1 <= N <= 10000
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def super_egg_drop (K N : Nat) : Nat := sorry

  theorem super_egg_drop_positive (K N : Nat) (h1 : K > 0) (h2 : N > 0) :
    super_egg_drop K N > 0 := sorry

vc-theorems: |-
  theorem super_egg_drop_upper_bound (K N : Nat) (h1 : K > 0) (h2 : N > 0) :
    super_egg_drop K N ≤ N := sorry

  theorem super_egg_drop_one_egg (N : Nat) (h : N > 0) :
    super_egg_drop 1 N = N := sorry

  theorem super_egg_drop_monotonic_K (K N : Nat) (h1 : K > 1) (h2 : N > 0) :
    super_egg_drop K N ≤ super_egg_drop (K-1) N := sorry

  theorem super_egg_drop_min_case :
    super_egg_drop 1 1 = 1 := sorry

  theorem super_egg_drop_linear_search :
    super_egg_drop 1 5 = 5 := sorry

  theorem super_egg_drop_multiple_eggs_efficient :
    super_egg_drop 2 10 < 10 := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible

  /--
  info: 2
  -/
  #guard_msgs in
  #eval super_egg_drop 1 2

  /--
  info: 3
  -/
  #guard_msgs in
  #eval super_egg_drop 2 6

  /--
  info: 4
  -/
  #guard_msgs in
  #eval super_egg_drop 3 14

