vc-description: |-
  /-
  =====Function Descriptions=====
  start() & end()

  These expressions return the indices of the start and end of the substring matched by the group.

  Code

  >>> import re
  >>> m = re.search(r'\d+','1234')
  >>> m.end()
  4
  >>> m.start()
  0

  =====Problem Statement=====
  You are given a string S.
  Your task is to find the indices of the start and end of string k in S.

  =====Input Format=====
  The first line contains the string S.
  The second line contains the string k.

  =====Output Format=====
  Print the tuple in this format: (start_index, end_index)

  If no match is found, print (-1, -1).
  -/

vc-preamble: |

vc-helpers: |

vc-definitions: |-
  def find_string_indices (s : String) (k : String) : List (Int × Int) := sorry

  -- Any result is a list of integer tuples

vc-theorems: |-
  theorem find_string_indices_returns_valid_pairs (s k : String) 
    (h₁ : s.length > 0) (h₂ : k.length > 0) :
    ∀ p ∈ (find_string_indices s k), ∃ i j : Int, p = (i, j) := sorry

  -- For non-failure results, indices are valid and contain substring

  theorem find_string_indices_valid_matches (s k : String)
    (h₁ : s.length > 0) (h₂ : k.length > 0)
    (h₃ : find_string_indices s k ≠ [(-1, -1)]) :
    ∀ p ∈ (find_string_indices s k),
      let i := p.1
      let j := p.2
      0 ≤ i ∧ i ≤ j ∧ j < s.length := sorry

  -- Results are ordered and non-overlapping

  theorem find_string_indices_ordered (s k : String)
    (h₁ : s.length > 0) (h₂ : k.length > 0)
    (h₃ : find_string_indices s k ≠ [(-1, -1)])
    (i : Nat) (h₄ : i + 1 < (find_string_indices s k).length) :
    let result := find_string_indices s k
    result[i]!.2 < result[i+1]!.1 := sorry

  -- First character match starts at beginning

  theorem find_string_indices_first_char (s : String)
    (h : s.length > 0) :
    let result := find_string_indices s (String.mk [s.get 0])
    result ≠ [] → result[0]!.1 = 0 := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

  /-
  info: [(0, 1), (1, 2), (4, 5)]
  -/
  #guard_msgs in
  #eval find_string_indices "aaadaa" "aa"

  /-
  info: [(-1, -1)]
  -/
  #guard_msgs in
  #eval find_string_indices "hello" "xyz"

  /-
  info: [(1, 3), (3, 5)]
  -/
  #guard_msgs in
  #eval find_string_indices "banana" "ana"

