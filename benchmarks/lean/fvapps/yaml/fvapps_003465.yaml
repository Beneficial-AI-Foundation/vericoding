vc-description: |-
  /-
  I have started studying electronics recently, and I came up with a circuit made up of 2 LEDs and 3 buttons.

  Here 's how it works: 2 buttons (`red` and `blue`) are connected to the LEDs (`red` and `blue` respectively). Buttons pressing pattern will be remembered and represented through the LEDs when the third button is pressed.

   - Only one LED can blink at a time.
   - The LED will only blink once even if the button is held down.
   - The button must be released to be pressed again.
   - If a button is pressed while the other button is being held down, it will be ignored.
   - If two buttons are pressed simultaneously, the red button will be preferred.
   - If a button is released while the other is being held down, the other 's LED will blink.
   - `0` is up and `1` is down.
   - The two inputs will always have the same length.

  Here is an example:

  ```Python
  Red:  "10011010"
  Blue: "10110111"
  #=> "RBRB"

  Red:  "01001000"
  Blue: "01011100"
  #=> "RB"

  Red:  "01101000"
  Blue: "00111000"
  #=> "RB"
  ```

  PS:

  This is my first time making a kata, so there may be some errors. 
  You may report to me if the description is too confusing. 
  Sorry for my poor grammar.
  -/

vc-preamble: |-
  def seqR : String → Bool 
    | _ => sorry

  def seqB : String → Bool
    | _ => sorry

vc-helpers: |

vc-definitions: |-
  def button_sequences (r : String) (b : String) : String :=
    sorry

vc-theorems: |-
  theorem button_sequences_valid_chars (r b : String) (h : r.length > 0 ∧ b.length > 0) :
    ∀ c, c ∈ (button_sequences r b).toList → c = 'R' ∨ c = 'B' :=
  sorry

  theorem button_sequences_length (r b : String) (h : r.length > 0 ∧ b.length > 0) :
    (button_sequences r b).length ≤ min r.length b.length :=
  sorry

  theorem button_sequences_all_zeros_red (s : String) (h : s.length > 0) :
    let zeros := String.mk (List.replicate s.length '0')
    ∀ c, c ∈ (button_sequences s zeros).toList → c = 'R' :=
  sorry

  theorem button_sequences_all_zeros_blue (s : String) (h : s.length > 0) :
    let zeros := String.mk (List.replicate s.length '0')
    ∀ c, c ∈ (button_sequences zeros s).toList → c = 'B' :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

  /-
  info: 'RBRB'
  -/
  #guard_msgs in
  #eval button_sequences "10011010" "10110111"

  /-
  info: 'RB'
  -/
  #guard_msgs in
  #eval button_sequences "01001000" "01011100"

  /-
  info: 'RBRBRBRB'
  -/
  #guard_msgs in
  #eval button_sequences "10101010" "01010101"

