vc-description: |-
  /-
  Given an array nums of positive integers, return the longest possible length of an array prefix of nums, such that it is possible to remove exactly one element from this prefix so that every number that has appeared in it will have the same number of occurrences.
  If after removing one element there are no remaining elements, it's still considered that every appeared number has the same number of ocurrences (0).
  
  Example 1:
  Input: nums = [2,2,1,1,5,3,3,5]
  Output: 7
  Explanation: For the subarray [2,2,1,1,5,3,3] of length 7, if we remove nums[4]=5, we will get [2,2,1,1,3,3], so that each number will appear exactly twice.
  
  Example 2:
  Input: nums = [1,1,1,2,2,2,3,3,3,4,4,4,5]
  Output: 13
  
  Example 3:
  Input: nums = [1,1,1,2,2,2]
  Output: 5
  
  Example 4:
  Input: nums = [10,2,8,9,3,8,1,5,2,3,7,6]
  Output: 8
  
  Constraints:
  
  2 <= nums.length <= 10^5
  1 <= nums[i] <= 10^5
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def max_equal_freq (nums: List Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem max_equal_freq_returns_valid_length (nums: List Nat) : 
    nums ≠ [] → 0 ≤ max_equal_freq nums ∧ max_equal_freq nums ≤ nums.length :=
    sorry
  
  theorem max_equal_freq_handles_unique_values (nums: List Nat) :
    nums ≠ [] → (∀ (i j : Fin nums.length), i ≠ j → nums.get i ≠ nums.get j) →
    max_equal_freq nums = nums.length :=
    sorry
  
  theorem max_equal_freq_handles_two_frequencies (nums: List Nat) (i: Fin nums.length) :
    nums.length ≥ 2 →
    let nums' := nums.eraseDups ++ [nums.get i]
    max_equal_freq nums' = nums'.length :=
    sorry
  
  theorem max_equal_freq_handles_single_value {n: Nat} (k: Nat) :
    k > 0 →
    let nums := List.replicate k n
    max_equal_freq nums = nums.length :=
    sorry
  
  /-
  info: 7
  -/
  -- #guard_msgs in
  -- #eval max_equal_freq [2, 2, 1, 1, 5, 3, 3, 5]
  
  /-
  info: 5
  -/
  -- #guard_msgs in
  -- #eval max_equal_freq [1, 1, 1, 2, 2, 2]
  
  /-
  info: 13
  -/
  -- #guard_msgs in
  -- #eval max_equal_freq [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

