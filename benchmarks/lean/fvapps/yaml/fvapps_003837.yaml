vc-description: |-
  /-
  Let's say take 2 strings, A and B, and define the similarity of the strings to be the length of the longest prefix common to both strings. For example, the similarity of strings `abc` and `abd` is 2, while the similarity of strings `aaa` and `aaab` is 3.

  write a function that calculates the sum of similarities of a string S with each of it's **suffixes**.

  ```python
  string_suffix('ababaa') => returns 11
  string_suffix('abc') => returns 3
  ```

  Explanation:

  In the first case, the suffixes of the string are `ababaa`, `babaa`, `abaa`, `baa`, `aa` and `a`. The similarities of each of these strings with the string `ababaa` are 6,0,3,0,1,1 respectively. Thus the answer is 6 + 0 + 3 + 0 + 1 + 1 = 11.

  For the second case, the answer is simply 3 + 0 + 0 = 3.

  Note : Each string will have at least one character - no need to check for empty strings :)
  -/

vc-preamble: |-
  def strLen (s : String) : Nat :=
    sorry

  def stringSuffix (s : String) : Nat :=
    sorry

vc-helpers: |

vc-definitions: |-
  def isRepeatedChar (s : String) : Bool :=
    sorry

vc-theorems: |-
  theorem string_suffix_positive (s : String) :
    stringSuffix s ≥ 0 :=
  sorry

  theorem string_suffix_ge_len (s : String) :
    stringSuffix s ≥ strLen s :=
  sorry

  theorem string_suffix_le_square (s : String) :
    stringSuffix s ≤ strLen s * strLen s :=
  sorry

  theorem string_suffix_repeated_char (s : String) :
    isRepeatedChar s → stringSuffix s = (strLen s * (strLen s + 1)) / 2 :=
  sorry

  theorem string_suffix_empty :
    stringSuffix "" = 0 :=
  sorry

  theorem string_suffix_slice (s : String) (i : Nat) :
    i < strLen s → stringSuffix (s.drop i) ≤ stringSuffix s :=
  sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

  /-
  info: 3
  -/
  #guard_msgs in
  #eval string_suffix "abc"

  /-
  info: 11
  -/
  #guard_msgs in
  #eval string_suffix "ababaa"

  /-
  info: 10
  -/
  #guard_msgs in
  #eval string_suffix "aaaa"

