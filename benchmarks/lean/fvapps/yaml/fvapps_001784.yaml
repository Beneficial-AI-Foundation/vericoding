vc-description: |-
  /-
  On an infinite number line (x-axis), we drop given squares in the order they are given.
  The i-th square dropped (positions[i] = (left, side_length)) is a square with the left-most point being positions[i][0] and sidelength positions[i][1].
  The square is dropped with the bottom edge parallel to the number line, and from a higher height than all currently landed squares.  We wait for each square to stick before dropping the next.
  The squares are infinitely sticky on their bottom edge, and will remain fixed to any positive length surface they touch (either the number line or another square).  Squares dropped adjacent to each other will not stick together prematurely.
  
  Return a list ans of heights.  Each height ans[i] represents the current highest height of any square we have dropped, after dropping squares represented by positions[0], positions[1], ..., positions[i].
  
  Example 1:
  
  Input: [[1, 2], [2, 3], [6, 1]]
  Output: [2, 5, 5]
  Explanation:
  
  After the first drop of positions[0] = [1, 2]:
  _aa
  _aa
  -------
  The maximum height of any square is 2.
  
  After the second drop of positions[1] = [2, 3]:
  __aaa
  __aaa
  __aaa
  _aa__
  _aa__
  --------------
  The maximum height of any square is 5.  
  The larger square stays on top of the smaller square despite where its center
  of gravity is, because squares are infinitely sticky on their bottom edge.
  
  After the third drop of positions[1] = [6, 1]:
  __aaa
  __aaa
  __aaa
  _aa
  _aa___a
  --------------
  The maximum height of any square is still 5.
  
  Thus, we return an answer of [2, 5, 5].
  
  Example 2:
  
  Input: [[100, 100], [200, 100]]
  Output: [100, 100]
  Explanation: Adjacent squares don't get stuck prematurely - only their bottom edge can stick to surfaces.
  
  Note:
  1 .
  1 .
  1 .
  -/
  
  /- Result length should match input length -/
  
  /- Heights are monotonically non-decreasing -/
  
  /- Each height is at least as tall as corresponding square -/
  
  /- Maximum height is bounded by sum of all side lengths -/
  
  /- Results are non-negative integers -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def fallingSquares (positions: List (List Int)) : List Int :=
    sorry

vc-theorems: |-
  variable (positions : List (List Int))
  variable (result : List Int := fallingSquares positions)
  
  theorem result_length :
    result.length = positions.length := 
  sorry
  
  theorem heights_monotonic {i : Nat} (h : i + 1 < result.length) :
    match result[i]?, result[i+1]? with
    | some x, some y => x ≥ 0 ∧ y ≥ x
    | _, _ => False
    := 
  sorry
  
  theorem heights_geq_sides :
    ∀ (i : Nat) (h : i < positions.length),
    match positions[i]?, result[i]? with
    | some pos, some height =>
      match pos.get? 1 with
      | some side => height ≥ side
      | none => True
    | _, _ => True 
    := 
  sorry
  
  theorem max_height_bound (sides : List Int) :
    (∀ i < positions.length,
      match positions[i]?, sides.get? i with
      | some pos, some side => pos.get? 1 = some side
      | _, _ => False) →
    result.length > 0 →
    ∀ h ∈ result, h ≤ sides.foldl (·+·) 0 := 
  sorry
  
  theorem results_nonneg :
    ∀ x ∈ result, x ≥ 0 := 
  sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
  
  /- Heights are monotonically non-decreasing -/
  
  theorem heights_monotonic {i : Nat} (h : i + 1 < result.length) :
    match result[i]?, result[i+1]? with
    | some x, some y => x ≥ 0 ∧ y ≥ x
    | _, _ => False
    := sorry
  
  /- Each height is at least as tall as corresponding square -/
  
  theorem heights_geq_sides : 
    ∀ (i : Nat) (h : i < positions.length), 
    match positions[i]?, result[i]? with
    | some pos, some height => 
      match pos.get? 1 with
      | some side => height ≥ side
      | none => True
    | _, _ => True
    := sorry
  
  /- Maximum height is bounded by sum of all side lengths -/
  
  theorem max_height_bound (sides : List Int) :
    (∀ i < positions.length, 
      match positions[i]?, sides.get? i with 
      | some pos, some side => pos.get? 1 = some side
      | _, _ => False) →
    result.length > 0 →
    ∀ h ∈ result, h ≤ sides.foldl (·+·) 0 := sorry
  
  /- Results are non-negative integers -/
  
  theorem results_nonneg : 
    ∀ x ∈ result, x ≥ 0 := sorry
  
  /--
  info: [2, 5, 5]
  -/
  #guard_msgs in
  #eval fallingSquares [[1, 2], [2, 3], [6, 1]]
  
  /--
  info: [100, 100]
  -/
  #guard_msgs in
  #eval fallingSquares [[100, 100], [200, 100]]
  
  /--
  info: [2, 2]
  -/
  #guard_msgs in
  #eval fallingSquares [[1, 2], [3, 1]]

