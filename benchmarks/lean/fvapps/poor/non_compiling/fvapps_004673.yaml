vc-description: |-
  /-
  Lets play some Pong! 
  
  ![pong](http://gifimage.net/wp-content/uploads/2017/08/pong-gif-3.gif)
  
  For those who don't know what Pong is, it is a simple arcade game where two players can move their paddles to hit a ball towards the opponent's side of the screen, gaining a point for each opponent's miss. You can read more about it [here](https://en.wikipedia.org/wiki/Pong).
  
  ___
  
  # Task:
  
  You must finish the `Pong` class. It has a constructor which accepts the `maximum score` a player can get throughout the game, and a method called `play`. This method determines whether the current player hit the ball or not, i.e. if the paddle is at the sufficient height to hit it back. There're 4 possible outcomes: player successfully hits the ball back, player misses the ball, player misses the ball **and his opponent reaches the maximum score winning the game**, either player tries to hit a ball despite the game being over. You can see the input and output description in detail below.
  
  ### "Play" method input:
  
  * ball position - The Y coordinate of the ball
  * player position - The Y coordinate of the centre(!) of the current player's paddle
  
  ### "Play" method output:
  
  One of the following strings:
  
  * `"Player X has hit the ball!"` - If the ball "hits" the paddle
  * `"Player X has missed the ball!"` - If the ball is above/below the paddle
  * `"Player X has won the game!"` - If one of the players has reached the maximum score
  * `"Game Over!"` - If the game has ended but either player still hits the ball
  
  ### Important notes:
  
  * Players take turns hitting the ball, always starting the game with the Player 1.
  * The paddles are `7` pixels in height.
  * The ball is `1` pixel in height.
  
  ___
  
  ## Example
  -/

vc-preamble: |-
  def Pong.play (game : Pong) (ballPos playerPos : Int) : String := sorry
  
  def Pong.game_over (game : Pong) : Bool := sorry

vc-helpers: |-

vc-definitions: |-
  def Int.abs (i : Int) : Int := sorry
  
  theorem pong_init_properties {maxScore : Nat} (h : maxScore ≥ 1) :
    let game := Pong.mk maxScore []
    game.maxScore = maxScore ∧ 
    game.scores = [] := sorry

vc-theorems: |-
  theorem hit_or_miss_range {maxScore : Nat} {ballPos playerPos : Int} 
    (h1 : maxScore ≥ 2) :
    let game := Pong.mk maxScore []
    let result := game.play ballPos playerPos
    (Int.abs (ballPos - playerPos) ≤ 3 → result.contains '.') ∧
    (Int.abs (ballPos - playerPos) > 3 ∧ ¬result.contains '.' → result.contains ' ') := sorry
  
  theorem alternating_players {maxScore : Nat} (h : maxScore ≥ 1) :
    let game := Pong.mk maxScore []
    let plays := [game.play 10 0, game.play 10 0, game.play 10 0, game.play 10 0]
    ∀ i, i + 1 < plays.length → 
      let p1 := plays[i]!
      let p2 := plays[i+1]!
      p1 ≠ p2 := sorry
  
  theorem game_over_condition {maxScore : Nat} (h : maxScore ≥ 1) :
    let game := Pong.mk maxScore []
    ∃ plays : List String, 
      let last := plays.getLast! 
      last.contains ' ' ∧
      game.play 0 0 = "Game Over!" := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

