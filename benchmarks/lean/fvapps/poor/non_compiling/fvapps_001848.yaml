vc-description: |-
  /-
  Implement the StreamChecker class as follows:
  
  StreamChecker(words): Constructor, init the data structure with the given words.
  query(letter): returns true if and only if for some k >= 1, the last k characters queried (in order from oldest to newest, including this letter just queried) spell one of the words in the given list.
  
  Example:
  StreamChecker streamChecker = new StreamChecker(["cd","f","kl"]); // init the dictionary.
  streamChecker.query('a');          // return false
  streamChecker.query('b');          // return false
  streamChecker.query('c');          // return false
  streamChecker.query('d');          // return true, because 'cd' is in the wordlist
  streamChecker.query('e');          // return false
  streamChecker.query('f');          // return true, because 'f' is in the wordlist
  streamChecker.query('g');          // return false
  streamChecker.query('h');          // return false
  streamChecker.query('i');          // return false
  streamChecker.query('j');          // return false
  streamChecker.query('k');          // return false
  streamChecker.query('l');          // return true, because 'kl' is in the wordlist
  
  Note:
  
  1 <= words.length <= 2000
  1 <= words[i].length <= 2000
  Words will only consist of lowercase English letters.
  Queries will only consist of lowercase English letters.
  The number of queries is at most 40000.
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def StreamChecker.query : StreamChecker → String → Bool
    | _, _ => sorry

vc-theorems: |-
  theorem empty_string_query_is_false (checker : StreamChecker) : 
    checker.query "" = false := by sorry
  
  theorem matches_found_bounded_by_word_length (checker : StreamChecker) (words : List String) 
      (word : String) (h : word ∈ words) :
      ∀ stream : List Char,
      (stream.map (fun c => checker.query c.toString)).countP id ≤ word.length := by sorry
  
  theorem binary_queries_bounded_results (checker : StreamChecker) (words : List String) 
      (h : words ≠ []) (maxlen : Nat) 
      (h_maxlen : maxlen = (List.map String.length words).foldl Nat.max 0) :
      ∀ stream : List Char,
      stream.length > maxlen + 1 →
      let results := stream.map (fun c => checker.query c.toString)
      (results.take maxlen).countP id ≤ 2 := by sorry
  
  theorem duplicate_words_equivalent_behavior (words : List String) :
    ∀ c : String,
    (StreamChecker.mk words).query c = 
    (StreamChecker.mk (List.eraseDups words)).query c := by sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

