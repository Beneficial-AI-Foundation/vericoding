vc-description: |-
  /-
  Given a random string consisting of numbers, letters, symbols, you need to sum up the numbers in the string. 
  
  Note:
  
  - Consecutive integers should be treated as a single number. eg, `2015` should be treated as a single number `2015`, NOT four numbers
  - All the numbers should be treaded as positive integer. eg, `11-14` should be treated as two numbers `11` and `14`. Same as `3.14`, should be treated as two numbers `3` and `14`
  - If no number was given in the string, it should return `0`
  
  Example:
  
  ```
  str = "In 2015, I want to know how much does iPhone 6+ cost?"
  ```
  
   The numbers are `2015`, `6`
  
  Sum is `2021`.
  -/

vc-preamble: |-
  def List.sum : List Nat â†’ Nat 
    | [] => 0
    | (x::xs) => x + sum xs

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def sum_from_string (s : String) : Nat :=
    sorry

vc-theorems: |-
  theorem sum_single_number (n : Nat) :
    sum_from_string (toString n) = n :=
    sorry
  
  theorem sum_empty_string :
    sum_from_string "" = 0 :=
    sorry
  
  /-
  info: 2021
  -/
  -- #guard_msgs in
  -- #eval sum_from_string "In 2015, I want to know how much does iPhone 6+ cost?"
  
  /-
  info: 4
  -/
  -- #guard_msgs in
  -- #eval sum_from_string "1+1=2"
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval sum_from_string "Hello World"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

