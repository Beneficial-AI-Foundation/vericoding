vc-description: |-
  /-
  You have a browser of one tab where you start on the homepage and you can visit another url, get back in the history number of steps or move forward in the history number of steps.
  Implement the BrowserHistory class:
  
  BrowserHistory(string homepage) Initializes the object with the homepage of the browser.
  void visit(string url) Visits url from the current page. It clears up all the forward history.
  string back(int steps) Move steps back in history. If you can only return x steps in the history and steps > x, you will return only x steps. Return the current url after moving back in history at most steps.
  string forward(int steps) Move steps forward in history. If you can only forward x steps in the history and steps > x, you will forward only x steps. Return the current url after forwarding in history at most steps.
  
  Example:
  Input:
  ["BrowserHistory","visit","visit","visit","back","back","forward","visit","forward","back","back"]
  [["leetcode.com"],["google.com"],["facebook.com"],["youtube.com"],[1],[1],[1],["linkedin.com"],[2],[2],[7]]
  Output:
  [null,null,null,null,"facebook.com","google.com","facebook.com",null,"linkedin.com","google.com","leetcode.com"]
  
  Explanation:
  BrowserHistory browserHistory = new BrowserHistory("leetcode.com");
  browserHistory.visit("google.com");       // You are in "leetcode.com". Visit "google.com"
  browserHistory.visit("facebook.com");     // You are in "google.com". Visit "facebook.com"
  browserHistory.visit("youtube.com");      // You are in "facebook.com". Visit "youtube.com"
  browserHistory.back(1);                   // You are in "youtube.com", move back to "facebook.com" return "facebook.com"
  browserHistory.back(1);                   // You are in "facebook.com", move back to "google.com" return "google.com"
  browserHistory.forward(1);                // You are in "google.com", move forward to "facebook.com" return "facebook.com"
  browserHistory.visit("linkedin.com");     // You are in "facebook.com". Visit "linkedin.com"
  browserHistory.forward(2);                // You are in "linkedin.com", you cannot move forward any steps.
  browserHistory.back(2);                   // You are in "linkedin.com", move back two steps to "facebook.com" then to "google.com". return "google.com"
  browserHistory.back(7);                   // You are in "google.com", you can move back only one step to "leetcode.com". return "leetcode.com"
  
  Constraints:
  
  1 <= homepage.length <= 20
  1 <= url.length <= 20
  1 <= steps <= 100
  homepage and url consist of  '.' or lower case English letters.
  At most 5000 calls will be made to visit, back, and forward.
  -/

vc-preamble: |-
  def BrowserHistory.new (homepage : String) : BrowserHistory := sorry
  def BrowserHistory.visit (self : BrowserHistory) (url : String) : BrowserHistory := sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def BrowserHistory.back (self : BrowserHistory) (steps : Nat) : (BrowserHistory × String) := sorry
  def BrowserHistory.forward (self : BrowserHistory) (steps : Nat) : (BrowserHistory × String) := sorry

vc-theorems: |-
  theorem browser_history_init (homepage : String) :
    let browser := BrowserHistory.new homepage
    browser.hashM[0]! = homepage ∧ 
    browser.currIndex = 0 ∧
    browser.maxIndex = 0 := sorry
  
  theorem sequential_visits (homepage : String) (urls : List String) :
    let browser := BrowserHistory.new homepage
    ∀ url ∈ urls, 
      let browser' := browser.visit url
      browser'.hashM[browser'.currIndex]! = url ∧
      browser'.currIndex = browser'.maxIndex := sorry
  
  theorem back_navigation (homepage : String) (urls : List String) (steps : Nat) :
    let browser := BrowserHistory.new homepage
    urls.foldl (fun b url => b.visit url) browser
    |> fun b => 
      let (b', result) := b.back steps
      let expected_index := min b.maxIndex steps
      b'.currIndex = expected_index ∧ 
      result = b'.hashM[expected_index]! := sorry
  
  theorem visit_after_back_clears_forward (homepage : String) (urls : List String) (back_steps : Nat) (new_url : String) :
    let browser := BrowserHistory.new homepage
    let browser' := urls.foldl (fun b url => b.visit url) browser
    let original_max := browser'.maxIndex
    let (browser'', _) := browser'.back back_steps
    let browser''' := browser''.visit new_url
    browser'''.maxIndex = browser'''.currIndex ∧
    (browser'''.maxIndex < original_max ∨ browser'''.maxIndex = urls.length) ∧
    browser'''.hashM[browser'''.currIndex]! = new_url := sorry
  
  theorem forward_navigation (homepage : String) (urls : List String) (steps : Nat) :
    let browser := BrowserHistory.new homepage
    let browser' := urls.foldl (fun b url => b.visit url) browser
    let (browser'', _) := browser'.back steps
    let (browser''', result) := browser''.forward steps
    result = browser'''.hashM[browser'''.currIndex]! ∧
    browser'''.currIndex ≤ browser'''.maxIndex := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

