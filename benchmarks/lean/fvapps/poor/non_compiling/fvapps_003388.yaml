vc-description: |-
  /-
  ### Task
   King Arthur and his knights are having a New Years party. Last year Lancelot was jealous of Arthur, because Arthur had a date and Lancelot did not, and they started a duel.
  
   To prevent this from happening again, Arthur wants to make sure that there are at least as many women as men at this year's party. He gave you a list of integers of all the party goers. 
  
   Arthur needs you to return true if he needs to invite more women or false if he is all set.
  
  ### Input/Output
  
   - `[input]` integer array `L` (`$a` in PHP)
  
    An array (guaranteed non-associative in PHP) representing the genders of the attendees, where `-1` represents `women` and `1` represents `men`.
  
    `2 <= L.length <= 50`
  
  - `[output]` a boolean value
  
    `true` if Arthur need to invite more women, `false` otherwise.
  -/

vc-preamble: |-
  def List.sum : List Int → Int 
    | [] => 0
    | x::xs => x + sum xs

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def invite_more_women (arr : List Int) : Bool := sorry
  
  theorem invite_more_women_sum_property (arr : List Int) 
    (h : arr.length > 0)
    (h₁ : ∀ x ∈ arr, x = 1 ∨ x = -1) :
    invite_more_women arr = (List.sum arr > 0) := sorry

vc-theorems: |-
  theorem party_balance_monotonicity (arr : List Int)
    (h : arr.length > 0)
    (h₁ : ∀ x ∈ arr, x = 1 ∨ x = -1) :
    invite_more_women (arr ++ [-1]) ≤ invite_more_women arr ∧ 
    invite_more_women arr ≤ invite_more_women (arr ++ [1]) := sorry
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval invite_more_women [1, -1, 1]
  
  /-
  info: False
  -/
  -- #guard_msgs in
  -- #eval invite_more_women [-1, -1, -1]
  
  /-
  info: False
  -/
  -- #guard_msgs in
  -- #eval invite_more_women [1, -1]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

