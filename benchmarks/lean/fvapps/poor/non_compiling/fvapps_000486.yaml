vc-description: |-
  /-
  We have n jobs, where every job is scheduled to be done from startTime[i] to endTime[i], obtaining a profit of profit[i].
  You're given the startTime , endTime and profit arrays, you need to output the maximum profit you can take such that there are no 2 jobs in the subset with overlapping time range.
  If you choose a job that ends at time X you will be able to start another job that starts at time X.
  
  Example 1:
  
  Input: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]
  Output: 120
  Explanation: The subset chosen is the first and fourth job. 
  Time range [1-3]+[3-6] , we get profit of 120 = 50 + 70.
  
  Example 2:
  
  Input: startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]
  Output: 150
  Explanation: The subset chosen is the first, fourth and fifth job. 
  Profit obtained 150 = 20 + 70 + 60.
  
  Example 3:
  
  Input: startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]
  Output: 6
  
  Constraints:
  
  1 <= startTime.length == endTime.length == profit.length <= 5 * 10^4
  1 <= startTime[i] < endTime[i] <= 10^9
  1 <= profit[i] <= 10^4
  -/

vc-preamble: |-
  def List.sum (xs: List Int) : Int :=
    match xs with
    | [] => 0
    | x::rest => x + sum rest

vc-helpers: |-

vc-definitions: |-
  def jobScheduling (startTimes endTimes profits: List Int) : Int :=
    sorry

vc-theorems: |-
  theorem job_scheduling_basic_properties 
    (startTimes endTimes profits: List Int)
    (h1: startTimes.length = endTimes.length)
    (h2: endTimes.length = profits.length)
    (h3: ∀ i, i < startTimes.length → startTimes[i]! > 0)
    (h4: ∀ i, i < endTimes.length → endTimes[i]! > startTimes[i]!)
    (h5: ∀ i, i < profits.length → profits[i]! > 0) :
    let result := jobScheduling startTimes endTimes profits
    -- Result is non-negative
    result ≥ 0 ∧
    -- Result doesn't exceed sum of profits  
    result ≤ List.sum profits :=
    sorry
  
  theorem job_scheduling_single_job
    (startTime endTime profit: Int)
    (h1: startTime > 0)
    (h2: endTime > startTime)
    (h3: profit > 0) :
    jobScheduling [startTime] [endTime] [profit] = profit :=
    sorry
  
  /-
  info: 120
  -/
  -- #guard_msgs in
  -- #eval jobScheduling [1, 2, 3, 3] [3, 4, 5, 6] [50, 10, 40, 70]
  
  /-
  info: 150
  -/
  -- #guard_msgs in
  -- #eval jobScheduling [1, 2, 3, 4, 6] [3, 5, 10, 6, 9] [20, 20, 100, 70, 60]
  
  /-
  info: 6
  -/
  -- #guard_msgs in
  -- #eval jobScheduling [1, 1, 1] [2, 3, 4] [5, 6, 4]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

