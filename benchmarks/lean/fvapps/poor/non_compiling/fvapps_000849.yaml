vc-description: |-
  /-
  	The following graph G is called a Petersen graph and its vertices have been numbered from 0 to 9. Some letters have also been assigned to vertices of G, as can be seen from the following picture:
  
  	Let's consider a walk W in graph G, which consists of L vertices W1, W2, ..., WL, such that Wi is connected with Wi + 1 for 1 ≤ i < L. A string S of L letters 'A'-'E' is realized by walk W if the sequence of letters written along W is equal to S. Vertices can be visited multiple times while walking along W.
  
  For example, S = 'ABBECCD' is realized by W = (0, 1, 6, 9, 7, 2, 3).
  Your task is to determine whether there is a walk W which realizes a given string S in graph G, and if so, find the lexicographically least such walk.
  
  -----Input-----
  
  	The first line of the input contains one integer T denoting the number of testcases to process.
  
  	The only line of each testcase contains one string S. It is guaranteed that S only consists of symbols 'A'-'E'.
  
  -----Output-----
  
  	The output should contain exactly T lines, one line per each testcase in the order of their appearance. For each testcase, if there is no walk W which realizes S, then output -1. Otherwise, you should output the least lexicographical walk W which realizes S. Since all of the vertices are numbered from 0 to 9, then it can be encoded as a string consisting of symbols '0'-'9' (see the "Examples" section for more details).
  
  -----Constraints-----
  1 ≤ T ≤ 8;
  1 ≤ |S| ≤ 100000(105).
  
  -----Examples-----
  Input:
  2
  AAB
  AABE
  
  Output:
  501
  -1
  -/

vc-preamble: |-
  def find_petersen_walk : List Letter → Option (List Nat) :=
    sorry

vc-helpers: |-

vc-definitions: |-
  def isAdjacent (v1 v2: Nat) : Bool :=
    match v1, v2 with
    | 0, n => n = 1 ∨ n = 4 ∨ n = 5
    | 1, n => n = 0 ∨ n = 2 ∨ n = 6
    | 2, n => n = 1 ∨ n = 3 ∨ n = 7
    | 3, n => n = 2 ∨ n = 4 ∨ n = 8
    | 4, n => n = 0 ∨ n = 3 ∨ n = 9
    | 5, n => n = 0 ∨ n = 7 ∨ n = 8
    | 6, n => n = 1 ∨ n = 8 ∨ n = 9
    | 7, n => n = 2 ∨ n = 5 ∨ n = 9
    | 8, n => n = 3 ∨ n = 5 ∨ n = 6
    | 9, n => n = 4 ∨ n = 6 ∨ n = 7
    | _, _ => false

vc-theorems: |-
  theorem petersen_walk_properties (input: List Letter) :
    match find_petersen_walk input with
    | none => True 
    | some result => 
      -- Length matches
      result.length = input.length ∧
      -- First vertex validation
      (match input.head? with
       | none => True
       | some Letter.A => result.head? = some 0 ∨ result.head? = some 5
       | some Letter.B => result.head? = some 1 ∨ result.head? = some 6 
       | some Letter.C => result.head? = some 2 ∨ result.head? = some 7
       | some Letter.D => result.head? = some 3 ∨ result.head? = some 8
       | some Letter.E => result.head? = some 4 ∨ result.head? = some 9)
    := sorry
  
  theorem adjacent_vertices (input: List Letter) :
    match find_petersen_walk input with
    | none => True
    | some result =>
      input.length ≥ 2 →
      ∀ i, i < result.length - 1 →
        match result.get? i, result.get? (i+1) with
        | some v1, some v2 => isAdjacent v1 v2
        | _, _ => False
    := sorry
  
  theorem minimum_path (input: List Letter) (h: input.length > 0) :
    match find_petersen_walk input with
    | none => True
    | some result =>
      match input.head?, result.head? with
      | some Letter.A, some n => n = 0 ∨ n = 5
      | some Letter.B, some n => n = 1 ∨ n = 6
      | some Letter.C, some n => n = 2 ∨ n = 7
      | some Letter.D, some n => n = 3 ∨ n = 8
      | some Letter.E, some n => n = 4 ∨ n = 9
      | _, _ => False
    := sorry

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

