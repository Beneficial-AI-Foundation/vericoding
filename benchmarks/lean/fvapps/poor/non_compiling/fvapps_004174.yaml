vc-description: |-
  /-
  Section numbers are strings of dot-separated integers. The highest level sections (chapters) are numbered 1, 2, 3, etc. Second level sections are numbered 1.1, 1.2, 1.3, 2.1, 2.2, 2.3, etc. Next level sections are numbered 1.1.1, 1.1.2, 1.1.2, 1.2.1, 1.2.2, erc. There is no bound on the number of sections a document may have, nor is there any bound on the number of levels. 
  
  A section of a certain level may appear directly inside a section several levels higher without the levels between. For example, section 1.0.1 may appear directly under section 1, without there being any level 2 section. Section 1.1 comes after section 1.0.1. Sections with trailing ".0" are considered to be the same as the section with the trailing ".0" truncated. Thus, section 1.0 is the same as section 1, and section 1.2.0.0 is the same as section 1.2. 
  
  ```if:python
  Write a function `compare(section1, section2)` that returns `-1`, `0`, or `1` depending on whether `section1` is before, same as, or after `section2` respectively.
  ```
  ```if:javascript
  Write a function `cmp(section1, section2)` that returns `-1`, `0`, or `1` depending on whether `section1` is before, same as, or after `section2` respectively.
  ```
  ```if:haskell
  Write a function `cmp section1 section2` that returns `LT`, `EQ` or `GT` depending on whether `section1` is before, same as, or after `section2` respectively.
  ```
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def compare (v1 v2 : String) : Int := sorry
  
  @[simp] theorem compare_symmetry {v1 v2 : String} :
    VersionCompare.compare v1 v2 = -(VersionCompare.compare v2 v1) := sorry
  
  @[simp] theorem compare_identity {v : String} :
    VersionCompare.compare v v = 0 := sorry

vc-theorems: |-
  theorem trailing_zeros_ignored {v : String} :
    VersionCompare.compare v (v ++ ".0") = 0 ∧ 
    VersionCompare.compare v (v ++ ".0.0") = 0 := sorry
  
  theorem compare_transitivity {v1 v2 v3 : String} :
    VersionCompare.compare v1 v2 ≥ 0 → 
    VersionCompare.compare v2 v3 ≥ 0 → 
    VersionCompare.compare v1 v3 ≥ 0 := sorry
  
  theorem compare_returns_valid {v1 v2 : String} :
    VersionCompare.compare v1 v2 = -1 ∨ 
    VersionCompare.compare v1 v2 = 0 ∨ 
    VersionCompare.compare v1 v2 = 1 := sorry
  
  end VersionCompare
  
  /-
  info: -1
  -/
  -- #guard_msgs in
  -- #eval compare "1" "2"
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval compare "3" "3.0.0"
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval compare "1.2.3.4" "1.2.3.4"
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval compare "1.2.1" "1.2.0"
  
  /-
  info: -1
  -/
  -- #guard_msgs in
  -- #eval compare "3.0.1" "3.1"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

