vc-description: |-
  /-
  You are given a length of string and two thumbtacks. On thumbtack goes into the focus point *F₀* with coordinates *x₀* and *y₀*, and the other does into point *F₁* with points *x₁* and *y₁*. The string is then tied at the ends to the thumbtacks and has length *l* excluding the knots at the ends. If you pull the string taught with a pencil and draw around the plane you'll have an ellipse with focuses at *F₀* and *F₁*. Given a new point *P*, determine if it falls inside of the ellipse.
  
  You must write a function that takes arguments `f0`, `f1`, `l`, and `p` and returns `true` or `false` depending on whether or not `p` falls inside the ellipse. 
  
  Each of `f0`, `f1`, and `p` has has properties `x` and `y` for its coordinates.
  
  You will never be given the case where the string is too short to reach between the points.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def ellipse_contains_point (f0 : Point) (f1 : Point) (l : Float) (p : Point) : Bool :=
    sorry

vc-theorems: |-
  theorem ellipse_contains_point_bool_result (f0 f1 : Point) (l : Float) (p : Point)
    (h : l > 0) : 
    (ellipse_contains_point f0 f1 l p = true ∨ ellipse_contains_point f0 f1 l p = false) :=
  sorry
  
  theorem coincident_foci_contains_focus (f0 : Point) (l : Float)
    (h : l > 0) :
    ellipse_contains_point f0 f0 l f0 = true :=
  sorry
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval ellipse_contains_point {"x": 0, "y": 0} {"x": 0, "y": 0} 2 {"x": 0, "y": 0}
  
  /-
  info: False
  -/
  -- #guard_msgs in
  -- #eval ellipse_contains_point f0 f1 l {"x": 1, "y": 1}
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval ellipse_contains_point {"x": -1, "y": 0} {"x": 1, "y": 0} 4 {"x": 0, "y": 1}

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

