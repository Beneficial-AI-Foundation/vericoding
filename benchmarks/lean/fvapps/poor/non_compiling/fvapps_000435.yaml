vc-description: |-
  /-
  Given an array nums, you are allowed to choose one element of nums and change it by any value in one move.
  Return the minimum difference between the largest and smallest value of nums after perfoming at most 3 moves.
  
  Example 1:
  Input: nums = [5,3,2,4]
  Output: 0
  Explanation: Change the array [5,3,2,4] to [2,2,2,2].
  The difference between the maximum and minimum is 2-2 = 0.
  Example 2:
  Input: nums = [1,5,0,10,14]
  Output: 1
  Explanation: Change the array [1,5,0,10,14] to [1,1,0,1,1]. 
  The difference between the maximum and minimum is 1-0 = 1.
  
  Example 3:
  Input: nums = [6,6,0,1,1,4,6]
  Output: 2
  
  Example 4:
  Input: nums = [1,5,6,14,15]
  Output: 1
  
  Constraints:
  
  1 <= nums.length <= 10^5
  -10^9 <= nums[i] <= 10^9
  -/

vc-preamble: |-
  def min_difference (nums : List Int) : Int := sorry
  
  theorem min_difference_small_list {nums : List Int} (h : nums.length ≤ 4) : 
    min_difference nums = 0 := sorry

vc-helpers: |-

vc-definitions: |-
  def isSorted (nums : List Int) : Bool := sorry
  
  theorem min_difference_sort_invariant {nums : List Int} :
    min_difference nums = min_difference (List.filter (fun x => true) nums) := sorry

vc-theorems: |-
  theorem min_difference_nonnegative {nums : List Int} :
    min_difference nums ≥ 0 := sorry
  
  theorem min_difference_bounded {nums : List Int} (h : nums.length > 0) :
    min_difference nums ≤ (nums.maximum? |>.getD 0) - (nums.minimum? |>.getD 0) := sorry
  
  theorem min_difference_large_lists {nums : List Int} (h : nums.length ≥ 5) :
    ∃ d1 d2 d3 d4 : Int, min_difference nums = min d1 (min d2 (min d3 d4)) := sorry
  
  /-
  info: 0
  -/
  -- #guard_msgs in
  -- #eval min_difference [2, 3, 4, 5]
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval min_difference [1, 5, 0, 10, 14]
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval min_difference [6, 6, 0, 1, 1, 4, 6]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded

