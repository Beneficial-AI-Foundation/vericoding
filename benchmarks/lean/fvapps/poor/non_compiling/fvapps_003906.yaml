vc-description: |-
  /-
  ## Emotional Sort ( ︶︿︶)
  
  You'll have a function called "**sortEmotions**" that will return an array of **emotions** sorted. It has two parameters, the first parameter called "**arr**" will expect an array of **emotions** where an **emotion** will be one of the following:
  
  - **:D** -> Super Happy
  - **:)** -> Happy
  - **:|** -> Normal
  - **:(** -> Sad
  - **T\_T** -> Super Sad
  
  Example of the array:``[ 'T_T', ':D', ':|', ':)', ':(' ]``
  
  And the second parameter is called "**order**", if this parameter is **true** then the order of the emotions will be descending (from **Super Happy** to **Super Sad**) if it's **false** then it will be ascending (from **Super Sad** to **Super Happy**)
  
  Example if **order** is true with the above array: ``[ ':D', ':)', ':|', ':(', 'T_T' ]``
  
  - Super Happy -> Happy -> Normal -> Sad -> Super Sad
  
  If **order** is false: ``[ 'T_T', ':(', ':|', ':)', ':D' ]``
  
  - Super Sad -> Sad -> Normal -> Happy -> Super Happy
  
  Example:
  ```
  arr = [':D', ':|', ':)', ':(', ':D']
  sortEmotions(arr, true) // [ ':D', ':D', ':)', ':|', ':(' ]
  sortEmotions(arr, false) // [ ':(', ':|', ':)', ':D', ':D' ]
  
  ```
  
  **More in test cases!**
  
  Notes:
  - The array could be empty, in that case return the same empty array ¯\\\_( ツ )\_/¯
  - All **emotions** will be valid
  
  ## Enjoy! (づ｡◕‿‿◕｡)づ
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def valid_emotions := [":D", ":)", ":|", ":(", "T_T"]
  
  def sort_emotions (emotions : List String) (ascending : Bool) : List String :=
    sorry

vc-theorems: |-
  theorem sort_emotions_length_preserved 
    (emotions : List String) (ascending : Bool) : 
    List.length (sort_emotions emotions ascending) = List.length emotions :=
    sorry
  
  theorem sort_emotions_elements_preserved 
    (emotions : List String) (ascending : Bool) :
    List.all (sort_emotions emotions ascending) (· ∈ emotions) ∧ 
    List.all emotions (· ∈ sort_emotions emotions ascending) :=
    sorry
  
  theorem sort_emotions_ascending_ordered
    (emotions : List String) (h : List.length emotions > 1) :
    let result := sort_emotions emotions true
    ∀ i, ∀ h : i + 1 < result.length,
      let idx₁ := ⟨i, Nat.lt_trans (Nat.lt_succ_self i) h⟩
      let idx₂ := ⟨i + 1, h⟩
      let pos₁ := valid_emotions.indexOf (result.get idx₁)
      let pos₂ := valid_emotions.indexOf (result.get idx₂)
      pos₁ ≤ pos₂ :=
    sorry
  
  theorem sort_emotions_descending_ordered
    (emotions : List String) (h : List.length emotions > 1) :
    let result := sort_emotions emotions false
    ∀ i, ∀ h : i + 1 < result.length,
      let idx₁ := ⟨i, Nat.lt_trans (Nat.lt_succ_self i) h⟩
      let idx₂ := ⟨i + 1, h⟩
      let pos₁ := valid_emotions.indexOf (result.get idx₁)
      let pos₂ := valid_emotions.indexOf (result.get idx₂)
      pos₁ ≥ pos₂ :=
    sorry
  
  theorem sort_emotions_empty (ascending : Bool) :
    sort_emotions [] ascending = [] :=
    sorry
  
  theorem sort_emotions_single (emotion : String) (ascending : Bool)
    (h : emotion ∈ valid_emotions) :
    sort_emotions [emotion] ascending = [emotion] :=
    sorry
  
  /-
  info: [':D', ':D', ':(', 'T_T']
  -/
  -- #guard_msgs in
  -- #eval sort_emotions [":D", "T_T", ":D", ":("] True
  
  /-
  info: ['T_T', ':(', ':(', ':D']
  -/
  -- #guard_msgs in
  -- #eval sort_emotions ["T_T", ":D", ":(", ":("] False
  
  /-
  info: []
  -/
  -- #guard_msgs in
  -- #eval sort_emotions [] True

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

