vc-description: |-
  /-
  Everyday we go to different places to get our things done. Those places can be represented by specific location points `[ [, ], ... ]` on a map. I will be giving you an array of arrays that contain coordinates of the different places I had been on a particular day. Your task will be to find `peripheries (outermost edges)` of the bounding box that contains all the points. The response should only contain `Northwest and Southeast` points as follows: `{ "nw": [, ], "se": [ , ] }`. You are adviced to draw the points on a 2D plan to visualize:
  
  ```
                           N
                           ^
      p(nw)  ______________|________________
            |              |                |
            |              | all other      |   
            |              |  points        |
            |              |                |
       ----------------------------------------> E          
            |              |                |
            |  all other   |                |
            |  points      |                |
            |______________|________________|
                           |                  p(se)
  ```
  -/

vc-preamble: |-
  def box (coords : List (Float × Float)) : Box :=
    sorry
  
  def minList (l : List Float) : Float :=
    sorry

vc-helpers: |-

vc-definitions: |-
  def maxList (l : List Float) : Float :=
    sorry

vc-theorems: |-
  theorem box_bounds (coords : List (Float × Float)) (h : coords.length > 0) :
    let b := box coords
    let lats := coords.map (·.1)
    let longs := coords.map (·.2)
    b.nw.lat ≥ minList lats ∧ 
    b.nw.lat ≤ maxList lats ∧
    b.nw.long ≥ minList longs ∧
    b.nw.long ≤ maxList longs ∧
    b.se.lat ≥ minList lats ∧
    b.se.lat ≤ maxList lats ∧
    b.se.long ≥ minList longs ∧
    b.se.long ≤ maxList longs ∧
    b.nw.lat ≥ b.se.lat ∧
    b.se.long ≥ b.nw.long :=
    sorry
  
  theorem single_point (coord : Float × Float) :
    let b := box [coord]
    b.nw.lat = coord.1 ∧
    b.nw.long = coord.2 ∧
    b.se.lat = coord.1 ∧
    b.se.long = coord.2 :=
    sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

