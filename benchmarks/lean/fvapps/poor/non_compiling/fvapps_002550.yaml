vc-description: |-
  /-
  It's tricky keeping track of who is owed what when spending money in a group. Write a function to balance the books.
  
  * The function should take one parameter: an object/dict with two or more name-value pairs which represent the members of the group and the amount spent by each.
  * The function should return an object/dict with the same names, showing how much money the members should pay or receive.
  
  **Further points:**
  
  * The values should be positive numbers if the person should receive money from the group, negative numbers if they owe money to the group.
  * If value is a decimal, round to two decimal places.
  
  Translations and comments (and upvotes!) welcome.
  
  ### Example
  
  3 friends go out together: A spends £20, B spends £15, and C spends £10. The function should return an object/dict showing that A should receive £5, B should receive £0, and C should pay £5.
  -/

vc-preamble: |-
  def List.sum (xs : List Int) : Int :=
    match xs with
    | [] => 0
    | x::xs => x + xs.sum
  
  def Int.toFloat (i : Int) : Float :=
    Float.ofInt i
  
  structure BillDict where
    keys : List String 
    values : List Int
    size : Nat

vc-helpers: |-

vc-definitions: |-
  def split_the_bill (bill : BillDict) : BillDict :=
    sorry

vc-theorems: |-
  theorem split_bill_preserves_keys (bill : BillDict) :
    (split_the_bill bill).keys = bill.keys := by
    sorry
  
  theorem split_bill_preserves_differences (bill : BillDict) (k : String) :
    k ∈ bill.keys →
    let mean := (bill.values.sum.toFloat) / (Float.ofNat bill.size)
    k ∈ (split_the_bill bill).keys →
    let orig_val := bill.values[bill.keys.indexOf k]!
    let new_val := (split_the_bill bill).values[bill.keys.indexOf k]!
    new_val.toFloat = orig_val.toFloat - mean := by
    sorry
  
  theorem split_bill_input_size_bounds (bill : BillDict) :
    2 ≤ bill.size ∧ bill.size ≤ 10 →
    (∀ v ∈ bill.values, 0 ≤ v ∧ v ≤ 1000) →
    (split_the_bill bill).size = bill.size := by
    sorry
  
  /-
  info: expected1
  -/
  -- #guard_msgs in
  -- #eval split_the_bill {"A": 20, "B": 15, "C": 10}
  
  /-
  info: expected2
  -/
  -- #guard_msgs in
  -- #eval split_the_bill {"A": 40, "B": 25, "X": 10}
  
  /-
  info: expected3
  -/
  -- #guard_msgs in
  -- #eval split_the_bill {"A": 40, "B": 25, "C": 10, "D": 153, "E": 58}

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

