vc-description: |-
  /-
  # Task
   Given an array `arr`, find the rank of the element at the ith position.
  
   The `rank` of the arr[i] is a value equal to the number of elements `less than or equal to` arr[i] standing before arr[i], plus the number of elements `less than` arr[i] standing after arr[i].
  
  # Example
  
   For `arr = [2,1,2,1,2], i = 2`, the result should be `3`.
  
   There are 2 elements `less than or equal to` arr[2] standing before arr[2]: 
  
   `arr[0] <= arr[2]`
  
   `arr[1] <= arr[2]`
  
   There is only 1 element `less than` arr[2] standing after arr[2]: 
  
   `arr[3] < arr[2]`
  
   So the result is `2 + 1 = 3`.
  
  # Input/Output
  
   - `[input]` integer array `arr`
  
    An array of integers.
  
    `3 <= arr.length <= 50.`
  
   - `[input]` integer `i`
  
    Index of the element whose rank is to be found.
  
   - `[output]` an integer
  
    Rank of the element at the ith position.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def rank_of_element (arr : List Int) (i : Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem rank_within_bounds {arr : List Int} {i : Nat} (h : i < arr.length) :
    let rank := rank_of_element arr i
    0 ≤ rank ∧ rank ≤ arr.length :=
  sorry
  
  theorem rank_exceeds_strictly_less {arr : List Int} {i : Nat} (h : i < arr.length) :
    let rank := rank_of_element arr i
    let target := arr[i]
    let strictly_less := (List.enum arr).filter (fun p => p.2 < target ∧ p.1 ≠ i) |>.length
    rank ≥ strictly_less :=
  sorry
  
  /-
  info: 3
  -/
  -- #guard_msgs in
  -- #eval rank_of_element [2, 1, 2, 1, 2] 2
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval rank_of_element [2, 1, 2, 2, 2] 2
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval rank_of_element [3, 2, 3, 4, 1] 1

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

