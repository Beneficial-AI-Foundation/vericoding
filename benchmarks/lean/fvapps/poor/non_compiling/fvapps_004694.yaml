vc-description: |-
  /-
  The function must return the sequence of titles that match the string passed as an argument. 
  
  ```if:javascript
  TITLES is a preloaded sequence of strings. 
  ```
  
  ```python
  titles = ['Rocky 1', 'Rocky 2', 'My Little Poney']
  search(titles, 'ock') --> ['Rocky 1', 'Rocky 2']
  ```
  
  But the function return some weird result and skip some of the matching results.
  
  Does the function have special movie taste? 
  
  Let's figure out !
  -/

vc-preamble: |-
  def search (titles : List String) (term : String) : List String :=
    sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def containsInsensitive (s₁ s₂ : String) : Bool :=
    sorry

vc-theorems: |-
  theorem search_case_insensitive (titles : List String) (term : String) :
    ∀ t ∈ search titles term, containsInsensitive t term = true := by
    sorry
  
  theorem search_returns_subset (titles : List String) (term : String) :
    ∀ t ∈ search titles term, t ∈ titles := by
    sorry
  
  theorem search_order_preserved (titles : List String) (term : String) :
    let result := search titles term
    ∀ i j, i < j → i < result.length → j < result.length → 
      (titles.indexOf (result[i]!) < titles.indexOf (result[j]!)) := by
    sorry
  
  theorem search_empty_term (titles : List String) :
    search titles "" = titles := by
    sorry
  
  theorem search_empty_titles (term : String) :
    search [] term = [] := by
    sorry
  
  /-
  info: ['Rocky 1', 'Rocky 2']
  -/
  -- #guard_msgs in
  -- #eval search ["Rocky 1", "Rocky 2", "My Little Poney"] "ock"
  
  /-
  info: ['ROCK star', 'rock bottom', 'ROCKY']
  -/
  -- #guard_msgs in
  -- #eval search ["ROCK star", "rock bottom", "ROCKY"] "rOcK"
  
  /-
  info: []
  -/
  -- #guard_msgs in
  -- #eval search ["Star Wars", "The Matrix", "Inception"] "rock"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

