vc-description: |-
  /-
  Balanced strings are those who have equal quantity of 'L' and 'R' characters.
  Given a balanced string s split it in the maximum amount of balanced strings.
  Return the maximum amount of splitted balanced strings.
  
  Example 1:
  Input: s = "RLRRLLRLRL"
  Output: 4
  Explanation: s can be split into "RL", "RRLL", "RL", "RL", each substring contains same number of 'L' and 'R'.
  
  Example 2:
  Input: s = "RLLLLRRRLR"
  Output: 3
  Explanation: s can be split into "RL", "LLLRRR", "LR", each substring contains same number of 'L' and 'R'.
  
  Example 3:
  Input: s = "LLLLRRRR"
  Output: 1
  Explanation: s can be split into "LLLLRRRR".
  
  Example 4:
  Input: s = "RLRRRLLRLL"
  Output: 2
  Explanation: s can be split into "RL", "RRRLLRLL", since each substring contains an equal number of 'L' and 'R'
  
  Constraints:
  
  1 <= s.length <= 1000
  s[i] = 'L' or 'R'
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def balanced_string_split (s: String) : Nat :=
    sorry

vc-theorems: |-
  theorem empty_string_split:
    balanced_string_split "" = 0 :=
    sorry
  
  theorem single_char_split:
    balanced_string_split "R" = 0 ∧ balanced_string_split "L" = 0 :=
    sorry
  
  theorem balanced_blocks_split (n: Nat) (h: n > 0):
    balanced_string_split (String.mk (List.join (List.replicate n ['R', 'R', 'L', 'L']))) = n :=
    sorry
  
  /-
  info: 4
  -/
  -- #guard_msgs in
  -- #eval balanced_string_split "RLRRLLRLRL"
  
  /-
  info: 3
  -/
  -- #guard_msgs in
  -- #eval balanced_string_split "RLLLLRRRLR"
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval balanced_string_split "LLLLRRRR"

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

