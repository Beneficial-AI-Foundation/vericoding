vc-description: |-
  /-
  Adding tip to a restaurant bill in a graceful way can be tricky, thats why you need make a function for it.
  
  The function will receive the restaurant bill (always a positive number) as an argument. You need to 1) **add at least 15%** in tip, 2) round that number up to an *elegant* value and 3) return it.
  
  What is an *elegant* number? It depends on the magnitude of the number to be rounded. Numbers below 10 should simply be rounded to whole numbers. Numbers 10 and above should be rounded like this:
  
  10 - 99.99... ---> Round to number divisible by 5
  
  100 - 999.99... ---> Round to number divisible by 50
  
  1000 - 9999.99... ---> Round to number divisible by 500
  
  And so on...
  
  Good luck!
  
  ## Examples
  ```
   1  -->    2
   7  -->    9
  12  -->   15
  86  -->  100
  ```
  -/

vc-preamble: |-

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def graceful_tipping (bill : NonNegFloat) : Float := sorry
  
  theorem tip_at_least_15_percent (bill : NonNegFloat) 
    (h1 : bill.val ≥ 0.01) 
    (h2 : bill.val ≤ 10000) :
    graceful_tipping bill ≥ bill.val * 1.15 := sorry

vc-theorems: |-
  theorem result_is_clean_number (bill : NonNegFloat)
    (h1 : bill.val ≥ 0.01)
    (h2 : bill.val ≤ 10000) :
    let result := graceful_tipping bill
    let intResult := Float.toUInt64 result 
    (bill.val * 1.15 ≥ 10 →
      let magnitude := UInt64.ofNat (10 ^ (String.length (toString intResult) - 1))
      intResult % (magnitude / 2) = 0) := sorry
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval graceful_tipping 1
  
  /-
  info: 15
  -/
  -- #guard_msgs in
  -- #eval graceful_tipping 12
  
  /-
  info: 100
  -/
  -- #guard_msgs in
  -- #eval graceful_tipping 86
  
  /-
  info: 1500
  -/
  -- #guard_msgs in
  -- #eval graceful_tipping 1149

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

