vc-description: |-
  /-
  Given a binary tree, write a function to get the maximum width of the given tree. The width of a tree is the maximum width among all levels. The binary tree has the same structure as a full binary tree, but some nodes are null. 
  
  The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the null nodes between the end-nodes are also counted into the length calculation.
  
  Example 1:
  
  Input: 
  
             1
           /   \
          3     2
         / \     \  
        5   3     9 
  
  Output: 4
  Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9).
  
  Example 2:
  
  Input: 
  
            1
           /  
          3    
         / \       
        5   3     
  
  Output: 2
  Explanation: The maximum width existing in the third level with the length 2 (5,3).
  
  Example 3:
  
  Input: 
  
            1
           / \
          3   2 
         /        
        5      
  
  Output: 2
  Explanation: The maximum width existing in the second level with the length 2 (3,2).
  
  Example 4:
  
  Input: 
  
            1
           / \
          3   2
         /     \  
        5       9 
       /         \
      6           7
  Output: 8
  Explanation:The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7).
  
  Note:
  Answer will in the range of 32-bit signed integer.
  -/

vc-preamble: |-
  def widthOfBinaryTree : TreeNode → Nat
    | _ => sorry

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-definitions: |-
  def getHeight : TreeNode → Nat
    | TreeNode.nil => 0
    | TreeNode.node _ l r => 1 + Nat.max (getHeight l) (getHeight r)

vc-theorems: |-
  theorem width_is_nonnegative (t : TreeNode) :
    widthOfBinaryTree t ≥ 0 := 
    sorry
  
  theorem width_bounded_by_height (t : TreeNode) :
    widthOfBinaryTree t ≤ 2 ^ (getHeight t) :=
    sorry
  
  theorem empty_tree_width :
    widthOfBinaryTree TreeNode.nil = 0 :=
    sorry
  
  theorem single_node_width (v : Int) :
    widthOfBinaryTree (TreeNode.node v TreeNode.nil TreeNode.nil) = 1 :=
    sorry
  
  theorem linear_tree_width (v : Int) :
    let leftTree := TreeNode.node v 
      (TreeNode.node v 
        (TreeNode.node v 
          (TreeNode.node v TreeNode.nil TreeNode.nil) 
          TreeNode.nil)
        TreeNode.nil)
      TreeNode.nil
    let rightTree := TreeNode.node v 
      TreeNode.nil
      (TreeNode.node v 
        TreeNode.nil
        (TreeNode.node v 
          TreeNode.nil
          (TreeNode.node v TreeNode.nil TreeNode.nil)))
    widthOfBinaryTree leftTree = 1 ∧ widthOfBinaryTree rightTree = 1 :=
    sorry
  
  /-
  info: 4
  -/
  -- #guard_msgs in
  -- #eval widthOfBinaryTree TreeNode(1)
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval widthOfBinaryTree TreeNode(1)
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval widthOfBinaryTree TreeNode(1)

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

