vc-description: |-
  /-
  Given a binary tree, we install cameras on the nodes of the tree. 
  Each camera at a node can monitor its parent, itself, and its immediate children.
  Calculate the minimum number of cameras needed to monitor all nodes of the tree.
  
  Example 1:
  
  Input: [0,0,null,0,0]
  Output: 1
  Explanation: One camera is enough to monitor all nodes if placed as shown.
  
  Example 2:
  
  Input: [0,0,null,0,null,0,null,null,0]
  Output: 2
  Explanation: At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.
  
  Note:
  
  The number of nodes in the given tree will be in the range [1, 1000].
  Every node has value 0.
  -/

vc-preamble: |-

vc-helpers: |-

vc-definitions: |-
  def minCameraCover : Option TreeNode → Nat :=
    sorry

vc-theorems: |-
  theorem minCameraCover_nonnegative (t : TreeNode) :
    minCameraCover (some t) ≥ 0 := sorry
  
  theorem minCameraCover_leaf (t : TreeNode) (v : Int) :
    t = TreeNode.mk v none none → 
    minCameraCover (some t) = 1 := sorry
  
  theorem minCameraCover_empty :
    minCameraCover none = 0 := sorry
  
  theorem minCameraCover_monotone (t t' : TreeNode) (v : Int) (r : Option TreeNode) :
    t' = TreeNode.mk v (some t) r →
    minCameraCover (some t') ≥ 1 := sorry
  
  theorem minCameraCover_add_child (t root : TreeNode) (n : Nat) (v : Int) (l : Option TreeNode) :
    minCameraCover (some root) = n →
    root = TreeNode.mk v l (some t) →
    minCameraCover (some root) ≥ n := sorry
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval minCameraCover TreeNode(0)
  
  /-
  info: 2
  -/
  -- #guard_msgs in
  -- #eval minCameraCover TreeNode(0)
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval minCameraCover TreeNode(0)

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

