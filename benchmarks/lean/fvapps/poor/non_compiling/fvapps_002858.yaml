vc-description: |-
  /-
  Reducing Problems - Bug Fixing #8
  
  Oh no! Timmy's reduce is causing problems, Timmy's goal is to calculate the two teams scores and return the winner but timmy has gotten confused and sometimes teams don't enter their scores, total the scores out of 3! Help timmy fix his program!
  
  Return true if team 1 wins or false if team 2 wins!
  -/

vc-preamble: |-
  def List.sum (l : List Nat) : Nat :=
    match l with
    | [] => 0
    | h :: t => h + List.sum t

vc-helpers: |-

vc-definitions: |-
  def calculate_total (team1 team2 : List Nat) : Bool :=
    sorry

vc-theorems: |-
  theorem calculate_total_sum_comparison {team1 team2 : List Nat} 
    (h1 : team1.length = 3 ∨ team1 = []) 
    (h2 : team2.length = 3 ∨ team2 = []) :
    calculate_total team1 team2 = (List.sum (if team1 = [] then [0,0,0] else team1) > 
                                  List.sum (if team2 = [] then [0,0,0] else team2)) :=
  sorry
  
  theorem calculate_total_self {team : List Nat} 
    (h : team.length = 3 ∨ team = []) :
    calculate_total team team = false :=
  sorry
  
  theorem calculate_total_empty {team : List Nat} 
    (h : team.length = 3) :
    (List.sum team > 0 → calculate_total team [] = true) ∧ 
    (List.sum team > 0 → calculate_total [] team = false) ∧
    calculate_total [] [] = false :=
  sorry
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval calculate_total [1, 2, 2] [1, 0, 0]
  
  /-
  info: False
  -/
  -- #guard_msgs in
  -- #eval calculate_total [6, 45, 1] [1, 55, 0]
  
  /-
  info: True
  -/
  -- #guard_msgs in
  -- #eval calculate_total [57, 2, 1] []

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

