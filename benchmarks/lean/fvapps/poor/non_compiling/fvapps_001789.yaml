vc-description: |-
  /-
  Storekeeper is a game in which the player pushes boxes around in a warehouse trying to get them to target locations.
  The game is represented by a grid of size m x n, where each element is a wall, floor, or a box.
  Your task is move the box 'B' to the target position 'T' under the following rules:
  
  Player is represented by character 'S' and can move up, down, left, right in the grid if it is a floor (empy cell).
  Floor is represented by character '.' that means free cell to walk.
  Wall is represented by character '#' that means obstacle  (impossible to walk there). 
  There is only one box 'B' and one target cell 'T' in the grid.
  The box can be moved to an adjacent free cell by standing next to the box and then moving in the direction of the box. This is a push.
  The player cannot walk through the box.
  
  Return the minimum number of pushes to move the box to the target. If there is no way to reach the target, return -1.
  
  Example 1:
  
  Input: grid = [["#","#","#","#","#","#"],
                 ["#","T","#","#","#","#"],
                 ["#",".",".","B",".","#"],
                 ["#",".","#","#",".","#"],
                 ["#",".",".",".","S","#"],
                 ["#","#","#","#","#","#"]]
  Output: 3
  Explanation: We return only the number of times the box is pushed.
  Example 2:
  Input: grid = [["#","#","#","#","#","#"],
                 ["#","T","#","#","#","#"],
                 ["#",".",".","B",".","#"],
                 ["#","#","#","#",".","#"],
                 ["#",".",".",".","S","#"],
                 ["#","#","#","#","#","#"]]
  Output: -1
  
  Example 3:
  Input: grid = [["#","#","#","#","#","#"],
                 ["#","T",".",".","#","#"],
                 ["#",".","#","B",".","#"],
                 ["#",".",".",".",".","#"],
                 ["#",".",".",".","S","#"],
                 ["#","#","#","#","#","#"]]
  Output: 5
  Explanation:  push the box down, left, left, up and up.
  
  Example 4:
  Input: grid = [["#","#","#","#","#","#","#"],
                 ["#","S","#",".","B","T","#"],
                 ["#","#","#","#","#","#","#"]]
  Output: -1
  
  Constraints:
  
  m == grid.length
  n == grid[i].length
  1 <= m <= 20
  1 <= n <= 20
  grid contains only characters '.', '#',  'S' , 'T', or 'B'.
  There is only one character 'S', 'B' and 'T' in the grid.
  -/

vc-preamble: |-
  def min_push_box (grid: Grid) : Int := sorry
  
  def charEq (c1 c2 : Char) : Bool := c1.val = c2.val
  
  def isValidCharProp (c: Char) : Prop := 
    c = '#' ∨ c = '.' ∨ c = 'S' ∨ c = 'B' ∨ c = 'T'

vc-helpers: |-

vc-definitions: |-
  def isValidGrid (grid: Grid) : Prop := sorry
  
  -- All grids must have exactly one player (S), one box (B) and one target (T)

vc-theorems: |-
  theorem valid_grid_unique_elements (grid: Grid) (h: isValidGrid grid) :
    ∃ (s_pos b_pos t_pos : Nat × Nat),
      (grid.cells.get? s_pos.1).bind (·.get? s_pos.2) = some 'S' ∧ 
      (grid.cells.get? b_pos.1).bind (·.get? b_pos.2) = some 'B' ∧
      (grid.cells.get? t_pos.1).bind (·.get? t_pos.2) = some 'T' := sorry
  
  -- A minimal valid grid should be solvable with one push
  
  theorem minimal_valid_grid_solvable (grid: Grid) :
    isValidGrid grid →
    grid.cells = [['#','#','#'], ['#','S','#'], ['#','B','#'], ['#','T','#'], ['#','#','#']] →
    min_push_box grid = 1 := sorry
  
  -- Some valid grids are unsolvable
  
  theorem unsolvable_grid_exists (grid: Grid) :
    isValidGrid grid →
    grid.cells = [['#','#','#','#'], ['#','S','#','#'], ['#','B','T','#'], ['#','#','#','#']] →
    min_push_box grid = -1 := sorry
  
  -- Empty grid is invalid and should result in error
  
  theorem empty_grid_invalid :
    ¬ isValidGrid ⟨[]⟩ := sorry
  
  -- Valid grid contains only allowed characters 
  
  theorem valid_grid_chars (grid: Grid) (h: isValidGrid grid) :
    ∀ row ∈ grid.cells, ∀ c ∈ row, isValidCharProp c := sorry
  
  /-
  info: 3
  -/
  -- #guard_msgs in
  -- #eval min_push_box [["#", "#", "#", "#", "#", "#"], ["#", "T", "#", "#", "#", "#"], ["#", ".", ".", "B", ".", "#"], ["#", ".", "#", "#", ".", "#"], ["#", ".", ".", ".", "S", "#"], ["#", "#", "#", "#", "#", "#"]]
  
  /-
  info: -1
  -/
  -- #guard_msgs in
  -- #eval min_push_box [["#", "#", "#", "#", "#", "#"], ["#", "T", "#", "#", "#", "#"], ["#", ".", ".", "B", ".", "#"], ["#", "#", "#", "#", ".", "#"], ["#", ".", ".", ".", "S", "#"], ["#", "#", "#", "#", "#", "#"]]
  
  /-
  info: -1
  -/
  -- #guard_msgs in
  -- #eval min_push_box [["#", "#", "#", "#", "#", "#", "#"], ["#", "S", "#", ".", "B", "T", "#"], ["#", "#", "#", "#", "#", "#", "#"]]

vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded

