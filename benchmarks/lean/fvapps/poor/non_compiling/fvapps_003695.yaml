vc-description: |-
  /-
  The new £5 notes have been recently released in the UK and they've certainly became a sensation! Even those of us who haven't been carrying any cash around for a while, having given in to the convenience of cards, suddenly like to have some of these in their purses and pockets. But how many of them could you get with what's left from your salary after paying all bills? The programme that you're about to write will count this for you!
  
  Given a salary and the array of bills, calculate your disposable income for a month and return it as a number of new £5 notes you can get with that amount. If the money you've got (or do not!) doesn't allow you to get any £5 notes return 0.
  
  £££ GOOD LUCK! £££
  -/

vc-preamble: |-
  def List.sum : List Nat → Nat 
    | [] => 0
    | (x::xs) => x + List.sum xs

vc-helpers: |-

vc-definitions: |-
  def get_new_notes (salary: Nat) (bills: List Nat) : Nat :=
    sorry

vc-theorems: |-
  theorem get_new_notes_edge_zero_salary : 
    get_new_notes 0 [] = 0 := sorry
  
  theorem get_new_notes_edge_min_note : 
    get_new_notes 5 [] = 1 := sorry
  
  theorem get_new_notes_edge_no_remainder :
    get_new_notes 100 [100] = 0 := sorry
  
  theorem get_new_notes_edge_insufficient :
    get_new_notes 100 [200] = 0 := sorry
  
  /-
  info: 188
  -/
  -- #guard_msgs in
  -- #eval get_new_notes 2000 [500, 160, 400]
  
  /-
  info: 122
  -/
  -- #guard_msgs in
  -- #eval get_new_notes 1260 [500, 50, 100]
  
  /-
  info: 1
  -/
  -- #guard_msgs in
  -- #eval get_new_notes 2000 [500, 495, 100, 900]

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible

