vc-description: |-
  /-
  Do you have in mind the good old TicTacToe?
  
  Assuming that you get all the data in one array, you put a space around each value, `|` as a columns separator and multiple `-` as rows separator, with something like `["O", "X", " ", " ", "X", " ", "X", "O", " "]` you should be returning this structure (inclusive of new lines):
  
  ```
   O | X |   
  -----------
     | X |   
  -----------
   X | O |   
  ```
  
  Now, to spice up things a bit, we are going to expand our board well beyond a trivial `3` x `3` square and we will accept rectangles of big sizes, still all as a long linear array.
  
  For example, for `"O", "X", " ", " ", "X", " ", "X", "O", " ", "O"]` (same as above, just one extra `"O"`) and knowing that the length of each row is `5`, you will be returning
  
  ```
   O | X |   |   | X 
  -------------------
     | X | O |   | O 
  ```
  
  And worry not about missing elements, as the array/list/vector length is always going to be a multiple of the width.
  -/

vc-preamble: |-
  def display_board (board : List String) (width : Nat) : String := sorry
  
  def getEvenElements (xs : List α) : List α :=
    xs.enum.filter (fun (i, _) => i % 2 = 0) |>.map Prod.snd

vc-helpers: |-

vc-definitions: |-
  def getOddElements (xs : List α) : List α :=
    xs.enum.filter (fun (i, _) => i % 2 = 1) |>.map Prod.snd

vc-theorems: |-
  theorem display_board_properties {board : List String} {width : Nat} 
    (h1 : ∀ x, x ∈ board → (x = "X" ∨ x = "O" ∨ x = " "))
    (h2 : 0 < width)
    (h3 : width ≤ 10) 
    (h4 : board.length % width = 0) :
    let result := display_board board width
    let lines := result.splitOn "\n"
    let content_lines := getEvenElements lines
    ∃ line_length : Nat,
      -- All content lines have same width
      (∀ l ∈ content_lines, l.length = line_length) ∧
      -- Correct number of separators between cells 
      (∀ l ∈ content_lines, (l.toList.filter (· = '|')).length = width - 1) ∧
      -- Each cell is at most 3 chars wide
      (∀ l ∈ content_lines, ∀ cell ∈ (l.splitOn "|").map String.trim, cell.length ≤ 3) ∧
      -- Separator lines are correct length
      (lines.length > 1 → 
        ∀ l ∈ getOddElements lines, l = String.mk (List.replicate (4*width - 1) '-')) := sorry
  
  theorem width_one_no_pipes {board : List String}
    (h1 : ∀ x, x ∈ board → (x = "X" ∨ x = "O" ∨ x = " "))
    (h2 : 0 < board.length) :
    ¬(display_board board 1).contains '|' := sorry

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded

