vc-description: |-
  /-
  You've came to visit your grandma and she straight away found you a job - her Christmas tree needs decorating!
  
  She first shows you a tree with an identified number of branches, and then hands you a some baubles (or loads of them!).
  
  You know your grandma is a very particular person and she would like the baubles to be distributed in the orderly manner. You decide the best course of action would be to put the same number of baubles on each of the branches (if possible) or add one more bauble to some of the branches - starting from the beginning of the tree. 
  
  In this kata you will return an array of baubles on each of the branches.
  
  For example: 
  
  10 baubles, 2 branches: [5,5]
  5 baubles, 7 branches: [1,1,1,1,1,0,0]
  12 baubles, 5 branches: [3,3,2,2,2]
  
  The numbers of branches and baubles will be always greater or equal to 0.
  If there are 0 branches return: "Grandma, we will have to buy a Christmas tree first!".
  
  Good luck - I think your granny may have some minced pies for you if you do a good job!
  -/

vc-preamble: |-
  def List.sum : List Nat → Nat 
    | [] => 0
    | h::t => h + sum t

vc-helpers: |-

vc-definitions: |-
  def baubles_on_tree (baubles : Nat) (branches : Nat) : List Nat × String := sorry
  
  theorem baubles_distribution (baubles : Nat) (branches : Nat)
    (h1 : baubles ≤ 1000)
    (h2 : branches ≤ 100) 
    (h3 : branches > 0) : 
    let (list, _) := baubles_on_tree baubles branches
    -- Sum equals input baubles
    List.sum list = baubles ∧ 
    -- Length equals branches 
    list.length = branches ∧
    -- Max difference ≤ 1
    (∀ x y, x ∈ list → y ∈ list → x - y ≤ 1) ∧
    -- All non-negative
    (∀ x, x ∈ list → x ≥ 0) := sorry

vc-theorems: |-
  theorem zero_branches (baubles : Nat) (h : baubles ≤ 1000) :
    let (_, msg) := baubles_on_tree baubles 0
    msg = "Grandma, we will have to buy a Christmas tree first!" := sorry
  
  theorem zero_baubles (branches : Nat) (h1 : branches ≤ 100) (h2 : branches > 0) :
    let (list, _) := baubles_on_tree 0 branches
    list.length = branches ∧
    (∀ x, x ∈ list → x = 0) := sorry
  
  /-
  info: [1, 1, 1, 1, 1]
  -/
  -- #guard_msgs in
  -- #eval baubles_on_tree 5 5
  
  /-
  info: 'Grandma, we will have to buy a Christmas tree first!'
  -/
  -- #guard_msgs in
  -- #eval baubles_on_tree 5 0
  
  /-
  info: [2, 1, 1, 1, 1]
  -/
  -- #guard_msgs in
  -- #eval baubles_on_tree 6 5

vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded

