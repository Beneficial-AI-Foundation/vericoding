vc-description: |-
  The game of billiards involves two players knocking 3 balls around
  on a green baize table. Well, there is more to it, but for our
  purposes this is sufficient.
  The game consists of several rounds and in each round both players
  obtain a score, based on how well they played. Once all the rounds
  have been played, the total score of each player is determined by
  adding up the scores in all the rounds and the player with the higher
  total score is declared the winner.
  The Siruseri Sports Club organises an annual billiards game where
  the top two players of Siruseri play against each other. The Manager
  of Siruseri Sports Club decided to add his own twist to the game by
  changing the rules for determining the winner. In his version, at the
  end of each round, the cumulative score for each player is calculated, and the leader and her current lead are found. Once
  all the rounds are over the player who had the maximum lead at the
  end of any round in the game is declared the winner.

  Consider the following score sheet for a game with 5 rounds:
  RoundPlayer 1Player 2114082289134390110411210658890

  The total scores of both players, the leader and the lead after
  each round for this game is given below:RoundPlayer 1Player 2LeaderLead114082Player 1582229216Player 1133319326Player 274431432Player 215519522Player 23
  Note that the above table contains the cumulative scores.
  The winner of this game is Player 1 as he had the maximum lead (58
  at the end of round 1) during the game.
  Your task is to help the Manager find the winner and the winning
  lead. You may assume that the scores will be such that there will
  always be a single winner.  That is, there are no ties.
  Input
  The first line of the input will contain a single integer N (N
  ≤ 10000) indicating the number of rounds in the game.  Lines
  2,3,...,N+1 describe the scores of the two players in the N rounds.
  Line i+1 contains two integer Si and Ti, the scores of the Player 1
  and 2 respectively, in round i.  You may assume that 1 ≤ Si ≤
  1000 and 1 ≤ Ti ≤ 1000.  
  Output
  Your output must consist of a single line containing two integers
  W and L, where W is 1 or 2 and indicates the winner and L is the
  maximum lead attained by the winner.
  Example
  Input:
  5
  140 82
  89 134
  90 110
  112 106
  88 90

  Output:
  1 58
vc-preamble: |
  import Imports.AllImports

  def find_winner_and_max_lead (rounds : List (Nat × Nat)) : Nat × Nat :=
  sorry
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |-
  def get_max_leads (rounds : List (Nat × Nat)) : Nat × Nat :=
    rounds.foldl (fun acc r =>
      let p1Total := acc.1 + r.1
      let p2Total := acc.2 + r.2
      if p1Total > p2Total 
      then (p1Total - p2Total, acc.2)
      else (acc.1, p2Total - p1Total)
    ) (0, 0)
vc-theorems: |
  theorem winner_is_valid (rounds : List (Nat × Nat)) :
    let (winner, _) := find_winner_and_max_lead rounds
    winner = 1 ∨ winner = 2 := 
  sorry


  theorem max_lead_nonnegative (rounds : List (Nat × Nat)) :
    let (_, maxLead) := find_winner_and_max_lead rounds
    maxLead ≥ 0 :=
  sorry


  /--
  info: (1, 58)
  -/
  #guard_msgs in
  #eval find_winner_and_max_lead [(140, 82), (89, 134), (90, 110), (112, 106), (88, 90)]

  /--
  info: (1, 15)
  -/
  #guard_msgs in
  #eval find_winner_and_max_lead [(10, 5), (20, 15), (30, 25)]

  /--
  info: (2, 15)
  -/
  #guard_msgs in
  #eval find_winner_and_max_lead [(5, 10), (15, 20), (25, 30)]
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded_and_plausible
