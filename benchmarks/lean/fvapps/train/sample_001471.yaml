"vc-description": "Alice and Bob created $N$ and $M$ recipes, respectively ($N, M\
  \ \\ge 1$), and submitted them to Chef for evaluation. Each recipe is represented\
  \ by a string containing only lowercase English letters. Let's denote Alice's recipes\
  \ by $A_1, A_2, \\ldots, A_N$ and Bob's recipes by $B_1, B_2, \\ldots, B_M$.\nAccidentally,\
  \ Chef mixed up those recipes ― now, he has $L = N+M$ recipes in a sequence $S_1,\
  \ S_2, \\ldots, S_L$. Thankfully, the recipes created by Alice and Bob are distinguishable\
  \ from each other. It is well-known that for each recipe $s$ created by Alice, the\
  \ following property holds, and for each recipe created by Bob, it does not hold:\
  \ For each $1 \\le l < r \\le |s|$, the substring $s_l, s_{l+1}, \\ldots, s_r$ contains\
  \ at least as many vowels as consonants. The letters 'a', 'e', 'i', 'o', 'u' are\
  \ vowels, while the other letters are consonants.\nThe score of a candidate who\
  \ made $K$ recipes is calculated as the product of $\\frac{x_c}{fx_c^K}$ for all\
  \ letters $c$ that occur in at least one of these recipes; here, $x_c$ is the number\
  \ of recipes which contain the letter $c$ and $fx_c$ is the total number of occurrences\
  \ of this letter in all $K$ recipes.\nLet's denote the scores of Alice and Bob by\
  \ $sc_A$ and $sc_B$ respectively. Chef wants to know their ratio $sc_A/sc_B$. We\
  \ know that Chef is a legendary cook, but he is not very good at calculating, so\
  \ he is asking you to find that number.\n\n-----Input-----\n- The first line of\
  \ the input contains a single integer $T$ denoting the number of test cases. The\
  \ description of $T$ test cases follows.\n- The first line of each test case contains\
  \ a single integer $L$.\n- $L$ lines follow. For each valid $i$, the $i$-th of these\
  \ lines contains a single string $S_i$.\n\n-----Output-----\nFor each test case,\
  \ if the ratio of scores exceeds $10^7$, print a single line containing the string\
  \ \"Infinity\" (without quotes); otherwise, print a single line containing one real\
  \ number $sc_A/sc_B$.\nYour answer will be considered correct if its absolute or\
  \ relative error does not exceed $10^{-6}$. It is guaranteed that $sc_A/sc_B$ does\
  \ not lie in the range $10^7 \\pm 10$.\n\n-----Constraints-----\n- $1 \\le T \\\
  le 10^5$\n- $2 \\le L \\le 10^5$\n- $2 \\le |S_i| \\le 10^5$ for each valid $i$\n\
  - for each valid $i$, $S_i$ contains only lowercase English letters\n- the sum of\
  \ $|S_1| + |S_2| + \\ldots + |S_L|$ over all test cases does not exceed $10^7$\n\
  \n-----Subtasks-----\nSubtask #1 (25 points):\n- $L \\le 10$\n- $|S_i| \\le 10$\
  \ for each valid $i$\nSubtask #2 (75 points): original constraints\n\n-----Example\
  \ Input-----\n2\n4\naba\nabc\nbab\naac\n3\naba\nbaab\nabc\n\n-----Example Output-----\n\
  1.1250000\n0.0277778\n\n-----Explanation-----\nExample case 1: The recipes \"aba\"\
  \ and \"aac\" are created by Alice, while the recipes \"abc\" and \"bab\" are created\
  \ by Bob. The scores are:\n- $sc_A = \\frac{x_a}{fx_a^N} \\cdot \\frac{x_b}{fx_b^N}\
  \ \\cdot \\frac{x_c}{fx_c^N} = \\frac{2}{4^2} \\cdot \\frac{1}{1^2} \\cdot \\frac{1}{1^2}\
  \ = \\frac{1}{8}$\n- $sc_B = \\frac{x_a}{fx_a^M} \\cdot \\frac{x_b}{fx_b^M} \\cdot\
  \ \\frac{x_c}{fx_c^M} = \\frac{2}{2^2} \\cdot \\frac{2}{3^2} \\cdot \\frac{1}{1^2}\
  \ = \\frac{1}{9}$\n- $\\frac{sc_A}{sc_B} = \\frac{1/8}{1/9} = 1.125$"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calculate_recipe_scores (recipes : List String) : String ⊕\
  \ Float := sorry\n\ndef Permutation (α : Type) (xs ys : List α) : Prop := sorry\n"
"vc-theorems": "theorem recipe_scores_valid_output (recipes: List String) : \n  let\
  \ result := calculate_recipe_scores recipes\n  match result with\n  | Sum.inl str\
  \ => str = \"Infinity\"\n  | Sum.inr num => 0 ≤ num ∧ num ≤ 10^7\n  := sorry\n\n\
  \ntheorem recipe_scores_consistent (recipes: List String) :\n  let result1 := calculate_recipe_scores\
  \ recipes\n  let result2 := calculate_recipe_scores recipes\n  match result1, result2\
  \ with\n  | Sum.inl str1, Sum.inl str2 => str1 = str2\n  | Sum.inr num1, Sum.inr\
  \ num2 => (num1 - num2).abs < 0.000001\n  | _, _ => False\n  := sorry\n\n\ntheorem\
  \ recipe_scores_order_invariant (recipes: List String) (perm: List String) :\n \
  \ Permutation String recipes perm →\n  let result1 := calculate_recipe_scores recipes\n\
  \  let result2 := calculate_recipe_scores perm\n  match result1, result2 with\n\
  \  | Sum.inl str1, Sum.inl str2 => str1 = str2\n  | Sum.inr num1, Sum.inr num2 =>\
  \ (num1 - num2).abs < 0.000001\n  | _, _ => False\n  := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
