"vc-description": "# Task\n Round the given number `n` to the nearest multiple of\
  \ `m`.\n\n If `n` is exactly in the middle of 2 multiples of m, return `n` instead.\n\
  \n# Example\n\n For `n = 20, m = 3`, the output should be `21`.\n\n For `n = 19,\
  \ m = 3`, the output should be `18`.\n\n For `n = 50, m = 100`, the output should\
  \ be `50`.\n\n# Input/Output\n\n\n - `[input]` integer `n`\n\n `1 ≤ n < 10^9.`\n\
  \n\n - `[input]` integer `m`\n\n `3 ≤ m < 109`.\n\n\n - `[output]` an integer"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def rounding (n : Int) (m : Int) : Int := sorry\n\ntheorem rounding_symmetry\
  \ \n  {n : Int} {m : Int} (hm : m > 0) (hn : n ≥ -1000) (hn2 : n ≤ 1000) (hm2 :\
  \ m ≤ 100) :\n  rounding n m = rounding (2 * rounding n m - n) m := sorry\n"
"vc-theorems": "theorem rounding_zero :\n  rounding 0 1 = 0 := sorry\n\n\ntheorem\
  \ result_near_input \n  {n m : Int} (hm : m > 0) (hn : n ≥ -100) (hn2 : n ≤ 100)\
  \ (hm2 : m ≤ 10) :\n  (rounding n m - n).natAbs ≤ m/2 := sorry\n\n/--\ninfo: 21\n\
  -/\n#guard_msgs in\n#eval rounding 20 3\n\n/--\ninfo: 18\n-/\n#guard_msgs in\n#eval\
  \ rounding 19 3\n\n/--\ninfo: 50\n-/\n#guard_msgs in\n#eval rounding 50 100\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
