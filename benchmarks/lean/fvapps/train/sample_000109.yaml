"vc-description": "You are given an image, that can be represented with a 2-d n by\
  \ m grid of pixels. Each pixel of the image is either on or off, denoted by the\
  \ characters \"0\" or \"1\", respectively. You would like to compress this image.\
  \ You want to choose an integer k > 1 and split the image into k by k blocks. If\
  \ n and m are not divisible by k, the image is padded with only zeros on the right\
  \ and bottom so that they are divisible by k. Each pixel in each individual block\
  \ must have the same value. The given image may not be compressible in its current\
  \ state. Find the minimum number of pixels you need to toggle (after padding) in\
  \ order for the image to be compressible for some k. More specifically, the steps\
  \ are to first choose k, then the image is padded with zeros, then, we can toggle\
  \ the pixels so it is compressible for this k. The image must be compressible in\
  \ that state.\n\n\n-----Input-----\n\nThe first line of input will contain two integers\
  \ n, m (2 ≤ n, m ≤ 2 500), the dimensions of the image.\n\nThe next n lines of input\
  \ will contain a binary string with exactly m characters, representing the image.\n\
  \n\n-----Output-----\n\nPrint a single integer, the minimum number of pixels needed\
  \ to toggle to make the image compressible.\n\n\n-----Example-----\nInput\n3 5\n\
  00100\n10110\n11001\n\nOutput\n5\n\n\n\n-----Note-----\n\nWe first choose k = 2.\n\
  \nThe image is padded as follows: \n\n001000\n\n101100\n\n110010\n\n000000\n\n\n\
  \nWe can toggle the image to look as follows: \n\n001100\n\n001100\n\n000000\n\n\
  000000\n\n\n\nWe can see that this image is compressible for k = 2."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def compress_image (m n : Nat) (grid : List String) : Nat :=\n\
  \  sorry\n"
"vc-theorems": "theorem compress_minimal_cases_2x2_perfect (grid : List String) :\n\
  \  grid = [\"11\", \"11\"] → compress_image 2 2 grid = 0 :=\nsorry\n\n\ntheorem\
  \ compress_minimal_cases_2x2_worst (grid : List String) :\n  grid = [\"10\", \"\
  01\"] → compress_image 2 2 grid = 2 :=\nsorry\n\n\ntheorem compress_minimal_cases_rect_2x3\
  \ (grid : List String) :\n  grid = [\"010\", \"101\"] → compress_image 2 3 grid\
  \ = 3 :=\nsorry\n\n\ntheorem compress_minimal_cases_rect_3x2 (grid : List String)\
  \ :\n  grid = [\"01\", \"10\", \"01\"] → compress_image 3 2 grid = 3 :=\nsorry\n\
  \n\ntheorem compress_example_case (grid : List String) :\n  grid = [\"00100\", \"\
  10110\", \"11001\"] → compress_image 3 5 grid = 5 :=\nsorry\n\n\ntheorem compress_larger_3x3_all_ones\
  \ (grid : List String) :\n  grid = [\"111\", \"111\", \"111\"] → compress_image\
  \ 3 3 grid = 0 :=\nsorry\n\n\ntheorem compress_larger_3x3_all_zeros (grid : List\
  \ String) :\n  grid = [\"000\", \"000\", \"000\"] → compress_image 3 3 grid = 0\
  \ :=\nsorry\n\n\ntheorem compress_larger_3x3_checkerboard (grid : List String) :\n\
  \  grid = [\"101\", \"010\", \"101\"] → compress_image 3 3 grid = 4 :=\nsorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
