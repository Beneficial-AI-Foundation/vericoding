"vc-description": "Polly is 8 years old. She is eagerly awaiting Christmas as she\
  \ has a bone to pick with Santa Claus. Last year she asked for a horse, and he brought\
  \ her a dolls house. Understandably she is livid.\n\nThe days seem to drag and drag\
  \ so Polly asks her friend to help her keep count of how long it is until Christmas,\
  \ in days. She will start counting from the first of December.\n\nYour function\
  \ should take 1 argument (a Date object) which will be the day of the year it is\
  \ currently. The function should then work out how many days it is until Christmas.\n\
  \nWatch out for leap years!"
"vc-preamble": "import Imports.AllImports\n\ndef isLeapYear (year : Int) : Bool :=\
  \ sorry\n\ndef daysUntilChristmas (d : Date) : Nat := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def addDays (d : Date) (n : Nat) : Date := sorry\n\ntheorem days_until_christmas_non_negative\
  \ (d : Date) : \n  daysUntilChristmas d ≥ 0 := sorry\n"
"vc-theorems": "theorem days_until_christmas_max_bound (d : Date) :\n  daysUntilChristmas\
  \ d ≤ 366 := sorry\n\n\ntheorem days_until_christmas_gives_christmas (d : Date)\
  \ :\n  let future := addDays d (daysUntilChristmas d)\n  future.month = 12 ∧ future.day\
  \ = 25 := sorry\n\n\ntheorem on_christmas_returns_zero (d : Date) (h1 : d.month\
  \ = 12) (h2 : d.day = 25) :\n  daysUntilChristmas d = 0 := sorry\n\n\ntheorem after_christmas_next_year\
  \ (d : Date) \n  (h1 : d.month = 12) (h2 : d.day > 25) :\n  daysUntilChristmas d\
  \ = \n    daysUntilChristmas (Date.mk (d.year + 1) 12 25) := sorry\n\n/--\ninfo:\
  \ 163\n-/\n#guard_msgs in\n#eval days_until_christmas date(2023, 7, 15)\n\n/--\n\
  info: 365\n-/\n#guard_msgs in\n#eval days_until_christmas date(2023, 12, 26)\n\n\
  /--\ninfo: 1\n-/\n#guard_msgs in\n#eval days_until_christmas date(2023, 12, 24)\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
