"vc-description": "# A History Lesson\n\nSoundex is an interesting phonetic algorithm\
  \ developed nearly 100 years ago for indexing names as they are pronounced in English.\
  \ The goal is for homophones to be encoded to the same representation so that they\
  \ can be matched despite minor differences in spelling.\n\nReference: https://en.wikipedia.org/wiki/Soundex\n\
  \n\n\n# Preface\n\nI first read about Soundex over 30 years ago. At the time it\
  \ seemed to me almost  like  A.I. that you could just type in somebody's name the\
  \ way it sounded and there was still a pretty good chance it could match the correct\
  \ person record. That was about the same year as the first \"Terminator\" movie\
  \ so it was easy for me to put 2 and 2 together and conclude that Arnie must have\
  \ had some kind of futuristic Soundex chip in his titanium skull helping him to\
  \ locate ```Serah Coner```... or was it ```Sarh Connor```... or maybe ```Sayra Cunnarr```...\n\
  \n:-)\n\n\n\n# Task\n\nIn this Kata you will encode strings using a Soundex variation\
  \ called \"American Soundex\" using the following (case insensitive) steps:\n\n\
  * Save the first letter. Remove all occurrences of ```h``` and ```w``` except first\
  \ letter.\n* Replace all consonants (include the first letter) with digits as follows:\n\
  \ * ```b```, ```f```, ```p```, ```v``` = 1\n * ```c```, ```g```, ```j```, ```k```,\
  \ ```q```, ```s```, ```x```, ```z``` = 2\n * ```d```, ```t``` = 3\n * ```l``` =\
  \ 4\n * ```m```, ```n``` = 5\n * ```r``` = 6\n* Replace all adjacent same digits\
  \ with one digit.\n* Remove all occurrences of ```a```, ```e```, ```i```, ```o```,\
  \ ```u```, ```y``` except first letter.\n* If first symbol is a digit replace it\
  \ with letter saved on step 1.\n* Append 3 zeros if result contains less than 3\
  \ digits. Remove all except first letter and 3 digits after it\n\n## Input\n\nA\
  \ space separated string of one or more names. E.g.\n\n```Sarah Connor```\n\n##\
  \ Output\n\nSpace separated string of equivalent Soundex codes (the first character\
  \ of each code must be uppercase). E.g.\n\n```S600 C560```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def soundex (name : String) : String := sorry\n\ntheorem soundex_length_first_letter_prop\
  \ {name : String} (h: name.length > 0):\n  let codes := (soundex name).split (·\
  \ = ' ')\n  let words := name.split (· = ' ')\n  codes.length = words.length ∧ \n\
  \  (∀ code ∈ codes, code.length = 4) ∧\n  (∀ (w c : String), w ∈ words → c ∈ codes\
  \ → w.toUpper.front = c.front) := sorry"
"vc-theorems": "/--\ninfo: 'S600 C560'\n-/\n#guard_msgs in\n#eval soundex \"Sarah\
  \ Connor\"\n\n/--\ninfo: 'A261'\n-/\n#guard_msgs in\n#eval soundex \"Ashcraft\"\n\
  \n/--\ninfo: 'T522'\n-/\n#guard_msgs in\n#eval soundex \"Tymczak\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
