"vc-description": "Triangular numbers count the number of objects that can form an\
  \ equilateral triangle. The nth triangular number forms an equilateral triangle\
  \ with n dots on each side (including the vertices).\nHere is a graphic example\
  \ for the triangular numbers of 1 to 5:\n```\nn=1: triangular number: 1\n*\n\nn=2:\
  \ triangular number: 3\n *\n* *\n\nn=3: triangular number: 6\n  *\n * *\n* * *\n\
  \nn=4: triangular number: 10\n    *\n   * *\n  * * *\n * * * *\n \n n=5: triangular\
  \ number: 15\n      *\n     * *\n    * * *\n   * * * *\n  * * * * *\n```\n\nYour\
  \ task is to implement a function ```triangular_range(start, stop)``` that returns\
  \ a dictionary of all numbers as keys and the belonging triangular numbers as values,\
  \ where the triangular number is in the range start, stop (including start and stop).\n\
  For example, ```triangular_range(1, 3)``` should return ```{1: 1, 2: 3}``` and ```triangular_range(5,\
  \ 16)``` should return ```{3: 6, 4: 10, 5: 15}```."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def triangular_range (start stop : Int) : List (Int × Int) := sorry\n\
  \ntheorem triangular_range_is_valid (start stop : Int) (h : stop ≥ start) :\n  let\
  \ result := triangular_range start stop\n  ∀ (n tri : Int), (n, tri) ∈ result →\n\
  \    (n > 0 ∧ \n     tri = (n * (n + 1)) / 2 ∧\n     start ≤ tri ∧ tri ≤ stop) :=\
  \ \nsorry\n"
"vc-theorems": "theorem triangular_range_single_point (n : Int) (h : n > 0) :\n  let\
  \ tri := (n * (n + 1)) / 2\n  triangular_range tri tri = [(n, tri)] ∨ triangular_range\
  \ tri tri = [] :=\nsorry\n\n\ntheorem triangular_range_empty_invalid_range (start\
  \ stop : Int) :\n  stop < start → triangular_range start stop = [] :=\nsorry\n\n\
  \ntheorem triangular_range_empty_negative (start stop : Int) :\n  stop < 0 → triangular_range\
  \ start stop = [] :=\nsorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
