"vc-description": "Alice lives on a line. Today, she will travel to some place in\
  \ a mysterious vehicle.\nInitially, the distance between Alice and her destination\
  \ is D. When she input a number x to the vehicle, it will travel in the direction\
  \ of the destination by a distance of x if this move would shorten the distance\
  \ between the vehicle and the destination, and it will stay at its position otherwise.\
  \ Note that the vehicle may go past the destination when the distance between the\
  \ vehicle and the destination is less than x.\nAlice made a list of N numbers. The\
  \ i-th number in this list is d_i. She will insert these numbers to the vehicle\
  \ one by one.\nHowever, a mischievous witch appeared. She is thinking of rewriting\
  \ one number in the list so that Alice will not reach the destination after N moves.\n\
  She has Q plans to do this, as follows:\n - Rewrite only the q_i-th number in the\
  \ list with some integer so that Alice will not reach the destination.\nWrite a\
  \ program to determine whether each plan is feasible.\n\n-----Constraints-----\n\
  \ - 1≤ N ≤ 5*10^5\n - 1≤ Q ≤ 5*10^5\n - 1≤ D ≤ 10^9\n - 1≤ d_i ≤ 10^9(1≤i≤N)\n -\
  \ 1≤ q_i ≤ N(1≤i≤Q)\n - D and each d_i are integers.\n\n-----Input-----\nInput is\
  \ given from Standard Input in the following format:\nN D\nd_1 d_2 ... d_N\nQ\n\
  q_1 q_2 ... q_Q\n\n-----Output-----\nPrint Q lines. The i-th line should contain\
  \ YES if the i-th plan is feasible, and NO otherwise.\n\n-----Sample Input-----\n\
  4 10\n3 4 3 3\n2\n4 3\n\n-----Sample Output-----\nNO\nYES\n\nFor the first plan,\
  \ Alice will already arrive at the destination by the first three moves, and therefore\
  \ the answer is NO.\nFor the second plan, rewriting the third number in the list\
  \ with 5 will prevent Alice from reaching the destination as shown in the following\
  \ figure, and thus the answer is YES."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def can_witch_prevent_finish (n: Nat) (d: Nat) (distances: List\
  \ Nat) (queries: List Nat) : List Answer :=\n  sorry\n"
"vc-theorems": "theorem result_length_matches_queries \n  (n d: Nat) (distances queries:\
  \ List Nat) \n  (h1: n > 0) (h2: d > 0) \n  (h3: distances.length = n)\n  (h4: queries.length\
  \ > 0)\n  (h5: ∀ q ∈ queries, q ≤ n)\n  (h6: ∀ x ∈ distances, x > 0) :\n  (can_witch_prevent_finish\
  \ n d distances queries).length = queries.length := by\n  sorry\n\n\ntheorem results_are_yes_or_no\n\
  \  (n d: Nat) (distances queries: List Nat)\n  (h1: n > 0) (h2: d > 0)\n  (h3: distances.length\
  \ = n)\n  (h4: queries.length > 0)\n  (h5: ∀ q ∈ queries, q ≤ n)\n  (h6: ∀ x ∈ distances,\
  \ x > 0) :\n  ∀ x ∈ can_witch_prevent_finish n d distances queries, x = Answer.YES\
  \ ∨ x = Answer.NO := by\n  sorry\n\n\ntheorem query_order_independence\n  (n d:\
  \ Nat) (distances queries: List Nat)\n  (h1: n > 0) (h2: d > 0)\n  (h3: distances.length\
  \ = n)\n  (h4: queries.length > 0)\n  (h5: ∀ q ∈ queries, q ≤ n)\n  (h6: ∀ x ∈ distances,\
  \ x > 0) :\n  can_witch_prevent_finish n d distances queries =\n  List.reverse (can_witch_prevent_finish\
  \ n d distances (List.reverse queries)) := by\n  sorry\n\n\ntheorem single_query_consistency\n\
  \  (n d: Nat) (distances queries: List Nat)\n  (h1: n > 0) (h2: d > 0)\n  (h3: distances.length\
  \ = n)\n  (h4: queries.length > 0)\n  (h5: ∀ q ∈ queries, q ≤ n)\n  (h6: ∀ x ∈ distances,\
  \ x > 0) :\n  ∀ i, i < queries.length →\n    (can_witch_prevent_finish n d distances\
  \ [queries[i]!]).get! 0 =\n    (can_witch_prevent_finish n d distances queries).get!\
  \ i := by\n  sorry\n\n/--\ninfo: ['NO', 'YES']\n-/\n#guard_msgs in\n#eval can_witch_prevent_finish\
  \ 4 10 [3, 4, 3, 3] [4, 3]\n\n/--\ninfo: ['YES', 'YES', 'YES', 'YES', 'YES']\n-/\n\
  #guard_msgs in\n#eval can_witch_prevent_finish 5 9 [4, 4, 2, 3, 2] [1, 4, 2, 3,\
  \ 5]\n\n/--\ninfo: ['NO', 'NO', 'YES', 'NO', 'NO', 'YES']\n-/\n#guard_msgs in\n\
  #eval can_witch_prevent_finish 6 15 [4, 3, 5, 4, 2, 1] [1, 2, 3, 4, 5, 6]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
