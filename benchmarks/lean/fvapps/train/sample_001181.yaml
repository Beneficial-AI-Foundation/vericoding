"vc-description": "It's the annual military parade, and all the soldier snakes have\
  \ arrived at the parade arena, But they aren't standing properly. The entire parade\
  \ must be visible from the main podium, and all the snakes must be in a line. But\
  \ the soldiers are lazy, and hence you must tell the soldiers to move to their new\
  \ positions in such a manner that the total movement is minimized.\nFormally, the\
  \ entire parade strip can be thought of as the integer line. There are N snakes,\
  \ where each snake is a line segment of length L. The i-th snake is initially at\
  \ the segment [Si, Si + L]. The initial positions of the snakes can overlap. The\
  \ only segment of the strip visible from the podium is [A, B], and hence all the\
  \ snakes should be moved so that all of them are visible from the podium. They should\
  \ also all be in a line without gaps and every consecutive pair touching each other.\
  \ In other words, they should occupy the segments [X, X + L], [X + L, X + 2*L],\
  \ ... , [X + (N-1)*L, X + N*L], for some X, such that A ≤ X ≤ X + N*L ≤ B. You are\
  \ guaranteed that the visible strip is long enough to fit all the snakes.\n\nIf\
  \ a snake was initially at the position [X1, X1 + L] and finally is at the position\
  \ [X2, X2 + L], then the snake is said to have moved a distance of |X2 - X1|. The\
  \ total distance moved by the snakes is just the summation of this value over all\
  \ the snakes. You need to move the snakes in such a manner that it satisfies all\
  \ the conditions mentioned above, as well as minimize the total distance. You should\
  \ output the minimum total distance achievable.\n\n-----Input-----\n- The first\
  \ line contains a single integer, T, the number of testcases. The description of\
  \ each testcase follows.\n- The first line of each testcase contains four integers,\
  \ N, L, A and B, where N denotes the number of snakes, L denotes the length of each\
  \ snake, and [A, B] is the segment visible from the podium.\n- The next line contains\
  \ N integers, the i-th of which is Si. This denotes that the i-th snake is initially\
  \ in the segment [Si, Si + L].\n\n-----Output-----\n- For each testcase, output\
  \ a single integer in a new line: the minimum total distance achievable.\n\n-----Constraints-----\n\
  - 1 ≤ T ≤ 10\n- 1 ≤ N ≤ 105\n- 1 ≤ Si ≤ 109\n- 1 ≤ L ≤ 109\n- 1 ≤ A ≤ B ≤ 109\n\
  - N * L ≤ B - A\n\n-----Example-----\nInput:\n2\n3 4 11 23\n10 11 30\n3 4 11 40\n\
  10 11 30\n\nOutput:\n16\n16\n\n-----Explanation-----\nIn the first testcase, the\
  \ three snakes are initially at segments [10, 14], [11, 15], and [30, 34]. One optimal\
  \ solution is to move the first snake which was at [10, 14] to [15, 19] and the\
  \ third snake which was at [30, 34] to [19, 23]. After this, the snakes would form\
  \ a valid parade because they will be from [11, 15], [15, 19] and [19, 23]. Hence\
  \ they are all in a line without any gaps in between them, and they are all visible,\
  \ because they all lie in the visible segment, which is [11, 23].\nThe distance\
  \ traveled by the first snake is |15 - 10| = 5, by the second snake is |11 - 11|\
  \ = 0 and by the third snake is |19 - 30| = 11. Hence the total distance traveled\
  \ is 5 + 0 + 11 = 16. This is the best that you can do, and hence the answer is\
  \ 16.\nIn the second testcase, only the visible segment has increased. But you can\
  \ check that the same final configuration as in the first subtask is still optimal\
  \ here. Hence the answer is 16."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_snake_parade (n l a b : Nat) (positions : List Nat) :\
  \ Nat := sorry\n\ntheorem snake_parade_basic_properties\n  (n l : Nat)\n  (starting_positions\
  \ : List Nat)\n  (h1 : n > 0)\n  (h2 : l > 0)\n  (h3 : starting_positions.length\
  \ = n)\n  (a : Nat)\n  (b : Nat)\n  (h4 : a = starting_positions.foldl min (starting_positions.head!))\n\
  \  (h5 : b = starting_positions.foldl max (starting_positions.head!) + n * l) :\n\
  \  let result := solve_snake_parade n l a b starting_positions\n  result ≥ 0 ∧ result\
  \ ≤ (b - a) * n := sorry\n"
"vc-theorems": "theorem snake_parade_sorted_optimal\n  (n l : Nat)\n  (start : Nat)\n\
  \  (h1 : n > 0)\n  (h2 : l > 0) :\n  let positions := List.range n |>.map (fun i\
  \ => start + i * l)\n  solve_snake_parade n l start (start + n * l) positions =\
  \ 0 := sorry\n\n\ntheorem snake_parade_order_invariant\n  (starting_positions :\
  \ List Nat)\n  (l : Nat)\n  (h1 : starting_positions.length > 0)\n  (h2 : l > 0)\n\
  \  (a : Nat)\n  (b : Nat)\n  (h3 : a = starting_positions.foldl min (starting_positions.head!))\n\
  \  (h4 : b = starting_positions.foldl max (starting_positions.head!) + starting_positions.length\
  \ * l) :\n  let n := starting_positions.length\n  ∀ perm : List Nat, perm.length\
  \ = starting_positions.length →\n  solve_snake_parade n l a b starting_positions\
  \ =\n  solve_snake_parade n l a b perm := sorry\n\n/--\ninfo: 16\n-/\n#guard_msgs\
  \ in\n#eval solve_snake_parade 3 4 11 23 [10, 11, 30]\n\n/--\ninfo: 16\n-/\n#guard_msgs\
  \ in\n#eval solve_snake_parade 3 4 11 40 [10, 11, 30]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
