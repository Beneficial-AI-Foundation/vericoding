"vc-description": "Given two different positions on a chess board, find the least\
  \ number of moves it would take a knight to get from one to the other.\nThe positions\
  \ will be passed as two arguments in algebraic notation.\nFor example, `knight(\"\
  a3\", \"b5\")` should return 1.\n\nThe knight is not allowed to move off the board.\n\
  The board is 8x8.\n\nFor information on knight moves, see https://en.wikipedia.org/wiki/Knight_%28chess%29\n\
  \nFor information on algebraic notation, see\nhttps://en.wikipedia.org/wiki/Algebraic_notation_%28chess%29\n\
  \n(Warning: many of the tests were generated randomly. If any do not work, the test\
  \ cases will return the input, output, and expected output; please post them.)"
"vc-preamble": "import Imports.AllImports\n\ndef abs (n : Nat) : Nat :=\n  sorry\n\
  \n\ndef isValidPos (pos : String) : Bool :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def knight (s e : String) : Nat :=\n  sorry\n"
"vc-theorems": "theorem knight_valid_range {s e : String} \n  (h1 : isValidPos s)\
  \ (h2 : isValidPos e) : \n  let m := knight s e\n  0 ≤ m ∧ m ≤ 6 := \n  sorry\n\n\
  \ntheorem knight_same_position {p : String}\n  (h : isValidPos p) :\n  knight p\
  \ p = 0 :=\n  sorry\n\n\ntheorem knight_diagonal_adjacent {s e : String}  \n  (h1\
  \ : isValidPos s) (h2 : isValidPos e)\n  (h3 : abs ((s.get! ⟨0⟩).toNat - (e.get!\
  \ ⟨0⟩).toNat) = 1)\n  (h4 : abs ((s.get! ⟨1⟩).toNat - (e.get! ⟨1⟩).toNat) = 1) :\n\
  \  knight s e = 2 :=\n  sorry\n\n\ntheorem knight_symmetric {p t : String}\n  (h1\
  \ : isValidPos p) (h2 : isValidPos t) :\n  knight p t = knight t p :=\n  sorry\n\
  \n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval knight \"a3\" \"b5\"\n\n/--\ninfo: 2\n\
  -/\n#guard_msgs in\n#eval knight \"a1\" \"c5\"\n\n/--\ninfo: 0\n-/\n#guard_msgs\
  \ in\n#eval knight \"d5\" \"d5\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
