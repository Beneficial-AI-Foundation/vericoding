"vc-description": "The chef is trying to solve some pattern problems, Chef wants your\
  \ help to code it. Chef has one number K to form a new pattern. Help the chef to\
  \ code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$,\
  \ the number of test cases. Then the test cases follow. \n- Each test case contains\
  \ a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test\
  \ case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 50$\n\
  - $1 \\leq K \\leq 50$\n\n-----Sample Input:-----\n5\n1\n2\n3\n4\n5\n\n-----Sample\
  \ Output:-----\n*\n*\n***\n*\n* *\n*****\n*\n* *\n*   *\n*******\n*\n* *\n*   *\n\
  *     *\n*********   \n\n-----EXPLANATION:-----\nNo need, else pattern can be decode\
  \ easily."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def generate_pattern (k : Nat) : List String := sorry\n\ntheorem\
  \ minimal_cases:\n  generate_pattern 1 = [\"*\"] ∧\n  generate_pattern 2 = [\"*\"\
  , \"***\"] ∧\n  generate_pattern 3 = [\"  *  \", \" * * \", \"*****\"] :=\nsorry\n"
"vc-theorems": "theorem pattern_length (k : Nat) (h : k > 0):\n  (generate_pattern\
  \ k).length = k :=\nsorry\n\n\ntheorem pattern_valid_chars (k : Nat) (h : k > 0):\n\
  \  ∀ line ∈ generate_pattern k,\n  ∀ c ∈ line.data, c = ' ' ∨ c = '*' :=\nsorry\n\
  \n\ntheorem last_line_asterisks (k : Nat) (h : k > 1):\n  (generate_pattern k).getLast\
  \ (by sorry) =\n  String.mk (List.replicate (2*k - 1) '*') :=\nsorry\n\n\ntheorem\
  \ first_line_centered (k : Nat) (h : k > 2):\n  (generate_pattern k).head! =\n \
  \ String.mk (List.replicate (k-1) ' ' ++ '*' :: List.replicate (k-1) ' ') :=\nsorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
