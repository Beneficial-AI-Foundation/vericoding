"vc-description": "There is a road with length $l$ meters. The start of the road has\
  \ coordinate $0$, the end of the road has coordinate $l$.\n\nThere are two cars,\
  \ the first standing at the start of the road and the second standing at the end\
  \ of the road. They will start driving simultaneously. The first car will drive\
  \ from the start to the end and the second car will drive from the end to the start.\n\
  \nInitially, they will drive with a speed of $1$ meter per second. There are $n$\
  \ flags at different coordinates $a_1, a_2, \\ldots, a_n$. Each time when any of\
  \ two cars drives through a flag, the speed of that car increases by $1$ meter per\
  \ second.\n\nFind how long will it take for cars to meet (to reach the same coordinate).\
  \ \n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\leq t \\\
  leq 10^4$): the number of test cases.\n\nThe first line of each test case contains\
  \ two integers $n$, $l$ ($1 \\leq n \\leq 10^5$, $1 \\leq l \\leq 10^9$): the number\
  \ of flags and the length of the road.\n\nThe second line contains $n$ integers\
  \ $a_1, a_2, \\ldots, a_n$ in the increasing order ($1 \\leq a_1 < a_2 < \\ldots\
  \ < a_n < l$).\n\nIt is guaranteed that the sum of $n$ among all test cases does\
  \ not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case print a single\
  \ real number: the time required for cars to meet.\n\nYour answer will be considered\
  \ correct, if its absolute or relative error does not exceed $10^{-6}$. More formally,\
  \ if your answer is $a$ and jury's answer is $b$, your answer will be considered\
  \ correct if $\\frac{|a-b|}{\\max{(1, b)}} \\leq 10^{-6}$.\n\n\n-----Example-----\n\
  Input\n5\n2 10\n1 9\n1 10\n1\n5 7\n1 2 3 4 6\n2 1000000000\n413470354 982876160\n\
  9 478\n1 10 25 33 239 445 453 468 477\n\nOutput\n3.000000000000000\n3.666666666666667\n\
  2.047619047619048\n329737645.750000000000000\n53.700000000000000\n\n\n\n-----Note-----\n\
  \nIn the first test case cars will meet in the coordinate $5$.\n\nThe first car\
  \ will be in the coordinate $1$ in $1$ second and after that its speed will increase\
  \ by $1$ and will be equal to $2$ meters per second. After $2$ more seconds it will\
  \ be in the coordinate $5$. So, it will be in the coordinate $5$ in $3$ seconds.\n\
  \nThe second car will be in the coordinate $9$ in $1$ second and after that its\
  \ speed will increase by $1$ and will be equal to $2$ meters per second. After $2$\
  \ more seconds it will be in the coordinate $5$. So, it will be in the coordinate\
  \ $5$ in $3$ seconds.\n\nIn the second test case after $1$ second the first car\
  \ will be in the coordinate $1$ and will have the speed equal to $2$ meters per\
  \ second, the second car will be in the coordinate $9$ and will have the speed equal\
  \ to $1$ meter per second. So, they will meet after $\\frac{9-1}{2+1} = \\frac{8}{3}$\
  \ seconds. So, the answer is equal to $1 + \\frac{8}{3} = \\frac{11}{3}$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_cars_meeting (n l : Nat) (flags : List Nat) : Nat :=\n\
  \  sorry\n"
"vc-theorems": "theorem meeting_time_positive (n l : Nat) (flags : List Nat) \n  (h1\
  \ : n > 0) (h2 : l > n) (h3 : flags.length = n) :\n  solve_cars_meeting n l flags\
  \ > 0 :=\n  sorry\n\n\ntheorem meeting_time_less_than_length (n l : Nat) (flags\
  \ : List Nat)\n  (h1 : n > 0) (h2 : l > n) (h3 : flags.length = n) :\n  solve_cars_meeting\
  \ n l flags < l :=\n  sorry\n\n\ntheorem meeting_time_less_than_half (n l : Nat)\
  \ (flags : List Nat)\n  (h1 : n > 0) (h2 : l > n) (h3 : flags.length = n) :\n  solve_cars_meeting\
  \ n l flags ≤ l/2 :=\n  sorry\n\n\ntheorem flags_strictly_increasing (n l : Nat)\
  \ (flags : List Nat)\n  (h1 : n > 0) (h2 : l > n) (h3 : flags.length = n) :\n  ∀\
  \ i : Fin (n-1), flags[i.val] < flags[i.val+1] :=\n  sorry\n\n\ntheorem flags_within_bounds\
  \ (n l : Nat) (flags : List Nat)\n  (h1 : n > 0) (h2 : l > n) (h3 : flags.length\
  \ = n) :\n  ∀ x ∈ flags, 0 < x ∧ x < l :=\n  sorry\n\n\ntheorem numerical_stability\
  \ (n l : Nat) (flags flags_perturbed : List Nat)\n  (h1 : n > 0) (h2 : l > n) (h3\
  \ : flags.length = n) \n  (h4 : flags_perturbed.length = n)\n  (h5 : ∀ (i : Fin\
  \ n), flags[i.val] - flags_perturbed[i.val] ≤ 1) :\n  solve_cars_meeting n l flags\
  \ - solve_cars_meeting n l flags_perturbed ≤ 1 :=\n  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
