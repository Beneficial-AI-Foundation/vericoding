"vc-description": "Zonal Computing Olympiad 2013, 10 Nov 2012\n\nLittle Red Riding\
  \ Hood is carrying a basket with berries through the forest to her grandmother's\
  \ house.  The forest is arranged in the form of a square N × N grid of cells.  The\
  \ top left corner cell, where Little Red Riding Hood starts her journey, is numbered\
  \ (1,1) and the bottom right corner cell, where her grandmother lives, is numbered\
  \ (N,N).  In each step, she can move either one position right or one position down.\n\
  \nThe forest is full of dangerous wolves and she is looking for a safe path to reach\
  \ her destination.  Little Red Riding Hood's fairy godmother has placed some special\
  \ anti-wolf magical charms in some of the cells in the grid.  Each charm has a strength.\
  \  If the charm in cell (i,j) has strength k then its zone of influence is all the\
  \ cells within k steps of (i,j); that is, all cells (i',j') such that |i - i'| +\
  \ |j - j'| ≤ k.  A cell within the zone of influence of a charm is safe from wolves.\
  \  A safe path from (1,1) to (N,N) is one in which every cell along the path is\
  \ safe.\n\nLittle Red Riding Hood is carrying a basket with berries. In each cell,\
  \ she drops some berries while pushing her way through the thick forest.  However,\
  \ sometimes she is also able to pick up fresh berries.  Each cell is labelled with\
  \ an integer that indicates the net change in the number of berries in her basket\
  \ on passing through the cell; that is, the number of berries she picks up in that\
  \ cell minus the number of berries she drops.  You can assume that there are enough\
  \ berries in her basket to start with so that the basket never becomes empty.\n\n\
  Little Red Riding Hood knows the positions and strengths of all the magic charms\
  \ and is looking for a safe path along which the number of berries she has in the\
  \ basket when she reaches her grandmother's house is maximized.\n\nAs an example\
  \ consider the following grid:\n\n3  3  2  4  3 \n2  1 -1 -2  2  \n-1  2  4  3 -3\
  \  \n-2  2  3  2  1  \n3 -1  2 -1  2  \n\nSuppose there are 3 magic charms, at position\
  \ (1,2) with strength 2, at position (4,5) with strength 2 and one at position (4,2)\
  \ with strength 1.  The positions within the zone of influence of these three charms\
  \ are indicated in the three grids below using X's.  \n\nX  X  X  X  .         .\
  \  .  .  .  .         .  .  .  .  .\nX  X  X  .  .         .  .  .  .  X       \
  \  .  .  .  .  .\n.  X  .  .  .         .  .  .  X  X         .  X  .  .  .\n. \
  \ .  .  .  .         .  .  X  X  X         X  X  X  .  .\n.  .  .  .  .        \
  \ .  .  .  X  X         .  X  .  .  .\n\nPutting these together, the cells that\
  \ are under the zone of influence of at least one charm are marked with X below.\n\
  \nX  X  X  X  .\nX  X  X  .  X\n.  X  .  X  X\nX  X  X  X  X\n.  X  .  X  X\n\n\
  Here are two examples of safe paths in this grid, marked using Y's.  \n\nY  Y  X\
  \  X  .          Y  X  X  X  .\nX  Y  X  .  X          Y  Y  X  .  X\n.  Y  .  X\
  \  X          .  Y  .  X  X\nX  Y  Y  Y  Y          X  Y  Y  Y  X\n.  X  .  X  Y\
  \          .  X  .  Y  Y\n\nAlong the first path, she accumulates 19 berries while\
  \ on the second path she collects 16 berries.  You can verify that among all safe\
  \ paths, the maximum number of berries she can collect is 19. \n\nYour task is to\
  \ help Little Red Riding Hood find out if there is at least one safe path and, if\
  \ so, compute the maximum number of berries she can collect among all safe paths\
  \ (which may be a negative number, in which case it is the minimum number of berries\
  \ she will lose among all safe paths).\n\n-----Input format-----\nLine 1: Two space\
  \ separated integers N and M, giving the dimension of the grid and the number of\
  \ magic charms, respectively\n\nLines 2 to N+1: These N lines desribe the grid.\
  \  Line i+1 contains N space separated integers, describing the net change in berries\
  \ in the N cells along row i of the grid.\n\nLines N+2 to N+M+1: These M lines describe\
  \ the magic charms.  Each of these lines has 3 integers: the first two integers\
  \ describe the position of the charm in the grid and the third integer describes\
  \ its strength.\n\n-----Output format-----\nThe first line of output must either\
  \ consist of the word YES, if there are safe paths, or the word NO, if there are\
  \ no safe paths. If the output on the first line is YES then the second line should\
  \ contain a single integer giving the maximum number of berries Little Red Riding\
  \ Hood can collect among all safe paths.  \n\n-----Sample Input-----\n5 3\n3 3 2\
  \ 4 3 \n2 1 -1 -2 2  \n-1 2 4 3 -3  \n-2 2 3 2 1  \n3 -1 2 -1 2  \n1 2 2\n4 5 2\n\
  4 2 1\n\n-----Sample Output-----\nYES\n19\n\n-----Test data-----\nIn all subtasks,\
  \ you may assume that 2 ≤ N ≤ 500.  Each value on the grid is guaranteed to have\
  \ absolute value not more than 1000. \nLet K denote the maximum strength among all\
  \ the magic charms.\n- Subtask 1 (30 marks) : 1 ≤ M ≤ 10, 1 ≤ K ≤ 1,000.\n- Subtask\
  \ 2 (70 marks) : 1 ≤ M ≤ 10,000, 1 ≤ K ≤ 10.\n\n-----Live evaluation data-----\n\
  - Subtask 1: Testcases 0,1,2,3,4.\n- Subtask 2: Testcases 5,6,7,8."
"vc-preamble": "import Imports.AllImports\n\ndef Matrix := List (List Int)\n\ndef\
  \ hasValidPath (matrix : Matrix) (charms : List Charm) : Bool :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_red_riding_hood (n m : Nat) (matrix : Matrix) (charms\
  \ : List Charm) : (String × Int) :=\n  sorry\n"
"vc-theorems": "theorem path_exists_property (n m : Nat) (matrix : Matrix) (charms\
  \ : List Charm) \n  (hn : n > 0) (hm : m > 0) (hmatrix : matrix.length = n) :\n\
  \  let result := solve_red_riding_hood n m matrix charms\n  if hasValidPath matrix\
  \ charms then result.1 = \"YES\" else result.1 = \"NO\" :=\n  sorry\n\n\ntheorem\
  \ no_charms_property (n m : Nat) (matrix : Matrix)\n  (hn : n > 0) (hm : m > 0)\
  \ (hmatrix : matrix.length = n) :\n  (solve_red_riding_hood n m matrix []).1 = \"\
  NO\" :=\n  sorry\n\n\ntheorem all_positive_path_property (n m val : Nat)\n  (hn\
  \ : n > 0) (hm : m > 0) (hval : val > 0) :\n  let matrix : Matrix := List.replicate\
  \ n (List.replicate n (Int.ofNat val))\n  let charms := [⟨⟨0,0⟩, 2*n⟩]\n  let result\
  \ := solve_red_riding_hood n m matrix charms\n  result.1 = \"YES\" ∧ result.2 =\
  \ Int.ofNat (val * (2*n - 1)) :=\n  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
