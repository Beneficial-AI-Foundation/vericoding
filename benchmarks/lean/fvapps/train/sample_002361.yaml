"vc-description": "Given a non-negative integer num, repeatedly add all its digits\
  \ until the result has only one digit.\n\nExample:\n\n\nInput: 38\nOutput: 2 \n\
  Explanation: The process is like: 3 + 8 = 11, 1 + 1 = 2. \n             Since 2\
  \ has only one digit, return it.\n\n\nFollow up:\nCould you do it without any loop/recursion\
  \ in O(1) runtime?"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def add_digits (n : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem add_digits_range (n : Nat) (h : n ≤ 10^6) :\n  0 ≤ add_digits\
  \ n ∧ add_digits n ≤ 9 :=\n  sorry\n\npartial def digit_sum (x : Nat) : Nat :=\n\
  \  if x = 0 then 0\n  else \n    let sum := digit_sum (x / 10) + x % 10\n    if\
  \ sum > 9 then digit_sum sum else sum\n\n\n\n\ntheorem add_digits_zero : \n  add_digits\
  \ 0 = 0 :=\n  sorry\n\n\ntheorem add_digits_nonzero (n : Nat) (h₁ : n ≤ 10^6) (h₂\
  \ : n > 0) :\n  add_digits n > 0 :=\n  sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n\
  #eval add_digits 38\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval add_digits 0\n\n\
  /--\ninfo: 6\n-/\n#guard_msgs in\n#eval add_digits 789\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
