"vc-description": "N Soldiers are lined up for a memory test. They are numbered from\
  \ 0 to N-1 from left to right. \n\nIn the test, there are M rounds. In each round,\
  \ Captain selects one position. Soldier at that position will be numbered 0. All\
  \ the soldiers to the right of selected position will be numbered one greater than\
  \ the soldier to his left. All the soldiers to the left of selected position will\
  \ be numbered one greater than the soldier to his right. \n\neg. if N = 6 and selected\
  \ position is 3, then the numbering will be [3, 2, 1, 0, 1, 2].\n\nAfter M rounds,\
  \ Captain asked each soldier to shout out the greatest number he was assigned during\
  \ the M rounds. In order to check the correctness, Captain asked you to produce\
  \ the correct values for each soldier (That is the correct value each soldier should\
  \ shout out).\n\n-----Input-----\nThe first line of the input contains an integer\
  \ T denoting the number of test cases.\nFirst line of each test case contains two\
  \ integers, N and M.\nSecond line of each test case contains M integers, the positions\
  \ selected by Captain, in that order.\n\n-----Output-----\nFor each test case, output\
  \ one line with N space separated integers.\n\n-----Constraints-----\n- 1 ≤ T ≤\
  \ 10^4\n- 1 ≤ N ≤ 10^5\n- 1 ≤ M ≤ 10^5\n- 1 ≤ Sum of N over all testcases ≤ 10^5\n\
  - 1 ≤ Sum of M over all testcases ≤ 10^5\n- 0 ≤ Positions selected by captain ≤\
  \ N-1\n\n-----Example-----\nInput\n2\n4 1\n1\n6 2\n2 3\n\nOutput\n1 0 1 2\n3 2 1\
  \ 1 2 3"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_soldier_memory (n : Nat) (m : Nat) (positions : List\
  \ Nat) : List Nat :=\n  sorry\n"
"vc-theorems": "theorem solution_length {n m : Nat} {positions : List Nat} \n  (h1\
  \ : n ≥ 2) (h2 : positions.length = m) (h3 : ∀ p ∈ positions, p < n) :\n  (solve_soldier_memory\
  \ n m positions).length = n :=\n  sorry\n\n\ntheorem solution_non_negative {n m\
  \ : Nat} {positions : List Nat}\n  (h1 : n ≥ 2) (h2 : positions.length = m) (h3\
  \ : ∀ p ∈ positions, p < n) :\n  ∀ x ∈ solve_soldier_memory n m positions, x ≥ 0\
  \ :=\n  sorry\n\n\ntheorem solution_monotonic {n m : Nat} {positions : List Nat}\n\
  \  (h1 : n ≥ 2) (h2 : positions.length = m) (h3 : ∀ p ∈ positions, p < n) :\n  ∀\
  \ i : Nat, i < n → i ∉ positions → i > 0 →\n    let result := solve_soldier_memory\
  \ n m positions\n    ∀ v1 v2, result[i]? = some v1 → result[i-1]? = some v2 →\n\
  \    v1 ≤ v2 + 1 ∧ v2 ≤ v1 + 1 :=\n  sorry\n\n\ntheorem single_soldier_linear {n\
  \ pos : Nat}\n  (h1 : n ≥ 2) (h2 : pos < n) :\n  ∀ i : Nat, i < n →\n    let result\
  \ := solve_soldier_memory n 1 [pos]\n    ∀ v, result[i]? = some v →\n    v = if\
  \ i ≥ pos then i - pos else pos - i :=\n  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
