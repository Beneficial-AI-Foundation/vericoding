vc-description: |-
  A list of integers is sorted in “Wave” order if alternate items are not less than their immediate neighbors (thus the other alternate items are not greater than their immediate neighbors).

  Thus, the array `[4, 1, 7, 5, 6, 2, 3]` is in **Wave** order because 4 >= 1, then 1 <= 7, then 7 >= 5, then 5 <= 6, then 6 >= 2, and finally 2 <= 3.

  The wave-sorted lists has to begin with an element not less than the next, so `[1, 4, 5, 3]` is not sorted in Wave because 1 < 4

  Your task is to implement a function that takes a list of integers and sorts it into wave order in place; your function shouldn't return anything.

  Note:
  - The resulting array shouldn't necessarily match anyone in the tests, a function just checks if the array is now wave sorted.
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def waveSort (arr : List Int) : List Int := sorry

  def isWaveSorted (arr : List Int) : Bool := sorry
vc-theorems: |-
  theorem waveSort_preservation (arr : List Int) :
    let result := waveSort arr
    List.length result = List.length arr ∧ 
    result.toArray = arr.toArray ∧ 
    isWaveSorted result := sorry


  theorem waveSort_alternating (arr : List Int) :
    arr.length ≥ 2 →
    let result := waveSort arr
    ∀ i, 1 ≤ i → i < result.length → i % 2 = 1 →
      (result[i]! ≤ result[i-1]! ∧
       (i + 1 < result.length → result[i]! ≤ result[i+1]!)) := sorry


  theorem waveSort_small_arrays (arr : List Int) :
    arr.length ≤ 1 →
    waveSort arr = arr := sorry
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded
