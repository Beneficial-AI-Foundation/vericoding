"vc-description": "You are given a list of preferences for n friends, where n is always\
  \ even.\nFor each person i, preferences[i] contains a list of friends sorted in\
  \ the order of preference. In other words, a friend earlier in the list is more\
  \ preferred than a friend later in the list. Friends in each list are denoted by\
  \ integers from 0 to n-1.\nAll the friends are divided into pairs. The pairings\
  \ are given in a list pairs, where pairs[i] = [xi, yi] denotes xi is paired with\
  \ yi and yi is paired with xi.\nHowever, this pairing may cause some of the friends\
  \ to be unhappy. A friend x is unhappy if x is paired with y and there exists a\
  \ friend u who is paired with v but:\n\nx prefers u over y, and\nu prefers x over\
  \ v.\n\nReturn the number of unhappy friends.\n \nExample 1:\nInput: n = 4, preferences\
  \ = [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], pairs = [[0, 1], [2, 3]]\nOutput:\
  \ 2\nExplanation:\nFriend 1 is unhappy because:\n- 1 is paired with 0 but prefers\
  \ 3 over 0, and\n- 3 prefers 1 over 2.\nFriend 3 is unhappy because:\n- 3 is paired\
  \ with 2 but prefers 1 over 2, and\n- 1 prefers 3 over 0.\nFriends 0 and 2 are happy.\n\
  \nExample 2:\nInput: n = 2, preferences = [[1], [0]], pairs = [[1, 0]]\nOutput:\
  \ 0\nExplanation: Both friends 0 and 1 are happy.\n\nExample 3:\nInput: n = 4, preferences\
  \ = [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]], pairs = [[1, 3], [0, 2]]\nOutput:\
  \ 4\n\n \nConstraints:\n\n2 <= n <= 500\nn is even.\npreferences.length == n\npreferences[i].length ==\
  \ n - 1\n0 <= preferences[i][j] <= n - 1\npreferences[i] does not contain i.\nAll\
  \ values in preferences[i] are unique.\npairs.length == n/2\npairs[i].length ==\
  \ 2\nxi != yi\n0 <= xi, yi <= n - 1\nEach person is contained in exactly one pair."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def unhappyFriends (n: Nat) (preferences: List (List Nat)) (pairs:\
  \ List (List Nat)) : Nat :=\nsorry\n"
"vc-theorems": "theorem unhappyFriends_output_is_nat (n: Nat) (preferences: List (List\
  \ Nat)) (pairs: List (List Nat)) :\n  n % 2 = 0 →\n  n ≥ 2 → \n  n ≤ 6 →\n  (∀ p\
  \ ∈ preferences, p.length = n - 1) →\n  (∀ p ∈ preferences, ∀ i, i ∈ p → i < n ∧\
  \ i ≠ preferences.indexOf p) →\n  (∀ p ∈ pairs, p.length = 2) →\n  (∀ p ∈ pairs,\
  \ ∀ i ∈ p, i < n) →\n  ∃ result, result = unhappyFriends n preferences pairs ∧ result\
  \ ≤ n :=\nsorry\n\n\ntheorem unhappyFriends_output_nonnegative (n: Nat) (preferences:\
  \ List (List Nat)) (pairs: List (List Nat)) :\n  n % 2 = 0 →\n  n ≥ 2 →\n  n ≤ 6\
  \ →\n  (∀ p ∈ preferences, p.length = n - 1) →\n  (∀ p ∈ preferences, ∀ i, i ∈ p\
  \ → i < n ∧ i ≠ preferences.indexOf p) →\n  (∀ p ∈ pairs, p.length = 2) →\n  (∀\
  \ p ∈ pairs, ∀ i ∈ p, i < n) →\n  unhappyFriends n preferences pairs ≥ 0 :=\nsorry\n\
  \n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval unhappyFriends 4 [[1, 2, 3], [3, 2, 0],\
  \ [3, 1, 0], [1, 2, 0]] [[0, 1], [2, 3]]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval\
  \ unhappyFriends 2 [[1], [0]] [[1, 0]]\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval\
  \ unhappyFriends 4 [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]] [[1, 3], [0, 2]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
