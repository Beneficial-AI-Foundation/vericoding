"vc-description": "Chef has a calculator which has two screens and two buttons. Initially,\
  \ each screen shows the number zero. Pressing the first button increments the number\
  \ on the first screen by 1, and each click of the first button consumes 1 unit of\
  \ energy.\nPressing the second button increases the number on the second screen\
  \ by the number which is currently appearing on the first screen. Each click of\
  \ the second button consumes B units of energy.\nInitially the calculator has N\
  \ units of energy.\nNow chef wonders what the maximum possible number is, that he\
  \ gets on the second screen of the calculator, with the limited energy.\n\n-----Input-----\n\
  The first line of the input contains an integer T denoting the number of test cases.\n\
  Each test case is described using a single line containing two integers, N and B.\n\
  \n-----Output-----\nFor each test case, output a single line containing the answer\
  \ to this test case.\n\n-----Constraints-----\n- 1 ≤ T ≤ 10,000\n- 1 ≤ N, B ≤ 1,000,000,000\n\
  \n-----Subtasks-----\n- Subtask 1 (20 points): 1 ≤ N, B ≤ 1,000\n- Subtask 2 (80\
  \ points): Original constraints\n\n-----Example-----\nInput:\n3\n10 2\n8 5\n6 1\n\
  \nOutput:\n12\n3\n9\n\n-----Explanation-----\nExample case 1. There are 10 units\
  \ of energy available. Pressing second button takes 2 units of energy. Chef can\
  \ achieve 12 on the second screen as follows.\n\n- Press first button to get scores\
  \ (1, 0). 9 units of energey is left.\n- Press first button to get scores (2, 0).\
  \ 8 units of energy remaining.\n- Press first button to get scores (3, 0). 7 units\
  \ of energy remaining.\n- Press first button to get scores (4, 0). 6 units of energy\
  \ remaining.\n- Press second button to get scores (4, 4). 4 units of energy remaining.\n\
  - Press second button to get scores (4, 8). 2 units of energy remaining.\n- Press\
  \ second button to get scores (4, 12). 0 units of energy remaining."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calc_max_second_screen (n b : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem calc_max_second_screen_nonnegative \n  {n b : Nat} (h : b\
  \ < n) : \n  calc_max_second_screen n b ≥ 0 :=\n  sorry\n\n\ntheorem calc_max_second_screen_energy_constraint\n\
  \  {n b : Nat} (h : b < n) :\n  let button_presses := n/(2*b)\n  let energy_left\
  \ := n - b * button_presses\n  energy_left ≥ 0 :=\n  sorry\n\n/--\ninfo: 12\n-/\n\
  #guard_msgs in\n#eval calc_max_second_screen 10 2\n\n/--\ninfo: 3\n-/\n#guard_msgs\
  \ in\n#eval calc_max_second_screen 8 5\n\n/--\ninfo: 9\n-/\n#guard_msgs in\n#eval\
  \ calc_max_second_screen 6 1\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
