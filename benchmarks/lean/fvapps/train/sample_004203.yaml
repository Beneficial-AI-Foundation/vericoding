"vc-description": "You need to write a function, that returns the first non-repeated\
  \ character in the given string.\n\nFor example for string `\"test\"` function should\
  \ return `'e'`.  \nFor string `\"teeter\"` function should return `'r'`.  \n  \n\
  If a string contains all unique characters, then return just the first character\
  \ of the string.  \nExample: for input `\"trend\"` function should return `'t'`\
  \  \n  \nYou can assume, that the input string has always non-zero length.\n\nIf\
  \ there is no repeating character, return `null` in JS or Java, and `None` in Python."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def first_non_repeated (s : String) : Option Char := sorry\n\n\
  theorem first_non_repeated_all_repeated (s : String) :\n  first_non_repeated (s\
  \ ++ s) = none := sorry\n"
"vc-theorems": "theorem first_non_repeated_single_unique (s : String) (h : s.length\
  \ > 0) \n  (unique : Char) (h2 : ∀ c ∈ s.data, c ≠ unique) :\n  first_non_repeated\
  \ (s ++ s ++ toString unique ++ s ++ s) = some unique := sorry\n\n\ntheorem first_non_repeated_empty\
  \ :\n  first_non_repeated \"\" = none := sorry\n\n\ntheorem first_non_repeated_count_one\
  \ {s : String} {c : Char} \n  (h : first_non_repeated s = some c) :\n  (s.data.count\
  \ c = 1) ∧ \n  (c ∈ s.data) ∧\n  (∀ i : Nat, i < s.data.indexOf c → s.data[i]?.map\
  \ (fun x => s.data.count x) ≠ some 1) := sorry\n\n/--\ninfo: 'e'\n-/\n#guard_msgs\
  \ in\n#eval first_non_repeated \"test\"\n\n/--\ninfo: 'r'\n-/\n#guard_msgs in\n\
  #eval first_non_repeated \"teeter\"\n\n/--\ninfo: '5'\n-/\n#guard_msgs in\n#eval\
  \ first_non_repeated \"1122321235121222\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
