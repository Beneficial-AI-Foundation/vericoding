"vc-description": "Recently Polycarpus has learned the \"bitwise AND\" operation (which\
  \ is also called \"AND\") of non-negative integers. Now he wants to demonstrate\
  \ the school IT teacher his superb manipulation with the learned operation.\n\n\
  For that Polycarpus came to school a little earlier and wrote on the board a sequence\
  \ of non-negative integers a_1, a_2, ..., a_{n}. He also wrote a square matrix b\
  \ of size n × n. The element of matrix b that sits in the i-th row in the j-th column\
  \ (we'll denote it as b_{ij}) equals:  the \"bitwise AND\" of numbers a_{i} and\
  \ a_{j} (that is, b_{ij} = a_{i} & a_{j}), if i ≠ j;  -1, if i = j. \n\nHaving written\
  \ out matrix b, Polycarpus got very happy and wiped a off the blackboard. But the\
  \ thing is, the teacher will want this sequence to check whether Polycarpus' calculations\
  \ were correct. Polycarus urgently needs to restore the removed sequence of integers,\
  \ or else he won't prove that he can count correctly.\n\nHelp Polycarpus, given\
  \ matrix b, restore the sequence of numbers a_1, a_2, ..., a_{n}, that he has removed\
  \ from the board. Polycarpus doesn't like large numbers, so any number in the restored\
  \ sequence mustn't exceed 10^9.\n\n\n-----Input-----\n\nThe first line contains\
  \ a single integer n (1 ≤ n ≤ 100) — the size of square matrix b. Next n lines contain\
  \ matrix b. The i-th of these lines contains n space-separated integers: the j-th\
  \ number represents the element of matrix b_{ij}. It is guaranteed, that for all\
  \ i (1 ≤ i ≤ n) the following condition fulfills: b_{ii} = -1. It is guaranteed\
  \ that for all i, j (1 ≤ i, j ≤ n; i ≠ j) the following condition fulfills: 0 ≤\
  \ b_{ij} ≤ 10^9, b_{ij} = b_{ji}.\n\n\n-----Output-----\n\nPrint n non-negative\
  \ integers a_1, a_2, ..., a_{n} (0 ≤ a_{i} ≤ 10^9) — the sequence that Polycarpus\
  \ wiped off the board. Separate the numbers by whitespaces. \n\nIt is guaranteed\
  \ that there is sequence a that satisfies the problem conditions. If there are multiple\
  \ such sequences, you are allowed to print any of them.\n\n\n-----Examples-----\n\
  Input\n1\n-1\n\nOutput\n0 \nInput\n3\n-1 18 0\n18 -1 0\n0 0 -1\n\nOutput\n18 18\
  \ 0 \nInput\n4\n-1 128 128 128\n128 -1 148 160\n128 148 -1 128\n128 160 128 -1\n\
  \nOutput\n128 180 148 160 \n\n\n-----Note-----\n\nIf you do not know what is the\
  \ \"bitwise AND\" operation please read: http://en.wikipedia.org/wiki/Bitwise_operation."
"vc-preamble": "import Imports.AllImports\n\ndef solve_bitwise_and (n : Nat) (matrix\
  \ : List (List Int)) : List Nat := sorry\n\ndef bitwiseOr (x y : Nat) : Nat := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def intToNat (i : Int) : Nat :=\n  if i < 0 then 0 else i.natAbs\n\
  \n\n\n\n\n\n"
"vc-theorems": "theorem solve_bitwise_and_zero_matrix\n  (n : Nat) :\n  let matrix\
  \ := List.map (fun i => List.map (fun j => if i = j then -1 else 0) (List.range\
  \ n)) (List.range n)\n  solve_bitwise_and n matrix = List.replicate n 0 := sorry\n\
  \n/--\ninfo: [0]\n-/\n#guard_msgs in\n#eval solve_bitwise_and 1 [[-1]]\n\n/--\n\
  info: [18, 18, 0]\n-/\n#guard_msgs in\n#eval solve_bitwise_and 3 [[-1, 18, 0], [18,\
  \ -1, 0], [0, 0, -1]]\n\n/--\ninfo: [128, 180, 148, 160]\n-/\n#guard_msgs in\n#eval\
  \ solve_bitwise_and 4 [[-1, 128, 128, 128], [128, -1, 148, 160], [128, 148, -1,\
  \ 128], [128, 160, 128, -1]]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded_and_plausible"
