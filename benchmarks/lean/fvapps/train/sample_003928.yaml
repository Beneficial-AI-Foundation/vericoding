"vc-description": "A special type of prime is generated by the formula `p = 2^m *\
  \ 3^n + 1` where `m` and `n` can be any non-negative integer.\n\nThe first `5` of\
  \ these primes are `2, 3, 5, 7, 13`, and are generated as follows: \n```Haskell\n\
  2 = 2^0 * 3^0 + 1\n3 = 2^1 * 3^0 + 1\n5 = 2^2 * 3^0 + 1\n7 = 2^1 * 3^1 + 1\n13 =\
  \ 2^2 * 3^1 + 1\n..and so on\n```\nYou will be given a range and your task is to\
  \ return the number of primes that have this property. For example, `solve(0,15)\
  \ = 5`, because there are only `5` such primes `>= 0 and < 15`; they are `2,3,5,7,13`.\
  \ The upper limit of the tests will not exceed `1,500,000`.\n\nMore examples in\
  \ the test cases. \n\nGood luck!\n\nIf you like Prime Katas, you will enjoy this\
  \ Kata: [Simple Prime Streaming](https://www.codewars.com/kata/5a908da30025e995880000e3)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve (x y : Nat) : Nat := sorry\n\ndef isSpecialPrime (n :\
  \ Nat) : Bool := sorry\n"
"vc-theorems": "theorem solve_range_properties (x y : Nat) (hx : x ≤ 1000000) (hy\
  \ : y ≤ 1000000) :\n  solve x y ≥ 0 := sorry\n\n\ntheorem solve_empty_range (x :\
  \ Nat) (hx : x ≤ 1000000) :\n  solve x x = 0 := sorry\n\n\n\n\ntheorem solve_monotonicity\
  \ (x y z : Nat) \n  (hxy : x ≤ y) (hyz : y ≤ z) (hxz : x ≤ z) :\n  solve x y ≤ solve\
  \ x z := sorry\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval solve 0 10\n\n/--\ninfo:\
  \ 5\n-/\n#guard_msgs in\n#eval solve 0 15\n\n/--\ninfo: 8\n-/\n#guard_msgs in\n\
  #eval solve 100 1000\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
