vc-description: |-
  A special type of prime is generated by the formula `p = 2^m * 3^n + 1` where `m` and `n` can be any non-negative integer.

  The first `5` of these primes are `2, 3, 5, 7, 13`, and are generated as follows: 
  ```Haskell
  2 = 2^0 * 3^0 + 1
  3 = 2^1 * 3^0 + 1
  5 = 2^2 * 3^0 + 1
  7 = 2^1 * 3^1 + 1
  13 = 2^2 * 3^1 + 1
  ..and so on
  ```
  You will be given a range and your task is to return the number of primes that have this property. For example, `solve(0,15) = 5`, because there are only `5` such primes `>= 0 and < 15`; they are `2,3,5,7,13`. The upper limit of the tests will not exceed `1,500,000`.

  More examples in the test cases. 

  Good luck!

  If you like Prime Katas, you will enjoy this Kata: [Simple Prime Streaming](https://www.codewars.com/kata/5a908da30025e995880000e3)
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def solve (x y : Nat) : Nat := sorry

  def isSpecialPrime (n : Nat) : Bool := sorry
vc-theorems: |
  theorem solve_range_properties (x y : Nat) (hx : x ≤ 1000000) (hy : y ≤ 1000000) :
    solve x y ≥ 0 := sorry


  theorem solve_empty_range (x : Nat) (hx : x ≤ 1000000) :
    solve x x = 0 := sorry




  theorem solve_monotonicity (x y z : Nat) 
    (hxy : x ≤ y) (hyz : y ≤ z) (hxz : x ≤ z) :
    solve x y ≤ solve x z := sorry

  /--
  info: 4
  -/
  #guard_msgs in
  #eval solve 0 10

  /--
  info: 5
  -/
  #guard_msgs in
  #eval solve 0 15

  /--
  info: 8
  -/
  #guard_msgs in
  #eval solve 100 1000
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible
