"vc-description": "You have a rectangular chocolate bar consisting of n × m single\
  \ squares. You want to eat exactly k squares, so you may need to break the chocolate\
  \ bar. \n\nIn one move you can break any single rectangular piece of chocolate in\
  \ two rectangular pieces. You can break only by lines between squares: horizontally\
  \ or vertically. The cost of breaking is equal to square of the break length.\n\n\
  For example, if you have a chocolate bar consisting of 2 × 3 unit squares then you\
  \ can break it horizontally and get two 1 × 3 pieces (the cost of such breaking\
  \ is 3^2 = 9), or you can break it vertically in two ways and get two pieces: 2\
  \ × 1 and 2 × 2 (the cost of such breaking is 2^2 = 4).\n\nFor several given values\
  \ n, m and k find the minimum total cost of breaking. You can eat exactly k squares\
  \ of chocolate if after all operations of breaking there is a set of rectangular\
  \ pieces of chocolate with the total size equal to k squares. The remaining n·m\
  \ - k squares are not necessarily form a single rectangular piece.\n\n\n-----Input-----\n\
  \nThe first line of the input contains a single integer t (1 ≤ t ≤ 40910) — the\
  \ number of values n, m and k to process.\n\nEach of the next t lines contains three\
  \ integers n, m and k (1 ≤ n, m ≤ 30, 1 ≤ k ≤ min(n·m, 50)) — the dimensions of\
  \ the chocolate bar and the number of squares you want to eat respectively.\n\n\n\
  -----Output-----\n\nFor each n, m and k print the minimum total cost needed to break\
  \ the chocolate bar, in order to make it possible to eat exactly k squares.\n\n\n\
  -----Examples-----\nInput\n4\n2 2 1\n2 2 3\n2 2 2\n2 2 4\n\nOutput\n5\n5\n4\n0\n\
  \n\n\n-----Note-----\n\nIn the first query of the sample one needs to perform two\
  \ breaks:  to split 2 × 2 bar into two pieces of 2 × 1 (cost is 2^2 = 4),  to split\
  \ the resulting 2 × 1 into two 1 × 1 pieces (cost is 1^2 = 1). \n\nIn the second\
  \ query of the sample one wants to eat 3 unit squares. One can use exactly the same\
  \ strategy as in the first query of the sample."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_min_chocolate_break_cost (n m k : Nat) : Nat :=\n  sorry\n\
  \n\n"
"vc-theorems": "theorem zero_cost_for_exact_pieces (n m k : Nat)\n  (hn : n > 0) (hm\
  \ : m > 0) (hk : k ≤ 25)\n  (h_exact : n * m = k) :\n  find_min_chocolate_break_cost\
  \ n m k = 0 :=\nsorry \n\n\ntheorem zero_pieces_cost_nothing (n m k : Nat)\n  (hn\
  \ : n > 0) (hm : m > 0)\n  (hk_zero : k = 0) :\n  find_min_chocolate_break_cost\
  \ n m k = 0 :=\nsorry\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval find_min_chocolate_break_cost\
  \ 2 2 1\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval find_min_chocolate_break_cost\
  \ 2 2 3\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval find_min_chocolate_break_cost\
  \ 2 2 4\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
