"vc-description": "Mathison recently inherited an ancient papyrus that contained some\
  \ text. Unfortunately, the text was not a\npangram. Now, Mathison has a particular\
  \ liking for holoalphabetic strings and the text bothers him. The good news is that\
  \ Mathison can buy letters from the local store in order to turn his text into a\
  \ pangram.\n\nHowever, each letter has a price and Mathison is not very rich. Can\
  \ you help Mathison find the cheapest way to obtain a pangram?\n\n-----Input-----\n\
  The first line of the input file will contain one integer, T, representing the number\
  \ of tests.\nEach test will be formed from two lines. The first one contains 26\
  \ space-separated integers, representing the prices of all letters.\nThe second\
  \ will contain Mathison's initial text (a string of N lowercase letters).\n\n-----Output-----\n\
  The output file will contain T lines, one for each test. Each line will contain\
  \ the answer for the corresponding test.\n\n-----Constraints and notes-----\n- 1\
  \ ≤ T ≤ 10\n- 1 ≤ N ≤ 50,000\n- All prices are natural numbers between 1 and 1,000,000\
  \ (i.e. 106).\n- A pangram is a string that contains every letter of the Latin alphabet\
  \ at least once.\n- All purchased letters are added to the end of the string.\n\n\
  -----Subtaks-----\nSubtask #1 (30 points):\n\n- N = 1\n\nSubtask #2 (70 points):\n\
  \n- Original constraints\n\n-----Example-----\nInput:\n2\n1 2 3 4 5 6 7 8 9 10 11\
  \ 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\nabcdefghijklmopqrstuvwz\n1 2 3 4\
  \ 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\nthequickbrownfoxjumpsoverthelazydog\n\
  \nOutput:\n63\n0\n\n-----Explanation-----\nFirst test\nThere are three letters missing\
  \ from the original string: n (price 14), x (price 24), and y (price 25).\nTherefore\
  \ the answer is 14 + 24 + 25 = 63.\n\nSecond test\nNo letter is missing so there\
  \ is no point in buying something. The answer is 0."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def get_pangram_cost (prices : List Nat) (text : String) : Nat\
  \ := sorry\n\ntheorem pangram_cost_nonnegative (prices : List Nat) (text : String)\
  \ \n    (h : prices.length = 26) : \n  get_pangram_cost prices text ≥ 0 := sorry\n\
  \n\n\n\n"
"vc-theorems": "theorem pangram_cost_empty_string (prices : List Nat)\n    (h : prices.length\
  \ = 26) :\n  get_pangram_cost prices \"\" = prices.foldl (·+·) 0 := sorry\n\n/--\n\
  info: 63\n-/\n#guard_msgs in\n#eval get_pangram_cost [1, 2, 3, 4, 5, 6, 7, 8, 9,\
  \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26] \"abcdefghijklmopqrstuvwz\"\
  \n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval get_pangram_cost [1, 2, 3, 4, 5, 6,\
  \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26] \"\
  thequickbrownfoxjumpsoverthelazydog\"\n\n/--\ninfo: 25\n-/\n#guard_msgs in\n#eval\
  \ get_pangram_cost [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
  \ 1, 1, 1, 1, 1, 1] \"a\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
