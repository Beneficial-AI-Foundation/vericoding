"vc-description": "# Task\n Dudka has `n` details. He must keep exactly 3 of them.\n\
  \n To do this, he performs the following operations until he has only 3 details\
  \ left:\n```\nHe numbers them.\nHe keeps those with either odd or even numbers and\
  \ throws the others away.```\n\n Dudka wants to know how many ways there are to\
  \ get exactly 3 details. Your task is  to help him calculate it.\n\n# Example\n\n\
  \ For `n = 6`, the output should be `2`.\n ```\nDudka has 6 details, numbered 1\
  \ 2 3 4 5 6. \nHe can keep either details with numbers 1, 3, 5, \nor with numbers\
  \ 2, 4, 6. \nBoth options leave him with 3 details, \nso the answer is 2.```\n\n\
  \ For `n = 7`, the output should be `1`.\n ```\nDudka has 7 details, numbered 1\
  \ 2 3 4 5 6 7. \nHe can keep either details 1 3 5 7, or details 2 4 6. \nIf he keeps\
  \ details 1 3 5 7 , \nhe won't be able to get 3 details in the future, \nbecause\
  \ at the next step he will number them 1 2 3 4 \nand will have to keep either details\
  \ 1 3, or 2 4, \nonly two details anyway. \nThat's why he must keep details 2 4\
  \ 6 at the first step, \nso the answer is 1.```\n\n# Input/Output\n\n\n - `[input]`\
  \ integer `n`\n\n  `3 ≤ n ≤ 10^9`\n\n\n - `[output]` an integer\n\n  The number\
  \ of ways to get exactly 3 details."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def three_details (n : Nat) : Nat := sorry\n\n-- Non-negativity\
  \ theorem"
"vc-theorems": "theorem three_details_nonnegative (n : Nat) (h : n > 0) :\n  three_details\
  \ n ≥ 0 := sorry\n\n-- Doubling monotonicity theorem\n\ntheorem three_details_doubling\
  \ (n : Nat) (h : n > 0) :\n  three_details (2 * n) ≥ three_details n := sorry\n\n\
  -- Periodic behavior theorem\n\ntheorem three_details_periodic (n : Nat) (h : n\
  \ > 3) :\n  three_details n = three_details (n / 2) + three_details (n / 2 + n %\
  \ 2) := sorry\n\n-- Base cases theorems\n\ntheorem three_details_base_one : three_details\
  \ 1 = 0 := sorry\n\ntheorem three_details_base_two : three_details 2 = 0 := sorry\n\
  \n\ntheorem three_details_base_three : three_details 3 = 1 := sorry\n\n/--\ninfo:\
  \ 1\n-/\n#guard_msgs in\n#eval three_details 3\n\n/--\ninfo: 2\n-/\n#guard_msgs\
  \ in\n#eval three_details 6\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval three_details\
  \ 4\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
