"vc-description": "For this exercise you will create a global flatten method. The\
  \ method takes in any number of arguments and flattens them into a single array.\
  \ If any of the arguments passed in are an array then the individual objects within\
  \ the array will be flattened so that they exist at the same level as the other\
  \ arguments. Any nested arrays, no matter how deep, should be flattened into the\
  \ single array result.\n\nThe following are examples of how this function would\
  \ be used and what the expected results would be:\n\n```python\nflatten(1, [2, 3],\
  \ 4, 5, [6, [7]]) # returns [1, 2, 3, 4, 5, 6, 7]\nflatten('a', ['b', 2], 3, None,\
  \ [[4], ['c']]) # returns ['a', 'b', 2, 3, None, 4, 'c']\n```"
"vc-preamble": "import Imports.AllImports\n\ndef flatten {α : Type} : List (List α)\
  \ → List α \n  | [] => sorry\n  | x :: xs => sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isNestedList {α : Type} : List (List α) → Bool\n  | [] => sorry\n\
  \  | x :: xs => sorry\n"
"vc-theorems": "theorem flatten_preserves_elements {α : Type} (lst : List (List α))\
  \ (inner : List α) :\n  inner ∈ lst →\n  ∀ x ∈ inner, x ∈ (flatten lst) :=\nsorry\n\
  \n\ntheorem flatten_identity_on_simple_list {α : Type} (lst : List α) :\n  flatten\
  \ [lst] = lst :=\nsorry\n\n\ntheorem flatten_length_simple {α : Type} (lst : List\
  \ α) :\n  List.length (flatten [lst]) = List.length lst :=\nsorry\n\n\ntheorem flatten_nested_ints\
  \ (lst : List (List Int)) (n : Int) : \n  n ∈ (flatten lst) →\n  ∃ inner : List\
  \ Int, inner ∈ lst ∧ n ∈ inner :=\nsorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
