"vc-description": "Shivam is the youngest programmer in the world, he is just 12 years\
  \ old. Shivam is learning programming and today he is writing his first program.\
  \ \n\nProgram is very simple, Given two integers A and B, write a program to add\
  \ these two numbers.\n\n-----Input-----\n\nThe first line contains an integer T,\
  \ the total number of test cases. Then follow T lines, each line contains two Integers\
  \ A and B. \n\n-----Output-----\nFor each test case, add A and B and display it\
  \ in a new line.\n\n-----Constraints-----\n- 1 ≤ T ≤ 1000\n- 0 ≤ A,B ≤ 10000\n\n\
  -----Example-----\nInput\n3 \n1 2\n100 200\n10 40\n\nOutput\n3\n300\n50"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sum_numbers (input : List String) : List String := sorry\n\n\
  theorem sum_numbers_length_matches_input {input : List String} :\n  input.length\
  \ = (sum_numbers input).length := sorry\n"
"vc-theorems": "theorem sum_numbers_correct_sum {input : List String} {i : Nat} (h\
  \ : i < input.length) :\n  let nums := (input.get ⟨i,h⟩).split (· = ' ')\n  let\
  \ a := nums.get ⟨0, sorry⟩ |>.toInt!\n  let b := nums.get ⟨1, sorry⟩ |>.toInt!\n\
  \  (sum_numbers input).get ⟨i, by rw [←sum_numbers_length_matches_input]; exact\
  \ h⟩ = toString (a + b) := sorry\n\n\ntheorem sum_numbers_result_strings {input\
  \ : List String} {i : Nat} (h : i < input.length) :\n  (sum_numbers input).get ⟨i,\
  \ by rw [←sum_numbers_length_matches_input]; exact h⟩ matches \".*\" := sorry\n\n\
  \ntheorem sum_numbers_zeros {input : List String} (h : ∀ (i : Nat) (hi : i < input.length),\
  \ input.get ⟨i,hi⟩ = \"0 0\") :\n  ∀ (i : Nat) (hi : i < input.length), (sum_numbers\
  \ input).get ⟨i, by rw [←sum_numbers_length_matches_input]; exact hi⟩ = \"0\" :=\
  \ sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
