"vc-description": "Abhiram needs to search for an antidote. He comes to know that\
  \ clue for finding the antidote is carefully hidden by KrishnaMurthy in the form\
  \ of a puzzle.\n\nThe puzzle consists of a string S and a keywordK. Abhiram needs\
  \ to find the string of position of anagrams R of the keyword in the string which\
  \ is the clue. \nThe antidote is found in the box numbered R. Help him find his\
  \ clue R.\nAnagram: A word or phrase that is made by arranging the letters of another\
  \ word or phrase in a different order. Eg: 'elvis' and 'lives' are both anagrams\
  \ of each other.\nNote: Consider, Tac and act are not anagrams(case sensitive).\n\
  \n-----Input:-----\nThe first line contains a string S of length land the second\
  \ line contains a keyword K.\n\n-----Output:-----\n\nOutput contains a line\"The\
  \ antidote is found in R.\" Where R= string of positions of anagrams.(the position\
  \ of the first word in the string is 1).\n\n-----Constraints:-----\n1<=l<=500\n\n\
  1<=k<=50\n\n-----Example:-----\nInput:\ncat is the act of tac\ncat\n\nOutput:\n\
  The antidote is found in 46."
"vc-preamble": "import Imports.AllImports\n\ndef find_anagram_positions (haystack\
  \ : String) (needle : String) : String :=\n  sorry\n\n/-- Helper function that converts\
  \ a string to a sorted char array for anagram comparison -/"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def stringToSortedArray (s : String) : Array Char :=\n  (s.data.toArray).qsort\
  \ (· ≤ ·)\n"
"vc-theorems": "theorem output_format {s : String} :\n  let result := find_anagram_positions\
  \ s \"test\"\n  result.startsWith \"The antidote is found in\" ∧ \n  result.endsWith\
  \ \".\" :=\nsorry\n\n\n\n\ntheorem identical_word_not_counted {word : String} :\n\
  \  word ≠ \"\" →\n  find_anagram_positions word word = \"The antidote is found in\
  \ .\" :=\nsorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
