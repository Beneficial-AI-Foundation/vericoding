"vc-description": "Give me Biscuit\n\nSunny wants to make slices of biscuit of size\
  \ c * d into identical pieces.\n\nbut each piece is a square having maximum possible\
  \ side length with no left over piece of biscuit.\n\nInput Format\n\nThe first line\
  \ contains an integer N.\n\nN lines follow. Each line contains two space separated\
  \ integers c and d.\n\nwhich denote length and breadth of the biscuit.\n\nConstraints\n\
  \n1 <= N <= 1000\n\n1 <= c,d <= 1000\nOutput Format\n\nN lines, each containing\
  \ an integer that denotes the number of squares of maximum size, when the biscuit\
  \ is cut as per the given condition.\n\nSample Input \n\n2\n\n2 2\n\n6 9\n\nSample\
  \ Output \n\n1\n\n6\n\nExplanation \n\t\n\nThe 1st testcase has a biscuit whose\
  \ original dimensions are 2 X 2, the biscuit is uncut and is a square.\n\nHence\
  \ the answer is 1.\n\nThe 2nd testcase has a biscuit of size 6 X 9 . We can cut\
  \ it into 54 squares of size 1 X 1 , 6 of size 3 X 3 . For other sizes we will have\
  \ leftovers.\n\nHence, the number of squares of maximum size that can be cut is\
  \ 6."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def number_of_squares (l w : Nat) : Nat := sorry\n\ntheorem square_input\
  \ (n : Nat) (h : n > 0) :\n  number_of_squares n n = 1 := sorry\n"
"vc-theorems": "theorem commutative (l w : Nat) (h₁ : l > 0) (h₂ : w > 0) :\n  number_of_squares\
  \ l w = number_of_squares w l := sorry\n\n\ntheorem output_bounds (l w : Nat) (h₁\
  \ : l > 0) (h₂ : w > 0) :\n  1 ≤ number_of_squares l w ∧ number_of_squares l w ≤\
  \ l * w := sorry\n\n\ntheorem scaling (l factor : Nat) (h₁ : l > 0) (h₂ : factor\
  \ > 0) :\n  number_of_squares (l * factor) (l * factor) = number_of_squares l l\
  \ := sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval number_of_squares 2 2\n\n\
  /--\ninfo: 6\n-/\n#guard_msgs in\n#eval number_of_squares 6 9\n\n/--\ninfo: 6\n\
  -/\n#guard_msgs in\n#eval number_of_squares 4 6\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
