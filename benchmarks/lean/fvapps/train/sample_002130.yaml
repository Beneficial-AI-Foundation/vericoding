"vc-description": "There are $n$ persons who initially don't know each other. On each\
  \ morning, two of them, who were not friends before, become friends.\n\nWe want\
  \ to plan a trip for every evening of $m$ days. On each trip, you have to select\
  \ a group of people that will go on the trip. For every person, one of the following\
  \ should hold:   Either this person does not go on the trip,  Or at least $k$ of\
  \ his friends also go on the trip. \n\nNote that the friendship is not transitive.\
  \ That is, if $a$ and $b$ are friends and $b$ and $c$ are friends, it does not necessarily\
  \ imply that $a$ and $c$ are friends.\n\nFor each day, find the maximum number of\
  \ people that can go on the trip on that day.\n\n\n-----Input-----\n\nThe first\
  \ line contains three integers $n$, $m$, and $k$ ($2 \\leq n \\leq 2 \\cdot 10^5,\
  \ 1 \\leq m \\leq 2 \\cdot 10^5$, $1 \\le k < n$) — the number of people, the number\
  \ of days and the number of friends each person on the trip should have in the group.\n\
  \nThe $i$-th ($1 \\leq i \\leq m$) of the next $m$ lines contains two integers $x$\
  \ and $y$ ($1\\leq x, y\\leq n$, $x\\ne y$), meaning that persons $x$ and $y$ become\
  \ friends on the morning of day $i$. It is guaranteed that $x$ and $y$ were not\
  \ friends before.\n\n\n-----Output-----\n\nPrint exactly $m$ lines, where the $i$-th\
  \ of them ($1\\leq i\\leq m$) contains the maximum number of people that can go\
  \ on the trip on the evening of the day $i$.\n\n\n-----Examples-----\nInput\n4 4\
  \ 2\n2 3\n1 2\n1 3\n1 4\n\nOutput\n0\n0\n3\n3\n\nInput\n5 8 2\n2 1\n4 2\n5 4\n5\
  \ 2\n4 3\n5 1\n4 1\n3 2\n\nOutput\n0\n0\n0\n3\n3\n4\n4\n5\n\nInput\n5 7 2\n1 5\n\
  3 2\n2 5\n3 4\n1 2\n5 3\n1 3\n\nOutput\n0\n0\n0\n0\n3\n4\n4\n\n\n\n-----Note-----\n\
  \nIn the first example,   $1,2,3$ can go on day $3$ and $4$. \n\nIn the second example,\
  \   $2,4,5$ can go on day $4$ and $5$.  $1,2,4,5$ can go on day $6$ and $7$.  $1,2,3,4,5$\
  \ can go on day $8$. \n\nIn the third example,   $1,2,5$ can go on day $5$.  $1,2,3,5$\
  \ can go on day $6$ and $7$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def max_trip_sizes (n m k : Nat) (friendships : List (Nat × Nat))\
  \ : List Nat :=\nsorry\n"
"vc-theorems": "theorem max_trip_sizes_basic_properties\n  (n m k : Nat)\n  (friendships\
  \ : List (Nat × Nat))\n  (h1 : n ≥ 2)\n  (h2 : k < n)\n  (h3 : m ≥ 1)\n  (h4 : ∀\
  \ (p : Nat × Nat), p ∈ friendships → p.1 ≤ n ∧ p.2 ≤ n)\n  (h5 : ∀ (p : Nat × Nat),\
  \ p ∈ friendships → p.1 ≠ p.2)\n  : (List.length (max_trip_sizes n m k friendships)\
  \ = m) ∧ \n    (∀ x ∈ max_trip_sizes n m k friendships, 0 ≤ x ∧ x ≤ n) ∧\n    (∀\
  \ i, i + 1 < List.length (max_trip_sizes n m k friendships) →\n      List.get! (max_trip_sizes\
  \ n m k friendships) i ≤ \n      List.get! (max_trip_sizes n m k friendships) (i\
  \ + 1)) :=\nsorry\n\n\ntheorem max_trip_sizes_degree_bound\n  (n m k : Nat)\n  (friendships\
  \ : List (Nat × Nat))\n  (h1 : n ≥ 2)\n  (h2 : k < n)\n  (h3 : m ≥ 1)\n  (h4 : ∀\
  \ (p : Nat × Nat), p ∈ friendships → p.1 ≤ n ∧ p.2 ≤ n)\n  (h5 : ∀ (p : Nat × Nat),\
  \ p ∈ friendships → p.1 ≠ p.2)\n  : ∀ x ∈ max_trip_sizes n m k friendships, \n \
  \   x ≤ (List.length (List.filter \n      (λ d => d ≥ k) \n      (friendships.foldl\
  \ \n        (λ acc p => \n          let acc' := acc.set (p.1 - 1) ((acc.get! (p.1\
  \ - 1)) + 1)\n          acc'.set (p.2 - 1) ((acc'.get! (p.2 - 1)) + 1)) \n     \
  \   (List.replicate n 0)))) :=\nsorry"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded"
