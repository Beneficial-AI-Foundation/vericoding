"vc-description": "Igor the analyst has adopted n little bunnies. As we all know,\
  \ bunnies love carrots. Thus, Igor has bought a carrot to be shared between his\
  \ bunnies. Igor wants to treat all the bunnies equally, and thus he wants to cut\
  \ the carrot into n pieces of equal area. \n\nFormally, the carrot can be viewed\
  \ as an isosceles triangle with base length equal to 1 and height equal to h. Igor\
  \ wants to make n - 1 cuts parallel to the base to cut the carrot into n pieces.\
  \ He wants to make sure that all n pieces have the same area. Can you help Igor\
  \ determine where to cut the carrot so that each piece have equal area?\n\n [Image]\
  \ Illustration to the first example. \n\n\n-----Input-----\n\nThe first and only\
  \ line of input contains two space-separated integers, n and h (2 ≤ n ≤ 1000, 1\
  \ ≤ h ≤ 10^5).\n\n\n-----Output-----\n\nThe output should contain n - 1 real numbers\
  \ x_1, x_2, ..., x_{n} - 1. The number x_{i} denotes that the i-th cut must be made\
  \ x_{i} units away from the apex of the carrot. In addition, 0 < x_1 < x_2 < ...\
  \ < x_{n} - 1 < h must hold. \n\nYour output will be considered correct if absolute\
  \ or relative error of every number in your output doesn't exceed 10^{ - 6}.\n\n\
  Formally, let your answer be a, and the jury's answer be b. Your answer is considered\
  \ correct if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-6}$.\n\n\n-----Examples-----\n\
  Input\n3 2\n\nOutput\n1.154700538379 1.632993161855\n\nInput\n2 100000\n\nOutput\n\
  70710.678118654752\n\n\n\n-----Note-----\n\nDefinition of isosceles triangle: https://en.wikipedia.org/wiki/Isosceles_triangle."
"vc-preamble": "import Imports.AllImports\n\ndef calculate_cuts (n: Nat) (h: Float)\
  \ : Array Float := \n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calculateAreas (cuts: Array Float) (h: Float) : Array Float\
  \ :=\n  sorry\n"
"vc-theorems": "theorem calculate_cuts_length {n: Nat} {h: Float} \n  (h_n: n ≥ 2)\
  \ (h_h: h > 0) :\n  (calculate_cuts n h).size = n - 1 := \n  sorry\n\n\ntheorem\
  \ calculate_cuts_strictly_increasing {n: Nat} {h: Float}\n  (h_n: n ≥ 2) (h_h: h\
  \ > 0) :\n  ∀ i: Fin ((calculate_cuts n h).size - 1),\n    (calculate_cuts n h)[i.val]\
  \ < (calculate_cuts n h)[i.val + 1] :=\n  sorry\n\n\ntheorem calculate_cuts_bounds\
  \ {n: Nat} {h: Float}\n  (h_n: n ≥ 2) (h_h: h > 0) :\n  ∀ i: Fin (calculate_cuts\
  \ n h).size,\n    0 < (calculate_cuts n h)[i.val] ∧ (calculate_cuts n h)[i.val]\
  \ < h :=\n  sorry\n\n\ntheorem calculate_cuts_equal_areas {n: Nat} {h: Float}\n\
  \  (h_n: n ≥ 2) (h_h: h > 0) :\n  let cuts := calculate_cuts n h\n  let areas :=\
  \ calculateAreas cuts h\n  let expectedArea := h * h / (2 * Float.ofNat n)\n  ∀\
  \ a ∈ areas, (a - expectedArea).abs < 1e-6 * expectedArea := \n  sorry\n\n\ntheorem\
  \ calculate_cuts_minimum_n (h: Float) (h_h: h > 0) :\n  let cuts := calculate_cuts\
  \ 2 h\n  have h_size : cuts.size = 1 := by apply calculate_cuts_length; exact Nat.le_refl\
  \ 2; exact h_h\n  cuts.size = 1 ∧ ((cuts.get ⟨0, by simp [h_size]⟩) - h/Float.sqrt\
  \ 2).abs < 1e-6 * (h/Float.sqrt 2) :=\n  sorry"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded"
