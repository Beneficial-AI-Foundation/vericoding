"vc-description": "During the last Sereja's Codesecrof round the server crashed many\
  \ times, so the round was decided to be made unrated for some participants. \n\n\
  Let's assume that n people took part in the contest. Let's assume that the participant\
  \ who got the first place has rating a_1, the second place participant has rating\
  \ a_2, ..., the n-th place participant has rating a_{n}. Then changing the rating\
  \ on the Codesecrof site is calculated by the formula $d_{i} = \\sum_{j = 1}^{i\
  \ - 1}(a_{j} \\cdot(j - 1) -(n - i) \\cdot a_{i})$.\n\nAfter the round was over,\
  \ the Codesecrof management published the participants' results table. They decided\
  \ that if for a participant d_{i} < k, then the round can be considered unrated\
  \ for him. But imagine the management's surprise when they found out that the participants'\
  \ rating table is dynamic. In other words, when some participant is removed from\
  \ the rating, he is removed from the results' table and the rating is recalculated\
  \ according to the new table. And of course, all applications for exclusion from\
  \ the rating are considered in view of the current table.\n\nWe know that among\
  \ all the applications for exclusion from the rating the first application to consider\
  \ is from the participant with the best rank (the rank with the minimum number),\
  \ for who d_{i} < k. We also know that the applications for exclusion from rating\
  \ were submitted by all participants.\n\nNow Sereja wonders, what is the number\
  \ of participants to be excluded from the contest rating, and the numbers of the\
  \ participants in the original table in the order of their exclusion from the rating.\
  \ Pay attention to the analysis of the first test case for a better understanding\
  \ of the statement.\n\n\n-----Input-----\n\nThe first line contains two integers\
  \ n, k (1 ≤ n ≤ 2·10^5,  - 10^9 ≤ k ≤ 0). The second line contains n space-separated\
  \ integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^9) — ratings of the participants\
  \ in the initial table.\n\n\n-----Output-----\n\nPrint the numbers of participants\
  \ in the order in which they were removed from the table. Print the initial numbers\
  \ of the participants, that is, the numbers that the participants had in the initial\
  \ table.\n\n\n-----Examples-----\nInput\n5 0\n5 3 4 1 2\n\nOutput\n2\n3\n4\n\nInput\n\
  10 -10\n5 5 1 7 5 1 2 4 9 2\n\nOutput\n2\n4\n5\n7\n8\n9\n\n\n\n-----Note-----\n\n\
  Consider the first test sample. \n\n\n\n Initially the sequence of the contest participants'\
  \ ratings equals [5, 3, 4, 1, 2]. You can use this sequence to calculate the sequence\
  \ of rating changes: [0, -9, -13, 8, 14]. According to the problem statement, the\
  \ application of the participant who won the second place will be considered first.\n\
  \n As soon as the second place winner is out from the ratings, the participants'\
  \ rating sequence will equal [5, 4, 1, 2]. By this sequence you can count the new\
  \ sequence of rating changes: [0, -8, 2, 6]. According to the problem statement,\
  \ the application of the participant who won the second place will be considered.\
  \ Initially this participant won third place.\n\n The new rating sequence equals\
  \ [5, 1, 2], the new sequence of rating changes equals [0, -1, 1]. The second place\
  \ participant's application is taken into consideration, initially this participant\
  \ won the fourth place.\n\n The new rating sequence equals [5, 2], the new sequence\
  \ of rating changes equals [0, 0]. No more applications will be considered. \n\n\
  Thus, you should print 2, 3, 4."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solveContestRating (n : Nat) (k : Int) (ratings : List Nat)\
  \ : List Nat :=\n  sorry\n"
"vc-theorems": "theorem solveContestRating_output_is_valid_indices\n  (n : Nat) (k\
  \ : Int) (ratings : List Nat)\n  (h1 : 1 ≤ n ∧ n ≤ 100)\n  (h2 : -1000 ≤ k ∧ k ≤\
  \ 1000)\n  (h3 : ∀ r ∈ ratings, 1 ≤ r ∧ r ≤ 1000)\n  (h4 : 1 ≤ ratings.length ∧\
  \ ratings.length ≤ 100) :\n  let result := solveContestRating n k ratings\n  ∀ x\
  \ ∈ result, 1 ≤ x ∧ x ≤ n :=\n  sorry\n\n\ntheorem solveContestRating_output_no_duplicates\n\
  \  (n : Nat) (k : Int) (ratings : List Nat)\n  (h1 : 1 ≤ n ∧ n ≤ 100)\n  (h2 : -1000\
  \ ≤ k ∧ k ≤ 1000)\n  (h3 : ∀ r ∈ ratings, 1 ≤ r ∧ r ≤ 1000)\n  (h4 : 1 ≤ ratings.length\
  \ ∧ ratings.length ≤ 100) :\n  let result := solveContestRating n k ratings\n  result.Nodup\
  \ :=\n  sorry\n\n\ntheorem solveContestRating_output_length_valid\n  (n : Nat) (k\
  \ : Int) (ratings : List Nat)\n  (h1 : 1 ≤ n ∧ n ≤ 100)\n  (h2 : -1000 ≤ k ∧ k ≤\
  \ 1000)\n  (h3 : ∀ r ∈ ratings, 1 ≤ r ∧ r ≤ 1000)\n  (h4 : 1 ≤ ratings.length ∧\
  \ ratings.length ≤ 100) :\n  let result := solveContestRating n k ratings\n  result.length\
  \ ≤ n :=\n  sorry\n\n\ntheorem solveContestRating_remaining_valid\n  (n : Nat) (k\
  \ : Int) (ratings : List Nat)\n  (h1 : 1 ≤ n ∧ n ≤ 100)\n  (h2 : -1000 ≤ k ∧ k ≤\
  \ 1000)\n  (h3 : ∀ r ∈ ratings, 1 ≤ r ∧ r ≤ 1000)\n  (h4 : 1 ≤ ratings.length ∧\
  \ ratings.length ≤ 100) :\n  let result := solveContestRating n k ratings\n  let\
  \ remaining := List.range n |>.map (·+1) |>.filter (λ x => ¬result.contains x)\n\
  \  remaining.length + result.length = n :=\n  sorry"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded"
