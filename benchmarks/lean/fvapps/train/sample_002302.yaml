"vc-description": "Given an array of integers arr, and three integers a, b and c.\
  \ You need to find the number of good triplets.\nA triplet (arr[i], arr[j], arr[k]) is\
  \ good if the following conditions are true:\n\n0 <= i < j < k < arr.length\n|arr[i]\
  \ - arr[j]| <= a\n|arr[j] - arr[k]| <= b\n|arr[i] - arr[k]| <= c\n\nWhere |x| denotes\
  \ the absolute value of x.\nReturn the number of good triplets.\n \nExample 1:\n\
  Input: arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3\nOutput: 4\nExplanation: There are\
  \ 4 good triplets: [(3,0,1), (3,0,1), (3,1,1), (0,1,1)].\n\nExample 2:\nInput: arr\
  \ = [1,1,2,2,3], a = 0, b = 0, c = 1\nOutput: 0\nExplanation: No triplet satisfies\
  \ all conditions.\n\n \nConstraints:\n\n3 <= arr.length <= 100\n0 <= arr[i] <= 1000\n\
  0 <= a, b, c <= 1000"
"vc-preamble": "import Imports.AllImports\n\ndef isValidTriplet (arr : List Int) (i\
  \ j k a b c : Nat) : Bool :=\n  sorry\n\n\ndef countTripletsBruteforce (arr : List\
  \ Int) (a b c : Nat) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def countGoodTriplets (arr : List Int) (a b c : Nat) : Nat :=\n\
  \  sorry\n"
"vc-theorems": "theorem countGoodTriplets_matches_bruteforce \n    (arr : List Int)\
  \ (a b c : Nat) \n    (h : arr.length ≥ 3)\n    (h2 : arr.length ≤ 20)\n    (h3\
  \ : ∀ x ∈ arr, -100 ≤ x ∧ x ≤ 100)\n    (h4 : a ≤ 50 ∧ b ≤ 50 ∧ c ≤ 50) :\n    countGoodTriplets\
  \ arr a b c = countTripletsBruteforce arr a b c :=\n  sorry\n\n\ntheorem countGoodTriplets_nonnegative\n\
  \    (arr : List Int) (a b c : Nat)\n    (h : arr.length ≥ 3)\n    (h2 : arr.length\
  \ ≤ 20) :\n    0 ≤ countGoodTriplets arr a b c :=\n  sorry\n\n/--\ninfo: 4\n-/\n\
  #guard_msgs in\n#eval count_good_triplets [3, 0, 1, 1, 9, 7] 7 2 3\n\n/--\ninfo:\
  \ 0\n-/\n#guard_msgs in\n#eval count_good_triplets [1, 1, 2, 2, 3] 0 0 1\n\n/--\n\
  info: 0\n-/\n#guard_msgs in\n#eval count_good_triplets [1, 2, 3, 4, 5] 1 1 1\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
