"vc-description": "There are n games in a football tournament. Three teams are participating\
  \ in it. Currently k games had already been played. \n\nYou are an avid football\
  \ fan, but recently you missed the whole k games. Fortunately, you remember a guess\
  \ of your friend for these k games. Your friend did not tell exact number of wins\
  \ of each team, instead he thought that absolute difference between number of wins\
  \ of first and second team will be d_1 and that of between second and third team\
  \ will be d_2.\n\nYou don't want any of team win the tournament, that is each team\
  \ should have the same number of wins after n games. That's why you want to know:\
  \ does there exist a valid tournament satisfying the friend's guess such that no\
  \ team will win this tournament?\n\nNote that outcome of a match can not be a draw,\
  \ it has to be either win or loss.\n\n\n-----Input-----\n\nThe first line of the\
  \ input contains a single integer corresponding to number of test cases t (1 ≤ t\
  \ ≤ 10^5).\n\nEach of the next t lines will contain four space-separated integers\
  \ n, k, d_1, d_2 (1 ≤ n ≤ 10^12; 0 ≤ k ≤ n; 0 ≤ d_1, d_2 ≤ k) — data for the current\
  \ test case.\n\n\n-----Output-----\n\nFor each test case, output a single line containing\
  \ either \"yes\" if it is possible to have no winner of tournament, or \"no\" otherwise\
  \ (without quotes).\n\n\n-----Examples-----\nInput\n5\n3 0 0 0\n3 3 0 0\n6 4 1 0\n\
  6 3 3 0\n3 3 3 2\n\nOutput\nyes\nyes\nyes\nno\nno\n\n\n\n-----Note-----\n\nSample\
  \ 1. There has not been any match up to now (k = 0, d_1 = 0, d_2 = 0). If there\
  \ will be three matches (1-2, 2-3, 3-1) and each team wins once, then at the end\
  \ each team will have 1 win.\n\nSample 2. You missed all the games (k = 3). As d_1\
  \ = 0 and d_2 = 0, and there is a way to play three games with no winner of tournament\
  \ (described in the previous sample), the answer is \"yes\".\n\nSample 3. You missed\
  \ 4 matches, and d_1 = 1, d_2 = 0. These four matches can be: 1-2 (win 2), 1-3 (win\
  \ 3), 1-2 (win 1), 1-3 (win 1). Currently the first team has 2 wins, the second\
  \ team has 1 win, the third team has 1 win. Two remaining matches can be: 1-2 (win\
  \ 2), 1-3 (win 3). In the end all the teams have equal number of wins (2 wins)."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def can_have_no_winner (n k d1 d2 : Nat) : Bool := \n  sorry\n"
"vc-theorems": "theorem no_winner_properties (n k d1 d2 : Nat) :\n  (n % 3 ≠ 0 → ¬(can_have_no_winner\
  \ n k d1 d2 = true)) ∧ \n  (k > n ∨ d1 > n ∨ d2 > n → ¬(can_have_no_winner n k d1\
  \ d2 = true)) ∧\n  (d1 = 0 ∧ d2 = 0 ∧ k % 3 = 0 ∧ k ≤ n → can_have_no_winner n k\
  \ d1 d2 = true) :=\n  sorry\n\n\ntheorem no_winner_trivial_case (n : Nat) :\n  can_have_no_winner\
  \ n 0 0 0 = true :=\n  sorry\n\n\ntheorem no_winner_board_size_multiple_three (n\
  \ k d1 d2 : Nat) :\n  n % 3 ≠ 0 → can_have_no_winner n k d1 d2 = false :=\n  sorry\n\
  \n\ntheorem no_winner_values_bounds (n k d1 d2 : Nat) :\n  k > n ∨ d1 > n ∨ d2 >\
  \ n → can_have_no_winner n k d1 d2 = false :=\n  sorry\n\n\ntheorem no_winner_zero_differences\
  \ (n k : Nat) :\n  k % 3 = 0 → k ≤ n → can_have_no_winner n k 0 0 = true :=\n  sorry\n\
  \n/--\ninfo: True\n-/\n#guard_msgs in\n#eval can_have_no_winner 3 0 0 0\n\n/--\n\
  info: True\n-/\n#guard_msgs in\n#eval can_have_no_winner 3 3 0 0\n\n/--\ninfo: True\n\
  -/\n#guard_msgs in\n#eval can_have_no_winner 6 4 1 0\n\n/--\ninfo: False\n-/\n#guard_msgs\
  \ in\n#eval can_have_no_winner 6 3 3 0\n\n/--\ninfo: False\n-/\n#guard_msgs in\n\
  #eval can_have_no_winner 3 3 3 2\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
