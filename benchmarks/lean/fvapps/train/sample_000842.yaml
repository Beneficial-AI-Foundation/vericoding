"vc-description": "These days, chef is very much interested in Mathematics. He has\
  \ started attending Recitations too! His hunger for problems is increasing day by\
  \ day!\nToday, chef was a given a crumpled maths problem, which he is stuck with\
  \ . He needs your help to do it\nHere's what his teacher said: \"Find sum of all\
  \ numbers till N, do not include numbers which are powers of K from K, K2, K3...\
  \ which are less than or equal to N\"\nEasy, right? Can you solve it?\n\n-----INPUT-----\n\
  The first line of the input contains an integer T, denoting the number of test cases.\
  \ The description of T test cases follows. The first line of each test contains\
  \ two integers N and K, as per the above given problem specification.\n\n-----OUTPUT-----\n\
  For each test case, output a single line printing the sum of the each test case,\
  \ in format Case #T: S, where T is the Tth test case running and S is sum of corresponding\
  \ test case.\n\n-----CONSTRAINTS-----\n\n10 < T < 50\n\n10 < N < 104\n\n0 < K <\
  \ 100\n\n-----EXAMPLE-----\nInput:\n\n2\n\n10 3\n\n20 2\n\nOutput:\n\nCase #1: 43\n\
  \nCase #2: 180"
"vc-preamble": "import Imports.AllImports\n\ndef calculate_special_sum (n: Int) (k:\
  \ Int) : Int :=\n  sorry\n\n\ndef solve_case (n: Int) (k: Int) : String :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def pow (x: Int) (n: Nat) : Int :=\n  match n with\n  | 0 => 1\n\
  \  | n + 1 => x * pow x n\n"
"vc-theorems": "theorem calculate_special_sum_nonnegative \n  (n: Int) (k: Int)\n\
  \  (hn: n ≥ 0) (hk: k ≥ 2) (hk2: k ≤ 100) :\n  calculate_special_sum n k ≥ 0 :=\n\
  \  sorry\n\n\ntheorem calculate_special_sum_upper_bound\n  (n: Int) (k: Int) (power:\
  \ Nat)\n  (hn: n ≥ 0) (hk: k ≥ 2) (hk2: k ≤ 100)\n  (hp: pow k power ≤ n) :\n  calculate_special_sum\
  \ n k ≤ (n * (n+1))/2 :=\n  sorry\n\n\ntheorem calculate_special_sum_negative_input\n\
  \  (n: Int) (k: Int)\n  (hn: n < 0) (hk: k ≥ 2) (hk2: k ≤ 100) :\n  calculate_special_sum\
  \ n k = 0 :=\n  sorry\n\n\ntheorem solve_case_format\n  (n: Int) (k: Int)\n  (hn:\
  \ n ≥ 0) (hk: k ≥ 2) (hk2: k ≤ 100) :\n  solve_case n k = \"Case #1: \" ++ toString\
  \ (calculate_special_sum n k) :=\n  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
