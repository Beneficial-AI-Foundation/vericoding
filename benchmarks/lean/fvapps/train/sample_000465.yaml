"vc-description": "Given the array nums consisting of n positive integers. You computed\
  \ the sum of all non-empty continous subarrays from the array and then sort them\
  \ in non-decreasing order, creating a new array of n * (n + 1) / 2 numbers.\nReturn\
  \ the sum of the numbers from index left to index right (indexed from 1), inclusive,\
  \ in the new array. Since the answer can be a huge number return it modulo 10^9\
  \ + 7.\n \nExample 1:\nInput: nums = [1,2,3,4], n = 4, left = 1, right = 5\nOutput:\
  \ 13 \nExplanation: All subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. After sorting\
  \ them in non-decreasing order we have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9,\
  \ 10]. The sum of the numbers from index le = 1 to ri = 5 is 1 + 2 + 3 + 3 + 4 =\
  \ 13. \n\nExample 2:\nInput: nums = [1,2,3,4], n = 4, left = 3, right = 4\nOutput:\
  \ 6\nExplanation: The given array is the same as example 1. We have the new array\
  \ [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 3 to ri\
  \ = 4 is 3 + 3 = 6.\n\nExample 3:\nInput: nums = [1,2,3,4], n = 4, left = 1, right\
  \ = 10\nOutput: 50\n\n \nConstraints:\n\n1 <= nums.length <= 10^3\nnums.length ==\
  \ n\n1 <= nums[i] <= 100\n1 <= left <= right <= n * (n + 1) / 2"
"vc-preamble": "import Imports.AllImports\n\ndef range_sum (nums : List Nat) (n :\
  \ Nat) (left right : Nat) : Nat :=\n  sorry\n\n\ndef partialSums (nums : List Nat)\
  \ (n : Nat) : List Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def listMin (l : List Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem range_sum_output_properties {nums : List Nat} {n left right\
  \ : Nat}\n  (h1 : nums.length = n)\n  (h2 : !nums.isEmpty)\n  (h3 : ∀ x ∈ nums,\
  \ x ≥ 1 ∧ x ≤ 1000)\n  (h4 : left ≥ 1 ∧ right ≥ 1)\n  (h5 : left ≤ 20 ∧ right ≤\
  \ 20) :\n  let result := range_sum nums n left right\n  result ≥ 0 ∧ result < 10^9\
  \ + 7 :=\nsorry\n\n\ntheorem range_sum_monotonic {nums : List Nat} {n left right\
  \ : Nat}\n  (h1 : nums.length = n)\n  (h2 : !nums.isEmpty) \n  (h3 : left < right)\n\
  \  (h4 : right ≤ n) :\n  range_sum nums n left (right-1) ≤ range_sum nums n left\
  \ right :=\nsorry\n\n\ntheorem range_sum_single_element {nums : List Nat} {n k :\
  \ Nat}\n  (h1 : nums.length = n)\n  (h2 : !nums.isEmpty)\n  (h3 : k ≤ n)\n  (h4\
  \ : k > 0) :\n  let pSums := partialSums nums n\n  ∀ h : k - 1 < pSums.length,\n\
  \  range_sum nums n k k = pSums.get ⟨k-1, h⟩ :=\nsorry\n\n\ntheorem range_sum_full_range\
  \ {nums : List Nat} {n : Nat}\n  (h1 : nums.length = n)\n  (h2 : !nums.isEmpty)\n\
  \  (h3 : ∀ x ∈ nums, x ≥ 1 ∧ x ≤ 100) :\n  range_sum nums n 1 (n * (n+1) / 2) >\
  \ 0 :=\nsorry\n\n\ntheorem range_sum_first_element {nums : List Nat} {n : Nat}\n\
  \  (h1 : nums.length = n)\n  (h2 : !nums.isEmpty) :\n  range_sum nums n 1 1 = listMin\
  \ nums :=\nsorry\n\n/--\ninfo: 13\n-/\n#guard_msgs in\n#eval range_sum [1, 2, 3,\
  \ 4] 4 1 5\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval range_sum [1, 2, 3, 4] 4 3\
  \ 4\n\n/--\ninfo: 50\n-/\n#guard_msgs in\n#eval range_sum [1, 2, 3, 4] 4 1 10\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
