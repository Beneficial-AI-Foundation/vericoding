"vc-description": "An encoded string S is given.  To find and write the decoded string\
  \ to a tape, the encoded string is read one character at a time and the following\
  \ steps are taken:\n\nIf the character read is a letter, that letter is written\
  \ onto the tape.\nIf the character read is a digit (say d), the entire current tape\
  \ is repeatedly written d-1 more times in total.\n\nNow for some encoded string\
  \ S, and an index K, find and return the K-th letter (1 indexed) in the decoded\
  \ string.\n \n\nExample 1:\nInput: S = \"leet2code3\", K = 10\nOutput: \"o\"\nExplanation:\
  \ \nThe decoded string is \"leetleetcodeleetleetcodeleetleetcode\".\nThe 10th letter\
  \ in the string is \"o\".\n\n\nExample 2:\nInput: S = \"ha22\", K = 5\nOutput: \"\
  h\"\nExplanation: \nThe decoded string is \"hahahaha\".  The 5th letter is \"h\"\
  .\n\n\nExample 3:\nInput: S = \"a2345678999999999999999\", K = 1\nOutput: \"a\"\n\
  Explanation: \nThe decoded string is \"a\" repeated 8301530446056247680 times. \
  \ The 1st letter is \"a\".\n\n\n\n\n \nConstraints:\n\n2 <= S.length <= 100\nS will\
  \ only contain lowercase letters and digits 2 through 9.\nS starts with a letter.\n\
  1 <= K <= 10^9\nIt's guaranteed that K is less than or equal to the length of the\
  \ decoded string.\nThe decoded string is guaranteed to have less than 2^63 letters."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def decode_at_index (s: String) (k: Nat) : String :=\n  sorry\n"
"vc-theorems": "theorem decode_at_index_is_letter {s: String} {k: Nat}\n  (h1: k >\
  \ 0) -- k is positive\n  (h2: ∃ c, c ∈ s.data ∧ c.isAlpha) -- s contains at least\
  \ one letter\n  (h3: s.data ≠ [] → ¬(s.data[0]!.isDigit ∧ s.data[0]!.toNat ≥ 2))\
  \ -- s doesn't start with digit 2-9\n  : ∃ c, (decode_at_index s k) = String.mk\
  \ [c] ∧ c.isAlpha := \n  sorry\n\n\ntheorem decode_at_index_is_substring {s: String}\
  \ {k: Nat}  \n  (h1: k > 0)\n  (h2: ∃ c, c ∈ s.data ∧ c.isAlpha)\n  (h3: s.data\
  \ ≠ [] → ¬(s.data[0]!.isDigit ∧ s.data[0]!.toNat ≥ 2))\n  : ∃ c, (decode_at_index\
  \ s k) = String.mk [c] ∧ c ∈ s.data := \n  sorry\n\n\ntheorem decode_at_index_first_letter\
  \ {s: String}\n  (h1: ∃ c, c ∈ s.data ∧ c.isAlpha)\n  (h2: s.data ≠ [] → ¬(s.data[0]!.isDigit\
  \ ∧ s.data[0]!.toNat ≥ 2))\n  (h3: (s.data.filter Char.isAlpha) ≠ [])\n  : decode_at_index\
  \ s 1 = String.mk [(s.data.filter Char.isAlpha).head!] :=\n  sorry\n\n/--\ninfo:\
  \ 'o'\n-/\n#guard_msgs in\n#eval decode_at_index \"leet2code3\" 10\n\n/--\ninfo:\
  \ 'h'\n-/\n#guard_msgs in\n#eval decode_at_index \"ha22\" 5\n\n/--\ninfo: 'a'\n\
  -/\n#guard_msgs in\n#eval decode_at_index \"a2345678999999999999999\" 1\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
