"vc-description": "Sereja is hosting his birthday dinner. He invited his N close friends.\
  \ Let us number the people from 1 to N according to the order in which they arrive\
  \ at the event. The dinner is being held in long straight corridor in which people\
  \ sit in a way such that they won't leave any empty space in between two consecutive\
  \ persons at any given time. \n\nWhen a person number i arrives at the corridor,\
  \ he must go and stand to the immediate right of the person numbered A[i] (if A[i]\
  \ = 0, then this person just stands at the leftmost end of the line). \n\nBut there\
  \ is a problem, as there is no space between two consecutive persons at any given\
  \ time, so for this person to sit, space must be created by moving either all the\
  \ persons to left of the place to the left one step each, or all the persons to\
  \ right of the place to the right one step each.  \n\nNow, Sereja is wondering about\
  \ what could be the minimum number of steps people will take so as to sit in the\
  \ dinner party. Please find it fast, so that Sereja can peacefully entertain his\
  \ guests.\n\n-----Input-----\nFirst line of input contain an integer T — the number\
  \ of test cases. T tests follow.\nFirst line of each test case contain the integer\
  \ N, and the next line contains N integers — A[1], A[2], ... , A[N].\n\n-----Output-----\n\
  For each test case, output a single line with the answer — the minimal number of\
  \ steps required.\n\n-----Constraints-----\n- 1 ≤ T ≤ 100\n- 1 ≤ N ≤ 100\n- 0 ≤\
  \ A[i] < i\n\n-----Example-----\nInput:\n3\n1\n0\n3\n0 0 0\n5\n0 1 2 1 4\n\nOutput:\n\
  0\n0\n3\n\n-----Explanation-----\nExample case 3.\n- First three persons don't need\
  \ any steps to sit. The line after the arrangement of these persons will look like\
  \ [1, 2, 3].  \n\n- When person #4 comes in, he wants to sit to the right of person\
  \ 1, so we need to either move the first person to the left, or the second and third\
  \ persons to the right. The first case is clearly better. Now the line will look\
  \ like [1, 4, 2, 3].  \n\n- When person #5 arrives, he will need to move 2 persons\
  \ in either case. The final arrangement will be [1, 4, 5, 2, 3]. \n\nSo total number\
  \ of steps people moved during the entire process is 1 + 2 = 3. So the answer is\
  \ 3."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def min_steps_to_arrange (n : Nat) (positions : List Nat) : Nat\
  \ :=\n  sorry\n\n-- Any array of all zeros returns 0 steps"
"vc-theorems": "theorem all_zeros {n : Nat} (h : n > 0) :\n  min_steps_to_arrange\
  \ n (List.replicate n 0) = 0 :=\nsorry\n\n-- Steps returned are always non-negative\
  \ (this is implied by Nat return type)\n-- but stating it explicitly for clarity\n\
  \ntheorem steps_non_negative {n : Nat} (positions : List Nat) : \n  min_steps_to_arrange\
  \ n positions ≥ 0 :=\nsorry\n\n-- Positions can only reference valid indices\n\n\
  theorem valid_positions {n : Nat} (positions : List Nat) :\n  List.length positions\
  \ = n →\n  ∀ i, i < n → (positions.get ⟨i, sorry⟩ = 0 ∨ positions.get ⟨i, sorry⟩\
  \ ≤ i) :=\nsorry\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval min_steps_to_arrange\
  \ 1 [0]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval min_steps_to_arrange 3 [0, 0,\
  \ 0]\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval min_steps_to_arrange 5 [0, 1, 2,\
  \ 1, 4]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
