"vc-description": "After learning a lot about space exploration, a little girl named\
  \ Ana wants to change the subject.\n\nAna is a girl who loves palindromes (string\
  \ that can be read the same backwards as forward). She has learned how to check\
  \ for a given string whether it's a palindrome or not, but soon she grew tired of\
  \ this problem, so she came up with a more interesting one and she needs your help\
  \ to solve it:\n\nYou are given an array of strings which consist of only small\
  \ letters of the alphabet. Your task is to find how many palindrome pairs are there\
  \ in the array. A palindrome pair is a pair of strings such that the following condition\
  \ holds: at least one permutation of the concatenation of the two strings is a palindrome.\
  \ In other words, if you have two strings, let's say \"aab\" and \"abcac\", and\
  \ you concatenate them into \"aababcac\", we have to check if there exists a permutation\
  \ of this new string such that it is a palindrome (in this case there exists the\
  \ permutation \"aabccbaa\"). \n\nTwo pairs are considered different if the strings\
  \ are located on different indices. The pair of strings with indices $(i,j)$ is\
  \ considered the same as the pair $(j,i)$.\n\n\n-----Input-----\n\nThe first line\
  \ contains a positive integer $N$ ($1 \\le N \\le 100\\,000$), representing the\
  \ length of the input array.\n\nEacg of the next $N$ lines contains a string (consisting\
  \ of lowercase English letters from 'a' to 'z') — an element of the input array.\
  \ \n\nThe total number of characters in the input array will be less than $1\\,000\\\
  ,000$.\n\n\n-----Output-----\n\nOutput one number, representing how many palindrome\
  \ pairs there are in the array.\n\n\n-----Examples-----\nInput\n3\naa\nbb\ncd\n\n\
  Output\n1\n\nInput\n6\naab\nabcac\ndffe\ned\naa\naade\n\nOutput\n6\n\n\n\n-----Note-----\n\
  \nThe first example:  aa $+$ bb $\\to$ abba. \n\nThe second example:  aab $+$ abcac\
  \ $=$ aababcac $\\to$ aabccbaa aab $+$ aa $=$ aabaa abcac $+$ aa $=$ abcacaa $\\\
  to$ aacbcaa dffe $+$ ed $=$ dffeed $\\to$ fdeedf dffe $+$ aade $=$ dffeaade $\\\
  to$ adfaafde ed $+$ aade $=$ edaade $\\to$ aeddea"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_palindrome_pairs (strings : List String) : Nat :=\n \
  \ sorry\n"
"vc-theorems": "theorem palindrome_pairs_non_negative (strings : List String) :\n\
  \  count_palindrome_pairs strings ≥ 0 :=\n  sorry\n\n\ntheorem empty_list_gives_zero\
  \ :\n  count_palindrome_pairs [] = 0 :=\n  sorry\n\n\ntheorem singleton_list_gives_zero\
  \ (s : String) :\n  count_palindrome_pairs [s] = 0 :=\n  sorry\n\n\ntheorem identical_strings_follow_pattern\
  \ (s : String) (n : Nat) :\n  let strings := List.replicate n s\n  count_palindrome_pairs\
  \ strings = n * (n - 1) / 2 :=\n  sorry\n\n\ntheorem empty_strings_pair_with_each_other\
  \ (n : Nat) :\n  let empty_strings := List.replicate n \"\"\n  count_palindrome_pairs\
  \ empty_strings = n * (n - 1) / 2 :=\n  sorry\n\n\ntheorem single_char_strings_pair_with_each_other\
  \ (n : Nat) :\n  let a_strings := List.replicate n \"a\"\n  count_palindrome_pairs\
  \ a_strings = n * (n - 1) / 2 :=\n  sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n\
  #eval count_palindrome_pairs [\"aa\", \"bb\", \"cd\"]\n\n/--\ninfo: 6\n-/\n#guard_msgs\
  \ in\n#eval count_palindrome_pairs [\"aab\", \"abcac\", \"dffe\", \"ed\", \"aa\"\
  , \"aade\"]\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval count_palindrome_pairs [\"\
  iw\", \"ix\", \"udb\", \"bg\", \"oi\", \"uo\", \"jsm\", \"um\", \"s\", \"quy\",\
  \ \"qo\", \"bxct\", \"ng\", \"rmr\", \"nu\", \"ps\", \"io\", \"kh\", \"w\", \"k\"\
  ]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded_and_plausible"
