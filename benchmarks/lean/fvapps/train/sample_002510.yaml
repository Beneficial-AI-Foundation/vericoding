"vc-description": "=====Function Descriptions=====\nThe eval() expression is a very\
  \ powerful built-in function of Python. It helps in evaluating an expression. The\
  \ expression can be a Python statement, or a code object.\n\nFor example:\n>>> eval(\"\
  9 + 5\")\n14\n>>> x = 2\n>>> eval(\"x + 3\")\n5\n\nHere, eval() can also be used\
  \ to work with Python keywords or defined functions and variables. These would normally\
  \ be stored as strings.\n\nFor example:\n>>> type(eval(\"len\"))\n<type 'builtin_function_or_method'>\n\
  \nWithout eval()\n>>> type(\"len\")\n<type 'str'>\n\n=====Problem Statement=====\n\
  You are given an expression in a line. Read that line as a string variable, such\
  \ as var, and print the result using eval(var).\nNOTE: Python2 users, please import\
  \ from __future__ import print_function. \n\n=====Constraints=====\nInput string\
  \ is less than 100 characters."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def evaluate_expression (expr : String) (locals : Option (String\
  \ → Nat) := none) : Nat :=\n  sorry\n"
"vc-theorems": "theorem arithmetic_addition (a b : Int) :\n  evaluate_expression s!\"\
  {a} + {b}\" = a + b :=\nsorry\n\n\ntheorem arithmetic_multiplication (a b : Int)\
  \ :\n  evaluate_expression s!\"{a} * {b}\" = a * b :=\nsorry\n\n\ntheorem local_variable_access\
  \ (x : Nat) (locals : String → Nat) :\n  locals \"x\" = x →\n  evaluate_expression\
  \ \"x\" (some locals) = x :=\nsorry\n\n\ntheorem local_variable_multiplication (x\
  \ : Nat) (locals : String → Nat) :\n  locals \"x\" = x →\n  evaluate_expression\
  \ \"x * 2\" (some locals) = x * 2 :=\nsorry\n\n\ntheorem builtin_string_length (s\
  \ : String) (locals : String → Nat) :\n  locals \"s\" = s.length →\n  evaluate_expression\
  \ \"len(s)\" (some locals) = s.length :=\nsorry\n\n\ntheorem invalid_expression_raises_error\
  \ :\n  evaluate_expression \"2 +\" = 0 :=\nsorry\n\n\ntheorem undefined_variable_raises_error\
  \ :\n  evaluate_expression \"undefined_var\" = 0 :=\nsorry\n\n/--\ninfo: 5\n-/\n\
  #guard_msgs in\n#eval evaluate_expression \"2 + 3\"\n\n/--\ninfo: 5\n-/\n#guard_msgs\
  \ in\n#eval evaluate_expression \"len(\"hello\")\"\n\n/--\ninfo: 20\n-/\n#guard_msgs\
  \ in\n#eval evaluate_expression \"x * 2\" {\"x\": 10}\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
