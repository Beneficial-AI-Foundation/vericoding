"vc-description": "Every Turkish citizen has an identity number whose validity can\
  \ be checked by these set of rules:\n\n- It is an 11 digit number\n- First digit\
  \ can't be zero\n- Take the sum of 1st, 3rd, 5th, 7th and 9th digit and multiply\
  \ it by 7.\nThen subtract the sum of 2nd, 4th, 6th and 8th digits from this value.\n\
  Modulus 10 of the result should be equal to 10th digit.\n- Sum of first ten digits'\
  \ modulus 10 should be equal to eleventh digit.\n\nExample:\n\n    10167994524\n\
  \    //  1+1+7+9+5= 23   // \"Take the sum of 1st, 3rd, 5th, 7th and 9th digit...\"\
  \n    //    23 * 7= 161   //  \"...and multiply it by 7\"\n    //   0+6+9+4 = 19\
  \   // \"Take the sum of 2nd, 4th, 6th and 8th digits...\"\n    // 161 - 19 = 142\
  \   // \"...and subtract from first value\"\n    // \"Modulus 10 of the result should\
  \ be equal to 10th digit\"\n    10167994524\n             ^ = 2 = 142 % 10\n   \
  \ // 1+0+1+6+7+9+9+4+5+2 = 44\n    // \"Sum of first ten digits' modulus 10 should\
  \ be equal to eleventh digit\"\n    10167994524\n              ^ = 4 = 44 % 10\n\
  \nYour task is to write a function to check the validity of a given number.\nReturn\
  \ `true` or `false` accordingly.\n\nNote: The input can be a string in some cases."
"vc-preamble": "import Imports.AllImports\n\ndef calculate_tenth_digit (digits : List\
  \ Nat) : Nat := sorry\ndef calculate_last_digit (digits : List Nat) : Nat := sorry"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def check_valid_tr_number (n : String) : Bool := sorry\n\ntheorem\
  \ invalid_length_returns_false (n : String) :\n  n.length ≠ 11 → check_valid_tr_number\
  \ n = false := sorry\n"
"vc-theorems": "theorem valid_number_is_accepted {digits : List Nat} (h1 : digits.length\
  \ = 9) \n  (h2 : digits.head! ≠ 0) :\n  let tenth := calculate_tenth_digit digits\n\
  \  let full_digits := digits ++ [tenth]\n  let last := calculate_last_digit full_digits\n\
  \  check_valid_tr_number (toString (full_digits ++ [last])) = true := sorry\n\n\n\
  theorem invalid_check_digits_returns_false {n : String} (h1 : n.length = 11) :\n\
  \  let digits := n.toList.map (·.toString.toNat!)\n  digits[9]! ≠ calculate_tenth_digit\
  \ (digits.take 9) ∨ \n  digits[10]! ≠ calculate_last_digit (digits.take 10) →\n\
  \  check_valid_tr_number n = false := sorry\n\n\ntheorem invalid_type_returns_false\
  \ (n : String) :\n  ¬(∀ c : Char, c ∈ n.data → c.isDigit) →\n  check_valid_tr_number\
  \ n = false := sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval check_valid_tr_number\
  \ 36637640050\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval check_valid_tr_number\
  \ 12762438338\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval check_valid_tr_number\
  \ 10167994524\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
