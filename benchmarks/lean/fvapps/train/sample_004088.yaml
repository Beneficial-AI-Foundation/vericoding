"vc-description": "In this kata, you will write a function that returns the positions\
  \ and the values of the \"peaks\" (or local maxima) of a numeric array.\n\nFor example,\
  \ the array `arr = [0, 1, 2, 5, 1, 0]` has a peak at position `3` with a value of\
  \ `5` (since `arr[3]` equals `5`).\n\n~~~if-not:php,cpp,java,csharp\nThe output\
  \ will be returned as an object with two properties: pos and peaks. Both of these\
  \ properties should be arrays. If there is no peak in the given array, then the\
  \ output should be `{pos: [], peaks: []}`.\n~~~\n~~~if:php\nThe output will be returned\
  \ as an associative array with two key-value pairs: `'pos'` and `'peaks'`.  Both\
  \ of them should be (non-associative) arrays.  If there is no peak in the given\
  \ array, simply return `['pos' => [], 'peaks' => []]`.\n~~~\n~~~if:cpp\nThe output\
  \ will be returned as an object of type `PeakData` which has two members: `pos`\
  \ and `peaks`.  Both of these members should be `vector`s.  If there is no peak\
  \ in the given array then the output should be a `PeakData` with an empty vector\
  \ for both the `pos` and `peaks` members.\n\n`PeakData` is defined in Preloaded\
  \ as follows:\n\n~~~\n~~~if:java\nThe output will be returned as a ``Map>` with\
  \ two key-value pairs: `\"pos\"` and `\"peaks\"`. If there is no peak in the given\
  \ array, simply return `{\"pos\" => [], \"peaks\" => []}`.\n~~~\n~~~if:csharp\n\
  The output will be returned as a `Dictionary>` with two key-value pairs: `\"pos\"\
  ` and `\"peaks\"`. \nIf there is no peak in the given array, simply return `{\"\
  pos\" => new List(), \"peaks\" => new List()}`.\n~~~\n\nExample: `pickPeaks([3,\
  \ 2, 3, 6, 4, 1, 2, 3, 2, 1, 2, 3])` should return `{pos: [3, 7], peaks: [6, 3]}`\
  \ (or equivalent in other languages)\n\nAll input arrays will be valid integer arrays\
  \ (although it could still be empty), so you won't need to validate the input.\n\
  \nThe first and last elements of the array will not be considered as peaks (in the\
  \ context of a mathematical function, we don't know what is after and before and\
  \ therefore, we don't know if it is a peak or not).\n\nAlso, beware of plateaus\
  \ !!! `[1, 2, 2, 2, 1]` has a peak while `[1, 2, 2, 2, 3]` does not. In case of\
  \ a plateau-peak, please only return the position and value of the beginning of\
  \ the plateau. For example: \n`pickPeaks([1, 2, 2, 2, 1])` returns `{pos: [1], peaks:\
  \ [2]}` (or equivalent in other languages)\n\nHave fun!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def pickPeaks : List Int → PeakResult := sorry\n\ntheorem pick_peaks_result_structure\
  \ (arr : List Int) : \n  let result := pickPeaks arr\n  List.length result.pos =\
  \ List.length result.peaks := sorry\n"
"vc-theorems": "theorem peaks_correspond_to_positions (arr : List Int) :\n  let result\
  \ := pickPeaks arr\n  ∀ (i : Nat), i < result.pos.length →\n    arr[result.pos[i]!]!\
  \ = result.peaks[i]! := sorry\n\n\ntheorem positions_are_ordered (arr : List Int)\
  \ :\n  let result := pickPeaks arr\n  ∀ i j, i < j → j < result.pos.length → \n\
  \    result.pos[i]! < result.pos[j]! := sorry\n\n\ntheorem peaks_higher_than_neighbors\
  \ (arr : List Int) :\n  let result := pickPeaks arr\n  ∀ (pos : Nat), pos ∈ result.pos\
  \ →\n    pos > 0 ∧ pos < arr.length - 1 ∧\n    arr[pos]! > arr[pos-1]! ∧\n    (∃\
  \ i, i > pos ∧ i < arr.length ∧\n      (∀ j, pos ≤ j ∧ j < i → arr[j]! = arr[pos]!)\
  \ ∧\n      arr[i]! < arr[pos]!) := sorry\n\n\ntheorem plateau_peak_leftmost (arr\
  \ : List Int) :\n  let result := pickPeaks arr\n  ∀ (pos : Nat), pos ∈ result.pos\
  \ →\n    ∃ i, i > pos ∧ i < arr.length ∧\n    (∀ j, pos ≤ j ∧ j < i → arr[j]! =\
  \ arr[pos]!) ∧\n    arr[i]! < arr[pos]! := sorry\n\n/--\ninfo: expected1\n-/\n#guard_msgs\
  \ in\n#eval pick_peaks [1, 2, 3, 6, 4, 1, 2, 3, 2, 1]\n\n/--\ninfo: expected2\n\
  -/\n#guard_msgs in\n#eval pick_peaks [2, 1, 3, 1, 2, 2, 2, 2, 1]\n\n/--\ninfo: expected3\n\
  -/\n#guard_msgs in\n#eval pick_peaks []\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
