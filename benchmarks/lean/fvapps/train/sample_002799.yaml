"vc-description": "This kata is all about adding numbers.\n\nYou will create a function\
  \ named add. It will return the sum of all the arguments. Sounds easy, doesn't it?\n\
  \nWell Here's the Twist. The inputs will gradually decrease with their index as\
  \ parameter to the function.\n\n```python\n  add(3,4,6) #returns (3/1)+(4/2)+(6/3)=7\n\
  ```\n\nRemember the function will return 0 if no arguments are passed and it must\
  \ round the result if sum is a float.\n\nExample\n```python\n  add() #=> 0\n  add(1,2,3)\
  \ #=> 3\n  add(1,4,-6,20) #=> 6\n```\n\nCheck my another kata here!! http://www.codewars.com/kata/555b73a81a6285b6ce000047"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def add (nums : List Float) : Int := sorry\n\ntheorem add_returns_int\
  \ (nums : List Float) :\n  add nums = add nums := sorry\n"
"vc-theorems": "theorem add_empty_list :\n  add [] = 0 := sorry\n\n\ntheorem add_single_number\
  \ (x : Float) :\n  add [x] = Int.ofNat (x.toUInt64.toNat) := sorry \n\n\ntheorem\
  \ add_weighted_sum (nums : List Float) (h : nums ≠ []) :\n  ∃ w : Float, w = (nums.enum.foldl\
  \ (fun acc p => acc + p.2/(Float.ofNat (p.1 + 1))) 0) ∧ \n  (w - Float.ofInt (add\
  \ nums)).abs < 0.01 := sorry\n\n/--\ninfo: 300\n-/\n#guard_msgs in\n#eval add 100\
  \ 200 300\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval add 2\n\n/--\ninfo: 2\n-/\n\
  #guard_msgs in\n#eval add 4 -3 -2\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
