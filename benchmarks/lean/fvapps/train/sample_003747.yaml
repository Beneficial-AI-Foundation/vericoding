"vc-description": "Given an array, return the reversed version of the array (a different\
  \ kind of reverse though), you reverse portions of the array, you'll be given a\
  \ length argument which represents the length of each portion you are to reverse.\n\
  \nE.g\n  \n  if after reversing some portions of the array and the length of the\
  \ remaining portion in the array is not up to the length argument, just reverse\
  \ them.\n  \n\n`selReverse(array, length)`\n\n- array - array to reverse\n- length\
  \ - length of each portion to reverse\n\nNote : if the length argument exceeds the\
  \ array length, reverse all of them, if the length argument is zero do not reverse\
  \ at all."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sel_reverse (arr : List α) (length : Nat) : List α :=\n  sorry\n"
"vc-theorems": "theorem length_preservation {α : Type} (arr : List α) (length : Nat)\
  \ :\n  List.length (sel_reverse arr length) = List.length arr := sorry \n\n/- For\
  \ element preservation, we can state that any element in the original list\n   exists\
  \ in the result list and vice versa -/\n\ntheorem elem_preservation {α : Type} (arr\
  \ : List α) (length : Nat) (a : α) :\n  (a ∈ sel_reverse arr length) ↔ (a ∈ arr)\
  \ := sorry\n\n\ntheorem zero_length {α : Type} (arr : List α) :\n  sel_reverse arr\
  \ 0 = arr := sorry\n\n\ntheorem chunk_reversal {α : Type} (arr : List α) (length\
  \ : Nat) (h : length > 0) :\n  ∀ i, i < List.length arr →\n  (sel_reverse arr length).get?\
  \ i = \n    arr.get? (i/length * length + (length - 1 - i%length)) := sorry\n\n\n\
  theorem length_one {α : Type} (arr : List α) :\n  sel_reverse arr 1 = arr := sorry\n\
  \n\ntheorem full_length {α : Type} (arr : List α) (h : arr ≠ []) :\n  sel_reverse\
  \ arr (List.length arr) = arr.reverse := sorry\n\n/--\ninfo: [6, 4, 2, 12, 10, 8,\
  \ 16, 14]\n-/\n#guard_msgs in\n#eval sel_reverse [2, 4, 6, 8, 10, 12, 14, 16] 3\n\
  \n/--\ninfo: [2, 1, 4, 3, 6, 5]\n-/\n#guard_msgs in\n#eval sel_reverse [1, 2, 3,\
  \ 4, 5, 6] 2\n\n/--\ninfo: [1, 2, 3, 4, 5, 6]\n-/\n#guard_msgs in\n#eval sel_reverse\
  \ [1, 2, 3, 4, 5, 6] 0\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
