"vc-description": "The image shows how we can obtain the Harmonic Conjugated Point\
  \ of three aligned points A, B, C.\n\n- We choose any point L, that is not in the\
  \ line with A, B and C. We form the triangle ABL\n\n- Then we draw a line from point\
  \ C that intersects the sides of this triangle at points M and N respectively.\n\
  \n- We draw the diagonals of the quadrilateral ABNM; they are AN and BM and they\
  \ intersect at point K\n\n- We unit, with a line L and K, and this line intersects\
  \ the line of points A, B and C at point D\n\nThe point D is named the Conjugated\
  \ Harmonic Point of the points A, B, C.\nYou can get more knowledge related with\
  \ this point at: (https://en.wikipedia.org/wiki/Projective_harmonic_conjugate)\n\
  \nIf we apply the theorems of Ceva (https://en.wikipedia.org/wiki/Ceva%27s_theorem)\n\
  and Menelaus (https://en.wikipedia.org/wiki/Menelaus%27_theorem) we will have this\
  \ formula:\n\n\n\nAC, in the above formula is the length of the segment of points\
  \ A to C in this direction and its value is:\n\n```AC = xA - xC```\n\nTransform\
  \ the above formula using the coordinates ```xA, xB, xC and xD```\n\nThe task is\
  \ to create a function ```harmon_pointTrip()```, that receives three arguments,\
  \ the coordinates of points xA, xB and xC, with values such that : ```xA < xB <\
  \ xC```, this function should output the coordinates of point D for each given triplet,\
  \ such that\n\n`xA < xD < xB < xC`, or to be clearer\n\nlet's see some cases:\n\
  ```python\nharmon_pointTrip(xA, xB, xC) ------> xD # the result should be expressed\
  \ up to four decimals (rounded result)\nharmon_pointTrip(2, 10, 20) -----> 7.1429\
  \ # (2 < 7.1429 < 10 < 20, satisfies the constraint)\nharmon_pointTrip(3, 9, 18)\
  \ -----> 6.75\n```\n\n\nEnjoy it and happy coding!!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def harmon_pointTrip (xA xB xC : Float) : Float := sorry\n\ntheorem\
  \ harmon_point_identity (x : Float) : \n  ∀ ε, ε > 0 → harmon_pointTrip x (x + 2)\
  \ (x + 2) - (x + 2) < ε := sorry\n"
"vc-theorems": "theorem harmon_point_cross_ratio (xA xB xC : Float) :\n  xA < xB →\
  \ xB < xC →\n  let xD := harmon_pointTrip xA xB xC\n  ∀ ε, ε > 0 → ((xA - xC) *\
  \ (xB - xD)) / ((xA - xD) * (xB - xC)) + 1 < ε := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
