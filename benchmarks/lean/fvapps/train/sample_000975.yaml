"vc-description": "Takaki Tono is a Computer Programmer in Tokyo. His boss at work\
  \ shows him an online puzzle, which if solved would earn the solver a full expense\
  \ paid trip to Los Angeles, California. Takaki really wants to solve this, as the\
  \ love of his life, Akari, lives in Los Angeles and he hasn't met her since four\
  \ years. Upon reading the puzzle he realizes that it is a query based problem. The\
  \ problem is as follows :-\n\nYou are given a Tree T with N nodes numbered from\
  \ 1 to N, with each node numbered z having a positive integer Az written on it.\
  \ This integer denotes the value of the node. You have to process Q queries, of\
  \ the following forms :- \n1) C x y : Report the closest two values in the unique\
  \ path from x to y i.e compute min(|Ap - Aq|) where p and q are two distinct nodes\
  \ on the unique path from x to y. \n\n2) F x y : Report the farthest two values\
  \ in the unique path from x to y i.e. compute max(|Ap - Aq|) where p and q are two\
  \ distinct nodes on the unique path from x to y.\n\nIt is also mentioned that x\
  \ is not equal to y in any query and that no two nodes have the same value printed\
  \ on them. Also, |x| denotes the absolute value of x. \n\nTakaki is perplexed and\
  \ requires your help to solve this task? Can you help him out?\n\n-----Input-----\n\
  The first line of the input contains an integer N denoting the number of nodes in\
  \ tree T. \nThe second line comprises N space separated integers denoting A, where\
  \ the i-th integer denotes Ai. \nThe next N-1 lines each comprise two space separated\
  \ integers u and v, denoting that node u and node v\nare connected by an edge. It\
  \ is guaranteed that the final graph will be a connected tree.\nThe next line contains\
  \ a single integer Q, denoting number of queries. \nThe next Q lines comprise the\
  \ queries. Each such line is of the format C x y or F x y. \n\n-----Output-----\n\
  For each query, print the required output as mentioned above. \n\n-----Constraints-----\n\
  - 2 ≤ N ≤ 35000\n- 1 ≤ Ai ≤ 109\n- 1 ≤ Q ≤ 35000\n- 1 ≤ u, v ≤ N\n- No two nodes\
  \ have the same value printed on them.\n- x is not equal to y in any query.\n\n\
  -----Subtasks-----\n\n-----Subtasks-----Subtask #1 (15 points)\n- N, Q ≤ 1000Subtask\
  \ #2 (20 points)\n- Only Type F queries are present.Subtask #3 (65 points)\n- Original\
  \ constraints\n\n-----Example-----\nInput:5\n1 2 7 4 5\n1 2\n2 3\n2 4\n2 5\n7\n\
  C 1 5\nF 1 5\nC 2 4\nC 1 2\nF 1 3\nF 3 4\nF 2 4\n\nOutput:1\n4\n2\n1\n6\n5\n2\n\n\
  -----Explanation-----\nGiven below is the tree corresponding to the sample input.\
  \ Each node has two numbers written in it. \nThe first number represents the node\
  \ index and the second number indicates node value."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_path_queries (N : Nat) (node_values : List Nat) (edges\
  \ : List (Nat × Nat)) \n  (queries : List (Char × Nat × Nat)) : List Nat :=\n  sorry\n"
"vc-theorems": "theorem solve_path_queries_results_length {N : Nat} {node_values :\
  \ List Nat} \n  {edges : List (Nat × Nat)} {queries : List (Char × Nat × Nat)} :\n\
  \  List.length (solve_path_queries N node_values edges queries) = List.length queries\
  \ :=\n  sorry\n\n\ntheorem solve_path_queries_results_nonnegative {N : Nat} {node_values\
  \ : List Nat}\n  {edges : List (Nat × Nat)} {queries : List (Char × Nat × Nat)}\
  \ :\n  ∀ x ∈ solve_path_queries N node_values edges queries, x ≥ 0 :=\n  sorry\n\
  \n\ntheorem solve_path_queries_valid_tree {N : Nat} {node_values : List Nat} \n\
  \  {edges : List (Nat × Nat)} (h1 : N ≥ 2) (h2 : List.length edges = N - 1)\n  (h3\
  \ : ∀ e ∈ edges, e.1 ≥ 1 ∧ e.1 < e.2 ∧ e.2 ≤ N) :\n  True :=\n  sorry\n\n\ntheorem\
  \ solve_path_queries_valid_queries {N : Nat} {queries : List (Char × Nat × Nat)}\
  \ \n  (h : ∀ q ∈ queries, (q.1 = 'C' ∨ q.1 = 'F') ∧ \n    q.2.1 ≥ 1 ∧ q.2.1 ≤ N\
  \ ∧ \n    q.2.2 ≥ 1 ∧ q.2.2 ≤ N ∧\n    q.2.1 ≠ q.2.2) :\n  True :=\n  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
