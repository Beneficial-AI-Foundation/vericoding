"vc-description": "You work in a big office. It is a 9 floor building with an elevator\
  \ that can accommodate up to 4 people. It is your responsibility to manage this\
  \ elevator.\n\nToday you are late, so there are queues on some floors already. For\
  \ each person you know the floor where he currently is and the floor he wants to\
  \ reach. Also, you know the order in which people came to the elevator.\n\nAccording\
  \ to the company's rules, if an employee comes to the elevator earlier than another\
  \ one, he has to enter the elevator earlier too (even if these employees stay on\
  \ different floors). Note that the employees are allowed to leave the elevator in\
  \ arbitrary order.\n\nThe elevator has two commands:   Go up or down one floor.\
  \ The movement takes 1 second.  Open the doors on the current floor. During this\
  \ operation all the employees who have reached their destination get out of the\
  \ elevator. Then all the employees on the floor get in the elevator in the order\
  \ they are queued up while it doesn't contradict the company's rules and there is\
  \ enough space in the elevator. Each employee spends 1 second to get inside and\
  \ outside the elevator. \n\nInitially the elevator is empty and is located on the\
  \ floor 1.\n\nYou are interested what is the minimum possible time you need to spend\
  \ to deliver all the employees to their destination. It is not necessary to return\
  \ the elevator to the floor 1.\n\n\n-----Input-----\n\nThe first line contains an\
  \ integer n (1 ≤ n ≤ 2000) — the number of employees.\n\nThe i-th of the next n\
  \ lines contains two integers a_{i} and b_{i} (1 ≤ a_{i}, b_{i} ≤ 9, a_{i} ≠ b_{i}) —\
  \ the floor on which an employee initially is, and the floor he wants to reach.\n\
  \nThe employees are given in the order they came to the elevator.\n\n\n-----Output-----\n\
  \nPrint a single integer — the minimal possible time in seconds.\n\n\n-----Examples-----\n\
  Input\n2\n3 5\n5 3\n\nOutput\n10\nInput\n2\n5 3\n3 5\n\nOutput\n12\n\n\n-----Note-----\n\
  \n Explaination for the first sample [Image] t = 0\n\n[Image] t = 2\n\n[Image] t\
  \ = 3\n\n[Image] t = 5\n\n[Image] t = 6\n\n[Image] t = 7\n\n[Image] t = 9\n\n[Image]\
  \ t = 10"
"vc-preamble": "import Imports.AllImports\n\ndef List.maximum (l : List Nat) : Option\
  \ Nat := \n  sorry \n\n\ndef List.minimum (l : List Nat) : Option Nat := \n  sorry\n\
  \n\ndef time_to_get_free (payload : List Nat) (floor : Nat) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def State.hook (s : State) (floor : Nat) (a b : Nat) : State :=\n\
  \  sorry \n\n-- Empty payload should take 0 time"
"vc-theorems": "theorem time_to_get_free_empty (floor : Nat) : \n  time_to_get_free\
  \ [] floor = 0 := sorry\n\n-- Properties of time_to_get_free\n\ntheorem time_to_get_free_properties\
  \ {payload : List Nat} {floor : Nat}\n  (h1 : payload.length > 0)\n  (h2 : ∀ x ∈\
  \ payload, x > 0 ∧ x ≤ 10) :\n  let result := time_to_get_free payload floor\n \
  \ -- Result is non-negative\n  (result ≥ 0) ∧ \n  -- Result is at least difference\
  \ of max/min payload\n  (result ≥ ((List.maximum payload).getD 0 - (List.minimum\
  \ payload).getD 0)) ∧\n  -- Result is at least minimum distance to floor\n  (result\
  \ ≥ min (floor - (List.minimum payload).getD 0) \n              (floor - (List.maximum\
  \ payload).getD 0)) := sorry\n\n-- Properties of State.hook\n\ntheorem state_hook_properties\
  \ {s : State} {floor a b : Nat}\n  (h1 : a > 0 ∧ a ≤ 10)\n  (h2 : b > 0 ∧ b ≤ 10)\
  \ :\n  let newState := s.hook floor a b\n  -- Time is non-negative\n  (newState.time\
  \ ≥ 0) ∧\n  -- b is in new payload\n  (b ∈ newState.payload) ∧\n  -- New payload\
  \ size is bounded\n  (newState.payload.length ≤ s.payload.length + 1) := sorry\n\
  \n/--\ninfo: 10\n-/\n#guard_msgs in\n#eval solve 2 [(3, 5), (5, 3)]\n\n/--\ninfo:\
  \ 12\n-/\n#guard_msgs in\n#eval solve 2 [(5, 3), (3, 5)]\n\n/--\ninfo: 10\n-/\n\
  #guard_msgs in\n#eval solve 1 [(1, 9)]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded"
