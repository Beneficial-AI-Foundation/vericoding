"vc-description": "One player came to a casino and found a slot machine where everything\
  \ depends only on how he plays. The rules follow.\n\nA positive integer $a$ is initially\
  \ on the screen. The player can put a coin into the machine and then add $1$ to\
  \ or subtract $1$ from any two adjacent digits. All digits must remain from $0$\
  \ to $9$ after this operation, and the leading digit must not equal zero. In other\
  \ words, it is forbidden to add $1$ to $9$, to subtract $1$ from $0$ and to subtract\
  \ $1$ from the leading $1$. Once the number on the screen becomes equal to $b$,\
  \ the player wins the jackpot. $a$ and $b$ have the same number of digits.\n\nHelp\
  \ the player to determine the minimal number of coins he needs to spend in order\
  \ to win the jackpot and tell how to play.\n\n\n-----Input-----\n\nThe first line\
  \ contains a single integer $n$ ($2 \\le n \\le 10^5$) standing for the length of\
  \ numbers $a$ and $b$.\n\nThe next two lines contain numbers $a$ and $b$, each one\
  \ on a separate line ($10^{n-1} \\le a, b < 10^n$).\n\n\n-----Output-----\n\nIf\
  \ it is impossible to win the jackpot, print a single integer $-1$.\n\nOtherwise,\
  \ the first line must contain the minimal possible number $c$ of coins the player\
  \ has to spend.\n\n$\\min(c, 10^5)$ lines should follow, $i$-th of them containing\
  \ two integers $d_i$ and $s_i$ ($1\\le d_i\\le n - 1$, $s_i = \\pm 1$) denoting\
  \ that on the $i$-th step the player should add $s_i$ to the $d_i$-th and $(d_i\
  \ + 1)$-st digits from the left (e. g. $d_i = 1$ means that two leading digits change\
  \ while $d_i = n - 1$ means that there are two trailing digits which change).\n\n\
  Please notice that the answer may be very big and in case $c > 10^5$ you should\
  \ print only the first $10^5$ moves. Your answer is considered correct if it is\
  \ possible to finish your printed moves to win the jackpot in the minimal possible\
  \ number of coins. In particular, if there are multiple ways to do this, you can\
  \ output any of them.\n\n\n-----Examples-----\nInput\n3\n223\n322\n\nOutput\n2\n\
  1 1\n2 -1\n\nInput\n2\n20\n42\n\nOutput\n2\n1 1\n1 1\n\nInput\n2\n35\n44\n\nOutput\n\
  -1\n\n\n\n-----Note-----\n\nIn the first example, we can make a +1 operation on\
  \ the two first digits, transforming number $\\textbf{22}3$ into $\\textbf{33}3$,\
  \ and then make a -1 operation on the last two digits, transforming $3\\textbf{33}$\
  \ into $3\\textbf{22}$.\n\nIt's also possible to do these operations in reverse\
  \ order, which makes another correct answer.\n\nIn the last example, one can show\
  \ that it's impossible to transform $35$ into $44$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def transform_number (n : Nat) (a b : String) : List Int :=\n \
  \ sorry\n"
"vc-theorems": "theorem transform_number_valid_properties {n : Nat} {a b : String}\n\
  \  (h1 : n ≥ 2) (h2 : n ≤ 10)\n  (h3 : a.length = n) (h4 : b.length = n) \n  (h5\
  \ : ∀ c ∈ a.data, c ∈ ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'])\n  (h6\
  \ : ∀ c ∈ b.data, c ∈ ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']) :\n  let\
  \ result := transform_number n a b\n  (result = [(-1)] ∨ \n   (result = [] ∧ a =\
  \ b) ∨\n   (result.length ≥ 2 ∧ \n    ∀ move ∈ result.tail, \n      move < n ∧ \n\
  \      move.natAbs = 1)) :=\n  sorry\n\n\ntheorem transform_number_identical {n\
  \ : Nat} (h1 : n ≥ 2) (h2 : n ≤ 10) :\n  transform_number n (String.mk (List.replicate\
  \ n '5')) (String.mk (List.replicate n '5')) = [] :=\n  sorry\n\n\ntheorem transform_number_bounds\
  \ {n : Nat} {a : String}\n  (h1 : n ≥ 2) (h2 : n ≤ 10) (h3 : a.length = n)\n  (h4\
  \ : ∀ c ∈ a.data, c ∈ ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']) :\n  let\
  \ result := transform_number n a (String.mk (List.replicate n '9'))\n  result =\
  \ [(-1)] ∨ \n  (∀ x ∈ (List.map (λ c => c.toNat - '0'.toNat) a.data), 0 ≤ x ∧ x\
  \ ≤ 9) :=\n  sorry"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded"
