"vc-description": "Mr. Khalkhoul, an amazing teacher, likes to answer questions sent\
  \ by his students via e-mail, but he often doesn't have the time to answer all of\
  \ them. In this kata you will help him by making a program that finds\nsome of the\
  \ answers.\n\nYou are given a `question` which is a string containing the question\
  \ and some `information` which is a list of strings representing potential answers.\n\
  \nYour task is to find among `information` the UNIQUE string that has the highest\
  \ number of words in common with `question`. We shall consider words to be separated\
  \ by a single space.\n\nYou can assume that:\n\n* all strings given contain at least\
  \ one word and have no leading or trailing spaces,\n* words are composed with alphanumeric\
  \ characters only\n\nYou must also consider the case in which you get no matching\
  \ words (again, ignoring the case): in such a case return `None/nil/null`.\n\nMr.\
  \ Khalkhoul is countin' on you :)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def answer (question : String) (info_list : List String) : Option\
  \ String :=\n  sorry\n"
"vc-theorems": "theorem answer_none_on_empty_list (q : String) :\n  answer q [] =\
  \ none := by sorry\n\n\ntheorem result_in_info_list (q : String) (info_list : List\
  \ String) :\n  let r := answer q info_list\n  match r with\n  | none => True\n \
  \ | some result => result ∈ info_list\n  := by sorry\n\n\ntheorem result_shares_words\
  \ (q : String) (info_list : List String) :\n  let r := answer q info_list\n  match\
  \ r with\n  | none => True\n  | some result =>\n    ∃ word ∈ (String.splitOn q \"\
  \ \").map String.toLower,\n    word ∈ String.splitOn result.toLower \" \"\n  :=\
  \ by sorry\n\n\ntheorem result_has_max_overlap (q : String) (info_list : List String)\
  \ :\n  let r := answer q info_list\n  match r with\n  | none => True\n  | some result\
  \ =>\n    let qwords := String.splitOn q.toLower \" \"\n    let score (s : String)\
  \ := (qwords.filter (λ w => w ∈ String.splitOn s.toLower \" \")).length\n    ∀ info\
  \ ∈ info_list, score result ≥ score info\n  := by sorry\n\n\ntheorem single_answer_behavior\
  \ (q : String) (info : String) :\n  let qwords := String.splitOn q.toLower \" \"\
  \n  let iwords := String.splitOn info.toLower \" \"\n  let shares_words := ∃ w ∈\
  \ qwords, w ∈ iwords\n  answer q [info] = if shares_words then some info else none\n\
  \  := by sorry\n\n/--\ninfo: 'no he is NOT'\n-/\n#guard_msgs in\n#eval answer \"\
  is khalkhoul dumb\" [\"no he is NOT\", \"i guess so\"]\n\n/--\ninfo: 'my name is\
  \ bob'\n-/\n#guard_msgs in\n#eval answer \"what is your name\" [\"my name is bob\"\
  , \"i am 20 years old\"]\n\n/--\ninfo: None\n-/\n#guard_msgs in\n#eval answer \"\
  abc def ghi\" [\"xyz 123\", \"foo bar\"]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
