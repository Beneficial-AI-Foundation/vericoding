"vc-description": "As you see in Example test cases, the os running this service is\
  \ ```posix```.\n\nReturn the output by executing the command given as the string\
  \ on posix os.\n\nSee the example test cases for the expected data format."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def get_output (cmd : String) : String := sorry\n\ntheorem pwd_returns_valid_path\
  \ :\n  let result := get_output \"pwd\"\n  result.length > 0 ∧ result.contains '/'\
  \ := sorry\n"
"vc-theorems": "theorem ls_returns_content :\n  let result := get_output \"ls\"\n\
  \  result.length > 0 := sorry\n\n\ntheorem basic_commands_return_nonempty (cmd :\
  \ String) :\n  (cmd = \"ls\" ∨ cmd = \"pwd\" ∨ cmd = \"echo hello\") →\n  let result\
  \ := get_output cmd\n  result.length > 0 := sorry\n\n\ntheorem invalid_command_returns_empty\
  \ :\n  get_output \"thiscommanddoesnotexist\" = \"\" := sorry\n\n/--\ninfo: 'hello\
  \ world\\n'\n-/\n#guard_msgs in\n#eval get_output \"echo \"hello world\"\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
