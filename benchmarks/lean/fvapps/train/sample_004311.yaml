"vc-description": "## Sum Even Fibonacci Numbers\n\n* Write a func named SumEvenFibonacci\
  \ that takes a parameter of type int and returns a value of type int\n\n* Generate\
  \ all of the Fibonacci numbers starting with 1 and 2 and ending on the highest number\
  \ before exceeding the parameter's value \n\n\n#### Each new number in the Fibonacci\
  \ sequence is generated by adding the previous two numbers - by starting with 1\
  \ and 2(the input could be smaller), the first 10 numbers will be:\n\n\n```\n 1,\
  \ 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n```\n\n* Sum all of the even numbers you\
  \ generate and return that int\n\n#### Example:\n\n```\nsumEvenFibonacci(8) // returns\
  \ 10 by adding the even values 2 and 8\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def SumEvenFibonacci (n : Int) : Int :=\n  sorry\n\n-- Properties\
  \ for any non-negative input"
"vc-theorems": "theorem sum_even_fibonacci_non_negative (n : Int) : \n  n ≥ 0 → SumEvenFibonacci\
  \ n ≥ 0 :=\n  sorry\n\n\n\n\n\n-- Base cases\n\ntheorem sum_even_fibonacci_zero\
  \ :\n  SumEvenFibonacci 0 = 0 :=\n  sorry\n\n\ntheorem sum_even_fibonacci_one :\n\
  \  SumEvenFibonacci 1 = 0 :=\n  sorry\n\n\ntheorem sum_even_fibonacci_two :\n  SumEvenFibonacci\
  \ 2 = 2 :=\n  sorry\n\n-- Property for negative inputs\n\ntheorem sum_even_fibonacci_negative\
  \ (n : Int) :\n  n < 0 → SumEvenFibonacci n = 0 :=\n  sorry\n\n/--\ninfo: 10\n-/\n\
  #guard_msgs in\n#eval SumEvenFibonacci 8\n\n/--\ninfo: 60696\n-/\n#guard_msgs in\n\
  #eval SumEvenFibonacci 111111\n\n/--\ninfo: 82790070\n-/\n#guard_msgs in\n#eval\
  \ SumEvenFibonacci 144100000\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
