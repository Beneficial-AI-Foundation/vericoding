"vc-description": "In this Kata, you will remove the left-most duplicates from a list\
  \ of integers and return the result.\n\n```python\n# Remove the 3's at indices 0\
  \ and 3\n# followed by removing a 4 at index 1\nsolve([3, 4, 4, 3, 6, 3]) # => [4,\
  \ 6, 3]\n```\n\nMore examples can be found in the test cases. \n\nGood luck!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve (arr : List Int) : List Int :=\n  sorry\n"
"vc-theorems": "theorem solve_no_duplicates (arr : List Int) :\n  let result := solve\
  \ arr\n  ∀ x ∈ result, (result.count x = 1) ∧ (x ∈ arr) :=\nsorry\n\n\ntheorem solve_preserves_elements\
  \ (arr : List Int) :\n  let result := solve arr \n  ∀ x ∈ arr, x ∈ result ↔ x ∈\
  \ arr :=\nsorry\n\n\ntheorem solve_edge_cases_empty : \n  solve [] = [] :=\nsorry\n\
  \n\ntheorem solve_edge_cases_singleton (x : Int) :\n  solve [x] = [x] :=\nsorry\n\
  \n\ntheorem solve_edge_cases_two_same (x : Int) :\n  solve [x, x] = [x] :=\nsorry\n\
  \n/--\ninfo: [4, 6, 3]\n-/\n#guard_msgs in\n#eval solve [3, 4, 4, 3, 6, 3]\n\n/--\n\
  info: [1, 2, 3]\n-/\n#guard_msgs in\n#eval solve [1, 2, 1, 2, 1, 2, 3]\n\n/--\n\
  info: [4, 5, 2, 1]\n-/\n#guard_msgs in\n#eval solve [1, 1, 4, 5, 1, 2, 1]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
