"vc-description": "We are given an array A of N lowercase letter strings, all of the\
  \ same length.\nNow, we may choose any set of deletion indices, and for each string,\
  \ we delete all the characters in those indices.\nFor example, if we have an array\
  \ A = [\"abcdef\",\"uvwxyz\"] and deletion indices {0, 2, 3}, then the final array\
  \ after deletions is [\"bef\",\"vyz\"].\nSuppose we chose a set of deletion indices\
  \ D such that after deletions, the final array has its elements in lexicographic\
  \ order (A[0] <= A[1] <= A[2] ... <= A[A.length - 1]).\nReturn the minimum possible\
  \ value of D.length.\n \n\n\n\n\n\n\n\nExample 1:\nInput: [\"ca\",\"bb\",\"ac\"\
  ]\nOutput: 1\nExplanation: \nAfter deleting the first column, A = [\"a\", \"b\"\
  , \"c\"].\nNow A is in lexicographic order (ie. A[0] <= A[1] <= A[2]).\nWe require\
  \ at least 1 deletion since initially A was not in lexicographic order, so the answer\
  \ is 1.\n\n\nExample 2:\nInput: [\"xc\",\"yb\",\"za\"]\nOutput: 0\nExplanation:\
  \ \nA is already in lexicographic order, so we don't need to delete anything.\n\
  Note that the rows of A are not necessarily in lexicographic order:\nie. it is NOT\
  \ necessarily true that (A[0][0] <= A[0][1] <= ...)\n\n\nExample 3:\nInput: [\"\
  zyx\",\"wvu\",\"tsr\"]\nOutput: 3\nExplanation: \nWe have to delete every column.\n\
  \n \n\n\nNote:\n\n1 <= A.length <= 100\n1 <= A[i].length <= 100"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def minDeletionSize (A : List (List Char)) : Nat :=\n  sorry\n\n\
  /-- Output is bounded between 0 and string length -/"
"vc-theorems": "theorem output_bounds (A : List (List Char)) (h : A.all (λ s => s.length\
  \ = A.head!.length)) :\n  let result := minDeletionSize A\n  0 ≤ result ∧ result\
  \ ≤ A.head!.length :=\n  sorry\n\n/-- Already sorted columns need 0 deletions -/\n\
  \ntheorem sorted_columns_zero_deletions (A : List (List Char)) (h : A.all (λ s =>\
  \ s.length = A.head!.length)) :\n  let sorted_columns := A -- imagine this is the\
  \ input with sorted columns\n  minDeletionSize sorted_columns = 0 :=\n  sorry\n\n\
  /-- Reverse sorted columns need at most string length deletions -/\n\ntheorem reverse_sorted_most_deletions\
  \ (A : List (List Char)) (h₁ : A ≠ []) (h₂ : A.all (λ s => s.length = A.head!.length))\
  \ :\n  let reverse_sorted := A -- imagine this is input with reverse sorted columns\
  \  \n  minDeletionSize reverse_sorted ≤ A.head!.length :=\n  sorry\n\n/-- Identical\
  \ strings need 0 deletions -/\n\ntheorem identical_strings_zero_deletions (A : List\
  \ (List Char)) (s : List Char) \n    (h₁ : A ≠ []) (h₂ : A.all (λ str => str = s))\
  \ :\n  minDeletionSize A = 0 :=\n  sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval\
  \ min_deletion_size [\"ca\", \"bb\", \"ac\"]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n\
  #eval min_deletion_size [\"xc\", \"yb\", \"za\"]\n\n/--\ninfo: 3\n-/\n#guard_msgs\
  \ in\n#eval min_deletion_size [\"zyx\", \"wvu\", \"tsr\"]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
