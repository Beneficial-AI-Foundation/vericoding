"vc-description": "This problem takes its name by arguably the most important event\
  \ in the life of the ancient historian Josephus: according to his tale, he and his\
  \ 40 soldiers were trapped in a cave by the Romans during a siege.\n\nRefusing to\
  \ surrender to the enemy, they instead opted for mass suicide, with a twist: **they\
  \ formed a circle and proceeded to kill one man every three, until one last man\
  \ was left (and that it was supposed to kill himself to end the act)**.\n\nWell,\
  \ Josephus and another man were the last two and, as we now know every detail of\
  \ the story, you may have correctly guessed that they didn't exactly follow through\
  \ the original idea.\n\nYou are now to create a function that returns a Josephus\
  \ permutation, taking as parameters the initial *array/list of items* to be permuted\
  \ as if they were in a circle and counted out every *k* places until none remained.\n\
  \n**Tips and notes:** it helps to start counting from 1 up to n, instead of the\
  \ usual range 0..n-1; k will always be >=1.\n\nFor example, with n=7 and k=3 `josephus(7,3)`\
  \ should act this way.\n```\n[1,2,3,4,5,6,7] - initial sequence\n[1,2,4,5,6,7] =>\
  \ 3 is counted out and goes into the result [3]\n[1,2,4,5,7] => 6 is counted out\
  \ and goes into the result [3,6]\n[1,4,5,7] => 2 is counted out and goes into the\
  \ result [3,6,2]\n[1,4,5] => 7 is counted out and goes into the result [3,6,2,7]\n\
  [1,4] => 5 is counted out and goes into the result [3,6,2,7,5]\n[4] => 1 is counted\
  \ out and goes into the result [3,6,2,7,5,1]\n[] => 4 is counted out and goes into\
  \ the result [3,6,2,7,5,1,4]\n```\nSo our final result is:\n```\njosephus([1,2,3,4,5,6,7],3)==[3,6,2,7,5,1,4]\n\
  ```\nFor more info, browse the Josephus Permutation page on wikipedia; related kata:\
  \ Josephus Survivor.\n\nAlso, [live game demo](https://iguacel.github.io/josephus/)\
  \ by [OmniZoetrope](https://www.codewars.com/users/OmniZoetrope)."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def josephus (xs : List α) (k : Nat) : List α :=\n  sorry\n"
"vc-theorems": "theorem josephus_contains_all_elements {α} (xs : List α) (k : Nat)\
  \ (h : xs ≠ []) :\n  List.length (josephus xs k) = List.length xs ∧ \n  ∀ x, x ∈\
  \ xs ↔ x ∈ josephus xs k :=\n  sorry\n\n\ntheorem josephus_preserves_input {α} (xs\
  \ : List α) (k : Nat) (h : 0 < k) :\n  josephus xs k = josephus xs k :=\n  sorry\n\
  \n\ntheorem josephus_deterministic {α} (xs : List α) (k : Nat) (h : 0 < k) :\n \
  \ josephus xs k = josephus xs k :=\n  sorry\n\n\ntheorem josephus_k_one {α} (xs\
  \ : List α) (h : xs ≠ []) :\n  josephus xs 1 = xs :=\n  sorry\n\n/--\ninfo: [3,\
  \ 6, 2, 7, 5, 1, 4]\n-/\n#guard_msgs in\n#eval josephus [1, 2, 3, 4, 5, 6, 7] 3\n\
  \n/--\ninfo: ['e', 's', 'W', 'o', 'C', 'd', 'r', 'a']\n-/\n#guard_msgs in\n#eval\
  \ josephus [\"C\", \"o\", \"d\", \"e\", \"W\", \"a\", \"r\", \"s\"] 4\n\n/--\ninfo:\
  \ [2, 4, 6, 8, 10, 3, 7, 1, 9, 5]\n-/\n#guard_msgs in\n#eval josephus [1, 2, 3,\
  \ 4, 5, 6, 7, 8, 9, 10] 2\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
