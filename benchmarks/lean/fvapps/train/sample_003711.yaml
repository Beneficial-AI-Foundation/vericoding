"vc-description": "In recreational mathematics, a [Keith number](https://en.wikipedia.org/wiki/Keith_number)\
  \ or repfigit number (short for repetitive Fibonacci-like digit) is a number in\
  \ the following integer sequence:\n\n`14, 19, 28, 47, 61, 75, 197, 742, 1104, 1537,\
  \ 2208, 2580, 3684, 4788, 7385, 7647, 7909, ...` (sequence A007629 in the OEIS)\n\
  \nKeith numbers were introduced by Mike Keith in 1987. They are computationally\
  \ very challenging to find, with only about 100 known.\n\nImplement the code to\
  \ check if the given number is a Keith number. Return the number number of iteration\
  \ needed to confirm it; otherwise return `false`.\n\n**Note:** 1-digit numbers are\
  \ **not** Keith numbers by definition\n\n\n## Examples\n\n```\nn = 197      # -->\
  \ [1, 9, 7]\n\n# calculation           iteration\n1 + 9 + 7 = 17         #    1\n\
  9 + 7 + 17 = 33        #    2\n7 + 17 + 33 = 57       #    3\n17 + 33 + 57 = 107\
  \     #    4\n33 + 57 + 107 = 197    #    5\n```\nAs `197` is the same as the initial\
  \ number, so it's a Keith number: return `5`\n\n\nAnother example:\n```\nn = 196\n\
  \n# calculation          iteration\n1 + 9 + 6 = 16        #    1\n...\n```\n\n`196`\
  \ is not a Keith number, so return `false`"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_keith_number (n : Int) : Int ⊕ Bool := sorry\n\ntheorem\
  \ single_digit_keith_numbers \n  (n : Int) (h : 0 ≤ n ∧ n ≤ 9) : \n  is_keith_number\
  \ n = Sum.inr false := sorry\n"
"vc-theorems": "theorem keith_number_return_type\n  (n : Int) (h : 0 ≤ n) :\n  (is_keith_number\
  \ n = Sum.inr false) ∨ \n  (∃ m : Int, is_keith_number n = Sum.inl m ∧ m > 0) :=\
  \ sorry\n\n\ntheorem keith_number_negative_safe\n  (n : Int) (h : n ≤ -1) :\n  is_keith_number\
  \ (Int.natAbs n) = is_keith_number (Int.natAbs n) := sorry\n\nstructure Sequence\
  \ where\n  digits : List Int\n  values : List Int\n  contains_n : Int → Bool\n\n\
  \ntheorem keith_sequence_contains_n\n  (n : Int) (h₁ : 10 ≤ n) (h₂ : n ≤ 10000)\n\
  \  (h₃ : ∃ k, is_keith_number n = Sum.inl k) :\n  ∃ (s : Sequence), s.contains_n\
  \ n = true := sorry\n\n\ntheorem keith_number_deterministic\n  (n : Int) (h : 0\
  \ ≤ n) :\n  is_keith_number n = is_keith_number n := sorry\n\n/--\ninfo: 5\n-/\n\
  #guard_msgs in\n#eval is_keith_number 197\n\n/--\ninfo: False\n-/\n#guard_msgs in\n\
  #eval is_keith_number 196\n\n/--\ninfo: 8\n-/\n#guard_msgs in\n#eval is_keith_number\
  \ 742\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
