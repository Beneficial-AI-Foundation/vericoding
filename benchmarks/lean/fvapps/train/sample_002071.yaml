"vc-description": "Everybody seems to think that the Martians are green, but it turns\
  \ out they are metallic pink and fat. Ajs has two bags of distinct nonnegative integers.\
  \ The bags are disjoint, and the union of the sets of numbers in the bags is $\\\
  {0,1,…,M-1\\}$, for some positive integer $M$. Ajs draws a number from the first\
  \ bag and a number from the second bag, and then sums them modulo $M$.\n\nWhat are\
  \ the residues modulo $M$ that Ajs cannot obtain with this action?\n\n\n-----Input-----\n\
  \nThe first line contains two positive integer $N$ ($1 \\leq N \\leq 200\\,000$)\
  \ and $M$ ($N+1 \\leq M \\leq 10^{9}$), denoting the number of the elements in the\
  \ first bag and the modulus, respectively.\n\nThe second line contains $N$ nonnegative\
  \ integers $a_1,a_2,\\ldots,a_N$ ($0 \\leq a_1<a_2< \\ldots< a_N<M$), the contents\
  \ of the first bag.\n\n \n\n\n-----Output-----\n\nIn the first line, output the\
  \ cardinality $K$ of the set of residues modulo $M$ which Ajs cannot obtain.\n\n\
  In the second line of the output, print $K$ space-separated integers greater or\
  \ equal than zero and less than $M$, which represent the residues Ajs cannot obtain.\
  \ The outputs should be sorted in increasing order of magnitude. If $K$=0, do not\
  \ output the second line.\n\n\n-----Examples-----\nInput\n2 5\n3 4\n\nOutput\n1\n\
  2\n\nInput\n4 1000000000\n5 25 125 625\n\nOutput\n0\n\nInput\n2 4\n1 3\n\nOutput\n\
  2\n0 2\n\n\n\n-----Note-----\n\nIn the first sample, the first bag and the second\
  \ bag contain $\\{3,4\\}$ and $\\{0,1,2\\}$, respectively. Ajs can obtain every\
  \ residue modulo $5$ except the residue $2$: $ 4+1 \\equiv 0, \\, 4+2 \\equiv 1,\
  \ \\, 3+0 \\equiv 3, \\, 3+1 \\equiv 4 $ modulo $5$. One can check that there is\
  \ no choice of elements from the first and the second bag which sum to $2$ modulo\
  \ $5$.\n\nIn the second sample, the contents of the first bag are $\\{5,25,125,625\\\
  }$, while the second bag contains all other nonnegative integers with at most $9$\
  \ decimal digits. Every residue modulo $1\\,000\\,000\\,000$ can be obtained as\
  \ a sum of an element in the first bag and an element in the second bag."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_impossible_sums (n : Int) (m : Int) (first_bag : List\
  \ Int) : FindImpossibleSums :=\n  sorry\n"
"vc-theorems": "theorem find_impossible_sums_properties\n  {n m : Int}\n  {first_bag\
  \ : List Int}\n  (h1 : 1 ≤ n ∧ n ≤ 10) \n  (h2 : 2 ≤ m)\n  (h3 : first_bag.length\
  \ = n)\n  (h4 : ∀ x ∈ first_bag, 0 ≤ x ∧ x < m) :\n  let result := find_impossible_sums\
  \ n m first_bag\n  -- Count matches length of sums\n  result.count = result.sums.length\
  \ ∧\n  -- All sums are within modulo m  \n  (∀ x ∈ result.sums, 0 ≤ x ∧ x < m) ∧\n\
  \  -- Sums are increasing\n  List.Pairwise (fun a b => a < b) result.sums ∧\n  --\
  \ Count is non-negative and at most n\n  0 ≤ result.count ∧ result.count ≤ n :=\n\
  \  sorry\n\n\ntheorem find_impossible_sums_unique_sorted\n  {n m : Int}\n  {first_bag\
  \ : List Int}\n  (h1 : 1 ≤ n ∧ n ≤ 10)\n  (h2 : 2 ≤ m ∧ m ≤ 100)\n  (h3 : first_bag.length\
  \ = n)\n  (h4 : ∀ x ∈ first_bag, 0 ≤ x ∧ x < m) :\n  let result := find_impossible_sums\
  \ n m first_bag\n  -- All sums less than modulo\n  (∀ x ∈ result.sums, x < m) ∧\n\
  \  -- No duplicates\n  result.sums.Nodup :=\n  sorry"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded"
