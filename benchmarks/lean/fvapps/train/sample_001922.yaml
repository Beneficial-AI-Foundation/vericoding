"vc-description": "Mad scientist Mike does not use slow hard disks. His modification\
  \ of a hard drive has not one, but n different heads that can read data in parallel.\n\
  \nWhen viewed from the side, Mike's hard drive is an endless array of tracks. The\
  \ tracks of the array are numbered from left to right with integers, starting with\
  \ 1. In the initial state the i-th reading head is above the track number h_{i}.\
  \ For each of the reading heads, the hard drive's firmware can move the head exactly\
  \ one track to the right or to the left, or leave it on the current track. During\
  \ the operation each head's movement does not affect the movement of the other heads:\
  \ the heads can change their relative order; there can be multiple reading heads\
  \ above any of the tracks. A track is considered read if at least one head has visited\
  \ this track. In particular, all of the tracks numbered h_1, h_2, ..., h_{n} have\
  \ been read at the beginning of the operation. [Image] \n\nMike needs to read the\
  \ data on m distinct tracks with numbers p_1, p_2, ..., p_{m}. Determine the minimum\
  \ time the hard drive firmware needs to move the heads and read all the given tracks.\
  \ Note that an arbitrary number of other tracks can also be read.\n\n\n-----Input-----\n\
  \nThe first line of the input contains two space-separated integers n, m (1 ≤ n,\
  \ m ≤ 10^5) — the number of disk heads and the number of tracks to read, accordingly.\
  \ The second line contains n distinct integers h_{i} in ascending order (1 ≤ h_{i}\
  \ ≤ 10^10, h_{i} < h_{i} + 1) — the initial positions of the heads. The third line\
  \ contains m distinct integers p_{i} in ascending order (1 ≤ p_{i} ≤ 10^10, p_{i}\
  \ < p_{i} + 1) - the numbers of tracks to read.\n\nPlease, do not use the %lld specifier\
  \ to read or write 64-bit integers in С++. It is recommended to use the cin, cout\
  \ streams or the %I64d specifier.\n\n\n-----Output-----\n\nPrint a single number\
  \ — the minimum time required, in seconds, to read all the needed tracks.\n\n\n\
  -----Examples-----\nInput\n3 4\n2 5 6\n1 3 6 8\n\nOutput\n2\n\nInput\n3 3\n1 2 3\n\
  1 2 3\n\nOutput\n0\n\nInput\n1 2\n165\n142 200\n\nOutput\n81\n\n\n\n-----Note-----\n\
  \nThe first test coincides with the figure. In this case the given tracks can be\
  \ read in 2 seconds in the following way:   during the first second move the 1-st\
  \ head to the left and let it stay there;  move the second head to the left twice;\
  \  move the third head to the right twice (note that the 6-th track has already\
  \ been read at the beginning). \n\nOne cannot read the tracks in 1 second as the\
  \ 3-rd head is at distance 2 from the 8-th track."
"vc-preamble": "import Imports.AllImports\n\ndef Sorted (as : List Nat) : Prop :=\n\
  \  ∀ i j, i < j → j < as.length → as[i]! < as[j]!\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_min_time (n m : Nat) (heads tracks : List Nat) : Nat :=\
  \ sorry\n\ntheorem find_min_time_non_negative (n m : Nat) (heads tracks : List Nat)\n\
  \  (h1 : heads.length = n)\n  (h2 : tracks.length = m)\n  (h3 : Sorted heads)\n\
  \  (h4 : Sorted tracks) :\n  find_min_time n m heads tracks ≥ 0 := sorry\n"
"vc-theorems": "theorem find_min_time_perfect_alignment (n m : Nat) (heads tracks\
  \ : List Nat)\n  (h1 : heads.length = n)\n  (h2 : tracks.length = m)\n  (h3 : Sorted\
  \ heads)\n  (h4 : Sorted tracks)\n  (h5 : ∀ t ∈ tracks, t ∈ heads) :\n  find_min_time\
  \ n m heads tracks = 0 := sorry\n\n\ntheorem find_min_time_monotonic_heads (n m\
  \ : Nat) (heads tracks : List Nat) \n  (new_head : Nat)\n  (h1 : heads.length =\
  \ n)\n  (h2 : tracks.length = m)\n  (h3 : Sorted heads)\n  (h4 : Sorted tracks)\n\
  \  (h5 : ∀ h ∈ heads, h < new_head) :\n  find_min_time (n+1) m (heads ++ [new_head])\
  \ tracks ≤ \n  find_min_time n m heads tracks := sorry\n\n\ntheorem find_min_time_monotonic_tracks\
  \ (n m : Nat) (heads tracks : List Nat)\n  (new_track : Nat)\n  (h1 : heads.length\
  \ = n)\n  (h2 : tracks.length = m)\n  (h3 : Sorted heads)\n  (h4 : Sorted tracks)\n\
  \  (h5 : ∀ t ∈ tracks, t < new_track) :\n  find_min_time n (m+1) heads (tracks ++\
  \ [new_track]) ≥\n  find_min_time n m heads tracks := sorry\n\n/--\ninfo: 2\n-/\n\
  #guard_msgs in\n#eval find_min_time 3 4 [2, 5, 6] [1, 3, 6, 8]\n\n/--\ninfo: 0\n\
  -/\n#guard_msgs in\n#eval find_min_time 3 3 [1, 2, 3] [1, 2, 3]\n\n/--\ninfo: 81\n\
  -/\n#guard_msgs in\n#eval find_min_time 1 2 [165] [142, 200]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded"
