"vc-description": "Given an array of integers arr and an integer k. Find the least\
  \ number of unique integers after removing exactly k elements.\n\n\n \nExample 1:\n\
  Input: arr = [5,5,4], k = 1\nOutput: 1\nExplanation: Remove the single 4, only 5\
  \ is left.\n\nExample 2:\nInput: arr = [4,3,1,1,3,3,2], k = 3\nOutput: 2\nExplanation:\
  \ Remove 4, 2 and either one of the two 1s or three 3s. 1 and 3 will be left.\n\
   \nConstraints:\n\n1 <= arr.length <= 10^5\n1 <= arr[i] <= 10^9\n0 <= k <= arr.length"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_least_num_unique_ints (arr : List Int) (k : Nat) : Nat\
  \ :=\n  sorry\n"
"vc-theorems": "theorem result_bounds (arr : List Int) (k : Nat) (h : arr ≠ []) :\n\
  \  0 ≤ find_least_num_unique_ints arr k ∧ \n  find_least_num_unique_ints arr k ≤\
  \ arr.length := by\n  sorry\n\n\ntheorem removing_all_elements (arr : List Int)\
  \ (h : arr ≠ []) :\n  find_least_num_unique_ints arr arr.length = 0 := by\n  sorry\n\
  \n\ntheorem removing_none (arr : List Int) (h : arr ≠ []) :\n  find_least_num_unique_ints\
  \ arr 0 = arr.length := by\n  sorry\n\n\ntheorem removing_more_than_length (arr\
  \ : List Int) (k : Nat) (h : arr ≠ []) :\n  find_least_num_unique_ints arr (arr.length\
  \ + k) = 0 := by\n  sorry\n\n\ntheorem monotonic_decrease (arr : List Int) (k :\
  \ Nat) \n  (h1 : arr.length ≥ 2) (h2 : k ≥ 1) (h3 : k < arr.length) :\n  find_least_num_unique_ints\
  \ arr (k + 1) ≤ find_least_num_unique_ints arr k := by\n  sorry\n\n/--\ninfo: 1\n\
  -/\n#guard_msgs in\n#eval find_least_num_unique_ints [5, 5, 4] 1\n\n/--\ninfo: 2\n\
  -/\n#guard_msgs in\n#eval find_least_num_unique_ints [4, 3, 1, 1, 3, 3, 2] 3\n\n\
  /--\ninfo: 3\n-/\n#guard_msgs in\n#eval find_least_num_unique_ints [2, 4, 1, 8,\
  \ 3, 5, 1, 3] 3\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
