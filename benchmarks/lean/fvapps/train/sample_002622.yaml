"vc-description": "Return a new array consisting of elements which are multiple of\
  \ their own index in input array (length > 1).\n\nSome cases: \n\n```\n[22, -6,\
  \ 32, 82, 9, 25] =>  [-6, 32, 25]\n\n[68, -1, 1, -7, 10, 10] => [-1, 10]\n\n[-56,-85,72,-26,-14,76,-27,72,35,-21,-67,87,0,21,59,27,-92,68]\
  \ => [-85, 72, 0, 68]\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def multiple_of_index (arr : List Int) : List Int :=\n  sorry\n"
"vc-theorems": "theorem multiple_of_index_basic_properties (arr : List Int) (h : arr\
  \ ≠ []) :\n  let result := multiple_of_index arr\n  -- Result length is at most\
  \ one less than input length\n  result.length ≤ arr.length - 1 ∧\n  -- Every element\
  \ in result appears in original array \n  ∀ x ∈ result, x ∈ arr :=\n  sorry\n\n\n\
  theorem empty_result_divisibility (arr : List Int) (h : arr ≠ []) :\n  let result\
  \ := multiple_of_index arr\n  (∀ (i : Fin arr.length), 1 ≤ i.val → (arr.get i) %\
  \ i.val ≠ 0) →\n  result = [] :=\n  sorry\n\n\ntheorem all_zeros (arr : List Int)\
  \ (h : arr.length ≥ 2) (h2 : ∀ x ∈ arr, x = 0) :\n  let result := multiple_of_index\
  \ arr\n  (∀ x ∈ result, x = 0) ∧\n  result.length = arr.length - 1 :=\n  sorry\n\
  \n/--\ninfo: [-6, 32, 25]\n-/\n#guard_msgs in\n#eval multiple_of_index [22, -6,\
  \ 32, 82, 9, 25]\n\n/--\ninfo: [-1, 10]\n-/\n#guard_msgs in\n#eval multiple_of_index\
  \ test2\n\n/--\ninfo: [-85, 72, 0, 68]\n-/\n#guard_msgs in\n#eval multiple_of_index\
  \ test3\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
