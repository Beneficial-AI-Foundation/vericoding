"vc-description": "There is a field with plants — a grid with $N$ rows (numbered $1$\
  \ through $N$) and $M$ columns (numbered $1$ through $M$); out of its $NM$ cells,\
  \ $K$ cells contain plants, while the rest contain weeds. Two cells are adjacent\
  \ if they have a common side.\nYou want to build fences in the field in such a way\
  \ that the following conditions hold for each cell that contains a plant:\n- it\
  \ is possible to move from this cell to each adjacent cell containing a plant without\
  \ crossing any fences\n- it is impossible to move from this cell to any cell containing\
  \ weeds or to leave the grid without crossing any fences\nThe fences can only be\
  \ built between cells or on the boundary of the grid, i.e. on the sides of cells.\
  \ The total length of the built fences is the number of pairs of side-adjacent cells\
  \ such that there is a fence built on their common side plus the number of sides\
  \ of cells on the boundary of the grid which have fences built on them. Find the\
  \ minimum required total length of fences that need to be built.\n\n-----Input-----\n\
  - The first line of the input contains a single integer $T$ denoting the number\
  \ of test cases. The description of $T$ test cases follows.\n- The first line of\
  \ each test case contains three space-separated integers $N$, $M$ and $K$.\n- $K$\
  \ lines follow. Each of these lines contains two space-separated integers $r$ and\
  \ $c$ denoting that the cell in row $r$ and column $c$ contains a plant.\n\n-----Output-----\n\
  For each test case, print a single line containing one integer — the minimum required\
  \ length of fences.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n- $1 \\le N,\
  \ M \\le 10^9$\n- $1 \\le K \\le 10^5$\n- $1 \\le r \\le N$\n- $1 \\le c \\le M$\n\
  - the cells containing plants are pairwise distinct\n\n-----Subtasks-----\nSubtask\
  \ #1 (30 points): $1 \\le N, M \\le 1,000$\nSubtask #2 (70 points): original constraints\n\
  \n-----Example Input-----\n2\n4 4 9\n1 4\n2 1 \n2 2\n2 3\n3 1\n3 3\n4 1\n4 2\n4\
  \ 3\n4 4 1\n1 1\n\n-----Example Output-----\n20\n4\n\n-----Explanation-----\nExample\
  \ case 1: The field looks like this ('x' denotes a cell containing a plant, '.'\
  \ denotes a cell containing weeds):\n...x\nxxx.\nx.x.\nxxx.\n\nAn optimal solution\
  \ is to build fences around the topmost plant (with length $4$), around the remaining\
  \ eight plants (with length $12$) and around the hole between them (with length\
  \ $4$). The total length is $4+12+4 = 20$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calculate_min_fences (n m : Nat) (plants : List (Nat × Nat))\
  \ : Nat := sorry\n\ntheorem fence_positive {n m : Nat} {plants : List (Nat × Nat)}\n\
  \  (h1 : n > 0) (h2 : m > 0) (h3 : plants ≠ []) :\n  (calculate_min_fences n m plants)\
  \ > 0 := sorry\n"
"vc-theorems": "theorem single_plant_perimeter {n m : Nat} {p : Nat × Nat}\n  (h1\
  \ : n > 0) (h2 : m > 0) :\n  (calculate_min_fences n m [p]) = 4 := sorry\n\n\ntheorem\
  \ max_perimeter_bound {n m : Nat} {plants : List (Nat × Nat)}\n  (h1 : n > 0) (h2\
  \ : m > 0) :\n  (calculate_min_fences n m plants) ≤ 4 * plants.length := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
