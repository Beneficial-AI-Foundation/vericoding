"vc-description": "Snuke's town has a subway system, consisting of N stations and\
  \ M railway lines. The stations are numbered 1 through N. Each line is operated\
  \ by a company. Each company has an identification number.\nThe i-th ( 1 \\leq i\
  \ \\leq M ) line connects station p_i and q_i bidirectionally. There is no intermediate\
  \ station. This line is operated by company c_i.\nYou can change trains at a station\
  \ where multiple lines are available.\nThe fare system used in this subway system\
  \ is a bit strange. When a passenger only uses lines that are operated by the same\
  \ company, the fare is 1 yen (the currency of Japan). Whenever a passenger changes\
  \ to a line that is operated by a different company from the current line, the passenger\
  \ is charged an additional fare of 1 yen. In a case where a passenger who changed\
  \ from some company A's line to another company's line changes to company A's line\
  \ again, the additional fare is incurred again.\nSnuke is now at station 1 and wants\
  \ to travel to station N by subway. Find the minimum required fare.\n\n-----Constraints-----\n\
  \ - 2 \\leq N \\leq 10^5\n - 0 \\leq M \\leq 2×10^5\n - 1 \\leq p_i \\leq N (1 \\\
  leq i \\leq M)\n - 1 \\leq q_i \\leq N (1 \\leq i \\leq M)\n - 1 \\leq c_i \\leq\
  \ 10^6 (1 \\leq i \\leq M)\n - p_i \\neq q_i (1 \\leq i \\leq M)\n\n-----Input-----\n\
  The input is given from Standard Input in the following format:\nN M\np_1 q_1 c_1\n\
  :\np_M q_M c_M\n\n-----Output-----\nPrint the minimum required fare. If it is impossible\
  \ to get to station N by subway, print -1 instead.\n\n-----Sample Input-----\n3\
  \ 3\n1 2 1\n2 3 1\n3 1 2\n\n-----Sample Output-----\n1\n\nUse company 1's lines:\
  \ 1 → 2 → 3. The fare is 1 yen."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_subway_fare (n : Nat) (m : Nat) (edges : List (Nat ×\
  \ Nat × Nat)) : Int := sorry\n\ntheorem subway_fare_type_and_range {n : Nat} {m\
  \ : Nat} {edges : List (Nat × Nat × Nat)}\n    (h : n ≥ 2) :\n    let result :=\
  \ solve_subway_fare n m edges\n    result ≥ -1 := sorry\n"
"vc-theorems": "theorem subway_fare_no_edges {n : Nat} {m : Nat} \n    (h : m = 0)\
  \ :\n    solve_subway_fare n m [] = -1 := sorry\n\n\ntheorem subway_fare_single_node\
  \ {m : Nat} {edges : List (Nat × Nat × Nat)} :\n    solve_subway_fare 1 m edges\
  \ = 0 := sorry\n\n\ntheorem subway_fare_result_bounds {n : Nat} {m : Nat} {edges\
  \ : List (Nat × Nat × Nat)}\n    (h : n ≥ 2) :\n    let result := solve_subway_fare\
  \ n m edges\n    (result = -1 ∨ result ≥ 0) := sorry\n\n\ntheorem subway_fare_max_cost\
  \ {n : Nat} {m : Nat} {edges : List (Nat × Nat × Nat)}\n    (h₁ : n ≥ 2)\n    (h₂\
  \ : solve_subway_fare n m edges ≠ -1) :\n    solve_subway_fare n m edges ≤ m :=\
  \ sorry\n\n\ntheorem subway_fare_single_edge :\n    solve_subway_fare 2 1 [(1,2,1)]\
  \ = 1 := sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval solve_subway_fare 3 3\
  \ [(1, 2, 1), (2, 3, 1), (3, 1, 2)]\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval solve_subway_fare\
  \ 8 11 [(1, 3, 1), (1, 4, 2), (2, 3, 1), (2, 5, 1), (3, 4, 3), (3, 6, 3), (3, 7,\
  \ 3), (4, 8, 4), (5, 6, 1), (6, 7, 5), (7, 8, 5)]\n\n/--\ninfo: -1\n-/\n#guard_msgs\
  \ in\n#eval solve_subway_fare 2 0 []\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
