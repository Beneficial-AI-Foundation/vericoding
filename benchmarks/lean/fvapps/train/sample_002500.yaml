"vc-description": "=====Function Descriptions=====\nWe have seen the applications\
  \ of union, intersection, difference and symmetric difference operations, but these\
  \ operations do not make any changes or mutations to the set.\n\nWe can use the\
  \ following operations to create mutations to a set:\n\n.update() or |=\nUpdate\
  \ the set by adding elements from an iterable/another set.\n\n>>> H = set(\"Hacker\"\
  )\n>>> R = set(\"Rank\")\n>>> H.update(R)\n>>> print H\nset(['a', 'c', 'e', 'H',\
  \ 'k', 'n', 'r', 'R'])\n\n.intersection_update() or &=\nUpdate the set by keeping\
  \ only the elements found in it and an iterable/another set.\n\n>>> H = set(\"Hacker\"\
  )\n>>> R = set(\"Rank\")\n>>> H.intersection_update(R)\n>>> print H\nset(['a', 'k'])\n\
  \n.difference_update() or -=\nUpdate the set by removing elements found in an iterable/another\
  \ set.\n\n>>> H = set(\"Hacker\")\n>>> R = set(\"Rank\")\n>>> H.difference_update(R)\n\
  >>> print H\nset(['c', 'e', 'H', 'r'])\n\n.symmetric_difference_update() or ^=\n\
  Update the set by only keeping the elements found in either set, but not in both.\n\
  \n>>> H = set(\"Hacker\")\n>>> R = set(\"Rank\")\n>>> H.symmetric_difference_update(R)\n\
  >>> print H\nset(['c', 'e', 'H', 'n', 'r', 'R'])\n\n=====Problem Statement=====\n\
  You are given a set A and N number of other sets. These N number of sets have to\
  \ perform some specific mutation operations on set A.\n\nYour task is to execute\
  \ those operations and print the sum of elements from set A.\n\n=====Input Format=====\n\
  The first line contains the number of elements in set A.\nThe second line contains\
  \ the space separated list of elements in set A.\nThe third line contains integer\
  \ N, the number of other sets.\nThe next 2 * N lines are divided into N parts containing\
  \ two lines each.\nThe first line of each part contains the space separated entries\
  \ of the operation name and the length of the other set.\nThe second line of each\
  \ part contains space separated list of elements in the other set.\n\n=====Constraints=====\n\
  0<len(set(A))<1000\n0<len(otherSets)<100\n0<N<100\n\n=====Output Format=====\nOutput\
  \ the sum of elements in set A."
"vc-preamble": "import Imports.AllImports\n\ndef Operation := String\ndef OperationList\
  \ := List (Operation × List Nat)\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def process_set_operations (initial : List Nat) (operations : OperationList)\
  \ : Nat :=\n  sorry\n"
"vc-theorems": "theorem process_set_operations_result {initial : List Nat} {ops :\
  \ OperationList} :\n  ∃ (n : Nat), process_set_operations initial ops = n :=\n \
  \ sorry\n\n\ntheorem process_set_operations_nonnegative {initial : List Nat} {ops\
  \ : OperationList} :\n  process_set_operations initial ops ≥ 0 :=\n  sorry\n\n\n\
  theorem process_set_operations_empty :\n  process_set_operations [] [] = 0 :=\n\
  \  sorry\n\n\ntheorem update_operations_monotonic {initial : List Nat} :\n  process_set_operations\
  \ initial [] ≤ process_set_operations initial [(\"update\", [0,1,2,3,4])] :=\n \
  \ sorry\n\n\ntheorem intersection_with_self {initial : List Nat} :\n  process_set_operations\
  \ initial [] = process_set_operations initial [(\"intersection_update\", initial)]\
  \ :=\n  sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
