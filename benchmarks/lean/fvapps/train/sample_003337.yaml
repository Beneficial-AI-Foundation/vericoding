"vc-description": "# Let's watch a parade!\n## Brief\nYou're going to watch a parade,\
  \ but you only care about one of the groups marching. The parade passes through\
  \ the street where your house is. Your house is at number `location` of the street.\
  \ Write a function `parade_time` that will tell you the times when you need to appear\
  \ to see all appearences of that group.\n\n## Specifications\nYou'll be given:\n\
  \n* A `list` of `string`s containing `groups` in the parade, in order of appearance.\
  \ A group may appear multiple times. You want to see all the parts of your favorite\
  \ group.\n* An positive `integer` with the `location` on the parade route where\
  \ you'll be watching.\n* An positive `integer` with the `speed` of the parade\n\
  * A `string` with the `pref`ferred group you'd like to see\n\nYou need to return\
  \ the time(s) you need to be at the parade to see your favorite group as a `list`\
  \ of `integer`s.\n\nIt's possible the group won't be at your `location` at an exact\
  \ `time`. In that case, just be sure to get there right before it passes (i.e. the\
  \ largest integer `time` before the float passes the `position`).\n\n## Example\n\
  ```python\ngroups = ['A','B','C','D','E','F']\nlocation = 3\nspeed = 2\npref = 'C'\n\
  \                  v\nLocations: |0|1|2|3|4|5|6|7|8|9|...\nF E D C B A      | |\
  \               time = 0\n> > F E D C B A  | |               time = 1\n    > > F\
  \ E D C B|A|               time = 2\n        > > F E D|C|B A            time = 3\n\
  \                  ^\nparade_time(['A','B','C','D','E','F'], 3, 2,'C']) == [3]\n\
  ```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def parade_time (groups : List String) (location speed : Nat) (pref\
  \ : String) : List Nat :=\n  sorry\n"
"vc-theorems": "theorem parade_time_output_structure \n  (groups : List String) (location\
  \ speed : Nat) (pref : String)\n  (h1 : groups ≠ []) (h2 : ∀ g ∈ groups, g ≠ \"\"\
  ) (h3 : speed > 0) (h4 : pref ≠ \"\") :\n  let result := parade_time groups location\
  \ speed pref\n  ∀ x ∈ result, x ≥ 0 :=\nsorry\n\n\ntheorem parade_time_length \n\
  \  (groups : List String) (location speed : Nat) (pref : String)\n  (h1 : groups\
  \ ≠ []) (h2 : ∀ g ∈ groups, g ≠ \"\") (h3 : speed > 0) (h4 : pref ≠ \"\") :\n  let\
  \ result := parade_time groups location speed pref\n  List.length result = List.countP\
  \ (· = pref) groups :=\nsorry\n\n\ntheorem parade_time_no_matches\n  (groups : List\
  \ String) (location speed : Nat) (pref : String)\n  (h1 : groups ≠ []) (h2 : ∀ g\
  \ ∈ groups, g ≠ pref) (h3 : speed > 0) :\n  parade_time groups location speed pref\
  \ = [] :=\nsorry\n\n/--\ninfo: [3]\n-/\n#guard_msgs in\n#eval parade_time [\"a\"\
  , \"b\", \"c\", \"d\", \"e\", \"f\"] 3 2 \"c\"\n\n/--\ninfo: [2, 3]\n-/\n#guard_msgs\
  \ in\n#eval parade_time [\"c\", \"b\", \"c\", \"d\", \"e\", \"f\"] 3 2 \"c\"\n\n\
  /--\ninfo: [10, 11, 13]\n-/\n#guard_msgs in\n#eval parade_time [\"a\", \"b\", \"\
  c\", \"c\", \"e\", \"c\"] 7 1 \"c\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
