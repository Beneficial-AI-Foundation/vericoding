"vc-description": "Define a method ```hello``` that ```returns``` \"Hello, Name!\"\
  \ to a given ```name```, or says Hello, World! if name is not given (or passed as\
  \ an empty String).\n\nAssuming that ```name``` is a ```String``` and it checks\
  \ for user typos to return a name with a first capital letter (Xxxx).\n\nExamples:"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def hello (name: Option String := none) : String := sorry\n\ndef\
  \ isSubstringOf (s₁ s₂ : String) : Prop := \n  ∃ a b, s₂ = a ++ s₁ ++ b\n"
"vc-theorems": "theorem hello_with_name_contains_capitalized {name: String} (h: name.length\
  \ > 0):\n  isSubstringOf (name.capitalize) (hello (some name)) := sorry\n\n\ntheorem\
  \ hello_empty_is_world:\n  hello none = \"Hello, World!\" := sorry\n\n\ntheorem\
  \ hello_empty_string:\n  hello (some \"\") = \"Hello, World!\" := sorry\n\n/--\n\
  info: 'Hello, World!'\n-/\n#guard_msgs in\n#eval hello \n\n/--\ninfo: 'Hello, World!'\n\
  -/\n#guard_msgs in\n#eval hello \"\"\n\n/--\ninfo: 'Hello, Alice!'\n-/\n#guard_msgs\
  \ in\n#eval hello \"alice\"\n\n/--\ninfo: 'Hello, John!'\n-/\n#guard_msgs in\n#eval\
  \ hello \"jOHN\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
