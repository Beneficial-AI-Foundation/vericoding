"vc-description": "# How much is the fish! (- Scooter )\nThe ocean is full of colorful\
  \ fishes. We as programmers want to know the hexadecimal value of these fishes.\n\
  \n## Task\nTake all hexadecimal valid characters (a,b,c,d,e,f) of the given name\
  \ and XOR them. Return the result as an integer.\n\n## Input\nThe input is always\
  \ a string, which can contain spaces, upper and lower case letters but no digits.\
  \ \n\n## Example\n\n`fisHex(\"redlionfish\") -> e,d,f -> XOR -> 12`"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def fisHex (s : String) : Nat :=\n  sorry\n"
"vc-theorems": "theorem fisHex_empty :\n  fisHex \"\" = 0 :=\nsorry\n\n\ntheorem fisHex_valid_chars_only\
  \ {s : String} :\n  let validChars := s.data.filter (fun c => c ∈ ['a', 'b', 'c',\
  \ 'd', 'e', 'f', 'A', 'B', 'C', 'D', 'E', 'F'])\n  fisHex s = fisHex (String.mk\
  \ validChars) :=\nsorry\n\n\n\n\n\n\ntheorem fisHex_concat {s₁ s₂ : String} :\n\
  \  fisHex (s₁ ++ s₂) = fisHex s₁ ^^^ fisHex s₂ :=\nsorry\n\n\ntheorem fisHex_case_insensitive\
  \ {s : String} :\n  fisHex s.toLower = fisHex s.toUpper :=\nsorry\n\n/--\ninfo:\
  \ 12\n-/\n#guard_msgs in\n#eval fisHex \"redlionfish\"\n\n/--\ninfo: 1\n-/\n#guard_msgs\
  \ in\n#eval fisHex \"Aeneus corydoras\"\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval\
  \ fisHex \"blowfish\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
