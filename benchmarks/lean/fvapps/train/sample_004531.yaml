"vc-description": "The mean and standard deviation of a sample of data can be thrown\
  \ off if the sample contains one or many outlier(s) :\n\n\n(image source)\n\nFor\
  \ this reason, it is usually a good idea to check for and remove outliers before\
  \ computing the mean or the standard deviation of a sample. To this aim, your function\
  \ will receive a list of numbers representing a sample of data. Your function must\
  \ remove any outliers and return the mean of the sample, rounded to two decimal\
  \ places (round only at the end).\n\nSince there is no objective definition of \"\
  outlier\" in statistics, your function will also receive a cutoff, in standard deviation\
  \ units. So for example if the cutoff is 3, then any value that is more than 3 standard\
  \ deviations above or below the mean must be removed. Notice that, once outlying\
  \ values are removed in a first \"sweep\", other less extreme values may then \"\
  become\" outliers, that you'll have to remove as well!\nExample :\n```python\nsample\
  \ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100]\ncutoff = 3\nclean_mean(sample, cutoff)\
  \ → 5.5\n```\n\nFormula for the mean :\n\n(where n is the sample size)\n\nFormula\
  \ for the standard deviation :\n\n(where N is the sample size, xi is observation\
  \ i and x̄ is the sample mean)\n\nNote : since we are not computing the sample standard\
  \ deviation for inferential purposes, the denominator is n, not n - 1."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def Int.toFloat : Int → Float := sorry\n\ndef clean_mean (xs :\
  \ List Int) (k : Float) : Float := sorry\n\n-- For identical values, clean mean\
  \ should equal the value"
"vc-theorems": "theorem clean_mean_identical_values {x : Int} {n : Nat} :\n  n ≥ 2\
  \ → clean_mean (List.replicate n x) 2.0 = Int.toFloat x := sorry\n\n-- Test with\
  \ known outcomes\n\ntheorem clean_mean_basic_test1 :\n  clean_mean [1, 2, 3, 4,\
  \ 5] 2.0 = 3.0 := sorry\n\n\ntheorem clean_mean_basic_test2 :\n  clean_mean [1,\
  \ 2, 3, 4, 5, 100] 2.0 = 3.0 := sorry\n\n\ntheorem clean_mean_basic_test3 :\n  clean_mean\
  \ [1, 1, 2, 2, 3, 3] 2.0 = 2.0 := sorry\n\n/--\ninfo: 5.5\n-/\n#guard_msgs in\n\
  #eval clean_mean [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100] 3\n\n/--\ninfo: 3.0\n-/\n\
  #guard_msgs in\n#eval clean_mean [1, 2, 3, 4, 5] 3\n\n/--\ninfo: 2.0\n-/\n#guard_msgs\
  \ in\n#eval clean_mean [1, 2, 3] 2\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
