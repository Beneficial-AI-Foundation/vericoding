"vc-description": "Not everyone probably knows that Chef has younder brother Jeff.\
  \ Currently Jeff learns to read.\nHe knows some subset of the letter of Latin alphabet.\
  \ In order to help Jeff to study, Chef gave him a book with the text consisting\
  \ of N words. Jeff can read a word iff it consists only of the letters he knows.\n\
  Now Chef is curious about which words his brother will be able to read, and which\
  \ are not. Please help him!\n\n-----Input-----\nThe first line of the input contains\
  \ a lowercase Latin letter string S, consisting of the letters Jeff can read. Every\
  \ letter will appear in S no more than once.\nThe second line of the input contains\
  \ an integer N denoting the number of words in the book.\nEach of the following\
  \ N lines contains a single lowecase Latin letter string Wi, denoting the ith word\
  \ in the book.\n\n-----Output-----\nFor each of the words, output \"Yes\" (without\
  \ quotes) in case Jeff can read it, and \"No\" (without quotes) otherwise.\n\n-----Constraints-----\n\
  - 1 ≤ |S| ≤ 26\n- 1 ≤ N ≤ 1000\n- 1 ≤ |Wi| ≤ 12\n- Each letter will appear in S\
  \ no more than once.\n- S, Wi consist only of lowercase Latin letters.\n\n-----Subtasks-----\n\
  - Subtask #1 (31 point): |S| = 1, i.e. Jeff knows only one letter.\n- Subtask #2\
  \ (69 point)\t: no additional constraints\n\n-----Example-----\nInput:act\n2\ncat\n\
  dog\n\nOutput:Yes\nNo\n\n-----Explanation-----\nThe first word can be read.\nThe\
  \ second word contains the letters d, o and g that aren't known by Jeff."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def can_read_words (known_letters : String) (word_list : List String)\
  \ : List String := sorry\n\ntheorem can_read_words_length\n  (known_letters : String)\n\
  \  (word_list : List String)\n  (h₁ : known_letters.length > 0) :\n  (can_read_words\
  \ known_letters word_list).length = word_list.length := sorry\n"
"vc-theorems": "theorem can_read_words_valid_outputs\n  (known_letters : String) \n\
  \  (word_list : List String)\n  (h₁ : known_letters.length > 0) :\n  ∀ x ∈ can_read_words\
  \ known_letters word_list, x = \"Yes\" ∨ x = \"No\" := sorry\n\n\ntheorem can_read_words_yes_implies_all_letters_known\n\
  \  (known_letters : String)\n  (word_list : List String)\n  (h₁ : known_letters.length\
  \ > 0) \n  (i : Nat)\n  (h₂ : i < word_list.length)\n  (h₃ : (can_read_words known_letters\
  \ word_list)[i]? = some \"Yes\") :\n  ∀ c ∈ (word_list[i]?.getD \"\").data, c ∈\
  \ known_letters.data := sorry\n\n\ntheorem can_read_words_no_implies_some_letter_unknown\n\
  \  (known_letters : String)\n  (word_list : List String)\n  (h₁ : known_letters.length\
  \ > 0)\n  (i : Nat)\n  (h₂ : i < word_list.length)\n  (h₃ : (can_read_words known_letters\
  \ word_list)[i]? = some \"No\") :\n  ∃ c ∈ (word_list[i]?.getD \"\").data, c ∉ known_letters.data\
  \ := sorry\n\n\ntheorem can_read_words_empty_list\n  (known_letters : String)\n\
  \  (h₁ : known_letters.length > 0) :\n  can_read_words known_letters [] = [] :=\
  \ sorry\n\n\ntheorem can_read_words_single_word\n  (known_letters : String)\n  (word\
  \ : String)\n  (h₁ : known_letters.length > 0) :\n  (∀ c ∈ word.data, c ∈ known_letters.data)\
  \ →\n  can_read_words known_letters [word] = [\"Yes\"] := sorry\n\n\ntheorem can_read_words_single_word_not\n\
  \  (known_letters : String)\n  (word : String)\n  (h₁ : known_letters.length > 0)\
  \ :\n  (∃ c ∈ word.data, c ∉ known_letters.data) →\n  can_read_words known_letters\
  \ [word] = [\"No\"] := sorry\n\n/--\ninfo: ['Yes', 'No']\n-/\n#guard_msgs in\n#eval\
  \ can_read_words \"act\" [\"cat\", \"dog\"]\n\n/--\ninfo: ['Yes', 'No', 'Yes']\n\
  -/\n#guard_msgs in\n#eval can_read_words \"a\" [\"a\", \"b\", \"aa\"]\n\n/--\ninfo:\
  \ ['Yes', 'Yes', 'Yes', 'No']\n-/\n#guard_msgs in\n#eval can_read_words \"xyz\"\
  \ [\"x\", \"xy\", \"xyz\", \"abc\"]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
