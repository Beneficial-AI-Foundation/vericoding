"vc-description": "Chef spent N days working really hard! He planned loads of tasks:\
  \ as many as Ai tasks to do on the ith day! Chef's work was brutal, so he only managed\
  \ to finish Bi tasks on the ith day.\nThe good news is that Chef has a Time Machine!\
  \ \nThe Time Machine has K white buttons and M black buttons. Each button has a\
  \ positive integer printed on it. Now Chef goes through all N days consequently\
  \ and presses buttons. Each day Chef can only press one button (either white or\
  \ black). After using a button once, it becomes inactive.\nPressing a white button\
  \ with integer x printed on it reduces the number of planned tasks on the day it\
  \ was pressed by exactly x. Note that this white button can only be pressed if number\
  \ of planned tasks on the day are greater than or equal to x.\nPressing a black\
  \ button with integer x printed on it increases the number of completed tasks on\
  \ the day it was pressed by exactly x. Note that this black button can only be pressed\
  \ if after pressing it, number of completed tasks don't exceed the number of tasks.\n\
  Chef is interested in finding the minimum possible amount of total uncompleted tasks\
  \ he will still be left with after N days using the Machine in the best way?\nBe\
  \ careful! Time is sensitive! Chef cannot make a day when he completed more tasks\
  \ then planned, as this may result in a more-work-than-planned paradox, killing\
  \ all lazy people on the planet!\n\n-----Input-----\n- The first line of input contains\
  \ a single integer T, denoting the number of test cases. Description of T test cases\
  \ follows.\n- The first line of each test case contains three integers — N, K, M\
  \ — denoting the number of days, white and black buttons appropriately.\n- The second\
  \ line contains N space-separated integers A1, A2, … , AN, denoting the number of\
  \ planned tasks.\n- The third line contains N space-separated integers B1, B2, …\
  \ , BN, denoting the number of completed tasks.\n- The fourth line contains K space-separated\
  \ integers C1, C2, … , CK, denoting the integers on white buttons.\n- The fifth\
  \ and last line contains M space-separated integers D1, D2, … , DM, denoting the\
  \ integers on black buttons.\n\n-----Output-----\n- In a single line, output an\
  \ integer — the minimum possible amount of uncompleted tasks.\n\n-----Constraints-----\n\
  - 1 ≤ T ≤ 4\n- 1 ≤ N, K, M ≤ 10^5\n- 1 ≤ Bi ≤ Ai  ≤ 10^5\n- 1 ≤ Ci, Di  ≤ 10^5\n\
  \n-----Subtasks-----\n- Subtask N ≤ 10, K, M ≤ 5. Points: 30 \n- Subtask Original\
  \ constraints. Points: 70 \n\n-----Example-----\nInput:\n1\n4 2 2 \n5 7 6 1\n3 3\
  \ 1 1\n6 3\n1 4\n\nOutput:\n3\n\n-----Explanation-----\nExample case 1.\nIn this\
  \ example Chef goes through the following steps:\nUse black button 1 on the first\
  \ day.\nUse black button 4 on the second day.\nUse white button 3 on the third day.\n\
  The arrays A and B are now effectively changed to:\n5 7 3 1\n4 7 1 1\nSo he will\
  \ have 3 uncompleted tasks."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def min_uncompleted_tasks (N K M : Nat) (A B : List Nat) (C D :\
  \ List Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem min_uncompleted_tasks_returns_nonneg (N K M : Nat) (A B :\
  \ List Nat) (C D : List Nat)\n  (h1 : N > 0) (h2 : N ≤ 100) (h3 : K ≤ 100) (h4 :\
  \ M ≤ 100)\n  (h5 : A.length = N) (h6 : B.length = N)\n  (h7 : ∀ x ∈ A, x = 1) (h8\
  \ : ∀ x ∈ B, x = 0)\n  (h9 : ∀ x ∈ C, x = 1) (h10 : ∀ x ∈ D, x = 1)\n  (h11 : C.length\
  \ = K) (h12 : D.length = M) :\n  min_uncompleted_tasks N K M A B C D ≥ 0 :=\n  sorry\n\
  \n\ntheorem min_uncompleted_tasks_list_lengths_equal (N : Nat) (A B C D : List Nat)\n\
  \  (h1 : N > 0) (h2 : N ≤ 100)\n  (h3 : ∀ x ∈ A, x = 1) (h4 : ∀ x ∈ B, x = 0)\n\
  \  (h5 : C.length ≤ 100) (h6 : D.length ≤ 100)\n  (h7 : ∀ x ∈ C, x ≥ 1) (h8 : ∀\
  \ x ∈ C, x ≤ 1000)\n  (h9 : ∀ x ∈ D, x ≥ 1) (h10 : ∀ x ∈ D, x ≤ 1000) :\n  A.length\
  \ = B.length :=\n  sorry\n\n\ntheorem min_uncompleted_tasks_no_buttons (N : Nat)\
  \ (A B : List Nat)\n  (h1 : N > 0) (h2 : N ≤ 100)\n  (h3 : A.length = N) (h4 : B.length\
  \ = N)\n  (h5 : ∀ x ∈ A, x = 1) (h6 : ∀ x ∈ B, x = 0) :\n  min_uncompleted_tasks\
  \ N 0 0 A B [] [] = \n  (List.zip A B).foldl (fun acc p => acc + max 0 (p.1 - p.2))\
  \ 0 :=\n  sorry\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval min_uncompleted_tasks\
  \ 4 2 2 [5, 7, 6, 1] [3, 3, 1, 1] [6, 3] [1, 4]\n\n/--\ninfo: 2\n-/\n#guard_msgs\
  \ in\n#eval min_uncompleted_tasks 2 1 1 [5, 3] [2, 1] [2] [1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
