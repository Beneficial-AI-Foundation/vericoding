"vc-description": "Say you have an array for which the ith element is the price of\
  \ a given stock on day i.\n\nIf you were only permitted to complete at most one\
  \ transaction (i.e., buy one and sell one share of the stock), design an algorithm\
  \ to find the maximum profit.\n\nNote that you cannot sell a stock before you buy\
  \ one.\n\nExample 1:\n\n\nInput: [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day\
  \ 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n             Not\
  \ 7-1 = 6, as selling price needs to be larger than buying price.\n\n\nExample 2:\n\
  \n\nInput: [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is\
  \ done, i.e. max profit = 0."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def max_profit (prices : List Nat) : Nat := sorry\n\ntheorem max_profit_nonnegative\
  \ (prices : List Nat) :\n  max_profit prices ≥ 0 := sorry\n"
"vc-theorems": "theorem max_profit_empty_or_singleton {prices : List Nat} :\n  prices.length\
  \ ≤ 1 → max_profit prices = 0 := sorry \n\n\ntheorem max_profit_bounded_by_extremes\
  \ {prices : List Nat} {i j : Nat} \n  (h₁ : i < prices.length) (h₂ : j < prices.length)\
  \ :\n  max_profit prices ≤ prices[j]'h₂ - prices[i]'h₁ := sorry\n\n\ntheorem max_profit_optimal_for_each_buy_day\
  \ {prices : List Nat} {i : Nat} \n  (h₁ : i < prices.length) (j : Nat) (h₂ : i +\
  \ 1 + j < prices.length) :\n  max_profit prices ≥ prices[i + 1 + j]'h₂ - prices[i]'h₁\
  \ := sorry\n\n\ntheorem max_profit_decreasing {prices : List Nat} {i j : Nat} \n\
  \  (h₁ : i < prices.length) (h₂ : j < prices.length)\n  (h_len : prices.length >\
  \ 1)\n  (h_sorted : i < j → prices[i]'h₁ ≥ prices[j]'h₂) :\n  max_profit prices\
  \ = 0 := sorry\n\n\ntheorem max_profit_increasing {prices : List Nat} {i j : Nat}\n\
  \  (h₁ : i < prices.length) (h₂ : j < prices.length)\n  (h_len : prices.length >\
  \ 1)\n  (h_sorted : i < j → prices[i]'h₁ ≤ prices[j]'h₂)\n  (h_last : prices.length\
  \ - 1 < prices.length)\n  (h_zero : 0 < prices.length) :\n  max_profit prices =\
  \ prices[prices.length-1]'h_last - prices[0]'h_zero := sorry\n\n/--\ninfo: 5\n-/\n\
  #guard_msgs in\n#eval max_profit [7, 1, 5, 3, 6, 4]\n\n/--\ninfo: 0\n-/\n#guard_msgs\
  \ in\n#eval max_profit [7, 6, 4, 3, 1]\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval\
  \ max_profit [2, 4, 1]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
