"vc-description": "In Programmers Army Land, people have started preparation as sports\
  \ day is scheduled next week.\nYou are given a task to form 1 team of $k$ consecutive\
  \ players, from a list of sports player whose powers are given to you.\nYou want\
  \ your team to win this championship, so you have to chose your $k$ team players\
  \ optimally i.e. there must not be any other $k$ consecutive team players who have\
  \ their total power greater than your team members total power.\n\n-----Input:-----\n\
  - The first line of the input contains a single integer $T$. $T$ denoting the number\
  \ of test cases. The description of $T$ test cases is as follows.\n- The next line\
  \ of the input contains 2 space separated integers $N$ and $K$. $N$ denotes the\
  \ total number of players and $K$ denotes the number of players allowed in a team.\n\
  - The next line of the input contains $N$ space-separated integers $A1, A2, A3...An$\
  \ where $ith$ number denotes power of $ith$ player.\nNote: power of players can\
  \ also be negative\n\n-----Output:-----\n- For each test-case print the total power\
  \ that your selected team have(each test case output must be printed on a new line).\n\
  \n-----Constraints:-----\n- $1 \\leq T \\leq 10^3$\n- $1 \\leq N,K \\leq 10^5$\n\
  - $-10^7 \\leq A1, A2, A3...An \\leq 10^7$\n\n-----Sample Input:-----\n1\n5 3\n\
  1 2 3 4 5\n\n-----Sample Output:-----\n12"
"vc-preamble": "import Imports.AllImports\n\ndef find_max_consecutive_power (arr :\
  \ List Int) (k : Nat) : Int := sorry \n\ndef sum_sublist (l : List Int) (i : Nat)\
  \ (len : Nat) : Int := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def list_sum (l : List Int) : Int := sorry\n\ntheorem find_max_consecutive_power_is_k_consecutive\
  \ \n  {arr : List Int} {k : Nat} (h : k ≤ arr.length) :\n  ∃ i, i + k ≤ arr.length\
  \ ∧ \n    find_max_consecutive_power arr k = sum_sublist arr i k := sorry\n"
"vc-theorems": "theorem find_max_consecutive_power_is_maximum \n  {arr : List Int}\
  \ {k : Nat} (h : k ≤ arr.length) :\n  ∀ i, i + k ≤ arr.length → \n    sum_sublist\
  \ arr i k ≤ find_max_consecutive_power arr k := sorry\n\n\ntheorem find_max_consecutive_power_equals_sum_when_k_equals_length\n\
  \  {arr : List Int} : \n  find_max_consecutive_power arr arr.length = list_sum arr\
  \ := sorry\n\n\ntheorem find_max_consecutive_power_nonnegative\n  {arr : List Int}\
  \ {k : Nat} (h : k ≤ arr.length)\n  (h_nonneg : ∀ x ∈ arr, 0 ≤ x) :\n  0 ≤ find_max_consecutive_power\
  \ arr k := sorry\n\n/--\ninfo: 12\n-/\n#guard_msgs in\n#eval find_max_consecutive_power\
  \ [1, 2, 3, 4, 5] 3\n\n/--\ninfo: -3\n-/\n#guard_msgs in\n#eval find_max_consecutive_power\
  \ [-1, -2, -3, -4, -5] 2\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval find_max_consecutive_power\
  \ [1, -2, 3, -4, 5] 3\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
