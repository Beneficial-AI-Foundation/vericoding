"vc-description": "In this Kata you are a builder and you are assigned a job of building\
  \ a wall with a specific size (God knows why...).\n\nCreate a function called `build_a_wall`\
  \ (or `buildAWall` in JavaScript) that takes `x` and `y` as integer arguments (which\
  \ represent the number of rows of bricks for the wall and the number of bricks in\
  \ each row respectively) and outputs the wall as a string with the following symbols:\n\
  \n`■■` => One full brick (2 of `■`)\n\n`■` => Half a brick\n\n`|` => Mortar (between\
  \ bricks on same row)\n\nThere has to be a `|` between every two bricks on the same\
  \ row. For more stability each row's bricks cannot be aligned vertically with the\
  \ bricks of the row above it or below it meaning at every 2 rows you will have to\
  \ make the furthest brick on both sides of the row at the size of half a brick (`■`)\
  \ while the first row from the bottom will only consist of full bricks. Starting\
  \ from the top, every new row is to be represented with `\\n` except from the bottom\
  \ row. See the examples for a better understanding.\n\nIf one or both of the arguments\
  \ aren't valid (less than 1, isn't integer, isn't given...etc) return `None` in\
  \ Python.\n\nIf the number of bricks required to build the wall is greater than\
  \ 10000 return `\"Naah, too much...here's my resignation.\"`\n\nExamples, based\
  \ on Python:\n```\nbuild_a_wall(5,5) => '■■|■■|■■|■■|■■\\n■|■■|■■|■■|■■|■\\n■■|■■|■■|■■|■■\\\
  n■|■■|■■|■■|■■|■\\n■■|■■|■■|■■|■■'\n\nbuild_a_wall(10,7) => '■|■■|■■|■■|■■|■■|■■|■\\\
  n■■|■■|■■|■■|■■|■■|■■\\n■|■■|■■|■■|■■|■■|■■|■\\n■■|■■|■■|■■|■■|■■|■■\\n■|■■|■■|■■|■■|■■|■■|■\\\
  n■■|■■|■■|■■|■■|■■|■■\\n■|■■|■■|■■|■■|■■|■■|■\\n■■|■■|■■|■■|■■|■■|■■\\n■|■■|■■|■■|■■|■■|■■|■\\\
  n■■|■■|■■|■■|■■|■■|■■'\n\nbuild_a_wall(\"eight\",[3]) => None  }\n             \
  \                      }> Invalid input\nbuild_a_wall(12,-4) => None        }\n\n\
  build_a_wall(123,987) => \"Naah, too much...here's my resignation.\"\n123 * 987\
  \ = 121401 > 10000\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def build_a_wall (x y : Int) : Option String := sorry\n\ntheorem\
  \ invalid_input_returns_none {x y : Int} :\n  x ≤ 0 ∨ y ≤ 0 → build_a_wall x y =\
  \ none := sorry\n"
"vc-theorems": "theorem large_input_returns_resignation {x y : Int} :\n  x > 100 ∨\
  \ y > 100 → \n  build_a_wall x y = some \"Naah, too much...here's my resignation.\"\
  \ := sorry\n\n\ntheorem basic_wall_properties {x y : Int} (h1: x > 0) (h2: y > 0)\
  \ (h3: x * y ≤ 10000) :\n  match build_a_wall x y with\n  | none => False \n  |\
  \ some wall => \n    -- Wall is a string with x lines\n    let lines := String.split\
  \ wall (· = '\\n')\n    lines.length = x ∧\n    -- Each line contains the block\
  \ character\n    ∀ line ∈ lines, String.contains line '■'\n  := sorry\n\n\ntheorem\
  \ too_large_wall_returns_resignation {x y : Int} (h1: x > 0) (h2: y > 0) :\n  x\
  \ * y > 10000 →\n  build_a_wall x y = some \"Naah, too much...here's my resignation.\"\
  \ := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
