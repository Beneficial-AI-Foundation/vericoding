"vc-description": "Bear Limak has a sequence of N non-negative integers A1, A2, ...,\
  \ AN. He defines the score of a segment (consecutive subsequence) as its sum of\
  \ elements modulo P (not necessarily prime). Find the maximum score of a non-empty\
  \ segment, and also find the number of segments with this maximum score.\n\n-----Input-----\n\
  First line of the input contains an integer T denoting the number of test cases.\
  \ The description of T test cases follows.\nFor each test case, the first line of\
  \ the input contains two space separated integers, N and P.\nThe second line contains\
  \ N space separated integers denoting the sequence.\n\n-----Output-----\nFor each\
  \ test case, output two space separated integers denoting the maximum score of a\
  \ segment and the number of segments with the score, respectively.\n\n-----Constraints-----\n\
  - 1 ≤ T ≤ 10\n- 1 ≤ N ≤ 105\n- 1 ≤ P ≤ 109\n- 0 ≤ Ai ≤ 109 \n\nSubtask #1: (25 points)\n\
  - 1 ≤ N ≤ 100\n\nSubtask #2: (25 points)\n- 1 ≤ N ≤ 1000\n\nSubtask #3: (50 points)\n\
  - original constraints\n\n-----Example-----\nInput:\n4\n2 3\n1 2\n3 5\n2 4 3\n3\
  \ 100\n1 3 5\n4 3\n1 2 3 4\n\nOutput:\n2 1\n4 2\n9 1\n2 2\n\n-----Explanation-----\n\
  Example case 1. There are three segments - [1], [2] and [1, 2]. Sum of these segments\
  \ are 1, 2 and 3 respectively. Sum of these segments modulo 3 will be 1, 2 and 0.\
  \ Maximum score among these is 2. There is also only one segment with this score.\n\
  Example case 2. There are six segments - [2], [4], [3], [2, 4], [4, 3] and [2, 4,\
  \ 3]. Sum of these segments are 2, 4, 3, 6, 7, 9 respectively. Sum of these segments\
  \ modulo 5 will be 2, 4, 3, 1, 2, 4. Maximum score among these is 4. And there are\
  \ two segments with this score."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sum (xs : List Nat) : Nat := List.foldl (· + ·) 0 xs\n\ndef\
  \ find_max_segment_scores (n m : Nat) (arr : List Nat) : Nat × Nat := sorry\n\n\n\
  \n\n\n\n"
"vc-theorems": "theorem single_element {n : Nat} {arr : List Nat}\n  (h1 : n > 0)\n\
  \  (h2 : n ≤ 10)\n  (h3 : arr = [n]) :\n  find_max_segment_scores 1 (n+1) arr =\
  \ (n % (n+1), 1) := sorry\n\n/--\ninfo: (2, 1)\n-/\n#guard_msgs in\n#eval find_max_segment_scores\
  \ 2 3 [1, 2]\n\n/--\ninfo: (4, 2)\n-/\n#guard_msgs in\n#eval find_max_segment_scores\
  \ 3 5 [2, 4, 3]\n\n/--\ninfo: (2, 2)\n-/\n#guard_msgs in\n#eval find_max_segment_scores\
  \ 4 3 [1, 2, 3, 4]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
