"vc-description": "Given a string S.\nYou have to return another string such that\
  \ even-indexed and odd-indexed characters of S are grouped and groups are space-separated\
  \ (see sample below)\n\nNote: \n0 is considered to be an even index. \nAll input\
  \ strings are valid with no spaces\n\n\ninput:\n'CodeWars'\n\noutput\n'CdWr oeas'\n\
  \nS[0] = 'C'\nS[1] = 'o'\nS[2] = 'd'\nS[3] = 'e'\nS[4] = 'W'\nS[5] = 'a'\nS[6] =\
  \ 'r'\nS[7] = 's'\n\n\nEven indices 0, 2, 4, 6, so we have 'CdWr' as the first group\n\
  odd ones are 1, 3, 5, 7, so the second group is 'oeas'\nAnd the final string to\
  \ return is 'Cdwr oeas'\n\nEnjoy."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sort_my_string (s : String) : String := sorry\n\ntheorem sort_my_string_preserves_length\
  \ (s : String) (h : s.length > 0) :\n  let result := sort_my_string s\n  let result_no_spaces\
  \ := result.replace \" \" \"\"\n  result_no_spaces.length = s.length := sorry\n"
"vc-theorems": "theorem sort_my_string_splits_even_indexed (s : String) (h : s.length\
  \ > 0) :\n  let result := sort_my_string s\n  let parts := result.split (fun x =>\
  \ decide (x = ' '))\n  parts.length > 0 → \n  (parts.get? 0).isSome := sorry\n\n\
  \ntheorem sort_my_string_splits_odd_indexed (s : String) (h : s.length > 1) :\n\
  \  let result := sort_my_string s\n  let parts := result.split (fun x => decide\
  \ (x = ' '))\n  parts.length > 1 → \n  (parts.get? 1).isSome := sorry\n\n/--\ninfo:\
  \ 'CdWr oeas'\n-/\n#guard_msgs in\n#eval sort_my_string \"CodeWars\"\n\n/--\ninfo:\
  \ 'ACE BDF'\n-/\n#guard_msgs in\n#eval sort_my_string \"ABCDEF\"\n\n/--\ninfo: 'Wleclgltihuebredrf\
  \ ofsheesenasnegrof'\n-/\n#guard_msgs in\n#eval sort_my_string \"Wolfeschlegelsteinhausenbergerdorff\"\
  \n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
