"vc-description": "The Gray code (see wikipedia for more details) is a well-known\
  \ concept.\nOne of its important properties is that every two adjacent numbers have\
  \ exactly one different digit in their binary representation.\n\nIn this problem,\
  \ we will give you n non-negative integers in a sequence A[1..n] (0<=A[i]<2^64),\
  \ such that every two adjacent integers have exactly one different digit in their\
  \ binary representation, similar to the Gray code.\n\nYour task is to check whether\
  \ there exist 4 numbers A[i1], A[i2], A[i3], A[i4] (1 <= i1 < i2 < i3 < i4 <= n)\
  \ out of the given n numbers such that A[i1] xor A[i2] xor A[i3] xor A[i4] = 0.\
  \ Here xor is a bitwise operation which is same as ^ in C, C++, Java and xor in\
  \ Pascal.\n\n-----Input-----\nFirst line contains one integer n (4<=n<=100000).\n\
  Second line contains n space seperated non-negative integers denoting the sequence\
  \ A.\n\n-----Output-----\nOutput “Yes” (quotes exclusive) if there exist four distinct\
  \ indices i1, i2, i3, i4 such that A[i1] xor A[i2] xor A[i3] xor A[i4] = 0. Otherwise,\
  \ output \"No\" (quotes exclusive) please.\n\n-----Example-----\nInput:\n\n5\n1\
  \ 0 2 3 7\n\nOutput:\n\nYes"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def check_xor_sequence (n : Nat) (seq : List Nat) : String := sorry\n\
  \ntheorem large_sequences_return_yes \n  (n : Nat) (seq : List Nat) \n  (h1 : n\
  \ ≥ 68) \n  (h2 : seq.length = n) : \n  check_xor_sequence n seq = \"Yes\" := sorry\n"
"vc-theorems": "theorem small_sequences_return_no\n  (n : Nat) (seq : List Nat)\n\
  \  (h1 : n ≤ 67)\n  (h2 : seq.length ≤ 1) :\n  check_xor_sequence n seq = \"No\"\
  \ := sorry\n\n\ntheorem permutation_invariant\n  (n : Nat) (seq : List Nat)\n  (h1\
  \ : 2 ≤ n) (h2 : n ≤ 67)\n  (h3 : 2 ≤ seq.length) (h4 : seq.length ≤ 67) :\n  check_xor_sequence\
  \ n seq = check_xor_sequence n seq.reverse := sorry\n\n\ntheorem xor_pattern_valid\
  \ \n  (n : Nat) (base : Nat)\n  (h1 : 4 ≤ n) (h2 : n ≤ 67)\n  (seq : List Nat)\n\
  \  (h3 : seq = [base, base^^^1, base^^^2, base^^^3] ++ List.replicate (n-4) 0) :\n\
  \  check_xor_sequence n seq = \"Yes\" := sorry\n\n/--\ninfo: 'Yes'\n-/\n#guard_msgs\
  \ in\n#eval check_xor_sequence 5 [1, 0, 2, 3, 7]\n\n/--\ninfo: 'No'\n-/\n#guard_msgs\
  \ in\n#eval check_xor_sequence 4 [1, 2, 3, 4]\n\n/--\ninfo: 'Yes'\n-/\n#guard_msgs\
  \ in\n#eval check_xor_sequence 68 [1] * 68\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
