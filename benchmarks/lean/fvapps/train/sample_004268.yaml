"vc-description": "Well met with Fibonacci bigger brother, AKA Tribonacci.\n\nAs the\
  \ name may already reveal, it works basically like a Fibonacci, but summing the\
  \ last 3 (instead of 2) numbers of the sequence to generate the next. And, worse\
  \ part of it, regrettably I won't get to hear non-native Italian speakers trying\
  \ to pronounce it :(\n\nSo, if we are to start our Tribonacci sequence with `[1,\
  \ 1, 1]` as a starting input (AKA *signature*), we have this sequence:\n\n```\n\
  [1, 1 ,1, 3, 5, 9, 17, 31, ...]\n```\n\nBut what if we started with `[0, 0, 1]`\
  \ as a signature? As starting with `[0, 1]` instead of `[1, 1]` basically *shifts*\
  \ the common Fibonacci sequence by once place, you may be tempted to think that\
  \ we would get the same sequence shifted by 2 places, but that is not the case and\
  \ we would get:\n\n```\n[0, 0, 1, 1, 2, 4, 7, 13, 24, ...]\n```\n\nWell, you may\
  \ have guessed it by now, but to be clear: you need to create a fibonacci function\
  \ that given a **signature** array/list, returns **the first n elements - signature\
  \ included** of the so seeded sequence.\n\nSignature will always contain 3 numbers;\
  \ n will always be a non-negative number; if `n == 0`, then return an empty array\
  \ (except in C return NULL) and be ready for anything else which is not clearly\
  \ specified ;)\n\nIf you enjoyed this kata more advanced and generalized version\
  \ of it can be found in the Xbonacci kata\n\n*[Personal thanks to Professor Jim\
  \ Fowler on Coursera for his awesome classes that I really recommend to any math\
  \ enthusiast and for showing me this mathematical curiosity too with his usual contagious\
  \ passion :)]*"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def tribonacci (signature : List Int) (n : Nat) : List Int := sorry\n\
  \ntheorem tribonacci_length (signature : List Int) (n : Nat) : \n  (tribonacci signature\
  \ n).length = n := sorry\n"
"vc-theorems": "theorem tribonacci_empty (signature : List Int) :\n  tribonacci signature\
  \ 0 = [] := sorry\n\n\ntheorem tribonacci_matches_signature (signature : List Int)\
  \ (n : Nat) :\n  n ≥ 3 → (tribonacci signature n).take 3 = signature.take 3 := sorry\n\
  \n\ntheorem tribonacci_sum_rule (signature : List Int) (n : Nat) (i : Nat) :\n \
  \ n > 3 → i ≥ 3 → i < n → \n  (tribonacci signature n).get! i = \n    (tribonacci\
  \ signature n).get! (i-3) + \n    (tribonacci signature n).get! (i-2) + \n    (tribonacci\
  \ signature n).get! (i-1) := sorry\n\n\ntheorem tribonacci_single_element (signature\
  \ : List Int) :\n  tribonacci signature 1 = signature.take 1 := sorry\n\n\ntheorem\
  \ tribonacci_monotonic (signature : List Int) (i : Nat) :\n  (∀ x ∈ signature, x\
  \ ≥ 0) →\n  i ≥ 3 → i < (tribonacci signature 10).length - 1 →\n  (tribonacci signature\
  \ 10).get! i ≤ (tribonacci signature 10).get! (i+1) := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
