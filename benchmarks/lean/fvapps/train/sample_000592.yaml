"vc-description": "Chef published a blog post, and is now receiving many queries about\
  \ it. On day $i$, he receives $Q_i$ queries. But Chef can answer at most $k$ queries\
  \ in a single day. \nChef always answers the maximum number of questions that he\
  \ can on any given day (note however that this cannot be more than $k$). The remaining\
  \ questions (if any) will be carried over to the next day.\nFortunately, after $n$\
  \ days, the queries have stopped. Chef would like to know the first day during which\
  \ he has some free time, i.e. the first day when he answered less than $k$ questions.\
  \ \n\n-----Input:-----\n- First line will contain $T$, the number of testcases.\
  \ Then the testcases follow.\n- The first line of each testcase contains two space\
  \ separated integers $n$ and $k$.\n- The second line of each testcase contains $n$\
  \ space separated integers, namely $Q_1, Q_2, ... Q_n$.\n\n-----Output:-----\nFor\
  \ each testcase, output in a single line the first day during which chef answers\
  \ less than $k$ questions. \n\n-----Constraints-----\n- $1 \\leq T \\leq 10^5$\n\
  - $1 \\leq $ sum of $n$ over all testcases $ \\leq 10^5$\n- $1 \\leq k \\leq 10^8$\n\
  - $0 \\leq Q_i \\leq 10^8$\n\n-----Subtasks-----\n- Subtask 1 - 20% points - Sum\
  \ of $Q_i$ over all testcases and days $\\leq 3 . 10^6$\n- Subtask 2 - 80% points\
  \ - Original constraints\n\n-----Sample Input:-----\n2 \n6 5 \n10 5 5 3 2 1 \n1\
  \ 1\n100\n\n-----Sample Output:-----\n6\n101\n\n-----Explanation:-----\nTest Case\
  \ 1\nOn the first day, chef answers 5 questions and leaves the remaining 5 (out\
  \ of the 10) for the future days.\nOn the second day, chef has 10 questions waiting\
  \ to be answered (5 received on the second day and 5 unanswered questions from day\
  \ 1). Chef answers 5 of these questions and leaves the remaining 5 for the future.\n\
  On the third day, chef has 10 questions waiting to be answered (5 received on the\
  \ third day and 5 unanswered questions from earlier). Chef answers 5 of these questions\
  \ and leaves the remaining 5 for later.\nOn the fourth day, chef has 8 questions\
  \ waiting to be answered (3 received on the fourth day and 5 unanswered questions\
  \ from earlier). Chef answers 5 of these questions and leaves the remaining 3 for\
  \ later.\nOn the fifth day, chef has 5 questions waiting to be answered (2 received\
  \ on the fifth day and 3 unanswered questions from earlier). Chef answers all 5\
  \ of these questions.\nOn the sixth day, chef has 1 question, which he answers.\
  \ This is the first day he answers less than 5 questions, and so the answer is 6.\n\
  Test Case 2\nChef answers 1 question a day for the first 100 days. On day 101, he\
  \ is free."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_free_time (n k : Nat) (queries : List Nat) : Nat :=\n\
  \  sorry\n"
"vc-theorems": "theorem solve_free_time_positive\n  (n k : Nat) (queries : List Nat)\n\
  \  (h1 : n > 0)\n  (h2 : k > 0)\n  (h3 : queries.length = n) :\n  solve_free_time\
  \ n k queries > 0 :=\nsorry\n\n\ntheorem solve_free_time_bounded\n  (n k : Nat)\
  \ (queries : List Nat)\n  (h1 : n > 0)\n  (h2 : k > 0)\n  (h3 : queries.length =\
  \ n) :\n  1 ≤ solve_free_time n k queries ∧ \n  solve_free_time n k queries ≤ n\
  \ + (queries.foldl (· + ·) 0)/k + 1 :=\nsorry\n\n\ntheorem solve_free_time_all_zeros\n\
  \  (n k : Nat) (queries : List Nat)\n  (h1 : n > 0)\n  (h2 : k > 0)\n  (h3 : queries.length\
  \ = n)\n  (h4 : ∀ q ∈ queries, q = 0) :\n  solve_free_time n k queries = 1 :=\n\
  sorry\n\n\ntheorem solve_free_time_first_below_k\n  (n k : Nat) (queries : List\
  \ Nat)\n  (h1 : n > 0)\n  (h2 : k > 0) \n  (h3 : queries.length = n)\n  (h4 : ∃\
  \ i < queries.length,\n    (List.take i queries).foldl (· + ·) 0 + queries[i]! <\
  \ k ∧\n    ∀ j < i, queries[j]! = 0) :\n  solve_free_time n k queries = i + 1 :=\n\
  sorry\n\n\ntheorem solve_free_time_edge_cases :\n  solve_free_time 1 1 [0] = 1 ∧\n\
  \  solve_free_time 1 5 [10] = 3 ∧\n  solve_free_time 2 3 [3,3] = 2 :=\nsorry\n\n\
  /--\ninfo: 6\n-/\n#guard_msgs in\n#eval solve_free_time 6 5 [10, 5, 5, 3, 2, 1]\n\
  \n/--\ninfo: 101\n-/\n#guard_msgs in\n#eval solve_free_time 1 1 [100]\n\n/--\ninfo:\
  \ 1\n-/\n#guard_msgs in\n#eval solve_free_time 3 2 [1, 1, 1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
