"vc-description": "The purpose of this series is developing understanding of stastical\
  \ problems in AS and A level maths. Let's get started with a simple concept in statistics:\
  \ Mutually exclusive events.\n\nThe probability of an OR event is calculated by\
  \ the following rule:\n\n`P(A || B) = P(A) + P(B) - P(A && B)`\n\nThe probability\
  \ of event A or event B happening is equal to the probability of event A plus the\
  \ probability of event B minus the probability of event A and event B happening\
  \ simultaneously.\n\nMutually exclusive events are events that cannot happen at\
  \ the same time. For example, the head and tail results of a toin coss are mutually\
  \ exclusive because they can't both happen at once. Thus, the above example for\
  \ a coin toss would look like this:\n\n`P(H || T) = P(H) + P(T) - P(H && T)`\n\n\
  Note that the probaility of tossing a coin and the result being both head and tails\
  \ is 0.\n\n`P(H || T) = (0.5) + (0.5) - (0)`\n`P(H || T) = 1`\n\nThus the probability\
  \ of a coin toss result being a heads or a tails is 1, in other words: certain.\n\
  \n\nYour task:\n\nYou are going to have to work out the probability of one roll\
  \ of a die returning two given outcomes, or rolls. Given that dice rolls are mutually\
  \ exclusive, you will have to implement the above forumala. To make this interesting\
  \ (this is a coding challenge after all), these dice are not fair and thus the probabilites\
  \ of receiving each roll is different.\n\nYou will be given a two-dimensional array\
  \ containing the number each of the results (1-6) of the die and the probability\
  \ of that roll for example `[1 , 0.23]` as well as the two rolls for example `1`\
  \ and `5`. \n\nGiven the two roll probabilities to calculate, return the probability\
  \ of a single roll of the die returning either. If the total probability of the\
  \ six rolls doesn't add up to one, there is a problem with the die; in this case,\
  \ return null. \nReturn your result as a string to two decimal places.\n\nExample\
  \ below:\n\n`1 : 1/6`\n\n`2 : 1/6`\n\n`3 : 1/6`\n\n`4 : 1/6`\n\n`5 : 1/6`\n\n`6\
  \ : 1/6`\n\nIf asked for the rolls `1` and `2` then you would need to sum the probabilities,\
  \ both `1/6` therefore `2/6` and return this. As above, you will need to return\
  \ it as a decimal and not a  fraction."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def mutuallyExclusive (dice : List (Nat × Float)) (call1 : Nat)\
  \ (call2 : Nat) : Option String := sorry\n\ndef sum_float_list (l : List Float)\
  \ : Float := sorry\n"
"vc-theorems": "theorem invalid_probabilities_returns_none :\n  ∀ (dice : List (Nat\
  \ × Float)) (call1 call2 : Nat),\n  sum_float_list (dice.map (fun p => p.2)) < 0.9\
  \ →\n  mutuallyExclusive dice call1 call2 = none :=\nsorry\n\n\ntheorem valid_probabilities_sum_correctly\
  \ :\n  mutuallyExclusive [(1, 0.2), (2, 0.2), (3, 0.2), (4, 0.2), (5, 0.2)] 1 2\
  \ = some \"0.40\" ∧\n  mutuallyExclusive [(1, 0.3), (2, 0.3), (3, 0.4)] 1 2 = some\
  \ \"0.60\" :=\nsorry\n\n/--\ninfo: None\n-/\n#guard_msgs in\n#eval mutually_exclusive\
  \ *test1\n\n/--\ninfo: '0.30'\n-/\n#guard_msgs in\n#eval mutually_exclusive *test2\n\
  \n/--\ninfo: '0.20'\n-/\n#guard_msgs in\n#eval mutually_exclusive *test3\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
