vc-description: |-
  I always thought that my old friend John was rather richer than he looked, but I never knew exactly how much money he actually had. One day (as I was plying him with questions) he said:

  * "Imagine I have between `m` and `n` Zloty..." (or did he say Quetzal? I can't remember!)
  * "If I were to buy **9** cars costing `c` each, I'd only have 1 Zloty (or was it Meticals?) left."
  * "And if I were to buy **7** boats at `b` each, I'd only have 2 Ringglets (or was it Zloty?) left."

  Could you tell me in each possible case:

  1. how much money `f` he could possibly have ?
  2. the cost `c` of a car?
  3. the cost `b` of a boat?

  So, I will have a better idea about his fortune. Note that if `m-n` is big enough, you might have a lot of possible answers. 

  Each answer should be given as `["M: f", "B: b", "C: c"]` and all the answers as `[ ["M: f", "B: b", "C: c"], ... ]`. "M" stands for money, "B" for boats, "C" for cars.

  **Note:** `m, n, f, b, c` are positive integers, where `0 <= m <= n` or `m >= n >= 0`. `m` and `n` are inclusive.


  ## Examples:
  ```
  howmuch(1, 100)      => [["M: 37", "B: 5", "C: 4"], ["M: 100", "B: 14", "C: 11"]]
  howmuch(1000, 1100)  => [["M: 1045", "B: 149", "C: 116"]]
  howmuch(10000, 9950) => [["M: 9991", "B: 1427", "C: 1110"]]
  howmuch(0, 200)      => [["M: 37", "B: 5", "C: 4"], ["M: 100", "B: 14", "C: 11"], ["M: 163", "B: 23", "C: 18"]]
  ```

  Explanation of the results for `howmuch(1, 100)`:

  * In the first answer his possible fortune is **37**:
   * so he can buy 7 boats each worth 5: `37 - 7 * 5 = 2`
   * or he can buy 9 cars worth 4 each: `37 - 9 * 4 = 1`
  * The second possible answer is **100**:
   * he can buy 7 boats each worth 14: `100 - 7 * 14 = 2`
   * or he can buy 9 cars worth 11: `100 - 9 * 11 = 1`

  # Note
  See "Sample Tests" to know the format of the return.
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def howmuch (m n : Int) : List (List String) := sorry

  theorem howmuch_result_format {m n : Int} (h : -1000 ≤ m ∧ m ≤ 1000) (h' : -1000 ≤ n ∧ n ≤ 1000) :
    let result := howmuch m n
    ∀ item ∈ result,
      item.length = 3 ∧
      (∃ m_val b_val c_val : Int,
        item.get! 0 = s!"M: {m_val}" ∧
        item.get! 1 = s!"B: {b_val}" ∧
        item.get! 2 = s!"C: {c_val}") := sorry
vc-theorems: |
  theorem howmuch_values_satisfy_conditions {m n : Int} (h : -1000 ≤ m ∧ m ≤ 1000) (h' : -1000 ≤ n ∧ n ≤ 1000) :
    let result := howmuch m n
    ∀ item ∈ result,
      let m_val := (item.get! 0).drop 3 |>.toInt!
      let b_val := (item.get! 1).drop 3 |>.toInt!
      let c_val := (item.get! 2).drop 3 |>.toInt!
      m_val % 7 = 2 ∧
      m_val % 9 = 1 ∧
      m_val / 7 = b_val ∧  
      m_val / 9 = c_val ∧
      min m n ≤ m_val ∧ m_val ≤ max m n := sorry


  theorem howmuch_identical_inputs {x : Int} (h : -1000 ≤ x ∧ x ≤ 1000) :
    let result := howmuch x x
    ∀ item ∈ result,
      ((item.get! 0).drop 3 |>.toInt!) = x := sorry

  /--
  info: [['M: 37', 'B: 5', 'C: 4'], ['M: 100', 'B: 14', 'C: 11']]
  -/
  #guard_msgs in
  #eval howmuch 1 100

  /--
  info: [['M: 1045', 'B: 149', 'C: 116']]
  -/
  #guard_msgs in
  #eval howmuch 1000 1100

  /--
  info: [['M: 37', 'B: 5', 'C: 4'], ['M: 100', 'B: 14', 'C: 11'], ['M: 163', 'B: 23', 'C: 18']]
  -/
  #guard_msgs in
  #eval howmuch 0 200
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
