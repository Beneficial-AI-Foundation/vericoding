"vc-description": "I always thought that my old friend John was rather richer than\
  \ he looked, but I never knew exactly how much money he actually had. One day (as\
  \ I was plying him with questions) he said:\n\n* \"Imagine I have between `m` and\
  \ `n` Zloty...\" (or did he say Quetzal? I can't remember!)\n* \"If I were to buy\
  \ **9** cars costing `c` each, I'd only have 1 Zloty (or was it Meticals?) left.\"\
  \n* \"And if I were to buy **7** boats at `b` each, I'd only have 2 Ringglets (or\
  \ was it Zloty?) left.\"\n\nCould you tell me in each possible case:\n\n1. how much\
  \ money `f` he could possibly have ?\n2. the cost `c` of a car?\n3. the cost `b`\
  \ of a boat?\n\nSo, I will have a better idea about his fortune. Note that if `m-n`\
  \ is big enough, you might have a lot of possible answers. \n\nEach answer should\
  \ be given as `[\"M: f\", \"B: b\", \"C: c\"]` and all the answers as `[ [\"M: f\"\
  , \"B: b\", \"C: c\"], ... ]`. \"M\" stands for money, \"B\" for boats, \"C\" for\
  \ cars.\n\n**Note:** `m, n, f, b, c` are positive integers, where `0 <= m <= n`\
  \ or `m >= n >= 0`. `m` and `n` are inclusive.\n\n\n## Examples:\n```\nhowmuch(1,\
  \ 100)      => [[\"M: 37\", \"B: 5\", \"C: 4\"], [\"M: 100\", \"B: 14\", \"C: 11\"\
  ]]\nhowmuch(1000, 1100)  => [[\"M: 1045\", \"B: 149\", \"C: 116\"]]\nhowmuch(10000,\
  \ 9950) => [[\"M: 9991\", \"B: 1427\", \"C: 1110\"]]\nhowmuch(0, 200)      => [[\"\
  M: 37\", \"B: 5\", \"C: 4\"], [\"M: 100\", \"B: 14\", \"C: 11\"], [\"M: 163\", \"\
  B: 23\", \"C: 18\"]]\n```\n\nExplanation of the results for `howmuch(1, 100)`:\n\
  \n* In the first answer his possible fortune is **37**:\n * so he can buy 7 boats\
  \ each worth 5: `37 - 7 * 5 = 2`\n * or he can buy 9 cars worth 4 each: `37 - 9\
  \ * 4 = 1`\n* The second possible answer is **100**:\n * he can buy 7 boats each\
  \ worth 14: `100 - 7 * 14 = 2`\n * or he can buy 9 cars worth 11: `100 - 9 * 11\
  \ = 1`\n\n# Note\nSee \"Sample Tests\" to know the format of the return."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def howmuch (m n : Int) : List (List String) := sorry\n\ntheorem\
  \ howmuch_result_format {m n : Int} (h : -1000 ≤ m ∧ m ≤ 1000) (h' : -1000 ≤ n ∧\
  \ n ≤ 1000) :\n  let result := howmuch m n\n  ∀ item ∈ result,\n    item.length\
  \ = 3 ∧\n    (∃ m_val b_val c_val : Int,\n      item.get! 0 = s!\"M: {m_val}\" ∧\n\
  \      item.get! 1 = s!\"B: {b_val}\" ∧\n      item.get! 2 = s!\"C: {c_val}\") :=\
  \ sorry\n"
"vc-theorems": "theorem howmuch_values_satisfy_conditions {m n : Int} (h : -1000 ≤\
  \ m ∧ m ≤ 1000) (h' : -1000 ≤ n ∧ n ≤ 1000) :\n  let result := howmuch m n\n  ∀\
  \ item ∈ result,\n    let m_val := (item.get! 0).drop 3 |>.toInt!\n    let b_val\
  \ := (item.get! 1).drop 3 |>.toInt!\n    let c_val := (item.get! 2).drop 3 |>.toInt!\n\
  \    m_val % 7 = 2 ∧\n    m_val % 9 = 1 ∧\n    m_val / 7 = b_val ∧  \n    m_val\
  \ / 9 = c_val ∧\n    min m n ≤ m_val ∧ m_val ≤ max m n := sorry\n\n\ntheorem howmuch_identical_inputs\
  \ {x : Int} (h : -1000 ≤ x ∧ x ≤ 1000) :\n  let result := howmuch x x\n  ∀ item\
  \ ∈ result,\n    ((item.get! 0).drop 3 |>.toInt!) = x := sorry\n\n/--\ninfo: [['M:\
  \ 37', 'B: 5', 'C: 4'], ['M: 100', 'B: 14', 'C: 11']]\n-/\n#guard_msgs in\n#eval\
  \ howmuch 1 100\n\n/--\ninfo: [['M: 1045', 'B: 149', 'C: 116']]\n-/\n#guard_msgs\
  \ in\n#eval howmuch 1000 1100\n\n/--\ninfo: [['M: 37', 'B: 5', 'C: 4'], ['M: 100',\
  \ 'B: 14', 'C: 11'], ['M: 163', 'B: 23', 'C: 18']]\n-/\n#guard_msgs in\n#eval howmuch\
  \ 0 200\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
