"vc-description": "*** Nova polynomial from roots*** \n\nThis kata is from a series\
  \ on polynomial handling. ( [#1](http://www.codewars.com/kata/nova-polynomial-1-add-1)\
  \   [#2](http://www.codewars.com/kata/570eb07e127ad107270005fe)  [#3](http://www.codewars.com/kata/5714041e8807940ff3001140\
  \ )   [#4](http://www.codewars.com/kata/571a2e2df24bdfd4e20001f5))\n\nConsider a\
  \ polynomial in a list where each element in the list element corresponds to the\
  \ factors. The factor order is the position in the list. The first element is the\
  \ zero order factor (the constant).\n\np = [a0, a1, a2, a3] signifies the polynomial\
  \ a0 + a1x + a2x^2 + a3*x^3\n\nIn this kata create the polynomial from a list of\
  \ roots:\n\n[r0, r1 ,r2, r3 ]\n\np = (x-r0)(x-r1)(x-r2)(x-r3)\n\nnote: no roots\
  \ should return the identity polynomial.\n\n```python \npoly_from_roots([4]) = [-4,\
  \ 1]\npoly_from_roots([0, 0, 0, 0] ) = [0, 0, 0, 0, 1]\npoly_from_roots([]) = [1]\n\
  ```\nThe first katas of this series is preloaded in the code and can be used: [poly_add](http://www.codewars.com/kata/570eb07e127ad107270005fe)\
  \ [poly_multiply](http://www.codewars.com/kata/570eb07e127ad107270005fe)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def poly_from_roots (roots : List float) : List float := sorry\n\
  \ndef evaluatePolynomial (coeffs : List float) (x : float) : float := sorry\n"
"vc-theorems": "theorem poly_from_roots_length {roots : List float} \n  (h : ∀ x ∈\
  \ roots, x.value ≥ -10 ∧ x.value ≤ 10) :\n  (poly_from_roots roots).length = roots.length\
  \ + 1 := sorry\n\n\ntheorem poly_from_roots_last_coeff {roots : List float}\n  (h\
  \ : ∀ x ∈ roots, x.value ≥ -10 ∧ x.value ≤ 10) :\n  let result := poly_from_roots\
  \ roots\n  (result.getLast (sorry)).value = float.one.value := sorry\n\n\ntheorem\
  \ poly_evaluates_to_zero {roots : List float} (root : float)\n  (h1 : ∀ x ∈ roots,\
  \ x.value ≥ -10 ∧ x.value ≤ 10)\n  (h2 : root ∈ roots) :\n  let result := poly_from_roots\
  \ roots\n  evaluatePolynomial result root = float.zero := sorry\n\n\ntheorem empty_roots\
  \ :\n  poly_from_roots [] = [float.one] := sorry\n\n\ntheorem zero_roots {n : Nat}\
  \ (h : n > 0 ∧ n ≤ 10) :\n  poly_from_roots (List.replicate n float.zero) = List.replicate\
  \ n float.zero ++ [float.one] := sorry\n\n/--\ninfo: [-4, 1]\n-/\n#guard_msgs in\n\
  #eval poly_from_roots [4]\n\n/--\ninfo: [0, 0, 0, 0, 1]\n-/\n#guard_msgs in\n#eval\
  \ poly_from_roots [0, 0, 0, 0]\n\n/--\ninfo: [1]\n-/\n#guard_msgs in\n#eval poly_from_roots\
  \ []\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
