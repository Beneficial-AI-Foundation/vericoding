"vc-description": "As Will is stuck in the Upside Down, he can still communicate with\
  \ his mom, Joyce, through the Christmas lights (he can turn them on and off with\
  \ his mind). He can't directly tell his mom where he is, because the monster that\
  \ took him to the Upside Down will know and relocate him.  [Image] \n\nThus, he\
  \ came up with a puzzle to tell his mom his coordinates. His coordinates are the\
  \ answer to the following problem.\n\nA string consisting only of parentheses ('('\
  \ and ')') is called a bracket sequence. Some bracket sequence are called correct\
  \ bracket sequences. More formally:  Empty string is a correct bracket sequence.\
  \  if s is a correct bracket sequence, then (s) is also a correct bracket sequence.\
  \  if s and t are correct bracket sequences, then st (concatenation of s and t)\
  \ is also a correct bracket sequence. \n\nA string consisting of parentheses and\
  \ question marks ('?') is called pretty if and only if there's a way to replace\
  \ each question mark with either '(' or ')' such that the resulting string is a\
  \ non-empty correct bracket sequence.\n\nWill gave his mom a string s consisting\
  \ of parentheses and question marks (using Morse code through the lights) and his\
  \ coordinates are the number of pairs of integers (l, r) such that 1 ≤ l ≤ r ≤ |s|\
  \ and the string s_{l}s_{l} + 1... s_{r} is pretty, where s_{i} is i-th character\
  \ of s.\n\nJoyce doesn't know anything about bracket sequences, so she asked for\
  \ your help.\n\n\n-----Input-----\n\nThe first and only line of input contains string\
  \ s, consisting only of characters '(', ')' and '?' (2 ≤ |s| ≤ 5000).\n\n\n-----Output-----\n\
  \nPrint the answer to Will's puzzle in the first and only line of output.\n\n\n\
  -----Examples-----\nInput\n((?))\n\nOutput\n4\n\nInput\n??()??\n\nOutput\n7\n\n\n\
  \n-----Note-----\n\nFor the first sample testcase, the pretty substrings of s are:\
  \  \"(?\" which can be transformed to \"()\".  \"?)\" which can be transformed to\
  \ \"()\".  \"((?)\" which can be transformed to \"(())\".  \"(?))\" which can be\
  \ transformed to \"(())\".  \n\nFor the second sample testcase, the pretty substrings\
  \ of s are:  \"??\" which can be transformed to \"()\".  \"()\".  \"??()\" which\
  \ can be transformed to \"()()\".  \"?()?\" which can be transformed to \"(())\"\
  .  \"??\" which can be transformed to \"()\".  \"()??\" which can be transformed\
  \ to \"()()\".  \"??()??\" which can be transformed to \"()()()\"."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_pretty_substrings (s: String) : Nat :=\n  sorry\n"
"vc-theorems": "theorem count_non_negative (s: String) : \n  count_pretty_substrings\
  \ s ≥ 0 :=\n  sorry\n\n\ntheorem count_bounded_by_length (s: String) :\n  let n\
  \ := s.length\n  count_pretty_substrings s ≤ n * (n + 1) / 2 :=\n  sorry \n\n\n\
  theorem balanced_parens_pretty (n: Nat) :\n  n > 0 → \n  let s := String.mk (List.replicate\
  \ n '(' ++ List.replicate n ')')\n  count_pretty_substrings s ≥ 1 := \n  sorry\n\
  \n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval count_pretty_substrings \"((?))\"\n\n\
  /--\ninfo: 7\n-/\n#guard_msgs in\n#eval count_pretty_substrings \"??()??\"\n\n/--\n\
  info: 1\n-/\n#guard_msgs in\n#eval count_pretty_substrings \"??\"\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded_and_plausible"
