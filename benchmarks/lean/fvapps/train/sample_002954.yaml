"vc-description": "Your goal is to return multiplication table for ```number``` that\
  \ is always an integer from 1 to 10.\n\nFor example, a multiplication table (string)\
  \ for ```number == 5``` looks like below:\n\n```\n1 * 5 = 5\n2 * 5 = 10\n3 * 5 =\
  \ 15\n4 * 5 = 20\n5 * 5 = 25\n6 * 5 = 30\n7 * 5 = 35\n8 * 5 = 40\n9 * 5 = 45\n10\
  \ * 5 = 50\n```\n\nP. S. You can use ```\\n``` in string to jump to the next line."
"vc-preamble": "import Imports.AllImports\n\ndef multiTable (n : Nat) : String :=\
  \ sorry\n\nstructure MultiTableOutput where\n  lines : List String\n  deriving Inhabited\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def String.count_spaces (s : String) : Nat := sorry\ndef parseMultiTable\
  \ (s : String) : MultiTableOutput := sorry\n"
"vc-theorems": "theorem multi_table_length (n : Nat) (h : n > 0) :\n  (parseMultiTable\
  \ (multiTable n)).lines.length = 10 := sorry\n\n\ntheorem multi_table_format (n\
  \ : Nat) (h : n > 0) (i : Nat) (h2 : i > 0 ∧ i ≤ 10) :\n  let output := parseMultiTable\
  \ (multiTable n)\n  let line := output.lines[i-1]!\n  ∃ num1 num2 result : String,\n\
  \    line = num1 ++ \" * \" ++ num2 ++ \" = \" ++ result ∧\n    String.toNat! num1\
  \ = i ∧\n    String.toNat! num2 = n ∧\n    String.toNat! result = i * n := sorry\n\
  \n\ntheorem multi_table_no_trailing_newline (n : Nat) (h : n > 0) :\n  let s :=\
  \ multiTable n\n  s.length > 0 ∧ s.data[s.length - 1]! ≠ '\\n' := sorry\n\n\ntheorem\
  \ multi_table_spacing (n : Nat) (h : n > 0) (line : String) \n  (h2 : line ∈ (parseMultiTable\
  \ (multiTable n)).lines) :\n  line.count_spaces = 4 := sorry\n\n/--\ninfo: '1 *\
  \ 5 = 5\\n2 * 5 = 10\\n3 * 5 = 15\\n4 * 5 = 20\\n5 * 5 = 25\\n6 * 5 = 30\\n7 * 5\
  \ = 35\\n8 * 5 = 40\\n9 * 5 = 45\\n10 * 5 = 50'\n-/\n#guard_msgs in\n#eval multi_table\
  \ 5\n\n/--\ninfo: '1 * 1 = 1\\n2 * 1 = 2\\n3 * 1 = 3\\n4 * 1 = 4\\n5 * 1 = 5\\n6\
  \ * 1 = 6\\n7 * 1 = 7\\n8 * 1 = 8\\n9 * 1 = 9\\n10 * 1 = 10'\n-/\n#guard_msgs in\n\
  #eval multi_table 1\n\n/--\ninfo: '1 * 3 = 3\\n2 * 3 = 6\\n3 * 3 = 9\\n4 * 3 = 12\\\
  n5 * 3 = 15\\n6 * 3 = 18\\n7 * 3 = 21\\n8 * 3 = 24\\n9 * 3 = 27\\n10 * 3 = 30'\n\
  -/\n#guard_msgs in\n#eval multi_table 3\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
