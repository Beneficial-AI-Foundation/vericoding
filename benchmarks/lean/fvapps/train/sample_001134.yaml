"vc-description": "Guddu was participating in a programming contest. He only had one\
  \ problem left when his mother called him for dinner. Guddu is well aware how angry\
  \ his mother could get if he was late for dinner and he did not want to sleep on\
  \ an empty stomach, so he had to leave that last problem to you. Can you solve it\
  \ on his behalf?\nFor a given sequence of positive integers $A_1, A_2, \\ldots,\
  \ A_N$, you are supposed to find the number of triples $(i, j, k)$ such that $1\
  \ \\le i < j \\le k \\le N$ and\nAi⊕Ai+1⊕…⊕Aj−1=Aj⊕Aj+1⊕…⊕Ak,Ai⊕Ai+1⊕…⊕Aj−1=Aj⊕Aj+1⊕…⊕Ak,A_i\
  \ \\oplus A_{i+1} \\oplus \\ldots \\oplus A_{j-1} = A_j \\oplus A_{j+1} \\oplus\
  \ \\ldots \\oplus A_k \\,,\nwhere $\\oplus$ denotes bitwise XOR.\n\n-----Input-----\n\
  - The first line of the input contains a single integer $T$ denoting the number\
  \ of test cases. The description of $T$ test cases follows.\n- The first line of\
  \ each test case contains a single integer $N$.\n- The second line contains $N$\
  \ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nFor each\
  \ test case, print a single line containing one integer ― the number of triples.\n\
  \n-----Constraints-----\n- $1 \\le T \\le 10$\n- $2 \\le N \\le 10^5$\n- $1 \\le\
  \ A_i \\le 10^6$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (20 points):\n\
  - $1 \\le T \\le 5$\n- $1 \\le N \\le 100$\nSubtask #2 (30 points):\n- $1 \\le T\
  \ \\le 5$\n- $1 \\le N \\le 1,000$\nSubtask #3 (50 points): original constraints\n\
  \n-----Example Input-----\n1\n3\n5 2 7\n\n-----Example Output-----\n2\n\n-----Explanation-----\n\
  Example case 1: The triples are $(1, 3, 3)$, since $5 \\oplus 2 = 7$, and $(1, 2,\
  \ 3)$, since $5 = 2 \\oplus 7$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_ands (s : String) : Nat := sorry\n\ntheorem count_ands_nonnegative\
  \ {words : List String} : \n  count_ands (String.join (List.intersperse \" \" words))\
  \ ≥ 0 := sorry\n"
"vc-theorems": "theorem count_ands_upper_bound {words : List String} :\n  count_ands\
  \ (String.join (List.intersperse \" \" words)) ≤ words.length := sorry\n\n\ntheorem\
  \ count_ands_repetition {n : Nat} :\n  count_ands (String.join (List.replicate n\
  \ \" and \")) = n := sorry\n\n\ntheorem count_ands_case_insensitive (s : String)\
  \ :\n  count_ands (s.toLower) = count_ands (s.toUpper) := sorry\n\n\ntheorem count_ands_empty\
  \ :\n  count_ands \"\" = 0 := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
