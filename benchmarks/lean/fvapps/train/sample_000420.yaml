vc-description: |-
  Given a string S, count the number of distinct, non-empty subsequences of S .
  Since the result may be large, return the answer modulo 10^9 + 7.
   
  Example 1:
  Input: "abc"
  Output: 7
  Explanation: The 7 distinct subsequences are "a", "b", "c", "ab", "ac", "bc", and "abc".


  Example 2:
  Input: "aba"
  Output: 6
  Explanation: The 6 distinct subsequences are "a", "b", "ab", "ba", "aa" and "aba".


  Example 3:
  Input: "aaa"
  Output: 3
  Explanation: The 3 distinct subsequences are "a", "aa" and "aaa".



   
   
  Note:

  S contains only lowercase letters.
  1 <= S.length <= 2000
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def distinctSubseqCount (s : String) : Nat :=
    sorry
vc-theorems: |
  theorem output_bounds {s : String} (h : s.length > 0) : 
    let result := distinctSubseqCount s
    0 ≤ result ∧ result < 10^9 + 7 :=
    sorry


  theorem all_same_char {s : String} (h1 : s.length > 0) 
    (h2 : ∀ i : String.Pos, s.get i = 'a') :
    distinctSubseqCount s = s.length :=
    sorry


  theorem length_property {s : String} (h : s.length > 0) :
    distinctSubseqCount s ≥ s.length :=
    sorry

  /--
  info: 7
  -/
  #guard_msgs in
  #eval distinct_subseq_count "abc"

  /--
  info: 6
  -/
  #guard_msgs in
  #eval distinct_subseq_count "aba"

  /--
  info: 3
  -/
  #guard_msgs in
  #eval distinct_subseq_count "aaa"
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded
