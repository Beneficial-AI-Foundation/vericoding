"vc-description": "Suppose an array sorted in ascending order is rotated at some pivot\
  \ unknown to you beforehand.\n\n(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).\n\
  \nYou are given a target value to search. If found in the array return its index,\
  \ otherwise return -1.\n\nYou may assume no duplicate exists in the array.\n\nYour\
  \ algorithm's runtime complexity must be in the order of O(log n).\n\nExample 1:\n\
  \n\nInput: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4\n\n\nExample 2:\n\n\nInput:\
  \ nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def search (arr : List Int) (target : Int) : Int :=\n  sorry\n"
"vc-theorems": "theorem search_returns_valid_index (nums : List Int) (target : Int)\
  \ \n    (h1 : nums.length > 0)\n    (h2 : ∀ (i j : Fin nums.length), i.val < j.val\
  \ → nums.get i < nums.get j)\n    (h3 : ∀ (i j : Fin nums.length), i ≠ j → nums.get\
  \ i ≠ nums.get j) :\n    let rotatePoint := nums.length / 2\n    let rotated :=\
  \ nums.drop rotatePoint ++ nums.take rotatePoint\n    let result := search rotated\
  \ target\n    (rotated.contains target → \n      result ≥ 0 ∧ result < rotated.length\
  \ ∧ \n      ∃ (idx : Fin rotated.length), idx.val = result ∧ rotated.get idx = target)\
  \ ∧\n    (¬rotated.contains target → result = -1) :=\n  sorry\n\n\ntheorem search_finds_all_elements\
  \ (nums : List Int) \n    (h1 : nums.length > 0)\n    (h2 : ∀ (i j : Fin nums.length),\
  \ i.val < j.val → nums.get i < nums.get j)\n    (h3 : ∀ (i j : Fin nums.length),\
  \ i ≠ j → nums.get i ≠ nums.get j) :\n    let rotatePoint := nums.length / 2\n \
  \   let rotated := nums.drop rotatePoint ++ nums.take rotatePoint\n    ∀ (i : Fin\
  \ rotated.length), search rotated (rotated.get i) = i.val :=\n  sorry\n\n\ntheorem\
  \ search_edge_cases_empty :\n  search [] 1 = -1 := \n  sorry\n\n\ntheorem search_edge_cases_singleton_found\
  \ : \n  search [1] 1 = 0 :=\n  sorry\n\n\ntheorem search_edge_cases_singleton_not_found\
  \ :\n  search [1] 2 = -1 :=\n  sorry\n\n\ntheorem search_edge_cases_pair_first :\n\
  \  search [1, 2] 1 = 0 :=\n  sorry\n\n\ntheorem search_edge_cases_pair_rotated :\n\
  \  search [2, 1] 1 = 1 :=\n  sorry\n\n\ntheorem search_edge_cases_triple :\n  search\
  \ [1, 2, 3] 2 = 1 :=\n  sorry\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval search\
  \ [4, 5, 6, 7, 0, 1, 2] 0\n\n/--\ninfo: -1\n-/\n#guard_msgs in\n#eval search [4,\
  \ 5, 6, 7, 0, 1, 2] 3\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval search [1] 1\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
