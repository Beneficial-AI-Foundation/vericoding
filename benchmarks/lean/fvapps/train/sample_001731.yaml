"vc-description": "Create a function that finds the largest palindromic number made\
  \ from the product of **at least 2** of the given arguments.\n\n### Notes\n\n* Only\
  \ non-negative numbers will be given in the argument\n* You don't need to use all\
  \ the digits of the products\n* Single digit numbers are considered palindromes\n\
  * Optimization is needed: dealing with ones and zeros in a smart way will help a\
  \ lot\n\n\n\n\n## Examples\n\n```\n[937, 113] --> 81518\n```\nAs `937 * 113 = 105881`\
  \ and the largest palindromic number that can be arranged from the digits of result\
  \ is: `81518`\n\n\nAnother one:\n\n```\n[57, 62, 23] --> 82128\n\n             product\
  \     palindrome\n57 * 62      = 3534   -->  353\n57 * 23      = 1311   -->  131\n\
  62 * 23      = 1426   -->  6\n57 * 62 * 23 = 81282  -->  82128\n```\n\nOne more:\n\
  ```\n[15, 125, 8] --> 8\n\n             product     palindrome\n15 * 125     = 1875\
  \   -->  8\n15 * 8       = 120    -->  2\n125 * 8      = 1000   -->  1\n15 * 125\
  \ * 8 = 15000  -->  5\n```"
"vc-preamble": "import Imports.AllImports\n\ndef largest_palindrom_from (n : Nat)\
  \ : Nat := sorry\n\ndef numeric_palindrome (arr : List Nat) : Nat := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def reverseString (s : String) : String := sorry\n\ntheorem largest_palindrom_from_is_palindrome\
  \ (n : Nat) \n  (h1 : 1 ≤ n) (h2 : n ≤ 10^6) :\n  let result := toString (largest_palindrom_from\
  \ n)\n  result = reverseString result := sorry\n"
"vc-theorems": "theorem largest_palindrom_from_uses_input_digits (n : Nat)\n  (h1\
  \ : 1 ≤ n) (h2 : n ≤ 10^6) :\n  let result := toString (largest_palindrom_from n)\n\
  \  ∀ d : Char, d ∈ result.data → d ∈ (toString n).data := sorry\n\n\ntheorem numeric_palindrome_is_palindrome\
  \ (nums : List Nat) \n  (h1 : nums.length ≥ 2) (h2 : nums.length ≤ 5)\n  (h3 : ∀\
  \ x ∈ nums, 2 ≤ x ∧ x ≤ 1000) :\n  let result := toString (numeric_palindrome nums)\n\
  \  result = reverseString result := sorry\n\n\ntheorem numeric_palindrome_bound\
  \ (nums : List Nat)\n  (h1 : nums.length ≥ 2) (h2 : nums.length ≤ 5)\n  (h3 : ∀\
  \ x ∈ nums, 2 ≤ x ∧ x ≤ 1000) :\n  numeric_palindrome nums ≤ nums.foldr (·*·) 1\
  \ := sorry\n\n\ntheorem numeric_palindrome_with_ones (nums : List Nat)\n  (h1 :\
  \ nums.length ≥ 3) (h2 : nums.length ≤ 6)\n  (h3 : ∀ i, i < nums.length - 1 → nums.get\
  \ ⟨i, sorry⟩ = 1)\n  (h4 : nums.getLast? = some 2) :\n  let result := toString (numeric_palindrome\
  \ nums)\n  result = reverseString result := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
