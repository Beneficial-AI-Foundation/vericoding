"vc-description": "Given an array nums of integers, we need to find the maximum possible\
  \ sum of elements of the array such that it is divisible by three.\n\n\n \nExample\
  \ 1:\nInput: nums = [3,6,5,1,8]\nOutput: 18\nExplanation: Pick numbers 3, 6, 1 and\
  \ 8 their sum is 18 (maximum sum divisible by 3).\nExample 2:\nInput: nums = [4]\n\
  Output: 0\nExplanation: Since 4 is not divisible by 3, do not pick any number.\n\
  \nExample 3:\nInput: nums = [1,2,3,4,4]\nOutput: 12\nExplanation: Pick numbers 1,\
  \ 3, 4 and 4 their sum is 12 (maximum sum divisible by 3).\n\n \nConstraints:\n\n\
  1 <= nums.length <= 4 * 10^4\n1 <= nums[i] <= 10^4"
"vc-preamble": "import Imports.AllImports\n\ndef maxSumDivThree (nums: List Nat) :\
  \ Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sum (nums: List Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem maxSumDivThree_divisible_by_3 (nums: List Nat) :\n  maxSumDivThree\
  \ nums % 3 = 0 :=\n  sorry\n\n\ntheorem maxSumDivThree_bounded (nums: List Nat)\
  \ :\n  maxSumDivThree nums ≤ sum nums :=\n  sorry\n\n\ntheorem maxSumDivThree_nonnegative\
  \ (nums: List Nat) :\n  maxSumDivThree nums ≥ 0 :=\n  sorry\n\n\ntheorem maxSumDivThree_all_divisible\
  \ (nums: List Nat) \n  (h: ∀ n ∈ nums, n % 3 = 0) :\n  maxSumDivThree nums = sum\
  \ nums :=\n  sorry\n\n\ntheorem maxSumDivThree_none_divisible (nums: List Nat)\n\
  \  (h1: nums ≠ []) \n  (h2: ∀ n ∈ nums, n % 3 ≠ 0) :\n  maxSumDivThree nums ≤ sum\
  \ nums ∧ \n  maxSumDivThree nums % 3 = 0 :=\n  sorry\n\n\ntheorem maxSumDivThree_monotonic\
  \ (nums: List Nat) :\n  maxSumDivThree nums ≤ maxSumDivThree (nums ++ [3]) :=\n\
  \  sorry\n\n/--\ninfo: 18\n-/\n#guard_msgs in\n#eval maxSumDivThree [3, 6, 5, 1,\
  \ 8]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval maxSumDivThree [4]\n\n/--\ninfo:\
  \ 12\n-/\n#guard_msgs in\n#eval maxSumDivThree [1, 2, 3, 4, 4]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
