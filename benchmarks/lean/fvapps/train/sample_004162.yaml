"vc-description": "We have two consecutive integers k1 and k2, k2 = k1 + 1\n\nWe need\
  \ to calculate the lowest integer `n`, such that:\nthe values nk1 and nk2 have the\
  \ same digits but in different order.\n\nE.g.# 1:\n```\nk1 = 100\nk2 = 101\nn =\
  \ 8919\n#Because 8919 * 100 = 891900 \nand      8919 * 101 = 900819\n```\n\nE.g.#\
  \ 2:\n```\nk1 = 325\nk2 = 326\nn = 477\n#Because 477 * 325 = 155025\nand      477\
  \ * 326 = 155502\n```\n\nYour task is to prepare a function that will receive the\
  \ value of `k` and outputs the value of `n`.\n\nThe examples given above will be:\n\
  ```python\nfind_lowest_int(100) === 8919\nfind_lowest_int(325) ===  477\n```\nFeatures\
  \ of the random tests\n```\n10 < k < 10.000.000.000.000.000 (For Python, Ruby and\
  \ Haskell)\n10 < k < 1.000.000.000  (For Javascript 1e9)\n```\nEnjoy it!!\n\nRuby\
  \ and Javascript versions will be released soon."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_lowest_int (k : Nat) : Nat := sorry\n\ndef digits_to_sorted_list\
  \ (n : Nat) : List Nat := sorry\n"
"vc-theorems": "theorem find_lowest_int_positive (k : Nat) (h : k > 0) : \n  find_lowest_int\
  \ k > 0 := sorry\n\n\n\n\ntheorem find_lowest_int_products_different (k : Nat) (h\
  \ : k > 0) :\n  find_lowest_int k * k â‰  find_lowest_int k * (k + 1) := sorry\n\n\
  /--\ninfo: 8919\n-/\n#guard_msgs in\n#eval find_lowest_int 100\n\n/--\ninfo: 477\n\
  -/\n#guard_msgs in\n#eval find_lowest_int 325\n\n/--\ninfo: 2394\n-/\n#guard_msgs\
  \ in\n#eval find_lowest_int 599\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
