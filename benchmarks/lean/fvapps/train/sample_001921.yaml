"vc-description": "It is so boring in the summer holiday, isn't it? So Alice and Bob\
  \ have invented a new game to play. The rules are as follows. First, they get a\
  \ set of n distinct integers. And then they take turns to make the following moves.\
  \ During each move, either Alice or Bob (the player whose turn is the current) can\
  \ choose two distinct integers x and y from the set, such that the set doesn't contain\
  \ their absolute difference |x - y|. Then this player adds integer |x - y| to the\
  \ set (so, the size of the set increases by one).\n\nIf the current player has no\
  \ valid move, he (or she) loses the game. The question is who will finally win the\
  \ game if both players play optimally. Remember that Alice always moves first.\n\
  \n\n-----Input-----\n\nThe first line contains an integer n (2 ≤ n ≤ 100) — the\
  \ initial number of elements in the set. The second line contains n distinct space-separated\
  \ integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^9) — the elements of the set.\n\n\
  \n-----Output-----\n\nPrint a single line with the winner's name. If Alice wins\
  \ print \"Alice\", otherwise print \"Bob\" (without quotes).\n\n\n-----Examples-----\n\
  Input\n2\n2 3\n\nOutput\nAlice\n\nInput\n2\n5 3\n\nOutput\nAlice\n\nInput\n3\n5\
  \ 6 7\n\nOutput\nBob\n\n\n\n-----Note-----\n\nConsider the first test sample. Alice\
  \ moves first, and the only move she can do is to choose 2 and 3, then to add 1\
  \ to the set. Next Bob moves, there is no valid move anymore, so the winner is Alice."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def determine_winner (n : Nat) (numbers : List Nat) : String :=\
  \ sorry\n\ndef gcd (a b : Nat) : Nat := sorry\n\n-- Winner is either Alice or Bob"
"vc-theorems": "theorem determine_winner_valid (n : Nat) (numbers : List Nat) \n \
  \   (h1 : n > 0) (h2 : n ≤ 100)\n    (h3 : ∀ x ∈ numbers, x > 0 ∧ x ≤ 1000)\n  \
  \  (h4 : ¬numbers.isEmpty) (h5 : numbers.length ≤ 100) :\n    determine_winner n\
  \ numbers = \"Alice\" ∨ determine_winner n numbers = \"Bob\" := sorry\n\n-- Winner\
  \ is determined by GCD calculation \n\ntheorem determine_winner_gcd (n : Nat) (numbers\
  \ : List Nat)\n    (h1 : n > 0) (h2 : n ≤ 100)\n    (h3 : ∀ x ∈ numbers, x > 0 ∧\
  \ x ≤ 1000)\n    (h4 : numbers.length ≥ 2) (h5 : numbers.length ≤ 100) :\n    let\
  \ gcd_result := numbers.foldl gcd numbers.head!\n    let max_num := numbers.foldl\
  \ Nat.max numbers.head!\n    let moves := max_num / gcd_result - n\n    determine_winner\
  \ n numbers = (if moves % 2 = 0 then \"Bob\" else \"Alice\") := sorry\n\n-- Outcome\
  \ is valid for all even numbers\n\ntheorem determine_winner_even (n : Nat) (numbers\
  \ : List Nat)\n    (h1 : n > 0) (h2 : n ≤ 100)\n    (h3 : ∀ x ∈ numbers, x > 0)\n\
  \    (h4 : ∀ x ∈ numbers, x % 2 = 0)\n    (h5 : ¬numbers.isEmpty) (h6 : numbers.length\
  \ ≤ 100) :\n    determine_winner n numbers = \"Alice\" ∨ determine_winner n numbers\
  \ = \"Bob\" := sorry"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded"
