"vc-description": "```if:javascript\n`Array.prototype.length` will give you the number\
  \ of top-level elements in an array.\n```\n```if:ruby\n`Array#length` will give\
  \ you the number of top-level elements in an array.\n```\n```if:csharp\nThe `Length`\
  \ property of an array will give you the number of top-level elements in an array.\n\
  ```\n```if:php\n`count()` will give you the number of top-level elements in an array\
  \ if exactly one argument `$a` is passed in which is the array.\n```\n```if:python\n\
  `len(a)` will give you the number of top-level elements in the list/array named\
  \ `a`.\n```\n\nYour task is to create a function ```deepCount``` that returns the\
  \ number of ALL elements within an array, including any within inner-level arrays.\n\
  \nFor example:\n\n```if:javascript\n    deepCount([1, 2, 3]);  \n    //>>>>> 3\n\
  \    deepCount([\"x\", \"y\", [\"z\"]]);  \n    //>>>>> 4\n    deepCount([1, 2,\
  \ [3, 4, [5]]]);  \n    //>>>>> 7\n```\n```if:ruby\n    deepCount([1, 2, 3]);  \n\
  \    //>>>>> 3\n    deepCount([\"x\", \"y\", [\"z\"]]);  \n    //>>>>> 4\n    deepCount([1,\
  \ 2, [3, 4, [5]]]);  \n    //>>>>> 7\n```\n```if:csharp\n    deepCount([1, 2, 3]);\
  \  \n    //>>>>> 3\n    deepCount([\"x\", \"y\", [\"z\"]]);  \n    //>>>>> 4\n \
  \   deepCount([1, 2, [3, 4, [5]]]);  \n    //>>>>> 7\n```\n```if:php\n    deep_c([1,\
  \ 2, 3]);\n    //>>>>> 3\n    deep_c([\"x\", \"y\", [\"z\"]]);\n    //>>>>> 4\n\
  \    deep_c([1, 2, [3, 4, [5]]]);\n    //>>>>> 7\n```\n```if:python\n    deepCount([1,\
  \ 2, 3]);  \n    //>>>>> 3\n    deepCount([\"x\", \"y\", [\"z\"]]);  \n    //>>>>>\
  \ 4\n    deepCount([1, 2, [3, 4, [5]]]);  \n    //>>>>> 7\n```\n\nThe input will\
  \ always be an array.\n\n```if:php\nIn PHP you may *not* assume that the array passed\
  \ in will be non-associative.\n\nPlease note that `count()`, `eval()` and `COUNT_RECURSIVE`\
  \ are disallowed - you should be able to implement the logic for `deep_c()` yourself\
  \ ;)\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def deep_count {α : Type} (l : NestedList α) : Nat :=\n  sorry\n"
"vc-theorems": "theorem deep_count_nonnegative {α : Type} (l : NestedList α) :\n \
  \ deep_count l ≥ 0 :=\nsorry\n\n\ntheorem deep_count_geq_outer_length {α : Type}\
  \ (l : List (NestedList α)) :\n  deep_count (NestedList.list l) ≥ l.length :=\n\
  sorry\n\n\ntheorem deep_count_flat_list {α : Type} (l : List α) :\n  deep_count\
  \ (NestedList.list (l.map NestedList.elem)) = l.length :=\nsorry\n\n\ntheorem deep_count_nested_list\
  \ {α : Type} (outer : List (List α)) :\n  deep_count (NestedList.list (outer.map\
  \ (fun inner => NestedList.list (inner.map NestedList.elem)))) =\n  outer.length\
  \ + (outer.foldl (fun acc l => acc + l.length) 0) :=\nsorry\n\n\ntheorem deep_count_empty\
  \ {α : Type} :\n  deep_count (NestedList.list ([] : List (NestedList α))) = 0 :=\n\
  sorry\n\n\ntheorem deep_count_empty_nested {α : Type} :\n  deep_count (NestedList.list\
  \ [NestedList.list ([] : List (NestedList α))]) = 1 :=\nsorry\n\n\ntheorem deep_count_two_empty\
  \ {α : Type} :\n  deep_count (NestedList.list [NestedList.list ([] : List (NestedList\
  \ α)), NestedList.list ([] : List (NestedList α))]) = 2 :=\nsorry\n\n/--\ninfo:\
  \ 3\n-/\n#guard_msgs in\n#eval deep_count [1, 2, 3]\n\n/--\ninfo: 4\n-/\n#guard_msgs\
  \ in\n#eval deep_count [\"x\", \"y\", [\"z\"]]\n\n/--\ninfo: 7\n-/\n#guard_msgs\
  \ in\n#eval deep_count [1, 2, [3, 4, [5]]]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
