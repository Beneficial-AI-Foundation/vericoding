"vc-description": "Snackdown 2019 is coming! There are two rounds (round A and round\
  \ B) after the qualification round. From both of them, teams can qualify to the\
  \ pre-elimination round. According to the rules, in each of these two rounds, teams\
  \ are sorted in descending order by their score and each team with a score greater\
  \ or equal to the score of the team at the $K=1500$-th place advances to the pre-elimination\
  \ round (this means it is possible to have more than $K$ qualified teams from each\
  \ round in the case of one or more ties after the $K$-th place).\nToday, the organizers\
  \ ask you to count the number of teams which would qualify for the pre-elimination\
  \ round from round A for a given value of $K$ (possibly different from $1500$).\
  \ They provided the scores of all teams to you; you should ensure that all teams\
  \ scoring at least as many points as the $K$-th team qualify.\n\n-----Input-----\n\
  - The first line of the input contains a single integer $T$ denoting the number\
  \ of test cases. The description of $T$ test cases follows.\n- The first line of\
  \ each test case contains two space-separated integers $N$ and $K$.\n- The second\
  \ line contains $N$ space-separated integers $S_1, S_2, \\dots, S_N$.\n\n-----Output-----\n\
  For each test case, print a single line containing one integer — the number of qualified\
  \ teams.\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $1 \\le K \\le N \\\
  le 10^5$\n- $1 \\le S_i \\le 10^9$ for each valid $i$\n- the sum of $N$ for all\
  \ test cases does not exceed $10^6$\n\n-----Example Input-----\n2\n5 1\n3 5 2 4\
  \ 5\n6 4\n6 5 4 3 2 1\n\n-----Example Output-----\n2\n4"
"vc-preamble": "import Imports.AllImports\n\ndef count_qualified_teams (n : Nat) (k\
  \ : Nat) (scores : List Int) : Nat := sorry\n\ntheorem count_qualified_teams_bounds\
  \ (n : Nat) (k : Nat) (scores : List Int) \n    (h1 : k > 0)\n    (h2 : k ≤ scores.length)\n\
  \    (h3 : scores.length = n) :\n    k ≤ count_qualified_teams n k scores ∧ count_qualified_teams\
  \ n k scores ≤ n := sorry\n\n\ndef list_max (l : List Int) : Int := \n  match l\
  \ with\n  | [] => 0\n  | x::xs => List.foldl max x xs\n\n\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def list_unique (l : List Int) : Prop :=\n  ∀ (i j : Fin l.length),\
  \ i.val ≠ j.val → l[i] ≠ l[j]"
"vc-theorems": "theorem count_qualified_teams_deterministic (n : Nat) (k : Nat) (scores\
  \ : List Int)\n    (h1 : k > 0)\n    (h2 : k ≤ scores.length)\n    (h3 : scores.length\
  \ = n) :\n    count_qualified_teams n k scores = count_qualified_teams n k scores\
  \ := sorry\n\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval count_qualified_teams 5\
  \ 1 [3, 5, 2, 4, 5]\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval count_qualified_teams\
  \ 6 4 [6, 5, 4, 3, 2, 1]\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval count_qualified_teams\
  \ 4 2 [10, 10, 8, 8]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
