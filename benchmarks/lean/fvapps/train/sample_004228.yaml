"vc-description": "# Task\n You are given n rectangular boxes, the ith box has the\
  \ length lengthi, the width widthi and the height heighti. \n \n Your task is to\
  \ check if it is possible to pack all boxes into one so that inside each box there\
  \ is no more than one another box (which, in turn, can contain at most one another\
  \ box, and so on). \n \n More formally, your task is to check whether there is such\
  \ sequence of n different numbers pi (1 ≤ pi ≤ n) that for each 1 ≤ i < n the box\
  \ number pi can be put into the box number pi+1.\n\n A box can be put into another\
  \ box if all sides of the first one are less than the respective ones of the second\
  \ one. You can rotate each box as you wish, i.e. you can `swap` its length, width\
  \ and height if necessary.\n\n# Example\n\n For `length = [1, 3, 2], width = [1,\
  \ 3, 2] and height = [1, 3, 2]`, the output should be `true`;\n \n For `length =\
  \ [1, 1], width = [1, 1] and height = [1, 1],` the output should be `false`;\n \n\
  \ For `length = [3, 1, 2], width = [3, 1, 2] and height = [3, 2, 1]`, the output\
  \ should be `false`.\n \n# Input/Output\n\n\n - `[input]` integer array `length`\n\
  \n    Array of positive integers.\n\n    Constraints:\n\n    `1 ≤ length.length\
  \ ≤ 100,`\n\n    `1 ≤ length[i] ≤ 2000.`\n\n\n - `[input]` integer array `width`\n\
  \n    Array of positive integers.\n\n    Constraints:\n\n    `width.length = length.length,`\n\
  \n    `1 ≤ width[i] ≤ 2000.`\n\n\n - `[input]` integer array `height`\n\n    Array\
  \ of positive integers.\n\n    Constraints:\n\n    `height.length = length.length,`\n\
  \n    `1 ≤ height[i] ≤ 2000.`\n\n\n - `[output]` a boolean value\n\n    `true` if\
  \ it is possible to put all boxes into one, `false` otherwise."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def boxes_packing (l w h : List Int) : Bool := sorry\n\ntheorem\
  \ identical_boxes_not_packable {n : Nat} {d : Int} (h : n > 1) : \n  boxes_packing\
  \ (List.replicate n d) (List.replicate n d) (List.replicate n d) = false := sorry\n"
"vc-theorems": "theorem single_box_always_packable (d : Int) (h : d > 0) :\n  boxes_packing\
  \ [d] [d] [d] = true := sorry\n\n\ntheorem dimension_order_invariant {n : Nat} (l\
  \ w h : List Int) \n  (hlen : l.length = n ∧ w.length = n ∧ h.length = n) :\n  boxes_packing\
  \ l w h = boxes_packing w h l ∧ \n  boxes_packing l w h = boxes_packing h l w :=\
  \ sorry\n\n\ntheorem strictly_increasing_packable {n : Nat} (l w h : List Int)\n\
  \  (hlen : l.length = n ∧ w.length = n ∧ h.length = n)\n  (hsorted : ∀ i j, i <\
  \ j → i < n → j < n → \n    l[i]! < l[j]! ∧ w[i]! < w[j]! ∧ h[i]! < h[j]!) :\n \
  \ boxes_packing l w h = true := sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval\
  \ boxes_packing [1, 3, 2] [1, 3, 2] [1, 3, 2]\n\n/--\ninfo: False\n-/\n#guard_msgs\
  \ in\n#eval boxes_packing [1, 1] [1, 1] [1, 1]\n\n/--\ninfo: False\n-/\n#guard_msgs\
  \ in\n#eval boxes_packing [3, 1, 2] [3, 1, 2] [3, 2, 1]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
