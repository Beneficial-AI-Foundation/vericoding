"vc-description": "You are given a string S of length n with each character being\
  \ one of the first m lowercase English letters. \n\nCalculate how many different\
  \ strings T of length n composed from the first m lowercase English letters exist\
  \ such that the length of LCS (longest common subsequence) between S and T is n\
  \ - 1.\n\nRecall that LCS of two strings S and T is the longest string C such that\
  \ C both in S and T as a subsequence.\n\n\n-----Input-----\n\nThe first line contains\
  \ two numbers n and m denoting the length of string S and number of first English\
  \ lowercase characters forming the character set for strings (1 ≤ n ≤ 100 000, 2\
  \ ≤ m ≤ 26).\n\nThe second line contains string S.\n\n\n-----Output-----\n\nPrint\
  \ the only line containing the answer.\n\n\n-----Examples-----\nInput\n3 3\naaa\n\
  \nOutput\n6\n\nInput\n3 3\naab\n\nOutput\n11\n\nInput\n1 2\na\n\nOutput\n1\n\nInput\n\
  10 9\nabacadefgh\n\nOutput\n789\n\n\n\n-----Note-----\n\nFor the first sample, the\
  \ 6 possible strings T are: aab, aac, aba, aca, baa, caa. \n\nFor the second sample,\
  \ the 11 possible strings T are: aaa, aac, aba, abb, abc, aca, acb, baa, bab, caa,\
  \ cab.\n\nFor the third sample, the only possible string T is b."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calculate_lcs_strings (n m : Nat) (s : String) : Nat :=\n \
  \ sorry\n"
"vc-theorems": "theorem result_bounds \n  (n m : Nat) (s : String)\n  (hn : n > 0)\
  \ (hm : m ≥ 2)\n  (hs : String.length s = n) :\n  let result := calculate_lcs_strings\
  \ n m s\n  0 ≤ result ∧ result ≤ n * n * (m-1) :=\nsorry\n\n\ntheorem decreasing_m_property\n\
  \  (n m : Nat) (s : String)\n  (hn : n > 0) (hm : m > 2)\n  (hs : String.length\
  \ s = n) :\n  let result1 := calculate_lcs_strings n m s\n  let result2 := calculate_lcs_strings\
  \ n (m-1) s\n  result1 ≥ result2 :=\nsorry\n\n\ntheorem alternating_strings_property\n\
  \  (n m : Nat) (s : String)\n  (hn : n > 1) (hm : m ≥ 2)\n  (hs : s = String.mk\
  \ (List.map (fun i => if i % 2 = 0 then 'a' else 'b') (List.range n))) :\n  calculate_lcs_strings\
  \ n m s > 0 :=\nsorry\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval calculate_lcs_strings\
  \ 3 3 \"aaa\"\n\n/--\ninfo: 11\n-/\n#guard_msgs in\n#eval calculate_lcs_strings\
  \ 3 3 \"aab\"\n\n/--\ninfo: 789\n-/\n#guard_msgs in\n#eval calculate_lcs_strings\
  \ 10 9 \"abacadefgh\"\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
