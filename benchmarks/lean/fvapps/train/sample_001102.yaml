"vc-description": "The chef is very expert in coding, so to keep his password safe\
  \ from the hackers. He always enters a decoded code of his password. You are a hacker\
  \ and your work is to find the maximum number of possible ways to unlock his password\
  \ in encoded form.\n\nThe encoded message containing only letters from A-Z is being\
  \ encoded with numbers using the following mapping: \n\n'A' -> 1 \n\n'B' -> 2 ...\
  \ \n\n'Z' -> 26\n\nYou have given a non-empty string containing only digits, determine\
  \ the total number of ways to encode it. \n\nIf the total number of ways are even\
  \ then you are able to unlock the password. \n\nInput: \nThe first line has a single\
  \ integer T, denoting the number of test cases. The first line of each test case\
  \ contains string “S” decoded number.\n\nOutput:\nFor each test case, in a new line,\
  \ print 'YES' if number of maximum ways are even, otherwise\n'NO'. (without quotes)\n\
  \nConstraints:\n1 ≤ T ≤ 50\n\n1 ≤ S ≤ 30\n\nSample Input:\n2\n\n12\n\n223\n\nSample\
  \ Output:\nYES\n\nNO\n\nExplanation:\nFor first test case, It could be encoded as\
  \ \"AB\" (1 2) or \"L\" (12), hence the number of\nmaximum possible ways are 2 so\
  \ output is “YES”."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_decodings (s : String) : String := sorry\n\n\n\n\n\n\
  theorem single_valid_mapping_returns_yes_or_no (n : Nat) \n  (h : 1 ≤ n ∧ n ≤ 26)\
  \ :\n  let s := toString n\n  count_decodings s = \"YES\" ∨ count_decodings s =\
  \ \"NO\" := sorry"
"vc-theorems": ""
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
