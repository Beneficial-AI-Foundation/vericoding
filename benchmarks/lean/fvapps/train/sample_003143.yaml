"vc-description": "You will be given two strings `a` and `b` consisting of lower case\
  \ letters, but `a` will have at most one asterix character. The asterix (if any)\
  \ can be replaced with an arbitrary sequence (possibly empty) of lowercase letters.\
  \ No other character of string `a` can be replaced. If it is possible to replace\
  \ the asterix in `a` to obtain string `b`, then string `b` matches the pattern.\
  \ \n\nIf the string matches, return `true` else `false`. \n\n```\nFor example:\n\
  solve(\"code*s\",\"codewars\") = true, because we can replace the asterix(*) with\
  \ \"war\" to match the second string. \nsolve(\"codewar*s\",\"codewars\") = true,\
  \ because we can replace the asterix(*) with \"\" to match the second string. \n\
  solve(\"codewars\",\"codewars\") = true, because the strings already match.\nsolve(\"\
  a\",\"b\") = false\n```\nMore examples in test cases. \n\nGood luck!"
"vc-preamble": "import Imports.AllImports\n\ndef solve (pattern: String) (target:\
  \ String) : Bool := sorry\n\ntheorem identical_strings_match\n  (s: String)\n  (h:\
  \ s.data.all (fun c => c ≠ '*')) :\n  solve s s = true := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def stringAppend (s1 s2: String) : String := String.append s1 s2\n\
  \ntheorem wildcard_match\n  (p s m: String)\n  (h1: p.data.all (fun c => c ≠ '*'))\n\
  \  (h2: s.data.all (fun c => c ≠ '*'))\n  (h3: m.data.all (fun c => c ≠ '*')) :\n\
  \  solve (stringAppend (stringAppend p \"*\") s) (stringAppend (stringAppend p m)\
  \ s) = true := sorry\n"
"vc-theorems": "theorem different_strings_no_match\n  (s1 s2: String)\n  (h1: s1.data.all\
  \ (fun c => c ≠ '*'))\n  (h2: s2.data.all (fun c => c ≠ '*'))\n  (h3: s1 ≠ s2) :\n\
  \  solve s1 s2 = false := sorry\n\n\ntheorem multiple_wildcards_invalid\n  (s1 s2:\
  \ String)\n  (h1: s1.data.all (fun c => c ≠ '*'))\n  (h2: s2.data.all (fun c =>\
  \ c ≠ '*')) :\n  solve (stringAppend (stringAppend (stringAppend s1 \"*\") s2) \"\
  *\") \"anything\" = false := sorry\n\n\ntheorem length_requirement\n  (p s m: String)\n\
  \  (h1: p.data.all (fun c => c ≠ '*'))\n  (h2: s.data.all (fun c => c ≠ '*')) :\n\
  \  (stringAppend (stringAppend p m) s).length ≥ (stringAppend (stringAppend p \"\
  *\") s).length - 1 := sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval solve\
  \ \"code*s\" \"codewars\"\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval solve \"\
  codewar*s\" \"codewars\"\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval solve \"\
  code*warrior\" \"codewars\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
