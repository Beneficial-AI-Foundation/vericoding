"vc-description": "Given an integer n, return a string with n characters such that\
  \ each character in such string occurs an odd number of times.\nThe returned string\
  \ must contain only lowercase English letters. If there are multiples valid strings,\
  \ return any of them.  \n \nExample 1:\nInput: n = 4\nOutput: \"pppz\"\nExplanation:\
  \ \"pppz\" is a valid string since the character 'p' occurs three times and the\
  \ character 'z' occurs once. Note that there are many other valid strings such as\
  \ \"ohhh\" and \"love\".\n\nExample 2:\nInput: n = 2\nOutput: \"xy\"\nExplanation:\
  \ \"xy\" is a valid string since the characters 'x' and 'y' occur once. Note that\
  \ there are many other valid strings such as \"ag\" and \"ur\".\n\nExample 3:\n\
  Input: n = 7\nOutput: \"holasss\"\n\n \nConstraints:\n\n1 <= n <= 500"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def generate_odd_char_string (n : Nat) : String := sorry\n\ndef\
  \ String.countChar (s : String) (c : Char) : Nat := sorry\n"
"vc-theorems": "theorem length_matches_input (n : Nat) (h : 0 < n) (h2 : n ≤ 1000)\
  \ : \n  (generate_odd_char_string n).length = n := sorry\n\n\ntheorem chars_appear_odd_times\
  \ (n : Nat) (h : 0 < n) (h2 : n ≤ 1000) (c : Char) :\n  c ∈ (generate_odd_char_string\
  \ n).data → \n  (String.countChar (generate_odd_char_string n) c) % 2 = 1 := sorry\n\
  \n\ntheorem uses_valid_chars (n : Nat) (h : 0 < n) (h2 : n ≤ 1000) (c : Char) :\n\
  \  c ∈ (generate_odd_char_string n).data →\n  c = 'a' ∨ c = 'b' ∨ c = 'c' := sorry\n\
  \n\ntheorem single_char_case :\n  generate_odd_char_string 1 = \"a\" := sorry\n\n\
  \ntheorem string_structure (n : Nat) (h : 0 < n) (h2 : n ≤ 1000) :\n  (n = 1 → generate_odd_char_string\
  \ n = \"a\") ∧\n  (n % 2 = 0 → generate_odd_char_string n = String.mk (List.replicate\
  \ (n-1) 'a' ++ ['b'])) ∧\n  (n ≠ 1 ∧ n % 2 = 1 → generate_odd_char_string n = String.mk\
  \ (List.replicate (n-2) 'a' ++ ['b', 'c'])) := sorry\n\n/--\ninfo: 4\n-/\n#guard_msgs\
  \ in\n#eval len generate_odd_char_string(4)\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n\
  #eval len generate_odd_char_string(2)\n\n/--\ninfo: 7\n-/\n#guard_msgs in\n#eval\
  \ len generate_odd_char_string(7)\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
