"vc-description": "Leha is a usual student at 'The Usual University for Usual Students'.\
  \ Sometimes he studies hard; at other times he plays truant and gets busy with other\
  \ things besides academics. He has already studied at the university for N months.\
  \ For the ith month (1 ≤ i ≤ N), he has received some non-negative integer grade\
  \ A[i].\nNow he wants to analyse his progress for some periods of his university\
  \ education. An arbitrary period, defined by two positive integers L and R, begins\
  \ at Leha's Lth month at the university and ends at the Rth. The analysis is performed\
  \ via the following steps.\n\n1. Write down all the grades for each month from L\
  \ to R and sort them. Let's call the sorted list S.\n\n2. Calculate the sum of squared\
  \ differences of consecutive elements in S, that is, (S[2] - S[1])2 + (S[3] - S[2])2\
  \ + ... + (S[R-L+1] - S[R-L])2.\n\n-----Input-----\nThe first line contains one\
  \ integer N — the number of months Leha has already studied at the university.\n\
  The second line contains N integers — list A of Leha's grades.\nThe third line contains\
  \ one integer M — the number of periods Leha is interested in analyzing.\nEach of\
  \ the following M lines contain two integers L and R describing each period.\n\n\
  -----Output-----\nFor each query, output one integer — the result of the progress\
  \ analysis for the corresponding period.\n\n-----Constraints-----\n- 1 ≤ N, M ≤\
  \ 5*104\n- 0 ≤ A[i] ≤ 106\n\n-----Subtasks-----\n- Subtask 1 (19 points) 1 ≤ N,\
  \ M ≤ 200, time limit = 2 sec\n- Subtask 2 (31 points) 1 ≤ N, M ≤ 10 000, time limit\
  \ = 2 sec\n- Subtask 3 (26 points) 0 ≤ A[i] ≤ 100, time limit = 5 sec\n- Subtask\
  \ 4 (24 points) no additional constraints, , time limit = 5 sec\n\n-----Example-----\n\
  Input:5\n1 3 2 4 5\n5\n1 5\n1 4\n2 4\n3 3\n3 5\n\nOutput:4\n3\n2\n0\n5\n\nExplanation\n\
  \nThe first query: sorted array looks like (1, 2, 3, 4, 5) and the answer is calculated\
  \ as (2-1)2 + (3-2)2 + (4-3)2 + (5-4)2 = 4\n\nThe second query: sorted array looks\
  \ like (1, 2, 3, 4) and the answer is calculated as (2-1)2 + (3-2)2 + (4-3)2 = 3\n\
  \nThe last query: sorted array looks like (2, 4, 5) and the answer is calculated\
  \ as (4-2)2 + (5-4)2 = 5"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def analyze_grade_periods (grades : List Nat) (queries : List (Nat\
  \ × Nat)) : List Nat :=\n  sorry\n\n-- Length of results matches length of queries"
"vc-theorems": "theorem analyze_grade_periods_length_match \n  (grades : List Nat)\
  \ (queries : List (Nat × Nat))\n  (h : grades.length > 0) :\n  (analyze_grade_periods\
  \ grades queries).length = queries.length :=\nsorry\n\n-- Results are non-negative\n\
  \ntheorem analyze_grade_periods_nonneg \n  (grades : List Nat) (queries : List (Nat\
  \ × Nat))\n  (h : grades.length > 0) :\n  ∀ r ∈ analyze_grade_periods grades queries,\
  \ r ≥ 0 :=\nsorry\n\n-- Single element ranges give 0\n\ntheorem analyze_grade_periods_single_elem\n\
  \  (grades : List Nat) (l r : Nat)\n  (h1 : grades.length > 0)\n  (h2 : l ≤ grades.length)\n\
  \  (h3 : r ≤ grades.length)\n  (h4 : l = r) :\n  analyze_grade_periods grades [(l,r)]\
  \ = [0] :=\nsorry\n\n-- Constant sequences give 0\n\ntheorem analyze_grade_periods_constant_seq\n\
  \  (val len : Nat)\n  (h1 : len > 0)\n  (h2 : val > 0)\n  (grades : List Nat)\n\
  \  (h3 : grades = List.replicate len val) :\n  analyze_grade_periods grades [(1,len)]\
  \ = [0] :=\nsorry\n\n-- Result matches expected squared differences\n\ntheorem analyze_grade_periods_correct_calc\n\
  \  (grades : List Nat) (l r : Nat)\n  (h1 : grades.length > 0)\n  (h2 : l ≤ grades.length)\n\
  \  (h3 : r ≤ grades.length)\n  (h4 : l ≤ r) :\n  analyze_grade_periods grades [(l,r)]\
  \ = \n    [List.foldl\n      (λ acc i => acc + (grades[i+1]! - grades[i]!)^2)\n\
  \      0\n      (List.range (r-l))] :=\nsorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
