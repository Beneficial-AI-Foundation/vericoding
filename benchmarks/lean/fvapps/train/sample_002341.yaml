"vc-description": "Given two strings S and T, return if they are equal when both are\
  \ typed into empty text editors. # means a backspace character.\nNote that after backspacing\
  \ an empty text, the text will continue empty.\n\nExample 1:\nInput: S = \"ab#c\"\
  , T = \"ad#c\"\nOutput: true\nExplanation: Both S and T become \"ac\".\n\n\nExample\
  \ 2:\nInput: S = \"ab##\", T = \"c#d#\"\nOutput: true\nExplanation: Both S and T\
  \ become \"\".\n\n\nExample 3:\nInput: S = \"a##c\", T = \"#a#c\"\nOutput: true\n\
  Explanation: Both S and T become \"c\".\n\n\nExample 4:\nInput: S = \"a#c\", T =\
  \ \"b\"\nOutput: false\nExplanation: S becomes \"c\" while T becomes \"b\".\n\n\
  Note:\n\n1 <= S.length <= 200\n1 <= T.length <= 200\nS and T only contain lowercase\
  \ letters and '#' characters.\n\nFollow up:\n\nCan you solve it in O(N) time and\
  \ O(1) space?"
"vc-preamble": "import Imports.AllImports\n\ndef backspace_compare (s1: String) (s2:\
  \ String) : Bool :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def normalize_backspace (s: String) : String :=\n  sorry\n"
"vc-theorems": "theorem backspace_compare_matches_naive (s1 s2: String) :\n  backspace_compare\
  \ s1 s2 = (normalize_backspace s1 = normalize_backspace s2) :=\nby sorry\n\n\ntheorem\
  \ self_compare (s: String) :\n  backspace_compare s s = true :=\nby sorry\n\n\n\
  theorem symmetric (s1 s2: String) :\n  backspace_compare s1 s2 = backspace_compare\
  \ s2 s1 :=\nby sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval backspace_compare\
  \ \"ab#c\" \"ad#c\"\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval backspace_compare\
  \ \"ab##\" \"c#d#\"\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval backspace_compare\
  \ \"a#c\" \"b\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
