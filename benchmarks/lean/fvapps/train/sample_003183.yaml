"vc-description": "When working with color values it can sometimes be useful to extract\
  \ the individual red, green, and blue (RGB) component values for a color. Implement\
  \ a function that meets these requirements:\n\n+ Accepts a case-insensitive hexadecimal\
  \ color string as its parameter (ex. `\"#FF9933\"` or `\"#ff9933\"`)\n+ Returns\
  \ an object with the structure `{r: 255, g: 153, b: 51}` where *r*, *g*, and *b*\
  \ range from 0 through 255\n\n**Note:** your implementation does not need to support\
  \ the shorthand form of hexadecimal notation (ie `\"#FFF\"`)\n\n\n## Example\n\n\
  ```\n\"#FF9933\" --> {r: 255, g: 153, b: 51}\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def hexStringToRGB (s : String) : Option RGB := sorry\n\ntheorem\
  \ hex_string_to_RGB_valid {r g b : Nat} \n  (hr : r ≤ 255) (hg : g ≤ 255) (hb :\
  \ b ≤ 255) :\n  ∀ (hex : String),\n  match hexStringToRGB hex with\n  | none =>\
  \ True\n  | some rgb => \n    rgb.r ≤ 255 ∧ \n    rgb.g ≤ 255 ∧ \n    rgb.b ≤ 255\
  \ := sorry\n"
"vc-theorems": "theorem hex_string_to_RGB_correct {r g b : Nat}\n  (hr : r ≤ 255)\
  \ (hg : g ≤ 255) (hb : b ≤ 255) :\n  ∀ (hex : String),\n  match hexStringToRGB hex\
  \ with\n  | none => True\n  | some rgb =>\n    rgb.r = r ∧\n    rgb.g = g ∧\n  \
  \  rgb.b = b := sorry\n\n/--\ninfo: {'r': 255, 'g': 153, 'b': 51}\n-/\n#guard_msgs\
  \ in\n#eval hex_string_to_RGB \"#FF9933\"\n\n/--\ninfo: {'r': 190, 'g': 173, 'b':\
  \ 237}\n-/\n#guard_msgs in\n#eval hex_string_to_RGB \"#beaded\"\n\n/--\ninfo: {'r':\
  \ 0, 'g': 0, 'b': 0}\n-/\n#guard_msgs in\n#eval hex_string_to_RGB \"#000000\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
