vc-description: |-
  Given a binary tree root and a linked list with head as the first node. 
  Return True if all the elements in the linked list starting from the head correspond to some downward path connected in the binary tree otherwise return False.
  In this context downward path means a path that starts at some node and goes downwards.
   
  Example 1:

  Input: head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
  Output: true
  Explanation: Nodes in blue form a subpath in the binary Tree.  

  Example 2:

  Input: head = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
  Output: true

  Example 3:
  Input: head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
  Output: false
  Explanation: There is no path in the binary tree that contains all the elements of the linked list from head.

   
  Constraints:

  1 <= node.val <= 100 for each node in the linked list and binary tree.
  The given linked list will contain between 1 and 100 nodes.
  The given binary tree will contain between 1 and 2500 nodes.
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def is_subpath (head : Option ListNode) (root : Option TreeNode) : Bool :=
    sorry
vc-theorems: |
  theorem empty_tree_property {head : ListNode} :
    is_subpath (some head) none = false := by
    sorry


  theorem empty_list_property {root : Option TreeNode} :
    is_subpath none root = true := by
    sorry


  theorem single_path_property {head : ListNode} {root : TreeNode} {list_len tree_len : Nat} :
    list_len > tree_len →
    is_subpath (some head) (some root) = false := by
    sorry


  theorem single_node_property {val : Int} :
    let head := ListNode.mk val none
    let root := TreeNode.mk val none none 
    is_subpath (some head) (some root) = true := by
    sorry

  /--
  info: True
  -/
  #guard_msgs in
  #eval is_subpath ListNode(4) TreeNode(1)

  /--
  info: True
  -/
  #guard_msgs in
  #eval is_subpath ListNode(1) TreeNode(1)

  /--
  info: False
  -/
  #guard_msgs in
  #eval is_subpath ListNode(1) root2
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
