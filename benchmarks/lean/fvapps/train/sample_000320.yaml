"vc-description": "You are given a rows x cols matrix grid. Initially, you are located\
  \ at the top-left corner (0, 0), and in each step, you can only move right or down\
  \ in the matrix.\nAmong all possible paths starting from the top-left corner (0,\
  \ 0) and ending in the bottom-right corner (rows - 1, cols - 1), find the path with\
  \ the maximum non-negative product. The product of a path is the product of all\
  \ integers in the grid cells visited along the path.\nReturn the maximum non-negative\
  \ product modulo 109 + 7. If the maximum product is negative return -1.\nNotice\
  \ that the modulo is performed after getting the maximum product.\n \nExample 1:\n\
  Input: grid = [[-1,-2,-3],\n               [-2,-3,-3],\n               [-3,-3,-2]]\n\
  Output: -1\nExplanation: It's not possible to get non-negative product in the path\
  \ from (0, 0) to (2, 2), so return -1.\n\nExample 2:\nInput: grid = [[1,-2,1],\n\
                 [1,-2,1],\n               [3,-4,1]]\nOutput: 8\nExplanation: Maximum\
  \ non-negative product is in bold (1 * 1 * -2 * -4 * 1 = 8).\n\nExample 3:\nInput:\
  \ grid = [[1, 3],\n               [0,-4]]\nOutput: 0\nExplanation: Maximum non-negative\
  \ product is in bold (1 * 0 * -4 = 0).\n\nExample 4:\nInput: grid = [[ 1, 4,4,0],\n\
                 [-2, 0,0,1],\n               [ 1,-1,1,1]]\nOutput: 2\nExplanation:\
  \ Maximum non-negative product is in bold (1 * -2 * 1 * -1 * 1 * 1 = 2).\n\n \n\
  Constraints:\n\n1 <= rows, cols <= 15\n-4 <= grid[i][j] <= 4"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def maxProductPath (grid : List (List Int)) : Int := sorry\n\n\
  def is_valid_result (grid : List (List Int)) (result : Int) : Bool := sorry\n"
"vc-theorems": "theorem empty_grid_theorem (n : Nat) : \n  maxProductPath [] = -1\
  \ ∧ maxProductPath (List.replicate n []) = -1 := sorry\n\n\ntheorem zero_grid_theorem\
  \ (rows cols : Nat) (h1 : rows > 0) (h2 : cols > 0) :\n  let grid := List.replicate\
  \ rows (List.replicate cols 0)\n  maxProductPath grid = 0 := sorry\n\n\ntheorem\
  \ all_positive_grid_theorem (rows cols : Nat) (h1 : rows > 0) (h2 : cols > 0) :\n\
  \  let grid := List.replicate rows (List.replicate cols 1)\n  maxProductPath grid\
  \ = 1 := sorry\n\n\ntheorem result_properties_theorem (grid : List (List Int)) \n\
  \  (h1 : grid.length > 0)\n  (h2 : ∀ row ∈ grid, row.length = grid.head!.length)\
  \ :\n  let result := maxProductPath grid\n  (\n    -- Result should be valid\n \
  \   (result = -1 ∨ (0 ≤ result ∧ result ≤ 10^9 + 7)) ∧\n    \n    -- If first or\
  \ last element is 0, result should be 0\n    ((grid.head!.head! = 0 ∨ grid.getLast!.getLast!\
  \ = 0) → result = 0) ∧\n    \n    -- If grid is 1x1, result should match single\
  \ element if non-negative\n    (grid.length = 1 ∧ grid.head!.length = 1 →\n    \
  \  result = if grid.head!.head! ≥ 0 then grid.head!.head! else -1)\n  ) := sorry\n\
  \n/--\ninfo: -1\n-/\n#guard_msgs in\n#eval maxProductPath [[-1, -2, -3], [-2, -3,\
  \ -3], [-3, -3, -2]]\n\n/--\ninfo: 8\n-/\n#guard_msgs in\n#eval maxProductPath [[1,\
  \ -2, 1], [1, -2, 1], [3, -4, 1]]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval maxProductPath\
  \ [[1, 3], [0, -4]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
