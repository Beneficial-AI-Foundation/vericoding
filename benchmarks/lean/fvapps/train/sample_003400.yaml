"vc-description": "You will receive an uncertain amount of integers in a certain order\
  \ ```k1, k2, ..., kn```.\n\nYou form a new number of n digits in the following way:\n\
  you take one of the possible digits of the first given number, ```k1```, then the\
  \ same with the given number ```k2```, repeating the same process up to ```kn```\
  \ and you concatenate these obtained digits(in the order that were taken) obtaining\
  \ the new number. As you can see, we have many possibilities.\n\nLet's see the process\
  \ above explained with three given numbers:\n```\nk1 = 23, k2 = 17, k3 = 89\nDigits\
  \ Combinations   Obtained Number\n  ('2', '1', '8')           218    <---- Minimum\n\
  \  ('2', '1', '9')           219\n  ('2', '7', '8')           278\n  ('2', '7',\
  \ '9')           279\n  ('3', '1', '8')           318\n  ('3', '1', '9')       \
  \    319\n  ('3', '7', '8')           378\n  ('3', '7', '9')           379    <----\
  \ Maximum\n             Total Sum =   2388   (8 different values)\n```\nWe need\
  \ the function that may work in this way:\n\n```python\nproc_seq(23, 17, 89) ==\
  \ [8, 218, 379, 2388]\n```\n\nSee this special case and deduce how the function\
  \ should handle the cases which have many repetitions.\n\n```python\nproc_seq(22,\
  \ 22, 22, 22) == [1, 2222] # we have only one obtained number, the minimum, maximum\
  \ and total sum coincide\n```\n\nThe sequence of numbers will have numbers of n\
  \ digits only. Numbers formed by leading zeroes will be discarded.\n\n```python\n\
  proc_seq(230, 15, 8) == [4, 218, 358, 1152]\n```\n\nEnjoy it!!\n\nYou will never\
  \ receive the number 0 and all the numbers will be in valid format."
"vc-preamble": "import Imports.AllImports\n\ndef proc_seq : List Nat → List Nat \n\
  \  | xs => sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def countPermNoLeadingZero (n : Nat) (m : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem proc_seq_valid_output (nums : List Nat) :\n  let result :=\
  \ proc_seq nums\n  (result.length = 2 ∨ result.length = 4) ∧\n  (∀ x ∈ result, x\
  \ ≥ 0) ∧\n  (result.length = 2 → result.head! = 1) ∧\n  (result.length = 4 → \n\
  \    result[1]! ≤ result[2]! ∧ result[1]! ≤ result[3]!) := sorry\n\n\ntheorem proc_seq_leading_zeros\
  \ (n : Nat) (h : n ≥ 100 ∧ n ≤ 999) :\n  let result := proc_seq [n, 0]\n  result.head!\
  \ = countPermNoLeadingZero n 0 := sorry\n\n\ntheorem proc_seq_small_nums {nums :\
  \ List Nat} (h : 2 ≤ nums.length ∧ nums.length ≤ 3)\n  (h' : ∀ n ∈ nums, 1 ≤ n ∧\
  \ n ≤ 9) :\n  let result := proc_seq nums\n  (result.length = 2 ∨ result.length\
  \ = 4) ∧\n  (∀ x ∈ result, x ≥ 0) ∧\n  (result.length = 2 → result.head! = 1) ∧\n\
  \  (result.length = 4 → \n    result[1]! ≤ result[2]! ∧ result[1]! ≤ result[3]!)\
  \ := sorry\n\n/--\ninfo: [8, 218, 379, 2388]\n-/\n#guard_msgs in\n#eval proc_seq\
  \ 23 17 89\n\n/--\ninfo: [1, 2222]\n-/\n#guard_msgs in\n#eval proc_seq 22 22 22\
  \ 22\n\n/--\ninfo: [4, 218, 358, 1152]\n-/\n#guard_msgs in\n#eval proc_seq 230 15\
  \ 8\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
