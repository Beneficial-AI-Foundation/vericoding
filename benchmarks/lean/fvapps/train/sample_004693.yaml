"vc-description": "Create a function taking a positive integer as its parameter and\
  \ returning a string containing the Roman Numeral representation of that integer.\n\
  \nModern Roman numerals are written by expressing each digit separately starting\
  \ with the left most digit and skipping any digit with a value of zero. In Roman\
  \ numerals 1990 is rendered: 1000=M, 900=CM, 90=XC; resulting in MCMXC. 2008 is\
  \ written as 2000=MM, 8=VIII; or MMVIII. 1666 uses each Roman symbol in descending\
  \ order: MDCLXVI.\n\nExample:\n```python\nsolution(1000) # should return 'M'\n```\n\
  \nHelp:\n```\nSymbol  Value\nI             1\nV             5\nX             10\n\
  L             50\nC             100\nD             500\nM             1,000\n```\n\
  \nRemember that there can't be more than 3 identical symbols in a row.\n\nMore about\
  \ roman numerals - http://en.wikipedia.org/wiki/Roman_numerals"
"vc-preamble": "import Imports.AllImports\n\ndef solution (n : Nat) : String := sorry\n\
  \ndef isSubstring (s₁ s₂ : String) : Bool := sorry\n\n/-- Map Roman numerals to\
  \ their decimal values -/\n\ndef romanValues : List (Char × Nat) := \n  [('I', 1),\
  \ ('V', 5), ('X', 10), ('L', 50), ('C', 100), ('D', 500), ('M', 1000)]\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def convertToNums (s : String) : List Nat := sorry\n\ntheorem monotonically_decreasing_values\
  \ (n : Nat) (h : 1 ≤ n ∧ n ≤ 3999) :\n  let numericValues := convertToNums (solution\
  \ n)\n  ∀ i j, i < j → j < numericValues.length → \n    (numericValues.get ⟨i, sorry⟩)\
  \ ≥ (numericValues.get ⟨j, sorry⟩) := sorry"
"vc-theorems": "theorem valid_roman_chars (n : Nat) (h : 1 ≤ n ∧ n ≤ 3999) :\n  ∀\
  \ c, String.contains (solution n) c → c ∈ ['M', 'D', 'C', 'L', 'X', 'V', 'I'] :=\
  \ sorry\n\n\ntheorem length_constraints (n : Nat) (h : 1 ≤ n ∧ n ≤ 3999) :\n  (n\
  \ ≤ 3 → (solution n).length ≤ 3) ∧ \n  (n ≤ 8 → (solution n).length ≤ 4) ∧\n  (n\
  \ ≤ 39 → (solution n).length ≤ 6) := sorry\n\n\ntheorem no_four_consecutive_chars\
  \ (n : Nat) (h : 1 ≤ n ∧ n ≤ 3999) :\n  ¬isSubstring \"IIII\" (solution n) ∧ \n\
  \  ¬isSubstring \"XXXX\" (solution n) ∧ \n  ¬isSubstring \"CCCC\" (solution n) ∧\
  \ \n  ¬isSubstring \"MMMM\" (solution n) := sorry\n\n\ntheorem valid_subtractive_pairs\
  \ (n : Nat) (h : 1 ≤ n ∧ n ≤ 3999) :\n  ¬isSubstring \"IL\" (solution n) ∧\n  ¬isSubstring\
  \ \"IC\" (solution n) ∧\n  ¬isSubstring \"ID\" (solution n) ∧\n  ¬isSubstring \"\
  IM\" (solution n) ∧\n  ¬isSubstring \"XD\" (solution n) ∧\n  ¬isSubstring \"XM\"\
  \ (solution n) := sorry\n\n\n/--\ninfo: 'I'\n-/\n#guard_msgs in\n#eval solution\
  \ 1\n\n/--\ninfo: 'MCMXC'\n-/\n#guard_msgs in\n#eval solution 1990\n\n/--\ninfo:\
  \ 'MMVIII'\n-/\n#guard_msgs in\n#eval solution 2008\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
