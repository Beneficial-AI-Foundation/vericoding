"vc-description": "Introduction\n\nIt's been more than 20 minutes since the negligent\
  \ waiter has taken your order for the house special prime tofu steak with a side\
  \ of chili fries.\n\nOut of boredom, you start fiddling around with the condiments\
  \ tray. To be efficient, you want to be familiar with the choice of sauces and spices\
  \ before your order is finally served.\n\nYou also examine the toothpick holder\
  \ and try to analyze its inner workings when - yikes - the holder's lid falls off\
  \ and all 23 picks lay scattered on the table.\n\nBeing a good and hygiene oriented\
  \ citizen, you decide not to just put them back in the holder. Instead of letting\
  \ all the good wood go to waste, you start playing around with the picks.\n\nIn\
  \ the first \"round\", you lay down one toothpick vertically. You've used a total\
  \ of one toothpick.\n\nIn the second \"round\", at each end of the first toothpick,\
  \ you add a perpendicular toothpick at its center point. You added two additional\
  \ toothpicks for a total of three toothpicks.\n\nIn the next rounds, you continue\
  \ to add perpendicular toothpicks to each free end of toothpicks already on the\
  \ table.\n\nWith your 23 toothpicks, you can complete a total of six rounds:\n\n\
  \nYou wonder if you'd be able to implement this sequence in your favorite programming\
  \ language. Because your food still hasn't arrived, you decide to take out your\
  \ laptop and start implementing...\n\nChallenge\nImplement a script that returns\
  \ the amount of toothpicks needed to complete n amount of rounds of the toothpick\
  \ sequence.\n\n```\n0 <= n <= 5000\n```\n\nHint\nYou can attempt this brute force\
  \ or get some inspiration from the math department."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def toothpick (n : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem toothpick_non_negative (n : Nat) :\n  toothpick n â‰¥ 0 :=\n\
  \  sorry\n\n\ntheorem toothpick_monotonic {n : Nat} (h : n > 0) : \n  toothpick\
  \ n > toothpick (n-1) :=\n  sorry\n\n\ntheorem toothpick_doubles {n : Nat} (h :\
  \ n > 0) :\n  toothpick (2^n) > 2 * toothpick (2^(n-1)) :=\n  sorry\n\n\ntheorem\
  \ toothpick_zero :\n  toothpick 0 = 0 :=\n  sorry\n\n/--\ninfo: 0\n-/\n#guard_msgs\
  \ in\n#eval toothpick 0\n\n/--\ninfo: 7\n-/\n#guard_msgs in\n#eval toothpick 3\n\
  \n/--\ninfo: 171\n-/\n#guard_msgs in\n#eval toothpick 16\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
