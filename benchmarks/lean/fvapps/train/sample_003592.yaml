"vc-description": "Create a function that returns an array containing the first `l`\
  \ digits from the `n`th diagonal of [Pascal's triangle](https://en.wikipedia.org/wiki/Pascal's_triangle).\n\
  \n`n = 0` should generate the first diagonal of the triangle (the 'ones'). The first\
  \ number in each diagonal should be 1.\n\nIf `l = 0`, return an empty array. Assume\
  \ that both `n` and `l` will be non-negative integers in all test cases."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def generate_diagonal (d : Nat) (l : Nat) : List Nat :=\n  sorry\n"
"vc-theorems": "theorem generate_diagonal_length\n  (d l : Nat) :\n  (generate_diagonal\
  \ d l).length = l :=\n  sorry\n\n\ntheorem generate_diagonal_first_element\n  {d\
  \ l : Nat}\n  (h : l > 0) :\n  (generate_diagonal d l).get ⟨0, sorry⟩ = 1 :=\n \
  \ sorry\n\n\ntheorem generate_diagonal_pattern\n  {d l i: Nat}\n  (h1 : i < l)\n\
  \  (h2 : i > 0) :\n  let result := generate_diagonal d l\n  (result.get ⟨i, sorry⟩)\
  \ = (result.get ⟨i-1, sorry⟩) * (d+i) / i :=\n  sorry\n\n\ntheorem zero_diagonal_all_ones\n\
  \  (l : Nat) : \n  List.all (generate_diagonal 0 l) (· = 1) :=\n  sorry\n\n\ntheorem\
  \ empty_length\n  (d : Nat) :\n  generate_diagonal d 0 = [] :=\n  sorry\n\n/--\n\
  info: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n-/\n#guard_msgs in\n#eval generate_diagonal\
  \ 0 10\n\n/--\ninfo: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n-/\n#guard_msgs in\n#eval\
  \ generate_diagonal 1 10\n\n/--\ninfo: [1, 101, 5151, 176851, 4598126, 96560646]\n\
  -/\n#guard_msgs in\n#eval generate_diagonal 100 6\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
