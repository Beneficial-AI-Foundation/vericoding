"vc-description": "## Overview\nResistors are electrical components marked with colorful\
  \ stripes/bands to indicate both their resistance value in ohms and how tight a\
  \ tolerance that value has. If you did my Resistor Color Codes kata, you wrote a\
  \ function which took a string containing a resistor's band colors, and returned\
  \ a string identifying the resistor's ohms and tolerance values.\n\n\nWell, now\
  \ you need that in reverse: The previous owner of your \"Beyond-Ultimate Raspberry\
  \ Pi Starter Kit\" (as featured in my Fizz Buzz Cuckoo Clock kata) had emptied all\
  \ the tiny labeled zip-lock bags of components into the box, so that for each resistor\
  \ you need for a project, instead of looking for text on a label, you need to find\
  \ one with the sequence of band colors that matches the ohms value you need.\n\n\
  ## The resistor color codes\nYou can see this Wikipedia page for a colorful chart,\
  \ but the basic resistor color codes are:\n\n0: black, 1: brown, 2: red, 3: orange,\
  \ 4: yellow, 5: green, 6: blue, 7: violet, 8: gray, 9: white\n\nAll resistors have\
  \ at least three bands, with the first and second bands indicating the first two\
  \ digits of the ohms value, and the third indicating the power of ten to multiply\
  \ them by, for example a resistor with a value of 47 ohms, which equals 47 * 10^0\
  \ ohms, would have the three bands \"yellow violet black\".\n\nMost resistors also\
  \ have a fourth band indicating tolerance -- in an electronics kit like yours, the\
  \ tolerance will always be 5%, which is indicated by a gold band. So in your kit,\
  \ the 47-ohm resistor in the above paragraph would have the four bands \"yellow\
  \ violet black gold\".\n\n## Your mission\nYour function will receive a string containing\
  \ the ohms value you need, followed by a space and the word \"ohms\" (to avoid Codewars\
  \ unicode headaches I'm just using the word instead of the ohms unicode symbol).\
  \ The way an ohms value is formatted depends on the magnitude of the value:\n\n\
  * For resistors less than 1000 ohms, the ohms value is just formatted as the plain\
  \ number. For example, with the 47-ohm resistor above, your function would receive\
  \ the string `\"47 ohms\"`, and return the string `\"yellow violet black gold\"\
  .\n\n* For resistors greater than or equal to 1000 ohms, but less than 1000000 ohms,\
  \ the ohms value is divided by 1000, and has a lower-case \"k\" after it. For example,\
  \ if your function received the string `\"4.7k ohms\"`, it would need to return\
  \ the string `\"yellow violet red gold\"`.\n\n* For resistors of 1000000 ohms or\
  \ greater, the ohms value is divided by 1000000, and has an upper-case \"M\" after\
  \ it. For example, if your function received the string `\"1M ohms\"`, it would\
  \ need to return the string `\"brown black green gold\"`. \n\nTest case resistor\
  \ values will all be between 10 ohms and 990M ohms.\n\n## More examples, featuring\
  \ some common resistor values from your kit\n```\n\"10 ohms\"        \"brown black\
  \ black gold\"\n\"100 ohms\"       \"brown black brown gold\"\n\"220 ohms\"    \
  \   \"red red brown gold\"\n\"330 ohms\"       \"orange orange brown gold\"\n\"\
  470 ohms\"       \"yellow violet brown gold\"\n\"680 ohms\"       \"blue gray brown\
  \ gold\"\n\"1k ohms\"        \"brown black red gold\"\n\"10k ohms\"       \"brown\
  \ black orange gold\"\n\"22k ohms\"       \"red red orange gold\"\n\"47k ohms\"\
  \       \"yellow violet orange gold\"\n\"100k ohms\"      \"brown black yellow gold\"\
  \n\"330k ohms\"      \"orange orange yellow gold\"\n\"2M ohms\"        \"red black\
  \ green gold\"\n```\n\nHave fun!"
"vc-preamble": "import Imports.AllImports\n\ndef encode_resistor_colors (ohm_str :\
  \ String) : String :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def String.toNat (s : String) : Nat :=\n  sorry\n"
"vc-theorems": "theorem resistor_colors_format {ohm_str : String} \n  (h : 10 ≤ ohm_str.toNat\
  \ ∧ ohm_str.toNat ≤ 99000000) :\n  let result := encode_resistor_colors ohm_str\n\
  \  let colors := (result.split fun c => c = ' ')\n  (colors.length = 4) ∧ \n  (colors[3]!\
  \ = \"gold\") ∧\n  (∀ c ∈ colors, c ∈ [\"black\", \"brown\", \"red\", \"orange\"\
  , \"yellow\", \"green\", \"blue\", \"violet\", \"gray\", \"white\", \"gold\"]) :=\
  \ \n  sorry\n\n\ntheorem resistor_colors_value {ohm_str : String}\n  (h1 : ohm_str.contains\
  \ 'k' → \n        1000 * (ohm_str.replace \"k\" \" \").toNat = ohm_str.toNat)\n\
  \  (h2 : ohm_str.contains 'M' → \n        1000000 * (ohm_str.replace \"M\" \" \"\
  ).toNat = ohm_str.toNat)\n  (h3 : ¬ohm_str.contains 'k' ∧ ¬ohm_str.contains 'M'\
  \ → \n        ohm_str.toNat = ohm_str.toNat)\n  (h4 : 10 ≤ ohm_str.toNat ∧ ohm_str.toNat\
  \ ≤ 99000000) :\n  let result := encode_resistor_colors ohm_str\n  ohm_str.toNat\
  \ = result.toNat :=\n  sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
