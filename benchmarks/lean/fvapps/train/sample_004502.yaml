"vc-description": "You are given four positive integers $n$, $m$, $a$, $b$ ($1 \\\
  le b \\le n \\le 50$; $1 \\le a \\le m \\le 50$). Find any such rectangular matrix\
  \ of size $n \\times m$ that satisfies all of the following conditions:\n\n  each\
  \ row of the matrix contains exactly $a$ ones;  each column of the matrix contains\
  \ exactly $b$ ones;  all other elements are zeros. \n\nIf the desired matrix does\
  \ not exist, indicate this.\n\nFor example, for $n=3$, $m=6$, $a=2$, $b=1$, there\
  \ exists a matrix satisfying the conditions above:\n\n$$ \\begin{vmatrix} 0 & 1\
  \ & 0 & 0 & 0 & 1 \\\\ 1 & 0 & 0 & 1 & 0 & 0 \\\\ 0 & 0 & 1 & 0 & 1 & 0 \\end{vmatrix}\
  \ $$\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\\
  le 1000$) — the number of test cases. Then $t$ test cases follow.\n\nEach test case\
  \ is described by four positive integers $n$, $m$, $a$, $b$ ($1 \\le b \\le n \\\
  le 50$; $1 \\le a \\le m \\le 50$), where $n$ and $m$ are the sizes of the matrix,\
  \ and $a$ and $b$ are the number of ones for rows and columns, respectively.\n\n\
  \n-----Output-----\n\nFor each test case print:\n\n  \"YES\" (without quotes) and\
  \ the required matrix (if there are several answers, print any) if it exists, or\
  \  \"NO\" (without quotes) if it does not exist. \n\nTo print the matrix $n \\times\
  \ m$, print $n$ rows, each of which consists of $m$ numbers $0$ or $1$ describing\
  \ a row of the matrix. Numbers must be printed without spaces.\n\n\n-----Example-----\n\
  Input\n5\n3 6 2 1\n2 2 2 1\n2 2 2 2\n4 4 2 2\n2 1 1 2\n\nOutput\nYES\n010001\n100100\n\
  001010\nNO\nYES\n11\n11\nYES\n1100\n1100\n0011\n0011\nYES\n1\n1"
"vc-preamble": "import Imports.AllImports\n\ndef Matrix := List (List Bool)\n\ndef\
  \ solveMatrix (m n a b : Nat) : Option Matrix :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def matrixToStr (m : Matrix) : String :=\n  sorry\n"
"vc-theorems": "theorem solve_matrix_valid_2_2_1_1 :\n  ∃ (result : Matrix),\n   \
  \ solveMatrix 2 2 1 1 = some result ∧\n    matrixToStr result = \"10\\n01\" \n \
  \ := sorry\n\n\ntheorem solve_matrix_valid_2_2_2_2 :\n  ∃ (result : Matrix),\n \
  \   solveMatrix 2 2 2 2 = some result ∧ \n    matrixToStr result = \"11\\n11\"\n\
  \  := sorry\n\n\ntheorem solve_matrix_valid_3_6_2_1 :\n  ∃ (result : Matrix),\n\
  \    solveMatrix 3 6 2 1 = some result ∧\n    matrixToStr result = \"110000\\n001100\\\
  n000011\"\n  := sorry\n\n\ntheorem solve_matrix_impossible_2_2_2_1 :\n  solveMatrix\
  \ 2 2 2 1 = none := sorry \n\n\ntheorem solve_matrix_impossible_3_3_3_1 :\n  solveMatrix\
  \ 3 3 3 1 = none := sorry\n\n\ntheorem solve_matrix_impossible_greater_dimensions\
  \ :\n  (∀ m n : Nat, m > 0 → n > 0 → \n    (∀ a b : Nat, (a > m ∨ b > n) → \n  \
  \    solveMatrix m n a b = none)) := sorry\n\n/--\ninfo: expected\n-/\n#guard_msgs\
  \ in\n#eval matrix_to_str result\n\n/--\ninfo: expected\n-/\n#guard_msgs in\n#eval\
  \ matrix_to_str result\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
