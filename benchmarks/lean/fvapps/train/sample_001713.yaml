"vc-description": "A famous casino is suddenly faced with a sharp decline of their\
  \ revenues. They decide to offer Texas hold'em also online. Can you help them by\
  \ writing an algorithm that can rank poker hands? \n\nTask:\n\nCreate a poker hand\
  \ that has a constructor that accepts a string containing 5 cards:\n\n```python\n\
  hand = PokerHand(\"KS 2H 5C JD TD\")\n```\n\nThe characteristics of the string of\
  \ cards are:\n\nA space is used as card seperator\nEach card consists of two characters\n\
  The first character is the value of the card, valid characters are:\n`2, 3, 4, 5,\
  \ 6, 7, 8, 9, T(en), J(ack), Q(ueen), K(ing), A(ce)`\nThe second character represents\
  \ the suit, valid characters are: \n`S(pades), H(earts), D(iamonds), C(lubs)`\n\n\
  \n\nThe poker hands must be sortable by rank, the highest rank first:\n\n```python\n\
  hands = []\nhands.append(PokerHand(\"KS 2H 5C JD TD\"))\nhands.append(PokerHand(\"\
  2C 3C AC 4C 5C\"))\nhands.sort() (or sorted(hands))\n```\n\nApply the Texas Hold'em\
  \ rules for ranking the cards. \nThere is no ranking for the suits.\nAn ace can\
  \ either rank high or rank low in a straight or straight flush. Example of a straight\
  \ with a low ace:\n`\"5C 4D 3C 2S AS\"`\n\n\n\n\nNote:  there are around 25000 random\
  \ tests, so keep an eye on performances."
"vc-preamble": "import Imports.AllImports\n\ndef VALID_VALUES := ['2', '3', '4', '5',\
  \ '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A']\ndef VALID_SUITS := ['S', 'H', 'D',\
  \ 'C'] \n\nstructure Card where\n  value : Char\n  suit : Char\n  deriving Repr\n\
  \nstructure Hand where\n  cards : List Card\n  deriving Repr\n\n\ndef Hand.maxCount\
  \ (h : Hand) : Nat := sorry\ndef Hand.maxCard (h : Hand) : Char := sorry \n\ndef\
  \ Hand.remaining (h : Hand) : List Char := sorry\ndef Hand.isFlush (h : Hand) :\
  \ Bool := sorry"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def Hand.isStraight (h : Hand) : Bool := sorry\ndef Hand.gt (h1\
  \ h2 : Hand) : Bool := sorry\n"
"vc-theorems": "theorem hand_initialization (cards : List Card) (h : Hand) : \n  cards.length\
  \ = 5 ∧\n  ∀ c ∈ cards, c.value ∈ VALID_VALUES ∧ c.suit ∈ VALID_SUITS := sorry\n\
  \n\ntheorem hand_properties (h : Hand) :\n  1 ≤ h.maxCount ∧ h.maxCount ≤ 4 ∧\n\
  \  h.maxCard ∈ VALID_VALUES ∧\n  ∀ r ∈ h.remaining, r ∈ VALID_VALUES := sorry\n\n\
  \ntheorem hand_comparison_reflexive (h : Hand) :\n  ¬(Hand.gt h h) := sorry\n\n\n\
  theorem hand_comparison_antisymmetric (h1 h2 : Hand) :\n  Hand.gt h1 h2 → ¬(Hand.gt\
  \ h2 h1) := sorry\n\n\ntheorem hand_comparison_transitive (h1 h2 : Hand) :\n  h1\
  \ = h2 → ¬(Hand.gt h1 h2) ∧ ¬(Hand.gt h2 h1) := sorry\n\n\ntheorem straight_flush_beats_others\
  \ (h : Hand) :\n  ¬(h.isStraight ∧ h.isFlush) →\n  Hand.gt (Hand.mk [\n    {value\
  \ := 'A', suit := 'S'},\n    {value := 'K', suit := 'S'}, \n    {value := 'Q', suit\
  \ := 'S'},\n    {value := 'J', suit := 'S'},\n    {value := 'T', suit := 'S'}\n\
  \  ]) h := sorry\n\n\ntheorem flush_consistency (h : Hand) :\n  h.isFlush → List.length\
  \ (List.map Card.suit h.cards) = 5 ∧ \n  ∀ (c1 c2 : Card), c1 ∈ h.cards → c2 ∈ h.cards\
  \ → c1.suit = c2.suit := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
