"vc-description": "Your car starts at position 0 and speed +1 on an infinite number\
  \ line.  (Your car can go into negative positions.)\nYour car drives automatically\
  \ according to a sequence of instructions A (accelerate) and R (reverse).\nWhen\
  \ you get an instruction \"A\", your car does the following: position += speed,\
  \ speed *= 2.\nWhen you get an instruction \"R\", your car does the following: if\
  \ your speed is positive then speed = -1 , otherwise speed = 1.  (Your position\
  \ stays the same.)\nFor example, after commands \"AAR\", your car goes to positions\
  \ 0->1->3->3, and your speed goes to 1->2->4->-1.\nNow for some target position,\
  \ say the length of the shortest sequence of instructions to get there.\nExample\
  \ 1:\nInput: \ntarget = 3\nOutput: 2\nExplanation: \nThe shortest instruction sequence\
  \ is \"AA\".\nYour position goes from 0->1->3.\n\nExample 2:\nInput: \ntarget =\
  \ 6\nOutput: 5\nExplanation: \nThe shortest instruction sequence is \"AAARA\".\n\
  Your position goes from 0->1->3->7->7->6.\n\n \nNote: \n\n1 <= target <= 10000."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def racecar (target : Nat) : Nat := sorry\n\ntheorem racecar_output_positive\
  \ (target : Nat) : \n  target > 0 → racecar target > 0 := sorry\n"
"vc-theorems": "theorem racecar_growth (target : Nat) :\n  target > 0 → racecar target\
  \ ≤ 4 * target.log2 := sorry\n\n\ntheorem racecar_optimal_for_power2minus1 (target\
  \ : Nat) :\n  target > 0 → \n  (∃ k : Nat, target + 1 = 2^k) →\n  racecar target\
  \ = (target + 1).log2 - 1 := sorry\n\n\ntheorem racecar_consistent (target : Nat)\
  \ :\n  target > 0 →\n  racecar target = racecar target := sorry\n\n/--\ninfo: 2\n\
  -/\n#guard_msgs in\n#eval racecar 3\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval racecar\
  \ 6\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval racecar 4\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
