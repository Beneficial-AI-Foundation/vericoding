"vc-description": "For Diwali, Chef arranges all $K$ laddus in a row in his sweet\
  \ shop. Whenever a customer comes to buy laddus, chef follows a rule that each customer\
  \ must buy all laddus on odd position. After the selection of the laddu, a new row\
  \ is formed, and again out of these only laddus on odd position are selected. This\
  \ continues until the chef left with the last laddu. Find out the position of that\
  \ last laddu in the original row.\n\n-----Input:-----\n- First line will contain\
  \ $T$, number of testcases. Then the testcases follow. \n- Each testcase contains\
  \ of a single line of input, one integer $K$. \n\n-----Output:-----\nFor each testcase,\
  \ print the position of that laddu who is left, in the original row.\n\n-----Constraints-----\n\
  - $1 \\leq T \\leq 10^5$\n- $1 \\leq K \\leq 10^5$\n\n-----Sample Input:-----\n\
  3\n1\n5\n8\n\n-----Sample Output:-----\n1\n4\n8\n\n-----EXPLANATION:-----\nFor 1)\
  \ Only one laddu which is last so print 1.\nFor 2) Customer 1: [1, 3, 5]\nNew row\
  \ = [2, 4]\n\nCustomer 2: [2]\n\nLast laddu = 4"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_last_laddu (n : Nat) : Nat :=\nsorry\n"
"vc-theorems": "theorem find_last_laddu_bounds (n : Nat) (h : n > 0) : \n  let result\
  \ := find_last_laddu n\n  0 < result ∧ result ≤ n := \nsorry\n\n\n\n\ntheorem find_last_laddu_next_power_exceeds\
  \ (n : Nat) (h : n > 0) :\n  let result := find_last_laddu n\n  2 * result > n :=\n\
  sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval find_last_laddu 1\n\n/--\ninfo:\
  \ 4\n-/\n#guard_msgs in\n#eval find_last_laddu 5\n\n/--\ninfo: 8\n-/\n#guard_msgs\
  \ in\n#eval find_last_laddu 8\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
