"vc-description": "Given a certain integer ```n```, we need a function ```big_primefac_div()```,\
  \ that give an array with the highest prime factor and the highest divisor (not\
  \ equal to n).\n\nLet's see some cases:\n```python\nbig_primefac_div(100) == [5,\
  \ 50]\nbig_primefac_div(1969) == [179, 179]\n```\nIf n is a prime number the function\
  \ will output an empty list:\n```python\nbig_primefac_div(997) == []\n```\nIf ```n```\
  \ is an negative integer number, it should be considered the division with tha absolute\
  \ number of the value.\n```python\nbig_primefac_div(-1800) == [5, 900]\n```\nIf\
  \ ```n``` is a float type, will be rejected if it has a decimal part with some digits\
  \ different than 0. The output \"The number has a decimal part. No Results\". But\
  \  ```n ``` will be converted automatically to an integer if all the digits of the\
  \ decimal part are 0.\n\n```python\nbig_primefac_div(-1800.00) == [5, 900]\nbig_primefac_div(-1800.1)\
  \ == \"The number has a decimal part. No Results\"\n```\nOptimization and fast algorithms\
  \ are a key factor to solve this kata.\nHappy coding and enjoy it!"
"vc-preamble": "import Imports.AllImports\n\ndef isPrime (n : Nat) : Bool := sorry\n\
  \ndef sqrt (n : Int) : Int := sorry\n\n\ndef big_primefac_div (n : Int) : Option\
  \ (Int × Int) := sorry\n\ndef abs (n : Int) : Int := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isInteger (n : Int) : Bool := sorry \n\ntheorem big_primefac_div_int_valid\
  \ {n : Int}\n  (h : 2 ≤ n) (h2 : n ≤ 10^6) :\n  if isInteger n then\n    match big_primefac_div\
  \ n with\n    | none => True\n    | some (p, d) => p > 0 ∧ d > 0\n  else\n    big_primefac_div\
  \ n = none := sorry\n"
"vc-theorems": "theorem big_primefac_div_valid_pos_int {n : Int} \n  (h : 2 ≤ n) (h2\
  \ : n ≤ 10^6) :\n  match big_primefac_div n with\n  | none => ∀ i, 2 ≤ i → i ≤ sqrt\
  \ n → ¬(n % i = 0)  \n  | some (p, d) => \n    1 < p ∧ 1 < d ∧ \n    n % p = 0 ∧\
  \ n % d = 0 := sorry\n\n\ntheorem big_primefac_div_neg {n : Int}\n  (h : -10^6 ≤\
  \ n) (h2 : n ≤ -2) :\n  big_primefac_div n = big_primefac_div (abs n) := sorry\n\
  \n/--\ninfo: [5, 50]\n-/\n#guard_msgs in\n#eval big_primefac_div 100\n\n/--\ninfo:\
  \ []\n-/\n#guard_msgs in\n#eval big_primefac_div 997\n\n/--\ninfo: [5, 900]\n-/\n\
  #guard_msgs in\n#eval big_primefac_div -1800.0\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
