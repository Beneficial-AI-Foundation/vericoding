"vc-description": "Chef likes to solve difficult tasks. This time, he tried to solve\
  \ the Big Famous Unsolvable $A+B=C$. One of his friends played a prank on Chef and\
  \ randomly shuffled the bits in $A$ and $B$ (independently in each number). However,\
  \ the funny thing is that the sum of the resulting numbers remained $C$ even after\
  \ shuffling.\nChef is now wondering: in how many ways is it possible to shuffle\
  \ the bits of $A$ and the bits of $B$ such that their sum after shuffling is equal\
  \ to $C$? Let's denote the integers obtained by shuffling the bits of $A$ and $B$\
  \ by $A_s$ and $B_s$ respectively; two ways $(A_{s1}, B_{s1})$ and $(A_{s2}, B_{s2})$\
  \ are considered distinct if $A_{s1} \\neq A_{s2}$ or $B_{s1} \\neq B_{s2}$.\nIt\
  \ is allowed to add any number (possibly zero) of leading zeroes, i.e. bits $0$,\
  \ to $A$ and any number of leading zeroes to $B$ before shuffling the bits.\n\n\
  -----Input-----\n- The first line of the input contains a single integer $T$ denoting\
  \ the number of test cases. The description of $T$ test cases follows.\n- The first\
  \ and only line of each test case contains three space-separated integers $A$, $B$\
  \ and $C$. \n\n-----Output-----\nFor each test case, print a single line containing\
  \ one integer — the number of ways to shuffle the bits.\n\n-----Constraints-----\n\
  - $1 \\le T \\le 1,000$\n- $1 \\le A, B, C \\le 10^9$\n- $A+B = C$\n\n-----Subtasks-----\n\
  Subtask #1 (50 points): $1 \\le A, B, C \\le 10^5$\nSubtask #2 (50 points): original\
  \ constraints\n\n-----Example Input-----\n2\n1 2 3\n369 428 797\n\n-----Example\
  \ Output-----\n2\n56\n\n-----Explanation-----\nExample case 1: We can consider $A=01$\
  \ and $B=10$ in binary. Then, there are two possible ways: swapping the two bits\
  \ of $A$ and the two bits of $B$ ($A_s=10$, $B_s=01$ in binary, $2$ and $1$ in decimal\
  \ representation) or not shuffling any bits."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_set_bits (n : Nat) : Nat := sorry\n\ndef count_binary_ones\
  \ (n : Nat) : Nat := sorry\n"
"vc-theorems": "theorem count_set_bits_eq_binary_ones : ∀ n : Nat, \n  count_set_bits\
  \ n = count_binary_ones n := sorry\n\n\ntheorem count_set_bits_left_shift : ∀ n\
  \ : Nat, \n  n > 0 → count_set_bits (n <<< 1) = count_set_bits n := sorry\n\n\n\
  theorem count_set_bits_right_shift : ∀ n : Nat,\n  n > 0 → count_set_bits (n >>>\
  \ 1) = count_set_bits n - (n &&& 1) := sorry\n\n\ntheorem count_set_bits_or_bound\
  \ : ∀ a b : Nat,\n  count_set_bits (a ||| b) ≤ count_set_bits a + count_set_bits\
  \ b := sorry\n\n\ntheorem count_set_bits_and_bound : ∀ a b : Nat,\n  count_set_bits\
  \ (a &&& b) ≤ min (count_set_bits a) (count_set_bits b) := sorry\n\n/--\ninfo: 2\n\
  -/\n#guard_msgs in\n#eval ways_to_shuffle 1 2 3\n\n/--\ninfo: 56\n-/\n#guard_msgs\
  \ in\n#eval ways_to_shuffle 369 428 797\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
