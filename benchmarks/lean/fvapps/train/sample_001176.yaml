"vc-description": "Richik$Richik$ has just completed his engineering and has got a\
  \ job in one of the firms at Sabrina$Sabrina$ which is ranked among the top seven\
  \ islands in the world in terms of the pay scale. \nSince Richik$Richik$ has to\
  \ travel a lot to reach the firm, the owner assigns him a number X$X$, and asks\
  \ him to come to work only on the day which is a multiple of X$X$. Richik joins\
  \ the firm on 1-st day but starts working from X-th day. Richik$Richik$ is paid\
  \ exactly the same amount in Dollars as the day number. For example, if Richik$Richik$\
  \ has been assigned X=3$X = 3$, then he will be paid 3$3$ dollars and 6$6$ dollars\
  \ on the 3rd$3rd$ and 6th$6th$ day on which he comes for work. \nOn N−th$N-th$ day,\
  \ the owner calls up Richik$Richik$ and asks him not to come to his firm anymore.\
  \ Hence Richik$Richik$ demands his salary of all his working days together. Since\
  \ it will take a lot of time to add, Richik$Richik$ asks help from people around\
  \ him, let's see if you can help him out. \n\n-----Input:-----\n- First line will\
  \ contain T$T$, number of testcases. Then the testcases follow. \n- Each testcase\
  \ contains of a single line of input, two integers X,N$X, N$. \n\n-----Output:-----\n\
  For each testcase, output in a single line which is the salary which Richik$Richik$\
  \ demands. \n\n-----Constraints-----\n- 1≤T≤1000$1 \\leq T \\leq 1000$\n- 1≤X<=N≤107$1\
  \ \\leq X<=N \\leq 10^7$\n\n-----Sample Input:-----\n1\n3 10\n\n-----Sample Output:-----\n\
  18"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calculate_salary (x : Nat) (n : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem calculate_salary_positive (x n : Nat) (h₁ : x > 0) (h₂ : n\
  \ > 0) :\n  calculate_salary x n ≥ 0 :=\nsorry\n\n\ntheorem calculate_salary_arithmetic_sum\
  \ (x n : Nat) (h₁ : x > 0) (h₂ : n > 0) :\n  calculate_salary x n = (List.range\
  \ ((n + 1) / x)).foldl (fun acc i => acc + (i * x)) 0 :=\nsorry \n\n\ntheorem calculate_salary_greater_than_n\
  \ (x n : Nat) (h : x > n) :\n  calculate_salary x n = 0 :=\nsorry\n\n/--\ninfo:\
  \ 18\n-/\n#guard_msgs in\n#eval calculate_salary 3 10\n\n/--\ninfo: 30\n-/\n#guard_msgs\
  \ in\n#eval calculate_salary 2 10\n\n/--\ninfo: 50\n-/\n#guard_msgs in\n#eval calculate_salary\
  \ 5 20\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
