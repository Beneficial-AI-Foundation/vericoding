"vc-description": "Your task is to write a function that does just what the title\
  \ suggests (so, fair warning, be aware that you are not getting out of it just throwing\
  \ a lame bas sorting method there) with an array/list/vector of integers and the\
  \ expected number `n` of smallest elements to return.\n\nAlso:\n\n* the number of\
  \ elements to be returned cannot be higher than the array/list/vector length;\n\
  * elements can be duplicated;\n* in case of duplicates, just return them according\
  \ to the original order (see third example for more clarity).\n\nSame examples and\
  \ more in the test cases:\n\n```python\nfirst_n_smallest([1,2,3,4,5],3) == [1,2,3]\n\
  first_n_smallest([5,4,3,2,1],3) == [3,2,1]\nfirst_n_smallest([1,2,3,4,1],3) == [1,2,1]\n\
  first_n_smallest([1,2,3,-4,0],3) == [1,-4,0]\nfirst_n_smallest([1,2,3,4,5],0) ==\
  \ []\n```\n\n[Performance version by FArekkusu](https://www.codewars.com/kata/5aeed69804a92621a7000077)\
  \ also available."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def first_n_smallest (arr : List Int) (n : Nat) : List Int := sorry\n\
  \ntheorem first_n_smallest_length {arr : List Int} {n : Nat} (h : 0 < arr.length)\n\
  \  (hn : n ≤ arr.length) :\n  (first_n_smallest arr n).length = n := sorry\n"
"vc-theorems": "theorem first_n_smallest_contains_input {arr : List Int} {n : Nat}\
  \ (h : 0 < arr.length)\n  (hn : n ≤ arr.length) :\n  ∀ x ∈ first_n_smallest arr\
  \ n, x ∈ arr := sorry\n\n\n\n\n\n\ntheorem first_n_smallest_full_length {arr : List\
  \ Int} (h : 0 < arr.length) :\n  first_n_smallest arr arr.length = arr := sorry\n\
  \n/--\ninfo: [1, 2, 3]\n-/\n#guard_msgs in\n#eval first_n_smallest [1, 2, 3, 4,\
  \ 5] 3\n\n/--\ninfo: [3, 2, 1]\n-/\n#guard_msgs in\n#eval first_n_smallest [5, 4,\
  \ 3, 2, 1] 3\n\n/--\ninfo: [1, 2, 1]\n-/\n#guard_msgs in\n#eval first_n_smallest\
  \ [1, 2, 3, 4, 1] 3\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
