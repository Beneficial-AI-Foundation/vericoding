"vc-description": "```if:java\n___Note for Java users:___ Due to type checking in\
  \ Java, inputs and outputs are formated quite differently in this language. See\
  \ the footnotes of the description.\n\n\n```\n\nYou have the following lattice points\
  \ with their corresponding coordinates and each one with an specific colour.\n\n\
  \ ```\nPoint   [x ,  y]     Colour\n----------------------------\n  A     [ 3, \
  \ 4]     Blue\n  B     [-7, -1]     Red\n  C     [ 7, -6]     Yellow\n  D     [\
  \ 2,  5]     Yellow\n  E     [ 1, -5]     Red\n  F     [-1,  4]     Red\n  G   \
  \  [ 1,  7]     Red\n  H     [-3,  5]     Red\n  I     [-3, -5]     Blue\n  J  \
  \   [ 4,  1]     Blue\n```\nWe want to count the triangles that have the three vertices\
  \ with the same colour. The following picture shows the distribution of the points\
  \ in the plane with the required triangles.\n\n![source: imgur.com](http://i.imgur.com/sP0l1i1.png)\n\
  \nThe input that we will have for the field of lattice points described above is:\n\
  \n```\n[[[3, -4], \"blue\"],  [[-7, -1], \"red\"], [[7, -6], \"yellow\"], [[2, 5],\
  \ \"yellow\"],\n [[1, -5], \"red\"],   [[-1, 4], \"red\"],  [[1, 7], \"red\"], \
  \    [[-3, 5], \"red\"], \n [[-3, -5], \"blue\"], [[4, 1], \"blue\"] ]\n```\nWe\
  \ see the following result from it:\n\n```\nColour   Amount of Triangles       Triangles\n\
  Yellow         0                    -------\nBlue           1                  \
  \    AIJ\nRed            10                   BEF,BEG,BEH,BFG,BFH,BGH,EFG,EFH,EHG,FGH\n\
  ```\nAs we have 5 different points in red and each combination of 3 points that\
  \ are not aligned.\n\nWe need a code that may give us the following information\
  \ in order:\n\n```\n1) Total given points\n2) Total number of colours\n3) Total\
  \ number of possible triangles\n4) and 5) The colour (or colours, sorted alphabetically)\
  \ with the highest amount of triangles\n```\n\nIn Python our function will work\
  \ like:\n\n```\n[10, 3, 11, [\"red\",10]]) == count_col_triang([[[3, -4], \"blue\"\
  ],  [[-7, -1], \"red\"], [[7, -6], \"yellow\"], [[2, 5], \"yellow\"], \n       \
  \                                       [[1, -5], \"red\"],   [[-1, 4], \"red\"\
  ],  [[1, 7], \"red\"],     [[-3, 5], \"red\"],\n                               \
  \               [[-3, -5], \"blue\"], [[4, 1], \"blue\"] ])\n```\nIn the following\
  \ case we have some points that are aligned and we have less triangles that can\
  \ be formed:\n\n```\n[10, 3, 7, [\"red\", 6]] == count_col_triang([[[3, -4], \"\
  blue\"],  [[-7, -1], \"red\"], [[7, -6], \"yellow\"], [[2, 5], \"yellow\"],\n  \
  \                                          [[1, -5], \"red\"],   [[1, 1], \"red\"\
  ],   [[1, 7], \"red\"],     [[1, 4], \"red\"], \n                              \
  \              [[-3, -5], \"blue\"], [[4, 1], \"blue\"] ])\n```\nJust to see the\
  \ change with the previous case we have this:\n\n![source: imgur.com](http://i.imgur.com/cCgO7ql.png)\n\
  \nIn the special case that the list of points does not generate an even single triangle,\
  \ the output will be like this case:\n\n```\n[9, 3, 0, []] == count_col_triang([[[1,\
  \ -2], \"red\"], [[7, -6], \"yellow\"], [[2, 5], \"yellow\"], [[1, -5], \"red\"\
  ],\n                                  [[1, 1], \"red\"],   [[1, 7], \"red\"],  \
  \   [[1, 4], \"red\"],    [[-3, -5], \"blue\"], \n                             \
  \     [[4, 1], \"blue\"] ])\n```\nIt will be this case:\n\n![source: imgur.com](http://i.imgur.com/VB7t7Ij.png)\n\
  \nIf in the result we have two or more colours with the same maximum amount of triangles,\
  \ the last list should be like (e.g)\n\n```\n[35, 6, 35, [\"blue\", \"red\", \"\
  yellow\", 23]]     # having the names of the colours sorted alphabetically\n```\n\
  For the condition of three algined points A, B, C, you should know that the the\
  \ following determinant should be 0.\n\n```\n | xA    yA    1|\n | xB    yB    1|\
  \    = 0\n | xC    yC    1|\n\n```\nAssumptions:\n\n- In the list you have unique\
  \ points, so a point can have only one colour.\n\n- All the inputs are valid\n\n\
  Enjoy it!\n\n````if:java\n---\n\n___For java users:___\n\nTwo immutable objects,\
  \ `ColouredPoint` and `TriangleResult`, have been designed for you in the preloaded\
  \ part. You will receive inputs as lists of ColouredPoint objects and will return\
  \ a TriangleResult object. For the last one, you may note the organization of the\
  \ arguments of the constructor which differs a bit from the description above.\n\
  \nYou may find below the signatures of the available methods of these objects:\n\
  \n````"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_col_triang (points : List Point) : TriangleCount :=\n\
  sorry\n"
"vc-theorems": "theorem count_col_triang_basic_properties {points : List Point} :\n\
  \  let result := count_col_triang points;\n  result.totalPoints = points.length\
  \ ∧ \n  result.uniqueColors ≤ result.totalPoints ∧\n  result.triangleCount ≥ 0 :=\
  \ by sorry\n\n\ntheorem count_col_triang_max_info {points : List Point} :\n  let\
  \ result := count_col_triang points;\n  (result.maxColorInfo = none → result.triangleCount\
  \ = 0) ∧\n  (result.maxColorInfo.isSome → \n    match result.maxColorInfo with\n\
  \    | some (colors, count) => count > 0 ∧ colors.eraseDups = colors\n    | none\
  \ => True) := by sorry \n\n\ntheorem count_col_triang_vertical_collinear {points\
  \ : List Point} \n    (h : ∀ p ∈ points, p.coord.1 = 1) :\n  let result := count_col_triang\
  \ points;\n  result.triangleCount = 0 ∧ result.maxColorInfo = none := by sorry\n\
  \n\ntheorem count_col_triang_horizontal_collinear {points : List Point}\n    (h\
  \ : ∀ p ∈ points, p.coord.2 = 1) :\n  let result := count_col_triang points;\n \
  \ result.triangleCount = 0 ∧ result.maxColorInfo = none := by sorry\n\n/--\ninfo:\
  \ [10, 3, 11, ['red', 10]]\n-/\n#guard_msgs in\n#eval count_col_triang [[[3, -4],\
  \ \"blue\"], [[-7, -1], \"red\"], [[7, -6], \"yellow\"], [[2, 5], \"yellow\"], [[1,\
  \ -5], \"red\"], [[-1, 4], \"red\"], [[1, 7], \"red\"], [[-3, 5], \"red\"], [[-3,\
  \ -5], \"blue\"], [[4, 1], \"blue\"]]\n\n/--\ninfo: [10, 3, 7, ['red', 6]]\n-/\n\
  #guard_msgs in\n#eval count_col_triang [[[3, -4], \"blue\"], [[-7, -1], \"red\"\
  ], [[7, -6], \"yellow\"], [[2, 5], \"yellow\"], [[1, -5], \"red\"], [[1, 1], \"\
  red\"], [[1, 7], \"red\"], [[1, 4], \"red\"], [[-3, -5], \"blue\"], [[4, 1], \"\
  blue\"]]\n\n/--\ninfo: [9, 3, 0, []]\n-/\n#guard_msgs in\n#eval count_col_triang\
  \ [[[1, -2], \"red\"], [[7, -6], \"yellow\"], [[2, 5], \"yellow\"], [[1, -5], \"\
  red\"], [[1, 1], \"red\"], [[1, 7], \"red\"], [[1, 4], \"red\"], [[-3, -5], \"blue\"\
  ], [[4, 1], \"blue\"]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
