"vc-description": "At a lemonade stand, each lemonade costs $5. \nCustomers are standing\
  \ in a queue to buy from you, and order one at a time (in the order specified by\
  \ bills).\nEach customer will only buy one lemonade and pay with either a $5, $10,\
  \ or $20 bill.  You must provide the correct change to each customer, so that the\
  \ net transaction is that the customer pays $5.\nNote that you don't have any change in\
  \ hand at first.\nReturn true if and only if you can provide every customer with\
  \ correct change.\n \n\nExample 1:\nInput: [5,5,5,10,20]\nOutput: true\nExplanation:\
  \ \nFrom the first 3 customers, we collect three $5 bills in order.\nFrom the fourth\
  \ customer, we collect a $10 bill and give back a $5.\nFrom the fifth customer,\
  \ we give a $10 bill and a $5 bill.\nSince all customers got correct change, we\
  \ output true.\n\n\nExample 2:\nInput: [5,5,10]\nOutput: true\n\n\nExample 3:\n\
  Input: [10,10]\nOutput: false\n\n\nExample 4:\nInput: [5,5,10,10,20]\nOutput: false\n\
  Explanation: \nFrom the first two customers in order, we collect two $5 bills.\n\
  For the next two customers in order, we collect a $10 bill and give back a $5 bill.\n\
  For the last customer, we can't give change of $15 back because we only have two\
  \ $10 bills.\nSince not every customer received correct change, the answer is false.\n\
  \n \nNote:\n\n0 <= bills.length <= 10000\nbills[i] will be either 5, 10, or 20."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def lemonade_change (bills : List Nat) : Bool := sorry\n\ndef countChange\
  \ (state : Nat × Nat) (bill : Nat) : Nat × Nat :=\n  match bill with\n  | 5 => (state.1\
  \ + 1, state.2)\n  | 10 => (state.1 - 1, state.2 + 1)\n  | _ => if state.2 ≥ 1 ∧\
  \ state.1 ≥ 1 \n        then (state.1 - 1, state.2 - 1)\n        else (state.1 -\
  \ 3, state.2)\n"
"vc-theorems": "theorem lemonade_change_success \n  {bills : List Nat} \n  (h : lemonade_change\
  \ bills = true) :\n  ∀ p : List Nat, List.isPrefixOf p bills →\n  (let state :=\
  \ List.foldl countChange (0, 0) p;\n   state.1 ≥ 0 ∧ state.2 ≥ 0) := sorry\n\n\n\
  theorem lemonade_change_failure  \n  {bills : List Nat}\n  (h : lemonade_change\
  \ bills = false) :\n  ∃ p : List Nat, List.isPrefixOf p bills ∧\n  (let state :=\
  \ List.foldl countChange (0, 0) p;\n   state.1 < 0 ∨ state.2 < 0) := sorry\n\n\n\
  theorem lemonade_change_empty :\n  lemonade_change [] = true := sorry\n\n\ntheorem\
  \ lemonade_change_all_fives (n : Nat) :\n  lemonade_change (List.replicate n 5)\
  \ = true := sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval lemonade_change\
  \ [5, 5, 5, 10, 20]\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval lemonade_change\
  \ [5, 5, 10]\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval lemonade_change [5,\
  \ 5, 10, 10, 20]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
