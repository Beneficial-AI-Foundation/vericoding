"vc-description": "Chef had an interesting dream last night. He dreamed of a new revolutionary\
  \ chicken recipe. When he woke up today he tried very hard to reconstruct the ingredient\
  \ list. But, he could only remember certain ingredients. To simplify the problem,\
  \ the ingredient list can be represented by a string of lowercase characters 'a'\
  \ - 'z'.\nChef can recall some characters of the ingredient list, all the others,\
  \ he has forgotten. However, he is quite sure that the ingredient list was a palindrome.\n\
  You are given the ingredient list Chef dreamed last night. The forgotten characters\
  \ are represented by a question mark ('?'). Count the number of ways Chef can replace\
  \ the forgotten characters with characters 'a' - 'z' in such a way that resulting\
  \ ingredient list is a palindrome.\n\n-----Input-----\nThe first line of input contains\
  \ a single integer T, the number of test cases. T lines follow, each containing\
  \ a single non-empty string - the ingredient list as recalled by Chef. Whatever\
  \ letters he couldn't recall are represented by a '?'.\n\n-----Output-----\nFor\
  \ each test case, output a single line containing the number of valid ways the ingredient\
  \ list could be completed. Since the answers can be very large, output each answer\
  \ modulo 10,000,009.\n\n-----Example-----\nInput:\n5\n?\n??\nab?\na?c\naba\n\nOutput:\n\
  26\n26\n1\n0\n1\n\n-----Constraints-----\n\n1 ≤ T ≤ 20\n\n1 ≤ sum of length of all\
  \ input strings ≤ 1,000,000\n\nEach input string contains only lowercase roman letters\
  \ ('a' - 'z') or question marks."
"vc-preamble": "import Imports.AllImports\n\ndef isPalindrome (s : String) : Bool\
  \ := sorry\n\ndef countPalindromeCompletions (s : String) : Nat := sorry\n\n\ndef\
  \ reverseString (s : String) : String := sorry\n\ntheorem countPalindromeCompletions_nonnegative\
  \ (s : String) : \n  countPalindromeCompletions s ≥ 0 := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def mkPos (s : String) (i : Nat) (h : i < s.length) : String.Pos\
  \ := ⟨i⟩\n\ntheorem countPalindromeCompletions_impossible_case (s : String) (i :\
  \ Nat) \n  (h1 : i < s.length / 2)\n  (h2 : i < s.length)\n  (h3 : s.length - 1\
  \ - i < s.length)\n  (h4 : s.get (mkPos s i h2) ≠ '?' ∧ s.get (mkPos s (s.length\
  \ - 1 - i) h3) ≠ '?')\n  (h5 : s.get (mkPos s i h2) ≠ s.get (mkPos s (s.length -\
  \ 1 - i) h3)) :\n  countPalindromeCompletions s = 0 := sorry\n"
"vc-theorems": "theorem countPalindromeCompletions_bounded (s : String) :\n  countPalindromeCompletions\
  \ s ≤ 10000009 := sorry\n\n\ntheorem countPalindromeCompletions_all_question_marks\
  \ (s : String) (h : ∀ c ∈ s.data, c = '?') :\n  countPalindromeCompletions s = (26\
  \ ^ ((s.length + 1) / 2)) % 10000009 := sorry\n\n\ntheorem countPalindromeCompletions_no_question_marks\
  \ (s : String) (h : '?' ∉ s.data) :\n  countPalindromeCompletions s = if isPalindrome\
  \ s then 1 else 0 := sorry\n\n\ntheorem countPalindromeCompletions_deterministic\
  \ (s : String) :\n  countPalindromeCompletions s = countPalindromeCompletions s\
  \ := sorry\n\n\ntheorem countPalindromeCompletions_symmetry (s : String) :\n  countPalindromeCompletions\
  \ s = countPalindromeCompletions (reverseString s) := sorry\n\n/--\ninfo: 26\n-/\n\
  #guard_msgs in\n#eval count_palindrome_completions \"?\"\n\n/--\ninfo: 26\n-/\n\
  #guard_msgs in\n#eval count_palindrome_completions \"??\"\n\n/--\ninfo: 1\n-/\n\
  #guard_msgs in\n#eval count_palindrome_completions \"aba\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
