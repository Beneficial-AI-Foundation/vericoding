"vc-description": "Write a function that accepts an array of 10 integers (between\
  \ 0 and 9), that returns a string of those numbers in the form of a phone number.\n\
  \nExample:\n\n```python\ncreate_phone_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) # =>\
  \ returns \"(123) 456-7890\"\n```\n```f#\ncreatePhoneNumber [1; 2; 3; 4; 5; 6; 7;\
  \ 8; 9; 0] // => returns \"(123) 456-7890\"\n```\n\nThe returned format must be\
  \ correct in order to complete this challenge. \nDon't forget the space after the\
  \ closing parentheses!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def create_phone_number (numbers: List Nat) : String := sorry\n\
  \ntheorem phone_number_format (numbers: List Nat) \n  (h1: numbers.length = 10)\n\
  \  (h2: ∀ n ∈ numbers, n ≤ 9) :\n  let result := create_phone_number numbers;\n\
  \  result.length = 14 ∧ \n  result = s!\"({numbers[0]}{numbers[1]}{numbers[2]})\
  \ {numbers[3]}{numbers[4]}{numbers[5]}-{numbers[6]}{numbers[7]}{numbers[8]}{numbers[9]}\"\
  \ := sorry\n"
"vc-theorems": "theorem phone_number_matches_input (numbers: List Nat)\n  (h1: numbers.length\
  \ = 10)\n  (h2: ∀ n ∈ numbers, n ≤ 9) :\n  let result := create_phone_number numbers;\n\
  \  let digits := result.toList.filter Char.isDigit;\n  digits.map (λ c => c.toString.toNat!)\
  \ = numbers := sorry\n\n\ntheorem phone_number_type (numbers: List Nat)\n  (h1:\
  \ numbers.length = 10)\n  (h2: ∀ n ∈ numbers, n ≤ 9) :\n  let result := create_phone_number\
  \ numbers;\n  result.data.length > 0 := sorry\n\n/--\ninfo: '(123) 456-7890'\n-/\n\
  #guard_msgs in\n#eval create_phone_number [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n\n/--\n\
  info: '(111) 111-1111'\n-/\n#guard_msgs in\n#eval create_phone_number [1, 1, 1,\
  \ 1, 1, 1, 1, 1, 1, 1]\n\n/--\ninfo: '(000) 000-0000'\n-/\n#guard_msgs in\n#eval\
  \ create_phone_number [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
