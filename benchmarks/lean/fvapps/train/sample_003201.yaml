"vc-description": "## Terminal game move function\n\nIn this game, the hero moves\
  \ from left to right. The player rolls the dice and moves the number of spaces indicated\
  \ by the dice **two times**.\n\n~~~if-not:sql\nCreate a function for the terminal\
  \ game that takes the current position of the hero and the roll (1-6) and return\
  \ the new position.\n~~~\n~~~if:sql\nIn SQL, you will be given a table `moves` with\
  \ columns `position` and `roll`. Return a table which uses the current position\
  \ of the hero and the roll (1-6) and returns the new position in a column `res`.\n\
  ~~~\n\n### Example:\n```python\nmove(3, 6) should equal 15\n```\n\n```if:bf\n###\
  \ BF:\n\nSince this is an 8kyu kata, you are provided a modified runBF function,\
  \ numericRunBF, that automatically parses input and output for your ease.\n\nSee\
  \ the sample test cases to see what I mean: You can simply input two numbers and\
  \ get a number as output (unless you're doing something wrong), so it should be\
  \ convenient for you to modify the tests as you wish.\n\nOh, and you won't have\
  \ to worry about overflow, the correct answer will never be higher than 255. :)\n\
  ```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def move (position : Int) (roll : Int) : Int :=\n  sorry\n"
"vc-theorems": "theorem move_roll_proportional \n  (position roll : Int) \n  (h :\
  \ 1 ≤ roll ∧ roll ≤ 6) : \n  move position roll = position + 2 * roll :=\n  sorry\n\
  \n\ntheorem move_relative_distance\n  (position : Int) :\n  move position 1 < move\
  \ position 6 :=\n  sorry\n\n/--\ninfo: 8\n-/\n#guard_msgs in\n#eval move 0 4\n\n\
  /--\ninfo: 15\n-/\n#guard_msgs in\n#eval move 3 6\n\n/--\ninfo: 12\n-/\n#guard_msgs\
  \ in\n#eval move 2 5\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
