"vc-description": "Your task is to write a function named `do_math` that receives\
  \ a single argument. \nThis argument is a string that contains multiple whitespace\
  \ delimited numbers. Each number has a single alphabet letter somewhere within it.\n\
  ```\nExample : \"24z6 1x23 y369 89a 900b\"\n```\nAs shown above, this alphabet letter\
  \ can appear anywhere within the number. You have to extract the letters and sort\
  \ the numbers according to their corresponding letters. \n```\nExample : \"24z6\
  \ 1x23 y369 89a 900b\" will become 89 900 123 369 246 (ordered according to the\
  \ alphabet letter)\n```\nHere comes the difficult part, now you have to do a series\
  \ of computations on the numbers you have extracted.\n\n* The sequence of computations\
  \ are `+ - * /`. Basic math rules do **NOT** apply, you have to do each computation\
  \ in exactly this order.\n* This has to work for any size of numbers sent in (after\
  \ division, go back to addition, etc).\n* In the case of duplicate alphabet letters,\
  \ you have to arrange them according to the number that appeared first in the input\
  \ string.\n* Remember to also round the final answer to the nearest integer.\n\n\
  ```\nExamples :\n\"24z6 1x23 y369 89a 900b\" = 89 + 900 - 123 * 369 / 246 = 1299\n\
  \"24z6 1z23 y369 89z 900b\" = 900 + 369 - 246 * 123 / 89 = 1414\n\"10a 90x 14b 78u\
  \ 45a 7b 34y\" = 10 + 45 - 14 * 7 / 78 + 90 - 34 = 60\n``` \nGood luck and may the\
  \ CODE be with you!"
"vc-preamble": "import Imports.AllImports\n\ndef do_math (input : String) : Int :=\n\
  \  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def make_alpha_num (nums : List Int) (letters : List String) :\
  \ String :=\n  sorry\n"
"vc-theorems": "theorem do_math_returns_int {nums : List Int} {letters : List String}\n\
  \  (h_nums_size : nums.length ≥ 2 ∧ nums.length ≤ 10)\n  (h_letters_size : letters.length\
  \ ≥ 2 ∧ letters.length ≤ 10)\n  (h_nums_bound : ∀ n ∈ nums, 1 ≤ n ∧ n ≤ 1000)\n\
  \  (h_letters_single : ∀ l ∈ letters, l.length = 1)\n  : ∃ n : Int, do_math (make_alpha_num\
  \ nums letters) = n :=\n  sorry\n\n\ntheorem letter_position_invariant {letter :\
  \ String} \n  (h_letter_single : letter.length = 1) :\n  do_math (\"123\" ++ letter\
  \ ++ \" 456\" ++ letter) = \n  do_math (letter ++ \"123 \" ++ letter ++ \"456\"\
  ) :=\n  sorry\n\n/--\ninfo: 1414\n-/\n#guard_msgs in\n#eval do_math \"24z6 1z23\
  \ y369 89z 900b\"\n\n/--\ninfo: 1299\n-/\n#guard_msgs in\n#eval do_math \"24z6 1x23\
  \ y369 89a 900b\"\n\n/--\ninfo: 60\n-/\n#guard_msgs in\n#eval do_math \"10a 90x\
  \ 14b 78u 45a 7b 34y\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
