"vc-description": "Given a string containing a list of integers separated by commas,\
  \ write the function string_to_int_list(s) that takes said string and returns a\
  \ new list containing all integers present in the string, preserving the order.\n\
  \nFor example, give the string \"-1,2,3,4,5\", the function string_to_int_list()\
  \ should return [-1,2,3,4,5]\n\nPlease note that there can be one or more consecutive\
  \ commas whithout numbers, like so: \"-1,-2,,,,,,3,4,5,,6\""
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def string_to_int_list (s : String) : List Int := sorry\n\ntheorem\
  \ string_to_int_list_preserves_list (nums : List Int) :\n  let s := String.intercalate\
  \ \",\" (nums.map toString)\n  string_to_int_list s = nums :=\nsorry\n"
"vc-theorems": "theorem string_to_int_list_extra_commas (nums : List Int) (h : nums\
  \ ≠ []) :\n  let s := (String.intercalate \",\" (nums.map toString)).replace \"\
  ,\" \",,\"\n  string_to_int_list s = nums :=\nsorry\n\n\ntheorem string_to_int_list_empty_cases\
  \ :\n  string_to_int_list \"\" = [] ∧ \n  string_to_int_list \",\" = [] ∧\n  string_to_int_list\
  \ \",,,,\" = [] :=\nsorry\n\n/--\ninfo: [1, 2, 3, 4, 5]\n-/\n#guard_msgs in\n#eval\
  \ string_to_int_list \"1,2,3,4,5\"\n\n/--\ninfo: [1, 2, 3, 4, 5]\n-/\n#guard_msgs\
  \ in\n#eval string_to_int_list \"1,2,3,,,4,,5,,,\"\n\n/--\ninfo: []\n-/\n#guard_msgs\
  \ in\n#eval string_to_int_list \",,,,,,,,\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
