vc-description: |-
  Given a string containing a list of integers separated by commas, write the function string_to_int_list(s) that takes said string and returns a new list containing all integers present in the string, preserving the order.

  For example, give the string "-1,2,3,4,5", the function string_to_int_list() should return [-1,2,3,4,5]

  Please note that there can be one or more consecutive commas whithout numbers, like so: "-1,-2,,,,,,3,4,5,,6"
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def string_to_int_list (s : String) : List Int := sorry

  theorem string_to_int_list_preserves_list (nums : List Int) :
    let s := String.intercalate "," (nums.map toString)
    string_to_int_list s = nums :=
  sorry
vc-theorems: |
  theorem string_to_int_list_extra_commas (nums : List Int) (h : nums ≠ []) :
    let s := (String.intercalate "," (nums.map toString)).replace "," ",,"
    string_to_int_list s = nums :=
  sorry


  theorem string_to_int_list_empty_cases :
    string_to_int_list "" = [] ∧ 
    string_to_int_list "," = [] ∧
    string_to_int_list ",,,," = [] :=
  sorry

  /--
  info: [1, 2, 3, 4, 5]
  -/
  #guard_msgs in
  #eval string_to_int_list "1,2,3,4,5"

  /--
  info: [1, 2, 3, 4, 5]
  -/
  #guard_msgs in
  #eval string_to_int_list "1,2,3,,,4,,5,,,"

  /--
  info: []
  -/
  #guard_msgs in
  #eval string_to_int_list ",,,,,,,,"
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible
