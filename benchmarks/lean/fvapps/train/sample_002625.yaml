"vc-description": "## Welcome to my (amazing) kata!\n\nYou are given a gigantic number\
  \ to decode.  Each number is a code that alternates in a pattern between encoded\
  \ text and a smaller, encoded number.  The pattern's length varies with every test,\
  \ but the alternation between encoded text and an encoded number will always be\
  \ there.  Following this rule, each number tested begins with encoded text and ends\
  \ with an encoded number.\n\n## How the encoding works\n\nNow, we should probably\
  \ review how the string of numbers is formed - considering you have to unform it.\
  \ So, first, some text is taken, and encoded.  The system of encoding is taking\
  \ each letter's position in the alphabet and adding 100 to it.  For example, `m`\
  \ in the real text would be `113` in the code-number.\n\nAfter the text, there is\
  \ a binary number.  You should convert this number to a normal, base 10 decimal\
  \ (all of them can be converted into whole, non-negative numbers).\n\nSeparating\
  \ encoded text and encoded numbers, there is a `98`.  Because the numbers are in\
  \ binary, the only digits they use are '0' and '1', and each letter of the alphabet,\
  \ encoded, is between 101-127, all instances of `98` are to indicate a separation\
  \ between encoded text and encoded numbers.  There may also be a `98` at the very\
  \ end of the number.\n\nWhen you return your final answer, the text and numbers\
  \ should always be separated by a comma (`,`)\n\n## Example\n\n```python\ndecode(103115104105123101118119981001098113113113981000)\
  \ = \"codewars, 18, mmm, 8\"\n```\nThe part of the code until the first `98` can\
  \ be decoded to `\"codewars\"`.  `10010` is binary for `18`. `113113113` translates\
  \ to `\"mmm\"`.  And `1000` is binary for `8`.\n\nHere is a visualisation of the\
  \ example:\n\nGood luck!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def decode (n : Nat) : String := sorry\n\ntheorem decode_known_case1\
  \ :\n  decode 103115104105123101118119981001098 = \"codewars, 18\" := sorry\n"
"vc-theorems": "theorem decode_known_case2 :\n  decode 119112105105116981000981091199810019810612111498100000110001\
  \ = \"sleep, 8, is, 9, fun, 2097\" := sorry\n\n\ntheorem decode_known_case3 :\n\
  \  decode 120108105118105109119101112109107108120981001010101098102105108109114104125115121118105125105119981000\
  \ = \"thereisalight, 1194, behindyoureyes, 8\" := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
