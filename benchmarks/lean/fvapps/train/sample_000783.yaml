"vc-description": "In poker, you have 5 cards. There are 10 kinds of poker hands (from\
  \ highest to lowest):\n\n-  royal flush - ace, king, queen, jack and ten, all in\
  \ the same suit\n\n-  straight flush - five cards of the same suit in sequence,\
  \ such\nas 10,9,8,7,6 of clubs; ace can be counted both as the highest card or as\
  \ the\nlowest card - A,2,3,4,5 of hearts is a straight flush. But 4,3,2,A,K of hearts\
  \ is not a straight flush - it's just a flush.\n\n-  four of a kind - four cards\
  \ of the same rank, such as four kings.\n\n-  full house - three cards of one rank\
  \ plus two cards of another rank\n\n-  flush - five cards of the same suit (but\
  \ not a straight flush)\n\n-  straight - five cards in order - just like the straight\
  \ flush, but mixed suits\n\n-  three of a kind - three cards of one rank and two\
  \ other cards\n\n-  two pairs - two cards of one rank, two cards of another rank,\
  \ and one more card\n\n-  pair - two cards of the same rank\n\n-  high card - none\
  \ of the above\n\nWrite a program that will help you play poker by telling you what\
  \ kind of hand you have.\n\n-----Input-----\n\nThe first line of input contains\
  \ the number of test cases (no more than 20). Each test case consists of one line\
  \ - five space separated cards. Each card is represented by a two-letter (or digit)\
  \ word. The first character is the rank (A,K,Q,J,T,9,8,7,6,5,4,3 or 2), the second\
  \ character is the suit (S,H,D,C standing for spades, hearts, diamonds and clubs).\
  \ The cards can be in any order (but they will not repeat).\n\n-----Output-----\n\
  \nFor each test case output one line describing the type of a hand, exactly like\
  \ in the list above.\n\n-----Example-----\nInput:\n3\nAH KH QH TH JH\nKH 5S 3C 5C\
  \ 7D\nQH QD 2S QC 2C\n\nOutput:\nroyal flush\npair\nfull house"
"vc-preamble": "import Imports.AllImports\n\ndef Rank.toNat : Rank → Nat \n  | Ace\
  \ => 14\n  | Two => 2\n  | Three => 3\n  | Four => 4\n  | Five => 5\n  | Six =>\
  \ 6\n  | Seven => 7\n  | Eight => 8\n  | Nine => 9\n  | Ten => 10\n  | Jack => 11\n\
  \  | Queen => 12\n  | King => 13\n\ninductive HandResult where\n  | RoyalFlush\n\
  \  | StraightFlush\n  | FourOfAKind\n  | FullHouse\n  | Flush\n  | Straight\n  |\
  \ ThreeOfAKind\n  | TwoPairs\n  | Pair\n  | HighCard\n  deriving BEq, Repr\n\nstructure\
  \ Card where\n  rank : Rank\n  suit : Suit\n  deriving BEq\n\nabbrev Hand := List\
  \ Card\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def evaluate_poker_hand (h : Hand) : HandResult := \n  sorry\n"
"vc-theorems": "theorem evaluate_poker_hand_returns_valid_result (h : Hand) \n  (h5\
  \ : h.length = 5) (hunique : h.Nodup) :\n  ∃ (result : HandResult), evaluate_poker_hand\
  \ h = result :=\nsorry\n\n\ntheorem royal_flush_requires_specific_cards (h : Hand)\n\
  \  (h5 : h.length = 5) (hunique : h.Nodup) :\n  evaluate_poker_hand h = HandResult.RoyalFlush\
  \ →\n  (∃ (s : Suit), ∀ (c : Card), c ∈ h → c.suit = s) ∧\n  h.map Card.rank = [Rank.Ace,\
  \ Rank.King, Rank.Queen, Rank.Jack, Rank.Ten] :=\nsorry\n\n\ntheorem straight_consecutive_ranks\
  \ (h : Hand)\n  (h5 : h.length = 5) (hunique : h.Nodup) :\n  evaluate_poker_hand\
  \ h = HandResult.Straight ∨ \n  evaluate_poker_hand h = HandResult.StraightFlush\
  \ →\n  let ranks := (h.map Card.rank).map Rank.toNat\n  ∃ (min : Nat), ranks = [min,\
  \ min+1, min+2, min+3, min+4] ∨ \n                 ranks = [14, 2, 3, 4, 5] :=\n\
  sorry\n\n\ntheorem flush_same_suit (h : Hand)\n  (h5 : h.length = 5) (hunique :\
  \ h.Nodup) :\n  evaluate_poker_hand h = HandResult.Flush ∨ \n  evaluate_poker_hand\
  \ h = HandResult.StraightFlush ∨\n  evaluate_poker_hand h = HandResult.RoyalFlush\
  \ →\n  ∃ (s : Suit), ∀ (c : Card), c ∈ h → c.suit = s :=\nsorry\n\n\ntheorem four_of_kind_has_four_same_rank\
  \ (h : Hand)\n  (h5 : h.length = 5) (hunique : h.Nodup) :\n  evaluate_poker_hand\
  \ h = HandResult.FourOfAKind →\n  ∃ r : Rank, (h.filter (fun c ↦ c.rank == r)).length\
  \ = 4 :=\nsorry\n\n\ntheorem three_of_kind_has_three_same_rank (h : Hand)\n  (h5\
  \ : h.length = 5) (hunique : h.Nodup) :\n  evaluate_poker_hand h = HandResult.ThreeOfAKind\
  \ →\n  ∃ r : Rank, (h.filter (fun c ↦ c.rank == r)).length = 3 ∧\n  ¬∃ r : Rank,\
  \ (h.filter (fun c ↦ c.rank == r)).length = 2 :=\nsorry\n\n\ntheorem two_pairs_has_two_pairs\
  \ (h : Hand)\n  (h5 : h.length = 5) (hunique : h.Nodup) :\n  evaluate_poker_hand\
  \ h = HandResult.TwoPairs →\n  ∃ r1 r2 : Rank, r1 ≠ r2 ∧\n  (h.filter (fun c ↦ c.rank\
  \ == r1)).length = 2 ∧\n  (h.filter (fun c ↦ c.rank == r2)).length = 2 :=\nsorry\n\
  \n/--\ninfo: 'royal flush'\n-/\n#guard_msgs in\n#eval evaluate_poker_hand [\"AH\"\
  , \"KH\", \"QH\", \"TH\", \"JH\"]\n\n/--\ninfo: 'pair'\n-/\n#guard_msgs in\n#eval\
  \ evaluate_poker_hand [\"KH\", \"5S\", \"3C\", \"5C\", \"7D\"]\n\n/--\ninfo: 'full\
  \ house'\n-/\n#guard_msgs in\n#eval evaluate_poker_hand [\"QH\", \"QD\", \"2S\"\
  , \"QC\", \"2C\"]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
