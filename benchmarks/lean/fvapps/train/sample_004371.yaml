"vc-description": "Our AAA company is in need of some software to help with logistics:\
  \ you will be given the width and height of a map, a list of x coordinates and a\
  \ list of y coordinates of the supply points, starting to count from the top left\
  \ corner of the map as 0.\n\nYour goal is to return a two dimensional array/list\
  \ with every item having the value of the distance of the square itself from the\
  \ closest supply point expressed as a simple integer.\n\nQuick examples:\n\n```python\n\
  logistic_map(3,3,[0],[0])\n#returns\n#[[0,1,2],\n# [1,2,3],\n# [2,3,4]]\nlogistic_map(5,2,[0,4],[0,0])\n\
  #returns\n#[[0,1,2,1,0],\n# [1,2,3,2,1]]\n```\n\nRemember that our company is operating\
  \ with trucks, not drones, so you can simply use Manhattan distance. If supply points\
  \ are present, they are going to be within the boundaries of the map; if no supply\
  \ point is present on the map, just return `None`/`nil`/`null` in every cell.\n\n\
  ```python\nlogistic_map(2,2,[],[])\n#returns\n#[[None,None],\n# [None,None]]\n```\n\
  \n**Note:** this one is taken (and a bit complicated) from a problem a real world\
  \ AAA company [whose name I won't tell here] used in their interview. It was done\
  \ by a friend of mine. It is nothing that difficult and I assume it is their own\
  \ version of the FizzBuzz problem, but consider candidates were given about 30 mins\
  \ to solve it."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def logistic_map (width height : Nat) (xs ys : List Nat) : List\
  \ (List (Option Nat)) := sorry\n\ntheorem logistic_map_dimensions (width height\
  \ : Nat) (xs ys : List Nat) :\n  let result := logistic_map width height xs ys\n\
  \  result.length = height ∧ \n  ∀ row ∈ result, row.length = width := sorry\n"
"vc-theorems": "theorem logistic_map_empty_input (width height : Nat) :\n  let result\
  \ := logistic_map width height [] []\n  ∀ row ∈ result, ∀ cell ∈ row, cell = none\
  \ := sorry\n\n\ntheorem logistic_map_supply_points (width height : Nat) (xs ys :\
  \ List Nat) :\n  ∀ (x y : Nat), x ∈ xs → y ∈ ys → x < width → y < height →\n  (logistic_map\
  \ width height xs ys).get? y >>= (·.get? x) = some (some 0) := sorry\n\n\ntheorem\
  \ logistic_map_triangle_inequality (width height : Nat) (xs ys : List Nat) :\n \
  \ let result := logistic_map width height xs ys\n  (∀ y < height, ∀ x < width -\
  \ 1,\n    ∀ v1 v2, result.get? y >>= (·.get? x) = some (some v1) → \n    result.get?\
  \ y >>= (·.get? (x+1)) = some (some v2) → \n    v1 ≤ v2 + 1 ∧ v2 ≤ v1 + 1) ∧\n \
  \ (∀ y < height - 1, ∀ x < width,\n    ∀ v1 v2, result.get? y >>= (·.get? x) = some\
  \ (some v1) → \n    result.get? (y+1) >>= (·.get? x) = some (some v2) →\n    v1\
  \ ≤ v2 + 1 ∧ v2 ≤ v1 + 1) := sorry\n\n\ntheorem logistic_map_single_point (width\
  \ height : Nat) :\n  let result := logistic_map width height [0] [0]\n  width >\
  \ 0 → height > 0 →\n  result.get? 0 >>= (·.get? 0) = some (some 0) ∧\n  ∀ y < height,\
  \ ∀ x < width,\n    result.get? y >>= (·.get? x) = some (some (x + y)) := sorry\n\
  \n/--\ninfo: expected1\n-/\n#guard_msgs in\n#eval logistic_map 3 3 [0] [0]\n\n/--\n\
  info: expected2\n-/\n#guard_msgs in\n#eval logistic_map 5 2 [0, 4] [0, 0]\n\n/--\n\
  info: expected3\n-/\n#guard_msgs in\n#eval logistic_map 2 2 [] []\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
