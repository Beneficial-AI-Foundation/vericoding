"vc-description": "Karlsson has recently discovered a huge stock of berry jam jars\
  \ in the basement of the house. More specifically, there were $2n$ jars of strawberry\
  \ and blueberry jam.\n\nAll the $2n$ jars are arranged in a row. The stairs to the\
  \ basement are exactly in the middle of that row. So when Karlsson enters the basement,\
  \ he sees exactly $n$ jars to his left and $n$ jars to his right.\n\nFor example,\
  \ the basement might look like this: [Image] \n\nBeing the starightforward man he\
  \ is, he immediately starts eating the jam. In one minute he chooses to empty either\
  \ the first non-empty jar to his left or the first non-empty jar to his right.\n\
  \nFinally, Karlsson decided that at the end the amount of full strawberry and blueberry\
  \ jam jars should become the same.\n\nFor example, this might be the result: [Image]\
  \ He has eaten $1$ jar to his left and then $5$ jars to his right. There remained\
  \ exactly $3$ full jars of both strawberry and blueberry jam. \n\nJars are numbered\
  \ from $1$ to $2n$ from left to right, so Karlsson initially stands between jars\
  \ $n$ and $n+1$.\n\nWhat is the minimum number of jars Karlsson is required to empty\
  \ so that an equal number of full strawberry and blueberry jam jars is left?\n\n\
  Your program should answer $t$ independent test cases.\n\n\n-----Input-----\n\n\
  The first line contains one integer $t$ ($1 \\le t \\le 1000$) — the number of test\
  \ cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\\
  le n \\le 10^5$).\n\nThe second line of each test case contains $2n$ integers $a_1,\
  \ a_2, \\dots, a_{2n}$ ($1 \\le a_i \\le 2$) — $a_i=1$ means that the $i$-th jar\
  \ from the left is a strawberry jam jar and $a_i=2$ means that it is a blueberry\
  \ jam jar.\n\nIt is guaranteed that the sum of $n$ over all test cases does not\
  \ exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case print the answer to\
  \ it — the minimum number of jars Karlsson is required to empty so that an equal\
  \ number of full strawberry and blueberry jam jars is left.\n\n\n-----Example-----\n\
  Input\n4\n6\n1 1 1 2 2 1 2 1 2 1 1 2\n2\n1 2 1 2\n3\n1 1 1 1 1 1\n2\n2 1 1 1\n\n\
  Output\n6\n0\n6\n2\n\n\n\n-----Note-----\n\nThe picture from the statement describes\
  \ the first test case.\n\nIn the second test case the number of strawberry and blueberry\
  \ jam jars is already equal.\n\nIn the third test case Karlsson is required to eat\
  \ all $6$ jars so that there remain $0$ jars of both jams.\n\nIn the fourth test\
  \ case Karlsson can empty either the second and the third jars or the third and\
  \ the fourth one. The both scenarios will leave $1$ jar of both jams."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_jams (n : Nat) (jams : List Nat) : Nat :=\nsorry\n"
"vc-theorems": "theorem solve_jams_non_negative (n : Nat) (jams : List Nat) :\n  n\
  \ > 0 → jams.length = 2*n → solve_jams n jams ≥ 0 :=\nsorry\n\n\ntheorem solve_jams_upper_bound\
  \ (n : Nat) (jams : List Nat) :\n  n > 0 → jams.length = 2*n → solve_jams n jams\
  \ ≤ 2*n :=\nsorry\n\n\ntheorem solve_jams_all_ones (n : Nat) :\n  n > 0 → solve_jams\
  \ n (List.replicate (2*n) 1) = 2*n :=\nsorry\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n\
  #eval solve_jams 6 [1, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 2]\n\n/--\ninfo: 0\n-/\n#guard_msgs\
  \ in\n#eval solve_jams 2 [1, 2, 1, 2]\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval\
  \ solve_jams 3 [1, 1, 1, 1, 1, 1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
