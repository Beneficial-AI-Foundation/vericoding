"vc-description": "You are given sequences A and B consisting of non-negative integers.\n\
  The lengths of both A and B are N, and the sums of the elements in A and B are equal.\n\
  The i-th element in A is A_i, and the i-th element in B is B_i.\nTozan and Gezan\
  \ repeats the following sequence of operations:\n - If A and B are equal sequences,\
  \ terminate the process.\n - Otherwise, first Tozan chooses a positive element in\
  \ A and decrease it by 1.\n - Then, Gezan chooses a positive element in B and decrease\
  \ it by 1.\n - Then, give one candy to Takahashi, their pet.\nTozan wants the number\
  \ of candies given to Takahashi until the process is terminated to be as large as\
  \ possible, while Gezan wants it to be as small as possible.\nFind the number of\
  \ candies given to Takahashi when both of them perform the operations optimally.\n\
  \n-----Constraints-----\n - 1 \\leq N \\leq 2 × 10^5\n - 0 \\leq A_i,B_i \\leq 10^9(1\\\
  leq i\\leq N)\n - The sums of the elements in A and B are equal.\n - All values\
  \ in input are integers.\n\n-----Input-----\nInput is given from Standard Input\
  \ in the following format:\nN\nA_1 B_1\n:\nA_N B_N\n\n-----Output-----\nPrint the\
  \ number of candies given to Takahashi when both Tozan and Gezan perform the operations\
  \ optimally.\n\n-----Sample Input-----\n2\n1 2\n3 2\n\n-----Sample Output-----\n\
  2\n\nWhen both Tozan and Gezan perform the operations optimally, the process will\
  \ proceed as follows:\n - Tozan decreases A_1 by 1.\n - Gezan decreases B_1 by 1.\n\
  \ - One candy is given to Takahashi.\n - Tozan decreases A_2 by 1.\n - Gezan decreases\
  \ B_1 by 1.\n - One candy is given to Takahashi.\n - As A and B are equal, the process\
  \ is terminated."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve (n : Nat) (pairs : List (Nat × Nat)) : Nat := sorry \n\
  \ntheorem solve_non_negative (n : Nat) (pairs : List (Nat × Nat)) :\n  solve n pairs\
  \ ≥ 0 := sorry\n\n\n"
"vc-theorems": "theorem solve_upper_bound (n : Nat) (pairs : List (Nat × Nat)) :\n\
  \  solve n pairs ≤ pairs.foldl (fun acc p => acc + p.1) 0 := sorry\n\n\ntheorem\
  \ solve_positive_implies_exists_gt (n : Nat) (pairs : List (Nat × Nat)) :\n  solve\
  \ n pairs > 0 → ∃ p ∈ pairs, p.1 > p.2 := sorry\n\n\ntheorem solve_is_total_minus_one_b\
  \ (n : Nat) (pairs : List (Nat × Nat)) :\n  solve n pairs > 0 → \n  ∃ b, b ∈ pairs.map\
  \ (fun p => p.2) ∧ \n       solve n pairs = pairs.foldl (fun acc p => acc + p.1)\
  \ 0 - b := sorry\n\n\ntheorem solve_identical_pairs (n : Nat) (val : Nat) :\n  let\
  \ pairs := List.replicate n (val, val)\n  solve n pairs = 0 := sorry\n\n/--\ninfo:\
  \ 2\n-/\n#guard_msgs in\n#eval solve 2 [(1, 2), (3, 2)]\n\n/--\ninfo: 9\n-/\n#guard_msgs\
  \ in\n#eval solve 3 [(8, 3), (0, 1), (4, 8)]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n\
  #eval solve 1 [(1, 1)]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded_and_plausible"
