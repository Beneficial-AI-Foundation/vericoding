"vc-description": "Two sisters, A and B, play the piano every day. During the day,\
  \ they can play in any order. That is, A might play first and then B, or it could\
  \ be B first and then A. But each one of them plays the piano exactly once per day.\
  \ They maintain a common log, in which they write their name whenever they play.\n\
  You are given the entries of the log, but you're not sure if it has been tampered\
  \ with or not. Your task is to figure out whether these entries could be valid or\
  \ not.\n\n-----Input-----\n- The first line of the input contains an integer $T$\
  \ denoting the number of test cases. The description of the test cases follows.\n\
  - The first line of each test case contains a string $s$ denoting the entries of\
  \ the log.\n\n-----Output-----\n- For each test case, output yes or no according\
  \ to the answer to the problem.\n\n-----Constraints-----\n- $1 \\le T \\le 500$\n\
  - $2 \\le |s| \\le 100$\n- $|s|$ is even\n- Each character of $s$ is either 'A'\
  \ or 'B'\n\n-----Example Input-----\n4\nAB\nABBA\nABAABB\nAA\n\n-----Example Output-----\n\
  yes\nyes\nno\nno\n\n-----Explanation-----\nTestcase 1: There is only one day, and\
  \ both A and B have played exactly once. So this is a valid log. Hence 'yes'.\n\
  Testcase 2: On the first day, A has played before B, and on the second day, B has\
  \ played first. Hence, this is also a valid log.\nTestcase 3: On the first day,\
  \ A played before B, but on the second day, A seems to have played twice. This cannot\
  \ happen, and hence this is 'no'."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def check_log_validity (s : String) : String :=\n  sorry\n"
"vc-theorems": "theorem odd_length_log_invalid {s : String} :\n  s.length % 2 ≠ 0\
  \ → check_log_validity s = \"no\" :=\nsorry\n\n\ntheorem identical_adjacent_chars_invalid\
  \ {s : String} {i : Nat} :\n  s.length % 2 = 0 →\n  i < s.length →\n  i % 2 = 0\
  \ →\n  i + 1 < s.length →\n  s.get ⟨i⟩ = s.get ⟨i + 1⟩ →\n  check_log_validity s\
  \ = \"no\" :=\nsorry\n\n\ntheorem no_identical_pairs_valid {s : String} :\n  s.length\
  \ % 2 = 0 →\n  (∀ i, i < s.length → i % 2 = 0 → i + 1 < s.length → s.get ⟨i⟩ ≠ s.get\
  \ ⟨i + 1⟩) →\n  check_log_validity s = \"yes\" :=\nsorry\n\n/--\ninfo: 'yes'\n-/\n\
  #guard_msgs in\n#eval check_log_validity \"AB\"\n\n/--\ninfo: 'yes'\n-/\n#guard_msgs\
  \ in\n#eval check_log_validity \"ABBA\"\n\n/--\ninfo: 'no'\n-/\n#guard_msgs in\n\
  #eval check_log_validity \"AA\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
