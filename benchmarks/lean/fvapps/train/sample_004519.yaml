"vc-description": "Be u(n) a sequence beginning with:\n```\nu[1]  = 1,  u[2]  = 1,\
  \  u[3]  = 2,  u[4]  = 3,  u[5]  = 3,  u[6] = 4,\n\nu[7]  = 5,  u[8]  = 5,  u[9]\
  \  = 6,  u[10] = 6,  u[11] = 6,  u[12] = 8,\n\nu[13] = 8,  u[14] = 8,  u[15] = 10,\
  \ u[16] = 9,  u[17] = 10, u[18] = 11,\n\nu[19] = 11, u[20] = 12, u[21] = 12, u[22]\
  \ = 12, u[23] = 12 etc...\n\n```\n- How is`u[8]` calculated?\n\nWe have `u[7] =\
  \ 5` and `u[6] = 4`. These numbers tell us that we have to go backwards from index\
  \ `8` to index `8 - 5 = 3` and to index `8 - 4 = 4` so to index `3` and `4`.\n\n\
  ``` u[3] = 2``` and ```u[4] = 3```  hence ```u[8] = u[3] + u[4] = 2 + 3 = 5```.\n\
  \n- Another example: let us calculate `u[13]`. At indexes `12` and `11` we have\
  \ `8` and `6`. Going backwards of `8` and `6` from `13` we get indexes `13 - 8 =\
  \ 5` and `13 - 6 = 7`. \n\n``` u[5] = 3```  and ``` u[7] = 5```  so ``` u[13] =\
  \ u[5] + u[7] = 3 + 5 = 8``` .\n\n## Task\n- 0) Express u(n) as a function of n,\
  \ u[n - 1], u[n - 2]. (not tested).\n\n\n- 1) Given two numbers `n, k (integers\
  \ > 2)` write the function `length_sup_u_k(n, k) or lengthSupUK or length-sup-u-k`\
  \ returning the number of terms `u[i] >= k` with `1 <= i <= n`. \nIf we look above\
  \ we can see that between `u[1]` and `u[23]` we have four `u[i]` greater or equal\
  \ to `12`: `length_sup_u_k(23, 12) => 4`\n\n\n- 2) Given `n (integer > 2)` write\
  \ the function `comp(n)` returning the number of times where a term of `u` is less\
  \ than its **predecessor** up to and including u[n]. \n\n## Examples:\n\n```\nu(900)\
  \ => 455 (not tested)\nu(90000) => 44337 (not tested)\n\nlength_sup_u_k(23, 12)\
  \ => 4\nlength_sup_u_k(50, 10) => 35\nlength_sup_u_k(500, 100) => 304\n\ncomp(23)\
  \ => 1 (since only u(16) < u(15))\ncomp(100) => 22\ncomp(200) => 63\n```\n\n## Note:\
  \ Shell\nShell tests only `lengthSupUk`"
"vc-preamble": "import Imports.AllImports\n\ndef length_sup_u_k (n : Nat) (k : Nat)\
  \ : Nat :=\n  sorry\n\n\ndef comp (n : Nat) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def u1 : List Nat :=\n  sorry\n"
"vc-theorems": "theorem length_sup_u_k_bounds (n k : Nat) (h : n > 0) :\n  0 ≤ length_sup_u_k\
  \ n k ∧ length_sup_u_k n k ≤ n :=\n  sorry\n\n\ntheorem comp_bounds (n : Nat) (h\
  \ : n > 1) :\n  0 ≤ comp n ∧ comp n ≤ n - 1 :=\n  sorry\n\n\n\n\ntheorem comp_deterministic\
  \ (n : Nat) :\n  comp n = comp n :=\n  sorry\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n\
  #eval length_sup_u_k 23 12\n\n/--\ninfo: 35\n-/\n#guard_msgs in\n#eval length_sup_u_k\
  \ 50 10\n\n/--\ninfo: 304\n-/\n#guard_msgs in\n#eval length_sup_u_k 500 100\n\n\
  /--\ninfo: 1\n-/\n#guard_msgs in\n#eval comp 23\n\n/--\ninfo: 22\n-/\n#guard_msgs\
  \ in\n#eval comp 100\n\n/--\ninfo: 63\n-/\n#guard_msgs in\n#eval comp 200\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
