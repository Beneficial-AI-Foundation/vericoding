"vc-description": "The mobile application store has a new game called \"Subway Roller\"\
  .\n\nThe protagonist of the game Philip is located in one end of the tunnel and\
  \ wants to get out of the other one. The tunnel is a rectangular field consisting\
  \ of three rows and n columns. At the beginning of the game the hero is in some\
  \ cell of the leftmost column. Some number of trains rides towards the hero. Each\
  \ train consists of two or more neighbouring cells in some row of the field.\n\n\
  All trains are moving from right to left at a speed of two cells per second, and\
  \ the hero runs from left to right at the speed of one cell per second. For simplicity,\
  \ the game is implemented so that the hero and the trains move in turns. First,\
  \ the hero moves one cell to the right, then one square up or down, or stays idle.\
  \ Then all the trains move twice simultaneously one cell to the left. Thus, in one\
  \ move, Philip definitely makes a move to the right and can move up or down. If\
  \ at any point, Philip is in the same cell with a train, he loses. If the train\
  \ reaches the left column, it continues to move as before, leaving the tunnel.\n\
  \nYour task is to answer the question whether there is a sequence of movements of\
  \ Philip, such that he would be able to get to the rightmost column.\n\n [Image]\
  \ \n\n\n-----Input-----\n\nEach test contains from one to ten sets of the input\
  \ data. The first line of the test contains a single integer t (1 ≤ t ≤ 10 for pretests\
  \ and tests or t = 1 for hacks; see the Notes section for details) — the number\
  \ of sets.\n\nThen follows the description of t sets of the input data. \n\nThe\
  \ first line of the description of each set contains two integers n, k (2 ≤ n ≤\
  \ 100, 1 ≤ k ≤ 26) — the number of columns on the field and the number of trains.\
  \ Each of the following three lines contains the sequence of n character, representing\
  \ the row of the field where the game is on. Philip's initial position is marked\
  \ as 's', he is in the leftmost column. Each of the k trains is marked by some sequence\
  \ of identical uppercase letters of the English alphabet, located in one line. Distinct\
  \ trains are represented by distinct letters. Character '.' represents an empty\
  \ cell, that is, the cell that doesn't contain either Philip or the trains.\n\n\n\
  -----Output-----\n\nFor each set of the input data print on a single line word YES,\
  \ if it is possible to win the game and word NO otherwise.\n\n\n-----Examples-----\n\
  Input\n2\n16 4\n...AAAAA........\ns.BBB......CCCCC\n........DDDDD...\n16 4\n...AAAAA........\n\
  s.BBB....CCCCC..\n.......DDDDD....\n\nOutput\nYES\nNO\n\nInput\n2\n10 4\ns.ZZ......\n\
  .....AAABB\n.YYYYYY...\n10 4\ns.ZZ......\n....AAAABB\n.YYYYYY...\n\nOutput\nYES\n\
  NO\n\n\n\n-----Note-----\n\nIn the first set of the input of the first sample Philip\
  \ must first go forward and go down to the third row of the field, then go only\
  \ forward, then go forward and climb to the second row, go forward again and go\
  \ up to the first row. After that way no train blocks Philip's path, so he can go\
  \ straight to the end of the tunnel.\n\nNote that in this problem the challenges\
  \ are restricted to tests that contain only one testset."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def check_subway_escape (grid : List String) (n k : Nat) : String\
  \ := sorry\n\ntheorem check_subway_escape_returns_valid_output \n  (n k: Nat) \n\
  \  (h1: n ≥ 5) (h2: n ≤ 20) (h3: k ≥ 1) (h4: k ≤ 10) :\n  let grid := [\n    String.mk\
  \ (List.replicate n '.'),\n    String.mk ('s' :: List.replicate (n-1) '.'),\n  \
  \  String.mk (List.replicate n '.')\n  ]\n  let result := check_subway_escape grid\
  \ n k\n  result = \"YES\" ∨ result = \"NO\" := sorry\n"
"vc-theorems": "theorem empty_path_possible\n  (n: Nat)\n  (h1: n ≥ 5) (h2: n ≤ 20)\
  \ :\n  let grid := [\n    String.mk (List.replicate n '.'),\n    String.mk ('s'\
  \ :: List.replicate (n-1) '.'),\n    String.mk (List.replicate n '.')\n  ]\n  check_subway_escape\
  \ grid n 4 = \"YES\" := sorry\n\n\ntheorem blocked_path_impossible\n  (n: Nat)\n\
  \  (h1: n ≥ 5) (h2: n ≤ 20) :\n  let grid := [\n    String.mk (List.replicate n\
  \ 'A'),\n    String.mk ('s' :: List.replicate (n-1) 'A'),\n    String.mk (List.replicate\
  \ n 'A')\n  ]\n  check_subway_escape grid n 4 = \"NO\" := sorry\n\n\ntheorem minimal_grid_escape_possible\
  \ :\n  check_subway_escape [\"...\", \"s..\", \"...\"] 3 1 = \"YES\" := sorry\n\n\
  /--\ninfo: 'YES'\n-/\n#guard_msgs in\n#eval check_subway_escape [\"...AAAAA........\"\
  , \"s.BBB......CCCCC\", \"........DDDDD...\"] 16 4\n\n/--\ninfo: 'NO'\n-/\n#guard_msgs\
  \ in\n#eval check_subway_escape [\"...AAAAA........\", \"s.BBB....CCCCC..\", \"\
  .......DDDDD....\"] 16 4\n\n/--\ninfo: 'YES'\n-/\n#guard_msgs in\n#eval check_subway_escape\
  \ [\"s.ZZ......\", \".....AAABB\", \".YYYYYY...\"] 10 4\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
