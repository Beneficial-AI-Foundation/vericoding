"vc-description": "You are trying to cross a river by jumping along stones. Every\
  \ time you land on a stone, you hop forwards by the value of that stone. If you\
  \ skip *over* a stone then its value doesn't affect you in any way. Eg:\n\n```\n\
  \ x--x-----x-->\n[1][2][5][1]\n\n```\n\nOf course, crossing from the other side\
  \ might give you a different answer:\n\n```\n <--------x--x\n   [1][2][5][1]\n\n\
  ```\n\nGiven an array of positive integers, return the total number of steps it\
  \ would take to go all the way across the river (and past the end of the array)\
  \ and then all the way back. All arrays will contain at least one element, and may\
  \ contain up to 100 elements. \n\n### Examples\n\n```\n  x--x-----x-->\n [1][2][1][2]\n\
  <----x-----x\n\ntherefore hop_across([1,2,1,2]) = 3 + 2 = 5\n\n   x-----x--------x------>\n\
  \  [2][2][3][1][1][2][1]\n<--------x--x-----x--x\n\ntherefore hop_across([2,2,3,1,1,2,1])\
  \ = 3 + 4 = 7\n\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def hop_across (lst : List Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem hop_across_min_hops {lst : List Nat} (h : lst.length > 0)\
  \ :\n  hop_across lst ≥ 2 := sorry\n\n\ntheorem hop_across_symmetric {lst : List\
  \ Nat} :\n  hop_across lst = hop_across lst.reverse := sorry\n\n\ntheorem hop_across_max_hops\
  \ {lst : List Nat} :\n  hop_across lst ≤ 2 * lst.length := sorry\n\n\ntheorem hop_across_single_element\
  \ {x : Nat} :\n  hop_across [x] = 2 := sorry\n\n\ntheorem hop_across_monotone_scaling\
  \ {lst : List Nat} (h : lst.length ≥ 2) \n  (h_sorted : ∀ i j, i < j → j < lst.length\
  \ → lst.get ⟨i, sorry⟩ ≤ lst.get ⟨j, sorry⟩) :\n  hop_across (lst.map (· * 2)) ≤\
  \ hop_across lst := sorry\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval hop_across\
  \ [1, 2, 1, 2]\n\n/--\ninfo: 7\n-/\n#guard_msgs in\n#eval hop_across [2, 2, 3, 1,\
  \ 1, 2, 1]\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval hop_across [1]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
