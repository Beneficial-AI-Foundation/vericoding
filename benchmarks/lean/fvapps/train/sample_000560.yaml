"vc-description": "Chef found a strange string yesterday - a string of signs s, where\
  \ each sign is either a '<', '=' or a '>'. Let N be the length of this string. Chef\
  \ wants to insert N + 1 positive integers into this sequence and make it valid.\
  \ A valid sequence is a sequence where every sign is preceded and followed by an\
  \ integer, and the signs are correct. That is, if a sign '<' is preceded by the\
  \ integer a and followed by an integer b, then a should be less than b. Likewise\
  \ for the other two signs as well. \nChef can take some positive integers in the\
  \ range [1, P] and use a number in the range as many times as he wants.\nHelp Chef\
  \ find the minimum possible P with which he can create a valid sequence.\n\n-----Input-----\n\
  The first line of the input contains an integer T denoting the number of test cases.\
  \ The description of T test cases follows.\nThe only line of each test case contains\
  \ the string of signs s, where each sign is either '<', '=' or a '>'. \n\n-----Output-----\n\
  For each test case, output a single line containing an integer corresponding to\
  \ the minimum possible P. \n\n-----Constraints-----\n- 1 ≤ T, |s| ≤ 105\n- 1 ≤ Sum\
  \ of |s| over all test cases in a single test file ≤ 106\n\n-----Subtasks-----\n\
  Subtask #1 (30 points)\n- 1 ≤ T, |s| ≤ 103\n- 1 ≤ Sum of |s| over all test cases\
  \ in a single test file ≤ 104\n\nSubtask #2 (70 points)\n- Original constraints\n\
  \n-----Example-----\nInput:\n4\n<<<\n<><\n<=>\n<=<\n\nOutput:\n4\n2\n2\n3\n\n-----Explanation-----\n\
  Here are some possible valid sequences which can be formed with the minimum P for\
  \ each of the test cases:\n1 < 2 < 3 < 4\n1 < 2 > 1 < 2\n1 < 2 = 2 > 1\n1 < 2 =\
  \ 2 < 3"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_min_valid_sequence (s : String) : Nat :=\n  sorry\n"
"vc-theorems": "theorem output_positive (s : String) :\n  find_min_valid_sequence\
  \ s ≥ 1 :=\n  sorry\n\n\ntheorem equals_removal (s : String) :\n  let no_equals\
  \ := s.replace \"=\" \"\"\n  find_min_valid_sequence s = find_min_valid_sequence\
  \ no_equals :=\n  sorry\n\n\n\n\ntheorem empty_string :\n  find_min_valid_sequence\
  \ \"\" = 1 :=\n  sorry\n\n\ntheorem single_equals :\n  find_min_valid_sequence \"\
  =\" = 1 :=\n  sorry\n\n\ntheorem multiple_equals :\n  find_min_valid_sequence \"\
  ===\" = 1 :=\n  sorry\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval find_min_valid_sequence\
  \ \"<<<\"\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval find_min_valid_sequence \"\
  <><\"\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval find_min_valid_sequence \"<=>\"\
  \n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval find_min_valid_sequence \"<=<\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
