"vc-description": "Sam has opened a new sushi train restaurant - a restaurant where\
  \ sushi is served on plates that travel around the bar on a conveyor belt and customers\
  \ take the plate that they like.\n\nSam is using Glamazon's new visual recognition\
  \ technology that allows a computer to record the number of plates at a customer's\
  \ table and the colour of those plates.  The number of plates is returned as a string.\
  \  For example, if a customer has eaten 3 plates of sushi on a red plate the computer\
  \ will return the string 'rrr'.\n\nCurrently, Sam is only serving sushi on red plates\
  \ as he's trying to attract customers to his restaurant.  There are also small plates\
  \ on the conveyor belt for condiments such as ginger and wasabi - the computer notes\
  \ these in the string that is returned as a space ('rrr r' //denotes 4 plates of\
  \ red sushi and a plate of condiment).\n\nSam would like your help to write a program\
  \ for the cashier's machine to read the string and return the total amount a customer\
  \ has to pay when they ask for the bill.  The current price for the dishes are as\
  \ follows:  \n\n * Red plates of sushi ('r') - $2 each, but if a customer eats 5\
  \ plates the 5th one is free.\n * Condiments (' ') - free.\n\n```\nInput: String\n\
  Output: Number\n\nExamples:\n\nInput: 'rr'  Output: 4\nInput: 'rr rrr' Output: 8\n\
  Input: 'rrrrr rrrrr' Output: 16\n\n```"
"vc-preamble": "import Imports.AllImports\n\ndef total_bill (s : String) : Nat :=\n\
  \  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def countChar (s : String) (c : Char) : Nat :=\n  sorry\n"
"vc-theorems": "theorem total_bill_nonnegative (s : String) :\n  total_bill s ≥ 0\
  \ :=\n  sorry\n  \n\ntheorem total_bill_even (s : String) :\n  total_bill s % 2\
  \ = 0 :=\n  sorry\n  \n\ntheorem total_bill_spaces (s : String) :\n  total_bill\
  \ s = total_bill (s.replace \" \" \"\") :=\n  sorry\n\n\n\n\ntheorem total_bill_repeated\
  \ (n : Nat) (s : String) :\n  s = String.mk (List.replicate n 'r') →\n  total_bill\
  \ s = 2 * (n - n/5) :=\n  sorry\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval total_bill\
  \ \"rr\"\n\n/--\ninfo: 8\n-/\n#guard_msgs in\n#eval total_bill \"rr rrr\"\n\n/--\n\
  info: 16\n-/\n#guard_msgs in\n#eval total_bill \"rrrrr rrrrr\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
