"vc-description": "You are given $n$ arrays that can have different sizes. You also\
  \ have a table with $w$ columns and $n$ rows. The $i$-th array is placed horizontally\
  \ in the $i$-th row. You can slide each array within its row as long as it occupies\
  \ several consecutive cells and lies completely inside the table.\n\nYou need to\
  \ find the maximum sum of the integers in the $j$-th column for each $j$ from $1$\
  \ to $w$ independently.\n\n [Image] Optimal placements for columns $1$, $2$ and\
  \ $3$ are shown on the pictures from left to right. \n\nNote that you can exclude\
  \ any array out of a column provided it remains in the window. In this case its\
  \ value is considered to be zero.\n\n\n-----Input-----\n\nThe first line contains\
  \ two integers $n$ ($1 \\le n \\le 10^{6}$) and $w$ ($1 \\le w \\le 10^{6}$) — the\
  \ number of arrays and the width of the table.\n\nEach of the next $n$ lines consists\
  \ of an integer $l_{i}$ ($1 \\le l_{i} \\le w$), the length of the $i$-th array,\
  \ followed by $l_{i}$ integers $a_{i1}, a_{i2}, \\ldots, a_{il_i}$ ($-10^{9} \\\
  le a_{ij} \\le 10^{9}$) — the elements of the array.\n\nThe total length of the\
  \ arrays does no exceed $10^{6}$.\n\n\n-----Output-----\n\nPrint $w$ integers, the\
  \ $i$-th of them should be the maximum sum for column $i$.\n\n\n-----Examples-----\n\
  Input\n3 3\n3 2 4 8\n2 2 5\n2 6 3\n\nOutput\n10 15 16 \n\nInput\n2 2\n2 7 8\n1 -8\n\
  \nOutput\n7 8 \n\n\n\n-----Note-----\n\nIllustration for the first example is in\
  \ the statement."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def maximum (l : List Int) : Int := sorry\n\ndef slidemax (nums\
  \ : List Int) (k : Nat) : List Int := sorry\n"
"vc-theorems": "theorem slidemax_matches_window_max\n  (nums : List Int) (k : Nat)\n\
  \  (h1 : 0 < k) \n  (h2 : k ≤ nums.length) :\n  slidemax nums k = \n    (List.range\
  \ (nums.length + 1 - k)).map (fun i =>\n      maximum (List.take k (List.drop i\
  \ nums))) := sorry\n\n\ntheorem slidemax_length\n  (nums : List Int) (k : Nat)\n\
  \  (h1 : 0 < k)\n  (h2 : k ≤ nums.length) :\n  (slidemax nums k).length = nums.length\
  \ + 1 - k := sorry\n\n/--\ninfo: [10, 15, 16]\n-/\n#guard_msgs in\n#eval solve 3\
  \ 3 [[3, 2, 4, 8], [2, 2, 5], [2, 6, 3]]\n\n/--\ninfo: [7, 8]\n-/\n#guard_msgs in\n\
  #eval solve 2 2 [[2, 7, 8], [1, -8]]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
