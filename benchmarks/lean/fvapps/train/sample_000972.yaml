"vc-description": "Chef works in a similar way to a travelling salesman ― he always\
  \ travels to new cities in order to sell his delicious dishes.\nToday, Chef is planning\
  \ to visit $N$ cities (numbered $1$ through $N$). There is a direct way to travel\
  \ between each pair of cities. Each city has a specific temperature; let's denote\
  \ the temperature in the $i$-th city by $C_i$. Chef has a fixed temperature tolerance\
  \ $D$ with the following meaning: for each pair of cities $a$ and $b$, he may travel\
  \ from city $a$ directly to city $b$ only if $|C_a-C_b| \\le D$, otherwise he would\
  \ catch a heavy flu because of the sudden change in temperature.\nChef starts from\
  \ city $1$. Is he able to visit all $N$ cities in such a way that each city is visited\
  \ exactly once?\nNotes:\n- Chef is not able to travel through a city without visiting\
  \ it.\n- City $1$ is visited at the beginning.\n- It is not necessary to be able\
  \ to travel directly to city $1$ from the last city Chef visits.\n\n-----Input-----\n\
  - The first line of the input contains a single integer $T$ denoting the number\
  \ of test cases. The description of $T$ test cases follows.\n- The first line of\
  \ each test case contains two space-separated integers $N$ and $D$.\n- The second\
  \ line contains $N$ space-separated integers $C_1, C_2, \\ldots, C_N$.\n\n-----Output-----\n\
  For each test case, print a single line containing the string \"YES\" (without quotes)\
  \ if Chef can visit all cities or \"NO\" (without quotes) if he cannot.\n\n-----Constraints-----\n\
  - $1 \\le T \\le 1,000$\n- $2 \\le N \\le 10^5$\n- $0 \\le D \\le 10^9$\n- $0 \\\
  le C_i \\le 10^9$ for each valid $i$\n- the sum of $N$ over all test cases does\
  \ not exceed $10^6$\n\n-----Subtasks-----\nSubtask #1 (20 points):\n- $N \\le 1,000$\n\
  - the sum of $N$ over all test cases does not exceed $10,000$\nSubtask #2 (80 points):\
  \ original constraints\n\n-----Example Input-----\n2\n5 3\n3 2 1 4 5\n5 4\n10 1\
  \ 3 2 9\n\n-----Example Output-----\nYES\nNO"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def can_visit_cities (n : Nat) (d : Nat) (cities : List Nat) :\
  \ String := sorry\n\ntheorem can_visit_cities_returns_yes_or_no \n  (n : Nat)\n\
  \  (d : Nat) \n  (cities : List Nat)\n  (h1 : n ≥ 2)\n  (h2 : n ≤ 100) : \n  can_visit_cities\
  \ n d cities = \"YES\" ∨ can_visit_cities n d cities = \"NO\" := sorry\n"
"vc-theorems": "theorem adjacent_diff_exceeds_d_implies_no\n  (n : Nat)\n  (d : Nat)\n\
  \  (cities : List Nat)\n  (h1 : n ≥ 2)\n  (h2 : n ≤ 100)\n  (i : Nat)\n  (h3 : i\
  \ < cities.length - 1)\n  (h4 : match (cities.get? i), (cities.get? (i+1)) with\n\
  \        | some x, some y => y > x + d\n        | _, _ => False) :\n  can_visit_cities\
  \ n d cities = \"NO\" := sorry\n\n\ntheorem identical_temps_implies_yes\n  (n :\
  \ Nat)\n  (h1 : n ≥ 2)\n  (h2 : n ≤ 100) :\n  let cities := List.replicate n 1\n\
  \  can_visit_cities n 0 cities = \"YES\" := sorry\n\n/--\ninfo: 'YES'\n-/\n#guard_msgs\
  \ in\n#eval can_visit_cities *test1\n\n/--\ninfo: 'NO'\n-/\n#guard_msgs in\n#eval\
  \ can_visit_cities *test2\n\n/--\ninfo: 'NO'\n-/\n#guard_msgs in\n#eval can_visit_cities\
  \ *test3\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
