"vc-description": "Story:\nIn the realm of numbers, the apocalypse has arrived. Hordes\
  \ of zombie numbers have infiltrated and are ready to turn everything into undead.\
  \ The properties of zombies are truly apocalyptic: they reproduce themselves unlimitedly\
  \ and freely interact with each other. Anyone who equals them is doomed. Out of\
  \ an infinite number of natural numbers, only a few remain. This world needs a hero\
  \ who leads remaining numbers in hope for survival: The highest number to lead those\
  \ who still remain.\n\nBriefing:\nThere is a list of positive natural numbers. Find\
  \ the largest number that cannot be represented as the sum of this numbers, given\
  \ that each number can be added unlimited times. Return this number, either 0 if\
  \ there are no such numbers, or -1 if there are an infinite number of them.\n\n\
  Example:\n```\nLet's say [3,4] are given numbers. Lets check each number one by\
  \ one:\n1 - (no solution) - good\n2 - (no solution) - good\n3 = 3 won't go\n4 =\
  \ 4 won't go\n5 - (no solution) - good\n6 = 3+3 won't go\n7 = 3+4 won't go\n8 =\
  \ 4+4 won't go\n9 = 3+3+3 won't go\n10 = 3+3+4 won't go\n11 = 3+4+4 won't go\n13\
  \ = 3+3+3+4 won't go\n```\n...and so on. So 5 is the biggest 'good'. return 5\n\n\
  Test specs:\nRandom cases will input up to 10 numbers with up to 1000 value\n\n\
  Special thanks:\nThanks to Voile-sama, mathsisfun-sama, and Avanta-sama for heavy\
  \ assistance. And to everyone who tried and beaten the kata ^_^"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def survivor (nums : List Nat) : Int := sorry\n\ntheorem survivor_result_constraint\
  \ (nums : List Nat) :\n  let result := survivor nums\n  result = -1 ∨ result = 0\
  \ ∨ result > 0 := sorry\n"
"vc-theorems": "theorem survivor_empty_list :\n  survivor [] = -1 := sorry\n\n\ntheorem\
  \ survivor_contains_one (nums : List Nat) :\n  nums.contains 1 → survivor nums =\
  \ 0 := sorry\n\nprivate def listGcd : List Nat → Nat := sorry\n\n\ntheorem survivor_gcd\
  \ (nums : List Nat) :\n  nums ≠ [] → listGcd nums > 1 → survivor nums = -1 := sorry\n\
  \nprivate def listProd : List Nat → Nat := sorry\n\n\ntheorem survivor_product_bound\
  \ (nums : List Nat) :\n  let result := survivor nums\n  result ≥ 0 → nums ≠ [] →\
  \ result < listProd nums := sorry\n\n\ntheorem survivor_singleton (n : Nat) :\n\
  \  n > 0 → survivor [n] = (if n = 1 then 0 else -1) := sorry\n\n\ntheorem survivor_coprime_pair\
  \ (n : Nat) :\n  n ≥ 2 →\n  let result := survivor [n, n+1]\n  result ≥ 0 ∧ result\
  \ < n * (n+1) := sorry\n\n/--\ninfo: 59\n-/\n#guard_msgs in\n#eval survivor [7,\
  \ 11]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval survivor [1, 7, 15]\n\n/--\ninfo:\
  \ -1\n-/\n#guard_msgs in\n#eval survivor [2, 10]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
