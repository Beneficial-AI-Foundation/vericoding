"vc-description": "=====Problem Statement=====\nGiven a list of rational numbers,find\
  \ their product.\n\nConcept\nThe reduce() function applies a function of two arguments\
  \ cumulatively on a list of objects in succession from left to right to reduce it\
  \ to one value. Say you have a list, say [1,2,3] and you have to find its sum.\n\
  \n>>> reduce(lambda x, y : x + y,[1,2,3])\n6\n\nYou can also define an initial value.\
  \ If it is specified, the function will assume initial value as the value given,\
  \ and then reduce. It is equivalent to adding the initial value at the beginning\
  \ of the list. For example:\n\n>>> reduce(lambda x, y : x + y, [1,2,3], -3)\n3\n\
  \n>>> from fractions import gcd\n>>> reduce(gcd, [2,4,8], 3)\n1\n\n=====Input Format=====\n\
  First line contains n, the number of rational numbers.\nThe ith of next n lines\
  \ contain two integers each, the numerator (N_i) and denominator (D_i) of the ith\
  \ rational number in the list.\n\n=====Constraints=====\n1≤n≤100\n1≤N_i,D_i≤10^9\n\
  \n=====Output Format=====\nPrint only one line containing the numerator and denominator\
  \ of the product of the numbers in the list in its simplest form, i.e. numerator\
  \ and denominator have no common divisor other than 1."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def product (fracs: List (Int × Nat)): Int × Nat := sorry\n\ntheorem\
  \ product_matches_fraction_multiplication \n  (fracs: List (Int × Nat)) (h: fracs.length\
  \ > 0):\n  ∃ (x: Int × Nat), product fracs = x := sorry\n"
"vc-theorems": "theorem product_result_is_simplified \n  (fracs : List (Int × Nat))\
  \ (h: fracs.length > 0):\n  let res := product fracs\n  ∃ g : Nat, g > 0 ∧ Nat.gcd\
  \ res.1.natAbs res.2 = g := sorry \n\n\ntheorem single_fraction_unchanged\n  (n:\
  \ Int) (d: Nat) (h: d > 0):\n  product [(n,d)] = (n,d) := sorry\n\n\ntheorem empty_list_error\n\
  \  (h: ¬∃ (x: Int × Nat), product [] = x):\n  True := sorry\n\n/--\ninfo: (5, 8)\n\
  -/\n#guard_msgs in\n#eval product [(1, 2), (3, 4), (10, 6)]\n\n/--\ninfo: (1, 1)\n\
  -/\n#guard_msgs in\n#eval product [(1, 1)]\n\n/--\ninfo: (1, 1)\n-/\n#guard_msgs\
  \ in\n#eval product [(2, 3), (3, 2)]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
