"vc-description": "You are Dastan, the great Prince of Persia!\nAfter searching long\
  \ for the mysterious 'Sands of Time', you have finally arrived at the gates of the\
  \ city that hosts the ancient temple of the gods. However, the gate is locked and\
  \ it can only be opened with a secret code, which you need to obtain by solving\
  \ the following puzzle:\nThere is a table in front of you, with $N$ coins placed\
  \ in a row and numbered $1$ through $N$ from left to right. For each coin, you know\
  \ whether it is initially showing heads or tails. You have to perform exactly $K$\
  \ operations. In one operation, you should remove the rightmost coin present on\
  \ the table, and if this coin was showing heads right before it was removed, then\
  \ you should also flip all the remaining coins. (If a coin was showing heads, then\
  \ after it is flipped, it is showing tails, and vice versa.)\nThe code needed to\
  \ enter the temple is the number of coins which, after these $K$ operations are\
  \ performed, have not been removed and are showing heads. Can you find this number?\
  \ The fate of Persia lies in your hands…\n\n-----Input-----\n- The first line of\
  \ the input contains a single integer $T$ denoting the number of test cases. The\
  \ description of $T$ test cases follows.\n- The first line of each test case contains\
  \ two space-separated integers $N$ and $K$.\n- The second line contains $N$ space-separated\
  \ characters. For each valid $i$, the $i$-th of these characters is 'H' if the $i$-th\
  \ coin is initially showing heads or 'T' if it is showing tails.\n\n-----Output-----\n\
  For each test case, print a single line containing one integer ― the number of coins\
  \ that are showing heads after $K$ operations.\n\n-----Constraints-----\n- $1 \\\
  le T \\le 200$\n- $1 \\le K < N \\le 100$\n\n-----Subtasks-----\nSubtask #1 (100\
  \ points): original constraints\n\n-----Example Input-----\n3\n5 3\nH T T H T\n\
  7 4\nH H T T T H H\n6 1\nT H T H T T\n\n-----Example Output-----\n1\n2\n2"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_heads_after_operations (n k : Nat) (coins : List Bool)\
  \ : Nat :=\nsorry\n\n-- Theorem reflecting that count should be non-negative and\
  \ bounded"
"vc-theorems": "theorem count_heads_bounds {n k : Nat} {coins : List Bool}\n  (h1\
  \ : n > 0)\n  (h2 : k > 0)\n  (h3 : k ≤ n) :\n  let result := count_heads_after_operations\
  \ n k coins\n  0 ≤ result ∧ result ≤ n - k :=\nsorry\n\n-- Theorem reflecting result\
  \ type and bounds for any valid k\n\ntheorem k_operations_result {coins : List Bool}\
  \ {k : Nat}\n  (h1 : coins.length > 0)\n  (h2 : k > 0)\n  (h3 : k ≤ coins.length)\
  \ :\n  let result := count_heads_after_operations coins.length k coins\n  0 ≤ result\
  \ ∧ result ≤ coins.length - k :=\nsorry\n\n-- Theorem for alternating pattern case\n\
  \ntheorem alternating_pattern {n : Nat}\n  (h1 : n ≥ 2) :\n  let coins := List.replicate\
  \ (n/2) true ++ List.replicate (n/2) false ++ (if n % 2 = 1 then [true] else [])\n\
  \  let result := count_heads_after_operations n 1 coins\n  0 ≤ result ∧ result ≤\
  \ n - 1 :=\nsorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval count_heads_after_operations\
  \ 5 3 \"H T T H T\"\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval count_heads_after_operations\
  \ 7 4 \"H H T T T H H\"\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval count_heads_after_operations\
  \ 6 1 \"T H T H T T\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
