"vc-description": "Create an identity matrix of the specified size( >= 0).\n\nSome\
  \ examples:\n\n```\n(1)  =>  [[1]]\n\n(2) => [ [1,0],\n         [0,1] ]\n\n    \
  \   [ [1,0,0,0,0],\n         [0,1,0,0,0],\n(5) =>   [0,0,1,0,0],\n         [0,0,0,1,0],\n\
  \         [0,0,0,0,1] ]   \n\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def get_matrix (n : Nat) : List (List Nat) := sorry\n\ntheorem\
  \ matrix_size_matches_input (n : Nat) (h : n ≤ 100) :\n  let matrix := get_matrix\
  \ n\n  (matrix.length = n) ∧ \n  (n > 0 → ∀ row ∈ matrix, row.length = n) := sorry\n"
"vc-theorems": "theorem matrix_has_ones_on_diagonal (n : Nat) (h : n ≤ 100) :\n  let\
  \ matrix := get_matrix n\n  n > 0 → ∀ i < n, (matrix.get! i).get! i = 1 := sorry\n\
  \n\ntheorem matrix_has_zeros_off_diagonal (n : Nat) (h : n ≤ 100) :\n  let matrix\
  \ := get_matrix n\n  n > 0 → ∀ i j, i < n → j < n → i ≠ j →\n  (matrix.get! i).get!\
  \ j = 0 := sorry\n\n\ntheorem empty_matrix :\n  get_matrix 0 = [] := sorry\n\n/--\n\
  info: []\n-/\n#guard_msgs in\n#eval get_matrix 0\n\n/--\ninfo: [[1]]\n-/\n#guard_msgs\
  \ in\n#eval get_matrix 1\n\n/--\ninfo: [[1, 0], [0, 1]]\n-/\n#guard_msgs in\n#eval\
  \ get_matrix 2\n\n/--\ninfo: [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n-/\n#guard_msgs\
  \ in\n#eval get_matrix 3\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
