"vc-description": "Devu is a disastrous oracle: his predictions about various events\
  \ of your life are horrifying. Instead of providing good luck, he \"blesses\" you\
  \ with bad luck. The secret behind his wickedness is a hidden omen which is a string\
  \ of length m. On your visit to him, you can ask a lot of questions about your future,\
  \ each of which should be a string of length m. In total you asked him n such questions,\
  \ denoted by strings s1, s2, ... , sn of length m each. Each of the question strings\
  \ is composed of the characters 'a' and 'b' only.\n\nAmount of bad luck this visit\
  \ will bring you is equal to the length of longest common subsequence (LCS) of all\
  \ the question strings and the hidden omen string. Of course, as the omen string\
  \ is hidden, you are wondering what could be the least value of bad luck you can\
  \ get.\n\nCan you find out what could be the least bad luck you can get? Find it\
  \ fast, before Devu tells you any bad omens.\n\n-----Input-----\nThe first line\
  \ of the input contains an integer T denoting the number of test cases. The description\
  \ of T test cases follows.\nFirst line of each test case contains a single integer\
  \ n denoting number of strings.\nFor each of next n lines, the ith line contains\
  \ the string si.\n\n-----Output-----\nFor each test case, output a single integer\
  \ corresponding to the answer of the problem. \n\n\n-----Constraints-----\n- All\
  \ the strings (including the hidden omen) contain the characters 'a' and 'b' only.\n\
  \nSubtask #1: (40 points) \n\n- 1 ≤ T, n, m ≤ 14\n\nSubtask #2: (60 points) \n\n\
  - 1 ≤ T, n, m ≤ 100\n\n-----Example-----\nInput:3\n2\nab\nba\n2\naa\nbb\n3\naabb\n\
  abab\nbaab\n\nOutput:1\n0\n2\n\n-----Explanation-----\nIn the first example, the\
  \ minimum value of LCS of all the strings is 1, the string by oracle can be one\
  \ of these {aa, ab, ba, bb}. \n\nIn the second example, whatever string oracle has\
  \ does not matter, LCS will always be zero."
"vc-preamble": "import Imports.AllImports\n\ndef find_min_bad_luck (strings : List\
  \ String) : Nat := sorry\n\ntheorem find_min_bad_luck_non_negative (strings : List\
  \ String) :\n  find_min_bad_luck strings ≥ 0 := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def countChar (c : Char) (s : String) : Nat := sorry"
"vc-theorems": "theorem find_min_bad_luck_leq_min_len (strings : List String) : \n\
  \  strings ≠ [] → find_min_bad_luck strings ≤ List.foldr (fun s acc => min s.length\
  \ acc) (strings[0]!.length) strings.tail := sorry\n\n\n/--\ninfo: 1\n-/\n#guard_msgs\
  \ in\n#eval find_min_bad_luck [\"ab\", \"ba\"]\n\n/--\ninfo: 0\n-/\n#guard_msgs\
  \ in\n#eval find_min_bad_luck [\"aa\", \"bb\"]\n\n/--\ninfo: 2\n-/\n#guard_msgs\
  \ in\n#eval find_min_bad_luck [\"aabb\", \"abab\", \"baab\"]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
