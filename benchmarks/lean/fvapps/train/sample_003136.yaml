"vc-description": "# Task\n\nJohn won the championship of a TV show. He can get some\
  \ bonuses.\n\nHe needs to play a game to determine the amount of his bonus.\n\n\
  Here are some cards in a row. A number is written on each card.\n\nIn each turn,\
  \ John can take a card, but only from the beginning or the end of the row. Then\
  \ multiply the number on the card by an coefficient 2^(i)(i means the ith turn).\
  \ The product is John's bonus of current turn.\n\nAfter all the cards are taken\
  \ away, the game is over. John's final bonus is the sum of all rounds of bonuses.\n\
  \nObviously, the order in which John takes the cards will affect the amount of John's\
  \ final bonus.\n\nYour task is to help John calculate the maximum amount of bonuses\
  \ he can get.\n\n# Input\n\n- `cards`: An integer array. Each element represents\
  \ the number on the card.\n  - `1 <= cards.length <= 30`\n  - `1 <= cards[i] <=\
  \ 100`\n\n\n- All inputs are valid.\n\n# Output\n\nAn integer. the maximum amount\
  \ of bonuses John can get.\n\n# Eaxmple\n\nFor `cards=[1,2,5]`, the output should\
  \ be `50`.\n\n```\nAll possible orders are:\n1->2->5   bonus:1x2+2*4+5*8=50\n1->5->2\
  \   bonus:1x2+5*4+2*8=38\n5->1->2   bonus:5*2+1*4+2*8=30\n5->2->1   bonus:5*2+2*4+1*8=26\n\
  The maximum amount of bonus is 50.\n```"
"vc-preamble": "import Imports.AllImports\n\ndef calculate : List Nat → Nat \n| xs\
  \ => sorry\n\n/-- Helper function to sum a list of naturals -/"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def listSum : List Nat → Nat \n| [] => 0\n| (x::xs) => x + listSum\
  \ xs\n"
"vc-theorems": "theorem calc_is_positive (cards : List Nat) :\n  cards ≠ [] → calculate\
  \ cards ≥ 0 := \n  sorry\n\n\ntheorem calc_single_element (cards : List Nat) (x\
  \ : Nat) :\n  cards = [x] → calculate cards = 2 * x := \n  sorry\n\n\ntheorem calc_increases_monotonic\
  \ (cards : List Nat) (i : Nat) (hi : i < cards.length) : \n  let cards' := cards.set\
  \ i (cards[i]! + 1);\n  calculate cards' ≥ calculate cards := \n  sorry\n\n\ntheorem\
  \ calc_bounded_by_double (cards : List Nat) :\n  cards ≠ [] → calculate cards ≤\
  \ listSum cards * (2 ^ cards.length) := \n  sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
