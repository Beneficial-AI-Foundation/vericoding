"vc-description": "\"Humankind cannot gain anything without first giving something\
  \ in return. To obtain, something of equal value must be lost. That is alchemy's\
  \ first law of Equivalent Exchange. In those days, we really believed that to be\
  \ the world's one, and only truth.\"\n-- Alphonse Elric\nNow, here we have an equivalent\
  \ exchange law for triangles which states that two right-angled isosceles triangles\
  \ of the same color can be made into a square of the same color using Alchemy.\n\
  You are given N$N$ right-angled isosceles colored triangles numbered from 1$1$ to\
  \ N$N$. For each triangle, the two equal sides have a length of 1$1$ unit. The Color\
  \ of i$i$-th triangle is given by Ci$C_i$.\nTo create a tower, we choose some consecutive\
  \ (2×k)+1$2 \\times k)+1$ triangles for any k≥0$k \\geq 0$. We then pick some 2×k$2\
  \ \\times k$ of them (these need not be consecutive), and form k$k$ pairs of triangles\
  \ such that both triangles in pair have the same color. Also, each of the 2×k$2\
  \ \\times k$ should be in exactly one pair. Then the two triangles in each pair\
  \ are joined using Alchemy (following the law of equivalent exchange for triangles)\
  \ to form squares and these k$k$ squares are placed one upon other. The one remaining\
  \ triangle is placed as a roof to the tower. This results in a tower of the height\
  \ of k$k$.\nFind the maximum height of the tower that can be formed. \nIn other\
  \ words, you should select the largest consecutive segment of triangles, such that\
  \ you can form a tower using every single one of those triangles. In particular,\
  \ you leave out one triangle, which will form the roof, and the other triangles\
  \ should all be paired up such that both triangles in a pair have the same colour.\n\
  \n-----Input:-----\n- The first line contains T$T$, the number of test cases. Then\
  \ the test cases follow. \n- For every test case, the first line contains N$N$ denoting\
  \ the number of triangles.\n- For every test case, the second line contains N$N$\
  \ space-separated integers Ci$C_{i}$ denoting the color of the triangles. ( 1≤i≤N$1\
  \ \\leq i \\leq N$).\n\n-----Output:-----\nFor every test case, output a single\
  \ integer denoting the maximum height of the tower that can be formed.\n\n-----Constraints-----\n\
  - 1≤T≤100$1 \\leq T \\leq 100$ \n- 1≤N≤105$1 \\leq N \\leq 10^{5}$ \n- 1≤Ci≤30$1\
  \ \\leq C_{i} \\leq 30$ \n- Sum of N$N$ over all test cases doesn't exceed 5×105$5\\\
  times 10^{5}$ \n\n-----Sample Input:-----\n4\n14\n5 4 2 2 3 2 1 3 2 7 4 9 9 9\n\
  3\n1 2 1\n3\n1 1 1\n5\n1 2 3 4 1\n\n-----Sample Output:-----\n3\n1\n1\n0\n\n-----EXPLANATION:-----\n\
  - #1$1$: The subarray [2,2,3,2,1,3,2]$[2, 2, 3, 2, 1, 3, 2]$ results in a tower\
  \ of height 3$3$.\n- #2$2$: The subarray [1,2,1]$[ 1, 2, 1 ]$ results in a tower\
  \ of height 1$1$.\n- #3$3$: The subarray [1,1,1]$[ 1, 1, 1 ]$ results in a tower\
  \ of height 1$1$. \n- #4$4$: The subarrays [1]$[ 1 ]$, [2]$[ 2 ]$ , [3]$[ 3 ]$,\
  \ [4]$[ 4 ]$ and [1]$[ 1 ]$ all results in a tower of height 0$0$.\n\nThe above\
  \ tower is possible by subarray [2,2,3,2,1,3,2]$[2, 2, 3, 2, 1, 3, 2]$ resulting\
  \ in a height of 3$3$ in test case 1$1$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_max_tower_height (triangles : List Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem find_max_tower_height_non_negative (triangles : List Nat)\
  \ \n  (h : ∀ x ∈ triangles, x > 0) : \n  find_max_tower_height triangles ≥ 0 :=\n\
  sorry\n\n\ntheorem find_max_tower_height_upper_bound (triangles : List Nat)\n  (h\
  \ : ∀ x ∈ triangles, x > 0) :\n  find_max_tower_height triangles ≤ triangles.length\
  \ / 2 :=\nsorry\n\n\ntheorem find_max_tower_height_singleton (triangles : List Nat)\n\
  \  (h : triangles.length = 1) \n  (h2 : ∀ x ∈ triangles, x > 0) :\n  find_max_tower_height\
  \ triangles = 0 :=\nsorry\n\n\ntheorem find_max_tower_height_composition \n  (triangle_lists\
  \ : List (List Nat))\n  (h : ∀ l ∈ triangle_lists, ∀ x ∈ l, x > 0)\n  (h2 : triangle_lists\
  \ ≠ []) :\n  find_max_tower_height (List.join triangle_lists) ≥ \n  (triangle_lists.map\
  \ find_max_tower_height).maximum?.get! :=\nsorry\n\n\ntheorem find_max_tower_height_pairs\
  \ (triangles : List Nat)\n  (h : triangles.length ≥ 2)\n  (h2 : ∀ x ∈ triangles,\
  \ x > 0) :\n  find_max_tower_height triangles ≥ \n  (List.zip (triangles.take (triangles.length\
  \ - 1)) (triangles.tail!)\n    |>.filter (fun p => p.1 = p.2)\n    |>.length) /\
  \ 2 :=\nsorry\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval find_max_tower_height [5,\
  \ 4, 2, 2, 3, 2, 1, 3, 2, 7, 4, 9, 9, 9]\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval\
  \ find_max_tower_height [1, 2, 1]\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval find_max_tower_height\
  \ [1, 1, 1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
