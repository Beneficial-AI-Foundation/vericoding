"vc-description": "Laura Bassi was the first female professor at a European university.\
  \  \nDespite her immense intellect, she was not always allowed to lecture publicly.\n\
  \nOne day a professor with very strong beliefs against women in academia sent some\
  \ `agents` to find Bassi and end her career.\n\nHelp her escape by telling her the\
  \ safest places in town!\n\nTask\n\n```if:python,javascript\nImplement the function\
  \ `advice(agents, n)` where\n```\n```if:haskell\nImplement the function `advice\
  \ agents n :: [(Int,Int)] -> Int -> [(Int,Int)]` where\n```\n```if:swift\nImplement\
  \ the function `advice(agents: [[Int]], n: Int) -> [[Int]]` where\n```\n\n- `agents`\
  \ is an array of agent coordinates.\n- `n` defines the size of the city that Bassi\
  \ needs to hide in, in other words the side length of the square grid. \n\nThe function\
  \ should return a list of coordinates that are the furthest away (by Manhattan distance)\
  \ from all agents.\n\nAs an example, say you have a 6x6 map, and agents at locations\n\
  \n```python\n[(0, 0), (1, 5), (5, 1)]\n```\n\nThe distances to the nearest agent\
  \ look like this.\n\n\n\nThe safest spaces are the ones with distance `4`, marked\
  \ in bright red. So the function should return\n\n```python\n[(2, 2), (3, 3), (4,\
  \ 4), (5, 5)]\n```\n\nin any order.\n\nEdge cases:\n- If there is an agent on every\
  \ grid cell, there is no safe space, so return an empty list.\n- If there are no\
  \ agents, then every cell is a safe spaces, so return all coordinates.\n- if `n`\
  \ is `0`, return an empty list.\n- If agent coordinates are outside of the map,\
  \ they are simply not considered.\n- There are no duplicate agents on the same square.\n\
  \nPerformance\n\nAll reference solutions run in around 6 seconds.\nYou might not\
  \ pass the tests if you use a brute-force solution.\n\n```if-not:swift,javascript\n\
  There are `200` random tests with `n <= 50`. Inefficient solutions might time out.\n\
  ```\n```if:javascript\nThere are `300` random tests with `n <= 70`. Inefficient\
  \ solutions might time out.\n```\n```if:swift\nThere are `200` random tests with\
  \ `n <= 70`. Inefficient solutions might time out.\n```\n\nThis kata is inspired\
  \ by ThoughtWorks' coding challenge"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def advice (agents : List Pos) (n : Nat) : List Pos :=\n  sorry\n"
"vc-theorems": "theorem advice_empty_grid (n : Nat) :\n  let result := advice [] n\n\
  \  n = 0 → result = [] ∧\n  n > 0 → (\n    result.length = n * n ∧\n    result.all\
  \ (fun (x,y) => x < n ∧ y < n)\n  ) := sorry\n\n\ntheorem advice_result_properties\
  \ (n : Nat) (agents : List Pos) :\n  n > 0 →\n  let result := advice agents n\n\
  \  result.all (fun (x,y) => x < n ∧ y < n) ∧\n  let validAgents := agents.filter\
  \ (fun (x,y) => x < n ∧ y < n)\n  ∀ p, p ∈ validAgents → p ∉ result\n  := sorry\n\
  \n\ntheorem advice_connected_safe_spaces (n : Nat) (agents : List Pos) :\n  n >\
  \ 0 →\n  let result := advice agents n\n  result.isEmpty ∨\n  ∀ x y, (x,y) ∈ result\
  \ →\n    let adjacent := [(x,y+1), (x,y), (x+1,y), (x,y)].filter (fun (nx,ny) =>\
  \ nx < n ∧ ny < n)\n    let safeAdj := adjacent.filter (fun p => p ∈ result)\n \
  \   safeAdj.isEmpty ∨ ∃ p, p ∈ safeAdj\n  := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
