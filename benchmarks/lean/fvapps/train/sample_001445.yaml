"vc-description": "Ash is on his way to becoming the Pokemon Master. His pokemon can\
  \ perform the following moves:  \n- Tackle - Deal damage worth $X$ points  \n- Grow\
  \ - Increase damage by $Y$ points i.e. $X$ = $X$ + $Y$ \nBut, it can only perform\
  \ Grow first (0 or more times) and then tackle (0 or more) times after which it\
  \ cannot perform Grow again.\n\nThat is, it cannot perform the Grow operation once\
  \ it has performed the tackle operation.  \nA pokemon can be caught only if it’s\
  \ health is exactly 1. A wild pokemon has appeared and has health worth $H$ points.\
  \ Find the minimum number of moves required to catch it or say that it is not possible.\
  \  \n\n-----Input:-----\n- \nThe first line of the input consists of a single integer\
  \ $T$ denoting the number of test cases.\n- \nEach test case consists of 3 space-separated\
  \ integers $H$, $X$ and $Y$.\n\n-----Output:-----\n- For each test case, print a\
  \ single line containing one integer - the minimum number of moves required to catch\
  \ the pokemon if it is possible to catch it else print -1.\n\n-----Constraints-----\n\
  - \n1 <= $T$ <= 103\n- \n1 <=  $X$, $Y$ < $H$ <= 109\n\n-----Subtasks-----\nSubtask\
  \ #1 (30 points):\n- 1 <=  $X$, $Y$ < $H$ <= 1000\nSubtask #2 (70 points):\n- Original\
  \ Constraints\n\n-----Sample Input:-----\n2\n\n101 10 10\n\n11 3 3  \n\n-----Sample\
  \ Output:-----\n6\n\n-1  \n\n-----EXPLANATION:-----\n- \nExample Case 1:\n\nAsh\
  \ can make use of Grow once. So $X$ = 10 + 10 = 20\n\nThen he can do Tackle 5 times\
  \ to decrease $H$ to 1.\n\nOR\n\nAsh can make use of Grow 4 times. So $X$ = 10 +\
  \ 4*10 = 50\n\nThen he can do Tackle 2 times to decrease $H$ to 1.\n\nHence, a total\
  \ of 6 moves are required either way which is minimum.  \n- \nExample Case 2:\n\n\
  No matter how many times Ash uses Grow or Tackle, pokemon can never be caught."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def min_moves_to_catch (h x y : Nat) : Int := sorry\n\ntheorem\
  \ result_valid (n : Nat) :\n  let result := min_moves_to_catch (n + 1) n n\n  result\
  \ = -1 ∨ result > 0 := sorry\n"
"vc-theorems": "theorem equal_positions_catchable (n : Nat) : \n  let h := n * n +\
  \ 1\n  min_moves_to_catch h n n ≠ -1 := sorry\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n\
  #eval min_moves_to_catch 101 10 10\n\n/--\ninfo: -1\n-/\n#guard_msgs in\n#eval min_moves_to_catch\
  \ 11 3 3\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval min_moves_to_catch 21 5 5\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
