"vc-description": "The goal is to write a pair of functions the first of which will\
  \ take a string of binary along with a specification of bits, which will return\
  \ a numeric, signed complement in two's complement format. The second will do the\
  \ reverse. It will take in an integer along with a number of bits, and return a\
  \ binary string. \n\nhttps://en.wikipedia.org/wiki/Two's_complement\n\nThus, to_twos_complement\
  \ should take the parameters binary = \"0000 0001\", bits = 8 should return 1. And,\
  \ binary = \"11111111\", bits = 8 should return -1 . While, from_twos_complement\
  \ should return \"00000000\" from the parameters n = 0, bits = 8 . And, \"11111111\"\
  \ from n = -1, bits = 8. \n\nYou should account for some edge cases."
"vc-preamble": "import Imports.AllImports\n\ndef to_twos_complement (binary : String)\
  \ (bits : Nat) : Int := sorry\ndef from_twos_complement (n : Int) (bits : Nat) :\
  \ String := sorry"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def removeWhitespace (s : String) : String := sorry\n\ntheorem\
  \ twos_complement_roundtrip (n : Int) (bits : Nat) \n  (h1 : bits > 0) (h2 : bits\
  \ ≤ 64)\n  (h3 : n ≥ -(2^(bits-1))) (h4 : n ≤ 2^(bits-1) - 1) :\n  to_twos_complement\
  \ (from_twos_complement n bits) bits = n := sorry\n"
"vc-theorems": "theorem binary_roundtrip (binary : String) (bits : Nat)\n  (h1 : bits\
  \ > 0) (h2 : bits ≤ 64)\n  (h3 : String.length binary = bits)\n  (h4 : ∀ c ∈ binary.data,\
  \ c = '0' ∨ c = '1') :\n  from_twos_complement (to_twos_complement binary bits)\
  \ bits = binary := sorry\n\n\ntheorem bit_length (n : Int) (bits : Nat)\n  (h1 :\
  \ bits > 0) (h2 : bits ≤ 64) :\n  String.length (from_twos_complement n bits) =\
  \ bits ∧\n  (∀ c ∈ (from_twos_complement n bits).data, c = '0' ∨ c = '1') := sorry\n\
  \n\ntheorem whitespace_handling (binary : String) (bits : Nat) \n  (h1 : bits >\
  \ 0) (h2 : bits ≤ 64)\n  (h3 : String.length (removeWhitespace binary) = bits)\n\
  \  (h4 : ∀ c ∈ (removeWhitespace binary).data, c = '0' ∨ c = '1') :\n  to_twos_complement\
  \ binary bits = to_twos_complement (removeWhitespace binary) bits := sorry\n\n/--\n\
  info: 1\n-/\n#guard_msgs in\n#eval to_twos_complement \"00000001\" 8\n\n/--\ninfo:\
  \ '00000001'\n-/\n#guard_msgs in\n#eval from_twos_complement 1 8\n\n/--\ninfo: -1\n\
  -/\n#guard_msgs in\n#eval to_twos_complement \"11111111\" 8\n\n/--\ninfo: '11111111'\n\
  -/\n#guard_msgs in\n#eval from_twos_complement -1 8\n\n/--\ninfo: -1440552402\n\
  -/\n#guard_msgs in\n#eval to_twos_complement \"1010 1010 0010 0010 1110 1010 0010\
  \ 1110\" 32\n\n/--\ninfo: '10101010001000101110101000101110'\n-/\n#guard_msgs in\n\
  #eval from_twos_complement -1440552402 32\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
