"vc-description": "Write a function that counts how many different ways you can make\
  \ change for an amount of money, given an array of coin denominations. For example,\
  \ there are 3 ways to give change for 4 if you have coins with denomination 1 and\
  \ 2: \n```\n1+1+1+1, 1+1+2, 2+2.\n```\nThe order of coins does not matter:\n```\n\
  1+1+2 == 2+1+1\n```\nAlso, assume that you have an infinite amount of coins.\n\n\
  Your function should take an amount to change and an array of unique denominations\
  \ for the coins:\n\n```python\n  count_change(4, [1,2]) # => 3\n  count_change(10,\
  \ [5,2,3]) # => 4\n  count_change(11, [5,7]) # => 0\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_change (money : Int) (coins : List Int) : Int :=\n  sorry\n\
  \n\n\n\n"
"vc-theorems": "theorem count_change_no_coins (money : Int) :\n  count_change money\
  \ [] = (if money = 0 then 1 else 0) :=\nsorry\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n\
  #eval count_change 4 [1, 2]\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval count_change\
  \ 10 [5, 2, 3]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval count_change 11 [5, 7]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
