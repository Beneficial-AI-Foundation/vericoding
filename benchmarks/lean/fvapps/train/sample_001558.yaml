"vc-description": "In this kata we want to convert a string into an integer. The strings\
  \ simply represent the numbers in words.\n\nExamples:\n\n* \"one\" => 1\n* \"twenty\"\
  \ => 20\n* \"two hundred forty-six\" => 246\n* \"seven hundred eighty-three thousand\
  \ nine hundred and nineteen\" => 783919\n\nAdditional Notes:\n\n* The minimum number\
  \ is \"zero\" (inclusively)\n* The maximum number, which must be supported is 1\
  \ million (inclusively)\n* The \"and\" in e.g. \"one hundred and twenty-four\" is\
  \ optional, in some cases it's present and in others it's not\n* All tested numbers\
  \ are valid, you don't need to validate them"
"vc-preamble": "import Imports.AllImports\n\ndef parse_int (s : String) : Nat :=\n\
  \  sorry\n\n\ndef normalize_text (s : String) : String :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def int_to_english (n : Nat) : String :=\n  sorry\n\n-- Main theorems\
  \ based on property tests"
"vc-theorems": "theorem parse_int_inverse (n : Nat) (h : n â‰¤ 999) : \n  parse_int\
  \ (int_to_english n) = n :=\nsorry\n\n\n\n\n\n\ntheorem parse_int_specific_example\
  \ :\n  parse_int \"one hundred twenty three\" = 123 :=\nsorry\n\n/--\ninfo: 0\n\
  -/\n#guard_msgs in\n#eval parse_int \"zero\"\n\n/--\ninfo: 123\n-/\n#guard_msgs\
  \ in\n#eval parse_int \"one hundred twenty-three\"\n\n/--\ninfo: 200003\n-/\n#guard_msgs\
  \ in\n#eval parse_int \"two hundred thousand three\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
