"vc-description": "Your job is to write function last_digits(n,d) which return the\
  \ last `d` digits of an integer `n` as a list.\n`n` will be from 0 to 10^10\n\n\
  Examples:\n\n`last_digits(1,1)     --> [1]`\n\n`last_digits(1234,2)   --> [3,4]`\n\
  \n`last_digits(637547,6) --> [6,3,7,5,4,7]`\n\nSpecial cases:\n\nIf `d` > the number\
  \ of digits, just return the number's digits as a list.\n\nIf `d` <= 0, then return\
  \ an empty list.\n\nThis is the first kata I have made, so please report any issues."
"vc-preamble": "import Imports.AllImports\n\ndef last_digits (n : Nat) (d : Int) :\
  \ List Nat := sorry\n\ndef list_to_string (l : List Nat) : String := sorry"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def nat_to_string (n : Nat) : String := sorry\n\ntheorem last_digits_empty_for_nonpositive\
  \ (n : Nat) (d : Int) :\n  d <= 0 → last_digits n d = [] := sorry\n"
"vc-theorems": "theorem last_digits_length_bound (n : Nat) (d : Int) :\n  d > 0 →\
  \ List.length (last_digits n d) = min d.toNat (nat_to_string n).length := sorry\n\
  \n\ntheorem last_digits_are_digits (n : Nat) (d : Int) (x : Nat) :\n  x ∈ last_digits\
  \ n d → x ≤ 9 := sorry\n\n\ntheorem last_digits_match_string_suffix (n : Nat) (d\
  \ : Int) :\n  d > 0 → list_to_string (last_digits n d) = (nat_to_string n).takeRight\
  \ d.toNat := sorry\n\n\ntheorem last_digits_full_number (n : Nat) :\n  list_to_string\
  \ (last_digits n ((nat_to_string n).length + 1)) = nat_to_string n := sorry\n\n\
  /--\ninfo: [1]\n-/\n#guard_msgs in\n#eval last_digits 1 1\n\n/--\ninfo: [3, 7, 6,\
  \ 7]\n-/\n#guard_msgs in\n#eval last_digits 123767 4\n\n/--\ninfo: [1, 3, 4, 3]\n\
  -/\n#guard_msgs in\n#eval last_digits 1343 5\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
