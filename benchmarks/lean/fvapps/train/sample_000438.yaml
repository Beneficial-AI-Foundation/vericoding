"vc-description": "Given a list of non-negative numbers and a target integer k, write\
  \ a function to check if the array has a continuous subarray of size at least 2\
  \ that sums up to the multiple of k, that is, sums up to n*k where n is also an\
  \ integer.\n\n\n\nExample 1:\n\nInput: [23, 2, 4, 6, 7],  k=6\nOutput: True\nExplanation:\
  \ Because [2, 4] is a continuous subarray of size 2 and sums up to 6.\n\n\n\n\n\
  Example 2:\n\nInput: [23, 2, 6, 4, 7],  k=6\nOutput: True\nExplanation: Because\
  \ [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.\n\n\n\n\
  Note:\n\nThe length of the array won't exceed 10,000.\nYou may assume the sum of\
  \ all the numbers is in the range of a signed 32-bit integer."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def check_subarray_sum (nums : List Int) (k : Int) : Bool :=\n\
  \  sorry\n"
"vc-theorems": "theorem short_arrays {nums : List Int} {k : Int} (h1 : k ≠ 0) (h2\
  \ : nums.length ≤ 1) :\n  check_subarray_sum nums k = false :=\n  sorry\n\n\ntheorem\
  \ properties_abs_k {nums : List Int} {k : Int} (h : k ≠ 0) :\n  check_subarray_sum\
  \ nums k = check_subarray_sum nums k.natAbs :=\n  sorry\n\n\ntheorem properties_short\
  \ {nums : List Int} {k : Int} (h : nums.length < 2) :\n  check_subarray_sum nums\
  \ k = false :=\n  sorry\n\n\ntheorem zero_k {nums : List Int} (h : ∀ n ∈ nums, n\
  \ ≥ 0) :\n  check_subarray_sum nums 0 = \n    (∃ i, i + 1 < nums.length ∧ nums[i]!\
  \ = 0 ∧ nums[i+1]! = 0) :=\n  sorry\n\n\ntheorem k_one {nums : List Int} (h : nums.length\
  \ ≥ 2) :\n  check_subarray_sum nums 1 = true :=\n  sorry\n\n\ntheorem multiples\
  \ {nums : List Int} {k : Int} \n  (h1 : ∀ n ∈ nums, 0 ≤ n ∧ n ≤ 100)\n  (h2 : 1\
  \ ≤ k ∧ k ≤ 100)\n  (h3 : nums.length ≥ 2) :\n  check_subarray_sum (nums.map (·\
  \ * k)) k = true :=\n  sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval check_subarray_sum\
  \ [23, 2, 4, 6, 7] 6\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval check_subarray_sum\
  \ [23, 2, 6, 4, 7] 6\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval check_subarray_sum\
  \ [1, 2] 2\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
