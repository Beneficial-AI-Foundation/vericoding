"vc-description": "Vasya and Petya are playing a simple game. Vasya thought of number\
  \ x between 1 and n, and Petya tries to guess the number.\n\nPetya can ask questions\
  \ like: \"Is the unknown number divisible by number y?\".\n\nThe game is played\
  \ by the following rules: first Petya asks all the questions that interest him (also,\
  \ he can ask no questions), and then Vasya responds to each question with a 'yes'\
  \ or a 'no'. After receiving all the answers Petya should determine the number that\
  \ Vasya thought of.\n\nUnfortunately, Petya is not familiar with the number theory.\
  \ Help him find the minimum number of questions he should ask to make a guaranteed\
  \ guess of Vasya's number, and the numbers y_{i}, he should ask the questions about.\n\
  \n\n-----Input-----\n\nA single line contains number n (1 ≤ n ≤ 10^3).\n\n\n-----Output-----\n\
  \nPrint the length of the sequence of questions k (0 ≤ k ≤ n), followed by k numbers\
  \ — the questions y_{i} (1 ≤ y_{i} ≤ n).\n\nIf there are several correct sequences\
  \ of questions of the minimum length, you are allowed to print any of them.\n\n\n\
  -----Examples-----\nInput\n4\n\nOutput\n3\n2 4 3 \n\nInput\n6\n\nOutput\n4\n2 4\
  \ 3 5 \n\n\n\n-----Note-----\n\nThe sequence from the answer to the first sample\
  \ test is actually correct.\n\nIf the unknown number is not divisible by one of\
  \ the sequence numbers, it is equal to 1.\n\nIf the unknown number is divisible\
  \ by 4, it is 4.\n\nIf the unknown number is divisible by 3, then the unknown number\
  \ is 3.\n\nOtherwise, it is equal to 2. Therefore, the sequence of questions allows\
  \ you to guess the unknown number. It can be shown that there is no correct sequence\
  \ of questions of length 2 or shorter."
"vc-preamble": "import Imports.AllImports\n\ndef find_min_questions (n : Nat) : List\
  \ Nat :=\n  sorry\n\n\ndef isPrime (n : Nat) : Bool :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isPrimePower (n : Nat) : Bool := \n  sorry\n"
"vc-theorems": "theorem find_min_questions_output_type (n : Nat) :\n  ∀ x ∈ find_min_questions\
  \ n, x ≤ n := by\n  sorry\n\n\ntheorem find_min_questions_ordering (n : Nat) :\n\
  \  ∀ (l : List Nat), l = find_min_questions n →\n    ∀ i, i + 1 < l.length → \n\
  \      l.get! i > l.get! (i + 1) →\n      isPrime (l.get! (i + 1)) := by\n  sorry\n\
  \n\ntheorem find_min_questions_empty_for_one :\n  find_min_questions 1 = [] := by\n\
  \  sorry\n\n\ntheorem find_min_questions_nonempty_for_gt_one (n : Nat) :\n  n >\
  \ 1 →\n  (find_min_questions n).length > 0 ∧\n  ∀ x ∈ find_min_questions n, x ≥\
  \ 2 := by\n  sorry\n\n\ntheorem find_min_questions_prime_powers (n : Nat) :\n  ∀\
  \ x ∈ find_min_questions n, isPrimePower x := by\n  sorry\n\n/--\ninfo: 3\n-/\n\
  #guard_msgs in\n#eval len find_min_questions(4)\n\n/--\ninfo: 4\n-/\n#guard_msgs\
  \ in\n#eval len find_min_questions(6)\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval\
  \ len find_min_questions(1)\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
