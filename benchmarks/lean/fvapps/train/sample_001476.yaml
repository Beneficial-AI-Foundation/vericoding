"vc-description": "Bobby has decided to hunt some Parrots. There are n horizontal\
  \ branch of trees aligned parallel to each other. Branches are numbered 1 to n from\
  \ top to bottom. On each branch there are some parrots sitting next to each other.\
  \ Supposed there are a[i]$a[i]$ parrots sitting on the i−th$ i-th$ branch.  \nSometimes\
  \ Bobby shots one of the parrot and the parrot dies (suppose that this parrots sat\
  \ at the i−th$i-th$ branch). Consequently all the parrots on the i−th$i-th$ branch\
  \ to the left of the dead parrot get scared and jump up on the branch number i − 1$i - 1$,\
  \ if there exists no upper branch they fly away. Also all the parrots to the right\
  \ of the dead parrot jump down on branch number i + 1$i + 1$, if there exists no\
  \ such branch they fly away.  \nBobby has shot m parrots. You're given the initial\
  \ number of parrots on each branch, tell him how many parrots are sitting on each\
  \ branch after the shots.  \n\n-----Input:-----\nThe first line of the input contains\
  \ an integer N$N$. The next line contains a list of space-separated integers a1, a2, …, an.\n\
  The third line contains an integer M$M$. Each of the next M$M$ lines contains two\
  \ integers x[i]$x[i]$ and y[i]$y[i]$. The integers mean that for the i-th time Bobby\
  \ shoot the y[i]-th (from left) parrot on the x[i]-th branch. It's guaranteed there\
  \ will be at least y[i] parrot on the x[i]-th branch at that moment.   \n\n-----Output:-----\n\
  On the i−th$i-th$ line of the output print the number of parrots on the i−th$i-th$\
  \ branch.\n\n-----Constraints-----\n- 1≤N≤100$1 \\leq N \\leq 100$\n- 0≤a[i]≤100$0\
  \ \\leq a[i] \\leq 100$\n- 0≤M≤100$0 \\leq M \\leq 100$\n- 1≤x[i]≤n$1 \\leq x[i]\
  \ \\leq n$, 1≤y[i]$1 \\leq y[i] $\n\n-----Sample Input:-----\n5\n\n10 10 10 10 10\n\
  \n5\n\n2 5\n\n3 13\n\n2 12\n\n1 13\n\n4 6   \n3\n\n2 4 1\n\n1\n\n2 2   \n\n-----Sample\
  \ Output:-----\n0\n\n12\n\n5\n\n0\n\n16   \n3\n\n0\n\n3"
"vc-preamble": "import Imports.AllImports\n\ndef solve_parrot_hunt (n : Nat) (init_parrots\
  \ : List Nat) (num_shots : Nat) (shots : List (Nat × Nat)) : List Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_valid_shot (n : Nat) (shot : Nat × Nat) : Bool :=\n  1 ≤\
  \ shot.1 ∧ shot.1 ≤ n ∧ shot.2 ≥ 1\n"
"vc-theorems": "theorem solve_parrot_hunt_no_shots_preserves_input \n  (n : Nat) (init_parrots\
  \ : List Nat) (h : init_parrots.length = n) :\n  solve_parrot_hunt n init_parrots\
  \ 0 [] = init_parrots :=\n  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
