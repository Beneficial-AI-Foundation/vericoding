"vc-description": "Jeff has become friends with Furik. Now these two are going to\
  \ play one quite amusing game.\n\nAt the beginning of the game Jeff takes a piece\
  \ of paper and writes down a permutation consisting of n numbers: p_1, p_2, ...,\
  \ p_{n}. Then the guys take turns to make moves, Jeff moves first. During his move,\
  \ Jeff chooses two adjacent permutation elements and then the boy swaps them. During\
  \ his move, Furic tosses a coin and if the coin shows \"heads\" he chooses a random\
  \ pair of adjacent elements with indexes i and i + 1, for which an inequality p_{i}\
  \ > p_{i} + 1 holds, and swaps them. But if the coin shows \"tails\", Furik chooses\
  \ a random pair of adjacent elements with indexes i and i + 1, for which the inequality\
  \ p_{i} < p_{i} + 1 holds, and swaps them. If the coin shows \"heads\" or \"tails\"\
  \ and Furik has multiple ways of adjacent pairs to take, then he uniformly takes\
  \ one of the pairs. If Furik doesn't have any pair to take, he tosses a coin one\
  \ more time. The game ends when the permutation is sorted in the increasing order.\n\
  \nJeff wants the game to finish as quickly as possible (that is, he wants both players\
  \ to make as few moves as possible). Help Jeff find the minimum mathematical expectation\
  \ of the number of moves in the game if he moves optimally well.\n\nYou can consider\
  \ that the coin shows the heads (or tails) with the probability of 50 percent.\n\
  \n\n-----Input-----\n\nThe first line contains integer n (1 ≤ n ≤ 3000). The next\
  \ line contains n distinct integers p_1, p_2, ..., p_{n} (1 ≤ p_{i} ≤ n) — the permutation\
  \ p. The numbers are separated by spaces.\n\n\n-----Output-----\n\nIn a single line\
  \ print a single real value — the answer to the problem. The answer will be considered\
  \ correct if the absolute or relative error doesn't exceed 10^{ - 6}.\n\n\n-----Examples-----\n\
  Input\n2\n1 2\n\nOutput\n0.000000\n\nInput\n5\n3 5 2 4 1\n\nOutput\n13.000000\n\n\
  \n\n-----Note-----\n\nIn the first test the sequence is already sorted, so the answer\
  \ is 0."
"vc-preamble": "import Imports.AllImports\n\ndef CumTree.vstavi : CumTree → Int →\
  \ Unit := sorry\ndef CumTree.manjsi : CumTree → Int → Int := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_game : Nat → List Int → Int := sorry\n\ninductive Sorted\
  \ {α : Type} (r : α → α → Prop) : List α → Prop\n  | nil : Sorted r []\n  | single\
  \ : (a : α) → Sorted r [a]\n  | cons : (a b : α) → (l : List α) → r a b → Sorted\
  \ r (b::l) → Sorted r (a::b::l)\n"
"vc-theorems": "theorem cumtree_single_value (val : Int) \n  (h1 : 1 ≤ val) (h2 :\
  \ val ≤ 4096) :\n  let ct := CumTree.mk 1 4096;\n  ct.manjsi val = 0 ∧ \n  ct.manjsi\
  \ (val + 1) = 1 ∧\n  ct.manjsi (val - 1) = 0 := sorry\n\n\ntheorem solve_game_basic_properties\
  \ {n : Nat} {nums : List Int}\n  (h1 : ∀ x ∈ nums, 1 ≤ x ∧ x ≤ 4096)\n  (h2 : nums.length\
  \ = n)\n  (h3 : nums.Nodup) :\n  solve_game n nums ≥ 0 ∧ \n  ∃ k : Int, solve_game\
  \ n nums = k := sorry\n\n\ntheorem solve_game_sorted_zero {n : Nat} {nums : List\
  \ Int}\n  (h1 : ∀ x ∈ nums, 1 ≤ x ∧ x ≤ 4096)\n  (h2 : nums.length = n)\n  (h3 :\
  \ nums.Nodup)\n  (h4 : Sorted (· < ·) nums) : \n  solve_game n nums = 0 := sorry\n\
  \n\ntheorem solve_game_two_elements {a b : Int}\n  (h1 : 1 ≤ a ∧ a ≤ 4096)\n  (h2\
  \ : 1 ≤ b ∧ b ≤ 4096)\n  (h3 : a ≠ b) :\n  solve_game 2 [a, b] = if a > b then 1\
  \ else 0 := sorry"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded"
