"vc-description": "Just to remind, girls in Arpa's land are really nice.\n\nMehrdad\
  \ wants to invite some Hoses to the palace for a dancing party. Each Hos has some\
  \ weight w_{i} and some beauty b_{i}. Also each Hos may have some friends. Hoses\
  \ are divided in some friendship groups. Two Hoses x and y are in the same friendship\
  \ group if and only if there is a sequence of Hoses a_1, a_2, ..., a_{k} such that\
  \ a_{i} and a_{i} + 1 are friends for each 1 ≤ i < k, and a_1 = x and a_{k} = y.\n\
  \n [Image] \n\nArpa allowed to use the amphitheater of palace to Mehrdad for this\
  \ party. Arpa's amphitheater can hold at most w weight on it. \n\nMehrdad is so\
  \ greedy that he wants to invite some Hoses such that sum of their weights is not\
  \ greater than w and sum of their beauties is as large as possible. Along with that,\
  \ from each friendship group he can either invite all Hoses, or no more than one.\
  \ Otherwise, some Hoses will be hurt. Find for Mehrdad the maximum possible total\
  \ beauty of Hoses he can invite so that no one gets hurt and the total weight doesn't\
  \ exceed w.\n\n\n-----Input-----\n\nThe first line contains integers n, m and w\
  \ (1  ≤  n  ≤  1000, $0 \\leq m \\leq \\operatorname{min}(\\frac{n \\cdot(n - 1)}{2},\
  \ 10^{5})$, 1 ≤ w ≤ 1000) — the number of Hoses, the number of pair of friends and\
  \ the maximum total weight of those who are invited.\n\nThe second line contains\
  \ n integers w_1, w_2, ..., w_{n} (1 ≤ w_{i} ≤ 1000) — the weights of the Hoses.\n\
  \nThe third line contains n integers b_1, b_2, ..., b_{n} (1 ≤ b_{i} ≤ 10^6) — the\
  \ beauties of the Hoses.\n\nThe next m lines contain pairs of friends, the i-th\
  \ of them contains two integers x_{i} and y_{i} (1 ≤ x_{i}, y_{i} ≤ n, x_{i} ≠ y_{i}),\
  \ meaning that Hoses x_{i} and y_{i} are friends. Note that friendship is bidirectional.\
  \ All pairs (x_{i}, y_{i}) are distinct.\n\n\n-----Output-----\n\nPrint the maximum\
  \ possible total beauty of Hoses Mehrdad can invite so that no one gets hurt and\
  \ the total weight doesn't exceed w.\n\n\n-----Examples-----\nInput\n3 1 5\n3 2\
  \ 5\n2 4 2\n1 2\n\nOutput\n6\n\nInput\n4 2 11\n2 4 6 6\n6 4 2 1\n1 2\n2 3\n\nOutput\n\
  7\n\n\n\n-----Note-----\n\nIn the first sample there are two friendship groups:\
  \ Hoses {1, 2} and Hos {3}. The best way is to choose all of Hoses in the first\
  \ group, sum of their weights is equal to 5 and sum of their beauty is 6.\n\nIn\
  \ the second sample there are two friendship groups: Hoses {1, 2, 3} and Hos {4}.\
  \ Mehrdad can't invite all the Hoses from the first group because their total weight\
  \ is 12 > 11, thus the best way is to choose the first Hos from the first group\
  \ and the only one from the second group. The total weight will be 8, and the total\
  \ beauty will be 7."
"vc-preamble": "import Imports.AllImports\n\ndef List.sum : List Nat → Nat\n  | []\
  \ => 0\n  | x::xs => x + sum xs\n\n\ndef List.minimum : List Nat → Nat \n  | []\
  \ => 0\n  | [x] => x\n  | x::xs => Nat.min x (minimum xs)\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_party_weights (n m w : Nat) (weights beauties : List\
  \ Nat) \n  (friend_pairs : List (Nat × Nat)) : Int :=\n  sorry\n"
"vc-theorems": "theorem party_weights_result_bounded \n  (n m w : Nat) \n  (weights\
  \ beauties : List Nat)\n  (friend_pairs : List (Nat × Nat))\n  (h1 : n ≥ 1) (h2\
  \ : n ≤ 20)\n  (h3 : m ≥ 0) (h4 : m ≤ 10)\n  (h5 : w ≥ 1) (h6 : w ≤ 100)\n  (h7\
  \ : weights.length = n)\n  (h8 : beauties.length = n)\n  (h9 : ∀ x ∈ weights, x\
  \ ≥ 1 ∧ x ≤ 50)\n  (h10 : ∀ x ∈ beauties, x ≥ 1 ∧ x ≤ 20)\n  (h11 : friend_pairs.length\
  \ ≤ 10)\n  (h12 : ∀ p ∈ friend_pairs, p.1 ≥ 1 ∧ p.1 ≤ 20 ∧ p.2 ≥ 1 ∧ p.2 ≤ 20) :\n\
  \  let result := solve_party_weights n m w weights beauties friend_pairs\n  (result\
  \ ≥ -1 ∧ result ≤ beauties.sum) :=\n  sorry\n\n\ntheorem party_weights_invalid_when_weight_too_small\n\
  \  (n m w : Nat)\n  (weights beauties : List Nat)\n  (friend_pairs : List (Nat ×\
  \ Nat))\n  (h1 : n ≥ 1) (h2 : n ≤ 20)\n  (h3 : m ≥ 0) (h4 : m ≤ 10)\n  (h5 : w ≥\
  \ 1) (h6 : w ≤ 100)\n  (h7 : weights.length = n)\n  (h8 : beauties.length = n)\n\
  \  (h9 : ∀ x ∈ weights, x ≥ 1 ∧ x ≤ 50)\n  (h10 : w < weights.minimum) :\n  solve_party_weights\
  \ n m w weights beauties friend_pairs = -1 :=\n  sorry\n\n/--\ninfo: 6\n-/\n#guard_msgs\
  \ in\n#eval solve_party_weights 3 1 5 [3, 2, 5] [2, 4, 2] [(1, 2)]\n\n/--\ninfo:\
  \ 7\n-/\n#guard_msgs in\n#eval solve_party_weights 4 2 11 [2, 4, 6, 6] [6, 4, 2,\
  \ 1] [(1, 2), (2, 3)]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
