"vc-description": "Consider the following numbers (where `n!` is `factorial(n)`):\n\
  ```\nu1 = (1 / 1!) * (1!)\nu2 = (1 / 2!) * (1! + 2!)\nu3 = (1 / 3!) * (1! + 2! +\
  \ 3!)\n...\nun = (1 / n!) * (1! + 2! + 3! + ... + n!)\n```\n\nWhich will win: `1\
  \ / n!` or `(1! + 2! + 3! + ... + n!)`?\n\nAre these numbers going to `0` because\
  \ of `1/n!` or to infinity due\nto the sum of factorials or to another number?\n\
  \n## Task\nCalculate `(1 / n!) * (1! + 2! + 3! + ... + n!)` \nfor a given `n`, where\
  \ `n` is an integer greater or equal to `1`.\n\nTo avoid discussions about rounding,\
  \ return the result **truncated** to 6 decimal places, for example:\n```\n1.0000989217538616\
  \ will be truncated to 1.000098\n1.2125000000000001 will be truncated to 1.2125\n\
  ```\n\n## Remark\nKeep in mind that factorials grow rather rapidly, and you need\
  \ to handle large inputs.\n\n## Hint\nYou could try to simplify the expression."
"vc-preamble": "import Imports.AllImports\n\ndef going (n : Nat) : Float := sorry\n\
  \ntheorem going_range (n : Nat) : \n  1 ≤ going n ∧ going n ≤ 2 := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calc_series (n : Nat) : Float := sorry\n\ntheorem going_matches_calc_series\
  \ (n : Nat) :\n  n ≥ 1 → n ≤ 100 → Float.abs (going n - calc_series n) < 0.000001\
  \ := sorry\n"
"vc-theorems": "theorem going_decimal_places (n : Nat) :\n  ∃ k : Nat, k ≤ 6 ∧ going\
  \ n * Float.ofNat (10^k) = Float.floor (going n * Float.ofNat (10^k)) := sorry\n\
  \n\ntheorem going_specific_values :\n  going 1 = 1.0 ∧ going 5 = 1.275 := sorry\n\
  \n/--\ninfo: 1.275\n-/\n#guard_msgs in\n#eval going 5\n\n/--\ninfo: 1.2125\n-/\n\
  #guard_msgs in\n#eval going 6\n\n/--\ninfo: 1.173214\n-/\n#guard_msgs in\n#eval\
  \ going 7\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
