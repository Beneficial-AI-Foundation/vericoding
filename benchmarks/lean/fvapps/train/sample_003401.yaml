"vc-description": "HTML Element Generator\nIn this kata, you will be creating a python\
  \ function that will take arguments and turn them into an HTML element.\nAn HTML\
  \ tag has three parts:\n\nThe opening tag, which consists of a tag name and potentially\
  \ attributes, all in between angle brackets.\nThe element content, which is the\
  \ data that is shown on the webpage.  This is in between the opening and closing\
  \ tags.\nAnd the closing tag, which is an opening angle bracket, a forward slash,\
  \ the name of the tag, and a closing angle bracket\n\n\nIf you were to have multiple\
  \ attributes, they would each appear with a single space separating them\n\nSome\
  \ tags do not require a closing tag.  These are called self-closing tags.  For this\
  \ kata, any tag passed into the function without 'element content' (keyword arguments)\
  \ will be treated in this way:  after the tag name (and any attributes), there will\
  \ be a space and then a forward slash.  See the picture to the right.\n\nData will\
  \ be passed into the html function as such: \n\nThe first argument will be the tag\
  \ name\nAny other non-keyword arguments will be element content. If no element content\
  \ is given, the return value will be expected to be a self-closing tag.  If more\
  \ than one argument is given as element content, you will return multiple of the\
  \ same element, just with different element content, separated by one or more newline\
  \ characters.\nEx: \n\n<p class=\"paragraph-text\" id=\"example\">Hello World!</p>\\\
  n<p class=\"paragraph-text\" id=\"example\">This is HTML code!</p>\n\nIMPORTANT:\
  \  Because class is a python keyword, and class is a very important HTML attribute,\
  \ you will also have to implement a keyword argument named cls, as opposed to class.\
  \  This attribute will appear as class=\"variable\" in the return value of your\
  \ function\nAny other keyword arguments of the function will be treated as attributes\
  \ of the element.  The keyword is the attribute name (left of the equals sign),\
  \ and the keyword's value is the attribute's value (right of the equals sign).\n\
  Element attributes will appear in the return value of your function in the order\
  \ that they appear in the function's arguments when it is called.  If cls is an\
  \ argument of the function, it will always appear first (before any other keyword\
  \ arguments).\nSeveral Examples are provided"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def html (tag: String) (content: List String := []) (attrs: List\
  \ (String × String) := []): String := sorry\n\ntheorem empty_tag_is_self_closing\
  \ (tag: String) \n  (h: tag ≠ \"\") :\n  html tag = s!\"<{tag} />\" := sorry\n"
"vc-theorems": "theorem single_content_wrapping (tag content: String)\n  (h: tag ≠\
  \ \"\") :\n  html tag [content] [] = s!\"<{tag}>{content}</{tag}>\" := sorry\n\n\
  \ntheorem multiple_contents_newlines (tag: String) (contents: List String)\n  (h1:\
  \ tag ≠ \"\")\n  (h2: contents.length ≥ 2) :\n  html tag contents [] = String.intercalate\
  \ \"\\n\" \n    (contents.map (fun c => s!\"<{tag}>{c}</{tag}>\")) := sorry\n\n\n\
  theorem custom_attributes (tag key val: String) \n  (h1: tag ≠ \"\")\n  (h2: key\
  \ ≠ \"cls\")\n  (h3: key ≠ \"\") \n  (h4: val ≠ \"\") :\n  html tag [] [(key, val)]\
  \ = s!\"<{tag} {key}=\\\"{val}\\\" />\" := sorry\n\n\ntheorem cls_becomes_class\
  \ (tag val: String)\n  (h1: tag ≠ \"\")\n  (h2: val ≠ \"\") :\n  html tag [] [(\"\
  cls\", val)] = s!\"<{tag} class=\\\"{val}\\\" />\" := sorry\n\n/--\ninfo: '<br />'\n\
  -/\n#guard_msgs in\n#eval html \"br\"\n\n/--\ninfo: '<title>Webpage Title</title>'\n\
  -/\n#guard_msgs in\n#eval html \"title\" \"Webpage Title\"\n\n/--\ninfo: '<p class=\"\
  text\" id=\"para\">Hello</p>\\n<p class=\"text\" id=\"para\">World</p>'\n-/\n#guard_msgs\
  \ in\n#eval html \"p\" \"Hello\" \"World\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
