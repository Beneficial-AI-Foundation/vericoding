"vc-description": "Given a string, determine if it is a palindrome, considering only\
  \ alphanumeric characters and ignoring cases.\n\nNote: For the purpose of this problem,\
  \ we define empty string as valid palindrome.\n\nExample 1:\n\n\nInput: \"A man,\
  \ a plan, a canal: Panama\"\nOutput: true\n\n\nExample 2:\n\n\nInput: \"race a car\"\
  \nOutput: false"
"vc-preamble": "import Imports.AllImports\n\ndef is_palindrome (s : String) : Bool\
  \ :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def reverseString (s : String) : String :=\n  sorry\n"
"vc-theorems": "theorem empty_string_is_palindrome :\n  is_palindrome \"\" = true\
  \ :=\nsorry\n\n\ntheorem string_plus_reverse_is_palindrome {s : String} :\n  is_palindrome\
  \ (s ++ reverseString s) = true :=\nsorry\n\n\ntheorem case_insensitive {s : String}\
  \ :\n  is_palindrome s = is_palindrome (s.toUpper) ∧\n  is_palindrome s = is_palindrome\
  \ (s.toLower) :=\nsorry\n\n\ntheorem punctuation_invariant {s p c : Char} :\n  is_palindrome\
  \ (String.mk [c]) = is_palindrome (String.mk [c, p]) :=\nsorry\n\n\ntheorem single_char_is_palindrome\
  \ {c : Char} :\n  is_palindrome (String.mk [c]) = true :=\nsorry\n\n/--\ninfo: True\n\
  -/\n#guard_msgs in\n#eval is_palindrome \"A man, a plan, a canal: Panama\"\n\n/--\n\
  info: False\n-/\n#guard_msgs in\n#eval is_palindrome \"race a car\"\n\n/--\ninfo:\
  \ True\n-/\n#guard_msgs in\n#eval is_palindrome \"\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
