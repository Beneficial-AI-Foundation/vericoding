"vc-description": "Write a function which takes a number and returns the corresponding\
  \ ASCII char for that value.\n\nExample: \n\n~~~if-not:java,racket\n```\nget_char(65)\
  \ # => 'A'\n```\n~~~\n~~~if:java\n~~~\n~~~if:racket\n~~~\n\nFor ASCII table, you\
  \ can refer to http://www.asciitable.com/"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def get_char (n : Int) : Char :=\n  sorry\n"
"vc-theorems": "theorem get_char_ascii {i : Int} (h : 0 ≤ i ∧ i ≤ 127) : \n  Char.toNat\
  \ (get_char i) = i := \n  sorry\n\n\ntheorem get_char_invalid_neg {i : Int} (h :\
  \ i < 0) :\n  ¬(∃ c : Char, get_char i = c) :=\n  sorry\n\n\ntheorem get_char_invalid_large\
  \ {i : Int} (h : i > 1114111) : \n  ¬(∃ c : Char, get_char i = c) := \n  sorry\n\
  \n/--\ninfo: 'A'\n-/\n#guard_msgs in\n#eval get_char 65\n\n/--\ninfo: '!'\n-/\n\
  #guard_msgs in\n#eval get_char 33\n\n/--\ninfo: '%'\n-/\n#guard_msgs in\n#eval get_char\
  \ 37\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
