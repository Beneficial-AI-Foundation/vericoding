"vc-description": "You receive some random elements as a space-delimited string. Check\
  \ if the elements are part of an ascending sequence of integers starting with 1,\
  \ with an increment of 1 (e.g. 1, 2, 3, 4).\n\nReturn:\n\n* `0` if the elements\
  \ can form such a sequence, and no number is missing (\"not broken\", e.g. `\"1\
  \ 2 4 3\"`)\n* `1` if there are any non-numeric elements in the input (\"invalid\"\
  , e.g. `\"1 2 a\"`)\n* `n` if the elements are part of such a sequence, but some\
  \ numbers are missing, and `n` is the lowest of them (\"broken\", e.g. `\"1 2 4\"\
  ` or `\"1 5\"`)\n\n\n## Examples\n```\n\"1 2 3 4\"  ==>  return 0, because the sequence\
  \ is complete\n\n\"1 2 4 3\"  ==>  return 0, because the sequence is complete (order\
  \ doesn't matter)\n\n\"2 1 3 a\"  ==>  return 1, because it contains a non numerical\
  \ character\n\n\"1 3 2 5\"  ==>  return 4, because 4 is missing from the sequence\n\
  \n\"1 5\"      ==>  return 2, because the sequence is missing 2, 3, 4 and 2 is the\
  \ lowest\n\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_missing_number (s : String) : Nat := sorry \n\ntheorem\
  \ find_missing_number_non_negative (s : String) : \n  find_missing_number s ≥ 0\
  \ := sorry\n\n\n"
"vc-theorems": "theorem find_missing_number_invalid (s : String) \n  (h : ¬(s.trim.replace\
  \ \" \" \"\").all Char.isDigit) :\n  find_missing_number s = 1 := sorry\n\n/--\n\
  info: 0\n-/\n#guard_msgs in\n#eval find_missing_number \"1 2 3 4\"\n\n/--\ninfo:\
  \ 3\n-/\n#guard_msgs in\n#eval find_missing_number \"1 2 4\"\n\n/--\ninfo: 1\n-/\n\
  #guard_msgs in\n#eval find_missing_number \"1 2 a\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
