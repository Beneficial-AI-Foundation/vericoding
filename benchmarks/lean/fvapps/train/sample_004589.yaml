"vc-description": "This kata is the first of a sequence of four about \"Squared Strings\"\
  .\n\nYou are given a string of `n` lines, each substring being `n` characters long:\
  \ For example:\n\n`s = \"abcd\\nefgh\\nijkl\\nmnop\"`\n\nWe will study some transformations\
  \ of this square of strings.\n\n- Vertical mirror:\nvert_mirror (or vertMirror or\
  \ vert-mirror)\n```\nvert_mirror(s) => \"dcba\\nhgfe\\nlkji\\nponm\"\n```\n- Horizontal\
  \ mirror:\nhor_mirror (or horMirror or hor-mirror)\n```\n hor_mirror(s) => \"mnop\\\
  nijkl\\nefgh\\nabcd\"\n```\n\nor printed:\n\n```\nvertical mirror   |horizontal\
  \ mirror   \nabcd --> dcba     |abcd --> mnop \nefgh     hgfe     |efgh     ijkl\
  \ \nijkl     lkji     |ijkl     efgh \nmnop     ponm     |mnop     abcd \n```\n\n\
  # Task:\n- Write these two functions\n\nand\n\n- high-order function `oper(fct,\
  \ s)` where\n\n - fct is the function of one variable f to apply to the string `s`\n\
  (fct will be one of `vertMirror, horMirror`)\n\n# Examples:\n```\ns = \"abcd\\nefgh\\\
  nijkl\\nmnop\"\noper(vert_mirror, s) => \"dcba\\nhgfe\\nlkji\\nponm\"\noper(hor_mirror,\
  \ s) => \"mnop\\nijkl\\nefgh\\nabcd\"\n```\n# Note:\nThe form of the parameter `fct`\
  \ in oper\nchanges according to the language. You can see each form according to\
  \ the language in \"Sample Tests\".\n\n# Bash Note:\nThe input strings are separated\
  \ by `,` instead of `\\n`. The output strings should be separated by `\\r` instead\
  \ of `\\n`. See \"Sample Tests\".\n\nForthcoming katas will study other transformations."
"vc-preamble": "import Imports.AllImports\n\ndef split (s : String) (c : Char) : List\
  \ String :=\nsorry\n\n\ndef vert_mirror (s : String) : String :=\nsorry\n\n\ndef\
  \ hor_mirror (s : String) : String := \nsorry\n\n\ndef oper (f : String → String)\
  \ (s : String) : String :=\nsorry\n\n\ndef reverse_string (s : String) : String\
  \ :=\nsorry\n\n\ndef all_lines_reversed (orig result : List String) : Prop :=\n\
  \  ∀ i, i < orig.length → result.get! i = reverse_string (orig.get! i)\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def line_lengths_preserved (orig result : List String) : Prop :=\n\
  \  ∀ i, i < orig.length → (orig.get! i).length = (result.get! i).length\n\naxiom\
  \ vert_mirror_properties (s : String) :\n  let lines := split s '\\n'\n  let result_lines\
  \ := split (oper vert_mirror s) '\\n'\n  lines.length = result_lines.length ∧\n\
  \  all_lines_reversed lines result_lines ∧\n  line_lengths_preserved lines result_lines\n\
  \naxiom hor_mirror_properties (s : String) :\n  let lines := split s '\\n'\n  let\
  \ result_lines := split (oper hor_mirror s) '\\n'\n  lines.length = result_lines.length\
  \ ∧\n  result_lines = List.reverse lines\n\naxiom vert_mirror_involution (s : String)\
  \ :\n  oper vert_mirror (oper vert_mirror s) = s\n\naxiom hor_mirror_involution\
  \ (s : String) :\n  oper hor_mirror (oper hor_mirror s) = s"
"vc-theorems": "/--\ninfo: 'dcba\\nhgfe\\nlkji\\nponm'\n-/\n#guard_msgs in\n#eval\
  \ oper vert_mirror \"abcd\\nefgh\\nijkl\\nmnop\"\n\n/--\ninfo: 'mnop\\nijkl\\nefgh\\\
  nabcd'\n-/\n#guard_msgs in\n#eval oper hor_mirror s1\n\n/--\ninfo: 'ba\\ndc'\n-/\n\
  #guard_msgs in\n#eval oper vert_mirror \"ab\\ncd\"\n\n/--\ninfo: 'cd\\nab'\n-/\n\
  #guard_msgs in\n#eval oper hor_mirror s2\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
