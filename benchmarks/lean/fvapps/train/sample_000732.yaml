"vc-description": "There are n villages in a Chefland. Some of the villages have electricity\
  \ facilities, other doesn't. You can consider the villages arranged in line in the\
  \ order 1 to n from left to right. i-th of village can be considered at xi coordinates.\n\
  \nChef decided that electricity should be provided to all the villages. So, he decides\
  \ to buy some amount of electric wires to connect the villeges without electricity\
  \ to some villages with electricity. As Chef does not want to spend too much amount\
  \ of money on wires, can you find out minimum amount of length of wire Chef should\
  \ buy.\n\n-----Input-----\nFirst line of the input contains an integer T denoting\
  \ the number of test cases. T test cases follow.\nFirst line of each test case contains\
  \ an integer n denoting number of villages in Chefland.\nSecond line will contain\
  \ a string of length n containing '0' or '1's only. If i-th character of the string\
  \ is '1', then it denotes that i-th village has electricity.\nNext line contains\
  \ n space separated integers denoting the x coordinates of the villages in the order\
  \ from village 1 to n\n\n-----Output-----\nFor each test case, output a single line\
  \ containing a integer corresponding to the minimum length of wire Chef needs to\
  \ buy.\n\n-----Constraints-----\n- 1 ≤ T ≤ 10\n- It is guaranteed that there will\
  \ be at least one village which will have electricity.\n- 1 ≤ x1 <  x2 <  ... <\
  \ xn ≤ 109\n\n-----Subtasks-----\nSubtask #1 : 30 points\n- 1 ≤ N ≤ 1000\n\nSubtask\
  \ #2 : 70 points\n- 1 ≤ N ≤ 105\n\n-----Example-----\nInput\n2\n2\n01\n1 2\n3\n\
  100\n1 5 6\nOutput:\n1\n5\n\n-----Explanation-----\nIn the first example, first\
  \ village does not have electricity. If we put a wire between village 1 and 2 of\
  \ length 1, then both the villages will have electricity.\n\nIn the second example,\n\
  We can a draw a wire from first village to third village, passing through second\
  \ village. Its total length will be 5. Now all the villages will have electricity.\
  \ This is the minimum length of wire you will require."
"vc-preamble": "import Imports.AllImports\n\ndef solve_min_wire_length (n : Nat) (has_electricity\
  \ : String) (coordinates : List Nat) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isSorted (l : List Nat) : Bool :=\n  sorry\n\n/- Basic properties\
  \ -/\n"
"vc-theorems": "theorem min_wire_length_non_negative (n : Nat) (has_electricity :\
  \ String) (coordinates : List Nat) \n  (h1 : coordinates.length = n) \n  (h2 : has_electricity.length\
  \ = n)\n  (h3 : isSorted coordinates = true)\n  (h4 : ∃ i < n, has_electricity.data.get!\
  \ i = '1') :\n  solve_min_wire_length n has_electricity coordinates ≥ 0 :=\n  sorry\n\
  \n\ntheorem min_wire_length_bounded (n : Nat) (has_electricity : String) (coordinates\
  \ : List Nat)\n  (h1 : coordinates.length = n)\n  (h2 : has_electricity.length =\
  \ n)\n  (h3 : isSorted coordinates = true)\n  (h4 : ∃ i < n, has_electricity.data.get!\
  \ i = '1')\n  (h5 : coordinates.length ≥ 1) :\n  solve_min_wire_length n has_electricity\
  \ coordinates ≤ (coordinates.getLast! - coordinates.head!) :=\n  sorry\n\n\ntheorem\
  \ min_wire_length_all_electrified (n : Nat) (has_electricity : String) (coordinates\
  \ : List Nat)\n  (h1 : coordinates.length = n)\n  (h2 : has_electricity.length =\
  \ n) \n  (h3 : ∀ i < n, has_electricity.data.get! i = '1') :\n  solve_min_wire_length\
  \ n has_electricity coordinates = 0 :=\n  sorry\n\n/- Sorting property -/\n\n\n\
  theorem min_wire_length_requires_sorted (n : Nat) (has_electricity : String) (coordinates\
  \ unsorted : List Nat)\n  (h1 : coordinates.length = n)\n  (h2 : has_electricity.length\
  \ = n)\n  (h3 : isSorted coordinates = true)\n  (h4 : unsorted.length = n)\n  (h5\
  \ : coordinates ≠ unsorted)\n  (h6 : coordinates ≠ []) :\n  solve_min_wire_length\
  \ n has_electricity coordinates ≠ \n  solve_min_wire_length n has_electricity unsorted\
  \ :=\n  sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval solve_min_wire_length 2\
  \ \"01\" [1, 2]\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval solve_min_wire_length\
  \ 3 \"100\" [1, 5, 6]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
