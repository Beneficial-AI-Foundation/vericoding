"vc-description": "# Situation\nYou have been hired by a company making electric garage\
  \ doors. Accidents with the present product line have resulted in numerous damaged\
  \ cars, broken limbs and several killed pets. Your mission is to write a safer version\
  \ of their controller software.\n\n# Specification\nWe always start with a closed\
  \ door. The remote control has exactly one button, with the following behaviour.\n\
  \n+ If the door is closed, a push starts opening the door, and vice-versa\n+ It\
  \ takes 5 seconds for the door to open or close completely\n+ While the door is\
  \ moving, one push pauses movement, another push resumes movement in the same direction\n\
  \nIn order to make the door safer, it has been equiped with resistance-based obstacle\
  \ detection. When the door detects an obstacle, it must immediately reverse the\
  \ direction of movement.\n\n# Input\nA string where each character represents one\
  \ second, with the following possible values.\n\n* ```'.'``` No event\n* ```'P'```\
  \ Button has been pressed\n* ```'O'``` Obstacle has been detected (supersedes P)\n\
  \nAs an example, ```'..P....'``` means that nothing happens for two seconds, then\
  \ the button is pressed, then no further events.\n\n# Output\nA string where each\
  \ character represents one second and indicates the position of the door (0 if fully\
  \ closed and 5 fully open). The door starts moving immediately, hence its position\
  \ changes at the same second as the event.\n\n# Example\n```..P...O.....``` as input\
  \ should yield\n```001234321000``` as output"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def controller (s : String) : String := sorry\n\ntheorem controller_output_length\
  \ (s : String) :\n  (controller s).length = s.length := sorry\n"
"vc-theorems": "theorem controller_output_digits (s : String) :\n  ∀ c ∈ (controller\
  \ s).data, c = '0' ∨ c = '1' ∨ c = '2' ∨ c = '3' ∨ c = '4' ∨ c = '5' := sorry\n\n\
  \ntheorem controller_sequential_moves (s : String) :\n  ∀ i, i > 0 → i < (controller\
  \ s).length → \n    let nums := (controller s).data.map (fun c => c.toNat - '0'.toNat);\n\
  \    nums[i]! ≤ nums[i-1]! + 1 ∧ nums[i-1]! ≤ nums[i]! + 1 := sorry\n\n\ntheorem\
  \ controller_boundaries (s : String) :\n  ∀ c ∈ (controller s).data, \n    '0'.toNat\
  \ ≤ c.toNat ∧ c.toNat ≤ '5'.toNat := sorry\n\n\ntheorem controller_stops_at_limits\
  \ (s : String) :\n  ∀ i, i > 0 → i < (controller s).length - 1 →\n    let nums :=\
  \ (controller s).data.map (fun c => c.toNat - '0'.toNat);\n    (nums[i]! = 0 ∧ nums[i+1]!\
  \ ≠ nums[i]! → nums[i+1]! > nums[i]!) ∧\n    (nums[i]! = 5 ∧ nums[i+1]! ≠ nums[i]!\
  \ → nums[i+1]! < nums[i]!) := sorry\n\n/--\ninfo: '12345'\n-/\n#guard_msgs in\n\
  #eval controller \"P....\"\n\n/--\ninfo: '1222234555'\n-/\n#guard_msgs in\n#eval\
  \ controller \"P.P..P....\"\n\n/--\ninfo: '001234321000'\n-/\n#guard_msgs in\n#eval\
  \ controller \"..P...O.....\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
