"vc-description": "I have started studying electronics recently, and I came up with\
  \ a circuit made up of 2 LEDs and 3 buttons.\n\nHere 's how it works: 2 buttons\
  \ (`red` and `blue`) are connected to the LEDs (`red` and `blue` respectively).\
  \ Buttons pressing pattern will be remembered and represented through the LEDs when\
  \ the third button is pressed.\n\n - Only one LED can blink at a time.\n - The LED\
  \ will only blink once even if the button is held down.\n - The button must be released\
  \ to be pressed again.\n - If a button is pressed while the other button is being\
  \ held down, it will be ignored.\n - If two buttons are pressed simultaneously,\
  \ the red button will be preferred.\n - If a button is released while the other\
  \ is being held down, the other 's LED will blink.\n - `0` is up and `1` is down.\n\
  \ - The two inputs will always have the same length.\n \nHere is an example:\n\n\
  ```Python\nRed:  \"10011010\"\nBlue: \"10110111\"\n#=> \"RBRB\"\n\nRed:  \"01001000\"\
  \nBlue: \"01011100\"\n#=> \"RB\"\n\nRed:  \"01101000\"\nBlue: \"00111000\"\n#=>\
  \ \"RB\"\n```\n\nPS:\n\nThis is my first time making a kata, so there may be some\
  \ errors. \nYou may report to me if the description is too confusing. \nSorry for\
  \ my poor grammar."
"vc-preamble": "import Imports.AllImports\n\ndef seqR : String → Bool \n  | _ => sorry\n\
  \n\ndef seqB : String → Bool\n  | _ => sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def button_sequences (r : String) (b : String) : String :=\n  sorry\n"
"vc-theorems": "theorem button_sequences_valid_chars (r b : String) (h : r.length\
  \ > 0 ∧ b.length > 0) :\n  ∀ c, c ∈ (button_sequences r b).toList → c = 'R' ∨ c\
  \ = 'B' :=\nsorry\n\n\ntheorem button_sequences_length (r b : String) (h : r.length\
  \ > 0 ∧ b.length > 0) :\n  (button_sequences r b).length ≤ min r.length b.length\
  \ :=\nsorry\n\n\ntheorem button_sequences_all_zeros_red (s : String) (h : s.length\
  \ > 0) :\n  let zeros := String.mk (List.replicate s.length '0')\n  ∀ c, c ∈ (button_sequences\
  \ s zeros).toList → c = 'R' :=\nsorry\n\n\ntheorem button_sequences_all_zeros_blue\
  \ (s : String) (h : s.length > 0) :\n  let zeros := String.mk (List.replicate s.length\
  \ '0')\n  ∀ c, c ∈ (button_sequences zeros s).toList → c = 'B' :=\nsorry\n\n/--\n\
  info: 'RBRB'\n-/\n#guard_msgs in\n#eval button_sequences \"10011010\" \"10110111\"\
  \n\n/--\ninfo: 'RB'\n-/\n#guard_msgs in\n#eval button_sequences \"01001000\" \"\
  01011100\"\n\n/--\ninfo: 'RBRBRBRB'\n-/\n#guard_msgs in\n#eval button_sequences\
  \ \"10101010\" \"01010101\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
