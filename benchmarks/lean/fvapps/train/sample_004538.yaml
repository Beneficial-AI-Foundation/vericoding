"vc-description": "Given a certain square matrix ```A```, of dimension ```n x n```,\
  \ that has negative and positive values (many of them may be 0).\n\nWe need the\
  \ following values rounded to the closest integer:\n\n- the average of all the positive\
  \ numbers (more or equal to 0) that are in the principal diagonal and in the columns\
  \ with odd index, **avg1**\n\n- the absolute value of the average of all the negative\
  \ numbers in the secondary diagonal and in the columns with even index, **avg2**\n\
  \nLet's see the requirements in an example:\n```\nA = [[ 1,   3, -4,   5, -2,  5,\
  \  1], \n    [  2,   0, -7,   6,  8,  8, 15],\n    [  4,   4, -2, -10,  7, -1, \
  \ 7],\n    [ -1,   3,  1,   0, 11,  4, 21],\n    [ -7,   6, -4,  10,  5,  7,  6],\n\
  \    [ -5,   4,  3,  -5,  7,  8, 17],\n    [-11,   3,  4,  -8,  6, 16,  4]]\n```\
  \    \nThe elements of the principal diagonal are: \n```\n[1, 0, -2, 0, 5, 8, 4]\n\
  ```\nThe ones that are also in the \"odd columns\" (we consider the index starting\
  \ with 0) are: \n```\n[0, 0, 8] all positives\n```\nSo,\n```\navg1 =  [8 / 3] =\
  \ 3\n```\nThe elements of the secondary diagonal are:\n```\n[-11, 4, -4, 0, 7, 8,\
  \ 1]\n```\nThe ones that are in the even columns are:\n```\n[-11, -4, 7, 1]\n```\n\
  The negative ones are:\n```\n[-11, 4]\n```\nSo,\n```\navg2 = [|-15 / 2|] = 8\n```\n\
  Create a function ```avg_diags()```that may receive a square matrix of uncertain\
  \ dimensions and may output both averages in an array in the following order: ```[avg1,\
  \ avg2]```\n\nIf one of the diagonals have no elements fulfilling the requirements\
  \ described above the function should return ```-1```\nSo, if the function processes\
  \ the matrix given above, it should output:\n```\n[3, 8]\n```\nFeatures of the random\
  \ tests:\n```\nnumber of tests = 110\n5 ≤ matrix_length ≤ 1000\n-1000000 ≤ matrix[i,\
  \ j] ≤ 1000000\n```\nEnjoy it!\nTranslations into another languages will be released\
  \ soon."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def Matrix (α : Type) := List (List α)\n\ndef avg_diags (matrix\
  \ : Matrix Int) : List Int :=\n  sorry\n"
"vc-theorems": "theorem output_format {matrix : Matrix Int} :\n  let result := avg_diags\
  \ matrix\n  List.length result = 2 ∧ \n  (∀ x ∈ result, x ≥ -1) := by\n  sorry\n\
  \n\ntheorem diagonal_selection {matrix : Matrix Int} :\n  let n := List.length matrix\n\
  \  let pos_vals := List.filterMap (fun i => \n    if i % 2 = 1 ∧ (matrix.get! i).get!\
  \ i ≥ 0 \n    then some ((matrix.get! i).get! i)\n    else none) (List.range n)\n\
  \  let neg_vals := List.filterMap (fun i =>\n    if i % 2 = 0 ∧ (matrix.get! (n-i-1)).get!\
  \ i < 0\n    then some ((matrix.get! (n-i-1)).get! i)\n    else none) (List.range\
  \ n)\n  (List.isEmpty pos_vals → (avg_diags matrix).get! 0 = -1) ∧\n  (List.isEmpty\
  \ neg_vals → (avg_diags matrix).get! 1 = -1) := by\n  sorry\n\n\ntheorem three_by_three\
  \ {matrix : Matrix Int} (h1 : List.length matrix = 3)\n    (h2 : ∀ (i : Nat), i\
  \ < matrix.length → List.length (matrix.get! i) = 3) :\n  let result := avg_diags\
  \ matrix\n  ((matrix.get! 1).get! 1 ≥ 0 → result.get! 0 = (matrix.get! 1).get! 1)\
  \ ∧\n  ((matrix.get! 1).get! 1 < 0 → result.get! 0 = -1) ∧\n  (let neg_vals := List.filterMap\
  \ (fun x => if x < 0 then some x else none) \n    [(matrix.get! 0).get! 2, (matrix.get!\
  \ 2).get! 0]\n   if ¬ List.isEmpty neg_vals then\n     result.get! 1 = Int.natAbs\
  \ (neg_vals.foldr (· + ·) 0) / neg_vals.length\n   else\n     result.get! 1 = -1)\
  \ := by\n  sorry\n\n/--\ninfo: [3, 8]\n-/\n#guard_msgs in\n#eval avg_diags [[1,\
  \ 3, -4, 5, -2, 5, 1], [2, 0, -7, 6, 8, 8, 15], [4, 4, -2, -10, 7, -1, 7], [-1,\
  \ 3, 1, 0, 11, 4, 21], [-7, 6, -4, 10, 5, 7, 6], [-5, 4, 3, -5, 7, 8, 17], [-11,\
  \ 3, 4, -8, 6, 16, 4]]\n\n/--\ninfo: [5, -1]\n-/\n#guard_msgs in\n#eval avg_diags\
  \ [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n/--\ninfo: [0, -1]\n-/\n#guard_msgs in\n\
  #eval avg_diags [[0, 0], [0, 0]]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
