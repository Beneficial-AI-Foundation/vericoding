"vc-description": "In this kata, you should calculate type of triangle with three\
  \ given sides ``a``, ``b`` and ``c`` (given in any order).\n\nIf all angles are\
  \ less than ``90°``, this triangle is ``acute`` and function should return ``1``.\n\
  \nIf one angle is strictly ``90°``, this triangle is ``right`` and function should\
  \ return ``2``.\n\nIf one angle more than ``90°``, this triangle is ``obtuse`` and\
  \ function should return ``3``.\n\nIf three sides cannot form triangle, or one angle\
  \ is ``180°`` (which turns triangle into segment) - function should return ``0``.\n\
  \nInput parameters are ``sides`` of given triangle. All input values are non-negative\
  \ floating point or integer numbers (or both).\n\n\n\n\nAcute\n\n\nRight\n\n\nObtuse\n\
  \n\n\n\n### Examples:\n```python\ntriangle_type(2, 4, 6) # return 0 (Not triangle)\n\
  triangle_type(8, 5, 7) # return 1 (Acute, angles are approx. 82°, 38° and 60°)\n\
  triangle_type(3, 4, 5) # return 2 (Right, angles are approx. 37°, 53° and exactly\
  \ 90°)\ntriangle_type(7, 12, 8) # return 3 (Obtuse, angles are approx. 34°, 106°\
  \ and 40°)\n```\n\nIf you stuck, this can help you: http://en.wikipedia.org/wiki/Law_of_cosines.\
  \ But you can solve this kata even without angle calculation.\n\nThere is very small\
  \ chance of random test to fail due to round-off error, in such case resubmit your\
  \ solution."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def triangle_type (a b c : Int) : Int :=\n  sorry\n"
"vc-theorems": "theorem triangle_type_symmetric (a b c : Int) : \n  a > 0 → b > 0\
  \ → c > 0 →\n  triangle_type a b c = triangle_type a c b ∧\n  triangle_type a b\
  \ c = triangle_type b a c ∧ \n  triangle_type a b c = triangle_type b c a ∧\n  triangle_type\
  \ a b c = triangle_type c a b ∧\n  triangle_type a b c = triangle_type c b a :=\n\
  sorry\n\n\ntheorem triangle_inequality (a b c : Int) :\n  a > 0 → b > 0 → c > 0\
  \ →\n  let x := min a (min b c)\n  let y := max (min a (max b c)) (min b c)\n  let\
  \ z := max a (max b c) \n  (if z ≥ x + y then triangle_type a b c = 0 \n   else\
  \ triangle_type a b c ≠ 0) :=\nsorry\n\n\ntheorem right_triangle_scaling (a b c\
  \ : Int) :\n  a > 0 → b > 0 → \n  c*c = a*a + b*b →\n  triangle_type a b c = 2 ∧\n\
  \  triangle_type (2*a) (2*b) (2*c) = 2 :=\nsorry\n\n\ntheorem triangle_type_range\
  \ (a b c : Int) :\n  a > 0 → b > 0 → c > 0 →\n  triangle_type a b c = 0 ∨ \n  triangle_type\
  \ a b c = 1 ∨\n  triangle_type a b c = 2 ∨ \n  triangle_type a b c = 3 :=\nsorry\n\
  \n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval triangle_type 2 4 6\n\n/--\ninfo: 1\n\
  -/\n#guard_msgs in\n#eval triangle_type 8 5 7\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n\
  #eval triangle_type 3 4 5\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval triangle_type\
  \ 7 12 8\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
