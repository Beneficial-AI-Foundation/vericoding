"vc-description": "We have the following sequence:\n```python\nf(0) = 0\nf(1) = 1\n\
  f(2) = 1\nf(3) = 2\nf(4) = 4;\nf(n) = f(n-1) + f(n-2) + f(n-3) + f(n-4) + f(n-5);\n\
  ```\n\nYour task is to give the number of total values for the odd terms of the\
  \ sequence  up to the n-th term (included). (The number n (of n-th term) will be\
  \ given as a positive integer)\n\nThe values 1 (one) is the only that is duplicated\
  \ in the sequence and should be counted only once.\n\nE.g. \n```\ncount_odd_pentaFib(5)\
  \ -----> 1 # because the terms up to 5 are: 0, 1, 1, 2, 4, 8 (only 1 is odd and\
  \ counted once)\n```\nOther examples:\n```\n count_odd_pentaFib(10) ------> 3 #because\
  \ the odds terms are: [1, 1, 31, 61] (three different values)\n\ncount_odd_pentaFib(15)\
  \ ------> 5 # beacause the odd terms are: [1, 1, 31, 61, 1793, 3525] (five different\
  \ values)\n```\nGood luck !!\n\n(Your code should be fast. Many moderate high values\
  \ will be waiting to test it.)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_odd_pentaFib (n : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem count_odd_pentaFib_nonnegative (n : Nat) :\n  count_odd_pentaFib\
  \ n ≥ 0 :=\n  sorry\n\n\n\n\ntheorem count_odd_pentaFib_first_terms (n : Nat) (h\
  \ : n ≤ 5) :\n  count_odd_pentaFib n = match n with\n    | 0 => 0\n    | 1 => 1\
  \  \n    | 2 => 1\n    | 3 => 1\n    | 4 => 1\n    | 5 => 1\n    | _ => 0\n  :=\n\
  \  sorry\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval count_odd_pentaFib 0\n\n/--\n\
  info: 1\n-/\n#guard_msgs in\n#eval count_odd_pentaFib 1\n\n/--\ninfo: 1\n-/\n#guard_msgs\
  \ in\n#eval count_odd_pentaFib 2\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
