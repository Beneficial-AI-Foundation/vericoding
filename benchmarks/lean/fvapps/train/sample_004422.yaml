"vc-description": "To participate in a prize draw each one gives his/her firstname.\
  \ \n\nEach letter of a firstname\nhas a value which is its rank in the English alphabet.\
  \ `A` and `a` have rank `1`, `B` and `b` rank `2` and so on. \n\nThe *length* of\
  \ the firstname is added to the *sum* of these ranks hence a number `som`. \n\n\
  An array of random weights is linked to the firstnames and each `som` is multiplied\
  \ by \nits corresponding weight to get what they call a `winning number`.\n\nExample:\n\
  ```\nnames: \"COLIN,AMANDBA,AMANDAB,CAROL,PauL,JOSEPH\"\nweights: [1, 4, 4, 5, 2,\
  \ 1]\n\nPauL -> som = length of firstname + 16 + 1 + 21 + 12 = 4 + 50 -> 54\nThe\
  \ *weight* associated with PauL is 2 so PauL's *winning number* is 54 * 2 = 108.\n\
  ```\nNow one can sort the firstnames in decreasing order of the `winning numbers`.\
  \ When two\npeople have the same `winning number` sort them *alphabetically* by\
  \ their firstnames.\n\n### Task:\n\n- parameters: `st` a string of firstnames, `we`\
  \ an array of weights, `n` a rank \n\n- return: the firstname of the participant\
  \ whose rank is `n` \n(ranks are numbered from 1)\n\n### Example:\n```\nnames: \"\
  COLIN,AMANDBA,AMANDAB,CAROL,PauL,JOSEPH\"\nweights: [1, 4, 4, 5, 2, 1]\nn: 4\n\n\
  The function should return: \"PauL\"\n```\n# Notes:\n- The weight array is at least\
  \ as long as the number of names, it can be longer.\n\n- If `st` is empty return\
  \ \"No participants\".\n\n- If n is greater than the number of participants then\
  \ return \"Not enough participants\".\n\n- See Examples Test Cases for more examples."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def rank (names : String) (weights : List Nat) (n : Nat) : String\
  \ :=\n  sorry\n"
"vc-theorems": "theorem rank_deterministic (names : String) (weights : List Nat) (n\
  \ : Nat) :\n  rank names weights n = rank names weights n :=\n  sorry\n\n\ntheorem\
  \ rank_selects_participant (names : String) (weights : List Nat) (n : Nat) \n  (participants\
  \ : List String) (h1 : participants.length > 0) \n  (h2 : n ≤ participants.length)\
  \ :\n  (rank names weights n) ∈ participants :=\n  sorry\n\n\ntheorem rank_empty_input\
  \ :\n  rank \"\" [] 1 = \"No participants\" :=\n  sorry\n\n\ntheorem rank_insufficient_participants\
  \ (name : String) (weight : List Nat) :\n  rank name weight 2 = \"Not enough participants\"\
  \ :=\n  sorry\n\n\ntheorem rank_two_equal_weights (n : String) (m : String) (h :\
  \ n ≠ m) :\n  (rank (n ++ \",\" ++ m) [1, 1] 1 = n) ∨ \n  (rank (n ++ \",\" ++ m)\
  \ [1, 1] 1 = m) :=\n  sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
