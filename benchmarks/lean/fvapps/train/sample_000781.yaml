"vc-description": "Chefina has two sequences $A_1, A_2, \\ldots, A_N$ and $B_1, B_2,\
  \ \\ldots, B_N$. She views two sequences with length $N$ as identical if, after\
  \ they are sorted in non-decreasing order, the $i$-th element of one sequence is\
  \ equal to the $i$-th element of the other sequence for each $i$ ($1 \\le i \\le\
  \ N$).\nTo impress Chefina, Chef wants to make the sequences identical. He may perform\
  \ the following operation zero or more times: choose two integers $i$ and $j$ $(1\
  \ \\le i,j \\le N)$ and swap $A_i$ with $B_j$. The cost of each such operation is\
  \ $\\mathrm{min}(A_i, B_j)$.\nYou have to find the minimum total cost with which\
  \ Chef can make the two sequences identical.\n\n-----Input-----\n- The first line\
  \ of the input contains a single integer $T$ denoting the number of test cases.\
  \ The description of $T$ test cases follows.\n- The first line of each test case\
  \ contains a single integer $N$.\n- The second line contains $N$ space-separated\
  \ integers $A_1, A_2, \\ldots, A_N$.\n- The third line contains $N$ space-separated\
  \ integers $B_1, B_2, \\ldots, B_N$.\n\n-----Output-----\nFor each test case, print\
  \ a single line containing one integer ― the minimum cost, or $-1$ if no valid sequence\
  \ of operations exists.\n\n-----Constraints-----\n- $1 \\le T \\le 2,000$\n- $1\
  \ \\le N \\le 2 \\cdot 10^5$\n- $1 \\le A_i, B_i \\le 10^9$ for each valid $i$\n\
  - the sum of $N$ over all test cases does not exceed $2 \\cdot 10^6$\n\n-----Subtasks-----\n\
  Subtask #1 (15 points):\n- $T \\le 20$\n- $N \\le 20$\nSubtask #2 (85 points): original\
  \ constraints\n\n-----Example Input-----\n3\n1\n1\n2\n2\n1 2\n2 1\n2\n1 1\n2 2\n\
  \n-----Example Output-----\n-1\n0\n1\n\n-----Explanation-----\nExample case 1: There\
  \ is no way to make the sequences identical, so the answer is $-1$.\nExample case\
  \ 2: The sequence are identical initially, so the answer is $0$.\nExample case 3:\
  \ We can swap $A_1$ with $B_2$, which makes the two sequences identical, so the\
  \ answer is $1$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_sequence_swap (n : Nat) (a b : List Nat) : Int := sorry\n\
  \ndef isSorted (l : List Nat) : Bool := sorry\n"
"vc-theorems": "theorem sequence_swap_valid_output \n  (n : Nat) (a b : List Nat)\
  \ (result : Int) \n  (h : result = solve_sequence_swap n a b) :\n  (result = -1)\
  \ ∨ \n  (result = 0 ∧ isSorted a = isSorted b) ∨\n  (result ≠ -1 ∧ result ≠ 0 →\
  \ \n    a.length = n ∧ b.length = n ∧ \n    a.all (λ x => x ≥ 0) ∧ b.all (λ x =>\
  \ x ≥ 0)) := \nsorry\n\n\ntheorem identical_sequences_return_zero\n  (a b : List\
  \ Nat)\n  (h1 : a.length = b.length)\n  (h2 : b = a) :\n  solve_sequence_swap a.length\
  \ a b = 0 := \nsorry\n\n\ntheorem sequence_immutability\n  (a b : List Nat)\n  (a_copy\
  \ b_copy : List Nat)\n  (h1 : a_copy = a)\n  (h2 : b_copy = b) :\n  solve_sequence_swap\
  \ a.length a b = solve_sequence_swap a.length a b ∧\n  a = a_copy ∧ b = b_copy :=\n\
  sorry\n\n/--\ninfo: -1\n-/\n#guard_msgs in\n#eval solve_sequence_swap 1 [1] [2]\n\
  \n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval solve_sequence_swap 2 [1, 2] [2, 1]\n\n\
  /--\ninfo: 1\n-/\n#guard_msgs in\n#eval solve_sequence_swap 2 [1, 1] [2, 2]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
