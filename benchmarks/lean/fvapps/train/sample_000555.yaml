"vc-description": "Ayu loves distinct letter sequences ,a distinct letter sequence\
  \ is defined by a sequence of small case english alphabets such that no character\
  \ appears more then once.\nBut however there are two phrases that she doesn't like\
  \ these phrases are \"kar\" and \"shi\" and she is given a sequence of distinct\
  \ characters and she wonders how many such sequences she can form using all the\
  \ characters such that these phrases don't occur.\nHelp her finding the number of\
  \ such sequences.\nNew Year Gift - It is guaranteed that for sequences of length\
  \ greater then 6 letters k,a,r,s,h,i will be present(we thought of being generous,\
  \ thank us later :)).\n\n-----Input:-----\n- First line will contain $T$, number\
  \ of testcases. Then the testcases follow. \n- Each line consists of a string $S$\
  \ (3<=s.length<=18) of distinct characters.\n\n-----Output:-----\nPrint the number\
  \ of sequences that can be formed by permuting all the characters such that phrases\
  \ \"kar\" and \"shi\" don't occur.\n\n-----Constraints-----\n- $1 \\leq T \\leq\
  \ 10$\n- $3 \\leq S.length \\leq 18$\n\n-----Sample Input:-----\n2\nkarp\nabcd\n\
  \n-----Sample Output:-----\n22\n24"
"vc-preamble": "import Imports.AllImports\n\ndef factorial (n : Nat) : Nat :=\n  match\
  \ n with\n  | 0 => 1\n  | n + 1 => (n + 1) * factorial n\n\n\ndef count_distinct_sequences\
  \ (s : String) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def containsChar (s : String) (c : Char) : Bool :=\n  s.data.contains\
  \ c\n"
"vc-theorems": "theorem count_distinct_basic_properties (s : String) : \n  let result\
  \ := count_distinct_sequences s\n  result ≤ factorial s.length ∧ \n  0 < result\
  \ ∧\n  result = result \n  := sorry\n\n\ntheorem count_distinct_special_substring\
  \ (s : String) :\n  let result := count_distinct_sequences s\n  ((containsChar s\
  \ 'k' ∧ containsChar s 'a' ∧ containsChar s 'r') ∨ \n   (containsChar s 's' ∧ containsChar\
  \ s 'h' ∧ containsChar s 'i')) →\n  result < factorial s.length\n  := sorry\n\n\n\
  theorem count_distinct_karshi_all_letters (s : String) :\n  let result := count_distinct_sequences\
  \ s\n  (containsChar s 'k' ∧ containsChar s 'a' ∧ containsChar s 'r' ∧ \n   containsChar\
  \ s 's' ∧ containsChar s 'h' ∧ containsChar s 'i') →\n  result < factorial s.length\
  \ - factorial (s.length - 2)\n  := sorry\n\n\ntheorem count_distinct_exact_karshi\
  \ (s : String) :\n  s.length = 6 →\n  (s.data.toArray.qsort (· < ·) = \"karshi\"\
  .data.toArray.qsort (· < ·)) →\n  count_distinct_sequences s = factorial 6 - 2 *\
  \ factorial 4\n  := sorry\n\n\ntheorem count_distinct_length_properties (s : String)\
  \ :\n  let result := count_distinct_sequences s\n  (s.length ≤ 2 → result = factorial\
  \ s.length) ∧\n  (s.length > 6 ∧ containsChar s 'k' ∧ containsChar s 'a' ∧ \n  \
  \ containsChar s 'r' ∧ containsChar s 's' ∧ containsChar s 'h' ∧ \n   containsChar\
  \ s 'i' → \n    result = factorial s.length - 2 * factorial (s.length - 2) + factorial\
  \ (s.length - 4))\n  := sorry\n\n/--\ninfo: 22\n-/\n#guard_msgs in\n#eval count_distinct_sequences\
  \ \"karp\"\n\n/--\ninfo: 24\n-/\n#guard_msgs in\n#eval count_distinct_sequences\
  \ \"abcd\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
