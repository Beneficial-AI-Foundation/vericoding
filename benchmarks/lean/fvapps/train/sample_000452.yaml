"vc-description": "You are given a map of a server center, represented as a m * n\
  \ integer matrix grid, where 1 means that on that cell there is a server and 0 means\
  \ that it is no server. Two servers are said to communicate if they are on the same\
  \ row or on the same column.\n\nReturn the number of servers that communicate with\
  \ any other server.\n \nExample 1:\n\nInput: grid = [[1,0],[0,1]]\nOutput: 0\nExplanation: No\
  \ servers can communicate with others.\nExample 2:\n\nInput: grid = [[1,0],[1,1]]\n\
  Output: 3\nExplanation: All three servers can communicate with at least one other\
  \ server.\n\nExample 3:\n\nInput: grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]\n\
  Output: 4\nExplanation: The two servers in the first row can communicate with each\
  \ other. The two servers in the third column can communicate with each other. The\
  \ server at right bottom corner can't communicate with any other server.\n\n \n\
  Constraints:\n\nm == grid.length\nn == grid[i].length\n1 <= m <= 250\n1 <= n <=\
  \ 250\ngrid[i][j] == 0 or 1"
"vc-preamble": "import Imports.AllImports\n\ndef countServers (grid : List (List Nat))\
  \ : Nat := sorry\n\ndef is_valid_grid (grid : List (List Nat)) : Bool := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_ones (grid : List (List Nat)) : Nat := sorry\n\ntheorem\
  \ countServers_non_negative (grid : List (List Nat)) :\n  is_valid_grid grid → countServers\
  \ grid ≥ 0 := sorry\n"
"vc-theorems": "theorem countServers_upper_bound (grid : List (List Nat)) :\n  is_valid_grid\
  \ grid → countServers grid ≤ count_ones grid := sorry\n\n\ntheorem single_server_result\
  \ (grid : List (List Nat)) :\n  is_valid_grid grid → count_ones grid = 1 → countServers\
  \ grid = 0 := sorry\n\n\ntheorem empty_grid_zero {m n : Nat} (grid : List (List\
  \ Nat)) :\n  m > 0 → n > 0 → \n  grid = List.replicate m (List.replicate n 0) →\n\
  \  countServers grid = 0 := sorry\n\n\ntheorem full_grid_count {n : Nat} (grid :\
  \ List (List Nat)) :\n  n ≥ 2 →\n  grid = List.replicate n (List.replicate n 1)\
  \ →\n  countServers grid = n * n := sorry\n\n\ntheorem diagonal_only_zero {n : Nat}\
  \ (grid : List (List Nat)) :\n  n ≥ 2 →\n  grid = List.map \n    (fun i => List.map\
  \ (fun j => if i = j then 1 else 0) (List.range n)) \n    (List.range n) →\n  countServers\
  \ grid = 0 := sorry\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval countServers [[1,\
  \ 0], [0, 1]]\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval countServers [[1, 0], [1,\
  \ 1]]\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval countServers [[1, 1, 0, 0], [0,\
  \ 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 1]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
