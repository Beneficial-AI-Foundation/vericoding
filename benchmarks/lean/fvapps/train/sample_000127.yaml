"vc-description": "Given an array A of positive integers, A[i] represents the value\
  \ of the i-th sightseeing spot, and two sightseeing spots i and j have distance\
  \ j - i between them.\nThe score of a pair (i < j) of sightseeing spots is (A[i]\
  \ + A[j] + i - j) : the sum of the values of the sightseeing spots, minus the distance\
  \ between them.\nReturn the maximum score of a pair of sightseeing spots.\n \nExample\
  \ 1:\nInput: [8,1,5,2,6]\nOutput: 11\nExplanation: i = 0, j = 2, A[i] + A[j] + i\
  \ - j = 8 + 5 + 0 - 2 = 11\n\n \nNote:\n\n2 <= A.length <= 50000\n1 <= A[i] <= 1000"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def max_score_sightseeing_pair (values: List Nat) : Nat :=\n  sorry\
  \ \n"
"vc-theorems": "theorem max_score_basic_case (values: List Nat) :\n  values = [8,1,5,2,6]\
  \ → max_score_sightseeing_pair values = 11 :=\n  sorry\n\n\ntheorem max_score_min_case\
  \ (values: List Nat) :\n  values = [1,2] → max_score_sightseeing_pair values = 2\
  \ :=\n  sorry\n\n\ntheorem max_score_equal_values (values: List Nat) :\n  values\
  \ = [5,5,5,5] → max_score_sightseeing_pair values = 9 :=\n  sorry\n\n\ntheorem max_score_two_ones\
  \ (values: List Nat) :\n  values = [1,1] → max_score_sightseeing_pair values = 1\
  \ :=\n  sorry\n\n/--\ninfo: 11\n-/\n#guard_msgs in\n#eval max_score_sightseeing_pair\
  \ [8, 1, 5, 2, 6]\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval max_score_sightseeing_pair\
  \ [1, 2]\n\n/--\ninfo: 9\n-/\n#guard_msgs in\n#eval max_score_sightseeing_pair [5,\
  \ 5, 5, 5]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
