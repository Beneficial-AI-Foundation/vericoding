"vc-description": "=====Function Descriptions=====\n.union()\n\nThe .union() operator\
  \ returns the union of a set and the set of elements in an iterable.\nSometimes,\
  \ the | operator is used in place of .union() operator, but it operates only on\
  \ the set of elements in set.\nSet is immutable to the .union() operation (or |\
  \ operation).\n\nExample\n\n>>> s = set(\"Hacker\")\n>>> print s.union(\"Rank\"\
  )\nset(['a', 'R', 'c', 'r', 'e', 'H', 'k', 'n'])\n\n>>> print s.union(set(['R',\
  \ 'a', 'n', 'k']))\nset(['a', 'R', 'c', 'r', 'e', 'H', 'k', 'n'])\n\n>>> print s.union(['R',\
  \ 'a', 'n', 'k'])\nset(['a', 'R', 'c', 'r', 'e', 'H', 'k', 'n'])\n\n>>> print s.union(enumerate(['R',\
  \ 'a', 'n', 'k']))\nset(['a', 'c', 'r', 'e', (1, 'a'), (2, 'n'), 'H', 'k', (3, 'k'),\
  \ (0, 'R')])\n\n>>> print s.union({\"Rank\":1})\nset(['a', 'c', 'r', 'e', 'H', 'k',\
  \ 'Rank'])\n\n>>> s | set(\"Rank\")\nset(['a', 'R', 'c', 'r', 'e', 'H', 'k', 'n'])\n\
  \n=====Problem Statement=====\n\nThe students of District College have subscriptions\
  \ to English and French newspapers. Some students have subscribed only to English,\
  \ some have subscribed to only French and some have subscribed to both newspapers.\n\
  \nYou are given two sets of student roll numbers. One set has subscribed to the\
  \ English newspaper, and the other set is subscribed to the French newspaper. The\
  \ same student could be in both sets. Your task is to find the total number of students\
  \ who have subscribed to at least one newspaper.\n\n=====Input Format=====\nThe\
  \ first line contains an integer, n, the number of students who have subscribed\
  \ to the English newspaper.\nThe second line contains n space separated roll numbers\
  \ of those students.\nThe third line contains b, the number of students who have\
  \ subscribed to the French newspaper.\nThe fourth line contains b space separated\
  \ roll numbers of those students. \n\n=====Constraints=====\n0 < Total number of\
  \ students in college < 1000\n\n=====Output Format=====\nOutput the total number\
  \ of students who have at least one subscription."
"vc-preamble": "import Imports.AllImports\n\ndef student_union (n1 : Nat) (eng : String)\
  \ (n2 : Nat) (fre : String) : Nat := sorry\n\ndef stringToList (s : String) : List\
  \ Int := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def removeDuplicates (l : List Int) : List Int := sorry\n\ntheorem\
  \ student_union_leq_sum_lengths {n1 n2 : Nat} {eng fre : String} : \n  student_union\
  \ n1 eng n2 fre ≤ n1 + n2 := sorry\n"
"vc-theorems": "theorem student_union_equals_union_length {n1 n2 : Nat} {eng fre :\
  \ String} :\n  ∃ l1 l2 : List Int, \n    l1 = stringToList eng ∧ \n    l2 = stringToList\
  \ fre ∧\n    student_union n1 eng n2 fre = (removeDuplicates (l1 ++ l2)).length\
  \ := sorry\n\n\ntheorem student_union_identical_lists {n : Nat} {nums : String}\
  \ :\n  student_union n nums n nums = (removeDuplicates (stringToList nums)).length\
  \ := sorry\n\n/--\ninfo: 13\n-/\n#guard_msgs in\n#eval student_union 9 \"1 2 3 4\
  \ 5 6 7 8 9\" 9 \"10 1 2 3 11 21 55 6 8\"\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n\
  #eval student_union 3 \"1 2 3\" 3 \"4 5 6\"\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n\
  #eval student_union 3 \"1 2 3\" 3 \"1 2 3\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
