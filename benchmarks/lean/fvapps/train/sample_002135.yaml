"vc-description": "Meanwhile, the kingdom of K is getting ready for the marriage of\
  \ the King's daughter. However, in order not to lose face in front of the relatives,\
  \ the King should first finish reforms in his kingdom. As the King can not wait\
  \ for his daughter's marriage, reforms must be finished as soon as possible.\n\n\
  The kingdom currently consists of n cities. Cities are connected by n - 1 bidirectional\
  \ road, such that one can get from any city to any other city. As the King had to\
  \ save a lot, there is only one path between any two cities.\n\nWhat is the point\
  \ of the reform? The key ministries of the state should be relocated to distinct\
  \ cities (we call such cities important). However, due to the fact that there is\
  \ a high risk of an attack by barbarians it must be done carefully. The King has\
  \ made several plans, each of which is described by a set of important cities, and\
  \ now wonders what is the best plan.\n\nBarbarians can capture some of the cities\
  \ that are not important (the important ones will have enough protection for sure),\
  \ after that the captured city becomes impassable. In particular, an interesting\
  \ feature of the plan is the minimum number of cities that the barbarians need to\
  \ capture in order to make all the important cities isolated, that is, from all\
  \ important cities it would be impossible to reach any other important city.\n\n\
  Help the King to calculate this characteristic for each of his plan.\n\n\n-----Input-----\n\
  \nThe first line of the input contains integer n (1 ≤ n ≤ 100 000) — the number\
  \ of cities in the kingdom.\n\nEach of the next n - 1 lines contains two distinct\
  \ integers u_{i}, v_{i} (1 ≤ u_{i}, v_{i} ≤ n) — the indices of the cities connected\
  \ by the i-th road. It is guaranteed that you can get from any city to any other\
  \ one moving only along the existing roads.\n\nThe next line contains a single integer\
  \ q (1 ≤ q ≤ 100 000) — the number of King's plans.\n\nEach of the next q lines\
  \ looks as follows: first goes number k_{i} — the number of important cities in\
  \ the King's plan, (1 ≤ k_{i} ≤ n), then follow exactly k_{i} space-separated pairwise\
  \ distinct numbers from 1 to n — the numbers of important cities in this plan.\n\
  \nThe sum of all k_{i}'s does't exceed 100 000.\n\n\n-----Output-----\n\nFor each\
  \ plan print a single integer — the minimum number of cities that the barbarians\
  \ need to capture, or print  - 1 if all the barbarians' attempts to isolate important\
  \ cities will not be effective.\n\n\n-----Examples-----\nInput\n4\n1 3\n2 3\n4 3\n\
  4\n2 1 2\n3 2 3 4\n3 1 2 4\n4 1 2 3 4\n\nOutput\n1\n-1\n1\n-1\n\nInput\n7\n1 2\n\
  2 3\n3 4\n1 5\n5 6\n5 7\n1\n4 2 4 6 7\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the\
  \ first sample, in the first and the third King's plan barbarians can capture the\
  \ city 3, and that will be enough. In the second and the fourth plans all their\
  \ attempts will not be effective.\n\nIn the second sample the cities to capture\
  \ are 3 and 5."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_kingdom (n : Nat) (roads : List (Nat × Nat)) (plans :\
  \ List (Nat × List Nat)) : List Int :=\nsorry\n"
"vc-theorems": "theorem solve_kingdom_result_length {n : Nat} {roads : List (Nat ×\
  \ Nat)} {plans : List (Nat × List Nat)} :\n  List.length (solve_kingdom n roads\
  \ plans) = List.length plans :=\nsorry\n\n\ntheorem solve_kingdom_result_valid_values\
  \ {n : Nat} {roads : List (Nat × Nat)} {plans : List (Nat × List Nat)} :\n  ∀ r\
  \ ∈ solve_kingdom n roads plans, r = -1 ∨ r ≥ 0 :=\nsorry \n\n\ntheorem solve_kingdom_result_bounded\
  \ {n : Nat} {roads : List (Nat × Nat)} {plans : List (Nat × List Nat)} :\n  ∀ r\
  \ ∈ solve_kingdom n roads plans, r = -1 ∨ r ≤ n :=\nsorry\n\n/--\ninfo: [1, -1,\
  \ 1, -1]\n-/\n#guard_msgs in\n#eval solve_kingdom 4 [(1, 3), (2, 3), (4, 3)] [(2,\
  \ [1, 2]), (3, [2, 3, 4]), (3, [1, 2, 4]), (4, [1, 2, 3, 4])]\n\n/--\ninfo: [2]\n\
  -/\n#guard_msgs in\n#eval solve_kingdom 7 [(1, 2), (2, 3), (3, 4), (1, 5), (5, 6),\
  \ (5, 7)] [(4, [2, 4, 6, 7])]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
