"vc-description": "The chef is trying to solve some pattern problems, Chef wants your\
  \ help to code it. Chef has one number K to form a new pattern. Help the chef to\
  \ code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$,\
  \ the number of test cases. Then the test cases follow. \n- Each test case contains\
  \ a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test\
  \ case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n\
  - $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n3\n2\n3\n4\n\n-----Sample Output:-----\n\
  0\n*1\n**2\n0\n*1\n**2\n***3\n0\n*1\n**2\n***3\n****4\n\n-----EXPLANATION:-----\n\
  No need, else pattern can be decode easily."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def generatePattern (k : Nat) : List String := sorry\n\ntheorem\
  \ generate_pattern_length {k : Nat} :\n  List.length (generatePattern k) = k + 1\
  \ := sorry\n"
"vc-theorems": "theorem generate_pattern_first_element {k : Nat} :\n  List.head! (generatePattern\
  \ k) = \"0\" := sorry\n\n\ntheorem generate_pattern_stars_count {k : Nat} {i : Nat}\
  \ (h : i > 0) (h2 : i ≤ k) :\n  let row := (generatePattern k).get! i\n  let count\
  \ := row.foldl (fun acc c => if c = '*' then acc + 1 else acc) 0\n  count = i :=\
  \ sorry\n\n\ntheorem generate_pattern_row_format {k : Nat} {i : Nat} (h : i > 0)\
  \ (h2 : i ≤ k) :\n  let row := (generatePattern k).get! i\n  row = String.mk (List.replicate\
  \ i '*') ++ toString i := sorry\n\n\ntheorem generate_pattern_empty :\n  generatePattern\
  \ 0 = [\"0\"] := sorry\n\n/--\ninfo: ['0', '*1', '**2']\n-/\n#guard_msgs in\n#eval\
  \ generate_pattern 2\n\n/--\ninfo: ['0', '*1', '**2', '***3']\n-/\n#guard_msgs in\n\
  #eval generate_pattern 3\n\n/--\ninfo: ['0', '*1', '**2', '***3', '****4']\n-/\n\
  #guard_msgs in\n#eval generate_pattern 4\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
