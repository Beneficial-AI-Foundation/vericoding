"vc-description": "Backwards Read Primes are primes that when read backwards in base\
  \ 10 (from right to left) \nare a different prime. (This rules out primes which\
  \ are palindromes.)\n```\nExamples:\n13 17 31 37 71 73 are Backwards Read Primes\n\
  ```\n13 is such because it's prime and read from right to left writes 31 which is\
  \ prime too. Same for the others.\n\n## Task\nFind all Backwards Read Primes between\
  \ two positive given numbers (both inclusive), the second one always being greater\
  \ than or equal to the first one. The resulting array or the resulting string will\
  \ be ordered following the natural order of the prime numbers.\n\n## Example\n\n\
  backwardsPrime(2, 100) => [13, 17, 31, 37, 71, 73, 79, 97] \nbackwardsPrime(9900,\
  \ 10000) => [9923, 9931, 9941, 9967]\nbackwardsPrime(501, 599) => []\n\n## Note\
  \ for Forth\nReturn only the first backwards-read prime between start and end\n\
  or 0 if you don't find any\n\n```python\nbackwards_prime(2, 100) => [13, 17, 31,\
  \ 37, 71, 73, 79, 97] \nbackwards_prime(9900, 10000) => [9923, 9931, 9941, 9967]\n\
  ```"
"vc-preamble": "import Imports.AllImports\n\ndef is_prime : Nat → Bool := sorry\n\n\
  def reverse : Nat → Nat := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def backwards_prime : Nat → Nat → List Nat := sorry\n\n\n\n\n\n\
  theorem backwards_prime_empty_range : \n  backwards_prime 1 0 = [] ∧ \n  backwards_prime\
  \ 0 1 = [] := sorry"
"vc-theorems": "/--\ninfo: [13, 17, 31, 37, 71, 73, 79, 97]\n-/\n#guard_msgs in\n\
  #eval backwards_prime 2 100\n\n/--\ninfo: [9923, 9931, 9941, 9967]\n-/\n#guard_msgs\
  \ in\n#eval backwards_prime 9900 10000\n\n/--\ninfo: []\n-/\n#guard_msgs in\n#eval\
  \ backwards_prime 501 599\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
