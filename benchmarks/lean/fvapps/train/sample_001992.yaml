"vc-description": "Slime and his $n$ friends are at a party. Slime has designed a\
  \ game for his friends to play.\n\nAt the beginning of the game, the $i$-th player\
  \ has $a_i$ biscuits. At each second, Slime will choose a biscuit randomly uniformly\
  \ among all $a_1 + a_2 + \\ldots + a_n$ biscuits, and the owner of this biscuit\
  \ will give it to a random uniform player among $n-1$ players except himself. The\
  \ game stops when one person will have all the biscuits.\n\nAs the host of the party,\
  \ Slime wants to know the expected value of the time that the game will last, to\
  \ hold the next activity on time.\n\nFor convenience, as the answer can be represented\
  \ as a rational number $\\frac{p}{q}$ for coprime $p$ and $q$, you need to find\
  \ the value of $(p \\cdot q^{-1})\\mod 998\\,244\\,353$. You can prove that $q\\\
  mod 998\\,244\\,353 \\neq 0$.\n\n\n-----Input-----\n\nThe first line contains one\
  \ integer $n\\ (2\\le n\\le 100\\,000)$: the number of people playing the game.\n\
  \nThe second line contains $n$ non-negative integers $a_1,a_2,\\dots,a_n\\ (1\\\
  le a_1+a_2+\\dots+a_n\\le 300\\,000)$, where $a_i$ represents the number of biscuits\
  \ the $i$-th person own at the beginning.\n\n\n-----Output-----\n\nPrint one integer:\
  \ the expected value of the time that the game will last, modulo $998\\,244\\,353$.\n\
  \n\n-----Examples-----\nInput\n2\n1 1\n\nOutput\n1\n\nInput\n2\n1 2\n\nOutput\n\
  3\n\nInput\n5\n0 0 0 0 35\n\nOutput\n0\n\nInput\n5\n8 4 2 0 1\n\nOutput\n801604029\n\
  \n\n\n-----Note-----\n\nFor the first example, in the first second, the probability\
  \ that player $1$ will give the player $2$ a biscuit is $\\frac{1}{2}$, and the\
  \ probability that player $2$ will give the player $1$ a biscuit is $\\frac{1}{2}$.\
  \ But anyway, the game will stop after exactly $1$ second because only one player\
  \ will occupy all biscuits after $1$ second, so the answer is $1$."
"vc-preamble": "import Imports.AllImports\n\ndef solve_biscuit_game (n : Nat) (biscuits\
  \ : List Nat) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def MOD : Nat := 998244353\n\ntheorem output_range (n : Nat) (biscuits\
  \ : List Nat) :\n  n > 0 → 0 ≤ solve_biscuit_game n biscuits ∧ solve_biscuit_game\
  \ n biscuits < MOD :=\nsorry\n"
"vc-theorems": "theorem zero_biscuits (n : Nat) (len : Nat) : \n  n > 0 → solve_biscuit_game\
  \ n (List.replicate len 0) = 0 :=\nsorry\n\n\ntheorem equal_distribution (n : Nat)\
  \ (biscuits : List Nat) :\n  n > 0 → biscuits ≠ [] →\n  0 ≤ solve_biscuit_game n\
  \ (List.replicate biscuits.length (List.head! biscuits)) ∧\n  solve_biscuit_game\
  \ n (List.replicate biscuits.length (List.head! biscuits)) < MOD :=\nsorry\n\n\n\
  theorem single_player (n : Nat) (biscuits : List Nat) :\n  n = 1 → biscuits ≠ []\
  \ → solve_biscuit_game n biscuits = 0 :=\nsorry\n\n/--\ninfo: 1\n-/\n#guard_msgs\
  \ in\n#eval solve_biscuit_game 2 [1, 1]\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval\
  \ solve_biscuit_game 2 [1, 2]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval solve_biscuit_game\
  \ 5 [0, 0, 0, 0, 35]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
