"vc-description": "Given an array of arguments, representing system call arguments\
  \ keys and values, join it into a single, space-delimited string. You don't need\
  \ to care about the application name -- your task is only about parameters.\n\n\
  Each element of the given array can be:\n* a single string,\n* a single string array,\n\
  * an array of two strings\n\nIn the last case (array of two strings) the first string\
  \ should have a `\"--\"` prefix if it is more than one character long; or a `\"\
  -\"` prefix otherwise; e.g.:\n  * `[\"foo\", \"bar\"]` becomes `\"--foo bar\"`\n\
  \  * `[\"f\", \"bar\"]` becomes `\"-f bar\"`\n\nYou may assume that all strings\
  \ are non-empty and have no spaces.\n\n## Examples\n\n```python\n[\"foo\", \"bar\"\
  ]                    #  \"foo bar\"\n[[\"foo\", \"bar\"]]                  #  \"\
  --foo bar\"\n[[\"f\", \"bar\"]]                    #  \"-f bar\"\n[[\"foo\", \"\
  bar\"], \"baz\"]           #  \"--foo bar baz\"\n[[\"foo\"], [\"bar\", \"baz\"],\
  \ \"qux\"]  #  \"foo --bar baz qux\"\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def argsToString (args : List (String ⊕ (List String))) : String\
  \ :=\n  sorry\n"
"vc-theorems": "theorem args_to_string_non_empty {args : List (String ⊕ (List String))}\
  \ \n  (h : args ≠ []) : \n  argsToString args ≠ \"\" :=\nsorry \n\n\ntheorem args_to_string_contains_original_elements\
  \ {args : List (String ⊕ (List String))}\n  (arg : String ⊕ List String)\n  (h :\
  \ arg ∈ args) :\n  match arg with\n  | Sum.inl s => s.data ⊆ (argsToString args).data\
  \ \n  | Sum.inr lst => ∀ s ∈ lst, s.data ⊆ (argsToString args).data\n  :=\nsorry\n\
  \n\ntheorem args_to_string_parts_non_empty {args : List (String ⊕ (List String))}\
  \ :\n  let parts := (argsToString args).splitOn \" \"\n  ∀ p ∈ parts, p ≠ \"\" ∧\
  \ p ≠ \" \" :=\nsorry\n\n\ntheorem args_to_string_parts_exist {args : List (String\
  \ ⊕ (List String))}\n  (h : args ≠ []) :\n  let parts := (argsToString args).splitOn\
  \ \" \" \n  parts ≠ [] :=\nsorry\n\n/--\ninfo: '--foo bar'\n-/\n#guard_msgs in\n\
  #eval args_to_string [[\"foo\", \"bar\"]]\n\n/--\ninfo: '-f bar'\n-/\n#guard_msgs\
  \ in\n#eval args_to_string [[\"f\", \"bar\"]]\n\n/--\ninfo: 'foo bar --baz qux -a\
  \ plugh'\n-/\n#guard_msgs in\n#eval args_to_string [[\"foo\"], \"bar\", [\"baz\"\
  , \"qux\"], [\"a\", \"plugh\"]]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
