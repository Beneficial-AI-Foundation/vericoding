"vc-description": "Given an array A, partition it into two (contiguous) subarrays left and\
  \ right so that:\n\nEvery element in left is less than or equal to every element\
  \ in right.\nleft and right are non-empty.\nleft has the smallest possible size.\n\
  \nReturn the length of left after such a partitioning.  It is guaranteed that such\
  \ a partitioning exists.\n \nExample 1:\nInput: [5,0,3,8,6]\nOutput: 3\nExplanation:\
  \ left = [5,0,3], right = [8,6]\n\n\nExample 2:\nInput: [1,1,1,0,6,12]\nOutput:\
  \ 4\nExplanation: left = [1,1,1,0], right = [6,12]\n\n \n\nNote:\n\n2 <= A.length <=\
  \ 30000\n0 <= A[i] <= 10^6\nIt is guaranteed there is at least one way to partition\
  \ A as described."
"vc-preamble": "import Imports.AllImports\n\ndef partition_disjoint (nums : List Int)\
  \ : Nat :=\n  sorry\n\naxiom List.maximum' : List Int → Int\naxiom List.Sorted :\
  \ List Int → Prop\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def partitioned_at (p : Nat) (nums : List Int) : Prop :=\n  let\
  \ left := (nums.take p)\n  let right := (nums.drop p)  \n  let left_max := List.maximum'\
  \ left\n  (∀ x ∈ left, x ≤ left_max) ∧ \n  (∀ x ∈ right, x ≥ left_max)\n"
"vc-theorems": "theorem partition_point_valid : ∀ nums, nums.length ≥ 2 →\n  let res\
  \ := partition_disjoint nums\n  1 ≤ res ∧ res ≤ nums.length :=\n  sorry\n\n\ntheorem\
  \ partition_left_properties : ∀ nums, nums.length ≥ 2 →\n  let res := partition_disjoint\
  \ nums\n  let left := nums.take res\n  let left_max := List.maximum' left\n  ∀ x\
  \ ∈ left, x ≤ left_max :=\n  sorry\n\n\ntheorem partition_right_properties : ∀ nums,\
  \ nums.length ≥ 2 →\n  let res := partition_disjoint nums\n  let left := nums.take\
  \ res\n  let right := nums.drop res\n  let left_max := List.maximum' left\n  ∀ x\
  \ ∈ right, x ≥ left_max :=\n  sorry\n\n\ntheorem sorted_list_partitions_at_one :\
  \ ∀ nums, nums.length ≥ 2 →\n  List.Sorted nums →\n  partition_disjoint nums = 1\
  \ :=\n  sorry\n\n\ntheorem no_smaller_elements_after_partition : ∀ nums, nums.length\
  \ ≥ 2 →\n  let res := partition_disjoint nums\n  let left := nums.take res\n  let\
  \ right := nums.drop res\n  let left_max := List.maximum' left\n  ¬∃ x ∈ right,\
  \ x < left_max :=\n  sorry\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval partition_disjoint\
  \ [5, 0, 3, 8, 6]\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval partition_disjoint\
  \ [1, 1, 1, 0, 6, 12]\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval partition_disjoint\
  \ [3, 1, 2, 4, 5]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
