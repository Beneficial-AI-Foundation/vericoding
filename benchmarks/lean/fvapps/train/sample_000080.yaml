"vc-description": "You are given three strings $a$, $b$ and $c$ of the same length\
  \ $n$. The strings consist of lowercase English letters only. The $i$-th letter\
  \ of $a$ is $a_i$, the $i$-th letter of $b$ is $b_i$, the $i$-th letter of $c$ is\
  \ $c_i$.\n\nFor every $i$ ($1 \\leq i \\leq n$) you must swap (i.e. exchange) $c_i$\
  \ with either $a_i$ or $b_i$. So in total you'll perform exactly $n$ swap operations,\
  \ each of them either $c_i \\leftrightarrow a_i$ or $c_i \\leftrightarrow b_i$ ($i$\
  \ iterates over all integers between $1$ and $n$, inclusive).\n\nFor example, if\
  \ $a$ is \"code\", $b$ is \"true\", and $c$ is \"help\", you can make $c$ equal\
  \ to \"crue\" taking the $1$-st and the $4$-th letters from $a$ and the others from\
  \ $b$. In this way $a$ becomes \"hodp\" and $b$ becomes \"tele\".\n\nIs it possible\
  \ that after these swaps the string $a$ becomes exactly the same as the string $b$?\n\
  \n\n-----Input-----\n\nThe input consists of multiple test cases. The first line\
  \ contains a single integer $t$ ($1 \\leq t \\leq 100$)  — the number of test cases.\
  \ The description of the test cases follows.\n\nThe first line of each test case\
  \ contains a string of lowercase English letters $a$.\n\nThe second line of each\
  \ test case contains a string of lowercase English letters $b$.\n\nThe third line\
  \ of each test case contains a string of lowercase English letters $c$.\n\nIt is\
  \ guaranteed that in each test case these three strings are non-empty and have the\
  \ same length, which is not exceeding $100$.\n\n\n-----Output-----\n\nPrint $t$\
  \ lines with answers for all test cases. For each test case:\n\nIf it is possible\
  \ to make string $a$ equal to string $b$ print \"YES\" (without quotes), otherwise\
  \ print \"NO\" (without quotes).\n\nYou can print either lowercase or uppercase\
  \ letters in the answers.\n\n\n-----Example-----\nInput\n4\naaa\nbbb\nccc\nabc\n\
  bca\nbca\naabb\nbbaa\nbaba\nimi\nmii\niim\n\nOutput\nNO\nYES\nYES\nNO\n\n\n\n-----Note-----\n\
  \nIn the first test case, it is impossible to do the swaps so that string $a$ becomes\
  \ exactly the same as string $b$.\n\nIn the second test case, you should swap $c_i$\
  \ with $a_i$ for all possible $i$. After the swaps $a$ becomes \"bca\", $b$ becomes\
  \ \"bca\" and $c$ becomes \"abc\". Here the strings $a$ and $b$ are equal.\n\nIn\
  \ the third test case, you should swap $c_1$ with $a_1$, $c_2$ with $b_2$, $c_3$\
  \ with $b_3$ and $c_4$ with $a_4$. Then string $a$ becomes \"baba\", string $b$\
  \ becomes \"baba\" and string $c$ becomes \"abab\". Here the strings $a$ and $b$\
  \ are equal.\n\nIn the fourth test case, it is impossible to do the swaps so that\
  \ string $a$ becomes exactly the same as string $b$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def can_strings_equal (s1 s2 target : String) : Bool := sorry\n\
  \ntheorem identical_strings {s : String} (h : s.length > 0) : \n  can_strings_equal\
  \ s s s = true := sorry\n"
"vc-theorems": "theorem matching_lengths {s1 s2 : String} \n  (h1 : s1.length > 0)\
  \ (h2 : s2.length > 0) \n  (h3 : s1.length = s2.length) :\n  can_strings_equal s1\
  \ s2 s1 = true := sorry\n\n\ntheorem argument_order {s1 s2 : String}\n  (h1 : s1.length\
  \ > 0) (h2 : s2.length > 0)\n  (h3 : s1.length = s2.length) :\n  can_strings_equal\
  \ s1 s2 s1 = can_strings_equal s2 s1 s1 := sorry\n\n/--\ninfo: False\n-/\n#guard_msgs\
  \ in\n#eval can_strings_equal \"aaa\" \"bbb\" \"ccc\"\n\n/--\ninfo: True\n-/\n#guard_msgs\
  \ in\n#eval can_strings_equal \"abc\" \"bca\" \"bca\"\n\n/--\ninfo: True\n-/\n#guard_msgs\
  \ in\n#eval can_strings_equal \"aabb\" \"bbaa\" \"baba\"\n\n/--\ninfo: False\n-/\n\
  #guard_msgs in\n#eval can_strings_equal \"imi\" \"mii\" \"iim\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
