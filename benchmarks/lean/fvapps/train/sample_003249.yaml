"vc-description": "> When no more interesting kata can be resolved, I just choose\
  \ to create the new kata, to solve their own, to enjoy the process  --myjinxin2015\
  \ said\n\n# Description:\n\nIn this Kata, we have to try to create a mysterious\
  \ pattern.\n\nGiven a positive integer `m`, you can generate a Fibonacci sequence\
  \ with a length of `m`:\n```\n1 1 2 3 5 8 13 21 34 ...\n```\n\nGiven a positive\
  \ integer `n`, you need to execute `%` operation on each element of the Fibonacci\
  \ sequence:\n \n```\nm = 9, n = 3\nFibonacci sequence: 1 1 2 3 5 8 13 21 34\n  \
  \             ---> 1%3 1%3 2%3 3%3 5%3 8%3 13%3 21%3 34%3\n               ---> \
  \ 1   1   2   0   2   2    1    0    1\n```\nFinally, make `n` rows string to show\
  \ the pattern:\n\n```\n112022101\n|||||||||\n   o   o\noo    o o\n  o oo\n```\n\n\
  Please note:\n* Each row is separated by `\"\\n\"`;\n* You should trim the end of\
  \ each row;\n* If there are some empty rows at the start or end of string, you should\
  \ trim them too. But, if the empty row is in the middle(see the last example), you\
  \ should not trim it.\n\n\n\n# Examples:\n\n\nFor m = 5, n = 5, the output should\
  \ be:\n```\n    o \noo\n  o\n   o\n```\nFor m = 12, n = 4, the output should be:\n\
  ```\n     o     o\noo  o oo  o\n  o     o\n   o     o\n```\nFor m = 1, n = 1, the\
  \ output should be:`\"o\"`\n\nFor: m = 6, n = 15, the output should be:\n```\noo\n\
  \  o\n   o\n\n    o\n\n\n     o\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def mysterious_pattern (m n : Nat) : String := sorry\n\n-- Format\
  \ properties"
"vc-theorems": "theorem valid_line_lengths {m n : Nat} (h₁ : 0 < m) (h₂ : 0 < n) :\n\
  \  let lines := (mysterious_pattern m n).split (λ c => c = '\\n')\n  ∀ line ∈ lines,\
  \ line.length ≤ m := sorry\n\n\ntheorem valid_num_lines {m n : Nat} (h₁ : 0 < m)\
  \ (h₂ : 0 < n) :\n  let lines := (mysterious_pattern m n).split (λ c => c = '\\\
  n')\n  lines.length ≤ n := sorry\n\n\ntheorem valid_chars {m n : Nat} (h₁ : 0 <\
  \ m) (h₂ : 0 < n) :\n  ∀ c ∈ (mysterious_pattern m n).data,\n    c = ' ' ∨ c = 'o'\
  \ ∨ c = '\\n' := sorry \n\n\ntheorem no_trailing_spaces {m n : Nat} (h₁ : 0 < m)\
  \ (h₂ : 0 < n) :\n  let lines := (mysterious_pattern m n).split (λ c => c = '\\\
  n')\n  ∀ line ∈ lines, line.length > 0 → line.back ≠ ' ' := sorry\n\n-- Count properties\n\
  \ntheorem o_count_bound {m n : Nat} (h₁ : 0 < m) (h₂ : 0 < n) :\n  let s := mysterious_pattern\
  \ m n\n  s.data.filter (· = 'o') |>.length ≤ m := sorry\n\n-- Basic cases\n\ntheorem\
  \ minimal_case : mysterious_pattern 1 1 = \"o\" := sorry\n\n-- Consistency properties\
  \  \n\ntheorem idempotent {m n : Nat} (h₁ : 0 < m) (h₂ : 0 < n) :\n  mysterious_pattern\
  \ m n = mysterious_pattern m n := sorry\n\n/--\ninfo: '    o\\noo\\n  o\\n   o'\n\
  -/\n#guard_msgs in\n#eval mysterious_pattern 5 5\n\n/--\ninfo: '     o     o\\noo\
  \  o oo  o\\n  o     o\\n   o     o'\n-/\n#guard_msgs in\n#eval mysterious_pattern\
  \ 12 4\n\n/--\ninfo: 'o'\n-/\n#guard_msgs in\n#eval mysterious_pattern 1 1\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
