"vc-description": "# Description\nWrite a function that checks whether a credit card\
  \ number is correct or not, using the Luhn algorithm.\n\nThe algorithm is as follows:\n\
  \n* From the rightmost digit, which is the check digit, moving left, double the\
  \ value of every second digit; if the product of this doubling operation is greater\
  \ than 9 (e.g., 8 × 2 = 16), then sum the digits of the products (e.g., 16: 1 +\
  \ 6 = 7, 18: 1 + 8 = 9) or alternatively subtract 9 from the product (e.g., 16:\
  \ 16 - 9 = 7, 18: 18 - 9 = 9).\n* Take the sum of all the digits.\n* If the total\
  \ modulo 10 is equal to 0 (if the total ends in zero) then the number is valid according\
  \ to the Luhn formula; else it is not valid.\n\nThe input is a string with the full\
  \ credit card number, in groups of 4 digits separated by spaces, i.e. \"1234 5678\
  \ 9012 3456\"  \nDon´t worry about wrong inputs, they will always be a string with\
  \ 4 groups of 4 digits each separated by space.\n\n# Examples\n\n`valid_card?(\"\
  5457 6238 9823 4311\") # True`\n\n`valid_card?(\"5457 6238 9323 4311\") # False`\n\
  \nfor reference check: https://en.wikipedia.org/wiki/Luhn_algorithm"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def valid_card (s : String) : Bool := sorry\n\ndef make_valid_number\
  \ (digits : String) : String := sorry\n"
"vc-theorems": "theorem invalid_format_raises {s : String} \n  (h : ¬ ∀ c, c ∈ s.data\
  \ → c = ' ' ∨ ('0' ≤ c ∧ c ≤ '9')) :\n  valid_card s = false :=\nsorry\n\n\ntheorem\
  \ valid_card_with_valid_number {digits : List Nat}\n  (h1 : digits.length = 16)\
  \ \n  (h2 : ∀ d ∈ digits, 0 ≤ d ∧ d ≤ 9) :\n  let card := make_valid_number (String.join\
  \ (digits.map toString))\n  valid_card card = true ∧\n  valid_card (card.take 4\
  \ ++ \" \" ++ card.drop 4) = true ∧ \n  valid_card (String.join [(card.take 4),\
  \ \" \", (card.drop 4).take 4, \" \", \n                          (card.drop 8).take\
  \ 4, \" \", (card.drop 12).take 4]) = true :=\nsorry\n\n\ntheorem invalid_card_remains_invalid\
  \ {digits : List Nat}\n  (h1 : digits.length = 15)\n  (h2 : ∀ d ∈ digits, 0 ≤ d\
  \ ∧ d ≤ 9) :\n  let card := String.join (digits.map toString) ++ \"0\"\n  ¬valid_card\
  \ card →\n  ¬valid_card card ∧\n  ¬valid_card (String.join [(card.take 4), \" \"\
  , (card.drop 4).take 4, \" \",\n                           (card.drop 8).take 4,\
  \ \" \", (card.drop 12).take 4]) :=\nsorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n\
  #eval valid_card \"5457 6238 9823 4311\"\n\n/--\ninfo: False\n-/\n#guard_msgs in\n\
  #eval valid_card \"5457 6238 9323 4311\"\n\n/--\ninfo: True\n-/\n#guard_msgs in\n\
  #eval valid_card \"2222 2222 2222 2224\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
