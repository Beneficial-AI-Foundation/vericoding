"vc-description": "# Explanation\n\nIt's your first day in the robot factory and your\
  \ supervisor thinks that you should start with an easy task. So you are responsible\
  \ for purchasing raw materials needed to produce the robots.\n\nA complete robot\
  \ weights `50` kilogram. Iron is the only material needed to create a robot. All\
  \ iron is inserted in the first machine; the output of this machine is the input\
  \ for the next one, and so on. The whole process is sequential. Unfortunately not\
  \ all machines are first class, so a given percentage of their inputs are destroyed\
  \ during processing.\n\n# Task\n\nYou need to figure out how many kilograms of iron\
  \ you need to buy to build the requested number of robots.\n\n# Example\n\nThree\
  \ machines are used to create a robot. Each of them produces `10%` scrap. Your target\
  \ is to deliver `90` robots.  \nThe method will be called with the following parameters:\n\
  \n```\nCalculateScrap(scrapOfTheUsedMachines, numberOfRobotsToProduce)\nCalculateScrap(int[]\
  \ { 10, 10, 10 }, 90)\n```\n\n# Assumptions\n\n* The scrap is less than `100%`.\n\
  * The scrap is never negative.\n* There is at least one machine in the manufacturing\
  \ line.\n* Except for scrap there is no material lost during manufacturing.\n* The\
  \ number of produced robots is always a positive number.\n* You can only buy full\
  \ kilograms of iron."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calculate_scrap (rates: List Float) (n: Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem scrap_result_is_at_least_base (rates: List Float) (n: Nat)\
  \ : calculate_scrap rates n ≥ n * 50 := \n  sorry\n\n\ntheorem scrap_monotonic_with_rates\
  \ (rates: List Float) (n: Nat) (i: Nat) (hi: i < rates.length) :\n  calculate_scrap\
  \ (rates.take i) n ≤ calculate_scrap rates n :=\n  sorry\n\n\ntheorem zero_scrap_is_base\
  \ (rates: List Float) (n: Nat) (h: ∀ r ∈ rates, r = 0) :\n  calculate_scrap rates\
  \ n = n * 50 :=\n  sorry\n\n\ntheorem empty_rates_is_base (n: Nat) :\n  calculate_scrap\
  \ [] n = n * 50 :=\n  sorry\n\n/--\ninfo: 5000\n-/\n#guard_msgs in\n#eval calculate_scrap\
  \ [10] 90\n\n/--\ninfo: 3820\n-/\n#guard_msgs in\n#eval calculate_scrap [20, 10]\
  \ 55\n\n/--\ninfo: 4500\n-/\n#guard_msgs in\n#eval calculate_scrap [0, 0, 0] 90\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
