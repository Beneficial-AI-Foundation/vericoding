"vc-description": "Chef has an old machine if the chef enters any natural number,\
  \ the machine will display 1, 2, …n, n-1, n-2, n-3,…1 series and in next line prints\
  \ sum of cubes of each number in the series. Chef wants to create a computer program\
  \ which can replicate the functionality of the machine. Help the chef to code.\n\
  \n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then\
  \ the test cases follow. \n- Each test case contains a single line of input, $N$.\
  \ \n\n-----Output:-----\nFor each test case, output in a single line answer.\n\n\
  -----Constraints-----\n- $1 \\leq T \\leq 50$\n- $1 \\leq N \\leq 50$\n\n-----Sample\
  \ Input:-----\n2\n1\n3\n\n-----Sample Output:-----\n1\n45\n\n-----EXPLANATION:-----\n\
  For 2) series will be 1, 2, 3, 2, 1 and the sum will be = 1 + 8 + 27 + 8+ 1"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calculate_series_sum (n: Nat) : Nat :=\nsorry\n"
"vc-theorems": "theorem calculate_series_sum_positive {n: Nat} (h: n > 0) : \n  calculate_series_sum\
  \ n > 0 := sorry\n\n\ntheorem calculate_series_sum_increasing {n: Nat} (h: n > 1)\
  \ :\n  calculate_series_sum n > calculate_series_sum (n-1) := sorry\n\n\ntheorem\
  \ calculate_series_sum_known_values :\n  calculate_series_sum 1 = 1 ∧ calculate_series_sum\
  \ 3 = 45 := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
