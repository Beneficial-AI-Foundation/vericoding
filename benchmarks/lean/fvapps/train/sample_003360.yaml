"vc-description": "Your job is to write a function which increments a string, to create\
  \ a new string.\n\n- If the string already ends with a number, the number should\
  \ be incremented by 1.\n- If the string does not end with a number. the number 1\
  \ should be appended to the new string.\n\nExamples:\n\n`foo -> foo1`\n\n`foobar23\
  \ -> foobar24`\n\n`foo0042 -> foo0043`\n\n`foo9 -> foo10`\n\n`foo099 -> foo100`\n\
  \n*Attention: If the number has leading zeros the amount of digits should be considered.*"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def increment_string (s : String) : String := sorry\n\ntheorem\
  \ increment_string_length (text : String) (num : Nat) (leading_zeros : Nat)\n  (h\
  \ : num ≤ 999999) (h2 : leading_zeros ≤ 5) :\n  String.length (increment_string\
  \ (text ++ \n    (if num > 0 then String.mk (List.replicate leading_zeros '0') ++\
  \ toString num else \"\"))) ≥ \n  String.length (text ++ \n    (if num > 0 then\
  \ String.mk (List.replicate leading_zeros '0') ++ toString num else \"\")) := sorry\n"
"vc-theorems": "theorem increment_string_preserves_prefix (text : String) (num : Nat)\
  \ (leading_zeros : Nat)\n  (h : num ≤ 999999) (h2 : leading_zeros ≤ 5) :\n  (increment_string\
  \ (text ++ \n    (if num > 0 then String.mk (List.replicate leading_zeros '0') ++\
  \ toString num else \"\"))).startsWith text := sorry\n\ntheorem increment_string_increments_number\
  \ (text : String) (num : Nat) (leading_zeros : Nat)\n  (h : num ≤ 999999) (h2 :\
  \ leading_zeros ≤ 5) :\n  ∀ suffix : String,\n  suffix.all Char.isDigit →\n  String.toNat!\
  \ (String.drop (increment_string (text ++ suffix)) text.length) = \n  String.toNat!\
  \ suffix + 1 := sorry\n\n\ntheorem increment_string_no_numbers (s : String)\n  (h\
  \ : ∀ c ∈ s.data, !c.isDigit) :\n  increment_string s = s ++ \"1\" := sorry\n\n\n\
  theorem increment_string_just_digits (digits : List Nat)\n  (h : ∀ d ∈ digits, d\
  \ ≤ 9) \n  (h2 : digits ≠ []) :\n  let num := String.mk (digits.map Char.ofNat)\n\
  \  String.length (increment_string num) ≥ String.length num ∧\n  String.toNat! (increment_string\
  \ num) = String.toNat! num + 1 := sorry\n\n/--\ninfo: 'foo1'\n-/\n#guard_msgs in\n\
  #eval increment_string \"foo\"\n\n/--\ninfo: 'foobar002'\n-/\n#guard_msgs in\n#eval\
  \ increment_string \"foobar001\"\n\n/--\ninfo: 'foobar100'\n-/\n#guard_msgs in\n\
  #eval increment_string \"foobar99\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
