"vc-description": "Recently Vasya learned that, given two points with different $x$\
  \ coordinates, you can draw through them exactly one parabola with equation of type\
  \ $y = x^2 + bx + c$, where $b$ and $c$ are reals. Let's call such a parabola an\
  \ $U$-shaped one.\n\nVasya drew several distinct points with integer coordinates\
  \ on a plane and then drew an $U$-shaped parabola through each pair of the points\
  \ that have different $x$ coordinates. The picture became somewhat messy, but Vasya\
  \ still wants to count how many of the parabolas drawn don't have any drawn point\
  \ inside their internal area. Help Vasya.\n\nThe internal area of an $U$-shaped\
  \ parabola is the part of the plane that lies strictly above the parabola when the\
  \ $y$ axis is directed upwards.\n\n\n-----Input-----\n\nThe first line contains\
  \ a single integer $n$ ($1 \\le n \\le 100\\,000$) — the number of points.\n\nThe\
  \ next $n$ lines describe the points, the $i$-th of them contains two integers $x_i$\
  \ and $y_i$ — the coordinates of the $i$-th point. It is guaranteed that all points\
  \ are distinct and that the coordinates do not exceed $10^6$ by absolute value.\n\
  \n\n-----Output-----\n\nIn the only line print a single integer — the number of\
  \ $U$-shaped parabolas that pass through at least two of the given points and do\
  \ not contain any of the given points inside their internal area (excluding the\
  \ parabola itself).\n\n\n-----Examples-----\nInput\n3\n-1 0\n0 2\n1 0\n\nOutput\n\
  2\n\nInput\n5\n1 0\n1 -1\n0 -1\n-1 0\n-1 -1\n\nOutput\n1\n\n\n\n-----Note-----\n\
  \nOn the pictures below all $U$-shaped parabolas that pass through at least two\
  \ given points are drawn for each of the examples. The $U$-shaped parabolas that\
  \ do not have any given point inside their internal area are drawn in red.  [Image]\
  \ The first example. \n\n [Image] The second example."
"vc-preamble": "import Imports.AllImports\n\ndef countEmptyParabolas (points : List\
  \ (Int × Int)) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def makeParabolaPoints (a h k : Int) (n : Nat) : List (Int × Int)\
  \ :=\n  sorry\n"
"vc-theorems": "theorem countEmptyParabolas_nonnegative (points : List (Int × Int))\
  \ :\n  countEmptyParabolas points ≥ 0 := by\n  sorry\n\n\ntheorem countEmptyParabolas_single_point\
  \ (point : Int × Int) :\n  countEmptyParabolas [point] = 0 := by\n  sorry\n\n\n\
  theorem countEmptyParabolas_through_parabola_points (a h k : Int) :\n  a ≠ 0 →\n\
  \  countEmptyParabolas (makeParabolaPoints a h k 5) ≥ 1 := by\n  sorry\n\n\ntheorem\
  \ countEmptyParabolas_duplicate_x_values (points : List (Int × Int)) :\n  let deduped\
  \ := points.foldl (fun acc (x, y) =>\n    match acc.find? (fun (x', _) => x' = x)\
  \ with\n    | none => acc ++ [(x, y)]\n    | some (x', y') => \n      if y > y'\
  \ \n      then acc.map (fun (x'', y'') => if x'' = x then (x, y) else (x'', y''))\n\
  \      else acc\n    ) []\n  countEmptyParabolas points = countEmptyParabolas deduped\
  \ := by\n  sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval count_empty_parabolas\
  \ [(-1, 0), (0, 2), (1, 0)]\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval count_empty_parabolas\
  \ [(1, 0), (1, -1), (0, -1), (-1, 0), (-1, -1)]\n\n/--\ninfo: 0\n-/\n#guard_msgs\
  \ in\n#eval count_empty_parabolas [(-751115, -925948)]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded"
