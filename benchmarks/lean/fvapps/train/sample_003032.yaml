"vc-description": "# Introduction \n\nDigital Cypher assigns to each letter of the\
  \ alphabet unique number. For example:\n\n```\n a  b  c  d  e  f  g  h  i  j  k\
  \  l  m\n 1  2  3  4  5  6  7  8  9 10 11 12 13\n n  o  p  q  r  s  t  u  v  w \
  \ x  y  z\n14 15 16 17 18 19 20 21 22 23 24 25 26\n```\n\nInstead of letters in\
  \ encrypted word we write the corresponding number, eg. The word scout:\n\n```\n\
  \ s  c  o  u  t\n19  3 15 21 20\n```\nThen we add to each obtained digit consecutive\
  \ digits from the key. For example. In case of key equal to `1939` :\n\n```\n  \
  \ s  c  o  u  t\n  19  3 15 21 20\n + 1  9  3  9  1\n ---------------\n  20 12 18\
  \ 30 21\n  \n   m  a  s  t  e  r  p  i  e  c  e\n  13  1 19 20  5 18 16  9  5  3\
  \  5\n+  1  9  3  9  1  9  3  9  1  9  3\n  --------------------------------\n \
  \ 14 10 22 29  6 27 19 18  6  12 8\n```\n\n# Task\n\nWrite a function that accepts\
  \ an array of integers `code` and a `key` number. As the result, it should return\
  \ string containg a decoded message from the `code`.\n\n# Input / Output\n\nThe\
  \ `code` is a array of positive integers.\nThe `key` input is a positive integer.\n\
  \n# Example\n\n``` javascript\ndecode([ 20, 12, 18, 30, 21],1939);  ==> \"scout\"\
  \ndecode([ 14, 10, 22, 29, 6, 27, 19, 18, 6, 12, 8],1939);  ==>  \"masterpiece\"\
  \n```\n\n# Digital cypher series\n- [Digital cypher vol 1](https://www.codewars.com/kata/592e830e043b99888600002d)\n\
  - [Digital cypher vol 2](https://www.codewars.com/kata/592edfda5be407b9640000b2)\n\
  - [Digital cypher vol 3 - missing key](https://www.codewars.com/kata/5930d8a4b8c2d9e11500002a)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def decode (code : List Nat) (key : Nat) : String := sorry\n\n\
  theorem decode_type_and_bounds {code : List Nat} {key : Nat} \n  (h1 : ∀ x ∈ code,\
  \ 1 ≤ x ∧ x ≤ 26)\n  (h2 : 1 ≤ key ∧ key ≤ 9999)\n  (h3 : code.length > 0) :\n \
  \ ∃ result : String,\n    (result.length = code.length) ∧ \n    (∀ c ∈ result.data,\
  \ 'a'.val ≤ c.val ∧ c.val ≤ 'z'.val) := sorry\n"
"vc-theorems": "theorem decode_wrapping (key : Nat) \n  (h : 1 ≤ key ∧ key ≤ 9999)\
  \ :\n  ∀ n : Nat,\n    (decode (List.replicate n 1) key).length = n := sorry\n\n\
  \ntheorem decode_key_zero_equiv {code : List Nat}\n  (h1 : ∀ x ∈ code, 1 ≤ x ∧ x\
  \ ≤ 26)\n  (h2 : code.length > 0) :\n  decode code 0 = decode code 10000 := sorry\n\
  \n/--\ninfo: 'scout'\n-/\n#guard_msgs in\n#eval decode [20, 12, 18, 30, 21] 1939\n\
  \n/--\ninfo: 'masterpiece'\n-/\n#guard_msgs in\n#eval decode [14, 10, 22, 29, 6,\
  \ 27, 19, 18, 6, 12, 8] 1939\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
