"vc-description": "In this kata you will be given an **integer n**, which is the number\
  \ of times that is thown a coin. You will have to return an array of string for\
  \ all the possibilities (heads[H] and tails[T]). Examples:\n```coin(1) should return\
  \ {\"H\", \"T\"}```\n```coin(2) should return {\"HH\", \"HT\", \"TH\", \"TT\"}```\n\
  ```coin(3) should return {\"HHH\", \"HHT\", \"HTH\", \"HTT\", \"THH\", \"THT\",\
  \ \"TTH\", \"TTT\"}```\nWhen finished sort them alphabetically.\n\nIn C and C++\
  \ just return a ```char*``` with all elements separated by```,``` (without space):\n\
  ```coin(2) should return \"HH,HT,TH,TT\"```\nINPUT:\n```0 < n < 18```\nCareful with\
  \ performance!! You'll have to pass 3 basic test (n = 1, n = 2, n = 3), many medium\
  \ tests (3 < n <= 10) and many large tests (10 < n < 18)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def coin (n : Nat) : List String := sorry\n\ntheorem coin_length\
  \ (n : Nat) : \n  n ≤ 10 → List.length (coin n) = 2^n := sorry\n"
"vc-theorems": "theorem coin_elem_length (n : Nat) (s : String) :\n  n ≤ 10 → s ∈\
  \ coin n → String.length s = n := sorry\n\n\ntheorem coin_valid_chars (n : Nat)\
  \ (s : String) (c : Char) :\n  n ≤ 10 → s ∈ coin n → c ∈ s.data → c = 'H' ∨ c =\
  \ 'T' := sorry\n\n\ntheorem coin_sorted (n : Nat) (i j : Nat) :\n  n ≤ 10 → i <\
  \ j → j < List.length (coin n) → \n  (coin n).get ⟨i, by sorry⟩ ≤ (coin n).get ⟨j,\
  \ by sorry⟩ := sorry\n\n\ntheorem coin_unique (n : Nat) :\n  n ≤ 10 → List.Nodup\
  \ (coin n) := sorry\n\n\ntheorem coin_empty :\n  coin 0 = [\"\"] := sorry\n\n\n\
  theorem coin_negative (n : Int) :\n  n < 0 → coin (Int.toNat n) = [] := sorry\n\n\
  /--\ninfo: ['H', 'T']\n-/\n#guard_msgs in\n#eval coin 1\n\n/--\ninfo: ['HH', 'HT',\
  \ 'TH', 'TT']\n-/\n#guard_msgs in\n#eval coin 2\n\n/--\ninfo: ['HHH', 'HHT', 'HTH',\
  \ 'HTT', 'THH', 'THT', 'TTH', 'TTT']\n-/\n#guard_msgs in\n#eval coin 3\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
