"vc-description": "“Jesse, you asked me if I was in the meth business, or the money\
  \ business… Neither. I’m in the empire business.”\nWalter’s sold his stack in Gray\
  \ Matter Technologies, a company which he deserved half a credit, for peanuts. Now\
  \ this company is worth a billion dollar company. Walter wants to get it's shares\
  \ to have his Empire Business back and he founds an opportunity.  \nThere are $N$\
  \ persons having shares $A_1, A_2, A_3, … A_N$ in this company. Walter can buy these\
  \ shares with their minimum Sold Values. \nSold Values of a person's share $ i $\
  \ $(1 \\leq i \\leq N) $ with another person's share $ j $ $ (1 \\leq j \\leq N)\
  \ $ is equal to $ A_j+|i-j| $. So, a person's share can have $ N $ possible sold\
  \ values and Walter has to find minimum sold value among them for each person.\n\
  Since Walter has to run his meth business also he asks you to find minimum sold\
  \ value for each person.\n\n-----Input:-----\n- First line will contain $T$, number\
  \ of test cases. Then the testcases follow. \n- The First line of each test case\
  \ contains a integer $N$.\n- The Second line of each test case contains $N$ space\
  \ integers namely $A_1,A_2,…A_N$.\n\n-----Output:-----\nFor each test case, output\
  \ in single line $N$ space integers denoting minimum sold value for each person.\n\
  \n-----Constraints-----\n- $1 \\leq T \\leq 10^5$\n- $1 \\leq N \\leq 2*10^6 $\n\
  - $1 \\leq A_i \\leq 10^9 $\nSum of $N$ over all test cases will not exceed $2*10^6$.\n\
  \n-----Sample Input:-----\n2\n5\n6 5 5 5 2\n5\n1 2 3 4 5\n\n-----Sample Output:-----\n\
  6 5 4 3 2\n1 2 3 4 5\n\n-----Explanation-----\nFor first case:\n- Sold value for\
  \ index $1$:  $6,6,7,8,6$\n- Sold value for index $2$:  $7,5,6,7,5$\n- Sold value\
  \ for index $3$:  $8,6,5,6,4$\n- Sold value for index $4$:  $9,7,6,5,3$\n- Sold\
  \ value for index $5$:  $10,8,7,6,2$\nMinimum sold value for each index will be\
  \ $6,5,4,3,2$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_min_sold_values (arr : Array Nat) : Array Nat := sorry\n\
  \ntheorem output_length_matches_input (arr : Array Nat) :\n  (find_min_sold_values\
  \ arr).size = arr.size := sorry\n"
"vc-theorems": "theorem output_never_increases_by_more_than_one (arr : Array Nat)\
  \ (i : Nat) :\n  i > 0 → i < (find_min_sold_values arr).size →\n  match (find_min_sold_values\
  \ arr).get? (i-1), (find_min_sold_values arr).get? i with\n  | some prev, some curr\
  \ => \n    curr ≥ prev - 1 ∧ curr ≤ prev + 1\n  | _, _ => True\n  := sorry\n\n\n\
  theorem output_elements_never_exceed_input (arr : Array Nat) (i : Nat) :\n  i <\
  \ arr.size →\n  match (find_min_sold_values arr).get? i, arr.get? i with \n  | some\
  \ result, some input => result ≤ input\n  | _, _ => True\n  := sorry\n\n\ntheorem\
  \ minimum_element_preserved (arr : Array Nat) (min : Nat) :\n  arr.size ≥ 2 →\n\
  \  (∀ i, i < arr.size → match arr.get? i with \n    | some x => x ≥ min\n    | none\
  \ => True) →\n  (∃ i, i < arr.size ∧ match arr.get? i with\n    | some x => x =\
  \ min\n    | none => False) →\n  (∃ i, i < (find_min_sold_values arr).size ∧ \n\
  \    match (find_min_sold_values arr).get? i with\n    | some x => x = min\n   \
  \ | none => False)\n  := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
