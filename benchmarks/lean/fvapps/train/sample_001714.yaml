"vc-description": "[Currying and partial application](http://www.2ality.com/2011/09/currying-vs-part-eval.html)\
  \ are two ways of transforming a function into another function with a generally\
  \ smaller arity. While they are often confused with each other, they work differently.\
  \ The goal is to learn to differentiate them.\n\n## Currying\n\n> Is the technique\
  \ of transforming a function that takes multiple arguments in such a way that it\
  \ can be called as a chain of functions each with a single argument.\n\nCurrying\
  \ takes a function:\n\n```\nf: X × Y → R\n```\n\nand turns it into a function:\n\
  \n```\nf': X → (Y → R)\n```\n\nInstead of calling `f` with two arguments, we invoke\
  \ `f'` with the first argument. The result is a function that we then call with\
  \ the second argument to produce the result. Thus, if the uncurried `f` is invoked\
  \ as:\n\n```\nf(3, 5)\n```\n\nthen the curried `f'` is invoked as:\n\n`f'(3)(5)`\n\
  \n### Example\n\nGiven this function:\n\n```python\ndef add(x, y, z):\n  return\
  \ x + y + z\n```\n\nWe can call in a normal way:\n\n```python\nadd(1, 2, 3) # =>\
  \ 6\n```\n\nBut we can create a curried version of `add(a, b, c)`function:\n\n```python\n\
  curriedAdd = lambda a: (lambda b: (lambda c: add(a,b,c)))\ncurriedAdd(1)(2)(3) #\
  \ => 6\n```\n\n## Partial application\n\n> Is the process of fixing a number of\
  \ arguments to a function, producing another function of smaller arity.\n\nPartial\
  \ application takes a function:\n\n```\nf: X × Y → R\n```\n\nand a fixed value `x`\
  \ for the first argument to produce a new function\n\n```\nf': Y → R\n```\n\n`f'`\
  \ does the same as `f`, but only has to fill in the second parameter which is why\
  \ its arity is one less than the arity of `f`. One says that the first argument\
  \ is bound to `x`.\n\n### Example\n\n```python\npartialAdd = lambda a: (lambda *args:\
  \ add(a,*args))\npartialAdd(1)(2, 3) # => 6\n```\n\n-------------\n\nYour work is\
  \ to implement a generic `curryPartial()` function allows either currying or partial\
  \ application.\n\nFor example:\n\n```python\ncurriedAdd = curryPartial(add)\ncurriedAdd(1)(2)(3)\
  \ # => 6\n\npartialAdd = curryPartial(add, 1)\npartialAdd(2, 3) # => 6\n```\n\n\
  We want the function be very flexible.\n\nAll these examples should produce the\
  \ same result:\n\n```python\ncurryPartial(add)(1)(2)(3) # =>6 \ncurryPartial(add,\
  \ 1)(2)(3) # =>6 \ncurryPartial(add, 1)(2, 3) # =>6 \ncurryPartial(add, 1, 2)(3)\
  \ # =>6 \ncurryPartial(add, 1, 2, 3) # =>6 \ncurryPartial(add)(1, 2, 3) # =>6 \n\
  curryPartial(add)(1, 2)(3) # =>6 \ncurryPartial(add)()(1, 2, 3) # =>6 \ncurryPartial(add)()(1)()()(2)(3)\
  \ # =>6 \n\ncurryPartial(add)()(1)()()(2)(3, 4, 5, 6) # =>6 \ncurryPartial(add,\
  \ 1)(2, 3, 4, 5) # =>6 \n```\n\nAnd also all of these:\n\n```python\ncurryPartial(curryPartial(curryPartial(add,\
  \ 1), 2), 3) # =>6\ncurryPartial(curryPartial(add, 1, 2), 3) # =>6\ncurryPartial(curryPartial(add,\
  \ 1), 2, 3) # =>6\ncurryPartial(curryPartial(add, 1), 2)(3) # =>6\ncurryPartial(curryPartial(add,\
  \ 1)(2), 3) # =>6\ncurryPartial(curryPartial(curryPartial(add, 1)), 2, 3) # =>6\n\
  ```"
"vc-preamble": "import Imports.AllImports\n\ndef add2 (x y : Int) : Int :=\n  sorry\n\
  \n\ndef add3 (x y z : Int) : Int :=\n  sorry\n\n\ndef concat3 (x y z : α) : String\
  \ :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def curry_partial : ((α → β) → (α → β)) :=\n  sorry\n"
"vc-theorems": "theorem curry_preserves_binary_function (x y : Int) :\n  curry_partial\
  \ add2 x y = add2 x y :=\n  sorry\n\n\ntheorem curry_preserves_ternary_function\
  \ (x y z : Int) :\n  curry_partial add3 x y z = add3 x y z :=\n  sorry\n\n\ntheorem\
  \ partial_application_preserves_result_1 (x y z : Int) :\n  curry_partial add3 x\
  \ y z = add3 x y z :=\n  sorry\n\n\ntheorem partial_application_preserves_result_2\
  \ (x y z : Int) :\n  curry_partial (curry_partial add3 x) y z = add3 x y z :=\n\
  \  sorry\n\n\ntheorem nested_curry_calls (x y z : Int) :\n  curry_partial (curry_partial\
  \ (curry_partial add3 x) y) z = add3 x y z :=\n  sorry\n\n\ntheorem curry_works_with_different_types\
  \ {α : Type} (x y z : α) :\n  curry_partial concat3 x y z = concat3 x y z :=\n \
  \ sorry\n\nend CurryPartial"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
