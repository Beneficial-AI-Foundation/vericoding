"vc-description": "Write a function that takes one or more arrays and returns a new\
  \ array of unique values in the order of the original provided arrays.\n\nIn other\
  \ words, all values present from all arrays should be included in their original\
  \ order, but with no duplicates in the final array.\n\nThe unique numbers should\
  \ be sorted by their original order, but the final array should not be sorted in\
  \ numerical order.\n\nCheck the assertion tests for examples.\n\n*Courtesy of [FreeCodeCamp](https://www.freecodecamp.com/challenges/sorted-union),\
  \ a great place to learn web-dev; plus, its founder Quincy Larson is pretty cool\
  \ and amicable. I made the original one slightly more tricky ;)*"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def unite_unique [BEq α] : List (List α) → List α\n  | _ => sorry\n"
"vc-theorems": "theorem unite_unique_maintains_order [BEq α] (arrays : List (List\
  \ α)) :\n  let result := unite_unique arrays\n  -- Result has no duplicates\n  (∀\
  \ (i j : Fin result.length),\n    result.get i = result.get j → i = j) ∧\n  -- All\
  \ input elements are present\n  (∀ arr ∈ arrays, ∀ val ∈ arr, val ∈ result) ∧\n\
  \  -- Order is preserved between arrays\n  (∀ (i j : Fin result.length), i.val <\
  \ j.val →\n    let val := result.get j\n    let prior_val := result.get i\n    ∃\
  \ (array_idx₁ array_idx₂ : Nat), array_idx₁ ≤ array_idx₂ ∧ \n      array_idx₂ <\
  \ arrays.length ∧\n      prior_val ∈ arrays.get! array_idx₁ ∧\n      val ∈ arrays.get!\
  \ array_idx₂) :=\nsorry\n\n\ntheorem unite_unique_bound [BEq α] (arrays : List (List\
  \ α)) :\n  let result := unite_unique arrays\n  result.length ≤ (arrays.map List.length).foldl\
  \ Nat.add 0 :=\nsorry\n\n\ntheorem unite_unique_empty_arrays [BEq α] (arrays : List\
  \ (List α)) :\n  let result := unite_unique arrays\n  let flattened := arrays.join\n\
  \  -- Result has same elements as flattened arrays\n  (∀ x, x ∈ result ↔ x ∈ flattened)\
  \ ∧\n  -- First occurrence property\n  (∀ (i j : Fin result.length),\n    result.get\
  \ i = result.get j → i.val ≤ j.val) :=\nsorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
