"vc-description": "# Idea\n\nIn the world of graphs exists a structure called \"spanning\
  \ tree\". It is unique because it's created not on its own, but based on other graphs.\
  \ To make a spanning tree out of a given graph you should remove all the edges which\
  \ create cycles, for example:\n```\nThis can become      this      or      this\
  \        or       this\n\n A                    A                  A           \
  \        A\n |\\                   |                   \\                  |\\\n\
  \ | \\       ==>        |                    \\                 | \\\n |__\\   \
  \              |__                 __\\                |  \\\nB   C            \
  \     B  C               B  C                B  C\n```\nEach *edge* (line between\
  \ 2 *vertices*, i.e. points) has a weight, based on which you can build minimum\
  \ and maximum spanning trees (sum of weights of vertices in the resulting tree is\
  \ minimal/maximal possible).  \n[Wikipedia article](https://en.wikipedia.org/wiki/Spanning_tree)\
  \ on spanning trees, in case you need it.\n\n___\n\n# Task\n\nYou will receive an\
  \ array like this: `[[\"AB\", 2], [\"BC\", 4], [\"AC\", 1]]` which includes all\
  \ edges of an arbitrary graph and a string `\"min\"`/`\"max\"`. Based on them you\
  \ should get and return a new array which includes only those edges which form a\
  \ minimum/maximum spanning trees.\n```python\nedges = [(\"AB\", 2), (\"BC\", 4),\
  \ (\"AC\", 1)]\n\nmake_spanning_tree(edges, \"min\")    ==>    [(\"AB\", 2), (\"\
  AC\", 1)]\nmake_spanning_tree(edges, \"max\")    ==>    [(\"AB\", 2), (\"BC\", 4)]\n\
  ```\n\n___\n\n# Notes\n\n* All vertices will be connected with each other\n* You\
  \ may receive cycles, for example - `[\"AA\", n]`\n* The subject of the test are\
  \ these 3 values: number of vertices included, total weight, number of edges, but\
  \ **you should not return them**, there's a special function which will analyze\
  \ your output instead"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def make_spanning_tree (edges : List Edge) (tree_type : String)\
  \ : List Edge :=\n  sorry\n"
"vc-theorems": "theorem spanning_tree_subset {edges : List Edge} {tree_type : String}\
  \ :\n  let result := make_spanning_tree edges tree_type\n  ∀ e ∈ result, e ∈ edges\
  \ := by\n  sorry\n\n\ntheorem spanning_tree_no_duplicates {edges : List Edge} {tree_type\
  \ : String} :\n  let result := make_spanning_tree edges tree_type\n  let result_edges\
  \ := result.map (·.vertices)\n  result_edges.length = result_edges.eraseDups.length\
  \ := by\n  sorry\n\n\ntheorem spanning_tree_no_self_loops {edges : List Edge} {tree_type\
  \ : String} :\n  let result := make_spanning_tree edges tree_type\n  ∀ e ∈ result,\
  \ e.vertices.1 ≠ e.vertices.2 := by\n  sorry\n\n\ntheorem spanning_tree_min_property\
  \ {edges : List Edge} \n  (h : make_spanning_tree edges \"min\" ≠ []) :\n  let result\
  \ := make_spanning_tree edges \"min\"\n  let result_weights := result.map (·.weight)\n\
  \  let valid_edges := edges.filter (λ e => e.vertices.1 ≠ e.vertices.2)\n  let edge_weights\
  \ := valid_edges.map (·.weight)\n  (result_weights.minimum?.get! : Nat) ≥ edge_weights.minimum?.get!\
  \ := by\n  sorry\n\n\ntheorem spanning_tree_max_property {edges : List Edge}\n \
  \ (h : make_spanning_tree edges \"max\" ≠ []) :\n  let result := make_spanning_tree\
  \ edges \"max\"\n  let result_weights := result.map (·.weight)\n  let valid_edges\
  \ := edges.filter (λ e => e.vertices.1 ≠ e.vertices.2)\n  let edge_weights := valid_edges.map\
  \ (·.weight)\n  (result_weights.maximum?.get! : Nat) ≤ edge_weights.maximum?.get!\
  \ := by\n  sorry\n\n/--\ninfo: [('AC', 1), ('AB', 2)]\n-/\n#guard_msgs in\n#eval\
  \ make_spanning_tree [(\"AB\", 2), (\"BC\", 4), (\"AC\", 1)] \"min\"\n\n/--\ninfo:\
  \ [('BC', 4), ('AB', 2)]\n-/\n#guard_msgs in\n#eval make_spanning_tree [(\"AB\"\
  , 2), (\"BC\", 4), (\"AC\", 1)] \"max\"\n\n/--\ninfo: [('AB', 2), ('BC', 3)]\n-/\n\
  #guard_msgs in\n#eval make_spanning_tree [(\"AA\", 1), (\"AB\", 2), (\"BC\", 3)]\
  \ \"min\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
