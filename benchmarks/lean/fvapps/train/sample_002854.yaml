"vc-description": "## Task:\nYou have to create a function `isPronic` to check whether\
  \ the argument passed is a Pronic Number and return true if it is & false otherwise.\n\
  \n### Description:\n\n`Pronic Number` -A pronic number, oblong number, rectangular\
  \ number or heteromecic number, is a number which is the product of two consecutive\
  \ integers, that is, n(n + 1).\n\n> The first few Pronic Numbers are - 0, 2, 6,\
  \ 12, 20, 30, 42...\n\n### Explanation:\n    \n      0 = 0 × 1   // ∴  0 is a Pronic\
  \ Number\n      2 = 1 × 2   // ∴  2 is a Pronic Number\n      6 = 2 × 3   // ∴ \
  \ 6 is a Pronic Number\n     12 = 3 × 4   // ∴ 12 is a Pronic Number\n     20 =\
  \ 4 × 5   // ∴ 20 is a Pronic Number\n     30 = 5 × 6   // ∴ 30 is a Pronic Number\n\
  \     42 = 6 × 7   // ∴ 42 is a Pronic Number"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_pronic (n : Int) : Bool :=\n  sorry\n"
"vc-theorems": "theorem pronic_exists_k {n : Int} (h : is_pronic n) : \n  ∃ k : Int,\
  \ k * (k + 1) = n :=\n  sorry\n\n\ntheorem negative_not_pronic {n : Int} (h : n\
  \ < 0) :\n  ¬ is_pronic n :=\n  sorry\n\n\ntheorem consecutive_product_is_pronic\
  \ (n : Int) (h : n ≥ 0) :\n  is_pronic (n * (n + 1)) :=\n  sorry\n\n/--\ninfo: True\n\
  -/\n#guard_msgs in\n#eval is_pronic 2\n\n/--\ninfo: False\n-/\n#guard_msgs in\n\
  #eval is_pronic 3\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval is_pronic -3\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
