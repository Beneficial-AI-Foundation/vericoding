"vc-description": "Write\n```python\nfunction repeating_fractions(numerator, denominator)\n\
  ```\nthat given two numbers representing the numerator and denominator of a fraction,\
  \ return the fraction in string format. If the fractional part has repeated digits,\
  \ replace those digits with a single digit in parentheses. \n\nFor example:\n```python\n\
  repeating_fractions(1,1) === '1'\nrepeating_fractions(1,3) === '0.(3)'\nrepeating_fractions(2,888)\
  \ === '0.(0)(2)5(2)5(2)5(2)5(2)5(2)'\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def repeating_fractions (n : Int) (d : Int) : String := sorry\n\
  \ntheorem integer_division_gives_no_decimal (n : Int) : \n  repeating_fractions\
  \ n 1 = toString n := \nsorry\n"
"vc-theorems": "theorem division_by_zero_undefined (n : Int) :\n  ∀ (d : Int), d =\
  \ 0 → repeating_fractions n d = \"undefined\" :=\nsorry \n\n\ntheorem one_third_is_point_three_repeating\
  \ :\n  repeating_fractions 1 3 = \"0.(3)\" :=\nsorry\n\n/--\ninfo: '0.(3)'\n-/\n\
  #guard_msgs in\n#eval repeating_fractions 1 3\n\n/--\ninfo: '0.5'\n-/\n#guard_msgs\
  \ in\n#eval repeating_fractions 1 2\n\n/--\ninfo: '0.(0)(2)5(2)5(2)5'\n-/\n#guard_msgs\
  \ in\n#eval repeating_fractions 18018018 80000000000\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
