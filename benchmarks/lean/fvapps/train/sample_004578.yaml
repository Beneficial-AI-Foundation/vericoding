vc-description: |-
  An integral:
    


  can be approximated by the so-called Simpson’s rule:




  Here `h = (b-a)/n`, `n` being an even integer and `a <= b`. 

  We want to try Simpson's rule with the function f:



  The task is to write a function called `simpson` with parameter `n` which returns the value of the integral of f on the interval `[0, pi]` (pi being 3.14159265359...).
  ## Notes:
  - Don't round or truncate your results. See in "RUN EXAMPLES" the function `assertFuzzyEquals` or `testing`.
  - `n` will always be even.

  - We know that the exact value of the integral of f on the given interval is `2`.

  You can see: 
  about rectangle method and trapezoidal rule.
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |-
  def simpson (n : Nat) : Float := sorry

  def Even (n : Nat) : Prop := ∃ k, n = 2 * k

  -- Property: Result should converge to 2.0 for increasing n
vc-theorems: |-
  theorem simpson_convergence {n : Nat} (h : n ≥ 10) : 
    (simpson n - 2).abs ≤ 0.001 := sorry

  -- Property: Even n should give more accurate results than n-1 

  theorem even_more_accurate {n : Nat} (h1 : n ≥ 20) (h2 : Even n) :
    (simpson n - 2).abs ≤ (simpson (n-1) - 2).abs := sorry

  -- Property: Larger n should give more accurate results

  theorem accuracy_improves {n : Nat} (h : n ≥ 10) :
    (simpson (2*n) - 2).abs ≤ (simpson n - 2).abs := sorry

  -- Property: Result should be positive

  theorem positive_result {n : Nat} (h : n ≥ 10) :
    simpson n > 0 := sorry

  -- Property: Small n should still give reasonable results

  theorem small_n_reasonable :
    1.9 ≤ simpson 10 ∧ simpson 10 ≤ 2.1 := sorry
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded
