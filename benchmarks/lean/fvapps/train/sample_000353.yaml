"vc-description": "There are n people and 40 types of hats labeled from 1 to 40.\n\
  Given a list of list of integers hats, where hats[i] is a list of all hats preferred by\
  \ the i-th person.\nReturn the number of ways that the n people wear different hats\
  \ to each other.\nSince the answer may be too large, return it modulo 10^9 + 7.\n\
   \nExample 1:\nInput: hats = [[3,4],[4,5],[5]]\nOutput: 1\nExplanation: There is\
  \ only one way to choose hats given the conditions. \nFirst person choose hat 3,\
  \ Second person choose hat 4 and last one hat 5.\nExample 2:\nInput: hats = [[3,5,1],[3,5]]\n\
  Output: 4\nExplanation: There are 4 ways to choose hats\n(3,5), (5,3), (1,3) and\
  \ (1,5)\n\nExample 3:\nInput: hats = [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\n\
  Output: 24\nExplanation: Each person can choose hats labeled from 1 to 4.\nNumber\
  \ of Permutations of (1,2,3,4) = 24.\n\nExample 4:\nInput: hats = [[1,2,3],[2,3,5,6],[1,3,7,9],[1,8,9],[2,5,7]]\n\
  Output: 111\n\n \nConstraints:\n\nn == hats.length\n1 <= n <= 10\n1 <= hats[i].length\
  \ <= 40\n1 <= hats[i][j] <= 40\nhats[i] contains a list of unique integers."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def number_ways (hats : List (List Nat)) : Nat :=\n  sorry\n"
"vc-theorems": "theorem number_ways_basic_cases1 :\n  number_ways [[3,4], [4,5], [5]]\
  \ = 1 :=\nsorry\n\n\ntheorem number_ways_basic_cases2 :\n  number_ways [[3,5,1],\
  \ [3,5]] = 4 :=\nsorry\n\n\ntheorem number_ways_empty :\n  number_ways [] = 1 :=\n\
  sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval number_ways [[3, 4], [4, 5], [5]]\n\
  \n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval number_ways [[3, 5, 1], [3, 5]]\n\n/--\n\
  info: 24\n-/\n#guard_msgs in\n#eval number_ways [[1, 2, 3, 4], [1, 2, 3, 4], [1,\
  \ 2, 3, 4], [1, 2, 3, 4]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
