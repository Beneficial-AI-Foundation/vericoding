"vc-description": "It is an interesting exercise to write a program to print out all\
  \ permutations of $1, 2, …, n$. However, since there are $6227020800$ permutations\
  \ of $1, 2, …, 13$, it is unlikely that we would ever run this program on an input\
  \ of size more than $10$.\nHowever, here is another interesting problem whose solution\
  \ can also be used to generate permutations. We can order the permutations of $1,\
  \ 2, …, n$ under the lexicographic (or dictionary) order. Here are the permutations\
  \ of $1,2,3$ in lexicographic order:\n123132213231312321123132213231312321 1 \\\
  , 2 \\, 3 \\quad    1 \\, 3 \\, 2 \\quad     2 \\, 1 \\, 3 \\quad     2 \\, 3 \\\
  , 1 \\quad     3 \\, 1 \\, 2 \\quad     3 \\, 2 \\, 1 \nThe problem we have is the\
  \ following: given a permutation of $1,2, …, n$, generate the next permutation in\
  \ lexicographic order. For example, for $2 3 1 4$ the answer is $2 3 4 1$.\n\n-----Input:-----\n\
  The first line of the input contains two integers, $N$ and $K$. This is followed\
  \ by $K$ lines, each of which contains one permutation of $1, 2,…,N$.\n\n-----Output:-----\n\
  The output should consist of $K$ lines. Line $i$ should contain the lexicographically\
  \ next permutation correponding to the permutation on line $i+1$ in the input.\n\
  \n-----Constraints:-----\n- $1 \\leq N \\leq 1000$.\n- $1 \\leq K \\leq 10$.\n\n\
  -----Sample input-----\n3 2\n3 1 2\n2 3 1\n\n-----Sample output-----\n3 2 1\n3 1\
  \ 2"
"vc-preamble": "import Imports.AllImports\n\ndef nextPermutation (arr : List Int)\
  \ : List Int := sorry\n\ndef solve (n k : Nat) (perms : List (List Int)) : List\
  \ (List Int) := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isPermutation (arr1 arr2 : List Int) : Bool := sorry\n\ndef\
  \ isSortedDesc (arr : List Int) : Bool := sorry\n"
"vc-theorems": "theorem next_permutation_preserves_elements (arr : List Int) :\n \
  \ isPermutation arr (nextPermutation arr) = true := sorry\n\n\ntheorem next_permutation_idempotent_at_max\
  \ {arr : List Int} \n  (h : isSortedDesc arr) : \n  nextPermutation arr = arr :=\
  \ sorry\n\n\ntheorem next_permutation_lexicographically_larger {arr : List Int}\
  \ :\n  nextPermutation arr ≥ arr ∨ isSortedDesc arr := sorry\n\n\ntheorem solve_returns_correct_length\
  \ (n k : Nat) (perms : List (List Int)) : \n  (solve n k perms).length = perms.length\
  \ := sorry\n\n\ntheorem solve_preserves_permutations (n k : Nat) (perms : List (List\
  \ Int)) :\n  ∀ i, i < perms.length → \n    isPermutation (perms.get ⟨i, sorry⟩)\
  \ ((solve n k perms).get ⟨i, sorry⟩) = true := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
