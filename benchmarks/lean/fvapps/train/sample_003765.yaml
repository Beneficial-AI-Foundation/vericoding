"vc-description": "An eviternity number is a number which:\n* contains only digits\
  \ 8, 5 and 3, and \n* the count of the digit `8` >= count of digit `5` >= count\
  \ of digit `3`. \n\nThe first few eviternity numbers are as follows. \n```Haskell\n\
  [8, 58, 85, 88, 358, 385, 538, 583, 588, 835, 853, 858, 885, 888]\n```\nYou will\
  \ be given two integers, `a` and `b`, and your task is to return the number of eviternity\
  \ numbers in the range `>= a and < b`.\n```Haskell\nFor example:\nsolve(0,1000)\
  \ = 14, because they are [8, 58, 85, 88, 358, 385, 538, 583, 588, 835, 853, 858,\
  \ 885, 888]\n```\n\nThe upper bound will not exceed `500,000`.\n\nMore examples\
  \ in test cases. Good luck!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve (a b : Int) : Int := sorry\n\n\n\n\n\n\n\n\n\ntheorem\
  \ solve_full_range :\n  solve 0 400000 = 148 := sorry\n\n\n\n\n"
"vc-theorems": "theorem solve_boundary_cases :\n  solve 8 9 = 1 ∧ \n  solve 8 8 =\
  \ 0 ∧\n  solve 388885 388886 = 1 ∧\n  solve 388885 388885 = 0 := sorry\n\n/--\n\
  info: 4\n-/\n#guard_msgs in\n#eval solve 0 100\n\n/--\ninfo: 14\n-/\n#guard_msgs\
  \ in\n#eval solve 0 1000\n\n/--\ninfo: 99\n-/\n#guard_msgs in\n#eval solve 90 139701\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
