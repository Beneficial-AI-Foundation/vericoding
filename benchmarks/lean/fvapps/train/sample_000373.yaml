"vc-description": "A peak element is an element that is greater than its neighbors.\n\
  \nGiven an input array nums, where nums[i] ≠ nums[i+1], find a peak element and\
  \ return its index.\n\nThe array may contain multiple peaks, in that case return\
  \ the index to any one of the peaks is fine.\n\nYou may imagine that nums[-1] =\
  \ nums[n] = -∞.\n\nExample 1:\n\n\nInput: nums = [1,2,3,1]\nOutput: 2\nExplanation:\
  \ 3 is a peak element and your function should return the index number 2.\n\nExample\
  \ 2:\n\n\nInput: nums = [1,2,1,3,5,6,4]\nOutput: 1 or 5 \nExplanation: Your function\
  \ can return either index number 1 where the peak element is 2, \n             or\
  \ index number 5 where the peak element is 6.\n\n\nNote:\n\nYour solution should\
  \ be in logarithmic complexity."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_peak_element (nums : List Int) : Int := sorry \n\ntheorem\
  \ find_peak_element_valid_index {nums : List Int} (h : nums ≠ []) : \n  let idx\
  \ := find_peak_element nums\n  0 ≤ idx ∧ idx < nums.length := sorry\n"
"vc-theorems": "theorem single_element_peak {nums : List Int} (h : nums.length = 1)\
  \ :\n  find_peak_element nums = 0 := sorry\n\n\ntheorem peak_at_start {nums : List\
  \ Int} {idx : Nat} \n  (h₁ : find_peak_element nums = 0) \n  (h₂ : nums ≠ []) :\n\
  \  nums.get! 0 ≥ nums.get! 1 ∨ nums.length = 1 := sorry\n\n\ntheorem peak_at_end\
  \ {nums : List Int} {idx : Nat}\n  (h₁ : find_peak_element nums = nums.length -\
  \ 1)\n  (h₂ : nums ≠ []) :\n  nums.get! (nums.length - 1) ≥ nums.get! (nums.length\
  \ - 2) := sorry\n\n\ntheorem peak_in_middle {nums : List Int} {idx : Nat}\n  (h₁\
  \ : find_peak_element nums = idx)\n  (h₂ : 0 < idx)\n  (h₃ : idx < nums.length -\
  \ 1) :\n  nums.get! idx ≥ nums.get! (idx - 1) ∨ \n  nums.get! idx ≥ nums.get! (idx\
  \ + 1) := sorry\n\n\ntheorem empty_array :\n  find_peak_element [] = -1 := sorry\n\
  \n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval find_peak_element [1, 2, 3, 1]\n\n/--\n\
  info: 0\n-/\n#guard_msgs in\n#eval find_peak_element [1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
