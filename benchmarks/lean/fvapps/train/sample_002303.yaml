vc-description: |-
  Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

  You may assume no duplicates in the array.

  Example 1:


  Input: [1,3,5,6], 5
  Output: 2


  Example 2:


  Input: [1,3,5,6], 2
  Output: 1


  Example 3:


  Input: [1,3,5,6], 7
  Output: 4


  Example 4:


  Input: [1,3,5,6], 0
  Output: 0
vc-preamble: |
  import Imports.AllImports

  def searchInsert (nums : List Int) (target : Int) : Nat :=
    sorry
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def isSorted (l : List Int) : Prop :=
    ∀ i j, i < j → j < l.length → l[i]! ≤ l[j]!
vc-theorems: |
  theorem searchInsert_valid_index
      {nums : List Int} {target : Int}
      (h1 : List.length nums > 0)
      (h2 : isSorted nums) :
      let result := searchInsert nums target
      0 ≤ result ∧ result ≤ nums.length :=
    sorry


  theorem searchInsert_left_smaller 
      {nums : List Int} {target : Int}
      (h1 : List.length nums > 0)
      (h2 : isSorted nums) :
      let result := searchInsert nums target
      ∀ i, i < result → nums[i]! < target :=
    sorry


  theorem searchInsert_right_greater_eq
      {nums : List Int} {target : Int}
      (h1 : List.length nums > 0)
      (h2 : isSorted nums) :
      let result := searchInsert nums target
      ∀ i, result ≤ i → i < nums.length → nums[i]! ≥ target :=
    sorry


  theorem searchInsert_maintains_order
      {nums : List Int} {target : Int}
      (h1 : List.length nums > 0)
      (h2 : isSorted nums) :
      let result := searchInsert nums target
      let inserted := (nums.take result).append (target :: nums.drop result)
      isSorted inserted :=
    sorry


  theorem searchInsert_identity
      {nums : List Int}
      (h1 : List.length nums > 0)
      (h2 : isSorted nums)
      {i : Nat} (h3 : i < nums.length) :
      searchInsert nums nums[i]! = List.findIdx (· = nums[i]!) nums :=
    sorry

  /--
  info: 2
  -/
  #guard_msgs in
  #eval search_insert [1, 3, 5, 6] 5

  /--
  info: 1
  -/
  #guard_msgs in
  #eval search_insert [1, 3, 5, 6] 2

  /--
  info: 4
  -/
  #guard_msgs in
  #eval search_insert [1, 3, 5, 6] 7
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded
