"vc-description": "Given a sorted array and a target value, return the index if the\
  \ target is found. If not, return the index where it would be if it were inserted\
  \ in order.\n\nYou may assume no duplicates in the array.\n\nExample 1:\n\n\nInput:\
  \ [1,3,5,6], 5\nOutput: 2\n\n\nExample 2:\n\n\nInput: [1,3,5,6], 2\nOutput: 1\n\n\
  \nExample 3:\n\n\nInput: [1,3,5,6], 7\nOutput: 4\n\n\nExample 4:\n\n\nInput: [1,3,5,6],\
  \ 0\nOutput: 0"
"vc-preamble": "import Imports.AllImports\n\ndef searchInsert (nums : List Int) (target\
  \ : Int) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isSorted (l : List Int) : Prop :=\n  ∀ i j, i < j → j < l.length\
  \ → l[i]! ≤ l[j]!\n"
"vc-theorems": "theorem searchInsert_valid_index\n    {nums : List Int} {target :\
  \ Int}\n    (h1 : List.length nums > 0)\n    (h2 : isSorted nums) :\n    let result\
  \ := searchInsert nums target\n    0 ≤ result ∧ result ≤ nums.length :=\n  sorry\n\
  \n\ntheorem searchInsert_left_smaller \n    {nums : List Int} {target : Int}\n \
  \   (h1 : List.length nums > 0)\n    (h2 : isSorted nums) :\n    let result := searchInsert\
  \ nums target\n    ∀ i, i < result → nums[i]! < target :=\n  sorry\n\n\ntheorem\
  \ searchInsert_right_greater_eq\n    {nums : List Int} {target : Int}\n    (h1 :\
  \ List.length nums > 0)\n    (h2 : isSorted nums) :\n    let result := searchInsert\
  \ nums target\n    ∀ i, result ≤ i → i < nums.length → nums[i]! ≥ target :=\n  sorry\n\
  \n\ntheorem searchInsert_maintains_order\n    {nums : List Int} {target : Int}\n\
  \    (h1 : List.length nums > 0)\n    (h2 : isSorted nums) :\n    let result :=\
  \ searchInsert nums target\n    let inserted := (nums.take result).append (target\
  \ :: nums.drop result)\n    isSorted inserted :=\n  sorry\n\n\ntheorem searchInsert_identity\n\
  \    {nums : List Int}\n    (h1 : List.length nums > 0)\n    (h2 : isSorted nums)\n\
  \    {i : Nat} (h3 : i < nums.length) :\n    searchInsert nums nums[i]! = List.findIdx\
  \ (· = nums[i]!) nums :=\n  sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval search_insert\
  \ [1, 3, 5, 6] 5\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval search_insert [1, 3,\
  \ 5, 6] 2\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval search_insert [1, 3, 5, 6]\
  \ 7\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
