"vc-description": "Naman owns a very famous Ice Cream parlour in Pune. He has a wide\
  \ range of flavours with different pricing. \n\nEvery flavour costs ₹ X per gram\
  \ and quantity of each flavour in the parlour is indefinite. Now, Naman has \n\n\
  received an order for a party wherein he is asked to prepare each Ice Cream with\
  \ N number of flavours. \n\nHe needs to prepare each Ice Cream of W grams and at\
  \ the same time has to keep the cost minimum. \n\nCan you help him out?\n\nNote:\
  \ If it is not possible to prepare such an Ice Cream, print “Not Possible”.\n\n\
  -----Input:-----\n\nFirst line contains an integer T denoting the number of test\
  \ cases.\n\nFirst line of every test case contains an integer N denoting the number\
  \ of flavours.\n\nThe second line of every test case by N space separated integers\
  \ denoting the cost per gram of each flavour. \n\nSecond line of every test case\
  \ contains two space separated integers W and Y denoting the weight \n\nof Ice Cream\
  \ in grams and the number of flavours to be used respectively. \n\n-----Output:-----\n\
  \nFor each test case, print the total cost of the Ice Cream in a single line.\n\n\
  -----Constraints:-----\n1 ≤ T ≤ 100\n1 ≤ N,W,Y ≤ 40000\n\n-----Example:-----Input:\n\
  2\n5 \n4 6 8 1 10\n10 3\n2\n1 2\n1 2Output:\n\n18\n\nNot Possible\n\n-----Explanation:-----\n\
  \nIn the first test case to achieve the minimum cost, the Ice Cream will consist\
  \ of 8 grams \n\nof flavour costing ₹1, 1 gram of flavour costing ₹4 and 1 gram\
  \ of flavour costing ₹6.\n\nIn the second test case it is not possible to make an\
  \ ice-cream weighing 1 gram using 2 flavours."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_ice_cream (num_flavors : Nat) (costs : List Nat) (weight\
  \ num_required : Nat) : Option Nat :=\n  sorry\n"
"vc-theorems": "theorem result_validity {num_flavors : Nat} {costs : List Nat} {weight\
  \ num_required : Nat}\n  (h1 : num_flavors > 0)\n  (h2 : ∀ c ∈ costs, c > 0)\n \
  \ (h3 : weight > 0)\n  (h4 : num_required > 0) :\n  match solve_ice_cream num_flavors\
  \ costs weight num_required with\n  | none => weight < num_required ∨ num_flavors\
  \ < num_required\n  | some result => result ≥ 0 ∧ weight ≥ num_required ∧ num_flavors\
  \ ≥ num_required\n  := sorry\n\n\ntheorem solution_monotonicity {costs : List Nat}\
  \ {weight num_required : Nat}\n  (h1 : List.length costs ≥ num_required) \n  (h2\
  \ : ∀ c ∈ costs, c > 0)\n  (h3 : weight ≥ num_required)\n  (h4 : num_required >\
  \ 0) :\n  let num_flavors := List.length costs\n  let result1 := solve_ice_cream\
  \ num_flavors costs weight num_required\n  let result2 := solve_ice_cream num_flavors\
  \ costs (weight + 1) num_required\n  match result1, result2 with\n  | some r1, some\
  \ r2 => r2 ≥ r1\n  | _, _ => True\n  := sorry\n\n\ntheorem edge_cases {num_flavors\
  \ : Nat} {costs : List Nat} {weight num_required : Nat}\n  (h1 : num_flavors = 0\
  \ ∨ List.length costs = 0)\n  (h2 : weight > 0)\n  (h3 : num_required > 0) :\n \
  \ solve_ice_cream num_flavors costs weight num_required = none\n  := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
