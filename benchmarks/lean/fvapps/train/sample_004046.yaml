"vc-description": "Given a non-negative number, return the next bigger polydivisible\
  \ number, or an empty value like `null` or `Nothing`.\n\nA number is polydivisible\
  \ if its first digit is cleanly divisible by `1`, its first two digits by `2`, its\
  \ first three by `3`, and so on. There are finitely many polydivisible numbers."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def next_num (n : Nat) : Option Nat := sorry\n\n@[simp] def isPolydivisible\
  \ (n: Nat) : Bool := sorry\n\n@[simp] def splitDigitsUpToLength (n : Nat) (len :\
  \ Nat) : List Nat := sorry\n"
"vc-theorems": "theorem next_num_returns_larger_number {n : Nat} :\n  match next_num\
  \ n with\n  | some m => m > n\n  | none => True := sorry\n\n\ntheorem next_num_is_polydivisible\
  \ {n : Nat} :\n  match next_num n with\n  | some m => isPolydivisible m = true\n\
  \  | none => True := sorry\n\n\ntheorem next_num_very_large_is_none :\n  next_num\
  \ (10^25) = none := sorry\n\n\ntheorem next_num_zero_is_one :\n  next_num 0 = some\
  \ 1 := sorry\n\n\ntheorem next_num_small_numbers (i : Nat) (h : i > 0) (h2 : i <\
  \ 10) :\n  next_num (i-1) = some i := sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n\
  #eval next_num 0\n\n/--\ninfo: 1236\n-/\n#guard_msgs in\n#eval next_num 1234\n\n\
  /--\ninfo: None\n-/\n#guard_msgs in\n#eval next_num 3608528850368400786036725\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
