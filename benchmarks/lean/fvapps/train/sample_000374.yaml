"vc-description": "(This problem is the same as Minimize Malware Spread, with the\
  \ differences bolded.)\nIn a network of nodes, each node i is directly connected\
  \ to another node j if and only if graph[i][j] = 1.\nSome nodes initial are initially\
  \ infected by malware.  Whenever two nodes are directly connected and at least one\
  \ of those two nodes is infected by malware, both nodes will be infected by malware. \
  \ This spread of malware will continue until no more nodes can be infected in this\
  \ manner.\nSuppose M(initial) is the final number of nodes infected with malware\
  \ in the entire network, after the spread of malware stops.\nWe will remove one\
  \ node from the initial list, completely removing it and any connections from this\
  \ node to any other node.  Return the node that if removed, would minimize M(initial). \
  \ If multiple nodes could be removed to minimize M(initial), return such a node\
  \ with the smallest index.\n \n\n\n\nExample 1:\nInput: graph = [[1,1,0],[1,1,0],[0,0,1]],\
  \ initial = [0,1]\nOutput: 0\n\n\nExample 2:\nInput: graph = [[1,1,0],[1,1,1],[0,1,1]],\
  \ initial = [0,1]\nOutput: 1\n\n\nExample 3:\nInput: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]],\
  \ initial = [0,1]\nOutput: 1\n\n \nNote:\n\n1 < graph.length = graph[0].length <=\
  \ 300\n0 <= graph[i][j] == graph[j][i] <= 1\ngraph[i][i] = 1\n1 <= initial.length\
  \ < graph.length\n0 <= initial[i] < graph.length"
"vc-preamble": "import Imports.AllImports\n\ndef min_malware_spread (graph : List\
  \ (List Int)) (initial : List Int) : Int := sorry \n\ntheorem result_in_initial\
  \ {graph : List (List Int)} {initial : List Int} :\n  let result := min_malware_spread\
  \ graph initial\n  initial.contains result = true := sorry\n\n/- Helper function\
  \ to get spread after removing a node -/"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def get_spread (graph : List (List Int)) (initial : List Int) (removed\
  \ : Int) : Int := sorry\n\ntheorem smallest_among_equal_spreads {graph : List (List\
  \ Int)} {initial : List Int} :\n  let result := min_malware_spread graph initial\
  \ \n  ∀ node : Int, \n    node ∈ initial →\n    node < result →\n    get_spread\
  \ graph initial node ≥ get_spread graph initial result := sorry\n"
"vc-theorems": "theorem valid_graph_properties {graph : List (List Int)} :\n  let\
  \ n := graph.length\n  graph.length > 0 →\n  (∀ row ∈ graph, row.length = n) →\n\
  \  (∀ (i j : Nat), i < n → j < n → \n    (graph.get! i).get! j = (graph.get! i).get!\
  \ j) := sorry\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval min_malware_spread [[1,\
  \ 1, 0], [1, 1, 0], [0, 0, 1]] [0, 1]\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval\
  \ min_malware_spread [[1, 1, 0], [1, 1, 1], [0, 1, 1]] [0, 1]\n\n/--\ninfo: 1\n\
  -/\n#guard_msgs in\n#eval min_malware_spread [[1, 1, 0, 0], [1, 1, 1, 0], [0, 1,\
  \ 1, 1], [0, 0, 1, 1]] [0, 1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
