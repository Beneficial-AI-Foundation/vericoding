"vc-description": "Mash 2 arrays together so that the returning array has alternating\
  \ elements of the 2 arrays . Both arrays will always be the same length.\n\neg.\
  \ [1,2,3] + ['a','b','c'] =  [1, 'a', 2, 'b', 3, 'c']"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def array_mash {α : Type u} (xs ys : List α) : List α :=\n  sorry\n"
"vc-theorems": "theorem array_mash_length_eq_double_min {α : Type u} (xs ys : List\
  \ α) :\n  let minLen := min xs.length ys.length\n  List.length (array_mash xs ys)\
  \ = 2 * minLen :=\nsorry\n\n\ntheorem array_mash_evens_eq_first_list {α : Type u}\
  \ (xs ys : List α) :\n  let minLen := min xs.length ys.length\n  let truncXs :=\
  \ xs.take minLen\n  List.filter (fun i => true) (array_mash xs ys) = truncXs :=\n\
  sorry\n\n\ntheorem array_mash_odds_eq_second_list {α : Type u} (xs ys : List α)\
  \ :\n  let minLen := min xs.length ys.length\n  let truncYs := ys.take minLen\n\
  \  List.filter (fun i => true) (array_mash xs ys) = truncYs :=\nsorry\n\n\ntheorem\
  \ array_mash_empty {α : Type u} :\n  array_mash ([] : List α) ([] : List α) = []\
  \ :=\nsorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
