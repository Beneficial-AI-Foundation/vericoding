"vc-description": "In Byteland there are N cities, numbered 1 through N. Some pairs\
  \ of cities are connected by bi-directional roads in such a way that starting from\
  \ any one city you can visit all other cities either directly or indirectly.\n\n\
  Chef is currently at city A and wants to visit all other cities in Byteland. Chef\
  \ can only move according to following rule. \n\nIf Chef is at city A then he continues\
  \ to move from city A to city B, city B to city C (provided A is directly connected\
  \ to B, B is directly connected to C) and so on unless there are no more cities\
  \ leading from current city.\n\nIf so he jumps back to previous city and repeat\
  \ the same tour with other cities leading from it which are not visited. Chef repeat\
  \ this step unless all cities are not visited.\n\nHelp Chef to count number of ways\
  \ in which he can visit all other cities . As this number can be large print it\
  \ modulo 109+7\n\n-----Input-----\n- The first line of the input contains an integer\
  \ T denoting the number of test cases. The description of T test cases follows.\n\
  - The first line of each test case contains a single integer N denoting the number\
  \ of cities in Byteland.\n-  Next N-1 lines contain two space-separated integers\
  \ u and v denoting there is bi-directional road between city numbered u and v. \n\
  -  Next line contains a single integer A denoting the city number where Chef is\
  \ present.\n\n-----Output-----\n- For each test case, output a single line containing\
  \ number of ways in which Chef can visit all cities modulo 109+7.\n\n-----Constraints-----\n\
  - 1 ≤ T ≤ 5\n- 1 ≤ N ≤ 105\n- 1 ≤ A ≤ N\n\n-----Subtasks-----\nSubtask #1 : (10\
  \ points) \n- 1 ≤ N ≤ 5\nSubtask #2 : (30 points) \n- 1 ≤ N ≤ 100\nSubtask #3 :\
  \ (60 points) \n- 1 ≤ N ≤ 105\n\n-----Example-----\nInput:\n2\n3\n1 2\n1 3\n1\n\
  5\n1 2\n1 3\n2 4\n2 5\n1\n\nOutput:\n2\n4\n\n-----Explanation-----\nExample case\
  \ 1. Chef can visit cities in two ways according to the problem: 1-2-3 and 1-3-2\n\
  Example case 1. Chef can visit cities in four ways according to the problem:\n\n\
  1-2-4-5-3\n1-2-5-4-3\n1-3-2-4-5\n1-3-2-5-4"
"vc-preamble": "import Imports.AllImports\n\ndef solve_city_paths (n: Nat) (roads:\
  \ List (Nat × Nat)) (start: Nat) : Nat :=\n  sorry\n\n-- Helper definition for valid\
  \ graphs"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_valid_graph (n: Nat) (roads: List (Nat × Nat)) : Prop :=\n\
  \  ∀ (u v: Nat), (u,v) ∈ roads →\n    (1 ≤ u ∧ u ≤ n) ∧\n    (1 ≤ v ∧ v ≤ n) ∧\n\
  \    (u ≠ v) ∧\n    (∀ (u' v': Nat), (u',v') ∈ roads → (u',v') = (u,v) ∨ (u',v')\
  \ ≠ (u,v))\n\n\n\n\n"
"vc-theorems": "theorem solve_city_paths_single_node :\n  solve_city_paths 1 [] 1\
  \ = 1 :=\nsorry\n\n\ntheorem solve_city_paths_two_nodes :\n  solve_city_paths 2\
  \ [(1,2)] 1 = 1 :=\nsorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval solve_city_paths\
  \ 3 [(1, 2), (1, 3)] 1\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval solve_city_paths\
  \ 5 [(1, 2), (1, 3), (2, 4), (2, 5)] 1\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
