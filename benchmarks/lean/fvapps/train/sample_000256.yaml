"vc-description": "Find the kth largest element in an unsorted array. Note that it\
  \ is the kth largest element in the sorted order, not the kth distinct element.\n\
  \nExample 1:\n\n\nInput: [3,2,1,5,6,4] and k = 2\nOutput: 5\n\n\nExample 2:\n\n\n\
  Input: [3,2,3,1,2,4,5,5,6] and k = 4\nOutput: 4\n\nNote: \nYou may assume k is always\
  \ valid, 1 ≤ k ≤ array's length."
"vc-preamble": "import Imports.AllImports\n\ndef find_kth_largest (nums : List Int)\
  \ (k : Nat) : Int :=\n  sorry\n\n\ndef max_list (l : List Int) : Int :=\n  sorry\
  \ \n\n\ndef min_list (l : List Int) : Int :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sort_desc (l : List Int) : List Int :=\n  sorry\n"
"vc-theorems": "theorem find_kth_largest_element_membership\n  (nums : List Int) (k\
  \ : Nat) (h : k > 0) (h' : k ≤ nums.length) :\n  (find_kth_largest nums k) ∈ nums\
  \ :=\n  sorry\n\n\ntheorem find_kth_largest_lower_bound\n  (nums : List Int) (k\
  \ : Nat) (h : k > 0) (h' : k ≤ nums.length) :\n  (nums.filter (fun x => x ≥ find_kth_largest\
  \ nums k)).length ≥ k :=\n  sorry\n\n\ntheorem find_kth_largest_upper_bound\n  (nums\
  \ : List Int) (k : Nat) (h : k > 0) (h' : k ≤ nums.length) :\n  (nums.filter (fun\
  \ x => x > find_kth_largest nums k)).length < k :=\n  sorry\n\n/--\ninfo: 5\n-/\n\
  #guard_msgs in\n#eval find_kth_largest [3, 2, 1, 5, 6, 4] 2\n\n/--\ninfo: 4\n-/\n\
  #guard_msgs in\n#eval find_kth_largest [3, 2, 3, 1, 2, 4, 5, 5, 6] 4\n\n/--\ninfo:\
  \ 5\n-/\n#guard_msgs in\n#eval find_kth_largest [2, 1, 3, 4, 5, 6] 2\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
