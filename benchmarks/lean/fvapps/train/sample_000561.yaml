"vc-description": "You came across this story while reading a book. Long a ago when\
  \ the modern entertainment systems did not exist people used to go to watch plays\
  \ in theaters, where people would perform live in front of an audience. There was\
  \ a beautiful actress who had a disability she could not pronounce the character\
  \ $'r'$. To win her favours which many have been denied in past, you decide to write\
  \ a whole play without the character $'r'$. Now you have to get the script reviewed\
  \ by the editor before presenting it to her.\nThe editor was flattered by the script\
  \ and agreed to you to proceed. The editor will edit the script in this way to suit\
  \ her style. For each word replace it with a sub-sequence of itself such that it\
  \ contains the character 'a'. \nA subsequence is a sequence that can be derived\
  \ from another sequence by deleting some or no elements without changing the order\
  \ of the remaining elements Wikipedia \nNow given a script with $N$ words, for each\
  \ word in the script you wish to know the number of subsequences with which it can\
  \ be replaced. \n\n-----Input:-----\n- First-line will contain $N$, the number of\
  \ words in the script. Then next $N$ line with one test case each. \n- Each test\
  \ case contains a single word $W_i$\n\n-----Output:-----\nFor each test case, output\
  \ in a single line number of subsequences with which it can be replaced. \n\n-----Constraints-----\n\
  - $1 \\leq N \\leq 1000$\n- $1 \\leq$ length of $W_i$  $\\leq 20$\n- $W_i$  on contains\
  \ lowercase english alphabets and does not have the character 'r'\n\n-----Sample\
  \ Input 1:-----\n2\nabc\naba\n\n-----Sample Output 1:-----\n4\n6\n\n-----EXPLANATION:-----\n\
  This subsequences with which $abc$ can be replaed : ${a,ab,ac,abc}$. \nThis subsequences\
  \ with which $aba$ can be replaed : ${a,ab,aba,a,ba,a}$. \n\n-----Sample Input 2:-----\n\
  3\nabcde\nabcdea\nxyz\n\n-----Sample Output 2:-----\n16\n48\n0"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_valid_subsequences (words: List String) : List Nat :=\n\
  \  sorry\n"
"vc-theorems": "theorem output_length_matches_input (words: List String) :\n  List.length\
  \ (count_valid_subsequences words) = List.length words :=\n  sorry\n\n\ntheorem\
  \ all_outputs_nonnegative (words: List String) :\n  ∀ x ∈ count_valid_subsequences\
  \ words, x ≥ 0 :=\n  sorry\n\n\ntheorem no_a_gives_zero (words: List String) \n\
  \  (h: ∀ w ∈ words, ∀ c ∈ w.data, c ≠ 'a') :\n  ∀ x ∈ count_valid_subsequences words,\
  \ x = 0 :=\n  sorry\n\n\ntheorem all_a_gives_maximum (words: List String)\n  (h:\
  \ ∀ w ∈ words, ∀ c ∈ w.data, c = 'a') :\n  count_valid_subsequences words = words.map\
  \ (fun w => 2^w.length - 1) :=\n  sorry\n\n\ntheorem result_less_than_2_pow_n (words:\
  \ List String) :\n  ∀ (i: Nat), i < words.length → \n    (count_valid_subsequences\
  \ words).get! i < 2^(words.get! i).length :=\n  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
