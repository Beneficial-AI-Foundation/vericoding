"vc-description": "In this kata you will create a function to check a non-negative\
  \ input to see if it is a prime number.\n\nThe function will take in a number and\
  \ will return True if it is a prime number and False if it is not.\n\nA prime number\
  \ is a natural number greater than 1 that has no positive divisors other than 1\
  \ and itself.\n\n### Examples"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_prime (n : Nat) : Bool := sorry\n\ndef sqrt (n : Nat) :\
  \ Nat := sorry\n"
"vc-theorems": "theorem non_positive_numbers_not_prime {n : Nat} (h : n ≤ 1) : \n\
  \  is_prime n = false := sorry\n\n\ntheorem prime_divisibility_true {n : Nat} (h1\
  \ : n ≥ 2) (h2 : is_prime n = true) :\n  ∀ i, 2 ≤ i → i ≤ sqrt n → n % i ≠ 0 :=\
  \ sorry\n\n\ntheorem prime_divisibility_false {n : Nat} (h1 : n ≥ 2) (h2 : is_prime\
  \ n = false) :\n  ∃ i, 2 ≤ i ∧ i ≤ sqrt n ∧ n % i = 0 := sorry\n\n\ntheorem even_numbers_not_prime\
  \ {n : Nat} (h1 : n > 2) (h2 : n % 2 = 0) :\n  is_prime n = false := sorry\n\n\n\
  theorem perfect_squares_not_prime {n : Nat} (h1 : n > 4) \n  (h2 : ∃ k, n = k *\
  \ k) : is_prime n = false := sorry\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval\
  \ is_prime 0\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval is_prime 1\n\n/--\n\
  info: True\n-/\n#guard_msgs in\n#eval is_prime 2\n\n/--\ninfo: True\n-/\n#guard_msgs\
  \ in\n#eval is_prime 11\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval is_prime 61\n\
  \n/--\ninfo: True\n-/\n#guard_msgs in\n#eval is_prime 571\n\n/--\ninfo: False\n\
  -/\n#guard_msgs in\n#eval is_prime 12\n\n/--\ninfo: False\n-/\n#guard_msgs in\n\
  #eval is_prime 573\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval is_prime 25\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
