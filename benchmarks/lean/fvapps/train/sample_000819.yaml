"vc-description": "The chef is trying to solve some pattern problems, Chef wants your\
  \ help to code it. Chef has one number K(odd) to form a new pattern. Help the chef\
  \ to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$,\
  \ the number of test cases. Then the test cases follow. \n- Each test case contains\
  \ a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test\
  \ case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 50$\n\
  - $1 \\leq K \\leq 50$\n\n-----Sample Input:-----\n4\n1\n3\n5\n7\n\n-----Sample\
  \ Output:-----\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n\n-----EXPLANATION:-----\n\
  No need, else pattern can be decode easily."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def pattern_generator (k : Nat) : List String := sorry\n\ntheorem\
  \ pattern_length {k : Nat} (h : k > 0) :\n  (pattern_generator k).length = k :=\
  \ sorry\n"
"vc-theorems": "theorem pattern_star_count {k : Nat} (h : k > 0) :\n  ∀ line ∈ pattern_generator\
  \ k, (line.data.filter (· = '*')).length = 1 := sorry\n\n\ntheorem pattern_valid_chars\
  \ {k : Nat} (h : k > 0) :\n  ∀ line ∈ pattern_generator k, ∀ c ∈ line.data, c =\
  \ ' ' ∨ c = '*' := sorry\n\n\ntheorem pattern_ends_with_star {k : Nat} (h : k >\
  \ 0) :\n  ∀ line ∈ pattern_generator k, line.endsWith \"*\" := sorry\n\n\ntheorem\
  \ pattern_symmetry {k : Nat} (h : k > 0) :\n  ∀ i, i < k/2 → \n    let lines :=\
  \ pattern_generator k\n    ((lines.get! i).data.filter (· = ' ')).length = i ∧\n\
  \    ((lines.get! (k - 1 - i)).data.filter (· = ' ')).length = i := sorry\n\n/--\n\
  info: ['*']\n-/\n#guard_msgs in\n#eval pattern_generator 1\n\n/--\ninfo: ['*', '\
  \ *', '*']\n-/\n#guard_msgs in\n#eval pattern_generator 3\n\n/--\ninfo: ['*', '\
  \ *', '  *', ' *', '*']\n-/\n#guard_msgs in\n#eval pattern_generator 5\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
