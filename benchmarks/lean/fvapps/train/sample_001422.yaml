"vc-description": "Stuart is obsessed to numbers. He like all type of numbers in fact\
  \ he is having a great collection of numbers in his room. His collection includes\
  \ N different large numbers. But today he is searching for a number which is having\
  \ maximum frequency of digit X. Numbers are large so he can’t do the task on his\
  \ own. Help him to find a number having maximum frequency of digit X.\n\n-----Input-----\n\
  First Line contains number of test cases T. First Line of each test case contains\
  \ N. Next line contains N space separated integers A1,A2,A3,....,AN. Where Ai integer\
  \ indicates ith number in Stuart's room. Next Line contains digit X.\n\n-----Output-----\n\
  Output the number which is having maximum frequency of digit X. If two or more numbers\
  \ are having same maximum frequency then output the first occurred number among\
  \ them in A1,A2,A3,....,AN\n\n-----Constraints-----\n- 1 ≤ T ≤ 30\n- 1 ≤ N ≤ 100\n\
  - 1 ≤ Ai ≤ 10200\n- 0 ≤ X ≤ 9\n\n-----Example-----\nInput:\n2\n5\n345 1323 165 98\
  \ 456\n3\n5\n335 876 98 1323 349\n3\n\nOutput:\n1323\n335\n\n-----Explanation-----\n\
  Example case 1. 1323 number is having maximum occurrence of digit 3.\nExample case\
  \ 2. 335 & 1323 are having maximum occurrence of digit 3 so output must be first\
  \ occurred number in the array i.e. 335."
"vc-preamble": "import Imports.AllImports\n\ndef countDigit (n : Nat) (d : Nat) :\
  \ Nat :=\nsorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_max_digit_frequency (nums : List Nat) (target : Nat) :\
  \ Nat :=\nsorry\n"
"vc-theorems": "theorem max_digit_freq_in_list (nums : List Nat) (target : Nat) \n\
  \  (h : nums ≠ []) :\n  find_max_digit_frequency nums target ∈ nums :=\nsorry\n\n\
  \ntheorem max_digit_freq_is_max (nums : List Nat) (target : Nat) \n  (h : nums ≠\
  \ []) : \n  ∀ n ∈ nums, countDigit (find_max_digit_frequency nums target) target\
  \ ≥ \n              countDigit n target :=\nsorry\n\n\ntheorem no_target_returns_first\
  \ (nums : List Nat) (target : Nat)\n  (h : nums ≠ []) \n  (h2 : ∀ n ∈ nums, countDigit\
  \ n target = 0) :\n  find_max_digit_frequency nums target = nums.head! :=\nsorry\n\
  \n\ntheorem same_freq_returns_first (nums : List Nat) (target : Nat)\n  (h : nums\
  \ ≠ []) (n : Nat) (hn : n ∈ nums) :\n  countDigit n target = countDigit (find_max_digit_frequency\
  \ nums target) target →\n  n = find_max_digit_frequency nums target ∨ \n  nums.findIdx\
  \ (. = n) > nums.findIdx (. = find_max_digit_frequency nums target) :=\nsorry\n\n\
  /--\ninfo: '1323'\n-/\n#guard_msgs in\n#eval find_max_digit_frequency [\"345\",\
  \ \"1323\", \"165\", \"98\", \"456\"] \"3\"\n\n/--\ninfo: '335'\n-/\n#guard_msgs\
  \ in\n#eval find_max_digit_frequency [\"335\", \"876\", \"98\", \"1323\", \"349\"\
  ] \"3\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
