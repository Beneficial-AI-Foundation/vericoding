"vc-description": "You have to build a pyramid.\n\nThis pyramid should be built from\
  \ characters from a given string.\n\nYou have to create the code for these four\
  \ methods:\n```python\nwatch_pyramid_from_the_side(characters):\n\nwatch_pyramid_from_above(characters):\n\
  \ncount_visible_characters_of_the_pyramid(characters):\n\ncount_all_characters_of_the_pyramid(characters):\n\
  ```\n\nThe first method (\"FromTheSide\") shows the pyramid as you would see from\
  \ the side.\nThe second method (\"FromAbove\") shows the pyramid as you would see\
  \ from above.\nThe third method (\"CountVisibleCharacters\") should return the count\
  \ of all characters, that are visible from outside the pyramid.\nThe forth method\
  \ (\"CountAllCharacters\") should count all characters of the pyramid. Consider\
  \ that the pyramid is completely solid and has no holes or rooms in it.\n\nEvery\
  \ character will be used for building one layer of the pyramid. So the length of\
  \ the given string will be the height of the pyramid. Every layer will be built\
  \ with stones from the given character. There is no limit of stones.\nThe pyramid\
  \ should have perfect angles of 45 degrees.\n\nExample: Given string: \"abc\"\n\n\
  Pyramid from the side:\n```\n  c\n bbb\naaaaa\n```\nPyramid from above:\n```\naaaaa\n\
  abbba\nabcba\nabbba\naaaaa\n```\nCount of visible stones/characters: \n```\n25\n\
  ```\nCount of all used stones/characters:\n```\n35\n```\n\nThere is no meaning in\
  \ the order or the choice of the characters. It should work the same for example\
  \ \"aaaaa\" or \"54321\".\n\nHint: Your output for the side must always be a rectangle!\
  \ So spaces at the end of a line must not be deleted or trimmed!\n\nIf the string\
  \ is null or empty, you should exactly return this value for the watch-methods and\
  \ -1 for the count-methods.\n\nHave fun coding it and please don't forget to vote\
  \ and rank this kata! :-) \n\nI have created other katas. Have a look if you like\
  \ coding and challenges."
"vc-preamble": "import Imports.AllImports\n\ndef watch_pyramid_from_the_side (chars\
  \ : Option String) : Option String := sorry\ndef watch_pyramid_from_above (chars\
  \ : Option String) : Option String := sorry"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_visible_characters_of_the_pyramid (chars : Option String)\
  \ : Int := sorry\ndef count_all_characters_of_the_pyramid (chars : Option String)\
  \ : Int := sorry\n\n-- Empty inputs theorem"
"vc-theorems": "theorem empty_inputs {chars : Option String} : \n  chars = none ∨\
  \ chars = some \"\" →\n  watch_pyramid_from_the_side chars = chars ∧ \n  watch_pyramid_from_above\
  \ chars = chars ∧\n  count_visible_characters_of_the_pyramid chars = -1 ∧\n  count_all_characters_of_the_pyramid\
  \ chars = -1 := sorry\n\n-- Visible characters theorem \n\ntheorem count_visible_chars\
  \ {s : String} (h : s.length > 0) :\n  count_visible_characters_of_the_pyramid (some\
  \ s) = \n    (2 * s.length - 1) * (2 * s.length - 1) := sorry\n\n/--\ninfo: None\n\
  -/\n#guard_msgs in\n#eval watch_pyramid_from_the_side None\n\n/--\ninfo: ''\n-/\n\
  #guard_msgs in\n#eval watch_pyramid_from_the_side \"\"\n\n/--\ninfo: -1\n-/\n#guard_msgs\
  \ in\n#eval count_visible_characters_of_the_pyramid None\n\n/--\ninfo: expected_side\n\
  -/\n#guard_msgs in\n#eval watch_pyramid_from_the_side \"abc\"\n\n/--\ninfo: expected_above\n\
  -/\n#guard_msgs in\n#eval watch_pyramid_from_above test_str\n\n/--\ninfo: 25\n-/\n\
  #guard_msgs in\n#eval count_visible_characters_of_the_pyramid test_str\n\n/--\n\
  info: 35\n-/\n#guard_msgs in\n#eval count_all_characters_of_the_pyramid test_str\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
