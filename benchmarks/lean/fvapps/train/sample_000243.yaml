"vc-description": "Given an array of integers arr and an integer target.\nYou have\
  \ to find two non-overlapping sub-arrays of arr each with sum equal target. There\
  \ can be multiple answers so you have to find an answer where the sum of the lengths\
  \ of the two sub-arrays is minimum.\nReturn the minimum sum of the lengths of the\
  \ two required sub-arrays, or return -1 if you cannot find such two sub-arrays.\n\
   \nExample 1:\nInput: arr = [3,2,2,4,3], target = 3\nOutput: 2\nExplanation: Only\
  \ two sub-arrays have sum = 3 ([3] and [3]). The sum of their lengths is 2.\n\n\
  Example 2:\nInput: arr = [7,3,4,7], target = 7\nOutput: 2\nExplanation: Although\
  \ we have three non-overlapping sub-arrays of sum = 7 ([7], [3,4] and [7]), but\
  \ we will choose the first and third sub-arrays as the sum of their lengths is 2.\n\
  \nExample 3:\nInput: arr = [4,3,2,6,2,3,4], target = 6\nOutput: -1\nExplanation:\
  \ We have only one sub-array of sum = 6.\n\nExample 4:\nInput: arr = [5,5,4,4,5],\
  \ target = 3\nOutput: -1\nExplanation: We cannot find a sub-array of sum = 3.\n\n\
  Example 5:\nInput: arr = [3,1,1,1,5,1,2,1], target = 3\nOutput: 3\nExplanation:\
  \ Note that sub-arrays [1,2] and [2,1] cannot be an answer because they overlap.\n\
  \n \nConstraints:\n\n1 <= arr.length <= 10^5\n1 <= arr[i] <= 1000\n1 <= target <=\
  \ 10^8"
"vc-preamble": "import Imports.AllImports\n\ndef minSumOfLengths (arr : List Int)\
  \ (target : Int) : Int :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sumOfSubarray (arr : List Int) (i j : Nat) : Int :=\n  (arr.take\
  \ j).drop i |>.foldl (· + ·) 0\n"
"vc-theorems": "theorem edge_cases_return_negative_one (target : Int) :\n  minSumOfLengths\
  \ [] target = -1 ∧ \n  minSumOfLengths [1] (2 : Int) = -1 ∧\n  minSumOfLengths [0]\
  \ (0 : Int) = -1 :=\n  sorry\n\n\ntheorem valid_result_bounds {arr : List Int} {target\
  \ : Int} \n  (h1 : ∀ x ∈ arr, 1 ≤ x ∧ x ≤ 100)\n  (h2 : 1 ≤ target ∧ target ≤ 1000)\n\
  \  (h3 : arr ≠ [])\n  (h4 : minSumOfLengths arr target ≠ -1) :\n  2 ≤ minSumOfLengths\
  \ arr target ∧ minSumOfLengths arr target ≤ arr.length :=\n  sorry\n\n\ntheorem\
  \ negative_result_implies_no_valid_subarrays {arr : List Int} {target : Int}\n \
  \ (h1 : ∀ x ∈ arr, 0 ≤ x ∧ x ≤ 10)\n  (h2 : 0 ≤ target ∧ target ≤ 20)\n  (h3 : ¬∃\
  \ i j, 0 ≤ i ∧ i < j ∧ j ≤ arr.length ∧ \n       sumOfSubarray arr i j = target)\
  \ : \n  minSumOfLengths arr target = -1 :=\n  sorry\n\n\ntheorem negative_one_implies_no_non_overlapping_subarrays\
  \ {arr : List Int} {target : Int}\n  (h1 : ∀ x ∈ arr, 1 ≤ x ∧ x ≤ 10)\n  (h2 : 1\
  \ ≤ target ∧ target ≤ 20)\n  (h3 : arr.length ≥ 4)\n  (h4 : minSumOfLengths arr\
  \ target = -1) :\n  ¬∃ i j k l, \n    0 ≤ i ∧ i < j ∧ j ≤ k ∧ k < l ∧ l ≤ arr.length\
  \ ∧\n    sumOfSubarray arr i j = target ∧ \n    sumOfSubarray arr k l = target :=\n\
  \  sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval min_sum_of_lengths [3, 2, 2,\
  \ 4, 3] 3\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval min_sum_of_lengths [7, 3, 4,\
  \ 7] 7\n\n/--\ninfo: -1\n-/\n#guard_msgs in\n#eval min_sum_of_lengths [4, 3, 2,\
  \ 6, 2, 3, 4] 6\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
