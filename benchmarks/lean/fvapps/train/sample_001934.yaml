"vc-description": "One day n friends gathered together to play \"Mafia\". During each\
  \ round of the game some player must be the supervisor and other n - 1 people take\
  \ part in the game. For each person we know in how many rounds he wants to be a\
  \ player, not the supervisor: the i-th person wants to play a_{i} rounds. What is\
  \ the minimum number of rounds of the \"Mafia\" game they need to play to let each\
  \ person play at least as many rounds as they want?\n\n\n-----Input-----\n\nThe\
  \ first line contains integer n (3 ≤ n ≤ 10^5). The second line contains n space-separated\
  \ integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^9) — the i-th number in the list\
  \ is the number of rounds the i-th person wants to play.\n\n\n-----Output-----\n\
  \nIn a single line print a single integer — the minimum number of game rounds the\
  \ friends need to let the i-th person play at least a_{i} rounds.\n\nPlease, do\
  \ not use the %lld specifier to read or write 64-bit integers in С++. It is preferred\
  \ to use the cin, cout streams or the %I64d specifier.\n\n\n-----Examples-----\n\
  Input\n3\n3 2 2\n\nOutput\n4\n\nInput\n4\n2 2 2 2\n\nOutput\n3\n\n\n\n-----Note-----\n\
  \nYou don't need to know the rules of \"Mafia\" to solve this problem. If you're\
  \ curious, it's a game Russia got from the Soviet times: http://en.wikipedia.org/wiki/Mafia_(party_game)."
"vc-preamble": "import Imports.AllImports\n\ndef min_rounds_needed (n : Nat) (rounds\
  \ : List Nat) : Nat := sorry\n\ndef list_maximum (l : List Nat) : Nat := \n  match\
  \ l with\n  | [] => 0\n  | (x::xs) => xs.foldl Nat.max x\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def list_sum (l : List Nat) : Nat :=\n  match l with\n  | [] =>\
  \ 0\n  | (x::xs) => x + list_sum xs\n\n\n"
"vc-theorems": "theorem min_rounds_needed_all_zeros {n : Nat}\n  (h : n ≥ 2) : \n\
  \  let rounds := List.replicate n 0\n  min_rounds_needed n rounds = (n-2) / (n-1)\
  \ := sorry\n\n\ntheorem min_rounds_needed_equal_rounds {n : Nat} {x : Nat}\n  (h1\
  \ : n ≥ 2)\n  (h2 : x ≥ 1) :\n  let rounds := List.replicate n x\n  min_rounds_needed\
  \ n rounds = max x ((n*x + n-2) / (n-1)) := sorry\n\n/--\ninfo: 4\n-/\n#guard_msgs\
  \ in\n#eval min_rounds_needed 3 [3, 2, 2]\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n\
  #eval min_rounds_needed 4 [2, 2, 2, 2]\n\n/--\ninfo: 1005000000\n-/\n#guard_msgs\
  \ in\n#eval min_rounds_needed 3 [1000000000, 1000000000, 10000000]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded_and_plausible"
