"vc-description": "Chef is a private detective. He was asked to investigate a case\
  \ of murder in the city of Frangton.\nChef arrived in Frangton to find out that\
  \ the mafia was involved in the case. Chef spent some time watching for people that\
  \ belong to the clan and was able to build a map of relationships between them.\
  \ He knows that a mafia's organizational structure consists of a single Don, heading\
  \ a hierarchical criminal organization. Each member reports exactly to one other\
  \ member of the clan. It's obvious that there are no cycles in the reporting system\
  \ of the mafia.\nThere are N people in the clan, for simplicity indexed from 1 to\
  \ N, and Chef knows who each of them report to. Member i reports to member Ri.\n\
  Now, Chef needs to identfy all potential killers to continue his investigation.\
  \ Having considerable knowledge about the mafia's activities, Chef knows that the\
  \ killer must be a minor criminal, that is, one of the members who nobody reports\
  \ to. Please find the list of potential killers for Chef. Since Don reports to nobody,\
  \ his Ri will be equal to 0.\n\n-----Input-----\nThe first line of input contains\
  \ one integer N.\nNext line has N space-separated integers, the ith integer denotes\
  \ Ri — the person whom the ith member reports to.\n\n-----Output-----\nOutput a\
  \ list of space-separated integers in ascending order — the indices of potential\
  \ killers.\n\n-----Constraints-----\n- 1 ≤ N ≤ 105\n- 1 ≤ Ri ≤ N except for Don,\
  \ whose Ri equals to 0.\n- It is guaranteed that there are no cycles in the reporting\
  \ structure.\n\n-----Subtasks-----\n- Subtask #1 [50 points]: N ≤ 10000\n- Subtask\
  \ #2 [50 points]: No additional constraints\n\n-----Example-----\nInput:\n6\n0 1\
  \ 1 2 2 3\n\nOutput:\n4 5 6\n\n-----Explanation-----\nThe reporting structure:"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_killers (n : Nat) (reports : List Nat) : List Nat :=\n\
  \  sorry\n"
"vc-theorems": "theorem all_report_one (n : Nat) (h : n ≥ 2) :\n  let reports := (List.replicate\
  \ n 1).set 0 0\n  let result := find_killers n reports\n  ∀ i, i ∈ result ↔ (2 ≤\
  \ i ∧ i ≤ n) :=\nsorry\n\n\ntheorem chain_structure (n : Nat) (h : n ≥ 2) :\n  let\
  \ reports := 0 :: List.range (n-1)\n  let result := find_killers n reports\n  n\
  \ ∈ result :=\nsorry\n\n/--\ninfo: '4 5 6'\n-/\n#guard_msgs in\n#eval find_killers\
  \ 6 [0, 1, 1, 2, 2, 3]\n\n/--\ninfo: '2 3'\n-/\n#guard_msgs in\n#eval find_killers\
  \ 3 [0, 1, 1]\n\n/--\ninfo: '3 4 5'\n-/\n#guard_msgs in\n#eval find_killers 5 [0,\
  \ 1, 2, 1, 2]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
