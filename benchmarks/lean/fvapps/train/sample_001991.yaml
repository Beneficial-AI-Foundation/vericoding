"vc-description": "Nikita likes tasks on order statistics, for example, he can easily\
  \ find the $k$-th number in increasing order on a segment of an array. But now Nikita\
  \ wonders how many segments of an array there are such that a given number $x$ is\
  \ the $k$-th number in increasing order on this segment. In other words, you should\
  \ find the number of segments of a given array such that there are exactly $k$ numbers\
  \ of this segment which are less than $x$.\n\nNikita wants to get answer for this\
  \ question for each $k$ from $0$ to $n$, where $n$ is the size of the array.\n\n\
  \n-----Input-----\n\nThe first line contains two integers $n$ and $x$ $(1 \\le n\
  \ \\le 2 \\cdot 10^5, -10^9 \\le x \\le 10^9)$.\n\nThe second line contains $n$\
  \ integers $a_1, a_2, \\ldots, a_n$ $(-10^9 \\le a_i \\le 10^9)$ — the given array.\n\
  \n\n-----Output-----\n\nPrint $n+1$ integers, where the $i$-th number is the answer\
  \ for Nikita's question for $k=i-1$.\n\n\n-----Examples-----\nInput\n5 3\n1 2 3\
  \ 4 5\n\nOutput\n6 5 4 0 0 0 \nInput\n2 6\n-5 9\n\nOutput\n1 2 0 \nInput\n6 99\n\
  -1 -1 -1 -1 -1 -1\n\nOutput\n0 6 5 4 3 2 1"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve (n : Nat) (k : Nat) (arr : List Int) : List Int := sorry\n\
  \ndef fft (arr : List Int) (n : Nat) : List Int := sorry\n"
"vc-theorems": "theorem solve_empty_array_length {n : Nat} (h : n > 0) (h2 : n ≤ 10)\
  \ :\n  let arr := List.replicate n 0\n  List.length (solve n 0 arr) = n + 1 := sorry\n\
  \n\ntheorem solve_empty_array_nonneg {n : Nat} (h : n > 0) (h2 : n ≤ 10) :\n  let\
  \ arr := List.replicate n 0\n  ∀ x ∈ (solve n 0 arr), x ≥ 0 := sorry\n\n\ntheorem\
  \ fft_simple :\n  fft [1, 0, 0, 0] 2 = [1, 1, 1, 1] := sorry\n\n\ntheorem solve_example_1\
  \ :\n  solve 5 3 [1, 2, 3, 4, 5] = [6, 5, 4, 0, 0, 0] := sorry\n\n\ntheorem solve_example_2\
  \ :\n  solve 2 6 [-5, 9] = [1, 2, 0] := sorry\n\n\ntheorem solve_example_3 :\n \
  \ solve 6 99 [-1, -1, -1, -1, -1, -1] = [0, 6, 5, 4, 3, 2, 1] := sorry\n\n/--\n\
  info: N\n-/\n#guard_msgs in\n#eval len a\n\n/--\ninfo: [6, 5, 4, 0, 0, 0]\n-/\n\
  #guard_msgs in\n#eval solve 5 3 [1, 2, 3, 4, 5]\n\n/--\ninfo: [1, 2, 0]\n-/\n#guard_msgs\
  \ in\n#eval solve 2 6 [-5, 9]\n\n/--\ninfo: [0, 6, 5, 4, 3, 2, 1]\n-/\n#guard_msgs\
  \ in\n#eval solve 6 99 [-1, -1, -1, -1, -1, -1]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
