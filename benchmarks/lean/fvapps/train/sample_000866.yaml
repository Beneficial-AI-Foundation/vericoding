"vc-description": "Andrii is good in Math, but not in Programming. He is asking you\
  \ to solve following problem: Given an integer number N and two sets of integer\
  \ A and B. Let set A contain all numbers from 1 to N and set B contain all numbers\
  \ from N + 1 to 2N. Multiset C contains all sums a + b such that a belongs to A\
  \ and b belongs to B. Note that multiset may contain several elements with the same\
  \ values. For example, if N equals to three, then A = {1, 2, 3}, B = {4, 5, 6} and\
  \ C = {5, 6, 6, 7, 7, 7, 8, 8, 9}. Andrii has M queries about multiset C. Every\
  \ query is defined by a single integer q. Andrii wants to know the number of times\
  \ q is contained in C. For example, number 6 is contained two times, 1 is not contained\
  \ in C at all. \n\nPlease, help Andrii to answer all the queries.\n\n-----Input-----\n\
  \nThe first line of the input contains two integers N and M. Each of the next M\
  \ line contains one integer q, the query asked by Andrii.\n\n-----Output-----\n\
  Output the answer for each query in separate lines as in example.\n\n-----Constraints-----\n\
  - 1 ≤ N ≤ 109\n- 1 ≤ M ≤ 105\n- 1 ≤ q ≤ 3N\n\n-----Example-----\nInput:\n3 5\n6\n\
  2\n9\n7\n5\nOutput:\n2\n0\n1\n3\n1"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_sums_occurrences (n : Nat) (queries : List Int) : List\
  \ Nat :=\n  sorry\n\n-- Result should be same length as queries and contain naturals"
"vc-theorems": "theorem result_validity {n : Nat} {queries : List Int} :\n  let result\
  \ := count_sums_occurrences n queries \n  (result.length = queries.length) ∧ \n\
  \  (∀ x ∈ result, x ≥ 0) :=\n  sorry\n\n-- Special case for n=1\n\ntheorem n_equals_one\
  \ {queries : List Int} :\n  let result := count_sums_occurrences 1 queries\n  ∀\
  \ (i : Nat), i < queries.length →\n    result[i]! = (if queries[i]! = 2 then 1 else\
  \ 0) :=\n  sorry\n\n-- Results never exceed n\n\ntheorem result_upper_bound {n :\
  \ Nat} {queries : List Int} :\n  let result := count_sums_occurrences n queries\n\
  \  ∀ x ∈ result, x ≤ n :=\n  sorry\n\n-- Out of range queries give zero\n\ntheorem\
  \ out_of_range_zero {n : Nat} {queries : List Int} :\n  let result := count_sums_occurrences\
  \ n queries\n  ∀ (i : Nat), i < queries.length →\n    (queries[i]! ≤ n + 1 ∨ queries[i]!\
  \ > 3*n) → result[i]! = 0 :=\n  sorry\n\n-- Symmetry around 2n+1\n\ntheorem symmetry\
  \ {n : Nat} {queries : List Int} :\n  let result := count_sums_occurrences n queries\n\
  \  let mid := 2*n + 1\n  ∀ (i j : Nat), i < queries.length → j < queries.length\
  \ →\n    queries[i]! + queries[j]! = 2*mid → result[i]! = result[j]! :=\n  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
