"vc-description": "You are given a graph with $3 \\cdot n$ vertices and $m$ edges.\
  \ You are to find a matching of $n$ edges, or an independent set of $n$ vertices.\n\
  \nA set of edges is called a matching if no two edges share an endpoint.\n\nA set\
  \ of vertices is called an independent set if no two vertices are connected with\
  \ an edge.\n\n\n-----Input-----\n\nThe first line contains a single integer $T \\\
  ge 1$ — the number of graphs you need to process. The description of $T$ graphs\
  \ follows.\n\nThe first line of description of a single graph contains two integers\
  \ $n$ and $m$, where $3 \\cdot n$ is the number of vertices, and $m$ is the number\
  \ of edges in the graph ($1 \\leq n \\leq 10^{5}$, $0 \\leq m \\leq 5 \\cdot 10^{5}$).\n\
  \nEach of the next $m$ lines contains two integers $v_i$ and $u_i$ ($1 \\leq v_i,\
  \ u_i \\leq 3 \\cdot n$), meaning that there is an edge between vertices $v_i$ and\
  \ $u_i$.\n\nIt is guaranteed that there are no self-loops and no multiple edges\
  \ in the graph.\n\nIt is guaranteed that the sum of all $n$ over all graphs in a\
  \ single test does not exceed $10^{5}$, and the sum of all $m$ over all graphs in\
  \ a single test does not exceed $5 \\cdot 10^{5}$.\n\n\n-----Output-----\n\nPrint\
  \ your answer for each of the $T$ graphs. Output your answer for a single graph\
  \ in the following format.\n\nIf you found a matching of size $n$, on the first\
  \ line print \"Matching\" (without quotes), and on the second line print $n$ integers —\
  \ the indices of the edges in the matching. The edges are numbered from $1$ to $m$\
  \ in the input order.\n\nIf you found an independent set of size $n$, on the first\
  \ line print \"IndSet\" (without quotes), and on the second line print $n$ integers —\
  \ the indices of the vertices in the independent set.\n\nIf there is no matching\
  \ and no independent set of the specified size, print \"Impossible\" (without quotes).\n\
  \nYou can print edges and vertices in any order.\n\nIf there are several solutions,\
  \ print any. In particular, if there are both a matching of size $n$, and an independent\
  \ set of size $n$, then you should print exactly one of such matchings or exactly\
  \ one of such independent sets.\n\n\n-----Example-----\nInput\n4\n1 2\n1 3\n1 2\n\
  1 2\n1 3\n1 2\n2 5\n1 2\n3 1\n1 4\n5 1\n1 6\n2 15\n1 2\n1 3\n1 4\n1 5\n1 6\n2 3\n\
  2 4\n2 5\n2 6\n3 4\n3 5\n3 6\n4 5\n4 6\n5 6\n\nOutput\nMatching\n2\nIndSet\n1\n\
  IndSet\n2 4\nMatching\n1 15\n\n\n\n-----Note-----\n\nThe first two graphs are same,\
  \ and there are both a matching of size 1 and an independent set of size 1. Any\
  \ of these matchings and independent sets is a correct answer.\n\nThe third graph\
  \ does not have a matching of size 2, however, there is an independent set of size\
  \ 2. Moreover, there is an independent set of size 5: 2 3 4 5 6. However such answer\
  \ is not correct, because you are asked to find an independent set (or matching)\
  \ of size exactly $n$.\n\nThe fourth graph does not have an independent set of size\
  \ 2, but there is a matching of size 2."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def Graph := (Nat × Nat × List (Nat × Nat))\n\ndef solve_graph_matching\
  \ : List Graph → List (String × List Nat) := sorry\n"
"vc-theorems": "theorem single_vertex_empty_edges (g : Graph) (h : g = (1, 0, []))\
  \ :\n  let result := solve_graph_matching [g]\n  result.length = 1 ∧\n  (result.head!).1\
  \ ∈ [\"Matching\", \"IndSet\"] ∧\n  (result.head!).2.length = 1 := sorry\n\n\ntheorem\
  \ single_edge (g : Graph) (h : g = (1, 1, [(1,2)])) :\n  let result := solve_graph_matching\
  \ [g]\n  result.length = 1 ∧\n  (result.head!).1 ∈ [\"Matching\", \"IndSet\"] ∧\
  \ \n  (result.head!).2.length = 1 := sorry\n\n\ntheorem two_vertex_one_edge (g :\
  \ Graph) (h : g = (2, 1, [(1,2)])) :\n  let result := solve_graph_matching [g]\n\
  \  result.length = 1 ∧\n  (result.head!).1 ∈ [\"Matching\", \"IndSet\"] ∧\n  (result.head!).2.length\
  \ = 2 := sorry\n\n\ntheorem matching_vertices_valid (g : Graph) (result : String\
  \ × List Nat) :\n  result ∈ solve_graph_matching [g] →\n  result.1 = \"Matching\"\
  \ →\n  (∀ x, x ∈ result.2 → 1 ≤ x ∧ x ≤ g.2.1) ∧\n  (∀ x y, x ∈ result.2 → y ∈ result.2\
  \ → x = y ∨ x ≠ y) := sorry\n\n\ntheorem indset_vertices_valid (g : Graph) (result\
  \ : String × List Nat) :\n  result ∈ solve_graph_matching [g] →\n  result.1 = \"\
  IndSet\" →\n  (∀ x, x ∈ result.2 → 1 ≤ x ∧ x ≤ 3 * g.1) ∧\n  (∀ x y, x ∈ result.2\
  \ → y ∈ result.2 → x = y ∨ x ≠ y) ∧\n  ∀ v1 v2, v1 ∈ result.2 → v2 ∈ result.2 →\
  \ v1 < v2 →\n    ¬(v1, v2) ∈ (g.2.2.map (fun e => (min e.1 e.2, max e.1 e.2))) :=\
  \ sorry\n\n\ntheorem star_graph_has_indset (n : Nat) (edges : List (Nat × Nat))\
  \ :\n  edges = List.map (fun i => (1, i+2)) (List.range n) →\n  let result := (solve_graph_matching\
  \ [(n, edges.length, edges)]).head!\n  result.1 = \"IndSet\" ∧\n  result.2.length\
  \ = n := sorry"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded"
