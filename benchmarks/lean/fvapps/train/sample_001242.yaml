"vc-description": "Wet Shark once had 2 sequences: \n{a_n}= {a_1, a_2, a_3, ... ,\
  \ a_(109)}  \n{b_n} = {b_1, b_2, b_3, ... , b_(109)}  \nHowever, he only kept one\
  \ element from each sequence. Luckily, both the elements that Wet Shark kept have\
  \ the same index in Wet Shark's sequences: that is, he took a_i and b_i for some\
  \ 1 ≤ i ≤ 109. \nRight after Wet Shark loses his sequences, he finds that he actually\
  \ needs them to break the code of Cthulhu to escape a labyrinth. Cthulhu's code\
  \ is a single floating point number Q. However, the code verifier is faulty. If\
  \ Wet Shark enters any code c such that |c - Q| ≤ 0.01 , Cthulhu's code checker\
  \ will allow him to escape.\nWet Shark now starts to panic, and consults Dry Dolphin\
  \ for help via ultrasonic waves. After the Dry Dolphin Sequence Processing Factory\
  \ processes data of Wet Shark's sequences, the machines give Wet Shark the following\
  \ 2 relations his sequences follow for all 1 ≤ n < 109, where x = sqrt(2) and y\
  \ = sqrt(3).\n\nWet Shark is now clueless on how to compute anything, and asks you\
  \ for help.\nWet Shark has discovered that Cthulhu's code is actually defined as\
  \ Q = (a_k + b_k) / (2^s), where s is a predetermined number, k is the index of\
  \ another element in Wet Shark's sequence, and a_k, b_k are precisely the kth elements\
  \ of Wet Shark's sequences {a_n} and {b_n}, respectively.\nGiven k, i, and the 2\
  \ elements of the arrays Wet Shark has lost, find any value of the code c that will\
  \ allow Wet Shark to exit Cthulhu's labyrinth.\n\n-----Input-----\nThe first line\
  \ of input contains 3 space separated integers i, k, s — the common index of the\
  \ two elements Wet Shark kept, the index of Wet Shark's array needed to break Cthulhu's\
  \ code, and the number s described in the problem statement, respectively. It is\
  \ guaranteed that Cthulhu's code, Q, is between -109 and 109 (both inclusive).\n\
  The second line of the input contains 2 space separated integers a_i and b_i, representing\
  \ the ith element of sequence {a_n} and the ith element of sequence {b_n}, respectively.\n\
  \n-----Output-----\nOutput any number c that will crack Cthulhu's code. Recall that\
  \ if Wet Shark enters any code c such that |c - Q| ≤ 0.01 , Cthulhu's code checker\
  \ will allow him to exit the labyrinth.\n\n----- Constraints -----\n-   SUBTASK\
  \ 1: 20 POINTS  \n-  1 ≤ i ≤ 103 \n-  1 ≤ k ≤ 103 \n-  -103 ≤ s ≤ 103 \n-  1 ≤ a_i, b_i ≤ 103\
  \ \n\n-   SUBTASK 2: 80 POINTS  \n-  1 ≤ i ≤ 1010 \n-  1 ≤ k ≤ 1010 \n-  -1010 ≤\
  \ s ≤ 1010 \n-  1 ≤ a_i, b_i ≤ 1010 \nIt is guaranteed that -1010 ≤ Q ≤  1010.\n\
  \n-----Example-----\nInput:\n1 1 5\n4 5\n\nOutput:\n0.28125\n\n-----Explanation-----\n\
  Example case 1. In this case, a_1 = 4, b_1 = 5, and s = 5. Cthulhu's code in this\
  \ case is (a_1 + b_1) / (2s) = 9/32 = 0.28125."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calculate_cthulhu_code (i k s a_i b_i : Int) : Float := sorry\n\
  \ntheorem cthulhu_code_finite (i k s a_i b_i : Int) \n  (h1 : i ≥ 1) (h2 : k ≥ 1)\
  \ (h3 : s ≥ 1) \n  (h4 : -1000 ≤ a_i) (h5 : a_i ≤ 1000)\n  (h6 : -1000 ≤ b_i) (h7\
  \ : b_i ≤ 1000) :\n  let result := calculate_cthulhu_code i k s a_i b_i\n  Float.isFinite\
  \ result := sorry\n"
"vc-theorems": "theorem cthulhu_code_formula (i k s a_i b_i : Int)\n  (h1 : i ≥ 1)\
  \ (h2 : k ≥ 1) (h3 : s ≥ 1)\n  (h4 : -1000 ≤ a_i) (h5 : a_i ≤ 1000) \n  (h6 : -1000\
  \ ≤ b_i) (h7 : b_i ≤ 1000) :\n  let result := calculate_cthulhu_code i k s a_i b_i\n\
  \  let expected := (Float.ofInt (a_i + b_i)) / (Float.ofInt (2^s.toNat))\n  Float.abs\
  \ (result - expected) < 0.01 := sorry\n\n\ntheorem cthulhu_code_symmetric (i k s\
  \ a_i b_i : Int)\n  (h1 : i ≥ 1) (h2 : k ≥ 1) (h3 : s ≥ 1)\n  (h4 : -1000 ≤ a_i)\
  \ (h5 : a_i ≤ 1000)\n  (h6 : -1000 ≤ b_i) (h7 : b_i ≤ 1000) :\n  let result1 :=\
  \ calculate_cthulhu_code i k s a_i b_i\n  let result2 := calculate_cthulhu_code\
  \ i k s b_i a_i \n  Float.abs (result1 - result2) < 0.01 := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
