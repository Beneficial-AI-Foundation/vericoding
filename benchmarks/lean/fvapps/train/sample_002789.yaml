"vc-description": "# Summation\n\nWrite a program that finds the summation of every\
  \ number from 1 to num. The number will always be a positive integer greater than\
  \ 0.\n\nFor example:\n```if-not:racket\n~~~\nsummation(2) -> 3\n1 + 2\n\nsummation(8)\
  \ -> 36\n1 + 2 + 3 + 4 + 5 + 6 + 7 + 8\n~~~\n```\n```if:racket\n~~~racket\n(summation\
  \ 2) ; 3  (+ 1 2)\n(summation 8) ; 36 (+ 1 2 3 4 5 6 7 8)\n~~~\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def summation (n : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem summation_formula (n : Nat) (h : n > 0) : \n  summation n\
  \ = n * (n + 1) / 2 := \n  sorry\n\n\ntheorem summation_increasing {a b : Nat} (ha\
  \ : a > 0) (hb : b > 0) :\n  summation (a + b) > summation a :=\n  sorry\n\n/--\n\
  info: 1\n-/\n#guard_msgs in\n#eval summation 1\n\n/--\ninfo: 36\n-/\n#guard_msgs\
  \ in\n#eval summation 8\n\n/--\ninfo: 253\n-/\n#guard_msgs in\n#eval summation 22\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
