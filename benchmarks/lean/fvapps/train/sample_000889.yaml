"vc-description": "Devu has n weird friends. Its his birthday today, so they thought\
  \ that this is the best occasion for testing their friendship with him. They put\
  \ up conditions before Devu that they will break the friendship unless he gives\
  \ them a grand party on their chosen day. Formally, ith friend will break his friendship\
  \ if he does not receive a grand party on dith day.\n\nDevu despite being as rich\
  \ as Gatsby, is quite frugal and can give at most one grand party daily. Also, he\
  \ wants to invite only one person in a party. So he just wonders what is the maximum\
  \ number of friendships he can save. Please help Devu in this tough task !!\n\n\
  -----Input-----\n- The first line of the input contains an integer T denoting the\
  \ number of test cases. The description of T test cases follows.\n- First line will\
  \ contain a single integer denoting n.\n\n- Second line will contain n space separated\
  \ integers where ith integer corresponds to the day dith as given in the problem.\n\
  \n-----Output-----\nPrint a single line corresponding to the answer of the problem.\n\
  \n-----Constraints-----\n- 1 ≤ T ≤ 104\n- 1 ≤ n  ≤ 50\n- 1 ≤ di ≤ 100\n\n-----Example-----\n\
  Input:\n2\n2\n3 2\n2\n1 1\nOutput:\n2\n1\n\n-----Explanation-----\nExample case\
  \ 1. Devu can give party to second friend on day 2 and first friend on day 3, so\
  \ he can save both his friendships.\nExample case 2. Both the friends want a party\
  \ on day 1, and as the Devu can not afford more than one party a day, so he can\
  \ save only one of the friendships, so answer is 1."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def max_friendships (friend_days : List Int) : Nat :=\n  sorry\n"
"vc-theorems": "theorem max_friendships_upper_bound (friend_days : List Int) (h :\
  \ friend_days ≠ []) :\n  max_friendships friend_days ≤ friend_days.length := \n\
  \  sorry\n\n\ntheorem max_friendships_at_least_one (friend_days : List Int) (h :\
  \ friend_days ≠ []) :\n  max_friendships friend_days ≥ 1 :=\n  sorry\n\n\ntheorem\
  \ max_friendships_idempotent (friend_days : List Int) (h : friend_days ≠ []) :\n\
  \  max_friendships friend_days = max_friendships friend_days :=\n  sorry\n\n\ntheorem\
  \ max_friendships_duplicate_invariant (friend_days : List Int) (h : friend_days\
  \ ≠ []) :\n  max_friendships friend_days = max_friendships (friend_days ++ [List.head!\
  \ friend_days]) :=\n  sorry\n\n\ntheorem max_friendships_new_element_bound (friend_days\
  \ : List Int) (new_day : Int) (h : friend_days ≠ []) :\n  max_friendships (friend_days\
  \ ++ [new_day]) ≤ max_friendships friend_days + 1 :=\n  sorry\n\n/--\ninfo: 2\n\
  -/\n#guard_msgs in\n#eval max_friendships [3, 2]\n\n/--\ninfo: 1\n-/\n#guard_msgs\
  \ in\n#eval max_friendships [1, 1]\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval max_friendships\
  \ [4, 4, 5, 5, 5]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
