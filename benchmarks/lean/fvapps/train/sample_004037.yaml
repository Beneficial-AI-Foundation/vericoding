"vc-description": "## Task:\n\nYou have to write a function `pattern` which returns\
  \ the following Pattern(See Examples) upto desired number of rows. \n\n* Note:`Returning`\
  \ the pattern is not the same as `Printing` the pattern.\n\n### Parameters:\n  \
  \  \n    pattern(        n        ,        x        );\n                    ^  \
  \               ^         \n                    |                 |         \n \
  \            Term upto which   Number of times  \n              Basic Pattern  \
  \   Basic Pattern   \n                should be         should be     \n       \
  \          created          repeated      \n                                horizontally\
  \    \n    \n* Note: `Basic Pattern` means what we created in [Complete the pattern\
  \ #12](\"http://www.codewars.com/kata/558ac25e552b51dbc60000c3\")\n### Rules/Note:\n\
  \n* The pattern should be created using only unit digits.\n* If `n < 1` then it\
  \ should return \"\" i.e. empty string.\n* If `x <= 1` then the basic pattern should\
  \ not be repeated horizontally.\n* `The length of each line is same`, and is equal\
  \ to the length of longest line in the pattern.\n* Range of Parameters (for the\
  \ sake of CW Compiler) :\n  + `n ∈ (-∞,50]`\n  + `x ∈ (-∞,25]`\n* If only one argument\
  \ is passed then the function `pattern` should run as if `x <= 1`.\n* The function\
  \ `pattern` should work when extra arguments are passed, by ignoring the extra arguments.\n\
  \   \n   \n###Examples:\n\n* Having Two Arguments-\n\n + pattern(4,3):\n\n     \
  \   1     1     1     1\n         2   2 2   2 2   2 \n          3 3   3 3   3 3\
  \  \n           4     4     4   \n          3 3   3 3   3 3  \n         2   2 2\
  \   2 2   2 \n        1     1     1     1\n       \n  + pattern(10,2):\n\n     \
  \   1                 1                 1\n         2               2 2        \
  \       2 \n          3             3   3             3  \n           4        \
  \   4     4           4   \n            5         5       5         5    \n    \
  \         6       6         6       6     \n              7     7           7  \
  \   7      \n               8   8             8   8       \n                9 9\
  \               9 9        \n                 0                 0         \n   \
  \             9 9               9 9        \n               8   8             8\
  \   8       \n              7     7           7     7      \n             6    \
  \   6         6       6     \n            5         5       5         5    \n  \
  \         4           4     4           4   \n          3             3   3    \
  \         3  \n         2               2 2               2 \n        1        \
  \         1                 1\n\n* Having Only One Argument-\n\n  + pattern(25):\n\
  \n        1                                               1\n         2        \
  \                                     2 \n          3                          \
  \                 3  \n           4                                         4  \
  \ \n            5                                       5    \n             6  \
  \                                   6     \n              7                    \
  \               7      \n               8                                 8    \
  \   \n                9                               9        \n              \
  \   0                             0         \n                  1              \
  \             1          \n                   2                         2      \
  \     \n                    3                       3            \n            \
  \         4                     4             \n                      5        \
  \           5              \n                       6                 6        \
  \       \n                        7               7                \n          \
  \               8             8                 \n                          9  \
  \         9                  \n                           0         0          \
  \         \n                            1       1                    \n        \
  \                     2     2                     \n                           \
  \   3   3                      \n                               4 4            \
  \           \n                                5                        \n      \
  \                         4 4                       \n                         \
  \     3   3                      \n                             2     2        \
  \             \n                            1       1                    \n    \
  \                       0         0                   \n                       \
  \   9           9                  \n                         8             8  \
  \               \n                        7               7                \n  \
  \                     6                 6               \n                     \
  \ 5                   5              \n                     4                  \
  \   4             \n                    3                       3            \n\
  \                   2                         2           \n                  1\
  \                           1          \n                 0                    \
  \         0         \n                9                               9        \n\
  \               8                                 8       \n              7    \
  \                               7      \n             6                        \
  \             6     \n            5                                       5    \n\
  \           4                                         4   \n          3        \
  \                                   3  \n         2                            \
  \                 2 \n        1                                               1\n\
  \        \n        \n[List of all my katas](\"http://www.codewars.com/users/curious_db97/authored\"\
  )"
"vc-preamble": "import Imports.AllImports\n\ndef pattern (n : Int) : String := sorry\n\
  \ndef String.reverse (s : String) : String := sorry"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def Nat.toString (n : Nat) : String := sorry\n\ntheorem pattern_invalid_n\
  \ (n : Int) (h : n ≤ 0) :\n  pattern n = \"\" := sorry\n"
"vc-theorems": "theorem pattern_valid_num_lines {n : Int} (h : n > 0) :\n  let lines\
  \ := String.splitOn (pattern n) \"\\n\"\n  lines.length = 2 * n - 1 := sorry\n\n\
  \ntheorem pattern_valid_sequence {n : Int} (h : n > 0) :\n  let lines := String.splitOn\
  \ (pattern n) \"\\n\"\n  let mid := lines.length / 2\n  ∀ i, i ≤ mid → \n    ∃ c,\
  \ c ∈ String.toList (lines[i]!) ∧\n    c = ((i + 1).toString.toList[0]!) := sorry\n\
  \n\ntheorem pattern_reverse {n : Int} (h : n > 0) :\n  let lines := String.splitOn\
  \ (pattern n) \"\\n\"\n  let mid := lines.length / 2\n  (lines.take mid).reverse\
  \ = lines.drop (mid + 1) := sorry\n\n\ntheorem pattern_symmetric {n : Int} (h :\
  \ n > 0) :\n  let lines := String.splitOn (pattern n) \"\\n\"\n  ∀ line ∈ lines,\
  \ line = line.reverse := sorry\n\n/--\ninfo: expected\n-/\n#guard_msgs in\n#eval\
  \ pattern 3\n\n/--\ninfo: expected\n-/\n#guard_msgs in\n#eval pattern 4 2\n\n/--\n\
  info: expected\n-/\n#guard_msgs in\n#eval pattern -5 3\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
