"vc-description": "The number ```89``` is the first integer with more than one digit\
  \ that fulfills the property partially introduced in the title of this kata. \n\
  What's the use of saying \"Eureka\"? Because this sum gives the same number.\n\n\
  In effect: ```89 = 8^1 + 9^2``` \n\nThe next number in having this property is ```135```.\n\
  \nSee this property again: ```135 = 1^1 + 3^2 + 5^3```\n\nWe need a function to\
  \ collect these numbers, that may receive two integers ```a```, ```b``` that defines\
  \ the range ```[a, b]``` (inclusive) and outputs a list of the sorted numbers in\
  \ the range that fulfills the property described above.\n\nLet's see some cases:\n\
  ```python\nsum_dig_pow(1, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nsum_dig_pow(1, 100)\
  \ == [1, 2, 3, 4, 5, 6, 7, 8, 9, 89]\n```\nIf there are no numbers of this kind\
  \ in the range [a, b] the function should output an empty list.\n```python\nsum_dig_pow(90,\
  \ 100) == []\n```\nEnjoy it!!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def dig_pow (n : Nat) : Nat := sorry\n\ndef sum_dig_pow (a b :\
  \ Nat) : List Nat := sorry\n"
"vc-theorems": "theorem dig_pow_nonnegative (n : Nat) : \n  0 ≤ dig_pow n := sorry\n\
  \n\ntheorem dig_pow_is_nat (n : Nat) : \n  dig_pow n = dig_pow n := sorry\n\n\n\
  theorem sum_dig_pow_elements_in_range (a b : Nat) (h : a ≤ b) :\n  ∀ x ∈ sum_dig_pow\
  \ a b, a ≤ x ∧ x ≤ b := sorry\n\n\ntheorem sum_dig_pow_all_satisfy_dig_pow (a b\
  \ : Nat) (h : a ≤ b) :\n  ∀ x ∈ sum_dig_pow a b, dig_pow x = x := sorry\n\n\ntheorem\
  \ sum_dig_pow_sorted (a b : Nat) (h : a ≤ b) :\n  ∀ i j, i < j → j < (sum_dig_pow\
  \ a b).length → \n  (sum_dig_pow a b).get ⟨i, sorry⟩ ≤ (sum_dig_pow a b).get ⟨j,\
  \ sorry⟩ := sorry\n\n\ntheorem sum_dig_pow_single (n : Nat) :\n  sum_dig_pow n n\
  \ = if dig_pow n = n then [n] else [] := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
