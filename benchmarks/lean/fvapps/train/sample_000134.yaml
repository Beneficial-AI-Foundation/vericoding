"vc-description": "In a 2 dimensional array grid, each value grid[i][j] represents\
  \ the height of a building located there. We are allowed to increase the height\
  \ of any number of buildings, by any amount (the amounts can be different for different\
  \ buildings). Height 0 is considered to be a building as well. \nAt the end, the\
  \ \"skyline\" when viewed from all four directions of the grid, i.e. top, bottom,\
  \ left, and right, must be the same as the skyline of the original grid. A city's\
  \ skyline is the outer contour of the rectangles formed by all the buildings when\
  \ viewed from a distance. See the following example.\nWhat is the maximum total\
  \ sum that the height of the buildings can be increased?\nExample:\nInput: grid\
  \ = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]\nOutput: 35\nExplanation: \nThe grid\
  \ is:\n[ [3, 0, 8, 4], \n  [2, 4, 5, 7],\n  [9, 2, 6, 3],\n  [0, 3, 1, 0] ]\n\n\
  The skyline viewed from top or bottom is: [9, 4, 8, 7]\nThe skyline viewed from\
  \ left or right is: [8, 7, 9, 3]\n\nThe grid after increasing the height of buildings\
  \ without affecting skylines is:\n\ngridNew = [ [8, 4, 8, 7],\n            [7, 4,\
  \ 7, 7],\n            [9, 4, 8, 7],\n            [3, 3, 3, 3] ]\n\n\nNotes: \n\n\
  1 < grid.length = grid[0].length <= 50.\nAll heights grid[i][j] are in the range\
  \ [0, 100].\nAll buildings in grid[i][j] occupy the entire grid cell: that is, they\
  \ are a 1 x 1 x grid[i][j] rectangular prism."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def maxIncreaseKeepingSkyline (grid : List (List Nat)) : Nat :=\
  \ sorry\n\n-- A grid with uniform values should have no possible increases"
"vc-theorems": "theorem uniform_grid_theorem (n : Nat) (v : Nat) :\n  let grid :=\
  \ List.replicate n (List.replicate n v)\n  maxIncreaseKeepingSkyline grid = 0 :=\
  \ sorry\n\n-- A grid with values only on diagonal should have non-negative increase\n\
  \ntheorem diagonal_grid_theorem (n : Nat) :\n  let grid := List.map (fun i => \n\
  \    List.map (fun j => if i = j then 1 else 0) (List.range n)\n  ) (List.range\
  \ n)\n  maxIncreaseKeepingSkyline grid ≥ 0 := sorry\n\n-- A specific 2x2 example\
  \ case\n\ntheorem example_case_theorem :\n  maxIncreaseKeepingSkyline [[1,2], [2,1]]\
  \ = 2 := sorry\n\n/--\ninfo: 35\n-/\n#guard_msgs in\n#eval maxIncreaseKeepingSkyline\
  \ [[3, 0, 8, 4], [2, 4, 5, 7], [9, 2, 6, 3], [0, 3, 1, 0]]\n\n/--\ninfo: 0\n-/\n\
  #guard_msgs in\n#eval maxIncreaseKeepingSkyline [[5]]\n\n/--\ninfo: 2\n-/\n#guard_msgs\
  \ in\n#eval maxIncreaseKeepingSkyline [[1, 2], [2, 1]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
