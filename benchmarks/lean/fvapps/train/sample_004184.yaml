"vc-description": "We have an array with string digits that occurrs more than once,\
  \ for example, ```arr = ['1', '2', '2', '2', '3', '3']```. How many different string\
  \ numbers can be generated taking the 6 elements at a time?\n\nWe present the list\
  \ of them below in an unsorted way:\n``` \n['223213', '312322', '223312', '222133',\
  \ '312223', '223321', '223231', '132223', '132322', '223132', '322321', '322312',\
  \ '231322', '222313', '221233', '213322', '122323', '321322', '221332', '133222',\
  \ '123232', '323221', '222331', '132232', '321232', '212323', '232213', '232132',\
  \ '331222', '232312', '332212', '213223', '123322', '322231', '321223', '231232',\
  \ '233221', '231223', '213232', '312232', '233122', '322132', '223123', '322123',\
  \ '232231', '323122', '323212', '122233', '212233', '123223', '332221', '122332',\
  \ '221323', '332122', '232123', '212332', '232321', '322213', '233212', '313222']\n\
  ``` \nThere are ```60``` different numbers and ```122233``` is the lowest one and\
  \ ```332221``` the highest of all of them.\n\nGiven an array, ```arr```, with string\
  \ digits (from '0' to '9'), you should give the exact amount of different numbers\
  \ that may be generated with the lowest and highest value but both converted into\
  \ integer values, using all the digits given in the array for each generated string\
  \ number.\n\nThe function will be called as ```proc_arr()```.\n```python\nproc_arr(['1',\
  \ '2', '2', '3', '2', '3']) == [60, 122233, 332221]\n```\n\nIf the digit '0' is\
  \ present in the given array will produce string numbers with leading zeroes, that\
  \ will not be not taken in account when they are converted to integers.\n```python\n\
  proc_arr(['1','2','3','0','5','1','1','3']) == [3360, 1112335, 53321110]\n```\n\
  You will never receive an array with only one digit repeated n times.\n\nFeatures\
  \ of the random tests:\n```\nLow performance tests:\nNumber of tests: 100\nArrays\
  \ of length between 6 and 10\n\nHigher performance tests:\nNumber of tests: 100\n\
  Arrays of length between 30 and 100\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def proc_arr (arr : List String) : List Nat :=\n  sorry\n"
"vc-theorems": "theorem proc_arr_length (arr : List String) : \n  List.length (proc_arr\
  \ arr) = 3 :=\n  sorry\n\n\n\n\ntheorem proc_arr_permutation_count (arr : List String)\
  \ :\n  let result := proc_arr arr\n  let n := List.length arr\n  List.head! result\
  \ > 0 :=\n  sorry\n\n\ntheorem proc_arr_min_leq_max (arr : List String) :\n  let\
  \ result := proc_arr arr\n  List.get! result 1 ≤ List.get! result 2 :=\n  sorry\n\
  \n\ntheorem proc_arr_all_zeros (n : Nat) :\n  let zeros := List.replicate n \"0\"\
  \n  let result := proc_arr zeros\n  List.get! result 1 = 0 ∧ List.get! result 2\
  \ = 0 ∧ List.head! result = 1 :=\n  sorry\n\n\ntheorem proc_arr_all_same (n : Nat)\
  \ :\n  let ones := List.replicate n \"1\" \n  let result := proc_arr ones\n  List.head!\
  \ result = 1 ∧ \n  List.get! result 1 = List.get! result 2 :=\n  sorry\n\n/--\n\
  info: [60, 122233, 332221]\n-/\n#guard_msgs in\n#eval proc_arr [\"1\", \"2\", \"\
  2\", \"3\", \"2\", \"3\"]\n\n/--\ninfo: [3360, 1112335, 53321110]\n-/\n#guard_msgs\
  \ in\n#eval proc_arr [\"1\", \"2\", \"3\", \"0\", \"5\", \"1\", \"1\", \"3\"]\n\n\
  /--\ninfo: [60, 111223, 322111]\n-/\n#guard_msgs in\n#eval proc_arr [\"1\", \"1\"\
  , \"1\", \"2\", \"2\", \"3\"]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
