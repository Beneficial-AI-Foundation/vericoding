"vc-description": "This function should test if the `factor` is a factor of `base`.\n\
  \nReturn `true` if it is a factor or `false` if it is not.\n\n## About factors\n\
  Factors are numbers you can multiply together to get another number.\n\n2 and 3\
  \ are factors of 6 because: `2 * 3 = 6`\n\n- You can find a factor by dividing numbers.\
  \ If the remainder is 0 then the number is a factor.\n- You can use the mod operator\
  \ (`%`) in most languages to check for a remainder\n\nFor example 2 is not a factor\
  \ of 7 because: `7 % 2 = 1`\n\nNote: `base` is a non-negative number, `factor` is\
  \ a positive number."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def check_for_factor (base factor : Nat) : Bool := sorry\n\ntheorem\
  \ check_for_factor_multiplies_back {base factor : Nat} (h : check_for_factor base\
  \ factor = true) (h2 : factor > 0) :\n  (base / factor) * factor = base := sorry\n"
"vc-theorems": "theorem check_for_factor_has_remainder {base factor : Nat} (h : check_for_factor\
  \ base factor = false) (h2 : factor > 0) :\n  base % factor â‰  0 := sorry\n\n\ntheorem\
  \ one_always_factor {base : Nat} :\n  check_for_factor base 1 = true := sorry\n\n\
  \ntheorem self_is_factor {base : Nat} (h : base > 0) :\n  check_for_factor base\
  \ base = true := sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval check_for_factor\
  \ 10 2\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval check_for_factor 9 2\n\n/--\n\
  info: True\n-/\n#guard_msgs in\n#eval check_for_factor 24612 3\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
