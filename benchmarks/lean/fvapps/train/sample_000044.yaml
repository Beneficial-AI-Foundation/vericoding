"vc-description": "Today the kindergarten has a new group of $n$ kids who need to\
  \ be seated at the dinner table. The chairs at the table are numbered from $1$ to\
  \ $4n$. Two kids can't sit on the same chair. It is known that two kids who sit\
  \ on chairs with numbers $a$ and $b$ ($a \\neq b$) will indulge if:   $gcd(a, b)\
  \ = 1$ or,  $a$ divides $b$ or $b$ divides $a$. \n\n$gcd(a, b)$ — the maximum number\
  \ $x$ such that $a$ is divisible by $x$ and $b$ is divisible by $x$.\n\nFor example,\
  \ if $n=3$ and the kids sit on chairs with numbers $2$, $3$, $4$, then they will\
  \ indulge since $4$ is divided by $2$ and $gcd(2, 3) = 1$. If kids sit on chairs\
  \ with numbers $4$, $6$, $10$, then they will not indulge.\n\nThe teacher really\
  \ doesn't want the mess at the table, so she wants to seat the kids so there are\
  \ no $2$ of the kid that can indulge. More formally, she wants no pair of chairs\
  \ $a$ and $b$ that the kids occupy to fulfill the condition above.\n\nSince the\
  \ teacher is very busy with the entertainment of the kids, she asked you to solve\
  \ this problem.\n\n\n-----Input-----\n\nThe first line contains one integer $t$\
  \ ($1 \\leq t \\leq 100$) — the number of test cases. Then $t$ test cases follow.\n\
  \nEach test case consists of one line containing an integer $n$ ($1 \\leq n \\leq\
  \ 100$) — the number of kids.\n\n\n-----Output-----\n\nOutput $t$ lines, which contain\
  \ $n$ distinct integers from $1$ to $4n$ — the numbers of chairs that the kids should\
  \ occupy in the corresponding test case. If there are multiple answers, print any\
  \ of them. You can print $n$ numbers in any order.\n\n\n-----Example-----\nInput\n\
  3\n2\n3\n4\n\nOutput\n6 4\n4 6 10\n14 10 12 8"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_seats (n : Nat) : List Nat := sorry\n\ndef will_indulge\
  \ (a b : Nat) : Bool := sorry\n"
"vc-theorems": "theorem solve_seats_length (n : Nat) (h : n > 0) (h2 : n ≤ 100) :\
  \ \n  (solve_seats n).length = n := sorry\n\n\ntheorem solve_seats_even_numbers\
  \ (n : Nat) (h : n > 0) (h2 : n ≤ 100) :\n  ∀ x ∈ solve_seats n, x % 2 = 0 := sorry\n\
  \n\ntheorem solve_seats_descending (n : Nat) (h : n > 0) (h2 : n ≤ 100) :\n  ∀ i\
  \ j, i < j → j < (solve_seats n).length → \n    (solve_seats n).get ⟨i, sorry⟩ ≥\
  \ (solve_seats n).get ⟨j, sorry⟩ := sorry\n\n\ntheorem solve_seats_no_indulging\
  \ (n : Nat) (h : n > 0) (h2 : n ≤ 20) :\n  ∀ i j, i < j → j < (solve_seats n).length\
  \ → \n    ¬(will_indulge ((solve_seats n).get ⟨i, sorry⟩) ((solve_seats n).get ⟨j,\
  \ sorry⟩)) := sorry\n\n\ntheorem solve_seats_positive (n : Nat) (h : n > 0) (h2\
  \ : n ≤ 100) :\n  ∀ x ∈ solve_seats n, x > 0 := sorry\n\n/--\ninfo: [6, 8]\n-/\n\
  #guard_msgs in\n#eval sorted solve_seats(2)\n\n/--\ninfo: [8, 10, 12]\n-/\n#guard_msgs\
  \ in\n#eval sorted solve_seats(3)\n\n/--\ninfo: [10, 12, 14, 16]\n-/\n#guard_msgs\
  \ in\n#eval sorted solve_seats(4)\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
