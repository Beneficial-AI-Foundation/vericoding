"vc-description": "From this lesson, we learn about JS static object: ```Math```.\
  \ It mainly helps us to carry out mathematical calculations. It has a lot of properties\
  \ and methods. Some of the properties and methods we rarely used. So we only learn\
  \ some common methods.\n\nThe properties of the Math object are some constants,\
  \ such as PI, on behalf of the approximate value of pi. The usage is ```Math.PI```.\
  \ I will no longer introduce one by one, please refer to the manual:\n      \n \
  \ - [Math Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math)\n\
  \nIn this lesson we learn three methods to turn a number into an integer: ```round()```,\
  \ ```ceil()``` and ```floor()```. \n\nTheir definitions and detailed information:\n\
  \n- [Math.round()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round)\n\
  - [Math.ceil()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil)\n\
  - [Math.floor()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor)\n\
  \nFirst of all, we have to understand the first thing, all the methods of the Math\
  \ object are static methods. It means that you need to use the Math method like\
  \ this: ```Math.round(1.23)```. Not like this: ```(1.23).round()```.\n\nHere we\
  \ use some examples to understand their usage:\n\nWe can see, ```ceil()``` always\
  \ rounding up to get a large integer; ```floor()``` always rounding down to get\
  \ a small integer; ```round()``` according to the fractional part and round it to\
  \ integer.\n\nWhen the parameter is negative, they still works:\nIt should be noted\
  \ that they are not working on the fractional part. If you want to keep two decimal\
  \ places or otherwise, you should use [Methods of Number object--toFixed(), toExponential()\
  \ and toPrecision()](http://www.codewars.com/kata/57256064856584bc47000611), or\
  \ use the following techniques:\nIn the example above, we first multiply the number\
  \ by 100, and then round it. the final result is to retain two decimal places.\n\
  \nOk, lesson is over. let's us do some task.\n\n## Task\n\nCoding in function ```roundIt```.\
  \ function accept 1 parameter ```n```. It's a number with a decimal point. Please\
  \ use different methods based on the location of the decimal point, turn the number\
  \ into an integer.\n\nIf the decimal point is on the left side of the number (that\
  \ is, the count of digits on the left of the decimal point is less than that on\
  \ the right), Using ```ceil()``` method.\n```\nroundIt(3.45) should return 4\n```\n\
  If the decimal point is on the right side of the number (that is, the count of digits\
  \ on the left of the decimal point is more than that on the right), Using ```floor()```\
  \ method.\n```\nroundIt(34.5) should return 34\n```\nIf the decimal point is on\
  \ the middle of the number (that is, the count of digits  on the left of the decimal\
  \ point is equals that on the right), Using ```round()``` method.\n```\nroundIt(34.56)\
  \ should return 35\n```\n\n## [Series](http://github.com/myjinxin2015/Katas-list-of-Training-JS-series)\n\
  \n( ↑↑↑ Click the link above can get my newest kata list, Please add it to your\
  \ favorites)\n\n - [#1: create your first JS function helloWorld](http://www.codewars.com/kata/571ec274b1c8d4a61c0000c8)\n\
  \ - [#2: Basic data types--Number](http://www.codewars.com/kata/571edd157e8954bab500032d)\n\
  \ - [#3:  Basic data types--String](http://www.codewars.com/kata/571edea4b625edcb51000d8e)\n\
  \ - [#4:  Basic data types--Array](http://www.codewars.com/kata/571effabb625ed9b0600107a)\n\
  \ - [#5:  Basic data types--Object](http://www.codewars.com/kata/571f1eb77e8954a812000837)\n\
  \ - [#6:  Basic data types--Boolean and conditional statements if..else](http://www.codewars.com/kata/571f832f07363d295d001ba8)\n\
  \ - [#7:  if..else and ternary operator](http://www.codewars.com/kata/57202aefe8d6c514300001fd)\n\
  \ - [#8: Conditional statement--switch](http://www.codewars.com/kata/572059afc2f4612825000d8a)\n\
  \ - [#9: loop statement --while and do..while](http://www.codewars.com/kata/57216d4bcdd71175d6000560)\n\
  \ - [#10: loop statement --for](http://www.codewars.com/kata/5721a78c283129e416000999)\n\
  \ - [#11: loop statement --break,continue](http://www.codewars.com/kata/5721c189cdd71194c1000b9b)\n\
  \ - [#12: loop statement --for..in and for..of](http://www.codewars.com/kata/5722b3f0bd5583cf44001000)\n\
  \ - [#13: Number object and  its properties](http://www.codewars.com/kata/5722fd3ab7162a3a4500031f)\n\
  \ - [#14: Methods of Number object--toString() and toLocaleString()](http://www.codewars.com/kata/57238ceaef9008adc7000603)\n\
  \ - [#15: Methods of Number object--toFixed(), toExponential() and toPrecision()](http://www.codewars.com/kata/57256064856584bc47000611)\n\
  \ - [#16: Methods of String object--slice(), substring() and substr()](http://www.codewars.com/kata/57274562c8dcebe77e001012)\n\
  \ - [#17: Methods of String object--indexOf(), lastIndexOf() and search()](http://www.codewars.com/kata/57277a31e5e51450a4000010)\n\
  \ - [#18: Methods of String object--concat() split() and its good friend join()](http://www.codewars.com/kata/57280481e8118511f7000ffa)\n\
  \ - [#19: Methods of String object--toUpperCase() toLowerCase() and replace()](http://www.codewars.com/kata/5728203b7fc662a4c4000ef3)\n\
  \ - [#20: Methods of String object--charAt() charCodeAt() and fromCharCode()](http://www.codewars.com/kata/57284d23e81185ae6200162a)\n\
  \ - [#21: Methods of String object--trim() and the string template](http://www.codewars.com/kata/5729b103dd8bac11a900119e)\n\
  \ - [#22: Unlock new skills--Arrow function,spread operator and deconstruction](http://www.codewars.com/kata/572ab0cfa3af384df7000ff8)\n\
  \ - [#23: methods of arrayObject---push(), pop(), shift() and unshift()](http://www.codewars.com/kata/572af273a3af3836660014a1)\n\
  \ - [#24: methods of arrayObject---splice() and slice()](http://www.codewars.com/kata/572cb264362806af46000793)\n\
  \ - [#25: methods of arrayObject---reverse() and sort()](http://www.codewars.com/kata/572df796914b5ba27c000c90)\n\
  \ - [#26: methods of arrayObject---map()](http://www.codewars.com/kata/572fdeb4380bb703fc00002c)\n\
  \ - [#27: methods of arrayObject---filter()](http://www.codewars.com/kata/573023c81add650b84000429)\n\
  \ - [#28: methods of arrayObject---every() and some()](http://www.codewars.com/kata/57308546bd9f0987c2000d07)\n\
  \ - [#29: methods of arrayObject---concat() and join()](http://www.codewars.com/kata/5731861d05d14d6f50000626)\n\
  \ - [#30: methods of arrayObject---reduce() and reduceRight()](http://www.codewars.com/kata/573156709a231dcec9000ee8)\n\
  \ - [#31: methods of arrayObject---isArray() indexOf() and toString()](http://www.codewars.com/kata/5732b0351eb838d03300101d)\n\
  \ - [#32: methods of Math---round() ceil() and floor()](http://www.codewars.com/kata/5732d3c9791aafb0e4001236)\n\
  \ - [#33: methods of Math---max() min() and abs()](http://www.codewars.com/kata/5733d6c2d780e20173000baa)\n\
  \ - [#34: methods of Math---pow() sqrt() and cbrt()](http://www.codewars.com/kata/5733f948d780e27df6000e33)\n\
  \ - [#35: methods of Math---log() and its family](http://www.codewars.com/kata/57353de879ccaeb9f8000564)\n\
  \ - [#36: methods of Math---kata author's lover:random()](http://www.codewars.com/kata/5735956413c2054a680009ec)\n\
  \ - [#37: Unlock new weapon---RegExp Object](http://www.codewars.com/kata/5735e39313c205fe39001173)\n\
  \ - [#38: Regular Expression--\"^\",\"$\", \".\" and test()](http://www.codewars.com/kata/573975d3ac3eec695b0013e0)\n\
  \ - [#39: Regular Expression--\"?\", \"*\", \"+\" and \"{}\"](http://www.codewars.com/kata/573bca07dffc1aa693000139)\n\
  \ - [#40: Regular Expression--\"|\", \"[]\" and \"()\"](http://www.codewars.com/kata/573d11c48b97c0ad970002d4)\n\
  \ - [#41: Regular Expression--\"\\\"](http://www.codewars.com/kata/573e6831e3201f6a9b000971)\n\
  \ - [#42: Regular Expression--(?:), (?=) and (?!)](http://www.codewars.com/kata/573fb9223f9793e485000453)"
"vc-preamble": "import Imports.AllImports\n\ndef roundIt (x : Float) : Int := sorry\n\
  \ndef floor (x : Float) : Int := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def ceil (x : Float) : Int := sorry\n\ndef floatToStr (x : Float)\
  \ : String := sorry\n"
"vc-theorems": "theorem round_it_decimals (x : Float) \n  (h₁ : Float.floor x ≠ x)\n\
  \  (h₂ : String.length (floatToStr (Float.floor (Float.abs x))) < \n        String.length\
  \ (floatToStr (Float.abs x - Float.floor (Float.abs x)))) :\n  roundIt x = ceil\
  \ x := sorry\n\n\ntheorem round_it_decimals_floor (x : Float)\n  (h₁ : Float.floor\
  \ x ≠ x)\n  (h₂ : String.length (floatToStr (Float.floor (Float.abs x))) >\n   \
  \     String.length (floatToStr (Float.abs x - Float.floor (Float.abs x)))) :\n\
  \  roundIt x = floor x := sorry\n\n\ntheorem round_it_decimals_equal_length (x :\
  \ Float)\n  (h₁ : Float.floor x ≠ x)\n  (h₂ : String.length (floatToStr (Float.floor\
  \ (Float.abs x))) =\n        String.length (floatToStr (Float.abs x - Float.floor\
  \ (Float.abs x)))) :\n  roundIt x = if x > 0 then ceil x else floor x := sorry\n\
  \n\ntheorem round_it_integers (n : Int) :\n  roundIt (Float.ofInt n) = n := sorry\n\
  \n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval round_it 3.45\n\n/--\ninfo: 34\n-/\n#guard_msgs\
  \ in\n#eval round_it 34.5\n\n/--\ninfo: 35\n-/\n#guard_msgs in\n#eval round_it 34.56\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
