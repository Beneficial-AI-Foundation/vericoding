"vc-description": "A function receives a certain numbers of integers ```n1, n2, n3\
  \ ..., np```(all positive and different from 0) and a factor ```k, k > 0```\n\n\
  The function rearranges the numbers ```n1, n2, ..., np``` in such order that generates\
  \ the minimum number concatenating the digits and this number should be divisible\
  \ by ```k```.\n\nThe order that the function receives their arguments is:\n```python\n\
  rearranger(k, n1, n2, n3,....,np)\n```\n\n## Examples\n\n```python\nrearranger(4,\
  \ 32, 3, 34, 7, 12)  == \"Rearrangement: 12, 3, 34, 7, 32 generates: 12334732 divisible\
  \ by 4\"\n\nrearranger(10, 32, 3, 34, 7, 12) == \"There is no possible rearrangement\"\
  \n```\nIf there are more than one possible arrengement for the same minimum number,\
  \ your code should be able to handle those cases:\n```python\nrearranger(6, 19,\
  \ 32, 2, 124, 20, 22) == \"Rearrangements: 124, 19, 20, 2, 22, 32 and 124, 19, 20,\
  \ 22, 2, 32 generates: 124192022232 divisible by 6\"\n```\n\nThe arrangements should\
  \ be in sorted order, as you see: `124, 19, 20, 2, 22, 32` comes first than `124,\
  \ 19, 20, 22, 2, 32`.\n\nHave an enjoyable time!\n\n(Thanks to `ChristianE.Cooper`\
  \ for his contribution to this kata)"
"vc-preamble": "import Imports.AllImports\n\ndef rearranger (k : Nat) (nums : List\
  \ Nat) : String := sorry\n\ndef splitString (s : String) (sep : String) : List String\
  \ := sorry\n\ndef trim (s : String) : String := sorry\ndef toNat! (s : String) :\
  \ Nat := sorry\n\ndef getFirst (l : List α) : α := sorry\ndef replace (s : String)\
  \ (target : String) (replacement : String) : String := sorry"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sortString (s : String) : String := sorry\ndef joinStrings\
  \ (l : List String) : String := sorry\n"
"vc-theorems": "theorem rearranger_divisible (k : Nat) (nums : List Nat) :\n  k >\
  \ 0 → nums.length > 0 →\n  let result := rearranger k nums\n  result ≠ \"There is\
  \ no possible rearrangement\" →\n  let parts := splitString result \"generates:\"\
  \n  let numberStr := getFirst (splitString (getFirst (parts.tail)) \"divisible by\"\
  )\n  let number := toNat! (trim numberStr)\n  number % k = 0 := sorry \n\n\ntheorem\
  \ rearranger_preserves_digits (k : Nat) (nums : List Nat) :\n  k > 0 → nums.length\
  \ > 0 →\n  let result := rearranger k nums\n  result ≠ \"There is no possible rearrangement\"\
  \ →\n  let input_digits := nums.map toString |> joinStrings |> sortString\n  let\
  \ parts := splitString result \"generates:\"\n  let first_part := trim (replace\
  \ (getFirst parts) \"Rearrangement:\" \"\")\n  let result_digits := splitString\
  \ first_part \", \" |> joinStrings |> sortString\n  input_digits = result_digits\
  \ := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
