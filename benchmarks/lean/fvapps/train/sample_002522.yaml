"vc-description": "For this game of `BINGO`, you will receive a single array of 10\
  \ numbers from 1 to 26 as an input. Duplicate numbers within the array are possible.\n\
  \nEach number corresponds to their alphabetical order letter (e.g. 1 = A. 2 = B,\
  \ etc). Write a function where you will win the game if your numbers can spell `\"\
  BINGO\"`. They do not need to be in the right order in the input array). Otherwise\
  \ you will lose. Your outputs should be `\"WIN\"` or `\"LOSE\"` respectively."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def bingo (numbers : List Int) : String := sorry\n\ntheorem bingo_returns_valid_string\
  \ (numbers : List Int) :\n  numbers ≠ [] →\n  (bingo numbers = \"WIN\" ∨ bingo numbers\
  \ = \"LOSE\") := sorry\n"
"vc-theorems": "theorem bingo_win_condition_with_bingo_numbers\n  (numbers : List\
  \ Int)\n  (h : ∀ n ∈ numbers, 1 ≤ n ∧ n ≤ 30) :\n  let bingo_numbers := [2, 9, 14,\
  \ 7, 15]\n  bingo (numbers ++ bingo_numbers) = \"WIN\" := sorry\n\n\ntheorem bingo_win_condition_monotone\n\
  \  (numbers extra_numbers : List Int) :\n  bingo numbers = \"WIN\" →\n  bingo (numbers\
  \ ++ extra_numbers) = \"WIN\" := sorry\n\n\ntheorem bingo_missing_required_loses\n\
  \  (numbers : List Int)\n  (h : ∀ n ∈ numbers, n ≠ 2 ∧ n ≠ 9 ∧ n ≠ 14 ∧ n ≠ 7 ∧\
  \ n ≠ 15) :\n  bingo numbers = \"LOSE\" := sorry\n\n/--\ninfo: 'LOSE'\n-/\n#guard_msgs\
  \ in\n#eval bingo [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n/--\ninfo: 'LOSE'\n-/\n#guard_msgs\
  \ in\n#eval bingo [20, 12, 23, 14, 6, 22, 12, 17, 2, 26]\n\n/--\ninfo: 'WIN'\n-/\n\
  #guard_msgs in\n#eval bingo [1, 2, 3, 7, 5, 14, 7, 15, 9, 10]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
