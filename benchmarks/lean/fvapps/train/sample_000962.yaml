"vc-description": "The Chef once decided to prepare some nice dishes on his birthday.\
  \ There are N items kept on his shelf linearly from position 1 to N. Taste of the\
  \ i-th item is denoted by a integer Ai.\n\nHe wants to make Q dishes. A dish will\
  \ be made using some ingredients in the continuous range AL, AL + 1, , , AR (1-base\
  \ indexing). Quality of the dish will be determined by the ingredient with minimum\
  \ taste.\n\nChef wants help of his assistant Rupsa to find out sum and product of\
  \ qualities of the dishes. As product of the qualities of the dishes could be very\
  \ large, print it modulo 109 + 7. Also, you are given an integer K and you are assured\
  \ that for each dish, the size of continuous range of the ingredients (i.e. R -\
  \ L + 1) will always lie between K and 2 * K, both inclusive.\n\nMethod of generation\
  \ of Array A \n\nYou are given non-negative integer parameters a, b, c, d, e, f,\
  \ r, s, t, m, A[1]\n\nfor x = 2 to N:\n\tif(t^x mod s  <= r)        // Here t^x\
  \ signifies \"t to the power of x\"\n\t\tA[x] = (a*A[x-1]^2 + b*A[x-1] + c) mod\
  \ m\n\telse\n\t\tA[x] = (d*A[x-1]^2 + e*A[x-1] + f) mod m\n\nMethod of generation\
  \ of range of ingredients for Q dishes \n\nYou are given non-negative integer parameters\
  \ L1, La, Lc, Lm, D1, Da, Dc, Dm\n\nfor i = 1 to Q:\n\tL1 = (La * L1 + Lc) mod Lm;\n\
  \tD1 = (Da * D1 + Dc) mod Dm; \n\tL = L1 + 1;\n\tR = min(L + K - 1 + D1, N);\n\n\
  -----Input-----\n- The first line contains three integers N, K and Q.\n- The second\
  \ line contains the integers a, b, c, d, e, f, r, s, t, m, and A[1].\n- Then third\
  \ line contains the integers L1, La, Lc, Lm, D1, Da, Dc, and Dm\n\n-----Output-----\n\
  Output two space separated integers:\n\n- The sum of qualities of the dishes.\n\
  - The product of qualities of the dishes modulo 109+7.\n\n-----Constraints-----\n\
  - 1 ≤ N, Q ≤ 107\n- 1 ≤ K ≤ N\n- 0 ≤ a, b, c, d, e, f, r, s, t, m, A[1] ≤ 109+7\n\
  - 1 ≤ Lm ≤ N - K + 1\n- 1 ≤ Dm ≤ K + 1\n- 1 ≤ La, Lc ≤ Lm\n- 1 ≤ Da, Dc ≤ Dm\n-\
  \ 1 ≤ L1 ≤ N\n- 1 ≤ D1 ≤ K\n\n-----Sub tasks-----\n- Subtask #1: 1 ≤ N, Q ≤ 1000\
  \ (10 points)\n- Subtask #2: 1 ≤ Q ≤ 104 (20 points)\n- Subtask #3: original constraints\
  \ (70 points)\n\n-----Example-----\nInput:\n4 2 1\n1 1 1 1 1 1 1 1 1 100 1 \n1 1\
  \ 1 3 1 1 1 2\n\nOutput:\n13 13\n\n-----Explanation-----\n- The array A comes out\
  \ to be {1, 3, 13, 83} and the first dish has L = 3 and R = 4. The minimum in this\
  \ range is 13, thus the sum and product both are 13 and hence the answer.\n\n-----Note-----\n\
  Multiplier for C# and Java have been reduced to 1.5 instead of 2."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_dishes (n k q : Nat) (array_params : Nat × Nat × Nat\
  \ × Nat × Nat × Nat × Nat × Nat × Nat × Nat × Nat)\n  (range_params : Nat × Nat\
  \ × Nat × Nat × Nat × Nat × Nat × Nat) : Nat × Nat := sorry\n"
"vc-theorems": "theorem solve_dishes_output_is_pair (n k q : Nat) \n  (array_params\
  \ : Nat × Nat × Nat × Nat × Nat × Nat × Nat × Nat × Nat × Nat × Nat)\n  (range_params\
  \ : Nat × Nat × Nat × Nat × Nat × Nat × Nat × Nat) :\n  ∃ (x y : Nat), solve_dishes\
  \ n k q array_params range_params = (x, y) := sorry\n\n\ntheorem solve_dishes_first_nonneg\
  \ (n k q : Nat)\n  (array_params : Nat × Nat × Nat × Nat × Nat × Nat × Nat × Nat\
  \ × Nat × Nat × Nat) \n  (range_params : Nat × Nat × Nat × Nat × Nat × Nat × Nat\
  \ × Nat) :\n  (solve_dishes n k q array_params range_params).1 ≥ 0 := sorry\n\n\n\
  theorem solve_dishes_second_bounded (n k q : Nat)\n  (array_params : Nat × Nat ×\
  \ Nat × Nat × Nat × Nat × Nat × Nat × Nat × Nat × Nat)\n  (range_params : Nat ×\
  \ Nat × Nat × Nat × Nat × Nat × Nat × Nat) :\n  (solve_dishes n k q array_params\
  \ range_params).2 < 10^9 + 7 := sorry\n\n\ntheorem solve_dishes_second_nonneg (n\
  \ k q : Nat)\n  (array_params : Nat × Nat × Nat × Nat × Nat × Nat × Nat × Nat ×\
  \ Nat × Nat × Nat)\n  (range_params : Nat × Nat × Nat × Nat × Nat × Nat × Nat ×\
  \ Nat) :\n  (solve_dishes n k q array_params range_params).2 ≥ 0 := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
