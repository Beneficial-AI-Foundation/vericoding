"vc-description": "\tDevuLand is a very strange place. There are n villages in it.\
  \ Some of the villages are occupied by dinosaurs while the remaining ones by villagers.\n\
  \tYou are given the information of DevuLand \n\tby an array D of size n. If D[i]\
  \ is non-negative, it means that there are D[i] villagers in that village. \n\t\
  Otherwise, it means that are -D[i] \n\tdinosaurs in that village.\n\n\tIt is also\
  \ guaranteed that total number of villagers in DevuLand is equal to total number\
  \ of dinosaurs.\n\nOnce dinosaurs got very hungry and started eating villagers.\
  \ Frightened villagers gathered immediately and met their Sarpanch Deviji. Deviji,\
  \ being a very daring and negotiable person, met to the head\nof dinosaurs. Soon\
  \ both parties called a truce. It was decided that the villagers will provide laddus\
  \ to \nthe dinosaurs. So everyday, each villager will take exactly one laddu to\
  \ one of the dinosaurs in such a way that no dinosaur remains hungry (note that\
  \ this is possible because number of villagers is the same as the number of dinosaurs).\n\
  \nActually, carrying laddus is a quite a tough job. Villagers have to use a bullock\
  \ cart for that. It takes one unit of grass a bullock to \ncarry a cart with 1 laddu\
  \ for 1 kilometre. Laddus used to be very heavy in DevuLand, so a bullock cart can\
  \ not carry more than one laddu.\n\nIt is also given distance between village indexed\
  \ i and j is |j - i| (the absolute value) kilometres.\n\nNow villagers sat down\
  \ and found a strategy to feed laddus to dinosaurs so that they need to buy the\
  \ least amount of grass from the nearby market. \nThey are not very good in \ncalculations,\
  \ please find out what is the minimum number of units of grass they need to buy.\n\
  \n-----Input-----\n\nFirst line of the input contains an integer T denoting number\
  \ of test cases.\n\nFor each test case, there are two lines. \n\nFirst line contains\
  \ a single integer denoting n: number of villages. \n\nSecond line contains n space\
  \ separated integers denoting the array D.\n\n-----Output-----\n\nFor each test\
  \ case, print a single line containing the integer corresponding to answer of the\
  \ problem.\n\n-----Constraints-----\n\n-  1 ≤ T ≤ 10^5 \n-  1 ≤ n ≤ 10^5 \n-  -10^4\
  \ ≤ D[i] ≤ 10^4 \n-  Sum of n over all the test cases will be ≤ 10^6 \n-  It is\
  \ guaranteed that sum of D[i] is zero for a single test case which ensures that\
  \ there are equal number of villagers and dinosaurs. \n\n-----Example-----\nInput:\n\
  3\n2\n5 -5\n2\n-5 5\n3\n1 2 -3\nOutput:\n5\n5\n4\n\n-----Explanation-----\nExample\
  \ case 1. Each villager in village 1, need to walk 1 km to reach to the dinosaur\
  \ in 2nd village.\nExample case 2. Each villager in village 2, need to walk 1 km\
  \ to reach to the dinosaur 1st village.\nExample case 3. Each villager in village\
  \ 1, need to walk 2 km to reach to the dinosaur in 3rd village whereas Each villager\
  \ in village 2, \nneed to walk 1 km to reach to the dinosaur in 3rd village."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sum (l : List Int) : Int := sorry\n\ndef min_grass_needed (arr\
  \ : List Int) : Nat := sorry\n"
"vc-theorems": "theorem min_grass_needed_non_negative (arr : List Int) (h : arr ≠\
  \ []) : \n  min_grass_needed arr ≥ 0 := sorry\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n\
  #eval min_grass_needed [5, -5]\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval min_grass_needed\
  \ [-5, 5]\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval min_grass_needed [1, 2, -3]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
