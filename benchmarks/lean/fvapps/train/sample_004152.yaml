"vc-description": "We define the \"unfairness\" of a list/array as the *minimal* difference\
  \ between max(x1,x2,...xk) and min(x1,x2,...xk), for all possible combinations of\
  \ k elements you can take from the list/array; both minimum and maximum of an empty\
  \ list/array are considered to be 0.\n\n**More info and constraints:**\n\n* lists/arrays\
  \ can contain values repeated more than once, plus there are usually more combinations\
  \ that generate the required minimum;\n* the list/array's length can be any value\
  \ from 0 to 10^(6);\n* the value of k will range from 0 to the length of the list/array,\n\
  * the minimum unfairness of an array/list with less than 2 elements is 0.\n\nFor\
  \ example:\n\n```python\nmin_unfairness([30,100,1000,150,60,250,10,120,20],3)==20\
  \ #from max(30,10,20)-min(30,10,20)==20, minimum unfairness in this sample\nmin_unfairness([30,100,1000,150,60,250,10,120,20],5)==90\
  \ #from max(30,100,60,10,20)-min(30,100,60,10,20)==90, minimum unfairness in this\
  \ sample\nmin_unfairness([1,1,1,1,1,1,1,1,1,2,2,2,2,2,2],10)==1 #from max(1,1,1,1,1,1,1,1,1,2)-min(1,1,1,1,1,1,1,1,1,2)==1,\
  \ minimum unfairness in this sample\nmin_unfairness([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],10)==0\
  \ #from max(1,1,1,1,1,1,1,1,1,1)-min(1,1,1,1,1,1,1,1,1,1)==0, minimum unfairness\
  \ in this sample\nmin_unfairness([1,1,-1],2)==0 #from max(1,1)-min(1,1)==0, minimum\
  \ unfairness in this sample\n```\n\n**Note:** shamelessly taken from [here](https://www.hackerrank.com/challenges/angry-children),\
  \ where it was created and debatably categorized and ranked."
"vc-preamble": "import Imports.AllImports\n\ndef min_unfairness (arr : List Int) (k\
  \ : Nat) : Int :=\n  sorry\n\n\ndef listMax (xs : List Int) : Int :=\n  sorry\n\n\
  \ndef listMin (xs : List Int) : Int :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sortList (xs : List Int) : List Int :=\n  sorry\n"
"vc-theorems": "theorem min_unfairness_non_negative {arr : List Int} {k : Nat} \n\
  \  (h : arr.length > 0) (h2 : k > 0) (h3 : k ≤ arr.length) : \n  min_unfairness\
  \ arr k ≥ 0 :=\nsorry\n\n\ntheorem min_unfairness_k_one {arr : List Int} \n  (h\
  \ : arr.length > 0) :\n  min_unfairness arr 1 = 0 :=\nsorry\n\n\ntheorem min_unfairness_max_difference\
  \ {arr : List Int} {k : Nat}\n  (h1 : arr.length > 1) (h2 : k > 0) (h3 : k ≤ arr.length)\
  \ :\n  min_unfairness arr k ≤ listMax arr - listMin arr :=\nsorry\n\n\ntheorem min_unfairness_sort_invariant\
  \ {arr : List Int} {k : Nat}\n  (h1 : k > 1) (h2 : arr.length ≥ k) :\n  min_unfairness\
  \ arr k = min_unfairness (sortList arr) k :=\nsorry\n\n/--\ninfo: 20\n-/\n#guard_msgs\
  \ in\n#eval min_unfairness [30, 100, 1000, 150, 60, 250, 10, 120, 20] 3\n\n/--\n\
  info: 1\n-/\n#guard_msgs in\n#eval min_unfairness [1, 1, 1, 1, 1, 1, 1, 1, 1, 2,\
  \ 2, 2, 2, 2, 2] 10\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval min_unfairness []\
  \ 0\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
