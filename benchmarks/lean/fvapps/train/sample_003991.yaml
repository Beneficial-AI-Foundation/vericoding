"vc-description": "You have a two-dimensional list in the following format:\n\n```python\n\
  data = [[2, 5], [3, 4], [8, 7]]\n```\n\nEach sub-list contains two items, and each\
  \ item in the sub-lists is an integer.\n\nWrite a function `process_data()` that\
  \ processes each sub-list like so:\n\n * `[2, 5]` --> `2 - 5` --> `-3`\n * `[3,\
  \ 4]` --> `3 - 4` --> `-1`\n * `[8, 7]` --> `8 - 7` --> `1`\n \nand then returns\
  \ the product of all the processed sub-lists: `-3 * -1 * 1` --> `3`.\n\nFor input,\
  \ you can trust that neither the main list nor the sublists will be empty."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def process_data : List (List Int) → Int := sorry\n\ntheorem process_data_permutation_invariant\
  \ (data : List (List Int)) \n  (h : ∀ l ∈ data, l.length = 2 ∧ l[0]! ≠ l[1]!) :\n\
  \  process_data data = process_data (data.reverse) := sorry\n"
"vc-theorems": "theorem process_data_positive_output \n  (data : List (List Int))\n\
  \  (h1 : ∀ l ∈ data, l.length = 2)\n  (h2 : ∀ l ∈ data, 1 ≤ l[0]! ∧ l[0]! ≤ 100)\n\
  \  (h3 : ∀ l ∈ data, 0 ≤ l[1]! ∧ l[1]! ≤ 99)\n  (h4 : ∀ l ∈ data, l[0]! > l[1]!)\n\
  \  (h5 : data ≠ []) :\n  process_data data > 0 := sorry\n\n/--\ninfo: 3\n-/\n#guard_msgs\
  \ in\n#eval process_data [[2, 5], [3, 4], [8, 7]]\n\n/--\ninfo: 28\n-/\n#guard_msgs\
  \ in\n#eval process_data [[2, 9], [2, 4], [7, 5]]\n\n/--\ninfo: 2\n-/\n#guard_msgs\
  \ in\n#eval process_data [[5, 4], [6, 4]]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
