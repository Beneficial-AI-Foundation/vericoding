"vc-description": "#Detail\n\n[Countdown](https://en.wikipedia.org/wiki/Countdown_(game_show)\
  \ is a British game show with number and word puzzles. The letters round consists\
  \ of the contestant picking 9 shuffled letters - either picking from the vowel pile\
  \ or the consonant pile. The contestants are given 30 seconds to try to come up\
  \ with the longest English word they can think of with the available letters - letters\
  \ can not be used more than once unless there is another of the same character.\n\
  \n#Task\n\nGiven an uppercase 9 letter string, ```letters```, find the longest word\
  \ that can be made with some or all of the letters. The preloaded array ```words```\
  \ (or ```$words``` in Ruby) contains a bunch of uppercase words that you will have\
  \ to loop through. Only return the longest word; if there is more than one, return\
  \ the words of the same lengths in alphabetical order. If there are no words that\
  \ can be made from the letters given, return ```None/nil/null```.\n\n##Examples\n\
  \n```\nletters = \"ZZZZZZZZZ\"\nlongest word = None\n\nletters = \"POVMERKIA\",\
  \ \nlongest word = [\"VAMPIRE\"]\n\nletters = \"DVAVPALEM\"\nlongest word = [\"\
  VAMPED\", \"VALVED\", \"PALMED\"]\n\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def longest_word (input : String) : Option (List String) := sorry\n\
  \ntheorem longest_word_valid_format \n  (letters : String)\n  (h : (longest_word\
  \ letters).isSome) :\n  let result := Option.get! (longest_word letters)\n  ∀ w₁\
  \ ∈ result, ∀ w₂ ∈ result,\n    w₁.length = w₂.length ∧ \n    result.length > 0\
  \ :=\nsorry\n"
"vc-theorems": "theorem longest_word_letter_constraints\n  (letters : String)\n  (h\
  \ : (longest_word letters).isSome) :\n  let result := Option.get! (longest_word\
  \ letters)\n  ∀ word ∈ result,\n  ∀ c, c ∈ word.data →  \n  (word.data.count c)\
  \ ≤ (letters.data.count c) :=\nsorry\n\n\ntheorem longest_word_edge_cases :\n  longest_word\
  \ \"\" = none ∧\n  longest_word \"123\" = none :=\nsorry\n\n\ntheorem longest_word_maximal\n\
  \  (letters : String)\n  (h : (longest_word letters).isSome)\n  (testWord : String)\n\
  \  (hValidWord : ∀ c, c ∈ testWord.data → (testWord.data.count c) ≤ (letters.data.count\
  \ c)) :\n  testWord.length ≤ (Option.get! (longest_word letters)).head!.length :=\n\
  sorry\n\n/--\ninfo: None\n-/\n#guard_msgs in\n#eval longest_word \"\"\n\n/--\ninfo:\
  \ None\n-/\n#guard_msgs in\n#eval longest_word \"MKMKMKMKM\"\n\n/--\ninfo: ['PALMED',\
  \ 'VALVED', 'VAMPED']\n-/\n#guard_msgs in\n#eval longest_word \"DVAVPALEM\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
