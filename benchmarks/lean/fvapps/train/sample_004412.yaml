"vc-description": "Lucy loves to travel. Luckily she is a renowned computer scientist\
  \ and gets to travel to international conferences using her department's budget.\n\
  \nEach year, Society for Exciting Computer Science Research (SECSR) organizes several\
  \ conferences around the world. Lucy always picks one conference from that list\
  \ that is hosted in a city she hasn't been to before, and if that leaves her with\
  \ more than one option, she picks the conference that she thinks would be most relevant\
  \ for her field of research.\n\nWrite a function `conferencePicker` that takes in\
  \ two arguments:\n\n- `citiesVisited`, a list of cities that Lucy has visited before,\
  \ given as an array of strings.\n- `citiesOffered`, a list of cities that will host\
  \ SECSR conferences this year, given as an array of strings. `citiesOffered` will\
  \ already be ordered in terms of the relevance of the conferences for Lucy's research\
  \ (from the most to the least relevant).\n\nThe function should return the city\
  \ that Lucy should visit, as a string.\n\nAlso note:\n\n- You should allow for the\
  \ possibility that Lucy hasn't visited any city before.\n- SECSR organizes at least\
  \ two conferences each year.\n- If all of the offered conferences are hosted in\
  \ cities that Lucy has visited before, the function should return `'No worthwhile\
  \ conferences this year!'` (`Nothing` in Haskell)\n\nExample:"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def conference_picker (visited offered : List String) : String\
  \ := sorry\n\n-- if result is not \"No worthwhile conferences this year!\", then:\n\
  -- 1. result must be in offered cities\n-- 2. result must not be in visited cities\n\
  -- else all offered cities must be in visited cities"
"vc-theorems": "theorem result_validity (visited offered : List String) :\n  let result\
  \ := conference_picker visited offered\n  match result with\n  | \"No worthwhile\
  \ conferences this year!\" => ∀ city, city ∈ offered → city ∈ visited\n  | other\
  \ => other ∈ offered ∧ other ∉ visited\n  := sorry\n\n-- if all cities in offered\
  \ list are also in visited list, result is \"No worthwhile conferences this year!\"\
  \n\ntheorem all_cities_visited_returns_no_conferences (cities : List String) : \n\
  \  conference_picker cities cities = \"No worthwhile conferences this year!\" :=\
  \ sorry\n\n-- if there is exactly one new city offered that hasn't been visited,\n\
  -- that city will be returned\n\ntheorem single_new_city_is_returned (visited :\
  \ List String) (new_city : String)\n  (h : new_city ∉ visited) :\n  conference_picker\
  \ visited [new_city] = new_city := sorry\n\n/--\ninfo: 'Philadelphia'\n-/\n#guard_msgs\
  \ in\n#eval conference_picker [] [\"Philadelphia\", \"Osaka\", \"Tokyo\", \"Melbourne\"\
  ]\n\n/--\ninfo: 'No worthwhile conferences this year!'\n-/\n#guard_msgs in\n#eval\
  \ conference_picker [\"Rome\"] [\"Rome\"]\n\n/--\ninfo: 'London'\n-/\n#guard_msgs\
  \ in\n#eval conference_picker [\"Milan\"] [\"London\"]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
