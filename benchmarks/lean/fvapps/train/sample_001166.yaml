"vc-description": "Chef is the new king of the country Chefland. As first and most\
  \ important responsibility he wants to reconstruct the road system of Chefland.\
  \ There are N (1 to N) cities in the country and each city i has a population Pi.\
  \ Chef wants to build some bi-directional roads connecting different cities such\
  \ that each city is connected to every other city (by a direct road or through some\
  \ other intermediate city) and starting from any city one can visit every other\
  \ city in the country through these roads. Cost of building a road between two cities\
  \ u and v is Pu x Pv. Cost to build the road system is the sum of cost of every\
  \ individual road that would be built. \nHelp king Chef to find the minimum cost\
  \ to build the new road system in Chefland such that every city is connected to\
  \ each other.\n\n-----Input-----\nThe first line of the input contains an integer\
  \ T denoting the number of test cases. The description of T test cases follows.\
  \ \nFirst line contains an integer N denoting the number of cities in the country.\
  \ Second line contains N space separated integers Pi, the population of i-th city.\n\
  \n-----Output-----\nFor each test case, print a single integer, the minimum cost\
  \ to build the new road system on separate line.\n\n-----Constraints-----\n- 1 ≤\
  \ T ≤ 10\n- 1 ≤ N ≤ 105\n- 1 ≤ Pi ≤ 106\n\n-----Example-----\nInput:\n2\n2\n5 10\n\
  4\n15 10 7 13\n\nOutput:\n50\n266"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def min_road_cost (n : Nat) (populations : List Nat) : Nat :=\n\
  \  sorry\n"
"vc-theorems": "theorem min_road_cost_non_negative \n  {n : Nat} {populations : List\
  \ Nat}\n  (h1 : n = populations.length)\n  (h2 : n ≥ 2)\n  (h3 : ∀ x ∈ populations,\
  \ 1 ≤ x ∧ x ≤ 1000) :\n  min_road_cost n populations ≥ 0 :=\nsorry\n\n\ntheorem\
  \ min_road_cost_symmetric\n  {n : Nat} {populations : List Nat}\n  (h1 : n = populations.length)\n\
  \  (h2 : n ≥ 2)\n  (h3 : ∀ x ∈ populations, 1 ≤ x ∧ x ≤ 1000) :\n  min_road_cost\
  \ n populations = min_road_cost n populations.reverse :=\nsorry\n\n\ntheorem min_road_cost_formula\n\
  \  {n : Nat} {populations : List Nat}\n  (h1 : n = populations.length)\n  (h2 :\
  \ n ≥ 2)\n  (h3 : ∀ x ∈ populations, 1 ≤ x ∧ x ≤ 1000)\n  (min max : Nat)\n  (hmin\
  \ : min ∈ populations)\n  (hmax : max ∈ populations)\n  (hmin_least : ∀ x ∈ populations,\
  \ min ≤ x)\n  (hmax_most : ∀ x ∈ populations, x ≤ max) :\n  let total := populations.foldl\
  \ (· + ·) 0\n  min_road_cost n populations ≤ min * (total - min) ∧\n  min_road_cost\
  \ n populations ≤ max * (total - max) :=\nsorry\n\n/--\ninfo: 50\n-/\n#guard_msgs\
  \ in\n#eval min_road_cost 2 [5, 10]\n\n/--\ninfo: 266\n-/\n#guard_msgs in\n#eval\
  \ min_road_cost 4 [15, 10, 7, 13]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
