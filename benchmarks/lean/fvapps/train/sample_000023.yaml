"vc-description": "The only difference between easy and hard versions is constraints.\n\
  \nNow elections are held in Berland and you want to win them. More precisely, you\
  \ want everyone to vote for you.\n\nThere are $n$ voters, and two ways to convince\
  \ each of them to vote for you. The first way to convince the $i$-th voter is to\
  \ pay him $p_i$ coins. The second way is to make $m_i$ other voters vote for you,\
  \ and the $i$-th voter will vote for free.\n\nMoreover, the process of such voting\
  \ takes place in several steps. For example, if there are five voters with $m_1\
  \ = 1$, $m_2 = 2$, $m_3 = 2$, $m_4 = 4$, $m_5 = 5$, then you can buy the vote of\
  \ the fifth voter, and eventually everyone will vote for you. Set of people voting\
  \ for you will change as follows: ${5} \\rightarrow {1, 5} \\rightarrow {1, 2, 3,\
  \ 5} \\rightarrow {1, 2, 3, 4, 5}$.\n\nCalculate the minimum number of coins you\
  \ have to spend so that everyone votes for you.\n\n\n-----Input-----\n\nThe first\
  \ line contains one integer $t$ ($1 \\le t \\le 5000$) — the number of test cases.\n\
  \nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 5000$)\
  \ — the number of voters.\n\nThe next $n$ lines contains the description of voters.\
  \ $i$-th line contains two integers $m_i$ and $p_i$ ($1 \\le p_i \\le 10^9, 0 \\\
  le m_i < n$).\n\nIt is guaranteed that the sum of all $n$ over all test cases does\
  \ not exceed $5000$.\n\n\n-----Output-----\n\nFor each test case print one integer\
  \ — the minimum number of coins you have to spend so that everyone votes for you.\n\
  \n\n-----Example-----\nInput\n3\n3\n1 5\n2 10\n2 8\n7\n0 1\n3 1\n1 1\n6 1\n1 1\n\
  4 1\n4 1\n6\n2 6\n2 3\n2 8\n2 7\n4 4\n5 5\n\nOutput\n8\n0\n7\n\n\n\n-----Note-----\n\
  \nIn the first test case you have to buy vote of the third voter. Then the set of\
  \ people voting for you will change as follows: ${3} \\rightarrow {1, 3} \\rightarrow\
  \ {1, 2, 3}$.\n\nIn the second example you don't need to buy votes. The set of people\
  \ voting for you will change as follows: ${1} \\rightarrow {1, 3, 5} \\rightarrow\
  \ {1, 2, 3, 5} \\rightarrow {1, 2, 3, 5, 6, 7} \\rightarrow {1, 2, 3, 4, 5, 6, 7}$.\n\
  \nIn the third test case you have to buy votes of the second and the fifth voters.\
  \ Then the set of people voting for you will change as follows: ${2, 5} \\rightarrow\
  \ {1, 2, 3, 4, 5} \\rightarrow {1, 2, 3, 4, 5, 6}$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_elections (n : Nat) (voters : List (Nat × Nat)) : Nat\
  \ :=\n  sorry\n"
"vc-theorems": "theorem solve_elections_nonnegative (n : Nat) (voters : List (Nat\
  \ × Nat)) :\n  solve_elections n voters ≥ 0 :=\nsorry\n\n\ntheorem solve_elections_upper_bound\
  \ (n : Nat) (voters : List (Nat × Nat)) :\n  solve_elections n voters ≤ List.foldl\
  \ (λ acc (pair : Nat × Nat) => acc + pair.2) 0 voters :=\nsorry\n\n\ntheorem solve_elections_zero_votes\
  \ (n : Nat) (voters : List (Nat × Nat)) :\n  (List.all voters (λ pair => pair.1\
  \ = 0)) →\n  solve_elections n voters = 0 :=\nsorry\n\n\ntheorem solve_elections_single_zero_vote\
  \ :\n  solve_elections 1 [(0, 5)] = 0 :=\nsorry\n\n/--\ninfo: 8\n-/\n#guard_msgs\
  \ in\n#eval solve_elections 3 [(1, 5), (2, 10), (2, 8)]\n\n/--\ninfo: 0\n-/\n#guard_msgs\
  \ in\n#eval solve_elections 7 [(0, 1), (3, 1), (1, 1), (6, 1), (1, 1), (4, 1), (4,\
  \ 1)]\n\n/--\ninfo: 7\n-/\n#guard_msgs in\n#eval solve_elections 6 [(2, 6), (2,\
  \ 3), (2, 8), (2, 7), (4, 4), (5, 5)]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
