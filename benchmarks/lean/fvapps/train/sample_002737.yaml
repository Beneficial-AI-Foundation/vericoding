"vc-description": "You are standing on top of an amazing Himalayan mountain. The view\
  \ is absolutely breathtaking! you want to take a picture on your phone, but... your\
  \ memory is full again! ok, time to sort through your shuffled photos and make some\
  \ space...\n\nGiven a gallery of photos, write a function to sort through your pictures.\n\
  You get a random hard disk drive full of pics, you must return an array with the\
  \ 5 most recent ones PLUS the next one (same year and number following the one of\
  \ the last).\n\nYou will always get at least a photo and all pics will be in the\
  \ format `YYYY.imgN`\n\nExamples:\n```python\nsort_photos[\"2016.img1\",\"2016.img2\"\
  ,\"2015.img3\",\"2016.img4\",\"2013.img5\"]) ==[\"2013.img5\",\"2015.img3\",\"2016.img1\"\
  ,\"2016.img2\",\"2016.img4\",\"2016.img5\"]\nsort_photos[\"2016.img1\"]) ==[\"2016.img1\"\
  ,\"2016.img2\"]\n```"
"vc-preamble": "import Imports.AllImports\n\ndef Photo := String \ndef Year := Nat\n\
  \ndef ImgNum := Nat\n\ninstance : Inhabited Photo := ⟨\"\"⟩\ninstance : LT Year\
  \ := ⟨Nat.lt⟩\ninstance : LT ImgNum := ⟨Nat.lt⟩\ninstance : HAdd ImgNum Nat ImgNum\
  \ := ⟨Nat.add⟩\ninstance : LT (Year × ImgNum) := ⟨λ a b => a.1 < b.1 ∨ (a.1 = b.1\
  \ ∧ a.2 < b.2)⟩\n\n\ndef sort_photos (photos : List Photo) : List Photo :=\n  sorry\n\
  \n-- Helper function to parse year from photo string\n\ndef parse_year (photo :\
  \ Photo) : Year := \n  sorry\n\n-- Helper function to parse image number from photo\
  \ string"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def parse_imgnum (photo : Photo) : ImgNum :=\n  sorry\n"
"vc-theorems": "theorem sort_photos_length (photos : List Photo) : \n  photos ≠ []\
  \ → \n  photos.length > 0 →\n  let result := sort_photos photos\n  result.length\
  \ = min photos.length 5 + 1 := by\n  sorry\n\n\ntheorem sort_photos_contains_originals\
  \ (photos : List Photo) :\n  photos ≠ [] →\n  let result := sort_photos photos\n\
  \  ∀ i, i < result.length - 1 → result[i]! ∈ photos := by\n  sorry\n\n\ntheorem\
  \ sort_photos_sorted (photos : List Photo) :\n  photos ≠ [] →\n  let result := sort_photos\
  \ photos\n  ∀ i j, i < j → j < result.length - 1 →\n    (parse_year result[i]!,\
  \ parse_imgnum result[i]!) < \n    (parse_year result[j]!, parse_imgnum result[j]!)\
  \ := by\n  sorry\n\n\ntheorem sort_photos_last_increments (photos : List Photo)\
  \ :\n  photos ≠ [] →\n  let result := sort_photos photos\n  parse_year result[result.length-1]!\
  \ = parse_year result[result.length-2]! ∧\n  parse_imgnum result[result.length-1]!\
  \ = parse_imgnum result[result.length-2]! + 1 := by\n  sorry\n\n\ntheorem sort_photos_format_valid\
  \ (photos : List Photo) :\n  photos ≠ [] →\n  let result := sort_photos photos\n\
  \  ∀ p ∈ result, ∃ y n : Nat, \n    y ≥ 1000 ∧ y ≤ 9999 ∧ -- Year between 1000-9999\n\
  \    n > 0 ∧ -- Positive image number\n    parse_year p = y ∧\n    parse_imgnum\
  \ p = n := by\n  sorry\n\n/--\ninfo: expected1\n-/\n#guard_msgs in\n#eval sort_photos\
  \ [\"2016.img1\", \"2016.img2\", \"2015.img3\", \"2016.img4\", \"2013.img5\"]\n\n\
  /--\ninfo: expected2\n-/\n#guard_msgs in\n#eval sort_photos [\"2016.img1\"]\n\n\
  /--\ninfo: expected3\n-/\n#guard_msgs in\n#eval sort_photos [\"2016.img4\", \"2016.img5\"\
  , \"2016.img1\", \"2016.img3\", \"2016.img2\"]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
