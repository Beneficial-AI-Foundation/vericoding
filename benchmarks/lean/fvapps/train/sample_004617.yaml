"vc-description": "# Find the gatecrashers on CocoBongo parties\n\nCocoBongo is a\
  \ club with very nice parties. However, you only can get inside if you know at least\
  \ one other guest. Unfortunately, some gatecrashers can appear at those parties.\
  \ The gatecrashers do not know any other party member and should not be at our amazing\
  \ party!\n\nWe will give to you a collection with all party members and a collection\
  \ with some guests and their invitations. Your mission is to find out those gatecrashers\
  \ and give us a sorted array of them.\n\nNote that invitations are undirectional\
  \ relations, so if guest `A` invites `B`, we can consider that `B` also knows `A`.\
  \ Once the relation `(A, {B})` appears on the invitations collection, the reverse\
  \ relation `(B, {A})` may or may not appear in the input. You need to take care\
  \ of that.\n\n## Example\n\n```python\nparty_members = [0,1,2,3,4]\ninvitations\
  \ = [ (0, [1,2]), (2, [3]) ]\ngatecrashers = [4]\n```\n\n## Explanation\n\nWe have\
  \ `invitations = [ (0, [1,2]), (2, [3]) ]`.  \nGuest `0` has invited guests `1`\
  \ and `2`; also, guest `2` has invited guest `3`.\nHowever, noone has invited guest\
  \ `4`, so he is a gatecrasher."
"vc-preamble": "import Imports.AllImports\n\ndef find_gatecrashers (party_members:\
  \ List Int) (invitations: List (Int × List Int)) : List Int :=\n  sorry\n\n\ndef\
  \ is_sorted (l: List Int) : Prop :=\n  ∀ i j, i < j → j < l.length → l.get ⟨i, by\
  \ sorry⟩ ≤ l.get ⟨j, by sorry⟩\n\n\ndef is_subset (l₁ l₂: List Int) : Prop :=\n\
  \  ∀ x, x ∈ l₁ → x ∈ l₂\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def known_guests (invitations: List (Int × List Int)) : List Int\
  \ :=\n  let hosts := invitations.map Prod.fst\n  let guests := (invitations.map\
  \ Prod.snd).join\n  hosts ++ guests\n"
"vc-theorems": "theorem find_gatecrashers_sorted (party_members: List Int) (invitations:\
  \ List (Int × List Int)) :\n  is_sorted (find_gatecrashers party_members invitations)\
  \ :=\n  sorry\n\n\ntheorem find_gatecrashers_subset (party_members: List Int) (invitations:\
  \ List (Int × List Int)) :\n  is_subset (find_gatecrashers party_members invitations)\
  \ party_members :=\n  sorry\n\n\ntheorem find_gatecrashers_not_invited (party_members:\
  \ List Int) (invitations: List (Int × List Int)) :\n  ∀ x ∈ find_gatecrashers party_members\
  \ invitations, x ∉ known_guests invitations :=\n  sorry\n\n\ntheorem find_gatecrashers_complete\
  \ (party_members: List Int) (invitations: List (Int × List Int)) :\n  ∀ x ∈ party_members,\
  \ x ∉ known_guests invitations → x ∈ find_gatecrashers party_members invitations\
  \ :=\n  sorry\n\n\ntheorem find_gatecrashers_empty_invitations (party_members: List\
  \ Int) :\n  is_sorted (find_gatecrashers party_members []) ∧ \n  find_gatecrashers\
  \ party_members [] = party_members :=\n  sorry \n\n\ntheorem find_gatecrashers_empty_party\
  \ (invitations: List (Int × List Int)) :\n  find_gatecrashers [] invitations = []\
  \ :=\n  sorry\n\n/--\ninfo: [4]\n-/\n#guard_msgs in\n#eval find_gatecrashers [0,\
  \ 1, 2, 3, 4] [(0, [1, 2]), (2, [3])]\n\n/--\ninfo: []\n-/\n#guard_msgs in\n#eval\
  \ find_gatecrashers [0, 1, 2] [(0, [1]), (1, [2])]\n\n/--\ninfo: [0, 1, 2, 3]\n\
  -/\n#guard_msgs in\n#eval find_gatecrashers [0, 1, 2, 3] []\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
