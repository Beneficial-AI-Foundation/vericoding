"vc-description": "This is a follow up from my kata The old switcheroo\n\nWrite\n\
  ```python\ndef encode(str)\n```\nthat takes in a string ```str``` and replaces all\
  \ the letters with their respective positions in the English alphabet.\n\n```python\n\
  encode('abc') == '123'   # a is 1st in English alpabet, b is 2nd and c is 3rd\n\
  encode('codewars') == '315452311819'\nencode('abc-#@5') == '123-#@5'\n```\nString\
  \ are case sensitive."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def encode (s : String) : String := sorry\n\ntheorem encode_case_insensitive\
  \ (s : String) : \n  encode s.toUpper = encode s.toLower := sorry\n"
"vc-theorems": "theorem encode_produces_only_digits (s : String) (p : String.Pos)\
  \ :\n  ((encode s).get p).isDigit := sorry\n\n\ntheorem encode_length_consistency\
  \ (s : String) :\n  (encode s).length = s.data.foldl (fun acc c => acc + (toString\
  \ (c.toUpper.toNat - 64)).length) 0 := sorry\n\n\ntheorem encode_single_letter (c\
  \ : Char) :\n  encode (String.mk [c]) = toString (c.toUpper.toNat - 64) := sorry\n\
  \n/--\ninfo: '123'\n-/\n#guard_msgs in\n#eval encode \"abc\"\n\n/--\ninfo: '1234'\n\
  -/\n#guard_msgs in\n#eval encode \"ABCD\"\n\n/--\ninfo: '2626262626'\n-/\n#guard_msgs\
  \ in\n#eval encode \"ZzzzZ\"\n\n/--\ninfo: '123-#@5'\n-/\n#guard_msgs in\n#eval\
  \ encode \"abc-#@5\"\n\n/--\ninfo: '208919 919 1 1215147 1920189147!! 161251195\
  \ [51431545] @30181853201225'\n-/\n#guard_msgs in\n#eval encode \"this is a long\
  \ string!! Please [encode] @C0RrEctly\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
