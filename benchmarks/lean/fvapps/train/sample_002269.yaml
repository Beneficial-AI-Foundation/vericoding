"vc-description": "You are given a garland consisting of $n$ lamps. States of the\
  \ lamps are represented by the string $s$ of length $n$. The $i$-th character of\
  \ the string $s_i$ equals '0' if the $i$-th lamp is turned off or '1' if the $i$-th\
  \ lamp is turned on. You are also given a positive integer $k$.\n\nIn one move,\
  \ you can choose one lamp and change its state (i.e. turn it on if it is turned\
  \ off and vice versa).\n\nThe garland is called $k$-periodic if the distance between\
  \ each pair of adjacent turned on lamps is exactly $k$. Consider the case $k=3$.\
  \ Then garlands \"00010010\", \"1001001\", \"00010\" and \"0\" are good but garlands\
  \ \"00101001\", \"1000001\" and \"01001100\" are not. Note that the garland is not\
  \ cyclic, i.e. the first turned on lamp is not going after the last turned on lamp\
  \ and vice versa.\n\nYour task is to find the minimum number of moves you need to\
  \ make to obtain $k$-periodic garland from the given one.\n\nYou have to answer\
  \ $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input\
  \ contains one integer $t$ ($1 \\le t \\le 25~ 000$) — the number of test cases.\
  \ Then $t$ test cases follow.\n\nThe first line of the test case contains two integers\
  \ $n$ and $k$ ($1 \\le n \\le 10^6; 1 \\le k \\le n$) — the length of $s$ and the\
  \ required period. The second line of the test case contains the string $s$ consisting\
  \ of $n$ characters '0' and '1'.\n\nIt is guaranteed that the sum of $n$ over all\
  \ test cases does not exceed $10^6$ ($\\sum n \\le 10^6$).\n\n\n-----Output-----\n\
  \nFor each test case, print the answer — the minimum number of moves you need to\
  \ make to obtain $k$-periodic garland from the given one.\n\n\n-----Example-----\n\
  Input\n6\n9 2\n010001010\n9 3\n111100000\n7 4\n1111111\n10 3\n1001110101\n1 1\n\
  1\n1 1\n0\n\nOutput\n1\n2\n5\n4\n0\n0"
"vc-preamble": "import Imports.AllImports\n\ndef solve_garland (n k : Nat) (s : String)\
  \ : Nat := sorry\n\ndef is_valid_garland (n k : Nat) (s : String) : Bool := sorry\n\
  \n\ndef count_zeros (s : String) : Nat := sorry \n\ndef all_ones (s : String) :\
  \ Bool := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def all_zeros (s : String) : Bool := sorry\n\ntheorem solve_garland_nonnegative\
  \ (n k : Nat) (s : String) :\n  is_valid_garland n k s →\n  solve_garland n k s\
  \ ≥ 0 := sorry\n"
"vc-theorems": "theorem solve_garland_bounded_by_zeros (n k : Nat) (s : String) :\n\
  \  is_valid_garland n k s →\n  solve_garland n k s ≤ count_zeros s := sorry\n\n\n\
  theorem solve_garland_all_ones (n k : Nat) (s : String) :\n  is_valid_garland n\
  \ k s →\n  all_ones s →\n  solve_garland n k s = 0 := sorry\n\n\ntheorem solve_garland_all_zeros\
  \ (n k : Nat) (s : String) :\n  is_valid_garland n k s →\n  all_zeros s →\n  solve_garland\
  \ n k s ≤ (n + k - 1) / k := sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval solve_garland\
  \ 9 2 \"010001010\"\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval solve_garland 9 3\
  \ \"111100000\"\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval solve_garland 1 1 \"\
  0\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
