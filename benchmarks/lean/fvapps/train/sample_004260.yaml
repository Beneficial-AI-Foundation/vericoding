"vc-description": "Our football team finished the championship.\nThe result of each\
  \ match look like \"x:y\". Results of all matches are recorded in the collection.\n\
  \nFor example:\n```[\"3:1\", \"2:2\", \"0:1\", ...]```\n\nWrite a function that\
  \ takes such collection and counts the points of our team in the championship.\n\
  Rules for counting points for each match:\n- if x>y - 3 points\n- if x<y - 0 point\n\
  - if x=y - 1 point\n\nNotes:\n- there are 10 matches in the championship\n- 0 <=\
  \ x <= 4\n- 0 <= y <= 4"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def points (games : List String) : Nat :=\n  sorry\n\n\n"
"vc-theorems": "theorem points_draws (n : Nat) :\n  let draw_games := List.map (fun\
  \ i => s!\"{i}:{i}\") (List.range n)\n  points draw_games = n :=\n  sorry\n\n\n\
  theorem points_wins (nums : List Nat) :\n  let win_games := List.map (fun n => s!\"\
  {n+1}:{n}\") nums\n  points win_games = nums.length * 3 :=\n  sorry\n\n/--\ninfo:\
  \ 30\n-/\n#guard_msgs in\n#eval points [\"1:0\", \"2:0\", \"3:0\", \"4:0\", \"2:1\"\
  , \"3:1\", \"4:1\", \"3:2\", \"4:2\", \"4:3\"]\n\n/--\ninfo: 10\n-/\n#guard_msgs\
  \ in\n#eval points [\"1:1\", \"2:2\", \"3:3\", \"4:4\", \"2:2\", \"3:3\", \"4:4\"\
  , \"3:3\", \"4:4\", \"4:4\"]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval points [\"\
  0:1\", \"0:2\", \"0:3\", \"0:4\", \"1:2\", \"1:3\", \"1:4\", \"2:3\", \"2:4\", \"\
  3:4\"]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
