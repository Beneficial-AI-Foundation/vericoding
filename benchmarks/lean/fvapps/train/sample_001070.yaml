"vc-description": "A long way back I have taken $5000 from Golu when I used to live\
  \ in Jodhpur. Now, time has passed and I am out of Jodhpur. While Golu still in\
  \ Jodhpur, one day called me and asked about his money.\nI thought of giving Golu\
  \ a chance. I told him that he can still take his money back if he reaches my home\
  \ anyhow just in 2 days but not after that. \nIn excitement he made his way toward\
  \ my hometown i.e. Gorakhpur. To cover up the petrol cost he started giving paid\
  \ lift to whoever needs it throughout the way in order to earn some money. Help\
  \ him to get the maximum profit.\n\nHis car has a capacity of k + 1 person, so in\
  \ a certain moment he can transport k persons (and himself). \nFrom Jodhpur to Gorakhpur,\
  \ there are l localities (cities, towns, villages), Jodhpur being the first and\
  \ Gorakhpur being the lth.\nThere are n groups of lift takers along the road. The\
  \ ith\ngroup consists of pi persons, wants to travel from locality si  to locality\
  \ di and will pay an amount of mi money.\nA group must be taken into the car as\
  \ a whole. Assume that lift takers are found only in localities.\n\nRestrictions\n\
  • 1 ≤ k ≤ 7\n• 1 ≤ l ≤ 1000000\n• 1 ≤ n ≤ 50\n• 1 ≤ pi ≤ k\n• 1 ≤ si ≤ l – 1\n•\
  \ 2 ≤ di ≤ l\n• si < di\n• 1 ≤ mi ≤ 1000000\n\n-----Input-----\nThe first line of\
  \ the input contains the number of test cases.\nThe first line of each test case\
  \ contains the numbers n, l and k separated by a single space.\nn lines follow,\
  \ the ith line containing pi, si, di and mi separated by a single space.\n\n\n-----Output-----\n\
  For each test case output a single line containing the maximum amount of money Golu\
  \ can earn.\n\n-----Example-----\nInput:\n2\n5 5 4\n2 1 5 50\n1 2 4 20\n2 3 4 40\n\
  2 4 5 50\n3 4 5 80\n10 10 5\n2 5 10 17300\n2 1 8 31300\n5 4 10 27600\n4 8 10 7000\n\
  5 9 10 95900\n2 7 10 14000\n3 6 10 63800\n1 7 10 19300\n3 8 10 21400\n2 2 10 7000\n\
  \nOutput:\n140\n127200\n\nBy:\nChintan, Asad, Ashayam, Akanksha"
"vc-preamble": "import Imports.AllImports\n\ndef get_max_earnings (n l k : Nat) (groups\
  \ : List (Nat × Nat × Nat × Nat)) : Nat :=\n  sorry\n\n\ndef hash_state (groups\
  \ : List Group) (i : Nat) : List Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def optimize (groups : List Group) : List Group :=\n  sorry\n"
"vc-theorems": "theorem get_max_earnings_nonnegative (n l k : Nat) (groups : List\
  \ (Nat × Nat × Nat × Nat)) :\n  get_max_earnings n l k groups ≥ 0 :=\nsorry\n\n\n\
  theorem get_max_earnings_bounded (n l k : Nat) (groups : List (Nat × Nat × Nat ×\
  \ Nat)) \n  (h : groups.length > 0) :\n  get_max_earnings n l k groups ≤ groups.foldr\
  \ (fun g acc => g.2.2.2 + acc) 0 :=\nsorry \n\n\ntheorem hash_state_length (groups\
  \ : List Group) (i : Nat) :\n  (hash_state groups i).length = groups.length + 1\
  \ :=\nsorry\n\n\ntheorem hash_state_last_elem (groups : List Group) (i : Nat) \n\
  \  (h : hash_state groups i ≠ []) :\n  (hash_state groups i).getLast h = i :=\n\
  sorry\n\n\ntheorem hash_state_ordered (groups : List Group) (i : Nat) (j : Nat)\
  \ \n  (h : j + 1 < (hash_state groups i).length) :\n  ((hash_state groups i)[j]\
  \ ≤ (hash_state groups i)[j+1]) :=\nsorry\n\n\ntheorem optimize_ordered (groups\
  \ : List Group) (j : Nat)\n  (h : j + 1 < (optimize groups).length) :\n  ((optimize\
  \ groups)[j]).start ≤ ((optimize groups)[j+1]).start :=\nsorry\n\n/--\ninfo: 140\n\
  -/\n#guard_msgs in\n#eval get_max_earnings 5 5 4 [(2, 1, 5, 50), (1, 2, 4, 20),\
  \ (2, 3, 4, 40), (2, 4, 5, 50), (3, 4, 5, 80)]\n\n/--\ninfo: 127200\n-/\n#guard_msgs\
  \ in\n#eval get_max_earnings 10 10 5 [(2, 5, 10, 17300), (2, 1, 8, 31300), (5, 4,\
  \ 10, 27600), (4, 8, 10, 7000), (5, 9, 10, 95900), (2, 7, 10, 14000), (3, 6, 10,\
  \ 63800), (1, 7, 10, 19300), (3, 8, 10, 21400), (2, 2, 10, 7000)]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
