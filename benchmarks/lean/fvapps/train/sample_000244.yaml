"vc-description": "Given a 2D array of characters grid of size m x n, you need to\
  \ find if there exists any cycle consisting of the same value in grid.\nA cycle\
  \ is a path of length 4 or more in the grid that starts and ends at the same cell.\
  \ From a given cell, you can move to one of the cells adjacent to it - in one of\
  \ the four directions (up, down, left, or right), if it has the same value of the\
  \ current cell.\nAlso, you cannot move to the cell that you visited in your last\
  \ move. For example, the cycle (1, 1) -> (1, 2) -> (1, 1) is invalid because from (1,\
  \ 2) we visited (1, 1) which was the last visited cell.\nReturn true if any cycle\
  \ of the same value exists in grid, otherwise, return false.\n \nExample 1:\n\n\
  Input: grid = [[\"a\",\"a\",\"a\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"b\"\
  ,\"b\",\"a\"],[\"a\",\"a\",\"a\",\"a\"]]\nOutput: true\nExplanation: There are two\
  \ valid cycles shown in different colors in the image below:\n\n\nExample 2:\n\n\
  Input: grid = [[\"c\",\"c\",\"c\",\"a\"],[\"c\",\"d\",\"c\",\"c\"],[\"c\",\"c\"\
  ,\"e\",\"c\"],[\"f\",\"c\",\"c\",\"c\"]]\nOutput: true\nExplanation: There is only\
  \ one valid cycle highlighted in the image below:\n\n\nExample 3:\n\nInput: grid\
  \ = [[\"a\",\"b\",\"b\"],[\"b\",\"z\",\"b\"],[\"b\",\"b\",\"a\"]]\nOutput: false\n\
  \n \nConstraints:\n\nm == grid.length\nn == grid[i].length\n1 <= m <= 500\n1 <=\
  \ n <= 500\ngrid consists only of lowercase English letters."
"vc-preamble": "import Imports.AllImports\n\ndef List.rectangular (grid : List (List\
  \ α)) : Bool :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def contains_cycle (grid : List (List Char)) : Bool :=\n  sorry\n"
"vc-theorems": "theorem contains_cycle_empty_raises : ∀ (grid : List (List Char)),\n\
  \  grid = [] ∨ grid.head?.map (λ row => row = []) = some true →\n  contains_cycle\
  \ grid = false :=\n  sorry\n\n\ntheorem contains_cycle_returns_bool : ∀ (grid :\
  \ List (List Char)),\n  grid ≠ [] →\n  grid.head?.map (λ row => row ≠ []) = some\
  \ true →\n  grid.rectangular = true →\n  (contains_cycle grid = true ∨ contains_cycle\
  \ grid = false) :=\n  sorry\n\n\ntheorem contains_cycle_all_same_char : ∀ (c : Char)\
  \ (n : Nat),\n  n > 0 →\n  let grid := List.replicate n (List.replicate n c);\n\
  \  contains_cycle grid = (n > 1) :=\n  sorry\n\n\ntheorem contains_cycle_checkerboard\
  \ : ∀ (n : Nat),\n  n ≥ 2 →\n  let grid := List.map (λ i => List.map (λ j => if\
  \ (i+j)%2 = 0 then 'a' else 'b') (List.range n)) (List.range n);\n  contains_cycle\
  \ grid = false :=\n  sorry\n\n\ntheorem contains_cycle_border : ∀ (n : Nat),\n \
  \ n ≥ 3 →\n  let grid := List.map (λ i => List.map (λ j => \n    if i = 0 ∨ i =\
  \ n-1 ∨ j = 0 ∨ j = n-1 \n    then 'a' \n    else 'b') (List.range n)) (List.range\
  \ n);\n  contains_cycle grid = true :=\n  sorry\n\n/--\ninfo: True\n-/\n#guard_msgs\
  \ in\n#eval contains_cycle [[\"a\", \"a\", \"a\", \"a\"], [\"a\", \"b\", \"b\",\
  \ \"a\"], [\"a\", \"b\", \"b\", \"a\"], [\"a\", \"a\", \"a\", \"a\"]]\n\n/--\ninfo:\
  \ True\n-/\n#guard_msgs in\n#eval contains_cycle [[\"c\", \"c\", \"c\", \"a\"],\
  \ [\"c\", \"d\", \"c\", \"c\"], [\"c\", \"c\", \"e\", \"c\"], [\"f\", \"c\", \"\
  c\", \"c\"]]\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval contains_cycle [[\"\
  a\", \"b\", \"b\"], [\"b\", \"z\", \"b\"], [\"b\", \"b\", \"a\"]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
