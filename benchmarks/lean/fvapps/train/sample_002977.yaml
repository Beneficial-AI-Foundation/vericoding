"vc-description": "# Task\n Let's call `product(x)` the product of x's digits. Given\
  \ an array of integers a, calculate `product(x)` for each x in a, and return the\
  \ number of distinct results you get.\n\n# Example\n\n For `a = [2, 8, 121, 42,\
  \ 222, 23]`, the output should be `3`.\n\n Here are the products of the array's\
  \ elements:\n```\n2: product(2) = 2;\n8: product(8) = 8;\n121: product(121) = 1\
  \ * 2 * 1 = 2;\n42: product(42) = 4 * 2 = 8;\n222: product(222) = 2 * 2 * 2 = 8;\n\
  23: product(23) = 2 * 3 = 6.```\nAs you can see, there are only `3` different products:\
  \ `2, 6 and 8.`\n\n# Input/Output\n\n\n - `[input]` integer array `a`\n\n    Constraints:\n\
  \n    `1 ≤ a.length ≤ 10000,`\n\n    `1 ≤ a[i] ≤ 1000000000.`\n\n\n - `[output]`\
  \ an integer\n\n    The number of different digit products in `a`."
"vc-preamble": "import Imports.AllImports\n\ndef uniqueDigitProducts (nums : List\
  \ Nat) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def List.toSet (l : List α) : List α :=\n  sorry\n"
"vc-theorems": "theorem uniqueDigitProducts_bounds_nat {nums : List Nat} (h : nums.length\
  \ > 0) : \n  1 ≤ uniqueDigitProducts nums ∧ uniqueDigitProducts nums ≤ nums.length\
  \ :=\nsorry\n\n\ntheorem uniqueDigitProducts_single_digits {nums : List Nat} \n\
  \  (h1 : nums.length > 0)\n  (h2 : ∀ n ∈ nums, n ≤ 9) :\n  uniqueDigitProducts nums\
  \ ≤ (List.toSet nums).length :=\nsorry\n\n\ntheorem uniqueDigitProducts_all_zeros\
  \ {nums : List Nat}\n  (h1 : nums.length > 0) \n  (h2 : ∀ n ∈ nums, n = 0) :\n \
  \ uniqueDigitProducts nums = 1 :=\nsorry\n\n\ntheorem uniqueDigitProducts_three_digit_no_zeros\
  \ {nums : List Nat}\n  (h1 : nums.length > 0)\n  (h2 : ∀ n ∈ nums, 100 ≤ n ∧ n ≤\
  \ 999)\n  (h3 : ∀ n ∈ nums, ¬ toString n = \"0\") :\n  uniqueDigitProducts nums\
  \ > 0 :=\nsorry\n\n\ntheorem uniqueDigitProducts_permutation {nums : List Nat}\n\
  \  (h : nums.length > 1) :\n  let n := nums[0]\n  let nums_with_perm := n :: nums\n\
  \  uniqueDigitProducts nums_with_perm ≥ uniqueDigitProducts nums :=\nsorry\n\n/--\n\
  info: 3\n-/\n#guard_msgs in\n#eval unique_digit_products [2, 8, 121, 42, 222, 23]\n\
  \n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval unique_digit_products [239]\n\n/--\ninfo:\
  \ 2\n-/\n#guard_msgs in\n#eval unique_digit_products [100, 101, 111]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
