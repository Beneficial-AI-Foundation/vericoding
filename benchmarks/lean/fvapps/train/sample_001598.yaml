"vc-description": "This kata is  blatantly copied from  inspired by This Kata\nWelcome\n\
  \nthis is the second in the series of the string iterations kata!\n\nHere we go!\n\
  \n---------------------------------------------------------------------------------\n\
  \nWe have a string s\n\nLet's say you start with this: \"String\"\n\nThe first thing\
  \ you do is reverse it: \"gnirtS\"\n\nThen you will take the string from the 1st\
  \ position and reverse it again: \"gStrin\"\n\nThen you will take the string from\
  \ the 2nd position and reverse it again: \"gSnirt\"\n\nThen you will take the string\
  \ from the 3rd position and reverse it again: \"gSntri\"\n\nContinue this pattern\
  \ until you have done every single position, and then you will return the string\
  \ you have created. For this particular string, you would return: \n\"gSntir\"\n\
  \nnow,\n\nThe Task:\n\nIn this kata, we also have a number x\n\ntake that reversal\
  \ function, and apply it to the string x times.\n\n\nreturn the result of the string\
  \ after applying the reversal function to it x times.\n\n    example where s = \"\
  String\" and x = 3:\n\n    after 0 iteration  s = \"String\"\n    after 1 iteration\
  \  s = \"gSntir\"\n    after 2 iterations s = \"rgiStn\"\n    after 3 iterations\
  \ s = \"nrtgSi\"\n    \n    so you would return \"nrtgSi\".\n\n Note \n\nString\
  \ lengths may exceed 2 million\n\n\nx exceeds a billion\n\n\nbe read to optimize\n\
  \n\n\nif this is too hard, go here https://www.codewars.com/kata/string-%3E-n-iterations-%3E-string/java"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def string_func (s : String) (x : Nat) : String := sorry \n\ntheorem\
  \ string_func_length_preserving (s : String) (x : Nat) \n  (h : s.length ≥ 2) :\
  \ \n  (string_func s x).length = s.length := sorry\n"
"vc-theorems": "theorem string_func_permutation (s : String) (x : Nat)\n  (h : s.length\
  \ ≥ 2) :\n  ∃ (perm : List Char), perm.length = s.length ∧ \n  (string_func s x).toList\
  \ = perm ∧\n  ∀ c, c ∈ perm ↔ c ∈ s.toList := sorry\n\n\ntheorem string_func_iteration_consistency\
  \ (s : String) (k : Nat)\n  (h : s.length ≥ 2) :\n  let iter := fun (s : String)\
  \ => string_func s 1\n  Nat.recOn k s (fun _ res => iter res) = string_func s k\
  \ := sorry\n\n\ntheorem string_func_cycle (s : String)\n  (h : s.length ≥ 2) :\n\
  \  ∃ (n m : Nat), n > m ∧ \n  let iter := fun (s : String) => string_func s 1\n\
  \  iter (iter s) = s := sorry\n\n/--\ninfo: 'nrtgSi'\n-/\n#guard_msgs in\n#eval\
  \ string_func \"String\" 3\n\n/--\ninfo: 'iitkIl !e '\n-/\n#guard_msgs in\n#eval\
  \ string_func \"I like it!\" 1234\n\n/--\ninfo: 'fonroisreinrddgdneyscou'\n-/\n\
  #guard_msgs in\n#eval string_func \"codingisfornerdsyounerd\" 10101010\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
