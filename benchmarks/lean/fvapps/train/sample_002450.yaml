"vc-description": "=====Problem Statement=====\nWe have seen that lists are mutable\
  \ (they can be changed), and tuples are immutable (they cannot be changed).\n\n\
  Let's try to understand this with an example.\n\nYou are given an immutable string,\
  \ and you want to make changes to it.\nTask\nRead a given string, change the character\
  \ at a given index and then print the modified string. \n\n=====Example=====\nExample\n\
  >>> string = \"abracadabra\"\n\nYou can access an index by:\n\n>>> print string[5]\n\
  a\n\nWhat if you would like to assign a value?\n\n>>> string[5] = 'k' \nTraceback\
  \ (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError:\
  \ 'str' object does not support item assignment\n\nHow would you approach this?\n\
  \n    One solution is to convert the string to a list and then change the value.\n\
  \nExample\n\n>>> string = \"abracadabra\"\n>>> l = list(string)\n>>> l[5] = 'k'\n\
  >>> string = ''.join(l)\n>>> print string\nabrackdabra\n\n    Another approach is\
  \ to slice the string and join it back.\n\nExample\n\n>>> string = string[:5] +\
  \ \"k\" + string[6:]\n>>> print string\nabrackdabra\n\n=====Input Format=====\n\
  The first line contains a string, S.\nThe next line contains an integer i, denoting\
  \ the index location and a character c separated by a space.\n\n=====Output Format=====\n\
  Using any of the methods explained above, replace the character at index i with\
  \ character c."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def mutate_string (s : String) (pos : Nat) (c : Char) : String\
  \ := sorry\n\n\n\ntheorem mutate_string_char_at_pos\n  {s : String} {pos : Nat}\
  \ {c : Char} (h1 : s.length > 0) (h2 : pos < s.length) :\n  (mutate_string s pos\
  \ c).get (String.Pos.mk pos) = c := sorry\n"
"vc-theorems": "theorem mutate_string_unchanged_before_pos\n  {s : String} {pos :\
  \ Nat} {c : Char} (h1 : s.length > 0) (h2 : pos < s.length) :\n  ∀ i, i < pos →\
  \ (mutate_string s pos c).get (String.Pos.mk i) = s.get (String.Pos.mk i) := sorry\n\
  \n\ntheorem mutate_string_unchanged_after_pos\n  {s : String} {pos : Nat} {c : Char}\
  \ (h1 : s.length > 0) (h2 : pos < s.length) :\n  ∀ i, pos < i → i < s.length → (mutate_string\
  \ s pos c).get (String.Pos.mk i) = s.get (String.Pos.mk i) := sorry\n\n\ntheorem\
  \ mutate_single_char\n  {c : Char} :\n  mutate_string \"a\" 0 c = String.mk [c]\
  \ := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
