"vc-description": "The hamming distance of two equal-length strings is the number\
  \ of positions, in which the two string differ. In other words, the number of character\
  \ substitutions required to transform one string into the other. \n\nFor this first\
  \ Kata, you will write a function ```hamming_distance(a, b)``` with two equal-length\
  \ strings containing only 0s and 1s as parameters. There is no need to test the\
  \ parameters for validity (but you can, if you want).The function's output should\
  \ be the hamming distance of the two strings as an integer.\n\nExample:\n\n```python\n\
  hamming_distance('100101', '101001') == 2\nhamming_distance('1010', '0101') == 4\n\
  ```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def hamming_distance (a b : String) : Nat :=\n  sorry\n"
"vc-theorems": "theorem hamming_distance_nonnegative (a b : String) :\n  hamming_distance\
  \ a b ≥ 0 := \n  sorry\n\n\ntheorem hamming_distance_bounded (a b : String) :\n\
  \  hamming_distance a b ≤ a.length :=\n  sorry\n\n\ntheorem hamming_distance_symmetric\
  \ (a b : String) :\n  hamming_distance a b = hamming_distance b a :=\n  sorry\n\n\
  \ntheorem hamming_distance_identity (a : String) :\n  hamming_distance a a = 0 :=\n\
  \  sorry\n\n\ntheorem hamming_distance_counts_differences (a b : String) (h : a.length\
  \ = b.length) :\n  hamming_distance a b = ((String.toList a).zip (String.toList\
  \ b)).countP (fun (x, y) => x ≠ y) :=\n  sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs\
  \ in\n#eval hamming_distance \"100101\" \"101001\"\n\n/--\ninfo: 4\n-/\n#guard_msgs\
  \ in\n#eval hamming_distance \"1010\" \"0101\"\n\n/--\ninfo: 9\n-/\n#guard_msgs\
  \ in\n#eval hamming_distance \"100101011011010010010\" \"101100010110010110101\"\
  \n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
