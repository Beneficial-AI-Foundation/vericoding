"vc-description": "Imagine that you are given two sticks. You want to end up with\
  \ three sticks of equal length. You are allowed to cut either or both of the sticks\
  \ to accomplish this, and can throw away leftover pieces.\n\nWrite a function, maxlen,\
  \ that takes the lengths of the two sticks (L1 and L2, both positive values), that\
  \ will return the maximum length you can make the three sticks."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def maxlen (s1 s2 : Float) : Float := sorry\n\ntheorem maxlen_upper_bound\
  \ (s1 s2 : Float) \n  (h1 : s1 > 0) (h2 : s2 > 0) : \n  maxlen s1 s2 ≤ max s1 s2\
  \ / 2 := sorry\n"
"vc-theorems": "theorem maxlen_lower_bound (s1 s2 : Float)\n  (h1 : s1 > 0) (h2 :\
  \ s2 > 0) :\n  maxlen s1 s2 ≥ max s1 s2 / 3 := sorry\n\n\ntheorem maxlen_positive\
  \ (s1 s2 : Float)\n  (h1 : s1 > 0) (h2 : s2 > 0) :\n  maxlen s1 s2 > 0 := sorry\n\
  \n\ntheorem maxlen_symmetric (s1 s2 : Float)\n  (h1 : s1 > 0) (h2 : s2 > 0) :\n\
  \  maxlen s1 s2 = maxlen s2 s1 := sorry\n\n\ntheorem maxlen_equal_inputs (x : Float)\n\
  \  (h : x > 0) :\n  maxlen x x = x / 2 := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
