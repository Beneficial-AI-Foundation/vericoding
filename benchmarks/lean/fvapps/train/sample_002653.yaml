"vc-description": "You're familiar with [list slicing](https://docs.python.org/3/library/functions.html#slice)\
  \ in Python and know, for example, that:\n\n```python\n>>> ages = [12, 14, 63, 72,\
  \ 55, 24]\n>>> ages[2:4]\n[63, 72]\n>>> ages[2:]\n[63, 72, 55, 24]\n>>> ages[:3]\n\
  [12, 14, 63]\n```\n\nwrite a function `inverse_slice()` that takes three arguments:\
  \ a list `items`, an integer `a` and an integer `b`. The function should return\
  \ a new list with the slice specified by `items[a:b]` _excluded_. For example:\n\
  \n```python\n>>>inverse_slice([12, 14, 63, 72, 55, 24], 2, 4)\n[12, 14, 55, 24]\n\
  ```\n\nThe input will always be a valid list, `a` and `b` will always be different\
  \ integers equal to or greater than zero, but they _may_ be zero or be larger than\
  \ the length of the list."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def inverse_slice {α : Type} (list : List α) (s : Nat) (e : Nat)\
  \ : List α :=\n  sorry\n"
"vc-theorems": "theorem length_property {α : Type} (lst : List α) (a b : Nat) \n \
  \ (h1 : a ≤ b) (h2 : b ≤ lst.length) :\n  (inverse_slice lst a b).length = lst.length\
  \ - (b - a) :=\n  sorry\n\n\ntheorem preserve_prefix {α : Type} (lst : List α) (a\
  \ b : Nat)\n  (h1 : a ≤ b) (h2 : b ≤ lst.length) :\n  (inverse_slice lst a b).take\
  \ a = lst.take a :=\n  sorry\n\n\ntheorem preserve_suffix {α : Type} (lst : List\
  \ α) (a b : Nat)\n  (h1 : a ≤ b) (h2 : b ≤ lst.length) :\n  (inverse_slice lst a\
  \ b).drop a = lst.drop b :=\n  sorry\n\n\n\n\ntheorem empty_slice {α : Type} (lst\
  \ : List α) (i : Nat) (h : i ≤ lst.length) :\n  inverse_slice lst i i = lst :=\n\
  \  sorry\n\n\ntheorem remove_all {α : Type} (lst : List α) :\n  inverse_slice lst\
  \ 0 lst.length = [] :=\n  sorry\n\n\ntheorem keep_all {α : Type} (lst : List α)\
  \ :\n  inverse_slice lst lst.length lst.length = lst :=\n  sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
