vc-description: |-
  Consider a sequence [a_1, a_2, ... , a_{n}]. Define its prefix product sequence $[ a_{1} \operatorname{mod} n,(a_{1} a_{2}) \operatorname{mod} n, \cdots,(a_{1} a_{2} \cdots a_{n}) \operatorname{mod} n ]$.

  Now given n, find a permutation of [1, 2, ..., n], such that its prefix product sequence is a permutation of [0, 1, ..., n - 1].


  -----Input-----

  The only input line contains an integer n (1 ≤ n ≤ 10^5).


  -----Output-----

  In the first output line, print "YES" if such sequence exists, or print "NO" if no such sequence exists.

  If any solution exists, you should output n more lines. i-th line contains only an integer a_{i}. The elements of the sequence should be different positive integers no larger than n.

  If there are multiple solutions, you are allowed to print any of them.


  -----Examples-----
  Input
  7

  Output
  YES
  1
  4
  3
  6
  5
  2
  7

  Input
  6

  Output
  NO



  -----Note-----

  For the second sample, there are no valid sequences.
vc-preamble: |
  import Imports.AllImports

  def find_permutation_with_prefix_products (n : Nat) : List Nat := sorry

  def is_prime (n : Nat) : Bool := sorry
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def check_prefix_products (result : List Nat) (n : Nat) : Bool := sorry

  def is_valid_permutation (result : List Nat) (n : Nat) : Bool := sorry
vc-theorems: |
  theorem output_properties (n : Nat) (h : n ≥ 2) :
    let result := find_permutation_with_prefix_products n
    result.length > 0 →
      result.length = n ∧ 
      result.head? = some 1 ∧
      result.getLast? = some n ∧
      is_valid_permutation result n ∧
      check_prefix_products result n ∧
      (is_prime n ∨ n = 4) := sorry


  theorem output_properties_empty (n : Nat) (h : n ≥ 2) :
    let result := find_permutation_with_prefix_products n
    result.length = 0 →
      ¬is_prime n ∧ n ≠ 4 := sorry


  theorem prime_numbers_have_solution (n : Nat) (h : is_prime n) :
    let result := find_permutation_with_prefix_products n
    result.length = n ∧
    check_prefix_products result n := sorry


  theorem composite_numbers_have_no_solution (n : Nat) (h1 : n ≥ 6) (h2 : ¬is_prime n) (h3 : n ≠ 4) :
    (find_permutation_with_prefix_products n).length = 0 := sorry


  theorem special_case_four :
    find_permutation_with_prefix_products 4 = [1, 3, 2, 4] ∧
    check_prefix_products [1, 3, 2, 4] 4 := sorry

  /--
  info: list(range(7))
  -/
  #guard_msgs in
  #eval sorted [1]

  /--
  info: 0
  -/
  #guard_msgs in
  #eval len find_permutation_with_prefix_products(6)
vc-postamble: |-
  -- Apps difficulty: competition
  -- Assurance level: unguarded
