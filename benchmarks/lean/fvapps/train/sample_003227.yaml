"vc-description": "Write a function that accepts two square matrices (`N x N` two\
  \ dimensional arrays), and return the sum of the two. Both matrices being passed\
  \ into the function will be of size `N x N` (square), containing only integers.\n\
  \nHow to sum two matrices:\n\nTake each cell `[n][m]` from the first matrix, and\
  \ add it with the same `[n][m]` cell from the second matrix. This will be cell `[n][m]`\
  \ of the solution matrix.\n\nVisualization: \n```\n|1 2 3|     |2 2 1|     |1+2\
  \ 2+2 3+1|     |3 4 4|\n|3 2 1|  +  |3 2 3|  =  |3+3 2+2 1+3|  =  |6 4 4|\n|1 1\
  \ 1|     |1 1 3|     |1+1 1+1 1+3|     |2 2 4|\n```\n\n## Example"
"vc-preamble": "import Imports.AllImports\n\ndef matrixAddition {n : Nat} (A B : Matrix\
  \ Int n) : Matrix Int n :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def zeroMatrix (n : Nat) : Matrix Int n :=\n  sorry\n"
"vc-theorems": "theorem matrixAddition_commutativity {n : Nat} (A B : Matrix Int n)\
  \ :\n  ∀ i j, i < n → j < n →\n    (matrixAddition A B).data[i]!.get! j = (matrixAddition\
  \ B A).data[i]!.get! j := by\n  sorry\n\n\ntheorem matrixAddition_correctness {n\
  \ : Nat} (A B : Matrix Int n) :\n  ∀ i j, i < n → j < n →\n    (matrixAddition A\
  \ B).data[i]!.get! j = A.data[i]!.get! j + B.data[i]!.get! j := by\n  sorry\n\n\n\
  theorem matrixAddition_identity {n : Nat} (A : Matrix Int n) :\n  matrixAddition\
  \ A (zeroMatrix n) = A := by\n  sorry\n\n/--\ninfo: expected1\n-/\n#guard_msgs in\n\
  #eval matrix_addition #[[1, 2, 3], [3, 2, 1], [1, 1, 1]] #[[2, 2, 1], [3, 2, 3],\
  \ [1, 1, 3]]\n\n/--\ninfo: expected2\n-/\n#guard_msgs in\n#eval matrix_addition\
  \ #[[1, 2], [1, 2]] #[[2, 3], [2, 3]]\n\n/--\ninfo: expected3\n-/\n#guard_msgs in\n\
  #eval matrix_addition #[[1]] #[[2]]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
