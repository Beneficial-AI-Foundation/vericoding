"vc-description": "A message containing letters from A-Z is being encoded to numbers\
  \ using the following mapping:\n\n\n'A' -> 1\n'B' -> 2\n...\n'Z' -> 26\n\n\nGiven\
  \ a non-empty string containing only digits, determine the total number of ways\
  \ to decode it.\n\nExample 1:\n\n\nInput: \"12\"\nOutput: 2\nExplanation: It could\
  \ be decoded as \"AB\" (1 2) or \"L\" (12).\n\n\nExample 2:\n\n\nInput: \"226\"\n\
  Output: 3\nExplanation: It could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or\
  \ \"BBF\" (2 2 6)."
"vc-preamble": "import Imports.AllImports\n\ndef is_valid_encoding (s : String) :\
  \ Bool :=\n  sorry\n\n\ndef count_decodings (s : String) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def num_decodings (s : String) : Nat :=\n  sorry\n"
"vc-theorems": "theorem valid_strings (s : String) :\n  is_valid_encoding s → num_decodings\
  \ s = count_decodings s :=\n  sorry\n\n\ntheorem invalid_strings (s : String) :\n\
  \  ¬is_valid_encoding s → num_decodings s = 0 :=\n  sorry\n\n\ntheorem empty_string\
  \ :\n  num_decodings \"\" = 0 :=\n  sorry\n\n\ntheorem starting_zero (s : String)\
  \ :\n  s.length > 0 → s.front = '0' → num_decodings s = 0 :=\n  sorry\n\n\ntheorem\
  \ short_valid_numbers (s : String) :\n  is_valid_encoding s → s.length ≤ 6 → num_decodings\
  \ s = count_decodings s :=\n  sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval num_decodings\
  \ \"12\"\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval num_decodings \"226\"\n\n/--\n\
  info: 0\n-/\n#guard_msgs in\n#eval num_decodings \"06\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
