"vc-description": "### Please also check out other katas in [Domino Tiling series](https://www.codewars.com/collections/5d19554d13dba80026a74ff5)!\n\
  \n---\n\n# Task\n\nA domino is a rectangular block with `2` units wide and `1` unit\
  \ high. A domino can be placed on a grid in two ways: horizontal or vertical.\n\n\
  ```\n## or #\n      #\n```\n\nYou have infinitely many dominoes, and you want to\
  \ fill a board that is `N` units wide and `2` units high:\n\n```\n<---   N   --->\n\
  ###############\n###############\n```\n\nThe task is to find **the number of ways**\
  \ you can fill the given grid with dominoes.\n\n# The Twist\n\nHowever, you can\
  \ quickly find that the answer is exactly the Fibonacci series (and yeah, CW has\
  \ already too many of them), so here is a twist:\n\nNow you have infinite supply\
  \ of dominoes in `K` colors, and you have to fill the given grid **without any two\
  \ adjacent dominoes having the same color**. Two dominoes are adjacent if they share\
  \ an edge.\n\nA valid filling of a 2 x 10 board with three colors could be as follows\
  \ (note that two same-colored dominoes can share a point):\n\n```\n1131223312\n\
  2231332212\n```\n\nSince the answer will be very large, please give your answer\
  \ **modulo 12345787**.\n\n# Examples\n\n```python\n# K == 1: only one color\ntwo_by_n(1,\
  \ 1) == 1\ntwo_by_n(3, 1) == 0\n\n# K == 2: two colors\ntwo_by_n(1, 2) == 2\ntwo_by_n(4,\
  \ 2) == 4\ntwo_by_n(7, 2) == 2\n\n# K == 3: three colors\ntwo_by_n(1, 3) == 3\n\
  two_by_n(2, 3) == 12\ntwo_by_n(5, 3) == 168 # yes, the numbers grow quite quickly\n\
  \n# You must handle big values\ntwo_by_n(10, 5) == 7802599\ntwo_by_n(20, 10) ==\
  \ 4137177\n```\n\n# Constraints\n\n`1 <= N <= 10000`\n\n`1 <= K <= 100`\n\nAll inputs\
  \ are valid integers."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def two_by_n (n : Nat) (k : Nat) : Nat := sorry\n\ntheorem two_by_n_bounds\
  \ (n k : Nat) (hn : n ≥ 1) (hk : k ≥ 1) :\n  two_by_n n k < 12345787 := sorry\n"
"vc-theorems": "theorem two_by_n_single_color (n : Nat) (hn : n ≥ 1) :\n  two_by_n\
  \ n 1 = if n = 1 then 1 else 0 := sorry\n\n\ntheorem two_by_n_impossible (n : Nat)\
  \ (k : Nat) (hn : n > 1) (hk : k ≤ 1) :\n  two_by_n n k = 0 := sorry\n\n\ntheorem\
  \ two_by_n_exists_solution (n k : Nat) (hn : n ≥ 1) (hk : k ≥ 2) :\n  two_by_n n\
  \ k > 0 := sorry\n\n\ntheorem two_by_n_deterministic (n : Nat) (k : Nat) (hn : n\
  \ ≥ 1) (hk : k ≥ 1) :\n  two_by_n n k = two_by_n n k := sorry\n\n\ntheorem two_by_n_min_colors\
  \ (n : Nat) (hn : n > 1) :\n  two_by_n n 2 > 0 := sorry\n\n\ntheorem two_by_n_monotonic\
  \ (k : Nat) (hk : k ≥ 2) :\n  two_by_n 1 k ≤ two_by_n 2 k := sorry\n\n/--\ninfo:\
  \ 1\n-/\n#guard_msgs in\n#eval two_by_n 1 1\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n\
  #eval two_by_n 4 2\n\n/--\ninfo: 168\n-/\n#guard_msgs in\n#eval two_by_n 5 3\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
