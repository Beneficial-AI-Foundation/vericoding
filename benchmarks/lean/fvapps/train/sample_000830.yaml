"vc-description": "Mr. X has come up with a new string compression algorithm. Consider\
  \ a string of length N which contains up to K distinct characters. The compression\
  \ algorithm works as follows: Replace each maximal contiguous substring containing\
  \ only one distinct character (repeated an arbitrary number of times) and replace\
  \ it by 2 values: the character and the length of the substring.\nFor example, the\
  \ string \"aabbaaa\" will be compressed to \"a, 2, b, 2, a, 3\". Thus the length\
  \ of the compressed string is 6.\n\nSince Mr. X is living in advanced times, the\
  \ length of any integer is considered to be 1. For example, if a string is compressed\
  \ to \"a, 111, b, 13\", then its length after compression is considered to be 4.\n\
  \nTo test his algorithm, he needs to know the expected length of the compressed\
  \ string for given N and K if the input string is randomly uniformly chosen from\
  \ all possibilities. He wants to run this experiment multiple times for different\
  \ N, K and needs your help.\n\n-----Input-----\nThe first line of the input contains\
  \ an integer T denoting the number of queries. The description of T test cases follows.\n\
  The first and only line of each test case contains two integers N and K denoting\
  \ the number of letters in the input string and the maximum number of distinct characters\
  \ that can be present in the string.\n\n-----Output-----\n\nFor each test case,\
  \ output a single line containing the expected length of the compressed string.\
  \ \nYour answer will be considered correct if the absolute error is less than 10-2\n\
  \n-----Constraints-----\n- 1 ≤ T ≤ 105\n- 1 ≤ N, K ≤ 109\n\n-----Example-----\n\
  Input:\n2\n3 1\n3 2\nOutput:\n2.0\n4.0\n\n-----Explanation-----Example case 1:\n\
  \nThere is only one string: aaa with compressed string = a, 3. Therefore length\
  \ = 2\nExample case 2\n\nInput strings:\n\n\"aaa\": \"a, 3\". Length = 2\n\n\"aab\"\
  : \"a, 2, b, 1\". Length = 4 \n\n\"aba\": \"a, 1, b, 1, a, 1\". Length = 6\n\n\"\
  abb\": \"a, 1, b, 2\". Length = 4\n\n\"baa\": \"b, 1, a, 2\". Length = 4\n\n\"bab\"\
  : \"b, 1, a, 1, b, 1\". Length = 6\n\n\"bba\": \"b, 2, a, 1\". Length = 4\n\n\"\
  bbb\": \"b, 3\". Length = 2\n\nExpected value = (2+4+6+4+4+6+4+2)/8 = 32/8 = 4"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calculate_compression_length (n k : Nat) : Float :=\n  sorry\n"
"vc-theorems": "theorem compression_length_positive (n k : Nat) (h1 : n > 0) (h2 :\
  \ k > 0) :\n  calculate_compression_length n k > 0 :=\n  sorry\n\n\ntheorem compression_length_upper_bound\
  \ (n k : Nat) (h1 : n > 0) (h2 : k > 0) :\n  calculate_compression_length n k ≤\
  \ Float.ofNat (2 * n) :=\n  sorry\n\n\ntheorem compression_length_monotonic (n k\
  \ : Nat) (h1 : n > 0) (h2 : k > 0) :\n  calculate_compression_length (n + 1) k ≥\
  \ calculate_compression_length n k :=\n  sorry\n\n\ntheorem compression_length_k_one\
  \ (n : Nat) (h : n > 0) :\n  (calculate_compression_length n 1 - 2).abs < 0.01 :=\n\
  \  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
