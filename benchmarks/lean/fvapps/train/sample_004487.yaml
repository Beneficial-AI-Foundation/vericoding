"vc-description": "Given a standard english sentence passed in as a string, write\
  \ a method that will return a sentence made up of the same words, but sorted by\
  \ their first letter. However, the method of sorting has a twist to it:\n* All words\
  \ that begin with a lower case letter should be at the beginning of the sorted sentence,\
  \ and sorted in ascending order.\n* All words that begin with an upper case letter\
  \ should come after that, and should be sorted in descending order.\n\nIf a word\
  \ appears multiple times in the sentence, it should be returned multiple times in\
  \ the sorted sentence. Any punctuation must be discarded.\n\n## Example\n\nFor example,\
  \ given the input string `\"Land of the Old Thirteen! Massachusetts land! land of\
  \ Vermont and Connecticut!\"`, your method should return `\"and land land of of\
  \ the Vermont Thirteen Old Massachusetts Land Connecticut\"`. Lower case letters\
  \ are sorted `a -> l -> l -> o -> o -> t` and upper case letters are sorted `V ->\
  \ T -> O -> M -> L -> C`."
"vc-preamble": "import Imports.AllImports\n\ndef isLower (c : Char) : Bool := sorry\n\
  def isUpper (c : Char) : Bool := sorry"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def pseudo_sort (s : String) : String := sorry\n\ntheorem pseudo_sort_preserves_words\
  \ {word_list : List String} (h : word_list ≠ []) :\n  let sentence := String.intercalate\
  \ \" \" word_list\n  let result := pseudo_sort sentence\n  let orig_words := word_list.filter\
  \ (λ w => w.trim ≠ \"\")\n  let result_words := (result.split (· = ' ')).filter\
  \ (λ w => w.trim ≠ \"\")\n  ∀ w, w ∈ orig_words ↔ w ∈ result_words := sorry\n"
"vc-theorems": "theorem pseudo_sort_ordering {word_list : List String} (h : word_list\
  \ ≠ []) :\n  let sentence := String.intercalate \" \" word_list\n  let result :=\
  \ (pseudo_sort sentence).split (· = ' ')\n  let lowercase := result.filter (λ w\
  \ => !w.isEmpty ∧ isLower (w.front))\n  let uppercase := result.filter (λ w => !w.isEmpty\
  \ ∧ isUpper (w.front))\n  (∀ x y, x ∈ lowercase → y ∈ lowercase → x.data < y.data\
  \ → result.indexOf x < result.indexOf y) ∧ \n  (∀ x y, x ∈ uppercase → y ∈ uppercase\
  \ → x.data < y.data → result.indexOf x > result.indexOf y) ∧\n  (∀ l u, l ∈ lowercase\
  \ → u ∈ uppercase → result.indexOf l < result.indexOf u) := sorry\n\n\ntheorem pseudo_sort_handles_punctuation\
  \ (text : String) :\n  let result := pseudo_sort text\n  ∀ c, c ∈ \"!\\\"#$%&'()*+,-./:;<=>?@[\\\
  \\]^_`{|}~\".data → \n    ¬(c ∈ result.data) := sorry\n\n/--\ninfo: expected1\n\
  -/\n#guard_msgs in\n#eval pseudo_sort \"Land of the Old Thirteen! Massachusetts\
  \ land! land of Vermont and Connecticut!\"\n\n/--\ninfo: expected2\n-/\n#guard_msgs\
  \ in\n#eval pseudo_sort \"I, habitan of the Alleghanies, treating of him as he is\
  \ in himself in his own rights\"\n\n/--\ninfo: expected3\n-/\n#guard_msgs in\n#eval\
  \ pseudo_sort \"And I send these words to Paris with my love\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
