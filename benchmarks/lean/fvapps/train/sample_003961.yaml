"vc-description": "# Scenario \n\n*Now that the competition gets tough it will* **_Sort\
  \ out the men from the boys_** . \n\n**_Men_** are the **_Even numbers_** and **_Boys_**\
  \ are the **_odd_**   ![!alt](https://i.imgur.com/mdX8dJP.png) ![!alt](https://i.imgur.com/mdX8dJP.png)\
  \ \n\n___\n# Task\n\n**_Given_** an *array/list [] of n integers* , **_Separate_**\
  \ *The even numbers from the odds* , or **_Separate_**  **_the men from the boys_**\
  \  ![!alt](https://i.imgur.com/mdX8dJP.png) ![!alt](https://i.imgur.com/mdX8dJP.png)\
  \  \n___\n# Notes\n\n* **_Return_** *an array/list where* **_Even numbers_** **_come\
  \ first then odds_** \n\n* Since , **_Men are stronger than Boys_** , *Then* **_Even\
  \ numbers_** in **_ascending order_** While **_odds in descending_** .\n\n* **_Array/list_**\
  \ size is *at least **_4_*** .\n\n* **_Array/list_** numbers could be a *mixture\
  \ of positives , negatives* .\n\n* **_Have no fear_** , *It is guaranteed that no\
  \ Zeroes will exists* . ![!alt](https://i.imgur.com/mdX8dJP.png)  \n\n* **_Repetition_**\
  \ of numbers in *the array/list could occur* , So **_(duplications are not included\
  \ when separating)_**.\n____\n# Input >> Output Examples:\n\n```\nmenFromBoys ({7,\
  \ 3 , 14 , 17}) ==> return ({14, 17, 7, 3}) \n```\n\n## **_Explanation_**:\n\n**_Since_**\
  \ , `{ 14 }` is the **_even number_** here , So it **_came first_** , **_then_**\
  \ *the odds in descending order* `{17 , 7 , 3}`  .\n____\n\n```\nmenFromBoys ({-94,\
  \ -99 , -100 , -99 , -96 , -99 }) ==> return ({-100 , -96 , -94 , -99})\n```\n\n\
  ## **_Explanation_**:\n\n* **_Since_** , `{ -100, -96 , -94 }` is the **_even numbers_**\
  \ here , So it **_came first_** in *ascending order *, **_then_** *the odds in descending\
  \ order* `{ -99 }`\n\n* **_Since_** , **_(Duplications are not included when separating)_**\
  \ , *then* you can see **_only one (-99)_** *was appeared in the final array/list*\
  \ . \n____\n\n```\nmenFromBoys ({49 , 818 , -282 , 900 , 928 , 281 , -282 , -1 })\
  \ ==> return ({-282 , 818 , 900 , 928 , 281 , 49 , -1})\n```\n\n## **_Explanation_**:\n\
  \n* **_Since_** , `{-282 , 818 , 900 , 928 }` is the **_even numbers_** here , So\
  \ it **_came first_** in *ascending order* , **_then_** *the odds in descending\
  \ order* `{ 281 , 49 , -1 }`\n\n* **_Since_** , **_(Duplications are not included\
  \ when separating)_** , *then* you can see **_only one (-282)_** *was appeared in\
  \ the final array/list* . \n____\n____\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\
  \n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\
  \n# [Bizarre Sorting-katas](https://www.codewars.com/collections/bizarre-sorting-katas)\n\
  \n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n\
  ___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def men_from_boys (arr : List Int) : List Int := sorry\n\ntheorem\
  \ men_from_boys_preserves_elements {arr : List Int} (h : arr ≠ []) :\n  ∀ x, x ∈\
  \ men_from_boys arr ↔ x ∈ arr := sorry\n"
"vc-theorems": "theorem men_from_boys_evens_ascending {arr : List Int} (h : arr ≠\
  \ []) :\n  let evens := (men_from_boys arr).filter (fun x => x % 2 = 0)\n  ∀ i j,\
  \ i < j → i < evens.length → j < evens.length → \n    evens[i]! ≤ evens[j]! := sorry\n\
  \n\ntheorem men_from_boys_odds_descending {arr : List Int} (h : arr ≠ []) :\n  let\
  \ odds := (men_from_boys arr).filter (fun x => x % 2 ≠ 0)\n  ∀ i j, i < j → i <\
  \ odds.length → j < odds.length → \n    odds[i]! ≥ odds[j]! := sorry\n\n\n\n\ntheorem\
  \ men_from_boys_no_duplicates {arr : List Int} (h : arr ≠ []) :\n  ∀ i j, i < j\
  \ → i < (men_from_boys arr).length → j < (men_from_boys arr).length →\n    (men_from_boys\
  \ arr)[i]! ≠ (men_from_boys arr)[j]! := sorry\n\n\ntheorem men_from_boys_length_unique\
  \ {arr : List Int} (h : arr ≠ []) :\n  ∀ x, x ∈ men_from_boys arr → (men_from_boys\
  \ arr).countP (· = x) = 1 := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
