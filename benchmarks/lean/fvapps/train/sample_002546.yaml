"vc-description": "# Introduction \n\nHamsters are rodents belonging to the subfamily\
  \ Cricetinae. The subfamily contains about 25 species, classified in six or seven\
  \ genera. They have become established as popular small house pets, and, partly\
  \ because they are easy to breed in captivity, hamsters are often used as laboratory\
  \ animals.\n\n\n# Task \n\nWrite a function that accepts two inputs: `code` and\
  \ `message` and returns an encrypted string from `message` using the `code`.   \n\
  The `code` is a string that generates the key in the way shown below:\n\n```\n 1\
  \  | h a m s t e r\n 2  | i b n   u f\n 3  | j c o   v g\n 4  | k d p   w\n 5  |\
  \ l   q   x\n 6  |         y\n 7  |         z\n\n```\n\nAll letters from `code`\
  \ get number `1`. All letters which directly follow letters from `code` get number\
  \ `2` (unless they already have a smaller number assigned), etc. It's difficult\
  \ to describe but it should be easy to understand from the example below:\n\n```\n\
  \ 1  | a e h m r s t\n 2  | b f i n     u\n 3  | c g j o     v\n 4  | d   k p  \
  \   w\n 5  |     l q     x\n 6  |             y\n 7  |             z\n\n```\n\n\
  How does the encoding work using the `hamster` code?    \n\n```\na => a1\nb => a2\n\
  c => a3\nd => a4\ne => e1\nf => e2\n...\n```\n\nAnd applying it to strings :\n\n\
  ```\nhamsterMe('hamster', 'hamster')   => h1a1m1s1t1e1r1\nhamsterMe('hamster', 'helpme')\
  \    => h1e1h5m4m1e1\n\n```\n\nAnd you probably started wondering what will happen\
  \ if there is no `a` in the `code`.  \nJust add these letters after the last available\
  \ letter (in alphabetic order) in the `code`.\n\nThe key for code `hmster` is:\n\
  ```\n 1  | e h m r s t\n 2  | f i n     u\n 3  | g j o     v\n 4  |   k p     w\n\
  \ 5  |   l q     x\n 6  |           y\n 7  |           z\n 8  |           a\n 9\
  \  |           b\n10  |           c\n11  |           d\n```\n\n# Additional notes\n\
  \nThe `code` will have at least 1 letter.   \nDuplication of letters in `code` is\
  \ possible and should be handled.    \nThe `code` and `message` consist of only\
  \ lowercase letters."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def hamster_me (code : String) (message : String) : String := sorry\n\
  \ntheorem hamster_output_contents (code : String) (message : String) (h1 : code\
  \ ≠ \"\") :\n  let result := hamster_me code message\n  ∀ c ∈ result.data, \n  \
  \  (c ∈ code.data) ∨ ('0'.toNat ≤ c.toNat ∧ c.toNat ≤ '9'.toNat) := sorry\n"
"vc-theorems": "theorem hamster_output_length (code : String) (message : String) (h1\
  \ : code ≠ \"\") :\n  let result := hamster_me code message\n  (result.data.filter\
  \ Char.isAlpha).length = message.length := sorry\n\n\ntheorem hamster_deterministic\
  \ (code : String) (message : String) (h1 : code ≠ \"\") :\n  hamster_me code message\
  \ = hamster_me code message := sorry\n\n\ntheorem hamster_code_order_invariant (code\
  \ code' : String) (message : String) \n    (h1 : code ≠ \"\") (h2 : ∀ c, c ∈ code.data\
  \ ↔ c ∈ code'.data) :\n  hamster_me code message = hamster_me code' message := sorry\n\
  \n\ntheorem hamster_empty_message (code : String) (h1 : code ≠ \"\") :\n  hamster_me\
  \ code \"\" = \"\" := sorry\n\n\ntheorem hamster_single_char_code (message : String)\
  \ :\n  let result := hamster_me \"a\" message\n  ∀ c ∈ result.data,\n    c = 'a'\
  \ ∨ ('0'.toNat ≤ c.toNat ∧ c.toNat ≤ '9'.toNat) := sorry\n\n/--\ninfo: 'h1a1m1s1t1e1r1'\n\
  -/\n#guard_msgs in\n#eval hamster_me \"hamster\" \"hamster\"\n\n/--\ninfo: 'h1e1h5m4m1e1'\n\
  -/\n#guard_msgs in\n#eval hamster_me \"hamster\" \"helpme\"\n\n/--\ninfo: 'h1t8m1s1t1e1r1'\n\
  -/\n#guard_msgs in\n#eval hamster_me \"hmster\" \"hamster\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
