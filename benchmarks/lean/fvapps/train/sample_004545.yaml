"vc-description": "You will be given an array `a` and a value `x`. All you need to\
  \ do is check whether the provided array contains the value.\n\n~~~if:swift\nThe\
  \ type of `a` and `x` can be `String` or `Int`.\n~~~\n~~~if-not:swift\nArray can\
  \ contain numbers or strings. X can be either.\n~~~\n~~~if:racket\nIn racket, you'll\
  \ be given a list instead of an array. If the value is in the list,\nreturn #t instead\
  \ of another value that is also considered true.\n```racket\n(contains '(1 2 3)\
  \ 3) ; returns #t\n(contains '(1 2 3) 5) ; returns #f\n```\n~~~\n\nReturn `true`\
  \ if the array contains the value, `false` if not."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def check (seq : List α) (elem : α) : Bool :=\n  sorry\n"
"vc-theorems": "theorem check_membership_true {α} (seq : List α) (elem : α) :\n  elem\
  \ ∈ seq → check seq elem = true := by\n  sorry\n\n\ntheorem check_membership_false\
  \ {α} (seq : List α) (elem : α) :\n  elem ∉ seq → check seq elem = false := by\n\
  \  sorry\n\n\ntheorem check_reflexive {α} (seq : List α) (elem : α) :\n  check (seq\
  \ ++ [elem]) elem = true := by\n  sorry\n\nend CheckSequence\n\n/--\ninfo: True\n\
  -/\n#guard_msgs in\n#eval check [1, 2, 3] 2\n\n/--\ninfo: False\n-/\n#guard_msgs\
  \ in\n#eval check [\"hello\", \"world\"] \"cat\"\n\n/--\ninfo: True\n-/\n#guard_msgs\
  \ in\n#eval check [66.25, 333, 333.5] 333\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
