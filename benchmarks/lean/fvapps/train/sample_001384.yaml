"vc-description": "Indraneel's student has given him data from two sets of experiments\
  \ that the student has performed. Indraneel wants to establish a correlation between\
  \ the two sets of data. Each data set is a sequence of $N$ numbers. The two data\
  \ sets do not match number for number, but Indraneel believes that this is because\
  \ data has been shifted due to inexact tuning of the equipment.\nFor example, consider\
  \ the following two sequences:\n$ $\n3  8   4  23  9  11  28\n2  3  22  26  8  16\
  \  12\n\n$ $\nIndraneel observes that if we consider the subsequences $3,4,23,9$\
  \ and $2,3,22,8$ and examine their successive differences we get $1,19,-14$. He\
  \ considers these two subsequences to be \"identical\". He would like to find the\
  \ longest such pair of subsequences so that the successive differences are identical.\
  \ Your task is to help him do this.\n\n-----Input:-----\nThe first line of the input\
  \ will contain a single integer $N$ indicating the number of data points in each\
  \ of Indraneel's student's data sets. This is followed by two lines, each containing\
  \ $N$ integers.\n\n-----Output:-----\nThe output consists of three lines. The first\
  \ line of output contains a single integer indicating the length of the longest\
  \ pair of subsequences (one from each sequence) that has identical successive differences.\
  \ This is followed by two lines each containing the corresponding subsequences.\
  \ If there is more than one answer, it suffices to print one.\n\n-----Constraints:-----\n\
  - $1 \\leq N \\leq 150$.\n- $0 \\leq$ Each data point $\\leq 1000$\n\n-----Sample\
  \ Input-----\n7\n3 8 4 23 9 11 28  \n2 3 22 26 8 16 12 \n\n-----Sample Output-----\n\
  4\n3 4 23 9\n2 3 22 8"
"vc-preamble": "import Imports.AllImports\n\ndef Point := Int × Int\ndef Rectangle\
  \ := List Point\n\n\ndef calculate_rectangle_characteristics (points : Rectangle)\
  \ : Float × Float × Float × Float × Float :=\n  sorry\n\n\ndef length (points :\
  \ Rectangle) : Float :=\n  let (l, _, _, _, _) := calculate_rectangle_characteristics\
  \ points\n  l\n\n\ndef width (points : Rectangle) : Float :=\n  let (_, w, _, _,\
  \ _) := calculate_rectangle_characteristics points\n  w\n\n\ndef area (points :\
  \ Rectangle) : Float :=\n  let (_, _, a, _, _) := calculate_rectangle_characteristics\
  \ points\n  a\n\n\ndef perimeter (points : Rectangle) : Float :=\n  let (_, _, _,\
  \ p, _) := calculate_rectangle_characteristics points\n  p\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def diagonal (points : Rectangle) : Float :=\n  let (_, _, _, _,\
  \ d) := calculate_rectangle_characteristics points\n  d\n"
"vc-theorems": "theorem length_positive (points : Rectangle) :\n  length points >\
  \ 0 := sorry\n\n\ntheorem width_positive (points : Rectangle) :\n  width points\
  \ > 0 := sorry\n\n\ntheorem area_is_length_times_width (points : Rectangle) :\n\
  \  area points = length points * width points := sorry\n\n\ntheorem perimeter_formula\
  \ (points : Rectangle) :\n  perimeter points = 2 * (length points + width points)\
  \ := sorry\n\n\ntheorem diagonal_formula (points : Rectangle) :\n  diagonal points\
  \ = Float.sqrt (length points * length points + width points * width points) :=\
  \ sorry\n\n\ntheorem diagonal_larger_than_sides (points : Rectangle) :\n  diagonal\
  \ points > length points ∧ diagonal points > width points := sorry\n\n\ntheorem\
  \ measurements_match_points (points : Rectangle) (h : points.length = 4) :\n  ∃\
  \ x1 x2 y1 y2 : Int,\n    (x2 > x1 ∧ y2 > y1) ∧\n    points = [(x1, y1), (x1, y2),\
  \ (x2, y1), (x2, y2)] ∧\n    length points = Float.ofInt (x2 - x1) ∧\n    width\
  \ points = Float.ofInt (y2 - y1) := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
