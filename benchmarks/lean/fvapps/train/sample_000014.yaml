"vc-description": "Vasya claims that he had a paper square. He cut it into two rectangular\
  \ parts using one vertical or horizontal cut. Then Vasya informed you the dimensions\
  \ of these two rectangular parts. You need to check whether Vasya originally had\
  \ a square. In other words, check if it is possible to make a square using two given\
  \ rectangles.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1\
  \ \\le t \\le 10^4$) — the number of test cases in the input. Then $t$ test cases\
  \ follow.\n\nEach test case is given in two lines.\n\nThe first line contains two\
  \ integers $a_1$ and $b_1$ ($1 \\le a_1, b_1 \\le 100$) — the dimensions of the\
  \ first one obtained after cutting rectangle. The sizes are given in random order\
  \ (that is, it is not known which of the numbers is the width, and which of the\
  \ numbers is the length).\n\nThe second line contains two integers $a_2$ and $b_2$\
  \ ($1 \\le a_2, b_2 \\le 100$) — the dimensions of the second obtained after cutting\
  \ rectangle. The sizes are given in random order (that is, it is not known which\
  \ of the numbers is the width, and which of the numbers is the length).\n\n\n-----Output-----\n\
  \nPrint $t$ answers, each of which is a string \"YES\" (in the case of a positive\
  \ answer) or \"NO\" (in the case of a negative answer). The letters in words can\
  \ be printed in any case (upper or lower).\n\n\n-----Example-----\nInput\n3\n2 3\n\
  3 1\n3 2\n1 3\n3 3\n1 3\n\nOutput\nYes\nYes\nNo"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def can_make_square (a1 b1 a2 b2 : Nat) : Bool := sorry\n\ntheorem\
  \ can_make_square_symmetric_first_rect (a1 b1 a2 b2 : Nat) \n  (h1 : a1 > 0) (h2\
  \ : b1 > 0) (h3 : a2 > 0) (h4 : b2 > 0) :\n  can_make_square a1 b1 a2 b2 = can_make_square\
  \ b1 a1 a2 b2 := sorry\n"
"vc-theorems": "theorem can_make_square_symmetric_second_rect (a1 b1 a2 b2 : Nat)\n\
  \  (h1 : a1 > 0) (h2 : b1 > 0) (h3 : a2 > 0) (h4 : b2 > 0) :\n  can_make_square\
  \ a1 b1 a2 b2 = can_make_square a1 b1 b2 a2 := sorry\n\n\ntheorem can_make_square_symmetric_swap_rects\
  \ (a1 b1 a2 b2 : Nat)\n  (h1 : a1 > 0) (h2 : b1 > 0) (h3 : a2 > 0) (h4 : b2 > 0)\
  \ :\n  can_make_square a1 b1 a2 b2 = can_make_square a2 b2 a1 b1 := sorry\n\n\n\
  theorem can_make_square_identical_rects_false (n : Nat) (h : n > 0) :\n  can_make_square\
  \ n n n n = false := sorry\n\n\ntheorem can_make_square_known_case1 :\n  can_make_square\
  \ 2 3 3 1 = true := sorry\n\n\ntheorem can_make_square_known_case2 :\n  can_make_square\
  \ 3 2 1 3 = true := sorry\n\n\ntheorem can_make_square_known_case3 :\n  can_make_square\
  \ 3 3 1 3 = false := sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval can_make_square\
  \ 2 3 3 1\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval can_make_square 3 2 1 3\n\
  \n/--\ninfo: False\n-/\n#guard_msgs in\n#eval can_make_square 3 3 1 3\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
