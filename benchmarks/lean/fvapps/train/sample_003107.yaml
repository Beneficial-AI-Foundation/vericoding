"vc-description": "You're given a string containing a sequence of words separated\
  \ with whitespaces. Let's say it is a sequence of patterns: a name and a corresponding\
  \ number - like this:\n\n```\"red 1 yellow 2 black 3 white 4\"```\n\nYou want to\
  \ turn it into a different **string** of objects you plan to work with later on\
  \ - like this:\n\n```\"[{name : 'red', id : '1'}, {name : 'yellow', id : '2'}, {name\
  \ : 'black', id : '3'}, {name : 'white', id : '4'}]\"```\n\nDoing this manually\
  \ is a pain. So you've decided to write a short function that would make the computer\
  \ do the job for you. Keep in mind, the pattern isn't necessarily a word and a number.\
  \ Consider anything separeted by a whitespace, just don't forget: an array of objects\
  \ with two elements: name and id.\n\nAs a result you'll have a string you may just\
  \ copy-paste whenever you feel like defining a list of objects - now without the\
  \ need to put in names, IDs, curly brackets, colon signs, screw up everything, fail\
  \ searching for a typo and begin anew. This might come in handy with large lists."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def words_to_object (s : String) : String := sorry\n\ntheorem empty_string_to_object\
  \ :\n  words_to_object \"\" = \"[]\" := by sorry\n"
"vc-theorems": "theorem valid_pairs_object {n : Nat} (h : 0 < n ∧ n ≤ 10) :\n  let\
  \ input := String.join (List.map (fun i => \"color\" ++ toString i ++ \" \" ++ toString\
  \ i ++ \" \") (List.range n))\n  let result := words_to_object input\n  let expected_substring\
  \ (i : Nat) := \"{name : 'color\" ++ toString i ++ \"', id : '\" ++ toString i ++\
  \ \"'}\"\n  -- Result has correct brackets\n  (result.startsWith \"[\" ∧ result.endsWith\
  \ \"]\") ∧\n  -- Each pair exists in result\n  (∀ i, i < n → (expected_substring\
  \ i).all (fun c => result.contains c)) := by sorry\n\n/--\ninfo: expected1\n-/\n\
  #guard_msgs in\n#eval words_to_object \"red 1 yellow 2 black 3 white 4\"\n\n/--\n\
  info: expected2\n-/\n#guard_msgs in\n#eval words_to_object \"1 red 2 white 3 violet\
  \ 4 green\"\n\n/--\ninfo: expected3\n-/\n#guard_msgs in\n#eval words_to_object \"\
  \"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
