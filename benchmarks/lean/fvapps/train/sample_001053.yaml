"vc-description": "You are given an unweighted, undirected graph. Write a program\
  \ to check if it's a tree topology.\n\n-----Input-----\n\nThe first line of the\
  \ input file contains two integers N and M --- number of nodes and number of edges\
  \ in the graph (0 < N <= 10000, 0 <= M <= 20000). Next M lines contain M edges of\
  \ that graph --- Each line contains a pair (u, v) means there is an edge between\
  \ node u and node v (1 <= u,v <= N).\n\n-----Output-----\n\nPrint YES if the given\
  \ graph is a tree, otherwise print NO.\n\n-----Example-----\nInput:\n3 2\n1 2\n\
  2 3\n\nOutput:\nYES"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_tree (n : Nat) (edges : List (Nat × Nat)) : String := sorry\n\
  \ndef is_valid_tree_properties (n : Nat) (edges : List (Nat × Nat)) : Bool := sorry\n"
"vc-theorems": "theorem single_node_valid (n : Nat) (h : n = 1) :\n  is_tree n []\
  \ = \"YES\" := sorry \n\n\ntheorem tree_properties (n : Nat) (edges : List (Nat\
  \ × Nat)) :\n  is_tree n edges = \"YES\" → is_valid_tree_properties n edges = true\
  \ := sorry\n\n\ntheorem line_graph_valid (n : Nat) (h : n ≥ 2) :\n  let edges :=\
  \ List.range (n-1) |>.map (fun i => (i+1, i+2))\n  is_tree n edges = \"YES\" :=\
  \ sorry\n\n\ntheorem cycle_invalid (n : Nat) (h : n ≥ 3) :\n  let edges := (List.range\
  \ (n-1) |>.map (fun i => (i+1, i+2))) ++ [(n, 1)]\n  is_tree n edges = \"NO\" :=\
  \ sorry\n\n\ntheorem disconnected_invalid (n : Nat) (h : n ≥ 3) :\n  let edges :=\
  \ [(1,2)] ++ \n    (if n > 3 then \n      List.range (n-3) |>.map (fun i => (i+3,\
  \ i+4))\n    else [])\n  is_tree n edges = \"NO\" := sorry\n\n/--\ninfo: 'YES'\n\
  -/\n#guard_msgs in\n#eval is_tree 3 [(1, 2), (2, 3)]\n\n/--\ninfo: 'NO'\n-/\n#guard_msgs\
  \ in\n#eval is_tree 3 [(1, 2), (2, 3), (1, 3)]\n\n/--\ninfo: 'NO'\n-/\n#guard_msgs\
  \ in\n#eval is_tree 4 [(1, 2), (3, 4)]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
