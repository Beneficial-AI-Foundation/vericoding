vc-description: |-
  =====Function Descriptions=====
  collections.deque()
  A deque is a double-ended queue. It can be used to add or remove elements from both ends.

  Deques support thread safe, memory efficient appends and pops from either side of the deque with approximately the same O(1) performance in either direction.

  Example
  Code
  >>> from collections import deque
  >>> d = deque()
  >>> d.append(1)
  >>> print d
  deque([1])
  >>> d.appendleft(2)
  >>> print d
  deque([2, 1])
  >>> d.clear()
  >>> print d
  deque([])
  >>> d.extend('1')
  >>> print d
  deque(['1'])
  >>> d.extendleft('234')
  >>> print d
  deque(['4', '3', '2', '1'])
  >>> d.count('1')
  1
  >>> d.pop()
  '1'
  >>> print d
  deque(['4', '3', '2'])
  >>> d.popleft()
  '4'
  >>> print d
  deque(['3', '2'])
  >>> d.extend('7896')
  >>> print d
  deque(['3', '2', '7', '8', '9', '6'])
  >>> d.remove('2')
  >>> print d
  deque(['3', '7', '8', '9', '6'])
  >>> d.reverse()
  >>> print d
  deque(['6', '9', '8', '7', '3'])
  >>> d.rotate(3)
  >>> print d
  deque(['8', '7', '3', '6', '9'])

  =====Problem Statement=====
  Perform append, pop, popleft and appendleft methods on an empty deque d.

  =====Input Format=====
  The first line contains an integer N, the number of operations.
  The next N lines contains the space separated names of methods and their values.

  =====Constraints=====
  0<N≤100

  =====Output Format=====
  Print the space separated elements of deque d.
vc-preamble: |
  import Imports.AllImports

  def Operation := String × Int
  def DequeOp := List Operation


  def splitString (s : String) : List String :=
    sorry
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def process_deque_operations (ops : List String) : String :=
    sorry
vc-theorems: |
  theorem append_only_operations_preserves_length 
    (ops : List String)
    (h1 : ∀ op ∈ ops, (splitString op).get! 0 = "append" ∨ (splitString op).get! 0 = "appendleft") :
    (splitString (process_deque_operations ops)).length = ops.length :=
    sorry


  theorem append_only_operations_preserves_elements
    (ops : List String)
    (h1 : ∀ op ∈ ops, (splitString op).get! 0 = "append" ∨ (splitString op).get! 0 = "appendleft") :
    ∃ perm : List String → List String, 
      perm (ops.map (λ op => (splitString op).get! 1)) = 
      splitString (process_deque_operations ops) :=
    sorry


  theorem append_maintains_order
    (ops : List String)
    (h1 : ∀ op ∈ ops, (splitString op).get! 0 = "append") :
    (splitString (process_deque_operations ops)) =
    ops.map (λ op => (splitString op).get! 1) :=
    sorry

  /--
  info: '1 2'
  -/
  #guard_msgs in
  #eval process_deque_operations ["append 1", "append 2", "append 3", "appendleft 4", "pop", "popleft"]

  /--
  info: '10 15'
  -/
  #guard_msgs in
  #eval process_deque_operations ["append 5", "appendleft 10", "pop", "append 15"]

  /--
  info: ''
  -/
  #guard_msgs in
  #eval process_deque_operations ["append 1", "appendleft 2", "popleft", "pop"]
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
