"vc-description": "Write a program to determine if two numbers are coprime. A pair\
  \ of numbers are coprime if their greatest shared factor is 1. For example:\n```\n\
  20 and 27\nFactors of 20: 1, 2, 4, 5, 10, 20\nFactors of 27: 1, 3, 9, 27\nGreatest\
  \ shared factor: 1\n20 and 27 are coprime```\nAn example of two numbers that are\
  \ not coprime:\n```\n12 and 39\nFactors of 12: 1, 2, 3, 4, 6, 12\nFactors of 39:\
  \ 1, 3, 13, 39\nGreatest shared factor: 3\n12 and 39 are not coprime```\nIf the\
  \ two inputs are coprime, your program should return true. If they are not coprime,\
  \ your program should return false.\n\nThe inputs will always be two positive integers\
  \ between 2 and 99."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def are_coprime (a b : Int) : Bool := sorry\n\ntheorem self_coprime\
  \ (n : Int) : \n  are_coprime n n = (n.natAbs = 1) := sorry\n"
"vc-theorems": "theorem symmetry (n m : Int) : \n  are_coprime n m = are_coprime m\
  \ n := sorry\n\n\ntheorem sign_invariance (n m : Int) :\n  are_coprime n m = are_coprime\
  \ n.natAbs m.natAbs := sorry\n\n\ntheorem multiplication_property (n m k : Int)\
  \ :\n  (are_coprime n m ∧ are_coprime n k) → are_coprime n (m * k) := sorry\n\n\n\
  theorem zero_coprime (n : Int) :\n  are_coprime n 0 = (n.natAbs = 1) := sorry\n\n\
  /--\ninfo: True\n-/\n#guard_msgs in\n#eval are_coprime 20 27\n\n/--\ninfo: False\n\
  -/\n#guard_msgs in\n#eval are_coprime 12 39\n\n/--\ninfo: True\n-/\n#guard_msgs\
  \ in\n#eval are_coprime 64 27\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
