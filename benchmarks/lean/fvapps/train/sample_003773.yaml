"vc-description": "Find the last element of the given argument(s).\n\n## Examples\n\
  \n```python\nlast([1, 2, 3, 4]) ==>  4\nlast(\"xyz\")        ==> \"z\"\nlast(1,\
  \ 2, 3, 4)   ==>  4\n```\nIn **javascript** and **CoffeeScript** a **list** will\
  \ be an `array`, a `string` or the list of `arguments`.\n\n(courtesy of [haskell.org](http://www.haskell.org/haskellwiki/99_questions/1_to_10))"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def last {α : Type} : α → α := sorry\ndef last_list {α : Type}\
  \ : List α → α := sorry\n"
"vc-theorems": "theorem last_list_property {α : Type} (l : List α) (h : l ≠ []) :\n\
  \  ∃ x, last_list l = x := sorry\n\n\ntheorem last_vararg_property {α : Type} (l\
  \ : List α) (h : l ≠ []) :\n  ∃ x, last l.head = x := sorry\n\n\ntheorem last_string_property\
  \ (s : String) (h : s.length > 0) :\n  ∃ c, last_list s.data = c := sorry\n\n\n\
  theorem last_tuple_property {α : Type} (a b c d : α) :\n  last d = d := sorry\n\n\
  \ntheorem last_single_property {α : Type} (x : α) :\n  last x = x := sorry\n\n/--\n\
  info: 5\n-/\n#guard_msgs in\n#eval last [1, 2, 3, 4, 5]\n\n/--\ninfo: 4\n-/\n#guard_msgs\
  \ in\n#eval last 1 2 3 4\n\n/--\ninfo: 'z'\n-/\n#guard_msgs in\n#eval last \"xyz\"\
  \n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
