"vc-description": "The activity of a panipuri seller is \"making a panipuri and putting\
  \ it on the palte of his customer\".    \n$N$ customers are eating panipuri, Given\
  \ an array $A$ of length $N$, $i^{th}$ customer takes $A_i$ seconds to eat a panipuri.\
  \     \nThe Speed of Panipuri seller refers to the number of customers served per\
  \ second. Determine the minimum speed of panipuri seller so that no customer has\
  \ to wait for panipuri after getting his/her first panipuri.    \nAssume that the\
  \ plate can hold infinite panipuris, and customer starts eating next panipuri just\
  \ after finishing the current one.    You would be provided with the time taken\
  \ by each customer to eat a panipuri.\nPanpuri seller serves panipuri in round robin\
  \ manner (first to last and then again first).\n\n-----Input:-----\n- First line\
  \ will contain $T$, number of testcases. Then the test cases follow.\n- For each\
  \ test case, the first line contains $N$ number of customers.\n- Then the second\
  \ line will contain $N$ space separated integers, $A_1$ to $A_N$, eating time taken\
  \ by each customer(in seconds).\n\n-----Output:-----\n- For each test case, print\
  \ a single line containing the minimum integral speed of panipuri seller so that\
  \ no customer has to wait. \n\n-----Constraints-----\n- $0 < T \\leq 100$\n- $0\
  \ < N \\leq 10^6$\n- $0 < A_i \\leq 10^9$\n- Sum of $N$ over all test cases does\
  \ not exceed $10^6$\n\n-----Sample Input:-----\n2\n4\n2 4 6 3\n5\n2 3 4 6 5\n\n\
  -----Sample Output:-----\n2\n\n3\n\n-----EXPLANATION:-----\n$Test case$ $1$:\n\n\
  Let's assume speed of panipuri seller be 1.\n\nSo starting from $0^{th}$ second,\
  \ in $0$ to $1$ second seller make a panipuri and put it into the plate of first\
  \ customer, and first customer completely eat it in $1$ to $3$ second as he takes\
  \ $2$ second to eat a panipuri. But in $3$ to $4$ second panipuri seller is serving\
  \ to $4^{th}$ customer, and hence first customer have to wait, so 1 cannot be our\
  \ answer.\n\nNext possible speed can be $2$ .\n\nStarting from $0^{th}$ second,\
  \ at half second seller make a panipuri and put it into the plate of first customer,\
  \  first customer completely eat it on $2.5$ second as he takes $2$ second to eat\
  \ a panipuri. In $0.5$ to $1$ second, seller serve the second customer. similarly\
  \ in $1$ to $2$ second $3^{rd}$ and $4^{th}$ customer will be serve, in $2$ to $2.5$\
  \ second, seller will again serve the first customer so at $2.5$ sec $1^{st}$ customer\
  \ will have a panipuri to eat.\n\nSimilarly proceeding further we will find that\
  \ no customer have to wait when speed is $2$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_panipuri_speed (n : Nat) (eating_times : List Nat) :\
  \ Nat := sorry\n\ntheorem solve_panipuri_speed_returns_positive (n : Nat) (eating_times\
  \ : List Nat)\n    (h1 : n > 0)\n    (h2 : eating_times.length > 0)\n    (h3 : ∀\
  \ x ∈ eating_times, x > 0) :\n    solve_panipuri_speed n eating_times > 0 := by\
  \ sorry\n"
"vc-theorems": "theorem solve_panipuri_speed_returns_natural (n : Nat) (eating_times\
  \ : List Nat)\n    (h1 : n > 0)\n    (h2 : eating_times.length > 0)\n    (h3 : ∀\
  \ x ∈ eating_times, x > 0) :\n    ∃ k : Nat, solve_panipuri_speed n eating_times\
  \ = k := by sorry\n\n\ntheorem solve_panipuri_speed_minimum (n : Nat) (eating_times\
  \ : List Nat)\n    (h1 : n > 0)\n    (h2 : eating_times.length > 0)\n    (h3 : ∀\
  \ x ∈ eating_times, x > 0) :\n    ∃ min : Nat, (∀ x ∈ eating_times, min ≤ x) ∧ solve_panipuri_speed\
  \ n eating_times ≥ n / min := by sorry\n\n\ntheorem solve_panipuri_speed_single_customer\
  \ (eating_times : List Nat)\n    (h1 : eating_times.length > 0)\n    (h2 : ∀ x ∈\
  \ eating_times, x > 0) :\n    ∃ min : Nat, (∀ x ∈ eating_times, min ≤ x) ∧ solve_panipuri_speed\
  \ 1 eating_times = (1 + min - 1) / min := by sorry\n\n\ntheorem solve_panipuri_speed_single_time\
  \ :\n    solve_panipuri_speed 1 [1] = 1 := by sorry\n\n\ntheorem solve_panipuri_speed_single_customer_time_two\
  \ :\n    solve_panipuri_speed 1 [2] = 1 := by sorry\n\n\ntheorem solve_panipuri_speed_equal_times\
  \ :\n    solve_panipuri_speed 3 [2, 2, 2] = 2 := by sorry\n\n/--\ninfo: 2\n-/\n\
  #guard_msgs in\n#eval solve_panipuri_speed 4 [2, 4, 6, 3]\n\n/--\ninfo: 3\n-/\n\
  #guard_msgs in\n#eval solve_panipuri_speed 5 [2, 3, 4, 6, 5]\n\n/--\ninfo: 3\n-/\n\
  #guard_msgs in\n#eval solve_panipuri_speed 3 [1, 2, 1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
