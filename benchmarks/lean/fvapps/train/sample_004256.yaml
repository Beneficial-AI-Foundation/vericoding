"vc-description": "The Collatz conjecture is one of the most famous one. Take any\
  \ positive integer n, if it is even divide it by 2, if it is odd multiply it by\
  \ 3 and add 1 and continue indefinitely.The conjecture is that whatever is n the\
  \ sequence will reach 1. There is many ways to approach this problem, each one of\
  \ them had given beautifull graphs and impressive display of calculation power.\
  \ The simplest approach can be found in this kata: http://www.codewars.com/kata/5286b2e162056fd0cb000c20\n\
  You look at the Collatz sequence of a number and see when it reaches 1.\n\nIn this\
  \ kata we will take a look at the length of collatz sequences. And how they evolve.\
  \ Write a function that take a positive integer n and return the number between\
  \ 1 and n that has the maximum Collatz sequence length and the maximum length. The\
  \ output has to take the form of an array [number, maxLength] For exemple the Collatz\
  \ sequence of 4 is [4,2,1], 3 is [3,10,5,16,8,4,2,1], 2 is [2,1], 1 is [1], so `MaxCollatzLength(4)`\
  \ should return `[3,8]`. If n is not a positive integer, the function have to return\
  \ [].\n\n* As you can see, numbers in Collatz sequences may exceed n.\n\nThe last\
  \ tests use random big numbers so you may consider some optimisation in your code:\n\
  \n* You may get very unlucky and get only hard numbers: try submitting 2-3 times\
  \ if it times out; if it still does, probably you need to optimize your code more;\n\
  \n* Optimisation 1: when calculating the length of a sequence, if n is odd, what\
  \ 3n+1 will be ?\n\n* Optimisation 2: when looping through 1 to n, take i such that\
  \ i<n/2, what will be the lenght of the sequence for 2i ?"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def max_collatz_length : Int → List Int\n  | n => sorry\n"
"vc-theorems": "theorem non_positive_returns_empty {n : Int} (h : n ≤ 0) :\n  max_collatz_length\
  \ n = [] := sorry\n\n\ntheorem result_format {n : Int} (h : n > 0) (h2 : n ≤ 100)\
  \ :\n  let result := max_collatz_length n\n  result.length = 2 ∧ \n  result[0]!\
  \ ≤ n ∧\n  result[1]! > 0 := sorry\n\n\ntheorem monotonic_lengths {n : Int} (h :\
  \ n > 1) (h2 : n ≤ 100) :\n  (max_collatz_length n)[1]! ≥ (max_collatz_length (n-1))[1]!\
  \ := sorry\n\n\ntheorem base_case :\n  max_collatz_length 1 = [1, 1] := sorry\n\n\
  \ntheorem result_smaller_than_input {n : Int} (h : n > 0) :\n  let result := max_collatz_length\
  \ n\n  result[0]! > 0 ∧ result[0]! ≤ n := sorry\n\n/--\ninfo: []\n-/\n#guard_msgs\
  \ in\n#eval max_collatz_length 0\n\n/--\ninfo: [1, 1]\n-/\n#guard_msgs in\n#eval\
  \ max_collatz_length 1\n\n/--\ninfo: [3, 8]\n-/\n#guard_msgs in\n#eval max_collatz_length\
  \ 4\n\n/--\ninfo: [27, 112]\n-/\n#guard_msgs in\n#eval max_collatz_length 30\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
