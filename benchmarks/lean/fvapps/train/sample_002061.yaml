"vc-description": "Jon Snow is on the lookout for some orbs required to defeat the\
  \ white walkers. There are k different types of orbs and he needs at least one of\
  \ each. One orb spawns daily at the base of a Weirwood tree north of the wall. The\
  \ probability of this orb being of any kind is equal. As the north of wall is full\
  \ of dangers, he wants to know the minimum number of days he should wait before\
  \ sending a ranger to collect the orbs such that the probability of him getting\
  \ at least one of each kind of orb is at least $\\frac{p_{i} - \\epsilon}{2000}$,\
  \ where ε < 10^{ - 7}.\n\nTo better prepare himself, he wants to know the answer\
  \ for q different values of p_{i}. Since he is busy designing the battle strategy\
  \ with Sam, he asks you for your help.\n\n\n-----Input-----\n\nFirst line consists\
  \ of two space separated integers k, q (1 ≤ k, q ≤ 1000) — number of different kinds\
  \ of orbs and number of queries respectively.\n\nEach of the next q lines contain\
  \ a single integer p_{i} (1 ≤ p_{i} ≤ 1000) — i-th query.\n\n\n-----Output-----\n\
  \nOutput q lines. On i-th of them output single integer — answer for i-th query.\n\
  \n\n-----Examples-----\nInput\n1 1\n1\n\nOutput\n1\n\nInput\n2 2\n1\n2\n\nOutput\n\
  2\n2"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_orbs (k : Nat) (queries : List Nat) : List Nat := sorry\n\
  \ntheorem solve_orbs_length \n  (k : Nat) (queries : List Nat) (h : k > 0) :\n \
  \ (solve_orbs k queries).length = queries.length := sorry\n"
"vc-theorems": "theorem solve_orbs_positive \n  (k : Nat) (queries : List Nat) (h\
  \ : k > 0) :\n  ∀ x ∈ solve_orbs k queries, x > 0 := sorry\n\n\ntheorem solve_orbs_deterministic\n\
  \  (k : Nat) (queries : List Nat) (h : k > 0) :\n  solve_orbs k queries = solve_orbs\
  \ k queries := sorry\n\n\ntheorem solve_orbs_k_one\n  (queries : List Nat) :\n \
  \ ∀ x ∈ solve_orbs 1 queries, x = 1 := sorry\n\n\ntheorem solve_orbs_edge_cases_one\
  \ :\n  solve_orbs 1 [1] = [1] := sorry\n\n\ntheorem solve_orbs_edge_cases_one_large\
  \ :\n  solve_orbs 1 [1000] = [1] := sorry\n\n\ntheorem solve_orbs_edge_cases_two\
  \ :\n  solve_orbs 2 [1, 2] = [2, 2] := sorry\n\n/--\ninfo: [1]\n-/\n#guard_msgs\
  \ in\n#eval solve_orbs 1 [1]\n\n/--\ninfo: [2, 2]\n-/\n#guard_msgs in\n#eval solve_orbs\
  \ 2 [1, 2]\n\n/--\ninfo: [3, 3, 3, 3, 3]\n-/\n#guard_msgs in\n#eval solve_orbs 3\
  \ [1, 4, 20, 50, 300]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
