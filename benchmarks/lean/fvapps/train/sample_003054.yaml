"vc-description": "Beaches are filled with sand, water, fish, and sun. Given a string,\
  \ calculate how many times the words `\"Sand\"`, `\"Water\"`, `\"Fish\"`, and `\"\
  Sun\"` appear without overlapping (regardless of the case).\n\n## Examples\n\n```python\n\
  sum_of_a_beach(\"WAtErSlIde\")                    ==>  1\nsum_of_a_beach(\"GolDeNSanDyWateRyBeaChSuNN\"\
  )    ==>  3\nsum_of_a_beach(\"gOfIshsunesunFiSh\")             ==>  4\nsum_of_a_beach(\"\
  cItYTowNcARShoW\")               ==>  0\n```"
"vc-preamble": "import Imports.AllImports\n\ndef sumOfABeach (s : String) : Nat :=\n\
  \  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def substringExists (s : String) (substr : String) : Bool :=\n\
  \  sorry\n\n-- Theorem: If a string has no beach words, sum is 0"
"vc-theorems": "theorem no_beach_words (s : String) :\n  (¬ substringExists s \"sand\"\
  \ ∧ ¬ substringExists s \"SAND\") →\n  (¬ substringExists s \"water\" ∧ ¬ substringExists\
  \ s \"WATER\") →\n  (¬ substringExists s \"fish\" ∧ ¬ substringExists s \"FISH\"\
  ) → \n  (¬ substringExists s \"sun\" ∧ ¬ substringExists s \"SUN\") →\n  sumOfABeach\
  \ s = 0 :=\nsorry\n\n-- Theorem: Output is always non-negative and bounded by string\
  \ length\n\ntheorem output_range (s : String) :\n  sumOfABeach s ≥ 0 ∧ sumOfABeach\
  \ s ≤ s.length :=\nsorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval sum_of_a_beach\
  \ \"WAtErSlIde\"\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval sum_of_a_beach \"GolDeNSanDyWateRyBeaChSuNN\"\
  \n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval sum_of_a_beach \"gOfIshsunesunFiSh\"\
  \n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
