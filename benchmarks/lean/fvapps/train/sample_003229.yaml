"vc-description": "In this Kata, we define an arithmetic progression as a series of\
  \ integers in which the differences between adjacent numbers are the same. You will\
  \ be given an array of ints of `length > 2` and your task will be to convert it\
  \ into an arithmetic progression by the following rule:\n```Haskell\nFor each element\
  \ there are exactly three options: an element can be decreased by 1, an element\
  \ can be increased by 1 \nor it can be left unchanged.\n```\nReturn the minimum\
  \ number of changes needed to convert the array to an arithmetic progression. If\
  \ not possible, return `-1`.\n```Haskell\nFor example: \nsolve([1,1,3,5,6,5]) ==\
  \ 4 because [1,1,3,5,6,5] can be changed to [1,2,3,4,5,6] by making 4 changes.\n\
  solve([2,1,2]) == 1 because it can be changed to [2,2,2]\nsolve([1,2,3]) == 0  because\
  \ it is already a progression, and no changes are needed.\nsolve([1,1,10) == -1\
  \ because it's impossible.\nsolve([5,6,5,3,1,1]) == 4. It becomes [6,5,4,3,2,1]\n\
  ```\n\nMore examples in the test cases. Good luck!"
"vc-preamble": "import Imports.AllImports\n\ndef abs (x : Int) : Int := \n  if x <\
  \ 0 then -x else x\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve (arr : List Int) : Int := sorry\n\ntheorem solve_sequence_with_small_deviations\
  \ {arr : List Int} \n  (h1 : arr.length ≥ 3) (h2 : arr.length ≤ 10)\n  (h3 : ∃ start\
  \ step : Int, ∀ (i : Fin arr.length), \n    abs (arr.get i - (start + i.val * step))\
  \ ≤ 1) :\n  let result := solve arr\n  result ≥ 0 ∧ \n  result ≤ (List.range (arr.length-1)).foldl\
  \ \n    (fun acc i => acc + abs (arr.get ⟨i+1, sorry⟩ - arr.get ⟨i, sorry⟩)) 0 :=\
  \ \nsorry\n"
"vc-theorems": "theorem solve_arbitrary_sequences {arr : List Int}\n  (h1 : arr.length\
  \ ≥ 3) (h2 : arr.length ≤ 10)\n  (h3 : ∀ x ∈ arr, -100 ≤ x ∧ x ≤ 100) :\n  let result\
  \ := solve arr\n  result ≥ -1 ∧ \n  (result ≠ -1 → result ≥ 0) := \nsorry\n\n\n\
  theorem solve_minimum_length_sequence {arr : List Int}\n  (h : arr.length = 3) :\n\
  \  let result := solve arr\n  result ≠ -1 → \n  result ≤ abs (arr.get ⟨1, sorry⟩\
  \ - arr.get ⟨0, sorry⟩) + \n           abs (arr.get ⟨2, sorry⟩ - arr.get ⟨1, sorry⟩)\
  \ :=\nsorry\n\n\ntheorem solve_constant_sequence {arr : List Int}\n  (h1 : arr.length\
  \ ≥ 3) (h2 : arr.length ≤ 10)\n  (h3 : ∀ (i j : Fin arr.length), arr.get i = arr.get\
  \ j) :\n  solve arr = 0 :=\nsorry\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval solve\
  \ [1, 1, 3, 5, 6, 5]\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval solve [2, 1, 2]\n\
  \n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval solve [1, 2, 3]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
