"vc-description": "N cars are going to the same destination along a one lane road. \
  \ The destination is target miles away.\nEach car i has a constant speed speed[i] (in\
  \ miles per hour), and initial position position[i] miles towards the target along\
  \ the road.\nA car can never pass another car ahead of it, but it can catch up to\
  \ it, and drive bumper to bumper at the same speed.\nThe distance between these\
  \ two cars is ignored - they are assumed to have the same position.\nA car fleet\
  \ is some non-empty set of cars driving at the same position and same speed.  Note\
  \ that a single car is also a car fleet.\nIf a car catches up to a car fleet right\
  \ at the destination point, it will still be considered as one car fleet.\n\nHow\
  \ many car fleets will arrive at the destination?\n \nExample 1:\nInput: target\
  \ = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]\nOutput: 3\nExplanation:\n\
  The cars starting at 10 and 8 become a fleet, meeting each other at 12.\nThe car\
  \ starting at 0 doesn't catch up to any other car, so it is a fleet by itself.\n\
  The cars starting at 5 and 3 become a fleet, meeting each other at 6.\nNote that\
  \ no other cars meet these fleets before the destination, so the answer is 3.\n\n\
  \nNote:\n\n0 <= N <= 10 ^ 4\n0 < target <= 10 ^ 6\n0 < speed[i] <= 10 ^ 6\n0 <=\
  \ position[i] < target\nAll initial positions are different."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def car_fleet (target: Int) (positions: List Int) (speeds: List\
  \ Int) : Int :=\n  sorry\n"
"vc-theorems": "theorem car_fleet_bounded (target: Int) (positions: List Int) (speeds:\
  \ List Int)\n  (h1: target > 0) (h2: target ≤ 1000)\n  (h3: ∀ p ∈ positions, 0 ≤\
  \ p ∧ p ≤ 100)\n  (h4: ∀ s ∈ speeds, 1 ≤ s ∧ s ≤ 10)\n  (h5: positions.length =\
  \ speeds.length)\n  (h6: positions.length ≤ 10) :\n  car_fleet target positions\
  \ speeds ≤ positions.length :=\nsorry\n\n\ntheorem car_fleet_empty (target: Int)\
  \ :\n  car_fleet target [] [] = 0 :=\nsorry\n\n\ntheorem car_fleet_single (target:\
  \ Int) (pos: Int) (speed: Int)\n  (h1: target > 0) :\n  car_fleet target [pos] [speed]\
  \ = 1 :=\nsorry\n\n\ntheorem car_fleet_same_pos_speed (target: Int) (positions:\
  \ List Int) (speeds: List Int)\n  (h1: positions ≠ [])\n  (h2: ∀ p ∈ positions,\
  \ p = positions.head!)\n  (h3: ∀ s ∈ speeds, s = speeds.head!)\n  (h4: positions.length\
  \ = speeds.length) :\n  car_fleet target positions speeds = 1 :=\nsorry\n\n\ntheorem\
  \ car_fleet_merge_same_pos (target: Int)\n  (h1: target = 10) :\n  car_fleet 10\
  \ [5, 5] [2, 3] = 1 :=\nsorry\n\n\ntheorem car_fleet_no_merge_separated (target:\
  \ Int) \n  (h1: target = 10) :\n  car_fleet 10 [0, 5] [1, 2] = 2 :=\nsorry\n\n/--\n\
  info: 3\n-/\n#guard_msgs in\n#eval car_fleet 12 [10, 8, 0, 5, 3] [2, 4, 1, 1, 3]\n\
  \n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval car_fleet 10 [0] [1]\n\n/--\ninfo: 0\n\
  -/\n#guard_msgs in\n#eval car_fleet 10 [] []\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
