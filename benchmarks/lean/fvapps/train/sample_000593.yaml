"vc-description": "Due to the COVID pandemic, people have been advised to stay at\
  \ least $6$ feet away from any other person. Now, people are lining up in a queue\
  \ at the local shop and it is your duty to check whether they are all following\
  \ this advice.\nThere are a total of $N$ spots (numbered $1$ through $N$) where\
  \ people can stand in front of the local shop. The distance between each pair of\
  \ adjacent spots is $1$ foot. Each spot may be either empty or occupied; you are\
  \ given a sequence $A_1, A_2, \\ldots, A_N$, where for each valid $i$, $A_i = 0$\
  \ means that the $i$-th spot is empty, while $A_i = 1$ means that there is a person\
  \ standing at this spot. It is guaranteed that the queue is not completely empty.\n\
  For example, if $N = 11$ and the sequence $A$ is $(0, 1, 0, 0, 0, 0, 0, 1, 0, 0,\
  \ 1)$, then this is a queue in which people are not following the advice because\
  \ there are two people at a distance of just $3$ feet from each other.\nYou need\
  \ to determine whether the people outside the local shop are following the social\
  \ distancing advice or not. As long as some two people are standing at a distance\
  \ smaller than 6 feet from each other, it is bad and you should report it, since\
  \ social distancing is not being followed.\n\n-----Input-----\n- The first line\
  \ of the input contains a single integer $T$ denoting the number of test cases.\
  \ The description of $T$ test cases follows.\n- The first line of each test case\
  \ contains a single integer $N$.\n- The next line contains $N$ space-separated integers\
  \ $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nFor each test case, print a single\
  \ line containing the string \"YES\" if social distancing is being followed or \"\
  NO\" otherwise (without quotes).\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n\
  - $1 \\le N \\le 100$\n- $0 \\le A_i \\le 1$ for each valid $i$\n- at least one\
  \ spot is occupied\n\n-----Subtasks-----\nSubtask #1 (100 points): original constraints\n\
  \n-----Example Input-----\n3\n3\n1 0 1\n7\n1 0 0 0 0 0 1\n11\n0 1 0 0 0 0 0 1 0\
  \ 0 1\n\n-----Example Output-----\nNO\nYES\nNO\n\n-----Explanation-----\nExample\
  \ case 1: The first and third spots are occupied and the distance between them is\
  \ $2$ feet.\nExample case 2: The first and seventh spots are occupied and the distance\
  \ between them is $6$ feet."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def check_social_distancing (n : Nat) (arr : List Nat) : String\
  \ := sorry\n\ntheorem check_social_distancing_returns_valid_result (n : Nat) (arr\
  \ : List Nat)\n  (h1 : n ≥ 2) (h2 : n ≤ 100)\n  (h3 : ∀ x ∈ arr, x = 0 ∨ x = 1)\
  \ :\n  check_social_distancing n arr = \"YES\" ∨ \n  check_social_distancing n arr\
  \ = \"NO\" := sorry\n"
"vc-theorems": "theorem check_social_distancing_minimum_distance (n : Nat) (arr :\
  \ List Nat)\n  (h1 : arr.length = n)\n  (h2 : ∀ x ∈ arr, x = 0 ∨ x = 1) :\n  check_social_distancing\
  \ n arr = \"YES\" ↔ \n  (∀ i j, i < arr.length → j < arr.length → i < j → \n   arr[i]!\
  \ = 1 → arr[j]! = 1 → j - i ≥ 6) := sorry\n\n\ntheorem check_social_distancing_minimum_valid\
  \ (n : Nat)\n  (h1 : n ≥ 7) (h2 : n ≤ 100) :\n  let arr := List.replicate n 0\n\
  \  let arr' := arr.set 0 1\n  let arr'' := arr'.set 6 1\n  check_social_distancing\
  \ n arr'' = \"YES\" := sorry\n\n\ntheorem check_social_distancing_edge_cases :\n\
  \  (check_social_distancing 1 [0] = \"YES\") ∧\n  (check_social_distancing 1 [1]\
  \ = \"YES\") ∧\n  (check_social_distancing 2 [1,1] = \"NO\") := sorry\n\n/--\ninfo:\
  \ 'NO'\n-/\n#guard_msgs in\n#eval check_social_distancing 3 [1, 0, 1]\n\n/--\ninfo:\
  \ 'YES'\n-/\n#guard_msgs in\n#eval check_social_distancing 7 [1, 0, 0, 0, 0, 0,\
  \ 1]\n\n/--\ninfo: 'NO'\n-/\n#guard_msgs in\n#eval check_social_distancing 11 [0,\
  \ 1, 0, 0, 0, 0, 0, 1, 0, 0, 1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
