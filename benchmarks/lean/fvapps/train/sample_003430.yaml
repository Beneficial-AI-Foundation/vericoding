"vc-description": "An array is called `zero-balanced` if its elements sum to `0` and\
  \ for each positive element `n`, there exists another element that is the negative\
  \ of `n`. Write a function named `ìsZeroBalanced` that returns `true` if its argument\
  \ is `zero-balanced` array, else return `false`. Note that an `empty array` will\
  \ not sum to `zero`."
"vc-preamble": "import Imports.AllImports\n\ndef List.sum : List Int → Int \n  | []\
  \ => 0\n  | x::xs => x + xs.sum\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isZeroBalanced (arr : List Int) : Bool := sorry\n\ntheorem\
  \ empty_array_not_balanced {arr : List Int} :\n  arr = [] → ¬(isZeroBalanced arr)\
  \ := sorry\n"
"vc-theorems": "theorem balanced_implies_sum_zero {arr : List Int} :\n  isZeroBalanced\
  \ arr → (arr.sum = 0) := sorry\n\n\ntheorem balanced_implies_equal_frequencies {arr\
  \ : List Int} :\n  isZeroBalanced arr → ∀ x, (List.countP (· = x) arr) = (List.countP\
  \ (· = -x) arr) := sorry \n\n\ntheorem all_zeros_array_balanced {arr : List Int}\
  \ :\n  arr ≠ [] → (∀ x ∈ arr, x = 0) → isZeroBalanced arr := sorry\n\n\ntheorem\
  \ reverse_preserves_balance {arr : List Int} :\n  isZeroBalanced arr → isZeroBalanced\
  \ arr.reverse := sorry\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval is_zero_balanced\
  \ []\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval is_zero_balanced [0, 1, -1]\n\
  \n/--\ninfo: False\n-/\n#guard_msgs in\n#eval is_zero_balanced [3, -2, -1]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
