"vc-description": "Say you have an array for which the ith element is the price of\
  \ a given stock on day i.\n\nDesign an algorithm to find the maximum profit. You\
  \ may complete at most two transactions.\n\nNote: You may not engage in multiple\
  \ transactions at the same time (i.e., you must sell the stock before you buy again).\n\
  \nExample 1:\n\n\nInput: [3,3,5,0,0,3,1,4]\nOutput: 6\nExplanation: Buy on day 4\
  \ (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n             Then\
  \ buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\n\n\
  Example 2:\n\n\nInput: [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price\
  \ = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n             Note that\
  \ you cannot buy on day 1, buy on day 2 and sell them later, as you are\n      \
  \       engaging multiple transactions at the same time. You must sell before buying\
  \ again.\n\n\nExample 3:\n\n\nInput: [7,6,4,3,1]\nOutput: 0\nExplanation: In this\
  \ case, no transaction is done, i.e. max profit = 0."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def maxProfit (prices: List Nat) : Nat :=\n  sorry\n\n-- Maximum\
  \ profit should be non-negative for any non-empty price list"
"vc-theorems": "theorem maxprofit_non_negative {prices: List Nat} (h: prices ≠ [])\
  \ : \n  maxProfit prices ≥ 0 :=\n  sorry\n\n-- Descending prices should give zero\
  \ profit \n\ntheorem maxprofit_descending {prices: List Nat} (h: prices ≠ []) \n\
  \  (hsorted: ∀ i j, i < j → j < prices.length → prices[i]! ≥ prices[j]!) :\n  maxProfit\
  \ prices = 0 :=\n  sorry\n\n-- For ascending prices, profit should be max of single\
  \ or double transaction\n\ntheorem maxprofit_ascending {prices: List Nat} (h: prices\
  \ ≠ [])\n  (hsorted: ∀ i j, i < j → j < prices.length → prices[i]! ≤ prices[j]!)\n\
  \  (hlen: prices.length ≥ 4) :\n  maxProfit prices = min \n    (prices[prices.length-1]!\
  \ - prices[0]!)\n    ((prices[prices.length-1]! - prices[0]!) + (prices[prices.length-2]!\
  \ - prices[1]!)) :=\n  sorry\n\n-- Single transaction case for ascending prices\n\
  \ntheorem maxprofit_ascending_single {prices: List Nat} (h: prices ≠ [])\n  (hsorted:\
  \ ∀ i j, i < j → j < prices.length → prices[i]! ≤ prices[j]!)\n  (hlen1: prices.length\
  \ ≥ 2) (hlen2: prices.length < 4) :\n  maxProfit prices = prices[prices.length-1]!\
  \ - prices[0]! :=\n  sorry\n\n-- Constant prices should give zero profit\n\ntheorem\
  \ maxprofit_constant {prices: List Nat} (h: prices ≠ [])\n  (hconst: ∀ i j, i <\
  \ prices.length → j < prices.length → prices[i]! = prices[j]!) :\n  maxProfit prices\
  \ = 0 :=\n  sorry\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval maxProfit [3, 3, 5,\
  \ 0, 0, 3, 1, 4]\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval maxProfit [1, 2, 3,\
  \ 4, 5]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval maxProfit [7, 6, 4, 3, 1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
