"vc-description": "Christmas is coming, and Santa has a long list to go through, to\
  \ find who deserves presents for the big day. Go through a list of children, and\
  \ return a list containing every child who appeared on Santa's list. Do not add\
  \ any child more than once. Output should be sorted.\n~~~if:java\nFor java, use\
  \ Lists.\n~~~\n\nComparison should be case sensitive and the returned list should\
  \ contain only one copy of each name: `\"Sam\"` and `\"sam\"` are different, but\
  \ `\"sAm\"` and `\"sAm\"` are not."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_children (santas_list : List String) (children : List\
  \ String) : List String := sorry\n\ndef isSorted (xs : List String) : Prop :=\n\
  \  ∀ i j, i < j → j < xs.length → xs[i]! ≤ xs[j]!\n"
"vc-theorems": "theorem find_children_sorted (santas_list children : List String)\
  \ :\n  let result := find_children santas_list children\n  isSorted result := sorry\n\
  \n\ntheorem find_children_subset (santas_list children : List String) :\n  let result\
  \ := find_children santas_list children\n  (∀ x ∈ result, x ∈ santas_list ∧ x ∈\
  \ children) := sorry\n  \n\ntheorem find_children_complete_intersection (santas_list\
  \ children : List String) :\n  let result := find_children santas_list children\n\
  \  ∀ x, (x ∈ santas_list ∧ x ∈ children) → x ∈ result := sorry\n\n\ntheorem find_children_no_duplicates\
  \ (santas_list children : List String) :\n  let result := find_children santas_list\
  \ children\n  ∀ i j, i < j → j < result.length → result[i]! ≠ result[j]! := sorry\n\
  \n\ntheorem find_children_identity (names : List String) :\n  let result := find_children\
  \ names names\n  (∀ x ∈ result, x ∈ names) ∧\n  (∀ x ∈ names, x ∈ result) ∧\n  isSorted\
  \ result := sorry\n\n\ntheorem find_children_symmetry (list1 list2 : List String)\
  \ :\n  find_children list1 list2 = find_children list2 list1 := sorry\n\n\ntheorem\
  \ find_children_empty (names : List String) :\n  find_children names [] = [] ∧\n\
  \  find_children [] names = [] := sorry\n\n/--\ninfo: ['Jason', 'Jordan']\n-/\n\
  #guard_msgs in\n#eval find_children [\"Jason\", \"Jackson\", \"Jordan\", \"Johnny\"\
  ] [\"Jason\", \"Jordan\", \"Jennifer\"]\n\n/--\ninfo: ['JJ', 'Jason']\n-/\n#guard_msgs\
  \ in\n#eval find_children [\"Jason\", \"Jackson\", \"Johnson\", \"JJ\"] [\"Jason\"\
  , \"James\", \"JJ\"]\n\n/--\ninfo: ['JAsoN', 'jASon']\n-/\n#guard_msgs in\n#eval\
  \ find_children [\"jASon\", \"JAsoN\", \"JaSON\", \"jasON\"] [\"JasoN\", \"jASOn\"\
  , \"JAsoN\", \"jASon\", \"JASON\"]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
