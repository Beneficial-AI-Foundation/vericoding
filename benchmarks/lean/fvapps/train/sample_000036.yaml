"vc-description": "It is lunch time for Mole. His friend, Marmot, prepared him a nice\
  \ game for lunch.\n\nMarmot brought Mole n ordered piles of worms such that i-th\
  \ pile contains a_{i} worms. He labeled all these worms with consecutive integers:\
  \ worms in first pile are labeled with numbers 1 to a_1, worms in second pile are\
  \ labeled with numbers a_1 + 1 to a_1 + a_2 and so on. See the example for a better\
  \ understanding.\n\nMole can't eat all the worms (Marmot brought a lot) and, as\
  \ we all know, Mole is blind, so Marmot tells him the labels of the best juicy worms.\
  \ Marmot will only give Mole a worm if Mole says correctly in which pile this worm\
  \ is contained.\n\nPoor Mole asks for your help. For all juicy worms said by Marmot,\
  \ tell Mole the correct answers.\n\n\n-----Input-----\n\nThe first line contains\
  \ a single integer n (1 ≤ n ≤ 10^5), the number of piles.\n\nThe second line contains\
  \ n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^3, a_1 + a_2 + ... + a_{n} ≤ 10^6),\
  \ where a_{i} is the number of worms in the i-th pile.\n\nThe third line contains\
  \ single integer m (1 ≤ m ≤ 10^5), the number of juicy worms said by Marmot.\n\n\
  The fourth line contains m integers q_1, q_2, ..., q_{m} (1 ≤ q_{i} ≤ a_1 + a_2\
  \ + ... + a_{n}), the labels of the juicy worms.\n\n\n-----Output-----\n\nPrint\
  \ m lines to the standard output. The i-th line should contain an integer, representing\
  \ the number of the pile where the worm labeled with the number q_{i} is.\n\n\n\
  -----Examples-----\nInput\n5\n2 7 3 4 9\n3\n1 25 11\n\nOutput\n1\n5\n3\n\n\n\n-----Note-----\n\
  \nFor the sample input:\n\n  The worms with labels from [1, 2] are in the first\
  \ pile.  The worms with labels from [3, 9] are in the second pile.  The worms with\
  \ labels from [10, 12] are in the third pile.  The worms with labels from [13, 16]\
  \ are in the fourth pile.  The worms with labels from [17, 25] are in the fifth\
  \ pile."
"vc-preamble": "import Imports.AllImports\n\ndef List.sum (xs : List Nat) : Nat :=\n\
  \  match xs with\n  | [] => 0\n  | x :: xs => x + List.sum xs\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_pile_numbers (n : Nat) (pile_sizes : List Nat) (m : Nat)\
  \ (labels : List Nat) : List Nat :=\n  sorry\n\n-- Properties about length and valid\
  \ pile numbers"
"vc-theorems": "theorem find_pile_nums_length (n : Nat) (pile_sizes : List Nat) (m\
  \ : Nat) (labels : List Nat)\n    (h1 : pile_sizes.length = n)\n    (h2 : labels.length\
  \ = m)\n    (h3 : n > 0)\n    (h4 : m > 0)\n    (h5 : ∀ x ∈ pile_sizes, x > 0)\n\
  \    (h6 : ∀ x ∈ labels, x > 0) :\n    (find_pile_numbers n pile_sizes m labels).length\
  \ = labels.length :=\n  sorry\n\n\ntheorem find_pile_nums_valid_output (n : Nat)\
  \ (pile_sizes : List Nat) (m : Nat) (labels : List Nat)\n    (h1 : pile_sizes.length\
  \ = n)\n    (h2 : labels.length = m)\n    (h3 : n > 0)\n    (h4 : m > 0)\n    (h5\
  \ : ∀ x ∈ pile_sizes, x > 0)\n    (h6 : ∀ x ∈ labels, x > 0) :\n    ∀ x ∈ find_pile_numbers\
  \ n pile_sizes m labels, 1 ≤ x ∧ x ≤ n :=\n  sorry\n\n-- Property about correct\
  \ pile indices based on prefix sums\n\ntheorem find_pile_nums_correct_indices (n\
  \ : Nat) (pile_sizes : List Nat) (m : Nat) (labels : List Nat)\n    (h1 : pile_sizes.length\
  \ = n)\n    (h2 : labels.length = m)\n    (h3 : n > 0)\n    (h4 : m > 0)\n    (h5\
  \ : ∀ x ∈ pile_sizes, x > 0)\n    (h6 : ∀ x ∈ labels, x > 0) :\n    ∀ (i : Nat)\
  \ (label : Nat) (pile_num : Nat),\n      (label ∈ labels) →\n      (pile_num ∈ find_pile_numbers\
  \ n pile_sizes m labels) →\n      label ≤ (List.take i pile_sizes).sum →\n     \
  \ pile_num ≤ i :=\n  sorry\n\n-- Property about identical labels mapping to same\
  \ pile\n\ntheorem find_pile_nums_identical_labels (n : Nat) (pile_sizes : List Nat)\
  \ (label : Nat)\n    (h1 : pile_sizes.length = n)\n    (h2 : n > 0)\n    (h3 : ∀\
  \ x ∈ pile_sizes, x > 0)\n    (h4 : label > 0) :\n    let labels := List.replicate\
  \ 3 label\n    let result := find_pile_numbers n pile_sizes 3 labels\n    ∀ (x y\
  \ : Nat), x ∈ result → y ∈ result → x = y :=\n  sorry\n\n-- Property about single\
  \ pile case\n\ntheorem find_pile_nums_single_pile (pile_size : Nat)\n    (h : pile_size\
  \ > 0) :\n    find_pile_numbers 1 [pile_size] 1 [1] = [1] :=\n  sorry\n\n/--\ninfo:\
  \ [1, 5, 3]\n-/\n#guard_msgs in\n#eval find_pile_numbers 5 [2, 7, 3, 4, 9] 3 [1,\
  \ 25, 11]\n\n/--\ninfo: [2, 3]\n-/\n#guard_msgs in\n#eval find_pile_numbers 3 [1,\
  \ 2, 3] 2 [2, 6]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
