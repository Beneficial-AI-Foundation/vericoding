"vc-description": "Bob recently read about bitwise operations used in computers: AND,\
  \ OR and XOR. He have studied their properties and invented a new game.\n\nInitially,\
  \ Bob chooses integer m, bit depth of the game, which means that all numbers in\
  \ the game will consist of m bits. Then he asks Peter to choose some m-bit number.\
  \ After that, Bob computes the values of n variables. Each variable is assigned\
  \ either a constant m-bit number or result of bitwise operation. Operands of the\
  \ operation may be either variables defined before, or the number, chosen by Peter.\
  \ After that, Peter's score equals to the sum of all variable values.\n\nBob wants\
  \ to know, what number Peter needs to choose to get the minimum possible score,\
  \ and what number he needs to choose to get the maximum possible score. In both\
  \ cases, if there are several ways to get the same score, find the minimum number,\
  \ which he can choose.\n\n\n-----Input-----\n\nThe first line contains two integers\
  \ n and m, the number of variables and bit depth, respectively (1 ≤ n ≤ 5000; 1\
  \ ≤ m ≤ 1000). \n\nThe following n lines contain descriptions of the variables.\
  \ Each line describes exactly one variable. Description has the following format:\
  \ name of a new variable, space, sign \":=\", space, followed by one of:  Binary\
  \ number of exactly m bits.  The first operand, space, bitwise operation (\"AND\"\
  , \"OR\" or \"XOR\"), space, the second operand. Each operand is either the name\
  \ of variable defined before or symbol '?', indicating the number chosen by Peter.\
  \  \n\nVariable names are strings consisting of lowercase Latin letters with length\
  \ at most 10. All variable names are different.\n\n\n-----Output-----\n\nIn the\
  \ first line output the minimum number that should be chosen by Peter, to make the\
  \ sum of all variable values minimum possible, in the second line output the minimum\
  \ number that should be chosen by Peter, to make the sum of all variable values\
  \ maximum possible. Both numbers should be printed as m-bit binary numbers.\n\n\n\
  -----Examples-----\nInput\n3 3\na := 101\nb := 011\nc := ? XOR b\n\nOutput\n011\n\
  100\n\nInput\n5 1\na := 1\nbb := 0\ncx := ? OR a\nd := ? XOR ?\ne := d AND bb\n\n\
  Output\n0\n0\n\n\n\n-----Note-----\n\nIn the first sample if Peter chooses a number\
  \ 011_2, then a = 101_2, b = 011_2, c = 000_2, the sum of their values is 8. If\
  \ he chooses the number 100_2, then a = 101_2, b = 011_2, c = 111_2, the sum of\
  \ their values is 15.\n\nFor the second test, the minimum and maximum sum of variables\
  \ a, bb, cx, d and e is 2, and this sum doesn't depend on the number chosen by Peter,\
  \ so the minimum Peter can choose is 0."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_game (n m : Nat) (cmds : List String) : String × String\
  \ := sorry\n\ndef fromBinaryString (s : String) : Nat := sorry\n"
"vc-theorems": "theorem constant_assignment_theorem {n m : Nat} {cmd : String}\n \
  \ (hn : 2 ≤ n ∧ n ≤ 5)\n  (hm : 1 ≤ m ∧ m ≤ 5)\n  (hcmd : ∃ bin_str : String, cmd\
  \ = s!\"a := {bin_str}\" ∧ bin_str.length = 5 ∧ (∀ c ∈ bin_str.data, c = '0' ∨ c\
  \ = '1')) :\n  let (min_val, max_val) := solve_game n m [cmd]\n  -- Length assertions\n\
  \  min_val.length = m ∧\n  max_val.length = m ∧\n  -- Binary string assertions\n\
  \  (∀ c ∈ min_val.data, c = '0' ∨ c = '1') ∧\n  (∀ c ∈ max_val.data, c = '0' ∨ c\
  \ = '1') ∧\n  -- Value comparison\n  (fromBinaryString min_val) ≤ (fromBinaryString\
  \ max_val) := sorry\n\n\ntheorem single_wildcard_operation_theorem {n m : Nat} {const\
  \ : String}  \n  (hn : 2 ≤ n ∧ n ≤ 5)\n  (hm : m = 5)\n  (hconst : const.length\
  \ = 5 ∧ (∀ c ∈ const.data, c = '0' ∨ c = '1')) :\n  let cmds := [s!\"a := {const}\"\
  , \"b := ? XOR a\"]\n  let (min_val, max_val) := solve_game n m cmds\n  -- Length\
  \ assertions\n  min_val.length = m ∧\n  max_val.length = m ∧\n  -- Binary string\
  \ assertions\n  (∀ c ∈ min_val.data, c = '0' ∨ c = '1') ∧\n  (∀ c ∈ max_val.data,\
  \ c = '0' ∨ c = '1') := sorry"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
