"vc-description": "Given n words w[1..n], which originate from the same stem (e.g.\
  \ grace, graceful, disgraceful, gracefully), we are interested in the original stem.\
  \ To simplify the problem, we define the stem as the longest consecutive substring\
  \ that occurs in all the n words. If there are ties, we will choose the smallest\
  \ one in the alphabetical (lexicographic) order.\n\n-----Input-----\nThe first line\
  \ contains an integer T denoting the total number of test cases.\nIn each test cases,\
  \ the first line contains an integer n denoting the number of words. In the second\
  \ line, n words w[1..n] consisting of lower case characters are given as a single\
  \ space-spearated list.\n\n-----Output-----\nFor each test case, output the stem\
  \ in a new line.\n\n-----Constraints-----\n- 1 <= T <= 10\n- 1 <= n <= 10\n- 1 <=\
  \ |w[i]| <= 20\n\n-----Example-----\nInput:\n1\n4\ngrace graceful disgraceful gracefully\n\
  Output:\ngrace\n\n-----Explanation-----\nThe stem is grace."
"vc-preamble": "import Imports.AllImports\n\ndef isInfixOf (sub str : String) : Bool\
  \ := sorry \ndef substr (s : String) (i len : Nat) : String := sorry"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_stem (words : List String) : String := sorry\n\ntheorem\
  \ stem_exists_in_all_words (words : List String) :\n  let stem := find_stem words\n\
  \  ∀ word ∈ words, isInfixOf stem word := sorry\n"
"vc-theorems": "theorem stem_is_substring_of_first_word (words : List String) (h :\
  \ words.length > 0) :\n  let stem := find_stem words\n  isInfixOf stem (words.get\
  \ ⟨0, h⟩) := sorry\n\n\ntheorem stem_length_consistency (words : List String) (h\
  \ : words.length > 0) :\n  let stem := find_stem words\n  let first := words.get\
  \ ⟨0, h⟩\n  ∀ i j, i < j → j ≤ first.length →\n    let substring := substr first\
  \ i (j-i)\n    (∀ word ∈ words, isInfixOf substring word) →\n    substring.length\
  \ ≤ stem.length ∨ \n    (substring.length = stem.length ∧ stem ≤ substring) := sorry\n\
  \n/--\ninfo: 'grace'\n-/\n#guard_msgs in\n#eval find_stem [\"grace\", \"graceful\"\
  , \"disgraceful\", \"gracefully\"]\n\n/--\ninfo: 'cat'\n-/\n#guard_msgs in\n#eval\
  \ find_stem [\"cat\", \"catch\", \"cathedral\"]\n\n/--\ninfo: 'python'\n-/\n#guard_msgs\
  \ in\n#eval find_stem [\"python\", \"pythonic\", \"pythoness\"]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
