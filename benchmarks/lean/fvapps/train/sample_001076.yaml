"vc-description": "Given an array A of length N, your task is to find the element\
  \ which repeats in A maximum number of times as well as the corresponding count.\
  \ In case of ties, choose the smaller element first.\n\n-----Input-----\nFirst line\
  \ of input contains an integer T, denoting the number of test cases. Then follows\
  \ description of T cases. Each case begins with a single integer N, the length of\
  \ A. Then follow N space separated integers in next line.  Assume that 1 <= T <=\
  \ 100, 1 <= N <= 100 and for all i in [1..N] : 1 <= A[i] <= 10000\n\n-----Output-----\n\
  For each test case, output two space separated integers V & C. V is the value which\
  \ occurs maximum number of times and C is its count.\n\n-----Example-----\nInput:\n\
  2\n5\n1 2 3 2 5\n6\n1 2 2 1 1 2\n\nOutput:\n2 2\n1 3\n\nDescription:\nIn first case\
  \ 2 occurs twice whereas all other elements occur only once. \nIn second case, both\
  \ 1 and 2 occur 3 times but 1 is smaller than 2."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_max_repeating (arr : List Int) : Int × Nat := sorry\n\n\
  def List.sorted (l : List Int) : Prop :=\n  ∀ i j, i < j → j < l.length → l[i]!\
  \ ≤ l[j]!\n"
"vc-theorems": "theorem find_max_repeating_val_exists {arr : List Int} (h : arr ≠\
  \ []) : \n  let (val, _) := find_max_repeating arr\n  val ∈ arr := sorry\n\n\ntheorem\
  \ find_max_repeating_count_correct {arr : List Int} (h : arr ≠ []) :\n  let (val,\
  \ count) := find_max_repeating arr  \n  (arr.filter (· = val)).length = count :=\
  \ sorry\n\n\ntheorem find_max_repeating_is_max {arr : List Int} (h : arr ≠ []) :\n\
  \  let (val, count) := find_max_repeating arr\n  ∀ x ∈ arr, (arr.filter (· = x)).length\
  \ ≤ count := sorry\n\n\ntheorem find_max_repeating_smallest {arr : List Int} (h\
  \ : arr ≠ []) :\n  let (val, count) := find_max_repeating arr\n  ∀ x ∈ arr, (arr.filter\
  \ (· = x)).length = count → val ≤ x := sorry\n\n\ntheorem find_max_repeating_count_bounds\
  \ {arr : List Int} (h : arr ≠ []) :\n  let (_, count) := find_max_repeating arr\n\
  \  1 ≤ count ∧ count ≤ arr.length := sorry\n\n\ntheorem find_max_repeating_sorted\
  \ {arr : List Int} (h : arr ≠ []) (h2 : arr.sorted) :\n  let (val, count) := find_max_repeating\
  \ arr\n  let head := arr.head h\n  (arr.filter (· = head)).length = count → val\
  \ = head := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
