"vc-description": "Given an equation, represented by words on left side and the result\
  \ on right side.\nYou need to check if the equation is solvable under the following\
  \ rules:\n\nEach character is decoded as one digit (0 - 9).\nEvery pair of different\
  \ characters they must map to different digits.\nEach words[i] and result are decoded\
  \ as one number without leading zeros.\nSum of numbers on left side (words) will\
  \ equal to the number on right side (result). \n\nReturn True if the equation is\
  \ solvable otherwise return False.\n \nExample 1:\nInput: words = [\"SEND\",\"MORE\"\
  ], result = \"MONEY\"\nOutput: true\nExplanation: Map 'S'-> 9, 'E'->5, 'N'->6, 'D'->7,\
  \ 'M'->1, 'O'->0, 'R'->8, 'Y'->'2'\nSuch that: \"SEND\" + \"MORE\" = \"MONEY\" ,\
  \  9567 + 1085 = 10652\nExample 2:\nInput: words = [\"SIX\",\"SEVEN\",\"SEVEN\"\
  ], result = \"TWENTY\"\nOutput: true\nExplanation: Map 'S'-> 6, 'I'->5, 'X'->0,\
  \ 'E'->8, 'V'->7, 'N'->2, 'T'->1, 'W'->'3', 'Y'->4\nSuch that: \"SIX\" + \"SEVEN\"\
  \ + \"SEVEN\" = \"TWENTY\" ,  650 + 68782 + 68782 = 138214\nExample 3:\nInput: words\
  \ = [\"THIS\",\"IS\",\"TOO\"], result = \"FUNNY\"\nOutput: true\n\nExample 4:\n\
  Input: words = [\"LEET\",\"CODE\"], result = \"POINT\"\nOutput: false\n\n \nConstraints:\n\
  \n2 <= words.length <= 5\n1 <= words[i].length, result.length <= 7\nwords[i], result contains\
  \ only upper case English letters.\nNumber of different characters used on the expression\
  \ is at most 10."
"vc-preamble": "import Imports.AllImports\n\ndef Solution := String\n\ndef isSolvable\
  \ (words : List String) (result : String) : Bool :=\n  sorry\n\n\ndef isAlpha (s\
  \ : String) : Bool :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isUpper (s : String) : Bool :=\n  sorry \n"
"vc-theorems": "theorem valid_solution_constraints {words : List String} {result :\
  \ String}\n  (h1 : ∀ w ∈ words, isAlpha w ∧ isUpper w)\n  (h2 : isAlpha result ∧\
  \ isUpper result) \n  (h3 : words.length > 0)\n  (h4 : ∀ w ∈ words, w.length > 0)\n\
  \  (h5 : result.length ≥ words.foldr (fun w acc => max w.length acc) 0) :\n  ∃ solution\
  \ : Bool, isSolvable words result = solution :=\n  sorry\n\n\ntheorem known_valid_cases_work\
  \ \n  (h1 : isSolvable [\"SEND\", \"MORE\"] \"MONEY\" = true)\n  (h2 : isSolvable\
  \ [\"SIX\", \"SEVEN\", \"SEVEN\"] \"TWENTY\" = true) :\n  ∀ words result, \n   \
  \ (words = [\"SEND\", \"MORE\"] ∧ result = \"MONEY\") ∨\n    (words = [\"SIX\",\
  \ \"SEVEN\", \"SEVEN\"] ∧ result = \"TWENTY\") →\n    isSolvable words result =\
  \ true :=\n  sorry\n\n\ntheorem modified_valid_case_exists_solution\n  {words result\
  \ : String} \n  (h1 : words.length > 0)\n  (h2 : result.length > 0)\n  (h3 : ∃ (orig_words\
  \ : List String) (orig_result : String),\n        ((orig_words = [\"SEND\", \"MORE\"\
  ] ∧ orig_result = \"MONEY\") ∨\n         (orig_words = [\"SIX\", \"SEVEN\", \"SEVEN\"\
  ] ∧ orig_result = \"TWENTY\")) ∧\n        words.length = orig_result.length) :\n\
  \  ∃ solution : Bool, isSolvable [words] result = solution :=\n  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
