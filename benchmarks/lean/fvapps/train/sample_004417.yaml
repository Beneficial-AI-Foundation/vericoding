"vc-description": "Born a misinterpretation of [this kata](https://www.codewars.com/kata/simple-fun-number-334-two-beggars-and-gold/),\
  \ your task here is pretty simple: given an array of values and an amount of beggars,\
  \ you are supposed to return an array with the sum of what each beggar brings home,\
  \ assuming they all take regular turns, from the first to the last.\n\nFor example:\
  \ `[1,2,3,4,5]` for `2` beggars will return a result of `[9,6]`, as the first one\
  \ takes `[1,3,5]`, the second collects `[2,4]`.\n\nThe same array with `3` beggars\
  \ would have in turn have produced a better out come for the second beggar: `[5,7,3]`,\
  \ as they will respectively take `[1,4]`, `[2,5]` and `[3]`.\n\nAlso note that not\
  \ all beggars have to take the same amount of \"offers\", meaning that the length\
  \ of the array is not necessarily a multiple of `n`; length can be even shorter,\
  \ in which case the last beggars will of course take nothing (`0`).\n\n***Note:***\
  \ in case you don't get why this kata is about *English* beggars, then you are not\
  \ familiar on how religiously queues are taken in the kingdom ;)"
"vc-preamble": "import Imports.AllImports\n\ndef List.sum : List Int → Int \n  | []\
  \ => 0\n  | x::xs => x + sum xs\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def beggars (values : List Int) (n : Nat) : List Int := sorry\n\
  \ndef getNth (values : List Int) (n i : Nat) : Int :=\n  match values with\n  |\
  \ [] => 0\n  | x::xs => if i % n = 0 then x + getNth xs n (i+1) else getNth xs n\
  \ (i+1)\n"
"vc-theorems": "theorem beggars_empty_for_zero_n \n  (values : List Int) :\n  beggars\
  \ values 0 = [] := sorry\n\n\ntheorem beggars_length_property \n  (values : List\
  \ Int) (n : Nat) : \n  n > 0 → (beggars values n).length = n := sorry \n\n\ntheorem\
  \ beggars_sum_property \n  (values : List Int) (n : Nat) :\n  n > 0 → List.sum values\
  \ = List.sum (beggars values n) := sorry\n\n\ntheorem beggars_single_beggar_property\n\
  \  (values : List Int) :\n  values.length > 0 → beggars values 1 = [List.sum values]\
  \ := sorry\n\n\ntheorem beggars_more_beggars_property\n  (values : List Int) (n\
  \ : Nat) :\n  n > values.length →\n  beggars values n = \n    beggars values values.length\
  \ ++ List.replicate (n - values.length) 0 := sorry\n\n/--\ninfo: [15]\n-/\n#guard_msgs\
  \ in\n#eval beggars [1, 2, 3, 4, 5] 1\n\n/--\ninfo: [9, 6]\n-/\n#guard_msgs in\n\
  #eval beggars [1, 2, 3, 4, 5] 2\n\n/--\ninfo: [5, 7, 3]\n-/\n#guard_msgs in\n#eval\
  \ beggars [1, 2, 3, 4, 5] 3\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
