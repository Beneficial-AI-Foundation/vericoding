"vc-description": "< PREVIOUS KATA\nNEXT KATA >\n\n## Task:\n\nYou have to write a\
  \ function `pattern` which returns the following Pattern(See Examples) upto desired\
  \ number of rows. \n\n* Note:```Returning``` the pattern is not the same as ```Printing```\
  \ the pattern.\n\n### Parameters:\n    \n    pattern(        n        ,        x\
  \        ,        y        );\n                    ^                 ^         \
  \        ^   \n                    |                 |                 |\n     \
  \        Term upto which   Number of times   Number of times\n              Basic\
  \ Pattern     Basic Pattern     Basic Pattern\n                should be       \
  \  should be         should be\n                 created          repeated     \
  \      repeated\n                                horizontally        vertically\n\
  \    \n* Note: `Basic Pattern` means what we created in Complete The Pattern #12\n\
  \n## Rules/Note:\n\n* The pattern should be created using only unit digits.\n* If\
  \ `n < 1` then it should return \"\" i.e. empty string.\n* If `x <= 1` then the\
  \ basic pattern should not be repeated horizontally.\n* If `y <= 1` then the basic\
  \ pattern should not be repeated vertically.\n* `The length of each line is same`,\
  \ and is equal to the length of longest line in the pattern.\n* Range of Parameters\
  \ (for the sake of CW Compiler) :\n  + `n ∈ (-∞,25]`\n  + `x ∈ (-∞,10]`\n  + `y\
  \ ∈ (-∞,10]`\n* If only two arguments are passed then the function `pattern` should\
  \ run as if `y <= 1`.\n* If only one argument is passed then the function `pattern`\
  \ should run as if `x <= 1` & `y <= 1`.\n* The function `pattern` should work when\
  \ extra arguments are passed, by ignoring the extra arguments.\n   \n   \n## Examples:\n\
  \n* Having Three Arguments-\n\n + pattern(4,3,2):\n\n        1     1     1     1\n\
  \         2   2 2   2 2   2 \n          3 3   3 3   3 3  \n           4     4  \
  \   4   \n          3 3   3 3   3 3  \n         2   2 2   2 2   2 \n        1  \
  \   1     1     1\n         2   2 2   2 2   2 \n          3 3   3 3   3 3  \n  \
  \         4     4     4   \n          3 3   3 3   3 3  \n         2   2 2   2 2\
  \   2 \n        1     1     1     1\n       \n* Having Two Arguments-\n\n  + pattern(10,2):\n\
  \n        1                 1                 1\n         2               2 2  \
  \             2 \n          3             3   3             3  \n           4  \
  \         4     4           4   \n            5         5       5         5    \n\
  \             6       6         6       6     \n              7     7          \
  \ 7     7      \n               8   8             8   8       \n               \
  \ 9 9               9 9        \n                 0                 0         \n\
  \                9 9               9 9        \n               8   8           \
  \  8   8       \n              7     7           7     7      \n             6 \
  \      6         6       6     \n            5         5       5         5    \n\
  \           4           4     4           4   \n          3             3   3  \
  \           3  \n         2               2 2               2 \n        1      \
  \           1                 1\n\n* Having Only One Argument-\n\n  + pattern(25):\n\
  \n        1                                               1\n         2        \
  \                                     2 \n          3                          \
  \                 3  \n           4                                         4  \
  \ \n            5                                       5    \n             6  \
  \                                   6     \n              7                    \
  \               7      \n               8                                 8    \
  \   \n                9                               9        \n              \
  \   0                             0         \n                  1              \
  \             1          \n                   2                         2      \
  \     \n                    3                       3            \n            \
  \         4                     4             \n                      5        \
  \           5              \n                       6                 6        \
  \       \n                        7               7                \n          \
  \               8             8                 \n                          9  \
  \         9                  \n                           0         0          \
  \         \n                            1       1                    \n        \
  \                     2     2                     \n                           \
  \   3   3                      \n                               4 4            \
  \           \n                                5                        \n      \
  \                         4 4                       \n                         \
  \     3   3                      \n                             2     2        \
  \             \n                            1       1                    \n    \
  \                       0         0                   \n                       \
  \   9           9                  \n                         8             8  \
  \               \n                        7               7                \n  \
  \                     6                 6               \n                     \
  \ 5                   5              \n                     4                  \
  \   4             \n                    3                       3            \n\
  \                   2                         2           \n                  1\
  \                           1          \n                 0                    \
  \         0         \n                9                               9        \n\
  \               8                                 8       \n              7    \
  \                               7      \n             6                        \
  \             6     \n            5                                       5    \n\
  \           4                                         4   \n          3        \
  \                                   3  \n         2                            \
  \                 2 \n        1                                               1\n\
  \        \n>>>LIST OF ALL MY KATAS<<<"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def pattern (n : Int) (x : Int := 1) (y : Int := 1) : String :=\n\
  \  sorry\n"
"vc-theorems": "theorem pattern_invalid_input {n : Int} (h : n ≤ 0) :\n  pattern n\
  \ = \"\" := sorry\n\n\ntheorem pattern_valid_chars {n x y : Int} (hn : 1 ≤ n ∧ n\
  \ ≤ 9) (hx : 1 ≤ x ∧ x ≤ 5) (hy : 1 ≤ y ∧ y ≤ 5) :\n  ∀ c ∈ (pattern n x y).data,\
  \ \n    c ∈ ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ' ', '\\n'] := sorry\n\
  \n\ntheorem pattern_first_line {n x y : Int} (hn : 1 ≤ n ∧ n ≤ 9) (hx : 1 ≤ x ∧\
  \ x ≤ 5) (hy : 1 ≤ y ∧ y ≤ 5) :\n  let lines := String.split (pattern n x y) (·\
  \ = '\\n')\n  String.trim (lines.head!) = \"1\" := sorry\n\n\ntheorem pattern_indentation_increases\
  \ {n x y : Int} (hn : 1 ≤ n ∧ n ≤ 9) (hx : 1 ≤ x ∧ x ≤ 5) (hy : 1 ≤ y ∧ y ≤ 5) :\n\
  \  let lines := String.split (pattern n x y) (· = '\\n')\n  let middle := min (n-1)\
  \ (lines.length - 1)\n  ∀ i : Nat, i < middle →\n    (lines.get! i).length - (String.trimLeft\
  \ (lines.get! i)).length + 1 = \n    (lines.get! (i+1)).length - (String.trimLeft\
  \ (lines.get! (i+1))).length := sorry\n\n\ntheorem pattern_line_numbers {n : Int}\
  \ (hn : 1 ≤ n ∧ n ≤ 9) :\n  let lines := String.split (pattern n) (· = '\\n')\n\
  \  ∀ i : Nat, i < min n lines.length →\n    let num_char := Char.ofNat ((i + 1)\
  \ % 10 + '0'.toNat)\n    (lines.get! i).contains num_char := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
