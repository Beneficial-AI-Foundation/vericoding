vc-description: |-
  There is an array of strings. All strings contains similar _letters_ except one. Try to find it!

  ```python
  find_uniq([ 'Aa', 'aaa', 'aaaaa', 'BbBb', 'Aaaa', 'AaAaAa', 'a' ]) # => 'BbBb'
  find_uniq([ 'abc', 'acb', 'bac', 'foo', 'bca', 'cab', 'cba' ]) # => 'foo'
  ```

  Strings may contain spaces. Spaces is not significant, only non-spaces symbols matters. E.g. string that contains only spaces is like empty string.

  It’s guaranteed that array contains more than 3 strings.

  This is the second kata in series:

  1. [Find the unique number](https://www.codewars.com/kata/585d7d5adb20cf33cb000235)
  2. Find the unique string (this kata)
  3. [Find The Unique](https://www.codewars.com/kata/5862e0db4f7ab47bed0000e5)
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def find_uniq (arr : List String) : String := sorry

  def String.title (s : String) : String := sorry
vc-theorems: |
  theorem find_uniq_returns_unique_string 
    {base_str unique_str : String} {copies : Nat}
    (h_copies : copies ≥ 2) 
    (h_base_alph : ∀ c ∈ base_str.toList, c ∈ ['a', 'b', 'c'])
    (h_unique_alph : ∀ c ∈ unique_str.toList, c ∈ ['d', 'e', 'f'])
    : let test_arr := List.replicate copies base_str ++ [unique_str]
      let result := find_uniq test_arr 
      (∀ c ∈ result.toLower.toList, c ∉ base_str.toLower.toList) ∧ 
      result = unique_str := sorry


  theorem find_uniq_case_insensitive
    {base_str : String} {copies : Nat}
    (h_copies : copies ≥ 2)
    (h_base_alph : ∀ c ∈ base_str.toList, c ∈ ['a', 'b'])
    : let variations := [base_str, base_str.toUpper, base_str.toLower, base_str.title]
      let unique := String.mk (List.replicate base_str.length 'c')
      let test_arr := List.join (List.replicate copies variations) ++ [unique]
      find_uniq test_arr = unique := sorry


  theorem find_uniq_ignores_whitespace
    {base_str : String}
    (h_base_alph : ∀ c ∈ base_str.toList, c.toNat ≥ 65 ∧ c.toNat ≤ 90)
    : let test_arr := [s!" {base_str} ", base_str, s!"{base_str} ", "unique"]
      find_uniq test_arr = "unique" := sorry

  /--
  info: 'BbBb'
  -/
  #guard_msgs in
  #eval find_uniq ["Aa", "aaa", "aaaaa", "BbBb", "Aaaa", "AaAaAa", "a"]

  /--
  info: 'foo'
  -/
  #guard_msgs in
  #eval find_uniq ["abc", "acb", "bac", "foo", "bca", "cab", "cba"]

  /--
  info: 'victor'
  -/
  #guard_msgs in
  #eval find_uniq ["silvia", "vasili", "victor"]
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
