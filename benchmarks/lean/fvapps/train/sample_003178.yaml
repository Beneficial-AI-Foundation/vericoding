"vc-description": "There is an array of strings. All strings contains similar _letters_\
  \ except one. Try to find it!\n\n```python\nfind_uniq([ 'Aa', 'aaa', 'aaaaa', 'BbBb',\
  \ 'Aaaa', 'AaAaAa', 'a' ]) # => 'BbBb'\nfind_uniq([ 'abc', 'acb', 'bac', 'foo',\
  \ 'bca', 'cab', 'cba' ]) # => 'foo'\n```\n\nStrings may contain spaces. Spaces is\
  \ not significant, only non-spaces symbols matters. E.g. string that contains only\
  \ spaces is like empty string.\n\nIt’s guaranteed that array contains more than\
  \ 3 strings.\n\nThis is the second kata in series:\n\n1. [Find the unique number](https://www.codewars.com/kata/585d7d5adb20cf33cb000235)\n\
  2. Find the unique string (this kata)\n3. [Find The Unique](https://www.codewars.com/kata/5862e0db4f7ab47bed0000e5)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_uniq (arr : List String) : String := sorry\n\ndef String.title\
  \ (s : String) : String := sorry\n"
"vc-theorems": "theorem find_uniq_returns_unique_string \n  {base_str unique_str :\
  \ String} {copies : Nat}\n  (h_copies : copies ≥ 2) \n  (h_base_alph : ∀ c ∈ base_str.toList,\
  \ c ∈ ['a', 'b', 'c'])\n  (h_unique_alph : ∀ c ∈ unique_str.toList, c ∈ ['d', 'e',\
  \ 'f'])\n  : let test_arr := List.replicate copies base_str ++ [unique_str]\n  \
  \  let result := find_uniq test_arr \n    (∀ c ∈ result.toLower.toList, c ∉ base_str.toLower.toList)\
  \ ∧ \n    result = unique_str := sorry\n\n\ntheorem find_uniq_case_insensitive\n\
  \  {base_str : String} {copies : Nat}\n  (h_copies : copies ≥ 2)\n  (h_base_alph\
  \ : ∀ c ∈ base_str.toList, c ∈ ['a', 'b'])\n  : let variations := [base_str, base_str.toUpper,\
  \ base_str.toLower, base_str.title]\n    let unique := String.mk (List.replicate\
  \ base_str.length 'c')\n    let test_arr := List.join (List.replicate copies variations)\
  \ ++ [unique]\n    find_uniq test_arr = unique := sorry\n\n\ntheorem find_uniq_ignores_whitespace\n\
  \  {base_str : String}\n  (h_base_alph : ∀ c ∈ base_str.toList, c.toNat ≥ 65 ∧ c.toNat\
  \ ≤ 90)\n  : let test_arr := [s!\" {base_str} \", base_str, s!\"{base_str} \", \"\
  unique\"]\n    find_uniq test_arr = \"unique\" := sorry\n\n/--\ninfo: 'BbBb'\n-/\n\
  #guard_msgs in\n#eval find_uniq [\"Aa\", \"aaa\", \"aaaaa\", \"BbBb\", \"Aaaa\"\
  , \"AaAaAa\", \"a\"]\n\n/--\ninfo: 'foo'\n-/\n#guard_msgs in\n#eval find_uniq [\"\
  abc\", \"acb\", \"bac\", \"foo\", \"bca\", \"cab\", \"cba\"]\n\n/--\ninfo: 'victor'\n\
  -/\n#guard_msgs in\n#eval find_uniq [\"silvia\", \"vasili\", \"victor\"]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
