"vc-description": "There are n cards of different colours placed in a line, each of\
  \ them can be either red, green or blue cards. Count the minimum number of cards\
  \ to withdraw from the line so that no two adjacent cards have the same colour.\n\
  \n-----Input-----\n- The first line of each input contains an integer n— the total\
  \ number of cards.\n- The next line of the input contains a string s, which represents\
  \ the colours of the cards. We'll consider the cards in a line numbered from 1 to\
  \ n from left to right. Then the $i^t$$^h$ alphabet equals \"G\", if the $i^t$$^h$\
  \ card is green, \"R\" if the card is red,  and \"B\", if it's blue.\n\n-----Output-----\n\
  - Print a single integer — the answer to the problem.\n\n-----Constraints-----\n\
  - $1 \\leq n \\leq 50$\n\n-----Sample Input 1:-----\n5\nRGGBG\n\n-----Sample Input\
  \ 2:-----\n5\nRRRRR\n\n-----Sample Input 3:-----\n2\nBB\n\n-----Sample Output 1:-----\n\
  1\n\n-----Sample Output 2:-----\n4\n\n-----Sample Output 3:-----\n1"
"vc-preamble": "import Imports.AllImports\n\ndef count_min_cards_to_remove (n : Nat)\
  \ (colors : List Color) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def countAdjacentSame (colors : List Color) : Nat :=\n  (List.zip\
  \ colors colors.tail).filter (fun (x, y) => decide (x = y)) |>.length\n"
"vc-theorems": "theorem min_cards_upper_bound {n : Nat} {colors : List Color} \n \
  \ (h : colors.length = n) (h1 : n > 0) :\n  count_min_cards_to_remove n colors ≤\
  \ n - 1 :=\nsorry\n\n\ntheorem min_cards_non_negative {n : Nat} {colors : List Color}\
  \ \n  (h : colors.length = n) (h1 : n > 0) :\n  count_min_cards_to_remove n colors\
  \ ≥ 0 :=\nsorry\n\n\ntheorem min_cards_equals_adjacent_same {n : Nat} {colors :\
  \ List Color}\n  (h : colors.length = n) (h1 : n > 0) :\n  count_min_cards_to_remove\
  \ n colors = countAdjacentSame colors :=\nsorry\n\n\ntheorem min_cards_all_same_color\
  \ {n : Nat} {colors : List Color}\n  (h : colors.length = n) (h1 : n > 0)\n  (h2\
  \ : ∀ i j, i < colors.length → j < colors.length → colors[i]! = colors[j]!) :\n\
  \  count_min_cards_to_remove n colors = n - 1 :=\nsorry\n\n\ntheorem min_cards_alternating\
  \ {n : Nat} {colors : List Color}\n  (h : colors.length = n) (h1 : n ≥ 2)\n  (h2\
  \ : ∀ i, i < colors.length - 1 → colors[i]! ≠ colors[i+1]!) :\n  count_min_cards_to_remove\
  \ n colors = 0 :=\nsorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval count_min_cards_to_remove\
  \ 5 \"RGGBG\"\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval count_min_cards_to_remove\
  \ 5 \"RRRRR\"\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval count_min_cards_to_remove\
  \ 2 \"BB\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
