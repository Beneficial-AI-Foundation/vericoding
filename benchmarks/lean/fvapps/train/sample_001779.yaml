"vc-description": "Given a binary tree, determine if it is a valid binary search tree\
  \ (BST).\n\nAssume a BST is defined as follows:\n\n\n       The left subtree of\
  \ a node contains only nodes with keys less than the node's key.\n       The right\
  \ subtree of a node contains only nodes with keys greater than the node's key.\n\
  \       Both the left and right subtrees must also be binary search trees.\n\n\n\
  Example 1:\n\n\nInput:\n    2\n   / \\\n  1   3\nOutput: true\n\n\nExample 2:\n\n\
  \n    5\n   / \\\n  1   4\n     / \\\n    3   6\nOutput: false\nExplanation: The\
  \ input is: [5,1,4,null,null,3,6]. The root node's value\n             is 5 but\
  \ its right child's value is 4."
"vc-preamble": "import Imports.AllImports\n\ndef isValidBST : TreeNode → Bool :=\n\
  \  sorry\n\n\ndef make_valid_bst : List Int → TreeNode :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def insertIntoBST : TreeNode → Int → TreeNode :=\n  sorry\n"
"vc-theorems": "theorem valid_bst_from_sorted_values (values : List Int) :\n  isValidBST\
  \ (make_valid_bst values) = true :=\n  sorry\n\n\ntheorem empty_tree_is_valid :\n\
  \  isValidBST TreeNode.leaf = true :=\n  sorry \n\n\ntheorem single_node_is_valid\
  \ (value : Int) :\n  isValidBST (TreeNode.node value TreeNode.leaf TreeNode.leaf)\
  \ = true :=\n  sorry\n\n\ntheorem bst_remains_valid_after_insert (tree : TreeNode)\
  \ (value : Int) :\n  isValidBST tree = true →\n  isValidBST (insertIntoBST tree\
  \ value) = true :=\n  sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval isValidBST\
  \ TreeNode(2)\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval isValidBST TreeNode(5)\n\
  \n/--\ninfo: True\n-/\n#guard_msgs in\n#eval isValidBST TreeNode(1)\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
