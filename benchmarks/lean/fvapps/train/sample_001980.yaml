"vc-description": "You are given an array $a$ of $n$ integers.\n\nYou want to make\
  \ all elements of $a$ equal to zero by doing the following operation exactly three\
  \ times:  Select a segment, for each number in this segment we can add a multiple\
  \ of $len$ to it, where $len$ is the length of this segment (added integers can\
  \ be different). \n\nIt can be proven that it is always possible to make all elements\
  \ of $a$ equal to zero.\n\n\n-----Input-----\n\nThe first line contains one integer\
  \ $n$ ($1 \\le n \\le 100\\,000$): the number of elements of the array.\n\nThe second\
  \ line contains $n$ elements of an array $a$ separated by spaces: $a_1, a_2, \\\
  dots, a_n$ ($-10^9 \\le a_i \\le 10^9$).\n\n\n-----Output-----\n\nThe output should\
  \ contain six lines representing three operations.\n\nFor each operation, print\
  \ two lines:\n\n  The first line contains two integers $l$, $r$ ($1 \\le l \\le\
  \ r \\le n$): the bounds of the selected segment.\n\n  The second line contains\
  \ $r-l+1$ integers $b_l, b_{l+1}, \\dots, b_r$ ($-10^{18} \\le b_i \\le 10^{18}$):\
  \ the numbers to add to $a_l, a_{l+1}, \\ldots, a_r$, respectively; $b_i$ should\
  \ be divisible by $r - l + 1$. \n\n\n-----Example-----\nInput\n4\n1 3 2 4\n\nOutput\n\
  1 1 \n-1\n3 4\n4 2\n2 4\n-3 -6 -6"
"vc-preamble": "import Imports.AllImports\n\ndef solve_array_operations (n : Nat)\
  \ (arr : List Int) : List (Nat × Nat × List Int) := sorry\n\ndef verify_operations\
  \ (n : Nat) (arr : List Int) (ops : List (Nat × Nat × List Int)) : Bool := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def valid_operation (n : Nat) (op : Nat × Nat × List Int) : Bool\
  \ := sorry\n\ntheorem solve_array_operations_properties \n  (n : Nat) (arr : List\
  \ Int) (h : 0 < n) (h2 : n ≤ 100) :\n  let ops := solve_array_operations n arr\n\
  \  List.length ops = 3 ∧ \n  (∀ op ∈ ops, valid_operation n op) ∧\n  verify_operations\
  \ n arr ops := sorry\n"
"vc-theorems": "theorem solve_array_single_element\n  (n : Nat) (h : 0 < n) (h2 :\
  \ n ≤ 100) :\n  let arr := [1]\n  let ops := solve_array_operations 1 arr\n  List.length\
  \ ops = 3 ∧\n  ops[0]! = (1, 1, [0]) ∧\n  ops[1]! = (1, 1, [0]) ∧ \n  ops[2]! =\
  \ (1, 1, [-1]) := sorry"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded"
