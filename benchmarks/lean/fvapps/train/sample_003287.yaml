"vc-description": "Write a function `sumTimesTables` which sums the result of the\
  \ sums of the elements specified in `tables` multiplied by all the numbers in between\
  \ `min` and `max` including themselves.\n\nFor example, for `sumTimesTables([2,5],1,3)`\
  \ the result should be the same as\n```\n2*1 + 2*2 + 2*3 +\n5*1 + 5*2 + 5*3\n```\n\
  i.e. the table of two from 1 to 3 plus the table of five from 1 to 3\n\nAll the\
  \ numbers are integers but you must take in account:\n\n* `tables` could be empty.\n\
  * `min` could be negative.\n* `max` could be really big."
"vc-preamble": "import Imports.AllImports\n\ndef sum_list (xs : List Int) : Int :=\n\
  \  match xs with\n  | [] => 0\n  | x :: xs => x + sum_list xs\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sum_times_tables (tables : List Int) (min_val max_val : Int)\
  \ : Int :=\n  sorry\n"
"vc-theorems": "theorem sum_times_tables_zero_sum {tables : List Int} {min_val max_val\
  \ : Int} :\n  (sum_list tables = 0) → sum_times_tables tables min_val max_val =\
  \ 0 :=\nsorry\n\n\ntheorem sum_times_tables_equal_bounds {tables : List Int} {val\
  \ : Int} :\n  sum_times_tables tables val val = sum_list tables * val :=\nsorry\n\
  \n\ntheorem sum_times_tables_symmetric {tables : List Int} {min_val max_val : Int}\
  \ :\n  sum_times_tables tables min_val max_val = sum_times_tables tables min_val\
  \ max_val :=\nsorry\n\n\ntheorem sum_times_tables_zero_range {tables : List Int}\
  \ :\n  sum_times_tables tables 0 0 = 0 * sum_list tables :=\nsorry\n\n\ntheorem\
  \ sum_times_tables_positive {tables : List Int} {val : Int} :\n  (∀ x ∈ tables,\
  \ x > 0) → val > 0 → sum_times_tables tables 1 val ≥ 0 :=\nsorry\n\n/--\ninfo: 30\n\
  -/\n#guard_msgs in\n#eval sum_times_tables [2, 3] 1 3\n\n/--\ninfo: 9\n-/\n#guard_msgs\
  \ in\n#eval sum_times_tables [1, 3, 5] 1 1\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n\
  #eval sum_times_tables [-2, 2] -1 3\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
