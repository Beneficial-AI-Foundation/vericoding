"vc-description": "# Task\n Miss X has only two combs in her possession, both of which\
  \ are old and miss a tooth or two. She also has many purses of different length,\
  \ in which she carries the combs. The only way they fit is horizontally and without\
  \ overlapping. Given teeth' positions on both combs, find the minimum length of\
  \ the purse she needs to take them with her.\n\n It is guaranteed that there is\
  \ at least one tooth at each end of the comb. \n\n - Note, that the combs can not\
  \ be rotated/reversed.\n\n# Example\n\n For `comb1 = \"*..*\" and comb2 = \"*.*\"\
  `, the output should be `5`\n\n Although it is possible to place the combs like\
  \ on the first picture, the best way to do this is either picture 2 or picture 3.\n\
  \n ![](https://codefightsuserpics.s3.amazonaws.com/tasks/combs/img/cbs.png?_tm=1484930552851)\n\
  \n# Input/Output\n\n\n - `[input]` string `comb1`\n\n   A comb is represented as\
  \ a string. If there is an asterisk ('*') in the ith position, there is a tooth\
  \ there. Otherwise there is a dot ('.'), which means there is a missing tooth on\
  \ the comb.\n\n   Constraints: 1 ≤ comb1.length ≤ 10.\n   \n   \n\n - `[input]`\
  \ string `comb2`\n\n   The second comb is represented in the same way as the first\
  \ one.\n\n   Constraints: 1 ≤ comb2.length ≤ 10.\n   \n\n - `[output]` an integer\n\
  \n   The minimum length of a purse Miss X needs."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def CombString := String -- represents strings of only * and .\n\
  \ndef combs (a b : CombString) : Nat := sorry\n\n/-- The result length is at least\
  \ as long as the longest input -/"
"vc-theorems": "theorem combs_min_length {a b : CombString} :\n  combs a b ≥ max a.length\
  \ b.length := sorry\n\n/-- The result length is at most the sum of input lengths\
  \ -/\n\ntheorem combs_max_length {a b : CombString} :\n  combs a b ≤ a.length +\
  \ b.length := sorry\n\n/-- The function is symmetric -/\n\ntheorem combs_symmetric\
  \ {a b : CombString} :\n  combs a b = combs b a := sorry\n\n/-- Strings of all dots\
  \ combine to max length -/\n\ntheorem combs_all_dots {a b : CombString}\n  (ha :\
  \ ∀ c, c ∈ a.data → c = '.')\n  (hb : ∀ c, c ∈ b.data → c = '.') :\n  combs a b\
  \ = max a.length b.length := sorry\n\n/-- Strings of all stars combine to sum of\
  \ lengths -/\n\ntheorem combs_all_stars {a b : CombString}\n  (ha : ∀ c, c ∈ a.data\
  \ → c = '*')\n  (hb : ∀ c, c ∈ b.data → c = '*') :\n  combs a b = a.length + b.length\
  \ := sorry\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval combs \"*..*\" \"*.*\"\n\n\
  /--\ninfo: 5\n-/\n#guard_msgs in\n#eval combs \"*...*\" \"*.*\"\n\n/--\ninfo: 9\n\
  -/\n#guard_msgs in\n#eval combs \"*..*.*\" \"*.***\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
