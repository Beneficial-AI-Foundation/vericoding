"vc-description": "Create a function with two arguments that will return an array\
  \ of the first (n) multiples of (x). \n\nAssume both the given number and the number\
  \ of times to count will be positive numbers greater than 0. \n\nReturn the results\
  \ as an array (or list in Python, Haskell or Elixir).\n\nExamples:\n\n```python\n\
  count_by(1,10) #should return [1,2,3,4,5,6,7,8,9,10]\ncount_by(2,5) #should return\
  \ [2,4,6,8,10]\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def countBy (x : Int) (n : Int) : List Int :=\n  sorry\n"
"vc-theorems": "theorem count_by_len {x n : Int} (hx : x > 0) (hn : n > 0) :\n  (countBy\
  \ x n).length = n :=\n  sorry\n\n\ntheorem count_by_multiples {x n : Int} (hx :\
  \ x > 0) (hn : n > 0) :\n  ∀ i ∈ countBy x n, i % x = 0 :=\n  sorry\n\n\ntheorem\
  \ count_by_ascending {x n : Int} (hx : x > 0) (hn : n > 0) :\n  ∀ (i j : Nat), i\
  \ < j → j < (countBy x n).length → \n    (countBy x n)[i]! < (countBy x n)[j]! :=\n\
  \  sorry\n\n\ntheorem count_by_consecutive {x n : Int} (hx : x > 0) (hn : n > 0)\
  \ :\n  ∀ (i : Nat), i + 1 < (countBy x n).length →\n    (countBy x n)[i + 1]! -\
  \ (countBy x n)[i]! = x :=\n  sorry\n\n/--\ninfo: [1, 2, 3, 4, 5]\n-/\n#guard_msgs\
  \ in\n#eval count_by 1 5\n\n/--\ninfo: [2, 4, 6, 8, 10]\n-/\n#guard_msgs in\n#eval\
  \ count_by 2 5\n\n/--\ninfo: [100, 200, 300, 400, 500]\n-/\n#guard_msgs in\n#eval\
  \ count_by 100 5\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
