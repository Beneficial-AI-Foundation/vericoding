"vc-description": "In this Kata, you will implement the [Luhn Algorithm](http://en.wikipedia.org/wiki/Luhn_algorithm),\
  \ which is used to help validate credit card numbers.\n\nGiven a positive integer\
  \ of up to 16 digits, return ```true``` if it is a valid credit card number, and\
  \ ```false``` if it is not.\n\nHere is the algorithm:\n  \n* Double every other\
  \ digit, scanning **from right to left**, starting from the second digit (from the\
  \ right).\n\n  Another way to think about it is: if there are an **even** number\
  \ of digits, double every other digit starting with the **first**; if there are\
  \ an **odd** number of digits, double every other digit starting with the **second**:\n\
  \n  ```\n  1714 ==> [1*, 7, 1*, 4] ==> [2, 7, 2, 4]\n  \n  12345 ==> [1, 2*, 3,\
  \ 4*, 5] ==> [1, 4, 3, 8, 5]\n  \n  891 ==> [8, 9*, 1] ==> [8, 18, 1]\n  ```\n\n\
  *  If a resulting number is greater than `9`, replace it with the sum of its own\
  \ digits (which is the same as subtracting `9` from it):\n\n  ```\n  [8, 18*, 1]\
  \ ==> [8, (1+8), 1] ==> [8, 9, 1]\n  \n  or:\n  \n  [8, 18*, 1] ==> [8, (18-9),\
  \ 1] ==> [8, 9, 1]\n  ```\n  \n* Sum all of the final digits:\n\n  ```\n  [8, 9,\
  \ 1] ==> 8 + 9 + 1 = 18\n  ```\n\n* Finally, take that sum and divide it by `10`.\
  \  If the remainder equals zero, the original credit card number is valid.\n   \
  \ ```\n    18 (modulus) 10 ==> 8 , which is not equal to 0, so this is not a valid\
  \ credit card number\n    ```\n\n```if:fsharp,csharp\nFor F# and C# users:\n\nThe\
  \ input will be a string of spaces and digits `0..9`\n\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def validate (n : Nat) : Bool := sorry\n\ntheorem validate_is_boolean\
  \ (n : Nat) : \n  validate n = true ∨ validate n = false := sorry\n"
"vc-theorems": "theorem validate_string_invariant (n : Nat) :\n  validate n = validate\
  \ n := sorry\n\n\ntheorem validate_sixteen_digit_result {n : Nat} (h : 1000000000000000\
  \ ≤ n ∧ n ≤ 9999999999999999) :\n  validate n = true ∨ validate n = false := sorry\n\
  \n\ntheorem validate_sixteen_digit_length {n : Nat} (h : 1000000000000000 ≤ n ∧\
  \ n ≤ 9999999999999999) :\n  (toString n).length = 16 := sorry\n\n\ntheorem validate_string_digit_consistency\
  \ {n : Nat} {s : String} (h : toString n = s) :\n  validate n = validate (toString\
  \ n |> String.toNat!) := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
