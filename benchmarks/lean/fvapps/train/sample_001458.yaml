"vc-description": "Ishank lives in a country in which there are N$N$ cities and N−1$N-1$\
  \ roads. All the cities are connected via these roads. Each city has been assigned\
  \ a unique number from 1 to N$N$. The country can be assumed as a tree, with nodes\
  \ representing the cities and edges representing the roads. The tree is rooted at\
  \ 1.Every Time, when a traveler through a road, he will either gain some amount\
  \ or has to pay some amount.\nAbhineet is a traveler and wishes to travel to various\
  \ cities in this country. There's a law in the country for travelers, according\
  \ to which, when a traveler moves from the city A$A$ to city B$B$, where city A$A$\
  \ and B$B$ are connected by a road then the traveler is either paid or has to pay\
  \ the amount of money equal to profit or loss respectively. When he moves from A$A$\
  \ to B$B$, he hires a special kind of vehicle which can reverse its direction at\
  \ most once. Reversing the direction means earlier the vehicle is going towards\
  \ the root, then away from the root or vice versa. Abhineet is analyzing his trip\
  \ and therefore gave Q$Q$ queries to his friend, Ishank, a great coder. In every\
  \ query, he gives two cities A$A$ and B$B$. Ishank has to calculate the maximum\
  \ amount he can gain (if he cannot gain, then the minimum amount he will lose) if\
  \ he goes from the city A$A$ to city B$B$.\n\n-----Input:-----\n-The first line\
  \ of the input contains a two space-separated integers N and Q.\n-The next N-1 line\
  \ contains 3 space-separated integers Xi and Yi and Zi denoting that cities Xi and\
  \ Yi are connected by a road which gives profit Zi (Negative Zi represents loss).\n\
  -The next Q contains 2 space-separated integers A and B denoting two cities.\n\n\
  -----Output:-----\nPrint a single line corresponding to each query — the maximum\
  \ amount he can gain (if he cannot gain, then the minimum amount he will lose with\
  \ negative sign) if he goes from city A to city B.\n\n-----Constraints-----\n- 2≤N≤105$2\
  \ \\leq N \\leq 10^5$\n- 1≤Q≤105$1 \\leq Q \\leq 10^5$\n- 1≤Xi,Yi,A,B≤N$1 \\leq\
  \ Xi, Yi, A, B \\leq N$\n- abs(Zi)≤109$ abs(Zi) \\leq 10^9$\n\n-----Sample Input:-----\n\
  9 5\n1 2 8\n1 3 -9\n2 4 1\n2 5 -6\n3 6 7\n3 7 6\n6 8 3\n6 9 4\n1 2\n2 7\n4 3\n3\
  \ 2\n8 9\n\n-----Sample Output:-----\n10\n5\n0\n-1\n21\n\n-----EXPLANATION:-----\n\
  In the first query, he goes from 1 to 2, 2 to 4, takes a turn and go to 2. Therefore\
  \ profit=8+1+1=10."
"vc-preamble": "import Imports.AllImports\n\ndef solve_max_profit_path (n : Nat) (edges\
  \ : List (Nat × Nat × Int)) (queries : List (Nat × Nat)) : List Int := sorry\n\n\
  def isConnectedTree (edges : List (Nat × Nat × Int)) : Prop := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isValidPath (edges : List (Nat × Nat × Int)) (start finish\
  \ : Nat) (path : List Nat) : Prop := sorry\n\n\n\ntheorem singleton_tree_zero (u\
  \ v : Nat) \n  (h : u = 1 ∧ v = 1) : \n  solve_max_profit_path 1 [] [(u, v)] = [0]\
  \ := sorry\n"
"vc-theorems": "theorem line_graph_max_profit (edges : List (Nat × Nat × Int)) \n\
  \  (h_edges : edges = [(1, 2, 1), (2, 3, 1), (3, 4, 1)]) :\n  solve_max_profit_path\
  \ 4 edges [(1, 4)] = [3] := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
