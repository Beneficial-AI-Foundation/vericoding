"vc-description": "An array is said to be `hollow` if it contains `3` or more `0`s\
  \ in the middle that are preceded and followed by the same number of non-zero elements.\
  \ Furthermore, all the zeroes in the array must be in the middle of the array. \n\
  \nWrite a function named `isHollow`/`is_hollow`/`IsHollow` that accepts an integer\
  \ array and returns `true` if it is a hollow array,else `false`."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_hollow (arr : List Int) : Bool := sorry\n\ntheorem invalid_hollow_not_enough_zeros\
  \ {arr : List Int} :\n  (arr.filter (λ x => x = 0)).length < 3 → ¬(is_hollow arr)\
  \ := sorry\n"
"vc-theorems": "theorem invalid_hollow_nonzeros_between_zeros {arr : List Int} :\n\
  \  (∃ i j k, i < j ∧ j < k ∧ \n   arr.get! i = 0 ∧ arr.get! k = 0 ∧ arr.get! j ≠\
  \ 0) → \n  ¬(is_hollow arr) := sorry\n\n\ntheorem valid_hollow_construction {n left\
  \ right : Int} {zeros : List Int} :\n  n ≥ 3 → left ≠ 0 → right ≠ 0 → \n  zeros.all\
  \ (λ x => x = 0) → zeros.length = n →\n  is_hollow ([left] ++ zeros ++ [right])\
  \ := sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval is_hollow [-1, 0, 0, 0,\
  \ 3]\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval is_hollow [1, 0, 0, 0, 0]\n\n\
  /--\ninfo: True\n-/\n#guard_msgs in\n#eval is_hollow [2, 4, 0, 0, 0, 1, 3]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
