"vc-description": "In this kata, we will check is an array is (hyper)rectangular.\
  \  \nA rectangular array is an N-dimensional array with fixed sized within one dimension.\
  \ Its sizes can be repsented like A1xA2xA3...xAN. That means a N-dimensional array\
  \ has N sizes. The 'As' are the hyperrectangular properties of an array.\n\nYou\
  \ should implement a functions that returns a N-tuple with the arrays hyperrectangular\
  \ properties or None if the array is not hyperrectangular.\n```\nhyperrectangularity_properties(arr)\n\
  ```\n## Note\nAn empty array IS rectagular and has one dimension of length 0\n```\n\
  hyperrectangularity_properties([]) == (0,)\n```\n## Example\n```\n1D array\nhyperrectangularity_properties([1,2,3])\
  \ == (3,)\n\n2D arrays  \n\nhyperrectangularity_properties(\n                  \
  \              [[0,1,2],\n                                 [3,4,5],           \n\
  \                                 [6,7,8]] ) == (3,3)                          \
  \    \nhyperrectangularity_properties(\n                                [[0,1,2],\n\
  \                                 [3,4,5]] ) == (2,3)\nhyperrectangularity_properties(\
  \ \n                                [[0,1,2],\n                                \
  \ [3,4]  ] ) == None\n3D arrays  \nhyperrectangularity_properties(  \n         \
  \                       [\n                                 [ [0], [2] ],\n    \
  \                             [ [0], [2] ],  \n                                \
  \ [ [0], [2] ]\n                                              ] ) == (3,2,1)   \
  \ \nhyperrectangularity_properties(  \n                                [\n     \
  \                              [[0],[2]],\n                                   [[0],[2,2]],\
  \   \n                                   [[0],[2]]\n                           \
  \                   ] )  ==  None \nhyperrectangularity_properties(\n          \
  \                      [[ [], [], [] ]]\n                                      \
  \          ) ==  (1,3,0) \n```\n### Heterogeneous Arrays can appear too\n```\nhyperrectangularity_properties(\
  \      \n                                [[0,1,2],\n                           \
  \      3,   \n                                 [[4],5,6]] ) ==  None\nhyperrectangularity_properties(\
  \      \n                                [1,\n                                 [1,2],\
  \   \n                                 [[3],[4,[5]],[6]]\n                     \
  \                             ] ) ==  None\n                                   \
  \               hyperrectangularity_properties(\n                              \
  \  [[ [], [] ], [] ]\n                                                  ) ==  None\n\
  hyperrectangularity_properties(\n                                [ 1, [], [2, [3]]\
  \ ]\n                                                  ) ==  None\n```\nThe first\
  \ property shows the length of the outer layer. The second of the layer one step\
  \ deeper and so on. The function should handle higher dimensions too.\n\n\n## Input\n\
  ##### N-dimensional array of integers\n\n## Expected Ouput\n##### An N-tuple with\
  \ the hyperrectangularity properties"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def hyperrectangularity_properties : List α → Option (List Nat)\
  \ := sorry\n\ntheorem hyperrectangularity_2d_rectangular {rows cols : Nat} \n  (h1\
  \ : 0 < rows) (h2 : rows ≤ 5)\n  (h3 : 0 < cols) (h4 : cols ≤ 5)\n  (arr : List\
  \ (List Nat)) \n  (h5 : arr = List.map (fun j => List.map (fun i => i + j*cols)\
  \ (List.range cols)) (List.range rows))\n  : hyperrectangularity_properties arr\
  \ = some [rows, cols] := sorry\n"
"vc-theorems": "theorem hyperrectangularity_1d {arr : List α}\n  : hyperrectangularity_properties\
  \ arr = \n    if arr.isEmpty then some [0] else some [arr.length] := sorry\n\n\n\
  theorem hyperrectangularity_3d {x y z : Nat}\n  (h1 : 0 < x) (h2 : x ≤ 3)\n  (h3\
  \ : 0 < y) (h4 : y ≤ 3)  \n  (h5 : 0 < z) (h6 : z ≤ 3)\n  (arr : List (List (List\
  \ Nat)))\n  (h7 : arr = List.map (fun i => \n          List.map (fun j =>\n    \
  \        List.map (fun k => k + j*z + i*y*z) (List.range z)) \n          (List.range\
  \ y))\n        (List.range x))\n  : hyperrectangularity_properties arr = some [x,\
  \ y, z] := sorry\n\n\ntheorem hyperrectangularity_empty \n  : hyperrectangularity_properties\
  \ ([] : List α) = some [0] := sorry\n\n\ntheorem hyperrectangularity_non_rectangular\n\
  \  (arr : List (List Nat))\n  (h : arr = [[1,2], [1]])\n  : hyperrectangularity_properties\
  \ arr = none := sorry\n\n/--\ninfo: (0,)\n-/\n#guard_msgs in\n#eval hyperrectangularity_properties\
  \ []\n\n/--\ninfo: (3, 3)\n-/\n#guard_msgs in\n#eval hyperrectangularity_properties\
  \ [[0, 1, 2], [3, 4, 5], [6, 7, 8]]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
