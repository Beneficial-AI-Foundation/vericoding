"vc-description": "In the board game Talisman, when two players enter combat the outcome\
  \ is decided by a combat score, equal to the players power plus any modifiers plus\
  \ the roll of a standard 1-6 dice. The player with the highest combat score wins\
  \ and the opposing player loses a life. In the case of a tie combat ends with neither\
  \ player losing a life.\n\nFor example:\n```\nPlayer 1: 5 Power, 0 Modifier\nPlayer\
  \ 2: 3 Power, 2 Modifier\n\nPlayer 1 rolls a 4, Player 2 rolls a 2.\n\n(5 + 0 +\
  \ 4) -> (3 + 2 + 2)\nPlayer 1 wins (9 > 7)\n```\n\nYour task is to write a method\
  \ that calculates the required roll for the player to win.\n\nThe player and enemy\
  \ stats are given as an array in the format:\n```python\n[power, modifier]\n```\n\
  \nFor example for the examples used above the stats would be given as:\n```python\n\
  get_required([5, 0], [3, 2]) # returns 'Random'\n```\n\nIf the player has at least\
  \ 6 more power (including modifiers) than the enemy they automatically wins the\
  \ fight, as the enemy's combat score couldn't possibly exceed the player's. In this\
  \ instance the method should return \"Auto-win\".\n\nFor example:\n```python\nget_required([9,\
  \ 0], [2, 1]) # returns 'Auto-win' as the enemy can't possibly win\n```\n\nIf the\
  \ enemy has at least 6 more power (including modifiers) than the player they automatically\
  \ wins the fight, as the player's combat score couldn't possibly exceed the enemy's.\
  \ In this instance the method should return \"Auto-lose\".\n\nFor example:\n```python\n\
  get_required([2, 1], [9, 0]) # returns 'Auto-lose' as the player can't possibly\
  \ win\n```\n\nIf the player and enemy have the same power (including modifiers)\
  \ the outcome is purely down to the dice roll, and hence would be considered completely\
  \ random. In this instance the method should return \"Random\".\n\nFor example (as\
  \ above):\n```python\nget_required([5, 0], [3, 2]) # returns 'Random' as it is purely\
  \ down to the dice roll\n```\n\nIf the player has greater power than the enemy (including\
  \ modifiers) the player could guarantee a win by rolling a high enough number on\
  \ the dice. In this instance the method should return a range equal to the numbers\
  \ which would guarantee victory for the player.\n\n```python\nget_required([6, 0],\
  \ [2, 2]) # returns '(5..6)' as rolling a 5 or 6 would mean the enemy could not\
  \ win\nget_required([7, 1], [2, 2]) # returns '(3..6)' as rolling anything 3 through\
  \ 6 would mean the enemy could not win\n```\n\nIf the player has less power than\
  \ the enemy (including modifiers) the player can only win if the enemy rolls a low\
  \ enough number, providing they then roll a high enough number. In this instance\
  \ the method should return a range equal to the numbers which would allow the player\
  \ a chance to win.\n\n```python\nget_required([4, 0], [6, 0]) # returns '(1..3)'\
  \ as this would be the only outcome for which the player could still win\nget_required([1,\
  \ 1], [6, 0]) # returns '(1..1)' as this would be the only outcome for which the\
  \ player could still win\n```\n\nIf the better case scenario for the player is to\
  \ hope for a tie, then return `\"Pray for a tie!\"`.\n\n```python\nget_required([7,\
  \ 2], [6, 8]) # returns \"Pray for a tie!\"\n```"
"vc-preamble": "import Imports.AllImports\n\ndef List.sum : List Nat → Nat\n  | []\
  \ => 0\n  | x::xs => x + (sum xs)\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def get_required (player enemy : List Nat) : String :=\n  sorry\n"
"vc-theorems": "theorem get_required_diff_cases {player enemy : List Nat} \n  (h :\
  \ player.length ≥ 1 ∧ enemy.length ≥ 1) :\n  let diff : Int := Int.ofNat player.sum\
  \ - Int.ofNat enemy.sum\n  match diff with\n  | 0 => get_required player enemy =\
  \ \"Random\" \n  | d => \n    if d > 5 then get_required player enemy = \"Auto-win\"\
  \n    else if d < -5 then get_required player enemy = \"Auto-lose\" \n    else if\
  \ d = -5 then get_required player enemy = \"Pray for a tie!\"\n    else if d < 0\
  \ then get_required player enemy = s!\"(1..{6-d.toNat-1})\"\n    else get_required\
  \ player enemy = s!\"({6-d+1}..6)\" :=\n  sorry\n\n\ntheorem same_arrays_random\
  \ {xs : List Nat} (h : xs.length ≥ 1) :\n  get_required xs xs = \"Random\" :=\n\
  \  sorry\n\n\ntheorem get_required_symmetry {xs ys : List Nat}\n  (h : xs.length\
  \ ≥ 1 ∧ ys.length ≥ 1) :\n  (get_required xs ys = \"Auto-win\" → get_required ys\
  \ xs = \"Auto-lose\") ∧\n  (get_required xs ys = \"Auto-lose\" → get_required ys\
  \ xs = \"Auto-win\") :=\n  sorry\n\n/--\ninfo: 'Auto-win'\n-/\n#guard_msgs in\n\
  #eval get_required [8, 1] [3, 0]\n\n/--\ninfo: 'Random'\n-/\n#guard_msgs in\n#eval\
  \ get_required [4, 0] [4, 0]\n\n/--\ninfo: 'Pray for a tie!'\n-/\n#guard_msgs in\n\
  #eval get_required [7, 2] [6, 8]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
