"vc-description": "There are n student groups at the university. During the study\
  \ day, each group can take no more than 7 classes. Seven time slots numbered from\
  \ 1 to 7 are allocated for the classes.\n\nThe schedule on Monday is known for each\
  \ group, i. e. time slots when group will have classes are known.\n\nYour task is\
  \ to determine the minimum number of rooms needed to hold classes for all groups\
  \ on Monday. Note that one room can hold at most one group class in a single time\
  \ slot.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 ≤\
  \ n ≤ 1000) — the number of groups. \n\nEach of the following n lines contains a\
  \ sequence consisting of 7 zeroes and ones — the schedule of classes on Monday for\
  \ a group. If the symbol in a position equals to 1 then the group has class in the\
  \ corresponding time slot. In the other case, the group has no class in the corresponding\
  \ time slot.\n\n\n-----Output-----\n\nPrint minimum number of rooms needed to hold\
  \ all groups classes on Monday.\n\n\n-----Examples-----\nInput\n2\n0101010\n1010101\n\
  \nOutput\n1\n\nInput\n3\n0101011\n0011001\n0110111\n\nOutput\n3\n\n\n\n-----Note-----\n\
  \nIn the first example one room is enough. It will be occupied in each of the seven\
  \ time slot by the first group or by the second group.\n\nIn the second example\
  \ three rooms is enough, because in the seventh time slot all three groups have\
  \ classes."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def minRoomsNeeded (n : Nat) (schedules : List String) : Nat :=\
  \ sorry\n\ntheorem min_rooms_bounds (n : Nat) (schedules : List String) :\n  0 ≤\
  \ minRoomsNeeded n schedules ∧ minRoomsNeeded n schedules ≤ n := sorry\n"
"vc-theorems": "theorem min_rooms_concurrent (n : Nat) (schedules : List String) (day\
  \ : Nat) (h : day < 7) :\n  minRoomsNeeded n schedules ≥ (schedules.filter (fun\
  \ sch => sch.data[day]? = some '1')).length := sorry\n\n\ntheorem min_rooms_empty\
  \ (n : Nat) (schedules : List String) :\n  (schedules.all (fun sch => List.all sch.data\
  \ (· = '0'))) →\n  minRoomsNeeded n schedules = 0 := sorry\n\n\ntheorem min_rooms_full_day\
  \ (n : Nat) (schedules : List String) (day : Nat) (h : day < 7) :\n  (schedules.all\
  \ (fun sch => sch.data[day]? = some '1')) →\n  minRoomsNeeded n schedules = n :=\
  \ sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval min_rooms_needed 2 [\"0101010\"\
  , \"1010101\"]\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval min_rooms_needed 3 [\"\
  0101011\", \"0011001\", \"0110111\"]\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval\
  \ min_rooms_needed 1 [\"1111111\"]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
