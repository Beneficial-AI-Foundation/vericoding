"vc-description": "There are some stones on Bob's table in a row, and each of them\
  \ can be red, green or blue, indicated by the characters `R`, `G`, and `B`.\n\n\
  Help Bob find the minimum number of stones he needs to remove from the table so\
  \ that the stones in each pair of adjacent stones have different colours.\n\nExamples:\n\
  \n```\n\"RGBRGBRGGB\"   => 1\n\"RGGRGBBRGRR\"  => 3\n\"RRRRGGGGBBBB\" => 9\n```"
"vc-preamble": "import Imports.AllImports\n\ndef Stone := Char \n\ndef isRGBChar (c\
  \ : Char) : Prop :=\n  c = 'R' ∨ c = 'G' ∨ c = 'B'\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solution (stones : String) : Nat :=\n  sorry\n"
"vc-theorems": "theorem solution_non_negative (stones : String) \n  (h : ∀ c ∈ stones.data,\
  \ isRGBChar c) :\n  solution stones ≥ 0 := sorry\n\n\ntheorem solution_upper_bound\
  \ (stones : String)\n  (h : ∀ c ∈ stones.data, isRGBChar c) :\n  solution stones\
  \ ≤ stones.length - 1 := sorry\n\n\ntheorem solution_counts_adjacents (stones :\
  \ String)\n  (h : ∀ c ∈ stones.data, isRGBChar c) :\n  let adjacentPairs := List.range\
  \ (stones.length - 1)\n  let countMatches := (adjacentPairs.filter (fun i => stones.data[i]!\
  \ = stones.data[i+1]!)).length\n  solution stones = countMatches := sorry\n\n\n\
  theorem solution_zero_no_adjacents (stones : String)\n  (h : ∀ c ∈ stones.data,\
  \ isRGBChar c)\n  (h2 : solution stones = 0) :\n  ∀ i, i > 0 → i < stones.length\
  \ →\n    stones.data[i]! ≠ stones.data[i-1]! := sorry\n\n\ntheorem solution_all_same\
  \ (stones : String)\n  (h : ∀ c ∈ stones.data, isRGBChar c)  \n  (h2 : stones.length\
  \ > 0)\n  (h3 : ∀ c ∈ stones.data, c = stones.data[0]!) :\n  solution stones = stones.length\
  \ - 1 := sorry\n\n\ntheorem solution_alternating (stones : String)\n  (h : ∀ c ∈\
  \ stones.data, isRGBChar c)\n  (h2 : stones.length > 1)  \n  (h3 : ∀ i, i > 0 →\
  \ i < stones.length →\n    stones.data[i]! ≠ stones.data[i-1]!) :\n  solution stones\
  \ = 0 := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
