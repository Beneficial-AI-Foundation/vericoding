"vc-description": "Chef Tobby asked Bhuvan to brush up his knowledge of statistics\
  \ for a test. While studying some distributions, Bhuvan learns the fact that for\
  \ symmetric distributions, the mean and the median are always the same.\nChef Tobby\
  \ asks Bhuvan out for a game and tells him that it will utilize his new found knowledge.\
  \ He lays out a total of 109 small tiles in front of Bhuvan. Each tile has a distinct\
  \ number written on it from 1 to 109.\nChef Tobby gives Bhuvan an integer N and\
  \ asks him to choose N distinct tiles and arrange them in a line such that the mean\
  \ of median of all subarrays lies between [N-1, N+1], both inclusive. The median\
  \ of subarray of even length is the mean of the two numbers in the middle after\
  \ the subarray is sorted\nBhuvan realizes that his book didn’t teach him how to\
  \ solve this and asks for your help. Can you solve the problem for him?\nIn case,\
  \ no solution exists, print -1.\n\n-----Input section-----\nFirst line contains,\
  \ T, denoting the number of test cases.\nEach of the next T lines, contain a single\
  \ integer N.\n\n-----Output section-----\nIf no solution, exists print -1.\nIf the\
  \ solution exists, output N space separated integers denoting the elements of the\
  \ array A such that above conditions are satisfied. In case, multiple answers exist,\
  \ you can output any one them.\n\n-----Input constraints-----\n1 ≤ T ≤ 20\n1 ≤ N\
  \ ≤ 100\n\n-----Sample Input-----\n3\n1\n2\n3\n\n-----Sample Output-----\n1\n1 2\n\
  1 2 3\n\n-----Explanation-----\nFor test case 3, the subarrays and their median\
  \ are as follows: \n- {1}, median = 1\n- {2}, median = 2\n- {3}, median = 3\n- {1,\
  \ 2}, median = 1.5\n- {2, 3}, median = 2.5\n- {1, 2, 3}, median = 2\nThe mean of\
  \ the medians is 2 which lies in the range [2, 4]"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def arrange_tiles (n : Int) : String := sorry\n\ntheorem invalid_inputs\
  \ {n : Int}\n  (h : n ≤ 0) : arrange_tiles n = \"-1\" := sorry\n"
"vc-theorems": "theorem valid_inputs_first_element {n : Int}\n  (h : n > 0) : \n \
  \ let numbers := (arrange_tiles n).split (· = ' ')\n  numbers.get? 0 = some (toString\
  \ n) := sorry\n\n\ntheorem valid_inputs_length {n : Int}\n  (h : n > 0) :\n  let\
  \ numbers := (arrange_tiles n).split (· = ' ')\n  numbers.length = n := sorry\n\n\
  \ntheorem valid_inputs_alternating {n : Int} (h : n > 1)\n  (i : Nat) (h2 : i <\
  \ n - 1) :\n  let numbers := (arrange_tiles n).split (· = ' ') |>.map String.toInt!\n\
  \  numbers[i+1]? = some (n + (i+2)/2) ∧ \n  numbers[i+2]? = some (n - (i+2)/2) :=\
  \ sorry\n\n\ntheorem unique_elements {n : Int}\n  (h : n > 0) :\n  let numbers :=\
  \ (arrange_tiles n).split (· = ' ') |>.map String.toInt!\n  numbers.eraseDups =\
  \ numbers := sorry\n\n/--\ninfo: '1'\n-/\n#guard_msgs in\n#eval arrange_tiles 1\n\
  \n/--\ninfo: '2 3'\n-/\n#guard_msgs in\n#eval arrange_tiles 2\n\n/--\ninfo: '3 4\
  \ 2'\n-/\n#guard_msgs in\n#eval arrange_tiles 3\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
