"vc-description": "Following on from [Part 1](http://www.codewars.com/kata/filling-an-array-part-1/),\
  \ part 2 looks at some more complicated array contents.\n\nSo let's try filling\
  \ an array with...\n\n## ...square numbers\nThe numbers from `1` to `n*n`\n\n##\
  \ ...a range of numbers\nA range of numbers starting from `start` and increasing\
  \ by `step`\n\n## ...random numbers\nA bunch of random integers between `min` and\
  \ `max`\n\n## ...prime numbers\nAll primes starting from `2` (obviously)...\n\n\
  HOTE: All the above functions should take as their first parameter a number that\
  \ determines the length of the returned array."
"vc-preamble": "import Imports.AllImports\n\ndef squares : Nat → List Nat\n| n =>\
  \ sorry\n\n\ndef num_range : Nat → Int → Int → List Int\n| n, start, step => sorry\n\
  \n\ndef rand_range : Nat → Int → Int → List Int\n| n, mn, mx => sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def primes : Nat → List Nat\n| n => sorry\n"
"vc-theorems": "theorem squares_length (n : Nat) : (squares n).length = n := by\n\
  \  sorry\n\n\ntheorem squares_values (n : Nat) (i : Nat) : \n  i < n → (squares\
  \ n).get ⟨i, sorry⟩ = (i + 1) * (i + 1) := by\n  sorry\n\n\ntheorem num_range_length\
  \ (n : Nat) (start step : Int) :\n  (num_range n start step).length = n := by\n\
  \  sorry\n\n\ntheorem num_range_start (n : Nat) (start step : Int) :\n  n > 0 →\
  \ (num_range n start step).get ⟨0, sorry⟩ = start := by\n  sorry\n\n\ntheorem num_range_step\
  \ (n : Nat) (start step : Int) :\n  n > 1 → (num_range n start step).get ⟨1, sorry⟩\
  \ - (num_range n start step).get ⟨0, sorry⟩ = step := by\n  sorry\n\n\ntheorem rand_range_length\
  \ (n : Nat) (mn mx : Int) : \n  mn ≤ mx → (rand_range n mn mx).length = n := by\n\
  \  sorry\n\n\ntheorem rand_range_bounds (n : Nat) (mn mx : Int) (i : Nat) :\n  mn\
  \ ≤ mx → i < n → \n  mn ≤ (rand_range n mn mx).get ⟨i, sorry⟩ ∧ (rand_range n mn\
  \ mx).get ⟨i, sorry⟩ ≤ mx := by\n  sorry\n\n\ntheorem primes_length (n : Nat) :\n\
  \  (primes n).length = n := by\n  sorry\n\n\ntheorem primes_ordered (n : Nat) (i\
  \ : Nat) :\n  n > 0 → i < n - 1 → \n  (primes n).get ⟨i, sorry⟩ < (primes n).get\
  \ ⟨i + 1, sorry⟩ := by\n  sorry\n\n/--\ninfo: [1, 4, 9, 16, 25]\n-/\n#guard_msgs\
  \ in\n#eval squares 5\n\n/--\ninfo: [1, 4, 9]\n-/\n#guard_msgs in\n#eval squares\
  \ 3\n\n/--\ninfo: [0, 1, 2, 3, 4]\n-/\n#guard_msgs in\n#eval num_range 5 0 1\n\n\
  /--\ninfo: [2, 4, 6]\n-/\n#guard_msgs in\n#eval num_range 3 2 2\n\n/--\ninfo: [2,\
  \ 3, 5, 7, 11]\n-/\n#guard_msgs in\n#eval primes 5\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
