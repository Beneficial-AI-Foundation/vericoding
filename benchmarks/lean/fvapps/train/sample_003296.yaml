vc-description: |-
  # Task
   You have set an alarm for some of the week days.
   
   Days of the week are encoded in binary representation like this:
  ```
  0000001 - Sunday
  0000010 - Monday
  0000100 - Tuesday
  0001000 - Wednesday
  0010000 - Thursday
  0100000 - Friday 
  1000000 - Saturday```
  For example, if your alarm is set only for Sunday and Friday, the representation will be `0100001`. 

   Given the current day of the week, your task is to find the day of the week when alarm will ring next time.

  # Example

   For `currentDay = 4, availableWeekDays = 42`, the result should be `6`.
   
   ```
  currentDay = 4 means the current Day is Wednesday
  availableWeekDays = 42 convert to binary is "0101010"
  So the next day is 6 (Friday)
  ```

  # Input/Output


   - `[input]` integer `currentDay`
   
   The weekdays range from 1 to 7, 1 is Sunday and 7 is Saturday


   - `[input]` integer `availableWeekDays`
   
   An integer. Days of the week are encoded in its binary representation.


   - `[output]` an integer

   The next day available.
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def next_day_of_week (current_day : Nat) (available_days : Nat) : Nat := sorry

  def get_available_days (bit_pattern : Nat) : List Nat := sorry
vc-theorems: |
  theorem next_day_valid (current_day : Nat) (available_days : Nat)
    (h1 : 1 ≤ current_day) (h2 : current_day ≤ 7) (h3 : available_days ≤ 127) :
    let result := next_day_of_week current_day available_days
    1 ≤ result ∧ result ≤ 7 := sorry






  theorem next_day_empty (current_day : Nat) (available_days : Nat)
    (h1 : 1 ≤ current_day) (h2 : current_day ≤ 7) (h3 : available_days = 0) :
    next_day_of_week current_day available_days = current_day := sorry

  /--
  info: 6
  -/
  #guard_msgs in
  #eval next_day_of_week 4 42

  /--
  info: 2
  -/
  #guard_msgs in
  #eval next_day_of_week 6 42

  /--
  info: 2
  -/
  #guard_msgs in
  #eval next_day_of_week 7 42
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible
