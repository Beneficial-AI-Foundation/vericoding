"vc-description": "You are given two sorted arrays of distinct integers nums1 and\
  \ nums2.\nA valid path is defined as follows:\n\nChoose array nums1 or nums2 to\
  \ traverse (from index-0).\nTraverse the current array from left to right.\nIf you\
  \ are reading any value that is present in nums1 and nums2 you are allowed to change\
  \ your path to the other array. (Only one repeated value is considered in the valid\
  \ path).\n\nScore is defined as the sum of uniques values in a valid path.\nReturn\
  \ the maximum score you can obtain of all possible valid paths.\nSince the answer may\
  \ be too large, return it modulo 10^9 + 7.\n \nExample 1:\n\nInput: nums1 = [2,4,5,8,10],\
  \ nums2 = [4,6,8,9]\nOutput: 30\nExplanation: Valid paths:\n[2,4,5,8,10], [2,4,5,8,9],\
  \ [2,4,6,8,9], [2,4,6,8,10],  (starting from nums1)\n[4,6,8,9], [4,5,8,10], [4,5,8,9],\
  \ [4,6,8,10]    (starting from nums2)\nThe maximum is obtained with the path in\
  \ green [2,4,6,8,10].\n\nExample 2:\nInput: nums1 = [1,3,5,7,9], nums2 = [3,5,100]\n\
  Output: 109\nExplanation: Maximum sum is obtained with the path [1,3,5,100].\n\n\
  Example 3:\nInput: nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10]\nOutput: 40\nExplanation: There\
  \ are no common elements between nums1 and nums2.\nMaximum sum is obtained with\
  \ the path [6,7,8,9,10].\n\nExample 4:\nInput: nums1 = [1,4,5,8,9,11,19], nums2\
  \ = [2,3,4,11,12]\nOutput: 61\n\n \nConstraints:\n\n1 <= nums1.length <= 10^5\n\
  1 <= nums2.length <= 10^5\n1 <= nums1[i], nums2[i] <= 10^7\nnums1 and nums2 are\
  \ strictly increasing."
"vc-preamble": "import Imports.AllImports\n\ndef maxSum (nums1 : List Nat) (nums2\
  \ : List Nat) : Nat :=\n  sorry\n\n\ndef hasCommonElements (l1 l2 : List Nat) :\
  \ List Nat :=\n  sorry\n\n\ndef sumUniqueElements (l1 l2 : List Nat) : Nat :=\n\
  \  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sumCommonElements (l1 l2 : List Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem maxsum_positive (nums1 nums2 : List Nat) \n  (h1 : ∀ x ∈ nums1,\
  \ 1 ≤ x ∧ x ≤ 1000)\n  (h2 : ∀ x ∈ nums2, 1 ≤ x ∧ x ≤ 1000)\n  (h3 : nums1 ≠ [])\
  \ (h4 : nums2 ≠ []) :\n  maxSum nums1 nums2 ≥ 0 := sorry\n\n\ntheorem maxsum_under_modulo\
  \ (nums1 nums2 : List Nat)\n  (h1 : ∀ x ∈ nums1, 1 ≤ x ∧ x ≤ 1000)\n  (h2 : ∀ x\
  \ ∈ nums2, 1 ≤ x ∧ x ≤ 1000)\n  (h3 : nums1 ≠ []) (h4 : nums2 ≠ []) :\n  maxSum\
  \ nums1 nums2 < 10^9 + 7 := sorry\n\n\ntheorem maxsum_lower_bound (nums1 nums2 :\
  \ List Nat)\n  (h1 : ∀ x ∈ nums1, 1 ≤ x ∧ x ≤ 1000)\n  (h2 : ∀ x ∈ nums2, 1 ≤ x\
  \ ∧ x ≤ 1000)\n  (h3 : nums1 ≠ []) (h4 : nums2 ≠ []) :\n  let common := sumCommonElements\
  \ nums1 nums2\n  let unique1 := sumUniqueElements nums1 nums2\n  let unique2 :=\
  \ sumUniqueElements nums2 nums1\n  maxSum nums1 nums2 ≥ min (unique1 + common) (unique2\
  \ + common) % (10^9 + 7) := sorry\n\n/--\ninfo: 30\n-/\n#guard_msgs in\n#eval maxSum\
  \ [2, 4, 5, 8, 10] [4, 6, 8, 9]\n\n/--\ninfo: 109\n-/\n#guard_msgs in\n#eval maxSum\
  \ [1, 3, 5, 7, 9] [3, 5, 100]\n\n/--\ninfo: 40\n-/\n#guard_msgs in\n#eval maxSum\
  \ [1, 2, 3, 4, 5] [6, 7, 8, 9, 10]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
