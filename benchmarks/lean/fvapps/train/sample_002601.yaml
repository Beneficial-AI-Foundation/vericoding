"vc-description": "## The story you are about to hear is true\nOur cat, Balor, sadly\
  \ died of cancer in 2015.\n\nWhile he was alive, the three neighborhood cats Lou,\
  \ Mustache Cat, and Raoul all recognized our house and yard as Balor's territory,\
  \ and would behave respectfully towards him and each other when they would visit.\
  \ \n\nBut after Balor died, gradually each of these three neighborhood cats began\
  \ trying to claim his territory as their own, trying to drive the others away by\
  \ growling, yowling, snarling, chasing, and even fighting, when one came too close\
  \ to another, and no human was right there to distract or extract one of them before\
  \ the situation could escalate. \n\nIt is sad that these otherwise-affectionate\
  \ animals, who had spent many afternoons peacefully sitting and/or lying near Balor\
  \ and each other on our deck or around our yard, would turn on each other like that.\
  \ However, sometimes, if they are far enough away from each other, especially on\
  \ a warm day when all they really want to do is pick a spot in the sun and lie in\
  \ it, they will ignore each other, and once again there will be a Peaceable Kingdom.\n\
  \n## Your Mission\nIn this, the first and simplest of a planned trilogy of cat katas\
  \ :-), all you have to do is determine whether the distances between any visiting\
  \ cats are large enough to make for a peaceful afternoon, or whether there is about\
  \ to be an altercation someone will need to deal with by carrying one of them into\
  \ the house or squirting them with water or what have you.\n\nAs input your function\
  \ will receive a list of strings representing the yard as a grid, and an integer\
  \ representing the minimum distance needed to prevent problems (considering the\
  \ cats' current states of sleepiness). A point with no cat in it will be represented\
  \ by a \"-\" dash. Lou, Mustache Cat, and Raoul will be represented by an upper\
  \ case L, M, and R respectively. At any particular time all three cats may be in\
  \ the yard, or maybe two, one, or even none. \n\nIf the number of cats in the yard\
  \ is one or none, or if the distances between all cats are at least the minimum\
  \ distance, your function should return True/true/TRUE (depending on what language\
  \ you're using), but if there are two or three cats, and the distance between at\
  \ least two of them is smaller than the minimum distance, your function should return\
  \ False/false/FALSE.\n\n## Some examples\n(The yard will be larger in the random\
  \ test cases, but a smaller yard is easier to see and fit into the instructions\
  \ here.)\n\nIn this first example, there is only one cat, so your function should\
  \ return True.\n```\n[\"------------\",\n \"------------\",\n \"-L----------\",\n\
  \ \"------------\",\n \"------------\",\n \"------------\"], 10\n```\nIn this second\
  \ example, Mustache Cat is at the point yard[1][3] and Raoul is at the point yard[4][7]\
  \ -- a distance of 5, so because the distance between these two points is smaller\
  \ than the specified minimum distance of 6, there will be trouble, and your function\
  \ should return False. \n```\n[\"------------\",\n \"---M--------\",\n \"------------\"\
  ,\n \"------------\",\n \"-------R----\",\n \"------------\"], 6\n```\nIn this third\
  \ example, Lou is at yard[0][11], Raoul is at yard[1][2], and Mustache Cat at yard[5][2].\
  \ The distance between Lou and Raoul is 9.05538513814, the distance between Raoul\
  \ and Mustache Cat is 4, and the distance between Mustache Cat and Lou is 10.295630141\
  \ -- all greater than or equal to the specified minimum distance of 4, so the three\
  \ cats will nap peacefully, and your function should return True.\n```\n[\"-----------L\"\
  ,\n \"--R---------\",\n \"------------\",\n \"------------\",\n \"------------\"\
  ,\n \"--M---------\"], 4\n```\nHave fun!"
"vc-preamble": "import Imports.AllImports\n\ndef peaceful_yard (yard : List String)\
  \ (distance : Float) : Bool :=\n  sorry\n\n\ndef mkRow (n : Nat) : String :=\n \
  \ sorry\n\n\ndef updateRow (s : String) (pos : Nat) (c : Char) : String :=\n  sorry\n\
  \n\ndef distance (p1 p2 : Nat × Nat) : Float :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def replaceNth {α : Type} (xs : List α) (n : Nat) (v : α) : List\
  \ α :=\n  sorry\n"
"vc-theorems": "theorem empty_yard_is_peaceful {size : Nat} {distance : Float} \n\
  \  (h1 : size ≥ 1) (h2 : size ≤ 20) \n  (h3 : distance ≥ 0.1) (h4 : distance ≤ 30)\
  \ :\n  let emptyRow := mkRow size\n  let yard := List.replicate size emptyRow\n\
  \  peaceful_yard yard distance = true :=\nsorry\n\n\ntheorem single_cat_is_peaceful\
  \ {size : Nat} {distance : Float}\n  (h1 : size ≥ 1) (h2 : size ≤ 20)\n  (h3 : distance\
  \ ≥ 0.1) (h4 : distance ≤ 30) :\n  let emptyRow := mkRow size\n  let yard := List.replicate\
  \ size emptyRow\n  let midPos := size / 2\n  let catRow := updateRow (List.get!\
  \ yard midPos) midPos 'L'\n  let yard' := replaceNth yard midPos catRow\n  peaceful_yard\
  \ yard' distance = true :=\nsorry\n\n\ntheorem cats_distance_property \n  {size\
  \ : Nat} {distance : Float} {catPositions : List (Nat × Nat × Char)}\n  (h1 : size\
  \ ≥ 2) (h2 : size ≤ 20)\n  (h3 : distance ≥ 0.1) (h4 : distance ≤ 30)\n  (h5 : catPositions.length\
  \ ≤ 3)\n  (h6 : ∀ p ∈ catPositions, p.fst < size ∧ (p.snd.fst) < size ∧ (p.snd.snd)\
  \ ∈ ['L', 'M', 'R']) :\n  let validPositions := catPositions.filter (λ p => p.fst\
  \ < size ∧ (p.snd.fst) < size)\n  let emptyRow := mkRow size\n  let emptyYard :=\
  \ List.replicate size emptyRow\n  let yard := validPositions.foldl \n    (λ y p\
  \ => replaceNth y p.fst (updateRow (List.get! y p.fst) (p.snd.fst) (p.snd.snd)))\n\
  \    emptyYard\n  peaceful_yard yard distance = \n    if validPositions.length ≤\
  \ 1 \n    then true \n    else let positions := validPositions.map (λ p => (p.fst,\
  \ p.snd.fst))\n         let minDist : Float := sorry -- minimum distance computation\n\
  \         minDist ≥ distance :=\nsorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n\
  #eval peaceful_yard [\"------------\", \"------------\", \"-L----------\", \"------------\"\
  , \"------------\", \"------------\"] 10\n\n/--\ninfo: False\n-/\n#guard_msgs in\n\
  #eval peaceful_yard [\"------------\", \"---M--------\", \"------------\", \"------------\"\
  , \"-------R----\", \"------------\"] 6\n\n/--\ninfo: True\n-/\n#guard_msgs in\n\
  #eval peaceful_yard [\"-----------L\", \"--R---------\", \"------------\", \"------------\"\
  , \"------------\", \"--M---------\"] 4\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
