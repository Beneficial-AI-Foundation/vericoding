"vc-description": "Implement the function unique_in_order which takes as argument\
  \ a sequence and returns a list of items without any elements with the same value\
  \ next to each other and preserving the original order of elements.\n\nFor example:\n\
  \n```python\nunique_in_order('AAAABBBCCDAABBB') == ['A', 'B', 'C', 'D', 'A', 'B']\n\
  unique_in_order('ABBCcAD')         == ['A', 'B', 'C', 'c', 'A', 'D']\nunique_in_order([1,2,2,3,3])\
  \       == [1,2,3]\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def unique_in_order {α} [BEq α] (xs : List α) : List α := sorry\n\
  \ntheorem no_consecutive_duplicates {α} [BEq α] [Inhabited α] (xs : List α) :\n\
  \  let result := unique_in_order xs\n  ∀ i, i < result.length - 1 → result.get!\
  \ i ≠ result.get! (i+1) := sorry\n"
"vc-theorems": "theorem elements_from_input {α} [BEq α] (xs : List α) :\n  let result\
  \ := unique_in_order xs\n  ∀ x ∈ result, x ∈ xs := sorry\n\n\ntheorem maintains_relative_order\
  \ {α} [BEq α] [Inhabited α] (xs : List α) :\n  let result := unique_in_order xs\n\
  \  xs ≠ [] ∧ result ≠ [] →\n  ∀ i j, i < j → i < xs.length → j < xs.length → \n\
  \  xs[i]! = xs[j]! → result.indexOf (xs[i]!) < result.indexOf (xs[j]!) := sorry\n\
  \n\ntheorem length_bounded {α} [BEq α] (xs : List α) :\n  (unique_in_order xs).length\
  \ ≤ xs.length := sorry\n\n\ntheorem empty_input_empty_output {α} [BEq α] :\n  unique_in_order\
  \ ([] : List α) = [] := sorry\n\n/--\ninfo: []\n-/\n#guard_msgs in\n#eval unique_in_order\
  \ \"\"\n\n/--\ninfo: ['A', 'B', 'C', 'D', 'A', 'B']\n-/\n#guard_msgs in\n#eval unique_in_order\
  \ \"AAAABBBCCDAABBB\"\n\n/--\ninfo: [1, 2, 3]\n-/\n#guard_msgs in\n#eval unique_in_order\
  \ [1, 2, 2, 3, 3]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
