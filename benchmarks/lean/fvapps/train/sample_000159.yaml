"vc-description": "Given two strings text1 and text2, return the length of their longest\
  \ common subsequence.\nA subsequence of a string is a new string generated from\
  \ the original string with some characters(can be none) deleted without changing\
  \ the relative order of the remaining characters. (eg, \"ace\" is a subsequence\
  \ of \"abcde\" while \"aec\" is not). A common subsequence of two strings is a subsequence\
  \ that is common to both strings.\n \nIf there is no common subsequence, return\
  \ 0.\n \nExample 1:\nInput: text1 = \"abcde\", text2 = \"ace\" \nOutput: 3  \nExplanation:\
  \ The longest common subsequence is \"ace\" and its length is 3.\n\nExample 2:\n\
  Input: text1 = \"abc\", text2 = \"abc\"\nOutput: 3\nExplanation: The longest common\
  \ subsequence is \"abc\" and its length is 3.\n\nExample 3:\nInput: text1 = \"abc\"\
  , text2 = \"def\"\nOutput: 0\nExplanation: There is no such common subsequence,\
  \ so the result is 0.\n\n \nConstraints:\n\n1 <= text1.length <= 1000\n1 <= text2.length\
  \ <= 1000\nThe input strings consist of lowercase English characters only."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def longest_common_subsequence (s1 s2 : String) : Nat :=\n  sorry\n"
"vc-theorems": "theorem lcs_length_bounded (s1 s2 : String) :\n  longest_common_subsequence\
  \ s1 s2 ≤ s1.length ∧ \n  longest_common_subsequence s1 s2 ≤ s2.length :=\n  sorry\n\
  \n\ntheorem lcs_empty (s : String) :\n  longest_common_subsequence s \"\" = 0 ∧\n\
  \  longest_common_subsequence \"\" s = 0 :=\n  sorry\n\n\ntheorem lcs_identical\
  \ (s : String) :\n  longest_common_subsequence s s = s.length :=\n  sorry\n\n\n\
  theorem lcs_symmetric (s1 s2 : String) :\n  longest_common_subsequence s1 s2 = longest_common_subsequence\
  \ s2 s1 :=\n  sorry\n\n\ntheorem lcs_substring (s1 s2 s3 : String) :\n  longest_common_subsequence\
  \ (s1 ++ s2) s3 ≥ longest_common_subsequence s1 s3 ∧\n  longest_common_subsequence\
  \ (s1 ++ s2) s3 ≥ longest_common_subsequence s2 s3 :=\n  sorry\n\n/--\ninfo: 3\n\
  -/\n#guard_msgs in\n#eval longest_common_subsequence \"abcde\" \"ace\"\n\n/--\n\
  info: 3\n-/\n#guard_msgs in\n#eval longest_common_subsequence \"abc\" \"abc\"\n\n\
  /--\ninfo: 0\n-/\n#guard_msgs in\n#eval longest_common_subsequence \"abc\" \"def\"\
  \n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
