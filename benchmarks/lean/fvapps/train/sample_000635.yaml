"vc-description": "\tThree numbers A, B and C are the inputs. Write a program to find\
  \ second largest among them.\n\n-----Input-----\n\nThe first line contains an integer\
  \ T, the total number of testcases. Then T lines follow, each line contains three\
  \ integers A, B and C. \n\n-----Output-----\nFor each test case, display the second\
  \ largest among A, B and C, in a new line.\n\n-----Constraints-----\n- 1 ≤ T ≤ 1000\n\
  - 1 ≤ A,B,C ≤ 1000000\n\n-----Example-----\nInput\n3 \n120 11 400\n10213 312 10\n\
  10 3 450\n\nOutput\n\n120\n312\n10"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_second_largest (l: List Int) : Int := sorry \n\ntheorem\
  \ find_second_largest_from_list {l: List Int} \n  (h1: l.length ≥ 3) \n  (h2: ∀\
  \ (x y: Int), x ∈ l → y ∈ l → x = y → x = y) :\n  find_second_largest l ∈ l := sorry\n"
"vc-theorems": "theorem find_second_largest_less_than_max {l: List Int}\n  (h1: l.length\
  \ ≥ 3)\n  (h2: ∀ (x y: Int), x ∈ l → y ∈ l → x = y → x = y) :\n  ∃ x, x ∈ l ∧ x\
  \ > find_second_largest l := sorry\n  \n\ntheorem find_second_largest_greater_than_min\
  \ {l: List Int}\n  (h1: l.length ≥ 3)\n  (h2: ∀ (x y: Int), x ∈ l → y ∈ l → x =\
  \ y → x = y) :\n  ∃ x, x ∈ l ∧ x < find_second_largest l := sorry\n\n/--\ninfo:\
  \ 120\n-/\n#guard_msgs in\n#eval find_second_largest [120, 11, 400]\n\n/--\ninfo:\
  \ 312\n-/\n#guard_msgs in\n#eval find_second_largest [10213, 312, 10]\n\n/--\ninfo:\
  \ 10\n-/\n#guard_msgs in\n#eval find_second_largest [10, 3, 450]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
