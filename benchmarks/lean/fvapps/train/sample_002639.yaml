"vc-description": "It's 3AM and you get the dreaded call from a customer: the program\
  \ your company sold them is hanging. You eventually trace the problem down to a\
  \ call to a function named `mystery`. Usually, `mystery` works fine and produces\
  \ an integer result for an integer input. However, on certain inputs, the `mystery`\
  \ function just locks up.\n\nUnfortunately, the `mystery` function is part of a\
  \ third-party library, and you don't have access to the source code. Uck. It may\
  \ take a while to get support from the provider of the library, and in the meantime,\
  \ your customer is getting frustrated.\n\nYour mission, should you choose to accept\
  \ it, is to create a new function called `wrap_mystery` that returns the same results\
  \ as `mystery`, but does not hang. Since you're not sure exactly what values `mystery`\
  \ should be returning for hangs, just have `wrap_mystery` return -1 for problematic\
  \ input. Your customer is counting on you!\n\n`wrap_mystery` will only be called\
  \ with positive integers less than 1,000,000."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def wrap_mystery (n : Nat) : Int :=\n  sorry\n"
"vc-theorems": "theorem wrap_mystery_17 : wrap_mystery 17 = -1 := by\n  sorry\n\n\n\
  theorem wrap_mystery_1 : wrap_mystery 1 = 0 := by\n  sorry\n\n\ntheorem wrap_mystery_13\
  \ : wrap_mystery 13 = 0 := by\n  sorry\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval\
  \ wrap_mystery 1\n\n/--\ninfo: -1\n-/\n#guard_msgs in\n#eval wrap_mystery 17\n\n\
  /--\ninfo: 65\n-/\n#guard_msgs in\n#eval wrap_mystery 7\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
