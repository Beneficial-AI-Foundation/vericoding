"vc-description": "Given alphanumeric string s. (Alphanumeric string is a string consisting\
  \ of lowercase English letters and digits).\nYou have to find a permutation of the\
  \ string where no letter is followed by another letter and no digit is followed\
  \ by another digit. That is, no two adjacent characters have the same type.\nReturn\
  \ the reformatted string or return an empty string if it is impossible to reformat\
  \ the string.\n \nExample 1:\nInput: s = \"a0b1c2\"\nOutput: \"0a1b2c\"\nExplanation:\
  \ No two adjacent characters have the same type in \"0a1b2c\". \"a0b1c2\", \"0a1b2c\"\
  , \"0c2a1b\" are also valid permutations.\n\nExample 2:\nInput: s = \"leetcode\"\
  \nOutput: \"\"\nExplanation: \"leetcode\" has only characters so we cannot separate\
  \ them by digits.\n\nExample 3:\nInput: s = \"1229857369\"\nOutput: \"\"\nExplanation:\
  \ \"1229857369\" has only digits so we cannot separate them by characters.\n\nExample\
  \ 4:\nInput: s = \"covid2019\"\nOutput: \"c2o0v1i9d\"\n\nExample 5:\nInput: s =\
  \ \"ab123\"\nOutput: \"1a2b3\"\n\n \nConstraints:\n\n1 <= s.length <= 500\ns consists\
  \ of only lowercase English letters and/or digits."
"vc-preamble": "import Imports.AllImports\n\ndef isAlpha (c : Char) : Bool := sorry\n\
  def isDigit (c : Char) : Bool := sorry\n\ndef reformat (s : String) : String :=\
  \ sorry\n\ntheorem reformat_empty_string (s : String) : \n  let letters := s.data.filter\
  \ isAlpha |>.length\n  let digits := s.data.filter isDigit |>.length\n  letters\
  \ - digits > 1 ∨ digits - letters > 1 →\n  reformat s = \"\" := sorry\n\n\ndef countLetters\
  \ (s : String) : Nat :=\n  s.data.filter isAlpha |>.length\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def countDigits (s : String) : Nat :=\n  s.data.filter isDigit\
  \ |>.length\n"
"vc-theorems": "theorem reformat_preserves_length (s : String) :\n  reformat s ≠ \"\
  \" → \n  (reformat s).length = s.length := sorry \n\n\ntheorem reformat_preserves_chars\
  \ (s : String) :\n  reformat s ≠ \"\" →\n  (reformat s).data = s.data := sorry\n\
  \n\ntheorem reformat_alternates (s : String) :\n  reformat s ≠ \"\" →\n  ∀ i < (reformat\
  \ s).length - 1,\n    (isAlpha ((reformat s).data[i]!) = !isAlpha ((reformat s).data[i+1]!))\
  \ := sorry\n\n\ntheorem reformat_preserves_letter_count (s : String) :\n  reformat\
  \ s ≠ \"\" →\n  countLetters (reformat s) = countLetters s := sorry\n\n\ntheorem\
  \ reformat_preserves_digit_count (s : String) :\n  reformat s ≠ \"\" →\n  countDigits\
  \ (reformat s) = countDigits s := sorry\n\n/--\ninfo: ''\n-/\n#guard_msgs in\n#eval\
  \ reformat \"leetcode\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
