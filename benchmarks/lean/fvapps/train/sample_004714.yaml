"vc-description": "The principal of a school likes to put challenges to the students\
  \ related with finding words of certain features.\nOne day she said: \"Dear students,\
  \ the challenge for today is to find a word that has only one vowel and seven consonants\
  \ but cannot have the letters \"y\" and \"m\". I'll give a special award for the\
  \ first student that finds it.\" One of the students used his dictionary and spent\
  \ all the night without sleeping, trying in vain to find the word. The next day,\
  \ the word had not been found yet.\nThis student observed that the principal has\
  \ a pattern in the features for the wanted words: \n\n- The word should have **n**\
  \ vowels, may be repeated, for example: in \"engineering\", n = 5.\n\n- The word\
  \ should have **m** consonants, may be repeated also: in \"engineering\", m = 6.\n\
  \n- The word should not have some forbidden letters (in an array), forbid_letters\n\
  \nYou will be provided with a list of words, WORD_LIST(python/crystal), wordList(javascript),\
  \ wordList (haskell), $word_list(ruby), and you have to create the function, ```wanted_words()```,\
  \ that receives the three arguments in the order given above, ```wanted_words(n,\
  \ m, forbid_list)```and output an array with the word or an array, having the words\
  \ in the order given in the pre-loaded list, in the case of two or more words were\
  \ found.\n\nLet's see some cases:\n\n```python\nwanted_words(1, 7, [\"m\", \"y\"\
  ]) == [\"strength\"]\nwanted_words(3, 7, [\"m\", \"y\"]) == ['afterwards', 'background',\
  \ 'photograph', 'successful', 'understand']\n```\n\nFor cases where no words are\
  \ found the function will output an empty array.\n\n```python\nwanted_words(3, 7,\
  \ [\"a\", \"s\" , \"m\", \"y\"]) == []\n```\n\nHelp our student to win this and\
  \ the next challenges of the school. He needs to sure about a suspect that he has.\
  \ That many times there are no solutions for what the principal is asking for.\n\
  All words have its letters in lowercase format.\nEnjoy it!"
"vc-preamble": "import Imports.AllImports\n\ndef wanted_words (vowel_count : Nat)\
  \ (consonant_count : Nat) (forbidden : List Char) : List String :=\n  sorry\n\n\n\
  def isVowel (c : Char) : Bool :=\n  c = 'a' || c = 'e' || c = 'i' || c = 'o' ||\
  \ c = 'u'\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def WORD_LIST : List String :=\n  [\"strength\", \"afterwards\"\
  , \"background\", \"photograph\", \"successful\", \"understand\"]"
"vc-theorems": "theorem result_are_strings (v c : Nat) (f : List Char) :\n  ∀ (w :\
  \ String), w ∈ wanted_words v c f → w.length ≥ 0 \n  := sorry\n\n\ntheorem exact_vowel_count\
  \ (v c : Nat) (f : List Char) :\n  ∀ (w : String), w ∈ wanted_words v c f →\n  (List.filter\
  \ isVowel w.data).length = v\n  := sorry\n\n\ntheorem exact_total_length (v c :\
  \ Nat) (f : List Char) :\n  ∀ (w : String), w ∈ wanted_words v c f →\n  w.length\
  \ = v + c\n  := sorry\n\n\ntheorem no_forbidden_chars (v c : Nat) (f : List Char)\
  \ :\n  ∀ (w : String), w ∈ wanted_words v c f →\n  ∀ (x : Char), x ∈ f → ¬(x ∈ w.data)\n\
  \  := sorry\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
