"vc-description": "The Spelling Bee bees are back...\n\n# How many bees are in the\
  \ beehive?\n\n* bees can be facing UP, DOWN, LEFT, RIGHT, and now also _diagonally_\
  \ up/down/left/right\n* bees can share parts of other bees\n\n\n\n## Examples\n\n\
  Ex1\n```\nbee.bee     \n.e..e..\n.b..eeb\n```\n_Answer: 5_\n\nEx2\n```\nbeee.. \
  \    \neeb.e.\nebee.b\n```\n_Answer: 7_"
"vc-preamble": "import Imports.AllImports\n\ndef Grid := List String\n\ndef GridList\
  \ := List (List Char)\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def how_many_bees (grid : Grid) : Nat := sorry\ndef how_many_bees_list\
  \ (grid : GridList) : Nat := sorry\n"
"vc-theorems": "theorem how_many_bees_nonnegative (grid : Grid) :\n  how_many_bees\
  \ grid ≥ 0 := sorry\n\n\ntheorem grid_list_equiv (grid : Grid) :\n  how_many_bees\
  \ grid = how_many_bees_list (grid.map (·.data)) := sorry\n\n\ntheorem empty_grid\
  \ :\n  how_many_bees [] = 0 := sorry\n\n\ntheorem bees_upper_bound {grid : Grid}\
  \ (h : grid ≠ []) :\n  how_many_bees grid ≤ grid.length * grid.head!.length * 2\
  \ := sorry\n\n\ntheorem reverse_grid_equiv (grid : Grid) :\n  let reversed := grid.map\
  \ (fun s => ⟨s.data.reverse⟩)\n  how_many_bees grid = how_many_bees reversed :=\
  \ sorry\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval how_many_bees [\"bee.bee\", \"\
  .e..e..\", \".b..eeb\"]\n\n/--\ninfo: 7\n-/\n#guard_msgs in\n#eval how_many_bees\
  \ [\"beee..\", \"eeb.e.\", \"ebee.b\"]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval\
  \ how_many_bees []\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
