"vc-description": "Chef has $N$ dishes of different types arranged in a row: $A_1,\
  \ A_2, \\ldots, A_N$, where $A_i$ denotes the type of the $i^{th}$ dish. He wants\
  \ to choose as many dishes as possible from the given list but while satisfying\
  \ two conditions: \n- He can choose only one type of dish.   \n- No two chosen dishes\
  \ should be adjacent to each other. \nChef wants to know which type of dish he should\
  \ choose from, so that he can pick the maximum number of dishes.\nExample:\n\nGiven\
  \ $N$=$9$ and $A$=$[1, 2, 2, 1, 2, 1, 1, 1, 1]$.\n\nFor type 1, Chef can choose\
  \ at most four dishes. One of the ways to choose four dishes of type 1 is $A_1$,\
  \ $A_4$, $A_7$ and $A_9$.\n\nFor type 2, Chef can choose at most two dishes. One\
  \ way is to choose $A_3$ and $A_5$.\n\nSo in this case, Chef should go for type\
  \ 1, in which he can pick more dishes.\n\n-----Input:-----\n- The first line contains\
  \ $T$, the number of test cases. Then the test cases follow.\n- For each test case,\
  \ the first line contains a single integer $N$.\n- The second line contains $N$\
  \ integers $A_1, A_2, \\ldots, A_N$. \n\n-----Output:-----\nFor each test case,\
  \ print a single line containing one integer ― the type of the dish that Chef should\
  \ choose from. If there are multiple answers, print the smallest one.\n\n-----Constraints-----\n\
  - $1 \\le T \\le 10^3$\n- $1 \\le N \\le 10^3$\n- $1 \\le A_i \\le 10^3$\n- Sum\
  \ of $N$ over all test cases doesn't exceed $10^4$\n\n-----Sample Input:-----\n\
  3\n5\n1 2 2 1 2\n6\n1 1 1 1 1 1\n8\n1 2 2 2 3 4 2 1\n\n-----Sample Output:-----\n\
  1\n1\n2\n\n-----Explanation:-----\nTest case 1:\n\nFor both type 1 and type 2, Chef\
  \ can pick at most two dishes. In the case of multiple answers, we pick the smallest\
  \ one. Hence the answer will be $1$.\nTest case 2:\n\nThere are only dishes of type\
  \ 1. So the answer is $1$.\nTest case 3:\n\nFor type 1, Chef can choose at most\
  \ two dishes. For type 2, he can choose three dishes. For type 3 and type 4, Chef\
  \ can choose the only dish available. Hence the maximum is in type 2 and so the\
  \ answer is $2$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_max_dish_type (n : Nat) (dishes : List Nat) : Nat :=\n\
  \  sorry\n"
"vc-theorems": "theorem n_parameter_irrelevant (n : Nat) (dishes : List Nat) \n  \
  \  (h : dishes ≠ []) : \n    find_max_dish_type n dishes = find_max_dish_type dishes.length\
  \ dishes :=\n  sorry\n\n\ntheorem preserves_input (dishes : List Nat) (h : dishes\
  \ ≠ []) : \n    let original := dishes;\n    let _ := find_max_dish_type dishes.length\
  \ dishes;\n    dishes = original :=\n  sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n\
  #eval find_max_dish_type 5 [1, 2, 2, 1, 2]\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n\
  #eval find_max_dish_type 6 [1, 1, 1, 1, 1, 1]\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n\
  #eval find_max_dish_type 8 [1, 2, 2, 2, 3, 4, 2, 1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
