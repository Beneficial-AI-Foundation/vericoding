"vc-description": "A traveling salesman has to visit clients. He got each client's\
  \ address e.g. `\"432 Main Long Road St. Louisville OH 43071\"` as a list.\n\nThe\
  \ basic zipcode format usually consists of two capital letters followed by a white\
  \ space and five digits.\nThe list of clients to visit was given as a string of\
  \ all addresses, each separated from the others by a comma, e.g. :\n\n`\"123 Main\
  \ Street St. Louisville OH 43071,432 Main Long Road St. Louisville OH 43071,786\
  \ High Street Pollocksville NY 56432\"`.\n\nTo ease his travel he wants to group\
  \ the list by zipcode.\n# Task\nThe function `travel` will take two parameters `r`\
  \ (addresses' list of all clients' as a string) and `zipcode` and returns a string\
  \ in the following format:\n\n`zipcode:street and town,street and town,.../house\
  \ number,house number,...` \n\nThe street numbers must be in the same order as the\
  \ streets where they belong.\n\nIf a given zipcode doesn't exist in the list of\
  \ clients' addresses return `\"zipcode:/\"`\n\n# Examples\n```\nr = \"123 Main Street\
  \ St. Louisville OH 43071,432 Main Long Road St. Louisville OH 43071,786 High Street\
  \ Pollocksville NY 56432\"\n\ntravel(r, \"OH 43071\") --> \"OH 43071:Main Street\
  \ St. Louisville,Main Long Road St. Louisville/123,432\"\n\ntravel(r, \"NY 56432\"\
  ) --> \"NY 56432:High Street Pollocksville/786\"\n\ntravel(r, \"NY 5643\") --> \"\
  NY 5643:/\"\n```\n\n# Note for Elixir:\nIn Elixir the empty addresses' input is\
  \ an empty *list*, not an empty string.\n\n# Note: \nYou can see a few addresses\
  \ and zipcodes in the test cases."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def travel (r : String) (zipcode : String) : String :=\n  sorry\n"
"vc-theorems": "theorem travel_empty_zipcode (addrs : String) :\n  travel addrs \"\
  \" = \":/\" := by sorry\n\n\ntheorem travel_invalid_zipcode (addrs : String) (zip\
  \ : String) :\n  zip = \"AB 123\" →\n  travel addrs zip = \"AB 123:/\" := by sorry\n\
  \n\ntheorem travel_valid_zipcode_format (addrs : String) (stateZip : String) :\n\
  \  addrs ≠ \"\" →\n  let result := travel addrs stateZip\n  result.startsWith s!\"\
  {stateZip}:\" ∧\n  result.contains '/' := by sorry\n\n\ntheorem travel_valid_result_components\
  \ (addrs : String) (stateZip : String) \n    (result : String) (h : result = travel\
  \ addrs stateZip) :\n  result ≠ s!\"{stateZip}:/\" →\n  let components := result.split\
  \ (· == '/')\n  let streets := ((components.get? 0).getD \"\").split (· == ':')\n\
  \  let numbers := (components.get? 1).getD \"\"\n  (∀ n ∈ (numbers.split (· == ',')),\
  \ n.all Char.isDigit) ∧\n  (∀ s ∈ ((streets.get? 1).getD \"\").split (· == ','),\
  \ s.all (fun c => c.isAlpha ∨ c == ' ')) := by sorry\n\n\ntheorem travel_malformed_input\
  \ (badInput : String) :\n  let result := travel badInput \"ST 12345\"\n  result\
  \ = \"ST 12345:/\" ∨\n  (result.startsWith \"ST 12345:\" ∧ result.contains '/')\
  \ := by sorry\n\n/--\ninfo: 'OH 43071:Main Street St. Louisville,Main Long Road\
  \ St. Louisville/123,432'\n-/\n#guard_msgs in\n#eval travel \"123 Main Street St.\
  \ Louisville OH 43071,432 Main Long Road St. Louisville OH 43071,786 High Street\
  \ Pollocksville NY 56432\" \"OH 43071\"\n\n/--\ninfo: 'NY 56432:High Street Pollocksville/786'\n\
  -/\n#guard_msgs in\n#eval travel r \"NY 56432\"\n\n/--\ninfo: 'NY 5643:/'\n-/\n\
  #guard_msgs in\n#eval travel r \"NY 5643\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
