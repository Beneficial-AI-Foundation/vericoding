"vc-description": "Cherry has a string S$S$ consisting of lowercase English letters.\
  \ Using this string, he formed a pyramid of infinite length with certain rules:\n\
  - N$N$-th row of pyramid contains N$N$ characters.\n- Each row of pyramid begins\
  \ with the first character of the string.\n- The subsequent characters of the row\
  \ are appended to the string in cyclic fashion, until the size of string for that\
  \ Row is reached (See example pyramid for better understanding).\nHe has another\
  \ string T$T$ of smaller (or equal) size.\nYou are asked Q$Q$ queries. Each query\
  \ is provided with a row number N$N$. The answer to the query is number of occurrences\
  \ of string T$T$ in that particular row of pyramid. No of occurrences of String\
  \ T$T$ in a string V$V$ would mean that you'd need to find number of substrings\
  \ Vi,Vi+1...Vj$V_i, V_{i+1} ... V_j$ which are equal to String T$T$, where i≤j$i\
  \ \\leq j$.\nFor eg: If the string is code, then the pyramid will be of the form:\n\
  c\nco\ncod\ncode\ncodec\ncodeco\ncodecod\ncodecode\ncodecodec\ncodecodeco\n...\n\
  \n-----Input:-----\n- The first line contains string S$S$ — consisting of lowercase\
  \ English letters.\n- The second line contains string T$T$ — consisting of lowercase\
  \ English letters.\n- Next line contains an integer Q$Q$ — the number of queries.\n\
  - Then follow Q$Q$ lines with queries descriptions. Each of them contains a single\
  \ integer N$N$ denoting the row number of pyramid.\n\n-----Output:-----\n- Print\
  \ Q$Q$ lines. The i$i$-th of them should contain a integer denoting occurrences\
  \ of string T$T$ in that particular row.\n\n-----Constraints-----\n- 1≤|S|≤105$1\
  \ \\leq |S| \\leq 10^5$\n- 1≤|T|≤|S|$1 \\leq |T| \\leq |S|$\n- 1≤Q≤105$1 \\leq Q\
  \ \\leq 10^5$\n- 1≤N≤109$1 \\leq N \\leq 10^9$\n\n-----Sample Input:-----\ncodechef\n\
  chefcode\n3\n4\n12\n1455\n\n-----Sample Output:-----\n0\n1\n181\n\n-----Explanation:-----\n\
  Pyramid will be formed as explained in the statement.\nQuery 1: Row number 4 of\
  \ the pyramid is code. The number of occurrences of chefcode in code is 0.\nQuery\
  \ 2: Row number 12 of the pyramid is codechefcode. The number of occurrences of\
  \ chefcode in codechefcode is 1."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_pattern_occurrences (keyword pattern : String) (queries\
  \ : List Nat) : List Nat :=\n  sorry\n"
"vc-theorems": "theorem count_pattern_result_properties (keyword pattern : String)\
  \ (queries : List Nat)\n  (h1 : keyword.length > 0) (h2 : pattern.length > 0) :\n\
  \  let result := count_pattern_occurrences keyword pattern queries\n  (result.length\
  \ = queries.length) ∧ \n  (∀ x ∈ result, x ≥ 0) :=\n  sorry\n\n\ntheorem count_pattern_monotonic\
  \ (keyword pattern : String) (query : Nat)\n  (h1 : keyword.length > 0) (h2 : pattern.length\
  \ > 0) :\n  let result1 := count_pattern_occurrences keyword pattern [query]\n \
  \ let result2 := count_pattern_occurrences keyword pattern [query + keyword.length]\n\
  \  List.head! result2 ≥ List.head! result1 := \n  sorry\n\n\ntheorem empty_pattern_error\
  \ (keyword : String) (pattern : String) (queries : List Nat)\n  (h1 : keyword.length\
  \ > 0) (h2 : pattern.length = 0) (h3 : queries.length > 0) :\n  ¬∃ result, result\
  \ = count_pattern_occurrences keyword pattern queries :=\n  sorry\n\n\ntheorem pattern_equals_keyword_bound\
  \ (keyword : String) (queries : List Nat)\n  (h1 : keyword.length > 0) (h2 : queries.length\
  \ > 0) :\n  let result := count_pattern_occurrences keyword keyword queries\n  ∀\
  \ (r q : Nat), r ∈ result → q ∈ queries → \n  r ≤ q / keyword.length + 1 :=\n  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
