"vc-description": "Motu and Tomu are very good friends who are always looking for\
  \ new games to play against each other and ways to win these games. One day, they\
  \ decided to play a new type of game with the following rules:\n- The game is played\
  \ on a sequence $A_0, A_1, \\dots, A_{N-1}$.\n- The players alternate turns; Motu\
  \ plays first, since he's earlier in lexicographical order.\n- Each player has a\
  \ score. The initial scores of both players are $0$.\n- On his turn, the current\
  \ player has to pick the element of $A$ with the lowest index, add its value to\
  \ his score and delete that element from the sequence $A$.\n- At the end of the\
  \ game (when $A$ is empty), Tomu wins if he has strictly greater score than Motu.\
  \ Otherwise, Motu wins the game.\nIn other words, Motu starts by selecting $A_0$,\
  \ adding it to his score and then deleting it; then, Tomu selects $A_1$, adds its\
  \ value to his score and deletes it, and so on.\nMotu and Tomu already chose a sequence\
  \ $A$ for this game. However, since Tomu plays second, he is given a different advantage:\
  \ before the game, he is allowed to perform at most $K$ swaps in $A$; afterwards,\
  \ the two friends are going to play the game on this modified sequence.\nNow, Tomu\
  \ wants you to determine if it is possible to perform up to $K$ swaps in such a\
  \ way that he can win this game.\n\n-----Input-----\n- The first line of the input\
  \ contains a single integer $T$ denoting the number of test cases. The description\
  \ of $T$ test cases follows.\n- The first line of each test case contains two space-separated\
  \ integers $N$ and $K$ denoting the number of elements in the sequence and the maximum\
  \ number of swaps Tomu can perform.\n- The second line contains $N$ space-separated\
  \ integers $A_0, A_1, \\dots, A_{N-1}$.\n\n-----Output-----\nFor each test case,\
  \ print a single line containing the string \"YES\" if Tomu can win the game or\
  \ \"NO\" otherwise (without quotes).\n\n-----Constraints-----\n- $1 \\le T \\le\
  \ 100$\n- $1 \\le N \\le 10,000$\n- $0 \\le K \\le 10,000$\n- $1 \\le A_i \\le 10,000$\
  \ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (20 points): $1 \\le N \\\
  le 100$\nSubtask #2 (80 points): original constraints\n\n-----Example Input-----\n\
  2\n6 0\n1 1 1 1 1 1\n5 1\n2 4 6 3 4\n\n-----Example Output-----\nNO\nYES\n\n-----Explanation-----\n\
  Example case 1: At the end of the game, both Motu and Tomu will have scores $1+1+1\
  \ = 3$. Tomu is unable to win that game, so the output is \"NO\".\nExample case\
  \ 2: If no swaps were performed, Motu's score would be $2+6+4 = 12$ and Tomu's score\
  \ would be $4+3 = 7$. However, Tomu can swap the elements $A_2 = 6$ and $A_3 = 3$,\
  \ which makes Motu's score at the end of the game equal to $2+3+4 = 9$ and Tomu's\
  \ score equal to $4+6 = 10$. Tomu managed to score higher than Motu, so the output\
  \ is \"YES\"."
"vc-preamble": "import Imports.AllImports\n\ndef can_tomu_win (n : Nat) (k : Nat)\
  \ (arr : List Nat) : String := sorry\n\ndef getOddElements (l : List Nat) : List\
  \ Nat :=\n  l.zipWith (fun i x => if i % 2 = 1 then some x else none) (List.range\
  \ l.length)\n   |>.filterMap id\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def getEvenElements (l : List Nat) : List Nat :=\n  l.zipWith (fun\
  \ i x => if i % 2 = 0 then some x else none) (List.range l.length)\n   |>.filterMap\
  \ id\n\n-- Property: Result is always either \"YES\" or \"NO\""
"vc-theorems": "theorem can_tomu_win_valid_output (n k : Nat) (arr : List Nat) :\n\
  \  can_tomu_win n k arr = \"YES\" ∨ can_tomu_win n k arr = \"NO\" := sorry\n\n--\
  \ Property: When k=0, if Tomu's initial sum ≤ Motu's initial sum, result is \"NO\"\
  \ \n\ntheorem k_zero_no_improvement (n : Nat) (arr : List Nat) \n  (h1 : arr.length\
  \ = n)\n  (h2 : (getOddElements arr).foldl (· + ·) 0 ≤ (getEvenElements arr).foldl\
  \ (· + ·) 0) :\n  can_tomu_win n 0 arr = \"NO\" := sorry\n\n-- Property: With k\
  \ ≥ n, if array has distinct values, Tomu can win\n\ntheorem large_k_wins (n : Nat)\
  \ (arr : List Nat)\n  (h1 : arr.length = n)\n  (h2 : n > 1)\n  (h3 : ∃ (x y : Nat),\
  \ x ∈ arr ∧ y ∈ arr ∧ x > y) :\n  can_tomu_win n n arr = \"YES\" := sorry\n\n--\
  \ Property: Base cases work correctly\n\ntheorem base_cases :\n  can_tomu_win 1\
  \ 0 [1] = \"NO\" ∧\n  can_tomu_win 2 1 [1, 2] = \"YES\" := sorry\n\n/--\ninfo: 'NO'\n\
  -/\n#guard_msgs in\n#eval can_tomu_win 6 0 [1, 1, 1, 1, 1, 1]\n\n/--\ninfo: 'YES'\n\
  -/\n#guard_msgs in\n#eval can_tomu_win 5 1 [2, 4, 6, 3, 4]\n\n/--\ninfo: 'YES'\n\
  -/\n#guard_msgs in\n#eval can_tomu_win 4 2 [1, 5, 3, 2]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
