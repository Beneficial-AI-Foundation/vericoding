"vc-description": "The description is rather long but it tries to explain what a financing\
  \ plan is. \n\nThe fixed monthly payment for a fixed rate mortgage is the amount\
  \ paid by the borrower every month that ensures \nthat the loan is paid off in full\
  \ with interest at the end of its term. \n\nThe monthly payment formula is based\
  \ on the annuity formula. \nThe monthly payment `c` depends upon:\n\n- `rate` -\
  \ the monthly interest rate is expressed as a decimal, not a percentage. \nThe monthly\
  \ rate is simply the **given** yearly percentage rate divided by 100 and then by\
  \ 12.\n\n- `term` - the number of monthly payments, called the loan's `term`.\n\
  - `principal` - the amount borrowed, known as the loan's principal (or `balance`).\n\
  \nFirst we have to determine `c`.\n\nWe have: `c = n /d` with `n = r * balance`\
  \ and `d = 1 - (1 + r)**(-term)` where `**` is the `power` function (you can look\
  \ at the reference below).\n\nThe payment `c` is composed of two parts. The first\
  \ part pays the interest (let us call it `int`)\ndue for the balance of the given\
  \ month, the second part repays the balance (let us call this part `princ`) hence\
  \ for the following month we get a `new balance = old balance - princ` with `c =\
  \ int + princ`. \n\nLoans are structured so that the amount of principal returned\
  \ to the borrower starts out small and increases with each mortgage payment. \n\
  While the mortgage payments in the first years consist primarily of interest payments,\
  \ the payments in the final years consist primarily of principal repayment.\n\n\
  A mortgage's amortization schedule provides a detailed look at precisely what portion\
  \ of each mortgage payment is dedicated to each component.\n\nIn an example of a\
  \ $100,000, 30-year mortgage with a rate of 6 percents the amortization schedule\
  \ consists of 360 monthly payments.\nThe partial amortization schedule below shows\
  \ with 2 decimal floats\nthe balance between principal and interest payments.\n\n\
  --|num_payment|c          |princ      |int        |Balance    |\n--|-----------|-----------|-----------|-----------|-----------|\n\
  --|1          |599.55     |99.55      |500.00     |99900.45   |\n--|...        |599.55\
  \     |...        |...        |...        |\n--|12         |599.55     |105.16 \
  \    |494.39     |98,771.99  |\n--|...        |599.55     |...        |...     \
  \   |...        |\n--|360        |599.55     |596.57     |2.98       |0.00     \
  \  |\n\n# Task:\nGiven parameters \n```\nrate: annual rate as percent (don't forgent\
  \ to divide by 100*12)\nbal: original balance (borrowed amount) \nterm: number of\
  \ monthly payments\nnum_payment: rank of considered month (from 1 to term)\n```\n\
  the function `amort` will return a formatted string:\n\n`\"num_payment %d c %.0f\
  \ princ %.0f int %.0f balance %.0f\" (with arguments num_payment, c, princ, int,\
  \ balance`)\n\n# Examples:\n```\namort(6, 100000, 360, 1) ->\n\"num_payment 1 c\
  \ 600 princ 100 int 500 balance 99900\"\n\namort(6, 100000, 360, 12) ->\n\"num_payment\
  \ 12 c 600 princ 105 int 494 balance 98772\"\n\n```\n# Ref"
"vc-preamble": "import Imports.AllImports\n\ndef amort (rate : Float) (bal : Int)\
  \ (term : Int) (num_payments : Int) : String := sorry\n\nstructure AmortValues where\n\
  \  num_payment : Int\n  payment : Int\n  principal : Int\n  interest : Int\n  balance\
  \ : Float\n\n/-- Helper function to extract numeric values from amortization string\
  \ output -/\n\ndef extractValuesFromString (s : String) : AmortValues := sorry\n\
  \n/-- Helper function to check if string matches expected pattern -/"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def matchesPattern (s : String) : Bool := sorry\n\ntheorem amort_output_format\
  \ (rate : Float) (bal : Int) (term : Int) (num_payments : Int)\n  (h1 : rate ≥ 0.1)\
  \ (h2 : rate ≤ 30.0)\n  (h3 : bal ≥ 1000) (h4 : bal ≤ 1000000)\n  (h5 : term ≥ 12)\
  \ (h6 : term ≤ 360)\n  (h7 : num_payments ≥ 1) (h8 : num_payments ≤ term) :\n  let\
  \ result := amort rate bal term num_payments\n  let values := extractValuesFromString\
  \ result\n  (matchesPattern result) ∧ \n  (values.num_payment = num_payments) ∧\n\
  \  (values.payment ≥ 0) ∧\n  (values.principal ≥ 0) ∧\n  (values.interest ≥ 0) ∧\n\
  \  (Int.natAbs (values.principal + values.interest - values.payment) ≤ 1) := sorry"
"vc-theorems": ""
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
