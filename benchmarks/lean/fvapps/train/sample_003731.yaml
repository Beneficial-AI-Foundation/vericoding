"vc-description": "# Letterss of Natac\nIn a game I just made up that doesn’t have\
  \ anything to do with any other game that you may or may not have played, you collect\
  \ resources on each turn and then use those resources to build settlements, roads,\
  \ and cities or buy a development. Other kata about this game can be found [here](https://www.codewars.com/collections/59e6938afc3c49005900011f).\n\
  \n## Task\nThis kata asks you to implement the function `build_or_buy(hand)` , which\
  \ takes as input a `hand`, the resources you have (a string of letters representing\
  \ the resources you have), and returns a list of the unique game objects you can\
  \ build or buy given your hand. \n\nThere are five different resources, `'b'`, `'w'`,\
  \ `'g'`, `'s'`, and `'o'`.\n\nGame objects and the resources required to build or\
  \ buy them are as follows:\n1. `'road'`: `bw`\n2. `'settlement'`: `bwsg`\n3. `'city'`:\
  \ `ooogg`\n4. `'development'`: `osg`\n\n## Examples\n```python\nbuild_or_buy(\"\
  bwoo\")  => ['road']\nbuild_or_buy(\"bwsg\")  => ['road', 'settlement'] or ['settlement',\
  \ 'road']\nbuild_or_buy(\"\")      => []\nbuild_or_buy(\"ogogoogogo\")  => ['city']\n\
  \n```\n\n## Notes: \n1. Don't mutate the hand\n2. The order of the returned list\
  \ doesn't matter\n3. You do not have to test for whether a hand is valid. \n4. The\
  \ list will be interpreted to mean 'you can build any of these objects,' not 'you\
  \ can build all these objects in one play'. See example 2 above, even though there\
  \ is only one `'b'` and one `'w'` in `hand`, both `Road()` and `Settlement()` are\
  \ in the list. \n5. A hand can be empty. In the event a hand is empty, you can't\
  \ build or buy anything, so return an empty list, see example 3 above.\n6. Hand\
  \ are between 0 and 39 in length."
"vc-preamble": "import Imports.AllImports\n\ndef build_or_buy (hand : String) : List\
  \ String := sorry\n\ndef ValidResources := \"bwsog\"\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def countChar (s : List Char) (c : Char) : Nat :=\n  s.filter (·\
  \ = c) |>.length\n"
"vc-theorems": "theorem build_or_buy_returns_list (hand : String) :\n  hand.data.all\
  \ (· ∈ ValidResources.data) →\n  build_or_buy hand ≠ [] ∨ build_or_buy hand = []\
  \ := by\n  sorry\n\n\ntheorem build_or_buy_valid_items (hand : String) (result :\
  \ List String) :\n  hand.data.all (· ∈ ValidResources.data) →\n  result = build_or_buy\
  \ hand →\n  result.all (· ∈ [\"road\", \"settlement\", \"city\", \"development\"\
  ]) := by\n  sorry\n\n\ntheorem can_build_road (hand : String) :\n  hand.data.all\
  \ (· ∈ ValidResources.data) →\n  \"road\" ∈ build_or_buy hand →\n  countChar hand.data\
  \ 'b' ≥ 1 ∧ countChar hand.data 'w' ≥ 1 := by\n  sorry\n\n\ntheorem can_build_settlement\
  \ (hand : String) :\n  hand.data.all (· ∈ ValidResources.data) →\n  \"settlement\"\
  \ ∈ build_or_buy hand →\n  countChar hand.data 'b' ≥ 1 ∧ countChar hand.data 'w'\
  \ ≥ 1 ∧\n  countChar hand.data 's' ≥ 1 ∧ countChar hand.data 'g' ≥ 1 := by\n  sorry\n\
  \n\ntheorem can_build_city (hand : String) :\n  hand.data.all (· ∈ ValidResources.data)\
  \ →\n  \"city\" ∈ build_or_buy hand →\n  countChar hand.data 'o' ≥ 3 ∧ countChar\
  \ hand.data 'g' ≥ 2 := by\n  sorry\n\n\ntheorem can_build_development (hand : String)\
  \ :\n  hand.data.all (· ∈ ValidResources.data) →\n  \"development\" ∈ build_or_buy\
  \ hand →\n  countChar hand.data 'o' ≥ 1 ∧ countChar hand.data 's' ≥ 1 ∧\n  countChar\
  \ hand.data 'g' ≥ 1 := by\n  sorry\n\n\ntheorem empty_hand_empty_result :\n  build_or_buy\
  \ \"\" = [] := by\n  sorry\n\n\ntheorem result_consistency (hand : String) :\n \
  \ hand.data.all (· ∈ ValidResources.data) →\n  build_or_buy hand = build_or_buy\
  \ hand := by\n  sorry\n\n/--\ninfo: ['road']\n-/\n#guard_msgs in\n#eval build_or_buy\
  \ \"bwoo\"\n\n/--\ninfo: []\n-/\n#guard_msgs in\n#eval build_or_buy \"\"\n\n/--\n\
  info: ['city']\n-/\n#guard_msgs in\n#eval build_or_buy \"ogogoogogo\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
