"vc-description": "Sandy is a professor at a very reputed institute. The institute\
  \ mandates that all the lectures be communicated in English. As Sandy is not very\
  \ good at English(or anything actually) the presentations he displays in class have\
  \ a lot of spelling mistakes in them.\nAs you have a dictionary on you containing\
  \ $N$ words in it, the responsibility of correctly deducing the misspelt word falls\
  \ upon your shoulders. Sandy's presentation contains in them, $Q$ words which you\
  \ $think$ are wrongly spelt. A word is misspelt if a $single$ letter in it is missing\
  \ or is different from the corresponding correctly spelled word in your dictionary.\n\
  For each of the misspelt word in the presentation find out the corresponding correct\
  \ word from your dictionary.\nNote : \n- For each misspelt word in Sandy's presentation,\
  \ there exists one and only one correctly spelt word in your dictionary that corresponds\
  \ to it. \n- Out of the $Q$ misspelt words given to you, there might be some which\
  \ are correctly spelt i.e., that word completely matches a word in your dictionary.\
  \ (Give Sandy some credit, he's a teacher after all). For such words print the word\
  \ corresponding to it in your dictionary.\n- The maximum length of each string can\
  \ be $L$.\n\n-----Input:-----\n- First line contains a single integer $T$ denoting\
  \ the number of testcases. Then the testcases follow. \n- The first line of each\
  \ test case contains two space-separated integers $N, Q$ corresponding to the number\
  \ of words in your dictionary and the number of misspelt word in Sandy's dictionary\
  \ respectively.\n- $N$ lines follow each containing a single string $S$ denoting\
  \ a word in your dictionary.\n- $Q$ lines follow each containing a single string\
  \ $M$ denoting a misspelt word in Sandy's presentation.\n\n-----Output:-----\nIn\
  \ each testcase, for each of the $Q$ misspelt words, print a single word $S$ corresponding\
  \ to the correctly spelt word in your dictionary.\n\n-----Constraints-----\n- $1\
  \ \\leq T \\leq 100$\n- $1 \\leq N \\leq 200$\n- $1 \\leq Q \\leq 200$\n- $1 \\\
  leq L \\leq 100$\n- None of the words contain any spaces in them.\n- Each letter\
  \ in every word is in lower case.\n\n-----Subtasks-----\n- \nSubtask 1 : 10 points\n\
  - $1 \\leq N \\leq 50$\n- $1 \\leq Q \\leq 10$\n- \nSubtask 2 : 90 points\n- Original\
  \ Constraints\n\n-----Sample Input:-----\n1\n5 2\nszhbdvrngk\nqzhxibnuec\njfsalpwfkospl\n\
  levjehdkjy\nwdfhzgatuh\nszhbdvcngk\nqzhxbnuec\n\n-----Sample Output:-----\nszhbdvrngk\n\
  qzhxibnuec\n\n-----EXPLANATION:-----\n- In the first misspelt word $szhbdvcngk$,\
  \ a single letter $c$ is different from the original word $szhbdvrngk$.\n- The second\
  \ misspelt word $qzhxbnuec$ is missing the letter $i$ that  was in the original\
  \ word $qzhxibnuec$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_correct_spellings (dict_words : List String) (misspelled\
  \ : List String) : List String :=\n  sorry\n\n\n\n\n"
"vc-theorems": "theorem empty_misspelled_returns_empty {dict_words : List String}\
  \ :\n  find_correct_spellings dict_words [] = [] :=\n  sorry\n\n\ntheorem empty_dict_returns_empty\
  \ {misspelled : List String} :\n  find_correct_spellings [] misspelled = [] :=\n\
  \  sorry\n\n\ntheorem exact_matches_returned {words : List String} (w : String)\
  \ :\n  w ∈ words → w ∈ find_correct_spellings words words :=\n  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
