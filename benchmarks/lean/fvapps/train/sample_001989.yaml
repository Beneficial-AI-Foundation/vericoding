"vc-description": "Barney lives in NYC. NYC has infinite number of intersections numbered\
  \ with positive integers starting from 1. There exists a bidirectional road between\
  \ intersections i and 2i and another road between i and 2i + 1 for every positive\
  \ integer i. You can clearly see that there exists a unique shortest path between\
  \ any two intersections. [Image] \n\nInitially anyone can pass any road for free.\
  \ But since SlapsGiving is ahead of us, there will q consecutive events happen soon.\
  \ There are two types of events:\n\n1. Government makes a new rule. A rule can be\
  \ denoted by integers v, u and w. As the result of this action, the passing fee\
  \ of all roads on the shortest path from u to v increases by w dollars. \n\n2. Barney\
  \ starts moving from some intersection v and goes to intersection u where there's\
  \ a girl he wants to cuddle (using his fake name Lorenzo Von Matterhorn). He always\
  \ uses the shortest path (visiting minimum number of intersections or roads) between\
  \ two intersections.\n\nGovernment needs your calculations. For each time Barney\
  \ goes to cuddle a girl, you need to tell the government how much money he should\
  \ pay (sum of passing fee of all roads he passes).\n\n\n-----Input-----\n\nThe first\
  \ line of input contains a single integer q (1 ≤ q ≤ 1 000).\n\nThe next q lines\
  \ contain the information about the events in chronological order. Each event is\
  \ described in form 1 v u w if it's an event when government makes a new rule about\
  \ increasing the passing fee of all roads on the shortest path from u to v by w\
  \ dollars, or in form 2 v u if it's an event when Barnie goes to cuddle from the\
  \ intersection v to the intersection u.\n\n1 ≤ v, u ≤ 10^18, v ≠ u, 1 ≤ w ≤ 10^9\
  \ states for every description line.\n\n\n-----Output-----\n\nFor each event of\
  \ second type print the sum of passing fee of all roads Barney passes in this event,\
  \ in one line. Print the answers in chronological order of corresponding events.\n\
  \n\n-----Example-----\nInput\n7\n1 3 4 30\n1 4 1 2\n1 3 6 8\n2 4 3\n1 6 1 40\n2\
  \ 3 7\n2 2 4\n\nOutput\n94\n0\n32\n\n\n\n-----Note-----\n\nIn the example testcase:\n\
  \nHere are the intersections used: [Image]   Intersections on the path are 3, 1,\
  \ 2 and 4.  Intersections on the path are 4, 2 and 1.  Intersections on the path\
  \ are only 3 and 6.  Intersections on the path are 4, 2, 1 and 3. Passing fee of\
  \ roads on the path are 32, 32 and 30 in order. So answer equals to 32 + 32 + 30\
  \ = 94.  Intersections on the path are 6, 3 and 1.  Intersections on the path are\
  \ 3 and 7. Passing fee of the road between them is 0.  Intersections on the path\
  \ are 2 and 4. Passing fee of the road between them is 32 (increased by 30 in the\
  \ first event and by 2 in the second)."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_nyc_roads (events : List (Nat × Nat × Nat × Nat)) : List\
  \ Nat := sorry\n\n-- The output length matches number of queries"
"vc-theorems": "theorem output_length_correct {events : List (Nat × Nat × Nat × Nat)}\
  \ :\n  List.length (solve_nyc_roads events) = \n  List.length (List.filter (fun\
  \ e => e.1 == 2) events) := sorry\n\n-- The result list contains only natural numbers\n\
  \ntheorem result_type_correct {events : List (Nat × Nat × Nat × Nat)} :\n  ∀ x ∈\
  \ solve_nyc_roads events, Nat.le 0 x := sorry\n\n-- If only queries are provided\
  \ with no rules, result is all zeros\n\ntheorem queries_only_gives_zeros {events\
  \ : List (Nat × Nat × Nat × Nat)} \n  (h : ∀ e ∈ events, e.1 = 2) :\n  ∀ x ∈ solve_nyc_roads\
  \ events, x = 0 := sorry\n\n-- All results are non-negative\n\ntheorem results_non_negative\
  \ {events : List (Nat × Nat × Nat × Nat)} :\n  ∀ x ∈ solve_nyc_roads events, Nat.le\
  \ 0 x := sorry\n\n/--\ninfo: [94, 0, 32]\n-/\n#guard_msgs in\n#eval solve_nyc_roads\
  \ [(1, 3, 4, 30), (1, 4, 1, 2), (1, 3, 6, 8), (2, 4, 3), (1, 6, 1, 40), (2, 3, 7),\
  \ (2, 2, 4)]\n\n/--\ninfo: [0]\n-/\n#guard_msgs in\n#eval solve_nyc_roads [(2, 666077344481199252,\
  \ 881371880336470888)]\n\n/--\ninfo: [0]\n-/\n#guard_msgs in\n#eval solve_nyc_roads\
  \ [(1, 100, 50, 1), (2, 4294967396, 1)]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
