"vc-description": "=====Problem Statement=====\nIntegers in Python can be as big as\
  \ the bytes in your machine's memory. There is no limit in size as there is: 2^31\
  \ - 1 (c++ int) or 2^63 - 1 (C++ long long int).\nAs we know, a^b the result of\
  \ grows really fast with increasing b.\nLet's do some calculations on very large\
  \ integers.\nTask\nRead four numbers, a, b, c, and d, and print the result of a^b\
  \ + c^d.\n\n=====Input Format=====\nIntegers a, b, c, and d are given on four separate\
  \ lines, respectively.\n\n=====Constraints=====\n1≤a≤1000\n1≤b≤1000\n1≤c≤1000\n\
  1≤d≤1000\n\n=====Output Format=====\nPrint the result of a^b + c^d on one line."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calculate_power_sum (a b c d : Nat) : Nat := sorry\n\ntheorem\
  \ power_sum_nonneg (a b c d : Nat) : \n  calculate_power_sum a b c d ≥ 0 := sorry\n"
"vc-theorems": "theorem power_sum_is_powers (a b c d : Nat) :\n  calculate_power_sum\
  \ a b c d = a^b + c^d := sorry\n\n\ntheorem power_sum_symmetry (x n : Nat) :\n \
  \ calculate_power_sum x n x n = 2 * x^n := sorry  \n\n\ntheorem power_sum_with_zero_right\
  \ (a b c : Nat) :\n  calculate_power_sum a b c 0 = a^b + 1 := sorry\n\n\ntheorem\
  \ power_sum_with_zero_mid (a b c : Nat) :\n  calculate_power_sum a 0 c b = 1 + c^b\
  \ := sorry\n\n/--\ninfo: 4710194409608608369201743232\n-/\n#guard_msgs in\n#eval\
  \ calculate_power_sum 9 29 7 27\n\n/--\ninfo: 17\n-/\n#guard_msgs in\n#eval calculate_power_sum\
  \ 2 3 3 2\n\n/--\ninfo: 50\n-/\n#guard_msgs in\n#eval calculate_power_sum 5 2 5\
  \ 2\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
