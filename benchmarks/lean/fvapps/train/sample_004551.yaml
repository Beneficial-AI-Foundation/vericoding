"vc-description": "Create a `Vector` class with `x` and a `y` attributes that represent\
  \ component magnitudes in the x and y directions.\n\nYour vectors should handle\
  \ vector additon with an `.add()` method that takes a second vector as an argument\
  \ and returns a new vector equal to the sum of the vector you call `.add()` on and\
  \ the vector you pass in.\n\nFor example:\n\n```python\n>>> a = Vector(3, 4)\n>>>\
  \ a.x\n3\n>>> a.y\n4\n>>> b = Vector(1, 2)\n>>> c = a.add(b)\n>>> c.x\n4\n>>> c.y\n\
  6\n```\n\nAdding vectors when you have their components is easy: just add the two\
  \ x components together and the two y components together to get the x and y components\
  \ for the vector sum."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def Vector.add : Vector → Vector → Vector\n  | v1, v2 => sorry\n"
"vc-theorems": "theorem vector_addition_coordinates (v1 v2 : Vector) :\n  let result\
  \ := v1.add v2\n  result.x = v1.x + v2.x ∧ result.y = v1.y + v2.y :=\nsorry\n\n\n\
  theorem vector_addition_commutative (v1 v2 : Vector) : \n  v1.add v2 = v2.add v1\
  \ :=\nsorry\n\n\ntheorem zero_vector_identity (v : Vector) :\n  let zero := Vector.mk\
  \ 0 0\n  v.add zero = v :=\nsorry\n\n\ntheorem inverse_vector_sum_zero (v : Vector)\
  \ :\n  let inverse := Vector.mk (-v.x) (-v.y)\n  let result := v.add inverse\n \
  \ result.x = 0 ∧ result.y = 0 :=\nsorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
