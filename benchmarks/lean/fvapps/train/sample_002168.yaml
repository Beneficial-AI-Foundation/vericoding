"vc-description": "There is a directed graph with N vertices and N edges. The vertices\
  \ are numbered 1, 2, ..., N.\nThe graph has the following N edges: (p_1, 1), (p_2,\
  \ 2), ..., (p_N, N), and the graph is weakly connected. Here, an edge from Vertex\
  \ u to Vertex v is denoted by (u, v), and a weakly connected graph is a graph which\
  \ would be connected if each edge was bidirectional.\nWe would like to assign a\
  \ value to each of the vertices in this graph so that the following conditions are\
  \ satisfied. Here, a_i is the value assigned to Vertex i.\n - Each a_i is a non-negative\
  \ integer.\n - For each edge (i, j), a_i \\neq a_j holds.\n - For each i and each\
  \ integer x(0 ≤ x < a_i), there exists a vertex j such that the edge (i, j) exists\
  \ and x = a_j holds.\nDetermine whether there exists such an assignment.\n\n-----Constraints-----\n\
  \ - 2 ≤ N ≤ 200 000\n - 1 ≤ p_i ≤ N\n - p_i \\neq i\n - The graph is weakly connected.\n\
  \n-----Input-----\nInput is given from Standard Input in the following format:\n\
  N\np_1 p_2 ... p_N\n\n-----Output-----\nIf the assignment is possible, print POSSIBLE;\
  \ otherwise, print IMPOSSIBLE.\n\n-----Sample Input-----\n4\n2 3 4 1\n\n-----Sample\
  \ Output-----\nPOSSIBLE\n\nThe assignment is possible: {a_i} = {0, 1, 0, 1} or {a_i}\
  \ = {1, 0, 1, 0}."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_valid_parent_array (n: Nat) (p: List Nat) : Bool := sorry\n\
  \ndef solve_graph_assignment (n: Nat) (p: List Nat) : String := sorry\n"
"vc-theorems": "theorem odd_cycle_impossible (n: Nat) (h1: 2 ≤ n) (h2: n % 2 = 1)\
  \ : \n  let p := (List.range (n-1)).map (λ x => x + 2) ++ [1]\n  solve_graph_assignment\
  \ n p = \"IMPOSSIBLE\" := sorry\n\n\ntheorem even_cycle_possible (n: Nat) (h1: 2\
  \ ≤ n) (h2: n % 2 = 0) :\n  let p := (List.range (n-1)).map (λ x => x + 2) ++ [1]\n\
  \  solve_graph_assignment n p = \"POSSIBLE\" := sorry\n\n\ntheorem valid_output_format\
  \ (n: Nat) (p: List Nat) (h1: 2 ≤ n) :\n  is_valid_parent_array n p →\n  (solve_graph_assignment\
  \ n p = \"POSSIBLE\" ∨ solve_graph_assignment n p = \"IMPOSSIBLE\") := sorry\n\n\
  \ntheorem consistent_result (n: Nat) (p: List Nat) (h1: 2 ≤ n) :\n  is_valid_parent_array\
  \ n p →\n  solve_graph_assignment n p = solve_graph_assignment n p := sorry"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
