"vc-description": "# Let's play some games!\n\nA new RPG called **_Demon Wars_** just\
  \ came out! Imagine the surprise when you buy it after work, go home, start you\
  \ _GameStation X_ and it happens to be too difficult for you. Fortunately, you consider\
  \ yourself a computer connoisseur, so you want to build an AI that tells you every\
  \ step you have to make to **defeat the evil Demon Lord** and win the game. For\
  \ now, let's program a simulator.\n\nThis game features procedurally generated stages\
  \ like this one:\n\n\n  Health: ♥️ ♥️ ♥️   Atk: 1   Def: 1   Bag: []  \nK   E  \
  \   |    X#        C      E   S#  D  \n    E     #######               ###### E\
  \ E \n##### #####                          ###-##\n     M                      \
  \           EEE \n                     ###   ###             \n                \
  \     #       ##E##E##      \n     ^               #          C  K#      \n    \
  \           C      #   H   ##E##E##       \n\n\n\nAs you can see in the upper status\
  \ bar, your player starts with **three Health Points**, **1 Attack**, **1 Defense**\
  \ and an empty **Bag**. These are the only stats that you have to care about for\
  \ the game. As for the map, we can see many different things, so let's explain every\
  \ tile one by one:\n* `^` or `v` or `<` or `>` => **Player** (you). It can face\
  \ any of four directions.\n* `#` => **Wall**. You cannot pass through here.\n* `C`\
  \ => **Coin _[object]_**.\n* `M` => **Merchant**. They will go away if you give\
  \ them **three coins**.\n* `K` => **Key _[object]_**. They can open a door, after\
  \ which they break _(yes, like in horror games)_.\n* `-` and `|` => **Doors** _(there\
  \ are two doors in the map above)_.\n* `H` => **Health Potion _[object]_**. It refuels\
  \ your life to three hearts.\n* `S` => **Shield**. It gives **+1 defense** permanently.\n\
  * `X` => **Dual Swords**. It gives **+1 attack** permanently.\n* `E` => **Enemy**.\
  \ Has **1 Health Point** and **2 Attack**.\n* `D` => **Demon Lord**. Has **10 Health\
  \ Points** and **3 Attack**. You win the game if you kill him.\n\nNow, _Demon Wars_\
  \ is a turn based game with tank controls. Each turn you can either:\n* Move forward.\n\
  * Change direction.\n* Use an item.\n* Attack the enemy you have in front of you.\n\
  \n\nWill you be able to defeat your foe and save us all?\n\n---------------------\n\
  \n# Attack mechanics and enemies\n\nWhen you use the attack command, you will attack\
  \ the enemy right in front of you and deal **the same amount of damage as your attack\
  \ stat**:\n\n\n E                         E\n>E    === [Attack] ==>    > \n E  \
  \                       E\n\n\n\n**However**, an enemy can attack you (whatever\
  \ your orientation is), as long as you are on an adjacent cell to the enemy (vertically\
  \ or horizontally, not diagonally) and if one of those conditions is fullfilled:\n\
  \n* If you turn your character during the turn.\n* If you move away from them (_D&D's\
  \ opportunity attack_ :D).\n* If you use a potion. You will still recover your life\
  \ points, but then you will be attacked.\n\nThe damage formula is `max(0, (Enemy's\
  \ attack stat) - (Your defense stat))`. Just remember that you attack and use objects\
  \ **before** the enemies besides you attack. Here is an example where two enemies\
  \ would attack you:\n\n\nEEE                        EEE\n >E    === [Attack] ==>\
  \     > \nEEE                        EEE\n\n\nBut enemies are more than obstacles,\
  \ each time you defeat three of them (demon lord not included), you level up! This\
  \ level increase will give you **+1 attack** permanently.\n\n# Object usage mechanics\n\
  \nThere are only three cases where it is acceptable to use objects:\n* When you\
  \ use a key in front of a closed door.\n\n\n #                          #\n>|  \
  \  === [Use Key] ==>    > \n #                          #\n\n\n\n* When you use\
  \ a coin in front of a merchant (repeat three times for them to go away).\n\n\n\n\
  >M  === [Use Coin] ==>  >M  === [Use Coin] ==>  >M  === [Use Coin] ==> > \n\n\n\n\
  \n* When you refuel your life using a potion (you must have suffered some damage).\n\
  \nAny other object usage is considered **invalid**. Also, this is more or less standard,\
  \ but you have to walk over an object to pick it up automatically.\n\n---------------------\n\
  \n# Your task\n\nWrite a function `rpg(field: List[List[str]], actions: List[str])\
  \ -> Tuple[List[List[str]], int, int, int, List[str]]` that takes the initial state\
  \ of the game map and a list of actions and returns the new state of the map and\
  \ the player after executing them in order. All these actions must be valid (no\
  \ using objects in invalid spots, attacking thin air, going out of bounds, etc),\
  \ so if any of them turns out not to be valid, return `None`. **Dying counts as\
  \ an invalid state**.\n\nThe order of the elements of the output tuple is: (`new\
  \ map state`, `health`, `attack`, `defense`, `sorted bag`)\n\nThe syntax of the\
  \ actions is as follows:\n* `F` to move forward.\n* `^`, `>`, `v` and `<`to rotate\
  \ the player.\n* `A` to attack the enemy you have in front of you.\n* `C`, `K` and\
  \ `H` to use a coin, a key and a health potion, respectively.\n\n**Technical notes:**\
  \ \n* You **can** mutate the input (and probably should), but it is not necessary.\n\
  * There will only be one Demon Lord per map, but every other tile may be repeated\
  \ two or even more times.\n* Only the tiles marked as **[object]** will be stored\
  \ in your bag (i.e. keys, coins and potions).\n* Only valid inputs will be given.\n\
  \n----------------\n\nAs always, I hope you have fun with this kata :)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def rpg : List (List Char) → List Action → Option GameState :=\
  \ sorry\n\ntheorem valid_field_movements {field : List (List Char)} {actions : List\
  \ Action} \n    (h : rpg field actions ≠ none) :\n  let result := (rpg field actions).get!\n\
  \  ∃ dir, dir ∈ ['<', '>', '^', 'v'] ∧ \n  dir ∈ result.field.join := sorry\n"
"vc-theorems": "theorem item_collection {field : List (List Char)} {actions : List\
  \ Action}\n    (h : rpg field actions ≠ none) :\n  let result := (rpg field actions).get!\n\
  \  result.attack ≥ 1 ∧ result.defense ≥ 1 := sorry\n\n\ntheorem health_bounds {field\
  \ : List (List Char)} {actions : List Action}\n    (h : rpg field actions ≠ none)\
  \ :\n  let result := (rpg field actions).get!\n  1 ≤ result.health ∧ result.health\
  \ ≤ 3 := sorry\n\n\ntheorem merchant_interaction {field : List (List Char)} {actions\
  \ : List Action}\n    (h : rpg field actions ≠ none) :\n  let result := (rpg field\
  \ actions).get!\n  'C' ∉ result.bag := sorry\n\n\ntheorem combat_outcome {field\
  \ : List (List Char)} {actions : List Action}\n    (h : rpg field actions ≠ none)\n\
  \    (h2 : field.length > 0)\n    (h3 : field[0]!.length > 0) :\n  let result :=\
  \ (rpg field actions).get!\n  result.field[0]![0]! = ' ' ∨ field[0]![0]! = 'E' :=\
  \ sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
