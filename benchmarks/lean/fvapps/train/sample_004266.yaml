vc-description: |-
  You get any card as an argument. Your task is to return a suit of this card.

  Our deck (is preloaded):
  ```python
  DECK = ['2S','3S','4S','5S','6S','7S','8S','9S','10S','JS','QS','KS','AS',
          '2D','3D','4D','5D','6D','7D','8D','9D','10D','JD','QD','KD','AD',
          '2H','3H','4H','5H','6H','7H','8H','9H','10H','JH','QH','KH','AH',
          '2C','3C','4C','5C','6C','7C','8C','9C','10C','JC','QC','KC','AC']
  ```

  ```python
  ('3C') -> return 'clubs'
  ('3D') -> return 'diamonds'
  ('3H') -> return 'hearts'
  ('3S') -> return 'spades'
  ```
vc-preamble: |-
  import Imports.AllImports

  def valid_suits := ["C", "S", "D", "H"]
  def valid_ranks := ["2","3","4","5","6","7","8","9","10","J","Q","K","A"] 
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def suit_map := [("C", "clubs"), ("S", "spades"), ("D", "diamonds"), ("H", "hearts")]

  def define_suit (card : String) : String :=
    sorry
vc-theorems: |
  theorem define_suit_valid (rank : String) (suit : String)
    (h1 : rank ∈ valid_ranks)
    (h2 : suit ∈ valid_suits) :
    ∃ result, result ∈ ["clubs", "spades", "diamonds", "hearts"] ∧
    define_suit (rank ++ suit) = result := 
    sorry


  theorem define_suit_invalid (card : String) 
    (h : ∃ rank, rank ∈ valid_ranks ∧ card = rank ++ "X") :
    ¬∃ result, define_suit card = result :=
    sorry

  /--
  info: 'clubs'
  -/
  #guard_msgs in
  #eval define_suit "3C"

  /--
  info: 'spades'
  -/
  #guard_msgs in
  #eval define_suit "QS"

  /--
  info: 'hearts'
  -/
  #guard_msgs in
  #eval define_suit "JH"
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
