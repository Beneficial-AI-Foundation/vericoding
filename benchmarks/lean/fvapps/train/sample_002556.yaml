"vc-description": "You get a new job working for Eggman Movers.  Your first task is\
  \ to write a method that will allow the admin staff to enter a person’s name and\
  \ return what that person's role is in the company.\n\nYou will be given an array\
  \ of object literals holding the current employees of the company.  You code must\
  \ find the employee with the matching firstName and lastName and then return the\
  \ role for that employee or if no employee is not found it should return \"Does\
  \ not work here!\"\n\nThe array is preloaded and can be referenced using the variable\
  \ `employees` (`$employees` in Ruby). It uses the following structure.\n\n```python\n\
  employees = [ {'first_name': \"Dipper\", 'last_name': \"Pines\", 'role': \"Boss\"\
  }, ...... ]\n```\n\nThere are no duplicate names in the array and the name passed\
  \ in will be a single string with a space between the first and last name i.e. Jane\
  \ Doe or just a name."
"vc-preamble": "import Imports.AllImports\n\ndef find_employees_role (name : String)\
  \ : String :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def valid_roles : List String := \n  [\"Boss\", \"Truck Driver\"\
  , \"Warehouse Manager\", \"Sales Assistant\",\n   \"Admin\", \"Sales Manager\",\
  \ \"Warehouse Picker\", \"Receptionist\", \"Trainee\"]\n\ntheorem known_employee_roles_are_valid\
  \ (name : String) (h : name.length > 0) :\n  let role := find_employees_role name\n\
  \  role = \"Does not work here!\" ∨ role ∈ valid_roles :=\nsorry\n"
"vc-theorems": "theorem returns_string (name : String) (h : name.length > 0) : \n\
  \  String.length (find_employees_role name) > 0 :=\nsorry\n\n\ntheorem unknown_single_name_returns_not_found\
  \ (name : String) (h1 : name.length > 0) \n    (h2 : ¬(name.contains ' ')) :\n \
  \ find_employees_role name = \"Does not work here!\" :=\nsorry\n\n\ntheorem name_order_matters\
  \ (first last : String) \n    (h1 : first.length > 0) (h2 : last.length > 0) :\n\
  \  let role1 := find_employees_role (first ++ \" \" ++ last)\n  let role2 := find_employees_role\
  \ (last ++ \" \" ++ first)\n  (role1 ≠ \"Does not work here!\" ∧ role2 ≠ \"Does\
  \ not work here!\") →\n  role1 ≠ role2 :=\nsorry\n\n/--\ninfo: 'Truck Driver'\n\
  -/\n#guard_msgs in\n#eval find_employees_role \"Morty Smith\"\n\n/--\ninfo: 'Admin'\n\
  -/\n#guard_msgs in\n#eval find_employees_role \"Anna Bell\"\n\n/--\ninfo: 'Does\
  \ not work here!'\n-/\n#guard_msgs in\n#eval find_employees_role \"Bell Jewel\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
