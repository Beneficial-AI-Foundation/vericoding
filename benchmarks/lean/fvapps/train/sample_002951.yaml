"vc-description": "If you can't sleep, just count sheep!!\n\n## Task:\nGiven a non-negative\
  \ integer, `3` for example, return a string with a murmur: `\"1 sheep...2 sheep...3\
  \ sheep...\"`.  Input will always be valid, i.e. no negative integers."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_sheep (n: Int) : String := sorry\n\ntheorem count_sheep_format\
  \ {n: Nat} :\n  count_sheep n = String.join (List.map (fun i => s!\"{i} sheep...\"\
  ) (List.range n)) := sorry\n"
"vc-theorems": "theorem count_sheep_count {n: Nat} :\n  (count_sheep n).length = n\
  \ * (\"1 sheep...\".length) := sorry\n\n\ntheorem count_sheep_ordered {n: Nat} (h:\
  \ n > 0) :\n  count_sheep n â‰  \"\" := sorry\n\n\ntheorem count_sheep_zero :\n  count_sheep\
  \ 0 = \"\" := sorry\n\n\ntheorem count_sheep_negative {n: Int} (h: n < 0) :\n  count_sheep\
  \ n = \"\" := sorry\n\n/--\ninfo: '1 sheep...2 sheep...3 sheep...'\n-/\n#guard_msgs\
  \ in\n#eval count_sheep 3\n\n/--\ninfo: '1 sheep...'\n-/\n#guard_msgs in\n#eval\
  \ count_sheep 1\n\n/--\ninfo: ''\n-/\n#guard_msgs in\n#eval count_sheep 0\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
