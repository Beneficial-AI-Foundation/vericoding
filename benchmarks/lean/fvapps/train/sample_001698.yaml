"vc-description": "pre.handle{\n      height: 2em;\n      width: 4em;\n      margin:\
  \ auto;\n      margin-bottom: 0 !important;\n      background: none !important;\n\
  \      \n      border-radius: 0.5em 0.5em 0 0; \n      border-top: 5px solid saddlebrown;\n\
  \      border-left: 5px solid saddlebrown;\n      border-right: 5px solid saddlebrown;\n\
  \  }\n\n  table.example-piece{\n      width: fit-content;\n      height: fit-content;\n\
  \      \n      margin: auto;\n  }\n\n  pre.piece{\n      font-size: 1.75em;\n  \
  \    line-height: 1.4;\n      letter-spacing: 0.1em;\n      \n      background:\
  \ none !important;\n  }\n\n  pre.bag{\n      border-radius: 0.5em; \n      border:5px\
  \ solid saddlebrown; \n      width: fit-content; \n      background: burlywood;\n\
  \      \n      font-size: 1.75em;\n      line-height: 1.4;\n      letter-spacing:\
  \ 0.1em;\n      color: white;\n      text-align: center;\n      \n      margin:\
  \ auto;\n      padding: 0.2em;\n      \n  }\n  \n  pre b{\n      padding: 0.1em;\
  \  \n  }\n  \n  .a{ background: darkolivegreen; }\n  .b{ background: seagreen;}\n\
  \  .c{ background: limegreen; }\n  .d{ background: darkgreen; }\n\n\n# On a business\
  \ trip, again...\n\nI love traveling, just like everyone else. If only they were\
  \ not business trips... They force me to go to places I don't want to go and listen\
  \ to people that I don't care about. But, by far, the thing I hate the most is **packing\
  \ my bag**.\n\nThe thing is, I can only carry one bag in the plane and I **NEED**\
  \ to bring some important items. Every item is numbered and has a specific shape.\
  \ Here is an example of a well-sorted bag:\n\n\n\n11112233\n14444233\n14442223\n\
  \n\n\nWill I be able to fit all the items I need in the bag?\n\n# Your task\n\n\
  Write a funtion `fit_bag(height: int, width: int, items: List[List[List[int]]])\
  \ -> List[List[int]]` that takes a bag height and width and a list of items and\
  \ returns a bag with all the items in a correct place.\n\n\nThe pieces will be given\
  \ as a square bidimensional array that represents items as follows:\n\n\n\n\n1111\n\
  1\n1\n\n\n → \n\n\n[\n  [1, 1, 1, 1],\n  [1, 0, 0, 0],\n  [1, 0, 0, 0]\n]\n\n\n\n\
  \n4444\n444\n\n\n → \n\n\n[\n  [4, 4, 4, 4],\n  [4, 4, 4, 0],\n]\n\n\n\n\nAnd, as\
  \ you may have guessed, the output is represented the same way as the pieces, but\
  \ it will contain the numbers of all the pieces and zeroes in the case of empty\
  \ spaces. The thing is, **you cannot rotate the pieces nor flip them**.\n\n\n\n\n\
  4444\n444\n\n\n → \n\n\n4\n44\n44\n44\n\n\n ✖ \n\n\n\n\n**Technical notes:**\n*\
  \ Items will only contain zeroes (for empty spaces) and another number that identifies\
  \ the item.\n* Items will not have rows or columns of zeros at the borders. If an\
  \ item's matrix is of size *n*x*m*, this means the object has a bounding box of\
  \ *n*x*m*.\n* There will be no two items with the same number.\n* There will never\
  \ be more than 9 items.\n* Items do not necessarily have to be one connected component.\n\
  * The only condition for your solution to be valid is that there has to be at least\
  \ one instance of each requested item. There can be empty spaces (represented by\
  \ zeroes) or repeated items.\n* Every test case **is solvable**.\n\n# Preloaded\
  \ code\n\nYou are given two functions for debugging purposes:\n\n* `only_show_wrong()`:\
  \ disable the bag print of the test cases that you solved successfully. Use this\
  \ only once at the beginning or your code.\n* `print_bag(bag)`: this function prints\
  \ a bag in a human-readable format for debugging purposes. It is done by default\
  \ in every test case unless it is disabled.\n\n# Tests\n\nHere are the tests that\
  \ will be done:\n* **Fixed tests (respectively):** bags of sizes 3x8, 3x6, 3x5,\
  \ 3x7, 3x8 and 5x9. Six tests of each with 4 to 8 items.\n* **Random tests:** 300\
  \ 5x9 bags tests with 7 to 9 items."
"vc-preamble": "import Imports.AllImports\n\ndef fit_bag (height width : Nat) (items\
  \ : List (List (List Nat))) : List (List Nat) := sorry\n\n/-- Each row in the result\
  \ bag has the same width -/"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def IsConnected (grid : List (List Nat)) (i j i' j' : Nat) : Prop\
  \ := sorry\n\n/-- The items form connected shapes (no diagonals) -/"
"vc-theorems": "theorem fit_bag_uniform_width (height width : Nat) (items : List (List\
  \ (List Nat))) \n  (result := fit_bag height width items) :\n  ∀ row ∈ result, List.length\
  \ row = width := sorry\n\n/-- Each number in the items appears exactly once in the\
  \ result -/\n\ntheorem fit_bag_items_appear_once (height width : Nat) (items : List\
  \ (List (List Nat))) \n  (result := fit_bag height width items) :\n  ∀ item ∈ items,\
  \ ∀ val : Nat,\n    (val ∈ (List.join item) ∧ val ≠ 0) →\n    (List.countP (λ x\
  \ => x = val) (List.join result) = \n     List.countP (λ x => x = val) (List.join\
  \ item)) := sorry\n\n\ntheorem fit_bag_items_connected (height width : Nat) (items\
  \ : List (List (List Nat))) \n  (result := fit_bag height width items) :\n  ∀ item\
  \ ∈ items, ∀ val : Nat,\n    val ∈ (List.join item) →\n    val ≠ 0 → \n    ∀ i j\
  \ i' j', \n      i < List.length item ∧ j < List.length (List.get! item i) ∧\n \
  \     i' < List.length item ∧ j' < List.length (List.get! item i') ∧\n      List.get!\
  \ (List.get! item i) j = val ∧\n      List.get! (List.get! item i') j' = val →\n\
  \      IsConnected item i j i' j' := sorry\n\n/-- The result has the specified dimensions\
  \ -/\n\ntheorem fit_bag_dimensions (height width : Nat) (items : List (List (List\
  \ Nat))) \n  (result := fit_bag height width items) :\n  List.length result = height\
  \ ∧\n  ∀ row ∈ result, List.length row = width := sorry\n\n/-- All numbers in result\
  \ appear in original items -/\n\ntheorem fit_bag_valid_numbers (height width : Nat)\
  \ (items : List (List (List Nat))) \n  (result := fit_bag height width items) :\n\
  \  ∀ x ∈ List.join result,\n    x = 0 ∨ ∃ item ∈ items, x ∈ List.join item := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
