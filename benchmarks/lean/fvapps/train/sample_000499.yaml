"vc-description": "You are given a string S of length N consisting of lowercase English\
  \ letters.\nProcess Q queries of the following two types:\n - Type 1: change the\
  \ i_q-th character of S to c_q. (Do nothing if the i_q-th character is already c_q.)\n\
  \ - Type 2: answer the number of different characters occurring in the substring\
  \ of S between the l_q-th and r_q-th characters (inclusive).\n\n-----Constraints-----\n\
  \ - N, Q, i_q, l_q, and r_q are integers.\n - S is a string consisting of lowercase\
  \ English letters.\n - c_q is a lowercase English letter.\n - 1 \\leq N \\leq 500000\n\
  \ - 1 \\leq Q \\leq 20000\n - |S| = N\n - 1 \\leq i_q \\leq N\n - 1 \\leq l_q \\\
  leq r_q \\leq N\n - There is at least one query of type 2 in each testcase.\n\n\
  -----Input-----\nInput is given from Standard Input in the following format:\nN\n\
  S\nQ\nQuery_1\n\\vdots\nQuery_Q\n\nHere, Query_i in the 4-th through (Q+3)-th lines\
  \ is one of the following:\n1 i_q c_q\n\n2 l_q r_q\n\n-----Output-----\nFor each\
  \ query of type 2, print a line containing the answer.\n\n-----Sample Input-----\n\
  7\nabcdbbd\n6\n2 3 6\n1 5 z\n2 1 1\n1 4 a\n1 7 d\n2 1 7\n\n-----Sample Output-----\n\
  3\n1\n5\n\nIn the first query, cdbb contains three kinds of letters: b , c , and\
  \ d, so we print 3.\nIn the second query, S is modified to abcdzbd.\nIn the third\
  \ query, a contains one kind of letter: a, so we print 1.\nIn the fourth query,\
  \ S is modified to abcazbd.\nIn the fifth query, S does not change and is still\
  \ abcazbd.\nIn the sixth query, abcazbd contains five kinds of letters: a, b, c,\
  \ d, and z, so we print 5."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def process_string_queries (s : String) (queries : List Query)\
  \ : List Nat :=\n  sorry\n"
"vc-theorems": "theorem process_string_queries_no_queries (s : String) :\n  process_string_queries\
  \ s [] = [] := sorry\n\n\ntheorem process_string_queries_only_substring_queries\
  \ (s : String) (queries : List Query) \n  (h : ∀ q ∈ queries, q.queryType = 2 ∧\
  \ q.position ≤ s.length) :\n  let result := process_string_queries s queries\n \
  \ result.length = queries.length ∧ \n  (∀ x ∈ result, 0 ≤ x ∧ x ≤ 26) := sorry \n\
  \n\ntheorem process_string_queries_only_change_queries (s : String) (queries : List\
  \ Query)\n  (h : ∀ q ∈ queries, q.queryType = 1 ∧ q.position ≤ s.length) :\n  process_string_queries\
  \ s queries = [] := sorry\n\n\ntheorem process_string_queries_single_char (s : String)\
  \ (i : Nat)\n  (h1 : s.length > 0)\n  (h2 : i ≤ s.length) :\n  process_string_queries\
  \ s [⟨2, i, (i, 'a')⟩] = [1] := sorry\n\n\ntheorem process_string_queries_change_then_query\
  \ (s : String) (pos : Nat) (new_char : Char)\n  (h1 : s.length > 0)\n  (h2 : pos\
  \ ≤ s.length) :\n  process_string_queries s [⟨1, pos, (pos, new_char)⟩, ⟨2, pos,\
  \ (pos, new_char)⟩] = [1] := sorry\n\n/--\ninfo: [3, 1, 5]\n-/\n#guard_msgs in\n\
  #eval process_string_queries \"abcdbbd\" [(2, 3, 6), (1, 5, \"z\"), (2, 1, 1), (1,\
  \ 4, \"a\"), (1, 7, \"d\"), (2, 1, 7)]\n\n/--\ninfo: [3, 3]\n-/\n#guard_msgs in\n\
  #eval process_string_queries \"abc\" [(2, 1, 3), (1, 2, \"d\"), (2, 1, 3)]\n\n/--\n\
  info: [1, 2]\n-/\n#guard_msgs in\n#eval process_string_queries \"aaa\" [(2, 1, 3),\
  \ (1, 2, \"b\"), (2, 1, 3)]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
