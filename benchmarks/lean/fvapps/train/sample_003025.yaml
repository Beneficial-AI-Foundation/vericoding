"vc-description": "Task\n======\n\nMake a custom esolang interpreter for the language\
  \ [InfiniTick](https://esolangs.org/wiki/InfiniTick). InfiniTick is a descendant\
  \ of [Tick](https://esolangs.org/wiki/tick) but also very different. Unlike Tick,\
  \ InfiniTick has 8 commands instead of 4. It also runs infinitely, stopping the\
  \ program only when an error occurs. You may choose to do the [Tick](https://www.codewars.com/kata/esolang-tick)\
  \ kata first.\n\nSyntax/Info\n======\n\nInfiniTick runs in an infinite loop. This\
  \ makes it both harder and easier to program in. It has an infinite memory of bytes\
  \ and an infinite output amount. The program only stops when an error is reached.\
  \ The program is also supposed to ignore non-commands.\n\nCommands\n======\n\n`>`:\
  \ Move data selector right.\n\n`<`: Move data selector left.\n\n`+`: Increment amount\
  \ of memory cell. Truncate overflow: 255+1=0.\n\n`-`: Decrement amount of memory\
  \ cell. Truncate overflow: 0-1=255.\n\n`*`: Add ascii value of memory cell to the\
  \ output tape.\n\n`&`: Raise an error, ie stop the program.\n\n`/`: Skip next command\
  \ if cell value is zero.\n\n`\\`: Skip next command if cell value is nonzero.\n\n\
  Examples\n======\n\n**Hello world!**\n\nThe following is a valid hello world program\
  \ in InfiniTick.\n\n```\nn\
  ```\n\nNotes\n======\n\n* Please be wordy and post your likes/dislikes in the discourse\
  \ area.\n* If this kata is a duplicate or uses incorrect style, this is not an issue,\
  \ this is a suggestion.\n* Please don't edit this kata just to change the estimated\
  \ rank. Thank you!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def interpreter (s : String) : String :=\n  sorry\n"
"vc-theorems": "theorem output_valid_chars {tape : String} \n  (h : String.contains\
  \ tape '&') :\n  ∀ c, c ∈ (interpreter tape).data → 0 ≤ Char.toNat c ∧ Char.toNat\
  \ c < 256 :=\nsorry\n\n\ntheorem arithmetic_wrapping (n : Nat) :\n  let tape :=\
  \ String.mk ((List.replicate n '+') ++ \n               (List.replicate n '-') ++\
  \ ['*', '&'])\n  interpreter tape = \"\\u0000\" :=\nsorry\n\n/--\ninfo: '\\x00'\n\
  -/\n#guard_msgs in\n#eval interpreter \"\\\\h*&\"\n\n/--\ninfo: '\\x00'\n-/\n#guard_msgs\
  \ in\n#eval interpreter \"+-*&\"\n\n/--\ninfo: '\\x01'\n-/\n#guard_msgs in\n#eval\
  \ interpreter \"+*&\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
