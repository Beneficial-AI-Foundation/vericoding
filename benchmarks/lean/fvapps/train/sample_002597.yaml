"vc-description": "The new \"Avengers\" movie has just been released! There are a\
  \ lot of people at the cinema box office standing in a huge line. Each of them has\
  \ a single `100`, `50` or `25` dollar bill. An \"Avengers\" ticket costs `25 dollars`.\n\
  \nVasya is currently working as a clerk. He wants to sell a ticket to every single\
  \ person in this line. \n\nCan Vasya sell a ticket to every person and give change\
  \ if he initially has no money and sells the tickets strictly in the order people\
  \ queue?\n\nReturn `YES`, if Vasya can sell a ticket to every person and give change\
  \ with the bills he has at hand at that moment. Otherwise return `NO`.\n\n### Examples:\n\
  \n```csharp \nLine.Tickets(new int[] {25, 25, 50}) // => YES \nLine.Tickets(new\
  \ int[] {25, 100}) // => NO. Vasya will not have enough money to give change to\
  \ 100 dollars\nLine.Tickets(new int[] {25, 25, 50, 50, 100}) // => NO. Vasya will\
  \ not have the right bills to give 75 dollars of change (you can't make two bills\
  \ of 25 from one of 50)\n```\n```python\ntickets([25, 25, 50]) # => YES \ntickets([25,\
  \ 100]) # => NO. Vasya will not have enough money to give change to 100 dollars\n\
  tickets([25, 25, 50, 50, 100]) # => NO. Vasya will not have the right bills to give\
  \ 75 dollars of change (you can't make two bills of 25 from one of 50)\n```\n```cpp\
  \ \ntickets({25, 25, 50}) // => YES \ntickets({25, 100}) // => NO. Vasya will not\
  \ have enough money to give change to 100 dollars\ntickets({25, 25, 50, 50, 100})\
  \ // => NO. Vasya will not have the right bills to give 75 dollars of change (you\
  \ can't make two bills of 25 from one of 50)\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def tickets (bills : List Nat) : String := sorry\n\ntheorem tickets_valid_output\
  \ (bills: List Nat) :\n  bills.length > 0 → tickets bills = \"YES\" ∨ tickets bills\
  \ = \"NO\" := sorry\n"
"vc-theorems": "theorem first_payment_25 (bills: List Nat) :\n  bills.length > 0 →\
  \ bills[0]! ≠ 25 → tickets bills = \"NO\" := sorry \n\n\ntheorem simple_cases_work\
  \ :\n  tickets [25] = \"YES\" ∧ tickets [25, 25] = \"YES\" := sorry\n\n\ntheorem\
  \ successful_case_has_change (bills : List Nat) (i : Nat) :\n  i < bills.length\
  \ →\n  tickets bills = \"YES\" → \n  let payment := bills[i]!\n  let prev_bills\
  \ := List.take i bills\n  let till_25 := prev_bills.filter (· == 25) |>.length\n\
  \  let till_50 := prev_bills.filter (· == 50) |>.length\n  till_25 * 25 + till_50\
  \ * 50 ≥ payment - 25 := sorry\n\n\ntheorem invalid_bills_error (bills : List Nat)\
  \ :\n  (∃ x ∈ bills, x ≠ 25 ∧ x ≠ 50 ∧ x ≠ 100) →\n  tickets bills = \"NO\" := sorry\n\
  \n/--\ninfo: 'YES'\n-/\n#guard_msgs in\n#eval tickets [25, 25, 50]\n\n/--\ninfo:\
  \ 'NO'\n-/\n#guard_msgs in\n#eval tickets [25, 100]\n\n/--\ninfo: 'NO'\n-/\n#guard_msgs\
  \ in\n#eval tickets [25, 25, 50, 50, 100]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
