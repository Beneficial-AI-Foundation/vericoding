"vc-description": "In this kata you will have to modify a sentence so it meets the\
  \ following rules:\n\nconvert every word backwards that is:\n\n    longer than 6\
  \ characters\n\n  OR\n\n    has 2 or more 'T' or 't' in it\n\nconvert every word\
  \ uppercase that is:\n\n    exactly 2 characters long\n\n  OR\n\n    before a comma\n\
  \nconvert every word to a \"0\" that is:\n\n    exactly one character long\n \n\n\
  \ NOTES: \n\n      Punctuation must not be touched. if a word is 6 characters long,\
  \ and a \".\" is behind it,\n      it counts as 6 characters so it must not be flipped,\
  \ but if a word is 7 characters long,\n      it must be flipped but the \".\" must\
  \ stay at the end of the word.\n      -----------------------------------------------------------------------------------------\n\
  \      Only the first transformation applies to a given word, for example 'companions,'\n\
  \      will be 'snoinapmoc,' and not 'SNOINAPMOC,'.\n      -----------------------------------------------------------------------------------------\n\
  \      As for special characters like apostrophes or dashes, they count as normal\
  \ characters, \n      so e.g 'sand-colored' must be transformed to 'deroloc-dnas'."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def spin_solve (s : String) : String := sorry\n\ndef countChar\
  \ (s : String) (c : Char) : Nat := \n  s.foldl (fun acc x => if x = c then acc +\
  \ 1 else acc) 0\n\n/-- The output of spin_solve is always a string -/"
"vc-theorems": "theorem output_is_string (s : String) :\n  ∃ (result : String), spin_solve\
  \ s = result := sorry\n\n/-- Properties of single word transformations -/\n\ntheorem\
  \ single_word_properties (word : String) :\n  word ≠ \"\" →\n  (word.length > 6\
  \ ∨ (countChar word.toLower 't' > 1) → \n    spin_solve word = String.join (word.data.reverse.map\
  \ toString)) ∧\n  (word.length = 2 → spin_solve word = word.toUpper) ∧\n  (word.length\
  \ = 1 → spin_solve word = \"0\") := sorry\n\n/-- Punctuation is preserved at the\
  \ end of words -/\n\ntheorem punctuation_preservation (word : String) (punct : Char)\
  \ :\n  word ≠ \"\" →\n  punct ∈ ['.', '!', '?', ',', ':', ';'] →\n  (spin_solve\
  \ (word.push punct)).back = punct := sorry\n\n/-- The number of spaces is preserved\
  \ in the output -/\n\ntheorem space_preservation (sentence : String) :\n  countChar\
  \ sentence ' ' = countChar (spin_solve sentence) ' ' := sorry\n\n/--\ninfo: 'emocleW.'\n\
  -/\n#guard_msgs in\n#eval spin_solve \"Welcome.\"\n\n/--\ninfo: 'MOTHER, PLEASE,\
  \ HELP, ME.'\n-/\n#guard_msgs in\n#eval spin_solve \"Mother, please, help, me.\"\
  \n\n/--\ninfo: 'IF 0 man does not keep pace with his snoinapmoc, spahrep IT IS esuaceb\
  \ HE hears 0 tnereffid remmurd.'\n-/\n#guard_msgs in\n#eval spin_solve \"If a man\
  \ does not keep pace with his companions, perhaps it is because he hears a different\
  \ drummer.\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
