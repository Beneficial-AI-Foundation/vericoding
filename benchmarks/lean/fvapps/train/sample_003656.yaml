"vc-description": "You were given a string of integer temperature values. Create a\
  \ function `close_to_zero(t)` and return the closest value to 0 or `0` if the string\
  \ is empty. If two numbers are equally close to zero, return the positive integer."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def close_to_zero (input : String) : Int := sorry\n\ndef abs (n\
  \ : Int) : Int := sorry\n"
"vc-theorems": "theorem close_to_zero_returns_from_input_or_zero \n  (nums : List\
  \ Int) : \n  nums.isEmpty → close_to_zero (toString nums) = 0 ∧\n  ¬nums.isEmpty\
  \ → close_to_zero (toString nums) = 0 ∨ \n    close_to_zero (toString nums) ∈ nums\
  \ := sorry\n\n\n\n\n\n\ntheorem empty_string_returns_zero : \n  close_to_zero \"\
  \" = 0 := sorry\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval close_to_zero \"\"\n\n\
  /--\ninfo: 0\n-/\n#guard_msgs in\n#eval close_to_zero \"-1 50 -4 20 22 -7 0 10 -8\"\
  \n\n/--\ninfo: 17\n-/\n#guard_msgs in\n#eval close_to_zero \"28 35 -21 17 38 -17\"\
  \n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
