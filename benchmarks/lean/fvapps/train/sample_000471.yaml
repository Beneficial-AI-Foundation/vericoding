"vc-description": "Given an array nums of n integers and an integer target, find three\
  \ integers in nums such that the sum is closest to target. Return the sum of the\
  \ three integers. You may assume that each input would have exactly one solution.\n\
  \nExample:\n\n\nGiven array nums = [-1, 2, 1, -4], and target = 1.\n\nThe sum that\
  \ is closest to the target is 2. (-1 + 2 + 1 = 2)."
"vc-preamble": "import Imports.AllImports\n\ndef abs (x : Int) : Int :=\n  if x <\
  \ 0 then -x else x\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def threeSumClosest (nums : List Int) (target : Int) : Int :=\n\
  \  sorry\n"
"vc-theorems": "theorem threeSumClosest_is_sum_of_three {nums : List Int} {target\
  \ : Int}\n  (h : nums.length ≥ 3) :\n  ∃ i j k, i < j ∧ j < k ∧ k < nums.length\
  \ ∧ \n    threeSumClosest nums target = nums[i]! + nums[j]! + nums[k]! :=\n  sorry\n\
  \n\ntheorem threeSumClosest_is_closest {nums : List Int} {target : Int} \n  (h :\
  \ nums.length ≥ 3) :\n  ∀ i j k, i < j → j < k → k < nums.length →\n    (abs (threeSumClosest\
  \ nums target - target)) ≤ \n    (abs (nums[i]! + nums[j]! + nums[k]! - target))\
  \ :=\n  sorry\n\n\ntheorem threeSumClosest_all_ones : \n  threeSumClosest [1,1,1]\
  \ 0 = 3 :=\n  sorry\n\n\ntheorem threeSumClosest_all_neg_ones :\n  threeSumClosest\
  \ [-1,-1,-1] 0 = -3 :=\n  sorry\n\n\ntheorem threeSumClosest_all_zeros :\n  threeSumClosest\
  \ [0,0,0] 1 = 0 :=\n  sorry\n\n\ntheorem threeSumClosest_insufficient_nums {nums\
  \ : List Int} \n  (h : nums.length < 3) :\n  threeSumClosest nums 0 = 0 :=\n  sorry\n\
  \n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval three_sum_closest [-4, -1, 1, 2] 1\n\n\
  /--\ninfo: 3\n-/\n#guard_msgs in\n#eval three_sum_closest [1, 1, 1, 0] 100\n\n/--\n\
  info: 0\n-/\n#guard_msgs in\n#eval three_sum_closest [0, 2, 1, -3] 1\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
