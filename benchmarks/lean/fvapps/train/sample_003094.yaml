"vc-description": "Given a string, remove any characters that are unique from the\
  \ string.\n\nExample: \n\ninput: \"abccdefee\"\n\noutput: \"cceee\""
"vc-preamble": "import Imports.AllImports\n\ndef countChar (s : String) (c : Char)\
  \ : Nat :=\n  s.toList.filter (· = c) |>.length\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def only_duplicates (s : String) : String := sorry\n\ntheorem only_duplicates_contains_multiple_occurrences\
  \ \n  (s : String) (c : Char) : \n  c ∈ (only_duplicates s).data → \n  countChar\
  \ s c > 1 := \nsorry\n"
"vc-theorems": "theorem only_duplicates_is_substring\n  (s : String) (c : Char) :\n\
  \  c ∈ (only_duplicates s).data →\n  c ∈ s.data := \nsorry\n\n\ntheorem only_duplicates_length\n\
  \  (s : String) :\n  (only_duplicates s).length ≤ s.length :=\nsorry\n\n\ntheorem\
  \ only_duplicates_empty\n  (s : String) :\n  s = \"\" → only_duplicates s = \"\"\
  \ :=\nsorry\n\n\ntheorem only_duplicates_unique_chars\n  (s : String) :\n  (∀ c,\
  \ countChar s c ≤ 1) →\n  only_duplicates s = \"\" :=\nsorry\n\n/--\ninfo: 'cceee'\n\
  -/\n#guard_msgs in\n#eval only_duplicates \"abccdefee\"\n\n/--\ninfo: 'll'\n-/\n\
  #guard_msgs in\n#eval only_duplicates \"hello\"\n\n/--\ninfo: 'ondersndoders'\n\
  -/\n#guard_msgs in\n#eval only_duplicates \"foundersandcoders\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
