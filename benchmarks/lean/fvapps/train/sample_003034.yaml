"vc-description": "Raj was to move up through a pattern of stairs of a given number\
  \ **(n)**. Help him to get to the    top using the function **stairs**.\n\n##Keep\
  \ in mind :\n  * If **n<1** then return ' ' .\n  * There are a lot of spaces before\
  \ the stair starts except for **pattern(1)**\n\n\n##Examples :\n  pattern(1)\n\n\
  \          1 1\n\n  pattern(6)\n\n                          1 1\n              \
  \        1 2 2 1  \n                  1 2 3 3 2 1\n              1 2 3 4 4 3 2 1\n\
  \          1 2 3 4 5 5 4 3 2 1\n      1 2 3 4 5 6 6 5 4 3 2 1\n\npattern(12)\n\n\
  \                                                  1 1\n                       \
  \                       1 2 2 1\n                                          1 2 3\
  \ 3 2 1\n                                      1 2 3 4 4 3 2 1\n               \
  \                   1 2 3 4 5 5 4 3 2 1\n                              1 2 3 4 5\
  \ 6 6 5 4 3 2 1\n                          1 2 3 4 5 6 7 7 6 5 4 3 2 1\n       \
  \               1 2 3 4 5 6 7 8 8 7 6 5 4 3 2 1\n                  1 2 3 4 5 6 7\
  \ 8 9 9 8 7 6 5 4 3 2 1\n              1 2 3 4 5 6 7 8 9 0 0 9 8 7 6 5 4 3 2 1\n\
  \          1 2 3 4 5 6 7 8 9 0 1 1 0 9 8 7 6 5 4 3 2 1\n      1 2 3 4 5 6 7 8 9\
  \ 0 1 2 2 1 0 9 8 7 6 5 4 3 2 1"
"vc-preamble": "import Imports.AllImports\n\ndef stairs (n : Int) : String := sorry\
  \ \ndef step (n : Int) : String := sorry\n\n\ndef splitLines (s : String) : List\
  \ String := sorry\ndef rightJustify (s : String) (width : Int) : String := sorry\n\
  \ndef isDigit (c : Char) : Bool := sorry\ndef listToString (l : List Nat) : String\
  \ := sorry"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def stringContains (s : String) (c : Char) : Prop := sorry\n\n\
  -- Properties for stairs function"
"vc-theorems": "theorem stairs_empty_for_invalid_input (n : Int) : \n  n < 1 → stairs\
  \ n = \" \" := sorry\n\n\ntheorem stairs_line_count (n : Int) : \n  n ≥ 1 → (splitLines\
  \ (stairs n)).length = n.toNat := sorry\n\n\ntheorem stairs_line_width (n : Int)\
  \ (line : String) :\n  n ≥ 1 → line ∈ splitLines (stairs n) → line.length ≤ (4 *\
  \ n - 1).toNat := sorry\n\n\ntheorem stairs_right_justified (n : Int) (line : String)\
  \ :\n  n ≥ 1 → line ∈ splitLines (stairs n) → \n  line = rightJustify line (4 *\
  \ n - 1) := sorry\n\n-- Properties for step function\n\ntheorem step_length_correct\
  \ (n : Int) :\n  n ≥ 1 → (splitLines (step n)).length = (2 * n - 1).toNat := sorry\n\
  \n\ntheorem step_digits_only (n : Int) (c : Char) :\n  n ≥ 1 → stringContains (step\
  \ n) c → isDigit c ∨ c = ' ' := sorry\n\n\ntheorem step_sequence (n : Int) (i :\
  \ Nat) :\n  n ≥ 1 → i < n.toNat → \n  let nums := splitLines (step n);\n  let expected\
  \ := toString ((i + 1) % 10);\n  nums.get? i = some expected := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
