"vc-description": "Chef is operating a slush machine. The machine produces slush drinks\
  \ with $M$ flavors (numbered $1$ through $M$); for each valid $i$, the maximum number\
  \ of drinks with flavour $i$ the machine can produce is $C_i$.\nChef expects $N$\
  \ customers to come buy slush drinks today. The customers are numbered $1$ through\
  \ $N$ in the order in which they buy the drinks. For each valid $i$, the favorite\
  \ flavour of the $i$-th customer is $D_i$ and this customer is willing to pay $F_i$\
  \ units of money for a drink with this flavour, or $B_i$ units of money for a drink\
  \ with any other flavuor. Whenever a customer wants to buy a drink:\n- if it is\
  \ possible to sell this customer a drink with their favourite flavour, Chef must\
  \ sell them a drink with this flavour\n- otherwise, Chef must sell this customer\
  \ a drink, but he may choose its flavour\nChef wants to make the maximum possible\
  \ profit. He is asking you to help him decide the flavours of the drinks he should\
  \ sell to the customers in order to maximise the profit.\n\n-----Input-----\n- The\
  \ first line of the input contains a single integer $T$ denoting the number of test\
  \ cases. The description of $T$ test cases follows.\n- The first line of each test\
  \ case contains two space-separated integers $N$ and $M$.\n- The second line contains\
  \ $M$ space-separated integers $C_1, C_2, \\ldots, C_M$.\n- $N$ lines follow. For\
  \ each valid $i$, the $i$-th of these lines contains three space-separated integers\
  \ $D_i$, $F_i$ and $B_i$.\n\n-----Output-----\nFor each test case, print two lines:\n\
  - The first of these lines should contain a single integer — the maximum profit.\n\
  - The second line should contain $N$ space-separated integers denoting the flavours\
  \ of the drinks Chef should sell, in this order.\nIf there are multiple solutions,\
  \ you may find any one.\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $2\
  \ \\le N, M \\le 10^5$\n- $1 \\le D_i \\le M$ for each valid $i$\n- $1 \\le C_i\
  \ \\le N$ for each valid $i$\n- $1 \\le B_i < F_i \\le 10^9$ for each valid $i$\n\
  - $C_1+C_2+\\ldots+C_M \\ge N$\n- the sum of $N$ over all test cases does not exceed\
  \ $10^6$\n- the sum of $M$ over all test cases does not exceed $10^6$\n\n-----Example\
  \ Input-----\n1\n5 3\n1 2 3\n2 6 3\n2 10 7\n2 50 3\n1 10 5\n1 7 4\n\n-----Example\
  \ Output-----\n33\n2 2 3 1 3"
"vc-preamble": "import Imports.AllImports\n\ndef List.sum (l : List Nat) : Nat :=\n\
  \  sorry\n\n\ndef List.sumBy {α : Type} (l : List α) (f : α → Nat) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_slush_machine (n m : Nat) (capacity : List Nat) (preferences\
  \ : List (Nat × Nat × Nat)) : \n  Nat × List Nat :=\n  sorry\n"
"vc-theorems": "theorem valid_list_lengths {n m : Nat} {capacity : List Nat} {preferences\
  \ : List (Nat × Nat × Nat)}\n  (h : solve_slush_machine n m capacity preferences\
  \ = (profit, assignments)) :\n  assignments.length = n := by\n  sorry\n\n\ntheorem\
  \ valid_capacity_constraints {n m : Nat} {capacity : List Nat} {preferences : List\
  \ (Nat × Nat × Nat)}\n  (h : solve_slush_machine n m capacity preferences = (profit,\
  \ assignments))\n  (hcap : capacity.length = m) :\n  ∀ i : Nat, i > 0 ∧ i ≤ m →\
  \ \n    (assignments.filter (λ x => x = i)).length ≤ capacity[i-1]'(by {\n     \
  \ rw [hcap]\n      sorry\n    }) := by\n  sorry\n\n\ntheorem correct_profit_calculation\
  \ {n m : Nat} {capacity : List Nat} {preferences : List (Nat × Nat × Nat)}\n  (h\
  \ : solve_slush_machine n m capacity preferences = (profit, assignments))\n  (hp\
  \ : preferences.length = n)\n  (ha : assignments.length = n) :\n  profit = List.sumBy\
  \ (List.range n) (λ i => \n    let (d,f,b) := preferences[i]'(by {\n      sorry\n\
  \    })\n    if assignments[i]'(by {\n      sorry\n    }) = d then f else b) :=\
  \ by\n  sorry\n\n\ntheorem solution_bounds {n m : Nat} {capacity : List Nat} {preferences\
  \ : List (Nat × Nat × Nat)}\n  (h : solve_slush_machine n m capacity preferences\
  \ = (profit, assignments)) :\n  ∀ x ∈ assignments, x > 0 ∧ x ≤ m := by\n  sorry\n\
  \n\ntheorem preferences_bounds {n m : Nat} {capacity : List Nat} {preferences :\
  \ List (Nat × Nat × Nat)}\n  (h₁ : solve_slush_machine n m capacity preferences\
  \ = (profit, assignments))\n  (h₂ : preferences.length = n) :\n  ∀ (d f b : Nat),\
  \ (d,f,b) ∈ preferences → d > 0 ∧ d ≤ m ∧ f > 0 ∧ b > 0 := by\n  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
