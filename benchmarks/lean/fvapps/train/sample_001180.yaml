"vc-description": "The EEE classes are so boring that the students play games rather\
  \ than paying attention during the lectures. Harsha and Dubey are playing one such\
  \ game.\n\nThe game involves counting the number of anagramic pairs of a given string\
  \ (you can read about anagrams from here). Right now Harsha is winning. Write a\
  \ program to help Dubey count this number quickly and win the game!\n\n-----Input-----\n\
  The first line has an integer T which is the number of strings. Next T lines each\
  \ contain a strings. Each string consists of lowercase english alphabets only.\n\
  \n-----Output-----\nFor each string, print the answer in a newline.\n\n-----Constraints-----\n\
  - 1 ≤ T ≤ 1000\n- 1 ≤ length of each string ≤ 100\n\n-----Example-----\nInput:\n\
  3\nrama\nabba\nabcd\nOutput:\n2\n4\n0\n\n-----Explanation-----\nrama has the following\
  \ substrings:\n\n- r\n- ra\n- ram\n- rama\n- a\n- am\n- ama\n- m\n- ma\n- a\nOut\
  \ of these, {5,10} and {6,9} are anagramic pairs.\n\nHence the answer is 2.\n\n\
  Similarly for other strings as well."
"vc-preamble": "import Imports.AllImports\n\ndef find_anagram_pairs (s : String) :\
  \ Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def reverseString (s : String) : String :=\n  sorry\n"
"vc-theorems": "theorem find_anagram_pairs_nonneg (s : String) :\n  find_anagram_pairs\
  \ s ≥ 0 := \n  sorry\n\n\ntheorem find_anagram_pairs_empty_or_single (s : String)\
  \ : \n  s.length ≤ 1 → find_anagram_pairs s = 0 :=\n  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
