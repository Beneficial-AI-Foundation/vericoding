"vc-description": "# Task\nFollow the instructions in each failing test case to write\
  \ logic that calculates the total price when ringing items up at a cash register.\n\
  \n# Purpose\nPractice writing maintainable and extendable code. \n\n# Intent\nThis\
  \ kata is meant to emulate the real world where requirements change over time. This\
  \ kata does not provide a specification for the final end-state up front. Instead,\
  \ it walks you through a series of requirements, modifying and extending them via\
  \ test cases as you go. This kata is about the journey, not the destination. Your\
  \ ability to write maintainable and extendable code will affect how difficult this\
  \ kata is. \n\n# Provided Utility Function\nYou may use the following preloaded\
  \ function:\n```python\nget_price(item)\n\"\"\"Accepts a str specifying an item.\
  \ Returns the price of\nthe item (float) or raises a KeyError if no price is available.\n\
  \nExample: \n\n    >>> get_price(apple)\n    0.4\n\"\"\"\n```\n\n# Acknowledgement\n\
  Inspired by http://codekata.com/kata/kata01-supermarket-pricing/. To get the most\
  \ benefit from this kata, I would recommend visiting that page only after completing,\
  \ not before."
"vc-preamble": "import Imports.AllImports\n\ndef get_price : Item → Float \n| Item.apple\
  \ => 0.5\n| Item.banana => 0.5  \n| Item.orange => 0.7\n\n\ndef ring_up (items :\
  \ List (Item × Nat)) (promos : List String := []) : Float :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def list_sum (l : List Float) : Float :=\n  match l with\n  | []\
  \ => 0\n  | h :: t => h + list_sum t\n"
"vc-theorems": "theorem ring_up_nonnegative (items : List (Item × Nat)) (promos :\
  \ List String) :\n  ring_up items promos ≥ 0 :=\nsorry\n\n\ntheorem ring_up_equals_sum_when_no_promos\
  \ (items : List (Item × Nat)) :\n  ring_up items [] = list_sum (items.map (fun (i,q)\
  \ => get_price i * q.toFloat)) :=\nsorry\n\n\ntheorem ring_up_empty_is_zero :\n\
  \  ring_up [] [] = 0 :=\nsorry\n\n\ntheorem ring_up_zero_quantities (items : List\
  \ (Item × Nat)) (h: ∀ p ∈ items, p.2 = 0) :\n  ring_up items [] = 0 :=\nsorry\n\n\
  \ntheorem ring_up_three_for_one_apple :\n  ring_up [(Item.apple, 3)] [\"3 for 1.00\"\
  ] = 1.00 :=\nsorry\n\n\ntheorem ring_up_bogo_banana :\n  ring_up [(Item.banana,\
  \ 2)] [\"buy 1 get 1\"] = 0.50 :=\nsorry\n\n/--\ninfo: 0.8\n-/\n#guard_msgs in\n\
  #eval ring_up {\"apple\": 2}\n\n/--\ninfo: 1.0\n-/\n#guard_msgs in\n#eval ring_up\
  \ {\"apple\": 3} {\"apple\": \"3 for 1.00\"}\n\n/--\ninfo: 0.5\n-/\n#guard_msgs\
  \ in\n#eval ring_up {\"banana\": 2} {\"banana\": \"buy 1 get 1\"}\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
