"vc-description": "Petya has come to the math exam and wants to solve as many problems\
  \ as possible. He prepared and carefully studied the rules by which the exam passes.\n\
  \nThe exam consists of $n$ problems that can be solved in $T$ minutes. Thus, the\
  \ exam begins at time $0$ and ends at time $T$. Petya can leave the exam at any\
  \ integer time from $0$ to $T$, inclusive.\n\nAll problems are divided into two\
  \ types:   easy problems — Petya takes exactly $a$ minutes to solve any easy problem;\
  \  hard problems — Petya takes exactly $b$ minutes ($b > a$) to solve any hard problem.\
  \ \n\nThus, if Petya starts solving an easy problem at time $x$, then it will be\
  \ solved at time $x+a$. Similarly, if at a time $x$ Petya starts to solve a hard\
  \ problem, then it will be solved at time $x+b$.\n\nFor every problem, Petya knows\
  \ if it is easy or hard. Also, for each problem is determined time $t_i$ ($0 \\\
  le t_i \\le T$) at which it will become mandatory (required). If Petya leaves the\
  \ exam at time $s$ and there is such a problem $i$ that $t_i \\le s$ and he didn't\
  \ solve it, then he will receive $0$ points for the whole exam. Otherwise (i.e if\
  \ he has solved all such problems for which $t_i \\le s$) he will receive a number\
  \ of points equal to the number of solved problems. Note that leaving at time $s$\
  \ Petya can have both \"mandatory\" and \"non-mandatory\" problems solved.\n\nFor\
  \ example, if $n=2$, $T=5$, $a=2$, $b=3$, the first problem is hard and $t_1=3$\
  \ and the second problem is easy and $t_2=2$. Then:  if he leaves at time $s=0$,\
  \ then he will receive $0$ points since he will not have time to solve any problems;\
  \  if he leaves at time $s=1$, he will receive $0$ points since he will not have\
  \ time to solve any problems;  if he leaves at time $s=2$, then he can get a $1$\
  \ point by solving the problem with the number $2$ (it must be solved in the range\
  \ from $0$ to $2$);  if he leaves at time $s=3$, then he will receive $0$ points\
  \ since at this moment both problems will be mandatory, but he will not be able\
  \ to solve both of them;  if he leaves at time $s=4$, then he will receive $0$ points\
  \ since at this moment both problems will be mandatory, but he will not be able\
  \ to solve both of them;  if he leaves at time $s=5$, then he can get $2$ points\
  \ by solving all problems. \n\nThus, the answer to this test is $2$.\n\nHelp Petya\
  \ to determine the maximal number of points that he can receive, before leaving\
  \ the exam.\n\n\n-----Input-----\n\nThe first line contains the integer $m$ ($1\
  \ \\le m \\le 10^4$) — the number of test cases in the test.\n\nThe next lines contain\
  \ a description of $m$ test cases. \n\nThe first line of each test case contains\
  \ four integers $n, T, a, b$ ($2 \\le n \\le 2\\cdot10^5$, $1 \\le T \\le 10^9$,\
  \ $1 \\le a < b \\le 10^9$) — the number of problems, minutes given for the exam\
  \ and the time to solve an easy and hard problem, respectively.\n\nThe second line\
  \ of each test case contains $n$ numbers $0$ or $1$, separated by single space:\
  \ the $i$-th number means the type of the $i$-th problem. A value of $0$ means that\
  \ the problem is easy, and a value of $1$ that the problem is hard.\n\nThe third\
  \ line of each test case contains $n$ integers $t_i$ ($0 \\le t_i \\le T$), where\
  \ the $i$-th number means the time at which the $i$-th problem will become mandatory.\n\
  \nIt is guaranteed that the sum of $n$ for all test cases does not exceed $2\\cdot10^5$.\n\
  \n\n-----Output-----\n\nPrint the answers to $m$ test cases. For each set, print\
  \ a single integer — maximal number of points that he can receive, before leaving\
  \ the exam.\n\n\n-----Example-----\nInput\n10\n3 5 1 3\n0 0 1\n2 1 4\n2 5 2 3\n\
  1 0\n3 2\n1 20 2 4\n0\n16\n6 20 2 5\n1 1 0 1 0 0\n0 8 2 9 11 6\n4 16 3 6\n1 0 1\
  \ 1\n8 3 5 6\n6 20 3 6\n0 1 0 0 1 0\n20 11 3 20 16 17\n7 17 1 6\n1 1 0 1 0 0 0\n\
  1 7 0 11 10 15 10\n6 17 2 6\n0 0 1 0 0 1\n7 6 3 7 10 12\n5 17 2 5\n1 1 1 1 0\n17\
  \ 11 10 6 4\n1 1 1 2\n0\n1\n\nOutput\n3\n2\n1\n0\n1\n4\n0\n1\n2\n1"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_exam_problems (n : Nat) (T : Nat) (a : Nat) (b : Nat)\
  \ (tasks : Tasks) (total_a total_b : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem solve_exam_problems_bounds {n T a b : Nat} {tasks : Tasks}\
  \ {total_a total_b : Nat}\n  (n_pos : n > 0) (T_pos : T > 0) (a_pos : a > 0) (b_pos\
  \ : b > 0) :\n  let result := solve_exam_problems n T a b tasks total_a total_b\n\
  \  result ≤ total_a + total_b ∧ result ≥ 0 :=\nsorry\n\n\ntheorem solve_empty_tasks\
  \ {n T a b : Nat}\n  (n_pos : n > 0) (T_pos : T > 0) (a_pos : a > 0) (b_pos : b\
  \ > 0) :\n  solve_exam_problems n T a b [] 0 0 = 0 :=\nsorry\n\n\ntheorem solve_zero_time\
  \ {n a b : Nat} {tasks : Tasks}\n  (n_pos : n > 0) (a_pos : a > 0) (b_pos : b >\
  \ 0) :\n  solve_exam_problems n 0 a b tasks 1 0 = 0 :=\nsorry\n\n/--\ninfo: 3\n\
  -/\n#guard_msgs in\n#eval solve_exam_problems 3 5 1 3 list(zip(t, types)) sum((1\
  \ for x in types if x == 0)) sum((1 for x in types if x == 1))\n\n/--\ninfo: 2\n\
  -/\n#guard_msgs in\n#eval solve_exam_problems 2 5 2 3 list(zip(t, types)) sum((1\
  \ for x in types if x == 0)) sum((1 for x in types if x == 1))\n\n/--\ninfo: 1\n\
  -/\n#guard_msgs in\n#eval solve_exam_problems 1 20 2 4 list(zip(t, types)) sum((1\
  \ for x in types if x == 0)) sum((1 for x in types if x == 1))\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
