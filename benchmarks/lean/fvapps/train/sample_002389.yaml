vc-description: |-
  An axis-aligned rectangle is represented as a list [x1, y1, x2, y2], where (x1, y1) is the coordinate of its bottom-left corner, and (x2, y2) is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis.
  Two rectangles overlap if the area of their intersection is positive. To be clear, two rectangles that only touch at the corner or edges do not overlap.
  Given two axis-aligned rectangles rec1 and rec2, return true if they overlap, otherwise return false.
   
  Example 1:
  Input: rec1 = [0,0,2,2], rec2 = [1,1,3,3]
  Output: true
  Example 2:
  Input: rec1 = [0,0,1,1], rec2 = [1,0,2,1]
  Output: false
  Example 3:
  Input: rec1 = [0,0,1,1], rec2 = [2,2,3,3]
  Output: false

   
  Constraints:

  rect1.length == 4
  rect2.length == 4
  -109 <= rec1[i], rec2[i] <= 109
  rec1[0] <= rec1[2] and rec1[1] <= rec1[3]
  rec2[0] <= rec2[2] and rec2[1] <= rec2[3]
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def is_rectangles_overlap (r1 r2 : Rectangle) : Bool :=
    sorry
vc-theorems: |
  theorem overlap_symmetric {r1 r2 : Rectangle} :
    is_rectangles_overlap r1 r2 = is_rectangles_overlap r2 r1 := by
    sorry


  theorem self_overlap {r : Rectangle} :
    is_rectangles_overlap r r = true := by
    sorry


  theorem far_apart_no_overlap {r1 : Rectangle} {w h : Int}
    (hw : w > 0) (hh : h > 0) :
    let r2 := Rectangle.mk (r1.x2 + 1) (r1.y2 + 1) (r1.x2 + 2) (r1.y2 + 2)
    is_rectangles_overlap r1 r2 = false := by
    sorry


  theorem touching_right_no_overlap {x y w h : Int}
    (hw : w > 0) (hh : h > 0) : 
    let r1 := Rectangle.mk x y (x + w) (y + h)
    let r2 := Rectangle.mk (x + w) y (x + w + 1) (y + h)
    is_rectangles_overlap r1 r2 = false := by
    sorry


  theorem touching_top_no_overlap {x y w h : Int}
    (hw : w > 0) (hh : h > 0) :
    let r1 := Rectangle.mk x y (x + w) (y + h)
    let r2 := Rectangle.mk x (y + h) (x + w) (y + h + 1)
    is_rectangles_overlap r1 r2 = false := by
    sorry

  /--
  info: True
  -/
  #guard_msgs in
  #eval is_rectangles_overlap [0, 0, 2, 2] [1, 1, 3, 3]

  /--
  info: False
  -/
  #guard_msgs in
  #eval is_rectangles_overlap [0, 0, 1, 1] [1, 0, 2, 1]

  /--
  info: False
  -/
  #guard_msgs in
  #eval is_rectangles_overlap [0, 0, 1, 1] [2, 2, 3, 3]
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
