"vc-description": "Given two strings s and t, determine if they are isomorphic.\n\n\
  Two strings are isomorphic if the characters in s can be replaced to get t.\n\n\
  All occurrences of a character must be replaced with another character while preserving\
  \ the order of characters. No two characters may map to the same character but a\
  \ character may map to itself.\n\nExample 1:\n\n\nInput: s = \"egg\", t = \"add\"\
  \nOutput: true\n\n\nExample 2:\n\n\nInput: s = \"foo\", t = \"bar\"\nOutput: false\n\
  \nExample 3:\n\n\nInput: s = \"paper\", t = \"title\"\nOutput: true\n\nNote:\nYou\
  \ may assume both s and t have the same length."
"vc-preamble": "import Imports.AllImports\n\ndef is_isomorphic (s1 s2 : List Char)\
  \ : Bool :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def unique_chars (s : List Char) : Nat :=\n  sorry\n"
"vc-theorems": "theorem isomorphic_same_length {s1 s2 : List Char} : \n  s1.length\
  \ ≠ s2.length → ¬is_isomorphic s1 s2 := sorry\n\n\ntheorem isomorphic_identical_strings\
  \ {s : List Char} :\n  is_isomorphic s s := sorry\n\n\ntheorem isomorphic_reversible\
  \ {s1 s2 : List Char} :\n  s1.length = s2.length → \n  is_isomorphic s1 s2 = is_isomorphic\
  \ s2 s1 := sorry\n\n\ntheorem isomorphic_preserves_uniqueness {s1 s2 : List Char}\
  \ :\n  s1.length = s2.length →\n  is_isomorphic s1 s2 →\n  unique_chars s1 = unique_chars\
  \ s2 := sorry\n\n\ntheorem isomorphic_repeated_chars {s1 s2 : List Char} :\n  s1.length\
  \ = s2.length →\n  s1.length ≥ 2 →\n  unique_chars s1 = 1 →\n  (is_isomorphic s1\
  \ s2 ↔ unique_chars s2 = 1) := sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval\
  \ is_isomorphic \"egg\" \"add\"\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval is_isomorphic\
  \ \"foo\" \"bar\"\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval is_isomorphic \"\
  paper\" \"title\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
