"vc-description": "Chef is making Window frames for his new office, for this he has\
  \  n wooden Logs whose lengths are l1, l2, … ln respectively. Chef Doesn’t want\
  \ to break any logs or Stick 2 or more logs together.\nTo make a  h × w Window Frame,\
  \ he needs two Logs with lengths equal h and two with length . \nThe Chef wants\
  \ as much sunlight in as possible and for it he has decided to make from the available\
  \ logs as many frames as possible. Help him in finding the number of window Frames\
  \ that he can make. \nNote : Chef do not need to use all the logs\nInput:\nThe first\
  \ line of the input contains a single integer T denoting the number of test cases.\
  \ The description of each test case follows :.\nThe first line of each test case\
  \ contains a single integer n the number of wooden logs. \nThe second line contains\
  \  n space-separated integers l1,l2,l3….ln The length of each wooden log\nOutput:\
  \ \nThe only line in Output Contains single Integer denoting the maximum possible\
  \ number of Wooden Frames.\nConstraints:\n1 ≤ T ≤ 10\n1 ≤ n ≤ 100\n1 ≤ li ≤ 10000\n\
  Example Input:\n2\n4\n1 2 1 2\n8\n1 2 1 3 4 1 5 6\nExample Output:\n1\n0\nExplanation\
  \ :\nFirst Case :  We can build a frame of dimension 1x2 as two logs of each dimension\
  \ are available.\nSecond Case :  We can’t build any Frame as no logs of length except\
  \ 1 have more than one piece."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_window_frames (n : Nat) (logs : List Int) : Nat := \n\
  \  sorry\n"
"vc-theorems": "theorem count_window_frames_non_negative {n : Nat} {logs : List Int}\
  \ \n  (h : logs ≠ []) : \n  count_window_frames n logs ≥ 0 := \n  sorry\n\n\ntheorem\
  \ count_window_frames_bounded {n : Nat} {logs : List Int}\n  (h : logs ≠ []) :\n\
  \  count_window_frames n logs ≤ n / 2 :=\n  sorry\n\n\ntheorem count_window_frames_idempotent\
  \ {n : Nat} {logs : List Int}\n  (h : logs ≠ []) :\n  count_window_frames n logs\
  \ = count_window_frames n logs :=\n  sorry\n\n\ntheorem count_window_frames_order_invariant\
  \ {n : Nat} {logs : List Int} \n  (h : logs ≠ []) :\n  count_window_frames n logs\
  \ = count_window_frames n logs.reverse :=\n  sorry\n\n\ntheorem count_window_frames_duplicates_bound\
  \ {n : Nat} {logs : List Int}\n  (h1 : logs ≠ [])\n  (h2 : ∀ x ∈ logs, 1 ≤ x ∧ x\
  \ ≤ 3) :\n  count_window_frames n logs ≤ (logs.length - (logs.eraseDups).length)\
  \ / 2 := \n  sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval count_window_frames\
  \ 4 [1, 2, 1, 2]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval count_window_frames\
  \ 8 [1, 2, 1, 3, 4, 1, 5, 6]\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval count_window_frames\
  \ 6 [1, 1, 2, 2, 3, 3]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
