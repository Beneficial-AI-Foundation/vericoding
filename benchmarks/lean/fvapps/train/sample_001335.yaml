"vc-description": "-----Problem description-----\nAs a holiday gift, Tojo received\
  \ a probability problem. The problem read as follows\nConsider an N by M grid. Rows\
  \ are numbered 1 to N, from top to bottom. Columns are numbered 1 to M, from left\
  \ to right. You are initially at cell (1, 1) and want to go to cell (N, M). From\
  \ any cell you can move to the cell below it or to the cell right to it. You should\
  \ never go out of the grid. At any point you should consider all the possibilities\
  \ of movement with equal probability\nLet P[i][j] be the probability of visiting\
  \ cell (i, j). You need to calculate the sum of P[i][j] for 1 ≤ i ≤ N, 1 ≤ i ≤ M.\n\
  As we all know, Tojo really hates probability related problems. He wants you to\
  \ solve this task\n\n-----Input-----\nThe first line of the input contains an integer\
  \ T denoting the number of test cases. The description of T test cases follows.Only\
  \ line of each test case has two integer N and M.\n\n-----Output-----\nFor each\
  \ test case, output a single line containing the required answer. Answers within\
  \ an absolute or relative error of 10-6 will be accepted.\n\n-----Constraints-----\n\
  - 1 ≤ T ≤ 1000\n- 1 ≤ N ≤ 1000\n- 1 ≤ M ≤ 1000\n\n-----Example-----\nInput:\n2\n\
  2 2\n1 6\n\nOutput:\n3.000000\n6.000000\n\n-----Explanation-----\nExample case 1\n\
  Probability matrix P for N=2, M=2 is\n\n1.0 0.5\n\n0.5 1.0\n\nYou are at (1, 1)\
  \ initially. So the probablity of visiting (1, 1) is 1. At (1, 1) you have 2 options,\
  \ move below to (2, 1) or to right cell (1, 2). Probablity of going to (1, 2) is\
  \ 0.5. Probability of going to (2, 1) is 0.5. You always end up at (2, 2), so P[2][2]\
  \ is 1. Required sum = 1.0 + 0.5 + 0.5 + 1.0 = 3.0\nExample case 2\nProbability\
  \ matrix P for N=1, M=6 is\n\n1.0 1.0 1.0 1.0 1.0 1.0\n\nBecause at any position\
  \ there is only one possible next position."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_grid_probability (n m : Nat) : Float := sorry\n\ntheorem\
  \ solve_grid_probability_positive (n m : Nat) \n  (h1 : n > 0) (h2 : m > 0) : \n\
  \  solve_grid_probability n m > 0 := sorry\n"
"vc-theorems": "theorem solve_grid_probability_sum (n m : Nat)\n  (h1 : n > 0) (h2\
  \ : m > 0) :\n  (solve_grid_probability n m - Float.ofNat (n + m - 1)).abs < 0.000001\
  \ := sorry\n\n\ntheorem solve_grid_probability_symmetry (n m : Nat)\n  (h1 : n >\
  \ 0) (h2 : m > 0) :\n  (solve_grid_probability n m - solve_grid_probability m n).abs\
  \ < 0.000001 := sorry\n\n\ntheorem solve_grid_probability_one_one :\n  (solve_grid_probability\
  \ 1 1 - 1).abs < 0.000001 := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
