"vc-description": "There is a strange printer with the following two special requirements:\n\
  \nOn each turn, the printer will print a solid rectangular pattern of a single color\
  \ on the grid. This will cover up the existing colors in the rectangle.\nOnce the\
  \ printer has used a color for the above operation, the same color cannot be used\
  \ again.\n\nYou are given a m x n matrix targetGrid, where targetGrid[row][col]\
  \ is the color in the position (row, col) of the grid.\nReturn true if it is possible\
  \ to print the matrix targetGrid, otherwise, return false.\n \nExample 1:\n\nInput:\
  \ targetGrid = [[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]\nOutput: true\n\nExample\
  \ 2:\n\nInput: targetGrid = [[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]\nOutput: true\n\
  \nExample 3:\nInput: targetGrid = [[1,2,1],[2,1,2],[1,2,1]]\nOutput: false\nExplanation:\
  \ It is impossible to form targetGrid because it is not allowed to print the same\
  \ color in different turns.\nExample 4:\nInput: targetGrid = [[1,1,1],[3,1,3]]\n\
  Output: false\n\n \nConstraints:\n\nm == targetGrid.length\nn == targetGrid[i].length\n\
  1 <= m, n <= 60\n1 <= targetGrid[row][col] <= 60"
"vc-preamble": "import Imports.AllImports\n\ndef Grid := List (List Nat)\n\ndef isPrintable\
  \ (grid: Grid) : Bool :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isValidGrid (grid: Grid) : Bool :=\n  match grid with\n  |\
  \ [] => false\n  | row::rows =>\n    match row with\n    | [] => false\n    | _::_\
  \ =>\n      let width := row.length\n      rows.all (λ r => r.length = width)\n"
"vc-theorems": "theorem grid_validity {grid: Grid} (h: isValidGrid grid) : \n  ∃ (row:\
  \ List Nat) (rows: List (List Nat)), grid = row::rows :=\nsorry\n\n\ntheorem printable_returns_bool\
  \ (grid: Grid) :\n  isPrintable grid = true ∨ isPrintable grid = false :=\nsorry\n\
  \n\ntheorem single_color_printable {grid: Grid} (h1: isValidGrid grid)\n  (h2: ∀\
  \ (i j: Nat) (hi: i < grid.length) (hj: j < (grid.get ⟨i, hi⟩).length), \n    (grid.get\
  \ ⟨i, hi⟩).get ⟨j, hj⟩ = 1) :\n  isPrintable grid = true :=\nsorry\n\n\ntheorem\
  \ symmetric_grid_printable_rotation {grid: Grid} {n: Nat}\n  (h1: isValidGrid grid)\n\
  \  (h2: grid.length = n)\n  (h3: ∀ (i: Nat) (hi: i < grid.length), \n    (grid.get\
  \ ⟨i, hi⟩).length = n) :\n  isPrintable grid = isPrintable (List.map List.reverse\
  \ grid).reverse :=\nsorry\n\n\ntheorem known_cases :\n  (isPrintable [[1,1], [1,1]]\
  \ = true) ∧\n  (isPrintable [[1]] = true) ∧\n  (isPrintable [[1,2], [2,1]] = false)\
  \ :=\nsorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval isPrintable [[1, 1, 1,\
  \ 1], [1, 2, 2, 1], [1, 2, 2, 1], [1, 1, 1, 1]]\n\n/--\ninfo: True\n-/\n#guard_msgs\
  \ in\n#eval isPrintable [[1, 1, 1, 1], [1, 1, 3, 3], [1, 1, 3, 4], [5, 5, 1, 4]]\n\
  \n/--\ninfo: False\n-/\n#guard_msgs in\n#eval isPrintable [[1, 2, 1], [2, 1, 2],\
  \ [1, 2, 1]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
