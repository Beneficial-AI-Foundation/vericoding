"vc-description": "Little Praneet loves experimenting with algorithms and has devised\
  \ a new algorithm. The algorithm is performed on an integer as follows:\n- if the\
  \ rearmost digit is $0$, he will erase it.\n- else, he will replace the rearmost\
  \ digit $d$ with $d-1$.\nIf a point comes when the integer becomes $0$, the algorithm\
  \ stops.\nYou are given an integer $n$. Praneet will perform the algorithm on it\
  \ $a$ times. You have to print the result after $a$ operations.\n\n-----Input:-----\n\
  - The first and only line of input contains two integers $n$ — initial number, and\
  \ $a$ —the number of operations.\n\n-----Output:-----\n- Print one integer — the\
  \ result of performing the algorithm on $n$ $a$ times.\n\n-----Constraints-----\n\
  - $2 \\leq n \\leq 10^9$\n- $1 \\leq a \\leq 50$\n\n-----Sample Input 1-----\n1001\
  \ 2\n\n-----Sample Input 2-----\n5 2\n\n-----Sample Output 1-----\n100\n\n-----Sample\
  \ Output 2-----\n3\n\n-----Explanation-----\n- In the first example, the transformation\
  \ is as follows: $1001->1000->100$.\n- In the second example, the transformation\
  \ is as follows: $5->4->3$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def praneet_algorithm (n : Nat) (a : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem praneet_algorithm_non_negative (n : Nat) (a : Nat) :\n  praneet_algorithm\
  \ n a ≥ 0 := sorry\n\n\ntheorem praneet_algorithm_upper_bound (n : Nat) (a : Nat)\
  \ :\n  praneet_algorithm n a ≤ n := sorry\n\n\ntheorem praneet_algorithm_zero_iterations\
  \ (n : Nat) :\n  praneet_algorithm n 0 = n := sorry \n\n\ntheorem praneet_algorithm_composable\
  \ (n : Nat) :\n  praneet_algorithm n 2 = praneet_algorithm (praneet_algorithm n\
  \ 1) 1 := sorry\n\n\ntheorem praneet_algorithm_divisible_by_10 (n : Nat) :\n  praneet_algorithm\
  \ (n * 10) 1 = n := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
