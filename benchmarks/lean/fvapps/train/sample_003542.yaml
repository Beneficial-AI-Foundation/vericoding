"vc-description": "This is simple version of harder [Square Sums](/kata/square-sums).\n\
  \n# Square sums\n\nWrite function `square_sums_row` (or `squareSumsRow`/`SquareSumsRow`\
  \ depending on language rules) that, given integer number `N` (in range `2..43`),\
  \ returns array of integers `1..N` arranged in a way, so sum of each 2 consecutive\
  \ numbers is a square.\n\nSolution is valid if and only if following two criterias\
  \ are met:\n1. Each number in range `1..N` is used once and only once.\n2. Sum of\
  \ each 2 consecutive numbers is a perfect square.\n\n### Example\nFor N=15 solution\
  \ could look like this:\n\n`[ 9, 7, 2, 14, 11, 5, 4, 12, 13, 3, 6, 10, 15, 1, 8\
  \ ]`\n\n### Verification\n\n1. All numbers are used once and only once. When sorted\
  \ in ascending order array looks like this:\n\n`[ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
  \ 11, 12, 13, 14, 15 ]`\n\n2. Sum of each 2 consecutive numbers is a perfect square:\n\
  \n```\n   16    16     16     16     16     16     16\n   /+\\   /+\\    /+\\  \
  \  /+\\    /+\\    /+\\    /+\\\n[ 9, 7, 2, 14, 11, 5, 4, 12, 13, 3, 6, 10, 15,\
  \ 1, 8 ]\n      \\+/    \\+/    \\+/    \\+/    \\+/    \\+/    \\+/\n       9 \
  \    25      9     25      9     25      9\n\n9 = 3*3\n16 = 4*4\n25 = 5*5\n```\n\
  \nIf there is no solution, return `false` (or, `None` in scala). For example if\
  \ `N=5`, then numbers `1,2,3,4,5` cannot be put into square sums row: `1+3=4`, `4+5=9`,\
  \ but\n`2` has no pairs and cannot link `[1,3]` and `[4,5]`\n\n# Have fun!\n\nHarder\
  \ version of this Kata is [here](/kata/square-sums)."
"vc-preamble": "import Imports.AllImports\n\ndef is_perfect_square (n : Nat) : Bool\
  \ :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def square_sums_row (n : Nat) : Option (List Nat) :=\n  sorry\n"
"vc-theorems": "theorem square_sums_row_length {n : Nat} {result : List Nat} :\n \
  \ square_sums_row n = some result → result.length = n :=\n  sorry\n\n\ntheorem square_sums_row_elements\
  \ {n : Nat} {result : List Nat} :\n  square_sums_row n = some result → \n  result\
  \ = (List.map (λ x => x + 1) (List.range n)) :=\n  sorry\n\n\ntheorem square_sums_row_adjacent_pairs\
  \ {n : Nat} {result : List Nat} :\n  square_sums_row n = some result →\n  ∀ i, i\
  \ < result.length - 1 →\n  is_perfect_square (result[i]! + result[i+1]!) = true\
  \ :=\n  sorry\n\n\ntheorem square_sums_row_impossible_cases :\n  (square_sums_row\
  \ 2 = none) ∧\n  (square_sums_row 3 = none) ∧ \n  (square_sums_row 5 = none) ∧\n\
  \  (square_sums_row 24 = none) :=\n  sorry\n\n/--\ninfo: False\n-/\n#guard_msgs\
  \ in\n#eval square_sums_row 5\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval square_sums_row\
  \ 24\n\n/--\ninfo: 15\n-/\n#guard_msgs in\n#eval len square_sums_row(15)\n\n/--\n\
  info: list(range(1, 16))\n-/\n#guard_msgs in\n#eval sorted result\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
