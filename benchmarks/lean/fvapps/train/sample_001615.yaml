"vc-description": "Chef has found a new game and now he wants you to help him to get\
  \ as much points as possible. \nRules of the game: There are different types of\
  \ game pieces -  geometric shapes composed of some amount of square blocks. In the\
  \ picture below you can see all the types of figures and enumeration. \nThe playing\
  \ field is 10 cells width and 10 cells height. On each step of the game you are\
  \ given exactly three game pieces. After that you need to put each of them to the\
  \ game field such that after your move no two figures on the field are overlapped(you\
  \ cannot rotate figures). If your move results in one or more horizontal or/and\
  \ vertical lines of 10 units without gaps, those lines disappear. Notice that you\
  \ put these three figures one by one and if you place the first figure and there\
  \ are some lines ready to disappear, then they will disappear and only after that\
  \ you place other figures.  \nThe game ends when you can't put no more figures on\
  \ the game field.\n\n-----Input-----\nEach line of input contains three integers\
  \ figure1, figure2 , figure3 denoting the type of the figures appeared on this step.\
  \ If the game has ended - in the next line of input will be \"-1 -1 -1\". \n\n-----Interaction\
  \ with the judge-----\nIn each step you should read from the standard input all\
  \ information about figures that appear in this step. After receiving this input,\
  \ you should print one line containing nine space-separated parameters id1, r1,\
  \ c1, id2, r2, c2, id3, r3 and c3. Integers {id1, id2, id3} is the permutation of\
  \ {1, 2, 3} and denote the order in which you will put these three figures. Integer\
  \ ri denotes the number of the row of the lowest block of idith figure after you\
  \ put it and ci denotes the number of the column of the leftmost block of idith\
  \ figure after you put it. The rows are numbered from 1 to 10 from top to bottom\
  \ and columns are numbered from 1 to 10 from left to right. Remember to flush the\
  \ output after every line you print.\nTo finish the game(if you don't know where\
  \ to put figures or it's impossible to put some figures) you need to output \"-1\"\
  \ for figures you don't know where to put. For example, if on some move you don't\
  \ know how to place all three figures, you need to output nine '-1\"s as describing\
  \ of all three figures. But if you can place, for example, only second figure, you\
  \ need to output next numbers: \"2 r1 c1 -1 -1 -1 -1 -1 -1\". When judge reads \"\
  -1\"s as describing of some figure, it means that the game ends at this step and\
  \ then judge will output only \"-1 -1 -1\" as sign of finishing the game. \n\n-----Constraints-----\n\
  - 1 ≤ figurei ≤ 19\n- Total amount of steps of the game does not exceed 5 * 104\
  \ \n\n-----Scoring-----\n- For each test case, your score will be the sum of areas(amount\
  \ of square blocks figure consists) of figures that you correctly place in the playing\
  \ field. Your goal is to maximise this score.\n- Also there are some bonuses: if\
  \ after your move exactly x row(s) and y column(s) will disappear - your score for\
  \ this test will be increased by x2 + y2 + 5 * x *y and by 500 if after your move\
  \ the field will be empty. \n- Your total score for the problem will be the sum\
  \ of scores on all the test cases.\n- Your solution will be tested only on 20% of\
  \ the test files during the contest and will be re-judged against 100% after the\
  \ end of competition.\n- The game ends when you output \"-1\"s as describing of\
  \ placing some figure(what means you want to finish the game) or total number of\
  \ moves reached 5 * 104. In both cases the judge will output \"-1 -1 -1\" as a sing\
  \ of finishing of the game.\n- You will get WA verdict if you output incorrect data\
  \ or some figures overlap. Incorrect data means that there is no way to put this\
  \ figure at the place you output or you output completely incorrect data: idi ∉\
  \ {1, 2, 3},  {id1, id2, id3} is not the permutation of {1, 2, 3}, r ∉ [1..10] or\
  \ c ∉ [1..10].\n- If you passed all 5 * 104 steps of the game, the next line of\
  \ input will be \"-1 -1 -1\" and your result will be the score you got.\n\n-----Test\
  \ data generation-----\nFor each test file the probabilities of appearing each figure\
  \ are manually chosen.\n\n-----Example-----\nInput:\n8 3 11\n6 14 12\n5 10 11\n\
  5 7 11\n16 19 1\n-1 -1 -1\n\nOutput:\n3 6 5 2 2 2 1 10 8\n1 4 8 2 6 1 3 7 2\n1 5\
  \ 8 3 4 8 2 6 8\n3 9 8 2 10 7 1 1 6\n3 10 8 2 8 3 -1 -1 -1\n\n-----Explanation-----\n\
  In this test case your score will be 74 = 66 (for areas of figures) + 8 (bonus score).\n\
  On the fifth move the player decided to finish the game and output three \"-1\"\
  s as the describing of placing the last figure on this move."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_game (input : List String) : List String :=\n  sorry\n"
"vc-theorems": "theorem solve_game_empty_board (input : List String) :\n  input =\
  \ [\"-1 -1 -1\"] → solve_game input = [] := \n  sorry\n\n\ntheorem solve_game_single_move\
  \ (input : List String) :\n  input = [\"1 2 3\", \"-1 -1 -1\"] → \n  ∃ result :\
  \ String,\n  solve_game input = [result] ∧ \n  result = \"-1 -1 -1 -1 -1 -1 -1 -1\
  \ -1\" := \n  sorry\n\n/--\ninfo: expected1\n-/\n#guard_msgs in\n#eval solve_game\
  \ [\"8 3 11\", \"6 14 12\", \"5 10 11\", \"5 7 11\", \"16 19 1\", \"-1 -1 -1\"]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
