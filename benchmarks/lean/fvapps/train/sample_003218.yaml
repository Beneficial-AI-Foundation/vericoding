"vc-description": "Hi there! \nYou have to implement the \n\n`String get_column_title(int\
  \ num) // syntax depends on programming language`\n\nfunction that takes an integer\
  \ number (index of the Excel column) and returns the string represents the title\
  \ of this column.\n\n#Intro\nIn the MS Excel lines are numbered by decimals, columns\
  \ - by sets of letters.\n\nFor example, the first column has the title \"A\", second\
  \ column - \"B\", 26th - \"Z\", 27th - \"AA\". \n\n\"BA\"(53) comes after \"AZ\"\
  (52), \"AAA\" comes after \"ZZ\".\n\n\n\n\nExcel? Columns? More details [here](https://en.wikipedia.org/wiki/Microsoft_Excel)\n\
  \n#Input\nIt takes only one argument - column decimal index number.\nArgument `num`\
  \ is a natural number.\n\n#Output\nOutput is the upper-case string represents the\
  \ title of column. It contains the English letters: A..Z\n\n#Errors\nFor cases `num\
  \ < 1` your function should throw/raise `IndexError`. In case of non-integer argument\
  \ you should throw/raise `TypeError`.\n\nIn Java, you should throw `Exceptions`.\n\
  \nNothing should be returned in Haskell.\n\n#Examples\nPython, Ruby:\n```\n>>> get_column_title(52)\n\
  \"AZ\"\n>>> get_column_title(1337)\n\"AYK\"\n>>> get_column_title(432778)\n\"XPEH\"\
  \n>>> get_column_title()\nTypeError:\n>>> get_column_title(\"123\")\nTypeError:\n\
  >>> get_column_title(0)\nIndexError:\n```\nJS, Java:\n```\n>>> getColumnTitle(52)\n\
  \"AZ\"\n>>> getColumnTitle(1337)\n\"AYK\"\n>>> getColumnTitle(432778)\n\"XPEH\"\n\
  >>> getColumnTitle()\nTypeError:\n>>> getColumnTitle(\"123\")\nTypeError:\n>>> getColumnTitle(0)\n\
  IndexError:\n```\n\n#Hint\nThe difference between the 26-digits notation and Excel\
  \ columns numeration that in the first system, after \"Z\" there are \"BA\", \"\
  BB\", ..., while in the Excel columns scale there is a range of 26 elements: AA,\
  \ AB, ... , AZ between Z and BA. \n\nIt is as if in the decimal notation was the\
  \ following order: 0, 1, 2, .., 9, 00, 01, 02, .., 09, 10, 11, .., 19, 20..29..99,\
  \ 000, 001 and so on.\n\n#Also\nThe task is really sapid and hard. If you're stuck\
  \ - write to the discussion board, there are many smart people willing to help."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def get_column_title (n : Int) : String := sorry\n\ntheorem get_column_title_type_error_non_integer\
  \ :\n  ∀ x : Int, x > 0 → get_column_title x ≠ \"\" := sorry\n"
"vc-theorems": "theorem get_column_title_index_error_zero_neg :\n  ∀ n : Int, n ≤\
  \ 0 → get_column_title n = \"\" := sorry\n\n\ntheorem get_column_title_uppercase_only\
  \ :\n  ∀ n : Int, n > 0 → \n  ∀ i : Nat, i < (get_column_title n).length → \n  let\
  \ c := (get_column_title n).data[i]? \n  ∀ v, c = some v → 'A' ≤ v ∧ v ≤ 'Z' :=\
  \ sorry\n\n\ntheorem get_column_title_length_constraints :\n  ∀ n : Int, n > 0 →\
  \ \n  let result := get_column_title n\n  let n_str := toString n\n  1 ≤ result.length\
  \ ∧ \n  result.length ≤ n_str.length ∧\n  result.length ≥ (n_str.length + 1) / 2\
  \ := sorry\n\n\ntheorem get_column_title_single_letter :\n  ∀ n : Int, 1 ≤ n ∧ n\
  \ ≤ 26 →\n  let result := get_column_title n\n  result.length = 1 ∧ \n  result.data[0]?\
  \ = some (Char.ofNat (n.toNat + 64)) := sorry\n\n\ntheorem get_column_title_monotonic\
  \ :\n  ∀ n : Int, n > 0 →\n  get_column_title n < get_column_title (n + 1) := sorry\n\
  \n/--\ninfo: 'A'\n-/\n#guard_msgs in\n#eval get_column_title 1\n\n/--\ninfo: 'AZ'\n\
  -/\n#guard_msgs in\n#eval get_column_title 52\n\n/--\ninfo: 'ZZ'\n-/\n#guard_msgs\
  \ in\n#eval get_column_title 702\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
