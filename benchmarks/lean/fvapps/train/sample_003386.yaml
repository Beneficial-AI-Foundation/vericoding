"vc-description": "In this Kata, we will calculate the **minumum positive number that\
  \ is not a possible sum** from a list of positive integers. \n\n```\nsolve([1,2,8,7])\
  \ = 4 => we can get 1, 2, 3 (from 1+2), but we cannot get 4. 4 is the minimum number\
  \ not possible from the list. \nsolve([4,1,2,3,12]) = 11. We can get 1, 2, 3, 4,\
  \ 4+1=5, 4+2=6,4+3=7,4+3+1=8,4+3+2=9,4+3+2+1=10. But not 11. \nsolve([2,3,2,3,4,2,12,3])\
  \ = 1. We cannot get 1.\n```\nMore examples in test cases. \n\nGood luck!"
"vc-preamble": "import Imports.AllImports\n\ndef solve (nums : List Nat) : Nat :=\
  \ sorry\n\ntheorem solve_returns_positive (nums : List Nat)\n  (h : ∀ x ∈ nums,\
  \ x > 0 ∧ x ≤ 1000)\n  : solve nums > 0 := sorry\n\n\ndef sums (l : List Nat) :\
  \ List Nat := sorry\n\ndef findMin (s : List Nat) : Nat := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sortList (l : List Nat) : List Nat := sorry\n\ntheorem solve_order_invariant\
  \ (nums : List Nat)\n  (h : ∀ x ∈ nums, x > 0 ∧ x ≤ 100)\n  : solve nums = solve\
  \ (sortList nums) := sorry"
"vc-theorems": "theorem solve_is_min_missing_sum {nums : List Nat} \n  (h : ∀ x ∈\
  \ nums, x > 0 ∧ x ≤ 10)\n  (h2 : nums.length ≤ 5)\n  : solve nums = findMin (sums\
  \ nums) := sorry\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
