"vc-description": "You are given an initial 2-value array (x). You will use this to\
  \ calculate a score.\n\nIf both values in (x) are numbers, the score is the sum\
  \ of the two. If only one is a number, the score is that number. If neither is a\
  \ number, return 'Void!'.\n\n\nOnce you have your score, you must return an array\
  \ of arrays. Each sub array will be the same as (x) and the number of sub arrays\
  \ should be equal to the score.\n\nFor example:\n\nif (x) == ['a', 3]  you should\
  \ return [['a', 3], ['a', 3], ['a', 3]]."
"vc-preamble": "import Imports.AllImports\n\ndef List.sum : List Nat → Nat \n  | []\
  \ => 0\n  | (h::t) => h + sum t\n\n\ndef explode {α : Type} : List α → List (List\
  \ α) := sorry\n\ntheorem explode_integers {arr : List Nat} \n  (h1 : ∀ x ∈ arr,\
  \ 1 ≤ x ∧ x ≤ 10) \n  (h2 : 1 ≤ arr.length ∧ arr.length ≤ 5) :\n  let result :=\
  \ explode arr\n  (result.length = arr.sum) ∧ \n  (∀ x ∈ result, x = arr) := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def VoidResult := List (List String)\ndef VOID : VoidResult :=\
  \ []\n"
"vc-theorems": "theorem explode_strings (arr : List String)\n  (h : 1 ≤ arr.length\
  \ ∧ arr.length ≤ 5) \n  (h2 : ∀ s ∈ arr, s.length ≤ 5) :\n  explode arr = VOID :=\
  \ sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
