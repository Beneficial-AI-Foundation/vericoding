vc-description: |-
  Given a string S of digits, such as S = "123456579", we can split it into a Fibonacci-like sequence [123, 456, 579].
  Formally, a Fibonacci-like sequence is a list F of non-negative integers such that:

  0 <= F[i] <= 2^31 - 1, (that is, each integer fits a 32-bit signed integer type);
  F.length >= 3;
  and F[i] + F[i+1] = F[i+2] for all 0 <= i < F.length - 2.

  Also, note that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself.
  Return any Fibonacci-like sequence split from S, or return [] if it cannot be done.
  Example 1:
  Input: "123456579"
  Output: [123,456,579]

  Example 2:
  Input: "11235813"
  Output: [1,1,2,3,5,8,13]

  Example 3:
  Input: "112358130"
  Output: []
  Explanation: The task is impossible.

  Example 4:
  Input: "0123"
  Output: []
  Explanation: Leading zeroes are not allowed, so "01", "2", "3" is not valid.

  Example 5:
  Input: "1101111"
  Output: [110, 1, 111]
  Explanation: The output [11, 0, 11, 11] would also be accepted.

  Note: 

  1 <= S.length <= 200
  S contains only digits.
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
vc-theorems: |
  theorem valid_fibonacci_sequences 
    (nums: List Nat)
    (h1: nums.length ≥ 3)
    (h2: nums.length ≤ 10) 
    (h3: ∀ n ∈ nums, isValidInt n)
    (h4: isFibonacciSequence nums) :
    let s := sequenceToString nums
    let result := splitFibonacci s
    (result.length ≥ 3 ∧ 
     isFibonacciSequence result ∧
     sequenceToString result = s ∧
     ∀ x ∈ result, isValidInt x) :=
    sorry


  theorem arbitrary_strings
    (s: String)
    (h1: s.length ≥ 1)
    (h2: s.length ≤ 20)
    (h3: ∀ c ∈ s.data, c.isDigit) :
    let result := splitFibonacci s
    (result = [] ∨ 
     (result.length ≥ 3 ∧
      isFibonacciSequence result ∧
      sequenceToString result = s ∧
      ∀ x ∈ result, isValidInt x)) :=
    sorry


  theorem single_digits
    (d: Nat)
    (h1: d ≥ 1)
    (h2: d ≤ 9) :
    splitFibonacci (toString d) = [] :=
    sorry

  /--
  info: [123, 456, 579]
  -/
  #guard_msgs in
  #eval split_fibonacci "123456579"

  /--
  info: [1, 1, 2, 3, 5, 8, 13]
  -/
  #guard_msgs in
  #eval split_fibonacci "11235813"

  /--
  info: []
  -/
  #guard_msgs in
  #eval split_fibonacci "112358130"
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded
