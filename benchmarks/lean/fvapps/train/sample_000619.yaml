"vc-description": "You will be given m strings. For each of those strings, you need\
  \ to count the total number of appearances of that string as substrings in all possible\
  \ strings of length n containing only lower case English letters. \n\nA string may\
  \ appear in a string multiple times. Also, these appearances may overlap. All these\
  \ must be counted separately. For example, aa appears thrice in the string aaacaa:\
  \ aaacaa, aaacaa and aaacaa.\n\n-----Input-----\n- The first line contains one integer,\
  \ T, the number of test cases. The description of each test case follows:\n- The\
  \ first line of each test case will contain two integers n and m.\n- The ith of\
  \ the next m lines will have one string in each line. All the strings will consist\
  \ only of lower case English letters.\n\n-----Output-----\n- For each test case,\
  \ print \"Case x:\" (without quotes. x is the test case number, 1-indexed) in the\
  \ first line.\n- Then print m lines. The ith line should contain the number of appearances\
  \ of the ith string in all possible strings of length n. As the numbers can be very\
  \ large, print the answers modulo 109+7.\n\n-----Constraints-----\n- 1 ≤ T ≤ 100\n\
  - 1 ≤ n ≤ 100000\n- 1 ≤ m ≤ 1000 \n- 1 ≤ Length of every string in input\n- 1 ≤\
  \ Total length of all strings in one test case ≤ 5 * 105\n- 1 ≤ Total length of\
  \ all strings in one test file ≤ 5 * 106\n\n-----Example-----\nInput:\n3\n2 1\n\
  aa\n2 1\nd\n12 3\ncdmn\nqweewef\nqs\n\nOutput:\nCase 1:\n1\nCase 2:\n52\nCase 3:\n\
  443568031\n71288256\n41317270\n\n-----Explanation:-----\nTestcase 1: aa is the only\
  \ string of length 2 which contains aa as a substring. And it occurs only once.\
  \ Hence the answer is 1."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def MOD := 1000000007\n\ndef count_substring_appearances (n: Nat)\
  \ (strings: List String) : List Nat :=\n  sorry\n"
"vc-theorems": "theorem count_substring_output_length {n: Nat} {strings: List String}\
  \ :\n  strings ≠ [] →\n  List.length (count_substring_appearances n strings) = List.length\
  \ strings :=\n  sorry\n\n\n\n\ntheorem count_substring_long_string_zero {n: Nat}\
  \ {s: String} {strings: List String} :  \n  String.length s > n →\n  s ∈ strings\
  \ → \n  ∃ i, i < List.length strings ∧ \n    (List.get! (count_substring_appearances\
  \ n strings) i) = 0 :=\n  sorry\n\n\ntheorem count_substring_empty_list {n: Nat}\
  \ : \n  count_substring_appearances n [] = [] :=\n  sorry\n\n\n\n\ntheorem count_substring_min_n\
  \ :\n  count_substring_appearances 1 [\"a\"] = [1] ∧\n  count_substring_appearances\
  \ 1 [\"aa\"] = [0] :=\n  sorry\n\n/--\ninfo: [1]\n-/\n#guard_msgs in\n#eval count_substring_appearances\
  \ 2 [\"aa\"]\n\n/--\ninfo: [52]\n-/\n#guard_msgs in\n#eval count_substring_appearances\
  \ 2 [\"d\"]\n\n/--\ninfo: [443568031, 71288256, 41317270]\n-/\n#guard_msgs in\n\
  #eval count_substring_appearances 12 [\"cdmn\", \"qweewef\", \"qs\"]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
