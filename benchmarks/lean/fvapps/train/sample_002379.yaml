"vc-description": "Given two integer arrays of equal length target and arr.\nIn one\
  \ step, you can select any non-empty sub-array of arr and reverse it. You are allowed\
  \ to make any number of steps.\nReturn True if you can make arr equal to target,\
  \ or False otherwise.\n \nExample 1:\nInput: target = [1,2,3,4], arr = [2,4,1,3]\n\
  Output: true\nExplanation: You can follow the next steps to convert arr to target:\n\
  1- Reverse sub-array [2,4,1], arr becomes [1,4,2,3]\n2- Reverse sub-array [4,2],\
  \ arr becomes [1,2,4,3]\n3- Reverse sub-array [4,3], arr becomes [1,2,3,4]\nThere\
  \ are multiple ways to convert arr to target, this is not the only way to do so.\n\
  \nExample 2:\nInput: target = [7], arr = [7]\nOutput: true\nExplanation: arr is\
  \ equal to target without any reverses.\n\nExample 3:\nInput: target = [1,12], arr\
  \ = [12,1]\nOutput: true\n\nExample 4:\nInput: target = [3,7,9], arr = [3,7,11]\n\
  Output: false\nExplanation: arr doesn't have value 9 and it can never be converted\
  \ to target.\n\nExample 5:\nInput: target = [1,1,1,1,1], arr = [1,1,1,1,1]\nOutput:\
  \ true\n\n \nConstraints:\n\ntarget.length == arr.length\n1 <= target.length <=\
  \ 1000\n1 <= target[i] <= 1000\n1 <= arr[i] <= 1000"
"vc-preamble": "import Imports.AllImports\n\ndef can_be_equal (xs ys : List Int) :\
  \ Bool :=\n  sorry\n\n\ndef isPerm (xs ys : List Int) : Bool :=\n  sorry\n\n/--\
  \ Helper function for list sum -/\n\ndef listSum (xs : List Int) : Int :=\n  sorry\n\
  \n/-- Helper function to get nth element -/"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def getNth (xs : List Int) (n : Nat) : Int :=\n  sorry\n"
"vc-theorems": "theorem identical_lists_are_equal (xs : List Int) : \n  can_be_equal\
  \ xs xs = true :=\nsorry\n\n/-- Helper function to check if one list is a permutation\
  \ of another -/\n\ntheorem permuted_lists_are_equal {xs ys : List Int} :\n  isPerm\
  \ xs ys → can_be_equal xs ys = true :=\nsorry\n\n\ntheorem different_value_not_equal\
  \ {xs ys : List Int} (h1 : xs ≠ []) (h2 : ys ≠ []) :\n  (∃ i : Nat, getNth ys i\
  \ = getNth xs i + (listSum xs + 1)) → \n  can_be_equal xs ys = false :=\nsorry\n\
  \n\ntheorem different_length_not_equal {xs : List Int} (y : Int) :\n  can_be_equal\
  \ xs (xs ++ [y]) = false :=\nsorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval\
  \ can_be_equal [1, 2, 3, 4] [2, 4, 1, 3]\n\n/--\ninfo: True\n-/\n#guard_msgs in\n\
  #eval can_be_equal [7] [7]\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval can_be_equal\
  \ [3, 7, 9] [3, 7, 11]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
