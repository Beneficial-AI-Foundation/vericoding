"vc-description": "If we alternate the vowels and consonants in the string `\"have\"\
  `, we get the following list, arranged alphabetically:\n`['ahev', 'aveh', 'ehav',\
  \ 'evah', 'vahe', 'veha']`. These are the only possibilities in which vowels and\
  \ consonants are alternated. The first element, `ahev`, is alphabetically lowest.\
  \ \n\nGiven a string:\n* alternate the vowels and consonants and return the lexicographically\
  \ lowest element in the list\n* If any two or more vowels or consonants must follow\
  \ each other, return `\"failed\"`\n* if the number of vowels and consonants are\
  \ equal, the first letter of the result must be a vowel.\n\nExamples: \n\n```Haskell\n\
  solve(\"codewars\") = \"failed\". However you alternate vowels and consonants, two\
  \ consonants must follow each other\nsolve(\"oruder\") = \"edorur\"\nsolve(\"orudere\"\
  ) = \"ederoru\". This is the only option that allows you to alternate vowels & consonants.\n\
  ```\n\n```if c:\nIn C, return an allocated string even if the response is \"failed\"\
  .\n```\n\nVowels will be any of \"aeiou\". Input will be a lowercase string, no\
  \ spaces. See test cases for more examples. \n\nGood luck!\n\nIf you like this Kata,\
  \ please try: \n\n[Consonant value](https://www.codewars.com/kata/59c633e7dcc4053512000073)\n\
  \n[Alternate capitalization](https://www.codewars.com/kata/59cfc000aeb2844d16000075)"
"vc-preamble": "import Imports.AllImports\n\ndef isVowel (c : Char) : Bool :=\n  c\
  \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve (s : String) : String :=\n  sorry\n"
"vc-theorems": "theorem output_format {s : String} (h : s.length > 0) :\n  let result\
  \ := solve s\n  (result = \"failed\") ∨ \n  (∀ c, c ∈ result.data → c ∈ s.data)\
  \ := \n  sorry\n\n\ntheorem alternating_pattern {s : String} (h : s.length > 0)\
  \ :\n  let result := solve s\n  result ≠ \"failed\" → result.length > 1 →\n  ∀ i\
  \ : Fin result.length, i.val + 1 < result.length →\n    ∀ pos pos' : String.Pos,\
  \ \n      pos.byteIdx = i.val → pos'.byteIdx = i.val + 1 →\n      isVowel (result.get\
  \ pos) ≠ isVowel (result.get pos') :=\n  sorry\n\n/--\ninfo: 'ajav'\n-/\n#guard_msgs\
  \ in\n#eval solve \"java\"\n\n/--\ninfo: 'edorur'\n-/\n#guard_msgs in\n#eval solve\
  \ \"oruder\"\n\n/--\ninfo: 'failed'\n-/\n#guard_msgs in\n#eval solve \"codewars\"\
  \n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
