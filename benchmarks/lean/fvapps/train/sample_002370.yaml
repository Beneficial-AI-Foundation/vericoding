"vc-description": "Given a non-negative integer num, return the number of steps to\
  \ reduce it to zero. If the current number is even, you have to divide it by 2,\
  \ otherwise, you have to subtract 1 from it.\n \nExample 1:\nInput: num = 14\nOutput:\
  \ 6\nExplanation: \nStep 1) 14 is even; divide by 2 and obtain 7. \nStep 2) 7 is\
  \ odd; subtract 1 and obtain 6.\nStep 3) 6 is even; divide by 2 and obtain 3. \n\
  Step 4) 3 is odd; subtract 1 and obtain 2. \nStep 5) 2 is even; divide by 2 and\
  \ obtain 1. \nStep 6) 1 is odd; subtract 1 and obtain 0.\n\nExample 2:\nInput: num\
  \ = 8\nOutput: 4\nExplanation: \nStep 1) 8 is even; divide by 2 and obtain 4. \n\
  Step 2) 4 is even; divide by 2 and obtain 2. \nStep 3) 2 is even; divide by 2 and\
  \ obtain 1. \nStep 4) 1 is odd; subtract 1 and obtain 0.\n\nExample 3:\nInput: num\
  \ = 123\nOutput: 12\n\n \nConstraints:\n\n0 <= num <= 10^6"
"vc-preamble": "import Imports.AllImports\n\ndef number_of_steps (n: Nat) : Nat :=\
  \ sorry\n\ndef is_power_of_two (n: Nat) : Bool := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def simulation_loop (n steps: Nat) : Nat :=\n  match n with\n \
  \ | 0 => steps\n  | n+1 => if n % 2 = 0 \n           then simulation_loop (n / 2)\
  \ (steps + 1)\n           else simulation_loop (n - 1) (steps + 1)\n\n\n\n\n"
"vc-theorems": "theorem number_of_steps_nonneg (n: Nat) : \n  number_of_steps n ≥\
  \ 0 := sorry\n\n\ntheorem zero_steps :\n  number_of_steps 0 = 0 := sorry\n\n/--\n\
  info: 6\n-/\n#guard_msgs in\n#eval number_of_steps 14\n\n/--\ninfo: 4\n-/\n#guard_msgs\
  \ in\n#eval number_of_steps 8\n\n/--\ninfo: 12\n-/\n#guard_msgs in\n#eval number_of_steps\
  \ 123\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
