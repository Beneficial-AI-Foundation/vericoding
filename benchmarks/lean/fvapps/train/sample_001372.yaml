"vc-description": "Vlad enjoys listening to music. He lives in Sam's Town. A few days\
  \ ago he had a birthday, so his parents gave him a gift: MP3-player! Vlad was the\
  \ happiest man in the world! Now he can listen his favorite songs whenever he wants!\n\
  Vlad built up his own playlist. The playlist consists of N songs, each has a unique\
  \ positive integer length. Vlad likes all the songs from his playlist, but there\
  \ is a song, which he likes more than the others. It's named \"Uncle Johny\".\n\
  After creation of the playlist, Vlad decided to sort the songs in increasing order\
  \ of their lengths. For example, if the lengths of the songs in playlist was {1,\
  \ 3, 5, 2, 4} after sorting it becomes {1, 2, 3, 4, 5}. Before the sorting, \"Uncle\
  \ Johny\" was on K-th position (1-indexing is assumed for the playlist) in the playlist.\n\
  Vlad needs your help! He gives you all the information of his playlist. Your task\
  \ is to find the position of \"Uncle Johny\" in  the sorted playlist.\n\n-----Input-----\n\
  The first line of the input contains an integer T denoting the number of test cases.\
  \ The description of T test cases follows. \n\nThe first line of each test case\
  \ contains one integer N denoting the number of songs in Vlad's playlist. The second\
  \ line contains N space-separated integers A1, A2, ..., AN denoting the lenghts\
  \ of Vlad's songs.\nThe third line contains the only integer K - the position of\
  \ \"Uncle Johny\" in the initial playlist.\n\n-----Output-----\nFor each test case,\
  \ output a single line containing the position of \"Uncle Johny\" in the sorted\
  \ playlist.\n\n-----Constraints-----\n1 ≤ T ≤ 1000\n\n1 ≤ K ≤ N ≤ 100\n\n1 ≤ Ai\
  \ ≤ 109\n\n-----Example-----\nInput:\n3\n4\n1 3 4 2\n2\n5\n1 2 3 9 4\n5\n5\n1 2\
  \ 3 9 4 \n1\n\nOutput:\n3\n4\n1\n\n-----Explanation-----\nIn the example test there\
  \ are T=3 test cases.\nTest case 1\nIn the first test case N equals to 4, K equals\
  \ to 2, A equals to {1, 3, 4, 2}. The answer is 3, because {1, 3, 4, 2} -> {1, 2,\
  \ 3, 4}. A2 now is on the 3-rd position.\nTest case 2\nIn the second test case N\
  \ equals to 5, K equals to 5, A equals to {1, 2, 3, 9, 4}. The answer is 4, because\
  \ {1, 2, 3, 9, 4} -> {1, 2, 3, 4, 9}. A5 now is on the 4-th position.\nTest case\
  \ 3\nIn the third test case N equals to 5, K equals to 1, A equals to {1, 2, 3,\
  \ 9, 4}. The answer is 1, because {1, 2, 3, 9, 4} -> {1, 2, 3, 4, 9}. A1 stays on\
  \ the 1-th position.\n\n-----Note-----\n\"Uncle Johny\" is a real song performed\
  \ by The Killers."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_uncle_johny_position (n : Nat) (nums : List Nat) (k :\
  \ Nat) : Nat :=\n  sorry\n\n\n"
"vc-theorems": "theorem find_uncle_johny_position_smaller_count\n  {n : Nat} {nums\
  \ : List Nat} {k : Nat}\n  (h_k : k ≤ nums.length)\n  (h_k_pos : k > 0) :\n  let\
  \ target := nums[k-1]'(by\n    have h1 : k - 1 < k := by exact Nat.sub_lt (Nat.zero_lt_of_lt\
  \ h_k_pos) (by decide)\n    have h2 : k ≤ nums.length := h_k\n    exact Nat.lt_of_lt_of_le\
  \ h1 h2)\n  let smaller_count := (nums.filter (· < target)).length\n  find_uncle_johny_position\
  \ n nums k = smaller_count + 1 :=\nsorry\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval\
  \ find_uncle_johny_position 4 [1, 3, 4, 2] 2\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n\
  #eval find_uncle_johny_position 5 [1, 2, 3, 9, 4] 5\n\n/--\ninfo: 1\n-/\n#guard_msgs\
  \ in\n#eval find_uncle_johny_position 5 [1, 2, 3, 9, 4] 1\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
