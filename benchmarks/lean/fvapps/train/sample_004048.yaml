"vc-description": "You are given an array with several `\"even\"` words, one `\"odd\"\
  ` word, and some numbers mixed in.\n\nDetermine if any of the numbers in the array\
  \ is the index of the `\"odd\"` word. If so, return `true`, otherwise `false`."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def odd_ball {α} [BEq α] (xs : List (Sum α String)) : Bool :=\n\
  \  sorry\n"
"vc-theorems": "theorem odd_ball_property (base : List (Sum Nat String)) (insert_pos\
  \ : Nat) (h : insert_pos ≤ base.length) :\n  let test_list := (base.take insert_pos)\
  \ ++ [Sum.inr \"odd\"] ++ (base.drop insert_pos)\n  odd_ball test_list = test_list.contains\
  \ (Sum.inl insert_pos)\n  := sorry\n\n\ntheorem odd_ball_no_odd {α} [BEq α] (xs\
  \ : List (Sum α String)) (h : ¬xs.contains (Sum.inr \"odd\")) :\n  odd_ball xs =\
  \ false := sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval odd_ball [\"even\"\
  , 4, \"even\", 7, \"even\", 55, \"even\", 6, \"even\", 10, \"odd\", 3, \"even\"\
  ]\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval odd_ball test2\n\n/--\ninfo: True\n\
  -/\n#guard_msgs in\n#eval odd_ball test3\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
