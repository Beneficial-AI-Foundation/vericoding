"vc-description": "Sereja has a string A consisting of n lower case English letters.\
  \ \n\nSereja calls two strings X and Y each of length n similar if they can be made\
  \ equal by applying the following operation at most once in each of them.\n\n- Chose\
  \ any two position i, j in the string (i can be equal to j too). Swap the characters\
  \ at position i with character at position j.\n\nFor example strings \"abcd\" and\
  \ \"acbd\" are similar, strings \"ab\" and \"ab\" are similar, but strings \"abcde\"\
  \ and \"bcdea\" are not similar. Note that strings  \"abc\" and \"cab\" are also\
  \ similar, as you can swap 'a' and 'c' in the first string to get \"cba\" and 'a'\
  \ and 'b' in the second string to get \"cba\". \n\nNow Sereja is interested in finding\
  \ number of ordered pairs of non similar strings X and Y such that they can be constructed\
  \ from a given string A by permutation of its characters. As answer could be large,\
  \ please output your answer modulo  (109 + 7).\n\nNote \n\nA string s (of size n)\
  \ is said to be constructed from string t (also of size n) by permutation of its\
  \ characters if there exists a permutation P (of length n), such that s[i] = t[P[i]]\
  \ for each i from 1 to n.\n\n-----Input-----\n- First line contain integer T - number\
  \ of test cases. \n- For each of the next T lines: \n\t\n- Each line contains a\
  \ string A as defined in the problem.\n\n-----Output-----\nFor each test case, output\
  \ answer modulo 1000000007 (109 + 7) in separate line. \n\n-----Constraints-----\n\
  - 1 ≤ T ≤  10 \n- 1 ≤ n ≤  10^5 \n\n-----Constraints-----\n- Subtask #1: 1 ≤ n ≤\
  \  10  (25 points)\n- Subtask #2: 1 ≤ n ≤  100  (25 points)\n- Subtask #3: 1 ≤ n\
  \ ≤  1000  (25 points)\n- Subtask #4: original constraints (25 points)\n\n-----Example-----\n\
  Input:\n2\nz\nabcd\n\nOutput:\n0\n144"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_string_similarity (s : String) : Nat :=\n  if s.length\
  \ = 0 then panic! \"Empty string not allowed\"\n  else sorry\n"
"vc-theorems": "theorem solve_string_similarity_non_negative {s : String} (h : s.length\
  \ > 0) : \n  solve_string_similarity s ≥ 0 := by sorry\n\n\ntheorem solve_string_similarity_bounded\
  \ {s : String} (h : s.length > 0) :\n  solve_string_similarity s < 10^9 + 7 := by\
  \ sorry\n\n\ntheorem single_char_string {s : String} (h1 : s.length = 1) :\n  solve_string_similarity\
  \ s = 0 := by sorry\n\n\ntheorem same_char_string {s : String} (h1 : s.length >\
  \ 0) \n  (h2 : ∀ (i j : String.Pos), s.get i = s.get j) :\n  solve_string_similarity\
  \ s = 0 := by sorry\n\n\ntheorem repeated_char_string (n : Nat) (h : n > 0) :\n\
  \  solve_string_similarity (String.mk (List.replicate n 'a')) = 0 := by sorry\n\n\
  \ntheorem alternating_string_bounded (n : Nat) (h : 0 < n) :\n  let s := String.mk\
  \ (List.join (List.replicate n ['a', 'b']))\n  0 ≤ solve_string_similarity s ∧ solve_string_similarity\
  \ s < 10^9 + 7 := by sorry\n\n\ntheorem unique_chars_bounded (n : Nat) (h : 0 <\
  \ n) :\n  let s := String.mk (List.map (fun i => Char.ofNat (Char.toNat 'a' + i))\
  \ (List.range n))\n  0 ≤ solve_string_similarity s ∧ solve_string_similarity s <\
  \ 10^9 + 7 := by sorry\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval solve_string_similarity\
  \ \"z\"\n\n/--\ninfo: 144\n-/\n#guard_msgs in\n#eval solve_string_similarity \"\
  abcd\"\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval solve_string_similarity \"aaaa\"\
  \n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
