"vc-description": "There is a brick wall in front of you. The wall is rectangular\
  \ and has several rows of bricks. The bricks have the same height but different\
  \ width. You want to draw a vertical line from the top to the bottom and cross the\
  \ least bricks. \n\n\nThe brick wall is represented by a list of rows. Each row\
  \ is a list of integers representing the width of each brick in this row from left\
  \ to right. \n\n\nIf your line go through the edge of a brick, then the brick is\
  \ not considered as crossed. You need to find out how to draw the line to cross\
  \ the least bricks and return the number of crossed bricks. \n\nYou cannot draw\
  \ a line just along one of the two vertical edges of the wall, in which case the\
  \ line will obviously cross no bricks. \n\nExample:\n\nInput: \n[[1,2,2,1],\n [3,1,2],\n\
  \ [1,3,2],\n [2,4],\n [3,1,2],\n [1,3,1,1]]\nOutput: 2\nExplanation: \n\n\n\n\n\
  Note:\n\nThe width sum of bricks in different rows are the same and won't exceed\
  \ INT_MAX.\nThe number of bricks in each row is in range [1,10,000]. The height\
  \ of wall is in range [1,10,000]. Total number of bricks of the wall won't exceed\
  \ 20,000."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def least_bricks (wall : List (List Nat)) : Nat := sorry\n\n\n\n\
  \n\n\n\ntheorem least_bricks_identical_rows (n : Nat)\n  (h : n > 0) :\n  least_bricks\
  \ (List.replicate n [1, 1]) = 0 := sorry\n"
"vc-theorems": "theorem least_bricks_empty :\n  least_bricks [] = 0 := sorry\n\n/--\n\
  info: 2\n-/\n#guard_msgs in\n#eval least_bricks [[1, 2, 2, 1], [3, 1, 2], [1, 3,\
  \ 2], [2, 4], [3, 1, 2], [1, 3, 1, 1]]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval\
  \ least_bricks []\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval least_bricks [[5],\
  \ [5], [5]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
