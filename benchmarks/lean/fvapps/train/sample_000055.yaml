"vc-description": "A penguin Rocher has $n$ sticks. He has exactly one stick with\
  \ length $i$ for all $1 \\le i \\le n$.\n\nHe can connect some sticks. If he connects\
  \ two sticks that have lengths $a$ and $b$, he gets one stick with length $a + b$.\
  \ Two sticks, that were used in the operation disappear from his set and the new\
  \ connected stick appears in his set and can be used for the next connections.\n\
  \nHe wants to create the maximum number of sticks that have the same length. It\
  \ is not necessary to make all sticks have the same length, some sticks can have\
  \ the other length. How many sticks with the equal length he can create?\n\n\n-----Input-----\n\
  \nThe input consists of multiple test cases. The first line contains a single integer\
  \ $t$ ($1 \\le t \\le 1000$) — the number of test cases. Next $t$ lines contain\
  \ descriptions of test cases.\n\nFor each test case, the only line contains a single\
  \ integer $n$ ($1 \\le n \\le 10^{9}$).\n\n\n-----Output-----\n\nFor each test case,\
  \ print a single integer  — the answer to the problem.\n\n\n-----Example-----\n\
  Input\n4\n1\n2\n3\n4\n\nOutput\n1\n1\n2\n2\n\n\n\n-----Note-----\n\nIn the third\
  \ case, he can connect two sticks with lengths $1$ and $2$ and he will get one stick\
  \ with length $3$. So, he will have two sticks with lengths $3$.\n\nIn the fourth\
  \ case, he can connect two sticks with lengths $1$ and $3$ and he will get one stick\
  \ with length $4$. After that, he will have three sticks with lengths $\\{2, 4,\
  \ 4\\}$, so two sticks have the same length, and one stick has the other length."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def max_equal_sticks (n : Nat) : Nat := sorry\n\ntheorem max_equal_sticks_positive\
  \ (n : Nat) (h : n ≥ 1) : \n  let result := max_equal_sticks n\n  result = (n +\
  \ 1) / 2 ∧ result ≤ n ∧ result ≥ 1 := sorry\n"
"vc-theorems": "theorem max_equal_sticks_monotonic (n : Nat) (h : n ≥ 1) :\n  max_equal_sticks\
  \ n ≤ max_equal_sticks (n + 1) := sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval\
  \ max_equal_sticks 1\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval max_equal_sticks\
  \ 3\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval max_equal_sticks 4\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
