"vc-description": "Given a square array of integers A, we want the minimum sum of\
  \ a falling path through A.\nA falling path starts at any element in the first row,\
  \ and chooses one element from each row.  The next row's choice must be in a column\
  \ that is different from the previous row's column by at most one.\n \nExample 1:\n\
  Input: [[1,2,3],[4,5,6],[7,8,9]]\nOutput: 12\nExplanation: \nThe possible falling\
  \ paths are:\n\n\n[1,4,7], [1,4,8], [1,5,7], [1,5,8], [1,5,9]\n[2,4,7], [2,4,8],\
  \ [2,5,7], [2,5,8], [2,5,9], [2,6,8], [2,6,9]\n[3,5,7], [3,5,8], [3,5,9], [3,6,8],\
  \ [3,6,9]\n\nThe falling path with the smallest sum is [1,4,7], so the answer is\
  \ 12.\n \nConstraints:\n\n1 <= A.length == A[0].length <= 100\n-100 <= A[i][j] <=\
  \ 100"
"vc-preamble": "import Imports.AllImports\n\ndef Matrix (α : Type) := List (List α)\n\
  \ndef List.sum (xs : List Int) : Int := \n  match xs with\n  | [] => 0\n  | (x::xs)\
  \ => x + xs.sum\n\n\ndef minFallingPathSum (matrix : Matrix Int) : Int :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isValidMatrix (matrix : Matrix Int) : Bool :=\n  match matrix\
  \ with\n  | [] => false\n  | r::_ => let n := r.length\n            matrix.all (fun\
  \ row => row.length == n)\n"
"vc-theorems": "theorem min_falling_path_sum_bounded_by_row_extremes {matrix : Matrix\
  \ Int} \n  (h : isValidMatrix matrix = true) :\n  minFallingPathSum matrix ≤ (matrix.map\
  \ (fun row => row.maximum?.getD 0)).sum ∧ \n  minFallingPathSum matrix ≥ (matrix.map\
  \ (fun row => row.minimum?.getD 0)).sum :=\nsorry\n\n\ntheorem single_column_matrix_sum\
  \ {matrix : Matrix Int}\n  (h1 : matrix.all (fun row => row.length = 1) = true)\n\
  \  (h2 : matrix.length > 0) :\n  minFallingPathSum matrix = (matrix.map (fun row\
  \ => row.head!)).sum :=\nsorry\n\n\ntheorem falling_path_bounded_by_first_last_rows\
  \ {matrix : Matrix Int}\n  (h : isValidMatrix matrix = true) \n  (h2 : matrix.length\
  \ > 0) :\n  minFallingPathSum matrix ≥ \n    (matrix.head!.minimum?.getD 0) + \n\
  \    (matrix.tail.map (fun row => row.minimum?.getD 0)).sum ∧\n  minFallingPathSum\
  \ matrix ≤ \n    (matrix.head!.maximum?.getD 0) + \n    (matrix.dropLast.tail.map\
  \ (fun row => row.maximum?.getD 0)).sum +\n    (matrix.getLast?.getD []).maximum?.getD\
  \ 0 :=\nsorry\n\n/--\ninfo: 12\n-/\n#guard_msgs in\n#eval min_falling_path_sum [[1,\
  \ 2, 3], [4, 5, 6], [7, 8, 9]]\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval min_falling_path_sum\
  \ [[1]]\n\n/--\ninfo: 13\n-/\n#guard_msgs in\n#eval min_falling_path_sum [[2, 1,\
  \ 3], [6, 5, 4], [7, 8, 9]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
