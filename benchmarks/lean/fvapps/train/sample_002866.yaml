"vc-description": "Simple transposition is a basic and simple cryptography technique.\
  \ We make 2 rows and put first a letter in the Row 1, the second in the Row 2, third\
  \ in Row 1 and so on until the end. Then we put the text from Row 2 next to the\
  \ Row 1 text and thats it.\n\nComplete the function that receives a string and encrypt\
  \ it with this simple transposition.\n\n## Example\nFor example if the text to encrypt\
  \ is: `\"Simple text\"`, the 2 rows will be:\n\n\n\nRow 1\nS\nm\nl\n \ne\nt\n\n\n\
  Row 2\ni\np\ne\nt\nx\n \n\n\n\nSo the result string will be: `\"Sml etipetx\"`"
"vc-preamble": "import Imports.AllImports\n\ndef simple_transposition (s : String)\
  \ : String := sorry\ndef reverse_transposition (s : String) : String := sorry"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def stringTakeEveryNth (s : String) (start : Nat) : String := sorry\n\
  \ntheorem length_preserved (s : String) :\n  (simple_transposition s).length = s.length\
  \ := sorry\n\n\n"
"vc-theorems": "theorem empty_and_single_char (s : String) :\n  s.length ≤ 1 → simple_transposition\
  \ s = s := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
