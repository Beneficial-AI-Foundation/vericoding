"vc-description": "Each floating-point number should be formatted that only the first\
  \ two decimal places are returned. You don't need to check whether the input is\
  \ a valid number because only valid numbers are used in the tests.  \n\nDon't round\
  \ the numbers! Just cut them after two decimal places!\n```\nRight examples:  \n\
  32.8493 is 32.84  \n14.3286 is 14.32\n\nIncorrect examples (e.g. if you round the\
  \ numbers):  \n32.8493 is 32.85  \n14.3286 is 14.33\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def two_decimal_places (x : Float) : Float := sorry\n\ndef abs\
  \ (x : Float) : Float := \n  if x ≥ 0 then x else -x\n\n-- Theorem for correct truncation\
  \ at two decimal places"
"vc-theorems": "theorem two_decimal_places_truncates (x : Float) : \n  ¬ x.isNaN →\
  \ ¬ x.isInf → -1000000 ≤ x → x ≤ 1000000 →\n  two_decimal_places x = Float.floor\
  \ (x * 100) / 100 := sorry \n\n-- Theorem for sign preservation\n\ntheorem two_decimal_places_preserves_sign\
  \ (x : Float) :\n  ¬ x.isNaN → ¬ x.isInf → -1000000 ≤ x → x ≤ 1000000 → \n  0.01\
  \ ≤ abs x →\n  (0 < two_decimal_places x) = (0 < x) := sorry\n\n/--\ninfo: 10.12\n\
  -/\n#guard_msgs in\n#eval two_decimal_places 10.1289767789\n\n/--\ninfo: -7488.83\n\
  -/\n#guard_msgs in\n#eval two_decimal_places -7488.83485834983\n\n/--\ninfo: 4.65\n\
  -/\n#guard_msgs in\n#eval two_decimal_places 4.653725356\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
