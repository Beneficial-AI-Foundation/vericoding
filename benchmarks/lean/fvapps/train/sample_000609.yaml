"vc-description": "The Chef has prepared the appetizers in the shapes of letters to\
  \ spell a special message for the guests. There are n appetizers numbered from 0\
  \ to n-1 such that if the appetizers are arrayed in this order, they will display\
  \ the message. The Chef plans to display them in this order on a table that can\
  \ be viewed by all guests as they enter. The appetizers will only be served once\
  \ all guests are seated.\n\nThe appetizers are not necessarily finished in the same\
  \ order as they are numbered. So, when an appetizer is finished the Chef will write\
  \ the number on a piece of paper and place it beside the appetizer on a counter\
  \ between the kitchen and the restaurant. A server will retrieve this appetizer\
  \ and place it in the proper location according to the number written beside it.\n\
  \nThe Chef has a penchant for binary numbers. The number of appetizers created is\
  \ a power of 2, say n = 2k. Furthermore, he has written the number of the appetizer\
  \ in binary with exactly k bits. That is, binary numbers with fewer than k bits\
  \ are padded on the left with zeros so they are written with exactly k bits.\n\n\
  Unfortunately, this has unforseen complications. A binary number still \"looks\"\
  \ binary when it is written upside down. For example, the binary number \"0101\"\
  \ looks like \"1010\" when read upside down and the binary number \"110\" looks\
  \ like \"011\" (the Chef uses simple vertical lines to denote a 1 bit). The Chef\
  \ didn't realize that the servers would read the numbers upside down so he doesn't\
  \ rotate the paper when he places it on the counter. Thus, when the server picks\
  \ up an appetizer they place it the location indexed by the binary number when it\
  \ is read upside down.\n\nYou are given the message the chef intended to display\
  \ and you are to display the message that will be displayed after the servers move\
  \ all appetizers to their locations based on the binary numbers they read.\n\n-----Input-----\n\
  \nThe first line consists of a single integer T ≤ 25 indicating the number of test\
  \ cases to follow. Each test case consists of a single line beginning with an integer\
  \ 1 ≤ k ≤ 16 followed by a string of precisely 2k characters. The integer and the\
  \ string are separated by a single space. The string has no spaces and is composed\
  \ only of lower case letters from `a` to `z`.\n\n\n-----Output-----\n\nFor each\
  \ test case you are to output the scrambled message on a single line.\n\n\n-----Example-----\n\
  Input:\n2\n2 chef\n4 enjoyourapplepie\n\nOutput:\ncehf\neayejpuinpopolre"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def scramble_message (step : Nat) (input : String) : String :=\n\
  \  sorry\n"
"vc-theorems": "theorem scramble_message_fixed_chef :\n  scramble_message 2 \"chef\"\
  \ = \"cehf\" :=\nsorry\n\n\ntheorem scramble_message_fixed_pie :\n  scramble_message\
  \ 4 \"enjoyourapplepie\" = \"eayejpuinpopolre\" := \nsorry\n\n\ntheorem scramble_message_fixed_abcd\
  \ :\n  scramble_message 2 \"abcd\" = \"acbd\" :=\nsorry \n\n\ntheorem scramble_message_fixed_abcdefgh\
  \ :\n  scramble_message 3 \"abcdefgh\" = \"aecgbfdh\" :=\nsorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
