"vc-description": "You visit a doctor on a date given in the format $yyyy:mm:dd$.\
  \ Your doctor suggests you to take pills every alternate day starting from that\
  \ day. You being a forgetful person are pretty sure won’t be able to remember the\
  \ last day you took the medicine and would end up in taking  the medicines on wrong\
  \ days. \nSo you come up with the idea of taking medicine on the dates whose day\
  \ is odd or even depending on whether $dd$ is odd or even. Calculate the number\
  \ of pills you took on right time before messing up for the first time.\n\n-----Note:-----\n\
  Every year that is exactly divisible by four is a leap year, except for years that\
  \ are exactly divisible by 100; the centurial years that are exactly divisible by\
  \ 400 are still leap years. For example, the year 1900 is not a leap year; the year\
  \ 2000 is a leap year.\n\n-----Input:-----\n- First line will contain $T$, number\
  \ of testcases. Then the testcases follow. \n- Each testcase contains of a single\
  \ line of input, in the format $yyyy:mm:dd$\n\n-----Output:-----\nFor each testcase,\
  \ output in a single line the required answer.\n\n-----Constraints-----\n- $ 1 \\\
  leq T \\leq 1000 $\n- $ 1900 \\leq yyyy \\leq 2038 $\n- $yyyy:mm:dd$ is a valid\
  \ date\n\n-----Sample Input:-----\n1\n2019:03:31\n\n-----Sample Output:-----\n1\n\
  \n-----EXPLANATION:-----\nYou can take pill on the right day only on 31st March.\
  \ Next you will take it on 1st April which is not on the alternate day."
"vc-preamble": "import Imports.AllImports\n\ndef isLeapYear (year : Int) : Bool :=\n\
  \  sorry\n\n\ndef isValidDate (year month day : Int) : Bool :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def countCorrectPills (dateStr : String) : Int :=\n  sorry\n"
"vc-theorems": "theorem valid_date_count (year month day : Int) :\n  1 ≤ year ∧ year\
  \ ≤ 9999 →\n  1 ≤ month ∧ month ≤ 12 →\n  1 ≤ day ∧ day ≤ 31 →\n  isValidDate year\
  \ month day →\n  let result := countCorrectPills s!\"{year}:{month}:{day}\"\n  result\
  \ ≥ 1 :=\nsorry\n\n\ntheorem leap_year_feb29_count (year : Int) :\n  1 ≤ year ∧\
  \ year ≤ 9999 →\n  isLeapYear year →\n  let result := countCorrectPills s!\"{year}:02:29\"\
  \n  result ≥ 1 :=\nsorry\n\n\ntheorem thirty_day_months_count (year month day :\
  \ Int) :\n  1 ≤ year ∧ year ≤ 9999 →\n  (month = 4 ∨ month = 6 ∨ month = 9 ∨ month\
  \ = 11) →\n  1 ≤ day ∧ day ≤ 30 →\n  isValidDate year month day →\n  let result\
  \ := countCorrectPills s!\"{year}:{month}:{day}\"\n  result ≥ 1 :=\nsorry\n\n\n\
  theorem thirtyone_day_months_count (year month day : Int) :\n  1 ≤ year ∧ year ≤\
  \ 9999 →\n  (month = 1 ∨ month = 3 ∨ month = 5 ∨ month = 7 ∨ month = 8 ∨ month =\
  \ 10 ∨ month = 12) →\n  1 ≤ day ∧ day ≤ 31 →\n  isValidDate year month day →\n \
  \ let result := countCorrectPills s!\"{year}:{month}:{day}\"\n  result ≥ 1 :=\n\
  sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval count_correct_pills \"2019:03:31\"\
  \n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval count_correct_pills \"2020:02:28\"\n\
  \n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval count_correct_pills \"2000:12:31\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
