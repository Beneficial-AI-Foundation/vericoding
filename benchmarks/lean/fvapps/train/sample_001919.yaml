"vc-description": "The Little Elephant has an integer a, written in the binary notation.\
  \ He wants to write this number on a piece of paper.\n\nTo make sure that the number\
  \ a fits on the piece of paper, the Little Elephant ought to delete exactly one\
  \ any digit from number a in the binary record. At that a new number appears. It\
  \ consists of the remaining binary digits, written in the corresponding order (possible,\
  \ with leading zeroes).\n\nThe Little Elephant wants the number he is going to write\
  \ on the paper to be as large as possible. Help him find the maximum number that\
  \ he can obtain after deleting exactly one binary digit and print it in the binary\
  \ notation.\n\n\n-----Input-----\n\nThe single line contains integer a, written\
  \ in the binary notation without leading zeroes. This number contains more than\
  \ 1 and at most 10^5 digits.\n\n\n-----Output-----\n\nIn the single line print the\
  \ number that is written without leading zeroes in the binary notation — the answer\
  \ to the problem.\n\n\n-----Examples-----\nInput\n101\n\nOutput\n11\n\nInput\n110010\n\
  \nOutput\n11010\n\n\n\n-----Note-----\n\nIn the first sample the best strategy is\
  \ to delete the second digit. That results in number 11_2 = 3_10.\n\nIn the second\
  \ sample the best strategy is to delete the third or fourth digits — that results\
  \ in number 11010_2 = 26_10."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_max_binary_after_delete (binary : String) : String :=\
  \ sorry\n\ndef stringToBinaryNat (s : String) : Nat := sorry\n"
"vc-theorems": "theorem result_is_valid_binary (binary : String) \n  (h : binary.length\
  \ > 0)\n  (h2 : ∀ c ∈ binary.data, c = '0' ∨ c = '1') :\n  let result := find_max_binary_after_delete\
  \ binary\n  ∀ c ∈ result.data, c = '0' ∨ c = '1' ∧ result.length > 0 := sorry\n\n\
  \ntheorem result_not_greater_than_original (binary : String)\n  (h : binary.length\
  \ > 0)\n  (h2 : ∀ c ∈ binary.data, c = '0' ∨ c = '1') :\n  let result := find_max_binary_after_delete\
  \ binary \n  stringToBinaryNat result ≤ stringToBinaryNat binary := sorry\n\n\n\
  theorem result_no_leading_zeros (binary : String)\n  (h : binary.length > 0) \n\
  \  (h2 : ∀ c ∈ binary.data, c = '0' ∨ c = '1') :\n  let result := find_max_binary_after_delete\
  \ binary\n  result = \"0\" ∨ result.get 0 = '1' := sorry\n\n\ntheorem edge_cases\
  \ :  \n  find_max_binary_after_delete \"0\" = \"0\" ∧\n  find_max_binary_after_delete\
  \ \"1\" = \"0\" ∧\n  find_max_binary_after_delete \"00\" = \"0\" := sorry\n\n/--\n\
  info: '11'\n-/\n#guard_msgs in\n#eval find_max_binary_after_delete \"101\"\n\n/--\n\
  info: '11010'\n-/\n#guard_msgs in\n#eval find_max_binary_after_delete \"110010\"\
  \n\n/--\ninfo: '1000'\n-/\n#guard_msgs in\n#eval find_max_binary_after_delete \"\
  10000\"\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
