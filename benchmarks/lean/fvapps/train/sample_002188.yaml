"vc-description": "A subsequence of a string S is a string that can be obtained by\
  \ deleting zero or more characters from S without changing the order of the remaining\
  \ characters.\nFor example, arc, artistic and (an empty string) are all subsequences\
  \ of artistic; abc and ci are not.\nYou are given a string A consisting of lowercase\
  \ English letters.\nFind the shortest string among the strings consisting of lowercase\
  \ English letters that are not subsequences of A.\nIf there are more than one such\
  \ string, find the lexicographically smallest one among them.\n\n-----Constraints-----\n\
  \ - 1 \\leq |A| \\leq 2 \\times 10^5\n - A consists of lowercase English letters.\n\
  \n-----Input-----\nInput is given from Standard Input in the following format:\n\
  A\n\n-----Output-----\nPrint the lexicographically smallest string among the shortest\
  \ strings consisting of lowercase English letters that are not subsequences of A.\n\
  \n-----Sample Input-----\natcoderregularcontest\n\n-----Sample Output-----\nb\n\n\
  The string atcoderregularcontest contains a as a subsequence, but not b."
"vc-preamble": "import Imports.AllImports\n\ndef find_shortest_non_subsequence (s\
  \ : String) : String :=\n  sorry\n\n\ndef is_subsequence (needle haystack : String)\
  \ : Bool :=\n  sorry\n\n\ndef generate_strings (length : Nat) : List String :=\n\
  \  sorry\n\n\ndef all_chars_in_range (s : String) : Bool :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def all_lower (s : String) : Bool :=\n  sorry\n"
"vc-theorems": "theorem result_is_valid_string (s : String) :\n  let result := find_shortest_non_subsequence\
  \ s\n  (result.length > 0) ∧ (all_lower result) := by\n  sorry\n\n\ntheorem result_is_minimal\
  \ (s : String) :\n  let result := find_shortest_non_subsequence s\n  ∀ n : Nat,\
  \ n < result.length → \n  ∀ possible : String, possible.length = n →\n  is_subsequence\
  \ possible s := by\n  sorry\n\n\ntheorem result_for_all_letters {s : String} :\n\
  \  s.length = 26 →\n  (∀ c : Char, c.isLower → s.contains c) → \n  find_shortest_non_subsequence\
  \ s = \"aa\" := by\n  sorry\n\n/--\ninfo: 'b'\n-/\n#guard_msgs in\n#eval find_shortest_non_subsequence\
  \ \"atcoderregularcontest\"\n\n/--\ninfo: 'aa'\n-/\n#guard_msgs in\n#eval find_shortest_non_subsequence\
  \ \"abcdefghijklmnopqrstuvwxyz\"\n\n/--\ninfo: 'aca'\n-/\n#guard_msgs in\n#eval\
  \ find_shortest_non_subsequence \"frqnvhydscshfcgdemurlfrutcpzhopfotpifgepnqjxupnskapziurswqazdwnwbgdhyktfyhqqxpoidfhjdakoxraiedxskywuepzfniuyskxiyjpjlxuqnfgmnjcvtlpnclfkpervxmdbvrbrdn\"\
  \n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
