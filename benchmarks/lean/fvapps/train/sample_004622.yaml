"vc-description": "Your task is to build a model^(1) which can predict y-coordinate.\n\
  You can pass tests if predicted y-coordinates are inside error margin.\n\nYou will\
  \ receive train set which should be used to build a model. \nAfter you build a model\
  \ tests will call function ```predict``` and pass x to it. \n\nError is going to\
  \ be calculated with RMSE.\n\n\n\nBlocked libraries: sklearn, pandas, tensorflow,\
  \ numpy, scipy\n\nExplanation\n[1] A mining model is created by applying an algorithm\
  \ to data, but it is more than an algorithm or a metadata container: it is a set\
  \ of data, statistics, and patterns that can be applied to new data to generate\
  \ predictions and make inferences about relationships."
"vc-preamble": "import Imports.AllImports\n\ndef predict (model : Datamining) (x :\
  \ Float) : Float :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def abs (x : Float) : Float :=\n  if x < 0 then -x else x\n"
"vc-theorems": "theorem fit_predict_linear_midpoint\n  (train_set : List (Int × Int))\n\
  \  (distinct_xs : ∀ (p1 p2 : Int × Int), p1 ∈ train_set → p2 ∈ train_set → p1.1\
  \ = p2.1 → p1 = p2)\n  (size_geq_2 : train_set.length ≥ 2)\n  (model : Datamining)\
  \ : let y1 := predict model 0; let y2 := predict model 1; let y3 := predict model\
  \ 0.5; let expected_y3 := y1 + (y2 - y1) * 0.5; abs (y3 - expected_y3) < 1e-10 :=\n\
  \  sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
