"vc-description": "You're a programmer in a SEO company. The SEO specialist of your\
  \ company gets the list of all project keywords everyday, then he looks for the\
  \ longest keys to analyze them.\n\nYou will get the list with keywords and must\
  \ write a simple function that returns the biggest search keywords and sorts them\
  \ in lexicographical order.\n\nFor instance you might get:\n```python\n'key1', 'key2',\
  \ 'key3', 'key n', 'bigkey2', 'bigkey1'\n```\n\nAnd your function should return:\n\
  ```python\n\"'bigkey1', 'bigkey2'\"\n```\n\nDon't forget to rate this kata! Thanks\
  \ :)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def the_biggest_search_keys : List String → String := sorry\n\n\
  theorem returns_string {keys : List String} :\n  ∃ s : String, the_biggest_search_keys\
  \ keys = s := sorry\n"
"vc-theorems": "theorem empty_input_returns_empty {keys : List String} :\n  keys =\
  \ [] → the_biggest_search_keys keys = \"''\" := sorry\n\n\ntheorem basic_properties\
  \ {keys : List String} (h : keys ≠ []) :\n  let result := the_biggest_search_keys\
  \ keys\n  let max_len := List.foldl (fun acc k => max acc k.length) 0 keys\n  let\
  \ result_list := (result.splitOn \",\").map String.trim\n  result ≠ \"''\" →\n \
  \ (∀ k ∈ result_list, k.startsWith \"'\" ∧ k.endsWith \"'\") ∧\n  result_list ≠\
  \ [] := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
