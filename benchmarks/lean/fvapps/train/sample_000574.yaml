"vc-description": "Chef has an array A consisting of N integers (1-based indexing).\
  \ He asks you to perform the following operation M times:\n\n\tfor i = 2 to N:\n\
  \t\tAi = Ai + Ai-1\n\nYour task is to find the xth element of the array (i.e., Ax)\
  \ after performing the above operation M times. As the answer could be large, please\
  \ output it modulo 109 + 7.\n\n-----Input-----\n- The first line of input contains\
  \ an integer T denoting the number of test cases.\n- The first line of each test\
  \ case contains three space-separated integers — N, x, and M — denoting the size\
  \ of the array, index of the element you need to find, and the amount of times you\
  \ need to repeat operation before finding the element, respectively. The second\
  \ line contains N space-separated integers A1, A2, …, AN.\n\n-----Output-----\n\
  For each test case, output a single line containing one integer: Ax modulo 109 +\
  \ 7. \n\n-----Constraints-----\n- 1 ≤ T ≤ 10\n- 1 ≤ x ≤ N ≤ 105\n- 1 ≤ M ≤ 1018\
  \ \n- 1 ≤ Ai  ≤ 1018\n\n-----Subtasks-----Subtask 1 (8 points):\n- 1 ≤ x ≤ min{2,\
  \ N}Subtask 2 (24 points):\n- 1 ≤ N * M ≤ 106Subtask 3 (68 points):  No additional\
  \ constraints\n\n-----Example-----\nInput:\n2\n3 2 3\n1 2 3\n3 3 3 \n1 2 3\n\nOutput:\n\
  5\n15\n\n-----Explanation-----\nValues in the array A:\n- Before the operations:\
  \ [1, 2, 3]\n- After the first operation: [1, 3, 6]\n- After the second operation:\
  \ [1, 4, 10]\n- After the third operation: [1, 5, 15]\n\nSince input file can be\
  \ fairly large (about 8 MB), it's recommended to use fast I/O (for example, in C++,\
  \ use scanf/printf instead of cin/cout)."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_array_ops (n x m : Nat) (arr : List Nat) : Nat :=\n \
  \ sorry\n\n\n"
"vc-theorems": "theorem solve_array_ops_preserves_input (n x m : Nat) (arr : List\
  \ Nat)\n  (h1 : 1 ≤ n ∧ n ≤ 100)\n  (h2 : 1 ≤ x ∧ x ≤ n)\n  (h3 : 0 ≤ m ∧ m ≤ 100)\
  \ :\n  let arr' := arr\n  solve_array_ops n x m arr = solve_array_ops n x m arr'\
  \ :=\nsorry\n\n\ntheorem solve_array_ops_zero_m (n x : Nat) (arr : List Nat)\n \
  \ (h1 : 1 ≤ n ∧ n ≤ 100) \n  (h2 : 1 ≤ x ∧ x ≤ n)\n  (h3 : arr.length ≥ n) :\n \
  \ solve_array_ops n x 0 arr = arr[x-1]! :=\nsorry\n\n\ntheorem solve_array_ops_equivalent_ops\
  \ (n x m : Nat) (arr : List Nat)\n  (h1 : 1 ≤ n ∧ n ≤ 100)\n  (h2 : 1 ≤ x ∧ x ≤\
  \ n)\n  (h3 : 0 ≤ m ∧ m ≤ 100) :\n  solve_array_ops n x m arr = solve_array_ops\
  \ n x (m + 0) arr :=\nsorry\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval solve_array_ops\
  \ 3 2 3 [1, 2, 3]\n\n/--\ninfo: 15\n-/\n#guard_msgs in\n#eval solve_array_ops 3\
  \ 3 3 [1, 2, 3]\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval solve_array_ops 2 2 2\
  \ [1, 1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
