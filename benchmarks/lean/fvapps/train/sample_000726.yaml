"vc-description": "You want to build a temple for snakes. The temple will be built\
  \ on a mountain range, which can be thought of as n blocks, where height of i-th\
  \ block is given by hi. The temple will be made on a consecutive section of the\
  \ blocks and its height should start from 1 and increase by exactly 1 each time\
  \ till some height and then decrease by exactly 1 each time to height 1, \ni.e.\
  \ a consecutive section of 1, 2, 3, .. x-1, x, x-1, x-2, .., 1 can correspond to\
  \ a temple. Also, heights of all the blocks other than of the temple should have\
  \ zero height, so that the temple is visible to people who view it from the left\
  \ side or right side.\nYou want to construct a temple. For that, you can reduce\
  \ the heights of some of the blocks. In a single operation, you can reduce the height\
  \ of a block by 1 unit. Find out minimum number of operations required to build\
  \ a temple.\n\n-----Input-----\nThe first line of the input contains an integer\
  \ T denoting the number of test cases. The description of T test cases follows.\n\
  The first line of each test case contains an integer n.\nThe next line contains\
  \ n integers, where the i-th integer denotes hi\n\n-----Output-----\nFor each test\
  \ case, output a new line with an integer corresponding to the answer of that testcase.\n\
  \n-----Constraints-----\n- 1 ≤ T ≤ 10\n- 2 ≤ n ≤ 105\n- 1 ≤ hi ≤ 109\n\n-----Example-----\n\
  Input\n3\n3\n1 2 1\n4\n1 1 2 1\n5\n1 2 6 2 1\n\nOutput\n0\n1\n3\n\n-----Explanation-----\n\
  Example 1. The entire mountain range is already a temple. So, there is no need to\
  \ make any operation.\nExample 2. If you reduce the height of the first block to\
  \ 0. You get 0 1 2 1. The blocks 1, 2, 1 form a temple. So, the answer is 1.\nExample\
  \ 3. One possible temple can be 1 2 3 2 1. It requires 3 operations to build. This\
  \ is the minimum amount you have to spend in order to build a temple."
"vc-preamble": "import Imports.AllImports\n\ndef min_temple_operations (n : Nat) (heights\
  \ : List Nat) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def list_sum : List Nat → Nat \n  | [] => 0\n  | (h :: t) => h\
  \ + list_sum t\n"
"vc-theorems": "theorem min_temple_operations_nonnegative (n : Nat) (heights : List\
  \ Nat) :\n  heights.length = n →\n  min_temple_operations n heights ≥ 0 :=\nsorry\n\
  \n\ntheorem min_temple_operations_preserves_input (n : Nat) (heights : List Nat)\
  \ :\n  heights.length = n →\n  heights = heights :=\nsorry\n\n\ntheorem min_temple_operations_bounded_by_sum\
  \ (n : Nat) (heights : List Nat) :\n  heights.length = n →\n  min_temple_operations\
  \ n heights ≤ list_sum heights :=\nsorry\n\n\ntheorem min_temple_operations_perfect\
  \ (heights : List Nat) :\n  heights = [1,2,3,2,1] →\n  min_temple_operations 5 heights\
  \ = 0 :=\nsorry\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval min_temple_operations\
  \ 3 [1, 2, 1]\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval min_temple_operations 4\
  \ [1, 1, 2, 1]\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval min_temple_operations\
  \ 5 [1, 2, 6, 2, 1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
