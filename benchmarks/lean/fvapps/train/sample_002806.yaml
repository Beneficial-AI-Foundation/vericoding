"vc-description": "For an integer ```k``` rearrange all the elements of the given\
  \ array in such way, that:\n\nall elements that are less than ```k``` are placed\
  \ before elements that are not less than ```k```;\nall elements that are less than\
  \ ```k``` remain in the same order with respect to each other;\nall elements that\
  \ are not less than ```k``` remain in the same order with respect to each other.\n\
  \nFor ```k = 6``` and ```elements = [6, 4, 10, 10, 6]```, the output should be\n\
  ```splitByValue(k, elements) = [4, 6, 10, 10, 6]```.\n\nFor ```k``` = 5 and ```elements\
  \ = [1, 3, 5, 7, 6, 4, 2]```, the output should be\n```splitByValue(k, elements)\
  \ = [1, 3, 4, 2, 5, 7, 6]```.\n\nS: codefights.com"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def splitByValue (k : Int) (elements : List Int) : List Int :=\n\
  \  sorry\n"
"vc-theorems": "theorem preserves_elements (k : Int) (elements : List Int) :\n  let\
  \ result := splitByValue k elements\n  result.length = elements.length ∧\n  ∀ x,\
  \ (result.count x) = (elements.count x) :=\n  sorry\n\n\ntheorem correct_partitioning\
  \ (k : Int) (elements : List Int) :\n  let result := splitByValue k elements\n \
  \ let splitPoint := (List.filter (· < k) result).length\n  (List.take splitPoint\
  \ result).all (· < k) ∧\n  (List.drop splitPoint result).all (· ≥ k) :=\n  sorry\n\
  \n\ntheorem maintains_relative_order (k : Int) (elements : List Int) :\n  let result\
  \ := splitByValue k elements\n  List.filter (· < k) result = List.filter (· < k)\
  \ elements ∧ \n  List.filter (· ≥ k) result = List.filter (· ≥ k) elements :=\n\
  \  sorry\n\n/--\ninfo: [4, 6, 10, 10, 6]\n-/\n#guard_msgs in\n#eval split_by_value\
  \ 6 [6, 4, 10, 10, 6]\n\n/--\ninfo: [1, 3, 4, 2, 5, 7, 6]\n-/\n#guard_msgs in\n\
  #eval split_by_value 5 [1, 3, 5, 7, 6, 4, 2]\n\n/--\ninfo: [3, 2, 8, 3, 2, 1]\n\
  -/\n#guard_msgs in\n#eval split_by_value 1 [3, 2, 8, 3, 2, 1]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
