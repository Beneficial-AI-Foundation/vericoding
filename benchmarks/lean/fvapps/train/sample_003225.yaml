"vc-description": "Divisors of 42 are : 1, 2, 3, 6, 7, 14, 21, 42.\nThese divisors\
  \ squared are: 1, 4, 9, 36, 49, 196, 441, 1764.\nThe sum of the squared divisors\
  \ is 2500 which is 50 * 50, a square!\n\nGiven two integers m, n (1 <= m <= n) we\
  \ want to find all integers \nbetween m and n whose sum of squared divisors is itself\
  \ a square.\n42 is such a number.\n\nThe result will be an array of arrays or of\
  \ tuples (in C an array of Pair) or a string, each subarray having two elements,\n\
  first the number whose squared divisors is a square and then the sum\nof the squared\
  \ divisors.\n\n#Examples:\n```\nlist_squared(1, 250) --> [[1, 1], [42, 2500], [246,\
  \ 84100]]\nlist_squared(42, 250) --> [[42, 2500], [246, 84100]]\n```\n\nThe form\
  \ of the examples may change according to the language, see `Example Tests:` for\
  \ more details.\n\n**Note**\n\nIn Fortran - as in any other language - the returned\
  \ string is not permitted to contain any redundant trailing whitespace: you can\
  \ use dynamically allocated character strings."
"vc-preamble": "import Imports.AllImports\n\ndef list_squared (m n : Nat) : List (Nat\
  \ × Nat) := sorry\n\ntheorem list_squared_result_valid (m n : Nat) (h : 0 < m) (h2\
  \ : 0 < n) :\n  let result := list_squared m n\n  ∀ pair ∈ result,\n    ∃ (a b :\
  \ Nat), pair = (a, b) ∧ \n    m ≤ a ∧ a ≤ n := sorry\n\n\ndef sumOfSquaredDivisors\
  \ (n : Nat) : Nat := sorry\n\ntheorem list_squared_divisors_sum (m n : Nat) (h :\
  \ 0 < m) (h2 : 0 < n) :\n  let result := list_squared m n\n  ∀ pair ∈ result, pair.2\
  \ = sumOfSquaredDivisors pair.1 := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isPerfectSquare (n : Nat) : Prop := \n  ∃ k : Nat, k * k =\
  \ n\n"
"vc-theorems": "theorem list_squared_is_sorted (m n : Nat) (h : 0 < m) (h2 : 0 < n)\
  \ :\n  let result := list_squared m n\n  ∀ i, i + 1 < result.length → \n    (result[i]'sorry).1\
  \ < (result[i+1]'sorry).1 := sorry\n\n\ntheorem list_squared_perfect_squares (m\
  \ n : Nat) (h : 0 < m) (h2 : 0 < n) :\n  let result := list_squared m n\n  ∀ pair\
  \ ∈ result, isPerfectSquare pair.2 := sorry\n\n\ntheorem list_squared_single_point\
  \ (n : Nat) (h : 0 < n) :\n  let result := list_squared n n\n  result = [] ∨ result\
  \ = [(n, sumOfSquaredDivisors n)] := sorry\n\n\ntheorem list_squared_empty (m n\
  \ : Nat) :\n  m > n → list_squared m n = [] := sorry\n\n/--\ninfo: [[1, 1], [42,\
  \ 2500], [246, 84100]]\n-/\n#guard_msgs in\n#eval list_squared 1 250\n\n/--\ninfo:\
  \ [[42, 2500], [246, 84100]]\n-/\n#guard_msgs in\n#eval list_squared 42 250\n\n\
  /--\ninfo: [[287, 84100]]\n-/\n#guard_msgs in\n#eval list_squared 250 500\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
