"vc-description": "I'm afraid you're in a rather unfortunate situation. You've injured\
  \ your leg, and are unable to walk, and a number of zombies are shuffling towards\
  \ you, intent on eating your brains. Luckily, you're a crack shot, and have your\
  \ trusty rifle to hand.\n\nThe zombies start at `range` metres, and move at 0.5\
  \ metres per second. Each second, you first shoot one zombie, and then the remaining\
  \ zombies shamble forwards another 0.5 metres.\n\nIf any zombies manage to get to\
  \ 0 metres, you get eaten. If you run out of ammo before shooting all the zombies,\
  \ you'll also get eaten. To keep things simple, we can ignore any time spent reloading.\n\
  \nWrite a function that accepts the total number of zombies, a range in metres,\
  \ and the number of bullets you have.\n\nIf you shoot all the zombies, return \"\
  You shot all X zombies.\"\nIf you get eaten before killing all the zombies, and\
  \ before running out of ammo, return \"You shot X zombies before being eaten: overwhelmed.\"\
  \nIf you run out of ammo before shooting all the zombies, return \"You shot X zombies\
  \ before being eaten: ran out of ammo.\"\n\n(If you run out of ammo at the same\
  \ time as the remaining zombies reach you, return \"You shot X zombies before being\
  \ eaten: overwhelmed.\".)\n\nGood luck! (I think you're going to need it.)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def zombieShootout (zombies ammo : Int) (distance : Float) : String\
  \ := sorry \n\ndef containsStr (s₁ s₂ : String) : Bool := \n  let s₁chars := s₁.data\n\
  \  let s₂chars := s₂.data\n  sorry\n"
"vc-theorems": "theorem zombieShootout_output_contains_zombies (zombies ammo : Int)\
  \ (distance : Float)\n  (h1 : zombies ≥ 0) (h2 : distance ≥ 0) (h3 : ammo ≥ 0) :\
  \ \n  containsStr (zombieShootout zombies ammo distance).toLower \"zombies\" = true\
  \ := sorry\n\n\ntheorem zombieShootout_zero_zombies (ammo : Int) (distance : Float)\
  \ \n  (h1 : distance ≥ 0) (h2 : ammo ≥ 0) :\n  zombieShootout 0 ammo distance =\
  \ \"You shot all 0 zombies.\" := sorry\n\n\ntheorem zombieShootout_zero_distance\
  \ (zombies ammo : Int) (distance : Float)\n  (h1 : zombies ≥ 0) (h2 : distance ≤\
  \ 0) (h3 : ammo ≥ 0) :\n  (zombieShootout zombies ammo distance).endsWith \"overwhelmed.\"\
  \ := sorry\n\n\ntheorem zombieShootout_zero_ammo (zombies : Int) (distance : Float)\n\
  \  (h1 : zombies ≥ 0) (h2 : distance ≥ 0) :\n  (zombieShootout zombies 0 distance).endsWith\
  \ \"ran out of ammo.\" := sorry\n\n\ntheorem zombieShootout_all_shot (zombies ammo\
  \ : Int) (distance : Float)\n  (h1 : zombies ≥ 0) (h2 : distance ≥ Float.ofInt zombies\
  \ / 2) \n  (h3 : ammo ≥ zombies) (h4 : distance ≥ 0) (h5 : ammo ≥ 0) :\n  containsStr\
  \ (zombieShootout zombies ammo distance) \"all\" → \n  zombieShootout zombies ammo\
  \ distance = s!\"You shot all {zombies} zombies.\" := sorry\n\n\ntheorem zombieShootout_ran_out_ammo\
  \ (zombies ammo : Int) (distance : Float)\n  (h1 : zombies ≥ 0) (h2 : distance ≥\
  \ 0) (h3 : ammo ≥ 0)\n  (h4 : zombies > ammo) (h5 : distance > Float.ofInt ammo\
  \ / 2) :\n  (zombieShootout zombies ammo distance).endsWith \"ran out of ammo.\"\
  \ ∧\n  containsStr (zombieShootout zombies ammo distance) (toString ammo) := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
