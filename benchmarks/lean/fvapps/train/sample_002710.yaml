"vc-description": "Consider the array `[3,6,9,12]`. If we generate all the combinations\
  \ with repetition that sum to `12`, we get `5` combinations: `[12], [6,6], [3,9],\
  \ [3,3,6], [3,3,3,3]`. The length of the sub-arrays (such as `[3,3,3,3]` should\
  \ be less than or equal to the length of the initial array (`[3,6,9,12]`).  \n\n\
  Given an array of positive integers and a number `n`, count all combinations with\
  \ repetition of integers that sum to `n`. For example: \n```Haskell\nfind([3,6,9,12],12)\
  \ = 5.\n```\n\nMore examples in the test cases. \n\nGood luck!\n\nIf you like this\
  \ Kata, please try:\n\n[Array combinations](https://www.codewars.com/kata/59e66e48fc3c499ec5000103)\n\
  \n[Sum of prime-indexed elements](https://www.codewars.com/kata/59f38b033640ce9fc700015b)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find (arr : List Nat) (target : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem find_non_negative (arr : List Nat) (target : Nat) \n  (h :\
  \ ∀ x ∈ arr, 0 < x) (h2 : arr ≠ []) : \n  0 ≤ find arr target :=\nsorry\n\n\ntheorem\
  \ find_zero_target (arr : List Nat) \n  (h : ∀ x ∈ arr, 0 < x) (h2 : arr ≠ []) :\n\
  \  find arr 0 = 0 :=\nsorry\n\n\ntheorem find_small_target (arr : List Nat) (target\
  \ : Nat)\n  (h : ∀ x ∈ arr, 0 < x) (h2 : arr ≠ []) \n  (h3 : ∀ x ∈ arr, target <\
  \ x) :\n  find arr target = 0 :=\nsorry\n\n\ntheorem find_permutation_equivalent\
  \ (arr₁ arr₂ : List Nat) (target : Nat)\n  (h : ∀ x ∈ arr₁, 0 < x) (h2 : arr₁ ≠\
  \ [])\n  (h3 : List.length arr₁ = List.length arr₂) \n  (h4 : ∀ x, List.count x\
  \ arr₁ = List.count x arr₂) :\n  find arr₁ target = find arr₂ target :=\nsorry\n\
  \n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval find [1, 2, 3] 5\n\n/--\ninfo: 5\n-/\n\
  #guard_msgs in\n#eval find [3, 6, 9, 12] 12\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n\
  #eval find [1, 4, 5, 8] 8\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
