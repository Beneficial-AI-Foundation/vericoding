"vc-description": "The look and say sequence is a sequence in which each number is\
  \ the result of a \"look and say\" operation on the previous element.\n\nConsidering\
  \ for example the classical version startin with `\"1\"`: `[\"1\", \"11\", \"21,\
  \ \"1211\", \"111221\", ...]`. You can see that the second element describes the\
  \ first as `\"1(times number)1\"`, the third is `\"2(times number)1\"` describing\
  \ the second, the fourth is `\"1(times number)2(and)1(times number)1\"` and so on.\n\
  \nYour goal is to create a function which takes a starting string (not necessarily\
  \ the classical `\"1\"`, much less a single character start) and return the nth\
  \ element of the series.\n\n## Examples\n\n```python\nlook_and_say_sequence(\"1\"\
  , 1)   == \"1\"\nlook_and_say_sequence(\"1\", 3)   == \"21\"\nlook_and_say_sequence(\"\
  1\", 5)   == \"111221\"\nlook_and_say_sequence(\"22\", 10) == \"22\"\nlook_and_say_sequence(\"\
  14\", 2)  == \"1114\"\n```\nTrivia: `\"22\"` is the only element that can keep the\
  \ series constant."
"vc-preamble": "import Imports.AllImports\n\ndef isDigit (c : Char) : Bool := sorry\n\
  \ndef isNonZeroDigit (c : Char) : Bool := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def look_and_say_sequence (s : String) (n : Nat) : String := sorry\n\
  \ntheorem sequence_preserves_digits (s : String) (n : Nat) \n  (h : ∀ c ∈ s.data,\
  \ isNonZeroDigit c) :\n  ∀ c ∈ (look_and_say_sequence s n).data, isDigit c := sorry\n"
"vc-theorems": "theorem sequence_length_monotonic (s : String) (n : Nat)\n  (h : ∀\
  \ c ∈ s.data, isNonZeroDigit c) :\n  (look_and_say_sequence s n).length ≤ (look_and_say_sequence\
  \ s (n+1)).length := sorry  \n\n\ntheorem first_element_unchanged (s : String)\n\
  \  (h : ∀ c ∈ s.data, isNonZeroDigit c) :\n  look_and_say_sequence s 1 = s := sorry\n\
  \n\ntheorem repeating_digits_pattern (s : String)\n  (h : ∀ c ∈ s.data, isNonZeroDigit\
  \ c) :\n  let result := look_and_say_sequence s 2\n  ∀ i < result.length / 2,\n\
  \    ∃ (p1 p2 : String.Pos),\n    isNonZeroDigit (result.get p1) ∧ \n    isDigit\
  \ (result.get p2) := sorry\n\n\ntheorem known_repeating_sequence :\n  look_and_say_sequence\
  \ \"22\" 9 = look_and_say_sequence \"22\" 10 := sorry\n\n/--\ninfo: '1'\n-/\n#guard_msgs\
  \ in\n#eval look_and_say_sequence \"1\" 1\n\n/--\ninfo: '21'\n-/\n#guard_msgs in\n\
  #eval look_and_say_sequence \"1\" 3\n\n/--\ninfo: '111221'\n-/\n#guard_msgs in\n\
  #eval look_and_say_sequence \"1\" 5\n\n/--\ninfo: '22'\n-/\n#guard_msgs in\n#eval\
  \ look_and_say_sequence \"22\" 10\n\n/--\ninfo: '1114'\n-/\n#guard_msgs in\n#eval\
  \ look_and_say_sequence \"14\" 2\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
