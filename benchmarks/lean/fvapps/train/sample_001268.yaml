"vc-description": "The Little Elephant from the Zoo of Lviv has an array A that consists\
  \ of N positive integers. Let A[i] be the i-th number in this array (i = 1, 2, ...,\
  \ N).\n\nFind the minimal number x > 1 such that x is a divisor of all integers\
  \ from array A. More formally, this x should satisfy the following relations:\n\n\
  A[1] mod x = 0, A[2] mod x = 0, ..., A[N] mod x = 0,\n\nwhere mod stands for the\
  \ modulo operation. For example,  8 mod 3 = 2,  2 mod 2 = 0, 100 mod 5 = 0 and so\
  \ on. If such number does not exist, output -1.\n\n-----Input-----\n\nThe first\
  \ line of the input contains a single integer T, the number of test cases. T test\
  \ cases follow. The first line of each test case contains a single integer N, the\
  \ size of the array A for the corresponding test case. The second line contains\
  \ N space separated integers A[1], A[2], ..., A[N].\n\n-----Output-----\n\nFor each\
  \ test case output a single line containing the answer for the corresponding test\
  \ case.\n\n-----Constraints-----\n1 ≤ T ≤ 100000\n\n1 ≤ N ≤ 100000\n\nThe sum of\
  \ values of N in each test file does not exceed 100000\n\n1 ≤ A[i] ≤ 100000\n\n\
  -----Example-----\nInput:\n2\n3\n2 4 8\n3\n4 7 5\n\nOutput:\n2\n-1\n\n-----Explanation-----\n\
  Case 1. Clearly 2 is a divisor of each of the numbers 2, 4 and 8. Since 2 is the\
  \ least number greater than 1 then it is the answer.\n\nCase 2. Let's perform check\
  \ for several first values of x.\n\nx4 mod x7 mod x5 mod x20113112403154206415740584759475\n\
  \nAs we see each number up to 9 does not divide all of the numbers in the array.\
  \ Clearly all larger numbers also will fail to do this. So there is no such number\
  \ x > 1 and the answer is -1."
"vc-preamble": "import Imports.AllImports\n\ndef find_min_divisor (nums: List Nat)\
  \ : Int :=\n  sorry\n\n\ndef is_divides_all (d: Nat) (nums: List Nat) : Bool :=\n\
  \  sorry\n\n\ndef gcd (a b: Nat) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def list_gcd (nums: List Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem result_divides_all_numbers (nums: List Nat) :\n  let result\
  \ := find_min_divisor nums \n  result ≠ -1 → is_divides_all result.toNat nums =\
  \ true := by\n  sorry\n\n\ntheorem negative_one_means_no_common_divisor (nums: List\
  \ Nat) :\n  let result := find_min_divisor nums\n  result = -1 → list_gcd nums =\
  \ 1 := by\n  sorry\n\n\ntheorem result_is_minimal_divisor (nums: List Nat) :\n \
  \ let result := find_min_divisor nums\n  result ≠ -1 → \n  ∀ d: Nat, 2 ≤ d → d <\
  \ result.toNat → \n  is_divides_all d nums = false := by\n  sorry\n\n\ntheorem result_is_valid_number\
  \ (nums: List Nat) :\n  let result := find_min_divisor nums\n  result = -1 ∨ result\
  \ ≥ 2 := by\n  sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval find_min_divisor\
  \ [2, 4, 8]\n\n/--\ninfo: -1\n-/\n#guard_msgs in\n#eval find_min_divisor [4, 7,\
  \ 5]\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval find_min_divisor [12, 18, 24]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
