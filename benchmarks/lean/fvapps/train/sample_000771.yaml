"vc-description": "Chef's dog Snuffles has so many things to play with! This time\
  \ around, Snuffles has an array A containing N integers: A1, A2, ..., AN.\nBad news:\
  \ Snuffles only loves to play with an array in which all the elements are equal.\n\
  Good news: We have a mover of size D. ! \nA mover of size D is a tool which helps\
  \ to change arrays. Chef can pick two existing elements Ai and Aj from the array,\
  \ such that i + D = j and subtract 1 from one of these elements (the element should\
  \ have its value at least 1), and add 1 to the other element. In effect, a single\
  \ operation of the mover, moves a value of 1 from one of the elements to the other.\n\
  Chef wants to find the minimum number of times she needs to use the mover of size\
  \ D to make all the elements of the array A equal. Help her find this out.\n\n-----Input-----\n\
  - The first line of the input contains an integer T, denoting the number of test\
  \ cases. The description of T test cases follows.\n- The first line of each test\
  \ case contains two integers N and D, denoting the number of elements in the array\
  \ and the size of the mover. \n- The second line of each testcase contains N space-separated\
  \ integers: A1, A2, ..., AN, denoting the initial elements of the array. \n\n-----Output-----\n\
  - For each test case, output a single line containing the minimum number of uses\
  \ or -1 if it is impossible to do what Snuffles wants.\n\n-----Constraints-----\n\
  - 1 ≤ T ≤ 10\n- 2 ≤ N ≤ 105\n- 1 ≤ D < N\n- 1 ≤ Ai ≤ 109\n\n-----Subtasks-----\n\
  - Subtask 1 (30 points) : N ≤  103\n- Subtask 2 (70 points) : Original constraints\n\
  \n-----Example-----\nInput:\n3\n5 2\n1 4 5 2 3\n3 1\n1 4 1\n4 2\n3 4 3 5\n\nOutput:\n\
  3\n2\n-1\n\n-----Explanation-----\nTestcase 1:\nHere is a possible sequence of usages\
  \ of the mover:\n- Move 1 from A3 to A1\n- Move 1 from A3 to A1\n- Move 1 from A2\
  \ to A4\nAt the end, the array becomes (3, 3, 3, 3, 3), which Snuffles likes. And\
  \ you cannot achieve this in fewer moves. Hence the answer is 3.\nTestcase 2:\n\
  Here is a possible sequence of usages of the mover:\n- Move 1 from A2 to A1\n- Move\
  \ 1 from A2 to A3\nAt the end, the array becomes (2, 2, 2), which Snuffles likes.\
  \ And you cannot achieve this in fewer moves. Hence the answer is 2.\nTestcase 3:\n\
  It is impossible to make all the elements equal. Hence the answer is -1."
"vc-preamble": "import Imports.AllImports\n\ndef solve_snuffles_array (n d : Nat)\
  \ (arr : List Int) : Int :=\n  sorry\n\n\ndef verify_solution (n d: Nat) (arr :\
  \ List Int) : Bool :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def list_sum (xs : List Int) : Int :=\n  sorry\n"
"vc-theorems": "theorem snuffles_array_properties {n d : Nat} {arr : List Int}\n \
  \ (h1 : n > 0)\n  (h2 : d > 0) \n  (h3 : d ≤ n)\n  (h4 : arr.length = n) :\n  let\
  \ result := solve_snuffles_array n d arr\n  (result ≥ 0 → verify_solution n d arr\
  \ = true) ∧ \n  (result = -1 → \n    (∃ i : Nat, i < d ∧ \n      let group := (List.range\
  \ arr.length).filter (fun j => j % d = i)\n      let group_sum := list_sum (group.map\
  \ (fun j => arr.get! j))\n      let group_avg := group_sum / group.length\n    \
  \  group_avg ≠ (list_sum arr / arr.length))) :=\nsorry\n\n\ntheorem all_equal_array_zero\
  \ {n : Nat} {x : Int}\n  (h1 : n > 0) :\n  solve_snuffles_array n 1 (List.replicate\
  \ n x) = 0 :=\nsorry\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval solve_snuffles_array\
  \ 5 2 [1, 4, 5, 2, 3]\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval solve_snuffles_array\
  \ 3 1 [1, 4, 1]\n\n/--\ninfo: -1\n-/\n#guard_msgs in\n#eval solve_snuffles_array\
  \ 4 2 [3, 4, 3, 5]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
