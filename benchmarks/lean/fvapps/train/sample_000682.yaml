"vc-description": "You are given a sequence of N$N$ powers of an integer k$k$; let's\
  \ denote the i$i$-th of these powers by kAi$k^{A_i}$. You should partition this\
  \ sequence into two non-empty contiguous subsequences; each element of the original\
  \ sequence should appear in exactly one of these subsequences. In addition, the\
  \ product of (the sum of elements of the left subsequence) and (the sum of elements\
  \ of the right subsequence) should be maximum possible.\nFind the smallest position\
  \ at which you should split this sequence in such a way that this product is maximized.\n\
  \n-----Input-----\n- The first line of the input contains a single integer T$T$\
  \ denoting the number of test cases. The description of T$T$ test cases follows.\n\
  - The first line of each test case contains two space-separated integers N$N$ and\
  \ k$k$.\n- The second line contains N$N$ space-separated integers A1,A2,…,AN$A_1,\
  \ A_2, \\dots, A_N$.\n\n-----Output-----\nFor each test case, print a single line\
  \ containing one integer — the size of the left subsequence. If there is more than\
  \ one possible answer, print the smallest possible one.\n\n-----Constraints-----\n\
  - 1≤T≤10$1 \\le T \\le 10$\n- 2≤N≤105$2 \\le N \\le 10^5$\n- 2≤k≤109$2 \\le k \\\
  le 10^9$\n- 0≤Ai≤105$0 \\le A_i \\le 10^5$ for each valid i$i$\n\n-----Subtasks-----\n\
  Subtask #1 (30 points):\n- 2≤N≤1,000$2 \\le N \\le 1,000$\n- 0≤Ai≤1,000$0 \\le A_i\
  \ \\le 1,000$ for each valid i$i$\nSubtask #2 (70 points): original constraints\n\
  \n-----Example Input-----\n1\n5 2\n1 1 3 3 5\n\n-----Example Output-----\n4\n\n\
  -----Explanation-----\nExample case 1: The actual sequence of powers is [21,21,23,23,25]=[2,2,8,8,32]$[2^1,\
  \ 2^1, 2^3, 2^3, 2^5] = [2, 2, 8, 8, 32]$. The maximum product is 20⋅32=640$20 \\\
  cdot 32 = 640$. In the optimal solution, the sequence is partitioned into [2,2,8,8]$[2,\
  \ 2, 8, 8]$ and [32]$[32]$."
"vc-preamble": "import Imports.AllImports\n\ndef find_optimal_split (N k : Nat) (powers\
  \ : List Nat) : Nat :=\nsorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calc_product (values : List Nat) (split : Nat) : Nat :=\nsorry\n"
"vc-theorems": "theorem find_optimal_split_properties1 {N k : Nat} {powers : List\
  \ Nat} (h1: N ≥ 2) (h2: k ≥ 1) \n    (h3: powers.length = N) (h4: ∀ x ∈ powers,\
  \ x ≤ 10) :\n    let result := find_optimal_split N k powers\n    1 ≤ result ∧ result\
  \ ≤ N-1 :=\nsorry\n\n\ntheorem find_optimal_split_properties2 {N k : Nat} {powers\
  \ : List Nat} (h1: N ≥ 2) (h2: k ≥ 1)\n    (h3: powers.length = N) (h4: ∀ x ∈ powers,\
  \ x ≤ 10) :\n    let values := powers.map (fun p => k^p)\n    let result := find_optimal_split\
  \ N k powers\n    let optimal_product := calc_product values result\n    ∀ i, 1\
  \ ≤ i → i < N → calc_product values i ≤ optimal_product :=\nsorry\n\n/--\ninfo:\
  \ 4\n-/\n#guard_msgs in\n#eval find_optimal_split 5 2 [1, 1, 3, 3, 5]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
