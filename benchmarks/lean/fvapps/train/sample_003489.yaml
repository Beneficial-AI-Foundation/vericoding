"vc-description": "You get an array of different numbers to sum up. But there is one\
  \ problem, those numbers all have different bases.\nFor example:\n```python\nYou\
  \ get an array of numbers with their base as an input:\n\n[[\"101\",16],[\"7640\"\
  ,8],[\"1\",9]]\n```\n\nThe output should be the sum as an integer value with a base\
  \ of 10, so according to the example this would be:\n\n4258\n```python\nA few more\
  \ examples:\n[[\"101\",2], [\"10\",8]] --> 13\n[[\"ABC\",16], [\"11\",2]] --> 2751\n\
  ```\nBases can be between 2 and 36 (2<=base<=36)"
"vc-preamble": "import Imports.AllImports\n\ndef toBase (num base : Nat) : String\
  \ :=\n  sorry\n\n\ndef sumItUp (nums : List (String × Nat)) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sumList (l : List Nat) : Nat :=\n  match l with\n  | [] =>\
  \ 0\n  | x :: xs => x + sumList xs\n"
"vc-theorems": "theorem sum_it_up_equals_decimal_sum {nums : List (Nat × Nat)} :\n\
  \  ∀ pairs : List (String × Nat),\n  (∀ p : String × Nat, p ∈ pairs → \n    ∃ n\
  \ ∈ nums, p.1 = toBase n.1 p.2) →\n  sumItUp pairs = sumList (nums.map Prod.fst)\
  \ := \nsorry\n\n\ntheorem sum_it_up_empty : sumItUp [] = 0 :=\nsorry\n\n\ntheorem\
  \ sum_it_up_single {n : String} {b : Nat} :\n  b ≥ 2 → b ≤ 36 →\n  ∃ k : Nat, sumItUp\
  \ [(n, b)] = k :=\nsorry\n\n\ntheorem base_conversion_roundtrip {n : Nat} {b : Nat}\
  \ :\n  n ≤ 1000000 → b ≥ 2 → b ≤ 36 →\n  ∃ k : Nat, k = n ∧ String.toNat! (toBase\
  \ n b) = k :=\nsorry\n\n/--\ninfo: 13\n-/\n#guard_msgs in\n#eval sum_it_up [[\"\
  101\", 2], [\"10\", 8]]\n\n/--\ninfo: 2751\n-/\n#guard_msgs in\n#eval sum_it_up\
  \ [[\"ABC\", 16], [\"11\", 2]]\n\n/--\ninfo: 4258\n-/\n#guard_msgs in\n#eval sum_it_up\
  \ [[\"101\", 16], [\"7640\", 8], [\"1\", 9]]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n\
  #eval sum_it_up []\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
