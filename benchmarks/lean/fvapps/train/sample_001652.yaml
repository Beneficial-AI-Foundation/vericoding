"vc-description": "Write a function that, given a string of text (possibly with punctuation\
  \ and line-breaks),\nreturns an array of the top-3 most occurring words, in descending\
  \ order of the number of occurrences.\n\nAssumptions:\n------------\n\n- A word\
  \ is a string of letters (A to Z) optionally containing one or more apostrophes\
  \ (') in ASCII. (No need to handle fancy punctuation.)\n- Matches should be case-insensitive,\
  \ and the words in the result should be lowercased.\n- Ties may be broken arbitrarily.\n\
  - If a text contains fewer than three unique words, then either the top-2 or top-1\
  \ words should be returned, or an empty array if a text contains no words.\n\nExamples:\n\
  ------------\n\n```\ntop_3_words(\"In a village of La Mancha, the name of which\
  \ I have no desire to call to\nmind, there lived not long since one of those gentlemen\
  \ that keep a lance\nin the lance-rack, an old buckler, a lean hack, and a greyhound\
  \ for\ncoursing. An olla of rather more beef than mutton, a salad on most\nnights,\
  \ scraps on Saturdays, lentils on Fridays, and a pigeon or so extra\non Sundays,\
  \ made away with three-quarters of his income.\")\n# => [\"a\", \"of\", \"on\"]\n\
  \ntop_3_words(\"e e e e DDD ddd DdD: ddd ddd aa aA Aa, bb cc cC e e e\")\n# => [\"\
  e\", \"ddd\", \"aa\"]\n\ntop_3_words(\"  //wont won't won't\")\n# => [\"won't\"\
  , \"wont\"]\n```\n\n```if:java\nFor java users, the calls will actually be in the\
  \ form: `TopWords.top3(String s)`, expecting you to return a `List`.\n```\n\nBonus\
  \ points (not really, but just for fun):\n------------\n\n1. Avoid creating an array\
  \ whose memory footprint is roughly as big as the input text.\n2. Avoid sorting\
  \ the entire array of unique words."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def top_3_words (s : String) : List String := sorry \n\ntheorem\
  \ empty_string_returns_empty_list :\n  top_3_words \"\" = [] := sorry\n"
"vc-theorems": "theorem space_returns_empty_list :\n  top_3_words \" \" = [] := sorry\n\
  \n\ntheorem special_chars_return_empty_list (s : String) :\n  (∀ c ∈ s.data, !c.isAlpha\
  \ ∧ c ≠ '\\'') → \n  top_3_words s = [] := sorry\n\n\ntheorem simple_word_count\
  \ :\n  top_3_words \"aaa bbb aaa ccc bbb aaa\" = [\"aaa\", \"bbb\", \"ccc\"] :=\
  \ sorry\n\n\ntheorem case_insensitive_count :\n  top_3_words \"AAA bbb AAA ccc BBB\
  \ aaa\" = [\"aaa\", \"bbb\", \"ccc\"] := sorry\n\n\ntheorem valid_apostrophes :\n\
  \  top_3_words \"can't won't don't can't won't can't\" = [\"can't\", \"won't\",\
  \ \"don't\"] := sorry\n\n/--\ninfo: ['a', 'of', 'on']\n-/\n#guard_msgs in\n#eval\
  \ top_3_words \"In a village of La Mancha, the name of which I have no desire to\
  \ call to \\n            mind, there lived not long since one of those gentlemen\
  \ that keep a lance\\n            in the lance-rack, an old buckler, a lean hack,\
  \ and a greyhound for\\n            coursing. An olla of rather more beef than mutton,\
  \ a salad on most\\n            nights, scraps on Saturdays, lentils on Fridays,\
  \ and a pigeon or so extra\\n            on Sundays, made away with three-quarters\
  \ of his income.\"\n\n/--\ninfo: ['e', 'ddd', 'aa']\n-/\n#guard_msgs in\n#eval top_3_words\
  \ \"e e e e DDD ddd DdD: ddd ddd aa aA Aa, bb cc cC e e e\"\n\n/--\ninfo: [\"won't\"\
  , 'wont']\n-/\n#guard_msgs in\n#eval top_3_words \"  //wont won\"t won\"t\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
