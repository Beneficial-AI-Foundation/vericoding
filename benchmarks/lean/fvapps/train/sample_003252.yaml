"vc-description": "Given a non-negative integer, return an array / a list of the individual\
  \ digits in order.\n\nExamples:\n\n```\n123 => [1,2,3]\n\n1 => [1]\n\n8675309 =>\
  \ [8,6,7,5,3,0,9]\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def digitize (n : Nat) : List Nat := sorry \n\ntheorem digitize_length\
  \ (n : Nat) : \n  List.length (digitize n) = String.length (toString n) := sorry\n"
"vc-theorems": "theorem digitize_values (n : Nat) :\n  ∀ d ∈ digitize n, d ≤ 9 :=\
  \ sorry\n\n\ntheorem digitize_reconstruction (n : Nat) :\n  let digits := digitize\
  \ n\n  String.toNat! (String.intercalate \"\" (List.map toString digits)) = n :=\
  \ sorry\n\n\ntheorem digitize_zero : digitize 0 = [0] := sorry\n\n/--\ninfo: [1,\
  \ 2, 3]\n-/\n#guard_msgs in\n#eval digitize 123\n\n/--\ninfo: [1]\n-/\n#guard_msgs\
  \ in\n#eval digitize 1\n\n/--\ninfo: [8, 6, 7, 5, 3, 0, 9]\n-/\n#guard_msgs in\n\
  #eval digitize 8675309\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
