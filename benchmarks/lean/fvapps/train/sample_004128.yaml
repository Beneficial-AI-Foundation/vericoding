"vc-description": "The objective is to disambiguate two given names: the original\
  \ with another\n\nLet's start simple, and just work with plain ascii strings. \n\
  \nThe function ```could_be``` is given the original name and another one to test\n\
  against. \n\n```python\n# should return True if the other name could be the same\
  \ person \n> could_be(\"Chuck Norris\", \"Chuck\")\nTrue\n\n# should False otherwise\
  \ (whatever you may personnaly think)\n> could_be(\"Chuck Norris\", \"superman\"\
  )\nFalse\n``` \n\nLet's say your name is *Carlos Ray Norris*, your objective is\
  \ to return True if\nthe other given name matches any combinaison of the original\
  \ fullname:\n\n```python\ncould_be(\"Carlos Ray Norris\", \"Carlos Ray Norris\"\
  ) : True\ncould_be(\"Carlos Ray Norris\", \"Carlos Ray\") : True\ncould_be(\"Carlos\
  \ Ray Norris\", \"Norris\") : True\ncould_be(\"Carlos Ray Norris\", \"Norris Carlos\"\
  ) : True\n```\n\nFor the sake of simplicity:\n\n * the function is case sensitive\
  \ and accent sensitive for now\n * it is also punctuation sensitive\n * an empty\
  \ other name should not match any original\n * an empty orginal name should not\
  \ be matchable\n * the function is not symmetrical\n\nThe following matches should\
  \ therefore fail:\n\n```python\ncould_be(\"Carlos Ray Norris\", \" \") : False\n\
  could_be(\"Carlos Ray Norris\", \"carlos\") : False\ncould_be(\"Carlos Ray Norris\"\
  , \"Norris!\") : False\ncould_be(\"Carlos Ray Norris\", \"Carlos-Ray Norris\") :\
  \ False\ncould_be(\"Ray Norris\", \"Carlos Ray Norris\") : False\ncould_be(\"Carlos\"\
  , \"Carlos Ray Norris\") : False\n```\n\nToo easy ? Try the next steps: \n\n* [Author\
  \ Disambiguation: a name is a Name!](https://www.codewars.com/kata/author-disambiguation-a-name-is-a-name)\n\
  * or even harder: [Author Disambiguation: Signatures worth it](https://www.codewars.com/kata/author-disambiguation-signatures-worth-it)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def could_be (original : String) (another : String) : Bool :=\n\
  \  sorry\n"
"vc-theorems": "theorem identical_names (name1 name2 : String) :\n  name1.trim ≠ \"\
  \" → name1 = name2 → could_be name1 name2 := by\n  sorry\n\n\ntheorem empty_strings\
  \ (original another : String) :\n  another.trim = \"\" ∨ original = \"\" → ¬could_be\
  \ original another := by\n  sorry\n\n\ntheorem subset_match (full_name : String)\
  \ (partial_name : String) :\n  partial_name.trim ≠ \"\" →\n  (∀ word, word ∈ (partial_name.split\
  \ fun c => c = ' ') →\n    word ∈ (full_name.split fun c => c = ' ')) →\n  could_be\
  \ full_name partial_name := by\n  sorry\n\n\ntheorem reflexive (name : String) :\n\
  \  name.trim ≠ \"\" → could_be name name := by\n  sorry\n\n\ntheorem case_sensitive\
  \ :\n  ¬could_be \"Carlos Ray\" \"carlos ray\" := by\n  sorry\n\n/--\ninfo: True\n\
  -/\n#guard_msgs in\n#eval could_be \"Carlos Ray Norris\" \"Carlos Ray Norris\"\n\
  \n/--\ninfo: True\n-/\n#guard_msgs in\n#eval could_be \"Carlos Ray Norris\" \"Carlos\
  \ Ray\"\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval could_be \"\" \"C\"\n\n/--\n\
  info: False\n-/\n#guard_msgs in\n#eval could_be \"Carlos Ray Norris\" \" \"\n\n\
  /--\ninfo: False\n-/\n#guard_msgs in\n#eval could_be \"Carlos Ray Norris\" \"carlos\"\
  \n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
