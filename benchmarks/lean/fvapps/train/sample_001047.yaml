"vc-description": "Every day, Mike goes to his job by a bus, where he buys a ticket.\
  \ On the ticket, there is a letter-code that can be represented as a string of upper-case\
  \ Latin letters.\nMike believes that the day will be successful in case exactly\
  \ two different letters in the code alternate.  Otherwise, he believes that the\
  \ day will be unlucky. Please see note section for formal definition of alternating\
  \ code.\nYou are given a ticket code. Please determine, whether the day will be\
  \ successful for Mike or not. Print \"YES\" or \"NO\" (without quotes) corresponding\
  \ to the situation.\n\n-----Input-----\nThe first line of the input contains an\
  \ integer T denoting the number of test cases. The description of T test cases follows.\n\
  The first and only line of each test case contains a single string S denoting the\
  \ letter code on the ticket.\n\n-----Output-----\nFor each test case, output a single\
  \ line containing \"YES\" (without quotes) in case the day will be successful and\
  \ \"NO\" otherwise.\n\n-----Note-----\nTwo letters x, y where x != y are said to\
  \ be alternating in a code, if code is of form \"xyxyxy...\".\n\n-----Constraints-----\n\
  \n- 1 ≤ T ≤ 100\n- S consists only of upper-case Latin letters\n\nSubtask 1 (50\
  \ points):\n\n- |S| = 2\n\nSubtask 2 (50 points):\n\n- 2 ≤ |S| ≤ 100\n\n-----Example-----\n\
  Input:\n2\nABABAB\nABC\n\nOutput:\nYES\nNO"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isAlternatingCode (s : String) : Bool := sorry\n\nabbrev charAt\
  \ (s : String) (i : Nat) : Char := \n  s.data[i]'sorry\n"
"vc-theorems": "theorem alternating_code_first_two_different {s : String} :\n  isAlternatingCode\
  \ s → String.length s ≥ 2 → charAt s 0 ≠ charAt s 1 := sorry \n\n\ntheorem alternating_code_even_indices\
  \ {s : String} {i : Nat} :\n  isAlternatingCode s → String.length s ≥ 2 → \n  i\
  \ < String.length s → i % 2 = 0 → charAt s i = charAt s 0 := sorry\n\n\ntheorem\
  \ alternating_code_odd_indices {s : String} {i : Nat} :\n  isAlternatingCode s →\
  \ String.length s ≥ 2 →\n  i < String.length s → i % 2 = 1 → charAt s i = charAt\
  \ s 1 := sorry\n\n\ntheorem alternating_code_two_chars {s : String} :\n  String.length\
  \ s = 2 → \n  isAlternatingCode s = (charAt s 0 ≠ charAt s 1) := sorry\n\n/--\n\
  info: True\n-/\n#guard_msgs in\n#eval is_alternating_code \"ABABAB\"\n\n/--\ninfo:\
  \ False\n-/\n#guard_msgs in\n#eval is_alternating_code \"ABC\"\n\n/--\ninfo: False\n\
  -/\n#guard_msgs in\n#eval is_alternating_code \"AA\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
