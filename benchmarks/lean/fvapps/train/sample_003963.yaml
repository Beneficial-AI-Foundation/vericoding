"vc-description": "With a friend we used to play the following game on a chessboard\n\
  (8, rows, 8 columns).\nOn the first row at the *bottom* we put numbers:\n\n`1/2,\
  \ 2/3, 3/4, 4/5, 5/6, 6/7, 7/8, 8/9`\n\nOn row 2 (2nd row from the bottom) we have:\n\
  \n`1/3, 2/4, 3/5, 4/6, 5/7, 6/8, 7/9, 8/10`\n\nOn row 3:\n\n`1/4, 2/5, 3/6, 4/7,\
  \ 5/8, 6/9, 7/10, 8/11`\n\nuntil last row:\n\n`1/9, 2/10, 3/11, 4/12, 5/13, 6/14,\
  \ 7/15, 8/16`\n\n\nWhen all numbers are on the chessboard each in turn we toss a\
  \ coin. The one who get \"head\" wins and\nthe other gives him, in dollars, the\
  \ **sum of the numbers on the chessboard**.\nWe play for fun, the dollars come from\
  \ a monopoly game! \n\n### Task\nHow much can I (or my friend) win or loses for\
  \ each game if the chessboard has n rows and n columns? Add all of the fractional\
  \ values on an n by n sized board and give the answer as a simplified fraction.\n\
  \  \n- Ruby, Python, JS, Coffee, Clojure, PHP, Elixir, Crystal, Typescript, Go:\n\
  \nThe function called 'game' with parameter n (integer >= 0) returns as result an\
  \ irreducible fraction written as an array of integers: [numerator, denominator].\n\
  If the denominator is 1 return [numerator].\n\n- Haskell:\n\n'game' returns either\
  \ a \"Left Integer\" if denominator is 1 otherwise \n\"Right (Integer, Integer)\"\
  \ \n\n- Prolog:\n'game' returns an irreducible fraction written as an array of integers:\
  \ [numerator, denominator].\nIf the denominator is 1 return [numerator, 1].\n\n\
  - Java, C#, C++, F#, Swift, Reason, Kotlin:\n\n'game' returns a string that mimicks\
  \ the array returned in Ruby, Python, JS, etc...\n\n- Fortran, Bash: 'game' returns\
  \ a string\n\n\n- Forth: return on the stack the numerator and the denominator (even\
  \ if the denominator is 1)\n\n\n- In Fortran - as in any other language - the returned\
  \ string is not permitted\nto contain any redundant trailing whitespace: you can\
  \ use dynamically allocated character strings.\n\n#### See Example Test Cases for\
  \ each language"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def game (n: Nat) : List Nat := sorry\n\ntheorem game_result_list_length\
  \ {n: Nat} :\n  let result := game n\n  List.length result = 1 ∨ List.length result\
  \ = 2 := sorry\n"
"vc-theorems": "theorem game_zero_case :\n  game 0 = [0] := sorry\n\n\ntheorem game_even_case\
  \ {n: Nat} :\n  n % 2 = 0 →\n  game n = [n * n / 2] := sorry \n\n\ntheorem game_odd_case\
  \ {n: Nat} :\n  n % 2 = 1 →\n  game n = [n * n, 2] := sorry\n\n\ntheorem game_fraction_in_range\
  \ {n: Nat} :\n  let result := game n\n  let fraction := if List.length result =\
  \ 2 \n                  then result[0]! / result[1]!\n                  else result[0]!\n\
  \  0 ≤ fraction ∧ fraction ≤ n * n := sorry\n\n/--\ninfo: [0]\n-/\n#guard_msgs in\n\
  #eval game 0\n\n/--\ninfo: [1, 2]\n-/\n#guard_msgs in\n#eval game 1\n\n/--\ninfo:\
  \ [32]\n-/\n#guard_msgs in\n#eval game 8\n\n/--\ninfo: [10201, 2]\n-/\n#guard_msgs\
  \ in\n#eval game 101\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
