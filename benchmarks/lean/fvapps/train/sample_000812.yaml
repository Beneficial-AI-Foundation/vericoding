"vc-description": "Chef has a sequence $A_1, A_2, \\ldots, A_N$. This sequence has\
  \ exactly $2^N$ subsequences. Chef considers a subsequence of $A$ interesting if\
  \ its size is exactly $K$ and the sum of all its elements is minimum possible, i.e.\
  \ there is no subsequence with size $K$ which has a smaller sum.\nHelp Chef find\
  \ the number of interesting subsequences of the sequence $A$.\n\n-----Input-----\n\
  - The first line of the input contains a single integer $T$ denoting the number\
  \ of test cases. The description of $T$ test cases follows.\n- The first line of\
  \ each test case contains two space-separated integers $N$ and $K$.\n- The second\
  \ line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\n\
  For each test case, print a single line containing one integer ― the number of interesting\
  \ subsequences.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n- $1 \\le K \\le\
  \ N \\le 50$\n- $1 \\le A_i \\le 100$ for each valid $i$\n\n-----Subtasks-----\n\
  Subtask #1 (30 points): $1 \\le N \\le 20$\nSubtask #2 (70 points): original constraints\n\
  \n-----Example Input-----\n1\n4 2\n1 2 3 4\n\n-----Example Output-----\n1\n\n-----Explanation-----\n\
  Example case 1: There are six subsequences with length $2$: $(1, 2)$, $(1, 3)$,\
  \ $(1, 4)$, $(2, 3)$, $(2, 4)$ and $(3, 4)$. The minimum sum is $3$ and the only\
  \ subsequence with this sum is $(1, 2)$."
"vc-preamble": "import Imports.AllImports\n\ndef count_interesting_subsequences (n\
  \ k : Nat) (a : List Nat) : Nat :=\n  sorry\n\n\ndef isSorted (l : List Nat) : Bool\
  \ :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sortList (l : List Nat) : List Nat :=\n  sorry\n"
"vc-theorems": "theorem count_interesting_subsequences_properties (n k : Nat) (a :\
  \ List Nat)\n    (h1 : n > 0) (h2 : k > 0) (h3 : List.length a > 0) :\n    k ≤ List.length\
  \ a →\n    0 ≤ count_interesting_subsequences n k a :=\n  sorry\n\n\ntheorem sorted_input_equivalence\
  \ (a : List Nat)\n    (h1 : List.length a ≥ 2) :\n    let k := List.length a / 2\n\
  \    count_interesting_subsequences (List.length a) k (sortList a) = \n    count_interesting_subsequences\
  \ (List.length a) k a :=\n  sorry\n\n\ntheorem kth_element_boundary (a : List Nat)\n\
  \    (h1 : List.length a ≥ 2) (h2 : List.length a ≤ 10) :\n    let k := List.length\
  \ a / 2\n    let sorted := sortList a\n    k > 0 →\n    k ≤ List.length a →\n  \
  \  ∃ x, List.elem x a ∧ x = List.get! sorted (k-1) :=\n  sorry\n\n/--\ninfo: 1\n\
  -/\n#guard_msgs in\n#eval count_interesting_subsequences 4 2 [1, 2, 3, 4]\n\n/--\n\
  info: 3\n-/\n#guard_msgs in\n#eval count_interesting_subsequences 3 2 [2, 2, 2]\n\
  \n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval count_interesting_subsequences 5 3 [1,\
  \ 1, 2, 2, 3]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
