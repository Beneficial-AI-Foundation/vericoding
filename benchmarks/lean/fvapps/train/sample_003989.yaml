"vc-description": "## Task\n\nGenerate a sorted list of all possible IP addresses\
  \ in a network.\n\nFor a subnet that is not a valid IPv4 network return `None`.\n\
  \n## Examples\n```\nipsubnet2list(\"192.168.1.0/31\") == [\"192.168.1.0\", \"192.168.1.1\"\
  ]\nipsubnet2list(\"213.256.46.160/28\") == None\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def ipsubnet2list (subnet : String) : Option (List String) := sorry\n\
  \ndef is_valid_ip_network (subnet : String) : Bool := sorry\n"
"vc-theorems": "theorem ipsubnet2list_properties {a b c d : Nat} {mask : Nat} \n \
  \ (h1 : a ≤ 255) (h2 : b ≤ 255) (h3 : c ≤ 255) (h4 : d ≤ 255)\n  (h5 : 24 ≤ mask)\
  \ (h6 : mask ≤ 32) :\n  let subnet := s!\"{a}.{b}.{c}.{d}/{mask}\"\n  match ipsubnet2list\
  \ subnet with\n  | none => ¬is_valid_ip_network subnet \n  | some result => \n \
  \   is_valid_ip_network subnet ∧ \n    List.length result = 2^(32 - mask) ∧\n  \
  \  List.Nodup result\n  := sorry\n\n\ntheorem ipsubnet2list_invalid_input (s : String)\
  \ :\n  ¬is_valid_ip_network s → \n  ipsubnet2list s = none := sorry\n\n/--\ninfo:\
  \ ['192.168.1.0', '192.168.1.1']\n-/\n#guard_msgs in\n#eval ipsubnet2list \"192.168.1.0/31\"\
  \n\n/--\ninfo: ['195.20.15.0', '195.20.15.1', '195.20.15.2', '195.20.15.3', '195.20.15.4',\
  \ '195.20.15.5', '195.20.15.6', '195.20.15.7', '195.20.15.8', '195.20.15.9', '195.20.15.10',\
  \ '195.20.15.11', '195.20.15.12', '195.20.15.13', '195.20.15.14', '195.20.15.15']\n\
  -/\n#guard_msgs in\n#eval ipsubnet2list \"195.20.15.0/28\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
