"vc-description": "# Description\n\"It's the end of trick-or-treating and we have\
  \ a list/array representing how much candy each child in our group has made out\
  \ with. We don't want the kids to start arguing, and using our parental intuition\
  \ we know trouble is brewing as many of the children in the group have received\
  \ different amounts of candy from each home. \n\nSo we want each child to have the\
  \ same amount of candies, only we can't exactly take any candy away from the kids,\
  \ that would be even worse. Instead we decide to give each child extra candy until\
  \ they all have the same amount.\n# Task\nYour job is to find out how much candy\
  \ each child has, and give them each additional candy until they too have as much\
  \ as the child(ren) with the most candy. You also want to keep a total of how much\
  \ candy you've handed out because reasons.\"\n\nYour job is to give all the kids\
  \ the same amount of candies as the kid with the most candies and then return the\
  \ total number candies that have been given out. If there are no kids, or only one,\
  \ return -1. \n\nIn the first case (look below) the most candies are given to second\
  \ kid (i.e second place in list/array), 8. Because of that we will give the first\
  \ kid 3 so he can have 8 and the third kid 2 and the fourth kid 4, so all kids will\
  \ have 8 candies.So we end up handing out 3 + 2 + 4 = 9.\n\n```python\ncandies ([5,8,6,4])\
  \ # return 9\n\ncandies ([1,2,4,6]) # return 11\n\ncandies ([1,6]) # return 5\n\n\
  candies ([]) # return -1\n\ncandies ([6]) # return -1 (because only one kid)\n```\n\
  ```cs\nCandyProblem.GetMissingCandies(new [] {5, 6, 8, 4}) // return 9\n\nCandyProblem.GetMissingCandies(new\
  \ [] {1, 2, 4, 6}) // return 11\n\nCandyProblem.GetMissingCandies(new [] { }) //\
  \ return -1\n\nCandyProblem.GetMissingCandies(new [] {1, 6}) // return 5\n\n```\n\
  ```haskell \ncandies [5,8,6,4] -- return 9\n\ncandies [1,2,4,6] -- return 11\n\n\
  candies [] -- return -1\n\ncandies [1,6] -- return 5\n```"
"vc-preamble": "import Imports.AllImports\n\ndef List.sum (l : List Nat) : Nat :=\
  \ sorry \n\ndef List.maximum (l : List Nat) : Nat := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def candies (arr : List Nat) : Int := sorry\n\ntheorem candies_valid_input\
  \ {arr : List Nat} (h : arr.length ≥ 2) :\n  candies arr ≥ 0 ∧ candies arr = arr.length\
  \ * (List.maximum arr) - arr.sum := sorry\n"
"vc-theorems": "theorem candies_invalid_input {arr : List Nat} (h : arr.length ≤ 1)\
  \ :\n  candies arr = -1 := sorry\n\n\ntheorem candies_minimum_list :\n  candies\
  \ [1, 1] = 0 := sorry\n\n\ntheorem candies_result_formula {arr : List Nat} (h :\
  \ arr.length ≥ 2) :\n  candies arr = arr.length * (List.maximum arr) - arr.sum :=\
  \ sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
