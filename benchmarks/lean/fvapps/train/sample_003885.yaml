"vc-description": "Write a function called that takes a string of parentheses, and\
  \ determines if the order of the parentheses is valid. The function should return\
  \ `true` if the string is valid, and `false` if it's invalid.\n\n## Examples\n\n\
  ```\n\"()\"              =>  true\n\")(()))\"          =>  false\n\"(\"        \
  \       =>  false\n\"(())((()())())\"  =>  true\n```\n\n## Constraints\n\n`0 <=\
  \ input.length <= 100`\n\n~~~if-not:javascript,go\nAlong with opening (`(`) and\
  \ closing (`)`) parenthesis, input may contain any valid ASCII characters.  Furthermore,\
  \ the input string may be empty and/or not contain any parentheses at all.  Do **not**\
  \ treat other forms of brackets as parentheses (e.g. `[]`, `{}`, `<>`).\n~~~"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def valid_parentheses (s : String) : Bool := sorry \n\ntheorem\
  \ valid_balanced_strings \n  (s : String)\n  (h : ∃ n : Nat, ∃ positions : List\
  \ Nat, \n    -- Properties of balanced parentheses:\n    -- 1. Equal number of '('\
  \ and ')'\n    -- 2. Each ')' has matching '(' before it\n    -- 3. Characters between\
  \ parentheses can be arbitrary\n    True) :\n  valid_parentheses s = true := sorry\n"
"vc-theorems": "theorem string_without_parens\n  (s : String)\n  (h : ∀ c, c ∈ s.data\
  \ → c ≠ '(' ∧ c ≠ ')') :\n  valid_parentheses s = true := sorry\n\n\ntheorem only_closing_parens\n\
  \  (s : String)\n  (h₁ : s.length > 0)\n  (h₂ : ∀ c, c ∈ s.data → c = ')') :\n \
  \ valid_parentheses s = false := sorry\n\n\ntheorem only_opening_parens\n  (s :\
  \ String)\n  (h₁ : s.length > 0)\n  (h₂ : ∀ c, c ∈ s.data → c = '(') :\n  valid_parentheses\
  \ s = false := sorry\n\n\ntheorem empty_string_valid :\n  valid_parentheses \"\"\
  \ = true := sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval valid_parentheses\
  \ \"hi(hi)\"\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval valid_parentheses \"\
  ((())()())\"\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval valid_parentheses \"\
  hi(hi))(\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
