"vc-description": "Alice received a set of Toy Train™ from Bob. It consists of one\
  \ train and a connected railway network of $n$ stations, enumerated from $1$ through\
  \ $n$. The train occupies one station at a time and travels around the network of\
  \ stations in a circular manner. More precisely, the immediate station that the\
  \ train will visit after station $i$ is station $i+1$ if $1 \\leq i < n$ or station\
  \ $1$ if $i = n$. It takes the train $1$ second to travel to its next station as\
  \ described.\n\nBob gave Alice a fun task before he left: to deliver $m$ candies\
  \ that are initially at some stations to their independent destinations using the\
  \ train. The candies are enumerated from $1$ through $m$. Candy $i$ ($1 \\leq i\
  \ \\leq m$), now at station $a_i$, should be delivered to station $b_i$ ($a_i \\\
  neq b_i$). [Image] The blue numbers on the candies correspond to $b_i$ values. The\
  \ image corresponds to the $1$-st example. \n\nThe train has infinite capacity,\
  \ and it is possible to load off any number of candies at a station. However, only\
  \ at most one candy can be loaded from a station onto the train before it leaves\
  \ the station. You can choose any candy at this station. The time it takes to move\
  \ the candies is negligible.\n\nNow, Alice wonders how much time is needed for the\
  \ train to deliver all candies. Your task is to find, for each station, the minimum\
  \ time the train would need to deliver all the candies were it to start from there.\n\
  \n\n-----Input-----\n\nThe first line contains two space-separated integers $n$\
  \ and $m$ ($2 \\leq n \\leq 5\\,000$; $1 \\leq m \\leq 20\\,000$) — the number of\
  \ stations and the number of candies, respectively.\n\nThe $i$-th of the following\
  \ $m$ lines contains two space-separated integers $a_i$ and $b_i$ ($1 \\leq a_i,\
  \ b_i \\leq n$; $a_i \\neq b_i$) — the station that initially contains candy $i$\
  \ and the destination station of the candy, respectively.\n\n\n-----Output-----\n\
  \nIn the first and only line, print $n$ space-separated integers, the $i$-th of\
  \ which is the minimum time, in seconds, the train would need to deliver all the\
  \ candies were it to start from station $i$.\n\n\n-----Examples-----\nInput\n5 7\n\
  2 4\n5 1\n2 3\n3 4\n4 1\n5 3\n3 5\n\nOutput\n10 9 10 10 9 \n\nInput\n2 3\n1 2\n\
  1 2\n1 2\n\nOutput\n5 6 \n\n\n\n-----Note-----\n\nConsider the second sample.\n\n\
  If the train started at station $1$, the optimal strategy is as follows.  Load the\
  \ first candy onto the train.  Proceed to station $2$. This step takes $1$ second.\
  \  Deliver the first candy.  Proceed to station $1$. This step takes $1$ second.\
  \  Load the second candy onto the train.  Proceed to station $2$. This step takes\
  \ $1$ second.  Deliver the second candy.  Proceed to station $1$. This step takes\
  \ $1$ second.  Load the third candy onto the train.  Proceed to station $2$. This\
  \ step takes $1$ second.  Deliver the third candy. \n\nHence, the train needs $5$\
  \ seconds to complete the tasks.\n\nIf the train were to start at station $2$, however,\
  \ it would need to move to station $1$ before it could load the first candy, which\
  \ would take one additional second. Thus, the answer in this scenario is $5+1 =\
  \ 6$ seconds."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_toy_train (n : Nat) (pairs : List (Nat × Nat)) : List\
  \ Nat :=\n  sorry\n"
"vc-theorems": "theorem solve_toy_train_length {n : Nat} {pairs : List (Nat × Nat)}\
  \ \n  (h : n ≥ 2) :\n  (solve_toy_train n pairs).length = n :=\nsorry\n\n\ntheorem\
  \ solve_toy_train_nonnegative {n : Nat} {pairs : List (Nat × Nat)} \n  (h : n ≥\
  \ 2) :\n  ∀ x, x ∈ solve_toy_train n pairs → x ≥ 0 :=\nsorry\n\n\ntheorem solve_toy_train_bounded_difference\
  \ {n : Nat} {pairs : List (Nat × Nat)}\n  (h : n ≥ 2) :\n  let result := solve_toy_train\
  \ n pairs\n  ∀ i j, i ∈ List.range result.length → j ∈ List.range result.length\
  \ →\n    result[i]! - result[j]! ≤ n :=\nsorry\n\n\n\n\ntheorem solve_toy_train_empty\
  \ {n : Nat}\n  (h : n ≥ 2) :\n  let result := solve_toy_train n []\n  result.length\
  \ = n ∧ ∀ x, x ∈ result → x = 0 :=\nsorry\n\n\ntheorem solve_toy_train_self_loops\
  \ {n : Nat}\n  (h : n ≥ 2) :\n  let pairs := List.range n |>.map (fun i => (i+1,\
  \ i+1))\n  let result := solve_toy_train n pairs\n  result.length = n ∧ \n  ∀ i\
  \ j, i ∈ List.range result.length → j ∈ List.range result.length →\n    result[i]!\
  \ = result[j]! :=\nsorry\n\n/--\ninfo: [10, 9, 10, 10, 9]\n-/\n#guard_msgs in\n\
  #eval solve_toy_train 5 [(2, 4), (5, 1), (2, 3), (3, 4), (4, 1), (5, 3), (3, 5)]\n\
  \n/--\ninfo: [5, 6]\n-/\n#guard_msgs in\n#eval solve_toy_train 2 [(1, 2), (1, 2),\
  \ (1, 2)]\n\n/--\ninfo: [8, 7, 6, 8, 7]\n-/\n#guard_msgs in\n#eval solve_toy_train\
  \ 5 [(2, 4), (5, 4), (3, 2)]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded_and_plausible"
