"vc-description": "# Task\n Given an array `arr`, find the rank of the element at\
  \ the ith position.\n\n The `rank` of the arr[i] is a value equal to the number\
  \ of elements `less than or equal to` arr[i] standing before arr[i], plus the number\
  \ of elements `less than` arr[i] standing after arr[i].\n\n# Example\n\n For `arr\
  \ = [2,1,2,1,2], i = 2`, the result should be `3`.\n \n There are 2 elements `less\
  \ than or equal to` arr[2] standing before arr[2]: \n \n `arr[0] <= arr[2]`\n \n\
  \ `arr[1] <= arr[2]`\n \n There is only 1 element `less than` arr[2] standing after\
  \ arr[2]: \n \n `arr[3] < arr[2]`\n \n So the result is `2 + 1 = 3`.\n \n# Input/Output\n\
  \n\n - `[input]` integer array `arr`\n\n  An array of integers.\n\n  `3 <= arr.length\
  \ <= 50.`\n\n\n - `[input]` integer `i`\n\n  Index of the element whose rank is\
  \ to be found.\n\n  \n - `[output]` an integer\n\n  Rank of the element at the ith\
  \ position."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def rank_of_element (arr : List Int) (i : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem rank_within_bounds {arr : List Int} {i : Nat} (h : i < arr.length)\
  \ :\n  let rank := rank_of_element arr i\n  0 ≤ rank ∧ rank ≤ arr.length :=\nsorry\n\
  \n\ntheorem rank_exceeds_strictly_less {arr : List Int} {i : Nat} (h : i < arr.length)\
  \ :\n  let rank := rank_of_element arr i\n  let target := arr[i]\n  let strictly_less\
  \ := (List.enum arr).filter (fun p => p.2 < target ∧ p.1 ≠ i) |>.length\n  rank\
  \ ≥ strictly_less :=\nsorry\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval rank_of_element\
  \ [2, 1, 2, 1, 2] 2\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval rank_of_element [2,\
  \ 1, 2, 2, 2] 2\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval rank_of_element [3, 2,\
  \ 3, 4, 1] 1\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
