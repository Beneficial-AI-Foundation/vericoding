"vc-description": "-----\nRANJANA QUIZ\n-----\n\nProf. Ranjana decided to conduct\
  \ a quiz in her class. She divided all the students of her\nclass into groups of\
  \ three. Consider that no student was left out after the division. She gave\ndifferent\
  \ sets of questions to every group. A set is said to be unique if there is no other\
  \ team that\nreceived the same number of maths, science and english questions. In\
  \ every set, maximum\nquestions for each group were related to maths, then science,\
  \ and the least number of\nquestions were related to English. Total number of questions\
  \ given to each team can be\ndifferent. \n\n\t\n\t\n\nAfter the test, the CR of\
  \ the class asked every team to report the number of questions\nthey got on each\
  \ subject. The CR wants to know the number of unique sets of questions that\nwere\
  \ given to the teams, the problem is that all the students have just submitted the\
  \ number of\nquestions of each subject but in no particular order. Help the CR to\
  \ find the number of unique\nsets\n\n\t\t\n\t\t\n\n-----Input Format-----\n\nLine\
  \ 1 contains the number of teams ‘n’. In the next n lines, each line contains three\
  \ space separated integers,i.e, the number of questions of each subject(in no particular\
  \ order).\nemployee\n\n-----Output-----\n\nPrint the number of unique sets\n\n\t\
  \t\n\t\t\n\n-----Example Text Case-----\nInput:\n\n5\n6 5 4\n2 3 7\n4 6 5\n7 2 3\n\
  5 3 1\n\t\nOutput:\n1\n\t\t"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calculate_unique_sets (teams : List Team) : Nat :=\n  sorry\n"
"vc-theorems": "theorem unique_sets_bounds {teams : List Team} :\n  let result :=\
  \ calculate_unique_sets teams\n  0 ≤ result ∧ result ≤ teams.length := by sorry\n\
  \n\ntheorem shuffle_invariant {teams : List Team} :\n  let shuffled := teams.map\
  \ (fun t => match t with\n    | Team.mk a b c => Team.mk b c a) \n  calculate_unique_sets\
  \ shuffled = calculate_unique_sets teams := by sorry\n\n\ntheorem dedup_property\
  \ {teams : List Team} :\n  let deduped := teams.eraseDups\n  calculate_unique_sets\
  \ deduped ≤ calculate_unique_sets teams := by sorry\n\n\ntheorem repeat_invariant\
  \ {teams : List Team} (h : teams ≠ []) :\n  calculate_unique_sets (teams ++ teams)\
  \ = calculate_unique_sets teams := by sorry\n\n\ntheorem single_team_perms {a b\
  \ c : Nat} :\n  let perms := [\n    Team.mk a b c,\n    Team.mk a c b,\n    Team.mk\
  \ b a c,\n    Team.mk b c a, \n    Team.mk c a b,\n    Team.mk c b a\n  ]\n  calculate_unique_sets\
  \ perms = 1 := by sorry\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval calculate_unique_sets\
  \ [(6, 5, 4), (2, 3, 7), (4, 6, 5), (7, 2, 3), (5, 3, 1)]\n\n/--\ninfo: 2\n-/\n\
  #guard_msgs in\n#eval calculate_unique_sets [(3, 2, 1), (3, 2, 1), (4, 3, 2)]\n\n\
  /--\ninfo: 2\n-/\n#guard_msgs in\n#eval calculate_unique_sets [(5, 4, 3), (5, 4,\
  \ 3), (6, 5, 4)]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
