"vc-description": "Write an algorithm that takes an array and moves all of the zeros\
  \ to the end, preserving the order of the other elements.\n\n```python\nmove_zeros([False,1,0,1,2,0,1,3,\"\
  a\"]) # returns[False,1,1,2,1,3,\"a\",0,0]\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def moveZeros {α} [BEq α] (arr : List α) (isZero : α → Bool) :\
  \ List α :=\n  sorry\n"
"vc-theorems": "theorem moveZeros_bool_preserves_false (arr : List Bool) :\n  let\
  \ result := moveZeros arr (· = false)\n  (arr.filter (· = false)).length = (result.filter\
  \ (· = false)).length := by\n    sorry\n\n\ntheorem moveZeros_preserves_length {α}\
  \ [BEq α] (arr : List α) (isZero : α → Bool) :\n  (moveZeros arr isZero).length\
  \ = arr.length := by\n    sorry\n\n\ntheorem moveZeros_preserves_nonzeros {α} [BEq\
  \ α] (arr : List α) (isZero : α → Bool) :\n  (arr.filter (not ∘ isZero)) = ((moveZeros\
  \ arr isZero).filter (not ∘ isZero)) := by\n    sorry\n\n\ntheorem moveZeros_preserves_zero_count\
  \ {α} [BEq α] (arr : List α) (isZero : α → Bool) :\n  (arr.filter isZero).length\
  \ = ((moveZeros arr isZero).filter isZero).length := by\n    sorry\n\n/--\ninfo:\
  \ expected1\n-/\n#guard_msgs in\n#eval move_zeros [False, 1, 0, 1, 2, 0, 1, 3, \"\
  a\"]\n\n/--\ninfo: expected2\n-/\n#guard_msgs in\n#eval move_zeros [1, 2, 0, 1,\
  \ 0, 1, 0, 3, 0, 1]\n\n/--\ninfo: expected3\n-/\n#guard_msgs in\n#eval move_zeros\
  \ [\"a\", 0, 0, \"b\", \"c\", \"d\", 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
