"vc-description": "Given a string S, consider all duplicated substrings: (contiguous)\
  \ substrings of S that occur 2 or more times.  (The occurrences may overlap.)\n\
  Return any duplicated substring that has the longest possible length.  (If S does\
  \ not have a duplicated substring, the answer is \"\".)\n \nExample 1:\nInput: \"\
  banana\"\nOutput: \"ana\"\n\nExample 2:\nInput: \"abcd\"\nOutput: \"\"\n\n \nNote:\n\
  \n2 <= S.length <= 10^5\nS consists of lowercase English letters."
"vc-preamble": "import Imports.AllImports\n\ndef longest_dup_substring (s : String)\
  \ : String := sorry\n\ndef isSubstringOf (sub str : String) : Bool := sorry\n\n\n\
  def countOccurrences (needle haystack : String) (start : Nat) : Nat := sorry\n\n\
  theorem longest_dup_occurs_twice {s : String} (h : s.length > 0) :\n  let result\
  \ := longest_dup_substring s\n  if result.length > 0 then\n    countOccurrences\
  \ result s 0 ≥ 2\n  else True := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def hasLongerDuplicate (s : String) (len : Nat) : Bool := sorry\n\
  \ntheorem no_longer_duplicate_exists {s : String} (h : s.length > 0) :\n  let result\
  \ := longest_dup_substring s\n  ∀ len, len > result.length → \n  hasLongerDuplicate\
  \ s len = false := sorry"
"vc-theorems": "theorem longest_dup_is_substring {s : String} (h : s.length > 0) :\n\
  \  let result := longest_dup_substring s\n  isSubstringOf result s = true := sorry\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
