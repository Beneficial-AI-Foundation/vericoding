"vc-description": "You are given a sequence D_1, D_2, ..., D_N of length N.\nThe values\
  \ of D_i are all distinct.\nDoes a tree with N vertices that satisfies the following\
  \ conditions exist?\n - The vertices are numbered 1,2,..., N.\n - The edges are\
  \ numbered 1,2,..., N-1, and Edge i connects Vertex u_i and v_i.\n - For each vertex\
  \ i, the sum of the distances from i to the other vertices is D_i, assuming that\
  \ the length of each edge is 1.\nIf such a tree exists, construct one such tree.\n\
  \n-----Constraints-----\n - 2 \\leq N \\leq 100000\n - 1 \\leq D_i \\leq 10^{12}\n\
  \ - D_i are all distinct.\n\n-----Input-----\nInput is given from Standard Input\
  \ in the following format:\nN\nD_1\nD_2\n:\nD_N\n\n-----Output-----\nIf a tree with\
  \ n vertices that satisfies the conditions does not exist, print -1.\nIf a tree\
  \ with n vertices that satisfies the conditions exist, print n-1 lines.\nThe i-th\
  \ line should contain u_i and v_i with a space in between.\nIf there are multiple\
  \ trees that satisfy the conditions, any such tree will be accepted.\n\n-----Sample\
  \ Input-----\n7\n10\n15\n13\n18\n11\n14\n19\n\n-----Sample Output-----\n1 2\n1 3\n\
  1 5\n3 4\n5 6\n6 7\n\nThe tree shown below satisfies the conditions."
"vc-preamble": "import Imports.AllImports\n\ndef checkTreeWithDistances (N : Nat)\
  \ (distances : List Nat) : List (Nat × Nat) ⊕ Unit :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isValidTree (N : Nat) (edges : List (Nat × Nat)) : Bool :=\n\
  \  sorry\n"
"vc-theorems": "theorem arbitrary_inputs_valid {N : Nat} {distances : List Nat} \n\
  \  (h1 : N ≥ 2) (h2 : N ≤ 20) (h3 : distances.length = N) :\n  let result := checkTreeWithDistances\
  \ N distances\n  match result with\n  | .inl edges => isValidTree N edges = true\
  \ \n  | .inr _ => True :=\n  sorry\n\n\ntheorem identical_distances_invalid {N :\
  \ Nat} (h : N ≥ 2) :\n  let distances := List.replicate N N\n  checkTreeWithDistances\
  \ N distances = .inr () :=\n  sorry\n\n\ntheorem sequential_distances_valid {N :\
  \ Nat} (h1 : N ≥ 2) (h2 : N ≤ 20) :\n  let distances := List.range N\n  let result\
  \ := checkTreeWithDistances N distances\n  match result with\n  | .inl edges =>\
  \ isValidTree N edges = true\n  | .inr _ => True :=\n  sorry\n\n\ntheorem edge_cases\
  \ :\n  (checkTreeWithDistances 2 [1,1] = .inr ()) ∧ \n  (checkTreeWithDistances\
  \ 2 [0,0] = .inr ()) ∧\n  (match checkTreeWithDistances 3 [3,4,5] with\n   | .inl\
  \ edges => isValidTree 3 edges = true\n   | .inr _ => False) :=\n  sorry\n\n/--\n\
  info: N1 - 1\n-/\n#guard_msgs in\n#eval len result\n\n/--\ninfo: -1\n-/\n#guard_msgs\
  \ in\n#eval check_tree_with_distances 2 [1, 2]\n\n/--\ninfo: N3 - 1\n-/\n#guard_msgs\
  \ in\n#eval len result\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
