vc-description: |-
  Complete the function to determine the number of bits required to convert integer `A` to integer `B` (where `A` and `B` >= 0)

  The upper limit for `A` and `B` is 2^(16), `int.MaxValue` or similar.

  For example, you can change 31 to 14 by flipping the 4th and 0th bit:
  ```
   31  0 0 0 1 1 1 1 1
   14  0 0 0 0 1 1 1 0
  ---  ---------------
  bit  7 6 5 4 3 2 1 0
  ```
  Thus `31` and `14` should return `2`.
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |-
  def convert_bits (a b : Int) : Int := sorry









  theorem convert_from_zero_cases :
    (convert_bits 0 0 = 0) ∧ 
    (convert_bits 0 1 = 1) ∧
    (convert_bits 0 2 = 1) ∧ 
    (convert_bits 0 3 = 2) ∧
    (convert_bits 0 4 = 1) := sorry
vc-theorems: |
  /--
  info: 2
  -/
  #guard_msgs in
  #eval convert_bits 31 14

  /--
  info: 3
  -/
  #guard_msgs in
  #eval convert_bits 7 17

  /--
  info: 0
  -/
  #guard_msgs in
  #eval convert_bits 0 0
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible
