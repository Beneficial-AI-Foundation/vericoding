"vc-description": "-----Indian National Olympiad in Informatics 2014-----\nNikhil’s\
  \ slogan has won the contest conducted by Drongo Airlines and he is entitled to\
  \ a free ticket between any two destinations served by the airline. All cities served\
  \ by Drongo Airlines can be reached from each other by some sequence of connecting\
  \ flights. Nikhil is allowed to take as many connecting flights as needed, but he\
  \ must take the cheapest route between his chosen destinations.\nEach direct flight\
  \ between two cities has a fixed price. All pairs of cities connected by direct\
  \ flights have flights in both directions and the price is the same in either direction.\
  \ The price for a sequence of connecting flights is the sum of the prices of the\
  \ direct flights along the route.\nNikhil has information about the cost of each\
  \ direct flight. He would like to maximize the value of his prize, so he would like\
  \ to choose a pair of cities on the network for which the cost of the cheapest route\
  \ is as high as possible.\nFor instance, suppose the network consists of four cities\
  \ {1, 2, 3, 4}, connected as shown on the right.\nIn this case, Nikhil should choose\
  \ to travel between 1 and 4, where the cheapest route has cost 19. You can check\
  \ that for all other pairs of cities, the cheapest route has a smaller cost. For\
  \ instance, notice that though the direct flight from 1 to 3 costs 24, there is\
  \ a cheaper route of cost 12 from 1 to 2 to 3.\n\n-----Input Format:-----\n- Line\
  \ 1 : Two space-separated integers, C and F . C is the number of cities on the network,\
  \ numbered 1, 2, . . . , C. F is the number of pairs of cities connected by a direct\
  \ flight\n- Lines 2 to F + 1 : Each line describes one direct flight between a pair\
  \ of cities and consists of three integers, x, y and p, where x and y are the two\
  \ cities connected by this flight and p is the price of this\nFor all direct flights,\
  \ $x \\neq y$, and no pair of cities is connected by more than one direct flight.\
  \ If there is a direct flight from x to y with price p, there is also a flight from\
  \ y to x with price p and exactly one of these two will be listed.\n\n-----Output\
  \ Format-----\n- The output consists of a single integer, the maximum cost among\
  \ the cheapest routes between all pairs of cities across the airline’s network.\n\
  \n-----Test Data-----\nThe testdata is grouped into three subtasks. In all subtasks,\
  \ 2 ≤ C ≤ 230 and 1 ≤ F ≤ 23665. In addition, each subtask has the following constraints\
  \ on the inputs.\n- Subtask 1 (20 marks) : F = C − 1 (that is, the airline network\
  \ is a tree) and p = 1 for each direct flight.\n- Subtask 2 (30 marks) : There is\
  \ no constraint on the shape of the network, but for each direct flight, p = 1.\n\
  - Subtask 3 (50 marks) : There is no constraint on the shape of the network, but\
  \ for each direct flight, 0 ≤ p ≤ $10^5$.\n\n-----Sample Input-----\n4 5\n1 2 10\n\
  1 3 24\n2 3 2\n2 4 15\n3 4 7\n\n-----Sample Output-----\n19\n\nNote: Your program\
  \ should not print anything other than what is specified in the output format. Please\
  \ remove all diagnostic print statements before making your final submission. A\
  \ program with extraneous output will be treated as incorrect!"
"vc-preamble": "import Imports.AllImports\n\ndef find_max_route_cost (n : Nat) (edges\
  \ : List Edge) : Nat := sorry\n\ndef exists_path (edges : List Edge) (u v : Nat)\
  \ : Bool := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def shortest_path_cost (edges : List Edge) (u v : Nat) : Nat :=\
  \ sorry\n\ntheorem small_graph_path_costs {n : Nat} {edges : List Edge} \n  (h1\
  \ : n = 3)\n  (h2 : ∀ e ∈ edges, e.src ≤ 3 ∧ e.dst ≤ 3)\n  (h3 : ∀ e ∈ edges, e.cost\
  \ ≤ 100)\n  (h4 : edges.length ≤ 3)\n  (h5 : edges.length ≥ 2)\n  (h6 : ∀ e ∈ edges,\
  \ e.src ≠ e.dst) :\n  ∀ u v : Nat, u < n → v < n → u ≠ v →\n    if exists_path edges\
  \ u v then\n      shortest_path_cost edges u v ≤ find_max_route_cost n edges\n \
  \   else True := sorry\n"
"vc-theorems": "theorem symmetry_property {n : Nat} {edges : List Edge}\n  (h1 : n\
  \ = 3)\n  (h2 : ∀ e ∈ edges, e.src ≤ 3 ∧ e.dst ≤ 3)\n  (h3 : ∀ e ∈ edges, e.cost\
  \ ≤ 100)\n  (h4 : edges.length ≤ 3)\n  (h5 : edges.length ≥ 2)\n  (h6 : ∀ e ∈ edges,\
  \ e.src ≠ e.dst) :\n  find_max_route_cost n edges = \n  find_max_route_cost n (edges.map\
  \ (λ e => ⟨e.dst, e.src, e.cost⟩)) := sorry\n\n/--\ninfo: 19\n-/\n#guard_msgs in\n\
  #eval find_max_route_cost 4 [(1, 2, 10), (1, 3, 24), (2, 3, 2), (2, 4, 15), (3,\
  \ 4, 7)]\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval find_max_route_cost 4 [(1, 2,\
  \ 1), (2, 3, 1), (3, 4, 1)]\n\n/--\ninfo: 15\n-/\n#guard_msgs in\n#eval find_max_route_cost\
  \ 3 [(1, 2, 5), (2, 3, 10), (3, 1, 20)]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
