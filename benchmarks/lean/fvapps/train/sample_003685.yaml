"vc-description": "The central dogma of molecular biology is that DNA is transcribed\
  \ into RNA, which is then tranlsated into protein. RNA, like DNA, is a long strand\
  \ of nucleic acids held together by a sugar backbone (ribose in this case). Each\
  \ segment of three bases is called a codon. Molecular machines called ribosomes\
  \ translate the RNA codons into amino acid chains, called polypeptides which are\
  \ then folded into a protein. \n\nProtein sequences are easily visualized in much\
  \ the same way that DNA and RNA are, as large strings of letters. An important thing\
  \ to note is that the 'Stop' codons do not encode for a specific amino acid. Their\
  \ only function is to stop translation of the protein, as such they are not incorporated\
  \ into the polypeptide chain. 'Stop' codons should not be in the final protein sequence.\
  \ To save a you a lot of unnecessary (and boring) typing the keys and values for\
  \ your amino acid dictionary are provided.\n                         \nGiven a string\
  \ of RNA, create a funciton which translates the RNA into its protein sequence.\
  \ Note: the test cases will always produce a valid string.\n\n```python\nprotein('UGCGAUGAAUGGGCUCGCUCC')\
  \ returns 'CDEWARS'\n```\n\nIncluded as test cases is a real world example! The\
  \ last example test case encodes for a protein called green fluorescent protein;\
  \ once spliced into the genome of another organism, proteins like GFP allow biologists\
  \ to visualize cellular processes!\n\nAmino Acid Dictionary\n----------------------\n\
  \n```python\n    # Phenylalanine\n    'UUC':'F', 'UUU':'F',\n    # Leucine\n   \
  \ 'UUA':'L', 'UUG':'L', 'CUU':'L', 'CUC':'L','CUA':'L','CUG':'L', \n    # Isoleucine\n\
  \    'AUU':'I', 'AUC':'I', 'AUA':'I', \n    # Methionine\n    'AUG':'M', \n    #\
  \ Valine\n    'GUU':'V', 'GUC':'V', 'GUA':'V', 'GUG':'V', \n    # Serine\n    'UCU':'S',\
  \ 'UCC':'S', 'UCA':'S', 'UCG':'S', 'AGU':'S', 'AGC':'S', \n    # Proline\n    'CCU':'P',\
  \ 'CCC':'P', 'CCA':'P', 'CCG':'P', \n    # Threonine\n    'ACU':'T', 'ACC':'T',\
  \ 'ACA':'T', 'ACG':'T',\n    # Alanine\n    'GCU':'A', 'GCC':'A', 'GCA':'A', 'GCG':'A',\
  \ \n    # Tyrosine\n    'UAU':'Y', 'UAC':'Y', \n    # Histidine\n    'CAU':'H',\
  \ 'CAC':'H',\n    # Glutamine\n    'CAA':'Q', 'CAG':'Q', \n    # Asparagine\n  \
  \  'AAU':'N', 'AAC':'N', \n    # Lysine\n    'AAA':'K', 'AAG':'K',\n    # Aspartic\
  \ Acid\n    'GAU':'D', 'GAC':'D', \n    # Glutamic Acid\n    'GAA':'E', 'GAG':'E',\n\
  \    # Cystine\n    'UGU':'C', 'UGC':'C',\n    # Tryptophan\n    'UGG':'W', \n \
  \   # Arginine\n    'CGU':'R', 'CGC':'R', 'CGA':'R', 'CGG':'R', 'AGA':'R', 'AGG':'R',\
  \ \n    # Glycine\n    'GGU':'G',  'GGC':'G', 'GGA':'G', 'GGG':'G', \n    # Stop\
  \ codon\n    'UAA':'Stop', 'UGA':'Stop', 'UAG':'Stop'\n```"
"vc-preamble": "import Imports.AllImports\n\ndef validCodon (c : String) : Bool :=\
  \ sorry\n\ndef protein (rna : String) : String := sorry\n\n\ndef isStopCodon (codon\
  \ : String) : Bool :=\n  codon = \"UAA\" || codon = \"UAG\" || codon = \"UGA\"\n\
  \n\ndef charsToCodon (chars : List Char) : String :=\n  String.mk chars\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def groupsOf3 (xs : List α) : List (List α) :=\n  match xs with\n\
  \  | [] => []\n  | x₁::xs₁ => match xs₁ with\n    | [] => [[x₁]]\n    | x₂::xs₂\
  \ => match xs₂ with\n      | [] => [[x₁, x₂]]\n      | x₃::xs₃ => [x₁, x₂, x₃]::(groupsOf3\
  \ xs₃)\n"
"vc-theorems": "theorem protein_length_le_input_div_3 {rna : String} (h : protein\
  \ rna ≠ \"\") :\n  (protein rna).length ≤ rna.length / 3 := sorry\n\n\ntheorem protein_valid_acids\
  \ {rna : String} (h : protein rna ≠ \"\") :\n  ∀ c, c ∈ (protein rna).data → \n\
  \    c ∈ ['F', 'L', 'I', 'M', 'V', 'S', 'P', 'T', 'A', 'G', 'Y', 'C', 'H', 'N',\
  \ 'K', 'D', 'E', 'Q', 'W', 'R', 'G'] := sorry\n\n\ntheorem protein_stops_at_first_stop\
  \ {rna : String} (h : protein rna ≠ \"\") :\n  let codons := (rna.data.take (rna.length\
  \ / 3 * 3)) |> groupsOf3 |>.map charsToCodon\n  let firstStop := match List.findIdx?\
  \ isStopCodon codons with\n    | none => codons.length\n    | some n => n\n  (protein\
  \ rna).length ≤ firstStop := sorry\n\n\ntheorem protein_returns_string_length {rna\
  \ : String} (h : ∀ c, c ∈ rna.data → c ∈ ['A', 'U', 'G', 'C']) :\n  protein rna\
  \ ≠ \"\" → (protein rna).length ≤ rna.length / 3 := sorry\n\n/--\ninfo: 'M'\n-/\n\
  #guard_msgs in\n#eval protein \"AUGUGA\"\n\n/--\ninfo: 'CDEWARS'\n-/\n#guard_msgs\
  \ in\n#eval protein \"UGCGAUGAAUGGGCUCGCUCC\"\n\n/--\ninfo: 'MLQVHWKRRGKTS'\n-/\n\
  #guard_msgs in\n#eval protein \"AUGCUUCAAGUGCACUGGAAAAGGAGAGGGAAAACCAGUUGA\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
