vc-description: |-
  Find the area of a rectangle when provided with one diagonal and one side of the rectangle. If the input diagonal is less than or equal to the length of the side, return "Not a rectangle". If the resultant area has decimals round it to two places.

  `This kata is meant for beginners. Rank and upvote to bring it out of beta!`
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def area (d l : Float) : Sum Float String := sorry 

  theorem area_properties (d l : Float) (h1 : d ≥ 0) (h2 : l ≥ 0) (h3 : d ≤ 1000) (h4 : l ≤ 1000) :
    let result := area d l
    if d ≤ l then
      result = Sum.inr "Not a rectangle"
    else
      (∃ r : Float, result = Sum.inl r) ∧ 
      (∃ r : Float, result = Sum.inl r → r ≥ 0) ∧
      (∃ r : Float, result = Sum.inl r → r ≤ d * d) ∧
      (∃ r : Float, result = Sum.inl r → 
        let h := Float.sqrt (d*d - l*l)
        (r - l * h).abs < 0.1) := sorry
vc-theorems: |
  theorem square_diagonal (d : Float) (h1 : d ≥ 0) (h2 : d ≤ 1000) :
    let l := d / Float.sqrt 2
    let result := area d l
    result ≠ Sum.inr "Not a rectangle" →
    ∃ r : Float, result = Sum.inl r ∧ (r - l * l).abs < 0.1 := sorry


  theorem invalid_inputs_negative (d l : Float) (h1 : d < 0) :
    let result := area d l
    result = Sum.inr "Not a rectangle" := sorry


  theorem invalid_inputs_nan (d l : Float) (h1 : Float.isNaN d ∨ Float.isNaN l) :
    let result := area d l
    result = Sum.inr "Not a rectangle" := sorry

  /--
  info: 12.0
  -/
  #guard_msgs in
  #eval area 5 4

  /--
  info: 'Not a rectangle'
  -/
  #guard_msgs in
  #eval area 6 8

  /--
  info: 48.0
  -/
  #guard_msgs in
  #eval area 10 6
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
