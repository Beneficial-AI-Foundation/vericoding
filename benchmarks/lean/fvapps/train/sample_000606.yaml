"vc-description": "Given the list of numbers, you are to sort them in non decreasing\
  \ order.\n\n-----Input-----\nt – the number of numbers in list, then t lines follow\
  \ [t <= 10^6]. \n\nEach line contains one integer: N [0 <= N <= 10^6]\n\n-----Output-----\n\
  Output given numbers in non decreasing order.\n\n-----Example-----\nInput:\n5\n\
  5\n3\n6\n7\n1\n\nOutput:\n1\n3\n5\n6\n7"
"vc-preamble": "import Imports.AllImports\n\ndef sort_numbers (nums : List Int) :\
  \ List String :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isSorted (l : List Int) : Bool :=\n  sorry\n"
"vc-theorems": "theorem sort_numbers_ascending (nums : List Int) :\n  let result :=\
  \ sort_numbers nums;\n  result.length = nums.length ∧\n  isSorted (result.map String.toInt!)\
  \ := by\n  sorry\n\n\ntheorem sort_numbers_idempotent_list (nums : List Int) :\n\
  \  sort_numbers nums = sort_numbers nums := by\n  sorry\n\n\ntheorem sort_numbers_bounds\
  \ (nums : List Int) (h : nums ≠ []) :\n  let result := sort_numbers nums\n  let\
  \ vals := result.map String.toInt!\n  vals.head! ≤ vals.getLast! ∧ \n  ∀ x ∈ vals,\
  \ vals.head! ≤ x ∧ x ≤ vals.getLast! := by\n  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
