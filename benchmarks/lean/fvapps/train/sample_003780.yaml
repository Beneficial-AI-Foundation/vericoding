"vc-description": "You are going to be given an array of integers. Your job is to\
  \ take that array and find an index N where the sum of the integers to the left\
  \ of N is equal to the sum of the integers to the right of N. If there is no index\
  \ that would make this happen, return `-1`.\n\n__For example:__\n\nLet's say you\
  \ are given the array `{1,2,3,4,3,2,1}`:  \nYour function will return the index\
  \ `3`, because at the 3rd position of the array, the sum of left side of the index\
  \ (`{1,2,3}`) and the sum of the right side of the index (`{3,2,1}`) both equal\
  \ `6`.\n\n\nLet's look at another one.  \nYou are given the array `{1,100,50,-51,1,1}`:\
  \  \nYour function will return the index `1`, because at the 1st position of the\
  \ array, the sum of left side of the index (`{1}`) and the sum of the right side\
  \ of the index (`{50,-51,1,1}`) both equal `1`.\n\nLast one:  \nYou are given the\
  \ array `{20,10,-80,10,10,15,35}`  \nAt index 0 the left side is `{}`  \nThe right\
  \ side is `{10,-80,10,10,15,35}`  \nThey both are equal to `0` when added. (Empty\
  \ arrays are equal to 0 in this problem)  \nIndex 0 is the place where the left\
  \ side and right side are equal.  \n\nNote: Please remember that in most programming/scripting\
  \ languages the index of an array starts at 0.\n\n__Input:__  \nAn integer array\
  \ of length `0 < arr < 1000`. The numbers in the array can be any integer positive\
  \ or negative.\n\n__Output:__  \nThe lowest index `N` where the side to the left\
  \ of `N` is equal to the side to the right of `N`. If you do not find an index that\
  \ fits these rules, then you will return `-1`.\n\n__Note:__  \nIf you are given\
  \ an array with multiple answers, return the lowest correct index."
"vc-preamble": "import Imports.AllImports\n\ndef find_even_index (arr : List Int)\
  \ : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sum_list (arr : List Int) : Int :=\n  sorry\n\n\n"
"vc-theorems": "theorem find_even_index_centered {n : Nat} :\n  let arr := List.replicate\
  \ n 1 ++ [0] ++ List.replicate n 1\n  find_even_index arr = n\n  := sorry\n\n\n\
  theorem find_even_index_single_element :\n  find_even_index [0] = 0 := sorry\n\n\
  \ntheorem find_even_index_single_nonzero :\n  find_even_index [1] = 0 := sorry\n\
  \n\ntheorem find_even_index_all_zeros :\n  find_even_index [0, 0, 0] = 0 := sorry\n\
  \n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval find_even_index [1, 2, 3, 4, 3, 2, 1]\n\
  \n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval find_even_index [1, 100, 50, -51, 1, 1]\n\
  \n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval find_even_index [20, 10, -80, 10, 10,\
  \ 15, 35]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
