"vc-description": "A Tic-Tac-Toe board is given as a string array board. Return True\
  \ if and only if it is possible to reach this board position during the course of\
  \ a valid tic-tac-toe game.\n\nThe board is a 3 x 3 array, and consists of characters\
  \ \" \", \"X\", and \"O\".  The \" \" character represents an empty square.\n\n\
  Here are the rules of Tic-Tac-Toe:\n\n\n       Players take turns placing characters\
  \ into empty squares (\" \").\n       The first player always places \"X\" characters,\
  \ while the second player always places \"O\" characters.\n       \"X\" and \"O\"\
  \ characters are always placed into empty squares, never filled ones.\n       The\
  \ game ends when there are 3 of the same (non-empty) character filling any row,\
  \ column, or diagonal.\n       The game also ends if all squares are non-empty.\n\
  \       No more moves can be played if the game is over.\n\n\n\nExample 1:\nInput:\
  \ board = [\"O  \", \"   \", \"   \"]\nOutput: false\nExplanation: The first player\
  \ always plays \"X\".\n\nExample 2:\nInput: board = [\"XOX\", \" X \", \"   \"]\n\
  Output: false\nExplanation: Players take turns making moves.\n\nExample 3:\nInput:\
  \ board = [\"XXX\", \"   \", \"OOO\"]\nOutput: false\n\nExample 4:\nInput: board\
  \ = [\"XOX\", \"O O\", \"XOX\"]\nOutput: true\n\n\nNote:\n\n\n       board is a\
  \ length-3 array of strings, where each string board[i] has length 3.\n       Each\
  \ board[i][j] is a character in the set {\" \", \"X\", \"O\"}."
"vc-preamble": "import Imports.AllImports\n\ndef validTicTacToe (board : List String)\
  \ : Bool := sorry\n\ndef hasWin (board : List String) (player : Char) : Bool :=\
  \ sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def countChar (board : List String) (c : Char) : Nat := sorry\n\
  \ntheorem board_dimensions {board : List String} (h : validTicTacToe board) :\n\
  \  board.length = 3 ∧ \n  (∀ row ∈ board, row.length = 3) ∧\n  (∀ row ∈ board, ∀\
  \ c ∈ row.data, c = 'X' ∨ c = 'O' ∨ c = ' ') := sorry\n"
"vc-theorems": "theorem count_invariants {board : List String} (h : validTicTacToe\
  \ board) :\n  let x_count := countChar board 'X'\n  let o_count := countChar board\
  \ 'O'\n  o_count ≤ x_count ∧ x_count - o_count ≤ 1 := sorry\n\n\ntheorem winner_invariants\
  \ {board : List String} (h : validTicTacToe board) :\n  let x_count := countChar\
  \ board 'X'\n  let o_count := countChar board 'O'\n  let x_wins := hasWin board\
  \ 'X'\n  let o_wins := hasWin board 'O'\n  ¬(x_wins ∧ o_wins) ∧\n  ¬(x_wins ∧ x_count\
  \ ≤ o_count) ∧ \n  ¬(o_wins ∧ x_count ≠ o_count) := sorry\n\n/--\ninfo: False\n\
  -/\n#guard_msgs in\n#eval validTicTacToe [\"O  \", \"   \", \"   \"]\n\n/--\ninfo:\
  \ False\n-/\n#guard_msgs in\n#eval validTicTacToe [\"XOX\", \" X \", \"   \"]\n\n\
  /--\ninfo: True\n-/\n#guard_msgs in\n#eval validTicTacToe [\"XOX\", \"O O\", \"\
  XOX\"]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
