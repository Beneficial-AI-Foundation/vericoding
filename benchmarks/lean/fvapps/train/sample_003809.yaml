"vc-description": "# Story\n\nYou and a group of friends are earning some extra money\
  \ in the school holidays by re-painting the numbers on people's letterboxes for\
  \ a small fee.\n\nSince there are 10 of you in the group each person just concentrates\
  \ on painting one digit! For example, somebody will paint only the ```1```'s, somebody\
  \ else will paint only the ```2```'s and so on...\n\nBut at the end of the day you\
  \ realise not everybody did the same amount of work.\n\nTo avoid any fights you\
  \ need to distribute the money fairly. That's where this Kata comes in.\n\n# Kata\
  \ Task\n\nGiven the ```start``` and ```end``` letterbox numbers, write a method\
  \ to return the frequency of all 10 digits painted.\n\n# Example\n\nFor ```start```\
  \ = 125, and ```end``` = 132\n\nThe letterboxes are\n* 125 = ```1```, ```2```, ```5```\n\
  * 126 = ```1```, ```2```, ```6```\n* 127 = ```1```, ```2```, ```7```\n* 128 = ```1```,\
  \ ```2```, ```8```\n* 129 = ```1```, ```2```, ```9```\n* 130 = ```1```, ```3```,\
  \ ```0```\n* 131 = ```1```, ```3```, ```1```\n* 132 = ```1```, ```3```, ```2```\n\
  \nThe digit frequencies are 1 x ```0```, 9 x ```1```, 6 x ```2``` etc...\n\nand\
  \ so the method would return ```[1,9,6,3,0,1,1,1,1,1]```\n\n# Notes\n\n* 0 < ```start```\
  \ <= ```end```\n* In C, the returned value will be free'd."
"vc-preamble": "import Imports.AllImports\n\ndef paint_letterboxes (start: Nat) (finish:\
  \ Nat) : List Nat := sorry\n\ndef str_count_digits (n: Nat) : List Nat := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def toString (n: Nat) : String := sorry\ndef sum_list (l: List\
  \ Nat) : Nat := sorry\n"
"vc-theorems": "theorem paint_letterboxes_range {start finish : Nat} (h: start ≤ finish)\
  \ :\n  let result := paint_letterboxes start finish\n  List.length result = 10 ∧\
  \ \n  (∀ x ∈ result, x ≥ 0) := sorry\n\n\ntheorem paint_letterboxes_single_number\
  \ (n: Nat) :\n  paint_letterboxes n n = str_count_digits n := sorry\n\n\ntheorem\
  \ paint_letterboxes_zero :\n  paint_letterboxes 0 0 = [1, 0, 0, 0, 0, 0, 0, 0, 0,\
  \ 0] := sorry\n\n\ntheorem paint_letterboxes_non_negative {a b : Nat} :\n  ∀ x ∈\
  \ paint_letterboxes a b, x ≥ 0 := sorry\n\n/--\ninfo: [1, 9, 6, 3, 0, 1, 1, 1, 1,\
  \ 1]\n-/\n#guard_msgs in\n#eval paint_letterboxes 125 132\n\n/--\ninfo: [2, 2, 0,\
  \ 0, 0, 0, 0, 0, 0, 0]\n-/\n#guard_msgs in\n#eval paint_letterboxes 1001 1001\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
