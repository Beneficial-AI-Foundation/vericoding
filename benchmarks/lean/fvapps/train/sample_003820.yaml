"vc-description": "Build a function `sumNestedNumbers`/`sum_nested_numbers` that finds\
  \ the sum of all numbers in a series of nested arrays raised to the power of their\
  \ respective nesting levels.  Numbers in the outer most array should be raised to\
  \ the power of 1.\n\nFor example,\n\nshould return `1 + 2*2 + 3 + 4*4 + 5*5*5 ===\
  \ 149`"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sumNestedNumbers : NestedList Int → Int := sorry\n\ndef List.sum\
  \ : List Int → Int \n  | [] => 0\n  | x :: xs => x + List.sum xs\n"
"vc-theorems": "theorem flat_list_sum (lst : List Int) : \n  sumNestedNumbers (NestedList.list\
  \ (lst.map NestedList.atom)) = lst.sum := sorry\n\n\ntheorem single_element (x :\
  \ Int) : \n  sumNestedNumbers (NestedList.list [NestedList.atom x]) = x := sorry\n\
  \n\ntheorem single_nested_element (x : Int) :\n  sumNestedNumbers (NestedList.list\
  \ [NestedList.list [NestedList.atom x]]) = x * x := sorry\n\n\ntheorem double_nested_element\
  \ (x : Int) :\n  sumNestedNumbers (NestedList.list [NestedList.list [NestedList.list\
  \ [NestedList.atom x]]]) = \n    x * x * x := sorry\n\n/--\ninfo: 0\n-/\n#guard_msgs\
  \ in\n#eval sum_nested_numbers [[0]]\n\n/--\ninfo: 15\n-/\n#guard_msgs in\n#eval\
  \ sum_nested_numbers [1, 2, 3, 4, 5]\n\n/--\ninfo: 149\n-/\n#guard_msgs in\n#eval\
  \ sum_nested_numbers [1, [2], 3, [4, [5]]]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
