"vc-description": "You are given two integer sequences, each of length N: a_1, ...,\
  \ a_N and b_1, ..., b_N.\nThere are N^2 ways to choose two integers i and j such\
  \ that 1 \\leq i, j \\leq N. For each of these N^2 pairs, we will compute a_i +\
  \ b_j and write it on a sheet of paper.\nThat is, we will write N^2 integers in\
  \ total.\nCompute the XOR of these N^2 integers.\nDefinition of XOR\nThe XOR of\
  \ integers c_1, c_2, ..., c_m is defined as follows:\n - Let the XOR be X. In the\
  \ binary representation of X, the digit in the 2^k's place (0 \\leq k; k is an integer)\
  \ is 1 if there are an odd number of integers among c_1, c_2, ...c_m whose binary\
  \ representation has 1 in the 2^k's place, and 0 if that number is even.\nFor example,\
  \ let us compute the XOR of 3 and 5. The binary representation of 3 is 011, and\
  \ the binary representation of 5 is 101, thus the XOR has the binary representation\
  \ 110, that is, the XOR is 6.\n\n-----Constraints-----\n - All input values are\
  \ integers.\n - 1 \\leq N \\leq 200,000\n - 0 \\leq a_i, b_i < 2^{28}\n\n-----Input-----\n\
  Input is given from Standard Input in the following format:\nN\na_1 a_2 ... a_N\n\
  b_1 b_2 ... b_N\n\n-----Output-----\nPrint the result of the computation.\n\n-----Sample\
  \ Input-----\n2\n1 2\n3 4\n\n-----Sample Output-----\n2\n\nOn the sheet, the following\
  \ four integers will be written: 4(1+3), 5(1+4), 5(2+3) and 6(2+4)."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def compute_xor_sum (N : Nat) (A B : List Nat) : Nat :=\n  sorry\n\
  \n/-- For any valid input arrays A and B of length N, the output is non-negative\
  \ and less than 2^30 -/"
"vc-theorems": "theorem output_bounds (N : Nat) (A B : List Nat) (h1 : A.length =\
  \ N) (h2 : B.length = N) (h3 : ∀ x ∈ A, x ≤ 1000000) (h4 : ∀ x ∈ B, x ≤ 1000000)\
  \ :\n  compute_xor_sum N A B ≥ 0 ∧ compute_xor_sum N A B < 2^30 :=\n  sorry\n\n\
  /-- The result is symmetric with respect to input arrays -/\n\ntheorem symmetry\
  \ (N : Nat) (A B : List Nat) (h1 : A.length = N) (h2 : B.length = N) :\n  compute_xor_sum\
  \ N A B = compute_xor_sum N B A :=\n  sorry\n\n/-- When both input arrays are identical,\
  \ the result is even -/\n\ntheorem identical_arrays (N : Nat) (A : List Nat) (h\
  \ : A.length = N) :\n  2 ∣ compute_xor_sum N A A :=\n  sorry\n\n/-- When both input\
  \ arrays contain only zeros, the result is zero -/\n\ntheorem zero_arrays (N : Nat)\
  \ :\n  compute_xor_sum N (List.replicate N 0) (List.replicate N 0) = 0 :=\n  sorry\n\
  \n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval compute_xor_sum 2 [1, 2] [3, 4]\n\n/--\n\
  info: 8\n-/\n#guard_msgs in\n#eval compute_xor_sum 6 [4, 6, 0, 0, 3, 3] [0, 5, 6,\
  \ 5, 0, 3]\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval compute_xor_sum 5 [1, 2, 3,\
  \ 4, 5] [1, 2, 3, 4, 5]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
