"vc-description": "In this Kata, you will be given a number and your task will be\
  \ to return the nearest prime number. \n\n```Haskell\nsolve(4) = 3. The nearest\
  \ primes are 3 and 5. If difference is equal, pick the lower one. \nsolve(125) =\
  \ 127\n```\n\nWe'll be testing for numbers up to `1E10`. `500` tests.\n\nMore examples\
  \ in test cases. \n\nGood luck!\n\nIf you like Prime Katas, you will enjoy this\
  \ Kata: [Simple Prime Streaming](https://www.codewars.com/kata/5a908da30025e995880000e3)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve (n : Int) : Int := sorry\n\ndef isPrime (n : Int) : Bool\
  \ := sorry\n"
"vc-theorems": "theorem solve_returns_closest_prime (n : Int) (h : n ≥ 2) : \n  let\
  \ result := solve n\n  isPrime result = true ∧ \n  ∀ i, isPrime i = true → (n -\
  \ i).natAbs ≥ (n - result).natAbs := sorry\n\n\ntheorem solve_returns_input_if_prime\
  \ (n : Int) (h1 : n ≥ 2) (h2 : isPrime n = true) : \n  solve n = n := sorry\n\n\n\
  theorem solve_handles_small_numbers (n : Int) (h : n ≤ 1) :\n  solve n = 2 ∧ isPrime\
  \ (solve n) = true := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
