"vc-description": "Vova and Marina love offering puzzles to each other. Today Marina\
  \ offered Vova to cope with the following task.\n\nVova has a non-directed graph\
  \ consisting of n vertices and m edges without loops and multiple edges. Let's define\
  \ the operation of contraction two vertices a and b that are not connected by an\
  \ edge. As a result of this operation vertices a and b are deleted and instead of\
  \ them a new vertex x is added into the graph, and also edges are drawn from it\
  \ to all vertices that were connected with a or with b (specifically, if the vertex\
  \ was connected with both a and b, then also exactly one edge is added from x to\
  \ it). Thus, as a result of contraction again a non-directed graph is formed, it\
  \ contains no loops nor multiple edges, and it contains (n - 1) vertices.\n\nVova\
  \ must perform the contraction an arbitrary number of times to transform the given\
  \ graph into a chain of the maximum length. A chain of length k (k ≥ 0) is a connected\
  \ graph whose vertices can be numbered with integers from 1 to k + 1 so that the\
  \ edges of the graph connect all pairs of vertices (i, i + 1) (1 ≤ i ≤ k) and only\
  \ them. Specifically, the graph that consists of one vertex is a chain of length\
  \ 0. The vertices that are formed as a result of the contraction are allowed to\
  \ be used in the following operations of contraction.\n\n [Image] The picture illustrates\
  \ the contraction of two vertices marked by red. \n\nHelp Vova cope with his girlfriend's\
  \ task. Find the maximum length of the chain that can be obtained from the resulting\
  \ graph or else determine that it is impossible to obtain the chain.\n\n\n-----Input-----\n\
  \nThe first line contains two integers n, m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 100 000) — the\
  \ number of vertices and the number of edges in the original graph.\n\nNext m lines\
  \ contain the descriptions of edges in the format a_{i}, b_{i} (1 ≤ a_{i}, b_{i}\
  \ ≤ n, a_{i} ≠ b_{i}), which means that there is an edge between vertices a_{i}\
  \ and b_{i}. It is guaranteed that there is at most one edge between each pair of\
  \ vertexes.\n\n\n-----Output-----\n\nIf it is impossible to obtain a chain from\
  \ the given graph, print  - 1. Otherwise, print the maximum possible number of edges\
  \ in the resulting chain.\n\n\n-----Examples-----\nInput\n5 4\n1 2\n2 3\n3 4\n3\
  \ 5\n\nOutput\n3\n\nInput\n4 6\n1 2\n2 3\n1 3\n3 4\n2 4\n1 4\n\nOutput\n-1\n\nInput\n\
  4 2\n1 3\n2 4\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first sample test you\
  \ can contract vertices 4 and 5 and obtain a chain of length 3.\n\nIn the second\
  \ sample test it is initially impossible to contract any pair of vertexes, so it\
  \ is impossible to achieve the desired result.\n\nIn the third sample test you can\
  \ contract vertices 1 and 2 and obtain a chain of length 2."
"vc-preamble": "import Imports.AllImports\n\ndef solve_max_chain_length (n m : Nat)\
  \ (edges : List (Nat × Nat)) : Int := sorry\n\ndef to_adj_matrix (n : Nat) (edges\
  \ : List (Nat × Nat)) : List (List Nat) := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_bipartite (adj : List (List Nat)) (colors : List Int) (start\
  \ n : Nat) : Bool := sorry\n\ntheorem bipartite_property (n m : Nat) (edges : List\
  \ (Nat × Nat)) :\n  let result := solve_max_chain_length n m edges\n  let adj :=\
  \ to_adj_matrix n edges\n  ∀ colors : List Int,\n  result ≠ -1 →\n  colors.length\
  \ = n →\n  (∀ i < n, colors[i]! = -1 ∨ colors[i]! = 0 ∨ colors[i]! = 1) →\n  ∀ start\
  \ < n,\n  is_bipartite adj colors start n = true := sorry\n"
"vc-theorems": "theorem empty_graph_property (n m : Nat) (edges : List (Nat × Nat))\
  \ :\n  m = 0 →\n  solve_max_chain_length n m edges = 0 := sorry\n\n/--\ninfo: 3\n\
  -/\n#guard_msgs in\n#eval solve_max_chain_length 5 4 [(1, 2), (2, 3), (3, 4), (3,\
  \ 5)]\n\n/--\ninfo: -1\n-/\n#guard_msgs in\n#eval solve_max_chain_length 4 6 [(1,\
  \ 2), (2, 3), (1, 3), (3, 4), (2, 4), (1, 4)]\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n\
  #eval solve_max_chain_length 4 2 [(1, 3), (2, 4)]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded"
