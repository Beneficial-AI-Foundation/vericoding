"vc-description": "Master Oogway has forseen that a panda named Po will be the dragon\
  \ warrior, and the master of Chi. But he did not tell anyone about the spell that\
  \ would make him the master of Chi, and has left Po confused. Now Po has to defeat\
  \ Kai, who is the super villian, the strongest of them all. Po needs to master Chi,\
  \ and he finds a spell which unlocks his powerful Chi. But the spell is rather strange.\
  \ It asks Po to calculate the factorial of a number! Po is very good at mathematics,\
  \ and thinks that this is very easy. So he leaves the spell, thinking it's a hoax.\
  \ But little does he know that this can give him the ultimate power of Chi. Help\
  \ Po by solving the spell and proving that it's not a hoax.\n\n-----Input-----\n\
  First line of input contains an integer T denoting the number of test cases.\nThe\
  \ next T lines contain an integer N.\n\n-----Output-----\nFor each test case, print\
  \ a single line containing the solution to the spell which is equal to factorial\
  \ of N, i.e. N!. Since the output could be large, output it modulo 1589540031(Grand\
  \ Master Oogway's current age).\n\n-----Constraints-----\n- 1 ≤ T ≤ 100000\n- 1\
  \ ≤ N ≤ 100000\n\n-----Example-----\nInput:\n4\n1\n2\n3\n4\n\nOutput:\n1\n2\n6\n\
  24"
"vc-preamble": "import Imports.AllImports\n\ndef modInv (a n : Nat) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_factorial_spell (input : List Nat) : List Nat :=\n  sorry\n"
"vc-theorems": "theorem solve_factorial_spell_output_length \n  (input : List Nat)\
  \ \n  : List.length (solve_factorial_spell input) = List.length input :=\nsorry\n\
  \n\ntheorem solve_factorial_spell_modulo_bounds\n  (input : List Nat)\n  (i : Nat)\n\
  \  (h : i < List.length (solve_factorial_spell input))\n  : (List.get! (solve_factorial_spell\
  \ input) i) < 1589540031 :=\nsorry\n\n\ntheorem solve_factorial_spell_zero_case\n\
  \  (input : List Nat)\n  (i : Nat) \n  (h : i < List.length input)\n  (h2 : List.get!\
  \ input i = 0)\n  : List.get! (solve_factorial_spell input) i = 1 :=\nsorry\n\n\n\
  theorem solve_factorial_spell_consecutive_ratio\n  (input : List Nat)\n  (i : Nat)\n\
  \  (h1 : i + 1 < List.length input)\n  (h2 : List.get! input (i + 1) = List.get!\
  \ input i + 1)\n  (h3 : List.get! input i > 0)\n  : (List.get! (solve_factorial_spell\
  \ input) (i + 1) * \n     (modInv (List.get! (solve_factorial_spell input) i) 1589540031))\
  \ % 1589540031 = \n    List.get! input (i + 1) :=\nsorry\n\n\ntheorem solve_factorial_spell_input_bound\n\
  \  (input : List Nat)\n  (h : ∃ i, i < List.length input ∧ List.get! input i > 100000)\n\
  \  : solve_factorial_spell input = [] :=\nsorry\n\n/--\ninfo: expected1\n-/\n#guard_msgs\
  \ in\n#eval solve_factorial_spell [1, 2, 3, 4]\n\n/--\ninfo: expected2\n-/\n#guard_msgs\
  \ in\n#eval solve_factorial_spell [5]\n\n/--\ninfo: expected3\n-/\n#guard_msgs in\n\
  #eval solve_factorial_spell [6, 7]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
