"vc-description": "You have a very large square wall and a circular dartboard placed\
  \ on the wall. You have been challenged to throw darts into the board blindfolded. Darts\
  \ thrown at the wall are represented as an array of points on a 2D plane. \nReturn the\
  \ maximum number of points that are within or lie on any circular dartboard of radius r.\n\
   \nExample 1:\n\nInput: points = [[-2,0],[2,0],[0,2],[0,-2]], r = 2\nOutput: 4\n\
  Explanation: Circle dartboard with center in (0,0) and radius = 2 contain all points.\n\
  \nExample 2:\n\nInput: points = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5\n\
  Output: 5\nExplanation: Circle dartboard with center in (0,4) and radius = 5 contain\
  \ all points except the point (7,8).\n\nExample 3:\nInput: points = [[-2,0],[2,0],[0,2],[0,-2]],\
  \ r = 1\nOutput: 1\n\nExample 4:\nInput: points = [[1,2],[3,5],[1,-1],[2,3],[4,1],[1,3]],\
  \ r = 2\nOutput: 4\n\n \nConstraints:\n\n1 <= points.length <= 100\npoints[i].length\
  \ == 2\n-10^4 <= points[i][0], points[i][1] <= 10^4\n1 <= r <= 5000"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def numPoints (points : List Point) (r : Float) : Nat :=\n  sorry\n"
"vc-theorems": "theorem numPoints_bounds {points : List Point} {r : Float} \n  (h1\
  \ : r > 0)\n  (h2 : points ≠ []) :\n  1 ≤ numPoints points r ∧ numPoints points\
  \ r ≤ points.length :=\nsorry\n\n\ntheorem numPoints_tiny_radius {points : List\
  \ Point} \n  (h1 : points ≠ [])\n  (h2 : r = 0.1) :\n  numPoints points r = 1 :=\n\
  sorry\n\n\ntheorem numPoints_huge_radius {points : List Point}\n  (h1 : points ≠\
  \ [])\n  (h2 : r = 1000) :\n  numPoints points r = points.length :=\nsorry\n\n\n\
  theorem numPoints_shuffle {points perm : List Point} {r : Float}\n  (h1 : r > 0)\n\
  \  (h2 : perm.length = points.length)\n  (h3 : ∀ p, p ∈ points ↔ p ∈ perm) :\n \
  \ numPoints points r = numPoints perm r :=\nsorry\n\n\ntheorem numPoints_single_point\
  \ {r : Float}\n  (h : r > 0) :\n  numPoints [Point.mk 0 0] r = 1 :=\nsorry\n\n\n\
  theorem numPoints_exact_radius :\n  numPoints [Point.mk 0 0, Point.mk 2 0] 1 = 2\
  \ :=\nsorry\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval numPoints [[-2, 0], [2, 0],\
  \ [0, 2], [0, -2]] 2\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval numPoints [[-3,\
  \ 0], [3, 0], [2, 6], [5, 4], [0, 9], [7, 8]] 5\n\n/--\ninfo: 4\n-/\n#guard_msgs\
  \ in\n#eval numPoints [[1, 2], [3, 5], [1, -1], [2, 3], [4, 1], [1, 3]] 2\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
