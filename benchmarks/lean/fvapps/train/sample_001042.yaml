"vc-description": "Henry and Derek are waiting on a room, eager to join the Snackdown\
  \ 2016 Qualifier Round. They decide to pass the time by playing a game.  \nIn this\
  \ game's setup, they write N positive integers on a blackboard. Then the players\
  \ take turns, starting with Henry. In a turn, a player selects one of the integers,\
  \ divides it by 2, 3, 4, 5 or 6, and then takes the floor to make it an integer\
  \ again. If the integer becomes 0, it is erased from the board. The player who makes\
  \ the last move wins.  \n\nHenry and Derek are very competitive, so aside from wanting\
  \ to win Snackdown, they also want to win this game. Assuming they play with the\
  \ optimal strategy, your task is to predict who wins the game.  \n\n-----Input-----\n\
  The first line of the input contains an integer T denoting the number of test cases.\
  \ The description of T test cases follows.\nThe first line of each test case contains\
  \ a single integer N denoting the number of integers they wrote on the board. The\
  \ second line contains N space-separated integers A1, A2, ..., AN denoting the integers\
  \ themselves.\n\n-----Output-----\nFor each test case, output a single line containing\
  \ either “Henry” or “Derek” (without quotes), denoting the winner of the game.\n\
  \n-----Constraints-----\n- 1 ≤ T ≤ 1000\n- 1 ≤ N ≤ 100\n- 1 ≤ Ai ≤ 1018\n\n-----Example-----\n\
  Input:2\n2\n3 4\n3\n1 3 5\n\nOutput:Henry\nDerek\n\n-----Explanation-----\nExample\
  \ case 1. In this test case, the numbers on the board are [3,4]. Henry can win by\
  \ selecting 4 and then dividing it by 2. The integers on the board are now [3,2].\
  \ Derek now has a couple of choices:\n- Derek can divide 2 by 3, 4, 5 or 6, making\
  \ it 0 and removing it. Now only one integer remains on the board, 3, and Henry\
  \ can just divide it by 6 to finish, and win, the game.\n- Derek can divide 3 by\
  \ 4, 5 or 6, making it 0 and removing it. Now only one integer remains on the board,\
  \ 2, and Henry can just divide it by 6 to finish, and win, the game.\n- Derek can\
  \ divide 2 by 2. Now the integers are [1,3]. Henry can respond by dividing 3 by\
  \ 3. The integers are now [1,1]. Now Derek has no choice but to divide 1 by 2, 3,\
  \ 4, 5 or 6 and remove it (because it becomes 0). Henry can respond by dividing\
  \ the remaining 1 by 2 to finish, and win, the game.\n- Derek can divide 3 by 2\
  \ or 3. Now the integers are [1,2]. Henry can respond by dividing 2 by 2. The integers\
  \ are now [1,1]. This leads to a situation as in the previous case and Henry wins."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def predict_winner (n : Nat) (nums : List Nat) : String := sorry\n\
  \ntheorem predict_winner_valid_output (n : Nat) (nums : List Nat) :\n  nums.length\
  \ > 0 → \n  let result := predict_winner n nums\n  result = \"Derek\" ∨ result =\
  \ \"Henry\" := sorry\n"
"vc-theorems": "theorem predict_winner_small_numbers (n : Nat) (nums : List Nat) :\n\
  \  nums.length > 0 →\n  nums.length ≤ 10 →\n  (∀ x ∈ nums, x ≤ 5) →\n  let result\
  \ := predict_winner n nums\n  result = \"Derek\" ∨ result = \"Henry\" := sorry\n\
  \n\ntheorem predict_winner_multiples_of_four (n : Nat) (nums : List Nat) :\n  nums.length\
  \ > 0 →\n  nums.length ≤ 100 →\n  (∀ x ∈ nums, x % 4 = 0) →\n  ∃ result, predict_winner\
  \ n nums = result := sorry\n\n/--\ninfo: 'Henry'\n-/\n#guard_msgs in\n#eval predict_winner\
  \ 2 [3, 4]\n\n/--\ninfo: 'Derek'\n-/\n#guard_msgs in\n#eval predict_winner 3 [1,\
  \ 3, 5]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
