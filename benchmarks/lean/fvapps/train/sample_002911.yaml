"vc-description": "Transpose means is to interchange rows and columns of a two-dimensional\
  \ array matrix.\n\n[A^(T)]ij=[A]ji\n\nie:\nFormally, the i th row, j th column element\
  \ of AT is the j th row, i th column element of A:\n\n\n\nExample :\n\n```\n[[1,2,3],[4,5,6]].transpose()\
  \ //should return [[1,4],[2,5],[3,6]]\n```\n\nWrite a prototype transpose to array\
  \ in JS or add a .transpose method in Ruby or create a transpose function in Python\
  \ so that any matrix of order ixj 2-D array returns transposed Matrix of jxi .\n\
  \nLink:  To understand array prototype"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def List.transpose {α : Type} : List (List α) → List (List α)\n\
  \  | _ => sorry\n"
"vc-theorems": "theorem empty_matrix_transpose {α : Type} :\n  @List.transpose α [[]]\
  \ = [[]] := by sorry\n\n\ntheorem transpose_dimensions_correct {α : Type} (m : List\
  \ (List α)) \n  (h1 : m.length > 0) (h2 : (m[0]!).length > 0) \n  (h3 : ∀ i < m.length,\
  \ (m[i]!).length = (m[0]!).length) :\n  let t := List.transpose m\n  (t.length =\
  \ (m[0]!).length) ∧ \n  (t[0]!.length = m.length) := by sorry\n\n\ntheorem double_transpose_identity\
  \ {α : Type} (m : List (List α))\n  (h1 : m.length > 0) (h2 : (m[0]!).length > 0)\n\
  \  (h3 : ∀ i < m.length, (m[i]!).length = (m[0]!).length) :\n  List.transpose (List.transpose\
  \ m) = m := by sorry\n\n/--\ninfo: [[]]\n-/\n#guard_msgs in\n#eval transpose [[]]\n\
  \n/--\ninfo: [[1]]\n-/\n#guard_msgs in\n#eval transpose [[1]]\n\n/--\ninfo: expected\n\
  -/\n#guard_msgs in\n#eval transpose [[1, 2, 3], [4, 5, 6]]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
