"vc-description": "# Problem Description\n\nLet's imagine a function `F(n)`, which\
  \ is defined over the integers\nin the range of `1 <= n <= max_n`, and `0 <= F(n)\
  \ <= max_fn` for every `n`.\n\nThere are `(1 + max_fn) ** max_n` possible definitions\
  \ of `F` in total.\n\nOut of those definitions, how many `F`s satisfy the following\
  \ equations?\nSince your answer will be very large, please give your answer **modulo\
  \ 12345787**.\n\n* `F(n) + F(n + 1) <= max_fn` for `1 <= n < max_n`\n* `F(max_n)\
  \ + F(1) <= max_fn`\n\n# Constraints\n\n`1 <= max_n <= 100`\n\n`1 <= max_fn <= 5`\n\
  \nThe inputs will be always valid integers.\n\n# Examples\n\n```python\n# F(1) +\
  \ F(1) <= 1, F(1) = 0\ncircular_limited_sums(1, 1) == 1\n\n# F = (0, 0), (0, 1),\
  \ (1, 0)\ncircular_limited_sums(2, 1) == 3\n\n# F = (0, 0, 0), (0, 0, 1), (0, 1,\
  \ 0), (1, 0, 0)\ncircular_limited_sums(3, 1) == 4\n\n# F = (0, 0, 0, 0), (0, 0,\
  \ 0, 1), (0, 0, 1, 0), (0, 1, 0, 0),\n# (0, 1, 0, 1), (1, 0, 0, 0), (1, 0, 1, 0)\n\
  circular_limited_sums(4, 1) == 7\n\n# F = (0), (1)\ncircular_limited_sums(1, 2)\
  \ == 2\n# F = (0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (2, 0)\ncircular_limited_sums(2,\
  \ 2) == 6\n# F = (0, 0, 0), (0, 0, 1), (0, 0, 2), (0, 1, 0), (0, 1, 1),\n# (0, 2,\
  \ 0), (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1), (2, 0, 0)\ncircular_limited_sums(3,\
  \ 2) == 11\ncircular_limited_sums(4, 2) == 26\n```\n\n# Acknowledgement\n\nThis\
  \ problem was designed as a hybrid of [Project Euler #209: Circular Logic](https://projecteuler.net/problem=209)\
  \ and [Project Euler #164: Numbers for which no three consecutive digits have a\
  \ sum greater than a given value](https://projecteuler.net/problem=164).\n\nIf you\
  \ enjoyed this Kata, please also have a look at [my other Katas](https://www.codewars.com/users/Bubbler/authored)!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def mod : Nat := 12345787\n\ndef circular_limited_sums (max_n:\
  \ Nat) (max_fn: Nat) : Nat :=\nsorry\n\n\n"
"vc-theorems": "theorem circular_limited_sums_deterministic  \n  (max_n: Nat) (max_fn:\
  \ Nat)\n  (h1: 1 ≤ max_n) (h2: max_n ≤ 50)\n  (h3: 1 ≤ max_fn) (h4: max_fn ≤ 5)\
  \ :\n  circular_limited_sums max_n max_fn = circular_limited_sums max_n max_fn :=\n\
  sorry\n\n\ntheorem circular_limited_sums_sequence_growth\n  (n1 n2 max_fn: Nat)\n\
  \  (h1: 1 ≤ n1) (h2: n1 < n2) (h3: n2 ≤ 5)\n  (h4: 1 ≤ max_fn) (h5: max_fn ≤ 5)\
  \ :\n  circular_limited_sums n1 max_fn < circular_limited_sums n2 max_fn :=\nsorry\n\
  \n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval circular_limited_sums 1 1\n\n/--\ninfo:\
  \ 3\n-/\n#guard_msgs in\n#eval circular_limited_sums 2 1\n\n/--\ninfo: 4\n-/\n#guard_msgs\
  \ in\n#eval circular_limited_sums 3 1\n\n/--\ninfo: 7\n-/\n#guard_msgs in\n#eval\
  \ circular_limited_sums 4 1\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval circular_limited_sums\
  \ 1 2\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval circular_limited_sums 2 2\n\n/--\n\
  info: 11\n-/\n#guard_msgs in\n#eval circular_limited_sums 3 2\n\n/--\ninfo: 26\n\
  -/\n#guard_msgs in\n#eval circular_limited_sums 4 2\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
