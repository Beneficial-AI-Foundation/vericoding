"vc-description": "We have the first value of a certain sequence, we will name it\
  \ ```initVal```.\nWe define  pattern list, ```patternL```, an array that has the\
  \ differences between contiguous terms of the sequence.\n``` E.g: patternL = [k1,\
  \ k2, k3, k4]``` \n\nThe terms of the sequence will be such values that:\n```python\n\
  term1 = initVal\nterm2 - term1 = k1\nterm3 - term2 = k2\nterm4 - term3 = k3\nterm5\
  \ - term4 = k4\nterm6 - term5 = k1\nterm7 - term6 = k2\nterm8 - term7 = k3\nterm9\
  \ - term8 = k4\n....  - ..... = ...\n....  - ..... = ...\n ``` \nSo the values of\
  \ the differences between contiguous terms are cyclical and are  repeated as the\
  \ differences values of the pattern list stablishes.\n\nLet's see an example with\
  \ numbers:\n```python\ninitVal = 10\npatternL = [2, 1, 3]\nterm1 = 10\nterm2 = 12\n\
  term3 = 13\nterm4 = 16\nterm5 = 18\nterm6 = 19\nterm7 = 22  # and so on...\n```\n\
  We can easily obtain the next terms of the sequence following the values in the\
  \ pattern list.\nWe see that the sixth term of the sequence, ```19```, has the sum\
  \ of its digits ```10```.\n\nMake a function ```sumDig_nthTerm()```, that receives\
  \ three arguments in this order \n\n ```sumDig_nthTerm(initVal, patternL, nthTerm(ordinal\
  \ number of the term in the sequence)) ```\n\nThis function will output the sum\
  \ of the digits of the n-th term of the sequence.\n\nLet's see some cases for this\
  \ function:\n```python\nsumDig_nthTerm(10, [2, 1, 3], 6) -----> 10 # because the\
  \ sixth term is 19 sum of Dig = 1 + 9 = 10. The sequence up to the sixth-Term is:\
  \ 10, 12, 13, 16, 18, 19\n\nsumDig_nthTerm(10, [1, 2, 3], 15) ----> 10 # 37 is the\
  \ 15-th term, and 3 + 7 = 10\n```\nEnjoy it and happy coding!!"
"vc-preamble": "import Imports.AllImports\n\ndef sumDig_nthTerm (initVal : Nat) (patternL\
  \ : List Nat) (nthTerm : Nat) : Nat := sorry\n\ndef numDigits (n : Nat) : Nat :=\
  \ \n  if n < 10 then 1\n  else 1 + numDigits (n / 10)\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def listSum : List Nat → Nat \n  | [] => 0\n  | (h::t) => h + listSum\
  \ t\n"
"vc-theorems": "theorem sumDig_nthTerm_bounds {initVal : Nat} {patternL : List Nat}\
  \ {nthTerm : Nat}\n  (h1 : initVal ≤ 50)\n  (h2 : ∀ x ∈ patternL, x ≤ 5)\n  (h3\
  \ : 1 ≤ patternL.length) \n  (h4 : patternL.length ≤ 3)\n  (h5 : 2 ≤ nthTerm)\n\
  \  (h6 : nthTerm ≤ 10) :\n  0 ≤ sumDig_nthTerm initVal patternL nthTerm ∧ \n  sumDig_nthTerm\
  \ initVal patternL nthTerm ≤ 9 * numDigits (initVal + (listSum patternL * nthTerm))\
  \ := sorry\n\n\ntheorem sumDig_nthTerm_deterministic {initVal : Nat} {patternL :\
  \ List Nat} {nthTerm : Nat} :\n  sumDig_nthTerm initVal patternL nthTerm = sumDig_nthTerm\
  \ initVal patternL nthTerm := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
