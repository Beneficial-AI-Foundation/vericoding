"vc-description": "There are n people that are split into some unknown number of groups.\
  \ Each person is labeled with a unique ID from 0 to n - 1.\nYou are given an integer\
  \ array groupSizes, where groupSizes[i] is the size of the group that person i is\
  \ in. For example, if groupSizes[1] = 3, then person 1 must be in a group of size 3.\n\
  Return a list of groups such that each person i is in a group of size groupSizes[i].\n\
  Each person should appear in exactly one group, and every person must be in a group.\
  \ If there are multiple answers, return any of them. It is guaranteed that there\
  \ will be at least one valid solution for the given input.\n \nExample 1:\nInput:\
  \ groupSizes = [3,3,3,3,3,1,3]\nOutput: [[5],[0,1,2],[3,4,6]]\nExplanation: \nThe\
  \ first group is [5]. The size is 1, and groupSizes[5] = 1.\nThe second group is\
  \ [0,1,2]. The size is 3, and groupSizes[0] = groupSizes[1] = groupSizes[2] = 3.\n\
  The third group is [3,4,6]. The size is 3, and groupSizes[3] = groupSizes[4] = groupSizes[6]\
  \ = 3.\nOther possible solutions are [[2,1,6],[5],[0,4,3]] and [[5],[0,6,2],[4,3,1]].\n\
  \nExample 2:\nInput: groupSizes = [2,1,3,3,3,2]\nOutput: [[1],[0,5],[2,3,4]]\n\n\
   \nConstraints:\n\ngroupSizes.length == n\n1 <= n <= 500\n1 <= groupSizes[i] <=\
  \ n"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def groupThePeople (groupSizes : List Nat) : List (List Nat) :=\
  \ sorry\n\ntheorem group_sizes_match_values (groupSizes : List Nat) \n  (h : ∀ x\
  \ ∈ groupSizes, 1 ≤ x ∧ x ≤ 10) :\n  let result := groupThePeople groupSizes\n \
  \ ∀ group ∈ result,\n    let size := group.length \n    ∀ i ∈ group, groupSizes.get!\
  \ i = size := sorry\n"
"vc-theorems": "theorem no_overlapping_groups (groupSizes : List Nat)\n  (h : ∀ x\
  \ ∈ groupSizes, 1 ≤ x ∧ x ≤ 10) :\n  let result := groupThePeople groupSizes\n \
  \ ∀ g1 ∈ result,\n    ∀ g2 ∈ result,\n      g1 ≠ g2 →\n      ∀ i ∈ g1, i ∉ g2 :=\
  \ sorry\n\n/--\ninfo: sorted([sorted(g) for g in expected1])\n-/\n#guard_msgs in\n\
  #eval sorted [sorted(g) for g in result1]\n\n/--\ninfo: sorted([sorted(g) for g\
  \ in expected2])\n-/\n#guard_msgs in\n#eval sorted [sorted(g) for g in result2]\n\
  \n/--\ninfo: sorted([sorted(g) for g in expected3])\n-/\n#guard_msgs in\n#eval sorted\
  \ [sorted(g) for g in result3]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
