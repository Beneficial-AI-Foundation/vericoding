"vc-description": "Batman is about to face Superman so he decides to prepare for the\
  \ battle by upgrading his Batmobile. He manufactures multiple duplicates of his\
  \ standard Batmobile each tweaked in a different way such that the maximum speed\
  \ of each is never less than that of the standard model.\nAfter carrying out this\
  \ process, he wishes to know how many of his prototypes are faster than his standard\
  \ Batmobile?\n\n-----Input-----\n- The first line of the input contains an integer\
  \ T denoting the number of test cases. The description of T test cases follow: \n\
  - The first line of each test case contains a single integer N denoting the number\
  \ of copies of the standard Batmobile.\n- The second line contains a sequence of\
  \ N+1 space-separated integers, S0 to SN, sorted in non-decreasing order separated\
  \ by space. S0 is the maximum speed of the standard Batmobile. S1 to SN denote the\
  \ maximum speeds of the prototypes.\n\n-----Output-----\n- For each test case, output\
  \ a single line containing an integer denoting the answer.\n\n-----Constraints-----\n\
  - 1 ≤ T ≤ 1000\n- 1 ≤ N ≤ 1000\n- 1 ≤ Si ≤ 109\n\n-----Example-----\nInput:\n2\n\
  4\n1 2 3 4 5\n5\n1 10 100 1000 10000 100000\n\nOutput:\n4\n5"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_faster_batmobiles (n : Nat) (speeds : List Nat) : Nat\
  \ := sorry\n\ntheorem count_faster_batmobiles_non_negative \n  (n : Nat) (speeds\
  \ : List Nat) (h : speeds.length > 0) :\n  count_faster_batmobiles n speeds ≥ 0\
  \ := sorry\n"
"vc-theorems": "theorem count_faster_batmobiles_bounded\n  (n : Nat) (speeds : List\
  \ Nat) (h : speeds.length > 0) :\n  count_faster_batmobiles n speeds ≤ speeds.length\
  \ - 1 := sorry \n\n\ntheorem count_faster_batmobiles_matches_manual_count\n  (n\
  \ : Nat) (speeds : List Nat) (h : speeds.length > 0) :\n  count_faster_batmobiles\
  \ n speeds = \n    (List.filter (λ s => s > List.head! speeds) (List.tail! speeds)).length\
  \ := sorry\n\n\n\n\ntheorem count_faster_batmobiles_single_slower\n  (speeds : List\
  \ Nat) (h : speeds = [2, 1]) :\n  count_faster_batmobiles 1 speeds = 0 := sorry\n\
  \n\ntheorem count_faster_batmobiles_single_faster  \n  (speeds : List Nat) (h :\
  \ speeds = [1, 2]) :\n  count_faster_batmobiles 1 speeds = 1 := sorry\n\n/--\ninfo:\
  \ 4\n-/\n#guard_msgs in\n#eval count_faster_batmobiles 4 [1, 2, 3, 4, 5]\n\n/--\n\
  info: 5\n-/\n#guard_msgs in\n#eval count_faster_batmobiles 5 [1, 10, 100, 1000,\
  \ 10000, 100000]\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval count_faster_batmobiles\
  \ 3 [5, 5, 5, 6]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
