"vc-description": "Your task is the exact same as for the easy version. But this time,\
  \ the marmots subtract the village's population P from their random number before\
  \ responding to Heidi's request.\n\nAlso, there are now villages with as few as\
  \ a single inhabitant, meaning that $1 \\leq P \\leq 1000$.\n\nCan you help Heidi\
  \ find out whether a village follows a Poisson or a uniform distribution?\n\n\n\
  -----Input-----\n\nSame as for the easy and medium versions. But remember that now\
  \ 1 ≤ P ≤ 1000 and that the marmots may provide positive as well as negative integers.\n\
  \n\n-----Output-----\n\nOutput one line per village, in the same order as provided\
  \ in the input. The village's line shall state poisson if the village's distribution\
  \ is of the Poisson type, and uniform if the answers came from a uniform distribution."
"vc-preamble": "import Imports.AllImports\n\ndef identify_distribution (samples :\
  \ List Int) : String :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isValidDistribution (s : String) : Bool :=\n  s = \"uniform\"\
  \ || s = \"poisson\"\n"
"vc-theorems": "theorem identify_distribution_valid (samples : List Int) \n  (h :\
  \ samples.length ≥ 2) :\n  isValidDistribution (identify_distribution samples) :=\
  \ sorry\n\n\ntheorem identify_distribution_deterministic (samples : List Int) :\n\
  \  identify_distribution samples = identify_distribution samples := sorry\n\n\n\
  theorem identify_distribution_uniform (samples : List Int) :\n  samples.length ≥\
  \ 2 → identify_distribution samples = \"uniform\" := sorry\n\n\ntheorem identify_distribution_poisson\
  \ (samples : List Int) : \n  samples.length ≥ 2 → identify_distribution samples\
  \ = \"poisson\" := sorry\n\n\ntheorem identify_distribution_scale_invariant (samples\
  \ : List Int) \n  (scale : Int) (h : scale ≠ 0) :\n  identify_distribution samples\
  \ = \n  identify_distribution (samples.map (· * scale)) := sorry\n\n\ntheorem identify_distribution_order_invariant\
  \ (samples₁ samples₂ : List Int)\n  (h : samples₁.length = samples₂.length) \n \
  \ (h2 : ∀ x, x ∈ samples₁ ↔ x ∈ samples₂) :\n  identify_distribution samples₁ =\
  \ identify_distribution samples₂ := sorry\n\n/--\ninfo: 'poisson'\n-/\n#guard_msgs\
  \ in\n#eval identify_distribution [1, 2, 3, 2, 1]\n\n/--\ninfo: 'poisson'\n-/\n\
  #guard_msgs in\n#eval identify_distribution [10, 8, 9, 8, 12]\n\n/--\ninfo: 'poisson'\n\
  -/\n#guard_msgs in\n#eval identify_distribution [-5, -4, -3, -4, -5]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
