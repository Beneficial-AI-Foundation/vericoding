"vc-description": "You are given positive integers $N$ and $D$. You may perform operations\
  \ of the following two types:\n- add $D$ to $N$, i.e. change $N$ to $N+D$\n- change\
  \ $N$ to $\\mathop{\\mathrm{digitsum}}(N)$\nHere, $\\mathop{\\mathrm{digitsum}}(x)$\
  \ is the sum of decimal digits of $x$. For example, $\\mathop{\\mathrm{digitsum}}(123)=1+2+3=6$,\
  \ $\\mathop{\\mathrm{digitsum}}(100)=1+0+0=1$, $\\mathop{\\mathrm{digitsum}}(365)=3+6+5=14$.\n\
  You may perform any number of operations (including zero) in any order. Please find\
  \ the minimum obtainable value of $N$ and the minimum number of operations required\
  \ to obtain this value.\n\n-----Input-----\n- The first line of the input contains\
  \ a single integer $T$ denoting the number of test cases. The description of $T$\
  \ test cases follows.\n- The first and only line of each test case contains two\
  \ space-separated integers $N$ and $D$.\n\n-----Output-----\nFor each test case,\
  \ print a single line containing two space-separated integers — the minimum value\
  \ of $N$ and the minimum required number of operations.\n\n-----Constraints-----\n\
  - $1 \\le T \\le 10$\n- $1 \\le N, D \\le 10^{10}$\n\n-----Subtasks-----\nSubtask\
  \ #1 (30 points): $1 \\le N, D \\le 100$\nSubtask #2 (70 points): original constraints\n\
  \n-----Example Input-----\n3\n2 1\n9 3\n11 13\n\n-----Example Output-----\n1 9\n\
  3 2\n1 4\n\n-----Explanation-----\nExample case 1: The value $N=1$ can be achieved\
  \ by 8 successive \"add\" operations (changing $N$ to $10$) and one \"digit-sum\"\
  \ operation.\nExample case 2: You can prove that you cannot obtain $N=1$ and $N=2$,\
  \ and you can obtain $N=3$.\nThe value $N=3$ can be achieved by one \"add\" and\
  \ one \"digitsum\" operation, changing $9$ to $12$ and $12$ to $3$.  \nExample case\
  \ 3: $N=1$ can be achieved by operations \"add\", \"add\", \"digitsum\", \"digitsum\"\
  : $11 \\rightarrow 24 \\rightarrow 37 \\rightarrow 10 \\rightarrow 1$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_min_value (n d : Nat) : Nat × Nat :=\n  sorry\n"
"vc-theorems": "theorem result_smaller_than_input (n d : Nat) (h1 : n > 0) (h2 : d\
  \ > 0) :\n  let (result_n, _) := solve_min_value n d\n  result_n ≤ n :=\nsorry\n\
  \n\ntheorem result_nonnegative (n d : Nat) (h1 : n > 0) (h2 : d > 0) :\n  let (result_n,\
  \ _) := solve_min_value n d\n  result_n ≥ 0 :=\nsorry\n\n\ntheorem ops_nonnegative\
  \ (n d : Nat) (h1 : n > 0) (h2 : d > 0) :\n  let (_, result_ops) := solve_min_value\
  \ n d\n  result_ops ≥ 0 :=\nsorry\n\n\ntheorem larger_numbers_get_smaller (n : Nat)\
  \ (h : n > 9) :\n  let (result_n, _) := solve_min_value n 1\n  result_n < n :=\n\
  sorry\n\n\ntheorem function_is_deterministic (n d : Nat) (h1 : n > 0) (h2 : d >\
  \ 0) :\n  solve_min_value n d = solve_min_value n d :=\nsorry\n\n\ntheorem one_stays_one\
  \ :\n  (solve_min_value 1 1).1 = 1 :=\nsorry\n\n\ntheorem single_digit_not_increase\
  \ (h : 9 ≥ 1) :\n  (solve_min_value 9 1).1 ≤ 9 :=\nsorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
