"vc-description": "Summer is coming! It's time for Iahub and Iahubina to work out,\
  \ as they both want to look hot at the beach. The gym where they go is a matrix\
  \ a with n lines and m columns. Let number a[i][j] represents the calories burned\
  \ by performing workout at the cell of gym in the i-th line and the j-th column.\n\
  \nIahub starts with workout located at line 1 and column 1. He needs to finish with\
  \ workout a[n][m]. After finishing workout a[i][j], he can go to workout a[i + 1][j]\
  \ or a[i][j + 1]. Similarly, Iahubina starts with workout a[n][1] and she needs\
  \ to finish with workout a[1][m]. After finishing workout from cell a[i][j], she\
  \ goes to either a[i][j + 1] or a[i - 1][j]. \n\nThere is one additional condition\
  \ for their training. They have to meet in exactly one cell of gym. At that cell,\
  \ none of them will work out. They will talk about fast exponentiation (pretty odd\
  \ small talk) and then both of them will move to the next workout.\n\nIf a workout\
  \ was done by either Iahub or Iahubina, it counts as total gain. Please plan a workout\
  \ for Iahub and Iahubina such as total gain to be as big as possible. Note, that\
  \ Iahub and Iahubina can perform workouts with different speed, so the number of\
  \ cells that they use to reach meet cell may differs.\n\n\n-----Input-----\n\nThe\
  \ first line of the input contains two integers n and m (3 ≤ n, m ≤ 1000). Each\
  \ of the next n lines contains m integers: j-th number from i-th line denotes element\
  \ a[i][j] (0 ≤ a[i][j] ≤ 10^5).\n\n\n-----Output-----\n\nThe output contains a single\
  \ number — the maximum total gain possible. \n\n\n-----Examples-----\nInput\n3 3\n\
  100 100 100\n100 1 100\n100 100 100\n\nOutput\n800\n\n\n-----Note-----\n\nIahub\
  \ will choose exercises a[1][1] → a[1][2] → a[2][2] → a[3][2] → a[3][3]. Iahubina\
  \ will choose exercises a[3][1] → a[2][1] → a[2][2] → a[2][3] → a[1][3]."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_workout_paths (n m : Nat) (grid : List (List Nat)) :\
  \ Nat := sorry\n\ntheorem square_grid_symmetry {n : Nat} (h : n ≥ 3) (h2 : n ≤ 10)\
  \ :\n  let grid := List.replicate n (List.replicate n 100)\n  solve_workout_paths\
  \ n n grid = 400 * (n - 1) := sorry\n"
"vc-theorems": "theorem minimal_grid :\n  let grid := List.replicate 3 (List.replicate\
  \ 3 0)\n  solve_workout_paths 3 3 grid = 0 := sorry\n\n/--\ninfo: 800\n-/\n#guard_msgs\
  \ in\n#eval solve_workout_paths 3 3 [[100, 100, 100], [100, 1, 100], [100, 100,\
  \ 100]]\n\n/--\ninfo: 16\n-/\n#guard_msgs in\n#eval solve_workout_paths 3 3 [[3,\
  \ 1, 2], [3, 2, 0], [2, 3, 2]]\n\n/--\ninfo: 501\n-/\n#guard_msgs in\n#eval solve_workout_paths\
  \ 3 3 [[100, 0, 100], [1, 100, 100], [0, 100, 100]]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded_and_plausible"
