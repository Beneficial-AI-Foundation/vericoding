"vc-description": "Final kata of the series (highly recommended to compute [layers](https://www.codewars.com/kata/progressive-spiral-number-position/)\
  \ and [branch](https://www.codewars.com/kata/progressive-spiral-number-branch/)\
  \ first to get a good idea), this is a blatant ripoff of [the one offered on AoC](http://adventofcode.com/2017/day/3).\n\
  \nGiven a number, return the Manhattan distance considering the core of the spiral\
  \ (the `1` cell) as 0 and counting each step up, right, down or left to reach a\
  \ given cell.\n\nFor example, using our beloved 5x5 square:\n\n```\n17 16 15 14\
  \ 13    4 3 2 3 4\n18 05 04 03 12    3 2 1 2 3\n19 06 01 02 11 => 2 1 0 1 2\n20\
  \ 07 08 09 10    3 2 1 2 3\n21 22 23 24 25    4 3 2 3 4\n```\n\nAnd thus your code\
  \ should behave like this:\n\n```python\ndistance(1) == 0\ndistance(5) == 2\ndistance(25)\
  \ == 4\ndistance(30) == 5\ndistance(50) == 7\n```\n\nJust be ready for larger numbers,\
  \ as usual always positive.\n\n*[Dedicated to [swiftest learner I met in a long\
  \ while](https://www.codewars.com/users/irbekrm/)]*"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def distance (n : Nat) : Nat := sorry\n\ntheorem distance_nonnegative\
  \ (n : Nat) :\n  n > 0 → distance n ≥ 0 := sorry\n"
"vc-theorems": "theorem distance_growth_rate (n : Nat) :\n  n > 0 → distance (2 *\
  \ n) ≥ distance n / 2 := sorry\n\n\ntheorem distance_at_center :\n  distance 1 =\
  \ 0 := sorry\n\n\ntheorem distance_away_from_center (n : Nat) :\n  n > 1 → distance\
  \ n > 0 := sorry\n\n\ntheorem distance_triangle_inequality (n : Nat) :\n  n > 1\
  \ → distance n ≤ distance (n-1) + 1 ∧ distance n ≤ distance (n+1) + 1 := sorry\n\
  \n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval distance 1\n\n/--\ninfo: 2\n-/\n#guard_msgs\
  \ in\n#eval distance 5\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval distance 25\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
