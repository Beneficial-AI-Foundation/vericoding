"vc-description": "You have a browser of one tab where you start on the homepage and\
  \ you can visit another url, get back in the history number of steps or move forward\
  \ in the history number of steps.\nImplement the BrowserHistory class:\n\nBrowserHistory(string\
  \ homepage) Initializes the object with the homepage of the browser.\nvoid visit(string\
  \ url) Visits url from the current page. It clears up all the forward history.\n\
  string back(int steps) Move steps back in history. If you can only return x steps\
  \ in the history and steps > x, you will return only x steps. Return the current\
  \ url after moving back in history at most steps.\nstring forward(int steps) Move\
  \ steps forward in history. If you can only forward x steps in the history and steps\
  \ > x, you will forward only x steps. Return the current url after forwarding in\
  \ history at most steps.\n\n \nExample:\nInput:\n[\"BrowserHistory\",\"visit\",\"\
  visit\",\"visit\",\"back\",\"back\",\"forward\",\"visit\",\"forward\",\"back\",\"\
  back\"]\n[[\"leetcode.com\"],[\"google.com\"],[\"facebook.com\"],[\"youtube.com\"\
  ],[1],[1],[1],[\"linkedin.com\"],[2],[2],[7]]\nOutput:\n[null,null,null,null,\"\
  facebook.com\",\"google.com\",\"facebook.com\",null,\"linkedin.com\",\"google.com\"\
  ,\"leetcode.com\"]\n\nExplanation:\nBrowserHistory browserHistory = new BrowserHistory(\"\
  leetcode.com\");\nbrowserHistory.visit(\"google.com\");       // You are in \"leetcode.com\"\
  . Visit \"google.com\"\nbrowserHistory.visit(\"facebook.com\");     // You are in\
  \ \"google.com\". Visit \"facebook.com\"\nbrowserHistory.visit(\"youtube.com\");\
  \      // You are in \"facebook.com\". Visit \"youtube.com\"\nbrowserHistory.back(1);\
  \                   // You are in \"youtube.com\", move back to \"facebook.com\"\
  \ return \"facebook.com\"\nbrowserHistory.back(1);                   // You are\
  \ in \"facebook.com\", move back to \"google.com\" return \"google.com\"\nbrowserHistory.forward(1);\
  \                // You are in \"google.com\", move forward to \"facebook.com\"\
  \ return \"facebook.com\"\nbrowserHistory.visit(\"linkedin.com\");     // You are\
  \ in \"facebook.com\". Visit \"linkedin.com\"\nbrowserHistory.forward(2);      \
  \          // You are in \"linkedin.com\", you cannot move forward any steps.\n\
  browserHistory.back(2);                   // You are in \"linkedin.com\", move back\
  \ two steps to \"facebook.com\" then to \"google.com\". return \"google.com\"\n\
  browserHistory.back(7);                   // You are in \"google.com\", you can\
  \ move back only one step to \"leetcode.com\". return \"leetcode.com\"\n\n \nConstraints:\n\
  \n1 <= homepage.length <= 20\n1 <= url.length <= 20\n1 <= steps <= 100\nhomepage\
  \ and url consist of  '.' or lower case English letters.\nAt most 5000 calls will\
  \ be made to visit, back, and forward."
"vc-preamble": "import Imports.AllImports\n\ndef BrowserHistory.new (homepage : String)\
  \ : BrowserHistory := sorry\ndef BrowserHistory.visit (self : BrowserHistory) (url\
  \ : String) : BrowserHistory := sorry"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def BrowserHistory.back (self : BrowserHistory) (steps : Nat) :\
  \ (BrowserHistory × String) := sorry\ndef BrowserHistory.forward (self : BrowserHistory)\
  \ (steps : Nat) : (BrowserHistory × String) := sorry\n"
"vc-theorems": "theorem browser_history_init (homepage : String) :\n  let browser\
  \ := BrowserHistory.new homepage\n  browser.hashM[0]! = homepage ∧ \n  browser.currIndex\
  \ = 0 ∧\n  browser.maxIndex = 0 := sorry\n\n\ntheorem sequential_visits (homepage\
  \ : String) (urls : List String) :\n  let browser := BrowserHistory.new homepage\n\
  \  ∀ url ∈ urls, \n    let browser' := browser.visit url\n    browser'.hashM[browser'.currIndex]!\
  \ = url ∧\n    browser'.currIndex = browser'.maxIndex := sorry\n\n\ntheorem back_navigation\
  \ (homepage : String) (urls : List String) (steps : Nat) :\n  let browser := BrowserHistory.new\
  \ homepage\n  urls.foldl (fun b url => b.visit url) browser\n  |> fun b => \n  \
  \  let (b', result) := b.back steps\n    let expected_index := min b.maxIndex steps\n\
  \    b'.currIndex = expected_index ∧ \n    result = b'.hashM[expected_index]! :=\
  \ sorry\n\n\ntheorem visit_after_back_clears_forward (homepage : String) (urls :\
  \ List String) (back_steps : Nat) (new_url : String) :\n  let browser := BrowserHistory.new\
  \ homepage\n  let browser' := urls.foldl (fun b url => b.visit url) browser\n  let\
  \ original_max := browser'.maxIndex\n  let (browser'', _) := browser'.back back_steps\n\
  \  let browser''' := browser''.visit new_url\n  browser'''.maxIndex = browser'''.currIndex\
  \ ∧\n  (browser'''.maxIndex < original_max ∨ browser'''.maxIndex = urls.length)\
  \ ∧\n  browser'''.hashM[browser'''.currIndex]! = new_url := sorry\n\n\ntheorem forward_navigation\
  \ (homepage : String) (urls : List String) (steps : Nat) :\n  let browser := BrowserHistory.new\
  \ homepage\n  let browser' := urls.foldl (fun b url => b.visit url) browser\n  let\
  \ (browser'', _) := browser'.back steps\n  let (browser''', result) := browser''.forward\
  \ steps\n  result = browser'''.hashM[browser'''.currIndex]! ∧\n  browser'''.currIndex\
  \ ≤ browser'''.maxIndex := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
