"vc-description": "Your task is to convert a given number into a string with commas\
  \ added for easier readability.  The number should be rounded to 3 decimal places\
  \ and the commas should be added at intervals of three digits before the decimal\
  \ point. There does not need to be a comma at the end of the number.\n\nYou will\
  \ receive both positive and negative numbers.\n\n## Examples\n\n```python\ncommas(1)\
  \ == \"1\"\ncommas(1000) == \"1,000\"\ncommas(100.2346) == \"100.235\"\ncommas(1000000000.23)\
  \ == \"1,000,000,000.23\"\ncommas(-1) == \"-1\"\ncommas(-1000000.123) == \"-1,000,000.123\"\
  \n```"
"vc-preamble": "import Imports.AllImports\n\ndef commas (n : Float) : String := sorry\n\
  \ndef String.toFloat! (s : String) : Float := sorry\ninstance : ToString Int where\
  \ toString := sorry"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def Int.abs (n : Int) : Int := if n < 0 then -n else n\n\ntheorem\
  \ integers_format_correctly (n : Int) \n  (h : -999999999999999 ≤ n ∧ n ≤ 999999999999999)\
  \ :\n  let result : String := commas (Float.ofInt n);\n  (Int.abs n ≥ 1000 → result.contains\
  \ ',' ) ∧ \n  (¬result.contains '.') ∧\n  ((result.replace \",\" \"\").toInt? =\
  \ some n) := sorry\n"
"vc-theorems": "theorem floats_format_correctly (n : Float)\n  (h1 : ¬n.isNaN)\n \
  \ (h2 : ¬n.isInf) \n  (h3 : -1e10 ≤ n ∧ n ≤ 1e10) :\n  let result : String := commas\
  \ n;\n  (result.contains '.' → (result.splitOn \".\" |>.get! 1).length ≤ 3) ∧\n\
  \  Float.abs ((result.replace \",\" \"\").toFloat! - n) < 1e-2 := sorry\n\n\ntheorem\
  \ zero_cases :\n  commas 0 = \"0\" ∧ commas (-0.0) = \"0\" := sorry\n\n/--\ninfo:\
  \ '1,000'\n-/\n#guard_msgs in\n#eval commas 1000\n\n/--\ninfo: '100.235'\n-/\n#guard_msgs\
  \ in\n#eval commas 100.2346\n\n/--\ninfo: '-1,000,000.123'\n-/\n#guard_msgs in\n\
  #eval commas -1000000.123\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
