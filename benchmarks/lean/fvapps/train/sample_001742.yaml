"vc-description": "Given the running logs of n functions that are executed in a nonpreemptive\
  \ single threaded CPU, find the exclusive time of these functions. \n\nEach function\
  \ has a unique id, start from 0 to n-1. A function may be called recursively or\
  \ by another function.\n\nA log is a string has this format : function_id:start_or_end:timestamp.\
  \ For example, \"0:start:0\" means function 0 starts from the very beginning of\
  \ time 0. \"0:end:0\" means function 0 ends to the very end of time 0. \n\nExclusive\
  \ time of a function is defined as the time spent within this function, the time\
  \ spent by calling other functions should not be considered as this function's exclusive\
  \ time. You should return the exclusive time of each function sorted by their function\
  \ id.\n\nExample 1:\n\nInput:\nn = 2\nlogs = \n[\"0:start:0\",\n \"1:start:2\",\n\
  \ \"1:end:5\",\n \"0:end:6\"]\nOutput:[3, 4]\nExplanation:\nFunction 0 starts at\
  \ time 0, then it executes 2 units of time and reaches the end of time 1. \nNow\
  \ function 0 calls function 1, function 1 starts at time 2, executes 4 units of\
  \ time and end at time 5.\nFunction 0 is running again at time 6, and also end at\
  \ the time 6, thus executes 1 unit of time. \nSo function 0 totally execute 2 +\
  \ 1 = 3 units of time, and function 1 totally execute 4 units of time.\n\n\n\nNote:\n\
  \nInput logs will be sorted by timestamp, NOT log id.\nYour output should be sorted\
  \ by function id, which means the 0th element of your output corresponds to the\
  \ exclusive time of function 0.\nTwo functions won't start or end at the same time.\n\
  Functions could be called recursively, and will always end.\n1"
"vc-preamble": "import Imports.AllImports\n\ndef sum_nat_list : List Nat → Nat \n\
  \  | [] => 0\n  | (x::xs) => x + sum_nat_list xs\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def exclusive_time (n : Nat) (logs : List String) : List Nat :=\
  \ sorry\n\n\n\ntheorem exclusive_time_nonnegative {n : Nat} {logs : List String}\
  \ :\n  ∀ t, t ∈ exclusive_time n logs → t ≥ 0\n  := sorry\n\n\n"
"vc-theorems": "theorem exclusive_time_edge_cases :\n  exclusive_time 0 [] = [] ∧\n\
  \  exclusive_time 1 [] = [] ∧ \n  exclusive_time 0 [\"0:start:0\"] = []\n  := sorry\n\
  \n/--\ninfo: [3, 4]\n-/\n#guard_msgs in\n#eval exclusive_time 2 [\"0:start:0\",\
  \ \"1:start:2\", \"1:end:5\", \"0:end:6\"]\n\n/--\ninfo: [1]\n-/\n#guard_msgs in\n\
  #eval exclusive_time 1 [\"0:start:0\", \"0:end:0\"]\n\n/--\ninfo: [2, 2]\n-/\n#guard_msgs\
  \ in\n#eval exclusive_time 2 [\"0:start:0\", \"1:start:1\", \"1:end:2\", \"0:end:3\"\
  ]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
