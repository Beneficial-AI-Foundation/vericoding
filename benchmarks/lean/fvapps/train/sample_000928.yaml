"vc-description": "You are given a convex polygon $P$ with vertices $P_0, P_1, \\\
  ldots, P_{n-1}$, each having integer coordinates. On each edge $P_{i} P_{(i+1) \\\
  % n}$ of the polygon, choose a point $R_i$ uniformly at random. What is the expected\
  \ area of the convex hull of these $n$ chosen points $R_0, R_1, \\ldots R_{n-1}$\
  \ ?\n\n-----Note-----\n- Consider the area of the convex hull as zero if it contains\
  \ less than 3 vertices.\n- All the points $R_i$ are chosen independently of each\
  \ other.\n- Your answer is considered correct if and only if its absolute or relative\
  \ error doesn't exceed $10^{-6}$.\n\n-----Input-----\n- The first line contains\
  \ $n$, the number of vertices in the convex polygon.\n- The next $n$ lines contain\
  \ the coordinates of the vertices of the polygon in anti-clockwise order. \n\n-----Output-----\n\
  For each testcase, print the expected area of the convex hull of the $n$ randomly\
  \ chosen points.\n\n-----Constraints-----\n- $3 \\leq n \\leq 10^5$\n- The absolute\
  \ values of all the coordinates $\\leq 10^7$.\n- All the points in the input are\
  \ distinct.\n- The described polygon $P$ is convex and the vertices of the polygon\
  \ are given in anti-clockwise order. Also, no three vertices of the polygon are\
  \ collinear.\n\n-----Example Input-----\n3\n0 0\n1 0\n0 1\n\n-----Example Output-----\n\
  0.1250000000"
"vc-preamble": "import Imports.AllImports\n\ndef Point := Float × Float\n\ndef calc_expected_area\
  \ (n: Nat) (vertices: List Point) : Float :=\n  sorry\n\n\ndef list_max (xs : List\
  \ Float) : Float :=\n  match xs with\n  | [] => 0\n  | x::xs => xs.foldl max x\n\
  \n/-- Helper function to get the minimum value from a list -/"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def list_min (xs : List Float) : Float :=\n  match xs with\n  |\
  \ [] => 0\n  | x::xs => xs.foldl min x\n"
"vc-theorems": "theorem area_is_non_negative {n: Nat} {vertices: List Point} :\n \
  \ vertices.length = n → n ≥ 3 →\n  calc_expected_area n vertices ≥ 0 :=\nsorry\n\
  \n/-- Helper function to get the maximum value from a list -/\n\ntheorem area_smaller_than_bounding_box\
  \ {n: Nat} {vertices: List Point} :\n  vertices.length = n → n ≥ 3 →\n  let xs :=\
  \ vertices.map (·.1)\n  let ys := vertices.map (·.2)\n  calc_expected_area n vertices\
  \ ≤ (list_max xs - list_min xs) * (list_max ys - list_min ys) + 1e-10 :=\nsorry\n\
  \n\ntheorem area_invariant_under_translation {n: Nat} {vertices: List Point} \n\
  \  {dx dy: Float} :\n  vertices.length = n → n ≥ 3 →\n  let translated := vertices.map\
  \ (fun (x, y) => (x + dx, y + dy))\n  (calc_expected_area n vertices - calc_expected_area\
  \ n translated).abs < 1e-10 :=\nsorry\n\n\ntheorem area_scales_quadratically {n:\
  \ Nat} {vertices: List Point} :\n  vertices.length = n → n ≥ 3 →\n  let scaled :=\
  \ vertices.map (fun (x, y) => (2*x, 2*y))\n  (calc_expected_area n scaled - 4 *\
  \ calc_expected_area n vertices).abs < 1e-10 :=\nsorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
