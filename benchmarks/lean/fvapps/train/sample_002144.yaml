"vc-description": "AtCoDeer the deer found N rectangle lying on the table, each with\
  \ height 1.\nIf we consider the surface of the desk as a two-dimensional plane,\
  \ the i-th rectangle i(1≤i≤N) covers the vertical range of [i-1,i] and the horizontal\
  \ range of [l_i,r_i], as shown in the following figure:\n\nAtCoDeer will move these\
  \ rectangles horizontally so that all the rectangles are connected.\nFor each rectangle,\
  \ the cost to move it horizontally by a distance of x, is x.\nFind the minimum cost\
  \ to achieve connectivity.\nIt can be proved that this value is always an integer\
  \ under the constraints of the problem.\n\n-----Constraints-----\n - All input values\
  \ are integers.\n - 1≤N≤10^5\n - 1≤l_i<r_i≤10^9\n\n-----Partial Score-----\n - 300\
  \ points will be awarded for passing the test set satisfying 1≤N≤400 and 1≤l_i<r_i≤400.\n\
  \n-----Input-----\nThe input is given from Standard Input in the following format:\n\
  N\nl_1 r_1\nl_2 r_2\n:\nl_N r_N\n\n-----Output-----\nPrint the minimum cost to achieve\
  \ connectivity.\n\n-----Sample Input-----\n3\n1 3\n5 7\n1 3\n\n-----Sample Output-----\n\
  2\n\nThe second rectangle should be moved to the left by a distance of 2."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def Rectangle := List Int\n\ndef solve_rectangles (n : Nat) (rectangles\
  \ : List Rectangle) : Nat :=\n  sorry\n"
"vc-theorems": "theorem solve_rectangles_nonnegative (n : Nat) (rectangles : List\
  \ Rectangle) :\n  solve_rectangles n rectangles ≥ 0 :=\n  sorry\n\n\ntheorem solve_rectangles_single_rect\
  \ (rect : Rectangle) :\n  solve_rectangles 1 [rect] = 0 :=\n  sorry\n\n\ntheorem\
  \ solve_rectangles_valid_coords (n : Nat) (rectangles : List Rectangle) :\n  ∀ rect\
  \ ∈ rectangles,\n    match rect with\n    | [left, right] => left > 0 ∧ left < right\
  \  \n    | _ => True\n  :=\n  sorry\n\n\ntheorem solve_rectangles_result_type (n\
  \ : Nat) (rectangles : List Rectangle) :\n  solve_rectangles n rectangles = n ∨\
  \ solve_rectangles n rectangles ≠ n :=\n  sorry\n\n\ntheorem solve_rectangles_input_format\
  \ \n  (n : Nat) \n  (left right : Int)\n  (h1 : left > 0)\n  (h2 : left < right)\
  \ :\n  solve_rectangles 1 [[left, right]] ≥ 0 :=\n  sorry\n\n/--\ninfo: 2\n-/\n\
  #guard_msgs in\n#eval solve_rectangles 3 [[1, 3], [5, 7], [1, 3]]\n\n/--\ninfo:\
  \ 0\n-/\n#guard_msgs in\n#eval solve_rectangles 3 [[2, 5], [4, 6], [1, 4]]\n\n/--\n\
  info: 0\n-/\n#guard_msgs in\n#eval solve_rectangles 1 [[1, 400]]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
