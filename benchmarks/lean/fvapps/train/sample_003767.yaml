"vc-description": "Adding tip to a restaurant bill in a graceful way can be tricky,\
  \ thats why you need make a function for it.\n\nThe function will receive the restaurant\
  \ bill (always a positive number) as an argument. You need to 1) **add at least\
  \ 15%** in tip, 2) round that number up to an *elegant* value and 3) return it.\n\
  \nWhat is an *elegant* number? It depends on the magnitude of the number to be rounded.\
  \ Numbers below 10 should simply be rounded to whole numbers. Numbers 10 and above\
  \ should be rounded like this:\n\n10 - 99.99... ---> Round to number divisible by\
  \ 5\n\n100 - 999.99... ---> Round to number divisible by 50\n\n1000 - 9999.99...\
  \ ---> Round to number divisible by 500\n\nAnd so on...\n\nGood luck!\n\n## Examples\n\
  ```\n 1  -->    2\n 7  -->    9\n12  -->   15\n86  -->  100\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def graceful_tipping (bill : NonNegFloat) : Float := sorry\n\n\
  theorem tip_at_least_15_percent (bill : NonNegFloat) \n  (h1 : bill.val ≥ 0.01)\
  \ \n  (h2 : bill.val ≤ 10000) :\n  graceful_tipping bill ≥ bill.val * 1.15 := sorry\n"
"vc-theorems": "theorem result_is_clean_number (bill : NonNegFloat)\n  (h1 : bill.val\
  \ ≥ 0.01)\n  (h2 : bill.val ≤ 10000) :\n  let result := graceful_tipping bill\n\
  \  let intResult := Float.toUInt64 result \n  (bill.val * 1.15 ≥ 10 →\n    let magnitude\
  \ := UInt64.ofNat (10 ^ (String.length (toString intResult) - 1))\n    intResult\
  \ % (magnitude / 2) = 0) := sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval graceful_tipping\
  \ 1\n\n/--\ninfo: 15\n-/\n#guard_msgs in\n#eval graceful_tipping 12\n\n/--\ninfo:\
  \ 100\n-/\n#guard_msgs in\n#eval graceful_tipping 86\n\n/--\ninfo: 1500\n-/\n#guard_msgs\
  \ in\n#eval graceful_tipping 1149\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
