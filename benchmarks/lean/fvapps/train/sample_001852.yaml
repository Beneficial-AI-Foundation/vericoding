"vc-description": "Given two strings representing two complex numbers.\n\n\nYou need\
  \ to return a string representing their multiplication. Note i2 = -1 according to\
  \ the definition.\n\n\nExample 1:\n\nInput: \"1+1i\", \"1+1i\"\nOutput: \"0+2i\"\
  \nExplanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it\
  \ to the form of 0+2i.\n\n\n\nExample 2:\n\nInput: \"1+-1i\", \"1+-1i\"\nOutput:\
  \ \"0+-2i\"\nExplanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need\
  \ convert it to the form of 0+-2i.\n\n\n\nNote:\n\nThe input strings will not have\
  \ extra blank.\nThe input strings will be given in the form of a+bi, where the integer\
  \ a and b will both belong to the range of [-100, 100]. And the output should be\
  \ also in this form."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def complex_number_multiply : Complex → Complex → Complex\n| c1,\
  \ c2 => sorry\n"
"vc-theorems": "theorem complex_multiplication_correct (a b : Complex) :\n  let result\
  \ := complex_number_multiply a b\n  let expected_real := a.real * b.real - a.imag\
  \ * b.imag \n  let expected_imag := a.real * b.imag + a.imag * b.real\n  result.real\
  \ = expected_real ∧ result.imag = expected_imag :=\nsorry\n\n\ntheorem multiply_by_identity\
  \ (c : Complex) :\n  complex_number_multiply c ⟨1, 0⟩ = c :=\nsorry\n\n\ntheorem\
  \ multiply_by_zero (c : Complex) :\n  complex_number_multiply c ⟨0, 0⟩ = ⟨0, 0⟩\
  \ :=\nsorry\n\n/--\ninfo: '0+2i'\n-/\n#guard_msgs in\n#eval complex_number_multiply\
  \ \"1+1i\" \"1+1i\"\n\n/--\ninfo: '0+-2i'\n-/\n#guard_msgs in\n#eval complex_number_multiply\
  \ \"1+-1i\" \"1+-1i\"\n\n/--\ninfo: '23+2i'\n-/\n#guard_msgs in\n#eval complex_number_multiply\
  \ \"2+3i\" \"4+-5i\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
