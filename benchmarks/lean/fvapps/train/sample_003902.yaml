"vc-description": "You are given an array (which will have a length of at least 3,\
  \ but could be very large) containing integers. The array is either entirely comprised\
  \ of odd integers or entirely comprised of even integers except for a single integer\
  \ `N`. Write a method that takes the array as an argument and returns this \"outlier\"\
  \ `N`.\n\n## Examples\n\n```python\n[2, 4, 0, 100, 4, 11, 2602, 36]\nShould return:\
  \ 11 (the only odd number)\n\n[160, 3, 1719, 19, 11, 13, -21]\nShould return: 160\
  \ (the only even number)\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_outlier (integers : List Int) : Int := sorry\n\n\n\n\n\
  \ntheorem find_outlier_even_list (integers : List Int) \n  (h1 : integers.length\
  \ ≥ 3)\n  (h2 : (integers.filter (fun x => x % 2 ≠ 0)).length = 1) :\n  let result\
  \ := find_outlier integers\n  result % 2 ≠ 0 ∧ \n  ∀ x ∈ integers, x ≠ result →\
  \ x % 2 = 0 := sorry\n"
"vc-theorems": "theorem find_outlier_odd_list (integers : List Int)\n  (h1 : integers.length\
  \ ≥ 3)\n  (h2 : (integers.filter (fun x => x % 2 = 0)).length = 1) :\n  let result\
  \ := find_outlier integers\n  result % 2 = 0 ∧\n  ∀ x ∈ integers, x ≠ result → x\
  \ % 2 ≠ 0 := sorry\n\n/--\ninfo: 11\n-/\n#guard_msgs in\n#eval find_outlier [2,\
  \ 4, 0, 100, 4, 11, 2602, 36]\n\n/--\ninfo: 160\n-/\n#guard_msgs in\n#eval find_outlier\
  \ [160, 3, 1719, 19, 11, 13, -21]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval find_outlier\
  \ [1, 1, 0]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
