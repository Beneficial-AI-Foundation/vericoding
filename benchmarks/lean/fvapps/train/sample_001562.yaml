"vc-description": "This kata generalizes [Twice Linear](https://www.codewars.com/kata/5672682212c8ecf83e000050).\
  \ You may want to attempt that kata first.\n\n## Sequence\n\nConsider an integer\
  \ sequence `U(m)` defined as:\n\n1. `m` is a given non-empty set of positive integers.\n\
  2. `U(m)[0] = 1`, the first number is always 1.\n3. For each `x` in `U(m)`, and\
  \ each `y` in `m`, `x * y + 1` must also be in `U(m)`.\n4. No other numbers are\
  \ in `U(m)`.\n5. `U(m)` is sorted, with no duplicates.\n\n### Sequence Examples\n\
  \n#### `U(2, 3) = [1, 3, 4, 7, 9, 10, 13, 15, 19, 21, 22, 27, ...]`\n\n1 produces\
  \ 3 and 4, since `1 * 2 + 1 = 3`, and `1 * 3 + 1 = 4`.\n\n3 produces 7 and 10, since\
  \ `3 * 2 + 1 = 7`, and `3 * 3 + 1 = 10`.\n\n#### `U(5, 7, 8) = [1, 6, 8, 9, 31,\
  \ 41, 43, 46, 49, 57, 64, 65, 73, 156, 206, ...]`\n\n1 produces 6, 8, and 9.\n\n\
  6 produces 31, 43, and 49.\n\n## Task:\n\nImplement `n_linear` or `nLinear`: given\
  \ a set of postive integers `m`, and an index `n`, find `U(m)[n]`, the `n`th value\
  \ in the `U(m)` sequence.\n\n### Tips\n\n* Tests use large n values. Slow algorithms\
  \ may time-out.\n* Tests use large values in the m set. Algorithms which multiply\
  \ further than neccessary may overflow.\n* Linear run time and memory usage is possible.\n\
  * How can you build the sequence iteratively, without growing extra data structures?"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def n_linear (multipliers : List Nat) (n : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem n_linear_positive (multipliers : List Nat) (n : Nat)\n  (h1\
  \ : multipliers.length > 0) \n  (h2 : ∀ x ∈ multipliers, x ≥ 2)\n  (h3 : n ≥ 1)\
  \ :\n  n_linear multipliers n > 0 :=\nsorry\n\n\ntheorem n_linear_monotonic (multipliers\
  \ : List Nat) (n : Nat)\n  (h1 : multipliers.length > 0)\n  (h2 : ∀ x ∈ multipliers,\
  \ x ≥ 2) \n  (h3 : n > 1) :\n  n_linear multipliers (n-1) < n_linear multipliers\
  \ n :=\nsorry\n\n\ntheorem n_linear_strictly_increasing (multipliers : List Nat)\n\
  \  (h1 : multipliers.length > 0)\n  (h2 : ∀ x ∈ multipliers, x ≥ 2) :\n  ∀ i, i\
  \ < 2 → n_linear multipliers (i+1) < n_linear multipliers (i+2) :=\nsorry\n\n/--\n\
  info: 10\n-/\n#guard_msgs in\n#eval n_linear [2, 3] 5\n\n/--\ninfo: 64\n-/\n#guard_msgs\
  \ in\n#eval n_linear [5, 7, 8] 10\n\n/--\ninfo: 46\n-/\n#guard_msgs in\n#eval n_linear\
  \ [2, 3, 4, 5] 33\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
