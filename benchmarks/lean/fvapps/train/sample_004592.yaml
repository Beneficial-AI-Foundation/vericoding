"vc-description": "John and his wife Ann have decided to go to Codewars. \n\nOn first\
  \ day Ann will do one kata and John - he wants to know how it is working - 0 kata.\n\
  \nLet us call `a(n)` - and `j(n)` - the number of katas done by Ann - and John -\
  \ at day `n`. We have `a(0) = 1` and in the same manner `j(0) = 0`.\n\nThey have\
  \ chosen the following rules:\n\n- On day `n` the number of katas done by Ann should\
  \ be `n` minus the number of katas done by John at day `t`, `t` being equal to the\
  \ number of katas done\nby Ann herself at day `n - 1`.\n\n- On day `n` the number\
  \ of katas done by John should be `n` minus the number of katas done by Ann at day\
  \ `t`, `t` being equal to the number of katas done\nby John himself at day `n -\
  \ 1`.\n\nWhoops! I think they need to lay out a little clearer exactly what there're\
  \ getting themselves into!\n\n# Could you write:\n- 1) two functions `ann` and `john\
  \ (parameter n)` giving the list of the numbers of katas Ann and John should take\
  \ on the first n days (see first examples below)? \n- 2) The total number of katas\
  \ taken by ann `function sum_ann(n)` and john `function sum_john(n)` - on the first\
  \ n days? \n \n\nThe functions in 1) are not tested in Fortran and not tested in\
  \ Shell.\n\n# Examples:\n```\njohn(11) -->  [0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6]\n\
  ann(6) -->  [1, 1, 2, 2, 3, 3]\n\nsum_john(75) -->  1720\nsum_ann(150) -->  6930\n\
  ```\n\n# Shell Note:\nsumJohnAndAnn has two parameters:\n\nfirst one : n (number\
  \ of days, $1)\n\nsecond one : which($2) ->\n\n- 1 for getting John's sum\n\n- 2\
  \ for getting Ann's sum.\n\nSee \"Sample Tests\".\n\n# Note: \n\nKeep an eye on\
  \ performance."
"vc-preamble": "import Imports.AllImports\n\ndef john (n : Nat) : List Nat := sorry\n\
  def ann (n : Nat) : List Nat := sorry"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sum_john (n : Nat) : Nat := sorry\ndef sum_ann (n : Nat) :\
  \ Nat := sorry\n"
"vc-theorems": "theorem sequences_start_correctly {n : Nat} (h : n > 0) : \n  (john\
  \ n).get ⟨0, sorry⟩ = 0 ∧ (ann n).get ⟨0, sorry⟩ = 1 := sorry\n\n\ntheorem sequence_lengths\
  \ {n : Nat} (h : n > 0) :\n  (john n).length = n ∧ (ann n).length = n := sorry\n\
  \n\ntheorem sequences_nonnegative {n : Nat} (h : n > 0) :\n  (∀ x ∈ john n, x ≥\
  \ 0) ∧ (∀ x ∈ ann n, x ≥ 0) := sorry\n\n\ntheorem sum_functions_match {n : Nat}\
  \ (h : n > 0) :\n  sum_john n = ((john n).foldl (· + ·) 0) ∧ \n  sum_ann n = ((ann\
  \ n).foldl (· + ·) 0) := sorry\n\n\ntheorem sequence_relationship {n : Nat} (h :\
  \ n > 0) :\n  ∀ i : Nat, i < n → i > 0 → \n    ((john n).get ⟨i, sorry⟩ = i - (ann\
  \ n).get ⟨(john n).get ⟨i-1, sorry⟩, sorry⟩) ∧\n    ((ann n).get ⟨i, sorry⟩ = i\
  \ - (john n).get ⟨(ann n).get ⟨i-1, sorry⟩, sorry⟩) := sorry\n\n/--\ninfo: [0, 0,\
  \ 1, 2, 2, 3, 4, 4, 5, 6, 6]\n-/\n#guard_msgs in\n#eval john 11\n\n/--\ninfo: [1,\
  \ 1, 2, 2, 3, 3]\n-/\n#guard_msgs in\n#eval ann 6\n\n/--\ninfo: 1720\n-/\n#guard_msgs\
  \ in\n#eval sum_john 75\n\n/--\ninfo: 6930\n-/\n#guard_msgs in\n#eval sum_ann 150\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
