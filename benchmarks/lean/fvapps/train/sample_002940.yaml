"vc-description": "Write a function `insertDash(num)`/`InsertDash(int num)` that will\
  \ insert dashes ('-') between each two odd numbers in num. For example: if num is\
  \ 454793 the output should be 4547-9-3. Don't count zero as an odd number.\n\nNote\
  \ that the number will always be non-negative (>= 0)."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def insert_dash (n : Nat) : String :=\n  sorry\n"
"vc-theorems": "theorem insert_dash_outputs_string : ∀ n : Nat,\n  ∃ s : String, insert_dash\
  \ n = s :=\nsorry\n\n\ntheorem insert_dash_valid_chars : ∀ n : Nat,\n  ∀ c ∈ (insert_dash\
  \ n).data, c = '-' ∨ ('0'.toNat ≤ c.toNat ∧ c.toNat ≤ '9'.toNat) :=\nsorry \n\n\n\
  theorem insert_dash_preserves_digits : ∀ n : Nat,\n  ((insert_dash n).data.filter\
  \ (λ c => '0'.toNat ≤ c.toNat ∧ c.toNat ≤ '9'.toNat)).length = (toString n).length\
  \ :=\nsorry\n\n\ntheorem insert_dash_between_odd : ∀ n : Nat,\n  let parts := (insert_dash\
  \ n).split (· = '-')\n  ∀ i, i + 1 < parts.length →\n    let last_digit := parts[i]!.data[parts[i]!.length\
  \ - 1]!\n    let first_digit := parts[i+1]!.data[0]!\n    (last_digit.toNat - '0'.toNat)\
  \ % 2 = 1 ∧ \n    (first_digit.toNat - '0'.toNat) % 2 = 1 :=\nsorry\n\n\ntheorem\
  \ insert_dash_reversible : ∀ n : Nat,\n  (String.toNat! ((insert_dash n).replace\
  \ \"-\" \"\")) = n :=\nsorry\n\n/--\ninfo: '4547-9-3'\n-/\n#guard_msgs in\n#eval\
  \ insert_dash 454793\n\n/--\ninfo: '123456'\n-/\n#guard_msgs in\n#eval insert_dash\
  \ 123456\n\n/--\ninfo: '1-3-5-7-9'\n-/\n#guard_msgs in\n#eval insert_dash 13579\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
