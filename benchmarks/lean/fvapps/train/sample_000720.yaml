"vc-description": "Mr. X stays in a mansion whose door opens in the North. He travels\
  \ every morning to meet his friend Ms. Y walking a predefined path.\n\nTo cut the\
  \ distance short, one day he decides to construct a skywalk from his place to his\
  \ friend’s place. Help him to find the shortest distance between the two residences.\n\
  \n\n-----Input-----\n\nThe first line contains a single positive integer T <= 100,\
  \ the number of test cases. T test cases follow. The only line of each test case\
  \ contains a string which is the path from X to Y. The integer value represents\
  \ the distance. The character R or L represents a Right or a Left respectively.\n\
  \n-----Output-----\n\nFor each test case, output a single line containing the minimum\
  \ distance and the direction(N,S,W,E,NE,NW,SE,SW) of Y’s residence with respect\
  \ to X’s residence. The output distance should have only 1 decimal place with no\
  \ approximation. Print “0.0” if X’s and Y’s residence coincide.\n\n-----Example-----\n\
  Input:\n1\n2 L 2 R 2 L 1\n\nOutput:\n5.0NW\n\nExplanation\nMr. X travels 2units\
  \ and then takes a Left, and then he travels 2units and takes a Right, then after\
  \ travelling 2units he takes a Left and finally travels 1unit to reach Y’s residence.\n\
  (Unlike Input, Output does not have spaces between the distance and direction)"
"vc-preamble": "import Imports.AllImports\n\ndef Point := Nat × Nat -- Position representation\n\
  def Direction := String -- Direction representation \n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def process : List String → String \n  | lst => sorry\n"
"vc-theorems": "theorem direction_valid (moves : List String) :\n  let result := process\
  \ moves\n  ∃ d, d ∈ [\"\", \"N\", \"S\", \"E\", \"W\", \"NE\", \"NW\", \"SE\", \"\
  SW\"] ∧ \n  (result.endsWith d ∨ result = \"0.0\") := by\n  sorry\n\n\ntheorem distance_nonneg\
  \ (moves : List String) :\n  let result := process moves\n  let numStr := result.take\
  \ (result.length - 2)  -- Take all but direction\n  (String.toNat! numStr) ≥ 0 :=\
  \ by\n  sorry\n\n\ntheorem origin_return :\n  process [\"1\", \"R\", \"1\", \"R\"\
  , \"1\", \"R\", \"1\"] = \"0.0\" := by\n  sorry\n\n\ntheorem single_move (n : Nat)\
  \ (h : 0 < n ∧ n ≤ 100) :\n  process [toString n] = s!\"{toString n}.0N\" := by\n\
  \  sorry\n\n\ntheorem distance_triangle_inequality (moves : List String) :\n  let\
  \ total_distance := moves.foldl (fun acc x => \n    if x ∉ [\"L\", \"R\"] then acc\
  \ + (String.toNat! x) else acc) 0\n  let result := process moves\n  let resultNum\
  \ := String.toNat! (result.take (result.length - 2))\n  resultNum ≤ total_distance\
  \ := by\n  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
