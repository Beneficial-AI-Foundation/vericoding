"vc-description": "You are given two strings of equal length $s$ and $t$ consisting\
  \ of lowercase Latin letters. You may perform any number (possibly, zero) operations\
  \ on these strings.\n\nDuring each operation you choose two adjacent characters\
  \ in any string and assign the value of the first character to the value of the\
  \ second or vice versa.\n\nFor example, if $s$ is \"acbc\" you can get the following\
  \ strings in one operation:   \"aabc\" (if you perform $s_2 = s_1$);  \"ccbc\" (if\
  \ you perform $s_1 = s_2$);  \"accc\" (if you perform $s_3 = s_2$ or $s_3 = s_4$);\
  \  \"abbc\" (if you perform $s_2 = s_3$);  \"acbb\" (if you perform $s_4 = s_3$);\
  \ \n\nNote that you can also apply this operation to the string $t$.\n\nPlease determine\
  \ whether it is possible to transform $s$ into $t$, applying the operation above\
  \ any number of times.\n\nNote that you have to answer $q$ independent queries.\n\
  \n\n-----Input-----\n\nThe first line contains one integer $q$ ($1 \\le q \\le 100$) —\
  \ the number of queries. Each query is represented by two consecutive lines.\n\n\
  The first line of each query contains the string $s$ ($1 \\le |s| \\le 100$) consisting\
  \ of lowercase Latin letters.\n\nThe second line of each query contains the string\
  \ $t$ ($1 \\le |t| \\leq 100$, $|t| = |s|$) consisting of lowercase Latin letters.\n\
  \n\n-----Output-----\n\nFor each query, print \"YES\" if it is possible to make\
  \ $s$ equal to $t$, and \"NO\" otherwise.\n\nYou may print every letter in any case\
  \ you want (so, for example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\"\
  \ will all be recognized as positive answer).\n\n\n-----Example-----\nInput\n3\n\
  xabb\naabx\ntechnocup\ntechnocup\na\nz\n\nOutput\nYES\nYES\nNO\n\n\n\n-----Note-----\n\
  \nIn the first query, you can perform two operations $s_1 = s_2$ (after it $s$ turns\
  \ into \"aabb\") and $t_4 = t_3$ (after it $t$ turns into \"aabb\"). \n\nIn the\
  \ second query, the strings are equal initially, so the answer is \"YES\".\n\nIn\
  \ the third query, you can not make strings $s$ and $t$ equal. Therefore, the answer\
  \ is \"NO\"."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def are_strings_transformable (s t : String) : Bool := sorry\n\n\
  theorem are_strings_transformable_reflexive (s t : String) \n  (h : s.length > 0\
  \ ∧ t.length > 0) :\n  are_strings_transformable s t = are_strings_transformable\
  \ t s := sorry\n"
"vc-theorems": "theorem are_strings_transformable_self (s : String) \n  (h : s.length\
  \ > 0) : \n  are_strings_transformable s s = true := sorry\n\n\ntheorem no_shared_chars_implies_not_transformable\
  \ (s t : String)\n  (h1 : s.length > 0)\n  (h2 : ∀ c, c ∈ s.data → c ∉ t.data) :\n\
  \  are_strings_transformable s t = false := sorry\n\n\ntheorem shared_chars_implies_transformable\
  \ (s t : String)\n  (h1 : s.length > 0 ∧ t.length > 0)\n  (h2 : ∃ c, c ∈ s.data\
  \ ∧ c ∈ t.data) :\n  are_strings_transformable s t = true := sorry\n\n/--\ninfo:\
  \ True\n-/\n#guard_msgs in\n#eval are_strings_transformable \"xabb\" \"aabx\"\n\n\
  /--\ninfo: True\n-/\n#guard_msgs in\n#eval are_strings_transformable \"technocup\"\
  \ \"technocup\"\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval are_strings_transformable\
  \ \"a\" \"z\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
