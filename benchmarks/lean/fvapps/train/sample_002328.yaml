vc-description: |-
  You are climbing a stair case. It takes n steps to reach to the top.

  Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

  Note: Given n will be a positive integer.

  Example 1:


  Input: 2
  Output: 2
  Explanation: There are two ways to climb to the top.
  1. 1 step + 1 step
  2. 2 steps


  Example 2:


  Input: 3
  Output: 3
  Explanation: There are three ways to climb to the top.
  1. 1 step + 1 step + 1 step
  2. 1 step + 2 steps
  3. 2 steps + 1 step
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def climbStairs (n : Int) : Int := sorry

  theorem climbStairs_positive (n : Int) (h : n ≥ 0) :
    climbStairs n > 0 := sorry
vc-theorems: |
  theorem climbStairs_fibonacci (n : Int) (h : n ≥ 2) :
    climbStairs n = climbStairs (n-1) + climbStairs (n-2) := sorry


  theorem climbStairs_base_cases :
    climbStairs 0 = 1 ∧ climbStairs 1 = 1 := sorry


  theorem climbStairs_negative_undefined (n : Int) (h : n < 0) :
    False := sorry


  theorem climbStairs_strictly_increasing (n : Int) (h : n ≥ 2) :
    climbStairs n > climbStairs (n-1) := sorry

  /--
  info: 2
  -/
  #guard_msgs in
  #eval climb_stairs 2

  /--
  info: 3
  -/
  #guard_msgs in
  #eval climb_stairs 3

  /--
  info: 5
  -/
  #guard_msgs in
  #eval climb_stairs 4
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
