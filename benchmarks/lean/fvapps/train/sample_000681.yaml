"vc-description": "Now-a-days, Manish is becoming  famous for bank robbery in the\
  \ country because of his cleverness, he never robs own his own.He has four workers\
  \ A , B, C, and D , all working under him.All of the four take some amount for that.\
  \ There are total N banks in the country and Manish wants to rob all the banks with\
  \ minimum\n\namount spent on workers.Only one worker is allowed to rob the ith bank\
  \ but following a condition that if one worker robs ith bank, then he can't rob\
  \ (i+1) th bank.\n\nSo ,Manish wants you to calculate minimum amount that he has\
  \ to spend on all workers to rob all N banks.\n\n-----Input Format-----\nFirst line\
  \ consists number of test cases T.For each test case,\n\nfirst line consists an\
  \ integer N, number of banks in the country\n\nand the next N line consists 4 integers\
  \ amount taken by A,B,C and D respectively to rob ith bank.\n\n-----Output format-----\n\
  For each test case ,output an integer, minimum amount paid  by Manish in separate\
  \ line .\n\n-----Constraint-----\n- 1<=T<=1000\n- 1<=N<=100000\n- 1<=amount<=100000\n\
  \n-----Subtasks-----\nSubtask-1 (10 points)\n- 1<=T<=5\n- 1<=N<=10\n- 1<=amount<=10\n\
  Subtask-1 (30 points)\n- 1<=T<=100\n- 1<=N<=1000\n- 1<=amount<=1000\nSubtask-1 (60\
  \ points)\nOriginal Constraints \nSample Input\n1\n3\n4 7 2 9\n5 6 4 7\n2 6 4 3\n\
  \nSample Output\n10"
"vc-preamble": "import Imports.AllImports\n\ndef minRobberyCost (n : Nat) (costs :\
  \ List (List Nat)) : Nat :=\n  sorry\n\n\ndef listMin (xs : List Nat) : Nat :=\n\
  \  match xs with\n  | [] => 0\n  | h :: t => List.foldl min h t\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def findMinValidPath (costs : List (List Nat)) : Nat :=\n  let\
  \ range4 := [0, 1, 2, 3]\n  let maxVal := 10000  -- arbitrary large value\n  let\
  \ bank1 := costs.head!\n  let bank2 := costs.get! 1\n  listMin (List.map (fun w1\
  \ =>\n    listMin (List.map (fun w2 =>\n      if w1 ≠ w2 then bank1[w1]! + bank2[w2]!\
  \ else maxVal\n    ) range4)\n  ) range4)\n"
"vc-theorems": "theorem single_bank_result (costs : List (List Nat)) \n  (h1 : costs.length\
  \ = 1)\n  (h2 : ∀ lst ∈ costs, lst.length = 4)\n  (h3 : ∀ lst ∈ costs, ∀ x ∈ lst,\
  \ x > 0) :\n  minRobberyCost 1 costs = listMin (costs.head!) := by sorry\n\n\ntheorem\
  \ two_banks_positive (costs : List (List Nat))\n  (h1 : costs.length = 2)\n  (h2\
  \ : ∀ lst ∈ costs, lst.length = 4)\n  (h3 : ∀ lst ∈ costs, ∀ x ∈ lst, x > 0) :\n\
  \  minRobberyCost 2 costs > 0 := by sorry\n\n\ntheorem two_banks_lower_bound (costs\
  \ : List (List Nat))\n  (h1 : costs.length = 2)\n  (h2 : ∀ lst ∈ costs, lst.length\
  \ = 4)\n  (h3 : ∀ lst ∈ costs, ∀ x ∈ lst, x > 0) :\n  minRobberyCost 2 costs ≥ listMin\
  \ (costs.head!) + listMin (costs.get! 1) := by sorry\n\n\ntheorem two_banks_min_path\
  \ (costs : List (List Nat))\n  (h1 : costs.length = 2) \n  (h2 : ∀ lst ∈ costs,\
  \ lst.length = 4)\n  (h3 : ∀ lst ∈ costs, ∀ x ∈ lst, x > 0) :\n  minRobberyCost\
  \ 2 costs = findMinValidPath costs := by sorry\n\n/--\ninfo: 10\n-/\n#guard_msgs\
  \ in\n#eval min_robbery_cost 3 [[4, 7, 2, 9], [5, 6, 4, 7], [2, 6, 4, 3]]\n\n/--\n\
  info: 7\n-/\n#guard_msgs in\n#eval min_robbery_cost 2 [[1, 2, 3, 4], [5, 6, 7, 8]]\n\
  \n/--\ninfo: 10\n-/\n#guard_msgs in\n#eval min_robbery_cost 1 [[10, 20, 30, 40]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
