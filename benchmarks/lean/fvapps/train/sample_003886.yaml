"vc-description": "Hi guys, welcome to introduction to DocTesting.\n\nThe kata is\
  \ composed of two parts; in part (1) we write three small functions, and in part\
  \ (2) we write a few doc tests for those functions.\n\nLets talk about the functions\
  \ first...\n\n    The reverse_list function takes a list and returns the reverse\
  \ of it.\n    If given an empty list, simply return an empty list.\n\nThe second\
  \ function...\n\n    The sum_list function takes a list as input and adds up all\
  \ the values, \n    returning an integer. If the list is empty, return 0.\n\nThe\
  \ third function...\n\n    The head_of_list function simply returns the first item\
  \ in the list.\n    If the list is empty return None.\n\nEach of these functions\
  \ can be easily written with a single line of code; there are some tests for correctness\
  \ but no tests for effciency.\n\nOnce you have implemented all three of these functions\
  \ you can move onto phase two, which is writing doc tests. If you haven't written\
  \ doc tests before then I suggest you check out the following documentation: \n\
  https://docs.python.org/3/library/doctest.html\n\nTo complete this kata all you\
  \ have to do is write **EXACTLY TWO** doc tests for each of the three functions\
  \ (any more/less than that and you will fail the tests).\n\nHere is an example:\n\
  \n    def double(y):\n      \"\"\"Function returns y * 2\n      >>> double(2)\n\
  \      4\n      \"\"\"\n      return y * 2\n\nIn the example above we have a function\
  \ called 'double' and a single doctest. When we run the doctest module Python will\
  \ check if double(2) equals 4. If it does not, then the doctest module will flag\
  \ up an error.\n\nPlease note that this is intended as a beginners introduction\
  \ to docstrings, if you try to do something clever (such as writing doc tests to\
  \ catch exceptions, or tinkering with the 'option flags'), you will probably fail\
  \ a test or two. This is due to how the tests are written.  \n\nOh and one last\
  \ thing, don't try and get too 'cheeky' and try something like:\n    \n    \"\"\"\
  \n    >>> True\n    True\n    \"\"\"\n\nsuch a solution is (a) not in the spirit\
  \ of things and (b) I got tests for that! :p\n\nGood Luck!\n\n~~~~~~~~~~~~~~~ Issues\
  \ & Helpful hints ~~~~~~~~~~~~~~~~~~~~~~~\n\n1) In addition to the 'don't get too\
  \ clever rule', please try to be precise when making your doctests; [1,2] may fail\
  \ where [1, 2] may succeed. Likewise, \">>>function(x)\" may fail where \">>> function(x)\"\
  \ is likely to suceed *(note the difference is single \" \" character)*. In short,\
  \ if you fail a test the first thing to check is that you dont have any unecessary\
  \ characters/spaces and/or odd formating.\n\n2) As you shall see from the kata discussion\
  \ testing for None is tricky and lots of people are struggling to get None tests\
  \ working. So I'm going to quickly show you a way to test for not that will (should)\
  \ pass the kata:\n  \n    def is_string(string):\n        \"\"\"\n        returns\
  \ the string if the string is Not empty, otherwise returns None\n        >>> is_string(\"\
  \") is None\n        True\n        \"\"\"\n        return string if string else\
  \ None\n\n3) If you happen to be struggling to actually complete the three functions\
  \ in the first place then I would recomend you google *\"Python Indexing\", \"Pythons\
  \ sum function\" and \"if/else statements in Python\"*."
"vc-preamble": "import Imports.AllImports\n\ndef reverse_list (xs : List α) : List\
  \ α := sorry\ndef sum_list (xs : List Int) : Int := sorry\n\ndef head_of_list (xs\
  \ : List α) : Option α := sorry\n\ntheorem reverse_length {α : Type} (xs : List\
  \ α) :\n  (reverse_list xs).length = xs.length := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def List.sum : List Int → Int\n  | [] => 0 \n  | x::xs => x + List.sum\
  \ xs\n"
"vc-theorems": "theorem reverse_correct {α : Type} (xs : List α) :\n  reverse_list\
  \ xs = xs.reverse := sorry\n\n\ntheorem reverse_involution {α : Type} (xs : List\
  \ α) :\n  reverse_list (reverse_list xs) = xs := sorry\n\n\ntheorem sum_list_correct\
  \ (xs : List Int) :\n  sum_list xs = List.sum xs := sorry\n\n\ntheorem sum_list_double\
  \ (xs : List Int) :\n  sum_list (xs ++ xs) = sum_list xs * 2 := sorry\n\n\ntheorem\
  \ sum_list_nil :\n  sum_list [] = 0 := sorry\n\n\ntheorem head_of_list_nonempty\
  \ {α : Type} (xs : List α) (h : xs ≠ []) :\n  head_of_list xs = xs.head? := sorry\n\
  \n\ntheorem head_of_list_empty {α : Type} :\n  head_of_list ([] : List α) = none\
  \ := sorry\n\n/--\ninfo: [3, 2, 1]\n-/\n#guard_msgs in\n#eval reverse_list [1, 2,\
  \ 3]\n\n/--\ninfo: []\n-/\n#guard_msgs in\n#eval reverse_list []\n\n/--\ninfo: 10\n\
  -/\n#guard_msgs in\n#eval sum_list [1, 2, 3, 4]\n\n/--\ninfo: 0\n-/\n#guard_msgs\
  \ in\n#eval sum_list []\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval head_of_list\
  \ [1, 2, 3]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
