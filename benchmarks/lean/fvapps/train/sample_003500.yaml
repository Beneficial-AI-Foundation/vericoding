"vc-description": "# Task\n Your task is to find the smallest number which is evenly\
  \ divided by all numbers between `m` and `n` (both inclusive).\n\n# Example\n\n\
  \ For `m = 1, n = 2`, the output should be `2`.\n \n For `m = 2, n = 3`, the output\
  \ should be `6`.\n \n For `m = 3, n = 2`, the output should be `6` too.\n \n For\
  \ `m = 1, n = 10`, the output should be `2520`.\n\n# Input/Output\n\n\n - `[input]`\
  \ integer `m`\n\n  `1 ≤ m ≤ 25`\n\n\n - `[input]` integer `n`\n\n  `1 ≤ n ≤ 25`\n\
  \n\n - `[output]` an integer"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def lcm (a b : Nat) : Nat := sorry\ndef mn_lcm (m n : Nat) : Nat\
  \ := sorry\n"
"vc-theorems": "theorem lcm_properties {a b : Nat} (h1 : a > 0) (h2 : b > 0) :\n \
  \ let result := lcm a b\n  (result % a = 0) ∧ (result % b = 0) ∧ (result ≥ max a\
  \ b) ∧ (result ≥ 0) := sorry\n\n\ntheorem mn_lcm_properties {m n : Nat} (h1 : m\
  \ > 0) (h2 : n > 0) :\n  let result := mn_lcm m n\n  let lower := min m n\n  let\
  \ upper := max m n\n  (∀ i, lower ≤ i → i ≤ upper → result % i = 0) ∧ (result ≥\
  \ upper) := sorry\n\n\ntheorem lcm_known_values :\n  lcm 2 3 = 6 ∧ lcm 6 8 = 24\
  \ := sorry\n\n\ntheorem mn_lcm_order_invariant {m n : Nat} :\n  mn_lcm m n = mn_lcm\
  \ n m := sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval mn_lcm 1 2\n\n/--\ninfo:\
  \ 6\n-/\n#guard_msgs in\n#eval mn_lcm 2 3\n\n/--\ninfo: 2520\n-/\n#guard_msgs in\n\
  #eval mn_lcm 1 10\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
