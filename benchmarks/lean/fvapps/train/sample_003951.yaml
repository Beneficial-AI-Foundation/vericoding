"vc-description": "Consider the following well known rules:\n\n- A number is divisible\
  \ by 3 if the sum of its digits is divisible by 3. Let's call '3' a \"1-sum\" prime\n\
  - For 37, we take numbers in groups of threes from the right and check if the sum\
  \ of these groups is divisible by 37. \n  Example: 37 * 123456787 = 4567901119 =>\
  \ 4 + 567 + 901 + 119 = 1591 = 37 * 43. Let's call this a \"3-sum\" prime because\
  \ we use groups of 3.\n- For 41, we take numbers in groups of fives from the right\
  \ and check if the sum of these groups is divisible by 41. This is a \"5-sum\" prime.\n\
  - Other examples: 239 is a \"7-sum\" prime (groups of 7), while 199 is a \"99-sum\"\
  \ prime (groups of 99).\n\nLet's look at another type of prime:\n- For 11, we need\
  \ to add all digits by alternating their signs from the right. \n  Example: 11 *\
  \ 123456 = 1358016 => 6-1+0-8+5-3+1 = 0, which is divible by 11. Let's call this\
  \ a \"1-altsum\" prime\n- For 7, we need to group the digits into threes from the\
  \ right and add all groups by alternating their signs.\n  Example: 7 * 1234567891234\
  \ = 8641975238638 => 638 - 238 + 975 - 641 + 8 = 742/7 = 106. \n- 7 is a \"3-altsum\"\
  \ prime because we use groups of threes. 47 is a \"23-altsum\" (groups of 23), while\
  \ 73 is a \"4-altsum\" prime (groups of 4).\n\n\nYou will be given a prime number\
  \ `p` and your task is to find the smallest positive integer `n` such that `p’s`\
  \ divisibility testing is `n-sum` or `n-altsum`.\n\nFor example:\n```\nsolve(3)\
  \ = \"1-sum\"\nsolve(7) = \"3-altsum\"\n```\nPrimes will not exceed `50,000,000`.\
  \ More examples in test cases. \n\nYou can get some insight from [Fermat's little\
  \ theorem](https://en.wikipedia.org/wiki/Fermat%27s_little_theorem). \n\nGood luck!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def divisors (n : Nat) : List Nat := sorry\n\ntheorem divisors_all_divide\
  \ (n : Nat) (h : n ≥ 2) :\n  ∀ d ∈ divisors n, n % d = 0 := sorry\n"
"vc-theorems": "theorem divisors_increasing (n : Nat) (h : n ≥ 2) :\n  ∀ i j, i <\
  \ j → i < (divisors n).length → j < (divisors n).length → \n    (divisors n).get!\
  \ i < (divisors n).get! j := sorry\n\n\ntheorem divisors_contains_one_and_self (n\
  \ : Nat) (h : n ≥ 2) :\n  divisors n ≠ [] ∧ \n  List.head! (divisors n) = 1 ∧ \n\
  \  List.getLast! (divisors n) = n := sorry\n\n\ntheorem divisors_unique (n : Nat)\
  \ (h : n ≥ 2) :\n  List.Nodup (divisors n) := sorry\n\n\ntheorem divisors_complementary_pairs\
  \ (n : Nat) (h : n ≥ 2) (k : Nat) :\n  k ∈ divisors n → k * k ≤ n → k * (n / k)\
  \ = n := sorry\n\n/--\ninfo: '1-sum'\n-/\n#guard_msgs in\n#eval solve 3\n\n/--\n\
  info: '3-altsum'\n-/\n#guard_msgs in\n#eval solve 7\n\n/--\ninfo: '1-altsum'\n-/\n\
  #guard_msgs in\n#eval solve 11\n\n/--\ninfo: '3-sum'\n-/\n#guard_msgs in\n#eval\
  \ solve 37\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
