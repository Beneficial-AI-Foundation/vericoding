"vc-description": "In this Kata, you will be given a string and your task will be\
  \ to return the length of the longest prefix that is also a suffix. A prefix is\
  \ the start of a string while the suffix is the end of a string.  For instance,\
  \ the prefixes of the string `\"abcd\"` are `[\"a\",\"ab\",\"abc\"]`. The suffixes\
  \ are `[\"bcd\", \"cd\", \"d\"]`. You should not overlap the prefix and suffix.\n\
  \n```Haskell\nfor example:\nsolve(\"abcd\") = 0, because no prefix == suffix. \n\
  solve(\"abcda\") = 1, because the longest prefix which == suffix is \"a\".\nsolve(\"\
  abcdabc\") = 3. Longest prefix which == suffix is \"abc\".\nsolve(\"aaaa\") = 2.\
  \ Longest prefix which == suffix is \"aa\". You should not overlap the prefix and\
  \ suffix\nsolve(\"aa\") = 1. You should not overlap the prefix and suffix.\nsolve(\"\
  a\") = 0. You should not overlap the prefix and suffix.\n```\n\nAll strings will\
  \ be lowercase and string lengths are `1 <= length <= 500`\n\nMore examples in test\
  \ cases. Good luck!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve : String → Nat := sorry\n\ntheorem solve_length_bound\
  \ (s : String) : \n  solve s ≤ (s.length / 2) := sorry\n"
"vc-theorems": "theorem solve_nonnegative (s : String) :\n  solve s ≥ 0 := sorry\n\
  \n\ntheorem solve_valid_match (s : String) :\n  solve s > 0 → solve s ≤ s.length\
  \ / 2 ∧ \n  s.take (solve s) = s.takeRight (solve s) := sorry\n\n\ntheorem solve_concatenation\
  \ {s1 s2 : String} \n  (h1 : s1.length > 0) (h2 : s2.length > 0) :\n  solve (s1\
  \ ++ s2 ++ s1) ≥ s1.length := sorry\n\n\ntheorem solve_empty : solve \"\" = 0 :=\
  \ sorry\n\ntheorem solve_single (c : Char) :\n  solve (String.mk [c]) = 0 := sorry\n\
  \n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval solve \"abcd\"\n\n/--\ninfo: 1\n-/\n#guard_msgs\
  \ in\n#eval solve \"abcda\"\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval solve \"\
  abcdabc\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
