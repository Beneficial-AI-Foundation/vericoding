"vc-description": "It's Friday night, and Chuck is bored. He's already run 1,000 miles,\
  \ stopping only to eat a family sized bag of Heatwave Doritos and a large fistful\
  \ of M&Ms. He just can't stop thinking about kicking something! \n\nThere is only\
  \ one thing for it, Chuck heads down to his local MMA gym and immediately challenges\
  \ every fighter there to get in the cage and try and take him down... AT THE SAME\
  \ TIME! \n\nYou are provided an array of strings that represent the cage and Chuck's\
  \ opponents. Your task, in traditional Chuck style, is to take their heads off!!\
  \ Throw punches, kicks, headbutts (or more likely - regex or iteration...) but whatever\
  \ you do, remove their heads. Return the same array of strings, but with the heads\
  \ ('O') removed and replaced with a space (' ').\n\nIf the provided array is empty,\
  \ or is an empty string, return 'Gym is empty'. If you are given an array of numbers,\
  \ return 'This isn't the gym!!'.\n\nFIGHT!!\n\n*Original design of this kata was\
  \ a much more beautiful thing - the test cases illustrate the idea, and the intended\
  \ output. I am unable to make the actual output go over multiple lines so for now\
  \ at least you will have to imagine the beauty!*"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def head_smash (arr : List String) : List String ⊕ String := sorry\n\
  \ntheorem head_smash_empty : \n  head_smash [] = Sum.inr \"Gym is empty\" := sorry\n"
"vc-theorems": "theorem head_smash_nonempty_properties {arr : List String} (h : arr\
  \ ≠ []) :\n  match head_smash arr with\n  | Sum.inl result => \n      -- Same length\
  \ as input\n      result.length = arr.length ∧  \n      -- Each string in result\
  \ has same length as corresponding input\n      (∀ i, i < result.length → (result.get\
  \ ⟨i, by sorry⟩).length = (arr.get ⟨i, by sorry⟩).length) ∧\n      -- No O characters\
  \ in result\n      (∀ s ∈ result, ∀ c ∈ s.data, c ≠ 'O') ∧\n      -- Only O characters\
  \ were replaced with spaces\n      (∀ i < result.length, ∀ j < (result.get ⟨i, by\
  \ sorry⟩).length,\n        (let orig := (arr.get ⟨i, by sorry⟩).data.get ⟨j, by\
  \ sorry⟩;\n         let transformed := (result.get ⟨i, by sorry⟩).data.get ⟨j, by\
  \ sorry⟩;\n         orig = transformed ∨ (orig = 'O' ∧ transformed = ' ')))\n  |\
  \ Sum.inr _ => False\n  := sorry\n\n/--\ninfo: expected1\n-/\n#guard_msgs in\n#eval\
  \ head_smash [\"*****************************************\", \"**  _O_   *   _O_\
  \   *   _O_   *   _O_  **\", \"** /(.)J  *  C(.)J  *  /(.)J  *  C(.)J **\", \"**\
  \ _| |_  *  _| |_  *  _( )_  *  _( )_ *\"]\n\n/--\ninfo: 'Gym is empty'\n-/\n#guard_msgs\
  \ in\n#eval head_smash []\n\n/--\ninfo: \"This isn't the gym!!\"\n-/\n#guard_msgs\
  \ in\n#eval head_smash 876\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
