"vc-description": "Raju has created a program to find the square root of a number.\
  \ But his program can store only integers. Being a newbie, he didn't know about\
  \ rounding the numbers. Hence his program returns the absolute value of the result\
  \ if possible. For example, sqrt(3) = 1.73205080757……. His program will return 1\n\
  Given a number $N$, and it's integral square root $S$, His instructor will consider\
  \ the answer correct if Difference between $N$ and the square of $S$ is within less\
  \ than or equal to $X$% of $N$.\n\n-----Input:-----\n- First line contains $T$ no.\
  \ of test cases and $X$ separated by space\n- For every test case, a line contains\
  \ an integer $N$\n\n-----Output:-----\nFor every test case, print yes  if his programs\
  \ return square root and (N-(S^2)) <= 0.01XN . For everything else, print no on\
  \ a new line\n\n-----Constraints-----\n10 points:\n- $1 \\leq T \\leq 10$\n- $0\\\
  leq N \\leq 10$\n20 points:\n- $1 \\leq T \\leq 30000$\n- $-10^9 \\leq N \\leq 10^9$\n\
  70 points:\n- $1 \\leq T \\leq 10^6$\n- $-10^9 \\leq N \\leq 10^9$\n\n-----Sample\
  \ Input:-----\n2 20\n5\n3\n\n-----Sample Output:-----\nyes\nno\n\n-----EXPLANATION:-----\n\
  In #1, sqrt(5) = 2.2360679775. Taking integral value, S = 2.\n\nS2 = 4. Difference=1\
  \ which is within 20% of 5\nIn #1, sqrt(3) = 1.73205080757. Taking integral value,\
  \ S = 1.\n\nS2 = 1. Difference=2  which is not within 20% of 3"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sqrt (n : Int) : Int := sorry\n\ndef check_sqrt_accuracy (scale\
  \ tolerance : Int) (numbers : List Int) : List String := sorry\n"
"vc-theorems": "theorem length_preservation {scale tolerance : Int} {numbers : List\
  \ Int}\n  (h1 : 0 < tolerance) (h2 : tolerance ≤ 100) :\n  List.length (check_sqrt_accuracy\
  \ scale tolerance numbers) = List.length numbers := sorry\n\n\ntheorem valid_results\
  \ {scale tolerance : Int} {numbers : List Int} \n  (h1 : 0 < tolerance) (h2 : tolerance\
  \ ≤ 100) :\n  ∀ x ∈ check_sqrt_accuracy scale tolerance numbers, x = \"yes\" ∨ x\
  \ = \"no\" := sorry\n\n\ntheorem negative_numbers_no {scale tolerance : Int} {numbers\
  \ : List Int} \n  {n : Int} (h1 : 0 < tolerance) (h2 : tolerance ≤ 100) (h3 : n\
  \ ∈ numbers) (h4 : n < 0) :\n  ∀ i, List.get (check_sqrt_accuracy scale tolerance\
  \ numbers) i = some \"no\" := sorry\n\n\ntheorem result_matches_tolerance {scale\
  \ tolerance : Int} {numbers : List Int}\n  {n : Int} (h1 : 0 < tolerance) (h2 :\
  \ tolerance ≤ 100) (h3 : n ∈ numbers) (h4 : 0 ≤ n) :\n  let sqrt_n := sqrt n\n \
  \ let sqrt_squared := sqrt_n * sqrt_n\n  let diff := (tolerance * n) / 100\n  ∀\
  \ i, List.get (check_sqrt_accuracy scale tolerance numbers) i = \n    some (if n\
  \ - sqrt_squared ≤ diff then \"yes\" else \"no\") := sorry\n\n\ntheorem zero_tolerance_perfect_squares\
  \ {scale : Int} {numbers : List Int}\n  {n : Int} (h1 : n ∈ numbers) :\n  let sqrt_n\
  \ := sqrt n\n  ∀ i, List.get (check_sqrt_accuracy scale 0 numbers) i =\n    some\
  \ (if n ≥ 0 ∧ sqrt_n * sqrt_n = n then \"yes\" else \"no\") := sorry\n\n\ntheorem\
  \ large_tolerance_all_yes {scale tolerance : Int} {numbers : List Int}\n  (h1 :\
  \ tolerance ≥ 100) (h2 : ∀ n ∈ numbers, n ≥ 0) :\n  ∀ x ∈ check_sqrt_accuracy scale\
  \ tolerance numbers, x = \"yes\" := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
