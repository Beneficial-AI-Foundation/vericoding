"vc-description": "You are given an array of distinct positive integers locations where\
  \ locations[i] represents the position of city i. You are also given integers start, finish and fuel representing\
  \ the starting city, ending city, and the initial amount of fuel you have, respectively.\n\
  At each step, if you are at city i, you can pick any city j such that j != i and 0\
  \ <= j < locations.length and move to city j. Moving from city i to city j reduces\
  \ the amount of fuel you have by |locations[i] - locations[j]|. Please notice that\
  \ |x| denotes the absolute value of x.\nNotice that fuel cannot become negative\
  \ at any point in time, and that you are allowed to visit any city more than once\
  \ (including start and finish).\nReturn the count of all possible routes from start to finish.\n\
  Since the answer may be too large, return it modulo 10^9 + 7.\n \nExample 1:\nInput:\
  \ locations = [2,3,6,8,4], start = 1, finish = 3, fuel = 5\nOutput: 4\nExplanation: The\
  \ following are all possible routes, each uses 5 units of fuel:\n1 -> 3\n1 -> 2\
  \ -> 3\n1 -> 4 -> 3\n1 -> 4 -> 2 -> 3\n\nExample 2:\nInput: locations = [4,3,1],\
  \ start = 1, finish = 0, fuel = 6\nOutput: 5\nExplanation: The following are all\
  \ possible routes:\n1 -> 0, used fuel = 1\n1 -> 2 -> 0, used fuel = 5\n1 -> 2 ->\
  \ 1 -> 0, used fuel = 5\n1 -> 0 -> 1 -> 0, used fuel = 3\n1 -> 0 -> 1 -> 0 -> 1\
  \ -> 0, used fuel = 5\n\nExample 3:\nInput: locations = [5,2,1], start = 0, finish\
  \ = 2, fuel = 3\nOutput: 0\nExplanation: It's impossible to get from 0 to 2 using\
  \ only 3 units of fuel since the shortest route needs 4 units of fuel.\nExample\
  \ 4:\nInput: locations = [2,1,5], start = 0, finish = 0, fuel = 3\nOutput: 2\nExplanation: There\
  \ are two possible routes, 0 and 0 -> 1 -> 0.\nExample 5:\nInput: locations = [1,2,3],\
  \ start = 0, finish = 2, fuel = 40\nOutput: 615088286\nExplanation: The total number\
  \ of possible routes is 2615088300. Taking this number modulo 10^9 + 7 gives us\
  \ 615088286.\n\n \nConstraints:\n\n2 <= locations.length <= 100\n1 <= locations[i]\
  \ <= 10^9\nAll integers in locations are distinct.\n0 <= start, finish < locations.length\n\
  1 <= fuel <= 200"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_routes (locations : List Int) (start finish : Nat) (fuel\
  \ : Nat) : Nat := sorry\n\ndef MOD := 1000000007\n"
"vc-theorems": "theorem count_routes_bounds \n  (locations : List Int)\n  (start finish\
  \ fuel : Nat)\n  (h1 : ∀ x ∈ locations, 1 ≤ x ∧ x ≤ 1000)\n  (h2 : 2 ≤ locations.length)\n\
  \  (h3 : start < locations.length)\n  (h4 : finish < locations.length)\n  (h5 :\
  \ fuel ≤ 200) :\n  0 ≤ count_routes locations start finish fuel ∧ \n  count_routes\
  \ locations start finish fuel < MOD := sorry\n\n\ntheorem zero_fuel_routes\n  (locations\
  \ : List Int)\n  (start finish : Nat)\n  (h1 : ∀ x ∈ locations, 1 ≤ x ∧ x ≤ 1000)\n\
  \  (h2 : 2 ≤ locations.length)\n  (h3 : start < locations.length)\n  (h4 : finish\
  \ < locations.length) :\n  (count_routes locations start finish 0 > 0) ↔ (start\
  \ = finish) := sorry\n\n\ntheorem self_routes_nonempty\n  (locations : List Int)\n\
  \  (fuel : Nat)\n  (h1 : ∀ x ∈ locations, 1 ≤ x ∧ x ≤ 1000)\n  (h2 : 2 ≤ locations.length)\
  \ :\n  count_routes locations 0 0 fuel ≥ 1 := sorry\n\n\ntheorem routes_symmetric\n\
  \  (locations : List Int)\n  (fuel : Nat)\n  (h1 : ∀ x ∈ locations, 1 ≤ x ∧ x ≤\
  \ 1000)\n  (h2 : 2 ≤ locations.length) :\n  count_routes locations 0 1 fuel = count_routes\
  \ locations 1 0 fuel := sorry\n\n\ntheorem more_fuel_more_routes\n  (locations :\
  \ List Int)\n  (start finish : Nat)\n  (fuel1 fuel2 : Nat)\n  (h1 : ∀ x ∈ locations,\
  \ 1 ≤ x ∧ x ≤ 1000)\n  (h2 : 2 ≤ locations.length)\n  (h3 : start < locations.length)\n\
  \  (h4 : finish < locations.length)\n  (h5 : fuel1 ≤ fuel2) :\n  count_routes locations\
  \ start finish fuel1 ≤ \n  count_routes locations start finish fuel2 := sorry\n\n\
  /--\ninfo: 4\n-/\n#guard_msgs in\n#eval count_routes [2, 3, 6, 8, 4] 1 3 5\n\n/--\n\
  info: 5\n-/\n#guard_msgs in\n#eval count_routes [4, 3, 1] 1 0 6\n\n/--\ninfo: 0\n\
  -/\n#guard_msgs in\n#eval count_routes [5, 2, 1] 0 2 3\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
