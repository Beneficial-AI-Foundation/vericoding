"vc-description": "# Background\n\nThe famous Collatz Sequence is generated with the\
  \ following rules:\n\n* Start with a positive integer `a[0] = n`.\n* If `a[i]` is\
  \ even, `a[i+1] = a[i] / 2`.\n* Otherwise, `a[i+1] = a[i] * 3 + 1`.\n\nHowever,\
  \ for the purpose of this Kata, I give a **slightly modified definition**:\n\n*\
  \ If `a[i]` is even, `a[i+1] = a[i] / 2`. This step is a step-down, or `D`.\n* Otherwise,\
  \ `a[i+1] = (a[i] * 3 + 1) / 2`. This step is a step-up, or `U`.\n\nAlso, for any\
  \ starting number, the sequence is generated indefinitely, not ending at 1.\n\n\
  # Problem Description\n\nFor any given starting number, we can record the types\
  \ of steps(`D` or `U`) from it.\nFor example, if we start with the number 11, the\
  \ Collatz steps look like this:\n```\na[0] = 11\na[1] = (11 * 3 + 1) / 2 = 17 ->\
  \ U\na[2] = (17 * 3 + 1) / 2 = 26 -> U\na[3] = 26 / 2 = 13           -> D\na[4]\
  \ = (13 * 3 + 1) / 2 = 20 -> U\na[5] = 20 / 2 = 10           -> D\na[6] = 10 / 2\
  \ = 5            -> D\na[7] = (5 * 3 + 1) / 2 = 8   -> U\na[8] = 8 / 2 = 4     \
  \        -> D\na[9] = 4 / 2 = 2             -> D\na[10] = 2 / 2 = 1            ->\
  \ D\na[11] = (1 * 3 + 1) / 2 = 2  -> U\na[12] = 2 / 2 = 1            -> D\n...\n\
  ```\n\n```\n11 -> 17 -> 26 -> 13 -> 20 -> 10 -> 5 -> 8 -> 4 -> 2 -> 1 -> 2 -> 1\
  \ -> ...\n   U     U     D     U     D     D    U    D    D    D    U    D\n```\n\
  \nBased on the steps shown above, the first four Collatz steps of 11 is `UUDU`.\n\
  Also, 107 is the smallest number over 100 whose Collatz steps start with `UUDU`,\
  \ and\n1003 is the smallest number over 1000 with the property.\n\nA special example\
  \ is the number 1, which can generate any number of `UD`.\n\nFind the smallest integer\
  \ exceeding or equal to `n` whose Collatz steps start with the given string `steps`.\n\
  \n# Constraints\n\n`1 <= n <= 10 ** 9`\n\n`n` is always a valid integer.\n\n`1 <=\
  \ length(steps) <= 25`\n\nThe string `steps` will entirely consist of `U`s and `D`s.\n\
  \n# Examples\n\n```python\ncollatz_steps(1, 'UUDU') == 11\ncollatz_steps(100, 'UUDU')\
  \ == 107\ncollatz_steps(1000, 'UUDU') == 1003\n\ncollatz_steps(1, 'UD') == 1\ncollatz_steps(1,\
  \ 'UDUD') == 1\ncollatz_steps(1, 'UDUDUD') == 1\n```\n\n# Hint\n\nIf you are completely\
  \ lost, start by answering the following question:\n\n* After applying the given\
  \ steps (e.g. `UUDU`) to an initial number `x`,\n  what fraction do you get?\n \
  \ \nAfter that, you might want to study about [modular inverse](https://en.wikipedia.org/wiki/Modular_multiplicative_inverse).\n\
  \n# Acknowledgement\n\nThis problem was inspired by [Project Euler #277: A Modified\
  \ Collatz sequence](https://projecteuler.net/problem=277).\n\nIf you enjoyed this\
  \ Kata, please also have a look at [my other Katas](https://www.codewars.com/users/Bubbler/authored)!"
"vc-preamble": "import Imports.AllImports\n\ndef collatz_steps (n : Nat) (s : String)\
  \ : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def get_steps (n : Nat) (len : Nat) : String := \n  sorry\n\n/-\
  \ Base case properties -/"
"vc-theorems": "theorem collatz_steps_D : collatz_steps 1 \"D\" = 2 := sorry\ntheorem\
  \ collatz_steps_U : collatz_steps 1 \"U\" = 1 := sorry\n\n/- Main invariant properties\
  \ for any input -/\n\ntheorem collatz_steps_geq_input {n : Nat} {s : String} (h\
  \ : n > 0) :\n  collatz_steps n s ≥ n := sorry\n\n/- Minimal result property -/\n\
  \ntheorem collatz_steps_minimal {n : Nat} {s : String} (h : n > 0) (h2 : collatz_steps\
  \ n s > 1) :\n  ∀ m, m < collatz_steps n s → ¬(get_steps m (String.length s)).startsWith\
  \ s := sorry\n\n/- Helper lemma to relate get_steps to collatz_steps -/\n\ntheorem\
  \ get_steps_matches {n : Nat} {s : String} (h : n > 0) :\n  (get_steps (collatz_steps\
  \ n s) (String.length s)).startsWith s := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
