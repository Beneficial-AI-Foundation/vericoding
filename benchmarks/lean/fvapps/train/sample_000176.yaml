"vc-description": "Run-length encoding is a string compression method that works by replacing\
  \ consecutive identical characters (repeated 2 or more times) with the concatenation\
  \ of the character and the number marking the count of the characters (length of\
  \ the run). For example, to compress the string \"aabccc\" we replace \"aa\" by \"\
  a2\" and replace \"ccc\" by \"c3\". Thus the compressed string becomes \"a2bc3\"\
  .\nNotice that in this problem, we are not adding '1' after single characters.\n\
  Given a string s and an integer k. You need to delete at most k characters from s such\
  \ that the run-length encoded version of s has minimum length.\nFind the minimum\
  \ length of the run-length encoded version of s after deleting at most k characters.\n\
   \nExample 1:\nInput: s = \"aaabcccd\", k = 2\nOutput: 4\nExplanation: Compressing\
  \ s without deleting anything will give us \"a3bc3d\" of length 6. Deleting any\
  \ of the characters 'a' or 'c' would at most decrease the length of the compressed\
  \ string to 5, for instance delete 2 'a' then we will have s = \"abcccd\" which\
  \ compressed is abc3d. Therefore, the optimal way is to delete 'b' and 'd', then\
  \ the compressed version of s will be \"a3c3\" of length 4.\nExample 2:\nInput:\
  \ s = \"aabbaa\", k = 2\nOutput: 2\nExplanation: If we delete both 'b' characters,\
  \ the resulting compressed string would be \"a4\" of length 2.\n\nExample 3:\nInput:\
  \ s = \"aaaaaaaaaaa\", k = 0\nOutput: 3\nExplanation: Since k is zero, we cannot\
  \ delete anything. The compressed string is \"a11\" of length 3.\n\n \nConstraints:\n\
  \n1 <= s.length <= 100\n0 <= k <= s.length\ns contains only lowercase English letters."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def getLengthOfOptimalCompression (s : String) (k : Nat) : Nat\
  \ := sorry\n\ndef naiveCompressionLength (s : String) : Nat := sorry\n"
"vc-theorems": "theorem compressed_length_non_negative (s : String) (k : Nat) :\n\
  \  getLengthOfOptimalCompression s k ≥ 0 := sorry\n\n\ntheorem compressed_length_not_longer_than_naive\
  \ (s : String) (k : Nat) : \n  getLengthOfOptimalCompression s k ≤ naiveCompressionLength\
  \ s := sorry\n\n\ntheorem compressed_length_not_longer_than_original (s : String)\
  \ (k : Nat) :\n  getLengthOfOptimalCompression s k ≤ s.length := sorry\n\n\ntheorem\
  \ binary_string_min_length (s : String) (k : Nat) \n  (h1 : s.length > 0)\n  (h2\
  \ : k < s.length)\n  (h3 : ∀ c ∈ s.data, c = 'a' ∨ c = 'b') :\n  getLengthOfOptimalCompression\
  \ s k ≥ 1 := sorry\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval getLengthOfOptimalCompression\
  \ \"aaabcccd\" 2\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval getLengthOfOptimalCompression\
  \ \"aabbaa\" 2\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval getLengthOfOptimalCompression\
  \ \"aaaaaaaaaaa\" 0\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
