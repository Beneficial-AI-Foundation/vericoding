"vc-description": "The new £5 notes have been recently released in the UK and they've\
  \ certainly became a sensation! Even those of us who haven't been carrying any cash\
  \ around for a while, having given in to the convenience of cards, suddenly like\
  \ to have some of these in their purses and pockets. But how many of them could\
  \ you get with what's left from your salary after paying all bills? The programme\
  \ that you're about to write will count this for you!\n\nGiven a salary and the\
  \ array of bills, calculate your disposable income for a month and return it as\
  \ a number of new £5 notes you can get with that amount. If the money you've got\
  \ (or do not!) doesn't allow you to get any £5 notes return 0.\n\n£££ GOOD LUCK!\
  \ £££"
"vc-preamble": "import Imports.AllImports\n\ndef List.sum : List Nat → Nat \n  | []\
  \ => 0\n  | (x::xs) => x + List.sum xs\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def get_new_notes (salary: Nat) (bills: List Nat) : Nat :=\n  sorry\n\
  \n\n\n\n\n\n"
"vc-theorems": "theorem get_new_notes_edge_zero_salary : \n  get_new_notes 0 [] =\
  \ 0 := sorry\n\n\ntheorem get_new_notes_edge_min_note : \n  get_new_notes 5 [] =\
  \ 1 := sorry\n\n\ntheorem get_new_notes_edge_no_remainder :\n  get_new_notes 100\
  \ [100] = 0 := sorry\n\n\ntheorem get_new_notes_edge_insufficient :\n  get_new_notes\
  \ 100 [200] = 0 := sorry\n\n/--\ninfo: 188\n-/\n#guard_msgs in\n#eval get_new_notes\
  \ 2000 [500, 160, 400]\n\n/--\ninfo: 122\n-/\n#guard_msgs in\n#eval get_new_notes\
  \ 1260 [500, 50, 100]\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval get_new_notes 2000\
  \ [500, 495, 100, 900]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
