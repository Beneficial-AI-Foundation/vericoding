"vc-description": "On each of the following $N$ days (numbered $1$ through $N$), Chef\
  \ is planning to cook either pizza or broccoli. He wrote down a string $A$ with\
  \ length $N$, where for each valid $i$, if the character $A_i$ is '1', then he will\
  \ cook pizza on the $i$-th day, while if $A_i$ is '0', he will cook broccoli on\
  \ this day.\nChefu, his son, loves pizza but hates broccoli ― just like most kids.\
  \ He wants to select a substring of $A$ with length $K$ and change each character\
  \ '0' in this substring to '1'. Afterwards, let's define pizza time as the maximum\
  \ number of consecutive days where Chef will cook pizza. Find the maximum pizza\
  \ time Chefu can achieve.\n\n-----Input-----\n- The first line of the input contains\
  \ a single integer $T$ denoting the number of test cases. The description of $T$\
  \ test cases follows.\n- The first line of each test case contains two space-separated\
  \ integers $N$ and $K$. \n- The second line contains a string $A$ with length $N$.\n\
  \n-----Output-----\nFor each test case, print a single line containing one integer\
  \ ― the maximum pizza time.\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n\
  - $1 \\le K \\le N \\le 10^5$\n- $A$ contains only characters '0' and '1'\n- the\
  \ sum of $N$ over all test cases does not exceed $10^6$\n\n-----Subtasks-----\n\
  Subtask #1 (50 points):\n- $N \\le 10^3$\n- the sum of $N$ over all test cases does\
  \ not exceed $10^4$\nSubtask #2 (50 points): original constraints\n\n-----Example\
  \ Input-----\n2\n13 2\n0101110000101\n6 3\n100001\n\n-----Example Output-----\n\
  5\n4\n\n-----Explanation-----\nExample case 1: Chefu can choose the substring $A[2,\
  \ 3]$ = \"10\", and change the third character of $A$ to '1'. Then, the pizza time\
  \ is $5$ days: from day $2$ to day $6$.\nExample case 2: Chefu can choose the substring\
  \ $A[2, 4]$ = \"000\". Then, the pizza time is $4$ days: from day $1$ to day $4$."
"vc-preamble": "import Imports.AllImports\n\ndef max_pizza_time (n : Nat) (k : Nat)\
  \ (s : String) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_ones (s : String) : Nat :=\n  sorry\n"
"vc-theorems": "theorem max_pizza_time_bounds (n k: Nat) (s: String) :\n  n > 0 →\
  \ s.length = n →\n  let result := max_pizza_time n k s\n  0 ≤ result ∧ result ≤\
  \ n :=\nsorry\n\n\ntheorem max_pizza_time_upper_bound (n k: Nat) (s: String) :\n\
  \  n > 0 → s.length = n →\n  max_pizza_time n k s ≤ n :=\nsorry\n\n\n\n\ntheorem\
  \ max_pizza_time_all_ones (n: Nat) :\n  n > 0 →\n  let s := String.mk (List.replicate\
  \ n '1')\n  max_pizza_time n 0 s = n :=\nsorry\n\n\ntheorem max_pizza_time_all_zeros\
  \ (n: Nat) :\n  n > 0 →\n  let s := String.mk (List.replicate n '0')\n  let k :=\
  \ n / 2\n  max_pizza_time n k s = k :=\nsorry\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n\
  #eval max_pizza_time 13 2 \"0101110000101\"\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n\
  #eval max_pizza_time 6 3 \"100001\"\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval max_pizza_time\
  \ 5 2 \"10001\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
