"vc-description": "# Task\nJohn is an orchard worker. \n\nThere are `n` piles of fruits\
  \ waiting to be transported. Each pile of fruit has a corresponding weight. John's\
  \ job is to combine the fruits into a pile and wait for the truck to take them away.\n\
  \nEvery time, John can combine any two piles(`may be adjacent piles, or not`), and\
  \ the energy he costs is equal to the weight of the two piles of fruit.\n\nFor example,\
  \ if there are two piles, pile1's weight is `1` and pile2's weight is `2`. After\
  \ merging, the new pile's weight is `3`, and he consumed 3 units of energy.\n\n\
  John wants to combine all the fruits into 1 pile with the least energy.\n\nYour\
  \ task is to help John, calculate the minimum energy he costs.\n\n# Input\n\n- `fruits`:\
  \ An array of positive integers. Each element represents the weight of a pile of\
  \ fruit.\n  \n  Javascript:\n  - 1 <= fruits.length <= 10000\n  - 1 <= fruits[i]\
  \ <= 10000\n  \n  Python:\n  - 1 <= len(fruits) <= 5000\n  - 1 <= fruits[i] <= 10000\n\
  \n# Output\n\nAn integer. the minimum energy John costs.\n\n\n# Examples\n\nFor\
  \ `fruits = [1,2,9]`, the output should be `15`.\n\n```\n3 piles:  1  2  9\ncombine\
  \ 1 and 2 to 3, cost 3 units of energy.\n2 piles:  3  9\ncombine 3 and 9 to 12,\
  \ cost 12 units of energy.\n1 pile:  12\n\nThe total units of energy is 3 + 12 =\
  \ 15 units\n```\n\nFor `fruits = [100]`, the output should be `0`.\n\nThere's only\
  \ 1 pile. So no need combine it."
"vc-preamble": "import Imports.AllImports\n\ndef List.minimum (l : List Nat) : Option\
  \ Nat :=\n  sorry\n\n\ndef List.maximum (l : List Nat) : Option Nat :=\n  sorry\n\
  \n\ndef List.sum (l : List Nat) : Nat :=\n  sorry\n\n\ndef List.log2 (n : Nat) :\
  \ Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def combine_fruits (fruits : List Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem combine_fruits_empty_singleton {fruits : List Nat} \n  (h\
  \ : fruits.length ≤ 1) : combine_fruits fruits = 0 := by\n  sorry\n\n\ntheorem combine_fruits_nonneg\
  \ {fruits : List Nat} :\n  combine_fruits fruits ≥ 0 := by\n  sorry\n\n\ntheorem\
  \ combine_fruits_lower_bound {fruits : List Nat} {min1 min2 : Nat}\n  (h : fruits.length\
  \ ≥ 2)\n  (h1 : fruits.minimum = some min1)\n  (h2 : (fruits.tail).minimum = some\
  \ min2) :\n  combine_fruits fruits ≥ min1 + min2 := by\n  sorry\n\n\ntheorem combine_fruits_upper_bound\
  \ {fruits : List Nat} \n  (h : fruits ≠ []) :\n  combine_fruits fruits ≤ fruits.sum\
  \ * (fruits.length.log2) := by\n  sorry\n\n\ntheorem combine_fruits_monotone {fruits\
  \ : List Nat} {x maxVal : Nat}\n  (h : fruits.length ≥ 2)\n  (h2 : fruits.maximum\
  \ = some maxVal)\n  (h3 : x > maxVal) :\n  combine_fruits (fruits ++ [x]) ≥ combine_fruits\
  \ fruits := by\n  sorry\n\n/--\ninfo: 15\n-/\n#guard_msgs in\n#eval combine_fruits\
  \ [1, 2, 9]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval combine_fruits [100]\n\n\
  /--\ninfo: 111\n-/\n#guard_msgs in\n#eval combine_fruits [4, 3, 5, 6, 10, 20]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
