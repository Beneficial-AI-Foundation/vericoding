"vc-description": "# Task\n A common way for prisoners to communicate secret messages\
  \ with each other is to encrypt them. One such encryption algorithm goes as follows.\n\
  \n You take the message and place it inside an `nx6` matrix (adjust the number of\
  \ rows depending on the message length) going from top left to bottom right (one\
  \ row at a time) while replacing spaces with dots (.) and adding dots at the end\
  \ of the last row (if necessary) to complete the matrix.\n \n Once the message is\
  \ in the matrix you read again from top left to bottom right but this time going\
  \ one column at a time and treating each column as one word.\n\n# Example\n\n The\
  \ following message `\"Attack at noon or we are done for\"` is placed in a `6 *\
  \ 6` matrix :\n```\nAttack\n.at.no\non.or.\nwe.are\n.done.\nfor...```\nReading it\
  \ one column at a time we get:\n\n `A.ow.f tanedo tt..or a.oan. cnrre. ko.e..`\n\
  \n# Input/Output\n\n\n - `[input]` string `msg`\n\n  a regular english sentance\
  \ representing the original message\n\n\n - `[output]` a string\n\n  encrypted message"
"vc-preamble": "import Imports.AllImports\n\ndef String.splitColumns (s : String)\
  \ : List String := sorry\n\ndef List.sum (l : List Nat) : Nat := l.foldl (· + ·)\
  \ 0\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def six_column_encryption (msg : String) : String := sorry\n\n\
  theorem encryption_correct_columns (msg : String) : \n  (six_column_encryption msg).splitColumns.length\
  \ = 6\n  := sorry\n"
"vc-theorems": "theorem encryption_length_divisible_by_six (msg : String) :\n  let\
  \ columns := (six_column_encryption msg).splitColumns\n  let total_chars := (columns.map\
  \ String.length).sum\n  total_chars % 6 = 0\n  := sorry\n\n\ntheorem encryption_preserves_length\
  \ (msg : String) :\n  let result := six_column_encryption msg\n  let result_chars\
  \ := result.splitColumns.foldl (· ++ ·) \"\"\n  let padded_len := msg.length + ((6\
  \ - msg.length % 6) % 6)\n  result_chars.length = padded_len\n  := sorry \n\n\n\
  theorem encryption_balanced_columns (msg : String) :\n  let result := six_column_encryption\
  \ msg\n  let lengths := result.splitColumns.map String.length\n  match lengths.maximum?,\
  \ lengths.minimum? with\n  | some max, some min => max - min ≤ 1\n  | _, _ => True\n\
  \  := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
