vc-description: |-
  You are given a binary tree:

  ```python
  class Node:
      def __init__(self, L, R, n):
          self.left = L
          self.right = R
          self.value = n
  ```

  Your task is to return the list with elements from tree sorted by levels, which means the root element goes first, then root children (from left to right) are second and third, and so on.
  ```if:ruby
  Return empty array if root is `nil`.
  ```
  ```if:haskell
  Return empty list if root is `Nothing`.
  ```
  ```if:python
  Return empty list if root is `None`.
  ```
  ```if:csharp
  Return empty list if root is 'null'.
  ```
  ```if:java
  Return empty list is root is 'null'.
  ```

  Example 1 - following tree:

                       2
                  8        9
                1  3     4   5

  Should return following list:

      [2,8,9,1,3,4,5]

  Example 2 - following tree:

                       1
                  8        4
                    3        5
                               7
  Should return following list:

      [1,8,4,3,5,7]
vc-preamble: |
  import Imports.AllImports

  def treeByLevels {α : Type} (t : BTree α) : List α :=
    sorry
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def buildTree {α : Type} (values : List α) : BTree α :=
    sorry
vc-theorems: |
  theorem empty_tree_gives_empty_list {α : Type} :
    treeByLevels (BTree.leaf : BTree α) = [] :=
  sorry


  theorem tree_length {α : Type} (values : List α) (h : values ≠ []) :
    let tree := buildTree values
    List.length (treeByLevels tree) = List.length values :=
  sorry


  theorem root_is_first {α : Type} [Inhabited α] (values : List α) (h : values ≠ []) (v : α) (vs : List α) 
    (h2 : values = v :: vs) :
    let tree := buildTree values
    List.head? (treeByLevels tree) = some v :=
  sorry


  theorem values_preserved_length {α : Type} (values : List α) (h : values ≠ []) :
    let tree := buildTree values
    List.length (treeByLevels tree) = List.length values :=
  sorry

  /--
  info: []
  -/
  #guard_msgs in
  #eval tree_by_levels None

  /--
  info: [2, 8, 9, 1, 3, 4, 5]
  -/
  #guard_msgs in
  #eval tree_by_levels Node(Node(Node(None, None, 1), Node(None, None, 3), 8), Node(Node(None, None, 4), Node(None, None, 5), 9), 2)

  /--
  info: [1, 8, 4, 3, 5, 7]
  -/
  #guard_msgs in
  #eval tree_by_levels Node(Node(None, Node(None, None, 3), 8), Node(None, Node(None, Node(None, None, 7), 5), 4), 1)
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
