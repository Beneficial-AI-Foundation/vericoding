"vc-description": "You are given a binary tree:\n\n```python\nclass Node:\n    def\
  \ __init__(self, L, R, n):\n        self.left = L\n        self.right = R\n    \
  \    self.value = n\n```\n\nYour task is to return the list with elements from tree\
  \ sorted by levels, which means the root element goes first, then root children\
  \ (from left to right) are second and third, and so on.\n```if:ruby\nReturn empty\
  \ array if root is `nil`.\n```\n```if:haskell\nReturn empty list if root is `Nothing`.\n\
  ```\n```if:python\nReturn empty list if root is `None`.\n```\n```if:csharp\nReturn\
  \ empty list if root is 'null'.\n```\n```if:java\nReturn empty list is root is 'null'.\n\
  ```\n\nExample 1 - following tree:\n\n                     2\n                8\
  \        9\n              1  3     4   5\n\nShould return following list:\n\n  \
  \  [2,8,9,1,3,4,5]\n\nExample 2 - following tree:\n\n                     1\n  \
  \              8        4\n                  3        5\n                      \
  \       7\nShould return following list:\n\n    [1,8,4,3,5,7]"
"vc-preamble": "import Imports.AllImports\n\ndef treeByLevels {α : Type} (t : BTree\
  \ α) : List α :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def buildTree {α : Type} (values : List α) : BTree α :=\n  sorry\n"
"vc-theorems": "theorem empty_tree_gives_empty_list {α : Type} :\n  treeByLevels (BTree.leaf\
  \ : BTree α) = [] :=\nsorry\n\n\ntheorem tree_length {α : Type} (values : List α)\
  \ (h : values ≠ []) :\n  let tree := buildTree values\n  List.length (treeByLevels\
  \ tree) = List.length values :=\nsorry\n\n\ntheorem root_is_first {α : Type} [Inhabited\
  \ α] (values : List α) (h : values ≠ []) (v : α) (vs : List α) \n  (h2 : values\
  \ = v :: vs) :\n  let tree := buildTree values\n  List.head? (treeByLevels tree)\
  \ = some v :=\nsorry\n\n\ntheorem values_preserved_length {α : Type} (values : List\
  \ α) (h : values ≠ []) :\n  let tree := buildTree values\n  List.length (treeByLevels\
  \ tree) = List.length values :=\nsorry\n\n/--\ninfo: []\n-/\n#guard_msgs in\n#eval\
  \ tree_by_levels None\n\n/--\ninfo: [2, 8, 9, 1, 3, 4, 5]\n-/\n#guard_msgs in\n\
  #eval tree_by_levels Node(Node(Node(None, None, 1), Node(None, None, 3), 8), Node(Node(None,\
  \ None, 4), Node(None, None, 5), 9), 2)\n\n/--\ninfo: [1, 8, 4, 3, 5, 7]\n-/\n#guard_msgs\
  \ in\n#eval tree_by_levels Node(Node(None, Node(None, None, 3), 8), Node(None, Node(None,\
  \ Node(None, None, 7), 5), 4), 1)\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
