"vc-description": "In this Kata, you will be given an array of integers and your task\
  \ is to return the number of arithmetic progressions of size `3` that are possible\
  \ from that list. In each progression, the differences between the elements must\
  \ be the same.\n\n```\n[1, 2, 3, 5, 7, 9] ==> 5\n// [1, 2, 3], [1, 3, 5], [1, 5,\
  \ 9], [3, 5, 7], and [5, 7, 9]\n```\n\nAll inputs will be sorted. More examples\
  \ in test cases. \n\nGood luck!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve (arr : List Int) : Int := sorry\n\ntheorem solve_type\
  \ (arr : List Int) (h: arr.length ≥ 3 ∧ arr.length ≤ 20) : \n  solve arr ≥ 0 :=\
  \ sorry\n\n\n"
"vc-theorems": "theorem solve_shift_invariant (arr : List Int) (shift : Int)\n   \
  \ (h: arr.length ≥ 3 ∧ arr.length ≤ 20) :\n  solve arr = solve (arr.map (· + shift))\
  \ := sorry\n\n\ntheorem solve_scale_invariant (arr : List Int) (scale : Int)\n \
  \   (h: arr.length ≥ 3 ∧ arr.length ≤ 20) (h2: scale ≠ 0) :\n  solve arr = solve\
  \ (arr.map (· * scale)) := sorry\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval solve\
  \ [1, 2, 3, 4, 5]\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval solve [1, 2, 3, 5,\
  \ 7, 9]\n\n/--\ninfo: 10\n-/\n#guard_msgs in\n#eval solve [0, 5, 8, 9, 11, 13, 14,\
  \ 16, 17, 19]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
