"vc-description": "Two players play a turn based game on a binary tree.  We are given the\
  \ root of this binary tree, and the number of nodes n in the tree.  n is odd, and each\
  \ node has a distinct value from 1 to n.\nInitially, the first player names a value\
  \ x with 1 <= x <= n, and the second player names a value y with 1 <= y <= n and\
  \ y != x.  The first player colors the node with value x red, and the second player\
  \ colors the node with value y blue.\nThen, the players take turns starting with\
  \ the first player.  In each turn, that player chooses a node of their color (red\
  \ if player 1, blue if player 2) and colors an uncolored neighbor of the chosen\
  \ node (either the left child, right child, or parent of the chosen node.)\nIf (and\
  \ only if) a player cannot choose such a node in this way, they must pass their\
  \ turn.  If both players pass their turn, the game ends, and the winner is the player\
  \ that colored more nodes.\nYou are the second player.  If it is possible to choose\
  \ such a y to ensure you win the game, return true.  If it is not possible, return\
  \ false.\n \nExample 1:\n\nInput: root = [1,2,3,4,5,6,7,8,9,10,11], n = 11, x =\
  \ 3\nOutput: true\nExplanation: The second player can choose the node with value\
  \ 2.\n\n \nConstraints:\n\nroot is the root of a binary tree with n nodes and distinct\
  \ node values from 1 to n.\nn is odd.\n1 <= x <= n <= 100"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def btreeGameWinningMove (root : BTree) (n : Nat) (x : Nat) : Bool\
  \ :=\n  sorry\n\n/-- For any binary tree, number of nodes, and chosen node x, the\
  \ winning move result is boolean -/"
"vc-theorems": "theorem btree_game_winning_move_returns_bool (root : BTree) (n : Nat)\
  \ (x : Nat) :\n  btreeGameWinningMove root n x = true ∨ btreeGameWinningMove root\
  \ n x = false :=\nsorry\n\n/-- For a single node tree (n=1), there is no winning\
  \ move -/\n\ntheorem btree_game_single_node_no_win (root : BTree) :\n  btreeGameWinningMove\
  \ root 1 1 = false :=\nsorry\n\n/-- For a perfectly balanced tree of 7 nodes with\
  \ values 1-7, choosing root node 1 has no winning move -/\n\ntheorem btree_game_balanced_seven_nodes_no_win\
  \ (root : BTree) :\n  root = BTree.node 1 \n    (BTree.node 2 \n      (BTree.node\
  \ 4 BTree.leaf BTree.leaf) \n      (BTree.node 5 BTree.leaf BTree.leaf))\n    (BTree.node\
  \ 3\n      (BTree.node 6 BTree.leaf BTree.leaf)\n      (BTree.node 7 BTree.leaf\
  \ BTree.leaf)) →\n  btreeGameWinningMove root 7 1 = false :=\nsorry\n\n/--\ninfo:\
  \ True\n-/\n#guard_msgs in\n#eval btreeGameWinningMove TreeNode(1) 3 2\n\n/--\n\
  info: True\n-/\n#guard_msgs in\n#eval btreeGameWinningMove TreeNode(1) 5 1\n\n/--\n\
  info: True\n-/\n#guard_msgs in\n#eval btreeGameWinningMove TreeNode(1) 7 4\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
