"vc-description": "Given an array (ints) of n integers, find three integers in arr\
  \ such that the sum is closest to a given number (num), target.\n\nReturn the sum\
  \ of the three integers. \nYou may assume that each input would have exactly one\
  \ solution.\n\nExample:\n\nNote: your solution should not modify the input array."
"vc-preamble": "import Imports.AllImports\n\ndef abs (x : Int) : Int :=\n  if x ≥\
  \ 0 then x else -x\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def closest_sum (nums : List Int) (target : Int) : Int :=\n  sorry\n"
"vc-theorems": "theorem closest_sum_is_sum_of_three (nums : List Int) (target : Int)\n\
  \    (h : nums.length ≥ 3) :\n  ∃ a b c, a ∈ nums ∧ b ∈ nums ∧ c ∈ nums ∧ \n   \
  \ closest_sum nums target = a + b + c :=\n  sorry\n\n\ntheorem closest_sum_is_minimal\
  \ (nums : List Int) (target : Int) \n    (h : nums.length ≥ 3) :\n  ∀ a b c, a ∈\
  \ nums → b ∈ nums → c ∈ nums →\n    abs (target - closest_sum nums target) ≤ abs\
  \ (target - (a + b + c)) :=\n  sorry\n\n\ntheorem closest_sum_three_elements (a\
  \ b c target : Int) :\n  closest_sum [a,b,c] target = a + b + c :=\n  sorry\n\n\n\
  theorem closest_sum_returns_int (nums : List Int) (target : Int)\n    (h : nums.length\
  \ ≥ 3) :\n  ∃ n : Int, closest_sum nums target = n :=\n  sorry\n\n/--\ninfo: 2\n\
  -/\n#guard_msgs in\n#eval closest_sum [-1, 2, 1, -4] 1\n\n/--\ninfo: 7\n-/\n#guard_msgs\
  \ in\n#eval closest_sum [5, 4, 0, 3] 3\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval\
  \ closest_sum [-2, 2, -3, 1] 3\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
