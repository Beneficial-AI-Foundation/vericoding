"vc-description": "Chef is going to organize a hill jumping competition and he is\
  \ going to be one of the judges in it. In this competition there are N hills in\
  \ a row, and the initial height of i-th hill is Ai. Participants are required to\
  \ demonstrate their jumping skills by doing what the judges tell them.\nJudges will\
  \ give each participant a card which has two numbers, i and k, which means that\
  \ the participant should start at the i-th hill and jump k times, where one jump\
  \ should be from the current hill to the nearest hill to the right which is strictly\
  \ higher (in height) than the current one. If there is no such hill or its distance\
  \ (i.e. difference between their indices)  is more than 100 then the participant\
  \ should remain in his current hill.\nPlease help Chef by creating a program to\
  \ use it during the competitions. It should read the initial heights of the hill\
  \ and should support two kinds of operations:\nType 1: Given a two numbers: i and\
  \ k, your program should output the index of the hill the participant is expected\
  \ to finish if he starts from the i-th hill (as explained above).\nType 2: Given\
  \ three numbers: L, R, X, the heights of all the hills between L and R, both end\
  \ points inclusive, should be increased by X (if X is negative then their height\
  \ is decreased).\n\n-----Input-----\n- First line contains two integers N and Q,\
  \ denoting the number of hills and number of operations respectively.\n- Second\
  \ line contains N space-separated integers A1, A2, ..., AN denoting the initial\
  \ heights of the hills.\n- Each of the next Q lines describes an operation. If the\
  \ first integer is equal to 1, it means that the operation is of Type 1, and it\
  \ will be followed by two integers i and k. Otherwise the first number will be equal\
  \ to 2, and it means that the operation is of Type 2, and so it will be followed\
  \ by three integers L, R and X.\n\n-----Output-----\nFor each operation of Type\
  \ 1, output the index of the hill in which the participant will finish.\n\n-----Constraints-----\n\
  - 1 ≤ N, Q ≤ 100,000\n- 1 ≤ Ai ≤ 1,000,000\n- 1 ≤ L ≤ R ≤ N\n- -1,000,000 ≤ X ≤\
  \ 1,000,000\n- 1 ≤ i, k ≤ N\n\n-----Subtasks-----\n- Subtask 1 (20 points) : 1 ≤\
  \ N, Q ≤ 1,000 \n- Subtask 2 (80 points) : Original constraints\n\n-----Example-----\n\
  Input:\n5 3\n1 2 3 4 5\n1 1 2\n2 3 4 -1\n1 1 2\n\nOutput:\n3\n4\n\n-----Explanation-----\n\
  The initial heights are (1, 2, 3, 4, 5). The first operation is of Type 1 and starts\
  \ from Hill 1 and wants to jump twice. The first jump will be to Hill 2, and the\
  \ second jump will be to Hill 3. Hence the output for this is 3.\nThe second operation\
  \ changes the heights to (1, 2, 2, 3, 5).\nThe last operation starts from Hill 1.\
  \ The first jump is to Hill 2. But the next jump will skip Hill 3 (because it's\
  \ height is not strictly greater than the current hill's height), and will go to\
  \ Hill 4. Hence the output is 4."
"vc-preamble": "import Imports.AllImports\n\ndef hill_jumping_competition (n : Nat)\
  \ (heights : List Nat) (operations : List (List Nat)) : List Nat :=\nsorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_valid_operation (op : List Nat) : Bool :=\nmatch op with\n\
  | h::t => \n  if h = 1 then t.length = 2 && List.head! t ≥ 1 && List.get! t 1 ≥\
  \ 1\n  else if h = 2 then t.length = 3 && List.head! t ≥ 1 && List.get! t 1 ≥ List.head!\
  \ t\n  else false\n| [] => false\n"
"vc-theorems": "theorem hill_jumping_result_length (n : Nat) (heights : List Nat)\
  \ (operations : List (List Nat)) :\n  List.all operations is_valid_operation →\n\
  \  (hill_jumping_competition n heights operations).length = \n    (List.filter (fun\
  \ op => List.head! op = 1) operations).length := \nsorry\n\n\ntheorem hill_jumping_bounds\
  \ (n : Nat) (heights : List Nat) (operations : List (List Nat)) :\n  List.all operations\
  \ is_valid_operation →\n  List.all (hill_jumping_competition n heights operations)\
  \ (fun x => x ≥ 1 ∧ x ≤ n) :=\nsorry\n\n\ntheorem hill_jumping_preserves_heights\
  \ (n : Nat) (heights : List Nat) (operations : List (List Nat)) :\n  List.all operations\
  \ is_valid_operation →\n  let original := heights\n  let _ := hill_jumping_competition\
  \ n heights operations\n  heights = original :=\nsorry\n\n/--\ninfo: [3, 4]\n-/\n\
  #guard_msgs in\n#eval hill_jumping_competition 5 [1, 2, 3, 4, 5] [[1, 1, 2], [2,\
  \ 3, 4, -1], [1, 1, 2]]\n\n/--\ninfo: [2, 2]\n-/\n#guard_msgs in\n#eval hill_jumping_competition\
  \ 3 [1, 3, 2] [[1, 1, 1], [2, 1, 2, 1], [1, 1, 1]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
