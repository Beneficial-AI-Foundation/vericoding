"vc-description": "=====Function Descriptions=====\nitertools.product()\n\nThis tool\
  \ computes the cartesian product of input iterables.\nIt is equivalent to nested\
  \ for-loops.\nFor example, product(A, B) returns the same as ((x,y) for x in A for\
  \ y in B).\n\nSample Code\n\n>>> from itertools import product\n>>>\n>>> print list(product([1,2,3],repeat\
  \ = 2))\n[(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]\n\
  >>>\n>>> print list(product([1,2,3],[3,4]))\n[(1, 3), (1, 4), (2, 3), (2, 4), (3,\
  \ 3), (3, 4)]\n>>>\n>>> A = [[1,2,3],[3,4,5]]\n>>> print list(product(*A))\n[(1,\
  \ 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 3), (3, 4), (3, 5)]\n>>>\n>>>\
  \ B = [[1,2,3],[3,4,5],[7,8]]\n>>> print list(product(*B))\n[(1, 3, 7), (1, 3, 8),\
  \ (1, 4, 7), (1, 4, 8), (1, 5, 7), (1, 5, 8), (2, 3, 7), (2, 3, 8), (2, 4, 7), (2,\
  \ 4, 8), (2, 5, 7), (2, 5, 8), (3, 3, 7), (3, 3, 8), (3, 4, 7), (3, 4, 8), (3, 5,\
  \ 7), (3, 5, 8)]\n\n=====Problem Statement=====\nYou are given a two lists A and\
  \ B. Your task is to compute their cartesian product AXB.\nExample\nA = [1, 2]\n\
  B = [3, 4]\n\nAxB = [(1, 3), (1, 4), (2, 3), (2, 4)]\nNote: A and B are sorted lists,\
  \ and the cartesian product's tuples should be output in sorted order.\n\n=====Input\
  \ Format=====\nThe first line contains the space separated elements of list A.\n\
  The second line contains the space separated elements of list B.\nBoth lists have\
  \ no duplicate integer elements.\n\n=====Constraints=====\n0<A<30\n0<B<30\n\n=====Output\
  \ Format=====\nOutput the space separated tuples of the cartesian product."
"vc-preamble": "import Imports.AllImports\n\ndef List.size {α} : List α → Nat \n \
  \ | [] => 0\n  | (_::xs) => 1 + xs.size\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def computeProduct {α} (xs : List α) (ys : List β) : List (α ×\
  \ β) :=\n  sorry\n"
"vc-theorems": "theorem computeProduct_matches_itertools {α} (xs : List α) (ys : List\
  \ β) \n  (h1 : xs.size > 0) (h2 : xs.size ≤ 10)\n  (h3 : ys.size > 0) (h4 : ys.size\
  \ ≤ 10) :\n  computeProduct xs ys = List.join (xs.map (λ x => ys.map (λ y => (x,\
  \ y)))) :=\nsorry\n\n/--\ninfo: '(1, 3) (1, 4) (2, 3) (2, 4)'\n-/\n#guard_msgs in\n\
  #eval compute_product [1, 2] [3, 4]\n\n/--\ninfo: '(1, 3) (1, 4) (1, 5)'\n-/\n#guard_msgs\
  \ in\n#eval compute_product [1] [3, 4, 5]\n\n/--\ninfo: '(1, 4) (2, 4) (3, 4)'\n\
  -/\n#guard_msgs in\n#eval compute_product [1, 2, 3] [4]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
