"vc-description": "```if-not:ruby\nCreate a function, that accepts an arbitrary number\
  \ of arrays and returns a single array generated by alternately appending elements\
  \ from the passed in arguments. If one of them is shorter than the others, the result\
  \ should be padded with empty elements.\n```\n```if:ruby\nCreate a function, that\
  \ accepts an arbitrary number of arrays and returns a single array generated by\
  \ alternately appending elements from the passed in arguments. If one of them is\
  \ shorter than the others, the result should be padded with `nil`s.\n```\n\nExamples:\n\
  \n```python\ninterleave([1, 2, 3], [\"c\", \"d\", \"e\"]) == [1, \"c\", 2, \"d\"\
  , 3, \"e\"]\ninterleave([1, 2, 3], [4, 5]) == [1, 4, 2, 5, 3, None]\ninterleave([1,\
  \ 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]\ninterleave([]) ==\
  \ []\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def interleave {α : Type} : List α → List α → List α \n  | l, []\
  \ => l\n  | [], l => l\n  | (x::xs), (y::ys) => x :: y :: interleave xs ys\n"
"vc-theorems": "theorem interleave_single_list {α : Type} (lst : List α) : \n  interleave\
  \ lst [] = lst := by sorry\n\n\ntheorem interleave_length {α : Type} (l₁ l₂ : List\
  \ α) :\n  List.length (interleave l₁ l₂) = 2 * max (List.length l₁) (List.length\
  \ l₂) := by sorry\n\n\ntheorem interleave_elements {α : Type} [Inhabited α] (l₁\
  \ l₂ : List α) (i : Nat) :\n  i < List.length l₁ → List.get! (interleave l₁ l₂)\
  \ (2*i) = List.get! l₁ i := by sorry\n\n\ntheorem interleave_elements_second {α\
  \ : Type} [Inhabited α] (l₁ l₂ : List α) (i : Nat) :\n  i < List.length l₂ → List.get!\
  \ (interleave l₁ l₂) (2*i + 1) = List.get! l₂ i := by sorry\n\n\ntheorem interleave_empty_left\
  \ {α : Type} : \n  interleave ([] : List α) [] = [] := by sorry\n\n\ntheorem interleave_empty_right\
  \ {α : Type} :\n  interleave [] ([] : List α) = [] := by sorry\n\n/--\ninfo: [1,\
  \ 'c', 2, 'd', 3, 'e']\n-/\n#guard_msgs in\n#eval interleave [1, 2, 3] [\"c\", \"\
  d\", \"e\"]\n\n/--\ninfo: [1, 4, 2, 5, 3, None]\n-/\n#guard_msgs in\n#eval interleave\
  \ [1, 2, 3] [4, 5]\n\n/--\ninfo: [1, 4, 7, 2, 5, 8, 3, 6, 9]\n-/\n#guard_msgs in\n\
  #eval interleave [1, 2, 3] [4, 5, 6] [7, 8, 9]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
