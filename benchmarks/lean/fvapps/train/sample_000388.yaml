"vc-description": "Given an array of integers and an integer k, you need to find the\
  \ total number of continuous subarrays whose sum equals to k.\n\nExample 1:\n\n\
  Input:nums = [1,1,1], k = 2\nOutput: 2\n\n\n\nNote:\n\nThe length of the array is\
  \ in range [1, 20,000].\nThe range of numbers in the array is [-1000, 1000] and\
  \ the range of the integer k is [-1e7, 1e7]."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def countSubarraysWithSum (nums : List Int) (k : Int) : Nat :=\n\
  \  sorry\n"
"vc-theorems": "theorem empty_list_property (k : Int) :\n  countSubarraysWithSum []\
  \ k = 0 := by\n  sorry\n\n\ntheorem single_element_property (x k : Int) :\n  countSubarraysWithSum\
  \ [x] k = if x = k then 1 else 0 := by\n  sorry\n\n\ntheorem uniform_array_property\
  \ {x : Int} {len : Nat} {arr : List Int} \n    (h1 : len > 0)\n    (h2 : arr = List.replicate\
  \ len x) :\n    x ≠ 0 → len ≥ 2 → countSubarraysWithSum arr (2*x) > 0 := by\n  sorry\n\
  \n\ntheorem uniform_zeros_property {len : Nat} {arr : List Int}\n    (h1 : len >\
  \ 0)\n    (h2 : arr = List.replicate len 0) :\n    countSubarraysWithSum arr 0 =\
  \ len * (len + 1) / 2 := by\n  sorry\n\n\ntheorem non_negative_result_property (nums\
  \ : List Int) (k : Int) :\n  countSubarraysWithSum nums k ≥ 0 := by\n  sorry\n\n\
  \ntheorem reverse_invariant_property (nums : List Int) (k : Int) :\n  countSubarraysWithSum\
  \ nums k = countSubarraysWithSum (List.reverse nums) k := by\n  sorry\n\n/--\ninfo:\
  \ 2\n-/\n#guard_msgs in\n#eval count_subarrays_with_sum [1, 1, 1] 2\n\n/--\ninfo:\
  \ 2\n-/\n#guard_msgs in\n#eval count_subarrays_with_sum [1, 2, 3] 3\n\n/--\ninfo:\
  \ 3\n-/\n#guard_msgs in\n#eval count_subarrays_with_sum [1, -1, 0] 0\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
