"vc-description": "Little Egor is a huge movie fan. He likes watching different kinds\
  \ of movies: from drama movies to comedy movies, from teen movies to horror movies.\
  \ He is planning to visit cinema this weekend, but he's not sure which movie he\
  \ should watch.\nThere are n movies to watch during this weekend. Each movie can\
  \ be characterized by two integers Li and Ri, denoting the length and the rating\
  \ of the corresponding movie. Egor wants to watch exactly one movie with the maximal\
  \ value of Li × Ri. If there are several such movies, he would pick a one with the\
  \ maximal Ri among them. If there is still a tie, he would pick the one with the\
  \ minimal index among them.\nYour task is to help Egor to pick a movie to watch\
  \ during this weekend.\n\n-----Input-----\nThe first line of the input contains\
  \ an integer T denoting the number of test cases.\nThe first line of the test case\
  \ description contains an integer n.\nThe second line of the test case description\
  \ contains n integers L1, L2, ...,Ln. The following line contains n integers R1,\
  \ R2, ..., Rn.\n\n-----Output-----\nFor each test case, output a single integer\
  \ i denoting the index of the movie that Egor should watch during this weekend.\
  \ Note that we follow 1-based indexing.\n\n-----Constraints-----\n- 1 ≤ T ≤ 5\n\
  - 1 ≤ n ≤ 100\n- 1 ≤ Li, Ri ≤ 100\n\n-----Example-----\nInput:\n2\n2\n1 2\n2 1\n\
  4\n2 1 4 1\n2 4 1 4\n\nOutput:\n1\n2\n\n-----Explanation-----\nIn the first example\
  \ case, both films have the same value of L × R, but the first film has a better\
  \ rating.\nIn the second example case, the second and the fourth movies are equally\
  \ good, but the second movie has a smaller index."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def best_movie (lengths ratings : List Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem best_movie_result_in_bounds {lengths ratings : List Nat} \n\
  \  (h1 : lengths.length = ratings.length)\n  (h2 : lengths.length > 0) :\n  1 ≤\
  \ best_movie lengths ratings ∧ best_movie lengths ratings ≤ lengths.length :=\n\
  sorry\n\n\ntheorem best_movie_maximizes_product {lengths ratings : List Nat}\n \
  \ (h1 : lengths.length = ratings.length)\n  (h2 : lengths.length > 0) :\n  let result\
  \ := best_movie lengths ratings - 1\n  let max_prod := lengths[result]! * ratings[result]!\n\
  \  ∀ i, i < lengths.length →\n    lengths[i]! * ratings[i]! ≤ max_prod :=\nsorry\n\
  \n\ntheorem best_movie_highest_rating_on_equal_product {lengths ratings : List Nat}\n\
  \  (h1 : lengths.length = ratings.length)\n  (h2 : lengths.length > 0) :\n  let\
  \ result := best_movie lengths ratings - 1\n  let max_prod := lengths[result]! *\
  \ ratings[result]!\n  ∀ i, i < lengths.length →\n    lengths[i]! * ratings[i]! =\
  \ max_prod →\n    ratings[i]! ≤ ratings[result]! :=\nsorry\n\n\ntheorem best_movie_identical_ratings\
  \ {lengths : List Nat} \n  (h : lengths.length > 0)\n  (hmax : (List.maximum? lengths).isSome)\
  \ :\n  let ratings := List.replicate lengths.length 1\n  let result := best_movie\
  \ lengths ratings - 1\n  lengths[result]! = (List.maximum? lengths).get hmax :=\n\
  sorry\n\n\ntheorem best_movie_identical_lengths {ratings : List Nat}\n  (h : ratings.length\
  \ > 0)\n  (hmax : (List.maximum? ratings).isSome) :\n  let lengths := List.replicate\
  \ ratings.length 1\n  let result := best_movie lengths ratings - 1\n  ratings[result]!\
  \ = (List.maximum? ratings).get hmax :=\nsorry\n\n/--\ninfo: 1\n-/\n#guard_msgs\
  \ in\n#eval best_movie [1, 2] [2, 1]\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval\
  \ best_movie [2, 1, 4, 1] [2, 4, 1, 4]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
