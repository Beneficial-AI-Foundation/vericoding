"vc-description": "# Task\nConsider an array of integers `a`. Let `min(a)` be its\
  \ minimal element, and let `avg(a)` be its mean.\n\nDefine the center of the array\
  \ `a` as array `b` such that:\n\n```\n- b is formed from a by erasing some of its\
  \ elements.\n- For each i, |b[i] - avg(a)| < min(a).\n- b has the maximum number\
  \ of elements among all the arrays\n  satisfying the above requirements.\n```\n\n\
  Given an array of integers, return its center.\n\n\n\n# Input/Output\n\n\n`[input]`\
  \ integer array `a`\n\n Unsorted non-empty array of integers.\n\n`2 ≤ a.length ≤\
  \ 50,`\n\n`1 ≤ a[i] ≤ 350.`\n\n`[output]` an integer array\n\n\n# Example\n\nFor\
  \ `a = [8, 3, 4, 5, 2, 8]`, the output should be `[4, 5]`.\n\nHere `min(a) = 2,\
  \ avg(a) = 5`.\n\nFor `a = [1, 3, 2, 1]`, the output should be `[1, 2, 1]`.\n\n\
  Here `min(a) = 1, avg(a) = 1.75`."
"vc-preamble": "import Imports.AllImports\n\ndef abs (n : Int) : Int := \n  if n ≥\
  \ 0 then n else -n\n\n\ndef list_minimum (lst : List Int) : Int := sorry\n\ndef\
  \ array_center (lst : List Int) : List Int := sorry\n\n\ndef mean (lst : List Int)\
  \ : Int := sorry\n\ntheorem array_center_is_subset {lst : List Int} (h : lst ≠ [])\
  \ : \n  ∀ x, x ∈ array_center lst → x ∈ lst := sorry\n\n\n\n\n\n\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def list_index_of (lst : List Int) (x : Int) : Nat := sorry"
"vc-theorems": "/--\ninfo: [4, 5]\n-/\n#guard_msgs in\n#eval array_center [8, 3, 4,\
  \ 5, 2, 8]\n\n/--\ninfo: [1, 2, 1]\n-/\n#guard_msgs in\n#eval array_center [1, 3,\
  \ 2, 1]\n\n/--\ninfo: [10, 11, 12, 13, 14]\n-/\n#guard_msgs in\n#eval array_center\
  \ [10, 11, 12, 13, 14]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
