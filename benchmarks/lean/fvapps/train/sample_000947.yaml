"vc-description": "Zonal Computing Olympiad 2012, 26 Nov 2011\n\nWe consider sequences\
  \ of opening and closing brackets with two types of brackets, () and [].  A bracket\
  \ sequence is well-bracketed if we can pair up each opening bracket with a matching\
  \ closing bracket in the usual sense.  For instance, the sequences (), [] ([]) and\
  \ []([]) are well-bracketed, while (, ()], (], )( and [(]) are not well-bracketed.\
  \  In the last case, each opening bracket has a matching closing bracket and vice\
  \ versa, but the intervals spanned by the different types of brackets intersect\
  \ each other instead of being contained one within the other.\n\nThe alternating\
  \ depth of a well-bracketed sequence tells us the maximum number of times we switch\
  \ between the two types of brackets when we have inner matched brackets enclosed\
  \ within outer matched brackets.  For instance, the alternating depth of (), [[[]]]\
  \ and ()[][] is 1, the alternating depth of [()] and ()([]) is 2, the alternating\
  \ depth of ([()]) and [()][(([]))] is 3, and so on.\n\nGiven a well-bracketed sequence,\
  \ we are interested in computing three quantities.\n- The alternating depth of the\
  \ sequence.\n- The maximum number of symbols between any pair of matched brackets\
  \ of the type ( and ), including both the outer brackets.\n- The maximum number\
  \ of symbols between any pair of matched brackets of the type [ and ], including\
  \ both the outer brackets.\n\nFor instance, the alternating depth of (([]))[[[()]]]\
  \ is 2, the maximum number of symbols between a matched pair () is 6 and the maximum\
  \ number of symbols between a matched pair [] is 8.\n\n\n\n-----Input format-----\n\
  The input consists of two lines.  The first line is a single integer N, the length\
  \ of the bracket sequence. Positions in the sequence are numbered 1,2,…,N. The second\
  \ line is a sequence of N space-separated integers that encode the bracket expression\
  \ as follows: 1 denotes an opening bracket (, 2 denotes a closing bracket ), 3 denotes\
  \ an opening bracket [ and 4 denotes a closing bracket ].  Nothing other than 1,\
  \ 2, 3 or 4 appears in the second line of input and the corresponding expression\
  \ is guaranteed to be well-bracketed.\n\n-----Output format-----\nYour program should\
  \ print 3 space-separated integers in a line, denoting the three quantities asked\
  \ for in the following order: alternating depth, length of the maximum sequence\
  \ between matching () brackets and length of the maximum sequence between matching\
  \ [] brackets.  \n\n-----Testdata-----\nYou may assume that 2 ≤ N ≤ 105.  In 30%\
  \ of the test cases, 2 ≤ N ≤ 103.\n\n- Subtask 1 (30 marks)\n- Subtask 2 (70 marks)\n\
  \n-----Sample Input-----\n14\n1 1 3 4 2 2 3 3 3 1 2 4 4 4\n\n-----Sample Output-----\n\
  2 6 8"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_brackets (n : Nat) (brackets : List Nat) : Nat × Nat\
  \ × Nat := sorry\n\ntheorem output_props (n : Nat) (brackets : List Nat) :\n  let\
  \ (depth, depth1, depth3) := solve_brackets n brackets\n  -- Basic type properties\
  \ (implied by return type)\n  depth ≥ 0 ∧ depth1 ≥ 0 ∧ depth3 ≥ 0 :=\nsorry\n"
"vc-theorems": "theorem depth_bounds (n : Nat) (brackets : List Nat) :\n  let (depth,\
  \ depth1, depth3) := solve_brackets n brackets\n  depth ≤ n ∧ depth1 ≤ n ∧ depth3\
  \ ≤ n :=\nsorry\n\n\ntheorem non_empty_depth (n : Nat) (brackets : List Nat) :\n\
  \  n > 0 →\n  let (depth, depth1, depth3) := solve_brackets n brackets\n  max depth\
  \ (max depth1 depth3) > 0 :=\nsorry\n\n\ntheorem empty_case :\n  solve_brackets\
  \ 0 [] = (0, 0, 0) :=\nsorry\n\n\ntheorem type1_pair :\n  let (depth, depth1, depth3)\
  \ := solve_brackets 2 [1, 2]\n  depth1 > 0 :=\nsorry\n\n\ntheorem type3_pair : \n\
  \  let (depth, depth3, depth3') := solve_brackets 2 [3, 4]\n  depth3 > 0 :=\nsorry\n\
  \n/--\ninfo: (2, 6, 8)\n-/\n#guard_msgs in\n#eval solve_brackets *test1\n\n/--\n\
  info: (2, 4, 2)\n-/\n#guard_msgs in\n#eval solve_brackets *test2\n\n/--\ninfo: (1,\
  \ 2, 2)\n-/\n#guard_msgs in\n#eval solve_brackets *test3\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
