"vc-description": "We have the number ```12385```. We want to know the value of the\
  \ closest cube but higher than 12385. The answer will be ```13824```.\n\nNow, another\
  \ case. We have the number ```1245678```. We want to know the 5th power, closest\
  \ and higher than that number. The value will be ```1419857```.\n\nWe need a function\
  \ ```find_next_power``` ( ```findNextPower``` in JavaScript, CoffeeScript and Haskell),\
  \ that receives two arguments, a value ```val```, and the exponent of the power,```\
  \ pow_```, and outputs the value that we want to find.\n\nLet'see some cases:\n\
  ```python\nfind_next_power(12385, 3) == 13824\n\nfind_next_power(1245678, 5) ==\
  \ 1419857\n```\nThe value, ```val``` will be always a positive integer.\n\nThe power,\
  \ ```pow_```, always higher than ```1```.\n\nHappy coding!!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_next_power (val : Nat) (pow : Nat) : Nat := sorry\n\n\
  theorem find_next_power_greater \n  (val : Nat) (pow : Nat)\n  (h1 : val ≥ 1) (h2\
  \ : pow ≥ 2) (h3 : pow ≤ 8) :\n  find_next_power val pow > val := sorry"
"vc-theorems": "/--\ninfo: 13824\n-/\n#guard_msgs in\n#eval find_next_power 12385\
  \ 3\n\n/--\ninfo: 1419857\n-/\n#guard_msgs in\n#eval find_next_power 1245678 5\n\
  \n/--\ninfo: 1771561\n-/\n#guard_msgs in\n#eval find_next_power 1245678 6\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
