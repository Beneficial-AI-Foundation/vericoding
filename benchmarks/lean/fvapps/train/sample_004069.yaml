"vc-description": "Your boss decided to save money by purchasing some cut-rate optical\
  \ character recognition software for scanning in the text of old novels to your\
  \ database. At first it seems to capture words okay, but you quickly notice that\
  \ it throws in a lot of numbers at random places in the text. For example:\n\n```python\n\
  string_clean('! !') == '! !'\nstring_clean('123456789') == ''\nstring_clean('This\
  \ looks5 grea8t!') == 'This looks great!'\n\n```\n\nYour harried co-workers are\
  \ looking to you for a solution to take this garbled text and remove all of the\
  \ numbers. Your program will take in a string and clean out all numeric characters,\
  \ and return a string with spacing and special characters `~#$%^&!@*():;\"'.,?`\
  \ all intact."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def string_clean (s : String) : String := sorry\n\n-- Main properties\
  \ of string_clean"
"vc-theorems": "theorem string_clean_properties (s : String) :\n  let result := string_clean\
  \ s\n  -- No digits in result\n  (∀ c ∈ result.data, !c.isDigit) ∧\n  -- Maintains\
  \ relative order of non-digits\n  (result = String.mk (s.data.filter (fun c => !c.isDigit)))\
  \ ∧ \n  -- Result length ≤ original length\n  (result.length ≤ s.length) := sorry\n\
  \n-- String with only letters remains unchanged\n\ntheorem string_clean_only_letters\
  \ (s : String) :\n  (∀ c ∈ s.data, c.isAlpha) →\n  string_clean s = s := sorry\n\
  \n-- String with only digits returns empty string \n\ntheorem string_clean_only_digits\
  \ (s : String) :\n  (∀ c ∈ s.data, c.isDigit) →\n  string_clean s = \"\" := sorry\n\
  \n/--\ninfo: ''\n-/\n#guard_msgs in\n#eval string_clean \"\"\n\n/--\ninfo: ''\n\
  -/\n#guard_msgs in\n#eval string_clean \"123456789\"\n\n/--\ninfo: 'This looks great!'\n\
  -/\n#guard_msgs in\n#eval string_clean \"This looks5 grea8t!\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
