"vc-description": "It's John's birthday; he has brought some candies in distribute\
  \ among N of his friends. Being a good friend, he decided to distribute all of his\
  \ candies equally among his friend and he don't want to keep any for himself. He\
  \ left the task of distributing candies up to his friends, but his friends haven't\
  \ done a great job in distributing them and now they all have unequal amount of\
  \ candies.\nHe asked all of his friends to keep all the candies in their hands (A[1]\
  \ to A[N]) so that he can redistribute the candies. Taking a candy away from someone\
  \ makes them sad and makes the person who gets it happy. Thus, you do not want to\
  \ do many operations on the number of candies.\nHere each operation stands for,\
  \ taking away 1 candy from someone and giving it to somebody else.\nAfter applying\
  \ the operations, he might not be able to distribute all the candies among all of\
  \ your friends, and you might need to buy some more candies as well. Buying each\
  \ candy will be counted as 1 operation as well. John is saving up for his birthday\
  \ party in the evening and so he wants to spend the least amount of money on candies\
  \ as possible.\nThus, he asks for your help. You have to find the minimum number\
  \ of operations required to make the distributions equal.\n\n-----Input:-----\n\
  - The first line consists of the number T representing the number of test cases.\n\
  - Each test case consists of 2 lines.\n- The first line contains of the number N\
  \ representing the number of friends.\n- The second line contains space separated\
  \ numbers (A[1] to A[N]) representing the number of candies each friend currently\
  \ has.\n\n-----Output:-----\nFor each test case, you much print the minimum number\
  \ of operations.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $1 \\leq N\
  \ \\leq 10^5$\n- $0 \\leq A[i] \\leq 10^9$\n\n-----Sample Input:-----\n3\n\n4\n\n\
  7 8 6 4\n\n6\n\n7 3 10 2 3 8\n\n1\n\n10   \n\n-----Sample Output:-----\n4\n\n10\n\
  \n0"
"vc-preamble": "import Imports.AllImports\n\ndef List.sum : List Nat → Nat\n  | []\
  \ => 0\n  | x::xs => x + sum xs\n\ninductive Perm {α : Type} : List α → List α →\
  \ Prop where\n  | nil : Perm [] []\n  | cons : ∀ (x : α) (l₁ l₂ : List α), Perm\
  \ l₁ l₂ → Perm (x::l₁) (x::l₂)\n  | swap : ∀ (x y : α) (l : List α), Perm (x::y::l)\
  \ (y::x::l)\n  | trans : ∀ {l₁ l₂ l₃ : List α}, Perm l₁ l₂ → Perm l₂ l₃ → Perm l₁\
  \ l₃\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calc_min_operations (n : Nat) (candies : List Nat) : Nat :=\n\
  \  sorry\n\n\n"
"vc-theorems": "theorem single_box_zero_ops {val : Nat} :\n  calc_min_operations 1\
  \ [val] = 0 :=\nsorry\n\n\ntheorem min_ops_nonnegative {n : Nat} (candies : List\
  \ Nat) :\n  calc_min_operations n candies ≥ 0 :=\nsorry\n\n/--\ninfo: 4\n-/\n#guard_msgs\
  \ in\n#eval calc_min_operations 4 [7, 8, 6, 4]\n\n/--\ninfo: 10\n-/\n#guard_msgs\
  \ in\n#eval calc_min_operations 6 [7, 3, 10, 2, 3, 8]\n\n/--\ninfo: 0\n-/\n#guard_msgs\
  \ in\n#eval calc_min_operations 1 [10]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
