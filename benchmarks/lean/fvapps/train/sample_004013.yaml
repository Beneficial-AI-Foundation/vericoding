"vc-description": "Goldbach's conjecture is one of the oldest and best-known unsolved\
  \ problems in number theory and all of mathematics. It states:\n\nEvery even integer\
  \ greater than 2 can be expressed as the sum of two primes.\nFor example: \n\n`6\
  \ = 3 + 3`\n`8 = 3 + 5`\n`10 = 3 + 7 = 5 + 5`\n`12 = 5 + 7`\n\nSome rules for the\
  \ conjecture: \n\n- pairs should be descending like [3,5] not [5,3]\n\n- all pairs\
  \ should be in ascending order based on the first element of the pair: \n`[[5, 13],\
  \ [7, 11]]` is accepted \nbut `[[7, 11],[5, 13]]` is not accepted.\n\nWrite the\
  \ a function that find all identical pairs of prime numbers:\n```python\ndef goldbach(even_number)\n\
  ```\nYou should return an array of containing pairs of primes, like:\n```python\n\
  [[5, 13], [7, 11]]  # even_number = 18\n```\nor\n```python\n[[3, 31], [5, 29], [11,\
  \ 23], [17, 17]] # even_number = 34\n```"
"vc-preamble": "import Imports.AllImports\n\ndef isPrime (n : Nat) : Bool :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def goldbach (n : Nat) : List (List Nat) :=\n  sorry\n"
"vc-theorems": "theorem goldbach_valid_sums {n : Nat} (h : n ≥ 4) (h2 : n % 2 = 0)\
  \ :\n  let result := goldbach n\n  (∀ x ∈ result, x.length = 2) ∧ \n  (∀ x ∈ result,\
  \ x[0]! + x[1]! = n) ∧\n  (∀ x ∈ result, x[0]! ≤ x[1]!) :=\nsorry\n\n\ntheorem goldbach_small_inputs\
  \ {n : Nat} (h : n ≤ 3) :\n  goldbach n = [] :=\nsorry\n\n\n\n\ntheorem goldbach_four\
  \ :\n  goldbach 4 = [[2, 2]] :=\nsorry\n\n/--\ninfo: [[3, 7], [5, 5]]\n-/\n#guard_msgs\
  \ in\n#eval goldbach 10\n\n/--\ninfo: [[5, 47], [11, 41], [23, 29]]\n-/\n#guard_msgs\
  \ in\n#eval goldbach 52\n\n/--\ninfo: [[5, 53], [11, 47], [17, 41], [29, 29]]\n\
  -/\n#guard_msgs in\n#eval goldbach 58\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
