"vc-description": "Lots of geeky customers visit our chef's restaurant everyday. So,\
  \ when asked to fill the feedback form, these customers represent the feedback using\
  \ a binary string (i.e a string that contains only characters '0' and '1'. \n\n\
  Now since chef is not that great in deciphering binary strings, he has decided the\
  \ following criteria to classify the feedback as Good or Bad : \n\nIf the string\
  \ contains the substring \"010\" or \"101\", then the feedback is Good, else it\
  \ is Bad. Note that, to be Good it is not necessary to have both of them as substring.\n\
  \nSo given some binary strings, you need to output whether according to the chef,\
  \ the strings are Good or Bad. \n\n-----Input-----\nThe first line contains an integer\
  \ T denoting the number of feedbacks. Each of the next T lines contains a string\
  \ composed of only '0'  and '1'.\n\n-----Output-----\nFor every test case, print\
  \ in a single line Good or Bad as per the Chef's method of classification.\n\n-----Constraints-----\n\
  -  1 ≤  T ≤   100 \n-  1  ≤  |S|   ≤  105 \n\nSum of length of all strings in one\
  \ test file will not exceed 6*106.\n\n-----Example-----\nInput:\n2\n11111110\n10101010101010\n\
  \nOutput:\nBad\nGood\n\n-----Explanation-----\nExample case 1.\n\nThe string doesn't\
  \ contain 010 or 101 as substrings.\n\nExample case 2.\n\nThe string contains both\
  \ 010 and 101 as substrings."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def classify_feedback (s : String) : String := sorry\n\ndef containsSubstring\
  \ (s : String) (sub : String) : Bool := sorry\n"
"vc-theorems": "theorem classify_feedback_returns_valid_output (s : String) (h : s.length\
  \ > 0) :\n  (classify_feedback s = \"Good\" ∨ classify_feedback s = \"Bad\") :=\
  \ sorry\n\n\ntheorem good_feedback_contains_pattern (s : String) (h : s.length >\
  \ 0) :\n  classify_feedback s = \"Good\" → (containsSubstring s \"010\" ∨ containsSubstring\
  \ s \"101\") := sorry\n\n\ntheorem no_pattern_implies_bad (s : String) (h : s.length\
  \ > 0) :\n  ¬(containsSubstring s \"010\" ∨ containsSubstring s \"101\") → classify_feedback\
  \ s = \"Bad\" := sorry\n\n\ntheorem size_three_good_iff_pattern (s : String) (h\
  \ : s.length = 3) :\n  classify_feedback s = \"Good\" ↔ (s = \"010\" ∨ s = \"101\"\
  ) := sorry\n\n\ntheorem short_string_is_bad (s : String) (h : s.length < 3) :\n\
  \  classify_feedback s = \"Bad\" := sorry\n\n/--\ninfo: 'Bad'\n-/\n#guard_msgs in\n\
  #eval classify_feedback \"11111110\"\n\n/--\ninfo: 'Good'\n-/\n#guard_msgs in\n\
  #eval classify_feedback \"10101010101010\"\n\n/--\ninfo: 'Good'\n-/\n#guard_msgs\
  \ in\n#eval classify_feedback \"00010\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
