"vc-description": "You are given a set of `n` segments on the axis `Ox`, each segment\
  \ has integer endpoints between `0` and `m` inclusive.\n Segments may intersect,\
  \ overlap or even coincide with each other. Each segment is characterized by two\
  \ integers li and ri — coordinates of the left and of the right endpoints.\n\n Consider\
  \ all integer points between `0` and `m` inclusive. Your task is to print all such\
  \ points that don't belong to any segment. The point x belongs to the segment `[l;r]`\
  \ if and only if `l ≤ x ≤ r`.\n\n**Input:**\n `m` — the upper bound for coordinates;\n\
   array of coordinates li and ri `0 ≤ li ≤ ri ≤ m` — the endpoints of the `i`-th\
  \ segment. Segments may intersect, overlap or even coincide with each other.\n\n\
  **Output:**\n All points from `0` to `m` that don't belong to any segment.\n\n**Examples:**\n\
  ```python\nsegments(5, [(2,2),(1,2),(5,5)]) => [0,3,4]\nsegments(7, [(0,7)]) =>\
  \ []\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def segments (m: Nat) (segs: List (Nat × Nat)) : List Nat :=\n\
  \  sorry\n"
"vc-theorems": "theorem empty_segments {m : Nat} (h : m ≤ 100) :\n  segments m []\
  \ = List.range (m + 1) :=\nsorry\n\n\ntheorem result_in_bounds {m : Nat} {segs :\
  \ List (Nat × Nat)} (h : m ≤ 100) :\n  ∀ x ∈ segments m segs, 0 ≤ x ∧ x ≤ m :=\n\
  sorry\n\n\ntheorem result_ordered {m : Nat} {segs : List (Nat × Nat)} (h : m ≤ 100)\
  \ :\n  List.Pairwise (· ≤ ·) (segments m segs) :=\nsorry\n\n\ntheorem not_covered_by_segments\
  \ {m : Nat} {segs : List (Nat × Nat)} (h : m ≤ 100) :\n  ∀ x ∈ segments m segs,\n\
  \    ∀ seg ∈ segs, ¬(seg.1 ≤ x ∧ x ≤ seg.2) :=\nsorry\n\n\ntheorem missing_covered_by_segments\
  \ {m : Nat} {segs : List (Nat × Nat)} (h : m ≤ 100) :\n  ∀ x ≤ m, x ∉ segments m\
  \ segs →\n    ∃ seg ∈ segs, seg.1 ≤ x ∧ x ≤ seg.2 :=\nsorry\n\n\ntheorem full_coverage\
  \ {m : Nat} (h : m ≤ 100) :\n  segments m [(0,m)] = [] :=\nsorry\n\n/--\ninfo: []\n\
  -/\n#guard_msgs in\n#eval segments 7 [[0, 7]]\n\n/--\ninfo: [0, 1, 2]\n-/\n#guard_msgs\
  \ in\n#eval segments 2 []\n\n/--\ninfo: [0, 3, 4]\n-/\n#guard_msgs in\n#eval segments\
  \ 5 [[2, 2], [1, 2], [5, 5]]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
