"vc-description": "This is a peculiar functioning setup.\nTwo Tanks are separated\
  \ from each other by a wall .There is a pipe in the wall which connects  both tanks\
  \  which allows flow of water between them . Due to this ,there is change in temperature\
  \ of both tanks , every minute temperature of Tank with larger temperature among\
  \ two decreases by one and temperature of Tank  with smaller temperature among two\
  \ increases by two until equilibrium is reached , But there is a problem .\nThe\
  \ pipe can't control this flow of water if there is Non-equilibrium (inequality\
  \ of temperature  on  both sides )  even after $m$ minutes and the pipe will burst\
  \ after it , your task is to predict whether the pipe will burst or not .\nNote:\
  \ If equilibrium cannot be reached the process will continue forever.\nThe initial\
  \ temperature of Cold Tank is $Tc$ , of Hot Tank it is $Th$. \n\n-----Input:-----\n\
  - First line will contain $T$, number of testcases. Then the testcases follow. \n\
  - Each testcase contains of a single line of input, three  integers $m, Tc,Th$.\
  \ \n\n-----Output:-----\nFor each testcase, output in a single line answer \"Yes\"\
  \ if Pipe will burst after m minutes \"No\" if pipe will not burst.\n\n-----Constraints-----\n\
  - $1 \\leq T \\leq 100000$\n- $1 \\leq m,Tc,Th \\leq 10^9$\n- $Tc \\leq Th $\n\n\
  -----Sample Input:-----\n2\n4 5 10\n2 2 5\n\n-----Sample Output:-----\nYes\nNo"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def will_pipe_burst (m : Nat) (tc : Int) (th : Int) : String :=\
  \ sorry\n\ntheorem pipe_burst_binary_result (m : Nat) (tc th : Int) :\n  will_pipe_burst\
  \ m tc th = \"Yes\" ∨ will_pipe_burst m tc th = \"No\" := sorry\n"
"vc-theorems": "theorem pipe_burst_temp_not_div_three (m : Nat) (tc th : Int) :\n\
  \  (th - tc) % 3 ≠ 0 → will_pipe_burst m tc th = \"Yes\" := sorry\n\n\ntheorem pipe_burst_temp_div_three\
  \ (m : Nat) (tc th : Int) :\n  (th - tc) % 3 = 0 →\n  will_pipe_burst m tc th =\
  \ (if ((th - tc) / 3) ≤ m then \"No\" else \"Yes\") := sorry\n\n\ntheorem pipe_no_burst_equal_temps\
  \ (m : Nat) (t : Int) :\n  will_pipe_burst m t t = \"No\" := sorry\n\n/--\ninfo:\
  \ 'Yes'\n-/\n#guard_msgs in\n#eval will_pipe_burst 4 5 10\n\n/--\ninfo: 'No'\n-/\n\
  #guard_msgs in\n#eval will_pipe_burst 2 2 5\n\n/--\ninfo: 'Yes'\n-/\n#guard_msgs\
  \ in\n#eval will_pipe_burst 1 1 7\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
