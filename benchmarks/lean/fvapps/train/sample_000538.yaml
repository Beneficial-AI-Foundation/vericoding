"vc-description": "Consider the following operations on a triple of integers. In one\
  \ operation, you should:\n- Choose an integer $d$ and an arithmetic operation ―\
  \ either addition or multiplication.\n- Choose a subset of elements of the triple.\n\
  - Apply the arithmetic operation to each of the chosen elements, i.e. either add\
  \ $d$ to each of them or multiply each of them by $d$.\nFor example, if we have\
  \ a triple $(3, 5, 7)$, we may choose to add $3$ to the first and third element,\
  \ and we get $(6, 5, 10)$ using one operation.\nYou are given an initial triple\
  \ $(p, q, r)$ and a target triple $(a, b, c)$. Find the minimum number of operations\
  \ needed to transform $(p, q, r)$ into $(a, b, c)$.\n\n-----Input-----\n- The first\
  \ line of the input contains a single integer $T$ denoting the number of test cases.\
  \ The description of $T$ test cases follows.\n- The first line of each test case\
  \ contains three space-separated integers $p$, $q$ and $r$.\n- The second line contains\
  \ three space-separated integers $a$, $b$ and $c$.\n\n-----Output-----\nFor each\
  \ test case, print a single line containing one integer ― the minimum required number\
  \ of operations.\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $|p|, |q|,\
  \ |r|, |a|, |b|, |c| \\le 10^9$\n\n-----Subtasks-----\nSubtask #1 (10 points): $|p|,\
  \ |q|, |r|, |a|, |b|, |c| \\le 10$\nSubtask #2 (90 points): original constraints\n\
  \n-----Example Input-----\n2\n3 5 7\n6 5 10\n8 6 3\n9 7 8\n\n-----Example Output-----\n\
  1\n2\n\n-----Explanation-----\nExample case 1: We add $3$ to the first and third\
  \ element of $(3, 5, 7)$ to form $(6, 5, 10)$.\nExample case 2: We can add $1$ to\
  \ each element to form $(9, 7, 4)$ and then multiply the third element by $2$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def eq_solve (v0 v1 u0 u1 : Int) : Float := sorry\n\ndef min_operations\
  \ (p q r a b c : Int) : Nat := sorry\n"
"vc-theorems": "theorem eq_solve_zero_denominator (v1 u1 : Int) :\n  eq_solve 0 v1\
  \ 0 u1 = 1 := sorry\n\n\ntheorem eq_solve_formula (v0 v1 u0 u1 : Int) :\n  u0 ≠\
  \ v0 → eq_solve v0 v1 u0 u1 * Float.ofInt (u0 - v0) = Float.ofInt (u1 - v1) := sorry\n\
  \n\ntheorem min_operations_bounds (p q r a b c : Int) :\n  0 ≤ min_operations p\
  \ q r a b c ∧ min_operations p q r a b c ≤ 3 := sorry\n\n\ntheorem min_operations_identity\
  \ (x y z : Int) :\n  min_operations x y z x y z = 0 := sorry\n\n\ntheorem min_operations_symmetry\
  \ (p q r a b c : Int) :\n  min_operations p q r a b c = min_operations r q p c b\
  \ a := sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval min_operations 3 5 7 6 5\
  \ 10\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval min_operations 8 6 3 9 7 8\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
