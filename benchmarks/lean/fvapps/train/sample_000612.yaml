"vc-description": "Cersei wants to be the queen of seven kingdoms.\n\nFor this to\
  \ happen, she needs to address the soldiers in her army. There are n$n$ soldiers\
  \ in her army (numbered 1$1$ through n$n$). Cersei passes on the message to the\
  \ first soldier (soldier 1).   \nThis message needs to reach every soldier in the\
  \ army. For this, the soldiers communicate among themselves by one soldier passing\
  \ the message to another soldier through some communication links. It is known that\
  \ the message could reach every soldier using the given links.\nNow, each soldier\
  \ will receive the message from exactly one soldier or Cersei and could pass on\
  \ the message to atmost two soldiers. That is each soldier (except soldier 1) has\
  \ only one incoming link and every soldier (including soldier 1) has atmost two\
  \ outgoing links.  \nNow, the High Sparrow feels that Cersei is planning to kill\
  \ his people first. Hence, for the sake of his people, he decided to appoint some\
  \ sparrows to overhear every conversation between the soldiers (The conversation\
  \ between Cersei and the first soldier needn't be overheard due to the fear of Ser\
  \ Gregor Clegane).   \nTo overhear a conversation between soldiers A$A$ and B$B$,\
  \ there needs to be a sparrow either at soldier A$A$ or soldier B$B$ or both.\n\
  Also, by his research, the High Sparrow has found that the soldiers are partitioned\
  \ into some classes (1$1$ to k$k$). That is, every soldier belongs to exactly one\
  \ class. He then demands the presence of atleast one sparrow with each class he\
  \ knows (1$1$ to k$k$).\nFind the minimum number of sparrows the High Sparrow needs\
  \ to recruit for the job or tell that he couldn't.\n\n-----Input:-----\n- The first\
  \ line of the input contains the number of test cases t$t$.\n- The first line of\
  \ each test case gives the number of soldiers n$n$ in the army, the number of communication\
  \ links m$m$ between the soldiers and the number of classes k$k$ in soldiers.\n\
  - The next line of the test case consists of n$n$ integers A1,A2....An$A_1,A_2....A_n$\
  \ each denoting the class of the ith$i^{th}$ soldier.\n- The next m$m$ lines of\
  \ the test case contain two integers u$u$ and v$v$, which denotes that soldier u$u$\
  \ can pass a message to soldier v$v$ (u≠v$u \\neq v$).\n\n-----Output:-----\nFor\
  \ each test case, print in a single line the minimum number of sparrows required\
  \ for the above task or print −1$-1$ if no such way is possible.\n\n-----Constraints-----\n\
  - 1≤t≤500$1 \\leq t \\leq 500$\n- 1≤n≤2500$1 \\leq n \\leq 2500$\n- m=n−1$m = n\
  \ - 1$\n- 1≤k≤10$1 \\leq k \\leq 10$\n- 1≤ai≤k$1 \\leq a_i \\leq k$\n- The sum of\
  \ n$n$ over all test cases is ≤2500$\\leq 2500$.\n\n-----Sample Input:-----\n1\n\
  5 4 3\n1 1 2 2 3\n1 2\n1 3\n2 4\n2 5\n\n-----Sample Output:-----\n3\n\n-----EXPLANATION:-----\n\
  Selecting soldiers 1,4,5 would satisfy all the conditions.\n\n-----Sample Input:-----\n\
  1\n5 4 5\n1 1 2 2 3\n1 2\n1 3\n2 4\n2 5\n\n-----Sample Output:-----\n-1\n\n-----EXPLANATION:-----\n\
  Classes 4 and 5 are not present. So, there is no way possible."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solveSparrowProblem (n k : Nat) (classes : List Nat) (links\
  \ : List (Nat × Nat)) : Int := sorry\n\ndef isValidTree (n : Nat) (links : List\
  \ (Nat × Nat)) : Bool := sorry \n"
"vc-theorems": "theorem result_is_int (n k : Nat) (classes : List Nat) (links : List\
  \ (Nat × Nat)) :\n  let result := solveSparrowProblem n k classes links\n  result\
  \ ≥ -1 := sorry\n\n\ntheorem tree_validation (n k : Nat) (classes : List Nat) (links\
  \ : List (Nat × Nat)) :\n  isValidTree n links = true → \n  let result := solveSparrowProblem\
  \ n k classes links\n  result ≥ -1 := sorry\n\n\ntheorem minimal_cases_solvable\
  \ : \n  (let n₁ := 1; let k₁ := 1; let classes₁ := [1]; let links₁ := [];\n   solveSparrowProblem\
  \ n₁ k₁ classes₁ links₁ ≥ 0) ∧\n  (let n₂ := 2; let k₂ := 1; let classes₂ := [1,1];\
  \ let links₂ := [(1,2)];\n   solveSparrowProblem n₂ k₂ classes₂ links₂ ≥ 0) ∧\n\
  \  (let n₃ := 2; let k₃ := 2; let classes₃ := [1,2]; let links₃ := [(1,2)];\n  \
  \ solveSparrowProblem n₃ k₃ classes₃ links₃ ≥ 0) := sorry\n\ntheorem impossible_case\
  \ :\n  let n := 3; let k := 4; let classes := [1,2,3]; let links := [(1,2), (1,3)];\n\
  \  solveSparrowProblem n k classes links = -1 := sorry\n\n\ntheorem linear_tree_bounds\
  \ (n k : Nat) (classes : List Nat) (links : List (Nat × Nat)) :\n  n = 4 →\n  k\
  \ = 2 →\n  classes = [1,2,1,2] →\n  links = [(1,2), (2,3), (3,4)] →\n  let result\
  \ := solveSparrowProblem n k classes links\n  result ≥ 0 ∧ result ≤ n := sorry\n\
  \n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval solve_sparrow_problem 5 3 [1, 1, 2, 2,\
  \ 3] [(1, 2), (1, 3), (2, 4), (2, 5)]\n\n/--\ninfo: -1\n-/\n#guard_msgs in\n#eval\
  \ solve_sparrow_problem 5 5 [1, 1, 2, 2, 3] [(1, 2), (1, 3), (2, 4), (2, 5)]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
