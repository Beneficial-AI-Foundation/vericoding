"vc-description": "Given an array with exactly 5 strings `\"a\"`, `\"b\"` or `\"c\"\
  ` (`char`s in Java, `character`s in Fortran), check if the array contains three\
  \ and two of the same values.\n\n## Examples\n\n```\n[\"a\", \"a\", \"a\", \"b\"\
  , \"b\"] ==> true  // 3x \"a\" and 2x \"b\"\n[\"a\", \"b\", \"c\", \"b\", \"c\"\
  ] ==> false // 1x \"a\", 2x \"b\" and 2x \"c\"\n[\"a\", \"a\", \"a\", \"a\", \"\
  a\"] ==> false // 5x \"a\"\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def check_three_and_two (list : List α) : Bool :=\n  sorry\n"
"vc-theorems": "theorem list_length_is_five {α : Type} (list : List α) :\n  check_three_and_two\
  \ list = true → list.length = 5 :=\n  sorry\n\n\ntheorem counts_must_be_two_and_three\
  \ {α : Type} [BEq α] (list : List α) :\n  check_three_and_two list = true →\n  ∃\
  \ (x y : α), \n    (list.count x = 2 ∧ list.count y = 3) ∨ \n    (list.count x =\
  \ 3 ∧ list.count y = 2) :=\n  sorry\n\n\ntheorem counts_two_and_three_implies_true\
  \ {α : Type} [BEq α] (list : List α) :\n  (∃ (x y : α), \n    (list.count x = 2\
  \ ∧ list.count y = 3) ∨ \n    (list.count x = 3 ∧ list.count y = 2)) →\n  check_three_and_two\
  \ list = true :=\n  sorry\n\n\ntheorem type_agnostic {α : Type} (list : List α)\
  \ : \n  check_three_and_two list = true ∨ check_three_and_two list = false :=\n\
  \  sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval check_three_and_two [\"a\"\
  , \"a\", \"a\", \"b\", \"b\"]\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval check_three_and_two\
  \ [\"a\", \"c\", \"a\", \"c\", \"b\"]\n\n/--\ninfo: False\n-/\n#guard_msgs in\n\
  #eval check_three_and_two [\"a\", \"a\", \"a\", \"a\", \"a\"]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
