"vc-description": "Finish the solution so that it sorts the passed in array of numbers.\
  \ If the function passes in an empty array or null/nil value then it should return\
  \ an empty array.\n\nFor example:\n\n```python\nsolution([1,2,3,10,5]) # should\
  \ return [1,2,3,5,10]\nsolution(None) # should return []\n```\n\n```Hakell\nsortNumbers\
  \ [1, 2, 10, 50, 5] = Just [1, 2, 5, 10, 50]\nsortNumbers [] = Nothing\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solution (nums : List Int) : List Int := sorry\n\ndef isSorted\
  \ (l : List Int) : Bool :=\n  match l with\n  | [] => true\n  | [_] => true\n  |\
  \ x::y::rest => x ≤ y && isSorted (y::rest)\n"
"vc-theorems": "theorem solution_maintains_elements (nums : List Int) :\n  (solution\
  \ nums).foldl (· + ·) 0 = nums.foldl (· + ·) 0 := sorry\n\n\ntheorem solution_length_preserved\
  \ (nums : List Int) :\n  (solution nums).length = nums.length := sorry\n\n\ntheorem\
  \ solution_is_sorted (nums : List Int) :\n  isSorted (solution nums) = true := sorry\n\
  \n\ntheorem solution_empty : solution [] = [] := sorry\n\n/--\ninfo: [1, 2, 3, 5,\
  \ 10]\n-/\n#guard_msgs in\n#eval solution [1, 2, 3, 10, 5]\n\n/--\ninfo: []\n-/\n\
  #guard_msgs in\n#eval solution []\n\n/--\ninfo: []\n-/\n#guard_msgs in\n#eval solution\
  \ None\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
