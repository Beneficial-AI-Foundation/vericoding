"vc-description": "Given a string of integers, return the number of odd-numbered substrings\
  \ that can be formed. \n\nFor example, in the case of `\"1341\"`, they are `1, 1,\
  \ 3, 13, 41, 341, 1341`, a total of `7` numbers. \n\n`solve(\"1341\") = 7`.  See\
  \ test cases for more examples.\n\nGood luck!\n\nIf you like substring Katas, please\
  \ try \n\n[Longest vowel chain](https://www.codewars.com/kata/59c5f4e9d751df43cf000035)\n\
  \n[Alphabet symmetry](https://www.codewars.com/kata/59d9ff9f7905dfeed50000b0)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve (s : String) : Nat :=\n  sorry\n"
"vc-theorems": "theorem solve_bounds {s : String} (h : s.length > 0) :\n  solve s\
  \ ≥ 0 ∧ solve s ≤ (s.length * (s.length + 1)) / 2 :=\n  sorry\n\n\ntheorem solve_expected\
  \ {s : String} (h : s.length > 0) :\n  solve s = s.data.enum.foldl (fun acc (i,\
  \ c) => \n    if c.toNat % 2 = 1 then \n      acc + (i + 1)\n    else acc) 0 :=\n\
  \  sorry\n\n\ntheorem solve_even_only {s : String} (h : s.length > 0)\n  (h_even\
  \ : ∀ c ∈ s.data, c.toNat % 2 = 0) :\n  solve s = 0 :=\n  sorry\n\n\ntheorem solve_odd_only\
  \ {s : String} (h : s.length > 0)\n  (h_odd : ∀ c ∈ s.data, c.toNat % 2 = 1) :\n\
  \  solve s = (s.length * (s.length + 1)) / 2 :=\n  sorry\n\n/--\ninfo: 7\n-/\n#guard_msgs\
  \ in\n#eval solve \"1341\"\n\n/--\ninfo: 10\n-/\n#guard_msgs in\n#eval solve \"\
  1357\"\n\n/--\ninfo: 12\n-/\n#guard_msgs in\n#eval solve \"13471\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
