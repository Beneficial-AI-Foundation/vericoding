"vc-description": "Mohit(Ex GenSec ) is the most active member of the roasting club\
  \ who loves giving tasks to other members. One day he observed that none of the\
  \ members were paying attention to the online classes, so he decided to have some\
  \ fun and overcome the boring lectures. He wrote N numbers on the virtual board\
  \ (where the first number is 1, the last one is N and the ith number being i).\n\
  Then he asked M questions to every other member of the club. In each question, a\
  \ number K was given by Mohit and the members had to give a single integer as an\
  \ answer which will be the sum of all numbers present on the whiteboard.\nThere\
  \ are some conditions that every member has to follow while answering.\n- If K is\
  \ already present on the whiteboard then swap the first and last number.\n- Otherwise,\
  \ replace the last number with K.\n\n-----Input:-----\n- First-line will consist\
  \ of space-separated integers N and M. The board will contain the list of numbers\
  \ from 1 to N and M is the number of questions that Mohit will ask.\n- Next M lines\
  \ contain the number Ki, which will be provided by Mohit and (1<=i<=M).\n\n-----Output:-----\n\
  For each question, report the sum of all integers present\n\n-----Constraints-----\n\
  - $1 \\leq N,M \\leq 1000000$\n- $2 \\leq K \\leq 10^9$\n\n-----Sample Input:-----\n\
  5 4\n7\n12 \n10 \n1  \n\n-----Sample Output:-----\n17\n22  \n20\n20"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_roasting_club (n : Nat) (qlen : Nat) (queries : List\
  \ Nat) : List Nat := sorry\n\ndef list_minimum (l : List Nat) : Nat := \n  match\
  \ l with\n  | [] => 0  \n  | x::xs => xs.foldl min x\n"
"vc-theorems": "theorem roasting_club_properties \n  (n : Nat)\n  (queries : List\
  \ Nat)\n  (h1 : n ≥ 2)\n  (h2 : n ≤ 100) \n  (h3 : queries.length ≥ 1)\n  (h4 :\
  \ queries.length ≤ 10)\n  (h5 : ∀ q ∈ queries, q ≥ 1 ∧ q ≤ 1000) :\n  let result\
  \ := solve_roasting_club n queries.length queries\n  -- Results match length of\
  \ queries\n  (result.length = queries.length) ∧ \n  -- All results are positive\n\
  \  (∀ x ∈ result, x > 0) ∧\n  -- Each result includes first and last numbers\n \
  \ (let first_last_min := 1 + min n (list_minimum queries)\n   ∀ x ∈ result, x ≥\
  \ first_last_min) := \nsorry\n\n\ntheorem single_query_properties\n  (n : Nat)\n\
  \  (k : Nat)\n  (h1 : n ≥ 2)\n  (h2 : n ≤ 100)\n  (h3 : k ≥ 1)\n  (h4 : k ≤ 1000)\
  \ :\n  let result := solve_roasting_club n 1 [k]\n  -- Single query returns single\
  \ result\n  (result.length = 1) ∧\n  -- Result is positive\n  (∀ x ∈ result, x >\
  \ 0) :=\nsorry\n\n/--\ninfo: [17, 22, 20, 20]\n-/\n#guard_msgs in\n#eval solve_roasting_club\
  \ 5 4 [7, 12, 10, 1]\n\n/--\ninfo: [7, 7]\n-/\n#guard_msgs in\n#eval solve_roasting_club\
  \ 3 2 [4, 2]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
