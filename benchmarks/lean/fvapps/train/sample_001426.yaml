"vc-description": "Let's define a periodic infinite sequence S$S$ (0$0$-indexed) with\
  \ period K$K$ using the formula Si=(i%K)+1$S_i = (i \\% K) + 1$.\nChef has found\
  \ a sequence of positive integers A$A$ with length N$N$ buried underground. He suspects\
  \ that it is a contiguous subsequence of some periodic sequence. Unfortunately,\
  \ some elements of A$A$ are unreadable. Can you tell Chef the longest possible period\
  \ K$K$ of an infinite periodic sequence which contains A$A$ (after suitably filling\
  \ in the unreadable elements) as a contiguous subsequence?\n\n-----Input-----\n\
  - The first line of the input contains a single integer T$T$ denoting the number\
  \ of test cases. The description of T$T$ test cases follows.\n- The first line of\
  \ each test case contains a single integer N$N$. \n- The second line contains N$N$\
  \ space-separated integers A1,A2,…,AN$A_1, A_2, \\dots, A_N$. Unreadable elements\
  \ are denoted by −1$-1$.\n\n-----Output-----\nFor each test case, print a single\
  \ line.\n- If the period can be arbitrarily large, this line should contain a single\
  \ string \"inf\".\n- Otherwise, if A$A$ cannot be a contiguous subsequence of a\
  \ periodic sequence, it should contain a single string \"impossible\".\n- Otherwise,\
  \ it should contain a single integer — the maximum possible period.\n\n-----Constraints-----\n\
  - 1≤T≤100$1 \\le T \\le 100$\n- 2≤N≤105$2 \\le N \\le 10^5$\n- the sum of N$N$ over\
  \ all test cases does not exceed 106$10^6$\n- for each valid i$i$, 1≤Ai≤106$1 \\\
  le A_i \\le 10^6$ or Ai=−1$A_i = -1$\n\n-----Subtasks-----\nSubtask #1 (50 points):\n\
  - 2≤N≤1,000$2 \\le N \\le 1,000$\n- the sum of N$N$ over all test cases does not\
  \ exceed 10,000$10,000$\nSubtask #2 (50 points): original constraints\n\n-----Example\
  \ Input-----\n3\n3\n-1 -1 -1\n5\n1 -1 -1 4 1\n4\n4 6 7 -1\n\n-----Example Output-----\n\
  inf\n4\nimpossible"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_periodic_sequence (n: Nat) (sequence: List Int) : String\
  \ := sorry\n\ndef List.sum (l: List Int) : Int := sorry\n"
"vc-theorems": "theorem sum_zero (sequence: List Int) :\n  solve_periodic_sequence\
  \ 0 sequence = \"0\" := sorry\n\n\ntheorem cycle_repetition {n: Nat} {sequence:\
  \ List Int} \n  (h: sequence.length > 0) :\n  let cycled := List.join (List.replicate\
  \ (n / sequence.length + 1) sequence)\n  String.toInt! (solve_periodic_sequence\
  \ n sequence) = \n    (List.take n cycled).sum := sorry\n\n\ntheorem cycle_consistency\
  \ {n: Nat} {sequence: List Int}\n  (h1: sequence.length > 0)\n  (h2: n ≥ sequence.length)\
  \ :\n  String.toInt! (solve_periodic_sequence (n + sequence.length) sequence) -\
  \ \n  String.toInt! (solve_periodic_sequence n sequence) = \n  sequence.sum := sorry\n\
  \n/--\ninfo: '0'\n-/\n#guard_msgs in\n#eval solve_periodic_sequence 0 [1, 2, 3]\n\
  \n/--\ninfo: '1'\n-/\n#guard_msgs in\n#eval solve_periodic_sequence 1 [1, 2, 3]\n\
  \n/--\ninfo: '3'\n-/\n#guard_msgs in\n#eval solve_periodic_sequence 2 [1, 2, 3]\n\
  \n/--\ninfo: '7'\n-/\n#guard_msgs in\n#eval solve_periodic_sequence 4 [1, 2, 3]\n\
  \n/--\ninfo: '-2'\n-/\n#guard_msgs in\n#eval solve_periodic_sequence 3 [-1, 2, -3]\n\
  \n/--\ninfo: '-4'\n-/\n#guard_msgs in\n#eval solve_periodic_sequence 6 [-1, 2, -3]\n\
  \n/--\ninfo: '4'\n-/\n#guard_msgs in\n#eval solve_periodic_sequence 5 [1, -1, -1,\
  \ 4, 1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
