"vc-description": "You have been recently hired as a developer in CodeChef. Your first\
  \ mission is to implement a feature that will determine the number of submissions\
  \ that were judged late in a contest.\nThere are $N$ submissions, numbered $1$ through\
  \ $N$. For each valid $i$, the $i$-th submission was submitted at time $S_i$ and\
  \ judged at time $J_i$ (in minutes). Submitting and judging both take zero time.\
  \ Please determine how many submissions received their verdicts after a delay of\
  \ more than $5$ minutes.\n\n-----Input-----\n- The first line of the input contains\
  \ a single integer $T$ denoting the number of test cases. The description of $T$\
  \ test cases follows.\n- The first line of the input contains a single integer $N$.\n\
  - $N$ lines follow. For each valid $i$, the $i$-th of these lines contains two space-separated\
  \ integers $S_i$ and $J_i$.\n\n-----Output-----\nFor each test case, print a single\
  \ line containing one integer — the number of submissions for which the judging\
  \ was delayed by more than 5 minutes.\n\n-----Constraints-----\n- $1 \\le T \\le\
  \ 100$\n- $1 \\le N \\le 100$\n- $1 \\le S_i \\le J_i \\le 300$ for each valid $i$\n\
  \n-----Subtasks-----\nSubtask #1 (100 points): original constraints\n\n-----Example\
  \ Input-----\n1\n5\n1 3\n4 4\n4 10\n1 11\n2 7\n\n-----Example Output-----\n2\n\n\
  -----Explanation-----\nExample case 1: The delays of the respective submissions\
  \ are $2$ minutes, $0$ minutes, $6$ minutes, $10$ minutes and $5$ minutes. Only\
  \ submissions $3$ and $4$ are delayed by more than $5$ minutes, hence the answer\
  \ is $2$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_late_submissions (submissions : List (Nat × Nat)) : Nat\
  \ := sorry\n\ntheorem count_late_submissions_non_negative (submissions : List (Nat\
  \ × Nat)) :\n  count_late_submissions submissions ≥ 0 := sorry\n"
"vc-theorems": "theorem count_late_submissions_upper_bound (submissions : List (Nat\
  \ × Nat)) :\n  count_late_submissions submissions ≤ submissions.length := sorry\n\
  \n\ntheorem count_late_submissions_manual_count (submissions : List (Nat × Nat))\
  \ :\n  count_late_submissions submissions = \n    (submissions.filter (fun p =>\
  \ p.2 - p.1 > 5)).length := sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval count_late_submissions\
  \ [(1, 3), (4, 4), (4, 10), (1, 11), (2, 7)]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n\
  #eval count_late_submissions [(1, 2), (3, 4), (5, 6)]\n\n/--\ninfo: 3\n-/\n#guard_msgs\
  \ in\n#eval count_late_submissions [(1, 7), (2, 8), (3, 9)]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
