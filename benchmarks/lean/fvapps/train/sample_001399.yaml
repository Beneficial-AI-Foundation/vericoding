vc-description: |-
  Cheffina challanges chef to rearrange the given array as arr[i] > arr[i+1] < arr[i+2] > arr[i+3].. and so on…, i.e. also arr[i] < arr[i+2] and arr[i+1] < arr[i+3] and arr[i] < arr[i+3] so on.. Chef accepts the challenge, chef starts coding but his code is not compiling help him to write new code.

  -----Input:-----
  - First-line will contain $T$, the number of test cases. Then the test cases follow. 
  - Each test case contains two lines of input, First $N$ as the size of the array. 
  - N space-separated distinct integers.

  -----Output:-----
  For each test case, output in a single line answer given to the Chefffina.

  -----Constraints-----
  - $1 \leq T \leq 10$
  - $1 \leq N \leq 10^5$
  - $1 \leq arr[i] \leq 10^5$

  -----Sample Input:-----
  2
  4
  4 1 6 3
  5
  4 5 1 6 3

  -----Sample Output:-----
  3 1 6 4
  3 1 5 4 6
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def rearrange_array (n : Nat) (arr : List Int) : List Int := sorry

  theorem rearrange_array_maintains_same_elements {n : Nat} {arr : List Int} 
    (h : arr.length > 0) :
    let result := rearrange_array n arr
    List.length result = n ∧ 
    List.length (List.filter (λ x => x ∈ result) arr) = List.length arr := sorry
vc-theorems: |-
  theorem rearrange_array_alternates {n : Nat} {arr : List Int}
    (h : arr.length > 1) :
    let result := rearrange_array n arr
    ∀ i, 1 ≤ i → i < n →
      (i % 2 = 0 → result[i]! ≥ result[i-1]!) ∧ 
      (i % 2 = 1 → result[i]! ≤ result[i-1]!) := sorry


  theorem rearrange_array_idempotent {n : Nat} {arr : List Int}
    (h : arr.length > 0) :
    let result1 := rearrange_array n arr
    let result2 := rearrange_array n result1
    result1 = result2 := sorry
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded
