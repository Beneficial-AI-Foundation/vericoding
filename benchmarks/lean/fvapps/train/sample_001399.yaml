"vc-description": "Cheffina challanges chef to rearrange the given array as arr[i]\
  \ > arr[i+1] < arr[i+2] > arr[i+3].. and so on…, i.e. also arr[i] < arr[i+2] and\
  \ arr[i+1] < arr[i+3] and arr[i] < arr[i+3] so on.. Chef accepts the challenge,\
  \ chef starts coding but his code is not compiling help him to write new code.\n\
  \n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then\
  \ the test cases follow. \n- Each test case contains two lines of input, First $N$\
  \ as the size of the array. \n- N space-separated distinct integers.\n\n-----Output:-----\n\
  For each test case, output in a single line answer given to the Chefffina.\n\n-----Constraints-----\n\
  - $1 \\leq T \\leq 10$\n- $1 \\leq N \\leq 10^5$\n- $1 \\leq arr[i] \\leq 10^5$\n\
  \n-----Sample Input:-----\n2\n4\n4 1 6 3\n5\n4 5 1 6 3\n\n-----Sample Output:-----\n\
  3 1 6 4\n3 1 5 4 6"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def rearrange_array (n : Nat) (arr : List Int) : List Int := sorry\n\
  \ntheorem rearrange_array_maintains_same_elements {n : Nat} {arr : List Int} \n\
  \  (h : arr.length > 0) :\n  let result := rearrange_array n arr\n  List.length\
  \ result = n ∧ \n  List.length (List.filter (λ x => x ∈ result) arr) = List.length\
  \ arr := sorry\n"
"vc-theorems": "theorem rearrange_array_alternates {n : Nat} {arr : List Int}\n  (h\
  \ : arr.length > 1) :\n  let result := rearrange_array n arr\n  ∀ i, 1 ≤ i → i <\
  \ n →\n    (i % 2 = 0 → result[i]! ≥ result[i-1]!) ∧ \n    (i % 2 = 1 → result[i]!\
  \ ≤ result[i-1]!) := sorry\n\n\ntheorem rearrange_array_idempotent {n : Nat} {arr\
  \ : List Int}\n  (h : arr.length > 0) :\n  let result1 := rearrange_array n arr\n\
  \  let result2 := rearrange_array n result1\n  result1 = result2 := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
