"vc-description": "There is only little time left until the New Year! For that reason,\
  \ Chef decided to make a present for his best friend. He made a connected and undirected\
  \ simple graph with N$N$ vertices and M$M$ edges.\nSince Chef does not like odd\
  \ numbers and his friend does not like undirected graphs, Chef decided to direct\
  \ each edge in one of two possible directions in such a way that the indegrees of\
  \ all vertices of the resulting graph are even. The indegree of a vertex is the\
  \ number of edges directed to that vertex from another vertex. As usual, Chef is\
  \ busy in the kitchen, so you need to help him with directing the edges. Find one\
  \ possible way to direct them or determine that it is impossible under the given\
  \ conditions, so that Chef could bake a cake as a present instead.\n\n-----Input-----\n\
  - The first line of the input contains a single integer T$T$ denoting the number\
  \ of test cases. The description of T$T$ test cases follows.\n- The first line of\
  \ each test case contains two space-separated integers N$N$ and M$M$.\n- M$M$ lines\
  \ follow. For each i$i$ (1≤i≤M$1 \\le i \\le M$), the i$i$-th of these lines contains\
  \ two space-separated integers ui$u_i$ and vi$v_i$ denoting an edge between vertices\
  \ ui$u_i$ and vi$v_i$.\n\n-----Output-----\nFor each test case:\n- If a valid way\
  \ to direct the edges does not exist, print a single line containing one integer\
  \ −1$-1$.\n- Otherwise, print a single line containing M$M$ space-separated integers.\
  \ For each valid i$i$, the i$i$-th of these integers should be 0$0$ if edge i$i$\
  \ is directed from ui$u_i$ to vi$v_i$ or 1$1$ if it is directed from vi$v_i$ to\
  \ ui$u_i$.\n\n-----Constraints-----\n- 1≤T≤5$1 \\le T \\le 5$\n- 1≤N,M≤105$1 \\\
  le N, M \\le 10^5$\n- 1≤ui,vi≤N$1 \\le u_i, v_i \\le N$ for each valid i$i$\n- the\
  \ graph on the input is connected, does not contain multiple edges or self-loops\n\
  \n-----Subtasks-----\nSubtask #1 (30 points): 1≤N,M≤1,000$1 \\le N, M \\le 1,000$\n\
  Subtask #2 (70 points): original constraints\n\n-----Example Input-----\n2\n4 4\n\
  1 2\n1 3\n2 4\n3 4\n3 3\n1 2\n2 3\n1 3\n\n-----Example Output-----\n0 0 1 1\n-1"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def direct_graph (n : Nat) (m : Nat) (edges : List (Nat × Nat))\
  \ : List Int := sorry\n\ntheorem empty_graph (n : Nat) : \n  direct_graph n 0 []\
  \ = [] := sorry\n"
"vc-theorems": "theorem odd_edges :\n  direct_graph 2 1 [(1,2)] = [-1] := sorry\n\n\
  \ntheorem valid_small_graph :\n  let result := direct_graph 4 4 [(1,2), (1,3), (2,4),\
  \ (3,4)]\n  List.length result = 4 ∧ \n  (∀ x, x ∈ result → x = 0 ∨ x = 1) := sorry\n\
  \n\ntheorem no_solution_triangle :\n  direct_graph 3 3 [(1,2), (2,3), (1,3)] = [-1]\
  \ := sorry\n\n\ntheorem single_node :\n  direct_graph 1 0 [] = [] := sorry\n\n\n\
  theorem parallel_edges :\n  let result := direct_graph 2 2 [(1,2), (1,2)]\n  List.length\
  \ result = 2 ∧\n  (∀ x, x ∈ result → x = 0 ∨ x = 1) := sorry\n\n/--\ninfo: [0, 0,\
  \ 1, 1]\n-/\n#guard_msgs in\n#eval direct_graph 4 4 [[1, 2], [1, 3], [2, 4], [3,\
  \ 4]]\n\n/--\ninfo: [-1]\n-/\n#guard_msgs in\n#eval direct_graph 3 3 [[1, 2], [2,\
  \ 3], [1, 3]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
