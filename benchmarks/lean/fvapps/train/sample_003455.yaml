"vc-description": "Every now and then people in the office moves teams or departments.\
  \ Depending what people are doing with their time they can become more or less boring.\
  \ Time to assess the current team.\n\n```if-not:java\nYou will be provided with\
  \ an object(staff) containing the staff names as keys, and the department they work\
  \ in as values.\n```\n\n```if:java\nYou will be provided with an array of `Person`\
  \ objects with each instance containing the name and department for a staff member.\n\
  ~~~java\npublic class Person {\n  public final String name;        // name of the\
  \ staff member\n  public final String department;  // department they work in\n\
  }\n~~~\n```\n\nEach department has a different boredom assessment score, as follows:\n\
  \naccounts = 1\nfinance = 2 \ncanteen = 10 \nregulation = 3 \ntrading = 6 \nchange\
  \ = 6\nIS = 8\nretail = 5 \ncleaning = 4\npissing about = 25\n\nDepending on the\
  \ cumulative score of the team, return the appropriate sentiment:\n\n<=80: 'kill\
  \ me now'\n< 100 & > 80: 'i can handle this'\n100 or over: 'party time!!'\n\nThe\
  \ Office I - Outed\nThe Office III - Broken Photocopier\nThe Office IV - Find a\
  \ Meeting Room\nThe Office V - Find a Chair"
"vc-preamble": "import Imports.AllImports\n\ndef VALID_DEPTS := [\"accounts\", \"\
  finance\", \"canteen\", \"regulation\", \"trading\", \n                    \"change\"\
  , \"IS\", \"retail\", \"cleaning\", \"pissing about\"]\n\ndef scores : List (String\
  \ × Nat) := [\n  (\"accounts\", 1), (\"finance\", 2), (\"canteen\", 10), (\"regulation\"\
  , 3),\n  (\"trading\", 6), (\"change\", 6), (\"IS\", 8), (\"retail\", 5),\n  (\"\
  cleaning\", 4), (\"pissing about\", 25)\n]\n\n\ndef getScore (dept : String) : Nat\
  \ :=\n  match scores.find? (fun p => p.1 = dept) with\n  | some p => p.2\n  | none\
  \ => 0\n\n\ndef getTotalScore (staff : List (String × String)) : Nat :=\n  staff.foldl\
  \ (fun acc x => acc + getScore x.2) 0\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def boredom (staff : List (String × String)) : String :=\n  sorry\n"
"vc-theorems": "theorem boredom_output_valid (staff : List (String × String)) :\n\
  \  let result := boredom staff\n  result = \"kill me now\" ∨ result = \"i can handle\
  \ this\" ∨ result = \"party time!!\" := \n  sorry\n\n\ntheorem boredom_threshold_low\
  \ (staff : List (String × String)) \n  (h : ∀ x ∈ staff, x.2 ∈ VALID_DEPTS) :\n\
  \  let total := getTotalScore staff\n  total ≤ 80 → boredom staff = \"kill me now\"\
  \ :=\n  sorry\n\n\ntheorem boredom_threshold_mid (staff : List (String × String))\n\
  \  (h : ∀ x ∈ staff, x.2 ∈ VALID_DEPTS) :\n  let total := getTotalScore staff\n\
  \  total > 80 ∧ total < 100 → boredom staff = \"i can handle this\" :=\n  sorry\n\
  \n\ntheorem boredom_threshold_high (staff : List (String × String))\n  (h : ∀ x\
  \ ∈ staff, x.2 ∈ VALID_DEPTS) :\n  let total := getTotalScore staff\n  total ≥ 100\
  \ → boredom staff = \"party time!!\" :=\n  sorry\n\n/--\ninfo: 'kill me now'\n-/\n\
  #guard_msgs in\n#eval boredom {\"tim\": \"change\", \"jim\": \"accounts\", \"randy\"\
  : \"canteen\", \"sandy\": \"change\", \"andy\": \"change\", \"katie\": \"IS\", \"\
  laura\": \"change\", \"saajid\": \"IS\", \"alex\": \"trading\", \"john\": \"accounts\"\
  , \"mr\": \"finance\"}\n\n/--\ninfo: 'i can handle this'\n-/\n#guard_msgs in\n#eval\
  \ boredom {\"tim\": \"IS\", \"jim\": \"finance\", \"randy\": \"pissing about\",\
  \ \"sandy\": \"cleaning\", \"andy\": \"cleaning\", \"katie\": \"cleaning\", \"laura\"\
  : \"pissing about\", \"saajid\": \"regulation\", \"alex\": \"regulation\", \"john\"\
  : \"accounts\", \"mr\": \"canteen\"}\n\n/--\ninfo: 'party time!!'\n-/\n#guard_msgs\
  \ in\n#eval boredom {\"tim\": \"accounts\", \"jim\": \"accounts\", \"randy\": \"\
  pissing about\", \"sandy\": \"finance\", \"andy\": \"change\", \"katie\": \"IS\"\
  , \"laura\": \"IS\", \"saajid\": \"canteen\", \"alex\": \"pissing about\", \"john\"\
  : \"retail\", \"mr\": \"pissing about\"}\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
