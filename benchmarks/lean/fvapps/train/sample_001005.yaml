"vc-description": "Consider a 2d-grid. That is, each cell is identified by (i,j).\
  \ You have received reports of two snake-sightings on this grid. You want to check\
  \ whether they could be partial sightings of the same snake or not.\nEach of the\
  \ snake sightings correspond to a straight, axis-parallel line segment in the grid,\
  \ and the starting and ending cells for each are given to you. Now consider a graph,\
  \ where each cell in the 2d-grid is a vertex. And there is an edge between 2 vertices\
  \ if and only if the cells corresponding to these two vertices are consecutive cells\
  \ in at least one of the two snakes. That is, at least in one of the snakes, when\
  \ you go from one end point to the other end point, these two cells should occur\
  \ consecutively.\nThe two sightings/snakes are said to be same, if both these conditions\
  \ are satisfied:\n- The union of the set of cells in the first snake and the set\
  \ of cells in the second snake, should form a connected component in this graph.\n\
  - No vertex should have degree more than 2 in the graph.\nIn other words, the induced\
  \ subgraph on the union set must be a path graph.\n\n-----Input-----\n- The first\
  \ line contains a single integer, T, which is the number of testcases. The description\
  \ of each testcase follows.\n- The first line of each testcase contains four integers:\
  \ X11, Y11, X12, Y12. This represents the fact that the first snake's end points\
  \ are (X11, Y11) and (X12, Y12).\n- The second line of each testcase contains four\
  \ integers: X21, Y21, X22, Y22. This represents the fact that the second snake's\
  \ end points are (X21, Y21) and (X22, Y22).\n\n-----Output-----\n- For each testcase,\
  \ output \"yes\" if the snakes are the same, as per the definition given above.\
  \ Output \"no\" otherwise.\n\n-----Constraints-----\n- 1 ≤ T ≤ 105\n- -109 ≤ Xij,Yij\
  \ ≤ 109\n- The two end points of every snake is guaranteed to be either on the same\
  \ row or on the same column. Thus, the snake occupies all the cells between these\
  \ cells, including the end points.\n\n-----Example-----\nInput:\n4\n2 1 8 1\n11\
  \ 1 7 1\n2 1 8 1\n11 1 9 1\n2 1 8 1\n3 1 3 -2\n2 1 8 1\n2 1 2 -2\nOutput:\nyes\n\
  no\nno\nyes\n\n-----Explanation-----\nIn the images, the first snake is red, the\
  \ second snake is yellow, and the intersections, if any, are in orange.\nThe first\
  \ test case corresponds to:\n\nBoth the conditions on the graph are satisfied, and\
  \ hence this is a \"yes\".\nThe second test case corresponds to:\n\nThere is no\
  \ edge between the vertex corresponding to the (8,1) cell and the vertex corresponding\
  \ to (9,1), Hence, the union set is disconnected, and thus the answer is \"no\"\
  . \nThe third test case corresponds to:\n\nThe vertex corresponding to the cell\
  \ (3,1) has degree 3, which is more than 2, and thus the answer is \"no\". \nThe\
  \ fourth test case corresponds to:\n\nBoth the conditions on the graph are satisfied,\
  \ and hence this is a \"yes\"."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def check_snake_segments (x11 y11 x12 y12 x21 y21 x22 y22 : Int)\
  \ : String :=\n  sorry\n"
"vc-theorems": "theorem check_snake_segments_returns_valid_result \n  (x11 y11 x12\
  \ y12 x21 y21 x22 y22 : Int) :\n  check_snake_segments x11 y11 x12 y12 x21 y21 x22\
  \ y22 = \"yes\" ∨ \n  check_snake_segments x11 y11 x12 y12 x21 y21 x22 y22 = \"\
  no\" :=\nsorry\n\n\ntheorem check_snake_segments_reflexive\n  (x1 y1 x2 y2 : Int)\
  \ :\n  check_snake_segments x1 y1 x2 y2 x1 y1 x2 y2 = \"yes\" :=\nsorry\n\n\ntheorem\
  \ check_snake_segments_symmetric\n  (x1 y1 x2 y2 : Int) :\n  check_snake_segments\
  \ x1 y1 x2 y2 x2 y2 x1 y1 = \n  check_snake_segments x2 y2 x1 y1 x1 y1 x2 y2 :=\n\
  sorry\n\n\ntheorem check_snake_segments_horizontal_overlap\n  (x y : Int) :\n  check_snake_segments\
  \ x y (x+5) y (x+3) y (x+8) y = \"yes\" :=\nsorry\n\n\ntheorem check_snake_segments_vertical_overlap\n\
  \  (x y : Int) :\n  check_snake_segments x y x (y+5) x (y+3) x (y+8) = \"yes\" :=\n\
  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
