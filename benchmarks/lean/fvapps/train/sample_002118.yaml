"vc-description": "The country has n cities and n - 1 bidirectional roads, it is possible\
  \ to get from every city to any other one if you move only along the roads. The\
  \ cities are numbered with integers from 1 to n inclusive.\n\nAll the roads are\
  \ initially bad, but the government wants to improve the state of some roads. We\
  \ will assume that the citizens are happy about road improvement if the path from\
  \ the capital located in city x to any other city contains at most one bad road.\n\
  \nYour task is — for every possible x determine the number of ways of improving\
  \ the quality of some roads in order to meet the citizens' condition. As those values\
  \ can be rather large, you need to print each value modulo 1 000 000 007 (10^9 +\
  \ 7).\n\n\n-----Input-----\n\nThe first line of the input contains a single integer\
  \ n (2 ≤ n ≤ 2·10^5) — the number of cities in the country. Next line contains n\
  \ - 1 positive integers p_2, p_3, p_4, ..., p_{n} (1 ≤ p_{i} ≤ i - 1) — the description\
  \ of the roads in the country. Number p_{i} means that the country has a road connecting\
  \ city p_{i} and city i. \n\n\n-----Output-----\n\nPrint n integers a_1, a_2, ...,\
  \ a_{n}, where a_{i} is the sought number of ways to improve the quality of the\
  \ roads modulo 1 000 000 007 (10^9 + 7), if the capital of the country is at city\
  \ number i.\n\n\n-----Examples-----\nInput\n3\n1 1\n\nOutput\n4 3 3\nInput\n5\n\
  1 2 3 4\n\nOutput\n5 8 9 8 5"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve (n : Nat) (parents : List Nat) : List Nat := sorry\n\n\
  theorem solve_chain_properties (n : Nat) (parents : List Nat) \n    (h1 : n ≥ 2)\n\
  \    (h2 : parents = List.range (n-1)) : \n    let result := solve n parents\n \
  \   -- Result length equals input size\n    List.length result = n ∧ \n    -- First\
  \ element equals last element (symmetry)\n    List.get! result 0 = List.get! result\
  \ (n-1) ∧\n    -- All values are non-negative\n    ∀ x ∈ result, x ≥ 0 := sorry\
  \ \n"
"vc-theorems": "theorem solve_star_properties (n : Nat) (parents : List Nat)\n   \
  \ (h1 : n ≥ 2) \n    (h2 : parents = List.replicate (n-1) 1) :\n    let result :=\
  \ solve n parents\n    -- Result length equals input size\n    List.length result\
  \ = n ∧\n    -- All elements are natural numbers\n    ∀ x ∈ result, x ≥ 0 := sorry\n\
  \n/--\ninfo: [4, 3, 3]\n-/\n#guard_msgs in\n#eval solve 3 [1, 1]\n\n/--\ninfo: [5,\
  \ 8, 9, 8, 5]\n-/\n#guard_msgs in\n#eval solve 5 [1, 2, 3, 4]\n\n/--\ninfo: [2,\
  \ 2]\n-/\n#guard_msgs in\n#eval solve 2 [1]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
