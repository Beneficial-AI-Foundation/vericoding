"vc-description": "You have initially a string of N characters, denoted by A1,A2...AN.\
  \ You have to print the size of the largest subsequence of string A such that all\
  \ the characters in that subsequence are distinct ie. no two characters in that\
  \ subsequence should be same.\n\nA subsequence of string A is a sequence that can\
  \ be derived from A by deleting some elements  and without changing the order of\
  \ the remaining elements.\n\n-----Input-----\nFirst line contains T, number of testcases.\
  \ Each testcase consists of a single string in one line. Each character of the string\
  \ will be a small alphabet(ie. 'a' to 'z').\n\n-----Output-----\nFor each testcase,\
  \ print the required answer in one line.\n\n-----Constraints-----\n- 1 ≤ T ≤ 10\n\
  - Subtask 1 (20 points):1 ≤ N ≤ 10\n- Subtask 2 (80 points):1 ≤ N ≤ 105\n\n-----Example-----\n\
  Input:\n2\nabc\naba\n\nOutput:\n3\n2\n\n-----Explanation-----\nFor first testcase,\
  \ the whole string is a subsequence which has all distinct characters.\n\nIn second\
  \ testcase, the we can delete last or first 'a' to get the required subsequence."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def longest_distinct_subsequence (s : String) : Nat :=\n  sorry\n\
  \n-- Property: output is always between 0 and length of input string"
"vc-theorems": "theorem output_bounds (s : String) : \n  let result := longest_distinct_subsequence\
  \ s\n  0 ≤ result ∧ result ≤ s.length :=\nsorry\n\n-- Property: output equals number\
  \ of unique characters \n\ntheorem equals_unique_chars (s : String) :\n  longest_distinct_subsequence\
  \ s = s.toList.eraseDups.length :=\nsorry\n\n-- Property: result is at most size\
  \ of alphabet used\n\ntheorem max_alphabet_size (s : String) :\n  longest_distinct_subsequence\
  \ s ≤ 26 :=\nsorry\n\n-- Property: empty string has 0 distinct chars\n\ntheorem\
  \ empty_string :\n  longest_distinct_subsequence \"\" = 0 :=\nsorry\n\n-- Property:\
  \ string of repeated chars has length 1\n\ntheorem repeated_chars (c : Char) (n\
  \ : Nat) :\n  n > 0 → longest_distinct_subsequence (String.mk (List.replicate n\
  \ c)) = 1 :=\nsorry\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval longest_distinct_subsequence\
  \ \"abc\"\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval longest_distinct_subsequence\
  \ \"aba\"\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval longest_distinct_subsequence\
  \ \"aabbcc\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
