"vc-description": "# Task\n Given a `sequence` of integers, check whether it is possible\
  \ to obtain a strictly increasing sequence by erasing no more than one element from\
  \ it.\n\n# Example\n\n For `sequence = [1, 3, 2, 1]`, the output should be `false`;\n\
  \ \n For `sequence = [1, 3, 2]`, the output should be `true`.\n\n# Input/Output\n\
  \n\n - `[input]` integer array `sequence`\n\n    Constraints: `2 ≤ sequence.length\
  \ ≤ 1000, -10000 ≤ sequence[i] ≤ 10000.`\n\n\n - `[output]` a boolean value\n\n\
  \    `true` if it is possible, `false` otherwise."
"vc-preamble": "import Imports.AllImports\n\ndef almostIncreasingSequence (seq : List\
  \ Int) : Bool := sorry\n\ndef countDescendingPairs (seq : List Int) : Nat := sorry\n\
  \n\ndef isStrictlyIncreasing (seq : List Int) : Bool := sorry\n\ntheorem strictly_increasing_always_true\
  \ {seq : List Int} :\n  isStrictlyIncreasing seq → almostIncreasingSequence seq\
  \ := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def countDuplicates (seq : List Int) : Nat := sorry \n\ntheorem\
  \ duplicate_elements_property {seq : List Int} :\n  countDuplicates seq > 1 → ¬almostIncreasingSequence\
  \ seq := sorry"
"vc-theorems": "theorem too_many_drops_always_false {seq : List Int} :\n  countDescendingPairs\
  \ seq > 1 → ¬almostIncreasingSequence seq := sorry\n\n\ntheorem single_removal_property\
  \ {seq : List Int} (i : Nat) (h : i < seq.length) :\n  isStrictlyIncreasing (seq.take\
  \ i ++ seq.drop (i+1)) → \n  almostIncreasingSequence seq := sorry\n\n\ntheorem\
  \ single_element_always_true {seq : List Int} :\n  seq.length = 1 → almostIncreasingSequence\
  \ seq := sorry\n\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval almost_increasing_sequence\
  \ [1, 3, 2, 1]\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval almost_increasing_sequence\
  \ [1, 3, 2]\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval almost_increasing_sequence\
  \ [1, 2, 3]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
