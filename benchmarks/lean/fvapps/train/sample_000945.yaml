vc-description: |-
  Mr. Pr and Ms. Ad are at $a$ and $b$ respectively on an infinite number line. Mr. Pr wants to meet Ms. Ad.
  Mr. Pr can choose to move  $c$ or $d$ units in 1 second. If Mr. Pr moves $c$ units then Ms. Ad will move $d$ units and vice versa. (Both of them always moved in positive x-direction)
  You have to determine if Mr. Pr can meet with Ms. Ad after some integral amount of time, given that Mr. Pr chooses optimally. Note that meeting after a fractional amount of time does not count.

  -----Input:-----
  - First line will contain $T$, number of testcases. Then the testcases follow. 
  - Each testcase contains four space separated integers, $a$, $b$, $c$, and $d$.

  -----Output:-----
  - For each test case, output a single line containing "YES" if Mr. Pr meets with Ms. Ad, otherwise "NO".

  -----Constraints-----
  - $1 \leq T \leq 10^5$
  - $1 \leq a,b,c,d \leq 10^9$

  -----Sample Input:-----
  2
  3 4 1 2
  10 20 3 7

  -----Sample Output:-----
  YES
  NO

  -----Explanation:-----
  In the first test case, Mr. Pr will move 2 units in the first second and Ms. Ad moves 1 unit simultaneously and they meet. 
  In the second test case, it is impossible to meet (fractional time is not allowed).
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def can_meet (pos1 pos2 speed1 speed2 : Int) : String :=
    sorry
vc-theorems: |
  theorem same_positions_always_meets (pos : Int) :
    can_meet pos pos speed1 speed2 = "YES" := by sorry


  theorem same_speeds_never_meets (pos1 pos2 speed : Int) :
    pos1 ≠ pos2 → can_meet pos1 pos2 speed speed = "NO" := by sorry


  theorem meeting_requires_divisible_difference 
    (pos1 pos2 speed1 speed2 : Int)
    (h1 : speed1 ≠ speed2)
    (h2 : (pos1 - pos2).natAbs % (speed1 - speed2).natAbs = 0) :
    can_meet pos1 pos2 speed1 speed2 = "YES" := by sorry


  theorem meeting_impossible_if_not_divisible
    (pos1 pos2 speed1 speed2 : Int)
    (h1 : speed1 ≠ speed2) 
    (h2 : (pos1 - pos2).natAbs % (speed1 - speed2).natAbs ≠ 0) :
    can_meet pos1 pos2 speed1 speed2 = "NO" := by sorry

  /--
  info: 'YES'
  -/
  #guard_msgs in
  #eval can_meet 3 4 1 2

  /--
  info: 'NO'
  -/
  #guard_msgs in
  #eval can_meet 10 20 3 7

  /--
  info: 'YES'
  -/
  #guard_msgs in
  #eval can_meet 5 5 2 3
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
