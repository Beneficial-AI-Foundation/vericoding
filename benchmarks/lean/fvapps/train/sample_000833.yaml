"vc-description": "Accepts a string from the user and print the reverse string as\
  \ the output without using any built-in function.\n\n-----Input:-----\nEach testcase\
  \ contains of a single line of input, a string.\n\n-----Output:-----\nFor each testcase,\
  \ output in a single line answer, the reverse string.\n\n-----Sample Input:-----\n\
  1\nTracy\n\n-----Sample Output:-----\nycarT"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def reverseString (s : String) : String := sorry\n\ntheorem reverse_twice_is_original\
  \ (s : String) :\n  reverseString (reverseString s) = s := sorry\n"
"vc-theorems": "theorem reverse_preserves_length (s : String) :\n  (reverseString\
  \ s).length = s.length := sorry\n\n\ntheorem first_last_swap (s : String) (h : s.length\
  \ > 0) :\n  (reverseString s).front = s.back ∧ \n  (reverseString s).back = s.front\
  \ := sorry\n\n-- Note: The sorted property is harder to express in Lean's type system\n\
  -- as it requires defining what \"sorted\" means for strings and proving\n-- permutation\
  \ properties. A simplified version could be:\n\ntheorem reverse_preserves_chars\
  \ (s : String) (c : Char) :\n  s.contains c ↔ (reverseString s).contains c := sorry\n\
  \n/--\ninfo: 'ycarT'\n-/\n#guard_msgs in\n#eval reverse_string \"Tracy\"\n\n/--\n\
  info: 'olleH'\n-/\n#guard_msgs in\n#eval reverse_string \"Hello\"\n\n/--\ninfo:\
  \ 'nohtyP'\n-/\n#guard_msgs in\n#eval reverse_string \"Python\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
