"vc-description": "Return an output string that translates an input string `s`/`$s`\
  \ by replacing each character in `s`/`$s` with a number representing the number\
  \ of times that character occurs in `s`/`$s` and separating each number with the\
  \ character(s) `sep`/`$sep`."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def freq_seq (s : String) (sep : String) : String := sorry \n\n\
  def String.count (s : String) (c : Char) : Nat := sorry\n"
"vc-theorems": "theorem freq_seq_length {s sep : String} (h1 : s.length > 0) (h2 :\
  \ sep.length = 1) :\n  (freq_seq s sep).length > 0 := sorry\n\n\ntheorem freq_seq_counts\
  \ {s sep : String} (h1 : s.length > 0) (h2 : sep.length = 1) \n  (i : Nat) (hi :\
  \ i < s.length) :\n  let c := s.data[i]\n  s.count c > 0 := sorry\n\n\ntheorem freq_seq_nonneg\
  \ {s sep : String} (h1 : s.length > 0) (h2 : sep.length = 1) :\n  ∀ c : Char, c\
  \ ∈ s.data → s.count c ≥ 0 := sorry\n\n\ntheorem freq_seq_deterministic {s sep :\
  \ String} (h1 : s.length > 0) (h2 : sep.length = 1) :\n  freq_seq s sep = freq_seq\
  \ s sep := sorry\n\n/--\ninfo: '1-1-3-3-2-1-1-2-1-3-1'\n-/\n#guard_msgs in\n#eval\
  \ freq_seq \"hello world\" \"-\"\n\n/--\ninfo: '1:7:7:7:7:7:7:7'\n-/\n#guard_msgs\
  \ in\n#eval freq_seq \"19999999\" \":\"\n\n/--\ninfo: '3x3x3x2x2x1'\n-/\n#guard_msgs\
  \ in\n#eval freq_seq \"^^^**$\" \"x\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
