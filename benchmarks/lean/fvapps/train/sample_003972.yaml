vc-description: |-
  Create a function `isAlt()` that accepts a string as an argument and validates whether the vowels (a, e, i, o, u) and consonants are in alternate order.

  ```python
  is_alt("amazon")
  // true
  is_alt("apple")
  // false
  is_alt("banana")
  // true
  ```

  Arguments consist of only lowercase letters.
vc-preamble: |
  import Imports.AllImports

  def VOWELS : List Char := ['a', 'e', 'i', 'o', 'u']

  def isVowel (c : Char) : Bool := c ∈ VOWELS 
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def is_alt (s : String) : Bool := sorry

  theorem matches_reference_implementation (s : String) : 
    is_alt s = (if s.isEmpty then true
               else let pairs := s.toList.zip (s.toList.tail!)
                    pairs.all (fun p => isVowel p.fst ≠ isVowel p.snd)) := 
    sorry
vc-theorems: |
  theorem consecutive_vowels_false {s : String} (h : s.length ≥ 2) 
    (h2 : ∀ c ∈ s.toList, isVowel c) : 
    ¬(is_alt s) :=
    sorry


  theorem consecutive_consonants_false {s : String} (h : s.length ≥ 2)
    (h2 : ∀ c ∈ s.toList, ¬(isVowel c)) :
    ¬(is_alt s) := 
    sorry


  theorem alternating_pattern_true {s : String} (h : ∀ c ∈ s.toList, ¬(isVowel c)) :
    let result := s.toList.enum.map (fun (i, c) => if i % 2 = 0 then c else 'a')
    is_alt (String.mk result) :=
    sorry

  /--
  info: True
  -/
  #guard_msgs in
  #eval is_alt "amazon"

  /--
  info: False
  -/
  #guard_msgs in
  #eval is_alt "apple"

  /--
  info: True
  -/
  #guard_msgs in
  #eval is_alt "banana"
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
