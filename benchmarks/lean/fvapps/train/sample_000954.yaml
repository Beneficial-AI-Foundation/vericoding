"vc-description": "Omy and Ish were learning the pattern printing. In order to learn\
  \ they give themselves a task. In this task they are given a string and they have\
  \ to form a pyramid with the pattern as follows:\nRowNumber are one based indexed.\n\
  - \nIf (RowNumber % 3 == 0) then string is written in left to right while in other\
  \ cases it is written in right to left order.\n- \nif the string end it will be\
  \ started again and end of the pyramid need not to be the end of string.\nFor eg:\
  \ string is “$CODING$” and height of pyramid is “$5$”\nC\nD O\nI N G\nI D O C\n\
  D O C G N\n\nOmi will be asked $Q$ queries and he has to tell the frequency of a\
  \ character  C in that particular row $R$ of pyramid.\n\n-----Input:-----\n- First\
  \ line will contain $N$, height of pyramid.\n- Next line contain a string consists\
  \ only of Uppercase English Alphabets, length not exceed $10^6$\n- Third line contain\
  \ a single integer $Q$, the number of queries to be asked.\n- Each query contain\
  \ two space separated integers, $R$ and $C$, where $R$ is the row number and $C$\
  \ is the character.\n\n-----Output:-----\n- For each query, output in a single line\
  \ the frequency of the alphabet in the given row.\n\n-----Constraints:-----\n- $1$\
  \ $\\leq$ $N$ $\\leq$ $10$^$18$\n- $1$ $\\leq$ $Q$ $\\leq$ $50000$\n- $1 \\leq R\
  \ \\leq N$\n- $A \\leq C \\leq Z$\n\n-----Sample Input:-----\n5\nCODING\n2\n1 C\n\
  2 D\n\n-----Sample Output:-----\n1\n1"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_char_frequency (height : Nat) (s : String) (queries :\
  \ List (String × Char)) : List Nat :=\n  sorry\n"
"vc-theorems": "theorem first_row_matches_string {height : Nat} {s : String} {queries\
  \ : List (String × Char)} \n  (h1 : height > 0) (h2 : s.length > 0) (h3 : queries.length\
  \ > 0)\n  (h4 : ∀ q ∈ queries, q.1 = \"1\" ∧ q.2.isUpper) :\n  ∀ (i : Nat) (hi :\
  \ i < queries.length),\n    let query := queries[i]'hi\n    let result := find_char_frequency\
  \ height s queries\n    let count := result[i]'(by \n      have : result.length\
  \ = queries.length := sorry\n      exact this ▸ hi)\n    count = (List.filter (·\
  \ = query.2) (s.take 1).toList).length :=\nsorry\n\n\ntheorem counts_nonnegative\
  \ {height : Nat} {s : String} {queries : List (String × Char)}\n  (h1 : height >\
  \ 0) (h2 : s.length > 0) (h3 : queries.length > 0)\n  (h4 : ∀ q ∈ queries, q.2.isUpper)\
  \ :\n  let result := find_char_frequency height s queries\n  (∀ x ∈ result, x ≥\
  \ 0) ∧ result.length = queries.length :=\nsorry\n\n\ntheorem known_pattern {height\
  \ : Nat} {s : String}\n  (h1 : height > 0) (h2 : s = \"ABC\") :\n  find_char_frequency\
  \ height s [(\"1\", 'A'), (\"2\", 'B'), (\"3\", 'C')] = [1, 1, 1] :=\nsorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
