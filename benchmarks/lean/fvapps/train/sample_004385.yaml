"vc-description": "# Task\n Smartphones software security has become a growing concern\
  \ related to mobile telephony. It is particularly important as it relates to the\
  \ security of available personal information.\n \n For this reason, Ahmed decided\
  \ to encrypt phone numbers of contacts in such a way that nobody can decrypt them.\
  \ At first he tried encryption algorithms very complex, but the decryption process\
  \ is tedious, especially when he needed to dial a speed dial.\n\n He eventually\
  \ found the algorithm following: instead of writing the number itself, Ahmed multiplied\
  \ by 10, then adds the result to the original number.\n \n For example, if the phone\
  \ number is `123`, after the transformation, it becomes `1353`. Ahmed truncates\
  \ the result (from the left), so it has as many digits as the original phone number.\
  \ In this example Ahmed wrote `353` instead of `123` in his smart phone.\n\n Ahmed\
  \ needs a program to recover the original phone number from number stored on his\
  \ phone. The program return \"impossible\" if the initial number can not be calculated.\n\
  \ \n Note: There is no left leading zero in either the input or the output; Input\
  \ `s` is given by string format, because it may be very huge ;-)\n\n# Example\n\n\
  \ For `s=\"353\"`, the result should be `\"123\"`\n \n ```\n    1230\n  +  123\n\
  \  .......\n  = 1353  \n  \n  truncates the result to 3 digit -->\"353\"\n  \n \
  \ So the initial number is \"123\"\n ```\n For `s=\"123456\"`, the result should\
  \ be `\"738496\"`\n \n ```\n    7384960\n  +  738496\n  .........\n  = 8123456\n\
  \  \n  truncates the result to 6 digit -->\"123456\"\n  \n  So the initial number\
  \ is \"738496\"\n ```\n For `s=\"4334\"`, the result should be `\"impossible\"`\n\
  \ \n Because no such a number can be encrypted to `\"4334\"`.\n\n# Input/Output\n\
  \n\n - `[input]` string `s`\n\n  string presentation of n with `1 <= n <= 10^100`\n\
  \n\n - `[output]` a string\n\n  The original phone number before encryption, or\
  \ `\"impossible\"` if the initial number can not be calculated."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def decrypt (s : String) : String := sorry \n\ndef encrypt (num\
  \ : String) : String := sorry\n"
"vc-theorems": "theorem test_decrypt_preserves_digits (s : String)\n  (h1 : ∀ c ∈\
  \ s.data, '0' ≤ c ∧ c ≤ '9') \n  (h2 : s.length ≤ 10)\n  (h3 : s.length > 0)\n \
  \ (h4 : s.data[0] ≠ '0') :\n  let result := decrypt s\n  result ≠ \"impossible\"\
  \ →\n  (∀ c ∈ result.data, '0' ≤ c ∧ c ≤ '9') ∧\n  encrypt result = s := sorry\n\
  \n\ntheorem test_decrypt_basic_properties (n : Nat) \n  (h : n ≤ 9999) :\n  let\
  \ s := toString n\n  let result := decrypt s\n  result ≠ \"impossible\" →\n  (∀\
  \ c ∈ result.data, '0' ≤ c ∧ c ≤ '9') ∧ \n  result.data.length > 0 ∧\n  (result.data.length\
  \ > 0 → result.data[0]! ≠ '0') := sorry\n\n/--\ninfo: '123'\n-/\n#guard_msgs in\n\
  #eval decrypt \"353\"\n\n/--\ninfo: '738496'\n-/\n#guard_msgs in\n#eval decrypt\
  \ \"123456\"\n\n/--\ninfo: 'impossible'\n-/\n#guard_msgs in\n#eval decrypt \"4334\"\
  \n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
