"vc-description": "Given an integer array, find three numbers whose product is maximum\
  \ and output the maximum product.\n\nExample 1:\n\nInput: [1,2,3]\nOutput: 6\n\n\
  \n\nExample 2:\n\nInput: [1,2,3,4]\nOutput: 24\n\n\n\nNote:\n\nThe length of the\
  \ given array will be in range [3,104] and all elements are in the range [-1000,\
  \ 1000].\nMultiplication of any three numbers in the input won't exceed the range\
  \ of 32-bit signed integer."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def maximum_product (nums : List Int) : Int := sorry\n\n\n\n\n\n\
  \n\ntheorem maximum_product_scales {nums : List Int} (h : nums.length ≥ 3) (scale\
  \ : Int) (h2 : scale > 0) :\n  maximum_product (nums.map (· * scale)) = maximum_product\
  \ nums * (scale * scale * scale) := sorry"
"vc-theorems": "/--\ninfo: 6\n-/\n#guard_msgs in\n#eval maximum_product [1, 2, 3]\n\
  \n/--\ninfo: 24\n-/\n#guard_msgs in\n#eval maximum_product [1, 2, 3, 4]\n\n/--\n\
  info: 720\n-/\n#guard_msgs in\n#eval maximum_product [-4, -3, -2, -1, 60]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
