"vc-description": "## Task:\n\nYou have to write a function `pattern` which returns\
  \ the following Pattern(See Examples) upto n number of rows. \n\n* Note:```Returning```\
  \ the pattern is not the same as ```Printing``` the pattern.\n\n### Rules/Note:\n\
  \n* The pattern should be created using only unit digits.\n* If `n < 1` then it\
  \ should return \"\" i.e. empty string.\n* `The length of each line is same`, and\
  \ is equal to the number of characters in a line i.e `n`.\n* Range of Parameters\
  \ (for the sake of CW Compiler) :\n  + `n ∈ (-50,150]`\n   \n### Examples:\n\n +\
  \ pattern(8):\n\n       88888888\n       87777777\n       87666666\n       87655555\n\
  \       87654444\n       87654333\n       87654322\n       87654321\n       \n +\
  \ pattern(17):\n   \n       77777777777777777\n       76666666666666666\n      \
  \ 76555555555555555\n       76544444444444444\n       76543333333333333\n      \
  \ 76543222222222222\n       76543211111111111\n       76543210000000000\n      \
  \ 76543210999999999\n       76543210988888888\n       76543210987777777\n      \
  \ 76543210987666666\n       76543210987655555\n       76543210987654444\n      \
  \ 76543210987654333\n       76543210987654322\n       76543210987654321\n\n\n[List\
  \ of all my katas](\"http://www.codewars.com/users/curious_db97/authored\")"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def pattern (n : Int) : String := sorry\n\ntheorem nonpositive_returns_empty\
  \ {n : Int} (h : n ≤ 0) :\n  pattern n = \"\" := sorry\n"
"vc-theorems": "theorem pattern_line_count {n : Int} (h : n > 0) : \n  ((pattern n).split\
  \ fun c ↦ c = '\\n').length = n := sorry\n\n\ntheorem pattern_line_width {n : Int}\
  \ (h : n > 0) :\n  ∀ line ∈ (pattern n).split fun c ↦ c = '\\n', line.length = n\
  \ := sorry\n\n\ntheorem pattern_first_line {n : Int} (h : n > 0) :\n  let first\
  \ := ((pattern n).split fun c ↦ c = '\\n').get! 0\n  ∀ c ∈ first.data, c = first.data[0]!\
  \ := sorry\n\n\ntheorem pattern_diagonal_decrease {n : Int} (h : n > 0) :\n  let\
  \ lines := (pattern n).split fun c ↦ c = '\\n'\n  ∀ i ∈ List.range (min n.toNat\
  \ 9),\n    let curr := (lines.get! (i+1)).data[i+1]!.toString.toNat!\n    let prev\
  \ := (lines.get! i).data[i]!.toString.toNat!\n    curr = prev - 1 ∨ (prev = 0 ∧\
  \ curr = 9) := sorry\n\n\ntheorem pattern_all_digits {n : Int} (h : n > 0) :\n \
  \ let lines := (pattern n).split fun c ↦ c = '\\n'\n  ∀ line ∈ lines, ∀ c ∈ line.data,\
  \ c.isDigit := sorry\n\n\ntheorem first_row_matches_input {n : Int} (h1 : n > 0)\
  \ (h2 : n ≤ 9) :\n  let first := ((pattern n).split fun c ↦ c = '\\n').get! 0\n\
  \  ∀ c ∈ first.data, c.toString.toNat! = n := sorry\n\n/--\ninfo: '333\\n322\\n321'\n\
  -/\n#guard_msgs in\n#eval pattern 3\n\n/--\ninfo: ''\n-/\n#guard_msgs in\n#eval\
  \ pattern 0\n\n/--\ninfo: expected\n-/\n#guard_msgs in\n#eval pattern 7\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
