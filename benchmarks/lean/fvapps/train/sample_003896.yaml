"vc-description": "In this kata you will create a function that takes a list of non-negative\
  \ integers and strings and returns a new list with the strings filtered out.\n\n\
  ### Example\n\n```python\nfilter_list([1,2,'a','b']) == [1,2]\nfilter_list([1,'a','b',0,15])\
  \ == [1,0,15]\nfilter_list([1,2,'aasf','1','123',123]) == [1,2,123]\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def filter_list {α : Type} (lst : List α) : List α := sorry\n\n\
  theorem filter_list_removes_strings (lst : List (Int ⊕ String)) :\n  let result\
  \ := filter_list lst\n  (∀ x ∈ result, (∃ n : Int, x = Sum.inl n)) ∧\n  (∀ x ∈ result,\
  \ x ∈ lst) ∧\n  (List.length result = List.length (List.filter (fun x => match x\
  \ with\n    | Sum.inl _ => true\n    | Sum.inr _ => false) lst)) := sorry\n"
"vc-theorems": "theorem filter_list_preserves_numbers_only (lst : List Int) :\n  filter_list\
  \ lst = lst := sorry\n\n\ntheorem filter_list_removes_all_strings (lst : List String)\
  \ :\n  filter_list lst = [] := sorry\n\n\ntheorem filter_list_maintains_order (lst\
  \ : List Int) :\n  filter_list lst = lst := sorry\n\n/--\ninfo: [1, 2]\n-/\n#guard_msgs\
  \ in\n#eval filter_list [1, 2, \"a\", \"b\"]\n\n/--\ninfo: [1, 0, 15]\n-/\n#guard_msgs\
  \ in\n#eval filter_list [1, \"a\", \"b\", 0, 15]\n\n/--\ninfo: [1, 2, 123]\n-/\n\
  #guard_msgs in\n#eval filter_list [1, 2, \"aasf\", \"1\", \"123\", 123]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
