"vc-description": "Alex decided to go on a touristic trip over the country.\n\nFor\
  \ simplicity let's assume that the country has $n$ cities and $m$ bidirectional\
  \ roads connecting them. Alex lives in city $s$ and initially located in it. To\
  \ compare different cities Alex assigned each city a score $w_i$ which is as high\
  \ as interesting city seems to Alex.\n\nAlex believes that his trip will be interesting\
  \ only if he will not use any road twice in a row. That is if Alex came to city\
  \ $v$ from city $u$, he may choose as the next city in the trip any city connected\
  \ with $v$ by the road, except for the city $u$.\n\nYour task is to help Alex plan\
  \ his city in a way that maximizes total score over all cities he visited. Note\
  \ that for each city its score is counted at most once, even if Alex been there\
  \ several times during his trip.\n\n\n-----Input-----\n\nFirst line of input contains\
  \ two integers $n$ and $m$, ($1 \\le n \\le 2 \\cdot 10^5$, $0 \\le m \\le 2 \\\
  cdot 10^5$) which are numbers of cities and roads in the country.\n\nSecond line\
  \ contains $n$ integers $w_1, w_2, \\ldots, w_n$ ($0 \\le w_i \\le 10^9$) which\
  \ are scores of all cities.\n\nThe following $m$ lines contain description of the\
  \ roads. Each of these $m$ lines contains two integers $u$ and $v$ ($1 \\le u, v\
  \ \\le n$) which are cities connected by this road.\n\nIt is guaranteed that there\
  \ is at most one direct road between any two cities, no city is connected to itself\
  \ by the road and, finally, it is possible to go from any city to any other one\
  \ using only roads.\n\nThe last line contains single integer $s$ ($1 \\le s \\le\
  \ n$), which is the number of the initial city.\n\n\n-----Output-----\n\nOutput\
  \ single integer which is the maximum possible sum of scores of visited cities.\n\
  \n\n-----Examples-----\nInput\n5 7\n2 2 8 6 9\n1 2\n1 3\n2 4\n3 2\n4 5\n2 5\n1 5\n\
  2\n\nOutput\n27\n\nInput\n10 12\n1 7 1 9 3 3 6 30 1 10\n1 2\n1 3\n3 5\n5 7\n2 3\n\
  5 4\n6 9\n4 6\n3 7\n6 8\n9 4\n9 10\n6\n\nOutput\n61"
"vc-preamble": "import Imports.AllImports\n\ndef List.sum [Add α] : List α → α \n\
  \  | [] => sorry\n  | (x::xs) => x + List.sum xs\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def max_city_score (n : Nat) (m : Nat) (weights : List Nat) (roads\
  \ : List (Nat × Nat)) (start : Nat) : Nat :=\nsorry\n"
"vc-theorems": "theorem max_city_score_lower_bound (n : Nat) (weights : List Nat)\
  \ (start : Nat)\n  (h1 : n > 0)\n  (h2 : weights.length = n) \n  (h3 : start > 0)\n\
  \  (h4 : start ≤ n) :\n  let roads := List.range (n-1) |>.map (λ i => (i+1, i+2))\n\
  \  let result := max_city_score n (n-1) weights roads start\n  result ≥ weights[start-1]\
  \ := sorry\n\n\ntheorem max_city_score_upper_bound (n : Nat) (weights : List Nat)\
  \ (start : Nat)\n  (h1 : n > 0)\n  (h2 : weights.length = n)\n  (h3 : start > 0)\n\
  \  (h4 : start ≤ n) :\n  let roads := List.range (n-1) |>.map (λ i => (i+1, i+2))\n\
  \  let result := max_city_score n (n-1) weights roads start\n  result ≤ List.sum\
  \ weights := sorry\n\n\ntheorem single_city_case (weight : Nat) :\n  max_city_score\
  \ 1 0 [weight] [] 1 = weight := sorry\n\n\ntheorem line_graph_path_sum (n : Nat)\
  \ (weights : List Nat) (start : Nat)\n  (h1 : n ≥ 2)\n  (h2 : weights.length = n)\n\
  \  (h3 : start > 0)\n  (h4 : start ≤ n) :\n  let roads := List.range (n-1) |>.map\
  \ (λ i => (i+1, i+2))\n  let result := max_city_score n (n-1) weights roads start\n\
  \  let path_sum := List.sum (List.drop (start-1) weights)\n  result ≥ path_sum :=\
  \ sorry\n\n/--\ninfo: 27\n-/\n#guard_msgs in\n#eval max_city_score 5 7 [2, 2, 8,\
  \ 6, 9] [(1, 2), (1, 3), (2, 4), (3, 2), (4, 5), (2, 5), (1, 5)] 2\n\n/--\ninfo:\
  \ 61\n-/\n#guard_msgs in\n#eval max_city_score 10 12 [1, 7, 1, 9, 3, 3, 6, 30, 1,\
  \ 10] [(1, 2), (1, 3), (3, 5), (5, 7), (2, 3), (5, 4), (6, 9), (4, 6), (3, 7), (6,\
  \ 8), (9, 4), (9, 10)] 6\n\n/--\ninfo: 1000000000\n-/\n#guard_msgs in\n#eval max_city_score\
  \ 1 0 [1000000000] [] 1\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
