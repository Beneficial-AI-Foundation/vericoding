"vc-description": "\"If you didn't copy assignments during your engineering course,\
  \ did you even do engineering?\"\nThere are $Q$ students in Chef's class. Chef's\
  \ teacher has given the students a simple assignment:\nWrite a function that takes\
  \ as arguments an array $A$ containing only unique elements and a number $X$ guaranteed\
  \ to be present in the array and returns the ($1$-based) index of the element that\
  \ is equal to $X$.\nThe teacher was expecting a linear search algorithm, but since\
  \ Chef is such an amazing programmer, he decided to write the following binary search\
  \ function:\ninteger binary_search(array a, integer n, integer x):\ninteger low,\
  \ high, mid\nlow := 1\nhigh := n\nwhile low ≤ high:\nmid := (low + high) / 2\nif\
  \ a[mid] == x:\nbreak\nelse if a[mid] is less than x:\nlow := mid+1\nelse:\nhigh\
  \ := mid-1\nreturn mid\n\nAll of Chef's classmates have copied his code and submitted\
  \ it to the teacher.\nChef later realised that since he forgot to sort the array,\
  \ the binary search algorithm may not work. Luckily, the teacher is tired today,\
  \ so she asked Chef to assist her with grading the codes. Each student's code is\
  \ graded by providing an array $A$ and an integer $X$ to it and checking if the\
  \ returned index is correct. However, the teacher is lazy and provides the exact\
  \ same array to all codes. The only thing that varies is the value of $X$.\nChef\
  \ was asked to type in the inputs. He decides that when typing in the input array\
  \ for each code, he's not going to use the input array he's given, but an array\
  \ created by swapping some pairs of elements of this original input array. However,\
  \ he cannot change the position of the element that's equal to $X$ itself, since\
  \ that would be suspicious.\nFor each of the $Q$ students, Chef would like to know\
  \ the minimum number of swaps required to make the algorithm find the correct answer.\n\
  \n-----Input-----\n- The first line of the input contains a single integer $T$ denoting\
  \ the number of test cases. The description of $T$ test cases follows.\n- The first\
  \ line of each test case contains two space-separated integers $N$ and $Q$ denoting\
  \ the number of elements in the array and the number of students.\n- The second\
  \ line contains $N$ space-separated integers $A_1, A_2, \\dots, A_N$.\n- The following\
  \ $Q$ lines describe queries. Each of these lines contains a single integer $X$.\n\
  \n-----Output-----\nFor each query, print a single line containing one integer —\
  \ the minimum required number of swaps, or $-1$ if it is impossible to make the\
  \ algorithm find the correct answer. (Do you really think Chef can fail?)\n\n-----Constraints-----\n\
  - $1 \\le T \\le 10$\n- $1 \\le N, Q \\le 10^5$\n- $1 \\le A_i \\le 10^9$ for each\
  \ valid $i$\n- $1 \\le X \\le 10^9$\n- all elements of $A$ are pairwise distinct\n\
  - for each query, $X$ is present in $A$\n- sum of $N$ over all test cases $\\le\
  \ 5\\cdot10^5$\n- sum of $Q$ over all test cases $\\le 5\\cdot10^5$\n\n-----Subtasks-----\n\
  Subtask #1 (20 points): $1 \\le N \\le 10$\nSubtask #2 (30 points):\n- $1 \\le A_i\
  \ \\le 10^6$ for each valid $i$\n- $1 \\le X \\le 10^6$\nSubtask #3 (50 points):\
  \ original constraints\n\n-----Example Input-----\n1\n7 7\n3 1 6 7 2 5 4\n1\n2\n\
  3\n4\n5\n6\n7\n\n-----Example Output-----\n0\n1\n1\n2\n1\n0\n0\n\n-----Explanation-----\n\
  Example case 1:\n- Query 1: The algorithm works without any swaps.\n- Query 2: One\
  \ solution is to swap $A_2$ and $A_4$.\n- Query 3: One solution is to swap $A_2$\
  \ and $A_6$.\n- Query 4: One solution is to swap $A_2$ with $A_4$ and $A_5$ with\
  \ $A_6$.\n- Query 5: One solution is to swap $A_2$ and $A_4$.\n- Query 6: The algorithm\
  \ works without any swaps.\n- Query 7: The algorithm works without any swaps."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_min_swaps (arr : List Int) (queries : List Int) : List\
  \ Int :=\n  sorry\n"
"vc-theorems": "theorem small_arrays_swaps_bounded {arr : List Int} (h : arr.Nodup)\
  \ \n  (h_size : arr.length ≤ 10) (h_non_empty : arr.length > 0) :\n  let result\
  \ := find_min_swaps arr arr\n  ∀ x ∈ result, x = -1 ∨ x < arr.length :=\n  sorry\
  \ \n\n\ntheorem basic_properties_result_length {arr : List Int} {queries : List\
  \ Int}\n  (h : arr.Nodup) (h_queries_size : queries.length ≤ 10) \n  (h_queries_non_empty\
  \ : queries.length > 0)\n  (h_valid_queries : ∀ q ∈ queries, q ∈ arr) :\n  let result\
  \ := find_min_swaps arr queries\n  result.length = queries.length :=\n  sorry\n\n\
  \ntheorem basic_properties_valid_results {arr : List Int} {queries : List Int}\n\
  \  (h : arr.Nodup) (h_queries_size : queries.length ≤ 10)\n  (h_queries_non_empty\
  \ : queries.length > 0) \n  (h_valid_queries : ∀ q ∈ queries, q ∈ arr) :\n  let\
  \ result := find_min_swaps arr queries\n  ∀ x ∈ result, x = -1 ∨ x ≥ 0 :=\n  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
