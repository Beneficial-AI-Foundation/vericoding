"vc-description": "Linked Lists - Length & Count\n\nImplement Length() to count the\
  \ number of nodes in a linked list.\nImplement Count() to count the occurrences\
  \ of an integer in a linked list.\n\n\nI've decided to bundle these two functions\
  \ within the same Kata since they are both very similar.\n\nThe `push()`/`Push()`\
  \ and `buildOneTwoThree()`/`BuildOneTwoThree()` functions do not need to be redefined.\n"
"vc-preamble": "import Imports.AllImports\n\ndef length {α : Type} : Node α → Nat\n\
  \  | Node.nil => 0\n  | Node.cons _ next => 1 + length next \n  "
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count {α : Type} [BEq α] : Node α → α → Nat \n  | Node.nil,\
  \ _ => 0\n  | Node.cons x next, val => \n    let rest := count next val\n    if\
  \ x == val then 1 + rest else rest\n"
"vc-theorems": "theorem length_equals_list_length {α : Type} (xs : List α) :\n  length\
  \ (xs.foldl (fun acc x => Node.cons x acc) Node.nil) = xs.length :=\nsorry\n\n\n\
  theorem count_equals_list_count {α : Type} [BEq α] (xs : List α) (val : α) :\n \
  \ count (xs.foldl (fun acc x => Node.cons x acc) Node.nil) val = xs.count val :=\n\
  sorry \n\n\ntheorem count_none_is_zero {α : Type} [BEq α] (node : Node α) (default\
  \ : α) :\n  count node default = 0 :=\nsorry\n\n\ntheorem count_leq_length {α :\
  \ Type} [BEq α] (node : Node α) (val : α) :\n  count node val ≤ length node :=\n\
  sorry\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval length None\n\n/--\ninfo: 0\n-/\n\
  #guard_msgs in\n#eval count None 1\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval length\
  \ Node(1)\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval count node 1\n\n/--\ninfo:\
  \ 0\n-/\n#guard_msgs in\n#eval count node 2\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n\
  #eval length test_list_one_two_three()\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval\
  \ count list123 1\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval count list123 2\n\n\
  /--\ninfo: 0\n-/\n#guard_msgs in\n#eval count list123 4\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
