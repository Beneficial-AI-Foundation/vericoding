"vc-description": "Dee is lazy but she's kind and she likes to eat out at all the\
  \ nice restaurants and gastropubs in town. To make paying quick and easy she uses\
  \ a simple mental algorithm she's called The Fair %20 Rule. She's gotten so good\
  \ she can do this in a few seconds and it always impresses her dates but she's perplexingly\
  \ still single. Like you probably. \n\nThis is how she does it:\n\n - She rounds\
  \ the price `P` at the tens place e.g:\n   - 25 becomes 30\n   - 24 becomes 20\n\
  \   - 5 becomes 10\n   - 4 becomes 0\n - She figures out the base tip `T` by dropping\
  \ the singles place digit e.g:\n   - when `P = 24` she rounds to 20 drops 0 `T =\
  \ 2`\n   - `P = 115` rounds to 120 drops 0 `T = 12`\n   - `P = 25` rounds to 30\
  \ drops 0 `T = 3`\n   - `P = 5` rounds to 10 drops 0 `T = 1`\n   - `P = 4` rounds\
  \ to 0 `T = 0`\n - She then applies a 3 point satisfaction rating `R` to `T` i.e:\n\
  \   - When she's satisfied: `R = 1` and she'll add 1 to `T`\n   - Unsatisfied: `R\
  \ = 0` and she'll subtract 1 from `T`\n   - Appalled: `R = -1` she'll divide `T`\
  \ by 2, **rounds down** and subtracts 1\n \n## Your Task\n\nImplement a method `calc_tip`\
  \ that takes two integer arguments for price `p` \n\nwhere `1 <= p <= 1000` and\
  \ a rating `r` which is one of `-1, 0, 1`.\n\nThe return value `T` should be a non\
  \ negative integer.\n\n*Note: each step should be done in the order listed.*\n\n\
  Dee always politely smiles and says \"Thank you\" on her way out. Dee is nice. Be\
  \ like Dee."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calc_tip (price : Int) (rating : Int) : Int := sorry\n\ntheorem\
  \ tip_always_non_negative (price : Int) (rating : Int) \n  (h₁ : price ≥ 0) (h₂\
  \ : price ≤ 10000) (h₃ : rating ≥ -1) (h₄ : rating ≤ 1) : \n  calc_tip price rating\
  \ ≥ 0 := sorry\n"
"vc-theorems": "theorem higher_rating_higher_tip_1 (price : Int) \n  (h₁ : price ≥\
  \ 0) (h₂ : price ≤ 10000) :\n  calc_tip price 1 ≥ calc_tip price 0 := sorry\n\n\n\
  theorem higher_rating_higher_tip_2 (price : Int)\n  (h₁ : price ≥ 0) (h₂ : price\
  \ ≤ 10000) :\n  calc_tip price 0 ≥ calc_tip price (-1) := sorry\n\n\ntheorem tip_scales_with_price\
  \ (price : Int) (rating : Int)\n  (h₁ : price > 100) (h₂ : price ≤ 10000) (h₃ :\
  \ rating ≥ -1) (h₄ : rating ≤ 1) :\n  calc_tip price rating ≥ calc_tip (price /\
  \ 2) rating := sorry\n\n\ntheorem tip_rounding_consistency (price : Int) (h₁ : price\
  \ ≥ 0) (h₂ : price ≤ 1000) :\n  let rounded_down := calc_tip (price - (price % 10))\
  \ 0\n  let rounded_up := calc_tip (price + (10 - price % 10)) 0\n  let actual :=\
  \ calc_tip price 0\n  actual = rounded_down ∨ actual = rounded_up := sorry\n\n/--\n\
  info: 3\n-/\n#guard_msgs in\n#eval calc_tip 24 1\n\n/--\ninfo: 2\n-/\n#guard_msgs\
  \ in\n#eval calc_tip 25 0\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval calc_tip 144\
  \ -1\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
