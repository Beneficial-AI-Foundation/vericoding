"vc-description": "Take the following IPv4 address: `128.32.10.1`\n\nThis address\
  \ has 4 octets where each octet is a single byte (or 8 bits).\n\n* 1st octet `128`\
  \ has the binary representation: `10000000`\n* 2nd octet `32` has the binary representation:\
  \ `00100000`\n* 3rd octet `10` has the binary representation: `00001010`\n* 4th\
  \ octet `1` has the binary representation: `00000001`\n\nSo `128.32.10.1` == `10000000.00100000.00001010.00000001`\n\
  \nBecause the above IP address has 32 bits, we can represent it as the unsigned\
  \ 32 bit number: `2149583361`\n\nComplete the function that takes an unsigned 32\
  \ bit number and returns a string representation of its IPv4 address.\n\n## Examples\n\
  ```\n2149583361 ==> \"128.32.10.1\"\n32         ==> \"0.0.0.32\"\n0          ==>\
  \ \"0.0.0.0\"\n```"
"vc-preamble": "import Imports.AllImports\n\ndef int32_to_ip (n : Nat) : String :=\
  \ sorry\n\ndef toOctets (n : Nat) : List Nat := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def countChar (s : String) (c : Char) : Nat :=\n  s.data.filter\
  \ (· = c) |>.length\n"
"vc-theorems": "theorem int32_to_ip_has_three_dots (n : Nat)\n    (h : n < 2^32) :\n\
  \    let result := int32_to_ip n\n    (countChar result '.' = 3) := sorry\n\n\n\
  theorem int32_to_ip_octets_valid (n : Nat) \n    (h : n < 2^32) :\n    let octets\
  \ := toOctets n\n    (octets.length = 4 ∧ \n     octets.all (fun x => x ≤ 255))\
  \ := sorry\n\n\ntheorem int32_to_ip_preserves_value (n : Nat)\n    (h : n < 2^32)\
  \ :\n    let octets := toOctets n\n    let reconstructed := (octets.get! 0) * 256^3\
  \ + \n                        (octets.get! 1) * 256^2 +\n                      \
  \  (octets.get! 2) * 256^1 +\n                        (octets.get! 3) * 256^0\n\
  \    (reconstructed = n) := sorry\n\n\ntheorem int32_to_ip_format (octets : List\
  \ Nat)\n    (h1 : octets.length = 4)\n    (h2 : octets.all (fun x => x ≤ 255)) :\n\
  \    let n := (octets.get! 0) * 256^3 + \n             (octets.get! 1) * 256^2 +\n\
  \             (octets.get! 2) * 256^1 + \n             (octets.get! 3) * 256^0\n\
  \    (int32_to_ip n = String.intercalate \".\" (octets.map toString)) := sorry\n\
  \n/--\ninfo: '128.114.17.104'\n-/\n#guard_msgs in\n#eval int32_to_ip 2154959208\n\
  \n/--\ninfo: '0.0.0.0'\n-/\n#guard_msgs in\n#eval int32_to_ip 0\n\n/--\ninfo: '128.32.10.1'\n\
  -/\n#guard_msgs in\n#eval int32_to_ip 2149583361\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
