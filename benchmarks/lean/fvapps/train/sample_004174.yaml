"vc-description": "Section numbers are strings of dot-separated integers. The highest\
  \ level sections (chapters) are numbered 1, 2, 3, etc. Second level sections are\
  \ numbered 1.1, 1.2, 1.3, 2.1, 2.2, 2.3, etc. Next level sections are numbered 1.1.1,\
  \ 1.1.2, 1.1.2, 1.2.1, 1.2.2, erc. There is no bound on the number of sections a\
  \ document may have, nor is there any bound on the number of levels. \n\nA section\
  \ of a certain level may appear directly inside a section several levels higher\
  \ without the levels between. For example, section 1.0.1 may appear directly under\
  \ section 1, without there being any level 2 section. Section 1.1 comes after section\
  \ 1.0.1. Sections with trailing \".0\" are considered to be the same as the section\
  \ with the trailing \".0\" truncated. Thus, section 1.0 is the same as section 1,\
  \ and section 1.2.0.0 is the same as section 1.2. \n\n```if:python\nWrite a function\
  \ `compare(section1, section2)` that returns `-1`, `0`, or `1` depending on whether\
  \ `section1` is before, same as, or after `section2` respectively.\n```\n```if:javascript\n\
  Write a function `cmp(section1, section2)` that returns `-1`, `0`, or `1` depending\
  \ on whether `section1` is before, same as, or after `section2` respectively.\n\
  ```\n```if:haskell\nWrite a function `cmp section1 section2` that returns `LT`,\
  \ `EQ` or `GT` depending on whether `section1` is before, same as, or after `section2`\
  \ respectively.\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def compare (v1 v2 : String) : Int := sorry\n\n@[simp] theorem\
  \ compare_symmetry {v1 v2 : String} :\n  VersionCompare.compare v1 v2 = -(VersionCompare.compare\
  \ v2 v1) := sorry\n\n@[simp] theorem compare_identity {v : String} :\n  VersionCompare.compare\
  \ v v = 0 := sorry\n"
"vc-theorems": "theorem trailing_zeros_ignored {v : String} :\n  VersionCompare.compare\
  \ v (v ++ \".0\") = 0 ∧ \n  VersionCompare.compare v (v ++ \".0.0\") = 0 := sorry\n\
  \n\ntheorem compare_transitivity {v1 v2 v3 : String} :\n  VersionCompare.compare\
  \ v1 v2 ≥ 0 → \n  VersionCompare.compare v2 v3 ≥ 0 → \n  VersionCompare.compare\
  \ v1 v3 ≥ 0 := sorry\n\n\ntheorem compare_returns_valid {v1 v2 : String} :\n  VersionCompare.compare\
  \ v1 v2 = -1 ∨ \n  VersionCompare.compare v1 v2 = 0 ∨ \n  VersionCompare.compare\
  \ v1 v2 = 1 := sorry\n\nend VersionCompare\n\n/--\ninfo: -1\n-/\n#guard_msgs in\n\
  #eval compare \"1\" \"2\"\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval compare \"\
  3\" \"3.0.0\"\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval compare \"1.2.3.4\" \"\
  1.2.3.4\"\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval compare \"1.2.1\" \"1.2.0\"\
  \n\n/--\ninfo: -1\n-/\n#guard_msgs in\n#eval compare \"3.0.1\" \"3.1\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
