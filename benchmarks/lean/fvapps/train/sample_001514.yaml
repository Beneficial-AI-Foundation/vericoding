"vc-description": "The chef is placing the laddus on the large square plat. The plat\
  \ has the side of length N. Each laddu takes unit sq.unit area. Cheffina comes and\
  \ asks the chef one puzzle to the chef as, how many squares can be formed in this\
  \ pattern with all sides of new square are parallel to the original edges of the\
  \ plate.\n\n-----Input:-----\n- First-line will contain $T$, the number of test\
  \ cases. Then the test cases follow. \n- Each test case contains a single line of\
  \ input, one integer $N$. \n\n-----Output:-----\nFor each test case, output in a\
  \ single line answer as maximum squares on plate satisfying the condition.\n\n-----Constraints-----\n\
  - $1 \\leq T \\leq 1000$\n- $1 \\leq N \\leq 10^5$\n\n-----Sample Input:-----\n\
  2\n1\n2 \n\n-----Sample Output:-----\n1\n5\n\n-----EXPLANATION:-----\nFor 1) Only\
  \ 1 Square\nFor 2) 4 squares with area 1 sq.unit\n1 square with area 4 sq.unit"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_squares (n : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem count_squares_monotonic (n : Nat) (h : n > 0) :\n  count_squares\
  \ (n + 1) > count_squares n :=\n  sorry\n\n\ntheorem count_squares_positive (n :\
  \ Nat) (h : n > 0) :\n  count_squares n > 0 :=\n  sorry\n\n\ntheorem count_squares_base_cases\
  \ :\n  count_squares 1 = 1 ∧ count_squares 2 = 5 :=\n  sorry\n\n\ntheorem count_squares_min_bound\
  \ (n : Nat) (h : n > 0) :\n  count_squares n ≥ n * n :=\n  sorry\n\n/--\ninfo: 1\n\
  -/\n#guard_msgs in\n#eval count_squares 1\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n\
  #eval count_squares 2\n\n/--\ninfo: 14\n-/\n#guard_msgs in\n#eval count_squares\
  \ 3\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
