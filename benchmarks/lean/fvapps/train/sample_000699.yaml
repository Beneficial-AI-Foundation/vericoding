"vc-description": "The chef is trying to decode some pattern problems, Chef wants\
  \ your help to code it. Chef has one number K to form a new pattern. Help the chef\
  \ to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$,\
  \ the number of test cases. Then the test cases follow. \n- Each test case contains\
  \ a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test\
  \ case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n\
  - $1 \\leq K \\leq 10$\n\n-----Sample Input:-----\n4\n1\n2\n3\n4\n\n-----Sample\
  \ Output:-----\n0 \n0 \n1 1 \n0 \n1 1 \n2 3 5 \n0 \n1 1 \n2 3 5 \n8 13 21 34  \n\
  \n-----EXPLANATION:-----\nNo need, else pattern can be decode easily."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def pattern_sequence (k: Nat) : String := sorry\n\ndef parseInts\
  \ (s: String) : List Int := \n  (s.splitOn \" \").filterMap String.toInt?\n"
"vc-theorems": "theorem pattern_sequence_line_count {k: Nat} (hk: k > 0) :\n  ((pattern_sequence\
  \ k).splitOn \"\\n\").length = k := sorry\n\n\ntheorem pattern_sequence_numbers_per_line\
  \ {k: Nat} (hk: k > 0) :\n  let lines := (pattern_sequence k).splitOn \"\\n\"\n\
  \  ∀ i : Nat, i < lines.length → \n  ((lines[i]!).splitOn \" \").length = i.succ\
  \ := sorry\n\n\ntheorem pattern_sequence_valid_ints {k: Nat} (hk: k > 0) :\n  let\
  \ lines := (pattern_sequence k).splitOn \"\\n\"\n  ∀ line ∈ lines,\n  ∀ num ∈ line.splitOn\
  \ \" \",\n  String.toInt? num ≠ none := sorry\n\n\ntheorem pattern_sequence_fibonacci\
  \ {k: Nat} (hk: k > 0) :\n  let lines := (pattern_sequence k).splitOn \"\\n\"\n\
  \  let nums := lines.bind (λ line => parseInts line)\n  ∀ i, i ≥ 2 → i < nums.length\
  \ →\n    nums[i]! = nums[i-1]! + nums[i-2]! := sorry\n\n/--\ninfo: '0'\n-/\n#guard_msgs\
  \ in\n#eval pattern_sequence 1\n\n/--\ninfo: expected\n-/\n#guard_msgs in\n#eval\
  \ pattern_sequence 2\n\n/--\ninfo: expected\n-/\n#guard_msgs in\n#eval pattern_sequence\
  \ 3\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
