"vc-description": "You are given a string S consisting of lowercase English letters.\n\
  Determine whether we can turn S into a palindrome by repeating the operation of\
  \ swapping two adjacent characters. If it is possible, find the minimum required\
  \ number of operations.\n\n-----Constraints-----\n - 1 \\leq |S| \\leq 2 × 10^5\n\
  \ - S consists of lowercase English letters.\n\n-----Input-----\nInput is given\
  \ from Standard Input in the following format:\nS\n\n-----Output-----\nIf we cannot\
  \ turn S into a palindrome, print -1. Otherwise, print the minimum required number\
  \ of operations.\n\n-----Sample Input-----\neel\n\n-----Sample Output-----\n1\n\n\
  We can turn S into a palindrome by the following operation:\n - Swap the 2-nd and\
  \ 3-rd characters. S is now ele."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_palindrome_swaps (s : String) : Int :=\n  sorry\n"
"vc-theorems": "theorem makeable_palindrome_valid (s : String) :\n  solve_palindrome_swaps\
  \ s ≥ 0 ∧ solve_palindrome_swaps s ≠ -1 :=\nsorry\n\n\ntheorem unmakeable_palindrome_invalid\
  \ (s : String) :\n  solve_palindrome_swaps s = -1 :=\nsorry\n\n\ntheorem solve_palindrome_swaps_bounds\
  \ (s : String)\n  (h : solve_palindrome_swaps s ≠ -1) :\n  0 ≤ solve_palindrome_swaps\
  \ s ∧ \n  solve_palindrome_swaps s ≤ (s.length * (s.length - 1)) / 2 :=\nsorry\n\
  \n\ntheorem empty_string_zero : \n  solve_palindrome_swaps \"\" = 0 :=\nsorry\n\n\
  \ntheorem single_char_zero (c : Char) :\n  solve_palindrome_swaps (String.mk [c])\
  \ = 0 :=\nsorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval solve_palindrome_swaps\
  \ \"eel\"\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval solve_palindrome_swaps \"ataatmma\"\
  \n\n/--\ninfo: -1\n-/\n#guard_msgs in\n#eval solve_palindrome_swaps \"snuke\"\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
