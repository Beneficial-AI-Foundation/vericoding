"vc-description": "Mia is working as a waitress at a breakfast diner. She can take\
  \ up only one shift from 6 shifts a day i.e. from 10 am to 4 pm. She needs to save\
  \ 300$ after completion of the month. She works only for $D$ days in the month.\
  \ She estimates that she gets her highest tip in the first shift and the tip starts\
  \ decreasing by 2% every hour as the day prolongs. She gets a minimum wage of $X$\
  \ $ for every shift. And her highest tip in the first shift is $Y$ $. Determine\
  \ whether Mia will be able to save 300$ from her wages and tips after working $D$\
  \ days of the month. If she can, print YES, else print NO.\n\n-----Constraints-----\n\
  - 8 <= D <=30\n- 7 <= X <=30\n- 4 <= Y <= 20\n\n-----Input:-----\n- First line has\
  \ three parameters $D$, $X$ and $Y$ i.e. number of days worked, minimum wage and\
  \ highest tip.\n- Second line contains D integers indicating her shifts every $i$-th\
  \ day she has worked.\n\n-----Output:-----\n- Print YES, if Mia has saved 300$,\
  \ NO otherwise.\n\n-----Sample Input:-----\n9 17 5\n1 3 2 4 5 6 1 2 2\n\n-----Sample\
  \ Output:-----\nNO\n\n-----Explanation:-----\nNo. of days Mia worked (D) is 9, so\
  \ minimum wage she earns (X) is 17 dollars. Highest tip at first hour (Y) = 5 dollars,\
  \ 1st day she took 1st shift and 2nd day she took 3rd shift and so on. Upon calculation\
  \ we will find that Mia was not able to save 300 dollars."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def can_mia_save_300 (days: Nat) (min_wage: Nat) (highest_tip:\
  \ Nat) (shifts: List Nat) : Bool := \n  sorry\n"
"vc-theorems": "theorem earnings_increase_with_min_wage \n  (days: Nat) (min_wage:\
  \ Nat) (highest_tip: Nat) (shifts: List Nat)\n  (h1: days > 0) (h2: min_wage > 0)\
  \ :\n  can_mia_save_300 days (min_wage + 1) highest_tip (shifts.take days) ≥ \n\
  \  can_mia_save_300 days min_wage highest_tip (shifts.take days) := \n  sorry\n\n\
  \ntheorem earnings_increase_with_tips\n  (days: Nat) (min_wage: Nat) (highest_tip:\
  \ Nat) (shifts: List Nat)\n  (h1: days > 0) (h2: highest_tip > 0) :\n  can_mia_save_300\
  \ days min_wage (highest_tip + 1) (shifts.take days) ≥\n  can_mia_save_300 days\
  \ min_wage highest_tip (shifts.take days) :=\n  sorry\n\n\ntheorem earnings_increase_with_days\n\
  \  (days: Nat) (min_wage: Nat) (highest_tip: Nat) (shifts: List Nat)\n  (h1: days\
  \ > 0) (h2: shifts.length > days) :\n  can_mia_save_300 (days + 1) min_wage highest_tip\
  \ (shifts.take (days + 1)) ≥\n  can_mia_save_300 days min_wage highest_tip (shifts.take\
  \ days) :=\n  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
