"vc-description": "Given an array (arr) as an argument complete the function `countSmileys`\
  \ that should return the total number of smiling faces.  \n\nRules for a smiling\
  \ face:\n- Each smiley face must contain a valid pair of eyes. Eyes can be marked\
  \ as `:` or `;`\n- A smiley face can have a nose but it does not have to. Valid\
  \ characters for a nose are `-` or `~`\n- Every smiling face must have a smiling\
  \ mouth that should be marked with either `)` or `D`\n\nNo additional characters\
  \ are allowed except for those mentioned.  \n\n**Valid smiley face examples:** `:)\
  \ :D ;-D :~)`  \n**Invalid smiley faces:**  `;( :> :} :]`\n\n## Example\n\n```\n\
  countSmileys([':)', ';(', ';}', ':-D']);       // should return 2;\ncountSmileys([';D',\
  \ ':-(', ':-)', ';~)']);     // should return 3;\ncountSmileys([';]', ':[', ';*',\
  \ ':$', ';-D']); // should return 1;\n```\n\n## Note\n\nIn case of an empty array\
  \ return 0. You will not be tested with invalid input (input will always be an array).\
  \ Order of the face (eyes, nose, mouth) elements will always be the same."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def validSmiley (s : String) : Bool := sorry\ndef countSmileys\
  \ (arr : List String) : Nat := sorry\n"
"vc-theorems": "theorem count_matches_valid_check {arr : List String} :\n  countSmileys\
  \ arr = (arr.filter validSmiley).length := sorry\n\n\ntheorem count_is_nonnegative\
  \ {arr : List String} :\n  countSmileys arr ≥ 0 := sorry\n\n\ntheorem count_bounded_by_length\
  \ {arr : List String} :\n  countSmileys arr ≤ arr.length := sorry\n\n/--\ninfo:\
  \ 0\n-/\n#guard_msgs in\n#eval count_smileys []\n\n/--\ninfo: 4\n-/\n#guard_msgs\
  \ in\n#eval count_smileys [\":D\", \":~)\", \";~D\", \":)\"]\n\n/--\ninfo: 1\n-/\n\
  #guard_msgs in\n#eval count_smileys [\";]\", \":[\", \";*\", \":$\", \";-D\"]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
