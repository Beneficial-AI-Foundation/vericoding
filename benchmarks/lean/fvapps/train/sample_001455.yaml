"vc-description": "You are playing a game where you have been sent in a town to collect\
  \ 10 types of coin and their symbol are defined with $A, B, C, D, E, F, G, H , I,\
  \ J$. In that town every enemy have a coin. By killing one you will get a coin from\
  \ that enemy. Each enemy have only a unique coin.\nThe challange of the game is\
  \ You have to collect all the coin and only then you will get the victory. You are\
  \ a brave gamer so you took this hard challange and successfully finished it. After\
  \ finishing, you are thinking of the game. You know the order off collecting coin.\
  \ Now you are thinking how many enemy did you have killed?\nCan you solve that out?\n\
  \n-----Input:-----\nFirst line of the input is an integer $T$.Next T line consists\
  \ of a string which denotes the order of your collecting coins. The string consists\
  \ of Uppercase latin latter only and from A to J.\n\n-----Output:-----\nPrint T\
  \ line, in each line an integer with the number of enemy you have killed in the\
  \ operation.\n\n-----Constraints-----\n- $1 \\leq T \\leq 5000$\n\n-----Sample Input:-----\n\
  1\nABCDEFGHIJ\n\n-----Sample Output:-----\n10"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_enemies_killed (s : String) : Nat := \n  sorry\n"
"vc-theorems": "theorem count_enemies_killed_equality (s : String) : \n  count_enemies_killed\
  \ s = (s.toList.filter (fun c => c.isAlpha && c.isUpper)).length := \n  sorry\n\n\
  \ntheorem count_enemies_killed_nonnegative (s : String) : \n  count_enemies_killed\
  \ s ≥ 0 := \n  sorry\n\n\ntheorem count_enemies_killed_bound (s : String) : \n \
  \ count_enemies_killed s ≤ s.length := \n  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
