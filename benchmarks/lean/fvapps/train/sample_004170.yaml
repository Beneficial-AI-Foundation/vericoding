"vc-description": "# Task\n\n**_Given_** *an array of N integers, you have to find*\
  \ **_how many times_** *you have to* **_add up the smallest numbers_** *in the array\
  \ until* **_their Sum_**  *becomes greater or equal to* **_K_**.\n___\n \n# Notes:\
  \ \n\n* **_List size_**  is *at least 3*.\n\n* **_All numbers_**  *will be*  **_positive_**.\n\
  \n* **_Numbers_**  could  *occur more than once* ,   **_(Duplications may exist)_**.\n\
  \n* Threshold  **_K_**  will *always be reachable*.\n___\n# Input >> Output Examples\n\
  \n```\nminimumSteps({1, 10, 12, 9, 2, 3}, 6)  ==>  return (2)\n```\n## **_Explanation_**:\n\
  \n* We  *add two smallest elements*  **_(1 + 2)_**,  *their sum is 3* .\n\n* **_Then_**\
  \  we  **_add the next smallest number to it (3 + 3)_** , so  *the sum becomes 6*\
  \ .\n\n* **_Now_**  the result is greater or equal to **_6_** ,  *Hence the output\
  \ is (2) i.e (2) operations are required to do this* .\n___\n```\nminimumSteps({8\
  \ , 9, 4, 2}, 23)  ==> return (3)\n```\n## **_Explanation_**:\n\n* We  *add two\
  \ smallest elements*  **_(4 + 2)_**,  *their sum is 6* .\n\n* **_Then_**  we  **_add\
  \ the next smallest number to it (6 + 8)_** , so *the sum becomes 14* .\n\n* **_Now_**\
  \  we  **_add the next smallest number (14 + 9)_** , so *the sum becomes 23*  .\n\
  \n* **_Now_**  the result is greater or equal to **_23_** ,  *Hence the output is\
  \ (3) i.e (3) operations are required to do this* .\n___\n```\nminimumSteps({19,98,69,28,75,45,17,98,67},\
  \ 464)  ==>  return (8)\n```\n## **_Explanation_**:\n\n* We  *add two smallest elements*\
  \  **_(19 + 17)_**,  *their sum is 36* .\n\n* **_Then_**  we  **_add the next smallest\
  \ number to it (36 + 28)_** , so *the sum becomes 64* .\n\n* We need to **_keep\
  \ doing this_** *until **_the sum_** becomes greater or equal to **_K_** (464 in\
  \ this case)*, which will require **_8_** Steps .\n___\n ## Expected Time Complexity\
  \ `O(n Log n)`\n___\n___\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\
  \n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\
  \n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n\
  ___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou"
"vc-preamble": "import Imports.AllImports\n\ndef minimum_steps (arr : List Nat) (n\
  \ : Nat) : Option Nat :=\n  sorry\n\n\ndef List.sort (l : List Nat) : List Nat :=\n\
  \  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sumList (l : List Nat) : Nat :=\n  l.foldl (·+·) 0\n"
"vc-theorems": "theorem minimum_steps_nonnegative (arr : List Nat) (n : Nat) \n  (h\
  \ : minimum_steps arr n ≠ none) :\n  ∀ result, minimum_steps arr n = some result\
  \ → result ≥ 0 :=\nsorry\n\n\ntheorem minimum_steps_less_than_length (arr : List\
  \ Nat) (n : Nat)\n  (h : minimum_steps arr n ≠ none) :\n  ∀ result, minimum_steps\
  \ arr n = some result → result < arr.length :=\nsorry\n\n\ntheorem minimum_steps_sum_sufficient\
  \ (arr : List Nat) (n : Nat)\n  (h : minimum_steps arr n ≠ none) :\n  ∀ result,\
  \ minimum_steps arr n = some result →\n  sumList (List.take (result + 1) (arr.sort))\
  \ ≥ n :=\nsorry\n\n\ntheorem minimum_steps_sum_necessary (arr : List Nat) (n : Nat)\n\
  \  (h : minimum_steps arr n ≠ none) :\n  ∀ result, minimum_steps arr n = some result\
  \ →\n  result > 0 → sumList (List.take result (arr.sort)) < n :=\nsorry\n\n\ntheorem\
  \ minimum_steps_sort_invariant (arr : List Nat) (n : Nat) :\n  minimum_steps (arr.sort)\
  \ n = minimum_steps arr n :=\nsorry\n\n\ntheorem minimum_steps_single_element_target_le\
  \ (x : Nat) (n : Nat) :\n  n ≤ x → minimum_steps [x] n = some 0 :=\nsorry\n\n\n\
  theorem minimum_steps_first_element_sufficient (x y z : Nat) :\n  minimum_steps\
  \ [x, y, z] y = some 0 :=\nsorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval minimum_steps\
  \ [4, 6, 3] 7\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval minimum_steps [10, 9, 9,\
  \ 8] 17\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval minimum_steps [8, 9, 10, 4, 2]\
  \ 23\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
