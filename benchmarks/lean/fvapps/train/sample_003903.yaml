"vc-description": "*Are you a file extension master? Let's find out by checking if\
  \ Bill's files are images or audio files. Please use regex if available natively\
  \ for your language.*\n\nYou will create 2 string methods:\n\n- **isAudio/is_audio**,\
  \ matching 1 or + uppercase/lowercase letter(s) (combination possible), with the\
  \ extension .mp3, .flac, .alac, or .aac.\n\n- **isImage/is_image**, matching 1 or\
  \ + uppercase/lowercase letter(s) (combination possible), with the extension .jpg,\
  \ .jpeg, .png, .bmp, or .gif. \n\n\n*Note that this is not a generic image/audio\
  \ files checker. It's meant to be a test for Bill's files only. Bill doesn't like\
  \ punctuation. He doesn't like numbers, neither. Thus, his filenames are letter-only*\n\
  \n**Rules**\n\n1. It should return true or false, simply.\n2. File extensions should\
  \ consist of lowercase letters and numbers only.\n3. File names should consist of\
  \ letters only (uppercase, lowercase, or both)\n\nGood luck!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_audio (s : String) : Bool := sorry\ndef is_image (s : String)\
  \ : Bool := sorry\n"
"vc-theorems": "theorem valid_audio_files (name : String) (ext : String) \n  (h1 :\
  \ ∀ c ∈ name.data, c.isAlpha)\n  (h2 : ext ∈ [\"mp3\", \"flac\", \"alac\", \"aac\"\
  ]) :\n  is_audio (name ++ \".\" ++ ext) = true := \nsorry\n\n\ntheorem valid_image_files\
  \ (name : String) (ext : String)\n  (h1 : ∀ c ∈ name.data, c.isAlpha) \n  (h2 :\
  \ ext ∈ [\"jpg\", \"jpeg\", \"png\", \"bmp\", \"gif\"]) :\n  is_image (name ++ \"\
  .\" ++ ext) = true :=\nsorry\n\n\ntheorem invalid_uppercase_audio_extensions (name\
  \ : String) (ext : String)\n  (h1 : ∀ c ∈ name.data, c.isAlpha)\n  (h2 : ext ∈ [\"\
  MP3\", \"FLAC\", \"ALAC\", \"AAC\"]) :\n  is_audio (name ++ \".\" ++ ext) = false\
  \ :=\nsorry\n\n\ntheorem invalid_uppercase_image_extensions (name : String) (ext\
  \ : String) \n  (h1 : ∀ c ∈ name.data, c.isAlpha)\n  (h2 : ext ∈ [\"JPG\", \"PNG\"\
  , \"BMP\", \"GIF\"]) :\n  is_image (name ++ \".\" ++ ext) = false :=\nsorry\n\n\n\
  theorem invalid_filenames (name : String)\n  (h : ∃ c ∈ name.data, c.isDigit ∨ c\
  \ = '!' ∨ c = '@' ∨ c = '#' ∨ c = '$' ∨ \n       c = '%' ∨ c = '^' ∨ c = '&' ∨ c\
  \ = '*' ∨ c = '(' ∨ c = ')' ∨ \n       c = '_' ∨ c = ' ') :\n  (is_audio (name ++\
  \ \".mp3\") = false) ∧ \n  (is_image (name ++ \".jpg\") = false) :=\nsorry\n\n\n\
  theorem invalid_extensions (name : String)\n  (h : ∀ c ∈ name.data, c.isAlpha) :\n\
  \  (is_audio (name ++ \".txt\") = false) ∧ \n  (is_image (name ++ \".doc\") = false)\
  \ :=\nsorry\n\n\ntheorem empty_or_malformed (s : String)\n  (h : s.isEmpty ∨ ¬ ('.'\
  \ ∈ s.data)) :\n  (is_audio s = false) ∧ (is_image s = false) :=\nsorry\n\n/--\n\
  info: True\n-/\n#guard_msgs in\n#eval is_audio \"NothingElseMatters.mp3\"\n\n/--\n\
  info: False\n-/\n#guard_msgs in\n#eval is_audio \"DaftPunk.FLAC\"\n\n/--\ninfo:\
  \ False\n-/\n#guard_msgs in\n#eval is_audio \" Amon Tobin.alac\"\n\n/--\ninfo: True\n\
  -/\n#guard_msgs in\n#eval is_image \"sample.jpg\"\n\n/--\ninfo: False\n-/\n#guard_msgs\
  \ in\n#eval is_image \"MyPhoto123.png\"\n\n/--\ninfo: False\n-/\n#guard_msgs in\n\
  #eval is_image \"Photo Space.gif\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
