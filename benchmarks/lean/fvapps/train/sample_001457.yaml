"vc-description": "Tuzik and Vanya are playing the following game.\nThey have an N\
  \ × M board and a chip to indicate the current game position. The chip can be placed\
  \ on any one cell of the game board, each of which is uniquely identified by an\
  \ ordered pair of positive integers (r, c), where 1 ≤ r ≤ N is the row number and\
  \ 1 ≤ c ≤ M is the column number.\nInitially, the chip is placed at the cell identified\
  \ as (1, 1). For his move, a player can move it either 1, 2 or 3 cells up, or 1\
  \ or 2 cells to the right. The player who can not move the chip loses. In other\
  \ words, a player suffers defeat if the chip is placed in the cell (N, M) at the\
  \ start of his turn.\nTuzik starts the game. You have to determine who will win\
  \ the game if both players play optimally.\n\n-----Input-----\nThe first line contains\
  \ an integer T denoting the number of tests. Each of the following T lines contain\
  \ two integers N and M.\n\n-----Output-----\nFor each test output \"Tuzik\" or \"\
  Vanya\" on a separate line, indicating who will win the game.\n\n-----Constraints-----\n\
  - 1 ≤ T ≤ 100\n- 1 ≤ N, M ≤ 106\n\n-----Example-----\nInput:\n2\n4 4\n2 2\n\nOutput:\n\
  Tuzik\nVanya\n\n\n-----Explanation-----Test case 1: On his first turn Tuzik moves\
  \ chip 3 cells up to the cell (4, 1). On his turn Vanya can move chip only right\
  \ to the cell (4, 2) or to the cell (4, 3) and after that Tuzik moves it to (4,\
  \ 4) and finishes the game.\n\nTest case 2: On his first Turn Tuzik can move chip\
  \ to the cell (2, 1) or (1, 2), but on his next turn Vanya moves it to (2, 2) and\
  \ wins the game."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def determine_winner (rows cols : Nat) : Player := sorry\n\ntheorem\
  \ determine_winner_returns_valid_player (rows cols : Nat) \n  (h1 : 1 ≤ rows) (h2\
  \ : rows ≤ 1000) (h3 : 1 ≤ cols) (h4 : cols ≤ 1000) :\n  (determine_winner rows\
  \ cols = Player.Vanya) ∨ \n  (determine_winner rows cols = Player.Tuzik) := sorry\n"
"vc-theorems": "theorem winner_pattern_properties (rows cols : Nat)\n  (h1 : 1 ≤ rows)\
  \ (h2 : rows ≤ 1000) (h3 : 1 ≤ cols) (h4 : cols ≤ 1000) :\n  let row_mod := (rows\
  \ - 1) % 4\n  let col_mod := (cols - 1) % 3\n  ((col_mod = 0 ∧ row_mod = 0) ∨ \n\
  \   (col_mod = 1 ∧ row_mod = 1) ∨ \n   (col_mod = 2 ∧ row_mod = 2)) → determine_winner\
  \ rows cols = Player.Vanya \n  ∧\n  ¬((col_mod = 0 ∧ row_mod = 0) ∨ \n    (col_mod\
  \ = 1 ∧ row_mod = 1) ∨ \n    (col_mod = 2 ∧ row_mod = 2)) → determine_winner rows\
  \ cols = Player.Tuzik := sorry\n\n\ntheorem column_periodicity (rows : Nat) (h1\
  \ : 1 ≤ rows) (h2 : rows ≤ 1000) :\n  ∀ col : Nat, 1 ≤ col → col ≤ 3 →\n    determine_winner\
  \ rows col = determine_winner rows (col + 3) := sorry\n\n\ntheorem row_periodicity\
  \ (cols : Nat) (h1 : 1 ≤ cols) (h2 : cols ≤ 1000) :\n  ∀ row : Nat, 1 ≤ row → row\
  \ ≤ 4 →\n    determine_winner row cols = determine_winner (row + 4) cols := sorry\n\
  \n/--\ninfo: 'Tuzik'\n-/\n#guard_msgs in\n#eval determine_winner 4 4\n\n/--\ninfo:\
  \ 'Vanya'\n-/\n#guard_msgs in\n#eval determine_winner 2 2\n\n/--\ninfo: 'Vanya'\n\
  -/\n#guard_msgs in\n#eval determine_winner 5 4\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
