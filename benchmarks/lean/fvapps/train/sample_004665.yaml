"vc-description": "Create a class Vector that has simple (3D) vector operators.\n\n\
  In your class, you should support the following operations, given Vector ```a```\
  \ and Vector ```b```:\n\n```python\na + b # returns a new Vector that is the resultant\
  \ of adding them\na - b # same, but with subtraction\na == b # returns true if they\
  \ have the same magnitude and direction\na.cross(b) # returns a new Vector that\
  \ is the cross product of a and b\na.dot(b) # returns a number that is the dot product\
  \ of a and b\na.to_tuple() # returns a tuple representation of the vector.\nstr(a)\
  \ # returns a string representation of the vector in the form \"\"\na.magnitude\
  \ # returns a number that is the magnitude (geometric length) of vector a.\na.x\
  \ # gets x component\na.y # gets y component\na.z # gets z component\nVector([a,b,c])\
  \ # creates a new Vector from the supplied 3D array.\nVector(a,b,c) # same as above\n\
  ```\nThe test cases will not mutate the produced Vector objects, so don't worry\
  \ about that."
"vc-preamble": "import Imports.AllImports\n\ndef Vector.toTuple (v : Vector) : Int\
  \ × Int × Int := sorry\ndef Vector.fromList (l : List Int) : Vector := sorry\n\n\
  def Vector.add (v1 v2 : Vector) : Vector := sorry\ndef Vector.sub (v1 v2 : Vector)\
  \ : Vector := sorry\n\ndef Vector.dot (v1 v2 : Vector) : Int := sorry\ndef Vector.cross\
  \ (v1 v2 : Vector) : Vector := sorry"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def Vector.magnitude (v : Vector) : Float := sorry\ndef Vector.toString\
  \ (v : Vector) : String := sorry\n"
"vc-theorems": "theorem vector_creation_args (x y z : Int) :\n  (Vector.toTuple ⟨x,\
  \ y, z⟩) = (x, y, z) := sorry\n\n\ntheorem vector_creation_list (l : List Int) (h\
  \ : l.length = 3) :\n  Vector.toTuple (Vector.fromList l) = (l[0]!, l[1]!, l[2]!)\
  \ := sorry\n\n\ntheorem vector_addition (v1 v2 : Vector) :\n  Vector.toTuple (Vector.add\
  \ v1 v2) = (v1.x + v2.x, v1.y + v2.y, v1.z + v2.z) := sorry\n\n\ntheorem vector_subtraction\
  \ (v1 v2 : Vector) :\n  Vector.toTuple (Vector.sub v1 v2) = (v1.x - v2.x, v1.y -\
  \ v2.y, v1.z - v2.z) := sorry\n\n\ntheorem vector_dot_product (v1 v2 : Vector) :\n\
  \  Vector.dot v1 v2 = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z := sorry\n\n\ntheorem\
  \ vector_cross_product (v1 v2 : Vector) :\n  Vector.toTuple (Vector.cross v1 v2)\
  \ = \n    (v1.y * v2.z - v1.z * v2.y,\n     v1.z * v2.x - v1.x * v2.z,\n     v1.x\
  \ * v2.y - v1.y * v2.x) := sorry\n\n\ntheorem vector_magnitude (v : Vector) :\n\
  \  Vector.magnitude v = Float.sqrt (Float.ofInt (v.x * v.x + v.y * v.y + v.z * v.z))\
  \ := sorry\n\n\ntheorem vector_string_representation (v : Vector) :\n  Vector.toString\
  \ v = s!\"<{v.x}, {v.y}, {v.z}>\" := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
