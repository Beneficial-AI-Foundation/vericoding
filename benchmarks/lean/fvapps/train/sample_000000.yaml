"vc-description": "Polycarp has $n$ different binary words. A word called binary if\
  \ it contains only characters '0' and '1'. For example, these words are binary:\
  \ \"0001\", \"11\", \"0\" and \"0011100\".\n\nPolycarp wants to offer his set of\
  \ $n$ binary words to play a game \"words\". In this game, players name words and\
  \ each next word (starting from the second) must start with the last character of\
  \ the previous word. The first word can be any. For example, these sequence of words\
  \ can be named during the game: \"0101\", \"1\", \"10\", \"00\", \"00001\".\n\n\
  Word reversal is the operation of reversing the order of the characters. For example,\
  \ the word \"0111\" after the reversal becomes \"1110\", the word \"11010\" after\
  \ the reversal becomes \"01011\".\n\nProbably, Polycarp has such a set of words\
  \ that there is no way to put them in the order correspondent to the game rules.\
  \ In this situation, he wants to reverse some words from his set so that:  the final\
  \ set of $n$ words still contains different words (i.e. all words are unique); \
  \ there is a way to put all words of the final set of words in the order so that\
  \ the final sequence of $n$ words is consistent with the game rules. \n\nPolycarp\
  \ wants to reverse minimal number of words. Please, help him.\n\n\n-----Input-----\n\
  \nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) —\
  \ the number of test cases in the input. Then $t$ test cases follow.\n\nThe first\
  \ line of a test case contains one integer $n$ ($1 \\le n \\le 2\\cdot10^5$) — the\
  \ number of words in the Polycarp's set. Next $n$ lines contain these words. All\
  \ of $n$ words aren't empty and contains only characters '0' and '1'. The sum of\
  \ word lengths doesn't exceed $4\\cdot10^6$. All words are different.\n\nGuaranteed,\
  \ that the sum of $n$ for all test cases in the input doesn't exceed $2\\cdot10^5$.\
  \ Also, guaranteed that the sum of word lengths for all test cases in the input\
  \ doesn't exceed $4\\cdot10^6$.\n\n\n-----Output-----\n\nPrint answer for all of\
  \ $t$ test cases in the order they appear.\n\nIf there is no answer for the test\
  \ case, print -1. Otherwise, the first line of the output should contain $k$ ($0\
  \ \\le k \\le n$) — the minimal number of words in the set which should be reversed.\
  \ The second line of the output should contain $k$ distinct integers — the indexes\
  \ of the words in the set which should be reversed. Words are numerated from $1$\
  \ to $n$ in the order they appear. If $k=0$ you can skip this line (or you can print\
  \ an empty line). If there are many answers you can print any of them.\n\n\n-----Example-----\n\
  Input\n4\n4\n0001\n1000\n0011\n0111\n3\n010\n101\n0\n2\n00000\n00001\n4\n01\n001\n\
  0001\n00001\n\nOutput\n1\n3 \n-1\n0\n\n2\n1 2"
"vc-preamble": "import Imports.AllImports\n\ndef solve (n : Nat) (words : List String)\
  \ : List Int :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def abs (n : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem solve_output_structure (n : Nat) (words : List String) :\n\
  \  let result := solve n words\n  (result = [-1] ∨\n   (result.length ≥ 1 ∧\n  \
  \  ∀ x ∈ result, ∃ i : Int, x = i ∧\n    let count := result[0]!\n    result.length\
  \ = count + 1 ∧\n    ∀ i ∈ result.tail, 1 ≤ i ∧ i ≤ n)) :=\nsorry\n\n\ntheorem solve_minimal_flips\
  \ (n : Nat) (words : List String) :\n  let result := solve n words\n  result ≠ [-1]\
  \ →\n  let zeros_to_ones := (words.filter (λ w => w.front = '0' ∧ w.back = '1')).length\n\
  \  let ones_to_zeros := (words.filter (λ w => w.front = '1' ∧ w.back = '0')).length\n\
  \  let min_flips := (abs (zeros_to_ones - ones_to_zeros)) / 2\n  result[0]! = min_flips\
  \ :=\nsorry\n\n/--\ninfo: [1, 3]\n-/\n#guard_msgs in\n#eval solve 4 [\"0001\", \"\
  1000\", \"0011\", \"0111\"]\n\n/--\ninfo: [-1]\n-/\n#guard_msgs in\n#eval solve\
  \ 3 [\"010\", \"101\", \"0\"]\n\n/--\ninfo: [0]\n-/\n#guard_msgs in\n#eval solve\
  \ 2 [\"00000\", \"00001\"]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
