"vc-description": "We have a tree with N vertices, whose i-th edge connects Vertex\
  \ u_i and Vertex v_i.\nVertex i has an integer a_i written on it.\nFor every integer\
  \ k from 1 through N, solve the following problem:\n - We will make a sequence by\
  \ lining up the integers written on the vertices along the shortest path from Vertex\
  \ 1 to Vertex k, in the order they appear. Find the length of the longest increasing\
  \ subsequence of this sequence.\nHere, the longest increasing subsequence of a sequence\
  \ A of length L is the subsequence A_{i_1} , A_{i_2} , ... , A_{i_M} with the greatest\
  \ possible value of M such that 1 \\leq i_1 < i_2 < ... < i_M \\leq L and A_{i_1}\
  \ < A_{i_2} < ... < A_{i_M}.\n\n-----Constraints-----\n - 2 \\leq N \\leq 2 \\times\
  \ 10^5\n - 1 \\leq a_i \\leq 10^9\n - 1 \\leq u_i , v_i \\leq N\n - u_i \\neq v_i\n\
  \ - The given graph is a tree.\n - All values in input are integers.\n\n-----Input-----\n\
  Input is given from Standard Input in the following format:\nN\na_1 a_2 ... a_N\n\
  u_1 v_1\nu_2 v_2\n:\nu_{N-1} v_{N-1}\n\n-----Output-----\nPrint N lines. The k-th\
  \ line, print the length of the longest increasing subsequence of the sequence obtained\
  \ from the shortest path from Vertex 1 to Vertex k.\n\n-----Sample Input-----\n\
  10\n1 2 5 3 4 6 7 3 2 4\n1 2\n2 3\n3 4\n4 5\n3 6\n6 7\n1 8\n8 9\n9 10\n\n-----Sample\
  \ Output-----\n1\n2\n3\n3\n4\n4\n5\n2\n2\n3\n\nFor example, the sequence A obtained\
  \ from the shortest path from Vertex 1 to Vertex 5 is 1,2,5,3,4. Its longest increasing\
  \ subsequence is A_1, A_2, A_4, A_5, with the length of 4."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_longest_increasing_paths (n : Nat) (values : List Nat)\
  \ (edges : List (Nat × Nat)) : List Nat :=\nsorry\n"
"vc-theorems": "theorem output_length_correct {n : Nat} {values : List Nat} {edges\
  \ : List (Nat × Nat)}\n  (h1 : values.length = n)\n  (h2 : ∀ e ∈ edges, e.1 < n\
  \ ∧ e.2 ≤ n) :\n  (find_longest_increasing_paths n values edges).length = n :=\n\
  sorry\n\n\ntheorem all_paths_at_least_one {n : Nat} {values : List Nat} {edges :\
  \ List (Nat × Nat)}\n  (h1 : values.length = n)\n  (h2 : ∀ e ∈ edges, e.1 < n ∧\
  \ e.2 ≤ n) :\n  ∀ x ∈ find_longest_increasing_paths n values edges, x ≥ 1 :=\nsorry\n\
  \n\ntheorem single_value_paths {n : Nat} :\n  let values := List.replicate n 1\n\
  \  let edges := List.map (fun i => (1, i+2)) (List.range (n-1))\n  ∀ x ∈ find_longest_increasing_paths\
  \ n values edges, x = 1 :=\nsorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
