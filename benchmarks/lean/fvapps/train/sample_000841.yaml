"vc-description": "The government has invited bids from contractors to run canteens\
  \ at all railway stations. Contractors will be allowed to bid for the catering contract\
  \ at more than one station. However, to avoid monopolistic price-fixing, the government\
  \ has declared that no contractor may bid for a pair of neighbouring stations.\n\
  The railway network has exactly one route between any pair of stations. Each station\
  \ is directly connected by a railway line to at most $50$ neighbouring stations.\n\
  To help contractors plan their bids, the government has provided data on the number\
  \ of passengers who pass through each station each year. Contractors would like\
  \ to bid for stations with a higher volume of passenger traffic to increase their\
  \ turnover.\nFor instance, suppose the railway network is as follows, where the\
  \ volume of passenger traffic is indicated by the side of each station.\n\nIn this\
  \ network, the best option for the contractor is to bid for stations $1, 2, 5$ and\
  \ $6$, for a total passenger volume of $90$.\nYour task is to choose a set of stations\
  \ that the contractor should bid for so that the total volume of traffic across\
  \ all the stations in the bid is maximized.\n\n-----Input:-----\nThe first line\
  \ of the input contains one integer $N$ indicating the number of railways stations\
  \ in the network. The stations are numbered $1,2,...,N$. This is followed by $N$\
  \ lines of input, lines $2, 3,..., N+1$, indicating the volume of traffic at each\
  \ station. The volume of traffic at station $i, 1 \\leq i \\leq N$, is given by\
  \ a single integer in line $i+1$. The next $N-1$ lines of input, lines $N+2, N+3,\
  \ ..., 2N$, describe the railway network. Each of these lines contains two integers,\
  \ denoting a pair of stations that are neighbours.\n\n-----Output:-----\nThe output\
  \ should be a single integer, corresponding to the total volume of traffic across\
  \ the set of stations in the optimal bid made by the contractor.\n\n-----Constraints:-----\n\
  - $1 \\leq N \\leq 100000$. \n- Each railway station has at most $50$ neighbours.\n\
  \n-----Sample Input-----\n6\n10\n20\n25\n40\n30\n30\n4 5\n1 3\n3 4\n2 3\n6 4\n\n\
  -----Sample Output-----\n90"
"vc-preamble": "import Imports.AllImports\n\ndef sum (list : List Nat) : Nat :=\n\
  \  match list with\n  | [] => 0\n  | x::xs => x + sum xs\n\n\ndef maximum (list\
  \ : List Nat) : Nat :=\n  match list with\n  | [] => 0\n  | [x] => x\n  | x::xs\
  \ => Nat.max x (maximum xs)\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_max_railway_bids (n : Nat) (traffic : List Nat) (connections\
  \ : List (Nat × Nat)) : Nat :=\n  sorry\n"
"vc-theorems": "theorem output_properties\n  {n : Nat} {traffic : List Nat} {connections\
  \ : List (Nat × Nat)}\n  (hvalid : n > 0)\n  (hlen : traffic.length = n) :\n  let\
  \ result := solve_max_railway_bids n traffic connections\n  -- Result should be\
  \ non-negative (automatically true for Nat)\n  -- Result cannot exceed sum of traffic\
  \ values\n  result ≤ sum traffic ∧\n  -- Result should be at least max traffic value\n\
  \  result ≥ maximum traffic :=\nsorry\n\n\ntheorem tree_structure_invariant\n  {n\
  \ : Nat} {traffic : List Nat} {connections : List (Nat × Nat)} \n  (hvalid : n >\
  \ 0)\n  (hlen : traffic.length = n) :\n  n > 1 →\n  -- Should be n-1 edges\n  connections.length\
  \ = n - 1 ∧\n  -- All nodes should be in valid range \n  (∀ (edge : Nat × Nat),\
  \ edge ∈ connections →\n    1 ≤ edge.1 ∧ edge.1 ≤ n ∧\n    1 ≤ edge.2 ∧ edge.2 ≤\
  \ n) :=\nsorry\n\n\ntheorem minimal_cases :\n  -- Single node\n  solve_max_railway_bids\
  \ 1 [5] [] = 5 ∧\n  -- Two nodes \n  solve_max_railway_bids 2 [5,10] [(1,2)] = 10\
  \ :=\nsorry\n\n/--\ninfo: 90\n-/\n#guard_msgs in\n#eval solve_max_railway_bids 6\
  \ [10, 20, 25, 40, 30, 30] [(4, 5), (1, 3), (3, 4), (2, 3), (6, 4)]\n\n/--\ninfo:\
  \ 40\n-/\n#guard_msgs in\n#eval solve_max_railway_bids 3 [10, 20, 30] [(1, 2), (2,\
  \ 3)]\n\n/--\ninfo: 30\n-/\n#guard_msgs in\n#eval solve_max_railway_bids 4 [5, 10,\
  \ 15, 20] [(1, 2), (2, 3), (3, 4)]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
