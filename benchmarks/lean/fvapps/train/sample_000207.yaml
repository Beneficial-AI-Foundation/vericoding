"vc-description": "Given a string s, return the maximum number of unique substrings\
  \ that the given string can be split into.\nYou can split string s into any list\
  \ of non-empty substrings, where the concatenation of the substrings forms the original\
  \ string. However, you must split the substrings such that all of them are unique.\n\
  A substring is a contiguous sequence of characters within a string.\n \nExample\
  \ 1:\nInput: s = \"ababccc\"\nOutput: 5\nExplanation: One way to split maximally\
  \ is ['a', 'b', 'ab', 'c', 'cc']. Splitting like ['a', 'b', 'a', 'b', 'c', 'cc']\
  \ is not valid as you have 'a' and 'b' multiple times.\n\nExample 2:\nInput: s =\
  \ \"aba\"\nOutput: 2\nExplanation: One way to split maximally is ['a', 'ba'].\n\n\
  Example 3:\nInput: s = \"aa\"\nOutput: 1\nExplanation: It is impossible to split\
  \ the string any further.\n\n \nConstraints:\n\n\n1 <= s.length <= 16\n\n\ns contains only\
  \ lower case English letters."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def maxUniqueSplit (s: String) : Nat := sorry\n\n\n\n\n\ntheorem\
  \ maxUniqueSplit_single_char (s: String) (h: s.length = 1) :\n  maxUniqueSplit s\
  \ = 1 := sorry\n\n\n"
"vc-theorems": "theorem maxUniqueSplit_aa : \n  maxUniqueSplit \"aa\" = 1 := sorry\n\
  \n\ntheorem maxUniqueSplit_aba :\n  maxUniqueSplit \"aba\" = 2 := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
