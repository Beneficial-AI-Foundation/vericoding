"vc-description": "On Miu's smart phone, there is a search feature which lets her\
  \ search for a contact name by typing digits on the keypad where each digit may\
  \ correspond to any of the characters given below it. For example, to search for\
  \ TOM, she can type 866 and for MAX she can type 629.\n+------+-----+------+\n|\
  \   1  |  2  |   3  |\n|      | ABC |  DEF |\n+------+-----+------+\n|   4  |  5\
  \  |   6  |\n|  GHI | JKL |  MNO |\n+------+-----+------+\n|   7  |  8  |   9  |\n\
  | PQRS | TUV | WXYZ |\n+------+-----+------+\n|      |  0  |      |\n+------+-----+------+\n\
  \nMiu typed a random string of digits $S$ on the keypad while playing around, where\
  \ each digit is between 2 and 9 inclusive. Now she wants to know the number of possible\
  \ strings which would map to $S$. \nSince this number can be very large, output\
  \ it modulo 10^9 + 7 (1000000007)\n\n-----Input:-----\n- \nThe first line of the\
  \ input consists of a single integer $T$ denoting the number of test cases.\n- \n\
  Each test case consists of a string $S$.\n\n-----Output:-----\n- For each test case,\
  \ print a single line containing one integer - the count of all possible strings\
  \ mod 1,000,000,007\n\n-----Constraints-----\n- \n1 <= $T$ <= 10\n- \n1 <= $|S|$\
  \ <= 105\n\n-----Subtasks-----\nSubtask #1 (10 points):\n- 1 <= $|S|$ <= 10\nSubtask\
  \ #2 (90 points):\n- Original Constraints\n\n-----Sample Input:-----\n2\n\n5\n\n\
  72  \n\n-----Sample Output:-----\n3\n\n12  \n\n-----EXPLANATION:-----\n- \nExample\
  \ Case 1:\n\nOn the key 5, we have the character set JKL.\n\nHence the possible\
  \ strings are J,K,L.\n\nHence the answer is 3 % (1000000007) = 3.  \n- \nExample\
  \ Case 2:\nOn key 7, we have the character set PQRS.\n\nOn key 2, we have the character\
  \ set ABC.\n\nHence the possible strings are PA,PB,PC,QA,QB,QC,RA,RB,RC,SA,SB,SC.\n\
  \nHence the answer is 12 % (1000000007) = 12."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_phone_keypad (digits: String) : Nat := sorry\n\ntheorem\
  \ solve_phone_keypad_bounds (digits: String) :\n  solve_phone_keypad digits < 1000000007\
  \ := sorry\n\n\n"
"vc-theorems": "theorem solve_phone_keypad_single_seven_or_nine (d: Char) :\n  d =\
  \ '7' ∨ d = '9' →\n  solve_phone_keypad (String.mk [d]) = 4 := sorry\n\n\ntheorem\
  \ solve_phone_keypad_single_one (d: Char) :\n  d = '1' →\n  solve_phone_keypad (String.mk\
  \ [d]) = 0 := sorry\n\n\ntheorem solve_phone_keypad_single_other (d: Char) :\n \
  \ d ≠ '0' ∧ d ≠ '1' ∧ d ≠ '7' ∧ d ≠ '9' →\n  solve_phone_keypad (String.mk [d])\
  \ = 3 := sorry\n\n\ntheorem solve_phone_keypad_all_zeros (n: Nat) :\n  solve_phone_keypad\
  \ (String.mk (List.replicate n '0')) = 0 := sorry\n\n\ntheorem solve_phone_keypad_commutative\
  \ (a b: Char) :\n  solve_phone_keypad (String.mk [a, b]) = \n  solve_phone_keypad\
  \ (String.mk [b, a]) := sorry\n\n\ntheorem solve_phone_keypad_regression_72 :\n\
  \  solve_phone_keypad \"72\" = 12 := sorry\n\n\ntheorem solve_phone_keypad_regression_234\
  \ :\n  solve_phone_keypad \"234\" = 27 := sorry\n\n/--\ninfo: 3\n-/\n#guard_msgs\
  \ in\n#eval solve_phone_keypad \"5\"\n\n/--\ninfo: 12\n-/\n#guard_msgs in\n#eval\
  \ solve_phone_keypad \"72\"\n\n/--\ninfo: 27\n-/\n#guard_msgs in\n#eval solve_phone_keypad\
  \ \"234\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
