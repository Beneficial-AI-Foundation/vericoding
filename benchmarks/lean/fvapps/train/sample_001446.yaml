"vc-description": "Given $N *M$ matrix containing elements either $1$ or $0$ and string\
  \ S of length $N+M-1$ containing characters $0$ or $1$. Your task is to make all\
  \ the  paths from top left corner to the  bottom right corner of the matrix same\
  \ as the  given string .You can perform two types of operations any time .Path means\
  \ you can only allow it to take right or down. \nOperations :\n- Changing the matrix\
  \ elements from $1$ to $0$ or vice versa  will cost P rupees per element.\n- Changing\
  \ the character of string  from $1$ to $0$ or vice versa  will cost Q rupees per\
  \ character.\nYou have to  minimize the cost, (possibly 0) .\n\n-----Input:-----\n\
  - First line of input contains the total no. of test cases $T$. \n- For every test\
  \ case, first line of input contains two spaced positive integers, $N$ and $M$.\n\
  - Next $N$ lines contains $M$-spaced integers which can be only $0$ or $1$.\n- Next\
  \ line of input contains a string $S$ of length $N+M-1$.\n- Last line of input contains\
  \ two spaced integers, $P$ and $Q$.\n\n-----Output:-----\n- $You$ $have$ $to$ $print$\
  \ $the$ $minimum$ $cost .$\n\n-----Constraints-----\n- $1 \\leq T \\leq 20$\n- $1\
  \ \\leq N, M \\leq 1000$\n- $|S| = N+M-1$\n- $0 \\leq P, Q \\leq 1000$The input/output\
  \ is quite large, please use fast reading and writing methods.\n\n-----Sample Input-----\n\
  2\n3 3\n1 0 1\n0 1 1\n1 1 0\n10111\n10 5\n3 3 \n0 0 1\n0 1 1\n0 1 1\n00011\n2 9\n\
  \n-----Sample Output-----\n5\n4\n\n-----Explanation-----\n- You can  change the\
  \ last element of the matrix and also can change the last element of string but\
  \ the minimum cost will produce by changing string element , therefore it will cost\
  \ 5 rupees."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_matrix_path (n m : Nat) (matrix : List (List Nat)) (s\
  \ : String) (p q : Nat) : Nat := sorry\n\ntheorem solve_matrix_path_nonnegative\
  \ (n m : Nat) (matrix : List (List Nat)) (s : String) (p q : Nat) :\n  solve_matrix_path\
  \ n m matrix s p q ≥ 0 := sorry\n"
"vc-theorems": "theorem solve_matrix_path_bounded (n m : Nat) (matrix : List (List\
  \ Nat)) (s : String) (p q : Nat) :\n  solve_matrix_path n m matrix s p q ≤ n * m\
  \ * p + s.length * q := sorry \n\n\ntheorem solve_matrix_path_consistent (n m :\
  \ Nat) (matrix : List (List Nat)) (s : String) (p q : Nat) :\n  solve_matrix_path\
  \ n m matrix s p q = solve_matrix_path n m matrix s p q := sorry\n\n/--\ninfo: 5\n\
  -/\n#guard_msgs in\n#eval solve_matrix_path 3 3 [[1, 0, 1], [0, 1, 1], [1, 1, 0]]\
  \ \"10111\" 10 5\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval solve_matrix_path 3\
  \ 3 [[0, 0, 1], [0, 1, 1], [0, 1, 1]] \"00011\" 2 9\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
