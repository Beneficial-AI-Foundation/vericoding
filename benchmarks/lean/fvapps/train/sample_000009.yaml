"vc-description": "Alice and Bob play a game. They have a binary string $s$ (a string\
  \ such that each character in it is either $0$ or $1$). Alice moves first, then\
  \ Bob, then Alice again, and so on.\n\nDuring their move, the player can choose\
  \ any number (not less than one) of consecutive equal characters in $s$ and delete\
  \ them.\n\nFor example, if the string is $10110$, there are $6$ possible moves (deleted\
  \ characters are bold):  $\\textbf{1}0110 \\to 0110$;  $1\\textbf{0}110 \\to 1110$;\
  \  $10\\textbf{1}10 \\to 1010$;  $101\\textbf{1}0 \\to 1010$;  $10\\textbf{11}0\
  \ \\to 100$;  $1011\\textbf{0} \\to 1011$. \n\nAfter the characters are removed,\
  \ the characters to the left and to the right of the removed block become adjacent.\
  \ I. e. the following sequence of moves is valid: $10\\textbf{11}0 \\to 1\\textbf{00}\
  \ \\to 1$.\n\nThe game ends when the string becomes empty, and the score of each\
  \ player is the number of $1$-characters deleted by them.\n\nEach player wants to\
  \ maximize their score. Calculate the resulting score of Alice.\n\n\n-----Input-----\n\
  \nThe first line contains one integer $T$ ($1 \\le T \\le 500$) — the number of\
  \ test cases.\n\nEach test case contains exactly one line containing a binary string\
  \ $s$ ($1 \\le |s| \\le 100$).\n\n\n-----Output-----\n\nFor each test case, print\
  \ one integer — the resulting score of Alice (the number of $1$-characters deleted\
  \ by her).\n\n\n-----Example-----\nInput\n5\n01111001\n0000\n111111\n101010101\n\
  011011110111\n\nOutput\n4\n0\n6\n3\n6\n\n\n\n-----Note-----\n\nQuestions about the\
  \ optimal strategy will be ignored."
"vc-preamble": "import Imports.AllImports\n\ndef count_alice_score (s : String) :\
  \ Nat :=\n  sorry\n\n\ndef countOnes (s : String) : Nat :=\n  sorry\n\n\n\n\ndef\
  \ sortByLengthDesc (ls : List String) : List String :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def getAlternateSum (ls : List String) : Nat :=\n  sorry\n\n\n"
"vc-theorems": "theorem result_not_exceed_input_length \n  (s : String) : \n  count_alice_score\
  \ s ≤ s.length := \n  sorry\n\n\ntheorem result_nonnegative\n  (s : String) :\n\
  \  count_alice_score s ≥ 0 :=\n  sorry\n\n\ntheorem empty_or_zeros_returns_zero\n\
  \  (s : String) :\n  (s.isEmpty ∨ s.all (· = '0')) → count_alice_score s = 0 :=\n\
  \  sorry\n\n\ntheorem all_ones_full_score\n  (s : String) :\n  s.all (· = '1') →\n\
  \  s.length > 0 →\n  count_alice_score s = s.length :=\n  sorry\n\n/--\ninfo: 4\n\
  -/\n#guard_msgs in\n#eval count_alice_score \"01111001\"\n\n/--\ninfo: 6\n-/\n#guard_msgs\
  \ in\n#eval count_alice_score \"111111\"\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval\
  \ count_alice_score \"101010101\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
