"vc-description": "In this Kata, you will be given a string and two indexes (`a` and\
  \ `b`). Your task is to reverse the portion of that string between those two indices\
  \ inclusive. \n\n~~~if-not:fortran\n```\nsolve(\"codewars\",1,5) = \"cawedors\"\
  \ -- elements at index 1 to 5 inclusive are \"odewa\". So we reverse them.\nsolve(\"\
  cODEWArs\", 1,5) = \"cAWEDOrs\" -- to help visualize.\n```\n~~~\n~~~if:fortran\n\
  ```\nsolve(\"codewars\",2,6) = \"cawedors\" -- elements at indices 2 to 6 inclusive\
  \ are \"odewa\". So we reverse them.\nsolve(\"cODEWArs\", 2,6) = \"cAWEDOrs\" --\
  \ to help visualize.\n```\n~~~\n\nInput will be lowercase and uppercase letters\
  \ only. \n\nThe first index `a` will always be lower that than the string length;\
  \ the second index `b` can be greater than the string length. More examples in the\
  \ test cases. Good luck!\n\nPlease also try:\n\n[Simple time difference](https://www.codewars.com/kata/5b76a34ff71e5de9db0000f2)\n\
  \n[Simple remove duplicates](https://www.codewars.com/kata/5ba38ba180824a86850000f7)\n\
  \n~~~if:fortran\n*NOTE: You may assume that all input strings will* **not** *contain\
  \ any (redundant) trailing whitespace.  In return, your returned string is* **not**\
  \ *permitted to contain any (redundant) trailing whitespace.*\n~~~"
"vc-preamble": "import Imports.AllImports\n\ndef solve (s : String) (a b : Nat) :\
  \ String := sorry\n\ndef length (s : String) : Nat := sorry"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def substring (s : String) (start : Nat) (len : Nat) : String :=\
  \ sorry\ndef reverse (s : String) : String := sorry\n"
"vc-theorems": "theorem solve_length_preserved (s : String) (a b : Nat) (h : length\
  \ s > 0) :\n  length (solve s a b) = length s := sorry\n\n\ntheorem solve_preserves_outside_bounds\
  \ (s : String) (a b : Nat) (h : length s > 0) \n  (start := min a (length s))\n\
  \  (finish := min (b + 1) (length s)) :\n  substring (solve s a b) 0 start = substring\
  \ s 0 start ∧ \n  substring (solve s a b) finish (length s - finish) = substring\
  \ s finish (length s - finish) := sorry\n\n\ntheorem solve_reverses_middle (s :\
  \ String) (a b : Nat) (h : length s > 0)\n  (start := min a (length s))\n  (finish\
  \ := min (b + 1) (length s)) :\n  substring (solve s a b) start (finish - start)\
  \ = reverse (substring s start (finish - start)) := sorry\n\n\ntheorem solve_identity_empty_range\
  \ (s : String) (h : length s > 0) :\n  solve s 0 0 = s ∧\n  solve s (length s) (length\
  \ s + 10) = s := sorry\n\n\ntheorem solve_full_reversal (s : String) (h : length\
  \ s > 0) :\n  solve s 0 (length s - 1) = reverse s := sorry\n\n\ntheorem solve_single_char_identity\
  \ (s : String) (idx : Nat) (h : length s > 0)\n  (limited_idx := min idx (length\
  \ s - 1)) :\n  solve s limited_idx limited_idx = s := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
