"vc-description": "In a country popular for train travel, you have planned some train\
  \ travelling one year in advance.  The days of the year that you will travel is\
  \ given as an array days.  Each day is an integer from 1 to 365.\nTrain tickets\
  \ are sold in 3 different ways:\n\na 1-day pass is sold for costs[0] dollars;\n\
  a 7-day pass is sold for costs[1] dollars;\na 30-day pass is sold for costs[2] dollars.\n\
  \nThe passes allow that many days of consecutive travel.  For example, if we get\
  \ a 7-day pass on day 2, then we can travel for 7 days: day 2, 3, 4, 5, 6, 7, and\
  \ 8.\nReturn the minimum number of dollars you need to travel every day in the given\
  \ list of days.\n \nExample 1:\nInput: days = [1,4,6,7,8,20], costs = [2,7,15]\n\
  Output: 11\nExplanation: \nFor example, here is one way to buy passes that lets\
  \ you travel your travel plan:\nOn day 1, you bought a 1-day pass for costs[0] =\
  \ $2, which covered day 1.\nOn day 3, you bought a 7-day pass for costs[1] = $7,\
  \ which covered days 3, 4, ..., 9.\nOn day 20, you bought a 1-day pass for costs[0]\
  \ = $2, which covered day 20.\nIn total you spent $11 and covered all the days of\
  \ your travel.\n\n\nExample 2:\nInput: days = [1,2,3,4,5,6,7,8,9,10,30,31], costs\
  \ = [2,7,15]\nOutput: 17\nExplanation: \nFor example, here is one way to buy passes\
  \ that lets you travel your travel plan:\nOn day 1, you bought a 30-day pass for\
  \ costs[2] = $15 which covered days 1, 2, ..., 30.\nOn day 31, you bought a 1-day\
  \ pass for costs[0] = $2 which covered day 31.\nIn total you spent $17 and covered\
  \ all the days of your travel.\n\n \n\nNote:\n\n1 <= days.length <= 365\n1 <= days[i]\
  \ <= 365\ndays is in strictly increasing order.\ncosts.length == 3\n1 <= costs[i]\
  \ <= 1000"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def minCostTickets (days : List Nat) (costs : List Nat) : Nat :=\
  \ sorry\n\ntheorem min_cost_tickets_cost_bounds\n  (days : List Nat)\n  (costs :\
  \ List Nat)\n  (h1 : days.length > 0)\n  (h2 : costs.length = 3)\n  (h3 : ∀ d ∈\
  \ days, d ≥ 1 ∧ d ≤ 365)\n  (h4 : ∀ c ∈ costs, c ≥ 1 ∧ c ≤ 1000)\n  (h5 : days.Nodup)\n\
  \  : let result := minCostTickets days costs\n    result ≥ min (costs[0]!) (min\
  \ (costs[1]!/7) (costs[2]!/30)) * days.length ∧\n    result ≤ costs[0]! * days.length\
  \ :=\n  sorry\n"
"vc-theorems": "theorem weekly_window_cost\n  (days : List Nat)\n  (costs : List Nat)\n\
  \  (h1 : days.length > 0)\n  (h2 : costs.length = 3)\n  (h3 : ∀ d ∈ days, d ≥ 1\
  \ ∧ d ≤ 7)\n  (h4 : ∀ c ∈ costs, c ≥ 1 ∧ c ≤ 1000)\n  (h5 : days.Nodup) :\n  minCostTickets\
  \ days costs ≤ min costs[1]! (costs[0]! * days.length) :=\n  sorry\n\n\ntheorem\
  \ consecutive_days_cost\n  (costs : List Nat)\n  (days : List Nat)\n  (h1 : costs.length\
  \ = 3)\n  (h2 : days = List.range 7)\n  (h3 : ∀ c ∈ costs, c ≥ 1 ∧ c ≤ 1000) :\n\
  \  minCostTickets days costs = min (costs[0]! * 7) (min costs[1]! costs[2]!) :=\n\
  \  sorry\n\n/--\ninfo: 11\n-/\n#guard_msgs in\n#eval min_cost_tickets [1, 4, 6,\
  \ 7, 8, 20] [2, 7, 15]\n\n/--\ninfo: 17\n-/\n#guard_msgs in\n#eval min_cost_tickets\
  \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31] [2, 7, 15]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
