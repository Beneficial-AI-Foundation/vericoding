"vc-description": "Convert DD (decimal degrees) position to DMS (degrees, minutes,\
  \ seconds).\n\n##### Inputs:\n`dd_lat` and `dd_lon` 2 strings representing the latitude\
  \ and the longitude in degree -i.e. 2 floats included in [-90, 90] and [-180, 180].\
  \ Note that latitude 0 is north, longitude 0 is east.\n\n##### Outputs:\nA tuple\
  \ of DMS latitudes formated as follows:\n`DDD*mm'ss.sss\"C`\n\nWith:\n- `DDD`: degrees\n\
  - `mm`: minutes\n- `ss.sss`: seconds rounded to 3 decimals\n- `C`: first letter\
  \ uppercase of the cardinal direction\n\n##### ressources\nabout WGS 84 on [Wikipedia](https://en.wikipedia.org/wiki/World_Geodetic_System#WGS84)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def convert_to_dms (lat: String) (lon: String) : String × String\
  \ :=\n  sorry\n"
"vc-theorems": "theorem coordinate_format_length \n  {lat: Float} {lon: Float} \n\
  \  (hlat: -90 ≤ lat ∧ lat ≤ 90) \n  (hlon: -180 ≤ lon ∧ lon ≤ 180) :\n  let (lat_str,\
  \ lon_str) := convert_to_dms (toString lat) (toString lon)\n  String.length lat_str\
  \ ≥ 14 ∧ \n  String.length lon_str ≥ 14 :=\nsorry\n\n\ntheorem coordinate_format_direction\n\
  \  {lat: Float} {lon: Float}\n  (hlat: -90 ≤ lat ∧ lat ≤ 90)\n  (hlon: -180 ≤ lon\
  \ ∧ lon ≤ 180) :\n  let (lat_str, lon_str) := convert_to_dms (toString lat) (toString\
  \ lon)\n  let pos : String.Pos := ⟨Nat.sub lat_str.length 1⟩\n  let lat_last :=\
  \ lat_str.get? pos\n  let lon_last := lon_str.get? pos\n  (lat_last = some 'N' ∨\
  \ lat_last = some 'S') ∧\n  (lon_last = some 'E' ∨ lon_last = some 'W') :=\nsorry\n\
  \n\ntheorem direction_consistency\n  {lat: Float} {lon: Float}\n  (hlat: -90 ≤ lat\
  \ ∧ lat ≤ 90) \n  (hlon: -180 ≤ lon ∧ lon ≤ 180) :\n  let (lat_str, lon_str) :=\
  \ convert_to_dms (toString lat) (toString lon)\n  let pos : String.Pos := ⟨Nat.sub\
  \ lat_str.length 1⟩\n  let lat_last := lat_str.get? pos\n  let lon_last := lon_str.get?\
  \ pos\n  (lat_last = some 'N' ↔ lat ≥ 0) ∧\n  (lon_last = some 'E' ↔ lon ≥ 0) :=\n\
  sorry\n\n\ntheorem coordinate_parts_format\n  {lat: Float} {lon: Float}\n  (hlat:\
  \ -90 ≤ lat ∧ lat ≤ 90)\n  (hlon: -180 ≤ lon ∧ lon ≤ 180) :\n  let (lat_str, lon_str)\
  \ := convert_to_dms (toString lat) (toString lon)\n  let lat_parts := (lat_str.dropRight\
  \ 1).split (· == '*')\n  let lon_parts := (lon_str.dropRight 1).split (· == '*')\n\
  \  (String.length lat_parts[0]! = 3 ∧ String.length lon_parts[0]! = 3) ∧\n  let\
  \ lat_min_sec := lat_parts[1]!.split (· == '\\'')\n  let lon_min_sec := lon_parts[1]!.split\
  \ (· == '\\'')\n  (String.length lat_min_sec[0]! = 2 ∧ String.length lon_min_sec[0]!\
  \ = 2) ∧\n  (String.length lat_min_sec[1]! = 7 ∧ String.length lon_min_sec[1]! =\
  \ 7) :=\nsorry\n\n/--\ninfo: ('035*01\\'58.781\"N', '033*14\\'01.519\"E')\n-/\n\
  #guard_msgs in\n#eval convert_to_dms \"35.03299485527936\" \"33.233755230903625\"\
  \n\n/--\ninfo: ('037*06\\'41.096\"S', '012*17\\'03.541\"W')\n-/\n#guard_msgs in\n\
  #eval convert_to_dms \"-37.111415669561595\" \"-12.284317023586482\"\n\n/--\ninfo:\
  \ ('019*36\\'53.975\"N', '155*28\\'55.841\"W')\n-/\n#guard_msgs in\n#eval convert_to_dms\
  \ \"19.61499312350978\" \"-155.48217818140984\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
