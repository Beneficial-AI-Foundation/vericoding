"vc-description": "There are N towns located in a line, conveniently numbered 1 through\
  \ N. Takahashi the merchant is going on a travel from town 1 to town N, buying and\
  \ selling apples.\nTakahashi will begin the travel at town 1, with no apple in his\
  \ possession. The actions that can be performed during the travel are as follows:\n\
  \ - Move: When at town i (i < N), move to town i + 1.\n - Merchandise: Buy or sell\
  \ an arbitrary number of apples at the current town. Here, it is assumed that one\
  \ apple can always be bought and sold for A_i yen (the currency of Japan) at town\
  \ i (1 ≦ i ≦ N), where A_i are distinct integers. Also, you can assume that he has\
  \ an infinite supply of money.\nFor some reason, there is a constraint on merchandising\
  \ apple during the travel: the sum of the number of apples bought and the number\
  \ of apples sold during the whole travel, must be at most T. (Note that a single\
  \ apple can be counted in both.)\nDuring the travel, Takahashi will perform actions\
  \ so that the profit of the travel is maximized. Here, the profit of the travel\
  \ is the amount of money that is gained by selling apples, minus the amount of money\
  \ that is spent on buying apples. Note that we are not interested in apples in his\
  \ possession at the end of the travel.\nAoki, a business rival of Takahashi, wants\
  \ to trouble Takahashi by manipulating the market price of apples. Prior to the\
  \ beginning of Takahashi's travel, Aoki can change A_i into another arbitrary non-negative\
  \ integer A_i' for any town i, any number of times. The cost of performing this\
  \ operation is |A_i - A_i'|. After performing this operation, different towns may\
  \ have equal values of A_i.\nAoki's objective is to decrease Takahashi's expected\
  \ profit by at least 1 yen. Find the minimum total cost to achieve it. You may assume\
  \ that Takahashi's expected profit is initially at least 1 yen.\n\n-----Constraints-----\n\
  \ - 1 ≦ N ≦ 10^5\n - 1 ≦ A_i ≦ 10^9 (1 ≦ i ≦ N)\n - A_i are distinct.\n - 2 ≦ T\
  \ ≦ 10^9\n - In the initial state, Takahashi's expected profit is at least 1 yen.\n\
  \n-----Input-----\nThe input is given from Standard Input in the following format:\n\
  N T\nA_1 A_2 ... A_N\n\n-----Output-----\nPrint the minimum total cost to decrease\
  \ Takahashi's expected profit by at least 1 yen.\n\n-----Sample Input-----\n3 2\n\
  100 50 200\n\n-----Sample Output-----\n1\n\nIn the initial state, Takahashi can\
  \ achieve the maximum profit of 150 yen as follows:\n - Move from town 1 to town\
  \ 2.\n - Buy one apple for 50 yen at town 2.\n - Move from town 2 to town 3.\n -\
  \ Sell one apple for 200 yen at town 3.\nIf, for example, Aoki changes the price\
  \ of an apple at town 2 from 50 yen to 51 yen, Takahashi will not be able to achieve\
  \ the profit of 150 yen. The cost of performing this operation is 1, thus the answer\
  \ is 1.\nThere are other ways to decrease Takahashi's expected profit, such as changing\
  \ the price of an apple at town 3 from 200 yen to 199 yen."
"vc-preamble": "import Imports.AllImports\n\ndef List.maximum' (l : List Nat) : Nat\
  \ := \n  match l with\n  | [] => 0\n  | x::xs => List.foldl Nat.max x xs\n\n\ndef\
  \ List.isStrictlyIncreasing (l : List Nat) : Prop :=\n  ∀ i j, i < j → j < l.length\
  \ → l[i]! < l[j]!\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve (N : Nat) (T : Nat) (A : List Nat) : Nat := sorry\n\n\
  theorem output_is_valid_count {N T : Nat} {A : List Nat} \n  (h1 : N = A.length)\n\
  \  (h2 : T = A.maximum')\n  (h3 : ∀ x ∈ A, 1 ≤ x ∧ x ≤ 1000)\n  (h4 : 2 ≤ N ∧ N\
  \ ≤ 100) :\n  0 ≤ solve N T A := sorry\n"
"vc-theorems": "theorem strictly_increasing_has_one_max_gain {N T : Nat} {A : List\
  \ Nat}\n  (h1 : N = A.length)\n  (h2 : T = A.maximum')\n  (h3 : ∀ x ∈ A, 1 ≤ x ∧\
  \ x ≤ 1000)\n  (h4 : 2 ≤ N ∧ N ≤ 100)\n  (h5 : A.isStrictlyIncreasing) :\n  solve\
  \ N T A = 1 := sorry\n\n\ntheorem result_bounded_by_input_size {N T : Nat} {A :\
  \ List Nat}\n  (h1 : N = A.length)\n  (h2 : T = A.maximum')\n  (h3 : ∀ x ∈ A, 1\
  \ ≤ x ∧ x ≤ 1000)\n  (h4 : 2 ≤ N ∧ N ≤ 100) :\n  solve N T A ≤ N := sorry\n\n/--\n\
  info: 1\n-/\n#guard_msgs in\n#eval solve 3 2 [100, 50, 200]\n\n/--\ninfo: 2\n-/\n\
  #guard_msgs in\n#eval solve 5 8 [50, 30, 40, 10, 20]\n\n/--\ninfo: 2\n-/\n#guard_msgs\
  \ in\n#eval solve 10 100 [7, 10, 4, 5, 9, 3, 6, 8, 2, 1]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
