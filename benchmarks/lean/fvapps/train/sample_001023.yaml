"vc-description": "Chef is planning a huge party for all of you and has ordered M\
  \ pizzas. He wants to invite as many people to the party. However, he knows that\
  \ everyone will have exactly one slice of a pizza (regardless of the size) and he\
  \ wants to make sure that he has enough pizza slices. \nChef is very lazy and will\
  \ only make a total of N straight cuts among all the pizzas. Each pizza is also\
  \ of different size and to avoid the slices getting too small the chef can only\
  \ make a max of Ai cuts to the ith pizza. He wants to maximize the number of slices\
  \ of pizza. Since chef is busy with preparing other aspects of the party he wants\
  \ you to find out the maximum number of slices he can get following the constraints.\
  \ \nIf a pizza is not cut at all then it is considered as 1 slice.  \n\n-----Input-----\n\
  First line contains two integers M and N.\nThe second line of input contains the\
  \ array A.\n\n-----Output-----\nOutput a single integer - the maximum number of\
  \ slices chef can get.\n\n-----Constraints-----\n- 1 ≤ M ≤ 2*105\n- 1 ≤ N,Ai ≤ 2*105\n\
  \n-----Subtasks-----\n- Subtask 1: 1 ≤ M,N ≤ 100 - 10 points \n- Subtask 2: 1 ≤\
  \ N ≤ 100, \n1 ≤ M ≤ 105 - 20 points\n- Subtask 3: Original Constraints - 70 points\n\
  \n-----Example-----\nInput:\n5 10\n1 2 3 4 5\nOutput:\n31\n\n-----Explanation-----\n\
  Example case 1. One of the optimal way to cut would be to do {0, 1,  0, 4, 5} cuts."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def maxPizzaSlices (m: Nat) (n: Nat) (cuts: List Nat) : Nat :=\n\
  \  sorry\n"
"vc-theorems": "theorem max_pizza_slices_positive (m n: Nat) (cuts: List Nat) (h1:\
  \ m > 0) (h2: n > 0) (h3: cuts.length > 0) :\n  maxPizzaSlices m n cuts > 0 :=\n\
  \  sorry\n\n\ntheorem max_pizza_slices_min_bound (m n: Nat) (cuts: List Nat) (h1:\
  \ m > 0) (h2: n > 0) (h3: cuts.length > 0) :\n  maxPizzaSlices m n cuts ≥ m :=\n\
  \  sorry\n\n\ntheorem max_pizza_slices_max_bound (m n: Nat) (cuts: List Nat) (h1:\
  \ m > 0) (h2: n > 0) (h3: cuts.length > 0) :\n  maxPizzaSlices m n cuts ≤ m + (n\
  \ * (n + 1)) / 2 :=\n  sorry\n\n\ntheorem single_pizza_formula (n cuts: Nat) (h1:\
  \ cuts ≤ n) :\n  maxPizzaSlices 1 n [cuts] = 1 + (cuts * (cuts + 1)) / 2 :=\n  sorry\n\
  \n/--\ninfo: 31\n-/\n#guard_msgs in\n#eval max_pizza_slices 5 10 [1, 2, 3, 4, 5]\n\
  \n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval max_pizza_slices 2 3 [1, 2]\n\n/--\ninfo:\
  \ 8\n-/\n#guard_msgs in\n#eval max_pizza_slices 3 4 [2, 1, 1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
