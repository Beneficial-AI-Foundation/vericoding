"vc-description": "The Menger Sponge is a three-dimensional fractal, first described\
  \ by Karl Menger in 1926.\n\n![Mengers Sponge (Level 0-3)](http://i.imgur.com/V6Rb4Za.jpg)\n\
  ###### _An illustration of the iterative construction of a Menger sponge_\n\nA method\
  \ of constructing a Menger Sponge can be visualized as follows:\n1. Start from a\
  \ cube (first part of image).\n2. Scale down the cube so that side length is 1/3\
  \ of its original, and make 20 copies of it.\n3. Place the copies so that they measure\
  \ the same size as the original cube but without its central parts (next part of\
  \ image)\n4. Repeat the process from step 2 for the new smaller cubes from the previous\
  \ step.\n5. In each iteration (e.g. repeating the last three steps), the effect\
  \ will be that parts of the cube will be removed, they'll never be added. Menger\
  \ sponge will always consist of parts will never be removed, regardless of how many\
  \ iterations you do.\n\n___\n\nAn alternative explanation:\n1. Start from a cube\
  \ (first part of image).\n2. Devide each cube into 27 equal sized cubes.\n3. Remove\
  \ the middle-cube and the six cubes on each side of the group of 27 cubes (second\
  \ part of image).\n4. Repeat the process from step 2 for the smaller cubes (third\
  \ and fourth part of image).\n\n## Task\nIn this kata you will create a function\
  \ that takes non negative integers (from 0 to n) and return the amount of cubes\
  \ that the Menger Sponge would have in that specific iteration.\n\n\n## Example\n\
  ```\ncalc_ms(0) == 1\ncalc_ms(1) == 20\ncalc_ms(2) == 400\ncalc_ms(3) == 8000\n\
  calc_ms(4) == 160000\ncalc_ms(5) == 3200000\ncalc_ms(6) == 64000000\n```\n\nHappy\
  \ coding!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calc_ms (n : Int) : Int := sorry\n\ntheorem calc_ms_positive\
  \ (n : Nat) : calc_ms n > 0 := sorry\n"
"vc-theorems": "theorem calc_ms_equals_twenty_pow (n : Nat) : calc_ms n = 20 ^ n :=\
  \ sorry\n\ntheorem calc_ms_growth (n : Nat) : n < 5 → calc_ms (n + 1) > calc_ms\
  \ n := sorry\n\n\ntheorem calc_ms_base : calc_ms 0 = 1 := sorry\n\ntheorem calc_ms_power\
  \ (n₁ n₂ : Nat) : calc_ms (n₁ + n₂) = calc_ms n₁ * calc_ms n₂ := sorry\n\n/--\n\
  info: 1\n-/\n#guard_msgs in\n#eval calc_ms 0\n\n/--\ninfo: 20\n-/\n#guard_msgs in\n\
  #eval calc_ms 1\n\n/--\ninfo: 8000\n-/\n#guard_msgs in\n#eval calc_ms 3\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
