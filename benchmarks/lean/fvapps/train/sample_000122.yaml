"vc-description": "Suppose an array sorted in ascending order is rotated at some pivot\
  \ unknown to you beforehand.\n\n(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).\n\
  \nYou are given a target value to search. If found in the array return true, otherwise\
  \ return false.\n\nExample 1:\n\n\nInput: nums = [2,5,6,0,0,1,2], target = 0\nOutput:\
  \ true\n\n\nExample 2:\n\n\nInput: nums = [2,5,6,0,0,1,2], target = 3\nOutput: false\n\
  \nFollow up:\n\n\n       This is a follow up problem to Search in Rotated Sorted\
  \ Array, where nums may contain duplicates.\n       Would this affect the run-time\
  \ complexity? How and why?"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def search (list : List Int) (target : Int) : Bool := sorry\n\n\
  theorem search_target_in_list_returns_true (nums : List Int) (target : Int) : \n\
  \  search (nums ++ [target]) target = true := sorry\n"
"vc-theorems": "theorem search_target_not_in_list_returns_false (nums : List Int)\
  \ (target : Int) :\n  (¬ target ∈ nums) → search nums target = false := sorry\n\n\
  \ntheorem search_matches_contains (nums : List Int) (target : Int) :\n  search nums\
  \ target = (target ∈ nums) := sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval\
  \ search [2, 5, 6, 0, 0, 1, 2] 0\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval\
  \ search [2, 5, 6, 0, 0, 1, 2] 3\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval search\
  \ [1] 1\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
