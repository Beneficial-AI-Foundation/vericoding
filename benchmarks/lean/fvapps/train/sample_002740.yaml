"vc-description": "The objective is to disambiguate two given names: the original\
  \ with another\n\nThis kata is slightly more evolved than the previous one: [Author\
  \ Disambiguation: to the point!](https://www.codewars.com/kata/580a429e1cb4028481000019).\n\
  \nThe function ```could_be``` is still given the original name and another one to\
  \ test\nagainst. \n\n```python\n# should return True even with 'light' variations\
  \ (more details in section below)\n> could_be(\"Chuck Norris\", u\"chück!\")\nTrue\n\
  \n# should False otherwise (whatever you may personnaly think)\n> could_be(\"Chuck\
  \ Norris\", \"superman\")\nFalse\n``` \n\n**Watch out**: When accents comes into\
  \ the game, they will enter through **UTF-8 unicodes. **\n\nThe function should\
  \ be tolerant with regards to:\n\n * upper and lower cases: ```could_be(A, a) :\
  \ True```\n * accents: ```could_be(E, é) : True```\n * dots: ```could_be(E., E)\
  \ : True```\n * same for other ending punctuations in [!,;:?]: ```could_be(A, A!)\
  \ : True```\n\nOn the other hand, more consideration needs to be given to *composed\
  \ names*...\nLet's be bold about it: if you have any, they will be considered as\
  \ a whole :\n\n```python\n# We still have:\n> could_be(\"Carlos Ray Norris\", \"\
  Carlos Ray Norris\")\nTrue\n> could_be(\"Carlos-Ray Norris\", \"Carlos-Ray Norris\"\
  )\nTrue\n\n# But:\n> could_be(\"Carlos Ray Norris\", \"Carlos-Ray Norris\")\nFalse\n\
  > could_be(\"Carlos-Ray Norris\", \"Carlos Ray Norris\")\nFalse\n> could_be(\"Carlos-Ray\
  \ Norris\", \"Carlos Ray-Norris\")\nFalse\n```\n \nAmong the valid combinaisons\
  \ of the fullname \"Carlos Ray Norris\", you will find\n\n```python\ncould_be(\"\
  Carlos Ray Norris\", \"carlos ray\") : True\ncould_be(\"Carlos Ray Norris\", \"\
  Carlos. Ray, Norris;\") : True\ncould_be(\"Carlos Ray Norris\", u\"Carlòs! Norris\"\
  ) : True\n```\n\nToo easy ? Try the next step: [Author Disambiguation: Signatures\
  \ worth it](https://www.codewars.com/kata/author-disambiguation-signatures-worth-it)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def could_be (s1 s2 : String) : Bool := sorry\n\ntheorem empty_target_is_false\
  \ (s1 s2 : String) :\n  s2.trim = \"\" → could_be s1 s2 = false := sorry\n"
"vc-theorems": "theorem subset_name_property (first middle last : String) (h : first\
  \ ≠ \"\") :\n  could_be (s!\"{first} {middle} {last}\") (s!\"{first} {last}\") =\
  \ true := sorry\n\n\ntheorem basic_case_exact_match :\n  could_be \"John Smith\"\
  \ \"John Smith\" = true := sorry\n\n\ntheorem basic_case_case_insensitive :\n  could_be\
  \ \"John Smith\" \"john smith\" = true := sorry\n\n\ntheorem basic_case_hyphen_match\
  \ :\n  could_be \"John-Smith\" \"John-Smith\" = true := sorry\n\n\ntheorem basic_case_hyphen_mismatch\
  \ :\n  could_be \"John-Smith\" \"John Smith\" = false := sorry\n\n/--\ninfo: True\n\
  -/\n#guard_msgs in\n#eval could_be \"Carlos Ray Norris\" \"Carlos Ray Norris\"\n\
  \n/--\ninfo: True\n-/\n#guard_msgs in\n#eval could_be \"Carlos Ray Norris\" \"Carlos.\
  \ Ray; Norris,\"\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval could_be \"Carlos-Ray\
  \ Norris\" \"Carlos Ray Norris\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
