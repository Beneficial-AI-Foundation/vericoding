"vc-description": "Many websites use weighted averages of various polls to make projections\
  \ for elections. They’re weighted based on a variety of factors, such as historical\
  \ accuracy of the polling firm, sample size, as well as date(s). The weights, in\
  \ this kata, are already calculated for you. All you need to do is convert a set\
  \ of polls with weights, into a fixed projection for the result.\n\n#### Task:\n\
  \nYour job is to convert an array of candidates (variable name `candidates`) and\
  \ an array of polls (variable name `polls`), each poll with two parts, a result\
  \ and a weight, into a guess of the result, with each value rounded to one decimal\
  \ place, through use of a weighted average. Weights can be zero! Don't worry about\
  \ the sum not totalling 100. The final result should be a hash in Ruby and Crystal,\
  \ dictionary in Python, or object in JS in the format shown below:\n\n```python\n\
  { \n  \"\": \"\",\n  \"\": \"\",\n  ...\n}\n\nFor your convenience, a function named\
  \ round1 has been defined for you. You can\nuse it to round to the nearest tenth\
  \ correctly (due to the inaccuracy of round\nand floats in general).\n```\n\n_The\
  \ input should not be modified._\n\n#### Calculation for projections:\n\n```\n[(poll1\
  \ * weight1) + (poll2 * weight2) + ...] / (weight1 + weight2 + ...)\n```\n\n####\
  \ An example:\n\n```python\ncandidates = ['A', 'B', 'C']\n\npoll1res = [20, 30,\
  \ 50]\npoll1wt = 1\npoll1 = [poll1res, poll1wt]\n\npoll2res = [40, 40, 20]\npoll2wt\
  \ = 0.5\npoll2 = [poll2res, poll2wt]\n\npoll3res = [50, 40, 10]\npoll3wt = 2\npoll3\
  \ = [poll3res, poll3wt]\n\npolls = [poll1, poll2, poll3]\n\npredict(candidates,\
  \ polls)\n#=> {\n     'A': 40,\n     'B': 37.1,\n     'C': 22.9\n    }\n\n# because...\n\
  \ncandidate 'A' weighted average\n  = ((20 * 1) + (40 * 0.5) + (50 * 2)) / (1 +\
  \ 0.5 + 2)\n  = (20 + 20 + 100) / 3.5\n  = 140 / 3.5\n  = 40\n\ncandidate 'B' weighted\
  \ average\n  = ((30 * 1) + (40 * 0.5) + (40 * 2)) / (1 + 0.5 + 2)\n  = (30 + 20\
  \ + 80) / 3.5\n  = 130 / 3.5\n  = 37.142857...\n  ≈ 37.1 (round to nearest tenth)\n\
  \ncandidate 'C' weighted average\n  = ((50 * 1) + (20 * 0.5) + (10 * 2)) / (1 +\
  \ 0.5 + 2)\n  = (50 + 10 + 20) / 3.5\n  = 80 / 3.5\n  = 22.857142...\n  ≈ 22.9 (round\
  \ to nearest tenth)\n```\n\nAlso check out my other creations — [Keep the Order](https://www.codewars.com/kata/keep-the-order),\
  \ [Naming Files](https://www.codewars.com/kata/naming-files), [Square and Cubic\
  \ Factors](https://www.codewars.com/kata/square-and-cubic-factors), [Identify Case](https://www.codewars.com/kata/identify-case),\
  \ [Split Without Loss](https://www.codewars.com/kata/split-without-loss), [Adding\
  \ Fractions](https://www.codewars.com/kata/adding-fractions),\n[Random Integers](https://www.codewars.com/kata/random-integers),\
  \ [Implement String#transpose](https://www.codewars.com/kata/implement-string-number-transpose),\
  \ [Implement Array#transpose!](https://www.codewars.com/kata/implement-array-number-transpose),\
  \ [Arrays and Procs #1](https://www.codewars.com/kata/arrays-and-procs-number-1),\
  \ and [Arrays and Procs #2](https://www.codewars.com/kata/arrays-and-procs-number-2).\n\
  \nIf you notice any issues or have any suggestions/comments whatsoever, please don't\
  \ hesitate to mark an issue or just comment. Thanks!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def round1 (x : Float) : Float := sorry\n\ndef predict (candidates\
  \ : List String) (polls : List (List Float × Float)) : List (String × Float) :=\
  \ sorry\n"
"vc-theorems": "theorem round1_multiple_of_point_one (x : Float) : \n  let r := round1\
  \ x\n  Float.abs (r * 10 - Float.round (r * 10)) < 1e-10 := sorry\n\n\ntheorem round1_close_to_input\
  \ (x : Float) :\n  Float.abs (x - round1 x) ≤ 0.05 + 1e-10 := sorry\n\n\ntheorem\
  \ predict_contains_all_candidates (candidates : List String) (polls : List (List\
  \ Float × Float)) :\n  List.length (predict candidates polls) = List.length candidates\
  \ := sorry\n\n\ntheorem predict_in_bounds (candidates : List String) (polls : List\
  \ (List Float × Float)) (p : String × Float) :\n  p ∈ predict candidates polls →\
  \ 0 ≤ p.2 ∧ p.2 ≤ 100 := sorry\n\n\ntheorem predict_sums_to_hundred (candidates\
  \ : List String) (polls : List (List Float × Float)) :\n  let predictions := predict\
  \ candidates polls\n  Float.abs (List.foldl (fun acc p => acc + p.2) 0 predictions\
  \ - 100) < 0.2 := sorry\n\n\ntheorem predict_rounded (candidates : List String)\
  \ (polls : List (List Float × Float)) (p : String × Float) :\n  p ∈ predict candidates\
  \ polls →\n  Float.abs (p.2 * 10 - Float.round (p.2 * 10)) < 1e-10 := sorry\n\n\
  /--\ninfo: expected\n-/\n#guard_msgs in\n#eval predict [\"A\", \"B\", \"C\"] [[[20,\
  \ 30, 50], 1.0], [[40, 40, 20], 0.5], [[50, 40, 10], 2.0]]\n\n/--\ninfo: expected2\n\
  -/\n#guard_msgs in\n#eval predict candidates [[[30, 30, 40], 1.0], [[20, 40, 40],\
  \ 1.0]]\n\n/--\ninfo: expected3\n-/\n#guard_msgs in\n#eval predict candidates [[[45,\
  \ 35, 20], 1.0]]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
