"vc-description": "In this Kata, you will be given a multi-dimensional array containing\
  \ `2 or more` sub-arrays of integers. Your task is to find the maximum product that\
  \ can be formed by taking any one element from each sub-array.\n\n```\nExamples:\n\
  solve( [[1, 2],[3, 4]] ) = 8. The max product is given by 2 * 4\nsolve( [[10,-15],[-1,-3]]\
  \ ) = 45, given by (-15) * (-3)\nsolve( [[1,-1],[2,3],[10,-100]] ) = 300, given\
  \ by (-1) * 3 * (-100)\n```\n\nMore examples in test cases. Good luck!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve (nums : List (List Int)) : Int :=\n  sorry\n"
"vc-theorems": "theorem solve_positive_only {nums : List (List Int)}\n  (h : ∀ l ∈\
  \ nums, ∀ x ∈ l, 0 ≤ x ∧ x ≤ 100) :\n  solve nums = (nums.map (List.foldl max 0)).foldl\
  \ (· * ·) 1 :=\nsorry\n\n\ntheorem solve_unit_arrays {nums : List (List Int)}\n\
  \  (h : ∀ l ∈ nums, l = [1]) :\n  solve nums = 1 :=\nsorry\n\n/--\ninfo: 8\n-/\n\
  #guard_msgs in\n#eval solve [[1, 2], [3, 4]]\n\n/--\ninfo: 45\n-/\n#guard_msgs in\n\
  #eval solve [[10, -15], [-1, -3]]\n\n/--\ninfo: 12\n-/\n#guard_msgs in\n#eval solve\
  \ [[-1, 2, -3, 4], [1, -2, 3, -4]]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
