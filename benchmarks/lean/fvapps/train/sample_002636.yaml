"vc-description": "# Task\n Consider the following ciphering algorithm:\n```\nFor\
  \ each character replace it with its code.\nConcatenate all of the obtained numbers.\n\
  ```\nGiven a ciphered string, return the initial one if it is known that it consists\
  \ only of lowercase letters.\n\n Note: here the character's code means its `decimal\
  \ ASCII code`, the numerical representation of a character used by most modern programming\
  \ languages.\n\n# Example\n\n For `cipher = \"10197115121\"`, the output should\
  \ be `\"easy\"`.\n\n Explanation: \n ```\n charCode('e') = 101, \n charCode('a')\
  \ = 97, \n charCode('s') = 115 \n charCode('y') = 121.\n```\n# Input/Output\n\n\n\
  \ - `[input]` string `cipher`\n\n   A non-empty string which is guaranteed to be\
  \ a cipher for some other string of lowercase letters.\n\n\n - `[output]` a string"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def decipher (s : String) : String := sorry \n\ntheorem decipher_produces_lowercase\
  \ (codes : List String) \n  (h : ∀ c ∈ codes, ∃ n : Nat, n ≥ 97 ∧ n ≤ 122 ∧ c =\
  \ toString n) :\n  ∀ c ∈ (decipher (String.join codes)).data, c ≥ 'a' ∧ c ≤ 'z'\
  \ := sorry\n"
"vc-theorems": "theorem decipher_preserves_length (codes : List String)\n  (h : ∀\
  \ c ∈ codes, ∃ n : Nat, n ≥ 97 ∧ n ≤ 122 ∧ c = toString n) :\n  (decipher (String.join\
  \ codes)).length = codes.length := sorry \n\n\ntheorem decipher_maps_to_original_codes\
  \ (codes : List String)\n  (h : ∀ c ∈ codes, ∃ n : Nat, n ≥ 97 ∧ n ≤ 122 ∧ c = toString\
  \ n)\n  (i : Fin codes.length) :\n  let result := decipher (String.join codes)\n\
  \  Char.toNat ((result.data.get ⟨i.val, by sorry⟩)) = String.toNat! (codes.get i)\
  \ := sorry\n\n\ntheorem decipher_round_trip (text : String)\n  (h : ∀ c ∈ text.data,\
  \ c ≥ 'a' ∧ c ≤ 'z') :\n  decipher (String.join (text.data.map (fun c => toString\
  \ (Char.toNat c)))) = text := sorry\n\n\ntheorem decipher_edge_cases :\n  decipher\
  \ \"97\" = \"a\" ∧\n  decipher \"122\" = \"z\" ∧\n  decipher \"\" = \"\" := sorry\n\
  \n/--\ninfo: 'easy'\n-/\n#guard_msgs in\n#eval decipher \"10197115121\"\n\n/--\n\
  info: 'b'\n-/\n#guard_msgs in\n#eval decipher \"98\"\n\n/--\ninfo: 'z'\n-/\n#guard_msgs\
  \ in\n#eval decipher \"122\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
