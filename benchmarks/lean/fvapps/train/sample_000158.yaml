"vc-description": "One way to serialize a binary tree is to use pre-order traversal.\
  \ When we encounter a non-null node, we record the node's value. If it is a null\
  \ node, we record using a sentinel value such as #.\n\n\n     _9_\n    /   \\\n\
  \   3     2\n  / \\   / \\\n 4   1  #  6\n/ \\ / \\   / \\\n# # # #   # #\n\n\n\
  For example, the above binary tree can be serialized to the string \"9,3,4,#,#,1,#,#,2,#,6,#,#\"\
  , where # represents a null node.\n\nGiven a string of comma separated values, verify\
  \ whether it is a correct preorder traversal serialization of a binary tree. Find\
  \ an algorithm without reconstructing the tree.\n\nEach comma separated value in\
  \ the string must be either an integer or a character '#' representing null pointer.\n\
  \nYou may assume that the input format is always valid, for example it could never\
  \ contain two consecutive commas such as \"1,,3\".\n\nExample 1:\n\n\nInput: \"\
  9,3,4,#,#,1,#,#,2,#,6,#,#\"\nOutput: true\n\nExample 2:\n\n\nInput: \"1,#\"\nOutput:\
  \ false\n\n\nExample 3:\n\n\nInput: \"9,#,#,1\"\nOutput: false"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_valid_serialization (s : String) : Bool := sorry\n\ntheorem\
  \ slot_balance_for_valid_serializations {preorder : String} :\n  is_valid_serialization\
  \ preorder →\n  let nodes := preorder.splitOn \",\"\n  let final_slot := nodes.foldl\
  \ (fun slot node =>\n    if node = \"#\" then slot - 1 else slot + 1\n  ) 1\n  final_slot\
  \ = 0 := \nsorry\n"
"vc-theorems": "theorem all_nulls_valid_only_simple {preorder : String} :\n  (∀ n\
  \ ∈ preorder.splitOn \",\", n = \"#\") →\n  is_valid_serialization preorder →\n\
  \  preorder = \"#\" ∨ preorder = \"#,#\" :=\nsorry\n\n\ntheorem no_negative_slots_for_prefixes\
  \ {preorder : String} {i : Nat} :\n  let nodes := preorder.splitOn \",\"\n  let\
  \ slot := (nodes.take (i+1)).foldl (fun slot node => \n    if node = \"#\" then\
  \ slot - 1 else slot + 1\n  ) 1\n  i < nodes.length →\n  is_valid_serialization\
  \ (String.intercalate \",\" (nodes.take (i+1))) →\n  slot ≥ 0 :=\nsorry\n\n\ntheorem\
  \ trivial_cases :\n  (¬ is_valid_serialization \"\") ∧\n  (is_valid_serialization\
  \ \"#\") ∧\n  (¬ is_valid_serialization \"1\") :=\nsorry\n\n/--\ninfo: True\n-/\n\
  #guard_msgs in\n#eval is_valid_serialization \"9,3,4,#,#,1,#,#,2,#,6,#,#\"\n\n/--\n\
  info: False\n-/\n#guard_msgs in\n#eval is_valid_serialization \"1,#\"\n\n/--\ninfo:\
  \ False\n-/\n#guard_msgs in\n#eval is_valid_serialization \"9,#,#,1\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
