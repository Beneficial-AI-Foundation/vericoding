"vc-description": "Brief\n=====\nIn this easy kata your function has to take a **string**\
  \ as input and **return a string** with everything removed (*whitespaces* included)\
  \ but the **digits**. As you may have guessed **empty strings** are to be returned\
  \ as they are & if the input string contains no digits then the output will be an\
  \ **empty string**.By the way , you have to watch out for **non-string** inputs\
  \ too.Return **'Invalid input !'** for them.    \n\nHint\n====\nIf you're writing\
  \ more than 1 line of code, then think again! ;)   \nGood luck!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def digit_all (x : String) : String := sorry\n\ntheorem digit_all_only_digits\
  \ (s : String) :\n  let result := digit_all s\n  (∀ c ∈ result.data, c.isDigit)\
  \ ∨ result = \"\" := sorry\n"
"vc-theorems": "theorem digit_all_preserves_digits (s : String) :\n  let result :=\
  \ digit_all s\n  String.mk (s.data.filter Char.isDigit) = result := sorry  \n\n\n\
  theorem digit_all_output_is_subsequence (s : String) :\n  let result := digit_all\
  \ s\n  result ≠ \"Invalid input !\" →\n  ∃ l : List Nat, \n    (∀ i j, i < j → i\
  \ < l.length → j < l.length → l[i]! < l[j]!) ∧ \n    (result.data = l.map (fun i\
  \ => s.data[i]!)) := sorry\n\n/--\ninfo: '123456'\n-/\n#guard_msgs in\n#eval digit_all\
  \ \"123abc456\"\n\n/--\ninfo: ''\n-/\n#guard_msgs in\n#eval digit_all \"\"\n\n/--\n\
  info: 'Invalid input !'\n-/\n#guard_msgs in\n#eval digit_all 123\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
