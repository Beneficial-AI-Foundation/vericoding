"vc-description": "Mutation is a genetic operator used to maintain genetic diversity\
  \ from one generation of a population of genetic algorithm chromosomes to the next.\n\
  \n![Mutation](http://i.imgur.com/HngmxNN.gif)\n\nA mutation here may happen on zero\
  \ or more positions in a chromosome. It is going to check every position and by\
  \ a given probability it will decide if a mutation will occur.\n\nA mutation is\
  \ the change from `0` to `1` or from `1` to `0`.\n\n***Note:*** *Some tests are\
  \ random. If you think your algorithm is correct but the result fails, trying again\
  \ should work.*\n\n# See other katas from this series\n\n  - [Genetic Algorithm\
  \ Series - #1 Generate](http://www.codewars.com/kata/genetic-algorithm-series-number-1-generate)\n\
  \  - **Genetic Algorithm Series - #2 Mutation**\n  - [Genetic Algorithm Series -\
  \ #3 Crossover](http://www.codewars.com/kata/genetic-algorithm-series-number-3-crossover)\n\
  \  - [Genetic Algorithm Series - #4 Get population and fitnesses](http://www.codewars.com/kata/genetic-algorithm-series-number-4-get-population-and-fitnesses)\n\
  \  - [Genetic Algorithm Series - #5 Roulette wheel selection](http://www.codewars.com/kata/genetic-algorithm-series-number-5-roulette-wheel-selection)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def mutate (chromosome : List Char) (p : Float) : List Char :=\
  \ sorry\n\ntheorem mutate_preserves_length (chromosome : List Char) (p : Float)\
  \ \n  (h1 : 0 ≤ p) (h2 : p ≤ 1) :\n  (mutate chromosome p).length = chromosome.length\
  \ := sorry\n"
"vc-theorems": "theorem mutate_valid_bits (chromosome : List Char) (p : Float)\n \
  \ (h1 : 0 ≤ p) (h2 : p ≤ 1)\n  (h3 : ∀ c, c ∈ chromosome → c = '0' ∨ c = '1') :\n\
  \  ∀ c, c ∈ (mutate chromosome p) → c = '0' ∨ c = '1' := sorry\n\n\ntheorem mutate_zero_prob\
  \ (chromosome : List Char) :\n  mutate chromosome 0 = chromosome := sorry\n\n\n\
  theorem mutate_one_prob (chromosome : List Char)\n  (h : ∀ c, c ∈ chromosome → c\
  \ = '0' ∨ c = '1') :\n  ∀ (c₁ : Char) (c₂ : Char), \n    c₁ ∈ chromosome → \n  \
  \  c₂ ∈ (mutate chromosome 1) →\n    c₁ ≠ c₂ := sorry\n\n\ntheorem mutate_deterministic\
  \ (chromosome : List Char) (p : Float)\n  (h1 : 0 ≤ p) (h2 : p ≤ 1) :\n  mutate\
  \ chromosome p = mutate chromosome p := sorry\n\n/--\ninfo: '0'\n-/\n#guard_msgs\
  \ in\n#eval mutate \"0\" 0\n\n/--\ninfo: '1'\n-/\n#guard_msgs in\n#eval mutate \"\
  0\" 1\n\n/--\ninfo: len(test)\n-/\n#guard_msgs in\n#eval len mutate(test, 0.3)\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
