"vc-description": "Zonal Computing Olympiad 2013, 10 Nov 2012\nN teams participate\
  \ in a league cricket tournament on Mars, where each pair of distinct teams plays\
  \ each other exactly once. Thus, there are a total of (N × (N-1))/2 matches. An\
  \ expert has assigned a strength to each team, a positive integer. Strangely, the\
  \ Martian crowds love one-sided matches and the advertising revenue earned from\
  \ a match is the absolute value of the difference between the strengths of the two\
  \ matches. Given the strengths of the N teams, find the total advertising revenue\
  \ earned from all the matches.\n\nFor example, suppose N is 4 and the team strengths\
  \ for teams 1, 2, 3, and 4 are 3, 10, 3, and 5 respectively. Then the advertising\
  \ revenues from the 6 matches are as follows:\n\nMatch Team A Team B Ad revenue\
  \ 1 1 2 7  2 1 3 0  3 1 4 2  4 2 3 7  5 2 4 5  6 3 4 2 \n\nThus the total advertising\
  \ revenue is 23.\n\n-----Input format-----\nLine 1 : A single integer, N.\nLine\
  \ 2 : N space-separated integers, the strengths of the N teams.\n\n-----Output format-----\n\
  A single integer, the total advertising revenue from the tournament.\n\n-----Sample\
  \ input-----\n4\n3 10 3 5\n\n-----Sample output-----\n23\n\n-----Test data-----\n\
  In all subtasks, the strength of each team is an integer between 1 and 1,000 inclusive.\n\
  - Subtask 1 (30 marks) : 2 ≤ N ≤ 1,000.\n- Subtask 2 (70 marks) : 2 ≤ N ≤ 200,000.\n\
  \n-----Live evaluation data-----\n- Subtask 1: Testcases 0,1,2.\n- Subtask 2: Testcases\
  \ 3,4,5.\n\n-----Note-----\nThe answer might not fit in a variable of type int.\
  \ We recommend that type long long be used for computing all advertising revenues.\
  \ If you use printf and scanf, you can use %lld for long long."
"vc-preamble": "import Imports.AllImports\n\ndef calculate_ad_revenue (n: Nat) (team_strengths:\
  \ List Nat) : Nat := sorry\n\ndef getPairs (l: List Nat) : List (Nat × Nat) := \n\
  \  match l with\n  | [] => []\n  | x :: xs => (xs.map (fun y => (x, y))) ++ getPairs\
  \ xs\n\n\ndef abs (n: Nat) (m: Nat) : Nat :=\n  if n ≥ m then n - m else m - n\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def pairSum (pairs: List (Nat × Nat)) : Nat :=\n  match pairs with\
  \ \n  | [] => 0\n  | (x, y) :: rest => abs x y + pairSum rest\n"
"vc-theorems": "theorem revenue_nonnegative (n: Nat) (team_strengths: List Nat) \n\
  \  (h1: n ≥ 2) (h2: team_strengths.length = n) :\n  calculate_ad_revenue n team_strengths\
  \ ≥ 0 := sorry\n\n\ntheorem revenue_matches_manual_calc (n: Nat) (team_strengths:\
  \ List Nat)\n  (h1: n ≥ 2) (h2: team_strengths.length = n) :\n  calculate_ad_revenue\
  \ n team_strengths = pairSum (getPairs team_strengths) := sorry\n\n\ntheorem revenue_pair_count\
  \ (n: Nat) (team_strengths: List Nat)\n  (h1: n ≥ 2) (h2: team_strengths.length\
  \ = n) :  \n  (getPairs team_strengths).length = n * (n-1) / 2 := sorry\n\n\ntheorem\
  \ identical_strengths_zero_revenue (n: Nat) (x: Nat) \n  (h1: n ≥ 2) :\n  calculate_ad_revenue\
  \ n (List.replicate n x) = 0 := sorry\n\n\ntheorem minimal_cases :\n  calculate_ad_revenue\
  \ 2 [0, 0] = 0 ∧ \n  calculate_ad_revenue 2 [0, 1] = 1 := sorry\n\n/--\ninfo: 23\n\
  -/\n#guard_msgs in\n#eval calculate_ad_revenue 4 [3, 10, 3, 5]\n\n/--\ninfo: 4\n\
  -/\n#guard_msgs in\n#eval calculate_ad_revenue 2 [1, 5]\n\n/--\ninfo: 0\n-/\n#guard_msgs\
  \ in\n#eval calculate_ad_revenue 3 [10, 10, 10]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
