"vc-description": "Petr likes to come up with problems about randomly generated data.\
  \ This time problem is about random permutation. He decided to generate a random\
  \ permutation this way: he takes identity permutation of numbers from $1$ to $n$\
  \ and then $3n$ times takes a random pair of different elements and swaps them.\
  \ Alex envies Petr and tries to imitate him in all kind of things. Alex has also\
  \ come up with a problem about random permutation. He generates a random permutation\
  \ just like Petr but swaps elements $7n+1$ times instead of $3n$ times. Because\
  \ it is more random, OK?!\n\nYou somehow get a test from one of these problems and\
  \ now you want to know from which one.\n\n\n-----Input-----\n\nIn the first line\
  \ of input there is one integer $n$ ($10^{3} \\le n \\le 10^{6}$).\n\nIn the second\
  \ line there are $n$ distinct integers between $1$ and $n$ — the permutation of\
  \ size $n$ from the test.\n\nIt is guaranteed that all tests except for sample are\
  \ generated this way: First we choose $n$ — the size of the permutation. Then we\
  \ randomly choose a method to generate a permutation — the one of Petr or the one\
  \ of Alex. Then we generate a permutation using chosen method.\n\n\n-----Output-----\n\
  \nIf the test is generated via Petr's method print \"Petr\" (without quotes). If\
  \ the test is generated via Alex's method print \"Um_nik\" (without quotes).\n\n\
  \n-----Example-----\nInput\n5\n2 4 5 1 3\n\nOutput\nPetr\n\n\n\n-----Note-----\n\
  \nPlease note that the sample is not a valid test (because of limitations for $n$)\
  \ and is given only to illustrate input/output format. Your program still has to\
  \ print correct answer to this test to get AC.\n\nDue to randomness of input hacks\
  \ in this problem are forbidden."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_permutation (n : Nat) (perm : List Nat) : String :=\n\
  \  sorry\n"
"vc-theorems": "theorem identity_permutation (n : Nat) (h : n > 0):\n  let perm :=\
  \ List.range n\n  solve_permutation n perm = \n    if n % 2 = 0 then \"Petr\" else\
  \ \"Um_nik\" := by\n  sorry\n\n\ntheorem single_swap (n : Nat) (h : n > 1):\n  let\
  \ perm := List.range n\n  let swapped_perm := sorry -- swap first two elements\n\
  \  solve_permutation n swapped_perm = \n    if n % 2 = 0 then \"Um_nik\" else \"\
  Petr\" := by\n  sorry\n\n\ntheorem result_is_valid (n : Nat) (h : n > 0) (perm :\
  \ List Nat):\n  solve_permutation n perm = \"Petr\" ∨ \n  solve_permutation n perm\
  \ = \"Um_nik\" := by\n  sorry\n\n/--\ninfo: 'Petr'\n-/\n#guard_msgs in\n#eval solve_permutation\
  \ 5 [2, 4, 5, 1, 3]\n\n/--\ninfo: 'Um_nik'\n-/\n#guard_msgs in\n#eval solve_permutation\
  \ 3 [2, 3, 1]\n\n/--\ninfo: 'Petr'\n-/\n#guard_msgs in\n#eval solve_permutation\
  \ 4 [4, 3, 2, 1]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
