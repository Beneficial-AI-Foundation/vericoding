"vc-description": "In number theory, an  **[abundant](https://en.wikipedia.org/wiki/Abundant_number)**\
  \ number or an **[excessive](https://en.wikipedia.org/wiki/Abundant_number)** number\
  \ is one for which the sum of it's **[proper divisors](http://mathworld.wolfram.com/ProperDivisor.html)**\
  \ is greater than the number itself.  The integer **12** is the first abundant number.\
  \ Its proper divisors are 1, 2, 3, 4 and 6 for a total of **16**. The amount by\
  \ which the sum exceeds the number is the **abundance**. The number **12** has an\
  \ abundance of **4**, for example. Other initial abundant numbers are : 12, 18,\
  \ 20, 24, 30, 36, 40, 42, 48, 54 etc . **Infinitely** many **odd** and **even**\
  \ abundant numbers exist.    \nAs you should have guessed by now, in this kata your\
  \ function will take a positive integer **h** as range input and return a nested\
  \ array/list that will contain the following informations-    \n\n* Highest available\
  \ **odd** or **even** abundant number in that range\n* It's **abundance**    \n\n\
  Examples\n--------\nA few examples never hurt nobody, right???    \n\n```rust  \
  \ \nabundant(15)  = [[12], [4]]\nabundant(19)  = [[18], [3]]\nabundant(100) = [[100],\
  \ [17]]\nabundant(999) = [[996], [360]]\n```\n\nTips\n----\nThe problem involves\
  \ some pretty big random numbers. So try to optimize your code for performance as\
  \ far as you can. And yes, the input argument will always be positive integers.\
  \ So no need to check there.\n\nGood luck!"
"vc-preamble": "import Imports.AllImports\n\ndef sumOfDivisors (n : Int) : Int :=\n\
  \  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def abundant (n : Int) : Option (List (List Int)) :=\n  sorry\n"
"vc-theorems": "theorem abundant_output_structure\n  (h : Int)\n  (h_ge : h ≥ 12)\
  \  -- 12 is smallest abundant number\n  (h_le : h ≤ 1000)\n  (result : List (List\
  \ Int))\n  (h_result : abundant h = some result) :\n  result.length = 2 ∧ \n  ∀\
  \ sublist ∈ result, sublist.length = 1 ∧ \n  ∀ sublist ∈ result, ∀ x ∈ sublist,\
  \ x ≥ 0 :=\n  sorry\n\n\ntheorem abundant_properties\n  (h : Int)\n  (h_ge : h ≥\
  \ 12)\n  (h_le : h ≤ 1000)\n  (result : List (List Int))\n  (h_result : abundant\
  \ h = some result)\n  (n : Int := (result.get! 0).get! 0)\n  (diff : Int := (result.get!\
  \ 1).get! 0) :\n  n ≤ h ∧ \n  n > 0 ∧\n  sumOfDivisors n > n ∧\n  sumOfDivisors\
  \ n - n = diff :=\n  sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
