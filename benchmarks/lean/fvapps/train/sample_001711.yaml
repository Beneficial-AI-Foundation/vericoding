"vc-description": "## Description\n\nBeggar Thy Neighbour is a card game taught to\
  \ me by my parents when I was a small child, and is a game I like to play with my\
  \ young kids today.\n\nIn this kata you will be given two player hands to be played.\
  \  And must return the index of the player who will win.\n\n## Rules of the game\n\
  \n- Special cards are: Jacks, Queens, Kings and Aces\n- The object of the game is\
  \ to win all the cards.\n- Any player that cannot play a card is out of the game.\n\
  \nTo start:\n\n- The 52 cards in a standard deck are shuffled.\n- The cards are\
  \ dealt equally between all players.\n\nTo play:\n\n- The first player turns over\
  \ and plays the top card from their hand into a common pile.\n- If the card is not\
  \ special - then the second player plays their next card onto the pile, and play\
  \ continues back to the first player.\n- If the card is a Jack, Queen, King or Ace,\
  \ the other player must play 1, 2, 3 or 4 penalty cards respectively.\n- If no special\
  \ cards are played during a penalty, then the player that played the special card,\
  \ takes the common pile.\n- If a special card is played during a penalty, then the\
  \ penalty moves back to the previous player immediately with the size of the new\
  \ penalty defined by the new special card.  It is possible for this process to repeat\
  \ several times in one play.  Whoever played the last special card, wins the common\
  \ pile.\n- The winner of the common pile, places it on the bottom of their hand,\
  \ and then starts the next common pile.\n\nIt is theorised that an initial deal\
  \ may never end, though so far all of my games have ended!  For that reason, if\
  \ 10,000 cards are played and no one has won, return `None`.\n\n## Card Encoding\n\
  \nCards are represented with a two character code.  The first characater will be\
  \ one of A23456789TJQK representing Ace, 2 though 9, Ten, Jack, Queen, King respectively.\
  \  The second character is the suit, 'S', 'H', 'C', or 'D' representing Spades,\
  \ Hearts, Clubs and Diamonds respectively.  \n\nFor example a hand of `[\"TD\",\
  \ \"AC\", \"5H\"]` would represent 10 of Diamonds, Ace of Clubs, and 5 of hearts.\n\
  \n## Mini Example Game\n\nGiven the following hands:\n\n`Player 1: [9C, JC, 2H,\
  \ QC], Player 2: [TD, JH, 6H, 9S]`\n\nPlay would flow as follows:\n\n```\nStart\
  \   - P1: [9C, JC, 2H, QC],   P2: [TD, JH, 6H, 9S],           Common: []\nTurn \
  \ 1 - P1: [JC, 2H, QC],       P2: [TD, JH, 6H, 9S],           Common: [9C]\nTurn\
  \  2 - P1: [JC, 2H, QC],       P2: [JH, 6H, 9S],               Common: [9C, TD]\n\
  Turn  3 - P1: [2H, QC],           P2: [JH, 6H, 9S],               Common: [9C, TD,\
  \ JC]\n```\nPlayer 1 plays a Jack, player 2 pays 1 penalty\n```\nTurn  4 - P1: [2H,\
  \ QC],           P2: [6H, 9S],                   Common: [9C, TD, JC, JH]\n```\n\
  Player 2 plays a Jack, player 1 pays 1 penalty\n```\nTurn  5 - P1: [QC],       \
  \        P2: [6H, 9S],                   Common: [9C, TD, JC, JH, 2H]\n```\nPlayer\
  \ 2 wins the common pool and starts the next game\n```\nTurn  6 - P1: [QC],    \
  \           P2: [9S, 9C, TD, JC, JH, 2H],   Common: [6H]\nTurn  7 - P1: [],    \
  \             P2: [9S, 9C, TD, JC, JH, 2H],   Common: [6H, QC]\n```\nPlayer 1 plays\
  \ a Queen, player 2 pays 2 penalties\n```\nTurn  8 - P1: [],                 P2:\
  \ [9C, TD, JC, JH, 2H],       Common: [6H, QC, 9S]\nTurn  9 - P1: [],          \
  \       P2: [TD, JC, JH, 2H],           Common: [6H, QC, 9S, 9C]\n```\nPlayer 1\
  \ wins the common pool and starts the next game\n```\nTurn 10 - P1: [QC, 9S, 9C],\
  \       P2: [TD, JC, JH, 2H],           Common: [6H]\n\n```\nAnd so on... with player\
  \ 2 eventually winning.\n\n\nGood luck!"
"vc-preamble": "import Imports.AllImports\n\ndef Suit := Char\ndef Card := String"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def Hand := List Card\n\ndef who_wins_beggar_thy_neighbour (hands\
  \ : List Hand) (special_cards : String := \"JQKA\") : Option Nat :=\n  sorry\n"
"vc-theorems": "theorem game_always_terminates\n  (hands : List Hand) \n  (h1 : hands.length\
  \ ≥ 2)\n  (h2 : hands.length ≤ 4) :\n  match who_wins_beggar_thy_neighbour hands\
  \ with\n  | none => True\n  | some n => n ≥ 0 ∧ n < hands.length\n  := by sorry\n\
  \n\ntheorem winner_validity \n  (hands : List Hand)\n  (special_cards : String)\n\
  \  (h1 : hands.length ≥ 2)\n  (h2 : hands.length ≤ 4) \n  (h3 : ∀ h ∈ hands, h.length\
  \ > 0)\n  (h4 : ∀ c ∈ special_cards.toList, c ∈ ['J', 'Q', 'K', 'A']) :\n  match\
  \ who_wins_beggar_thy_neighbour hands special_cards with\n  | none => True\n  |\
  \ some n => n < hands.length\n  := by sorry\n\n\ntheorem custom_special_cards\n\
  \  (hands : List Hand)\n  (special_cards : String)\n  (h1 : hands.length ≥ 2)\n\
  \  (h2 : hands.length ≤ 4)\n  (h3 : special_cards.length > 0)\n  (h4 : special_cards.length\
  \ ≤ 13)\n  (h5 : ∀ c ∈ special_cards.toList, c ∈ ['2', '3', '4', '5', '6', '7',\
  \ '8', '9', 'T', 'J', 'Q', 'K', 'A']) :\n  match who_wins_beggar_thy_neighbour hands\
  \ special_cards with\n  | none => True\n  | some n => n ≥ 0 ∧ n < hands.length\n\
  \  := by sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval who_wins_beggar_thy_neighbour\
  \ [\"9C\", \"JC\", \"2H\", \"QC\"] [\"TD\", \"JH\", \"6H\", \"9S\"]\n\n/--\ninfo:\
  \ 1\n-/\n#guard_msgs in\n#eval who_wins_beggar_thy_neighbour [\"KC\", \"2H\"] [\"\
  AC\", \"3H\"]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
