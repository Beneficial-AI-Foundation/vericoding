"vc-description": "To protect people from evil, \na long and tall wall was constructed\
  \ a few years ago. \nBut just a wall is not safe, there should also be soldiers\
  \ on it, \nalways keeping vigil. \nThe wall is very long and connects the left and\
  \ the right towers. \nThere are exactly N spots (numbered 1 to N) on the wall for\
  \ soldiers. \nThe Kth spot is K miles far from the left tower and (N+1-K) miles\
  \ from the right tower.\n\nGiven a permutation of spots P of {1, 2, ..., N}, soldiers\
  \ occupy the N spots in that order. \nThe P[i]th spot is occupied before the P[i+1]th\
  \ spot. \nWhen a soldier occupies a spot, he is connected to his nearest soldier\
  \ already placed to his left. \nIf there is no soldier to his left, he is connected\
  \ to the left tower. The same is the case with right side. \nA connection between\
  \ two spots requires a wire of length equal to the distance between the two.\n\n\
  The realm has already purchased a wire of M miles long from Nokia, \npossibly the\
  \ wire will be cut into smaller length wires. \nAs we can observe, the total length\
  \ of the used wire depends on the permutation of the spots P. Help the realm in\
  \ minimizing the length of the unused wire. If there is not enough wire, output\
  \ -1.\n\n-----Input-----\nFirst line contains an integer T (number of test cases,\
  \ 1 ≤ T ≤ 10 ). Each of the next T lines contains two integers N M, as explained\
  \ in the problem statement (1 ≤ N ≤ 30 , 1 ≤ M ≤ 1000).\n\n-----Output-----\nFor\
  \ each test case, output the minimum length of the unused wire, or -1 if the the\
  \ wire is not sufficient.\n\n-----Example-----\nInput:\n4\n3 8\n3 9\n2 4\n5 25\n\
  \nOutput:\n0\n0\n-1\n5\n\nExplanation:\n\nIn the 1st case, for example, the permutation\
  \ P = {2, 1, 3} will use the exact 8 miles wires in total.\n\nIn the 2nd case, for\
  \ example, the permutation P = {1, 3, 2} will use the exact 9 miles wires in total.\n\
  \nTo understand the first two cases, you can see the following figures:\n\n\n\n\
  In the 3rd case, the minimum length of wire required is 5, for any of the permutations\
  \ {1,2} or {2,1}, so length 4 is not sufficient.\n\nIn the 4th case, for the permutation\
  \ {1, 2, 3, 4, 5} we need the maximum length of the wire = 20. So minimum possible\
  \ unused wire length = 25 - 20 = 5."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_wire_problem (n m : Nat) : Int := sorry\n\ntheorem valid_n_range\
  \ {n : Nat} (h : 1 ≤ n ∧ n ≤ 30) :\n  let m := n * n;\n  -1 ≤ solve_wire_problem\
  \ n m := sorry\n"
"vc-theorems": "theorem output_ranges {n m : Nat} (hn : 1 ≤ n ∧ n ≤ 30) (hm : m ≤\
  \ 1000) :\n  solve_wire_problem n m = -1 ∨ 0 ≤ solve_wire_problem n m := sorry\n\
  \n\ntheorem insufficient_wire_negative {n : Nat} (h : 1 ≤ n ∧ n ≤ 30) :\n  solve_wire_problem\
  \ n 1 = -1 := sorry\n\n\ntheorem monotonic_extra {n : Nat} (h : 1 ≤ n ∧ n ≤ 30)\
  \ :\n  ∀ m₁ m₂, n*2 ≤ m₁ → m₁ ≤ m₂ → m₂ ≤ n*n*2 →\n  0 ≤ solve_wire_problem n m₁\
  \ → 0 ≤ solve_wire_problem n m₂ →\n  solve_wire_problem n m₁ ≤ solve_wire_problem\
  \ n m₂ := sorry\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval solve_wire_problem 3\
  \ 8\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval solve_wire_problem 3 9\n\n/--\ninfo:\
  \ -1\n-/\n#guard_msgs in\n#eval solve_wire_problem 2 4\n\n/--\ninfo: 5\n-/\n#guard_msgs\
  \ in\n#eval solve_wire_problem 5 25\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
