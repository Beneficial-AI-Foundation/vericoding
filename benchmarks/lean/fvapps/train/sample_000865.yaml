"vc-description": "Snakeland is a well organised city. The houses of the city are\
  \ organised in an orderly rectangular fashion with dimensions 2 * n, i.e. there\
  \ are total two rows and n columns. The house in the i-th row and j-th column is\
  \ also said to be the house at coordinates (i, j). Some of the houses are occupied\
  \ by snakes, while the others are empty. You are given this information through\
  \ an array s of dimension 2 * n, where, if s[i][j] = '*', it denotes that there\
  \ is a snake in the house at coordinates (i, j), and if s[i][j] = '.', it denotes\
  \ that the house is empty. \nThese snakes are planning a coup against a mongoose\
  \ who controls their city from outside. So, they are trying their best to meet with\
  \ other snakes and spread information about the date of the coup. For spreading\
  \ this information, they can just hiss from their house and usually their hiss is\
  \ so loud that it will be heard in all the cells except if there is a soundproof\
  \ fence built that cuts the voice. Note that the external borders of Snakeland are\
  \ already built of soundproof material. The mongoose got to know about the plan,\
  \ and he wants to construct sound proof fences along the borders of the houses so\
  \ that no two people should be able to communicate with each other. The fence can\
  \ be either vertical or horizontal.  Each fence can be of any length, but the mongoose\
  \ wants to minimize the number of fences to be built. Find out the minimum number\
  \ of fences that the mongoose should build.\n\n-----Input-----\nThe first line of\
  \ the input contains an integer T denoting number of test cases. The descriptions\
  \ of the T test cases follow.\nThe first line of each test case contains a single\
  \ integer, n.\nEach of the next two lines contains n characters denoting the first\
  \ and the second rows of Snakeland respectively.\n\n-----Output-----\nFor each test\
  \ case, output a single integer corresponding to the minimum number of fences that\
  \ the mongoose needs to build.\n\n-----Constraints-----\n- 1 ≤ T ≤ 10\n- 1 ≤ n ≤\
  \ 105\n\n-----Example-----\nInput\n3\n2\n**\n**\n3\n***\n*..\n3\n*..\n.*.\n\nOutput\n\
  2\n3\n1\n\n-----Explanation-----\nAll the examples are shown in the pictures. The\
  \ fences built are shown by red colored horizontal or vertical segments. You can\
  \ see that after putting these borders no snake can talk with any another snake."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def min_fences (n : Nat) (row1 row2 : String) : Nat := sorry\n\n\
  theorem empty_rows_zero_fences (n : Nat) (h : n > 0) :\n  let row := String.mk (List.replicate\
  \ n '.')\n  min_fences n row row = 0 := sorry\n"
"vc-theorems": "theorem single_row_stars (n stars : Nat) (h1 : n > 0) (h2 : stars\
  \ ≤ n) :\n  let stars_str := String.mk (List.replicate stars '*')\n  let dots_str\
  \ := String.mk (List.replicate (n - stars) '.')\n  let empty_str := String.mk (List.replicate\
  \ n '.')\n  let row := stars_str ++ dots_str\n  min_fences n row empty_str = if\
  \ stars > 0 then max 0 (stars - 1) else 0 := sorry\n\n\ntheorem fence_count_properties\
  \ (n : Nat) (row1 row2 : String) (h : n > 0) :\n  let count_stars (s : String) :=\
  \ s.data.filter (· = '*') |>.length\n  let total_stars := count_stars row1 + count_stars\
  \ row2\n  let result := min_fences n row1 row2\n  result ≤ total_stars ∧ result\
  \ ≥ 0 := sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval min_fences 2 \"**\" \"\
  **\"\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval min_fences 3 \"***\" \"*..\"\n\n\
  /--\ninfo: 1\n-/\n#guard_msgs in\n#eval min_fences 3 \"*..\" \".*.\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
