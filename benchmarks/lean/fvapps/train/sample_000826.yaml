"vc-description": "Did you know that the people of America eat around 100 acres of\
  \ pizza per day ? Having read this fact on internet, two chefs from the Elephant\
  \ city, Arjuna and Bhima are set to make pizza popular in India. They organized\
  \ a social awareness camp, where N people ( other than these two ) sit around a\
  \ large pizza. To make it more interesting, they make some pairs among these N people\
  \ and the two persons in a pair, feed each other.\n\nEach person should be a part\
  \ of at most one pair and most importantly, to make feeding easy, any two pairs\
  \ should not cross each other ( see figure for more clarity ). Arjuna and Bhima\
  \ decided to play a game on making the pairs. In his turn, a player makes a pair\
  \ ( selects two persons, as long as its valid ) and this pair start feeding each\
  \ other. Arjuna and Bhima take turns alternately, by making a pair in each turn,\
  \ and they  play optimally ( see Notes for more clarity ). The one who can not make\
  \ a pair in his turn, loses. Given N, find who wins the game, if Arjuna starts first.\
  \ \n\n-----Notes-----\n- 'Optimally' means, if there is a possible move a person\
  \ can take in his turn that can make him win finally, he will always take that.\
  \ You can assume both are very intelligent. \n\n-----Input-----\nFirst line contains\
  \ an integer T ( number of test cases, around 1000 ). Each of the next T lines contains\
  \ an integer N ( 2 <= N <= 10000 )\n\n-----Output-----\nFor each test case, output\
  \ the name of the winner ( either \"Arjuna\" or \"Bhima\" ( without quotes ) ) in\
  \ a new line.\n\n-----Example-----\nInput:\n4\n2\n4\n5\n6\n\nOutput:\nArjuna\nArjuna\n\
  Bhima\nArjuna\n\nExplanation:\n\nLet the people around the table are numbered 1,\
  \ 2, ... , N in clock-wise order as shown in the image \n\nCase 1 : N = 2. Only\
  \ two persons and Arjuna makes the only possible pair (1,2)\n\nCase 2 : N = 4. Arjuna\
  \ can make the pair (1,3). Bhima can not make any more pairs ( without crossing\
  \ the pair (1,3) )\n\nCase 3 : N = 5. No matter which pair Arjuna makes first, Bhima\
  \ can always make one more pair, and Arjuna can not make any further"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def get_winner (n : Nat) : String :=\n  sorry\n"
"vc-theorems": "theorem get_winner_returns_valid_string (n : Nat) \n  (h : 1 ≤ n ∧\
  \ n ≤ 19) : \n  get_winner n = \"Arjuna\" ∨ get_winner n = \"Bhima\" :=\n  sorry\n\
  \n\ntheorem get_winner_consistent (n : Nat) \n  (h : 1 ≤ n ∧ n ≤ 19) :\n  get_winner\
  \ n = get_winner n :=\n  sorry\n\n\ntheorem get_winner_type_boundary_cases :\n \
  \ get_winner 1 = (get_winner 1 : String) ∧ \n  get_winner 19 = (get_winner 19 :\
  \ String) :=\n  sorry\n\n\ntheorem arjuna_winning_positions :\n  get_winner 2 =\
  \ \"Arjuna\" ∧\n  get_winner 3 = \"Arjuna\" ∧ \n  get_winner 4 = \"Arjuna\" ∧\n\
  \  get_winner 7 = \"Arjuna\" ∧\n  get_winner 8 = \"Arjuna\" :=\n  sorry\n\n\ntheorem\
  \ bhima_winning_positions :\n  get_winner 1 = \"Bhima\" ∧\n  get_winner 5 = \"Bhima\"\
  \ ∧\n  get_winner 9 = \"Bhima\" :=\n  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
