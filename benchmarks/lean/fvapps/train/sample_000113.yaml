"vc-description": "Polycarp plays a computer game (yet again). In this game, he fights\
  \ monsters using magic spells.\n\nThere are two types of spells: fire spell of power\
  \ $x$ deals $x$ damage to the monster, and lightning spell of power $y$ deals $y$\
  \ damage to the monster and doubles the damage of the next spell Polycarp casts.\
  \ Each spell can be cast only once per battle, but Polycarp can cast them in any\
  \ order.\n\nFor example, suppose that Polycarp knows three spells: a fire spell\
  \ of power $5$, a lightning spell of power $1$, and a lightning spell of power $8$.\
  \ There are $6$ ways to choose the order in which he casts the spells:\n\n  first,\
  \ second, third. This order deals $5 + 1 + 2 \\cdot 8 = 22$ damage;  first, third,\
  \ second. This order deals $5 + 8 + 2 \\cdot 1 = 15$ damage;  second, first, third.\
  \ This order deals $1 + 2 \\cdot 5 + 8 = 19$ damage;  second, third, first. This\
  \ order deals $1 + 2 \\cdot 8 + 2 \\cdot 5 = 27$ damage;  third, first, second.\
  \ This order deals $8 + 2 \\cdot 5 + 1 = 19$ damage;  third, second, first. This\
  \ order deals $8 + 2 \\cdot 1 + 2 \\cdot 5 = 20$ damage. \n\nInitially, Polycarp\
  \ knows $0$ spells. His spell set changes $n$ times, each time he either learns\
  \ a new spell or forgets an already known one. After each change, calculate the\
  \ maximum possible damage Polycarp may deal using the spells he knows.\n\n\n-----Input-----\n\
  \nThe first line contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the\
  \ number of changes to the spell set.\n\nEach of the next $n$ lines contains two\
  \ integers $tp$ and $d$ ($0 \\le tp_i \\le 1$; $-10^9 \\le d \\le 10^9$; $d_i \\\
  neq 0$) — the description of the change. If $tp_i$ if equal to $0$, then Polycarp\
  \ learns (or forgets) a fire spell, otherwise he learns (or forgets) a lightning\
  \ spell.\n\nIf $d_i > 0$, then Polycarp learns a spell of power $d_i$. Otherwise,\
  \ Polycarp forgets a spell with power $-d_i$, and it is guaranteed that he knew\
  \ that spell before the change.\n\nIt is guaranteed that the powers of all spells\
  \ Polycarp knows after each change are different (Polycarp never knows two spells\
  \ with the same power).\n\n\n-----Output-----\n\nAfter each change, print the maximum\
  \ damage Polycarp can deal with his current set of spells.\n\n\n-----Example-----\n\
  Input\n6\n1 5\n0 10\n1 -5\n0 5\n1 11\n0 -10\n\nOutput\n5\n25\n10\n15\n36\n21"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calculate_max_damage (spells : List Spell) : List Int := sorry\n\
  \ntheorem length_preservation (spells : List Spell) :\n  List.length (calculate_max_damage\
  \ spells) = List.length spells := sorry\n"
"vc-theorems": "theorem output_are_ints (spells : List Spell) (i : Nat) (h : i < List.length\
  \ spells) :\n  ∃ n : Int, (calculate_max_damage spells).get ⟨i, by rw [length_preservation];\
  \ exact h⟩ = n := sorry\n\n\ntheorem type0_positive_running_sum (spells : List Spell)\
  \ \n  (h_type : ∀ s ∈ spells, s.spellType = 0)\n  (h_damage : ∀ s ∈ spells, s.damage\
  \ > 0) \n  (i : Nat) (h : i < List.length spells) :\n  (calculate_max_damage spells).get\
  \ ⟨i, by rw [length_preservation]; exact h⟩ = \n  (spells.take (i+1)).foldl (fun\
  \ acc s => acc + s.damage) 0 := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
