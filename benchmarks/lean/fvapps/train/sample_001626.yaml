"vc-description": "Meanwhile, Candace and Stacy are busy planning to attend the concert\
  \ of the famous Love Händel. Jeremy will also be attending the event. Therefore,\
  \ Candace plans to offer the best possible gift to Jeremy.\nCandace has $N$ strings,\
  \ each of length $M$. Each character of each string can either be a lowercase English\
  \ letter or the character '#'. She denotes the substring of $i$-$th$ string starting\
  \ from the $l$-$th$ character and ending with the $r$-$th$ character as $S_{i}[l,\
  \ r]$. She has to choose a list $a$ of $N - 1$ numbers such that  \n- $1 \\leq a_1\
  \ \\leq a_2 \\leq a_3 \\leq ... \\leq a_{N-1} \\leq  M$.\n- The final gift string\
  \ is obtained by appending the substrings $S_{1}[1, a_{1}]$, $S_{2}[a_{1}, a_{2}]$,\
  \ $S_{3}[a_{2}, a_{3}]$, .., $S_{N-1}[a_{N-2}, a_{N-1}]$, $S_{N}[a_{N-1}, M]$.\n\
  - Candace considers the gift to be the most beautiful one if the final gift string\
  \ is the lexicographically smallest possible string and it doesn't contain the '#'\
  \ character.\nLet $P$ = $S_{1}[1, a_{1}]$ + $S_{2}[a_{1}, a_{2}]$ + $S_{3}[a_{2},\
  \ a_{3}]$ + .., + $S_{N-1}[a_{N-2}, a_{N-1}]$ + $S_{N}[a_{N-1}, M]$, then $P$ should\
  \ be the lexicographically smallest string  possible and it should not contain '#'\
  \ character, where '+' denotes concatenation of two substrings.\nHelp Candace find\
  \ the best possible gift string quickly as she does not want Jeremy to wait for\
  \ her. Also, it is guaranteed that at least one such valid string exists.\n\n-----Input-----\n\
  - The first line contains a single integer $T$ denoting the number of testcases.\n\
  - The first line of each test case contains $2$ space separated integers denoting\
  \ the values of $N$ and $M$ respectively.\n- $N$ lines follow. Each line contains\
  \ a string $S_i$ of length $M$ as described above.\n\n-----Output-----\nFor every\
  \ test case, print a line containing lexicographically lowest possible gift string.\n\
  \n-----Constraints-----\n- $1 \\leq T \\leq 10^4$\n- $1 \\leq N, M \\leq 10^6$\n\
  - $|S_i| = M$\n- All $S_i$ will contain either a lower English letter ('a' to 'z'\
  \ ) or the character '#' (ASCII $35$).\n- Sum of $N * M$ over all test cases for\
  \ a particular test file does not exceed $10^7$.\n- It is guaranteed that a valid\
  \ solution will always exist.\n\n-----Sample Input-----\n2\n3 3\nxab\na#z\ncaa\n\
  5 4\npyqs\nvcot\nqbiu\nlihj\nuvmz\n\n-----Sample Output-----\nxabza\npvcbihjz\n\n\
  -----Explanation-----\nFor test $1$:\nThe array $a$ chosen is: $[3, 3]$\nThe resulting\
  \ string $P$ is formed by = $S_{1}[1, 3]$ + $S_{2}[3, 3]$ + $S_{3}[3, 3]$ = xabza\n\
  For test $2$:\nThe array $a$ chosen is: $[1, 2, 3, 4]$\nThe resulting string $P$\
  \ is formed by = $S_{1}[1, 1]$ + $S_{2}[1, 2]$ + $S_{3}[2, 3]$ + $S_{4}[3, 4]$ +\
  \ $S_{5}[4, 4]$ = pvcbihjz"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_best_gift_string (n m : Nat) (strings : List String) :\
  \ String := sorry\n\n/- Theorems -/\n"
"vc-theorems": "theorem path_length_property {n m : Nat} {strings : List String} \n\
  \  (h : find_best_gift_string n m strings ≠ \"\") : \n  String.length (find_best_gift_string\
  \ n m strings) = n + m - 1 := sorry \n\n\ntheorem characters_from_input {n m : Nat}\
  \ {strings : List String}\n  (h : find_best_gift_string n m strings ≠ \"\") :\n\
  \  ∀ c ∈ String.toList (find_best_gift_string n m strings),\n    ∃ s ∈ strings,\
  \ c ∈ String.toList s := sorry\n\n\ntheorem lexicographically_minimal {n m : Nat}\
  \ {strings : List String}\n  (hn : n > 0) (hm : m > 0)\n  (h : find_best_gift_string\
  \ n m strings ≠ \"\") :\n  String.get! (find_best_gift_string n m strings) 0 = \n\
  \    String.get! (List.head! strings) 0 := sorry\n\n/--\ninfo: 'xabza'\n-/\n#guard_msgs\
  \ in\n#eval find_best_gift_string 3 3 [\"xab\", \"a#z\", \"caa\"]\n\n/--\ninfo:\
  \ 'pvcbihjz'\n-/\n#guard_msgs in\n#eval find_best_gift_string 5 4 [\"pyqs\", \"\
  vcot\", \"qbiu\", \"lihj\", \"uvmz\"]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
