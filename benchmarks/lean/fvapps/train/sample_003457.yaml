"vc-description": "Yup!! The problem name reflects your task; just add a set of numbers.\
  \ But you may feel yourselves condescended, to write a C/C++ program just to add\
  \ a set of numbers. Such a problem will simply question your erudition. So, lets\
  \ add some flavor of ingenuity to it. Addition operation requires cost now, and\
  \ the cost is the summation of those two to be added. So,to add 1 and 10, you need\
  \ a cost of 11. If you want to add 1, 2 and 3. There are several ways\n\n```c++\n\
  1 + 2 = 3, cost = 3,\n3 + 3 = 6, cost = 6,\nTotal = 9.\n```\n```c++\n1 + 3 = 4,\
  \ cost = 4,\n2 + 4 = 6, cost = 6,\nTotal = 10.\n```\n```c++\n2 + 3 = 5, cost = 5,\n\
  1 + 5 = 6, cost = 6,\nTotal = 11.\n```\nI hope you have understood already your\
  \ mission, to add a set of integers so that the cost is minimal\n\n# Your Task \n\
  Given a vector of integers, return the minimum total cost of addition."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def add_all (lst: List Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem add_all_non_negative (lst: List Nat) (h: lst ≠ []) :\n  add_all\
  \ lst ≥ 0 :=\n  sorry\n\n\ntheorem add_all_preserves_input (lst: List Nat) (h: lst\
  \ ≠ []) :\n  let lst' := lst\n  add_all lst = add_all lst' ∧ lst = lst' :=\n  sorry\n\
  \n\ntheorem add_all_larger_than_pairwise (lst: List Nat) (h: lst.length ≥ 2) :\n\
  \  ∀ i j, i < j → j < lst.length →\n    add_all lst ≥ lst[i]! + lst[j]! :=\n  sorry\n\
  \n\ntheorem add_all_singleton (lst: List Nat) (h: lst.length = 1) :\n  add_all lst\
  \ = 0 :=\n  sorry\n\n/--\ninfo: 9\n-/\n#guard_msgs in\n#eval add_all [1, 2, 3]\n\
  \n/--\ninfo: 19\n-/\n#guard_msgs in\n#eval add_all [1, 2, 3, 4]\n\n/--\ninfo: 33\n\
  -/\n#guard_msgs in\n#eval add_all [1, 2, 3, 4, 5]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
