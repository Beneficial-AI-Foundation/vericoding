"vc-description": "# Task\n Consider the following operation:\n \n We take a positive\
  \ integer `n` and replace it with the sum of its `prime factors` (if a prime number\
  \ is presented multiple times in the factorization of `n`, then it's counted the\
  \ same number of times in the sum). \n \n This operation is applied sequentially\
  \ first to the given number, then to the first result, then to the second result\
  \ and so on.., until the result remains the same.\n\n  Given number `n`, find the\
  \ final result of the operation.\n\n# Example\n\n  For `n = 24`, the output should\
  \ be `5`.\n```\n24 -> (2 + 2 + 2 + 3) = 9 -> (3 + 3) = 6 -> (2 + 3) = 5 -> 5.\n\
  So the answer for n = 24 is 5.```\n\n# Input/Output\n\n\n - `[input]` integer `n`\n\
  \n  Constraints: `2 ≤ n ≤ 10000.`\n\n\n - `[output]` an integer"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def factor_sum (n : Nat) : Nat := sorry \n\ndef sum_of_prime_factors\
  \ (n : Nat) : Nat := sorry\n\n\n"
"vc-theorems": "theorem factor_sum_positive {n : Nat} (h : n ≥ 2) :\n  factor_sum\
  \ n > 0 := sorry\n\n\ntheorem factor_sum_idempotent {n : Nat} (h : n ≥ 2) :\n  factor_sum\
  \ (factor_sum n) = factor_sum n := sorry\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval\
  \ factor_sum 24\n\n/--\ninfo: 7\n-/\n#guard_msgs in\n#eval factor_sum 35\n\n/--\n\
  info: 5\n-/\n#guard_msgs in\n#eval factor_sum 156\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
