"vc-description": "Iahub got bored, so he invented a game to be played on paper.\n\
   He writes n integers a1, a2, ..., an. Each of those integers can be either 0 or\
  \ 1. He's allowed to do exactly one move: he chooses two indices i and j (1 ≤ i ≤ j ≤ n)\
  \ and flips all values ak for which their positions are in range [i, j] (that is\
  \ i ≤ k ≤ j). Flip the value of x means to apply operation x = 1 - x.\n The goal\
  \ of the game is that after exactly one move to obtain the maximum number of ones.\
  \ Write a program to solve the little game of Iahub.\n```\n@param {Array} line of\
  \ the input there are n integers: a1, a2, ..., an. 1 ≤ n ≤ 100. It is guaranteed\
  \ that each of those n values is either 0 or 1\n@return {Integer} the maximal number\
  \ of 1s that can be obtained after exactly one move\n```\nExamples :\n```\n[1, 0,\
  \ 0, 1, 0, 0]  =>  5\n[1, 0, 0, 1]  =>  4\n\n```\nNote:\n In the first case, flip\
  \ the segment from 2 to 6 (i = 2, j = 6). That flip changes the sequence, it becomes:\
  \ [1 1 1 0 1 1]. So, it contains four ones. There is no way to make the whole sequence\
  \ equal to [1 1 1 1 1 1].\n In the second case, flipping only the second and the\
  \ third element (i = 2, j = 3) will turn all numbers into 1.\n\n(c)ll931110 & fchirica"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def flipping_game (nums: List Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem flipping_game_result_bounded (nums: List Nat) :\n  nums.all\
  \ (fun x => x = 0 ∨ x = 1) →\n  flipping_game nums ≤ nums.length := by\n  sorry\n\
  \n\ntheorem flipping_game_result_range (nums: List Nat) :\n  nums.all (fun x =>\
  \ x = 0 ∨ x = 1) →\n  0 ≤ flipping_game nums ∧ flipping_game nums ≤ nums.length\
  \ := by\n  sorry\n\n\ntheorem flipping_game_all_zeros (n: Nat) :\n  let zeros :=\
  \ List.replicate n 0\n  flipping_game zeros = zeros.length := by\n  sorry\n\n\n\
  theorem flipping_game_basic_cases :\n  flipping_game [0] = 1 ∧\n  flipping_game\
  \ [0,0] = 2 ∧\n  flipping_game [1,0,0] = 3 := by\n  sorry\n\n/--\ninfo: 5\n-/\n\
  #guard_msgs in\n#eval flipping_game [1, 0, 0, 1, 0, 0]\n\n/--\ninfo: 4\n-/\n#guard_msgs\
  \ in\n#eval flipping_game [1, 0, 0, 1]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval\
  \ flipping_game [1]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
