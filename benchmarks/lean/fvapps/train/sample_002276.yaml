"vc-description": "Mishka wants to buy some food in the nearby shop. Initially, he\
  \ has $s$ burles on his card. \n\nMishka can perform the following operation any\
  \ number of times (possibly, zero): choose some positive integer number $1 \\le\
  \ x \\le s$, buy food that costs exactly $x$ burles and obtain $\\lfloor\\frac{x}{10}\\\
  rfloor$ burles as a cashback (in other words, Mishka spends $x$ burles and obtains\
  \ $\\lfloor\\frac{x}{10}\\rfloor$ back). The operation $\\lfloor\\frac{a}{b}\\rfloor$\
  \ means $a$ divided by $b$ rounded down.\n\nIt is guaranteed that you can always\
  \ buy some food that costs $x$ for any possible value of $x$.\n\nYour task is to\
  \ say the maximum number of burles Mishka can spend if he buys food optimally.\n\
  \nFor example, if Mishka has $s=19$ burles then the maximum number of burles he\
  \ can spend is $21$. Firstly, he can spend $x=10$ burles, obtain $1$ burle as a\
  \ cashback. Now he has $s=10$ burles, so can spend $x=10$ burles, obtain $1$ burle\
  \ as a cashback and spend it too.\n\nYou have to answer $t$ independent test cases.\n\
  \n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1\
  \ \\le t \\le 10^4$) — the number of test cases.\n\nThe next $t$ lines describe\
  \ test cases. Each test case is given on a separate line and consists of one integer\
  \ $s$ ($1 \\le s \\le 10^9$) — the number of burles Mishka initially has.\n\n\n\
  -----Output-----\n\nFor each test case print the answer on it — the maximum number\
  \ of burles Mishka can spend if he buys food optimally.\n\n\n-----Example-----\n\
  Input\n6\n1\n10\n19\n9876\n12345\n1000000000\n\nOutput\n1\n11\n21\n10973\n13716\n\
  1111111111"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def max_spending (initial_burles : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem max_spending_ge_input (initial_burles : Nat) :\n  max_spending\
  \ initial_burles ≥ initial_burles := by\n  sorry\n\n\ntheorem max_spending_eq_input_when_small\
  \ (initial_burles : Nat) \n  (h : initial_burles < 10) :\n  max_spending initial_burles\
  \ = initial_burles := by\n  sorry\n\n\ntheorem max_spending_nat_valued (initial_burles\
  \ : Nat) :\n  max_spending initial_burles ≥ 0 := by\n  sorry\n\n\ntheorem max_spending_growth\
  \ (initial_burles : Nat)\n  (h : initial_burles ≥ 10) :\n  max_spending (initial_burles\
  \ + 10) ≥ max_spending initial_burles + 11 := by\n  sorry\n\n\ntheorem max_spending_upper_bound\
  \ (initial_burles : Nat)\n  (h : initial_burles > 0) :\n  max_spending initial_burles\
  \ ≤ initial_burles * 10 / 9 + 10 := by\n  sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs\
  \ in\n#eval max_spending 1\n\n/--\ninfo: 11\n-/\n#guard_msgs in\n#eval max_spending\
  \ 10\n\n/--\ninfo: 21\n-/\n#guard_msgs in\n#eval max_spending 19\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
