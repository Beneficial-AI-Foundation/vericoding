"vc-description": "### What is simplifying a square root?\n\nIf you have a number,\
  \ like 80, for example, you would start by finding the greatest perfect square divisible\
  \ by 80. In this case, that's 16. Find the square root of 16, and multiply it by\
  \ 80 / 16. Answer = 4 √5. \n\n##### The above example:\n\n![simplify_roots_example.png](https://i.postimg.cc/gjv2NwCm/simplify-roots-example.png)\n\
  \n### Task:\n\nYour job is to write two functions, `simplify`, and `desimplify`,\
  \ that simplify and desimplify square roots, respectively. (Desimplify isn't a word,\
  \ but I couldn't come up with a better way to put it.) `simplify` will take an integer\
  \ and return a string like \"x sqrt y\", and `desimplify` will take a string like\
  \ \"x sqrt y\" and return an integer. For `simplify`, if a square root cannot be\
  \ simplified, return \"sqrt y\". \n\n_Do not modify the input._\n\n### Some examples:\n\
  \n```python\nsimplify(1)  #=> \"1\"\nsimplify(2)  #=> \"sqrt 2\"\nsimplify(3)  #=>\
  \ \"sqrt 3\"\nsimplify(8)  #=> \"2 sqrt 2\"\nsimplify(15) #=> \"sqrt 15\"\nsimplify(16)\
  \ #=> \"4\"\nsimplify(18) #=> \"3 sqrt 2\"\nsimplify(20) #=> \"2 sqrt 5\"\nsimplify(24)\
  \ #=> \"2 sqrt 6\"\nsimplify(32) #=> \"4 sqrt 2\"\n\ndesimplify(\"1\")        #=>\
  \ 1\ndesimplify(\"sqrt 2\")   #=> 2\ndesimplify(\"sqrt 3\")   #=> 3\ndesimplify(\"\
  2 sqrt 2\") #=> 8\ndesimplify(\"sqrt 15\")  #=> 15\ndesimplify(\"4\")        #=>\
  \ 16\ndesimplify(\"3 sqrt 2\") #=> 18\ndesimplify(\"2 sqrt 5\") #=> 20\ndesimplify(\"\
  2 sqrt 6\") #=> 24\ndesimplify(\"4 sqrt 2\") #=> 32\n```\n\nAlso check out my other\
  \ creations — [Square Roots: Approximation](https://www.codewars.com/kata/square-roots-approximation),\
  \ [Square and Cubic Factors](https://www.codewars.com/kata/square-and-cubic-factors),\
  \ [Keep the Order](https://www.codewars.com/kata/keep-the-order), [Naming Files](https://www.codewars.com/kata/naming-files),\
  \ [Elections: Weighted Average](https://www.codewars.com/kata/elections-weighted-average),\
  \ [Identify Case](https://www.codewars.com/kata/identify-case), [Split Without Loss](https://www.codewars.com/kata/split-without-loss),\
  \ [Adding Fractions](https://www.codewars.com/kata/adding-fractions),\n[Random Integers](https://www.codewars.com/kata/random-integers),\
  \ [Implement String#transpose](https://www.codewars.com/kata/implement-string-number-transpose),\
  \ [Implement Array#transpose!](https://www.codewars.com/kata/implement-array-number-transpose),\
  \ [Arrays and Procs #1](https://www.codewars.com/kata/arrays-and-procs-number-1),\
  \ and [Arrays and Procs #2](https://www.codewars.com/kata/arrays-and-procs-number-2)."
"vc-preamble": "import Imports.AllImports\n\ndef simplify (n : Nat) : String := sorry\n\
  def desimplify (s : String) : Nat := sorry\n\n\ndef containsSqrt (s : String) :\
  \ Bool := sorry\ndef countSqrt (s : String) : Nat := sorry"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isNumeric (s : String) : Bool := sorry\ndef splitByWhitespace\
  \ (s : String) : List String := sorry\n\n/-- Desimplifying a simplified number returns\
  \ the original number -/"
"vc-theorems": "theorem simplify_desimplify_roundtrip (n : Nat) (h : n > 0) :\n  desimplify\
  \ (simplify n) = n := sorry\n\n/-- A simplified expression contains at most one\
  \ sqrt -/\n\ntheorem simplify_sqrt_count (n : Nat) (h : n > 0) :\n  countSqrt (simplify\
  \ n) ≤ 1 := sorry\n\n/-- A simplified expression with no sqrt is a single number\
  \ -/\n\ntheorem simplify_no_sqrt (n : Nat) (h : n > 0) :\n  ¬containsSqrt (simplify\
  \ n) → isNumeric (simplify n).trim := sorry\n\n/-- A simplified expression with\
  \ sqrt is in format \"a sqrt b\" or \"sqrt b\" -/\n\ntheorem simplify_with_sqrt\
  \ (n : Nat) (h : n > 0) :\n  let s := simplify n\n  let parts := splitByWhitespace\
  \ s\n  containsSqrt s →\n    (parts.length = 2 ∧ parts.get! 0 = \"sqrt\" ∧ isNumeric\
  \ (parts.get! 1)) ∨\n    (parts.length = 3 ∧ isNumeric (parts.get! 0) ∧ parts.get!\
  \ 1 = \"sqrt\" ∧ isNumeric (parts.get! 2)) := sorry\n\n/-- Desimplifying returns\
  \ a positive integer -/\n\ntheorem desimplify_range (n : Nat) (h : n > 0) :\n  desimplify\
  \ (simplify n) > 0 := sorry\n\n/--\ninfo: '1'\n-/\n#guard_msgs in\n#eval simplify\
  \ 1\n\n/--\ninfo: '2 sqrt 2'\n-/\n#guard_msgs in\n#eval simplify 8\n\n/--\ninfo:\
  \ '2 sqrt 5'\n-/\n#guard_msgs in\n#eval simplify 20\n\n/--\ninfo: 1\n-/\n#guard_msgs\
  \ in\n#eval desimplify \"1\"\n\n/--\ninfo: 8\n-/\n#guard_msgs in\n#eval desimplify\
  \ \"2 sqrt 2\"\n\n/--\ninfo: 20\n-/\n#guard_msgs in\n#eval desimplify \"2 sqrt 5\"\
  \n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
