"vc-description": "A permutation $p_1,p_2...p_N$ of $\\{1, 2, ..., N\\}$ is beautiful\
  \ if $p_i \\& p_{i+1}$ is greater than 0 for every $1 \\leq i < N$ . You are given\
  \ an integer $N$, and your task is toconstruct a beautiful permutation of length\
  \ $N$ or determine that it's impossible.\nNote that $a \\& b$ denotes the bitwise\
  \ AND of $a$ and $b$.\n\n-----Input:-----\nFirst line will contain $T$, number of\
  \ testcases. Then the testcases follow. \nEach testcase contains a single line of\
  \ input, an integer $N$.\n\n-----Output:-----\nFor each test case output $-1$ if\
  \ there is no suitable permutation of length $N$, otherwise output $N$ integers\
  \ in a single line which form a beautiful permutation. If there are multiple answers\
  \ output any of them.\n\n-----Constraints-----\n- $1 \\leq N \\leq 10^5$\n- The\
  \ sum of $N$ over all test cases does not exceed $10^6$\n\n-----Subtasks-----\n\
  - 50 points : $1 \\leq N,T \\leq 9$\n- 50 points : Original constraints\n\n-----Sample\
  \ Input:-----\n3\n4\n3\n5\n\n-----Sample Output:-----\n-1\n1 3 2\n2 3 1 5 4"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isPowerOfTwo (n : Nat) : Bool := sorry\n\ndef solve_beautiful_permutation\
  \ (n : Nat) : List Nat := sorry \n"
"vc-theorems": "theorem single_element_case {n : Nat} (h : n = 1) :\n  solve_beautiful_permutation\
  \ n = [1] := sorry\n\n\ntheorem power_of_two_case {n : Nat} (h : isPowerOfTwo n\
  \ = true) :\n  solve_beautiful_permutation n = [0] := sorry  -- Using 0 instead\
  \ of -1 since we're working with Nat\n\n\ntheorem length_matches_input {n : Nat}\
  \ (h : n ≠ 1 ∧ isPowerOfTwo n = false) :\n  (solve_beautiful_permutation n).length\
  \ = n := sorry  \n\n\ntheorem permutation_elements {n : Nat} (h : n ≠ 1 ∧ isPowerOfTwo\
  \ n = false) (i : Nat) (hi : i < n) :\n  ∃ j, j < (solve_beautiful_permutation n).length\
  \ ∧ \n       (solve_beautiful_permutation n).get ⟨j, by sorry⟩ = i + 1 := sorry\n\
  \n/--\ninfo: [-1]\n-/\n#guard_msgs in\n#eval solve_beautiful_permutation 4\n\n/--\n\
  info: [2, 3, 1]\n-/\n#guard_msgs in\n#eval solve_beautiful_permutation 3\n\n/--\n\
  info: [2, 3, 1, 5, 4]\n-/\n#guard_msgs in\n#eval solve_beautiful_permutation 5\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
