"vc-description": "# Task\n Given a rectangular `matrix` and integers `a` and `b`,\
  \ consider the union of the ath row and the bth (both 0-based) column of the `matrix`.\
  \ Return sum of all elements of that union.\n\n# Example\n\n For\n```\nmatrix =\
  \ [[1, 1, 1, 1], \n          [2, 2, 2, 2], \n          [3, 3, 3, 3]]\na = 1 and\
  \ b = 3 ```\nthe output should be `12`.\n\n Here `(2 + 2 + 2 + 2) + (1 + 3) = 12`.\n\
  \n# Input/Output\n\n\n - `[input]` 2D integer array `matrix`\n\n    2-dimensional\
  \ array of integers representing a rectangular matrix.\n\n    Constraints: `1 ≤\
  \ matrix.length ≤ 5, 1 ≤ matrix[0].length ≤ 5, 1 ≤ matrix[i][j] ≤ 100.`\n    \n\n\
  \ - `[input]` integer `a`\n\n  A non-negative integer less than the number of matrix\
  \ rows.\n\n   Constraints: `0 ≤ a < matrix.length.`\n   \n   \n - `[input]` integer\
  \ `b`\n\n   A non-negative integer less than the number of matrix columns.\n\n \
  \  Constraints: `0 ≤ b < matrix[i].length. `\n\n\n - `[output]` an integer"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def crossing_sum (matrix : List (List Int)) (row col : Nat) : Int\
  \ :=\n  sorry\n"
"vc-theorems": "theorem uniform_matrix_crossing_sum\n  (rows cols : Nat)\n  (val :\
  \ Int) \n  (matrix : List (List Int))\n  (h_rows : rows > 0)\n  (h_cols : cols >\
  \ 0)\n  (h_matrix : matrix.length = rows)\n  (h_matrix_cols : ∀ row ∈ matrix, row.length\
  \ = cols)\n  (h_uniform : ∀ i j, i < rows → j < cols → \n    (matrix.get! i).get!\
  \ j = val) :\n  ∀ a b, a < rows → b < cols →\n    crossing_sum matrix a b = val\
  \ * (rows + cols - 1) :=\nsorry\n\n\ntheorem crossing_sum_manual_calc\n  (matrix\
  \ : List (List Int))\n  (h_non_empty : matrix.length > 0)\n  (h_rectangular : ∀\
  \ row ∈ matrix, row.length = (matrix.get! 0).length) :\n  ∀ a b, a < matrix.length\
  \ → b < (matrix.get! 0).length →\n    crossing_sum matrix a b = \n      (matrix.get!\
  \ a).foldl (· + ·) 0 + \n      (matrix.foldl (fun sum row => row.get! b + sum) 0)\
  \ -\n      (matrix.get! a).get! b :=\nsorry\n\n\ntheorem one_by_one_matrix_crossing_sum\n\
  \  (matrix : List (List Int))\n  (h_size : matrix.length = 1 ∧ (matrix.get! 0).length\
  \ = 1) :\n  crossing_sum matrix 0 0 = (matrix.get! 0).get! 0 :=\nsorry\n\n/--\n\
  info: 12\n-/\n#guard_msgs in\n#eval crossing_sum [[1, 1, 1, 1], [2, 2, 2, 2], [3,\
  \ 3, 3, 3]] 1 3\n\n/--\ninfo: 9\n-/\n#guard_msgs in\n#eval crossing_sum [[1, 1],\
  \ [3, 3], [1, 1], [2, 2]] 3 0\n\n/--\ninfo: 100\n-/\n#guard_msgs in\n#eval crossing_sum\
  \ [[100]] 0 0\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
