"vc-description": "Consider a sequence `u` where u is defined as follows:\n\n1. The\
  \ number `u(0) = 1` is the first one in `u`.\n2. For each `x` in `u`, then `y =\
  \ 2 * x + 1` and `z = 3 * x + 1` must be in `u` too.\n3. There are no other numbers\
  \ in `u`.\n\nEx: \n`u = [1, 3, 4, 7, 9, 10, 13, 15, 19, 21, 22, 27, ...]`\n\n1 gives\
  \ 3 and 4, then 3 gives 7 and 10, 4 gives 9 and 13, then 7 gives 15 and 22 and so\
  \ on...\n\n## Task: \nGiven parameter `n` the function `dbl_linear` (or dblLinear...)\
  \ returns the element `u(n)` of \nthe ordered (with <) sequence `u` (so, there are\
  \ no duplicates).\n\n## Example:\n`dbl_linear(10) should return 22`\n\n## Note:\n\
  Focus attention on efficiency"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def dbl_linear (n : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem dbl_linear_positive (n : Nat) : \n  dbl_linear n > 0 := sorry\n\
  \n\ntheorem dbl_linear_strictly_increasing {n₁ n₂ : Nat} (h : n₁ < n₂) : \n  dbl_linear\
  \ n₁ < dbl_linear n₂ := sorry\n\n\ntheorem dbl_linear_base_case : \n  dbl_linear\
  \ 0 = 1 := sorry\n\n\ntheorem dbl_linear_sequence_rule {n : Nat} (h : dbl_linear\
  \ n > 1) :\n  ∃ i < n, dbl_linear n = 2 * dbl_linear i + 1 ∨ dbl_linear n = 3 *\
  \ dbl_linear i + 1 := sorry\n\n/--\ninfo: 22\n-/\n#guard_msgs in\n#eval dbl_linear\
  \ 10\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval dbl_linear 0\n\n/--\ninfo: 57\n\
  -/\n#guard_msgs in\n#eval dbl_linear 20\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
