"vc-description": "This kata aims to show the vulnerabilities of hashing functions\
  \ for short messages.\n\nWhen provided with a SHA-256 hash, return the value that\
  \ was hashed. You are also given the characters that make the expected value, but\
  \ in alphabetical order.\n\nThe returned value is less than 10 characters long.\
  \ Return `nil` for Ruby and Crystal, `None` for Python, `null` for Java when the\
  \ hash cannot be cracked with the given characters.\n\n---\n\nExample:\n--------\n\
  ```\nExample arguments: '5694d08a2e53ffcae0c3103e5ad6f6076abd960eb1f8a56577040bc1028f702b',\
  \ 'cdeo'\nCorrect output: 'code'\n```"
"vc-preamble": "import Imports.AllImports\n\ndef sha256_cracker (h: String) (chars:\
  \ String) : Option String :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sha256 (s: String) : String :=\n  sorry\n"
"vc-theorems": "theorem found_string_matches_hash\n  {s h chars result: String} :\n\
  \  (h = sha256 s) →\n  (chars = s.toList.toString) →\n  (sha256_cracker h chars\
  \ = some result) →\n  (sha256 result = h) ∧ \n  (∀ c, c ∈ result.data → c ∈ chars.data)\
  \ :=\nsorry\n\n\ntheorem invalid_chars_return_none\n  {s h invalid_chars chars:\
  \ String} :\n  (h = sha256 s) →\n  (chars = (invalid_chars.toList.filter (fun c\
  \ => !s.data.contains c)).toString) →\n  (chars ≠ \"\") →\n  sha256_cracker h chars\
  \ = none :=\nsorry\n\n\ntheorem empty_chars_returns_none\n  {s h: String} :\n  (h\
  \ = sha256 s) →\n  sha256_cracker h \"\" = none :=\nsorry\n\n/--\ninfo: 'GoOutside'\n\
  -/\n#guard_msgs in\n#eval sha256_cracker \"b8c49d81cb795985c007d78379e98613a4dfc824381be472238dbd2f974e37ae\"\
  \ \"deGioOstu\"\n\n/--\ninfo: 'code'\n-/\n#guard_msgs in\n#eval sha256_cracker \"\
  5694d08a2e53ffcae0c3103e5ad6f6076abd960eb1f8a56577040bc1028f702b\" \"cdeo\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
