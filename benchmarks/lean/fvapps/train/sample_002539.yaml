"vc-description": "You're playing a game with a friend involving a bag of marbles.\
  \ In the bag are ten marbles:\n\n* 1 smooth red marble\n* 4 bumpy red marbles\n\
  * 2 bumpy yellow marbles\n* 1 smooth yellow marble\n* 1 bumpy green marble\n* 1\
  \ smooth green marble\n\nYou can see that the probability of picking a smooth red\
  \ marble from the bag is `1 / 10` or `0.10` and the probability of picking a bumpy\
  \ yellow marble is `2 / 10` or `0.20`.\n\nThe game works like this: your friend\
  \ puts her hand in the bag, chooses a marble (without looking at it) and tells you\
  \ whether it's bumpy or smooth. Then you have to guess which color it is before\
  \ she pulls it out and reveals whether you're correct or not.\n\nYou know that the\
  \ information about whether the marble is bumpy or smooth changes the probability\
  \ of what color it is, and you want some help with your guesses.\n\nWrite a function\
  \ `color_probability()` that takes two arguments: a color (`'red'`, `'yellow'`,\
  \ or `'green'`) and a texture (`'bumpy'` or `'smooth'`) and returns the probability\
  \ as a decimal fraction accurate to two places.\n\nThe probability should be a string\
  \ and should discard any digits after the 100ths place. For example, `2 / 3` or\
  \ `0.6666666666666666` would become the string `'0.66'`. Note this is different\
  \ from rounding.\n\nAs a complete example, `color_probability('red', 'bumpy')` should\
  \ return the string `'0.57'`."
"vc-preamble": "import Imports.AllImports\n\ndef validColors := [\"red\", \"yellow\"\
  , \"green\"]\ndef validTextures := [\"smooth\", \"bumpy\"]\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def colorProbability (color: String) (texture: String) : Float\
  \ :=\n  sorry\n"
"vc-theorems": "theorem probability_in_bounds (color: String) (texture: String)\n\
  \  (h1: color ∈ validColors) (h2: texture ∈ validTextures) :\n  let p := colorProbability\
  \ color texture\n  0 ≤ p ∧ p ≤ 1 :=\nsorry\n\n\ntheorem invalid_color_error (color:\
  \ String) (texture: String)\n  (h: color ∉ validColors) (h2: texture ∈ validTextures)\
  \ :\n  (colorProbability color texture).isNaN :=\nsorry\n\n\ntheorem invalid_texture_error\
  \ (color: String) (texture: String)\n  (h1: color ∈ validColors) (h: texture ∉ validTextures)\
  \ :\n  (colorProbability color texture).isNaN :=\nsorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
