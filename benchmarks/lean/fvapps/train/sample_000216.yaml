"vc-description": "Today, the bookstore owner has a store open for customers.length\
  \ minutes.  Every minute, some number of customers (customers[i]) enter the store,\
  \ and all those customers leave after the end of that minute.\nOn some minutes,\
  \ the bookstore owner is grumpy.  If the bookstore owner is grumpy on the i-th minute,\
  \ grumpy[i] = 1, otherwise grumpy[i] = 0.  When the bookstore owner is grumpy, the\
  \ customers of that minute are not satisfied, otherwise they are satisfied.\nThe\
  \ bookstore owner knows a secret technique to keep themselves not grumpy for X minutes\
  \ straight, but can only use it once.\nReturn the maximum number of customers that\
  \ can be satisfied throughout the day.\n \nExample 1:\nInput: customers = [1,0,1,2,1,1,7,5],\
  \ grumpy = [0,1,0,1,0,1,0,1], X = 3\nOutput: 16\nExplanation: The bookstore owner\
  \ keeps themselves not grumpy for the last 3 minutes. \nThe maximum number of customers\
  \ that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16.\n\n \nNote:\n\n1 <= X <= customers.length\
  \ == grumpy.length <= 20000\n0 <= customers[i] <= 1000\n0 <= grumpy[i] <= 1"
"vc-preamble": "import Imports.AllImports\n\ndef sum (l : List Nat) : Nat :=\n  l.foldr\
  \ (· + ·) 0\n\n\ndef minimum (l : List Nat) : Nat :=\n  match l with\n  | [] =>\
  \ 0\n  | x::xs => xs.foldr min x\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def maxSatisfied (customers : List Nat) (grumpy : List Nat) (X\
  \ : Nat) : Nat := \n  sorry\n"
"vc-theorems": "theorem maxSatisfied_properties {customers grumpy : List Nat} {X :\
  \ Nat}\n  (h1 : customers.length > 0)\n  (h2 : grumpy.length = customers.length)\n\
  \  (h3 : X > 0)\n  (h4 : ∀ x ∈ customers, x ≤ 1000)\n  (h5 : ∀ x ∈ grumpy, x ≤ 1)\
  \ :\n  let result := maxSatisfied customers grumpy X\n  let base_satisfied := (List.zip\
  \ customers grumpy).foldr (fun (p : Nat × Nat) acc => \n    if p.2 = 0 then acc\
  \ + p.1 else acc) 0\n  (result ≥ base_satisfied \n  ∧ result ≤ sum customers\n \
  \ ∧ (grumpy.all (· = 0) → result = sum customers)) := by\n  sorry\n\n\ntheorem maxSatisfied_single_element\
  \ {customers : List Nat} \n  (h1 : customers.length > 0) :\n  let grumpy_zeros :=\
  \ List.replicate customers.length 0\n  let grumpy_ones := List.replicate customers.length\
  \ 1\n  (maxSatisfied customers grumpy_zeros 1 = sum customers\n  ∧ maxSatisfied\
  \ customers grumpy_ones 1 ≥ minimum customers) := by\n  sorry\n\n/--\ninfo: 16\n\
  -/\n#guard_msgs in\n#eval maxSatisfied [1, 0, 1, 2, 1, 1, 7, 5] [0, 1, 0, 1, 0,\
  \ 1, 0, 1] 3\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval maxSatisfied [1] [0] 1\n\
  \n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval maxSatisfied [2, 4, 1, 4, 1] [1, 1, 1,\
  \ 1, 1] 2\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
