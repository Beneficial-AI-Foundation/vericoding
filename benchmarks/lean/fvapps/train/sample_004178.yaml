"vc-description": "Spoonerize... with numbers... numberize?... numboonerize?... noonerize?\
  \ ...anyway!  If you don't yet know what a spoonerism is and haven't yet tried my\
  \ spoonerism kata, please do [check it out](http://www.codewars.com/kata/spoonerize-me)\
  \ first.\n\nYou will create a function which takes an array of two positive integers,\
  \ spoonerizes them, and returns the positive difference between them as a single\
  \ number or ```0``` if the numbers are equal:\n```\n[123, 456] = 423 - 156 = 267\n\
  ```\nYour code must test that all array items are numbers and return ```\"invalid\
  \ array\"``` if it finds that either item is not a number.  The provided array will\
  \ always contain 2 elements.\n\nWhen the inputs are valid, they will always be integers,\
  \ no floats will be passed.  However, you must take into account that the numbers\
  \ will be of varying magnitude, between and within test cases."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def noonerize (nums : List Int) : Int ⊕ String := sorry\n\ndef\
  \ checkValidNoonorizePair (n1 n2 : Int) : Bool := sorry\n"
"vc-theorems": "theorem valid_numbers {x y : Int} (hx : x ≥ 10) (hy : y ≥ 10)\n  (h\
  \ : checkValidNoonorizePair x y = true) :\n  match noonerize [x, y] with\n  | Sum.inl\
  \ n => n ≥ 0\n  | Sum.inr _ => False\n  := sorry\n\n\ntheorem invalid_inputs (nums\
  \ : List Int) \n  (h : nums.length = 2) \n  (h' : ∃ x ∈ nums, x < 10) :\n  noonerize\
  \ nums = Sum.inr \"invalid array\" := sorry\n\n\ntheorem edge_cases_single (nums\
  \ : List Int) \n  (h : nums.length = 1) :\n  noonerize nums = Sum.inr \"invalid\
  \ array\" := sorry\n\n\ntheorem edge_cases_empty (nums : List Int) \n  (h : nums.length\
  \ = 0) :\n  noonerize nums = Sum.inr \"invalid array\" := sorry\n\n\ntheorem symmetry\
  \ {x y : Int} (hx : x ≥ 10) (hy : y ≥ 10)\n  (h : checkValidNoonorizePair x y =\
  \ true) :\n  noonerize [x, y] = noonerize [y, x] := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
