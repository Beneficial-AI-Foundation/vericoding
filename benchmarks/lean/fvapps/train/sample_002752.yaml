"vc-description": "We’ve all seen katas that ask for conversion from snake-case to\
  \ camel-case, from camel-case to snake-case, or from camel-case to kebab-case —\
  \ the possibilities are endless.\n\nBut if we don’t know the case our inputs are\
  \ in, these are not very helpful.\n\n### Task:\n\nSo the task here is to implement\
  \ a function (called `id` in Ruby/Crystal/JavaScript/CoffeeScript and `case_id`\
  \ in Python/C) that takes a string, `c_str`, and returns a string with the case\
  \ the input is in. The possible case types are “kebab”, “camel”, and ”snake”. If\
  \ none of the cases match with the input, or if there are no 'spaces' in the input\
  \ (for example in snake case, spaces would be '_'s), return “none”. Inputs will\
  \ only have letters (no numbers or special characters).\n\n### Some definitions\n\
  \nKebab case: `lowercase-words-separated-by-hyphens`\n\nCamel case: `lowercaseFirstWordFollowedByCapitalizedWords`\n\
  \nSnake case: `lowercase_words_separated_by_underscores`\n\n### Examples:\n\n```python\n\
  case_id(“hello-world”) #=> “kebab”\ncase_id(“hello-to-the-world”) #=> “kebab”\n\
  case_id(“helloWorld”) #=> “camel”\ncase_id(“helloToTheWorld”) #=> “camel”\ncase_id(“hello_world”)\
  \ #=> “snake”\ncase_id(“hello_to_the_world”) #=> “snake”\ncase_id(“hello__world”)\
  \ #=> “none”\ncase_id(“hello_World”) #=> “none”\ncase_id(“helloworld”) #=> “none”\n\
  case_id(“hello-World”) #=> “none”\n```\n\nAlso check out my other creations — [Split\
  \ Without Loss](https://www.codewars.com/kata/split-without-loss), [Adding Fractions](https://www.codewars.com/kata/adding-fractions),\n\
  [Random Integers](https://www.codewars.com/kata/random-integers), [Implement String#transpose](https://www.codewars.com/kata/implement-string-number-transpose),\
  \ [Implement Array#transpose!](https://www.codewars.com/kata/implement-array-number-transpose),\
  \ [Arrays and Procs #1](https://www.codewars.com/kata/arrays-and-procs-number-1),\
  \ and [Arrays and Procs #2](https://www.codewars.com/kata/arrays-and-procs-number-2)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def case_id (s : String) : String := sorry\n\ntheorem case_id_result_is_valid\
  \ (s : String) :\n  case_id s = \"snake\" ∨ case_id s = \"kebab\" ∨ case_id s =\
  \ \"camel\" ∨ case_id s = \"none\" := sorry\n"
"vc-theorems": "theorem empty_string_is_none :\n  case_id \"\" = \"none\" := sorry\n\
  \n\ntheorem single_word_is_none (w : String) :\n  w.all (fun c => c.isLower) →\n\
  \  case_id w = \"none\" := sorry\n\n\ntheorem snake_case_recognition {words : List\
  \ String} {joined : String} :\n  words.length ≥ 2 →\n  (∀ w ∈ words, w ≠ \"\") →\n\
  \  (∀ w ∈ words, w.all (fun c => c.isLower)) →\n  joined = String.intercalate \"\
  _\" words →\n  case_id joined = \"snake\" := sorry\n\n\ntheorem basic_kebab_case\
  \ :\n  case_id \"hello-world\" = \"kebab\" := sorry\n\n\ntheorem basic_camel_case\
  \ :\n  case_id \"helloWorld\" = \"camel\" := sorry\n\n/--\ninfo: 'snake'\n-/\n#guard_msgs\
  \ in\n#eval case_id \"hello_world\"\n\n/--\ninfo: 'snake'\n-/\n#guard_msgs in\n\
  #eval case_id \"hello_to_the_world\"\n\n/--\ninfo: 'kebab'\n-/\n#guard_msgs in\n\
  #eval case_id \"hello-world\"\n\n/--\ninfo: 'kebab'\n-/\n#guard_msgs in\n#eval case_id\
  \ \"hello-to-the-world\"\n\n/--\ninfo: 'camel'\n-/\n#guard_msgs in\n#eval case_id\
  \ \"helloWorld\"\n\n/--\ninfo: 'camel'\n-/\n#guard_msgs in\n#eval case_id \"helloToTheWorld\"\
  \n\n/--\ninfo: 'none'\n-/\n#guard_msgs in\n#eval case_id \"hello_World\"\n\n/--\n\
  info: 'none'\n-/\n#guard_msgs in\n#eval case_id \"hello-World\"\n\n/--\ninfo: 'none'\n\
  -/\n#guard_msgs in\n#eval case_id \"helloworld\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
