"vc-description": "A cinema has n rows of seats, numbered from 1 to n and there are\
  \ ten seats in each row, labelled from 1 to 10 as shown in the figure above.\nGiven\
  \ the array reservedSeats containing the numbers of seats already reserved, for\
  \ example, reservedSeats[i] = [3,8] means the seat located in row 3 and labelled\
  \ with 8 is already reserved.\nReturn the maximum number of four-person groups you\
  \ can assign on the cinema seats. A four-person group occupies four adjacent seats\
  \ in one single row. Seats across an aisle (such as [3,3] and [3,4]) are not considered\
  \ to be adjacent, but there is an exceptional case on which an aisle split a four-person\
  \ group, in that case, the aisle split a four-person group in the middle, which\
  \ means to have two people on each side.\n \nExample 1:\n\nInput: n = 3, reservedSeats\
  \ = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]\nOutput: 4\nExplanation: The figure above\
  \ shows the optimal allocation for four groups, where seats mark with blue are already\
  \ reserved and contiguous seats mark with orange are for one group.\n\nExample 2:\n\
  Input: n = 2, reservedSeats = [[2,1],[1,8],[2,6]]\nOutput: 2\n\nExample 3:\nInput:\
  \ n = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]]\nOutput: 4\n\n \nConstraints:\n\
  \n1 <= n <= 10^9\n1 <= reservedSeats.length <= min(10*n, 10^4)\nreservedSeats[i].length\
  \ == 2\n1 <= reservedSeats[i][0] <= n\n1 <= reservedSeats[i][1] <= 10\nAll reservedSeats[i]\
  \ are distinct."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def max_number_of_families (n: Nat) (reserved: List (Nat × Nat))\
  \ : Nat :=\n  sorry\n"
"vc-theorems": "theorem empty_reservations {n: Nat} (h: n > 0) :\n  max_number_of_families\
  \ n [] = 2 * n := \n  sorry\n\n\ntheorem result_monotonicity {n: Nat} (reserved:\
  \ List (Nat × Nat)) (h: n > 0) :\n  max_number_of_families n (reserved ++ [(1,5)])\
  \ ≤ max_number_of_families n reserved :=\n  sorry\n\n\ntheorem basic_bounds {n:\
  \ Nat} (reserved: List (Nat × Nat)) (h: n > 0) :\n  0 ≤ max_number_of_families n\
  \ reserved ∧ max_number_of_families n reserved ≤ 2 * n :=\n  sorry\n\n/--\ninfo:\
  \ 4\n-/\n#guard_msgs in\n#eval max_number_of_families 3 [[1, 2], [1, 3], [1, 8],\
  \ [2, 6], [3, 1], [3, 10]]\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval max_number_of_families\
  \ 2 [[2, 1], [1, 8], [2, 6]]\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval max_number_of_families\
  \ 4 [[4, 3], [1, 4], [4, 6], [1, 7]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
