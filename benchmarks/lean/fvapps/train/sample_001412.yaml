"vc-description": "Chef has a recipe book. He wishes to read it completely as soon\
  \ as possible so that he could try to cook the dishes mentioned in the book.\nThe\
  \ pages of the book are numbered $1$ through $N$. Over a series of days, Chef wants\
  \ to read each page. On each day, Chef can choose to read any set of pages such\
  \ that there is no prime that divides the numbers of two or more of these pages,\
  \ i.e. the numbers of pages he reads on the same day must be pairwise coprime. For\
  \ example, Chef can read pages $1$, $3$ and $10$ on one day, since $(1, 3)$, $(3,\
  \ 10)$ and $(1, 10)$ are pairs of coprime integers; however, he cannot read pages\
  \ $1$, $3$ and $6$ on one day, as $3$ and $6$ are both divisible by $3$. Since chef\
  \ might get bored by reading the same recipe again and again, Chef will read every\
  \ page exactly once.\nGiven $N$, determine the minimum number of days Chef needs\
  \ to read the entire book and the pages Chef should read on each of these days.\n\
  \n-----Input-----\n- The first line of the input contains a single integer $T$ denoting\
  \ the number of test cases. The description of $T$ test cases follows.\n- The first\
  \ and only line of each test case contains a single integer $N$.\n\n-----Output-----\n\
  For each test case:\n- First, print a line containing a single integer $D$ ― the\
  \ minimum number of days required to read the book. Let's number these days $1$\
  \ through $D$.\n- Then, print $D$ lines describing the pages Chef should read. For\
  \ each valid $i$, the $i$-th of these lines should contain an integer $C_i$ followed\
  \ by a space and $C_i$ space-separated integers ― the numbers of pages Chef should\
  \ read on the $i$-th day.\nIf there are multiple solutions with the minimum number\
  \ of days, you may print any one.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n\
  - $1 \\le N \\le 10^6$\n\n-----Subtasks-----\nSubtask #1 (20 points): $N \\le 100$\n\
  Subtask #2 (80 points): original constraints\n\n-----Example Input-----\n1\n5\n\n\
  -----Example Output-----\n2\n3 1 2 5\n2 3 4\n\n-----Explanation-----\nExample case\
  \ 1:\n- On the first day, Chef should read three pages: $1$, $2$ and $5$.\n- On\
  \ the second day, Chef should read the remaining two pages: $3$ and $4$.\nThere\
  \ are other valid solutions as well."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_recipe_book (n : Nat) : List (List Nat) := sorry\n\n\
  def format_output (groups : List (List Nat)) : List String := sorry\n"
"vc-theorems": "theorem solve_recipe_book_returns_lists {n : Nat} (h : n > 0) (h2\
  \ : n ≤ 1000) :\n  let result := solve_recipe_book n\n  ∀ x ∈ result, ∀ y ∈ x, y\
  \ > 0 := sorry\n\n\ntheorem solve_recipe_book_contains_one {n : Nat} (h : n > 0)\
  \ (h2 : n ≤ 1000) :\n  let result := solve_recipe_book n\n  result ≠ [] → 1 ∈ result.head!\
  \ := sorry \n\n\n\n\ntheorem solve_recipe_book_no_duplicates_in_groups {n : Nat}\
  \ (h : n > 0) (h2 : n ≤ 1000) :\n  let result := solve_recipe_book n  \n  ∀ group\
  \ ∈ result, ∀ x y, x ∈ group → y ∈ group → x = y → x = y := sorry\n\n\ntheorem solve_recipe_book_optimal_groups\
  \ {n : Nat} (h : n > 1) (h2 : n ≤ 1000) :\n  let result := solve_recipe_book n\n\
  \  result.length ≤ (n + 1) / 2 := sorry\n\n\ntheorem format_output_valid {groups\
  \ : List (List Nat)} :\n  let result := format_output groups\n  (∀ x ∈ result, x.length\
  \ > 0) ∧\n  result.length = groups.length + 1 ∧\n  result.head! = toString groups.length\
  \ := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
