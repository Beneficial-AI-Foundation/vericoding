"vc-description": "You need to play around with the provided string (s).\n\nMove consonants\
  \ forward 9 places through the alphabet.\nIf they pass 'z', start again at 'a'.\n\
  \nMove vowels back 5 places through the alphabet.\nIf they pass 'a', start again\
  \ at 'z'.\nFor our Polish friends this kata does not count 'y' as a vowel.\n\nExceptions:\n\
  \nIf the character is 'c' or 'o', move it back 1 place.\nFor 'd' move it back 3,\
  \ and for 'e', move it back 4.\n\nIf a moved letter becomes 'c', 'o', 'd' or 'e',\
  \ revert it back to it's original value.\n\nProvided string will always be lower\
  \ case, won't be empty and will have no special characters."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def vowel_back (s : String) : String := sorry\n\ntheorem vowel_back_same_length\
  \ (s : String) \n  (h : s.all (fun c => 'a' ≤ c ∧ c ≤ 'z')) \n  (h2 : s.length >\
  \ 0) : \n  (vowel_back s).length = s.length := sorry\n"
"vc-theorems": "theorem vowel_back_lowercase_letters (s : String)\n  (h : s.all (fun\
  \ c => 'a' ≤ c ∧ c ≤ 'z'))\n  (h2 : s.length > 0) :\n  (vowel_back s).all (fun c\
  \ => 'a' ≤ c ∧ c ≤ 'z') := sorry\n\n\ntheorem vowel_back_deterministic (s : String)\n\
  \  (h : s.all (fun c => 'a' ≤ c ∧ c ≤ 'z'))\n  (h2 : s.length > 0) :\n  vowel_back\
  \ s = vowel_back s := sorry\n\n\ntheorem vowel_back_consistent_mapping (s : String)\n\
  \  (h : s.all (fun c => 'a' ≤ c ∧ c ≤ 'z'))\n  (h2 : s.length > 0) :\n  ∀ i j, i\
  \ < s.length → j < s.length → \n  s.data[i]? = s.data[j]? → \n  (vowel_back s).data[i]?\
  \ = (vowel_back s).data[j]? := sorry\n\n/--\ninfo: 'tabtbvba'\n-/\n#guard_msgs in\n\
  #eval vowel_back \"testcase\"\n\n/--\ninfo: 'bnaafvab'\n-/\n#guard_msgs in\n#eval\
  \ vowel_back \"codewars\"\n\n/--\ninfo: 'agvvyuatabtqaaa'\n-/\n#guard_msgs in\n\
  #eval vowel_back \"exampletesthere\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
