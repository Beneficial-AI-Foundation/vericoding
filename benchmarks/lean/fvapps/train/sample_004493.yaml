"vc-description": "```if-not:racket\nWrite a function called `repeat_str` which repeats\
  \ the given string `src` exactly `count` times.\n```\n```if:racket\nWrite a function\
  \ called `repeat-string` which repeats the given string `str` exactly `count` times.\n\
  ```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def repeat_str (n : Nat) (s : String) : String := sorry\n\ntheorem\
  \ repeat_str_length (n : Nat) (s : String) :\n  (repeat_str n s).length = s.length\
  \ * n := sorry\n"
"vc-theorems": "theorem repeat_str_repeat (n : Nat) (s : String) :\n  repeat_str n\
  \ s = String.join (List.replicate n s) := sorry\n\n\ntheorem repeat_str_zero (s\
  \ : String) :\n  repeat_str 0 s = \"\" := sorry\n  \n\ntheorem repeat_str_one (s\
  \ : String) :\n  repeat_str 1 s = s := sorry\n\n/--\ninfo: 'aaaa'\n-/\n#guard_msgs\
  \ in\n#eval repeat_str 4 \"a\"\n\n/--\ninfo: 'hello hello hello '\n-/\n#guard_msgs\
  \ in\n#eval repeat_str 3 \"hello \"\n\n/--\ninfo: 'abcabc'\n-/\n#guard_msgs in\n\
  #eval repeat_str 2 \"abc\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
