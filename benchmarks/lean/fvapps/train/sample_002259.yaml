"vc-description": "You have $n$ gifts and you want to give all of them to children.\
  \ Of course, you don't want to offend anyone, so all gifts should be equal between\
  \ each other. The $i$-th gift consists of $a_i$ candies and $b_i$ oranges.\n\nDuring\
  \ one move, you can choose some gift $1 \\le i \\le n$ and do one of the following\
  \ operations:\n\n  eat exactly one candy from this gift (decrease $a_i$ by one);\
  \  eat exactly one orange from this gift (decrease $b_i$ by one);  eat exactly one\
  \ candy and exactly one orange from this gift (decrease both $a_i$ and $b_i$ by\
  \ one). \n\nOf course, you can not eat a candy or orange if it's not present in\
  \ the gift (so neither $a_i$ nor $b_i$ can become less than zero).\n\nAs said above,\
  \ all gifts should be equal. This means that after some sequence of moves the following\
  \ two conditions should be satisfied: $a_1 = a_2 = \\dots = a_n$ and $b_1 = b_2\
  \ = \\dots = b_n$ (and $a_i$ equals $b_i$ is not necessary).\n\nYour task is to\
  \ find the minimum number of moves required to equalize all the given gifts.\n\n\
  You have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first\
  \ line of the input contains one integer $t$ ($1 \\le t \\le 1000$) — the number\
  \ of test cases. Then $t$ test cases follow.\n\nThe first line of the test case\
  \ contains one integer $n$ ($1 \\le n \\le 50$) — the number of gifts. The second\
  \ line of the test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i\
  \ \\le 10^9$), where $a_i$ is the number of candies in the $i$-th gift. The third\
  \ line of the test case contains $n$ integers $b_1, b_2, \\dots, b_n$ ($1 \\le b_i\
  \ \\le 10^9$), where $b_i$ is the number of oranges in the $i$-th gift.\n\n\n-----Output-----\n\
  \nFor each test case, print one integer: the minimum number of moves required to\
  \ equalize all the given gifts.\n\n\n-----Example-----\nInput\n5\n3\n3 5 6\n3 2\
  \ 3\n5\n1 2 3 4 5\n5 4 3 2 1\n3\n1 1 1\n2 2 2\n6\n1 1000000000 1000000000 1000000000\
  \ 1000000000 1000000000\n1 1 1 1 1 1\n3\n10 12 8\n7 5 4\n\nOutput\n6\n16\n0\n4999999995\n\
  7\n\n\n\n-----Note-----\n\nIn the first test case of the example, we can perform\
  \ the following sequence of moves:\n\n  choose the first gift and eat one orange\
  \ from it, so $a = [3, 5, 6]$ and $b = [2, 2, 3]$;  choose the second gift and eat\
  \ one candy from it, so $a = [3, 4, 6]$ and $b = [2, 2, 3]$;  choose the second\
  \ gift and eat one candy from it, so $a = [3, 3, 6]$ and $b = [2, 2, 3]$;  choose\
  \ the third gift and eat one candy and one orange from it, so $a = [3, 3, 5]$ and\
  \ $b = [2, 2, 2]$;  choose the third gift and eat one candy from it, so $a = [3,\
  \ 3, 4]$ and $b = [2, 2, 2]$;  choose the third gift and eat one candy from it,\
  \ so $a = [3, 3, 3]$ and $b = [2, 2, 2]$."
"vc-preamble": "import Imports.AllImports\n\ndef min_moves_to_equalize (n : Nat) (candies\
  \ : List Nat) (oranges : List Nat) : Nat :=\n  sorry\n\n\ndef list_max (l : List\
  \ Nat) : Nat :=\n  sorry\n\n\ndef list_min (l : List Nat) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def list_sum (l : List Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem min_moves_non_negative (n : Nat) (candies : List Nat) (oranges\
  \ : List Nat) :\n  min_moves_to_equalize n candies oranges ≥ 0 :=\nsorry\n\n\ntheorem\
  \ min_moves_lower_bound (n : Nat) (candies : List Nat) (oranges : List Nat) :\n\
  \  min_moves_to_equalize n candies oranges ≥ \n    max \n      (list_max candies\
  \ - list_min candies)\n      (list_max oranges - list_min oranges) :=\nsorry\n\n\
  \ntheorem min_moves_upper_bound (n : Nat) (candies oranges : List Nat) :\n  min_moves_to_equalize\
  \ n candies oranges ≤ \n    (list_sum (candies.map (λ x => x - list_min candies)))\
  \ +\n    (list_sum (oranges.map (λ x => x - list_min oranges))) :=\nsorry\n\n\n\
  theorem identical_lists_zero_moves (n : Nat) (v : Nat) :\n  min_moves_to_equalize\
  \ n (List.replicate n v) (List.replicate n v) = 0 :=\nsorry\n\n\ntheorem min_moves_symmetric\
  \ (n : Nat) (candies oranges : List Nat) :\n  min_moves_to_equalize n candies oranges\
  \ = min_moves_to_equalize n oranges candies :=\nsorry\n\n/--\ninfo: 6\n-/\n#guard_msgs\
  \ in\n#eval min_moves_to_equalize 3 [3, 5, 6] [3, 2, 3]\n\n/--\ninfo: 16\n-/\n#guard_msgs\
  \ in\n#eval min_moves_to_equalize 5 [1, 2, 3, 4, 5] [5, 4, 3, 2, 1]\n\n/--\ninfo:\
  \ 7\n-/\n#guard_msgs in\n#eval min_moves_to_equalize 3 [10, 12, 8] [7, 5, 4]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
