"vc-description": "Given a number, write a function to output its reverse digits.\
  \  (e.g. given 123 the answer is 321)\n\n\nNumbers should preserve their sign; i.e.\
  \ a negative number should still be negative when reversed.\n\n### Examples\n```\n\
  \ 123 ->  321\n-456 -> -654\n1000 ->    1\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def reverse_number (n : Int) : Int := \n  sorry\n"
"vc-theorems": "theorem sign_preserved (x : Int) : \n  x ≥ 0 → reverse_number x ≥\
  \ 0 ∧ \n  x < 0 → reverse_number x < 0 := \n  sorry\n\n\ntheorem trailing_zeros_removed\
  \ (x n : Nat) :\n  x > 0 → \n  n ≥ 0 →\n  n ≤ 5 →\n  reverse_number (x * 10^n) =\
  \ \n    reverse_number x :=\n  sorry\n\n/--\ninfo: 321\n-/\n#guard_msgs in\n#eval\
  \ reverse_number 123\n\n/--\ninfo: -654\n-/\n#guard_msgs in\n#eval reverse_number\
  \ -456\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval reverse_number 1000\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
