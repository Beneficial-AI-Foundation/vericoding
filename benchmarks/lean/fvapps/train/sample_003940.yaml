"vc-description": "Consider the numbers `6969` and `9116`. When you rotate them `180\
  \ degrees` (upside down), these numbers remain the same. To clarify, if we write\
  \ them down on a paper and turn the paper upside down, the numbers will be the same.\
  \ Try it and see! Some numbers such as `2` or `5` don't yield numbers when rotated.\n\
  \nGiven a range, return the count of upside down numbers within that range.  For\
  \ example, `solve(0,10) = 3`, because there are only `3` upside down numbers `>=\
  \ 0 and < 10`. They are `0, 1, 8`.\n\nMore examples in the test cases.\n\nGood luck!\n\
  \nIf you like this Kata, please try \n\n[Simple Prime Streaming](https://www.codewars.com/kata/5a908da30025e995880000e3)\n\
  \n[Life without primes](https://www.codewars.com/kata/59f8750ac374cba8f0000033)\n\
  \nPlease also try the performance version of this kata at [Upside down numbers -\
  \ Challenge Edition ](https://www.codewars.com/kata/59f98052120be4abfa000304)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve (x y : Nat) : Nat := sorry\n\ninstance : ToString Nat\
  \ where\n  toString := sorry\n\n/-- For any valid range, the count is non-negative\
  \ -/"
"vc-theorems": "theorem solve_nonneg {x y : Nat} (h : x ≤ y) : \n  solve x y ≥ 0 :=\
  \ sorry \n\n/-- The count is always less than or equal to the range size -/\n\n\
  theorem solve_le_range {x y : Nat} (h : x ≤ y) :\n  solve x y ≤ y - x := sorry\n\
  \n/-- Empty range returns 0 -/\n\ntheorem solve_empty_range (n : Nat) :\n  solve\
  \ n n = 0 := sorry\n\n/-- Splitting range property - count over split ranges sums\
  \ to total -/\n\ntheorem solve_split_range {x y z : Nat} \n  (h1 : x ≤ y) (h2 :\
  \ y ≤ z) :\n  solve x z = solve x y + solve y z := sorry\n\n/-- For valid rotation\
  \ numbers, all digits must be from valid set -/\n\ntheorem valid_rotation_digits\
  \ (n : Nat) :\n  solve n (n+1) = 1 → ∀ c, c ∈ (ToString.toString n).data → c ∈ ['0',\
  \ '1', '8', '6', '9'] := sorry\n\n/-- For odd length valid rotation numbers, middle\
  \ digit has restrictions -/ \n\ntheorem odd_len_middle_digit (n : Nat) (h1 : solve\
  \ n (n+1) = 1)\n  (h2 : (ToString.toString n).length % 2 = 1) :\n  let mid := (ToString.toString\
  \ n).length / 2\n  let c := ((ToString.toString n).data.get! mid)\n  c ≠ '6' ∧ c\
  \ ≠ '9' := sorry\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval solve 0 10\n\n/--\n\
  info: 4\n-/\n#guard_msgs in\n#eval solve 10 100\n\n/--\ninfo: 12\n-/\n#guard_msgs\
  \ in\n#eval solve 100 1000\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
