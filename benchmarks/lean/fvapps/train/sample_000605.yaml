"vc-description": "Chef has a rectangular piece of paper. He puts it on a big board\
  \ in such a way that two sides of the paper are horizontal and two are vertical,\
  \ and then he performs a sequence of $N$ operations. You are given a string $S$\
  \ with length $N$; for each valid $i$, the $i$-th character of $S$ determines the\
  \ type of the $i$-th operation:\n- 'R': Pick up the paper from the right side and\
  \ fold it onto the left side.\n- 'L': Pick up the paper from the left side and fold\
  \ it onto the right side.\n- 'U': Pick up the paper from the upper side and fold\
  \ it onto the bottom side.\n- 'D': Pick up the paper from the bottom side and fold\
  \ it onto the upper side.\nThe paper is folded in such a way that there is still\
  \ a flat rectangular sheet of paper lying on the table after each operation, but\
  \ it consists of multiple layers of the original sheet. The lengths of the horizontal\
  \ and vertical sides of the resulting sheet (after performing these $N$ operations)\
  \ are $W$ and $H$ respectively. Let's build an Euclidean coordinate system on the\
  \ paper, where the point $(0, 0)$ corresponds to the bottom left corner and $(W,\
  \ H)$ to the upper right corner.\nChef then draws $M$ points on this folded sheet\
  \ of paper. The ink used to draw them soaks deep into the paper, so each point is\
  \ drawn on all layers of the paper (and also on both faces of each layer). \nFinally,\
  \ Chef completely unfolds the paper. He's asking you to compute the distance between\
  \ the nearest pair of points.\n\n-----Input-----\n- The first line of the input\
  \ contains a single integer $T$ denoting the number of test cases. The description\
  \ of $T$ test cases follows.\n- The first line of each test case contains four space-separated\
  \ integers $N$, $M$, $W$ and $H$.\n- The second line contains a single string $S$.\n\
  - Each of the following $M$ lines contains two space-separated integers $X$ and\
  \ $Y$ denoting the coordinates of one point.\n\n-----Output-----\nFor each test\
  \ case, print a single line containing one real number ― the minimum distance. Your\
  \ answer will be considered correct if its absolute or relative error does not exceed\
  \ $10^{-6}$.\n\n-----Constraints-----\n- $1 \\le T \\le 50$\n- $2 \\le M \\le 1,000$\n\
  - $1 \\le N \\le 1,000$\n- $3 \\le W, H \\le 10^9$\n- $1 \\le X \\le W-1$\n- $1\
  \ \\le Y \\le H-1$\n- the points are pairwise distinct\n\n-----Subtasks-----\nSubtask\
  \ #1 (50 points): all characters of $S$ are 'U'\nSubtask #2 (50 points): original\
  \ constraints\n\n-----Example Input-----\n2\n6 2 10 10\nULRDDL\n4 4\n5 5\n4 2 10\
  \ 10\nRUDL\n1 1\n9 9\n\n-----Example Output-----\n1.41421356237\n2.00000000000"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_paper_folding (N M W H : Nat) (S : String) (points :\
  \ List (Nat × Nat)) : Float := sorry\n\ntheorem paper_folding_non_negative (N M\
  \ W H : Nat) (S : String) (points : List (Nat × Nat)) :\n  solve_paper_folding N\
  \ M W H S points ≥ 0 := sorry\n"
"vc-theorems": "theorem paper_folding_finite (N M W H : Nat) (S : String) (points\
  \ : List (Nat × Nat)) :\n  Float.isFinite (solve_paper_folding N M W H S points)\
  \ := sorry\n\n\n\n\n\n\ntheorem identical_points_result_near_zero (n : Nat) (hn\
  \ : n ≥ 5) \n  (points : List (Nat × Nat)) (hpoints : points = [(n/2, n/2), (n/2,\
  \ n/2)]) :\n  solve_paper_folding 4 2 n n \"UDLR\" points ≤ 1e-6 := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
