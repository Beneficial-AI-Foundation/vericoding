"vc-description": "For building the encrypted string:Take every 2nd char from the\
  \ string, then the other chars, that are not every 2nd char, and concat them as\
  \ new String.\nDo this n times!\n\nExamples:\n```\n\"This is a test!\", 1 -> \"\
  hsi  etTi sats!\"\n\"This is a test!\", 2 -> \"hsi  etTi sats!\" -> \"s eT ashi\
  \ tist!\"\n```\n\nWrite two methods:\n```python\ndef encrypt(text, n)\ndef decrypt(encrypted_text,\
  \ n)\n```\n\n```Fsharp\nlet encrypt (str:string) (n:int) -> string\nlet decrypt\
  \ (str:string) (n:int) -> string\n```\n\nFor both methods:\nIf the input-string\
  \ is null or empty return exactly this value!\nIf n is <= 0 then return the input\
  \ text.\n\nThis kata is part of the Simple Encryption Series:\nSimple Encryption\
  \ #1 - Alternating Split\nSimple Encryption #2 - Index-Difference\nSimple Encryption\
  \ #3 - Turn The Bits Around\nSimple Encryption #4 - Qwerty\n\nHave fun coding it\
  \ and please don't forget to vote and rank this kata! :-)"
"vc-preamble": "import Imports.AllImports\n\ndef encrypt (text : Option String) (n\
  \ : Int) : Option String :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def decrypt (text : Option String) (n : Int) : Option String :=\n\
  \  sorry\n"
"vc-theorems": "theorem encrypt_decrypt_roundtrip {text : String} {n : Int} (h1 :\
  \ text.length > 0) (h2 : n > 0) (h3 : n ≤ 10) :\n  decrypt (encrypt (some text)\
  \ n) n = some text :=\n  sorry\n\n\ntheorem encrypt_edge_cases {text : Option String}\
  \ {n : Int} (h1 : text = none ∨ text = some \"\") (h2 : n > 0) (h3 : n ≤ 10) :\n\
  \  encrypt text n = text :=\n  sorry\n\n\ntheorem encrypt_invalid_n {text : String}\
  \ {n : Int} (h1 : text.length > 0) (h2 : n ≤ 0) :\n  encrypt (some text) n = some\
  \ text :=\n  sorry\n\n\ntheorem encrypt_length_preserved {text : String} {n : Int}\
  \ (h1 : text.length > 0) (h2 : n > 0) (h3 : n ≤ 10) :\n  (encrypt (some text) n).map\
  \ String.length = some text.length :=\n  sorry\n\n\ntheorem encrypt_char_preservation\
  \ {text : String} {n : Int} (h1 : text.length > 0) (h2 : n > 0) (h3 : n ≤ 10) :\n\
  \  (encrypt (some text) n).map (fun s => s.data.toArray.qsort (· ≤ ·)) = some (text.data.toArray.qsort\
  \ (· ≤ ·)) :=\n  sorry\n\n/--\ninfo: 'hsi  etTi sats!'\n-/\n#guard_msgs in\n#eval\
  \ encrypt \"This is a test!\" 1\n\n/--\ninfo: 'This is a test!'\n-/\n#guard_msgs\
  \ in\n#eval decrypt \"hsi  etTi sats!\" 1\n\n/--\ninfo: 's eT ashi tist!'\n-/\n\
  #guard_msgs in\n#eval encrypt \"This is a test!\" 2\n\n/--\ninfo: 'This is a test!'\n\
  -/\n#guard_msgs in\n#eval decrypt \"s eT ashi tist!\" 2\n\n/--\ninfo: ''\n-/\n#guard_msgs\
  \ in\n#eval encrypt \"\" 1\n\n/--\ninfo: None\n-/\n#guard_msgs in\n#eval decrypt\
  \ None 1\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
