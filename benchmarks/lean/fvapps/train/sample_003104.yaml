"vc-description": "See the following triangle:\n```\n____________________________________\n\
  \ 1                                      \n 2   4   2                          \
  \    \n 3   6   9   6   3                      \n 4   8   12  16  12  8   4    \
  \         \n 5   10  15  20  25  20  15  10  5   \n ___________________________________\n\
  \ \n```\nThe total sum of the numbers in the triangle, up to the 5th line included,\
  \ is ```225```, part of it, ```144```, corresponds to the total sum of the even\
  \ terms and ```81``` to the total sum of the odd terms.\n\nCreate a function that\
  \ may output an array with three results for each value of n.\n```python\ntriang_mult(n)\
  \  ----> [total_sum, total_even_sum, total_odd_sum]\n```\nOur example will be:\n\
  ```python\ntriang_mult(5) ----> [225, 144, 81]\n```\n\nFeatures of the random tests:\n\
  ```\nnumber of tests = 100\n49 < n < 5000\n```\nEnjoy it!\nThis kata will be translated\
  \ in another languages soon"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def mult_triangle (n : Nat) : Array Nat :=\n  sorry\n\n\n"
"vc-theorems": "theorem mult_triangle_symmetry (n : Nat) (h : n ≥ 1) :\n  let result\
  \ := mult_triangle n\n  result[0]! = (n * (n + 1) / 2) ^ 2\n:= sorry\n\n\ntheorem\
  \ mult_triangle_odd_formula (n : Nat) (h : n ≥ 1) (h₂ : n ≤ 10) :\n  let result\
  \ := mult_triangle n\n  result[2]! = ((n + 1) / 2) ^ 4\n:= sorry\n\n/--\ninfo: [1,\
  \ 0, 1]\n-/\n#guard_msgs in\n#eval mult_triangle 1\n\n/--\ninfo: [225, 144, 81]\n\
  -/\n#guard_msgs in\n#eval mult_triangle 5\n\n/--\ninfo: [3025, 2400, 625]\n-/\n\
  #guard_msgs in\n#eval mult_triangle 10\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
