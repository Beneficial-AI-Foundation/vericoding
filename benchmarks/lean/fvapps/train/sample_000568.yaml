"vc-description": "Given a binary string $S$ consisting of only 1’s and 0’s where\
  \ 1 represents a Square and 0 represents a Circle. The diameter of the circle and\
  \ the side of the square must be any integer (obviously > 0) . You will have to\
  \ perfectly inscribe (as shown in the example below) the respective geometric figure\
  \ at $S$$i+1$ inside of $S$$i$ where $i$ $\\epsilon$ $[0,N-2]$, if it is possible.\
  \ Note that, it will not be possible to inscribe if the dimension of the geometric\
  \ figure you are perfectly inscribing is not an integer and you will discard the\
  \ rest of the string. Find the maximum number of circles we can inscribe in a square\
  \ according to the given string.  \nFor a given binary string there can be only\
  \ one geometric figure and this figure is concentric.  \nFor example : the string\
  \ 1100 can be represented as the figure below, the first two squares have the same\
  \ side length and the next two circles have the same diameter.  \n\nAnother example\
  \ : the string 0001 can be represented as the one given below\nAgain here, we have\
  \ 3 circles of the same diameter and one square inscribed in them.  \n\n-----Input:-----\n\
  The first line contains $N$, the number of strings\n\nThen each of the next $N$\
  \ lines contains a binary string $S$.  \n\n-----Output:-----\nThe $N$ lines of output\
  \ should have $N$ integers in separate lines, the maximum number of circles we can\
  \ inscribe in a square according to the given string $S$ .  \n\n-----Constraints-----\n\
  - 1 $\\leq$ $N$ $\\leq$ 103\n- 1 $\\leq$ length of string $S$ $\\leq$ 104\n\n-----Sample\
  \ Input:-----\n3\n\n1110\n\n0010\n\n1001000  \n\n-----Sample Output:-----\n1\n\n\
  0\n\n2  \n\n-----Explanation:-----\nIn  the first case, we can inscribe the string\
  \ 1110 as :  three squares of side length 4 units (on top of each other) and then\
  \  we can inscribe one circle of diameter 4 units.\nThe answer is 1 since, there\
  \ is 1 circle inscribed in a square.\n\nIn the second case 0010, Let the first two\
  \ circles be of some diameter 10, we can see that we cannot inscribe another square\
  \ of any integer dimension inside them.\n\nSo, the answer is 0.\n\nIn the third\
  \ case 1001000, we can take the first square of size 10, then inscribe two circles\
  \ of diameter 5, then we cannot inscribe another square in this since, it will not\
  \ be of any possible integer dimension and we discard the rest of the string."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_inscribed_circles (s : String) : Nat :=\n  sorry\n"
"vc-theorems": "theorem count_inscribed_circles_non_negative (s : String) :\n  count_inscribed_circles\
  \ s ≥ 0 :=\nsorry\n\n\ntheorem no_leading_ones_implies_zero (s : String) :\n  (∀\
  \ c ∈ s.data, c ≠ '1') ∨ (s.length > 0 ∧ s.data.get? 0 = some '0') →\n  count_inscribed_circles\
  \ s = 0 :=\nsorry \n\n\ntheorem result_bounded_by_zeros_after_first_one (s : String)\
  \ \n  (h1 : s.length > 0) (h2 : ∃ i < s.length, s.data.get? i = some '1') :\n  let\
  \ first_one := (s.data.findIdx (· = '1'))\n  let zeros_after := (s.data.drop first_one).filter\
  \ (· = '0') |>.length\n  count_inscribed_circles s ≤ zeros_after :=\nsorry\n\n\n\
  theorem all_ones_gives_zero (s : String) :\n  (∀ c ∈ s.data, c = '1') →\n  count_inscribed_circles\
  \ s = 0 :=\nsorry\n\n\ntheorem ones_then_zeros_pattern (n : Nat) (h : n > 0) :\n\
  \  count_inscribed_circles (String.mk ((List.replicate 1 '1') ++ (List.replicate\
  \ n '0'))) = n :=\nsorry\n\n\ntheorem many_ones_then_zeros_pattern (n : Nat) (h\
  \ : n > 0) :\n  count_inscribed_circles (String.mk ((List.replicate n '1') ++ (List.replicate\
  \ n '0'))) = n :=\nsorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval count_inscribed_circles\
  \ \"1110\"\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval count_inscribed_circles \"\
  0010\"\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval count_inscribed_circles \"1001000\"\
  \n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
