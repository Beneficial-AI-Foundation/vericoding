"vc-description": "You have to create a function named reverseIt.\n\nWrite your function\
  \ so that in the case a string or a number is passed in as the data , you will return\
  \ the data in reverse order. If the data is any other type, return it as it is.\n\
  \n\nExamples of inputs and subsequent outputs:\n```\n\"Hello\" -> \"olleH\"\n\n\"\
  314159\" -> \"951413\"\n\n[1,2,3] -> [1,2,3]\n```"
"vc-preamble": "import Imports.AllImports\n\ndef reverse_it {α : Type} (x : α) : α\
  \ := sorry\n\ntheorem reverse_it_string_length {s : String} : \n  String.length\
  \ (reverse_it s) = String.length s := sorry\n\n/-- Helper function to get nth char\
  \ of string -/"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def getNth (s : String) (n : Nat) : Char := s.data.get! n\n\ntheorem\
  \ reverse_it_string_reverses {s : String} {i : Nat} (h : i < String.length s) :\n\
  \  getNth (reverse_it s) i = getNth s (String.length s - 1 - i) := sorry \n\n/--\
  \ Type class for types that shouldn't be reversed -/\nclass NonString (α : Type)\n"
"vc-theorems": "theorem reverse_it_non_string_identity {α : Type} [NonString α] (x\
  \ : α) :\n  reverse_it x = x := sorry\n\n/--\ninfo: 'olleH'\n-/\n#guard_msgs in\n\
  #eval reverse_it \"Hello\"\n\n/--\ninfo: 951413\n-/\n#guard_msgs in\n#eval reverse_it\
  \ 314159\n\n/--\ninfo: [1, 2, 3]\n-/\n#guard_msgs in\n#eval reverse_it [1, 2, 3]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
