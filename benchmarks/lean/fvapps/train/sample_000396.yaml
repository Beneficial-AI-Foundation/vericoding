"vc-description": "Given two words (beginWord and endWord), and a dictionary's word\
  \ list, find the length of shortest transformation sequence from beginWord to endWord,\
  \ such that:\n\n\n       Only one letter can be changed at a time.\n       Each\
  \ transformed word must exist in the word list. Note that beginWord is not a transformed\
  \ word.\n\n\nNote:\n\n\n       Return 0 if there is no such transformation sequence.\n\
  \       All words have the same length.\n       All words contain only lowercase\
  \ alphabetic characters.\n       You may assume no duplicates in the word list.\n\
  \       You may assume beginWord and endWord are non-empty and are not the same.\n\
  \n\nExample 1:\n\n\nInput:\nbeginWord = \"hit\",\nendWord = \"cog\",\nwordList =\
  \ [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n\nOutput: 5\n\nExplanation:\
  \ As one shortest transformation is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" ->\
  \ \"cog\",\nreturn its length 5.\n\n\nExample 2:\n\n\nInput:\nbeginWord = \"hit\"\
  \nendWord = \"cog\"\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n\nOutput: 0\n\
  \nExplanation: The endWord \"cog\" is not in wordList, therefore no possible transformation."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def ladder_length (begin_word end_word : String) (word_list : List\
  \ String) : Nat := sorry\n\n-- Result should always be non-negative"
"vc-theorems": "theorem ladder_length_nonnegative \n  (begin_word end_word : String)\
  \ (word_list : List String) :\n  ladder_length begin_word end_word word_list ≥ 0\
  \ := sorry\n\n-- If end_word not in word_list, result should be 0 \n\ntheorem ladder_length_zero_when_not_in_list\n\
  \  (begin_word end_word : String) (word_list : List String) :\n  ¬(end_word ∈ word_list)\
  \ → ladder_length begin_word end_word word_list = 0 := sorry\n\n-- If words differ\
  \ by one letter and end_word in word_list, result should be 2\n\ntheorem ladder_length_two_when_one_diff\n\
  \  (begin_word end_word : String) (word_list : List String) :\n  end_word ∈ word_list\
  \ →\n  (begin_word.length = end_word.length) →\n  ((List.zip begin_word.data end_word.data).filter\
  \ (fun p => p.1 ≠ p.2)).length = 1 →\n  ladder_length begin_word end_word word_list\
  \ = 2 := sorry\n\n-- If words have different lengths, result should be 0\n\ntheorem\
  \ ladder_length_zero_when_different_lengths\n  (begin_word end_word : String) (word_list\
  \ : List String) :\n  begin_word.length ≠ end_word.length →\n  ladder_length begin_word\
  \ end_word word_list = 0 := sorry\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval ladder_length\
  \ \"hit\" \"cog\" [\"hot\", \"dot\", \"dog\", \"lot\", \"log\", \"cog\"]\n\n/--\n\
  info: 0\n-/\n#guard_msgs in\n#eval ladder_length \"hit\" \"cog\" [\"hot\", \"dot\"\
  , \"dog\", \"lot\", \"log\"]\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval ladder_length\
  \ \"dog\" \"cog\" [\"cog\"]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
