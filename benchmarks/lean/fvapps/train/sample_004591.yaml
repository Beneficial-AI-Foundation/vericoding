"vc-description": "This is a question from codingbat\n\nGiven an integer n greater\
  \ than or equal to 0,\ncreate and return an array with the following pattern:\n\n\
  \    squareUp(3) => [0, 0, 1, 0, 2, 1, 3, 2, 1]\n    squareUp(2) => [0, 1, 2, 1]\n\
  \    squareUp(4) => [0, 0, 0, 1, 0, 0, 2, 1, 0, 3, 2, 1, 4, 3, 2, 1]\nn<=1000.\n\
  \n# Check out my other kata!\n\n        \nMatrix Diagonal Sort OMG\nString -> N\
  \ iterations -> String\nString -> X iterations -> String\nANTISTRING\nArray - squareUp\
  \ b!\nMatrix - squareUp b!\nInfinitely Nested Radical Expressions\npipi Numbers!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def squareUp (n: Nat) : List Nat := sorry\n\ntheorem square_up_length\
  \ (n: Nat) (h: n > 0) :\n  (squareUp n).length = n * n := sorry\n"
"vc-theorems": "theorem square_up_range (n: Nat) (h: n > 0) :\n  ∀ x ∈ squareUp n,\
  \ x ≥ 0 ∧ x ≤ n := sorry\n\n\ntheorem square_up_pattern (n: Nat) (h: n > 0) :\n\
  \  ∀ i < n,\n    let row := List.take ((i+1)*n) (List.drop (i*n) (squareUp n))\n\
  \    ∀ j < n, \n      (j < (n-(i+1)) → List.get! row j = 0) ∧ \n      (j ≥ (n-(i+1))\
  \ → List.get! row j = i+1-(j-(n-(i+1)))) := sorry\n\n/--\ninfo: [0, 0, 1, 0, 2,\
  \ 1, 3, 2, 1]\n-/\n#guard_msgs in\n#eval square_up 3\n\n/--\ninfo: [0, 1, 2, 1]\n\
  -/\n#guard_msgs in\n#eval square_up 2\n\n/--\ninfo: [0, 0, 0, 1, 0, 0, 2, 1, 0,\
  \ 3, 2, 1, 4, 3, 2, 1]\n-/\n#guard_msgs in\n#eval square_up 4\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
