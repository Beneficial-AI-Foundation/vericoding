"vc-description": "Johnny is a farmer and he annually holds a beet farmers convention\
  \ \"Drop the beet\".\n\nEvery year he takes photos of farmers handshaking. Johnny\
  \ knows that no two farmers handshake more than once. He also knows that some of\
  \ the possible handshake combinations may not happen.\n\nHowever, Johnny would like\
  \ to know the minimal amount of people that participated this year just by counting\
  \ all the handshakes.\n\nHelp Johnny by writing a function, that takes the amount\
  \ of handshakes and returns the minimal amount of people needed to perform these\
  \ handshakes (a pair of farmers handshake only once)."
"vc-preamble": "import Imports.AllImports\n\ndef getParticipants (h : Nat) : Nat :=\n\
  \  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def choose (n k : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem handshakes_bounds (h : Nat) : \n  let n := getParticipants\
  \ h\n  let possibleHandshakes := if n ≥ 2 then choose n 2 else 0\n  n ≥ 1 ∧ possibleHandshakes\
  \ ≥ h :=\nsorry\n\n\ntheorem basic_cases :\n  getParticipants 0 = 1 ∧\n  getParticipants\
  \ 1 = 2 ∧ \n  getParticipants 6 = 4 :=\nsorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n\
  #eval get_participants 0\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval get_participants\
  \ 1\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval get_participants 6\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
