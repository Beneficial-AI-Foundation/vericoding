"vc-description": "Chef and his competitor Kefa own two restaurants located at a straight\
  \ road. The position of Chef's restaurant is $X_1$, the position of Kefa's restaurant\
  \ is $X_2$.\nChef and Kefa found out at the same time that a bottle with a secret\
  \ recipe is located on the road between their restaurants. The position of the bottle\
  \ is $X_3$.\nThe cooks immediately started to run to the bottle. Chef runs with\
  \ speed $V_1$, Kefa with speed $V_2$.\nYour task is to figure out who reaches the\
  \ bottle first and gets the secret recipe (of course, it is possible that both cooks\
  \ reach the bottle at the same time).\n\n-----Input-----\n- The first line of the\
  \ input contains a single integer $T$ denoting the number of test cases. The description\
  \ of $T$ test cases follows.\n- The first and only line of each test case contains\
  \ five space-separated integers $X_1$, $X_2$, $X_3$, $V_1$ and $V_2$. \n\n-----Output-----\n\
  For each test case, print a single line containing the string \"Chef\" if Chef reaches\
  \ the bottle first, \"Kefa\" if Kefa reaches the bottle first or \"Draw\" if Chef\
  \ and Kefa reach the bottle at the same time (without quotes). \n\n-----Constraints-----\n\
  - $1 \\le T \\le 10^5$\n- $|X_1|, |X_2|, |X_3| \\le 10^5$\n- $X_1 < X_3 < X_2$\n\
  - $1 \\le V_1 \\le 10^5$\n- $1 \\le V_2 \\le 10^5$\n\n-----Example Input-----\n\
  3\n1 3 2 1 2\n1 5 2 1 2\n1 5 3 2 2\n\n-----Example Output-----\nKefa\nChef\nDraw\n\
  \n-----Explanation-----\nExample case 1. Chef and Kefa are on the same distance\
  \ from the bottle, but Kefa has speed $2$, while Chef has speed $1$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_race (x1 x2 x3 v1 v2 : Int) : String :=\n  sorry\n"
"vc-theorems": "theorem solve_race_returns_valid_result (x1 x2 x3 : Int) (v1 v2 :\
  \ Int) \n  (h1 : 1 ≤ v1 ∧ v1 ≤ 100) (h2 : 1 ≤ v2 ∧ v2 ≤ 100)\n  (h3 : -1000 ≤ x1\
  \ ∧ x1 ≤ 1000)\n  (h4 : -1000 ≤ x2 ∧ x2 ≤ 1000)\n  (h5 : -1000 ≤ x3 ∧ x3 ≤ 1000)\
  \ :\n  solve_race x1 x2 x3 v1 v2 = \"Chef\" ∨ \n  solve_race x1 x2 x3 v1 v2 = \"\
  Kefa\" ∨\n  solve_race x1 x2 x3 v1 v2 = \"Draw\" :=\n  sorry\n\n\ntheorem solve_race_symmetric\
  \ (x1 x2 x3 : Int) (v1 v2 : Int)\n  (h1 : 1 ≤ v1 ∧ v1 ≤ 100) (h2 : 1 ≤ v2 ∧ v2 ≤\
  \ 100)\n  (h3 : -1000 ≤ x1 ∧ x1 ≤ 1000)\n  (h4 : -1000 ≤ x2 ∧ x2 ≤ 1000)\n  (h5\
  \ : -1000 ≤ x3 ∧ x3 ≤ 1000) :\n  (solve_race x1 x2 x3 v1 v2 = \"Chef\" → solve_race\
  \ x2 x1 x3 v2 v1 = \"Kefa\") ∧\n  (solve_race x1 x2 x3 v1 v2 = \"Kefa\" → solve_race\
  \ x2 x1 x3 v2 v1 = \"Chef\") ∧\n  (solve_race x1 x2 x3 v1 v2 = \"Draw\" → solve_race\
  \ x2 x1 x3 v2 v1 = \"Draw\") :=\n  sorry\n\n\ntheorem solve_race_same_position_same_speed\
  \ (x1 x3 : Int) (v1 : Int)\n  (h1 : 1 ≤ v1 ∧ v1 ≤ 100)\n  (h2 : -1000 ≤ x1 ∧ x1\
  \ ≤ 1000)\n  (h3 : -1000 ≤ x3 ∧ x3 ≤ 1000) :\n  solve_race x1 x1 x3 v1 v1 = \"Draw\"\
  \ :=\n  sorry\n\n/--\ninfo: 'Kefa'\n-/\n#guard_msgs in\n#eval solve_race 1 3 2 1\
  \ 2\n\n/--\ninfo: 'Chef'\n-/\n#guard_msgs in\n#eval solve_race 1 5 2 1 2\n\n/--\n\
  info: 'Draw'\n-/\n#guard_msgs in\n#eval solve_race 1 5 3 2 2\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
