"vc-description": "Given an array $A$ of length $N$.\nWe have to find the $maximum$\
  \ sum of elements of the subarray between $two$ nearest occurrences of $same$ elements\
  \ (excluding both).\nIf both the elements are $even$ then the total number of $even$\
  \ elements in that subarray should be $even$ then and then only we consider that\
  \ subarray and if both the elements are $odd$ then the total number of $odd$ element\
  \ in that subarray should be $odd$ then and then only we consider that subarray.\n\
  If the condition never matches print $0$.\n\n-----Input:-----\n- First line contains\
  \ $T$, number of test cases. Then the test cases follow.\n- Each testcase consists\
  \ of two lines: \nThe first line has $N$ : number of elements in the array and second-line\
  \ has $N$ space separated integers: elements of the array.\n\n-----Output:-----\n\
  - For each test case, output in a single line $maximum$ sum.\n\n-----Constraints-----\n\
  - $1 \\leq T \\leq 10$\n- $3 \\leq N \\leq 2*10^5$\n- $1 \\leq A[i] \\leq 10^8$\n\
  $NOTE $: Use of Fast Input Output is recommended.\n\n-----Sample Input:-----\n1\n\
  10\n1 2 3 2 1 5 1 2 8 2\n\n-----Sample Output:-----\n7\n\n-----EXPLANATION:-----\n\
  The maximum sum is 7, between 1 at  1st position and 1 at 5th position i.e sum of\
  \ 2,3,2"
"vc-preamble": "import Imports.AllImports\n\ndef find_max_subarray_sum (arr : List\
  \ Int) : Int := sorry\n\ndef list_max : List Int → Int\n  | [] => 0\n  | (x::xs)\
  \ => max x (list_max xs)\n\n\ndef list_min : List Int → Int\n  | [] => 0\n  | (x::xs)\
  \ => min x (list_min xs)\n\n\ndef list_sum : List Int → Int\n  | [] => 0\n  | (x::xs)\
  \ => x + list_sum xs\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def get_subarrays (arr : List Int) : List (List Int) := sorry\n\
  \ndef subarray_sums (arr : List Int) : List Int :=\n  (get_subarrays arr).map list_sum\n"
"vc-theorems": "theorem max_subarray_sum_at_least_one_element {arr : List Int} (h\
  \ : arr ≠ []) :\n  find_max_subarray_sum arr ≥ list_max arr := sorry\n\n\ntheorem\
  \ max_subarray_sum_positive_only {arr : List Int} (h : arr ≠ [])\n  (h_pos : ∀ x\
  \ ∈ arr, x ≥ 0) :\n  find_max_subarray_sum arr ≥ list_sum arr := sorry \n\n\ntheorem\
  \ max_subarray_sum_empty_and_nonempty (arr : List Int) :\n  (arr = [] → find_max_subarray_sum\
  \ arr = 0) ∧\n  (arr ≠ [] → find_max_subarray_sum arr ≥ list_min arr) := sorry\n\
  \n\ntheorem max_subarray_contiguous {arr : List Int} (h : arr ≠ []) :\n  find_max_subarray_sum\
  \ arr = list_max (subarray_sums arr) := sorry\n\n\ntheorem max_subarray_base_cases\
  \ :\n  find_max_subarray_sum [] = 0 ∧\n  find_max_subarray_sum [0] = 0 := sorry\n\
  \n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval find_max_subarray_sum [-2, 1, -3, 4, -1,\
  \ 2, 1, -5, 4]\n\n/--\ninfo: 23\n-/\n#guard_msgs in\n#eval find_max_subarray_sum\
  \ arr2\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval find_max_subarray_sum arr3\n\n\
  /--\ninfo: -1\n-/\n#guard_msgs in\n#eval find_max_subarray_sum arr4\n\n/--\ninfo:\
  \ -1\n-/\n#guard_msgs in\n#eval find_max_subarray_sum arr5\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
