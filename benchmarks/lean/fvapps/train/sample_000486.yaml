"vc-description": "We have n jobs, where every job is scheduled to be done from startTime[i]\
  \ to endTime[i], obtaining a profit of profit[i].\nYou're given the startTime , endTime and\
  \ profit arrays, you need to output the maximum profit you can take such that there\
  \ are no 2 jobs in the subset with overlapping time range.\nIf you choose a job\
  \ that ends at time X you will be able to start another job that starts at time\
  \ X.\n \nExample 1:\n\nInput: startTime = [1,2,3,3], endTime = [3,4,5,6], profit\
  \ = [50,10,40,70]\nOutput: 120\nExplanation: The subset chosen is the first and\
  \ fourth job. \nTime range [1-3]+[3-6] , we get profit of 120 = 50 + 70.\n\nExample\
  \ 2:\n \n\nInput: startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]\n\
  Output: 150\nExplanation: The subset chosen is the first, fourth and fifth job.\
  \ \nProfit obtained 150 = 20 + 70 + 60.\n\nExample 3:\n\nInput: startTime = [1,1,1],\
  \ endTime = [2,3,4], profit = [5,6,4]\nOutput: 6\n\n \nConstraints:\n\n1 <= startTime.length\
  \ == endTime.length == profit.length <= 5 * 10^4\n1 <= startTime[i] < endTime[i]\
  \ <= 10^9\n1 <= profit[i] <= 10^4"
"vc-preamble": "import Imports.AllImports\n\ndef List.sum (xs: List Int) : Int :=\n\
  \  match xs with\n  | [] => 0\n  | x::rest => x + sum rest\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def jobScheduling (startTimes endTimes profits: List Int) : Int\
  \ :=\n  sorry\n"
"vc-theorems": "theorem job_scheduling_basic_properties \n  (startTimes endTimes profits:\
  \ List Int)\n  (h1: startTimes.length = endTimes.length)\n  (h2: endTimes.length\
  \ = profits.length)\n  (h3: ∀ i, i < startTimes.length → startTimes[i]! > 0)\n \
  \ (h4: ∀ i, i < endTimes.length → endTimes[i]! > startTimes[i]!)\n  (h5: ∀ i, i\
  \ < profits.length → profits[i]! > 0) :\n  let result := jobScheduling startTimes\
  \ endTimes profits\n  -- Result is non-negative\n  result ≥ 0 ∧\n  -- Result doesn't\
  \ exceed sum of profits  \n  result ≤ List.sum profits :=\n  sorry\n\n\ntheorem\
  \ job_scheduling_single_job\n  (startTime endTime profit: Int)\n  (h1: startTime\
  \ > 0)\n  (h2: endTime > startTime)\n  (h3: profit > 0) :\n  jobScheduling [startTime]\
  \ [endTime] [profit] = profit :=\n  sorry\n\n/--\ninfo: 120\n-/\n#guard_msgs in\n\
  #eval jobScheduling [1, 2, 3, 3] [3, 4, 5, 6] [50, 10, 40, 70]\n\n/--\ninfo: 150\n\
  -/\n#guard_msgs in\n#eval jobScheduling [1, 2, 3, 4, 6] [3, 5, 10, 6, 9] [20, 20,\
  \ 100, 70, 60]\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval jobScheduling [1, 1, 1]\
  \ [2, 3, 4] [5, 6, 4]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
