"vc-description": "Yaroslav is playing a game called \"Time\". The game has a timer\
  \ showing the lifespan he's got left. As soon as the timer shows 0, Yaroslav's character\
  \ dies and the game ends. Also, the game has n clock stations, station number i\
  \ is at point (x_{i}, y_{i}) of the plane. As the player visits station number i,\
  \ he increases the current time on his timer by a_{i}. The stations are for one-time\
  \ use only, so if the player visits some station another time, the time on his timer\
  \ won't grow.\n\nA player spends d·dist time units to move between stations, where\
  \ dist is the distance the player has covered and d is some constant. The distance\
  \ between stations i and j is determined as |x_{i} - x_{j}| + |y_{i} - y_{j}|.\n\
  \nInitially, the player is at station number 1, and the player has strictly more\
  \ than zero and strictly less than one units of time. At station number 1 one unit\
  \ of money can increase the time on the timer by one time unit (you can buy only\
  \ integer number of time units).\n\nNow Yaroslav is wondering, how much money he\
  \ needs to get to station n. Help Yaroslav. Consider the time to buy and to increase\
  \ the timer value negligibly small.\n\n\n-----Input-----\n\nThe first line contains\
  \ integers n and d (3 ≤ n ≤ 100, 10^3 ≤ d ≤ 10^5) — the number of stations and the\
  \ constant from the statement.\n\nThe second line contains n - 2 integers: a_2,\
  \ a_3, ..., a_{n} - 1 (1 ≤ a_{i} ≤ 10^3). The next n lines contain the coordinates\
  \ of the stations. The i-th of them contains two integers x_{i}, y_{i} (-100 ≤ x_{i},\
  \ y_{i} ≤ 100).\n\nIt is guaranteed that no two stations are located at the same\
  \ point.\n\n\n-----Output-----\n\nIn a single line print an integer — the answer\
  \ to the problem.\n\n\n-----Examples-----\nInput\n3 1000\n1000\n0 0\n0 1\n0 3\n\n\
  Output\n2000\n\nInput\n3 1000\n1000\n1 0\n1 1\n1 2\n\nOutput\n1000"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_time_game (n : Nat) (d : Nat) (a : List Nat) (coords\
  \ : List (Int × Int)) : Nat :=\n  sorry\n"
"vc-theorems": "theorem solve_time_game_basic {n d : Nat} {a : List Nat} {coords :\
  \ List (Int × Int)}\n  (h1 : n ≥ 2)\n  (h2 : d > 0) \n  (h3 : n ≤ 3)\n  (h4 : d\
  \ ≤ 100)\n  (h5 : a = List.replicate n 0)\n  (h6 : coords = List.map (fun i => (0,\
  \ Int.ofNat i)) (List.range n)) :\n  let result := solve_time_game n d a coords\n\
  \  result ≥ 0 ∧ result = (n - 1) * d := sorry\n\n/--\ninfo: 2000\n-/\n#guard_msgs\
  \ in\n#eval solve_time_game 3 1000 [0, 1000, 0] [(0, 0), (0, 1), (0, 3)]\n\n/--\n\
  info: 1000\n-/\n#guard_msgs in\n#eval solve_time_game 3 1000 [0, 1000, 0] [(1, 0),\
  \ (1, 1), (1, 2)]\n\n/--\ninfo: 169099\n-/\n#guard_msgs in\n#eval solve_time_game\
  \ 5 1421 [0, 896, 448, 727, 0] [(-19, -40), (-87, 40), (69, 51), (-55, 61), (-7,\
  \ 67)]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
