"vc-description": "# Don't give me five!\n\nIn this kata you get the start number\
  \ and the end number of a region and should return the count of all numbers except\
  \ numbers with a 5 in it. The start and the end number are both inclusive!\n\nExamples:\n\
  \n```\n1,9 -> 1,2,3,4,6,7,8,9 -> Result 8\n4,17 -> 4,6,7,8,9,10,11,12,13,14,16,17\
  \ -> Result 12\n```\n\nThe result may contain fives. ;-)\nThe start number will\
  \ always be smaller than the end number. Both numbers can be also negative!\n\n\
  I'm very curious for your solutions and the way you solve it. Maybe someone of you\
  \ will find an easy pure mathematics solution.\n\nHave fun coding it and please\
  \ don't forget to vote and rank this kata! :-) \n\nI have also created other katas.\
  \ Take a look if you enjoyed this kata!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def dontGiveMeFive (s e : Int) : Int :=\n  sorry\n"
"vc-theorems": "theorem validRange (s e : Int) :\n  s ≤ e →\n  let result := dontGiveMeFive\
  \ s e\n  (result ≥ 0 ∧ result ≤ e - s + 1) := by\n  sorry\n\n\ntheorem fiveDigitCount\
  \ (s e : Int) :\n  s ≤ e →\n  dontGiveMeFive s e = Int.ofNat (\n    (List.map (Int.ofNat)\
  \ (List.range (Int.toNat (e - s + 1))))\n      |>.map (fun x => x + s)\n      |>.filter\
  \ (fun x => ¬ String.contains (toString (Int.natAbs x)) '5')\n      |>.length) :=\
  \ by\n  sorry \n\n\ntheorem emptyRange (s e : Int) :\n  s > e →\n  dontGiveMeFive\
  \ s e = 0 := by\n  sorry\n\n\ntheorem singleNumber (n : Int) :\n  dontGiveMeFive\
  \ n n = \n    if String.contains (toString (Int.natAbs n)) '5' then 0 else 1 :=\
  \ by\n  sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
