"vc-description": "table {\n        width: 236px;\n    }\n\n    table, tr, td {\n\
  \        border: 0px;\n    }\n\nIn a grid of 4 by 4 squares you want to place a\
  \ skyscraper in each square with only some clues:\n\nThe height of the skyscrapers\
  \ is between 1 and 4\nNo two skyscrapers in a row or column may have the same number\
  \ of floors\nA clue is the number of skyscrapers that you can see in a row or column\
  \ from the outside\nHigher skyscrapers block the view of lower skyscrapers located\
  \ behind them\n\n\nCan you write a program that can solve this puzzle?\n\n\nExample:\n\
  \n\nTo understand how the puzzle works, this is an example of a row with 2 clues.\
  \ Seen from the left side there are 4 buildings visible while seen from the right\
  \ side only 1:\n\n\n\n\n 4\n    \n    \n    \n    \n 1\n\n\n\nThere is only one\
  \ way in which the skyscrapers can be placed. From left-to-right all four buildings\
  \ must be visible and no building may hide behind another building:\n\n\n\n\n 4\n\
   1\n 2\n 3\n 4\n 1\n\n\n\nExample of a 4 by 4 puzzle with the solution:\n\n\n\n\n\
    \n    \n    \n 1\n 2\n  \n\n\n  \n  \n  \n  \n  \n  \n\n\n  \n  \n  \n  \n  \n\
   2\n\n\n 1\n  \n  \n  \n  \n  \n\n\n  \n  \n  \n  \n  \n  \n\n\n  \n  \n  \n 3\n\
    \n  \n\n\n\n\n\n  \n  \n  \n 1\n 2\n  \n\n\n  \n 2\n 1\n 4\n 3\n  \n\n\n  \n 3\n\
   4\n 1\n 2\n 2\n\n\n 1\n 4\n 2\n 3\n 1\n  \n\n\n  \n 1\n 3\n 2\n 4\n  \n\n\n  \n\
    \n  \n 3\n  \n  \n\n\n\nTask:\n\n\n\nFinish:"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_puzzle (clues : List Nat) : Option Board :=\nsorry\n"
"vc-theorems": "theorem solution_dimensions {clues : List Nat} {sol : Board} \n  (h\
  \ : solve_puzzle clues = some sol) : \n  sol.rows.length = 4 ∧ ∀ row, row ∈ sol.rows\
  \ → row.length = 4 :=\nsorry\n\n\ntheorem solution_value_range {clues : List Nat}\
  \ {sol : Board}\n  (h : solve_puzzle clues = some sol) :\n  ∀ row, row ∈ sol.rows\
  \ → ∀ x, x ∈ row → 1 ≤ x ∧ x ≤ 4 :=\nsorry \n\n\ntheorem solution_row_uniqueness\
  \ {clues : List Nat} {sol : Board}\n  (h : solve_puzzle clues = some sol) :\n  ∀\
  \ row, row ∈ sol.rows → \n  ∀ x y, x ∈ row → y ∈ row → x ≠ y → \n  List.indexOf\
  \ x row ≠ List.indexOf y row :=\nsorry\n\n\ntheorem solution_col_uniqueness {clues\
  \ : List Nat} {sol : Board}\n  (h : solve_puzzle clues = some sol) :\n  ∀ i j :\
  \ Nat, i < 4 → j < 4 → i ≠ j →\n  ∀ col : List Nat, \n  (col = sol.rows.map (λ row\
  \ => row[i]!)) →\n  col[i]! ≠ col[j]! :=\nsorry\n\n/--\ninfo: expected1\n-/\n#guard_msgs\
  \ in\n#eval solve_puzzle (2, 2, 1, 3, 2, 2, 3, 1, 1, 2, 2, 3, 3, 2, 1, 3)\n\n/--\n\
  info: expected2\n-/\n#guard_msgs in\n#eval solve_puzzle (0, 0, 1, 2, 0, 2, 0, 0,\
  \ 0, 3, 0, 0, 0, 1, 0, 0)\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
