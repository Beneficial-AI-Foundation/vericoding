"vc-description": "Given a number `n`, make a down arrow shaped pattern.\n\nFor example,\
  \ when `n = 5`, the output would be:\n\n    123454321\n     1234321\n      12321\n\
  \       121\n        1\n\nand for `n = 11`, it would be:\n\n    123456789010987654321\n\
  \     1234567890987654321\n      12345678987654321\n       123456787654321\n   \
  \     1234567654321\n         12345654321\n          123454321\n           1234321\n\
  \            12321\n             121\n              1\n              \nAn important\
  \ thing to note in the above example is that the numbers greater than 9 still stay\
  \ single digit, like after 9 it would be 0 - 9 again instead of 10 - 19.\n\nNote:\
  \ There are spaces for the indentation on the left of each line and no spaces on\
  \ the right.\n                \nHave fun!"
"vc-preamble": "import Imports.AllImports\n\ndef get_a_down_arrow_of (n : Nat) : String\
  \ :=\nsorry\n\n\ndef String.lines (s : String) : List String :=\nsorry\n\n\ndef\
  \ String.padLeft (n : Nat) (c : Char) (s : String) : String :=\nsorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def charToNat (c : Char) : Nat :=\nsorry\n"
"vc-theorems": "theorem arrow_length (n : Nat) (h : 0 < n ∧ n ≤ 9) :\n  (get_a_down_arrow_of\
  \ n).lines.length = n :=\nsorry\n\n\ntheorem arrow_leading_spaces (n : Nat) (h :\
  \ 0 < n ∧ n ≤ 9) (i : Nat) (h2 : i < n) :\n  let lines := (get_a_down_arrow_of n).lines\n\
  \  let line := lines[i]!\n  (∃ rest : String, line = String.padLeft i ' ' rest)\
  \ ∧\n  line.trim ≠ \"\" :=\nsorry \n\n\ntheorem arrow_decreasing_widths (n : Nat)\
  \ (h : 0 < n ∧ n ≤ 9) (i : Nat) (h2 : i < n - 1) :\n  let lines := (get_a_down_arrow_of\
  \ n).lines\n  lines[i]!.length > lines[i+1]!.length :=\nsorry\n\n\ntheorem arrow_line_symmetry\
  \ (n : Nat) (h : 0 < n ∧ n ≤ 9) (i : Nat) (h2 : i < n) :\n  let lines := (get_a_down_arrow_of\
  \ n).lines\n  let stripped := lines[i]!.trim\n  let mid := stripped.length / 2\n\
  \  stripped.take mid = stripped.drop (mid+1) :=\nsorry\n\n\ntheorem arrow_sequential_digits\
  \ (n : Nat) (h : 0 < n ∧ n ≤ 9) (i : Nat) (h2 : i < n) :\n  let lines := (get_a_down_arrow_of\
  \ n).lines\n  let digits := lines[i]!.data.filter Char.isDigit\n  (∀ d ∈ digits,\
  \ 0 < charToNat d ∧ charToNat d < 10) ∧\n  (digits.length > 1 → \n    ∀ j < digits.length/2\
  \ - 1, \n      charToNat digits[j+1]! - charToNat digits[j]! = 1) :=\nsorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
