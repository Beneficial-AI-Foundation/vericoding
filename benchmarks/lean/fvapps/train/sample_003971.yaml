"vc-description": "You will be given two ASCII strings, `a` and `b`. Your task is\
  \ write a function to determine which one of these strings is \"worth\" more, and\
  \ return it.\n\nA string's worth is determined by the sum of its ASCII codepoint\
  \ indexes. So, for example, the string `HELLO` has a value of 372: H is codepoint\
  \ 72, E 69, L 76, and O is 79. The sum of these values is 372.\n\nIn the event of\
  \ a tie, you should return the first string, i.e. `a`."
"vc-preamble": "import Imports.AllImports\n\ndef String.sumAscii (s : String) : Nat\
  \ :=\nsorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def highest_value (a b : String) : String :=\nsorry\n"
"vc-theorems": "theorem highest_value_is_input (a b : String) :\n  let result := highest_value\
  \ a b\n  result = a ∨ result = b := sorry\n\n\ntheorem highest_value_maximizes_sum\
  \ (a b : String) :\n  let result := highest_value a b\n  String.sumAscii result\
  \ ≥ String.sumAscii (if result = a then b else a) := sorry\n  \n\ntheorem highest_value_equal_sums\
  \ (a b : String) :\n  String.sumAscii a = String.sumAscii b →\n  highest_value a\
  \ b = a := sorry\n\n\ntheorem highest_value_identical (s : String) :\n  highest_value\
  \ s s = s := sorry\n\n\ntheorem highest_value_nonempty (a b : String) :\n  a.length\
  \ > 0 →\n  b.length > 0 →\n  (highest_value a b).length > 0 := sorry\n\n/--\ninfo:\
  \ 'KkLlMmNnOoPp4567'\n-/\n#guard_msgs in\n#eval highest_value \"AaBbCcXxYyZz0189\"\
  \ \"KkLlMmNnOoPp4567\"\n\n/--\ninfo: 'ABcd'\n-/\n#guard_msgs in\n#eval highest_value\
  \ \"ABcd\" \"0123\"\n\n/--\ninfo: \"{}[]@~'#:;\"\n-/\n#guard_msgs in\n#eval highest_value\
  \ \"!\"?$%^&*()\" \"{}[]@~\"#:;\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
