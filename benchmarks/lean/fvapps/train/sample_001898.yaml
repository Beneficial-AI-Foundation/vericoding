"vc-description": "We have an array of integers, nums, and an array of requests where\
  \ requests[i] = [starti, endi]. The ith request asks for the sum of nums[starti]\
  \ + nums[starti + 1] + ... + nums[endi - 1] + nums[endi]. Both starti and endi are\
  \ 0-indexed.\nReturn the maximum total sum of all requests among all permutations\
  \ of nums.\nSince the answer may be too large, return it modulo 109 + 7.\n \nExample\
  \ 1:\nInput: nums = [1,2,3,4,5], requests = [[1,3],[0,1]]\nOutput: 19\nExplanation:\
  \ One permutation of nums is [2,1,3,4,5] with the following result: \nrequests[0]\
  \ -> nums[1] + nums[2] + nums[3] = 1 + 3 + 4 = 8\nrequests[1] -> nums[0] + nums[1]\
  \ = 2 + 1 = 3\nTotal sum: 8 + 3 = 11.\nA permutation with a higher total sum is\
  \ [3,5,4,2,1] with the following result:\nrequests[0] -> nums[1] + nums[2] + nums[3]\
  \ = 5 + 4 + 2 = 11\nrequests[1] -> nums[0] + nums[1] = 3 + 5  = 8\nTotal sum: 11\
  \ + 8 = 19, which is the best that you can do.\n\nExample 2:\nInput: nums = [1,2,3,4,5,6],\
  \ requests = [[0,1]]\nOutput: 11\nExplanation: A permutation with the max total\
  \ sum is [6,5,4,3,2,1] with request sums [11].\nExample 3:\nInput: nums = [1,2,3,4,5,10],\
  \ requests = [[0,2],[1,3],[1,1]]\nOutput: 47\nExplanation: A permutation with the\
  \ max total sum is [4,10,5,3,2,1] with request sums [19,18,10].\n \nConstraints:\n\
  \nn == nums.length\n1 <= n <= 105\n0 <= nums[i] <= 105\n1 <= requests.length <= 105\n\
  requests[i].length == 2\n0 <= starti <= endi < n"
"vc-preamble": "import Imports.AllImports\n\ndef MOD := 1000000007\n\ndef maxSumRangeQuery\
  \ (nums : List Nat) (requests : List (Nat × Nat)) : Nat :=\n  sorry\n\n\ndef listSum\
  \ (l : List Nat) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def listSortDescending (l : List Nat) : List Nat :=\n  sorry\n"
"vc-theorems": "theorem maxSumRangeQuery_bounded\n  (nums : List Nat) \n  (requests\
  \ : List (Nat × Nat))\n  (h1 : nums.length > 0)\n  (h2 : requests.length > 0)\n\
  \  (h3 : ∀ r ∈ requests, r.1 ≤ r.2 ∧ r.2 < nums.length) :\n  0 ≤ maxSumRangeQuery\
  \ nums requests ∧ maxSumRangeQuery nums requests < MOD :=\n  sorry \n\n\ntheorem\
  \ maxSumRangeQuery_deterministic\n  (nums : List Nat)\n  (requests : List (Nat ×\
  \ Nat))\n  (h1 : nums.length > 0)\n  (h2 : requests.length > 0)\n  (h3 : ∀ r ∈ requests,\
  \ r.1 ≤ r.2 ∧ r.2 < nums.length) :\n  maxSumRangeQuery nums requests = maxSumRangeQuery\
  \ nums requests :=\n  sorry\n\n\ntheorem maxSumRangeQuery_single_request\n  (nums\
  \ : List Nat)\n  (h : nums.length > 0) :\n  let requests := [(0, nums.length - 1)]\n\
  \  maxSumRangeQuery nums requests = (listSum nums) % MOD :=\n  sorry\n\n\ntheorem\
  \ maxSumRangeQuery_overlapping_bounds\n  (nums : List Nat)\n  (h1 : nums.length\
  \ > 1) :\n  let requests := [(0, nums.length / 2), (nums.length / 4, nums.length\
  \ - 1)]\n  let sorted_prefix := (listSortDescending nums).take nums.length\n  maxSumRangeQuery\
  \ nums requests ≤ (listSum sorted_prefix) * 2 % MOD :=\n  sorry\n\n/--\ninfo: 19\n\
  -/\n#guard_msgs in\n#eval max_sum_range_query [1, 2, 3, 4, 5] [[1, 3], [0, 1]]\n\
  \n/--\ninfo: 11\n-/\n#guard_msgs in\n#eval max_sum_range_query [1, 2, 3, 4, 5, 6]\
  \ [[0, 1]]\n\n/--\ninfo: 47\n-/\n#guard_msgs in\n#eval max_sum_range_query [1, 2,\
  \ 3, 4, 5, 10] [[0, 2], [1, 3], [1, 1]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
