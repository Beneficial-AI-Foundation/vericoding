"vc-description": "Chef Ada is building a new restaurant in the following way:\n-\
  \ First, $N$ points $X_1, X_2, \\ldots, X_N$ are chosen on the $x$-axis.\n- Then,\
  \ $N$ columns (numbered $1$ through $N$) are made. For simplicity, the columns are\
  \ represented as vertical segments; for each valid $i$, the height of the $i$-th\
  \ segment is $H_i$.\n- Ada assigns a column to each of the points $X_1, X_2, \\\
  ldots, X_N$ in an arbitrary way (each column must be assigned to exactly one point).\n\
  - Finally, Ada constructs the roof of the restaurant, represented by a polyline\
  \ with $N$ vertices. Let's denote the column assigned to the $i$-th point by $P_i$.\
  \ For each valid $i$, the $i$-th of these vertices is $(X_i, H_{P_i})$, i.e. the\
  \ polyline joins the tops of the columns from left to right.\nAda wants the biggest\
  \ restaurant. Help her choose the positions of the columns in such a way that the\
  \ area below the roof is the biggest possible. Formally, she wants to maximise the\
  \ area of the polygon whose perimeter is formed by the roof and the segments $(X_N,\
  \ H_{P_N}) - (X_N, 0) - (X_1, 0) - (X_1, H_{P_1})$. Let $S$ be this maximum area;\
  \ you should compute $2 \\cdot S$ (it is guaranteed that $2 \\cdot S$ is an integer).\n\
  \n-----Input-----\n- The first line of the input contains a single integer $T$ denoting\
  \ the number of test cases. The description of $T$ test cases follows.\n- The first\
  \ line of each test case contains a single integer $N$.\n- $N$ lines follow. For\
  \ each valid $i$, the $i$-th of these lines contains two space-separated integers\
  \ $X_i$ and $H_i$.\n\n-----Output-----\nFor each test case, print a single line\
  \ containing one integer $2 \\cdot S$.\n\n-----Constraints-----\n- $1 \\le T \\\
  le 3 \\cdot 10^5$\n- $2 \\le N \\le 10^5$\n- $0 \\le X_1 < X_2 < \\ldots < X_N \\\
  le 2 \\cdot 10^9$\n- $1 \\le H_i \\le 10^9$ for each valid $i$\n- the sum of $N$\
  \ over all test cases does not exceed $10^6$\n\n-----Example Input-----\n1\n5\n\
  1 1\n2 2\n3 3\n4 4\n5 5\n\n-----Example Output-----\n27\n\n-----Explanation-----"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calculate_restaurant_area (points : List (Int × Int)) : Int\
  \ :=\n  sorry\n"
"vc-theorems": "theorem restaurant_area_nonnegative {points : List (Int × Int)} :\n\
  \  calculate_restaurant_area points ≥ 0 :=\nsorry\n\n\ntheorem restaurant_area_linear_scaling\
  \ {points : List (Int × Int)} :\n  calculate_restaurant_area ((points.map (fun p\
  \ => (p.1, 2 * p.2)))) = \n  2 * calculate_restaurant_area points :=\nsorry \n\n\
  \ntheorem restaurant_area_shift_invariant {points : List (Int × Int)} :\n  calculate_restaurant_area\
  \ ((points.map (fun p => (p.1 + 10, p.2)))) = \n  calculate_restaurant_area points\
  \ :=\nsorry\n\n\ntheorem restaurant_area_zero_height {points : List (Int × Int)}\
  \ :\n  calculate_restaurant_area ((points.map (fun p => (p.1, 0)))) = 0 :=\nsorry\n\
  \n/--\ninfo: 27\n-/\n#guard_msgs in\n#eval calculate_restaurant_area [(1, 1), (2,\
  \ 2), (3, 3), (4, 4), (5, 5)]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
