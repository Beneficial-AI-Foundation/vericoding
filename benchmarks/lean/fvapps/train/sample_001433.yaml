"vc-description": "Chef has a pepperoni pizza in the shape of a $N \\times N$ grid;\
  \ both its rows and columns are numbered $1$ through $N$. Some cells of this grid\
  \ have pepperoni on them, while some do not. Chef wants to cut the pizza vertically\
  \ in half and give the two halves to two of his friends. Formally, one friend should\
  \ get everything in the columns $1$ through $N/2$ and the other friend should get\
  \ everything in the columns $N/2+1$ through $N$.\nBefore doing that, if Chef wants\
  \ to, he may choose one row of the grid and reverse it, i.e. swap the contents of\
  \ the cells in the $i$-th and $N+1-i$-th column in this row for each $i$ ($1 \\\
  le i \\le N/2$).\nAfter the pizza is cut, let's denote the number of cells containing\
  \ pepperonis in one half by $p_1$ and their number in the other half by $p_2$. Chef\
  \ wants to minimise their absolute difference. What is the minimum value of $|p_1-p_2|$?\n\
  \n-----Input-----\n- The first line of the input contains a single integer $T$ denoting\
  \ the number of test cases. The description of $T$ test cases follows.\n- The first\
  \ line of each test case contains a single integer $N$.\n- $N$ lines follow. For\
  \ each $i$ ($1 \\le i \\le N$), the $i$-th of these lines contains a string with\
  \ length $N$ describing the $i$-th row of the grid; this string contains only characters\
  \ '1' (denoting a cell with pepperonis) and '0' (denoting a cell without pepperonis).\n\
  \n-----Output-----\nFor each test case, print a single line containing one integer\
  \ — the minimum absolute difference between the number of cells with pepperonis\
  \ in the half-pizzas given to Chef's friends.\n\n-----Constraints-----\n- $1 \\\
  le T \\le 1,000$\n- $2 \\le N \\le 1,000$\n- $N$ is even\n- the sum of $N \\cdot\
  \ N$ over all test cases does not exceed $2 \\cdot 10^6$\n\n-----Example Input-----\n\
  2\n6\n100000\n100000\n100000\n100000\n010010\n001100\n4\n0011\n1100\n1110\n0001\n\
  \n-----Example Output-----\n2\n0\n\n-----Explanation-----\nExample case 1: Initially,\
  \ $|p_1-p_2| = 4$, but if Chef reverses any one of the first four rows from \"100000\"\
  \ to \"000001\", $|p_1-p_2|$ becomes $2$.\nExample case 2: Initially, $|p_1-p_2|\
  \ = 0$. We cannot make that smaller by reversing any row."
"vc-preamble": "import Imports.AllImports\n\ndef PizzaGrid := List String\n\ndef valid_grid\
  \ (n : Nat) (grid : PizzaGrid) : Bool := sorry\n\n\ndef solve_pizza_balance (n :\
  \ Nat) (grid : PizzaGrid) : Nat := sorry\n\ndef count_ones (s : String) : Nat :=\n\
  \  s.toList.countP (· = '1')\n\n\ndef left_side (n : Nat) (row : String) : String\
  \ :=\n  row.take (n/2)\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def right_side (n : Nat) (row : String) : String :=\n  row.drop\
  \ (n/2)\n"
"vc-theorems": "theorem valid_output {n : Nat} {grid : PizzaGrid} \n  (h : valid_grid\
  \ n grid = true) : \n  ∃ result : Nat, solve_pizza_balance n grid = result := sorry\n\
  \n\ntheorem balanced_grid {n : Nat} {grid : PizzaGrid} \n  (h1 : valid_grid n grid\
  \ = true)\n  (h2 : n % 2 = 0)\n  (h3 : (List.foldl (λ acc row => acc + count_ones\
  \ (left_side n row)) 0 grid) = \n        (List.foldl (λ acc row => acc + count_ones\
  \ (right_side n row)) 0 grid)) :\n  solve_pizza_balance n grid = 0 := sorry\n\n\n\
  theorem minimum_difference {n : Nat} {grid : PizzaGrid}\n  (h1 : valid_grid n grid\
  \ = true)\n  (h2 : n % 2 = 0) :\n  solve_pizza_balance n grid ≤ \n    (List.foldl\
  \ \n      (λ acc row => \n        let l := count_ones (left_side n row)\n      \
  \  let r := count_ones (right_side n row)\n        acc + if l ≥ r then l - r else\
  \ r - l)\n      0 grid) := sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval solve_pizza_balance\
  \ 6 [\"100000\", \"100000\", \"100000\", \"100000\", \"010010\", \"001100\"]\n\n\
  /--\ninfo: 0\n-/\n#guard_msgs in\n#eval solve_pizza_balance 4 [\"0011\", \"1100\"\
  , \"1110\", \"0001\"]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval solve_pizza_balance\
  \ 2 [\"10\", \"01\"]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
