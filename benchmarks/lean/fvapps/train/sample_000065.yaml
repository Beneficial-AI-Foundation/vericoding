"vc-description": "Kuroni has $n$ daughters. As gifts for them, he bought $n$ necklaces\
  \ and $n$ bracelets:  the $i$-th necklace has a brightness $a_i$, where all the\
  \ $a_i$ are pairwise distinct (i.e. all $a_i$ are different),  the $i$-th bracelet\
  \ has a brightness $b_i$, where all the $b_i$ are pairwise distinct (i.e. all $b_i$\
  \ are different). \n\nKuroni wants to give exactly one necklace and exactly one\
  \ bracelet to each of his daughters. To make sure that all of them look unique,\
  \ the total brightnesses of the gifts given to each daughter should be pairwise\
  \ distinct. Formally, if the $i$-th daughter receives a necklace with brightness\
  \ $x_i$ and a bracelet with brightness $y_i$, then the sums $x_i + y_i$ should be\
  \ pairwise distinct. Help Kuroni to distribute the gifts.\n\nFor example, if the\
  \ brightnesses are $a = [1, 7, 5]$ and $b = [6, 1, 2]$, then we may distribute the\
  \ gifts as follows:  Give the third necklace and the first bracelet to the first\
  \ daughter, for a total brightness of $a_3 + b_1 = 11$. Give the first necklace\
  \ and the third bracelet to the second daughter, for a total brightness of $a_1\
  \ + b_3 = 3$. Give the second necklace and the second bracelet to the third daughter,\
  \ for a total brightness of $a_2 + b_2 = 8$. \n\nHere is an example of an invalid\
  \ distribution:   Give the first necklace and the first bracelet to the first daughter,\
  \ for a total brightness of $a_1 + b_1 = 7$. Give the second necklace and the second\
  \ bracelet to the second daughter, for a total brightness of $a_2 + b_2 = 8$. Give\
  \ the third necklace and the third bracelet to the third daughter, for a total brightness\
  \ of $a_3 + b_3 = 7$. \n\nThis distribution is invalid, as the total brightnesses\
  \ of the gifts received by the first and the third daughter are the same. Don't\
  \ make them this upset!\n\n\n-----Input-----\n\nThe input consists of multiple test\
  \ cases. The first line contains an integer $t$ ($1 \\le t \\le 100$)  — the number\
  \ of test cases. The description of the test cases follows.\n\nThe first line of\
  \ each test case contains a single integer $n$ ($1 \\le n \\le 100$)  — the number\
  \ of daughters, necklaces and bracelets.\n\nThe second line of each test case contains\
  \ $n$ distinct integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 1000$)  — the\
  \ brightnesses of the necklaces.\n\nThe third line of each test case contains $n$\
  \ distinct integers $b_1, b_2, \\dots, b_n$ ($1 \\le b_i \\le 1000$)  — the brightnesses\
  \ of the bracelets.\n\n\n-----Output-----\n\nFor each test case, print a line containing\
  \ $n$ integers $x_1, x_2, \\dots, x_n$, representing that the $i$-th daughter receives\
  \ a necklace with brightness $x_i$. In the next line print $n$ integers $y_1, y_2,\
  \ \\dots, y_n$, representing that the $i$-th daughter receives a bracelet with brightness\
  \ $y_i$.\n\nThe sums $x_1 + y_1, x_2 + y_2, \\dots, x_n + y_n$ should all be distinct.\
  \ The numbers $x_1, \\dots, x_n$ should be equal to the numbers $a_1, \\dots, a_n$\
  \ in some order, and the numbers $y_1, \\dots, y_n$ should be equal to the numbers\
  \ $b_1, \\dots, b_n$ in some order. \n\nIt can be shown that an answer always exists.\
  \ If there are multiple possible answers, you may print any of them.\n\n\n-----Example-----\n\
  Input\n2\n3\n1 8 5\n8 4 5\n3\n1 7 5\n6 1 2\n\nOutput\n1 8 5\n8 4 5\n5 1 7\n6 2 1\n\
  \n\n\n-----Note-----\n\nIn the first test case, it is enough to give the $i$-th\
  \ necklace and the $i$-th bracelet to the $i$-th daughter. The corresponding sums\
  \ are $1 + 8 = 9$, $8 + 4 = 12$, and $5 + 5 = 10$.\n\nThe second test case is described\
  \ in the statement."
"vc-preamble": "import Imports.AllImports\n\ndef List.sorted (l : List Int) : Bool\
  \ :=\n  sorry\n\n\ndef solve_gift_distribution (n : Nat) (a b : List Int) : List\
  \ Int × List Int :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def List.sort (l : List Int) : List Int :=\n  sorry\n"
"vc-theorems": "theorem gift_distribution_output {n : Nat} {a b : List Int} :\n  let\
  \ (necklace, bracelet) := solve_gift_distribution n a b\n  (necklace.sorted = true)\
  \ ∧ (bracelet.sorted = true) := by\n  sorry \n\n\ntheorem gift_distribution_nonempty\
  \ {n : Nat} {a b : List Int} :\n  let (necklace, bracelet) := solve_gift_distribution\
  \ n a b\n  necklace.length > 0 ∧ bracelet.length > 0 := by\n  sorry\n\n\ntheorem\
  \ gift_distribution_preserves_elements {n : Nat} {a b : List Int} :\n  let (necklace,\
  \ bracelet) := solve_gift_distribution n a b\n  necklace = a.sort ∧ bracelet = b.sort\
  \ := by\n  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
