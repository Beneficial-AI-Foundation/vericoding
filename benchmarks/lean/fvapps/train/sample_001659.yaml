vc-description: |-
  ## Task

  You are at position [0, 0] in maze NxN and you can **only** move in one of the four cardinal directions (i.e. North, East, South, West).  Return `true` if you can reach position [N-1, N-1] or `false` otherwise.

  Empty positions are marked `.`. Walls are marked `W`. Start and exit positions are empty in all test cases.

  ## Path Finder Series:
  -       [#1: can you reach the exit?](https://www.codewars.com/kata/5765870e190b1472ec0022a2)
  -       [#2: shortest path](https://www.codewars.com/kata/57658bfa28ed87ecfa00058a)
  -       [#3: the Alpinist](https://www.codewars.com/kata/576986639772456f6f00030c)
  -       [#4: where are you?](https://www.codewars.com/kata/5a0573c446d8435b8e00009f)
  -       [#5: there's someone here](https://www.codewars.com/kata/5a05969cba2a14e541000129)
vc-preamble: |
  import Imports.AllImports

  def path_finder (maze : String) : Bool := sorry

  def stringReplicate (n : Nat) (s : String) : String := sorry


  def stringJoin (l : List String) (sep : String) : String := sorry

  def makeList (n : Nat) (c : Char) : List Char := sorry
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def listToString (l : List Char) : String := sorry

  def make_maze (cells : List Char) : String := sorry
vc-theorems: |
  theorem empty_maze_always_solvable (n : Nat) (h : n ≥ 2) (h2 : n ≤ 10) :
    let row := stringReplicate n "."
    let rows := List.replicate n row
    path_finder (stringJoin rows "\n") = true := sorry


  theorem border_wall_maze_unsolvable (n : Nat) (h : n ≥ 2) (h2 : n ≤ 10) :
    let row := stringReplicate n "W"
    let rows := List.replicate n row
    path_finder (stringJoin rows "\n") = false := sorry


  theorem random_valid_maze_returns_bool (cells : List Char) 
    (h1 : cells.length ≥ 4) (h2 : cells.length ≤ 100)
    (h3 : ∀ c ∈ cells, c = '.' ∨ c = 'W')
    (h4 : ∃ n : Nat, n * n = cells.length)
    (h5 : cells ≠ [] → cells[0] = '.')
    (h6 : cells ≠ [] → cells[cells.length - 1] = '.') :
    (path_finder (make_maze cells)) = true ∨ (path_finder (make_maze cells)) = false := sorry


  theorem single_path_solvable :
    path_finder "..W\nW.W\n..." = true := sorry


  theorem path_to_self_exists (n : Nat) (h : n ≥ 2) (h2 : n ≤ 10) :
    let cells := makeList (n*n) '.'
    path_finder (make_maze cells) = true := sorry

  /--
  info: True
  -/
  #guard_msgs in
  #eval path_finder "\n".join([".W.", ".W.", "..."])

  /--
  info: False
  -/
  #guard_msgs in
  #eval path_finder maze2
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
