"vc-description": "Create a function named `divisors`/`Divisors` that takes an integer\
  \ `n > 1` and returns an array with all of the integer's divisors(except for 1 and\
  \ the number itself), from smallest to largest. If the number is prime return the\
  \ string '(integer) is prime' (`null` in C#) (use `Either String a` in Haskell and\
  \ `Result, String>` in Rust).\n\n#### Example:\n\n```python\ndivisors(12); #should\
  \ return [2,3,4,6]\ndivisors(25); #should return [5]\ndivisors(13); #should return\
  \ \"13 is prime\"\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sqrt (n : Nat) : Nat := sorry\n\ndef divisors (n : Nat) : Option\
  \ (List Nat) := sorry\n"
"vc-theorems": "theorem divisors_properties (n : Nat) (h : n ≥ 2) :\n  match (divisors\
  \ n) with\n  | some lst => \n    -- Each divisor divides n\n    (∀ d ∈ lst, n %\
  \ d = 0) ∧\n    -- Divisors are ordered\n    (∀ i < lst.length - 1, lst.get ⟨i,\
  \ sorry⟩ ≤ lst.get ⟨i+1, sorry⟩) ∧\n    -- Divisors are proper (less than n)\n \
  \   (∀ d ∈ lst, d < n) ∧\n    -- Divisors are greater than 1\n    (∀ d ∈ lst, d\
  \ > 1)\n  | none =>\n    -- n is prime \n    ∀ i : Nat, 2 ≤ i → i ≤ sqrt n → n %\
  \ i ≠ 0\n  := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
