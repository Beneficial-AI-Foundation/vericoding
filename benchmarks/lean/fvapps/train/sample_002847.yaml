"vc-description": "## Your Job\n\n  Find the sum of all multiples of `n` below `m`\
  \ \n  \n  \n## Keep in Mind\n\n  * `n` and `m` are natural numbers (positive integers)\n\
  \  * `m` is **excluded** from the multiples\n  \n  \n## Examples"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sumMul (n m : Int) : Int ⊕ String := sorry\n\ntheorem sumMul_valid_output\
  \ (n m : Int)\n  (h1 : n > 0)\n  (h2 : m > 0)\n  (h3 : m > n) :\n  match sumMul\
  \ n m with\n  | Sum.inl result => result ≥ 0\n  | Sum.inr _ => False\n  := sorry\n"
"vc-theorems": "theorem sumMul_all_divisible (n m : Int)\n  (h1 : n > 0)\n  (h2 :\
  \ m > 0)\n  (h3 : m > n)\n  (k : Int)\n  (hk : n ≤ k ∧ k < m ∧ k % n = 0) :\n  match\
  \ sumMul n m with\n  | Sum.inl _ => k % n = 0\n  | Sum.inr _ => False\n  := sorry\n\
  \n\ntheorem sumMul_invalid_n (n m : Int)\n  (h : n ≤ 0) :\n  sumMul n m = Sum.inr\
  \ \"INVALID\"\n  := sorry\n\n\ntheorem sumMul_invalid_m (n m : Int)\n  (h : m ≤\
  \ 0) :\n  sumMul n m = Sum.inr \"INVALID\"\n  := sorry\n\n/--\ninfo: 1860\n-/\n\
  #guard_msgs in\n#eval sum_mul 4 123\n\n/--\ninfo: 20\n-/\n#guard_msgs in\n#eval\
  \ sum_mul 2 10\n\n/--\ninfo: 86469\n-/\n#guard_msgs in\n#eval sum_mul 123 4567\n\
  \n/--\ninfo: 'INVALID'\n-/\n#guard_msgs in\n#eval sum_mul 0 2\n\n/--\ninfo: 'INVALID'\n\
  -/\n#guard_msgs in\n#eval sum_mul 2 0\n\n/--\ninfo: 'INVALID'\n-/\n#guard_msgs in\n\
  #eval sum_mul -7 4\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
