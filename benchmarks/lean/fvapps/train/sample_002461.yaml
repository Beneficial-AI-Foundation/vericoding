"vc-description": "=====Function Descriptions=====\nitertools.combinations(iterable,\
  \ r)\nThis tool returns the r length subsequences of elements from the input iterable.\n\
  \nCombinations are emitted in lexicographic sorted order. So, if the input iterable\
  \ is sorted, the combination tuples will be produced in sorted order.\n\nSample\
  \ Code\n\n>>> from itertools import combinations\n>>> \n>>> print list(combinations('12345',2))\n\
  [('1', '2'), ('1', '3'), ('1', '4'), ('1', '5'), ('2', '3'), ('2', '4'), ('2', '5'),\
  \ ('3', '4'), ('3', '5'), ('4', '5')]\n>>> \n>>> A = [1,1,3,3,3]\n>>> print list(combinations(A,4))\n\
  [(1, 1, 3, 3), (1, 1, 3, 3), (1, 1, 3, 3), (1, 3, 3, 3), (1, 3, 3, 3)]\n\n=====Problem\
  \ Statement=====\nYou are given a string S.\nYour task is to print all possible\
  \ combinations, up to size k, of the string in lexicographic sorted order.\n\n=====Constraints=====\n\
  0<k≤len(S)\n\n=====Input Format=====\nA single line containing the string S and\
  \ integer value k separated by a space.\n\n=====Output Format=====\nPrint the different\
  \ combinations of string S on separate lines."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def dedupe_sort_string (s : String) : String := sorry\ndef print_string_combinations\
  \ (s : String) (k : Nat) : String := sorry\n"
"vc-theorems": "theorem test_k_equals_one {s : String} (h : s ≠ \"\") :\n  let deduped\
  \ := dedupe_sort_string s\n  let result := print_string_combinations deduped 1\n\
  \  let lines := result.splitOn \"\\n\"\n  lines = (s.data.eraseDups).map toString\
  \ := sorry\n\n\ntheorem test_dedupe_properties {s : String} (h₁ : s.all Char.isUpper)\
  \ (h₂ : s.length ≤ 5) (h₃ : s ≠ \"\") :\n  let deduped := dedupe_sort_string s\n\
  \  deduped.data = deduped.data.eraseDups := sorry\n\n/--\ninfo: 'A\\nC\\nH\\nK\\\
  nAC\\nAH\\nAK\\nCH\\nCK\\nHK'\n-/\n#guard_msgs in\n#eval print_string_combinations\
  \ \"HACK\" 2\n\n/--\ninfo: 'X\\nY\\nZ'\n-/\n#guard_msgs in\n#eval print_string_combinations\
  \ \"XYZ\" 1\n\n/--\ninfo: 'A\\nB\\nC\\nAB\\nAC\\nBC\\nABC'\n-/\n#guard_msgs in\n\
  #eval print_string_combinations \"ABC\" 3\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
