"vc-description": "Today Chef wants to evaluate the dishes of his $N$ students. He\
  \ asks each one to cook a dish and present it to him.\nChef loves his secret ingredient,\
  \ and only likes dishes with at least $X$ grams of it.\nGiven $N$, $X$ and the amount\
  \ of secret ingredient used by each student $A_i$, find out whether Chef will like\
  \ at least one dish. \n\n-----Input:-----\n- First line will contain $T$, number\
  \ of testcases. Then the testcases follow. \n- The first line of each testcase contains\
  \ two integers $N$ \n(number of students) and $X$ (minimum amount of secret ingredient\
  \ that a dish must contain for Chef to like it).\n- The next line contains $N$ space\
  \ separated integers, $A_i$ denoting the amount of secret ingredient used by the\
  \ students in their dishes.\n\n-----Output:-----\nFor each testcase, print a single\
  \ string \"YES\" if Chef likes at least one dish. Otherwise, print \"NO\". (Without\
  \ quotes).\n\n-----Constraints:-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq N \\leq\
  \ 1000$\n- $1 \\leq X \\leq 1000000$\n- $1 \\leq A_i \\leq 1000000$\n\n-----Sample\
  \ Input:-----\n3\n5 100\n11 22 33 44 55\n5 50\n10 20 30 40 50\n5 45\n12 24 36 48\
  \ 60\n\n-----Sample Output:-----\nNO\nYES\nYES"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def check_ingredients (n : Nat) (x : Nat) (ingredients : List Nat)\
  \ : String :=\n  sorry\n"
"vc-theorems": "theorem check_ingredients_valid_output (n : Nat) (x : Nat) (ingredients\
  \ : List Nat) (h : ingredients ≠ []) : \n  check_ingredients n x ingredients = \"\
  YES\" ∨ check_ingredients n x ingredients = \"NO\" :=\n  sorry\n\n\ntheorem check_ingredients_expected_result\
  \ (n : Nat) (x : Nat) (ingredients : List Nat) (h : ingredients ≠ []) :\n  check_ingredients\
  \ n x ingredients = \"YES\" ↔ ∃ i ∈ ingredients, i ≥ x :=\n  sorry\n\n\ntheorem\
  \ zero_threshold (n : Nat) (ingredients : List Nat) (h : ingredients ≠ []) (h2 :\
  \ ∀ i ∈ ingredients, i > 0) :\n  check_ingredients n 0 ingredients = \"YES\" :=\n\
  \  sorry\n\n\ntheorem single_ingredient (n : Nat) (x : Nat) (ingredient : Nat) :\n\
  \  check_ingredients n x [ingredient] = if ingredient ≥ x then \"YES\" else \"NO\"\
  \ :=\n  sorry\n\n/--\ninfo: 'NO'\n-/\n#guard_msgs in\n#eval check_ingredients 5\
  \ 100 [11, 22, 33, 44, 55]\n\n/--\ninfo: 'YES'\n-/\n#guard_msgs in\n#eval check_ingredients\
  \ 5 50 [10, 20, 30, 40, 50]\n\n/--\ninfo: 'YES'\n-/\n#guard_msgs in\n#eval check_ingredients\
  \ 5 45 [12, 24, 36, 48, 60]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
