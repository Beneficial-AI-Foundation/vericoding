"vc-description": "The Chef has a huge square napkin of size 2n X 2n. He folds the\
  \ napkin n-3 times. Each time he folds its bottom side over its top side, and then\
  \ its right side over its left side. After each fold, the side length of the napkin\
  \ is reduced by half. The Chef continues folding until there remains a 8x8 sheet,\
  \ lying flat on a table.\nOh, did I forget to mention that the Chef was cooking\
  \ a new brown colored curry while folding the napkin. He drops some brown colored\
  \ gravy onto some cells in the folded 8x8 napkin. When he drops the gravy, it soaks\
  \ through all the cells below it.\nNow the Chef unfolds the napkin to its original\
  \ size. There are now many curry stained brown colored cells in the napkin. They\
  \ form several separate regions, each of which is connected. Could you help the\
  \ Chef count how many regions of brown cells are there in the napkin?\nNote that\
  \ two cells are adjacent if they share a common edge (they are not considered adjacent\
  \ if they only share a corner). Two cells are connected if we can go from one cell\
  \ to the other via adjacent cells. A region is a maximal set of cells such that\
  \ every two of its cells are connected.\nPlease see the example test case for more\
  \ details.\n\n-----Input-----\nThe first line contains t, the number of test cases\
  \ (about 50). Then t test cases follow. Each test case has the following form:\n\
  - The first line contains N (3 ≤ N ≤ 109)\n- Then, 8 lines follow. Each line is\
  \ a string of 8 characters, 0 or 1, where 1 denotes a stained brown cell in the\
  \ folded napkin.\n\n-----Output-----\nFor each test case, print a single number\
  \ that is the number of disconnected brown regions in the unfolded napkin. Since\
  \ the result may be a very large number, you only need to print its remainder when\
  \ dividing by 21945.\n\n-----Example-----\nInput:\n3\n3\n01000010\n11000001\n00000000\n\
  00011000\n00011000\n00010100\n00001000\n00000000\n4\n01000010\n11000001\n00000000\n\
  00011000\n00011000\n00010100\n00001000\n00000000\n1000000000\n11111111\n11111111\n\
  11111111\n11111111\n11111111\n11111111\n11111111\n11111111\n\nOutput:\n6\n22\n1\n\
  \n-----Output details-----\n\nCase 1 and 2: There are 6 brown regions in the 8x8\
  \ napkin. If we unfold it once, it has 22 brown regions: 11 regions in the top half\
  \ and 11 regions in the bottom half (as shown in the figure above).\nCase 3: All\
  \ cells of the napkin are stained, so there is always one brown region, no matter\
  \ how many times the Chef unfolds the napkin."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_brown_regions (n : Nat) (grid : List String) : Nat :=\
  \ sorry\n\ndef empty_grid : List String := [\"00000000\", \"00000000\", \"00000000\"\
  , \"00000000\", \n                               \"00000000\", \"00000000\", \"\
  00000000\", \"00000000\"]\n\ntheorem count_brown_regions_bounds {n : Nat} {grid\
  \ : List String} \n  (h1 : n ≥ 3) : \n  0 ≤ count_brown_regions n grid ∧ count_brown_regions\
  \ n grid < 21945 := sorry\n"
"vc-theorems": "theorem empty_grid_gives_zero : \n  count_brown_regions 3 empty_grid\
  \ = 0 := sorry\n\n\ntheorem grid_constraints (grid : List String) \n  (h1 : grid.length\
  \ = 8)\n  (h2 : ∀ row ∈ grid, row.length = 8)\n  (h3 : ∀ row ∈ grid, ∀ c ∈ row.data,\
  \ c = '0' ∨ c = '1') :\n  True := sorry\n\n\ntheorem output_modulo {n : Nat} {grid\
  \ : List String}\n  (h1 : n ≥ 3) :\n  0 ≤ count_brown_regions n grid ∧ count_brown_regions\
  \ n grid < 21945 := sorry\n\n\ntheorem idempotency {n : Nat} {grid : List String}\n\
  \  (h1 : n ≥ 3) :\n  count_brown_regions n grid = count_brown_regions n grid :=\
  \ sorry\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval count_brown_regions 3 [\"01000010\"\
  , \"11000001\", \"00000000\", \"00011000\", \"00011000\", \"00010100\", \"00001000\"\
  , \"00000000\"]\n\n/--\ninfo: 22\n-/\n#guard_msgs in\n#eval count_brown_regions\
  \ 4 [\"01000010\", \"11000001\", \"00000000\", \"00011000\", \"00011000\", \"00010100\"\
  , \"00001000\", \"00000000\"]\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval count_brown_regions\
  \ 1000000000 [\"11111111\", \"11111111\", \"11111111\", \"11111111\", \"11111111\"\
  , \"11111111\", \"11111111\", \"11111111\"]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
