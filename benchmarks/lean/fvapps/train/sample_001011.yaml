"vc-description": "Chef wants to gift pairs to his friends this new year. But his\
  \ friends like good pairs\nonly.\nA pair (a , b) is called a good pair if 1 <= a\
  \ < b <= N such that GCD(a*b , P) = 1.\nSince Chef is busy in preparation for the\
  \ party, he wants your help to find all the\ngood pairs.\n—————————————————————————————————————\n\
  INPUT\n• The first line of the input contains a single integer T.\n• The first and\
  \ only line of each test case contain two integer N,P.\n————————————————————————————————————————\n\
  OUTPUT\nFor each test case, print a single line containing one integer — the total\
  \ number of good\npairs\n————————————————————————————————————————\nCONSTRAINTS\n\
  • 1 ≤ T≤ 50\n• 2 ≤ N,P ≤10^5\n—————————————————————————————————————\nExample Input\n\
  2\n2 3\n3 3\n————————————————————————————————————————\nExample Output\n1\n1"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def gcd (a b : Nat) : Nat := sorry\n\ndef count_good_pairs (n p\
  \ : Nat) : Nat := sorry \n\n\n\n\n\n\n"
"vc-theorems": "theorem count_good_pairs_bounds (n p : Nat) (h1 : n > 0) (h2 : p >\
  \ 0) :\n  0 ≤ count_good_pairs n p ∧ count_good_pairs n p ≤ (n * (n-1)) / 2 := sorry\n\
  \n\ntheorem count_good_pairs_monotonic (n p : Nat) (h1 : n > 1) (h2 : p > 0) :\n\
  \  count_good_pairs n p ≥ count_good_pairs (n-1) p := sorry\n\n/--\ninfo: 1\n-/\n\
  #guard_msgs in\n#eval count_good_pairs 2 3\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n\
  #eval count_good_pairs 3 3\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval count_good_pairs\
  \ 4 5\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
