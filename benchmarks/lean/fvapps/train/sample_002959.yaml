"vc-description": "There are some candies that need to be distributed to some children\
  \ as fairly as possible (i.e. the variance of result needs to be as small as possible),\
  \ but I don't know how to distribute them, so I need your help. Your assignment\
  \ is to write a function with signature `distribute(m, n)` in which `m` represents\
  \ how many candies there are, while `n` represents how many children there are.\
  \ The function should return a container which includes the number of candies each\
  \ child gains.\n\n# Notice\n1. *The candy can't be divided into pieces.*\n2. The\
  \ list's order doesn't matter.\n\n# Requirements\n1. The case `m < 0` is equivalent\
  \ to `m == 0`.\n2. If `n <= 0` the function should return an empty container. \n\
  3. If there isn't enough candy to distribute, you should fill the corresponding\
  \ number with `0`.\n\n# Examples\n```python\ndistribute(-5,  0) # should be [] \n\
  distribute( 0,  0) # should be [] \ndistribute( 5,  0) # should be [] \ndistribute(10,\
  \  0) # should be [] \ndistribute(15,  0) # should be [] \ndistribute(-5, -5) #\
  \ should be [] \ndistribute( 0, -5) # should be [] \ndistribute( 5, -5) # should\
  \ be [] \ndistribute(10, -5) # should be [] \ndistribute(15, -5) # should be []\n\
  distribute(-5, 10) # should be [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\ndistribute( 0, 10)\
  \ # should be [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\ndistribute( 5, 10) # should be [1,\
  \ 1, 1, 1, 1, 0, 0, 0, 0, 0]\ndistribute(10, 10) # should be [1, 1, 1, 1, 1, 1,\
  \ 1, 1, 1, 1]\ndistribute(15, 10) # should be [2, 2, 2, 2, 2, 1, 1, 1, 1, 1]\n```\n\
  \  \n# Input\n  1. m: Integer (m <= 100000)\n  2. n: Integer (n <= 1000)\n\n# Output\n\
  \  1. [Integer]"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def distribute (m n: Int) : List Int := sorry\n\ndef sum : List\
  \ Int → Int\n  | [] => 0\n  | x::xs => x + sum xs\n"
"vc-theorems": "theorem nonpositive_n_returns_empty {m n : Int} (h: n ≤ 0) : \n  distribute\
  \ m n = [] := sorry\n\n\ntheorem nonpositive_m_distributes_zeros {m n : Int} (h₁:\
  \ m ≤ 0) (h₂: n > 0) :\n  let result := distribute m n\n  (result.length = n) ∧\
  \ (∀ x ∈ result, x = 0) := sorry\n\n\ntheorem distribution_properties {m n : Int}\
  \ (h₁: m ≥ 0) (h₂: n > 0) :\n  let result := distribute m n\n  (result.length =\
  \ n) ∧ \n  (sum result = m) ∧\n  (∀ i j, i < result.length → j < result.length →\
  \ \n    (result.get ⟨i, by sorry⟩ - result.get ⟨j, by sorry⟩ ≤ 1 ∧ \n     result.get\
  \ ⟨j, by sorry⟩ - result.get ⟨i, by sorry⟩ ≤ 1)) ∧\n  (∀ i, i < result.length -\
  \ 1 → \n    result.get ⟨i, by sorry⟩ ≥ result.get ⟨i+1, by sorry⟩) := sorry\n\n\
  /--\ninfo: []\n-/\n#guard_msgs in\n#eval distribute 10 0\n\n/--\ninfo: []\n-/\n\
  #guard_msgs in\n#eval distribute 15 -5\n\n/--\ninfo: [0] * 10\n-/\n#guard_msgs in\n\
  #eval distribute -5 10\n\n/--\ninfo: [2, 2, 2, 2, 2, 1, 1, 1, 1, 1]\n-/\n#guard_msgs\
  \ in\n#eval distribute 15 10\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
