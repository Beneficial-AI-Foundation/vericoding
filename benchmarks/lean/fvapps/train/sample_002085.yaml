"vc-description": "There is an automatic door at the entrance of a factory. The door\
  \ works in the following way:  when one or several people come to the door and it\
  \ is closed, the door immediately opens automatically and all people immediately\
  \ come inside,  when one or several people come to the door and it is open, all\
  \ people immediately come inside,  opened door immediately closes in d seconds after\
  \ its opening,  if the door is closing and one or several people are coming to the\
  \ door at the same moment, then all of them will have enough time to enter and only\
  \ after that the door will close. \n\nFor example, if d = 3 and four people are\
  \ coming at four different moments of time t_1 = 4, t_2 = 7, t_3 = 9 and t_4 = 13\
  \ then the door will open three times: at moments 4, 9 and 13. It will close at\
  \ moments 7 and 12.\n\nIt is known that n employees will enter at moments a, 2·a,\
  \ 3·a, ..., n·a (the value a is positive integer). Also m clients will enter at\
  \ moments t_1, t_2, ..., t_{m}.\n\nWrite program to find the number of times the\
  \ automatic door will open. Assume that the door is initially closed.\n\n\n-----Input-----\n\
  \nThe first line contains four integers n, m, a and d (1 ≤ n, a ≤ 10^9, 1 ≤ m ≤\
  \ 10^5, 1 ≤ d ≤ 10^18) — the number of the employees, the number of the clients,\
  \ the moment of time when the first employee will come and the period of time in\
  \ which the door closes.\n\nThe second line contains integer sequence t_1, t_2,\
  \ ..., t_{m} (1 ≤ t_{i} ≤ 10^18) — moments of time when clients will come. The values\
  \ t_{i} are given in non-decreasing order.\n\n\n-----Output-----\n\nPrint the number\
  \ of times the door will open.\n\n\n-----Examples-----\nInput\n1 1 3 4\n7\n\nOutput\n\
  1\n\nInput\n4 3 4 2\n7 9 11\n\nOutput\n4\n\n\n\n-----Note-----\n\nIn the first example\
  \ the only employee will come at moment 3. At this moment the door will open and\
  \ will stay open until the moment 7. At the same moment of time the client will\
  \ come, so at first he will enter and only after it the door will close. Thus the\
  \ door will open one time."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_door_opens (n m a d : Nat) (client_times : List Nat)\
  \ : Nat :=\nsorry\n\n-- Result should be positive"
"vc-theorems": "theorem count_door_opens_positive\n  (n m a d : Nat) (client_times\
  \ : List Nat) \n  (h1 : n > 0) (h2 : m > 0) (h3 : a > 0) (h4 : d > 0)\n  (h5 : client_times.length\
  \ = m) :\n  count_door_opens n m a d client_times > 0 :=\nsorry\n\n-- Result can't\
  \ be more than total possible openings\n\ntheorem count_door_opens_upper_bound\n\
  \  (n m a d : Nat) (client_times : List Nat)\n  (h1 : n > 0) (h2 : m > 0) (h3 :\
  \ a > 0) (h4 : d > 0)\n  (h5 : client_times.length = m) :\n  count_door_opens n\
  \ m a d client_times ≤ n + m :=\nsorry\n\n-- For same inputs, results should be\
  \ deterministic\n\ntheorem count_door_opens_deterministic\n  (n m a d : Nat) (client_times\
  \ : List Nat)\n  (h1 : n > 0) (h2 : m > 0) (h3 : a > 0) (h4 : d > 0)\n  (h5 : client_times.length\
  \ = m) :\n  count_door_opens n m a d client_times = count_door_opens n m a d client_times\
  \ :=\nsorry\n\n-- With no clients, result is bounded \n\ntheorem count_door_opens_no_clients\n\
  \  (n a d : Nat) (h1 : n > 0) (h2 : a > 0) (h3 : d > 0) :\n  let result := count_door_opens\
  \ n 0 a d []\n  result ≤ n ∧ result > 0 :=\nsorry\n\n/--\ninfo: 1\n-/\n#guard_msgs\
  \ in\n#eval count_door_opens 1 1 3 4 [7]\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval\
  \ count_door_opens 4 3 4 2 [7, 9, 11]\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval\
  \ count_door_opens 10 10 51 69 [154, 170, 170, 183, 251, 337, 412, 426, 445, 452]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
