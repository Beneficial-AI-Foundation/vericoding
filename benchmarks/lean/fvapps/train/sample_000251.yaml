"vc-description": "Given an array of non-negative integers, you are initially positioned\
  \ at the first index of the array.\n\nEach element in the array represents your\
  \ maximum jump length at that position.\n\nYour goal is to reach the last index\
  \ in the minimum number of jumps.\n\nExample:\n\n\nInput: [2,3,1,1,4]\nOutput: 2\n\
  Explanation: The minimum number of jumps to reach the last index is 2.\n    Jump\
  \ 1 step from index 0 to 1, then 3 steps to the last index.\n\nNote:\n\nYou can\
  \ assume that you can always reach the last index."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def jump (v : List Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem jump_single_element (n : Nat) :\n  jump [n] = 0 :=\n  sorry\n\
  \n\ntheorem jump_two_elements :\n  jump [2, 1] = 1 :=\n  sorry\n\n\ntheorem jump_three_ones\
  \ :\n  jump [1, 1, 1] = 2 :=\n  sorry\n\n\ntheorem jump_complex_case1 :\n  jump\
  \ [2, 3, 1, 1, 4] = 2 :=\n  sorry\n\n\ntheorem jump_complex_case2 :\n  jump [2,\
  \ 1, 1, 1] = 2 :=\n  sorry\n\n\ntheorem jump_ascending :\n  jump [1, 2, 3] = 2 :=\n\
  \  sorry\n\n\ntheorem jump_long_sequence :\n  jump [5, 9, 3, 2, 1, 0, 2, 3, 3, 1,\
  \ 0, 0] = 3 :=\n  sorry\n\n\ntheorem jump_descending :\n  jump [3, 2, 1] = 1 :=\n\
  \  sorry\n\n\ntheorem jump_mixed_sequence :\n  jump [4, 1, 1, 3, 1, 1, 1] = 2 :=\n\
  \  sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval jump [2, 3, 1, 1, 4]\n\n/--\n\
  info: 2\n-/\n#guard_msgs in\n#eval jump [1, 2, 3]\n\n/--\ninfo: 0\n-/\n#guard_msgs\
  \ in\n#eval jump [1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
