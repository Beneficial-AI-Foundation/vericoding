"vc-description": "Recently, chef Ciel often hears about lucky numbers.\n\nEverybody\
  \ knows that lucky numbers are positive integers\nwhose decimal representation contains\
  \ only the lucky digits 4 and 7.\nFor example, numbers 47, 744, 4 are lucky and\
  \ 5, 17, 467 are not.\n\nCiel decides to make Ciel numbers.\nAs you know, Ciel likes\
  \ the digit 8 very much.\nAnd then, Ciel likes the digits 5 and 3.\nSo Ciel defines\
  \ Ciel numbers as the positive integers k such that d(k, 8) ≥ d(k, 5) ≥ d(k, 3)\
  \ and d(k, i) = 0 for all i = 0, 1, 2, 4, 6, 7, 9,\nwhere d(k, i) denotes the number\
  \ of the digit i in the decimal representation of the integer k.\nFor example, the\
  \ first few Ciel numbers are 8, 58, 85, 88, 358, 385, 538, 583, 588, 835, 853, 858,\
  \ 885, 888, ....\n\nCiel's restaurant has N menus.\nAnd Ciel want to know how many\
  \ menus have Ciel numbers as their price.\nYour task is to find it.\n\n-----Input-----\n\
  \nThe first line contains an integer N.\nThen N lines follow.\nEach line has the\
  \ name Si of the menu and its price Pi separated by a single space.\n\n-----Output-----\n\
  \nPrint the number of menus whose prices are one of Ciel numbers.\n\n-----Constraints-----\n\
  \n1 ≤ N ≤ 1000\n\n1 ≤ |Si| ≤ 100, where |Si| denotes the length of Si\n\nEach letter\
  \ of Si is either an alphabetical letter or a digit or a single quotation mark or\
  \ a space.\n\n1 ≤ Pi < 1000000 (106)\nPi contains no leading zeros.\n\n-----Sample\
  \ Input-----\n6\nmilk 58\nCiel's Drink 80\nThe curry 2nd edition 888888\nrice omelet\
  \ 85855\nunagi 1\nThe first    and last letters can be a space    358\n\n-----Sample\
  \ Output-----\n3\n\n-----Output details-----\n\n58 and 888888 and 358 are Ciel numbers.\n\
  80 and 85855 and 1 are not Ciel numbers.\n\n-----Notes-----\n\nDifferent operating\
  \ systems have different ways of representing a newline; do not assume one particular\
  \ way will be used."
"vc-preamble": "import Imports.AllImports\n\ndef count_ciel_number_prices (menu_items\
  \ : List String) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_char (s : String) (c : Char) : Nat :=\n  s.foldl (fun\
  \ acc x => if x = c then acc + 1 else acc) 0\n"
"vc-theorems": "theorem count_result_bounded (menu_items : List String) :\n  0 ≤ count_ciel_number_prices\
  \ menu_items ∧ \n  count_ciel_number_prices menu_items ≤ menu_items.length :=\n\
  sorry\n\n\ntheorem count_result_bounded_with_format \n  (menu_items : List String)\n\
  \  (h : ∀ item ∈ menu_items, ∃ words price, item = words ++ \" \" ++ price ∧ price.all\
  \ (λ c => '0' ≤ c ∧ c ≤ '9')) :\n  0 ≤ count_ciel_number_prices menu_items ∧\n \
  \ count_ciel_number_prices menu_items ≤ menu_items.length :=\nsorry\n\n\ntheorem\
  \ count_ciel_numbers_positive\n  (menu_items : List String)\n  (h : ∃ item ∈ menu_items,\
  \ \n    let price := (item.split (· = ' ')).getLast!\n    price.all (λ c => c =\
  \ '8' ∨ c = '5' ∨ c = '3') ∧\n    count_char price '8' ≥ count_char price '5' ∧\n\
  \    count_char price '5' ≥ count_char price '3') :\n  count_ciel_number_prices\
  \ menu_items > 0 :=\nsorry\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval count_ciel_number_prices\
  \ [\"milk 58\", \"Ciel\"s Drink 80\", \"The curry 2nd edition 888888\", \"rice omelet\
  \ 85855\", \"unagi 1\", \"The first and last letters can be a space 358\"]\n\n/--\n\
  info: 2\n-/\n#guard_msgs in\n#eval count_ciel_number_prices [\"menu 8\", \"special\
  \ 853\", \"dessert 123\"]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval count_ciel_number_prices\
  \ [\"item 44\", \"item2 77\"]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
