vc-description: |-
  In this kata you're expected to sort an array of 32-bit integers in ascending order of the number of **on** bits they have.

  E.g Given the array **[7, 6, 15, 8]**

  - 7 has **3 on** bits  (000...0**111**)
  - 6 has **2 on** bits  (000...00**11**)
  - 15 has **4 on** bits (000...**1111**)
  - 8 has **1 on** bit   (000...**1**000)

  So the array in sorted order would be **[8, 6, 7, 15]**.

  In cases where two numbers have the same number of bits, compare their real values instead.

  E.g between 10 **(...1010)** and 12 **(...1100)**, they both have the same number of **on** bits '**2**' but the integer 10 is less than 12 so it comes first in sorted order.

  Your task is to write the function `sortBybit()` that takes an array of integers and sort them as described above.

  ```if-not:haskell
  Note: Your function should modify the input rather than creating a new array.
  ```
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def countBits (n : Nat) : Nat := sorry
  def sort_by_bit (arr : List Nat) : List Nat := sorry
vc-theorems: |
  theorem sort_by_bit_preserves_length (arr : List Nat) :
    arr.length > 0 → (sort_by_bit arr).length = arr.length := sorry


  theorem sort_by_bit_maintains_order (arr : List Nat) (i : Nat) (h1 : arr.length > 0) 
    (h2 : i < (sort_by_bit arr).length - 1) : 
    let result := sort_by_bit arr
    let elem₁ := result.getD i 0
    let elem₂ := result.getD (i+1) 0
    countBits elem₁ < countBits elem₂ ∨
    (countBits elem₁ = countBits elem₂ ∧ elem₁ ≤ elem₂) := sorry


  theorem sort_by_bit_idempotent (arr : List Nat) :
    sort_by_bit (sort_by_bit arr) = sort_by_bit arr := sorry


  theorem sort_by_bit_edge_cases :
    sort_by_bit [0] = [0] ∧
    sort_by_bit [1, 1] = [1, 1] ∧ 
    sort_by_bit [2^32 - 1] = [2^32 - 1] := sorry

  /--
  info: [8, 6, 7, 15]
  -/
  #guard_msgs in
  #eval sort_by_bit [7, 6, 15, 8]

  /--
  info: [1, 8, 3, 3, 5, 6, 9, 7]
  -/
  #guard_msgs in
  #eval sort_by_bit [3, 8, 3, 6, 5, 7, 9, 1]

  /--
  info: [0, 2, 2, 4, 8, 8, 3, 5, 5, 6, 9, 7, 56]
  -/
  #guard_msgs in
  #eval sort_by_bit [9, 4, 5, 3, 5, 7, 2, 56, 8, 2, 6, 8, 0]
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
