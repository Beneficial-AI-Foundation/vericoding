"vc-description": "One day, Delta, the dog, got very angry. He has $N$ items with\
  \ different values, and he decided to destroy a few of them. However, Delta loves\
  \ his hooman as well. So he only destroyed those items whose Least Significant Bit\
  \ in binary representation is 0. \nCan you help Delta to find the total damage he\
  \ did so he could make an equally sorry face?\n\n-----Input:-----\n- First line\
  \ will contain $T$, number of testcases. Then the testcases follow. \n- First line\
  \ of Each test case a single integer $N$.\n- Next line contains $N$ integers denoting\
  \ values of items.\n\n-----Output:-----\nFor each testcase, output in a single line\
  \ the total damage caused by Delta.\n\n-----Constraints-----\n- $1 \\leq T \\leq\
  \ 10^3$\n- $1 \\leq N \\leq 10^3$\n- $1 \\leq value \\leq 10^3$\n\n-----Sample Input:-----\n\
  1\n5\n\n1 2 3 4 5\n\n-----Sample Output:-----\n6\n\n-----EXPLANATION:-----\nTotal\
  \ Damage: $2  + 4 = 6$."
"vc-preamble": "import Imports.AllImports\n\ndef sum_list : List Nat → Nat \n  | []\
  \ => 0\n  | (h :: t) => h + sum_list t\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calculate_damage (n : Nat) (items : List Nat) : Nat := sorry\n\
  \n\n\ntheorem damage_non_negative {n : Nat} {items : List Nat} \n  (h : items.length\
  \ > 0) :\n  calculate_damage n items ≥ 0 := sorry"
"vc-theorems": "/--\ninfo: 6\n-/\n#guard_msgs in\n#eval calculate_damage 5 [1, 2,\
  \ 3, 4, 5]\n\n/--\ninfo: 12\n-/\n#guard_msgs in\n#eval calculate_damage 3 [2, 4,\
  \ 6]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval calculate_damage 4 [1, 3, 5, 7]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
