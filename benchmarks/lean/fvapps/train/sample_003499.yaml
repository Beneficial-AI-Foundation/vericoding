"vc-description": "Your task is to define a function that understands basic mathematical\
  \ expressions and solves them.\nFor example:\n\n```python\ncalculate(\"1 + 1\")\
  \        # => 2\ncalculate(\"18 + 4*6\")     # => 42\ncalculate(\"245 - 826\") \
  \   # => -581\ncalculate(\"09 + 000482\")  # => 491\ncalculate(\"8 / 4 + 6\")  \
  \  # => 8\ncalculate(\"5 + 1 / 5\")    # => 5.2\ncalculate(\"1+2+3\")        # =>\
  \ 6\ncalculate(\"9 /3 + 12/ 6\") # => 5\n```\nNotes:\n\n- Input string will contain\
  \ numbers (may be integers and floats) and arithmetic operations.\n- Input string\
  \ may contain spaces, and all space characters should be ignored.\n- Operations\
  \ that will be used: addition (+), subtraction (-), multiplication (*), and division\
  \ (/)\n- Operations must be done in the order of operations: First multiplication\
  \ and division, then addition and subtraction.\n- In this kata, input expression\
  \ will not have negative numbers. (ex: \"-4 + 5\")\n- If output is an integer, return\
  \ as integer. Else return as float.\n- If input string is empty, contains letters,\
  \ has a wrong syntax, contains division by zero or is not a string, return False."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calculate (s : String) : Option Float := sorry\n\ntheorem invalid_input_returns_none\
  \ {s : String} \n  (h : s.isEmpty ∨ ¬∀ c ∈ s.data, c ∈ ['0', '1', '2', '3', '4',\
  \ '5', '6', '7', '8', '9', '+', '-', '*', '/', ' ']) :\n  calculate s = none :=\
  \ sorry\n"
"vc-theorems": "theorem valid_expr_returns_some {expr : String} \n  (h : ∃ n : Float,\
  \ calculate expr = some n) :\n  ∃ n : Float, calculate expr = some n := sorry\n\n\
  \ntheorem addition_commutative {a b : Nat} :\n  calculate s!\"{a}+{b}\" = calculate\
  \ s!\"{b}+{a}\" := sorry\n\n\ntheorem addition_associative {a b c : Nat} :\n  ∀\
  \ n1 n2 : Float,\n  calculate s!\"({a}+{b})+{c}\" = some n1 →\n  calculate s!\"\
  {a}+({b}+{c})\" = some n2 →\n  Float.abs (n1 - n2) < 0.0001 := sorry\n\n\ntheorem\
  \ division_by_nonzero {a : Nat} {b : Nat} (h : b > 0) :\n  ∃ n : Float, calculate\
  \ s!\"{a}/{b}\" = some n := sorry\n\n\ntheorem division_by_zero {a : Nat} :\n  calculate\
  \ s!\"{a}/0\" = none := sorry\n\n\ntheorem whitespace_invariant {expr : String}\
  \ \n  (h : ∀ c ∈ expr.data, c ∈ ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\
  \ '+', '-', '*', '/', ' ']) :\n  calculate (expr.replace \" \" \"\") = calculate\
  \ expr := sorry\n\n\ntheorem multiplication_by_one {x : Nat} :\n  calculate s!\"\
  {x}*1\" = some (x.toFloat) := sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval calculate\
  \ \"1 + 1\"\n\n/--\ninfo: 42\n-/\n#guard_msgs in\n#eval calculate \"18 + 4*6\"\n\
  \n/--\ninfo: 5.2\n-/\n#guard_msgs in\n#eval calculate \"5 + 1 / 5\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
