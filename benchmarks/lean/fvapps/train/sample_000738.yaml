"vc-description": "Saket loves to play with strings. One day , while he was having\
  \ fun with Cyclic Permutations of available strings to him, he observed that despite\
  \ being scarce in numbers Vowels were really clingy.Being clingy means for almost\
  \ every given string, there was a Cyclic Permutation in which atleast two vowels\
  \ were together.\nSo he decided to check this property for all the available strings\
  \ to him. As the number of strings can be very large, help Saket determine whether\
  \ the given string is clingy or not.\n\n-----Input:-----\nThe first line of the\
  \ input contains a single integer T$T$ denoting the number of test cases. The description\
  \ of T$T$ test cases follows.\nFirst line of every test case contains an integer\
  \ N$N$ denoting the length of the string.\nSecond line contains a string S$S$ of\
  \ length N$N$, consisting only of uppercase english alphabets.\n\n-----Output:-----\n\
  For each test case, print a single line containing \"Yes\" if any of the cyclic\
  \ permutations of the string is clingy else print \"No\".\n\n-----Constraints-----\n\
  - 1≤T≤1000$1 \\leq T \\leq 1000$\n- 1≤N≤1000$1 \\leq N \\leq 1000$\n- String S$S$\
  \ consists of only upper case english alphabets.\n\n-----Subtasks-----\n- 20 points\
  \ : 1≤N≤5$1 \\leq N \\leq 5$\n- 80 points : Original$Original$ Constraints$Constraints$\n\
  \n-----Sample Input:-----\n2\n5\nAUXFC\n6\nXBCDEF\n\n-----Sample Output:-----\n\
  Yes\n\nNo\n\n-----EXPLANATION:-----\nExample$Example$ case1:$ case 1: $ One of the\
  \ cyclic permutation is the original string itself, which has \"A\" and \"U\" together.\n\
  Example$Example$ case2:$ case 2: $     None of the cyclic permutation will have\
  \ 2 vowels together."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def VOWELS := [\"A\", \"E\", \"I\", \"O\", \"U\"]\n\ndef is_clingy\
  \ (s : String) : Bool := sorry\n"
"vc-theorems": "theorem uppercase_letters (s : String) (h : s.all Char.isUpper) :\
  \ \n  is_clingy s = true ∨ is_clingy s = false := sorry\n\n\ntheorem rotations_equivalent\
  \ (s : String) (i : Nat) (h : i < s.length) :\n  is_clingy s = is_clingy (s.drop\
  \ i ++ s.take i) := sorry\n\n\ntheorem all_vowels_clingy (s : String) \n  (h1 :\
  \ s.all (fun c => c.toString ∈ VOWELS))\n  (h2 : s.length ≥ 2) :\n  is_clingy s\
  \ = true := sorry\n\n\ntheorem consonants_not_clingy (s : String)\n  (h : s.all\
  \ (fun c => c.toString ∉ VOWELS)) :\n  is_clingy s = false := sorry\n\n\ntheorem\
  \ single_char_not_clingy (c : Char) \n  (h : c.isUpper) :\n  is_clingy c.toString\
  \ = false := sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval is_clingy \"AUXFC\"\
  \n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval is_clingy \"XBCDEF\"\n\n/--\ninfo:\
  \ True\n-/\n#guard_msgs in\n#eval is_clingy \"AEIOU\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
