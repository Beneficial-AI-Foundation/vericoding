"vc-description": "Make the 2D list by the sequential integers started by the ```head```\
  \ number.\n\nSee the example test cases for the expected output.\n\n``` \nNote:\n\
  \n-10**20 < the head number <10**20\n1 <=  the number of rows <= 1000\n0 <=  the\
  \ number of columms <= 1000\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def make_2d_list (head : Int) (row : Nat) (col : Nat) : List (List\
  \ Int) :=\n  sorry\n"
"vc-theorems": "theorem make_2d_list_dimensions {head : Int} {row col : Nat} \n  (h1\
  \ : row > 0) (h2 : col > 0) :\n  let result := make_2d_list head row col\n  result.length\
  \ = row ∧ \n  ∀ r ∈ result, r.length = col :=\nsorry\n\n\ntheorem make_2d_list_row_increment\
  \ {head : Int} {row col : Nat}\n  (h1 : row > 0) (h2 : col > 0) :\n  let result\
  \ := make_2d_list head row col\n  ∀ r ∈ result, ∀ i, i + 1 < r.length → \n    (r.get!\
  \ (i+1)) - (r.get! i) = 1 :=\nsorry\n\n\ntheorem make_2d_list_col_increment {head\
  \ : Int} {row col : Nat}  \n  (h1 : row > 0) (h2 : col > 0) :\n  let result := make_2d_list\
  \ head row col\n  ∀ i j, i + 1 < result.length → j < col → \n    (result.get! (i+1)).get!\
  \ j - (result.get! i).get! j = col :=\nsorry\n\n\ntheorem make_2d_list_head {head\
  \ : Int} {row col : Nat}\n  (h1 : row > 0) (h2 : col > 0) :\n  let result := make_2d_list\
  \ head row col\n  (result.get! 0).get! 0 = head :=\nsorry\n\n\ntheorem make_2d_list_square\
  \ {head : Int} {size : Nat}\n  (h : size > 0) :\n  let result := make_2d_list head\
  \ size size\n  result.length = (result.get! 0).length :=\nsorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
