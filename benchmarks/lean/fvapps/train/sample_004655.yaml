"vc-description": "Write a `sort` function that will sort a massive list of strings\
  \ in caseless, lexographic order.\n\nExample Input:\n`['b', 'ba', 'ab', 'bb', 'c']`\n\
  \nExpected Output:\n`['ab', 'b', 'ba', 'bb', 'c']`\n\n* The argument for your function\
  \ will be a generator that will return a new word for each call of next()\n* Your\
  \ function will return its own generator of the same words, except your generator\
  \ will return the words in lexographic order\n* All words in the list are unique\n\
  * All words will be comprised of lower case letters only (a-z)\n* All words will\
  \ be between 1 and 8 characters long\n* There will be hundreds of thousands of words\
  \ to sort\n* You may not use Python's sorted built-in function\n* You may not use\
  \ Python's list.sort method\n* An empty list of words should result in an empty\
  \ list.\n* `alphabet = 'abcdefghijklmnopqrstuvwxyz'` has been pre-defined for you,\
  \ in case you need it"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sort {α : Type} [Ord α] (xs : List α) : List α := sorry\n\n\
  theorem sort_length {α : Type} [Ord α] (xs : List α) :\n  (sort xs).length = xs.length\
  \ := sorry\n"
"vc-theorems": "theorem sort_ordered {α : Type} [Ord α] [LE α] (xs : List α) :\n \
  \ ∀ i j, i < j → j < (sort xs).length → \n  (sort xs).get ⟨i, by sorry⟩ ≤ (sort\
  \ xs).get ⟨j, by sorry⟩ := sorry\n\n\ntheorem sort_perm_elem {α : Type} [Ord α]\
  \ [BEq α] (xs : List α) :\n  ∀ x, List.elem x (sort xs) = List.elem x xs := sorry\n\
  \n\ntheorem sort_first {α : Type} [Ord α] [LE α] (xs : List α) (h₁ : xs ≠ []) :\n\
  \  ∀ x ∈ xs, (sort xs).get ⟨0, by sorry⟩ ≤ x := sorry\n\n\ntheorem sort_last {α\
  \ : Type} [Ord α] [LE α] (xs : List α) (h₁ : xs ≠ []) :\n  ∀ x ∈ xs, x ≤ (sort xs).get\
  \ ⟨(sort xs).length - 1, by sorry⟩ := sorry\n\n\ntheorem sort_singleton {α : Type}\
  \ [Ord α] (x : α) :\n  sort [x] = [x] := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
