"vc-description": "Given an array of integers cost and an integer target. Return the\
  \ maximum integer you can paint under the following rules:\n\nThe cost of painting\
  \ a digit (i+1) is given by cost[i] (0 indexed).\nThe total cost used must be equal\
  \ to target.\nInteger does not have digits 0.\n\nSince the answer may be too large,\
  \ return it as string.\nIf there is no way to paint any integer given the condition,\
  \ return \"0\".\n \nExample 1:\nInput: cost = [4,3,2,5,6,7,2,5,5], target = 9\n\
  Output: \"7772\"\nExplanation:  The cost to paint the digit '7' is 2, and the digit\
  \ '2' is 3. Then cost(\"7772\") = 2*3+ 3*1 = 9. You could also paint \"977\", but\
  \ \"7772\" is the largest number.\nDigit    cost\n  1  ->   4\n  2  ->   3\n  3\
  \  ->   2\n  4  ->   5\n  5  ->   6\n  6  ->   7\n  7  ->   2\n  8  ->   5\n  9\
  \  ->   5\n\nExample 2:\nInput: cost = [7,6,5,5,5,6,8,7,8], target = 12\nOutput:\
  \ \"85\"\nExplanation: The cost to paint the digit '8' is 7, and the digit '5' is\
  \ 5. Then cost(\"85\") = 7 + 5 = 12.\n\nExample 3:\nInput: cost = [2,4,6,2,4,6,4,4,4],\
  \ target = 5\nOutput: \"0\"\nExplanation: It's not possible to paint any integer\
  \ with total cost equal to target.\n\nExample 4:\nInput: cost = [6,10,15,40,40,40,40,40,40],\
  \ target = 47\nOutput: \"32211\"\n\n \nConstraints:\n\ncost.length == 9\n1 <= cost[i]\
  \ <= 5000\n1 <= target <= 5000"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def largest_number (costs : List Nat) (target : Int) : String :=\
  \ sorry\n\ntheorem largest_number_output_properties\n  (costs : List Nat) \n  (target\
  \ : Int)\n  (h1 : costs.length = 9)\n  (h2 : ∀ x ∈ costs, 1 ≤ x ∧ x ≤ 100)\n  (h3\
  \ : 1 ≤ target ∧ target ≤ 100) :\n  let result := largest_number costs target\n\
  \  -- Result is non-empty string\n  (result.length > 0) ∧\n  -- Contains only digits\n\
  \  (∀ c ∈ result.data, c.isDigit) ∧\n  -- Either 0 or valid cost sum\n  (result\
  \ = \"0\" ∨\n    -- Sum of digit costs equals target\n    (let digits := result.data.map\
  \ (fun c => c.toNat - '0'.toNat)\n     let costProducts := digits.zip costs |>.map\
  \ (fun (d, c) => c * d)\n     let cost_sum := costProducts.foldl (fun x y => x +\
  \ y) (0 : Nat)\n     Int.ofNat cost_sum = target)) ∧\n  -- All digits between 1-9\n\
  \  (result = \"0\" ∨ \n    (∀ d ∈ result.data.map (fun c => c.toNat - '0'.toNat),\
  \ 1 ≤ d ∧ d ≤ 9)) := \nsorry\n"
"vc-theorems": "theorem zero_target_gives_zero \n  (costs : List Nat)\n  (h1 : costs.length\
  \ = 9)\n  (h2 : ∀ x ∈ costs, 1 ≤ x ∧ x ≤ 100) :\n  largest_number costs 0 = \"0\"\
  \ := sorry\n\n\ntheorem negative_target_gives_zero\n  (costs : List Nat)\n  (h1\
  \ : costs.length = 9)\n  (h2 : ∀ x ∈ costs, 1 ≤ x ∧ x ≤ 100) :\n  ∀ target < 0,\
  \ largest_number costs target = \"0\" := sorry\n\n\ntheorem impossible_costs_give_zero\n\
  \  (costs : List Nat)\n  (h1 : costs.length = 9)\n  (h2 : ∀ x ∈ costs, x ≥ 1000)\
  \ :\n  largest_number costs 100 = \"0\" := sorry\n\n/--\ninfo: '7772'\n-/\n#guard_msgs\
  \ in\n#eval largest_number [4, 3, 2, 5, 6, 7, 2, 5, 5] 9\n\n/--\ninfo: '85'\n-/\n\
  #guard_msgs in\n#eval largest_number [7, 6, 5, 5, 5, 6, 8, 7, 8] 12\n\n/--\ninfo:\
  \ '0'\n-/\n#guard_msgs in\n#eval largest_number [2, 4, 6, 2, 4, 6, 4, 4, 4] 5\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
