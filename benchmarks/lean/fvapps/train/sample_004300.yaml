"vc-description": "Gray code is a form of binary encoding where transitions between\
  \ consecutive numbers differ by only one bit. This is a useful encoding for reducing\
  \ hardware data hazards with values that change rapidly and/or connect to slower\
  \ hardware as inputs. It is also useful for generating inputs for Karnaugh maps.\n\
  \nHere is an exemple of what the code look like:\n\n```\n0:    0000\n1:    0001\n\
  2:    0011\n3:    0010\n4:    0110\n5:    0111\n6:    0101\n7:    0100\n8:    1100\n\
  ```\n\nThe goal of this kata is to build two function bin2gray and gray2bin wich\
  \ will convert natural binary to Gray Code and vice-versa. We will use the \"binary\
  \ reflected Gray code\". The input and output will be arrays of 0 and 1, MSB at\
  \ index 0.\n\nThere are \"simple\" formula to implement these functions. It is a\
  \ very interesting exercise to find them by yourself.\n\nAll input will be correct\
  \ binary arrays."
"vc-preamble": "import Imports.AllImports\n\ndef bin2gray (bits : List Nat) : List\
  \ Nat := sorry\ndef gray2bin (bits : List Nat) : List Nat := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isBinary (n : Nat) : Bool :=\n  n == 0 || n == 1\n"
"vc-theorems": "theorem gray_code_roundtrip (bits : List Nat) (h : ∀ x ∈ bits, isBinary\
  \ x = true) : \n  gray2bin (bin2gray bits) = bits := sorry\n\n\ntheorem gray_code_length\
  \ (bits : List Nat) (h₁ : List.length bits > 0) (h₂ : ∀ x ∈ bits, isBinary x = true)\
  \ :\n  List.length (bin2gray bits) = List.length bits := sorry\n\n\ntheorem gray_code_first_bit\
  \ (bits : List Nat) (h₁ : List.length bits > 0) (h₂ : ∀ x ∈ bits, isBinary x = true)\
  \ :\n  List.head! (bin2gray bits) = List.head! bits := sorry\n\n\ntheorem gray_code_values_binary\
  \ (bits : List Nat) (h₁ : List.length bits > 0) (h₂ : ∀ x ∈ bits, isBinary x = true)\
  \ :\n  ∀ x ∈ bin2gray bits, isBinary x = true := sorry\n\n/--\ninfo: [1, 1, 1]\n\
  -/\n#guard_msgs in\n#eval bin2gray [1, 0, 1]\n\n/--\ninfo: [1, 0]\n-/\n#guard_msgs\
  \ in\n#eval bin2gray [1, 1]\n\n/--\ninfo: test3_input\n-/\n#guard_msgs in\n#eval\
  \ gray2bin bin2gray(test3_input)\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
