"vc-description": "You like playing chess tournaments online.\n\nIn your last tournament\
  \ you played $n$ games. For the sake of this problem, each chess game is either\
  \ won or lost (no draws). When you lose a game you get $0$ points. When you win\
  \ you get $1$ or $2$ points: if you have won also the previous game you get $2$\
  \ points, otherwise you get $1$ point. If you win the very first game of the tournament\
  \ you get $1$ point (since there is not a \"previous game\").\n\nThe outcomes of\
  \ the $n$ games are represented by a string $s$ of length $n$: the $i$-th character\
  \ of $s$ is W if you have won the $i$-th game, while it is L if you have lost the\
  \ $i$-th game.\n\nAfter the tournament, you notice a bug on the website that allows\
  \ you to change the outcome of at most $k$ of your games (meaning that at most $k$\
  \ times you can change some symbol L to W, or W to L). Since your only goal is to\
  \ improve your chess rating, you decide to cheat and use the bug.\n\nCompute the\
  \ maximum score you can get by cheating in the optimal way.\n\n\n-----Input-----\n\
  \nEach test contains multiple test cases. The first line contains an integer $t$\
  \ ($1\\le t \\le 20,000$) — the number of test cases. The description of the test\
  \ cases follows.\n\nThe first line of each testcase contains two integers $n, k$\
  \ ($1\\le n\\le 100,000$, $0\\le k\\le n$) – the number of games played and the\
  \ number of outcomes that you can change.\n\nThe second line contains a string $s$\
  \ of length $n$ containing only the characters W and L. If you have won the $i$-th\
  \ game then $s_i=\\,$W, if you have lost the $i$-th game then $s_i=\\,$L.\n\nIt\
  \ is guaranteed that the sum of $n$ over all testcases does not exceed $200,000$.\n\
  \n\n-----Output-----\n\nFor each testcase, print a single integer – the maximum\
  \ score you can get by cheating in the optimal way.\n\n\n-----Example-----\nInput\n\
  8\n5 2\nWLWLL\n6 5\nLLLWWL\n7 1\nLWLWLWL\n15 5\nWWWLLLWWWLLLWWW\n40 7\nLLWLWLWWWLWLLWLWWWLWLLWLLWLLLLWLLWWWLWWL\n\
  1 0\nL\n1 1\nL\n6 1\nWLLWLW\n\nOutput\n7\n11\n6\n26\n46\n0\n1\n6\n\n\n\n-----Note-----\n\
  \nExplanation of the first testcase. Before changing any outcome, the score is $2$.\
  \ Indeed, you won the first game, so you got $1$ point, and you won also the third,\
  \ so you got another $1$ point (and not $2$ because you lost the second game).\n\
  \nAn optimal way to cheat is to change the outcomes of the second and fourth game.\
  \ Doing so, you end up winning the first four games (the string of the outcomes\
  \ becomes WWWWL). Hence, the new score is $7=1+2+2+2$: $1$ point for the first game\
  \ and $2$ points for the second, third and fourth game.\n\nExplanation of the second\
  \ testcase. Before changing any outcome, the score is $3$. Indeed, you won the fourth\
  \ game, so you got $1$ point, and you won also the fifth game, so you got $2$ more\
  \ points (since you won also the previous game).\n\nAn optimal way to cheat is to\
  \ change the outcomes of the first, second, third and sixth game. Doing so, you\
  \ end up winning all games (the string of the outcomes becomes WWWWWW). Hence, the\
  \ new score is $11 = 1+2+2+2+2+2$: $1$ point for the first game and $2$ points for\
  \ all the other games."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calculate_max_score (n k : Nat) (games : String) : Nat := sorry\n\
  \ntheorem non_negative_result {n k : Nat} {games : String} :\n  n > 0 → calculate_max_score\
  \ n k games ≥ 0 := sorry\n"
"vc-theorems": "theorem score_monotonic_with_k {n k : Nat} {games : String} :\n  n\
  \ > 0 → k > 0 → calculate_max_score n k games ≥ calculate_max_score n (k-1) games\
  \ := sorry\n\n\ntheorem all_losses {n k : Nat} :\n  n > 0 → \n  let games := String.mk\
  \ (List.replicate n 'L') \n  calculate_max_score n k games = max (if k > 0 then\
  \ min n k * 2 - 1 else 0) 0 := sorry\n\n\ntheorem all_wins {n k : Nat} :\n  n >\
  \ 0 → \n  let games := String.mk (List.replicate n 'W')\n  calculate_max_score n\
  \ k games = 2 * n - 1 := sorry\n\n/--\ninfo: 7\n-/\n#guard_msgs in\n#eval calculate_max_score\
  \ 5 2 \"WLWLL\"\n\n/--\ninfo: 11\n-/\n#guard_msgs in\n#eval calculate_max_score\
  \ 6 5 \"LLLWWL\"\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval calculate_max_score\
  \ 7 1 \"LWLWLWL\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
