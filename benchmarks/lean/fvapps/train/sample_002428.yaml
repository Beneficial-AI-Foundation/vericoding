"vc-description": "Given a m * n matrix grid which is sorted in non-increasing order\
  \ both row-wise and column-wise. \nReturn the number of negative numbers in grid.\n\
   \nExample 1:\nInput: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]\n\
  Output: 8\nExplanation: There are 8 negatives number in the matrix.\n\nExample 2:\n\
  Input: grid = [[3,2],[1,0]]\nOutput: 0\n\nExample 3:\nInput: grid = [[1,-1],[-1,-1]]\n\
  Output: 3\n\nExample 4:\nInput: grid = [[-1]]\nOutput: 1\n\n \nConstraints:\n\n\
  m == grid.length\nn == grid[i].length\n1 <= m, n <= 100\n-100 <= grid[i][j] <= 100"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_negatives (grid : List (List Int)) : Nat := sorry\n\n\
  theorem count_negatives_matches_direct_count (grid : List (List Int)) : \n  count_negatives\
  \ grid = (grid.bind (·.filter (·<0))).length := sorry\n"
"vc-theorems": "theorem count_negatives_nonnegative (grid : List (List Int)) :\n \
  \ count_negatives grid ≥ 0 := sorry\n\n/--\ninfo: 8\n-/\n#guard_msgs in\n#eval count_negatives\
  \ [[4, 3, 2, -1], [3, 2, 1, -1], [1, 1, -1, -2], [-1, -1, -2, -3]]\n\n/--\ninfo:\
  \ 0\n-/\n#guard_msgs in\n#eval count_negatives [[3, 2], [1, 0]]\n\n/--\ninfo: 3\n\
  -/\n#guard_msgs in\n#eval count_negatives [[1, -1], [-1, -1]]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
