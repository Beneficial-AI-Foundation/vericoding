"vc-description": "On the first row, we write a 0. Now in every subsequent row, we\
  \ look at the previous row and replace each occurrence of 0 with 01, and each occurrence\
  \ of 1 with 10.\n\nGiven row N and index K, return the K-th indexed symbol in row\
  \ N. (The values of K are 1-indexed.) (1 indexed).\n\n\nExamples:\nInput: N = 1,\
  \ K = 1\nOutput: 0\n\nInput: N = 2, K = 1\nOutput: 0\n\nInput: N = 2, K = 2\nOutput:\
  \ 1\n\nInput: N = 4, K = 5\nOutput: 1\n\nExplanation:\nrow 1: 0\nrow 2: 01\nrow\
  \ 3: 0110\nrow 4: 01101001\n\n\nNote:\n\n\n       N will be an integer in the range\
  \ [1, 30].\n       K will be an integer in the range [1, 2^(N-1)]."
"vc-preamble": "import Imports.AllImports\n\ndef kthSymbol (n : Nat) (k : Nat) : Nat\
  \ :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def countOnes (n : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem first_row_is_zero (k : Nat) (h : k > 0) :\n  kthSymbol 1 k\
  \ = 0 :=\n  sorry\n\n\ntheorem output_is_binary (n k : Nat) (h1 : n > 0) (h2 : k\
  \ > 0) :\n  kthSymbol n k = 0 âˆ¨ kthSymbol n k = 1 :=\n  sorry\n\n\ntheorem first_position_zero\
  \ (n : Nat) (h : n > 1) :\n  kthSymbol n 1 = 0 :=\n  sorry\n\n\ntheorem kth_symbol_property\
  \ (n k : Nat) (h1 : n > 0) (h2 : k > 0) :\n  kthSymbol n k = if n > 1 then countOnes\
  \ (k-1) % 2 else 0 :=\n  sorry\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval kth_symbol\
  \ 1 1\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval kth_symbol 2 1\n\n/--\ninfo: 1\n\
  -/\n#guard_msgs in\n#eval kth_symbol 4 5\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
