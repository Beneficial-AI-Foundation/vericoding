"vc-description": "Chef has a sequence $A_1, A_2, \\ldots, A_N$. For a positive integer\
  \ $M$, sequence $B$ is defined as $B = A*M$ that is, appending $A$ exactly $M$ times.\
  \ For example, If $A = [1, 2]$ and $M = 3$, then $B = A*M = [1, 2, 1, 2, 1, 2]$\n\
  You have to help him to find out the minimum value of $M$ such that the length of\
  \ the longest strictly increasing subsequence is maximum possible.\n\n-----Input:-----\n\
  - The first line of the input contains a single integer $T$ denoting the number\
  \ of test cases. The description of $T$ test cases follows.\n- The first line of\
  \ each test case contains a single integer $N$.\n- The second line contains $N$\
  \ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output:-----\nFor each\
  \ test case, print a single line containing one integer ― the minimum value of $M$.\n\
  \n-----Constraints-----\n- $1 \\le T \\le 500$\n- $1 \\le N \\le 2*10^5$\n- $1 \\\
  le A_i \\le 10^9$\n- It's guaranteed that the total length of the sequence $A$ in\
  \ one test file doesn't exceed $2*10^6$\n\n-----Sample Input:-----\n3\n2\n2 1\n\
  2\n1 2\n5\n1 3 2 1 2\n\n-----Sample Output:-----\n2\n1\n2\n\n-----Explanation:-----\n\
  In the first test case, Choosing $M = 2$ gives $B = [2, 1, 2, 1]$ which has a longest\
  \ strictly increasing sequence of length $2$ which is the maximum possible.\nIn\
  \ the second test case, Choosing $M = 1$ gives $B  = [1, 2]$ which has a longest\
  \ strictly increasing sequence of length $2$ which is the maximum possible."
"vc-preamble": "import Imports.AllImports\n\ndef find_min_m (arr : List Int) (n :\
  \ Nat) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def countUnique (arr : List Int) : Nat :=\n  (arr.eraseDups).length\n"
"vc-theorems": "theorem find_min_m_bounds (arr : List Int) (n : Nat) (h : n = arr.length)\
  \ :\n  1 ≤ find_min_m arr n ∧ find_min_m arr n ≤ countUnique arr := by\n  sorry\n\
  \n\ntheorem find_min_m_single_element (arr : List Int) (h : arr.length = 1) :\n\
  \  find_min_m arr arr.length = 1 := by\n  sorry\n\n\ntheorem find_min_m_sorted (arr\
  \ : List Int) (h : arr.length ≥ 2) :\n  find_min_m (List.mergeSort (·≤·) arr) arr.length\
  \ = 1 := by\n  sorry\n\n\ntheorem find_min_m_reverse_sorted (arr : List Int) (h\
  \ : arr.length ≥ 2) :\n  find_min_m (List.mergeSort (·≥·) arr) arr.length = countUnique\
  \ arr := by\n  sorry\n\n\ntheorem find_min_m_small_range (arr : List Int) \n  (h₁\
  \ : ∀ x ∈ arr, 1 ≤ x ∧ x ≤ 3)\n  (h₂ : arr.length ≥ 1)\n  (h₃ : arr.length ≤ 10)\
  \ :\n  1 ≤ find_min_m arr arr.length ∧ find_min_m arr arr.length ≤ countUnique arr\
  \ := by\n  sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval find_min_m [2, 1] 2\n\
  \n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval find_min_m [1, 2] 2\n\n/--\ninfo: 2\n\
  -/\n#guard_msgs in\n#eval find_min_m [1, 3, 2, 1, 2] 5\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
