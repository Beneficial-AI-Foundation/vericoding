"vc-description": "Given a string `s` of uppercase letters, your task is to determine\
  \ how many strings `t` (also uppercase) with length equal to that of `s` satisfy\
  \ the followng conditions:\n\n* `t` is lexicographical larger than `s`, and\n* when\
  \ you write both `s` and `t` in reverse order, `t` is still lexicographical larger\
  \ than `s`.\n\n\n```Haskell\nFor example:\nsolve('XYZ') = 5. They are: YYZ, ZYZ,\
  \ XZZ, YZZ, ZZZ\n```\nString lengths are less than `5000`. Return you answer `modulo\
  \ 10^9+7 (= 1000000007)`.\n\nMore examples in test cases. Good luck!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve (s : String) : Nat :=\n  sorry\n"
"vc-theorems": "theorem result_is_non_negative (s : String) : \n  solve s â‰¥ 0 :=\n\
  sorry\n\n\ntheorem result_is_within_modulo (s : String) :\n  solve s < 1000000007\
  \ :=\nsorry\n\n\n\n\n\n\ntheorem single_char_properties (s : String) (c : Char)\
  \ (h : s = String.mk [c]) :\n  solve s = (Char.toNat 'Z' - Char.toNat c) :=\nsorry\n\
  \n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval solve \"XYZ\"\n\n/--\ninfo: 16174\n-/\n\
  #guard_msgs in\n#eval solve \"ABC\"\n\n/--\ninfo: 25\n-/\n#guard_msgs in\n#eval\
  \ solve \"ZAZ\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
