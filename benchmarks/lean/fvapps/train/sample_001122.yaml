"vc-description": "Chef is an advocate for Go Green Initiative. Today he had n trees\
  \ planted in a row outside his his restaurant. Today, the height of i-th tree is\
  \ hi feet. The trees grow at a rate of mi feet per day.\nChef knows that trees will\
  \ look beautiful if they form a zig-zag sequence. The trees will be said to be in\
  \ Zig-zag sequence if the heights of tree first increases or decreases, then alternates\
  \ between decreasing/increasing respectively. Formally, the trees will be said to\
  \ in Zig-zag sequence if one of the following two conditions holds.\n\n- h1 < h2\
  \ > h3 < h4 and so on..\n- h1 >  h2 < h3 > h4 and so on..\n\nChef wants to know\
  \ intervals of time when the heights of the trees will form a zig-zag sequence.\n\
  \n-----Input-----\nThe first line of the input contains an integer T denoting the\
  \ number of test cases. The description of T test cases follows.\nThe first line\
  \ of each test case contains a single integer n, denoting the number of trees.\n\
  The ith of following N lines contains two space separated integers hi and mi, denoting\
  \ the initial height and the growth speed for ith tree.\n\n-----Output-----\nFor\
  \ each test case, output an integer Q - the amount of the periods of consecutive\
  \ moments of time, when the trees for a zig-zag sequence.\nOn the following Q lines,\
  \ output the intervals of time when the trees' heights form a zig-zag sequence.\
  \ For each intervals, output its' smallest and the largest instants of time. If\
  \ the range is infinite, output Inf as the right bound.\nThe test cases are designed\
  \ in such a way that the total output won't exceed 2 MB.\n\n-----Constraints-----\n\
  \n- 1 ≤ T ≤ 105\n- 1 ≤ n ≤ 10\n- Subtask 1 (23 points): 0 ≤ hi, mi ≤ 10\n- Subtask\
  \ 2 (77 points): 0 ≤ hi, mi ≤ 109\n- 1 ≤ sum of n over a test cases in a single\
  \ test file ≤ 5 × 105\n\n-----Example-----\nInput:3\n3\n0 1\n2 2\n0 3\n2\n2 1\n\
  1 2\n3\n1 1\n2 2\n3 3\n\nOutput:1\n0 1\n2\n0 0\n2 Inf\n0\n\n-----Explanation-----\n\
  Example case 1. In the first case 0 2 0 is already a zig-zag sequence, but on the\
  \ 2nd second it will become 2 6 6 and will never turn back into zig-zag"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_zigzag_intervals (trees : List (Int × Int)) : List (Nat\
  \ × (Nat ⊕ Unit)) :=\n  sorry\n"
"vc-theorems": "theorem output_format (trees : List (Int × Int)) :\n  let result :=\
  \ find_zigzag_intervals trees\n  (∀ interval ∈ result,\n    ∃ (start : Nat) (endVal\
  \ : Nat ⊕ Unit),\n      interval = (start, endVal) ∧\n      (match endVal with\n\
  \        | Sum.inl n => n ≥ start\n        | Sum.inr _ => True)) :=\n  sorry\n\n\
  \ntheorem single_tree (tree : Int × Int) :\n  find_zigzag_intervals [tree] = [(0,\
  \ Sum.inr ())] :=\n  sorry\n\n\ntheorem sorted_intervals (trees : List (Int × Int))\
  \ :\n  let result := find_zigzag_intervals trees\n  ∀ (i j : Nat),\n    i < j →\n\
  \    j < result.length →\n    i < result.length →\n    ∀ (n : Nat) (start : Nat),\n\
  \    (result.get! i).2 = Sum.inl n →\n    (result.get! j).1 = start →\n    n < start\
  \ :=\n  sorry\n\n\ntheorem interval_bounds (trees : List (Int × Int)) :\n  let result\
  \ := find_zigzag_intervals trees\n  ∀ interval ∈ result,\n    match interval with\n\
  \    | (start, Sum.inl endVal) => 0 ≤ start ∧ start ≤ endVal ∧ endVal < 10^20\n\
  \    | (start, Sum.inr _) => 0 ≤ start :=\n  sorry\n\n/--\ninfo: [(0, 1)]\n-/\n\
  #guard_msgs in\n#eval find_zigzag_intervals [(0, 1), (2, 2), (0, 3)]\n\n/--\ninfo:\
  \ [(0, 0), (2, 'Inf')]\n-/\n#guard_msgs in\n#eval find_zigzag_intervals [(2, 1),\
  \ (1, 2)]\n\n/--\ninfo: []\n-/\n#guard_msgs in\n#eval find_zigzag_intervals [(1,\
  \ 1), (2, 2), (3, 3)]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
