"vc-description": "# Task\n You are given a `moment` in time and space. What you must\
  \ do is break it down into time and space, to determine if that moment is from the\
  \ past, present or future.\n\n `Time` is the sum of characters that increase time\
  \ (i.e. numbers in range ['1'..'9'].\n \n `Space` in the number of characters which\
  \ do not increase time (i.e. all characters but those that increase time).\n \n\
  \ The moment of time is determined as follows:\n```\nIf time is greater than space,\
  \ than the moment is from the future.\nIf time is less than space, then the moment\
  \ is from the past.\nOtherwise, it is the present moment.```\n\n You should return\
  \ an array of three elements, two of which are false, and one is true. The true\
  \ value should be at the `1st, 2nd or 3rd` place for `past, present and future`\
  \ respectively.\n\n# Examples\n\n For `moment = \"01:00 pm\"`, the output should\
  \ be `[true, false, false]`.\n \n time equals 1, and space equals 7, so the moment\
  \ is from the past.\n\n For `moment = \"12:02 pm\"`, the output should be `[false,\
  \ true, false]`.\n \n time equals 5, and space equals 5, which means that it's a\
  \ present moment.\n\n For `moment = \"12:30 pm\"`, the output should be `[false,\
  \ false, true]`.\n \n time equals 6, space equals 5, so the moment is from the future.\n\
  \n# Input/Output\n\n\n - `[input]` string `moment`\n\n  The moment of time and space\
  \ that the input time came from.\n\n\n - `[output]` a boolean array\n\n  Array of\
  \ three elements, two of which are false, and one is true. The true value should\
  \ be at the 1st, 2nd or 3rd place for past, present and future respectively."
"vc-preamble": "import Imports.AllImports\n\ndef moment_of_time_in_space (s : String)\
  \ : List Bool :=\n  sorry\n\n\ndef sum_digits (s : String) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_non_digits (s : String) : Nat :=\n  sorry\n"
"vc-theorems": "theorem output_is_three_bools (s : String) :\n  let result := moment_of_time_in_space\
  \ s\n  List.length result = 3 ∧ \n  List.all result (fun x => x = true ∨ x = false)\
  \ :=\n  sorry\n\n\ntheorem exactly_one_true (s : String) :\n  let result := moment_of_time_in_space\
  \ s \n  let count := List.foldl (fun acc b => acc + if b then 1 else 0) 0 result\n\
  \  count = 1 :=\n  sorry\n\n\ntheorem time_space_comparison (s : String) :\n  let\
  \ time := sum_digits s\n  let space := count_non_digits s\n  let result := moment_of_time_in_space\
  \ s\n  (time < space → result = [true, false, false]) ∧\n  (time = space → result\
  \ = [false, true, false]) ∧ \n  (time > space → result = [false, false, true]) :=\n\
  \  sorry\n\n\ntheorem permutation_invariant {s₁ s₂ : String} :\n  s₁.length = s₂.length\
  \ →\n  (∀ c, s₁.find (· = c) = s₂.find (· = c)) →\n  moment_of_time_in_space s₁\
  \ = moment_of_time_in_space s₂ :=\n  sorry\n\n/--\ninfo: [True, False, False]\n\
  -/\n#guard_msgs in\n#eval moment_of_time_in_space \"01:00 pm\"\n\n/--\ninfo: [False,\
  \ True, False]\n-/\n#guard_msgs in\n#eval moment_of_time_in_space \"12:02 pm\"\n\
  \n/--\ninfo: [False, False, True]\n-/\n#guard_msgs in\n#eval moment_of_time_in_space\
  \ \"12:30 pm\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
