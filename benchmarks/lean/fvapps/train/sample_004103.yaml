"vc-description": "**Story**  \nOn some island lives a chameleon population. Chameleons\
  \ here can be of only one of three colors - red, green and blue. Whenever two chameleons\
  \ of different colors meet, they can change their colors to a third one (i.e. when\
  \ red and blue chameleons meet, they can both become green). There is no other way\
  \ for chameleons to change their color (in particular, when red and blue chameleons\
  \ meet, they can't become both red, only third color can be assumed).  \nChameleons\
  \ want to become of one certain color. They may plan they meetings to reach that\
  \ goal. Chameleons want to know, how fast their goal can be achieved (if it can\
  \ be achieved at all).\n\n**Formal problem**  \n*Input:*  \nColor is coded as integer,\
  \ 0 - red, 1 - green, 2 - blue.\nChameleon starting population is given as an array\
  \ of three integers, with index corresponding to color (i.e. [2, 5, 3] means 2 red,\
  \ 5 green and 3 blue chameleons). All numbers are non-negative, their sum is between\
  \ `1` and `int.MaxValue` (maximal possible value for `int` type, in other languages).\
  \ Desired color is given as an integer from 0 to 2.  \n*Output:*  \n`Kata.Chameleon`\
  \ should return *minimal* number of meetings required to change all chameleons to\
  \ a given color, or -1 if it is impossible (for example, if all chameleons are initially\
  \ of one other color).  \n  \n**Notes and hints**  \n-- Some tests use rather big\
  \ input values. Be effective.  \n-- There is a strict proof that answer is either\
  \ -1 or no greater than total number of chameleons (thus, return type `int` is justified).\
  \ Don't worry about overflow.  \n  \n**Credits**  \nKata based on \"Chameleons\"\
  \ puzzle from braingames.ru: http://www.braingames.ru/?path=comments&puzzle=226\
  \ (russian, not translated)."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def chameleon (chameleons : List Nat) (color : Nat) : Int := sorry\n\
  \ntheorem chameleon_result_is_valid \n  (chameleons : List Nat) \n  (color : Nat)\n\
  \  (h1 : chameleons.length = 3)\n  (h2 : color ≤ 2) :\n  let result := chameleon\
  \ chameleons color\n  (result = -1 ∨ result ≥ 0) ∧\n  (result = -1 ∨ \n    ∃ a b\
  \ c : Nat,\n      (a > 0 ∨ c > 0) ∧ \n      (b - a) % 3 = 0 ∧ \n      result = b)\n\
  \  := sorry"
"vc-theorems": "/--\ninfo: -1\n-/\n#guard_msgs in\n#eval chameleon [0, 0, 17] 1\n\n\
  /--\ninfo: 1\n-/\n#guard_msgs in\n#eval chameleon [1, 1, 15] 2\n\n/--\ninfo: 35\n\
  -/\n#guard_msgs in\n#eval chameleon [34, 32, 35] 0\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
