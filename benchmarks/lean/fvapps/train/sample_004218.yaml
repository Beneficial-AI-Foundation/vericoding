vc-description: |-
  Create the function ```consecutive(arr)``` that takes an array of integers and return the minimum number of integers needed to make the contents of ```arr``` consecutive from the lowest number to the highest number.
  For example:  If ```arr``` contains [4, 8, 6] then the output should be 2 because two numbers need to be added to the array (5 and 7) to make it a consecutive array of numbers from 4 to 8. Numbers in ```arr``` will be unique.
vc-preamble: |-
  import Imports.AllImports

  def consecutive (lst : List Int) : Int := sorry

  -- Helper function to find maximum in list

  def listMax : List Int → Int 
    | [] => 0
    | (x::xs) => max x (listMax xs)

  -- Helper function to find minimum in list
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def listMin : List Int → Int
    | [] => 0
    | (x::xs) => min x (listMin xs)
vc-theorems: |-
  theorem consecutive_empty : consecutive [] = 0 := sorry

  theorem consecutive_property {lst : List Int} (h : lst ≠ []) :
    consecutive lst = listMax lst - listMin lst + 1 - lst.length := sorry
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded
