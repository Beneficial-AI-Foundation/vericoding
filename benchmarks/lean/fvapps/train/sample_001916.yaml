"vc-description": "Pikachu had an array with him. He wrote down all the non-empty\
  \ subsequences of the array on paper. Note that an array of size n has 2^{n} - 1\
  \ non-empty subsequences in it. \n\nPikachu being mischievous as he always is, removed\
  \ all the subsequences in which Maximum_element_of_the_subsequence  -  Minimum_element_of_subsequence\
  \  ≥ d\n\nPikachu was finally left with X subsequences. \n\nHowever, he lost the\
  \ initial array he had, and now is in serious trouble. He still remembers the numbers\
  \ X and d. He now wants you to construct any such array which will satisfy the above\
  \ conditions. All the numbers in the final array should be positive integers less\
  \ than 10^18. \n\nNote the number of elements in the output array should not be\
  \ more than 10^4. If no answer is possible, print  - 1.\n\n\n-----Input-----\n\n\
  The only line of input consists of two space separated integers X and d (1 ≤ X,\
  \ d ≤ 10^9).\n\n\n-----Output-----\n\nOutput should consist of two lines.\n\nFirst\
  \ line should contain a single integer n (1 ≤ n ≤ 10 000)— the number of integers\
  \ in the final array.\n\nSecond line should consist of n space separated integers\
  \ — a_1, a_2, ... , a_{n} (1 ≤ a_{i} < 10^18).\n\nIf there is no answer, print a\
  \ single integer -1. If there are multiple answers, print any of them.\n\n\n-----Examples-----\n\
  Input\n10 5\n\nOutput\n6\n5 50 7 15 6 100\nInput\n4 2\n\nOutput\n4\n10 100 1000\
  \ 10000\n\n\n-----Note-----\n\nIn the output of the first example case, the remaining\
  \ subsequences after removing those with Maximum_element_of_the_subsequence  - \
  \ Minimum_element_of_subsequence  ≥ 5 are [5], [5, 7], [5, 6], [5, 7, 6], [50],\
  \ [7], [7, 6], [15], [6], [100]. There are 10 of them. Hence, the array [5, 50,\
  \ 7, 15, 6, 100] is valid.\n\nSimilarly, in the output of the second example case,\
  \ the remaining sub-sequences after removing those with Maximum_element_of_the_subsequence\
  \  -  Minimum_element_of_subsequence  ≥ 2 are [10], [100], [1000], [10000]. There\
  \ are 4 of them. Hence, the array [10, 100, 1000, 10000] is valid."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_pikachu_array (X d : Nat) : Option (List Nat) := sorry\n\
  \ndef binary_ones_count (n : Nat) : Nat := sorry\n"
"vc-theorems": "theorem small_input_bits_bound {X : Nat} (h : 0 < X) (h2 : X ≤ 100)\
  \ : \n  match solve_pikachu_array X 1 with\n  | none => True \n  | some result =>\
  \ \n    let min_bits := if X % 2 = 0 \n                    then binary_ones_count\
  \ X + 1\n                    else binary_ones_count X\n    result.length ≥ min_bits\n\
  \  := sorry\n\n\ntheorem small_input_bounds {X : Nat} (h : 0 < X) (h2 : X ≤ 100)\
  \ :\n  match solve_pikachu_array X 1 with\n  | none => True\n  | some result =>\
  \ \n    (∀ x ∈ result, 0 < x ∧ x < 10^18) ∧\n    result.length ≤ 10000\n  := sorry\n\
  \n\ntheorem output_bounds {X d : Nat} (h1 : 0 < X) (h2 : X ≤ 10^5) \n    (h3 : 0\
  \ < d) (h4 : d ≤ 100) :\n  match solve_pikachu_array X d with\n  | none => True\n\
  \  | some result => \n    (∀ x ∈ result, 0 < x ∧ x < 10^18) ∧ \n    result.length\
  \ ≤ 10000\n  := sorry\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval len solve_pikachu_array(10,\
  \ 5)\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval len solve_pikachu_array(4, 2)\n\n\
  /--\ninfo: 1\n-/\n#guard_msgs in\n#eval len solve_pikachu_array(1, 1)\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
