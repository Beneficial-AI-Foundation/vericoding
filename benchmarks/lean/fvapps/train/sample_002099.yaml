"vc-description": "You are given an array of integers. Vasya can permute (change order)\
  \ its integers. He wants to do it so that as many as possible integers will become\
  \ on a place where a smaller integer used to stand. Help Vasya find the maximal\
  \ number of such integers.\n\nFor instance, if we are given an array $[10, 20, 30,\
  \ 40]$, we can permute it so that it becomes $[20, 40, 10, 30]$. Then on the first\
  \ and the second positions the integers became larger ($20>10$, $40>20$) and did\
  \ not on the third and the fourth, so for this permutation, the number that Vasya\
  \ wants to maximize equals $2$. Read the note for the first example, there is one\
  \ more demonstrative test case.\n\nHelp Vasya to permute integers in such way that\
  \ the number of positions in a new array, where integers are greater than in the\
  \ original one, is maximal.\n\n\n-----Input-----\n\nThe first line contains a single\
  \ integer $n$ ($1 \\leq n \\leq 10^5$) — the length of the array.\n\nThe second\
  \ line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$) —\
  \ the elements of the array.\n\n\n-----Output-----\n\nPrint a single integer — the\
  \ maximal number of the array's elements which after a permutation will stand on\
  \ the position where a smaller element stood in the initial array.\n\n\n-----Examples-----\n\
  Input\n7\n10 1 1 1 5 5 3\n\nOutput\n4\n\nInput\n5\n1 1 1 1 1\n\nOutput\n0\n\n\n\n\
  -----Note-----\n\nIn the first sample, one of the best permutations is $[1, 5, 5,\
  \ 3, 10, 1, 1]$. On the positions from second to fifth the elements became larger,\
  \ so the answer for this permutation is 4.\n\nIn the second sample, there is no\
  \ way to increase any element with a permutation, so the answer is 0."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_permutation (n : Nat) (arr : List Nat) : Nat := sorry\
  \ \n\ntheorem permutation_result_nonnegative (n : Nat) (arr : List Nat) :\n  solve_permutation\
  \ n arr ≥ 0 := sorry\n"
"vc-theorems": "theorem permutation_result_bounded (n : Nat) (arr : List Nat) :\n\
  \  solve_permutation n arr ≤ arr.length := sorry\n\n\n\n\ntheorem single_element_zero\
  \ (x : Nat) :\n  solve_permutation 1 [x] = 0 := sorry\n\n/--\ninfo: 4\n-/\n#guard_msgs\
  \ in\n#eval solve_permutation 7 [10, 1, 1, 1, 5, 5, 3]\n\n/--\ninfo: 0\n-/\n#guard_msgs\
  \ in\n#eval solve_permutation 5 [1, 1, 1, 1, 1]\n\n/--\ninfo: 3\n-/\n#guard_msgs\
  \ in\n#eval solve_permutation 6 [300000000, 200000000, 300000000, 200000000, 1000000000,\
  \ 300000000]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded_and_plausible"
