"vc-description": "*This kata is inspired by [Project Euler Problem #387](https://projecteuler.net/problem=387)*\n\
  \n---\n\nA [Harshad number](https://en.wikipedia.org/wiki/Harshad_number) (or Niven\
  \ number) is a number that is divisible by the sum of its digits. A *right truncatable\
  \ Harshad number* is any Harshad number that, when recursively right-truncated,\
  \ results in a Harshad number at each truncation. By definition, 1-digit numbers\
  \ are **not** right truncatable Harshad numbers.\n\nFor example `201` (which is\
  \ a Harshad number) yields `20`, then `2` when right-truncated, which are all Harshad\
  \ numbers. Thus `201` is a *right truncatable Harshad number*.\n\n\n## Your task\n\
  \nGiven a range of numbers (`(a, b)`, both included), return the list of right truncatable\
  \ Harshad numbers in this range.\n\n```if-not:javascript\nNote: there are `500`\
  \ random tests, with 0 <= `a` <= `b` <= 10^(16)\n```\n```if:javascript\nNote: there\
  \ are `500` random tests, with `0 <= a <= b <= Number.MAX_SAFE_INTEGER`\n```\n\n\
  ## Examples\n\n```\n0, 20        -->  [10, 12, 18, 20]\n30, 100      -->  [30, 36,\
  \ 40, 42, 45, 48, 50, 54, 60, 63, 70, 72, 80, 81, 84, 90, 100]\n90, 200      -->\
  \  [90, 100, 102, 108, 120, 126, 180, 200]\n200, 210     -->  [200, 201, 204, 207,\
  \ 209, 210]\n1000, 2000   -->  [1000, 1002, 1008, 1020, 1026, 1080, 1088, 1200,\
  \ 1204, 1206, 1260, 1800, 2000]\n2200, 2300   -->  []\n9000002182976, 9000195371842\
  \  -->  [9000004000000, 9000004000008]\n```\n\n---\n\n## My other katas\n\nIf you\
  \ enjoyed this kata then please try [my other katas](https://www.codewars.com/collections/katas-created-by-anter69)!\
  \ :-)\n\n#### *Translations are welcome!*"
"vc-preamble": "import Imports.AllImports\n\ndef sumOfDigits (n : Nat) : Nat :=\n\
  \  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def rthn_between (a b : Int) : List Int :=\n  sorry\n"
"vc-theorems": "theorem rthn_between_ordered_bounds {a b : Int} (h : a ≤ b) (h₁ :\
  \ 0 ≤ a) (h₂ : b ≤ 10000) :\n  let result := rthn_between a b\n  -- Result is sorted\n\
  \  (∀ i j, i < j → i < List.length result → j < List.length result → \n    result[i]!\
  \ ≤ result[j]!) ∧\n  -- All numbers within bounds\n  (∀ x ∈ result, a ≤ x ∧ x ≤\
  \ b) ∧\n  -- Each number divisible by sum of its digits\n  (∀ x ∈ result, x % sumOfDigits\
  \ (Int.toNat x) = 0) :=\n  sorry\n\n\ntheorem rthn_between_same_bounds {n : Int}\
  \ (h : 0 ≤ n) (h₁ : n ≤ 10000) :\n  let result := rthn_between n n\n  (result ≠\
  \ [] → \n    List.length result = 1 ∧\n    result[0]! = n ∧ \n    n % sumOfDigits\
  \ (Int.toNat n) = 0) :=\n  sorry\n\n\ntheorem rthn_between_inverted_bounds {n :\
  \ Int} (h : 0 ≤ n) (h₁ : n ≤ 10000) :\n  rthn_between n (n-1) = [] :=\n  sorry\n\
  \n\ntheorem rthn_between_edge_cases :\n  (rthn_between 0 0 = []) ∧\n  (rthn_between\
  \ (-1) 10 = [10]) :=\n  sorry\n\n/--\ninfo: [10, 12, 18, 20]\n-/\n#guard_msgs in\n\
  #eval rthn_between 0 20\n\n/--\ninfo: [200, 201, 204, 207, 209, 210]\n-/\n#guard_msgs\
  \ in\n#eval rthn_between 200 210\n\n/--\ninfo: []\n-/\n#guard_msgs in\n#eval rthn_between\
  \ 2200 2300\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
