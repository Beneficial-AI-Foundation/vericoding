"vc-description": "Given a positive integer n, break it into the sum of at least two\
  \ positive integers and maximize the product of those integers. Return the maximum\
  \ product you can get.\n\n\n\nFor example, given n = 2, return 1 (2 = 1 + 1); given\
  \ n = 10, return 36 (10 = 3 + 3 + 4).\n\n\n\nNote: You may assume that n is not\
  \ less than 2 and not larger than 58.\n\n\nCredits:Special thanks to @jianchao.li.fighter\
  \ for adding this problem and creating all test cases."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def integerBreak (n : Nat) : Nat := sorry\n\ntheorem integerBreak_positive\
  \ (n : Nat) (h : n ≥ 2) : \n  integerBreak n > 0 := sorry\n"
"vc-theorems": "theorem integerBreak_geq_n (n : Nat) (h : n ≥ 4) :\n  integerBreak\
  \ n ≥ n := sorry\n\n\ntheorem integerBreak_2 :\n  integerBreak 2 = 1 := sorry \n\
  \n\ntheorem integerBreak_3 :\n  integerBreak 3 = 2 := sorry\n\n\ntheorem integerBreak_better_than_naive_split\
  \ (n : Nat) (h : n ≥ 4) :\n  integerBreak n ≥ 2^(n/2) * (if n % 2 = 0 then 1 else\
  \ n % 2) := sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval integer_break 2\n\n\
  /--\ninfo: 36\n-/\n#guard_msgs in\n#eval integer_break 10\n\n/--\ninfo: 18\n-/\n\
  #guard_msgs in\n#eval integer_break 8\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
