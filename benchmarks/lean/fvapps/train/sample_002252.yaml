"vc-description": "Fox Ciel wants to write a task for a programming contest. The task\
  \ is: \"You are given a simple undirected graph with n vertexes. Each its edge has\
  \ unit length. You should calculate the number of shortest paths between vertex\
  \ 1 and vertex 2.\"\n\nSame with some writers, she wants to make an example with\
  \ some certain output: for example, her birthday or the number of her boyfriend.\
  \ Can you help her to make a test case with answer equal exactly to k?\n\n\n-----Input-----\n\
  \nThe first line contains a single integer k (1 ≤ k ≤ 10^9).\n\n\n-----Output-----\n\
  \nYou should output a graph G with n vertexes (2 ≤ n ≤ 1000). There must be exactly\
  \ k shortest paths between vertex 1 and vertex 2 of the graph.\n\nThe first line\
  \ must contain an integer n. Then adjacency matrix G with n rows and n columns must\
  \ follow. Each element of the matrix must be 'N' or 'Y'. If G_{ij} is 'Y', then\
  \ graph G has a edge connecting vertex i and vertex j. Consider the graph vertexes\
  \ are numbered from 1 to n.\n\nThe graph must be undirected and simple: G_{ii} =\
  \ 'N' and G_{ij} = G_{ji} must hold. And there must be at least one path between\
  \ vertex 1 and vertex 2. It's guaranteed that the answer exists. If there multiple\
  \ correct answers, you can output any of them. \n\n\n-----Examples-----\nInput\n\
  2\nOutput\n4\nNNYY\nNNYY\nYYNN\nYYNN\nInput\n9\nOutput\n8\nNNYYYNNN\nNNNNNYYY\n\
  YNNNNYYY\nYNNNNYYY\nYNNNNYYY\nNYYYYNNN\nNYYYYNNN\nNYYYYNNN\nInput\n1\nOutput\n2\n\
  NY\nYN\n\n\n-----Note-----\n\nIn first example, there are 2 shortest paths: 1-3-2\
  \ and 1-4-2.\n\nIn second example, there are 9 shortest paths: 1-3-6-2, 1-3-7-2,\
  \ 1-3-8-2, 1-4-6-2, 1-4-7-2, 1-4-8-2, 1-5-6-2, 1-5-7-2, 1-5-8-2."
"vc-preamble": "import Imports.AllImports\n\ndef Matrix := List (List Char)\n\ndef\
  \ is_valid_adjacency_matrix (m: Matrix) : Bool :=\nsorry\n\n\ndef is_symmetric (m:\
  \ Matrix) : Bool :=\nsorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def generate_graph (k: Nat) : Nat × Matrix :=\nsorry\n"
"vc-theorems": "theorem generated_graph_is_valid (k: Nat) : \n  let (n, matrix) :=\
  \ generate_graph k;\n  is_valid_adjacency_matrix matrix = true :=\nsorry\n\n\ntheorem\
  \ generated_graph_is_symmetric (k: Nat) :\n  let (n, matrix) := generate_graph k;\n\
  \  is_symmetric matrix = true :=\nsorry\n\n\ntheorem size_properties (k: Nat) :\n\
  \  let (n, matrix) := generate_graph k;\n  n ≤ 4 * k ∧                         \
  \     \n  matrix.length = n ∧                    \n  List.all matrix (fun row =>\
  \ row.length = n) :=\nsorry"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded"
