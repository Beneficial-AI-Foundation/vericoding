"vc-description": "Given a set of elements (integers or string characters) that may\
  \ occur more than once, we need to know the amount of subsets that none of their\
  \ values have repetitions.\nLet's see with an example:\n``` \nset numbers = {1,\
  \ 2, 3, 4}\n``` \nThe subsets are:\n``` \n{{1}, {2}, {3}, {4}, {1,2}, {1,3}, {1,4},\
  \ {2,3}, {2,4},{3,4}, {1,2,3}, {1,2,4}, {1,3,4}, {2,3,4}, {1,2,3,4}} (15 subsets,\
  \ as you can see the empty set, {}, is not counted)\n``` \nLet's see an example\
  \ with repetitions of an element:\n```\nset letters= {a, b, c, d, d}\n```\nThe subsets\
  \ for this case will be:\n```\n{{a}, {b}, {c}, {d}, {a,b}, {a,c}, {a,d}, {b,c},\
  \ {b,d},{c,d}, {a,b,c}, {a,b,d}, {a,c,d}, {b,c,d}, {a,b,c,d}} (15 subsets, only\
  \ the ones that have no repeated elements inside)\n```\n\nThe function ```est_subsets()```\
  \ (javascript: ``estSubsets()```) will calculate the number of these subsets.\n\
  It will receive the array as an argument and according to its features will output\
  \ the amount of different subsets without repetitions of its elements.\n```python\n\
  est_subsets([1, 2, 3, 4]) == 15\nest_subsets(['a', 'b', 'c', 'd', 'd']) == 15\n\
  ```\nFeatures of the random tests:\n```\nLow Performance Tests: 40\nLength of the\
  \ arrays between 6 and 15\n\nHigh Performance Tests: 80\nLength of the arrays between\
  \ 15 and 100 (Python an Ruby) and between 15 and 50 javascript)\n```\nJust do it!"
"vc-preamble": "import Imports.AllImports\n\ndef est_subsets {α : Type} [BEq α] [Hashable\
  \ α] (arr : List α) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def list_unique_count {α : Type} [BEq α] [Hashable α] (arr : List\
  \ α) : Nat :=\n  sorry\n"
"vc-theorems": "theorem est_subsets_count_prop {α : Type} [BEq α] [Hashable α] (arr\
  \ : List α) :\n  est_subsets arr = 2^(list_unique_count arr) - 1 :=\n  sorry\n\n\
  \ntheorem est_subsets_nonneg {α : Type} [BEq α] [Hashable α] (arr : List α) :\n\
  \  est_subsets arr ≥ 0 :=\n  sorry\n\n\ntheorem est_subsets_empty {α : Type} [BEq\
  \ α] [Hashable α] :\n  est_subsets ([] : List α) = 0 :=\n  sorry\n\n\ntheorem est_subsets_duplicates\
  \ {α : Type} [BEq α] [Hashable α] (arr : List α) :\n  est_subsets arr = est_subsets\
  \ (arr ++ arr) :=\n  sorry\n\n\ntheorem est_subsets_is_nat {α : Type} [BEq α] [Hashable\
  \ α] (arr : List α) :\n  est_subsets arr = 2^(list_unique_count arr) - 1 :=\n  sorry\n\
  \n/--\ninfo: 15\n-/\n#guard_msgs in\n#eval est_subsets [1, 2, 3, 4]\n\n/--\ninfo:\
  \ 15\n-/\n#guard_msgs in\n#eval est_subsets [\"a\", \"b\", \"c\", \"d\", \"d\"]\n\
  \n/--\ninfo: 15\n-/\n#guard_msgs in\n#eval est_subsets [1, 2, 2, 3, 3, 3, 4]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
