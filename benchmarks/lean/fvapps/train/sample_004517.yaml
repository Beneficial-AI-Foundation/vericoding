"vc-description": "We'll create a function that takes in two parameters:\n\n* a sequence\
  \ (length and types of items are irrelevant)\n* a function (value, index) that will\
  \ be called on members of the sequence and their index. The function will return\
  \ either true or false.\n\nYour function will iterate through the members of the\
  \ sequence in order until the provided function returns true; at which point your\
  \ function will return that item's **index**. \n\nIf the function given returns\
  \ false for all members of the sequence, your function should return -1.\n\n```python\n\
  true_if_even = lambda value, index: value % 2 == 0\nfind_in_array([1,3,5,6,7], true_if_even)\
  \ # --> 3\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_in_array {α : Type} [Inhabited α] (arr : List α) (pred\
  \ : α → Nat → Bool) : Int := sorry\n\ntheorem find_specific_value {α : Type} [Inhabited\
  \ α] [BEq α] (arr : List α) (target : α) :\n  let result := find_in_array arr (fun\
  \ x _ => x == target)\n  result ≠ -1 → (result.toNat < arr.length ∧ arr[result.toNat]!\
  \ = target) ∧\n  result = -1 → ∀ x ∈ arr, x ≠ target := sorry\n"
"vc-theorems": "theorem find_at_index {α : Type} [Inhabited α] (arr : List α) (index\
  \ : Nat) :\n  let result := find_in_array arr (fun _ i => i == index)\n  result\
  \ ≠ -1 → result.toNat = index ∧\n  result = -1 → index ≥ arr.length := sorry\n\n\
  \ntheorem first_match_returned {α : Type} [Inhabited α] (arr : List α) :\n  let\
  \ result := find_in_array arr (fun _ _ => true)\n  (arr.length > 0 → result = 0)\
  \ ∧\n  (arr.length = 0 → result = -1) := sorry\n\n\ntheorem no_match_returns_negative\
  \ {α : Type} [Inhabited α] (arr : List α) :\n  find_in_array arr (fun _ _ => false)\
  \ = -1 := sorry\n\n\ntheorem index_matches_value [Inhabited Int] (arr : List Int)\
  \ :\n  let result := find_in_array arr (fun x i => x.toNat = i)\n  result ≠ -1 →\
  \ arr[result.toNat]!.toNat = result.toNat ∧\n  result = -1 → ∀ (i : Nat), i < arr.length\
  \ → arr[i]!.toNat ≠ i := sorry\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval find_in_array\
  \ [1, 3, 5, 6, 7] lambda value, index: value % 2 == 0\n\n/--\ninfo: -1\n-/\n#guard_msgs\
  \ in\n#eval find_in_array [1, 2, 3, 4, 5] lambda value, index: value == 10\n\n/--\n\
  info: 2\n-/\n#guard_msgs in\n#eval find_in_array [5, 4, 2, 3, 4] lambda value, index:\
  \ value == index\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
