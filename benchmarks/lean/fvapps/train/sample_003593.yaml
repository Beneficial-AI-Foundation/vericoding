"vc-description": "# Do you ever wish you could talk like Siegfried of KAOS ?\n\n\
  ## YES, of course you do!\n\nhttps://en.wikipedia.org/wiki/Get_Smart\n\n\n\n# Task\n\
  \nWrite the function ```siegfried``` to replace the letters of a given sentence.\n\
  \nApply the rules using the course notes below. Each week you will learn some more\
  \ rules.\n\nUnd by ze fifz vek yu vil be speakink viz un aksent lik Siegfried viz\
  \ no trubl at al!\n\n\n# Lessons\n\n## Week 1\n\n* ```ci``` -> ```si```\n* ```ce```\
  \ -> ```se```\n* ```c``` -> ```k``` (except ```ch``` leave alone)\n\n## Week 2\n\
  \n* ```ph``` -> ```f```\n\n## Week 3\n\n* remove trailing ```e``` (except for all\
  \ 2 and 3 letter words)\n* replace double letters with single letters (e.g. ```tt```\
  \ -> ```t```)\n\n## Week 4\n\n* ```th``` -> ```z```\n* ```wr``` -> ```r```\n* ```wh```\
  \ -> ```v```\n* ```w``` -> ```v```\n\n## Week 5\n\n* ```ou``` -> ```u```\n* ```an```\
  \ -> ```un```\n* ```ing``` -> ```ink``` (but only when ending words)\n* ```sm```\
  \ -> ```schm``` (but only when beginning words)\n\n\n\n# Notes\n\n* You must retain\
  \ the case of the original sentence\n* Apply rules strictly in the order given above\n\
  * Rules are cummulative. So for week 3 first apply week 1 rules, then week 2 rules,\
  \ then week 3 rules"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def Char.isAscii (c : Char) : Bool := sorry\n\ndef siegfried (week\
  \ : Nat) (text : String) : String := sorry\n"
"vc-theorems": "theorem siegfried_length (week : Nat) (text : String) \n  (h1 : week\
  \ ≤ 5) (h2 : text.length > 0) : \n  (siegfried week text).length ≤ text.length :=\
  \ sorry\n\n\ntheorem siegfried_consistent (text : String) (h : text.length > 0)\
  \ :\n  siegfried 5 text = siegfried 5 text := sorry\n\n\ntheorem siegfried_idempotent\
  \ (week : Nat) (text : String) \n  (h1 : week ≤ 5) (h2 : text.length > 0) :\n  siegfried\
  \ week (siegfried week text) = siegfried week text := sorry\n\n\ntheorem siegfried_week_0\
  \ (text : String) (h : text.length > 0) :\n  siegfried 0 text = text := sorry\n\n\
  \ntheorem siegfried_c_replacement (text : String) \n  (h1 : text.length > 0)\n \
  \ (h2 : ∀ c ∈ text.data, c = 'c' ∨ c = 'C') :\n  let result := siegfried 1 text\n\
  \  (∀ c ∈ result.data, c.toLower ≠ 'c') ∧\n  (∃ c ∈ result.data, c.toLower = 'k')\
  \ := sorry\n\n/--\ninfo: 'Sity sivilians'\n-/\n#guard_msgs in\n#eval siegfried 1\
  \ \"City civilians\"\n\n/--\ninfo: 'Met me at the sam plas at non'\n-/\n#guard_msgs\
  \ in\n#eval siegfried 3 \"Meet me at the same place at noon\"\n\n/--\ninfo: 'Schmart\
  \ und 99 ver husbund und vif'\n-/\n#guard_msgs in\n#eval siegfried 5 \"Smart and\
  \ 99 were husband and wife\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
