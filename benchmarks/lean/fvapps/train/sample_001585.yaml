"vc-description": "You are given 2 numbers is `n` and `k`. You need to find the number\
  \ of integers between 1 and n (inclusive) that contains exactly `k` non-zero digit.\n\
  \nExample1 \n\n`\nalmost_everywhere_zero(100, 1) return 19`\n\nby following condition\
  \ we have 19 numbers that have k = 1 digits( not count zero ) \n` [1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100]`\n\
  \n\nExample2  \n\n`\nalmost_everywhere_zero(11, 2) return 1`\n\nwe have only `11`\
  \ that has 2 digits(ten not count because zero is not count) \n` 11`\n\n\n\n\n\n\
  constrains\n\n\n`1≤n<pow(10,100)`\n\n\n`1≤k≤100`"
"vc-preamble": "import Imports.AllImports\n\ndef almost_everywhere_zero (n : Nat)\
  \ (k : Nat) : Nat :=\n  sorry\n\n\ndef comb (n : Nat) (k : Nat) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def num_digits (n : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem aez_valid_inputs (n : Nat) (k : Nat) :\n  let result := almost_everywhere_zero\
  \ n k\n  result ≥ 0 :=\nsorry\n\n\ntheorem aez_zero_k (n : Nat) (h : n > 0) :\n\
  \  almost_everywhere_zero n 0 = 1 :=\nsorry\n\n\ntheorem aez_k_greater_than_digits\
  \ (n : Nat) (k : Nat) (h1 : n > 0) (h2 : k > num_digits n) :\n  almost_everywhere_zero\
  \ n k = 0 :=\nsorry\n\n\ntheorem comb_properties (n k : Nat) :\n  let result :=\
  \ comb n k\n  (k > n → result = 0) ∧\n  ((k = 0 ∨ k = n) → result ≤ 1) ∧\n  (k ≤\
  \ n → comb n k = comb n (n-k)) :=\nsorry\n\n\ntheorem aez_single_nonzero (n : Nat)\
  \ (h : n > 0) :\n  almost_everywhere_zero n 1 ≥ num_digits n :=\nsorry\n\n/--\n\
  info: 19\n-/\n#guard_msgs in\n#eval almost_everywhere_zero 100 1\n\n/--\ninfo: 1\n\
  -/\n#guard_msgs in\n#eval almost_everywhere_zero 11 2\n\n/--\ninfo: 9\n-/\n#guard_msgs\
  \ in\n#eval almost_everywhere_zero 20 2\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
