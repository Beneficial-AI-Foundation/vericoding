"vc-description": "Here's a way to construct a list containing every positive rational\
  \ number:\n\nBuild a binary tree where each node is a rational and the root is `1/1`,\
  \ with the following rules for creating the nodes below:\n* The value of the left-hand\
  \ node below `a/b` is `a/a+b`\n* The value of the right-hand node below `a/b` is\
  \ `a+b/b`\n\nSo the tree will look like this:\n\n```\n                       1/1\n\
  \                  /           \\ \n            1/2                  2/1\n     \
  \      /    \\              /     \\\n       1/3        3/2        2/3       3/1\n\
  \      /   \\      /   \\      /   \\     /   \\\n   1/4    4/3  3/5   5/2  2/5\
  \   5/3  3/4   4/1\n \n ...\n```\n\nNow traverse the tree, breadth first, to get\
  \ a list of rationals.\n\n```\n[ 1/1, 1/2, 2/1, 1/3, 3/2, 2/3, 3/1, 1/4, 4/3, 3/5,\
  \ 5/2, .. ]\n```\n\nEvery positive rational will occur, in its reduced form, exactly\
  \ once in the list, at a finite index.\n\n```if:haskell\nIn the kata, we will use\
  \ tuples of type `(Integer, Integer)` to represent rationals, where `(a, b)` represents\
  \ `a / b`\n```\n```if:javascript\nIn the kata, we will use tuples of type `[ Number,\
  \ Number ]` to represent rationals, where `[a,b]` represents `a / b`\n```\n\nUsing\
  \ this method you could create an infinite list of tuples:\n\nmatching the list\
  \ described above:\n\nHowever, constructing the actual list is too slow for our\
  \ purposes. Instead, study the tree above, and write two functions:\n\nFor example:"
"vc-preamble": "import Imports.AllImports\n\ndef gcd (x y : Nat) : Nat :=\n  sorry\n\
  \n\ndef coprime (x y : Nat) : Prop :=\n  gcd x y = 1\n\n\ndef rat_at (n : Nat) :\
  \ Nat × Nat := \n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def index_of (a b : Nat) : Nat :=\n  sorry\n\n\n\n\n"
"vc-theorems": "theorem rat_at_index_inverse (n : Nat) :\n  let (a, b) := rat_at n\n\
  \  index_of a b = n :=\n  sorry\n\n\ntheorem base_cases :\n  rat_at 0 = (1, 1) ∧\
  \ \n  index_of 1 1 = 0 :=\n  sorry\n\n/--\ninfo: (1, 1)\n-/\n#guard_msgs in\n#eval\
  \ rat_at 0\n\n/--\ninfo: (1, 3)\n-/\n#guard_msgs in\n#eval rat_at 3\n\n/--\ninfo:\
  \ (3, 2)\n-/\n#guard_msgs in\n#eval rat_at 4\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n\
  #eval index_of 1 1\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
