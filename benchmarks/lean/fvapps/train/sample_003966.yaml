"vc-description": "The goal of this Kata is to return the greatest distance of index\
  \ positions between matching number values in an array or 0 if there are no matching\
  \ values.  \n\nExample:\nIn an array with the values [0, 2, 1, 2, 4, 1] the greatest\
  \ index distance is between the matching '1' values at index 2 and 5.  Executing\
  \ greatestDistance against this array would return 3. (i.e. 5 - 2)  \n\nHere's the\
  \ previous example in test form:\n```python\ntest.assert_equals(greatest_distance([0,\
  \ 2, 1, 2, 4, 1]), 3)\n```\n\nThis is based on a Kata I had completed only to realize\
  \ I has misread the instructions.  I enjoyed solving the problem I thought it was\
  \ asking me to complete so I thought I'd add a new Kata for others to enjoy.  There\
  \ are no tricks in this one, good luck!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def greatest_distance (lst: List Int) : Nat :=\n  sorry\n"
"vc-theorems": "theorem greatest_distance_nonnegative (lst: List Int) : \n  greatest_distance\
  \ lst ≥ 0 :=\nsorry\n\n\n\n\ntheorem greatest_distance_duplicate_lower_bound {lst\
  \ : List Int} {i j : Nat} : \n  i < j → j < lst.length → \n  (h1 : i < lst.length)\
  \ → (h2 : j < lst.length) →\n  lst.get ⟨i, h1⟩ = lst.get ⟨j, h2⟩ → \n  greatest_distance\
  \ lst ≥ j - i :=\nsorry\n\n\ntheorem greatest_distance_unique_list {lst : List Int}\
  \ : \n  lst.Nodup → greatest_distance lst = 0 :=\nsorry\n\n\ntheorem greatest_distance_repeated_element\
  \ (x : Int) :\n  greatest_distance [x, x, x] = 2 :=\nsorry\n\n/--\ninfo: 4\n-/\n\
  #guard_msgs in\n#eval greatest_distance [9, 7, 1, 2, 3, 7, 0, -1, -2]\n\n/--\ninfo:\
  \ 6\n-/\n#guard_msgs in\n#eval greatest_distance [0, 7, 0, 2, 3, 7, 0, -1, -2]\n\
  \n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval greatest_distance [1, 2, 3, 4]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
