"vc-description": "# Task\n A lock has `n` buttons in it, numbered from `1 to n`.\
  \ To open the lock, you have to press all buttons in some order, i.e. a key to the\
  \ lock is a permutation of the first `n` integers. If you push the right button\
  \ in the right order, it will be pressed into the lock. Otherwise all pressed buttons\
  \ will pop out. When all buttons are pressed into the lock, it opens.\n \n Your\
  \ task is to calculate the number of times you've got to push buttons in order to\
  \ open the lock in the `worst-case scenario`.\n\n# Example\n\n For `n = 3`, the\
  \ result should be `7`.\n ```\n Let's assume the right order is 3-2-1.\n In the\
  \ worst-case scenario, we press the buttons:\n Press 1, wrong, button 1 pop out\n\
  \ Press 2, wrong, button 2 pop out\n Press 3, right, button 3 pressed in\n Press\
  \ 1, wrong, button 1,3 pop out\n Press 3, right, button 3 pressed in\n Press 2,\
  \ right, button 2 pressed in\n Press 1, right, button 1 pressed in\n We pressed\
  \ button total 7 times.``` \n \n For `n = 4`, the result should be `14`.\n ```\n\
  \ Let's assume the right order is 4-3-2-1.\n In the worst-case scenario, we press\
  \ the buttons:\n Press 1, wrong, button 1 pop out\n Press 2, wrong, button 2 pop\
  \ out\n Press 3, wrong, button 3 pop out\n Press 4, right, button 4 pressed in\n\
  \ Press 1, wrong, button 1,4 pop out\n Press 4, right, button 4 pressed in\n Press\
  \ 2, wrong, button 2,4 pop out\n Press 4, right, button 4 pressed in\n Press 3,\
  \ right, button 3 pressed in\n Press 1, wrong, button 1,3,4 pop out\n Press 4, right,\
  \ button 4 pressed in\n Press 3, right, button 3 pressed in\n Press 2, right, button\
  \ 2 pressed in\n Press 1, right, button 1 pressed in\n We pressed button total 14\
  \ times.``` \n\n# Input/Output\n\n\n - `[input]` integer `n`\n\n  The number of\
  \ buttons in the lock.\n  \n  `0 < n ≤ 2000`\n\n\n - `[output]` an integer\n\n The\
  \ number of times you've got to push buttons in the `worst-case scenario`."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def press_button (n : Int) : Int := sorry \n\ntheorem press_button_positive_bounds\
  \ {n : Int} (h : n > 0) (h2 : n ≤ 1000) :\n  press_button n ≥ 0 ∧ press_button n\
  \ ≤ n * n * n := sorry\n"
"vc-theorems": "theorem press_button_non_positive (n : Int) (h : n ≤ 0) :\n  press_button\
  \ n = (n * n + 5) * n / 6 := sorry\n\n\ntheorem press_button_fixed_points :\n  press_button\
  \ 0 = 0 ∧ press_button 1 = 1 := sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval\
  \ press_button 1\n\n/--\ninfo: 7\n-/\n#guard_msgs in\n#eval press_button 3\n\n/--\n\
  info: 14\n-/\n#guard_msgs in\n#eval press_button 4\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
