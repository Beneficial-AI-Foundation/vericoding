"vc-description": "Given a string and an array of index numbers, return the characters\
  \ of the string rearranged to be in the order specified by the accompanying array.\n\
  \nEx:\n\nscramble('abcd', [0,3,1,2]) -> 'acdb' \n\nThe string that you will be returning\
  \ back will have: 'a' at index 0, 'b' at index 3, 'c' at index 1, 'd' at index 2,\
  \ because the order of those characters maps to their corisponding numbers in the\
  \ index array. \n\n\nIn other words, put the first character in the string at the\
  \ index described by the first element of the array\n\n\n\nYou can assume that you\
  \ will be given a string and array of equal length and both containing valid characters\
  \ (A-Z, a-z, or 0-9)."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def scramble (text : String) (indices : List Int) : String := sorry\n\
  \ntheorem scramble_length_preserved \n  (text : String) \n  (indices : List Int)\
  \ \n  (h1 : text.length > 0) :\n  (scramble text indices).length = text.length :=\
  \ sorry\n"
"vc-theorems": "theorem scramble_chars_same_sorted\n  (text : String)\n  (indices\
  \ : List Int)\n  (h1 : text.length > 0) :\n  String.toList (scramble text indices)\
  \ = String.toList text := sorry\n\n/--\ninfo: 'acdb'\n-/\n#guard_msgs in\n#eval\
  \ scramble \"abcd\" [0, 3, 1, 2]\n\n/--\ninfo: 'c0s3s1'\n-/\n#guard_msgs in\n#eval\
  \ scramble \"sc301s\" [4, 0, 3, 1, 5, 2]\n\n/--\ninfo: '5sblk'\n-/\n#guard_msgs\
  \ in\n#eval scramble \"bskl5\" [2, 1, 4, 3, 0]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
