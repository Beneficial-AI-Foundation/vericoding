"vc-description": "# Task\n\nThe game starts with `n` people standing in a circle.\
  \ The presenter counts `m` people starting with the first one, and gives `1` coin\
  \ to each of them. The rest of the players receive `2` coins each. After that, the\
  \ last person who received `1` coin leaves the circle, giving everything he had\
  \ to the next participant (who will also be considered \"the first in the circle\"\
  \ in the next round). This process continues until only 1 person remains.\n\nDetermine\
  \ the `number` of this person and how many `coins` he has at the end of the game.\n\
  \nThe result should be a pair of values in the format: `[person, coins]`.\n\n##\
  \ Example:\n\n```\nn = 8, m = 3\n\nPeople\n1 2 3      1 2 ∙      1 2 ∙      ∙ 2\
  \ ∙       ∙  2 ∙       ∙ ∙  ∙       ∙ ∙  ∙\n8   4  =>  8   4  =>  8   4  =>  8 \
  \  4  =>   8    4  =>   8    4  =>   ∙    4  =>  7\n7 6 5      7 6 5      7 ∙ 5\
  \      7 ∙ 5       7  ∙ ∙       7 ∙  ∙       7 ∙  ∙\n\nCoins\n0 0 0      1 1 ∙ \
  \     3 3 ∙      ∙ 9 ∙       ∙ 10 ∙       ∙ ∙  ∙       ∙ ∙  ∙   \n0   0  =>  2 \
  \  3  =>  4   4  =>  5   6  =>   7    7  =>   8   20  =>   ∙   30  =>  51\n0 0 0\
  \      2 2 2      7 ∙ 3      8 ∙ 5      16 ∙  ∙      17 ∙  ∙      18 ∙  ∙ \n```\n\
  \n## Notes:\n\n* The presenter can do several full circles during one counting.\n\
  * In this case, the same person will receive `1` coin multiple times, i.e. no matter\
  \ how many people are left in the circle, at least `m` coins will always be distributed\
  \ among the participants during the round.\n* If a person had already received `1`\
  \ coin (possibly multiple times), he won't receive any additional `2` coins **at\
  \ once(!)** during that round.\n* People are counted starting with `1`.\n* `m` can\
  \ be **bigger** than `n` at start"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_last (n m : Nat) : Nat × Nat := sorry\n\ntheorem result_format\
  \ {n m : Nat} (hn : n ≥ 2) (hm : m ≥ 1) :\n  let (player, coins) := find_last n\
  \ m\n  player ≥ 1 ∧ player ≤ n ∧ coins ≥ 0 := sorry\n"
"vc-theorems": "theorem m_equals_one {n : Nat} (hn : n ≥ 2) :\n  (find_last n 1).1\
  \ = n := sorry\n\n\ntheorem coins_increase {n1 n2 m : Nat} (h1 : n1 ≥ 2) (h2 : n2\
  \ > n1) (hm : m ≥ 1) :\n  (find_last n1 m).2 < (find_last n2 m).2 := sorry\n\n/--\n\
  info: (5, 24)\n-/\n#guard_msgs in\n#eval find_last 5 1\n\n/--\ninfo: (7, 51)\n-/\n\
  #guard_msgs in\n#eval find_last 8 3\n\n/--\ninfo: (35, 4238)\n-/\n#guard_msgs in\n\
  #eval find_last 75 34\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
