vc-description: |-
  For a pole vaulter, it is very important to begin the approach run at the best possible starting mark. This is affected by numerous factors and requires fine-tuning in practice. But there is a guideline that will help a beginning vaulter start at approximately the right location for the so-called "three-step approach," based on the vaulter's body height.

  This guideline was taught to me in feet and inches, but due to the international nature of Codewars, I am creating this kata to use metric units instead.

  You are given the following two guidelines to begin with:
  (1) A vaulter with a height of 1.52 meters should start at 9.45 meters on the runway.
  (2) A vaulter with a height of 1.83 meters should start at 10.67 meters on the runway.

  You will receive a vaulter's height in meters (which will always lie in a range between a minimum of 1.22 meters and a maximum of 2.13 meters). Your job is to return the best starting mark in meters, rounded to two decimal places.

  Hint: Based on the two guidelines given above, you will want to account for the change in starting mark per change in body height. This involves a linear relationship. But there is also a constant offset involved. If you can determine the rate of change described above, you should be able to determine that constant offset.
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def starting_mark (height : Float) : Float := sorry

  theorem starting_mark_in_range (height : Float)
    (h1 : 1.52 ≤ height) (h2 : height ≤ 1.83) :
    9.45 ≤ starting_mark height ∧ starting_mark height ≤ 10.67 := sorry
vc-theorems: |
  theorem starting_mark_linear (height : Float)
    (h1 : 1.52 ≤ height) (h2 : height ≤ 1.83) :
    let slope := (10.67 - 9.45) / (1.83 - 1.52)
    let expected := 9.45 + slope * (height - 1.52)
    (starting_mark height - expected).abs < 0.001 := sorry


  theorem starting_mark_rounding (height : Float) :
    let mark := starting_mark height
    let decimal := mark - mark.floor
    decimal < 0.01 := sorry


  theorem starting_mark_edge_cases :
    starting_mark 1.52 = 9.45 ∧
    starting_mark 1.83 = 10.67 := sorry

  /--
  info: 9.45
  -/
  #guard_msgs in
  #eval starting_mark 1.52

  /--
  info: 10.67
  -/
  #guard_msgs in
  #eval starting_mark 1.83

  /--
  info: 10.36
  -/
  #guard_msgs in
  #eval starting_mark 1.75
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
