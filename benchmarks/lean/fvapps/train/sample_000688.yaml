"vc-description": "In 17th century our Chef was a Wizard. He asked his small son \"\
  Anshu\" to bring him the secret of the Magical Mountain. The boy after travelling\
  \ a lot reached the Mountain.\n\nThe description of the Mountain was as follows:\n\
  - Mountain contains N magical stones. Each of them has a unique number.\n- Mountain\
  \ was divided into many levels, where at ith level atmost 2^i stones can be found.\n\
  - Between stones there exist a magical path containing lava.\n- A stone can be connected\
  \ with maximum of three stones.\n- Peak of the mountain contains stone with number\
  \ 1.\n- If Stone 1 is first connected to stone 2 and then to 3. Assume 2 is to the\
  \ left of 3.\n\nNow, to get the secret of the mountain, Anshu started climbing from\
  \ the left. On the way he used his magical wand to protect him from lava. But, while\
  \ climbing he came to know that he is able to see only the one stone at each level.\
  \ After reaching the peak he slided down and did the the same process. These stones\
  \ that he saw shows the secret of the mountain, if they are placed in a non decreasing\
  \ order on a sunny day. Anshu doesn't remember the stones number that he saw. Help\
  \ him in recollecting them and getting the secret to his father.\n\nThe mountain\
  \ looks like this\n\n-----Input-----\n- First line contains T the number of test\
  \ cases.\n- First line of each test test case contains N.\n- Next N-1 lines contains\
  \ X and Y the stones which are connected.\n\n-----Output-----\n- Output the required\
  \ non decreasing sequence.\n\n-----Constraints and Subtasks-----\n- 1 <= T <= 10\n\
  - 1 <= X, Y <= N\nSubtask 1: 20 points\n- 3<=N<=100\nSubtask 2: 30 points\n- 3<=N<=10000\n\
  Subtask 3: 50 points\n- 3<=N<=100000\n\n-----Example-----\nInput:\n1\n5\n1 2\n1\
  \ 3\n2 4\n2 5\n\nOutput:\n1 2 3 4 5"
"vc-preamble": "import Imports.AllImports\n\ndef find_mountain_secret (n : Nat) (edges\
  \ : List (Nat × Nat)) : String := sorry\n\ndef parseNums (s : String) : List Nat\
  \ :=\n  (s.split (· = ' ')).filterMap String.toNat?\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isSorted (l : List Nat) : Bool := \n  match l with\n  | []\
  \ => true\n  | [_] => true\n  | x :: y :: rest => x ≤ y && isSorted (y :: rest)\n"
"vc-theorems": "theorem mountain_secret_produces_unique_nums {n : Nat} {edges : List\
  \ (Nat × Nat)}\n    (h1 : n ≥ 2)\n    (h2 : edges.length > 0) \n    (h3 : ∀ (e :\
  \ Nat × Nat), e ∈ edges → e.1 ≤ n ∧ e.2 ≤ n)\n    (h4 : ∀ (e : Nat × Nat), e ∈ edges\
  \ → e.1 ≠ e.2) :\n    let nums := parseNums (find_mountain_secret n edges)\n   \
  \ nums.length = nums.eraseDups.length := sorry\n\n\ntheorem mountain_secret_valid_range\
  \ {n : Nat} {edges : List (Nat × Nat)}\n    (h1 : n ≥ 2)\n    (h2 : edges.length\
  \ > 0)\n    (h3 : ∀ (e : Nat × Nat), e ∈ edges → e.1 ≤ n ∧ e.2 ≤ n)\n    (h4 : ∀\
  \ (e : Nat × Nat), e ∈ edges → e.1 ≠ e.2) :\n    let nums := parseNums (find_mountain_secret\
  \ n edges)\n    ∀ x ∈ nums, 1 ≤ x ∧ x ≤ n := sorry\n\n\ntheorem mountain_secret_contains_root\
  \ {n : Nat} {edges : List (Nat × Nat)}\n    (h1 : n ≥ 2)\n    (h2 : edges.length\
  \ > 0)\n    (h3 : ∀ (e : Nat × Nat), e ∈ edges → e.1 ≤ n ∧ e.2 ≤ n)\n    (h4 : ∀\
  \ (e : Nat × Nat), e ∈ edges → e.1 ≠ e.2) :\n    let nums := parseNums (find_mountain_secret\
  \ n edges)\n    1 ∈ nums := sorry\n\n\ntheorem mountain_secret_sorted {n : Nat}\
  \ {edges : List (Nat × Nat)}\n    (h1 : n ≥ 2)\n    (h2 : edges.length > 0)\n  \
  \  (h3 : ∀ (e : Nat × Nat), e ∈ edges → e.1 ≤ n ∧ e.2 ≤ n)\n    (h4 : ∀ (e : Nat\
  \ × Nat), e ∈ edges → e.1 ≠ e.2) :\n    let nums := parseNums (find_mountain_secret\
  \ n edges)\n    isSorted nums = true := sorry\n\n\ntheorem mountain_secret_specific_case_1\
  \ :\n    find_mountain_secret 5 [(1,2), (1,3), (2,4), (2,5)] = \"1 2 3 4 5\" :=\
  \ sorry\n\n\ntheorem mountain_secret_specific_case_2 :\n    find_mountain_secret\
  \ 3 [(1,2), (1,3)] = \"1 2 3\" := sorry\n\n/--\ninfo: '1 2 3 4 5'\n-/\n#guard_msgs\
  \ in\n#eval find_mountain_secret 5 [(1, 2), (1, 3), (2, 4), (2, 5)]\n\n/--\ninfo:\
  \ '1 2 3'\n-/\n#guard_msgs in\n#eval find_mountain_secret 3 [(1, 2), (1, 3)]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
