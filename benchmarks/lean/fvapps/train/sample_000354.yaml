"vc-description": "Given a 2D array A, each cell is 0 (representing sea) or 1 (representing\
  \ land)\nA move consists of walking from one land square 4-directionally to another\
  \ land square, or off the boundary of the grid.\nReturn the number of land squares\
  \ in the grid for which we cannot walk off the boundary of the grid in any number\
  \ of moves.\n \nExample 1:\nInput: [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]\nOutput:\
  \ 3\nExplanation: \nThere are three 1s that are enclosed by 0s, and one 1 that isn't\
  \ enclosed because its on the boundary.\nExample 2:\nInput: [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]\n\
  Output: 0\nExplanation: \nAll 1s are either on the boundary or can reach the boundary.\n\
  \n \nNote:\n\n1 <= A.length <= 500\n1 <= A[i].length <= 500\n0 <= A[i][j] <= 1\n\
  All rows have the same size."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def num_enclaves (grid: List (List Nat)) : Nat := sorry\n\ntheorem\
  \ empty_grid_enclave {rows cols : Nat} (h1: 0 < rows) (h2: 0 < cols) (h3: rows ≤\
  \ 10) (h4: cols ≤ 10) :\n  let grid := List.replicate rows (List.replicate cols\
  \ 0)\n  num_enclaves grid = 0 := sorry\n"
"vc-theorems": "theorem all_ones_grid_enclave {rows cols : Nat} (h1: 0 < rows) (h2:\
  \ 0 < cols) (h3: rows ≤ 10) (h4: cols ≤ 10) :\n  let grid := List.replicate rows\
  \ (List.replicate cols 1)\n  num_enclaves grid = 0 := sorry\n\n\ntheorem interior_ones_enclave\
  \ {rows cols : Nat} (h1: 2 < rows) (h2: 2 < cols) (h3: rows ≤ 10) (h4: cols ≤ 10)\
  \ :\n  let grid := List.map (fun i => List.map (fun j => \n    if i > 0 ∧ i < rows\
  \ - 1 ∧ j > 0 ∧ j < cols - 1 then 1 else 0\n  ) (List.range cols)) (List.range rows)\n\
  \  num_enclaves grid = (rows - 2) * (cols - 2) := sorry\n\n\ntheorem input_unchanged\
  \ {grid : List (List Nat)} (h1: grid ≠ []) (h2: grid.head! ≠ [])\n  (h3: ∀ x ∈ grid,\
  \ ∀ y ∈ x, y ≤ 1) :\n  let grid_copy := grid;\n  num_enclaves grid = num_enclaves\
  \ grid ∧ grid = grid_copy := sorry\n\n\ntheorem result_non_negative {grid : List\
  \ (List Nat)} (h1: grid ≠ []) (h2: grid.head! ≠ [])\n  (h3: ∀ x ∈ grid, ∀ y ∈ x,\
  \ y ≤ 1) :\n  num_enclaves grid ≥ 0 := sorry\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n\
  #eval num_enclaves [[0, 0, 0, 0], [1, 0, 1, 0], [0, 1, 1, 0], [0, 0, 0, 0]]\n\n\
  /--\ninfo: 0\n-/\n#guard_msgs in\n#eval num_enclaves [[0, 1, 1, 0], [0, 0, 1, 0],\
  \ [0, 0, 1, 0], [0, 0, 0, 0]]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval num_enclaves\
  \ [[0, 0, 0, 1], [0, 1, 1, 0], [0, 1, 0, 0]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
