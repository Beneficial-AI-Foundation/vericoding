"vc-description": "You are given a grid of size N x M consisting of '.' (empty), 'W'\
  \ (white) or 'B' (black) cells. We follow the convention that the top left corner\
  \ is the position (1,1) and bottom right corner is (N,M). \nFrom every '.' cell\
  \ (i, j), a ray is shot towards the right. If the ray reaches a 'B' cell, it loses\
  \ it's strength fully and stops there. When a ray\nreaches a 'W' cell, it's strength\
  \ drops drastically so that the  ray stops when it reaches a second 'W' cell. That\
  \ is, if there is no 'B'\ncell in between, a ray can cross at most one 'W' cell,\
  \ and it will stop when it reaches the second 'W' cell. It passes unchanged through\
  \  any '.' cell. If it reaches a boundary cell (ie. (i,M), for some i), it stops\
  \ there.\nLet L(i, j) be length travelled by the ray starting from the cell (i,\
  \ j). If (i,j) is 'W' or 'B', no ray starts from here, and hence L(i,j) is defined\
  \ to be 0. If a ray starts from (i,j) and stops at (i,k), then the distance travelled\
  \ by this ray is k-j+1. i.e, inclusive of both starting and ending cells.\nFor the\
  \ given grid your task is to find the sum of L(i, j) over all 1 <= i <= N and 1\
  \ <= j <= M.  \nThe description of the grid is given as follows: In addition to\
  \ N and M, you are given the number of 'W' cells (w) and the number of 'B' cells\
  \ (b)\nand you are given the locations of these w + b cells.  (The other cells contain\
  \ '.')\n\n-----Constraints:-----\nFor all testcases,\n- 1 <= N, M <= 10^6. \n- 0\
  \ <= w,b <= 10^5\nSubtask 1: 15%\nIt is guaranteed that 1 <= N,M <= 500\nSubtask\
  \ 2: 25%\nIt is guaranteed that 1 <= N,M <= 2000\nSubtask 3: 60%\nNo additional\
  \ guarantees.\n\n-----Input format:-----\n- There is only one line of input which\
  \ contains 4 + 2w + 2b space separated integers. The first four integers are N,\
  \ M, w and b. \n- The next 2*w integers denote the cells which contains a 'W': x1\
  \ y1 x2 y2 .. xw yw. These denote that (xi,yi) contains 'W'.\n- The next 2*b integers\
  \ denote the cells which contains a 'B': x1 y1 x2 y2 .. xb yb. These denote that\
  \ (xi,yi) contains 'B'.\n- The cells which are not in the input have to be assumed\
  \ to be '.' \n\n-----Output format:-----\nOutput a single integer which is the sum\
  \ of L(i,j) over all 1 <= i <= N and 1 <= j <= M.\n\n-----Sample Input 1:-----\n\
  4 4 5 2 1 3 2 1 3 2 3 3 4 3 1 4 2 3\n\n-----Sample Output 1:-----\n22\n\n-----Explanation:-----\n\
  The grid is:\n. . W B\nW . B .\n. W W .\n. . W .\n\nL(i,j) for each cell is:\n4\
  \ 3 0 0\n0 2 0 1\n3 0 0 1\n4 3 0 1\n\nTherefore, the total is 22.\n\n-----Note:-----\n\
  As the answer might be large, please use 64 bit integers (long long int in C/C++\
  \ and long in Java) instead of 32 bit int."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_ray_grid (n m w b : Nat) (w_cells b_cells : List Nat)\
  \ : Nat :=\nsorry\n"
"vc-theorems": "theorem empty_grid_sum {n m : Nat} (hn : 0 < n) (hm : 0 < m) : \n\
  \  solve_ray_grid n m 0 0 [] [] = n * m * (m + 1) / 2 :=\nsorry\n\n\ntheorem single_black_cell\
  \ :\n  solve_ray_grid 2 3 0 1 [] [1,2] = 9 :=\nsorry\n\n\ntheorem example_case :\n\
  \  solve_ray_grid 4 4 5 2 [1,3,2,1,3,2,3,3,4,3] [1,4,2,3] = 22 :=\nsorry\n\n/--\n\
  info: 22\n-/\n#guard_msgs in\n#eval solve_ray_grid 4 4 5 2 [1, 3, 2, 1, 3, 2, 3,\
  \ 3, 4, 3] [1, 4, 2, 3]\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval solve_ray_grid\
  \ 2 2 0 0 [] []\n\n/--\ninfo: 9\n-/\n#guard_msgs in\n#eval solve_ray_grid 2 3 0\
  \ 1 [] [1, 2]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
