"vc-description": "## A Knight's Tour\n\nA knight's tour is a sequence of moves of\
  \ a knight on a chessboard such that the knight visits every square only once.\n\
  \nhttps://en.wikipedia.org/wiki/Knight%27s_tour\n\nTraditional chess boards are\
  \ 8x8 grids, but for this kata we are interested in generating tours for any square\
  \ board sizes.\n\nYou will be asked to find a knight's path for any NxN board from\
  \ any start position.\n\nI have provided a tool to visualize the output of your\
  \ code at the following link: http://jsfiddle.net/7sbyya59/2/\n\nEDIT: The expected\
  \ output is a 2D array `(n x 2)` comprised of the `[x,y]` coordinates of the Knight's\
  \ path taken in sequential order. (e.g. `[[2,3],[4,4],...,[x,y]]`)\n\nAll test cases\
  \ will have a passing solution.\n\n-dg"
"vc-preamble": "import Imports.AllImports\n\ndef knights_tour (start : Pos) (size\
  \ : Nat) : List Pos :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_valid_knight_move (p1 p2 : Pos) : Bool :=\n  let dx := if\
  \ p1.x ≥ p2.x then p1.x - p2.x else p2.x - p1.x\n  let dy := if p1.y ≥ p2.y then\
  \ p1.y - p2.y else p2.y - p1.y\n  (dx == 2 && dy == 1) || (dx == 1 && dy == 2)\n"
"vc-theorems": "theorem knights_tour_returns_valid_path (start : Pos) (size : Nat)\
  \ \n    (h1 : size ≥ 5) (h2 : start.x < size) (h2' : start.y < size) :\n    let\
  \ path := knights_tour start size\n    -- Path has correct length\n    (path.length\
  \ = size * size) ∧ \n    -- Starts at given position\n    (path.head? = some start)\
  \ ∧\n    -- All positions are within bounds\n    (∀ p ∈ path, p.x < size ∧ p.y <\
  \ size) ∧\n    -- All positions are unique\n    (∀ i j, i < path.length → j < path.length\
  \ → i ≠ j → path.get! i ≠ path.get! j) ∧\n    -- All moves are valid knight moves\n\
  \    (∀ i, i < path.length - 1 → is_valid_knight_move (path.get! i) (path.get! (i+1)))\
  \ := by\n  sorry\n\n\ntheorem small_boards_sequential (size : Nat) (h : size ≤ 4)\
  \ :\n    let start := ⟨0,0⟩\n    let path := knights_tour start size\n    let expected\
  \ := (List.range size).bind (fun x => \n      (List.range size).map (fun y => ⟨x,y⟩))\n\
  \    path = expected := by\n  sorry\n\n/--\ninfo: 25\n-/\n#guard_msgs in\n#eval\
  \ len knights_tour((0, 0), 5)\n\n/--\ninfo: 36\n-/\n#guard_msgs in\n#eval len knights_tour((2,\
  \ 2), 6)\n\n/--\ninfo: 64\n-/\n#guard_msgs in\n#eval len knights_tour((0, 0), 8)\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
