"vc-description": "Write a program to determine if a string contains only unique characters.\n\
  Return true if it does and false otherwise.\n\nThe string may contain any of the\
  \ 128 ASCII characters.\nCharacters are case-sensitive, e.g. 'a' and 'A' are considered\
  \ different characters."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def has_unique_chars (s : String) : Bool := sorry\n\ntheorem empty_string_has_unique_chars\
  \ :\n  has_unique_chars \"\" = true := sorry\n"
"vc-theorems": "theorem string_with_duplicates_not_unique (s : String) :\n  has_unique_chars\
  \ (s ++ String.mk [s.get! 0]) = false := sorry\n\n\ntheorem len_eq_set_len_iff_unique\
  \ (s : String) :\n  has_unique_chars s = (s.length = s.data.eraseDups.length) :=\
  \ sorry\n\n\ntheorem adding_new_char_preserves_uniqueness (s : String) (c : Char)\n\
  \  (h1 : has_unique_chars s = true) \n  (h2 : ∀ x ∈ s.data, x ≠ c) :\n  has_unique_chars\
  \ (String.push s c) = true := sorry\n\n\ntheorem concat_unique_strings (s1 s2 :\
  \ String)\n  (h1 : has_unique_chars s1 = true)\n  (h2 : has_unique_chars s2 = true)\n\
  \  (h3 : ∀ x ∈ s1.data, ∀ y ∈ s2.data, x ≠ y) :\n  has_unique_chars (s1 ++ s2) =\
  \ true := sorry\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval has_unique_chars\
  \ \"  nAa\"\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval has_unique_chars \"abcdef\"\
  \n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval has_unique_chars \"++-\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
