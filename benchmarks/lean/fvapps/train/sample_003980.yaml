"vc-description": "Complete the function that returns an array of length `n`, starting\
  \ with the given number `x` and the squares of the previous number. If `n` is negative\
  \ or zero, return an empty array/list.\n\n## Examples\n\n```\n2, 5  -->  [2, 4,\
  \ 16, 256, 65536]\n3, 3  -->  [3, 9, 81]\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def squares (x n : Int) : List Int := sorry\n\ntheorem squares_length_nonpositive\
  \ {x n : Int} (h : n ≤ 0) :\n  squares x n = [] := sorry\n"
"vc-theorems": "theorem squares_length_positive {x n : Int} (h : n > 0) :\n  (squares\
  \ x n).length = n := sorry\n\n\ntheorem squares_powers {x n : Nat} (h1 : 1 ≤ x)\
  \ (h2 : x ≤ 5) (h3 : 1 ≤ n) (h4 : n ≤ 5) :\n  ∀ i : Nat, i < n → (squares x n).get\
  \ ⟨i, sorry⟩ = x ^ (2 : Nat) ^ i := sorry\n\n\ntheorem squares_basic_values :\n\
  \  squares 2 1 = [2] ∧\n  squares 1 5 = [1, 1, 1, 1, 1] ∧ \n  squares (-2) 2 = [-2,\
  \ 4] := sorry\n\n/--\ninfo: [2, 4, 16, 256, 65536]\n-/\n#guard_msgs in\n#eval squares\
  \ 2 5\n\n/--\ninfo: [3, 9, 81]\n-/\n#guard_msgs in\n#eval squares 3 3\n\n/--\ninfo:\
  \ []\n-/\n#guard_msgs in\n#eval squares 2 0\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
