"vc-description": "# Remove Duplicates\n\nYou are to write a function called `unique`\
  \ that takes an array of integers and returns the array with duplicates removed.\
  \ It must return the values in the same order as first seen in the given array.\
  \ Thus no sorting should be done, if 52 appears before 10 in the given array then\
  \ it should also be that 52 appears before 10 in the returned array.\n\n## Assumptions\n\
  \n* All values given are integers (they can be positive or negative).\n* You are\
  \ given an array but it may be empty.\n* They array may have duplicates or it may\
  \ not.\n\n## Example\n\n```python\nprint unique([1, 5, 2, 0, 2, -3, 1, 10])\n[1,\
  \ 5, 2, 0, -3, 10]\n\nprint unique([])\n[]\n\nprint unique([5, 2, 1, 3])\n[5, 2,\
  \ 1, 3]\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def unique (α : Type) [BEq α] : List α → List α := sorry\n\ntheorem\
  \ unique_order (α : Type) [BEq α] (l : List α) :\n  let r := unique α l\n  (∀ x\
  \ ∈ r, x ∈ l) ∧ \n  (List.Nodup r) ∧\n  (∀ x y, List.indexOf r x < List.indexOf\
  \ r y → List.indexOf l x < List.indexOf l y) :=\nsorry\n"
"vc-theorems": "theorem unique_properties (α : Type) [BEq α] (l : List α) :\n  let\
  \ r := unique α l\n  (∀ x ∈ r, x ∈ l) ∧ \n  (∀ x ∈ l, (x ∈ r)) ∧ \n  (r.length ≤\
  \ l.length) :=\nsorry \n\n\ntheorem unique_empty (α : Type) [BEq α] : unique α []\
  \ = [] := sorry\n\n/--\ninfo: []\n-/\n#guard_msgs in\n#eval unique []\n\n/--\ninfo:\
  \ [5, 2, 1, 3]\n-/\n#guard_msgs in\n#eval unique [5, 2, 1, 3]\n\n/--\ninfo: [1,\
  \ 5, 2, 0, -3, 10]\n-/\n#guard_msgs in\n#eval unique [1, 5, 2, 0, 2, -3, 1, 10]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
