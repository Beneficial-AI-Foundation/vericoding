"vc-description": "Daenerys Targaryen has been suggested by her counselors to leave\
  \ the Meereen and start conquering other parts of the world. But she knows giving\
  \ up on the people of Meereen means victory of slavery. Her plan is to start conquering\
  \ rest of the world while she remains in Meereen. She can only trust her bravest\
  \ and most beloved Daario Naharis to undertake this risk. She asks him to conquer\
  \ a few nations and promises him a help from her dragons. She also promises to marry\
  \ him if he successfully conquers all the nations and not if he is defeated.\nDaario\
  \ has to conquer 'N' number of nations each nation with army size A[i]. He attacks\
  \ the nations serially. As promised, he gets help from Daenerys's Dragons. His first\
  \ 'M' attacks are made with the help of Dragons.\n\nFor first 'M' attacks, he gains\
  \ A[i] soldiers.\n\nFor the rest, he looses ceiling of A[i]/2 soldiers.\n\nHe is\
  \ defeated if he is left with no army before he conquers all the 'N' nations. He\
  \ has no army initially and only has Dragons.\n\n-----Input-----\nFirst line has\
  \ 'T' which is the number of test cases.\nFor each test cases there are two space\
  \ separated integers 'N' and 'M' denoting the number of nations and the number of\
  \ nations he has Dragon's help for respectively.\nFollows N space separated integers\
  \ denoting the size of army of each nation.\n\n-----Output-----\nPrint 'VICTORY'\
  \ if Daario conquers all nations and 'DEFEAT' if he doesn't.  \n\n-----Constraints-----\n\
  - 1 ≤ T ≤ 500\n- 1 ≤ M ≤N ≤ 100000\n- 1 ≤ A[i] ≤ 100000\n\n-----Example-----\nInput:\n\
  \n3\n5 3\n1 2 3 4 5\n6 2\n4 4 4 4 4 4\n7 4 \n10 10 10 10 50 60 70\nOutput:\n\nVICTORY\n\
  VICTORY\nDEFEAT \n\n-----Explanation-----\nExample case 1.\n\nFirst 3 attacks add\
  \ 1,2,3 to his army making it 6. (1+2+3 = 6)\n\nThen he looses 2 and 3 making it\
  \ 1. (6-2-3 = 1)\n\nHe conquers all so VICTORY.\n\nExample case 2.\n\nFirst 2 attacks\
  \ add 4,4 to his army making it 8. (4+4 = 8)\n\nThen he looses 2,2,2,2 making it\
  \ 0. (8-2-2-2-2 = 0)\n\nHe conquers all so VICTORY.\n\nExample case 3.\n\nFirst\
  \ 4 attacks add 10,10,10,10 to his army making it 40. (10+10+10+10 = 40)\n\nThen\
  \ he looses 25 and then all 15 out of possible 30 making it 0. (40-25-15 = 0)\n\n\
  He is defeated on 6th attack so DEFEAT."
"vc-preamble": "import Imports.AllImports\n\ndef List.sum : List Nat → Nat \n| []\
  \ => 0\n| (x::xs) => x + sum xs\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def check_conquest (n m : Nat) (armies : List Nat) : BattleResult\
  \ := sorry\n\ntheorem check_conquest_valid_result (n m : Nat) (armies : List Nat)\
  \ :\n  check_conquest n m armies = BattleResult.VICTORY ∨ \n  check_conquest n m\
  \ armies = BattleResult.DEFEAT := sorry\n"
"vc-theorems": "theorem check_conquest_enough_armies (n m : Nat) (armies : List Nat)\
  \ :\n  n ≤ m → check_conquest n m armies = BattleResult.VICTORY := sorry\n\n\ntheorem\
  \ check_conquest_insufficient_armies (n m : Nat) (armies : List Nat) :\n  n > m\
  \ → (List.take m armies).sum ≤ 0 → \n  check_conquest n m armies = BattleResult.DEFEAT\
  \ := sorry\n\n\ntheorem check_conquest_monotone (n m : Nat) (armies : List Nat)\
  \ :\n  n > m →\n  check_conquest n m armies = BattleResult.VICTORY →\n  check_conquest\
  \ n m (armies.map (· + 1)) = BattleResult.VICTORY := sorry\n\n/--\ninfo: 'VICTORY'\n\
  -/\n#guard_msgs in\n#eval check_conquest 5 3 [1, 2, 3, 4, 5]\n\n/--\ninfo: 'VICTORY'\n\
  -/\n#guard_msgs in\n#eval check_conquest 6 2 [4, 4, 4, 4, 4, 4]\n\n/--\ninfo: 'DEFEAT'\n\
  -/\n#guard_msgs in\n#eval check_conquest 7 4 [10, 10, 10, 10, 50, 60, 70]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
