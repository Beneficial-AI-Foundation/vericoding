"vc-description": "Chef just got a box of chocolates as his birthday gift. The box\
  \ contains $N$ chocolates in a row (numbered $1$ through $N$), where $N$ is even.\
  \ For each valid $i$, the $i$-th chocolate has a sweetness value $W_i$.\nChef wants\
  \ to eat all the chocolates in the first half of the box and leave all chocolates\
  \ in the second half uneaten. Since he does not like chocolates that are too sweet,\
  \ he will be unhappy if at least one of the chocolates he eats has the maximum sweetness\
  \ among all the chocolates in the box.\nA right cyclic shift by $k$ chocolates ($0\
  \ \\le k < N$) consists of moving the last $k$ chocolates in the row to the beginning\
  \ in the same order and moving each of the remaining $N-k$ chocolates $k$ places\
  \ to the right. Before eating the first half of the chocolates, Chef wants to perform\
  \ some right cyclic shift in such a way that he will not be unhappy after eating\
  \ them. Find the number of ways to do this, i.e. the number of valid integers $k$\
  \ such that if Chef performs the right cyclic shift by $k$ chocolates and then eats\
  \ the first half of the chocolates in the box, he does not become unhappy.\n\n-----Input-----\n\
  - The first line of the input contains a single integer $T$ denoting the number\
  \ of test cases. The description of $T$ test cases follows.\n- The first line of\
  \ each test case contains a single integer $N$.\n- The second line contains $N$\
  \ space-separated integers $W_1, W_2, \\ldots, W_N$.\n\n-----Output-----\nFor each\
  \ test case, print a single line containing one integer ― the number of shifts for\
  \ which Chef does not become unhappy.\n\n-----Constraints-----\n- $1 \\le T \\le\
  \ 5$\n- $1 \\le N \\le 10^5$\n- $N$ is even\n- $1 \\le W_i \\le 10^5$ for each valid\
  \ $i$\n\n-----Example Input-----\n2\n6\n1 1 2 1 1 1\n6\n1 1 2 1 1 2\n\n-----Example\
  \ Output-----\n3\n0\n\n-----Explanation-----\nExample case 1: The three valid right\
  \ shifts and the contents of the box for these shifts are:\n- shift by $k = 1$:\
  \ $(1, 1, 1, 2, 1, 1)$\n- shift by $k = 2$: $(1, 1, 1, 1, 2, 1)$\n- shift by $k\
  \ = 3$: $(1, 1, 1, 1, 1, 2)$"
"vc-preamble": "import Imports.AllImports\n\ndef count_valid_shifts (n : Nat) (nums\
  \ : List Nat) : Nat :=\nsorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def verify_shift (arr : List Nat) (shift_pos : Nat) : Bool :=\n\
  sorry\n\n\n"
"vc-theorems": "theorem result_bounds (n : Nat) (nums : List Nat)\n  (h1 : 2 ≤ n)\
  \ (h2 : n ≤ 20) (h3 : nums.length = n) :\n  0 ≤ count_valid_shifts n nums ∧ count_valid_shifts\
  \ n nums ≤ n :=\nsorry\n\n\ntheorem all_same_gives_zero (n : Nat)\n  (h1 : 2 ≤ n)\
  \ (h2 : n ≤ 20) :\n  count_valid_shifts n (List.replicate n 1) = 0 :=\nsorry\n\n\
  /--\ninfo: 3\n-/\n#guard_msgs in\n#eval count_valid_shifts 6 [1, 1, 2, 1, 1, 1]\n\
  \n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval count_valid_shifts 6 [1, 1, 2, 1, 1, 2]\n\
  \n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval count_valid_shifts 4 [1, 2, 1, 1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
