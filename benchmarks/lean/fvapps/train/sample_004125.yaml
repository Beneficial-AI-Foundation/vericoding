"vc-description": "This is the first step to understanding FizzBuzz.  \n\nYour inputs:\n\
  a positive integer, n, greater than or equal to one.\nn is provided, you have NO\
  \ CONTROL over its value.\n\nYour expected output is an array of positive integers\
  \ from 1 to n (inclusive).\n\nYour job is to write an algorithm that gets you from\
  \ the input to the output."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def pre_fizz (n : Nat) : List Nat :=\n  sorry\n"
"vc-theorems": "theorem pre_fizz_returns_sequential_integers (n : Nat) (h : n > 0)\
  \ : \n  pre_fizz n = List.range' 1 n := sorry\n\n\ntheorem pre_fizz_length (n :\
  \ Nat) (h : n > 0) :\n  (pre_fizz n).length = n := sorry \n\n\ntheorem pre_fizz_elements_increasing\
  \ (n : Nat) (h : n > 0) :\n  ∀ i : Nat, i < (pre_fizz n).length - 1 → \n    (pre_fizz\
  \ n)[i]! < (pre_fizz n)[i+1]! := sorry\n\n/--\ninfo: [1]\n-/\n#guard_msgs in\n#eval\
  \ pre_fizz 1\n\n/--\ninfo: [1, 2, 3]\n-/\n#guard_msgs in\n#eval pre_fizz 3\n\n/--\n\
  info: [1, 2, 3, 4, 5]\n-/\n#guard_msgs in\n#eval pre_fizz 5\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
