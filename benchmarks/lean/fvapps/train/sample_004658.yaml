"vc-description": "You're in the casino, playing Roulette, going for the \"1-18\"\
  \ bets only and desperate to beat the house and so you want to test how effective\
  \ the [Martingale strategy](https://en.wikipedia.org/wiki/Martingale_(betting_system))\
  \ is. \n\nYou will be given a starting cash balance and an array of binary digits\
  \ to represent a win (`1`) or a loss (`0`). Return your balance after playing all\
  \ rounds.\n\n\n*The Martingale strategy*\n\nYou start with a stake of `100` dollars.\
  \ If you lose a round, you lose the stake placed on that round and you double the\
  \ stake for your next bet. When you win, you win 100% of the stake and revert back\
  \ to staking 100 dollars on your next bet.\n\n\n## Example\n```\nmartingale(1000,\
  \ [1, 1, 0, 0, 1]) === 1300\n```\nExplanation:\n* you win your 1st round: gain $100,\
  \ balance = 1100\n* you win the 2nd round: gain $100, balance = 1200\n* you lose\
  \ the 3rd round: lose $100 dollars, balance = 1100\n* double stake for 4th round\
  \ and lose: staked $200, lose $200, balance = 900\n* double stake for 5th round\
  \ and win: staked $400, won $400, balance = 1300\n\n**Note: Your balance is allowed\
  \ to go below 0.**"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def martingale (bank : Float) (outcomes : List Int) : Float :=\n\
  \  sorry\n"
"vc-theorems": "theorem martingale_monotonic_bank {bank : Float} {outcomes : List\
  \ Int} :\n  ∀ inc : Float, inc ≥ 0 → martingale (bank + inc) outcomes ≥ martingale\
  \ bank outcomes := by\n  sorry\n\n\ntheorem martingale_all_wins {bank : Float} {outcomes\
  \ : List Int} :\n  (∀ x ∈ outcomes, x = 1) → \n  martingale bank outcomes = bank\
  \ + (outcomes.length.toFloat * 100) := by\n  sorry\n\n\ntheorem martingale_empty_outcomes\
  \ {bank : Float} :\n  martingale bank [] = bank := by\n  sorry\n\n\ntheorem martingale_returns_float\
  \ {bank : Float} {outcomes : List Int} :\n  ∃ x : Float, martingale bank outcomes\
  \ = x := by\n  sorry\n\n\ntheorem martingale_consecutive_losses {n : Nat} :\n  let\
  \ losses := List.replicate n 0\n  martingale 0 losses = -(List.range n).foldl (fun\
  \ acc i => acc + 100 * (Float.pow 2 i.toFloat)) 0 := by\n  sorry\n\n/--\ninfo: 1300\n\
  -/\n#guard_msgs in\n#eval martingale 1000 [1, 1, 0, 0, 1]\n\n/--\ninfo: 800\n-/\n\
  #guard_msgs in\n#eval martingale 500 [1, 1, 1]\n\n/--\ninfo: -600\n-/\n#guard_msgs\
  \ in\n#eval martingale 100 [0, 0, 0]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
