"vc-description": "You are given a binary string S of N bits. The bits in the string\
  \ are indexed starting from 1. S[i] denotes the ith bit of S.\n\nLet's say that\
  \ a sequence i1, i2, …, iK(1 ≤ K; 1 ≤ i1 < i2 < … < iK ≤ N) produces a palindrome\
  \ when applied to S, if the string S[i1] S[i2] … S[ik] is a palindrome (that is,\
  \ reads the same backward or forward).\n\nIn addition, a sequence i1, i2, …, iK(1\
  \ ≤ K; 1 ≤ i1 < i2 < … < iK ≤ N) is said to be exponential, if ij + 1 = p * ij for\
  \ each integer 1 ≤ j < K and for some integer p > 1. Note, that a sequence of one\
  \ element is always exponential.\n\nYour task is to count the number of exponential\
  \ sequences that produce a palindrome when applied to S.\n\n-----Input-----\nThe\
  \ first line of input contains an integer T denoting the number of test cases. The\
  \ description of T test cases follows.\n\nThe only line of description for each\
  \ test case contains a binary string S of N bits.\n\n-----Output-----\n\nFor each\
  \ test case, output a single line containing the number of exponential sequences\
  \ that produce a palindrome.\n\n-----Constraints-----\n- 1 ≤ T ≤ 10\n- Subtask 1(20\
  \ points): 1 ≤ N ≤ 20\n- Subtask 2(30 points): 1 ≤ N ≤ 1000\n- Subtask 3(50 points):\
  \ 1 ≤ N ≤ 5 × 105\n\n-----Note-----\n\nThe first test of the first subtask is the\
  \ example test. It's made for you to make sure that your solution produces the same\
  \ verdict both on your machine and our server.\n\n-----Time Limits-----\n\nTime\
  \ limit for the first and the second subtasks is 3s. Time limit for the third subtask\
  \ is 6s.\n\n-----Example-----\nInput:\n2\n11010\n101001011\n\nOutput:\n9\n18\n\n\
  -----Explanation of the first case in the example test-----\n\nThe following sequences\
  \ are counted in the answer: {1}, {2}, {3}, {4}, {5}, {1, 2}, {1, 4}, {2, 4}, {1,\
  \ 2, 4}."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_exponential_palindromes (s : String) : Nat :=\n  sorry\n\
  \n\n"
"vc-theorems": "theorem count_exp_pal_at_least_one (s : String) :\n  s.length > 0\
  \ → count_exponential_palindromes s ≥ 1 :=\nsorry\n\n\ntheorem count_exp_pal_at_least_length\
  \ (s : String) :\n  s.length > 0 → count_exponential_palindromes s ≥ s.length :=\n\
  sorry\n\n\ntheorem count_exp_pal_empty_zero : \n  count_exponential_palindromes\
  \ \"\" = 0 :=\nsorry\n\n\ntheorem count_exp_pal_single_char (c : Char) :\n  count_exponential_palindromes\
  \ (String.singleton c) = 1 :=\nsorry\n\n/--\ninfo: 9\n-/\n#guard_msgs in\n#eval\
  \ count_exponential_palindromes \"11010\"\n\n/--\ninfo: 18\n-/\n#guard_msgs in\n\
  #eval count_exponential_palindromes \"101001011\"\n\n/--\ninfo: 4\n-/\n#guard_msgs\
  \ in\n#eval count_exponential_palindromes \"110\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
