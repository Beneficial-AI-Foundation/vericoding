"vc-description": "In this Kata, you will be given a string of numbers in sequence\
  \ and your task will be to return the missing number. If there is no number\nmissing\
  \ or there is an error in the sequence, return `-1`.\n\nFor example:\n```Haskell\n\
  missing(\"123567\") = 4 \nmissing(\"899091939495\") = 92\nmissing(\"9899101102\"\
  ) = 100\nmissing(\"599600601602\") = -1 -- no number missing\nmissing(\"8990919395\"\
  ) = -1 -- error in sequence. Both 92 and 94 missing.\n```\nThe sequence will always\
  \ be in ascending order.\n\nMore examples in the test cases. \n\nGood luck!"
"vc-preamble": "import Imports.AllImports\n\ndef String.isDigit : String → Bool :=\n\
  \  sorry\n\n\ndef missing : String → Int :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isSequence : String → Bool :=\n  sorry\n\n/-- For a sequence\
  \ with one number removed, missing finds the removed number -/"
"vc-theorems": "theorem missing_finds_gap {start : Nat} (h : start ≥ 1 ∧ start ≤ 99)\
  \ :\n  ∀ seq target, \n  (∃ curr, curr = start ∧ \n    seq = String.join (List.map\
  \ toString (List.range curr)) ∧\n    target = curr + 1 ∧\n    isSequence (seq.replace\
  \ (toString target) \"\")) →\n  missing (seq.replace (toString target) \"\") = target\
  \ :=\nsorry\n\n/-- For a complete sequence with no gaps, missing returns -1 -/\n\
  \ntheorem missing_complete_sequence {start : Nat} (h : start ≥ 1 ∧ start ≤ 999)\
  \ :\n  ∀ seq,\n  (∃ curr, curr = start ∧\n    seq = String.join (List.map toString\
  \ (List.range curr)) ∧\n    isSequence seq) →\n  missing seq = -1 :=\nsorry\n\n\
  /--\ninfo: 4\n-/\n#guard_msgs in\n#eval missing \"123567\"\n\n/--\ninfo: 92\n-/\n\
  #guard_msgs in\n#eval missing \"899091939495\"\n\n/--\ninfo: 100\n-/\n#guard_msgs\
  \ in\n#eval missing \"9899101102\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
