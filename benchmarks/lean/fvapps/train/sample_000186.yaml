"vc-description": "Given two integer arrays A and B, return the maximum length of\
  \ an subarray that appears in both arrays.\n\nExample 1:\n\nInput:\nA: [1,2,3,2,1]\n\
  B: [3,2,1,4,7]\nOutput: 3\nExplanation: \nThe repeated subarray with maximum length\
  \ is [3, 2, 1].\n\n\n\nNote:\n\n1 \n0"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_max_repeated_subarray (A B : List Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem result_size_bounds {A B : List Nat} (h1 : A.length > 0) (h2\
  \ : B.length > 0) :\n  let result := find_max_repeated_subarray A B\n  result ≥\
  \ 0 ∧ result ≤ min A.length B.length :=\n  sorry\n\n\ntheorem identical_arrays {A\
  \ : List Nat} (h : A.length > 0) :\n  find_max_repeated_subarray A A = A.length\
  \ :=\n  sorry\n\n\ntheorem symmetric_property {A B : List Nat} (h1 : A.length >\
  \ 0) (h2 : B.length > 0) :\n  find_max_repeated_subarray A B = find_max_repeated_subarray\
  \ B A :=\n  sorry\n\n\ntheorem disjoint_arrays {A B : List Nat} (h1 : A.length >\
  \ 0) (h2 : B.length > 0)\n  (h3 : ∀ x ∈ B, ∀ y ∈ A, x ≠ y) :\n  find_max_repeated_subarray\
  \ A B = 0 :=\n  sorry\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval find_max_repeated_subarray\
  \ [1, 2, 3, 2, 1] [3, 2, 1, 4, 7]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval find_max_repeated_subarray\
  \ [1, 2, 3] [4, 5, 6]\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval find_max_repeated_subarray\
  \ [1, 1, 1] [1, 1, 1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
