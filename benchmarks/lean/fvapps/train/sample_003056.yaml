"vc-description": "## Number pyramid\n\nNumber pyramid is a recursive structure where\
  \ each next row is constructed by adding adjacent values of the current row. For\
  \ example:\n\n```\nRow 1     [1     2     3     4]\nRow 2        [3     5     7]\n\
  Row 3           [8    12]\nRow 4             [20]\n```\n\n___\n\n## Task\n\nGiven\
  \ the first row of the number pyramid, find the value stored in its last row.\n\n\
  ___\n\n## Examples\n\n```python\nreduce_pyramid([1])        ==  1\nreduce_pyramid([3,\
  \ 5])     ==  8\nreduce_pyramid([3, 9, 4])  ==  25\n```\n\n___\n\n## Performance\
  \ tests\n\n```python\nNumber of tests: 10\nList size: 10,000\n```"
"vc-preamble": "import Imports.AllImports\n\ndef reducePyramid (base : List Int) :\
  \ Int :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def referencePyramidReduce (base : List Int) : Int :=\n  sorry\n"
"vc-theorems": "theorem matches_reference_implementation {base : List Int} \n  (h\
  \ : base.length > 0 ∧ base.length ≤ 10) :\n  reducePyramid base = referencePyramidReduce\
  \ base :=\nsorry\n\n\ntheorem single_element {base : List Int} \n  (h : base.length\
  \ = 1) :\n  reducePyramid base = base.get ⟨0, sorry⟩ :=\nsorry\n\n\ntheorem two_elements\
  \ {base : List Int} \n  (h : base.length = 2) :\n  reducePyramid base = base.get\
  \ ⟨0, sorry⟩ + base.get ⟨1, sorry⟩ :=\nsorry \n\n\ntheorem singleton_list (x : Int)\
  \ :\n  reducePyramid [x] = x :=\nsorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval\
  \ reduce_pyramid [1]\n\n/--\ninfo: 8\n-/\n#guard_msgs in\n#eval reduce_pyramid [3,\
  \ 5]\n\n/--\ninfo: 25\n-/\n#guard_msgs in\n#eval reduce_pyramid [3, 9, 4]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
