"vc-description": "Brief\n=====\nSometimes we need information about the list/arrays\
  \ we're dealing with. You'll have to write such a function in this kata. Your function\
  \ must provide the following informations:  \n\n* Length of the array\n* Number\
  \ of integer items in the array\n* Number of float items in the array\n* Number\
  \ of string character items in the array\n* Number of whitespace items in the array\n\
  \   \nThe informations will be supplied in arrays that are items of another array.\
  \ Like below:\n\n`Output array = [[array length],[no of integer items],[no of float\
  \ items],[no of string chars items],[no of whitespace items]]`\n\nAdded Difficulty\n\
  ----------------\nIf any item count in the array is zero, you'll have to replace\
  \ it with a **None/nil/null** value (according to the language). And of course,\
  \ if the array is empty then return **'Nothing in the array!**. For the sake of\
  \ simplicity, let's just suppose that there are no nested structures.   \nOutput\n\
  ======\nIf you're head is spinning (just kidding!) then these examples will help\
  \ you out-   \n```\n   \narray_info([1,2,3.33,4,5.01,'bass','kick',' '])--------->[[8],[3],[2],[2],[1]]\
  \    \narray_info([0.001,2,' '])------------------------------>[[3],[1],[1],[None],[1]]\
  \   \narray_info([])----------------------------------------->'Nothing in the array!'\n\
  array_info([' '])-------------------------------------->[[1],[None],[None],[None],[1]]\n\
  \  \n  ```    \nRemarks\n-------\nThe input will always be arrays/lists. So no need\
  \ to check the inputs.    \nHint\n====\nSee the tags!!!   \nNow let's get going\
  \ !"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def array_info {α : Type} (lst : List α) : Result := sorry\n\n\
  theorem array_info_empty (lst : List α) : \n  lst = [] → array_info lst = .Msg \"\
  Nothing in the array!\" := sorry\n"
"vc-theorems": "theorem array_info_nonempty_structure (lst : List α) :\n  lst ≠ []\
  \ →\n  ∃ result : List (List Nat),\n    array_info lst = .Nums result ∧\n    result.length\
  \ = 5 ∧ \n    ∀ x ∈ result, ∃ y, x = [y] := sorry\n\n\ntheorem array_info_length\
  \ (lst : List α) :\n  lst ≠ [] →\n  ∃ result : List (List Nat),\n    array_info\
  \ lst = .Nums result ∧\n    result.get! 0 = [lst.length] := sorry\n\n\ntheorem array_info_all_ints\
  \ (lst : List Int) :\n  lst ≠ [] →\n  ∃ result : List (List Nat),\n    array_info\
  \ lst = .Nums result ∧\n    result.get! 1 = [lst.length] ∧\n    result.get! 2 =\
  \ [0] ∧\n    result.get! 3 = [0] ∧\n    result.get! 4 = [0] := sorry\n\n\ntheorem\
  \ array_info_all_spaces (lst : List String) :\n  lst ≠ [] →\n  (∀ s ∈ lst, s.all\
  \ Char.isWhitespace) →\n  ∃ result : List (List Nat),\n    array_info lst = .Nums\
  \ result ∧\n    result.get! 1 = [0] ∧\n    result.get! 2 = [0] ∧\n    result.get!\
  \ 3 = [0] ∧\n    result.get! 4 = [lst.length] := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
