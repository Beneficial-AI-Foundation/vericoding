"vc-description": "Chef is a very experienced and well-known cook. He has participated\
  \ in many cooking competitions in the past — so many that he does not even remember\
  \ them all.\nOne of these competitions lasted for a certain number of days. The\
  \ first day of the competition was day $S$ of the week (i.e. Monday, Tuesday etc.)\
  \ and the last day was day $E$ of the week. Chef remembers that the duration of\
  \ the competition (the number of days between the first and last day, inclusive)\
  \ was between $L$ days and $R$ days inclusive. Is it possible to uniquely determine\
  \ the exact duration of the competition? If so, what is this duration?\n\n-----Input-----\n\
  - The first line of the input contains a single integer $T$ denoting the number\
  \ of test cases. The description of $T$ test cases follows.\n- The first and only\
  \ line of each test case contains two space-separated strings $S$ and $E$, followed\
  \ by a space and two space-separated integers $L$ and $R$.\n\n-----Output-----\n\
  For each test case, print a single line containing:\n- the string \"impossible\"\
  \ if there is no duration consistent with all given information\n- the string \"\
  many\" if there is more than one possible duration\n- one integer — the duration\
  \ of the competition, if its duration is unique\n\n-----Constraints-----\n- $1 \\\
  le T \\le 10,000$\n- $1 \\le L \\le R \\le 100$\n- $S$ is one of the strings \"\
  saturday\", \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\" or\
  \ \"friday\"\n- $E$ is one of the strings \"saturday\", \"sunday\", \"monday\",\
  \ \"tuesday\", \"wednesday\", \"thursday\" or \"friday\"\n\n-----Subtasks-----\n\
  Subtask #1 (100 points): original constraints\n\n-----Example Input-----\n3\nsaturday\
  \ sunday 2 4\nmonday wednesday 1 20\nsaturday sunday 3 5\n\n-----Example Output-----\n\
  2\nmany\nimpossible"
"vc-preamble": "import Imports.AllImports\n\ndef DAYS : List String := [\"saturday\"\
  , \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\"]\n\
  \ndef indexOfDay (day: String) : Nat :=\nsorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solveCompetitionDuration (startDay endDay: String) (l r: Nat)\
  \ : String ⊕ Nat :=\nsorry\n"
"vc-theorems": "theorem competition_duration_impossible {startDay endDay: String}\
  \ {l r: Nat} \n  (h1: l ≤ r)\n  (h2: solveCompetitionDuration startDay endDay l\
  \ r = Sum.inl \"impossible\") :\n  ∀ x, l ≤ x → x ≤ r → \n    x % 7 ≠ ((indexOfDay\
  \ endDay - indexOfDay startDay + 8) % 7) :=\nsorry\n\n\ntheorem competition_duration_many\
  \ {startDay endDay: String} {l r: Nat}\n  (h1: l ≤ r)\n  (h2: solveCompetitionDuration\
  \ startDay endDay l r = Sum.inl \"many\") :\n  ∃ x y, l ≤ x ∧ x < y ∧ y ≤ r ∧\n\
  \    x % 7 = ((indexOfDay endDay - indexOfDay startDay + 8) % 7) ∧\n    y % 7 =\
  \ ((indexOfDay endDay - indexOfDay startDay + 8) % 7) :=\nsorry\n\n\ntheorem competition_duration_specific\
  \ {startDay endDay: String} {l r n: Nat}\n  (h1: l ≤ r)\n  (h2: solveCompetitionDuration\
  \ startDay endDay l r = Sum.inr n) :\n  l ≤ n ∧ n ≤ r ∧\n  n % 7 = ((indexOfDay\
  \ endDay - indexOfDay startDay + 8) % 7) ∧\n  (∀ x, l ≤ x → x < n → x % 7 ≠ n %\
  \ 7) ∧\n  n + 7 > r :=\nsorry\n\n\ntheorem same_day_property {day: String} \n  (h:\
  \ day ∈ DAYS) :\n  solveCompetitionDuration day day 1 20 = Sum.inr 7 ∨\n  solveCompetitionDuration\
  \ day day 1 20 = Sum.inl \"many\" :=\nsorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n\
  #eval solve_competition_duration \"saturday\" \"sunday\" 2 4\n\n/--\ninfo: 'many'\n\
  -/\n#guard_msgs in\n#eval solve_competition_duration \"monday\" \"wednesday\" 1\
  \ 20\n\n/--\ninfo: 'impossible'\n-/\n#guard_msgs in\n#eval solve_competition_duration\
  \ \"saturday\" \"sunday\" 3 5\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
