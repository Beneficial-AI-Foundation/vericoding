"vc-description": "Given a number, return a string with dash``` '-' ```marks before\
  \ and after each odd integer,  but do not begin or end the string with a dash mark.\n\
  \nEx:"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def dashatize (n : Option Int) : String := sorry\n\ntheorem dashatize_basic_props\
  \ {n : Int} :\n  let result := dashatize (some n);\n  -- Result is a string containing\
  \ only digits and dashes\n  (∀ c, c ∈ result.data → c = '-' ∨ c.isDigit)\n  -- No\
  \ consecutive dashes - expressed through data list\n  ∧ (∀ i, i + 1 < result.data.length\
  \ → \n      ¬(result.data[i]? = some '-' ∧ result.data[i+1]? = some '-'))\n  --\
  \ Doesn't start/end with dash\n  ∧ (result.length > 0 → result.front ≠ '-')\n  ∧\
  \ (result.length > 0 → result.back ≠ '-') := sorry\n"
"vc-theorems": "theorem dashatize_preserves_number {n : Int} :\n  let result := dashatize\
  \ (some n);\n  let digits := result.data.filter Char.isDigit;\n  String.toNat! (String.mk\
  \ digits) = Int.natAbs n := sorry\n\n\ntheorem dashatize_none :\n  dashatize none\
  \ = \"None\" := sorry\n\n/--\ninfo: '2-7-4'\n-/\n#guard_msgs in\n#eval dashatize\
  \ 274\n\n/--\ninfo: '5-3-1-1'\n-/\n#guard_msgs in\n#eval dashatize 5311\n\n/--\n\
  info: '86-3-20'\n-/\n#guard_msgs in\n#eval dashatize 86320\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
