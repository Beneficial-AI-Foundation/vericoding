"vc-description": "Description:\n\nThe mean (or average) is the most popular measure\
  \ of central tendency; however it does not behave very well when the data is skewed\
  \ (i.e. wages distribution). In such cases, it's better to use the median.\n\nYour\
  \ task for this kata is to find the median of an array consisting of n elements.\n\
  \nYou can assume that all inputs are arrays of numbers in integer format. For the\
  \ empty array your code should return `NaN` (false in JavaScript/`NULL` in PHP/`nil`\
  \ in Ruby).\n\nExamples:\n\nInput `[1, 2, 3, 4]` --> Median `2.5`\n\nInput `[3,\
  \ 4, 1, 2, 5]` --> Median `3`"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def median (lst: List Int) : Float := sorry\n\nnamespace MedianTheorems\n"
"vc-theorems": "theorem median_nonempty_returns_number (lst: List Int) (h: lst ≠ [])\
  \ : \n  let result := median lst\n  ∃ n: Float, result = n := sorry\n\n\ntheorem\
  \ median_empty_is_nan : \n  let result := median []\n  Float.isNaN result := sorry\n\
  \n\ntheorem median_same_elements {lst: List Int} (h: lst ≠ []) \n  (head: lst.head?\
  \ = some (lst.head!)) :\n  (∀ x ∈ lst, x = lst.head!) → \n  median lst = Float.ofInt\
  \ lst.head! := sorry\n\n\ntheorem median_sort_invariant {lst: List Int} (h: lst\
  \ ≠ []) :\n  median lst = median (List.mergeSort (· ≤ ·) lst) := sorry\n\nend MedianTheorems\n\
  \n/--\ninfo: 2.5\n-/\n#guard_msgs in\n#eval median [1, 2, 3, 4]\n\n/--\ninfo: 3\n\
  -/\n#guard_msgs in\n#eval median [3, 4, 1, 2, 5]\n\n/--\ninfo: 1\n-/\n#guard_msgs\
  \ in\n#eval median [1]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
