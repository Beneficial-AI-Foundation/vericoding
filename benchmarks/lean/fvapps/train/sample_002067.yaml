"vc-description": "Polycarp took $n$ videos, the duration of the $i$-th video is $a_i$\
  \ seconds. The videos are listed in the chronological order, i.e. the $1$-st video\
  \ is the earliest, the $2$-nd video is the next, ..., the $n$-th video is the last.\n\
  \nNow Polycarp wants to publish exactly $k$ ($1 \\le k \\le n$) posts in Instabram.\
  \ Each video should be a part of a single post. The posts should preserve the chronological\
  \ order, it means that the first post should contain one or more of the earliest\
  \ videos, the second post should contain a block (one or more videos) going next\
  \ and so on. In other words, if the number of videos in the $j$-th post is $s_j$\
  \ then:\n\n  $s_1+s_2+\\dots+s_k=n$ ($s_i>0$),  the first post contains the videos:\
  \ $1, 2, \\dots, s_1$;  the second post contains the videos: $s_1+1, s_1+2, \\dots,\
  \ s_1+s_2$;  the third post contains the videos: $s_1+s_2+1, s_1+s_2+2, \\dots,\
  \ s_1+s_2+s_3$;  ...  the $k$-th post contains videos: $n-s_k+1,n-s_k+2,\\dots,n$.\
  \ \n\nPolycarp is a perfectionist, he wants the total duration of videos in each\
  \ post to be the same.\n\nHelp Polycarp to find such positive integer values $s_1,\
  \ s_2, \\dots, s_k$ that satisfy all the conditions above.\n\n\n-----Input-----\n\
  \nThe first line contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 10^5$).\
  \ The next line contains $n$ positive integer numbers $a_1, a_2, \\dots, a_n$ ($1\
  \ \\le a_i \\le 10^4$), where $a_i$ is the duration of the $i$-th video.\n\n\n-----Output-----\n\
  \nIf solution exists, print \"Yes\" in the first line. Print $k$ positive integers\
  \ $s_1, s_2, \\dots, s_k$ ($s_1+s_2+\\dots+s_k=n$) in the second line. The total\
  \ duration of videos in each post should be the same. It can be easily proven that\
  \ the answer is unique (if it exists).\n\nIf there is no solution, print a single\
  \ line \"No\".\n\n\n-----Examples-----\nInput\n6 3\n3 3 1 4 1 6\n\nOutput\nYes\n\
  2 3 1 \nInput\n3 3\n1 1 1\n\nOutput\nYes\n1 1 1 \nInput\n3 3\n1 1 2\n\nOutput\n\
  No\nInput\n3 1\n1 10 100\n\nOutput\nYes\n3"
"vc-preamble": "import Imports.AllImports\n\ndef check_possible_partition (n k : Nat)\
  \ (arr : List Nat) : Option (List Nat) := sorry\n\ndef getPrefixSums (arr : List\
  \ Nat) (sizes : List Nat) : List Nat := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sumList : List Nat → Nat\n  | [] => 0\n  | x::xs => x + sumList\
  \ xs\n"
"vc-theorems": "theorem validate_partition_properties {n k : Nat} {arr : List Nat}\
  \ \n  (h1 : k ≤ n)\n  (h2 : 0 < sumList arr) :\n  match check_possible_partition\
  \ n k arr with\n  | none => True \n  | some result =>\n    -- Length matches k\n\
  \    result.length = k ∧\n    -- Sizes sum to n\n    sumList result = n ∧\n    --\
  \ All partitions have same sum\n    let partitions := getPrefixSums arr result;\n\
  \    match partitions with\n    | [] => True\n    | hd::_ => List.all partitions\
  \ (fun x => x = hd) := sorry\n\n\ntheorem impossible_partition {arr : List Nat}\n\
  \  (h : 0 < arr.length) :\n  check_possible_partition arr.length (arr.length + 1)\
  \ arr = none := sorry"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded"
