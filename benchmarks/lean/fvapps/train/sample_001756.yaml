"vc-description": "Given a binary tree root, a node X in the tree is named good if\
  \ in the path from root to X there are no nodes with a value greater than X.\nReturn\
  \ the number of good nodes in the binary tree.\n \nExample 1:\n\nInput: root = [3,1,4,3,null,1,5]\n\
  Output: 4\nExplanation: Nodes in blue are good.\nRoot Node (3) is always a good\
  \ node.\nNode 4 -> (3,4) is the maximum value in the path starting from the root.\n\
  Node 5 -> (3,4,5) is the maximum value in the path\nNode 3 -> (3,1,3) is the maximum\
  \ value in the path.\nExample 2:\n\nInput: root = [3,3,null,4,2]\nOutput: 3\nExplanation:\
  \ Node 2 -> (3, 3, 2) is not good, because \"3\" is higher than it.\nExample 3:\n\
  Input: root = [1]\nOutput: 1\nExplanation: Root is considered as good.\n \nConstraints:\n\
  \nThe number of nodes in the binary tree is in the range [1, 10^5].\nEach node's\
  \ value is between [-10^4, 10^4]."
"vc-preamble": "import Imports.AllImports\n\ndef goodNodes : TreeNode → Nat\n  | _\
  \ => sorry\n\n\ndef isLinearLeft : TreeNode → List Int → Prop\n  | _ , _ => sorry\n\
  \n\ndef countMaxSoFar : List Int → Nat\n  | _ => sorry \n\n\ndef numberOfNodes :\
  \ TreeNode → Nat \n  | _ => sorry\n\n\ndef allNodesHaveValue : TreeNode → Int →\
  \ Prop\n  | _, _ => sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isStrictlyDecreasing : TreeNode → Prop\n  | _ => sorry\n\n\
  /-- In a linear tree (only left children), number of good nodes equals number of\
  \ values \n    that are greater than or equal to all previous values -/"
"vc-theorems": "theorem goodNodes_linear_tree (tree : TreeNode) (path : List Int)\
  \ :\n  isLinearLeft tree path →\n  goodNodes tree = countMaxSoFar path := sorry\n\
  \n/-- The number of good nodes is always at least 1 (root is always good) -/\n\n\
  theorem goodNodes_at_least_one (tree : TreeNode) :\n  goodNodes tree ≥ 1 := sorry\
  \ \n\n/-- The number of good nodes never exceeds total number of nodes -/\n\ntheorem\
  \ goodNodes_upper_bound (tree : TreeNode) (size : Nat) :\n  numberOfNodes tree =\
  \ size →\n  goodNodes tree ≤ size := sorry\n\n/-- A single node tree has exactly\
  \ one good node -/\n\ntheorem goodNodes_single_node (val : Int) :\n  goodNodes (TreeNode.mk\
  \ val none none) = 1 := sorry\n\n/-- A tree with all same values has all nodes as\
  \ good nodes -/\n\ntheorem goodNodes_all_same_value (val : Int) (tree : TreeNode)\
  \ :\n  allNodesHaveValue tree val →\n  goodNodes tree = numberOfNodes tree := sorry\n\
  \n/-- A strictly decreasing tree has exactly one good node -/\n\ntheorem goodNodes_strictly_decreasing\
  \ (tree : TreeNode) :\n  isStrictlyDecreasing tree →\n  goodNodes tree = 1 := sorry\n\
  \n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval goodNodes TreeNode(3)\n\n/--\ninfo: 3\n\
  -/\n#guard_msgs in\n#eval goodNodes TreeNode(3)\n\n/--\ninfo: 1\n-/\n#guard_msgs\
  \ in\n#eval goodNodes TreeNode(1)\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
