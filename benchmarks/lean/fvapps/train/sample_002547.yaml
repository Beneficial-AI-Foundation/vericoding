"vc-description": "Two tortoises named ***A*** and ***B*** must run a race. ***A***\
  \ starts with an average speed of ```720 feet per hour```.\nYoung ***B*** knows\
  \ she runs faster than ***A***, and furthermore has not finished her cabbage.\n\n\
  When she starts, at last, she can see that ***A*** has a `70 feet lead` but ***B***'s\
  \ speed is `850 feet per hour`.\nHow long will it take ***B*** to catch ***A***?\n\
  \nMore generally:\ngiven two speeds `v1` (***A***'s speed, integer > 0) and `v2`\
  \ (***B***'s speed, integer > 0) and a lead `g` (integer > 0)\nhow long will it\
  \ take ***B*** to catch ***A***? \n\nThe result will be an array ```[hour, min,\
  \ sec]``` which is the time needed in hours, minutes and seconds (round down to\
  \ the nearest second)\nor a string in some languages.\n\nIf `v1 >= v2` then return\
  \ `nil`, `nothing`, `null`, `None` or `{-1, -1, -1}` for C++, C, Go, Nim, `[]` for\
  \ Kotlin or \"-1 -1 -1\".\n\n## Examples:\n(form of the result depends on the language)\n\
  ```\nrace(720, 850, 70) => [0, 32, 18] or \"0 32 18\"\nrace(80, 91, 37)   => [3,\
  \ 21, 49] or \"3 21 49\"\n```\n\n** Note: \n\n- See other examples in \"Your test\
  \ cases\".\n\n- In Fortran - as in any other language - the returned string is not\
  \ permitted to contain any redundant trailing whitespace: you can use dynamically\
  \ allocated character strings.\n\n** Hints for people who don't know how to convert\
  \ to hours, minutes, seconds:\n\n- Tortoises don't care about fractions of seconds\n\
  \n- Think of calculation by hand using only integers (in your code use or simulate\
  \ integer division)\n\n- or Google: \"convert decimal time to hours minutes seconds\""
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def race (v1 v2 g : Nat) : Option (Nat × Nat × Nat) := sorry\n\n\
  theorem race_slower_returns_none {v1 v2 g : Nat} :\n  v2 ≤ v1 → race v1 v2 g = none\
  \ := sorry\n"
"vc-theorems": "theorem race_result_non_negative {v1 v2 g : Nat} \n  (h : v2 > v1)\
  \ (result : Nat × Nat × Nat) :\n  race v1 v2 g = some result →\n  result.1 ≥ 0 ∧\
  \ result.2.1 ≥ 0 ∧ result.2.2 ≥ 0 := sorry\n\n\ntheorem race_result_valid_minutes_seconds\
  \ {v1 v2 g : Nat}\n  (h : v2 > v1) (result : Nat × Nat × Nat) :\n  race v1 v2 g\
  \ = some result →\n  result.2.1 < 60 ∧ result.2.2 < 60 := sorry\n\n\ntheorem race_satisfies_distance_equation\
  \ {v1 v2 g : Nat}\n  (h : v2 > v1) (result : Nat × Nat × Nat) :\n  race v1 v2 g\
  \ = some result →\n  (result.1 * 3600 + result.2.1 * 60 + result.2.2) * (v2 - v1)\
  \ = g * 3600 := sorry\n\n/--\ninfo: [0, 32, 18]\n-/\n#guard_msgs in\n#eval race\
  \ 720 850 70\n\n/--\ninfo: [3, 21, 49]\n-/\n#guard_msgs in\n#eval race 80 91 37\n\
  \n/--\ninfo: None\n-/\n#guard_msgs in\n#eval race 820 81 550\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
