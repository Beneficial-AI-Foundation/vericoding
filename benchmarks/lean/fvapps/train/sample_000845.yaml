"vc-description": "The entire network is under the inspection and direct control of\
  \ the Decepticons. They have learned our language through the World Wide Web and\
  \ can easily understand the messages which are being sent. Sam is trying to send\
  \ the information to Autobots to locate “ALL SPARK” which is the only source of\
  \ energy that can be used to create universe. He is bit cautious in sending the\
  \ message. He is sending the messages in a form of special pattern of string that\
  \ contains important message in form of substrings. But Decepticons have learnt\
  \ to recognize the Data Mining and string comparison patterns. He is sending a big\
  \ message in form of a string (say M) and let there are N smaller substrings. Decepticons\
  \ have to find whether each of these N substrings is a sub-string of M. All strings\
  \ consist of only alphanumeric characters.\n\n-----Input-----\nInput to the program\
  \ consists of two line. The first line contains the string M (where size of M should\
  \ be <=40). The next line contain a string S.\n\n-----Output-----\nOutput should\
  \ consist of a line with a character 'Y'/'N' indicating whether the string S is\
  \ a sub-string of String M or not.\n\n-----Example-----\nInput:\ntechtrishna online\
  \ event\nonlin\nOutput:\nY"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_substring (main_str : String) (sub_str : String) : String\
  \ := sorry\n\ntheorem is_substring_returns_y_or_n (main_str sub_str : String) :\n\
  \  (is_substring main_str sub_str = \"Y\") ∨ (is_substring main_str sub_str = \"\
  N\") := sorry\n"
"vc-theorems": "theorem empty_string_is_substring (main_str : String) :\n  is_substring\
  \ main_str \"\" = \"Y\" := sorry\n\n\ntheorem string_is_substring_of_itself (str\
  \ : String) :\n  is_substring str str = \"Y\" := sorry \n\n\ntheorem substring_result_matches_existence\
  \ (main_str sub_str : String) :\n  (is_substring main_str sub_str = \"Y\" ↔ ∃ a\
  \ b : String, a ++ sub_str ++ b = main_str) := sorry\n\n\ntheorem substring_of_concatenation_left\
  \ (s1 s2 : String) :\n  is_substring (s1 ++ s2) s1 = \"Y\" := sorry\n\n\ntheorem\
  \ substring_of_concatenation_right (s1 s2 : String) :\n  is_substring (s1 ++ s2)\
  \ s2 = \"Y\" := sorry\n\n/--\ninfo: 'Y'\n-/\n#guard_msgs in\n#eval is_substring\
  \ \"techtrishna online event\" \"onlin\"\n\n/--\ninfo: 'N'\n-/\n#guard_msgs in\n\
  #eval is_substring \"hello world\" \"xyz\"\n\n/--\ninfo: 'Y'\n-/\n#guard_msgs in\n\
  #eval is_substring \"python3\" \"thon\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
