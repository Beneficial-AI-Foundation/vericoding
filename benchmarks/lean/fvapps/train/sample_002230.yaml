"vc-description": "Denis was very sad after Nastya rejected him. So he decided to\
  \ walk through the gateways to have some fun. And luck smiled at him! When he entered\
  \ the first courtyard, he met a strange man who was selling something. \n\nDenis\
  \ bought a mysterious item and it was... Random permutation generator! Denis could\
  \ not believed his luck.\n\nWhen he arrived home, he began to study how his generator\
  \ works and learned the algorithm. The process of generating a permutation consists\
  \ of $n$ steps. At the $i$-th step, a place is chosen for the number $i$ $(1 \\\
  leq i \\leq n)$. The position for the number $i$ is defined as follows:\n\n  For\
  \ all $j$ from $1$ to $n$, we calculate $r_j$  — the minimum index such that $j\
  \ \\leq r_j \\leq n$, and the position $r_j$ is not yet occupied in the permutation.\
  \ If there are no such positions, then we assume that the value of $r_j$ is not\
  \ defined.  For all $t$ from $1$ to $n$, we calculate $count_t$  — the number of\
  \ positions $1 \\leq j \\leq n$ such that $r_j$ is defined and $r_j = t$.  Consider\
  \ the positions that are still not occupied by permutation and among those we consider\
  \ the positions for which the value in the $count$ array is maximum.  The generator\
  \ selects one of these positions for the number $i$. The generator can choose any\
  \ position. \n\nLet's have a look at the operation of the algorithm in the following\
  \ example:\n\n [Image] \n\nLet $n = 5$ and the algorithm has already arranged the\
  \ numbers $1, 2, 3$ in the permutation. Consider how the generator will choose a\
  \ position for the number $4$:\n\n  The values of $r$ will be $r = [3, 3, 3, 4,\
  \ \\times]$, where $\\times$ means an indefinite value.  Then the $count$ values\
  \ will be $count = [0, 0, 3, 1, 0]$.  There are only two unoccupied positions in\
  \ the permutation: $3$ and $4$. The value in the $count$ array for position $3$\
  \ is $3$, for position $4$ it is $1$.  The maximum value is reached only for position\
  \ $3$, so the algorithm will uniquely select this position for number $4$. \n\n\
  Satisfied with his purchase, Denis went home. For several days without a break,\
  \ he generated permutations. He believes that he can come up with random permutations\
  \ no worse than a generator. After that, he wrote out the first permutation that\
  \ came to mind $p_1, p_2, \\ldots, p_n$ and decided to find out if it could be obtained\
  \ as a result of the generator.\n\nUnfortunately, this task was too difficult for\
  \ him, and he asked you for help. It is necessary to define whether the written\
  \ permutation could be obtained using the described algorithm if the generator always\
  \ selects the position Denis needs.\n\n\n-----Input-----\n\nThe first line contains\
  \ a single integer $t$ $(1 \\leq t \\leq 10^5)$  — the number of test cases. Then\
  \ the descriptions of the test cases follow.\n\nThe first line of the test case\
  \ contains a single integer $n$ $(1 \\leq n \\leq 10^5)$  — the size of the permutation.\n\
  \nThe second line of the test case contains $n$ different integers $p_1, p_2, \\\
  ldots, p_n$ ($1 \\leq p_i \\leq n$)  — the permutation written by Denis.\n\nIt is\
  \ guaranteed that the sum of $n$ over all test cases doesn't exceed $10^5$.\n\n\n\
  -----Output-----\n\nPrint \"Yes\" if this permutation could be obtained as a result\
  \ of the generator. Otherwise, print \"No\".\n\nAll letters can be displayed in\
  \ any case.\n\n\n-----Example-----\nInput\n5\n5\n2 3 4 5 1\n1\n1\n3\n1 3 2\n4\n\
  4 2 3 1\n5\n1 5 2 4 3\n\nOutput\nYes\nYes\nNo\nYes\nNo\n\n\n\n-----Note-----\n\n\
  Let's simulate the operation of the generator in the first test.\n\nAt the $1$ step,\
  \ $r = [1, 2, 3, 4, 5], count = [1, 1, 1, 1, 1]$. The maximum value is reached in\
  \ any free position, so the generator can choose a random position from $1$ to $5$.\
  \ In our example, it chose $5$.\n\nAt the $2$ step, $r = [1, 2, 3, 4, \\times],\
  \ count = [1, 1, 1, 1, 0]$. The maximum value is reached in positions from $1$ to\
  \ $4$, so the generator can choose a random position among them. In our example,\
  \ it chose $1$.\n\nAt the $3$ step, $r = [2, 2, 3, 4, \\times], count = [0, 2, 1,\
  \ 1, 0]$. The maximum value is $2$ and is reached only at the $2$ position, so the\
  \ generator will choose this position.\n\nAt the $4$ step, $r = [3, 3, 3, 4, \\\
  times], count = [0, 0, 3, 1, 0]$. The maximum value is $3$ and is reached only at\
  \ the $3$ position, so the generator will choose this position.\n\nAt the $5$ step,\
  \ $r = [4, 4, 4, 4, \\times], count = [0, 0, 0, 4, 0]$. The maximum value is $4$\
  \ and is reached only at the $4$ position, so the generator will choose this position.\n\
  \nIn total, we got a permutation of $2, 3, 4, 5, 1$, that is, a generator could\
  \ generate it."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def can_generate_permutation (n : Nat) (perm : List Nat) : Bool\
  \ := sorry\n\ntheorem identity_permutation_valid (n : Nat) (h : n > 0) :\n  can_generate_permutation\
  \ n (List.range' 1 n) = true := sorry\n"
"vc-theorems": "theorem rotated_minimum_valid {n : Nat} {perm : List Nat} \n  (h₁\
  \ : n = perm.length) \n  (h₂ : perm ≠ []) \n  (h₃ : ∀ k, k ∈ perm → k ∈ List.range'\
  \ 1 n)\n  (h₄ : ∀ i j, i < j → perm.get i < perm.get j → perm.get i ≤ perm.head!)\
  \ :\n  can_generate_permutation n perm = true := sorry\n\n\ntheorem specific_pattern_valid\
  \ (n : Nat) (h : n ≥ 2) :\n  let perm := (List.range' 2 n) ++ [1]\n  can_generate_permutation\
  \ n perm = true := sorry\n\n\ntheorem length_preserved {n : Nat} {xs : List Nat}\
  \ : \n  n = xs.length → xs.length = n := sorry\n\n\ntheorem input_length_matches\
  \ {n : Nat} {perm : List Nat} :\n  can_generate_permutation n perm → perm.length\
  \ = n := sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval can_generate_permutation\
  \ 5 [2, 3, 4, 5, 1]\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval can_generate_permutation\
  \ 3 [1, 3, 2]\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval can_generate_permutation\
  \ 4 [4, 2, 3, 1]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
