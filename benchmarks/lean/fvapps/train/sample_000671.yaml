"vc-description": "You are a king and you are at war. If the enemy breaks through\
  \ your frontline you lose.\nEnemy can break the line only if the sum of morale of\
  \ any $K$ continuous soldiers is strictly less than $M$. So, you being a motivational\
  \ orator decides to boost their morale by giving a speech. On hearing it morale\
  \ of a soldier multiplies by $X$ which depends on you and your speech (i.e. $X$\
  \ can be any positive value) but atmost only $K$ continuous speakers can hear your\
  \ speech.\nN soldiers are standing on the frontline with $A[i]$ morale. \nDetermine\
  \ the minimum number of speeches you need to give.\n\n-----Input:-----\nThe first\
  \ line contains three space seperated integers $N,K,M$.\nThe next line contains\
  \ $N$ space integers, ith of which denotes the morale of $ith$ soldier.\n\n-----Output:-----\n\
  Output the minimum number of speeches required. In case if it is impossible to achieve,\
  \ print $-1$.\n\n-----Constraints:-----\n$1 \\leq N,M \\leq 10^5$\n$1 \\leq k \\\
  leq N$\n$0 \\leq Ai \\leq 10^5$ \n\n-----Sample Input:-----\n6 2 5\n1 1 1 1 1 1\n\
  \n-----Sample Output:-----\n2\n\n-----Explanation:-----\nWe multiply 2nd ,3rd  and\
  \ 5th,6th by 5. Resulting array will be 1 5 5 1 5 5."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def min_speeches (n k m : Nat) (arr : List Nat) : Int := sorry\n\
  \n-- Theorem 1: If input array contains 0, result is -1"
"vc-theorems": "theorem min_speeches_zero_in_array\n  (n k m : Nat)\n  (arr : List\
  \ Nat)\n  (h1 : k ≤ n)\n  (h2 : arr.length = n)\n  (h3 : ∃ x ∈ arr, x = 0) :\n \
  \ min_speeches n k m arr = -1 := sorry\n\n-- Theorem 2: If no zeros in array, result\
  \ is non-negative\n\ntheorem min_speeches_no_zero_nonneg\n  (n k m : Nat)\n  (arr\
  \ : List Nat)\n  (h1 : k ≤ n) \n  (h2 : arr.length = n)\n  (h3 : ∀ x ∈ arr, x ≠\
  \ 0) :\n  min_speeches n k m arr ≥ 0 := sorry\n\n-- Theorem 3: Large enough values\
  \ need 0 speeches\n\ntheorem min_speeches_large_values_zero\n  (n k : Nat)\n  (h\
  \ : k ≤ n) :\n  min_speeches n k 1 (List.replicate n 1000) = 0 := sorry\n\n/--\n\
  info: 3\n-/\n#guard_msgs in\n#eval min_speeches 6 2 5 [1, 1, 1, 1, 1, 1]\n\n/--\n\
  info: 2\n-/\n#guard_msgs in\n#eval min_speeches 5 2 4 [1, 1, 1, 1, 1]\n\n/--\ninfo:\
  \ -1\n-/\n#guard_msgs in\n#eval min_speeches 4 2 3 [0, 1, 1, 0]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
