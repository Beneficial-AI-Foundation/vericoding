"vc-description": "The Challenge\n-------------\nYou'll need to implement a simple\
  \ lexer type. It should take in an input string through the constructor (or the\
  \ parameter, for Javascript), and break it up into typed-tokens (in python, C# and\
  \ Java, you'll have to manage `null/None` input too, resulting in the same behavior\
  \ than an empty string). You'll need to implement the necessary methods (aaccording\
  \ to your language) to make the Simplexer object behave like an iterator, Meaning\
  \ that it returns a token (assuming one is available) object each time it a `next`\
  \ (`Current` field in C#) method would be called. If no tokens are available, an\
  \ exception should be thrown (idealy: `StopIteration` in python, `InvalidOperationException`\
  \ in C# and `NoSuchElementException` in Java).\n\nTokens are represented by Token\
  \ objects, which define two properties as strings: `text`, and `type`. Constructor\
  \ is `Token(text, type)`.\n\n**C# Notes**:\n`Iterator` is an extension of `IEnumerator`\
  \ with default implementations for `Reset()`, `Dispose()` and `IEnumerator.Current`\
  \ as these are not need to pass the challenge. You only need to override `MoveNext()`\
  \ and `Current { get; }`.\n\nToken Types\n-----------\nThere are 7 tokens types\
  \ that your lexer will need to produce: `identifier`, `string`, `integer`, `boolean`,\
  \ `keyword`, `operator`, and `whitespace`. To create the token, you'd need to pass\
  \ in the token value (the text) and the token type as strings, so for example, a\
  \ simple integer token could be created with `new Token(\"1\", \"integer\")` (Note:\
  \ no default values or default constructor are provided, so use `new Token(\"\"\
  ,\"\")` if you want a default Token object).\n\nToken Grammar\n--------------\n\
  Here's a table of the grammars for the various token types:\n```\ninteger : Any\
  \ sequence of one or more digits.\n\nboolean : true or false.\n\nstring : Any sequence\
  \ of characters surrounded by \"double quotes\".\n\noperator : The characters +,\
  \ -, *, /, %, (, ), and =.\n\nkeyword : The following are keywords: if, else, for,\
  \ while, return, func, and break.\n\nwhitespace : Matches standard whitespace characters\
  \ (space, newline, tab, etc.)\nConsecutive whitespace characters should be matched\
  \ together.\n\nidentifier : Any sequence of alphanumber characters, as well as underscore\
  \ and dollar sign,\nand which doesn't start with a digit. Make sure that keywords\
  \ aren't matched as identifiers!\n```"
"vc-preamble": "import Imports.AllImports\n\ndef Simplexer : Type := String → List\
  \ Token\ndef empty : Simplexer := sorry"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def scan : String → Token := sorry\n\ntheorem empty_simplexer :\
  \ \n  empty \"\" = [] := sorry\n"
"vc-theorems": "theorem integer_token :\n  scan \"123\" = ⟨\"123\", \"integer\"⟩ :=\
  \ sorry\n\n\ntheorem identifier_token :\n  scan \"abc\" = ⟨\"abc\", \"identifier\"\
  ⟩ := sorry\n\n\ntheorem keyword_token :\n  scan \"if\" = ⟨\"if\", \"keyword\"⟩ :=\
  \ sorry\n\n\ntheorem whitespace_token :\n  scan \" \" = ⟨\" \", \"whitespace\"⟩\
  \ := sorry\n\n\ntheorem operator_token :\n  scan \"+\" = ⟨\"+\", \"operator\"⟩ :=\
  \ sorry\n\n\ntheorem boolean_token :\n  scan \"true\" = ⟨\"true\", \"boolean\"⟩\
  \ := sorry\n\n/--\ninfo: len(expected_tokens)\n-/\n#guard_msgs in\n#eval len list(lexer)\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
