"vc-description": "Chef has  $N$ doggo (dogs) , Lets number them $1$ to $N$.\n\nChef\
  \ decided to build houses for each, but he soon realizes that keeping so many dogs\
  \ at one place may be messy. So he decided to divide them into several groups called\
  \ doggo communities. Let the total no. of groups be $K$ . In a community, paths\
  \ between pairs of houses can be made so that doggo can play with each other. But\
  \ there cannot be a path between two houses of different communities for sure. Chef\
  \ wanted to make maximum no. of paths such that the total path is not greater then\
  \ $K$.\nLet’s visualize this problem in an engineer's way :)\nThe problem is to\
  \ design a graph with max edge possible such that the total no. of edges should\
  \ not be greater than the total no. of connected components.\n\n-----INPUT FORMAT-----\n\
  - First line of each test case file contain $T$ , denoting total number of test\
  \ cases.\n- $ith$ test case contain only one line with a single integer $N$ , denoting\
  \ the number of dogs(vertex)\n\n-----OUTPUT FORMAT-----\n- For each test case print\
  \ a line with a integer , denoting the maximum possible path possible.\n\n-----Constraints-----\n\
  - $1 \\leq T \\leq 10000$\n- $1 \\leq N \\leq 10^9$ \n\n-----Sub-Tasks-----\n- $20\
  \ Points$\n- $1 \\leq N \\leq 10^6$ \n\n-----Sample Input-----\n1\n\n4\n\n-----Sample\
  \ Output-----\n2\n\n-----Explanation-----\n4 houses can be made with  like this:\n\
  \ncommunity #1  : [1 - 2  ]\n\ncommunity #2 :  [3 - 4 ]\n\nor  [1 - 2 - 3]  , [\
  \ 4 ]\n\nIn both cases the maximum possible path is 2."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def max_doggo_paths (n: Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem max_doggo_paths_nonneg (n: Nat) : \n  max_doggo_paths n ≥\
  \ 0 :=\nsorry\n\n\ntheorem max_doggo_paths_less_than_input {n: Nat} (h: n > 1) :\n\
  \  max_doggo_paths n < n :=\nsorry\n\n\ntheorem max_doggo_paths_one :\n  max_doggo_paths\
  \ 1 = 0 :=\nsorry\n\n\ntheorem max_doggo_paths_monotone {n: Nat} (h: n ≥ 2) :\n\
  \  max_doggo_paths n ≥ max_doggo_paths (n-1) :=\nsorry\n\n\ntheorem max_doggo_paths_three\
  \ :\n  max_doggo_paths 3 = 1 :=\nsorry\n\n\ntheorem max_doggo_paths_six :\n  max_doggo_paths\
  \ 6 = 3 :=\nsorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval max_doggo_paths 4\n\
  \n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval max_doggo_paths 10\n\n/--\ninfo: 0\n-/\n\
  #guard_msgs in\n#eval max_doggo_paths 1\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
