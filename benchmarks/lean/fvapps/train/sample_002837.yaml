"vc-description": "A `bouncy number` is a positive integer whose digits neither increase\
  \ nor decrease. For example, 1235 is an increasing number, 5321 is a decreasing\
  \ number, and 2351 is a bouncy number. By definition, all numbers under 100 are\
  \ non-bouncy, and 101 is the first bouncy number.\n\nDetermining if a number is\
  \ bouncy is easy, but counting all bouncy numbers with N digits can be challenging\
  \ for large values of N. To complete this kata, you must write a function that takes\
  \ a number N and return the count of bouncy numbers with N digits. For example,\
  \ a \"4 digit\" number includes zero-padded, smaller numbers, such as 0001, 0002,\
  \ up to 9999.\n\nFor clarification, the bouncy numbers between 100 and 125 are:\
  \ 101, 102, 103, 104, 105, 106, 107, 108, 109, 120, and 121."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def bouncyCount (m : Nat) : Nat := sorry\n\ntheorem bouncy_count_non_negative\
  \ (m : Nat) :\n  bouncyCount m ≥ 0 := sorry\n"
"vc-theorems": "theorem bouncy_count_upper_bound (m : Nat) (h : m ≤ 10) :\n  bouncyCount\
  \ m ≤ 10^m := sorry\n\n\ntheorem bouncy_count_monotone (m : Nat) :\n  bouncyCount\
  \ m ≤ bouncyCount (m + 1) := sorry\n\n\ntheorem bouncy_count_zero_small_inputs :\n\
  \  ∀ m : Nat, m < 3 → bouncyCount m = 0 := sorry\n\n/--\ninfo: 0\n-/\n#guard_msgs\
  \ in\n#eval bouncy_count 0\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval bouncy_count\
  \ 1\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval bouncy_count 2\n\n/--\ninfo: 525\n\
  -/\n#guard_msgs in\n#eval bouncy_count 3\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
