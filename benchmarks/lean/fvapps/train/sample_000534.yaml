"vc-description": "The chef is trying to solve some pattern problems, Chef wants your\
  \ help to code it. Chef has one number K to form a new pattern. Help the chef to\
  \ code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$,\
  \ the number of test cases. Then the test cases follow. \n- Each test case contains\
  \ a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test\
  \ case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n\
  - $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n4\n1\n2\n3\n4\n\n-----Sample\
  \ Output:-----\n*\n*\n*\n*\n***\n***\n*\n*\n***\n***\n*****\n*****\n*\n*\n***\n\
  ***\n*****\n*****\n*******\n*******\n\n-----EXPLANATION:-----\nNo need, else pattern\
  \ can be decode easily."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def generate_pattern (k : Nat) : List String :=\n  sorry\n"
"vc-theorems": "theorem pattern_length {k : Nat} (h : k > 0) :\n  (generate_pattern\
  \ k).length = 2 * k :=\n  sorry\n\n\ntheorem paired_lines {k : Nat} (h : k > 0)\
  \ :\n  ∀ i, i < k → \n    List.get! (generate_pattern k) (2*i) = List.get! (generate_pattern\
  \ k) (2*i + 1) :=\n  sorry\n\n\ntheorem pattern_contents {k : Nat} (h : k > 0) :\n\
  \  ∀ line ∈ generate_pattern k,\n    ∀ c ∈ line.data, c = '*' :=\n  sorry\n\n\n\
  theorem increasing_widths {k : Nat} (h : k > 0) :\n  ∀ i, i < k - 1 →\n    (List.get!\
  \ (generate_pattern k) (2*i)).length < (List.get! (generate_pattern k) (2*i + 2)).length\
  \ :=\n  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
