"vc-description": "Genos recently installed the game Zuma on his phone. In Zuma there\
  \ exists a line of n gemstones, the i-th of which has color c_{i}. The goal of the\
  \ game is to destroy all the gemstones in the line as quickly as possible.\n\nIn\
  \ one second, Genos is able to choose exactly one continuous substring of colored\
  \ gemstones that is a palindrome and remove it from the line. After the substring\
  \ is removed, the remaining gemstones shift to form a solid line again. What is\
  \ the minimum number of seconds needed to destroy the entire line?\n\nLet us remind,\
  \ that the string (or substring) is called palindrome, if it reads same backwards\
  \ or forward. In our case this means the color of the first gemstone is equal to\
  \ the color of the last one, the color of the second gemstone is equal to the color\
  \ of the next to last and so on.\n\n\n-----Input-----\n\nThe first line of input\
  \ contains a single integer n (1 ≤ n ≤ 500) — the number of gemstones.\n\nThe second\
  \ line contains n space-separated integers, the i-th of which is c_{i} (1 ≤ c_{i}\
  \ ≤ n) — the color of the i-th gemstone in a line.\n\n\n-----Output-----\n\nPrint\
  \ a single integer — the minimum number of seconds needed to destroy the entire\
  \ line.\n\n\n-----Examples-----\nInput\n3\n1 2 1\n\nOutput\n1\n\nInput\n3\n1 2 3\n\
  \nOutput\n3\n\nInput\n7\n1 4 4 2 3 2 1\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn\
  \ the first sample, Genos can destroy the entire line in one second.\n\nIn the second\
  \ sample, Genos can only destroy one gemstone at a time, so destroying three gemstones\
  \ takes three seconds.\n\nIn the third sample, to achieve the optimal time of two\
  \ seconds, destroy palindrome 4 4 first and then destroy palindrome 1 2 3 2 1."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def min_seconds_to_destroy (colors : List Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem min_seconds_positive (colors : List Nat) :\n  colors ≠ []\
  \ → min_seconds_to_destroy colors > 0 :=\n  sorry\n\n\ntheorem min_seconds_upper_bound\
  \ (colors : List Nat) :\n  colors ≠ [] → min_seconds_to_destroy colors ≤ colors.length\
  \ :=\n  sorry\n\n\ntheorem min_seconds_single_color (colors : List Nat) (h : ∀ i\
  \ j, i < colors.length → j < colors.length → colors[i]! = colors[j]!) :\n  min_seconds_to_destroy\
  \ colors = 1 :=\n  sorry\n\n\ntheorem min_seconds_adjacent_match (colors : List\
  \ Nat) :\n  colors.length ≥ 2 →\n  (∃ i, i < colors.length - 1 ∧ colors[i]! = colors[i+1]!)\
  \ →\n  min_seconds_to_destroy colors < colors.length :=\n  sorry\n\n\ntheorem min_seconds_symmetric\
  \ (colors : List Nat) :\n  min_seconds_to_destroy colors = min_seconds_to_destroy\
  \ colors.reverse :=\n  sorry\n\n\ntheorem min_seconds_all_different (n : Nat) (colors\
  \ : List Nat)\n  (h1 : colors.length = n)\n  (h2 : ∀ i j, i < n → j < n → i ≠ j\
  \ → colors[i]! ≠ colors[j]!) :\n  min_seconds_to_destroy colors = n :=\n  sorry\n\
  \n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval min_seconds_to_destroy [1, 2, 1]\n\n/--\n\
  info: 3\n-/\n#guard_msgs in\n#eval min_seconds_to_destroy [1, 2, 3]\n\n/--\ninfo:\
  \ 2\n-/\n#guard_msgs in\n#eval min_seconds_to_destroy [1, 4, 4, 2, 3, 2, 1]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
