"vc-description": "A rectangle can be split up into a grid of 1x1 squares, the amount\
  \ of which being equal to the product of the two dimensions of the rectangle. Depending\
  \ on the size of the rectangle, that grid of 1x1 squares can also be split up into\
  \ larger squares, for example a 3x2 rectangle has a total of 8 squares, as there\
  \ are 6 distinct 1x1 squares, and two possible 2x2 squares. A 4x3 rectangle contains\
  \ 20 squares.\nYour task is to write a function `findSquares` that returns the total\
  \ number of squares for any given rectangle, the dimensions of which being given\
  \ as two integers with the first always being equal to or greater than the second."
"vc-preamble": "import Imports.AllImports\n\ndef findSquares (x y : Nat) : Nat :=\
  \ sorry\n\n-- Result should be non-negative"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sum_squares (n : Nat) : Nat :=\n  Nat.rec 0 (fun k res => res\
  \ + k*k) n\n"
"vc-theorems": "theorem findSquares_nonneg (x y : Nat) : \n  findSquares x y ≥ 0 :=\
  \ sorry\n\n-- For 0 dimensions, result should be 0  \n\ntheorem findSquares_zero\
  \ (x y : Nat) :\n  x = 0 ∨ y = 0 → findSquares x y = 0 := sorry\n\n-- Result should\
  \ be x*y for 1xN rectangles\n\ntheorem findSquares_stripe (x y : Nat) :\n  y = 1\
  \ → findSquares x y = x := sorry\n\n-- For a square, result should be sum of squares\
  \ from 1 to side length\n\ntheorem findSquares_square (n : Nat) : \n  findSquares\
  \ n n = sum_squares n := sorry\n\n/--\ninfo: 8\n-/\n#guard_msgs in\n#eval findSquares\
  \ 3 2\n\n/--\ninfo: 20\n-/\n#guard_msgs in\n#eval findSquares 4 3\n\n/--\ninfo:\
  \ 100\n-/\n#guard_msgs in\n#eval findSquares 11 4\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
