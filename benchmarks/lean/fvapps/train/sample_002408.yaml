"vc-description": "Given an unsorted array of integers, find the length of longest\
  \ continuous increasing subsequence (subarray).\n\n\nExample 1:\n\nInput: [1,3,5,4,7]\n\
  Output: 3\nExplanation: The longest continuous increasing subsequence is [1,3,5],\
  \ its length is 3. \nEven though [1,3,5,7] is also an increasing subsequence, it's\
  \ not a continuous one where 5 and 7 are separated by 4. \n\n\n\nExample 2:\n\n\
  Input: [2,2,2,2,2]\nOutput: 1\nExplanation: The longest continuous increasing subsequence\
  \ is [2], its length is 1. \n\n\n\nNote:\nLength of the array will not exceed 10,000."
"vc-preamble": "import Imports.AllImports\n\ndef find_length_of_lcis (nums : List\
  \ Int) : Nat := sorry\n\ntheorem lcis_length_properties (nums : List Int) : \n \
  \ let result := find_length_of_lcis nums\n  result ≥ 0 ∧ \n  result ≤ nums.length\
  \ ∧\n  (nums.length = 0 → result = 0) ∧ \n  (nums.length > 0 → result ≥ 1) := sorry\n\
  \n\ndef is_strictly_increasing (nums : List Int) (i : Nat) : Bool :=\n  i > 0 &&\
  \ i < nums.length && nums[i]! > nums[i-1]!\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_max_increasing (nums : List Int) : Nat := sorry"
"vc-theorems": "/--\ninfo: 3\n-/\n#guard_msgs in\n#eval find_length_of_lcis [1, 3,\
  \ 5, 4, 7]\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval find_length_of_lcis [2, 2,\
  \ 2, 2, 2]\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval find_length_of_lcis [1, 3,\
  \ 5, 7]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
