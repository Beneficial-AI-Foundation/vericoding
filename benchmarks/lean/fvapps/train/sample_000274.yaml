"vc-description": "Given two strings s and t, your goal is to convert s into t in k moves\
  \ or less.\nDuring the ith (1 <= i <= k) move you can:\n\nChoose any index j (1-indexed)\
  \ from s, such that 1 <= j <= s.length and j has not been chosen in any previous\
  \ move, and shift the character at that index i times.\nDo nothing.\n\nShifting\
  \ a character means replacing it by the next letter in the alphabet (wrapping around\
  \ so that 'z' becomes 'a'). Shifting a character by i means applying the shift operations i times.\n\
  Remember that any index j can be picked at most once.\nReturn true if it's possible\
  \ to convert s into t in no more than k moves, otherwise return false.\n \nExample\
  \ 1:\nInput: s = \"input\", t = \"ouput\", k = 9\nOutput: true\nExplanation: In\
  \ the 6th move, we shift 'i' 6 times to get 'o'. And in the 7th move we shift 'n'\
  \ to get 'u'.\n\nExample 2:\nInput: s = \"abc\", t = \"bcd\", k = 10\nOutput: false\n\
  Explanation: We need to shift each character in s one time to convert it into t.\
  \ We can shift 'a' to 'b' during the 1st move. However, there is no way to shift\
  \ the other characters in the remaining moves to obtain t from s.\n\nExample 3:\n\
  Input: s = \"aab\", t = \"bbb\", k = 27\nOutput: true\nExplanation: In the 1st move,\
  \ we shift the first 'a' 1 time to get 'b'. In the 27th move, we shift the second\
  \ 'a' 27 times to get 'b'.\n\n \nConstraints:\n\n1 <= s.length, t.length <= 10^5\n\
  0 <= k <= 10^9\ns, t contain only lowercase English letters."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def can_convert_string (s t : String) (k : Nat) : Bool := sorry\n\
  \ntheorem equal_length_strings_zero_k \n  {s t : String}\n  (h_len : s.length =\
  \ t.length) :\n  can_convert_string s t 0 = (s = t) := sorry\n"
"vc-theorems": "theorem different_lengths\n  {s t : String}\n  {k : Nat}\n  (h_diff_len\
  \ : s.length ≠ t.length) :\n  can_convert_string s t k = false := sorry\n\n\ntheorem\
  \ identical_strings\n  {s : String}\n  {k : Nat} :\n  can_convert_string s s k =\
  \ true := sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval can_convert_string\
  \ \"input\" \"ouput\" 9\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval can_convert_string\
  \ \"abc\" \"bcd\" 10\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval can_convert_string\
  \ \"aab\" \"bbb\" 27\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
