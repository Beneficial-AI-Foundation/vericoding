"vc-description": "There is an event in DUCS where boys get a chance to show off their\
  \ skills to impress girls. The boy who impresses the maximum number of girls will\
  \ be honoured with the title “Charming Boy of the year”.\nThere are $N$ girls in\
  \ the department. Each girl gives the name of a boy who impressed her the most.\
  \ You need to find the name of a boy who will be honoured with the title. \nIf there\
  \ are more than one possible winners, then the one with the lexicographically smallest\
  \ name is given the title. \nIt is guaranteed that each boy participating in the\
  \ event has a unique name.\n\n-----Input-----\n- The first line of the input contains\
  \ a single integer $T$ denoting the number of test cases. The description of $T$\
  \ test cases follows. \n- The first line of each test case contains an integer $N$\
  \ denoting the number of girls.\n- The second line contains $N$ space-separated\
  \ strings $S_1, S_2, \\ldots, S_N$, denoting the respective names given by the girls.\n\
  \n-----Output-----\nFor each test case, print a single line containing a string\
  \ — the name of the boy who impressed the maximum number of girls. In case of a\
  \ tie, print the lexicographically smallest name.\n\n-----Constraints-----\n- $1\
  \ \\leq T \\leq 100$\n- $1 \\leq N \\leq 10^5$\n- $1 \\leq |S_i| \\leq 10$, for\
  \ each valid $i$\n$(|S_i|$ is the length of the string $S_i)$\n- For each valid\
  \ $i$, $S_i$ contains only lowercase English alphabets\n- Sum of $N$ over all the\
  \ test cases is $\\leq 10^6$\n\n-----Subtasks-----\n- 30 points: $1 \\leq N \\leq\
  \ 100$\n- 70 points: original constraints\n\n-----Sample Input-----\n2\n\n10\n\n\
  john berry berry thomas thomas john john berry thomas john\n\n4\n\nramesh suresh\
  \ suresh ramesh   \n\n-----Sample Output-----\njohn\n\nramesh"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_charming_boy (n : Nat) (votes : List String) : String\
  \ :=\n  sorry\n"
"vc-theorems": "theorem find_charming_boy_in_votes (n : Nat) (votes : List String)\
  \ :\n  votes ≠ [] → find_charming_boy n votes ∈ votes :=\n  sorry\n\n\ntheorem find_charming_boy_is_top_voted\
  \ (n : Nat) (votes : List String) :\n  votes ≠ [] →\n  let result := find_charming_boy\
  \ n votes \n  let count := votes.countP (· = result)\n  let max_count := (votes.map\
  \ (λ v => votes.countP (· = v))).maximum?.get!\n  count = max_count :=\n  sorry\n\
  \n\ntheorem find_charming_boy_is_lex_min (n : Nat) (votes : List String) :\n  votes\
  \ ≠ [] →\n  let result := find_charming_boy n votes\n  let count := votes.countP\
  \ (· = result)\n  ∀ v ∈ votes, votes.countP (· = v) = count → result ≤ v :=\n  sorry\n\
  \n\ntheorem find_charming_boy_order_independent (n : Nat) (votes₁ votes₂ : List\
  \ String) :\n  votes₁.length = n →\n  votes₂.length = n →\n  (∀ v, votes₁.countP\
  \ (· = v) = votes₂.countP (· = v)) →\n  find_charming_boy n votes₁ = find_charming_boy\
  \ n votes₂ :=\n  sorry\n\n\ntheorem find_charming_boy_duplicate_invariant (n : Nat)\
  \ (votes : List String) :\n  votes.length = n →\n  find_charming_boy n votes = find_charming_boy\
  \ (2*n) (votes ++ votes) :=\n  sorry\n\n/--\ninfo: 'john'\n-/\n#guard_msgs in\n\
  #eval find_charming_boy 10 \"john berry berry thomas thomas john john berry thomas\
  \ john\".split()\n\n/--\ninfo: 'ramesh'\n-/\n#guard_msgs in\n#eval find_charming_boy\
  \ 4 \"ramesh suresh suresh ramesh\".split()\n\n/--\ninfo: 'andy'\n-/\n#guard_msgs\
  \ in\n#eval find_charming_boy 5 \"andy bob bob andy charlie\".split()\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
