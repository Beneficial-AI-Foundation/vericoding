"vc-description": "Your task is to write a function that takes two or more objects\
  \ and returns a new object which combines all the input objects. \n\nAll input object\
  \ properties will have only numeric values. Objects are combined together so that\
  \ the values of matching keys are added together.\n\nAn example:\n\n```python\n\
  objA = { 'a': 10, 'b': 20, 'c': 30 }\nobjB = { 'a': 3, 'c': 6, 'd': 3 }\ncombine(objA,\
  \ objB) # Returns { a: 13, b: 20, c: 36, d: 3 }\n```\n\nThe combine function should\
  \ be a good citizen, so should not mutate the input objects."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def combine : List (String × Int) → List (String × Int) → List\
  \ (String × Int) := sorry\n\ndef combineMulti : List (List (String × Int)) → List\
  \ (String × Int) := sorry\n"
"vc-theorems": "theorem combine_key_preservation {d1 d2 : List (String × Int)} :\n\
  \  ∀ k, (combine d1 d2).any (λ p => p.1 = k) ↔ \n       d1.any (λ p => p.1 = k)\
  \ ∨ d2.any (λ p => p.1 = k) := sorry\n\n\ntheorem combine_value_sum {d1 d2 : List\
  \ (String × Int)} (k : String) :\n  let v1 := (d1.find? (λ p => p.1 = k)).map Prod.snd\
  \ |>.getD 0\n  let v2 := (d2.find? (λ p => p.1 = k)).map Prod.snd |>.getD 0\n  let\
  \ vr := ((combine d1 d2).find? (λ p => p.1 = k)).map Prod.snd |>.getD 0\n  vr =\
  \ v1 + v2 := sorry\n\n\ntheorem combine_single_dict {d : List (String × Int)} :\n\
  \  combine d [] = d := sorry \n\n\ntheorem combine_with_empty {d : List (String\
  \ × Int)} :\n  combine d [] = d ∧ combine [] d = d := sorry\n\n\ntheorem combine_associative\
  \ {d1 d2 d3 : List (String × Int)} :\n  combine (combine d1 d2) d3 = combine d1\
  \ (combine d2 d3) := sorry\n\n/--\ninfo: {'a': 13, 'b': 20, 'c': 36, 'd': 3}\n-/\n\
  #guard_msgs in\n#eval combine {\"a\": 10, \"b\": 20, \"c\": 30} {\"a\": 3, \"c\"\
  : 6, \"d\": 3}\n\n/--\ninfo: {}\n-/\n#guard_msgs in\n#eval combine {} {}\n\n/--\n\
  info: {'x': 3, 'y': 7, 'z': 5}\n-/\n#guard_msgs in\n#eval combine {\"x\": 1} {\"\
  x\": 2, \"y\": 3} {\"y\": 4, \"z\": 5}\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
