"vc-description": "## Task\n\nGiven a string, add the fewest number of characters\
  \ possible from the front or back to make it a palindrome.\n\n## Example\n\nFor\
  \ the input `cdcab`, the output should be `bacdcab`\n\n## Input/Output\n\nInput\
  \ is a string consisting of lowercase latin letters with length 3 <= str.length\
  \ <= 10\n\nThe output is a palindrome string satisfying the task.\n\nFor s = `ab`\
  \ either solution (`aba` or `bab`) will be accepted."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def buildPalindrome (s : String) : String := sorry\n\ndef isSubstring\
  \ (sub str : String) : Bool := sorry\n"
"vc-theorems": "theorem result_is_palindrome (s : String) (h : s.length > 0) :\n \
  \ let result := buildPalindrome s\n  result.data = result.data.reverse := sorry\n\
  \n\ntheorem original_string_is_substring (s : String) (h : s.length > 0) :\n  let\
  \ result := buildPalindrome s\n  isSubstring s result = true := sorry\n\n\ntheorem\
  \ minimal_length (s : String) (h : s.length > 0) :\n  let result := buildPalindrome\
  \ s\n  (result.length ≥ s.length) ∧ \n  (∀ sub : String, sub.length < result.length\
  \ → \n    (sub.data = sub.data.reverse ∧ isSubstring s sub = true) → False) := sorry\n\
  \n\ntheorem preserved_characters (s : String) (h : s.length > 0) :\n  let result\
  \ := buildPalindrome s\n  ∀ c : Char, \n    result.data.count c ≥ s.data.count c\
  \ := sorry\n\n/--\ninfo: 'abcdcba'\n-/\n#guard_msgs in\n#eval build_palindrome \"\
  abcdc\"\n\n/--\ninfo: 'ababa'\n-/\n#guard_msgs in\n#eval build_palindrome \"ababa\"\
  \n\n/--\ninfo: 'bacdcab'\n-/\n#guard_msgs in\n#eval build_palindrome \"cdcab\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
