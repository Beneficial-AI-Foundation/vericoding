"vc-description": "Taxis of Kharagpur are famous for making sharp turns. You are given\
  \ the coordinates where a particular taxi was on a 2-D planes at N different moments:\
  \ (x1, y1), (x2, y2), ..., (xN, yN). In between these coordinates, the taxi moves\
  \ on a straight line. A turn at the i-th (2 ≤ i ≤ N-1) coordinate is said to be\
  \ a sharp turn if the angle by which it turns at Point B = (xi, yi) when going from\
  \ coordinates A = (xi-1, yi-1) to C = (xi+1, yi+1) via (xi, yi) is greater than\
  \ 45 degrees. ie. suppose you extend the line segment AB further till a point D,\
  \ then the angle DBC would be greater than 45 degrees.\nYou have to identify whether\
  \ the taxi made a sharp turn somewhere or not (Please look at Output section for\
  \ details). If it made a sharp turn, also identify whether it is possible to change\
  \ the coordinates at one of the N moments to make sure that the taxi doesn't make\
  \ any sharp turn. Note that all the N pairs of coordinates (including the new coordinates)\
  \ should be integers and distinct and should have their x and y coordinates at least\
  \ 0 and at most 50.\n\n-----Input-----\n- The first line of the input contains a\
  \ single integer T denoting the number of test cases. The description of T test\
  \ cases follows.\n- The first line of each test case contains a single integer N\
  \ denoting the number of moments at which you are given the information of the taxi's\
  \ coordinates.\n- Each of the next N lines contains two space-separated integers\
  \ xi and yi denoting the x and y coordinates of the taxi at i-th moment.\n\n-----Output-----\n\
  - For each test case, print a single line containing two space-separated strings,\
  \ either of which can be a \"yes\" or \"no\" (without quotes). If there was no sharp\
  \ turn, the first string should be \"yes\", and if there was a sharp turn, the first\
  \ string should be \"no\". For the second string, you should tell whether it is\
  \ possible to modify at most one coordinate in such a way that taxi doesn't make\
  \ a sharp turn. Note that if the first string is \"yes\", then the second string\
  \ would always be \"yes\".\n\n-----Constraints-----\n- 1 ≤ T ≤ 50\n- 3 ≤ N ≤ 50\n\
  - 0 ≤ xi, yi ≤ 50\n- It's guaranteed that all (xi, yi) pairs are distinct.\n\n-----Example-----\n\
  Input\n5\n3\n0 0\n1 1\n2 1\n3\n0 0\n1 0\n6 1\n3\n0 0\n1 0\n1 1\n4\n0 0\n1 0\n1 1\n\
  6 1\n6\n0 0\n1 0\n1 1\n2 1\n2 2\n3 2\n\nOutput\nyes yes\nyes yes\nno yes\nno yes\n\
  no no\n\n-----Explanation-----\nExample 1. \n\nYou can see that taxi is never making\
  \ a sharp turn.\n\nExample 3\n\nYou can see that taxi is making a sharp turn of\
  \ 90 degrees, an angle greater than 45'. However, you can change the coordinates\
  \ of the third points to (2, 1) to ensure that the angle remains <= 45'."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solveTaxiTurns (coords : List (List Int)) : Option String :=\
  \ sorry\n\ntheorem result_is_valid (coords : List (List Int)) :\n  match solveTaxiTurns\
  \ coords with\n  | none => True\n  | some result => result = \"yes yes\" ∨ result\
  \ = \"no yes\" ∨ result = \"no no\" := sorry\n"
"vc-theorems": "theorem two_points_yes_yes (p1 p2 : List Int) :\n  solveTaxiTurns\
  \ [p1, p2] = some \"yes yes\" := sorry\n\n\ntheorem yes_yes_implies_no_sharp_angles\
  \ (coords : List (List Int)) (i : Nat) :\n  solveTaxiTurns coords = some \"yes yes\"\
  \ →\n  i + 2 < coords.length →\n  let p1 := coords[i]!\n  let p2 := coords[i+1]!\n\
  \  let p3 := coords[i+2]!\n  let dx1 := p2[0]! - p1[0]!\n  let dy1 := p2[1]! - p1[1]!\n\
  \  let dx2 := p3[0]! - p2[0]!\n  let dy2 := p3[1]! - p2[1]!\n  let dot := dx1 *\
  \ dx2 + dy1 * dy2\n  let mag1 := Float.sqrt (Float.ofInt (dx1 * dx1 + dy1 * dy1))\n\
  \  let mag2 := Float.sqrt (Float.ofInt (dx2 * dx2 + dy2 * dy2))\n  let cosTheta\
  \ := Float.ofInt dot / (mag1 * mag2)\n  let angle := Float.acos (min 1 (max (-1)\
  \ cosTheta))\n  dx1 * dx1 + dy1 * dy1 > 0 ∧ dx2 * dx2 + dy2 * dy2 > 0 →\n  angle\
  \ ≤ 0.7853981633974483 + 0.00001 := sorry  -- π/4 as decimal\n\n\ntheorem same_points_is_none\
  \ (x y : Int) :\n  solveTaxiTurns [[x,y], [x,y]] = none := sorry\n\n\ntheorem coords_in_bounds\
  \ (coords : List (List Int)) :\n  solveTaxiTurns coords ≠ none →\n  ∀ point ∈ coords,\
  \ ∀ coord ∈ point, 0 ≤ coord ∧ coord ≤ 50 := sorry\n\n/--\ninfo: 'yes yes'\n-/\n\
  #guard_msgs in\n#eval solve_taxi_turns [[0, 0], [1, 1], [2, 1]]\n\n/--\ninfo: 'no\
  \ yes'\n-/\n#guard_msgs in\n#eval solve_taxi_turns [[0, 0], [1, 0], [1, 1]]\n\n\
  /--\ninfo: 'no no'\n-/\n#guard_msgs in\n#eval solve_taxi_turns [[0, 0], [1, 0],\
  \ [1, 1], [2, 1], [2, 2], [3, 2]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
