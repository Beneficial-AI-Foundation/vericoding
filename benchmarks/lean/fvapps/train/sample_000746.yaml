"vc-description": "Chef likes to travel a lot. Every day Chef tries to visit as much\
  \ cities as possible. Recently he had a quite a few trips of great Chefland for\
  \ learning various recipes. Chefland had N cities numbered from 1 to N. People in\
  \ Chefland are very friendly, friendliness of i-th city is given by Fi.\n\nBefore\
  \ starting of each trip, Chef's initial enjoyment is 1 unit. Whenever he visits\
  \ a city with friendliness Fi, his enjoyment gets multiplied by Fi units. \n\nCity\
  \ 1 is the home city of Chef. He starts each trip from his home city. Before starting\
  \ a trip, he chooses a parameter R which denotes that he will start from city 1,\
  \ and go to city 1 + R, then to 1 + 2 * R, then to 1 + 3 * R, till 1 + i * R such\
  \ that i is largest integer satisfying 1 + i * R ≤ N.\n\nNow, Chef wants you to\
  \ help him recreate his visit of the cities. Specifically, he will ask you Q queries,\
  \ each of which can be of following two types.\n\n- 1 p f : friendliness of p-th\
  \ city changes to f, i.e. Fp = f \n- 2 R   : Find out the total enjoyment Chef will\
  \ have during this trip. As Chef does not like big numbers, he just asks you to\
  \ output two things, first digit of the enjoyment and value of enjoyment modulo\
  \ 109 + 7.\n\n-----Input-----\nThere is a single test case.\nFirst line of input\
  \ contains a single integer N, denoting number of cities in Chefland.\nSecond line\
  \ of the input contains N space separated integer - F1, F2, ..., FN, denoting the\
  \ friendliness of the cities in order from 1 to N.\nNext line contains an integer\
  \ Q, denoting number of queries.\n\nFor each of the next Q queries, each line corresponds\
  \ to one of the two types of the query. First there will be an integer denoting\
  \ the type of the query, followed by the actual query. For query of type 1, there\
  \ will be three space separated integers \"1 p f\" as defined above. For query of\
  \ type 2, there will be two space separated integers \"2 R \", as defined above.\n\
  \n-----Output-----\nFor each query of type 2, output two space separated integers,\
  \ first digit of Chef's enjoyment in this trip followed by the value of enjoyment\
  \ modulo 109 + 7.\n\n-----Constraints-----\n-  1 ≤ N, Q ≤ 105 \n-  1 ≤ Fi ≤ 10^9\
  \ \n-  1 ≤ f ≤ 10^9 \n-  1 ≤ p ≤ N \n-  1 ≤ R ≤ N \n\n-----Subtasks-----\nSubtask\
  \ #1 (5 points) : \n\n-  1 ≤ N ≤ 10 \n-  1 ≤ Q  ≤ 1000 \n-  1 ≤ Fi ≤ 10 \n-  1 ≤\
  \ f ≤ 10 \n\nSubtask #2 (15 points) : \n\n-  1 ≤ N ≤ 1000 \n-  1 ≤ Q  ≤ 100 \n-\
  \  1 ≤ Fi ≤ 109 \n-  1 ≤ f ≤ 1000 \n\nSubtask #3 (80 points) : \n\n- original constraints\n\
  \n-----Example-----\nInput:\n5\n1 2 3 4 5\n3\n2 1\n1 3 10\n2 2\n\nOutput:\n1 120\n\
  5 50\n\n-----Explanation-----\nIn the first query, Chef is going to visit cities\
  \ 1, 2, 3, 4, 5 in order. At the end of the trip, his total enjoyment will be 1\
  \ * 2 * 3 * 4 * 5 = 120. First digit of enjoyment is 1 and 120 modulo 109 + 7 is\
  \ 120.\nIn the third query, Chef is going to visit cities 1, 3, 5 in order. At the\
  \ end of the trip, his total enjoyment will be 1 * 10 * 5 = 50."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_chef_cities (N : Nat) (friendliness : List Nat) (queries\
  \ : List (List Nat)) : List (Nat × Nat) := sorry\n\ntheorem result_format_valid\
  \ \n  (N : Nat) \n  (friendliness : List Nat)\n  (queries : List (List Nat))\n \
  \ (result : List (Nat × Nat)) \n  (h1 : 0 < N ∧ N ≤ 100)\n  (h2 : ∀ x ∈ friendliness,\
  \ 0 < x ∧ x ≤ 1000)\n  (h3 : result = solve_chef_cities N friendliness queries)\
  \ :\n  (∀ r ∈ result, \n    (1 ≤ r.1 ∧ r.1 ≤ 9) ∧ \n    0 ≤ r.2) := sorry\n"
"vc-theorems": "theorem result_length_matches_type2_queries\n  (N : Nat)\n  (friendliness\
  \ : List Nat) \n  (queries : List (List Nat))\n  (result : List (Nat × Nat))\n \
  \ (h1 : result = solve_chef_cities N friendliness queries)\n  (h2 : ∀ q ∈ queries,\
  \ q.head? = some 1 ∨ q.head? = some 2) :\n  result.length = (queries.filter (λ q\
  \ => q.head? = some 2)).length := sorry\n\n\ntheorem result_values_in_modulo_range\n\
  \  (N : Nat)\n  (friendliness : List Nat)\n  (queries : List (List Nat)) \n  (result\
  \ : List (Nat × Nat))\n  (h1 : result = solve_chef_cities N friendliness queries)\
  \ :\n  ∀ r ∈ result, r.2 < 1000000007 := sorry\n\n\ntheorem single_query_gives_single_result\n\
  \  (N : Nat)\n  (friendliness : List Nat)\n  (R : Nat)\n  (result : List (Nat ×\
  \ Nat))\n  (h1 : 0 < N ∧ N ≤ 10)\n  (h2 : ∀ x ∈ friendliness, 0 < x ∧ x ≤ 100)\n\
  \  (h3 : 0 < R ∧ R ≤ 5)\n  (h4 : result = solve_chef_cities N friendliness [[2,R]])\
  \ :\n  result.length = 1 := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
