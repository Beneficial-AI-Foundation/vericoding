"vc-description": "This kata is a continuation of [Part 1](http://www.codewars.com/kata/the-fibfusc-function-part-1).\
  \ The `fibfusc` function is defined recursively as follows:\n\n    fibfusc(0) =\
  \ (1, 0)\n    fibfusc(1) = (0, 1)\n    fibfusc(2n) = ((x + y)(x - y), y(2x + 3y)),\
  \ where (x, y) = fibfusc(n)\n    fibfusc(2n + 1) = (-y(2x + 3y), (x + 2y)(x + 4y)),\
  \ where (x, y) = fibfusc(n)\n\nYour job is to produce the code for the `fibfusc`\
  \ function. In this kata, your function will be tested with large values of n (up\
  \ to 2000 bits), so you should be concerned about stack overflow and timeouts. Moreover,\
  \ since the `fibfusc` function grows exponentially, your function should take an\
  \ extra argument `num_digits` with a default value of `None`. When not `None`, `num_digits`\
  \ takes a positive `int` value and the returned values shall be truncated to the\
  \ last `num_digits` digits. \n\nFor example, let `n = 101`. With `num_digits` not\
  \ set or set to `None`, `fibfusc` should return: \n`(-280571172992510140037611932413038677189525L,\
  \ 734544867157818093234908902110449296423351L)`. If `num_digits = 12`, the function\
  \ should return `(-38677189525L, 449296423351L)`. Notice in particular, that for\
  \ any value of `n` greater than 1, `x` is negative, and the truncated value of `x`\
  \ should also be negative.\n\nHint 1: Use modulo `10 ** num_digits` arithmetic to\
  \ keep all intermediary results small.\n\nHint 2: Consider using an iterative [\"\
  number climber\"](http://www.codewars.com/kata/number-climber) to avoid stack overflows."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def fibfusc (n : Nat) : Int × Int :=\n  sorry\n"
"vc-theorems": "theorem fibfusc_is_pair : ∀ n : Nat, \n  ∃ x y : Int, fibfusc n =\
  \ (x, y) := by sorry\n\n\ntheorem fibfusc_base_cases : \n  (fibfusc 0 = (1, 0))\
  \ ∧ \n  (fibfusc 1 = (0, 1)) ∧ \n  (fibfusc 2 = (-1, 1)) ∧\n  (fibfusc 3 = (-3,\
  \ 5)) ∧ \n  (fibfusc 4 = (-7, 13)) := by sorry\n\n\ntheorem fibfusc_growth : ∀ n\
  \ : Nat,\n  n > 4 → (let (_, y) := fibfusc n; y > 13 ∨ y < -13) := by sorry\n\n\
  /--\ninfo: (1, 0)\n-/\n#guard_msgs in\n#eval fibfusc 0\n\n/--\ninfo: (0, 1)\n-/\n\
  #guard_msgs in\n#eval fibfusc 1\n\n/--\ninfo: (-7, 13)\n-/\n#guard_msgs in\n#eval\
  \ fibfusc 4\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
