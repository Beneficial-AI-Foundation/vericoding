"vc-description": "\"I'm a fan of anything that tries to replace actual human contact.\"\
  \ - Sheldon.\nAfter years of hard work, Sheldon was finally able to develop a formula\
  \ which would diminish the real human contact.  \nHe found k$k$ integers n1,n2...nk$n_1,n_2...n_k$\
  \ . Also he found that if he could minimize the value of m$m$ such that  ∑ki=1$\\\
  sum_{i=1}^k$n$n$i$i$C$C$m$m$i$i$ is even, where m$m$ = ∑ki=1$\\sum_{i=1}^k$mi$m_i$,\
  \ he would finish the real human contact.  \nSince Sheldon is busy choosing between\
  \ PS-4 and XBOX-ONE, he want you to help him to calculate the minimum value of m$m$.\
  \ \n\n-----Input:-----\n- The first line of the input contains a single integer\
  \ T$T$ denoting the number of test cases. The \ndescription of T$T$ test cases follows.\n\
  - The first line of each test case contains a single integer k$k$.\n- Next line\
  \ contains k space separated integers n1,n2...nk$n_1,n_2...n_k$ .\n\n-----Output:-----\n\
  For each test case output the minimum value of m for which ∑ki=1$\\sum_{i=1}^k$n$n$i$i$C$C$m$m$i$i$\
  \ is even, where  m$m$=m1$m_1$+m2$m_2$+. . . mk$m_k$   and  0$0$ <= mi$m_i$<= ni$n_i$\
  \ .  If no such answer exists print -1.\n\n-----Constraints-----\n- 1≤T≤1000$1 \\\
  leq T \\leq 1000$\n- 1≤k≤1000$1 \\leq k \\leq 1000$\n- 1≤ni≤10$1 \\leq n_i \\leq\
  \ 10$18$18$\n\n-----Sample Input:-----\n1\n1\n5\n\n-----Sample Output:-----\n2\n\
  \n-----EXPLANATION:-----\n5$5$C$C$2$2$ = 10 which is even and m is minimum."
"vc-preamble": "import Imports.AllImports\n\ndef find_min_m (n : Nat) (nums : List\
  \ Nat) : Int :=\nsorry\n\n\ndef hasAllOnes (n : Nat) : Bool :=\nsorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def hasPowerOfTwo (n : Int) (pos : Nat) : Bool :=\nsorry\n"
"vc-theorems": "theorem all_ones_returns_negative_one (nums : List Nat) :\n  (∃ n\
  \ ∈ nums, hasAllOnes n = true) →\n  find_min_m 1 nums = -1 :=\nsorry\n\n\ntheorem\
  \ result_nonnegative_when_valid (nums : List Nat) :\n  (¬∃ n ∈ nums, hasAllOnes\
  \ n = true) →\n  find_min_m 1 nums ≥ 0 :=\nsorry\n\n\ntheorem result_is_power_of_two_sum\
  \ (nums : List Nat) (i : Nat) :\n  let result := find_min_m 1 nums\n  result ≠ -1\
  \ →\n  hasPowerOfTwo result i = true →\n  ∃ k, result = 2^k :=\nsorry\n\n/--\ninfo:\
  \ 2\n-/\n#guard_msgs in\n#eval find_min_m 1 [5]\n\n/--\ninfo: -1\n-/\n#guard_msgs\
  \ in\n#eval find_min_m 1 [7]\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval find_min_m\
  \ 1 [10]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
