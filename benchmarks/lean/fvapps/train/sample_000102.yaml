"vc-description": "Ashish and Vivek play a game on a matrix consisting of $n$ rows\
  \ and $m$ columns, where they take turns claiming cells. Unclaimed cells are represented\
  \ by $0$, while claimed cells are represented by $1$. The initial state of the matrix\
  \ is given. There can be some claimed cells in the initial state.\n\nIn each turn,\
  \ a player must claim a cell. A cell may be claimed if it is unclaimed and does\
  \ not share a row or column with any other already claimed cells. When a player\
  \ is unable to make a move, he loses and the game ends.\n\nIf Ashish and Vivek take\
  \ turns to move and Ashish goes first, determine the winner of the game if both\
  \ of them are playing optimally.\n\nOptimal play between two players means that\
  \ both players choose the best possible strategy to achieve the best possible outcome\
  \ for themselves.\n\n\n-----Input-----\n\nThe first line consists of a single integer\
  \ $t$ $(1 \\le t \\le 50)$ — the number of test cases. The description of the test\
  \ cases follows.\n\nThe first line of each test case consists of two space-separated\
  \ integers $n$, $m$ $(1 \\le n, m \\le 50)$ — the number of rows and columns in\
  \ the matrix.\n\nThe following $n$ lines consist of $m$ integers each, the $j$-th\
  \ integer on the $i$-th line denoting $a_{i,j}$ $(a_{i,j} \\in \\{0, 1\\})$.\n\n\
  \n-----Output-----\n\nFor each test case if Ashish wins the game print \"Ashish\"\
  \ otherwise print \"Vivek\" (without quotes).\n\n\n-----Example-----\nInput\n4\n\
  2 2\n0 0\n0 0\n2 2\n0 0\n0 1\n2 3\n1 0 1\n1 1 0\n3 3\n1 0 0\n0 0 0\n1 0 0\n\nOutput\n\
  Vivek\nAshish\nVivek\nAshish\n\n\n\n-----Note-----\n\nFor the first case: One possible\
  \ scenario could be: Ashish claims cell $(1, 1)$, Vivek then claims cell $(2, 2)$.\
  \ Ashish can neither claim cell $(1, 2)$, nor cell $(2, 1)$ as cells $(1, 1)$ and\
  \ $(2, 2)$ are already claimed. Thus Ashish loses. It can be shown that no matter\
  \ what Ashish plays in this case, Vivek will win. \n\nFor the second case: Ashish\
  \ claims cell $(1, 1)$, the only cell that can be claimed in the first move. After\
  \ that Vivek has no moves left.\n\nFor the third case: Ashish cannot make a move,\
  \ so Vivek wins.\n\nFor the fourth case: If Ashish claims cell $(2, 3)$, Vivek will\
  \ have no moves left."
"vc-preamble": "import Imports.AllImports\n\ndef solve_game (n m : Nat) (grid : List\
  \ (List Nat)) : String :=\n  sorry\n\n\ndef countEmptyRows (grid : List (List Nat))\
  \ : Nat :=\n  (grid.filter (fun row => row.all (fun x => x = 0))).length\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def countEmptyCols (n m : Nat) (grid : List (List Nat)) : Nat :=\n\
  \  let isEmptyCol (j : Nat) := (List.range n).all (fun i => \n    match grid.get?\
  \ i with\n    | none => true\n    | some row => match row.get? j with\n      | none\
  \ => true\n      | some x => x = 0)\n  (List.range m).filter isEmptyCol |>.length\n"
"vc-theorems": "theorem solve_game_returns_valid_winner (n m : Nat) (grid : List (List\
  \ Nat))\n  (h1 : n > 0) (h2 : m > 0) (h3 : grid.length = n)\n  (h4 : ∀ row ∈ grid,\
  \ row.length = m)\n  (h5 : ∀ row ∈ grid, ∀ x ∈ row, x = 0 ∨ x = 1) :\n  solve_game\
  \ n m grid = \"Ashish\" ∨ solve_game n m grid = \"Vivek\" :=\nsorry\n\n\ntheorem\
  \ winner_depends_on_empty_lines (n m : Nat) (grid : List (List Nat))\n  (h1 : n\
  \ > 0) (h2 : m > 0) (h3 : grid.length = n)\n  (h4 : ∀ row ∈ grid, row.length = m)\n\
  \  (h5 : ∀ row ∈ grid, ∀ x ∈ row, x = 0 ∨ x = 1) :\n  let empty_rows := countEmptyRows\
  \ grid\n  let empty_cols := countEmptyCols n m grid\n  let min_empty := min empty_rows\
  \ empty_cols\n  solve_game n m grid = \"Ashish\" ↔ min_empty % 2 = 1 :=\nsorry\n\
  \n\ntheorem all_zeros_grid (n m : Nat) (h1 : n > 0) (h2 : m > 0) :\n  let grid :=\
  \ List.replicate n (List.replicate m 0)\n  solve_game n m grid = (if min n m % 2\
  \ = 1 then \"Ashish\" else \"Vivek\") :=\nsorry\n\n\ntheorem no_empty_lines (n m\
  \ : Nat) (h1 : n > 0) (h2 : m > 0) :\n  let grid := List.replicate n (List.replicate\
  \ m 1)\n  solve_game n m grid = \"Vivek\" :=\nsorry\n\n/--\ninfo: 'Vivek'\n-/\n\
  #guard_msgs in\n#eval solve_game 2 2 [[0, 0], [0, 0]]\n\n/--\ninfo: 'Ashish'\n-/\n\
  #guard_msgs in\n#eval solve_game 2 2 [[0, 0], [0, 1]]\n\n/--\ninfo: 'Vivek'\n-/\n\
  #guard_msgs in\n#eval solve_game 2 3 [[1, 0, 1], [1, 1, 0]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
