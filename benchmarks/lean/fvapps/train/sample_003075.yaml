"vc-description": "## MTV Cribs is back!\n\n![](https://s-media-cache-ak0.pinimg.com/236x/1b/cf/f4/1bcff4f4621644461103576e40bde4ed.jpg)\n\
  \n_If you haven't solved it already I recommend trying [this kata](https://www.codewars.com/kata/5834a44e44ff289b5a000075)\
  \ first._\n\n## Task\n\nGiven `n` representing the number of floors build a penthouse\
  \ like this:\n\n```\n        ___\n       /___\\                \n      /_____\\\n\
  \      |  _  |     1 floor\n      |_|_|_|\n      \n       _____\n      /_____\\\n\
  \     /_______\\\n    /_________\\             \n   /___________\\\n   |       \
  \    |\n   |    ___    |     2 floors\n   |   |   |   |\n   |___|___|___|\n \n \
  \     _______\n     /_______\\\n    /_________\\\n   /___________\\\n  /_____________\\\
  \n /_______________\\\n/_________________\\\n|                 |         3 floors\n\
  |                 |\n|      _____      |\n|     |     |     |\n|     |     |   \
  \  |\n|_____|_____|_____|\n\n```\n\n**Note:** whitespace should be preserved on\
  \ both sides of the roof. No invalid input tests.\n\nGood luck!"
"vc-preamble": "import Imports.AllImports\n\ndef my_crib (n : Nat) : String :=\n \
  \ sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def splitLines (s : String) : List String :=\n  sorry\n"
"vc-theorems": "theorem crib_width_consistency {n : Nat} (h : 1 ≤ n ∧ n ≤ 10) :\n\
  \  let width := 4 + 3 + 6 * (n - 1)\n  let lines := splitLines (my_crib n)\n  ∀\
  \ line ∈ lines, line.length = width :=\nsorry\n\n\ntheorem crib_roof_top {n : Nat}\
  \ (h : 1 ≤ n ∧ n ≤ 10) :\n  let lines := splitLines (my_crib n)\n  let first_line\
  \ := lines.head?\n  ∀ line, first_line = some line → line.replace \" \" \"\" = line.replace\
  \ \"_\" \"\" :=\nsorry\n\n\ntheorem crib_sloping_roof {n : Nat} (h : 1 ≤ n ∧ n ≤\
  \ 10) :\n  let lines := splitLines (my_crib n)\n  let roof_lines := lines.take (3\
  \ + 2*(n-1))\n  ∀ line ∈ roof_lines, (line.contains '/') ∧ (line.contains '\\\\\
  ') :=\nsorry\n\n\ntheorem crib_wall_structure {n : Nat} (h : 1 ≤ n ∧ n ≤ 10) :\n\
  \  let lines := splitLines (my_crib n)\n  let wall_lines := lines.drop (3 + 2*(n-1))\n\
  \  ∀ line ∈ wall_lines, line.startsWith \"|\" ∧ line.endsWith \"|\" :=\nsorry\n\n\
  \ntheorem crib_bottom_line {n : Nat} (h : 1 ≤ n ∧ n ≤ 10) :\n  let lines := splitLines\
  \ (my_crib n)\n  ∀ last_line, lines.getLast? = some last_line → last_line.contains\
  \ '_' :=\nsorry\n\n/--\ninfo: expected1\n-/\n#guard_msgs in\n#eval my_crib 1\n\n\
  /--\ninfo: expected2\n-/\n#guard_msgs in\n#eval my_crib 2\n\n/--\ninfo: expected3\n\
  -/\n#guard_msgs in\n#eval my_crib 3\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
