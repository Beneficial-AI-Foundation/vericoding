"vc-description": "Given an array of integers arr, write a function that returns true\
  \ if and only if the number of occurrences of each value in the array is unique.\n\
   \nExample 1:\nInput: arr = [1,2,2,1,1,3]\nOutput: true\nExplanation: The value\
  \ 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of\
  \ occurrences.\nExample 2:\nInput: arr = [1,2]\nOutput: false\n\nExample 3:\nInput:\
  \ arr = [-3,0,1,-3,1,1,1,-3,10,0]\nOutput: true\n\n \nConstraints:\n\n1 <= arr.length <=\
  \ 1000\n-1000 <= arr[i] <= 1000"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def uniqueOccurrences (arr : List Int) : Bool :=\n  sorry\n"
"vc-theorems": "theorem uniqueOccurrences_returns_bool (arr : List Int) :\n  uniqueOccurrences\
  \ arr = true ∨ uniqueOccurrences arr = false := by\n  sorry\n\n\ntheorem uniqueOccurrences_empty_array\
  \ :\n  uniqueOccurrences [] = true := by\n  sorry\n\n\ntheorem uniqueOccurrences_single_element\
  \ (x : Int) :\n  uniqueOccurrences [x] = true := by\n  sorry\n\n\ntheorem uniqueOccurrences_reverse\
  \ (arr : List Int) :\n  uniqueOccurrences arr = uniqueOccurrences arr.reverse :=\
  \ by\n  sorry\n\n\ntheorem uniqueOccurrences_double (arr : List Int) :\n  uniqueOccurrences\
  \ arr = uniqueOccurrences (arr ++ arr) := by\n  sorry\n\n/--\ninfo: True\n-/\n#guard_msgs\
  \ in\n#eval unique_occurrences [1, 2, 2, 1, 1, 3]\n\n/--\ninfo: False\n-/\n#guard_msgs\
  \ in\n#eval unique_occurrences [1, 2]\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval\
  \ unique_occurrences [-3, 0, 1, -3, 1, 1, 1, -3, 10, 0]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
