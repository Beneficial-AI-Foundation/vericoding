"vc-description": "Given an array of positive or negative integers \n\n I= [i1,..,in]\n\
  \nyou have to produce a sorted array P of the form \n\n[ [p, sum of all ij of I\
  \ for which p is a prime factor (p positive) of ij] ...]\n\nP will be sorted by\
  \ increasing order of the prime numbers.\nThe final result has to be given as a\
  \ string in Java, C#, C, C++ and as an array of arrays in other languages.\n\nExample:\n\
  \n```python\nI = [12, 15] # result = [[2, 12], [3, 27], [5, 15]]\n```\n\n[2, 3,\
  \ 5] is the list of all prime factors of the elements of I, hence the result.\n\n\
  **Notes:**\n- It can happen that a sum is 0 if some numbers are negative!\n\nExample:\
  \ I = [15, 30, -45]\n5 divides 15, 30 and (-45) so 5 appears in the result, the\
  \ sum of the numbers for which 5 is a factor is 0 so we have [5, 0] in the result\
  \ amongst others. \n\n- In Fortran - as in any other language - the returned string\
  \ is not permitted to contain any redundant trailing whitespace: you can use dynamically\
  \ allocated character strings."
"vc-preamble": "import Imports.AllImports\n\ndef isPrime (n : Int) : Bool := sorry\n\
  \ndef primeFactor (n: Int) : List Int := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sumForList (lst : List Int) : List (Int × Int) := sorry\n\n\
  def listSum (lst : List Int) : Int := lst.foldl (· + ·) 0 \n"
"vc-theorems": "theorem results_are_prime_factors {lst : List Int} (h : ∀ x, x ∈ lst\
  \ → x ≠ 0) :\n  ∀ pt, pt ∈ sumForList lst →\n    isPrime pt.1 = true ∧ \n    ∃ x,\
  \ x ∈ lst ∧ x % pt.1 = 0 := sorry\n\n\ntheorem sums_are_correct {lst : List Int}\
  \ (h : ∀ x, x ∈ lst → x ≠ 0) :\n  ∀ pt, pt ∈ sumForList lst →\n    pt.2 = listSum\
  \ (lst.filter (fun x => x % pt.1 = 0)) := sorry\n\n\ntheorem factors_ordered {lst\
  \ : List Int} (h : ∀ x, x ∈ lst → x ≠ 0) :\n  List.Pairwise (· ≤ ·) (List.map Prod.fst\
  \ (sumForList lst)) := sorry\n\n\ntheorem all_prime_factors_included {lst : List\
  \ Int} (h : ∀ x, x ∈ lst → x ≠ 0) :\n  (∀ p, p ∈ List.map Prod.fst (sumForList lst)\
  \ → \n    (∃ x, x ∈ lst ∧ x % p = 0 ∧ isPrime p = true)) ∧\n  (∀ x, x ∈ lst → ∀\
  \ p, p ∈ primeFactor x →\n    p ∈ List.map Prod.fst (sumForList lst)) := sorry\n\
  \n/--\ninfo: [[2, 12], [3, 27], [5, 15]]\n-/\n#guard_msgs in\n#eval sum_for_list\
  \ [12, 15]\n\n/--\ninfo: [[2, 30], [3, 0], [5, 0]]\n-/\n#guard_msgs in\n#eval sum_for_list\
  \ [15, 30, -45]\n\n/--\ninfo: [[2, 54], [3, 135], [5, 90], [7, 21]]\n-/\n#guard_msgs\
  \ in\n#eval sum_for_list [15, 21, 24, 30, 45]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
