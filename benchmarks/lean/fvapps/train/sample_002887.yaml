"vc-description": "# Task\n CodeBots decided to make a gift for CodeMaster's birthday.\
  \ They got a pack of candies of various sizes from the store, but instead of giving\
  \ the whole pack they are trying to make the biggest possible candy from them. On\
  \ each turn it is possible:\n \n ```\n to pick any two candies of the same size\
  \ and merge\n them into a candy which will be two times bigger;\n\n to pick a single\
  \ candy of an even size and split it \n into two equal candies half of this size\
  \ each.```\nWhat is the size of the biggest candy they can make as a gift?\n\n#\
  \ Example\n\n For `arr = [2, 4, 8, 1, 1, 15]`, the output should be 16.\n```\n[2,\
  \ 4, 8, 1, 1, 15] --> [2, 4, 8, 2, 15]\n-->[4, 4, 8, 15] --> [8, 8, 15] --> [16,\
  \ 15] -->choose 16\n``` \n\n# Input/Output\n\n\n - [input] integer array `arr`\n\
  \n    Array of positive integers.\n\n    Constraints:\n    \n    `5 ≤ inputArray.length\
  \ ≤ 50,`\n    \n    `1 ≤ inputArray[i] ≤ 100.`\n\n\n - `[output]` an integer"
"vc-preamble": "import Imports.AllImports\n\ndef List.maximum! : List Nat → Nat \n\
  \  | [] => 0\n  | [x] => x\n  | (x::xs) => max x (maximum! xs)\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def obtain_max_number (arr : List Nat) : Nat := sorry\n\ndef count_pairs\
  \ (arr : List Nat) : Nat := sorry\n\n\n\n\n\n\n\n\n"
"vc-theorems": "theorem obtain_max_number_twos {n : Nat} (h : n ≥ 1) :\n  let arr\
  \ := List.replicate n 2\n  let result := obtain_max_number arr\n  result > 0 ∧ result\
  \ &&& (result - 1) = 0 :=\nsorry\n\n/--\ninfo: 16\n-/\n#guard_msgs in\n#eval obtain_max_number\
  \ [2, 4, 8, 1, 1, 15]\n\n/--\ninfo: 60\n-/\n#guard_msgs in\n#eval obtain_max_number\
  \ [2, 4, 8, 1, 1, 30, 30, 15, 15, 7, 7]\n\n/--\ninfo: 128\n-/\n#guard_msgs in\n\
  #eval obtain_max_number [2, 4, 8, 1, 1, 32, 8, 8, 64, 30, 30, 15, 15, 7, 7]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
