"vc-description": "Vasya has ordered a pizza delivery. The pizza can be considered\
  \ a perfect circle. There were $n$ premade cuts in the pizza when it was delivered.\
  \ Each cut is a straight segment connecting the center of the pizza with its boundary.\n\
  Let $O$ be the center of the pizza, $P_i$ be the endpoint of the $i$-th cut lying\
  \ on the boundary, and $R$ be the point of the boundary straight to the right of\
  \ $O$. Then the counterclockwise-measured angle $\\angle ROP_i$ is equal to $a_i$\
  \ degrees, where $a_i$ is an integer between $0$ and $359$. Note that angles between\
  \ $0$ and $180$ angles correspond to $P_i$ in the top half of the pizza, while angles\
  \ between $180$ and $360$ angles correspond to the bottom half.\nVasya may cut his\
  \ pizza a few more times, and the new cuts still have to be straight segments starting\
  \ at the center. He wants to make the pizza separated into several equal slices,\
  \ with each slice being a circular sector with no cuts inside of it. How many new\
  \ cuts Vasya will have to make?\n\n-----Input:-----\nThe first line of input contains\
  \ $T$ , i.e number of test cases per file.\nThe first line of each test case contains\
  \ a single integer $n-$  the numbers of premade cuts ($2 \\leq n \\leq 360$).\n\
  The second lines contains $n$ integers $a_1, \\ldots, a_n-$ angles of the cuts $1,\
  \ \\ldots, n$ respectively ($0 \\leq a_1 < \\ldots, a_{n - 1} < 360$).\n\n-----Output:-----\n\
  Print a single integer$-$ the smallest number of additional cuts Vasya has to make\
  \ so that the pizza is divided into several equal slices.\n\n-----Constraints-----\n\
  - $1  \\leq T  \\leq 36$\n- $2 \\leq n \\leq 360$\n- $0 \\leq a_1 < \\ldots, a_{n\
  \ - 1} < 360$\n\n-----Sample Input:-----\n3\n4 \n0 90 180 270\n2\n90 210\n2\n0 1\n\
  \n-----Sample Output:-----\n0\n1\n358\n\n-----EXPLANATION:-----\nIn the first sample\
  \ the pizza is already cut into four equal slices.\nIn the second sample the pizza\
  \ will be cut into three equal slices after making one extra cut at $330$ degrees.\n\
  In the third sample Vasya will have to cut his pizza into $360$ pieces of $1$ degree\
  \ angle each."
"vc-preamble": "import Imports.AllImports\n\ndef abs (x : Int) : Int :=\n  if x ≥\
  \ 0 then x else -x\n\n\ndef gcd (a b : Int) : Int :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def minPizzaCuts (n : Nat) (angles : List Nat) : Nat :=\n  sorry\n\
  \n-- GCD theorems "
"vc-theorems": "theorem gcd_positive {a b : Int} (h : a ≠ 0 ∨ b ≠ 0) : \n  gcd (abs\
  \ a) (abs b) > 0 :=\n  sorry\n\n\ntheorem gcd_divides {a b : Int} : \n  let d :=\
  \ gcd (abs a) (abs b)\n  (a ≠ 0 → abs a % d = 0) ∧ \n  (b ≠ 0 → abs b % d = 0) :=\n\
  \  sorry\n\n-- Pizza cuts theorems\n\ntheorem minPizzaCuts_nonnegative {n : Nat}\
  \ {angles : List Nat} :\n  minPizzaCuts n angles ≥ 0 :=\n  sorry\n\n\ntheorem minPizzaCuts_upper_bound\
  \ {n : Nat} {angles : List Nat} \n  (h : List.length angles = n) :\n  minPizzaCuts\
  \ n angles + n ≤ 360 :=\n  sorry\n\n\ntheorem minPizzaCuts_rotation_invariant {n\
  \ : Nat} {angles : List Nat}\n  (h : List.length angles = n) :\n  minPizzaCuts n\
  \ angles = \n  minPizzaCuts n (List.map (fun x => (x + 45) % 360) angles) :=\n \
  \ sorry\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval min_pizza_cuts 4 [0, 90, 180,\
  \ 270]\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval min_pizza_cuts 2 [90, 210]\n\n\
  /--\ninfo: 358\n-/\n#guard_msgs in\n#eval min_pizza_cuts 2 [0, 1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
