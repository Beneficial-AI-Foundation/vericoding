"vc-description": "Given a string s, return the maximum number of ocurrences of any\
  \ substring under the following rules:\n\nThe number of unique characters in the\
  \ substring must be less than or equal to maxLetters.\nThe substring size must be\
  \ between minSize and maxSize inclusive.\n\n \nExample 1:\nInput: s = \"aababcaab\"\
  , maxLetters = 2, minSize = 3, maxSize = 4\nOutput: 2\nExplanation: Substring \"\
  aab\" has 2 ocurrences in the original string.\nIt satisfies the conditions, 2 unique\
  \ letters and size 3 (between minSize and maxSize).\n\nExample 2:\nInput: s = \"\
  aaaa\", maxLetters = 1, minSize = 3, maxSize = 3\nOutput: 2\nExplanation: Substring\
  \ \"aaa\" occur 2 times in the string. It can overlap.\n\nExample 3:\nInput: s =\
  \ \"aabcabcab\", maxLetters = 2, minSize = 2, maxSize = 3\nOutput: 3\n\nExample\
  \ 4:\nInput: s = \"abcde\", maxLetters = 2, minSize = 3, maxSize = 3\nOutput: 0\n\
  \n \nConstraints:\n\n1 <= s.length <= 10^5\n1 <= maxLetters <= 26\n1 <= minSize\
  \ <= maxSize <= min(26, s.length)\ns only contains lowercase English letters."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def max_freq (s : String) (max_letters min_size max_size : Nat)\
  \ : Nat :=\n  sorry\n"
"vc-theorems": "theorem max_freq_basic_bounds \n  (s : String) (max_letters min_size\
  \ max_size : Nat)\n  (h1 : min_size ≤ max_size)\n  (h2 : min_size ≤ s.length) :\n\
  \  let result := max_freq s max_letters min_size max_size\n  -- Result is non-negative\
  \ (implied by Nat)\n  -- Result bounded by possible windows\n  result ≤ s.length\
  \ - min_size + 1 := \nsorry\n\n\ntheorem max_freq_single_letter\n  (s : String)\
  \ (max_letters min_size max_size : Nat)\n  (h1 : max_letters = 1)\n  (h2 : min_size\
  \ = s.length) :\n  let result := max_freq s max_letters min_size max_size\n  result\
  \ ≤ 1 :=\nsorry\n\n\ntheorem max_freq_identical_string\n  (s : String) (c : Char)\n\
  \  (h1 : s.length > 0)\n  (h2 : ∀ i : String.Pos, s.get i = c) :\n  let min_size\
  \ := 1\n  let result := max_freq s 1 min_size min_size\n  result = s.length - min_size\
  \ + 1 :=\nsorry\n\n\ntheorem max_freq_binary_string\n  (s : String) (window_size\
  \ : Nat)\n  (h1 : s.length ≥ 3)\n  (h2 : s.length ≤ 10) \n  (h3 : window_size ≤\
  \ s.length)\n  (h4 : ∀ i : String.Pos, s.get i = 'a' ∨ s.get i = 'b') :\n  let result\
  \ := max_freq s 2 window_size window_size\n  result ≤ s.length - window_size + 1\
  \ :=\nsorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval max_freq \"aababcaab\" 2\
  \ 3 4\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval max_freq \"aaaa\" 1 3 3\n\n/--\n\
  info: 3\n-/\n#guard_msgs in\n#eval max_freq \"aabcabcab\" 2 2 3\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
