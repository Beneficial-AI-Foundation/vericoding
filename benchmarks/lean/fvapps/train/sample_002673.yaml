"vc-description": "Consider the word `\"abode\"`. We can see that the letter `a` is\
  \ in position `1` and `b` is in position `2`. In the alphabet, `a` and `b` are also\
  \ in positions `1` and `2`. Notice also that `d` and `e` in `abode` occupy the positions\
  \ they would occupy in the alphabet, which are positions `4` and `5`. \n\nGiven\
  \ an array of words, return an array of the number of letters that occupy their\
  \ positions in the alphabet for each word. For example,\n```\nsolve([\"abode\",\"\
  ABc\",\"xyzD\"]) = [4, 3, 1]\n```\nSee test cases for more examples.\n\nInput will\
  \ consist of alphabet characters, both uppercase and lowercase. No spaces.\n\nGood\
  \ luck!\n\nIf you like this Kata, please try: \n\n[Last digit symmetry](https://www.codewars.com/kata/59a9466f589d2af4c50001d8)\n\
  \n[Alternate capitalization](https://www.codewars.com/kata/59cfc000aeb2844d16000075)\n\
  \n~~~if:fortran\n## Fortran-Specific Notes\n\nDue to how strings and arrays work\
  \ in Fortran, some of the strings in the input array will inevitably contain trailing\
  \ whitespace.  **For this reason, please [trim](https://gcc.gnu.org/onlinedocs/gcc-4.3.4/gfortran/TRIM.html)\
  \ your input strings before processing them.**\n~~~"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve (words : List String) : List Nat := sorry\n\ntheorem\
  \ solve_output_matches_input_length \n  (words : List String) (h : words ≠ []) :\
  \ \n  List.length (solve words) = List.length words := sorry\n"
"vc-theorems": "theorem solve_counts_in_valid_range\n  (words : List String) (h :\
  \ words ≠ []) :\n  ∀ i, i < List.length (solve words) →\n    (0 ≤ (solve words).get!\
  \ i ∧ \n     (solve words).get! i ≤ String.length (words.get! i)) := sorry\n\n\n\
  \ntheorem solve_case_insensitive\n  (words : List String) (h : words ≠ []) :\n \
  \ solve words = solve (List.map String.toUpper words) ∧\n  solve words = solve (List.map\
  \ String.toLower words) := sorry\n\n/--\ninfo: [4, 3, 1]\n-/\n#guard_msgs in\n#eval\
  \ solve [\"abode\", \"ABc\", \"xyzD\"]\n\n/--\ninfo: [4, 3, 0]\n-/\n#guard_msgs\
  \ in\n#eval solve [\"abide\", \"ABc\", \"xyz\"]\n\n/--\ninfo: [1, 3, 1, 3]\n-/\n\
  #guard_msgs in\n#eval solve [\"encode\", \"abc\", \"xyzD\", \"ABmD\"]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
