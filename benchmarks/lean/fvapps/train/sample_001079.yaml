"vc-description": "-----Problem Statement-----\nWe have an integer sequence $A$, whose\
  \ length is $N$.\nFind the number of the non-empty contiguous subsequences of $A$\
  \ whose sum is $0$. Note that we are counting the ways to take out subsequences.\
  \ That is, even if the contents of some two subsequences are the same, they are\
  \ counted individually if they are taken from different positions.\n\n-----Input-----\n\
  Input is given in the following format:\n$N$\n$A_1$ $A_2$  . . .  $A_N$\n\n-----Output-----\n\
  Find the number of the non-empty contiguous subsequences of $A$ whose sum is $0$.\n\
  \n-----Constraints-----\n- $1 \\leq N \\leq 2\\times10^5$\n- $-10^9 \\leq A_i \\\
  leq 10^9$\n- All values in input are integers.\n\n-----Sample Input-----\n6\n1 3\
  \ -4 2 2 -2\n\n-----Sample Output-----\n3\n\n-----EXPLANATION-----\nThere are three\
  \ contiguous subsequences whose sums are $0$: $(1, 3, -4)$, $(-4, 2, 2)$ and $(2,\
  \ -2)$"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def findSubarraySum (arr : List Int) : Nat :=\n  sorry\n"
"vc-theorems": "theorem zero_array_has_subarray (arr : List Int) :\n  arr = [0] →\
  \ findSubarraySum arr ≥ 1 :=\n  sorry\n\n\ntheorem opposing_pairs_increase_subarrays\
  \ (arr : List Int) :\n  let arr_with_opposites := arr ++ (arr.map (fun x => -x))\n\
  \  findSubarraySum arr_with_opposites ≥ findSubarraySum arr :=\n  sorry\n\n\ntheorem\
  \ duplicate_array_increases_subarrays (arr : List Int) :\n  let doubled := arr ++\
  \ arr \n  findSubarraySum doubled ≥ findSubarraySum arr :=\n  sorry\n\n/--\ninfo:\
  \ 3\n-/\n#guard_msgs in\n#eval findSubarraySum [1, 3, -4, 2, 2, -2]\n\n/--\ninfo:\
  \ 1\n-/\n#guard_msgs in\n#eval findSubarraySum [0]\n\n/--\ninfo: 1\n-/\n#guard_msgs\
  \ in\n#eval findSubarraySum [1, -1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
