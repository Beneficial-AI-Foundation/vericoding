"vc-description": "Chef loves lucky numbers. Everybody knows that lucky numbers are\
  \ positive integers whose decimal representation contains only the lucky digits\
  \ 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.\n\n\
  Let F(X) equals to the number of lucky digits in decimal representation of X. Chef\
  \ wants to know the number of such integers X, that L ≤ X ≤ R and F(X) is a lucky\
  \ number. Help him and calculate that number modulo 109+7.\n\n-----Input-----\n\
  First line contains one integer T, the number of test cases. Each of the following\
  \ T lines contains two space separated positive integers L and R.\n\n-----Output-----\n\
  For each of the T test cases print one integer, the number of such X, that L ≤ X\
  \ ≤ R and F(X) is a lucky number, modulo 1000000007.\n\n-----Constraints-----\n\n\
  1 ≤ T ≤ 10\n\n1 ≤ L ≤ R ≤ 101000\n\n-----Example-----\nInput:\n4\n1 100\n1 10000\n\
  1 100000\n4444 4447\n\nOutput:\n0\n16\n640\n2\n\n-----Notes-----\nFirst test case:\
  \ of course, any number of less than 4 digits can't contain lucky number of lucky\
  \ digits, so the answer is 0.\n\nSecond test case: 16 required numbers are 4444\
  \ 4447 4474 4477 4744 4747 4774 4777 7444 7447 7474 7477 7744 7747 7774 7777.\n\n\
  Third test case: there are 640 required lucky numbers. Some of them are 4474, 14747,\
  \ 41474, 77277, 44407, 74749.\n\nFourth test case: the only two required numbers\
  \ are 4444 and 4447."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_lucky_numbers (left right : String) : Nat := sorry\n\n\
  theorem solve_lucky_numbers_range {left right : String} \n  (h1 : ∀ c ∈ left.data,\
  \ c.isDigit)\n  (h2 : ∀ c ∈ right.data, c.isDigit)\n  (h3 : left.length > 0)\n \
  \ (h4 : right.length > 0)\n  (h5 : left.toNat? = some (l : Nat))\n  (h6 : right.toNat?\
  \ = some (r : Nat))\n  (h7 : l ≤ 10^9)\n  (h8 : r ≤ 10^9)\n  : solve_lucky_numbers\
  \ left right ≤ 10^9 + 7 := sorry\n"
"vc-theorems": "theorem solve_lucky_numbers_identical_input {n : String}\n  (h1 :\
  \ ∀ c ∈ n.data, c.isDigit) \n  (h2 : n.length > 0)\n  (h3 : n.toNat? = some (num\
  \ : Nat))\n  (h4 : num ≤ 10^9)\n  : solve_lucky_numbers n n ≤ 1 := sorry\n\n\ntheorem\
  \ solve_lucky_numbers_invalid_input_left {n right : String}\n  (h1 : ∃ c ∈ n.data,\
  \ !c.isDigit)\n  (h2 : ∀ c ∈ right.data, c.isDigit)\n  : solve_lucky_numbers n right\
  \ = 0 := sorry\n\n\ntheorem solve_lucky_numbers_invalid_input_right {left n : String}\n\
  \  (h1 : ∀ c ∈ left.data, c.isDigit)\n  (h2 : ∃ c ∈ n.data, !c.isDigit)\n  : solve_lucky_numbers\
  \ left n = 0 := sorry\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval solve_lucky_numbers\
  \ \"1\" \"100\"\n\n/--\ninfo: 16\n-/\n#guard_msgs in\n#eval solve_lucky_numbers\
  \ \"1\" \"10000\"\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval solve_lucky_numbers\
  \ \"4444\" \"4447\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
