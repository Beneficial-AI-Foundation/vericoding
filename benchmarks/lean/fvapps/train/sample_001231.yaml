"vc-description": "The chef is trying to solve some pattern problems, Chef wants your\
  \ help to code it. Chef has one number K to form a new pattern. Help the chef to\
  \ code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$,\
  \ the number of test cases. Then the test cases follow. \n- Each test case contains\
  \ a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test\
  \ case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n\
  - $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n3\n2\n3\n4\n\n-----Sample Output:-----\n\
  1121\n1222\n112131\n122232\n132333\n11213141\n12223242\n13233343\n14243444\n\n-----EXPLANATION:-----\n\
  No need, else pattern can be decode easily."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def generate_pattern (k : Nat) : Array String := sorry\n\ntheorem\
  \ generate_pattern_length (k : Nat) (h : k > 0) : \n  (generate_pattern k).size\
  \ = k := sorry\n"
"vc-theorems": "theorem generate_pattern_numeric (k : Nat) (h : k > 0) :\n  ∀ s ∈\
  \ (generate_pattern k).data, ∀ c ∈ s.data, c.isDigit := sorry\n\n/--\ninfo: ['1121',\
  \ '1222']\n-/\n#guard_msgs in\n#eval generate_pattern 2\n\n/--\ninfo: ['112131',\
  \ '122232', '132333']\n-/\n#guard_msgs in\n#eval generate_pattern 3\n\n/--\ninfo:\
  \ ['11213141', '12223242', '13233343', '14243444']\n-/\n#guard_msgs in\n#eval generate_pattern\
  \ 4\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
