"vc-description": "You have a set of four (4) balls labeled with different numbers:\
  \ ball_1 (1), ball_2 (2), ball_3 (3) and ball(4) and we have 3 equal boxes for distribute\
  \ them. The possible combinations of the balls, without having empty boxes, are:\n\
  \n```\n (1)            (2)        (3)(4)     \n______        ______       _______\
  \ \n    \n```\n\n```\n (1)           (2)(4)        (3)\n______         ______  \
  \    ______\n  \n```\n\n```\n(1)(4)           (2)         (3)\n______          ______\
  \      ______\n\n```\n\n```\n  (1)           (2)(3)       (4)\n_______         _______\
  \     ______\n\n```\n\n```\n(1)(3)            (2)        (4)\n_______         _______\
  \     ______\n```\n\n```\n(1)(2)            (3)        (4)\n_______         _______\
  \     ______\n```\nWe have a total of **6** combinations.\n\nThink how many combinations\
  \ you will have with two boxes instead of three. You will obtain **7** combinations.\n\
  \nObviously, the four balls in only box will give only one possible combination\
  \ (the four balls in the unique box). Another particular case is the four balls\
  \ in four boxes having again one possible combination(Each box having one ball).\n\
  \nWhat will be the reasonable result for a set of n elements with no boxes?\n\n\
  Think to create a function that may calculate the amount of these combinations of\
  \ a set of ```n``` elements in ```k``` boxes.\n\nYou do no not have to check the\
  \ inputs type that will be always valid integers.\n\nThe code should detect the\
  \ cases when ```k > n```, returning \"It cannot be possible!\". \n\nFeatures of\
  \ the random tests:\n```\n1 <= k <= n <= 800\n```\nRuby version will be published\
  \ soon."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def combs_non_empty_boxes (n k : Int) : Int :=\nsorry\n"
"vc-theorems": "theorem invalid_inputs (n k : Int) :\n  k < 0 ∨ k > n → combs_non_empty_boxes\
  \ n k = -1 :=\nsorry\n\n\ntheorem single_box (n : Int) :\n  n > 0 → combs_non_empty_boxes\
  \ n 1 = 1 :=\nsorry\n\n\ntheorem max_boxes (n : Int) :\n  n > 0 → combs_non_empty_boxes\
  \ n n = 1 :=\nsorry\n\n\ntheorem result_properties_nonneg (n k : Int) :\n  combs_non_empty_boxes\
  \ n k ≥ 0 :=\nsorry\n\n\ntheorem result_properties_zero_boxes (n : Int) :\n  combs_non_empty_boxes\
  \ n 0 = 0 :=\nsorry\n\n\ntheorem result_properties_positive (n k : Int) :\n  k >\
  \ 0 → k ≤ n → combs_non_empty_boxes n k > 0 :=\nsorry\n\n\ntheorem valid_range_result\
  \ (n k : Int) :\n  1 < k → k ≤ n → combs_non_empty_boxes n k > 0 :=\nsorry\n\n\n\
  theorem valid_range_upper_bound (n k : Nat) :\n  1 < k → k ≤ n → combs_non_empty_boxes\
  \ n k ≤ k^n :=\nsorry\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval combs_non_empty_boxes\
  \ 4 3\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval combs_non_empty_boxes 4 4\n\n/--\n\
  info: 'It cannot be possible!'\n-/\n#guard_msgs in\n#eval combs_non_empty_boxes\
  \ 4 5\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
