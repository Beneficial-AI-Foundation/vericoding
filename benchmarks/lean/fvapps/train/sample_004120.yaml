"vc-description": "You will be given a fruit which a farmer has harvested, your job\
  \ is to see if you should buy or sell.\n\nYou will be given 3 pairs of fruit. Your\
  \ task is to trade your harvested fruit back into your harvested fruit via the intermediate\
  \ pair, you should return a string of 3 actions.\n\nif you have harvested apples,\
  \ you would buy this fruit pair: apple_orange, if you have harvested oranges, you\
  \ would sell that fruit pair.\n\n(In other words, to go from left to right (apples\
  \ to oranges) you buy, and to go from right to left you sell (oranges to apple))\n\
  \ne.g. \napple_orange, orange_pear, apple_pear\n1. if you have harvested apples,\
  \ you would buy this fruit pair: apple_orange\n2. Then you have oranges, so again\
  \ you would buy this fruit pair: orange_pear\n3. After you have pear, but now this\
  \ time you would sell this fruit pair: apple_pear\n4. Finally you are back with\
  \ the apples\n\nSo your function would return a list: [“buy”,”buy”,”sell”]\n\nIf\
  \ any invalid input is given, \"ERROR\" should be returned"
"vc-preamble": "import Imports.AllImports\n\ndef is_valid_path (pairs : List (List\
  \ String)) (start : String) (actions : Result String) : Bool :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def buy_or_sell (pairs : List (List String)) (start : String) :\
  \ Result String :=\n  sorry\n"
"vc-theorems": "theorem buy_or_sell_produces_valid_result (pairs : List (List String))\
  \ (start : String) : \n  match buy_or_sell pairs start with\n  | Result.Actions\
  \ actions => (∀ a ∈ actions, a = \"buy\" ∨ a = \"sell\") ∧ \n                  \
  \           actions.length = pairs.length\n  | Result.Error => True\n  := sorry\n\
  \n\ntheorem buy_or_sell_preserves_path (pairs : List (List String)) (start : String)\
  \ :\n  is_valid_path pairs start (buy_or_sell pairs start) = true := sorry\n\n\n\
  theorem buy_or_sell_works_with_arbitrary_strings (pairs : List (List String)) (start\
  \ : String) :\n  match buy_or_sell pairs start with\n  | Result.Actions actions\
  \ => ∀ a ∈ actions, a = \"buy\" ∨ a = \"sell\"\n  | Result.Error => True\n  := sorry\n\
  \n\ntheorem path_validity_implies_result_validity (pairs : List (List String)) (start\
  \ : String) :\n  is_valid_path pairs start (buy_or_sell pairs start) = true →\n\
  \  match buy_or_sell pairs start with\n  | Result.Actions actions => ∀ a ∈ actions,\
  \ a = \"buy\" ∨ a = \"sell\"\n  | Result.Error => True\n  := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
