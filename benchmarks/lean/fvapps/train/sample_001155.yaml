"vc-description": "Chefland has all the cities on a straight line. There are $N$ cities\
  \ in Chefland numbered $1$ to $N$. City $i$ is located at coordinate $x_i$ on the\
  \ x-axis. Guru wants to travel from city $A$ to city $B$. He starts at time t=0.\
  \ He has following choices to travel.\n- He can walk $1$ metre in $P$ secs.\n- There\
  \ is a train that travels from city $C$ to city $D$ which travels $1$ metre in $Q$\
  \ secs which starts at time t=$Y$ secs. Guru can take the train only at city $C$\
  \ and leave the train only at city $D$.\nCan you help Guru find the minimum time\
  \ he will need to travel from city $A$ to $B$. Note that you cannot board the train\
  \ after time t =$Y$.\n\n-----Input:-----\n- First line will contain $T$, number\
  \ of testcases. Then the testcases follow. \n- First line of each testcase contains\
  \ eight space separated integers $N, A, B, C, D, P, Q, Y $. \n- Second line of each\
  \ testcase contains $N$ space-separated integers with the $i$-th integer representing\
  \ $x_i$.\n\n-----Output:-----\nFor each testcase, output in a single line containing\
  \ the minimum travel time.\n\n-----Constraints-----\n- $1 \\leq T \\leq 300$\n-\
  \ $2 \\leq N \\leq 300$\n- $-1000 \\leq x_i \\leq 1000$\n- $0 \\leq Y \\leq 100000$\n\
  - $1 \\leq A,B,C,D \\leq n $\n- $A \\neq B$\n- $C \\neq D$\n- $1 \\leq P, Q \\leq\
  \ 100$\n- $x_i < x_j$  if $i < j$\n\n-----Sample Input:-----\n1\n4 1 3 2 4 3 2 4\n\
  1 2 3 4\n\n-----Sample Output:-----\n6\n\n-----EXPLANATION:-----\nGuru can walk\
  \ directly in 6 secs.\nIf Guru takes train, then he will need  atleast 11 secs."
"vc-preamble": "import Imports.AllImports\n\ndef abs (x : Int) : Int :=\nsorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def min_travel_time (n a b c d p q y : Nat) (cities : List Int)\
  \ : Nat :=\nsorry\n"
"vc-theorems": "theorem min_travel_time_non_negative (n a b c d p q y : Nat) (cities\
  \ : List Int)\n  (h1 : n ≥ 4) (h2 : n ≤ 100)\n  (h3 : p ≥ 1) (h4 : p ≤ 100) \n \
  \ (h5 : q ≥ 1) (h6 : q ≤ 100)\n  (h7 : y ≤ 100000)\n  (h8 : cities.length ≥ 4) (h9\
  \ : cities.length ≤ 100)\n  (h10 : ∀ x ∈ cities, -100000 ≤ x ∧ x ≤ 100000)\n  (h11\
  \ : a = 1) (h12 : b = 3)\n  (h13 : c = 2) (h14 : d = 4) :\n  min_travel_time n a\
  \ b c d p q y cities ≥ 0 := sorry\n\n\ntheorem min_travel_time_upper_bound (n a\
  \ b c d p q y : Nat) (cities : List Int)\n  (h1 : n ≥ 4) (h2 : n ≤ 100)\n  (h3 :\
  \ p ≥ 1) (h4 : p ≤ 100)\n  (h5 : q ≥ 1) (h6 : q ≤ 100) \n  (h7 : y ≤ 100000)\n \
  \ (h8 : cities.length ≥ 4) (h9 : cities.length ≤ 100)\n  (h10 : ∀ x ∈ cities, -100000\
  \ ≤ x ∧ x ≤ 100000)\n  (h11 : a = 1) (h12 : b = 3)\n  (h13 : c = 2) (h14 : d = 4)\
  \ :\n  min_travel_time n a b c d p q y cities ≤ (abs (cities[b-1] - cities[a-1]))\
  \ * p := sorry\n\n\ntheorem min_travel_time_identical_cities (n a b c d p q y :\
  \ Nat) (cities : List Int)\n  (h1 : n ≥ 4) (h2 : n ≤ 100)\n  (h3 : p ≥ 1) (h4 :\
  \ p ≤ 100)\n  (h5 : q ≥ 1) (h6 : q ≤ 100)\n  (h7 : y ≤ 100000)\n  (h8 : cities.length\
  \ ≥ 4) (h9 : cities.length ≤ 100)\n  (h10 : ∀ x ∈ cities, -100000 ≤ x ∧ x ≤ 100000)\n\
  \  (h11 : a = 1) (h12 : b = 3)\n  (h13 : c = 2) (h14 : d = 4)\n  (h15 : cities[a-1]\
  \ = cities[b-1]) :\n  min_travel_time n a b c d p q y cities = 0 := sorry\n\n/--\n\
  info: 6\n-/\n#guard_msgs in\n#eval min_travel_time 4 1 3 2 4 3 2 4 [1, 2, 3, 4]\n\
  \n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval min_travel_time 4 1 4 2 3 2 1 10 [0, 1,\
  \ 2, 3]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
