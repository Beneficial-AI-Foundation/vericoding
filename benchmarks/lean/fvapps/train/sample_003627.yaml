"vc-description": "The [Chinese zodiac](https://en.wikipedia.org/wiki/Chinese_zodiac)\
  \ is a repeating cycle of 12 years, with each year being represented by an animal\
  \ and its reputed attributes. The lunar calendar is divided into cycles of 60 years\
  \ each, and each year has a combination of an animal and an element. There are 12\
  \ animals and 5 elements; the animals change each year, and the elements change\
  \ every 2 years. The current cycle was initiated in the year of 1984 which was the\
  \ year of the Wood Rat.\n\nSince the current calendar is Gregorian, I will only\
  \ be using years from the epoch 1924.\n*For simplicity I am counting the year as\
  \ a whole year and not from January/February to the end of the year.*\n\n##Task\n\
  \nGiven a year, return the element and animal that year represents (\"Element Animal\"\
  ). \nFor example I'm born in 1998 so I'm an \"Earth Tiger\".\n\n\n```animals```\
  \ (or ```$animals``` in Ruby) is a preloaded array containing the animals in order:\n\
  \n```['Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', 'Horse', 'Goat', 'Monkey',\
  \ 'Rooster', 'Dog', 'Pig']```\n\n\n```elements``` (or ```$elements``` in Ruby) is\
  \ a preloaded array containing the elements in order:\n\n\n```['Wood', 'Fire', 'Earth',\
  \ 'Metal', 'Water']```\n\nTell me your zodiac sign and element in the comments.\
  \ Happy coding :)"
"vc-preamble": "import Imports.AllImports\n\ndef chinese_zodiac (year : Int) : String\
  \ := sorry\n\ndef Elements := [\"Wood\", \"Fire\", \"Earth\", \"Metal\", \"Water\"\
  ]"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def Animals := [\"Rat\", \"Ox\", \"Tiger\", \"Rabbit\", \"Dragon\"\
  , \"Snake\", \n               \"Horse\", \"Goat\", \"Monkey\", \"Rooster\", \"Dog\"\
  , \"Pig\"]\n\ndef String.splitToList (s : String) : List String := \n  s.split (·\
  \ = ' ')\n"
"vc-theorems": "theorem cycle_12_years {y : Int} (h : y ≥ 1900 ∧ y ≤ 2100) : \n  (chinese_zodiac\
  \ y).splitToList[1]! = (chinese_zodiac (y + 12)).splitToList[1]! := sorry \n\n\n\
  theorem cycle_10_years {y : Int} (h : y ≥ 1900 ∧ y ≤ 2100) :\n  (chinese_zodiac\
  \ y).splitToList[0]! = (chinese_zodiac (y + 10)).splitToList[0]! := sorry\n\n\n\
  theorem valid_format {year : Int} (h : year ≥ 1900 ∧ year ≤ 2100) :\n  let result\
  \ := chinese_zodiac year\n  let parts := result.splitToList\n  parts[0]! ∈ Elements\
  \ ∧ parts[1]! ∈ Animals := sorry\n\n\ntheorem deterministic {year : Int} (h : year\
  \ ≥ 1900 ∧ year ≤ 2100) :\n  chinese_zodiac year = chinese_zodiac year := sorry\n\
  \n/--\ninfo: 'Wood Snake'\n-/\n#guard_msgs in\n#eval chinese_zodiac 1965\n\n/--\n\
  info: 'Earth Tiger'\n-/\n#guard_msgs in\n#eval chinese_zodiac 1998\n\n/--\ninfo:\
  \ 'Fire Monkey'\n-/\n#guard_msgs in\n#eval chinese_zodiac 2016\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
