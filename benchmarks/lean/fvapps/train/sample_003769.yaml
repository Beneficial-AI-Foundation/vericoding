"vc-description": "# Definition\n\nA **_Tidy number_**  *is a number whose*  **_digits\
  \ are in non-decreasing order_**.\n___\n# Task\n\n**_Given_** a number, **_Find\
  \ if it is Tidy or not_** . \n____\n\n# Warm-up (Highly recommended)\n\n# [Playing\
  \ With Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\
  ___\n\n# Notes \n\n\n* **_Number_** *passed is always*  **_Positive_** .\n\n* **_Return_**\
  \ *the result as* a **_Boolean_** \n\n~~~if:prolog\n* Since prolog doesn't have\
  \ booleans,  return value should be 1 for (True) or 0 for (false)\n~~~\n___\n\n\
  # Input >> Output Examples\n\n```\ntidyNumber (12) ==> return (true)\n```\n\n##\
  \ **_Explanation_**:\n\n**_The number's digits_**    `{ 1 , 2 }`  are *in non-Decreasing\
  \ Order* (i.e) *1 <= 2* .\n____\n\n```\ntidyNumber (32) ==> return (false)\n```\n\
  \n## **_Explanation_**:\n\n**_The Number's Digits_**  `{ 3, 2}`  are **_not in non-Decreasing\
  \ Order_** (i.e) *3 > 2* .\n___\n\n```\ntidyNumber (1024) ==> return (false)\n```\n\
  \n## **_Explanation_**:\n\n**_The Number's Digits_**  `{1 , 0, 2, 4}`  are **_not\
  \ in non-Decreasing Order_**  as  *0 <= 1* .\n\n___\n\n```\ntidyNumber (13579) ==>\
  \ return (true)\n```\n\n## **_Explanation_**:\n\n**_The number's digits_**    `{1\
  \ , 3, 5, 7, 9}`  are *in non-Decreasing Order* .\n____\n\n```\ntidyNumber (2335)\
  \ ==> return (true)\n```\n\n## **_Explanation_**:\n\n**_The number's digits_** \
  \   `{2 , 3, 3, 5}`  are *in non-Decreasing Order* , **_Note_**   *3 <= 3* \n\n\
  ___\n___\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\
  \n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\
  \n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n\
  ___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou"
"vc-preamble": "import Imports.AllImports\n\ndef digits (n : Nat) : List Nat := \n\
  \  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def tidyNumber (n : Nat) : Bool :=\n  sorry\n"
"vc-theorems": "theorem tidy_number_returns_boolean (n : Nat) :\n  tidyNumber n =\
  \ true ∨ tidyNumber n = false :=\n  sorry\n\n\ntheorem single_digit_numbers_tidy\
  \ (n : Nat) :\n  n < 10 → tidyNumber n = true :=\n  sorry\n\n\ntheorem tidy_implies_non_decreasing_digits\
  \ {n : Nat} {ds : List Nat} :\n  tidyNumber n = true →\n  ds = digits n →\n  ∀ i\
  \ j, i < j → j < ds.length → ds[i]! ≤ ds[j]! :=\n  sorry\n\n\ntheorem non_decreasing_digits_iff_tidy\
  \ {n : Nat} {ds : List Nat} :\n  ds = digits n →\n  (∀ i j, i < j → j < ds.length\
  \ → ds[i]! ≤ ds[j]!) ↔ tidyNumber n = true :=\n  sorry\n\n\ntheorem decreasing_digits_not_tidy\
  \ {n : Nat} {ds : List Nat} :\n  ds = digits n →\n  ds.length ≥ 2 →\n  (∃ i j, i\
  \ < j ∧ j < ds.length ∧ ds[i]! > ds[j]!) →\n  tidyNumber n = false :=\n  sorry\n\
  \n/--\ninfo: True\n-/\n#guard_msgs in\n#eval tidyNumber 12\n\n/--\ninfo: False\n\
  -/\n#guard_msgs in\n#eval tidyNumber 32\n\n/--\ninfo: False\n-/\n#guard_msgs in\n\
  #eval tidyNumber 1024\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
