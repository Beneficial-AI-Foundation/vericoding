"vc-description": "You are given a string representing an attendance record for a\
  \ student. The record only contains the following three characters:\n\n\n\n'A' :\
  \ Absent. \n'L' : Late.\n 'P' : Present. \n\n\n\n\nA student could be rewarded if\
  \ his attendance record doesn't contain more than one 'A' (absent) or more than\
  \ two continuous 'L' (late).    \n\nYou need to return whether the student could\
  \ be rewarded according to his attendance record.\n\nExample 1:\n\nInput: \"PPALLP\"\
  \nOutput: True\n\n\n\nExample 2:\n\nInput: \"PPALLL\"\nOutput: False"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def check_student_record (s : String) : Bool := sorry\n\ntheorem\
  \ empty_string_valid : \n  check_student_record \"\" = true := sorry\n"
"vc-theorems": "theorem only_valid_chars_used (s : String) :\n  s.data.all (fun c\
  \ => c = 'P' ∨ c = 'L' ∨ c = 'A') → \n  ∃ (b : Bool), check_student_record s = b\
  \ := sorry\n\n\ntheorem two_absences_fail (s : String) :\n  (s.data.filter (· =\
  \ 'A')).length ≥ 2 →\n  check_student_record s = false := sorry\n\n\ntheorem three_consecutive_lates_fail\
  \ (s : String) :\n  s.data = [] ++ ['L', 'L', 'L'] ++ (List.drop 3 s.data) →\n \
  \ check_student_record s = false := sorry\n\n\ntheorem all_present_pass (s : String)\
  \ :\n  s.length > 0 →\n  (∀ c ∈ s.data, c = 'P') →\n  check_student_record s = true\
  \ := sorry\n\n\ntheorem no_absences_rule (s : String) :\n  (∀ c ∈ s.data, c = 'P'\
  \ ∨ c = 'L') →\n  (¬(s.data = [] ++ ['L', 'L', 'L'] ++ (List.drop 3 s.data))) ↔\n\
  \  check_student_record s = true := sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n\
  #eval check_student_record \"PPALLP\"\n\n/--\ninfo: False\n-/\n#guard_msgs in\n\
  #eval check_student_record \"PPALLL\"\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval\
  \ check_student_record \"PPALLP\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
