"vc-description": "# Task\n Fred Mapper is considering purchasing some land in Louisiana\
  \ to build his house on. In the process of investigating the land, he learned that\
  \ the state of Louisiana is actually shrinking by 50 square miles each year, due\
  \ to erosion caused by the Mississippi River. Since Fred is hoping to live in this\
  \ house the rest of his life, he needs to know if his land is going to be lost to\
  \ erosion.\n\n After doing more research, Fred has learned that the land that is\
  \ being lost forms a semicircle. This semicircle is part of a circle centered at\
  \ (0,0), with the line that bisects the circle being the `x` axis. Locations below\
  \ the `x` axis are in the water. The semicircle has an area of 0 at the beginning\
  \ of year 1. (Semicircle illustrated in the Figure.)\n\n ![](http://media.openjudge.cn/images/1005/semicircle.GIF)\n\
  \ \n Given two coordinates `x` and `y`, your task is to calculate that Fred Mapper's\
  \ house will begin eroding in how many years.\n \n Note:\n\n 1. No property will\
  \ appear exactly on the semicircle boundary: it will either be inside or outside.\
  \ \n\n 2. All locations are given in miles.\n \n 3. (0,0) will not be given.\n\n\
  # Example\n\n For `x = 1, y = 1`, the result should be `1`.\n \n After 1 year, Fred\
  \ Mapper's house will begin eroding.\n \n For `x = 25, y = 0`, the result should\
  \ be `20`.\n \n After 20 year, Fred Mapper's house will begin eroding.\n \n# Input/Output\n\
  \n\n - `[input]` integer `x`\n\n  The X coordinates of the land Fred is considering.\
  \ It will be an integer  point numbers measured in miles. \n  \n  `-100 <= x <=\
  \ 100`\n  \n  \n - `[input]` integer `y`\n\n  The Y coordinates of the land Fred\
  \ is considering. It will be an integer point numbers measured in miles. \n  \n\
  \  `0 <= y <= 100`\n  \n  \n - `[output]` an integer\n \n The first year (start\
  \ from 1) this point will be within the semicircle AT THE END OF YEAR."
"vc-preamble": "import Imports.AllImports\n\ndef Real := Int -- Simplified for demo\n\
  \ndef does_fred_need_houseboat (x y : Int) : Int :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def pi : Int := 3 -- Simplified for demo\n\ndef ceil (r : Int)\
  \ : Int :=\n  sorry\n"
"vc-theorems": "theorem does_fred_need_houseboat_nonnegative {x y : Int} (h : y ≥\
  \ 0) :\n  does_fred_need_houseboat x y ≥ 0 := by\n  sorry\n\n\ntheorem does_fred_need_houseboat_symmetric\
  \ {x y : Int} (h : y ≥ 0) :\n  does_fred_need_houseboat x y = does_fred_need_houseboat\
  \ (-x) y := by\n  sorry\n\n\ntheorem does_fred_need_houseboat_increases {x y cx\
  \ cy : Int}\n  (h1 : y ≥ 0)\n  (h2 : x.natAbs > 0 ∨ y > 0)\n  (h3 : cx = x / 2)\n\
  \  (h4 : cy = y / 2) :\n  does_fred_need_houseboat x y ≥ does_fred_need_houseboat\
  \ cx cy := by\n  sorry\n\n\ntheorem does_fred_need_houseboat_formula {x y : Int}\
  \ (h : y ≥ 0) :\n  does_fred_need_houseboat x y = ceil (pi * ((x * x) + (y * y))\
  \ / 100) := by\n  sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval does_fred_need_houseboat\
  \ 1 1\n\n/--\ninfo: 20\n-/\n#guard_msgs in\n#eval does_fred_need_houseboat 25 0\n\
  \n/--\ninfo: 7\n-/\n#guard_msgs in\n#eval does_fred_need_houseboat 10 10\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
