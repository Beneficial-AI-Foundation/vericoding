"vc-description": "## A square of squares\nYou like building blocks. You especially\
  \ like building blocks that are squares. And what you even like more, is to arrange\
  \ them into a square of square building blocks!\n\nHowever, sometimes, you can't\
  \ arrange them into a square. Instead, you end up with an ordinary rectangle! Those\
  \ blasted things! If you just had a way to know, whether you're currently working\
  \ in vain… Wait! That's it! You just have to check if your number of building blocks\
  \ is a _perfect square_.\n\n## Task\n\nGiven an integral number, determine if it's\
  \ a [square number](https://en.wikipedia.org/wiki/Square_number):\n\n> In mathematics,\
  \ a __square number__ or __perfect square__ is an integer that is the square of\
  \ an integer; in other words, it is the product of some integer with itself.\n\n\
  The tests will _always_ use some integral number, so don't worry about that in dynamic\
  \ typed languages.\n\n### Examples\n\n```\n-1  =>  false\n 0  =>  true\n 3  => \
  \ false\n 4  =>  true\n25  =>  true\n26  =>  false\n```"
"vc-preamble": "import Imports.AllImports\n\ndef is_square (n : Int) : Bool :=\nsorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def Int.sqrt (n : Int) : Int :=\nsorry\n"
"vc-theorems": "theorem is_square_properties_1 {n : Int} : \n  is_square n = true\
  \ → n ≥ 0 :=\nsorry\n\n\n\n\ntheorem is_square_properties_3 {n : Nat} :\n  is_square\
  \ (n * n) = true :=\nsorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
