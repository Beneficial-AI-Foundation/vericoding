"vc-description": "In a gold mine grid of size m * n, each cell in this mine has an\
  \ integer representing the amount of gold in that cell, 0 if it is empty.\nReturn\
  \ the maximum amount of gold you can collect under the conditions:\n\nEvery time\
  \ you are located in a cell you will collect all the gold in that cell.\nFrom your\
  \ position you can walk one step to the left, right, up or down.\nYou can't visit\
  \ the same cell more than once.\nNever visit a cell with 0 gold.\nYou can start\
  \ and stop collecting gold from any position in the grid that has some gold.\n\n\
   \nExample 1:\nInput: grid = [[0,6,0],[5,8,7],[0,9,0]]\nOutput: 24\nExplanation:\n\
  [[0,6,0],\n [5,8,7],\n [0,9,0]]\nPath to get the maximum gold, 9 -> 8 -> 7.\n\n\
  Example 2:\nInput: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]\nOutput: 28\n\
  Explanation:\n[[1,0,7],\n [2,0,6],\n [3,4,5],\n [0,3,0],\n [9,0,20]]\nPath to get\
  \ the maximum gold, 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7.\n\n \nConstraints:\n\n1 <=\
  \ grid.length, grid[i].length <= 15\n0 <= grid[i][j] <= 100\nThere are at most 25 cells\
  \ containing gold."
"vc-preamble": "import Imports.AllImports\n\ndef sum (xs : List Nat) : Nat := \n \
  \ match xs with\n  | [] => 0\n  | h :: t => h + sum t\n\n\ndef sumOfLists (xss :\
  \ List (List Nat)) : Nat :=\n  sum (xss.map sum)\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def get_maximum_gold (grid : List (List Nat)) : Nat := sorry \n\
  \ntheorem result_less_than_total (grid : List (List Nat)) :\n  get_maximum_gold\
  \ grid ≤ sumOfLists grid := sorry\n"
"vc-theorems": "theorem empty_grid_is_zero {w h : Nat} (grid : List (List Nat)) \n\
  \  (h1 : grid.length = h)\n  (h2 : ∀ row ∈ grid, row.length = w ∧ ∀ x ∈ row, x =\
  \ 0) :\n  get_maximum_gold grid = 0 := sorry\n\n\ntheorem result_is_non_negative\
  \ (grid : List (List Nat)) :\n  get_maximum_gold grid ≥ 0 := sorry\n\n\ntheorem\
  \ grid_unchanged (grid original : List (List Nat)) :\n  original = grid →\n  get_maximum_gold\
  \ grid = get_maximum_gold grid ∧ grid = original := sorry\n\n\ntheorem single_value\
  \ {w h val : Nat} (grid : List (List Nat))\n  (h1 : grid.length = h)\n  (h2 : ∀\
  \ row ∈ grid, row.length = w)\n  (h3 : grid.head!.head! = val)\n  (h4 : ∀ (i j :\
  \ Nat), (i,j) ≠ (0,0) → \n    i < h → j < w → (grid.get! i).get! j = 0) :\n  get_maximum_gold\
  \ grid = val := sorry\n\n\ntheorem max_path_viable (grid : List (List Nat)) :\n\
  \  get_maximum_gold grid ≤ sumOfLists grid := sorry\n\n/--\ninfo: 24\n-/\n#guard_msgs\
  \ in\n#eval get_maximum_gold [[0, 6, 0], [5, 8, 7], [0, 9, 0]]\n\n/--\ninfo: 28\n\
  -/\n#guard_msgs in\n#eval get_maximum_gold [[1, 0, 7], [2, 0, 6], [3, 4, 5], [0,\
  \ 3, 0], [9, 0, 20]]\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval get_maximum_gold\
  \ [[1, 1], [1, 1]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
