"vc-description": "Chef likes to play with big numbers. Today, he has a big positive\
  \ integer N. He can select any two digits from this number (the digits can be same\
  \ but their positions should be different) and orders them in any one of the two\
  \ possible ways. For each of these ways, he creates a two digit number from it (might\
  \ contain leading zeros). Then, he will pick a character corresponding to the ASCII\
  \ value equal to this number, i.e. the number 65 corresponds to 'A', 66 to 'B' and\
  \ so on till 90 for 'Z'. Chef is only interested in finding which of the characters\
  \ in the range 'A' to 'Z' can possibly be picked this way. \n\n-----Input-----\n\
  The first line of the input contains an integer T denoting the number of test cases.\n\
  The first line of the input contains an integer N. \n\n-----Output-----\nFor each\
  \ test case, output a string containing characters Chef can pick in sorted order\
  \ If the resulting size of string is zero, you should output a new line.\n\n-----Constraints-----\n\
  - 1 ≤ T ≤ 10\n- 1 ≤ N ≤ 10100000\n\n-----Subtasks-----\n- Subtask #1 (40 points)\
  \ N ≤ 1010\n- Subtask #2 (60 points) Original Constraints\n\n-----Example-----\n\
  Input:\n4\n65\n566\n11\n1623455078\n\nOutput:\nA\nAB\n\nACDFGHIJKLNPQRSTUVW\n\n\
  -----Explanation-----\nExample case 1. Chef can pick digits 6 and 5 and create integers\
  \ 56 and 65. The integer 65 corresponds to 'A'.\nExample case 2. Chef can pick digits\
  \ 6 and 5 and create 'A' as it equals 65. He can pick 6 and 6 (they are picked from\
  \ position 2 and position 3, respectively) to create 'B' too. Hence answer is \"\
  AB\".\nExample case 3. It's not possible to create any character from 'A' to 'Z'.\
  \ Hence, we just print a new line."
"vc-preamble": "import Imports.AllImports\n\ndef find_possible_ascii_chars (s: String)\
  \ : String :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def hasDuplicates (s: List α) : Bool :=\n  sorry\n"
"vc-theorems": "theorem output_is_uppercase_ascii (input: String)\n    (h: input.all\
  \ (fun c => '0' ≤ c ∧ c ≤ '9')) \n    (h_size: input.length > 0) :\n    let result\
  \ := find_possible_ascii_chars input\n    result.all (fun c => 65 ≤ c.toNat ∧ c.toNat\
  \ ≤ 90) ∧ \n    ¬hasDuplicates result.data :=\n  sorry\n\n\ntheorem chars_derive_from_input\
  \ (input: String)\n    (h: input.all (fun c => '0' ≤ c ∧ c ≤ '9'))\n    (h_size:\
  \ input.length > 0) :\n    let result := find_possible_ascii_chars input\n    let\
  \ input_chars := input.data\n    ∀ c ∈ result.data, ∃ d ∈ input_chars, d.toNat =\
  \ (c.toNat / 10) + '0'.toNat :=\n  sorry\n\n\ntheorem small_digits_give_empty (input:\
  \ String)\n    (h: input.all (fun c => '0' ≤ c ∧ c ≤ '4'))\n    (h_size: input.length\
  \ > 0) :\n    find_possible_ascii_chars input = \"\" :=\n  sorry\n\n\ntheorem duplicates_are_removed\
  \ (input: String)\n    (h: input.all (fun c => '0' ≤ c ∧ c ≤ '9'))\n    (h_size:\
  \ input.length > 0) :\n    let result := find_possible_ascii_chars input\n    ¬hasDuplicates\
  \ result.data :=\n  sorry\n\n/--\ninfo: 'A'\n-/\n#guard_msgs in\n#eval find_possible_ascii_chars\
  \ \"65\"\n\n/--\ninfo: 'AB'\n-/\n#guard_msgs in\n#eval find_possible_ascii_chars\
  \ \"566\"\n\n/--\ninfo: ''\n-/\n#guard_msgs in\n#eval find_possible_ascii_chars\
  \ \"11\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
