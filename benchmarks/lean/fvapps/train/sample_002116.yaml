"vc-description": "Dima is a beginner programmer. During his working process, he regularly\
  \ has to repeat the following operation again and again: to remove every second\
  \ element from the array. One day he has been bored with easy solutions of this\
  \ problem, and he has come up with the following extravagant algorithm.\n\nLet's\
  \ consider that initially array contains n numbers from 1 to n and the number i\
  \ is located in the cell with the index 2i - 1 (Indices are numbered starting from\
  \ one) and other cells of the array are empty. Each step Dima selects a non-empty\
  \ array cell with the maximum index and moves the number written in it to the nearest\
  \ empty cell to the left of the selected one. The process continues until all n\
  \ numbers will appear in the first n cells of the array. For example if n = 4, the\
  \ array is changing as follows: [Image] \n\nYou have to write a program that allows\
  \ you to determine what number will be in the cell with index x (1 ≤ x ≤ n) after\
  \ Dima's algorithm finishes.\n\n\n-----Input-----\n\nThe first line contains two\
  \ integers n and q (1 ≤ n ≤ 10^18, 1 ≤ q ≤ 200 000), the number of elements in the\
  \ array and the number of queries for which it is needed to find the answer.\n\n\
  Next q lines contain integers x_{i} (1 ≤ x_{i} ≤ n), the indices of cells for which\
  \ it is necessary to output their content after Dima's algorithm finishes.\n\n\n\
  -----Output-----\n\nFor each of q queries output one integer number, the value that\
  \ will appear in the corresponding array cell after Dima's algorithm finishes.\n\
  \n\n-----Examples-----\nInput\n4 3\n2\n3\n4\n\nOutput\n3\n2\n4\n\nInput\n13 4\n\
  10\n5\n4\n8\n\nOutput\n13\n3\n8\n9\n\n\n\n-----Note-----\n\nThe first example is\
  \ shown in the picture.\n\nIn the second example the final array is [1, 12, 2, 8,\
  \ 3, 11, 4, 9, 5, 13, 6, 10, 7]."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_array_element (n : Nat) (x : Nat) : Nat :=\nsorry\n"
"vc-theorems": "theorem find_array_element_in_bounds {n x : Nat} (hn : n > 0) (hx\
  \ : x > 0) (hxn : x ≤ n) : \n  1 ≤ find_array_element n x ∧ find_array_element n\
  \ x ≤ n :=\nsorry\n\n\ntheorem find_array_element_first {n : Nat} (hn : n > 0) :\n\
  \  find_array_element n 1 = 1 :=\nsorry\n\n\ntheorem find_array_element_bijective\
  \ {n : Nat} (hn : n > 1) :\n  ∀ y : Nat, 1 ≤ y ∧ y ≤ n → ∃ x : Nat, 1 ≤ x ∧ x ≤\
  \ n ∧ find_array_element n x = y :=\nsorry\n\n/--\ninfo: expected[i]\n-/\n#guard_msgs\
  \ in\n#eval find_array_element 4 queries[i]\n\n/--\ninfo: expected[i]\n-/\n#guard_msgs\
  \ in\n#eval find_array_element 13 queries[i]\n\n/--\ninfo: expected[i]\n-/\n#guard_msgs\
  \ in\n#eval find_array_element 3 queries[i]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
