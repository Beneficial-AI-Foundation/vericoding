"vc-description": "## Task \n\nUsing `n` as a parameter in the function `pattern`,\
  \ where `n>0`, complete the codes to get the pattern (take the help of examples):\n\
  \n**Note:** There is no newline in the end (after the pattern ends)\n\n\n### Examples\n\
  \n`pattern(3)` should return `\"1\\n1*2\\n1**3\"`, e.g. the following:\n```\n1\n\
  1*2\n1**3\n```\n`pattern(10):` should return the following:\n```\n1\n1*2\n1**3\n\
  1***4\n1****5\n1*****6\n1******7\n1*******8\n1********9\n1*********10\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def pattern (n : Nat) : String := sorry\n\ntheorem pattern_lines_count\
  \ {n : Nat} (h : n > 0) :\n  ((pattern n).splitOn \"\\n\").length == n := sorry\n"
"vc-theorems": "theorem pattern_first_line_is_one {n : Nat} (h : n > 0) :\n  ((pattern\
  \ n).splitOn \"\\n\").get! 0 == \"1\" := sorry\n\n\ntheorem pattern_line_structure\
  \ {n : Nat} {i : Nat} (h₁ : n > 0) (h₂ : i > 1) (h₃ : i ≤ n) :\n  let lines := (pattern\
  \ n).splitOn \"\\n\"\n  let line := lines.get! (i - 1)\n  line.startsWith \"1\"\
  \ ∧ \n  line.endsWith (toString i) ∧\n  line.length = i + (if i > 2 then i-2 else\
  \ 0) := sorry\n\n/--\ninfo: expected1\n-/\n#guard_msgs in\n#eval pattern 3\n\n/--\n\
  info: expected2\n-/\n#guard_msgs in\n#eval pattern 5\n\n/--\ninfo: expected3\n-/\n\
  #guard_msgs in\n#eval pattern 7\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
