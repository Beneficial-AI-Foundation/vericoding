"vc-description": "# Task\n A noob programmer was given two simple tasks: sum and\
  \ sort the elements of the given array `arr` = [a1, a2, ..., an]. \n \n He started\
  \ with summing and did it easily, but decided to store the sum he found in some\
  \ random position of the original array which was a bad idea. Now he needs to cope\
  \ with the second task, sorting the original array arr, and it's giving him trouble\
  \ since he modified it.\n\n Given the array `shuffled`, consisting of elements a1,\
  \ a2, ..., an, and their sumvalue in random order, return the sorted array of original\
  \ elements a1, a2, ..., an.\n\n# Example\n\n For `shuffled = [1, 12, 3, 6, 2]`,\
  \ the output should be `[1, 2, 3, 6]`.\n\n `1 + 3 + 6 + 2 = 12`, which means that\
  \ 1, 3, 6 and 2 are original elements of the array.\n\n For `shuffled = [1, -3,\
  \ -5, 7, 2]`, the output should be `[-5, -3, 2, 7]`.\n\n# Input/Output\n\n\n - `[input]`\
  \ integer array `shuffled`\n\n    Array of at least two integers. It is guaranteed\
  \ that there is an index i such that shuffled[i] = shuffled[0] + ... + shuffled[i\
  \ - 1] + shuffled[i + 1] + ... + shuffled[n].\n\n    Constraints:\n\n    `2 ≤ shuffled.length\
  \ ≤ 30,`\n\n    `-300 ≤ shuffled[i] ≤ 300.`\n\n\n - `[output]` an integer array\n\
  \n    A `sorted` array of shuffled.length - 1 elements."
"vc-preamble": "import Imports.AllImports\n\ndef List.insertIntoSorted (x : Int) :\
  \ List Int → List Int \n  | [] => [x]\n  | y::ys => if x ≤ y then x::y::ys else\
  \ y::(insertIntoSorted x ys)\n\n\ndef List.sortList : List Int → List Int \n  |\
  \ [] => []\n  | x::xs => insertIntoSorted x (sortList xs)\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def shuffled_array (arr : List Int) : List Int := sorry \n\ntheorem\
  \ shuffled_array_valid_properties {arr : List Int} (h : arr.length ≥ 2) :\n  let\
  \ orig := (arr.take (arr.length - 1)).sortList\n  let total := arr.take (arr.length\
  \ - 1) |>.foldl (· + ·) 0\n  let result := shuffled_array (orig ++ [total])\n  result.length\
  \ = orig.length ∧ result.sortList = orig\n  := sorry\n"
"vc-theorems": "theorem shuffled_array_invalid {arr : List Int} \n  (h : ∀ (i : Nat)\
  \ (h : i < arr.length), \n    arr.get ⟨i, h⟩ ≠ ((arr.take i ++ arr.drop (i+1)).foldl\
  \ (· + ·) 0)) :\n  shuffled_array arr = [] := sorry\n\n\ntheorem shuffled_array_single\
  \ {x : Int} :\n  shuffled_array [x] = [] := sorry\n\n/--\ninfo: [1, 2, 3, 6]\n-/\n\
  #guard_msgs in\n#eval shuffled_array [1, 12, 3, 6, 2]\n\n/--\ninfo: [-5, -3, 2,\
  \ 7]\n-/\n#guard_msgs in\n#eval shuffled_array [1, -3, -5, 7, 2]\n\n/--\ninfo: [-3]\n\
  -/\n#guard_msgs in\n#eval shuffled_array [-3, -3]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
