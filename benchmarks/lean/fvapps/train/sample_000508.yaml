"vc-description": "Indian National Olympiad in Informatics 2016\n\tThere are k types\
  \ of brackets each with its own opening bracket and closing bracket. We assume that\
  \ the first pair is denoted by the numbers 1 and k+1, the second by 2 and k+2 and\
  \ so on. Thus the opening brackets are denoted by 1,2,.., k, and the corresponding\
  \ closing brackets are denoted by k+1,k+2,..., 2*k respectively.\n\n\tSome sequences\
  \ with elements from 1,2, ... 2*k form well-bracketed sequences while others don't.\
  \ A sequence is well-bracketed, if we can match or pair up opening brackets and\
  \ closing brackets of the same type in such a way that the following holds:\n\n\t\
  \ 1) every bracket is paired up\n\n\t 2) in each matched pair, the opening bracket\
  \ occurs before the closing bracket\n\n\t 3) for a matched pair, any other matched\
  \ pair lies either completely between them or outside them.\n\n\tFor the examples\
  \ discussed below, let us assume that k = 2. The sequence 1,1,3 is not well-bracketed\
  \ as one of the two 1's cannot be paired. The sequence 3,1,3,1 is not well-bracketed\
  \ as there is no way to match the second 1 to a closing bracket occurring after\
  \ it. The sequence 1,2,3,4 is not well-bracketed as the matched pair 2,4 is neither\
  \ completely between the matched pair 1,3 nor completely outside it. That is, the\
  \ matched pairs cannot overlap. The sequence 1,2,4,3,1,3 is well-bracketed. We match\
  \ the first 1 with the first 3, the 2 with the 4 and the second 1 with the second\
  \ 3, satisfying all the 3 conditions. If you rewrite these sequences using [,{,],}\
  \ instead of 1,2,3,4 respectively, this will be quite clear.\n\n\tIn this problem\
  \ you are given a sequence of brackets, of length N: B[1], .., B[N], where each\
  \ B[i] is one of the brackets. You are also given an array of Values: V[1],.., V[N].\n\
  \n\tAmong all the subsequences in the Values array, such that the corresponding\
  \ bracket subsequence in the B Array is a well-bracketed sequence, you need to find\
  \ the maximum sum. Suppose N = 6, k = 3 and the values of V and B are as follows:\n\
  \ni\t1\t2\t3\t4\t5\t6\nV[i]\t4\t5\t-2\t1\t1\t6\nB[i]\t1\t3\t4\t2\t5\t6\n\n\tThen,\
  \ the brackets in positions 1,3 form a well-bracketed sequence (1,4) and the sum\
  \ of the values in these positions is 2 (4 + -2 = 2). The brackets in positions\
  \ 1,3,4,5 form a well-bracketed sequence (1,4,2,5) and the sum of the values in\
  \ these positions is 4. Finally, the brackets in positions 2,4,5,6 forms a well-bracketed\
  \ sequence (3,2,5,6) and the sum of the values in these positions is 13. The sum\
  \ of the values in positions 1,2,5,6 is 16 but the brackets in these positions (1,3,5,6)\
  \ do not form a well-bracketed sequence. You can check the best sum from positions\
  \ whose brackets form a well-bracketed sequence is 13.\n\n\n-----Input format-----\n\
  \tOne line, which contains (2*N + 2) space separate integers. The first integer\
  \ denotes N. The next integer is k. The next N integers are V[1],..., V[N]. The\
  \ last N integers are B[1],.., B[N].\n\n\n-----Output format-----\n\tOne integer,\
  \ which is the maximum sum possible satisfying the requirement mentioned above.\
  \ \n\n\n-----Test data-----\n\n\t\t1 ≤ k ≤ 7\n\n\t\t-106 ≤ V[i] ≤ 106, for all i\n\
  \n\t\t1 ≤ B[i] ≤ 2*k, for all i.\n\t\nSubtask 1 (40 Marks) 1 ≤ n ≤ 10.\nSubtask\
  \ 2 (60 Marks) 1 ≤ n ≤ 700.\n\n\n-----Sample Input-----\n6 3 4 5 -2 1 1 6 1 3 4\
  \ 2 5 6\n\n-----Sample Output-----\n13"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_well_bracketed_sum (n k : Nat) (values : List Int) (brackets\
  \ : List Nat) : Int :=\n  sorry\n"
"vc-theorems": "theorem result_geq_max_pair_sum {n k : Nat} {values : List Int} {brackets\
  \ : List Nat}\n  (h1 : values.length = n)\n  (h2 : brackets.length = n)\n  (h3 :\
  \ ∀ (i j : Nat) (hi : i < n) (hj : j < n), j > i →\n    brackets[i]'(by rw [h2];\
  \ exact hi) + k = brackets[j]'(by rw [h2]; exact hj) → \n    solve_well_bracketed_sum\
  \ n k values brackets ≥ \n      values[i]'(by rw [h1]; exact hi) + values[j]'(by\
  \ rw [h1]; exact hj)) :\n  ∀ max_pair_sum : Int,\n  (∀ (i j : Nat) (hi : i < n)\
  \ (hj : j < n), j > i →\n    brackets[i]'(by rw [h2]; exact hi) + k = brackets[j]'(by\
  \ rw [h2]; exact hj) → \n    values[i]'(by rw [h1]; exact hi) + values[j]'(by rw\
  \ [h1]; exact hj) ≤ max_pair_sum) →\n  solve_well_bracketed_sum n k values brackets\
  \ ≥ max_pair_sum :=\n  sorry\n\n\ntheorem n_eq_one_result_zero {k : Nat} {values\
  \ : List Int} {brackets : List Nat}\n  (h1 : values.length = 1)\n  (h2 : brackets.length\
  \ = 1) :\n  solve_well_bracketed_sum 1 k values brackets = 0 :=\n  sorry\n\n/--\n\
  info: 13\n-/\n#guard_msgs in\n#eval solve_well_bracketed_sum 6 3 [4, 5, -2, 1, 1,\
  \ 6] [1, 3, 4, 2, 5, 6]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval solve_well_bracketed_sum\
  \ 1 1 [1] [1]\n\n/--\ninfo: 8\n-/\n#guard_msgs in\n#eval solve_well_bracketed_sum\
  \ 2 1 [5, 3] [1, 2]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
