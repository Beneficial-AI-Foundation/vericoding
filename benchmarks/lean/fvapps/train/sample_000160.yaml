"vc-description": "Given a string s and a string t, check if s is subsequence of t.\n\
  \n\n\nYou may assume that there is only lower case English letters in both s and\
  \ t. t is potentially a very long (length ~= 500,000) string, and s is a short string\
  \ (\n\n\nA subsequence of a string is a new string which is formed from the original\
  \ string by deleting some (can be none) of the characters without disturbing the\
  \ relative positions of the remaining characters. (ie, \"ace\" is a subsequence\
  \ of \"abcde\" while \"aec\" is not).\n\n\nExample 1:\ns = \"abc\", t = \"ahbgdc\"\
  \n\n\nReturn true.\n\n\nExample 2:\ns = \"axc\", t = \"ahbgdc\"\n\n\nReturn false.\n\
  \n\nFollow up:\nIf there are lots of incoming S, say S1, S2, ... , Sk where k >=\
  \ 1B, and you want to check one by one to see if T has its subsequence. In this\
  \ scenario, how would you change your code?\n\nCredits:Special thanks to @pbrother\
  \ for adding this problem and creating all test cases."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_subsequence (s t : String) : Bool :=\n  sorry\n"
"vc-theorems": "theorem empty_string_is_subsequence {t : String} :\n  is_subsequence\
  \ \"\" t = true := sorry \n\n\ntheorem string_is_subsequence_of_itself {s : String}\
  \ :\n  is_subsequence s s = true := sorry\n\n\ntheorem longer_string_not_subsequence\
  \ {s t : String} :\n  s.length > t.length → is_subsequence s t = false := sorry\n\
  \n\ntheorem subsequence_in_concatenation {s t : String} :\n  s ≠ \"\" → \n  is_subsequence\
  \ s (s ++ t) = true ∧ is_subsequence s (t ++ s) = true := sorry\n\n\ntheorem inserting_chars_preserves_subsequence\
  \ {s t : String} :\n  s ≠ \"\" →\n  (let result := String.intercalate t (s.data.map\
  \ toString);\n   is_subsequence s result = true) := sorry\n\ntheorem subsequence_maintains_order\
  \ {s t : String} :\n  s.length ≥ 2 →\n  let reversed := String.mk s.data.reverse;\n\
  \  s ≠ reversed →\n  is_subsequence s t = true →\n  is_subsequence reversed t =\
  \ false := sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval is_subsequence \"\
  abc\" \"ahbgdc\"\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval is_subsequence \"\
  axc\" \"ahbgdc\"\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval is_subsequence \"\
  \" \"ahbgdc\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
