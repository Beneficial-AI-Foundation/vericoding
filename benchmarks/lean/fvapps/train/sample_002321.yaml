"vc-description": "You are given a license key represented as a string S which consists\
  \ only alphanumeric character and dashes. The string is separated into N+1 groups\
  \ by N dashes.\n\nGiven a number K, we would want to reformat the strings such that\
  \ each group contains exactly K characters, except for the first group which could\
  \ be shorter than K, but still must contain at least one character. Furthermore,\
  \ there must be a dash inserted between two groups and all lowercase letters should\
  \ be converted to uppercase.\n\nGiven a non-empty string S and a number K, format\
  \ the string according to the rules described above.\n\nExample 1:\n\nInput: S =\
  \ \"5F3Z-2e-9-w\", K = 4\n\nOutput: \"5F3Z-2E9W\"\n\nExplanation: The string S has\
  \ been split into two parts, each part has 4 characters.\nNote that the two extra\
  \ dashes are not needed and can be removed.\n\n\n\n\nExample 2:\n\nInput: S = \"\
  2-5g-3-J\", K = 2\n\nOutput: \"2-5G-3J\"\n\nExplanation: The string S has been split\
  \ into three parts, each part has 2 characters except the first part as it could\
  \ be shorter as mentioned above.\n\n\n\nNote:\n\nThe length of string S will not\
  \ exceed 12,000, and K is a positive integer.\nString S consists only of alphanumerical\
  \ characters (a-z and/or A-Z and/or 0-9) and dashes(-).\nString S is non-empty."
"vc-preamble": "import Imports.AllImports\n\ndef isUppercase (c : Char) : Bool :=\
  \ sorry\ndef toCharList (s : String) : List Char := sorry"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def removeDashes (s : String) : String := sorry\ndef licenseKeyFormatting\
  \ (s : String) (k : Nat) : String := sorry\n"
"vc-theorems": "theorem license_key_uppercase (s : String) (k : Nat) : \n  ∀ c ∈ toCharList\
  \ (licenseKeyFormatting s k), isUppercase c = true \n  := sorry\n\n\ntheorem license_key_same_length\
  \ (s : String) (k : Nat) :\n  String.length (removeDashes (licenseKeyFormatting\
  \ s k)) = \n  String.length (removeDashes s)\n  := sorry\n\n\ntheorem license_key_group_sizes\
  \ (s : String) (k : Nat) :\n  let result := licenseKeyFormatting s k\n  let groups\
  \ := String.splitOn result \"-\"\n  groups.length ≤ 1 ∨ \n  (∀ g ∈ groups.tail,\
  \ String.length g = k) ∧ String.length groups.head! ≤ k\n  := sorry\n\n\ntheorem\
  \ license_key_empty (k : Nat) :\n  licenseKeyFormatting \"\" k = \"\"\n  := sorry\n\
  \n\ntheorem license_key_single_dash (k : Nat) :\n  licenseKeyFormatting \"-\" k\
  \ = \"\"\n  := sorry\n\n\ntheorem license_key_no_dashes (s : String) (k : Nat) :\n\
  \  (∀ c ∈ toCharList s, c ≠ '-') → \n  removeDashes (licenseKeyFormatting s k) =\
  \ String.mk (List.map Char.toUpper (toCharList s))\n  := sorry\n\n/--\ninfo: '5F3Z-2E9W'\n\
  -/\n#guard_msgs in\n#eval license_key_formatting \"5F3Z-2e-9-w\" 4\n\n/--\ninfo:\
  \ '2-5G-3J'\n-/\n#guard_msgs in\n#eval license_key_formatting \"2-5g-3-J\" 2\n\n\
  /--\ninfo: 'A-B-C'\n-/\n#guard_msgs in\n#eval license_key_formatting \"a-b-c\" 1\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
