"vc-description": "Given an array of integers nums, sort the array in ascending order.\n\
   \nExample 1:\nInput: nums = [5,2,3,1]\nOutput: [1,2,3,5]\nExample 2:\nInput: nums\
  \ = [5,1,1,2,0,0]\nOutput: [0,0,1,1,2,5]\n\n \nConstraints:\n\n1 <= nums.length\
  \ <= 50000\n-50000 <= nums[i] <= 50000"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sort_array (xs : List Int) : List Int :=\n  sorry\n"
"vc-theorems": "theorem sort_array_maintains_length (xs : List Int) :\n  (sort_array\
  \ xs).length = xs.length :=\nsorry\n\n\n\n\ntheorem sort_array_perm (xs : List Int)\
  \ :\n  List.Perm xs (sort_array xs) :=\nsorry\n\n\ntheorem sort_array_pure (xs :\
  \ List Int) :\n  sort_array xs = sort_array xs :=\nsorry\n\n\ntheorem sort_array_empty_list\
  \ :\n  sort_array [] = [] :=\nsorry\n\n/--\ninfo: [1, 2, 3, 5]\n-/\n#guard_msgs\
  \ in\n#eval sort_array [5, 2, 3, 1]\n\n/--\ninfo: [0, 0, 1, 1, 2, 5]\n-/\n#guard_msgs\
  \ in\n#eval sort_array [5, 1, 1, 2, 0, 0]\n\n/--\ninfo: [1]\n-/\n#guard_msgs in\n\
  #eval sort_array [1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
