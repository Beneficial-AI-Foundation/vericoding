"vc-description": "You're about to go on a trip around the world! On this trip you're\
  \ bringing your trusted backpack, that anything fits into. The bad news is that\
  \ the airline has informed you, that your luggage cannot exceed a certain amount\
  \ of weight.\n\nTo make sure you're bringing your most valuable items on this journey\
  \ you've decided to give all your items a score that represents how valuable this\
  \ item is to you. It's your job to pack you bag so that you get the most value out\
  \ of the items that you decide to bring.\n\nYour input will consist of two arrays,\
  \ one for the scores and one for the weights. You input will always be valid lists\
  \ of equal length, so you don't have to worry about verifying your input.\n\nYou'll\
  \ also be given a maximum weight. This is the weight that your backpack cannot exceed.\n\
  \nFor instance, given these inputs:\n\n    scores = [15, 10, 9, 5]\n    weights\
  \ = [1, 5, 3, 4]\n    capacity = 8\n    \nThe maximum score will be ``29``. This\
  \ number comes from bringing items ``1, 3 and 4``.\n\nNote: Your solution will have\
  \ to be efficient as the running time of your algorithm will be put to a test."
"vc-preamble": "import Imports.AllImports\n\ndef List.sum : List Nat → Nat\n  | []\
  \ => 0\n  | x::xs => x + sum xs\n\n\ndef List.minimum : List Nat → Nat\n  | [] =>\
  \ 0 \n  | [x] => x\n  | x::xs => Nat.min x (minimum xs)\n\n\ndef pack_bagpack (scores\
  \ weights : List Nat) (capacity : Nat) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def max_valid_score (scores weights : List Nat) (capacity : Nat)\
  \ : Nat :=\n  let pairs := List.zip scores weights\n  let valid := List.filter (fun\
  \ p => p.snd ≤ capacity) pairs\n  let scores := List.map Prod.fst valid\n  match\
  \ scores with\n  | [] => 0\n  | x::xs => List.foldl Nat.max x xs\n"
"vc-theorems": "theorem pack_backpack_non_negative (scores weights : List Nat) (capacity\
  \ : Nat) :\n  pack_bagpack scores weights capacity ≥ 0 := sorry\n\n\ntheorem pack_backpack_at_most_sum_scores\
  \ (scores weights : List Nat) (capacity : Nat) :\n  pack_bagpack scores weights\
  \ capacity ≤ List.sum scores := sorry\n\n\ntheorem pack_backpack_zero_if_capacity_too_small\
  \ \n  (scores weights : List Nat) (capacity : Nat)\n  (h : capacity < List.minimum\
  \ weights) :\n  pack_bagpack scores weights capacity = 0 := sorry\n\n\ntheorem pack_backpack_at_least_max_valid_score\
  \ \n  (scores weights : List Nat) (capacity : Nat)\n  (h : scores.length = weights.length)\n\
  \  (h2 : scores.length > 0) :\n  pack_bagpack scores weights capacity ≥ max_valid_score\
  \ scores weights capacity := sorry\n\n/--\ninfo: 29\n-/\n#guard_msgs in\n#eval pack_bagpack\
  \ [15, 10, 9, 5] [1, 5, 3, 4] 8\n\n/--\ninfo: 60\n-/\n#guard_msgs in\n#eval pack_bagpack\
  \ [20, 5, 10, 40, 15, 25] [1, 2, 3, 8, 7, 4] 10\n\n/--\ninfo: 39\n-/\n#guard_msgs\
  \ in\n#eval pack_bagpack [100, 5, 16, 18, 50] [25, 1, 3, 2, 15] 14\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
