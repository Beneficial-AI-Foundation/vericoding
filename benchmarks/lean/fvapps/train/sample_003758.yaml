vc-description: |-
  Your task in this Kata is to emulate text justify right in monospace font. You will be given a single-lined text and the expected justification width. The longest word will never be greater than this width.

  Here are the rules:

  - Use spaces to fill in the gaps on the left side of the words.
  - Each line should contain as many words as possible.
  - Use '\n' to separate lines.
  - Gap between words can't differ by more than one space.
  - Lines should end with a word not a space.
  - '\n' is not included in the length of a line.
  - Last line should not contain '\n'

  Example with width=30:

  ```
          Bacon ipsum dolor amet
  excepteur ut kevin burgdoggen,
     shankle cupim dolor officia
         ground round id ullamco
     deserunt nisi. Commodo tail
      qui salami, brisket boudin 
  tri-tip. Labore flank laboris,
    cow enim proident aliqua sed
        hamburger consequat. Sed
       consequat ut non bresaola
     capicola shoulder excepteur
   veniam, bacon kevin. Pastrami
     shank laborum est excepteur
   non eiusmod bresaola flank in
  nostrud. Corned beef ex pig do
     kevin filet mignon in irure
   deserunt ipsum qui duis short
          loin. Beef ribs dolore
    meatball officia rump fugiat
    in enim corned beef non est.
  ```

  If you enjoyed this one and want more of a challenge try https://www.codewars.com/kata/text-align-justify/python

  If you like bacon ipsum https://baconipsum.com
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def align_right (text : String) (width : Nat) : String := sorry

  theorem width_equal_to_content (text : String) (line : String) : 
    line ≠ "" →
    line ∈ (text.split (· = '\n')) →
    align_right line (line.length) = line := sorry
vc-theorems: |
  theorem basic_properties_nonempty (text : String) (width : Nat) :
    text.trim ≠ "" →
    width ≥ 10 →
    (align_right text width).trim ≠ "" := sorry


  theorem basic_properties_width (text : String) (width : Nat) : 
    text.trim ≠ "" →
    width ≥ 10 →
    ∀ line ∈ (align_right text width).split (· = '\n'), 
      line.length ≤ width := sorry


  theorem basic_properties_alignment (text : String) (width : Nat) :
    text.trim ≠ "" →
    width ≥ 10 →
    ∀ line ∈ (align_right text width).split (· = '\n'),
      !line.startsWith line.trim ∨ line.trim = line := sorry

  /--
  info: expected
  -/
  #guard_msgs in
  #eval align_right "abc def" 10

  /--
  info: expected
  -/
  #guard_msgs in
  #eval align_right "I take up the whole line" 24

  /--
  info: expected
  -/
  #guard_msgs in
  #eval align_right "Two lines, I am" 10
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
