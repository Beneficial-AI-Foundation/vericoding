"vc-description": "The power of an integer x is defined as the number of steps needed\
  \ to transform x into 1 using the following steps:\n\nif x is even then x = x /\
  \ 2\nif x is odd then x = 3 * x + 1\n\nFor example, the power of x = 3 is 7 because\
  \ 3 needs 7 steps to become 1 (3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1).\n\
  Given three integers lo, hi and k. The task is to sort all integers in the interval\
  \ [lo, hi] by the power value in ascending order, if two or more integers have the\
  \ same power value sort them by ascending order.\nReturn the k-th integer in the\
  \ range [lo, hi] sorted by the power value.\nNotice that for any integer x (lo <=\
  \ x <= hi) it is guaranteed that x will transform into 1 using these steps and that\
  \ the power of x is will fit in 32 bit signed integer.\n \nExample 1:\nInput: lo\
  \ = 12, hi = 15, k = 2\nOutput: 13\nExplanation: The power of 12 is 9 (12 --> 6\
  \ --> 3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1)\nThe power of 13 is 9\nThe\
  \ power of 14 is 17\nThe power of 15 is 17\nThe interval sorted by the power value\
  \ [12,13,14,15]. For k = 2 answer is the second element which is 13.\nNotice that\
  \ 12 and 13 have the same power value and we sorted them in ascending order. Same\
  \ for 14 and 15.\n\nExample 2:\nInput: lo = 1, hi = 1, k = 1\nOutput: 1\n\nExample\
  \ 3:\nInput: lo = 7, hi = 11, k = 4\nOutput: 7\nExplanation: The power array corresponding\
  \ to the interval [7, 8, 9, 10, 11] is [16, 3, 19, 6, 14].\nThe interval sorted\
  \ by power is [8, 10, 11, 7, 9].\nThe fourth number in the sorted array is 7.\n\n\
  Example 4:\nInput: lo = 10, hi = 20, k = 5\nOutput: 13\n\nExample 5:\nInput: lo\
  \ = 1, hi = 1000, k = 777\nOutput: 570\n\n \nConstraints:\n\n1 <= lo <= hi <= 1000\n\
  1 <= k <= hi - lo + 1"
"vc-preamble": "import Imports.AllImports\n\ndef get_power (x : Int) : Int :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def getKth (lo hi k : Int) : Int :=\n  sorry\n"
"vc-theorems": "theorem get_power_always_terminates (x : Int) \n  (h : x ≥ 1) :\n\
  \  get_power x ≥ 0 :=\nsorry\n\n\ntheorem getKth_input_validation (lo hi k : Int)\n\
  \  (h1 : lo ≥ 1)\n  (h2 : hi ≥ 1) \n  (h3 : lo ≤ hi)\n  (h4 : k ≥ 1)\n  (h5 : k\
  \ ≤ hi - lo + 1) :\n  lo ≤ getKth lo hi k ∧ getKth lo hi k ≤ hi :=\nsorry\n\n\n\
  theorem getKth_sorting_property (lo hi : Int)\n  (h1 : lo ≥ 1)\n  (h2 : hi ≥ 1)\n\
  \  (h3 : lo ≤ hi)\n  (k1 k2 : Int)\n  (h4 : k1 ≥ 1)\n  (h5 : k2 ≥ 1)\n  (h6 : k1\
  \ ≤ hi - lo + 1)\n  (h7 : k2 ≤ hi - lo + 1)\n  (h8 : k1 < k2) :\n  get_power (getKth\
  \ lo hi k1) < get_power (getKth lo hi k2) ∨\n  (get_power (getKth lo hi k1) = get_power\
  \ (getKth lo hi k2) ∧ \n   getKth lo hi k1 ≤ getKth lo hi k2) :=\nsorry\n\n\ntheorem\
  \ getKth_single_element (x : Int)\n  (h : x ≥ 1) :\n  getKth x x 1 = x :=\nsorry\n\
  \n/--\ninfo: 13\n-/\n#guard_msgs in\n#eval getKth 12 15 2\n\n/--\ninfo: 7\n-/\n\
  #guard_msgs in\n#eval getKth 7 11 4\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval getKth\
  \ 1 1 1\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
