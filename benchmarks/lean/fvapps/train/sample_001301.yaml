"vc-description": "There are a lot of problems related to the shortest paths. Nevertheless,\
  \ there are not much problems, related to the shortest paths in average.\nConsider\
  \ a directed graph G, consisting of N nodes and M edges. Consider a walk from the\
  \ node A to the node B in this graph. The average length of this walk will be total\
  \ sum of weight of its' edges divided by number of edges. Every edge counts as many\
  \ times as it appears in this path.\nNow, your problem is quite simple. For the\
  \ given graph and two given nodes, find out the shortest average length of the walk\
  \ between these nodes. Please note, that the length of the walk need not to be finite,\
  \ but average walk length will be.\n\n-----Input-----\nThe first line of the input\
  \ contains an integer T denoting the number of test cases. The description of T\
  \ test cases follows.\nThe first line of each test case contains a pair of space-separated\
  \ integers N and M denoting the number of nodes and the number of edges in the graph.\n\
  Each of the following M lines contains a triple of space-separated integers Xi Yi\
  \ Zi, denoting the arc, connecting the node Xi to the node Yi (but not vice-versa!)\
  \ having the weight of Zi.\nThe next line contains a pair of space separated integers\
  \ A and B, denoting the first and the last node of the path.\n\n-----Output-----\n\
  For each test case, output a single line containing the length of the shortest path\
  \ in average.\nIf there is no path at all, output just -1 on the corresponding line\
  \ of the output.\n\n-----Constraints-----\n- 1 ≤ N ≤ 500\n- 1 ≤ M ≤ 1000\n- A is\
  \ not equal to B\n- 1 ≤ A, B, Xi, Yi ≤ N\n- 1 ≤ Zi ≤ 100\n- There are no self-loops\
  \ and multiple edges in the graph.\n- 1 ≤ sum of N over all test cases ≤ 10000\n\
  - 1 ≤ sum of M over all test cases ≤ 20000\n\n-----Subtasks-----\n- Subtask #1 (45\
  \ points): 1 ≤ N ≤ 10, 1 ≤ M ≤ 20; Your answer will be considered correct in case\
  \ it has an absolute or relative error of no more than 10-2.\n- Subtask #2 (55 points):\
  \ no additional constraints; Your answer will be considered correct in case it has\
  \ an absolute or relative error of no more than 10-6.\n\n-----Example-----\nInput:2\n\
  3 3\n1 2 1\n2 3 2\n3 2 3\n1 3\n3 3\n1 2 10\n2 3 1\n3 2 1\n1 3\n\nOutput:1.5\n1.0\n\
  \n-----Explanation-----\nExample case 1. The walk 1 -> 2 and 2 -> 3 has average\
  \ length of 3/2 = 1.5. Any other walks in the graph will have more or equal average\
  \ length than this."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_shortest_avg_path (n : Nat) (edges : List (Nat × Nat ×\
  \ Nat)) (s e : Nat) : Float :=\nsorry\n"
"vc-theorems": "theorem path_result_bounds (n : Nat) (edges : List (Nat × Nat × Nat))\
  \ (s e : Nat) :\n  let result := find_shortest_avg_path n edges s e\n  result ≠\
  \ -1 → (0 < result ∧ result ≤ 100) := by sorry\n\n\ntheorem path_weights_relation\
  \ (n : Nat) (edges : List (Nat × Nat × Nat)) (s e : Nat) :\n  let direct_weights\
  \ := edges.filter (fun edge : Nat × Nat × Nat => \n    match edge with | (s', e',\
  \ _) => s' = s && e' = e)\n    |>.map (fun edge => let (_, _, w) := edge; w)\n \
  \ ¬direct_weights.isEmpty → \n  find_shortest_avg_path n edges s e ≤ Float.ofNat\
  \ (direct_weights.maximum?.getD 0) := by sorry\n\n\ntheorem empty_path_property\
  \ :\n  find_shortest_avg_path 2 [] 1 2 = -1 := by sorry\n\n\ntheorem basic_path_property\
  \ (n weight : Nat) (hn : n ≥ 2) (hw : weight > 0) :\n  let edges := List.range (n-1)\
  \ |>.map (fun i => (i+1, i+2, weight))\n  find_shortest_avg_path n edges 1 n = Float.ofNat\
  \ weight := by sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
