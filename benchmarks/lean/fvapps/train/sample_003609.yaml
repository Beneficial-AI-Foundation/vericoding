"vc-description": "Alex just got a new hula hoop, he loves it but feels discouraged\
  \ because his little brother is better than him\n\nWrite a program where Alex can\
  \ input (n) how many times the hoop goes round and it will return him an encouraging\
  \ message :) \n\n-If Alex gets 10 or more hoops, return the string \"Great, now\
  \ move on to tricks\".\n\n-If he doesn't get 10 hoops, return the string \"Keep\
  \ at it until you get it\"."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def hoop_count (n : Int) : String := sorry\n\ntheorem hoop_count_return_value\
  \ (n : Int) :\n  (hoop_count n = \"Keep at it until you get it\") ∨\n  (hoop_count\
  \ n = \"Great, now move on to tricks\") := sorry\n"
"vc-theorems": "theorem hoop_count_less_than_ten (n : Int) :\n  n < 10 → hoop_count\
  \ n = \"Keep at it until you get it\" := sorry\n\n\ntheorem hoop_count_ten_or_more\
  \ (n : Int) :\n  n ≥ 10 → hoop_count n = \"Great, now move on to tricks\" := sorry\n\
  \n/--\ninfo: 'Keep at it until you get it'\n-/\n#guard_msgs in\n#eval hoop_count\
  \ 6\n\n/--\ninfo: 'Great, now move on to tricks'\n-/\n#guard_msgs in\n#eval hoop_count\
  \ 10\n\n/--\ninfo: 'Great, now move on to tricks'\n-/\n#guard_msgs in\n#eval hoop_count\
  \ 22\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
