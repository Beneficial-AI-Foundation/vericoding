"vc-description": "# Task\n\nIn the city, a bus named Fibonacci runs on the road every\
  \ day.\n\nThere are `n` stations on the route. The Bus runs from station1 to stationn.\n\
  \nAt the departure station(station1), `k` passengers get on the bus. \n\nAt the\
  \ second station(station2), a certain number of passengers get on and the same number\
  \ get off. There are still `k` passengers on the bus.\n\nFrom station3 to stationn-1,\
  \ the number of boarding and alighting passengers follows the following rule:\n\n\
  - At stationi, the number of people getting on is the sum of the number of people\
  \ getting on at the two previous stations(stationi-1 and stationi-2)\n- The number\
  \ of people getting off is equal to the number of people getting on at the previous\
  \ station(stationi-1).\n\nAt stationn, all the passengers get off the bus. \n\n\
  Now, The numbers we know are: `k` passengers get on the bus at station1, `n` stations\
  \ in total, `m` passengers get off the bus at stationn.\n\nWe want to know: How\
  \ many passengers on the bus when the bus runs out stationx.\n\n# Input\n\n- `k`:\
  \ The number of passengers get on the bus at station1.\n  - `1 <= k <= 100`\n\n\n\
  - `n`: The total number of stations(1-based).\n  - `6 <= n <= 30`\n\n\n- `m`: The\
  \ number of passengers get off the bus at stationn.\n  - `1 <= m <= 10^10`\n\n\n\
  - `x`: Stationx(1-based). The station we need to calculate.\n  - `3 <= m <= n-1`\n\
  \n\n- All inputs are valid integers.\n\n# Output\n\nAn integer. The number of passengers\
  \ on the bus when the bus runs out stationx."
"vc-preamble": "import Imports.AllImports\n\ndef sim (k n : Nat) (p : Float) : Float\
  \ :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def compute (k n m x : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem sim_monotonic (k n : Nat) \n  (h1 : k ≥ 1) (h2 : n ≥ 2) :\
  \ \n  sim k n 0 ≤ sim k n 1 :=\nsorry \n\n\ntheorem compute_result_valid (k n x\
  \ m : Nat)\n  (h1 : k ≥ 1) (h2 : n ≥ 2) (h3 : x ≥ 1)\n  (h4 : m ≥ 0) /- Simplified\
  \ bounds since we can't easily convert Float to Nat -/\n  (h5 : sim k (n-1) 1 >\
  \ sim k (n-1) 0) :\n  compute k n m x ≥ 0 :=\nsorry\n\n/--\ninfo: 13\n-/\n#guard_msgs\
  \ in\n#eval calc 5 7 32 4\n\n/--\ninfo: 252\n-/\n#guard_msgs in\n#eval calc 12 23\
  \ 212532 8\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
