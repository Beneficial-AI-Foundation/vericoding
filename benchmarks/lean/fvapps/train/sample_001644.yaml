"vc-description": "-----\n__CLEAR CUTTER'S NEEDS YOUR HELP!__\n-----\n\nThe logging\
  \ company Clear Cutter's makes its money by optimizing the price-to-length of each\
  \ log they cut before selling them. An example of one of their price tables is included:\n\
  \n```python\n# So a price table p\np = [ 0,  1,  5,  8,  9, 10]\n\n# Can be imagined\
  \ as:\n# length i | 0  1  2  3  4  5 *in feet*\n# price pi | 0  1  5  8  9 10 *in\
  \ money*\n```\n\nThey hired an intern last summer to create a recursive function\
  \ for them to easily calculate the most profitable price for a log of length _n_\
  \ using price table _p_ as follows:\n\n```python\ndef cut_log(p, n):\n   if (n ==\
  \ 0):\n      return 0\n   q = -1\n   for i in range(1, n+1)\n      q = max(q, p[i]\
  \ + cut_log(p, n-i))\n   return q\n```\n\nAn example of the working code:\n```python\n\
  cut_log(p, 5) # => 13\n# 5ft = $10, BUT 2ft + 3ft = 5ft -> $5 + $8 = $13 which is\
  \ greater in value\n```\n\nHowever, their senior software engineer realized that\
  \ the number of recursive calls in the function gives it an awful running time of\
  \ 2^n (as this function iterates through ALL 2^n-1 possibilities for a log of length\
  \ n).\n\nHaving discovered this problem just as you've arrived for your internship,\
  \ he responsibly delegates the issue to you.\n\nUsing the power of Stack Overflow\
  \ and Google, he wants you to create a solution that runs in Θ(n^2) time so that\
  \ it doesn't take 5 hours to calculate the optimal price for a log of size 50. (He\
  \ also suggests to research the problem using the keywords in the tags)\n\n__(Be\
  \ aware that if your algorithm is not efficient, it will attempt to look at 2^49\
  \ = 562949953421312 nodes instead of 49^2 = 2401... The solution will automatically\
  \ fail if it takes longer than 6 seconds... which occurs at right around Log 23)__"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def cut_log (prices : List Nat) (n : Nat) : Nat := sorry\n\ntheorem\
  \ cut_log_non_negative (prices : List Nat) (n : Nat) :\n  cut_log prices n ≥ 0 :=\
  \ sorry\n"
"vc-theorems": "theorem cut_log_monotonic (prices : List Nat) (n : Nat) :\n  n > 0\
  \ → cut_log prices n ≥ cut_log prices (n-1) := sorry\n\n\ntheorem cut_log_zero (prices\
  \ : List Nat) :\n  cut_log prices 0 = 0 := sorry\n\n\ntheorem cut_log_single_unit\
  \ (prices : List Nat) :\n  prices ≠ [] → prices.length > 1 → cut_log prices 1 =\
  \ prices[1]! := sorry\n\n/--\ninfo: 13\n-/\n#guard_msgs in\n#eval cut_log [0, 1,\
  \ 5, 8, 9, 10] 5\n\n/--\ninfo: 22\n-/\n#guard_msgs in\n#eval cut_log [0, 1, 5, 8,\
  \ 9, 10, 17, 17, 20] 8\n\n/--\ninfo: 12\n-/\n#guard_msgs in\n#eval cut_log [0, 3,\
  \ 5, 8, 9, 10, 17, 17, 20] 4\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
