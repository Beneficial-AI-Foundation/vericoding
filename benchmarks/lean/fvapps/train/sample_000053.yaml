"vc-description": "Gildong recently learned how to find the longest increasing subsequence\
  \ (LIS) in $O(n\\log{n})$ time for a sequence of length $n$. He wants to test himself\
  \ if he can implement it correctly, but he couldn't find any online judges that\
  \ would do it (even though there are actually many of them). So instead he's going\
  \ to make a quiz for you about making permutations of $n$ distinct integers between\
  \ $1$ and $n$, inclusive, to test his code with your output.\n\nThe quiz is as follows.\n\
  \nGildong provides a string of length $n-1$, consisting of characters '<' and '>'\
  \ only. The $i$-th (1-indexed) character is the comparison result between the $i$-th\
  \ element and the $i+1$-st element of the sequence. If the $i$-th character of the\
  \ string is '<', then the $i$-th element of the sequence is less than the $i+1$-st\
  \ element. If the $i$-th character of the string is '>', then the $i$-th element\
  \ of the sequence is greater than the $i+1$-st element.\n\nHe wants you to find\
  \ two possible sequences (not necessarily distinct) consisting of $n$ distinct integers\
  \ between $1$ and $n$, inclusive, each satisfying the comparison results, where\
  \ the length of the LIS of the first sequence is minimum possible, and the length\
  \ of the LIS of the second sequence is maximum possible.\n\n\n-----Input-----\n\n\
  Each test contains one or more test cases. The first line contains the number of\
  \ test cases $t$ ($1 \\le t \\le 10^4$).\n\nEach test case contains exactly one\
  \ line, consisting of an integer and a string consisting of characters '<' and '>'\
  \ only. The integer is $n$ ($2 \\le n \\le 2 \\cdot 10^5$), the length of the permutation\
  \ you need to find. The string is the comparison results explained in the description.\
  \ The length of the string is $n-1$.\n\nIt is guaranteed that the sum of all $n$\
  \ in all test cases doesn't exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor\
  \ each test case, print two lines with $n$ integers each. The first line is the\
  \ sequence with the minimum length of the LIS, and the second line is the sequence\
  \ with the maximum length of the LIS. If there are multiple answers, print any one\
  \ of them. Each sequence should contain all integers between $1$ and $n$, inclusive,\
  \ and should satisfy the comparison results.\n\nIt can be shown that at least one\
  \ answer always exists.\n\n\n-----Example-----\nInput\n3\n3 <<\n7 >><>><\n5 >>><\n\
  \nOutput\n1 2 3\n1 2 3\n5 4 3 7 2 1 6\n4 3 1 7 5 2 6\n4 3 2 1 5\n5 4 2 1 3\n\n\n\
  \n-----Note-----\n\nIn the first case, $1$ $2$ $3$ is the only possible answer.\n\
  \nIn the second case, the shortest length of the LIS is $2$, and the longest length\
  \ of the LIS is $3$. In the example of the maximum LIS sequence, $4$ '$3$' $1$ $7$\
  \ '$5$' $2$ '$6$' can be one of the possible LIS."
"vc-preamble": "import Imports.AllImports\n\ndef solve_sequence (n : Nat) (comp_str\
  \ : String) : (List Nat × List Nat) :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def verifySequenceMatchesComparisons (seq : List Nat) (comps :\
  \ List Char) : Bool :=\n  sorry\n"
"vc-theorems": "theorem sequence_length_matches_comparisons \n  {n : Nat} {comp_str\
  \ : String} :\n  let (min_seq, max_seq) := solve_sequence n comp_str\n  n = comp_str.length\
  \ + 1 →\n  min_seq.length = n ∧ max_seq.length = n :=\nsorry\n\n\ntheorem sequences_follow_comparisons\
  \ \n  {n : Nat} {comp_str : String} :\n  let (min_seq, max_seq) := solve_sequence\
  \ n comp_str\n  n = comp_str.length + 1 →\n  verifySequenceMatchesComparisons min_seq\
  \ (comp_str.data) ∧\n  verifySequenceMatchesComparisons max_seq (comp_str.data)\
  \ :=\nsorry\n\n\ntheorem sequences_use_consecutive_integers\n  {n : Nat} {comp_str\
  \ : String} :\n  let (min_seq, max_seq) := solve_sequence n comp_str\n  n = comp_str.length\
  \ + 1 →\n  ∀ k, k ≤ n → (k ∈ min_seq ↔ k ≤ n ∧ k > 0) ∧\n               (k ∈ max_seq\
  \ ↔ k ≤ n ∧ k > 0) :=\nsorry\n\n\ntheorem single_value_edge_case \n  {n : Nat} :\n\
  \  n = 1 →\n  solve_sequence n \"\" = ([1], [1]) :=\nsorry\n\n/--\ninfo: set(range(1,\
  \ 6))\n-/\n#guard_msgs in\n#eval set min3\n\n/--\ninfo: set(range(1, 6))\n-/\n#guard_msgs\
  \ in\n#eval set max3\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
