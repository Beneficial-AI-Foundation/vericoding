"vc-description": "There is a haunted town called HauntedLand. The structure of HauntedLand\
  \ can be thought of as a grid of size n * m. There is a house in each cell of the\
  \ grid. Some people have fled from their houses because they were haunted. '.' represents\
  \ a haunted house whereas '*' represents a house in which people are living.\n\n\
  One day, Devu, the famous perfumer came to town with a perfume whose smell can hypnotize\
  \ people. Devu can put the perfume in at most one of the houses. This takes Devu\
  \ one second. Then, the perfume spreads from one house (need not be inhabited by\
  \ people) to all its adjacent houses in one second, and the cycle continues. Two\
  \ houses are said to be a adjacent to each other, if they share a corner or an edge,\
  \ i.e., each house (except those on the boundaries) will have 8 adjacent houses.\n\
  \nYou want to save people from Devu's dark perfumery by sending them a message to\
  \ flee from the town. So, you need to estimate the minimum amount of time Devu needs\
  \ to hypnotize all the people? Note that if there are no houses inhabited by people,\
  \ Devu doesn't need to put perfume in any cell.\n\n-----Input-----\nThe first line\
  \ of input contains an integer T denoting the number of test cases. The description\
  \ of T test cases follows.\nFirst line of each test case contains two space separated\
  \ integers n, m denoting the dimensions of the town.\nFor each of next n lines,\
  \ each line has m characters (without any space) denoting a row of houses of the\
  \ town.\n\n-----Output-----\nFor each test case, output a single integer corresponding\
  \ to the answer of the problem.\n\n-----Constraints-----\n- 1 ≤ T ≤ 20\nSubtask\
  \ #1: (40 points) \n\n- 1 ≤ n, m ≤ 100Subtask #2: (60 points) \n\n- 1 ≤ n, m ≤ 1000\n\
  \n-----Example-----\nInput:\n2\n2 2\n*...\n3 4\n.*..***..*..\n\nOutput:\n1\n2\n\n\
  -----Explanation-----\nIn the first example, it will take Devu one second for putting\
  \ the perfume at the only house. So, the answer is 1.\n\nIn the second example,\
  \ He will first put the perfume at the * at cell (1, 1) (assuming 0-based indexing).\n\
  \nNow, it will take Devu 1 secs to put perfume. In the next second, the perfume\
  \ will spread to all of its adjacent cells, thus making each house haunted.\nSo,\
  \ the answer is 2."
"vc-preamble": "import Imports.AllImports\n\ndef Grid := List String\n\ndef isValidGrid\
  \ (grid : Grid) : Bool :=\n  sorry\n\n\ndef solveHauntedLand (grid : Grid) : Nat\
  \ :=\n  sorry\n\n\ndef countStars (s : String) : Nat :=\n  s.toList.filter (· =\
  \ '*') |>.length\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def listSum (l : List Nat) : Nat :=\n  l.foldl (· + ·) 0\n"
"vc-theorems": "theorem solve_haunted_land_output_valid (grid : Grid) \n  (h : isValidGrid\
  \ grid = true) :\n  solveHauntedLand grid ≥ 0 := sorry \n\n\ntheorem empty_grid_returns_zero\
  \ (grid : Grid)\n  (h1 : isValidGrid grid = true)\n  (h2 : ∀ (row : String), List.contains\
  \ grid row → ¬ row.contains '*') :\n  solveHauntedLand grid = 0 := sorry\n\n\ntheorem\
  \ single_house_returns_one (grid : Grid)\n  (h1 : isValidGrid grid = true) \n  (h2\
  \ : listSum (grid.map countStars) = 1) :\n  solveHauntedLand grid = 1 := sorry\n\
  \n\ntheorem result_bounded_by_dimensions (grid : Grid)\n  (h : isValidGrid grid\
  \ = true) :\n  solveHauntedLand grid ≤ max grid.length (grid.head?.map String.length\
  \ |>.getD 0) := sorry\n\n\ntheorem inhabited_houses_positive_time (grid : Grid)\n\
  \  (h1 : isValidGrid grid = true)\n  (h2 : ∃ (row : String), List.contains grid\
  \ row ∧ row.contains '*') :\n  solveHauntedLand grid ≥ 1 := sorry\n\n/--\ninfo:\
  \ 1\n-/\n#guard_msgs in\n#eval solve_haunted_land [\"*.\", \"..\"]\n\n/--\ninfo:\
  \ 2\n-/\n#guard_msgs in\n#eval solve_haunted_land [\".*..\", \"***.\", \".*..\"\
  ]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval solve_haunted_land [\"...\", \"...\"\
  ]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
