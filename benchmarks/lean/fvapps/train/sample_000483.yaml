"vc-description": "Return the largest possible k such that there exists a_1, a_2,\
  \ ..., a_k such that:\n\nEach a_i is a non-empty string;\nTheir concatenation a_1\
  \ + a_2 + ... + a_k is equal to text;\nFor all 1 <= i <= k,  a_i = a_{k+1 - i}.\n\
  \n \nExample 1:\nInput: text = \"ghiabcdefhelloadamhelloabcdefghi\"\nOutput: 7\n\
  Explanation: We can split the string on \"(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)\"\
  .\n\nExample 2:\nInput: text = \"merchant\"\nOutput: 1\nExplanation: We can split\
  \ the string on \"(merchant)\".\n\nExample 3:\nInput: text = \"antaprezatepzapreanta\"\
  \nOutput: 11\nExplanation: We can split the string on \"(a)(nt)(a)(pre)(za)(tpe)(za)(pre)(a)(nt)(a)\"\
  .\n\nExample 4:\nInput: text = \"aaa\"\nOutput: 3\nExplanation: We can split the\
  \ string on \"(a)(a)(a)\".\n\n \nConstraints:\n\ntext consists only of lowercase\
  \ English characters.\n1 <= text.length <= 1000"
"vc-preamble": "import Imports.AllImports\n\ndef longestDecomposition (s : String)\
  \ : Nat :=\n  sorry\n\n\ndef isReversed (s : String) : Bool :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def allCharsSame (s : String) : Bool :=\n  sorry\n"
"vc-theorems": "theorem decomposition_length {s : String} (h : s ≠ \"\") :\n  1 ≤\
  \ longestDecomposition s ∧ longestDecomposition s ≤ s.length :=\n  sorry\n\n\n\n\
  \n\n\ntheorem concatenated_decomposition {s : String} (h : s ≠ \"\") :\n  longestDecomposition\
  \ (s ++ s) ≥ 2 * longestDecomposition s :=\n  sorry\n\n/--\ninfo: 7\n-/\n#guard_msgs\
  \ in\n#eval longestDecomposition \"ghiabcdefhelloadamhelloabcdefghi\"\n\n/--\ninfo:\
  \ 1\n-/\n#guard_msgs in\n#eval longestDecomposition \"merchant\"\n\n/--\ninfo: 11\n\
  -/\n#guard_msgs in\n#eval longestDecomposition \"antaprezatepzapreanta\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
