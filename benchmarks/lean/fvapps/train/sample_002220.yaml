"vc-description": "There are N barbecue restaurants along a street.\nThe restaurants\
  \ are numbered 1 through N from west to east, and the distance between restaurant\
  \ i and restaurant i+1 is A_i.\nJoisino has M tickets, numbered 1 through M.\nEvery\
  \ barbecue restaurant offers barbecue meals in exchange for these tickets.\nRestaurant\
  \ i offers a meal of deliciousness B_{i,j} in exchange for ticket j.\nEach ticket\
  \ can only be used once, but any number of tickets can be used at a restaurant.\n\
  Joisino wants to have M barbecue meals by starting from a restaurant of her choice,\
  \ then repeatedly traveling to another barbecue restaurant and using unused tickets\
  \ at the restaurant at her current location.\nHer eventual happiness is calculated\
  \ by the following formula: \"(The total deliciousness of the meals eaten) - (The\
  \ total distance traveled)\".\nFind her maximum possible eventual happiness.\n\n\
  -----Constraints-----\n - All input values are integers.\n - 2≤N≤5×10^3\n - 1≤M≤200\n\
  \ - 1≤A_i≤10^9\n - 1≤B_{i,j}≤10^9\n\n-----Input-----\nThe input is given from Standard\
  \ Input in the following format:\nN M\nA_1 A_2 ... A_{N-1}\nB_{1,1} B_{1,2} ...\
  \ B_{1,M}\nB_{2,1} B_{2,2} ... B_{2,M}\n:\nB_{N,1} B_{N,2} ... B_{N,M}\n\n-----Output-----\n\
  Print Joisino's maximum possible eventual happiness.\n\n-----Sample Input-----\n\
  3 4\n1 4\n2 2 5 1\n1 3 3 2\n2 2 5 1\n\n-----Sample Output-----\n11\n\nThe eventual\
  \ happiness can be maximized by the following strategy: start from restaurant 1\
  \ and use tickets 1 and 3, then move to restaurant 2 and use tickets 2 and 4."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calc_max_happiness (N M : Nat) (distances : List Nat) (deliciousness\
  \ : List (List Nat)) : Nat :=\n  sorry\n"
"vc-theorems": "theorem max_happiness_nonnegative (N M : Nat) (distances : List Nat)\
  \ (deliciousness : List (List Nat)) :\n  calc_max_happiness N M distances deliciousness\
  \ ≥ 0 := sorry\n\n\ntheorem max_happiness_is_nat (N M : Nat) (distances : List Nat)\
  \ (deliciousness : List (List Nat)) :\n  ∃ n : Nat, calc_max_happiness N M distances\
  \ deliciousness = n := sorry\n\n\ntheorem zero_deliciousness_gives_zero (N M : Nat)\
  \ (distances : List Nat) (deliciousness : List (List Nat))\n  (h1 : N > 0)\n  (h2\
  \ : M > 0)\n  (h3 : distances.length = N - 1)\n  (h4 : deliciousness.length = N)\n\
  \  (h5 : ∀ l ∈ deliciousness, l.length = M) \n  (h6 : ∀ l ∈ deliciousness, ∀ x ∈\
  \ l, x = 0) :\n  calc_max_happiness N M distances deliciousness = 0 := sorry\n\n\
  \ntheorem doubled_distances_decrease_happiness (N M : Nat) (distances : List Nat)\
  \ (deliciousness : List (List Nat)) \n  (doubled_distances : List Nat)\n  (h : doubled_distances\
  \ = distances.map (· * 2)) :\n  calc_max_happiness N M doubled_distances deliciousness\
  \ ≤ calc_max_happiness N M distances deliciousness := sorry\n\n/--\ninfo: 11\n-/\n\
  #guard_msgs in\n#eval calc_max_happiness 3 4 [1, 4] [[2, 2, 5, 1], [1, 3, 3, 2],\
  \ [2, 2, 5, 1]]\n\n/--\ninfo: 20\n-/\n#guard_msgs in\n#eval calc_max_happiness 5\
  \ 3 [1, 2, 3, 4] [[10, 1, 1], [1, 1, 1], [1, 10, 1], [1, 1, 1], [1, 1, 10]]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
