"vc-description": "Given two integer arrays where the second array is a shuffled duplicate\
  \ of the first array with one element missing, find the missing element.\n\nPlease\
  \ note, there may be duplicates in the arrays, so checking if a numerical value\
  \ exists in one and not the other is not a valid solution.\n\n```\nfind_missing([1,\
  \ 2, 2, 3], [1, 2, 3]) => 2\n```\n```\nfind_missing([6, 1, 3, 6, 8, 2], [3, 6, 6,\
  \ 1, 2]) => 8\n```\n\nThe first array will always have at least one element."
"vc-preamble": "import Imports.AllImports\n\ndef List.sum : List Int → Int  \n  |\
  \ [] => 0\n  | (x::xs) => x + List.sum xs\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def List.sort : List Int → List Int := sorry\n\ndef find_missing\
  \ (arr1 : List Int) (arr2 : List Int) : Int := sorry\n"
"vc-theorems": "theorem removing_element_gives_correct_difference \n  (arr : List\
  \ Int) (elem : Int) :\n  find_missing (arr ++ [elem]) arr = elem := sorry\n\n\n\n\
  \ntheorem identical_arrays_difference_is_zero\n  (arr : List Int) (h : arr ≠ [])\
  \ :\n  find_missing arr arr = 0 := sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval\
  \ find_missing [1, 2, 3] [1, 3]\n\n/--\ninfo: 8\n-/\n#guard_msgs in\n#eval find_missing\
  \ [6, 1, 3, 6, 8, 2] [3, 6, 6, 1, 2]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval\
  \ find_missing [0, 0, 0, 0, 0] [0, 0, 0, 0]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
