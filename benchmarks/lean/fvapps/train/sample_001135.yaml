"vc-description": "Chef has a sequence of N$N$ integers A1,A2,...,AN$A_1, A_2, ...,\
  \ A_N$. \nChef thinks that a triplet of integers (i,j,k)$(i,j,k)$ is good if 1≤i<j<k≤N$1\
  \ \\leq i < j < k \\leq N$ and P$P$ in the following expression contains an odd\
  \ number of ones in its binary representation:\nP=[Ai<<(⌊log2(Aj)⌋+⌊log2(Ak)⌋+2)]+[Aj<<(⌊log2(Ak)⌋+1)]+Ak$P\
  \ = [ A_i<< (  \\lfloor \\log_2(A_j) \\rfloor + \\lfloor \\log_2(A_k) \\rfloor +\
  \ 2 ) ] + [A_j << ( \\lfloor \\log_2(A_k) \\rfloor + 1) ] + A_k$\nThe <<$<<$ operator\
  \ is called left shift, x<<y$x << y$  is defined as x⋅2y$x \\cdot 2^y$.\nHelp the\
  \ Chef finding the total number of good triplets modulo 109+7$10^9 + 7$.\n\n-----Input:-----\n\
  - The first line of the input contains a single integer T$T$ denoting the number\
  \ of test cases. The description of T$T$ test cases follows.\n- The first line of\
  \ each test case contains a single integer N$N$. \n- The second line of each test\
  \ case contains N$N$ space-separated integers A1,A2,...,AN$A_1, A_2, ..., A_N$.\n\
  \n-----Output:-----\nFor each test case, print a single line containing one integer,\
  \ the number of good triplets modulo 109+7$10^9+7$.\n\n-----Constraints:-----\n\
  - 1≤T≤103$1 \\leq T \\leq 10^3$\n- 1≤N≤105$1\\leq N \\leq 10^5$\n- 1≤Ai≤109$1 \\\
  leq A_i \\leq 10^9$\n- The sum of N$N$ over all testcases is less than 106$10^6$\n\
  \n-----Sample Input:-----\n1\n4\n1 1 2 3\n\n-----Sample Output:-----\n1"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def M := 1000000007\n\ndef count_good_triplets (nums : List Nat)\
  \ : Nat :=\n  sorry\n"
"vc-theorems": "theorem count_good_triplets_nonnegative (nums : List Nat) :\n  count_good_triplets\
  \ nums ≥ 0 :=\nsorry\n\n\n\n\ntheorem count_good_triplets_empty :\n  count_good_triplets\
  \ [] = 0 :=\nsorry\n\n\ntheorem count_good_triplets_singleton (n : Nat) :\n  count_good_triplets\
  \ [n] = 0 :=\nsorry\n\n\ntheorem count_good_triplets_pair (n m : Nat) :\n  count_good_triplets\
  \ [n, m] = 0 :=\nsorry\n\n\n\n\ntheorem count_good_triplets_all_ones_small (n :\
  \ Nat) :\n  n < 3 →\n  count_good_triplets (List.replicate n 1) = 0 :=\nsorry\n\n\
  \ntheorem count_good_triplets_permutation_invariant (nums nums' : List Nat) :\n\
  \  List.Perm nums nums' →\n  count_good_triplets nums = count_good_triplets nums'\
  \ :=\nsorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval count_good_triplets [1, 1,\
  \ 2, 3]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
