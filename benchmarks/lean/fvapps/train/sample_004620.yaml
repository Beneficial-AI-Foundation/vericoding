"vc-description": "In this kata, your task is to find the maximum sum of any straight\
  \ \"beam\" on a hexagonal grid, where its cell values are determined by a finite\
  \ integer sequence seq.\nIn this context, a beam is a linear sequence of cells in\
  \ any of the 3 pairs of opposing sides of a hexagon. We'll refer to the sum of a\
  \ beam's integer values as the \"beam value\".Refer to the example below for further\
  \ clarification.\nInput\nYour function will receive two arguments:\n\nn : the length\
  \ of each side of the hexagonal grid, where 2 <= n < 100\nseq : a finite sequence\
  \ of (positive and/or nonpositive) integers with a length >= 1The sequence is used\
  \ to populate the cells of the grid and should be repeated as necessary.The sequence\
  \ type will be dependent on the language (e.g. array for JavaScript, tuple for Python,\
  \ etc.).\n\nOutput\nYour function should return the largest beam value as an integer.\n\
  Test Example\n\nIn our test example, we have the following arguments:\nn = 4\nseq\
  \ = [2, 4, 6, 8]\n\nBelow is the hexagonal grid determined by our example arguments;\n\
  the sequence repeats itself from left to right, then top to bottom.\n\n   2 4 6\
  \ 8\n  2 4 6 8 2\n 4 6 8 2 4 6\n8 2 4 6 8 2 4\n 6 8 2 4 6 8\n  2 4 6 8 2\n   4 6\
  \ 8 2\n\nThe three diagrams below illustrate the \"beams\" in the hexagonal grid\
  \ above.\nIn the grid on the left, the horizontal beams are highlighted by their\
  \ likewise colors,\nand the value of each beam is given to its right.\nIn the center\
  \ grid, the beams highlighted go from upper-right to bottom-left (and vice-versa).\n\
  In the grid on the right, the beams highlighted go from upper-left to bottom-right\
  \ (and vice-versa).\n\n   2 4 6 8 -> 20           2 4 6 8           2 4 6 8\n  2\
  \ 4 6 8 2 -> 22         2 4 6 8 2         2 4 6 8 2\n 4 6 8 2 4 6 -> 30       4\
  \ 6 8 2 4 6       4 6 8 2 4 6\n8 2 4 6 8 2 4 -> 34     8 2 4 6 8 2 4     8 2 4 6\
  \ 8 2 4\n 6 8 2 4 6 8 -> 34       6 8 2 4 6 8       6 8 2 4 6 8\n  2 4 6 8 2 ->\
  \ 22         2 4 6 8 2         2 4 6 8 2\n   4 6 8 2 -> 20           4 6 8 2   \
  \        4 6 8 2\n\nThe maximum beam value in our example is 34.\n\nTest Specifications\n\
  \nAll inputs will be valid\nFull Test Suite: 12 fixed tests and 100 random tests\n\
  For JavaScript, module and require are disabled [NOTE: if you would like to suggest\
  \ a module that you think should be permitted for JS, please leave a note in the\
  \ Discourse section]\n\nIf you enjoyed this kata, be sure to check out my other\
  \ katas"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def max_hexagon_beam (n: Nat) (seq: List Int) : Int :=\nsorry\n"
"vc-theorems": "theorem max_hexagon_beam_nonnegative {n: Nat} {seq: List Int}\n  (hseq\
  \ : seq.length > 0)\n  (hseqnonneg : ∀ x ∈ seq, x ≥ 0) :\n  max_hexagon_beam n seq\
  \ ≥ 0 := sorry\n\n/--\ninfo: 34\n-/\n#guard_msgs in\n#eval max_hexagon_beam 4 [2,\
  \ 4, 6, 8]\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval max_hexagon_beam 2 [1]\n\n\
  /--\ninfo: 8\n-/\n#guard_msgs in\n#eval max_hexagon_beam 3 [1, 2]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
