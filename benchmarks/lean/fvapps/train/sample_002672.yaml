"vc-description": "# Convert number to reversed array of digits\n\nGiven a random\
  \ non-negative number, you have to return the digits of this number within an array\
  \ in reverse order.\n\n## Example:\n\n```\n348597 => [7,9,5,8,4,3]\n```"
"vc-preamble": "import Imports.AllImports\n\ndef digitize (n : Nat) : List Nat :=\n\
  \  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def digitsToNat (digits : List Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem digitize_single_digits {n : Nat} :\n  ∀ d ∈ digitize n, d\
  \ ≤ 9 := by\n  sorry\n\n\ntheorem digitize_length_matches_input {n : Nat} :\n  (List.length\
  \ (digitize n)) = String.length (toString n) := by\n  sorry\n\n\ntheorem digitize_reconstruction\
  \ {n : Nat} :\n  n = digitsToNat (List.reverse (digitize n)) := by\n  sorry\n\n\n\
  theorem digitize_preserves_digits {n : Nat} :\n  List.map (fun d => toString d)\
  \ (digitize n) = \n  (toString n).toList.map toString := by\n  sorry\n\n\ntheorem\
  \ digitize_zero :\n  digitize 0 = [0] := by\n  sorry\n\n/--\ninfo: [1, 3, 2, 5,\
  \ 3]\n-/\n#guard_msgs in\n#eval digitize 35231\n\n/--\ninfo: [7, 5, 3, 2, 8, 5,\
  \ 3, 2]\n-/\n#guard_msgs in\n#eval digitize 23582357\n\n/--\ninfo: [8, 3, 7, 4,\
  \ 6, 7, 4, 8, 9]\n-/\n#guard_msgs in\n#eval digitize 984764738\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
