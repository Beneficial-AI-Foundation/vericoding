"vc-description": "Chef recently took a course in linear algebra and learned about\
  \ linear combinations of vectors. Therefore, in order to test his intelligence,\
  \ Raj gave him a \"fuzzy\" problem to solve.\nA sequence of integers $B_1, B_2,\
  \ \\ldots, B_M$ generates an integer $K$ if it is possible to find a sequence of\
  \ integers $C_1, C_2, \\ldots, C_M$ such that $C_1 \\cdot B_1 + C_2 \\cdot B_2 +\
  \ \\ldots + C_M \\cdot B_M = K$.\nIn this problem, Chef has a sequence $A_1, A_2,\
  \ \\ldots, A_N$ and he should answer $Q$ queries. In each query, he is given an\
  \ integer $K$; the answer to this query is the number of pairs $(l, r)$ such that\
  \ $1 \\le l \\le r \\le N$ and the subsequence $(A_l, A_{l+1}, \\ldots, A_r)$ generates\
  \ $K$.\nChef has no idea how to solve this problem ― can you help him find the answers\
  \ to all queries?\n\n-----Input-----\n- The first line of the input contains a single\
  \ integer $N$.\n- The second line contains $N$ space-separated integers $A_1, A_2,\
  \ \\ldots, A_N$.\n- The third line contains a single integer $Q$.\n- The following\
  \ $Q$ lines describe queries. Each of these lines contains a single integer $K$.\n\
  \n-----Output-----\nFor each query, print a single line containing one integer ―\
  \ the number of contiguous subsequences that generate $K$.\n\n-----Constraints-----\n\
  - $1 \\le N, Q \\le 10^5$\n- $1 \\le A_i \\le 10^9$ for each valid $i$\n- $1 \\\
  le K \\le 10^6$\n\n-----Subtasks-----\nSubtask #1 (10 points): $1 \\le N \\le 1,000$\n\
  Subtask #2 (90 points): original constraints\n\n-----Example Input-----\n2\n2 4\n\
  3\n1\n2\n8\n\n-----Example Output-----\n0\n2\n3\n\n-----Explanation-----\nThe sequence\
  \ $(2, 4)$ has three contiguous subsequences: $(2)$, $(4)$ and $(2, 4)$. \n- In\
  \ the first query, $1$ cannot be generated by any subsequence.\n- In the second\
  \ query, $2$ is generated by subsequences $(2)$ and $(2, 4)$. For example, for the\
  \ subsequence $(2, 4)$, we can choose $C_1 = 1$ and $C_2 = 0$.\n- In the third query,\
  \ $8$ is generated by all three subsequences."
"vc-preamble": "import Imports.AllImports\n\ndef solve_contiguous_generators (N :\
  \ Nat) (A : List Nat) (queries : List Nat) : List Nat := sorry\n\ndef list_gcd (lst\
  \ : List Nat) : Nat := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_divisible (k : Nat) (A : List Nat) : Nat :=\n  List.foldl\
  \ (fun acc x => if k % x = 0 then acc + 1 else acc) 0 A\n\n-- Result length matches\
  \ queries length"
"vc-theorems": "theorem result_length_matches_queries \n  {N : Nat} {A : List Nat}\
  \ {queries : List Nat} : \n  List.length (solve_contiguous_generators N A queries)\
  \ = List.length queries := sorry\n\n-- All results are non-negative (trivial in\
  \ Nat type)\n\ntheorem all_results_nonnegative\n  {N : Nat} {A : List Nat} {queries\
  \ : List Nat} :\n  ∀ x ∈ solve_contiguous_generators N A queries, x ≥ 0 := sorry\
  \ \n\n-- Result[K] ≥ min(divisible_count, N)\n\ntheorem result_geq_min_divisible_count\n\
  \  {N : Nat} {A : List Nat} {queries : List Nat} \n  (i : Nat) (k : Nat) (h₁ : i\
  \ < List.length queries) :\n  let divisible_count := count_divisible k A\n  let\
  \ result := solve_contiguous_generators N A queries\n  result.get! i ≥ min divisible_count\
  \ N := sorry\n\n-- Each element should generate at least itself\n\ntheorem single_element_generates_self\n\
  \  {N : Nat} {A : List Nat} :\n  ∀ x ∈ solve_contiguous_generators N A A, x ≥ 1\
  \ := sorry\n\n-- GCD of contiguous subsequence divides generating values\n\ntheorem\
  \ gcd_subsequence_property\n  {N : Nat} {A : List Nat} {K : Nat} \n  (i j : Nat)\
  \ (h₁ : i ≤ j) (h₂ : j < N) :\n  let subseq := A.take (j+1) |>.drop i\n  let subseq_gcd\
  \ := list_gcd subseq\n  K % subseq_gcd = 0 →\n  (solve_contiguous_generators N A\
  \ [K]).get! 0 ≥ 1 := sorry\n\n/--\ninfo: [0, 2, 3]\n-/\n#guard_msgs in\n#eval solve_contiguous_generators\
  \ 2 [2, 4] [1, 2, 8]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
