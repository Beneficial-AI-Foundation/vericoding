"vc-description": "## Task\n\nWrite a function that accepts two arguments and generates\
  \ a sequence containing the integers from the first argument to the second inclusive.\
  \ \n\n## Input\n\nPair of integers greater than or equal to `0`. The second argument\
  \ will always be greater than or equal to the first. \n\n## Example\n\n```python\n\
  generate_integers(2, 5) # --> [2, 3, 4, 5]\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def generate_integers (m n : Int) : List Int :=\n  sorry\n"
"vc-theorems": "theorem generate_integers_property (m n : Int) \n  (h : m ≤ n) :\n\
  \  let result := generate_integers m n\n  (result ≠ []) ∧ \n  (result.length = n\
  \ - m + 1) ∧\n  (result.head! = m) ∧\n  (result.getLast! = n) ∧\n  (∀ i, i < result.length\
  \ - 1 → result[i+1]! - result[i]! = 1) :=\n  sorry\n\n\ntheorem generate_integers_same_number\
  \ (n : Int) :\n  generate_integers n n = [n] :=\n  sorry\n\n/--\ninfo: [2, 3, 4,\
  \ 5]\n-/\n#guard_msgs in\n#eval generate_integers 2 5\n\n/--\ninfo: [0, 1, 2, 3]\n\
  -/\n#guard_msgs in\n#eval generate_integers 0 3\n\n/--\ninfo: [10]\n-/\n#guard_msgs\
  \ in\n#eval generate_integers 10 10\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
