"vc-description": "Write function ```splitSentence``` which will create a list of\
  \ strings from a string.\n\nExample:\n\n```\"hello world\" -> [\"hello\", \"world\"\
  ]```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def splitSentence (s : String) : List String := sorry\n\ntheorem\
  \ split_sentence_rejoin (s : String) : \n  String.intercalate \" \" (splitSentence\
  \ s) = String.intercalate \" \" (s.split (· = ' ')) := sorry\n"
"vc-theorems": "theorem split_sentence_nonempty_parts (s : String) :\n  ∀ part ∈ splitSentence\
  \ s, part.length > 0 := sorry\n\n\ntheorem split_sentence_no_whitespace (s : String)\
  \ :\n  ∀ part ∈ splitSentence s, ' ' ∉ part.data := sorry\n\n/--\ninfo: ['This',\
  \ 'string', 'is', 'splitsville']\n-/\n#guard_msgs in\n#eval splitSentence \"This\
  \ string is splitsville\"\n\n/--\ninfo: ['something']\n-/\n#guard_msgs in\n#eval\
  \ splitSentence \"something\"\n\n/--\ninfo: ['hello', 'world']\n-/\n#guard_msgs\
  \ in\n#eval splitSentence \"hello world\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
