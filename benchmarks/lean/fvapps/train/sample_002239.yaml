"vc-description": "It is Borya's eleventh birthday, and he has got a great present:\
  \ n cards with numbers. The i-th card has the number a_{i} written on it. Borya\
  \ wants to put his cards in a row to get one greater number. For example, if Borya\
  \ has cards with numbers 1, 31, and 12, and he puts them in a row in this order,\
  \ he would get a number 13112.\n\nHe is only 11, but he already knows that there\
  \ are n! ways to put his cards in a row. But today is a special day, so he is only\
  \ interested in such ways that the resulting big number is divisible by eleven.\
  \ So, the way from the previous paragraph is good, because 13112 = 1192 × 11, but\
  \ if he puts the cards in the following order: 31, 1, 12, he would get a number\
  \ 31112, it is not divisible by 11, so this way is not good for Borya. Help Borya\
  \ to find out how many good ways to put the cards are there.\n\nBorya considers\
  \ all cards different, even if some of them contain the same number. For example,\
  \ if Borya has two cards with 1 on it, there are two good ways.\n\nHelp Borya, find\
  \ the number of good ways to put the cards. This number can be large, so output\
  \ it modulo 998244353.\n\n\n-----Input-----\n\nInput data contains multiple test\
  \ cases. The first line of the input data contains an integer t — the number of\
  \ test cases (1 ≤ t ≤ 100). The descriptions of test cases follow.\n\nEach test\
  \ is described by two lines.\n\nThe first line contains an integer n (1 ≤ n ≤ 2000) —\
  \ the number of cards in Borya's present.\n\nThe second line contains n integers\
  \ a_{i} (1 ≤ a_{i} ≤ 10^9) — numbers written on the cards.\n\nIt is guaranteed that\
  \ the total number of cards in all tests of one input data doesn't exceed 2000.\n\
  \n\n-----Output-----\n\nFor each test case output one line: the number of ways to\
  \ put the cards to the table so that the resulting big number was divisible by 11,\
  \ print the number modulo 998244353.\n\n\n-----Example-----\nInput\n4\n2\n1 1\n\
  3\n1 31 12\n3\n12345 67 84\n9\n1 2 3 4 5 6 7 8 9\n\nOutput\n2\n2\n2\n31680"
"vc-preamble": "import Imports.AllImports\n\ndef solve_test (n : Nat) (numbers : List\
  \ Nat) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def MOD := 998244353\n\ntheorem solve_test_within_mod_bounds\n\
  \  (n : Nat) (numbers : List Nat) (h1 : numbers.length = n) (h2 : n ≥ 1) (h3 : n\
  \ ≤ 9)\n  (h4 : ∀ x ∈ numbers, 1 ≤ x ∧ x ≤ 10^9) :\n  0 ≤ solve_test n numbers ∧\
  \ solve_test n numbers < MOD :=\nsorry\n"
"vc-theorems": "theorem solve_test_order_independent\n  (n : Nat) (numbers : List\
  \ Nat) (h1 : numbers.length = n) (h2 : n ≥ 1) (h3 : n ≤ 9)\n  (h4 : ∀ x ∈ numbers,\
  \ 1 ≤ x ∧ x ≤ 10^9) :\n  solve_test n numbers = solve_test n numbers.reverse :=\n\
  sorry\n\n\ntheorem solve_test_large_identical_numbers\n  (n : Nat) (v : Nat) (h1\
  \ : n ≥ 2) (h2 : n ≤ 9) (h3 : v = 10^9)\n  (numbers : List Nat) (h4 : numbers =\
  \ List.replicate n v) :\n  0 ≤ solve_test n numbers ∧ solve_test n numbers < MOD\
  \ :=\nsorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval solve_test 2 [1, 1]\n\n/--\n\
  info: 2\n-/\n#guard_msgs in\n#eval solve_test 3 [1, 31, 12]\n\n/--\ninfo: 2\n-/\n\
  #guard_msgs in\n#eval solve_test 3 [12345, 67, 84]\n\n/--\ninfo: 31680\n-/\n#guard_msgs\
  \ in\n#eval solve_test 9 [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
