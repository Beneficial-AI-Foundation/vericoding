"vc-description": "# Task\n You are given integer `n` determining set S = {1, 2, ...,\
  \ n}. Determine if the number of k-element subsets of S is `ODD` or `EVEN` for given\
  \ integer k.\n\n# Example\n\n For `n = 3, k = 2`, the result should be `\"ODD\"\
  `\n \n In this case, we have 3 2-element subsets of {1, 2, 3}:\n \n `{1, 2}, {1,\
  \ 3}, {2, 3}`\n\n For `n = 2, k = 1`, the result should be `\"EVEN\"`.\n \n In this\
  \ case, we have 2 1-element subsets of {1, 2}:\n \n `{1}, {2}`\n\n `Don't bother\
  \ with naive solution - numbers here are really big.`\n\n# Input/Output\n\n\n -\
  \ `[input]` integer `n`\n\n    `1 <= n <= 10^9`\n\n\n - `[input]` integer `k`\n\n\
  \    `1 <= k <= n`\n\n\n - `[output]` a string\n\n    `\"EVEN\"` or `\"ODD\"` depending\
  \ if the number of k-element subsets of S = {1, 2, ..., n} is ODD or EVEN."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def subsets_parity (n k : Nat) : String := sorry\n\ndef choose\
  \ (n k : Nat) : Nat := sorry \n"
"vc-theorems": "theorem subset_parity_full_set (n : Nat) (h : n > 0) : \n  subsets_parity\
  \ n n = \"ODD\" := sorry\n\n\ntheorem subset_parity_empty_set (n : Nat) (h : n >\
  \ 0) :\n  subsets_parity n 0 = \"ODD\" := sorry\n\n\ntheorem valid_subset_parity\
  \ (n k : Nat) (h1 : n > 0) (h2 : k ≤ n) :\n  (subsets_parity n k = \"ODD\" ↔ choose\
  \ n k % 2 = 1) ∧\n  (subsets_parity n k = \"EVEN\" ↔ choose n k % 2 = 0) := sorry\n\
  \n\ntheorem valid_subset_result (n k : Nat) (h1 : n > 0) (h2 : k ≤ n) :\n  subsets_parity\
  \ n k = \"ODD\" ∨ subsets_parity n k = \"EVEN\" := sorry\n\n/--\ninfo: 'ODD'\n-/\n\
  #guard_msgs in\n#eval subsets_parity 3 2\n\n/--\ninfo: 'EVEN'\n-/\n#guard_msgs in\n\
  #eval subsets_parity 2 1\n\n/--\ninfo: 'EVEN'\n-/\n#guard_msgs in\n#eval subsets_parity\
  \ 20 10\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
