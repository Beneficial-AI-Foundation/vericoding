"vc-description": "Create a function that takes a positive integer and returns the\
  \ next bigger number that can be formed by rearranging its digits. For example:\n\
  \n```\n12 ==> 21\n513 ==> 531\n2017 ==> 2071\n```\n\nIf the digits can't be rearranged\
  \ to form a bigger number, return `-1` (or `nil` in Swift):\n\n```\n9 ==> -1\n111\
  \ ==> -1\n531 ==> -1\n```"
"vc-preamble": "import Imports.AllImports\n\ndef digits (n : Nat) : List Nat := sorry\n\
  def digits_sorted (n : Nat) : List Nat := sorry "
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def digits_sorted_desc (n : Nat) : List Nat := sorry\n\ndef next_bigger\
  \ (n : Nat) : Int := sorry\n"
"vc-theorems": "theorem next_bigger_larger (n : Nat) : \n  let result := next_bigger\
  \ n\n  result ≠ -1 → result > n := sorry\n\n\ntheorem next_bigger_same_digits (n\
  \ : Nat) :\n  let result := next_bigger n\n  result ≠ -1 → \n  ∀ (r : Nat), result\
  \ = r → (digits_sorted n = digits_sorted r) := sorry\n\n\ntheorem next_bigger_minimal\
  \ (n : Nat) :\n  let result := next_bigger n\n  result ≠ -1 →\n  ∀ x, n < x → x\
  \ < result → digits_sorted x ≠ digits_sorted n := sorry\n\n\ntheorem next_bigger_none_exists\
  \ (n : Nat) :\n  next_bigger n = -1 ↔ digits n = digits_sorted_desc n := sorry\n\
  \n\ntheorem next_bigger_single_digit (n : Nat) :\n  n < 10 → next_bigger n = -1\
  \ := sorry\n\n\ntheorem next_bigger_output_type (n : Nat) :\n  ∃ i : Int, next_bigger\
  \ n = i := sorry\n\n/--\ninfo: 21\n-/\n#guard_msgs in\n#eval next_bigger 12\n\n\
  /--\ninfo: 531\n-/\n#guard_msgs in\n#eval next_bigger 513\n\n/--\ninfo: 2071\n-/\n\
  #guard_msgs in\n#eval next_bigger 2017\n\n/--\ninfo: -1\n-/\n#guard_msgs in\n#eval\
  \ next_bigger 9876543210\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
