"vc-description": "While most devs know about [big/little-endianness](https://en.wikipedia.org/wiki/Endianness),\
  \ only a selected few know the secret of real hard core coolness with mid-endians.\n\
  \nYour task is to take a number and return it in its mid-endian format, putting\
  \ the most significant couple of bytes in the middle and all the others around it,\
  \ alternating left and right.\n\nFor example, consider the number `9999999`, whose\
  \ hexadecimal representation would be `98967F` in big endian (the classic you get\
  \ converting); it becomes `7F9698` in little-endian and `96987F` in mid-endian.\n\
  \nWrite a function to do that given a positive integer (in base 10) and remembering\
  \ that you need to pad with `0`s when you get a single hex digit!"
"vc-preamble": "import Imports.AllImports\n\ndef mid_endian (n : Nat) : String :=\
  \ sorry\n\ndef natToHexString (n : Nat) : String := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def splitInPairs (s : String) : List String := sorry\n\ntheorem\
  \ mid_endian_idempotent_bytes (n : Nat) :\n  let result := mid_endian n\n  let pairs\
  \ := splitInPairs result\n  String.join pairs = result := sorry"
"vc-theorems": "theorem mid_endian_valid_hex (n : Nat) : \n  ∃ h, (mid_endian n).toNat?\
  \ = some h := sorry\n\n\ntheorem mid_endian_even_length (n : Nat) :\n  (mid_endian\
  \ n).length % 2 = 0 := sorry\n\n\ntheorem mid_endian_sufficient_length (n : Nat)\
  \ :\n  (mid_endian n).length ≥ (natToHexString n).length := sorry\n\n\ntheorem mid_endian_hex_chars\
  \ (n : Nat) :\n  ∀ i : Fin (mid_endian n).length, \n    (mid_endian n).data.get\
  \ i ∈ ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',\
  \ 'F'] := sorry\n\n\ntheorem mid_endian_single_byte (n : Nat) (h : n ≤ 0xFF) :\n\
  \  mid_endian n = natToHexString n := sorry\n\n\n/--\ninfo: '96987F'\n-/\n#guard_msgs\
  \ in\n#eval mid_endian 9999999\n\n/--\ninfo: '00'\n-/\n#guard_msgs in\n#eval mid_endian\
  \ 0\n\n/--\ninfo: '0B0A0C'\n-/\n#guard_msgs in\n#eval mid_endian 658188\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
