"vc-description": "We are given a certain number ```n``` and we do the product partitions\
  \ of it.\n```[59, 3, 2, 2, 2]``` is a product partition of ```1416``` because:\n\
  ```\n59 * 3 * 2 * 2 * 2 = 1416\n```\nWe form a score, ```sc``` for each partition\
  \ in the following way:\n- if ```d1, d2, ...., dk``` are the prime factors of ```n```,\
  \ and ```f1, f2, ...., fk```, the corresponding frequencies for each factor, we\
  \ calculate:\n\n\n\nSuposse that we have that ```n = 1416``` \nThe product partitions\
  \ of this number with a corresponding special score are as follows:\n```\nProduct\
  \ Partition           Score(sc)\n[59, 3, 2, 2, 2]             350    # equals to:\
  \ (59^1 + 3^1 + 2^3) * 5\n[177, 2, 2, 2]               740    # equals to: (177^1\
  \ + 2^3) * 4\n[118, 3, 2, 2]               500\n[59, 6, 2, 2]                276\n\
  [354, 2, 2]                 1074\n[59, 4, 3, 2]                272\n[236, 3, 2]\
  \                  723\n[177, 4, 2]                  549\n[118, 6, 2]          \
  \        378\n[59, 12, 2]                  219\n[708, 2]                    1420\
  \  <---- maximum value\n[118, 4, 3]                  375\n[59, 8, 3]           \
  \        210\n[472, 3]                     950\n[59, 6, 4]                   207\n\
  [354, 4]                     716\n[236, 6]                     484\n[177, 8]   \
  \                  370\n[118, 12]                    260\n[59, 24]             \
  \        166  <---- minimum value\n```\nSo we need a function that may give us the\
  \ product partition with maximum or minimum score.\n\nThe function ```find_spec_prod_part()```\
  \ will receive two arguments:\n\n- an integer ```n, n > 0```\n- a command as a string,\
  \ one of the following ones: ```'max' or 'min'```\n\nThe function should output\
  \ a list with two elements: the found product partition (as a list sorted in descendin\
  \ order) with its corresponding score.\n```\nfind_spec_prod_part(n, com) ---> [prod_partition,\
  \ score]\n```\nLet'see some cases:\n```python\nfind_spec_prod_part(1416, 'max')\
  \ == [[708, 2], 1420]\n\nfind_spec_prod_part(1416, 'min') == [[59, 24], 166]\n```\n\
  \nThe function should reject prime numbers:\n```python\nfind_spec_prod_part(10007\
  \ , 'max') == \"It is a prime number\"\n```\nEnjoy it!\n\nHint: In this kata, optimization\
  \ is one of the purposes or tags. The algorithm to produce the product partition\
  \ is a key factor in terms of speed. Your code will be tested for an ```n``` value\
  \ up to ```500000```."
"vc-preamble": "import Imports.AllImports\n\ndef primeFactors (n : Nat) : List Nat\
  \ :=\n  sorry\n\n\ndef find_spec_prod_part (n : Nat) (mode : String) : String ⊕\
  \ (List Nat × Nat) :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_prime (n : Nat) : Bool :=\n  sorry\n"
"vc-theorems": "theorem prime_find_spec_prod_part (n : Nat) (h : n ≥ 2) :\n  is_prime\
  \ n = true →\n  find_spec_prod_part n \"max\" = Sum.inl \"It is a prime number\"\
  \ ∧\n  find_spec_prod_part n \"min\" = Sum.inl \"It is a prime number\" :=\n  sorry\n\
  \n\ntheorem partition_product_equals_input (n : Nat) (h1 : n ≥ 4) (h2 : is_prime\
  \ n = false) :\n  match find_spec_prod_part n \"max\", find_spec_prod_part n \"\
  min\" with\n  | Sum.inr (max_parts, _), Sum.inr (min_parts, _) =>\n    (max_parts.foldl\
  \ Nat.mul 1 = n) ∧ \n    (min_parts.foldl Nat.mul 1 = n)\n  | _, _ => False\n  :=\n\
  \  sorry\n\n\ntheorem min_max_relationship (n : Nat) (h1 : n ≥ 4) (h2 : is_prime\
  \ n = false) :\n  match find_spec_prod_part n \"max\", find_spec_prod_part n \"\
  min\" with\n  | Sum.inr (_, max_score), Sum.inr (_, min_score) => max_score ≥ min_score\n\
  \  | _, _ => False\n  :=\n  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
