"vc-description": "Base on the fairy tale [Diamonds and Toads](https://en.wikipedia.org/wiki/Diamonds_and_Toads)\
  \ from Charles Perrault. In this kata you will have to complete a function that\
  \ take 2 arguments: \n\n- A string, that correspond to what the daugther says.\n\
  - A string, that tell you wich fairy the girl have met, this one can be `good` or\
  \ `evil`. \n\nThe function should return the following count as a hash:\n\n- If\
  \ the girl have met the `good` fairy:\n  - count 1 `ruby` everytime you see a `r`\
  \ and 2 everytime you see a `R`\n  - count 1 `crystal` everytime you see a `c` and\
  \ 2 everytime you see a `C`\n- If the girl have met the `evil` fairy: \n  - count\
  \ 1 `python` everytime you see a `p` and 2 everytime uou see a `P`\n  - count 1\
  \ `squirrel` everytime you see a `s` and 2 everytime you see a `S`\n  \n**Note**:\
  \ For this kata I decided to remplace the normal `Diamonds` and `Toads` by some\
  \ programming languages. And just discover that [Squirrel](https://en.wikipedia.org/wiki/Squirrel_(programming_language)\
  \ is a programming language."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def diamonds_and_toads (text: String) (fairy: String) : List (String\
  \ × Nat) :=\n  sorry\n\n/-- For good fairies, diamonds_and_toads returns list with\
  \ keys \"ruby\" and \"crystal\" -/"
"vc-theorems": "theorem good_fairy_keys (text: String) :\n  let result := diamonds_and_toads\
  \ text \"good\"\n  List.length result = 2 ∧\n  List.elem (\"ruby\", 0) result ∧\n\
  \  List.elem (\"crystal\", 0) result := sorry\n\n/-- For evil fairies, diamonds_and_toads\
  \ returns list with keys \"python\" and \"squirrel\" -/\n\ntheorem evil_fairy_keys\
  \ (text: String) :\n  let result := diamonds_and_toads text \"evil\"\n  List.length\
  \ result = 2 ∧\n  List.elem (\"python\", 0) result ∧\n  List.elem (\"squirrel\"\
  , 0) result := sorry\n\n/-- All values in result list are non-negative -/\n\ntheorem\
  \ non_negative_values (text: String) (fairy: String) :\n  let result := diamonds_and_toads\
  \ text fairy\n  ∀ p, p ∈ result → p.2 ≥ 0 := sorry\n\n/-- Count in result matches\
  \ character occurrences with case sensitivity -/\n\ntheorem count_matches_occurrences\
  \ (text: String) (fairy: String) (word: String) (c: Char) :\n  let result := diamonds_and_toads\
  \ text fairy\n  ∀ p ∈ result, p.1 = word →\n    p.2 = (text.data.filter (· = c)).length\
  \ + \n          2 * (text.data.filter (· = c.toUpper)).length := sorry\n\n/-- Good\
  \ and evil fairies produce different key sets for same input -/\n\ntheorem good_evil_different_keys\
  \ (text: String) :\n  let good_result := diamonds_and_toads text \"good\"\n  let\
  \ evil_result := diamonds_and_toads text \"evil\"\n  ∀ p₁ ∈ good_result, ∀ p₂ ∈\
  \ evil_result, p₁.1 ≠ p₂.1 := sorry\n\n/-- Empty string input with good fairy produces\
  \ pairs with zero counts -/\n\ntheorem empty_string_good_fairy :\n  diamonds_and_toads\
  \ \"\" \"good\" = [(\"ruby\", 0), (\"crystal\", 0)] := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
