"vc-description": "*This is the advanced version of the \n[Minimum and Maximum Product\
  \ of k Elements](https://www.codewars.com/kata/minimum-and-maximum-product-of-k-elements/)\
  \ kata.*\n\n---\n\nGiven a list of **integers** and a positive integer `k` (> 0),\
  \ find the minimum and maximum possible product of `k` elements taken from the list.\n\
  \nIf you cannot take enough elements from the list, return `None`/`nil`.\n\n## Examples\n\
  \n```python\nnumbers = [1, -2, -3, 4, 6, 7]\n\nk = 1  ==>  -3, 7\nk = 2  ==>  -21,\
  \ 42    # -3*7, 6*7\nk = 3  ==>  -126, 168  # -3*6*7, 4*6*7\nk = 7  ==>  None  \
  \     # there are only 6 elements in the list\n```\n\nNote: the test lists can contain\
  \ up to 500 elements, so a naive approach will not work.\n\n---\n\n## My other katas\n\
  \nIf you enjoyed this kata then please try [my other katas](https://www.codewars.com/collections/katas-created-by-anter69)!\
  \ :-)\n\n#### *Translations are welcome!*"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_min_max_product (arr : List Int) (k : Nat) : Option (Int\
  \ × Int) := sorry\n\ntheorem find_min_max_product_result_ordered \n    {arr : List\
  \ Int} {k : Nat} \n    (h : k ≤ arr.length) :\n    (find_min_max_product arr k).all\
  \ (fun (min_max : Int × Int) => min_max.1 ≤ min_max.2) := sorry\n"
"vc-theorems": "theorem find_min_max_product_bounds\n    {arr : List Int} {k : Nat}\n\
  \    (h : k ≤ arr.length)\n    (i : Nat)\n    (hi : i + k ≤ arr.length) :\n    (find_min_max_product\
  \ arr k).all (fun (min_max : Int × Int) =>\n      let prod := (List.range k).foldl\
  \ (fun acc j => acc * arr[i + j]!) 1\n      min_max.1 ≤ prod ∧ prod ≤ min_max.2)\
  \ := sorry\n\n\ntheorem find_min_max_product_empty_list\n    {arr : List Int} {k\
  \ : Nat}\n    (hempty : arr = []) \n    (hk : k > 0) :\n    find_min_max_product\
  \ arr k = none := sorry\n\n\ntheorem find_min_max_product_k_too_large\n    {arr\
  \ : List Int} {k : Nat}\n    (h : k > arr.length) :\n    find_min_max_product arr\
  \ k = none := sorry\n\n/--\ninfo: (-21, 42)\n-/\n#guard_msgs in\n#eval find_min_max_product\
  \ [1, -2, -3, 4, 6, 7] 2\n\n/--\ninfo: (0, 12)\n-/\n#guard_msgs in\n#eval find_min_max_product\
  \ [0, -1, -2, -3, -4] 2\n\n/--\ninfo: None\n-/\n#guard_msgs in\n#eval find_min_max_product\
  \ [] 2\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
