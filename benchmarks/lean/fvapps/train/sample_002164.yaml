"vc-description": "We have a graph with N vertices and M edges, and there are two\
  \ people on the graph: Takahashi and Aoki.\nThe i-th edge connects Vertex U_i and\
  \ Vertex V_i.\nThe time it takes to traverse this edge is D_i minutes, regardless\
  \ of direction and who traverses the edge (Takahashi or Aoki).\nTakahashi departs\
  \ Vertex S and Aoki departs Vertex T at the same time. Takahashi travels to Vertex\
  \ T and Aoki travels to Vertex S, both in the shortest time possible.\nFind the\
  \ number of the pairs of ways for Takahashi and Aoki to choose their shortest paths\
  \ such that they never meet (at a vertex or on an edge) during the travel, modulo\
  \ 10^9 + 7.\n\n-----Constraints-----\n - 1 \\leq N \\leq 100 000\n - 1 \\leq M \\\
  leq 200 000\n - 1 \\leq S, T \\leq N\n - S \\neq T\n - 1 \\leq U_i, V_i \\leq N\
  \ (1 \\leq i \\leq M)\n - 1 \\leq D_i \\leq 10^9 (1 \\leq i \\leq M)\n - If i \\\
  neq j, then (U_i, V_i) \\neq (U_j, V_j) and (U_i, V_i) \\neq (V_j, U_j).\n - U_i\
  \ \\neq V_i (1 \\leq i \\leq M)\n - D_i are integers.\n - The given graph is connected.\n\
  \n-----Input-----\nInput is given from Standard Input in the following format:\n\
  N M\nS T\nU_1 V_1 D_1\nU_2 V_2 D_2\n:\nU_M V_M D_M\n\n-----Output-----\nPrint the\
  \ answer.\n\n-----Sample Input-----\n4 4\n1 3\n1 2 1\n2 3 1\n3 4 1\n4 1 1\n\n-----Sample\
  \ Output-----\n2\n\nThere are two ways to choose shortest paths that satisfies the\
  \ condition:\n - Takahashi chooses the path 1 \\rightarrow 2 \\rightarrow 3, and\
  \ Aoki chooses the path 3 \\rightarrow 4 \\rightarrow 1.\n - Takahashi chooses the\
  \ path 1 \\rightarrow 4 \\rightarrow 3, and Aoki chooses the path 3 \\rightarrow\
  \ 2 \\rightarrow 1."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_no_meet_paths (N M S T : Nat) (edges : List (Nat × Nat\
  \ × Nat)) : Nat :=\nsorry\n"
"vc-theorems": "theorem count_no_meet_paths_nonnegative (N M S T : Nat) (edges : List\
  \ (Nat × Nat × Nat)) :\n  count_no_meet_paths N M S T edges ≥ 0 :=\nsorry\n\n\n\
  theorem count_no_meet_paths_upper_bound (N M S T : Nat) (edges : List (Nat × Nat\
  \ × Nat)) :\n  count_no_meet_paths N M S T edges < 10^9 + 7 :=\nsorry\n\n\ntheorem\
  \ count_no_meet_paths_symmetry (N M S T : Nat) (edges : List (Nat × Nat × Nat))\
  \ :\n  count_no_meet_paths N M S T edges = count_no_meet_paths N M T S edges :=\n\
  sorry\n\n\ntheorem count_no_meet_paths_edge_reversal (N M S T : Nat) (edges : List\
  \ (Nat × Nat × Nat)) :\n  count_no_meet_paths N M S T edges = \n  count_no_meet_paths\
  \ N M S T (edges.map (fun (e : Nat × Nat × Nat) => (e.2.1, e.1, e.2.2))) :=\nsorry\n\
  \n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval count_no_meet_paths \n\n/--\ninfo: 2\n\
  -/\n#guard_msgs in\n#eval count_no_meet_paths \n\n/--\ninfo: 6\n-/\n#guard_msgs\
  \ in\n#eval count_no_meet_paths \n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
