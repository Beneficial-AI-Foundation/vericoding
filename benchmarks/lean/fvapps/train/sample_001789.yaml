"vc-description": "Storekeeper is a game in which the player pushes boxes around in\
  \ a warehouse trying to get them to target locations.\nThe game is represented by\
  \ a grid of size m x n, where each element is a wall, floor, or a box.\nYour task\
  \ is move the box 'B' to the target position 'T' under the following rules:\n\n\
  Player is represented by character 'S' and can move up, down, left, right in the\
  \ grid if it is a floor (empy cell).\nFloor is represented by character '.' that\
  \ means free cell to walk.\nWall is represented by character '#' that means obstacle  (impossible\
  \ to walk there). \nThere is only one box 'B' and one target cell 'T' in the grid.\n\
  The box can be moved to an adjacent free cell by standing next to the box and then\
  \ moving in the direction of the box. This is a push.\nThe player cannot walk through\
  \ the box.\n\nReturn the minimum number of pushes to move the box to the target.\
  \ If there is no way to reach the target, return -1.\n \nExample 1:\n\nInput: grid\
  \ = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n               [\"#\",\"T\",\"#\",\"\
  #\",\"#\",\"#\"],\n               [\"#\",\".\",\".\",\"B\",\".\",\"#\"],\n     \
  \          [\"#\",\".\",\"#\",\"#\",\".\",\"#\"],\n               [\"#\",\".\",\"\
  .\",\".\",\"S\",\"#\"],\n               [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\n\
  Output: 3\nExplanation: We return only the number of times the box is pushed.\n\
  Example 2:\nInput: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n            \
  \   [\"#\",\"T\",\"#\",\"#\",\"#\",\"#\"],\n               [\"#\",\".\",\".\",\"\
  B\",\".\",\"#\"],\n               [\"#\",\"#\",\"#\",\"#\",\".\",\"#\"],\n     \
  \          [\"#\",\".\",\".\",\".\",\"S\",\"#\"],\n               [\"#\",\"#\",\"\
  #\",\"#\",\"#\",\"#\"]]\nOutput: -1\n\nExample 3:\nInput: grid = [[\"#\",\"#\",\"\
  #\",\"#\",\"#\",\"#\"],\n               [\"#\",\"T\",\".\",\".\",\"#\",\"#\"],\n\
                 [\"#\",\".\",\"#\",\"B\",\".\",\"#\"],\n               [\"#\",\"\
  .\",\".\",\".\",\".\",\"#\"],\n               [\"#\",\".\",\".\",\".\",\"S\",\"\
  #\"],\n               [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\nOutput: 5\nExplanation:\
  \  push the box down, left, left, up and up.\n\nExample 4:\nInput: grid = [[\"#\"\
  ,\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n               [\"#\",\"S\",\"#\",\".\"\
  ,\"B\",\"T\",\"#\"],\n               [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"\
  ]]\nOutput: -1\n\n \nConstraints:\n\nm == grid.length\nn == grid[i].length\n1 <=\
  \ m <= 20\n1 <= n <= 20\ngrid contains only characters '.', '#',  'S' , 'T', or\
  \ 'B'.\nThere is only one character 'S', 'B' and 'T' in the grid."
"vc-preamble": "import Imports.AllImports\n\ndef min_push_box (grid: Grid) : Int :=\
  \ sorry\n\ndef charEq (c1 c2 : Char) : Bool := c1.val = c2.val\n\n\ndef isValidCharProp\
  \ (c: Char) : Prop := \n  c = '#' ∨ c = '.' ∨ c = 'S' ∨ c = 'B' ∨ c = 'T'\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isValidGrid (grid: Grid) : Prop := sorry\n\n-- All grids must\
  \ have exactly one player (S), one box (B) and one target (T)"
"vc-theorems": "theorem valid_grid_unique_elements (grid: Grid) (h: isValidGrid grid)\
  \ :\n  ∃ (s_pos b_pos t_pos : Nat × Nat),\n    (grid.cells.get? s_pos.1).bind (·.get?\
  \ s_pos.2) = some 'S' ∧ \n    (grid.cells.get? b_pos.1).bind (·.get? b_pos.2) =\
  \ some 'B' ∧\n    (grid.cells.get? t_pos.1).bind (·.get? t_pos.2) = some 'T' :=\
  \ sorry\n\n-- A minimal valid grid should be solvable with one push\n\ntheorem minimal_valid_grid_solvable\
  \ (grid: Grid) :\n  isValidGrid grid →\n  grid.cells = [['#','#','#'], ['#','S','#'],\
  \ ['#','B','#'], ['#','T','#'], ['#','#','#']] →\n  min_push_box grid = 1 := sorry\n\
  \n-- Some valid grids are unsolvable\n\ntheorem unsolvable_grid_exists (grid: Grid)\
  \ :\n  isValidGrid grid →\n  grid.cells = [['#','#','#','#'], ['#','S','#','#'],\
  \ ['#','B','T','#'], ['#','#','#','#']] →\n  min_push_box grid = -1 := sorry\n\n\
  -- Empty grid is invalid and should result in error\n\ntheorem empty_grid_invalid\
  \ :\n  ¬ isValidGrid ⟨[]⟩ := sorry\n\n-- Valid grid contains only allowed characters\
  \ \n\ntheorem valid_grid_chars (grid: Grid) (h: isValidGrid grid) :\n  ∀ row ∈ grid.cells,\
  \ ∀ c ∈ row, isValidCharProp c := sorry\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval\
  \ min_push_box [[\"#\", \"#\", \"#\", \"#\", \"#\", \"#\"], [\"#\", \"T\", \"#\"\
  , \"#\", \"#\", \"#\"], [\"#\", \".\", \".\", \"B\", \".\", \"#\"], [\"#\", \".\"\
  , \"#\", \"#\", \".\", \"#\"], [\"#\", \".\", \".\", \".\", \"S\", \"#\"], [\"#\"\
  , \"#\", \"#\", \"#\", \"#\", \"#\"]]\n\n/--\ninfo: -1\n-/\n#guard_msgs in\n#eval\
  \ min_push_box [[\"#\", \"#\", \"#\", \"#\", \"#\", \"#\"], [\"#\", \"T\", \"#\"\
  , \"#\", \"#\", \"#\"], [\"#\", \".\", \".\", \"B\", \".\", \"#\"], [\"#\", \"#\"\
  , \"#\", \"#\", \".\", \"#\"], [\"#\", \".\", \".\", \".\", \"S\", \"#\"], [\"#\"\
  , \"#\", \"#\", \"#\", \"#\", \"#\"]]\n\n/--\ninfo: -1\n-/\n#guard_msgs in\n#eval\
  \ min_push_box [[\"#\", \"#\", \"#\", \"#\", \"#\", \"#\", \"#\"], [\"#\", \"S\"\
  , \"#\", \".\", \"B\", \"T\", \"#\"], [\"#\", \"#\", \"#\", \"#\", \"#\", \"#\"\
  , \"#\"]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
