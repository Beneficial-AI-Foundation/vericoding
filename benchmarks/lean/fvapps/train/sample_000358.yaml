"vc-description": "Given an array nums containing n + 1 integers where each integer\
  \ is between 1 and n (inclusive), prove that at least one duplicate number must\
  \ exist. Assume that there is only one duplicate number, find the duplicate one.\n\
  \nExample 1:\n\n\nInput: [1,3,4,2,2]\nOutput: 2\n\n\nExample 2:\n\n\nInput: [3,1,3,4,2]\n\
  Output: 3\n\nNote:\n\n\n       You must not modify the array (assume the array is\
  \ read only).\n       You must use only constant, O(1) extra space.\n       Your\
  \ runtime complexity should be less than O(n2).\n       There is only one duplicate\
  \ number in the array, but it could be repeated more than once."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def findDuplicate (nums : List Nat) : Option Nat :=\n  sorry\n"
"vc-theorems": "theorem emptyListReturnNone :\n  findDuplicate [] = none := by sorry\n\
  \n\ntheorem findsDuplicateInList1 :\n  findDuplicate [1, 3, 4, 2, 2] = some 2 :=\
  \ by sorry\n\n\ntheorem findsDuplicateInList2 :\n  findDuplicate [3, 1, 3, 4, 2]\
  \ = some 3 := by sorry\n\n\ntheorem findsDuplicateInList3 :\n  findDuplicate [2,\
  \ 2, 2, 2, 2] = some 2 := by sorry\n\n\ntheorem findsDuplicateInList4 :\n  findDuplicate\
  \ [1, 1] = some 1 := by sorry\n\n\ntheorem minimalCaseFindsOne :\n  findDuplicate\
  \ [1, 1] = some 1 := by sorry\n\n\ntheorem findsInLargerList :\n  findDuplicate\
  \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 5] = some 5 := by sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs\
  \ in\n#eval find_duplicate [1, 3, 4, 2, 2]\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n\
  #eval find_duplicate [3, 1, 3, 4, 2]\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval\
  \ find_duplicate [2, 2, 2, 2, 2]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
