"vc-description": "You're playing a game called Osu! Here's a simplified version of\
  \ it. There are n clicks in a game. For each click there are two outcomes: correct\
  \ or bad. Let us denote correct as \"O\", bad as \"X\", then the whole play can\
  \ be encoded as a sequence of n characters \"O\" and \"X\".\n\nUsing the play sequence\
  \ you can calculate the score for the play as follows: for every maximal consecutive\
  \ \"O\"s block, add the square of its length (the number of characters \"O\") to\
  \ the score. For example, if your play can be encoded as \"OOXOOOXXOO\", then there's\
  \ three maximal consecutive \"O\"s block \"OO\", \"OOO\", \"OO\", so your score\
  \ will be 2^2 + 3^2 + 2^2 = 17. If there are no correct clicks in a play then the\
  \ score for the play equals to 0.\n\nYou know that the probability to click the\
  \ i-th (1 ≤ i ≤ n) click correctly is p_{i}. In other words, the i-th character\
  \ in the play sequence has p_{i} probability to be \"O\", 1 - p_{i} to be \"X\"\
  . You task is to calculate the expected score for your play.\n\n\n-----Input-----\n\
  \nThe first line contains an integer n (1 ≤ n ≤ 10^5) — the number of clicks. The\
  \ second line contains n space-separated real numbers p_1, p_2, ..., p_{n} (0 ≤\
  \ p_{i} ≤ 1).\n\nThere will be at most six digits after the decimal point in the\
  \ given p_{i}.\n\n\n-----Output-----\n\nPrint a single real number — the expected\
  \ score for your play. Your answer will be considered correct if its absolute or\
  \ relative error does not exceed 10^{ - 6}.\n\n\n-----Examples-----\nInput\n3\n\
  0.5 0.5 0.5\n\nOutput\n2.750000000000000\n\nInput\n4\n0.7 0.2 0.1 0.9\n\nOutput\n\
  2.489200000000000\n\nInput\n5\n1 1 1 1 1\n\nOutput\n25.000000000000000\n\n\n\n-----Note-----\n\
  \nFor the first example. There are 8 possible outcomes. Each has a probability of\
  \ 0.125.  \"OOO\"  →  3^2 = 9;  \"OOX\"  →  2^2 = 4;  \"OXO\"  →  1^2 + 1^2 = 2;\
  \  \"OXX\"  →  1^2 = 1;  \"XOO\"  →  2^2 = 4;  \"XOX\"  →  1^2 = 1;  \"XXO\"  →\
  \  1^2 = 1;  \"XXX\"  →  0. \n\nSo the expected score is $\\frac{9 + 4 + 2 + 1 +\
  \ 4 + 1 + 1}{8} = 2.75$"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def compute_expected_score (n : Nat) (probs : List Float) : Float\
  \ :=\n  sorry\n"
"vc-theorems": "theorem score_is_nonnegative {n : Nat} {probs : List Float} \n  (h1\
  \ : ∀ p ∈ probs, 0 ≤ p ∧ p ≤ 1)\n  (h2 : probs.length = n) :\n  0 ≤ compute_expected_score\
  \ n probs :=\nsorry\n\n\ntheorem score_with_zero_probs {n : Nat} {probs : List Float}\n\
  \  (h1 : probs.length = n) \n  (h2 : probs = List.replicate n 0) :\n  compute_expected_score\
  \ n probs = 0 :=\nsorry\n\n\ntheorem score_monotonic_with_all_ones {n : Nat} {probs\
  \ : List Float}\n  (h1 : ∀ p ∈ probs, 0 ≤ p ∧ p ≤ 1)\n  (h2 : probs.length = n)\
  \ :\n  compute_expected_score n probs ≤ compute_expected_score n (List.replicate\
  \ n 1) :=\nsorry\n\n\ntheorem length_matches_probability_list {n : Nat} {probs :\
  \ List Float}\n  (h1 : ∀ p ∈ probs, 0 ≤ p ∧ p ≤ 1)\n  (h2 : probs.length = n)\n\
  \  (h3 : n > 0) :\n  ∃ score : Float, compute_expected_score n probs = score :=\n\
  sorry"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded"
