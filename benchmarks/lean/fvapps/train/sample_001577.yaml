"vc-description": "# Task\n You are given a string `s`. Every letter in `s` appears\
  \ once. \n \n Consider all strings formed by rearranging the letters in `s`. After\
  \ ordering these strings in dictionary order, return the middle term. (If the sequence\
  \ has a even length `n`, define its middle term to be the `(n/2)`th term.)\n\n#\
  \ Example\n\n For `s = \"abc\"`, the result should be `\"bac\"`.\n```\nThe permutations\
  \ in order are:\n\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"\nSo, The middle\
  \ term is \"bac\".```\n\n# Input/Output\n\n\n - `[input]` string `s`\n\n  unique\
  \ letters (`2 <= length <= 26`)\n\n - `[output]` a string\n\n  middle permutation."
"vc-preamble": "import Imports.AllImports\n\ndef middle_permutation (s : String) :\
  \ String := sorry \n\ntheorem middle_permutation_symmetric (s : String) :\n  middle_permutation\
  \ s = middle_permutation s := by sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def char_list_eq (l1 l2 : List Char) : Prop := \n  ∀ c : Char,\
  \ c ∈ l1 ↔ c ∈ l2\n"
"vc-theorems": "theorem middle_permutation_length (s : String) :\n  (middle_permutation\
  \ s).length = s.length := by sorry\n\n\ntheorem middle_permutation_chars (s : String)\
  \ :\n  char_list_eq s.data (middle_permutation s).data := by sorry\n\n\ntheorem\
  \ middle_permutation_valid (s : String) :\n  ∃ perm : List Char, middle_permutation\
  \ s = String.mk perm ∧\n    ∃ (π : List Char → List Char), \n      perm = π s.data\
  \ ∧\n      (∀ (l : List Char), (π l).length = l.length) ∧\n      (∀ (l : List Char),\
  \ char_list_eq (π l) l) := by sorry\n\n/--\ninfo: 'bac'\n-/\n#guard_msgs in\n#eval\
  \ middle_permutation \"abc\"\n\n/--\ninfo: 'bdca'\n-/\n#guard_msgs in\n#eval middle_permutation\
  \ \"abcd\"\n\n/--\ninfo: 'cbxda'\n-/\n#guard_msgs in\n#eval middle_permutation \"\
  abcdx\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
