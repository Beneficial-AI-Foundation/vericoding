"vc-description": "One of the first algorithm used for approximating the integer square\
  \ root of a positive integer `n` is known as \"Hero's method\", \nnamed after the\
  \ first-century Greek mathematician Hero of Alexandria who gave the first description\n\
  of the method. Hero's method can be obtained from Newton's method which came 16\
  \ centuries after. \n\nWe approximate the square root of a number `n` by taking\
  \ an initial guess `x`, an error `e` and repeatedly calculating a new approximate\
  \ *integer* value `x` using: `(x + n / x) / 2`; we are finished when the previous\
  \ `x` and the `new x` have an absolute difference less than `e`.\n\nWe supply to\
  \ a function (int_rac) a number `n` (positive integer) and a parameter `guess` (positive\
  \ integer) which will be our initial `x`. For this kata the parameter 'e' is set\
  \ to `1`.\n\nHero's algorithm is not always going to come to an exactly correct\
  \ result! For instance: if n = 25 we get 5 but for n = 26 we also get 5. Nevertheless\
  \ `5` is the *integer* square root of `26`.\n\nThe kata is to return the count of\
  \ the progression of integer approximations that the algorithm makes.\n\nReference:\n\
  \n\n\nSome examples:\n```\nint_rac(25,1): follows a progression of [1,13,7,5] so\
  \ our function should return 4.\n\nint_rac(125348,300): has a progression of [300,358,354]\
  \ so our function should return 3.\n\nint_rac(125348981764,356243): has a progression\
  \ of [356243,354053,354046] so our function should return 3.\n```\n\n#\n\nYou can\
  \ use Math.floor (or similar) for each integer approximation.\n \n#\n\nNote for\
  \ JavaScript, Coffescript, Typescript:\n\nDon't use the double bitwise NOT ~~ at\
  \ each iteration if you want to have the same results as in the tests and the other\
  \ languages."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def int_rac (n : Nat) (guess : Nat) : Nat :=\n  sorry\n\n\n"
"vc-theorems": "theorem int_rac_perfect_squares_consistency (x : Nat)\n  (h1 : x ≥\
  \ 1) (h2 : x ≤ 20) :\n  let n := x * x\n  let guess1 := max 1 (x - 1) \n  let guess2\
  \ := x + 1\n  Nat.sub (int_rac n guess1) (int_rac n guess2) ≤ 1 ∧ \n  Nat.sub (int_rac\
  \ n guess2) (int_rac n guess1) ≤ 1 := sorry\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n\
  #eval int_rac 25 1\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval int_rac 125348 300\n\
  \n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval int_rac 125348981764 356243\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
