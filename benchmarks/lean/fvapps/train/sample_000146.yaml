"vc-description": "We have jobs: difficulty[i] is the difficulty of the ith job, and profit[i] is\
  \ the profit of the ith job. \nNow we have some workers. worker[i] is the ability\
  \ of the ith worker, which means that this worker can only complete a job with difficulty\
  \ at most worker[i]. \nEvery worker can be assigned at most one job, but one job can\
  \ be completed multiple times.\nFor example, if 3 people attempt the same job that\
  \ pays $1, then the total profit will be $3.  If a worker cannot complete any job,\
  \ his profit is $0.\nWhat is the most profit we can make?\nExample 1:\nInput: difficulty\
  \ = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]\nOutput: 100 \n\
  Explanation: Workers are assigned jobs of difficulty [4,4,6,6] and they get profit\
  \ of [20,20,30,30] seperately.\nNotes:\n\n1 <= difficulty.length = profit.length\
  \ <= 10000\n1 <= worker.length <= 10000\ndifficulty[i], profit[i], worker[i]  are\
  \ in range [1, 10^5]"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def max_profit_assignment (difficulty profit worker : List Int)\
  \ : Int :=\n  sorry\n"
"vc-theorems": "theorem max_profit_basic_properties\n  (difficulty : List Int) \n\
  \  (profit : List Int)\n  (worker : List Int)\n  (hdiff : ∀ d ∈ difficulty, 1 ≤\
  \ d ∧ d ≤ 20)\n  (hprof : ∀ p ∈ profit, 1 ≤ p ∧ p ≤ 100)\n  (hwork : ∀ w ∈ worker,\
  \ 1 ≤ w ∧ w ≤ 20)\n  (hlen : difficulty.length = profit.length)\n  : let result\
  \ := max_profit_assignment difficulty profit worker\n    result ≥ 0 ∧ result ≤ (List.foldl\
  \ max 0 profit) * worker.length :=\n  sorry\n\n\ntheorem zero_skill_workers_result\n\
  \  (difficulty : List Int)\n  (profit : List Int)\n  (worker : List Int)\n  (hdiff\
  \ : ∀ d ∈ difficulty, 1 ≤ d ∧ d ≤ 10)\n  (hprof : ∀ p ∈ profit, 0 ≤ p ∧ p ≤ 10)\n\
  \  (hwork : ∀ w ∈ worker, w = 0)\n  (hlen : difficulty.length = profit.length)\n\
  \  : max_profit_assignment difficulty profit worker = 0 :=\n  sorry\n\n\ntheorem\
  \ overskilled_workers_result\n  (difficulty : List Int)\n  (profit : List Int)\n\
  \  (worker : List Int)\n  (hdiff : ∀ d ∈ difficulty, 1 ≤ d ∧ d ≤ 10)\n  (hprof :\
  \ ∀ p ∈ profit, 0 ≤ p ∧ p ≤ 100)\n  (hwork : ∀ w ∈ worker, 100 ≤ w ∧ w ≤ 200)\n\
  \  (hlen : difficulty.length = profit.length)\n  : max_profit_assignment difficulty\
  \ profit worker = worker.length * (List.foldl max 0 profit) :=\n  sorry\n\n/--\n\
  info: 100\n-/\n#guard_msgs in\n#eval max_profit_assignment [2, 4, 6, 8, 10] [10,\
  \ 20, 30, 40, 50] [4, 5, 6, 7]\n\n/--\ninfo: 30\n-/\n#guard_msgs in\n#eval max_profit_assignment\
  \ [1, 2, 3] [10, 20, 30] [1, 2]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval max_profit_assignment\
  \ [5] [100] [1, 2, 3]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
