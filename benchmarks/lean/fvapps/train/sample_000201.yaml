"vc-description": "In the computer world, use restricted resource you have to generate\
  \ maximum benefit is what we always want to pursue.\nFor now, suppose you are a\
  \ dominator of m 0s and n 1s respectively. On the other hand, there is an array\
  \ with strings consisting of only 0s and 1s.\n\n\nNow your task is to find the maximum\
  \ number of strings that you can form with given m 0s and n 1s. Each 0 and 1 can\
  \ be used at most once.\n\n\n\nNote:\n\nThe given numbers of 0s and 1s will both\
  \ not exceed 100\nThe size of given string array won't exceed 600.\n\n\n\nExample\
  \ 1:\n\nInput: Array = {\"10\", \"0001\", \"111001\", \"1\", \"0\"}, m = 5, n =\
  \ 3\nOutput: 4\n\nExplanation: This are totally 4 strings can be formed by the using\
  \ of 5 0s and 3 1s, which are “10,”0001”,”1”,”0”\n\n\n\nExample 2:\n\nInput: Array\
  \ = {\"10\", \"0\", \"1\"}, m = 1, n = 1\nOutput: 2\n\nExplanation: You could form\
  \ \"10\", but then you'd have nothing left. Better form \"0\" and \"1\"."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def findMaxForm (strs : List String) (m n : Nat) : Nat := sorry\n\
  \ntheorem findMaxForm_bounds {strs : List String} {m n : Nat} (h : strs.length >\
  \ 0) :\n  findMaxForm strs m n ≤ strs.length ∧ findMaxForm strs m n ≥ 0 := sorry\n\
  \n\n\n\n"
"vc-theorems": "theorem findMaxForm_empty_string {strs : List String} (h : strs.length\
  \ > 0) :\n  findMaxForm (strs ++ [\"\"] ) 1 1 ≤ findMaxForm strs 1 1 + 1 := sorry\n\
  \n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval findMaxForm [\"10\", \"0001\", \"111001\"\
  , \"1\", \"0\"] 5 3\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval findMaxForm [\"10\"\
  , \"0\", \"1\"] 1 1\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval findMaxForm [\"10\"\
  , \"0\"] 1 1\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
