"vc-description": "The objective of this Kata is to write a function that creates\
  \ a dictionary of factors for a range of numbers.\n\nThe key for each list in the\
  \ dictionary should be the number. The list associated with each key should possess\
  \ the factors for the number.\n\nIf a number possesses no factors (only 1 and the\
  \ number itself), the list for the key should be `['None']`\n\nThe function possesses\
  \ two arguments (`n` and `m`). Where `n` is the starting number and `m` is the ending\
  \ number.\n\nFor example: All factors for 2 (`n`) through to 6 (`m`) with the number\
  \ being the key in the dictionary:\n\n```python\n{2: ['None'], 3: ['None'], 4: [2],\
  \ 5: ['None'], 6: [2, 3]}\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def factorsRange (n m : Nat) : List (Nat × List Nat) := sorry\n\
  \n-- All returned keys are within range"
"vc-theorems": "theorem factorsRange_keys_in_range\n  {n m : Nat} (h : n ≤ m)\n  :\
  \ ∀ k, k ∈ (factorsRange n m).map Prod.fst → n ≤ k ∧ k ≤ m := sorry\n\n-- Length\
  \ of result matches range size when n ≤ m\n\ntheorem factorsRange_length\n  {n m\
  \ : Nat} (h : n ≤ m)\n  : (factorsRange n m).length = m - n + 1 := sorry\n\n-- For\
  \ numbers with factors, each factor divides the number\n\ntheorem factorsRange_factors_divide\n\
  \  {n m k : Nat} (h : n ≤ m)\n  : ∀ factors, (k, factors) ∈ factorsRange n m →\n\
  \    ∀ f ∈ factors, k % f = 0 := sorry\n\n-- Factors are in ascending order\n\n\
  theorem factorsRange_factors_ascending\n  {n m k : Nat} (h : n ≤ m)\n  : ∀ factors,\
  \ (k, factors) ∈ factorsRange n m →\n    ∀ i j, i < j → i < factors.length → j <\
  \ factors.length →\n    factors[i]! < factors[j]! := sorry\n\n-- Factors are less\
  \ than their number\n\ntheorem factorsRange_factors_less\n  {n m k : Nat} (h : n\
  \ ≤ m)\n  : ∀ factors, (k, factors) ∈ factorsRange n m →\n    ∀ f ∈ factors, 2 ≤\
  \ f ∧ f < k := sorry\n\n-- Single number case returns singleton list\n\ntheorem\
  \ factorsRange_single_number\n  {n : Nat}\n  : (factorsRange n n).length = 1 ∧\n\
  \    ∃ factors, (n, factors) ∈ factorsRange n n := sorry\n\n-- Reversed inputs return\
  \ empty list\n\ntheorem factorsRange_reversed_inputs\n  {n m : Nat} (h : n > m)\n\
  \  : factorsRange n m = [] := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
