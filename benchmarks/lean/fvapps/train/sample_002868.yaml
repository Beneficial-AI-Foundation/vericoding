"vc-description": "Check if given chord is minor or major.\n\n_____________________________________________________________\n\
  Rules:\n\n1. Basic minor/major chord have three elements.\n\n2. Chord is minor when\
  \ interval between first and second element equals 3 and between second and third\
  \ -> 4.\n\n3. Chord is major when interval between first and second element equals\
  \ 4 and between second and third -> 3.\n\n4. In minor/major chord interval between\
  \ first and third element equals... 7.\n\n_______________________________________________________________\n\
  There is a preloaded list of the 12 notes of a chromatic scale built on C. This\
  \ means that there are (almost) all allowed note' s names in music.\n\nnotes = \n\
  ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'],\
  \ 'A', ['A#', 'Bb'], 'B']\n\nNote that e. g. 'C#' - 'C' = 1, 'C' - 'C#' = 1, 'Db'\
  \ - 'C' = 1 and 'B' - 'C' = 1. \n\nInput:\nString of notes separated by whitespace,\
  \ e. g. 'A C# E'\n\nOutput:\nString message: 'Minor', 'Major' or 'Not a chord'."
"vc-preamble": "import Imports.AllImports\n\ndef NoteNames : List String := [\"C\"\
  , \"C#\", \"Db\", \"D\", \"D#\", \"Eb\", \"E\", \"F\", \"F#\", \"Gb\", \"G\", \"\
  G#\", \"Ab\", \"A\", \"A#\", \"Bb\", \"B\"]\n\n/-- The main function that determines\
  \ if a chord is major, minor, or invalid -/\n\ndef minor_or_major (input : String)\
  \ : String := sorry\n\n/-- Returns the list of words in a string -/"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def splitString (s : String) : List String := sorry\n\n/-- Invalid\
  \ input types should return \"Not a chord\" -/"
"vc-theorems": "theorem invalid_input_numeric (n : Nat) :\n  minor_or_major (toString\
  \ n) = \"Not a chord\" := sorry\n\n/-- Wrong number of notes (not equal to 3) should\
  \ return \"Not a chord\" -/\n\ntheorem wrong_note_count (notes : String) :\n  (splitString\
  \ notes).length ≠ 3 → minor_or_major notes = \"Not a chord\" := sorry\n\n/-- Invalid\
  \ note names should return \"Not a chord\" -/\n\ntheorem invalid_note_names (notes\
  \ : String) :\n  (∃ note, note ∈ splitString notes ∧ note ∉ NoteNames) → \n  minor_or_major\
  \ notes = \"Not a chord\" := sorry\n\n/-- Known major chords should return \"Major\"\
  \ -/\n\ntheorem known_major_chords :\n  minor_or_major \"C E G\" = \"Major\" ∧\n\
  \  minor_or_major \"F# A# C#\" = \"Major\" := sorry\n\n/-- Known minor chords should\
  \ return \"Minor\" -/\n\ntheorem known_minor_chords :\n  minor_or_major \"C Eb G\"\
  \ = \"Minor\" ∧\n  minor_or_major \"F# A C#\" = \"Minor\" := sorry\n\n/-- Enharmonic\
  \ equivalents should produce the same result -/\n\ntheorem enharmonic_equivalence\
  \ (n1 n2 : String) (other1 other2 : String) :\n  ((n1 = \"C#\" ∧ n2 = \"Db\") ∨\
  \ \n   (n1 = \"D#\" ∧ n2 = \"Eb\") ∨\n   (n1 = \"F#\" ∧ n2 = \"Gb\") ∨\n   (n1 =\
  \ \"G#\" ∧ n2 = \"Ab\") ∨\n   (n1 = \"A#\" ∧ n2 = \"Bb\")) →\n  minor_or_major (s!\"\
  {n1} {other1} {other2}\") = \n  minor_or_major (s!\"{n2} {other1} {other2}\") :=\
  \ sorry\n\n/--\ninfo: 'Major'\n-/\n#guard_msgs in\n#eval minor_or_major \"C E G\"\
  \n\n/--\ninfo: 'Minor'\n-/\n#guard_msgs in\n#eval minor_or_major \"C Eb G\"\n\n\
  /--\ninfo: 'Not a chord'\n-/\n#guard_msgs in\n#eval minor_or_major \"C D G\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
