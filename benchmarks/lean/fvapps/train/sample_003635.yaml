"vc-description": "# The Invitation\n\nMost of us played with toy blocks growing up.\
  \ It was fun and you learned stuff. So what else can you do but rise to the challenge\
  \ when a 3-year old exclaims, \"Look, I made a square!\", then pointing to a pile\
  \ of blocks, \"Can _you_ do it?\"\n\n# These Blocks\n\nJust to play along, of course\
  \ we'll be viewing these blocks in two dimensions. Depth now being disregarded,\
  \ it turns out the pile has four different sizes of block: `1x1`, `1x2`, `1x3`,\
  \ and `1x4`. The smallest one represents the area of a square, the other three are\
  \ rectangular, and all differ by their width. Integers matching these four widths\
  \ are used to represent the blocks in the input.\n\n# This Square\n\nWell, the kid\
  \ made a `4x4` square from this pile, so you'll have to match that. Noticing the\
  \ way they fit together, you realize the structure must be built in fours rows,\
  \ one row at a time, where the blocks must be placed horizontally. With the known\
  \ types of block, there are five types of row you could build:\n\n* 1 four-unit\
  \ block\n* 1 three-unit block plus 1 one-unit bock (in either order)\n* 2 two-unit\
  \ blocks\n* 1 two-unit block plus 2 one-unit blocks (in any order)\n* 4 one-unit\
  \ blocks\n\nAmounts for all four of the block sizes in the pile will each vary from\
  \ `0` to `16`. The total size of the pile will also vary from `0` to `16`. The order\
  \ of rows is irrelevant. A valid square doesn't have to use up all the given blocks.\n\
  \n# Some Examples\n\nGiven `1, 3, 2, 2, 4, 1, 1, 3, 1, 4, 2` there are many ways\
  \ you could construct a square. Here are three possibilities, as described by their\
  \ four rows:\n\n* 1 four-unit block\n* 2 two-unit blocks\n* 1 four-unit block\n\
  * 4 one-unit blocks\n>\n* 1 three-unit block plus 1 one-unit block\n* 2 two-unit\
  \ blocks\n* 1 four-unit block\n* 1 one-unit block plus 1 three-unit block\n>\n*\
  \ 2 two-unit blocks\n* 1 three-unit block plus 1 one-unit block\n* 1 four-unit block\n\
  * 2 one-unit blocks plus 1 two-unit block\n>\n\nGiven `1, 3, 2, 4, 3, 3, 2` there\
  \ is no way to complete the task, as you could only build three rows of the correct\
  \ length. The kid will not be impressed.\n\n* 2 two-unit blocks\n* 1 three-unit\
  \ block plus 1 one-unit block\n* 1 four-unit block\n* (here only sadness)\n>\n\n\
  # Input\n```python\nblocks ~ a random list of integers (1 <= x <= 4)\n```\n# Output\n\
  ```python\nTrue or False ~ whether you can build a square\n```\n# Enjoy!\n\nIf interested,\
  \ I also have [this kata](https://www.codewars.com/kata/5cb7baa989b1c50014a53333)\
  \ as well as [this other kata](https://www.codewars.com/kata/5cb5eb1f03c3ff4778402099)\
  \ to consider solving."
"vc-preamble": "import Imports.AllImports\n\ndef build_square (blocks: List Nat) :\
  \ Bool :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def list_sum : List Nat → Nat \n  | [] => 0\n  | x::xs => x + list_sum\
  \ xs\n"
"vc-theorems": "theorem sum_16_if_buildable {blocks : List Nat} :\n  build_square\
  \ blocks = true → \n  list_sum blocks ≥ 16 :=\nsorry\n\n\ntheorem input_unchanged\
  \ {blocks : List Nat} :\n  build_square blocks = b →\n  blocks = blocks :=\nsorry\n\
  \n\ntheorem invalid_pieces {blocks : List Nat} : \n  (∀ x ∈ blocks, x < 1 ∨ x >\
  \ 4) →\n  build_square blocks = false :=\nsorry\n\n/--\ninfo: True\n-/\n#guard_msgs\
  \ in\n#eval build_square [1, 1, 1, 1, 1, 1, 1, 2, 3, 4]\n\n/--\ninfo: False\n-/\n\
  #guard_msgs in\n#eval build_square [1, 3, 2, 4, 3, 3, 2]\n\n/--\ninfo: True\n-/\n\
  #guard_msgs in\n#eval build_square [4, 2, 2, 1, 1, 1, 1, 3, 3, 3, 1]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
