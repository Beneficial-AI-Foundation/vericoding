"vc-description": "Generate and return **all** possible increasing arithmetic progressions\
  \ of six primes `[a, b, c, d, e, f]` between the given limits. Note: the upper and\
  \ lower limits are inclusive.\n\nAn arithmetic progression is a sequence where the\
  \ difference between consecutive numbers is the same, such as: 2, 4, 6, 8.\n\nA\
  \ prime number is a number that is divisible only by itself and 1 (e.g. 2, 3, 5,\
  \ 7, 11)\n\nYour solutions should be returned as lists inside a list in ascending\
  \ order of the first item (if there are multiple lists with same first item, return\
  \ in ascending order for the second item etc) are the e.g: `[ [a, b, c, d, e, f],\
  \ [g, h, i, j, k, l] ]` where `a < g`. If there are no solutions, return an empty\
  \ list: `[]`\n\n## Examples"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def primes_a_p (lower upper : Nat) : List (List Nat) := sorry\n\
  \ndef is_valid_ap (seq : List Nat) (lower upper : Nat) : Bool := sorry\n"
"vc-theorems": "theorem primes_ap_increasing_order {lower upper : Nat} (h : lower\
  \ ≤ upper) :\n  let result := primes_a_p lower upper \n  ∀ i j, i < j → List.get!\
  \ result i ≤ List.get! result j := sorry\n\n\ntheorem primes_ap_length_six {lower\
  \ upper : Nat} (h : lower ≤ upper) :\n  let result := primes_a_p lower upper\n \
  \ ∀ seq ∈ result, seq.length = 6 := sorry\n\n\ntheorem primes_ap_in_bounds {lower\
  \ upper : Nat} (h : lower ≤ upper) :\n  let result := primes_a_p lower upper\n \
  \ ∀ seq ∈ result, ∀ x ∈ seq, lower ≤ x ∧ x ≤ upper := sorry\n\n\ntheorem primes_ap_valid_progression\
  \ {lower upper : Nat} (h : lower ≤ upper) :\n  let result := primes_a_p lower upper\n\
  \  ∀ seq ∈ result, is_valid_ap seq lower upper = true := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
