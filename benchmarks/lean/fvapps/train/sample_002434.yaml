"vc-description": "Return the number of permutations of 1 to n so that prime numbers\
  \ are at prime indices (1-indexed.)\n(Recall that an integer is prime if and only\
  \ if it is greater than 1, and cannot be written as a product of two positive integers both\
  \ smaller than it.)\nSince the answer may be large, return the answer modulo 10^9\
  \ + 7.\n \nExample 1:\nInput: n = 5\nOutput: 12\nExplanation: For example [1,2,5,4,3]\
  \ is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at\
  \ index 1.\n\nExample 2:\nInput: n = 100\nOutput: 682289015\n\n \nConstraints:\n\
  \n1 <= n <= 100"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def num_prime_arrangements (n: Nat) : Nat := sorry\n\ntheorem num_prime_arrangements_positive\
  \ (n: Nat) :\n  n ≥ 1 → num_prime_arrangements n > 0 := sorry\n"
"vc-theorems": "theorem num_prime_arrangements_modulo_bound (n: Nat) :\n  n ≥ 1 →\
  \ num_prime_arrangements n < 10^9 + 7 := sorry\n\n\ntheorem num_prime_arrangements_base_case\
  \ : \n  num_prime_arrangements 1 = 1 := sorry\n\n\ntheorem num_prime_arrangements_ordering\
  \ (n: Nat) :\n  n > 1 → (num_prime_arrangements n - num_prime_arrangements (n-1))\
  \ ≤ 10^9 + 7 := sorry\n\n/--\ninfo: 12\n-/\n#guard_msgs in\n#eval num_prime_arrangements\
  \ 5\n\n/--\ninfo: 682289015\n-/\n#guard_msgs in\n#eval num_prime_arrangements 100\n\
  \n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval num_prime_arrangements 1\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
