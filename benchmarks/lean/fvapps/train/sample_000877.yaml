"vc-description": "Tweedle-Dee and Tweedle-Dum are playing a fierce match of binary\
  \ Nim. This novel game is played with $N$ stacks, each of them containing only $1$-s\
  \ and $0$-s.\nJust like in normal Nim, Tweedle-Dee and Tweedle-Dum alternate turns;\
  \ in their turn, a player must choose one non-empty stack and remove a positive\
  \ number of elements from the top of this stack. However, Tweedle-Dee may only choose\
  \ a stack with $0$ at the top (and remove elements from it afterwards), and similarly,\
  \ Tweedle-Dum may only choose a stack with $1$ at the top. the player that cannot\
  \ make a move loses\nSuzumo does not want to wait for the end of the game, so given\
  \ the starting player he asks you to determine the winner. Remember that Tweedle-Dee\
  \ and Tweedle-Dum are legendary grandmasters of combinatorial games, so both always\
  \ play optimally.\n\n-----Input-----\n- The first line of the input contains a single\
  \ integer $T$ denoting the number of test cases. The description of $T$ test cases\
  \ follows.\n- The first line of each test case contains an integer $N$, a string\
  \ $S$ denoting the number of stacks, the player that starts the game, respectively.\n\
  - Each of the following $N$ lines contains a single binary string $B$ representing\
  \ a stack; the first character of $B$ corresponds to the top element of the stack\
  \ and the last character to the bottom element.\n\n-----Output-----\nFor each test\
  \ case, print a single line containing the string \"Dee\" if Tweedle-Dee wins the\
  \ match or \"Dum\" if Tweedle-Dum wins.\n\n-----Constraints-----\n- $1 \\le T \\\
  le 500$\n- $1 \\le N \\le 50$\n- $1 \\le |B| \\le 50$\n- each character in $B$ is\
  \ either '1' or '0'\n- $S$ is either \"Dee\" or \"Dum\"\n\n-----Example Input-----\n\
  2\n2 Dee\n101\n010\n2 Dum\n101\n010\n\n-----Example Output-----\nDum\nDee"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_binary_nim (n : Nat) (starting_player : Player) (stacks\
  \ : List String) : Player :=\n  sorry\n"
"vc-theorems": "theorem solve_binary_nim_returns_valid_player\n  (n : Nat)\n  (starting_player\
  \ : Player)\n  (stacks : List String)\n  : (solve_binary_nim n starting_player stacks\
  \ = Player.Dee) ∨\n    (solve_binary_nim n starting_player stacks = Player.Dum)\
  \ := sorry\n\n\ntheorem solve_binary_nim_deterministic\n  (n : Nat)\n  (starting_player\
  \ : Player)\n  (stacks : List String)\n  : solve_binary_nim n starting_player stacks\
  \ = \n    solve_binary_nim n starting_player stacks := sorry\n\n\ntheorem solve_binary_nim_equal_zeros_ones_starting_player_loses\n\
  \  (n : Nat)\n  (starting_player : Player)\n  (stacks : List String)\n  (h : (stacks.foldl\
  \ (fun acc s => acc + (s.toList.filter (· = '0')).length) 0) =\n       (stacks.foldl\
  \ (fun acc s => acc + (s.toList.filter (· = '1')).length) 0))\n  : solve_binary_nim\
  \ n starting_player stacks ≠ starting_player := sorry\n\n/--\ninfo: 'Dum'\n-/\n\
  #guard_msgs in\n#eval solve_binary_nim 2 \"Dee\" [\"101\", \"010\"]\n\n/--\ninfo:\
  \ 'Dee'\n-/\n#guard_msgs in\n#eval solve_binary_nim 2 \"Dum\" [\"101\", \"010\"\
  ]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
