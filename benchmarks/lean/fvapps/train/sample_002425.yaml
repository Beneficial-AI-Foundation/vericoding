"vc-description": "On a N * N grid, we place some 1 * 1 * 1 cubes that are axis-aligned\
  \ with the x, y, and z axes.\nEach value v = grid[i][j] represents a tower of v cubes\
  \ placed on top of grid cell (i, j).\nNow we view the projection of these cubes onto\
  \ the xy, yz, and zx planes.\nA projection is like a shadow, that maps our 3 dimensional\
  \ figure to a 2 dimensional plane. \nHere, we are viewing the \"shadow\" when looking\
  \ at the cubes from the top, the front, and the side.\nReturn the total area of\
  \ all three projections.\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
  \n\n\n\n\n\n\n\n\n\n\n\n\nExample 1:\nInput: [[2]]\nOutput: 5\n\n\nExample 2:\n\
  Input: [[1,2],[3,4]]\nOutput: 17\nExplanation: \nHere are the three projections\
  \ (\"shadows\") of the shape made with each axis-aligned plane.\n\n\n\nExample 3:\n\
  Input: [[1,0],[0,2]]\nOutput: 8\n\n\nExample 4:\nInput: [[1,1,1],[1,0,1],[1,1,1]]\n\
  Output: 14\n\n\nExample 5:\nInput: [[2,2,2],[2,1,2],[2,2,2]]\nOutput: 21\n\n \n\n\
  \n\nNote:\n\n1 <= grid.length = grid[0].length <= 50\n0 <= grid[i][j] <= 50"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def projectionArea (grid : List (List Nat)) : Nat :=\nsorry\n"
"vc-theorems": "theorem projection_area_nonnegative (grid : List (List Nat)) :\n \
  \ projectionArea grid ≥ 0 := sorry\n\n\ntheorem projection_area_sum_of_views {n\
  \ : Nat} (grid : List (List Nat)) \n  (h1 : grid.length = n) \n  (h2 : ∀ row ∈ grid,\
  \ row.length = n) :\n  projectionArea grid = \n    -- Top view (number of non-zero\
  \ cells)\n    (List.foldl (λ acc row => \n      acc + (List.foldl (λ acc' x => acc'\
  \ + if x > 0 then 1 else 0) 0 row)) 0 grid)\n    + \n    -- Front view (max of each\
  \ column)\n    (List.range n).foldl (λ acc j =>\n      acc + (List.foldl (λ acc'\
  \ row => Nat.max acc' (row.get! j)) 0 grid)) 0\n    +\n    -- Side view (max of\
  \ each row)\n    (List.foldl (λ acc row => acc + (List.foldl Nat.max 0 row)) 0 grid)\
  \ := sorry\n\n\ntheorem projection_area_single_cube (h : Nat) :\n  projectionArea\
  \ [[h]] = 2 * h + 1 := sorry\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval projection_area\
  \ [[2]]\n\n/--\ninfo: 17\n-/\n#guard_msgs in\n#eval projection_area [[1, 2], [3,\
  \ 4]]\n\n/--\ninfo: 8\n-/\n#guard_msgs in\n#eval projection_area [[1, 0], [0, 2]]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
