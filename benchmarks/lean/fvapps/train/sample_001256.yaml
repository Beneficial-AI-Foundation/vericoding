"vc-description": "Sunita has lots of tasks pending and she has no time to complete.\
  \  She needs your help and wants you complete the task.\nYou are given a list of\
  \ integers and two values $N$ and $K$ $-$ the size of array of integers and the\
  \ numbers of partitions to be made respectively.\nYou have to partition the list\
  \ of integers without changing the order of elements ,into exactly $K$ parts. \n\
  Calculate Greatest Common Divisor of all $K$ partition and sum up the gcd values\
  \ for each partition.\nMaximize the sum obtained. \nCan you help Sunita ? \n\n-----Input:-----\n\
  - First line will contain $T$, number of test cases. Then the test cases follow.\
  \ \n- Each test case contains of a single line of input, two integers $N, K$. \n\
  - Next line contains $N$ integers $-$ the list of integers.\n\n-----Output:-----\n\
  For each test case, output in a single line integer $-$ the maximal result.\n\n\
  -----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq N, K \\leq 250$\n- $1\
  \ \\leq K \\leq N$\n- $1 \\leq A[i] \\leq 1e5$\n\n-----Sample Input:-----\n1\n4\
  \ 2\n5 6 3 2\n\n-----Sample Output:-----\n6\n\n-----EXPLANATION:-----\n[5] [6 3\
  \ 2] is the best partition [5 + GCD(6,3,2)] = 6"
"vc-preamble": "import Imports.AllImports\n\ndef List.sum : List Nat → Nat \n  | []\
  \ => 0\n  | x :: xs => x + xs.sum\n\n\ndef gcd_multiple (nums : List Nat) : Nat\
  \ :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def max_gcd_partition_sum (n k : Nat) (arr : List Nat) : Nat :=\n\
  \  sorry\n"
"vc-theorems": "theorem gcd_multiple_divides (nums : List Nat) (h : nums ≠ []) :\n\
  \  let result := gcd_multiple nums\n  (∀ n ∈ nums, n % result = 0) ∧ result > 0\
  \ := by\n  sorry\n\n\ntheorem max_gcd_sum_basic_properties \n  (n k : Nat) (arr\
  \ : List Nat)\n  (h1 : arr.length ≥ n)\n  (h2 : k ≤ n) :\n  let result := max_gcd_partition_sum\
  \ n k arr \n  result ≥ 0 ∧ \n  result ≤ (arr.take n).sum := by\n  sorry\n\n\ntheorem\
  \ max_gcd_sum_k_one\n  (n : Nat) (arr : List Nat)\n  (h : arr.length ≥ n) :\n  max_gcd_partition_sum\
  \ n 1 arr = gcd_multiple (arr.take n) := by\n  sorry\n\n\ntheorem max_gcd_sum_k_eq_n\n\
  \  (n : Nat) (arr : List Nat)\n  (h : arr.length ≥ n) :\n  max_gcd_partition_sum\
  \ n n arr = (arr.take n).sum := by\n  sorry\n\n\ntheorem max_gcd_sum_identical_elements\n\
  \  (n k : Nat) \n  (h1 : n ≥ 2)\n  (h2 : k = n/2) :\n  let arr := List.replicate\
  \ n 10\n  max_gcd_partition_sum n k arr = 10 * k := by\n  sorry\n\n/--\ninfo: 6\n\
  -/\n#guard_msgs in\n#eval max_gcd_partition_sum 4 2 [5, 6, 3, 2]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
