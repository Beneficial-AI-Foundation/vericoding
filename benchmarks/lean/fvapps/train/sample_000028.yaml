"vc-description": "Acacius is studying strings theory. Today he came with the following\
  \ problem.\n\nYou are given a string $s$ of length $n$ consisting of lowercase English\
  \ letters and question marks. It is possible to replace question marks with lowercase\
  \ English letters in such a way that a string \"abacaba\" occurs as a substring\
  \ in a resulting string exactly once?\n\nEach question mark should be replaced with\
  \ exactly one lowercase English letter. For example, string \"a?b?c\" can be transformed\
  \ into strings \"aabbc\" and \"azbzc\", but can't be transformed into strings \"\
  aabc\", \"a?bbc\" and \"babbc\".\n\nOccurrence of a string $t$ of length $m$ in\
  \ the string $s$ of length $n$ as a substring is a index $i$ ($1 \\leq i \\leq n\
  \ - m + 1$) such that string $s[i..i+m-1]$ consisting of $m$ consecutive symbols\
  \ of $s$ starting from $i$-th equals to string $t$. For example string \"ababa\"\
  \ has two occurrences of a string \"aba\" as a substring with $i = 1$ and $i = 3$,\
  \ but there are no occurrences of a string \"aba\" in the string \"acba\" as a substring.\n\
  \nPlease help Acacius to check if it is possible to replace all question marks with\
  \ lowercase English letters in such a way that a string \"abacaba\" occurs as a\
  \ substring in a resulting string exactly once.\n\n\n-----Input-----\n\nFirst line\
  \ of input contains an integer $T$ ($1 \\leq T \\leq 5000$), number of test cases.\
  \ $T$ pairs of lines with test case descriptions follow.\n\nThe first line of a\
  \ test case description contains a single integer $n$ ($7 \\leq n \\leq 50$), length\
  \ of a string $s$.\n\nThe second line of a test case description contains string\
  \ $s$ of length $n$ consisting of lowercase English letters and question marks.\n\
  \n\n-----Output-----\n\nFor each test case output an answer for it.\n\nIn case if\
  \ there is no way to replace question marks in string $s$ with a lowercase English\
  \ letters in such a way that there is exactly one occurrence of a string \"abacaba\"\
  \ in the resulting string as a substring output \"No\".\n\nOtherwise output \"Yes\"\
  \ and in the next line output a resulting string consisting of $n$ lowercase English\
  \ letters. If there are multiple possible strings, output any.\n\nYou may print\
  \ every letter in \"Yes\" and \"No\" in any case you want (so, for example, the\
  \ strings yEs, yes, Yes, and YES will all be recognized as positive answer).\n\n\
  \n-----Example-----\nInput\n6\n7\nabacaba\n7\n???????\n11\naba?abacaba\n11\nabacaba?aba\n\
  15\nasdf???f???qwer\n11\nabacabacaba\n\nOutput\nYes\nabacaba\nYes\nabacaba\nYes\n\
  abadabacaba\nYes\nabacabadaba\nNo\nNo\n\n\n\n-----Note-----\n\nIn first example\
  \ there is exactly one occurrence of a string \"abacaba\" in the string \"abacaba\"\
  \ as a substring.\n\nIn second example seven question marks can be replaced with\
  \ any seven lowercase English letters and with \"abacaba\" in particular.\n\nIn\
  \ sixth example there are two occurrences of a string \"abacaba\" as a substring."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def check_abacaba_substring (s : String) : Nat := sorry\n\ndef\
  \ find_abacaba_substring (n : Nat) (s : String) : Bool × String := sorry\n"
"vc-theorems": "theorem check_abacaba_nonnegative (s : String) :\n  check_abacaba_substring\
  \ s ≥ 0 := sorry\n\n\ntheorem check_abacaba_count_correct (s : String) :\n  check_abacaba_substring\
  \ s = s.length := sorry  -- simplified as String.countSubstr not available\n\n\n\
  theorem find_abacaba_output_valid {n : Nat} {s : String} :\n  let (success, result)\
  \ := find_abacaba_substring n s\n  success →\n    result.length = n ∧ \n    ¬result.contains\
  \ '?' ∧\n    check_abacaba_substring result = 1 ∧\n    ∀ (i : String.Pos), s.get\
  \ i ≠ '?' → s.get i = result.get i := sorry\n\n\ntheorem find_abacaba_impossible\
  \ {n : Nat} {s : String} :\n  let (success, result) := find_abacaba_substring n\
  \ s\n  ¬success →\n    result = \"\" ∧\n    (∀ c ∈ ['a', 'b', 'c', 'z'], \n    \
  \  let test_s := s.replace \"?\" (String.mk [c])\n      check_abacaba_substring\
  \ test_s ≠ 1) := sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval check_abacaba_substring\
  \ result\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval check_abacaba_substring result\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
