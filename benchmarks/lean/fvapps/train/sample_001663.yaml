"vc-description": "To almost all of us solving sets of linear equations is quite obviously\
  \ the most exciting bit of linear algebra. Benny does not agree though and wants\
  \ to write a quick program to solve his homework problems for him. Unfortunately\
  \ Benny's lack of interest in linear algebra means he has no real clue on how to\
  \ go about this. Fortunately, you can help him!\n\nWrite a method ```solve``` that\
  \ accepts a list of linear equations that your method will have to solve. The output\
  \ should be a map (a `Map` object in JavaScript) with a value for each variable\
  \ in the equations. If the system does not have a unique solution (has infinitely\
  \ many solutions or is unsolvable), return ```null``` (`None` in python).\n\nFor\
  \ example :  \n  \n\"2x + 4y + 6z = 18\"  \n\"3y + 3z = 6\"  \n\"x + 2y = z - 3\"\
  \n  \nshould result in a map :  \n  \nx = 2  \ny = -1  \nz = 3  \n  \nPossible input\
  \ equations have the following rules:  \n-   Only the plus and minus operators are\
  \ used on both the left and right hand side of the equation.  \n-   Both sides of\
  \ the equation can have variables; One variable can appear in multiple terms, on\
  \ both sides.\n-   Variable names are strings of arbitrary length.  \n-   All coefficients\
  \ are integers and generally fall within the range of -150 to 150, with a few ranging\
  \ from -1000 to 1000. Free terms are integers in range -20000 to 20000.  \n-   Equations\
  \ do not necessarily have variables.  \n-   Equations have exactly one operator\
  \ (+ or -) between terms.  \n\n\nComparisons are performed with accuracy of `1e-6`.\n\
  \n**Note on numerical stability:**\n\nThere are many possible ways to solve a system\
  \ of linear equations. One group of such algorithms is based on reduction and elimination\
  \ methods. If you are going to use any of these, remember that such algorithms are\
  \ in general *numerically unstable*, i.e. division operations repeated over and\
  \ over introduce inaccuracies which accumulate from row to row. As a result it might\
  \ occur that some value which is expected to be zero is actually larger, for example,\
  \ `2.5e-10`. Such inaccuracies tend to be bigger in large equation systems, and\
  \ random tests check systems of up to 26 equations. If it happens that small tests\
  \ pass for you, and large tests fail, it probably means that you did not account\
  \ for inaccuracies correctly.\nAlso note that tests do not depend on any reference\
  \ solution, so the way how test cases are generated _is numrically stable_ - the\
  \ only source of inaccuracies is your solution, and you need to account for it.\n\
  \n```if:python\n___Note for python users:___\n\n`numpy` module has been disabled,\
  \ so that the task matches the one of the other languages. There is an anti-cheat\
  \ measure about that, so you won't be able to import some other modules too (either\
  \ way, you shouldn't need any module to solve this kata...)\n```"
"vc-preamble": "import Imports.AllImports\n\ndef Term := String\ndef Equation := String\n\
  \ndef Solution := List (String × Int)\n\ndef solve_equations : List Equation → Option\
  \ Solution\n  | _ => sorry\n\n\ndef equation_vars : Equation → List String \n  |\
  \ _ => sorry\n\n\ndef solution_vars : Solution → List String\n  | _ => sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def verify_solution (equations : List Equation) (solution : Option\
  \ Solution) : Bool :=\nsorry\n"
"vc-theorems": "theorem solution_variables_match_equations (equations : List Equation)\
  \ \n  (s : Solution)\n  (h : solve_equations equations = some s) :\n  ∀ v, (∃ eq\
  \ ∈ equations, v ∈ equation_vars eq) ↔ v ∈ solution_vars s :=\nsorry  \n\n\ntheorem\
  \ underdetermined_system_no_solution :\n  solve_equations [\"x + y = 1\"] = none\
  \ :=\nsorry\n\n\ntheorem solution_satisfies_equations (equations : List Equation)\n\
  \  (s : Solution)\n  (h : solve_equations equations = some s) :\n  verify_solution\
  \ equations (some s) = true :=\nsorry\n\n/--\ninfo: expected1\n-/\n#guard_msgs in\n\
  #eval solve_equations [\"2x + 4y + 6z = 18\", \"3y + 3z = 6\", \"x + 2y = z - 3\"\
  ]\n\n/--\ninfo: None\n-/\n#guard_msgs in\n#eval solve_equations [\"x + y = 2\",\
  \ \"x + y = 3\"]\n\n/--\ninfo: expected3\n-/\n#guard_msgs in\n#eval solve_equations\
  \ [\"x = 1\"]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
