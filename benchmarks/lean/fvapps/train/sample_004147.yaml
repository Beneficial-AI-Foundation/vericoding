"vc-description": "It's the fourth quater of the Super Bowl and your team is down\
  \ by 4 points. You're 10 yards away from the endzone, if your team doesn't score\
  \ a touchdown in the next four plays you lose. On a previous play, you were injured\
  \ and rushed to the hospital. Your hospital room has no internet, tv, or radio and\
  \ you don't know the results of the game. You look at your phone and see that on\
  \ your way to the hospital a text message came in from one of your teamates. It\
  \ contains an array of the last 4 plays in chronological order. In each play element\
  \ of the array you will receive the yardage of the play and the type of the play.\
  \ Have your function let you know if you won or not.\n\n# What you know:\n\n* Gaining\
  \ greater than 10 yds from where you started is a touchdown and you win.\n* Yardage\
  \ of each play will always be a positive number greater than 0.\n* There are only\
  \ four types of plays: \"run\", \"pass\", \"sack\", \"turnover\".\n* Type of plays\
  \ that will gain yardage are: \"run\", \"pass\".\n* Type of plays that will lose\
  \ yardage are: \"sack\".\n* Type of plays that will automatically lose the game\
  \ are: \"turnover\".\n* When a game ending play occurs the remaining (plays) arrays\
  \ will be empty.\n* If you win return true, if you lose return false.\n\n# Examples:\n\
  \n\n[[8, \"pass\"],[5, \"sack\"],[3, \"sack\"],[5, \"run\"]]\n`false`\n[[12, \"\
  pass\"],[],[],[]])\n`true`\n[[2, \"run\"],[5, \"pass\"],[3, \"sack\"],[8, \"pass\"\
  ]]\n`true`\n[[5, \"pass\"],[6, \"turnover\"],[],[]]\n`false`\n\nGood Luck!"
"vc-preamble": "import Imports.AllImports\n\ndef Play := Int × PlayType\ndef PlayList\
  \ := List Play\n\n\ndef turnover : PlayType := ⟨\"turnover\"⟩\ndef pass : PlayType\
  \ := ⟨\"pass\"⟩"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sack : PlayType := ⟨\"sack\"⟩\n\ndef did_we_win (plays : PlayList)\
  \ : Bool := \n  sorry\n"
"vc-theorems": "theorem did_we_win_properties (plays : PlayList) : \n  let filtered\
  \ := plays.filter (fun p => true)\n  let hasNoTurnovers := ¬(filtered.any (fun p\
  \ => p.2 == turnover))\n  let total := filtered.foldl (fun acc p => \n    acc +\
  \ (if p.2 == sack then -p.1 else p.1)) 0\n\n  did_we_win plays → (hasNoTurnovers\
  \ ∧ total > 10) ∧ \n  (¬(did_we_win plays) → (¬hasNoTurnovers ∨ total ≤ 10)) :=\n\
  \  sorry\n\n\ntheorem winning_plays (plays : PlayList) :\n  plays.all (fun p =>\
  \ p.1 ≥ 11 && p.2 == pass) ∧ plays.length > 0 →\n  did_we_win plays :=\n  sorry\n\
  \n\ntheorem losing_plays_yardage (plays : PlayList) :\n  plays.all (fun p => p.1\
  \ ≤ 10 && p.2 == pass) ∧ plays.length > 0 →\n  ¬(did_we_win plays) :=\n  sorry\n\
  \n\ntheorem losing_plays_turnover (plays : PlayList) :\n  plays.all (fun p => p.2\
  \ == turnover) ∧ plays.length > 0 →\n  ¬(did_we_win plays) :=\n  sorry\n\n/--\n\
  info: False\n-/\n#guard_msgs in\n#eval did_we_win [[8, \"pass\"], [5, \"sack\"],\
  \ [3, \"sack\"], [5, \"run\"]]\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval did_we_win\
  \ [[12, \"pass\"], [], [], []]\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval did_we_win\
  \ [[5, \"pass\"], [6, \"turnover\"], [], []]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
