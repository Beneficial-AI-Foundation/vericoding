"vc-description": "Sometimes Sergey visits fast food restaurants. Today he is going\
  \ to visit the one called PizzaKing.\nSergey wants to buy N meals, which he had\
  \ enumerated by integers from 1 to N. He knows that the meal i costs Ci rubles.\
  \ He also knows that there are M meal sets in the restaurant.\nThe meal set is basically\
  \ a set of meals, where you pay Pj burles and get Qj meals - Aj, 1, Aj, 2, ...,\
  \ Aj, Qj.\nSergey has noticed that sometimes he can save money by buying the meals\
  \ in the meal sets instead of buying each one separately. And now he is curious\
  \ about what is the smallest amount of rubles he needs to spend to have at least\
  \ one portion of each of the meals.\n\n-----Input-----\nThe first line of the input\
  \ contains an integer T denoting the number of test cases. The description of T\
  \ test cases follows.\nThe first line of each test case contains a pair of integer\
  \ numbers N and M denoting the number of meals and the number of the meal sets.\n\
  The second line contains N space-separated integers C1, C2, ..., CN denoting the\
  \ costs of the meals, bought separately.\nEach of the following M lines starts with\
  \ a pair of integer numbers Pi and Qi, denoting the cost of the meal set and the\
  \ number of meals in it, followed with the integer numbers Ai, 1 Ai, 2, ..., Ai,\
  \ Qi denoting the meal numbers.\n\n-----Output-----\nFor each test case, output\
  \ a single line containing the minimal total amount of money Sergey needs to spend\
  \ in order to have at least one portion of each meal.\n\n-----Constraints-----\n\
  - 1 ≤ Pi, Ci ≤ 106\n- 1 ≤ M ≤ min{2N, 2 × 100000}\n- No meal appears in the set\
  \ twice or more times.\n- Subtask 1 (16 points): 1 ≤ T ≤ 103, 1 ≤ N ≤ 8\n- Subtask\
  \ 2 (23 points): For each test file, either 1 ≤ T ≤ 10, 1 ≤ N ≤ 12 or the constraints\
  \ for Subtask 1 are held.\n- Subtask 3 (61 points): For each test file, either T\
  \ = 1, 1 ≤ N ≤ 18 or the constraints for Subtask 1 or 2 are held.\n\n-----Example-----\n\
  Input:1\n3 3\n3 5 6\n11 3 1 2 3\n5 2 1 2\n5 2 1 3\n\nOutput:10\n\n-----Explanation-----\n\
  Example case 1. If Sergey buys all the meals separately, it would cost him 3 + 5\
  \ + 6 = 14 rubles. He can buy all of them at once by buying the first meal set,\
  \ which costs for 11 rubles, but the optimal strategy would be either to buy the\
  \ second and the third meal set, thus, paying 5 + 5 = 10 rubles, or to buy the third\
  \ meal set and the second meal separately by paying the same amount of 10 rubles."
"vc-preamble": "import Imports.AllImports\n\ndef List.sum : List Nat → Nat \n  | []\
  \ => 0\n  | x::xs => x + List.sum xs\n\n\ndef min_in_list : List Nat → Nat → Nat\n\
  \  | [], default => default\n  | [x], _ => x\n  | x::xs, default => min x (min_in_list\
  \ xs default)\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_meal_sets (n m : Nat) (costs : List Nat) (meal_sets :\
  \ List (List Nat)) : Nat :=\nsorry\n"
"vc-theorems": "theorem solve_meal_sets_basic_properties \n  (n : Nat) (costs : List\
  \ Nat) (meal_costs : List Nat) :\n  n > 0 → n ≤ 5 →\n  ∀ c ∈ costs, c > 0 ∧ c ≤\
  \ 100 →\n  ∀ mc ∈ meal_costs, mc > 0 ∧ mc ≤ 200 →\n  costs.length = n →\n  let m\
  \ := meal_costs.length\n  let meal_sets := sorry -- construction of meal sets\n\
  \  let result := solve_meal_sets n m costs meal_sets \n  result > 0 ∧ result ≤ List.sum\
  \ costs := by\n  sorry\n\n\ntheorem solve_meal_sets_bounded_by_min\n  (n : Nat)\
  \ (costs : List Nat) (meal_costs : List Nat) :\n  n > 0 → n ≤ 5 →\n  ∀ c ∈ costs,\
  \ c > 0 ∧ c ≤ 100 →\n  ∀ mc ∈ meal_costs, mc > 0 ∧ mc ≤ 200 →\n  costs.length =\
  \ n →\n  let m := meal_costs.length\n  let meal_sets := sorry -- construction of\
  \ meal sets  \n  let result := solve_meal_sets n m costs meal_sets\n  result ≤ min\
  \ (List.sum costs) (min_in_list meal_costs (List.sum costs)) := by\n  sorry\n\n\n\
  theorem solve_meal_sets_empty_meals\n  (costs : List Nat) :\n  costs = [4, 5] →\n\
  \  solve_meal_sets 2 0 costs [] = 9 := by\n  sorry\n\n\ntheorem solve_meal_sets_single_optimal_meal\n\
  \  (costs : List Nat) (meal_sets : List (List Nat)) :\n  costs = [10] →\n  meal_sets\
  \ = [[5, 1, 1]] →\n  solve_meal_sets 1 1 costs meal_sets = 5 := by\n  sorry\n\n\n\
  theorem solve_meal_sets_two_items_optimal_meal\n  (costs : List Nat) (meal_sets\
  \ : List (List Nat)) :\n  costs = [10, 10] →\n  meal_sets = [[15, 2, 1, 2]] →\n\
  \  solve_meal_sets 2 1 costs meal_sets = 15 := by\n  sorry\n\n/--\ninfo: 10\n-/\n\
  #guard_msgs in\n#eval solve_meal_sets 3 3 [3, 5, 6] [[11, 3, 1, 2, 3], [5, 2, 1,\
  \ 2], [5, 2, 1, 3]]\n\n/--\ninfo: 7\n-/\n#guard_msgs in\n#eval solve_meal_sets 2\
  \ 1 [4, 5] [[7, 2, 1, 2]]\n\n/--\ninfo: 8\n-/\n#guard_msgs in\n#eval solve_meal_sets\
  \ 1 1 [10] [[8, 1, 1]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
