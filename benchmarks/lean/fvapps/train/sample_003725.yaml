"vc-description": "# Task\n\nJohn and Alice have an appointment today. \n\nIn the\
  \ morning, John starts from (`0,0`) and goes to the place (`a,b`) where he is dating.\
  \ Unfortunately, John had no sense of direction at all, so he moved 1 step in a\
  \ random direction(up, down, left or right) each time. For example, if John at (x,y),\
  \ next step he may move to `(x+1,y), (x-1,y),(x,y+1) or (x,y-1)`. \n\nObviously,\
  \ when he arrived at the destination, it was already too late and Alice had already\
  \ left. It's a sadly story :(\n\nThe second day, Alice asked John why he didn't\
  \ go to the dating place. John said he took `s` steps to his date yesterday.\n\n\
  Alice wants to know whether John is lying. Please help Alice to judge.\n\nGiven\
  \ two coordinates `a, b` and the step `s`, return `true` if John tells the truth,\
  \ `false` otherwise.\n\n# Input/Output\n\n\n`[input]` integer `a`\n\nThe x-coordinates\
  \ of the dating site.\n\n`-10^7 <= a <= 10^7`\n\n`[input]` integer `b`\n\nThe y-coordinates\
  \ of the dating site.\n\n`-10^7 <= b <= 10^7`\n\n`[input]` integer `s`\n\nA positive\
  \ integer.  The steps John using.\n\n`0 < s <= 10^9`\n\n`[output]` a boolean value\n\
  \nreturn `true` if John tells the truth, `false` otherwise.\n\n# Example\n\nFor\
  \ `a = 3, b = 3, s = 6`, the output should be `true`.\n\nA possible path is: \n\n\
  `(0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3)`\n\nFor `a = 3, b =\
  \ 3, s = 8`, the output should be `true`.\n\nA possible path is: \n\n`(0,0) -> (0,1)\
  \ -> (1,1) -> (1,2) -> (2,2) -> (2,1) -> (3,1) -> (3,2) -> (3,3)`\n\nFor `a = 4,\
  \ b = 5, s = 10`, the output should be `false`.\n\nJohn can't reach coordinates\
  \ (a, b) using 10 steps, he's lying ;-)"
"vc-preamble": "import Imports.AllImports\n\ndef abs (x : Int) : Int := \n  if x ≥\
  \ 0 then x else -x\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_john_lying (x y steps : Int) : Bool := sorry\n\ntheorem\
  \ symmetry_properties {x y steps : Int} (h : steps ≥ 0) :\n  is_john_lying x y steps\
  \ = is_john_lying (-x) y steps ∧\n  is_john_lying x y steps = is_john_lying x (-y)\
  \ steps ∧\n  is_john_lying x y steps = is_john_lying y x steps := sorry \n"
"vc-theorems": "theorem min_steps_required {x y : Int} :\n  ¬(is_john_lying x y (abs\
  \ x + abs y - 1)) := sorry\n\n\ntheorem parity_constraint {x y extra_steps : Int}\
  \ (h : extra_steps ≥ 0) :\n  let min_steps := abs x + abs y\n  let steps := min_steps\
  \ + extra_steps\n  if extra_steps % 2 = 0 then \n    is_john_lying x y steps = (steps\
  \ ≥ min_steps)\n  else\n    ¬(is_john_lying x y steps) := sorry\n\n/--\ninfo: True\n\
  -/\n#guard_msgs in\n#eval is_john_lying 3 3 6\n\n/--\ninfo: False\n-/\n#guard_msgs\
  \ in\n#eval is_john_lying 4 5 10\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval is_john_lying\
  \ -5 -5 10\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
