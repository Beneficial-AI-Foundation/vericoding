"vc-description": "There is a girl named ''Akansha''. She is very fond of eating chocolates\
  \ but she has a weak immune system due to which she gets cold after eating chocolate\
  \ during morning, evening and night and can only eat at most $x$ number of chocolate\
  \ each afternoon. A friend of hers gifted her some $n$ number of chocolates that\
  \ she doesn't want to share with anyone. Those chocolate have to be finished before\
  \ they expire. (no. of days in which they are going to expire from the day she has\
  \ been gifted the chocolate is given for each chocolate)   $Note:$ Chocolate cannot\
  \ be consumed on the day it expires.\n\nHelp Akansha to know if it is possible for\
  \ her to finish all the chocolates before they expire or not.\n\n-----Input:-----\n\
  - First line will contain $T$, number of test cases. Then the test cases follow.\
  \ \n- First line contains $n$,the number of chocolates gifted to her\n- Second line\
  \ contains $x$,the number of chocolates she can eat each afternoon\n- Third line\
  \ contains $n$ space separated integers $A1,A2...An$,denoting the expiry of each\
  \ of the $n$ chocolates\n\n-----Output:-----\nFor each testcase, print $Possible$,\
  \ if she can complete all the chocolates gifted to her. Otherwise, print $Impossible$,\
  \ if she can not finish all the chocolates.\n\n-----Constraints-----\n- $1 \\leq\
  \ T \\leq 100$\n- $1 \\leq n \\leq 1500$\n- $1 \\leq x \\leq 1500$\n- $1 \\leq Ai\
  \ \\leq 1500$\n\n-----Subtasks-----\n- 100 points : $Original Constraints$\n\n-----Sample\
  \ Input:-----\n3\n\n3\n\n5\n\n4 1 2\n\n5\n\n2\n\n4 4 3 2 2\n\n5\n\n1\n\n4 2 3 1\
  \ 1   \n\n-----Sample Output:-----\nImpossible\n\nPossible\n\nImpossible   \n\n\
  -----EXPLANATION:-----\n- \nExample case 1\n\n1st and 3rd chocolate on the 1st afternoon\
  \ as she can consume at most 5. one chocolate will be wasted.\n$Note:$ she cannot\
  \ eat the 2nd chocolate because chocolates cannot be consumed on the day of expiry.\n\
  - \nExample case 2\n\n4th and 5th chocolate on 1st afternoon, 3rd and 1st chocolate\
  \ on 2nd afternoon. And 2nd chocolate on the 3rd afternoon.\nIt will take a total\
  \ of 3 days to finish the chocolate.\n- \nExample case 3\n\nShe cannot eat 4th and\
  \ 5th chocolate as they will expire on the very 1st day, she can eat 2nd chocolate\
  \ on 1st afternoon, then 3rd chocolate on 2nd afternoon, then 1st chocolate on 3rd\
  \ afternoon, and 2 chocolates 4th and 5th will expire."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_chocolates (n : Nat) (x : Nat) (arr : List Nat) : String\
  \ := sorry\n\ntheorem solve_chocolates_binary_output (n x : Nat) (arr : List Nat)\n\
  \  (h1 : n > 0) (h2 : x > 0) (h3 : arr.length > 0) :\n  solve_chocolates n x arr\
  \ = \"Possible\" ∨ solve_chocolates n x arr = \"Impossible\" := sorry\n"
"vc-theorems": "theorem solve_chocolates_x_eq_1 (n : Nat) (arr : List Nat)\n  (h1\
  \ : n > 0) (h2 : arr.length > 0) :\n  solve_chocolates n 1 arr = \"Possible\" ↔\
  \ \n  (∀ (i : Nat) (h: i < arr.length), arr[i]'h > 1) := sorry\n\n\ntheorem solve_chocolates_single_possible\
  \ (n : Nat) \n  (h : n > 0) :\n  solve_chocolates n n [n + 1] = \"Possible\" :=\
  \ sorry\n\n\ntheorem solve_chocolates_all_ones_impossible (n x : Nat)\n  (h1 : n\
  \ > 0) (h2 : x > 0) :\n  solve_chocolates n x (List.replicate n 1) = \"Impossible\"\
  \ := sorry\n\n\ntheorem solve_chocolates_permutation_invariant (n x : Nat) (arr₁\
  \ arr₂ : List Nat)\n  (h1 : n > 0) (h2 : x > 0) (h3 : arr₁.length > 0) \n  (h4 :\
  \ List.Perm arr₁ arr₂) :\n  solve_chocolates n x arr₁ = solve_chocolates n x arr₂\
  \ := sorry\n\n/--\ninfo: 'Impossible'\n-/\n#guard_msgs in\n#eval solve_chocolates\
  \ 3 5 [4, 1, 2]\n\n/--\ninfo: 'Possible'\n-/\n#guard_msgs in\n#eval solve_chocolates\
  \ 5 2 [4, 4, 3, 2, 2]\n\n/--\ninfo: 'Impossible'\n-/\n#guard_msgs in\n#eval solve_chocolates\
  \ 5 1 [4, 2, 3, 1, 1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
