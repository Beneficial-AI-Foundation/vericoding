"vc-description": "We have two types of tiles: a 2x1 domino shape, and an \"L\" tromino\
  \ shape. These shapes may be rotated.\n\n\nXX  <- domino\n\nXX  <- \"L\" tromino\n\
  X\n\n\nGiven N, how many ways are there to tile a 2 x N board? Return your answer\
  \ modulo 10^9 + 7.\n\n(In a tiling, every square must be covered by a tile. Two\
  \ tilings are different if and only if there are two 4-directionally adjacent cells\
  \ on the board such that exactly one of the tilings has both squares occupied by\
  \ a tile.)\n\n\n\nExample:\nInput: 3\nOutput: 5\nExplanation: \nThe five different\
  \ ways are listed below, different letters indicates different tiles:\nXYZ XXZ XYY\
  \ XXY XYY\nXYZ YYZ XZZ XYY XXY\n\nNote:\n\n\n       N  will be in range [1, 1000]."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def num_tilings (n : Int) : Int := sorry\n\n\n\ntheorem num_tilings_base_cases\
  \ : \n  num_tilings 1 = 1 ∧ num_tilings 2 = 2 := sorry\n\n\n"
"vc-theorems": "theorem num_tilings_small_sequence :\n  num_tilings 1 = 1 ∧\n  num_tilings\
  \ 2 = 2 ∧\n  num_tilings 3 = 5 ∧\n  num_tilings 4 = 11 := sorry\n\n/--\ninfo: 5\n\
  -/\n#guard_msgs in\n#eval num_tilings 3\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval\
  \ num_tilings 1\n\n/--\ninfo: 11\n-/\n#guard_msgs in\n#eval num_tilings 4\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
