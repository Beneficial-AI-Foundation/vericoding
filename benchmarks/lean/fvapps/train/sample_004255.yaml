"vc-description": "You are given a list/array which contains only integers (positive\
  \ and negative). Your job is to sum only the numbers that are the same and consecutive.\
  \ The result should be one list.\n\nExtra credit if you solve it in one line. You\
  \ can assume there is never an empty list/array and there will always be an integer.\
  \ \n\nSame meaning: 1 == 1\n\n1 != -1\n\n#Examples:\n\n```\n[1,4,4,4,0,4,3,3,1]\
  \ # should return [1,12,0,4,6,1]\n\n\"\"\"So as you can see sum of consecutives\
  \ 1 is 1 \nsum of 3 consecutives 4 is 12 \nsum of 0... and sum of 2 \nconsecutives\
  \ 3 is 6 ...\"\"\"\n\n[1,1,7,7,3] # should return [2,14,3]\n[-5,-5,7,7,12,0] # should\
  \ return [-10,14,12,0]\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sum_consecutives (xs : List Int) : List Int := sorry\n\ntheorem\
  \ sum_consecutives_length \n  (xs : List Int) \n  (h : xs ≠ []) : \n  List.length\
  \ (sum_consecutives xs) ≤ List.length xs :=\nsorry\n"
"vc-theorems": "theorem sum_consecutives_preserves_elements\n  (xs : List Int)\n \
  \ (h : xs ≠ []) :\n  List.foldl (· + ·) 0 (sum_consecutives xs) = List.foldl (·\
  \ + ·) 0 xs :=\nsorry\n\n\ntheorem single_element_unchanged \n  (xs : List Int)\n\
  \  (h : List.length xs = 1) :\n  sum_consecutives xs = xs :=\nsorry\n\n\ntheorem\
  \ identical_elements\n  (n : Nat)\n  (h : n > 0)\n  (xs : List Int)\n  (h2 : xs.length\
  \ = n)\n  (h3 : ∀ x ∈ xs, x = 0) :\n  (sum_consecutives xs).length = 1 ∧ \n  (sum_consecutives\
  \ xs).head! = List.foldl (· + ·) 0 xs :=\nsorry\n\n\ntheorem alternating_elements_preserve_length\n\
  \  (xs : List Int)\n  (h : xs.length ≥ 2)\n  (h2 : ∀ (i : Nat), i + 1 < xs.length\
  \ → \n        xs.get! i ≠ xs.get! (i + 1)) :\n  (sum_consecutives xs).length = xs.length\
  \ :=\nsorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
