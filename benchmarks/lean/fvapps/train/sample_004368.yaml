"vc-description": "Math hasn't always been your best subject, and these programming\
  \ symbols always trip you up!\n\nI mean, does `**` mean *\"Times, Times\"* or *\"\
  To the power of\"*?\n\nLuckily, you can create the function `expression_out()` to\
  \ write out the expressions for you!\n\nThe operators you'll need to use are:\n\n\
  ```python\n{ '+':   'Plus ',\n  '-':   'Minus ',\n  '*':   'Times ',\n  '/':   'Divided\
  \ By ',  \n  '**':  'To The Power Of ',\n  '=':   'Equals ',\n  '!=':  'Does Not\
  \ Equal ' }\n```\n\nThese values will be stored in the preloaded dictionary `OPERATORS`\
  \ just as shown above.\n\nBut keep in mind: INVALID operators will also be tested,\
  \ to which you should return `\"That's not an operator!\"`\n\nAnd all of the numbers\
  \ will be `1` to`10`!\nIsn't that nice!\n\nHere's a few examples to clarify:\n\n\
  ```python\nexpression_out(\"4 ** 9\") == \"Four To The Power Of Nine\"\nexpression_out(\"\
  10 - 5\") == \"Ten Minus Five\"\nexpression_out(\"2 = 2\")  == \"Two Equals Two\"\
  \n```\n\nGood luck!"
"vc-preamble": "import Imports.AllImports\n\ndef expression_out (expr : String) :\
  \ String := sorry\n\ndef VALID_OPERATORS : List String := [\"+\", \"-\", \"*\",\
  \ \"/\", \"**\", \"=\", \"!=\"]"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def VALID_NUMBERS : List String := [\"1\", \"2\", \"3\", \"4\"\
  , \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]\n\ntheorem valid_expressions_return_valid_string\
  \ {expr : String} \n  (h1 : expr.splitOn \" \" = [num1, op, num2])\n  (h2 : num1\
  \ ∈ VALID_NUMBERS)\n  (h3 : op ∈ VALID_OPERATORS) \n  (h4 : num2 ∈ VALID_NUMBERS)\
  \ :\n  ∃ result : String, \n    expression_out expr = result ∧ \n    result ≠ \"\
  That's not an operator!\" := sorry\n"
"vc-theorems": "theorem invalid_expressions_return_error_message {expr : String}\n\
  \  (h : ¬(∃ num1 op num2, expr.splitOn \" \" = [num1, op, num2] ∧ \n           \
  \              num1 ∈ VALID_NUMBERS ∧\n                         op ∈ VALID_OPERATORS\
  \ ∧\n                         num2 ∈ VALID_NUMBERS)) :\n  expression_out expr =\
  \ \"That's not an operator!\" := sorry\n\n\ntheorem output_format {expr : String}\
  \ \n  (h : expr = \"1 + 2\") :\n  let result := expression_out expr\n  ∀ word ∈\
  \ result.splitOn \" \",\n    word.front.isUpper = true ∧\n    ¬result.back = ' '\
  \ := sorry\n\n/--\ninfo: 'One Plus Three'\n-/\n#guard_msgs in\n#eval expression_out\
  \ \"1 + 3\"\n\n/--\ninfo: 'Six To The Power Of Nine'\n-/\n#guard_msgs in\n#eval\
  \ expression_out \"6 ** 9\"\n\n/--\ninfo: 'Eight Does Not Equal Five'\n-/\n#guard_msgs\
  \ in\n#eval expression_out \"8 != 5\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
