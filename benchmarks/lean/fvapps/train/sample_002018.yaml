"vc-description": "10^{10^{10}} participants, including Takahashi, competed in two\
  \ programming contests.\nIn each contest, all participants had distinct ranks from\
  \ first through 10^{10^{10}}-th.\nThe score of a participant is the product of his/her\
  \ ranks in the two contests.\nProcess the following Q queries:\n - In the i-th query,\
  \ you are given two positive integers A_i and B_i. Assuming that Takahashi was ranked\
  \ A_i-th in the first contest and B_i-th in the second contest, find the maximum\
  \ possible number of participants whose scores are smaller than Takahashi's.\n\n\
  -----Constraints-----\n - 1 \\leq Q \\leq 100\n - 1\\leq A_i,B_i\\leq 10^9(1\\leq\
  \ i\\leq Q)\n - All values in input are integers.\n\n-----Input-----\nInput is given\
  \ from Standard Input in the following format:\nQ\nA_1 B_1\n:\nA_Q B_Q\n\n-----Output-----\n\
  For each query, print the maximum possible number of participants whose scores are\
  \ smaller than Takahashi's.\n\n-----Sample Input-----\n8\n1 4\n10 5\n3 3\n4 11\n\
  8 9\n22 40\n8 36\n314159265 358979323\n\n-----Sample Output-----\n1\n12\n4\n11\n\
  14\n57\n31\n671644785\n\nLet us denote a participant who was ranked x-th in the\
  \ first contest and y-th in the second contest as (x,y).\nIn the first query, (2,1)\
  \ is a possible candidate of a participant whose score is smaller than Takahashi's.\
  \ There are never two or more participants whose scores are smaller than Takahashi's,\
  \ so we should print 1."
"vc-preamble": "import Imports.AllImports\n\ndef solve (points : List (Nat × Nat))\
  \ : List Nat := sorry\n\ntheorem solve_output_length {points : List (Nat × Nat)}\
  \ :\n  points.length = (solve points).length := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sqrt (n : Nat) : Nat := sorry\n\ntheorem solve_output_bound\
  \ {points : List (Nat × Nat)} (i : Fin points.length) :\n  let (a, b) := points.get\
  \ i\n  let sqrt_ab := sqrt (a * b) \n  ∃ j : Fin (solve points).length, (solve points).get\
  \ j ≤ 2 * sqrt_ab := sorry\n"
"vc-theorems": "theorem solve_output_nonneg {points : List (Nat × Nat)} (i : Fin (solve\
  \ points).length) :\n  0 ≤ (solve points).get i := sorry\n\n\ntheorem solve_one_input\
  \ :\n  solve [(1, 1)] = [0] := sorry\n\n/--\ninfo: [1]\n-/\n#guard_msgs in\n#eval\
  \ solve [(1, 4)]\n\n/--\ninfo: [12, 4]\n-/\n#guard_msgs in\n#eval solve [(10, 5),\
  \ (3, 3)]\n\n/--\ninfo: [0, 0, 1, 1, 2]\n-/\n#guard_msgs in\n#eval solve [(1, 1),\
  \ (1, 2), (1, 3), (1, 4), (1, 5)]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
