"vc-description": "You are given a sequence of n integers a_1, a_2, ..., a_{n}. \n\
  \nDetermine a real number x such that the weakness of the sequence a_1 - x, a_2\
  \ - x, ..., a_{n} - x is as small as possible.\n\nThe weakness of a sequence is\
  \ defined as the maximum value of the poorness over all segments (contiguous subsequences)\
  \ of a sequence.\n\nThe poorness of a segment is defined as the absolute value of\
  \ sum of the elements of segment.\n\n\n-----Input-----\n\nThe first line contains\
  \ one integer n (1 ≤ n ≤ 200 000), the length of a sequence.\n\nThe second line\
  \ contains n integers a_1, a_2, ..., a_{n} (|a_{i}| ≤ 10 000).\n\n\n-----Output-----\n\
  \nOutput a real number denoting the minimum possible weakness of a_1 - x, a_2 -\
  \ x, ..., a_{n} - x. Your answer will be considered correct if its relative or absolute\
  \ error doesn't exceed 10^{ - 6}.\n\n\n-----Examples-----\nInput\n3\n1 2 3\n\nOutput\n\
  1.000000000000000\n\nInput\n4\n1 2 3 4\n\nOutput\n2.000000000000000\n\nInput\n10\n\
  1 10 2 9 3 8 4 7 5 6\n\nOutput\n4.500000000000000\n\n\n\n-----Note-----\n\nFor the\
  \ first case, the optimal value of x is 2 so the sequence becomes  - 1, 0, 1 and\
  \ the max poorness occurs at the segment \"-1\" or segment \"1\". The poorness value\
  \ (answer) equals to 1 in this case. \n\nFor the second sample the optimal value\
  \ of x is 2.5 so the sequence becomes  - 1.5,  - 0.5, 0.5, 1.5 and the max poorness\
  \ occurs on segment \"-1.5 -0.5\" or \"0.5 1.5\". The poorness value (answer) equals\
  \ to 2 in this case."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def findMinWeakness (sequence : List Int) : Int :=\n  sorry\n\n\
  -- Non-negative property"
"vc-theorems": "theorem find_min_weakness_nonneg (sequence : List Int) (h : sequence.length\
  \ ≥ 2) : \n  findMinWeakness sequence ≥ 0 := sorry\n\n-- Scaling property \n\ntheorem\
  \ find_min_weakness_scaling (sequence : List Int) (h : sequence.length ≥ 2) :\n\
  \  findMinWeakness (sequence.map (· * 2)) = 2 * findMinWeakness sequence := sorry\n\
  \n-- Symmetry under reversal\n\ntheorem find_min_weakness_reverse_invariant (sequence\
  \ : List Int) (h : sequence.length ≥ 2) :\n  findMinWeakness sequence = findMinWeakness\
  \ sequence.reverse := sorry\n\n-- Invariance under constant shift\n\ntheorem find_min_weakness_shift_invariant\
  \ (sequence : List Int) (offset : Int) \n  (h : sequence.length ≥ 2) :\n  findMinWeakness\
  \ sequence = findMinWeakness (sequence.map (· + offset)) := sorry"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded"
