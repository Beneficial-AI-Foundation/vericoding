"vc-description": "This is the easy version of the problem. The difference between\
  \ the versions is that the easy version has no swap operations. You can make hacks\
  \ only if all versions of the problem are solved.\n\nPikachu is a cute and friendly\
  \ pokémon living in the wild pikachu herd.\n\nBut it has become known recently that\
  \ infamous team R wanted to steal all these pokémon! Pokémon trainer Andrew decided\
  \ to help Pikachu to build a pokémon army to resist.\n\nFirst, Andrew counted all\
  \ the pokémon — there were exactly $n$ pikachu. The strength of the $i$-th pokémon\
  \ is equal to $a_i$, and all these numbers are distinct.\n\nAs an army, Andrew can\
  \ choose any non-empty subsequence of pokemons. In other words, Andrew chooses some\
  \ array $b$ from $k$ indices such that $1 \\le b_1 < b_2 < \\dots < b_k \\le n$,\
  \ and his army will consist of pokémons with forces $a_{b_1}, a_{b_2}, \\dots, a_{b_k}$.\n\
  \nThe strength of the army is equal to the alternating sum of elements of the subsequence;\
  \ that is, $a_{b_1} - a_{b_2} + a_{b_3} - a_{b_4} + \\dots$.\n\nAndrew is experimenting\
  \ with pokémon order. He performs $q$ operations. In $i$-th operation Andrew swaps\
  \ $l_i$-th and $r_i$-th pokémon.\n\nNote: $q=0$ in this version of the task.\n\n\
  Andrew wants to know the maximal stregth of the army he can achieve with the initial\
  \ pokémon placement. He also needs to know the maximal strength after each operation.\n\
  \nHelp Andrew and the pokémon, or team R will realize their tricky plan!\n\n\n-----Input-----\n\
  \nEach test contains multiple test cases.\n\nThe first line contains one positive\
  \ integer $t$ ($1 \\le t \\le 10^3$) denoting the number of test cases. Description\
  \ of the test cases follows.\n\nThe first line of each test case contains two integers\
  \ $n$ and $q$ ($1 \\le n \\le 3 \\cdot 10^5, q = 0$) denoting the number of pokémon\
  \ and number of operations respectively.\n\nThe second line contains $n$ distinct\
  \ positive integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$) denoting the strengths\
  \ of the pokémon.\n\n$i$-th of the last $q$ lines contains two positive integers\
  \ $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le n$) denoting the indices of pokémon\
  \ that were swapped in the $i$-th operation.\n\nIt is guaranteed that the sum of\
  \ $n$ over all test cases does not exceed $3 \\cdot 10^5$, and the sum of $q$ over\
  \ all test cases does not exceed $3 \\cdot 10^5$. \n\n\n-----Output-----\n\nFor\
  \ each test case, print $q+1$ integers: the maximal strength of army before the\
  \ swaps and after each swap.\n\n\n-----Example-----\nInput\n3\n3 0\n1 3 2\n2 0\n\
  1 2\n7 0\n1 2 5 4 3 6 7\n\nOutput\n3\n2\n9\n\n\n\n-----Note-----\n\nIn third test\
  \ case we can build an army in such way: [1 2 5 4 3 6 7], its strength will be $5−3+7=9$."
"vc-preamble": "import Imports.AllImports\n\ndef List.maximum (xs : List Nat) : Nat\
  \ :=\n  match xs with\n  | [] => 0\n  | (h::t) => t.foldl max h\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_max_army_strength (n : Nat) (arr : List Nat) : Nat :=\n\
  \  sorry\n"
"vc-theorems": "theorem result_at_least_max_element {arr : List Nat} (h : arr ≠ [])\
  \ : \n  find_max_army_strength arr.length arr ≥ List.maximum arr := by\n  sorry\n\
  \n\ntheorem non_negative_result {arr : List Nat} (h : arr ≠ []) :\n  find_max_army_strength\
  \ arr.length arr ≥ 0 := by\n  sorry\n\n\ntheorem single_element (x : Nat) :\n  find_max_army_strength\
  \ 1 [x] = x := by\n  sorry\n\n\ntheorem two_elements (x y : Nat) :\n  find_max_army_strength\
  \ 2 [x, y] ≥ max x y := by\n  sorry\n\n\ntheorem reverse_invariant {arr : List Nat}\
  \ (h : arr ≠ []) :\n  find_max_army_strength arr.length arr = \n  find_max_army_strength\
  \ arr.length arr.reverse := by\n  sorry\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval\
  \ find_max_army_strength 3 [1, 3, 2]\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval\
  \ find_max_army_strength 2 [1, 2]\n\n/--\ninfo: 9\n-/\n#guard_msgs in\n#eval find_max_army_strength\
  \ 7 [1, 2, 5, 4, 3, 6, 7]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
