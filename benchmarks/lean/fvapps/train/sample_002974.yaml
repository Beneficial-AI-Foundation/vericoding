"vc-description": "# Task\n A media access control address (MAC address) is a unique\
  \ identifier assigned to network interfaces for communications on the physical network\
  \ segment.\n\n The standard (IEEE 802) format for printing MAC-48 addresses in human-friendly\
  \ form is six groups of two hexadecimal digits (0 to 9 or A to F), separated by\
  \ hyphens (e.g. 01-23-45-67-89-AB).\n\n# Example\n\n For `inputString = \"00-1B-63-84-45-E6\"\
  `, the output should be `true`;\n \n For `inputString = \"Z1-1B-63-84-45-E6\"`,\
  \ the output should be `false`;\n \n For `inputString = \"not a MAC-48 address\"\
  `, the output should be `false`.\n \n# Input/Output\n\n - `[input]` string `inputString`\n\
  \ \n - `[output]` a boolean value\n\n    `true` if inputString corresponds to MAC-48\
  \ address naming rules, `false` otherwise."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_mac_48_address (s : String) : Bool := sorry\n\ndef is_valid_hex_digit\
  \ (c : Char) : Bool :=\n  (c.toNat ≥ 48 ∧ c.toNat ≤ 57) ∨ (c.toNat ≥ 65 ∧ c.toNat\
  \ ≤ 70)\n"
"vc-theorems": "theorem valid_mac_is_accepted (mac : String)\n  (h : ∃ h1 h2 h3 h4\
  \ h5 h6 h7 h8 h9 h10 h11 h12 : Char,\n    is_valid_hex_digit h1 ∧ is_valid_hex_digit\
  \ h2 ∧ is_valid_hex_digit h3 ∧ \n    is_valid_hex_digit h4 ∧ is_valid_hex_digit\
  \ h5 ∧ is_valid_hex_digit h6 ∧\n    is_valid_hex_digit h7 ∧ is_valid_hex_digit h8\
  \ ∧ is_valid_hex_digit h9 ∧\n    is_valid_hex_digit h10 ∧ is_valid_hex_digit h11\
  \ ∧ is_valid_hex_digit h12 ∧\n    mac = String.mk [h1, h2, '-', h3, h4, '-', h5,\
  \ h6, '-', \n                    h7, h8, '-', h9, h10, '-', h11, h12]) :\n  is_mac_48_address\
  \ mac := sorry\n\n\ntheorem invalid_format_rejected (s : String)\n  (h : ¬∃ h1 h2\
  \ h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 : Char,\n    is_valid_hex_digit h1 ∧ is_valid_hex_digit\
  \ h2 ∧ is_valid_hex_digit h3 ∧ \n    is_valid_hex_digit h4 ∧ is_valid_hex_digit\
  \ h5 ∧ is_valid_hex_digit h6 ∧\n    is_valid_hex_digit h7 ∧ is_valid_hex_digit h8\
  \ ∧ is_valid_hex_digit h9 ∧\n    is_valid_hex_digit h10 ∧ is_valid_hex_digit h11\
  \ ∧ is_valid_hex_digit h12 ∧\n    s.toUpper = String.mk [h1, h2, '-', h3, h4, '-',\
  \ h5, h6, '-', \n                          h7, h8, '-', h9, h10, '-', h11, h12])\
  \ :\n  ¬is_mac_48_address s := sorry\n\n\ntheorem case_insensitive (mac : String)\
  \ :\n  is_mac_48_address mac.toLower = is_mac_48_address mac.toUpper := sorry\n\n\
  \ntheorem invalid_separators (mac : String) (sep : Char)\n  (h1 : sep ≠ '-')\n \
  \ (h2 : ∃ h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 : Char,\n    is_valid_hex_digit\
  \ h1 ∧ is_valid_hex_digit h2 ∧ is_valid_hex_digit h3 ∧ \n    is_valid_hex_digit\
  \ h4 ∧ is_valid_hex_digit h5 ∧ is_valid_hex_digit h6 ∧\n    is_valid_hex_digit h7\
  \ ∧ is_valid_hex_digit h8 ∧ is_valid_hex_digit h9 ∧\n    is_valid_hex_digit h10\
  \ ∧ is_valid_hex_digit h11 ∧ is_valid_hex_digit h12 ∧\n    mac = String.mk [h1,\
  \ h2, '-', h3, h4, '-', h5, h6, '-', \n                    h7, h8, '-', h9, h10,\
  \ '-', h11, h12]) :\n  ¬is_mac_48_address (mac.replace \"-\" (String.mk [sep]))\
  \ := sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval is_mac_48_address \"00-1B-63-84-45-E6\"\
  \n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval is_mac_48_address \"Z1-1B-63-84-45-E6\"\
  \n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval is_mac_48_address \"not a MAC-48\
  \ address\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
