"vc-description": "Given a long number, return all the possible sum of two digits\
  \ of it.\n\nFor example, `12345`: all possible sum of two digits from that number\
  \ are:\n\n    [ 1 + 2, 1 + 3, 1 + 4, 1 + 5, 2 + 3, 2 + 4, 2 + 5, 3 + 4, 3 + 5, 4\
  \ + 5 ]\n\nTherefore the result must be:\n\n    [ 3, 4, 5, 6, 5, 6, 7, 7, 8, 9 ]"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def digits (n : Nat) : List Nat := sorry\n\ndef combinations (xs\
  \ : List α) (k : Nat) : List (List α) := sorry\n\n\n"
"vc-theorems": "theorem single_digit (n : Nat) (h : n ≤ 9) :\n  digits n = [] := sorry\n\
  \n\ntheorem two_digits (n : Nat) (h₁ : n ≥ 10) (h₂ : n ≤ 99) :\n  let result :=\
  \ digits n\n  result.length = 1 ∧ \n  result.head! = ((toString n).toList.map (fun\
  \ c => c.toNat - '0'.toNat)).foldl (·+·) 0 := sorry\n\n/--\ninfo: [6, 7, 11]\n-/\n\
  #guard_msgs in\n#eval digits 156\n\n/--\ninfo: [9, 13, 17, 14, 6, 10, 7, 14, 11,\
  \ 15]\n-/\n#guard_msgs in\n#eval digits 81596\n\n/--\ninfo: [11, 8, 5, 13, 10, 7]\n\
  -/\n#guard_msgs in\n#eval digits 3852\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
