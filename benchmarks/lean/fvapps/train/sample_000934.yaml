"vc-description": "The chef is trying to solve some pattern problems, Chef wants your\
  \ help to code it. Chef has one number K to form a new pattern. Help the chef to\
  \ code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$,\
  \ the number of test cases. Then the test cases follow. \n- Each test case contains\
  \ a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test\
  \ case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n\
  - $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n3\n2\n3\n4\n\n-----Sample Output:-----\n\
  21\n1\n123\n21\n1\n4321\n123\n21\n1\n\n-----EXPLANATION:-----\nNo need, else pattern\
  \ can be decode easily."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_pattern (k: Nat) : Array String := sorry\n\ntheorem solve_pattern_length\
  \ (k: Nat) (h: k > 0) (h2: k ≤ 100) :\n  (solve_pattern k).size = k := sorry\n\n\
  \n"
"vc-theorems": "theorem solve_pattern_all_digits (k: Nat) (h: k > 0) (h2: k ≤ 100)\
  \ (i: Nat) (h3: i < k) :\n  let result := solve_pattern k\n  result[i]!.all Char.isDigit\
  \ = true := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
