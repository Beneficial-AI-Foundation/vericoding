"vc-description": "Write a method that will search an array of strings for all strings\
  \ that contain another string, ignoring capitalization. Then return an array of\
  \ the found strings. \n\nThe method takes two parameters, the query string and the\
  \ array of strings to search, and returns an array. \n\nIf the string isn't contained\
  \ in any of the strings in the array, the method returns an array containing a single\
  \ string: \"Empty\" (or `Nothing` in Haskell, or \"None\" in Python and C)\n\n###\
  \ Examples\nIf the string to search for is \"me\", and the array to search is [\"\
  home\", \"milk\", \"Mercury\", \"fish\"], the method should return [\"home\", \"\
  Mercury\"]."
"vc-preamble": "import Imports.AllImports\n\ndef String.containsString (s₁ s₂ : String)\
  \ : Bool :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def word_search (query : String) (seq : List String) : List String\
  \ :=\n  sorry\n"
"vc-theorems": "theorem word_search_returns_nonempty (query : String) (seq : List\
  \ String) : \n  word_search query seq ≠ [] := sorry\n\n\ntheorem word_search_none_means_no_matches\
  \ (query : String) (seq : List String) :\n  word_search query seq = [\"None\"] →\n\
  \  ∀ x ∈ seq, ¬(String.containsString (String.toLower x) (String.toLower query))\
  \ := sorry\n\n\ntheorem word_search_results_contain_query (query : String) (seq\
  \ : List String) :\n  ∀ x ∈ word_search query seq, \n  word_search query seq ≠ [\"\
  None\"] →\n  String.containsString (String.toLower x) (String.toLower query) :=\
  \ sorry\n\n\ntheorem word_search_results_subset (query : String) (seq : List String)\
  \ :\n  ∀ x ∈ word_search query seq,\n  word_search query seq ≠ [\"None\"] →\n  x\
  \ ∈ seq := sorry\n\n\ntheorem word_search_finds_all_matches (query : String) (seq\
  \ : List String) :\n  word_search query seq ≠ [\"None\"] →\n  List.length (word_search\
  \ query seq) = \n  List.length (List.filter (fun x => String.containsString (String.toLower\
  \ x) (String.toLower query)) seq) := sorry\n\n\ntheorem word_search_empty_seq (query\
  \ : String) :\n  word_search query [] = [\"None\"] := sorry\n\n/--\ninfo: ['ab',\
  \ 'abc', 'zab']\n-/\n#guard_msgs in\n#eval word_search \"ab\" [\"za\", \"ab\", \"\
  abc\", \"zab\", \"zbc\"]\n\n/--\ninfo: ['ab', 'abc', 'zab']\n-/\n#guard_msgs in\n\
  #eval word_search \"aB\" [\"za\", \"ab\", \"abc\", \"zab\", \"zbc\"]\n\n/--\ninfo:\
  \ ['None']\n-/\n#guard_msgs in\n#eval word_search \"abcd\" [\"za\", \"aB\", \"Abc\"\
  , \"zAB\", \"zbc\"]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
