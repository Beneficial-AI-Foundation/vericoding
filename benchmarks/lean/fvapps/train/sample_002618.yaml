vc-description: |-
  Write a method that will search an array of strings for all strings that contain another string, ignoring capitalization. Then return an array of the found strings. 

  The method takes two parameters, the query string and the array of strings to search, and returns an array. 

  If the string isn't contained in any of the strings in the array, the method returns an array containing a single string: "Empty" (or `Nothing` in Haskell, or "None" in Python and C)

  ### Examples
  If the string to search for is "me", and the array to search is ["home", "milk", "Mercury", "fish"], the method should return ["home", "Mercury"].
vc-preamble: |
  import Imports.AllImports

  def String.containsString (s₁ s₂ : String) : Bool :=
    sorry
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def word_search (query : String) (seq : List String) : List String :=
    sorry
vc-theorems: |
  theorem word_search_returns_nonempty (query : String) (seq : List String) : 
    word_search query seq ≠ [] := sorry


  theorem word_search_none_means_no_matches (query : String) (seq : List String) :
    word_search query seq = ["None"] →
    ∀ x ∈ seq, ¬(String.containsString (String.toLower x) (String.toLower query)) := sorry


  theorem word_search_results_contain_query (query : String) (seq : List String) :
    ∀ x ∈ word_search query seq, 
    word_search query seq ≠ ["None"] →
    String.containsString (String.toLower x) (String.toLower query) := sorry


  theorem word_search_results_subset (query : String) (seq : List String) :
    ∀ x ∈ word_search query seq,
    word_search query seq ≠ ["None"] →
    x ∈ seq := sorry


  theorem word_search_finds_all_matches (query : String) (seq : List String) :
    word_search query seq ≠ ["None"] →
    List.length (word_search query seq) = 
    List.length (List.filter (fun x => String.containsString (String.toLower x) (String.toLower query)) seq) := sorry


  theorem word_search_empty_seq (query : String) :
    word_search query [] = ["None"] := sorry

  /--
  info: ['ab', 'abc', 'zab']
  -/
  #guard_msgs in
  #eval word_search "ab" ["za", "ab", "abc", "zab", "zbc"]

  /--
  info: ['ab', 'abc', 'zab']
  -/
  #guard_msgs in
  #eval word_search "aB" ["za", "ab", "abc", "zab", "zbc"]

  /--
  info: ['None']
  -/
  #guard_msgs in
  #eval word_search "abcd" ["za", "aB", "Abc", "zAB", "zbc"]
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
