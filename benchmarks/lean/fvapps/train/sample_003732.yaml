"vc-description": "# Story&Task\n The capital of Berland has n multifloor buildings.\
  \ The architect who built up the capital was very creative, so all houses in the\
  \ city were built in one row.\n\n Let's enumerate all the houses from left to right,\
  \ starting with 0. A house is considered to be luxurious if the number of floors\
  \ in it is strictly greater than in each house with larger number. In other words,\
  \ a house is luxurious if the number of floors in it is strictly greater than in\
  \ all houses, located to the right from it.\n\n The new architect is interested\
  \ in n questions, the ith of them is the following: \"how many floors should be\
  \ added to the ith house to make it luxurious?\" (For each i from 1 to n, inclusive).\
  \ You need to help him cope with this task.\n\n Note that all these questions are\
  \ independent from each other — the answer to the question for house i does not\
  \ affect other answers (i.e., the floors to the houses are not actually added).\n\
  \n# Input/Output\n\n\n - `[input]` integer array `houses`\n\n  Array of positive\
  \ integers, representing the number of floors in each house.\n\n  The ith element\
  \ is the number of houses in the ith house.\n\n  `1 ≤ houses.length ≤ 1000`\n\n\n\
  \ - `[output]` an integer array\n\n  An array has the same length as input array,\
  \ the ith element represents the number of floors that should be added to the ith\
  \ house to make it luxurious.\n  \n# Example\n\n For `houses = [1,2,3,1,2]`, the\
  \ output should be `[3,2,0,2,0]`.\n ```\n For houses[0], 3 floors should be added,\
  \ \n then its floors is strictly greater than all houses of right side.\n \n For\
  \ houses[1], 2 floors should be added.\n \n For houses[2], no need to add floor\n\
  \ because it's already the luxurious.\n \n For houses[3], 2 floors need to added\n\
  \ \n For houses[4], no house on the right, \n so no need to add any floor.\n ```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def luxhouse (houses : List Nat) : List Nat := sorry\n\ntheorem\
  \ luxhouse_preserves_length {houses : List Nat} (h : houses ≠ []) : \n  (luxhouse\
  \ houses).length = houses.length := sorry\n"
"vc-theorems": "theorem luxhouse_last_zero {houses : List Nat} (h : houses ≠ []) :\n\
  \  houses.length > 0 → (luxhouse houses).getLast! = 0 := sorry\n\n\ntheorem luxhouse_non_negative\
  \ {houses : List Nat} (h : houses.length ≥ 2) :\n  ∀ x ∈ luxhouse houses, x ≥ 0\
  \ := sorry \n\n\ntheorem luxhouse_identical_heights {h n : Nat} (len : n > 0) :\n\
  \  let houses := List.replicate n h\n  ∀ i, i < n - 1 → (luxhouse houses).get ⟨i,\
  \ sorry⟩ = 1 ∧ \n      (luxhouse houses).getLast! = 0 := sorry\n\n/--\ninfo: expected\n\
  -/\n#guard_msgs in\n#eval luxhouse [1, 2, 3, 1, 2]\n\n/--\ninfo: expected\n-/\n\
  #guard_msgs in\n#eval luxhouse [3, 2, 1, 4]\n\n/--\ninfo: expected\n-/\n#guard_msgs\
  \ in\n#eval luxhouse [1, 1, 1]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
