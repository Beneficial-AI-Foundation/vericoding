"vc-description": "In a 1 million by 1 million grid, the coordinates of each grid\
  \ square are (x, y) with 0 <= x, y < 10^6.\nWe start at the source square and want\
  \ to reach the target square.  Each move, we can walk to a 4-directionally adjacent\
  \ square in the grid that isn't in the given list of blocked squares.\nReturn true\
  \ if and only if it is possible to reach the target square through a sequence of\
  \ moves.\n \nExample 1:\nInput: blocked = [[0,1],[1,0]], source = [0,0], target\
  \ = [0,2]\nOutput: false\nExplanation: \nThe target square is inaccessible starting\
  \ from the source square, because we can't walk outside the grid.\n\nExample 2:\n\
  Input: blocked = [], source = [0,0], target = [999999,999999]\nOutput: true\nExplanation:\
  \ \nBecause there are no blocked cells, it's possible to reach the target square.\n\
  \n \nNote:\n\n0 <= blocked.length <= 200\nblocked[i].length == 2\n0 <= blocked[i][j]\
  \ < 10^6\nsource.length == target.length == 2\n0 <= source[i][j], target[i][j] <\
  \ 10^6\nsource != target"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def Point := Nat × Nat\n\ndef is_escape_possible (blocked : List\
  \ Point) (source target : Point) : Bool := sorry\n"
"vc-theorems": "theorem empty_blocked_always_possible (source target : Point) :\n\
  \  is_escape_possible [] source target = true := sorry\n\n\ntheorem blocked_source_target_impossible\
  \ {blocked : List Point} {source target : Point} :\n  (source ∈ blocked ∨ target\
  \ ∈ blocked) →\n  is_escape_possible blocked source target = false := sorry\n\n\n\
  theorem same_source_target_possible {blocked : List Point} {source : Point} :\n\
  \  source ∉ blocked →\n  is_escape_possible blocked source source = true := sorry\n\
  \n\ntheorem symmetry {blocked : List Point} {source target : Point} :\n  is_escape_possible\
  \ blocked source target = is_escape_possible blocked target source := sorry\n\n\n\
  theorem adjacent_points_blocked {source : Point} \n    (x := source.1)\n    (y :=\
  \ source.2)\n    (blocked := [(x+1,y), (x-1,y), (x,y+1), (x,y-1)])\n    (target\
  \ := (x+2, y+2)) :\n  is_escape_possible blocked source target = false := sorry\n\
  \n/--\ninfo: False\n-/\n#guard_msgs in\n#eval is_escape_possible [[0, 1], [1, 0]]\
  \ [0, 0] [0, 2]\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval is_escape_possible\
  \ [] [0, 0] [999999, 999999]\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval is_escape_possible\
  \ [[10, 9], [9, 10], [10, 11], [11, 10]] [0, 0] [10, 10]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
