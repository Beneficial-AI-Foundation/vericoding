"vc-description": "# Magpies are my favourite birds\n\nBaby ones even more so...\n\
  \n\n\nIt is a little known fact^ that the black & white colours of baby magpies\
  \ differ by **at least** one place and **at most** two places from the colours of\
  \ the mother magpie.\n\nSo now you can work out if any two magpies may be related.\
  \ \n\n*...and Quardle oodle ardle wardle doodle the magpies said*\n\n# Kata Task\n\
  \nGiven the colours of two magpies, determine if one is a possible **child** or\
  \ **grand-child** of the other.\n\n\n# Notes\n\n* Each pair of birds being compared\
  \ will have same number of colour areas\n* `B` = Black\n* `W` = White\n\n# Example\n\
  \nGiven these three magpies\n\n\nMagpie 1  BWBWBW\nMagpie 2  BWBWBB\nMagpie 3  WWWWBB\n\
  \n\nYou can see:\n* Magpie 2 may be a child of Magpie 1 because there is only one\
  \ difference\n* Magpie 3 may be child of Magpie 2 because there are two differences\n\
  * So Magpie 3 may be a grand-child of Magpie 1\n* On the other hand, Magpie 3 cannot\
  \ be a child of Magpie 1 because there are three differences\n\n\n---\n\nDM :-)\n\
  \n\n^ *This fact is little known because I just made it up*"
"vc-preamble": "import Imports.AllImports\n\ndef BirdString := List Bird\n\ndef diffs\
  \ : BirdString → BirdString → Nat\n  | _, _ => sorry\n\n\ndef child : BirdString\
  \ → BirdString → Bool\n  | _, _ => sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def grandchild : BirdString → BirdString → Bool \n  | _, _ => sorry\n"
"vc-theorems": "theorem diffs_upper_bound (s1 s2 : BirdString) : \n  diffs s1 s2 ≤\
  \ min (List.length s1) (List.length s2) :=\nsorry\n\n\ntheorem diffs_equal_zero\
  \ (s : BirdString) :\n  diffs s s = 0 :=\nsorry\n\n\ntheorem child_diffs_range (s1\
  \ s2 : BirdString) :\n  child s1 s2 = true → 1 ≤ diffs s1 s2 ∧ diffs s1 s2 ≤ 2 :=\n\
  sorry\n\n\ntheorem not_child_outside_range (s1 s2 : BirdString) :\n  (diffs s1 s2\
  \ > 2 ∨ diffs s1 s2 = 0) → child s1 s2 = false :=\nsorry\n\n\ntheorem single_char_grandchild\
  \ (b1 b2 : Bird) :\n  grandchild [b1] [b2] = (b1 = b2) :=\nsorry\n\n\ntheorem grandchild_diffs_range\
  \ (s1 s2 : BirdString) :\n  List.length s1 > 1 →\n  grandchild s1 s2 = true →\n\
  \  0 ≤ diffs s1 s2 ∧ diffs s1 s2 ≤ 4 :=\nsorry\n\n\ntheorem not_grandchild_excess_diffs\
  \ (s1 s2 : BirdString) :\n  List.length s1 > 1 →\n  diffs s1 s2 > 4 →\n  grandchild\
  \ s1 s2 = false :=\nsorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval child \"\
  BWBWBW\" \"BWBWBB\"\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval grandchild magpie1\
  \ \"WWWWBB\"\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval child magpie1 magpie3\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
