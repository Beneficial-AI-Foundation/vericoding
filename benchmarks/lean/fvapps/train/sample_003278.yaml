"vc-description": "Description overhauled by V\n\n---\n\nI've invited some kids for\
  \ my son's birthday, during which I will give to each kid some amount of candies.\n\
  \nEvery kid hates receiving less amount of candies than any other kids, and I don't\
  \ want to have any candies left - giving it to my kid would be bad for his teeth.\n\
  \nHowever, not every kid invited will come to my birthday party.\n\nWhat is the\
  \ minimum amount of candies I have to buy, so that no matter how many kids come\
  \ to the party in the end, I can still ensure that each kid can receive the same\
  \ amount of candies, while leaving no candies left?\n\nIt's ensured that at least\
  \ one kid will participate in the party."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def candies_to_buy (n : Nat) : Nat := sorry\n\ntheorem candies_to_buy_properties\
  \ (n : Nat) (h : n > 0 ∧ n ≤ 20) : \n  let result := candies_to_buy n\n  -- Result\
  \ greater than or equal to n\n  result ≥ n ∧ \n  -- Result evenly divisible by all\
  \ numbers 1 to n\n  (∀ i, 1 ≤ i ∧ i ≤ n → result % i = 0) ∧\n  -- Result is positive\n\
  \  result > 0 := sorry\n"
"vc-theorems": "theorem candies_to_buy_minimum : candies_to_buy 1 = 1 := sorry\n\n\
  /--\ninfo: 1\n-/\n#guard_msgs in\n#eval candies_to_buy 1\n\n/--\ninfo: 2\n-/\n#guard_msgs\
  \ in\n#eval candies_to_buy 2\n\n/--\ninfo: 60\n-/\n#guard_msgs in\n#eval candies_to_buy\
  \ 5\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
