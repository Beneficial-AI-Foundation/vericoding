"vc-description": "The snakes want to build a temple for Lord Cobra. There are multiple\
  \ strips of land that they are looking at, but not all of them are suitable. They\
  \ need the strip of land to resemble a coiled Cobra. You need to find out which\
  \ strips do so.\nFormally, every strip of land, has a length. Suppose the length\
  \ of the i-th strip is is Ni, then there will be Ni integers, Hi1, Hi2, .. HiNi,\
  \ which represent the heights of the ground at various parts of the strip, in sequential\
  \ order. That is, the strip has been divided into Ni parts and the height of each\
  \ part is given. This strip is valid, if and only if all these conditions are satisfied:\n\
  - There should be an unique 'centre' part. This is where the actual temple will\
  \ be built. By centre, we mean that there should be an equal number of parts to\
  \ the left of this part, and to the right of this part.\n- Hi1 = 1\n- The heights\
  \ keep increasing by exactly 1, as you move from the leftmost part, to the centre\
  \ part.\n- The heights should keep decreasing by exactly 1, as you move from the\
  \ centre part to the rightmost part. Note that this means that HiNi should also\
  \ be 1.\nYour job is to look at every strip and find if it's valid or not.\n\n-----Input-----\n\
  - The first line contains a single integer, S, which is the number of strips you\
  \ need to look at. The description of each of the S strips follows\n- The first\
  \ line of the i-th strip's description will contain a single integer: Ni, which\
  \ is the length and number of parts into which it has been divided.\n- The next\
  \ line contains Ni integers: Hi1, Hi2, .., HiNi. These represent the heights of\
  \ the various parts in the i-th strip.\n\n-----Output-----\n- For each strip, in\
  \ a new line, output \"yes\" if is a valid strip, and \"no\", if it isn't.\n\n-----Constraints-----\n\
  - 1 ≤ S ≤ 100 \n- 3 ≤ Ni ≤ 100 \n- 1 ≤ Hij ≤ 100 \n\n-----Example-----\nInput:\n\
  7\n5\n1 2 3 2 1\n7\n2 3 4 5 4 3 2\n5\n1 2 3 4 3\n5\n1 3 5 3 1\n7\n1 2 3 4 3 2 1\n\
  4\n1 2 3 2\n4\n1 2 2 1\n\nOutput:\nyes\nno\nno\nno\nyes\nno\nno\n\n-----Explanation-----\n\
  In the first strip, all the conditions are satisfied, hence it is valid.\nIn the\
  \ second strip, it does not start with a 1, and hence is invalid.\nIn the third\
  \ strip, it keeps increasing even past the centre, instead of decreasing. Hence\
  \ invalid.\nThe fourth strip does not increase and decrease by exactly 1. Hence\
  \ invalid.\nThe fifth satisfies all conditions and hence is valid.\nThe sixth and\
  \ seventh strip do not have a 'centre' part. Because for every part, there are either\
  \ more parts to its right than its left, or more parts on its left than its right.\
  \ Hence both the strips are invalid."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def check_cobra_temple (heights : List Nat) : Bool := sorry\n\n\
  theorem valid_cobra_sequences {peak : Nat} (h : peak > 0) (h2 : peak ≤ 10) :\n \
  \ let ascending := List.range' 1 peak\n  let descending := List.reverse (List.range'\
  \ 1 (peak - 1))\n  check_cobra_temple (ascending ++ descending) = true := sorry\n"
"vc-theorems": "theorem even_length_rejected {heights : List Nat} (h : heights.length\
  \ % 2 = 0) \n  (h2 : heights.length ≥ 3) (h3 : ∀ x ∈ heights, x ≥ 1 ∧ x ≤ 100) :\n\
  \  check_cobra_temple heights = false := sorry\n\n\ntheorem non_one_endpoints_rejected\
  \ {heights : List Nat} \n  (h : heights.length % 2 = 1)\n  (h2 : heights.length\
  \ ≥ 3) \n  (h3 : ∀ x ∈ heights, x ≥ 2 ∧ x ≤ 100) :\n  check_cobra_temple heights\
  \ = false := sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval check_cobra_temple\
  \ [1, 2, 3, 2, 1]\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval check_cobra_temple\
  \ [2, 3, 4, 5, 4, 3, 2]\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval check_cobra_temple\
  \ [1, 2, 3, 4, 3, 2, 1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
