"vc-description": "The Binomial Form of a polynomial has many uses, just as the standard\
  \ form does.  For comparison, if p(x) is in Binomial Form and q(x) is in standard\
  \ form, we might write\n\np(x) := a0 \\* xC0 + a1 \\* xC1 + a2 \\* xC2 + ... + aN\
  \ \\* xCN\n\nq(x) := b0 + b1 \\* x + b2 \\* x^(2) + ... + bN \\* x^(N)\n\nBoth forms\
  \ have tricks for evaluating them, but tricks should not be necessary.  The most\
  \ important thing to keep in mind is that aCb can be defined for non-integer values\
  \ of a; in particular,\n\n```\naCb := a * (a-1) * (a-2) * ... * (a-b+1) / b!   //\
  \ for any value a and integer values b\n    := a! / ((a-b)!b!)                 \
  \         // for integer values a,b\n```\n\nThe inputs to your function are an array\
  \ which specifies a polynomial in Binomial Form, ordered by highest-degree-first,\
  \ and also a number to evaluate the polynomial at.  An example call might be\n\n\
  ```python\nvalue_at([1, 2, 7], 3)\n```\n\nand the return value would be 16, since\
  \ 3C2 + 2 * 3C1 + 7 = 16.  In more detail, this calculation looks like\n\n```\n\
  1 * xC2 + 2 * xC1 + 7 * xC0 :: x = 3\n3C2 + 2 * 3C1 + 7\n3 * (3-1) / 2! + 2 * 3\
  \ / 1! + 7\n3 + 6 + 7 = 16\n```\n\nMore information can be found by reading about\
  \ [Binomial Coefficients](https://en.wikipedia.org/wiki/Binomial_coefficient) or\
  \ about [Finite Differences](https://en.wikipedia.org/wiki/Finite_difference).\n\
  \nNote that while a solution should be able to handle non-integer inputs and get\
  \ a correct result, any solution should make use of rounding to two significant\
  \ digits (as the official solution does) since high precision for non-integers is\
  \ not the point here."
"vc-preamble": "import Imports.AllImports\n\ndef value_at (poly: List Int) (x: Float)\
  \ : Float := sorry\n\ndef aCb (a: Float) (b: Int) : Float := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def intToFloat (i: Int) : Float := sorry\n\ntheorem value_at_results_finite\
  \ (poly: List Int) (x: Float) (h1: poly.length > 0)\n  (h2: -10 ≤ x ∧ x ≤ 10) :\
  \ ∃ (y: Float), value_at poly x = y := sorry\n"
"vc-theorems": "theorem aCb_matches_binomial (a b: Int) (h1: 0 ≤ a ∧ a ≤ 10) (h2:\
  \ 0 ≤ b ∧ b ≤ 10) \n  (h3: b ≤ a) : ∃ (y: Float), aCb (intToFloat a) b = y := sorry\n\
  \n\ntheorem aCb_results_finite (a: Float) (b: Int) (h1: -10 ≤ a ∧ a ≤ 10) \n  (h2:\
  \ 0 ≤ b ∧ b ≤ 5) : ∃ (y: Float), aCb a b = y := sorry\n\n\ntheorem value_at_constant\
  \ (c: Int) (h1: -10 ≤ c ∧ c ≤ 10) :\n  (value_at [c] 123 - intToFloat c) < 0.01\
  \ ∧ (intToFloat c - value_at [c] 123) < 0.01 := sorry\n\n/--\ninfo: 16\n-/\n#guard_msgs\
  \ in\n#eval value_at [1, 2, 7] 3\n\n/--\ninfo: 12\n-/\n#guard_msgs in\n#eval value_at\
  \ [1, 2, 7, 0, 5] 2\n\n/--\ninfo: 4.24\n-/\n#guard_msgs in\n#eval value_at [1, 2,\
  \ 7, 0, 5] 0.6\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
