"vc-description": "Sereja have array A' that contain N integers. Now Sereja want to\
  \ permute elements of the array, he want to use some permutation p, such that A[i]\
  \ = A'[p[i]], where A - new array. \n\nLets function f(A,i) = S - A[i] - A[i +1]\
  \ - ... - A[j], where j is the maximum possible index, such that A[i] + A[i + 1]\
  \ + ... + A[j] <= S, if A[i] > S, f(A, i) = S.\n\nHelp Sereja to find such permutation\
  \ p, such that (f(A, 1) + f(A, 2) + ... f(A, k))/k will be as low as possible. \n\
  \n-----Input-----\n\nFirst line of input contain integer T - number of testcases.\
  \ Next lines contain T testcases. First line of each testcase contain three integers\
  \ N, k, S. Next line contain N integers - array A'.\n\n-----Output-----\n\nFor each\
  \ testcase output N numbers in one line - permutation p. \n\n-----Constraints-----\n\
  - 1 ≤ T ≤ 10\n- 1 ≤ N ≤ 2000\n- 1 ≤ k ≤ N\n- 1 ≤ A'[i] ≤ 10^4\n- 1 ≤ S ≤ 10^9\n\n\
  -----Example-----\nInput:\n2\n3 2 4\n3 4 1\n4 4 1\n1 1 1 1\n\nOutput:\n2 1 3\n4\
  \ 3 2 1\n\n\n-----Scoring-----\n\nSuppose Sum will be sum of yours (f(A, 1) + f(A,\
  \ 2) + ... f(A, k))/k per each testcase.  \nLets B will be the smallest such sum.\
  \ Your score will be equal to B/Sum. Lower scores will earn more points.\n\nWe have\
  \ 20 official test files. You must correctly solve all test files to receive OK.\
  \ During the contest, your overall score is the sum of the scores on the first 4\
  \ test files. After the contest, all solutions will be rescored by the sum of the\
  \ scores on the rest 16 test files. Note, that public part of the tests may not\
  \ contain some border cases."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_permutation (N k S : Nat) (arr : List Nat) : List Nat\
  \ := sorry\n\ndef is_valid_permutation (n : Nat) (perm : List Nat) : Bool := sorry\n"
"vc-theorems": "theorem solve_perm_valid_permutation \n  (N k S : Nat)\n  (arr : List\
  \ Nat)\n  (h1 : N > 0)\n  (h2 : k > 0) \n  (h3 : S > 0)\n  (h4 : arr.length > 0)\
  \ :\n  is_valid_permutation N (solve_permutation N k S arr) = true := sorry\n\n\n\
  theorem solve_perm_length\n  (N k S : Nat)\n  (arr : List Nat)\n  (h1 : N > 0)\n\
  \  (h2 : k > 0)\n  (h3 : S > 0)\n  (h4 : arr.length > 0) :\n  (solve_permutation\
  \ N k S arr).length = N := sorry\n\n\ntheorem solve_perm_descending\n  (N k S :\
  \ Nat)\n  (arr : List Nat) \n  (h1 : N > 0)\n  (h2 : k > 0)\n  (h3 : S > 0)\n  (h4\
  \ : arr.length > 0) :\n  ∀ i j, i < j → j < (solve_permutation N k S arr).length\
  \ → \n  (solve_permutation N k S arr).get ⟨i, sorry⟩ ≥ \n  (solve_permutation N\
  \ k S arr).get ⟨j, sorry⟩ := sorry\n\n\ntheorem solve_perm_edge_case\n  (N : Nat)\n\
  \  (h : N > 0) :\n  solve_permutation N 1 1 (List.replicate N 1) = List.range' N\
  \ N := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
