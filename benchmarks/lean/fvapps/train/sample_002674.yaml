"vc-description": "Binary with 0 and 1 is good, but binary with only 0 is even better!\
  \ Originally, this is a concept designed by Chuck Norris to send so called unary\
  \ messages.\n\nCan you write a program that can send and receive this messages?\n\
  \nRules\n\nThe input message consists of ASCII characters between 32 and 127 (7-bit)\n\
  The encoded output message consists of blocks of 0\nA block is separated from another\
  \ block by a space\nTwo consecutive blocks are used to produce a series of same\
  \ value bits (only 1 or 0 values):\n\nFirst block is always 0 or 00. If it is 0,\
  \ then the series contains 1, if not, it contains 0\nThe number of 0 in the second\
  \ block is the number of bits in the series\n\n\nExample\nLet’s take a simple example\
  \ with a message which consists of only one character (Letter 'C').'C' in binary\
  \ is represented as 1000011, so with Chuck Norris’ technique this gives:\n\n0 0\
  \ - the first series consists of only a single 1\n00 0000 - the second series consists\
  \ of four 0\n0 00 - the third consists of two 1\n\nSo 'C' is coded as: 0 0 00 0000\
  \ 0 00\nSecond example, we want to encode the message \"CC\" (i.e. the 14 bits 10000111000011)\
  \ :\n\n0 0 - one single 1\n00 0000 - four 0\n0 000 - three 1\n00 0000 - four 0\n\
  0 00 - two 1\n\nSo \"CC\" is coded as: 0 0 00 0000 0 000 00 0000 0 00\nNote of thanks\n\
  Thanks to the author of the original kata. I really liked this kata. I hope that\
  \ other warriors will enjoy it too."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def send (s : String) : String := sorry\ndef receive (s : String)\
  \ : String := sorry\n"
"vc-theorems": "theorem encoding_decoding_roundtrip {s : String}\n  (h : s.length\
  \ > 0 ∧ s.length ≤ 100) :\n  receive (send s) = s := sorry\n\n\ntheorem send_format\
  \ {s : String} \n  (h : s.length > 0 ∧ s.length ≤ 100) :\n  let encoded := send\
  \ s\n  let segments := encoded.split (· = ' ')\n  (∀ seg ∈ segments, (seg.startsWith\
  \ \"0\" ∨ seg.startsWith \"00\")) ∧ \n  (∀ c ∈ encoded.data, c = '0' ∨ c = ' ')\
  \ := sorry \n\n\ntheorem encoded_length_relationship {s : String}\n  (h : s.length\
  \ > 0 ∧ s.length ≤ 100) :\n  (send s).length ≥ s.length := sorry\n\n\ntheorem receive_handles_valid_format\
  \ {s : String}\n  (h : s.length > 0) \n  (h₂ : ∀ c ∈ s.data, c = '0' ∨ c = ' ')\
  \ :\n  (receive s).length > 0 := sorry\n\n/--\ninfo: '0 0 00 0000 0 00'\n-/\n#guard_msgs\
  \ in\n#eval send \"C\"\n\n/--\ninfo: '0 0 00 0000 0 000 00 0000 0 00'\n-/\n#guard_msgs\
  \ in\n#eval send \"CC\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
