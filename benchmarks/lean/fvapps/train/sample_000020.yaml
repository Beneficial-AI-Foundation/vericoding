"vc-description": "Gildong owns a bulgogi restaurant. The restaurant has a lot of\
  \ customers, so many of them like to make a reservation before visiting it.\n\n\
  Gildong tries so hard to satisfy the customers that he even memorized all customers'\
  \ preferred temperature ranges! Looking through the reservation list, he wants to\
  \ satisfy all customers by controlling the temperature of the restaurant.\n\nThe\
  \ restaurant has an air conditioner that has 3 states: off, heating, and cooling.\
  \ When it's off, the restaurant's temperature remains the same. When it's heating,\
  \ the temperature increases by 1 in one minute. Lastly, when it's cooling, the temperature\
  \ decreases by 1 in one minute. Gildong can change the state as many times as he\
  \ wants, at any integer minutes. The air conditioner is off initially.\n\nEach customer\
  \ is characterized by three values: $t_i$ — the time (in minutes) when the $i$-th\
  \ customer visits the restaurant, $l_i$ — the lower bound of their preferred temperature\
  \ range, and $h_i$ — the upper bound of their preferred temperature range.\n\nA\
  \ customer is satisfied if the temperature is within the preferred range at the\
  \ instant they visit the restaurant. Formally, the $i$-th customer is satisfied\
  \ if and only if the temperature is between $l_i$ and $h_i$ (inclusive) in the $t_i$-th\
  \ minute.\n\nGiven the initial temperature, the list of reserved customers' visit\
  \ times and their preferred temperature ranges, you're going to help him find if\
  \ it's possible to satisfy all customers.\n\n\n-----Input-----\n\nEach test contains\
  \ one or more test cases. The first line contains the number of test cases $q$ ($1\
  \ \\le q \\le 500$). Description of the test cases follows.\n\nThe first line of\
  \ each test case contains two integers $n$ and $m$ ($1 \\le n \\le 100$, $-10^9\
  \ \\le m \\le 10^9$), where $n$ is the number of reserved customers and $m$ is the\
  \ initial temperature of the restaurant.\n\nNext, $n$ lines follow. The $i$-th line\
  \ of them contains three integers $t_i$, $l_i$, and $h_i$ ($1 \\le t_i \\le 10^9$,\
  \ $-10^9 \\le l_i \\le h_i \\le 10^9$), where $t_i$ is the time when the $i$-th\
  \ customer visits, $l_i$ is the lower bound of their preferred temperature range,\
  \ and $h_i$ is the upper bound of their preferred temperature range. The preferred\
  \ temperature ranges are inclusive.\n\nThe customers are given in non-decreasing\
  \ order of their visit time, and the current time is $0$.\n\n\n-----Output-----\n\
  \nFor each test case, print \"YES\" if it is possible to satisfy all customers.\
  \ Otherwise, print \"NO\".\n\nYou can print each letter in any case (upper or lower).\n\
  \n\n-----Example-----\nInput\n4\n3 0\n5 1 2\n7 3 5\n10 -1 0\n2 12\n5 7 10\n10 16\
  \ 20\n3 -100\n100 0 0\n100 -50 50\n200 100 100\n1 100\n99 -100 0\n\nOutput\nYES\n\
  NO\nYES\nNO\n\n\n\n-----Note-----\n\nIn the first case, Gildong can control the\
  \ air conditioner to satisfy all customers in the following way:  At $0$-th minute,\
  \ change the state to heating (the temperature is 0).  At $2$-nd minute, change\
  \ the state to off (the temperature is 2).  At $5$-th minute, change the state to\
  \ heating (the temperature is 2, the $1$-st customer is satisfied).  At $6$-th minute,\
  \ change the state to off (the temperature is 3).  At $7$-th minute, change the\
  \ state to cooling (the temperature is 3, the $2$-nd customer is satisfied).  At\
  \ $10$-th minute, the temperature will be 0, which satisfies the last customer.\
  \ \n\nIn the third case, Gildong can change the state to heating at $0$-th minute\
  \ and leave it be. Then all customers will be satisfied. Note that the $1$-st customer's\
  \ visit time equals the $2$-nd customer's visit time.\n\nIn the second and the fourth\
  \ case, Gildong has to make at least one customer unsatisfied."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def CustomerInfo := List (Nat × Int × Int)\n\ndef check_restaurant_temps\
  \ (initial_temp : Int) (customer_info : CustomerInfo) : String :=\n  sorry\n"
"vc-theorems": "theorem check_restaurant_temps_returns_valid_string (initial_temp\
  \ : Int) (customer_info : CustomerInfo) :\n  check_restaurant_temps initial_temp\
  \ customer_info = \"YES\" ∨ \n  check_restaurant_temps initial_temp customer_info\
  \ = \"NO\" :=\n  sorry\n\n\ntheorem customer_info_time_monotonic {info : CustomerInfo}\
  \ :\n  ∀ i j, i < j → j < info.length → \n    (info.get! i).1 ≤ (info.get! j).1\
  \ :=\n  sorry\n\n\ntheorem empty_customer_info_returns_yes (initial_temp : Int)\
  \ :\n  check_restaurant_temps initial_temp [] = \"YES\" :=\n  sorry\n\n\ntheorem\
  \ single_customer_response (initial_temp : Int) (t : Nat) (l h : Int) :\n  let temp_range_low\
  \ := initial_temp - t\n  let temp_range_high := initial_temp + t\n  let customer_info\
  \ := [(t, l, h)]\n  (h < temp_range_low ∨ temp_range_high < l → \n    check_restaurant_temps\
  \ initial_temp customer_info = \"NO\") ∧\n  (¬(h < temp_range_low ∨ temp_range_high\
  \ < l) → \n    check_restaurant_temps initial_temp customer_info = \"YES\") :=\n\
  \  sorry\n\n/--\ninfo: 'YES'\n-/\n#guard_msgs in\n#eval check_restaurant_temps 0\
  \ [(5, 1, 2), (7, 3, 5), (10, -1, 0)]\n\n/--\ninfo: 'NO'\n-/\n#guard_msgs in\n#eval\
  \ check_restaurant_temps 12 [(5, 7, 10), (10, 16, 20)]\n\n/--\ninfo: 'YES'\n-/\n\
  #guard_msgs in\n#eval check_restaurant_temps -100 [(100, 0, 0), (100, -50, 50),\
  \ (200, 100, 100)]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
