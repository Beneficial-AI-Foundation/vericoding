"vc-description": "Write a function that takes a string and returns an array of the\
  \ repeated characters (letters, numbers, whitespace) in the string.\n\nIf a charater\
  \ is repeated more than once, only show it once in the result array.\n\nCharacters\
  \ should be shown **by the order of their first repetition**. Note that this may\
  \ be different from the order of first appearance of the character.\n\nCharacters\
  \ are case sensitive.\n\nFor F# return a \"char list\"\n\n## Examples:\n\n```python\n\
  remember(\"apple\") => returns [\"p\"]\nremember(\"apPle\") => returns []      \
  \    # no repeats, \"p\" != \"P\"\nremember(\"pippi\") => returns [\"p\",\"i\"]\
  \   # show \"p\" only once\nremember('Pippi') => returns [\"p\",\"i\"]   # \"p\"\
  \ is repeated first\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def remember (s : String) : List Char := sorry\n\ntheorem remember_chars_in_input\
  \ (s : String) : \n  ∀ c ∈ remember s, c ∈ s.data := by sorry\n"
"vc-theorems": "theorem remember_only_duplicates (s : String) :\n  ∀ c ∈ remember\
  \ s, (s.data.count c) > 1 := by sorry\n\n\ntheorem remember_no_duplicates (s : String)\
  \ :\n  (remember s).Nodup := by sorry\n\n\ntheorem remember_maintains_order (s :\
  \ String) (i j : Nat) \n  (h₁ : i < j) (h₂ : i < (remember s).length) (h₃ : j <\
  \ (remember s).length) :\n  let c₁ := (remember s)[i]'h₂\n  let c₂ := (remember\
  \ s)[j]'h₃\n  let pos₁ := s.data.indexOf c₁\n  let pos₂ := s.data.indexOf c₂\n \
  \ pos₁ ≤ pos₂ := by sorry\n\n\ntheorem remember_empty (s : String) : \n  s = \"\"\
  \ → remember s = [] := by sorry\n\n\ntheorem remember_length_bound (s : String)\
  \ :\n  (remember s).length ≤ s.length / 2 := by sorry\n\n\ntheorem remember_returns_chars\
  \ (s : String) :\n  ∀ c ∈ remember s, c.toString.length = 1 := by sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
