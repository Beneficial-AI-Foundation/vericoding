"vc-description": "Complete the function that takes one argument, a list of words,\
  \ and returns the length of the longest word in the list.\n\nFor example: \n\n```python\n\
  ['simple', 'is', 'better', 'than', 'complex'] ==> 7\n```\n\nDo not modify the input\
  \ list."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def longest (words : List String) : Nat :=\n  sorry\n\n@[simp]"
"vc-theorems": "theorem longest_equals_max_length (words : List String) (h : words\
  \ ≠ []) :\n  longest words = (words.map String.length).maximum?.getD 0\n  := by\
  \ sorry\n\n\ntheorem longest_min_length_5 (words : List String) (h₁ : words ≠ [])\
  \ \n  (h₂ : ∀ w ∈ words, String.length w ≥ 5) :\n  longest words ≥ 5\n  := by sorry\n\
  \n\ntheorem longest_max_length_10 (words : List String) (h₁ : words ≠ []) \n  (h₂\
  \ : ∀ w ∈ words, String.length w ≤ 10) :\n  longest words ≤ 10\n  := by sorry\n\n\
  \ntheorem longest_empty_list :\n  longest [] = 0 ∧ longest [] ≠ longest [\"a\"]\n\
  \  := by sorry\n\n/--\ninfo: 7\n-/\n#guard_msgs in\n#eval longest [\"simple\", \"\
  is\", \"better\", \"than\", \"complex\"]\n\n/--\ninfo: 8\n-/\n#guard_msgs in\n#eval\
  \ longest [\"explicit\", \"is\", \"better\", \"than\", \"implicit\"]\n\n/--\ninfo:\
  \ 9\n-/\n#guard_msgs in\n#eval longest [\"beautiful\", \"is\", \"better\", \"than\"\
  , \"ugly\"]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
