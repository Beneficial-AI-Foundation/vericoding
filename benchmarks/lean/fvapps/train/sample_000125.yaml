"vc-description": "There is a group of G members, and a list of various crimes they\
  \ could commit.\nThe ith crime generates a profit[i] and requires group[i] members\
  \ to participate in it.\nIf a member participates in one crime, that member can't\
  \ participate in another crime.\nLet's call a profitable scheme any subset of these\
  \ crimes that generates at least P profit, and the total number of members participating\
  \ in that subset of crimes is at most G.\nHow many schemes can be chosen?  Since\
  \ the answer may be very large, return it modulo 10^9 + 7.\n \nExample 1:\nInput:\
  \ G = 5, P = 3, group = [2,2], profit = [2,3]\nOutput: 2\nExplanation: \nTo make\
  \ a profit of at least 3, the group could either commit crimes 0 and 1, or just\
  \ crime 1.\nIn total, there are 2 schemes.\n\n\nExample 2:\nInput: G = 10, P = 5,\
  \ group = [2,3,5], profit = [6,7,8]\nOutput: 7\nExplanation: \nTo make a profit\
  \ of at least 5, the group could commit any crimes, as long as they commit one.\n\
  There are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2).\n\
  \n \n\nNote:\n\n1 <= G <= 100\n0 <= P <= 100\n1 <= group[i] <= 100\n0 <= profit[i]\
  \ <= 100\n1 <= group.length = profit.length <= 100"
"vc-preamble": "import Imports.AllImports\n\ndef profitable_schemes (G : Nat) (P :\
  \ Nat) (group : List Nat) (profit : List Nat) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def MOD := 1000000007\n\n-- Basic properties"
"vc-theorems": "theorem profitable_schemes_non_negative (G P : Nat) (group profit\
  \ : List Nat) :\n  profitable_schemes G P group profit ≥ 0 :=\n  sorry\n\n\ntheorem\
  \ profitable_schemes_mod_bound (G P : Nat) (group profit : List Nat) :\n  profitable_schemes\
  \ G P group profit < MOD :=\n  sorry\n\n-- Empty list cases\n\ntheorem profitable_schemes_empty_zero_profit\
  \ (G : Nat) :\n  profitable_schemes G 0 [] [] = 1 :=\n  sorry \n\n\ntheorem profitable_schemes_empty_positive_profit\
  \ (G P : Nat) :\n  P > 0 → profitable_schemes G P [] [] = 0 :=\n  sorry\n\n-- Scaling\
  \ property\n\ntheorem profitable_schemes_scaling (G P : Nat) (group profit : List\
  \ Nat) :\n  group ≠ [] → \n  profit.length = group.length →\n  profitable_schemes\
  \ G P group profit = \n  profitable_schemes G (2 * P) group (List.map (fun p =>\
  \ 2 * p) profit) :=\n  sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval profitable_schemes\
  \ 5 3 [2, 2] [2, 3]\n\n/--\ninfo: 7\n-/\n#guard_msgs in\n#eval profitable_schemes\
  \ 10 5 [2, 3, 5] [6, 7, 8]\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval profitable_schemes\
  \ 1 1 [1] [1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
