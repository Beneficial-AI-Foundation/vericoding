"vc-description": "Given an integer, return its base 7 string representation.\n\n\
  Example 1:\n\nInput: 100\nOutput: \"202\"\n\n\n\nExample 2:\n\nInput: -7\nOutput:\
  \ \"-10\"\n\n\n\nNote:\nThe input will be in range of [-1e7, 1e7]."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def convert_to_base7 (n : Int) : String := sorry\n\ndef base7_to_decimal\
  \ (s : String) : Int := sorry\n"
"vc-theorems": "theorem convert_to_base7_negative_sign (x : Int) :\n  x < 0 → (convert_to_base7\
  \ x).startsWith \"-\" :=\nsorry\n\n\ntheorem convert_to_base7_positive_no_sign (x\
  \ : Int) :\n  x ≥ 0 → ¬(convert_to_base7 x).startsWith \"-\" :=\nsorry\n\n\ntheorem\
  \ convert_to_base7_roundtrip (x : Int) :\n  base7_to_decimal (convert_to_base7 x)\
  \ = x :=\nsorry\n\n\ntheorem convert_to_base7_valid_digits (x : Int) :\n  let digits\
  \ := if (convert_to_base7 x).startsWith \"-\" then (convert_to_base7 x).drop 1 else\
  \ convert_to_base7 x\n  ∀ d, d ∈ digits.data → d ∈ ['0', '1', '2', '3', '4', '5',\
  \ '6'] :=\nsorry\n\n\ntheorem convert_to_base7_single_digit (x : Int) :\n  0 ≤ x\
  \ → x ≤ 6 → convert_to_base7 x = toString x :=\nsorry\n\n/--\ninfo: '202'\n-/\n\
  #guard_msgs in\n#eval convert_to_base7 100\n\n/--\ninfo: '-10'\n-/\n#guard_msgs\
  \ in\n#eval convert_to_base7 -7\n\n/--\ninfo: '16'\n-/\n#guard_msgs in\n#eval convert_to_base7\
  \ 13\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
