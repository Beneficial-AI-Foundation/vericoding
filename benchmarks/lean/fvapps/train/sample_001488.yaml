"vc-description": "Let X be the set of all integers between 0 and n-1. Suppose we\
  \ have a collection S1, S2, ..., Sm of subsets of X. Say an atom A is a subset of\
  \ X such that for each Si we have either A is a subset of Si or A and Si do not\
  \ have any common elements.\n\nYour task is to find a collection A1, ..., Ak of\
  \ atoms such that every item in X is in some Ai and no two Ai, Aj with i ≠ j share\
  \ a common item. Surely such a collection exists as we could create a single set\
  \ {x} for each x in X. A more interesting question is to minimize k, the number\
  \ of atoms.\n\n-----Input-----\n\nThe first line contains a single positive integer\
  \ t ≤ 30 indicating the number of test cases. Each test case begins with two integers\
  \ n,m where n is the size of X and m is the number of sets Si. Then m lines follow\
  \ where the i'th such line begins with an integer vi between 1 and n (inclusive)\
  \ indicating the size of Si. Following this are vi distinct integers between 0 and\
  \ n-1 that describe the contents of Si.\n\nYou are guaranteed that 1 ≤ n ≤ 100 and\
  \ 1 ≤ m ≤ \n30. Furthermore, each number between 0 and n-1 will appear in at least\
  \ one set Si.\n\n-----Output-----\n\nFor each test case you are to output a single\
  \ integer indicating the minimum number of atoms that X can be partitioned into\
  \ to satisfy the constraints.\n\n-----Example-----\nInput:\n2\n5 2\n3 0 1 2\n3 2\
  \ 3 4\n4 3\n2 0 1\n2 1 2\n2 2 3\n\nOutput:\n3\n4"
"vc-preamble": "import Imports.AllImports\n\ndef solve_atoms (input : List (Nat ×\
  \ Nat) × List Nat) : List Nat := sorry\n\nvariable (n : Nat)\n\n\ndef empty_case\
  \ (n : Nat) : List (Nat × Nat) × List Nat := \n  ([(n, 1)], [0])\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def all_case (n : Nat) : List (Nat × Nat) × List Nat :=\n  ([(n,\
  \ 1)], n :: List.range n)\n"
"vc-theorems": "theorem solve_atoms_empty_groups (h : n > 0) :\n  solve_atoms (empty_case\
  \ n) = List.replicate n 1 := sorry\n\n\ntheorem solve_atoms_all_groups (h : n >\
  \ 0) :\n  solve_atoms (all_case n) = List.replicate n 1 := sorry\n\n/--\ninfo: [3]\n\
  -/\n#guard_msgs in\n#eval solve_atoms [case1]\n\n/--\ninfo: [4]\n-/\n#guard_msgs\
  \ in\n#eval solve_atoms [case2]\n\n/--\ninfo: [3, 4]\n-/\n#guard_msgs in\n#eval\
  \ solve_atoms [case1, case2]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
