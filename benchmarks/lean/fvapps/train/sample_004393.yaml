"vc-description": "Write a function that accepts two arguments: an array/list of integers\
  \ and another integer (`n`). \n\nDetermine the number of times where two integers\
  \ in the array have a difference of `n`.\n\nFor example:\n```\n[1, 1, 5, 6, 9, 16,\
  \ 27], n=4  -->  3  # (1,5), (1,5), (5,9)\n[1, 1, 3, 3], n=2             -->  4\
  \  # (1,3), (1,3), (1,3), (1,3)\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def int_diff (arr : List Int) (n : Int) : Int := sorry\n\ntheorem\
  \ int_diff_nonnegative (arr : List Int) (n : Int) : \n  n ≥ 0 → int_diff arr n ≥\
  \ 0 := sorry \n"
"vc-theorems": "theorem int_diff_max_pairs (arr : List Int) (n : Int) :\n  let max_pairs\
  \ := (arr.length * (arr.length - 1)) / 2\n  int_diff arr n ≤ max_pairs := sorry\n\
  \n\ntheorem int_diff_order_invariant (arr : List Int) (n : Int) :\n  int_diff arr\
  \ n = int_diff (arr.reverse) n := sorry\n\n-- Simplified version focusing on the\
  \ core property rather than implementation details \n\ntheorem int_diff_zero_counts_equal_numbers\
  \ (arr : List Int) :\n  int_diff arr 0 = \n    -- Number of pairs of equal elements\n\
  \    let count_equal_pairs (xs : List Int) := \n      int_diff xs 0 \n    count_equal_pairs\
  \ arr := sorry\n\n\ntheorem int_diff_scaling (arr : List Int) (n : Int) :\n  n >\
  \ 0 →\n  int_diff arr n = int_diff (arr.map (· * 2)) (n * 2) := sorry\n\n\ntheorem\
  \ int_diff_empty (n : Int) :\n  int_diff [] n = 0 := sorry\n\n\ntheorem int_diff_identical\
  \ (arr : List Int) (n : Int) (x : Int) :\n  n > 0 →\n  arr.all (· = x) →\n  int_diff\
  \ arr n = 0 := sorry\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval int_diff [1, 1,\
  \ 5, 6, 9, 16, 27] 4\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval int_diff [1, 1,\
  \ 3, 3] 2\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval int_diff [4, 8, 12, 12, 3,\
  \ 6, 2] 6\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
