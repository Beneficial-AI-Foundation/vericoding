"vc-description": "You have a sequence $a$ with length $N$ created by removing some\
  \ elements (possibly zero) from a permutation of numbers $(1, 2, \\dots, N)$. When\
  \ an element is removed, the length of the sequence doesn't change, but there is\
  \ an empty spot left where the removed element was. You also have an integer $K$.\n\
  Let's call a permutation $p_1, p_2, \\dots, p_N$ good if:\n- it is possible replace\
  \ empty spots in $a$ by numbers in such a way that we obtain the permutation $p$\n\
  - the number of positions $i$ ($1 < i \\le N$) such that $p_i > p_{i-1}$ is equal\
  \ to $K$\nYour task is to find the number of good permutations.\n\n-----Input-----\n\
  - The first line of the input contains a single integer $T$ denoting the number\
  \ of test cases. The description of $T$ test cases follows.\n- The first line of\
  \ each test case contains two space-separated integers $N$ and $K$.\n- The second\
  \ line contains $N$ space-separated integers $a_1, a_2, \\dots, a_N$. Each element\
  \ of this sequence is either $0$ (indicating an empty spot previously occupied by\
  \ a removed element) or an integer between $1$ and $N$ inclusive.\n\n-----Output-----\n\
  For each test case, print a single line containing one integer — the number of good\
  \ permutations.\n\n-----Constraints-----\n- $1 \\le T \\le 300$\n- $0 \\le K < N\
  \ \\le 8$\n- each integer between $1$ and $N$ inclusive appears in $a$ at most once\n\
  \n-----Example Input-----\n1\n3 1\n2 0 0\n\n-----Example Output-----\n2\n\n-----Explanation-----\n\
  Example case 1: The two possible good permutations are $(2,3,1)$ and $(2,1,3)$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve (N K : Nat) (arr : List Nat) : Nat := sorry\n\ntheorem\
  \ solve_result_in_range (N K : Nat) (arr : List Nat) :\n  1 ≤ (solve N K arr) ∧\
  \ (solve N K arr) ≤ N := by sorry\n"
"vc-theorems": "theorem solve_all_ones (n K : Nat) :\n  K = 0 → \n  let arr := List.replicate\
  \ n 1\n  solve n K arr = 1 := by sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
