"vc-description": "Salmon is playing a game!\nHe is given two integers $N$ and $K$.\
  \ His goal is to output $K$ pairs $(x_i,y_i)$. He creates a function $f$ such that\
  \ $f(x_i) = y_i$ and $f$ is undefined for all other values of $x$. His pairs must\
  \ then meet the following conditions:\n- All $x_i$ are distinct.\n- All $y_i$ are\
  \ distinct.\n- All $x_i, y_i$ are in the range $[0,2^N - 1]$ and are integers.\n\
  - $f(f(x_i))$ is defined for all $i$.\n- Let $H(x)$ be the number of set bits in\
  \ the binary representation of $x$. Then, $H(x_i) \\neq H(f(f(x_i)))$ for all $i$.\n\
  Unfortunately, Salmon is unable to solve this. Help Salmon win the game!\n\nIf there\
  \ are multiple correct solutions, you may output any one of them. It can be proven\
  \ that a solution exists for all $N$ and $K$ that meet constraints.\n\n-----Input-----\n\
  - The first line input contains a single integer $T$ denoting the number of testcases\n\
  - Each of the next $T$ lines contains two space-separated integers $N$ and $K$ respectively.\n\
  \n-----Output-----\n- Output $K$ lines for each testcase.\n- The $i$-th line of\
  \ a testcase should contain two space-separated integers: $x_i$ and $y_i$, following\
  \ the given constraints.\n\n-----Constraints-----\n- $1 \\leq T \\leq 2^{15}$\n\
  - $3 \\leq N \\leq 18$ \n- $3 \\leq K \\leq 2^N$ \n- The sum of $2^N$ over all testcases\
  \ doesn't exceed $2^{18}$\n\n-----Subtasks-----\n- Subtask 1 [20 points]: $K \\\
  leq 8$\n- Subtask 2 [40 points]: $K = 2^N$\n- Subtask 3 [40 points]: No additional\
  \ constraints.\n\n-----Sample Input-----\n2\n3 7\n4 6\n\n-----Sample Output-----\n\
  5 3\n1 7\n0 4\n2 5\n3 1\n4 2 \n7 0\n1 10\n10 14\n15 1\n14 13\n5 15\n13 5\n\n-----Explanation-----\n\
  In the answer to the first testcase, there are 7 pairs. $x_i$ and $y_i$ are all\
  \ in the range $[0,2^3 - 1]$, which is the range $[0,7]$. All values of $x_i$ are\
  \ distinct, and all values of $y_i$ are distinct. However, note that some integers\
  \ appear in both lists. For example, 5 appears both as $x_1$ and as $y_4$. This\
  \ is allowed. For all $x_i$, $f(f(x_i))$ is defined and $H(f(f(x_i))) \\neq H(x_i)$.\
  \ For example, $f(f(7)) = 4$. $H(7) = 3$, but $H(4) = 1$. Therefore, $H(f(f(7)))\
  \ \\neq H(7)$, as desired."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_salmon_game (n k : Nat) : List (Nat × Nat) := sorry \n\
  \ntheorem valid_edge_range {n k : Nat} {edges : List (Nat × Nat)}\n  (h1 : n ≥ 2)\
  \ (h2 : k ≥ 3) (h3 : k ≤ 2^n)\n  (h4 : edges = solve_salmon_game n k) :\n  ∀ (e\
  \ : Nat × Nat), e ∈ edges → \n    e.1 < 2^n ∧ e.2 < 2^n ∧ e.1 ≠ e.2 := sorry\n"
"vc-theorems": "theorem valid_edge_count {n k : Nat} {edges : List (Nat × Nat)} \n\
  \  (h1 : n ≥ 2) (h2 : k ≥ 3) (h3 : k ≤ 2^n)\n  (h4 : edges = solve_salmon_game n\
  \ k) :\n  edges.length = k := sorry\n\n\ntheorem forms_cycle {n k : Nat} {edges\
  \ : List (Nat × Nat)}\n  (h1 : n ≥ 2) (h2 : k ≥ 3) (h3 : k ≤ 2^n) \n  (h4 : edges\
  \ = solve_salmon_game n k) :\n  ∃ (start : Nat), start ∈ (edges.map Prod.fst) ∧\n\
  \  ∃ (vertices : List Nat), vertices.length = k ∧\n    vertices.head? = some start\
  \ ∧\n    ∀ i, i < k - 1 → \n      ∃ v1 v2, (v1, v2) ∈ edges ∧ \n      vertices.get?\
  \ i = some v1 ∧ \n      vertices.get? (i+1) = some v2 := sorry\n\n\ntheorem special_case_k3\
  \ {n : Nat} {edges : List (Nat × Nat)}\n  (h1 : n ≥ 2)\n  (h2 : edges = solve_salmon_game\
  \ n 3) :\n  edges = [(0,1), (1,3), (3,0)] := sorry\n\n\ntheorem special_case_k4_cycle\
  \ {n : Nat} {edges : List (Nat × Nat)}\n  (h1 : n ≥ 2)\n  (h2 : edges = solve_salmon_game\
  \ n 4) :\n  edges.length = 4 ∧\n  ∃ (start : Nat), start ∈ (edges.map Prod.fst)\
  \ ∧\n  ∃ (vertices : List Nat), vertices.length = 4 ∧\n    vertices.head? = some\
  \ start ∧\n    ∀ i, i < 3 → \n      ∃ v1 v2, (v1, v2) ∈ edges ∧ \n      vertices.get?\
  \ i = some v1 ∧ \n      vertices.get? (i+1) = some v2 := sorry\n\n/--\ninfo: k\n\
  -/\n#guard_msgs in\n#eval len solve_salmon_game(n, k)\n\n/--\ninfo: k\n-/\n#guard_msgs\
  \ in\n#eval len solve_salmon_game(n, k)\n\n/--\ninfo: k\n-/\n#guard_msgs in\n#eval\
  \ len solve_salmon_game(n, k)\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
