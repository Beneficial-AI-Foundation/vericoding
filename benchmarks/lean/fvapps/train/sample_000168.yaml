"vc-description": "Given an integer array nums, find the contiguous subarray within\
  \ an array (containing at least one number) which has the largest product.\n\nExample\
  \ 1:\n\n\nInput: [2,3,-2,4]\nOutput: 6\nExplanation: [2,3] has the largest product\
  \ 6.\n\n\nExample 2:\n\n\nInput: [-2,0,-1]\nOutput: 0\nExplanation: The result cannot\
  \ be 2, because [-2,-1] is not a subarray."
"vc-preamble": "import Imports.AllImports\n\ndef maxProduct (nums : List Int) : Int\
  \ := sorry\n\ndef listMax (xs : List Int) : Int :=\n  match xs with\n  | [] => 0\n\
  \  | h :: t => List.foldl max h t\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def listProd (xs : List Int) : Int :=\n  match xs with\n  | []\
  \ => 1\n  | h :: t => List.foldl (· * ·) h t\n"
"vc-theorems": "theorem maxProduct_empty_list :\n  maxProduct [] = 0 := sorry\n\n\n\
  theorem maxProduct_single_element (x : Int) :\n  maxProduct [x] = x := sorry\n\n\
  \n\n\ntheorem maxProduct_nonneg_with_zero (nums : List Int) :\n  (0 ∈ nums) → maxProduct\
  \ nums ≥ 0 := sorry\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval maxProduct [2, 3,\
  \ -2, 4]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval maxProduct [-2, 0, -1]\n\n/--\n\
  info: 24\n-/\n#guard_msgs in\n#eval maxProduct [-2, 3, -4]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
