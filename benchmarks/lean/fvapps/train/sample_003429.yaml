"vc-description": "Define a \"prime prime\" number to be a rational number written\
  \ as one prime number over another prime number: `primeA / primeB` (e.g. `7/31`)\n\
  \nGiven a whole number `N`, generate the number of \"prime prime\" rational numbers\
  \ less than 1, using only prime numbers between `0` and `N` (non inclusive).\n\n\
  Return the count of these \"prime primes\", and the integer part  of their sum.\n\
  \n## Example\n\n```python\nN = 6\n\n# The \"prime primes\" less than 1 are:\n2/3,\
  \ 2/5, 3/5               # count: 3\n\n2/3 + 2/5 + 3/5 = 1.6667    # integer part:\
  \ 1\n\nThus, the function should return 3 and 1.\n```"
"vc-preamble": "import Imports.AllImports\n\ndef sieve (n : Nat) : List Nat := sorry\n\
  \ndef prime_primes (n : Nat) : Nat × Nat := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_prime (n : Nat) : Bool := sorry\n\ntheorem sieve_sorted\
  \ (n : Nat) (h : n ≥ 2) :\n  let primes := sieve n\n  ∀ i h1 h2, primes.get ⟨i,\
  \ h1⟩ < primes.get ⟨i+1, h2⟩ := sorry\n\n\n\n\n"
"vc-theorems": "theorem prime_primes_nonneg (n : Nat) (h : n ≥ 2) :\n  let (count,\
  \ total) := prime_primes n\n  count ≥ 0 ∧ total ≥ 0 := sorry\n\n\n\n\n\n\ntheorem\
  \ prime_primes_small_bound (n : Nat) (h : n ≥ 2) (h2 : n ≤ 10) :\n  let (count,\
  \ _) := prime_primes n\n  count ≤ n * n / 2 := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
