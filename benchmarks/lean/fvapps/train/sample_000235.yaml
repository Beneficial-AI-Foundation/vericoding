"vc-description": "We have a set of items: the i-th item has value values[i] and label\
  \ labels[i].\nThen, we choose a subset S of these items, such that:\n\n|S| <= num_wanted\n\
  For every label L, the number of items in S with label L is <= use_limit.\n\nReturn\
  \ the largest possible sum of the subset S.\n \n\nExample 1:\nInput: values = [5,4,3,2,1],\
  \ labels = [1,1,2,2,3], num_wanted = 3, use_limit = 1\nOutput: 9\nExplanation: The\
  \ subset chosen is the first, third, and fifth item.\n\n\nExample 2:\nInput: values\
  \ = [5,4,3,2,1], labels = [1,3,3,3,2], num_wanted = 3, use_limit = 2\nOutput: 12\n\
  Explanation: The subset chosen is the first, second, and third item.\n\n\nExample\
  \ 3:\nInput: values = [9,8,8,7,6], labels = [0,0,0,1,1], num_wanted = 3, use_limit\
  \ = 1\nOutput: 16\nExplanation: The subset chosen is the first and fourth item.\n\
  \n\nExample 4:\nInput: values = [9,8,8,7,6], labels = [0,0,0,1,1], num_wanted =\
  \ 3, use_limit = 2\nOutput: 24\nExplanation: The subset chosen is the first, second,\
  \ and fourth item.\n\n \nNote:\n\n1 <= values.length == labels.length <= 20000\n\
  0 <= values[i], labels[i] <= 20000\n1 <= num_wanted, use_limit <= values.length"
"vc-preamble": "import Imports.AllImports\n\ndef largest_vals_from_labels (values:\
  \ List Int) (labels: List Int) (numWanted: Nat) (useLimit: Nat) : Int :=\n  sorry\n\
  \n\ndef List.sum : List Int → Int \n  | [] => 0\n  | x::xs => x + List.sum xs\n\n\
  \ndef myMax (a b : Int) : Int :=\n  if a ≥ b then a else b\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def List.maximum : List Int → Int\n  | [] => 0\n  | [x] => x\n\
  \  | x::xs => myMax x (List.maximum xs)\n"
"vc-theorems": "theorem largest_vals_sum_bound (values: List Int) (labels: List Int)\
  \ (numWanted: Nat) (useLimit: Nat)\n  (h1: values.length = labels.length)\n  (h2:\
  \ numWanted > 0)\n  (h3: useLimit > 0) :\n  largest_vals_from_labels values labels\
  \ numWanted useLimit ≤ \n    (List.sum (values.filter (λ x => x > 0))) :=\n  sorry\n\
  \n\ntheorem largest_vals_nonneg (values: List Int) (labels: List Int) (numWanted:\
  \ Nat) (useLimit: Nat)\n  (h1: values.length = labels.length)\n  (h2: numWanted\
  \ > 0)\n  (h3: useLimit > 0)\n  (h4: ∀ x ∈ values, x ≥ 0) :\n  largest_vals_from_labels\
  \ values labels numWanted useLimit ≥ 0 :=\n  sorry\n\n\ntheorem largest_vals_use_limit\
  \ (values: List Int) (labels: List Int) (numWanted: Nat) (useLimit: Nat)\n  (h1:\
  \ values.length = labels.length)\n  (h2: numWanted > 0)\n  (h3: useLimit > 0)\n\
  \  (label: Int) : \n  let filtered := (values.zip labels).filter (λ p => p.1 = label)\n\
  \  filtered.length ≤ useLimit :=\n  sorry\n\n\ntheorem largest_vals_single_label\
  \ (values: List Int) (h: values.length > 0) :\n  largest_vals_from_labels values\
  \ (List.replicate values.length 0) 1 1 = List.maximum values :=\n  sorry\n\n/--\n\
  info: 9\n-/\n#guard_msgs in\n#eval largest_vals_from_labels [5, 4, 3, 2, 1] [1,\
  \ 1, 2, 2, 3] 3 1\n\n/--\ninfo: 12\n-/\n#guard_msgs in\n#eval largest_vals_from_labels\
  \ [5, 4, 3, 2, 1] [1, 3, 3, 3, 2] 3 2\n\n/--\ninfo: 16\n-/\n#guard_msgs in\n#eval\
  \ largest_vals_from_labels [9, 8, 8, 7, 6] [0, 0, 0, 1, 1] 3 1\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
