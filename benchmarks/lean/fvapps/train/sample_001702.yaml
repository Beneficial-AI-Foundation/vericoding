"vc-description": "The Vigenère cipher is a classic cipher originally developed by\
  \ Italian cryptographer Giovan Battista Bellaso and published in 1553. It is named\
  \ after a later French cryptographer Blaise de Vigenère, who had developed a stronger\
  \ autokey cipher (a cipher that incorporates the message of the text into the key).\
  \ \n\nThe cipher is easy to understand and implement, but survived three centuries\
  \ of attempts to break it, earning it the nickname \"le chiffre indéchiffrable\"\
  \ or \"the indecipherable cipher.\"\n\n[From Wikipedia](https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher):\n\
  \n> The Vigenère cipher is a method of encrypting alphabetic text by using a series\
  \ of different Caesar ciphers based on the letters of a keyword. It is a simple\
  \ form of polyalphabetic substitution.\n>\n> . . .\n>\n> In a Caesar cipher, each\
  \ letter of the alphabet is shifted along some number of places; for example, in\
  \ a Caesar cipher of shift `3`, `A` would become `D`, `B` would become `E`, `Y`\
  \ would become `B` and so on. The Vigenère cipher consists of several Caesar ciphers\
  \ in sequence with different shift values.\n\nAssume the key is repeated for the\
  \ length of the text, character by character. Note that some implementations repeat\
  \ the key over characters only if they are part of the alphabet -- **this is not\
  \ the case here.**\n\nThe shift is derived by applying a Caesar shift to a character\
  \ with the corresponding index of the key in the alphabet.\n\nVisual representation:\n\
  Write a class that, when given a key and an alphabet, can be used to encode and\
  \ decode from the cipher.\n\n## Example\nAny character not in the alphabet must\
  \ be left as is. For example (following from above):"
"vc-preamble": "import Imports.AllImports\n\ndef isLower (c : Char) : Bool := sorry\n\
  def isUpper (c : Char) : Bool := sorry"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def toLower (c : Char) : Char := sorry\ndef charInString (c : Char)\
  \ (s : String) : Bool := sorry\n"
"vc-theorems": "theorem encode_decode_roundtrip (cipher : VigenereCipher) (text :\
  \ String) :\n  cipher.decode (cipher.encode text) = text := sorry\n\n\ntheorem case_preservation\
  \ (cipher : VigenereCipher) (text encoded : String)\n  (h1 : encoded = cipher.encode\
  \ text) \n  (h2 : ∃ i c1 c2, text.get? i = some c1 ∧ encoded.get? i = some c2 ∧\
  \ charInString (toLower c1) cipher.alphabet) :\n  ∀ i c1 c2, text.get? i = some\
  \ c1 → encoded.get? i = some c2 → charInString (toLower c1) cipher.alphabet →\n\
  \  isUpper c1 = isUpper c2 := sorry \n\n\ntheorem special_char_preservation (cipher\
  \ : VigenereCipher) (text encoded : String)\n  (h1 : encoded = cipher.encode text)\n\
  \  (h2 : ∃ i c1 c2, text.get? i = some c1 ∧ encoded.get? i = some c2 ∧ ¬charInString\
  \ (toLower c1) cipher.alphabet) :\n  ∀ i c1 c2, text.get? i = some c1 → encoded.get?\
  \ i = some c2 → ¬charInString (toLower c1) cipher.alphabet →\n  c1 = c2 := sorry\n\
  \n\ntheorem empty_string (cipher : VigenereCipher) :\n  cipher.encode \"\" = \"\"\
  \ ∧ cipher.decode \"\" = \"\" := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
