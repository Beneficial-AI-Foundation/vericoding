"vc-description": "For all x in the range of integers [0, 2 ** n), let y[x] be the\
  \ binary exclusive-or of x and x // 2. Find the sum of all numbers in y.\n\nWrite\
  \ a function sum_them that, given n, will return the value of the above sum.\n\n\
  This can be implemented a simple loop as shown in the initial code. But once n starts\
  \ getting to higher numbers, such as 2000 (which will be tested), the loop is too\
  \ slow.\n\nThere is a simple solution that can quickly find the sum. Find it!\n\n\
  Assume that n is a nonnegative integer.\n\nHint: The complete solution can be written\
  \ in two lines."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sum_them (n : Nat) : Nat := sorry\n\n@[simp]"
"vc-theorems": "theorem sum_them_non_negative (n : Nat) : \n  sum_them n ≥ 0 := sorry\n\
  \n@[simp] \n\ntheorem sum_them_zero :\n  sum_them 0 = 0 := sorry\n\n\ntheorem sum_them_monotonic\
  \ (n : Nat) :\n  n > 0 → sum_them n > sum_them (n-1) := sorry\n\n\ntheorem sum_them_closed_form\
  \ (n : Nat) :\n  n > 0 → sum_them n = 2^(n-1) * (2^n - 1) := sorry\n\n/--\ninfo:\
  \ 0\n-/\n#guard_msgs in\n#eval sum_them 0\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n\
  #eval sum_them 1\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval sum_them 2\n\n/--\n\
  info: 28\n-/\n#guard_msgs in\n#eval sum_them 3\n\n/--\ninfo: 120\n-/\n#guard_msgs\
  \ in\n#eval sum_them 4\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
