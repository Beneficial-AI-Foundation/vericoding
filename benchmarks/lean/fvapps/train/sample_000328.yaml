"vc-description": "There are N gas stations along a circular route, where the amount\
  \ of gas at station i is gas[i].\n\nYou have a car with an unlimited gas tank and\
  \ it costs cost[i] of gas to travel from station i to its next station (i+1). You\
  \ begin the journey with an empty tank at one of the gas stations.\n\nReturn the\
  \ starting gas station's index if you can travel around the circuit once in the\
  \ clockwise direction, otherwise return -1.\n\nNote:\n\n\n       If there exists\
  \ a solution, it is guaranteed to be unique.\n       Both input arrays are non-empty\
  \ and have the same length.\n       Each element in the input arrays is a non-negative\
  \ integer.\n\n\nExample 1:\n\n\nInput: \ngas  = [1,2,3,4,5]\ncost = [3,4,5,1,2]\n\
  \nOutput: 3\n\nExplanation:\nStart at station 3 (index 3) and fill up with 4 unit\
  \ of gas. Your tank = 0 + 4 = 4\nTravel to station 4. Your tank = 4 - 1 + 5 = 8\n\
  Travel to station 0. Your tank = 8 - 2 + 1 = 7\nTravel to station 1. Your tank =\
  \ 7 - 3 + 2 = 6\nTravel to station 2. Your tank = 6 - 4 + 3 = 5\nTravel to station\
  \ 3. The cost is 5. Your gas is just enough to travel back to station 3.\nTherefore,\
  \ return 3 as the starting index.\n\n\nExample 2:\n\n\nInput: \ngas  = [2,3,4]\n\
  cost = [3,4,3]\n\nOutput: -1\n\nExplanation:\nYou can't start at station 0 or 1,\
  \ as there is not enough gas to travel to the next station.\nLet's start at station\
  \ 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 0.\
  \ Your tank = 4 - 3 + 2 = 3\nTravel to station 1. Your tank = 3 - 3 + 3 = 3\nYou\
  \ cannot travel back to station 2, as it requires 4 unit of gas but you only have\
  \ 3.\nTherefore, you can't travel around the circuit once no matter where you start."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def can_complete_circuit (gas : List Nat) (cost : List Nat) : Int\
  \ := sorry\n\ntheorem can_complete_circuit_valid_result {gas cost : List Nat} (h:\
  \ gas.length > 0) (h2: cost.length > 0) :\n  let result := can_complete_circuit\
  \ gas cost\n  result = -1 ∨ (0 ≤ result ∧ result < gas.length) := sorry\n"
"vc-theorems": "theorem insufficient_gas_implies_no_solution {gas cost : List Nat}\
  \ (h: gas.length > 0) (h2: cost.length > 0) :\n  (gas.foldl (· + ·) 0 < cost.foldl\
  \ (· + ·) 0) →\n  can_complete_circuit gas cost = -1 := sorry\n\n\ntheorem valid_result_implies_complete_circuit\
  \ {gas cost : List Nat} (h: gas.length > 0) (h2: cost.length > 0) :\n  let result\
  \ := can_complete_circuit gas cost\n  result ≠ -1 →\n  ∀ i : Nat, i < gas.length\
  \ →\n  let tank := List.range i |>.foldl (fun acc j => \n    acc + gas[(result.toNat\
  \ + j) % gas.length]! - cost[(result.toNat + j) % gas.length]!) 0\n  tank ≥ 0 :=\
  \ sorry\n\n\ntheorem identical_gas_cost {values : List Nat} (h: values.length >\
  \ 0) :\n  can_complete_circuit values values = 0 := sorry\n\n/--\ninfo: 3\n-/\n\
  #guard_msgs in\n#eval can_complete_circuit [1, 2, 3, 4, 5] [3, 4, 5, 1, 2]\n\n/--\n\
  info: -1\n-/\n#guard_msgs in\n#eval can_complete_circuit [2, 3, 4] [3, 4, 3]\n\n\
  /--\ninfo: 4\n-/\n#guard_msgs in\n#eval can_complete_circuit [5, 1, 2, 3, 4] [4,\
  \ 4, 1, 5, 1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
