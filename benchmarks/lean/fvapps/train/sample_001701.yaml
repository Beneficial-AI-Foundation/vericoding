"vc-description": "Given a set of integers _S_, the _closure of S under multiplication_\
  \ is the smallest set that contains _S_ and such that for any _x, y_ in the closure\
  \ of _S_, the product _x * y_ is also in the closure of _S_. \n\nExample 1: Given\
  \ `S = {2}`, the closure of `S` is the set `{2, 4, 8, 16, 32, 64, ... }`.\n\nExample\
  \ 2: Given `S = {1, 2, 3}`, the closure of `S` is the set `{1, 2, 3, 4, 6, 8, 9,\
  \ 12, 16, 18, 24, 27, 32, 36, ...}`. This set contains, e.g, `6` because `6 = 2\
  \ * 3`. It further contains `12` and `18` because `12 = 2 * 6` and `18 = 3 * 6`.\
  \ Etc. \n\nExample 3: Given `S` the set of prime numbers, the closure of `S` is\
  \ the set of all positive integers greater than or equal to `2`. \n\nYour task is\
  \ two write a generator function that generates the members of the closure of any\
  \ given _finite_ set of positive numbers `S` in _ascending order_."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def closure_gen : List Nat → List Nat\n  | _ => sorry\n"
"vc-theorems": "theorem closure_is_ordered (s: List Nat) (h: s.length > 0) (h₂: ∀\
  \ x, x ∈ s → 1 ≤ x ∧ x ≤ 10) (i j: Nat) (h₃: i < j) :\n  let res := closure_gen\
  \ s\n  ∀ x y, x ∈ res → y ∈ res → (res.get! i = x ∧ res.get! j = y) → x < y := sorry\n\
  \n\ntheorem minimal_closure (n: Nat) (h: 2 ≤ n ∧ n ≤ 3) :\n  let res := closure_gen\
  \ [n]\n  res.get! 0 = n ∧ res.get! 1 = n * n := sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs\
  \ in\n#eval next closure_gen(2)\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval next\
  \ g1\n\n/--\ninfo: 8\n-/\n#guard_msgs in\n#eval next g1\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
