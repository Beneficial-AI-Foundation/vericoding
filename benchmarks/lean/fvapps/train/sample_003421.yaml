"vc-description": "Not considering number 1, the integer 153 is the first integer\
  \ having this property:\nthe sum of the third-power of each of its digits  is equal\
  \ to 153. Take a look:\n153 = 1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153\n\nThe next number\
  \ that experiments this particular behaviour is 370 with the same power.\n\nWrite\
  \ the function `eq_sum_powdig()`, that finds the numbers below a given upper limit\
  \ `hMax` that fulfill this property but with different exponents as a power for\
  \ the digits.\n\neq_sum_powdig(hMax, exp): ----> sequence of numbers (sorted list)\
  \ (Number one should not be considered).\n\nLet's see some cases:\n```python\neq_sum_powdig(100,\
  \ 2) ----> []\n\neq_sum_powdig(1000, 2) ----> []\n\neq_sum_powdig(200, 3) ---->\
  \ [153]\n\neq_sum_powdig(370, 3) ----> [153, 370]\n```\nEnjoy it !!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def eq_sum_powdig (hmax : Nat) (exp : Nat) : List Nat := sorry\n\
  \ndef sum_digit_powers : Nat → Nat → Nat := sorry\n\n\n"
"vc-theorems": "theorem eq_sum_powdig_increasing_range {hmax : Nat} (h : hmax ≥ 1)\
  \ :\n  let small_result := eq_sum_powdig hmax 3;\n  let large_result := eq_sum_powdig\
  \ (hmax + 100) 3;\n  ∀ x ∈ small_result, x ∈ large_result := sorry\n\n\ntheorem\
  \ eq_sum_powdig_known_values :\n  153 ∈ eq_sum_powdig 153 3 ∧ 370 ∈ eq_sum_powdig\
  \ 370 3 := sorry\n\n/--\ninfo: []\n-/\n#guard_msgs in\n#eval eq_sum_powdig 100 2\n\
  \n/--\ninfo: [153]\n-/\n#guard_msgs in\n#eval eq_sum_powdig 200 3\n\n/--\ninfo:\
  \ [153, 370]\n-/\n#guard_msgs in\n#eval eq_sum_powdig 370 3\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
