"vc-description": "< PREVIOUS KATA\nNEXT KATA >\n \n###Task:\n\nYou have to write\
  \ a function `pattern` which returns the following Pattern(See Examples) upto (3n-2)\
  \ rows, where n is parameter.\n\n* Note:`Returning` the pattern is not the same\
  \ as `Printing` the pattern.\n\n####Rules/Note:\n* The pattern should be created\
  \ using only unit digits.\n* If `n < 1` then it should return \"\" i.e. empty string.\n\
  * `The length of each line is same`, and is equal to the length of longest line\
  \ in the pattern i.e. `length = (3n-2)`.\n* Range of Parameters (for the sake of\
  \ CW Compiler) :\n  + `n ∈ (-∞,50]`\n\n###Examples:\n\n  + pattern(5) :\n\n    \
  \        11111    \n            22222    \n            33333    \n            44444\
  \    \n        1234555554321\n        1234555554321\n        1234555554321\n   \
  \     1234555554321\n        1234555554321\n            44444    \n            33333\
  \    \n            22222    \n            11111    \n        \n  + pattern(11):\n\
  \n                  11111111111          \n                  22222222222       \
  \   \n                  33333333333          \n                  44444444444   \
  \       \n                  55555555555          \n                  66666666666\
  \          \n                  77777777777          \n                  88888888888\
  \          \n                  99999999999          \n                  00000000000\
  \          \n        1234567890111111111110987654321\n        1234567890111111111110987654321\n\
  \        1234567890111111111110987654321\n        1234567890111111111110987654321\n\
  \        1234567890111111111110987654321\n        1234567890111111111110987654321\n\
  \        1234567890111111111110987654321\n        1234567890111111111110987654321\n\
  \        1234567890111111111110987654321\n        1234567890111111111110987654321\n\
  \        1234567890111111111110987654321\n                  00000000000        \
  \  \n                  99999999999          \n                  88888888888    \
  \      \n                  77777777777          \n                  66666666666\
  \          \n                  55555555555          \n                  44444444444\
  \          \n                  33333333333          \n                  22222222222\
  \          \n                  11111111111          \n                  \n>>>LIST\
  \ OF ALL MY KATAS<<<"
"vc-preamble": "import Imports.AllImports\n\ndef pattern (n : Nat) : String := sorry\
  \ \n\ndef isSingleDigit (c: Char) : Bool :=\n  '0' ≤ c ∧ c ≤ '9'\n\n\ndef stringContainsSubstr\
  \ (s : String) (substr : String) : Bool := sorry\ndef stringContainsChar (s : String)\
  \ (c : Char) : Bool := sorry"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def stringRepeat (n : Nat) (s : String) : String := sorry\n\ntheorem\
  \ non_positive_input_returns_empty_string {n : Int} (h : n ≤ 0) :\n  pattern n.toNat\
  \ = \"\" := sorry\n"
"vc-theorems": "theorem single_digit_correct {n : Nat} (h1 : n ≥ 1) (h2 : n ≤ 9) :\n\
  \  let lines := (pattern n).splitOn \"\\n\"\n  let middle := lines.get! (n-1)\n\
  \  (∀ i : Nat, 1 ≤ i ∧ i < n → stringContainsSubstr middle (toString i)) ∧\n  stringContainsSubstr\
  \ middle (stringRepeat n (toString n)) := sorry\n\n\ntheorem double_digit_wrapping\
  \ {n : Nat} (h1 : n ≥ 10) (h2 : n ≤ 100) :\n  let lines := (pattern n).splitOn \"\
  \\n\"\n  let middle := lines.get! (n-1)\n  ∀ c ∈ middle.data, isSingleDigit c :=\
  \ sorry\n\n/--\ninfo: expected1\n-/\n#guard_msgs in\n#eval pattern 3\n\n/--\ninfo:\
  \ expected2\n-/\n#guard_msgs in\n#eval pattern 5\n\n/--\ninfo: ''\n-/\n#guard_msgs\
  \ in\n#eval pattern -3\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
