"vc-description": "If you like cryptography and playing cards, have also a look at\
  \ the kata [Card-Chameleon, a Cipher with Playing cards](http://www.codewars.com/kata/card-chameleon-a-cipher-with-playing-cards).\n\
  \n\n\nAs a secret agent, you need a method to transmit a message to another secret\
  \ agent. But an encrypted text written on a notebook will be suspicious if you get\
  \ caught. A simple deck of playing cards, however, is everything but suspicious...\n\
  \nWith a deck of 52 playing cards, there are `52!` different possible permutations\
  \ to order it. And `52!` is equal to `80658175170943878571660636856403766975289505440883277824000000000000`.\
  \ That's a number with [68 digits](https://www.wolframalpha.com/input/?i=52!)!\n\
  \nThere are so many different possible permutations, we can affirm that if you shuffle\
  \ the cards well and put them back together to form a deck, you are the first one\
  \ in history to get this particular order. The number of possible permutations in\
  \ a deck of cards is higher than the estimated number of atoms in planet Earth (which\
  \ is a number with about [50 digits](https://www.wolframalpha.com/input/?i=number+of+atoms+in+earth)).\n\
  \nWith a way to associate a permutation of the cards to a sequence of characters,\
  \ we can hide a message in the deck by ordering it correctly.\n\n---\n\n# Correspondence\
  \ between message and permutation\n\n## Message\n\nTo compose our message, we will\
  \ use an alphabet containing 27 characters: the space and the letters from A to\
  \ Z. We give them the following values:\n\n`\" \" = 0, A = 1, B = 2, ..., Z = 26`\n\
  \nWe now have a [numeral system](https://en.wikipedia.org/wiki/Numeral_system) with\
  \ a base equal to 27. We can compute a numeric value corresponding to any message:\n\
  \n`\"A \" = 27`\n`\"AA\" = 28`\n`\"AB\" = 29`\n`\"ABC\" = 786`\netc.\n\n## Permutation\n\
  \nNow we need a way to attribute a unique number to each of the possible [permutations](https://en.wikipedia.org/wiki/Permutation)\
  \ of our deck of playing cards.\n\nThere are few methods to [enumerate permutations](https://en.wikipedia.org/wiki/Permutation#Algorithms_to_generate_permutations)\
  \ and [assign a number](https://en.wikipedia.org/wiki/Permutation#Numbering_permutations)\
  \ to each of them, we will use the [lexicographical order](https://en.wikipedia.org/wiki/Lexicographical_order).\
  \ With three cards, A, B, and C, as an example, it gives:\n\n`ABC = 0`\n`ACB = 1`\n\
  `BAC = 2`\n`BCA = 3`\n`CAB = 4`\n`CBA = 5`\n\nSo the first arrangement is ABC, and\
  \ the last one is CBA. With our 52 playing cards – ranks sorted from the Ace to\
  \ the King, and suits in alphabetical order (Clubs, Diamonds, Hearts, Spades) –\
  \ the first arrangement (number `0`) is:\n\n\n\nand the last one (number `52! -\
  \ 1`) is:\n\n\n\nTo transmit a message, we will compute the permutation for which\
  \ the unique number is the numeric value of the message.\n\n---\n\n# Your task\n\
  \nWrite two functions:\n\n* ```python\nencode(message)\n```\n```if:java\nWhich takes\
  \ a message as argument and returns a deck of playing cards ordered to hide the\
  \ message (or `null` if the message contains invalid characters or has a numeric\
  \ value greater than or equal to `52!`).\n```\n```if:python\nWhich takes a String\
  \ containing a message, and returns an array of Strings representing a deck of playing\
  \ cards ordered to hide the message (or `None` if the message contains invalid characters\
  \ or has a numeric value greater than or equal to `52!`).\n```\n```if:elixir\nWhich\
  \ takes a string containing a message, and returns a list of strings representing\
  \ a deck of playing cards ordered to hide the message (or `nil` if the message contains\
  \ invalid characters or has a numeric value greater than or equal to `52!`).\n```\n\
  \n* ```python\ndecode(deck)\n```\n```if:java\nWhich takes a deck of playing cards\
  \ as argument and returns the message hidden inside (or `null` if the deck contains\
  \ invalid cards, more than one time a single card, or doesn't contain 52 cards).\n\
  ```\n```if:python\nWhich takes an array of Strings representing a deck of playing\
  \ cards, and returns the message that is hidden inside (or `None` if the deck contains\
  \ invalid cards, more than one time a single card, or doesn't contain 52 cards).\n\
  ```\n```if:elixir\nWhich takes a list of strings representing a deck of playing\
  \ cards, and returns the message that is hidden inside (or `nil` if the deck contains\
  \ invalid cards, more than one time a single card, or doesn't contain 52 cards).\n\
  ```\n\nEach card name, in a deck, is written with a two characters String: the rank\
  \ followed by the suit. So the first arrangement of the deck is represented like:\n\
  \n`AC 2C 3C 4C 5C 6C 7C 8C 9C TC JC QC KC` for the Clubs  \n`AD 2D 3D 4D 5D 6D 7D\
  \ 8D 9D TD JD QD KD` for the Diamonds  \n`AH 2H 3H 4H 5H 6H 7H 8H 9H TH JH QH KH`\
  \ for the Hearts  \n`AS 2S 3S 4S 5S 6S 7S 8S 9S TS JS QS KS` for the Spades\n\n\
  For your convenience, a preloaded method allows you to easily print a deck to the\
  \ output:\n\n```python\nprintDeck(deck, unicode)\n```\n\nThe first argument is the\
  \ deck to print, the second one is a boolean value allowing you to choose between\
  \ simple text or Unicode display. (For Unicode, you need to have a font, on your\
  \ system, that contains the playing cards Unicode characters.)\n\n---\n\n# Examples\n\
  \n## Encoding\n\n```python\nplayingCards.encode(\"ATTACK TONIGHT ON CODEWARS\")\n\
  ```\n\nshould return an array of 52 Strings containing:\n\n```python\n[\n    \"\
  AC\", \"2C\", \"3C\", \"4C\", \"5C\", \"6C\", \"7C\", \"8C\", \"9C\", \"TC\", \"\
  JC\", \"QC\", \"KC\",\n    \"AD\", \"2D\", \"3D\", \"4D\", \"5D\", \"6D\", \"JD\"\
  , \"9D\", \"7S\", \"9S\", \"QD\", \"5S\", \"TH\",\n    \"7D\", \"TS\", \"QS\", \"\
  2H\", \"JS\", \"6H\", \"3S\", \"6S\", \"TD\", \"8S\", \"2S\", \"8H\", \"7H\",\n\
  \    \"4S\", \"4H\", \"3H\", \"5H\", \"AS\", \"KH\", \"QH\", \"9H\", \"KD\", \"\
  KS\", \"JH\", \"8D\", \"AH\"\n]\n```\n\n## Decoding\n\n```python\nplayingCards.decode([\n\
  \    \"AC\", \"2C\", \"3C\", \"4C\", \"5C\", \"6C\", \"7C\", \"8C\", \"9C\", \"\
  TC\", \"JC\", \"QC\", \"KC\",\n    \"AD\", \"2D\", \"3D\", \"4D\", \"5D\", \"6D\"\
  , \"7D\", \"8D\", \"9D\", \"TD\", \"JD\", \"QD\", \"KD\",\n    \"AH\", \"2H\", \"\
  3H\", \"4H\", \"8H\", \"9S\", \"3S\", \"2S\", \"8S\", \"TS\", \"QS\", \"9H\", \"\
  7H\",\n    \"KH\", \"AS\", \"JH\", \"4S\", \"KS\", \"JS\", \"5S\", \"TH\", \"7S\"\
  , \"6S\", \"5H\", \"QH\", \"6H\"\n])\n```\n\nshould return a String containing:\n\
  \n```python\n\"ATTACK APPROVED\"\n```\n\n---\n\n# Further readings\n\n## Logarithm\n\
  \nWith the logarithm function, we can know how many digits, in a numeral system\
  \ of a certain base, are needed to represent a number. For example, `log base 2\
  \ of 52! = 225.58`, so we can store 225 bits of information in a deck of cards (and\
  \ 226 bits are needed to represent the value of `52!`). Also, `log base 27 of 52!\
  \ = 47.44`, so we can store [47](https://www.wolframalpha.com/input/?i=log+base+27+of+52!)\
  \ characters of our alphabet in a deck of cards (and some message with 48 characters,\
  \ but not all of them)."
"vc-preamble": "import Imports.AllImports\n\ndef validCharSet : String → Bool := \n\
  sorry\n\n\ndef isValidMessage (s : String) : Bool := \nsorry\n\n\ndef isValidCard\
  \ (s : String) : Bool :=\nsorry\n\n\ndef isValidDeck (d : List String) : Bool :=\
  \ \nsorry\n\nstructure PlayingCards where\n  cards : List String\n  chars : List\
  \ Char\n  encode : String → Option (List String)\n  decode : List String → Option\
  \ String\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def defaultPlayingCards : PlayingCards :=\nsorry\n"
"vc-theorems": "theorem encode_decode_roundtrip \n  {pc : PlayingCards} {msg : String}\
  \ (h : isValidMessage msg) :\n  match (pc.encode msg) with\n  | none => True \n\
  \  | some encoded => \n    (pc.decode encoded = some msg) ∧ \n    (encoded.length\
  \ = 52) ∧\n    (encoded.eraseDups = encoded) ∧\n    (∀ c, c ∈ encoded → c ∈ pc.cards)\n\
  \  := sorry\n\n\ntheorem decode_encode_roundtrip\n  {pc : PlayingCards} {deck :\
  \ List String} (h : isValidDeck deck) :\n  match (pc.decode deck) with\n  | none\
  \ => True\n  | some decoded => pc.encode decoded = some deck\n  := sorry\n\n\ntheorem\
  \ invalid_message_returns_none\n  {pc : PlayingCards} {msg : String} :\n  (¬ msg.all\
  \ (fun c => c ∈ pc.chars)) → \n  pc.encode msg = none\n  := sorry\n\n\ntheorem invalid_deck_returns_none\n\
  \  {pc : PlayingCards} {deck : List String} :\n  (deck.length ≠ 52 ∨ deck.eraseDups.length\
  \ ≠ 52) →\n  pc.decode deck = none\n  := sorry\n\n\ntheorem empty_message_valid\n\
  \  (pc : PlayingCards) :\n  pc.encode \"\" ≠ none ∧\n  pc.decode (Option.get! (pc.encode\
  \ \"\")) = some \"\"\n  := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
