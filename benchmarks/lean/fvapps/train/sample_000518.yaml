"vc-description": "To help Lavanya learn all about binary numbers and binary sequences,\
  \ her father has bought her a collection of square tiles, each of which has either\
  \ a 0 or a 1 written on it. Her brother Nikhil has played a rather nasty prank.\
  \ He has glued together pairs of tiles with 0 written on them. Lavanya now has square\
  \ tiles with 1 on them and rectangular tiles with two 0's on them, made up of two\
  \ square tiles with 0 stuck together). Thus, she can no longer make all possible\
  \ binary sequences using these tiles.\nTo amuse herself, Lavanya has decided to\
  \ pick a number $N$ and try and construct as many binary sequences of length $N$\
  \ as possible using her collection of tiles. For example if $N$ = 1, she can only\
  \ make the sequence 1. For $N$=2, she can make 11 and 00. For $N$=4, there are 5\
  \ possibilities: 0011, 0000, 1001, 1100 and 1111.\nLavanya would like you to write\
  \ a program to compute the number of arrangements possible with $N$ tiles so that\
  \ she can verify that she has generated all of them. Since she cannot count beyond\
  \ 15746, it is sufficient to report this number modulo 15746.\n\n-----Input:-----\n\
  A single line with a single integer $N$.\n\n-----Output:-----\nA single integer\
  \ indicating the number of binary sequences of length $N$, modulo 15746, that Lavanya\
  \ can make using her tiles.\n\n-----Constraints:-----\nYou may assume that $N \\\
  leq$ 1000000.\n\n-----Sample Input:-----\n4\n\n-----Sample Output:-----\n5\n\n-----Explanation:-----\n\
  This corresponds to the example discussed above."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_binary_sequences (n : Nat) : Nat :=\nsorry\n"
"vc-theorems": "theorem count_binary_sequences_modulo_bounds (n : Nat) (h : n ≥ 1)\
  \ :\n  count_binary_sequences n < 15746 :=\nsorry\n\n\ntheorem count_binary_sequences_nonneg\
  \ (n : Nat) :\n  count_binary_sequences n ≥ 0 :=\nsorry\n\n\ntheorem count_binary_sequences_base_cases\
  \ :\n  count_binary_sequences 1 = 1 ∧ count_binary_sequences 2 = 2 :=\nsorry\n\n\
  /--\ninfo: 5\n-/\n#guard_msgs in\n#eval count_binary_sequences 4\n\n/--\ninfo: 1\n\
  -/\n#guard_msgs in\n#eval count_binary_sequences 1\n\n/--\ninfo: 2\n-/\n#guard_msgs\
  \ in\n#eval count_binary_sequences 2\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
