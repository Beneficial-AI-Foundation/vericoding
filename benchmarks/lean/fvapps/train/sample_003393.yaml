"vc-description": "Fibonacci numbers are generated by setting F0 = 0, F1 = 1, and\
  \ then using the formula:\n\n# Fn = Fn-1 + Fn-2\n\nYour task is to efficiently calculate\
  \ the **n**th element in the Fibonacci sequence and then count the occurrence of\
  \ each digit in the number. Return a list of integer pairs sorted in **descending**\
  \ order.\n\n10 ≤ n ≤ 100000\n\n## Examples\n```\nf(10) = 55  # returns [(2, 5)],\
  \ as there are two occurances of digit 5\n\nf(10000)    # returns:\n  [(254, 3),\n\
  \   (228, 2),\n   (217, 6),\n   (217, 0),\n   (202, 5),\n   (199, 1),\n   (198,\
  \ 7),\n   (197, 8),\n   (194, 4),\n   (184, 9)]\n```\nIf two integers have the same\
  \ count, sort them in descending order.\n\nYour algorithm must be efficient.\n\n\
  ~~~if:javascript\nSolving this Kata in Javascript requires the use of the bignumber.js\
  \ library. I have included starter code to assist you with using the library. Thanks\
  \ to `kazk` for assisting with the translation.\n~~~"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def fib_digits (n : Nat) : List (Nat × Nat) := sorry\n\n\n\ntheorem\
  \ fib_digits_bounds {n : Nat} (h : n ≥ 10) :\n  let result := fib_digits n\n  (∀\
  \ (count digit : Nat), (count, digit) ∈ result → \n    count > 0 ∧ digit ≤ 9) :=\
  \ sorry\n\n\n"
"vc-theorems": "theorem fib_digits_total_count {n : Nat} (h : n ≥ 10) :\n  let result\
  \ := fib_digits n\n  let pairs := result.toArray\n  let counts := Array.map Prod.fst\
  \ pairs\n  (Array.size counts > 0) := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
