vc-description: |-
  Similarly to the [previous kata](https://www.codewars.com/kata/string-subpattern-recognition-i/), you will need to return a boolean value if the base string can be expressed as the repetition of one subpattern.

  This time there are two small changes:

  * if a subpattern has been used, it will be repeated at least twice, meaning the subpattern has to be shorter than the original string;
  * the strings you will be given might or might not be created repeating a given subpattern, then shuffling the result.

  For example:

  ```python
  has_subpattern("a") == False #no repeated shorter sub-pattern, just one character
  has_subpattern("aaaa") == True #just one character repeated
  has_subpattern("abcd") == False #no repetitions
  has_subpattern("babababababababa") == True #repeated "ba"
  has_subpattern("bbabbaaabbaaaabb") == True #same as above, just shuffled
  ```
  Strings will never be empty and can be composed of any character (just consider upper- and lowercase letters as different entities) and can be pretty long (keep an eye on performances!).

  If you liked it, go for either the [previous kata](https://www.codewars.com/kata/string-subpattern-recognition-i/) or the [next kata](https://www.codewars.com/kata/string-subpattern-recognition-iii/) of the series!
vc-preamble: |
  import Imports.AllImports

  def has_subpattern (s : String) : Bool :=
    sorry


  def gcd (a b : Nat) : Nat :=
    sorry
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |-
  def reduce (f : Nat → Nat → Nat) (xs : List Nat) : Nat :=
    sorry
vc-theorems: |
  theorem single_char_string_property (s : String) :
    (s.length > 1 ∧ s.data.eraseDups.length = 1) → has_subpattern s
    ∧ 
    (s.length = 1) → ¬has_subpattern s :=
    sorry


  theorem repeat_property (s : String) :
    s.length ≥ 2 →
    has_subpattern s → 
    has_subpattern (s ++ s) ∧ has_subpattern (s ++ s ++ s) :=
    sorry
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible
