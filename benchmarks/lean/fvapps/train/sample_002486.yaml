"vc-description": "=====Function Descriptions=====\n.intersection()\n\nThe .intersection()\
  \ operator returns the intersection of a set and the set of elements in an iterable.\n\
  Sometimes, the & operator is used in place of the .intersection() operator, but\
  \ it only operates on the set of elements in set.\nThe set is immutable to the .intersection()\
  \ operation (or & operation).\n\n>>> s = set(\"Hacker\")\n>>> print s.intersection(\"\
  Rank\")\nset(['a', 'k'])\n\n>>> print s.intersection(set(['R', 'a', 'n', 'k']))\n\
  set(['a', 'k'])\n\n>>> print s.intersection(['R', 'a', 'n', 'k'])\nset(['a', 'k'])\n\
  \n>>> print s.intersection(enumerate(['R', 'a', 'n', 'k']))\nset([])\n\n>>> print\
  \ s.intersection({\"Rank\":1})\nset([])\n\n>>> s & set(\"Rank\")\nset(['a', 'k'])\n\
  \n=====Problem Statement=====\nThe students of District College have subscriptions\
  \ to English and French newspapers. Some students have subscribed only to English,\
  \ some have subscribed only to French, and some have subscribed to both newspapers.\n\
  \nYou are given two sets of student roll numbers. One set has subscribed to the\
  \ English newspaper, one set has subscribed to the French newspaper. Your task is\
  \ to find the total number of students who have subscribed to both newspapers.\n\
  \n=====Input Format=====\nThe first line contains n, the number of students who\
  \ have subscribed to the English newspaper.\nThe second line contains n space separated\
  \ roll numbers of those students.\nThe third line contains b, the number of students\
  \ who have subscribed to the French newspaper.\nThe fourth line contains b space\
  \ separated roll numbers of those students.\n\n=====Constraints=====\n0 < Total\
  \ number of students in college < 1000\n\n=====Output Format=====\nOutput the total\
  \ number of students who have subscriptions to both English and French newspapers."
"vc-preamble": "import Imports.AllImports\n\ndef List.toFinset {α : Type} (l : List\
  \ α) : Finset α :=\n  sorry\n\n\ndef count_dual_subscribers (eng: List Int) (fr:\
  \ List Int) : Nat :=\n  sorry\n\n\ndef intersection_size {α : Type} (l1 l2 : List\
  \ α) : Nat :=\n  sorry  \n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def uniqueCount {α : Type} (l : List α) : Nat :=\n  sorry\n"
"vc-theorems": "theorem count_dual_subscribers_bounded (eng fr: List Int) : \n  count_dual_subscribers\
  \ eng fr ≤ eng.length ∧ \n  count_dual_subscribers eng fr ≤ fr.length :=\nsorry\n\
  \n\ntheorem count_dual_subscribers_nonnegative (eng fr: List Int) :\n  count_dual_subscribers\
  \ eng fr ≥ 0 :=\nsorry\n\n\ntheorem count_dual_subscribers_equals_intersection (eng\
  \ fr: List Int) :\n  count_dual_subscribers eng fr = intersection_size eng fr :=\n\
  sorry\n\n\ntheorem count_dual_subscribers_symmetric (eng fr: List Int) :\n  count_dual_subscribers\
  \ eng fr = count_dual_subscribers fr eng :=\nsorry\n\n\ntheorem count_dual_subscribers_empty_list\
  \ (eng fr: List Int) :\n  count_dual_subscribers [] fr = 0 ∧\n  count_dual_subscribers\
  \ eng [] = 0 :=\nsorry\n\n\ntheorem count_dual_subscribers_same_list (xs: List Int)\
  \ :\n  count_dual_subscribers xs xs = uniqueCount xs :=\nsorry\n\n/--\ninfo: 5\n\
  -/\n#guard_msgs in\n#eval count_dual_subscribers [1, 2, 3, 4, 5, 6, 7, 8, 9] [10,\
  \ 1, 2, 3, 11, 21, 55, 6, 8]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval count_dual_subscribers\
  \ [1, 2, 3] [4, 5, 6]\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval count_dual_subscribers\
  \ [1, 2, 3] [1, 2, 3]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
