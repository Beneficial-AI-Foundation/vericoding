"vc-description": "Let's call some positive integer classy if its decimal representation\
  \ contains no more than $3$ non-zero digits. For example, numbers $4$, $200000$,\
  \ $10203$ are classy and numbers $4231$, $102306$, $7277420000$ are not.\n\nYou\
  \ are given a segment $[L; R]$. Count the number of classy integers $x$ such that\
  \ $L \\le x \\le R$.\n\nEach testcase contains several segments, for each of them\
  \ you are required to solve the problem separately.\n\n\n-----Input-----\n\nThe\
  \ first line contains a single integer $T$ ($1 \\le T \\le 10^4$) — the number of\
  \ segments in a testcase.\n\nEach of the next $T$ lines contains two integers $L_i$\
  \ and $R_i$ ($1 \\le L_i \\le R_i \\le 10^{18}$).\n\n\n-----Output-----\n\nPrint\
  \ $T$ lines — the $i$-th line should contain the number of classy integers on a\
  \ segment $[L_i; R_i]$.\n\n\n-----Example-----\nInput\n4\n1 1000\n1024 1024\n65536\
  \ 65536\n999999 1000001\n\nOutput\n1000\n1\n0\n2"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isClassyNumber (n : Nat) : Bool := sorry\n\ndef countClassyIntegers\
  \ (start : Nat) (finish : Nat) : Nat := sorry\n"
"vc-theorems": "theorem count_is_nonnegative (start finish : Nat) : \n  countClassyIntegers\
  \ start finish ≥ 0 := sorry\n\n\ntheorem count_bounded_by_range (start finish :\
  \ Nat) :\n  countClassyIntegers start finish ≤ finish - start + 1 := sorry\n\n\n\
  theorem empty_range_is_zero (start finish : Nat) :\n  start > finish → countClassyIntegers\
  \ start finish = 0 := sorry\n\n\ntheorem singleton_range_classy (n : Nat) :\n  countClassyIntegers\
  \ n n = (if isClassyNumber n then 1 else 0) := sorry\n\n/--\ninfo: 1000\n-/\n#guard_msgs\
  \ in\n#eval count_classy_integers 1 1000\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval\
  \ count_classy_integers 1024 1024\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval count_classy_integers\
  \ 999999 1000001\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
