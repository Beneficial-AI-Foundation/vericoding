"vc-description": "After six days, professor GukiZ decided to give more candies to\
  \ his students. Like last time, he has $N$ students, numbered $1$ through $N$. Let's\
  \ denote the number of candies GukiZ gave to the $i$-th student by $p_i$. As GukiZ\
  \ has a lot of students, he does not remember all the exact numbers of candies he\
  \ gave to the students. He only remembers the following properties of the sequence\
  \ $p$:\n- The numbers of candies given to each of the first $K$ students ($p_1,\
  \ p_2, \\dots, p_K$) are known exactly.\n- All elements of the sequence $p$ are\
  \ distinct and positive.\n- GukiZ didn't give more than $x$ candies to any student\
  \ (the maximum value in the sequence $p$ is not greater than $x$).\n- For each student\
  \ $i$, there is at least one other student $j$ such that $|p_i - p_j| \\le D$.\n\
  - The professor gave out the biggest possible total number of candies, i.e. $S =\
  \ p_1 + p_2 + p_3 + \\ldots + p_N$ is maximum possible.\nGukiZ would like to know\
  \ the total number of candies $S$ he had at the beginning. However, times change\
  \ and after six days, the professor is really tired, so it is possible that there\
  \ is no sequence $p$ which satisfies the constraints. Can you help GukiZ find the\
  \ number of candies he gave out, or tell him that he must have made a mistake?\n\
  \n-----Input-----\n- The first line of the input contains a single integer $T$ denoting\
  \ the number of test cases. The description of $T$ test cases follows.\n- The first\
  \ line of each test case contains four space-separated integers $N$, $K$, $x$, $D$.\n\
  - The second line contains $K$ distinct space-separated integers $p_1, p_2, \\dots,\
  \ p_K$.\n\n-----Output-----\nFor each test case, print a single line containing\
  \ one integer — the number of candies GukiZ had, or $-1$ if there is no valid sequence\
  \ $p$.\n\n-----Constraints-----\n- $1 \\le T \\le 50$\n- $3 \\le N \\le 10^9$\n\
  - $1 \\le K \\le \\mathrm{min}(N, 2 \\cdot 10^4)$ \n- $1 \\le x \\le 2 \\cdot 10^9$\n\
  - $1 \\le D \\le 10^9$\n- $1 \\le p_i \\le x$ for each valid $i$\n- All values $p_i$\
  \ from input are distinct\n\n-----Subtasks-----\nSubtask #1 (15 points): $1 \\leq\
  \ x, N, D \\leq 15$ \nSubtask #2 (35 points): $1 \\leq x, N, D \\leq 10^5$ \nSubtask\
  \ #3 (50 points): original constraints\n\n-----Example Input-----\n2\n4 3 5 3\n\
  2 1 5\n3 2 8 2\n3 8\n\n-----Example Output-----\n12\n-1\n\n-----Explanation-----\n\
  Example case 1: There are four students. We know that the first student got $p_1\
  \ = 2$ candies, the second student got $p_2 = 1$ and the third got $p_3 = 5$ candies;\
  \ we don't know the number of candies given to the last student. The maximum possible\
  \ amount of candies given to some student is $x=5$. The best possible option is\
  \ giving $p_4=4$ candies to the last student. Then, the fourth constraint (with\
  \ $D=3$) is satisfied for all students. Only the pair of students $(2, 3)$ have\
  \ numbers of candies that differ by more than $3$, but still, for each student,\
  \ there are at least two other students with close enough numbers of candies.\n\
  Example case 2: GukiZ made some mistake in distribution and there is no valid sequence\
  \ $p$. The answer is $-1$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_candies (N K x D : Nat) (given_candies : List Nat) :\
  \ Int := sorry\n\ntheorem solve_candies_result_valid\n  {N K x D : Nat}\n  {given_candies\
  \ : List Nat}\n  (h_k : given_candies.length = K) :\n  let result := solve_candies\
  \ N K x D given_candies\n  if result = -1 then True\n  else\n    -- Basic constraints\n\
  \    N ≥ K ∧ x ≥ N ∧ (∀ c ∈ given_candies, x ≥ c) ∧\n    -- Sum constraints\n  \
  \  (∀ c ∈ given_candies, result ≥ c) ∧\n    -- Remaining slots constraint\n    (N\
  \ - K) ≥ 0 ∧\n    -- D-difference constraint\n    ∀ i, ∀ j, i ∈ given_candies →\
  \ j ∈ given_candies → i ≤ j → j - i ≤ D := sorry\n"
"vc-theorems": "theorem solve_candies_preserves_values\n  {N K x D : Nat}\n  {given_candies\
  \ : List Nat}\n  (h_k : given_candies.length = K) :\n  let result := solve_candies\
  \ N K x D given_candies\n  result ≠ -1 →\n  ∀ c ∈ given_candies, result ≥ c := sorry\n\
  \n\ntheorem solve_candies_fails_invalid\n  {N K x D : Nat} \n  {given_candies :\
  \ List Nat}\n  (h_k : given_candies.length = K) :\n  (x < N ∨ (∃ c, c ∈ given_candies\
  \ ∧ x < c) ∨ N < K) →\n  solve_candies N K x D given_candies = -1 := sorry\n\n/--\n\
  info: 12\n-/\n#guard_msgs in\n#eval solve_candies 4 3 5 3 [2, 1, 5]\n\n/--\ninfo:\
  \ -1\n-/\n#guard_msgs in\n#eval solve_candies 3 2 8 2 [3, 8]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
