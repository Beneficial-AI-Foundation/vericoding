"vc-description": "A [Power Law](https://en.wikipedia.org/wiki/Power_law) distribution\
  \ occurs whenever \"a relative change in one quantity results in a proportional\
  \ relative change in the other quantity.\" For example, if *y* = 120 when *x* =\
  \ 1 and *y* = 60 when *x* = 2 (i.e. *y* halves whenever *x* doubles) then when *x*\
  \ = 4, *y* = 30 and when *x* = 8, *y* = 15.\n\n\nTherefore, if I give you any pair\
  \ of co-ordinates (x1,y1) and (x2,y2) in a power law distribution, you can plot\
  \ the entire rest of the distribution and tell me the value of *y* for any other\
  \ value of *x*. \n\nGiven a pair of co-ordinates (x1,y1) and (x2,y2) and another\
  \ x co-ordinate *x3*, return the value of *y3*\n\n```\npowerLaw(x1y1, x2y2, x3)\n\
  e.g. powerLaw([1,120], [2,60], 4)\n- when x = 1, y = 120\n- when x = 2, y = 60\n\
  - therefore whenever x doubles, y halves\n- therefore when x = 4, y = 60 * 0.5\n\
  - therfore solution = 30\n```\n\n(x1,y1) and (x2,y2) will be given as arrays. Answer\
  \ should be to the nearest integer, but random tests will give you leeway of 1%\
  \ of the reference solution to account for possible discrepancies from different\
  \ methods."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def power_law (p1 p2 : List Float) (x3 : Float) : Float := sorry\n\
  \ntheorem power_law_identity (value : Float) (h1 : value ≥ 1) (h2 : value ≤ 100)\
  \ :\n  power_law [value, value] [value, value] value = value := sorry\n"
"vc-theorems": "theorem power_law_examples :\n  power_law [1, 120] [2, 60] 4 = 30\
  \ ∧\n  power_law [1, 81] [2, 27] 4 = 9 ∧\n  power_law [4, 30] [2, 60] 1 = 120 :=\
  \ sorry\n\n/--\ninfo: 30\n-/\n#guard_msgs in\n#eval power_law [1, 120] [2, 60] 4\n\
  \n/--\ninfo: 9\n-/\n#guard_msgs in\n#eval power_law [1, 81] [2, 27] 4\n\n/--\ninfo:\
  \ 120\n-/\n#guard_msgs in\n#eval power_law [4, 30] [2, 60] 1\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
