"vc-description": "DevOps legacy roasting!\nSave the business from technological purgatory.\
  \ \n\nConvert IT to DevOps, modernize application workloads, take it all to the\
  \ Cloud…….\n\nYou will receive a string of workloads represented by words….some\
  \ legacy and some modern mixed in with complaints from the business….your job is\
  \ to burn the legacy in a disco inferno and count the value of each roasting and\
  \ the number of complaints resolved. \n\n```\ncomplaints (in this format, case-insensitive)\
  \ -> \"slow!\", \"expensive!\", \"manual!\", \"down!\", \"hostage!\", \"security!\"\
  \n\n```\n\nThe value is based on real or perceived pain by the business and the\
  \ expense of keeping it all running. \n\nPull the values from the list below...\n\
  \n```\n1970s Disco Fever Architecture………\nSort of like a design from Saturday night\
  \ Fever….\n\n            (  .      )\n                )           (            \
  \  )\n                      .  '   .   '  .  '  .\n             (    , )       (.\
  \   )  (   ',    )\n              .' ) ( . )    ,  ( ,     )   ( .\n           ).\
  \ , ( .   (  ) ( , ')  .' (  ,    )\n          (_,) . ), ) _) _,')  (, ) '. )  ,.\
  \ (' )\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            Burn Baby\
  \ Burn in a Disco Inferno\n\nLegacy is identified by the following keywords:\n\n\
  1000 points - COBOL of any kind whatsoever\n              keyword => \"COBOL\"\n\
  500 points  - non-object oriented architecture\n              keyword => \"nonobject\"\
  \n500 points  - monolithic architecture\n              keyword => \"monolithic\"\
  \n100 points  - fax system dependencies\n              keyword => \"fax\"\n100 points\
  \  - modem dependencies\n              keyword => \"modem\"\n50 points   - thick\
  \ client dependencies\n              keyword => \"thickclient\"\n50 points   - tape\
  \ drive dependencies\n              keyword => \"tape\"\n50 points   - floppy drive\
  \ dependencies\n              keyword => \"floppy\"\n50 points   - workloads with\
  \ DevOps Anti-patterns\n              keyword => \"oldschoolIT\"\n\nThe count is\
  \ based on case-insensitive words!\n\nReturn a string in the following format\n\n\
  ->'Burn baby burn disco inferno 2400 points earned in this roasting and 2 complaints\
  \ resolved!'\n\nIf there are no complaints and no legacy from above return\n\n->'These\
  \ guys are already DevOps and in the Cloud and the business is happy!'\n\n```\n\
  If you have any doubt COBOL should be burned.. just look at\nthis quote from Dijkstra.\n\
  \nThe use of COBOL cripples the mind; its teaching should, therefore, be regarded\
  \ as a criminal offense. Edsger Dijkstra\n\nFor more information on how to have\
  \ a disco inferno\n\nhttps://www.youtube.com/watch?v=A_sY2rjxq6M\n\nDisclaimer -\
  \ this should only be attempted by trained professionals and in accordance with\
  \ local ordinances. EX: Disco may be outlawed in certain countries."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def countSubstr (s : String) (substr : String) : Nat := sorry\n\
  \ndef roast_legacy (workload : String) : String := sorry\n"
"vc-theorems": "theorem roast_legacy_score_and_complaints \n  (terms : List String)\
  \ \n  (fillers : List String)\n  (h_terms : ∀ t ∈ terms, t.length > 0)\n  (h_fillers\
  \ : ∀ f ∈ fillers, f.length > 0 ∧ f.length ≤ 10)\n  (h_terms_bound : terms.length\
  \ ≤ 10)\n  (h_fillers_bound : fillers.length ≤ 5) :\n  let workload := String.intercalate\
  \ \" \" (terms ++ fillers)\n  let legacy_count := (countSubstr workload.toLower\
  \ \"cobol\") * 1000 + \n                     (countSubstr workload.toLower \"nonobject\"\
  ) * 500 +\n                     (countSubstr workload.toLower \"monolithic\") *\
  \ 500 +\n                     (countSubstr workload.toLower \"fax\") * 100 +  \n\
  \                     (countSubstr workload.toLower \"modem\") * 100 +\n       \
  \              (countSubstr workload.toLower \"thickclient\") * 50 +\n         \
  \            (countSubstr workload.toLower \"tape\") * 50 +\n                  \
  \   (countSubstr workload.toLower \"floppy\") * 50 +\n                     (countSubstr\
  \ workload.toLower \"oldschoolit\") * 50\n  let complaint_count := countSubstr workload.toLower\
  \ \"slow!\" +\n                        countSubstr workload.toLower \"expensive!\"\
  \ +\n                        countSubstr workload.toLower \"manual!\" +\n      \
  \                  countSubstr workload.toLower \"down!\" +\n                  \
  \      countSubstr workload.toLower \"hostage!\" +\n                        countSubstr\
  \ workload.toLower \"security!\"\n  let result := roast_legacy workload\n  (legacy_count\
  \ = 0 ∧ complaint_count = 0 → \n    result = \"These guys are already DevOps and\
  \ in the Cloud and the business is happy!\") ∧\n  (legacy_count ≠ 0 ∨ complaint_count\
  \ ≠ 0 →\n    result = s!\"Burn baby burn disco inferno {legacy_count} points earned\
  \ in this roasting and {complaint_count} complaints resolved!\") :=\nsorry\n\n\n\
  theorem roast_legacy_output_type (s : String) :\n  let result := roast_legacy s\n\
  \  result.length > 0 ∧\n  (result.startsWith \"Burn baby burn\" ∨ result.startsWith\
  \ \"These guys\") :=\nsorry\n\n\ntheorem roast_legacy_case_insensitive (s : String)\
  \ :\n  roast_legacy (s.toLower) = roast_legacy (s.toUpper) :=\nsorry\n\n/--\ninfo:\
  \ 'Burn baby burn disco inferno 1100 points earned in this roasting and 2 complaints\
  \ resolved!'\n-/\n#guard_msgs in\n#eval roast_legacy \"We have COBOL and fax systems\
  \ that are slow! and expensive!\"\n\n/--\ninfo: 'These guys are already DevOps and\
  \ in the Cloud and the business is happy!'\n-/\n#guard_msgs in\n#eval roast_legacy\
  \ \"Everything is modern and cloud native\"\n\n/--\ninfo: 'Burn baby burn disco\
  \ inferno 550 points earned in this roasting and 1 complaints resolved!'\n-/\n#guard_msgs\
  \ in\n#eval roast_legacy \"Our MonoLithic system is Down! and we use ThickClient\"\
  \n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
