"vc-description": "The first positive integer, `n`, with its value `4n² + 1`, being\
  \ divisible by `5` and `13` is `4`. (condition 1)\n\nIt can be demonstrated that\
  \ we have infinite numbers that may satisfy the above condition.\n\nIf we name **ai**,\
  \ the different terms of the sequence of numbers with this property, we define `S(n)`\
  \ as:\n\n\n\nWe are interested in working with numbers of this sequence from 10\
  \ to 15 digits. Could you elaborate a solution for these results?\n\nYou will be\
  \ given an integer value `m`(always valid an positive) and you should output the\
  \ closest value of the sequence to `m`.\n\nIf the given value `m` is in the sequence,\
  \ your solution should return the same value.\n\nIn the case that there are two\
  \ possible solutions: `s1` and `s2`, (`s1 < s2`), because `|m - s1| = |m - s2|`,\
  \ output the highest solution `s2`\n\nNo hardcoded solutions are allowed.\n\nNo\
  \ misterious formulae are required, just good observation to discover hidden patterns.\n\
  \nSee the example tests to see output format and useful examples, edge cases are\
  \ included.\n\nFeatures of the random tests\n`1000 <= m <= 5.2 e14`\n\n**Note**\
  \ Sierpinsky presented the numbers that satisfy condition (1)"
"vc-preamble": "import Imports.AllImports\n\ndef generate_sierpinski_sequence (n :\
  \ Nat) : List Nat :=\n  sorry\n\n\ndef find_closest_value (m : Nat) : Nat := \n\
  \  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def abs (n : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem sequence_is_strictly_increasing {n : Nat} (h : 0 < n) (h2\
  \ : n ≤ 10000) :\n  let seq := generate_sierpinski_sequence n\n  ∀ i, i + 1 < seq.length\
  \ → seq.get! i < seq.get! (i + 1) :=\nsorry\n\n\ntheorem sequence_first_values {n\
  \ : Nat} (h : 0 < n) (h2 : n ≤ 10000) :\n  let seq := generate_sierpinski_sequence\
  \ n\n  seq.length ≥ 4 → seq.take 4 = [4, 13, 69, 130] :=\nsorry\n\n\ntheorem closest_value_properties\
  \ {m : Nat} (h : 0 < m) (h2 : m ≤ 10000) :\n  let closest := find_closest_value\
  \ m\n  let seq := generate_sierpinski_sequence (m * 2)\n  (closest ∈ seq) ∧ \n \
  \ (∀ x ∈ seq, abs (closest - m) ≤ abs (x - m)) ∧\n  (∀ x ∈ seq, abs (x - m) = abs\
  \ (closest - m) → x > m → closest ≥ x) :=\nsorry\n\n/--\ninfo: 4\n-/\n#guard_msgs\
  \ in\n#eval find_closest_value 1\n\n/--\ninfo: 5074\n-/\n#guard_msgs in\n#eval find_closest_value\
  \ 5000\n\n/--\ninfo: 14313\n-/\n#guard_msgs in\n#eval find_closest_value 14313\n\
  \n/--\ninfo: 18720\n-/\n#guard_msgs in\n#eval find_closest_value 18332\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
