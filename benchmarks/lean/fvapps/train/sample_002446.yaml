"vc-description": "=====Function Descriptions=====\nCalendar Module\nThe calendar\
  \ module allows you to output calendars and provides additional useful functions\
  \ for them.\n\nclass calendar.TextCalendar([firstweekday])\n\nThis class can be\
  \ used to generate plain text calendars.\n\nSample Code\n>>> import calendar\n>>>\
  \ \n>>> print calendar.TextCalendar(firstweekday=6).formatyear(2015)\n         \
  \                         2015\n\n      January                   February     \
  \              March\nSu Mo Tu We Th Fr Sa      Su Mo Tu We Th Fr Sa      Su Mo\
  \ Tu We Th Fr Sa\n             1  2  3       1  2  3  4  5  6  7       1  2  3 \
  \ 4  5  6  7\n 4  5  6  7  8  9 10       8  9 10 11 12 13 14       8  9 10 11 12\
  \ 13 14\n11 12 13 14 15 16 17      15 16 17 18 19 20 21      15 16 17 18 19 20 21\n\
  18 19 20 21 22 23 24      22 23 24 25 26 27 28      22 23 24 25 26 27 28\n25 26\
  \ 27 28 29 30 31                                29 30 31\n\n       April       \
  \               May                       June\nSu Mo Tu We Th Fr Sa      Su Mo\
  \ Tu We Th Fr Sa      Su Mo Tu We Th Fr Sa\n          1  2  3  4               \
  \       1  2          1  2  3  4  5  6\n 5  6  7  8  9 10 11       3  4  5  6  7\
  \  8  9       7  8  9 10 11 12 13\n12 13 14 15 16 17 18      10 11 12 13 14 15 16\
  \      14 15 16 17 18 19 20\n19 20 21 22 23 24 25      17 18 19 20 21 22 23    \
  \  21 22 23 24 25 26 27\n26 27 28 29 30            24 25 26 27 28 29 30      28\
  \ 29 30\n                          31\n\n        July                     August\
  \                  September\nSu Mo Tu We Th Fr Sa      Su Mo Tu We Th Fr Sa   \
  \   Su Mo Tu We Th Fr Sa\n          1  2  3  4                         1       \
  \      1  2  3  4  5\n 5  6  7  8  9 10 11       2  3  4  5  6  7  8       6  7\
  \  8  9 10 11 12\n12 13 14 15 16 17 18       9 10 11 12 13 14 15      13 14 15 16\
  \ 17 18 19\n19 20 21 22 23 24 25      16 17 18 19 20 21 22      20 21 22 23 24 25\
  \ 26\n26 27 28 29 30 31         23 24 25 26 27 28 29      27 28 29 30\n        \
  \                  30 31\n\n      October                   November           \
  \       December\nSu Mo Tu We Th Fr Sa      Su Mo Tu We Th Fr Sa      Su Mo Tu We\
  \ Th Fr Sa\n             1  2  3       1  2  3  4  5  6  7             1  2  3 \
  \ 4  5\n 4  5  6  7  8  9 10       8  9 10 11 12 13 14       6  7  8  9 10 11 12\n\
  11 12 13 14 15 16 17      15 16 17 18 19 20 21      13 14 15 16 17 18 19\n18 19\
  \ 20 21 22 23 24      22 23 24 25 26 27 28      20 21 22 23 24 25 26\n25 26 27 28\
  \ 29 30 31      29 30                     27 28 29 30 31\n\n=====Problem Statement=====\n\
  You are given a date. Your task is to find what the day is on that date.\n\n=====Input\
  \ Format=====\nA single line of input containing the space separated month, day\
  \ and year, respectively, in MM DD YYYY format.\n\n=====Constraints=====\n2000<year<3000\n\
  \n=====Output Format=====\nOutput the correct day in capital letters."
"vc-preamble": "import Imports.AllImports\n\ndef get_weekday_name (month : Nat) (day\
  \ : Nat) (year : Nat) : String := sorry\n\nstructure Date where\n  month : Nat\n\
  \  day : Nat \n  year : Nat\n\n\ndef IsValidDate (d : Date) : Prop := sorry\ndef\
  \ weekday (d : Date) : Nat := sorry\n\ndef calendar_day_name (n : Nat) : String\
  \ := sorry\ndef IsUppercase (s : String) : Prop := sorry"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def IsValidWeekdayName (s : String) : Prop := sorry\n\ntheorem\
  \ get_weekday_name_matches_calendar\n    (m : Nat) (d : Nat) (y : Nat)\n    (h1\
  \ : 1 ≤ m ∧ m ≤ 12)\n    (h2 : 1 ≤ d ∧ d ≤ 31)\n    (h3 : 1900 ≤ y ∧ y ≤ 2100)\n\
  \    (h4 : IsValidDate ⟨m, d, y⟩) : \n    get_weekday_name m d y = calendar_day_name\
  \ (weekday ⟨m, d, y⟩) := sorry\n"
"vc-theorems": "theorem get_weekday_name_returns_uppercase\n    (m : Nat) (d : Nat)\
  \ (y : Nat)\n    (h1 : 1 ≤ m ∧ m ≤ 12) \n    (h2 : 1 ≤ d ∧ d ≤ 31)\n    (h3 : 1900\
  \ ≤ y ∧ y ≤ 2100) :\n    IsValidDate ⟨m, d, y⟩ →\n    (IsUppercase (get_weekday_name\
  \ m d y) ∧ \n     IsValidWeekdayName (get_weekday_name m d y)) := sorry\n\n/--\n\
  info: 'WEDNESDAY'\n-/\n#guard_msgs in\n#eval get_weekday_name 8 5 2015\n\n/--\n\
  info: 'SUNDAY'\n-/\n#guard_msgs in\n#eval get_weekday_name 1 1 2023\n\n/--\ninfo:\
  \ 'MONDAY'\n-/\n#guard_msgs in\n#eval get_weekday_name 12 25 2023\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
