"vc-description": "A Train started its journey at x=-infinity is travelling on the\
  \ x-Coordinate Axis. Given n passengers and the coordinates $b_i$ and $d_i$ for\
  \ each of the $ith$ passenger at which they board and leave from the train respectively.\
  \ Due to current COVID-19 crisis, the train is monitored at each mile/coordinate.\
  \ The infection degree of the train at each mile is equal to the total passengers\
  \ present in the train at that mile/coordinate. The train stops its journey if no\
  \ more passengers are there to board the train. The term infection severity of the\
  \ journey is defined as the sum of infection degrees noted at each mile. Find the\
  \ Infection severity of the journey. Note: A passenger is considered for calculation\
  \ of infection degree at both boarding and leaving stations.\n\nSince the answer\
  \ can be very large, print it modulo $(10^9)+7$.\n\n-----Input:-----\n- First line\
  \ will contain $N$, number of passengers. Then the $N$ lines follow. \n- $i$th line\
  \ contains two integers $b_i, d_i$ , the boarding and departure mile of $i$th passenger.\n\
  \n-----Output:-----\nPrint a single value, the Infection Severity of the journey\
  \ modulo $(10^9)+7$.\n\n-----Constraints-----\n- $0 \\leq N \\leq 100000$\n- $-500000\
  \ \\leq b_i \\leq 500000$\n- $-500000 \\leq d_i \\leq 500000$\n\n-----Sample Input:-----\n\
  3\n\n0 2\n\n1 3\n\n-1 4  \n\n-----Sample Output:-----\n12    \n\n-----EXPLANATION:-----\n\
  Infection degree at :\n\n-1 is 1\n\n0 is 2\n\n1 is 3\n\n2 is 3\n\n3 is 2\n\n4 is\
  \ 1\n\nCalculation started at mile -1 and ended at mile 4. Infection Severity =\
  \ 1+2+3+3+2+1 =12"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calculate_infection_severity (passengers : List String) : Nat\
  \ :=\n  sorry\n\n\n"
"vc-theorems": "theorem severity_matches_manual_calc\n    (coords : List (Int × Int))\
  \ :\n    let passengers := coords.map (fun (x : Int × Int) => s!\"{x.1} {x.2}\"\
  )\n    let manual_calc := coords.foldl (fun acc x => (acc + (x.2 - x.1).natAbs +\
  \ 1) % (10^9 + 7)) 0\n    calculate_infection_severity passengers = manual_calc\
  \ :=\nsorry\n\n\ntheorem zero_distance_severity\n    (xs : List Int) :\n    let\
  \ passengers := xs.map (fun x => s!\"{x} {x}\")\n    calculate_infection_severity\
  \ passengers = xs.length :=\nsorry\n\n/--\ninfo: 12\n-/\n#guard_msgs in\n#eval calculate_infection_severity\
  \ [\"0 2\", \"1 3\", \"-1 4\"]\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval calculate_infection_severity\
  \ [\"0 5\"]\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval calculate_infection_severity\
  \ [\"1 1\", \"2 2\"]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
