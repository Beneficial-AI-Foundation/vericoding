"vc-description": "Suppose there is a X x Y x Z 3D matrix A of numbers having coordinates\
  \ (i, j, k) where 0 ≤ i < X, 0 ≤ j < Y, 0 ≤ k < Z. Now another X x Y x Z matrix\
  \ B is defined from A such that the (i, j, k) element of B is the sum of all the\
  \ the numbers in A in the cuboid defined by the (0, 0, 0) and (i, j, k) elements\
  \ as the diagonally opposite vertices. In other word (i, j, k) in B is the sum of\
  \ numbers of A having coordinates (a, b, c) such that 0 ≤ a ≤ i, 0 ≤ b ≤ j, 0 ≤\
  \ c ≤ k. The problem is that given B, you have to find out A.\n\n-----Input-----\n\
  The first line of input will contain the number of test cases ( ≤ 10). That many\
  \ test cases will follow in subsequent lines. The first line of each test case will\
  \ contain the numbers X Y Z (0 ≤ X, Y, Z ≤ 100). After that there will be X x Y\
  \ lines each containing Z numbers of B. The first line contains the numbers (0,\
  \ 0, 0), (0, 0, 1)..., (0, 0, Z-1). The second line has the numbers (0, 1, 0), (0,\
  \ 1, 1)..., (0, 1, Z-1) and so on. The (Y+1)th line will have the numbers (1, 0,\
  \ 0), (1, 0, 1)..., (1, 0, Z-1) and so on.\n\n-----Output-----\nFor each test case\
  \ print the numbers of A in exactly the same fashion as the input.\n\n-----Example-----\n\
  Input:\n2\n3 1 1\n1 \n8 \n22 \n1 2 3\n0 9 13 \n18 45 51 \n\nOutput:\n1 \n7 \n14\
  \ \n0 9 4 \n18 18 2"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def compute_matrix_a (n m k : Nat) (matrix_b : List (List Nat))\
  \ : List String := sorry\n\ntheorem identity_case {val : Nat} (h : val ≤ 100) :\n\
  \  compute_matrix_a 1 1 1 [[val]] = [toString val] := sorry\n"
"vc-theorems": "theorem oneByTwoByOne_case {val1 val2 : Nat} (h1 : val1 ≤ 100) (h2\
  \ : val2 ≤ 100) :\n  let result := compute_matrix_a 1 2 1 [[val1], [val2]]\n  result.length\
  \ = 2 ∧ result.get! 0 = toString val1 := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
