"vc-description": "Given a string containing only three types of characters: '(',\
  \ ')' and '*', write a function to check whether this string is valid. We define\
  \ the validity of a string by these rules:\n\nAny left parenthesis '(' must have\
  \ a corresponding right parenthesis ')'.\nAny right parenthesis ')' must have a\
  \ corresponding left parenthesis '('.\nLeft parenthesis '(' must go before the corresponding\
  \ right parenthesis ')'.\n'*' could be treated as a single right parenthesis ')'\
  \ or a single left parenthesis '(' or an empty string.\nAn empty string is also\
  \ valid.\n\n\n\nExample 1:\n\nInput: \"()\"\nOutput: True\n\n\n\nExample 2:\n\n\
  Input: \"(*)\"\nOutput: True\n\n\n\nExample 3:\n\nInput: \"(*))\"\nOutput: True\n\
  \n\n\nNote:\n\nThe string size will be in the range [1, 100]."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def checkValidString (s : String) : Bool := sorry\n\ndef isBalancedWithoutStars\
  \ (s : String) : Bool := sorry\n"
"vc-theorems": "theorem check_matches_simple_validation (s : String) :\n  (∀ c : Char,\
  \ c ∈ s.data → (c = '(' ∨ c = ')')) →\n  checkValidString s = isBalancedWithoutStars\
  \ s := sorry\n\n\ntheorem empty_string_valid :\n  checkValidString \"\" = true :=\
  \ sorry\n\n\ntheorem single_star_valid : \n  checkValidString \"*\" = true := sorry\n\
  \n\ntheorem stars_to_empty_preserves_validity (s : String) :\n  (checkValidString\
  \ (s.replace \"*\" \"\") = true) → \n  checkValidString s = true := sorry\n\n\n\
  theorem close_exceeds_open_invalid (s : String) :\n  (s.data.countP (· = ')')) >\
  \ (s.data.countP (· = '(') + s.data.countP (· = '*')) →\n  checkValidString s =\
  \ false := sorry\n\n\ntheorem valid_parts_concat_with_stars_valid (parts : List\
  \ String) :\n  (∀ p ∈ parts, checkValidString p = true) →\n  checkValidString (String.intercalate\
  \ \"*\" parts) = true := sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval check_valid_string\
  \ \"()\"\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval check_valid_string \"(*)\"\
  \n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval check_valid_string \"(*))\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
