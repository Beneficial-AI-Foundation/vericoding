"vc-description": "Create a function that takes a string as a parameter and does the\
  \ following, in this order:\n\n1. replaces every letter with the letter following\
  \ it in the alphabet (see note below)\n2. makes any vowels capital\n3. makes any\
  \ consonants lower case\n\n**Note:** the alphabet should wrap around, so `Z` becomes\
  \ `A`\n\nSo, for example the string `\"Cat30\"` would return `\"dbU30\"` (`Cat30\
  \ --> Dbu30 --> dbU30`)"
"vc-preamble": "import Imports.AllImports\n\ndef String.isAlpha : Char → Bool :=\n\
  \  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def changer : String → String :=\n  sorry\n"
"vc-theorems": "theorem changer_length (s : String) :\n  s.length = (changer s).length\
  \ :=\n  sorry\n\n\ntheorem changer_nonalpha_unchanged {s : String} {i : String.Pos}\
  \ {c : Char} :\n  c = s.get i → ¬(String.isAlpha c) → (changer s).get i = c :=\n\
  \  sorry\n\n\ntheorem changer_empty :\n  changer \"\" = \"\" :=\n  sorry\n\n\ntheorem\
  \ changer_boundary_case :\n  changer \"abcxyz\" = \"bcdyzA\" :=\n  sorry\n\n/--\n\
  info: 'dbU30'\n-/\n#guard_msgs in\n#eval changer \"Cat30\"\n\n/--\ninfo: 'Ifmmp\
  \ xpsmE'\n-/\n#guard_msgs in\n#eval changer \"Hello World\"\n\n/--\ninfo: 'A'\n\
  -/\n#guard_msgs in\n#eval changer \"z\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
