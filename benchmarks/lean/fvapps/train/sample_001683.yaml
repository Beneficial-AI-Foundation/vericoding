"vc-description": "Alright, detective, one of our colleagues successfully observed\
  \ our target person, Robby the robber. We followed him to a secret warehouse, where\
  \ we assume to find all the stolen stuff. The door to this warehouse is secured\
  \ by an electronic combination lock. Unfortunately our spy isn't sure about the\
  \ PIN he saw, when Robby entered it.\n\nThe keypad has the following layout:\n```\n\
  ┌───┬───┬───┐\n│ 1 │ 2 │ 3 │\n├───┼───┼───┤\n│ 4 │ 5 │ 6 │\n├───┼───┼───┤\n│ 7 │\
  \ 8 │ 9 │\n└───┼───┼───┘\n    │ 0 │\n    └───┘\n```\nHe noted the PIN `1357`, but\
  \ he also said, it is possible that each of the digits he saw could actually be\
  \ another adjacent digit (horizontally or vertically, but not diagonally). E.g.\
  \ instead of the `1` it could also be the `2` or `4`. And instead of the `5` it\
  \ could also be the `2`, `4`, `6` or `8`.\n\nHe also mentioned, he knows this kind\
  \ of locks. You can enter an unlimited amount of wrong PINs, they never finally\
  \ lock the system or sound the alarm. That's why we can try out all possible (*)\
  \ variations.\n\n\\* possible in sense of: the observed PIN itself and all variations\
  \ considering the adjacent digits\n\nCan you help us to find all those variations?\
  \ It would be nice to have a function, that returns an array (or a list in Java\
  \ and C#)  of all variations for an observed PIN with a length of 1 to 8 digits.\
  \ We could name the function `getPINs` (`get_pins` in python, `GetPINs` in C#).\
  \ But please note that all PINs, the observed one and also the results, must be\
  \ strings, because of potentially leading '0's. We already prepared some test cases\
  \ for you.\n\nDetective, we are counting on you!\n\nFor C# user: Do not use Mono.\
  \ Mono is too slower when run your code."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def get_pins (pin : String) : List String := sorry\n\ndef is_digit\
  \ (c : Char) : Bool := sorry\n"
"vc-theorems": "theorem pin_length_matches_input (pin : String) (h : ∀ c ∈ pin.data,\
  \ is_digit c) :\n  ∀ result ∈ get_pins pin, result.length = pin.length := sorry\n\
  \n\ntheorem results_are_digits (pin : String) (h : ∀ c ∈ pin.data, is_digit c) :\n\
  \  ∀ result ∈ get_pins pin, ∀ c ∈ result.data, is_digit c := sorry\n\n\ntheorem\
  \ input_digit_in_possibilities (d : Char) (h : is_digit d) :\n  let pin := String.mk\
  \ [d]\n  pin ∈ get_pins pin := sorry\n\n\ntheorem no_duplicates (pin : String) (h\
  \ : ∀ c ∈ pin.data, is_digit c) :\n  let results := get_pins pin\n  ∀ x ∈ results,\
  \ ∀ y ∈ results, x = y → x.data = y.data := sorry\n\n/--\ninfo: set(['2', '4', '5',\
  \ '6', '8'])\n-/\n#guard_msgs in\n#eval set get_pins(\"5\")\n\n/--\ninfo: set(['11',\
  \ '12', '14', '21', '22', '24', '41', '42', '44'])\n-/\n#guard_msgs in\n#eval set\
  \ get_pins(\"11\")\n\n/--\ninfo: set(['0', '8'])\n-/\n#guard_msgs in\n#eval set\
  \ get_pins(\"0\")\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
