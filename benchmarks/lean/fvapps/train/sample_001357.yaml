"vc-description": "Chef's loves his dog so much! Once his dog created two strings\
  \ a and b each of length n consisting of digits 1 and 2, and even a problem about\
  \ them!\nChef's Dog will tell by barking if a string x (also containing only digits\
  \ 1 and 2 and with length N) is good or not by performing the following actions.\n\
  \n- It starts at first digit of the string, i.e. at i = 1. \n- It can move from\
  \ digit i to either i - 1 or i + 1 if xi equals 1 and the corresponding digits exist.\
  \ \n- It can move from digit i to either i - 2 or i + 2 if xi equals 2 and the corresponding\
  \ digits exist. \n- It must visit each digit exactly once. \n- It must finish at\
  \ the last digit (XN). \n\nChef's dog wants to make both the strings a and b good\
  \ by choosing some subset S (possibly empty) of indices of set {1, 2, ..., n} and\
  \ swapping each index i ϵ S between string a and b, i.e. swapping ai and bi. Can\
  \ you find how many such subsets S exist out there? As the answer could be large,\
  \ output it modulo 109 + 7.\n\n-----Input-----\nThe first line of the input contains\
  \ an integer T denoting the number of test cases. The description of T test cases\
  \ follows.\nThe first line contains string a.\nThe second line contains string b.\n\
  \n-----Output-----\nFor each test case, output a single line containing answer of\
  \ the problem.\n\n-----Constraints-----\n- 1 ≤ T ≤ 20\n- 1 ≤ |a| = |b| ≤ 105\n-\
  \ '1' ≤ ai, bi ≤ '2'\n\n-----Subtasks-----\n- Subtask #1 (30 points) |a|, |b| ≤\
  \  10\n- Subtask #2 (70 points) original constraints\n\n-----Example-----\nInput:\n\
  2\n1111\n2211\n222\n111\n\nOutput:\n8\n0\n\n-----Explanation-----\nTest case 1.\n\
  Possible subsets are: \n{}, {1, 2}, {1, 2, 3}, {1, 2, 4}, {1, 2, 3, 4}, {3}, {4},\
  \ {3, 4}.\n\nTest case 2. There are no possible sets S which can make both the strings\
  \ good."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solveDogStrings (a b : String) : Nat := sorry\n\ndef mod_const\
  \ := 1000000007\n"
"vc-theorems": "theorem output_range {a b : String} : \n  let result := solveDogStrings\
  \ a b\n  0 ≤ result ∧ result < mod_const\n  := sorry\n\n\ntheorem symmetry {a b\
  \ : String} :\n  solveDogStrings a b = solveDogStrings b a := sorry\n\n\ntheorem\
  \ single_char {a b : String} \n  (h1 : String.length a = 1) \n  (h2 : String.length\
  \ b = 1) :\n  solveDogStrings a b = 2 := sorry\n\n\ntheorem known_cases_1 : \n \
  \ solveDogStrings \"1111\" \"2211\" = 8 := sorry\n\n\ntheorem known_cases_2 : \n\
  \  solveDogStrings \"222\" \"111\" = 0 := sorry\n\n/--\ninfo: 8\n-/\n#guard_msgs\
  \ in\n#eval solve_dog_strings \"1111\" \"2211\"\n\n/--\ninfo: 0\n-/\n#guard_msgs\
  \ in\n#eval solve_dog_strings \"222\" \"111\"\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n\
  #eval solve_dog_strings \"1\" \"2\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
