"vc-description": "A zero-indexed array ```arr``` consisting of n integers is given.\
  \ The dominator of array ```arr``` is the value that occurs in more than half of\
  \ the elements of ```arr```.\nFor example, consider array ```arr``` such that ```arr\
  \ = [3,4,3,2,3,1,3,3]``` The dominator of ```arr``` is 3 because it occurs in 5\
  \ out of 8 elements of ```arr``` and 5 is more than a half of 8.\nWrite a function\
  \ ```dominator(arr)``` that, given a zero-indexed array ```arr``` consisting of\
  \ n integers, returns the dominator of ```arr```. The function should return âˆ’1\
  \ if array does not have a dominator. All values in ```arr``` will be >=0."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def dominator (arr : List Int) : Int := sorry\n\ntheorem dominator_empty_list\
  \ :\n  dominator [] = -1 := sorry\n"
"vc-theorems": "theorem dominator_singleton (x : Int) :\n  dominator [x] = x := sorry\n\
  \n\ntheorem dominator_majority {base : List Int} {dom_value : Int} {repeats : Nat}\n\
  \  (h_repeats : repeats > base.length) :\n  dominator (base ++ List.replicate repeats\
  \ dom_value) = dom_value := sorry\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval dominator\
  \ [3, 4, 3, 2, 3, 1, 3, 3]\n\n/--\ninfo: -1\n-/\n#guard_msgs in\n#eval dominator\
  \ [1, 2, 3, 4, 5]\n\n/--\ninfo: -1\n-/\n#guard_msgs in\n#eval dominator []\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
