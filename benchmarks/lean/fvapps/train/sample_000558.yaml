"vc-description": "After acquiring an extraordinary amount of knowledge through programming\
  \ contests, Malvika decided to harness her expertise to train the next generation\
  \ of Indian programmers. So, she decided to hold a programming camp. In the camp,\
  \ she held a discussion session for n members (n-1 students, and herself). They\
  \ are sitting in a line from left to right numbered through 1 to n.\n\nMalvika is\
  \ sitting in the nth spot. She wants to teach m topics of competitive programming\
  \ to the students. As the people taking part in the camp are all newbies, they know\
  \ none of the topics being taught, i.e., initially, the first n - 1 people in the\
  \ line know none of the topics, while the nth knows all of them.\n\nIt takes one\
  \ hour for a person to learn a topic from his neighbour. Obviously, one person cannot\
  \ both teach a topic as well as learn one during the same hour. That is, in any\
  \ particular hour, a person can either teach a topic that he knows to one of his\
  \ neighbors, or he can learn a topic from one of his neighbors, or he can sit idly.\
  \ It is also obvious that if person x is learning from person y at a particular\
  \ hour, then person y must be teaching person x at that hour.\n\nAlso, note that\
  \ people can work parallely too, i.e., in the same hour when the 4th person is teaching\
  \ the 3rd person, the 1st person can also teach the 2nd or learn from 2nd.\n\nFind\
  \ out the minimum number of hours needed so that each person learns all the m topics.\n\
  \n-----Input-----\n- The first line of input contains a single integer T denoting\
  \ number of test cases.\n- The only line of each test case contains two space separated\
  \ integers n, m as defined in the statement.\n\n-----Output-----\n- For each test\
  \ case, output a single integer in a line corresponding to the answer of the problem.\n\
  \n-----Constraints-----\n- 1 ≤ T, n, m ≤ 100\n\n-----Example-----\nInput:\n2\n2\
  \ 1\n3 2\n\nOutput:\n1\n4\n\n-----Explanation-----\nIn the first example, there\
  \ are two people. Second person is Malvika and she has to teach only one topic to\
  \ the first person. It will take only one hour to do so.\n\nIn the second example,\
  \ there are three people. The 3rd person is Malvika and she has to teach only two\
  \ topics to 1st and 2nd person. In the 1st hour, she teaches the 1st topic to the\
  \ 2nd person. Now, in the 2nd hour, the 2nd person will teach the 1st topic to the\
  \ 1st person. In the 3rd hour, Malvika will teach the 2nd topic to the 2nd person.\
  \ Now the 2nd person will teach that topic to the 1st in the 4th hour. So, it takes\
  \ a total of 4 hours for all the people to know all the topics."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_training_camp (n m : Nat) : Nat := sorry \n\ntheorem\
  \ solve_training_camp_nonnegative (n m : Nat) :\n  n ≥ 1 → solve_training_camp n\
  \ m ≥ 0 := sorry\n"
"vc-theorems": "theorem solve_training_camp_teacher_only (m : Nat) :\n  solve_training_camp\
  \ 1 m = 0 := sorry\n\n\ntheorem solve_training_camp_two_people (m : Nat) :\n  solve_training_camp\
  \ 2 m = m := sorry\n\n\ntheorem solve_training_camp_monotone_n (n m : Nat) : \n\
  \  n > 2 → solve_training_camp (n+1) m ≥ solve_training_camp n m := sorry\n\n\n\
  theorem solve_training_camp_monotone_m (n m : Nat) :\n  n > 2 → m > 0 → solve_training_camp\
  \ n m ≥ solve_training_camp n (m-1) := sorry\n\n\ntheorem solve_training_camp_zero_topics_teacher\
  \ (n : Nat) :\n  n = 1 → solve_training_camp n 0 = 0 := sorry\n\n\ntheorem solve_training_camp_zero_topics_two\
  \ (n : Nat) :\n  n = 2 → solve_training_camp n 0 = 0 := sorry\n\n\ntheorem solve_training_camp_zero_topics_many\
  \ (n : Nat) :\n  n > 2 → solve_training_camp n 0 = n - 3 := sorry\n\n/--\ninfo:\
  \ 1\n-/\n#guard_msgs in\n#eval solve_training_camp 2 1\n\n/--\ninfo: 4\n-/\n#guard_msgs\
  \ in\n#eval solve_training_camp 3 2\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval solve_training_camp\
  \ 1 5\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
