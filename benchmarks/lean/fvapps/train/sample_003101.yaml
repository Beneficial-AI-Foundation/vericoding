"vc-description": "## Task\n\nCreate a function that given a sequence of strings,\
  \ groups the elements that can be obtained by rotating others, ignoring upper or\
  \ lower cases. \n\nIn the event that an element appears more than once in the input\
  \ sequence, only one of them will be taken into account for the result, discarding\
  \ the rest. \n\n## Input\n\nSequence of strings. Valid characters for those strings\
  \ are uppercase and lowercase characters from the alphabet and whitespaces.\n\n\
  ## Output\n\nSequence of elements. Each element is the group of inputs that can\
  \ be obtained by rotating the strings. \n\nSort the elements of each group alphabetically.\
  \ \n\nSort the groups descendingly by size and in the case of a tie, by the first\
  \ element of the group alphabetically.\n\n## Examples\n\n```python\n['Tokyo', 'London',\
  \ 'Rome', 'Donlon', 'Kyoto', 'Paris', 'Okyot'] --> [['Kyoto', 'Okyot', 'Tokyo'],\
  \ ['Donlon', 'London'], ['Paris'], ['Rome']]\n\n['Rome', 'Rome', 'Rome', 'Donlon',\
  \ 'London'] --> [['Donlon', 'London'], ['Rome']]\n\n[] --> []\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def group_cities (cities : List String) : List (List String) :=\
  \ sorry \n\ntheorem group_cities_is_list_of_lists (cities : List String) :\n  let\
  \ result := group_cities cities\n  ∀ group, group ∈ result → group = ([] : List\
  \ String) ∨ group ≠ [] := by sorry\n"
"vc-theorems": "theorem group_cities_groups_sorted_by_size (cities : List String)\
  \ :\n  let result := group_cities cities\n  ∀ i j, i < j → j < result.length → \n\
  \    (result.get ⟨i, by sorry⟩).length ≥ (result.get ⟨j, by sorry⟩).length := by\
  \ sorry\n\n\ntheorem group_cities_groups_rotations :\n  let result := group_cities\
  \ [\"Tokyo\", \"London\", \"Rome\", \"Donlon\", \"Kyoto\"]\n  (∃ group ∈ result,\
  \ \"Tokyo\" ∈ group ∧ \"Kyoto\" ∈ group) ∧\n  (∃ group ∈ result, \"London\" ∈ group\
  \ ∧ \"Donlon\" ∈ group) := by sorry\n\n\ntheorem group_cities_empty :\n  group_cities\
  \ [] = [] := by sorry\n\n\ntheorem group_cities_duplicates :\n  (group_cities [\"\
  Rome\", \"Rome\", \"Rome\"]).length = 1 := by sorry\n\n/--\ninfo: expected1\n-/\n\
  #guard_msgs in\n#eval group_cities [\"Tokyo\", \"London\", \"Rome\", \"Donlon\"\
  , \"Kyoto\", \"Paris\", \"Okyot\"]\n\n/--\ninfo: expected2\n-/\n#guard_msgs in\n\
  #eval group_cities [\"Rome\", \"Rome\", \"Rome\", \"Donlon\", \"London\"]\n\n/--\n\
  info: expected3\n-/\n#guard_msgs in\n#eval group_cities []\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
