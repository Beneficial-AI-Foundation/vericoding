"vc-description": "Doubly linked list is one of the fundamental data structures. A\
  \ doubly linked list is a sequence of elements, each containing information about\
  \ the previous and the next elements of the list. In this problem all lists have\
  \ linear structure. I.e. each element except the first has exactly one previous\
  \ element, each element except the last has exactly one next element. The list is\
  \ not closed in a cycle.\n\nIn this problem you are given n memory cells forming\
  \ one or more doubly linked lists. Each cell contains information about element\
  \ from some list. Memory cells are numbered from 1 to n.\n\nFor each cell i you\
  \ are given two values:   l_{i} — cell containing previous element for the element\
  \ in the cell i;  r_{i} — cell containing next element for the element in the cell\
  \ i. \n\nIf cell i contains information about the element which has no previous\
  \ element then l_{i} = 0. Similarly, if cell i contains information about the element\
  \ which has no next element then r_{i} = 0. [Image] Three lists are shown on the\
  \ picture. \n\nFor example, for the picture above the values of l and r are the\
  \ following: l_1 = 4, r_1 = 7; l_2 = 5, r_2 = 0; l_3 = 0, r_3 = 0; l_4 = 6, r_4\
  \ = 1; l_5 = 0, r_5 = 2; l_6 = 0, r_6 = 4; l_7 = 1, r_7 = 0.\n\nYour task is to\
  \ unite all given lists in a single list, joining them to each other in any order.\
  \ In particular, if the input data already contains a single list, then there is\
  \ no need to perform any actions. Print the resulting list in the form of values\
  \ l_{i}, r_{i}.\n\nAny other action, other than joining the beginning of one list\
  \ to the end of another, can not be performed.\n\n\n-----Input-----\n\nThe first\
  \ line contains a single integer n (1 ≤ n ≤ 100) — the number of memory cells where\
  \ the doubly linked lists are located.\n\nEach of the following n lines contains\
  \ two integers l_{i}, r_{i} (0 ≤ l_{i}, r_{i} ≤ n) — the cells of the previous and\
  \ the next element of list for cell i. Value l_{i} = 0 if element in cell i has\
  \ no previous element in its list. Value r_{i} = 0 if element in cell i has no next\
  \ element in its list.\n\nIt is guaranteed that the input contains the correct description\
  \ of a single or more doubly linked lists. All lists have linear structure: each\
  \ element of list except the first has exactly one previous element; each element\
  \ of list except the last has exactly one next element. Each memory cell contains\
  \ information about one element from some list, each element of each list written\
  \ in one of n given cells.\n\n\n-----Output-----\n\nPrint n lines, the i-th line\
  \ must contain two integers l_{i} and r_{i} — the cells of the previous and the\
  \ next element of list for cell i after all lists from the input are united in a\
  \ single list. If there are many solutions print any of them.\n\n\n-----Example-----\n\
  Input\n7\n4 7\n5 0\n0 0\n6 1\n0 2\n0 4\n1 0\n\nOutput\n4 7\n5 6\n0 5\n6 1\n3 2\n\
  2 4\n1 0"
"vc-preamble": "import Imports.AllImports\n\ndef unite_linked_lists (n : Nat) (arr\
  \ : List (List Nat)) : List (List Nat) :=\n  sorry\n\n\ndef is_valid_linked_list\
  \ (n : Nat) (arr : List (List Nat)) : Bool :=\n  sorry\n\n\ndef count_lists (n :\
  \ Nat) (arr : List (List Nat)) : Nat :=\n  sorry \n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_connected (n : Nat) (arr : List (List Nat)) : Bool :=\n\
  \  sorry\n"
"vc-theorems": "theorem unite_linked_lists_preserves_size {n : Nat} {arr : List (List\
  \ Nat)} \n    (h1 : is_valid_linked_list n arr)\n    (h2 : count_lists n arr ≥ 2)\
  \ :\n    List.length (unite_linked_lists n arr) = List.length arr :=\n  sorry\n\n\
  \ntheorem unite_linked_lists_maintains_validity {n : Nat} {arr : List (List Nat)}\n\
  \    (h1 : is_valid_linked_list n arr)\n    (h2 : count_lists n arr ≥ 2) :\n   \
  \ is_valid_linked_list n (unite_linked_lists n arr) :=\n  sorry\n\n\ntheorem unite_linked_lists_creates_connection\
  \ {n : Nat} {arr : List (List Nat)}\n    (h1 : is_valid_linked_list n arr)\n   \
  \ (h2 : count_lists n arr ≥ 2) :\n    is_connected n (unite_linked_lists n arr)\
  \ :=\n  sorry\n\n\ntheorem unite_linked_lists_reduces_count {n : Nat} {arr : List\
  \ (List Nat)}\n    (h1 : is_valid_linked_list n arr)\n    (h2 : count_lists n arr\
  \ ≥ 2) :\n    count_lists n (unite_linked_lists n arr) = 1 :=\n  sorry"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded"
