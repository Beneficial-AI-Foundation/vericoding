"vc-description": "Given a positive integer n and you can do operations as follow:\n\
  \n\n\n\nIf n is even, replace n with n/2.\nIf n is odd, you can replace n with either\
  \ n + 1 or n - 1.\n\n\n\n\nWhat is the minimum number of replacements needed for\
  \ n to become 1?\n\n\n\n\nExample 1:\n\nInput:\n8\n\nOutput:\n3\n\nExplanation:\n\
  8 -> 4 -> 2 -> 1\n\n\n\nExample 2:\n\nInput:\n7\n\nOutput:\n4\n\nExplanation:\n\
  7 -> 8 -> 4 -> 2 -> 1\nor\n7 -> 6 -> 3 -> 2 -> 1"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def integer_replacement (n : Nat) : Nat := sorry\n\ntheorem integer_replacement_terminates\
  \ (n : Nat) (h : n > 0) :\n  integer_replacement n â‰¥ 0 := sorry\n"
"vc-theorems": "theorem integer_replacement_is_nat (n : Nat) (h : n > 0) :\n  integer_replacement\
  \ n = integer_replacement n := sorry\n\n\n\n\ntheorem integer_replacement_base_case_one\
  \ :\n  integer_replacement 1 = 0 := sorry\n\n\ntheorem integer_replacement_base_case_two\
  \ :\n  integer_replacement 2 = 1 := sorry\n\n\ntheorem integer_replacement_power_of_two\
  \ (n : Nat) (h : n > 0) :\n  integer_replacement (2^n) = n := sorry\n\n/--\ninfo:\
  \ 3\n-/\n#guard_msgs in\n#eval integer_replacement 8\n\n/--\ninfo: 4\n-/\n#guard_msgs\
  \ in\n#eval integer_replacement 7\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval integer_replacement\
  \ 3\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
