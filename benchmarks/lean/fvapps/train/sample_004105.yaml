"vc-description": "Mrs Jefferson is a great teacher. One of her strategies that helped\
  \ her to reach astonishing results in the learning process is to have some fun with\
  \ her students. At school, she wants to make an arrangement of her class to play\
  \ a certain game with her pupils. For that, she needs to create the arrangement\
  \ with **the minimum amount of groups that have consecutive sizes**.\n\nLet's see.\
  \ She has      ```14``` students. After trying a bit she could do the needed arrangement:\n\
  \        ```[5, 4, 3, 2]```\n- one group of  ```5``` students\n- another group of\
  \      ```4``` students\n- then, another one of  ```3``` \n- and finally, the smallest\
  \ group of    ```2``` students.\n\nAs the game was a success, she was asked to help\
  \ to the other classes to teach and show the game. That's why she desperately needs\
  \ some help to make this required arrangements that make her spend a lot of time.\
  \ \n\nTo make things worse, she found out that there are some classes with some\
  \ special number of students that is impossible to get that arrangement.\n\nPlease,\
  \ help this teacher!\n\nYour code will receive the number of students of the class.\
  \ It should output the arrangement as an array with the consecutive sizes of the\
  \ groups in decreasing order.\n\nFor the special case that no arrangement of the\
  \ required feature is possible the code should output     ```[-1] ```\n\nThe value\
  \ of n is unknown and may be pretty high because some classes joined to to have\
  \ fun with the game.\n\nYou may see more example tests in the Example Tests Cases\
  \ Box."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def shortest_arrang (n : Nat) : List Nat := sorry\n\ndef is_valid_arrangement\
  \ (arr : List Nat) (n : Nat) : Bool := sorry\n"
"vc-theorems": "theorem shortest_arrang_properties (n : Nat) (h : n ≥ 3) :\n  let\
  \ result := shortest_arrang n\n  (result = List.nil ∨ is_valid_arrangement result\
  \ n) ∧\n  (n % 2 = 1 → result = [n/2 + 1, n/2]) := sorry\n\n\ntheorem shortest_arrang_uniqueness\
  \ (n : Nat) (h : n ≥ 3) :\n  let result := shortest_arrang n\n  ∀ (i : Nat) (h :\
  \ i < result.length),\n  let test_arr := result\n  result ≠ List.nil →\n  (test_arr.foldl\
  \ (· + ·) 0 = n ∧ \n   ∀ j < test_arr.length - 1, \n   test_arr.get ⟨j, sorry⟩ >\
  \ test_arr.get ⟨j+1, sorry⟩) \n  → False := sorry\n\n\ntheorem powers_of_two_give_empty\
  \ (n : Nat) :\n  (∃ k, n = 2^k) → shortest_arrang n = List.nil := sorry\n\n/--\n\
  info: [5, 4, 3, 2]\n-/\n#guard_msgs in\n#eval shortest_arrang 14\n\n/--\ninfo: [-1]\n\
  -/\n#guard_msgs in\n#eval shortest_arrang 16\n\n/--\ninfo: [33, 32]\n-/\n#guard_msgs\
  \ in\n#eval shortest_arrang 65\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
