"vc-description": "Devu and Churu love to play games a lot. Today, they have an array\
  \ A consisting of N positive integers. First they listed all N × (N+1) / 2 non-empty\
  \ continuous subarrays of the array A on a piece of paper and then replaced all\
  \ the subarrays on the paper with the maximum element present in the respective\
  \ subarray.\nDevu and Churu decided to play a game with numbers on the paper. They\
  \ both have decided to make moves turn by turn. In one turn, the player picks some\
  \ number from the list and discards that number. The one who is not able to make\
  \ a valid move will be the loser. To make the game more interesting, they decided\
  \ to put some constraints on their moves.\nA constraint on a game can be any of\
  \ following three types :\n-  > K : They are allowed to choose numbers having values\
  \ strictly greater than K only.\n-  < K : They are allowed to choose numbers having\
  \ values strictly less than K only.\n-  = K : They are allowed to choose numbers\
  \ having values equal to K only.\n\nGiven M constraints and who goes first, you\
  \ have to tell the outcome of each game. Print 'D' if Devu wins otherwise print\
  \ 'C' without quotes.\nNote that M games are independent, that is, they'll rewrite\
  \ numbers by using array A after each game. (This is the task for the loser of the\
  \ previous game!)\n\n-----Input -----\nFirst line of input contains two space separated\
  \ integers N and M denoting the size of array A and number of game played by them.\
  \ Next line of input contains N space-separated integers denoting elements of array\
  \ A. Each of the next M lines of input contains three space-separated parameters\
  \ describing a game. First two parameter are a character C ∈ {<, >, =} and an integer\
  \ K denoting the constraint for that game. The last parameter is a character X ∈\
  \ {D, C} denoting the player who will start the game. \n\n----- Output -----\nOutput\
  \ consists of a single line containing a string of length M made up from characters\
  \ D and C only, where ith character in the string denotes the outcome of the ith\
  \ game.\n\n----- Constraints: -----\n- 1 ≤ N, M ≤ 106\n- 1 ≤ Ai, K ≤ 109 \n- X ∈\
  \ {D, C}\n- C ∈ {<, >, =}\n\n-----Subtasks: -----\n- Subtask 1 : 1 ≤ N, M ≤ 104\
  \ : ( 20 pts )\n- Subtask 2 : 1 ≤ N, M ≤ 105 : ( 30 pts )\n- Subtask 3 : 1 ≤ N,\
  \ M ≤ 106 : ( 50 pts )\n\n-----Example:-----\nInput:\n3 5\n1 2 3\n> 1 D\n< 2 C\n\
  = 3 D\n> 4 C\n< 5 D\n\nOutput:\nDCDDC\n\n-----Explanation: -----\nSubarray List\
  \ :\n- [1]\n\n- [2]\n\n- [3]\n\n- [1,2]\n\n- [2,3]\n\n- [1,2,3]\n\nNumbers on the\
  \ paper after replacement :\n\n- [1]\n\n- [2]\n\n- [3]\n\n- [2]\n\n- [3]\n\n- [3]\n\
  \nGame 1 : There are only 5 numbers > 1 in the list.\nGame 2 : There is only 1 number\
  \ < 2 in the list.\nGame 3 : There are only 3 numbers = 3 in the list.\nGame 4 :\
  \ There are no numbers > 4 in the list. So the first player cannot make his move.\n\
  Game 5 : There are 6 numbers < 5 in the list."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_game (n : Nat) (arr : List Nat) (queries : List (Char\
  \ × Nat × Char)) : List Char :=\n  sorry\n"
"vc-theorems": "theorem solve_game_result_length\n  (n : Nat)\n  (arr : List Nat)\n\
  \  (queries : List (Char × Nat × Char)) :\n  (solve_game n arr queries).length =\
  \ queries.length :=\n  sorry\n\n\ntheorem solve_game_result_valid_chars\n  (n :\
  \ Nat)\n  (arr : List Nat)\n  (queries : List (Char × Nat × Char))\n  (i : Nat)\n\
  \  (h : i < (solve_game n arr queries).length) :\n  (solve_game n arr queries).get\
  \ ⟨i,h⟩ = 'C' ∨\n  (solve_game n arr queries).get ⟨i,h⟩ = 'D' :=\n  sorry\n\n\n\
  theorem solve_game_consistent_results\n  (n : Nat)\n  (arr : List Nat)\n  (queries\
  \ : List (Char × Nat × Char))\n  (i j : Nat)\n  (hi : i < queries.length)\n  (hj\
  \ : j < queries.length)\n  (h : queries.get ⟨i,hi⟩ = queries.get ⟨j,hj⟩)\n  (h1\
  \ : i < (solve_game n arr queries).length)\n  (h2 : j < (solve_game n arr queries).length)\
  \ :\n  (solve_game n arr queries).get ⟨i,h1⟩ = (solve_game n arr queries).get ⟨j,h2⟩\
  \ :=\n  sorry\n\n\ntheorem solve_game_edge_cases\n  (n : Nat)\n  (arr : List Nat)\n\
  \  (h : arr.length > 0)\n  (min_val max_val : Nat)\n  (hmin : min_val = (List.foldl\
  \ Min.min (arr.get ⟨0, h⟩) arr))\n  (hmax : max_val = (List.foldl Max.max (arr.get\
  \ ⟨0, h⟩) arr)) :\n  let edge_queries := [\n    ('>', min_val - 1, 'C'),\n    ('<',\
  \ min_val, 'D'),\n    ('=', min_val, 'C'),\n    ('=', max_val, 'D'),\n    ('>',\
  \ max_val, 'C'),\n    ('<', max_val + 1, 'D')\n  ]\n  (solve_game n arr edge_queries).length\
  \ = 6 :=\n  sorry\n\n/--\ninfo: 'DCDDC'\n-/\n#guard_msgs in\n#eval solve_game 3\
  \ [1, 2, 3] [(\">\", 1, \"D\"), (\"<\", 2, \"C\"), (\"=\", 3, \"D\"), (\">\", 4,\
  \ \"C\"), (\"<\", 5, \"D\")]\n\n/--\ninfo: 'DD'\n-/\n#guard_msgs in\n#eval solve_game\
  \ 2 [1, 2] [(\"=\", 1, \"D\"), (\"=\", 2, \"C\")]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
