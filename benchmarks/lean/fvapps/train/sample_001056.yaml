"vc-description": "You are given a sequence of n integers a1, a2, ..., an and an integer\
  \ d.\nFind the length of the shortest non-empty contiguous subsequence with sum\
  \ of elements at least d. Formally, you should find the smallest positive integer\
  \ k with the following property: there is an integer s (1 ≤ s ≤ N-k+1) such that\
  \ as + as+1 + ... + as+k-1 ≥ d.\n\n-----Input-----\n\n- The first line of the input\
  \ contains a single integer T denoting the number of test cases. The description\
  \ of T test cases follows.\n- The first line of each test case contains two space-separated\
  \ integers n and d.\n- The second line contains n space-separated integers a1, a2,\
  \ ..., an.\n\n-----Output-----\nFor each test case, print a single line containing\
  \ one integer — the length of the shortest contiguous subsequence with sum of elements\
  \ ≥ d. If there is no such subsequence, print -1 instead.\n\n-----Constraints-----\n\
  - 1 ≤ T ≤ 105\n- 1 ≤ n ≤ 105\n- -109 ≤ d ≤ 109\n- -104 ≤ ai ≤ 104\n- 1 ≤ sum of\
  \ n over all test cases ≤ 2 · 105\n\n-----Example-----\nInput:\n\n2\n5 5\n1 2 3\
  \ 1 -5\n5 1\n1 2 3 1 -5\n\nOutput:\n\n2\n1"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def shortest_sum_subsequence (n : Nat) (target : Int) (arr : List\
  \ Int) : Int := sorry\n\ndef sum_list : List Int → Int \n  | [] => 0\n  | x::xs\
  \ => x + sum_list xs\n\n\n"
"vc-theorems": "theorem singleton_array (n : Int) :\n  shortest_sum_subsequence 1\
  \ n [n] = 1 := sorry \n\n\n\n\ntheorem edge_case_one : shortest_sum_subsequence\
  \ 1 0 [1] = 1 := sorry\n\ntheorem edge_case_two : shortest_sum_subsequence 2 5 [2,\
  \ 2] = -1 := sorry\n\n\ntheorem edge_case_three : shortest_sum_subsequence 3 3 [1,\
  \ 1, 1] = 3 := sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval shortest_sum_subsequence\
  \ 5 5 [1, 2, 3, 1, -5]\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval shortest_sum_subsequence\
  \ 5 1 [1, 2, 3, 1, -5]\n\n/--\ninfo: -1\n-/\n#guard_msgs in\n#eval shortest_sum_subsequence\
  \ 3 10 [1, 2, 3]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
