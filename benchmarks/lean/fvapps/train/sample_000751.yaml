"vc-description": "You are given an array $a$ of length $n$. A subsequence of this\
  \ array is valid, if it satisfies these two conditions:\n- There shouldn't be any\
  \ two even numbers within a distance of $K$, both which have been chosen in the\
  \ subsequence. i.e. there shouldn't be two indices $i, j$ such that $a_i$ and $a_j$\
  \ are even, $|i - j| \\leq K$ and $a_i$ and $a_j$ are in the subsequence. \n- Similarly,\
  \ there shouldn't be any two odd numbers within a distance of $K$, both which have\
  \ been chosen in the subsequence\nThe sum of a subsequence is the sum of all the\
  \ numbers in it. Your task is find the maximum sum possible in a valid subsequence\
  \ of the given array. Print this maximum sum.\n\n-----Input-----\n- The first line\
  \ of the input contains an integer $T$ denoting the number of test cases. The description\
  \ of the test cases follows.\n- The first line of each test case contains two space-separated\
  \ integers $n, k$.\n- The second line of each test case contains $n$ space-separated\
  \ integers denoting the array $a$.\n\n-----Output-----\nFor each test case, output\
  \ an integer corresponding to the answer of the problem.\n\n-----Constraints-----\n\
  - $1 \\le T \\le 10^5$\n- $1 \\le n \\leq 10^5$\n- $1 \\le k \\leq  n$\n- $1 \\\
  le a_i \\leq 10^9$\n- Sum of $n$ over all the test cases doesn't exceed $10^6$\n\
  \n-----Example Input-----\n3\n1 1\n3\n2 1\n2 2\n5 2\n1 2 3 4 6\n\n-----Example Output-----\n\
  3\n2\n11\n\n-----Explanation:-----\nTestcase 2: Only one of the two 2s can be chosen.\
  \ Hence the answer is 2.\nTestcase 3: The subsequence containing the second, third\
  \ and fifth numbers is a valid subsequence, and its sum is 2+3+6 = 11. You can check\
  \ that this is the maximum possible, and hence is the answer."
"vc-preamble": "import Imports.AllImports\n\ndef List.sum (xs : List Nat) : Nat :=\n\
  match xs with\n| [] => 0\n| x :: xs => x + List.sum xs\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_max_subsequence (n : Nat) (k : Nat) (arr : List Nat)\
  \ : Nat :=\nsorry\n"
"vc-theorems": "theorem solve_max_subsequence_basic_properties \n  (n k : Nat)\n \
  \ (arr : List Nat) \n  (h1 : n > 0)\n  (h2 : k > 0)\n  (h3 : n = arr.length) :\n\
  \  let result := solve_max_subsequence n k arr\n  -- Result is non-negative\n  (result\
  \ ≥ 0) ∧\n  -- Result doesn't exceed array sum  \n  (result ≤ arr.sum) ∧ \n  --\
  \ Result positive unless all zeros\n  (result > 0 ∨ arr.all (·= 0)) ∧\n  -- Result\
  \ respects even/odd sum\n  (result ≤ (arr.filter (·%2 = 0)).sum + (arr.filter (·%2\
  \ = 1)).sum) :=\nsorry\n\n\ntheorem solve_max_subsequence_single_element\n  (n :\
  \ Nat)\n  (h : n > 0) :\n  solve_max_subsequence 1 1 [n] = n :=\nsorry\n\n\ntheorem\
  \ solve_max_subsequence_consecutive\n  (arr : List Nat)\n  (h1 : arr.length ≥ 2)\
  \ :\n  let n := arr.length\n  let result := solve_max_subsequence n 1 arr\n  let\
  \ max_consecutive := (List.range (n-1)).foldl (fun acc i => \n    max acc (arr[i]!\
  \ + arr[i+1]!)) 0\n  result ≥ max_consecutive / 2 :=\nsorry\n\n/--\ninfo: 3\n-/\n\
  #guard_msgs in\n#eval solve_max_subsequence 1 1 [3]\n\n/--\ninfo: 2\n-/\n#guard_msgs\
  \ in\n#eval solve_max_subsequence 2 1 [2, 2]\n\n/--\ninfo: 11\n-/\n#guard_msgs in\n\
  #eval solve_max_subsequence 5 2 [1, 2, 3, 4, 6]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
