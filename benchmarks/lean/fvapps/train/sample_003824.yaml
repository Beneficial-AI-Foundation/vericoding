"vc-description": "# Esolang Interpreters #2 - Custom Smallfuck Interpreter\n\n##\
  \ About this Kata Series\n\n\"Esolang Interpreters\" is a Kata Series that originally\
  \ began as three separate, independent esolang interpreter Kata authored by [@donaldsebleung](http://codewars.com/users/donaldsebleung)\
  \ which all shared a similar format and were all somewhat inter-related.  Under\
  \ the influence of [a fellow Codewarrior](https://www.codewars.com/users/nickkwest),\
  \ these three high-level inter-related Kata gradually evolved into what is known\
  \ today as the \"Esolang Interpreters\" series.\n\nThis series is a high-level Kata\
  \ Series designed to challenge the minds of bright and daring programmers by implementing\
  \ interpreters for various [esoteric programming languages/Esolangs](http://esolangs.org),\
  \ mainly [Brainfuck](http://esolangs.org/wiki/Brainfuck) derivatives but not limited\
  \ to them, given a certain specification for a certain Esolang.  Perhaps the only\
  \ exception to this rule is the very first Kata in this Series which is intended\
  \ as an introduction/taster to the world of esoteric programming languages and writing\
  \ interpreters for them.\n\n## The Language\n\nSmallfuck is an [esoteric programming\
  \ language/Esolang](http://esolangs.org) invented in 2002 which is a sized-down\
  \ variant of the famous [Brainfuck](http://esolangs.org/wiki/Brainfuck) Esolang.\
  \  Key differences include:\n\n- Smallfuck operates only on bits as opposed to bytes\n\
  - It has a limited data storage which varies from implementation to implementation\
  \ depending on the size of the tape\n- It does not define input or output - the\
  \ \"input\" is encoded in the initial state of the data storage (tape) and the \"\
  output\" should be decoded in the final state of the data storage (tape)\n\nHere\
  \ are a list of commands in Smallfuck:\n\n- `>` - Move pointer to the right (by\
  \ 1 cell)\n- `<` - Move pointer to the left (by 1 cell)\n- `*` - Flip the bit at\
  \ the current cell\n- `[` - Jump past matching `]` if value at current cell is `0`\n\
  - `]` - Jump back to matching `[` (if value at current cell is nonzero)\n\nAs opposed\
  \ to Brainfuck where a program terminates only when all of the commands in the program\
  \ have been considered (left to right), Smallfuck terminates when any of the two\
  \ conditions mentioned below become true:\n\n- All commands have been considered\
  \ from left to right\n- The pointer goes out-of-bounds (i.e. if it moves to the\
  \ left of the first cell or to the right of the last cell of the tape)\n\nSmallfuck\
  \ is considered to be Turing-complete **if and only if** it had a tape of infinite\
  \ length; however, since the length of the tape is always defined as finite (as\
  \ the interpreter cannot return a tape of infinite length), its computational class\
  \ is of bounded-storage machines with bounded input.\n\nMore information on this\
  \ Esolang can be found [here](http://esolangs.org/wiki/Smallfuck).\n\n## The Task\n\
  \nImplement a custom Smallfuck interpreter `interpreter()` (`interpreter` in Haskell\
  \ and F#, `Interpreter` in C#, `custom_small_fuck:interpreter/2` in Erlang) which\
  \ accepts the following arguments:\n\n1. `code` - **Required**.  The Smallfuck program\
  \ to be executed, passed in as a string.  May contain non-command characters.  Your\
  \ interpreter should simply ignore any non-command characters.\n2. `tape` - **Required**.\
  \  The initial state of the data storage (tape), passed in **as a string**.  For\
  \ example, if the string `\"00101100\"` is passed in then it should translate to\
  \ something of this form within your interpreter: `[0, 0, 1, 0, 1, 1, 0, 0]`.  You\
  \ may assume that all input strings for `tape` will be non-empty and will only contain\
  \ `\"0\"`s and `\"1\"`s.\n\nYour interpreter should return the final state of the\
  \ data storage (tape) **as a string** in the same format that it was passed in.\
  \  For example, if the tape in your interpreter ends up being `[1, 1, 1, 1, 1]`\
  \ then return the string `\"11111\"`.\n\n*NOTE: The pointer of the interpreter always\
  \ starts from the first (leftmost) cell of the tape, same as in Brainfuck.*\n\n\
  Good luck :D\n\n## Kata in this Series\n\n1. [Esolang Interpreters #1 - Introduction\
  \ to Esolangs and My First Interpreter (MiniStringFuck)](https://www.codewars.com/kata/esolang-interpreters-number-1-introduction-to-esolangs-and-my-first-interpreter-ministringfuck)\n\
  2. **Esolang Interpreters #2 - Custom Smallfuck Interpreter**\n3. [Esolang Interpreters\
  \ #3 - Custom Paintfuck Interpreter](http://codewars.com/kata/esolang-interpreters-number-3-custom-paintf-star-star-k-interpreter)\n\
  4. [Esolang Interpreters #4 - Boolfuck Interpreter](http://codewars.com/kata/esolang-interpreters-number-4-boolfuck-interpreter)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def interpreter (code: String) (tape: String) : String :=\n  sorry\n"
"vc-theorems": "theorem empty_code_unchanged (tape: String) (h: ∀ c, c ∈ tape.data\
  \ → c = '0' ∨ c = '1') : \n  interpreter \"\" tape = tape :=\n  sorry\n\n\ntheorem\
  \ output_is_binary (code tape result: String)\n  (h: ∀ c, c ∈ tape.data → c = '0'\
  \ ∨ c = '1')\n  (h2: result = interpreter code tape) :\n  (∀ c, c ∈ result.data\
  \ → c = '0' ∨ c = '1') ∧ result.length = tape.length :=\n  sorry\n\n\ntheorem single_flip_inverts\
  \ (tape: String) \n  (h: tape.length > 0)\n  (h2: ∀ c, c ∈ tape.data → c = '0' ∨\
  \ c = '1') :\n  let result := interpreter \"*\" tape\n  let first_char := tape.get\
  \ 0\n  let new_first_char := result.get 0\n  (first_char = '0' → new_first_char\
  \ = '1') ∧\n  (first_char = '1' → new_first_char = '0') ∧\n  result.drop 1 = tape.drop\
  \ 1 :=\n  sorry\n\n\ntheorem pointer_bounds (code tape: String)\n  (h: ∀ c, c ∈\
  \ tape.data → c = '0' ∨ c = '1') :\n  (interpreter code tape).length = tape.length\
  \ :=\n  sorry\n\n/--\ninfo: '10101100'\n-/\n#guard_msgs in\n#eval interpreter \"\
  *\" \"00101100\"\n\n/--\ninfo: '01001100'\n-/\n#guard_msgs in\n#eval interpreter\
  \ \">*>*\" \"00101100\"\n\n/--\ninfo: '10101'\n-/\n#guard_msgs in\n#eval interpreter\
  \ \"[>[*>*>*>]>]\" \"10110\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
