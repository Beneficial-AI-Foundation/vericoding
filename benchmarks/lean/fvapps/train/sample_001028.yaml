"vc-description": "Chef and Abhishek both are fighting for the post of Chairperson\
  \ to be part of ACE committee and are trying their best. To select only one student\
  \ their teacher gave them a binary string (string consisting of only 0's and 1's)\
  \ and asked them to find number of sub-strings present in the given string that\
  \ satisfy the following condition:\nThe substring should start with 0 and end with\
  \ 1 or the substring should start with 1 and end with 0 but not start with 0 and\
  \ end with 0 and start with 1 and end with 1.\nMore formally, strings such as 100,0101\
  \ are allowed since they start and end with different characters. But strings such\
  \ as 0110,1101 are not allowed because they start and end with same characters.\n\
  Both Chef and Abhishek try their best to solve it but couldn't do it. You being\
  \ a very good friend of Chef, he asks for your help so that he can solve it and\
  \ become the Chairperson.\n\n-----Input:-----\nThe first line of the input contains\
  \ a single integer T denoting the number of test cases. The description of T test\
  \ cases follows.\nThe first line of each test case contains a single integer N denoting\
  \ the length of the string.\nThe second line of each test case contains a binary\
  \ string of length N.\n\n-----Output:-----\nFor each test case, print a single line\
  \ containing one integer ― the number of sub strings satisfying above conditions.\n\
  \n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $2 \\leq N \\leq 10^9$\nBinary\
  \ string consist's only 0 and 1.\n\n-----Sample Input:-----\n1\n4\n\n1010\n\n-----Sample\
  \ Output:-----\n4\n\n-----EXPLANATION:-----\nAll possible substring are : { (1),(0),(1),(0),(10),(01),(10),(101),(010),(1010)\
  \ }. Out of these only 4 substrings {(10),(01),(10),(1010)} start and end with different\
  \ characters. Hence the answer 4."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_alternating_substrings (n : Nat) (s : String) : Nat :=\n\
  \  sorry\n"
"vc-theorems": "theorem result_non_negative {n : Nat} {s : String} :\n  find_alternating_substrings\
  \ n s ≥ 0 :=\n  sorry\n\n\ntheorem result_bounded {n : Nat} {s : String} :\n  find_alternating_substrings\
  \ n s ≤ s.length * (s.length - 1) / 2 :=\n  sorry\n\n\ntheorem empty_or_single_char\
  \ {n : Nat} {s : String} :\n  s.length ≤ 1 → find_alternating_substrings n s = 0\
  \ :=\n  sorry\n\n\n\n\ntheorem zero_edge_case {n : Nat} :\n  find_alternating_substrings\
  \ n \"0\" = 0 :=\n  sorry\n\n\ntheorem one_edge_case {n : Nat} :\n  find_alternating_substrings\
  \ n \"1\" = 0 :=\n  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
