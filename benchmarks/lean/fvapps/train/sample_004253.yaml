"vc-description": "Write a function that takes a single array as an argument (containing\
  \ multiple strings and/or positive numbers and/or arrays), and returns one of four\
  \ possible string values, depending on the ordering of the lengths of the elements\
  \ in the input array:\n\nYour function should return...\n\n- “Increasing” - if the\
  \ lengths of the elements increase from left to right (although it is possible that\
  \ some neighbouring elements may also be equal in length)\n- “Decreasing” - if the\
  \ lengths of the elements decrease from left to right (although it is possible that\
  \ some neighbouring elements may also be equal in length)\n- “Unsorted” - if the\
  \ lengths of the elements fluctuate from left to right\n- “Constant” - if all element's\
  \ lengths are the same.\n\n\n\nNumbers and Strings should be evaluated based on\
  \ the number of characters or digits used to write them.\n\nArrays should be evaluated\
  \ based on the number of elements counted directly in the parent array (but not\
  \ the number of elements contained in any sub-arrays).\n\nHappy coding! :)"
"vc-preamble": "import Imports.AllImports\n\ndef lengthOf (α : Type) : α → Nat\n \
  \ | _ => sorry\n\n\ndef order_type {α : Type} (arr : List α) : String := sorry\n\
  \ndef is_sorted_increasing (xs : List Nat) : Prop := \n  ∀ i j, i < j → j < xs.length\
  \ → xs[i]! ≤ xs[j]!\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_sorted_decreasing (xs : List Nat) : Prop :=\n  ∀ i j, i\
  \ < j → j < xs.length → xs[i]! ≥ xs[j]!\n"
"vc-theorems": "theorem constant_length_elements {α : Type} [Inhabited α] (arr : List\
  \ α) :\n  arr.length > 0 → \n  (∀ i j, i < arr.length → j < arr.length → lengthOf\
  \ α (arr[i]!) = lengthOf α (arr[j]!)) →\n  order_type arr = \"Constant\" := sorry\n\
  \n\ntheorem increasing_length_numbers (arr : List Nat) :\n  arr.length > 0 →\n \
  \ is_sorted_increasing (arr.map (λ x => lengthOf Nat x)) →\n  (∃ i j, i < arr.length\
  \ → j < arr.length → lengthOf Nat (arr[i]!) ≠ lengthOf Nat (arr[j]!)) →\n  order_type\
  \ arr = \"Increasing\" := sorry\n\n\ntheorem decreasing_length_lists (arr : List\
  \ (List Nat)) :\n  arr.length > 0 →\n  is_sorted_decreasing (arr.map List.length)\
  \ →\n  (∃ i j, i < arr.length → j < arr.length → (arr[i]!).length ≠ (arr[j]!).length)\
  \ →\n  order_type arr = \"Decreasing\" := sorry\n\n\ntheorem unsorted_mixed_types\
  \ {α : Type} [Inhabited α] (arr : List α) :\n  arr.length > 0 →\n  ¬ is_sorted_increasing\
  \ (arr.map (lengthOf α)) →\n  ¬ is_sorted_decreasing (arr.map (lengthOf α)) →\n\
  \  (∃ i j, i < arr.length → j < arr.length → lengthOf α (arr[i]!) ≠ lengthOf α (arr[j]!))\
  \ →\n  order_type arr = \"Unsorted\" := sorry\n\n\ntheorem empty_list {α : Type}\
  \ :\n  order_type ([] : List α) = \"Constant\" := sorry\n\n/--\ninfo: 'Constant'\n\
  -/\n#guard_msgs in\n#eval order_type [[1, \"b\", [\"p\"], 2]]\n\n/--\ninfo: 'Increasing'\n\
  -/\n#guard_msgs in\n#eval order_type [123, 1234, 12345, 123456]\n\n/--\ninfo: 'Decreasing'\n\
  -/\n#guard_msgs in\n#eval order_type [[1, 2, 3, 4], [5, 6, 7], [8, 9]]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
