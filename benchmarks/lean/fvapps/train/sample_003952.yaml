"vc-description": "# Task\n A range-collapse representation of an array of integers\
  \ looks like this: `\"1,3-6,8\"`, where `3-6` denotes the range from `3-6`, i.e.\
  \ `[3,4,5,6]`. \n \n Hence `\"1,3-6,8\"` = `[1,3,4,5,6,8]`. Some other range-collapse\
  \ representations of `[1,3,4,5,6,8]` include `\"1,3-5,6,8\", \"1,3,4,5,6,8\", etc`.\n\
  \n Each range is written in the following format `\"a-b\"`, where `a < b`, and the\
  \ whole range must belong to the array in an increasing order.\n\n You are given\
  \ an array `arr`. Your task is to find the number of different range-collapse representations\
  \ of the given array.\n\n# Example\n \n For `arr = [1,3,4,5,6,8]`, the result should\
  \ be `8`.\n ```\n \"1,3-4,5,6,8\"\n \"1,3-4,5-6,8\"\n \"1,3-5,6,8\"\n \"1,3-6,8\"\
  \n \"1,3,4-5,6,8\"\n \"1,3,4-6,8\"\n \"1,3,4,5-6,8\"\n \"1,3,4,5,6,8\"```\n\n# Input/OutPut\n\
  \n\n - `[input]` integer array `arr`\n\n  sorted array of different positive integers.\n\
  \n\n - `[output]` an integer\n\n  the number of different range-collapse representations\
  \ of the given array."
"vc-preamble": "import Imports.AllImports\n\ndef count_range_collapses (arr : List\
  \ Int) : Nat := sorry\n\ndef is_power_of_two (n : Nat) : Bool := \n  (n &&& (n -\
  \ 1) = 0) && n > 0\n\n\ndef count_consecutive_pairs (l : List Int) : Nat :=\n  let\
  \ pairs := l.zip (l.drop 1)\n  pairs.foldl (fun acc p => if p.2 - p.1 = 1 then acc\
  \ + 1 else acc) 0\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sort_list (l : List Int) : List Int :=\n  l.mergeSort (fun\
  \ a b => a ≤ b)\n"
"vc-theorems": "theorem non_consecutive_array_returns_one \n  {arr : List Int} (h\
  \ : arr.length > 0) :\n  (∀ i, i + 1 < arr.length → arr[i]! + 1 < arr[i+1]!) → \n\
  \  count_range_collapses arr = 1 := sorry\n\n\ntheorem result_is_power_of_two \n\
  \  {arr : List Int} (h : arr.length > 1) :\n  is_power_of_two (count_range_collapses\
  \ arr) := sorry\n\n\ntheorem consecutive_pairs_determine_result\n  {arr : List Int}\
  \ (h : arr.length > 1) :\n  let sorted := sort_list arr\n  let consec_count := count_consecutive_pairs\
  \ sorted\n  count_range_collapses arr = 2 ^ consec_count := sorry\n\n/--\ninfo:\
  \ 8\n-/\n#guard_msgs in\n#eval count_range_collapses [1, 3, 4, 5, 6, 8]\n\n/--\n\
  info: 4\n-/\n#guard_msgs in\n#eval count_range_collapses [1, 2, 3]\n\n/--\ninfo:\
  \ 1\n-/\n#guard_msgs in\n#eval count_range_collapses [11, 43, 66, 123]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
