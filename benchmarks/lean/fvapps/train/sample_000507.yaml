"vc-description": "Finally, the pandemic is over in ChefLand, and the chef is visiting\
  \ the school again. Chef likes to climb the stairs of his school's floor by skipping\
  \ one step, sometimes chef climbs the stairs one by one. Simply, the chef can take\
  \ one or 2 steps in one upward movement. There are N stairs between ground and next\
  \ floor. The chef is on the ground floor and he wants to go to the next floor with\
  \ Cheffina but, Cheffina asks chef in how many ways, the chef can reach the next\
  \ floor normally or any combination of skipping one step, where order doesn't matter.\
  \ \n\n-----Input:-----\n- First-line will contain $T$, the number of test cases.\
  \ Then the test cases follow. \n- Each test case contains a single line of input,\
  \ two integers $N$. \n\n-----Output:-----\nFor each test case, output in a single\
  \ line answer as the number of ways.\n\n-----Constraints-----\n- $1 \\leq T \\leq\
  \ 1000$\n- $1 \\leq N \\leq 10^5$\n\n-----Sample Input:-----\n1\n3\n\n-----Sample\
  \ Output:-----\n2\n\n-----EXPLANATION:-----\nways: [1,1,1], here chef climb to the\
  \ next floor, one by one stair.\n[1,2], here chef climb to the next floor, one step\
  \ first and after that 2 stairs at once.\nNote, [2,1] consider the same as that\
  \ of [1,2] hence ignored."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_ways_to_climb (n : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem count_ways_positive (n : Nat) (h : n > 0) :\n  count_ways_to_climb\
  \ n > 0 :=\nsorry\n\n\ntheorem count_ways_upper_bound (n : Nat) (h : n > 0) :\n\
  \  count_ways_to_climb n ≤ n :=\nsorry\n\n\ntheorem count_ways_lower_bound (n :\
  \ Nat) (h : n > 0) :\n  count_ways_to_climb n ≥ (n + 1) / 2 :=\nsorry\n\n\ntheorem\
  \ count_ways_base_cases :\n  count_ways_to_climb 1 = 1 ∧ count_ways_to_climb 2 =\
  \ 2 :=\nsorry\n\n\ntheorem count_ways_even (n : Nat) (h₁ : n > 0) (h₂ : n % 2 =\
  \ 0) :\n  count_ways_to_climb n = n/2 + 1 :=\nsorry\n\n\ntheorem count_ways_odd\
  \ (n : Nat) (h₁ : n > 0) (h₂ : n % 2 = 1) :\n  count_ways_to_climb n = (n-1)/2 +\
  \ 1 :=\nsorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval count_ways_to_climb 3\n\
  \n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval count_ways_to_climb 4\n\n/--\ninfo: 3\n\
  -/\n#guard_msgs in\n#eval count_ways_to_climb 5\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
