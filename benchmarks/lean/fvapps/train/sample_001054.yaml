"vc-description": "Two cheeky thieves (Chef being one of them, the more talented one\
  \ of course) have came across each other in the underground vault of the State Bank\
  \ of Churuland. They are shocked! Indeed, neither expect to meet a colleague in\
  \ such a place with the same intentions to carry away all the money collected during\
  \ Churufest 2015.\n\nThey have carefully counted a total of exactly 1 billion (109)\
  \ dollars in the bank vault. Now they must decide how to divide the booty. But there\
  \ is one problem: the thieves have only M minutes to leave the bank before the police\
  \ arrives. Also, the more time they spend in the vault, the less amount could carry\
  \ away from the bank. Formally speaking, they can get away with all of the billion\
  \ dollars right now, but after t minutes they can carry away only  1 billion * pt\
  \ dollars, where p is some non-negative constant less than or equal to unity, and\
  \ at t = M, they get arrested and lose all the money.\nThey will not leave the vault\
  \ until a decision on how to divide the money has been made.\n\nThe money division\
  \ process proceeds in the following way: at the beginning of each minute starting\
  \ from the 1st (that is, t = 0), one of them proposes his own way to divide the\
  \ booty. If his colleague agrees, they leave the bank with pockets filled with the\
  \ proposed amounts of dollars. If not, the other one proposes his way at the next\
  \ minute etc. To escape arrest, they can only propose plans till the beginning of\
  \ the Mth minute (i.e., till t = M-1).\nEach thief wants to maximize his earnings,\
  \ but if there are two plans with the same amounts for him, he would choose the\
  \ one which leads to a larger total amount of stolen dollars.\n\nChef is about to\
  \ start this procedure, and he is the first to propose a plan. You are wondering\
  \ what will be the final division of money, if each thief chooses the optimal way\
  \ for himself and money is considering real.\n\n-----Input-----\nThe first line\
  \ of input contains an integer T denoting the number of test cases. The description\
  \ of T test cases follows. The only line of input for each test case contains an\
  \ integer M denoting the number of minutes until arrest and a double denoting the\
  \ constant p.\n\n-----Output-----\nFor each test case, output a single line containing\
  \ two space-separated doubles denoting the amount of dollars each thief will get\
  \ in the optimal division. First number: dollars amassed by Chef, and second: by\
  \ his colleague. The answer will be considered correct if its absolute error doesn't\
  \ exceed 10-2.\n\n\n-----Constraints and subtasks-----\n- 1 ≤ T ≤ 105\n- 0 ≤ p ≤\
  \  1  \nSubtask 1 (15 points) : \n1 ≤ M ≤ 3\nSubtask 2 (55 points) : \n1 ≤ M ≤ \
  \ 103\nSubtask 3 (30 points) : \n1 ≤ M ≤ 109\n\n-----Example-----\nInput:\n2\n1\
  \ 0.5\n2 0.5\nOutput:\n1000000000.0 0.0\n500000000.0 500000000.0\n\n-----Explanation-----\n\
  Example case 1. In the second case, if decision isn't made at t = 0, total amount\
  \ of money decreases to 5*108 at t = 1 which leads to a situation worse than the\
  \ given solution."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def total_money : Float := 1000000000.0\n\ndef solve_division (m\
  \ : Nat) (p : Float) : Float × Float :=\n  sorry\n"
"vc-theorems": "theorem solve_division_sums_to_total (m : Nat) (p : Float)\n  (h1\
  \ : m ≥ 1) (h2 : m ≤ 100)\n  (h3 : p > 0.000001) (h4 : p < 0.999999) :\n  let (chef,\
  \ other) := solve_division m p\n  Float.abs (chef + other - total_money) < 0.01\
  \ := sorry\n\n\ntheorem solve_division_non_negative (m : Nat) (p : Float)\n  (h1\
  \ : m ≥ 1) (h2 : m ≤ 100)\n  (h3 : p > 0.000001) (h4 : p < 0.999999) :\n  let (chef,\
  \ other) := solve_division m p\n  chef ≥ 0 ∧ other ≥ 0 := sorry\n\n\ntheorem solve_division_m_one\
  \ (p : Float)\n  (h1 : p > 0.000001) (h2 : p < 0.999999) :\n  let (chef, other)\
  \ := solve_division 1 p\n  Float.abs (chef - total_money) < 0.01 ∧ Float.abs other\
  \ < 0.01 := sorry\n\n\ntheorem solve_division_bounds (m : Nat) (p : Float)\n  (h1\
  \ : m ≥ 1) (h2 : m ≤ 100)\n  (h3 : p > 0.000001) (h4 : p < 0.999999) :\n  let (chef,\
  \ other) := solve_division m p\n  chef ≤ total_money ∧ other ≤ total_money := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
