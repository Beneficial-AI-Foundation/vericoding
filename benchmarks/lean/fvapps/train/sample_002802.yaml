"vc-description": "## Introduction\n\n\nEach chemical element in its neutral state\
  \ has a specific number of electrons associated with it. This is represented by\
  \ the **atomic number** which is noted by an integer number next to or above each\
  \ element of the periodic table (as highlighted in the image above).\n\nAs we move\
  \ from left to right, starting from the top row of the periodic table, each element\
  \ differs from its predecessor by 1 unit (electron). Electrons fill in different\
  \ orbitals sets according to a specific order. Each set of orbitals, when full,\
  \ contains an even number of electrons.\n\nThe orbital sets are:\n* The _**s** orbital_\
  \ - a single orbital that can hold a maximum of 2 electrons.\n* The _**p** orbital\
  \ set_ - can hold 6 electrons.\n* The _**d** orbital set_ - can hold 10 electrons.\n\
  * The _**f** orbital set_ - can hold 14 electrons.\n\n\nThe order in which electrons\
  \ are filling the different set of orbitals is shown in the picture above. First\
  \ electrons will occupy the **1s** orbital, then the **2s**, then the **2p** set,\
  \ **3s** and so on.\n\nElectron configurations show how the number of electrons\
  \ of an element is distributed across each orbital set. Each orbital is written\
  \ as a sequence that follows the order in the picture, joined by the number of electrons\
  \ contained in that orbital set. The final electron configuration is a single string\
  \ of orbital names and number of electrons per orbital set where the first 2 digits\
  \ of each substring represent the orbital name followed by a number that states\
  \ the number of electrons that the orbital set contains.\n\nFor example, a string\
  \ that demonstrates an electron configuration of a chemical element that contains\
  \ 10 electrons is: `1s2 2s2 2p6`. This configuration shows that there are two electrons\
  \ in the `1s` orbital set, two electrons in the `2s` orbital set, and six electrons\
  \ in the `2p` orbital set. `2 + 2 + 6 = 10` electrons total.\n\n___\n\n# Task\n\n\
  Your task is to write a function that displays the electron configuration built\
  \ according to the Madelung rule of all chemical elements of the periodic table.\
  \ The argument will be the symbol of a chemical element, as displayed in the periodic\
  \ table.\n\n**Note**: There will be a preloaded array called `ELEMENTS` with chemical\
  \ elements sorted by their atomic number.\n\nFor example, when the element \"O\"\
  \ is fed into the function the output should look like: \n\n`\"O -> 1s2 2s2 2p4\"\
  `\n\nHowever, there are some exceptions! The electron configurations of the elements\
  \ below should end as:\n\n```\nCr -> ...3d5 4s1\nCu -> ...3d10 4s1\nNb -> ...4d4\
  \ 5s1\nMo -> ...4d5 5s1\nRu -> ...4d7 5s1\nRh -> ...4d8 5s1\nPd -> ...4d10 5s0\n\
  Ag -> ...4d10 5s1\nLa -> ...4f0 5d1\nCe -> ...4f1 5d1\nGd -> ...4f7 5d1 6s2\nPt\
  \ -> ...4f14 5d9 6s1\nAu -> ...4f14 5d10 6s1\nAc -> ...5f0 6d1 7s2\nTh -> ...5f0\
  \ 6d2 7s2\nPa -> ...5f2 6d1 7s2\nU  -> ...5f3 6d1 7s2\nNp -> ...5f4 6d1 7s2\nCm\
  \ -> ...5f7 6d1 7s2\n```\n\n**Note**: for `Ni` the electron configuration should\
  \ be `3d8 4s2` instead of `3d9 4s1`."
"vc-preamble": "import Imports.AllImports\n\ndef Element.toNat : Element → Nat \n\
  | H => 1 | He => 2 | Li => 3 | Be => 4 | B => 5 | C => 6 | N => 7 | O => 8\n| F\
  \ => 9 | Ne => 10 | Na => 11 | Mg => 12 | Al => 13 | Si => 14 | P => 15\n| S =>\
  \ 16 | Cl => 17 | Ar => 18 | K => 19 | Ca => 20 | Sc => 21 | Ti => 22\n| V => 23\
  \ | Cr => 24 | Mn => 25 | Fe => 26 | Co => 27 | Ni => 28 | Cu => 29\n| Zn => 30\
  \ | Ga => 31 | Ge => 32 | As => 33 | Se => 34 | Br => 35 | Kr => 36\n| Rb => 37\
  \ | Sr => 38 | Y => 39 | Zr => 40 | Nb => 41 | Mo => 42 | Tc => 43\n| Ru => 44 |\
  \ Rh => 45 | Pd => 46 | Ag => 47 | Cd => 48 | In => 49 | Sn => 50\n| Sb => 51 |\
  \ Te => 52 | I => 53 | Xe => 54 | Cs => 55 | Ba => 56 | La => 57\n| Ce => 58 | Pr\
  \ => 59 | Nd => 60 | Pm => 61 | Sm => 62 | Eu => 63 | Gd => 64\n| Tb => 65 | Dy\
  \ => 66 | Ho => 67 | Er => 68 | Tm => 69 | Yb => 70 | Lu => 71\n| Hf => 72 | Ta\
  \ => 73 | W => 74 | Re => 75 | Os => 76 | Ir => 77 | Pt => 78\n| Au => 79 | Hg =>\
  \ 80 | Tl => 81 | Pb => 82 | Bi => 83 | Po => 84 | At => 85\n| Rn => 86 | Fr =>\
  \ 87 | Ra => 88 | Ac => 89 | Th => 90 | Pa => 91 | U => 92\n| Np => 93 | Pu => 94\
  \ | Am => 95 | Cm => 96 | Bk => 97 | Cf => 98 | Es => 99\n| Fm => 100 | Md => 101\
  \ | No => 102 | Lr => 103 | Rf => 104 | Db => 105\n| Sg => 106 | Bh => 107 | Hs\
  \ => 108 | Mt => 109 | Ds => 110 | Rg => 111\n| Cn => 112 | Nh => 113 | Fl => 114\
  \ | Mc => 115 | Lv => 116 | Ts => 117\n| Og => 118\n\ninductive Orbital \n| s |\
  \ p | d | f | g\nderiving Repr\n\nstructure OrbitalConfig where\n  n: Nat \n  l:\
  \ Orbital\n  electrons: Nat\n\n\ndef get_electron_configuration (e: Element) : List\
  \ OrbitalConfig :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sumElectrons (config: List OrbitalConfig) : Nat :=\n  match\
  \ config with\n  | [] => 0\n  | x :: xs => x.electrons + sumElectrons xs\n"
"vc-theorems": "theorem electron_config_format (e: Element) (config: List OrbitalConfig):\n\
  \  get_electron_configuration e = config →\n  ∀ oc ∈ config, \n    oc.n > 0 ∧ \n\
  \    match oc.l with\n    | Orbital.s => oc.electrons ≤ 2\n    | Orbital.p => oc.electrons\
  \ ≤ 6\n    | Orbital.d => oc.electrons ≤ 10  \n    | Orbital.f => oc.electrons ≤\
  \ 14\n    | Orbital.g => oc.electrons ≤ 18\n:= sorry\n\n\ntheorem electron_count_conservation\
  \ (e: Element):\n  let config := get_electron_configuration e\n  sumElectrons config\
  \ = Element.toNat e := sorry\n\n\ntheorem orbital_order (e: Element):\n  let config\
  \ := get_electron_configuration e\n  ∀ i j, i ≤ j → i < config.length → j < config.length\
  \ →\n  (config.get ⟨i, sorry⟩).n ≤ (config.get ⟨j, sorry⟩).n := sorry\n\n\ntheorem\
  \ first_period (e: Element) :\n  (e = Element.H ∨ e = Element.He) →\n  let config\
  \ := get_electron_configuration e\n  ∀ oc ∈ config, oc.n = 1 ∧ oc.l = Orbital.s\
  \ := sorry\n\n/--\ninfo: 'H -> 1s1'\n-/\n#guard_msgs in\n#eval get_electron_configuration\
  \ \"H\"\n\n/--\ninfo: 'Cr -> 1s2 2s2 2p6 3s2 3p6 3d5 4s1'\n-/\n#guard_msgs in\n\
  #eval get_electron_configuration \"Cr\"\n\n/--\ninfo: 'C -> 1s2 2s2 2p2'\n-/\n#guard_msgs\
  \ in\n#eval get_electron_configuration \"C\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
