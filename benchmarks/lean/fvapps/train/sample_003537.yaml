"vc-description": "You have an array of numbers.  \nYour task is to sort ascending\
  \ odd numbers but even numbers must be on their places.\n\nZero isn't an odd number\
  \ and you don't need to move it. If you have an empty array, you need to return\
  \ it.\n\n*Example*\n```python\nsort_array([5, 3, 2, 8, 1, 4]) == [1, 3, 2, 8, 5,\
  \ 4]\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sort_array (arr : List Int) : List Int := sorry\n\ndef isSorted\
  \ (l : List Int) : Prop :=\n  ∀ i j, i < j → j < l.length → l[i]! ≤ l[j]!\n"
"vc-theorems": "theorem sort_array_preserves_evens (arr : List Int) : \n  let result\
  \ := sort_array arr\n  List.length arr = List.length result ∧\n  ∀ i, i < arr.length\
  \ → \n    (arr[i]! % 2 = 0 → result[i]! = arr[i]!) := sorry\n\n\ntheorem sort_array_sorts_odds\
  \ (arr : List Int) :\n  let result := sort_array arr\n  let odds := result.filter\
  \ (fun x => x % 2 ≠ 0)\n  isSorted odds := sorry\n\n\ntheorem sort_array_preserves_odd_count\
  \ (arr : List Int) :\n  let result := sort_array arr\n  (arr.filter (fun x => x\
  \ % 2 ≠ 0)).length = \n  (result.filter (fun x => x % 2 ≠ 0)).length := sorry\n\n\
  /--\ninfo: expected1\n-/\n#guard_msgs in\n#eval sort_array [5, 3, 2, 8, 1, 4]\n\n\
  /--\ninfo: expected2\n-/\n#guard_msgs in\n#eval sort_array [2, 22, 37, 11, 4, 1,\
  \ 5, 0]\n\n/--\ninfo: expected3\n-/\n#guard_msgs in\n#eval sort_array [1, 2, 3,\
  \ 4, 5, 6, 7, 8, 9, 0]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
