"vc-description": "A core idea of several left-wing ideologies is that the wealthiest\
  \ should *support* the poorest, no matter what and that is exactly what you are\
  \ called to do using this kata (which, on a side note, was born out of the necessity\
  \ to redistribute the width of `div`s into a given container).\n\nYou will be given\
  \ two parameters, `population` and `minimum`: your goal is to give to each one according\
  \ to his own needs (which we assume to be equal to `minimum` for everyone, no matter\
  \ what), taking from the richest (bigger numbers) first.\n\nFor example, assuming\
  \ a population `[2,3,5,15,75]` and `5` as a minimum, the expected result should\
  \ be `[5,5,5,15,70]`. Let's punish those filthy capitalists, as we all know that\
  \ being rich has to be somehow a fault and a shame!\n\nIf you happen to have few\
  \ people as the richest, just take from the ones with the lowest index (the closest\
  \ to the left, in few words) in the array first, on a 1:1 based heroic proletarian\
  \ redistribution, until everyone is satisfied.\n\nTo clarify this rule, assuming\
  \ a population `[2,3,5,45,45]` and `5` as `minimum`, the expected result should\
  \ be `[5,5,5,42,43]`.\n\nIf you want to see it in steps, consider removing `minimum`\
  \ from every member of the population, then iteratively (or recursively) adding\
  \ 1 to the poorest while removing 1 from the richest. Pick the element most at left\
  \ if more elements exist with the same level of minimal poverty, as they are certainly\
  \ even more aligned with the party will than other poor people; similarly, it is\
  \ ok to take from the richest one on the left first, so they can learn their lesson\
  \ and be more kind, possibly giving more *gifts* to the inspectors of the State!\n\
  \nIn steps:\n```\n[ 2, 3, 5,45,45] becomes\n[-3,-2, 0,40,40] that then becomes\n\
  [-2,-2, 0,39,40] that then becomes\n[-1,-2, 0,39,39] that then becomes\n[-1,-1,\
  \ 0,38,39] that then becomes\n[ 0,-1, 0,38,38] that then becomes\n[ 0, 0, 0,37,38]\
  \ that then finally becomes (adding the minimum again, as no value is no longer\
  \ under the poverty threshold\n[ 5, 5, 5,42,43]\n```\n\nIf giving `minimum` is unfeasable\
  \ with the current resources (as it often comes to be the case in socialist communities...),\
  \ for example if the above starting population had set a goal of giving anyone at\
  \ least `30`, just return an empty array `[]`."
"vc-preamble": "import Imports.AllImports\n\ndef List.sum (xs : List Nat) : Nat :=\n\
  \  match xs with\n  | [] => 0\n  | x :: xs => x + List.sum xs\n\n\ndef List.modifyNth\
  \ (xs : List α) (n : Nat) (v : α) : List α :=\n  match n, xs with\n  | _, [] =>\
  \ []\n  | 0, x :: xs => v :: xs\n  | n + 1, x :: xs => x :: modifyNth xs n v\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def Nat.abs (n : Nat) : Nat := n\n\ndef socialist_distribution\
  \ (population : List Nat) (minimum : Nat) : Option (List Nat) :=\n  sorry\n"
"vc-theorems": "theorem socialist_distribution_properties {population : List Nat}\
  \ {minimum : Nat}\n  (h : population ≠ []) :\n  match socialist_distribution population\
  \ minimum with\n  | none => minimum > List.sum population / List.length population\n\
  \  | some result => \n      (List.length result = List.length population) ∧ \n \
  \     (List.sum result = List.sum population) ∧\n      (∀ x ∈ result, x ≥ minimum)\
  \ ∧\n      (∀ x ∈ result, x ≥ 0) ∧\n      (∀ i j, i < List.length result → j < List.length\
  \ result → i ≠ j →\n        let swapped := result.modifyNth i (result.get! j) |>.modifyNth\
  \ j (result.get! i)\n        (∀ x ∈ swapped, x ≥ minimum) →\n        List.sum (List.zipWith\
  \ (·-·) population result |>.map Nat.abs) ≤ \n        List.sum (List.zipWith (·-·)\
  \ population swapped |>.map Nat.abs))\n  := by sorry\n\n\ntheorem minimum_zero_returns_original\
  \ {population : List Nat} (h : population ≠ []) :\n  socialist_distribution population\
  \ 0 = some population := by sorry\n\n/--\ninfo: [5, 5, 5, 15, 70]\n-/\n#guard_msgs\
  \ in\n#eval socialist_distribution [2, 3, 5, 15, 75] 5\n\n/--\ninfo: [5, 5, 5, 42,\
  \ 43]\n-/\n#guard_msgs in\n#eval socialist_distribution [2, 3, 5, 45, 45] 5\n\n\
  /--\ninfo: [20, 20, 20, 20, 20]\n-/\n#guard_msgs in\n#eval socialist_distribution\
  \ [2, 3, 5, 15, 75] 20\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
