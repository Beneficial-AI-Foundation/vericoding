"vc-description": "In this kata, the number 0 is infected. You are given a list. Every\
  \ turn, any item in the list that is adjacent to a 0 becomes infected and transforms\
  \ into a 0. How many turns will it take for the whole list to become infected?\n\
  \n```\n[0,1,1,0] ==> [0,0,0,0] \nAll infected in 1 turn.\n\n[1,1,0,1,1] --> [1,0,0,0,1]\
  \ --> [0,0,0,0,0]\nAll infected in 2 turns\n\n[0,1,1,1] --> [0,0,1,1] --> [0,0,0,1]\
  \ --> [0,0,0,0]\nAll infected in 3 turns.\n```\n\nAll lists will contain at least\
  \ one item, and at least one zero, and the only items will be 0s and 1s. Lists may\
  \ be very very long, so pure brute force approach will not work."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def infected_zeroes (arr : List Nat) : Nat := sorry\n\n\n\n\n\n\
  theorem infected_zeroes_singleton_zero (arr : List Nat)\n  (h : arr = [0]) :\n \
  \ infected_zeroes arr = 0 := sorry\n"
"vc-theorems": "theorem infected_zeroes_singleton_one (arr : List Nat)\n  (h : arr\
  \ = [1]) :\n  infected_zeroes arr = 1 := sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs\
  \ in\n#eval infected_zeroes [0, 1, 1, 0]\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval\
  \ infected_zeroes [1, 1, 0, 1, 1]\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval infected_zeroes\
  \ [0, 1, 1, 1]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
