"vc-description": "Jem is famous for his laziness at school. He always leaves things\
  \ to last minute. Now Jem has N problems in the assignment of \"Advanced topics\
  \ in algorithm\" class to solved. The assignment is due tomorrow and as you may\
  \ guess he hasn't touch any of the problems. Fortunately he got a plan as always.\n\
  \nThe first step will be buying a pack of Red Bull and then to work as hard as he\
  \ can. Here is how he is going to spend the remaining time:\n\nJem will not take\
  \ a break until he finishes at least half of the remaining problems. Formally, if\
  \ N is even then he will take he first break after finishing N / 2 problems. If\
  \ N is odd then the break will be after he done (N + 1) / 2 problems. Each of his\
  \ break will last for B minutes. Initially, he takes M minutes in solving a problem,\
  \ after each break he will take twice more time in solving a problem, i.e. 2 * M\
  \ minutes per problem after the first break.\n\nJem will start working soon and\
  \ ask you to help him calculate how much time it will take until he finish the last\
  \ problem!\n\n-----Input-----\n\nThe first line contains a single integer T represents\
  \ the number of test cases in the input.\nEach line in the next T line contains\
  \ three integers N, B and M represents a test case.\n\n-----Output-----\n\nFor each\
  \ test case output a single line containing an integer represent how much time Jem\
  \ will need (in minutes).\n\n-----Constraints-----\n- 1 ≤ T ≤ 100\n- 1 ≤ N, B, M\
  \ ≤ 108\n\n-----Example-----\nInput:\n2\n9 1 2\n123456 123456 123456\n\nOutput:\n\
  45\n131351258112\n\n-----Explanation-----\n\nIn the first test case, Jem will proceed\
  \ as below:\n\n- Initially, Jem has 9 problems to solve. since it is an odd number,\
  \ Jem will finish the first (9 + 1) / 2 = 5 problems with speed of 2 minutes/problem.\n\
  - After that, Jem takes 1 minute break.\n- Now he has 4 problems to solve, which\
  \ is an even number, so Jem will solve the next 4 / 2 = 2 problems. his speed after\
  \ the first break has now became 4 minutes/problem.\n\n- Again, he takes a 1 minute\
  \ break.\n- he has now 2 problems left so he do one more problem in 8 minutes.\n\
  - He takes 1 minute break.\n- he solves the last problem in 16 minutes.\n\nSo, Jem\
  \ will need time = 5 × 2 + 1 + 2 × 4 + 1 + 8 + 1 + 16  = 45"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_jem_laziness (n b m : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem jem_laziness_positive (n b m : Nat) \n    (h1 : n > 0) (h2\
  \ : b > 0) (h3 : m > 0) :\n  solve_jem_laziness n b m > 0 :=\n  sorry\n\n\ntheorem\
  \ single_problem_case (b m : Nat)\n    (h1 : b > 0) (h2 : m > 0) :\n  solve_jem_laziness\
  \ 1 b m = m :=\n  sorry\n\n\ntheorem increases_with_problems (n b m : Nat)\n   \
  \ (h1 : n > 0) (h2 : b > 0) (h3 : m > 0) :\n  solve_jem_laziness n b m ≥ solve_jem_laziness\
  \ (n-1) b m :=\n  sorry\n\n\ntheorem increases_with_breaks (n b m : Nat)\n    (h1\
  \ : n > 0) (h2 : b > 0) (h3 : m > 0) :\n  solve_jem_laziness n (b+1) m ≥ solve_jem_laziness\
  \ n b m :=\n  sorry\n\n\ntheorem increases_with_initial_time (n b m : Nat)\n   \
  \ (h1 : n > 0) (h2 : b > 0) (h3 : m > 0) :\n  solve_jem_laziness n b (m+1) ≥ solve_jem_laziness\
  \ n b m :=\n  sorry\n\n\ntheorem single_problem_edge_case :\n  solve_jem_laziness\
  \ 1 1 1 = 1 :=\n  sorry\n\n\ntheorem two_problems_case :\n  solve_jem_laziness 2\
  \ 5 1 = 8 :=\n  sorry\n\n/--\ninfo: 45\n-/\n#guard_msgs in\n#eval solve_jem_laziness\
  \ 9 1 2\n\n/--\ninfo: 131351258112\n-/\n#guard_msgs in\n#eval solve_jem_laziness\
  \ 123456 123456 123456\n\n/--\ninfo: 10\n-/\n#guard_msgs in\n#eval solve_jem_laziness\
  \ 4 1 1\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
