"vc-description": "Given two strings s1 and s2, we want to visualize how different\
  \ the two strings are.\nWe will only take into account the *lowercase* letters (a\
  \ to z).\nFirst let us count the frequency of each *lowercase* letters in s1 and\
  \ s2.\n\n`s1 = \"A aaaa bb c\"`\n\n`s2 = \"& aaa bbb c d\"`\n\n`s1 has 4 'a', 2\
  \ 'b', 1 'c'`\n\n`s2 has 3 'a', 3 'b', 1 'c', 1 'd'`\n\nSo the maximum for 'a' in\
  \ s1 and s2 is 4 from s1; the maximum for 'b' is 3 from s2.\nIn the following we\
  \ will not consider letters when the maximum of their occurrences\nis less than\
  \ or equal to 1.\n\nWe can resume the differences between s1 and s2 in the following\
  \ string:\n`\"1:aaaa/2:bbb\"`\nwhere `1` in `1:aaaa` stands for string s1 and `aaaa`\
  \ because the maximum for `a` is 4.\nIn the same manner `2:bbb` stands for string\
  \ s2 and `bbb` because the maximum for `b` is 3.\n\nThe task is to produce a string\
  \ in which each *lowercase* letters of s1 or s2 appears as many times as\nits maximum\
  \ if this maximum is *strictly greater than 1*; these letters will be prefixed by\
  \ the \nnumber of the string where they appear with their maximum value and `:`.\
  \ \nIf the maximum is in s1 as well as in s2 the prefix is `=:`.\n\nIn the result,\
  \ substrings (a substring is for example 2:nnnnn or 1:hhh; it contains the prefix)\
  \ will be in decreasing order of their length and when they have the same length\
  \ sorted in ascending lexicographic order (letters and digits - more precisely sorted\
  \ by codepoint); the different groups will be separated by '/'. See examples and\
  \ \"Example Tests\".\n\nHopefully other examples can make this clearer.\n\n```\n\
  s1 = \"my&friend&Paul has heavy hats! &\"\ns2 = \"my friend John has many many friends\
  \ &\"\nmix(s1, s2) --> \"2:nnnnn/1:aaaa/1:hhh/2:mmm/2:yyy/2:dd/2:ff/2:ii/2:rr/=:ee/=:ss\"\
  \n\ns1 = \"mmmmm m nnnnn y&friend&Paul has heavy hats! &\"\ns2 = \"my frie n d Joh\
  \ n has ma n y ma n y frie n ds n&\"\nmix(s1, s2) --> \"1:mmmmmm/=:nnnnnn/1:aaaa/1:hhh/2:yyy/2:dd/2:ff/2:ii/2:rr/=:ee/=:ss\"\
  \n\ns1=\"Are the kids at home? aaaaa fffff\"\ns2=\"Yes they are here! aaaaa fffff\"\
  \nmix(s1, s2) --> \"=:aaaaaa/2:eeeee/=:fffff/1:tt/2:rr/=:hh\"\n```\n# Note for Swift,\
  \ R, PowerShell\nThe prefix `=:` is replaced by `E:`\n``` \ns1 = \"mmmmm m nnnnn\
  \ y&friend&Paul has heavy hats! &\"\ns2 = \"my frie n d Joh n has ma n y ma n y\
  \ frie n ds n&\"\nmix(s1, s2) --> \"1:mmmmmm/E:nnnnnn/1:aaaa/1:hhh/2:yyy/2:dd/2:ff/2:ii/2:rr/E:ee/E:ss\"\
  \n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def mix (s1 s2 : String) : String := sorry\n\nprivate def splitChar\
  \ (c : Char) : Bool := c = '/'\n"
"vc-theorems": "theorem mix_basic_properties (s1 s2 : String) (result : String) (h\
  \ : result = mix s1 s2) (h_nonempty : result ≠ \"\") :\n  let parts := result.split\
  \ splitChar\n  (∀ p ∈ parts, p.startsWith \"1:\" ∨ p.startsWith \"2:\" ∨ p.startsWith\
  \ \"=:\") ∧\n  (∀ p ∈ parts, ∀ i < p.length, i ≥ 2 → p.data[i]! = p.data[2]!) ∧\n\
  \  (∀ p ∈ parts, p.length > 3) := sorry\n\n\ntheorem mix_identical_strings (s :\
  \ String) (result : String) (h : result = mix s s) (h_nonempty : result ≠ \"\")\
  \ :\n  let parts := result.split splitChar\n  ∀ p ∈ parts, p.startsWith \"=:\" :=\
  \ sorry\n\n\ntheorem mix_no_lowercase (s : String) (h : ∀ c ∈ s.data, ¬c.isLower)\
  \ :\n  mix s s = \"\" := sorry\n\n/--\ninfo: expected\n-/\n#guard_msgs in\n#eval\
  \ mix \"Are they here\" \"yes, they are here\"\n\n/--\ninfo: expected\n-/\n#guard_msgs\
  \ in\n#eval mix \"looping is fun but dangerous\" \"less dangerous than coding\"\n\
  \n/--\ninfo: expected\n-/\n#guard_msgs in\n#eval mix \"codewars\" \"codewars\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
