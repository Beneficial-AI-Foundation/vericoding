"vc-description": "All of the animals are having a feast! Each animal is bringing\
  \ one dish. There is just one rule: the dish must start and end with the same letters\
  \ as the animal's name. For example, the great blue heron is bringing garlic naan\
  \ and the chickadee is bringing chocolate cake.\n\nWrite a function `feast` that\
  \ takes the animal's name and dish as arguments and returns true or false to indicate\
  \ whether the beast is allowed to bring the dish to the feast.\n\nAssume that `beast`\
  \ and `dish` are always lowercase strings, and that each has at least two letters.\
  \ `beast` and `dish` may contain hyphens and spaces, but these will not appear at\
  \ the beginning or end of the string. They will not contain numerals."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def feast (beast dish : String) : Bool :=\n  sorry\n"
"vc-theorems": "theorem feast_properties (beast dish : String) \n  (h1 : beast.length\
  \ > 0) (h2 : dish.length > 0) :\n  feast beast dish = (beast.front == dish.front\
  \ âˆ§ beast.back == dish.back) :=\nsorry\n\n\ntheorem feast_same_string (s : String)\
  \ (h : s.length > 0) :\n  feast s s = true :=\nsorry\n\n\ntheorem feast_first_last_only\
  \ (beast dish : String)\n  (h1 : beast.length > 1) (h2 : dish.length > 1) :\n  let\
  \ modifiedDish := String.mk [beast.front] ++ String.mk [beast.back]\n  feast beast\
  \ modifiedDish = true :=\nsorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval feast\
  \ \"great blue heron\" \"garlic naan\"\n\n/--\ninfo: True\n-/\n#guard_msgs in\n\
  #eval feast \"chickadee\" \"chocolate cake\"\n\n/--\ninfo: False\n-/\n#guard_msgs\
  \ in\n#eval feast \"cat\" \"yogurt\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
