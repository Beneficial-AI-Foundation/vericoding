vc-description: |-
  Write a function `take_umbrella()` that takes two arguments: a string representing the current weather and a float representing the chance of rain today.

  Your function should return `True` or `False` based on the following criteria.

  * You should take an umbrella if it's currently raining or if it's cloudy and the chance of rain is over `0.20`.
  * You shouldn't take an umbrella if it's sunny unless it's more likely to rain than not.

  The options for the current weather are `sunny`, `cloudy`, and `rainy`.

  For example, `take_umbrella('sunny', 0.40)` should return `False`.

  As an additional challenge, consider solving this kata using only logical operaters and not using any `if` statements.
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def take_umbrella (w: Weather) (rain_chance: Float): Bool :=
    sorry
vc-theorems: |
  theorem take_umbrella_rainy (rain_chance: Float):
    rain_chance ≥ 0 ∧ rain_chance ≤ 1 →
    take_umbrella Weather.Rainy rain_chance = true :=
    sorry


  theorem take_umbrella_sunny (rain_chance: Float):
    rain_chance ≥ 0 ∧ rain_chance ≤ 1 →
    take_umbrella Weather.Sunny rain_chance = (rain_chance > 0.5) :=
    sorry


  theorem take_umbrella_cloudy (rain_chance: Float):
    rain_chance ≥ 0 ∧ rain_chance ≤ 1 →
    take_umbrella Weather.Cloudy rain_chance = (rain_chance > 0.2) :=
    sorry


  theorem take_umbrella_returns_bool (w: Weather) (rain_chance: Float):
    rain_chance ≥ 0 ∧ rain_chance ≤ 1 →
    (take_umbrella w rain_chance = true ∨ take_umbrella w rain_chance = false) :=
    sorry


  theorem take_umbrella_rainy_edge_cases:
    take_umbrella Weather.Rainy 0.0 = true ∧ 
    take_umbrella Weather.Rainy 1.0 = true :=
    sorry

  /--
  info: False
  -/
  #guard_msgs in
  #eval take_umbrella "sunny" 0.4

  /--
  info: True
  -/
  #guard_msgs in
  #eval take_umbrella "rainy" 0.0

  /--
  info: False
  -/
  #guard_msgs in
  #eval take_umbrella "cloudy" 0.2
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
