"vc-description": "Given a string s, partition s such that every substring of the\
  \ partition is a palindrome.\n\nReturn the minimum cuts needed for a palindrome\
  \ partitioning of s.\n\nExample:\n\n\nInput: \"aab\"\nOutput: 1\nExplanation: The\
  \ palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def min_palindrome_cuts (s : String) : Nat := sorry\n\ndef is_palindrome\
  \ (s : String) : Bool := sorry\n"
"vc-theorems": "theorem min_cuts_nonnegative (s : String) :\n  min_palindrome_cuts\
  \ s ≥ 0 := sorry\n\n\n\n\n\n\ntheorem binary_string_small_cuts (s : String) (h :\
  \ s.length ≤ 2) :\n  min_palindrome_cuts s ≤ 1 := sorry\n\n\ntheorem empty_string_no_cuts\
  \ :\n  min_palindrome_cuts \"\" = 0 := sorry\n\n\ntheorem single_char_no_cuts (c\
  \ : Char) :\n  min_palindrome_cuts (String.mk [c]) = 0 := sorry\n\n\ntheorem cuts_monotonicity\
  \ :\n  min_palindrome_cuts \"a\" ≤ min_palindrome_cuts \"ab\" ∧ \n  min_palindrome_cuts\
  \ \"ab\" ≤ min_palindrome_cuts \"abc\" := sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs\
  \ in\n#eval min_palindrome_cuts \"aab\"\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval\
  \ min_palindrome_cuts \"aba\"\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval min_palindrome_cuts\
  \ \"abba\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
