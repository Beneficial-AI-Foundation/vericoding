"vc-description": "Given an array of numbers, return a string made up of four parts:\n\
  \na) a four character 'word', made up of the characters derived from the first two\
  \ and last two numbers in the array. order should be as read left to right (first,\
  \ second, second last, last),\n\nb) the same as above, post sorting the array into\
  \ ascending order,\n\nc) the same as above, post sorting the array into descending\
  \ order,\n\nd) the same as above, post converting the array into ASCII characters\
  \ and sorting alphabetically.\n\nThe four parts should form a single string, each\
  \ part separated by a hyphen: '-'\n\nexample format of solution: 'asdf-tyui-ujng-wedg'"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sort_transform (arr : List Int) : String := sorry\n\ntheorem\
  \ sort_transform_output_length \n  {arr : List Int}\n  (h1 : arr.length ≥ 4)\n \
  \ (h2 : arr.length ≤ 20) \n  (h3 : ∀ x ∈ arr, x ≥ 33 ∧ x ≤ 126)\n  (h4 : arr.Nodup)\
  \ :\n  (sort_transform arr).length = 19 := sorry"
"vc-theorems": "/--\ninfo: 'oprn-nors-sron-nors'\n-/\n#guard_msgs in\n#eval sort_transform\
  \ [111, 112, 113, 114, 115, 113, 114, 110]\n\n/--\ninfo: '3>c~-3>d~-~d>3-3>d~'\n\
  -/\n#guard_msgs in\n#eval sort_transform [51, 62, 73, 84, 95, 100, 99, 126]\n\n\
  /--\ninfo: 'Beoq-7Boq-qoB7-7Boq'\n-/\n#guard_msgs in\n#eval sort_transform [66,\
  \ 101, 55, 111, 113]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
