"vc-description": "A rectangle with sides $A$ and $B$ is cut into rectangles with\
  \ cuts parallel to its sides. For example, if $p$ horizontal and $q$ vertical cuts\
  \ were made, $(p + 1) \\cdot (q + 1)$ rectangles were left after the cutting. After\
  \ the cutting, rectangles were of $n$ different types. Two rectangles are different\
  \ if at least one side of one rectangle isn't equal to the corresponding side of\
  \ the other. Note that the rectangle can't be rotated, this means that rectangles\
  \ $a \\times b$ and $b \\times a$ are considered different if $a \\neq b$.\n\nFor\
  \ each type of rectangles, lengths of the sides of rectangles are given along with\
  \ the amount of the rectangles of this type that were left after cutting the initial\
  \ rectangle.\n\nCalculate the amount of pairs $(A; B)$ such as the given rectangles\
  \ could be created by cutting the rectangle with sides of lengths $A$ and $B$. Note\
  \ that pairs $(A; B)$ and $(B; A)$ are considered different when $A \\neq B$.\n\n\
  \n-----Input-----\n\nThe first line consists of a single integer $n$ ($1 \\leq n\
  \ \\leq 2 \\cdot 10^{5}$) — amount of different types of rectangles left after cutting\
  \ the initial rectangle.\n\nThe next $n$ lines each consist of three integers $w_{i},\
  \ h_{i}, c_{i}$ $(1 \\leq w_{i}, h_{i}, c_{i} \\leq 10^{12})$ — the lengths of the\
  \ sides of the rectangles of this type and the amount of the rectangles of this\
  \ type.\n\nIt is guaranteed that the rectangles of the different types are different.\n\
  \n\n-----Output-----\n\nOutput one integer — the answer to the problem.\n\n\n-----Examples-----\n\
  Input\n1\n1 1 9\n\nOutput\n3\n\nInput\n2\n2 3 20\n2 4 40\n\nOutput\n6\n\nInput\n\
  2\n1 2 5\n2 3 5\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first sample there\
  \ are three suitable pairs: $(1; 9)$, $(3; 3)$ and $(9; 1)$.\n\nIn the second sample\
  \ case there are 6 suitable pairs: $(2; 220)$, $(4; 110)$, $(8; 55)$, $(10; 44)$,\
  \ $(20; 22)$ and $(40; 11)$.\n\nHere the sample of cut for $(20; 22)$.\n\n [Image]\
  \ \n\nThe third sample has no suitable pairs."
"vc-preamble": "import Imports.AllImports\n\ndef count_rectangle_pairs (n : Nat) (rectangles\
  \ : List (Nat × Nat × Nat)) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sqrt (n : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem non_negative_result (n : Nat) (rectangles : List (Nat × Nat\
  \ × Nat)) :\n  count_rectangle_pairs n rectangles ≥ 0 :=\n  sorry\n\n\ntheorem single_rect_count\
  \ (rect : Nat × Nat × Nat) (count : Nat) \n    (h : rect.2.2 = count) :\n  let factors\
  \ := (List.range (sqrt count)).filter (fun i => count % i = 0)\n  count_rectangle_pairs\
  \ 1 [rect] = if sqrt count * sqrt count = count \n    then 2 * factors.length -\
  \ 1\n    else 2 * factors.length :=\n  sorry\n\n\ntheorem result_bounded_by_min_count\
  \ (n : Nat) (rectangles : List (Nat × Nat × Nat))\n    (h : rectangles ≠ []) : \n\
  \  count_rectangle_pairs n rectangles ≤ \n    List.foldl Nat.min ((List.head! rectangles).2.2)\
  \ \n      (List.tail! rectangles |>.map (fun r => r.2.2)) :=\n  sorry\n\n/--\ninfo:\
  \ 3\n-/\n#guard_msgs in\n#eval count_rectangle_pairs 1 [(1, 1, 9)]\n\n/--\ninfo:\
  \ 6\n-/\n#guard_msgs in\n#eval count_rectangle_pairs 2 [(2, 3, 20), (2, 4, 40)]\n\
  \n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval count_rectangle_pairs 2 [(1, 2, 5), (2,\
  \ 3, 5)]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
