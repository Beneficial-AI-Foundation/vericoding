"vc-description": "Chef's pizza is the tastiest pizza to exist, and the reason for\
  \ that is his special, juicy homegrown tomatoes. \nTomatoes can be grown in rectangular\
  \ patches of any side lengths. However, Chef only has a limited amount of land.\
  \ \nConsider the entire town of Chefville to be consisting of cells in a rectangular\
  \ grid of positive coordinates. \nChef own all cells (x,y)$(x, y)$ that satisfy\
  \ x∗y≤N$x*y \\leq N$\nAs an example if N=4$N = 4$, Chef owns the following cells:\
  \ \n(1,1),(1,2),(1,3),(1,4),(2,1),(2,2),(3,1),(4,1)$(1, 1), (1, 2), (1, 3), (1,\
  \ 4), (2, 1), (2, 2), (3, 1), (4, 1) $\nChef can only grow tomatoes in rectangular\
  \ patches consisting only of cells which belong to him. Also, if he uses a cell,\
  \ he must use it entirely. He cannot use only a portion of it. \nHelp Chef find\
  \ the number of unique patches of rectangular land that he can grow tomatoes in!\
  \ Since this number can be very large, output it modulo 1000000007$1000000007$.\n\
  \n-----Input:-----\n- The first line of the input contains T$T$, the number of test\
  \ cases.\n- The next T$T$ lines of input contains one integer N$N$.\n\n-----Output:-----\n\
  For each testcase, output the number of ways modulo 1000000007$1000000007$.\n\n\
  -----Constraints-----\n- 1≤T≤5$1 \\leq T \\leq 5$\n- 1≤N≤1010$1 \\leq N \\leq 10^{10}$\n\
  \n-----Sample Input:-----\n2\n4\n10000000000\n\n-----Sample Output:-----\n23\n227374950"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_tomato_patches (n: Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem output_in_valid_range (n: Nat) (h: n > 0) :\n  count_tomato_patches\
  \ n < 1000000007 :=\n  sorry\n\n\ntheorem output_is_nat (n: Nat) (h: n > 0) :\n\
  \  count_tomato_patches n ≥ 0 :=\n  sorry\n\n\ntheorem monotonic_small_inputs (n:\
  \ Nat) (h: n > 0) (h2: n ≤ 100) :\n  count_tomato_patches n ≤ count_tomato_patches\
  \ (n + 1) :=\n  sorry\n\n\ntheorem sqrt_boundary_continuity (n: Nat) (h: n > 0)\
  \ :\n  (count_tomato_patches n).sub (count_tomato_patches (n + 1)) < 1000000007\
  \ :=\n  sorry\n  \n\ntheorem edge_cases :\n  count_tomato_patches 1 = 1 ∧ count_tomato_patches\
  \ 2 = 5 :=\n  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
