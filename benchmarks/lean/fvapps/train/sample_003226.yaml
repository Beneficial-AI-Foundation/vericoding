"vc-description": "Your task is to remove all duplicate words from a string, leaving\
  \ only single (first) words entries.\n\nExample:\n\nInput:\n\n'alpha beta beta gamma\
  \ gamma gamma delta alpha beta beta gamma gamma gamma delta'\n\nOutput:\n\n'alpha\
  \ beta gamma delta'"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def removeDuplicateWords (s : String) : String := sorry\n\n/--\
  \ The output of removeDuplicateWords contains no duplicate words -/"
"vc-theorems": "theorem no_duplicates {s : String} :\n  let result := removeDuplicateWords\
  \ s\n  let resultWords := (result.splitOn \" \")\n  List.Nodup resultWords := by\
  \ sorry\n\n/-- Words in the output appear in the same order as their first occurrence\
  \ in the input -/\n\ntheorem preserves_order {s : String} :\n  let inputWords :=\
  \ (s.splitOn \" \")\n  let outputWords := (removeDuplicateWords s).splitOn \" \"\
  \ \n  ∀ w ∈ outputWords, \n    List.indexOf w inputWords = List.indexOf w inputWords\
  \ := by sorry\n\n/-- All words in the output appear in the input -/\n\ntheorem output_subset_input\
  \ {s : String} :\n  let inputWords := (s.splitOn \" \")\n  let outputWords := (removeDuplicateWords\
  \ s).splitOn \" \"\n  ∀ w ∈ outputWords, w ∈ inputWords := by sorry\n\n/--\ninfo:\
  \ 'alpha beta gamma delta'\n-/\n#guard_msgs in\n#eval remove_duplicate_words \"\
  alpha beta beta gamma gamma gamma delta alpha beta beta gamma gamma gamma delta\"\
  \n\n/--\ninfo: 'my cat is fat'\n-/\n#guard_msgs in\n#eval remove_duplicate_words\
  \ test2\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
