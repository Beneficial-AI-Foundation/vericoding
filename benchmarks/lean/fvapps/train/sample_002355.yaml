"vc-description": "Given a list of dominoes, dominoes[i] = [a, b] is equivalent to\
  \ dominoes[j] = [c, d] if and only if either (a==c and b==d), or (a==d and b==c)\
  \ - that is, one domino can be rotated to be equal to another domino.\nReturn the\
  \ number of pairs (i, j) for which 0 <= i < j < dominoes.length, and dominoes[i]\
  \ is equivalent to dominoes[j].\n \nExample 1:\nInput: dominoes = [[1,2],[2,1],[3,4],[5,6]]\n\
  Output: 1\n\n \nConstraints:\n\n1 <= dominoes.length <= 40000\n1 <= dominoes[i][j]\
  \ <= 9"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def numEquivDominoPairs (dominoes : List (List Nat)) : Nat := sorry\n\
  \ntheorem output_non_negative \n  (dominoes : List (List Nat)) :\n  numEquivDominoPairs\
  \ dominoes ≥ 0 := sorry\n"
"vc-theorems": "theorem empty_arrays_handled\n  (dominoes : List (List Nat)) :\n \
  \ numEquivDominoPairs (dominoes ++ [[]]) ≥ numEquivDominoPairs dominoes := sorry\n\
  \n\n\n\ntheorem identical_pairs_increase_count\n  (dominoes : List (List Nat))\n\
  \  (h : dominoes ≠ [])\n  (first : List Nat)\n  (h2 : first ∈ dominoes) :\n  numEquivDominoPairs\
  \ (dominoes ++ [first]) ≥ numEquivDominoPairs dominoes := sorry\n\n/--\ninfo: 1\n\
  -/\n#guard_msgs in\n#eval numEquivDominoPairs [[1, 2], [2, 1], [3, 4], [5, 6]]\n\
  \n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval numEquivDominoPairs [[1, 2], [2, 1], [3,\
  \ 4], [5, 6], [], []]\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval numEquivDominoPairs\
  \ [[1, 1], [2, 2], [1, 1], [2, 2]]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
