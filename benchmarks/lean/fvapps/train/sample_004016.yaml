"vc-description": "You're a statistics professor and the deadline for submitting your\
  \ students' grades is tonight at midnight. Each student's grade is determined by\
  \ their mean score across all of the tests they took this semester.\n\nYou've decided\
  \ to automate grade calculation by writing a function `calculate_grade()` that takes\
  \ a list of test scores as an argument and returns a one character string representing\
  \ the student's grade calculated as follows:\n\n * 90% <= mean score <= 100%: `\"\
  A\"`,\n * 80% <= mean score < 90%: `\"B\"`,\n * 70% <= mean score < 80%: `\"C\"\
  `,\n * 60% <= mean score < 70%: `\"D\"`,\n * mean score < 60%: `\"F\"`\n\nFor example,\
  \ `calculate_grade([92, 94, 99])` would return `\"A\"` since the mean score is `95`,\
  \ and `calculate_grade([50, 60, 70, 80, 90])` would return `\"C\"` since the mean\
  \ score is `70`.\n\nYour function should handle an input list of any length greater\
  \ than zero."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def LetterGrade := Char\n\ndef calculate_grade (scores : List Nat)\
  \ : LetterGrade :=\n  sorry\n"
"vc-theorems": "theorem grade_is_valid_letter (scores : List Nat) (h : scores ≠ [])\
  \ : \n  let grade := calculate_grade scores\n  grade = 'F' ∨ grade = 'D' ∨ grade\
  \ = 'C' ∨ grade = 'B' ∨ grade = 'A' :=\nsorry\n\n\ntheorem all_high_scores_get_a\
  \ (scores : List Nat) (h : scores ≠ []) :\n  (∀ x ∈ scores, x = 95) →\n  calculate_grade\
  \ scores = 'A' :=\nsorry\n\n\ntheorem all_low_scores_get_f (scores : List Nat) (h\
  \ : scores ≠ []) :\n  (∀ x ∈ scores, x = 50) →\n  calculate_grade scores = 'F' :=\n\
  sorry\n\n/--\ninfo: 'A'\n-/\n#guard_msgs in\n#eval calculate_grade [92, 94, 99]\n\
  \n/--\ninfo: 'C'\n-/\n#guard_msgs in\n#eval calculate_grade [50, 60, 70, 80, 90]\n\
  \n/--\ninfo: 'F'\n-/\n#guard_msgs in\n#eval calculate_grade [50, 55]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
