"vc-description": "```if-not:javascript,python\nWrite function `parseFloat` which\
  \ takes an input and returns a number or `Nothing` if conversion is not possible.\n\
  ```\n\n```if:python\nWrite function `parse_float` which takes a string/list and\
  \ returns a number or 'none' if conversion is not possible.\n```\n\n```if:javascript\n\
  Write function `parseF` which takes an input and returns a number or null if conversion\
  \ is not possible. The input can be one of many different types so be aware.\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def parse_float (s : String) : Option Float := sorry \n\ntheorem\
  \ parse_valid_float (f : Float) : \n  parse_float (toString f) = some f := sorry\n"
"vc-theorems": "theorem parse_invalid_string {s : String} :\n  (∀ f : Float, toString\
  \ f ≠ s) → parse_float s = none := sorry \n\n\ntheorem parse_empty_string :\n  parse_float\
  \ \"\" = none := sorry\n\n/--\ninfo: 1.5\n-/\n#guard_msgs in\n#eval parse_float\
  \ \"1.5\"\n\n/--\ninfo: -123.45\n-/\n#guard_msgs in\n#eval parse_float \"-123.45\"\
  \n\n/--\ninfo: 0.0\n-/\n#guard_msgs in\n#eval parse_float \"0.0\"\n\n/--\ninfo:\
  \ None\n-/\n#guard_msgs in\n#eval parse_float \"abc\"\n\n/--\ninfo: None\n-/\n#guard_msgs\
  \ in\n#eval parse_float \"12a34\"\n\n/--\ninfo: None\n-/\n#guard_msgs in\n#eval\
  \ parse_float \"\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
