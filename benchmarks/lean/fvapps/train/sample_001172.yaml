"vc-description": "Everybody is worried about Rakesh as the boy does not have much\
  \ knowledge about the real world. He can not go from one place to another on his\
  \ own. It's high time he learned to explore the city. He is going to a relative's\
  \ house situated on the other side of the city on his own. As this is his first\
  \ time, he is carrying a GPS tracker of a special kind. The tracker continuously\
  \ sends information to the family of Rakesh about his movement. The information\
  \ is sent using the following four letters: U, D, R, and L. Those letters indicate\
  \ the moves taken by Rakesh. \n\nThe city can be considered as a grid. Rakesh starts\
  \ his journey from (0, 0) position of the grid. His relative's house is situated\
  \ at (Rx, Ry). Rakesh can move in four directions: up, down, right, or left indicated\
  \ by U, D, R, and L respectively. \n\nAny position of the city with x ordinate negative\
  \ or greater than M is considered as dangerous. Also, any position of the city with\
  \ y ordinate negative or greater than N is considered as dangerous. You will be\
  \ given the total sequence of Rakesh's movement. You need to determine if Rakesh\
  \ ended up being at his relative's house, at a dangerous place, or at a random place\
  \ in the city.\n\nTo make things clear,\n\n-  U indicates a move that increases\
  \ position along y-axis by 1 \n-  D indicates a move that decreases position along\
  \ y-axis by 1 \n-  R indicates a move that increases position along x-axis by 1\
  \ \n-  L indicates a move that decreases position along x-axis by 1 \n\nNote that\
  \ we are interested in the position of Rakesh at the end of his journey only. He\
  \ may visit some dangerous place or his relative's house at some intermediate point\
  \ but that won't affect the answer.\n\n-----Input-----\n- The first line of the\
  \ input contains an integer T denoting the number of test cases. The description\
  \ of each test case follows.\n\n- The first line of each test case contains two\
  \ integers M and N.\n- The second line contains two integers Rx and Ry.\n- The third\
  \ line contains the length of Rakesh's move sequence.\n- The next line contains\
  \ the move sequence containing letters U, D, R, and L only with no space.\n\n-----Output-----\n\
  For each test case, print \"Case i: \", and then the answer, where i is the testcase\
  \ number, 1-indexed. The answer should be any of the following three strings:\n\
  -  \"REACHED\" if Rakesh could reach his relative's house \n-  \"DANGER\" if Rakesh\
  \ ended up being in a dangerous place \n-  \"SOMEWHERE\" if Rakesh ended up being\
  \ in somewhere safe place in the city other than his relative's place \nDon't print\
  \ any quotation mark. Check the sample output.\n\n-----Constraints-----\n\n- 1 ≤\
  \ T ≤ 10\n- 0 ≤ M, N ≤ 10000\n- 0 ≤ Rx ≤  M \n- 0 ≤ Ry ≤  N \n- 0 ≤ Sum of the lengths\
  \ of all sequences ≤ 10000\n\n-----Example-----\nInput:\n2\n20 20\n4 5\n13\nLLUUUUURRRRRR\n\
  10 10\n3 4\n7\nUDUDDRR\n\nOutput:\nCase 1: REACHED\nCase 2: DANGER"
"vc-preamble": "import Imports.AllImports\n\ndef track_rakesh (m n rx ry : Nat) (moves\
  \ : String) : String := sorry\n\ndef countChar (s : String) (c : Char) : Nat :=\
  \ \n  s.toList.filter (· == c) |>.length\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def stringReverse (s : String) : String :=\n  String.mk (s.toList.reverse)\n"
"vc-theorems": "theorem track_rakesh_result_type (m n rx ry : Nat) (moves : String)\
  \ :\n  track_rakesh m n rx ry moves = \"DANGER\" ∨ \n  track_rakesh m n rx ry moves\
  \ = \"REACHED\" ∨\n  track_rakesh m n rx ry moves = \"SOMEWHERE\" := sorry\n\n\n\
  theorem track_rakesh_danger_condition (m n rx ry : Nat) (moves : String) :\n  let\
  \ net_x := countChar moves 'R' - countChar moves 'L'\n  let net_y := countChar moves\
  \ 'U' - countChar moves 'D'\n  (net_x < 0 ∨ net_x > m ∨ net_y < 0 ∨ net_y > n) →\n\
  \  track_rakesh m n rx ry moves = \"DANGER\" := sorry\n\n\ntheorem track_rakesh_reached_condition\
  \ (m n rx ry : Nat) (moves : String) :\n  let net_x := countChar moves 'R' - countChar\
  \ moves 'L'\n  let net_y := countChar moves 'U' - countChar moves 'D'\n  (net_x\
  \ = rx ∧ net_y = ry) →\n  track_rakesh m n rx ry moves = \"REACHED\" := sorry\n\n\
  \ntheorem track_rakesh_somewhere_condition (m n rx ry : Nat) (moves : String) :\n\
  \  let net_x := countChar moves 'R' - countChar moves 'L'\n  let net_y := countChar\
  \ moves 'U' - countChar moves 'D'\n  (¬(net_x < 0 ∨ net_x > m ∨ net_y < 0 ∨ net_y\
  \ > n)) →\n  (¬(net_x = rx ∧ net_y = ry)) →\n  track_rakesh m n rx ry moves = \"\
  SOMEWHERE\" := sorry\n\n\ntheorem track_rakesh_no_movement (m n : Nat) :\n  track_rakesh\
  \ m n 0 0 \"\" = \"REACHED\" ∧\n  track_rakesh m n 1 1 \"\" = \"SOMEWHERE\" := sorry\n\
  \n\ntheorem track_rakesh_inverse_movement (m n : Nat) (moves : String) :\n  moves\
  \ ≠ \"\" →\n  track_rakesh m n 0 0 (moves ++ stringReverse moves) = \"REACHED\"\
  \ := sorry\n\n/--\ninfo: 'REACHED'\n-/\n#guard_msgs in\n#eval track_rakesh 20 20\
  \ 4 5 \"LLUUUUURRRRRR\"\n\n/--\ninfo: 'DANGER'\n-/\n#guard_msgs in\n#eval track_rakesh\
  \ 10 10 3 4 \"UDUDDRR\"\n\n/--\ninfo: 'SOMEWHERE'\n-/\n#guard_msgs in\n#eval track_rakesh\
  \ 5 5 2 2 \"RRU\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
