"vc-description": "Mobile Display Keystrokes\n\nDo you remember the old mobile display\
  \ keyboards? Do you also remember how inconvenient it was to write on it?\nWell,\
  \ here you have to calculate how much keystrokes you have to do for a specific word.\n\
  \nThis is the layout:\n\n\n\nReturn the amount of keystrokes of input str (! only\
  \ letters, digits and special characters in lowercase included in layout without\
  \ whitespaces !)\n\ne.g:\n\n\nmobileKeyboard(\"123\") => 3 (1+1+1)\nmobileKeyboard(\"\
  abc\") => 9 (2+3+4)\nmobileKeyboard(\"codewars\") => 26 (4+4+2+3+2+2+4+5)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def mobile_keyboard (s : String) : Nat :=\n  sorry\n"
"vc-theorems": "theorem mobile_keyboard_non_negative (s : String) :\n  mobile_keyboard\
  \ s ≥ 0 := sorry \n\n\ntheorem mobile_keyboard_sum_of_costs (s : String) (char_costs\
  \ : Char → Nat) :\n  mobile_keyboard s = s.foldl (fun acc c => acc + char_costs\
  \ c) 0 := sorry\n\n\ntheorem mobile_keyboard_empty :\n  mobile_keyboard \"\" = 0\
  \ := sorry\n\n\ntheorem mobile_keyboard_single_char (c : Char) (pos : Nat) :\n \
  \ mobile_keyboard c.toString = pos := sorry\n\n\ntheorem mobile_keyboard_valid_chars\
  \ (s : String) :\n  s.all (fun c => c ∈ ['1', '2', '3', '4', '5', '6', '7', '8',\
  \ '9', '0', '*', '#', \n                      'a', 'b', 'c', 'd', 'e', 'f', 'g',\
  \ 'h', 'i', 'j', 'k', 'l', \n                      'm', 'n', 'o', 'p', 'q', 'r',\
  \ 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']) →\n  mobile_keyboard s ≥ 0 := sorry\n\
  \n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval mobile_keyboard \"\"\n\n/--\ninfo: 3\n\
  -/\n#guard_msgs in\n#eval mobile_keyboard \"123\"\n\n/--\ninfo: 26\n-/\n#guard_msgs\
  \ in\n#eval mobile_keyboard \"codewars\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
