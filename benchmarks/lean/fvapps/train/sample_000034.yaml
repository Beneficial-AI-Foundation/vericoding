"vc-description": "You have a large electronic screen which can display up to $998244353$\
  \ decimal digits. The digits are displayed in the same way as on different electronic\
  \ alarm clocks: each place for a digit consists of $7$ segments which can be turned\
  \ on and off to compose different digits. The following picture describes how you\
  \ can display all $10$ decimal digits:\n\n[Image]\n\nAs you can see, different digits\
  \ may require different number of segments to be turned on. For example, if you\
  \ want to display $1$, you have to turn on $2$ segments of the screen, and if you\
  \ want to display $8$, all $7$ segments of some place to display a digit should\
  \ be turned on.\n\nYou want to display a really large integer on the screen. Unfortunately,\
  \ the screen is bugged: no more than $n$ segments can be turned on simultaneously.\
  \ So now you wonder what is the greatest integer that can be displayed by turning\
  \ on no more than $n$ segments.\n\nYour program should be able to process $t$ different\
  \ test cases.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1\
  \ \\le t \\le 100$) — the number of test cases in the input.\n\nThen the test cases\
  \ follow, each of them is represented by a separate line containing one integer\
  \ $n$ ($2 \\le n \\le 10^5$) — the maximum number of segments that can be turned\
  \ on in the corresponding testcase.\n\nIt is guaranteed that the sum of $n$ over\
  \ all test cases in the input does not exceed $10^5$.\n\n\n-----Output-----\n\n\
  For each test case, print the greatest integer that can be displayed by turning\
  \ on no more than $n$ segments of the screen. Note that the answer may not fit in\
  \ the standard $32$-bit or $64$-bit integral data type.\n\n\n-----Example-----\n\
  Input\n2\n3\n4\n\nOutput\n7\n11"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_max_display (n : Nat) : Nat := sorry\n\ntheorem result_only_valid_digits\
  \ {n : Nat} (h : n ≥ 3) (h₂ : n ≤ 100) :\n  ∀ c : Char, c ∈ (toString (find_max_display\
  \ n)).data → c = '1' ∨ c = '7' := sorry \n"
"vc-theorems": "theorem odd_lengths_start_with_seven {n : Nat} (h : n ≥ 3) (h₂ : n\
  \ ≤ 100) (h₃ : n % 2 = 1) :\n  ((toString (find_max_display n)).data).get! 0 = '7'\
  \ := sorry\n\n\ntheorem even_lengths_all_ones {n : Nat} (h : n ≥ 4) (h₂ : n ≤ 100)\
  \ (h₃ : n % 2 = 0) :\n  ∀ c : Char, c ∈ (toString (find_max_display n)).data → c\
  \ = '1' := sorry\n\n\ntheorem result_is_positive {n : Nat} (h : n ≥ 3) (h₂ : n ≤\
  \ 100) :\n  find_max_display n > 0 := sorry\n\n/--\ninfo: 7\n-/\n#guard_msgs in\n\
  #eval find_max_display 3\n\n/--\ninfo: 11\n-/\n#guard_msgs in\n#eval find_max_display\
  \ 4\n\n/--\ninfo: 71\n-/\n#guard_msgs in\n#eval find_max_display 5\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
