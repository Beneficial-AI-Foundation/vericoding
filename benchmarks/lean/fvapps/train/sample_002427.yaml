"vc-description": "Given an array of integers nums.\nA pair (i,j) is called good if nums[i]\
  \ == nums[j] and i < j.\nReturn the number of good pairs.\n \nExample 1:\nInput:\
  \ nums = [1,2,3,1,1,3]\nOutput: 4\nExplanation: There are 4 good pairs (0,3), (0,4),\
  \ (3,4), (2,5) 0-indexed.\n\nExample 2:\nInput: nums = [1,1,1,1]\nOutput: 6\nExplanation:\
  \ Each pair in the array are good.\n\nExample 3:\nInput: nums = [1,2,3]\nOutput:\
  \ 0\n\n \nConstraints:\n\n1 <= nums.length <= 100\n1 <= nums[i] <= 100"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def numIdenticalPairs (nums : List Int) : Nat := sorry\n\ntheorem\
  \ num_identical_pairs_non_negative (nums : List Int) :\n  numIdenticalPairs nums\
  \ ≥ 0 := sorry\n"
"vc-theorems": "theorem empty_or_single_is_zero (nums : List Int) :\n  nums.length\
  \ ≤ 1 → numIdenticalPairs nums = 0 := sorry\n\n\n\n\ntheorem all_same_values (nums\
  \ : List Int) (n : Nat) (x : Int) :\n  nums = List.replicate n x → n ≥ 2 →\n  numIdenticalPairs\
  \ nums = n * (n-1) / 2 := sorry\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval numIdenticalPairs\
  \ [1, 2, 3, 1, 1, 3]\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval numIdenticalPairs\
  \ [1, 1, 1, 1]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval numIdenticalPairs [1,\
  \ 2, 3]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
