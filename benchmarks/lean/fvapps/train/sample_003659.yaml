"vc-description": "## Story\n\nYour company migrated the last 20 years of it's *very\
  \ important data* to a new platform, in multiple phases. However, something went\
  \ wrong: some of the essential time-stamps were messed up! It looks like that some\
  \ servers were set to use the `dd/mm/yyyy` date format, while others were using\
  \ the `mm/dd/yyyy` format during the migration. Unfortunately, the original database\
  \ got corrupted in the process and there are no backups available... Now it's up\
  \ to you to assess the damage.\n\n## Task\n\nYou will receive a list of records\
  \ as strings in the form of `[start_date, end_date]` given in the ISO `yyyy-mm-dd`\
  \ format, and your task is to count how many of these records are: \n* **correct**:\
  \ there can be nothing wrong with the dates, the month/day cannot be mixed up, or\
  \ it would not make a valid timestamp in any other way; e.g. `[\"2015-04-04\", \"\
  2015-05-13\"]`\n* **recoverable**: invalid in its current form, but the original\
  \ timestamp can be recovered, because there is only one valid combination possible;\
  \ e.g. `[\"2011-10-08\", \"2011-08-14\"]`\n* **uncertain**: one or both dates are\
  \ ambiguous, and they may generate multiple valid timestamps, so the original cannot\
  \ be retrieved; e.g. `[\"2002-02-07\", \"2002-12-10\"]`\n\n**Note:** the original\
  \ records always defined a *non-negative* duration\n\nReturn your findings in an\
  \ array: `[ correct_count, recoverable_count, uncertain_count ]`\n\n## Examples\n\
  \n---\n\n## My other katas\n\nIf you enjoyed this kata then please try [my other\
  \ katas](https://www.codewars.com/collections/katas-created-by-anter69)! :-)"
"vc-preamble": "import Imports.AllImports\n\ndef sum_list : List Nat → Nat \n  | []\
  \ => 0\n  | (x::xs) => x + sum_list xs\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def check_dates (records : List (String × String)) : List Nat :=\n\
  \  sorry\n"
"vc-theorems": "theorem check_dates_output_format {records : List (String × String)}\
  \ \n  (h : records ≠ []) : \n  let result := check_dates records;\n  (result.length\
  \ = 3) ∧ \n  (∀ x ∈ result, x ≥ 0) ∧\n  (sum_list result = records.length) :=\n\
  sorry\n\n\ntheorem check_dates_empty : \n  check_dates [] = [0, 0, 0] :=\nsorry\n\
  \n\ntheorem check_dates_output_valid (records : List (String × String)) :\n  ∀ x\
  \ ∈ check_dates records, x ≥ 0 :=\nsorry\n\n/--\ninfo: [0, 0, 0]\n-/\n#guard_msgs\
  \ in\n#eval check_dates []\n\n/--\ninfo: [1, 0, 0]\n-/\n#guard_msgs in\n#eval check_dates\
  \ [[\"2015-04-04\", \"2015-05-13\"]]\n\n/--\ninfo: [0, 1, 0]\n-/\n#guard_msgs in\n\
  #eval check_dates [[\"2011-10-08\", \"2011-08-14\"]]\n\n/--\ninfo: [0, 0, 1]\n-/\n\
  #guard_msgs in\n#eval check_dates [[\"2002-02-07\", \"2002-12-10\"]]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
