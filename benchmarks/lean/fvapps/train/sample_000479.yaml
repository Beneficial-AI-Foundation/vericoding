"vc-description": "There are N rooms and you start in room 0.  Each room has a distinct\
  \ number in 0, 1, 2, ..., N-1, and each room may have some keys to access the next\
  \ room. \nFormally, each room i has a list of keys rooms[i], and each key rooms[i][j]\
  \ is an integer in [0, 1, ..., N-1] where N = rooms.length.  A key rooms[i][j] =\
  \ v opens the room with number v.\nInitially, all the rooms start locked (except\
  \ for room 0). \nYou can walk back and forth between rooms freely.\nReturn true if\
  \ and only if you can enter every room.\n\n\nExample 1:\nInput: [[1],[2],[3],[]]\n\
  Output: true\nExplanation:  \nWe start in room 0, and pick up key 1.\nWe then go\
  \ to room 1, and pick up key 2.\nWe then go to room 2, and pick up key 3.\nWe then\
  \ go to room 3.  Since we were able to go to every room, we return true.\n\nExample\
  \ 2:\nInput: [[1,3],[3,0,1],[2],[0]]\nOutput: false\nExplanation: We can't enter\
  \ the room with number 2.\n\nNote:\n\n1 <= rooms.length <= 1000\n0 <= rooms[i].length\
  \ <= 1000\nThe number of keys in all rooms combined is at most 3000."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def canVisitAllRooms (rooms : List (List Nat)) : Bool := sorry\n\
  \ntheorem canVisitAllRooms_bool \n  (rooms : List (List Nat)) : \n  canVisitAllRooms\
  \ rooms = true ∨ canVisitAllRooms rooms = false := sorry\n"
"vc-theorems": "theorem canVisitAllRooms_reachable\n  (rooms : List (List Nat))\n\
  \  (h : canVisitAllRooms rooms = true) :\n  ∀ i < rooms.length, ∃ path : List Nat,\
  \ \n    path.head? = some 0 ∧ \n    path.getLast? = some i ∧\n    ∀ j < path.length\
  \ - 1,\n      (rooms[path[j]!]!).contains (path[j+1]!) := sorry\n\n\ntheorem canVisitAllRooms_unreachable\n\
  \  (rooms : List (List Nat))\n  (h : canVisitAllRooms rooms = false) :\n  ∃ i <\
  \ rooms.length,\n    ∀ path : List Nat,\n    ¬(path.head? = some 0 ∧ \n      path.getLast?\
  \ = some i ∧\n      ∀ j < path.length - 1,\n        (rooms[path[j]!]!).contains\
  \ (path[j+1]!)) := sorry\n\n\ntheorem canVisitAllRooms_preserves_input\n  (rooms\
  \ : List (List Nat))\n  (rooms_copy := rooms) :\n  canVisitAllRooms rooms = canVisitAllRooms\
  \ rooms_copy := sorry\n\n\ntheorem canVisitAllRooms_single_room :\n  canVisitAllRooms\
  \ [[]] = true := sorry\n\n\ntheorem canVisitAllRooms_self_ref :\n  canVisitAllRooms\
  \ [[0]] = true := sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval can_visit_all_rooms\
  \ [[1], [2], [3], []]\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval can_visit_all_rooms\
  \ [[1, 3], [3, 0, 1], [2], [0]]\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval can_visit_all_rooms\
  \ [[1], [2], [3], [], [], []]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
