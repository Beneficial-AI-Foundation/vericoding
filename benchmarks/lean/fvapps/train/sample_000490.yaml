"vc-description": "Given a string s, you are allowed to convert it to a palindrome\
  \ by adding characters in front of it. Find and return the shortest palindrome you\
  \ can find by performing this transformation.\n\nExample 1:\n\n\nInput: \"aacecaaa\"\
  \nOutput: \"aaacecaaa\"\n\n\nExample 2:\n\n\nInput: \"abcd\"\nOutput: \"dcbabcd\""
"vc-preamble": "import Imports.AllImports\n\ndef shortest_palindrome (s : String)\
  \ : String := sorry\n\ndef isPalindrome (s : String) : Bool := sorry"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def stringReverse (s : String) : String := sorry\n\ntheorem shortest_palindrome_contains_original\
  \ (s : String) :\n  (shortest_palindrome s).endsWith s := sorry\n"
"vc-theorems": "theorem shortest_palindrome_is_palindrome (s : String) :\n  isPalindrome\
  \ (shortest_palindrome s) = true := sorry\n\n\ntheorem shortest_palindrome_minimal_length\
  \ (s : String) :\n  (shortest_palindrome s).length ≤ 2 * s.length := sorry\n\n\n\
  theorem shortest_palindrome_empty_single_char (s : String) :\n  s = \"\" ∨ s.length\
  \ = 1 → shortest_palindrome s = s := sorry\n\n\ntheorem shortest_palindrome_starts_with_reversed_suffix\
  \ (s : String) :\n  s ≠ \"\" →\n  let result := shortest_palindrome s\n  let suffixLen\
  \ := result.length - s.length\n  suffixLen > 0 →\n  (result.take suffixLen) = stringReverse\
  \ (s.takeRight suffixLen) := sorry\n\n\ntheorem shortest_palindrome_single_char_string\
  \ (s : String) (c : Char) :\n  s.all (· = c) → shortest_palindrome s = s := sorry\n\
  \n/--\ninfo: 'aaacecaaa'\n-/\n#guard_msgs in\n#eval shortest_palindrome \"aacecaaa\"\
  \n\n/--\ninfo: 'dcbabcd'\n-/\n#guard_msgs in\n#eval shortest_palindrome \"abcd\"\
  \n\n/--\ninfo: 'a'\n-/\n#guard_msgs in\n#eval shortest_palindrome \"a\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
