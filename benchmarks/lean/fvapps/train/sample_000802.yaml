"vc-description": "Doubleville, a small town in Texas, was attacked by the aliens.\
  \ They have abducted some of the residents and taken them to the a spaceship orbiting\
  \ around earth. After some (quite unpleasant) human experiments, the aliens cloned\
  \ the victims, and released multiple copies of them back in Doubleville. So now\
  \ it might happen that there are 6 identical person named Hugh F. Bumblebee: the\
  \ original person and its 5 copies. The Federal Bureau of Unauthorized Cloning (FBUC)\
  \ charged you with the task of determining how many copies were made from each person.\
  \ To help you in your task, FBUC have collected a DNA sample from each person. All\
  \ copies of the same person have the same DNA sequence, and different people have\
  \ different sequences (we know that there are no identical twins in the town, this\
  \ is not an issue).\n\n\n-----Input-----\n\nThe input contains several blocks of\
  \ test cases. Each case begins with a line containing two integers: the number 1\
  \ <= n <= 20000 people, and the length 1 <= m <= 20 of the DNA sequences. The next\
  \ n lines contain the DNA sequences: each line contains a sequence of m characters,\
  \ where each character is either 'A', 'C', 'G' or 'T'.\n\nThe input is terminated\
  \ by a block with n = m = 0 .\n\n-----Output-----\nFor each test case, you have\
  \ to output n lines, each line containing a single integer. The first line contains\
  \ the number of different people that were not copied. The second line contains\
  \ the number of people that were copied only once (i.e., there are two identical\
  \ copies for each such person.) The third line contains the number of people that\
  \ are present in three identical copies, and so on: the i -th line contains the\
  \ number of persons that are present in i identical copies. For example, if there\
  \ are 11 samples, one of them is from John Smith, and all the others are from copies\
  \ of Joe Foobar, then you have to print '1' in the first and the tenth lines, and\
  \ '0' in all the other lines.\n\n-----Example-----\nInput:\n\n9 6\nAAAAAA\nACACAC\n\
  GTTTTG\nACACAC\nGTTTTG\nACACAC\nACACAC\nTCCCCC\nTCCCCC\n0 0\n\nOutput:\n\n1\n2\n\
  0\n1\n0\n0\n0\n0\n0"
"vc-preamble": "import Imports.AllImports\n\ndef DNA := String\nderiving DecidableEq\n\
  \n\ndef count_dna_copies (sequences: List DNA) : List Nat :=\n  sorry\n\nabbrev\
  \ List.sum (xs: List Nat) : Nat :=\n  xs.foldl (· + ·) 0\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def countOccurrences (s : DNA) (sequences : List DNA) : Nat :=\n\
  \  sequences.foldl (fun acc x => if x = s then acc + 1 else acc) 0\n"
"vc-theorems": "theorem count_dna_copies_result_length \n    (sequences: List DNA)\
  \ : \n    (count_dna_copies sequences).length = sequences.length :=\n  sorry\n\n\
  \ntheorem count_dna_copies_non_negative\n    (sequences: List DNA) :\n    ∀ x ∈\
  \ count_dna_copies sequences, x ≥ 0 :=\n  sorry\n\n\ntheorem count_dna_copies_weighted_sum\n\
  \    (sequences: List DNA) :\n    let result := count_dna_copies sequences\n   \
  \ (List.range result.length).zip result\n    |>.map (fun (i, v) => (i + 1) * v)\n\
  \    |>.sum = sequences.length :=\n  sorry\n\n\ntheorem count_dna_copies_matches_frequency\n\
  \    (sequences: List DNA) :\n    let freqs := sequences.map (fun s => countOccurrences\
  \ s sequences)\n    let freqCounts := (List.range sequences.length).map (fun i =>\n\
  \      sequences.filter (fun s => countOccurrences s sequences = i + 1) |>.length\n\
  \    )\n    count_dna_copies sequences = freqCounts :=\n  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
