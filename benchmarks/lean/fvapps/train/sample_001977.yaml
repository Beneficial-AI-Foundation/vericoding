"vc-description": "In the official contest this problem has a different statement,\
  \ for which jury's solution was working incorrectly, and for this reason it was\
  \ excluded from the contest. This mistake have been fixed and the current given\
  \ problem statement and model solution corresponds to what jury wanted it to be\
  \ during the contest.\n\nVova and Lesha are friends. They often meet at Vova's place\
  \ and compete against each other in a computer game named The Ancient Papyri: Swordsink.\
  \ Vova always chooses a warrior as his fighter and Leshac chooses an archer. After\
  \ that they should choose initial positions for their characters and start the fight.\
  \ A warrior is good at melee combat, so Vova will try to make the distance between\
  \ fighters as small as possible. An archer prefers to keep the enemy at a distance,\
  \ so Lesha will try to make the initial distance as large as possible.\n\nThere\
  \ are n (n is always even) possible starting positions for characters marked along\
  \ the Ox axis. The positions are given by their distinct coordinates x_1, x_2, ...,\
  \ x_{n}, two characters cannot end up at the same position.\n\nVova and Lesha take\
  \ turns banning available positions, Vova moves first. During each turn one of the\
  \ guys bans exactly one of the remaining positions. Banned positions cannot be used\
  \ by both Vova and Lesha. They continue to make moves until there are only two possible\
  \ positions remaining (thus, the total number of moves will be n - 2). After that\
  \ Vova's character takes the position with the lesser coordinate and Lesha's character\
  \ takes the position with the bigger coordinate and the guys start fighting.\n\n\
  Vova and Lesha are already tired by the game of choosing positions, as they need\
  \ to play it before every fight, so they asked you (the developer of the The Ancient\
  \ Papyri: Swordsink) to write a module that would automatically determine the distance\
  \ at which the warrior and the archer will start fighting if both Vova and Lesha\
  \ play optimally.\n\n\n-----Input-----\n\nThe first line on the input contains a\
  \ single integer n (2 ≤ n ≤ 200 000, n is even) — the number of positions available\
  \ initially. The second line contains n distinct integers x_1, x_2, ..., x_{n} (0\
  \ ≤ x_{i} ≤ 10^9), giving the coordinates of the corresponding positions.\n\n\n\
  -----Output-----\n\nPrint the distance between the warrior and the archer at the\
  \ beginning of the fight, provided that both Vova and Lesha play optimally.\n\n\n\
  -----Examples-----\nInput\n6\n0 1 3 7 15 31\n\nOutput\n7\n\nInput\n2\n73 37\n\n\
  Output\n36\n\n\n\n-----Note-----\n\nIn the first sample one of the optimum behavior\
  \ of the players looks like that:  Vova bans the position at coordinate 15;  Lesha\
  \ bans the position at coordinate 3;  Vova bans the position at coordinate 31; \
  \ Lesha bans the position at coordinate 1. \n\nAfter these actions only positions\
  \ 0 and 7 will remain, and the distance between them is equal to 7.\n\nIn the second\
  \ sample there are only two possible positions, so there will be no bans."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_minimum_distance (n : Nat) (positions : List Nat) : Nat\
  \ :=\nsorry\n"
"vc-theorems": "theorem valid_n_result {n : Nat} (h : n ≥ 2) (h2 : n % 2 = 0) \n \
  \ (positions : List Nat) (h3 : positions.length = n) :\n  (find_minimum_distance\
  \ n positions) ≥ 0 :=\nsorry\n\n\ntheorem sorted_positions_same_result {n : Nat}\
  \ (h : n ≥ 2) (h2 : n % 2 = 0)\n  (positions1 positions2 : List Nat) \n  (h3 : positions1.length\
  \ = n)\n  (h4 : positions2.length = n)\n  (h5 : ∀ x, x ∈ positions1 ↔ x ∈ positions2)\
  \ :\n  find_minimum_distance n positions1 = find_minimum_distance n positions2 :=\n\
  sorry\n\n/--\ninfo: 7\n-/\n#guard_msgs in\n#eval find_minimum_distance 6 [0, 1,\
  \ 3, 7, 15, 31]\n\n/--\ninfo: 36\n-/\n#guard_msgs in\n#eval find_minimum_distance\
  \ 2 [73, 37]\n\n/--\ninfo: 500000000\n-/\n#guard_msgs in\n#eval find_minimum_distance\
  \ 4 [0, 500000000, 500000001, 1000000000]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded"
