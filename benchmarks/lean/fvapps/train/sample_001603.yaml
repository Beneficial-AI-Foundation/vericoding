"vc-description": "# Task\n An `amazon` (also known as a queen+knight compound) is\
  \ an imaginary chess piece that can move like a `queen` or a `knight` (or, equivalently,\
  \ like a `rook`, `bishop`, or `knight`). The diagram below shows all squares which\
  \ the amazon attacks from e4 (circles represent knight-like moves while crosses\
  \ correspond to queen-like moves).\n\n ![](https://codefightsuserpics.s3.amazonaws.com/tasks/amazonCheckmate/img/amazon.png?_tm=1473934566013)\n\
  \n Recently you've come across a diagram with only three pieces left on the board:\
  \ a `white amazon`, `white king` and `black king`. \n \n It's black's move. You\
  \ don't have time to determine whether the game is over or not, but you'd like to\
  \ figure it out in your head. \n \n Unfortunately, the diagram is smudged and you\
  \ can't see the position of the `black king`, so it looks like you'll have to check\
  \ them all.\n\n Given the positions of white pieces on a standard chessboard, determine\
  \ the number of possible black king's positions such that: \n\n* It's a checkmate\
  \ (i.e. black's king is under amazon's \n attack and it cannot make a valid move);\n\
  \n* It's a check (i.e. black's king is under amazon's attack \n but it can reach\
  \ a safe square in one move);\n\n* It's a stalemate (i.e. black's king is on a safe\
  \ square \n but it cannot make a valid move);\n\n* Black's king is on a safe square\
  \ and it can make a valid move.\n\nNote that two kings cannot be placed on two adjacent\
  \ squares (including two diagonally adjacent ones).\n\n# Example\n\n For `king =\
  \ \"d3\" and amazon = \"e4\"`, the output should be `[5, 21, 0, 29]`.\n\n ![](https://codefightsuserpics.s3.amazonaws.com/tasks/amazonCheckmate/img/example1.png?_tm=1473934566299)\n\
  \n `Red crosses` correspond to the `checkmate` positions, `orange pluses` refer\
  \ to `checks` and `green circles` denote `safe squares`.\n\n For `king = \"a1\"\
  \ and amazon = \"g5\"`, the output should be `[0, 29, 1, 29]`.\n\n ![](https://codefightsuserpics.s3.amazonaws.com/tasks/amazonCheckmate/img/example2.png?_tm=1473934566670)\n\
  \n `Stalemate` position is marked by a `blue square`.\n\n# Input\n\n\n - String\
  \ `king`\n\nPosition of white's king in chess notation.\n\n\n - String `amazon`\n\
  \nPosition of white's amazon in the same notation.\n\nConstraints: `amazon ≠ king.`\n\
  \n# Output\n\nAn array of four integers, each equal to the number of black's king\
  \ positions corresponding to a specific situation. The integers should be presented\
  \ in the same order as the situations were described, `i.e. 0 for checkmates, 1\
  \ for checks, etc`."
"vc-preamble": "import Imports.AllImports\n\ndef ChessPos := String\ndef AmazonResult\
  \ := List Int\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def amazon_check_mate (king : ChessPos) (amazon : ChessPos) : AmazonResult\
  \ :=\n  sorry\n"
"vc-theorems": "theorem amazon_check_mate_list_len\n  (king amazon : ChessPos)\n \
  \ (h : king ≠ amazon) :\n  (amazon_check_mate king amazon).length = 4 :=\n  sorry\n\
  \n\ntheorem amazon_check_mate_non_negative\n  (king amazon : ChessPos)\n  (h : king\
  \ ≠ amazon)\n  (i : Nat)\n  (h2 : i < (amazon_check_mate king amazon).length) :\n\
  \  (amazon_check_mate king amazon).get ⟨i, h2⟩ ≥ 0 :=\n  sorry\n\n\ntheorem amazon_check_mate_sum_bound\n\
  \  (king amazon : ChessPos)\n  (h : king ≠ amazon) :\n  (amazon_check_mate king\
  \ amazon).foldl (·+·) 0 ≤ 62 :=\n  sorry\n\n\ntheorem amazon_check_mate_bounds\n\
  \  (king amazon : ChessPos)\n  (h : king ≠ amazon) :\n  let result := amazon_check_mate\
  \ king amazon\n  ∀ i : Nat, ∀ h2 : i < result.length,\n    0 ≤ result.get ⟨i, h2⟩\
  \ ∧\n    result.get ⟨i, h2⟩ ≤ 64 :=\n  sorry\n\n/--\ninfo: [5, 21, 0, 29]\n-/\n\
  #guard_msgs in\n#eval amazon_check_mate \"d3\" \"e4\"\n\n/--\ninfo: [0, 29, 1, 29]\n\
  -/\n#guard_msgs in\n#eval amazon_check_mate \"a1\" \"g5\"\n\n/--\ninfo: [1, 32,\
  \ 1, 23]\n-/\n#guard_msgs in\n#eval amazon_check_mate \"a3\" \"e4\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
