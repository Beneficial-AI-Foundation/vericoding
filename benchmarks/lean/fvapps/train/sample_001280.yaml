"vc-description": "There are $N$ cars (numbered $1$ through $N$) on a circular track\
  \ with length $N$. For each $i$ ($2 \\le i \\le N$), the $i$-th of them is at a\
  \ distance $i-1$ clockwise from car $1$, i.e. car $1$ needs to travel a distance\
  \ $i-1$ clockwise to reach car $i$. Also, for each valid $i$, the $i$-th car has\
  \ $f_i$ litres of gasoline in it initially.\nYou are driving car $1$ in the clockwise\
  \ direction. To move one unit of distance in this direction, you need to spend $1$\
  \ litre of gasoline. When you pass another car (even if you'd run out of gasoline\
  \ exactly at that point), you steal all its gasoline. Once you do not have any gasoline\
  \ left, you stop.\nWhat is the total clockwise distance travelled by your car? \n\
  \n-----Input-----\n- The first line of the input contains a single integer $T$ denoting\
  \ the number of test cases. The description of $T$ test cases follows.\n- The first\
  \ line of each test case contains a single integer $N$.\n- The second line contains\
  \ $N$ space-separated integers $f_1, f_2, \\ldots, f_N$.\n\n-----Output-----\nFor\
  \ each test case, print a single line containing one integer ― the total clockwise\
  \ distance travelled.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le\
  \ N \\le 100$\n- $0 \\le f_i \\le 100$ for each valid $i$\n\n-----Subtasks-----\n\
  Subtask #1 (100 points): original constraints\n\n-----Example Input-----\n3\n5\n\
  3 0 0 0 0\n5\n1 1 1 1 1\n5\n5 4 3 2 1\n\n-----Example Output-----\n3\n5\n15"
"vc-preamble": "import Imports.AllImports\n\ndef List.sum : List Nat → Nat \n  | []\
  \ => 0\n  | x::xs => x + sum xs\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_distance (n : Nat) (fuel : List Nat) : Nat :=\n  sorry\n\
  \n\n\n\n"
"vc-theorems": "theorem first_zero_distance_zero (n : Nat) (fuel : List Nat) (h :\
  \ fuel.length > 0) :\n  fuel.get ⟨0, h⟩ = 0 → find_distance n fuel = 0 :=\nsorry\n\
  \n\n\n\ntheorem all_zeros_distance_zero (n : Nat) :\n  find_distance n (List.replicate\
  \ n 0) = 0 :=\nsorry\n\n\ntheorem single_nonzero_distance (n : Nat) (val : Nat)\
  \ (h : n > 0) :\n  find_distance n (val :: List.replicate (n-1) 0) = val :=\nsorry\n\
  \n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval find_distance 5 [3, 0, 0, 0, 0]\n\n/--\n\
  info: 5\n-/\n#guard_msgs in\n#eval find_distance 5 [1, 1, 1, 1, 1]\n\n/--\ninfo:\
  \ 15\n-/\n#guard_msgs in\n#eval find_distance 5 [5, 4, 3, 2, 1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
