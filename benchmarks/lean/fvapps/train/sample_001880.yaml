"vc-description": "In LeetCode Store, there are some kinds of items to sell. Each\
  \ item has a price.\n\n\n\nHowever, there are some special offers, and a special\
  \ offer consists of one or more different kinds of items with a sale price.\n\n\n\
  \nYou are given the each item's price, a set of special offers, and the number we\
  \ need to buy for each item.\nThe job is to output the lowest price you have to\
  \ pay for exactly certain items as given, where you could make optimal use of the\
  \ special offers.\n\n\n\nEach special offer is represented in the form of an array,\
  \ the last number represents the price you need to pay for this special offer, other\
  \ numbers represents how many specific items you could get if you buy this offer.\n\
  \n\nYou could use any of special offers as many times as you want.\n\nExample 1:\n\
  \nInput: [2,5], [[3,0,5],[1,2,10]], [3,2]\nOutput: 14\nExplanation: \nThere are\
  \ two kinds of items, A and B. Their prices are $2 and $5 respectively. \nIn special\
  \ offer 1, you can pay $5 for 3A and 0B\nIn special offer 2, you can pay $10 for\
  \ 1A and 2B. \nYou need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special\
  \ offer #2), and $4 for 2A.\n\n\n\nExample 2:\n\nInput: [2,3,4], [[1,1,0,4],[2,2,1,9]],\
  \ [1,2,1]\nOutput: 11\nExplanation: \nThe price of A is $2, and $3 for B, $4 for\
  \ C. \nYou may pay $4 for 1A and 1B, and $9 for 2A ,2B and 1C. \nYou need to buy\
  \ 1A ,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for\
  \ 1B, $4 for 1C. \nYou cannot add more items, though only $9 for 2A ,2B and 1C.\n\
  \n\n\nNote:\n\nThere are at most 6 kinds of items, 100 special offers.\nFor each\
  \ item, you need to buy at most 6 of them.\nYou are not allowed to buy more items\
  \ than you want, even if that would lower the overall price."
"vc-preamble": "import Imports.AllImports\n\ndef shoppingOffers (price : List Int)\
  \ (special : List (List Int)) (needs : List Int) : Int :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isValidInput (price : List Int) (special : List (List Int))\
  \ (needs : List Int) : Bool :=\n  sorry\n"
"vc-theorems": "theorem shoppingOffers_result_nonnegative\n  (price : List Int) (special\
  \ : List (List Int)) (needs : List Int)\n  (h_price : ∀ p ∈ price, 1 ≤ p ∧ p ≤ 10)\n\
  \  (h_special : ∀ s ∈ special, ∀ x ∈ s, 0 ≤ x ∧ x ≤ 10)\n  (h_needs : ∀ n ∈ needs,\
  \ 0 ≤ n ∧ n ≤ 10)\n  (h_valid : isValidInput price special needs) :\n  0 ≤ shoppingOffers\
  \ price special needs :=\nsorry\n\n\ntheorem shoppingOffers_not_exceed_list_price\n\
  \  (price : List Int) (special : List (List Int)) (needs : List Int)\n  (h_price\
  \ : ∀ p ∈ price, 1 ≤ p ∧ p ≤ 10)\n  (h_special : ∀ s ∈ special, ∀ x ∈ s, 0 ≤ x ∧\
  \ x ≤ 10)\n  (h_needs : ∀ n ∈ needs, 0 ≤ n ∧ n ≤ 10)\n  (h_valid : isValidInput\
  \ price special needs) :\n  shoppingOffers price special needs ≤ (List.zip price\
  \ needs).foldl (fun acc (p, n) => acc + p * n) 0 :=\nsorry\n\n\ntheorem shoppingOffers_no_special_equals_list_price\n\
  \  (price : List Int) (needs : List Int)\n  (h_price : ∀ p ∈ price, 1 ≤ p ∧ p ≤\
  \ 5)\n  (h_needs : ∀ n ∈ needs, 0 ≤ n ∧ n ≤ 5)\n  (h_valid : isValidInput price\
  \ [] needs) :\n  shoppingOffers price [] needs = (List.zip price needs).foldl (fun\
  \ acc (p, n) => acc + p * n) 0 :=\nsorry\n\n/--\ninfo: 14\n-/\n#guard_msgs in\n\
  #eval shoppingOffers [2, 5] [[3, 0, 5], [1, 2, 10]] [3, 2]\n\n/--\ninfo: 11\n-/\n\
  #guard_msgs in\n#eval shoppingOffers [2, 3, 4] [[1, 1, 0, 4], [2, 2, 1, 9]] [1,\
  \ 2, 1]\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval shoppingOffers [1, 1, 1] [[1,\
  \ 1, 0, 3], [2, 2, 1, 5]] [1, 1, 1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
