"vc-description": "# Introduction\n\nThere is a war and nobody knows - the alphabet\
  \ war!  \nThere are two groups of hostile letters. The tension between left side\
  \ letters and right side letters was too high and the war began.\n\n# Task\n\nWrite\
  \ a function that accepts `fight` string consists of only small letters and return\
  \ who wins the fight. When the left side wins return `Left side wins!`, when the\
  \ right side wins return `Right side wins!`, in other case return `Let's fight again!`.\n\
  \nThe left side letters and their power:\n```\n w - 4\n p - 3\n b - 2\n s - 1\n\
  ```\nThe right side letters and their power:\n```\n m - 4\n q - 3\n d - 2\n z -\
  \ 1\n```\nThe other letters don't have power and are only victims.\n\n# Example\n\
  \n# Alphabet war Collection\n\n\n\nAlphavet war \n\n\nAlphabet war - airstrike -\
  \ letters massacre\n\n\nAlphabet wars - reinforces massacre\n\n\nAlphabet wars -\
  \ nuclear strike\n\n\nAlphabet war - Wo lo loooooo priests join the war"
"vc-preamble": "import Imports.AllImports\n\ndef alphabet_war (s : String) : String\
  \ := sorry\n\ndef valid_letters := ['w', 'p', 'b', 's', 'm', 'q', 'd', 'z']\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def score_map (c : Char) : Int :=\n  match c with\n  | 'w' => 4\n\
  \  | 'p' => 3  \n  | 'b' => 2\n  | 's' => 1\n  | 'm' => -4\n  | 'q' => -3\n  | 'd'\
  \ => -2\n  | 'z' => -1\n  | _ => 0\n"
"vc-theorems": "theorem alphabet_war_valid_output (s : String) :\n  alphabet_war s\
  \ = \"Left side wins!\" ∨ \n  alphabet_war s = \"Right side wins!\" ∨\n  alphabet_war\
  \ s = \"Let's fight again!\" := sorry\n\n\ntheorem alphabet_war_invalid_chars (s\
  \ : String) : \n  alphabet_war s = \"Left side wins!\" ∨\n  alphabet_war s = \"\
  Right side wins!\" ∨ \n  alphabet_war s = \"Let's fight again!\" := sorry\n\n\n\
  theorem alphabet_war_scoring (s : String) (h : s.all (λ c => c ∈ valid_letters))\
  \ :\n  let score := s.foldr (λ c acc => acc + score_map c) 0\n  if score > 0 then\
  \ \n    alphabet_war s = \"Left side wins!\"\n  else if score < 0 then\n    alphabet_war\
  \ s = \"Right side wins!\"\n  else\n    alphabet_war s = \"Let's fight again!\"\
  \ := sorry\n\n\ntheorem alphabet_war_opposing_sides (left right : String)\n  (h1\
  \ : left.all (λ c => c ∈ ['w', 'p', 'b', 's']))\n  (h2 : right.all (λ c => c ∈ ['m',\
  \ 'q', 'd', 'z'])) :\n  alphabet_war (left ++ right) = \"Left side wins!\" ∨\n \
  \ alphabet_war (left ++ right) = \"Right side wins!\" ∨\n  alphabet_war (left ++\
  \ right) = \"Let's fight again!\" := sorry\n\n/--\ninfo: 'Right side wins!'\n-/\n\
  #guard_msgs in\n#eval alphabet_war \"z\"\n\n/--\ninfo: 'Left side wins!'\n-/\n#guard_msgs\
  \ in\n#eval alphabet_war \"wq\"\n\n/--\ninfo: \"Let's fight again!\"\n-/\n#guard_msgs\
  \ in\n#eval alphabet_war \"zdqmwpbs\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
