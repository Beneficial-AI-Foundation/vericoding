"vc-description": "Linear Kingdom has exactly one tram line. It has `n` stops, numbered\
  \ from 1 to n in the order of tram's movement. At the i-th stop ai passengers exit\
  \ the tram, while bi passengers enter it. The tram is empty before it arrives at\
  \ the first stop.\n\n## Your task\n\nCalculate the tram's minimum capacity such\
  \ that the number of people inside the tram never exceeds this capacity at any time.\
  \ Note that at each stop all exiting passengers exit before any entering passenger\
  \ enters the tram.\n\n## Example\n\n```c++\ntram(4, {0, 2, 4, 4}, {3, 5, 2, 0})\
  \ ==> 6\n```\n  \nExplaination:\n* The number of passengers inside the tram before\
  \ arriving is 0.\n* At the first stop 3 passengers enter the tram, and the number\
  \ of passengers inside the tram becomes 3.\n* At the second stop 2 passengers exit\
  \ the tram (1 passenger remains inside). Then 5 passengers enter the tram. There\
  \ are 6 passengers inside the tram now.\n* At the third stop 4 passengers exit the\
  \ tram (2 passengers remain inside). Then 2 passengers enter the tram. There are\
  \ 4 passengers inside the tram now.\n* Finally, all the remaining passengers inside\
  \ the tram exit the tram at the last stop. There are no passenger inside the tram\
  \ now, which is in line with the constraints.\n\nSince the number of passengers\
  \ inside the tram never exceeds 6, a capacity of 6 is sufficient. Furthermore it\
  \ is not possible for the tram to have a capacity less than 6. Hence, 6 is the correct\
  \ answer."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def tram (stops : Nat) (descending : List Nat) (onboarding : List\
  \ Nat) : Bool :=\nsorry\n"
"vc-theorems": "theorem tram_stops_limit (stops : Nat) (descending : List Nat) (onboarding\
  \ : List Nat)\n  (h1 : stops > 0)\n  (h2 : stops ≥ max descending.length onboarding.length)\n\
  \  (h3 : descending.length > 0)\n  (h4 : onboarding.length > 0)\n  (h5 : ∀ n ∈ descending,\
  \ n ≥ 0)\n  (h6 : ∀ n ∈ onboarding, n ≥ 0) :\n  tram stops descending onboarding\
  \ = tram (stops + 1) descending onboarding :=\nsorry\n\n/--\ninfo: 6\n-/\n#guard_msgs\
  \ in\n#eval tram 4 [0, 2, 4, 4] [3, 5, 2, 0]\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n\
  #eval tram 2 [0, 2, 4, 4] [3, 5, 2, 0]\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval\
  \ tram 1 [0, 2, 4, 4] [3, 5, 2, 0]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
