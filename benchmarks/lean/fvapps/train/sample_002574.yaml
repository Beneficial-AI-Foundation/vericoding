"vc-description": "*This kata is based on [Project Euler Problem 539](https://projecteuler.net/problem=539)*\n\
  \n##Object\n\nFind the last number between 1 and `n` (inclusive) that survives the\
  \ elimination process\n\n####How It Works\n\nStart with the first number on the\
  \ left then remove every other number moving right until you reach the the end,\
  \ then from the numbers remaining start with the first number on the right and remove\
  \ every other number moving left, repeat the process alternating between left and\
  \ right until only one number remains which you return as the \"last man standing\"\
  \n\n\n##Example\n\n    given an input of `9` our set of numbers is `1 2 3 4 5 6\
  \ 7 8 9`\n\n    start by removing from the left    2   4   6   8\n             \
  \                        1   3   5   7   9\n    \n\n    then from the right    \
  \            2       6\n                                           4       8\n\n\
  \n    then the left again                        6\n                           \
  \            2\n\n\n    until we end with `6` as the last man standing\n\n\n**Note:**\
  \ due to the randomness of the tests it is possible that you will get unlucky and\
  \ a few of the tests will be really large, so try submitting 2 or 3 times.\n\nAs\
  \ allways any feedback would be much appreciated"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def last_man_standing (n : Nat) : Nat :=\n  sorry\n\n\n\n\n"
"vc-theorems": "theorem last_man_standing_small_cases_2 : last_man_standing 2 = 2\
  \ :=\nsorry\n\n\ntheorem last_man_standing_small_cases_3 : last_man_standing 3 =\
  \ 2 :=\nsorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
