"vc-description": "Maheshmati and Sangu are playing a game. First, Maheshmati gives\
  \ Sangu a sequence of $N$ distinct integers $a_1, a_2, \\dots, a_N$ (not necessarily\
  \ sorted) and an integer $K$. Sangu has to create all subsequences of this sequence\
  \ with length $K$. For each subsequence, he has to write down the product of $K-2$\
  \ integers: all elements of this subsequence except the minimum and maximum element.\n\
  Sangu wins the game if he is able to write down all these numbers and tell Maheshmati\
  \ their product (modulo $10^9+7$, since it can be very large). However, Sangu is\
  \ a very lazy child and thus wants you to help him win this game. Compute the number\
  \ Sangu should tell Maheshmati!\n\n-----Input-----\n- The first line of the input\
  \ contains a single integer $T$ denoting the number of test cases. The description\
  \ of $T$ test cases follows.\n- The first line of each test case contains two space-separated\
  \ integers $N$ and $K$.\n- The second line contains $N$ space-separated integers\
  \ $a_1, a_2, \\dots, a_N$.\n\n-----Output-----\nFor each test case, print a single\
  \ line containing one integer — the product of all numbers written down by Sangu\
  \ modulo $10^9+7$.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n- $3 \\le N \\\
  le 5,000$\n- $3 \\le K \\le N$\n- $1 \\le a_i \\le 10,000$ for each valid $i$\n\
  - the numbers $a_1, a_2, \\dots, a_N$ are pairwise distinct\n\n-----Subtasks-----\n\
  Subtask #1 (20 points): $1 \\le N \\le 10$\nSubtask #2 (80 points): original constraints\n\
  \n-----Example Input-----\n1\n4 3 \n1 2 3 4 \n\n-----Example Output-----\n36\n\n\
  -----Explanation-----\nExample case 1: There are four possible subsequences:\n-\
  \ $[1, 2, 3]$ (Sangu should write down $2$.)\n- $[1, 3, 4]$ (Sangu should write\
  \ down $3$.)\n- $[1, 2, 4]$ (Sangu should write down $2$.)\n- $[2, 3, 4]$ (Sangu\
  \ should write down $3$.)\nThe required product is $2 \\cdot 3 \\cdot 2 \\cdot 3\
  \ = 36$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_game (n k : Nat) (arr : List Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem solve_game_output_bounds {n k : Nat} {arr : List Nat}\n  (h1:\
  \ n > 0)\n  (h2: k > 0)\n  (h3: k ≤ n)\n  (h4: arr.length = n)\n  (h5: ∀ x ∈ arr,\
  \ x > 0 ∧ x ≤ 1000) :\n  let result := solve_game n k arr\n  0 ≤ result ∧ result\
  \ < 1000000007 :=\nsorry\n\n\ntheorem solve_game_ones {n k : Nat}\n  (h1: n > 0)\n\
  \  (h2: k > 0)\n  (h3: k ≤ n) :\n  solve_game n k (List.replicate n 1) = 1 :=\n\
  sorry\n\n\ntheorem solve_game_permutation_invariant {n k : Nat} {arr1 arr2 : List\
  \ Nat}\n  (h1: n > 0)\n  (h2: k > 0)\n  (h3: k ≤ n)\n  (h4: arr1.length = n)\n \
  \ (h5: arr2.length = n) \n  (h6: List.Perm arr1 arr2) :\n  solve_game n k arr1 =\
  \ solve_game n k arr2 :=\nsorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
