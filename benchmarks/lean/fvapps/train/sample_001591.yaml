"vc-description": "Automatons, or Finite State Machines (FSM), are extremely useful\
  \ to programmers when it comes to software design. You will be given a simplistic\
  \ version of an FSM to code for a basic TCP session.\n\nThe outcome of this exercise\
  \ will be to return the correct state of the TCP FSM based on the array of events\
  \ given.\n\n---------------------------------\n\nThe input array of events will\
  \ consist of one or more of the following strings:\n\n```\nAPP_PASSIVE_OPEN, APP_ACTIVE_OPEN,\
  \ APP_SEND, APP_CLOSE, APP_TIMEOUT, RCV_SYN, RCV_ACK, RCV_SYN_ACK, RCV_FIN, RCV_FIN_ACK\n\
  ```\n\n---------------------------------\n\nThe states are as follows and should\
  \ be returned in all capital letters as shown:\n\n```\nCLOSED, LISTEN, SYN_SENT,\
  \ SYN_RCVD, ESTABLISHED, CLOSE_WAIT, LAST_ACK, FIN_WAIT_1, FIN_WAIT_2, CLOSING,\
  \ TIME_WAIT\n```\n\n---------------------------------\n\nThe input will be an array\
  \ of events. Your job is to traverse the FSM as determined by the events, and return\
  \ the proper state as a string, all caps, as shown above.\n\nIf an event is not\
  \ applicable to the current state, your code will return `\"ERROR\"`.\n\n### Action\
  \ of each event upon each state:\n(the format is `INITIAL_STATE: EVENT -> NEW_STATE`)\n\
  \n```\nCLOSED: APP_PASSIVE_OPEN -> LISTEN\nCLOSED: APP_ACTIVE_OPEN  -> SYN_SENT\n\
  LISTEN: RCV_SYN          -> SYN_RCVD\nLISTEN: APP_SEND         -> SYN_SENT\nLISTEN:\
  \ APP_CLOSE        -> CLOSED\nSYN_RCVD: APP_CLOSE      -> FIN_WAIT_1\nSYN_RCVD:\
  \ RCV_ACK        -> ESTABLISHED\nSYN_SENT: RCV_SYN        -> SYN_RCVD\nSYN_SENT:\
  \ RCV_SYN_ACK    -> ESTABLISHED\nSYN_SENT: APP_CLOSE      -> CLOSED\nESTABLISHED:\
  \ APP_CLOSE   -> FIN_WAIT_1\nESTABLISHED: RCV_FIN     -> CLOSE_WAIT\nFIN_WAIT_1:\
  \ RCV_FIN      -> CLOSING\nFIN_WAIT_1: RCV_FIN_ACK  -> TIME_WAIT\nFIN_WAIT_1: RCV_ACK\
  \      -> FIN_WAIT_2\nCLOSING: RCV_ACK         -> TIME_WAIT\nFIN_WAIT_2: RCV_FIN\
  \      -> TIME_WAIT\nTIME_WAIT: APP_TIMEOUT   -> CLOSED\nCLOSE_WAIT: APP_CLOSE \
  \   -> LAST_ACK\nLAST_ACK: RCV_ACK        -> CLOSED\n```\n\n![\"EFSM TCP\" ](http://theangelfallseries.com/img/EFSM_TCP.png)\n\
  \n## Examples\n\n```\n[\"APP_PASSIVE_OPEN\", \"APP_SEND\", \"RCV_SYN_ACK\"] => \
  \ \"ESTABLISHED\"\n\n[\"APP_ACTIVE_OPEN\"] =>  \"SYN_SENT\"\n\n[\"APP_ACTIVE_OPEN\"\
  , \"RCV_SYN_ACK\", \"APP_CLOSE\", \"RCV_FIN_ACK\", \"RCV_ACK\"] =>  \"ERROR\"\n\
  ```\n\n \n\nThis kata is similar to [Design a Simple Automaton (Finite State Machine)](https://www.codewars.com/kata/design-a-simple-automaton-finite-state-machine),\
  \ and you may wish to try that kata before tackling this one.\n\nSee wikipedia page\
  \ [Transmission Control Protocol]( http://en.wikipedia.org/wiki/Transmission_Control_Protocol)\n\
  for further details.\n\nSee http://www.medianet.kent.edu/techreports/TR2005-07-22-tcp-EFSM.pdf\
  \ page 4, for the FSM diagram used for this kata."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def traverse_TCP_states : List TCPEvent → TCPState \n  | _ => sorry\n"
"vc-theorems": "theorem traverse_TCP_states_valid (events : List TCPEvent) :\n  traverse_TCP_states\
  \ events ≠ TCPState.ERROR → \n  ∃ s, traverse_TCP_states events = s :=\nsorry\n\n\
  \ntheorem traverse_TCP_states_empty : \n  traverse_TCP_states [] = TCPState.CLOSED\
  \ :=\nsorry\n\n\ntheorem traverse_TCP_states_deterministic (events : List TCPEvent)\
  \ :\n  traverse_TCP_states events = traverse_TCP_states events :=\nsorry\n\n\ntheorem\
  \ traverse_TCP_states_invalid_error (events : List TCPEvent) (invalid : TCPEvent)\
  \ :\n  ¬(invalid ∈ events) →\n  traverse_TCP_states (invalid::events) = TCPState.ERROR\
  \ :=\nsorry\n\n/--\ninfo: 'ESTABLISHED'\n-/\n#guard_msgs in\n#eval traverse_TCP_states\
  \ [\"APP_PASSIVE_OPEN\", \"APP_SEND\", \"RCV_SYN_ACK\"]\n\n/--\ninfo: 'SYN_SENT'\n\
  -/\n#guard_msgs in\n#eval traverse_TCP_states [\"APP_ACTIVE_OPEN\"]\n\n/--\ninfo:\
  \ 'ERROR'\n-/\n#guard_msgs in\n#eval traverse_TCP_states [\"APP_ACTIVE_OPEN\", \"\
  RCV_SYN_ACK\", \"APP_CLOSE\", \"RCV_FIN_ACK\", \"RCV_ACK\"]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
