"vc-description": "Write a function getNumberOfSquares that will return how many integer\
  \ (starting from 1, 2...) numbers raised to power of 2 and then summed up are less\
  \ than some number given as a parameter.\n\n\nE.g 1: For n = 6 result should be\
  \ 2 because 1^2 + 2^2 = 1 + 4 = 5 and 5 < 6\nE.g 2: For n = 15 result should be\
  \ 3 because 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14 and 14 < 15"
"vc-preamble": "import Imports.AllImports\n\ndef get_number_of_squares (n : Int) :\
  \ Nat :=\n  sorry\n\n\ndef sum_squares (n : Nat) : Int :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def next_square (n : Nat) : Int :=\n  sorry\n\n\n\n\n\n\n\n\n"
"vc-theorems": "theorem known_sequence_values :\n  (get_number_of_squares 1 = 0) ∧\n\
  \  (get_number_of_squares 2 = 1) ∧ \n  (get_number_of_squares 6 = 2) ∧\n  (get_number_of_squares\
  \ 15 = 3) :=\nsorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval get_number_of_squares\
  \ 6\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval get_number_of_squares 15\n\n/--\n\
  info: 6\n-/\n#guard_msgs in\n#eval get_number_of_squares 100\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
