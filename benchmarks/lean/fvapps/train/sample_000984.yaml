"vc-description": "The chef is trying to solve some pattern problems, Chef wants your\
  \ help to code it. Chef has one number K to form a new pattern. Help the chef to\
  \ code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$,\
  \ the number of test cases. Then the test cases follow. \n- Each test case contains\
  \ a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test\
  \ case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n\
  - $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n4\n1\n2\n3\n4\n\n-----Sample\
  \ Output:-----\n2\n24\n68\n246\n81012\n141618\n2468\n10121416\n18202224\n26283032\n\
  \n-----EXPLANATION:-----\nNo need, else pattern can be decode easily."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def generate_pattern (k : Nat) : List String := sorry\n\ntheorem\
  \ pattern_only_digits (k : Nat) (h : 0 < k ∧ k ≤ 10) :\n  let pattern := generate_pattern\
  \ k\n  ∀ row ∈ pattern, ∀ c ∈ row.data, '0' ≤ c ∧ c ≤ '9' := sorry\n"
"vc-theorems": "theorem pattern_first_row_starts_with_two (k : Nat) (h : 0 < k ∧ k\
  \ ≤ 10) :\n  let pattern := generate_pattern k\n  pattern.head!.data.head! = '2'\
  \ := sorry\n\n\ntheorem pattern_rows_nonempty (k : Nat) (h : 0 < k ∧ k ≤ 10) :\n\
  \  let pattern := generate_pattern k\n  ∀ row ∈ pattern, row.length > 0 := sorry\n\
  \n\ntheorem pattern_base_cases :\n  generate_pattern 1 = [\"2\"] ∧\n  generate_pattern\
  \ 2 = [\"24\", \"68\"] := sorry\n\n/--\ninfo: ['2']\n-/\n#guard_msgs in\n#eval generate_pattern\
  \ 1\n\n/--\ninfo: ['24', '68']\n-/\n#guard_msgs in\n#eval generate_pattern 2\n\n\
  /--\ninfo: ['246', '81012', '141618']\n-/\n#guard_msgs in\n#eval generate_pattern\
  \ 3\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
