vc-description: |-
  Your task is to create a function that does four basic mathematical operations.

  The function should take three arguments - operation(string/char), value1(number), value2(number).  
  The function should return result of numbers after applying the chosen operation.

  ### Examples

  ```python
  basic_op('+', 4, 7)         # Output: 11
  basic_op('-', 15, 18)       # Output: -3
  basic_op('*', 5, 5)         # Output: 25
  basic_op('/', 49, 7)        # Output: 7
  ```
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def basic_op (op : String) (x y : Float) : Float :=
    sorry
vc-theorems: |
  theorem add_property (x y : Float) : ¬ x.isNaN → ¬ y.isNaN → ¬ x.isInf → ¬ y.isInf →
    basic_op "+" x y = x + y :=
    sorry


  theorem sub_property (x y : Float) : ¬ x.isNaN → ¬ y.isNaN → ¬ x.isInf → ¬ y.isInf →
    basic_op "-" x y = x - y :=
    sorry


  theorem mult_property (x y : Float) : ¬ x.isNaN → ¬ y.isNaN → ¬ x.isInf → ¬ y.isInf →
    basic_op "*" x y = x * y :=
    sorry


  theorem div_property (x y : Float) : ¬ x.isNaN → ¬ y.isNaN → ¬ x.isInf → ¬ y.isInf → y ≠ 0 →
    basic_op "/" x y = x / y :=
    sorry


  theorem invalid_operator (op : String) (x y : Float) : 
    op ≠ "+" → op ≠ "-" → op ≠ "*" → op ≠ "/" →
    (basic_op op x y).isNaN :=
    sorry

  /--
  info: 11
  -/
  #guard_msgs in
  #eval basic_op "+" 4 7

  /--
  info: -3
  -/
  #guard_msgs in
  #eval basic_op "-" 15 18

  /--
  info: 25
  -/
  #guard_msgs in
  #eval basic_op "*" 5 5
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
