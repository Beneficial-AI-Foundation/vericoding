"vc-description": "Chef and his friends are playing the game AMONG US. They all have\
  \ chosen their names as numbers. There are N people in Chef’s group including him,\
  \ and each swears that he is not the imposter. However, it turns out there were\
  \ N+1 people in the game. Now all that Chef needs to know is the name of the imposter,\
  \ which is a number. Also remember that numbers can be duplicate. Can you help out\
  \ Chef in finding the imposter?\nInput : \nFirst line contains the value of N. Second\
  \ line contains the N numbers that Chef’s friends used as their names. Third line\
  \ contains the N+1 numbers that people in the game have used as their names.\nOutput\
  \ : \nPrint the extra number in new line.\nConstraints : \n1 ≤ Numbers used as names\
  \ ≤ 1,000\n1 ≤ N ≤ 1,000,000\nSample Input : \n3\n4 2 5\n4 2 3 5\nSample Output\
  \ : \n3"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_imposter (n : Nat) (base : List Int) (game : List Int)\
  \ : Int :=\n  sorry\n"
"vc-theorems": "theorem find_imposter_correct (base : List Int) (imposter : Int) :\n\
  \  imposter ∉ base →  -- assume imposter not in base list\n  find_imposter (base.length)\
  \ base (base ++ [imposter]) = imposter := by  \n  sorry\n\n/--\ninfo: 3\n-/\n#guard_msgs\
  \ in\n#eval find_imposter 3 [4, 2, 5] [4, 2, 3, 5]\n\n/--\ninfo: 2\n-/\n#guard_msgs\
  \ in\n#eval find_imposter 2 [1, 1] [1, 1, 2]\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n\
  #eval find_imposter 1 [5] [5, 5]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
