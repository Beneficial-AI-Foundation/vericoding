"vc-description": "We are given a 2-dimensional grid. \".\" is an empty cell, \"#\"\
  \ is a wall, \"@\" is the starting point, (\"a\", \"b\", ...) are keys, and (\"\
  A\", \"B\", ...) are locks.\nWe start at the starting point, and one move consists\
  \ of walking one space in one of the 4 cardinal directions.  We cannot walk outside\
  \ the grid, or walk into a wall.  If we walk over a key, we pick it up.  We can't\
  \ walk over a lock unless we have the corresponding key.\nFor some 1 <= K <= 6,\
  \ there is exactly one lowercase and one uppercase letter of the first K letters\
  \ of the English alphabet in the grid.  This means that there is exactly one key\
  \ for each lock, and one lock for each key; and also that the letters used to represent\
  \ the keys and locks were chosen in the same order as the English alphabet.\nReturn\
  \ the lowest number of moves to acquire all keys.  If it's impossible, return -1.\n\
   \n\nExample 1:\nInput: [\"@.a.#\",\"###.#\",\"b.A.B\"]\nOutput: 8\n\n\nExample\
  \ 2:\nInput: [\"@..aA\",\"..B#.\",\"....b\"]\nOutput: 6\n\n\n \nNote:\n\n1 <= grid.length <=\
  \ 30\n1 <= grid[0].length <= 30\ngrid[i][j] contains only '.', '#', '@', 'a'-'f'\
  \ and 'A'-'F'\nThe number of keys is in [1, 6].  Each key has a different letter\
  \ and opens exactly one lock."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isValidGrid (grid : List String) : Bool := sorry\n\ndef shortestPathAllKeys\
  \ (grid : List String) : Int := sorry\n"
"vc-theorems": "theorem shortestPathAllKeys_non_negative_or_neg1 (grid : List String)\
  \ \n  (h: isValidGrid grid = true) :\n  let res := shortestPathAllKeys grid\n  res\
  \ = -1 ∨ res ≥ 0 := sorry\n\n\ntheorem shortestPathAllKeys_geq_keycount (grid :\
  \ List String) \n  (h: isValidGrid grid = true) :\n  let res := shortestPathAllKeys\
  \ grid\n  let keyCount := (grid.map (λ row => row.toList.filter Char.isLower)).join.length\n\
  \  res = -1 ∨ res ≥ keyCount := sorry\n\n\ntheorem shortestPathAllKeys_empty_grid\
  \ (grid : List String)\n  (h1: grid = [\"@\"]) :\n  shortestPathAllKeys grid = 0\
  \ := sorry\n\n\ntheorem shortestPathAllKeys_simple_grid (grid : List String)\n \
  \ (h1: grid = [\"@.\", \"..\"]) :\n  shortestPathAllKeys grid = 0 := sorry\n\n/--\n\
  info: 8\n-/\n#guard_msgs in\n#eval shortest_path_all_keys [\"@.a.#\", \"###.#\"\
  , \"b.A.B\"]\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval shortest_path_all_keys [\"\
  @..aA\", \"..B#.\", \"....b\"]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
