"vc-description": "You will be given a certain array of length ```n```, such that\
  \ ```n > 4```, having positive and negative integers but there will be no zeroes\
  \ and all the elements will occur once in it.\n\nWe may obtain an amount of ```n```\
  \ sub-arrays of length ```n - 1```, removing one element at a time (from left to\
  \ right). \n\nFor each subarray, let's calculate the product and sum of its elements\
  \ with the corresponding absolute value of the quotient, ```q = SubProduct/SubSum```\
  \ (if it is possible, SubSum cannot be 0). \nThen we select the array with the lowest\
  \ value of ```|q|```(absolute value)\n\ne.g.: we have the array, ```arr = [1, 23,\
  \ 2, -8, 5]```\n```\nSub Arrays            SubSum    SubProduct         |q|\n[23,\
  \ 2, -8, 5]         22         -1840         83.636363\n[1, 2, -8, 5]          \
  \ 0           -80          No value\n[1, 23, -8, 5]         21          -920   \
  \      43.809524\n[1, 23, 2, 5]          31           230          7.419355  <---\
  \ selected array\n[1, 23, 2, -8]         18           368         20.444444\n```\n\
  Let's compare the given array with the selected subarray:\n```\n[1, 23, 2, -8, 5]\n\
  [1, 23, 2,     5]\n```\nThe difference between them is at the index ```3``` for\
  \ the given array, with element ```-8```, so we put both things for a result ```[3,\
  \ -8]```.\n\nThat means that to obtain the selected subarray we have to take out\
  \ the value -8 at index 3.\nWe need a function that receives an array as an argument\
  \ and outputs the the pair ```[index, arr[index]]``` that generates the subarray\
  \ with  the lowest value of ```|q|```.\n\n```python \nselect_subarray([1, 23, 2,\
  \ -8, 5]) == [3, -8]\n```\nAnother case:\n```python \nselect_subarray([1, 3, 23,\
  \ 4, 2, -8, 5, 18]) == [2, 23]\n```\nIn Javascript the function will be ```selectSubarray()```.\n\
  \nWe may have some special arrays that may have more than one solution as the one\
  \ that follows below.\n```python \nselect_subarray([10, 20, -30, 100, 200]) == [[3,\
  \ 100], [4, 200]]\n```\nIf there is more than one result the function should output\
  \ a 2Darray sorted by the index of the element removed from the array.\n\nThanks\
  \ to Unnamed for detecting the special cases when we have multiple solutions.\n\n\
  Features of the random tests:\n```\nNumber of tests = 200\nlength of the array,\
  \ l, such that 20 <= l <= 100\n```\n\nEnjoy it!!"
"vc-preamble": "import Imports.AllImports\n\ndef select_subarray (arr : List Int)\
  \ : Nat × Int :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def get_ratio (arr : List Int) (idx : Nat) : Float :=\n  sorry\n"
"vc-theorems": "theorem select_subarray_index_bounds {arr : List Int}\n  (h_size :\
  \ arr.length ≥ 2)\n  (h_nonzero : ∀ x ∈ arr, x ≠ 0) :\n  (select_subarray arr).1\
  \ < arr.length := by\n  sorry\n\n\ntheorem select_subarray_matches_input {arr :\
  \ List Int}\n  (h_size : arr.length ≥ 2) \n  (h_nonzero : ∀ x ∈ arr, x ≠ 0) :\n\
  \  (select_subarray arr).2 = arr[(select_subarray arr).1]! := by\n  sorry\n\n\n\
  theorem select_subarray_minimum_ratio {arr : List Int}\n  (h_size : arr.length ≥\
  \ 2)\n  (h_nonzero : ∀ x ∈ arr, x ≠ 0) :\n  ∀ i < arr.length,\n    get_ratio arr\
  \ (select_subarray arr).1 ≤ get_ratio arr i := by\n  sorry\n\n/--\ninfo: [3, -8]\n\
  -/\n#guard_msgs in\n#eval select_subarray [1, 23, 2, -8, 5]\n\n/--\ninfo: [2, 23]\n\
  -/\n#guard_msgs in\n#eval select_subarray [1, 3, 23, 4, 2, -8, 5, 18]\n\n/--\ninfo:\
  \ [[3, 100], [4, 200]]\n-/\n#guard_msgs in\n#eval select_subarray [10, 20, -30,\
  \ 100, 200]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
