"vc-description": "A carpet shop sells carpets in different varieties. Each carpet\
  \ can come in a different roll width and can have a different price per square meter.\
  \ \n\nWrite a function `cost_of_carpet` which calculates the cost (rounded to 2\
  \ decimal places) of carpeting a room, following these constraints:\n\n* The carpeting\
  \ has to be done in one unique piece. If not possible, retrun `\"error\"`.\n* The\
  \ shop sells any length of a roll of carpets, but always with a full width.\n* The\
  \ cost has to be minimal.\n* The length of the room passed as argument can sometimes\
  \ be shorter than its width (because we define these relatively to the position\
  \ of the door in the room).\n* A length or width equal to zero is considered invalid,\
  \ return `\"error\"` if it occurs.\n\n\nINPUTS:\n\n`room_width`, `room_length`,\
  \ `roll_width`, `roll_cost` as floats.\n\nOUTPUT:\n\n`\"error\"` or the minimal\
  \ cost of the room carpeting, rounded to two decimal places."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def cost_of_carpet (length width roll_width roll_cost : Float)\
  \ : Float := sorry\n\ntheorem cost_of_carpet_symmetry \n  (roll_width : Float) \n\
  \  (roll_cost : Float)\n  (h1 : roll_width > 0.1 ∧ roll_width ≤ 100)\n  (h2 : roll_cost\
  \ > 0.01 ∧ roll_cost ≤ 100)\n  : let length := roll_width / 2\n    let width :=\
  \ roll_width / 3\n    cost_of_carpet length width roll_width roll_cost = \n    cost_of_carpet\
  \ width length roll_width roll_cost := sorry"
"vc-theorems": "/--\ninfo: 200.0\n-/\n#guard_msgs in\n#eval cost_of_carpet 3 5 4 10\n\
  \n/--\ninfo: 'error'\n-/\n#guard_msgs in\n#eval cost_of_carpet 0 0 4 10\n\n/--\n\
  info: 'error'\n-/\n#guard_msgs in\n#eval cost_of_carpet 5 6 4 10\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
