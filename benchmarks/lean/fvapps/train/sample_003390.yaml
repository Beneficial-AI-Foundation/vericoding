"vc-description": "The dragon's curve is a self-similar fractal which can be obtained\
  \ by a recursive method. \n\nStarting with the string `D0 = 'Fa'`, at each step\
  \ simultaneously perform the following operations:\n\n```\nreplace 'a' with: 'aRbFR'\n\
  replace 'b' with: 'LFaLb'\n```\n\nFor example (spaces added for more visibility)\
  \ : \n\n```\n1st iteration: Fa -> F aRbF R\n2nd iteration: FaRbFR -> F aRbFR R LFaLb\
  \ FR\n```\n\nAfter `n` iteration, remove `'a'` and `'b'`. You will have a string\
  \ with `'R'`,`'L'`, and `'F'`. This is a set of instruction. Starting at the origin\
  \ of a grid looking in the `(0,1)` direction, `'F'` means a step forward, `'L'`\
  \ and `'R'` mean respectively turn left and right. After executing all instructions,\
  \ the trajectory will give a beautifull self-replicating pattern called 'Dragon\
  \ Curve'\n\nThe goal of this kata is to code a function wich takes one parameter\
  \ `n`, the number of iterations needed and return the string of instruction as defined\
  \ above. For example: \n\n```\nn=0, should return: 'F'\nn=1, should return: 'FRFR'\n\
  n=2, should return: 'FRFRRLFLFR'\n```\n\n`n` should be a number and non-negative\
  \ integer. All other case should return the empty string: `''`."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def dragon_curve (n : α) : String := sorry\n\ntheorem dragon_curve_integer_bounds\
  \ {n : Int} :\n  let result := dragon_curve n\n  result.all (fun c => c = 'F' ∨\
  \ c = 'R' ∨ c = 'L') ∧\n  (n < 0 → result = \"\") :=\nsorry\n"
"vc-theorems": "theorem dragon_curve_float_to_empty :\n  ∀ (n : Float), dragon_curve\
  \ n = \"\" :=\nsorry\n\n\ntheorem dragon_curve_string_to_empty :\n  ∀ (s : String),\
  \ dragon_curve s = \"\" :=\nsorry\n\n\ntheorem dragon_curve_base_case :\n  dragon_curve\
  \ 0 = \"F\" :=\nsorry\n\n\ntheorem dragon_curve_length_increases :\n  ∀ (n : Nat),\
  \ n > 0 → String.length (dragon_curve n) > String.length (dragon_curve (n-1)) :=\n\
  sorry\n\n\ntheorem dragon_curve_chars_valid :\n  ∀ (n : Nat), (dragon_curve n).all\
  \ (fun c => c = 'F' ∨ c = 'R' ∨ c = 'L') :=\nsorry\n\n/--\ninfo: ''\n-/\n#guard_msgs\
  \ in\n#eval dragon_curve \"a\"\n\n/--\ninfo: ''\n-/\n#guard_msgs in\n#eval dragon_curve\
  \ 1.1\n\n/--\ninfo: ''\n-/\n#guard_msgs in\n#eval dragon_curve -1\n\n/--\ninfo:\
  \ 'F'\n-/\n#guard_msgs in\n#eval dragon_curve 0\n\n/--\ninfo: 'FRFR'\n-/\n#guard_msgs\
  \ in\n#eval dragon_curve 1\n\n/--\ninfo: 'FRFRRLFLFR'\n-/\n#guard_msgs in\n#eval\
  \ dragon_curve 2\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
