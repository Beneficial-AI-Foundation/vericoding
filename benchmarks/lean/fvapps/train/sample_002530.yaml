"vc-description": "A marine themed rival site to Codewars has started. Codwars is\
  \ advertising their website all over the internet using subdomains to hide or obfuscate\
  \ their domain to trick people into clicking on their site.\n\nYour task is to write\
  \ a function that accepts a URL as a string and determines if it would result in\
  \ an http request to codwars.com.\n\nFunction should return true for all urls in\
  \ the codwars.com domain. All other URLs should return false.\n\nThe urls are all\
  \ valid but may or may not contain http://, https:// at the beginning or subdirectories\
  \ or querystrings at the end.\n\nFor additional confusion, directories in can be\
  \ named \"codwars.com\" in a url with the codewars.com domain and vise versa. Also,\
  \ a querystring may contain codewars.com or codwars.com for any other domain - it\
  \ should still return true or false based on the domain of the URL and not the domain\
  \ in the querystring. Subdomains can also add confusion: for example `http://codwars.com.codewars.com`\
  \ is a valid URL in the codewars.com domain in the same way that `http://mail.google.com`\
  \ is a valid URL within google.com\n\nUrls will not necessarily have either codewars.com\
  \ or codwars.com in them. The folks at Codwars aren't very good about remembering\
  \ the contents of their paste buffers.\n\nAll urls contain domains with a single\
  \ TLD; you need not worry about domains like company.co.uk.\n\n```\nfindCodwars(\"\
  codwars.com\"); // true\nfindCodwars(\"https://subdomain.codwars.com/a/sub/directory?a=querystring\"\
  ); // true\nfindCodwars(\"codewars.com\"); // false\nfindCodwars(\"https://subdomain.codwars.codewars.com/a/sub/directory/codwars.com?a=querystring\"\
  ); // false\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_codwars (url : String) : Bool := sorry\n\ntheorem valid_codwars_urls\n\
  \  (protocol : String)\n  (subdomains : List String)\n  (path : String)\n  (h1 :\
  \ protocol = \"http://\" ∨ protocol = \"https://\" ∨ protocol = \"\")\n  (h2 : ∀\
  \ s ∈ subdomains, s.data.all (λ c => 'a' ≤ c ∧ c ≤ 'z'))\n  (h3 : subdomains.length\
  \ ≤ 3)\n  (h4 : path = \"\" ∨ (path.front = '/' ∧ path.data.all (λ c => ('a' ≤ c\
  \ ∧ c ≤ 'z') ∨ \n                                                              ('0'\
  \ ≤ c ∧ c ≤ '9') ∨\n                                                           \
  \   c = '/' ∨ c = '-' ∨ c = '_'))) :\n  find_codwars (protocol ++ (String.intercalate\
  \ \".\" subdomains) ++ \n                (if subdomains.length > 0 then \".\" else\
  \ \"\") ++ \n                \"codwars.com\" ++ path) = true := sorry\n"
"vc-theorems": "theorem invalid_domains \n  (domain : String)\n  (h1 : domain.length\
  \ > 0)\n  (h2 : domain.data.all (λ c => ('a' ≤ c ∧ c ≤ 'z') ∨ \n               \
  \                 ('0' ≤ c ∧ c ≤ '9') ∨ \n                                c = '.'\
  \ ∨ c = '-'))\n  (h3 : ¬(∃ i, domain.take i ++ \"codwars.com\" ++ domain.drop (i\
  \ + 11) = domain))\n  (h4 : ∃ c ∈ domain.data, c = '.') :\n  find_codwars domain\
  \ = false := sorry\n\n\ntheorem case_sensitivity\n  (text : String)\n  (h1 : text.length\
  \ > 0)\n  (h2 : text.data.all (λ c => 'A' ≤ c ∧ c ≤ 'Z')) :\n  find_codwars (\"\
  CODWARS.com/\" ++ text) = false := sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n\
  #eval find_codwars \"codwars.com\"\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval\
  \ find_codwars \"https://www.codwars.com/kata\"\n\n/--\ninfo: False\n-/\n#guard_msgs\
  \ in\n#eval find_codwars \"codwars.comp\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
