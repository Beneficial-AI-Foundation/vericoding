"vc-description": "You are given an axis-aligned rectangle in a 2D Cartesian plane.\
  \ The bottom left corner of this rectangle has coordinates (0,0)$(0, 0)$ and the\
  \ top right corner has coordinates (N−1,N−1)$(N-1, N-1)$. You are also given K$K$\
  \ light sources; each light source is a point inside or on the perimeter of the\
  \ rectangle.\nFor each light source, let's divide the plane into four quadrants\
  \ by a horizontal and a vertical line passing through this light source. The light\
  \ source can only illuminate one of these quadrants (including its border, i.e.\
  \ the point containing the light source and two half-lines), but the quadrants illuminated\
  \ by different light sources may be different.\nYou want to assign a quadrant to\
  \ each light source in such a way that when they illuminate their respective quadrants,\
  \ the entire rectangle (including its perimeter) is illuminated. Find out whether\
  \ it is possible to assign quadrants to light sources in such a way.\n\n-----Input-----\n\
  - The first line of the input contains an integer T$T$ denoting the number of test\
  \ cases. The description of the test cases follows.\n- The first line of each test\
  \ case contains two space-separated integers K$K$ and N$N$.\n- Each of the next\
  \ K$K$ lines contains two space-separated integers x$x$ and y$y$ denoting a light\
  \ source with coordinates (x,y)$(x, y)$.\n\n-----Output-----\nFor each test case,\
  \ print a single line containing the string \"yes\" if it is possible to illuminate\
  \ the whole rectangle or \"no\" if it is impossible.\n\n-----Constraints-----\n\
  - 1≤T≤5,000$1 \\le T \\le 5,000$\n- 1≤K≤100$1 \\le K \\le 100$\n- 1≤N≤109$1 \\le\
  \ N \\le 10^9$\n- 0≤x,y≤N−1$0 \\le x, y \\le N-1$\n- no two light sources coincide\n\
  \n-----Example Input-----\n2\n2 10\n0 0\n1 0\n2 10\n1 2\n1 1\n\n-----Example Output-----\n\
  yes\nno"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def assess_lights (k : Nat) (n : Nat) (points : List (Nat × Nat))\
  \ : String := sorry\n\ntheorem more_than_three_lights_always_yes {n k : Nat} {points\
  \ : List (Nat × Nat)}\n  (h1 : 1 ≤ n) (h2 : n ≤ 100) \n  (h3 : 1 ≤ k) (h4 : k ≤\
  \ 4)\n  (h5 : k > 3)\n  : assess_lights k n points = \"yes\" := sorry\n"
"vc-theorems": "theorem corner_point_always_yes {n : Nat} {points : List (Nat × Nat)}\n\
  \  (h1 : 2 ≤ n) (h2 : n ≤ 100)\n  (h3 : points.length ≤ 3)\n  (h4 : ∃ p ∈ points,\
  \ p = (0,0) ∨ p = (0,n-1) ∨ p = (n-1,0) ∨ p = (n-1,n-1))\n  : assess_lights points.length\
  \ n points = \"yes\" := sorry\n\n\ntheorem two_edge_points_yes {n : Nat}\n  (h1\
  \ : 2 ≤ n) (h2 : n ≤ 100) :\n  (assess_lights 2 n [(0,1), (0,n-2)] = \"yes\") ∧\
  \ \n  (assess_lights 2 n [(1,0), (n-2,0)] = \"yes\") := sorry\n\n\ntheorem three_points_valid_result\
  \ {n x y : Nat}\n  (h1 : 2 ≤ n) (h2 : n ≤ 100)\n  (h3 : x ≤ 99) (h4 : y ≤ 99) :\n\
  \  (assess_lights 3 n [(0,0), (x % n, y % n), (n-1,n-1)] = \"yes\") ∨\n  (assess_lights\
  \ 3 n [(0,0), (x % n, y % n), (n-1,n-1)] = \"no\") := sorry\n\n/--\ninfo: 'yes'\n\
  -/\n#guard_msgs in\n#eval assess_lights 2 10 [(0, 0), (1, 0)]\n\n/--\ninfo: 'no'\n\
  -/\n#guard_msgs in\n#eval assess_lights 2 10 [(1, 2), (1, 1)]\n\n/--\ninfo: 'yes'\n\
  -/\n#guard_msgs in\n#eval assess_lights 3 5 [(0, 0), (4, 2), (2, 4)]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
