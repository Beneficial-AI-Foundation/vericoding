"vc-description": "Given two arrays of integers with equal lengths, return the maximum\
  \ value of:\n|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|\nwhere the maximum\
  \ is taken over all 0 <= i, j < arr1.length.\n \nExample 1:\nInput: arr1 = [1,2,3,4],\
  \ arr2 = [-1,4,5,6]\nOutput: 13\n\nExample 2:\nInput: arr1 = [1,-2,-5,0,10], arr2\
  \ = [0,-2,-1,-7,-4]\nOutput: 20\n\n \nConstraints:\n\n2 <= arr1.length == arr2.length\
  \ <= 40000\n-10^6 <= arr1[i], arr2[i] <= 10^6"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def maxAbsValExpr (arr1 arr2 : List Int) : Int :=\n  sorry\n"
"vc-theorems": "theorem maxAbsValExpr_non_negative {arr1 arr2 : List Int} \n  (h :\
  \ arr1.length = arr2.length) :\n  maxAbsValExpr arr1 arr2 ≥ 0 :=\nsorry\n\n\ntheorem\
  \ maxAbsValExpr_constant_invariant {arr1 arr2 : List Int} (const : Int)\n  (h :\
  \ arr1.length = arr2.length) :\n  maxAbsValExpr (arr1.map (· + const)) (arr2.map\
  \ (· + const)) = maxAbsValExpr arr1 arr2 :=\nsorry\n\n/--\ninfo: 13\n-/\n#guard_msgs\
  \ in\n#eval maxAbsValExpr [1, 2, 3, 4] [-1, 4, 5, 6]\n\n/--\ninfo: 20\n-/\n#guard_msgs\
  \ in\n#eval maxAbsValExpr [1, -2, -5, 0, 10] [0, -2, -1, -7, -4]\n\n/--\ninfo: 1\n\
  -/\n#guard_msgs in\n#eval maxAbsValExpr [1, 1] [1, 1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
