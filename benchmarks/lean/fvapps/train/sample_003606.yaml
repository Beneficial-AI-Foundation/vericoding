"vc-description": "You've came to visit your grandma and she straight away found you\
  \ a job - her Christmas tree needs decorating!\n\nShe first shows you a tree with\
  \ an identified number of branches, and then hands you a some baubles (or loads\
  \ of them!).\n\nYou know your grandma is a very particular person and she would\
  \ like the baubles to be distributed in the orderly manner. You decide the best\
  \ course of action would be to put the same number of baubles on each of the branches\
  \ (if possible) or add one more bauble to some of the branches - starting from the\
  \ beginning of the tree. \n\nIn this kata you will return an array of baubles on\
  \ each of the branches.\n\nFor example: \n\n10 baubles, 2 branches: [5,5]\n5 baubles,\
  \ 7 branches: [1,1,1,1,1,0,0]\n12 baubles, 5 branches: [3,3,2,2,2]\n\nThe numbers\
  \ of branches and baubles will be always greater or equal to 0.\nIf there are 0\
  \ branches return: \"Grandma, we will have to buy a Christmas tree first!\".\n\n\
  Good luck - I think your granny may have some minced pies for you if you do a good\
  \ job!"
"vc-preamble": "import Imports.AllImports\n\ndef List.sum : List Nat → Nat \n  | []\
  \ => 0\n  | h::t => h + sum t\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def baubles_on_tree (baubles : Nat) (branches : Nat) : List Nat\
  \ × String := sorry\n\ntheorem baubles_distribution (baubles : Nat) (branches :\
  \ Nat)\n  (h1 : baubles ≤ 1000)\n  (h2 : branches ≤ 100) \n  (h3 : branches > 0)\
  \ : \n  let (list, _) := baubles_on_tree baubles branches\n  -- Sum equals input\
  \ baubles\n  List.sum list = baubles ∧ \n  -- Length equals branches \n  list.length\
  \ = branches ∧\n  -- Max difference ≤ 1\n  (∀ x y, x ∈ list → y ∈ list → x - y ≤\
  \ 1) ∧\n  -- All non-negative\n  (∀ x, x ∈ list → x ≥ 0) := sorry\n"
"vc-theorems": "theorem zero_branches (baubles : Nat) (h : baubles ≤ 1000) :\n  let\
  \ (_, msg) := baubles_on_tree baubles 0\n  msg = \"Grandma, we will have to buy\
  \ a Christmas tree first!\" := sorry\n\n\ntheorem zero_baubles (branches : Nat)\
  \ (h1 : branches ≤ 100) (h2 : branches > 0) :\n  let (list, _) := baubles_on_tree\
  \ 0 branches\n  list.length = branches ∧\n  (∀ x, x ∈ list → x = 0) := sorry\n\n\
  /--\ninfo: [1, 1, 1, 1, 1]\n-/\n#guard_msgs in\n#eval baubles_on_tree 5 5\n\n/--\n\
  info: 'Grandma, we will have to buy a Christmas tree first!'\n-/\n#guard_msgs in\n\
  #eval baubles_on_tree 5 0\n\n/--\ninfo: [2, 1, 1, 1, 1]\n-/\n#guard_msgs in\n#eval\
  \ baubles_on_tree 6 5\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
