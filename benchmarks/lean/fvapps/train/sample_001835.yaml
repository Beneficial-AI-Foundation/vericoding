"vc-description": "Given a non-empty binary tree, find the maximum path sum.\n\nFor\
  \ this problem, a path is defined as any sequence of nodes from some starting node\
  \ to any node in the tree along the parent-child connections. The path must contain\
  \ at least one node and does not need to go through the root.\n\nExample 1:\n\n\n\
  Input: [1,2,3]\n\n       1\n      / \\\n     2   3\n\nOutput: 6\n\n\nExample 2:\n\
  \n\nInput: [-10,9,20,null,null,15,7]\n\n   -10\n   / \\\n  9  20\n    /  \\\n   15\
  \   7\n\nOutput: 42"
"vc-preamble": "import Imports.AllImports\n\ndef maxPathSum (t : Tree Int) : Int :=\n\
  \  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def listMax (l : List Int) : Int :=\n  sorry\n"
"vc-theorems": "theorem max_path_sum_geq_max_node_value (t : Tree Int) (values : List\
  \ Int) \n  (h : values.length > 0) : \n  maxPathSum t ≥ listMax values := sorry\n\
  \n\ntheorem max_path_sum_is_finite (t : Tree Int) :\n  ∃ (n : Int), maxPathSum t\
  \ = n := sorry\n\n\ntheorem max_path_sum_single_node (v : Int) :\n  maxPathSum (Tree.leaf\
  \ v) = v := sorry\n\n\ntheorem max_path_sum_linear_path (v : Int) :\n  v ≥ 0 → maxPathSum\
  \ (Tree.node v (Tree.node v (Tree.leaf v) (Tree.leaf v)) (Tree.leaf v)) ≥ 2 * v\
  \ := sorry\n\n\ntheorem max_path_sum_linear_path_neg (v : Int) :\n  v ≤ 0 → maxPathSum\
  \ (Tree.node v (Tree.node v (Tree.leaf v) (Tree.leaf v)) (Tree.leaf v)) ≥ v := sorry\n\
  \n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval maxPathSum TreeNode(1)\n\n/--\ninfo: 42\n\
  -/\n#guard_msgs in\n#eval maxPathSum TreeNode(-10)\n\n/--\ninfo: -3\n-/\n#guard_msgs\
  \ in\n#eval maxPathSum TreeNode(-3)\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
