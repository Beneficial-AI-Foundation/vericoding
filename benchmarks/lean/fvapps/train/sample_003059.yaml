"vc-description": "Scheduling is how the processor decides which jobs(processes) get\
  \ to use the processor and for how long. This can cause a lot of problems. Like\
  \ a really long process taking the entire CPU and freezing all the other processes.\
  \ One solution is Shortest Job First(SJF), which today you will be implementing.\n\
  \nSJF works by, well, letting the shortest jobs take the CPU first. If the jobs\
  \ are the same size then it is First In First Out (FIFO). The idea is that the shorter\
  \ jobs will finish quicker, so theoretically jobs won't get frozen because of large\
  \ jobs. (In practice they're frozen because of small jobs).\n\nYou will be implementing:\n\
  ```python\n  def SJF(jobs, index)\n```\n\nIt takes in:\n\n1. \"jobs\" a non-empty\
  \ array of positive integers. They represent the clock-cycles(cc) needed to finish\
  \ the job.\n2. \"index\" a positive integer. That represents the job we're interested\
  \ in.\n\nSJF returns:\n\n1. A positive integer representing the cc it takes to complete\
  \ the job at index.\n\nHere's an example:\n```\nSJF([3, 10, 20, 1, 2], 0)\nat 0cc\
  \ [3, 10, 20, 1, 2] jobs[3] starts\nat 1cc [3, 10, 20, 0, 2] jobs[3] finishes, jobs[4]\
  \ starts\nat 3cc [3, 10, 20, 0, 0] jobs[4] finishes, jobs[0] starts\nat 6cc [0,\
  \ 10, 20, 0, 0] jobs[0] finishes\n```\n\nso:\n```\nSJF([3,10,20,1,2], 0) == 6\n\
  ```"
"vc-preamble": "import Imports.AllImports\n\ndef SJF (jobs : List Nat) (index : Nat)\
  \ : Nat :=\n  sorry\n\nabbrev sum (l : List Nat) : Nat :=\n  match l with\n  | []\
  \ => 0\n  | x :: xs => x + sum xs\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def filterWithIndex (l : List Nat) (p : Nat → Nat → Bool) : List\
  \ Nat :=\n  let rec helper : List Nat → Nat → List Nat\n    | [], _ => []\n    |\
  \ (x :: xs), i => if p i x then x :: helper xs (i+1) else helper xs (i+1)\n  helper\
  \ l 0\n"
"vc-theorems": "theorem single_job_returns_itself {jobs : List Nat} {job : Nat} (h\
  \ : jobs = [job]) :\n  SJF jobs 0 = job :=\n  sorry\n\n/--\ninfo: 100\n-/\n#guard_msgs\
  \ in\n#eval SJF [100] 0\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval SJF [3, 10, 20,\
  \ 1, 2] 0\n\n/--\ninfo: 16\n-/\n#guard_msgs in\n#eval SJF [3, 10, 10, 20, 1, 2]\
  \ 1\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
