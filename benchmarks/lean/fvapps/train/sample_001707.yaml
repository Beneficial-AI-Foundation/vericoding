"vc-description": "# Task\n IONU Satellite Imaging, Inc. records and stores very large\
  \ images using run length encoding. You are to write a program that reads a compressed\
  \ image, finds the edges in the image, as described below, and outputs another compressed\
  \ image of the detected edges.\n \n A simple edge detection algorithm sets an output\
  \ pixel's value to be the maximum absolute value of the differences between it and\
  \ all its surrounding pixels in the input image. Consider the input image below:\n\
  \n ![](http://media.openjudge.cn/images/1009_1.jpg)\n\n The upper left pixel in\
  \ the output image is the maximum of the values |15-15|,|15-100|, and |15-100|,\
  \ which is 85. The pixel in the 4th row, 2nd column is computed as the maximum of\
  \ |175-100|, |175-100|, |175-100|, |175-175|, |175-25|, |175-175|,|175-175|, and\
  \ |175-25|, which is 150.\n \n Images contain 2 to 1,000,000,000 (10^9) pixels.\
  \ All images are encoded using run length encoding (RLE). This is a sequence of\
  \ pairs, containing pixel value (0-255) and run length (1-10^9). Input images have\
  \ at most 1,000 of these pairs. Successive pairs have different pixel values. All\
  \ lines in an image contain the same number of pixels.\n  \n For the iamge as the\
  \ example above, the RLE encoding string is `\"7 15 4 100 15 25 2 175 2 25 5 175\
  \ 2 25 5\"`\n \n ```\n Each image starts with the width, in pixels(means the first\
  \ number 7)\n This is followed by the RLE pairs(two number is a pair).\n 7     \
  \ ----> image width\n 15 4   ----> a pair(color value + number of pixel)\n 100 15\
  \       ...........ALL.......................\n 25 2         ..........THESE......................\n\
  \ 175 2        ...........ARE.......................\n 25 5         ..........PAIRS......................\n\
  \ 175 2        ...........LIKE......................\n 25 5         ..........ABOVE......................\n\
  \ ```\n \n Your task is to calculate the result by using the edge detection algorithm\
  \ above. Returns a encoding string in the same format as the input string.\n \n\
  # Exaple\n\n `Please see examples in the example test block.`\n \n# Input/Output\n\
  \n\n - `[input]` string `image`\n \n A RLE string of image.\n \n \n - `[output]`\
  \ a string\n \n A RLE string calculate by using the edge detection algorithm."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def edge_detection (s : String) : String := sorry\n\ndef pixel_at\
  \ (s : String) (x y : Nat) : Nat := sorry\n"
"vc-theorems": "theorem single_value_image_no_edges (val : Nat) (h : val > 0) (h2\
  \ : val ≤ 5) :\n  edge_detection s!\"1 {val} 1\" = \"1 0 1\" := sorry\n\n\ntheorem\
  \ uniform_square_no_edges (size : Nat) (h : size > 0) (h2 : size ≤ 10) :\n  edge_detection\
  \ s!\"{size} 5 {size * size}\" = s!\"{size} 0 {size * size}\" := sorry\n\n\ntheorem\
  \ alternating_pixels_edge_value \n  (size val1 val2 : Nat)\n  (h1 : size > 0) (h2\
  \ : size ≤ 4)\n  (h3 : val1 ≤ 255) (h4 : val2 ≤ 255)\n  (h5 : val1 ≠ val2) :\n \
  \ let input := s!\"{size} {val1} {size} {val2} {size}\"\n  let diff := if val1 ≥\
  \ val2 then val1 - val2 else val2 - val1\n  let output := edge_detection input\n\
  \  ∀ i j, i < size → j < size →\n    pixel_at output i j = diff := sorry\n\n/--\n\
  info: '1 0 1'\n-/\n#guard_msgs in\n#eval edge_detection \"1 5 1\"\n\n/--\ninfo:\
  \ '2 9 4'\n-/\n#guard_msgs in\n#eval edge_detection \"2 1 2 10 2\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
