"vc-description": "Today is Chocolate day and Kabir and Tara are visiting a Valentine\
  \ fair. Upon arriving, they find a stall with an interesting game.\nThere are N$N$\
  \ jars having some chocolates in them. To win the game, one has to select the maximum\
  \ number of consecutive jars such that the sum of count of chocolates in maximum\
  \ and second maximum jar is less than or equal to k$k$ in that range.\nKabir wants\
  \ to win the game so that he can gift the chocolates to Tara. You are a friend of\
  \ Kabiir, help him win the game.\nThere will be at least one possible answer.\n\
  Note$Note$ :\n- You have to select at least two jars. \n- Count of chocolates in\
  \ maximum and second maximum jar among selected consecutive jars may be equal.\n\
  \n-----Input:-----\n- First line will contain T$T$, number of test cases.\n- First\
  \ line of each test case contains two space separated integers N,k$N, k$.\n- Second\
  \ line of each test case contains N$N$ space separated integer ai$a_i$ denotes number\
  \ of chocolates in the jar. \n\n-----Output:-----\nFor each test case print maximum\
  \ number of jars.\n\n-----Constraints:-----\n- 1≤T≤10$1 \\leq T \\leq 10$\n- 2≤N≤105$2\
  \ \\leq N \\leq 10^5$\n- 1≤ai≤105$1 \\leq a_i \\leq 10^5$\n\n-----Sample Input:-----\n\
  1\n6 5\n\n1 3 3 1 1 5\n\n-----Sample Output:-----\n3\n\n-----EXPLANATION:-----\n\
  You can select 3rd$3^{rd}$, 4th$4^{th}$, and 5th$5^{th}$ jar as the sum of max and\
  \ second max is equal to 4 which is less then 5."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_max_consecutive_jars (n k : Nat) (chocolates : List Nat)\
  \ : Nat := sorry\n\ntheorem find_max_consecutive_jars_bounds (k n : Nat) (chocolates\
  \ : List Nat)\n    (h1 : 2 ≤ n) (h2 : n ≤ 100) (h3 : 1 ≤ k) (h4 : k ≤ 1000)\n  \
  \  (h5 : 2 ≤ chocolates.length) (h6 : chocolates.length ≤ 100)\n    (h7 : ∀ x ∈\
  \ chocolates, 1 ≤ x ∧ x ≤ 1000) : \n    let result := find_max_consecutive_jars\
  \ n k chocolates\n    1 ≤ result ∧ result ≤ n := sorry\n"
"vc-theorems": "theorem find_max_consecutive_jars_valid_sequence (k n : Nat) (chocolates\
  \ : List Nat)\n    (h1 : 2 ≤ n) (h2 : n ≤ 100) (h3 : 1 ≤ k) (h4 : k ≤ 1000)\n  \
  \  (h5 : 2 ≤ chocolates.length) (h6 : chocolates.length ≤ 100)\n    (h7 : ∀ x ∈\
  \ chocolates, 1 ≤ x ∧ x ≤ 1000) :\n    let result := find_max_consecutive_jars n\
  \ k chocolates\n    ∃ i, i + result ≤ chocolates.length ∧\n    let subseq := (chocolates.take\
  \ (i + result)).drop i\n    ∀ j, j + 1 < subseq.length →\n    (List.get! subseq\
  \ j + List.get! subseq (j+1)) ≤ k := sorry\n\n\ntheorem find_max_consecutive_jars_monotonic\
  \ (k : Nat) (chocolates : List Nat)\n    (h1 : 2 ≤ k) (h2 : k ≤ 100) \n    (h3 :\
  \ 2 ≤ chocolates.length) (h4 : chocolates.length ≤ 100)\n    (h5 : ∀ x ∈ chocolates,\
  \ 1 ≤ x ∧ x ≤ 10) :\n    let n := chocolates.length\n    find_max_consecutive_jars\
  \ n k chocolates ≤ \n    find_max_consecutive_jars n (2*k) chocolates := sorry\n\
  \n\ntheorem find_max_consecutive_jars_sort_invariant (chocolates : List Nat)\n \
  \   (h1 : 2 ≤ chocolates.length)\n    (h2 : ∀ x ∈ chocolates, 1 ≤ x) :\n    let\
  \ n := chocolates.length\n    let k := 2 * (List.foldl Nat.max 0 chocolates) \n\
  \    find_max_consecutive_jars n k chocolates =\n    find_max_consecutive_jars n\
  \ k chocolates := sorry\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval find_max_consecutive_jars\
  \ 6 5 [1, 3, 3, 1, 1, 5]\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval find_max_consecutive_jars\
  \ 4 6 [2, 3, 2, 1]\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval find_max_consecutive_jars\
  \ 5 4 [1, 2, 2, 1, 3]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
