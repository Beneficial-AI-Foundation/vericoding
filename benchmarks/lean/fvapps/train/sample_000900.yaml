vc-description: |-
  Today is Chocolate day and Kabir and Tara are visiting a Valentine fair. Upon arriving, they find a stall with an interesting game.
  There are N$N$ jars having some chocolates in them. To win the game, one has to select the maximum number of consecutive jars such that the sum of count of chocolates in maximum and second maximum jar is less than or equal to k$k$ in that range.
  Kabir wants to win the game so that he can gift the chocolates to Tara. You are a friend of Kabiir, help him win the game.
  There will be at least one possible answer.
  Note$Note$ :
  - You have to select at least two jars. 
  - Count of chocolates in maximum and second maximum jar among selected consecutive jars may be equal.

  -----Input:-----
  - First line will contain T$T$, number of test cases.
  - First line of each test case contains two space separated integers N,k$N, k$.
  - Second line of each test case contains N$N$ space separated integer ai$a_i$ denotes number of chocolates in the jar. 

  -----Output:-----
  For each test case print maximum number of jars.

  -----Constraints:-----
  - 1≤T≤10$1 \leq T \leq 10$
  - 2≤N≤105$2 \leq N \leq 10^5$
  - 1≤ai≤105$1 \leq a_i \leq 10^5$

  -----Sample Input:-----
  1
  6 5

  1 3 3 1 1 5

  -----Sample Output:-----
  3

  -----EXPLANATION:-----
  You can select 3rd$3^{rd}$, 4th$4^{th}$, and 5th$5^{th}$ jar as the sum of max and second max is equal to 4 which is less then 5.
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def find_max_consecutive_jars (n k : Nat) (chocolates : List Nat) : Nat := sorry

  theorem find_max_consecutive_jars_bounds (k n : Nat) (chocolates : List Nat)
      (h1 : 2 ≤ n) (h2 : n ≤ 100) (h3 : 1 ≤ k) (h4 : k ≤ 1000)
      (h5 : 2 ≤ chocolates.length) (h6 : chocolates.length ≤ 100)
      (h7 : ∀ x ∈ chocolates, 1 ≤ x ∧ x ≤ 1000) : 
      let result := find_max_consecutive_jars n k chocolates
      1 ≤ result ∧ result ≤ n := sorry
vc-theorems: |
  theorem find_max_consecutive_jars_valid_sequence (k n : Nat) (chocolates : List Nat)
      (h1 : 2 ≤ n) (h2 : n ≤ 100) (h3 : 1 ≤ k) (h4 : k ≤ 1000)
      (h5 : 2 ≤ chocolates.length) (h6 : chocolates.length ≤ 100)
      (h7 : ∀ x ∈ chocolates, 1 ≤ x ∧ x ≤ 1000) :
      let result := find_max_consecutive_jars n k chocolates
      ∃ i, i + result ≤ chocolates.length ∧
      let subseq := (chocolates.take (i + result)).drop i
      ∀ j, j + 1 < subseq.length →
      (List.get! subseq j + List.get! subseq (j+1)) ≤ k := sorry


  theorem find_max_consecutive_jars_monotonic (k : Nat) (chocolates : List Nat)
      (h1 : 2 ≤ k) (h2 : k ≤ 100) 
      (h3 : 2 ≤ chocolates.length) (h4 : chocolates.length ≤ 100)
      (h5 : ∀ x ∈ chocolates, 1 ≤ x ∧ x ≤ 10) :
      let n := chocolates.length
      find_max_consecutive_jars n k chocolates ≤ 
      find_max_consecutive_jars n (2*k) chocolates := sorry


  theorem find_max_consecutive_jars_sort_invariant (chocolates : List Nat)
      (h1 : 2 ≤ chocolates.length)
      (h2 : ∀ x ∈ chocolates, 1 ≤ x) :
      let n := chocolates.length
      let k := 2 * (List.foldl Nat.max 0 chocolates) 
      find_max_consecutive_jars n k chocolates =
      find_max_consecutive_jars n k chocolates := sorry

  /--
  info: 3
  -/
  #guard_msgs in
  #eval find_max_consecutive_jars 6 5 [1, 3, 3, 1, 1, 5]

  /--
  info: 4
  -/
  #guard_msgs in
  #eval find_max_consecutive_jars 4 6 [2, 3, 2, 1]

  /--
  info: 4
  -/
  #guard_msgs in
  #eval find_max_consecutive_jars 5 4 [1, 2, 2, 1, 3]
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
