"vc-description": "# Task\n Let's say that `\"g\" is happy` in the given string, if\
  \ there is another \"g\" immediately to the right or to the left of it.\n \n Find\
  \ out if all \"g\"s in the given string are happy.\n\n# Example\n For `str = \"\
  gg0gg3gg0gg\"`, the output should be `true`.\n \n For `str = \"gog\"`, the output\
  \ should be `false`.\n\n# Input/Output\n\n\n - `[input]` string `str`\n\n  A random\
  \ string of lower case letters, numbers and spaces.\n\n\n - `[output]` a boolean\
  \ value\n\n  `true` if all `\"g\"`s are happy, `false` otherwise."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def happy_g (s : String) : Bool := sorry\n\ntheorem happy_g_empty_or_no_g\
  \ (s : String) :\n  ¬ s.contains 'g' → happy_g s := sorry\n"
"vc-theorems": "theorem happy_g_multiple_grouped (s : String) :\n  (∀ i j : String.Pos,\
  \ \n    s.get i = 'g' → s.get j = 'g' →\n    i.1 + 1 = j.1 → ∃ k : String.Pos, k.1\
  \ > j.1 ∧ s.get k = 'g') →\n  happy_g s := sorry\n\n\ntheorem happy_g_single_g_unhappy\
  \ (s : String) (pos : Nat) :\n  ¬ s.contains 'g' →\n  pos ≤ s.length →\n  ¬ happy_g\
  \ (s.push 'g') := sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval happy_g \"\
  gg0gg3gg0gg\"\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval happy_g \"gog\"\n\n\
  /--\ninfo: True\n-/\n#guard_msgs in\n#eval happy_g \"gggggggggg\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
