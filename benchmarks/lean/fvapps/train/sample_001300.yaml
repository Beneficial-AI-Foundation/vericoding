"vc-description": "Chef Watson uses a social network called ChefBook, which has a\
  \ new feed consisting of posts by his friends. Each post can be characterized by\
  \ f - the identifier of the friend who created the post, p - the popularity of the\
  \ post(which is pre-calculated by ChefBook platform using some machine learning\
  \ algorithm) and s - the contents of the post which is a string of lower and uppercase\
  \ English alphabets.\nAlso, Chef has some friends, which he has marked as special.\n\
  The algorithm used by ChefBook for determining the order of posts in news feed is\
  \ as follows:\n\n- Posts of special friends should be shown first, irrespective\
  \ of popularity. Among all such posts the popular ones should be shown earlier.\n\
  - Among all other posts, popular posts should be shown earlier.\n\nGiven, a list\
  \ of identifiers of Chef's special friends and a list of posts, you have to implement\
  \ this algorithm for engineers of ChefBook and output the correct ordering of posts\
  \ in the new feed. \n\n-----Input-----\nFirst line contains N, number of special\
  \ friends of Chef and M, the number of posts. Next line contains N integers A1,\
  \ A2, ..., AN denoting the identifiers of special friends of Chef. Each of the next\
  \ M lines contains a pair of integers and a string denoting f, p and s, identifier\
  \ of the friend who created the post, the popularity of the post and the contents\
  \ of the post, respectively. It is guaranteed that no two posts have same popularity,\
  \ but the same friend might make multiple posts.\n\n-----Output-----\nOutput correct\
  \ ordering of posts in news feed in M lines. Output only the contents of a post.\n\
  \n-----Constraints-----\n- 1 ≤ N, M ≤ 103\n- 1 ≤ Ai, f, p ≤  105\n- 1 ≤ length(s)\
  \ ≤  100\n\n-----Example-----\nInput:\n2 4\n1 2\n1 1 WhoDoesntLoveChefBook\n2 2\
  \ WinterIsComing\n3 10 TheseViolentDelightsHaveViolentEnds\n4 3 ComeAtTheKingBestNotMiss\n\
  \nOutput:\nWinterIsComing\nWhoDoesntLoveChefBook\nTheseViolentDelightsHaveViolentEnds\n\
  ComeAtTheKingBestNotMiss\n\n-----Explanation-----\n\nFirst we should show posts\
  \ created by friends with identifiers 1 and 2. Among the posts by these friends,\
  \ the one with more popularity should be shown first.\n\nAmong remaining posts,\
  \ we show those which are more popular first."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def Post := Nat × Nat × String\n\ndef sort_posts (special_friends\
  \ : List Nat) (posts : List Post) : List String :=\n  sorry\n"
"vc-theorems": "theorem sort_posts_length_matches_input \n  (special_friends : List\
  \ Nat) (posts : List Post) :\n  (sort_posts special_friends posts).length = posts.length\
  \ :=\nsorry\n\n\ntheorem sort_posts_preserves_contents\n  (special_friends : List\
  \ Nat) (posts : List Post) :\n  ∀ s, (s ∈ (posts.map (fun p => p.2.2))) ↔ (s ∈ (sort_posts\
  \ special_friends posts)) :=\nsorry\n\n\ntheorem sort_posts_empty_posts\n  (special_friends\
  \ : List Nat) :\n  sort_posts special_friends [] = [] :=\nsorry\n\n\ntheorem sort_posts_order_preserved\n\
  \  (special_friends : List Nat) (posts : List Post)\n  (h_special : ∀ i j : Fin\
  \ posts.length,\n    special_friends.contains (posts[i].1) → \n    ¬special_friends.contains\
  \ (posts[j].1) → \n    i < j) :\n  ∀ i j : Fin posts.length,\n    i < j →\n    special_friends.contains\
  \ (posts[i].1) =\n    special_friends.contains (posts[j].1) →\n    (posts[i].2.1\
  \ ≥ posts[j].2.1) :=\nsorry\n\n/--\ninfo: ['a', 'b']\n-/\n#guard_msgs in\n#eval\
  \ sort_posts [] [(1, 5, \"a\"), (2, 3, \"b\")]\n\n/--\ninfo: ['y', 'x']\n-/\n#guard_msgs\
  \ in\n#eval sort_posts [1, 2] [(1, 1, \"x\"), (2, 2, \"y\")]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
