"vc-description": "Snuke has decided to play a game, where the player runs a railway\
  \ company.\nThere are M+1 stations on Snuke Line, numbered 0 through M.\nA train\
  \ on Snuke Line stops at station 0 and every d-th station thereafter, where d is\
  \ a predetermined constant for each train.\nFor example, if d = 3, the train stops\
  \ at station 0, 3, 6, 9, and so forth.\nThere are N kinds of souvenirs sold in areas\
  \ around Snuke Line. The i-th kind of souvenirs can be purchased when the train\
  \ stops at one of the following stations: stations l_i, l_i+1, l_i+2, ..., r_i.\n\
  There are M values of d, the interval between two stops, for trains on Snuke Line:\
  \ 1, 2, 3, ..., M.\nFor each of these M values, find the number of the kinds of\
  \ souvenirs that can be purchased if one takes a train with that value of d at station\
  \ 0.\nHere, assume that it is not allowed to change trains.\n\n-----Constraints-----\n\
  \ - 1 ≦ N ≦ 3 × 10^{5}\n - 1 ≦ M ≦ 10^{5}\n - 1 ≦ l_i ≦ r_i ≦ M\n\n-----Input-----\n\
  The input is given from Standard Input in the following format:\nN M\nl_1 r_1\n\
  :\nl_{N} r_{N}\n\n-----Output-----\nPrint the answer in M lines. The i-th line should\
  \ contain the maximum number of the kinds of souvenirs that can be purchased if\
  \ one takes a train stopping every i-th station.\n\n-----Sample Input-----\n3 3\n\
  1 2\n2 3\n3 3\n\n-----Sample Output-----\n3\n2\n2\n\n - If one takes a train stopping\
  \ every station, three kinds of souvenirs can be purchased: kind 1, 2 and 3.\n -\
  \ If one takes a train stopping every second station, two kinds of souvenirs can\
  \ be purchased: kind 1 and 2.\n - If one takes a train stopping every third station,\
  \ two kinds of souvenirs can be purchased: kind 2 and 3."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_train_souvenirs (n m : Nat) (lr_pairs : List (Nat × Nat))\
  \ : List Nat := sorry\n\n/-- For any input with n segments and m positions, the\
  \ result length matches m -/"
"vc-theorems": "theorem result_length_matches_m (n m : Nat) (lr_pairs : List (Nat\
  \ × Nat)) :\n  List.length (solve_train_souvenirs n m lr_pairs) = m := sorry\n\n\
  /-- All values in result are non-negative -/\n\ntheorem result_values_nonnegative\
  \ (n m : Nat) (lr_pairs : List (Nat × Nat)) :\n  ∀ x ∈ solve_train_souvenirs n m\
  \ lr_pairs, x ≥ 0 := sorry\n\n/-- First value in result is at most n -/\n\ntheorem\
  \ first_value_at_most_n (n m : Nat) (lr_pairs : List (Nat × Nat)) :\n  n > 0 → m\
  \ > 0 → List.head! (solve_train_souvenirs n m lr_pairs) ≤ n := sorry\n\n/-- Empty\
  \ input produces list of m zeros -/\n\ntheorem empty_input_produces_zeros (m : Nat)\
  \ :\n  solve_train_souvenirs 0 m [] = List.replicate m 0 := sorry"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded"
