"vc-description": "Oh no!  You have stumbled upon a mysterious signal consisting of\
  \ beeps of various lengths, and it is of utmost importance that you find out the\
  \ secret message hidden in the beeps.  There are long and short beeps, the longer\
  \ ones roughly three times as long as the shorter ones.  Hmm... that sounds familiar.\n\
  \nThat's right: your job is to implement a decoder for the Morse alphabet.  Rather\
  \ than dealing with actual beeps, we will use a common string encoding of Morse.\
  \  A long beep is represened by a dash (`-`) and a short beep by a dot (`.`).  A\
  \ series of long and short beeps make up a letter, and letters are separated by\
  \ spaces (` `).  Words are separated by double spaces.\n\nYou should implement the\
  \ International Morse Alphabet.  You need to support letters a-z and digits 0-9\
  \ as follows:\n\n    a .-      h ....    o ---     u ..-      1 .----     6 -....\n\
  \    b -...    i ..      p .--.    v ...-     2 ..---     7 --...\n    c -.-.  \
  \  j .---    q --.-    w .--      3 ...--     8 ---..\n    d -..     k -.-     r\
  \ .-.     x -..-     4 ....-     9 ----.\n    e .       l .-..    s ...     y -.--\
  \     5 .....     0 -----\n    f ..-.    m --      t -       z --..\n    g --. \
  \    n -.\n\n\n## Examples\n\n    .... . .-.. .-.. ---  .-- --- .-. .-.. -..   →\
  \ \"hello world\"\n    .---- ... -  .- -. -..  ..--- -. -..         → \"1st and\
  \ 2nd\"\n\n```if:python\nA dictionnary `TOME` is preloaded for you, with the information\
  \ above to convert morse code to letters.\n```\n```if:javascrip\nAn object `TOME`\
  \ is preloaded for you, with the information above to convert morse code to letters.\n\
  ```\n```if:ruby\nA Hashmap `$dict` is preloaded for you, with the information above\
  \ to convert morse code to letters.\n```"
"vc-preamble": "import Imports.AllImports\n\ndef MORSE_CHARS := [\n  \".-\", \"-...\"\
  , \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \n  \".---\", \"\
  -.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \n  \"...\"\
  , \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\", \"-----\",\n\
  \  \".----\", \"..---\", \"...--\", \"....-\", \".....\", \"-....\", \"--...\",\
  \ \n  \"---..\", \"----.\"\n]\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def decode (s : String) : String := sorry\n\ndef splitString (s\
  \ : String) (sep : Char) : List String := sorry\n"
"vc-theorems": "theorem decode_preserves_word_count (morse_words : List (List String))\n\
  \  (h_valid : ∀ w ∈ morse_words, ∀ c ∈ w, c ∈ MORSE_CHARS)\n  (morse_string := String.intercalate\
  \ \"  \" (morse_words.map (String.intercalate \" \"))) :\n  (splitString (decode\
  \ morse_string) ' ').length = morse_words.length := sorry\n\n\ntheorem decode_returns_alphanumeric\
  \ (morse_words : List (List String))\n  (h_valid : ∀ w ∈ morse_words, ∀ c ∈ w, c\
  \ ∈ MORSE_CHARS)\n  (morse_string := String.intercalate \"  \" (morse_words.map\
  \ (String.intercalate \" \"))) :\n  ∀ c ∈ (decode morse_string).data, c.isAlphanum\
  \ ∨ c = ' ' := sorry\n\n\ntheorem decode_empty_string :\n  decode \"\" = \"\" :=\
  \ sorry\n\n\ntheorem decode_singleton_space :\n  decode \" \" = \" \" := sorry\n\
  \n/--\ninfo: 'hello world'\n-/\n#guard_msgs in\n#eval decode \".... . .-.. .-..\
  \ ---  .-- --- .-. .-.. -..\"\n\n/--\ninfo: '1st and 2nd'\n-/\n#guard_msgs in\n\
  #eval decode \".---- ... -  .- -. -..  ..--- -. -..\"\n\n/--\ninfo: ''\n-/\n#guard_msgs\
  \ in\n#eval decode \"\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
