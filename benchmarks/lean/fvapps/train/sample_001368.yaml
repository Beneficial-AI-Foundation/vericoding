"vc-description": "Mr. Wilson was planning to record his new Progressive Rock music\
  \ album called \"Digits. Cannot. Separate\". Xenny and PowerShell, popular pseudo-number-theoreticists\
  \ from the Land of Lazarus were called by him to devise a strategy to ensure the\
  \ success of this new album. Xenny and Powershell took their Piano Lessons and arrived\
  \ at the Studio in different Trains.\nMr. Wilson, creative as usual, had created\
  \ one single, long music track S. The track consisted of N musical notes. The beauty\
  \ of each musical note was represented by a decimal digit from 0 to 9.\nMr. Wilson\
  \ told them that he wanted to create multiple musical tracks out of this long song.\
  \ Since Xenny and Powershell were more into the number theory part of music, they\
  \ didn’t know much about their real workings. Mr. Wilson told them that a separator\
  \ could be placed between 2 digits. After placing separators, the digits between\
  \ 2 separators would be the constituents of this new track and the number formed\
  \ by joining them together would represent the Quality Value of that track. He also\
  \ wanted them to make sure that no number formed had greater than M digits.\nMr.\
  \ Wilson had Y separators with him. He wanted Xenny and PowerShell to use at least\
  \ X of those separators, otherwise he would have to ask them to Drive Home.\nXenny\
  \ and PowerShell knew straight away that they had to put place separators in such\
  \ a way that the Greatest Common Divisor (GCD) of all the Quality Values would eventually\
  \ determine the success of this new album. Hence, they had to find a strategy to\
  \ maximize the GCD.\nIf you find the maximum GCD of all Quality Values that can\
  \ be obtained after placing the separators, Xenny and PowerShell shall present you\
  \ with a Porcupine Tree.\nNote:\n- \nYou can read about GCD here.\n\n- \nGreatest\
  \ Common Divisor of 0 and 0 is defined as 0.\n\n-----Input-----\nThe first line\
  \ of input consists of a single integer T - the number of testcases.\nEach test\
  \ case is of the following format:\nFirst line contains a single integer N - the\
  \ length of the long musical track.\nSecond line contains the string of digits S.\n\
  Third line contains 3 space-separated integers - M, X and Y - the maximum number\
  \ of digits in a number, the minimum number of separators to be used and the maximum\
  \ number of separators to be used.\n\n-----Output-----\nFor each testcase, output\
  \ a single integer on a new line - the maximum GCD possible after placing the separators.\n\
  \n-----Constraints-----\nSubtask 1: 20 points\n\n- 1 ≤ T ≤ 10\n- 1 ≤ N ≤ 18\n- 1\
  \ ≤ M ≤ 2\n- 1 ≤ X ≤ Y ≤ (N - 1)\n\nSubtask 2: 80 points\n\n- 1 ≤ T ≤ 10\n- 1 ≤\
  \ N ≤ 300\n- 1 ≤ M ≤ 10\n- 1 ≤ X ≤ Y ≤ (N - 1)\n\nFor both Subtask 1 and Subtask\
  \ 2:\n\n- 1 ≤ X ≤ Y ≤ (N - 1)\n- M*(Y+1) ≥ N\n- S may contain leading 0s.\n\n-----Example-----Input:\n\
  2\n3\n474\n2 1 1\n34\n6311861109697810998905373107116111\n10 4 25\n\nOutput:\n2\n\
  1\n\n-----Explanation-----\nTest case 1. \nSince only 1 separator can be placed,\
  \ we can only have 2 possibilities:\n\na. 4 | 74\n\nThe GCD in this case is 2.\n\
  \nb. 47 | 4\n\nThe GCD in this case is 1.\n\nHence, the maximum GCD is 2.\nTest\
  \ case 2.\n\nOne of the optimal partitions is:\n63|118|61|109|69|78|109|98|90|53|73|107|116|111\n\
  Bonus: Decode the above partition to unlock a hidden treasure."
"vc-preamble": "import Imports.AllImports\n\ndef gcd (a b : Nat) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_max_gcd (s : String) (m x y : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem gcd_properties (a b : Int) (h : b ≠ 0) :\n  let g := gcd a.natAbs\
  \ b.natAbs\n  g > 0 ∧ a.natAbs % g = 0 ∧ b.natAbs % g = 0 :=\n  sorry\n\n\ntheorem\
  \ solve_max_gcd_basic_properties\n  (s : String) (m x y : Nat) \n  (h1 : s.length\
  \ > 0) \n  (h2 : s.length ≤ 10)\n  (h3 : m ≤ 5) \n  (h4 : m > 0)\n  (h5 : x ≤ 3)\n\
  \  (h6 : y ≤ 3)\n  (h7 : x ≤ y) :\n  let result := solve_max_gcd s m x y\n  result\
  \ ≥ 0 ∧ \n  result ≤ (sorry) -- max of all valid partition numbers\n  :=\n  sorry\
  \ \n\n\ntheorem solve_max_gcd_partition_bounds \n  (s : String)\n  (h1 : s.length\
  \ > 0)\n  (h2 : s.length ≤ 5) :\n  let m := s.length\n  let full_partition := solve_max_gcd\
  \ s m 0 m\n  let single_partition := solve_max_gcd s m 0 0\n  full_partition ≥ 0\
  \ ∧\n  (single_partition = sorry ∨ single_partition = 0) -- equal to integer value\
  \ of s or 0\n  :=\n  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
