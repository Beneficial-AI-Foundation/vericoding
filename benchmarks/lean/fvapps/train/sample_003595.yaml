"vc-description": "## Task\n\nYou have to write three functions namely - `PNum, GPNum\
  \ and SPNum` (JS, Coffee), `p_num, g_p_num and s_p_num` (Python and Ruby), `pNum,\
  \ gpNum and spNum` (Java, C#), `p-num, gp-num and sp-num` (Clojure) - to check whether\
  \ a given argument `n` is a Pentagonal, Generalized Pentagonal, or Square Pentagonal\
  \ Number, and return `true` if it is and `false` otherwise.\n\n### Description\n\
  \n\n\n\n`Pentagonal Numbers` - The nth pentagonal number Pn is the number of distinct\
  \ dots in a pattern of dots consisting of the outlines of regular pentagons with\
  \ sides up to n dots (means the side contains n number of dots), when the pentagons\
  \ are overlaid so that they share one corner vertex.\n\n\n> First few Pentagonal\
  \ Numbers are: 1, 5, 12, 22...\n\n`Generalized Pentagonal Numbers` - All the Pentagonal\
  \ Numbers along with the number of dots inside the outlines of all the pentagons\
  \ of a pattern forming a pentagonal number pentagon are called Generalized Pentagonal\
  \ Numbers.\n\n> First few Generalized Pentagonal Numbers are: 0, 1, 2, 5, 7, 12,\
  \ 15, 22...\n\n`Square Pentagonal Numbers` - The numbers which are Pentagonal Numbers\
  \ and are also a perfect square are called Square Pentagonal Numbers. \n\n> First\
  \ few are: 1, 9801, 94109401...\n \n### Examples\n\n#### Note: \n* Pn = Nth Pentagonal\
  \ Number\n* Gpn = Nth Generalized Pentagonal Number\n\n\n\n    \n     ^        ^\
  \          ^             ^                 ^\n    P1=1     P2=5      P3=12     \
  \    P4=22             P5=35   //Total number of distinct dots used in the Pattern\n\
  \    Gp2=1    Gp4=5     Gp6=12        Gp8=22                    //All the Pentagonal\
  \ Numbers are Generalised\n             Gp1=0     Gp3=2         Gp5=7          \
  \   Gp7=15  //Total Number of dots inside the outermost Pentagon"
"vc-preamble": "import Imports.AllImports\n\ndef p_num (n : Int) : Bool := sorry\n\
  def g_p_num (n : Int) : Bool := sorry\n\ndef s_p_num (n : Int) : Bool := sorry\n\
  \n/-- Helper function for pentagonal numbers -/\n\ndef pen (n : Int) : Int := (3*n*n\
  \ - n) / 2\n\n/-- Helper function for generalized pentagonal numbers -/"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def gen_pen (n : Int) : Int :=\n  if n >= 0 then (3*n*n - n) /\
  \ 2 else (3*n*n + n) / 2\n"
"vc-theorems": "theorem g_p_num_for_gen_pen (n : Int) : g_p_num (gen_pen n) = true\
  \ := sorry\n\ntheorem s_p_num_is_square_of_pentagonal_number {n : Int} (h : s_p_num\
  \ n = true) : \n  ∃ k : Int, \n    k * k = n ∧ \n    p_num k = true ∧\n    g_p_num\
  \ n = true := sorry\n\n\ntheorem non_square_not_s_p_num {n : Int} (h : ¬∃ k : Int,\
  \ k * k = n) : \n  s_p_num n = false := sorry\n\n/--\ninfo: False\n-/\n#guard_msgs\
  \ in\n#eval p_num 0\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval p_num 1\n\n/--\n\
  info: True\n-/\n#guard_msgs in\n#eval p_num 5\n\n/--\ninfo: False\n-/\n#guard_msgs\
  \ in\n#eval p_num 100\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval g_p_num 0\n\n\
  /--\ninfo: True\n-/\n#guard_msgs in\n#eval g_p_num 1\n\n/--\ninfo: True\n-/\n#guard_msgs\
  \ in\n#eval g_p_num 2\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval g_p_num 5\n\n\
  /--\ninfo: True\n-/\n#guard_msgs in\n#eval s_p_num 1\n\n/--\ninfo: True\n-/\n#guard_msgs\
  \ in\n#eval s_p_num 9801\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval s_p_num\
  \ 100\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
