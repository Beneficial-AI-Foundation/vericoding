"vc-description": "Farmer Feb has three fields with potatoes planted in them. He harvested\
  \ x potatoes from the first field, y potatoes from the second field and is yet to\
  \ harvest potatoes from the third field. Feb is very superstitious and believes\
  \ that if the sum of potatoes he harvests from the three fields is a prime number\
  \ (http://en.wikipedia.org/wiki/Prime_number), he'll make a huge profit. Please\
  \ help him by calculating for him the minimum number of potatoes that if harvested\
  \ from the third field will make the sum of potatoes prime. At least one potato\
  \ should be harvested from the third field.\n\n-----Input-----\nThe first line of\
  \ the input contains an integer T denoting the number of test cases. Each of the\
  \ next T lines contain 2 integers separated by single space: x and y.\n\n-----Output-----\n\
  For each test case, output a single line containing the answer.\n\n-----Constraints-----\n\
  - 1 ≤ T ≤ 1000\n- 1 ≤ x ≤ 1000\n- 1 ≤ y ≤ 1000\n\n-----Example-----\nInput:\n2\n\
  1 3\n4 3\n\nOutput:\n1\n4\n\n-----Explanation-----\n\nIn example case 1: the farmer\
  \ harvested a potato from the first field and 3 potatoes from the second field.\
  \ The sum is 4. If he is able to harvest a potato from the third field, that will\
  \ make the sum 5, which is prime. Hence the answer is 1(he needs one more potato\
  \ to make the sum of harvested potatoes prime.)"
"vc-preamble": "import Imports.AllImports\n\ndef isPrime (n : Nat) : Bool :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_min_potatoes (x y : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem find_min_potatoes_returns_prime_sum\n  (x y : Nat) (h1 : x\
  \ > 0) (h2 : y > 0) (h3 : x ≤ 1000) (h4 : y ≤ 1000) :\n  let result := find_min_potatoes\
  \ x y\n  result ≥ 0 ∧ isPrime (x + y + result) = true := by\n  sorry\n\n\ntheorem\
  \ find_min_potatoes_with_equal_inputs\n  (x : Nat) (h1 : x > 0) (h2 : x ≤ 1000)\
  \ :\n  let result := find_min_potatoes x x\n  isPrime (2*x + result) = true := by\n\
  \  sorry\n\n\ntheorem find_min_potatoes_reasonable_bounds\n  (x y : Nat) (h1 : x\
  \ > 0) (h2 : y > 0) (h3 : x ≤ 100) (h4 : y ≤ 100) :\n  find_min_potatoes x y ≤ x\
  \ + y := by\n  sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval find_min_potatoes\
  \ 1 3\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval find_min_potatoes 4 3\n\n/--\n\
  info: 1\n-/\n#guard_msgs in\n#eval find_min_potatoes 1 1\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
