"vc-description": "You are given a string s, and an array of pairs of indices in the\
  \ string pairs where pairs[i] = [a, b] indicates 2 indices(0-indexed) of the string.\n\
  You can swap the characters at any pair of indices in the given pairs any number\
  \ of times.\nReturn the lexicographically smallest string that s can be changed\
  \ to after using the swaps.\n \nExample 1:\nInput: s = \"dcab\", pairs = [[0,3],[1,2]]\n\
  Output: \"bacd\"\nExplaination: \nSwap s[0] and s[3], s = \"bcad\"\nSwap s[1] and\
  \ s[2], s = \"bacd\"\n\nExample 2:\nInput: s = \"dcab\", pairs = [[0,3],[1,2],[0,2]]\n\
  Output: \"abcd\"\nExplaination: \nSwap s[0] and s[3], s = \"bcad\"\nSwap s[0] and\
  \ s[2], s = \"acbd\"\nSwap s[1] and s[2], s = \"abcd\"\nExample 3:\nInput: s = \"\
  cba\", pairs = [[0,1],[1,2]]\nOutput: \"abc\"\nExplaination: \nSwap s[0] and s[1],\
  \ s = \"bca\"\nSwap s[1] and s[2], s = \"bac\"\nSwap s[0] and s[1], s = \"abc\"\n\
  \n \nConstraints:\n\n1 <= s.length <= 10^5\n0 <= pairs.length <= 10^5\n0 <= pairs[i][0],\
  \ pairs[i][1] < s.length\ns only contains lower case English letters."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def smallest_string_with_swaps (s : String) (pairs : List (List\
  \ Nat)) : String :=\n  sorry\n"
"vc-theorems": "theorem result_length_matches_input (s : String) (pairs : List (List\
  \ Nat)) :\n  pairs.all (fun p => p.length = 2 ∧ p[0]! < s.length ∧ p[1]! < s.length)\
  \ →\n  (smallest_string_with_swaps s pairs).length = s.length :=\n  sorry\n\n\n\
  theorem empty_pairs_returns_same_string (s : String) :\n  smallest_string_with_swaps\
  \ s [] = s :=\n  sorry\n\n\ntheorem result_is_permutation (s : String) (pairs :\
  \ List (List Nat)) :\n  pairs.all (fun p => p.length = 2 ∧ p[0]! < s.length ∧ p[1]!\
  \ < s.length) →\n  ∃ perm : List Char → List Char, \n    perm (smallest_string_with_swaps\
  \ s pairs).toList = s.toList ∧\n    ∀ x y, perm x = perm y → x = y :=\n  sorry\n\
  \n\ntheorem result_is_lex_minimal (s : String) (pairs : List (List Nat)) :\n  pairs.all\
  \ (fun p => p.length = 2 ∧ p[0]! < s.length ∧ p[1]! < s.length) →\n  ∀ i j, i <\
  \ s.length → j < s.length →\n  pairs.any (fun p => p[0]! = i ∧ p[1]! = j) →\n  let\
  \ result := smallest_string_with_swaps s pairs\n  result.data[i]! ≤ result.data[j]!\
  \ :=\n  sorry\n\n/--\ninfo: 'bacd'\n-/\n#guard_msgs in\n#eval smallest_string_with_swaps\
  \ \"dcab\" [[0, 3], [1, 2]]\n\n/--\ninfo: 'abcd'\n-/\n#guard_msgs in\n#eval smallest_string_with_swaps\
  \ \"dcab\" [[0, 3], [1, 2], [0, 2]]\n\n/--\ninfo: 'abc'\n-/\n#guard_msgs in\n#eval\
  \ smallest_string_with_swaps \"cba\" [[0, 1], [1, 2]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
