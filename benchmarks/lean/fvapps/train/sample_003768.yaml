"vc-description": "Given a triangle of consecutive odd numbers:\n\n```\n         \
  \    1\n          3     5\n       7     9    11\n   13    15    17    19\n21   \
  \ 23    25    27    29\n...\n```\n\nfind the triangle's row knowing its index (the\
  \ rows are 1-indexed), e.g.:\n\n```\nodd_row(1)  ==  [1]\nodd_row(2)  ==  [3, 5]\n\
  odd_row(3)  ==  [7, 9, 11]\n```\n\n**Note**: your code should be optimized to handle\
  \ big inputs.\n\n___\n\nThe idea for this kata was taken from this kata: [Sum of\
  \ odd numbers](https://www.codewars.com/kata/sum-of-odd-numbers)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def odd_row (n : Nat) : List Nat := sorry\n\ntheorem odd_row_length\
  \ (n : Nat) (h : n > 0) :\n  (odd_row n).length = n := sorry\n"
"vc-theorems": "theorem odd_row_all_odd (n : Nat) (h : n > 0) :\n  ∀ x ∈ odd_row n,\
  \ x % 2 = 1 := sorry\n\n\ntheorem odd_row_sequential_differences (n : Nat) (h :\
  \ n > 0) :\n  ∀ i, i < (odd_row n).length - 1 → \n    ((odd_row n)[i+1]? >>= fun\
  \ x => (odd_row n)[i]? >>= fun y => some (x - y)) = some 2 := sorry\n\n\ntheorem\
  \ odd_row_first_element (n : Nat) (h : n > 0) :\n  (odd_row n).head? = some (n *\
  \ (n-1) + 1) := sorry\n\n/--\ninfo: [1]\n-/\n#guard_msgs in\n#eval odd_row 1\n\n\
  /--\ninfo: [3, 5]\n-/\n#guard_msgs in\n#eval odd_row 2\n\n/--\ninfo: [7, 9, 11]\n\
  -/\n#guard_msgs in\n#eval odd_row 3\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
