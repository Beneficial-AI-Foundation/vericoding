"vc-description": "Write a function that takes a list comprised of other lists of\
  \ integers and returns the sum of all numbers that appear in two or more lists in\
  \ the input list.  Now that might have sounded confusing, it isn't:\n```python\n\
  repeat_sum([[1, 2, 3],[2, 8, 9],[7, 123, 8]])\n>>> sum of [2, 8]\nreturn 10\n\n\
  repeat_sum([[1], [2], [3, 4, 4, 4], [123456789]])\n>>> sum of []\nreturn 0\n\nrepeat_sum([[1,\
  \ 8, 8], [8, 8, 8], [8, 8, 8, 1]])\nsum of [1,8]\nreturn 9\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def repeat_sum (lists : List (List Nat)) : Nat := sorry\n\ntheorem\
  \ repeat_sum_non_negative (lists : List (List Nat)) :\n  repeat_sum lists ≥ 0 :=\
  \ sorry\n"
"vc-theorems": "theorem repeat_sum_disjoint_zero (lists : List (List Nat)) \n  (h\
  \ : ∀ i j n, i < j → j < lists.length → \n    n ∈ (lists.get! i) → ¬ n ∈ (lists.get!\
  \ j)) :\n  repeat_sum lists = 0 := sorry\n\n\ntheorem repeat_sum_empty (lists :\
  \ List (List Nat)) :\n  lists = [] → repeat_sum lists = 0 := sorry\n\n/--\ninfo:\
  \ 10\n-/\n#guard_msgs in\n#eval repeat_sum [[1, 2, 3], [2, 8, 9], [7, 123, 8]]\n\
  \n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval repeat_sum [[1], [2], [3, 4, 4, 4], [123456789]]\n\
  \n/--\ninfo: 9\n-/\n#guard_msgs in\n#eval repeat_sum [[1, 8, 8], [8, 8, 8], [8,\
  \ 8, 8, 1]]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
