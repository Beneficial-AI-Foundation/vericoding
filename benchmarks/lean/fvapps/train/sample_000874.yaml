"vc-description": "Chef wants to teach a lesson of sharing to the students.\nThere\
  \ are $N$ students (numbered from $1$ to $N$ from left to right) who are asked to\
  \ stand in a row. Initially Chef gave $A$$i$ candies to the $i$$th$ child. In one\
  \ operation any child can give any number of candies to the child standing to his\
  \ immediate left (i.e. $i$$th$ child can give any amount of candies to the $(i-1)$$th$\
  \ child. In particular 1st child cannot give his candies to anyone).  \nHe asked\
  \ them to minimize the maximum value of candies a student can possess after performing\
  \ any number of operations (possibly zero). \nHelp the students finding such maximum\
  \ value.\n\n-----Input:-----\n- The first line of the input contains a single integer\
  \ $T$ denoting the number of test cases. The description of $T$ test cases follows.\n\
  - First line of each test case contains a single integer $N$ denoting the number\
  \ of students.\n- Second line contains $N$ space-separated integers $A$$1$,$A$$2$,$.....$\
  \ $A$$N$ denoting the initial amount of candies chef gave to them.\n\n-----Output:-----\n\
  - For each test case, print a single line containing one integer ― maximum value\
  \ after sharing.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq N\
  \ \\leq 10^5$\n- $0$ $\\leq$ $A$$i$ $\\leq$ $10^9$\n- Sum of $N$ over all Test Cases\
  \ does not exceed $10^5$\n\n-----Sample Input-----\n2 \n5 \n1 2 3 4 5 \n5\n5 4 3\
  \ 2 1\n\n-----Sample Output-----\n3 \n5  \n\n-----Explanation-----\n- \nFor First\
  \ Test Case:\nThe $5$$th$ student will give $2$ candies to $4$$th$ student and $4$$th$\
  \ will give $3$ candies to $3$$rd$ and $3$$rd$ will give $3$ candies to $2$$nd$\
  \ and $2$$nd$ will give $2$ candies to $1$$st$. So finally the number of candies\
  \ that they will have are \n$[3,3,3,3,3]$ and the value of maximum candies is $3$.\n\
  - \nFor Second Test Case:\nSharing to the left student will not change the maximum\
  \ value as $1$$st$ cannot share to anyone. So the maximum value will remain $5$."
"vc-preamble": "import Imports.AllImports\n\ndef List.sum : List Nat → Nat \n  | []\
  \ => 0\n  | (x::xs) => x + xs.sum\n\n\ndef List.maximum : List Nat → Nat\n  | []\
  \ => 0\n  | [x] => x \n  | (x::xs) => max x (xs.maximum)\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_candy_sharing (n : Nat) (arr : List Nat) : Nat :=\n \
  \ sorry\n"
"vc-theorems": "theorem solve_candy_sharing_bounds \n  {n : Nat} {arr : List Nat}\n\
  \  (h1 : n > 0)\n  (h2 : arr.length = n)\n  (h3 : ∀ x ∈ arr, x > 0 ∧ x ≤ 1000)\n\
  \  : solve_candy_sharing n arr ≥ (arr.sum + n - 1) / n ∧ \n    solve_candy_sharing\
  \ n arr ≤ arr.maximum :=\n  sorry\n\n\ntheorem solve_candy_sharing_single\n  (n\
  \ : Nat)\n  (h1 : n > 0)\n  (h2 : n ≤ 100)\n  : solve_candy_sharing 1 [n] = n :=\n\
  \  sorry\n\n\ntheorem solve_candy_sharing_multiple_elements\n  {n : Nat} {arr :\
  \ List Nat}\n  (h1 : arr.length = n)\n  (h2 : n ≥ 2)\n  (h3 : ∀ x ∈ arr, x > 0 ∧\
  \ x ≤ 1000)\n  : solve_candy_sharing n arr > 0 :=\n  sorry\n\n/--\ninfo: 3\n-/\n\
  #guard_msgs in\n#eval solve_candy_sharing 5 arr1.copy()\n\n/--\ninfo: 5\n-/\n#guard_msgs\
  \ in\n#eval solve_candy_sharing 5 arr2.copy()\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n\
  #eval solve_candy_sharing 3 arr3.copy()\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
