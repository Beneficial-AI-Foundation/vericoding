"vc-description": "Bob just learned about bitwise operators. Since Alice is an expert,\
  \ she decided to play a game, she will give a number $x$ to Bob and will ask some\
  \ questions:\nThere will be 4 different kinds of queries:-\n- \nAlice gives an integer\
  \ $i$ and Bob has to report the status of the $i^{th}$ bit in $x$, the answer is\
  \ $\"ON\"$ if it is on else $\"OFF\"$.\n- \nAlice gives an integer $i$ and Bob has\
  \ to turn on the $i^{th}$ bit in $x$.\n- \nAlice gives an integer $i$ and Bob has\
  \ to turn off the $i^{th}$ bit in $x$.\n- \nAlice gives two integers $p$ and $q$\
  \ and in the binary representation of $x$ Bob has to swap the $p^{th}$ and the $q^{th}$\
  \ bits.\nThe value of $x$ changes after any update operation.\npositions $i$, $p$,\
  \ and $q$ are always counted from the right or from the least significant bit.\n\
  If anyone of $i$, $p$, or $q$ is greater than the number of bits in the binary representation\
  \ of $x$, consider $0$ at that position.\n\n-----Input:-----\n- First-line will\
  \ contain $T$, the number of test cases. Then the test cases follow. \n- the first\
  \ line of each test case contains two space-separated integers $x, Q$.\n- $2Q$ lines\
  \ follow.\n- first line is an integer, the query type.\n- for each query of type\
  \ 1 to 3, there will be the integer $i$\n- for the query of type 4, there will be\
  \ two space-separated integers, the integers $p, q$\n\n-----Output:-----\nFor the\
  \ queries of the first kind, print $\"ON\"$ or $\"OFF\"$.\n\n-----Constraints-----\n\
  - $1 \\leq T \\leq 10^3$\n- $1 \\leq x \\leq 10^9$\n- $1 \\leq Q \\leq 10^3$\n-\
  \ $1 \\leq i,p,q \\leq 30$\n\n-----Sample Input-----\n1\n2 2\n2 \n1\n1 \n1\n\n-----Sample\
  \ Output:-----\nON\n\n-----EXPLANATION:-----\nthe binary representation of 2 is\
  \ 10\nfor query 1, we just have to update x to 11 (or 3 in decimal).\nfor the next\
  \ query, x is now 3 or 11 in binary so the answer is ON."
"vc-preamble": "import Imports.AllImports\n\ndef process_bit_queries (x : Nat) (queries\
  \ : List (List Nat)) : List String := sorry\n\ntheorem binary_conversion_preserves_number\
  \ (x : Nat) (h : x < 2^64) (pos : Nat) \n(h2 : pos > 0 ∧ pos < 64) :\n  process_bit_queries\
  \ x [[1, pos]] = \n    [if x &&& (1 <<< (pos - 1)) ≠ 0 then \"ON\" else \"OFF\"\
  ] := sorry\n\n\n\n\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def countOnes (n : Nat) : Nat := sorry \n\ndef drop {α} (n : Nat)\
  \ (xs : List α) : List α := sorry"
"vc-theorems": ""
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
