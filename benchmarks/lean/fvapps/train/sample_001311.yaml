"vc-description": "Chef Al Gorithm was reading a book about climate and oceans when\
  \ he encountered the word “glaciological”. He thought it was quite curious, because\
  \ it has the following interesting property: For every two letters in the word,\
  \ if the first appears x times and the second appears y times, then |x - y| ≤ 1.\n\
  Chef Al was happy about this and called such words 1-good words. He also generalized\
  \ the concept: He said a word was K-good if for every two letters in the word, if\
  \ the first appears x times and the second appears y times, then |x - y| ≤ K.\n\
  Now, the Chef likes K-good words a lot and so was wondering: Given some word w,\
  \ how many letters does he have to remove to make it K-good?\n\n-----Input-----\n\
  The first line of the input contains an integer T denoting the number of test cases.\
  \ The description of T test cases follows.\nEach test case consists of a single\
  \ line containing two things: a word w and an integer K, separated by a space.\n\
  \n-----Output-----\nFor each test case, output a single line containing a single\
  \ integer: the minimum number of letters he has to remove to make the word K-good.\n\
  \n-----Constraints-----\n- 1 ≤ T ≤ 30\n- 1 ≤ |w| ≤ 105\n- 0 ≤ K ≤ 105\n- w contains\
  \ only lowercase English letters.\n\n-----Example-----\nInput:\n4\nglaciological\
  \ 1\nteammate 0\npossessions 3\ndefenselessness 3\n\nOutput:\n0\n0\n1\n2\n\n-----Explanation-----\n\
  Example case 1. The word “glaciological” is already 1-good, so the Chef doesn't\
  \ have to remove any letter.\nExample case 2. Similarly, “teammate” is already 0-good.\n\
  Example case 3. The word “possessions” is 4-good. To make it 3-good, the Chef can\
  \ remove the last s to make “possession”.\nExample case 4. The word “defenselessness”\
  \ is 4-good. To make it 3-good, Chef Al can remove an s and an e to make, for example,\
  \ “defenslesness”. Note that the word doesn't have to be a valid English word."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def min_remove_for_kgood (s : String) (k : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem min_remove_nonnegative (s : String) (k : Nat) :\n  min_remove_for_kgood\
  \ s k ≥ 0 :=\nsorry\n\n\ntheorem min_remove_bounded (s : String) (k : Nat) :\n \
  \ min_remove_for_kgood s k ≤ s.length :=\nsorry\n\n\n\n\ntheorem min_remove_large_k\
  \ (s : String) (k : Nat) :\n  s.length > 0 →\n  k ≥ s.length →\n  min_remove_for_kgood\
  \ s k = 0 :=\nsorry\n\n\ntheorem min_remove_single_char (s : String) :\n  s.length\
  \ = 1 →\n  min_remove_for_kgood s 0 = 0 :=\nsorry\n\n\n\n\ntheorem min_remove_empty_string\
  \ :\n  ∀ k, min_remove_for_kgood \"\" k = 0 :=\nsorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
