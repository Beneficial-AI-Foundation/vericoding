"vc-description": "You need to find the largest value in each row of a binary tree.\n\
  \nExample:\n\nInput: \n\n          1\n         / \\\n        3   2\n       / \\\
  \   \\  \n      5   3   9 \n\nOutput: [1, 3, 9]"
"vc-preamble": "import Imports.AllImports\n\ndef largest_values : TreeNode α → List\
  \ α := sorry\n\ndef get_height : TreeNode α → Nat := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def get_level_nodes : TreeNode α → Nat → List α := sorry\n\ndef\
  \ list_max (l : List α) : α := \n  List.foldl max default l\n"
"vc-theorems": "theorem empty_tree_gives_empty_list :\n  largest_values (@TreeNode.nil\
  \ α) = [] := sorry\n\n\ntheorem single_node_gives_singleton (x : α) :\n  largest_values\
  \ (@TreeNode.node α x TreeNode.nil TreeNode.nil) = [x] := sorry\n\n\ntheorem result_length_matches_height\
  \ (t : TreeNode α) :\n  List.length (largest_values t) = get_height t := sorry\n\
  \n\ntheorem level_max_appears_in_nodes (t : TreeNode α) (level : Nat) \n  (h : level\
  \ < List.length (largest_values t)) :\n  List.get! (largest_values t) level = list_max\
  \ (get_level_nodes t level) := sorry\n\n/--\ninfo: [1]\n-/\n#guard_msgs in\n#eval\
  \ largest_values TreeNode(1)\n\n/--\ninfo: []\n-/\n#guard_msgs in\n#eval largest_values\
  \ None\n\n/--\ninfo: [1, 3, 9]\n-/\n#guard_msgs in\n#eval largest_values TreeNode(1)\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
