"vc-description": "You are given an integer array A.  From some starting index, you\
  \ can make a series of jumps.  The (1st, 3rd, 5th, ...) jumps in the series are\
  \ called odd numbered jumps, and the (2nd, 4th, 6th, ...) jumps in the series are\
  \ called even numbered jumps.\nYou may from index i jump forward to index j (with\
  \ i < j) in the following way:\n\nDuring odd numbered jumps (ie. jumps 1, 3, 5,\
  \ ...), you jump to the index j such that A[i] <= A[j] and A[j] is the smallest\
  \ possible value.  If there are multiple such indexes j, you can only jump to the\
  \ smallest such index j.\nDuring even numbered jumps (ie. jumps 2, 4, 6, ...), you\
  \ jump to the index j such that A[i] >= A[j] and A[j] is the largest possible value. \
  \ If there are multiple such indexes j, you can only jump to the smallest such index\
  \ j.\n(It may be the case that for some index i, there are no legal jumps.)\n\n\
  A starting index is good if, starting from that index, you can reach the end of\
  \ the array (index A.length - 1) by jumping some number of times (possibly 0 or\
  \ more than once.)\nReturn the number of good starting indexes.\n \nExample 1:\n\
  Input: [10,13,12,14,15]\nOutput: 2\nExplanation: \nFrom starting index i = 0, we\
  \ can jump to i = 2 (since A[2] is the smallest among A[1], A[2], A[3], A[4] that\
  \ is greater or equal to A[0]), then we can't jump any more.\nFrom starting index\
  \ i = 1 and i = 2, we can jump to i = 3, then we can't jump any more.\nFrom starting\
  \ index i = 3, we can jump to i = 4, so we've reached the end.\nFrom starting index\
  \ i = 4, we've reached the end already.\nIn total, there are 2 different starting\
  \ indexes (i = 3, i = 4) where we can reach the end with some number of jumps.\n\
  \n\nExample 2:\nInput: [2,3,1,1,4]\nOutput: 3\nExplanation: \nFrom starting index\
  \ i = 0, we make jumps to i = 1, i = 2, i = 3:\n\nDuring our 1st jump (odd numbered),\
  \ we first jump to i = 1 because A[1] is the smallest value in (A[1], A[2], A[3],\
  \ A[4]) that is greater than or equal to A[0].\n\nDuring our 2nd jump (even numbered),\
  \ we jump from i = 1 to i = 2 because A[2] is the largest value in (A[2], A[3],\
  \ A[4]) that is less than or equal to A[1].  A[3] is also the largest value, but\
  \ 2 is a smaller index, so we can only jump to i = 2 and not i = 3.\n\nDuring our\
  \ 3rd jump (odd numbered), we jump from i = 2 to i = 3 because A[3] is the smallest\
  \ value in (A[3], A[4]) that is greater than or equal to A[2].\n\nWe can't jump\
  \ from i = 3 to i = 4, so the starting index i = 0 is not good.\n\nIn a similar\
  \ manner, we can deduce that:\nFrom starting index i = 1, we jump to i = 4, so we\
  \ reach the end.\nFrom starting index i = 2, we jump to i = 3, and then we can't\
  \ jump anymore.\nFrom starting index i = 3, we jump to i = 4, so we reach the end.\n\
  From starting index i = 4, we are already at the end.\nIn total, there are 3 different\
  \ starting indexes (i = 1, i = 3, i = 4) where we can reach the end with some number\
  \ of jumps.\n\n\nExample 3:\nInput: [5,1,3,4,2]\nOutput: 3\nExplanation: \nWe can\
  \ reach the end from starting indexes 1, 2, and 4.\n\n\n\n \nNote:\n\n1 <= A.length\
  \ <= 20000\n0 <= A[i] < 100000"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def oddEvenJumps (arr : List Int) : Nat :=\n  sorry\n"
"vc-theorems": "theorem oddEvenJumps_output_range (arr : List Int) (h : arr ≠ [])\
  \ : \n  let result := oddEvenJumps arr\n  1 ≤ result ∧ result ≤ arr.length := sorry\n\
  \n\ntheorem oddEvenJumps_single_element (x : Int) :\n  oddEvenJumps [x] = 1 := sorry\n\
  \n\ntheorem oddEvenJumps_decreasing {arr : List Int} (h₁ : arr ≠ [])\n  (h₂ : ∀\
  \ (i j : Fin arr.length), i.val < j.val → arr[i] > arr[j]) :\n  oddEvenJumps arr\
  \ ≥ 1 := sorry\n\n\ntheorem oddEvenJumps_all_equal (x : Int) (n : Nat) (h : n >\
  \ 0) :\n  oddEvenJumps (List.replicate n x) = n := sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs\
  \ in\n#eval oddEvenJumps [10, 13, 12, 14, 15]\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n\
  #eval oddEvenJumps [2, 3, 1, 1, 4]\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval oddEvenJumps\
  \ [5, 1, 3, 4, 2]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
