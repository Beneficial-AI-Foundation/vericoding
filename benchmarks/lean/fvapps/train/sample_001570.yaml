"vc-description": "If n is the numerator and d the denominator of a fraction, that\
  \ fraction is defined a (reduced) proper fraction if and only if GCD(n,d)==1.\n\n\
  For example `5/16` is a proper fraction, while `6/16` is not, as both 6 and 16 are\
  \ divisible by 2, thus the fraction can be reduced to `3/8`.\n\nNow, if you consider\
  \ a given number d, how many proper fractions can be built using d as a denominator?\n\
  \nFor example, let's assume that d is 15: you can build a total of 8 different proper\
  \ fractions between 0 and 1 with it: 1/15, 2/15, 4/15, 7/15, 8/15, 11/15, 13/15\
  \ and 14/15.\n\nYou are to build a function that computes how many proper fractions\
  \ you can build with a given denominator:\n```python\nproper_fractions(1)==0\nproper_fractions(2)==1\n\
  proper_fractions(5)==4\nproper_fractions(15)==8\nproper_fractions(25)==20\n```\n\
  \nBe ready to handle big numbers.\n\nEdit: to be extra precise, the term should\
  \ be \"reduced\" fractions, thanks to [girianshiido](http://www.codewars.com/users/girianshiido)\
  \ for pointing this out and sorry for the use of an improper word :)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def proper_fractions (n: Nat) : Nat := sorry\n\ndef count_coprime_nums\
  \ (n: Nat) : Nat := sorry\n"
"vc-theorems": "theorem proper_fractions_matches_count (n: Nat) (h: n ≥ 1) :\n  proper_fractions\
  \ n = count_coprime_nums n := sorry\n\n\ntheorem proper_fractions_bounds (n: Nat)\
  \ (h: n ≥ 2) :\n  proper_fractions n < n ∧ proper_fractions n ≥ 0 := sorry\n\n\n\
  theorem proper_fractions_one :\n  proper_fractions 1 = 0 := sorry\n\n/--\ninfo:\
  \ 0\n-/\n#guard_msgs in\n#eval proper_fractions 1\n\n/--\ninfo: 8\n-/\n#guard_msgs\
  \ in\n#eval proper_fractions 15\n\n/--\ninfo: 20\n-/\n#guard_msgs in\n#eval proper_fractions\
  \ 25\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
