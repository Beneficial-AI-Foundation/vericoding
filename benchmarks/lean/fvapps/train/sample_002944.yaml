"vc-description": "The `depth` of an integer `n` is defined to be how many multiples\
  \ of `n` it is necessary to compute before all `10` digits have appeared at least\
  \ once in some multiple. \n\nexample:\n```\nlet see n=42\n\nMultiple         value\
  \         digits     comment\n42*1              42            2,4 \n42*2       \
  \       84             8         4 existed\n42*3              126           1,6\
  \        2 existed\n42*4              168            -         all existed\n42*5\
  \              210            0         2,1 existed\n42*6              252     \
  \       5         2 existed\n42*7              294            9         2,4 existed\n\
  42*8              336            3         6 existed \n42*9              378   \
  \         7         3,8 existed\n\n```\nLooking at the above table under `digits`\
  \ column you can find all the digits from `0` to `9`, Hence it required `9` multiples\
  \ of `42` to get all the digits. So the depth of `42` is `9`. Write a function named\
  \ `computeDepth` which computes the depth of its integer argument.Only positive\
  \ numbers greater than zero will be passed as an input."
"vc-preamble": "import Imports.AllImports\n\ndef compute_depth (n : Nat) : Nat :=\
  \ sorry\n\ntheorem compute_depth_positive (n : Nat) (h : n > 0) : \n  compute_depth\
  \ n > 0 := sorry\n\n\ndef has_digit (n : Nat) (d : Nat) : Prop := sorry\n\ndef has_all_digits\
  \ (n : Nat) : Prop :=\n  ∀ d, d < 10 → has_digit n d\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def list_product (nums : List Nat) (n : Nat) : Nat := sorry\n\n\
  theorem compute_depth_contains_all_digits (n : Nat) (h : n > 0) :\n  ∃ nums : List\
  \ Nat, \n    nums.length = compute_depth n ∧ \n    has_all_digits (list_product\
  \ nums n) := sorry\n"
"vc-theorems": "theorem compute_depth_is_minimal (n : Nat) (h : n > 0) :\n  ∀ k <\
  \ compute_depth n, \n    ¬∃ nums : List Nat,\n      nums.length = k ∧\n      has_all_digits\
  \ (list_product nums n) := sorry\n\n\ntheorem compute_depth_upper_bound (n : Nat)\
  \ (h : n > 0) (h2 : n ≤ 100) :\n  compute_depth n ≤ n * 100 := sorry\n\n\ntheorem\
  \ powers_of_ten_depth_positive :\n  ∀ i : Nat, compute_depth (10^i) > 0 := sorry\n\
  \n/--\ninfo: 9\n-/\n#guard_msgs in\n#eval compute_depth 42\n\n/--\ninfo: 8\n-/\n\
  #guard_msgs in\n#eval compute_depth 13\n\n/--\ninfo: 36\n-/\n#guard_msgs in\n#eval\
  \ compute_depth 25\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
