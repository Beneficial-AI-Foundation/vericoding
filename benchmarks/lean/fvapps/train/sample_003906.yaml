"vc-description": "## Emotional Sort ( ︶︿︶)\n\nYou'll have a function called \"**sortEmotions**\"\
  \ that will return an array of **emotions** sorted. It has two parameters, the first\
  \ parameter called \"**arr**\" will expect an array of **emotions** where an **emotion**\
  \ will be one of the following:\n\n- **:D** -> Super Happy\n- **:)** -> Happy\n\
  - **:|** -> Normal\n- **:(** -> Sad\n- **T\\_T** -> Super Sad\n\nExample of the\
  \ array:``[ 'T_T', ':D', ':|', ':)', ':(' ]``\n\nAnd the second parameter is called\
  \ \"**order**\", if this parameter is **true** then the order of the emotions will\
  \ be descending (from **Super Happy** to **Super Sad**) if it's **false** then it\
  \ will be ascending (from **Super Sad** to **Super Happy**)\n\nExample if **order**\
  \ is true with the above array: ``[ ':D', ':)', ':|', ':(', 'T_T' ]``\n\n- Super\
  \ Happy -> Happy -> Normal -> Sad -> Super Sad\n\nIf **order** is false: ``[ 'T_T',\
  \ ':(', ':|', ':)', ':D' ]``\n\n- Super Sad -> Sad -> Normal -> Happy -> Super Happy\n\
  \nExample:\n```\narr = [':D', ':|', ':)', ':(', ':D']\nsortEmotions(arr, true) //\
  \ [ ':D', ':D', ':)', ':|', ':(' ]\nsortEmotions(arr, false) // [ ':(', ':|', ':)',\
  \ ':D', ':D' ]\n\n```\n\n**More in test cases!**\n\nNotes:\n- The array could be\
  \ empty, in that case return the same empty array ¯\\\\\\_( ツ )\\_/¯\n- All **emotions**\
  \ will be valid\n\n## Enjoy! (づ｡◕‿‿◕｡)づ"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def valid_emotions := [\":D\", \":)\", \":|\", \":(\", \"T_T\"\
  ]\n\ndef sort_emotions (emotions : List String) (ascending : Bool) : List String\
  \ :=\n  sorry\n"
"vc-theorems": "theorem sort_emotions_length_preserved \n  (emotions : List String)\
  \ (ascending : Bool) : \n  List.length (sort_emotions emotions ascending) = List.length\
  \ emotions :=\n  sorry\n\n\ntheorem sort_emotions_elements_preserved \n  (emotions\
  \ : List String) (ascending : Bool) :\n  List.all (sort_emotions emotions ascending)\
  \ (· ∈ emotions) ∧ \n  List.all emotions (· ∈ sort_emotions emotions ascending)\
  \ :=\n  sorry\n\n\ntheorem sort_emotions_ascending_ordered\n  (emotions : List String)\
  \ (h : List.length emotions > 1) :\n  let result := sort_emotions emotions true\n\
  \  ∀ i, ∀ h : i + 1 < result.length,\n    let idx₁ := ⟨i, Nat.lt_trans (Nat.lt_succ_self\
  \ i) h⟩\n    let idx₂ := ⟨i + 1, h⟩\n    let pos₁ := valid_emotions.indexOf (result.get\
  \ idx₁)\n    let pos₂ := valid_emotions.indexOf (result.get idx₂)\n    pos₁ ≤ pos₂\
  \ :=\n  sorry\n\n\ntheorem sort_emotions_descending_ordered\n  (emotions : List\
  \ String) (h : List.length emotions > 1) :\n  let result := sort_emotions emotions\
  \ false\n  ∀ i, ∀ h : i + 1 < result.length,\n    let idx₁ := ⟨i, Nat.lt_trans (Nat.lt_succ_self\
  \ i) h⟩\n    let idx₂ := ⟨i + 1, h⟩\n    let pos₁ := valid_emotions.indexOf (result.get\
  \ idx₁)\n    let pos₂ := valid_emotions.indexOf (result.get idx₂)\n    pos₁ ≥ pos₂\
  \ :=\n  sorry\n\n\ntheorem sort_emotions_empty (ascending : Bool) :\n  sort_emotions\
  \ [] ascending = [] :=\n  sorry\n\n\ntheorem sort_emotions_single (emotion : String)\
  \ (ascending : Bool)\n  (h : emotion ∈ valid_emotions) :\n  sort_emotions [emotion]\
  \ ascending = [emotion] :=\n  sorry\n\n/--\ninfo: [':D', ':D', ':(', 'T_T']\n-/\n\
  #guard_msgs in\n#eval sort_emotions [\":D\", \"T_T\", \":D\", \":(\"] True\n\n/--\n\
  info: ['T_T', ':(', ':(', ':D']\n-/\n#guard_msgs in\n#eval sort_emotions [\"T_T\"\
  , \":D\", \":(\", \":(\"] False\n\n/--\ninfo: []\n-/\n#guard_msgs in\n#eval sort_emotions\
  \ [] True\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
