"vc-description": "With one die of 6 sides we will have six different possible results:```\
  \  1, 2, 3, 4, 5, 6``` .\n\nWith 2 dice of six sides, we will have 36 different\
  \ possible results:\n``` \n(1,1),(1,2),(2,1),(1,3),(3,1),(1,4),(4,1),(1,5),\n(5,1),\
  \ (1,6),(6,1),(2,2),(2,3),(3,2),(2,4),(4,2),\n(2,5),(5,2)(2,6),(6,2),(3,3),(3,4),(4,3),(3,5),(5,3),\n\
  (3,6),(6,3),(4,4),(4,5),(5,4),(4,6),(6,4),(5,5),\n(5,6),(6,5),(6,6)\n``` \nSo, with\
  \ 2 dice of 6 sides we get 36 different events.\n``` \n([6,6] ---> 36)\n``` \nBut\
  \ with 2 different dice we can get for this case, the same number of events.\nOne\
  \ die of ```4 sides```  and another of ```9 sides```  will produce the exact amount\
  \ of events.\n``` \n([4,9] ---> 36)\n``` \nWe say that the dice set ```[4,9]```\
  \ is equivalent to ```[6,6]``` because both produce the same number of events.\n\
  \nAlso we may have an amount of three dice producing the same amount of events.\
  \ It will be for:\n``` \n[4,3,3] ---> 36\n``` \n(One die of 4 sides and two dice\
  \ of 3 sides each)\n\nPerhaps you may think that the following set is equivalent:\
  \ ```[6,3,2]``` but unfortunately dice have a **minimum of three sides** (well,\
  \ really a \ntetrahedron with one empty side)\n\nThe task for this kata is to get\
  \ the amount of equivalent dice sets, having **2 dice at least**,for a given set.\n\
  \nFor example, for the previous case: [6,6] we will have 3 equivalent sets that\
  \ are: ``` [4, 3, 3], [12, 3], [9, 4]``` .\n\nYou may assume that dice are available\
  \ from 3 and above for any value up to an icosahedral die (20 sides).\n``` \n[5,6,4]\
  \ ---> 5 (they are [10, 4, 3], [8, 5, 3], [20, 6], [15, 8], [12, 10])\n``` \nFor\
  \ the cases we cannot get any equivalent set the result will be `0`.\nFor example\
  \ for the set `[3,3]` we will not have equivalent dice.\n\nRange of inputs for Random\
  \ Tests:\n``` \n3 <= sides <= 15\n2 <= dices <= 7\n``` \nSee examples in the corresponding\
  \ box.\n\nEnjoy it!!"
"vc-preamble": "import Imports.AllImports\n\ndef products (n : Nat) (k m : Nat) :\
  \ List (List Nat) := sorry\n\ndef eq_dice (dice : List Nat) : Nat := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def List.prod (l : List Nat) : Nat := sorry\n\n\n\ntheorem eq_dice_single_die\
  \ (n : Nat) \n  (h : 3 ≤ n ∧ n ≤ 20) :\n  eq_dice [n] = (products n 3 (min (n-1)\
  \ 20)).length := sorry\n\n\n"
"vc-theorems": "theorem eq_dice_small_pairs (d1 d2 : Nat)\n  (h1 : 3 ≤ d1 ∧ d1 ≤ 6)\n\
  \  (h2 : 3 ≤ d2 ∧ d2 ≤ 6) :\n  eq_dice [d1, d2] ≤ 5 := sorry\n\n\ntheorem eq_dice_threes\
  \ :\n  eq_dice [3, 3] = 0 := sorry\n\n\ntheorem eq_dice_four :\n  eq_dice [4] =\
  \ (products 4 3 3).length := sorry\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval eq_dice\
  \ [6, 6]\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval eq_dice [5, 6, 4]\n\n/--\ninfo:\
  \ 0\n-/\n#guard_msgs in\n#eval eq_dice [3, 3]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
