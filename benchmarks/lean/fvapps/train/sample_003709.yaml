"vc-description": "We need you to implement a method of receiving commands over a\
  \ network, processing the information and responding.\n\nOur device will send a\
  \ single packet to you containing data and an instruction which you must perform\
  \ before returning your reply.\n\nTo keep things simple, we will be passing a single\
  \ \"packet\" as a string. \nEach \"byte\" contained in the packet is represented\
  \ by 4 chars.\n\n\n\nOne packet is structured as below:\n```\nHeader  Instruction\
  \   Data1    Data2   Footer\n------   ------       ------   ------  ------\n H1H1\
  \     0F12         0012     0008    F4F4\n------   ------       ------   ------\
  \  ------\n\nThe string received in this case would be - \"H1H10F1200120008F4F4\"\
  \n\nInstruction: The calculation you should perform, always one of the below.\n\
  \            0F12 = Addition\n            B7A2 = Subtraction\n            C3D9 =\
  \ Multiplication\n            FFFF = This instruction code should be used to identify\
  \ your return value.\n``` \n- The Header and Footer are unique identifiers which\
  \ you must use to form your reply.\n\n- Data1 and Data2 are the decimal representation\
  \ of the data you should apply your instruction to. _i.e 0109 = 109._\n\n- Your\
  \ response must include the received header/footer, a \"FFFF\" instruction code,\
  \ and the result of your calculation stored in Data1.\n\n- Data2 should be zero'd\
  \ out to \"0000\".\n\n\n```\nTo give a complete example:\n\nIf you receive message\
  \ \"H1H10F1200120008F4F4\".\nThe correct response would be \"H1H1FFFF00200000F4F4\"\
  \n\n```\nIn the event that your calculation produces a negative result, the value\
  \ returned should be \"0000\", similarily if the value is above 9999 you should\
  \ return \"9999\".\n\n\nGoodluck, I look forward to reading your creative solutions!"
"vc-preamble": "import Imports.AllImports\n\ndef String.substring (s : String) (start\
  \ len : Nat) : String :=\n  sorry\n\n\ndef INSTRUCTIONS : Instruction → Operation\
  \ :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def communication_module (packet : String) : String :=\n  sorry\n"
"vc-theorems": "theorem communication_module_properties \n  (header : HeaderFooter)\
  \ (inst : Instruction)\n  (d1 d2 : Data) (footer : HeaderFooter) :\n  let packet\
  \ := header.value ++ inst.value ++ toString d1.value ++ toString d2.value ++ footer.value\n\
  \  let result := communication_module packet\n  let resultValue := String.toNat?\
  \ (result.substring 8 4)\n  String.length result = 20 ∧\n  result.startsWith header.value\
  \ ∧ \n  result.substring 4 4 = \"FFFF\" ∧\n  result.substring 12 4 = \"0000\" ∧\n\
  \  result.endsWith footer.value ∧\n  ∃ n : Nat, resultValue = some n ∧ \n  n < 10000\
  \ ∧\n  n = min 9999 (max 0 ((INSTRUCTIONS inst d1 d2).value)) :=\n  sorry\n\n\n\
  theorem addition_properties\n  (header : HeaderFooter) (d1 d2 : Data) (footer :\
  \ HeaderFooter) :\n  let packet := header.value ++ \"0F12\" ++ toString d1.value\
  \ ++ toString d2.value ++ footer.value  \n  let result := communication_module packet\n\
  \  let resultValue := String.toNat? (result.substring 8 4)\n  ∃ n : Nat, resultValue\
  \ = some n ∧\n  n = min 9999 (max 0 (d1.value + d2.value)) :=\n  sorry\n\n\ntheorem\
  \ packet_length_property\n  (packet : String)\n  (h : String.length packet = 20)\
  \ :\n  String.length (communication_module packet) = 20 :=\n  sorry\n\n/--\ninfo:\
  \ 'H1H1FFFF00200000F4F4'\n-/\n#guard_msgs in\n#eval communication_module \"H1H10F1200120008F4F4\"\
  \n\n/--\ninfo: 'Y2Y2FFFF00980000N5N5'\n-/\n#guard_msgs in\n#eval communication_module\
  \ \"Y2Y2B7A210000902N5N5\"\n\n/--\ninfo: 'A6A6FFFF99990000M0M0'\n-/\n#guard_msgs\
  \ in\n#eval communication_module \"A6A6C3D911150015M0M0\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
