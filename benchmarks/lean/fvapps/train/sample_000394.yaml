"vc-description": "We partition a row of numbers A into at most K adjacent (non-empty)\
  \ groups, then our score is the sum of the average of each group. What is the largest\
  \ score we can achieve?\nNote that our partition must use every number in A, and\
  \ that scores are not necessarily integers.\nExample:\nInput: \nA = [9,1,2,3,9]\n\
  K = 3\nOutput: 20\nExplanation: \nThe best choice is to partition A into [9], [1,\
  \ 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.\nWe could have also partitioned\
  \ A into [9, 1], [2], [3, 9], for example.\nThat partition would lead to a score\
  \ of 5 + 2 + 6 = 13, which is worse.\n\n \nNote: \n\n1 <= A.length <= 100.\n1 <=\
  \ A[i] <= 10000.\n1 <= K <= A.length.\nAnswers within 10^-6 of the correct answer\
  \ will be accepted as correct."
"vc-preamble": "import Imports.AllImports\n\ndef array_stats (numbers: List Int) :\
  \ Float × Float × Float × Float :=\n  sorry\n\n\ndef listMin (xs : List Int) : Float\
  \ :=\n  match xs with\n  | [] => 0\n  | (h::t) => Float.ofInt (List.foldl min h\
  \ t)\n\n\ndef listMax (xs : List Int) : Float :=\n  match xs with\n  | [] => 0\n\
  \  | (h::t) => Float.ofInt (List.foldl max h t)\n\n\ndef listSum (xs : List Int)\
  \ : Int :=\n  match xs with\n  | [] => 0\n  | (h::t) => h + listSum t\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sorted (xs : List Int) : List Int :=\n  sorry\n"
"vc-theorems": "theorem array_stats_empty :\n  array_stats [] = (0, 0, 0, 0) := sorry\n\
  \n\ntheorem array_stats_mean (numbers: List Int) (h: numbers ≠ []) :\n  let (mean,\
  \ _, _, _) := array_stats numbers\n  (mean - Float.ofInt (listSum numbers) / Float.ofInt\
  \ numbers.length).abs < 1e-10 := sorry \n\n\ntheorem array_stats_minmax (numbers:\
  \ List Int) (h: numbers ≠ []) :\n  let (_, _, min_val, max_val) := array_stats numbers\n\
  \  min_val = listMin numbers ∧ \n  max_val = listMax numbers := sorry\n\n\ntheorem\
  \ array_stats_ordering (numbers: List Int) (h: numbers ≠ []) :\n  let (mean, median,\
  \ min_val, max_val) := array_stats numbers\n  min_val ≤ median ∧ median ≤ max_val\
  \ ∧\n  min_val ≤ mean ∧ mean ≤ max_val := sorry\n\n\ntheorem array_stats_median_even\
  \ (numbers: List Int) (h: numbers ≠ []) \n  (h2: numbers.length % 2 = 0) :\n  let\
  \ (_, median, _, _) := array_stats numbers\n  let s := sorted numbers\n  (median\
  \ - Float.ofInt ((List.get! s ((numbers.length)/2 - 1)) + (List.get! s (numbers.length/2)))/2).abs\
  \ < 1e-10 := sorry\n\n\ntheorem array_stats_median_odd (numbers: List Int) (h: numbers\
  \ ≠ [])\n  (h2: numbers.length % 2 = 1) : \n  let (_, median, _, _) := array_stats\
  \ numbers\n  let s := sorted numbers\n  (median - Float.ofInt (List.get! s (numbers.length/2))).abs\
  \ < 1e-10 := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
