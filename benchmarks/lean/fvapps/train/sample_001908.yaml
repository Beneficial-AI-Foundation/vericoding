"vc-description": "Given a C++ program, remove comments from it. The program source\
  \ is an array where source[i] is the i-th line of the source code.  This represents\
  \ the result of splitting the original source code string by the newline character\
  \ \\n.\n\nIn C++, there are two types of comments, line comments, and block comments.\n\
  \nThe string // denotes a line comment, which represents that it and rest of the\
  \ characters to the right of it in the same line should be ignored.\n\nThe string\
  \ /* denotes a block comment, which represents that all characters until the next\
  \ (non-overlapping) occurrence of */ should be ignored.  (Here, occurrences happen\
  \ in reading order: line by line from left to right.)  To be clear, the string /*/\
  \ does not yet end the block comment, as the ending would be overlapping the beginning.\n\
  \nThe first effective comment takes precedence over others: if the string // occurs\
  \ in a block comment, it is ignored. Similarly, if the string /* occurs in a line\
  \ or block comment, it is also ignored.\n\nIf a certain line of code is empty after\
  \ removing comments, you must not output that line: each string in the answer list\
  \ will be non-empty.\n\nThere will be no control characters, single quote, or double\
  \ quote characters.  For example, source = \"string s = \"/* Not a comment. */\"\
  ;\" will not be a test case.  (Also, nothing else such as defines or macros will\
  \ interfere with the comments.)\n\nIt is guaranteed that every open block comment\
  \ will eventually be closed, so /* outside of a line or block comment always starts\
  \ a new comment.\n\nFinally, implicit newline characters can be deleted by block\
  \ comments.  Please see the examples below for details.\n\n\nAfter removing the\
  \ comments from the source code, return the source code in the same format.\n\n\
  Example 1:\n\nInput: \nsource = [\"/*Test program */\", \"int main()\", \"{ \",\
  \ \"  // variable declaration \", \"int a, b, c;\", \"/* This is a test\", \"  \
  \ multiline  \", \"   comment for \", \"   testing */\", \"a = b + c;\", \"}\"]\n\
  \nThe line by line code is visualized as below:\n/*Test program */\nint main()\n\
  { \n  // variable declaration \nint a, b, c;\n/* This is a test\n   multiline  \n\
  \   comment for \n   testing */\na = b + c;\n}\n\nOutput: [\"int main()\",\"{ \"\
  ,\"  \",\"int a, b, c;\",\"a = b + c;\",\"}\"]\n\nThe line by line code is visualized\
  \ as below:\nint main()\n{ \n  \nint a, b, c;\na = b + c;\n}\n\nExplanation: \n\
  The string /* denotes a block comment, including line 1 and lines 6-9. The string\
  \ // denotes line 4 as comments.\n\n\n\nExample 2:\n\nInput: \nsource = [\"a/*comment\"\
  , \"line\", \"more_comment*/b\"]\nOutput: [\"ab\"]\nExplanation: The original source\
  \ string is \"a/*comment\\nline\\nmore_comment*/b\", where we have bolded the newline\
  \ characters.  After deletion, the implicit newline characters are deleted, leaving\
  \ the string \"ab\", which when delimited by newline characters becomes [\"ab\"\
  ].\n\n\n\nNote:\nThe length of source is in the range [1, 100].\nThe length of source[i]\
  \ is in the range [0, 80].\nEvery open block comment is eventually closed.\nThere\
  \ are no single-quote, double-quote, or control characters in the source code."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def remove_comments (source : List String) : List String :=\n \
  \ sorry\n"
"vc-theorems": "theorem result_has_strings {source : List String} :\n  ∀ x ∈ remove_comments\
  \ source, x = x := by sorry\n\n\ntheorem empty_lines_removed {source : List String}\
  \ :\n  (∀ s ∈ source, s = \"\") →\n  remove_comments source = [] := by sorry\n\n\
  \ntheorem only_line_comments_removed {source : List String} :\n  (∀ s ∈ source,\
  \ ∃ rest, s = \"//\" ++ rest) →\n  remove_comments source = [] := by sorry\n\n\n\
  theorem output_lines_not_empty {source : List String} :\n  let result := remove_comments\
  \ source\n  ∀ line ∈ result, line.trim ≠ \"\" := by sorry\n\n/--\ninfo: expected1\n\
  -/\n#guard_msgs in\n#eval remove_comments [\"/*Test program */\", \"int main()\"\
  , \"{ \", \"  // variable declaration \", \"int a, b, c;\", \"/* This is a test\"\
  , \"   multiline  \", \"   comment for \", \"   testing */\", \"a = b + c;\", \"\
  }\"]\n\n/--\ninfo: expected2\n-/\n#guard_msgs in\n#eval remove_comments [\"a/*comment\"\
  , \"line\", \"more_comment*/b\"]\n\n/--\ninfo: expected3\n-/\n#guard_msgs in\n#eval\
  \ remove_comments [\"void func(int k) {\", \"// this function does nothing /*\"\
  , \"   k = k*2/4;\", \"   k = k/2;*/\", \"}\"]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
