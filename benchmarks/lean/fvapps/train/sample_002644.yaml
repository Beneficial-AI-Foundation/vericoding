"vc-description": "Consider the following expansion:\n```Haskell\nsolve(\"3(ab)\"\
  ) = \"ababab\" -- \"ab\" repeats 3 times\nsolve(\"2(a3(b))\" = \"abbbabbb\" -- \"\
  a3(b)\" == \"abbb\" repeats twice.\n```\n\nGiven a string, return the expansion\
  \ of that string. \n\nInput will consist of only lowercase letters and numbers (1\
  \ to 9) in valid parenthesis. There will be no letters or numbers after the last\
  \ closing parenthesis.\n\nMore examples in test cases. \n\nGood luck!\n\nPlease\
  \ also try [Simple time difference](https://www.codewars.com/kata/5b76a34ff71e5de9db0000f2)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve : String → String := sorry\n\ntheorem solve_basic_cases₁\
  \ :\n  solve \"3(a)\" = \"aaa\" := sorry\n"
"vc-theorems": "theorem solve_basic_cases₂ :\n  solve \"2(ab)\" = \"abab\" := sorry\n\
  \n\ntheorem solve_nested_cases₁ :\n  solve \"2(a2(b))\" = \"abbabb\" := sorry\n\n\
  \ntheorem solve_nested_cases₂ :\n  solve \"3(a2(bc))\" = \"abcbcabcbcabcbc\" :=\
  \ sorry\n\n\ntheorem solve_letters_only :\n  solve \"abc\" = \"abc\" := sorry\n\n\
  \ntheorem solve_with_leading_letters₁ :\n  solve \"k2(a)\" = \"kaa\" := sorry\n\n\
  \ntheorem solve_with_leading_letters₂ :\n  solve \"a2(b)\" = \"abb\" := sorry\n\n\
  /--\ninfo: 'ababab'\n-/\n#guard_msgs in\n#eval solve \"3(ab)\"\n\n/--\ninfo: 'abbbabbb'\n\
  -/\n#guard_msgs in\n#eval solve \"2(a3(b))\"\n\n/--\ninfo: 'kabaccbaccbacc'\n-/\n\
  #guard_msgs in\n#eval solve \"k(a3(b(a2(c))))\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
