"vc-description": "Given an 2D board, count how many battleships are in it. The battleships\
  \ are represented with 'X's, empty slots are represented with '.'s. You may assume\
  \ the following rules:\n\n\nYou receive a valid board, made of only battleships\
  \ or empty slots.\nBattleships can only be placed horizontally or vertically. In\
  \ other words, they can only be made of the shape 1xN (1 row, N columns) or Nx1\
  \ (N rows, 1 column), where N can be of any size.\nAt least one horizontal or vertical\
  \ cell separates between two battleships - there are no adjacent battleships.\n\n\
  \nExample:\nX..X\n...X\n...X\n\nIn the above board there are 2 battleships.\n\n\
  Invalid Example:\n...X\nXXXX\n...X\n\nThis is an invalid board that you will not\
  \ receive - as battleships will always have a cell separating between them.\n\n\
  Follow up:Could you do it in one-pass, using only O(1) extra memory and without\
  \ modifying the value of the board?"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def valid_board (board: List (List Char)) : Bool := sorry\n\ndef\
  \ count_battleships (board: List (List Char)) : Nat := sorry\n"
"vc-theorems": "theorem count_battleships_empty {b: List (List Char)} (h1: b = [])\
  \ : count_battleships b = 0 := sorry\n\ntheorem count_battleships_empty_row {b:\
  \ List (List Char)} (h1: b = [[]]) : count_battleships b = 0 := sorry\n\n\ntheorem\
  \ count_battleships_non_negative {b: List (List Char)} : count_battleships b ≥ 0\
  \ := sorry\n\ntheorem count_battleships_upper_bound {b: List (List Char)} :\n  let\
  \ x_count := fun (row : List Char) => (row.filter (fun c => c = 'X')).length\n \
  \ let total_x := (List.map x_count b).foldr Nat.add 0\n  count_battleships b ≤ total_x\
  \ := sorry\n\n\ntheorem count_battleships_neighbors {b: List (List Char)} {i j:\
  \ Nat} \n  (h1: i < b.length) \n  (h2: j < (b.get! i).length)\n  (h3: (b.get! i).get!\
  \ j = 'X') :\n  let neighbors := [\n    (i+1, j), (i-1, j), (i, j+1), (i, j-1)\n\
  \  ].filter (fun (ni, nj) => \n    ni < b.length ∧ \n    nj < (b.get! ni).length\
  \ ∧ \n    (b.get! ni).get! nj = 'X'\n  )\n  neighbors.length ≤ 2 := sorry\n\n\n\
  theorem count_battleships_single {b: List (List Char)} \n  (h1: b = [['X']]) : count_battleships\
  \ b = 1 := sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval count_battleships [[\"\
  X\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \"\
  .\"]]\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval count_battleships [[\"X\", \".\"\
  , \".\", \"X\"], [\".\", \".\", \".\", \"X\"], [\".\", \".\", \".\", \"X\"]]\n\n\
  /--\ninfo: 0\n-/\n#guard_msgs in\n#eval count_battleships []\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
