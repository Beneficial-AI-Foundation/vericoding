"vc-description": "You are teaching students to generate strings consisting of unique\
  \ lowercase latin characters (a-z). You give an example reference string $s$ to\
  \ the students.\nYou notice that your students just copy paste the reference string\
  \ instead of creating their own string. So, you tweak the requirements for strings\
  \ submitted by the students.\nLet us define a function F(s, t) where s and t are\
  \ strings as the number of characters that are same in both the strings. Note that\
  \ the position doesn't matter. Here are a few examples of F(s, t):\nF(\"abc\", \"\
  def\") = 0\nF(\"abc\", \"acb\") = 3\nF(\"back\", \"abcd\") = 3\nNow you ask your\
  \ students to output a string t with lowercase unique characters of the same length\
  \ as $s$, such that F(s, t) $\\leq k$ where you are also given the value of $k$.\
  \ If there are multiple such strings, you ask them to output the lexicographically\
  \ smallest possible string. If no such string is possible, output the string \"\
  NOPE\" without quotes.\n\n-----Input:-----\n- The first line will contain $T$, the\
  \ number of testcases. Then the testcases follow. \n- Each testcase contains of\
  \ a single line of input, which contains a string $s$ and an integer $k$.\n\n-----Output:-----\n\
  For each testcase, output in a single line the lexicographically smallest string\
  \ t such that F(s, t) <= k or \"NOPE\" without quotes if no such string exists.\n\
  \n-----Constraints-----\n- $1 \\leq T \\leq 10000$\n- $1 \\leq $length of string\
  \ s $(|s|) \\leq 26$\n- $s$ only consists of characters $a$ to $z$\n- There are\
  \ no repeating characters in s\n- $0 \\leq k \\leq |s|$\n\n-----Sample Input:-----\n\
  4\nhelowrd 0\nbackground 0\nabcdefghijklmnopqrstuvwxyz 0\nb 1\n\n-----Sample Output:-----\n\
  abcfgij\nefhijlmpqs\nNOPE\na"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_unique_string (s : List Char) (k : Nat) : List Char :=\
  \ sorry\n\ntheorem solve_unique_string_properties \n  (s : List Char) (k : Nat)\
  \ (result : List Char)\n  (h : result = solve_unique_string s k)\n  (h₁ : result\
  \ ≠ []) :\n  List.length result = List.length s ∧ \n  (∀ i j, i < j → j < List.length\
  \ result → List.get! result i ≤ List.get! result j) ∧\n  List.length (List.filter\
  \ (fun c => c ∈ s) result) ≤ k ∧\n  (∀ c ∈ result, c.isLower) ∧\n  List.length result\
  \ = List.length (List.eraseDups result) := sorry\n"
"vc-theorems": "theorem solve_zero_k_property\n  (s : List Char) (result : List Char)\
  \ \n  (h : result = solve_unique_string s 0)\n  (h₁ : result ≠ []) :\n  ∀ c ∈ result,\
  \ c ∉ s := sorry\n\n/--\ninfo: 'abcfgij'\n-/\n#guard_msgs in\n#eval solve_unique_string\
  \ \"helowrd\" 0\n\n/--\ninfo: 'efhijlmpqs'\n-/\n#guard_msgs in\n#eval solve_unique_string\
  \ \"background\" 0\n\n/--\ninfo: 'a'\n-/\n#guard_msgs in\n#eval solve_unique_string\
  \ \"b\" 1\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
