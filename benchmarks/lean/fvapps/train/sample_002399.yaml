"vc-description": "A sentence S is given, composed of words separated by spaces. Each\
  \ word consists of lowercase and uppercase letters only.\nWe would like to convert\
  \ the sentence to \"Goat Latin\" (a made-up language similar to Pig Latin.)\nThe\
  \ rules of Goat Latin are as follows:\n\nIf a word begins with a vowel (a, e, i,\
  \ o, or u), append \"ma\" to the end of the word.\n        For example, the word\
  \ 'apple' becomes 'applema'.\n         \nIf a word begins with a consonant (i.e.\
  \ not a vowel), remove the first letter and append it to the end, then add \"ma\"\
  .\n        For example, the word \"goat\" becomes \"oatgma\".\n         \nAdd one\
  \ letter 'a' to the end of each word per its word index in the sentence, starting\
  \ with 1.\n        For example, the first word gets \"a\" added to the end, the\
  \ second word gets \"aa\" added to the end and so on.\n\nReturn the final sentence\
  \ representing the conversion from S to Goat Latin. \n \nExample 1:\nInput: \"I\
  \ speak Goat Latin\"\nOutput: \"Imaa peaksmaaa oatGmaaaa atinLmaaaaa\"\n\nExample\
  \ 2:\nInput: \"The quick brown fox jumped over the lazy dog\"\nOutput: \"heTmaa\
  \ uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa\
  \ ogdmaaaaaaaaaa\"\n\n \nNotes:\n\nS contains only uppercase, lowercase and spaces. Exactly\
  \ one space between each word.\n1 <= S.length <= 150."
"vc-preamble": "import Imports.AllImports\n\ndef to_goat_latin (s : String) : String\
  \ := sorry\n\ndef splitString (s : String) : List String := sorry\n\n\ndef getStringAt\
  \ (words : List String) (i : Nat) : String := sorry\n\ndef endsWith (s : String)\
  \ (suffix : String) : Bool := sorry\n\n\ndef dropRight (s : String) (n : Nat) :\
  \ String := sorry\ndef firstChar (s : String) : Char := sorry\n\ndef dropFirst (s\
  \ : String) : String := sorry\n\ntheorem to_goat_latin_vowel_rule {s : String} (i\
  \ : Nat) (h : i < (splitString s).length) :\n  let orig := splitString s\n  let\
  \ result := splitString (to_goat_latin s)\n  let orig_word := getStringAt orig i\n\
  \  let transformed := dropRight (getStringAt result i) (2 + (i+1))\n  if (firstChar\
  \ orig_word).toLower ∈ ['a', 'e', 'i', 'o', 'u'] then\n    transformed = orig_word\n\
  \  else\n    transformed = dropFirst orig_word ++ String.mk [firstChar orig_word]\
  \ := sorry \n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def countChar (s : String) (c : Char) : Nat := sorry\n\ntheorem\
  \ to_goat_latin_trailing_a_count {s : String} (i : Nat) (h : i < (splitString s).length)\
  \ :\n  let result := splitString (to_goat_latin s)\n  countChar (getStringAt result\
  \ i) 'a' ≥ i + 1 := sorry"
"vc-theorems": "theorem to_goat_latin_preserves_word_count {s : String} :\n  (splitString\
  \ s).length = (splitString (to_goat_latin s)).length := sorry\n\n\ntheorem to_goat_latin_ma_suffix_rule\
  \ {s : String} (i : Nat) (h : i < (splitString s).length) :\n  let result := splitString\
  \ (to_goat_latin s)\n  let suffix := \"ma\" ++ String.mk (List.replicate (i+1) 'a')\n\
  \  endsWith (getStringAt result i) suffix := sorry\n\n\n/--\ninfo: expected1\n-/\n\
  #guard_msgs in\n#eval to_goat_latin \"I speak Goat Latin\"\n\n/--\ninfo: expected2\n\
  -/\n#guard_msgs in\n#eval to_goat_latin \"The quick brown fox\"\n\n/--\ninfo: expected3\n\
  -/\n#guard_msgs in\n#eval to_goat_latin \"Each word\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
