"vc-description": "A robot is located at the top-left corner of a m x n grid (marked\
  \ 'Start' in the diagram below).\n\nThe robot can only move either down or right\
  \ at any point in time. The robot is trying to reach the bottom-right corner of\
  \ the grid (marked 'Finish' in the diagram below).\n\nHow many possible unique paths\
  \ are there?\n\n\nAbove is a 7 x 3 grid. How many possible unique paths are there?\n\
  \nNote: m and n will be at most 100.\n\nExample 1:\n\n\nInput: m = 3, n = 2\nOutput:\
  \ 3\nExplanation:\nFrom the top-left corner, there are a total of 3 ways to reach\
  \ the bottom-right corner:\n1. Right -> Right -> Down\n2. Right -> Down -> Right\n\
  3. Down -> Right -> Right\n\n\nExample 2:\n\n\nInput: m = 7, n = 3\nOutput: 28"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def unique_paths (m n : Nat) : Nat := sorry\n\ntheorem unique_paths_positive\
  \ (m n : Nat) (h1 : m > 0) (h2 : n > 0) :\n  unique_paths m n > 0 := sorry\n"
"vc-theorems": "theorem unique_paths_symmetry (m n : Nat) :\n  unique_paths m n =\
  \ unique_paths n m := sorry\n\n\ntheorem unique_paths_single_row (n : Nat) (h :\
  \ n > 0) :\n  unique_paths 1 n = 1 := sorry\n\n\ntheorem unique_paths_single_col\
  \ (n : Nat) (h : n > 0) :\n  unique_paths n 1 = 1 := sorry\n\n/--\ninfo: 3\n-/\n\
  #guard_msgs in\n#eval unique_paths 3 2\n\n/--\ninfo: 28\n-/\n#guard_msgs in\n#eval\
  \ unique_paths 7 3\n\n/--\ninfo: 28\n-/\n#guard_msgs in\n#eval unique_paths 3 7\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
