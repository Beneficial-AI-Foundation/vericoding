"vc-description": "Prior to having fancy iPhones, teenagers would wear out their thumbs\
  \ sending SMS\nmessages on candybar-shaped feature phones with 3x4 numeric keypads.\n\
  \n    ------- ------- -------\n    |     | | ABC | | DEF |\n    |  1  | |  2  |\
  \ |  3  |\n    ------- ------- -------\n    ------- ------- -------\n    | GHI |\
  \ | JKL | | MNO |\n    |  4  | |  5  | |  6  |\n    ------- ------- -------\n  \
  \  ------- ------- -------\n    |PQRS | | TUV | | WXYZ|\n    |  7  | |  8  | | \
  \ 9  |\n    ------- ------- -------\n    ------- ------- -------\n    |     | |space|\
  \ |     |\n    |  *  | |  0  | |  #  |\n    ------- ------- -------\n\nPrior to\
  \ the development of T9 (predictive text entry) systems, the method to\ntype words\
  \ was called \"multi-tap\" and involved pressing a button repeatedly to\ncycle through\
  \ the possible values.\n\nFor example, to type a letter `\"R\"` you would press\
  \ the `7` key three times (as\nthe screen display for the current character cycles\
  \ through `P->Q->R->S->7`).  A\ncharacter is \"locked in\" once the user presses\
  \ a different key or pauses for a\nshort period of time (thus, no extra button presses\
  \ are required beyond what is\nneeded for each letter individually). The zero key\
  \ handles spaces, with one press of the key producing a space and two presses producing\
  \ a zero.\n\nIn order to send the message `\"WHERE DO U WANT 2 MEET L8R\"` a teen\
  \ would have to\nactually do 47 button presses.  No wonder they abbreviated.\n\n\
  For this assignment, write a module that can calculate the amount of button\npresses\
  \ required for any phrase. Punctuation can be ignored for this exercise. Likewise,\
  \ you can assume the phone doesn't distinguish between upper/lowercase characters\
  \ (but you should allow your module to accept input in either for convenience).\n\
  \nHint: While it wouldn't take too long to hard code the amount of keypresses for\n\
  all 26 letters by hand, try to avoid doing so! (Imagine you work at a phone\nmanufacturer\
  \ who might be testing out different keyboard layouts, and you want\nto be able\
  \ to test new ones rapidly.)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def BUTTONS : List String := sorry\ndef presses (s : String) :\
  \ Nat := sorry\n\n/-- For any string made up of valid keypad characters, the number\
  \ of presses\n    should be at least the length of the string, and each character\
  \ should\n    be present in one of the buttons -/"
"vc-theorems": "theorem keypad_chars_valid (s : String) :\n  (∀ c ∈ s.data, ∃ button\
  \ ∈ BUTTONS, c ∈ button.data) →\n  presses s ≥ s.length := sorry\n\n/-- The number\
  \ of presses required should be the same regardless of case -/\n\ntheorem case_insensitive\
  \ (button : String) :\n  button ∈ BUTTONS →\n  presses button.toUpper = presses\
  \ button.toLower := sorry\n\n/-- For strings containing only numbers and spaces,\
  \ the number of presses\n    should be at least the length of the string -/\n\n\
  theorem numeric_and_space_presses (s : String) :\n  (∀ c ∈ s.data, c ∈ [' ', '0',\
  \ '1', '2', '3', '4', '5', '6', '7', '8', '9']) →\n  presses s ≥ s.length := sorry\n\
  \n/--\ninfo: 9\n-/\n#guard_msgs in\n#eval presses \"LOL\"\n\n/--\ninfo: 13\n-/\n\
  #guard_msgs in\n#eval presses \"HOW R U\"\n\n/--\ninfo: 47\n-/\n#guard_msgs in\n\
  #eval presses \"WHERE DO U WANT 2 MEET L8R\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
