"vc-description": "Mikhail walks on a Cartesian plane. He starts at the point $(0,\
  \ 0)$, and in one move he can go to any of eight adjacent points. For example, if\
  \ Mikhail is currently at the point $(0, 0)$, he can go to any of the following\
  \ points in one move:   $(1, 0)$;  $(1, 1)$;  $(0, 1)$;  $(-1, 1)$;  $(-1, 0)$;\
  \  $(-1, -1)$;  $(0, -1)$;  $(1, -1)$. \n\nIf Mikhail goes from the point $(x1,\
  \ y1)$ to the point $(x2, y2)$ in one move, and $x1 \\ne x2$ and $y1 \\ne y2$, then\
  \ such a move is called a diagonal move.\n\nMikhail has $q$ queries. For the $i$-th\
  \ query Mikhail's target is to go to the point $(n_i, m_i)$ from the point $(0,\
  \ 0)$ in exactly $k_i$ moves. Among all possible movements he want to choose one\
  \ with the maximum number of diagonal moves. Your task is to find the maximum number\
  \ of diagonal moves or find that it is impossible to go from the point $(0, 0)$\
  \ to the point $(n_i, m_i)$ in $k_i$ moves.\n\nNote that Mikhail can visit any point\
  \ any number of times (even the destination point!).\n\n\n-----Input-----\n\nThe\
  \ first line of the input contains one integer $q$ ($1 \\le q \\le 10^4$) — the\
  \ number of queries.\n\nThen $q$ lines follow. The $i$-th of these $q$ lines contains\
  \ three integers $n_i$, $m_i$ and $k_i$ ($1 \\le n_i, m_i, k_i \\le 10^{18}$) —\
  \ $x$-coordinate of the destination point of the query, $y$-coordinate of the destination\
  \ point of the query and the number of moves in the query, correspondingly.\n\n\n\
  -----Output-----\n\nPrint $q$ integers. The $i$-th integer should be equal to -1\
  \ if Mikhail cannot go from the point $(0, 0)$ to the point $(n_i, m_i)$ in exactly\
  \ $k_i$ moves described above. Otherwise the $i$-th integer should be equal to the\
  \ the maximum number of diagonal moves among all possible movements.\n\n\n-----Example-----\n\
  Input\n3\n2 2 3\n4 3 7\n10 1 9\n\nOutput\n1\n6\n-1\n\n\n\n-----Note-----\n\nOne\
  \ of the possible answers to the first test case: $(0, 0) \\to (1, 0) \\to (1, 1)\
  \ \\to (2, 2)$.\n\nOne of the possible answers to the second test case: $(0, 0)\
  \ \\to (0, 1) \\to (1, 2) \\to (0, 3) \\to (1, 4) \\to (2, 3) \\to (3, 2) \\to (4,\
  \ 3)$.\n\nIn the third test case Mikhail cannot reach the point $(10, 1)$ in 9 moves."
"vc-preamble": "import Imports.AllImports\n\ndef solve_max_diagonal_moves (n m k :\
  \ Int) : Int :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def abs (n : Int) : Int :=\n  if n ≥ 0 then n else -n\n"
"vc-theorems": "theorem result_bound (n m k : Int) (h: -1000 <= n ∧ n <= 1000) (h2:\
  \ -1000 <= m ∧ m <= 1000) (h3: 0 <= k ∧ k <= 2000) :\n  let r := solve_max_diagonal_moves\
  \ n m k\n  r = -1 ∨ r ≤ k := sorry\n\n\ntheorem result_parity (n m k : Int) (h:\
  \ -1000 <= n ∧ n <= 1000) (h2: -1000 <= m ∧ m <= 1000) (h3: 0 <= k ∧ k <= 2000)\
  \ :\n  let r := solve_max_diagonal_moves n m k\n  let max_dist := max (abs n) (abs\
  \ m)\n  r ≠ -1 → (r % 2 = max_dist % 2 ∨ r % 2 = (max_dist - 1) % 2) := sorry\n\n\
  \ntheorem insufficient_moves (n : Int) (h: 1 <= n ∧ n <= 1000) :\n  let k := abs\
  \ n - 1\n  solve_max_diagonal_moves n n k = -1 := sorry\n\n\ntheorem symmetry (n\
  \ m : Int) (h: -1000 <= n ∧ n <= 1000) (h2: -1000 <= m ∧ m <= 1000) :\n  let k :=\
  \ max (abs n) (abs m) * 2\n  let r1 := solve_max_diagonal_moves n m k\n  let r2\
  \ := solve_max_diagonal_moves (-n) m k\n  let r3 := solve_max_diagonal_moves n (-m)\
  \ k\n  let r4 := solve_max_diagonal_moves (-n) (-m) k\n  r1 = r2 ∧ r2 = r3 ∧ r3\
  \ = r4 := sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval solve_max_diagonal_moves\
  \ 2 2 3\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval solve_max_diagonal_moves 4 3\
  \ 7\n\n/--\ninfo: -1\n-/\n#guard_msgs in\n#eval solve_max_diagonal_moves 10 1 9\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
