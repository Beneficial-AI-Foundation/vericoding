"vc-description": "In number world, two different numbers are friends if they have\
  \ a lot in common, but also each one has unique perks.\n\nMore precisely, two different\
  \ numbers $a$ and $b$ are friends if $gcd(a,b)$, $\\frac{a}{gcd(a,b)}$, $\\frac{b}{gcd(a,b)}$\
  \ can form sides of a triangle.\n\nThree numbers $a$, $b$ and $c$ can form sides\
  \ of a triangle if $a + b > c$, $b + c > a$ and $c + a > b$.\n\nIn a group of numbers,\
  \ a number is lonely if it doesn't have any friends in that group.\n\nGiven a group\
  \ of numbers containing all numbers from $1, 2, 3, ..., n$, how many numbers in\
  \ that group are lonely?\n\n\n-----Input-----\n\nThe first line contains a single\
  \ integer $t$ $(1 \\leq t \\leq 10^6)$ - number of test cases.\n\nOn next line there\
  \ are $t$ numbers, $n_i$ $(1 \\leq n_i \\leq 10^6)$ - meaning that in case $i$ you\
  \ should solve for numbers $1, 2, 3, ..., n_i$.\n\n\n-----Output-----\n\nFor each\
  \ test case, print the answer on separate lines: number of lonely numbers in group\
  \ $1, 2, 3, ..., n_i$.\n\n\n-----Example-----\nInput\n3\n1 5 10\n\nOutput\n1\n3\n\
  3\n\n\n\n-----Note-----\n\nFor first test case, $1$ is the only number and therefore\
  \ lonely.\n\nFor second test case where $n=5$, numbers $1$, $3$ and $5$ are lonely.\n\
  \nFor third test case where $n=10$, numbers $1$, $5$ and $7$ are lonely."
"vc-preamble": "import Imports.AllImports\n\ndef gcd (a b : Nat) : Nat := sorry\n\n\
  theorem gcd_positive (a b : Nat) : a > 0 → b > 0 → gcd a b > 0 := sorry\n\n\ndef\
  \ checkNumbersFriends (a b : Nat) : Bool := sorry\n\ntheorem not_self_friends (a\
  \ : Nat) : a > 0 → \n  checkNumbersFriends a a = false := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def countLonelyNumbers (n : Nat) : Nat := sorry\n\ntheorem lonely_numbers_bounds\
  \ (n : Nat) : n > 0 →\n  countLonelyNumbers n ≤ n := sorry\n"
"vc-theorems": "theorem gcd_divides (a b : Nat) : a > 0 → b > 0 → \n  a % (gcd a b)\
  \ = 0 ∧ b % (gcd a b) = 0 := sorry \n\n\ntheorem gcd_symmetric (a b : Nat) : a >\
  \ 0 → b > 0 → gcd a b = gcd b a := sorry\n\ndef isTriangle (a b c : Nat) : Bool\
  \ := sorry\n\n\ntheorem triangle_inequality (a b c : Nat) : a > 0 → b > 0 → c >\
  \ 0 →\n  isTriangle a b c = true → \n    a + b > c ∧ b + c > a ∧ a + c > b := sorry\n\
  \n\ntheorem triangle_symmetric (a b c : Nat) : a > 0 → b > 0 → c > 0 →\n  isTriangle\
  \ a b c = isTriangle b c a ∧ \n  isTriangle b c a = isTriangle c a b := sorry\n\n\
  \ntheorem friends_symmetric (a b : Nat) : a > 0 → b > 0 →\n  checkNumbersFriends\
  \ a b = checkNumbersFriends b a := sorry\n\n\ntheorem one_is_lonely : countLonelyNumbers\
  \ 1 = 1 := sorry\n\ndef solveTestCases (nums : List Nat) : List Nat := sorry\n\n\
  /--\ninfo: [1, 3, 3]\n-/\n#guard_msgs in\n#eval solve_test_cases [1, 5, 10]\n\n\
  /--\ninfo: [1]\n-/\n#guard_msgs in\n#eval solve_test_cases [1]\n\n/--\ninfo: [3,\
  \ 7]\n-/\n#guard_msgs in\n#eval solve_test_cases [10, 20]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded_and_plausible"
