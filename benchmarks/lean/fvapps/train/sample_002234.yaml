"vc-description": "Let $a$ and $b$ be two arrays of lengths $n$ and $m$, respectively,\
  \ with no elements in common. We can define a new array $\\mathrm{merge}(a,b)$ of\
  \ length $n+m$ recursively as follows:  If one of the arrays is empty, the result\
  \ is the other array. That is, $\\mathrm{merge}(\\emptyset,b)=b$ and $\\mathrm{merge}(a,\\\
  emptyset)=a$. In particular, $\\mathrm{merge}(\\emptyset,\\emptyset)=\\emptyset$.\
  \  If both arrays are non-empty, and $a_1<b_1$, then $\\mathrm{merge}(a,b)=[a_1]+\\\
  mathrm{merge}([a_2,\\ldots,a_n],b)$. That is, we delete the first element $a_1$\
  \ of $a$, merge the remaining arrays, then add $a_1$ to the beginning of the result.\
  \  If both arrays are non-empty, and $a_1>b_1$, then $\\mathrm{merge}(a,b)=[b_1]+\\\
  mathrm{merge}(a,[b_2,\\ldots,b_m])$. That is, we delete the first element $b_1$\
  \ of $b$, merge the remaining arrays, then add $b_1$ to the beginning of the result.\
  \ \n\nThis algorithm has the nice property that if $a$ and $b$ are sorted, then\
  \ $\\mathrm{merge}(a,b)$ will also be sorted. For example, it is used as a subroutine\
  \ in merge-sort. For this problem, however, we will consider the same procedure\
  \ acting on non-sorted arrays as well. For example, if $a=[3,1]$ and $b=[2,4]$,\
  \ then $\\mathrm{merge}(a,b)=[2,3,1,4]$.\n\nA permutation is an array consisting\
  \ of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$\
  \ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the\
  \ array) and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the\
  \ array).\n\nThere is a permutation $p$ of length $2n$. Determine if there exist\
  \ two arrays $a$ and $b$, each of length $n$ and with no elements in common, so\
  \ that $p=\\mathrm{merge}(a,b)$.\n\n\n-----Input-----\n\nThe first line contains\
  \ a single integer $t$ ($1\\le t\\le 1000$)  — the number of test cases. Next $2t$\
  \ lines contain descriptions of test cases. \n\nThe first line of each test case\
  \ contains a single integer $n$ ($1\\le n\\le 2000$).\n\nThe second line of each\
  \ test case contains $2n$ integers $p_1,\\ldots,p_{2n}$ ($1\\le p_i\\le 2n$). It\
  \ is guaranteed that $p$ is a permutation.\n\nIt is guaranteed that the sum of $n$\
  \ across all test cases does not exceed $2000$.\n\n\n-----Output-----\n\nFor each\
  \ test case, output \"YES\" if there exist arrays $a$, $b$, each of length $n$ and\
  \ with no common elements, so that $p=\\mathrm{merge}(a,b)$. Otherwise, output \"\
  NO\".\n\n\n-----Example-----\nInput\n6\n2\n2 3 1 4\n2\n3 1 2 4\n4\n3 2 6 1 5 7 8\
  \ 4\n3\n1 2 3 4 5 6\n4\n6 1 3 7 4 5 8 2\n6\n4 3 2 5 1 11 9 12 8 6 10 7\n\nOutput\n\
  YES\nNO\nYES\nYES\nNO\nNO\n\n\n\n-----Note-----\n\nIn the first test case, $[2,3,1,4]=\\\
  mathrm{merge}([3,1],[2,4])$.\n\nIn the second test case, we can show that $[3,1,2,4]$\
  \ is not the merge of two arrays of length $2$.\n\nIn the third test case, $[3,2,6,1,5,7,8,4]=\\\
  mathrm{merge}([3,2,8,4],[6,1,5,7])$.\n\nIn the fourth test case, $[1,2,3,4,5,6]=\\\
  mathrm{merge}([1,3,6],[2,4,5])$, for example."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def canMergeForPermutation (p : List Nat) : String :=\n  sorry\n\
  \nstructure Permutation (n : Nat) where\n  perm : List Nat\n  size : perm.length\
  \ = n\n"
"vc-theorems": "theorem permutation_properties {n : Nat} (p : List Nat) \n  (h1 :\
  \ p.length = 2*n) (h2 : n > 0) (h3 : n ≤ 5) :\n  (canMergeForPermutation p = \"\
  YES\" ∨ canMergeForPermutation p = \"NO\") ∧\n  p.length % 2 = 0 :=\nsorry\n\n\n\
  theorem result_consistency {n : Nat} (p : List Nat)\n  (h1 : p.length = 2*n) (h2\
  \ : n > 0) (h3 : n ≤ 5) :\n  canMergeForPermutation p = canMergeForPermutation p\
  \ :=\nsorry\n\n\ntheorem known_cases :\n  canMergeForPermutation [2, 3, 1, 4] =\
  \ \"YES\" ∧ \n  canMergeForPermutation [3, 1, 2, 4] = \"NO\" ∧\n  canMergeForPermutation\
  \ [3, 2, 6, 1, 5, 7, 8, 4] = \"YES\" :=\nsorry\n\n/--\ninfo: 'YES'\n-/\n#guard_msgs\
  \ in\n#eval can_merge_for_permutation [2, 3, 1, 4]\n\n/--\ninfo: 'NO'\n-/\n#guard_msgs\
  \ in\n#eval can_merge_for_permutation [3, 1, 2, 4]\n\n/--\ninfo: 'YES'\n-/\n#guard_msgs\
  \ in\n#eval can_merge_for_permutation [3, 2, 6, 1, 5, 7, 8, 4]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
