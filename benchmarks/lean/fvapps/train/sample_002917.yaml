"vc-description": "Given a list of integers values, your job is to return the sum\
  \ of the values; however, if the same integer value appears multiple times in the\
  \ list, you can only count it once in your sum.\n\nFor example:\n```python\n[ 1,\
  \ 2, 3] ==> 6\n\n[ 1, 3, 8, 1, 8] ==> 12\n\n[ -1, -1, 5, 2, -7] ==> -1\n\n[] ==>\
  \ None\n```\n\nGood Luck!"
"vc-preamble": "import Imports.AllImports\n\ndef unique_sum (lst: List Int) : Option\
  \ Int := sorry\n\ndef listToSet (lst: List Int) : List Int := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def listSum (lst: List Int) : Int :=\n  lst.foldl (· + ·) 0\n"
"vc-theorems": "theorem unique_sum_properties (lst : List Int) :\n  match lst with\n\
  \  | [] => unique_sum lst = none  \n  | _  => unique_sum lst = some (listSum (listToSet\
  \ lst))\n  := sorry\n\n\ntheorem unique_sum_nonempty {lst : List Int} (h : lst ≠\
  \ []) :\n  ∃ n : Int, unique_sum lst = some n ∧ n = listSum (listToSet lst) := sorry\n\
  \n\ntheorem unique_sum_duplicates {lst : List Int} (h : lst ≠ []) \n  (h2 : ∀ x\
  \ ∈ lst, x ≠ 0) :\n  unique_sum (lst ++ lst) = unique_sum lst := sorry\n\n/--\n\
  info: None\n-/\n#guard_msgs in\n#eval unique_sum []\n\n/--\ninfo: 6\n-/\n#guard_msgs\
  \ in\n#eval unique_sum [1, 2, 3]\n\n/--\ninfo: 12\n-/\n#guard_msgs in\n#eval unique_sum\
  \ [1, 3, 8, 1, 8]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
