"vc-description": "In telecomunications we use information coding to detect and prevent\
  \ errors while sending data. \n\nA parity bit is a bit added to a string of binary\
  \ code that indicates whether the number of 1-bits in the string is even or odd.\
  \ Parity bits are used as the simplest form of error detecting code, and can detect\
  \ a 1 bit error.\n\nIn this case we are using even parity: the parity bit is set\
  \ to `0` if the number of `1`-bits is even, and is set to `1` if odd.  \n\nWe are\
  \ using them for the transfer of ASCII characters in binary (7-bit strings): the\
  \ parity is added to the end of the 7-bit string, forming the 8th bit.\n\nIn this\
  \ Kata you are to test for 1-bit errors and return a new string consisting of all\
  \ of the correct ASCII caracters **in 7 bit format** (removing the parity bit),\
  \ or `\"error\"` in place of ASCII characters in which errors were detected.\n\n\
  For more information on parity bits: https://en.wikipedia.org/wiki/Parity_bit\n\n\
  \n## Examples\n\nCorrect 7 bit string with an even parity bit as the 8th bit:\n\
  ```\n\"01011001\" <-- The \"1\" on the right is the parity bit.\n```\n\nIn this\
  \ example, there are three 1-bits. Three is an odd number, and the parity bit is\
  \ set to `1`. No errors are detected, so return `\"0101100\"` (7 bits).\n\nExample\
  \ of a string of ASCII characters:\n```\n\"01011001 01101110 01100000 01010110 10001111\
  \ 01100011\"\n```\nThis should return:\n```\n\"0101100 error 0110000 0101011 error\
  \ 0110001\"\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def parity_bit (input : String) : String :=\n  sorry\n"
"vc-theorems": "theorem parity_bit_output_length {input : String} {part : String}\n\
  \  (h : part ∈ (parity_bit input).split fun c => c = ' ') :\n  part = \"error\"\
  \ ∨ part.length = 7 :=\n  sorry\n\n\ntheorem parity_bit_even_parity {input : String}\
  \ {in_byte out_byte : String} \n  (h1 : in_byte.length = 8)\n  (h2 : in_byte.all\
  \ (λ c => c = '0' ∨ c = '1'))\n  (h3 : out_byte ∈ (parity_bit (in_byte)).split (fun\
  \ c => c = ' ')) :\n  (((in_byte.toList.filter (λ c => c = '1')).length % 2 = 0\
  \ → \n    out_byte = in_byte.take 7) ∧\n   ((in_byte.toList.filter (λ c => c = '1')).length\
  \ % 2 = 1 → \n    out_byte = \"error\")) :=\n  sorry\n\n/--\ninfo: '0101100'\n-/\n\
  #guard_msgs in\n#eval parity_bit \"01011001\"\n\n/--\ninfo: '0011110 error'\n-/\n\
  #guard_msgs in\n#eval parity_bit \"00111100 00111101\"\n\n/--\ninfo: 'error 0110000\
  \ 0101011 error 0110001'\n-/\n#guard_msgs in\n#eval parity_bit \"01101110 01100000\
  \ 01010110 10001111 01100011\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
