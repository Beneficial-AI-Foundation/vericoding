"vc-description": "There are literally dozens of snooker competitions held each year,\
  \ and team Jinotega tries to attend them all (for some reason they prefer name \"\
  snookah\")! When a competition takes place somewhere far from their hometown, Ivan,\
  \ Artsem and Konstantin take a flight to the contest and back.\n\nJinotega's best\
  \ friends, team Base have found a list of their itinerary receipts with information\
  \ about departure and arrival airports. Now they wonder, where is Jinotega now:\
  \ at home or at some competition far away? They know that:   this list contains\
  \ all Jinotega's flights in this year (in arbitrary order),  Jinotega has only flown\
  \ from his hometown to a snooker contest and back,  after each competition Jinotega\
  \ flies back home (though they may attend a competition in one place several times),\
  \  and finally, at the beginning of the year Jinotega was at home. \n\nPlease help\
  \ them to determine Jinotega's location!\n\n\n-----Input-----\n\nIn the first line\
  \ of input there is a single integer n: the number of Jinotega's flights (1 ≤ n\
  \ ≤ 100). In the second line there is a string of 3 capital Latin letters: the name\
  \ of Jinotega's home airport. In the next n lines there is flight information, one\
  \ flight per line, in form \"XXX->YYY\", where \"XXX\" is the name of departure\
  \ airport \"YYY\" is the name of arrival airport. Exactly one of these airports\
  \ is Jinotega's home airport.\n\nIt is guaranteed that flights information is consistent\
  \ with the knowledge of Jinotega's friends, which is described in the main part\
  \ of the statement.\n\n\n-----Output-----\n\nIf Jinotega is now at home, print \"\
  home\" (without quotes), otherwise print \"contest\".\n\n\n-----Examples-----\n\
  Input\n4\nSVO\nSVO->CDG\nLHR->SVO\nSVO->LHR\nCDG->SVO\n\nOutput\nhome\n\nInput\n\
  3\nSVO\nSVO->HKT\nHKT->SVO\nSVO->RAP\n\nOutput\ncontest\n\n\n\n-----Note-----\n\n\
  In the first sample Jinotega might first fly from SVO to CDG and back, and then\
  \ from SVO to LHR and back, so now they should be at home. In the second sample\
  \ Jinotega must now be at RAP because a flight from RAP back to SVO is not on the\
  \ list."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def determine_location (n : Nat) (home_airport : String) (flights\
  \ : List String) : String :=\n  sorry\n"
"vc-theorems": "theorem determine_location_valid_output (n : Nat) (home_airport :\
  \ String) (flights : List String) :\n  determine_location n home_airport flights\
  \ = \"home\" ∨ \n  determine_location n home_airport flights = \"contest\" :=\n\
  \  sorry\n\n\ntheorem determine_location_parity (n : Nat) (home_airport : String)\
  \ (flights : List String) :\n  determine_location n home_airport flights = \n  \
  \  if n % 2 = 1 then \"contest\" else \"home\" :=\n  sorry\n\n\ntheorem determine_location_parity_simple\
  \ (n : Nat) :\n  determine_location n \"ABC\" [] = \n    if n % 2 = 1 then \"contest\"\
  \ else \"home\" :=\n  sorry\n\n/--\ninfo: 'home'\n-/\n#guard_msgs in\n#eval determine_location\
  \ 4 \"SVO\" [\"SVO->CDG\", \"LHR->SVO\", \"SVO->LHR\", \"CDG->SVO\"]\n\n/--\ninfo:\
  \ 'contest'\n-/\n#guard_msgs in\n#eval determine_location 3 \"SVO\" [\"SVO->HKT\"\
  , \"HKT->SVO\", \"SVO->RAP\"]\n\n/--\ninfo: 'contest'\n-/\n#guard_msgs in\n#eval\
  \ determine_location 1 \"ESJ\" [\"ESJ->TSJ\"]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
