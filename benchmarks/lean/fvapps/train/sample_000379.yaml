"vc-description": "In a given integer array A, we must move every element of A to\
  \ either list B or list C. (B and C initially start empty.)\nReturn true if and\
  \ only if after such a move, it is possible that the average value of B is equal\
  \ to the average value of C, and B and C are both non-empty.\nExample :\nInput:\
  \ \n[1,2,3,4,5,6,7,8]\nOutput: true\nExplanation: We can split the array into [1,4,5,8]\
  \ and [2,3,6,7], and both of them have the average of 4.5.\n\nNote:\n\nThe length\
  \ of A will be in the range [1, 30].\nA[i] will be in the range of [0, 10000]."
"vc-preamble": "import Imports.AllImports\n\ndef split_array_same_average (arr : List\
  \ Int) : Bool :=\nsorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sum_list (l : List Int) : Int :=\nl.foldl (· + ·) 0\n"
"vc-theorems": "theorem split_array_verification {arr : List Int} \n  (h : split_array_same_average\
  \ arr = true) \n  (h1 : arr.length ≥ 2)\n  (h2 : ∀ x ∈ arr, x ≥ 0 ∧ x ≤ 100) :\n\
  \  ∃ (subset1 subset2 : List Int),\n    subset1 ≠ [] ∧ \n    subset2 ≠ [] ∧\n  \
  \  (∀ x, x ∈ subset1 ∨ x ∈ subset2 ↔ x ∈ arr) ∧\n    (sum_list subset1) * subset2.length\
  \ = (sum_list subset2) * subset1.length :=\nsorry\n\n\ntheorem single_element_false\
  \ {x : Int} (h : x ≥ 1 ∧ x ≤ 10) :\n  split_array_same_average [x] = false :=\n\
  sorry\n\n\ntheorem identical_elements_splittable {x : Int} {n : Nat}\n  (h : n ≥\
  \ 2) :\n  split_array_same_average (List.replicate n x) = true :=\nsorry\n\n/--\n\
  info: True\n-/\n#guard_msgs in\n#eval split_array_same_average [1, 2, 3, 4, 5, 6,\
  \ 7, 8]\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval split_array_same_average [1,\
  \ 2, 3]\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval split_array_same_average [3,\
  \ 1, 2]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
