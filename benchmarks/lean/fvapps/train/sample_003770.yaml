"vc-description": "You might know some pretty large perfect squares.  But what about\
  \ the NEXT one?\n\nComplete the `findNextSquare` method that finds the next integral\
  \ perfect square after the one passed as a parameter.  Recall that an integral perfect\
  \ square is an integer n such that sqrt(n) is also an integer.  \n\nIf the parameter\
  \ is itself not a perfect square then `-1` should be returned.  You may assume the\
  \ parameter is positive.\n\n\n**Examples:**\n\n```\nfindNextSquare(121) --> returns\
  \ 144\nfindNextSquare(625) --> returns 676\nfindNextSquare(114) --> returns -1 since\
  \ 114 is not a perfect\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sqrt (n : Nat) : Nat := sorry\n\ndef find_next_square (n :\
  \ Nat) : Int := sorry\n"
"vc-theorems": "theorem next_square_of_perfect (n : Nat) (h : ∃ k, n = k * k) : \n\
  \  find_next_square n = ((sqrt n + 1) * (sqrt n + 1)) := sorry\n\n\ntheorem non_square_returns_minus_one\
  \ (n : Nat) (h : ¬∃ k, n = k * k) :\n  find_next_square n = -1 := sorry\n\n/--\n\
  info: 144\n-/\n#guard_msgs in\n#eval find_next_square 121\n\n/--\ninfo: 676\n-/\n\
  #guard_msgs in\n#eval find_next_square 625\n\n/--\ninfo: -1\n-/\n#guard_msgs in\n\
  #eval find_next_square 155\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
