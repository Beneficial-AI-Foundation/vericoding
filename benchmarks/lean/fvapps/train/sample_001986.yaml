"vc-description": "It is known that there are k fish species in the polar ocean, numbered\
  \ from 1 to k. They are sorted by non-decreasing order of their weight, which is\
  \ a positive number. Let the weight of the i-th type of fish be w_{i}, then 0 <\
  \ w_1 ≤ w_2 ≤ ... ≤ w_{k} holds.\n\nPolar bears Alice and Bob each have caught some\
  \ fish, and they are guessing who has the larger sum of weight of the fish he/she's\
  \ caught. Given the type of the fish they've caught, determine whether it is possible\
  \ that the fish caught by Alice has a strictly larger total weight than Bob's. In\
  \ other words, does there exist a sequence of weights w_{i} (not necessary integers),\
  \ such that the fish caught by Alice has a strictly larger total weight?\n\n\n-----Input-----\n\
  \nThe first line contains three integers n, m, k (1 ≤ n, m ≤ 10^5, 1 ≤ k ≤ 10^9)\
  \ — the number of fish caught by Alice and Bob respectively, and the number of fish\
  \ species.\n\nThe second line contains n integers each from 1 to k, the list of\
  \ fish type caught by Alice. The third line contains m integers each from 1 to k,\
  \ the list of fish type caught by Bob.\n\nNote that one may have caught more than\
  \ one fish for a same species.\n\n\n-----Output-----\n\nOutput \"YES\" (without\
  \ quotes) if it is possible, and \"NO\" (without quotes) otherwise.\n\n\n-----Examples-----\n\
  Input\n3 3 3\n2 2 2\n1 1 3\n\nOutput\nYES\n\nInput\n4 7 9\n5 2 7 3\n3 5 2 7 3 8\
  \ 7\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first sample, if w_1 = 1, w_2\
  \ = 2, w_3 = 2.5,  then Alice has a total of 2 + 2 + 2 = 6 weight units, while Bob\
  \ only has 1 + 1 + 2.5 = 4.5.\n\nIn the second sample, the fish that Alice caught\
  \ is a subset of Bob's. Therefore, the total weight of Bob’s fish is always not\
  \ less than the total weight of Alice’s fish."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_fish_weights (n m k : Nat) (alice_fish bob_fish : List\
  \ Nat) : String := sorry\n\ntheorem solve_fish_weights_result_is_yes_or_no \n  (n\
  \ m k : Nat) \n  (alice_fish bob_fish : List Nat)\n  (h1 : 1 ≤ n ∧ n ≤ 100)\n  (h2\
  \ : 1 ≤ m ∧ m ≤ 100)\n  (h3 : 1 ≤ k ∧ k ≤ 1000000000)\n  (h4 : ∀ x ∈ alice_fish,\
  \ 1 ≤ x ∧ x ≤ 1000000000)\n  (h5 : ∀ x ∈ bob_fish, 1 ≤ x ∧ x ≤ 1000000000) :\n \
  \ solve_fish_weights n m k alice_fish bob_fish = \"YES\" ∨ \n  solve_fish_weights\
  \ n m k alice_fish bob_fish = \"NO\" := sorry\n"
"vc-theorems": "theorem solve_fish_weights_longer_alice_wins\n  (n m k : Nat)\n  (alice_fish\
  \ bob_fish : List Nat)\n  (h : alice_fish.length > bob_fish.length) :\n  solve_fish_weights\
  \ n m k alice_fish bob_fish = \"YES\" := sorry\n\n\ntheorem solve_fish_weights_yes_condition\n\
  \  (n m k : Nat)\n  (alice_fish bob_fish : List Nat)\n  (h : solve_fish_weights\
  \ n m k alice_fish bob_fish = \"YES\") :\n  alice_fish.length > bob_fish.length\
  \ ∨\n  (∃ pair ∈ (List.zip alice_fish bob_fish), pair.1 > pair.2) := sorry\n\n\n\
  theorem solve_fish_weights_identical_lists\n  (n k : Nat)\n  (fish : List Nat)\n\
  \  (h1 : 1 ≤ n ∧ n ≤ 100) :\n  solve_fish_weights n n k fish fish = \"NO\" := sorry\n\
  \n\ntheorem solve_fish_weights_single_comparison\n  (n k : Nat) :\n  solve_fish_weights\
  \ 1 1 k [2] [1] = \"YES\" ∧\n  solve_fish_weights 1 1 k [1] [2] = \"NO\" := sorry\n\
  \n/--\ninfo: 'YES'\n-/\n#guard_msgs in\n#eval solve_fish_weights 3 3 3 [2, 2, 2]\
  \ [1, 1, 3]\n\n/--\ninfo: 'NO'\n-/\n#guard_msgs in\n#eval solve_fish_weights 4 7\
  \ 9 [5, 2, 7, 3] [3, 5, 2, 7, 3, 8, 7]\n\n/--\ninfo: 'YES'\n-/\n#guard_msgs in\n\
  #eval solve_fish_weights 1 1 1000000000 [502700350] [502700349]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
