"vc-description": "Tomya is a girl. She loves Chef Ciel very much.\n\nToday, too,\
  \ Tomya is going to Ciel's restaurant.\nOf course, Tomya would like to go to Ciel's\
  \ restaurant as soon as possible.\nTherefore Tomya uses one of the shortest paths\
  \ from Tomya's house to Ciel's restaurant.\nOn the other hand, Tomya is boring now\
  \ to use the same path many times.\nSo Tomya wants to know the number of shortest\
  \ paths from Tomya's house to Ciel's restaurant.\nYour task is to calculate the\
  \ number under the following assumptions.\n\nThis town has N intersections and M\
  \ two way roads.\nThe i-th road connects from the Ai-th intersection to the Bi-th\
  \ intersection, and its length is \n\nCi.\nTomya's house is in the 1st intersection,\
  \ and Ciel's restaurant is in the N-th intersection.\n\n-----Input-----\n\nThe first\
  \ line contains an integer T, the number of test cases.\nThen T test cases follow.\n\
  The first line of each test case contains 2 integers N, M.\nThen next M lines contains\
  \ 3 integers denoting Ai, Bi and Ci.\n\n-----Output-----\n\nFor each test case,\
  \ print the number of shortest paths from Tomya's house to Ciel's restaurant.\n\n\
  -----Constraints-----\n\n1 ≤ T ≤ 10\n\n2 ≤ N ≤ 10\n\n1 ≤ M ≤ N ∙ (N – 1) / 2\n\n\
  1 ≤ Ai, Bi ≤ N\n\n1 ≤ Ci ≤ 10\nAi ≠ Bi\n\nIf i ≠ j and Ai = Aj, then Bi ≠ Bj\n\n\
  There is at least one path from Tomya's house to Ciel's restaurant.\n\n-----Sample\
  \ Input-----\n2\n3 3\n1 2 3\n2 3 6\n1 3 7\n3 3\n1 2 3\n2 3 6\n1 3 9\n\n-----Sample\
  \ Output-----\n1\n2\n\n-----Explanations-----\n\nIn the first sample, only one shortest\
  \ path exists, which is 1-3.\n\nIn the second sample, both paths 1-2-3 and 1-3 are\
  \ the shortest paths."
"vc-preamble": "import Imports.AllImports\n\ndef Edge := Nat × Nat × Nat\ndef Graph\
  \ := List Edge\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_shortest_paths (n : Nat) (edges : Graph) : Nat :=\n \
  \ sorry\n"
"vc-theorems": "theorem count_paths_positive \n  (n : Nat) (edges : Graph) \n  (h1\
  \ : n ≥ 2)\n  (h2 : edges.length > 0) :\n  count_shortest_paths n edges > 0 := \n\
  \  sorry\n\n\ntheorem count_paths_permutation_invariant\n  (n : Nat) (edges1 edges2\
  \ : Graph)\n  (h : edges2 = edges1) :\n  count_shortest_paths n edges1 = count_shortest_paths\
  \ n edges2 :=\n  sorry\n\n\ntheorem count_paths_weight_order_invariant\n  (n : Nat)\
  \ (edges edges_rev : Graph)\n  (h : edges_rev = edges) :\n  count_shortest_paths\
  \ n edges = count_shortest_paths n edges_rev :=\n  sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs\
  \ in\n#eval count_shortest_paths 3 [(1, 2, 3), (2, 3, 6), (1, 3, 7)]\n\n/--\ninfo:\
  \ 2\n-/\n#guard_msgs in\n#eval count_shortest_paths 3 [(1, 2, 3), (2, 3, 6), (1,\
  \ 3, 9)]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
