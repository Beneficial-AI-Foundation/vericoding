"vc-description": "Tranform of input array of zeros and ones to array in which counts\
  \ number of continuous ones:\n\n[1, 1, 1, 0, 1] -> [3,1]"
"vc-preamble": "import Imports.AllImports\n\ndef ones_counter (nums : List Int) :\
  \ List Int :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sum_list : List Int → Int \n  | [] => 0\n  | x::xs => x + sum_list\
  \ xs\n"
"vc-theorems": "theorem ones_counter_positive (nums : List Int) :\n  ∀ x ∈ ones_counter\
  \ nums, x > 0\n:= sorry\n\n\ntheorem ones_counter_sum (nums : List Int) :\n  sum_list\
  \ (ones_counter nums) = sum_list nums\n:= sorry\n\n\ntheorem ones_counter_grouped\
  \ (nums : List Int) :\n  ones_counter nums = \n    let rec group_ones (ns : List\
  \ Int) (acc : Int) (result : List Int) : List Int :=\n      match ns with\n    \
  \  | [] => if acc > 0 then result ++ [acc] else result\n      | x::xs => if x =\
  \ 1 \n                 then group_ones xs (acc + 1) result\n                 else\
  \ if acc > 0 \n                      then group_ones xs 0 (result ++ [acc])\n  \
  \                    else group_ones xs 0 result\n    group_ones nums 0 []\n:= sorry\n\
  \n\ntheorem ones_counter_all_zeros {nums : List Int} (h : ∀ x ∈ nums, x = 0) :\n\
  \  ones_counter nums = []\n:= sorry\n\n\ntheorem ones_counter_all_ones {nums : List\
  \ Int} (h : ∀ x ∈ nums, x = 1) (h' : nums ≠ []) :\n  ones_counter nums = [((List.length\
  \ nums) : Int)]\n:= sorry\n\n/--\ninfo: []\n-/\n#guard_msgs in\n#eval ones_counter\
  \ [0, 0, 0, 0, 0, 0, 0, 0]\n\n/--\ninfo: [3, 1, 2]\n-/\n#guard_msgs in\n#eval ones_counter\
  \ [1, 1, 1, 0, 0, 1, 0, 1, 1, 0]\n\n/--\ninfo: [1, 2, 4, 1]\n-/\n#guard_msgs in\n\
  #eval ones_counter [1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
