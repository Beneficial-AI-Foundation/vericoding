"vc-description": "A string with length $L$ is called rich if $L \\ge 3$ and there\
  \ is a character which occurs in this string strictly more than $L/2$ times.\nYou\
  \ are given a string $S$ and you should answer $Q$ queries on this string. In each\
  \ query, you are given a substring $S_L, S_{L+1}, \\ldots, S_R$. Consider all substrings\
  \ of this substring. You have to determine whether at least one of them is rich.\n\
  \n-----Input-----\n- The first line of the input contains a single integer $T$ denoting\
  \ the number of test cases. The description of $T$ test cases follows.\n- The first\
  \ line of each test case contains two space-separated integers $N$ and $Q$.\n- The\
  \ second line contains a single string $S$ with length $N$.\n- Each of the next\
  \ $Q$ lines contains two space-separated integers $L$ and $R$ describing a query.\n\
  \n-----Output-----\nFor each query, print a single line containing the string \"\
  YES\" if the given substring contains a rich substring or \"NO\" if it does not\
  \ contain any rich substring.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n-\
  \ $1 \\le N, Q \\le 10^5$\n- $1 \\le L \\le R \\le N$\n- $S$ contains only lowercase\
  \ English letters\n\n-----Example Input-----\n1\n10 2\nhelloworld\n1 3\n1 10\n\n\
  -----Example Output-----\nNO\nYES"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_rich_substrings (s : String) (queries : List (Nat × Nat))\
  \ : List String :=\n  sorry\n"
"vc-theorems": "theorem empty_queries_give_empty_result (s : String) :\n  solve_rich_substrings\
  \ s [] = [] :=\n  sorry\n\n\ntheorem too_short_range_always_no (s : String) (queries\
  \ : List (Nat × Nat)) :\n  (∀ q ∈ queries, q.1 = 1 ∧ q.2 = 2) →\n  ∀ r ∈ solve_rich_substrings\
  \ s queries, r = \"NO\" :=\n  sorry \n\n\ntheorem result_length_matches_queries\
  \ (s : String) (queries : List (Nat × Nat)) :\n  (∀ q ∈ queries, q.1 < q.2 ∧ q.2\
  \ ≤ s.length) →\n  (solve_rich_substrings s queries).length = queries.length :=\n\
  \  sorry\n\n\ntheorem results_only_yes_or_no (s : String) (queries : List (Nat ×\
  \ Nat)) :\n  (∀ q ∈ queries, q.1 < q.2 ∧ q.2 ≤ s.length) →\n  ∀ r ∈ solve_rich_substrings\
  \ s queries, r = \"YES\" ∨ r = \"NO\" :=\n  sorry\n\n/--\ninfo: ['NO', 'YES']\n\
  -/\n#guard_msgs in\n#eval solve_rich_substrings \"helloworld\" [[1, 3], [1, 10]]\n\
  \n/--\ninfo: ['YES']\n-/\n#guard_msgs in\n#eval solve_rich_substrings \"aaa\" [[1,\
  \ 3]]\n\n/--\ninfo: ['NO']\n-/\n#guard_msgs in\n#eval solve_rich_substrings \"abc\"\
  \ [[1, 3]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
