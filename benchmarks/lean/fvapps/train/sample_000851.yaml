"vc-description": "Vanja and Miksi really like games. After playing one game for a\
  \ long time, they decided to invent another game!\nIn this game, they have a sequence\
  \ $A_1, A_2, \\dots, A_N$ and two numbers $Z_1$ and $Z_2$. The rules of the game\
  \ are as follows:\n- The players take turns alternately, starting with Vanja.\n\
  - There is an integer $S$; at the beginning, $S = 0$.\n- In each turn, the current\
  \ player must choose an arbitrary element of $A$ and either add that number to $S$\
  \ or subtract it from $S$. Each element can be selected multiple times.\n- Afterwards,\
  \ if $S = Z_1$ or $S = Z_2$, the current player (the player who made $S$ equal to\
  \ $Z_1$ or $Z_2$) is the winner of the game.\n- If the game lasts for $10^{10}$\
  \ turns, Vanja and Miksi decide to declare it a tie.\nCan you help the boys determine\
  \ the winner of the game? Please note that the game can end in a tie (if nobody\
  \ can make $S = Z_1$ or $S = Z_2$ in the first $10^{10}$ moves).\nBoth players play\
  \ optimally, i.e. if there is a move which guarantees the current player's victory\
  \ regardless of the other player's moves, the current player will make such a move.\
  \ If the current player cannot win and there is a move which guarantees that the\
  \ game will end in a tie, the current player will make such a move.\n\n-----Input-----\n\
  - The first line of the input contains a single integer $T$ denoting the number\
  \ of test cases. The description of $T$ test cases follows.\n- The first line of\
  \ each test case contains three space-separated integers $N$, $Z_1$ and $Z_2$.\n\
  - The second line contains $N$ space-separated integers $A_1, A_2, \\dots, A_N$.\n\
  \n-----Output-----\n- For each test case, print a single line containing one integer\
  \ — the final result of the game:\n- $1$ if Vanja (the first player) has a winning\
  \ strategy\n- $2$ if Miksi (the second player) has a winning strategy\n- $0$ if\
  \ the game ends in a tie\n\n-----Constraints-----\n- $1 \\le T \\le 50$\n- $1 \\\
  le N \\le 50$\n- $|Z_1|, |Z_2| \\le 10^9$\n- $|A_i| \\le 10^9$ for each valid $i$\n\
  \n-----Subtasks-----\nSubtask #1 (25 points): $N = 2$\nSubtask #2 (75 points): original\
  \ constraints\n\n-----Example Input-----\n3\n2 6 4\n-4 10\n1 1 -1\n2\n2 0 7\n3 4\n\
  \n-----Example Output-----\n1\n0\n2\n\n-----Explanation-----\nExample case 1: The\
  \ first player can choose the value $A_1 = -4$, subtract it from $S = 0$ and obtain\
  \ $S = - (-4) = 4 = Z_2$. The winner is the first player.  \nExample case 2: It\
  \ can be proven that neither player is able to reach $S = Z_1$ or $S = Z_2$. The\
  \ result is a tie."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": ""
"vc-theorems": "theorem result_validity \n  (N : Nat) (Z1 Z2 : Int) (A : List Int)\n\
  \  (h1 : N > 0) (h2 : N ≤ 100)\n  (h3 : Z1 ≥ -1000) (h4 : Z1 ≤ 1000)\n  (h5 : Z2\
  \ ≥ -1000) (h6 : Z2 ≤ 1000)\n  (h7 : ∀ a ∈ A, a ≥ -1000 ∧ a ≤ 1000)\n  (h8 : A.length\
  \ ≥ 1) (h9 : A.length ≤ 100) :\n  let result := solve_game N Z1 Z2 A\n  result =\
  \ 0 ∨ result = 1 ∨ result = 2 := sorry\n\n-- Property: Result should be 1 if target\
  \ is immediately reachable\n\ntheorem immediate_win\n  (N : Nat) (Z : Int) (A :\
  \ List Int) (a : Int)\n  (h1 : N > 0) (h2 : N ≤ 100)\n  (h3 : Z ≥ -1000) (h4 : Z\
  \ ≤ 1000)\n  (h5 : a ∈ A)\n  (h6 : A.length ≥ 1) (h7 : A.length ≤ 100)\n  (h8 :\
  \ Int.natAbs a = Int.natAbs Z) :\n  solve_game N Z (Z + 1) [a] = 1 := sorry\n\n\
  -- Property: Result should be symmetric for negated inputs\n\ntheorem negation_symmetry\n\
  \  (N : Nat) (Z1 Z2 : Int) (A : List Int)\n  (h1 : N > 0) (h2 : N ≤ 100)\n  (h3\
  \ : Z1 ≥ -1000) (h4 : Z1 ≤ 1000)\n  (h5 : Z2 ≥ -1000) (h6 : Z2 ≤ 1000)\n  (h7 :\
  \ ∀ a ∈ A, a ≥ -1000 ∧ a ≤ 1000)\n  (h8 : A.length ≥ 1) (h9 : A.length ≤ 100) :\n\
  \  solve_game N Z1 Z2 A = solve_game N (-Z1) (-Z2) (A.map (·*(-1))) := sorry\n\n\
  -- Property: Single number case should be deterministic\n\ntheorem single_number\n\
  \  (num Z1 Z2 : Int)\n  (h1 : num ≥ -1000) (h2 : num ≤ 1000)\n  (h3 : Z1 ≥ -1000)\
  \ (h4 : Z1 ≤ 1000)\n  (h5 : Z2 ≥ -1000) (h6 : Z2 ≤ 1000) :\n  let result := solve_game\
  \ 1 Z1 Z2 [num]\n  (Int.natAbs num = Int.natAbs Z1 ∨ Int.natAbs num = Int.natAbs\
  \ Z2) → result = 1 ∧\n  ¬(Int.natAbs num = Int.natAbs Z1 ∨ Int.natAbs num = Int.natAbs\
  \ Z2) → (result = 0 ∨ result = 2) := sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n\
  #eval solve_game 2 6 4 [-4, 10]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval solve_game\
  \ 1 1 -1 [2]\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval solve_game 2 0 7 [3, 4]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
