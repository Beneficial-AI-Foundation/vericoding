"vc-description": "You are given a weighted undirected graph consisting of n$n$ nodes\
  \ and m$m$ edges. The nodes are numbered from 1$1$ to n$n$. The graph does not contain\
  \ any multiple edges or self loops.\nA walk W$W$ on the graph is a sequence of vertices\
  \ (with repetitions of vertices and edges allowed) such that every adjacent pair\
  \ of vertices in the sequence is an edge of the graph. We define the cost of a walk\
  \ W$W$, Cost(W)$Cost(W)$, as the maximum over the weights of the edges along the\
  \ walk. \nYou will be given q$q$ queries. In each query, you will be given an integer\
  \ X$X$.\n\nYou have to count the number of different walks W$W$ of length 4$4$ such\
  \ that Cost(W)$Cost(W)$ = X$X$.\n\nTwo walks are considered different if they do\
  \ not represent the same edge sequence.\n\n-----Input:-----\n- First line contains\
  \ 2 integers : the number of nodes n$n$ and number of edges m$m$.\n- Next m$m$ lines\
  \ each describe u$u$, v$v$ and w$w$, describing an edge between u$u$ and v$v$ with\
  \ weight w$w$.\n- Next line contains q$q$, the number of queries.\n- Next q$q$ lines\
  \ each describe an integer X$X$ - the cost of the walk in the query.\n\n-----Output:-----\n\
  For each query, output in a single line the number of different possible walks.\n\
  \n-----Constraints-----\n- 1≤n≤100$1 \\leq n \\leq 100$\n- 1≤m≤n(n−1)2$1 \\leq m\
  \ \\leq \\frac{n (n-1)}{2}$\n- 1≤u,v≤n$1 \\leq u, v \\leq n$\n- 1≤w≤100$1 \\leq\
  \ w \\leq 100$\n- 1≤q≤100$1 \\leq q \\leq 100$\n- 1≤X≤100$1 \\leq X \\leq 100$\n\
  \n-----Sample Input:-----\n3 3\n1 2 1\n2 3 2\n3 1 3\n3\n1\n2\n3\n\n-----Sample Output:-----\n\
  2\n10\n36\n\n-----EXPLANATION:-----\nFor X=2$X = 2$, all possible 10$10$ walks are\
  \ listed below :\n- 1 -> 2 -> 1 -> 2 -> 3\n- 1 -> 2 -> 3 -> 2 -> 1\n- 1 -> 2 ->\
  \ 3 -> 2 -> 3\n- 2 -> 1 -> 2 -> 3 -> 2\n- 2 -> 3 -> 2 -> 1 -> 2\n- 2 -> 3 -> 2 ->\
  \ 3 -> 2\n- 3 -> 2 -> 1 -> 2 -> 1\n- 3 -> 2 -> 1 -> 2 -> 3\n- 3 -> 2 -> 3 -> 2 ->\
  \ 1\n- 3 -> 2 -> 3 -> 2 -> 3"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_walk_queries (n : Nat) (edges : List (List Nat)) (queries\
  \ : List Nat) : List Nat := sorry\n\ndef count_walks (g : GraphWalks) (k : Nat)\
  \ : Nat := sorry\n\n/- Main theorems corresponding to property tests -/\n\n-- Test\
  \ that all query results are non-negative"
"vc-theorems": "theorem query_results_non_negative \n  {n : Nat} {edges : List (List\
  \ Nat)} {queries : List Nat}\n  (h_n : n ≥ 2)\n  (h_edges : edges.length > 0)\n\
  \  (h_queries : queries.length > 0) :\n  let results := solve_walk_queries n edges\
  \ queries\n  (∀ r ∈ results, r ≥ 0) ∧ \n  (results.length = queries.length) :=\n\
  sorry\n\n-- Test minimal graph case\n\ntheorem minimal_graph_walks :\n  let n :=\
  \ 2\n  let edges := [[1,2,1]]\n  let graph := { n := n, edges := edges : GraphWalks\
  \ }\n  count_walks graph 1 = 2 :=\nsorry\n\n-- Test triangle graph case\n\ntheorem\
  \ triangle_graph_walks :\n  let n := 3\n  let edges := [[1,2,1], [2,3,2], [3,1,3]]\n\
  \  let queries := [1, 2, 3]\n  solve_walk_queries n edges queries = [2, 10, 36]\
  \ :=\nsorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
