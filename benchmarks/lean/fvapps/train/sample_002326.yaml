"vc-description": "Given a string s consists of upper/lower-case alphabets and empty\
  \ space characters ' ', return the length of last word in the string.\n\nIf the\
  \ last word does not exist, return 0.\n\nNote: A word is defined as a character\
  \ sequence consists of non-space characters only.\n\nExample:\n\nInput: \"Hello\
  \ World\"\nOutput: 5"
"vc-preamble": "import Imports.AllImports\n\ndef splitString (s: String) : List String\
  \ :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def lengthOfLastWord (s: String) : Nat :=\n  sorry\n"
"vc-theorems": "theorem length_of_last_word_nonnegative (s: String) :\n  lengthOfLastWord\
  \ s ≥ 0 := sorry\n\n\ntheorem length_of_last_word_matches_split (s: String) :\n\
  \  lengthOfLastWord s > 0 →\n  match splitString s with\n  | [] => True \n  | xs\
  \ => lengthOfLastWord s = xs.getLast!.length\n  := sorry\n\n\ntheorem length_of_last_word_empty_for_blank\
  \ (s: String) :\n  s.trim.isEmpty → lengthOfLastWord s = 0 := sorry\n\n\ntheorem\
  \ length_of_last_word_ignores_trailing_spaces (s: String) :\n  lengthOfLastWord\
  \ s = lengthOfLastWord s.trim := sorry\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval\
  \ length_of_last_word \"Hello World\"\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval\
  \ length_of_last_word \"   \"\n\n/--\ninfo: 7\n-/\n#guard_msgs in\n#eval length_of_last_word\
  \ \"Hello   World   Program\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
