"vc-description": "`Description:`\n\nGiven an input array (`arr`) of positive integers,\
  \ the objective is to return an output array where each index represents the amount\
  \ of times an element appeared (frequency) in the input array. \n\nMore specifically,\
  \ the element at each index of the output array will be an array (bucket) containing\
  \ integers that appeared index-amount-of-times. \n\nOtherwise, slot nulls (JavaScript,\
  \ Java), None's (Python) nils (Ruby), or NULL's (C/C++) where appropriate. A valid\
  \ array will always be provided.\n\nIf an array of [1,2,3,4,4,5,5,5] is passed in,\
  \ the expected output should be: [null, [1,2,3], [4], [5], null, null, null, null,\
  \ null].\n\n`Explanation:`\n\n```python\n# bucketize(arr) ======> outputArray\n\
  bucketize(1,2,3,4,4,5,5,5) ======> [None, [1, 2, 3], [4], [5], None, None, None,\
  \ None, None]\n```\n\nAn element cannot appear 0 times, so a null is placed at outputArray[0].\
  \ The elements 1, 2, and 3 appear once. This is why they are located at outputArray[1].\
  \ Notice the elements are grouped together in an array and sorted in ascending order.\
  \ The element 4 appears twice. This is why it is located at outputArray[2]. The\
  \ element 5 appears three times. This is why it is located at outputArray[3]. \n\
  \nAlthough an integer could have possibly appeared four, five, six, seven, or eight\
  \ times, this is not the case for this particular example. This is the reason why\
  \ the elements at outputArray[4], outputArray[5], outputArray[6], outputArray[7],\
  \ and outputArray[8] are all null values.\n\n`Examples:`\n\n```python\nbucketize(2,2,4,4,6,6,9,9,9,9)\
  \ ==> [None, None, [2,4,6], None, [9], None, None, None, None, None, None]\nbucketize(3,3,3,3,2)\
  \ ============> [None, [2], None, None, [3], None]\nbucketize(5,5,5,5,5) ============>\
  \ [None, None, None, None, None, [5]]\nbucketize(77,3,40,40,40) ========> [None,\
  \ [3,77], None, [40], None, None]\nbucketize(16,7,5,3,6,23) ========> [None, [3,5,6,7,16,23],\
  \ None, None, None, None, None]\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def bucketize : List Int → List (Option (List Int)) := sorry\n\n\
  /-\n  The bucketize function returns a list with length equal to one plus\n  the\
  \ length of the input list \n-/"
"vc-theorems": "theorem bucketize_length (nums : List Int) : \n  (bucketize nums).length\
  \ = nums.length + 1 := sorry\n\n/-\n  For each non-empty bucket in the output, its\
  \ elements are sorted\n-/\n\ntheorem bucketize_sorted (nums : List Int) (i : Nat)\
  \ (bucket : List Int) :\n  (bucketize nums).get? i = some (some bucket) →\n  ∀ x\
  \ y, x ∈ bucket → y ∈ bucket → bucket.indexOf x ≤ bucket.indexOf y → x ≤ y := sorry\n\
  \n/-\n  For each number in bucket i, that number appears exactly i times in the\
  \ input list\n-/\n\ntheorem bucketize_frequency (nums : List Int) (i : Nat) (bucket\
  \ : List Int) (n : Int) :\n  (bucketize nums).get? i = some (some bucket) → \n \
  \ n ∈ bucket →\n  (nums.filter (· = n)).length = i := sorry\n\nend Bucketize\n\n\
  /--\ninfo: expected\n-/\n#guard_msgs in\n#eval bucketize 2 2 4 4 6 6 9 9 9 9\n\n\
  /--\ninfo: expected\n-/\n#guard_msgs in\n#eval bucketize 3 3 3 3 2\n\n/--\ninfo:\
  \ expected\n-/\n#guard_msgs in\n#eval bucketize 77 3 40 40 40\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
