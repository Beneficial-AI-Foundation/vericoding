vc-description: |-
  Given a list of words, each word consists of English lowercase letters.
  Let's say word1 is a predecessor of word2 if and only if we can add exactly one letter anywhere in word1 to make it equal to word2.  For example, "abc" is a predecessor of "abac".
  A word chain is a sequence of words [word_1, word_2, ..., word_k] with k >= 1, where word_1 is a predecessor of word_2, word_2 is a predecessor of word_3, and so on.
  Return the longest possible length of a word chain with words chosen from the given list of words.
   
  Example 1:
  Input: ["a","b","ba","bca","bda","bdca"]
  Output: 4
  Explanation: one of the longest word chain is "a","ba","bda","bdca".

   
  Note:

  1 <= words.length <= 1000
  1 <= words[i].length <= 16
  words[i] only consists of English lowercase letters.
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def longest_str_chain (words : List String) : Nat :=
    sorry
vc-theorems: |
  theorem longest_str_chain_non_negative 
    (words : List String) :
    longest_str_chain words ≥ 0 :=
  sorry


  theorem longest_str_chain_empty_list :
    longest_str_chain [] = 0 :=
  sorry


  theorem longest_str_chain_bounded_by_length
    (words : List String) :
    longest_str_chain words ≤ words.length :=
  sorry


  theorem longest_str_chain_singleton
    (word : String) :
    longest_str_chain [word] = 1 :=
  sorry


  theorem longest_str_chain_same_length_words
    (words : List String)
    (h : ∀ w ∈ words, w.length = 1) : 
    longest_str_chain words = 1 :=
  sorry


  theorem longest_str_chain_decreasing
    (word : String)
    (chain := List.range word.length |>.map (fun i => word.take (word.length - i))) :
    longest_str_chain chain = word.length ∨ longest_str_chain chain = 1 :=
  sorry

  /--
  info: 4
  -/
  #guard_msgs in
  #eval longest_str_chain ["a", "b", "ba", "bca", "bda", "bdca"]

  /--
  info: 5
  -/
  #guard_msgs in
  #eval longest_str_chain ["xbc", "pcxbcf", "xb", "cxbc", "pcxbc"]

  /--
  info: 2
  -/
  #guard_msgs in
  #eval longest_str_chain ["a", "b", "ab", "bac"]
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
