"vc-description": "We are given a list of (axis-aligned) rectangles.  Each rectangle[i]\
  \ = [x1, y1, x2, y2] , where (x1, y1) are the coordinates of the bottom-left corner,\
  \ and (x2, y2) are the coordinates of the top-right corner of the ith rectangle.\n\
  Find the total area covered by all rectangles in the plane.  Since the answer may\
  \ be too large, return it modulo 10^9 + 7.\n\nExample 1:\nInput: [[0,0,2,2],[1,0,2,3],[1,0,3,1]]\n\
  Output: 6\nExplanation: As illustrated in the picture.\n\nExample 2:\nInput: [[0,0,1000000000,1000000000]]\n\
  Output: 49\nExplanation: The answer is 10^18 modulo (10^9 + 7), which is (10^9)^2\
  \ = (-7)^2 = 49.\n\nNote:\n\n1 <= rectangles.length <= 200\nrectanges[i].length\
  \ = 4\n0 <= rectangles[i][j] <= 10^9\nThe total area covered by all rectangles will\
  \ never exceed 2^63 - 1 and thus will fit in a 64-bit signed integer."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calculateRectangleArea (rects : List (List Int)) : Int := sorry\n\
  \ntheorem empty_list_zero_area :\n  calculateRectangleArea [] = 0 := sorry\n"
"vc-theorems": "theorem single_square_area :\n  calculateRectangleArea [[0,0,2,2]]\
  \ = 4 := sorry\n\n\ntheorem disjoint_squares_sum_area :\n  calculateRectangleArea\
  \ [[0,0,1,1], [2,2,3,3]] = 2 := sorry\n\n\ntheorem overlapping_squares_area :\n\
  \  calculateRectangleArea [[0,0,2,2], [1,1,3,3]] = 7 := sorry\n\n/--\ninfo: 6\n\
  -/\n#guard_msgs in\n#eval calculate_rectangle_area [[0, 0, 2, 2], [1, 0, 2, 3],\
  \ [1, 0, 3, 1]]\n\n/--\ninfo: 49\n-/\n#guard_msgs in\n#eval calculate_rectangle_area\
  \ [[0, 0, 1000000000, 1000000000]]\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval calculate_rectangle_area\
  \ [[0, 0, 1, 1], [2, 2, 3, 3]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
