"vc-description": "Given an array of integers, return the maximum sum for a non-empty subarray\
  \ (contiguous elements) with at most one element deletion. In other words, you want\
  \ to choose a subarray and optionally delete one element from it so that there is\
  \ still at least one element left and the sum of the remaining elements is maximum\
  \ possible.\nNote that the subarray needs to be non-empty after deleting one element.\n\
   \nExample 1:\nInput: arr = [1,-2,0,3]\nOutput: 4\nExplanation: Because we can choose\
  \ [1, -2, 0, 3] and drop -2, thus the subarray [1, 0, 3] becomes the maximum value.\n\
  Example 2:\nInput: arr = [1,-2,-2,3]\nOutput: 3\nExplanation: We just choose [3]\
  \ and it's the maximum sum.\n\nExample 3:\nInput: arr = [-1,-1,-1,-1]\nOutput: -1\n\
  Explanation: The final subarray needs to be non-empty. You can't choose [-1] and\
  \ delete -1 from it, then get an empty subarray to make the sum equals to 0.\n\n\
   \nConstraints:\n\n1 <= arr.length <= 10^5\n-10^4 <= arr[i] <= 10^4"
"vc-preamble": "import Imports.AllImports\n\ndef maximum_sum_with_deletion (arr :\
  \ List Int) : Int :=\n  sorry\n\n\ndef list_maximum (arr : List Int) : Int :=\n\
  \  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def list_sum (arr : List Int) : Int :=\n  sorry\n\n\n\n\n\n\n"
"vc-theorems": "theorem positive_scaling {arr : List Int} {scale : Int}\n  (h : arr\
  \ ≠ []) (hs : scale > 0) :\n  maximum_sum_with_deletion (List.map (· * scale) arr)\
  \ = \n  maximum_sum_with_deletion arr * scale :=\nsorry\n\n/--\ninfo: 4\n-/\n#guard_msgs\
  \ in\n#eval maximum_sum_with_deletion [1, -2, 0, 3]\n\n/--\ninfo: 3\n-/\n#guard_msgs\
  \ in\n#eval maximum_sum_with_deletion [1, -2, -2, 3]\n\n/--\ninfo: -1\n-/\n#guard_msgs\
  \ in\n#eval maximum_sum_with_deletion [-1, -1, -1, -1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
