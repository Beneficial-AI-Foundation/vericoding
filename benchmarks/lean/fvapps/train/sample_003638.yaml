"vc-description": "We have an array of unique elements. A special kind of permutation\
  \ is the one that has all of its elements in a different position than the original.\n\
  \nLet's see how many of these permutations may be generated from an array of four\
  \ elements. We put the original array with square brackets and the wanted permutations\
  \ with parentheses. \n```\narr = [1, 2, 3, 4]\n      (2, 1, 4, 3)\n      (2, 3,\
  \ 4, 1)\n      (2, 4, 1, 3)\n      (3, 1, 4, 2)\n      (3, 4, 1, 2)\n      (3, 4,\
  \ 2, 1)\n      (4, 1, 2, 3)\n      (4, 3, 1, 2)\n      (4, 3, 2, 1)\n      _____________\n\
  A total of 9 permutations with all their elements in different positions than arr\n\
  ```\n\nThe task for this kata would be to create a code to count all these permutations\
  \ for an array of certain length.\n\nFeatures of the random tests:\n```\nl = length\
  \ of the array\n10 ≤ l ≤ 5000\n```\n\nSee the example tests.\n\nEnjoy it!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def all_permuted (n : Nat) : Nat := sorry\n\ntheorem all_permuted_nonnegative\
  \ (n : Nat) : \n  all_permuted n ≥ 0 :=\nsorry\n"
"vc-theorems": "theorem all_permuted_base_cases : \n  all_permuted 1 = 0 ∧ all_permuted\
  \ 2 = 1 :=\nsorry\n\n\ntheorem all_permuted_increases (n : Nat) :\n  n > 2 → all_permuted\
  \ n > all_permuted (n-1) :=\nsorry\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval all_permuted\
  \ 1\n\n/--\ninfo: 9\n-/\n#guard_msgs in\n#eval all_permuted 4\n\n/--\ninfo: 97581073836835777732377428235481\n\
  -/\n#guard_msgs in\n#eval all_permuted 30\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
