"vc-description": "## Task:\nYou have to write a function `pattern` which returns\
  \ the following Pattern (See Pattern & Examples) upto `n` number of rows. \n\n*\
  \ Note: `Returning` the pattern is not the same as `Printing` the pattern.\n\n###\
  \ Rules/Note:\n* If `n < 1` then it should return \"\" i.e. empty string.\n* There\
  \ are `no whitespaces` in the pattern.\n\n### Pattern:\n\n    (n)(n-1)(n-2)...4321\n\
  \    (n)(n-1)(n-2)...432\n    (n)(n-1)(n-2)...43\n    (n)(n-1)(n-2)...4\n    ...............\n\
  \    ..............\n    (n)(n-1)(n-2)\n    (n)(n-1)\n    (n)\n    \n### Examples:\n\
  \n* pattern(4):\n\n      4321\n      432\n      43\n      4\n    \n* pattern(11):\n\
  \n      1110987654321\n      111098765432\n      11109876543\n      1110987654\n\
  \      111098765\n      11109876\n      1110987\n      111098\n      11109\n   \
  \   1110\n      11\n\n\n~~~if-not:cfml\n* Hint: Use \\n in string to jump to next\
  \ line\n~~~\n~~~if:cfml\n* Hint: Use chr(10) in string to jump to next line\n~~~\n\
  \n[List of all my katas](\"http://www.codewars.com/users/curious_db97/authored\"\
  )"
"vc-preamble": "import Imports.AllImports\n\ndef pattern (n : Nat) : String := sorry\n\
  \ntheorem pattern_non_positive (n : Nat) (h : n = 0) : \n  pattern n = \"\" := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def get_lines (n : Nat) : List String :=\n  (pattern n).split (·\
  \ = '\\n')\n"
"vc-theorems": "theorem pattern_first_line (n : Nat) (h : n > 0) :\n  (get_lines n)[0]!\
  \ = String.join (List.map toString (List.range n)) := sorry \n\n\ntheorem pattern_line_count\
  \ (n : Nat) (h : n > 0) :\n  (get_lines n).length = n := sorry\n\n\ntheorem pattern_line_length\
  \ (n : Nat) (h : n > 0) (i : Nat) (h2 : i < n) :\n  (get_lines n)[i]!.length = n\
  \ - i := sorry\n\n\ntheorem pattern_line_starts_with_n (n : Nat) (h : n > 0) (i\
  \ : Nat) (h2 : i < n) :\n  (get_lines n)[i]!.front.toString = toString n := sorry\n\
  \n\ntheorem pattern_descending_numbers (n : Nat) (h : n > 0) (i : Nat) (h2 : i <\
  \ n) :\n  let nums := (get_lines n)[i]!.data.map (λ c => c.toString.toNat!);\n \
  \ nums == (List.range (n - i)).map (λ x => n - x) := sorry\n\n/--\ninfo: '4321\\\
  n432\\n43\\n4'\n-/\n#guard_msgs in\n#eval pattern 4\n\n/--\ninfo: '21\\n2'\n-/\n\
  #guard_msgs in\n#eval pattern 2\n\n/--\ninfo: ''\n-/\n#guard_msgs in\n#eval pattern\
  \ 0\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
