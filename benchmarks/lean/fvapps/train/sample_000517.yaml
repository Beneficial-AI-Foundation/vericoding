"vc-description": "Shashank is playing a game with his friends.\nThere are n sticks\
  \ located in a row at points $a_1,a_2, ...,a_n$. Each stick has a height- $h_i$.\
  \ A person can chop a stick down, after which it takes over one of the regions [$a_i$ - $h_i$, $a_i$]\
  \ or [$a_i$, $a_i$ + $h_i$]. The stick that is not chopped remains at the point\
  \ $a_i$. A person can chop a stick in a particular direction if the region to be\
  \ taken up by the chopped stick does not overlap with an already existing point.\
  \ The winner $($s$)$ of the game will be one or more people who can answer the question:\
  \ What is the maximum number of sticks that can be chopped?\nShashank wants to win\
  \ the game and hence he needs needs your help in finding out what is the maximum\
  \ number of sticks that can be chopped down.\n\n-----Input:-----\n- The first line\
  \ of each input contains a single integer n.\n- n lines follow. Each of the n lines\
  \ contain a pair of integers: $a_i,h_i$.\n\n-----Output:-----\nOutput in a single\
  \ line answer- the maximum number of sticks that can be chopped down.\n\n-----Constraints-----\n\
  - $1 \\leq n \\leq 10^5$\n- $1 \\leq a_i,h_i \\leq 10^9$\n- The pairs are given\
  \ in the order of ascending $a_i$. No two sticks are located at the same point.\n\
  \n-----Sample Input 1:-----\n5\n1 2\n2 1\n5 10\n10 9\n19 1\n\n-----Sample Input\
  \ 2:-----\n5\n1 2\n2 1\n5 10\n10 9\n20 1\n\n-----Sample Output 1:-----\n3\n\n-----Sample\
  \ Output 2:-----\n4\n\n-----EXPLANATION:-----\nIn the first example you can fell\
  \ the sticks as follows:\n- chop the stick 1 to the left — now it will take over\
  \ the region $[ - 1;1]$\n- chop the stick 2 to the right — now it will take over\
  \ the region $[2;3]$\n- spare the stick 3— it will take over the point $5$\n- spare\
  \ the stick 4— it will take over the point $10$\n- chop the stick 5 to the right\
  \ — now it will take over the region $[19;20]$"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def Stick := Nat × Nat\n\ndef max_sticks_chopped (sticks : List\
  \ Stick) : Nat :=\n  sorry\n"
"vc-theorems": "theorem output_is_valid_integer (sticks : List Stick) (h : sticks\
  \ ≠ []) : \n  let result := max_sticks_chopped sticks\n  1 ≤ result ∧ result ≤ sticks.length\
  \ :=\nsorry\n\n\ntheorem single_stick_returns_one (pos height : Nat) (h₁ : pos ≥\
  \ 1) (h₂ : height ≥ 1) :\n  max_sticks_chopped [(pos, height)] = 1 :=\nsorry\n\n\
  \ntheorem spreading_sticks_improves_result (sticks : List Stick) (h : sticks.length\
  \ ≥ 2) :\n  let spread_sticks := sticks.enum.map (fun (i, stick) => (i * 100, stick.2))\n\
  \  max_sticks_chopped spread_sticks ≥ max_sticks_chopped sticks :=\nsorry\n\n/--\n\
  info: 3\n-/\n#guard_msgs in\n#eval max_sticks_chopped [(1, 2), (2, 1), (5, 10),\
  \ (10, 9), (19, 1)]\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval max_sticks_chopped\
  \ [(1, 2), (2, 1), (5, 10), (10, 9), (20, 1)]\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n\
  #eval max_sticks_chopped [(1, 2)]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
