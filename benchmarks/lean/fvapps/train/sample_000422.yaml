"vc-description": "Given an array of integers nums and a positive integer k, find\
  \ whether it's possible to divide this array into sets of k consecutive numbers\n\
  Return True if its possible otherwise return False.\n \nExample 1:\nInput: nums\
  \ = [1,2,3,3,4,4,5,6], k = 4\nOutput: true\nExplanation: Array can be divided into\
  \ [1,2,3,4] and [3,4,5,6].\n\nExample 2:\nInput: nums = [3,2,1,2,3,4,3,4,5,9,10,11],\
  \ k = 3\nOutput: true\nExplanation: Array can be divided into [1,2,3] , [2,3,4]\
  \ , [3,4,5] and [9,10,11].\n\nExample 3:\nInput: nums = [3,3,2,2,1,1], k = 3\nOutput:\
  \ true\n\nExample 4:\nInput: nums = [1,2,3,4], k = 3\nOutput: false\nExplanation:\
  \ Each array should be divided in subarrays of size 3.\n\n \nConstraints:\n\n1 <=\
  \ nums.length <= 10^5\n1 <= nums[i] <= 10^9\n1 <= k <= nums.length"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_possible_divide (nums : List Nat) (k : Nat) : Bool := \n\
  \  sorry\n"
"vc-theorems": "theorem list_length_div_k {nums : List Nat} {k : Nat} (h : k > 0)\
  \ : \n  nums.length % k ≠ 0 → ¬(is_possible_divide nums k) :=\n  sorry\n\n\ntheorem\
  \ single_number_sequence {nums : List Nat} (h : nums.length > 0) :\n  is_possible_divide\
  \ nums 1 :=\n  sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval is_possible_divide\
  \ [1, 2, 3, 3, 4, 4, 5, 6] 4\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval is_possible_divide\
  \ [3, 2, 1, 2, 3, 4, 3, 4, 5, 9, 10, 11] 3\n\n/--\ninfo: False\n-/\n#guard_msgs\
  \ in\n#eval is_possible_divide [1, 2, 3, 4] 3\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
