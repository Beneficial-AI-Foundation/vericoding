"vc-description": "Problem Statement:Captain America and Iron Man are at WAR and the\
  \ rage inside Iron Man is rising.\n\nBut Iron Man faces a problem to identify the\
  \ location of Captain America.\n\nThere are N buildings situtaed adjacently to each\
  \ other and Captain America can be at any building.\n\nIron Man has to arrange the\
  \ Buildings from 1 to N is such a way that Value(i.e abs(Building Number -Position\
  \ of Building))=K for every building.\n\nCan You help Iron Man to Find The Arrangement\
  \ of the Buildings?\n\nP.S- If no arrangement exist, then print         \n“CAPTAIN\
  \ AMERICA EVADES”.\n\nInput Format:\nThe first line of input contains a single integer,T,\
  \ denoting the number of test cases.\n\nEach of the T  subsequent lines contains\
  \ 2 space-separated integers describing the respective N and K values for a test\
  \ case.\n\nOutput Format:\nOn a new line for each test case, \n\nPrint the lexicographically\
  \ smallest arrangement; \n\nIf no absolute arrangement exists, print “CAPTAIN AMERICA\
  \ EVADES”.\n\nConstraints:\nSubTask#1\n1<=T<=10\n\n1<=N<=10^5\n\n0<=K<=N\n\nSubTask#2\n\
  Original Constraints..\n\nSubTask#3\nOriginal Constraints..\n\nSample Input:\n3\n\
  \n2 1\n\n3 0\n\n3 2\n\nSample Output:\n\n2 1\n\n1 2 3\n\nCAPTAIN AMERICA EVADES\n\
  \nExplanation:\nCase 1:\n\nN=2 and K=1\n\nTherefore the arrangement is [2,1].\n\n\
  Case 2:\n\nN=3 and K=0\n\nTherefore arrangement is [1,2,3]."
"vc-preamble": "import Imports.AllImports\n\ndef find_building_arrangement (n k :\
  \ Nat) : String := sorry\n\ndef nums_to_nat_list (s : String) : List Nat := sorry\n\
  \n\ndef range_from_one (n : Nat) : List Nat :=\n  List.range n |>.map (· + 1)\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def list_to_string (l : List Nat) : String :=\n  l.map toString\
  \ |>.intersperse \" \" |>.foldl (· ++ ·) \"\"\n"
"vc-theorems": "theorem zero_distance_ascending (n : Nat) (h : n ≥ 2) :\n  find_building_arrangement\
  \ n 0 = list_to_string (range_from_one n) := sorry\n\n\ntheorem impossible_case_three_two\
  \ : \n  find_building_arrangement 3 2 = \"CAPTAIN AMERICA EVADES\" := sorry \n\n\
  \ntheorem impossible_case_two_two :\n  find_building_arrangement 2 2 = \"CAPTAIN\
  \ AMERICA EVADES\" := sorry\n\n\ntheorem valid_arrangement_condition (n k : Nat)\
  \ (s : String) :\n  let nums := nums_to_nat_list s\n  find_building_arrangement\
  \ n k = s →\n  (s = \"CAPTAIN AMERICA EVADES\" ∨\n  (nums.length = n ∧ \n   nums.mergeSort\
  \ (· ≤ ·) = range_from_one n ∧\n   ∀ i j, i < nums.length → j < nums.length → \n\
  \     (if i ≥ j then i - j else j - i) = k → \n     (if nums[i]! ≥ nums[j]! then\
  \ nums[i]! - nums[j]! else nums[j]! - nums[i]!) = 1))\n  := sorry\n\n/--\ninfo:\
  \ '2 1'\n-/\n#guard_msgs in\n#eval find_building_arrangement 2 1\n\n/--\ninfo: '1\
  \ 2 3'\n-/\n#guard_msgs in\n#eval find_building_arrangement 3 0\n\n/--\ninfo: 'CAPTAIN\
  \ AMERICA EVADES'\n-/\n#guard_msgs in\n#eval find_building_arrangement 3 2\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
