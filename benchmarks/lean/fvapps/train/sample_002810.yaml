"vc-description": "A forest fire has been spotted at *fire*, a simple 2 element array\
  \ with x, y coordinates.\n\nThe forest service has decided to send smoke jumpers\
  \ in by plane and drop them in the forest.\n\nThe terrain is dangerous and surveyors\
  \ have determined that there are three possible safe *dropzones*, an array of three\
  \ simple arrays with x, y coordinates. \n\nThe plane is en route and time is of\
  \ the essence. Your mission is to return a simple [x,y] array with the coordinates\
  \ of the dropzone closest to the fire. \n\nEDIT: \nThe airplane is leaving from\
  \ the origin at 0,0. If your result returns two possible dropzones that are both\
  \ an equal distance from the fire, choose the dropzone that is closest to 0,0.\n\
  \nIf the two dropzones are both equal distance away from 0,0, then return the dropzone\
  \ that is first in the given array. \n\nFor example, if you are given: fire = [1,1],\
  \ possibleDZ = [0,1],[1,0],[2,2] . The answer is [0,1] because that is the first\
  \ possible drop zone in the given array."
"vc-preamble": "import Imports.AllImports\n\ndef dropzone (fire : List Int) (dropzones\
  \ : List (List Int)) : List Int := sorry\n\ndef hypot (x y : Int) : Float := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isClosestToFire (point fire : List Int) (points : List (List\
  \ Int)) : Bool := sorry\n\ndef isClosestToOrigin (point fire : List Int) (points\
  \ : List (List Int)) : Bool := sorry\n"
"vc-theorems": "theorem dropzone_is_valid_point (fire : List Int) (dropzones : List\
  \ (List Int)) :\n  fire.length = 2 → dropzones.length > 0 → dropzone fire dropzones\
  \ ∈ dropzones := sorry\n\n\ntheorem dropzone_is_closest_to_fire (fire : List Int)\
  \ (dropzones : List (List Int)) :\n  fire.length = 2 → dropzones.length > 0 → \n\
  \  isClosestToFire (dropzone fire dropzones) fire dropzones = true := sorry\n\n\n\
  theorem dropzone_is_closest_to_origin (fire : List Int) (dropzones : List (List\
  \ Int)) :\n  fire.length = 2 → dropzones.length > 0 →\n  isClosestToOrigin (dropzone\
  \ fire dropzones) fire dropzones = true := sorry\n\n\ntheorem single_dropzone (fire\
  \ dropzone_single : List Int) :\n  fire.length = 2 → dropzone_single.length = 2\
  \ →\n  dropzone fire [dropzone_single] = dropzone_single := sorry\n\n/--\ninfo:\
  \ [7, 9]\n-/\n#guard_msgs in\n#eval dropzone [6, 8] [[3, 2], [6, 1], [7, 9]]\n\n\
  /--\ninfo: [5, 5]\n-/\n#guard_msgs in\n#eval dropzone [9, 2] [[1, 4], [9, 9], [5,\
  \ 5]]\n\n/--\ninfo: [0, 1]\n-/\n#guard_msgs in\n#eval dropzone [1, 1] [[0, 1], [1,\
  \ 0], [2, 2]]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
