"vc-description": "Chef has two piles of stones with him, one has n1 stones and the\
  \ other has n2 stones. Fired up by boredom, he invented a game with the two piles.\n\
  \nBefore the start of the game Chef chooses an integer m.\n\nIn the j-th move: \n\
  \n-  He chooses a number xj such that 1 ≤ xj ≤ m, and removes xj stones from both\
  \ the piles (this is only possible when both the piles have ≥ xj stones).\n-  The\
  \ number chosen must be unique over all the moves in the game. That is, for all\
  \ k < j, xj ≠ xk. \n\nThe game stops when Chef is unable to make any more moves.\n\
  \nChef wants to make the moves in such a way that the sum of the number of stones\
  \ remaining in the two piles is minimized. Please help Chef find this.\n\n-----Input-----\n\
  - The first line of input contains an integer T denoting the number of test cases.\n\
  - Each test case consists of 1 line with three integers — n1, n2 and m — separated\
  \ by single spaces.\n\n-----Output-----\nFor each test case, output a single line\
  \ containing the minimum sum of the number of stones of two piles.\n\n-----Constraints-----\n\
  Subtask 1 : (5 pts)\n- 1 ≤ T ≤ 100\n- 0 ≤ m ≤ 18\n- 0 ≤ n1, n2 ≤ 100\nSubtask 2\
  \ : (25 pts)\n- 1 ≤ T ≤ 1000\n- 0 ≤ m ≤ 10000\n- 0 ≤ n1, n2 ≤ 10000\nSubtask 3 :\
  \ (70 pts)\n- 1 ≤ T ≤ 105\n- 0 ≤ m ≤ 109\n- 0 ≤ n1, n2 ≤ 1018\n\n-----Example-----\n\
  Input:3\n1 1 1\n1 2 1\n4 5 2\n\nOutput:0\n1\n3\n\n-----Explanation-----\nExample\
  \ case 1. : Remove 1 stone from each of the piles. Now 0 stones are remaining, so\
  \ chef cannot remove any more stones from the piles. Hence, answer is 0+0 = 0\n\
  Example case 2. : Again, remove 1 stone from both the piles to get (0,1) stones.\
  \ Now chef cannot remove any more stones from pile 1, so he stops. Hence, answer\
  \ is 0+1 = 1.\nExample case 3. : First remove 1 stone from both the piles to get\
  \ (3,4) stones. Now, remove 2 stones from both the piles so that (1,2) stones are\
  \ remaining. Now chef cannot remove any more stones owing to the condition that\
  \ he cannot remove the same number of stones twice. So, the answer is 1+2 = 3."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def min_remaining_stones (n1 n2 m : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem min_remaining_stones_non_negative (n1 n2 m : Nat) :\n  min_remaining_stones\
  \ n1 n2 m ≥ 0 :=\n  sorry\n\n\ntheorem min_remaining_stones_bounded (n1 n2 m : Nat)\
  \ :\n  min_remaining_stones n1 n2 m ≤ n1 + n2 :=\n  sorry\n\n\ntheorem min_remaining_stones_zero_moves\
  \ (n : Nat) :\n  min_remaining_stones n n 0 = n + n :=\n  sorry\n\n\ntheorem min_remaining_stones_symmetric\
  \ (n1 n2 m : Nat) :\n  min_remaining_stones n1 n2 m = min_remaining_stones n2 n1\
  \ m :=\n  sorry\n\n\ntheorem min_remaining_stones_equal_piles_even (n m : Nat) (h\
  \ : m > 0) :\n  min_remaining_stones n n m % 2 = 0 :=\n  sorry\n\n/--\ninfo: 0\n\
  -/\n#guard_msgs in\n#eval min_remaining_stones 1 1 1\n\n/--\ninfo: 1\n-/\n#guard_msgs\
  \ in\n#eval min_remaining_stones 1 2 1\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval\
  \ min_remaining_stones 4 5 2\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
