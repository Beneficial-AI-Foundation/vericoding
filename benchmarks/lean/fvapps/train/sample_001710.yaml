"vc-description": "From wikipedia  \n\nIn number theory and combinatorics, a partition\
  \ of a positive integer n, also called an integer partition, \nis a way of writing\
  \ n as a sum of positive integers. \nTwo sums that differ only in the order of their\
  \ summands are considered the **same** partition.\n\nFor example, 4 can be partitioned\
  \ in five distinct ways:\n\n`4, 3 + 1, 2 + 2, 2 + 1 + 1, 1 + 1 + 1 + 1`.\n\nWe can\
  \ write:\n\n`enum(4) -> [[4],[3,1],[2,2],[2,1,1],[1,1,1,1]]` and\n\n`enum(5) ->\
  \ [[5],[4,1],[3,2],[3,1,1],[2,2,1],[2,1,1,1],[1,1,1,1,1]]`.\n\nThe number of parts\
  \ in a partition grows very fast.\nFor n = 50 number of parts is `204226`, for 80\
  \ it is `15,796,476`\nIt would be too long to tests answers with arrays of such\
  \ size. So our task is the following:\n\n1 - n being given (n integer, 1 <= n <=\
  \ 50) calculate enum(n) ie the partition of n.\nWe will obtain something like that:\
  \  \n`enum(n) -> [[n],[n-1,1],[n-2,2],...,[1,1,...,1]]` (order of array and sub-arrays\n\
  doesn't matter). This part is not tested.\n\n2 - For each sub-array of enum(n) calculate\
  \ its product. \nIf n = 5 we'll obtain **after removing duplicates and sorting**:\n\
  \n`prod(5) -> [1,2,3,4,5,6]`\n\n`prod(8) -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12,\
  \ 15, 16, 18]`\n\nIf n = 40 prod(n) has a length of `2699` hence the tests will\
  \ not verify such arrays.\nInstead our task number 3 is:\n\n3 - return the range,\
  \ the average and the median of prod(n) in the following form \n(example for n =\
  \ 5):\n\n`\"Range: 5 Average: 3.50 Median: 3.50\"`\n\nRange is an integer, Average\
  \ and Median are float numbers rounded to two decimal \nplaces (\".2f\" in some\
  \ languages).\n\n#Notes:\n`Range` : difference between the highest and lowest values.\
  \ \n\n`Mean or Average` : To calculate mean, add together all of the numbers \n\
  in a set and then divide the sum by the total count of numbers.\n\n`Median` : The\
  \ median is the number separating the higher half \nof a data sample from the lower\
  \ half. \n(https://en.wikipedia.org/wiki/Median)\n\n#Hints:\nTry to optimize your\
  \ program to avoid timing out.\n\nMemoization can be helpful but it is not mandatory\
  \ for being successful."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def prod_partitions (n : Nat) : String := sorry\ndef factorial\
  \ (n : Nat) : Nat := sorry\n"
"vc-theorems": "theorem prod_partitions_output_format (n : Nat) : \n  n ≥ 1 → \n \
  \ let result := prod_partitions n \n  let parts := (result.splitOn \" \")\n  parts.length\
  \ = 6 ∧ \n  parts[0]! = \"Range:\" ∧\n  parts[2]! = \"Average:\" ∧\n  parts[4]!\
  \ = \"Median:\" ∧\n  (String.toNat? parts[1]!).isSome\n  := sorry\n\n\ntheorem prod_partitions_properties\
  \ (n : Nat) :\n  n ≥ 1 →\n  let result := prod_partitions n\n  let parts := (result.splitOn\
  \ \" \")\n  match String.toNat? parts[1]! with\n  | some range_val => \n    range_val\
  \ ≤ factorial n ∧\n    range_val ≥ 0\n  | none => False\n  := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
