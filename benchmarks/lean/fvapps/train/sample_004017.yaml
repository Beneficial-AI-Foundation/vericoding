"vc-description": "I assume most of you are familiar with the ancient legend of the\
  \ rice (but I see wikipedia suggests [wheat](https://en.wikipedia.org/wiki/Wheat_and_chessboard_problem),\
  \ for some reason) problem, but a quick recap for you: a young man asks as a compensation\
  \ only `1` grain of rice for the first square, `2` grains for the second, `4` for\
  \ the third, `8` for the fourth and so on, always doubling the previous.\n\nYour\
  \ task is pretty straightforward (but not necessarily easy): given an amount of\
  \ grains, you need to return up to which square of the chessboard one should count\
  \ in order to get at least as many.\n\nAs usual, a few examples might be way better\
  \ than thousands of words from me:\n\n```python\nsquares_needed(0) == 0\nsquares_needed(1)\
  \ == 1\nsquares_needed(2) == 2\nsquares_needed(3) == 2\nsquares_needed(4) == 3\n\
  ```\n\nInput is always going to be valid/reasonable: ie: a non negative number;\
  \ extra cookie for *not* using a loop to compute square-by-square (at least not\
  \ directly) and instead trying a smarter approach [hint: some peculiar operator];\
  \ a trick converting the number might also work: impress me!"
"vc-preamble": "import Imports.AllImports\n\ndef sum (f: Nat â†’ Nat) (n: Nat) : Nat\
  \ :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def squares_needed (n: Nat) : Nat :=\n  sorry\n\n\n"
"vc-theorems": "theorem squares_needed_zero :\n  squares_needed 0 = 0 :=\n  sorry\n\
  \n\ntheorem squares_needed_one :\n  squares_needed 1 = 1 :=\n  sorry\n\n\ntheorem\
  \ squares_needed_power_two :\n  squares_needed (2^10) = 11 :=\n  sorry\n\n/--\n\
  info: 0\n-/\n#guard_msgs in\n#eval squares_needed 0\n\n/--\ninfo: 1\n-/\n#guard_msgs\
  \ in\n#eval squares_needed 1\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval squares_needed\
  \ 2\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval squares_needed 3\n\n/--\ninfo: 3\n\
  -/\n#guard_msgs in\n#eval squares_needed 4\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
