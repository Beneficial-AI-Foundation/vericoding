"vc-description": "In mathematics, a [Diophantine equation](https://en.wikipedia.org/wiki/Diophantine_equation)\
  \ is a polynomial equation, usually with two or more unknowns, such that only the\
  \ integer solutions are sought or studied.\n\nIn this kata we want to find all integers\
  \ `x, y` (`x >= 0, y >= 0`) solutions of a diophantine equation of the form:\n####\
  \ x^(2) - 4 \\* y^(2) = n\n\n(where the unknowns are `x` and `y`, and `n` is a given\
  \ positive number)\nin decreasing order of the positive xi. \n\nIf there is no solution\
  \ return `[]` or `\"[]\" or \"\"`. (See \"RUN SAMPLE TESTS\" for examples of returns).\n\
  \n\n## Examples:\n\n```\nsolEquaStr(90005) --> \"[[45003, 22501], [9003, 4499],\
  \ [981, 467], [309, 37]]\"\nsolEquaStr(90002) --> \"[]\"\n```\n\n## Hint:\n\nx^(2)\
  \ - 4 \\* y^(2) = (x - 2\\*y) \\* (x + 2\\*y)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sol_equa (n : Nat) : List (List Nat) := sorry\n\n/-- The solutions\
  \ to x² - 4y² = n are well-formed lists of pairs of natural numbers -/"
"vc-theorems": "theorem sol_equa_well_formed (n : Nat) :\n  ∀ result : List (List\
  \ Nat),\n    result = sol_equa n →\n    (∀ pair ∈ result, pair.length = 2) := sorry\
  \ \n\n/-- Each solution pair satisfies the equation x² - 4y² = n -/\n\ntheorem sol_equa_satisfies_equation\
  \ (n : Nat) : \n  ∀ result : List (List Nat),\n    result = sol_equa n →\n    ∀\
  \ pair ∈ result,\n      pair.get! 0 * pair.get! 0 - 4 * pair.get! 1 * pair.get!\
  \ 1 = n := sorry\n\n/-- Solutions contain only positive x values and nonnegative\
  \ y values -/\n\ntheorem sol_equa_positive_values (n : Nat) :\n  ∀ result : List\
  \ (List Nat),\n    result = sol_equa n → \n    ∀ pair ∈ result,\n      pair.get!\
  \ 0 > 0 ∧ pair.get! 1 ≥ 0 := sorry\n\n/-- Solutions are ordered by descending x\
  \ values -/\n\ntheorem sol_equa_ordered (n : Nat) :\n  ∀ result : List (List Nat),\n\
  \    result = sol_equa n →\n    ∀ i < result.length - 1,\n      (result.get! i).get!\
  \ 0 > (result.get! (i+1)).get! 0 := sorry\n\n/-- For n = 90002, there are no solutions\
  \ -/\n\ntheorem sol_equa_90002_empty :\n  sol_equa 90002 = [] := sorry\n\n/-- For\
  \ n = 5, there is exactly one solution: [[3,1]] -/\n\ntheorem sol_equa_5_single\
  \ :\n  sol_equa 5 = [[3,1]] := sorry\n\n/--\ninfo: [[3, 1]]\n-/\n#guard_msgs in\n\
  #eval sol_equa 5\n\n/--\ninfo: [[45003, 22501], [9003, 4499], [981, 467], [309,\
  \ 37]]\n-/\n#guard_msgs in\n#eval sol_equa 90005\n\n/--\ninfo: []\n-/\n#guard_msgs\
  \ in\n#eval sol_equa 90002\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
