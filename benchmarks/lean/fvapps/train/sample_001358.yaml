"vc-description": "Chef solved so many hard questions, now he wants to solve some\
  \ easy problems for refreshment. Chef asks Cheffina for the new question. Cheffina\
  \ challanges the chef to print the total number of 1's in the binary representation\
  \ of N(natural number).\n\n-----Input:-----\n- First-line will contain $T$, the\
  \ number of test cases. Then the test cases follow. \n- Each test case contains\
  \ a single line of input, $N$. \n\n-----Output:-----\nFor each test case, output\
  \ in a single line answer.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^6$\n\
  - $1 \\leq N \\leq 10^6$\n\n-----Sample Input:-----\n2\n2\n5\n\n-----Sample Output:-----\n\
  1\n2\n\n-----EXPLANATION:-----\nFor 1) Binary representation of 2 is 10. i.e. only\
  \ one 1 present in it.\nFor 2) Binary representation of 5 is 101, i.e. two 1's present\
  \ in it."
"vc-preamble": "import Imports.AllImports\n\ndef count_ones_in_binary (n : Int) :\
  \ Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_bits : Int → Nat :=\n  fun n => if n = 0 then 0 else\
  \ (n % 2).natAbs + count_bits (n / 2)\ndecreasing_by sorry\n"
"vc-theorems": "theorem count_ones_nonnegative_basic {x : Int} (h : x ≥ 0) :\n  count_ones_in_binary\
  \ x ≥ 0 :=\n  sorry\n\n\ntheorem count_ones_negative_has_ones {x : Int} (h : x <\
  \ 0) :\n  count_ones_in_binary x > 0 :=\n  sorry\n\n\ntheorem count_ones_power_of_two\
  \ {x : Int} (h1 : x > 0) (h2 : x % 2 = 0) :\n  count_ones_in_binary x = 1 :=\n \
  \ sorry\n\n\ntheorem count_ones_equals_bit_count {x : Int} (h : x ≥ 0) :\n  count_ones_in_binary\
  \ x = count_bits x :=\n  sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval count_ones_in_binary\
  \ test_input[0]\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval count_ones_in_binary\
  \ test_input[0]\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval count_ones_in_binary\
  \ test_input[0]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
