"vc-description": "It's your Birthday. Your colleagues buy you a cake. The numbers\
  \ of candles on the cake is provided (x). Please note this is not reality, and your\
  \ age can be anywhere up to 1,000. Yes, you would look a mess.\n\nAs a surprise,\
  \ your colleagues have arranged for your friend to hide inside the cake and burst\
  \ out. They pretend this is for your benefit, but likely it is just because they\
  \ want to see you fall over covered in cake. Sounds fun!\n\nWhen your friend jumps\
  \ out of the cake, he/she will knock some of the candles to the floor. If the number\
  \ of candles that fall is higher than 70% of total candles (x), the carpet will\
  \ catch fire. \n\nYou will work out the number of candles that will fall from the\
  \ provided string (y). You must add up the character ASCII code of each even indexed\
  \ (assume a 0 based indexing) character in y, with the alphabetical position of\
  \ each odd indexed character in y to give the string a total.\n\nexample: 'abc'\
  \ --> a=97, b=2, c=99 --> y total = 198. \n\nIf the carpet catches fire, return\
  \ 'Fire!', if not, return 'That was close!'."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def cake (candles: Nat) (s: String) : String :=\n  sorry\n"
"vc-theorems": "theorem cake_empty_string :\n  cake 10 \"\" = \"That was close!\"\
  \ :=\nsorry\n\n\ntheorem cake_zero_candles :\n  cake 0 \"abc\" = \"That was close!\"\
  \ :=\nsorry \n\n\ntheorem cake_known_case1 :\n  cake 900 \"abcdef\" = \"That was\
  \ close!\" :=\nsorry\n\n\ntheorem cake_known_case2 :\n  cake 56 \"ifkhchlhfd\" =\
  \ \"Fire!\" := \nsorry\n\n/--\ninfo: 'That was close!'\n-/\n#guard_msgs in\n#eval\
  \ cake 900 \"abcdef\"\n\n/--\ninfo: 'Fire!'\n-/\n#guard_msgs in\n#eval cake 56 \"\
  ifkhchlhfd\"\n\n/--\ninfo: 'That was close!'\n-/\n#guard_msgs in\n#eval cake 0 \"\
  jpipe\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
