"vc-description": "Chef has N laddus of K sweetness each. Chef wants to eat all laddus,\
  \ but Chef is restricted with the given condition that he must not eat two adjacent\
  \ laddus. Chef starts calculating the maximum sweetness that he will get from the\
  \ laddus. Find the maximum sweetness that chef gets at the end of all calculations.\
  \ \n\n-----Input:-----\n- First-line will contain $T$, the number of test cases.\
  \ Then the test cases follow. \n- Each test case contains a single line of input,\
  \ two integers $N, K$. \n\n-----Output:-----\nFor each test case, output in a single\
  \ line answer as Maximum sweetness the chef will have.\n\n-----Constraints-----\n\
  - $1 \\leq T \\leq 10^5$\n- $1 \\leq N \\leq 10^5$\n- $1 \\leq K \\leq 10^5$\n\n\
  -----Sample Input:-----\n2\n1 2\n4 3\n\n-----Sample Output:-----\n2\n6\n\n-----EXPLANATION:-----\n\
  For 1) Chef will get only 1 laddu with sweetness 2.\nFor 2) Chef will have multiple\
  \ ways as\n[1,3], [2,4], [1,4] with sweetness 6\n[1],[2],[3],[4] with sweetness\
  \ 3.\nMaximum sweetness will be 6."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calc_max_sweetness (n k : Nat) : Nat := sorry\n\ntheorem calc_max_sweetness_positive\
  \ (n k : Nat) (h1 : n > 0) (h2 : k > 0) : \n  calc_max_sweetness n k > 0 := sorry\n"
"vc-theorems": "theorem calc_max_sweetness_upper_bound (n k : Nat) :\n  calc_max_sweetness\
  \ n k â‰¤ n * k := sorry\n\n\ntheorem calc_max_sweetness_multiple (n k : Nat) (h :\
  \ k > 0) :\n  calc_max_sweetness n k % k = 0 := sorry\n\n\ntheorem calc_max_sweetness_n_one\
  \ (k : Nat) :\n  calc_max_sweetness 1 k = k := sorry\n\n\ntheorem calc_max_sweetness_n_gt_one\
  \ (n k : Nat) (h : n > 1) :\n  calc_max_sweetness n k = ((n / 2) + (n % 2)) * k\
  \ := sorry\n\n\ntheorem calc_max_sweetness_k_zero (n : Nat) :\n  calc_max_sweetness\
  \ n 0 = 0 := sorry\n\n\ntheorem calc_max_sweetness_step_two (k : Nat) :\n  calc_max_sweetness\
  \ 2 k - calc_max_sweetness 1 k = 0 := sorry\n\n\ntheorem calc_max_sweetness_step_three\
  \ (k : Nat) :\n  calc_max_sweetness 3 k - calc_max_sweetness 2 k = k := sorry\n\n\
  /--\ninfo: 2\n-/\n#guard_msgs in\n#eval calc_max_sweetness 1 2\n\n/--\ninfo: 6\n\
  -/\n#guard_msgs in\n#eval calc_max_sweetness 4 3\n\n/--\ninfo: 10\n-/\n#guard_msgs\
  \ in\n#eval calc_max_sweetness 3 5\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
