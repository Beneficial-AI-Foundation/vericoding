"vc-description": "Write a function called `LCS` that accepts two sequences and returns\
  \ the longest subsequence common to the passed in sequences.\n\n### Subsequence\n\
  A subsequence is different from a substring. The terms of a subsequence need not\
  \ be consecutive terms of the original sequence.\n\n### Example subsequence\nSubsequences\
  \ of `\"abc\"` = `\"a\"`, `\"b\"`, `\"c\"`, `\"ab\"`, `\"ac\"`, `\"bc\"` and `\"\
  abc\"`.\n\n### LCS examples\n```python\nlcs( \"abcdef\" , \"abc\" ) => returns \"\
  abc\"\nlcs( \"abcdef\" , \"acf\" ) => returns \"acf\"\nlcs( \"132535365\" , \"123456789\"\
  \ ) => returns \"12356\"\n```\n\n### Notes\n* Both arguments will be strings\n*\
  \ Return value must be a string\n* Return an empty string if there exists no common\
  \ subsequence\n* Both arguments will have one or more characters (in JavaScript)\n\
  * All tests will only have a single longest common subsequence. Don't worry about\
  \ cases such as `LCS( \"1234\", \"3412\" )`, which would have two possible longest\
  \ common subsequences: `\"12\"` and `\"34\"`.\n\nNote that the Haskell variant will\
  \ use randomized testing, but any longest common subsequence will be valid.\n\n\
  Note that the OCaml variant is using generic lists instead of strings, and will\
  \ also have randomized tests (any longest common subsequence will be valid).\n\n\
  ### Tips\n\nWikipedia has an explanation of the two properties that can be used\
  \ to solve the problem:\n\n- [First property](http://en.wikipedia.org/wiki/Longest_common_subsequence_problem#First_property)\n\
  - [Second property](http://en.wikipedia.org/wiki/Longest_common_subsequence_problem#Second_property)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def lcs (x y : String) : String := sorry\n\ndef isSubsequence (s\
  \ t : String) : Bool := sorry\n\n\n\n\n\n\n"
"vc-theorems": "theorem lcs_empty_string \n  (x y : String) :\n  lcs \"\" y = \"\"\
  \ âˆ§ lcs x \"\" = \"\" := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
