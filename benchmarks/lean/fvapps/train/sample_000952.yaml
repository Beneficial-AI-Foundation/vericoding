"vc-description": "Chef is very fond of horses. He enjoys watching them race. As expected,\
  \ he has a stable full of horses. He, along with his friends, goes to his stable\
  \ during the weekends to watch a few of these horses race. Chef wants his friends\
  \ to enjoy the race and so he wants the race to be close. This can happen only if\
  \ the horses are comparable on their skill i.e. the difference in their skills is\
  \ less.\nThere are N horses in the stable. The skill of the horse i is represented\
  \ by an integer S[i]. The Chef needs to pick 2 horses for the race such that the\
  \ difference in their skills is minimum. This way, he would be able to host a very\
  \ interesting race. Your task is to help him do this and report the minimum difference\
  \ that is possible between 2 horses in the race.\n\n-----Input:-----\nFirst line\
  \ of the input file contains a single integer T, the number of test cases.\n\nEvery\
  \ test case starts with a line containing the integer N.\n\nThe next line contains\
  \ N space separated integers where the i-th integer is S[i].\n\n-----Output:-----\n\
  For each test case, output a single line containing the minimum difference that\
  \ is possible.\n\n-----Constraints:-----\n1 ≤ T ≤ 10\n2 ≤ N ≤ 5000\n1 ≤ S[i] ≤ 1000000000\n\
  \n-----Example:-----Input:\n1\n5\n4 9 1 32 13\n\nOutput:\n3\n\nExplanation: The\
  \ minimum difference can be achieved if we pick horses with skills 1 and 4 for the\
  \ race."
"vc-preamble": "import Imports.AllImports\n\ndef min_horse_skill_diff (n : Nat) (skills\
  \ : List Nat) : Nat :=\nsorry\n\n\ndef list_max (l : List Nat) : Nat :=\nsorry\n\
  \n\ndef list_min (l : List Nat) : Nat :=\nsorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def list_sort (l : List Nat) : List Nat :=\nsorry\n\n-- Result\
  \ is non-negative"
"vc-theorems": "theorem min_horse_skill_diff_nonneg {n : Nat} {skills : List Nat}\
  \ \n  (h : skills.length = n) (h2 : skills.length ≥ 2) :\n  min_horse_skill_diff\
  \ n skills ≥ 0 :=\nsorry\n\n-- Result is at most the range of skills\n\ntheorem\
  \ min_horse_skill_diff_le_range {n : Nat} {skills : List Nat}\n  (h : skills.length\
  \ = n) (h2 : skills.length ≥ 2) :\n  min_horse_skill_diff n skills ≤ list_max skills\
  \ - list_min skills :=\nsorry\n\n-- Result is at most any adjacent difference in\
  \ sorted elements\n\ntheorem min_horse_skill_diff_le_adjacent {n : Nat} {skills\
  \ : List Nat} {i : Nat}\n  (h : skills.length = n) (h2 : skills.length ≥ 2) (h3\
  \ : i < skills.length - 1) :\n  min_horse_skill_diff n skills ≤ \n    (list_sort\
  \ skills).get! (i+1) - (list_sort skills).get! i :=\nsorry\n\n-- Result is invariant\
  \ under list reordering\n\ntheorem min_horse_skill_diff_order_inv {n : Nat} {skills\
  \ shuffled : List Nat}\n  (h : skills.length = n) (h2 : skills.length ≥ 2)\n  (h3\
  \ : list_sort skills = list_sort shuffled) :\n  min_horse_skill_diff n skills =\
  \ min_horse_skill_diff n shuffled :=\nsorry\n\n-- n must match list length\n\ntheorem\
  \ min_horse_skill_diff_invalid {n : Nat} {skills : List Nat} \n  (h : skills.length\
  \ ≠ n) :\n  min_horse_skill_diff n skills = 0 :=\nsorry\n\n/--\ninfo: 3\n-/\n#guard_msgs\
  \ in\n#eval min_horse_skill_diff 5 [4, 9, 1, 32, 13]\n\n/--\ninfo: 1\n-/\n#guard_msgs\
  \ in\n#eval min_horse_skill_diff 3 [4, 5, 6]\n\n/--\ninfo: 9\n-/\n#guard_msgs in\n\
  #eval min_horse_skill_diff 4 [1, 10, 100, 1000]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
