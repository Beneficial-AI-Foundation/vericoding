"vc-description": "Given an array of integers arr and an integer d. In one step you\
  \ can jump from index i to index:\n\ni + x where: i + x < arr.length and  0 < x\
  \ <= d.\ni - x where: i - x >= 0 and  0 < x <= d.\n\nIn addition, you can only jump\
  \ from index i to index j if arr[i] > arr[j] and arr[i] > arr[k] for all indices\
  \ k between i and j (More formally min(i, j) < k < max(i, j)).\nYou can choose any\
  \ index of the array and start jumping. Return the maximum number of indices you\
  \ can visit.\nNotice that you can not jump outside of the array at any time.\n \n\
  Example 1:\n\nInput: arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2\nOutput: 4\nExplanation:\
  \ You can start at index 10. You can jump 10 --> 8 --> 6 --> 7 as shown.\nNote that\
  \ if you start at index 6 you can only jump to index 7. You cannot jump to index\
  \ 5 because 13 > 9. You cannot jump to index 4 because index 5 is between index\
  \ 4 and 6 and 13 > 9.\nSimilarly You cannot jump from index 3 to index 2 or index\
  \ 1.\n\nExample 2:\nInput: arr = [3,3,3,3,3], d = 3\nOutput: 1\nExplanation: You\
  \ can start at any index. You always cannot jump to any index.\n\nExample 3:\nInput:\
  \ arr = [7,6,5,4,3,2,1], d = 1\nOutput: 7\nExplanation: Start at index 0. You can\
  \ visit all the indicies. \n\nExample 4:\nInput: arr = [7,1,7,1,7,1], d = 2\nOutput:\
  \ 2\n\nExample 5:\nInput: arr = [66], d = 1\nOutput: 1\n\n \nConstraints:\n\n1 <=\
  \ arr.length <= 1000\n1 <= arr[i] <= 10^5\n1 <= d <= arr.length"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def maxJumps (arr : List Int) (d : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem maxJumps_result_bounded {arr : List Int} {d : Nat}\n  (h1\
  \ : ∀ x ∈ arr, 1 ≤ x ∧ x ≤ 100000)\n  (h2 : List.length arr ≤ 100)\n  (h3 : 1 ≤\
  \ d ∧ d ≤ 100) :\n  1 ≤ maxJumps arr d ∧ maxJumps arr d ≤ List.length arr :=\n \
  \ sorry\n\n\ntheorem maxJumps_zero_d {arr : List Int}\n  (h1 : ∀ x ∈ arr, 1 ≤ x\
  \ ∧ x ≤ 100000)\n  (h2 : List.length arr ≤ 100) :\n  maxJumps arr 0 = 1 :=\n  sorry\n\
  \n\ntheorem maxJumps_same_elements {arr : List Int} {n : Nat}\n  (h1 : arr = List.replicate\
  \ n 5)\n  (h2 : List.length arr ≤ 100) :\n  maxJumps arr (List.length arr) = 1 :=\n\
  \  sorry\n\n\ntheorem maxJumps_single_element :\n  maxJumps [1] 1 = 1 :=\n  sorry\n\
  \n\ntheorem maxJumps_two_elements :\n  maxJumps [1, 2] 1 = 2 :=\n  sorry\n\n/--\n\
  info: 4\n-/\n#guard_msgs in\n#eval maxJumps [6, 4, 14, 6, 8, 13, 9, 7, 10, 6, 12]\
  \ 2\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval maxJumps [3, 3, 3, 3, 3] 3\n\n/--\n\
  info: 7\n-/\n#guard_msgs in\n#eval maxJumps [7, 6, 5, 4, 3, 2, 1] 1\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
