"vc-description": "Due to the COVID pandemic, there has been an increase in the number\
  \ of cases if a hospital. The management has decided to clear a large square area\
  \ for the patients and arrange for beds. But the beds can't be too near to each\
  \ other.\nThe area is of dimension $N$ x $N$\nThe whole area is already divided\
  \ into blocks. $1$ means there's a bed in the block, $0$ denotes there isn't. Note,\
  \ beds placed on consecutive diagonal blocks are safe.\nThis is a SAFE example:\n\
  1 0\n0 1\nThis is an UNSAFE example:\n0 1 1\n0 0 0\n1 0 0\nTo avoid spreading the\
  \ virus even further, you have to make sure no two adjacent blocks have beds in\
  \ them. This is done to maintain distance between beds.\nReturn an output of \"\
  SAFE\" if you find the workers have arranged the beds with due consideration to\
  \ the distance needed. Return \"UNSAFE\" otherwise.\n\n-----Input:-----\n- First\
  \ line will contain $T$, number of testcases. Then the testcases follow. \n- Next\
  \ line contains $N$.\n- Next $N$ lines will contain $N$ number of space-separated\
  \ integers $Ai$ which make denote the beds in the area.\n\n-----Output:-----\nFor\
  \ each test case, output in a single line whether the total arrangement is \"SAFE\"\
  \ or \"UNSAFE\". Even if there's a single unsafe bed in the whole area, report the\
  \ whole area as \"UNSAFE\".\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n\
  - $0 \\leq Ai \\leq 1$\n- $2 \\leq N \\leq 100$\n\n-----Subtasks-----\n- 30 points\
  \ : $1 \\leq N \\leq 7$\n- 70 points : Original constraints\n\n-----Sample Input:-----\n\
  2\n4\n1 0 1 0\n0 0 0 1\n0 1 0 0\n1 0 0 1\n4\n1 0 1 0\n0 0 0 0\n1 0 1 1\n0 1 0 0\n\
  \n-----Sample Output:-----\nSAFE\nUNSAFE\n\n-----EXPLANATION:-----\nBeds placed\
  \ on blocks diagonally are not a problem."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def check_bed_arrangement (n : Nat) (grid : List (List Nat)) :\
  \ String :=\n  sorry\n"
"vc-theorems": "theorem empty_grid_safe {n : Nat} (h : 2 ≤ n) (h2 : n ≤ 10) :\n  let\
  \ grid := List.replicate n (List.replicate n 0)\n  check_bed_arrangement n grid\
  \ = \"SAFE\" :=\nsorry\n\n\ntheorem single_bed_safe {n : Nat} (h : 2 ≤ n) (h2 :\
  \ n ≤ 10) :\n  let grid := List.replicate n (List.replicate n 0)\n  check_bed_arrangement\
  \ n grid = \"SAFE\" :=\nsorry\n\n\ntheorem adjacent_horizontal_beds_unsafe {n :\
  \ Nat} (h : 2 ≤ n) (h2 : n ≤ 10)\n  (row : Nat) (col : Nat) :\n  let row' := row\
  \ % n\n  let col' := col % (n-1)\n  let grid := List.replicate n (List.replicate\
  \ n 0)\n  check_bed_arrangement n grid = \"UNSAFE\" :=\nsorry\n\n\ntheorem adjacent_vertical_beds_unsafe\
  \ {n : Nat} (h : 2 ≤ n) (h2 : n ≤ 10)\n  (row : Nat) (col : Nat) :\n  let row' :=\
  \ row % (n-1)\n  let col' := col % n\n  let grid := List.replicate n (List.replicate\
  \ n 0)\n  check_bed_arrangement n grid = \"UNSAFE\" :=\nsorry\n\n\ntheorem diagonal_beds_safe\
  \ {n : Nat} (h : 2 ≤ n) (h2 : n ≤ 10) :\n  let grid := List.replicate n (List.replicate\
  \ n 0)\n  check_bed_arrangement n grid = \"SAFE\" :=\nsorry\n\n/--\ninfo: 'SAFE'\n\
  -/\n#guard_msgs in\n#eval check_bed_arrangement 4 [[1, 0, 1, 0], [0, 0, 0, 1], [0,\
  \ 1, 0, 0], [1, 0, 0, 1]]\n\n/--\ninfo: 'UNSAFE'\n-/\n#guard_msgs in\n#eval check_bed_arrangement\
  \ 4 [[1, 0, 1, 0], [0, 0, 0, 0], [1, 0, 1, 1], [0, 1, 0, 0]]\n\n/--\ninfo: 'SAFE'\n\
  -/\n#guard_msgs in\n#eval check_bed_arrangement 2 [[1, 0], [0, 1]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
