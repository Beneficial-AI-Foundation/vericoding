"vc-description": "=====Function Descriptions=====\nConcatenate\n\nTwo or more arrays\
  \ can be concatenated together using the concatenate function with a tuple of the\
  \ arrays to be joined:\n\nimport numpy\n\narray_1 = numpy.array([1,2,3])\narray_2\
  \ = numpy.array([4,5,6])\narray_3 = numpy.array([7,8,9])\n\nprint numpy.concatenate((array_1,\
  \ array_2, array_3))    \n\n#Output\n[1 2 3 4 5 6 7 8 9]\n\nIf an array has more\
  \ than one dimension, it is possible to specify the axis along which multiple arrays\
  \ are concatenated. By default, it is along the first dimension.\n\nimport numpy\n\
  \narray_1 = numpy.array([[1,2,3],[0,0,0]])\narray_2 = numpy.array([[0,0,0],[7,8,9]])\n\
  \nprint numpy.concatenate((array_1, array_2), axis = 1)   \n\n#Output\n[[1 2 3 0\
  \ 0 0]\n [0 0 0 7 8 9]]    \n\n=====Problem Statement=====\nYou are given two integer\
  \ arrays of size NXP and MXP (N & M are rows, and P is the column). Your task is\
  \ to concatenate the arrays along axis 0.\n\n=====Input Format=====\nThe first line\
  \ contains space separated integers N, M and P .\nThe next N lines contains the\
  \ space separated elements of the P columns.\nAfter that, the next M lines contains\
  \ the space separated elements of the P columns.\n\n=====Output Format=====\nPrint\
  \ the concatenated array of size (N + M)XP."
"vc-preamble": "import Imports.AllImports\n\ndef Array.shape (a : Array (Array α))\
  \ : Nat × Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def concatenate_arrays {α : Type} (n m p : Nat) (array1 array2\
  \ : Array (Array α)) : \n  Array (Array α) :=\n  sorry\n"
"vc-theorems": "theorem concatenate_arrays_shape (n m p : Nat) (array1 array2 : Array\
  \ (Array α)) :\n  (concatenate_arrays n m p array1 array2).shape = (n + m, p) :=\n\
  \  sorry\n\n\ntheorem concatenate_arrays_preserves_first (n m p : Nat) (array1 array2\
  \ : Array (Array α)) :\n  ∀ i < n, (concatenate_arrays n m p array1 array2)[i]!\
  \ = array1[i]! :=\n  sorry\n\n\ntheorem concatenate_arrays_preserves_second (n m\
  \ p : Nat) (array1 array2 : Array (Array α)) :\n  ∀ i < m, (concatenate_arrays n\
  \ m p array1 array2)[n + i]! = array2[i]! :=\n  sorry\n\n\ntheorem concatenate_arrays_singleton\
  \ (n p : Nat) (value : α) \n  (array1 : Array (Array α)) (array2 : Array (Array\
  \ α)) :\n  array2.size = 1 → \n  (∀ i < n, (array1[i]!).size = p) →\n  (array2[0]!).size\
  \ = p →\n  (concatenate_arrays n 1 p array1 array2).shape = (n + 1, p) :=\n  sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
