"vc-description": "A family of kookaburras are in my backyard.\n\nI can't see them\
  \ all, but I can hear them!\n\n# How many kookaburras are there?\n\n\n\n\n## Hint\
  \ \n\nThe trick to counting kookaburras is to listen carefully\n\n* The males go\
  \ ```HaHaHa```...\n\n* The females go ```hahaha```...\n\n* And they always alternate\
  \ male/female\n\n\n\n^ Kata Note : No validation is necessary; only valid input\
  \ will be passed :-)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def kooka_counter (s: String) : Nat :=\n  sorry\n"
"vc-theorems": "theorem kooka_counter_nonnegative (s: String) : \n  kooka_counter\
  \ s ≥ 0 := \nsorry\n\n\ntheorem kooka_counter_empty : \n  kooka_counter \"\" = 0\
  \ := \nsorry\n\n\ntheorem kooka_counter_consecutive_laughs (n: Nat) (h: n > 0) :\n\
  \  kooka_counter (String.join (List.replicate n \"ha\")) = 1 ∧ \n  kooka_counter\
  \ (String.join (List.replicate n \"Ha\")) = 1 :=\nsorry\n\n\ntheorem kooka_counter_alternating_laughs\
  \ (n: Nat) (h: n > 0) :\n  let lowerLaugh := String.join (List.replicate n \"ha\"\
  )\n  let upperLaugh := String.join (List.replicate n \"Ha\")\n  kooka_counter (lowerLaugh\
  \ ++ upperLaugh) = 2 :=\nsorry\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval kooka_counter\
  \ \"\"\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval kooka_counter \"hahahahaha\"\n\
  \n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval kooka_counter \"hahahahahaHaHaHa\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
