"vc-description": "Given an array of integers arr, sort the array by performing a\
  \ series of pancake flips.\nIn one pancake flip we do the following steps:\n\nChoose\
  \ an integer k where 1 <= k <= arr.length.\nReverse the sub-array arr[1...k].\n\n\
  For example, if arr = [3,2,1,4] and we performed a pancake flip choosing k = 3,\
  \ we reverse the sub-array [3,2,1], so arr = [1,2,3,4] after the pancake flip at\
  \ k = 3.\nReturn the k-values corresponding to a sequence of pancake flips that\
  \ sort arr. Any valid answer that sorts the array within 10 * arr.length flips will\
  \ be judged as correct.\n \nExample 1:\nInput: arr = [3,2,4,1]\nOutput: [4,2,4,3]\n\
  Explanation: \nWe perform 4 pancake flips, with k values 4, 2, 4, and 3.\nStarting\
  \ state: arr = [3, 2, 4, 1]\nAfter 1st flip (k = 4): arr = [1, 4, 2, 3]\nAfter 2nd\
  \ flip (k = 2): arr = [4, 1, 2, 3]\nAfter 3rd flip (k = 4): arr = [3, 2, 1, 4]\n\
  After 4th flip (k = 3): arr = [1, 2, 3, 4], which is sorted.\nNotice that we return\
  \ an array of the chosen k values of the pancake flips.\n\nExample 2:\nInput: arr\
  \ = [1,2,3]\nOutput: []\nExplanation: The input is already sorted, so there is no\
  \ need to flip anything.\nNote that other answers, such as [3, 3], would also be\
  \ accepted.\n\n \nConstraints:\n\n1 <= arr.length <= 100\n1 <= arr[i] <= arr.length\n\
  All integers in arr are unique (i.e. arr is a permutation of the integers from 1\
  \ to arr.length)."
"vc-preamble": "import Imports.AllImports\n\ndef List.sorted : List Nat → Bool\n|\
  \ [] => true\n| [_] => true\n| x :: y :: xs => x ≤ y ∧ sorted (y :: xs)\n\n\ndef\
  \ pancakeSort : List Nat → List Nat\n| xs => sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def applyFlips : List Nat → List Nat → List Nat\n| xs, [] => xs\n\
  | xs, k::ks => applyFlips ((xs.take k).reverse ++ xs.drop k) ks\n"
"vc-theorems": "theorem pancakeSort_produces_valid_flips (arr : List Nat) :\n  ∀ k\
  \ ∈ pancakeSort arr, 1 ≤ k ∧ k ≤ arr.length :=\nsorry\n\n\ntheorem pancakeSort_sorts\
  \ (arr : List Nat) :\n  (applyFlips arr (pancakeSort arr)).sorted :=\nsorry\n\n\n\
  theorem pancakeSort_on_sorted_is_empty (arr : List Nat) :\n  arr.sorted → pancakeSort\
  \ arr = [] :=\nsorry\n\n\ntheorem pancakeSort_reverses_reversed (arr : List Nat)\
  \ :\n  arr = arr.reverse →\n  (applyFlips arr (pancakeSort arr)).sorted :=\nsorry\n\
  \n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval len pancake_sort(arr2)\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
