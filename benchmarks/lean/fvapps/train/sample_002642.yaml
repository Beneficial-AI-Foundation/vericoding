"vc-description": "You probably know the \"like\" system from Facebook and other pages.\
  \ People can \"like\" blog posts, pictures or other items. We want to create the\
  \ text that should be displayed next to such an item.\n\nImplement a function `likes\
  \ :: [String] -> String`, which must take in input array, containing the names of\
  \ people who like an item. It must return the display text as shown in the examples:\n\
  \n```python\nlikes([]) # must be \"no one likes this\"\nlikes([\"Peter\"]) # must\
  \ be \"Peter likes this\"\nlikes([\"Jacob\", \"Alex\"]) # must be \"Jacob and Alex\
  \ like this\"\nlikes([\"Max\", \"John\", \"Mark\"]) # must be \"Max, John and Mark\
  \ like this\"\nlikes([\"Alex\", \"Jacob\", \"Mark\", \"Max\"]) # must be \"Alex,\
  \ Jacob and 2 others like this\"\n```\n\nFor 4 or more names, the number in `and\
  \ 2 others` simply increases."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def likes (names : List String) : String := sorry\n\ntheorem likes_output_is_string\
  \ (names : List String) : \n  ∃ s : String, likes names = s := by sorry\n"
"vc-theorems": "theorem likes_output_ends_correctly (names : List String) :\n  (likes\
  \ names).endsWith \" likes this\" ∨ (likes names).endsWith \" like this\" := by\
  \ sorry\n\n\ntheorem likes_empty_case : \n  likes [] = \"no one likes this\" :=\
  \ by sorry\n\n\ntheorem likes_single_case (name : String) :\n  likes [name] = name\
  \ ++ \" likes this\" := by sorry\n\n\ntheorem likes_two_case (name1 name2 : String)\
  \ :\n  likes [name1, name2] = name1 ++ \" and \" ++ name2 ++ \" like this\" := by\
  \ sorry\n\n\ntheorem likes_three_case (name1 name2 name3 : String) :\n  likes [name1,\
  \ name2, name3] = name1 ++ \", \" ++ name2 ++ \" and \" ++ name3 ++ \" like this\"\
  \ := by sorry\n\n\ntheorem likes_four_plus_case (names : List String) (h : names.length\
  \ ≥ 4) :\n  likes names = names[0]! ++ \", \" ++ names[1]! ++ \" and \" ++ toString\
  \ (names.length - 2) ++ \" others like this\" := by sorry\n\n\ntheorem likes_others_count_correct\
  \ (names : List String) (h : names.length ≥ 4) :\n  ∃ pre post : String, likes names\
  \ = pre ++ toString (names.length - 2) ++ post := by sorry\n\n/--\ninfo: 'no one\
  \ likes this'\n-/\n#guard_msgs in\n#eval likes []\n\n/--\ninfo: 'Peter likes this'\n\
  -/\n#guard_msgs in\n#eval likes [\"Peter\"]\n\n/--\ninfo: 'Jacob and Alex like this'\n\
  -/\n#guard_msgs in\n#eval likes [\"Jacob\", \"Alex\"]\n\n/--\ninfo: 'Max, John and\
  \ Mark like this'\n-/\n#guard_msgs in\n#eval likes [\"Max\", \"John\", \"Mark\"\
  ]\n\n/--\ninfo: 'Alex, Jacob and 2 others like this'\n-/\n#guard_msgs in\n#eval\
  \ likes [\"Alex\", \"Jacob\", \"Mark\", \"Max\"]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
