"vc-description": "It's autumn now, the time of the leaf fall.\nSergey likes to collect\
  \ fallen leaves in autumn. In his city, he can find fallen leaves of maple, oak\
  \ and poplar. These leaves can be of three different colors: green, yellow or red.\n\
  Sergey has collected some leaves of each type and color. Now he wants to create\
  \ the biggest nice bouquet from them. He considers the bouquet nice iff all the\
  \ leaves in it are either from the same type of tree or of the same color (or both).\
  \ Moreover, he doesn't want to create a bouquet with even number of leaves in it,\
  \ since this kind of bouquets are considered to attract bad luck. However, if it's\
  \ impossible to make any nice bouquet, he won't do anything, thus, obtaining a bouquet\
  \ with zero leaves.\nPlease help Sergey to find the maximal number of leaves he\
  \ can have in a nice bouquet, which satisfies all the above mentioned requirements.\n\
  Please note that Sergey doesn't have to use all the leaves of the same color or\
  \ of the same type. For example, if he has 20 maple leaves, he can still create\
  \ a bouquet of 19 leaves.\n\n-----Input-----\nIThe first line of the input contains\
  \ an integer T denoting the number of test cases. The description of T test cases\
  \ follows.\"\nThe first line of each test case contains three space-separated integers\
  \ MG MY MR denoting the number of green, yellow and red maple leaves respectively.\n\
  The second line contains three space-separated integers OG OY OR denoting the number\
  \ of green, yellow and red oak leaves respectively.\nThe third line of each test\
  \ case contains three space-separated integers PG PY PR denoting the number of green,\
  \ yellow and red poplar leaves respectively.\n\n-----Output-----\nFor each test\
  \ case, output a single line containing the maximal amount of flowers in nice bouquet,\
  \ satisfying all conditions or 0 if it's impossible to create any bouquet, satisfying\
  \ the conditions.\n\n-----Constraints-----\n\n- 1 ≤ T ≤ 10000\n- Subtask 1 (50 points):\
  \ 0 ≤ MG, MY, MR, OG, OY, OR, PG, PY, PR ≤ 5\n- Subtask 2 (50 points): 0 ≤ MG, MY,\
  \ MR, OG, OY, OR, PG, PY, PR ≤ 109\n\n-----Example-----\nInput:1\n1 2 3\n3 2 1\n\
  1 3 4\n\nOutput:7\n\n-----Explanation-----\nExample case 1. We can create a bouquet\
  \ with 7 leaves, for example, by collecting all yellow leaves. This is not the only\
  \ way to create the nice bouquet with 7 leaves (for example, Sergey can use all\
  \ but one red leaves), but it is impossible to create a nice bouquet with more than\
  \ 7 leaves."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_max_bouquet (mg my mr og oy or_ pg py pr : Nat) : Nat\
  \ := \n  sorry\n\n\n\n\n"
"vc-theorems": "theorem find_max_bouquet_all_same (n : Nat) :\n  let result := find_max_bouquet\
  \ n n n n n n n n n\n  let expected := if 3*n % 2 = 1 then 3*n else 3*n - 1\n  result\
  \ = expected ∨ result = 0 :=\nsorry\n\n\ntheorem find_max_bouquet_zeros :\n  find_max_bouquet\
  \ 0 0 0 0 0 0 0 0 0 = 0 :=\nsorry\n\n/--\ninfo: 7\n-/\n#guard_msgs in\n#eval find_max_bouquet\
  \ 1 2 3 3 2 1 1 3 4\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval find_max_bouquet\
  \ 0 0 0 0 0 0 0 0 0\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval find_max_bouquet\
  \ 1 1 1 1 1 1 1 1 1\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
