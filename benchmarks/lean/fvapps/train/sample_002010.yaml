"vc-description": "Ujan has a lot of useless stuff in his drawers, a considerable\
  \ part of which are his math notebooks: it is time to sort them out. This time he\
  \ found an old dusty graph theory notebook with a description of a graph.\n\nIt\
  \ is an undirected weighted graph on $n$ vertices. It is a complete graph: each\
  \ pair of vertices is connected by an edge. The weight of each edge is either $0$\
  \ or $1$; exactly $m$ edges have weight $1$, and all others have weight $0$.\n\n\
  Since Ujan doesn't really want to organize his notes, he decided to find the weight\
  \ of the minimum spanning tree of the graph. (The weight of a spanning tree is the\
  \ sum of all its edges.) Can you find the answer for Ujan so he stops procrastinating?\n\
  \n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and\
  \ $m$ ($1 \\leq n \\leq 10^5$, $0 \\leq m \\leq \\min(\\frac{n(n-1)}{2},10^5)$),\
  \ the number of vertices and the number of edges of weight $1$ in the graph. \n\n\
  The $i$-th of the next $m$ lines contains two integers $a_i$ and $b_i$ ($1 \\leq\
  \ a_i, b_i \\leq n$, $a_i \\neq b_i$), the endpoints of the $i$-th edge of weight\
  \ $1$.\n\nIt is guaranteed that no edge appears twice in the input.\n\n\n-----Output-----\n\
  \nOutput a single integer, the weight of the minimum spanning tree of the graph.\n\
  \n\n-----Examples-----\nInput\n6 11\n1 3\n1 4\n1 5\n1 6\n2 3\n2 4\n2 5\n2 6\n3 4\n\
  3 5\n3 6\n\nOutput\n2\n\nInput\n3 0\n\nOutput\n0\n\n\n\n-----Note-----\n\nThe graph\
  \ from the first sample is shown below. Dashed edges have weight $0$, other edges\
  \ have weight $1$. One of the minimum spanning trees is highlighted in orange and\
  \ has total weight $2$. [Image] \n\nIn the second sample, all edges have weight\
  \ $0$ so any spanning tree has total weight $0$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def min_spanning_tree (n : Nat) (edges : List (Nat × Nat)) : Nat\
  \ := \n  sorry\n"
"vc-theorems": "theorem min_spanning_tree_non_negative (n : Nat) (edges : List (Nat\
  \ × Nat)) :\n  min_spanning_tree n edges ≥ 0 :=\n  sorry\n\n\ntheorem min_spanning_tree_less_than_vertices\
  \ (n : Nat) (edges : List (Nat × Nat)) :\n  min_spanning_tree n edges < n :=\n \
  \ sorry\n\n\ntheorem min_spanning_tree_empty_edges (n : Nat) :\n  min_spanning_tree\
  \ n [] = 0 :=\n  sorry\n\n\ntheorem min_spanning_tree_complete_graph (n : Nat) (edges\
  \ : List (Nat × Nat)) :\n  (edges.length = n * (n-1) / 2) → min_spanning_tree n\
  \ edges = n-1 :=\n  sorry\n\n\ntheorem min_spanning_tree_small_cases :\n  (min_spanning_tree\
  \ 2 [] = 0) ∧ \n  (min_spanning_tree 3 [(1,2), (2,3)] = 1) :=\n  sorry\n\n/--\n\
  info: 2\n-/\n#guard_msgs in\n#eval min_spanning_tree 6 [(1, 3), (1, 4), (1, 5),\
  \ (1, 6), (2, 3), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6)]\n\n/--\ninfo:\
  \ 0\n-/\n#guard_msgs in\n#eval min_spanning_tree 3 []\n\n/--\ninfo: 4\n-/\n#guard_msgs\
  \ in\n#eval min_spanning_tree 5 [(1, 2), (2, 3), (3, 4), (4, 5), (5, 1), (1, 3),\
  \ (2, 4), (3, 5), (4, 1), (5, 2)]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
