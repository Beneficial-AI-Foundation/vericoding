"vc-description": "Chef has an array A consisting of N elements. He wants to find\
  \ number of pairs of non-intersecting segments [a, b] and [c, d] (1 ≤ a ≤ b < c\
  \ ≤ d ≤ N) such there is no number that occurs in the subarray {Aa, Aa+1, ... ,\
  \ Ab} and   {Ac, Ac+1, ... , Ad} simultaneously. \nHelp Chef to find this number.\n\
  \n-----Input-----\n- The first line of the input contains an integer T denoting\
  \ the number of test cases. The description of T test cases follows.\n- The first\
  \ line of each test case contains a single integer N denoting the number of elements\
  \ in the array.\n- The second line contains N space-separated integers A1, A2, ...,\
  \ AN. \n\n-----Output-----\n- For each test case, output a single line containing\
  \ one integer - number of pairs of non-intersecting segments. \n\n-----Constraints-----\n\
  - 1 ≤ T ≤ 5\n- 1 ≤ N ≤ 1000\n- 1 ≤ Ai ≤ 109\n\n-----Subtasks-----Subtask 1 (7 points)\n\
  - 1 ≤ N ≤ 20Subtask 2 (34 points)\n- 1 ≤ N ≤ 300Subtask 3 (59 points)\n- Original\
  \ constraints\n\n-----Example-----\nInput:\n2\n3\n1 2 3\n4\n1 2 1 2\n\nOutput:\n\
  5\n4\n\n-----Explanation-----\nExample case 1.\nAll possible variants are correct:\
  \ {[1, 1], [2, 2]}, {[1, 1], [2, 3]}, {[1, 2], [3, 3]}, {[2, 2], [3, 3]}, {[1,1],\
  \ [3, 3]}.\n\nExample case 2.\nCorrect segments: {[1, 1], [2, 2]}, {[1, 1], [4,\
  \ 4]}, {[2, 2], [3, 3]}, {[3, 3], [4, 4]}."
"vc-preamble": "import Imports.AllImports\n\ndef Segment := List Int\ndef SegmentList\
  \ := List Segment\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_non_intersecting_segments (segments : SegmentList) :\
  \ Nat :=\n  sorry\n"
"vc-theorems": "theorem count_is_non_negative (segments : SegmentList) :\n  count_non_intersecting_segments\
  \ segments ≥ 0 :=\n  sorry\n\n\ntheorem count_less_than_input_size (segments : SegmentList)\
  \ :\n  segments ≠ [] → count_non_intersecting_segments segments ≤ segments.length\
  \ :=\n  sorry \n\n\ntheorem empty_list_returns_zero :\n  count_non_intersecting_segments\
  \ [] = 0 :=\n  sorry\n\n\ntheorem single_segment_returns_one (segment : Segment)\
  \ :\n  segment.length = 2 → count_non_intersecting_segments [segment] = 1 :=\n \
  \ sorry\n\n\ntheorem identical_segments_count_as_one (segments : SegmentList) (h\
  \ : segments ≠ []) :\n  count_non_intersecting_segments (List.append segments segments)\
  \ = count_non_intersecting_segments segments :=\n  sorry\n\n\ntheorem function_is_deterministic\
  \ (segments : SegmentList) :\n  count_non_intersecting_segments segments = count_non_intersecting_segments\
  \ segments :=\n  sorry\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval count_non_intersecting_segments\
  \ [[1, 5], [2, 3], [3, 6], [4, 6], [5, 6], [5, 7], [7, 9], [8, 10]]\n\n/--\ninfo:\
  \ 3\n-/\n#guard_msgs in\n#eval count_non_intersecting_segments arr2\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
