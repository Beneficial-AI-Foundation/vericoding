"vc-description": "Abhi and his friends (Shanky,Anku and Pandey) love to play with\
  \ strings. Abhi invented a simple game. He will give a string S to his friends.\
  \ Shanky and Anku will play the game while Pandey is just a spectator. Shanky will\
  \ traverse the string from beginning (left to right) while Anku will traverse from\
  \ last (right to left). Both have to find the first character they encounter during\
  \ their traversal,that appears only once in the entire string. Winner will be one\
  \ whose character is alphabetically more superior(has higher ASCII value). When\
  \ it is not possible to decide the winner by comparing their characters, Pandey\
  \ will be the winner.\n\n-----Input-----\nThe first line of the input contains an\
  \ integer T denoting the number of test cases. The description of T test cases follows.\n\
  \nEach test case contains a string S having only lowercase alphabets ( a..z ).\n\
  \n-----Output-----\nFor each test case, output a single line containing \"SHANKY\"\
  \ if Shanky is the winner or \"ANKU\" if Anku is the winner or \"PANDEY\" if the\
  \ winner is Pandey. Output your answer without quotes.\n\n-----Constraints-----\n\
  - 1 ≤ T ≤ 100\n- 1 < |S| ≤ 10^5\n\n-----Example-----\nInput:\n3\ngoogle\nbreakraekb\n\
  aman\n\nOutput:\nSHANKY\nPANDEY\nANKU\n\n-----Explanation-----\nExample case 2.\
  \ Both Shanky and Anku can not find any such character. Hence it is not possible\
  \ to decide the winner between these two. So Pandey is the winner."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_winner (s: String) : String := sorry \n\ntheorem find_winner_valid_result\
  \ (s: String) : \n  find_winner s = \"SHANKY\" ∨ find_winner s = \"ANKU\" ∨ find_winner\
  \ s = \"PANDEY\" := sorry\n"
"vc-theorems": "theorem all_duplicates_returns_pandey {s: String} (h: s.length > 0)\
  \ \n  (hdup: ∀ (i j : String.Pos), s.get i = s.get j) :\n  find_winner s = \"PANDEY\"\
  \ := sorry\n\n\ntheorem single_char_returns_pandey {s: String} (h: s.length = 1)\
  \ :\n  find_winner s = \"PANDEY\" := sorry\n\n\ntheorem two_chars_result {s: String}\
  \ (h1: s.length ≥ 2)\n  (h2: ∀ c ∈ s.data, 'a' = c ∨ 'b' = c) :\n  (∀ (i j : String.Pos),\
  \ s.get i = s.get j) →\n    find_winner s = \"PANDEY\"\n  ∧\n  (∃ (i j : String.Pos),\
  \ s.get i ≠ s.get j) →\n    find_winner s = \"SHANKY\" ∨ find_winner s = \"ANKU\"\
  \ ∨ find_winner s = \"PANDEY\" := sorry\n\n\ntheorem reverse_preserves_pandey {s:\
  \ String} :\n  find_winner s = \"PANDEY\" → find_winner (String.mk s.data.reverse)\
  \ = \"PANDEY\" := sorry\n\n/--\ninfo: 'SHANKY'\n-/\n#guard_msgs in\n#eval find_winner\
  \ \"google\"\n\n/--\ninfo: 'PANDEY'\n-/\n#guard_msgs in\n#eval find_winner \"breakraekb\"\
  \n\n/--\ninfo: 'ANKU'\n-/\n#guard_msgs in\n#eval find_winner \"aman\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
