vc-description: |-
  Hofstadter sequences are a family of related integer sequences, among which the first ones were described by an American professor Douglas Hofstadter in his book Gödel, Escher, Bach. 

  ### Task
  Today we will be implementing the rather chaotic recursive sequence of integers called Hofstadter Q.
  The Hofstadter Q is defined as:

  As the author states in the aforementioned book:It is reminiscent of the Fibonacci definition in that each new value is a sum of two
  previous values-but not of the immediately previous two values. Instead, the two
  immediately previous values tell how far to count back to obtain the numbers to be added
  to make the new value.
  The function produces the starting sequence:  
  `1, 1, 2, 3, 3, 4, 5, 5, 6 . . .`  
  Test info: 100 random tests, n is always positive
  Good luck!
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def hofstadter_Q : Nat → Nat 
  | 0 => 0
  | n => sorry
vc-theorems: |
  theorem hofstadter_positive (n : Nat) (h : n > 0) : 
    hofstadter_Q n > 0 := sorry


  theorem hofstadter_first_terms : 
    hofstadter_Q 1 = 1 ∧ hofstadter_Q 2 = 1 := sorry


  theorem hofstadter_recurrence (n : Nat) (h : n ≥ 3) :
    hofstadter_Q n = 
      hofstadter_Q (n - hofstadter_Q (n-1)) + 
      hofstadter_Q (n - hofstadter_Q (n-2)) := sorry


  theorem hofstadter_deterministic (n : Nat) (h : n > 0) :
    ∀ x y, hofstadter_Q n = x → hofstadter_Q n = y → x = y := sorry

  /--
  info: 1
  -/
  #guard_msgs in
  #eval hofstadter_Q 1

  /--
  info: 2
  -/
  #guard_msgs in
  #eval hofstadter_Q 3

  /--
  info: 5
  -/
  #guard_msgs in
  #eval hofstadter_Q 7
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
