"vc-description": "Write function avg which calculates average of numbers in given\
  \ list."
"vc-preamble": "import Imports.AllImports\n\ndef find_average (numbers : List Float)\
  \ : Float := sorry\n\ndef sum (l : List Float) : Float := sorry\n\n\ndef minimum?\
  \ (l : List Float) : Option Float := sorry\n\ndef maximum? (l : List Float) : Option\
  \ Float := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sumInt (l : List Int) : Int := sorry\n\ntheorem integer_list_average\
  \ (numbers : List Int) :\n  find_average (numbers.map Float.ofInt) = \n    match\
  \ numbers with\n    | [] => 0\n    | _  => Float.ofInt (sumInt numbers) / Float.ofInt\
  \ numbers.length := sorry"
"vc-theorems": "theorem empty_list_average :\n  find_average [] = 0 := sorry\n\n\n\
  theorem average_between_min_max (numbers : List Float) (h : numbers ≠ []) : \n \
  \ match minimum? numbers, maximum? numbers with\n  | some min, some max => min ≤\
  \ find_average numbers ∧ find_average numbers ≤ max\n  | _, _ => True := sorry\n\
  \n\ntheorem average_times_length_equals_sum (numbers : List Float) : \n  match numbers\
  \ with\n  | [] => find_average numbers = 0\n  | _  => find_average numbers * (Float.ofNat\
  \ numbers.length) = sum numbers := sorry\n\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n\
  #eval find_average [1, 2, 3]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval find_average\
  \ []\n\n/--\ninfo: 2.5\n-/\n#guard_msgs in\n#eval find_average [1.5, 2.5, 3.5]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
