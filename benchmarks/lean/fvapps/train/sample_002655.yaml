"vc-description": "In this Kata, you will be given an array of strings and your task\
  \ is to remove all consecutive duplicate letters from each string in the array.\n\
  \nFor example: \n\n  * `dup([\"abracadabra\",\"allottee\",\"assessee\"]) = [\"abracadabra\"\
  ,\"alote\",\"asese\"]`. \n  \n  * `dup([\"kelless\",\"keenness\"]) = [\"keles\"\
  ,\"kenes\"]`.\n\nStrings will be lowercase only, no spaces. See test cases for more\
  \ examples.\n\n~~~if:rust\nFor the sake of simplicity you can use the macro 'vec_of_string'\
  \ to create a Vec with an array of string literals.\n~~~\n\nGood luck!\n\nIf you\
  \ like this Kata, please try:\n\n[Alternate capitalization](https://www.codewars.com/kata/59cfc000aeb2844d16000075)\n\
  \n[Vowel consonant lexicon](https://www.codewars.com/kata/59cf8bed1a68b75ffb000026)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def dup (strings : List String) : List String := sorry\n\ntheorem\
  \ dup_same_length (strings : List String) (h : strings ≠ []) : \n  List.length (dup\
  \ strings) = List.length strings := \nsorry\n"
"vc-theorems": "theorem dup_no_consecutive_duplicates (strings : List String) (h :\
  \ strings ≠ []) :\n  ∀ s ∈ dup strings, ∀ i, i + 1 < s.length → \n  s.data[i]? =\
  \ some c₁ → s.data[i+1]? = some c₂ → c₁ ≠ c₂ :=\nsorry\n\n\ntheorem dup_chars_from_input\
  \ (strings : List String) (h : strings ≠ []) :\n  ∀ (out_str : String), out_str\
  \ ∈ dup strings → \n  ∀ (in_str : String), in_str ∈ strings → \n  ∀ c, c ∈ out_str.data\
  \ → c ∈ in_str.data :=\nsorry\n\n\ntheorem dup_preserves_order (strings : List String)\
  \ (h : strings ≠ []) :\n  ∀ (out_str : String), out_str ∈ dup strings →\n  ∀ (in_str\
  \ : String), in_str ∈ strings →\n  ∀ i j, i < j → i < out_str.length → j < out_str.length\
  \ →\n  out_str.data[i]? = out_str.data[j]? → i + 1 < j :=\nsorry\n\n\ntheorem dup_output_length\
  \ (strings : List String) (h : strings ≠ []) (h2 : ∀ s ∈ strings, s.length > 0)\
  \ :\n  ∀ s ∈ dup strings, s.length ≤ List.foldl (fun acc x => max acc x.length)\
  \ 0 strings :=\nsorry\n\n/--\ninfo: expected1\n-/\n#guard_msgs in\n#eval dup [\"\
  abracadabra\", \"allottee\", \"assessee\"]\n\n/--\ninfo: expected2\n-/\n#guard_msgs\
  \ in\n#eval dup [\"kelless\", \"keenness\"]\n\n/--\ninfo: expected3\n-/\n#guard_msgs\
  \ in\n#eval dup [\"ccooddddddewwwaaaaarrrrsssss\"]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
