"vc-description": "You are given a string s of length 8 consisting solely of '0's\
  \ and '1's. Assume that the characters of the string are written in a circular fashion.\
  \ You need to find the number of 0-1 or 1-0 transitions that one has to make while\
  \ making a single traversal over the string. ie. start from any character and go\
  \ circularly until you get back to the same character, and find the number of transitions\
  \ that you made. The string is said to be said to be uniform if there are at most\
  \ two such transitions. Otherwise, it is called non-uniform.\nGiven the string s,\
  \ tell whether the string is uniform or not.\n\n-----Input-----\nThe first line\
  \ of the input contains an integer T denoting the number of test cases. The description\
  \ of T test cases follows.\nThe only line of input contains the string s.\n\n-----Output-----\n\
  For each test case, output \"uniform\" if the given string is uniform and \"non-uniform\"\
  \ otherwise.\n\n-----Constraints-----\n- 1 ≤ T ≤ 256\n- Length of s is 8\n\n-----Example-----\n\
  Input\n4\n00000000\n10101010\n10000001\n10010011\n\nOutput\nuniform\nnon-uniform\n\
  uniform\nnon-uniform\n\n-----Explanation-----\nThe number of transitions are 0,\
  \ 8, 2 and 4 for the respective cases. So, the first and third one are uniform while\
  \ the second and fourth one are non-uniform."
"vc-preamble": "import Imports.AllImports\n\ndef isUniform (s : String) : String :=\n\
  \  sorry\n\n\ndef countTransitions (s : String) : Nat :=\n  sorry\n\n\ndef reverseString\
  \ (s : String) : String :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def swapBits (s : String) : String :=\n  sorry\n"
"vc-theorems": "theorem uniform_string_result_valid {s : String} (h : s.length > 0)\
  \ :\n  isUniform s = \"uniform\" ∨ isUniform s = \"non-uniform\" :=\n  sorry\n\n\
  \ntheorem all_same_chars_uniform {s : String} (h₁ : s.length > 0) \n  (h₂ : ∀ (i\
  \ j : String.Pos), s.get i = s.get j) :\n  isUniform s = \"uniform\" :=\n  sorry\n\
  \n\ntheorem transitions_gt_two_nonuniform {s : String} (h₁ : s.length > 0)\n  (h₂\
  \ : countTransitions s > 2) :\n  isUniform s = \"non-uniform\" :=\n  sorry\n\n\n\
  theorem transitions_leq_two_uniform {s : String} (h₁ : s.length > 0)\n  (h₂ : countTransitions\
  \ s ≤ 2) :\n  isUniform s = \"uniform\" :=\n  sorry\n\n\ntheorem uniform_reverse_eq\
  \ {s : String} (h : s.length > 0) :\n  isUniform s = isUniform (reverseString s)\
  \ :=\n  sorry\n\n\ntheorem uniform_swap_eq {s : String} (h : s.length > 0) :\n \
  \ isUniform s = isUniform (swapBits s) :=\n  sorry\n\n/--\ninfo: 'uniform'\n-/\n\
  #guard_msgs in\n#eval check_uniform \"00000000\"\n\n/--\ninfo: 'non-uniform'\n-/\n\
  #guard_msgs in\n#eval check_uniform \"10101010\"\n\n/--\ninfo: 'uniform'\n-/\n#guard_msgs\
  \ in\n#eval check_uniform \"10000001\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
