"vc-description": "You are given a rectangular parallelepiped with sides of positive\
  \ integer lengths $A$, $B$ and $C$. \n\nFind the number of different groups of three\
  \ integers ($a$, $b$, $c$) such that $1\\leq a\\leq b\\leq c$ and parallelepiped\
  \ $A\\times B\\times C$ can be paved with parallelepipeds $a\\times b\\times c$.\
  \ Note, that all small parallelepipeds have to be rotated in the same direction.\n\
  \nFor example, parallelepiped $1\\times 5\\times 6$ can be divided into parallelepipeds\
  \ $1\\times 3\\times 5$, but can not be divided into parallelepipeds $1\\times 2\\\
  times 3$.\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1\
  \ \\leq t \\leq 10^5$) — the number of test cases.\n\nEach of the next $t$ lines\
  \ contains three integers $A$, $B$ and $C$ ($1 \\leq A, B, C \\leq 10^5$) — the\
  \ sizes of the parallelepiped.\n\n\n-----Output-----\n\nFor each test case, print\
  \ the number of different groups of three points that satisfy all given conditions.\n\
  \n\n-----Example-----\nInput\n4\n1 1 1\n1 6 1\n2 2 2\n100 100 100\n\nOutput\n1\n\
  4\n4\n165\n\n\n\n-----Note-----\n\nIn the first test case, rectangular parallelepiped\
  \ $(1, 1, 1)$ can be only divided into rectangular parallelepiped with sizes $(1,\
  \ 1, 1)$.\n\nIn the second test case, rectangular parallelepiped $(1, 6, 1)$ can\
  \ be divided into rectangular parallelepipeds with sizes $(1, 1, 1)$, $(1, 1, 2)$,\
  \ $(1, 1, 3)$ and $(1, 1, 6)$.\n\nIn the third test case, rectangular parallelepiped\
  \ $(2, 2, 2)$ can be divided into rectangular parallelepipeds with sizes $(1, 1,\
  \ 1)$, $(1, 1, 2)$, $(1, 2, 2)$ and $(2, 2, 2)$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_cuboids (a b c : Nat) : Nat := sorry\n\ntheorem count_cuboids_cube_positive\
  \ (n : Nat) (h : n > 0) : \n  count_cuboids n n n ≥ 1 := sorry\n"
"vc-theorems": "theorem count_cuboids_deterministic_cube (n : Nat) :\n  count_cuboids\
  \ n n n = count_cuboids n n n := sorry\n\n\ntheorem count_cuboids_basic_properties\
  \ (a b c : Nat) \n  (ha : a > 0) (hb : b > 0) (hc : c > 0) :\n  let result := count_cuboids\
  \ a b c\n  result ≥ 1 ∧ result ≤ 100001 * 100001 * 100001 := sorry\n\n/--\ninfo:\
  \ 1\n-/\n#guard_msgs in\n#eval count_cuboids 1 1 1\n\n/--\ninfo: 4\n-/\n#guard_msgs\
  \ in\n#eval count_cuboids 1 6 1\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval count_cuboids\
  \ 2 2 2\n\n/--\ninfo: 165\n-/\n#guard_msgs in\n#eval count_cuboids 100 100 100\n\
  \n/--\ninfo: 8436\n-/\n#guard_msgs in\n#eval count_cuboids 100000 100000 100000\n\
  \n/--\ninfo: 41\n-/\n#guard_msgs in\n#eval count_cuboids 9 6 8\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded_and_plausible"
