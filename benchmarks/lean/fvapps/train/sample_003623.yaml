"vc-description": "Most languages have a `split` function that lets you turn a string\
  \ like `“hello world”` into an array like`[“hello”, “world”]`. But what if we don't\
  \ want to lose the separator? Something like `[“hello”, “ world”]`.\n\n#### Task:\n\
  \nYour job is to implement a function, (`split_without_loss` in Ruby/Crystal, and\
  \ `splitWithoutLoss` in JavaScript/CoffeeScript), that takes two arguments, `str`\
  \ (`s` in Python), and `split_p`, and returns the string, split by `split_p`, but\
  \ with the separator intact. There will be one '|' marker in `split_p`. `str` or\
  \ `s` will never have a '|' in it. All the text before the marker is moved to the\
  \ first string of the split, while all the text that is after it is moved to the\
  \ second one. **Empty strings must be removed from the output, and the input should\
  \ NOT be modified.**\n\nWhen tests such as `(str = \"aaaa\", split_p = \"|aa\")`\
  \ are entered, do not split the string on overlapping regions. For this example,\
  \ return `[\"aa\", \"aa\"]`, not `[\"aa\", \"aa\", \"aa\"]`.\n\n#### Examples (see\
  \ example test cases for more):\n\n```python\nsplit_without_loss(\"hello world!\"\
  , \" |\") #=> [\"hello \", \"world!\"]\nsplit_without_loss(\"hello world!\", \"\
  o|rl\") #=> [\"hello wo\", \"rld!\"]\nsplit_without_loss(\"hello world!\", \"h|ello\
  \ world!\") #=> [\"h\", \"ello world!\"]\nsplit_without_loss(\"hello world! hello\
  \ world!\", \" |\")\n                  #=> [\"hello \", \"world! \", \"hello \"\
  , \"world!\"]\nsplit_without_loss(\"hello world! hello world!\", \"o|rl\")\n   \
  \               #=> [\"hello wo\", \"rld! hello wo\", \"rld!\"]\nsplit_without_loss(\"\
  hello  hello  hello\", \" | \")\n                  #=> [\"hello \", \" hello \"\
  , \" hello\"]\nsplit_without_loss(\" hello world\", \" |\")\n                  #=>\
  \ [\" \", \"hello \", \"world\"]\nsplit_without_loss(\"  hello hello hello\", \"\
  \ |\")\n                  #=> [\" \", \" \", \"hello \", \"hello \", \"hello\"]\n\
  split_without_loss(\"  hello hello hello  \", \" |\")\n                  #=> [\"\
  \ \", \" \", \"hello \", \"hello \", \"hello \", \" \"]\nsplit_without_loss(\" \
  \ hello hello hello\", \"| \")\n                  #=> [\" \", \" hello\", \" hello\"\
  , \" hello\"]\n```\n\nAlso check out my other creations — [Identify Case](https://www.codewars.com/kata/identify-case),\
  \ [Adding Fractions](https://www.codewars.com/kata/adding-fractions),\n[Random Integers](https://www.codewars.com/kata/random-integers),\
  \ [Implement String#transpose](https://www.codewars.com/kata/implement-string-number-transpose),\
  \ [Implement Array#transpose!](https://www.codewars.com/kata/implement-array-number-transpose),\
  \ [Arrays and Procs #1](https://www.codewars.com/kata/arrays-and-procs-number-1),\
  \ and [Arrays and Procs #2](https://www.codewars.com/kata/arrays-and-procs-number-2)\n\
  \nIf you notice any issues/bugs/missing test cases whatsoever, do not hesitate to\
  \ report an issue or suggestion. Enjoy!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def split_without_loss (text : String) (split_chars : String) :\
  \ List String := sorry\n\ntheorem split_without_loss_returns_nonempty_segments \n\
  \  (text : String) (split_chars : String) \n  (h1 : text.length > 0) (h2 : split_chars.length\
  \ > 0) : \n  let result := split_without_loss text split_chars \n  ∀ segment ∈ result,\
  \ segment.length > 0 := sorry\n\n\n"
"vc-theorems": "theorem split_with_pipe_returns_nonempty_segments\n  (text : String)\n\
  \  (h : text.length > 0) :\n  let result := split_without_loss text \"|\"\n  ∀ segment\
  \ ∈ result, segment.length > 0 := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
