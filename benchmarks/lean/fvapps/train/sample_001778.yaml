"vc-description": "The thief has found himself a new place for his thievery again.\
  \ There is only one entrance to this area, called the \"root.\" Besides the root,\
  \ each house has one and only one parent house. After a tour, the smart thief realized\
  \ that \"all houses in this place forms a binary tree\". It will automatically contact\
  \ the police if two directly-linked houses were broken into on the same night.\n\
  \n\n\nDetermine the maximum amount of money the thief can rob tonight without alerting\
  \ the police.\n\n\nExample 1:\n\n     3\n    / \\\n   2   3\n    \\   \\ \n    \
  \ 3   1\n\nMaximum amount of money the thief can rob = 3 + 3 + 1 = 7.\n\n\nExample\
  \ 2:\n\n     3\n    / \\\n   4   5\n  / \\   \\ \n 1   3   1\n\nMaximum amount of\
  \ money the thief can rob = 4 + 5 = 9.\n\n\nCredits:Special thanks to @dietpepsi\
  \ for adding this problem and creating all test cases."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def rob_house : TreeNode → Nat\n  | _ => sorry\n\n-- Property:\
  \ Result is always natural number"
"vc-theorems": "theorem rob_house_nat (t : TreeNode) : \n  rob_house t ≥ 0 := by sorry\n\
  \n-- Base case: Empty tree returns 0\n\ntheorem rob_house_empty :\n  rob_house TreeNode.nil\
  \ = 0 := by sorry\n\n-- Base case: Single node returns its value \n\ntheorem rob_house_single\
  \ (n : Nat) :\n  rob_house (TreeNode.node n TreeNode.nil TreeNode.nil) = n := by\
  \ sorry\n\n-- Property: Result for tree with children is at least as large as root\
  \ value\n\ntheorem rob_house_with_children (v : Nat) (l r : TreeNode) :\n  rob_house\
  \ (TreeNode.node v l r) ≥ v := by sorry\n\n/--\ninfo: 7\n-/\n#guard_msgs in\n#eval\
  \ rob_house TreeNode(3)\n\n/--\ninfo: 9\n-/\n#guard_msgs in\n#eval rob_house TreeNode(3)\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
