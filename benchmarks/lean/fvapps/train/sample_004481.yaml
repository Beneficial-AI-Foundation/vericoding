vc-description: |-
  #### Task:

  Your job here is to write a function (`keepOrder` in JS/CoffeeScript, `keep_order` in Ruby/Crystal/Python, `keeporder` in Julia), which takes a sorted array `ary` and a value `val`, and returns the lowest index where you could insert `val` to maintain the sorted-ness of the array. The input array will always be sorted in ascending order. It may contain duplicates.

  _Do not modify the input._

  #### Some examples:

  ```python
  keep_order([1, 2, 3, 4, 7], 5) #=> 4
                        ^(index 4)
  keep_order([1, 2, 3, 4, 7], 0) #=> 0
            ^(index 0)
  keep_order([1, 1, 2, 2, 2], 2) #=> 2
                  ^(index 2)
  ```

  Also check out my other creations — [Naming Files](https://www.codewars.com/kata/naming-files), [Elections: Weighted Average](https://www.codewars.com/kata/elections-weighted-average), [Identify Case](https://www.codewars.com/kata/identify-case), [Split Without Loss](https://www.codewars.com/kata/split-without-loss), [Adding Fractions](https://www.codewars.com/kata/adding-fractions),
  [Random Integers](https://www.codewars.com/kata/random-integers), [Implement String#transpose](https://www.codewars.com/kata/implement-string-number-transpose), [Implement Array#transpose!](https://www.codewars.com/kata/implement-array-number-transpose), [Arrays and Procs #1](https://www.codewars.com/kata/arrays-and-procs-number-1), and [Arrays and Procs #2](https://www.codewars.com/kata/arrays-and-procs-number-2).

  If you notice any issues or have any suggestions/comments whatsoever, please don't hesitate to mark an issue or just comment. Thanks!
vc-preamble: |
  import Imports.AllImports

  def keep_order (arr : List Int) (val : Int) : Nat := sorry

  theorem keep_order_bounds {arr : List Int} {val : Int} :
    let idx := keep_order arr val
    0 ≤ idx ∧ idx ≤ arr.length := sorry


  def min_of_list (arr : List Int) : Int :=
    match arr with
    | [] => 0
    | x::xs => xs.foldl min x
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |-
  def max_of_list (arr : List Int) : Int :=
    match arr with
    | [] => 0
    | x::xs => xs.foldl max x
vc-theorems: |
  theorem keep_order_before {arr : List Int} {val : Int} :
    let idx := keep_order arr val
    ∀ i, i < idx → arr[i]! < val := sorry






  /--
  info: 4
  -/
  #guard_msgs in
  #eval keep_order [1, 2, 3, 4, 7] 5

  /--
  info: 0
  -/
  #guard_msgs in
  #eval keep_order [1, 2, 3, 4, 7] 0

  /--
  info: 2
  -/
  #guard_msgs in
  #eval keep_order [1, 1, 2, 2, 2] 2
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible
