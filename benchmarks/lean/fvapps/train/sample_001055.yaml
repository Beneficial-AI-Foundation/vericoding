"vc-description": "The garden has a tree with too many leaves on it and gardner wants\
  \ to cut the unwanted leaves. This is a rooted tree, where a node $v$ is called\
  \ parent of another node $u$, if there exists a directed edge from $v$ to $u$. Leaf\
  \ node is a node with no outgoing edges.\nGardner cuts the tree in a peculiar way:\n\
  - For each parent node(which has a valid leaf node attached to it), he cuts $x$\
  \ leaf nodes, such that $x$ is a multiple of 3.\nExample : If a parent node has\
  \ 7 leaf nodes, 6 leaf nodes will be cut and 1 will be left.\n- If a parent has\
  \ all its leaf nodes cut, only then the parent node itself becomes a new leaf node.\
  \ If new leaf nodes are created, Gardner repeats step 1 until he can cut no more\
  \ leaf nodes.\nAfter completing all operations, gardner wants to know the minimum\
  \ number of nodes left on the tree.\n\nIt is guaranteed that the given input is\
  \ a rooted tree.\nThe root of the tree is vertex 1.\n\n-----Input:-----\n- First\
  \ line will contain $T$, number of testcases. Then the testcases follow. \n- First\
  \ line of each testcase contains an integer $n$, the number of vertices in the tree.\
  \ \n- Second line of each testcase contains array $A$ of size $n-1$, where $A_{i}(1≤i≤n-1)$,\
  \ is the index of the parent of the $(i+1)^{th}$ vertex. \n\n-----Output:-----\n\
  For each testcase, output single integer, the number of nodes finally left on the\
  \ tree.  \n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $2 \\leq n \\leq 10^5$\
  \ \n- $1 \\leq A_i \\leq i$\n\n-----Sample Input:-----\n1\n\n13\n\n1 1 1 1 1 4 3\
  \ 4 4 3 4 3 \n\n-----Sample Output:-----\n4\n\n-----EXPLANATION:-----"
"vc-preamble": "import Imports.AllImports\n\ndef solve_tree_trimming (n : Nat) (parents\
  \ : List Nat) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_valid_tree (n : Nat) (parents : List Nat) : Bool :=\n  sorry\n"
"vc-theorems": "theorem tree_trimming_bounds {n : Nat} {parents : List Nat} \n  (h1\
  \ : n ≥ 2) (h2 : is_valid_tree n parents = true) :\n  let result := solve_tree_trimming\
  \ n parents\n  1 ≤ result ∧ result ≤ n :=\nsorry\n\n\ntheorem small_tree_optimum\
  \ {n : Nat} {parents : List Nat}\n  (h1 : n ≥ 2) (h2 : n ≤ 3) (h3 : is_valid_tree\
  \ n parents = true) :\n  solve_tree_trimming n parents = n :=\nsorry\n\n\ntheorem\
  \ line_tree_bounds {n : Nat} \n  (h : n ≥ 2) :\n  let parents := List.range (n-1)\n\
  \  let result := solve_tree_trimming n parents\n  1 ≤ result ∧ result ≤ n :=\nsorry\n\
  \n\ntheorem star_tree_bounds {n : Nat}\n  (h : n ≥ 2) :\n  let parents := List.replicate\
  \ (n-1) 1\n  let result := solve_tree_trimming n parents  \n  1 ≤ result ∧ result\
  \ ≤ n :=\nsorry\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval solve_tree_trimming 13\
  \ [1, 1, 1, 1, 1, 4, 3, 4, 4, 3, 4, 3]\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval\
  \ solve_tree_trimming 3 [1, 1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
