"vc-description": "## Task:\n\nYou have to write a function **pattern** which returns\
  \ the following Pattern(See Examples) upto (2n-1) rows, where n is parameter.\n\n\
  ### Rules/Note:\n* If the Argument is 0 or a Negative Integer then it should return\
  \ \"\" i.e. empty string.\n* All the lines in the pattern have same length i.e equal\
  \ to the number of characters in the longest line.\n* Range of n is (-∞,100]\n\n\
  ## Examples:\n\npattern(5):\n\n        1    \n       121   \n      12321  \n   \
  \  1234321 \n    123454321\n     1234321 \n      12321  \n       121   \n      \
  \  1    \n\n\npattern(10):\n\n             1         \n            121        \n\
  \           12321       \n          1234321      \n         123454321     \n   \
  \     12345654321    \n       1234567654321   \n      123456787654321  \n     12345678987654321\
  \ \n    1234567890987654321\n     12345678987654321 \n      123456787654321  \n\
  \       1234567654321   \n        12345654321    \n         123454321     \n   \
  \       1234321      \n           12321       \n            121        \n      \
  \       1         \n\npattern(15):\n\n                  1              \n      \
  \           121             \n                12321            \n              \
  \ 1234321           \n              123454321          \n             12345654321\
  \         \n            1234567654321        \n           123456787654321      \
  \ \n          12345678987654321      \n         1234567890987654321     \n     \
  \   123456789010987654321    \n       12345678901210987654321   \n      1234567890123210987654321\
  \  \n     123456789012343210987654321 \n    12345678901234543210987654321\n    \
  \ 123456789012343210987654321 \n      1234567890123210987654321  \n       12345678901210987654321\
  \   \n        123456789010987654321    \n         1234567890987654321     \n   \
  \       12345678987654321      \n           123456787654321       \n           \
  \ 1234567654321        \n             12345654321         \n              123454321\
  \          \n               1234321           \n                12321          \
  \  \n                 121             \n                  1              \n\npattern(20):\n\
  \n                       1                   \n                      121       \
  \           \n                     12321                 \n                    1234321\
  \                \n                   123454321               \n               \
  \   12345654321              \n                 1234567654321             \n   \
  \             123456787654321            \n               12345678987654321    \
  \       \n              1234567890987654321          \n             123456789010987654321\
  \         \n            12345678901210987654321        \n           1234567890123210987654321\
  \       \n          123456789012343210987654321      \n         12345678901234543210987654321\
  \     \n        1234567890123456543210987654321    \n       123456789012345676543210987654321\
  \   \n      12345678901234567876543210987654321  \n     1234567890123456789876543210987654321\
  \ \n    123456789012345678909876543210987654321\n     1234567890123456789876543210987654321\
  \ \n      12345678901234567876543210987654321  \n       123456789012345676543210987654321\
  \   \n        1234567890123456543210987654321    \n         12345678901234543210987654321\
  \     \n          123456789012343210987654321      \n           1234567890123210987654321\
  \       \n            12345678901210987654321        \n             123456789010987654321\
  \         \n              1234567890987654321          \n               12345678987654321\
  \           \n                123456787654321            \n                 1234567654321\
  \             \n                  12345654321              \n                  \
  \ 123454321               \n                    1234321                \n      \
  \               12321                 \n                      121              \
  \    \n                       1"
"vc-preamble": "import Imports.AllImports\n\ndef pattern (n : Int) : String := sorry\n\
  \ndef lines (s : String) : List String := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def reverseString (s : String) : String := sorry\n\ntheorem pattern_negative_or_zero\
  \ (n : Int) : \n  n ≤ 0 → pattern n = \"\" :=\nsorry\n"
"vc-theorems": "theorem pattern_num_lines (n : Int) :\n  n > 0 → (lines (pattern n)).length\
  \ = 2*n - 1 :=\nsorry\n\n\ntheorem pattern_symmetric_lines (n : Int) (i : Nat) :\n\
  \  n > 0 → i < n-1 → \n  (lines (pattern n)).get ⟨i, sorry⟩ = (lines (pattern n)).get\
  \ ⟨n.toNat * 2 - 2 - i, sorry⟩ :=\nsorry\n\n\ntheorem pattern_middle_line_palindrome\
  \ (n : Int) :\n  n > 0 → \n  let middle := (lines (pattern n)).get ⟨(n-1).toNat,\
  \ sorry⟩\n  middle = reverseString middle :=\nsorry\n\n\ntheorem pattern_middle_line_length\
  \ (n : Int) :\n  n > 0 →\n  let middle := (lines (pattern n)).get ⟨(n-1).toNat,\
  \ sorry⟩\n  middle.length = 2*n-1 :=\nsorry\n\n\ntheorem pattern_line_length (n\
  \ : Int) (i : Nat) :\n  n > 0 → i < n →\n  let line := (lines (pattern n)).get ⟨i,\
  \ sorry⟩ \n  line.length = 2*(i+1)-1 + 2*(n.toNat-(i+1)) :=\nsorry\n\n\ntheorem\
  \ pattern_line_palindrome (n : Int) (i : Nat) :\n  n > 0 → i < n →\n  let line :=\
  \ (lines (pattern n)).get ⟨i, sorry⟩\n  line.trim = reverseString (line.trim) :=\n\
  sorry\n\n/--\ninfo: '1'\n-/\n#guard_msgs in\n#eval pattern 1\n\n/--\ninfo: '  1\
  \  \\n 121 \\n12321\\n 121 \\n  1  '\n-/\n#guard_msgs in\n#eval pattern 3\n\n/--\n\
  info: ''\n-/\n#guard_msgs in\n#eval pattern 0\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
