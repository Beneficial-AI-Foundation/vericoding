"vc-description": "A string of '0's and '1's is monotone increasing if it consists\
  \ of some number of '0's (possibly 0), followed by some number of '1's (also possibly\
  \ 0.)\nWe are given a string S of '0's and '1's, and we may flip any '0' to a '1'\
  \ or a '1' to a '0'.\nReturn the minimum number of flips to make S monotone increasing.\n\
   \n\nExample 1:\nInput: \"00110\"\nOutput: 1\nExplanation: We flip the last digit\
  \ to get 00111.\n\n\nExample 2:\nInput: \"010110\"\nOutput: 2\nExplanation: We flip\
  \ to get 011111, or alternatively 000111.\n\n\nExample 3:\nInput: \"00011000\"\n\
  Output: 2\nExplanation: We flip to get 00000000.\n\n \nNote:\n\n1 <= S.length <=\
  \ 20000\nS only consists of '0' and '1' characters."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def minFlipsMonoIncr (s : String) : Nat :=\n  sorry\n"
"vc-theorems": "theorem result_length_within_bounds (s : String) : \n  let result\
  \ := minFlipsMonoIncr s\n  0 ≤ result ∧ result ≤ s.length :=\n  sorry\n\n\ntheorem\
  \ edge_cases :\n  minFlipsMonoIncr \"\" = 0 ∧ \n  (∀ n : Nat, minFlipsMonoIncr (String.mk\
  \ (List.replicate n '0')) = 0) ∧\n  (∀ n : Nat, minFlipsMonoIncr (String.mk (List.replicate\
  \ n '1')) = 0) :=\n  sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval minFlipsMonoIncr\
  \ \"00110\"\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval minFlipsMonoIncr \"010110\"\
  \n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval minFlipsMonoIncr \"00011000\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
