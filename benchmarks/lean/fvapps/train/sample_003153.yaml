"vc-description": "**Getting Familiar:**\nLEET: (sometimes written as \"1337\" or\
  \ \"l33t\"), also known as eleet or leetspeak, is another alphabet for the English\
  \ language that is used mostly on the internet. It uses various combinations of\
  \ ASCII characters to replace Latinate letters. For example, leet spellings of the\
  \ word leet include 1337 and l33t; eleet may be spelled 31337 or 3l33t.\n\nGREEK:\
  \ \nThe Greek alphabet has been used to write the Greek language since the 8th century\
  \ BC. It was derived from the earlier Phoenician alphabet, and was the first alphabetic\
  \ script to have distinct letters for vowels as well as consonants. It is the ancestor\
  \ of the Latin and Cyrillic scripts.Apart from its use in writing the Greek language,\
  \ both in its ancient and its modern forms, the Greek alphabet today also serves\
  \ as a source of technical symbols and labels in many domains of mathematics, science\
  \ and other fields.\n\n**Your Task :** \n\n    You have to create a function **GrεεκL33t**\
  \ which    \n    takes a string as input and returns it in the form of \n    (L33T+Grεεκ)Case.\n\
  \    Note: The letters which are not being converted in \n    (L33T+Grεεκ)Case should\
  \ be returned in the lowercase.\n\n**(L33T+Grεεκ)Case:**\n\n    A=α (Alpha)    \
  \  B=β (Beta)      D=δ (Delta)\n    E=ε (Epsilon)    I=ι (Iota)      K=κ (Kappa)\n\
  \    N=η (Eta)        O=θ (Theta)     P=ρ (Rho)\n    R=π (Pi)         T=τ (Tau)\
  \       U=μ (Mu)      \n    V=υ (Upsilon)    W=ω (Omega)     X=χ (Chi)\n    Y=γ\
  \ (Gamma)\n    \n**Examples:**\n\n    GrεεκL33t(\"CodeWars\") = \"cθδεωαπs\"\n \
  \   GrεεκL33t(\"Kata\") = \"κατα\""
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def greek_l33t (s : String) : String := sorry\n\ntheorem greek_l33t_length\
  \ (s : String) :\n  (greek_l33t s).length = s.length :=\nsorry\n"
"vc-theorems": "theorem greek_l33t_lowercase (s : String) :\n  (greek_l33t s).toLower\
  \ = greek_l33t s := \nsorry\n\n\ntheorem greek_l33t_unmapped_unchanged (s : String)\
  \ (i : String.Pos) : \n  let c := s.get i\n  ¬(c.toLower ∈ ['a', 'b', 'd', 'e',\
  \ 'i', 'k', 'n', 'o', 'p', 'r', 't', 'u', 'v', 'w', 'x', 'y']) →\n  (greek_l33t\
  \ s).get i = c.toLower :=\nsorry\n\n\ntheorem greek_l33t_mapped_correct (s : String)\
  \ (i : String.Pos) :\n  let c := s.get i\n  let mapping := [('a','α'), ('b','β'),\
  \ ('d','δ'), ('e','ε'), ('i','ι'), ('k','κ'),\n                 ('n','η'), ('o','θ'),\
  \ ('p','ρ'), ('r','π'), ('t','τ'), ('u','μ'),\n                 ('v','υ'), ('w','ω'),\
  \ ('x','χ'), ('y','γ')]\n  c.toLower ∈ mapping.map Prod.fst →\n  (greek_l33t s).get\
  \ i = (mapping.find? (fun p => p.1 = c.toLower)).get!.2 :=\nsorry\n\n\ntheorem greek_l33t_idempotent\
  \ (s : String) :\n  greek_l33t (greek_l33t s) = greek_l33t s :=\nsorry\n\n/--\n\
  info: 'cθδεωαπs'\n-/\n#guard_msgs in\n#eval greek_l33t \"codewars\"\n\n/--\ninfo:\
  \ 'κατα'\n-/\n#guard_msgs in\n#eval greek_l33t \"kata\"\n\n/--\ninfo: 'κμmιτε'\n\
  -/\n#guard_msgs in\n#eval greek_l33t \"kumite\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
