"vc-description": "You are given a grid with $R$ rows (numbered $1$ through $R$) and\
  \ $C$ columns (numbered $1$ through $C$). Initially, each cell of this grid is either\
  \ empty, contains an ant or an anteater. Each ant is moving in a fixed direction:\
  \ up, down, left or right. The anteaters do not move.\nThe movement of ants happens\
  \ in discrete steps. For example, when an ant is in the cell in the $i$-th row and\
  \ $j$-th column at some point in time (in some step) and it is moving down, then\
  \ in the next step, it enters the cell in the $(i+1)$-th row and $j$-th column.\
  \ Two ants meet each other when they enter the same cell at the same point in time\
  \ (in the same step). When ants meet, they do not interact in any way and keep moving\
  \ in their fixed directions.\nIf an ant reaches an anteater, that anteater eats\
  \ the ant, so the ant completely disappears. If an ant attempts to leave the grid,\
  \ it also disappears. When two ants enter a cell containing an anteater at the same\
  \ time, they are eaten before they could meet.\nCalculate the total number of pairs\
  \ of ants that meet each other.\n\n-----Input-----\n- The first line of the input\
  \ contains a single integer $T$ denoting the number of test cases. The description\
  \ of $T$ test cases follows.\n- The first line of each test case contains two space-separated\
  \ integers $R$ and $C$.\n- Each of the following $R$ lines contains a single string\
  \ with length $C$. For each valid $i, j$, the $j$-th character in the $i$-th string\
  \ is:\n- '#' if the cell in the $i$-th row and $j$-th column of the grid contains\
  \ an anteater\n- 'U', 'D', 'L' or 'R' if this cell contains an ant moving up, down,\
  \ left or right respectively\n- '-' if this cell is empty\n\n-----Output-----\n\
  For each test case, print a single line containing one integer — the number of pairs\
  \ of ants that meet.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n- $1 \\le R,\
  \ C \\le 50$\n- each string contains only characters 'U', 'D', 'L', 'R', '#' and\
  \ '-'\n\n-----Example Input-----\n10\n3 3\nR--\n---\n--U\n1 4\nR--R\n2 2\n--\n--\n\
  1 4\nR--L\n1 4\n-R-L\n1 4\n-R#L\n3 3\nR-D\n-#-\nR-U\n3 3\nR-D\n---\nR#U\n3 3\n-D-\n\
  R-L\n-U-\n1 7\nRLLLLLL\n\n-----Example Output-----\n1\n0\n0\n0\n1\n0\n3\n2\n6\n3"
"vc-preamble": "import Imports.AllImports\n\ndef solve_ant_grid (R C : Nat) (grid\
  \ : List String) : Nat :=\n  sorry\n\n\ndef is_direction (c : Char) : Bool :=\n\
  \  c = 'U' || c = 'D' || c = 'L' || c = 'R'\n\n\ndef make_empty_string (n : Nat)\
  \ (c : Char) : String :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_directions (grid : List String) : Nat :=\n  sorry\n"
"vc-theorems": "theorem solve_ant_grid_output_props (R C : Nat) (grid : List String)\n\
  \  (h : R > 0 ∧ C > 0) :\n  let result := solve_ant_grid R C grid;\n  result ≥ 0\
  \ :=\nsorry\n\n\ntheorem empty_grid_zero_pairs (R C : Nat) (grid : List String)\n\
  \  (h1 : R > 0 ∧ C > 0)\n  (h2 : ∀ (row : String), row ∈ grid → ∀ (c : Char), c\
  \ ∈ row.data → (c = '-' ∨ c = '#')) :\n  solve_ant_grid R C grid = 0 :=\nsorry\n\
  \n\ntheorem single_ant_zero_pairs (R C : Nat) (grid : List String)\n  (h1 : R >\
  \ 0 ∧ C > 0)\n  (h2 : count_directions grid ≤ 1) :\n  solve_ant_grid R C grid =\
  \ 0 :=\nsorry\n\n\ntheorem all_empty_grid_zero (R C : Nat) (h : R > 0 ∧ C > 0) :\n\
  \  let empty_row := make_empty_string C '-';\n  let grid := List.replicate R empty_row;\n\
  \  solve_ant_grid R C grid = 0 :=\nsorry\n\n\ntheorem all_walls_grid_zero (R C :\
  \ Nat) (h : R > 0 ∧ C > 0) :\n  let wall_row := make_empty_string C '#';\n  let\
  \ grid := List.replicate R wall_row;\n  solve_ant_grid R C grid = 0 :=\nsorry\n\n\
  \ntheorem single_ant_top_left_zero (R C : Nat) (ant : Char)\n  (h1 : R > 0 ∧ C >\
  \ 0)\n  (h2 : is_direction ant) :\n  let first_row := (String.push (make_empty_string\
  \ (C-1) '-') ant);\n  let empty_row := make_empty_string C '-';\n  let rest_rows\
  \ := List.replicate (R-1) empty_row;\n  let grid := first_row :: rest_rows;\n  solve_ant_grid\
  \ R C grid = 0 :=\nsorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval solve_ant_grid\
  \ 3 3 [\"R--\", \"---\", \"--U\"]\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval solve_ant_grid\
  \ 1 4 [\"-R-L\"]\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval solve_ant_grid 3 3 [\"\
  -D-\", \"R-L\", \"-U-\"]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
