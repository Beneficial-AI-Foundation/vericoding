"vc-description": "A bitstring is a string consisting only of the characters 0 and\
  \ 1. A bitstring is called $k$-balanced if every substring of size $k$ of this bitstring\
  \ has an equal amount of 0 and 1 characters ($\\frac{k}{2}$ of each).\n\nYou are\
  \ given an integer $k$ and a string $s$ which is composed only of characters 0,\
  \ 1, and ?. You need to determine whether you can make a $k$-balanced bitstring\
  \ by replacing every ? characters in $s$ with either 0 or 1.\n\nA string $a$ is\
  \ a substring of a string $b$ if $a$ can be obtained from $b$ by deletion of several\
  \ (possibly, zero or all) characters from the beginning and several (possibly, zero\
  \ or all) characters from the end.\n\n\n-----Input-----\n\nEach test contains multiple\
  \ test cases. The first line contains the number of test cases $t$ ($1 \\le t \\\
  le 10^4$). Description of the test cases follows.\n\nThe first line of each test\
  \ case contains two integers $n$ and $k$ ($2 \\le k \\le n \\le 3 \\cdot 10^5$,\
  \ $k$ is even)  — the length of the string and the parameter for a balanced bitstring.\n\
  \nThe next line contains the string $s$ ($|s| = n$). It is given that $s$ consists\
  \ of only 0, 1, and ?.\n\nIt is guaranteed that the sum of $n$ over all test cases\
  \ does not exceed $3 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case,\
  \ print YES if we can replace every ? in $s$ with 0 or 1 such that the resulting\
  \ bitstring is $k$-balanced, or NO if it is not possible.\n\n\n-----Example-----\n\
  Input\n9\n6 4\n100110\n3 2\n1?1\n3 2\n1?0\n4 4\n????\n7 4\n1?0??1?\n10 10\n11??11??11\n\
  4 2\n1??1\n4 4\n?0?0\n6 2\n????00\n\nOutput\nYES\nYES\nNO\nYES\nYES\nNO\nNO\nYES\n\
  NO\n\n\n\n-----Note-----\n\nFor the first test case, the string is already a $4$-balanced\
  \ bitstring.\n\nFor the second test case, the string can be transformed into 101.\n\
  \nFor the fourth test case, the string can be transformed into 0110.\n\nFor the\
  \ fifth test case, the string can be transformed into 1100110."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def can_make_balanced (n k : Nat) (pattern : String) : String :=\n\
  \  sorry\n"
"vc-theorems": "theorem can_make_balanced_returns_valid_result (n k : Nat) (pattern\
  \ : String) : \n  can_make_balanced n k pattern = \"YES\" ∨ can_make_balanced n\
  \ k pattern = \"NO\" :=\n  sorry\n\n\ntheorem can_make_balanced_deterministic_for_fixed\
  \ (n k : Nat) (pattern : String) :\n  (∀ c ∈ pattern.data, c = '0' ∨ c = '1') →\n\
  \  can_make_balanced n k pattern = can_make_balanced n k pattern :=\n  sorry\n\n\
  \ntheorem can_make_balanced_known_cases :\n  can_make_balanced 6 4 \"100110\" =\
  \ \"YES\" ∧\n  can_make_balanced 3 2 \"1?1\" = \"YES\" ∧ \n  can_make_balanced 3\
  \ 2 \"1?0\" = \"NO\" :=\n  sorry\n\n\ntheorem can_make_balanced_all_questions (n\
  \ k : Nat) (pattern : String) :\n  (∀ c ∈ pattern.data, c = '?') →\n  k ≥ 2 →\n\
  \  k % 2 = 0 →\n  can_make_balanced n k pattern = \"YES\" :=\n  sorry\n\n/--\ninfo:\
  \ 'YES'\n-/\n#guard_msgs in\n#eval can_make_balanced 6 4 \"100110\"\n\n/--\ninfo:\
  \ 'YES'\n-/\n#guard_msgs in\n#eval can_make_balanced 3 2 \"1?1\"\n\n/--\ninfo: 'NO'\n\
  -/\n#guard_msgs in\n#eval can_make_balanced 3 2 \"1?0\"\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
