"vc-description": "You love coffee and want to know what beans you can afford to buy\
  \ it.\n\nThe first argument to your search function will be a number which represents\
  \ your budget.\n\nThe second argument will be an array of coffee bean prices.\n\n\
  Your 'search' function should return the stores that sell coffee within your budget.\
  \ \n\nThe search function should return a string of prices for the coffees beans\
  \ you can afford. The prices in this string are to be sorted in ascending order."
"vc-preamble": "import Imports.AllImports\n\ndef String.toFloat (s : String) : Option\
  \ Float := sorry\n\ndef List.sort (l : List Float) (lt : Float → Float → Bool) :\
  \ List Float := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def search (budget : Float) (prices : List Float) : String :=\n\
  \  sorry\n"
"vc-theorems": "theorem search_sorted (budget : Float) (prices : List Float)\n  (h1\
  \ : budget ≥ 0) (h2 : budget ≤ 1000)\n  (h3 : ∀ x ∈ prices, x ≥ 0 ∧ x ≤ 1000)\n\
  \  (h4 : prices ≠ []) : \n  let result := search budget prices\n  let nums := (result.splitOn\
  \ \",\").filterMap String.toFloat\n  ∀ i, i < nums.length - 1 → nums[i]! ≤ nums[i+1]!\
  \ :=\nsorry\n\n\ntheorem search_within_budget (budget : Float) (prices : List Float)\n\
  \  (h1 : budget ≥ 0) (h2 : budget ≤ 1000)\n  (h3 : ∀ x ∈ prices, x ≥ 0 ∧ x ≤ 1000)\n\
  \  (h4 : prices ≠ []) :\n  let result := search budget prices\n  let nums := (result.splitOn\
  \ \",\").filterMap String.toFloat\n  ∀ x ∈ nums, x ≤ budget :=\nsorry\n\n\ntheorem\
  \ search_includes_all_eligible (budget : Float) (prices : List Float)\n  (h1 : budget\
  \ ≥ 0) (h2 : budget ≤ 1000)\n  (h3 : ∀ x ∈ prices, x ≥ 0 ∧ x ≤ 1000)\n  (h4 : prices\
  \ ≠ []) :\n  let eligible := List.sort (prices.filter (· ≤ budget)) (·≤·)\n  let\
  \ result := search budget prices\n  result = String.intercalate \",\" (eligible.map\
  \ toString) :=\nsorry\n\n\ntheorem search_zero_budget (prices : List Float)\n  (h1\
  \ : ∀ x ∈ prices, x ≥ 0)\n  (h2 : prices ≠ []) :\n  let eligible := List.sort (prices.filter\
  \ (·≤ 0)) (·≤·)\n  search 0 prices = String.intercalate \",\" (eligible.map toString)\
  \ :=\nsorry\n\n/--\ninfo: '1,2,2'\n-/\n#guard_msgs in\n#eval search 3 [6, 1, 2,\
  \ 9, 2]\n\n/--\ninfo: '3,7,7,9,14'\n-/\n#guard_msgs in\n#eval search 14 [7, 3, 23,\
  \ 9, 14, 20, 7]\n\n/--\ninfo: '0,1,2.7,5.5'\n-/\n#guard_msgs in\n#eval search 24\
  \ [2.7, 0, 100.9, 1, 5.5]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
