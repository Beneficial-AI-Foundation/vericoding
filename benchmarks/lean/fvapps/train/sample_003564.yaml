"vc-description": "# Task\nWe know that some numbers can be split into two primes.\
  \ ie. `5 = 2 + 3, 10 = 3 + 7`. But some numbers are not. ie. `17, 27, 35`, etc..\
  \ \n\nGiven a positive integer `n`. Determine whether it can be split into two primes.\
  \ If yes, return the maximum product of two primes. If not, return `0` instead.\n\
  \n# Input/Output\n\n`[input]` integer `n`\n\nA positive integer. \n\n`0 ≤ n ≤ 100000`\n\
  \n`[output]` an integer\n\nThe possible maximum product of two primes. or return\
  \ `0` if it's impossible split into two primes.\n\n# Example\n\nFor `n = 1`, the\
  \ output should be `0`.\n\n`1` can not split into two primes\n\nFor `n = 4`, the\
  \ output should be `4`.\n\n`4` can split into two primes `2 and 2`. `2 x 2 = 4`\n\
  \nFor `n = 20`, the output should be `91`.\n\n`20` can split into two primes `7\
  \ and 13` or `3 and 17`. The maximum product is `7 x 13 = 91`"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_prime (n : Nat) : Bool := sorry\n\ndef prime_product (n\
  \ : Nat) : Nat := sorry\n"
"vc-theorems": "theorem prime_positive_factors (n : Nat) (h : n ≥ 2) : \n  is_prime\
  \ n = true → ∀ i : Nat, 2 ≤ i → i ≤ n^(1/2) → n % i ≠ 0 := sorry\n\n\ntheorem nonpositive_not_prime\
  \ (n : Nat) :\n  n ≤ 1 → is_prime n = false := sorry\n\n/--\ninfo: 6\n-/\n#guard_msgs\
  \ in\n#eval prime_product 5\n\n/--\ninfo: 91\n-/\n#guard_msgs in\n#eval prime_product\
  \ 20\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval prime_product 11\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
