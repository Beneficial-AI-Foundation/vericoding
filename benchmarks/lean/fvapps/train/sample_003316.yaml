"vc-description": "In this Kata, we are going to see how a Hash (or Map or dict) can\
  \ be used to keep track of characters in a string. \n\nConsider two strings `\"\
  aabcdefg\"` and `\"fbd\"`. How many characters do we have to remove from the first\
  \ string to get the second string?  Although not the only way to solve this, we\
  \ could create a Hash of counts for each string and see which character counts are\
  \ different. That should get us close to the answer. I will leave the rest to you.\
  \ \n\nFor this example, `solve(\"aabcdefg\",\"fbd\") = 5`. Also, `solve(\"xyz\"\
  ,\"yxxz\") = 0`, because we cannot get second string from the first since the second\
  \ string is longer.\n\nMore examples in the test cases.\n\nGood luck!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve (s1 s2 : String) : Nat :=\n  sorry\n"
"vc-theorems": "theorem nonmatching_returns_zero {s1 s2 : String} (h1 : s1.length\
  \ > 0) (h2 : s2.length > 0) \n  (h3 : ∃ c ∈ s2.data, c ∉ s1.data) : solve s1 s2\
  \ = 0 :=\n  sorry \n\n\ntheorem identical_strings_returns_zero {s : String} (h :\
  \ s.length > 0) :\n  solve s s = 0 :=\n  sorry\n\n\n\n\ntheorem result_is_nonnegative\
  \ {s1 s2 : String} (h1 : s1.length > 0) (h2 : s2.length > 0) :\n  solve s1 s2 ≥\
  \ 0 :=\n  sorry\n\n\ntheorem empty_second_string {s : String} (h : s.length > 0)\
  \ :\n  solve s \"\" = s.length :=\n  sorry\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n\
  #eval solve \"xyz\" \"yxz\"\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval solve \"\
  abcxyz\" \"ayxz\"\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval solve \"aabcdefg\"\
  \ \"fbd\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
