"vc-description": "Consider a sequence generation that follows the following steps.\
  \ We will store removed values in variable `res`. Assume `n = 25`:\n```Haskell\n\
  -> [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25] Let's remove\
  \ the first number => res = [1]. We get..\n-> [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25].\
  \ Let's remove 2 (so res = [1,2]) and every 2-indexed number. We get..\n-> [3,5,7,9,11,13,15,17,19,21,23,25].\
  \ Now remove 3, then every 3-indexed number. res = [1,2,3]. \n-> [5,7,11,13,17,19,23,25].\
  \ Now remove 5, and every 5-indexed number. res = [1,2,3,5]. We get..\n-> [7,11,13,17,23,25].\
  \ Now remove 7 and every 7-indexed. res = [1,2,3,5,7].  \nBut we know that there\
  \ are no other 7-indexed elements, so we include all remaining numbers in res. So\
  \ res = [1,2,3,5,7,11,13,17,23,25] and sum(res) = 107.\n\nNote that when we remove\
  \ every n-indexed number, we must remember that indices start at 0. So for every\
  \ 3-indexed number above:\n[3,5,7,9,11,13,15,17,19,21,23], we remove index0=3, index3=\
  \ 9, index6=15,index9=21, etc.\n\nNote also that if the length of sequence is greater\
  \ than x, where x is the first element of the sequence, you should continue the\
  \ remove step: remove x, and every x-indexed number until the length of sequence\
  \ is shorter than x. In our example above, we stopped at 7 because the the length\
  \ of the remaining sequence [7,11,13,17,23,25] is shorter than 7.\n```\nYou will\
  \ be given a number `n` and your task will be to return the sum of the elements\
  \ in res, where the maximum element in res is `<= n`. \n\nFor example:\n\n```Python\n\
  Solve(7) = 18, because this is the sum of res = [1,2,3,5,7].\nSolve(25) = 107\n\
  ```\n\nMore examples in the test cases. \n\nGood luck!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve (n: Nat) : Nat := sorry\n\ntheorem solve_returns_positive\
  \ (n: Nat) (h: n ≥ 2) : \n  solve n > 0 := sorry\n"
"vc-theorems": "theorem solve_result_less_than_sum (n: Nat) (h: n ≥ 2) :\n  solve\
  \ n ≤ (n * (n + 1)) / 2 := sorry\n\n\ntheorem solve_monotonic (n: Nat) (h: n ≥ 2)\
  \ :\n  solve n ≤ solve (n + 1) := sorry\n\n\ntheorem solve_base_cases :\n  solve\
  \ 2 = 3 ∧ solve 3 = 6 ∧ solve 4 = 6 := sorry\n\n/--\ninfo: 18\n-/\n#guard_msgs in\n\
  #eval solve 7\n\n/--\ninfo: 107\n-/\n#guard_msgs in\n#eval solve 25\n\n/--\ninfo:\
  \ 304\n-/\n#guard_msgs in\n#eval solve 50\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
