"vc-description": "In this problem the input will consist of a number of lines of\
  \ English text consisting of the letters of the English alphabet, the punctuation\
  \ marks ' (apostrophe), . (full stop), , (comma), ; (semicolon), :(colon) and white\
  \ space characters (blank, newline). Your task is print the words in the text in\
  \ reverse order without any punctuation marks.\nFor example consider the following\
  \ candidate for the input text:\n$ $\nThis is a sample piece of text to illustrate\
  \ this \nproblem.  If you are smart you will solve this right.\n\n$ $\nThe corresponding\
  \ output would read as:\n$ $\nright this solve will you smart are you If problem\n\
  this illustrate to text of piece sample a is This\n\n$ $\nThat is, the lines are\
  \ printed in reverse order and in each line the words are printed in reverse order.\n\
  \n-----Input:-----\nThe first line of input contains a single integer $N$, indicating\
  \ the number of lines in the input. This is followed by $N$ lines of input text.\n\
  \n-----Output:-----\n$N$ lines of output text containing the input lines in reverse\
  \ order and where each line contains the words in reverse order as illustrated above.\n\
  \n-----Constraints:-----\n- $1 \\leq N \\leq 10000$.\n- There are at most $80$ characters\
  \ in each line\n\n-----Sample input-----\n2\nThis is a sample piece of text to illustrate\
  \ this \nproblem.  If you are smart you will solve this right.\n\n-----Sample output-----\n\
  right this solve will you smart are you If problem\nthis illustrate to text of piece\
  \ sample a is This"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def reverse_text (lines : List String) : List String := sorry\n\
  \ntheorem reverse_text_lines_length_eq_input {lines : List String} : \n  List.length\
  \ (reverse_text lines) = List.length lines := sorry\n"
"vc-theorems": "theorem reverse_text_all_alpha_or_space {lines : List String} :\n\
  \  ∀ line ∈ reverse_text lines, ∀ c ∈ line.data, c.isAlpha ∨ c = ' ' := sorry\n\n\
  \ntheorem reverse_text_word_all_alpha {lines : List String} :\n  ∀ line ∈ reverse_text\
  \ lines, ∀ word ∈ line.splitOn \" \", \n    ∀ c ∈ word.data, c.isAlpha := sorry\n\
  \n\ntheorem reverse_text_preserves_line_count {lines : List String} :\n  ∀ input_line\
  \ ∈ lines, ∃ output_line ∈ reverse_text lines,\n    ∀ word ∈ output_line.splitOn\
  \ \" \", ∀ c ∈ word.data, c.isAlpha := sorry\n\n\ntheorem reverse_text_reverse_order\
  \ {lines : List String} : \n  ∀ i, i < lines.length → \n    ∃ j, j < (reverse_text\
  \ lines).length ∧ \n         j = lines.length - 1 - i ∧\n         ∀ word ∈ ((reverse_text\
  \ lines).get ⟨j, sorry⟩).splitOn \" \",\n           ∀ c ∈ word.data, c.isAlpha :=\
  \ sorry\n\n\ntheorem reverse_text_nonempty_line_count {lines : List String} :\n\
  \  let result := reverse_text lines\n  let result_lines := result.filter (fun l\
  \ => l.trim ≠ \"\")\n  let input_lines := lines.filter (fun l => ∃ c ∈ l.data, c.isAlpha)\n\
  \  List.length result_lines = List.length input_lines := sorry\n\n/--\ninfo: test1_expected\n\
  -/\n#guard_msgs in\n#eval reverse_text [\"This is a sample piece of text to illustrate\
  \ this\", \"problem.  If you are smart you will solve this right.\"]\n\n/--\ninfo:\
  \ test2_expected\n-/\n#guard_msgs in\n#eval reverse_text [\"Hello, world!\"]\n\n\
  /--\ninfo: test3_expected\n-/\n#guard_msgs in\n#eval reverse_text [\"The quick brown\"\
  , \"fox jumps over\", \"the lazy dog.\"]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
