"vc-description": "Indian National Olympiad in Informatics 2013\nN people live in\
  \ Sequence Land. Instead of a name, each person is identified by a sequence of integers,\
  \ called his or her id. Each id is a sequence with no duplicate elements. Two people\
  \ are said to be each other’s relatives if their ids have at least K elements in\
  \ common. The extended family of a resident of Sequence Land includes herself or\
  \ himself, all relatives, relatives of relatives, relatives of relatives of relatives,\
  \ and so on without any limit.\nGiven the ids of all residents of Sequence Land,\
  \ including its President, and the number K, find the number of people in the extended\
  \ family of the President of Sequence Land.\nFor example, suppose N = 4 and K =\
  \ 2. Suppose the President has id (4, 6, 7, 8) and the other three residents have\
  \ ids (8, 3, 0, 4), (0, 10), and (1, 2, 3, 0, 5, 8). Here, the President is directly\
  \ related to (8, 3, 0, 4), who in turn is directly related to (1, 2, 3, 0, 5, 8).\
  \ Thus, the President’s extended family consists of everyone other than (0, 10)\
  \ and so has size 3.\n\n-----Input format-----\n• Line 1: Two space-separated integers,\
  \ N followed by K.\n• Lines 2 to N + 1: Each line describes an id of one of the\
  \ residents of Sequence Land, beginning with the President on line 2. Each line\
  \ consists of an integer p, followed by p distinct integers, the id.\n\n-----Output\
  \ format-----\nThe output consists of a single integer, the number of people in\
  \ the extended family of the President.\n\n-----Test Data-----\nThe testdata is\
  \ grouped into two subtasks. In both subtasks, 1 ≤ N ≤ 300 and 1 ≤ K ≤ 300. Each\
  \ number in each id is between 0 and 109 inclusive.\n• Subtask 1 [30 points]: The\
  \ number of elements in each id is between 1 and 10 inclusive.\n• Subtask 2 [70\
  \ points]: The number of elements in each id is between 1 and 300 inclusive.\n\n\
  -----Example-----\nHere is the sample input and output corresponding to the example\
  \ above.\n\n-----Sample input -----\n4 2\n4 4 6 7 8\n4 8 3 0 4\n2 0 10\n6 1 2 3\
  \ 0 5 8\n\n-----Sample output-----\n3\n\nNote: Your program should not print anything\
  \ other than what is specified in the output format. Please remove all diagnostic\
  \ print statements before making your final submission. A program with extraneous\
  \ output will be treated as incorrect!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def Family := List (List Nat)\n\ndef find_extended_family (n k\
  \ : Nat) (families : Family) : Nat :=\n  sorry\n"
"vc-theorems": "theorem always_includes_first_family {n k : Nat} {families : Family}\
  \ :\n  1 ≤ find_extended_family n k families := by\n  sorry\n\n\ntheorem result_within_bounds\
  \ {n k : Nat} {families : Family} :\n  1 ≤ find_extended_family n k families ∧ find_extended_family\
  \ n k families ≤ n := by\n  sorry\n\n\ntheorem increasing_k_decreases_relatives\
  \ {n k : Nat} {families : Family} :\n  k < 10 → find_extended_family n k families\
  \ ≥ find_extended_family n (k+1) families := by\n  sorry\n\n\ntheorem output_is_nat\
  \ {n k : Nat} {families : Family} :\n  find_extended_family n k families = find_extended_family\
  \ n k families := by\n  sorry\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval find_extended_family\
  \ 4 2 [\"4 4 6 7 8\", \"4 8 3 0 4\", \"2 0 10\", \"6 1 2 3 0 5 8\"]\n\n/--\ninfo:\
  \ 3\n-/\n#guard_msgs in\n#eval find_extended_family 3 1 [\"2 1 2\", \"2 2 3\", \"\
  2 3 4\"]\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval find_extended_family 2 2 [\"\
  3 1 2 3\", \"3 4 5 6\"]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
