"vc-description": "# Task\n You're given a two-dimensional array of integers `matrix`.\
  \ Your task is to determine the smallest non-negative integer that is not present\
  \ in this array.\n\n# Input/Output\n\n\n - `[input]` 2D integer array `matrix`\n\
  \n  A non-empty rectangular matrix. \n\n `1 ≤ matrix.length ≤ 10`\n\n `1 ≤ matrix[0].length\
  \ ≤ 10`\n\n\n - `[output]` an integer\n\n  The smallest non-negative integer that\
  \ is not present in matrix.\n\n\n# Example\n\n For \n \n ```\n matrix = [\n [0,\
  \ 2],\n [5, 1]]```\n the result should be `3`\n \n 0,1,2,`(3)`...5"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def smallest_integer (matrix : List (List Int)) : Nat :=\n  sorry\n"
"vc-theorems": "theorem smallest_integer_result_nonnegative (matrix : List (List Int))\
  \ :\n  0 ≤ smallest_integer matrix := sorry\n\n\ntheorem smallest_integer_not_in_matrix\
  \ (matrix : List (List Int)) :\n  ¬ (∃ row ∈ matrix, ∃ x ∈ row, x ≥ 0 ∧ x = smallest_integer\
  \ matrix) := sorry\n\n\n\n\ntheorem negative_numbers_ignored (matrix : List (List\
  \ Int)) :\n  smallest_integer matrix = \n  smallest_integer (List.map (λ row =>\
  \ List.map (λ x => if x ≥ 0 then x else -1) row) matrix) := sorry\n\n/--\ninfo:\
  \ 3\n-/\n#guard_msgs in\n#eval smallest_integer [[0, 2], [5, 1]]\n\n/--\ninfo: 0\n\
  -/\n#guard_msgs in\n#eval smallest_integer [[1, 2], [3, 4]]\n\n/--\ninfo: 0\n-/\n\
  #guard_msgs in\n#eval smallest_integer [[-1, -1], [-1, -1]]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
