"vc-description": "Chef Loves to listen to remix songs, but currently he had already\
  \ finished the entire playlist of remix songs.\nAs Chef is smart, so he thought\
  \ let's make my own remix songs of the original songs.\nChef is not having much\
  \ knowledge of making remix songs, so he came up with the simple technique in which\
  \ he will pick the word which contains the smallest number of characters from the\
  \ lyrics of the song, and then he will append that word to the start and end of\
  \ the lyrics, also Chef will insert this word between every two words of the lyrics.\n\
  Note: While inserting a new word Chef will also insert extra white-spaces, so that\
  \ every word in the final remixed lyrics is separated by space.\nIt is Recommended\
  \ to use fast Input/Ouput techniques.\n\n-----Input:-----\n- The input contains\
  \ the text $S$, which denotes the lyrics of the song.\n\n-----Output:-----\n- Print\
  \ the Remixed, lyrics as done by Chef.\n\n-----Constraints:-----\n- $1 \\leq Length\
  \ of text $S$ \\leq 10^7$\n\n-----Sample Input:-----\nMai Hu Jiyaan\n\n-----Sample\
  \ Output:-----\nHu Mai Hu Hu Hu Jiyaan Hu"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def processText (text : String) : String :=\n  sorry\n"
"vc-theorems": "theorem process_text_starts_ends_with_i (text : List String) (h :\
  \ text.length > 0) : \n  let result := processText (String.intercalate \" \" text)\n\
  \  result.take 1 = \"I\" ∧ result.takeRight 1 = \"I\" :=\n  sorry\n\n\ntheorem process_text_i_count\
  \ (text : List String) (h : text.length > 0) : \n  let result := processText (String.intercalate\
  \ \" \" text)\n  let iCount := String.length result - String.length (String.replace\
  \ result \"I\" \"\")\n  iCount = text.length + 1 :=\n  sorry\n\n\ntheorem process_text_alternating_i\
  \ (text : List String) (h : text.length > 0) :\n  let result := processText (String.intercalate\
  \ \" \" text)\n  let words := String.split result (· = ' ')\n  ∀ i, i < words.length\
  \ → i % 2 = 0 → words[i]! = \"I\" :=\n  sorry\n\n\ntheorem process_text_preserves_words\
  \ (text : String) (h : text.length > 0) :\n  let result := processText text\n  let\
  \ inputWords := String.split text (· = ' ') |>.filter (· ≠ \"\")\n  let outputWords\
  \ := String.split result (· = ' ') |>.filter (· ≠ \"I\")\n  inputWords = outputWords\
  \ :=\n  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
