"vc-description": "In a warehouse, there is a row of barcodes, where the i-th barcode\
  \ is barcodes[i].\nRearrange the barcodes so that no two adjacent barcodes are equal. \
  \ You may return any answer, and it is guaranteed an answer exists.\n \nExample\
  \ 1:\nInput: [1,1,1,2,2,2]\nOutput: [2,1,2,1,2,1]\n\n\nExample 2:\nInput: [1,1,1,1,2,2,3,3]\n\
  Output: [1,3,1,3,2,1,2,1]\n\n \nNote:\n\n1 <= barcodes.length <= 10000\n1 <= barcodes[i]\
  \ <= 10000"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def rearrange_barcodes (barcodes: List Int) : List Int := sorry\n\
  \ndef validate_solution (barcodes: List Int) : Bool := sorry\n"
"vc-theorems": "theorem single_element {n : Int} : \n  rearrange_barcodes [n] = [n]\
  \ := sorry\n\n\ntheorem unique_elements_length {xs : List Int} (h: xs.length ≥ 2)\
  \ :\n  (rearrange_barcodes xs).length = xs.length := sorry\n\n\ntheorem unique_elements_same_elements\
  \ {xs ys : List Int} (h: xs.length ≥ 2) :\n  (rearrange_barcodes xs = ys) → List.length\
  \ xs = List.length ys ∧ \n  ∀ (x : Int), List.contains xs x = List.contains ys x\
  \ := sorry\n\n\ntheorem unique_elements_valid {xs : List Int} (h: xs.length ≥ 2)\
  \ :\n  validate_solution (rearrange_barcodes xs) = true := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
