"vc-description": "You are the operator of a Centennial Wheel that has four gondolas,\
  \ and each gondola has room for up to four people. You have the ability to rotate\
  \ the gondolas counterclockwise, which costs you runningCost dollars.\nYou are given\
  \ an array customers of length n where customers[i] is the number of new customers\
  \ arriving just before the ith rotation (0-indexed). This means you must rotate\
  \ the wheel i times before the customers[i] customers arrive. You cannot make customers\
  \ wait if there is room in the gondola. Each customer pays boardingCost dollars\
  \ when they board on the gondola closest to the ground and will exit once that gondola\
  \ reaches the ground again.\nYou can stop the wheel at any time, including before\
  \ serving all customers. If you decide to stop serving customers, all subsequent\
  \ rotations are free in order to get all the customers down safely. Note that if\
  \ there are currently more than four customers waiting at the wheel, only four will\
  \ board the gondola, and the rest will wait for the next rotation.\nReturn the minimum\
  \ number of rotations you need to perform to maximize your profit. If there is no\
  \ scenario where the profit is positive, return -1.\n \nExample 1:\n\nInput: customers\
  \ = [8,3], boardingCost = 5, runningCost = 6\nOutput: 3\nExplanation: The numbers\
  \ written on the gondolas are the number of people currently there.\n1. 8 customers\
  \ arrive, 4 board and 4 wait for the next gondola, the wheel rotates. Current profit\
  \ is 4 * $5 - 1 * $6 = $14.\n2. 3 customers arrive, the 4 waiting board the wheel\
  \ and the other 3 wait, the wheel rotates. Current profit is 8 * $5 - 2 * $6 = $28.\n\
  3. The final 3 customers board the gondola, the wheel rotates. Current profit is\
  \ 11 * $5 - 3 * $6 = $37.\nThe highest profit was $37 after rotating the wheel 3\
  \ times.\nExample 2:\nInput: customers = [10,9,6], boardingCost = 6, runningCost\
  \ = 4\nOutput: 7\nExplanation:\n1. 10 customers arrive, 4 board and 6 wait for the\
  \ next gondola, the wheel rotates. Current profit is 4 * $6 - 1 * $4 = $20.\n2.\
  \ 9 customers arrive, 4 board and 11 wait (2 originally waiting, 9 newly waiting),\
  \ the wheel rotates. Current profit is 8 * $6 - 2 * $4 = $40.\n3. The final 6 customers\
  \ arrive, 4 board and 13 wait, the wheel rotates. Current profit is 12 * $6 - 3\
  \ * $4 = $60.\n4. 4 board and 9 wait, the wheel rotates. Current profit is 16 *\
  \ $6 - 4 * $4 = $80.\n5. 4 board and 5 wait, the wheel rotates. Current profit is\
  \ 20 * $6 - 5 * $4 = $100.\n6. 4 board and 1 waits, the wheel rotates. Current profit\
  \ is 24 * $6 - 6 * $4 = $120.\n7. 1 boards, the wheel rotates. Current profit is\
  \ 25 * $6 - 7 * $4 = $122.\nThe highest profit was $122 after rotating the wheel\
  \ 7 times.\n\n\nExample 3:\nInput: customers = [3,4,0,5,1], boardingCost = 1, runningCost\
  \ = 92\nOutput: -1\nExplanation:\n1. 3 customers arrive, 3 board and 0 wait, the\
  \ wheel rotates. Current profit is 3 * $1 - 1 * $92 = -$89.\n2. 4 customers arrive,\
  \ 4 board and 0 wait, the wheel rotates. Current profit is 7 * $1 - 2 * $92 = -$177.\n\
  3. 0 customers arrive, 0 board and 0 wait, the wheel rotates. Current profit is\
  \ 7 * $1 - 3 * $92 = -$269.\n4. 5 customers arrive, 4 board and 1 waits, the wheel\
  \ rotates. Current profit is 11 * $1 - 4 * $92 = -$357.\n5. 1 customer arrives,\
  \ 2 board and 0 wait, the wheel rotates. Current profit is 13 * $1 - 5 * $92 = -$447.\n\
  The profit was never positive, so return -1.\n\nExample 4:\nInput: customers = [10,10,6,4,7],\
  \ boardingCost = 3, runningCost = 8\nOutput: 9\nExplanation:\n1. 10 customers arrive,\
  \ 4 board and 6 wait, the wheel rotates. Current profit is 4 * $3 - 1 * $8 = $4.\n\
  2. 10 customers arrive, 4 board and 12 wait, the wheel rotates. Current profit is\
  \ 8 * $3 - 2 * $8 = $8.\n3. 6 customers arrive, 4 board and 14 wait, the wheel rotates.\
  \ Current profit is 12 * $3 - 3 * $8 = $12.\n4. 4 customers arrive, 4 board and\
  \ 14 wait, the wheel rotates. Current profit is 16 * $3 - 4 * $8 = $16.\n5. 7 customers\
  \ arrive, 4 board and 17 wait, the wheel rotates. Current profit is 20 * $3 - 5\
  \ * $8 = $20.\n6. 4 board and 13 wait, the wheel rotates. Current profit is 24 *\
  \ $3 - 6 * $8 = $24.\n7. 4 board and 9 wait, the wheel rotates. Current profit is\
  \ 28 * $3 - 7 * $8 = $28.\n8. 4 board and 5 wait, the wheel rotates. Current profit\
  \ is 32 * $3 - 8 * $8 = $32.\n9. 4 board and 1 waits, the wheel rotates. Current\
  \ profit is 36 * $3 - 9 * $8 = $36.\n10. 1 board and 0 wait, the wheel rotates.\
  \ Current profit is 37 * $3 - 10 * $8 = $31.\nThe highest profit was $36 after rotating\
  \ the wheel 9 times.\n\n \nConstraints:\n\nn == customers.length\n1 <= n <= 105\n\
  0 <= customers[i] <= 50\n1 <= boardingCost, runningCost <= 100"
"vc-preamble": "import Imports.AllImports\n\ndef min_operations_max_profit (customers:\
  \ List Nat) (boarding_cost: Nat) (running_cost: Nat) : Int :=\nsorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def list_sum (xs: List Nat) : Nat :=\nxs.foldl (· + ·) 0\n"
"vc-theorems": "theorem min_operations_result_valid \n  (customers: List Nat) \n \
  \ (boarding_cost: Nat) \n  (running_cost: Nat)\n  (h1: customers.length > 0)\n \
  \ (h2: boarding_cost > 0)\n  (h3: running_cost > 0)\n  (h4: ∀ x ∈ customers, x ≤\
  \ 1000)\n  : let result := min_operations_max_profit customers boarding_cost running_cost\n\
  \    result = -1 ∨ result > 0 := \nsorry\n\n\ntheorem min_operations_max_rotations\n\
  \  (customers: List Nat)\n  (boarding_cost: Nat) \n  (running_cost: Nat)\n  (h1:\
  \ customers.length > 0)\n  (h2: boarding_cost > 0) \n  (h3: running_cost > 0)\n\
  \  (h4: ∀ x ∈ customers, x ≤ 1000)\n  : let result := min_operations_max_profit\
  \ customers boarding_cost running_cost\n    let total := list_sum customers\n  \
  \  let max_rotations := total / 4 + (if total % 4 = 0 then 0 else 1)\n    result\
  \ = -1 ∨ result ≤ max_rotations + total :=\nsorry\n\n\ntheorem high_running_cost_unprofitable\n\
  \  (customers: List Nat)\n  (boarding_cost: Nat)\n  (h1: customers.length > 0)\n\
  \  (h2: customers.length ≤ 10)  \n  (h3: boarding_cost > 0)\n  (h4: boarding_cost\
  \ ≤ 10)\n  (h5: ∀ x ∈ customers, x ≤ 10)\n  : min_operations_max_profit customers\
  \ boarding_cost 1000 = -1 :=\nsorry\n\n\ntheorem high_profit_scenario_profitable\n\
  \  (customers: List Nat)\n  (boarding_cost: Nat)\n  (h1: customers.length > 0)\n\
  \  (h2: boarding_cost ≥ 100)\n  (h3: ∀ x ∈ customers, x ≥ 100 ∧ x ≤ 1000)\n  : min_operations_max_profit\
  \ customers boarding_cost 1 > 0 :=\nsorry\n\n\ntheorem no_customers_unprofitable\n\
  \  (customers: List Nat)\n  (boarding_cost: Nat)\n  (running_cost: Nat)  \n  (h1:\
  \ customers.length > 0)\n  (h2: boarding_cost > 0)\n  (h3: running_cost > 0)\n \
  \ (h4: ∀ x ∈ customers, x = 0)\n  : min_operations_max_profit customers boarding_cost\
  \ running_cost = -1 :=\nsorry\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval min_operations_max_profit\
  \ [8, 3] 5 6\n\n/--\ninfo: 7\n-/\n#guard_msgs in\n#eval min_operations_max_profit\
  \ [10, 9, 6] 6 4\n\n/--\ninfo: -1\n-/\n#guard_msgs in\n#eval min_operations_max_profit\
  \ [3, 4, 0, 5, 1] 1 92\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
