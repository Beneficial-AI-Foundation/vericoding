"vc-description": "Suzuki needs help lining up his students!\n\nToday Suzuki will\
  \ be interviewing his students to ensure they are progressing in their training.\
  \ He decided to schedule the interviews based on the length of the students name\
  \ in descending order. The students will line up and wait for their turn.\n\nYou\
  \ will be given a string of student names. Sort them and return a list of names\
  \ in descending order.\n\nHere is an example input:\n```python\nstring = 'Tadashi\
  \ Takahiro Takao Takashi Takayuki Takehiko Takeo Takeshi Takeshi'\n```\nHere is\
  \ an example return from your function:\n\n```python\n lst = ['Takehiko',\n    \
  \    'Takayuki',\n        'Takahiro',\n        'Takeshi',\n        'Takeshi',\n\
  \        'Takashi',\n        'Tadashi',\n        'Takeo',\n        'Takao']\n```\
  \ \n\nNames of equal length will be returned in reverse alphabetical order (Z->A)\
  \ such that:\n\n```python\nstring = \"xxa xxb xxc xxd xa xb xc xd\"\n\n```\nReturns\n\
  \n```python\n['xxd', 'xxc', 'xxb', 'xxa', 'xd', 'xc', 'xb', 'xa']\n\n``` \nPlease\
  \ also try the other Kata in this series..\n\n* [Help Suzuki count his vegetables...](https://www.codewars.com/kata/56ff1667cc08cacf4b00171b)\n\
  * [Help Suzuki purchase his Tofu!](https://www.codewars.com/kata/57d4ecb8164a67b97c00003c)\n\
  * [Help Suzuki pack his coal basket!](https://www.codewars.com/kata/57f09d0bcedb892791000255)\n\
  * [Help Suzuki rake his garden!](https://www.codewars.com/kata/571c1e847beb0a8f8900153d)\n\
  * [How many stairs will Suzuki climb in 20 years?](https://www.codewars.com/kata/56fc55cd1f5a93d68a001d4e)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def lineup_students (input : String) : List String := sorry\n\n\
  /-\n  lineupStudentsLengthPreserved:\n  For any list of students, the length of\
  \ the output list\n  equals the length of the input list\n-/"
"vc-theorems": "theorem lineupStudentsLengthPreserved (input : String) (names : List\
  \ String) :\n  names = lineup_students input → \n  (lineup_students input).length\
  \ = names.length := sorry\n\n/-\n  lineupStudentsSorted:\n  For any two adjacent\
  \ elements in the result,\n  if they have equal length then they are reverse alphabetically\
  \ sorted,\n  otherwise the first is longer than the second\n-/\n\ntheorem lineupStudentsSorted\
  \ {result : List String} (i : Nat) (h : i + 1 < result.length) :\n  let a := result[i]!\n\
  \  let b := result[i+1]!\n  (a.length = b.length → a ≥ b) ∧\n  (a.length ≠ b.length\
  \ → a.length > b.length) := sorry \n\n/-\n  lineupStudentsPreservesElements:\n \
  \ The output list contains exactly the same elements as the input\n-/\n\ntheorem\
  \ lineupStudentsPreservesElements (input : String) (names : List String) :\n  names\
  \ = lineup_students input → \n  ∀ x, (x ∈ names ↔ x ∈ lineup_students input) :=\
  \ sorry\n\n/-\n  lineupStudentsSingleElement:\n  A single name returns a singleton\
  \ list with that name\n-/\n\ntheorem lineupStudentsSingleElement (name : String)\
  \ :\n  lineup_students name = [name] := sorry\n\n/-\n  lineupStudentsEmpty:\n  An\
  \ empty string input returns an empty list\n-/\n\ntheorem lineupStudentsEmpty :\n\
  \  lineup_students \"\" = [] := sorry\n\n/--\ninfo: expected1\n-/\n#guard_msgs in\n\
  #eval lineup_students \"Tadashi Takahiro Takao Takashi Takayuki Takehiko Takeo Takeshi\
  \ Takeshi\"\n\n/--\ninfo: expected2\n-/\n#guard_msgs in\n#eval lineup_students \"\
  xxa xxb xxc xxd xa xb xc xd\"\n\n/--\ninfo: expected3\n-/\n#guard_msgs in\n#eval\
  \ lineup_students \"aaa bbb ccc\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
