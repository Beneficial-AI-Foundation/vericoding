"vc-description": "This time minions are celebrating Diwali Festival. There are N\
  \ minions in total. Each of them owns a house. On this Festival, Each of them wants\
  \ to decorate their house. But none of them have enough money to do that. One of\
  \ the minion, Kevin, requested Gru for money. Gru agreed for money distribution\
  \ but he will be giving money to a minion if and only if demanded money is less\
  \ than or equal to the money Gru have. Now Gru wonders if he can spend all the money\
  \ or not.\n\n-----Input-----\nFirst line have number of test cases T. Each test\
  \ case consist of Two Lines. First line contains two space separated integers N\
  \ and K i.e. Number of minions and Amount of Money Gru have. Next line contains\
  \ N space separated integers A1,A2,A3,.....,AN representing amount of money demanded\
  \ by ith minion.\n\n-----Output-----\nOutput YES if Gru can spend his all of the\
  \ money on minions i.e. after distribution Gru have zero amount of money else NO.\n\
  \n-----Constraints-----\n- 1 ≤ T ≤ 105\n- 1 ≤ N ≤ 102\n- 1 ≤ K,Ai ≤ 109\n\n-----Example-----\n\
  Input:\n2 \n4 9\n5 2 2 4\n4 9\n5 2 18 3\n\nOutput:\nYES\nNO\n\n\n-----Explanation-----\n\
  Example case 1.At first Gru is having 9 Rs. If he gives 5 Rs. to first minion then\
  \ remaining 4 Rs. can be given to 2nd and 3rd minion or to the 4th minion. Which\
  \ will leave zero amount of money in the hands of Gru.\nExample case 2.At first\
  \ Gru is having 9 Rs. If he gives 5 Rs. to the first minion then from remaining\
  \ 4 Rs. either he can give 2 Rs. to the 2nd minion or 3 Rs. to the fourth minion.\
  \ Which will leave either 2 Rs. or 1 Rs. in the hands of Gru."
"vc-preamble": "import Imports.AllImports\n\ndef List.sum : List Nat → Nat\n  | []\
  \ => 0\n  | (x::xs) => x + List.sum xs\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def List.sort : List Nat → List Nat := sorry\n\ndef can_spend_all_money\
  \ (n : Nat) (k : Nat) (demands : List Nat) : Bool :=\n  sorry\n"
"vc-theorems": "theorem can_spend_all_money_sum_too_large {n : Nat} {k : Nat} {demands\
  \ : List Nat} :\n  k > List.sum demands → can_spend_all_money n k demands = false\
  \ :=\n  sorry\n\n\ntheorem can_spend_all_money_sort_invariant {n : Nat} {k : Nat}\
  \ {demands : List Nat} :\n  can_spend_all_money n k (List.sort demands) = can_spend_all_money\
  \ n k demands :=\n  sorry\n\n\ntheorem can_spend_individual_demands {n : Nat} {demands\
  \ : List Nat} :\n  ∀ d ∈ demands, can_spend_all_money n d demands = true :=\n  sorry\n\
  \n/--\ninfo: True\n-/\n#guard_msgs in\n#eval can_spend_all_money 4 9 [5, 2, 2, 4]\n\
  \n/--\ninfo: False\n-/\n#guard_msgs in\n#eval can_spend_all_money 4 9 [5, 2, 18,\
  \ 3]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
