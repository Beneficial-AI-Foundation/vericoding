"vc-description": "To some string S, we will perform some replacement operations that\
  \ replace groups of letters with new ones (not necessarily the same size).\nEach\
  \ replacement operation has 3 parameters: a starting index i, a source word x and\
  \ a target word y.  The rule is that if x starts at position i in the original string\
  \ S, then we will replace that occurrence of x with y.  If not, we do nothing.\n\
  For example, if we have S = \"abcd\" and we have some replacement operation i =\
  \ 2, x = \"cd\", y = \"ffff\", then because \"cd\" starts at position 2 in the original\
  \ string S, we will replace it with \"ffff\".\nUsing another example on S = \"abcd\"\
  , if we have both the replacement operation i = 0, x = \"ab\", y = \"eee\", as well\
  \ as another replacement operation i = 2, x = \"ec\", y = \"ffff\", this second\
  \ operation does nothing because in the original string S[2] = 'c', which doesn't\
  \ match x[0] = 'e'.\nAll these operations occur simultaneously.  It's guaranteed\
  \ that there won't be any overlap in replacement: for example, S = \"abc\", indexes\
  \ = [0, 1], sources = [\"ab\",\"bc\"] is not a valid test case.\nExample 1:\nInput:\
  \ S = \"abcd\", indexes = [0,2], sources = [\"a\",\"cd\"], targets = [\"eee\",\"\
  ffff\"]\nOutput: \"eeebffff\"\nExplanation: \"a\" starts at index 0 in S, so it's\
  \ replaced by \"eee\".\n\"cd\" starts at index 2 in S, so it's replaced by \"ffff\"\
  .\n\nExample 2:\nInput: S = \"abcd\", indexes = [0,2], sources = [\"ab\",\"ec\"\
  ], targets = [\"eee\",\"ffff\"]\nOutput: \"eeecd\"\nExplanation: \"ab\" starts at\
  \ index 0 in S, so it's replaced by \"eee\". \n\"ec\" doesn't starts at index 2\
  \ in the original S, so we do nothing.\n\nNotes:\n\n0 <= indexes.length = sources.length\
  \ = targets.length <= 100\n0 < indexes[i] < S.length <= 1000\nAll characters in\
  \ given inputs are lowercase letters."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_replace_string (s: String) (indexes: List Nat) (sources\
  \ targets: List String) : String :=\n  sorry\n"
"vc-theorems": "theorem output_is_string {s: String} {indexes: List Nat} {sources\
  \ targets: List String}:\n  find_replace_string s indexes sources targets = (find_replace_string\
  \ s indexes sources targets) := by\n  sorry\n\n\ntheorem unchanged_on_non_matches\
  \ {s: String} {indexes: List Nat} {sources targets: List String}:\n  ∀ (i: Nat)\
  \ (src tgt: String),\n  (i ∈ indexes) →\n  (sources.getD (indexes.indexOf i) \"\"\
  \ = src) → \n  (targets.getD (indexes.indexOf i) \"\" = tgt) →\n  (i < s.length)\
  \ →\n  (String.take (String.drop s i) src.length ≠ src) →\n  (find_replace_string\
  \ s indexes sources targets).all (fun c => ¬tgt.contains c) := by\n  sorry\n\n/--\n\
  info: 'eeebffff'\n-/\n#guard_msgs in\n#eval find_replace_string \"abcd\" [0, 2]\
  \ [\"a\", \"cd\"] [\"eee\", \"ffff\"]\n\n/--\ninfo: 'eeecd'\n-/\n#guard_msgs in\n\
  #eval find_replace_string \"abcd\" [0, 2] [\"ab\", \"ec\"] [\"eee\", \"ffff\"]\n\
  \n/--\ninfo: 'baa'\n-/\n#guard_msgs in\n#eval find_replace_string \"aaa\" [0] [\"\
  a\"] [\"b\"]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
