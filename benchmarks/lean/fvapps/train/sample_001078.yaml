"vc-description": "You are given a tree with $N$ vertices (numbered $1$ through $N$)\
  \ and a sequence of integers $A_1, A_2, \\ldots, A_N$. You may choose an arbitrary\
  \ permutation $p_1, p_2, \\ldots, p_N$ of the integers $1$ through $N$. Then, for\
  \ each vertex $i$, you should assign the value $A_{p_i}$ to this vertex.\nThe profit\
  \ of a path between two vertices $u$ and $v$ is the sum of the values assigned to\
  \ the vertices on that path (including $u$ and $v$).\nLet's consider only (undirected)\
  \ paths that start at a leaf and end at a different leaf. Calculate the maximum\
  \ possible value of the sum of profits of all such paths. Since this value could\
  \ be very large, compute it modulo $10^9 + 7$.\n\n-----Input-----\n- The first line\
  \ of the input contains a single integer $T$ denoting the number of test cases.\
  \ The description of $T$ test cases follows.\n- The first line of each test case\
  \ contains a single integer $N$.\n- The second line contains $N$ space-separated\
  \ integers $A_1, A_2, \\ldots, A_N$.\n- Each of the following $N−1$ lines contains\
  \ two space-separated integers $u$ and $v$ denoting that vertices $u$ and $v$ are\
  \ connected by an edge.\n\n-----Output-----\nFor each test case, print a single\
  \ line containing one integer — the maximum sum of profits, modulo $10^9 + 7$.\n\
  \n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $1 \\le N \\le 300,000$\n- $1\
  \ \\le A_i \\le 10^9$ for each valid $i$\n- the sum of $N$ over all test cases does\
  \ not exceed $5 \\cdot 10^5$\n\n-----Example Input-----\n2\n4\n1 2 3 4\n1 2\n2 3\n\
  2 4\n5\n1 2 3 4 5\n1 2\n2 3\n3 4\n4 5\n\n-----Example Output-----\n24\n15\n\n-----Explanation-----\n\
  Example case 1: $(1, 4, 2, 3)$ is one of the possible permutations that give the\
  \ optimal answer. Then, the profits of paths between pairs of vertices $(1, 3)$,\
  \ $(1, 4)$ and $(3, 4)$ are $7$, $8$ and $9$ respectively.\nExample case 2: Here,\
  \ any permutation could be chosen."
"vc-preamble": "import Imports.AllImports\n\ndef solve_max_path_profits (n: Nat) (values:\
  \ List Nat) (edges: List (Nat × Nat)) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_valid_tree (n: Nat) (edges: List (Nat × Nat)) : Bool :=\n\
  \  sorry\n"
"vc-theorems": "theorem single_node_case (n: Nat) (values: List Nat) :\n  n = 1 →\
  \ solve_max_path_profits n values [] = 0 := by\n  sorry\n\n\ntheorem valid_inputs_result_properties\
  \ (n: Nat) (values: List Nat) (edges: List (Nat × Nat)) :\n  n ≥ 2 →\n  values.length\
  \ ≥ n →\n  is_valid_tree n edges = true →\n  let result := solve_max_path_profits\
  \ n values edges\n  (result ≥ 0 ∧ result ≤ 10^9 + 7) := by\n  sorry\n\n\ntheorem\
  \ line_graph_properties (n: Nat) (values: List Nat) :\n  n ≥ 2 →\n  values.length\
  \ ≥ n →\n  let edges := List.range (n-1) |>.map (fun i => (i+1, i+2))\n  let result\
  \ := solve_max_path_profits n values edges\n  result ≥ 0 := by\n  sorry\n\n/--\n\
  info: 24\n-/\n#guard_msgs in\n#eval solve_max_path_profits 4 [1, 2, 3, 4] [(1, 2),\
  \ (2, 3), (2, 4)]\n\n/--\ninfo: 15\n-/\n#guard_msgs in\n#eval solve_max_path_profits\
  \ 5 [1, 2, 3, 4, 5] [(1, 2), (2, 3), (3, 4), (4, 5)]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
