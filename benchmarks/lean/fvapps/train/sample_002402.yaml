"vc-description": "Given an array with n integers, your task is to check if it could\
  \ become non-decreasing by modifying at most 1 element.\n\n\n\nWe define an array\
  \ is non-decreasing if array[i]  holds for every i (1 \n\nExample 1:\n\nInput: [4,2,3]\n\
  Output: True\nExplanation: You could modify the first 4 to 1 to get a non-decreasing\
  \ array.\n\n\n\nExample 2:\n\nInput: [4,2,1]\nOutput: False\nExplanation: You can't\
  \ get a non-decreasing array by modify at most one element.\n\n\n\nNote:\nThe n\
  \ belongs to [1, 10,000]."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def check_possibility (nums : List Int) : Bool := sorry\n\ntheorem\
  \ single_element_valid {n : List Int} :\n  n.length = 1 → check_possibility n =\
  \ true := sorry\n"
"vc-theorems": "theorem two_elements_fixable {n : List Int} :\n  n.length = 2 → check_possibility\
  \ n = true := sorry\n\n\ntheorem sorted_list_valid {n : List Int} :\n  (∀ i j, i\
  \ < j → i < n.length → j < n.length → n[i]! ≤ n[j]!) →\n  check_possibility n =\
  \ true := sorry\n\n\ntheorem three_descending_not_fixable :\n  check_possibility\
  \ [3, 2, 1] = false := sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval check_possibility\
  \ [4, 2, 3]\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval check_possibility [4,\
  \ 2, 1]\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval check_possibility [1, 2, 3]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
