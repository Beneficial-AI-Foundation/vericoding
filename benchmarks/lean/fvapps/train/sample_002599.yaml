"vc-description": "## Task\n\nYou will receive a string consisting of lowercase letters,\
  \ uppercase letters and digits as input. Your task is to return this string as blocks\
  \ separated by dashes (`\"-\"`). The elements of a block should be sorted with respect\
  \ to the hierarchy listed below, and each block cannot contain multiple instances\
  \ of the same character. Elements should be put into the first suitable block.\n\
  \nThe hierarchy is:\n1. lowercase letters (`a - z`), in alphabetical order\n2. uppercase\
  \ letters (`A - Z`), in alphabetical order\n3. digits (`0 - 9`), in ascending order\n\
  \n## Examples\n\n* `\"21AxBz\" -> \"xzAB12\"` - since input does not contain repeating\
  \ characters, you only need 1 block\n* `\"abacad\" -> \"abcd-a-a\"` - character\
  \ \"a\" repeats 3 times, thus 3 blocks are needed\n* `\"\" -> \"\"` - an empty input\
  \ should result in an empty output\n* `\"hbh420sUUW222IWOxndjn93cdop69NICEep832\"\
  \ -> \"bcdehjnopsxCEINOUW0234689-dhnpIUW239-2-2-2\"` - a more sophisticated example\n\
  \nGood luck!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def blocks (s : String) : String := sorry\n\ntheorem blocks_empty\
  \ (s : String) : \n  s = \"\" → blocks s = \"\" := sorry\n"
"vc-theorems": "theorem blocks_output_is_string (s : String) : \n  blocks s = blocks\
  \ s := sorry\n\n\ntheorem blocks_contains_input_chars (s : String) (c : Char) :\n\
  \  c ∈ s.data → ∃ block, block ∈ (blocks s).splitOn \"-\" ∧ c ∈ block.data := sorry\n\
  \n\ntheorem blocks_preserves_char_count (s : String) (c : Char) :\n  (s.data.countP\
  \ (· = c)) = ((blocks s).data.filter (· ≠ '-')).countP (· = c) := sorry\n\n\ntheorem\
  \ blocks_preserves_input (s : String) :\n  let result := blocks s\n  s.data = s.data\
  \ := sorry\n\n\ntheorem blocks_sorted_within_block (s : String) :\n  ∀ block ∈ (blocks\
  \ s).splitOn \"-\", \n    ∀ (i j : Fin block.data.length),\n    i.val < j.val →\n\
  \    let c₁ := block.data[i]\n    let c₂ := block.data[j]\n    (c₁.isDigit && !c₂.isDigit)\
  \ || \n    (!c₁.isDigit && c₁.isUpper && !c₂.isUpper) ||\n    (!c₁.isDigit && !c₂.isDigit\
  \ && !c₁.isUpper && !c₂.isUpper && c₁ ≤ c₂) := sorry\n\n/--\ninfo: 'aehiklmpsty-ekst-est'\n\
  -/\n#guard_msgs in\n#eval blocks \"heyitssampletestkk\"\n\n/--\ninfo: ''\n-/\n#guard_msgs\
  \ in\n#eval blocks \"\"\n\n/--\ninfo: 'xzAB12'\n-/\n#guard_msgs in\n#eval blocks\
  \ \"21AxBz\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
