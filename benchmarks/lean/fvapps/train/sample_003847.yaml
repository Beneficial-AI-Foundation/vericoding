"vc-description": "# Leaderboard climbers\n\nIn this kata you will be given a leaderboard\
  \ of unique names for example:\n\n```python\n['John',\n 'Brian',\n 'Jim',\n 'Dave',\n\
  \ 'Fred']\n```\n\nThen you will be given a list of strings for example:\n\n```python\n\
  ['Dave +1', 'Fred +4', 'Brian -1']\n```\n\nThen you sort the leaderboard.\n\nThe\
  \ steps for our example would be:\n\n```python\n# Dave up 1\n['John',\n 'Brian',\n\
  \ 'Dave',\n 'Jim',\n 'Fred']\n```\n\n```python\n# Fred up 4\n['Fred',\n 'John',\n\
  \ 'Brian',\n 'Dave',\n 'Jim']\n```\n\n```python\n# Brian down 1\n['Fred',\n 'John',\n\
  \ 'Dave',\n 'Brian',\n 'Jim']\n```\n\nThen once you have done this you need to return\
  \ the leaderboard.\n\nAll inputs will be valid. All strings in the second list will\
  \ never ask to move a name up higher or lower than possible eg. `\"John +3\"` could\
  \ not be added to the end of the second input list in the example above.\n\nThe\
  \ strings in the second list will always be something in the leaderboard followed\
  \ by a space and a `+` or `-` sign followed by a number."
"vc-preamble": "import Imports.AllImports\n\ndef leaderboard_sort (names : List String)\
  \ (changes : List String) : List String :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def parseChange (change : String) : String × Int :=\n  sorry\n"
"vc-theorems": "theorem leaderboard_invariants\n  (names : List String)\n  (changes\
  \ : List String)\n  (h_names : names.length > 0)\n  (h_unique : ∀ x y, x ∈ names\
  \ → y ∈ names → x = y → names.indexOf x = names.indexOf y) :\n  let result := leaderboard_sort\
  \ names changes\n  -- Length preserved\n  (result.length = names.length) ∧\n  --\
  \ All elements preserved\n  (∀ x, x ∈ names ↔ x ∈ result) ∧\n  -- Valid movements\n\
  \  (∀ change ∈ changes,\n    let (name, delta) := parseChange change\n    name ∈\
  \ names →\n    names.indexOf name - result.indexOf name = delta) :=\n  sorry\n\n\
  \ntheorem leaderboard_bounds\n  (names : List String)\n  (changes : List String)\n\
  \  (h : changes.length = 1) :\n  let result := leaderboard_sort names changes\n\
  \  let (name, delta) := parseChange changes.head!\n  -- Result maintains bounds\n\
  \  (result.indexOf name ≥ 0) ∧\n  (result.indexOf name < names.length) :=\n  sorry\n\
  \n/--\ninfo: expected1\n-/\n#guard_msgs in\n#eval leaderboard_sort [\"John\", \"\
  Brian\", \"Jim\", \"Dave\", \"Fred\"] [\"Dave +1\", \"Fred +4\", \"Brian -1\"]\n\
  \n/--\ninfo: expected2\n-/\n#guard_msgs in\n#eval leaderboard_sort [\"Bob\", \"\
  Larry\", \"Kevin\", \"Jack\", \"Max\"] [\"Max +3\", \"Kevin -1\", \"Kevin +3\"]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
