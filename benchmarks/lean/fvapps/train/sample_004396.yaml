"vc-description": "You should write a simple function that takes string as input and\
  \ checks if it is a valid Russian postal code, returning `true` or `false`.\n\n\
  A valid postcode should be 6 digits with no white spaces, letters or other symbols.\
  \ Empty string should also return false. \n\nPlease also keep in mind that a valid\
  \ post code **cannot start with** `0, 5, 7, 8 or 9`\n\n\n## Examples\n\nValid postcodes:\n\
  * 198328\n* 310003\n* 424000\n\nInvalid postcodes:\n* 056879\n* 12A483\n* 1@63\n\
  * 111"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def zipvalidate (s : String) : Bool := sorry \n\ntheorem length_property\
  \ (s : String) : \n  s.length ≠ 6 → zipvalidate s = false := sorry\n"
"vc-theorems": "theorem digit_property (s : String) :\n  s.length = 6 → (∃ c ∈ s.data,\
  \ !c.isDigit) → zipvalidate s = false := sorry\n\n\ntheorem first_digit_property\
  \ (n : Nat) :\n  let s := toString n\n  s.length = 6 → \n  (s.get 0 = '0' ∨ \n \
  \  s.get 0 = '5' ∨\n   s.get 0 = '7' ∨ \n   s.get 0 = '8' ∨\n   s.get 0 = '9') →\n\
  \  zipvalidate s = false := sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval\
  \ zipvalidate \"142784\"\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval zipvalidate\
  \ \"642784\"\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval zipvalidate \"111\"\n\
  \n/--\ninfo: False\n-/\n#guard_msgs in\n#eval zipvalidate \"555555\"\n\n/--\ninfo:\
  \ False\n-/\n#guard_msgs in\n#eval zipvalidate \"@68345\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
