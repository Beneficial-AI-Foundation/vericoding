"vc-description": "To pass the series of gates guarded by the owls, Kenneth needs\
  \ to present them each with a highly realistic portrait of one.  Unfortunately,\
  \ he is absolutely rubbish at drawing, and needs some code to return a brand new\
  \ portrait with a moment's notice.\n\nAll owl heads look like this:\n\n    ''0v0''\n\
  \nSuch beautiful eyes!\nHowever, they differ in their plumage, which is always symmetrical,\
  \ eg.:\n\n       VVHVAV''0v0''VAVHVV\n\nor\n \n    YYAYAH8XH''0v0''HX8HAYAYY\n\n\
  So Kenneth needs a method that will take a garble of text generated by mashing at\
  \ his keyboard (numbers and letters, but he knows how to avoid punctuation etc.)\
  \ for a bit and give him a symmetrical owl with a lovely little face, with a truly\
  \ symmetrical plumage made of uppercase letters and numbers.\n\n(To be clear, the\
  \ acceptable characters for the plumage are 8,W,T,Y,U,I,O,A,H,X,V and M.)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def owl_pic (s : String) : String := sorry\n\ndef containsSubstr\
  \ (s : String) (sub : String) : Bool := sorry\n\n\n"
"vc-theorems": "theorem owl_pic_result_structure (s : String) :\n  let result := owl_pic\
  \ s\n  let parts := result.splitOn \"''0v0''\"\n  parts.length = 2 âˆ§ \n  parts[0]!\
  \ = String.join (parts[1]!.data.reverse.map toString) := sorry\n\n\ntheorem owl_pic_uppercase\
  \ (s : String) :\n  let result := owl_pic s\n  let leftSide := (result.splitOn \"\
  ''0v0''\")[0]!\n  leftSide.toUpper = leftSide := sorry\n\n/--\ninfo: \"XW''0v0''WX\"\
  \n-/\n#guard_msgs in\n#eval owl_pic \"xwe\"\n\n/--\ninfo: \"UAW8Y8T''0v0''T8Y8WAU\"\
  \n-/\n#guard_msgs in\n#eval owl_pic \"kuawd6r8q27y87t93r76352475437\"\n\n/--\ninfo:\
  \ \"XWWXO''0v0''OXWWX\"\n-/\n#guard_msgs in\n#eval owl_pic \"xweWXo\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
