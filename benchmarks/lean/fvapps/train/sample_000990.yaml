"vc-description": "The chef likes to play with numbers. He takes some integer number\
  \ x, writes it down on his iPad, and then performs with it n−1 operations of the\
  \ two kinds:\n- divide the number x by 3 (x must be divisible by 3);\n- multiply\
  \ the number x by 2.\nAfter each iteration, Chef writes down the result on his iPad\
  \ and replaces x with the result. So there will be n numbers on the iPad after all.\n\
  You are given a sequence of length n — the numbers that Chef wrote down. This sequence\
  \ is given in the order of the sequence can mismatch the order of the numbers written\
  \ on the iPad.\nYour problem is to rearrange elements of this sequence in such a\
  \ way that it can match a possible Chef's game in the order of the numbers written\
  \ on the board. I.e. each next number will be exactly two times the previous number\
  \ or exactly one-third of the previous number.\nI can give a guarantee that the\
  \ answer exists.\n\n-----Input:-----\n- The first line of the input contains an\
  \ integer number N i.e the number of the elements in the sequence. \n- The second\
  \ line of the input contains n integer numbers a1,a2,…, an i.e rearranged (reordered)\
  \ sequence that Chef can write down on the iPad.\n\n-----Output:-----\nPrint N integer\
  \ numbers — rearranged (reordered) input sequence that can be the sequence that\
  \ Chef could write down on the iPad.\nIt is guaranteed that the answer exists\n\n\
  -----Constraints-----\n- $2 \\leq N \\leq 100$\n- $1 \\leq A[i] \\leq  3* 10^{18}\
  \ $\n\n-----Sample Input:-----\n6\n4 8 6 3 12 9\n\n-----Sample Output:-----\n9 3\
  \ 6 12 4 8 \n\n-----EXPLANATION:-----\nIn the first example, the given sequence\
  \ can be rearranged in the following way: [9,3,6,12,4,8]. It can match possible\
  \ Polycarp's game which started with x=9."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_sequence (n : Nat) (nums : List Nat) : List Nat :=\n \
  \ sorry\n"
"vc-theorems": "theorem single_number_identity\n  (x : Nat) :\n  find_sequence 1 [x]\
  \ = [x] :=\nsorry\n\n\ntheorem three_identity \n  (nums : List Nat)\n  (h1 : nums.length\
  \ = 1)\n  (h2 : nums = [3]) :\n  find_sequence nums.length nums = nums :=\nsorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
