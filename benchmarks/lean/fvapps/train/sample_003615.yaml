"vc-description": "Remember the movie with David Bowie: 'The Labyrinth'?\n\nYou can\
  \ remember your childhood here: https://www.youtube.com/watch?v=2dgmgub8mHw\n\n\
  In this scene the girl is faced with two 'Knights\" and two doors. One door leads\
  \ the castle where the Goblin King and her kid brother is, the other leads to certain\
  \ death. She can ask the 'Knights'  a question to find out which door is the right\
  \ one to go in. But...\n\nOne of them always tells the truth, and the other one\
  \ always lies.\n\n\nIn this Kata one of the 'Knights' is on a coffee break, leaving\
  \ the other one to watch the doors. You have to determine if the one there is the\
  \ Knight(Truth teller) or Knave(Liar) based off of what he ```says```\n\nCreate\
  \ a function:\n```\ndef knight_or_knave(says):\n  # returns if knight or knave \n\
  ```\nYour function should determine if the input '''says''' is True or False and\
  \ then return:\n```'Knight!'``` if True or ```'Knave! Do not trust.'``` if False\n\
  \nInput will be either boolean values, or strings.\nThe strings will be simple statements\
  \ that will be either true or false, or evaluate to True or False. \n\nSee example\
  \ test cases for, well... examples\n\nYou will porbably need to ```eval(says)```\n\
  \nBut note: Eval is evil, and is only here for this Kata as a game.\n\nAnd remember\
  \ the number one rule of The Labyrinth, even if it is easy, Don't ever say 'that\
  \ was easy.'"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def knight_or_knave (s : String) : String := sorry\n\ntheorem knight_or_knave_numeric_comparison\
  \ (a b : Int) :\n  let expr := toString a ++ \"==\" ++ toString b\n  let result\
  \ := knight_or_knave expr\n  (result = \"Knight!\" ∨ result = \"Knave! Do not trust.\"\
  ) ∧\n  (result = \"Knight!\" ↔ a = b) := sorry\n"
"vc-theorems": "theorem knight_or_knave_boolean (b : Bool) :\n  let expr := toString\
  \ b\n  knight_or_knave expr = (if b then \"Knight!\" else \"Knave! Do not trust.\"\
  ) := sorry\n\n\ntheorem knight_or_knave_arithmetic (a b : Int) :\n  let expr :=\
  \ toString a ++ \"+\" ++ toString b ++ \"==\" ++ toString (a + b)\n  knight_or_knave\
  \ expr = \"Knight!\" := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
