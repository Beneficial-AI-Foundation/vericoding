"vc-description": "Hooray! Berl II, the king of Berland is making a knight tournament.\
  \ The king has already sent the message to all knights in the kingdom and they in\
  \ turn agreed to participate in this grand event.\n\nAs for you, you're just a simple\
  \ peasant. There's no surprise that you slept in this morning and were late for\
  \ the tournament (it was a weekend, after all). Now you are really curious about\
  \ the results of the tournament. This time the tournament in Berland went as follows:\
  \  There are n knights participating in the tournament. Each knight was assigned\
  \ his unique number — an integer from 1 to n.  The tournament consisted of m fights,\
  \ in the i-th fight the knights that were still in the game with numbers at least\
  \ l_{i} and at most r_{i} have fought for the right to continue taking part in the\
  \ tournament.  After the i-th fight among all participants of the fight only one\
  \ knight won — the knight number x_{i}, he continued participating in the tournament.\
  \ Other knights left the tournament.  The winner of the last (the m-th) fight (the\
  \ knight number x_{m}) became the winner of the tournament. \n\nYou fished out all\
  \ the information about the fights from your friends. Now for each knight you want\
  \ to know the name of the knight he was conquered by. We think that the knight number\
  \ b was conquered by the knight number a, if there was a fight with both of these\
  \ knights present and the winner was the knight number a.\n\nWrite the code that\
  \ calculates for each knight, the name of the knight that beat him.\n\n\n-----Input-----\n\
  \nThe first line contains two integers n, m (2 ≤ n ≤ 3·10^5; 1 ≤ m ≤ 3·10^5) — the\
  \ number of knights and the number of fights. Each of the following m lines contains\
  \ three integers l_{i}, r_{i}, x_{i} (1 ≤ l_{i} < r_{i} ≤ n; l_{i} ≤ x_{i} ≤ r_{i})\
  \ — the description of the i-th fight.\n\nIt is guaranteed that the input is correct\
  \ and matches the problem statement. It is guaranteed that at least two knights\
  \ took part in each battle.\n\n\n-----Output-----\n\nPrint n integers. If the i-th\
  \ knight lost, then the i-th number should equal the number of the knight that beat\
  \ the knight number i. If the i-th knight is the winner, then the i-th number must\
  \ equal 0.\n\n\n-----Examples-----\nInput\n4 3\n1 2 1\n1 3 3\n1 4 4\n\nOutput\n\
  3 1 4 0 \nInput\n8 4\n3 5 4\n3 7 6\n2 8 8\n1 8 1\n\nOutput\n0 8 4 6 4 8 6 1 \n\n\
  \n-----Note-----\n\nConsider the first test case. Knights 1 and 2 fought the first\
  \ fight and knight 1 won. Knights 1 and 3 fought the second fight and knight 3 won.\
  \ The last fight was between knights 3 and 4, knight 4 won."
"vc-preamble": "import Imports.AllImports\n\ndef find_winning_knights (n : Nat) (m\
  \ : Nat) (fights : List (Nat × Nat × Nat)) : List Nat :=\nsorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_valid_result (n : Nat) (fights : List (Nat × Nat × Nat))\
  \ (result : List Nat) : Bool :=\nsorry\n"
"vc-theorems": "theorem find_winning_knights_valid_output (n m : Nat) (fights : List\
  \ (Nat × Nat × Nat)) \n  (h1 : 1 ≤ n) (h2 : n ≤ 100) (h3 : 1 ≤ m) (h4 : m ≤ 100)\n\
  \  (h5 : ∀ (f : Nat × Nat × Nat), f ∈ fights → \n    let (l,r,x) := f\n    1 ≤ l\
  \ ∧ l ≤ x ∧ x ≤ r ∧ r ≤ n) :\n  let result := find_winning_knights n m fights \n\
  \  result.length = n ∧ \n  (∀ x ∈ result, 0 ≤ x ∧ x ≤ n) ∧\n  is_valid_result n\
  \ fights result :=\nsorry\n\n\ntheorem single_fight_winner_pattern (n : Nat) (h\
  \ : 2 ≤ n) (h2 : n ≤ 10) :\n  let fights := [(1, n, 1)]\n  let result := find_winning_knights\
  \ n 1 fights\n  result.length = n ∧\n  result.head? = some 0 ∧ \n  (∀ x ∈ result.tail,\
  \ x = 1) :=\nsorry"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded"
