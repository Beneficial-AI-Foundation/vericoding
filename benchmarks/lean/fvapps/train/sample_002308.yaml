"vc-description": "Given two strings s and t , write a function to determine if t\
  \ is an anagram of s.\n\nExample 1:\n\n\nInput: s = \"anagram\", t = \"nagaram\"\
  \nOutput: true\n\n\nExample 2:\n\n\nInput: s = \"rat\", t = \"car\"\nOutput: false\n\
  \n\nNote:\nYou may assume the string contains only lowercase alphabets.\n\nFollow\
  \ up:\nWhat if the inputs contain unicode characters? How would you adapt your solution\
  \ to such case?"
"vc-preamble": "import Imports.AllImports\n\ndef is_anagram (s t : String) : Bool\
  \ :=\n  sorry\n\n\ndef reverse (s : String) : String :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isPermutation (s t : String) : Bool :=\n  sorry\n"
"vc-theorems": "theorem string_is_anagram_of_itself (s : String) :\n  is_anagram s\
  \ s = true :=\n  sorry\n\n\ntheorem different_length_strings_not_anagrams {s t :\
  \ String}\n  (h : s.length ≠ t.length) :\n  is_anagram s t = false :=\n  sorry\n\
  \n\ntheorem reversed_string_is_anagram (s : String) :\n  is_anagram s (reverse s)\
  \ = true :=\n  sorry\n\n\ntheorem permuted_string_is_anagram (s t : String)\n  (h\
  \ : isPermutation s t) :\n  is_anagram s t = true :=\n  sorry\n\n/--\ninfo: True\n\
  -/\n#guard_msgs in\n#eval is_anagram \"anagram\" \"nagaram\"\n\n/--\ninfo: False\n\
  -/\n#guard_msgs in\n#eval is_anagram \"rat\" \"car\"\n\n/--\ninfo: True\n-/\n#guard_msgs\
  \ in\n#eval is_anagram \"hello\" \"hello\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
