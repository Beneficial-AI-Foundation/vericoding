"vc-description": "Chef is now a corporate person. He has to attend office regularly.\
  \ But chef does not want to go to office, rather he wants to stay home and discover\
  \ different recipes and cook them. \nIn the office where chef works, has two guards\
  \ who count how many times a person enters into the office building. Though the\
  \ duty of a guard is 24 hour in a day, but sometimes they fall asleep during their\
  \ duty and could not track the entry of a person in the office building. But one\
  \ better thing is that they never fall asleep at the same time. At least one of\
  \ them remains awake and counts who enters into the office.\nNow boss of Chef wants\
  \ to calculate how many times Chef has entered into the building. He asked to the\
  \ guard and they give him two integers A and B, count of first guard and second\
  \ guard respectively.\nHelp the boss to count the minimum and maximum number of\
  \ times Chef could have entered into the office building.\n\n-----Input-----\nThe\
  \ first line of the input contains an integer T denoting the number of test cases.\
  \ The description of the T test cases follows. \nEach test case consists of a line\
  \ containing two space separated integers A and B.\n\n-----Output-----\nFor each\
  \ test case, output a single line containing two space separated integers, the minimum\
  \ and maximum number of times Chef could have entered into the office building.\n\
  \n-----Constraints-----\n- 1 ≤ T ≤ 100\n- 0 ≤ A, B ≤ 1000000\n\n-----Example-----\n\
  Input:\n1\n19 17\n\nOutput:\n19 36"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_chef_entries (a b : Nat) : Nat × Nat := sorry\n\ntheorem\
  \ min_leq_max {a b : Nat} :\n  let (min, max) := count_chef_entries a b\n  min ≤\
  \ max := sorry\n"
"vc-theorems": "theorem min_geq_max_input {a b : Nat} :\n  let (min, max) := count_chef_entries\
  \ a b \n  min ≥ (if a ≥ b then a else b) := sorry \n\n\ntheorem max_leq_sum {a b\
  \ : Nat} :\n  let (min, max) := count_chef_entries a b\n  max ≤ a + b := sorry\n\
  \n\ntheorem min_eq_max_conditions {a b : Nat} :\n  let (min, max) := count_chef_entries\
  \ a b\n  min = max → (a = 0 ∨ b = 0 ∨ a = b) := sorry\n\n\ntheorem zero_pair_equals_nonzero\
  \ {x : Nat} :\n  let (min1, max1) := count_chef_entries x 0\n  let (min2, max2)\
  \ := count_chef_entries 0 x\n  (min1 = max1 ∧ min1 = x) ∧ (min2 = max2 ∧ min2 =\
  \ x) := sorry\n\n/--\ninfo: (19, 36)\n-/\n#guard_msgs in\n#eval count_chef_entries\
  \ 19 17\n\n/--\ninfo: (5, 7)\n-/\n#guard_msgs in\n#eval count_chef_entries 5 2\n\
  \n/--\ninfo: (10, 10)\n-/\n#guard_msgs in\n#eval count_chef_entries 0 10\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
