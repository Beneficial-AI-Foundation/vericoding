"vc-description": "> \"7777...*8?!??!*\", exclaimed Bob, \"I missed it again!  Argh!\"\
  \  Every time there's an interesting number coming up, he notices and then promptly\
  \ forgets.  Who *doesn't* like catching those one-off interesting mileage numbers?\n\
  \nLet's make it so Bob **never** misses another interesting number.  We've hacked\
  \ into his car's computer, and we have a box hooked up that reads mileage numbers.\
  \  We've got a box glued to his dash that lights up yellow or green depending on\
  \ whether it receives a `1` or a `2` (respectively).\n\nIt's up to you, intrepid\
  \ warrior, to glue the parts together.  Write the function that parses the mileage\
  \ number input, and returns a `2` if the number is \"interesting\" (see below),\
  \ a `1` if an interesting number occurs within the next two miles, or a `0` if the\
  \ number is not interesting.\n\n**Note:** In Haskell, we use `No`, `Almost` and\
  \ `Yes` instead of `0`, `1` and `2`.\n\n## \"Interesting\" Numbers\n\nInteresting\
  \ numbers are 3-or-more digit numbers that meet one or more of the following criteria:\n\
  \n```if-not:ruby,python\n* Any digit followed by all zeros: `100`, `90000`\n* Every\
  \ digit is the same number: `1111`\n* The digits are sequential, incementing†: `1234`\n\
  * The digits are sequential, decrementing‡: `4321`\n* The digits are a palindrome:\
  \ `1221` or `73837`\n* The digits match one of the values in the `awesomePhrases`\
  \ array\n```\n```if:ruby,python\n* Any digit followed by all zeros: `100`, `90000`\n\
  * Every digit is the same number: `1111`\n* The digits are sequential, incementing†:\
  \ `1234`\n* The digits are sequential, decrementing‡: `4321`\n* The digits are a\
  \ palindrome: `1221` or `73837`\n* The digits match one of the values in the `awesome_phrases`\
  \ array\n```\n\n> † For incrementing sequences, `0` should come after `9`, and not\
  \ before  `1`, as in `7890`.\n> ‡ For decrementing sequences, `0` should come after\
  \ `1`, and not before  `9`, as in `3210`.\n\nSo, you should expect these inputs\
  \ and outputs:\n\n```python\n# \"boring\" numbers\nis_interesting(3, [1337, 256])\
  \    # 0\nis_interesting(3236, [1337, 256]) # 0\n\n# progress as we near an \"interesting\"\
  \ number\nis_interesting(11207, []) # 0\nis_interesting(11208, []) # 0\nis_interesting(11209,\
  \ []) # 1\nis_interesting(11210, []) # 1\nis_interesting(11211, []) # 2\n\n# nearing\
  \ a provided \"awesome phrase\"\nis_interesting(1335, [1337, 256]) # 1\nis_interesting(1336,\
  \ [1337, 256]) # 1\nis_interesting(1337, [1337, 256]) # 2\n```\n\n## Error Checking\n\
  \n* A number is only interesting if it is greater than `99`!\n* Input will *always*\
  \ be an integer greater than `0`, and less than `1,000,000,000`. \n* The `awesomePhrases`\
  \ array will always be provided, and will always be an array, but may be empty.\
  \  (Not *everyone* thinks numbers spell funny words...)\n* You should only ever\
  \ output `0`, `1`, or `2`."
"vc-preamble": "import Imports.AllImports\n\ndef is_interesting (number : Nat) (awesome_phrases\
  \ : Array Nat) : Nat :=\n  sorry\n\n\ndef isPalindrome (n : Nat) : Bool :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isRoundNumber (n : Nat) : Bool :=\n  sorry\n"
"vc-theorems": "theorem is_interesting_result_valid (n : Nat) (phrases : Array Nat)\
  \ :\n  let result := is_interesting n phrases\n  result = 0 ∨ result = 1 ∨ result\
  \ = 2 :=\nsorry\n\n\ntheorem small_numbers_boring (n : Nat) (h : n < 98) :\n  is_interesting\
  \ n #[] = 0 :=\nsorry\n\n\ntheorem awesome_phrases_direct_match (n : Nat) (phrases\
  \ : Array Nat) \n  (h1 : n ≥ 100) (h2 : phrases.contains n = true) :\n  is_interesting\
  \ n phrases = 2 :=\nsorry\n\n\ntheorem awesome_phrases_nearby_match (n : Nat) (phrases\
  \ : Array Nat)\n  (h1 : n ≥ 98) (h2 : phrases.contains (n + 1) = true ∨ phrases.contains\
  \ (n + 2) = true) :\n  is_interesting n phrases ≥ 1 :=\nsorry\n\n\ntheorem palindrome_direct_match\
  \ (n : Nat) (h1 : n ≥ 100) \n  (h2 : isPalindrome n = true) :\n  is_interesting\
  \ n #[] = 2 :=\nsorry\n\n\ntheorem palindrome_nearby_match (n : Nat) (h1 : n ≥ 98)\n\
  \  (h2 : isPalindrome (n + 1) = true ∨ isPalindrome (n + 2) = true)\n  (h3 : n +\
  \ 1 ≥ 100 ∨ n + 2 ≥ 100) :\n  is_interesting n #[] ≥ 1 :=\nsorry\n\n\n\n\n\n\ntheorem\
  \ incrementing_sequences (n : Nat) \n  (h : n = 123 ∨ n = 234 ∨ n = 345 ∨ n = 456\
  \ ∨ n = 567 ∨ n = 678 ∨ n = 789 ∨ n = 890) :\n  is_interesting n #[] = 2 :=\nsorry\n\
  \n\ntheorem decrementing_sequences (n : Nat)\n  (h : n = 987 ∨ n = 876 ∨ n = 765\
  \ ∨ n = 654 ∨ n = 543 ∨ n = 432 ∨ n = 321) :\n  is_interesting n #[] = 2 :=\nsorry\n\
  \n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval is_interesting 3 #[1337, 256]\n\n/--\n\
  info: 1\n-/\n#guard_msgs in\n#eval is_interesting 1336 #[1337, 256]\n\n/--\ninfo:\
  \ 2\n-/\n#guard_msgs in\n#eval is_interesting 1000 #[1337, 256]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
