"vc-description": "Raj loves to listen to songs in his free time. It’s his birthday\
  \ tomorrow and his friend Neelansh wants his gift to be the most unique. Being great\
  \ at making music, he decides to produce a song for him. However, Raj likes songs\
  \ according to their beauty. He determines the beauty of the song as the number\
  \ of times all the octave musical tones are completed in ascending order.\n\nHe\
  \ begins with a jumbled tone of length N and numbers each octave tone as 1,2,3….8.\n\
  \nNeelansh wants to maximize the beauty of the song but since he uses the trial\
  \ version of the software,\n- He cannot change the size of N.\n- He cannot introduce\
  \ any new tone, but can choose any two tones and swap their positions\n\nHowever,\
  \ Neelansh just received a mail that he needs to submit all his pending assignments\
  \ by tomorrow. He has tons of assignments left to do, but he doesn’t want to spoil\
  \ the idea of his gift. Can you help him? \n\n-----INPUT-----\n- The first line\
  \ contains a single integer T- the number of test cases  \n- The first line of each\
  \ test case contains a single integer N- the length of the song  \n- The second\
  \ line contains N- space separated integers ai,  ai+1,.....aN \n\n-----OUTPUT-----\n\
  For each test case, print a single line containing one integer- the maximum possible\
  \ beauty of the song  \n\n-----CONSTRAINTS-----\n1<=T<=102\n1<=N<=105\n1<=a<=8\n\
  \n-----EXAMPLE INPUT-----\n2\n\n8\n\n1 2 3 4 5 6 7 8\n\n16\n\n1 2 1 2 3 3 4 4 5\
  \ 5 6 6 7 8 7 8\n\n-----EXAMPLE OUTPUT-----\n1\n\n2"
"vc-preamble": "import Imports.AllImports\n\ndef find_max_beauty (n: Nat) (tones:\
  \ List Nat) : Nat := sorry\n\ndef countOccurrences (x : Nat) (xs : List Nat) : Nat\
  \ :=\n  xs.foldl (fun count y => if x = y then count + 1 else count) 0\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def unique (xs : List Nat) : List Nat :=\n  xs.foldl (fun acc x\
  \ => if x ∈ acc then acc else x::acc) []\n"
"vc-theorems": "theorem find_max_beauty_is_min_frequency \n  (tones: List Nat) (h:\
  \ ∀ x ∈ tones, 1 ≤ x ∧ x ≤ 8) :\n  let distinct := unique tones;\n  if distinct.length\
  \ = 8 then\n    find_max_beauty tones.length tones = \n      (List.map (fun x =>\
  \ countOccurrences x tones) distinct).minimum?\n  else\n    find_max_beauty tones.length\
  \ tones = 0 := sorry\n\n\ntheorem find_max_beauty_non_negative \n  (tones: List\
  \ Nat) (h: ∀ x ∈ tones, 1 ≤ x ∧ x ≤ 8) :\n  find_max_beauty tones.length tones ≥\
  \ 0 := sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval find_max_beauty 8 [1, 2,\
  \ 3, 4, 5, 6, 7, 8]\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval find_max_beauty 16\
  \ [1, 2, 1, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 8, 7, 8]\n\n/--\ninfo: 0\n-/\n#guard_msgs\
  \ in\n#eval find_max_beauty 4 [1, 2, 3, 4]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
