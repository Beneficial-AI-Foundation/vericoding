"vc-description": "In my town ,there live a coder named Chef . He is a cool programmer\
  \ . One day , he participate in a programming contest ,the contest give him only\
  \ one problem . If he can’t solve the problem ,the problem setter will kill him\
  \ . But the round allow you to help Chef. Can you save the life of Chef from problem\
  \ setter ? :p\nYou are given two point of a straightline in X and Y axis and they\
  \ are A(x1 , y1) and B(x2 ,y2) . Problem setter will give you another point C(x3\
  \ , y3) . If C exist in AB straightline ,then print “YES” . Otherwise ,print “NO”\
  \ in first line and print the minimum distance from C to AB straightline in second\
  \ line .\nPlease , save the life of Chef .\nNote : It is not possible that A and\
  \ B point is similar .\n\n-----Input:-----\nThe first line of the input contains\
  \ a single integer t (1≤t≤100) — the number of test cases .\nEach test case starts\
  \ with four integers( x1, y1 , x2 , y2 ) in first line .\nNext line contains a single\
  \ number q ,the number of queries . Each query contains two integers ( x3 ,y3 )\n\
  \n-----Output:-----\nPrint , q number of “YES” or “NO” (as it mentioned above) in\
  \ each test case .For every test case , print “Test case : i ” ( 1<= i <=T )\n\n\
  -----Constraints-----\n-1000 <=  x1 , y1 , x2 , y2 , x3 , y3 <= 1000\n\n-----Sample\
  \ Input:-----\n2\n3  5  6  5\n2\n4  5\n6  8\n3  4  7  10\n1\n7  4\n\n-----Sample\
  \ Output:-----\nTest case : 1\nYES\nNO\n3.000000\nTest case : 2\nNO\n3.328201"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def String.toFloat? (s : String) : Option Float := sorry\n\ndef\
  \ solve_geometry (x1 y1 x2 y2 : Int) (queries : List (Int × Int)) : List String\
  \ :=\nsorry\n"
"vc-theorems": "theorem solve_geometry_basic_properties {x1 y1 x2 y2 : Int} (h : x1\
  \ ≠ x2) \n  (queries : List (Int × Int)) :\n  match solve_geometry x1 y1 x2 y2 queries\
  \ with\n  | result =>\n    (result.length = queries.length ∨ result.length = 2 *\
  \ queries.length) ∧\n    ∀ i : Nat, i < result.length →\n      if i % 2 = 0 \n \
  \     then List.get! result i = \"YES\" ∨ List.get! result i = \"NO\"\n      else\
  \ ∃ d : Float, (List.get! result i).toFloat? = some d ∧ d ≥ 0 :=\nsorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
