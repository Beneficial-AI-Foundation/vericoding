"vc-description": "Nobody knows, but $N$ frogs live in Chef's garden.\nNow they are\
  \ siting on the X-axis and want to speak to each other. One frog can send a message\
  \ to another one if the distance between them is less or equal to $K$.\nChef knows\
  \ all $P$ pairs of frogs, which want to send messages. Help him to define can they\
  \ or not!\nNote : More than $1$ frog can be on the same point on the X-axis.\n\n\
  -----Input-----\n- The first line contains three integers $N$, $K$ and $P$.\n- The\
  \ second line contains $N$ space-separated integers $A_1$, $A_2$, …, $A_N$ denoting\
  \ the x-coordinates of frogs\".\n- Each of the next $P$ lines contains two integers\
  \ $A$ and $B$ denoting the numbers of frogs according to the input.\n\n-----Output-----\n\
  For each pair print \"Yes\" without a brackets if frogs can speak and \"No\" if\
  \ they cannot.\n\n-----Constraints-----\n- $1 \\le N, P \\le 10^5$\n- $0 \\le A_i,\
  \ K \\le 10^9$\n- $1 \\le A, B \\le N$\n\n-----Example-----\n\n-----Sample Input:-----\n\
  5 3 3\n0 3 8 5 12\n1 2\n1 3\n2 5\n\n-----Sample Output:-----\nYes\nYes\nNo\n\n-----Explanation-----\n\
  - \nFor pair $(1, 2)$ frog $1$ can directly speak to the frog $2$ as the distance\
  \ between them is $3 - 0 = 3 \\le K$ . \n- \nFor pair $(1, 3)$ frog $1$ can send\
  \ a message to frog $2$, frog $2$ can send it to frog $4$ and it can send it to\
  \ frog $3$.\n- \nFor pair $(2, 5)$ frogs can't send a message under current constraints."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def absolute_value (x : Int) : Int := if x ≥ 0 then x else -x\n\
  \ndef can_frogs_communicate (n : Nat) (k : Int) (coords : List Int) (pairs : List\
  \ (Nat × Nat)) : List String := sorry\n"
"vc-theorems": "theorem can_frogs_communicate_output_format \n  {n : Nat} {k : Int}\
  \ {coords : List Int} {pairs : List (Nat × Nat)}\n  (h1 : n ≥ 2)\n  (h2 : coords.length\
  \ = n)\n  (h3 : coords.Nodup)\n  (h4 : pairs.length > 0) :\n  let result := can_frogs_communicate\
  \ n k coords pairs\n  result.length = pairs.length ∧ \n  ∀ x, x ∈ result → x = \"\
  Yes\" ∨ x = \"No\" := sorry\n\n\ntheorem can_frogs_communicate_reflexive\n  {n :\
  \ Nat} {k : Int} {coords : List Int}\n  (h1 : n ≥ 2)\n  (h2 : coords.length = n)\n\
  \  (h3 : coords.Nodup) :\n  let same_pairs := List.map (fun i => (i+1, i+1)) (List.range\
  \ n)\n  let result := can_frogs_communicate n k coords same_pairs\n  ∀ x, x ∈ result\
  \ → x = \"Yes\" := sorry\n\n\ntheorem can_frogs_communicate_distance\n  {n : Nat}\
  \ {k : Int} {coords : List Int} {pairs : List (Nat × Nat)}\n  (h1 : n ≥ 2)\n  (h2\
  \ : coords.length = n)\n  (h3 : coords.Nodup)\n  (h4 : pairs.length > 0) :\n  let\
  \ result := can_frogs_communicate n k coords pairs\n  ∀ (i : Nat), i < pairs.length\
  \ →\n    result[i]! = \"Yes\" →\n    ∀ x y, x ∈ coords → y ∈ coords →\n      x ≥\
  \ min (coords[pairs[i]!.1-1]!) (coords[pairs[i]!.2-1]!) →\n      y ≤ max (coords[pairs[i]!.1-1]!)\
  \ (coords[pairs[i]!.2-1]!) →\n      absolute_value (x - y) ≤ k := sorry\n\n\ntheorem\
  \ can_frogs_communicate_symmetric \n  {n : Nat} {k : Int} {coords : List Int} {pairs\
  \ : List (Nat × Nat)}\n  (h1 : n ≥ 2)\n  (h2 : coords.length = n)\n  (h3 : coords.Nodup)\n\
  \  (h4 : pairs.length > 0) :\n  let reverse_pairs := pairs.map (fun p => (p.2, p.1))\n\
  \  can_frogs_communicate n k coords pairs = \n  can_frogs_communicate n k coords\
  \ reverse_pairs := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
