"vc-description": "Chef was bored staying at home in the lockdown. He wanted to go\
  \ out for a change. Chef and Chefu are fond of eating Cakes,so they decided to go\
  \ the Cake shop where cakes of all possible price are available .\nThey decided\
  \ to purchase cakes of equal price and each of them will pay for their cakes. Chef\
  \ only has coins of denomination $N$ whereas Chefu has that of denomination $M$.\n\
  So they want your help to find out the minimum amount to be spent in order to purchase\
  \ the cakes.\n\n-----Input:-----\n- First line will contain $T$, number of testcases.\
  \ Then the testcases follow. \n- Each testcase contains of a single line of input,\
  \ two integers $N, M$. \n\n-----Output:-----\nFor each testcase, output in a single\
  \ line answer the minimum amount to be spent in order to purchase the cake.\n\n\
  -----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $2 \\leq N,M \\leq 10^7$\n\n\
  -----Sample Input:-----\n1\n2 3\n\n-----Sample Output:-----\n6"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_min_cake_cost (n m : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem find_min_cake_cost_divisible (n m : Nat)\n  (hn : n > 0) (hm\
  \ : m > 0) :\n  find_min_cake_cost n m % n = 0 âˆ§ find_min_cake_cost n m % m = 0\
  \ :=\n  sorry\n\n\ntheorem find_min_cake_cost_positive (n m : Nat)\n  (hn : n >\
  \ 0) (hm : m > 0) :\n  find_min_cake_cost n m > 0 :=\n  sorry\n\n\n\n\ntheorem find_min_cake_cost_symmetric\
  \ (n m : Nat) \n  (hn : n > 0) (hm : m > 0) :\n  find_min_cake_cost n m = find_min_cake_cost\
  \ m n :=\n  sorry\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval find_min_cake_cost\
  \ 2 3\n\n/--\ninfo: 12\n-/\n#guard_msgs in\n#eval find_min_cake_cost 4 6\n\n/--\n\
  info: 35\n-/\n#guard_msgs in\n#eval find_min_cake_cost 5 7\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
