"vc-description": "Write a function that will check whether the permutation of an\
  \ input string is a palindrome. Bonus points for a solution that is efficient and/or\
  \ that uses _only_ built-in language functions. Deem yourself **brilliant** if you\
  \ can come up with a version that does not use _any_ function whatsoever.\n\n# Example\
  \ \n\n  `madam` -> True   \n  `adamm` -> True   \n  `junk`  -> False  \n  \n## Hint\
  \ \nThe brute force approach would be to generate _all_ the permutations of the\
  \ string and check each one of them whether it is a palindrome. However, an optimized\
  \ approach will not require this at all."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def permute_a_palindrome (s : String) : Bool := sorry\n\ndef String.reverse\
  \ (s : String) : String := sorry\n"
"vc-theorems": "theorem empty_string_palindrome_permutable :\n  permute_a_palindrome\
  \ \"\" = true := sorry \n\n\ntheorem repeat_string_palindrome_permutable (s : String)\
  \ :\n  permute_a_palindrome (s ++ s) = true := sorry\n\n\ntheorem even_length_even_occurrences_palindrome\
  \ (s : String) :\n  let even_str := s ++ s\n  permute_a_palindrome even_str = true\
  \ := sorry\n\n\n\n\ntheorem single_char_palindrome_permutable (c : Char) :\n  permute_a_palindrome\
  \ (String.singleton c) = true := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
