"vc-description": "Given a string, you need to reverse the order of characters in\
  \ each word within a sentence while still preserving whitespace and initial word\
  \ order.\n\nExample 1:\n\nInput: \"Let's take LeetCode contest\"\nOutput: \"s'teL\
  \ ekat edoCteeL tsetnoc\"\n\n\n\nNote:\nIn the string, each word is separated by\
  \ single space and there will not be any extra space in the string."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def reverseWords (s : String) : String := sorry\n\ntheorem reverse_words_maintains_word_count\
  \ {words : List String} (s : String) \n    (h : s = String.intercalate \" \" words)\
  \ (h2 : ∀ w ∈ words, w.length > 0) : \n    (reverseWords s).splitOn.length = s.splitOn.length\
  \ := sorry\n"
"vc-theorems": "theorem reverse_words_maintains_word_length {words : List String}\
  \ (s : String)\n    (h : s = String.intercalate \" \" words) (h2 : ∀ w ∈ words,\
  \ w.length > 0) :\n    ∀ (orig rev : String), orig ∈ s.splitOn → rev ∈ (reverseWords\
  \ s).splitOn →\n    orig.length = rev.length := sorry\n\n\ntheorem double_reverse_is_identity\
  \ (s : String) (h : s.length > 0) :\n    reverseWords (reverseWords s) = s := sorry\n\
  \n\ntheorem reverse_words_empty :\n    reverseWords \"\" = \"\" := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
