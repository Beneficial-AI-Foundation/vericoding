"vc-description": "Recently, Chef studied the binary numeral system and noticed that\
  \ it is extremely simple to perform bitwise operations like AND, XOR or bit shift\
  \ on non-negative integers, while it is much more complicated to perform arithmetic\
  \ operations (e.g. addition, multiplication or division).\nAfter playing with binary\
  \ operations for a while, Chef invented an interesting algorithm for addition of\
  \ two non-negative integers $A$ and $B$:\nfunction add(A, B):\nwhile B is greater\
  \ than 0:\nU = A XOR B\nV = A AND B\nA = U\nB = V * 2\nreturn A\n\nNow Chef is wondering\
  \ how fast this algorithm is. Given the initial values of $A$ and $B$ (in binary\
  \ representation), he needs you to help him compute the number of times the while-loop\
  \ of the algorithm is repeated.\n\n-----Input-----\n- The first line of the input\
  \ contains a single integer $T$ denoting the number of test cases. The description\
  \ of $T$ test cases follows.\n- The first line of each test case contains a single\
  \ string $A$.\n- The second line contains a single string $B$.\n\n-----Output-----\n\
  For each test case, print a single line containing one integer â€• the number of iterations\
  \ the algorithm will perform during addition of the given numbers $A$ and $B$.\n\
  \n-----Constraints-----\n- $1 \\le T \\le 10^5$\n- $1 \\le |A|, |B| \\le 10^5$\n\
  - $A$ and $B$ contain only characters '0' and '1'\n- the sum of $|A| + |B|$ over\
  \ all test cases does not exceed $10^6$\n\n-----Subtasks-----\nSubtask #1 (20 points):\
  \ $|A|, |B| \\le 30$\nSubtask #2 (30 points):\n- $|A|, |B| \\le 500$\n- the sum\
  \ of $|A| + |B|$ over all test cases does not exceed $10^5$\nSubtask #3 (50 points):\
  \ original constraints\n\n-----Example Input-----\n3\n100010\n0\n0\n100010\n11100\n\
  1010\n\n-----Example Output-----\n0\n1\n3\n\n-----Explanation-----\nExample case\
  \ 1: The initial value of $B$ is $0$, so while-loop is not performed at all.\nExample\
  \ case 2: The initial values of $A$ and $B$ are $0_2 = 0$ and $100010_2 = 34$ respectively.\
  \ When the while-loop is performed for the first time, we have:\n- $U = 34$\n- $V\
  \ = 0$\n- $A$ changes to $34$\n- $B$ changes to $2 \\cdot 0 = 0$\nThe while-loop\
  \ terminates immediately afterwards, so it is executed only once.\nExample case\
  \ 3: The initial values of $A$ and $B$ are $11100_2 = 28$ and $1010_2 = 10$ respectively.\
  \ After the first iteration, their values change to $22$ and $16$ respectively.\
  \ After the second iteration, they change to $6$ and $32$, and finally, after the\
  \ third iteration, to $38$ and $0$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_binary_additions (s1 s2 : String) : Nat := sorry\n\n\
  theorem zeros_add_no_carry : \n  count_binary_additions \"0\" \"0\" = 0 := sorry\n"
"vc-theorems": "theorem one_zero_no_carry :\n  count_binary_additions \"1\" \"0\"\
  \ = 0 := sorry \n\n\ntheorem zero_one_one_carry :\n  count_binary_additions \"0\"\
  \ \"1\" = 1 := sorry\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval count_binary_additions\
  \ \"100010\" \"0\"\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval count_binary_additions\
  \ \"0\" \"100010\"\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval count_binary_additions\
  \ \"11100\" \"1010\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
