"vc-description": "Create a function which answers the question \"Are you playing\
  \ banjo?\".  \nIf your name starts with the letter \"R\" or lower case \"r\", you\
  \ are playing banjo!\n\nThe function takes a name as its only argument, and returns\
  \ one of the following strings:\n```\nname + \" plays banjo\" \nname + \" does not\
  \ play banjo\"\n```\nNames given are always valid strings."
"vc-preamble": "import Imports.AllImports\n\ndef String.hasSubstring (s1 s2 : String)\
  \ : Bool :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def areYouPlayingBanjo (name : String) : String :=\n  sorry\n"
"vc-theorems": "theorem banjo_output_format (name : String) (h : name.length > 0)\
  \ :\n  let result := areYouPlayingBanjo name\n  result.startsWith name ∧\n  result.endsWith\
  \ \"banjo\" ∧\n  (result.hasSubstring \" plays banjo\" ∨ result.hasSubstring \"\
  \ does not play banjo\") :=\nsorry\n\n\ntheorem starts_with_r_plays_banjo (name\
  \ : String) (h1 : name.length > 0)\n    (h2 : name.front = 'r' ∨ name.front = 'R')\
  \ :\n  (areYouPlayingBanjo name).hasSubstring \" plays banjo\" = true :=\nsorry\n\
  \n\ntheorem not_r_does_not_play_banjo (name : String) (h1 : name.length > 0)\n \
  \   (h2 : name.front ≠ 'r' ∧ name.front ≠ 'R') :\n  (areYouPlayingBanjo name).hasSubstring\
  \ \" does not play banjo\" = true :=\nsorry\n\n/--\ninfo: expected\n-/\n#guard_msgs\
  \ in\n#eval areYouPlayingBanjo \"Adam\"\n\n/--\ninfo: expected\n-/\n#guard_msgs\
  \ in\n#eval areYouPlayingBanjo \"Ringo\"\n\n/--\ninfo: expected\n-/\n#guard_msgs\
  \ in\n#eval areYouPlayingBanjo \"rolf\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
