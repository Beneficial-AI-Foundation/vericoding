"vc-description": "Write a function that returns the count of characters that have\
  \ to be removed in order to get a string with no consecutive repeats.\n\n*Note:*\
  \ This includes any characters\n\n##  Examples\n\n```python\n'abbbbc'  => 'abc'\
  \    #  answer: 3\n'abbcca'  => 'abca'   #  answer: 2\n'ab cca'  => 'ab ca'  # \
  \ answer: 1\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_repeats (s : String) : Nat :=\n  sorry\n"
"vc-theorems": "theorem count_repeats_nonnegative (s : String) :\n  count_repeats\
  \ s ≥ 0 :=\n  sorry\n\n\ntheorem count_repeats_bounded (s : String) :\n  count_repeats\
  \ s ≤ max 0 (s.length - 1) :=\n  sorry\n\n\ntheorem count_repeats_empty :\n  count_repeats\
  \ \"\" = 0 :=\n  sorry\n\n\ntheorem count_repeats_length_after_removal (s : String)\
  \ (h : s.length > 0) :\n  s.length - count_repeats s = (s.foldl (fun acc c => if\
  \ acc.isEmpty || acc.back ≠ c then acc.push c else acc) \"\").length :=\n  sorry\n\
  \n\ntheorem count_repeats_monotonic_on_duplication (s : String) (h : s.length >\
  \ 0) :\n  let doubled := String.join (s.data.map (fun c => String.mk [c, c]))\n\
  \  count_repeats doubled ≥ count_repeats s :=\n  sorry\n\n/--\ninfo: 0\n-/\n#guard_msgs\
  \ in\n#eval count_repeats \"abcdefg\"\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval\
  \ count_repeats \"aabbcc\"\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval count_repeats\
  \ \"@*$##^^^*)*\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
