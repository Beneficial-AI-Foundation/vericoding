"vc-description": "Raavan gave a problem to his son, Indrajeet, and asked him to solve\
  \ the problem to prove his intelligence and power. The Problem was like: Given 3\
  \ integers, $N$, $K$, and $X$, produce an array $A$ of length $N$, in which the\
  \ XOR of all elements of each contiguous sub-array, of length $K$, is exactly equal\
  \ to $X$. Indrajeet found this problem very tricky and difficult, so, help him to\
  \ solve this problem.\n\n-----Note:-----\n- $A$i must be an integer between $0$\
  \ to $10$$18$ (both inclusive), where $A$i denotes the $i$$th$ element of the array,\
  \ $A$.\n- If there are multiple solutions, satisfying the problem condition(s),\
  \ you can print any \"one\" solution.\n\n-----Input:-----\n- First line will contain\
  \ $T$, number of testcases. Then, the testcases follow. \n- Each testcase, contains\
  \ a single line of input, of 3 integers, $N$, $K$, and $X$.\n\n-----Output:-----\n\
  For each testcase, output in a single line, an array $A$ of $N$ integers, where\
  \ each element of the array is between $0$ to $10$$18$ (both inclusive), satisfying\
  \ the conditions of the problem, given by Raavan to his son.\n\n-----Constraints:-----\n\
  - $1 \\leq T \\leq 1000$\n- $1 \\leq N \\leq 10^3$\n- $1 \\leq K \\leq N$\n- $0\
  \ \\leq X \\leq 10$$18$\n\n-----Sample Input:-----\n3\n5 1 4\n5 2 4\n5 3 4\n\n-----Sample\
  \ Output:-----\n4 4 4 4 4\n3 7 3 7 3\n11 6 9 11 6\n\n-----Explanation:-----\n$Sample$\
  \ $Case$ $-$ $1$: Since, we can see, the XOR of all elements of all sub-arrays of\
  \ length $1$, is equal to $4$, hence, the array {$4,4,4,4,4$}, is a valid solution\
  \ to the $Sample$ $Case$ $-$ $1$. All contiguous sub-arrays of length $1$, of the\
  \ output array $A$, are as follows:\n[1,1]: {4} - XOR([1,1]) = $4$\n[2,2]: {4} -\
  \ XOR([2,2]) = $4$\n[3,3]: {4} - XOR([3,3]) = $4$\n[4,4]: {4} - XOR([4,4]) = $4$\n\
  [5,5]: {4} - XOR([5,5]) = $4$"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solveXorArray (n k x : Nat) : List Nat := sorry\n\ndef arrayXor\
  \ (arr : List Nat) : Nat := sorry\n"
"vc-theorems": "theorem k1_fixed_result :\n  solveXorArray 5 1 4 = [4, 4, 4, 4, 4]\
  \ := sorry\n\n\ntheorem k1_fixed_xor :\n  arrayXor (solveXorArray 5 1 4) = 4 :=\
  \ sorry\n\n\ntheorem larger_k_correct (n k x : Nat) \n  (h1 : n ≥ 4) \n  (h2 : k\
  \ ≥ 4) \n  (h3 : x < 2^30) :\n  let result := solveXorArray n k x\n  (List.length\
  \ result = n) ∧ \n  (arrayXor result = x) := sorry\n\n/--\ninfo: [4, 4, 4, 4, 4]\n\
  -/\n#guard_msgs in\n#eval solve_xor_array 5 1 4\n\n/--\ninfo: [3, 7, 3, 7, 3]\n\
  -/\n#guard_msgs in\n#eval solve_xor_array 5 2 4\n\n/--\ninfo: [11, 6, 9, 11, 6]\n\
  -/\n#guard_msgs in\n#eval solve_xor_array 5 3 4\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
