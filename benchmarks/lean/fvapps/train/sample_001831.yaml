"vc-description": "Given many words, words[i] has weight i.\n\nDesign a class WordFilter\
  \ that supports one function, WordFilter.f(String prefix, String suffix).\nIt will\
  \ return the word with given prefix and suffix with maximum weight.  If no word\
  \ exists, return -1.\n\n\nExamples:\n\nInput:\nWordFilter([\"apple\"])\nWordFilter.f(\"\
  a\", \"e\") // returns 0\nWordFilter.f(\"b\", \"\") // returns -1\n\n\nNote:\n\n\
  words has length in range [1, 15000].\nFor each test case, up to words.length queries\
  \ WordFilter.f may be made.\nwords[i] has length in range [1, 10].\nprefix, suffix\
  \ have lengths in range [0, 10].\nwords[i] and prefix, suffix queries consist of\
  \ lowercase letters only."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def WordFilter.new (words : List String) : WordFilter := sorry\n\
  \ndef mkString : List Char → String := sorry\n"
"vc-theorems": "theorem wordfilter_result_bounds (words : List String) (wf : WordFilter)\n\
  \    (h : words ≠ []) (p s : String) :\n  wf.f p s ≤ words.length := sorry\n\n\n\
  theorem wordfilter_match_criteria (words : List String) (wf : WordFilter)\n    (h\
  \ : words ≠ []) (p s : String)\n    (startsWith endsWith : String → String → Bool)\n\
  \    (h3 : wf.f p s < words.length) :\n  let matching_word := words.get! (wf.f p\
  \ s)\n  startsWith matching_word p ∧ endsWith matching_word s := sorry\n\n\ntheorem\
  \ wordfilter_last_match (words : List String) (wf : WordFilter)\n    (h : words\
  \ ≠ []) (p s : String)\n    (startsWith endsWith : String → String → Bool)\n   \
  \ (h3 : wf.f p s < words.length) :\n  ∀ i, wf.f p s < i → i < words.length →\n \
  \ ¬(startsWith (words.get! i) p ∧ endsWith (words.get! i) s) := sorry\n\n\ntheorem\
  \ wordfilter_empty_strings (words : List String) (wf : WordFilter)\n    (h : words\
  \ ≠ []) :\n  wf.f \"\" \"\" = words.length - 1 := sorry\n\n\ntheorem wordfilter_impossible_match\
  \ (words : List String) (wf : WordFilter)\n    (h : words ≠ []) (maxLen : Nat) (len\
  \ : String → Nat)\n    (h2 : maxLen = words.foldl (fun m w => max m (len w)) 0)\
  \ :\n  wf.f (mkString (List.replicate (maxLen + 1) 'a')) \"\" = words.length :=\
  \ sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
