"vc-description": "Given a side length `n`, traveling only right and down how many\
  \ ways are there to get from the top left corner to the bottom right corner of an\
  \ `n by n` grid?\n\nYour mission is to write a program to do just that!\n\nAdd code\
  \ to `route(n)` that returns the number of routes for a grid `n by n` (if n is less\
  \ than 1 return 0).\n\nExamples:\n    \n    -100 -> 0\n    \n    1 -> 2\n     \n\
  \    2 -> 6\n     \n    20 -> 137846528820\n    \nNote: \nyou're traveling on the\
  \ edges of the squares in the grid not the squares themselves.\n\nPS.If anyone has\
  \ any suggestions of how to improve this kata please let me know."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def routes (n : Int) : Int := sorry\n\ndef factorial (n : Int)\
  \ : Int := sorry\n"
"vc-theorems": "theorem routes_formula {n : Int} (h : n > 0) : \n  routes n = factorial\
  \ (2*n) / (factorial n * factorial n) := sorry\n\n\ntheorem routes_non_positive\
  \ {n : Int} (h : n ≤ 0) :\n  routes n = 0 := sorry\n\n\ntheorem routes_monotonic\
  \ {n : Int} (h1 : n > 1) :\n  routes n > routes (n-1) := sorry \n\n\ntheorem routes_initial_values\
  \ :\n  routes 1 = 2 ∧ routes 2 = 6 ∧ routes 3 = 20 := sorry\n\n/--\ninfo: 2\n-/\n\
  #guard_msgs in\n#eval routes 1\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval routes\
  \ 2\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval routes -100\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
