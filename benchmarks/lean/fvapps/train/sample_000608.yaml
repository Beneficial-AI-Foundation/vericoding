"vc-description": "Shaun is very much interested in Subarrays. Shaun wants to count\
  \ the number of subarrays in his chosen array with sum being a multiple of $10^9$.\
  \ Since, Shaun is interested in huge numbers.He chose his array such that it contains\
  \ only $10^8$ and $9*10^8$ as its elements.\nHelp shaun to count the number of required\
  \ subarrays.\n\n-----Input:-----\n- First line will contain $T$, number of testcases.\
  \ Then the testcases follow. \n- First line of each testcase contains one integer\
  \ $N$,size of array $A$. \n- Second line of each testcase contains $N$ space separated\
  \ array elements\n\n-----Output:-----\nFor each testcase, output in a single line\
  \ number of subarrays with sum being multiple of $10^9$.\n\n-----Constraints-----\n\
  - $1 \\leq T \\leq 10$\n- $1 \\leq N \\leq 10^5$\n- $A[i]$=$10^8$ , $9*10^8$\n\n\
  -----Sample Input:-----\n2\n3\n100000000 900000000 100000000\n1\n900000000\n\n-----Sample\
  \ Output:-----\n2\n0"
"vc-preamble": "import Imports.AllImports\n\ndef solve_subarrays (n : Nat) (arr :\
  \ List Nat) : Nat :=\nsorry\n\n\n\n\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_valid_subarrays (n : Nat) (arr : List Nat) : Nat :=\n\
  sorry\n\n\n\n\n"
"vc-theorems": "theorem solve_subarrays_singleton (x : Nat) :\n  solve_subarrays 1\
  \ [x] = 0 :=\nsorry\n\n\ntheorem solve_subarrays_alternating_nonneg (n : Nat) :\n\
  \  let arr := List.replicate (2*n) 100000000 ++ List.replicate (2*n) 900000000\n\
  \  solve_subarrays (4*n) arr â‰¥ 0 :=\nsorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n\
  #eval solve_subarrays 3 [100000000, 900000000, 100000000]\n\n/--\ninfo: 0\n-/\n\
  #guard_msgs in\n#eval solve_subarrays 1 [900000000]\n\n/--\ninfo: 0\n-/\n#guard_msgs\
  \ in\n#eval solve_subarrays 2 [100000000, 100000000]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
