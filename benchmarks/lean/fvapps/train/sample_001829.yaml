"vc-description": "Given a linked list, reverse the nodes of a linked list k at a\
  \ time and return its modified list.\n\nk is a positive integer and is less than\
  \ or equal to the length of the linked list. If the number of nodes is not a multiple\
  \ of k then left-out nodes in the end should remain as it is.\n\n\n\n\nExample:\n\
  \nGiven this linked list: 1->2->3->4->5\n\nFor k = 2, you should return: 2->1->4->3->5\n\
  \nFor k = 3, you should return: 3->2->1->4->5\n\nNote:\n\n\n       Only constant\
  \ extra memory is allowed.\n       You may not alter the values in the list's nodes,\
  \ only nodes itself may be changed."
"vc-preamble": "import Imports.AllImports\n\ndef reverseKGroup (head: ListNode) (k:\
  \ Nat) : ListNode :=\n  sorry\n\n\ndef list_to_array (head: ListNode) : List Int\
  \ :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def array_to_list (arr: List Int) : ListNode :=\n  sorry\n"
"vc-theorems": "theorem reverseKGroup_length_preserved \n  (lst: List Int) (k: Nat)\
  \ (h: k > 0): \n  List.length (list_to_array (reverseKGroup (array_to_list lst)\
  \ k)) = List.length lst :=\n  sorry\n\n\ntheorem reverseKGroup_elements_preserved\n\
  \  (lst: List Int) (k: Nat) (h: k > 0):\n  ∃ perm : List Int, \n    list_to_array\
  \ (reverseKGroup (array_to_list lst) k) = perm ∧ \n    List.length perm = List.length\
  \ lst ∧\n    ∀ x, List.count x perm = List.count x lst :=\n  sorry\n\n\ntheorem\
  \ reverseKGroup_k_equals_one_is_identity\n  (lst: List Int):\n  list_to_array (reverseKGroup\
  \ (array_to_list lst) 1) = lst :=\n  sorry\n\n\ntheorem reverseKGroup_subsequence_reversal\n\
  \  (lst: List Int) (k: Nat) (h: k > 0) (i: Nat) \n  (h₁: i + k ≤ List.length lst):\n\
  \  let result := list_to_array (reverseKGroup (array_to_list lst) k)\n  let sublist\
  \ := List.take k (List.drop i lst)\n  List.take k (List.drop i result) = List.reverse\
  \ sublist :=\n  sorry\n\n/--\ninfo: [2, 1, 4, 3, 5]\n-/\n#guard_msgs in\n#eval list_to_array\
  \ reverseKGroup(head1, 2)\n\n/--\ninfo: [3, 2, 1, 4, 5]\n-/\n#guard_msgs in\n#eval\
  \ list_to_array reverseKGroup(head2, 3)\n\n/--\ninfo: [1, 2, 3]\n-/\n#guard_msgs\
  \ in\n#eval list_to_array reverseKGroup(head3, 1)\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
