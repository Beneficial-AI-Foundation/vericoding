"vc-description": "# Task\n You are given an array of integers. Your task is to determine\
  \ the minimum number of its elements that need to be changed so that elements of\
  \ the array will form an arithmetic progression. Note that if you swap two elements,\
  \ you're changing both of them, for the purpose of this kata.\n\n Here an arithmetic\
  \ progression is defined as a sequence of integers such that the difference between\
  \ consecutive terms is constant. For example, `6 4 2 0 -2` and `3 3 3 3 3` are arithmetic\
  \ progressions, but `0 0.5 1 1.5` and `1 -1 1 -1 1` are not.\n\n# Examples\n\n \
  \ For `arr = [1, 3, 0, 7, 9]` the answer is `1` \n  \n  Because only one element\
  \ has to be changed in order to create an arithmetic progression.\n    \n  For `arr\
  \ = [1, 10, 2, 12, 3, 14, 4, 16, 5]` the answer is `5` \n \n  The array will be\
  \ changed into `[9, 10, 11, 12, 13, 14, 15, 16, 17]`.\n\n# Input/Output\n\n\n -\
  \ `[input]` integer array `arr`\n\n  An array of N integers.\n  \n  `2 ≤ arr.length\
  \ ≤ 100`\n  \n  `-1000 ≤ arr[i] ≤ 1000`\n\n  Note for Java users: you'll have a\
  \ batch of 100 bigger random arrays, with lengths as `150 ≤ arr.length ≤ 300`.\n\
  \  \n\n - `[output]` an integer\n\n  The minimum number of elements to change."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def fix_progression (arr : List Int) : Nat := sorry\n\ntheorem\
  \ fix_progression_bounds {arr : List Int} (h : arr ≠ []) : \n  fix_progression arr\
  \ ≤ arr.length - 1 := sorry\n"
"vc-theorems": "theorem arithmetic_sequence_no_changes {arr : List Int} (h : arr.length\
  \ ≥ 2) :\n  let d := arr[1]! - arr[0]!\n  let arith_seq := List.map (fun i => arr[0]!\
  \ + (Int.ofNat i) * d) (List.range arr.length)\n  fix_progression arith_seq = 0\
  \ := sorry\n\n\ntheorem constant_sequence_no_changes {arr : List Int} (h : arr.length\
  \ ≥ 2) :\n  let const_seq := List.replicate arr.length arr[0]!\n  fix_progression\
  \ const_seq = 0 := sorry\n\n\ntheorem result_changes_with_perturbation {arr : List\
  \ Int} (h : arr.length ≥ 3) :\n  let mid := arr.length / 2\n  let arr_perturbed\
  \ := arr.set mid (arr[mid]! + 1000)\n  fix_progression arr ≤ fix_progression arr_perturbed\
  \ := sorry\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval fix_progression [1, 2, 3]\n\
  \n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval fix_progression [1, 3, 0, 7, 9]\n\n/--\n\
  info: 5\n-/\n#guard_msgs in\n#eval fix_progression [1, 10, 2, 12, 3, 14, 4, 16,\
  \ 5]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
