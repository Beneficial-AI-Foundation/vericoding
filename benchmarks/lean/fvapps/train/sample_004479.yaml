"vc-description": "Quantum mechanics tells us that a molecule is only allowed to have\
  \ specific, discrete amounts of internal energy. The 'rigid rotor model', a model\
  \ for describing rotations, tells us that the amount of rotational energy a molecule\
  \ can have is given by:  \n\n`E =  B * J * (J + 1)`, \n\nwhere J is the state the\
  \ molecule is in, and B is the 'rotational constant' (specific to the molecular\
  \ species).\n\nWrite a function that returns an array of allowed energies for levels\
  \ between Jmin and Jmax.\n\nNotes:\n\n* return empty array if Jmin is greater than\
  \ Jmax (as it make no sense).\n* Jmin, Jmax are integers.\n* physically B must be\
  \ positive, so return empty array if B <= 0"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def rot_energies (B : Float) (Jmin Jmax : Nat) : List Float :=\
  \ sorry\n\ntheorem rot_energies_correct_length (B : Float) (J1 J2 : Nat) :\n  B\
  \ > 0 →  \n  let Jmin := min J1 J2\n  let Jmax := max J1 J2\n  List.length (rot_energies\
  \ B Jmin Jmax) = Jmax - Jmin + 1 := \nsorry\n"
"vc-theorems": "theorem rot_energies_formula (B : Float) (J1 J2 : Nat) (i : Nat) :\n\
  \  B > 0 →\n  let Jmin := min J1 J2\n  let Jmax := max J1 J2\n  i < List.length\
  \ (rot_energies B Jmin Jmax) →\n  let J := Jmin + i\n  Float.abs (List.get! (rot_energies\
  \ B Jmin Jmax) i - B * (Float.ofNat (J * (J + 1)))) < 1e-10 :=\nsorry\n\n\ntheorem\
  \ negative_B_empty (B : Float) (J1 J2 : Nat) :\n  B ≤ 0 →\n  rot_energies B (min\
  \ J1 J2) (max J1 J2) = [] :=\nsorry\n\n\ntheorem invalid_J_range_empty (B : Float)\
  \ (J1 J2 : Nat) :\n  B > 0 →\n  rot_energies B (max J1 J2 + 1) (min J1 J2) = []\
  \ :=\nsorry\n\n\ntheorem equal_J_single_value (B : Float) (J : Nat) :\n  B > 0 →\n\
  \  let result := rot_energies B J J\n  List.length result = 1 ∧ \n  Float.abs (List.get!\
  \ result 0 - B * (Float.ofNat (J * (J + 1)))) < 1e-10 :=\nsorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
