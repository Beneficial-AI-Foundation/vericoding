"vc-description": "#Split all even numbers to odd ones in different ways\n\nYour task\
  \ is to split all even numbers from an array to odd ones. So your method has to\
  \ return a new array with only odd numbers.\n\nFor \"splitting\" the numbers there\
  \ are four ways.\n\n```\n0 -> Split into two odd numbers, that are closest to each\
  \ other.\n     (e.g.: 8 -> 3,5)\n1 -> Split into two odd numbers, that are most\
  \ far from each other.\n     (e.g.: 8 -> 1,7)\n2 -> All new odd numbers from the\
  \ splitting should be equal and the maximum possible number.\n     (e.g.: 8 -> 1,\
  \ 1, 1, 1, 1, 1, 1, 1)\n3 -> Split into 1s.\n     (e.g.: 8 -> 1, 1, 1, 1, 1, 1,\
  \ 1, 1)\nThe new numbers (from the splitting) have always to be in ascending order.\n\
  So in the array every even number is replaced by the new odd numbers from the splitting.\n\
  ```\n\nYour method will get as parameters the input-array and the number of the\
  \ way for splitting the even numbers.\n\nSome Examples\n```\n[1,10,1,3],0 -> [1,5,5,1,3]\n\
  [1,10,1,3],1 -> [1,1,9,1,3]\n[1,10,1,3],2 -> [1,5,5,1,3]\n[1,10,1,3],3 -> [1,1,1,1,1,1,1,1,1,1,1,1,3]\n\
  \n[1,1,3,8],0 -> [1,1,3,3,5]\n[1,1,3,8],1 -> [1,1,3,1,7]\n[1,1,3,8],2 -> [1,1,3,1,1,1,1,1,1,1,1]\n\
  [1,1,3,8],3 -> [1,1,3,1,1,1,1,1,1,1,1]\n```\n\nThe array will never be null and\
  \ will always contain only integer numbers > 0. Also your result-array must contain\
  \ only integer numbers > 0.\nThe way-parameter will always be between inclusive\
  \ 0 and inclusive 3 (0,1,2,3).\n\nYou must not change the input-array!\n\n\nHave\
  \ fun coding it and please don't forget to vote and rank this kata! :-) \n\nI have\
  \ also created other katas. Take a look if you enjoyed this kata!"
"vc-preamble": "import Imports.AllImports\n\ndef List.sum : List Nat → Nat \n  | []\
  \ => 0\n  | (x::xs) => x + List.sum xs\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def split_all_even_numbers (numbers: List Nat) (split_type: Nat)\
  \ : List Nat :=\n  sorry\n"
"vc-theorems": "theorem split_all_even_numbers_preserves_sum \n  (numbers: List Nat)\
  \ (split_type: Nat) (h: split_type ≤ 3) :\n  List.sum numbers = List.sum (split_all_even_numbers\
  \ numbers split_type) :=\n  sorry\n\n\ntheorem split_all_even_numbers_positive\n\
  \  (numbers: List Nat) (split_type: Nat) (h1: split_type ≤ 3) (h2: ∀ n ∈ numbers,\
  \ n > 0) : \n  ∀ n ∈ (split_all_even_numbers numbers split_type), n > 0 :=\n  sorry\n\
  \n\ntheorem split_all_even_numbers_preserves_odd\n  (numbers: List Nat) (split_type:\
  \ Nat) (h: split_type ≤ 3) :\n  ∀ n ∈ numbers, n % 2 = 1 → n ∈ (split_all_even_numbers\
  \ numbers split_type) :=\n  sorry\n\n/--\ninfo: [1, 5, 5, 1, 3]\n-/\n#guard_msgs\
  \ in\n#eval split_all_even_numbers [1, 10, 1, 3] 0\n\n/--\ninfo: [1, 1, 9, 1, 3]\n\
  -/\n#guard_msgs in\n#eval split_all_even_numbers test1 1\n\n/--\ninfo: [1, 1, 1,\
  \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3]\n-/\n#guard_msgs in\n#eval split_all_even_numbers\
  \ test1 3\n\n/--\ninfo: [1, 1, 3, 3, 5]\n-/\n#guard_msgs in\n#eval split_all_even_numbers\
  \ [1, 1, 3, 8] 0\n\n/--\ninfo: [1, 1, 3, 1, 7]\n-/\n#guard_msgs in\n#eval split_all_even_numbers\
  \ test2 1\n\n/--\ninfo: [1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1]\n-/\n#guard_msgs in\n\
  #eval split_all_even_numbers test2 2\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
