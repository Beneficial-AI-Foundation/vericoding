"vc-description": "Here you have to do some mathematical operations on a \"dirty string\"\
  . This kata checks some basics, it's not too difficult.\n\n\n__So what to do?__\n\
  \nInput: String which consists of two positive numbers (doubles) and exactly one\
  \ operator like `+, -, * or /` always between these numbers. The string is dirty,\
  \ which means that there are different characters inside too, not only numbers and\
  \ the operator. You have to combine all digits left and right, perhaps with \".\"\
  \ inside (doubles), and to calculate the result which has to be rounded to an integer\
  \ and converted to a string at the end.\n\n### Easy example:\n\n```\nInput: \"gdfgdf234dg54gf*23oP42\"\
  \nOutput: \"54929268\" (because 23454*2342=54929268)\n```\n\nFirst there are some\
  \ static tests, later on random tests too...\n\n### Hope you have fun! :-)"
"vc-preamble": "import Imports.AllImports\n\ndef calculate_string (s : String) : String\
  \ := sorry\n\ndef String.filter (s : String) (p : Char → Bool) : String := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isValidDigit (c : Char) : Bool := \n  match c with\n  | '0'\
  \ => true | '1' => true | '2' => true | '3' => true | '4' => true\n  | '5' => true\
  \ | '6' => true | '7' => true | '8' => true | '9' => true\n  | '.' => true | '+'\
  \ => true | '-' => true | '*' => true | '/' => true\n  | _ => false\n"
"vc-theorems": "theorem calculate_string_evaluates_expressions \n  (n₁ n₂ : Float)\
  \ (op : Char) \n  (h_op : op ∈ ['+', '-', '*', '/']) \n  (h_div : op = '/' → n₂\
  \ ≠ 0)\n  : let expr := s!\"{n₁}{op}{n₂}\"\n    let noisy_expr := s!\"abc{expr}xyz!@#\"\
  \n    let result := calculate_string noisy_expr\n    let clean_expr := String.filter\
  \ expr isValidDigit\n    let expected := toString (Float.round (match op with\n\
  \      | '+' => n₁ + n₂\n      | '-' => n₁ - n₂  \n      | '*' => n₁ * n₂\n    \
  \  | '/' => n₁ / n₂\n      | _ => 0))\n    result = expected := sorry\n\n\ntheorem\
  \ calculate_string_preserves_single_number\n  (n : Int) (h : -1000000 ≤ n ∧ n ≤\
  \ 1000000)\n  : toString (String.toInt! (calculate_string (toString n))) = toString\
  \ n := sorry\n\n/--\ninfo: '47'\n-/\n#guard_msgs in\n#eval calculate_string \";$%§fsdfsd235??df/sdfgf5gh.000kk0000\"\
  \n\n/--\ninfo: '54929268'\n-/\n#guard_msgs in\n#eval calculate_string \"sdfsd23454sdf*2342\"\
  \n\n/--\ninfo: '234676'\n-/\n#guard_msgs in\n#eval calculate_string \"fsdfsd234.4554s4234df+sf234442\"\
  \n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
