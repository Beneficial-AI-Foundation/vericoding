"vc-description": "You are going to be given a string. Your job is to return that\
  \ string in a certain order that I will explain below:\n\nLet's say you start with\
  \ this: `012345`\n\nThe first thing you do is reverse it:`543210`  \nThen you will\
  \ take the string from the 1st position and reverse it again:`501234`  \nThen you\
  \ will take the string from the 2nd position and reverse it again:`504321`  \nThen\
  \ you will take the string from the 3rd position and reverse it again:`504123`\n\
  \nContinue this pattern until you have done every single position, and then you\
  \ will return the string you have created. For this particular number, you would\
  \ return:`504132`\n\n#Input:\nA string of length 1 - 1000\n\n#Output:\nA correctly\
  \ reordered string."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sort (xs : List α) (lt : α → α → Bool) : List α := sorry\n\n\
  def reverse_fun (s : String) : String := sorry\n"
"vc-theorems": "theorem length_preserved (s : String) : \n  (reverse_fun s).length\
  \ = s.length := sorry\n\n\ntheorem same_character_set (s : String) :\n  sort (reverse_fun\
  \ s).data (· ≤ ·) = sort s.data (· ≤ ·) := sorry\n\n\ntheorem not_idempotent (s\
  \ : String) :\n  s.length > 1 → reverse_fun (reverse_fun s) ≠ reverse_fun s := sorry\n\
  \n\ntheorem single_char_invariant (s : String) :\n  s.length ≤ 1 → reverse_fun s\
  \ = s := sorry\n\n\ntheorem first_char_movement (s : String) (h : s.length > 1)\
  \ :\n  (reverse_fun s).get 0 ≠ s.get 0 := sorry\n\n/--\ninfo: '201'\n-/\n#guard_msgs\
  \ in\n#eval reverse_fun \"012\"\n\n/--\ninfo: '504132'\n-/\n#guard_msgs in\n#eval\
  \ reverse_fun \"012345\"\n\n/--\ninfo: 'oHlel'\n-/\n#guard_msgs in\n#eval reverse_fun\
  \ \"Hello\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
