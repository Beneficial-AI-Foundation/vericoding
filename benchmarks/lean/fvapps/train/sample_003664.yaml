vc-description: |-
  ```if-not:swift
  Create a method that takes an array/list as an input, and outputs the index at which the sole odd number is located.

  This method should work with arrays with negative numbers. If there are no odd numbers in the array, then the method should output `-1`.
  ```
  ```if:swift
  reate a function `oddOne` that takes an `[Int]` as input and outputs the index at which the sole odd number is located.

  This method should work with arrays with negative numbers. If there are no odd numbers in the array, then the method should output `nil`.
  ```
  Examples:
  ```python
  odd_one([2,4,6,7,10]) # => 3
  odd_one([2,16,98,10,13,78]) # => 4
  odd_one([4,-8,98,-12,-7,90,100]) # => 4
  odd_one([2,4,6,8]) # => -1
  ```
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def odd_one (arr : List Int) : Int :=
    sorry
vc-theorems: |
  theorem odd_one_returns_valid_index_or_minus_one (arr : List Int) :
    let result := odd_one arr
    (result = -1 → ∀ x ∈ arr, x % 2 = 0) ∧ 
    (result ≠ -1 → 
      result ≥ 0 ∧ 
      result < arr.length ∧
      (let val := arr.get? (result.toNat); match val with
      | some x => x % 2 = 1 ∨ x % 2 = -1
      | none => False) ∧
      ∀ i, i < result → 
        let val := arr.get? (i.toNat); match val with
        | some x => x % 2 = 0
        | none => True) :=
    sorry


  theorem all_even_returns_minus_one (arr : List Int) :
    (∀ x ∈ arr, x % 2 = 0) → odd_one arr = -1 :=
    sorry


  theorem all_odd_returns_first_index (arr : List Int) :
    arr ≠ [] →
    (∀ x ∈ arr, x % 2 = 1) → 
    odd_one arr = 0 :=
    sorry

  /--
  info: 3
  -/
  #guard_msgs in
  #eval odd_one [2, 4, 6, 7, 10]

  /--
  info: 4
  -/
  #guard_msgs in
  #eval odd_one [2, 16, 98, 10, 13, 78]

  /--
  info: -1
  -/
  #guard_msgs in
  #eval odd_one [2, 4, 6, 8]
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded
