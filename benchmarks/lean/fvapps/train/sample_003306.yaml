"vc-description": "Create a program that will take in a string as input and, if there\
  \ are duplicates of more than two alphabetical characters in the string, returns\
  \ the string with all the extra characters in a bracket.\n\nFor example, the input\
  \ \"aaaabbcdefffffffg\" should return  \"aa[aa]bbcdeff[fffff]g\" \n\nPlease also\
  \ ensure that the input is a string, and return \"Please enter a valid string\"\
  \ if it is not."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def string_parse (x : String) : String := sorry\n\ntheorem non_string_input_error\
  \ (x : Int) :\n  string_parse (toString x) = \"Please enter a valid string\" :=\
  \ sorry\n"
"vc-theorems": "theorem length_property {s : String} :\n  let result := string_parse\
  \ s\n  let cleaned_result := result.replace \"[\" \"\" |>.replace \"]\" \"\"\n \
  \ result = \"Please enter a valid string\" ∨ cleaned_result.length ≤ s.length :=\
  \ sorry\n\n\ntheorem preserves_order {s : String} {c : Char} :\n  let result :=\
  \ string_parse s\n  let cleaned_result := result.replace \"[\" \"\" |>.replace \"\
  ]\" \"\"\n  result = \"Please enter a valid string\" ∨ cleaned_result.contains c\
  \ → s.contains c := sorry\n\n/--\ninfo: 'aa[aa]bbcdeff[fffff]g'\n-/\n#guard_msgs\
  \ in\n#eval string_parse \"aaaabbcdefffffffg\"\n\n/--\ninfo: 'Please enter a valid\
  \ string'\n-/\n#guard_msgs in\n#eval string_parse 3\n\n/--\ninfo: 'aAAabbcdeFF[F]ff[ff]g'\n\
  -/\n#guard_msgs in\n#eval string_parse \"aAAabbcdeFFFffffg\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
