"vc-description": "Chef is a brilliant university student that does not attend lectures\
  \ because he believes that they are boring and coding is life! However, his university\
  \ follows certain rules and regulations, and a student may only take an exam for\
  \ a course if he has attended at least 75% of lectures for this course.\nSince you\
  \ are Chef's best friend, you want to help him reach the attendance he needs to\
  \ take exams. Unfortunately, Chef is still focused on his code and refuses to attend\
  \ more lectures, so the only option is to have some of his friends mark him as present\
  \ by proxy. This trick is well-known in the university, but only few have the talent\
  \ to pull it off.\nIn a certain course, there is exactly one lesson per day over\
  \ the course of $D$ days (numbered $1$ through $D$). You are given a string $S$\
  \ with length $D$ describing the lessons Chef attended — for each valid $i$, the\
  \ $i$-th character of this string is either 'A' if Chef was absent on day $i$ or\
  \ 'P' if Chef was actually present on day $i$.\nFor each day $d$ when Chef is absent,\
  \ one of Chef's friends can mark him as present by proxy on this day only if he\
  \ was present (if he was really present, not just marked as present) on at least\
  \ one of the previous two days, i.e. days $d-1$ and $d-2$, and on at least one of\
  \ the following two days, i.e. days $d+1$ and $d+2$. However, it is impossible to\
  \ mark him as present by proxy on the first two days and the last two days.\nFind\
  \ the minimum number of times Chef has to be marked as present by proxy so that\
  \ his attendance becomes at least 75% ($0.75$). Chef's attendance is number of days\
  \ when he was marked as present, either by proxy or by actually being present, divided\
  \ by $D$.\n\n-----Input-----\n- The first line of the input contains a single integer\
  \ $T$ denoting the number of test cases. The description of $T$ test cases follows.\n\
  - The first line of each test case contains a single integer $D$.\n- The second\
  \ line contains a single string $S$ with length $D$.\n\n-----Output-----\nFor each\
  \ test case, print a single line containing one integer — the minimum number of\
  \ times Chef needs to be marked as present by proxy, or $-1$ if it is impossible\
  \ to make Chef achieve 75% attendance.\n\n-----Constraints-----\n- $1 \\le T \\\
  le 200$\n- $1 \\le D \\le 1,000$\n- $S$ contains only characters 'A' and 'P'\n\n\
  -----Subtasks-----\nSubtask #1 (100 points): original constraints\n\n-----Example\
  \ Input-----\n1\n9\nPAAPPAPPP\n\n-----Example Output-----\n1\n\n-----Explanation-----\n\
  Example case 1: With a proxy on the third day, the attendance string is \"PAPPPAPPP\"\
  . Now, Chef's attendance is at least 75%, so the minimum number of times Chef needs\
  \ to be marked as present by proxy is $1$."
"vc-preamble": "import Imports.AllImports\n\ndef solve_proxy_attendance (D : Nat)\
  \ (S : String) : Int :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def countP (s : String) : Nat :=\n  sorry\n\n\n"
"vc-theorems": "theorem result_range {D : Nat} {S : String} (h : D ≥ 5) (h2 : D ≤\
  \ 100) (h3 : S.length = D) :\n  let result := solve_proxy_attendance D S\n  result\
  \ = -1 ∨ result ≥ 0 :=\nsorry\n\n\ntheorem all_present {D : Nat} (h : D ≥ 5) (h2\
  \ : D ≤ 100) :\n  solve_proxy_attendance D (String.mk (List.replicate D 'P')) =\
  \ 0 :=\nsorry\n\n\ntheorem too_many_absences {D : Nat} (h : D ≥ 5) (h2 : D ≤ 100)\
  \ :\n  solve_proxy_attendance D (String.mk (List.replicate D 'A')) = -1 :=\nsorry\n\
  \n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval solve_proxy_attendance 9 \"PAAPPAPPP\"\
  \n\n/--\ninfo: -1\n-/\n#guard_msgs in\n#eval solve_proxy_attendance 5 \"PAAAA\"\n\
  \n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval solve_proxy_attendance 8 \"PPPPPPPP\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
