"vc-description": "Starting with an undirected graph (the \"original graph\") with\
  \ nodes from 0 to N-1, subdivisions are made to some of the edges.\nThe graph is\
  \ given as follows: edges[k] is a list of integer pairs (i, j, n) such that (i,\
  \ j) is an edge of the original graph,\nand n is the total number of new nodes on\
  \ that edge. \nThen, the edge (i, j) is deleted from the original graph, n new nodes\
  \ (x_1, x_2, ..., x_n) are added to the original graph,\nand n+1 new edges (i, x_1),\
  \ (x_1, x_2), (x_2, x_3), ..., (x_{n-1}, x_n), (x_n, j) are added to the original graph.\n\
  Now, you start at node 0 from the original graph, and in each move, you travel along\
  \ one edge. \nReturn how many nodes you can reach in at most M moves.\n \nExample\
  \ 1:\nInput: edges = [[0,1,10],[0,2,1],[1,2,2]], M = 6, N = 3\nOutput: 13\nExplanation:\
  \ \nThe nodes that are reachable in the final graph after M = 6 moves are indicated\
  \ below.\n\n\n\nExample 2:\nInput: edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], M\
  \ = 10, N = 4\nOutput: 23\n \n\nNote:\n\n0 <= edges.length <= 10000\n0 <= edges[i][0]\
  \ < edges[i][1] < N\nThere does not exist any i != j for which edges[i][0] == edges[j][0]\
  \ and edges[i][1] == edges[j][1].\nThe original graph has no parallel edges.\n0\
  \ <= edges[i][2] <= 10000\n0 <= M <= 10^9\n1 <= N <= 3000\nA reachable node is a\
  \ node that can be travelled to using at most M moves starting from node 0."
"vc-preamble": "import Imports.AllImports\n\ndef reachable_nodes (edges : List Edge)\
  \ (M : Nat) (N : Nat) : Nat :=\n  sorry\n\n\ndef isValidEdgeList (edges : List Edge)\
  \ (N : Nat) : Bool :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sumWeights (edges : List Edge) : Nat :=\n  edges.foldl (fun\
  \ acc e => acc + e.2.2) 0\n"
"vc-theorems": "theorem reachable_nodes_basic_properties \n  {edges : List Edge} {M\
  \ N : Nat}\n  (h1 : 2 ≤ N) (h2 : N ≤ 10)\n  (h3 : 1 ≤ M) (h4 : M ≤ 20)\n  (h5 :\
  \ isValidEdgeList edges N = true) :\n  let result := reachable_nodes edges M N\n\
  \  let total_intermediate := sumWeights edges\n  (0 ≤ result) ∧ \n  (result ≤ N\
  \ + total_intermediate) ∧\n  (1 ≤ result) :=\nsorry\n\n\ntheorem empty_graph_reaches_one\n\
  \  {M N : Nat}\n  (h1 : 0 ≤ M) (h2 : M ≤ 20)\n  (h3 : 1 ≤ N) (h4 : N ≤ 10) :\n \
  \ reachable_nodes ([] : List Edge) M N = 1 :=\nsorry\n\n\ntheorem single_edge_properties\n\
  \  {N w : Nat}\n  (h1 : 2 ≤ N) (h2 : N ≤ 10)\n  (h3 : 0 ≤ w) (h4 : w ≤ 20) :\n \
  \ let edges := [(0, 1, w)]\n  let M := w + 1\n  let result := reachable_nodes edges\
  \ M N\n  (result ≤ 2 + w) ∧ (1 ≤ result) :=\nsorry\n\n/--\ninfo: 13\n-/\n#guard_msgs\
  \ in\n#eval reachable_nodes [[0, 1, 10], [0, 2, 1], [1, 2, 2]] 6 3\n\n/--\ninfo:\
  \ 23\n-/\n#guard_msgs in\n#eval reachable_nodes [[0, 1, 4], [1, 2, 6], [0, 2, 8],\
  \ [1, 3, 1]] 10 4\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
