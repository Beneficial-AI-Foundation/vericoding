"vc-description": "Make multiple functions that will return the sum, difference, modulus,\
  \ product, quotient, and the exponent respectively.\n\nPlease use the following\
  \ function names:\n\n\naddition = **add**\n\nmultiply = **multiply**\n\ndivision\
  \ = **divide** (both integer and float divisions are accepted)\n\nmodulus = **mod**\n\
  \nexponential = **exponent**\n\nsubtraction = **subt**\n\n\n\n*Note: All math operations\
  \ will be:\na (operation) b*"
"vc-preamble": "import Imports.AllImports\n\ndef add (a b : Int) : Int := sorry\n\
  def multiply (a b : Int) : Int := sorry\n\ndef divide (a b : Int) : Int := sorry\
  \ \ndef mod (a b : Int) : Int := sorry"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def exponent (a b : Int) : Int := sorry\ndef subt (a b : Int) :\
  \ Int := sorry\n\n-- Addition properties"
"vc-theorems": "theorem add_commutative (a b : Int) : add a b = add b a := sorry\n\
  \ntheorem add_identity (a : Int) : add a 0 = a := sorry \n\n\ntheorem add_associative\
  \ (a b : Int) : add (add a b) 0 = add a (add b 0) := sorry\n\n-- Multiplication\
  \ properties \n\ntheorem mult_commutative (a b : Int) : multiply a b = multiply\
  \ b a := sorry\n\ntheorem mult_identity (a : Int) : multiply a 1 = a := sorry\n\n\
  \ntheorem mult_zero (a : Int) : multiply a 0 = 0 := sorry\n\n-- Division properties\n\
  \ntheorem div_self {a : Int} (h : a ≠ 0) : divide a a = 1 := sorry\n\ntheorem div_mult_cancel\
  \ (a b : Int) (h : b ≠ 0) : \n  multiply (divide a b) b = a := sorry\n\n-- Modulo\
  \ properties\n\ntheorem mod_bounds (a b : Int) (h : b > 0) : \n  0 ≤ mod a b ∧ mod\
  \ a b < b := sorry\n\n\ntheorem mod_reconstruction (a b : Int) (h : b ≠ 0) :\n \
  \ a = multiply (divide a b) b + mod a b := sorry\n\n-- Exponentiation properties\n\
  \ntheorem exp_zero (a : Int) (h : a > 0) : exponent a 0 = 1 := sorry\n\ntheorem\
  \ exp_one (a : Int) : exponent a 1 = a := sorry\n\n\ntheorem exp_growth (a b : Int)\
  \ (h1 : a > 0) (h2 : b > 0) :\n  exponent a b ≥ a := sorry\n\n-- Subtraction properties\n\
  \ntheorem subt_as_add (a b : Int) : subt a b = add a (-b) := sorry\n\ntheorem subt_self\
  \ (a : Int) : subt a a = 0 := sorry\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval add\
  \ 1 2\n\n/--\ninfo: 12\n-/\n#guard_msgs in\n#eval add 5 7\n\n/--\ninfo: 0\n-/\n\
  #guard_msgs in\n#eval add 0 0\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval multiply\
  \ 2 3\n\n/--\ninfo: 25\n-/\n#guard_msgs in\n#eval multiply 5 5\n\n/--\ninfo: 3\n\
  -/\n#guard_msgs in\n#eval divide 6 2\n\n/--\ninfo: 2.5\n-/\n#guard_msgs in\n#eval\
  \ divide 5 2\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval mod 7 3\n\n/--\ninfo: 1\n\
  -/\n#guard_msgs in\n#eval mod 10 3\n\n/--\ninfo: 8\n-/\n#guard_msgs in\n#eval exponent\
  \ 2 3\n\n/--\ninfo: 9\n-/\n#guard_msgs in\n#eval exponent 3 2\n\n/--\ninfo: 2\n\
  -/\n#guard_msgs in\n#eval subt 5 3\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval subt\
  \ 10 7\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
