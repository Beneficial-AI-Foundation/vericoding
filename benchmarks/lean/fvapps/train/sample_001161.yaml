"vc-description": "Kim has broken in to the base, but after walking in circles, perplexed\
  \ by the unintelligible base design of the JSA, he has found himself in a large,\
  \ empty, and pure white, room. \nThe room is a grid with H∗W$H*W$ cells, divided\
  \ into H$H$ rows and W$W$ columns. The cell (i,j)$(i,j)$ is at height A[i][j]$A[i][j]$.\
  \ Unfortunately, his advanced sense of smell has allowed him to sense a mercury\
  \ leak, probably brought in by Jishnu to end his meddling. The mercury leak has\
  \ a power (which determines what height the mercury can reach before dissipating\
  \ into harmless quantities) and a source cell. It spreads from cells it has already\
  \ reached to other cells in the four cardinal directions: north, south, east, and\
  \ west. (That is, the mercury can spread up, down, right, or left in the grid, but\
  \ not diagonally.) Mercury can only spread to a cell if the cell's height is strictly\
  \ less than the power value. \nUnfortunately, Kim does not exactly know the starting\
  \ cell or the power value of the mercury leak. However, his impressive brain has\
  \ determined that it must be one of Q$Q$ (power, starting cell) combinations. For\
  \ each combination, he wants to find out how many cells are dangerous for him to\
  \ go to: that is, how many cells will eventually be reached by the mercury. This\
  \ will help him determine a suitable cell to stay in and slowly fix the leak from\
  \ above.\nCan you help Kim achieve this objective?\nNote: If the starting cell's\
  \ height is not less than the power level, the mercury immediately dissipates. So,\
  \ in this case, output 0.\n\n-----Input:-----\n- First line will contain T$T$, number\
  \ of testcases. Then the testcases follow. \n- The first line in each testcase contains\
  \ three integers, H$H$, W$W$, and Q$Q$.\n- On the 2$2$nd to (H+1)$(H+1)$th lines\
  \ of each testcase: The (i+1)$(i+1)$th line contains W$W$ space-separated integers,\
  \ representing the heights of the cells on the i$i$th row of the grid.\n- On the\
  \ (H+2)$(H+2)$th to (H+Q+1)$(H+Q+1)$th lines of each testcase: The (i+H+1)$(i+H+1)$th\
  \ line contains 3 space-separated integers, r[i]$r[i]$, c[i]$c[i]$, and p[i]$p[i]$,\
  \ which represents a (power, starting cell) combination. For this specific combination,\
  \ the mercury leak originates on the cell (r[i],c[i])$(r[i],c[i])$ and has power\
  \ p[i]$p[i]$.\n\n-----Output:-----\nFor each testcase, output Q$Q$ lines, with each\
  \ line containing one integer. The i$i$th line should output the number of dangerous\
  \ cells, given that the leak originated on cell (r[i],c[i])$(r[i],c[i])$ with power\
  \ p[i]$p[i]$, as defined in the input. Read the sample and sample explanation for\
  \ more details.\n\n-----Constraints-----\n- 1≤T≤2$1 \\leq T \\leq 2$ \n- 1≤H≤1000$1\
  \ \\leq H \\leq 1000$\n- 1≤W≤1000$1 \\leq W \\leq 1000$\n- 1≤Q≤2∗105$1 \\leq Q \\\
  leq 2*10^5$\n- 1≤r[i]≤H$1 \\leq r[i] \\leq H$ for all i$i$\n- 1≤c[i]≤W$1 \\leq c[i]\
  \ \\leq W$ for all i$i$\n- 0≤A[i][j]≤109$0 \\leq A[i][j] \\leq 10^9$ for all (i,j)$(i,j)$\n\
  - 0≤p[i]≤109$0 \\leq p[i] \\leq 10^9$ for all i$i$.\n\n-----Subtasks-----\n- 10\
  \ points : A[i][j]=$A[i][j] =$ constant k$k$ for all (i,j)$(i,j)$ (the heights of\
  \ all cells are equal).   \n- 20 points : H=1$H=1$, Q≤1000$Q \\leq 1000$.   \n-\
  \ 30 points: r[i]=$r[i] =$ constant x$x$, c[i]=$c[i] =$ constant y$y$ for all i$i$\
  \ (the starting cell is fixed).   \n- 40 points: No additional constraints.   \n\
  \n-----Sample Input:-----\n1\n5 5 3\n4 3 9 7 2\n8 6 5 2 8\n1 7 3 4 3\n2 2 4 5 6\n\
  9 9 9 9 9\n3 4 6\n3 2 5\n1 4 9\n\n-----Sample Output:-----\n10\n0\n19\n\n-----EXPLANATION:-----\n\
  For the first query, the cell (3,4)$(3,4)$ has height 4. The mercury can reach the\
  \ following cells: (2,3)$(2,3)$, (2,4)$(2,4)$, (3,1)$(3,1)$, (3,3)$(3,3)$, (3,4)$(3,4)$,\
  \ (3,5)$(3,5)$, (4,1)$(4,1)$, (4,2)$(4,2)$, (4,3)$(4,3)$, (4,4)$(4,4)$, for a total\
  \ of 10. Note that it cannot reach cell (4,5)$(4,5)$ because the height (6) is equal\
  \ to the power value (6).\nFor the second query, the cell (3,2)$(3,2)$ has height\
  \ 7. Since the power value of 5 is less than or equal to the height of 7, the mercury\
  \ immediately dissipates and so it reaches 0 cells.\nFor the third query, the mercury\
  \ can reach all cells except the bottom row and the cell (1,3)$(1,3)$.\nNote that\
  \ (x,y)$(x,y)$ means the cell on the x$x$-th row and y$y$-th column."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_mercury_leak (grid : List (List Nat)) (height width :\
  \ Nat) (queries : List (Nat × Nat × Nat)) : List Nat := sorry\n\ntheorem solve_mercury_leak_results_length\
  \ \n  (grid : List (List Nat)) (h w : Nat) (queries : List (Nat × Nat × Nat)) :\n\
  \  (List.length (solve_mercury_leak grid h w queries)) = List.length queries :=\
  \ sorry\n"
"vc-theorems": "theorem solve_mercury_leak_results_bounds\n  (grid : List (List Nat))\
  \ (h w : Nat) (queries : List (Nat × Nat × Nat))\n  (res := solve_mercury_leak grid\
  \ h w queries) :\n  ∀ x ∈ res, 0 ≤ x ∧ x ≤ 4 := sorry\n\n\ntheorem solve_mercury_leak_monotonic\n\
  \  (grid : List (List Nat)) (h w : Nat) (queries : List (Nat × Nat × Nat))\n  (res\
  \ := solve_mercury_leak grid h w queries)\n  (i : Fin queries.length) (hi : i.val\
  \ + 1 < queries.length)\n  (hres : res.length = queries.length) :\n  let q₁ := queries.get\
  \ i\n  let q₂ := queries.get ⟨i.val + 1, hi⟩\n  let i' : Fin res.length := ⟨i.val,\
  \ by rw [hres]; exact i.isLt⟩\n  let i1 : Fin res.length := ⟨i.val + 1, by rw [hres];\
  \ exact hi⟩\n  let r₁ := res.get i'\n  let r₂ := res.get i1\n  q₁.1 = q₂.1 → \n\
  \  q₁.2.1 = q₂.2.1 →\n  q₁.2.2 < q₂.2.2 →\n  r₁ ≤ r₂ := sorry\n\n\ntheorem solve_mercury_leak_connectivity\n\
  \  (grid : List (List (Nat))) \n  (h : List.length grid = 3)\n  (w : ∀ row ∈ grid,\
  \ List.length row = 3)\n  (center_val := (grid[1]!)[1]!) :\n  let query := [(2,\
  \ 2, 5)]\n  let res := solve_mercury_leak grid 3 3 query\n  center_val < 5 →\n \
  \ (∃ (r c : Nat), (r,c) ∈ [(0,1), (1,0), (1,2), (2,1)] ∧ \n    ((grid[r]!)[c]!)\
  \ < 5) →\n  res[0]! > 1 := sorry\n\n\ntheorem solve_mercury_leak_power_bounds\n\
  \  (grid : List (List Nat))\n  (h w : Nat) \n  (hlen : List.length (solve_mercury_leak\
  \ grid h w [(1,1,0), (2,2,10)]) > 1) :\n  let queries := [(1,1,0), (2,2,10)]\n \
  \ let res := solve_mercury_leak grid h w queries\n  res[0]! = 0 ∧ res[1]! ≤ h *\
  \ w := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
