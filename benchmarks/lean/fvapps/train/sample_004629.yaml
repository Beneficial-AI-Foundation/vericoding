"vc-description": "We all use 16:9, 16:10, 4:3 etc. ratios every day. Main task is\
  \ to determine image ratio by its width and height dimensions. \n\nFunction should\
  \ take width and height of an image and return a ratio string (ex.\"16:9\").\nIf\
  \ any of width or height entry is 0 function should throw an exception (or return\
  \ `Nothing`)."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calculate_ratio (width height : Nat) : String := sorry\n\n\
  theorem ratio_preservation \n  (width height : Nat) (h1 : width > 0) (h2 : height\
  \ > 0) :\n  let result := calculate_ratio width height\n  let parts := result.split\
  \ (Â· = ':')\n  (String.toNat! parts[0]!) / (String.toNat! parts[1]!) = width / height\
  \ := sorry\n"
"vc-theorems": "theorem zero_width_error (height : Nat) (h : height > 0) :\n  calculate_ratio\
  \ 0 height = \"\" := sorry\n\n\ntheorem zero_height_error (width : Nat) (h : width\
  \ > 0) :\n  calculate_ratio width 0 = \"\" := sorry\n\n\ntheorem common_ratio_sixteen_nine\
  \ :\n  calculate_ratio 16 9 = \"16:9\" := sorry\n\n\ntheorem common_ratio_four_three\
  \ :\n  calculate_ratio 4 3 = \"4:3\" := sorry\n\n\ntheorem common_ratio_one_one\
  \ :\n  calculate_ratio 1 1 = \"1:1\" := sorry\n\n/--\ninfo: '16:9'\n-/\n#guard_msgs\
  \ in\n#eval calculate_ratio 1920 1080\n\n/--\ninfo: '4:3'\n-/\n#guard_msgs in\n\
  #eval calculate_ratio 800 600\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
