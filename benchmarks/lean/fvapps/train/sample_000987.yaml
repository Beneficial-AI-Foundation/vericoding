"vc-description": "Chef has a garden with $N$ plants arranged in a line in decreasing\
  \ order of height. Initially the height of the plants are $A_1, A_2, ..., A_N$.\n\
  The plants are growing, after each hour the height of the $i$-th plant increases\
  \ by $i$ millimeters. Find the minimum number of integer hours that Chef must wait\
  \ to have two plants of the same height.\n\n-----Input:-----\n- The first line of\
  \ the input contains a single integer $T$ denoting the number of test cases. The\
  \ description of $T$ test cases follows.\n- The first line of each test case contains\
  \ a single integer $N$.\n- The second line contains $N$ space separated integers\
  \ $A_1,A_2,..A_N$. \n\n-----Output:-----\nFor each test case print a single line\
  \ containing one integer, the minimum number of integer hours that Chef must wait\
  \ to have two plants of the same height.\n\n-----Constraints-----\n- $1 \\leq T\
  \ \\leq 1000$\n- $2 \\leq N \\leq 10^5$\n- $0\\leq A_i \\leq 10^{18}$\n- $A_i >A_{i+1}$,\
  \ for each valid $i$\n- The Sum of $N$ over all test cases does not exceed $10^6$\n\
  \n-----Sample Input:-----\n1\n3\n8 4 2\n\n-----Sample Output:-----\n2\n\n-----EXPLANATION:-----\n\
  After $2$ hours there are two plants with the same height. \n$[8,4,2] \\rightarrow\
  \ [9,6,5] \\rightarrow [10,8,8]$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def min_hours_equal_plants (n : Nat) (plants : List Nat) : Nat\
  \ := sorry\n\ndef isDecreasing (l : List Nat) : Prop :=\n  ∀ i, i + 1 < l.length\
  \ → l[i]! > l[i+1]!\n"
"vc-theorems": "theorem min_gap_strictly_decreasing\n  {n : Nat} {plants : List Nat}\n\
  \  (h_sorted : isDecreasing plants)\n  (h_len : plants.length = n)\n  (h_size :\
  \ n ≥ 2)\n  (h_bounded : ∀ x ∈ plants, x ≥ 1 ∧ x ≤ 1000) :\n  ∃ i, i + 1 < plants.length\
  \ ∧ \n    min_hours_equal_plants n plants = plants[i]! - plants[i+1]! :=\nsorry\n\
  \n\ntheorem min_gap_constant\n  {n : Nat} {gap : Nat}\n  (h_n : n ≥ 2 ∧ n ≤ 10)\n\
  \  (h_gap : gap ≥ 1 ∧ gap ≤ 100)\n  (plants := List.range n |>.map (fun i => 100\
  \ - i * gap)) :\n  min_hours_equal_plants n plants = gap :=\nsorry\n\n/--\ninfo:\
  \ 2\n-/\n#guard_msgs in\n#eval min_hours_equal_plants 3 [8, 4, 2]\n\n/--\ninfo:\
  \ 3\n-/\n#guard_msgs in\n#eval min_hours_equal_plants 4 [10, 7, 4, 1]\n\n/--\ninfo:\
  \ 4\n-/\n#guard_msgs in\n#eval min_hours_equal_plants 5 [20, 15, 10, 5, 1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
