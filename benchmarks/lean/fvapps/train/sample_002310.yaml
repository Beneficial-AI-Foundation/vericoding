"vc-description": "Given the array of integers nums, you will choose two different\
  \ indices i and j of that array. Return the maximum value of (nums[i]-1)*(nums[j]-1).\n\
   \nExample 1:\nInput: nums = [3,4,5,2]\nOutput: 12 \nExplanation: If you choose\
  \ the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that\
  \ is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12. \n\nExample 2:\nInput: nums\
  \ = [1,5,4,5]\nOutput: 16\nExplanation: Choosing the indices i=1 and j=3 (indexed\
  \ from 0), you will get the maximum value of (5-1)*(5-1) = 16.\n\nExample 3:\nInput:\
  \ nums = [3,7]\nOutput: 12\n\n \nConstraints:\n\n2 <= nums.length <= 500\n1 <= nums[i]\
  \ <= 10^3"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def max_product (nums : List Nat) : Nat :=\n  sorry\n\n\n\n\n\n\
  \n\n\n"
"vc-theorems": "theorem max_product_two_elements (a b : Nat)\n  (h1 : 2 ≤ a ∧ a ≤\
  \ 1000)\n  (h2 : 2 ≤ b ∧ b ≤ 1000) :\n  max_product [a, b] = (a-1) * (b-1) := sorry\n\
  \n/--\ninfo: 12\n-/\n#guard_msgs in\n#eval max_product [3, 4, 5, 2]\n\n/--\ninfo:\
  \ 16\n-/\n#guard_msgs in\n#eval max_product [1, 5, 4, 5]\n\n/--\ninfo: 12\n-/\n\
  #guard_msgs in\n#eval max_product [3, 7]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
