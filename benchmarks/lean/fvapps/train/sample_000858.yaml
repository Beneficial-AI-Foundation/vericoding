"vc-description": "It's year 2018 and it's Christmas time! Before going for vacations,\
  \ students of Hogwarts School of Witchcraft and Wizardry had their end semester\
  \ exams.\n$N$ students attended the semester exam. Once the exam was over, their\
  \ results were displayed as either \"Pass\" or \"Fail\" behind their magic jacket\
  \ which they wore. A student cannot see his/her result but can see everyone else's\
  \ results. Each of $N$ students count the number of passed students they can see.\n\
  Given the number of \"Pass\" verdicts that each of the $N$ students counted, we\
  \ have to figure out conclusively, the number of students who failed, or report\
  \ that there is some inconsistency or that we cannot be sure.\n\n-----Input:-----\n\
  - First line will contain $T$, number of testcases. Then the testcases follow. \n\
  - The first line of each test case will contain $N$, representing the number of\
  \ students who attended the exam.\n- Next line contains  $N$ spaced integers representing\
  \ the number of \"Pass\" counted by each of the $N$ students.\n\n-----Output:-----\n\
  - For each test case, output the answer in a single line. \n- If the counts reported\
  \ by the students are not consistent with each other or if it's not possible to\
  \ predict the number of failed students from the given input, then print -1.\n\n\
  -----Constraints-----\n- $1 \\leq T \\leq 50$\n- $1 \\leq N \\leq 10^{5}$\n- $0\
  \ \\leq$ Count given by each Student $\\leq 10^{5}$\n\n-----Sample Input:-----\n\
  1\n4\n3 2 2 2\n\n-----Sample Output:-----\n1\n\n-----EXPLANATION:-----\nThere are\
  \ 4 students, and they counted the number of passed students as 3,2,2,2. The first\
  \ student can see that all others have passed, and all other students can see only\
  \ 2 students who have passed. Hence, the first student must have failed, and others\
  \ have all passed. Hence, the answer is 1."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_magic_jackets (n: Nat) (counts: List Nat) : Int := sorry\n\
  \n\n\ntheorem all_zeros (n: Nat) : \n  n ≥ 2 → solve_magic_jackets n (List.replicate\
  \ n 0) = n := sorry\n"
"vc-theorems": "theorem all_n_minus_one (n: Nat) :\n  n ≥ 2 → solve_magic_jackets\
  \ n (List.replicate n (n-1)) = 0 := sorry\n\n\n\n\ntheorem valid_pattern (n: Nat)\
  \ : \n  n ≥ 3 →\n  solve_magic_jackets n (List.replicate (n-1) (n-2) ++ [n-1]) =\
  \ 1 := sorry \n\n\ntheorem invalid_difference (n: Nat) (base diff: Nat) :\n  n ≥\
  \ 2 →\n  diff ≥ 2 →\n  solve_magic_jackets n (List.replicate (n-1) base ++ [base\
  \ + diff]) = -1 := sorry\n\n\ntheorem length_mismatch (n: Nat) (counts: List Nat)\
  \ :\n  n ≥ 2 →\n  List.length counts ≠ n →\n  let result := solve_magic_jackets\
  \ n counts\n  result = -1 ∨ result = 0 ∨ result = n ∨ result = 1 := sorry\n\n/--\n\
  info: 1\n-/\n#guard_msgs in\n#eval solve_magic_jackets 4 [3, 2, 2, 2]\n\n/--\ninfo:\
  \ 2\n-/\n#guard_msgs in\n#eval solve_magic_jackets 2 [0, 0]\n\n/--\ninfo: -1\n-/\n\
  #guard_msgs in\n#eval solve_magic_jackets 3 [2, 1, 0]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
