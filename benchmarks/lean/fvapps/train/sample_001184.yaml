"vc-description": "It is well-known that the elephants are afraid of mouses. The Little\
  \ Elephant from the Zoo of Lviv is not an exception.\n\nThe Little Elephant is on\
  \ a board A of n rows and m columns (0-based numeration). At the beginning he is\
  \ in cell with coordinates (0; 0) and he wants to go to cell with coordinates (n-1;\
  \ m-1). From cell (x; y) Little Elephant can go either to (x+1; y) or (x; y+1).\n\
  \nEach cell of the board contains either 1 or 0. If A[i][j] = 1, then there is a\
  \ single mouse in cell (i; j). Mouse at cell (i; j) scared Little Elephants if and\
  \ only if during the path there was at least one such cell (x; y) (which belongs\
  \ to that path) and |i-x| + |j-y| <= 1.\n\nLittle Elephant wants to find some correct\
  \ path from (0; 0) to (n-1; m-1) such that the number of mouses that have scared\
  \ the Little Elephant is minimal possible. Print that number.\n\n-----Input-----\n\
  First line contains single integer T - the number of test cases. Then T test cases\
  \ follow. First line of each test case contain pair of integers n and m - the size\
  \ of the board. Next n lines contain n strings, each of size m and consisted of\
  \ digits 0 and 1.\n\n-----Output-----\nIn T lines print T integer - the answers\
  \ for the corresponding test.\n\n-----Constraints-----\n1 <= T <= 50\n2 <= n, m\
  \ <= 100\n\n-----Example-----\nInput:\n2\n3 9\n001000001\n111111010\n100100100\n\
  7 9\n010101110\n110110111\n010011111\n100100000\n000010100\n011011000\n000100101\n\
  \nOutput:\n9\n10\n\n-----Explanation-----\nExample case 1: \nThe optimized path\
  \ is: (0, 0) -> (0, 1) -> (0, 2) -> (0, 3) -> (0, 4) -> (0, 5) -> (0, 6) -> (0,\
  \ 7) -> (0, 8) -> (1, 8) -> (2, 8). The mouses that scared the Little Elephant are\
  \ at the following cells: (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 7),\
  \ (0, 2), (0, 8).\n\nExample case 2: \nThe optimized path is: (0, 0) -> (1, 0) ->\
  \ (1, 1) -> (2, 1) -> (2, 2) -> (3, 2) -> (3, 3) -> (4, 3) -> (4, 4) -> (5, 4) ->\
  \ (5, 5) -> (6, 5) -> (6, 6) -> (6, 7) -> (6, 8). The 10 mouses that scared the\
  \ Little Elephant are at the following cells: (0, 1), (1, 0), (1, 1), (2, 1), (3,\
  \ 3), (4, 4), (5, 4), (5, 5), (6, 6), (6, 8)."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_valid_grid (grid : List String) : Bool := sorry \n\ndef\
  \ solve_elephant_path (grid : List String) : Result := sorry\n\n/-- For any valid\
  \ grid input, solve_elephant_path returns a natural number -/"
"vc-theorems": "theorem valid_grid_returns_nat (grid : List String) \n  (h : is_valid_grid\
  \ grid = true) : \n  âˆƒ (n : Nat), solve_elephant_path grid = Result.Value n := sorry\n\
  \n/-- For any invalid grid input, solve_elephant_path returns an error -/\n\ntheorem\
  \ invalid_grid_errors (grid : List String) \n  (h : is_valid_grid grid = false)\
  \ :\n  solve_elephant_path grid = Result.Error := sorry\n\n/--\ninfo: 9\n-/\n#guard_msgs\
  \ in\n#eval solve_elephant_path [\"3 9\", \"001000001\", \"111111010\", \"100100100\"\
  ]\n\n/--\ninfo: 10\n-/\n#guard_msgs in\n#eval solve_elephant_path [\"7 9\", \"010101110\"\
  , \"110110111\", \"010011111\", \"100100000\", \"000010100\", \"011011000\", \"\
  000100101\"]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
