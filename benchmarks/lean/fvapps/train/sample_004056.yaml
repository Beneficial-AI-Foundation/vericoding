"vc-description": "Write a function groupIn10s which takes any number of arguments,\
  \ and groups them into sets of 10s and sorts each group in ascending order.\n\n\
  The return value should be an array of arrays, so that numbers between 0-9 inclusive\
  \ are in position 0 and numbers 10-19 are in position 1, etc. \n\nHere's an example\
  \ of the required output:\n\n```python\ngrouped = group_in_10s(8, 12, 38, 3, 17,\
  \ 19, 25, 35, 50) \n\ngrouped[0]     # [3, 8]\ngrouped[1]     # [12, 17, 19]\ngrouped[2]\
  \     # [25]\ngrouped[3]     # [35, 38]\ngrouped[4]     # None\ngrouped[5]     #\
  \ [50]\n```\n``` haskell\ngroupIn10s [8, 12, 3, 17, 19, 24, 35, 50] `shouldBe` \
  \ [[3,8],[12,17,19],[24],[35],[],[50]]\n```"
"vc-preamble": "import Imports.AllImports\n\ndef group_in_10s (nums : List Nat) :\
  \ List (Option (List Nat)) := sorry\n\ntheorem group_in_10s_empty (nums : List Nat)\
  \ :\n  nums = [] → group_in_10s nums = [] := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def listMax (l : List Nat) : Nat :=\nmatch l with\n| [] => 0\n\
  | (x::xs) => max x (listMax xs)\n"
"vc-theorems": "theorem group_in_10s_sorted (nums : List Nat) (group : List Nat) :\n\
  \  group ∈ (group_in_10s nums).filterMap id → \n  ∀ i j, i < j → j < group.length\
  \ → \n  ∀ h1 : i < group.length, ∀ h2 : j < group.length, \n  group.get ⟨i,h1⟩ ≤\
  \ group.get ⟨j,h2⟩ := sorry\n\n\ntheorem group_in_10s_same_tens_digit (nums : List\
  \ Nat) (group : List Nat) (group_idx : Nat) :\n  some group = (group_in_10s nums).get?\
  \ group_idx → \n  ∀ n ∈ group, n / 10 = group_idx := sorry\n\n\ntheorem group_in_10s_preserves_elements\
  \ (nums : List Nat) :\n  List.length (List.join ((group_in_10s nums).filterMap id))\
  \ = List.length nums ∧\n  ∀ n ∈ nums, n ∈ List.join ((group_in_10s nums).filterMap\
  \ id) := sorry\n\n\ntheorem group_in_10s_single (n : Nat) :\n  n ≤ 1000 →\n  let\
  \ result := group_in_10s [n]\n  (∀ i < n/10, result.get? i = some none) ∧ \n  result.get?\
  \ (n/10) = some (some [n]) ∧\n  result.length = n/10 + 1 := sorry\n\n\ntheorem group_in_10s_max_length\
  \ (nums : List Nat) :\n  nums ≠ [] →\n  (∀ n ∈ nums, n ≤ 99) →\n  (group_in_10s\
  \ nums).length = (listMax nums) / 10 + 1 := sorry\n\n/--\ninfo: 11\n-/\n#guard_msgs\
  \ in\n#eval len group_in_10s(100)\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
