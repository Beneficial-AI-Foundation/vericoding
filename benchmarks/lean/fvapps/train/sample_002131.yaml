"vc-description": "Little Nastya has a hobby, she likes to remove some letters from\
  \ word, to obtain another word. But it turns out to be pretty hard for her, because\
  \ she is too young. Therefore, her brother Sergey always helps her.\n\nSergey gives\
  \ Nastya the word t and wants to get the word p out of it. Nastya removes letters\
  \ in a certain order (one after another, in this order strictly), which is specified\
  \ by permutation of letters' indices of the word t: a_1... a_{|}t|. We denote the\
  \ length of word x as |x|. Note that after removing one letter, the indices of other\
  \ letters don't change. For example, if t = \"nastya\" and a = [4, 1, 5, 3, 2, 6]\
  \ then removals make the following sequence of words \"nastya\" $\\rightarrow$ \"\
  nastya\" $\\rightarrow$ \"nastya\" $\\rightarrow$ \"nastya\" $\\rightarrow$ \"nastya\"\
  \ $\\rightarrow$ \"nastya\" $\\rightarrow$ \"nastya\".\n\nSergey knows this permutation.\
  \ His goal is to stop his sister at some point and continue removing by himself\
  \ to get the word p. Since Nastya likes this activity, Sergey wants to stop her\
  \ as late as possible. Your task is to determine, how many letters Nastya can remove\
  \ before she will be stopped by Sergey.\n\nIt is guaranteed that the word p can\
  \ be obtained by removing the letters from word t.\n\n\n-----Input-----\n\nThe first\
  \ and second lines of the input contain the words t and p, respectively. Words are\
  \ composed of lowercase letters of the Latin alphabet (1 ≤ |p| < |t| ≤ 200 000).\
  \ It is guaranteed that the word p can be obtained by removing the letters from\
  \ word t.\n\nNext line contains a permutation a_1, a_2, ..., a_{|}t| of letter indices\
  \ that specifies the order in which Nastya removes letters of t (1 ≤ a_{i} ≤ |t|,\
  \ all a_{i} are distinct).\n\n\n-----Output-----\n\nPrint a single integer number,\
  \ the maximum number of letters that Nastya can remove.\n\n\n-----Examples-----\n\
  Input\nababcba\nabb\n5 3 4 1 7 6 2\n\nOutput\n3\nInput\nbbbabb\nbb\n1 6 3 4 2 5\n\
  \nOutput\n4\n\n\n-----Note-----\n\nIn the first sample test sequence of removing\
  \ made by Nastya looks like this:\n\n\"ababcba\" $\\rightarrow$ \"ababcba\" $\\\
  rightarrow$ \"ababcba\" $\\rightarrow$ \"ababcba\" \n\nNastya can not continue,\
  \ because it is impossible to get word \"abb\" from word \"ababcba\".\n\nSo, Nastya\
  \ will remove only three letters."
"vc-preamble": "import Imports.AllImports\n\ndef sub (a b : List α) : Bool := sorry\n\
  \ndef sub_string (a b : String) : Bool := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def subword (t : List Int) (ord_ar : List Int) (n : Int) : List\
  \ Int := sorry\n\ndef bin_s (l r : Int) (f : Int → Bool) : Int := sorry\n\n@[simp]\
  \ theorem sub_empty (a : List α) : \n  sub a [] = true := sorry\n\n@[simp] theorem\
  \ sub_longer (a s : List α) :\n  List.length s > List.length a → sub a s = false\
  \ := sorry\n\n@[simp] theorem sub_refl (a : List α) :\n  sub a a = true := sorry\n\
  \n@[simp] theorem sub_string_empty (a b : String) :\n  sub_string a \"\" = true\
  \ := sorry\n\n@[simp] theorem sub_string_longer (a b : String) :\n  String.length\
  \ b > String.length a → sub_string a b = false := sorry\n\n@[simp] theorem sub_string_refl\
  \ (a : String) :\n  sub_string a a = true := sorry\n"
"vc-theorems": "theorem subword_length (t : List Int) (ord_ar : List Int) (n : Int)\
  \ :\n  List.length t = List.length ord_ar → \n  List.length (subword t ord_ar n)\
  \ ≤ List.length t := sorry\n\n\ntheorem bin_search_bounds (l r : Int) (f : Int →\
  \ Bool) :\n  r > l + 1 →\n  let res := bin_s l r f\n  l ≤ res ∧ res ≤ r := sorry\n\
  \n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval solve \"ababcba\" \"abb\" [5, 3, 4, 1,\
  \ 7, 6, 2]\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval solve \"bbbabb\" \"bb\" [1,\
  \ 6, 3, 4, 2, 5]\n\n/--\ninfo: 9\n-/\n#guard_msgs in\n#eval solve \"cacaccccccacccc\"\
  \ \"cacc\" [10, 9, 14, 5, 1, 7, 15, 3, 6, 12, 4, 8, 11, 13, 2]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded"
