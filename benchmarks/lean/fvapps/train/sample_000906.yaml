"vc-description": "There are two friends Alice and Bob. They have a packet of $n$\
  \ candies. They want to split the candies between them, and to do so, they kept\
  \ them all in a single line. The $i^{\\text{th}}$ candy in the line has a sweetness\
  \ value of $a_i$. They decided to take turns in picking the candies. Alice has the\
  \ first turn. In a person's turn, they either eat the leftmost candy or the rightmost\
  \ candy with equal probability.\nCan you find the expected value of sum of sweetness\
  \ of the candies eaten by Alice?\nYour answer is considered correct if its absolute\
  \ or relative error doesn't exceed $10^{-6}$ .\n\n-----Input:-----\n- The first\
  \ line will contain $T$, number of testcases. Then the testcases follow. \n- First\
  \ line of each testcase contains a single integer $n$ denoting the number of candies.\n\
  - Second line of each testcase contains  $n$ space separated integers representing\
  \ $a_1,a_2,a_3,...a_n$ respectively.\n\n-----Output:-----\nFor each testcase, output\
  \ the expected value of sum of sweetness of the candies which Alice eats.\n\n-----Constraints-----\n\
  - $1 \\leq T \\leq 10$\n- $1 \\leq n \\leq 10^3$\n- $1 \\leq a_i \\leq 10^6$\n-\
  \ Sum of $n$ across all the tests $\\leq 10^3$\n\n-----Sample Input:-----\n2\n2\n\
  1 2\n3\n1 2 3\n\n-----Sample Output:-----\n1.500000000000000\n4.000000000000000\n\
  \n-----EXPLANATION:-----\nIn the first sample, Alice eats either the first or the\
  \ second candy with equal probability. Hence, expected value is $(1+2)/2 = 1.5$\n\
  For the second sample, expected value is $4$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def compute_expected_sweetness (n : Nat) (candies : List Nat) :\
  \ Float :=\n  sorry\n"
"vc-theorems": "theorem expected_sweetness_non_negative\n    (n : Nat)\n    (candies\
  \ : List Nat)\n    (h1 : n > 0)\n    (h2 : n ≤ 10)\n    (h3 : ∀ x ∈ candies, x ≤\
  \ 100) :\n    compute_expected_sweetness n candies ≥ 0 := sorry\n\n\ntheorem expected_sweetness_bounded\n\
  \    (n : Nat)\n    (candies : List Nat)\n    (h1 : n > 0)\n    (h2 : n ≤ 10)\n\
  \    (h3 : ∀ x ∈ candies, x ≤ 100) :\n    ∃ (bound : Float), compute_expected_sweetness\
  \ n candies ≤ bound := sorry\n\n\ntheorem expected_sweetness_max_bound\n    (n :\
  \ Nat)\n    (candies : List Nat)\n    (h1 : n > 0)\n    (h2 : n ≤ 10)\n    (h3 :\
  \ ∀ x ∈ candies, x ≤ 100)\n    (max : Nat)\n    (h4 : ∀ x ∈ candies, x ≤ max) :\n\
  \    compute_expected_sweetness n candies ≤ Float.ofNat (max * n) := sorry\n\n\n\
  theorem expected_sweetness_order_invariant\n    (n : Nat)\n    (candies : List Nat)\n\
  \    (h1 : n > 0)\n    (h2 : n ≤ 10)\n    (h3 : ∀ x ∈ candies, x ≤ 100)\n    (ε\
  \ : Float)\n    (h4 : ε = 0.000001) :\n    compute_expected_sweetness n candies\
  \ - compute_expected_sweetness n candies.reverse < ε ∧\n    compute_expected_sweetness\
  \ n candies.reverse - compute_expected_sweetness n candies < ε := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
