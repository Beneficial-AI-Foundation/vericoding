"vc-description": "Koa the Koala and her best friend want to play a game.\n\nThe game\
  \ starts with an array $a$ of length $n$ consisting of non-negative integers. Koa\
  \ and her best friend move in turns and each have initially a score equal to $0$.\
  \ Koa starts.\n\nLet's describe a move in the game:  During his move, a player chooses\
  \ any element of the array and removes it from this array, xor-ing it with the current\
  \ score of the player.\n\n More formally: if the current score of the player is\
  \ $x$ and the chosen element is $y$, his new score will be $x \\oplus y$. Here $\\\
  oplus$ denotes bitwise XOR operation.\n\n Note that after a move element $y$ is\
  \ removed from $a$.\n\n  The game ends when the array is empty. \n\nAt the end of\
  \ the game the winner is the player with the maximum score. If both players have\
  \ the same score then it's a draw.\n\nIf both players play optimally find out whether\
  \ Koa will win, lose or draw the game.\n\n\n-----Input-----\n\nEach test contains\
  \ multiple test cases. The first line contains $t$ ($1 \\le t \\le 10^4$) — the\
  \ number of test cases. Description of the test cases follows.\n\nThe first line\
  \ of each test case contains the integer $n$ ($1 \\le n \\le 10^5$) — the length\
  \ of $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2,\
  \ \\ldots, a_n$ ($0 \\le a_i \\le 10^9$) — elements of $a$.\n\nIt is guaranteed\
  \ that the sum of $n$ over all test cases does not exceed $10^5$.\n\n\n-----Output-----\n\
  \nFor each test case print:  WIN if Koa will win the game.  LOSE if Koa will lose\
  \ the game.  DRAW if the game ends in a draw. \n\n\n-----Examples-----\nInput\n\
  3\n3\n1 2 2\n3\n2 2 3\n5\n0 0 0 2 2\n\nOutput\nWIN\nLOSE\nDRAW\n\nInput\n4\n5\n\
  4 1 5 1 3\n4\n1 0 1 6\n1\n0\n2\n5 4\n\nOutput\nWIN\nWIN\nDRAW\nWIN\n\n\n\n-----Note-----\n\
  \nIn testcase $1$ of the first sample we have:\n\n$a = [1, 2, 2]$. Here Koa chooses\
  \ $1$, other player has to choose $2$, Koa chooses another $2$. Score for Koa is\
  \ $1 \\oplus 2 = 3$ and score for other player is $2$ so Koa wins."
"vc-preamble": "import Imports.AllImports\n\ndef solve (n : Nat) (a : List Nat) :\
  \ GameResult :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isValidResult (result : GameResult) : Bool :=\n  match result\
  \ with\n  | GameResult.WIN => true\n  | GameResult.LOSE => true\n  | GameResult.DRAW\
  \ => true\n"
"vc-theorems": "theorem solve_output_is_valid {n : Nat} {a : List Nat} (h: n > 0)\
  \ (h2: a.length = n):\n  isValidResult (solve n a) = true := by\n  sorry\n\n\ntheorem\
  \ solve_consistent_result {n : Nat} {a : List Nat} (h: n > 0) (h2: a.length = n):\n\
  \  solve n a = solve n a := by\n  sorry\n\n\ntheorem solve_invariant_under_reordering\
  \ {n : Nat} {a b : List Nat} \n  (h: n > 0) (h2: a.length = n) (h3: b.length = n)\n\
  \  (h4: ∃ p : List Nat, b = p ++ a):\n  solve n a = solve n b := by\n  sorry\n\n\
  \ntheorem solve_all_same_numbers {n : Nat} {val : Nat} (h: n > 0):\n  isValidResult\
  \ (solve n (List.replicate n val)) = true := by\n  sorry\n\n/--\ninfo: 'WIN'\n-/\n\
  #guard_msgs in\n#eval solve 3 [1, 2, 2]\n\n/--\ninfo: 'LOSE'\n-/\n#guard_msgs in\n\
  #eval solve 3 [2, 2, 3]\n\n/--\ninfo: 'DRAW'\n-/\n#guard_msgs in\n#eval solve 5\
  \ [0, 0, 0, 2, 2]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
