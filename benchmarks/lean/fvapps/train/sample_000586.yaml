"vc-description": "----- Statement -----\n\nYou need to find a string which has exactly\
  \ K positions in it such that the character at that position comes alphabetically\
  \ later than the character immediately after it. If there are many such strings,\
  \ print the one which has the shortest length. If there is still a tie, print the\
  \ string which comes the lexicographically earliest (would occur earlier in a dictionary).\n\
  \n-----Input-----\nThe first line contains the number of test cases T. Each test\
  \ case contains an integer K (≤ 100).\n\n-----Output-----\nOutput T lines, one for\
  \ each test case, containing the required string.  Use only lower-case letters a-z.\n\
  \n-----Sample Input -----\n2\n1\n2\n\n-----Sample Output-----\nba\ncba"
"vc-preamble": "import Imports.AllImports\n\ndef isLowercaseLetter (c : Char) : Bool\
  \ := \n  let n := c.toNat\n  97 ≤ n && n ≤ 122\n\n\ndef countDescendingPairs (s\
  \ : List Char) : Nat :=\n  match s with\n  | [] => 0\n  | [_] => 0 \n  | x::y::xs\
  \ => (if x > y then 1 else 0) + countDescendingPairs (y::xs)\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def findKDescendingPairs (k : Nat) : List Char :=\n  sorry\n"
"vc-theorems": "theorem count_is_k (k : Nat) (k_pos : k > 0) :\n  let result := findKDescendingPairs\
  \ k\n  countDescendingPairs result = k :=\nsorry\n\n\ntheorem all_lowercase (k :\
  \ Nat) (k_pos : k > 0) :\n  let result := findKDescendingPairs k\n  ∀ c ∈ result,\
  \ isLowercaseLetter c :=\nsorry\n\n\ntheorem minimal_length (k : Nat) (k_pos : k\
  \ > 0) :\n  let result := findKDescendingPairs k\n  let expected_len := k + 1 +\
  \ if k > 25 then ((k - 26) / 25) + 1 else 0\n  result.length = expected_len :=\n\
  sorry\n\n\ntheorem valid_chars (k : Nat) (k_pos : k > 0) :\n  let result := findKDescendingPairs\
  \ k\n  ∀ c ∈ result, 97 ≤ c.toNat ∧ c.toNat ≤ 122 := \nsorry\n\n/--\ninfo: 'ba'\n\
  -/\n#guard_msgs in\n#eval find_k_descending_pairs 1\n\n/--\ninfo: 'cba'\n-/\n#guard_msgs\
  \ in\n#eval find_k_descending_pairs 2\n\n/--\ninfo: 'dcba'\n-/\n#guard_msgs in\n\
  #eval find_k_descending_pairs 3\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
