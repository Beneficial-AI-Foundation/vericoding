"vc-description": "You are given an array of non-negative integers, your task is to\
  \ complete the series from 0 to the highest number in the array.\n\nIf the numbers\
  \ in the sequence provided are not in order you should order them, but if a value\
  \ repeats, then you must return a sequence with only one item, and the value of\
  \ that item must be 0. like this:\n```\ninputs        outputs\n[2,1]     ->  [0,1,2]\n\
  [1,4,4,6] ->  [0]\n```\nNotes: all numbers are positive integers.\n\nThis is set\
  \ of example outputs based on the input sequence.\n```\ninputs        outputs\n\
  [0,1]   ->    [0,1]\n[1,4,6] ->    [0,1,2,3,4,5,6]\n[3,4,5] ->    [0,1,2,3,4,5]\n\
  [0,1,0] ->    [0]\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def complete_series (arr : List Nat) : List Nat := sorry\n\ntheorem\
  \ complete_series_returns_list (arr : List Nat) :\n  ∃ l, complete_series arr =\
  \ l := by sorry\n"
"vc-theorems": "theorem complete_series_main_property (arr : List Nat) :\n  (∃ x ∈\
  \ arr, ∃ y ∈ arr, x = y ∧ arr.indexOf x ≠ arr.indexOf y) →\n  complete_series arr\
  \ = [0] := by sorry\n\n\ntheorem complete_series_complete_sequence (arr : List Nat)\
  \ :\n  (∀ x ∈ arr, ∀ y ∈ arr, x = y → arr.indexOf x = arr.indexOf y) →\n  let maxVal\
  \ := arr.maximum?.getD 0\n  complete_series arr = List.range (maxVal + 1) := by\
  \ sorry \n\n\ntheorem complete_series_length (arr : List Nat) :\n  (∀ x ∈ arr, ∀\
  \ y ∈ arr, x = y → arr.indexOf x = arr.indexOf y) →\n  let maxVal := arr.maximum?.getD\
  \ 0\n  (complete_series arr).length = maxVal + 1 := by sorry\n\n\ntheorem complete_series_contains_all_elements\
  \ (arr : List Nat) : \n  (∀ x ∈ arr, ∀ y ∈ arr, x = y → arr.indexOf x = arr.indexOf\
  \ y) →\n  let maxVal := arr.maximum?.getD 0\n  ∀ i, i ≤ maxVal → i ∈ complete_series\
  \ arr := by sorry\n\n\ntheorem complete_series_monotone (arr : List Nat) :\n  (∀\
  \ x ∈ arr, ∀ y ∈ arr, x = y → arr.indexOf x = arr.indexOf y) →\n  ∀ i j, i < j →\
  \ i < (complete_series arr).length → j < (complete_series arr).length →\n  (complete_series\
  \ arr).get ⟨i, by sorry⟩ ≤ (complete_series arr).get ⟨j, by sorry⟩ := by sorry\n\
  \n/--\ninfo: [0, 1]\n-/\n#guard_msgs in\n#eval complete_series [0, 1]\n\n/--\ninfo:\
  \ [0, 1, 2, 3, 4, 5, 6]\n-/\n#guard_msgs in\n#eval complete_series [1, 4, 6]\n\n\
  /--\ninfo: [0]\n-/\n#guard_msgs in\n#eval complete_series [1, 4, 4, 6]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
