"vc-description": "Write a method that takes a string as an argument and groups the\
  \ number of time each character appears in the string as a hash sorted by the highest\
  \ number of occurrences.\n\nThe characters should be sorted alphabetically e.g:\n\
  \n```python\nget_char_count(\"cba\") == {1: [\"a\", \"b\", \"c\"]}\n```\n\nYou should\
  \ ignore spaces, special characters and count uppercase letters as lowercase ones.\n\
  \nFor example: \n```python\nget_char_count(\"Mississippi\")           ==  {4: [\"\
  i\", \"s\"], 2: [\"p\"], 1: [\"m\"]}\nget_char_count(\"Hello. Hello? HELLO!\") \
  \ ==  {6: [\"l\"], 3: [\"e\", \"h\", \"o\"]}\nget_char_count(\"aaa...bb...c!\")\
  \         ==  {3: [\"a\"], 2: [\"b\"], 1: [\"c\"]}\nget_char_count(\"abc123\") \
  \               ==  {1: [\"1\", \"2\", \"3\", \"a\", \"b\", \"c\"]}\nget_char_count(\"\
  aaabbbccc\")             ==  {3: [\"a\", \"b\", \"c\"]}\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def get_char_count (s : String) : List (Nat × List Char) :=\n \
  \ sorry\n"
"vc-theorems": "theorem get_char_count_empty :\n  get_char_count \"\" = [] := \n \
  \ sorry\n\n\ntheorem get_char_count_single (c : Char) :\n  get_char_count (String.singleton\
  \ c) = [(1, [c])] :=\n  sorry\n\n\ntheorem get_char_count_duplicates :\n  get_char_count\
  \ \"aaa\" = [(3, ['a'])] :=\n  sorry\n\n\ntheorem get_char_count_distinct :\n  let\
  \ res := get_char_count \"abc\"\n  ∃ l, (1, l) ∈ res ∧ l = ['a', 'b', 'c'] :=\n\
  \  sorry\n\n\ntheorem get_char_count_mixed :\n  get_char_count \"mississippi\" =\
  \ [(4, ['i', 's']), (2, ['p']), (1, ['m'])] :=\n  sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
