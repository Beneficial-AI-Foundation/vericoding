"vc-description": "In Snakeland, there are some snakes and mongooses. They are lined\
  \ up in a row. The information about how exactly they are lined up it is provided\
  \ to you by a string of length n. If the i-th character of this string is 's', then\
  \ it means that there is a snake at the i-th position, whereas the character 'm'\
  \ denotes a mongoose.\nYou might have heard about the age-old rivalry between hares\
  \ and tortoises, but in Snakeland, the rivalry between snakes and mongooses is much\
  \ more famous. The snakes and the mongooses want to hold a final poll in which the\
  \ ultimate winner of this age-old battle will be decided. If the snakes get more\
  \ votes than the mongooses, they will be the ultimate winners. Similarly, if the\
  \ mongooses get more votes than snakes, they will be the ultimate winners. Obviously,\
  \ each animal is loyal to their species, i.e. each snake will vote for the snakes\
  \ to be the ultimate champions and each mongoose for the mongooses.\n\nTomorrow's\
  \ the election day. Before the elections, the mongooses decided to cheat. They planned\
  \ that each mongoose will eat at most one of its neighbor snakes. Two animals are\
  \ said to be neighbors of each other if they are consecutive to each other in the\
  \ row. After this, the elections will be held. The mongooses planned in such a way\
  \ that the number of snakes eaten is maximized. Can you find out who will win the\
  \ final poll? Output \"snakes\", \"mongooses\" or \"tie\" correspondingly.\n\n-----Input-----\n\
  First line of the input contains an integer T denoting the number of test cases.\
  \ The description of T test cases follow.\nThe only line of each test case contains\
  \ a string consisting of characters 's' and 'm'. \n\n-----Output-----\nFor each\
  \ test case output a single line containing \"snakes\", \"mongooses\" or \"tie\"\
  \ correspondingly (without quotes).\n\n-----Constraints-----\n- 1 ≤ T ≤ 100\n- 1\
  \ ≤ |s| ≤ 100\n\n-----Example-----\nInput\n4\nsm\nssm\nsms\nssmmmssss\n\nOutput\n\
  mongooses\ntie\ntie\nsnakes\n\n-----Explanation-----\nExample 1. The mongoose will\
  \ eat the snake. Only the mongoose will be left. So, on the election day, there\
  \ is one mongoose and zero snakes. So mongooses will win.\nExample 2. The mongoose\
  \ will eat the snake at position 2 (1-based indexing). One mongoose and one snake\
  \ will be left. Hence, there will be a tie.\nExample 3. The mongoose can eat either\
  \ the snake to its left or to the right. But, it can eat only one of them. Afterwards,\
  \ there will be a single snake and mongoose. So, it will result in a tie. \nExample\
  \ 4. The mongooses can eat at max two snakes. For example, s*mmm*sss, where * denotes\
  \ the snakes that were eaten by mongooses. After this, we have four snakes and three\
  \ mongooses. So, the snakes win."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def determine_winner (sequence : String) : String := sorry\n\n\
  theorem determine_winner_output_valid (sequence : String) : \n  sequence.data.all\
  \ (fun c => c = 'm' ∨ c = 's') → \n  (determine_winner sequence = \"mongooses\"\
  \ ∨ \n   determine_winner sequence = \"snakes\" ∨ \n   determine_winner sequence\
  \ = \"tie\") :=\nsorry\n"
"vc-theorems": "theorem determine_winner_empty :\n  determine_winner \"\" = \"tie\"\
  \ :=\nsorry\n\n\ntheorem determine_winner_only_mongooses (sequence : String) :\n\
  \  sequence.data.all (fun c => c = 'm') →\n  sequence.length > 0 →\n  determine_winner\
  \ sequence = \"mongooses\" :=\nsorry\n\n\ntheorem determine_winner_only_mongooses_empty\
  \ (sequence : String) :\n  sequence.data.all (fun c => c = 'm') →\n  sequence.length\
  \ = 0 →\n  determine_winner sequence = \"tie\" :=\nsorry\n\n\ntheorem determine_winner_only_snakes\
  \ (sequence : String) :\n  sequence.data.all (fun c => c = 's') →\n  sequence.length\
  \ > 0 →\n  determine_winner sequence = \"snakes\" :=\nsorry\n\n\ntheorem determine_winner_only_snakes_empty\
  \ (sequence : String) :\n  sequence.data.all (fun c => c = 's') →\n  sequence.length\
  \ = 0 →\n  determine_winner sequence = \"tie\" :=\nsorry\n\n\ntheorem determine_winner_adjacent_valid\
  \ (sequence : String) :\n  sequence.data.all (fun c => c = 'm' ∨ c = 's') →\n  sequence.length\
  \ ≥ 2 →\n  (determine_winner sequence = \"mongooses\" ∨ \n   determine_winner sequence\
  \ = \"snakes\" ∨ \n   determine_winner sequence = \"tie\") :=\nsorry\n\n/--\ninfo:\
  \ 'mongooses'\n-/\n#guard_msgs in\n#eval determine_winner \"sm\"\n\n/--\ninfo: 'tie'\n\
  -/\n#guard_msgs in\n#eval determine_winner \"ssm\"\n\n/--\ninfo: 'snakes'\n-/\n\
  #guard_msgs in\n#eval determine_winner \"ssmmmssss\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
