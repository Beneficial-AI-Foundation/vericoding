"vc-description": "Given a non-negative integer N, find the largest number that is\
  \ less than or equal to N with monotone increasing digits.\n\n(Recall that an integer\
  \ has monotone increasing digits if and only if each pair of adjacent digits x and\
  \ y satisfy x .)\n\n\nExample 1:\n\nInput: N = 10\nOutput: 9\n\n\n\nExample 2:\n\
  \nInput: N = 1234\nOutput: 1234\n\n\n\nExample 3:\n\nInput: N = 332\nOutput: 299\n\
  \n\n\nNote:\nN is an integer in the range [0, 10^9]."
"vc-preamble": "import Imports.AllImports\n\ndef getDigits (n : Nat) : List Nat :=\
  \ sorry \n\n/-- Function that returns the largest number not exceeding n whose digits\
  \ are monotone increasing -/\n\ndef monotoneIncreasingDigits (n : Nat) : Nat :=\
  \ sorry\n\n/-- Helper function to compare Options -/"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def optionLE (a b : Option Nat) : Prop :=\n  match a, b with\n\
  \  | some x, some y => x ≤ y\n  | none, _ => True\n  | _, none => False\n\n/-- For\
  \ any number n, its monotone increasing digits result will have digits in non-decreasing\
  \ order\n    and will not exceed the original number n -/"
"vc-theorems": "theorem result_is_monotone_increasing (n : Nat) : \n  let result :=\
  \ monotoneIncreasingDigits n\n  let digits := getDigits result\n  (∀ i j : Nat,\
  \ i < j → j < digits.length → optionLE (digits[i]?) (digits[j]?)) ∧\n  result ≤\
  \ n := sorry\n\n/-- For any number n, its monotone increasing digits result is maximal\
  \ - incrementing any digit\n    would either make it exceed n or break the monotone\
  \ increasing property -/\n\ntheorem largest_possible_result (n : Nat) :\n  let result\
  \ := monotoneIncreasingDigits n\n  let digits := getDigits result\n  ∀ i : Nat,\
  \ i < digits.length →\n    let digit := digits[i]?\n    match digit with\n    |\
  \ none => True\n    | some d => d = 9 ∨\n      (let incrementedDigits := digits.set\
  \ i (d + 1)\n       let incrementedNum := incrementedDigits.foldl (fun acc d =>\
  \ acc * 10 + d) 0\n       incrementedNum > n ∨\n       ¬(∀ j k : Nat, j < k → k\
  \ < incrementedDigits.length → \n           optionLE (incrementedDigits[j]?) (incrementedDigits[k]?)))\
  \ := sorry\n\n/-- Single digit numbers remain unchanged when applying monotone increasing\
  \ digits -/\n\ntheorem single_digit_unchanged (n : Nat) :\n  n < 10 → monotoneIncreasingDigits\
  \ n = n := sorry\n\n/-- Numbers that are already monotone increasing remain unchanged\
  \ -/\n\ntheorem already_monotone_unchanged (n : Nat) :\n  let digits := getDigits\
  \ n\n  (∀ i j : Nat, i < j → j < digits.length → optionLE (digits[i]?) (digits[j]?))\
  \ →\n  monotoneIncreasingDigits n = n := sorry\n\n/--\ninfo: 9\n-/\n#guard_msgs\
  \ in\n#eval monotone_increasing_digits 10\n\n/--\ninfo: 1234\n-/\n#guard_msgs in\n\
  #eval monotone_increasing_digits 1234\n\n/--\ninfo: 299\n-/\n#guard_msgs in\n#eval\
  \ monotone_increasing_digits 332\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
