"vc-description": "> In information theory and computer science, the Levenshtein distance\
  \ is a string metric for measuring the difference between two sequences. Informally,\
  \ the Levenshtein distance between two words is the minimum number of single-character\
  \ edits (i.e. insertions, deletions or substitutions) required to change one word\
  \ into the other.\n\n(http://en.wikipedia.org/wiki/Levenshtein_distance)\n\n\nYour\
  \ task is to implement a function which calculates the Levenshtein distance for\
  \ two arbitrary strings."
"vc-preamble": "import Imports.AllImports\n\ndef levenshtein (s1 s2 : String) : Nat\
  \ :=\n  sorry\n\n-- Non-negativity"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def repeatChar (c : Char) (n : Nat) : String :=\nsorry"
"vc-theorems": "theorem levenshtein_nonneg (s1 s2 : String) :\n  levenshtein s1 s2\
  \ ≥ 0 :=\nsorry\n\n-- Identity\n\ntheorem levenshtein_identity (s : String) :  \n\
  \  levenshtein s s = 0 :=\nsorry\n\n-- Symmetry \n\ntheorem levenshtein_symm (s1\
  \ s2 : String) :\n  levenshtein s1 s2 = levenshtein s2 s1 :=\nsorry\n\n-- Triangle\
  \ inequality\n\ntheorem levenshtein_triangle (s1 s2 s3 : String) :\n  levenshtein\
  \ s1 s2 ≤ levenshtein s1 s3 + levenshtein s3 s2 :=\nsorry\n\n-- Empty string\n\n\
  theorem levenshtein_empty_string (s : String) :\n  levenshtein s \"\" = s.length\
  \ :=\nsorry\n\n\ntheorem levenshtein_empty_string_rev (s : String) :\n  levenshtein\
  \ \"\" s = s.length :=\nsorry\n\n-- Repeated char prepending\n\n/--\ninfo: 3\n-/\n\
  #guard_msgs in\n#eval levenshtein \"kitten\" \"sitting\"\n\n/--\ninfo: 2\n-/\n#guard_msgs\
  \ in\n#eval levenshtein \"book\" \"back\"\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n\
  #eval levenshtein \"peter\" \"peter\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
