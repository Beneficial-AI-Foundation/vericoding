"vc-description": "One of Chef's friends offered him a deal: during $D$ days, they\
  \ are going to exchange money. For each $i$ ($1 \\le i \\le D$), on the $i$-th day,\
  \ Chef's friend would give Chef $A$ rupees, while Chef would give his friend $2^{i-1}$\
  \ rupees ($1$ rupee on day $1$, $2$ rupees on day $2$, $4$ rupees on day $3$, and\
  \ so on). Chef's profit from the deal is the total number of rupees he received\
  \ from his friend minus the total number of rupees he gave his friend.\nChef decided\
  \ to ask for your advice before accepting the deal. You want to help him by telling\
  \ him two numbers $D_1$ and $D_2$, where $D_1$ is the maximum value of $D$ such\
  \ that Chef should accept the deal, i.e. his profit from the deal is positive if\
  \ $D = D_1$, and $D_2$ is the value of $D$ that leads to the maximum possible profit\
  \ for Chef. If there are multiple values of $D$ that lead to the maximum profit,\
  \ $D_2$ is the smallest of these values.\n\n-----Input-----\n- The first line of\
  \ the input contains a single integer $T$ denoting the number of test cases. The\
  \ description of $T$ test cases follows.\n- The first and only line of each test\
  \ case contains a single integer $A$.\n\n-----Output-----\nFor each test case, print\
  \ a single line containing two space-separated integers $D_1$ and $D_2$.\n\n-----Constraints-----\n\
  - $1 \\le T \\le 100,000$\n- $5 \\le A \\le 10^9$\n\n-----Subtasks-----\nSubtask\
  \ #1 (100 points): original constraints\n\n-----Example Input-----\n4\n5\n8\n9\n\
  1000000000\n\n-----Example Output-----\n4 3\n5 3\n5 4\n35 30"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_max_profit_days (A : Nat) : Nat × Nat := sorry\n\ndef\
  \ profit (A D : Nat) : Int := \n  Int.ofNat (A * D) + 1 - Int.ofNat (2^D)\n"
"vc-theorems": "theorem max_profit_days_non_negative (A : Nat) (h : A ≥ 2) :\n  let\
  \ (D1, D2) := solve_max_profit_days A\n  D1 ≥ 0 ∧ D2 ≥ 0 := sorry\n\n\ntheorem max_profit_days_ordered\
  \ (A : Nat) (h : A ≥ 2) :\n  let (D1, D2) := solve_max_profit_days A\n  D1 ≥ D2\
  \ := sorry\n\n\ntheorem max_profit_days_D2_bound (A : Nat) (h : A ≥ 2) :\n  let\
  \ (D1, D2) := solve_max_profit_days A \n  A ≤ 2^D2 := sorry\n\n\n\n\ntheorem max_profit_days_edge_cases\
  \ :\n  solve_max_profit_days 2 = (2, 1) ∧ \n  solve_max_profit_days 3 = (3, 2) ∧\n\
  \  solve_max_profit_days 4 = (4, 2) := sorry\n\n/--\ninfo: (4, 3)\n-/\n#guard_msgs\
  \ in\n#eval solve_max_profit_days 5\n\n/--\ninfo: (5, 3)\n-/\n#guard_msgs in\n#eval\
  \ solve_max_profit_days 8\n\n/--\ninfo: (5, 4)\n-/\n#guard_msgs in\n#eval solve_max_profit_days\
  \ 9\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
