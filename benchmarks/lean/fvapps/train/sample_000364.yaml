"vc-description": "Say you have an array for which the ith element is the price of\
  \ a given stock on day i.\n\nDesign an algorithm to find the maximum profit. You\
  \ may complete at most k transactions.\n\nNote:\nYou may not engage in multiple\
  \ transactions at the same time (ie, you must sell the stock before you buy again).\n\
  \nExample 1:\n\n\nInput: [2,4,1], k = 2\nOutput: 2\nExplanation: Buy on day 1 (price\
  \ = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.\n\n\nExample 2:\n\n\nInput:\
  \ [3,2,6,5,0,3], k = 2\nOutput: 7\nExplanation: Buy on day 2 (price = 2) and sell\
  \ on day 3 (price = 6), profit = 6-2 = 4.\nÂ             Then buy on day 5 (price\
  \ = 0) and sell on day 6 (price = 3), profit = 3-0 = 3."
"vc-preamble": "import Imports.AllImports\n\ndef max_profit (k : Nat) (prices : List\
  \ Nat) : Nat :=\n  sorry\n\n\n\n\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def lastElem (l : List Nat) : Nat :=\n  match l with\n  | [] =>\
  \ 0\n  | [x] => x\n  | x::xs => lastElem xs"
"vc-theorems": "theorem single_price_zero_profit (k : Nat) (p : Nat) : \n  max_profit\
  \ k [p] = 0 := sorry\n\nprivate def pairwise_profits (prices : List Nat) : Nat :=\n\
  \  sorry\n\n\n\n\n\nprivate def isSorted (l : List Nat) : Prop :=\n  sorry\n\n\n\
  /--\ninfo: 2\n-/\n#guard_msgs in\n#eval max_profit 2 [2, 4, 1]\n\n/--\ninfo: 7\n\
  -/\n#guard_msgs in\n#eval max_profit 2 [3, 2, 6, 5, 0, 3]\n\n/--\ninfo: 3\n-/\n\
  #guard_msgs in\n#eval max_profit 1 [1, 2, 3, 4]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
