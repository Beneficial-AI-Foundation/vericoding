"vc-description": "Chef wants to serve mankind by making people immortal by preparing\
  \ a dish, a dish of life - a dish with the best taste in the universe, one with\
  \ the smell and splash of fresh water flowing down the springs of the mountain,\
  \ one with the smell of the best lily flowers of the garden, one that has contained\
  \ the very essence of life in a real sense. \nThis dish will contain K ingredients\
  \ that are found only in remote islands amid mountains. For sake of convenience,\
  \ we enumerate the ingredients by the integers from 1 to K, both inclusive. There\
  \ are N islands and each of them offers some ingredients. Chef being a little child\
  \ did not know how to collect the ingredients for the recipe. He went to all the\
  \ islands and bought all the ingredients offered in each island. Could he possibly\
  \ have saved some time by skipping some island? If it was not possible for Chef\
  \ to collect the required ingredients (i.e. all the K ingredients), output \"sad\"\
  . If it was possible for him to skip some islands, output \"some\", otherwise output\
  \ \"all\".\n\n-----Input-----\nFirst line of the input contains an integer T denoting\
  \ number of test cases. The description of T test cases follow.\nThe first line\
  \ of each test case contains two space separated integers N, K.\nThe i-th of the\
  \ next lines will contain first an integer Pi, denoting the number of ingredients\
  \ grown in the i-th island, followed by Pi distinct integers in the range [1, K].\
  \ All the integers are space separated. \n\n-----Output-----\nFor each test case,\
  \ output a single line containing one of the strings \"sad\", \"all\" or \"some\"\
  \ (without quotes) according to the situation. \n\n-----Constraints-----\n- 1 ≤\
  \ T  ≤ 10\n- 1 ≤ N, K ≤ 105\n- 1 ≤ Pi ≤ K\n- Sum of Pi over all test cases ≤ 106\n\
  \n-----Subtasks-----\nSubtask #1 (30 points)\n- 1 ≤ N, K ≤ 50\n\nSubtask #2 (30\
  \ points)\n- 1 ≤ K ≤ 50\n\nSubtask #3 (40 points)\n- original constraints\n\n-----Example-----\n\
  Input\n3\n3 4\n3 1 2 3\n2 1 3\n2 1 2\n2 3\n3 1 2 3\n2 1 3\n2 3\n2 1 2\n2 1 3\n\n\
  Output\nsad\nsome\nall\n\n-----Explanation-----\nExample 1. The ingredient 4 is\
  \ not available in any island, so Chef can't make the dish of life. Hence, the answer\
  \ is \"sad\".\nExample 2. Chef can just go to the first island and collect all the\
  \ three ingredients required. He does not need to visit the second island. So, the\
  \ answer is \"some\".\nExample 3. Chef has to visit both the islands in order to\
  \ obtain all the three ingredients. So, the answer is \"all\"."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def Island := List Nat\n\ndef solve_recipes (islands: List Island)\
  \ (num_ingredients: Nat) : String := sorry\n"
"vc-theorems": "theorem solve_recipes_minimal_result_type (islands: List Island) (num_ingredients:\
  \ Nat):\n  num_ingredients = 2 →\n  (∀ i ∈ islands, ∀ x ∈ i.tail, x ≤ 2) →\n  let\
  \ result := solve_recipes islands num_ingredients\n  result = \"sad\" ∨ result =\
  \ \"some\" ∨ result = \"all\" := sorry\n\n\ntheorem solve_recipes_minimal_insufficient_ingredients\
  \ (islands: List Island) (num_ingredients: Nat):\n  num_ingredients = 2 →\n  (∀\
  \ i ∈ islands, ∀ x ∈ i.tail, x ≤ 2) →\n  (let ingredients := List.foldl (fun acc\
  \ i => List.foldl (fun s x => x :: s) acc i.tail) [] islands;\n   ingredients.length\
  \ < num_ingredients) →\n  solve_recipes islands num_ingredients = \"sad\" := sorry\n\
  \n/--\ninfo: 'sad'\n-/\n#guard_msgs in\n#eval solve_recipes [[3, 1, 2, 3], [2, 1,\
  \ 3], [2, 1, 2]] 4\n\n/--\ninfo: 'some'\n-/\n#guard_msgs in\n#eval solve_recipes\
  \ [[3, 1, 2, 3], [2, 1, 3]] 3\n\n/--\ninfo: 'all'\n-/\n#guard_msgs in\n#eval solve_recipes\
  \ [[2, 1, 2], [2, 1, 3]] 3\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
