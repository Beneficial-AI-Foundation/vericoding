"vc-description": "In this Kata, you will create a function that converts a string\
  \ with letters and numbers to the inverse of that string (with regards to Alpha\
  \ and Numeric characters). So, e.g. the letter `a` will become `1` and number `1`\
  \ will become `a`; `z` will become `26` and `26` will become `z`.\n\nExample: `\"\
  a25bz\"` would become `\"1y226\"`\n\n\nNumbers representing letters (`n <= 26`)\
  \ will always be separated by letters, for all test cases: \n\n* `\"a26b\"` may\
  \ be tested, but not `\"a262b\"`\n* `\"cjw9k\"` may be tested, but not `\"cjw99k\"\
  `\n\nA list named `alphabet` is preloaded for you: `['a', 'b', 'c', ...]`\n\nA dictionary\
  \ of letters and their number equivalent is also preloaded for you called `alphabetnums\
  \ = {'a': '1', 'b': '2', 'c': '3', ...}`"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def alpha_num_inverse (s: String) : String := sorry \n\ntheorem\
  \ pure_alpha_only_digits {s : String} \n  (h : ∀ c ∈ s.data, c ≥ 'a' ∧ c ≤ 'z')\
  \ :\n  ∀ c ∈ (alpha_num_inverse s).data, c ≥ '0' ∧ c ≤ '9' := sorry\n"
"vc-theorems": "theorem pure_alpha_conversion_correct {s : String}\n  (h : ∀ c ∈ s.data,\
  \ c ≥ 'a' ∧ c ≤ 'z') :\n  alpha_num_inverse s = String.join (s.data.map (fun c =>\
  \ toString (c.toNat - 96))) := sorry\n\n/--\ninfo: '1y226'\n-/\n#guard_msgs in\n\
  #eval alpha_num_inverse \"a25bz\"\n\n/--\ninfo: 'r262526n'\n-/\n#guard_msgs in\n\
  #eval alpha_num_inverse \"18zyz14\"\n\n/--\ninfo: '1234'\n-/\n#guard_msgs in\n#eval\
  \ alpha_num_inverse \"abcd\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
