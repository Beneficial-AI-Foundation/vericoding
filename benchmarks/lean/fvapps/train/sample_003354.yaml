"vc-description": "Some new cashiers started to work at your restaurant. \n\nThey\
  \ are good at taking orders, but they don't know how to capitalize words, or use\
  \ a space bar! \n\nAll the orders they create look something like this:\n\n`\"milkshakepizzachickenfriescokeburgerpizzasandwichmilkshakepizza\"\
  `\n\nThe kitchen staff are threatening to quit, because of how difficult it is to\
  \ read the orders. \n\nTheir preference is to get the orders as a nice clean string\
  \ with spaces and capitals like so:\n\n`\"Burger Fries Chicken Pizza Pizza Pizza\
  \ Sandwich Milkshake Milkshake Coke\"`\n\nThe kitchen staff expect the items to\
  \ be in the same order as they appear in the menu. \n\nThe menu items are fairly\
  \ simple, there is no overlap in the names of the items:\n```\n1. Burger\n2. Fries\n\
  3. Chicken\n4. Pizza\n5. Sandwich\n6. Onionrings\n7. Milkshake\n8. Coke\n```"
"vc-preamble": "import Imports.AllImports\n\ndef get_order (order: String) : String\
  \ := sorry\n\ndef to_lower (s: String) : String := sorry\n\ndef to_capital (s: String)\
  \ : String := sorry\ndef string_split (s: String) : List String := sorry\n\n\ndef\
  \ menu_item_to_nat (m: MenuItem) : Nat :=\n  match m with\n  | .burger => 0\n  |\
  \ .fries => 1\n  | .chicken => 2\n  | .pizza => 3\n  | .sandwich => 4\n  | .onionrings\
  \ => 5\n  | .milkshake => 6\n  | .coke => 7\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def string_to_menu_item? (s: String) : Option MenuItem := sorry\n\
  \ndef string_eq_dec (s1 s2: String) : Decidable (s1 = s2) := inferInstance\n"
"vc-theorems": "theorem get_order_preserves_items (items: List MenuItem) (order: String)\
  \ :\n  let result := string_split (get_order order)\n  ∀ item, items.contains item\
  \ → result.contains (to_capital (toString item)) := sorry\n\n\ntheorem get_order_maintains_menu_order\
  \ (items: List MenuItem) (order: String) : \n  let result := string_split (get_order\
  \ order)\n  ∀ s1 s2, result.contains s1 → result.contains s2 → ∀ m1 m2,\n    string_to_menu_item?\
  \ s1 = some m1 → \n    string_to_menu_item? s2 = some m2 →\n    result.indexOf s1\
  \ ≤ result.indexOf s2 → \n    menu_item_to_nat m1 ≤ menu_item_to_nat m2 := sorry\n\
  \n\ntheorem get_order_counts_match (items: List MenuItem) (order: String) :\n  let\
  \ result := string_split (get_order order)\n  ∀ item: MenuItem, \n    (items.filter\
  \ (fun x => x = item)).length = \n    (result.filter (fun x => to_lower x = toString\
  \ item)).length := sorry\n\n\ntheorem get_order_only_valid_items (s: String) :\n\
  \  let result := string_split (get_order s)\n  ∀ item, result.contains item → ∃\
  \ m: MenuItem, to_lower item = toString m := sorry\n\n/--\ninfo: expected1\n-/\n\
  #guard_msgs in\n#eval get_order \"burgerfriesfriesfriesfriesfriespizzasandwichcokefriesburger\"\
  \n\n/--\ninfo: expected2\n-/\n#guard_msgs in\n#eval get_order \"milkshakepizzachickenfriescokeburgerpizzasandwichmilkshakepizza\"\
  \n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
