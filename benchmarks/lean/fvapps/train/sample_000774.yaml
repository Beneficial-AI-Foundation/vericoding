"vc-description": "One day, Tanya was studying graph theory. She is very inquisitive,\
  \ so the following problem soon came to her mind.\nFind the number of undirected\
  \ unweighted connected simple graphs with $N$ vertices (numbered $1$ through $N$)\
  \ and $M$ edges, such that for each $i$ ($2 \\le i \\le N$), the shortest path from\
  \ vertex $1$ to vertex $i$ is unique and its length is equal to $A_i$. In other\
  \ words, for each $i$ ($2 \\le i \\le N$), there should be exactly one path with\
  \ length $A_i$ between vertices $1$ and $i$, and there should be no paths with smaller\
  \ length between these vertices.\nTwo graphs with $N$ vertices are distinct if we\
  \ can find two vertices $u$ and $v$ such that there is an edge between these vertices\
  \ in one graph, but not in the other graph.\nSince the answer could be very large,\
  \ compute it modulo $1,000,000,007$ ($10^9 + 7$).\n\n-----Input-----\n- The first\
  \ line of the input contains a single integer $T$ denoting the number of test cases.\
  \ The description of $T$ test cases follows.\n- The first line of each test case\
  \ contains two space-separated integers $N$ and $M$.\n- The second line contains\
  \ $N - 1$ space-separated integers $A_2, A_3, \\ldots, A_N$.\n\n-----Output-----\n\
  For each test case, print a single line containing one integer ― the number of graphs\
  \ modulo $10^9 + 7$.\n\n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $2 \\\
  le N \\le 10^5$\n- $N-1 \\le M \\le \\mathrm{min}\\left(2\\cdot 10^5, \\frac{N(N-1)}{2}\\\
  right)$\n- $1 \\le A_i \\le N-1$ for each valid $i$\n- the sum of $N$ over all test\
  \ cases does not exceed $2 \\cdot 10^5$\n- the sum of $M$ over all test cases does\
  \ not exceed $2 \\cdot 10^5$\n\n-----Subtasks-----\nSubtask #1 (50 points): $M =\
  \ N-1$\nSubtask #2 (50 points): original constraints\n\n-----Example Input-----\n\
  3\n4 3\n1 2 1\n4 6\n1 2 1\n3 2\n2 2\n\n-----Example Output-----\n2\n0\n0\n\n-----Explanation-----\n\
  Example case 1: The two graphs which satisfy all conditions are:"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_graphs (n : Nat) (m : Nat) (distances : List Nat) : Nat\
  \ :=\n  sorry\n"
"vc-theorems": "theorem result_is_modulo (n : Nat) (distances : List Nat)\n    (h1\
  \ : n ≥ 3) (h2 : distances.length ≥ 1) \n    (h3 : ∀ d ∈ distances, d ≥ 1 ∧ d ≤\
  \ 99) :\n    let result := count_graphs n (n-1) distances\n    0 ≤ result ∧ result\
  \ ≤ 1000000007 :=\n  sorry\n\n\ntheorem valid_distance_one (n : Nat) (h : n ≥ 3)\
  \ :\n    let distances := List.replicate (n-2) 1\n    count_graphs n (n-1) distances\
  \ = 1 :=\n  sorry\n\n\ntheorem invalid_distances_return_zero (n : Nat) (h : n ≥\
  \ 3) :\n    let distances := List.replicate (n-2) n\n    count_graphs n (n-1) distances\
  \ = 0 :=\n  sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval count_graphs 4 3 [1,\
  \ 2, 1]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval count_graphs 4 6 [1, 2, 1]\n\n\
  /--\ninfo: 0\n-/\n#guard_msgs in\n#eval count_graphs 3 2 [2, 2]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
