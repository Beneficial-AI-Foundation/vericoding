"vc-description": "Given two arrays of strings, return the number of times each string\
  \ of the second array appears in the first array.\n\n#### Example\n\n```python\n\
  array1 = ['abc', 'abc', 'xyz', 'cde', 'uvw']\narray2 = ['abc', 'cde', 'uap']\n```\n\
  \nHow many times do the elements in `array2` appear in `array1`? \n\n* `'abc'` appears\
  \ twice in the first array (2)\n* `'cde'` appears only once (1)\n* `'uap'` does\
  \ not appear in the first array (0)\n\nTherefore, `solve(array1, array2) = [2, 1,\
  \ 0]`\n\nGood luck!\n\nIf you like this Kata, please try:\n\n[Word values](https://www.codewars.com/kata/598d91785d4ce3ec4f000018)\n\
  \n[Non-even substrings](https://www.codewars.com/kata/59da47fa27ee00a8b90000b4)"
"vc-preamble": "import Imports.AllImports\n\ndef count {α} [BEq α] (a : α) (xs : List\
  \ α) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve {α} [BEq α] (array1 array2 : List α) : List Nat :=\n\
  \  sorry\n"
"vc-theorems": "theorem solve_properties {α} [BEq α] (array1 array2 : List α) \n \
  \ (h1 : array1 ≠ []) (h2 : array2 ≠ []) :\n  let result := solve array1 array2;\n\
  \  -- Length matches\n  result.length = array2.length\n  -- All counts are non-negative\
  \ (satisfied by Nat type)\n  -- Each count matches actual occurrences\n  ∧ (∀ i\
  \ elem, i < array2.length → array2.get ⟨i, by sorry⟩ = elem → \n      result.get\
  \ ⟨i, by sorry⟩ = count elem array1)\n  -- Count cannot exceed length of array1\n\
  \  ∧ ∀ x ∈ result, x ≤ array1.length :=\n  sorry\n\n\ntheorem solve_identical_arrays\
  \ {α} [BEq α] (array : List α)\n  (h : array ≠ []) :\n  let result := solve array\
  \ array;\n  ∀ i c x, i < array.length → \n    result.get ⟨i, by sorry⟩ = c → \n\
  \    array.get ⟨i, by sorry⟩ = x →\n    c = count x array :=\n  sorry\n\n\ntheorem\
  \ solve_unique_array2 {α} [BEq α] (array1 array2 : List α)\n  (h1 : array1 ≠ [])\
  \ (h2 : array2 ≠ [])\n  (unique : ∀ i j, i < array2.length → j < array2.length →\
  \ i ≠ j → \n    array2.get ⟨i, by sorry⟩ ≠ array2.get ⟨j, by sorry⟩) :\n  solve\
  \ array1 array2 = array2.map (λ x => count x array1) :=\n  sorry\n\n/--\ninfo: [2,\
  \ 1, 0]\n-/\n#guard_msgs in\n#eval solve [\"abc\", \"abc\", \"xyz\", \"abcd\", \"\
  cde\"] [\"abc\", \"cde\", \"uap\"]\n\n/--\ninfo: [2, 1, 2]\n-/\n#guard_msgs in\n\
  #eval solve [\"abc\", \"xyz\", \"abc\", \"xyz\", \"cde\"] [\"abc\", \"cde\", \"\
  xyz\"]\n\n/--\ninfo: [2, 0, 1]\n-/\n#guard_msgs in\n#eval solve [\"quick\", \"brown\"\
  , \"fox\", \"is\", \"quick\"] [\"quick\", \"abc\", \"fox\"]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
