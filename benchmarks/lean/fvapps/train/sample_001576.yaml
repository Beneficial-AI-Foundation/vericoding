"vc-description": "Let's define `increasing` numbers as the numbers whose digits,\
  \ read from left to right, are never less than the previous ones: 234559 is an example\
  \ of increasing number.\n\nConversely, `decreasing` numbers have all the digits\
  \ read from left to right so that no digits is bigger than the previous one: 97732\
  \ is an example of decreasing number.\n\nYou do not need to be the next Gauss to\
  \ figure that all numbers with 1 or 2 digits are either increasing or decreasing:\
  \ 00, 01, 02, ..., 98, 99 are all belonging to one of this categories (if not both,\
  \ like 22 or 55): 101 is indeed the first number which does NOT fall into either\
  \ of the categories. Same goes for all the numbers up to 109, while 110 is again\
  \ a decreasing number.\n\nNow your task is rather easy to declare (a bit less to\
  \ perform): you have to build a function to return the total occurrences of all\
  \ the increasing or decreasing numbers *below* 10 raised to the xth power (x will\
  \ always be >= 0).\n\nTo give you a starting point, there are a grand total of increasing\
  \ and decreasing numbers as shown in the table:\n\n|Total  | Below\n|---------------\n\
  |1      | 1\n|10     | 10\n|100    | 100\n|475    | 1000\n|1675   | 10000\n|4954\
  \   | 100000\n|12952  | 1000000\n\nThis means that your function will have to behave\
  \ like this:\n```python\ntotal_inc_dec(0)==1\ntotal_inc_dec(1)==10\ntotal_inc_dec(2)==100\n\
  total_inc_dec(3)==475\ntotal_inc_dec(4)==1675\ntotal_inc_dec(5)==4954\ntotal_inc_dec(6)==12952\n\
  ```\n\n**Tips:** efficiency and trying to figure out how it works are essential:\
  \ with a brute force approach, some tests with larger numbers may take more than\
  \ the total computing power currently on Earth to be finished in the short allotted\
  \ time.\n\nTo make it even clearer, the increasing or decreasing numbers between\
  \ in the range 101-200 are: [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122,\
  \ 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 136, 137, 138, 139, 144, 145,\
  \ 146, 147, 148, 149, 155, 156, 157, 158, 159, 166, 167, 168, 169, 177, 178, 179,\
  \ 188, 189, 199, 200], that is 47 of them. In the following range, 201-300, there\
  \ are 41 of them and so on, getting rarer and rarer.\n\n**Trivia:** just for the\
  \ sake of your own curiosity, a number which is neither decreasing of increasing\
  \ is called a `bouncy` number, like, say, 3848 or 37294; also, usually 0 is not\
  \ considered being increasing, decreasing or bouncy, but it will be for the purpose\
  \ of this kata"
"vc-preamble": "import Imports.AllImports\n\ndef total_inc_dec (n : Int) : Nat :=\n\
  \  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def xCy (n m : Int) : Int :=\n  sorry\n"
"vc-theorems": "theorem total_inc_dec_non_negative (x : Int) :\n  x ≥ 0 → total_inc_dec\
  \ x ≥ 1 :=\n  sorry\n\n\ntheorem total_inc_dec_negative (x : Int) :\n  x < 0 → total_inc_dec\
  \ x = 0 :=\n  sorry\n\n\ntheorem total_inc_dec_monotonic (x : Int) :\n  x > 0 →\
  \ total_inc_dec x > total_inc_dec (x-1) :=\n  sorry\n\n\ntheorem xCy_non_negative\
  \ (x y : Int) :\n  y ≤ x → xCy x y ≥ 0 :=\n  sorry\n\n\ntheorem xCy_int_valued (x\
  \ y : Int) :\n  y ≤ x → ∃ n : Int, xCy x y = n :=\n  sorry\n\n\ntheorem xCy_symmetry\
  \ (x y : Int) :\n  y ≤ x ∧ y > 0 → xCy x y = xCy x (x-y) :=\n  sorry\n\n\ntheorem\
  \ xCy_invalid (x y : Int) :\n  y > x → xCy x y = 0 :=\n  sorry\n\n/--\ninfo: 1\n\
  -/\n#guard_msgs in\n#eval total_inc_dec 0\n\n/--\ninfo: 475\n-/\n#guard_msgs in\n\
  #eval total_inc_dec 3\n\n/--\ninfo: 4954\n-/\n#guard_msgs in\n#eval total_inc_dec\
  \ 5\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
