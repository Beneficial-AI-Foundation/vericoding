"vc-description": "You are given a sequence a = \\{a_1, ..., a_N\\} with all zeros,\
  \ and a sequence b = \\{b_1, ..., b_N\\} consisting of 0 and 1. The length of both\
  \ is N.\nYou can perform Q kinds of operations. The i-th operation is as follows:\n\
  \ - Replace each of a_{l_i}, a_{l_i + 1}, ..., a_{r_i} with 1.\nMinimize the hamming\
  \ distance between a and b, that is, the number of i such that a_i \\neq b_i, by\
  \ performing some of the Q operations.\n\n-----Constraints-----\n - 1 \\leq N \\\
  leq 200,000\n - b consists of 0 and 1.\n - 1 \\leq Q \\leq 200,000\n - 1 \\leq l_i\
  \ \\leq r_i \\leq N\n - If i \\neq j, either l_i \\neq l_j or r_i \\neq r_j.\n\n\
  -----Input-----\nInput is given from Standard Input in the following format:\nN\n\
  b_1 b_2 ... b_N\nQ\nl_1 r_1\nl_2 r_2\n:\nl_Q r_Q\n\n-----Output-----\nPrint the\
  \ minimum possible hamming distance.\n\n-----Sample Input-----\n3\n1 0 1\n1\n1 3\n\
  \n-----Sample Output-----\n1\n\nIf you choose to perform the operation, a will become\
  \ \\{1, 1, 1\\}, for a hamming distance of 1."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def min_hamming_distance (N : Nat) (b : List Nat) (Q : Nat) (ops\
  \ : List (Nat × Nat)) : Nat :=\nsorry\n"
"vc-theorems": "theorem min_hamming_distance_bounds \n  (N : Nat) (b : List Nat) (Q\
  \ : Nat) (ops : List (Nat × Nat))\n  (h1 : b.length = N)\n  (h2 : ∀ x ∈ b, x = 0\
  \ ∨ x = 1)\n  (h3 : Q > 0)\n  : 0 ≤ min_hamming_distance N b Q ops ∧ \n    min_hamming_distance\
  \ N b Q ops ≤ N :=\nsorry\n\n\ntheorem min_hamming_distance_ones_bound\n  (N : Nat)\
  \ (b : List Nat) (Q : Nat) (ops : List (Nat × Nat))\n  (h1 : b.length = N)\n  (h2\
  \ : ∀ x ∈ b, x = 0 ∨ x = 1)\n  (h3 : Q > 0)\n  : let ones_count := (b.filter (·\
  \ = 1)).length\n    min_hamming_distance N b Q ops ≤ max ones_count (N - ones_count)\
  \ :=\nsorry\n\n\ntheorem min_hamming_distance_all_zeros\n  (N : Nat) (Q : Nat) (ops\
  \ : List (Nat × Nat))\n  (h1 : Q = 1)\n  (h2 : ops = [(1, N)])\n  : min_hamming_distance\
  \ N (List.replicate N 0) Q ops = 0 :=\nsorry\n\n\ntheorem min_hamming_distance_all_ones\n\
  \  (N : Nat) (Q : Nat) (ops : List (Nat × Nat))\n  (h1 : Q = 1)\n  (h2 : ops = [(1,\
  \ N)])\n  : min_hamming_distance N (List.replicate N 1) Q ops ≤ N/2 :=\nsorry\n\n\
  /--\ninfo: 1\n-/\n#guard_msgs in\n#eval min_hamming_distance 3 [1, 0, 1] 1 [(1,\
  \ 3)]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval min_hamming_distance 3 [1, 0, 1]\
  \ 2 [(1, 1), (3, 3)]\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval min_hamming_distance\
  \ 5 [0, 1, 0, 1, 0] 1 [(1, 5)]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
