"vc-description": "Given an array of non-negative integers, you are initially positioned\
  \ at the first index of the array.\n\nEach element in the array represents your\
  \ maximum jump length at that position.\n\nDetermine if you are able to reach the\
  \ last index.\n\nExample 1:\n\n\nInput: [2,3,1,1,4]\nOutput: true\nExplanation:\
  \ Jump 1 step from index 0 to 1, then 3 steps to the last index.\n\n\nExample 2:\n\
  \n\nInput: [3,2,1,0,4]\nOutput: false\nExplanation: You will always arrive at index\
  \ 3 no matter what. Its maximum\n             jump length is 0, which makes it impossible\
  \ to reach the last index."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def can_jump (nums : List Nat) : Bool :=\n  sorry\n"
"vc-theorems": "theorem single_element_always_true (nums : List Nat) :\n  nums.length\
  \ = 1 → can_jump nums = true :=\n  sorry\n\n\ntheorem all_nonzero_jumps_reach_end\
  \ (nums : List Nat) :\n  nums.length > 0 → \n  (∀ i, i < nums.length - 1 → nums[i]!\
  \ > 0) →\n  can_jump nums = true :=\n  sorry\n\n\ntheorem zero_at_start_cant_jump\
  \ (nums : List Nat) :\n  nums.length > 1 →\n  nums[0]! = 0 →\n  can_jump nums =\
  \ false :=\n  sorry\n\n\ntheorem reaching_end_property (nums : List Nat) (i : Nat)\
  \ :\n  i < nums.length - 1 →\n  nums[i]! = 0 →\n  can_jump nums = true →\n  ∃ j,\
  \ j < i ∧ j + nums[j]! > i :=\n  sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n\
  #eval can_jump [2, 3, 1, 1, 4]\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval can_jump\
  \ [3, 2, 1, 0, 4]\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval can_jump [0]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
