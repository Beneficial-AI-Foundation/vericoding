"vc-description": "## Description\n\nGiven an array X of positive integers, its elements\
  \ are to be transformed by running the following operation on them as many times\
  \ as required:\n\n```if X[i] > X[j] then X[i] = X[i] - X[j]```\n\nWhen no more transformations\
  \ are possible, return its sum (\"smallest possible sum\").\n\nFor instance, the\
  \ successive transformation of the elements of input X = [6, 9, 21] is detailed\
  \ below:\n```\nX_1 = [6, 9, 12] # -> X_1[2] = X[2] - X[1] = 21 - 9\nX_2 = [6, 9,\
  \ 6]  # -> X_2[2] = X_1[2] - X_1[0] = 12 - 6\nX_3 = [6, 3, 6]  # -> X_3[1] = X_2[1]\
  \ - X_2[0] = 9 - 6\nX_4 = [6, 3, 3]  # -> X_4[2] = X_3[2] - X_3[1] = 6 - 3\nX_5\
  \ = [3, 3, 3]  # -> X_5[1] = X_4[0] - X_4[1] = 6 - 3\n```\nThe returning output\
  \ is the sum of the final transformation (here 9).\n\n## Example\n\n## Solution\
  \ steps:\n\n## Additional notes:\n\nThere are performance tests consisted of very\
  \ big numbers and arrays of size at least 30000. Please write an efficient algorithm\
  \ to prevent timeout."
"vc-preamble": "import Imports.AllImports\n\ndef List.sum : List Nat → Nat \n  | []\
  \ => 0\n  | h::t => h + sum t\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solution (nums: List Nat) : Nat :=\n  sorry\n\n\n"
"vc-theorems": "theorem solution_divisible_by_length (nums: List Nat) (h: nums.length\
  \ > 0) :\n  solution nums % nums.length = 0 :=\nsorry\n\n\n\n\ntheorem solution_gcd_divides_all\
  \ (nums: List Nat) (h: nums.length > 0) :\n  ∀ n ∈ nums, n % (solution nums / nums.length)\
  \ = 0 :=\nsorry\n\n\ntheorem solution_identical_elements (n: Nat) (len: Nat) (h:\
  \ len > 0) :\n  solution (List.replicate len n) = n * len :=\nsorry\n\n\ntheorem\
  \ solution_single_element (n: Nat) :\n  solution [n] = n :=\nsorry\n\n/--\ninfo:\
  \ 9\n-/\n#guard_msgs in\n#eval solution [6, 9, 21]\n\n/--\ninfo: 12\n-/\n#guard_msgs\
  \ in\n#eval solution [30, 12]\n\n/--\ninfo: 12\n-/\n#guard_msgs in\n#eval solution\
  \ [4, 16, 24]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
