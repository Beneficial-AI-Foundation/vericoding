"vc-description": "You may have tried your level best to help Chef but Dr Doof has\
  \ managed to come up with his masterplan in the meantime. Sadly, you have to help\
  \ Chef once again. Dr Doof has designed a parenthesis-inator. It throws a stream\
  \ of $N$ brackets at the target, $1$ bracket per second. The brackets can either\
  \ be opening or closing. Chef appears in front of the stream at time $t$. If Chef\
  \ faces an opening bracket, he gets hit. However, if he faces a closing bracket,\
  \ he may choose to let it pass through him (Chef is immune to closing brackets).\
  \ Chef gets a chance to counter attack Doof as soon as he finds a balanced non-empty\
  \ bracket sequence. Help Chef by providing him the minimum time $x$ at which he\
  \ will be able to launch his counter attack. If Chef is unable to counter attack,\
  \ answer $-1$.\nFormally, you are given a string $S$ of length $N$ consisting only\
  \ of opening brackets $($ and closing brackets $)$. The substring of $S$ starting\
  \ at index $L$ and ending at index $R$, i.e. $S_L S_{L+1} \\ldots S_{R}$ is denoted\
  \ by $S[L, R]$ . Consider $Q$ cases. In the $i^{\\text{th}}$ case, Chef appears\
  \ at time $t_i$ $(1 \\leq t_i \\leq N)$ and faces all characters from index $t_i$\
  \ to $N$. Find the minimum index $x$ $(t_i \\leq x \\leq N)$ such that the substring\
  \ $S[t_i, x]$ contains a non-empty balanced bracket subsequence containing the same\
  \ number of opening brackets as $S[t_i, x]$ (i.e., you cannot remove any opening\
  \ bracket from the substring). If such an $x$ does not exist, print $-1$.\nA string\
  \ $X$ is called a subsequence of a string $Y$ if it is possible to obtain $X$ by\
  \ erasing some (possibly zero) characters from $Y$ without changing the order of\
  \ the remaining characters.\nA balanced bracket sequence is defined as:  \n- an\
  \ empty string is a balanced bracket sequence.\n- if $s$ is a balanced bracket sequence,\
  \ then so is $(s)$.\n- if $s$ and $t$ are balanced bracket sequences, then so is\
  \ $st$.\n$Note :-$ The input files are large. The use of Fast I/O is recommended.\n\
  \n-----Input-----\n- The first line contains a single integer $T$ denoting the number\
  \ of testcases.\n- The first line of each test case contains the string $S$.\n-\
  \ The next line contains a single integer $Q$ denoting the number of cases to consider.\n\
  - The next line contains $Q$ space separated integers, each denoting $t_i$.\n\n\
  -----Output-----\nFor each query, print the minimum value of $x$ in a separate line.\
  \ If no such $x$ exists, print $-1$.\n\n-----Constraints-----\n- $1 \\leq T \\leq\
  \ 10^3$\n- $1 \\leq |S| \\leq 10^7$\n- $1 \\leq Q \\leq 10^6$\n- $1 \\leq t_i \\\
  leq N$\n- Every character of $S$ is either $($ or $)$.\n- Sum of $|S|$ and $Q$ over\
  \ all testcases for a particular test file does not exceed $10^7$ and $10^6$ respectively.\n\
  \n-----Sample Input-----\n1\n)())((()\n3\n1 7 6\n\n-----Sample Output-----\n3\n\
  8\n-1\n\n-----Explanation-----\nFor the first query, Chef chooses to let $S_1$ pass\
  \ through him, gets hit by $S_2$ and finally completes a balanced bracket sequence\
  \ by adding $S_3$ to $S_2$ at time $x$ = $3$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solveBracketSequence (s : String) (queries : List Nat) : List\
  \ Int := sorry\n\ntheorem arbitrary_brackets_results_valid \n  (s : String) \n \
  \ (queries : List Nat) \n  (h1 : s.length > 0)\n  (h2 : queries.length > 0)\n  (h3\
  \ : ∀ c ∈ s.data, c = '(' ∨ c = ')')\n  (h4 : ∀ q ∈ queries, 0 < q ∧ q ≤ s.length)\
  \ :\n  let result := solveBracketSequence s queries\n  ∀ r ∈ result, -1 ≤ r ∧ r\
  \ ≤ s.length := sorry\n"
"vc-theorems": "theorem arbitrary_brackets_positions_valid\n  (s : String)\n  (queries\
  \ : List Nat)\n  (h1 : s.length > 0)\n  (h2 : queries.length > 0)\n  (h3 : ∀ c ∈\
  \ s.data, c = '(' ∨ c = ')')\n  (h4 : ∀ q ∈ queries, 0 < q ∧ q ≤ s.length) :\n \
  \ let result := solveBracketSequence s queries\n  ∀ (q : Nat) (r : Int),\n    q\
  \ ∈ queries →\n    r ∈ result →\n    r ≠ -1 →\n    s.data[r.toNat - 1]? = some ')'\
  \ ∧ r > q := sorry\n\n\ntheorem all_open_brackets_no_matches\n  (s : String)\n \
  \ (queries : List Nat)\n  (h1 : s.length > 0)\n  (h2 : queries.length > 0)\n  (h3\
  \ : ∀ c ∈ s.data, c = '(')\n  (h4 : ∀ q ∈ queries, 0 < q ∧ q ≤ s.length) :\n  let\
  \ result := solveBracketSequence s queries\n  ∀ r ∈ result, r = -1 := sorry\n\n\n\
  theorem all_close_brackets_no_matches\n  (s : String)\n  (queries : List Nat)\n\
  \  (h1 : s.length > 0)\n  (h2 : queries.length > 0)\n  (h3 : ∀ c ∈ s.data, c = ')')\n\
  \  (h4 : ∀ q ∈ queries, 0 < q ∧ q ≤ s.length) :\n  let result := solveBracketSequence\
  \ s queries\n  ∀ r ∈ result, r = -1 := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
