"vc-description": "Permutation $p$ is a sequence of integers $p=[p_1, p_2, \\dots,\
  \ p_n]$, consisting of $n$ distinct (unique) positive integers between $1$ and $n$,\
  \ inclusive. For example, the following sequences are permutations: $[3, 4, 1, 2]$,\
  \ $[1]$, $[1, 2]$. The following sequences are not permutations: $[0]$, $[1, 2,\
  \ 1]$, $[2, 3]$, $[0, 1, 2]$.\n\nThe important key is in the locked box that you\
  \ need to open. To open the box you need to enter secret code. Secret code is a\
  \ permutation $p$ of length $n$. \n\nYou don't know this permutation, you only know\
  \ the array $q$ of prefix maximums of this permutation. Formally:  $q_1=p_1$,  $q_2=\\\
  max(p_1, p_2)$,  $q_3=\\max(p_1, p_2,p_3)$,  ...  $q_n=\\max(p_1, p_2,\\dots,p_n)$.\
  \ \n\nYou want to construct any possible suitable permutation (i.e. any such permutation,\
  \ that calculated $q$ for this permutation is equal to the given array).\n\n\n-----Input-----\n\
  \nThe first line contains integer number $t$ ($1 \\le t \\le 10^4$) — the number\
  \ of test cases in the input. Then $t$ test cases follow.\n\nThe first line of a\
  \ test case contains one integer $n$ $(1 \\le n \\le 10^{5})$ — the number of elements\
  \ in the secret code permutation $p$.\n\nThe second line of a test case contains\
  \ $n$ integers $q_1, q_2, \\dots, q_n$ $(1 \\le q_i \\le n)$ — elements of the array\
  \ $q$ for secret permutation. It is guaranteed that $q_i \\le q_{i+1}$ for all $i$\
  \ ($1 \\le i < n$).\n\nThe sum of all values $n$ over all the test cases in the\
  \ input doesn't exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, print:\
  \  If it's impossible to find such a permutation $p$, print \"-1\" (without quotes).\
  \  Otherwise, print $n$ distinct integers $p_1, p_2, \\dots, p_n$ ($1 \\le p_i \\\
  le n$). If there are multiple possible answers, you can print any of them. \n\n\n\
  -----Example-----\nInput\n4\n5\n1 3 4 5 5\n4\n1 1 3 4\n2\n2 2\n1\n1\n\nOutput\n\
  1 3 4 5 2 \n-1\n2 1 \n1 \n\n\n\n-----Note-----\n\nIn the first test case of the\
  \ example answer $[1,3,4,5,2]$ is the only possible answer:  $q_{1} = p_{1} = 1$;\
  \  $q_{2} = \\max(p_{1}, p_{2}) = 3$;  $q_{3} = \\max(p_{1}, p_{2}, p_{3}) = 4$;\
  \  $q_{4} = \\max(p_{1}, p_{2}, p_{3}, p_{4}) = 5$;  $q_{5} = \\max(p_{1}, p_{2},\
  \ p_{3}, p_{4}, p_{5}) = 5$. \n\nIt can be proved that there are no answers for\
  \ the second test case of the example."
"vc-preamble": "import Imports.AllImports\n\ndef intList (n : Nat) : List Int := sorry\n\
  \ndef isValidPermutation (n : Nat) (result : List Int) : Bool := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def satisfiesQConstraints (result : List Int) (q : List Int) :\
  \ Bool := sorry \n\ndef solvePermutationCode (n : Nat) (q : List Int) : List Int\
  \ := sorry\n"
"vc-theorems": "theorem single_element_property (n : Nat) :\n  n > 0 → n ≤ 10 →\n\
  \  let q := [Int.ofNat n]\n  let result := solvePermutationCode 1 q\n  result =\
  \ [Int.ofNat n] ∨ result = [-1] := sorry\n\n\ntheorem strictly_increasing_property\
  \ (n : Nat) :\n  n > 0 → n ≤ 10 →\n  let q := intList n\n  let result := solvePermutationCode\
  \ n q\n  isValidPermutation n result = true ∧ \n  satisfiesQConstraints result q\
  \ = true := sorry\n\n/--\ninfo: [1, 3, 4, 5, 2]\n-/\n#guard_msgs in\n#eval solve_permutation_code\
  \ 5 [1, 3, 4, 5, 5]\n\n/--\ninfo: [-1]\n-/\n#guard_msgs in\n#eval solve_permutation_code\
  \ 4 [1, 1, 3, 4]\n\n/--\ninfo: [1]\n-/\n#guard_msgs in\n#eval solve_permutation_code\
  \ 1 [1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
