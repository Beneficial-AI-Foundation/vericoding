"vc-description": "Implement a class/function, which should parse time expressed as\
  \ `HH:MM:SS`, or `null/nil/None` otherwise.\n\nAny extra characters, or minutes/seconds\
  \ higher than 59 make the input invalid, and so should return `null/nil/None`."
"vc-preamble": "import Imports.AllImports\n\ndef toString (h : String) (m : String)\
  \ (s : String) : String := sorry\n\ndef isDigit (s : String) : Bool := sorry\n\n\
  \ndef toSeconds (s : String) : Option Nat := sorry\n\ndef fromNat (n : Nat) : String\
  \ := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isValidTimeFormat (s : String) : Bool := sorry\n\ntheorem valid_time_conversion\
  \ \n  {h : Nat} {m : Nat} {s : Nat}\n  (h_bound : h ≤ 99)\n  (m_bound : m ≤ 59)\
  \ \n  (s_bound : s ≤ 59) :\n  toSeconds (toString (fromNat h) (fromNat m) (fromNat\
  \ s)) = some (h * 3600 + m * 60 + s) :=\nsorry\n"
"vc-theorems": "theorem invalid_format_returns_none\n  (s : String)\n  (h_invalid\
  \ : ¬(isValidTimeFormat s)) :\n  toSeconds s = none :=\nsorry\n\n\ntheorem invalid_hours\n\
  \  (h m s : String)\n  (h_invalid : h.toNat? = some (Nat.succ 99)) :\n  toSeconds\
  \ (toString h m s) = none :=\nsorry\n\n\ntheorem invalid_minutes\n  (h m s : String)\
  \  \n  (m_invalid : m.toNat? = some (Nat.succ 59)) :\n  toSeconds (toString h m\
  \ s) = none :=\nsorry\n\n\ntheorem invalid_seconds\n  (h m s : String)\n  (s_invalid\
  \ : s.toNat? = some (Nat.succ 59)) :\n  toSeconds (toString h m s) = none :=\nsorry\n\
  \n\ntheorem missing_components_none\n  (s : String)\n  (h_missing : ¬(isValidTimeFormat\
  \ s)) :\n  toSeconds s = none :=\nsorry\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval\
  \ to_seconds \"00:00:00\"\n\n/--\ninfo: 3723\n-/\n#guard_msgs in\n#eval to_seconds\
  \ \"01:02:03\"\n\n/--\ninfo: 359999\n-/\n#guard_msgs in\n#eval to_seconds \"99:59:59\"\
  \n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
