"vc-description": "Let's assume that   v(n) is the largest prime number, that does\
  \ not exceed n;\n\n u(n) is the smallest prime number strictly greater than n. \n\
  \nFind $\\sum_{i = 2}^{n} \\frac{1}{v(i) u(i)}$.\n\n\n-----Input-----\n\nThe first\
  \ line contains integer t (1 ≤ t ≤ 500) — the number of testscases. \n\nEach of\
  \ the following t lines of the input contains integer n (2 ≤ n ≤ 10^9).\n\n\n-----Output-----\n\
  \nPrint t lines: the i-th of them must contain the answer to the i-th test as an\
  \ irreducible fraction \"p/q\", where p, q are integers, q > 0.\n\n\n-----Examples-----\n\
  Input\n2\n2\n3\n\nOutput\n1/6\n7/30"
"vc-preamble": "import Imports.AllImports\n\ndef gcd (a b : Int) : Int := sorry\n\n\
  def calc_fraction (n : Int) : Int × Int := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def fraction_to_str (frac : Int × Int) : String := sorry\n\ntheorem\
  \ calc_fraction_valid_output {n : Int} (h : n ≥ 2) : \n  let (num, den) := calc_fraction\
  \ n\n  den > 0 ∧ gcd num.natAbs den.natAbs = 1 := sorry\n"
"vc-theorems": "theorem fraction_to_str_format {n : Int} (h : n ≥ 2) :\n  let frac\
  \ := calc_fraction n\n  let str := fraction_to_str frac\n  ∃ num den : String,\n\
  \    str = num ++ \"/\" ++ den ∧ \n    (frac.1 = String.toInt! num) ∧\n    (frac.2\
  \ = String.toInt! den) := sorry\n\n\ntheorem gcd_properties {a b : Int} (ha : a\
  \ > 0) (hb : b > 0) :\n  let g := gcd a b\n  g > 0 ∧ a % g = 0 ∧ b % g = 0 := sorry\n\
  \n\ntheorem calc_fraction_two :\n  calc_fraction 2 = (1, 6) := sorry\n\n/--\ninfo:\
  \ '1/6'\n-/\n#guard_msgs in\n#eval fraction_to_str calc_fraction(2)\n\n/--\ninfo:\
  \ '7/30'\n-/\n#guard_msgs in\n#eval fraction_to_str calc_fraction(3)\n\n/--\ninfo:\
  \ '5/14'\n-/\n#guard_msgs in\n#eval fraction_to_str calc_fraction(6)\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
