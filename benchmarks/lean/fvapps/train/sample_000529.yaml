"vc-description": "Ram and Shyam are playing a game of Truth and Dare. In this game,\
  \ Shyam will ask Ram to perform tasks of two types:\n- Truth task: Ram has to truthfully\
  \ answer a question.\n- Dare task: Ram has to perform a given task.\nEach task is\
  \ described by an integer. (If a truth task and a dare task are described by the\
  \ same integer, they are still different tasks.) You are given four lists of tasks:\n\
  - $T_{r, 1}, T_{r, 2}, \\dots, T_{r, t_r}$: the truth tasks Ram can perform.\n-\
  \ $D_{r, 1}, D_{r, 2}, \\dots, D_{r, d_r}$: the dare tasks Ram can perform.\n- $T_{s,\
  \ 1}, T_{s, 2}, \\dots, T_{s, t_s}$: the truth tasks Shyam can ask Ram to perform.\n\
  - $D_{s, 1}, D_{s, 2}, \\dots, D_{s, d_s}$: the dare tasks Shyam can ask Ram to\
  \ perform.\nNote that the elements of these lists are not necessarily distinct,\
  \ each task may be repeated any number of times in each list.\nShyam wins the game\
  \ if he can find a task Ram cannot perform. Ram wins if he performs all tasks Shyam\
  \ asks him to. Find the winner of the game.\nLet's take an example where Ram can\
  \ perform truth tasks $3$, $2$ and $5$ and dare tasks $2$ and $100$, and Shyam can\
  \ give him truth tasks $2$ and $3$ and a dare task $100$. We can see that whichever\
  \ truth or dare tasks Shyam asks Ram to perform, Ram can easily perform them, so\
  \ he wins. However, if Shyam can give him dare tasks $3$ and $100$, then Ram will\
  \ not be able to perform dare task $3$, so Shyam wins.\n\n-----Input-----\n- The\
  \ first line of the input contains a single integer $T$ denoting the number of test\
  \ cases. The description of $T$ test cases follows.\n- The first line of each test\
  \ case contains a single integer $t_r$.\n- The second line contains $t_r$ space-separated\
  \ integers $T_{r, 1}, T_{r, 2}, \\dots, T_{r, t_r}$.\n- The third line contains\
  \ a single integer $d_r$.\n- The fourth line contains $d_r$ space-separated integers\
  \ $D_{r, 1}, D_{r, 2}, \\dots, D_{r, d_r}$.\n- The fifth line contains a single\
  \ integer $t_s$.\n- The sixth line contains $t_s$ space-separated integers $T_{s,\
  \ 1}, T_{s, 2}, \\dots, T_{s, t_s}$.\n- The seventh line contains a single integer\
  \ $d_s$.\n- The eighth line contains $d_s$ space-separated integers $D_{s, 1}, D_{s,\
  \ 2}, \\dots, D_{s, d_s}$.\n\n-----Output-----\nFor each test case, print a single\
  \ line containing the string \"yes\" if Ram wins the game or \"no\" otherwise.\n\
  \n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le t_r, d_r, t_s, d_s \\\
  le 100$\n- $1 \\le T_{r, i} \\le 100$ for each valid $i$\n- $1 \\le D_{r, i} \\\
  le 100$ for each valid $i$\n- $1 \\le T_{s, i} \\le 100$ for each valid $i$\n- $1\
  \ \\le D_{s, i} \\le 100$ for each valid $i$\n\n-----Example Input-----\n4\n2\n\
  1 2\n3\n1 3 2\n1\n2\n2\n3 2\n2\n1 2\n3\n1 3 2\n1\n2\n3\n3 2 4\n3\n3 2 5\n2\n2 100\n\
  1\n2\n1\n100\n2\n1 2\n3\n1 3 2\n1\n2\n3\n3 2 2\n\n-----Example Output-----\nyes\n\
  no\nyes\nyes\n\n-----Explanation-----\nExample case 1: Ram's truth tasks are $[1,\
  \ 2]$ and his dare tasks are $[1, 3, 2]$. Shyam's truth tasks are $[2]$ and his\
  \ dare tasks are $[3, 2]$. Ram can perform all tasks Shyam gives him.\nExample case\
  \ 2: Ram's truth tasks are $[1, 2]$ and his dare tasks are $[1, 3, 2]$. Shyam's\
  \ truth tasks are $[2]$ and his dare tasks are $[3, 2, 4]$. If Shyam asks Ram to\
  \ perform dare task $4$, Ram will not be able to do it."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def can_ram_win (tr_list dr_list ts_list ds_list : List Int) :\
  \ String :=\n  sorry\n"
"vc-theorems": "theorem can_ram_win_returns_valid_result (tr_list dr_list ts_list\
  \ ds_list : List Int) :\n  (can_ram_win tr_list dr_list ts_list ds_list = \"yes\"\
  ) ∨\n  (can_ram_win tr_list dr_list ts_list ds_list = \"no\") :=\nsorry\n\n\ntheorem\
  \ ram_wins_implies_tasks_present (tr_list dr_list ts_list ds_list : List Int) :\n\
  \  can_ram_win tr_list dr_list ts_list ds_list = \"yes\" →\n  (∀ t ∈ ts_list, t\
  \ ∈ tr_list) ∧ (∀ d ∈ ds_list, d ∈ dr_list) :=\nsorry\n\n\ntheorem ram_loses_implies_task_missing\
  \ (tr_list dr_list ts_list ds_list : List Int) :\n  can_ram_win tr_list dr_list\
  \ ts_list ds_list = \"no\" →\n  (∃ t ∈ ts_list, t ∉ tr_list) ∨ (∃ d ∈ ds_list, d\
  \ ∉ dr_list) :=\nsorry\n\n\ntheorem empty_required_lists_always_wins (tr_list dr_list\
  \ : List Int) :\n  can_ram_win tr_list dr_list [] [] = \"yes\" :=\nsorry\n\n\ntheorem\
  \ missing_truth_task_loses (tr_list dr_list ts_list ds_list : List Int)\n  (x :\
  \ Int) (h : ts_list ≠ []) (h2 : ∀ t ∈ ts_list, t < x) :\n  can_ram_win tr_list dr_list\
  \ (ts_list ++ [x]) ds_list = \"no\" :=\nsorry\n\n/--\ninfo: 'yes'\n-/\n#guard_msgs\
  \ in\n#eval can_ram_win [1, 2] [1, 3, 2] [2] [3, 2]\n\n/--\ninfo: 'no'\n-/\n#guard_msgs\
  \ in\n#eval can_ram_win [1, 2] [1, 3, 2] [2] [3, 2, 4]\n\n/--\ninfo: 'yes'\n-/\n\
  #guard_msgs in\n#eval can_ram_win [3, 2, 5] [2, 100] [2] [100]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
