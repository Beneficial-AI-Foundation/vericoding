"vc-description": "Given a pattern and a string str, find if str follows the same\
  \ pattern.\n\nHere follow means a full match, such that there is a bijection between\
  \ a letter in pattern and a non-empty word in str.\n\nExample 1:\n\n\nInput: pattern\
  \ = \"abba\", str = \"dog cat cat dog\"\nOutput: true\n\nExample 2:\n\n\nInput:pattern\
  \ = \"abba\", str = \"dog cat cat fish\"\nOutput: false\n\nExample 3:\n\n\nInput:\
  \ pattern = \"aaaa\", str = \"dog cat cat dog\"\nOutput: false\n\nExample 4:\n\n\
  \nInput: pattern = \"abba\", str = \"dog dog dog dog\"\nOutput: false\n\nNotes:\n\
  You may assume pattern contains only lowercase letters, and str contains lowercase\
  \ letters separated by a single space."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def word_pattern (pattern : String) (str: String) : Bool :=\n \
  \ sorry\n"
"vc-theorems": "theorem pattern_length_match\n  (pattern : String)\n  (words : List\
  \ String)\n  (h : pattern.length ≠ words.length) :\n  word_pattern pattern (String.intercalate\
  \ \" \" words) = false :=\n  sorry\n\n\ntheorem repeated_pattern\n  (n : Nat) \n\
  \  (word : String)\n  (h1 : n > 0)\n  (h2 : n ≤ 10) :\n  let pattern := String.mk\
  \ (List.replicate n 'a')\n  word_pattern pattern (String.intercalate \" \" (List.replicate\
  \ n word)) = true :=\n  sorry\n\n\ntheorem bijection  \n  (pattern : String)\n \
  \ (word1 word2 : String)\n  (h1 : pattern.length ≥ 2)\n  (h2 : pattern.length ≤\
  \ 10)\n  (h3 : word1 ≠ word2) :\n  let mapped := pattern.data.map (fun c => if c\
  \ = pattern.data[0]! then word1 else word2)\n  let uniquePatternChars := List.eraseDups\
  \ pattern.data\n  let uniqueMappedWords := List.eraseDups mapped\n  word_pattern\
  \ pattern (String.intercalate \" \" mapped) = \n  (uniquePatternChars.length = uniqueMappedWords.length)\
  \ :=\n  sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval word_pattern \"abba\"\
  \ \"dog cat cat dog\"\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval word_pattern\
  \ \"abba\" \"dog cat cat fish\"\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval word_pattern\
  \ \"aaaa\" \"dog cat cat dog\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
