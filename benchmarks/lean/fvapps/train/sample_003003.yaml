"vc-description": "An array is defined to be `odd-heavy` if it contains at least one\
  \ odd element and every element whose value is `odd` is greater than \nevery even-valued\
  \ element. \n\neg.\n```\nArray [11,4,9,2,8] is odd-heavy \nbecause:- its odd elements\
  \ [11,9] are greater than all the even elements [4,2,8]\n\nArray [11,4,9,2,3,10]\
  \ is not odd-heavy\nbecause:- one of it's even element 10 from [4,2,10] is greater\
  \ than two of its odd elements [9,3] from [ 11,9,3]\n\n```\nwrite a function called\
  \ `isOddHeavy` or `is_odd_heavy` that accepts an integer array and returns `true`\
  \ if the array is `odd-heavy` else return `false`."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isOddHeavy (lst : List Int) : Bool :=\n  sorry\n"
"vc-theorems": "theorem empty_list_not_odd_heavy :\n  isOddHeavy [] = false :=\nsorry\n\
  \n\ntheorem all_evens_not_odd_heavy (lst : List Int) :\n  (lst ≠ []) → (∀ x ∈ lst,\
  \ x % 2 = 0) → isOddHeavy lst = false :=\nsorry\n\n\ntheorem odd_heavy_characterization\
  \ (lst : List Int) :\n  (isOddHeavy lst = true) ↔\n  (∃ x ∈ lst, x % 2 ≠ 0) ∧ \n\
  \  (∀ e ∈ lst, e % 2 = 0 → \n   ∀ o ∈ lst, o % 2 ≠ 0 → o > e) :=\nsorry\n\n/--\n\
  info: True\n-/\n#guard_msgs in\n#eval is_odd_heavy [0, 2, 19, 4, 4]\n\n/--\ninfo:\
  \ False\n-/\n#guard_msgs in\n#eval is_odd_heavy [0, 0, 0, 0]\n\n/--\ninfo: True\n\
  -/\n#guard_msgs in\n#eval is_odd_heavy [-1, -2, 21]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
