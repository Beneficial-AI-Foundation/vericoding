"vc-description": "Chef has an array of N natural numbers most of them are repeated.\
  \ Cheffina challenges chef to find all numbers(in ascending order) whose frequency\
  \ is strictly more than K.\n\n-----Input:-----\n- First-line will contain $T$, the\
  \ number of test cases. Then the test cases follow. \n- Each test case contains\
  \ two lines of input, two integers $N, K$.\n- N space-separated natural numbers.\n\
  \n-----Output:-----\nFor each test case, output in a single line answer.\n\n-----Constraints-----\n\
  - $1 \\leq T \\leq 10$\n- $1 \\leq N, K \\leq 10^5$\n- $1 \\leq arr[i] \\leq 10^5$\n\
  \n-----Sample Input:-----\n1\n5 1\n5 2 1 2 5\n\n-----Sample Output:-----\n2 5"
"vc-preamble": "import Imports.AllImports\n\ndef find_frequent_numbers (n : Nat) (k\
  \ : Nat) (arr : List Nat) : List Nat :=\n  sorry\n\n\ndef count {α} [BEq α] (as\
  \ : List α) (a : α) : Nat :=\n  sorry\n\n\ndef isSorted (l : List Nat) : Prop :=\n\
  \  ∀ i j, i < j → j < l.length → l[i]! ≤ l[j]!\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def uniqueSort (l : List Nat) : List Nat :=\n  sorry\n"
"vc-theorems": "theorem frequent_numbers_properties \n  (n : Nat) (k : Nat) (arr :\
  \ List Nat) \n  (h1 : n = arr.length)\n  (h2 : k ≤ 19)\n  (h3 : ∀ x ∈ arr, 1 ≤ x\
  \ ∧ x ≤ 20) :\n  let result := find_frequent_numbers n k arr\n  -- Result contains\
  \ only numbers appearing more than k times\n  ∀ num ∈ result, count arr num > k\n\
  \  -- All numbers appearing more than k times are in result  \n  ∧ ∀ num ∈ arr,\
  \ count arr num > k → num ∈ result\n  -- Result is sorted\n  ∧ isSorted result\n\
  \  -- All result elements exist in input array\n  ∧ ∀ num ∈ result, num ∈ arr :=\n\
  \  sorry\n\n\ntheorem k_zero_returns_unique\n  (n : Nat) (arr : List Nat)\n  (h1\
  \ : n = arr.length)\n  (h2 : ∀ x ∈ arr, 1 ≤ x ∧ x ≤ 20) :\n  find_frequent_numbers\
  \ n 0 arr = uniqueSort arr :=\n  sorry\n\n\ntheorem large_k_returns_empty\n  (n\
  \ : Nat) (k extra : Nat) (arr : List Nat)\n  (h1 : n = arr.length)\n  (h2 : k =\
  \ n + extra)\n  (h3 : ∀ x ∈ arr, 1 ≤ x ∧ x ≤ 20) :\n  find_frequent_numbers n k\
  \ arr = [] :=\n  sorry\n\n/--\ninfo: [2, 5]\n-/\n#guard_msgs in\n#eval find_frequent_numbers\
  \ 5 1 [5, 2, 1, 2, 5]\n\n/--\ninfo: [1]\n-/\n#guard_msgs in\n#eval find_frequent_numbers\
  \ 6 2 [1, 1, 1, 2, 2, 3]\n\n/--\ninfo: [1, 2, 3, 4]\n-/\n#guard_msgs in\n#eval find_frequent_numbers\
  \ 4 0 [4, 2, 3, 1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
