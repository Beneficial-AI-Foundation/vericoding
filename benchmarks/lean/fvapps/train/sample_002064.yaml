"vc-description": "You are given a set Y of n distinct positive integers y_1, y_2,\
  \ ..., y_{n}.\n\nSet X of n distinct positive integers x_1, x_2, ..., x_{n} is said\
  \ to generate set Y if one can transform X to Y by applying some number of the following\
  \ two operation to integers in X:  Take any integer x_{i} and multiply it by two,\
  \ i.e. replace x_{i} with 2·x_{i}.  Take any integer x_{i}, multiply it by two and\
  \ add one, i.e. replace x_{i} with 2·x_{i} + 1. \n\nNote that integers in X are\
  \ not required to be distinct after each operation.\n\nTwo sets of distinct integers\
  \ X and Y are equal if they are equal as sets. In other words, if we write elements\
  \ of the sets in the array in the increasing order, these arrays would be equal.\n\
  \nNote, that any set of integers (or its permutation) generates itself.\n\nYou are\
  \ given a set Y and have to find a set X that generates Y and the maximum element\
  \ of X is mininum possible.\n\n\n-----Input-----\n\nThe first line of the input\
  \ contains a single integer n (1 ≤ n ≤ 50 000) — the number of elements in Y.\n\n\
  The second line contains n integers y_1, ..., y_{n} (1 ≤ y_{i} ≤ 10^9), that are\
  \ guaranteed to be distinct.\n\n\n-----Output-----\n\nPrint n integers — set of\
  \ distinct integers that generate Y and the maximum element of which is minimum\
  \ possible. If there are several such sets, print any of them.\n\n\n-----Examples-----\n\
  Input\n5\n1 2 3 4 5\n\nOutput\n4 5 2 3 1 \n\nInput\n6\n15 14 3 13 1 12\n\nOutput\n\
  12 13 14 7 3 1 \n\nInput\n6\n9 7 13 17 5 11\n\nOutput\n4 5 2 6 3 1"
"vc-preamble": "import Imports.AllImports\n\ndef List.maximum (l: List Nat) : Nat\
  \ :=\nmatch l with\n| [] => 0\n| (x::xs) => List.foldl Nat.max x xs\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def min_max_generating_set (numbers: List Nat) : List Nat :=\n\
  sorry\n"
"vc-theorems": "theorem one_in_gen_set (numbers: List Nat) (h: numbers ≠ []) : \n\
  \  1 ∈ min_max_generating_set numbers :=\nsorry\n\n\ntheorem max_output_bounded\
  \ (numbers: List Nat) (h: numbers ≠ []) :\n  ∀ x ∈ min_max_generating_set numbers,\
  \ x ≤ List.maximum numbers :=\nsorry\n\n\ntheorem output_size_bounded (numbers:\
  \ List Nat) :\n  List.length (min_max_generating_set numbers) ≤ List.length numbers\
  \ :=\nsorry\n\n/--\ninfo: {1, 2, 3, 4, 5}\n-/\n#guard_msgs in\n#eval set min_max_generating_set(input1)\n\
  \n/--\ninfo: {1, 3, 7, 12, 13, 14}\n-/\n#guard_msgs in\n#eval set min_max_generating_set(input2)\n\
  \n/--\ninfo: {1, 2, 3, 4, 5, 6}\n-/\n#guard_msgs in\n#eval set min_max_generating_set(input3)\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
