"vc-description": "Move the first letter of each word to the end of it, then add \"\
  ay\" to the end of the word. Leave punctuation marks untouched.\n\n## Examples\n\
  \n```python\npig_it('Pig latin is cool') # igPay atinlay siay oolcay\npig_it('Hello\
  \ world !')     # elloHay orldway !\n```\n```C++\npig_it(\"Pig latin is cool\");\
  \   // igPay atinlay siay oolcay\npig_it(\"Hello world !\");       // elloHay orldway\n\
  ```\n```Java\nPigLatin.pigIt('Pig latin is cool'); // igPay atinlay siay oolcay\n\
  PigLatin.pigIt('Hello world !');     // elloHay orldway !\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def pigLatin (s : String) : String := sorry \n\ntheorem pigLatin_word_transform\
  \ {word : String} \n  (h : ∀ c ∈ word.data, c.isAlpha) : \n  word.length > 0 → \n\
  \  pigLatin word = (word.drop 1) ++ (word.take 1) ++ \"ay\" := sorry\n"
"vc-theorems": "theorem pigLatin_word_count {text : String} :\n  text.trim.length\
  \ > 0 →\n  ((pigLatin text).splitOn \" \").length = (text.splitOn \" \").length\
  \ := sorry\n\n\ntheorem pigLatin_preserves_word_count {text : String} :\n  text.length\
  \ > 0 →\n  text.trim.length > 0 →\n  ((pigLatin text).splitOn \" \").length = (text.splitOn\
  \ \" \").length := sorry\n\n\ntheorem pigLatin_word_list_transform {words : List\
  \ String}\n  (h : ∀ w ∈ words, ∀ c ∈ w.data, c.isAlpha) :\n  words.length > 0 →\n\
  \  (String.join words).splitOn \" \" = \n    words.map (λ w => (w.drop 1) ++ (w.take\
  \ 1) ++ \"ay\") := sorry\n\n/--\ninfo: 'igPay atinlay siay oolcay'\n-/\n#guard_msgs\
  \ in\n#eval pig_it \"Pig latin is cool\"\n\n/--\ninfo: 'hisTay siay ymay tringsay'\n\
  -/\n#guard_msgs in\n#eval pig_it \"This is my string\"\n\n/--\ninfo: 'elloHay orldway\
  \ !'\n-/\n#guard_msgs in\n#eval pig_it \"Hello world !\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
