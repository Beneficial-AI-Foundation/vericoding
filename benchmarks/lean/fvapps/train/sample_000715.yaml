"vc-description": "Chef has $N$ markers. There is a cap on each marker. For each valid\
  \ $i$, the $i$-th marker has colour $a_i$. Initially, for each valid $i$, the colour\
  \ of the cap on the $i$-th marker is also $a_i$.\nChef wants to rearrange the caps\
  \ in such a way that no marker has the same colour as its cap. (Obviously, each\
  \ marker must have exactly one cap.) Can he do that? If he can, find one such way\
  \ to rearrange the caps. If there are multiple solutions, you may find any one.\n\
  \n-----Input-----\n- The first line of the input contains a single integer $T$ denoting\
  \ the number of test cases. The description of $T$ test cases follows.\n- The first\
  \ line of each test case contains a single integer $N$.\n- The second line contains\
  \ $N$ space-separated integers $a_1, a_2, \\ldots, a_N$.\n\n-----Output-----\n-\
  \ For each test case:\n- If Chef cannot successfully rearrange the caps, print a\
  \ single line containing the string \"No\" (without quotes).\n- Otherwise, print\
  \ two lines. The first line should contain the string \"Yes\" (without quotes).\
  \ The second line should contain $N$ space-separated integers describing a valid\
  \ rearrangement of caps. For each valid $i$, the $i$-th of these integers should\
  \ denote the final colour of the cap on the $i$-th marker.\n\n-----Constraints-----\n\
  - $1 \\le T \\le 10$\n- $1 \\le N \\le 10^5$\n- $1 \\le a_i \\le 10^9$ for each\
  \ valid $i$\n\n-----Example Input-----\n2\n9\n1 1 1 2 2 2 3 3 3\n2\n1 1\n\n-----Example\
  \ Output-----\nYes\n2 2 2 3 3 3 1 1 1\nNo"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def rearrange_caps (nums: List Nat) : Option (List Nat) := sorry\n\
  \ntheorem rearrange_caps_length {nums : List Nat} {result : List Nat} \n  (h : rearrange_caps\
  \ nums = some result) : \n  result.length = nums.length := sorry\n"
"vc-theorems": "theorem rearrange_caps_different_positions {nums : List Nat} {result\
  \ : List Nat}\n  (h : rearrange_caps nums = some result) :\n  ∀ (i : Fin nums.length),\
  \ result.get ⟨i, by rw [rearrange_caps_length h]; exact i.2⟩ ≠ nums.get i := sorry\n\
  \n\ntheorem rearrange_caps_same_elements {nums : List Nat} {result : List Nat}\n\
  \  (h : rearrange_caps nums = some result) :\n  ∀ x, List.countP (· = x) nums =\
  \ List.countP (· = x) result := sorry\n\n\ntheorem rearrange_caps_none_if_majority\
  \ {nums : List Nat} {n : Nat}\n  (h : List.countP (· = n) nums > nums.length / 2)\
  \ :\n  rearrange_caps nums = none := sorry\n\n\ntheorem rearrange_caps_output_valid\
  \ {nums : List Nat} {result : List Nat}\n  (h : rearrange_caps nums = some result)\
  \ :\n  ∀ x, List.countP (· = x) nums = List.countP (· = x) result := sorry\n\n\n\
  theorem rearrange_caps_two_elems {a b : Nat} :\n  rearrange_caps [a, b] = if a =\
  \ b \n    then none\n    else some [b, a] := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
