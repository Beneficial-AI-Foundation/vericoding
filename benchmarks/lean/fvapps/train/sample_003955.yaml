"vc-description": "**This Kata is intended as a small challenge for my students**\n\
  \nAll Star Code Challenge #16\n\nCreate a function called noRepeat() that takes\
  \ a string argument and returns a single letter string of the **first** not repeated\
  \ character in the entire string.\n\n``` haskell\nnoRepeat \"aabbccdde\" `shouldBe`\
  \ 'e'\nnoRepeat \"wxyz\"      `shouldBe` 'w'\nnoRepeat \"testing\"   `shouldBe`\
  \ 'e'\n```\n\nNote:\nONLY letters from the english alphabet will be used as input\n\
  There will ALWAYS be at least one non-repeating letter in the input string"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def no_repeat (s : String) : Option Char := sorry\n\n/-- If a string\
  \ has any character that appears exactly once,\n    then the result of no_repeat\
  \ is a character from the string\n    that appears exactly once -/"
"vc-theorems": "theorem no_repeat_in_string (s : String) (h : ∃ c, s.data.count c\
  \ = 1) :\n  let result := no_repeat s\n  match result with\n  | none => False\n\
  \  | some c => c ∈ s.data ∧ s.data.count c = 1 := sorry\n\n/-- If a string has any\
  \ character that appears exactly once,\n    then no_repeat returns the first such\
  \ character in the string -/\n\ntheorem no_repeat_first_single (s : String) (h :\
  \ ∃ c, s.data.count c = 1) :\n  let result := no_repeat s\n  match result with\n\
  \  | none => False\n  | some c => ∀ c', c' ∈ s.data → s.data.count c' = 1 →\n  \
  \           s.data.indexOf c' ≥ s.data.indexOf c := sorry\n\n/-- If a string has\
  \ no characters that appear exactly once,\n    then no_repeat returns none -/\n\n\
  theorem no_repeat_no_singles (s : String) (h : ∀ c, c ∈ s.data → s.data.count c\
  \ ≠ 1) :\n  no_repeat s = none := sorry\n\n/--\ninfo: 'e'\n-/\n#guard_msgs in\n\
  #eval no_repeat \"aabbccdde\"\n\n/--\ninfo: 'w'\n-/\n#guard_msgs in\n#eval no_repeat\
  \ \"wxyz\"\n\n/--\ninfo: 'e'\n-/\n#guard_msgs in\n#eval no_repeat \"testing\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
