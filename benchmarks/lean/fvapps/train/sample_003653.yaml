"vc-description": "In computer science, cycle detection is the algorithmic problem\
  \ of finding a cycle in a sequence of iterated function values.\n\nFor any function\
  \ ƒ, and any initial value x0 in S, the sequence of iterated function values\n\n\
  \    x0,x1=f(x0), x2=f(x1), ...,xi=f(x{i-1}),...\n\nmay eventually use the same\
  \ value twice under some assumptions: S finite, f periodic ... etc. So there will\
  \ be some `i ≠ j` such that `xi = xj`. Once this happens, the sequence must continue\
  \ by repeating the cycle of values from `xi to xj−1`. Cycle detection is the problem\
  \ of finding `i` and `j`, given `ƒ` and `x0`. Let `μ` be the smallest index such\
  \ that the value associated will reappears and `λ` the smallest value such that\
  \ `xμ = xλ+μ, λ` is the loop length.\n\nExample:\n\nConsider the sequence: \n```\n\
  2, 0, 6, 3, 1, 6, 3, 1, 6, 3, 1, ....\n```\n\nThe cycle in this value sequence is\
  \ 6, 3, 1.\nμ is 2 (first 6)\nλ is 3 (length of the sequence or difference between\
  \ position of consecutive 6).\n\nThe goal of this kata is to build a function that\
  \ will return `[μ,λ]` when given a short sequence. Simple loops will be sufficient.\
  \ The sequence will be given in the form of an array. All array will be valid sequence\
  \ associated with deterministic function. It means that the sequence will repeat\
  \ itself when a value is reached a second time. (So you treat two cases: non repeating\
  \ [1,2,3,4] and repeating [1,2,1,2], no hybrid cases like [1,2,1,4]). If there is\
  \ no repetition you should return []. \n\n\nThis kata is followed by two other cycle\
  \ detection algorithms: \nLoyd's: http://www.codewars.com/kata/cycle-detection-floyds-tortoise-and-the-hare\n\
  Bret's: http://www.codewars.com/kata/cycle-detection-brents-tortoise-and-hare"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def cycle (s : List Int) : List Int := sorry\n\n\n\n\n\ntheorem\
  \ cycle_empty_for_short_sequences {s : List Int} \n  (h : s.length ≤ 1) :\n  cycle\
  \ s = [] := sorry"
"vc-theorems": "/--\ninfo: [0, 3]\n-/\n#guard_msgs in\n#eval cycle [2, 3, 4, 2, 3,\
  \ 4]\n\n/--\ninfo: [1, 3]\n-/\n#guard_msgs in\n#eval cycle [1, 2, 3, 4, 2, 3, 4]\n\
  \n/--\ninfo: [0, 1]\n-/\n#guard_msgs in\n#eval cycle [1, 1, 1, 1, 1]\n\n/--\ninfo:\
  \ []\n-/\n#guard_msgs in\n#eval cycle []\n\n/--\ninfo: []\n-/\n#guard_msgs in\n\
  #eval cycle [7]\n\n/--\ninfo: []\n-/\n#guard_msgs in\n#eval cycle [1, 2, 3, 4]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
