"vc-description": "We are still with squared integers.\n\nGiven 4 integers `a, b,\
  \ c, d` we form the sum of the squares of `a` and `b`\nand then the sum of the squares\
  \ of `c` and `d`. We multiply the two sums hence a number `n` and we try to\ndecompose\
  \ `n` in a sum of two squares `e` and `f` (e and f integers >= 0) so that `n = e²\
  \ + f²`. \n\nMore: `e` and `f` must result only from sums (or differences) of products\
  \ between on the one hand `(a, b)` and on the other `(c, d)` each of `a, b, c, d`\
  \ taken only once. \nFor example, \nprod2sum(1, 2, 1, 3) should return [[1, 7],\
  \ [5, 5]]) \nbecause \n```\n1==1*3-1*2\n7==2*3+1*1\n5==1*2+1*3\n```\nSuppose we\
  \ have `a = 1, b = 2, c = 1, d = 3`. First we calculate the sums \n`1² + 2² = 5\
  \ and 1² + 3² = 10` hence `n = 50`.\n\n\n\n`50 = 1² + 7² or 50 = 7² + 1²` (we'll\
  \ consider that these two solutions are the same)\nor `50 = 5² + 5²`. \n\nThe return\
  \ of our function will be an array of subarrays (in C an array of Pairs) sorted\
  \ on the first elements of the subarrays. In each subarray the lower element should\
  \ be the first.\n\n`prod2sum(1, 2, 1, 3) should return [[1, 7], [5, 5]]`\n\n`prod2sum(2,\
  \ 3, 4, 5) should return  [[2, 23], [7, 22]]`\n\nbecause `(2² + 3²) * (4² + 5²)\
  \ = 533 = (7² + 22²) = (23² + 2²)`\n\n`prod2sum(1, 2, 2, 3) should return  [[1,\
  \ 8], [4, 7]]`\n\n`prod2sum(1, 1, 3, 5) should return  [[2, 8]]` (there are not\
  \ always 2 solutions).\n\n##Hint\nTake a sheet of paper and with a bit of algebra\
  \ try to write the product of squared numbers in another way."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def prod2sum (a b c d: Int) : List (List Int) :=\n  sorry\n"
"vc-theorems": "theorem prod2sum_output_length (a b c d : Int) :\n  let result :=\
  \ prod2sum a b c d\n  1 ≤ result.length ∧ result.length ≤ 2 := sorry\n\n\ntheorem\
  \ prod2sum_sublist_length (a b c d : Int) :\n  let result := prod2sum a b c d\n\
  \  ∀ sublist ∈ result, sublist.length = 2 := sorry\n\n\ntheorem prod2sum_nonneg_values\
  \ (a b c d : Int) :\n  let result := prod2sum a b c d\n  ∀ sublist ∈ result, ∀ x\
  \ ∈ sublist, 0 ≤ x := sorry\n\n\ntheorem prod2sum_sublists_sorted (a b c d : Int)\
  \ :\n  let result := prod2sum a b c d\n  ∀ sublist ∈ result, (sublist.get! 0) ≤\
  \ (sublist.get! 1) := sorry\n\n\ntheorem prod2sum_list_sorted (a b c d : Int) :\n\
  \  let result := prod2sum a b c d\n  result.length = 2 → (result.get! 0) ≤ (result.get!\
  \ 1) := sorry\n\n\ntheorem prod2sum_reversible (a b c d : Int) :\n  (prod2sum a\
  \ b c d).length = (prod2sum c d a b).length := sorry\n\n/--\ninfo: [[1, 7], [5,\
  \ 5]]\n-/\n#guard_msgs in\n#eval prod2sum 1 2 1 3\n\n/--\ninfo: [[2, 23], [7, 22]]\n\
  -/\n#guard_msgs in\n#eval prod2sum 2 3 4 5\n\n/--\ninfo: [[2, 8]]\n-/\n#guard_msgs\
  \ in\n#eval prod2sum 1 1 3 5\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
