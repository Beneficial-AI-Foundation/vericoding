"vc-description": "The faculty of application management and consulting services (FAMCS)\
  \ of the Berland State University (BSU) has always been popular among Berland's\
  \ enrollees. This year, N students attended the entrance exams, but no more than\
  \ K will enter the university. In order to decide who are these students, there\
  \ are series of entrance exams. All the students with score strictly greater than\
  \ at least (N-K) students' total score gets enrolled.\nIn total there are E entrance\
  \ exams, in each of them one can score between 0 and M points, inclusively. The\
  \ first E-1 exams had already been conducted, and now it's time for the last tribulation.\n\
  Sergey is the student who wants very hard to enter the university, so he had collected\
  \ the information about the first E-1 from all N-1 enrollees (i.e., everyone except\
  \ him). Of course, he knows his own scores as well.\nIn order to estimate his chances\
  \ to enter the University after the last exam, Sergey went to a fortune teller.\
  \ From the visit, he learnt about scores that everyone except him will get at the\
  \ last exam. Now he wants to calculate the minimum score he needs to score in order\
  \ to enter to the university. But now he's still very busy with minimizing the amount\
  \ of change he gets in the shops, so he asks you to help him.\n\n-----Input-----\n\
  The first line of the input contains an integer T denoting the number of test cases.\
  \ The description of T test cases follows.\nThe first line of each test case contains\
  \ four space separated integers N, K, E, M denoting the number of students, the\
  \ maximal number of students who'll get enrolled, the total number of entrance exams\
  \ and maximal number of points for a single exam, respectively.\nThe following N-1\
  \ lines will contain E integers each, where the first E-1 integers correspond to\
  \ the scores of the exams conducted. The last integer corresponds to the score at\
  \ the last exam, that was predicted by the fortune-teller.\nThe last line contains\
  \ E-1 integers denoting Sergey's score for the first E-1 exams.\n\n-----Output-----\n\
  \nFor each test case, output a single line containing the minimum score Sergey should\
  \ get in the last exam in order to be enrolled. If Sergey doesn't have a chance\
  \ to be enrolled, output \"Impossible\" (without quotes).\n\n-----Constraints-----\n\
  \n- 1 ≤ T ≤ 5\n- 1 ≤ K < N ≤ 104\n- 1 ≤ M ≤ 109\n- 1 ≤ E ≤ 4\n\n-----Example-----\n\
  Input:1\n4 2 3 10\n7 7 7\n4 6 10\n7 10 9\n9 9\n\nOutput:4\n\n-----Explanation-----\n\
  Example case 1. If Sergey gets 4 points at the last exam, his score will be equal\
  \ to 9+9+4=22. This will be the second score among all the enrollees - the first\
  \ one will get 21, the second one will get 20 and the third will have the total\
  \ of 26. Thus, Sergey will enter the university."
"vc-preamble": "import Imports.AllImports\n\ndef List.sum (xs : List Nat) : Nat :=\n\
  match xs with\n| [] => 0\n| x::xs => x + List.sum xs\n\n\ndef List.sortBy (lt :\
  \ α → α → Bool) (xs : List α) : List α :=\nmatch xs with\n| [] => []\n| [x] => [x]\n\
  | x::xs => x::xs -- stub implementation to avoid termination issues\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calculate_min_score (n k e m : Nat) (other_scores : List (List\
  \ Nat)) (sergey_scores : List Nat) : Nat ⊕ Unit :=\nsorry\n"
"vc-theorems": "theorem min_score_bounded {n k e m : Nat} {other_scores : List (List\
  \ Nat)} {sergey_scores : List Nat}\n  (h1 : n ≥ 2)\n  (h2 : k < n)\n  (h3 : k ≥\
  \ 1) \n  (h4 : e ≥ 2)\n  (h5 : m ≥ 1)\n  (h6 : calculate_min_score n k e m other_scores\
  \ sergey_scores = .inl score)\n  : 0 ≤ score ∧ score ≤ m :=\nsorry\n\n\ntheorem\
  \ min_score_achieves_position {n k e m : Nat} {other_scores : List (List Nat)} {sergey_scores\
  \ : List Nat}\n  (h1 : n ≥ 2)\n  (h2 : k < n)\n  (h3 : k ≥ 1)\n  (h4 : e ≥ 2)\n\
  \  (h5 : m ≥ 1)\n  (h6 : calculate_min_score n k e m other_scores sergey_scores\
  \ = .inl score)\n  : let sergey_total := score + List.sum sergey_scores\n    let\
  \ other_totals := (other_scores.map List.sum).sortBy (fun x y => x > y)\n    List.length\
  \ (other_totals.filter (fun x => x > sergey_total)) < k :=\nsorry\n\n/--\ninfo:\
  \ 4\n-/\n#guard_msgs in\n#eval calculate_min_score 4 2 3 10 [[7, 7, 7], [4, 6, 10],\
  \ [7, 10, 9]] [9, 9]\n\n/--\ninfo: 'Impossible'\n-/\n#guard_msgs in\n#eval calculate_min_score\
  \ 3 1 2 5 [[5, 5], [5, 5]] [0]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval calculate_min_score\
  \ 3 2 2 10 [[5, 1], [1, 1]] [10]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
