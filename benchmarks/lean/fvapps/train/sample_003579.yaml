"vc-description": "Hello! Your are given x and y and 2D array size tuple (width, height)\
  \ and you have to:\nCalculate the according index in 1D space (zero-based). \nDo\
  \ reverse operation.\n\nImplement:\nto_1D(x, y, size):\n  --returns index in 1D\
  \ space\nto_2D(n, size)\n  --returns x and y in 2D space\n\n1D array: [0, 1, 2,\
  \ 3, 4, 5, 6, 7, 8]\n2D array: [[0 -> (0,0), 1 -> (1,0), 2 -> (2,0)], \n       \
  \    [3 -> (0,1), 4 -> (1,1), 5 -> (2,1)], \n           [6 -> (0,2), 7 -> (1,2),\
  \ 8 -> (2,2)]]\n\n\nto_1D(0, 0, (3,3)) returns 0\nto_1D(1, 1, (3,3)) returns 4\n\
  to_1D(2, 2, (3,3)) returns 8\nto_2D(5, (3,3)) returns (2,1)\nto_2D(3, (3,3)) returns\
  \ (0,1)\n\nAssume all input are valid:\n\n1 < width  < 500; \n1 < height < 500"
"vc-preamble": "import Imports.AllImports\n\ndef to_1D (x y : Nat) (size : Nat × Nat)\
  \ : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def to_2D (idx : Nat) (size : Nat × Nat) : Nat × Nat :=\n  sorry\n"
"vc-theorems": "theorem to_1D_to_2D_roundtrip (x y width height : Nat) (h1 : width\
  \ > 0) (h2 : height > 0) :\n  let size := (width, height)\n  let x' := x % width\n\
  \  let y' := y % height\n  let (x2, y2) := to_2D (to_1D x' y' size) size\n  x2 =\
  \ x' ∧ y2 = y' :=\n  sorry\n\n\ntheorem to_2D_to_1D_roundtrip (idx width height\
  \ : Nat) (h1 : width > 0) (h2 : height > 0) :\n  let size := (width, height)\n \
  \ let idx' := idx % (width * height)\n  let (x, y) := to_2D idx' size\n  to_1D x\
  \ y size = idx' :=\n  sorry\n\n\ntheorem to_1D_bounds (x y width height : Nat) (h1\
  \ : width > 0) (h2 : height > 0) :\n  let size := (width, height)\n  let x' := x\
  \ % width\n  let y' := y % height\n  let idx := to_1D x' y' size\n  0 ≤ idx ∧ idx\
  \ < width * height :=\n  sorry\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval to_1D\
  \ 0 0 (3, 3)\n\n/--\ninfo: (0, 0)\n-/\n#guard_msgs in\n#eval to_2D 0 (3, 3)\n\n\
  /--\ninfo: 4\n-/\n#guard_msgs in\n#eval to_1D 1 1 (3, 3)\n\n/--\ninfo: (1, 1)\n\
  -/\n#guard_msgs in\n#eval to_2D 4 (3, 3)\n\n/--\ninfo: 14\n-/\n#guard_msgs in\n\
  #eval to_1D 2 3 (4, 6)\n\n/--\ninfo: (2, 3)\n-/\n#guard_msgs in\n#eval to_2D 14\
  \ (4, 6)\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
