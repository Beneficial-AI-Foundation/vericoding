"vc-description": "We have three stones at points (0, 0), (1,0), and (0,1) on a two-dimensional\
  \ plane.\nThese three stones are said to form an L when they satisfy the following\
  \ conditions:\n - Each of the stones is at integer coordinates.\n - Each of the\
  \ stones is adjacent to another stone. (That is, for each stone, there is another\
  \ stone whose distance from that stone is 1.)\n - The three stones do not lie on\
  \ the same line.\nParticularly, the initial arrangement of the stone - (0, 0), (1,0),\
  \ and (0,1) - forms an L.\nYou can do the following operation any number of times:\
  \ choose one of the stones and move it to any position. However, after each operation,\
  \ the stones must form an L.\nYou want to do as few operations as possible to put\
  \ stones at points (ax, ay), (bx, by), and (cx, cy). How many operations do you\
  \ need to do this?\nIt is guaranteed that the desired arrangement of stones - (ax,\
  \ ay), (bx, by), and (cx, cy) - forms an L. Under this condition, it is always possible\
  \ to achieve the objective with a finite number of operations.\nYou will be given\
  \ T cases of this problem. Solve each of them.\n\n-----Notes-----\nWe assume that\
  \ the three stones are indistinguishable. For example, the stone that is initially\
  \ at point (0,0) may be at any of the points (ax, ay), (bx, by), and (cx, cy) in\
  \ the end.\n\n-----Constraints-----\n - 1 \\leq T \\leq 10^3\n - |ax|,|ay|,|bx|,|by|,|cx|,|cy|\
  \ \\leq 10^9\n - The desired arrangement of stones - (ax, ay), (bx, by), and (cx,\
  \ cy) - forms an L.\n\n-----Input-----\nInput is given from Standard Input in the\
  \ following format:\nT\n\\text{case}_1\n\\vdots\n\\text{case}_T\n\nEach case is\
  \ in the following format:\nax ay bx by cx cy\n\n-----Output-----\nPrint T values.\
  \ The i-th value should be the minimum number of operations for \\text{case}_i.\n\
  \n-----Sample Input-----\n1\n3 2 2 2 2 1\n\n-----Sample Output-----\n4\n\nLet us\
  \ use # to represent a stone.\nYou can move the stones to the specified positions\
  \ with four operations, as follows:\n....    ....    ....    ..#.    ..##\n#...\
  \ -> ##.. -> .##. -> .##. -> ..#.\n##..    .#..    .#..    ....    ....\n"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve (ax ay bx b_y cx c_y : Int) : Nat := sorry\n\ntheorem\
  \ solve_non_negative (ax ay bx b_y cx c_y : Int) :\n  solve ax ay bx b_y cx c_y\
  \ â‰¥ 0 := sorry\n\n\n"
"vc-theorems": "theorem solve_symmetric_ab (ax ay bx b_y cx c_y : Int) :\n  solve\
  \ ax ay bx b_y cx c_y = solve bx b_y ax ay cx c_y := sorry\n\n\ntheorem solve_symmetric_bc\
  \ (ax ay bx b_y cx c_y : Int) :\n  solve ax ay bx b_y cx c_y = solve ax ay cx c_y\
  \ bx b_y := sorry\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval solve 3 2 2 2 2 1\n\
  \n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval solve 0 0 1 0 0 1\n\n/--\ninfo: 1\n-/\n\
  #guard_msgs in\n#eval solve 1 0 0 1 1 1\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded_and_plausible"
