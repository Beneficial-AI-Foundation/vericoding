"vc-description": "## Number of people in the bus\nThere is a bus moving in the city,\
  \ and it takes and drop some people in each bus stop.\n\nYou are provided with a\
  \ list (or array) of integer arrays (or tuples). Each integer array has two items\
  \ which represent number of people get into bus (The first item) and number of people\
  \ get off the bus (The second item) in a bus stop.\n\nYour task is to return number\
  \ of people who are still in the bus after the last bus station (after the last\
  \ array). Even though it is the last bus stop, the bus is not empty and some people\
  \ are still in the bus, and they are probably sleeping there :D \n\nTake a look\
  \ on the test cases.\n\nPlease keep in mind that the test cases ensure that the\
  \ number of people in the bus is always >= 0. So the return integer can't be negative.\n\
  \nThe second value in the first integer array is 0, since the bus is empty in the\
  \ first bus stop."
"vc-preamble": "import Imports.AllImports\n\ndef List.sum : List Int → Int\n| [] =>\
  \ 0\n| (x :: xs) => x + sum xs\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def number (stops : List (Int × Int)) : Int :=\n  sorry\n"
"vc-theorems": "theorem bus_stops_non_negative (stops : List (Int × Int)) \n  (h :\
  \ ∀ s ∈ stops, s.1 ≥ 0 ∧ s.2 ≥ 0 ∧ s.1 ≥ s.2) : \n  number stops ≥ 0 :=\n  sorry\n\
  \n\ntheorem zero_passengers (stops : List (Int × Int))\n  (h : ∀ s ∈ stops, s.1\
  \ = 0 ∧ s.2 = 0) :\n  number stops = 0 :=\n  sorry\n\n\ntheorem sum_equals_difference\
  \ (stops : List (Int × Int))\n  (h : ∀ s ∈ stops, s.1 ≥ 0 ∧ s.2 ≥ 0 ∧ s.1 ≥ s.2)\
  \ :\n  number stops = List.sum (stops.map (fun s => s.1 - s.2)) :=\n  sorry\n\n\
  /--\ninfo: 5\n-/\n#guard_msgs in\n#eval number [[10, 0], [3, 5], [5, 8]]\n\n/--\n\
  info: 17\n-/\n#guard_msgs in\n#eval number [[3, 0], [9, 1], [4, 10], [12, 2], [6,\
  \ 1], [7, 10]]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval number [[0, 0]]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
