"vc-description": "This series of katas will introduce you to basics of doing geometry\
  \ with computers.\n\n`Point` objects have `x`, `y`,  and `z` attributes. For Haskell\
  \ there are `Point` data types described with record syntax with fields `x`, `y`,\
  \ and `z`.\n\nWrite a function calculating distance between `Point a` and `Point\
  \ b`.\n\nTests round answers to 6 decimal places. Tests in Haskell will not round."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def distance_between_points (p1 p2 : Point) : Float :=\n  sorry\n"
"vc-theorems": "theorem distance_symmetric (p1 p2 : Point) :\n  distance_between_points\
  \ p1 p2 = distance_between_points p2 p1 :=\n  sorry\n\n\ntheorem distance_to_self\
  \ (p : Point) :\n  distance_between_points p p = 0 :=\n  sorry\n\n\ntheorem triangle_inequality\
  \ (p1 p2 p3 : Point) :\n  distance_between_points p1 p3 â‰¤ \n  distance_between_points\
  \ p1 p2 + distance_between_points p2 p3 :=\n  sorry\n\n\ntheorem distance_matches_formula\
  \ (p1 p2 : Point) :\n  distance_between_points p1 p2 = \n  Float.sqrt ((p2.x - p1.x)^2\
  \ + (p2.y - p1.y)^2 + (p2.z - p1.z)^2) :=\n  sorry\n\n/--\ninfo: 5.196152\n-/\n\
  #guard_msgs in\n#eval distance_between_points Point(1, 2, 3) Point(4, 5, 6)\n\n\
  /--\ninfo: 1.732051\n-/\n#guard_msgs in\n#eval distance_between_points Point(0,\
  \ 0, 0) Point(1, 1, 1)\n\n/--\ninfo: 3.464102\n-/\n#guard_msgs in\n#eval distance_between_points\
  \ Point(-1, -1, -1) Point(1, 1, 1)\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
