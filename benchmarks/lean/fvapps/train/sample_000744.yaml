"vc-description": "You are given two binary strings $S$ and $P$, each with length\
  \ $N$. A binary string contains only characters '0' and '1'. For each valid $i$,\
  \ let's denote the $i$-th character of $S$ by $S_i$.\nYou have to convert the string\
  \ $S$ into $P$ using zero or more operations. In one operation, you should choose\
  \ two indices $i$ and $j$ ($1 \\leq i < j \\leq N$) such that $S_i$ is '1' and $S_j$\
  \ is '0', and swap $S_i$ with $S_j$.\nDetermine if it is possible to convert $S$\
  \ into $P$ by performing some operations.\n\n-----Input-----\n- The first line of\
  \ the input contains a single integer $T$ denoting the number of test cases. The\
  \ description of $T$ test cases follows.\n- The first line of each test case contains\
  \ a single integer $N$.\n- The second line contains a single string $S$.\n- The\
  \ third line contains a single string $P$.\n\n-----Output-----\nFor each test case,\
  \ print a single line containing the string \"Yes\" if it is possible to convert\
  \ $S$ into $P$ or \"No\" otherwise (without quotes).\n\n-----Constraints-----\n\
  - $1 \\leq T \\leq 10^5$\n- $1 \\leq N \\leq 10^5$\n- $S$ and $P$ contain only characters\
  \ '0' and '1'\n- the sum of $N$ over all test cases does not exceed $10^5$\n\n-----Subtasks-----\n\
  Subtask #1 (20 points):\n- $N \\leq 14$\n- the sum of $N$ over all test cases does\
  \ not exceed $100$\nSubtask #2 (30 points): the sum of $N$ over all test cases does\
  \ not exceed $1,000$\nSubtask #3 (50 points): original constraints\n\n-----Example\
  \ Input-----\n3\n2\n00\n00\n3\n101\n010\n4\n0110\n0011\n\n-----Example Output-----\n\
  Yes\nNo\nYes\n\n-----Explanation-----\nExample case 1: The strings are already equal.\n\
  Example case 2: It can be showed that it is impossible to convert $S$ into $P$.\n\
  Example case 3: You can swap $S_2$ with $S_4$. The strings will then be equal."
"vc-preamble": "import Imports.AllImports\n\ndef can_convert_binary_strings (s p :\
  \ String) : String := sorry\n\ndef count_ones (s : String) : Nat := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def has_adjacent_ones (s : String) : Bool := sorry\n\ntheorem same_string_convertible\
  \ (s : String) \n  (h : s ≠ \"\") : \n  can_convert_binary_strings s s = \"Yes\"\
  \ :=\nsorry\n"
"vc-theorems": "theorem conversion_preserves_ones (s p : String)\n  (h1 : s ≠ \"\"\
  ) (h2 : p ≠ \"\")\n  (h3 : s.length = p.length) :\n  (can_convert_binary_strings\
  \ s p = \"Yes\") ↔ (count_ones s = count_ones p) :=\nsorry\n\n\ntheorem cannot_convert_ones_to_zeros\
  \ (s p : String)\n  (h1 : s ≠ \"\") \n  (h2 : s.length = p.length)\n  (h3 : has_adjacent_ones\
  \ s = true)\n  (h4 : p = s.replace \"11\" \"00\") :\n  can_convert_binary_strings\
  \ s p = \"No\" :=\nsorry\n\n/--\ninfo: 'Yes'\n-/\n#guard_msgs in\n#eval can_convert_binary_strings\
  \ \"00\" \"00\"\n\n/--\ninfo: 'No'\n-/\n#guard_msgs in\n#eval can_convert_binary_strings\
  \ \"101\" \"010\"\n\n/--\ninfo: 'Yes'\n-/\n#guard_msgs in\n#eval can_convert_binary_strings\
  \ \"0110\" \"0011\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
