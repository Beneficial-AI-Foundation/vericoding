"vc-description": "A transaction is possibly invalid if:\n\nthe amount exceeds $1000,\
  \ or;\nif it occurs within (and including) 60 minutes of another transaction with\
  \ the same name in a different city.\n\nEach transaction string transactions[i] consists\
  \ of comma separated values representing the name, time (in minutes), amount, and\
  \ city of the transaction.\nGiven a list of transactions, return a list of transactions\
  \ that are possibly invalid.  You may return the answer in any order.\n \nExample\
  \ 1:\nInput: transactions = [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]\nOutput:\
  \ [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]\nExplanation: The first transaction\
  \ is invalid because the second transaction occurs within a difference of 60 minutes,\
  \ have the same name and is in a different city. Similarly the second one is invalid\
  \ too.\nExample 2:\nInput: transactions = [\"alice,20,800,mtv\",\"alice,50,1200,mtv\"\
  ]\nOutput: [\"alice,50,1200,mtv\"]\n\nExample 3:\nInput: transactions = [\"alice,20,800,mtv\"\
  ,\"bob,50,1200,mtv\"]\nOutput: [\"bob,50,1200,mtv\"]\n\n \nConstraints:\n\ntransactions.length\
  \ <= 1000\nEach transactions[i] takes the form \"{name},{time},{amount},{city}\"\
  \nEach {name} and {city} consist of lowercase English letters, and have lengths\
  \ between 1 and 10.\nEach {time} consist of digits, and represent an integer between\
  \ 0 and 1000.\nEach {amount} consist of digits, and represent an integer between\
  \ 0 and 2000."
"vc-preamble": "import Imports.AllImports\n\ndef Transaction.array (t : Transaction)\
  \ : String := sorry\n\ndef find_invalid_transactions (trans : List String) : List\
  \ String := sorry\n\n\ndef abs (n : Int) : Int := \n  if n < 0 then -n else n\n\n\
  \n\n\n\n\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def splitStr (s : String) : List String := sorry\n\n\n\ntheorem\
  \ transaction_construction (name : String) (time amount : Int) (city : String) :\n\
  \  let t := Transaction.mk name time amount city\n  t.name = name ∧ \n  t.time =\
  \ time ∧\n  t.amount = amount ∧ \n  t.city = city := sorry"
"vc-theorems": ""
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
