"vc-description": "An area named Renus, is divided into $(N \\times M)$ cells. According\
  \ to archaeological survey the area contains huge amount of treasure. Some cells\
  \ out of $(N \\times M)$ cells contain treasure. But problem is, you can't go to\
  \ every cell as some of the cells are blocked.  \nFor every $a_{ij}$ cell($1 \\\
  leq i \\leq N$,$1 \\leq j \\leq M$), your task is to find the distance of the nearest\
  \ cell having treasure. \nNote:\n- You can only traverse up, down, left and right\
  \ from a given cell.\n- Diagonal movements are not allowed.\n- Cells having treasure\
  \ can't be blocked, only empty cells ( cells without treasure) can be blocked. \
  \ \n\n-----Input Format:------\n- First line contains $T$, the number of test cases.\n\
  - Second line contains two space-separated integers $N\\ and\\ M$.\n- Third line\
  \ contains a single integer $X$ denoting number of cells having treasures, followed\
  \ by $X$ lines containing two space-separated integers $x_i$ and $y_i$ denoting\
  \  position of row and column of $i^{th}$ treasure, for every $1\\leq i \\leq X$\n\
  - The next line contains a single integer $Y$ denoting the number of cells that\
  \ are blocked, and it is followed by subsequent $Y$ lines containing  two space-separated\
  \ integers $u_i$ and $v_i$ denoting position of row and column of blocked cells\
  \ , for every $1\\leq i \\leq Y$\n\n-----Constraints:------\n- $1\\le T \\le 100$\n\
  - $1 \\le N, M \\le 200$\n- $1 \\le X < N*M$\n- $0 \\le Y <(N*M) - X$\n- $1 \\le\
  \ x_i,u_j \\le N, for\\ every\\ 1 \\le i \\le X\\ and\\ 1 \\le j \\le Y$\n- $1 \\\
  le y_i,v_j \\le M, for\\ every\\ 1 \\le i \\le X\\ and\\ 1 \\le j \\le Y$\n\n-----Output\
  \ Format:------\nFor each test case print a $N \\times M$ matrix where each cell\
  \ consists of distance of nearest treasure. Cells that are blocked will show \"\
  $X$\" (without quotes). Also cells that doesn't have access to any treasure will\
  \ show \"$-1$\" (without quotes).\nNote: Co-ordinate of top left cell is $(1,1)$.\n\
  \n-----Sample Input-----\n1\n3 3\n2\n1 1\n1 3\n2\n2 1\n2 2\n\n-----Sample Output-----\n\
  0 1 0 \nX X 1\n4 3 2\n\n-----Explanation:-----\n- Coordinates  (1,1) and (1,3) \
  \ shows \"0\" because they contain treasure and nearest distance is 0.\n- Coordinates\
  \ (2,1) and (2,2) shows \"X\" as they are blocked.\n- Rest shows distance of nearest\
  \ cell having treasure."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_treasure_distances (n m : Nat) (treasures blocked : List\
  \ (Nat × Nat)) : List String :=\n  sorry\n"
"vc-theorems": "theorem dimensions_correct (n m : Nat) (h1 : n ≥ 2) (h2 : m ≥ 2) :\n\
  \  let treasures := [(1,1)]\n  let blocked := []\n  let result := find_treasure_distances\
  \ n m treasures blocked\n  List.length result = n ∧ \n  ∀ row ∈ result, List.length\
  \ (String.split row (· = ' ')) = m :=\nsorry\n\n\ntheorem treasure_is_zero (n m\
  \ : Nat) (h1 : n ≥ 2) (h2 : m ≥ 2) :\n  let treasures := [(1,1)]\n  let blocked\
  \ := []\n  let result := find_treasure_distances n m treasures blocked\n  List.head!\
  \ (String.split (List.head! result) (· = ' ')) = \"0\" :=\nsorry\n\n\ntheorem no_X_when_unblocked\
  \ (n m : Nat) (h1 : n ≥ 2) (h2 : m ≥ 2) :\n  let treasures := [(1,1)]\n  let blocked\
  \ := []\n  let result := find_treasure_distances n m treasures blocked\n  ∀ row\
  \ ∈ result, ¬String.contains row 'X' := \nsorry\n\n\ntheorem adjacent_differ_by_one\
  \ (n m : Nat) (h1 : n ≥ 2) (h2 : m ≥ 2) :\n  let treasures := [(1,1)]\n  let blocked\
  \ := []\n  let result := find_treasure_distances n m treasures blocked\n  ∀ row\
  \ ∈ result, ∀ j, j + 1 < m → \n    let vals := List.map String.toNat! (String.split\
  \ row (· = ' '))\n    max (vals[j]! - vals[j+1]!) (vals[j+1]! - vals[j]!) ≤ 1 :=\n\
  sorry\n\n\ntheorem blocked_cells_marked (n m : Nat) (h1 : n ≥ 2) (h2 : m ≥ 2) :\n\
  \  let treasures := [(1,1)]\n  let blocked := [(1,2), (2,1)]\n  let result := find_treasure_distances\
  \ n m treasures blocked\n  List.head! (String.split (List.head! result) (· = ' '))\
  \ = \"0\" ∧\n  List.get! (String.split (List.head! result) (· = ' ')) 1 = \"X\"\
  \ ∧ \n  List.head! (String.split (List.get! result 1) (· = ' ')) = \"X\" :=\nsorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
