"vc-description": "You are given an array $a$ consisting of $n$ integers (it is guaranteed\
  \ that $n$ is even, i.e. divisible by $2$). All $a_i$ does not exceed some integer\
  \ $k$.\n\nYour task is to replace the minimum number of elements (replacement is\
  \ the following operation: choose some index $i$ from $1$ to $n$ and replace $a_i$\
  \ with some integer in range $[1; k]$) to satisfy the following conditions:  after\
  \ all replacements, all $a_i$ are positive integers not greater than $k$;  for all\
  \ $i$ from $1$ to $\\frac{n}{2}$ the following equation is true: $a_i + a_{n - i\
  \ + 1} = x$, where $x$ should be the same for all $\\frac{n}{2}$ pairs of elements.\
  \ \n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe\
  \ first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) — the\
  \ number of test cases. Then $t$ test cases follow.\n\nThe first line of the test\
  \ case contains two integers $n$ and $k$ ($2 \\le n \\le 2 \\cdot 10^5, 1 \\le k\
  \ \\le 2 \\cdot 10^5$) — the length of $a$ and the maximum possible value of some\
  \ $a_i$ correspondingly. It is guratanteed that $n$ is even (i.e. divisible by $2$).\
  \ The second line of the test case contains $n$ integers $a_1, a_2, \\dots, a_n$\
  \ ($1 \\le a_i \\le k$), where $a_i$ is the $i$-th element of $a$.\n\nIt is guaranteed\
  \ that the sum of $n$ (as well as the sum of $k$) over all test cases does not exceed\
  \ $2 \\cdot 10^5$ ($\\sum n \\le 2 \\cdot 10^5$, $\\sum k \\le 2 \\cdot 10^5$).\n\
  \n\n-----Output-----\n\nFor each test case, print the answer — the minimum number\
  \ of elements you have to replace in $a$ to satisfy the conditions from the problem\
  \ statement.\n\n\n-----Example-----\nInput\n4\n4 2\n1 2 1 2\n4 3\n1 2 2 1\n8 7\n\
  6 1 1 7 6 3 4 6\n6 6\n5 2 6 1 3 4\n\nOutput\n0\n1\n4\n2"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def min_replacements_for_pairs (n : Nat) (k : Nat) (arr : List\
  \ Nat) : Nat := sorry\n\n\n\n\n\ntheorem optimal_array {n k : Nat}\n  (h1 : n >\
  \ 1)\n  (h2 : n % 2 = 0)\n  (h3 : k > 0)\n  (h4 : k ≤ 50) :\n  let arr := List.replicate\
  \ (n/2) 1 ++ List.replicate (n/2) k\n  min_replacements_for_pairs n k arr = 0 :=\
  \ sorry"
"vc-theorems": "/--\ninfo: 0\n-/\n#guard_msgs in\n#eval min_replacements_for_pairs\
  \ 4 2 [1, 2, 1, 2]\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval min_replacements_for_pairs\
  \ 4 3 [1, 2, 2, 1]\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval min_replacements_for_pairs\
  \ 8 7 [6, 1, 1, 7, 6, 3, 4, 6]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
