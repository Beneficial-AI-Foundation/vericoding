"vc-description": "Implement the StreamChecker class as follows:\n\nStreamChecker(words):\
  \ Constructor, init the data structure with the given words.\nquery(letter): returns\
  \ true if and only if for some k >= 1, the last k characters queried (in order from\
  \ oldest to newest, including this letter just queried) spell one of the words in\
  \ the given list.\n\n \nExample:\nStreamChecker streamChecker = new StreamChecker([\"\
  cd\",\"f\",\"kl\"]); // init the dictionary.\nstreamChecker.query('a');        \
  \  // return false\nstreamChecker.query('b');          // return false\nstreamChecker.query('c');\
  \          // return false\nstreamChecker.query('d');          // return true, because\
  \ 'cd' is in the wordlist\nstreamChecker.query('e');          // return false\n\
  streamChecker.query('f');          // return true, because 'f' is in the wordlist\n\
  streamChecker.query('g');          // return false\nstreamChecker.query('h');  \
  \        // return false\nstreamChecker.query('i');          // return false\nstreamChecker.query('j');\
  \          // return false\nstreamChecker.query('k');          // return false\n\
  streamChecker.query('l');          // return true, because 'kl' is in the wordlist\n\
  \n \nNote:\n\n1 <= words.length <= 2000\n1 <= words[i].length <= 2000\nWords will\
  \ only consist of lowercase English letters.\nQueries will only consist of lowercase\
  \ English letters.\nThe number of queries is at most 40000."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def StreamChecker.query : StreamChecker → String → Bool\n  | _,\
  \ _ => sorry\n"
"vc-theorems": "theorem empty_string_query_is_false (checker : StreamChecker) : \n\
  \  checker.query \"\" = false := by sorry\n\n\ntheorem matches_found_bounded_by_word_length\
  \ (checker : StreamChecker) (words : List String) \n    (word : String) (h : word\
  \ ∈ words) :\n    ∀ stream : List Char,\n    (stream.map (fun c => checker.query\
  \ c.toString)).countP id ≤ word.length := by sorry\n\n\ntheorem binary_queries_bounded_results\
  \ (checker : StreamChecker) (words : List String) \n    (h : words ≠ []) (maxlen\
  \ : Nat) \n    (h_maxlen : maxlen = (List.map String.length words).foldl Nat.max\
  \ 0) :\n    ∀ stream : List Char,\n    stream.length > maxlen + 1 →\n    let results\
  \ := stream.map (fun c => checker.query c.toString)\n    (results.take maxlen).countP\
  \ id ≤ 2 := by sorry\n\n\ntheorem duplicate_words_equivalent_behavior (words : List\
  \ String) :\n  ∀ c : String,\n  (StreamChecker.mk words).query c = \n  (StreamChecker.mk\
  \ (List.eraseDups words)).query c := by sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
