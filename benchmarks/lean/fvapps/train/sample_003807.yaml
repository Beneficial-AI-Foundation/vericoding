"vc-description": "A spoonerism is a spoken phrase in which the first letters of two\
  \ of the words are swapped around, often with amusing results.\n\nIn its most basic\
  \ form a spoonerism is a two word phrase in which only the first letters of each\
  \ word are swapped:\n\n```\"not picking\" --> \"pot nicking\"```\n\nYour task is\
  \ to create a function that takes a string of two words, separated by a space: ```words```\
  \ and returns a spoonerism of those words in a string, as in the above example.\n\
  \nNOTE: All input strings will contain only two words.  Spoonerisms can be more\
  \ complex.  For example, three-word phrases in which the first letters of the first\
  \ and last words are swapped: ```\"pack of lies\" --> \"lack of pies\"``` or more\
  \ than one letter from a word is swapped: ```\"flat battery --> \"bat flattery\"\
  ```\nYou are NOT expected to account for these, or any other nuances involved in\
  \ spoonerisms.\n\nOnce you have completed this kata, a slightly more challenging\
  \ take on the idea can be found here: http://www.codewars.com/kata/56dbed3a13c2f61ae3000bcd"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def spoonerize (s : String) : String := sorry\n\ntheorem spoonerize_preserves_string_type\
  \ {s : String} :\n  s.contains ' ' ∧ (s.split (· == ' ')).length = 2 →\n  spoonerize\
  \ s ≠ \"\" := sorry\n"
"vc-theorems": "theorem spoonerize_single_space {s : String} :\n  s.contains ' ' ∧\
  \ (s.split (· == ' ')).length = 2 →\n  ((spoonerize s).data.filter (· == ' ')).length\
  \ = 1 := sorry\n\n\ntheorem spoonerize_preserves_length {s : String} :\n  s.contains\
  \ ' ' ∧ (s.split (· == ' ')).length = 2 →\n  (spoonerize s).length = s.length :=\
  \ sorry\n\n\ntheorem spoonerize_preserves_chars {s : String} :\n  s.contains ' '\
  \ ∧ (s.split (· == ' ')).length = 2 →\n  ∀ c, (s.data.filter (· == c)).length =\
  \ ((spoonerize s).data.filter (· == c)).length := sorry\n\n\ntheorem spoonerize_swaps_first_letters\
  \ {s : String} (w1 w2 : String)\n  (h : s = w1 ++ String.mk [' '] ++ w2) (hw : w1\
  \ ≠ \"\" ∧ w2 ≠ \"\") :\n  let r := spoonerize s\n  let r1 := (r.split (· == ' ')).get!\
  \ 0\n  let r2 := (r.split (· == ' ')).get! 1\n  r1.get! 0 = w2.get! 0 ∧ r2.get!\
  \ 0 = w1.get! 0 := sorry\n\n\ntheorem spoonerize_preserves_rest {s : String} (w1\
  \ w2 : String)\n  (h : s = w1 ++ String.mk [' '] ++ w2) (hw : w1 ≠ \"\" ∧ w2 ≠ \"\
  \") :\n  let r := spoonerize s\n  let r1 := (r.split (· == ' ')).get! 0\n  let r2\
  \ := (r.split (· == ' ')).get! 1\n  List.drop 1 r1.data = List.drop 1 w1.data ∧\
  \ \n  List.drop 1 r2.data = List.drop 1 w2.data := sorry\n\n\ntheorem spoonerize_invalid_empty\
  \ (s : String) :\n  s = \"\" → spoonerize s = \"\" := sorry\n\n\ntheorem spoonerize_invalid_one_word\
  \ (s : String) :\n  (¬s.contains ' ') → spoonerize s = \"\" := sorry\n\n\ntheorem\
  \ spoonerize_invalid_too_many (s : String) :\n  (s.split (· == ' ')).length > 2\
  \ → spoonerize s = \"\" := sorry\n\n/--\ninfo: 'pot nicking'\n-/\n#guard_msgs in\n\
  #eval spoonerize \"not picking\"\n\n/--\ninfo: 'bedding wells'\n-/\n#guard_msgs\
  \ in\n#eval spoonerize \"wedding bells\"\n\n/--\ninfo: 'belly jeans'\n-/\n#guard_msgs\
  \ in\n#eval spoonerize \"jelly beans\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
