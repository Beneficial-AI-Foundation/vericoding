"vc-description": "You're putting together contact information for all the users of\
  \ your website to ship them a small gift. You queried your database and got back\
  \ a list of users, where each user is another list with up to two items: a string\
  \ representing the user's name and their shipping zip code. Example data might look\
  \ like:\n\n```python\n[[\"Grae Drake\", 98110], [\"Bethany Kok\"], [\"Alex Nussbacher\"\
  , 94101], [\"Darrell Silver\", 11201]]\n```\nNotice that one of the users above\
  \ has a name but _doesn't_ have a zip code.\n\nWrite a function `user_contacts()`\
  \ that takes a two-dimensional list like the one above and returns a dictionary\
  \ with an item for each user where the key is the user's name and the value is the\
  \ user's zip code. If your data doesn't include a zip code then the value should\
  \ be `None`.\n\nFor example, using the input above, `user_contacts()` would return\
  \ this dictionary:\n```python\n{\n    \"Grae Drake\": 98110,\n    \"Bethany Kok\"\
  : None,\n    \"Alex Nussbacher\": 94101,\n    \"Darrell Silver\": 11201,    \n}\n\
  ```\n\nYou don't have to worry about leading zeros in zip codes."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def user_contacts (contacts : List (List String)) : \n  HashMap\
  \ String (Option Int) := sorry\n"
"vc-theorems": "theorem all_missing_zips (names : List String) :\n    let contacts\
  \ := names.map (fun name => [name])\n    let result := user_contacts contacts\n\
  \    contacts.length = result.size ∧ \n    ∀ k, result.get k = none ∨ result.get\
  \ k = some none := sorry\n\n\ntheorem all_have_zips (contacts : List (String × Int))\n\
  \    (h₁ : ∀ (p₁ p₂ : String × Int), p₁ ∈ contacts → p₂ ∈ contacts → p₁ ≠ p₂ → p₁.1\
  \ ≠ p₂.1)\n    (h₂ : ∀ pair ∈ contacts, 10000 ≤ pair.2 ∧ pair.2 ≤ 99999) :\n   \
  \ let result := user_contacts (contacts.map (fun p => [p.1, toString p.2]))\n  \
  \  contacts.length = result.size ∧\n    (∀ k, (result.get k).isSome → (Option.get!\
  \ (result.get k)).isSome) ∧\n    (∀ pair ∈ contacts, result.get pair.1 = some (some\
  \ pair.2)) := sorry\n\n/--\ninfo: expected1\n-/\n#guard_msgs in\n#eval user_contacts\
  \ [[\"Grae Drake\", 98110], [\"Bethany Kok\"], [\"Alex Nussbacher\", 94101]]\n\n\
  /--\ninfo: {}\n-/\n#guard_msgs in\n#eval user_contacts []\n\n/--\ninfo: expected3\n\
  -/\n#guard_msgs in\n#eval user_contacts [[\"User1\", 12345], [\"User2\", 67890]]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
