"vc-description": "Ho, Ho, Ho!\nIt's Christmas time and our friendly grandpa Santa\
  \ Claus is busy distributing gifts to all the nice children. With the rising population,\
  \ Santa's workload every year gets increased and he seeks your help to wrap the\
  \ gifts with fancy wrapping papers while he gets them distributed. \nEverything\
  \ was going great until you realised that you'll fall short of wrapping paper. But\
  \ luckily, you get a very innovative idea, that will allow you to pack all the remaining\
  \ gifts without worrying about lack of wrapping paper. Any guesses what the idea\
  \ is? Using ice for wrapping, obviously! That's the only thing available at the\
  \ North Pole.\nNow, in order to reduce your trips to the ice factory, you decide\
  \ to write a program that helps you visualize how much ice is needed for a particular\
  \ gift. \n\n-----Input:-----\nInput will consist of a single line with size $n$.\n\
  \n-----Output:-----\nPrint the ice wrapped gift box for the given size. \n\n-----Constraints-----\n\
  - $0 \\leq n \\leq 1000$\n\n-----Sample Input:-----\n4\n\n-----Sample Output:-----\n\
  4 4 4 4 4 4 4\n4 3 3 3 3 3 4\n4 3 2 2 2 3 4\n4 3 2 1 2 3 4\n4 3 2 2 2 3 4 \n4 3\
  \ 3 3 3 3 4\n4 4 4 4 4 4 4"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def christmas_box (n : Nat) : List (List Nat) := sorry\n\ntheorem\
  \ christmas_box_empty (n : Nat) : \n  n = 0 → christmas_box n = [] := sorry\n"
"vc-theorems": "theorem christmas_box_length {n : Nat} :\n  n > 0 → List.length (christmas_box\
  \ n) = 2 * n - 1 := sorry\n\n\n\n\ntheorem christmas_box_top_bottom_match {n : Nat}\
  \ :\n  n > 1 → \n  List.head! (christmas_box n) = List.getLast! (christmas_box n)\
  \ := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
