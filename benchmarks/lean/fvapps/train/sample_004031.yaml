"vc-description": "In this Kata, you will be given two numbers, n and k and your task\
  \ will be to return the k-digit array that sums to n and has the maximum possible\
  \ GCD.\n\nFor example, given `n = 12, k = 3`, there are a number of possible `3-digit`\
  \ arrays that sum to `12`, such as `[1,2,9], [2,3,7], [2,4,6], ...` and so on. Of\
  \ all the possibilities, the one with the highest GCD is `[2,4,6]`. Therefore, `solve(12,3)\
  \ = [2,4,6]`.\n\nNote also that digits cannot be repeated within the sub-array,\
  \ so `[1,1,10]` is not a possibility. Lastly, if there is no such array, return\
  \ an empty array.\n\nMore examples in the test cases.\n\nGood luck!"
"vc-preamble": "import Imports.AllImports\n\ndef solve (n k : Nat) : List Nat := sorry\n\
  \ndef isStrictlyIncreasing (lst : List Nat) : Bool := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def checkSum (n : Nat) (lst : List Nat) : Bool := sorry\n\n\n\n\
  theorem solve_large_k (n k : Nat) (h1 : n > 0) (h2 : k > n) :\n  (solve n k).length\
  \ = 0 := sorry\n"
"vc-theorems": "theorem solve_k_equals_one (n : Nat) (h : n > 0) :\n  let result :=\
  \ solve n 1\n  result.length > 0 â†’ result = [n] := sorry\n\n/--\ninfo: [2, 4, 6]\n\
  -/\n#guard_msgs in\n#eval solve 12 3\n\n/--\ninfo: [3, 6, 9]\n-/\n#guard_msgs in\n\
  #eval solve 18 3\n\n/--\ninfo: [2, 4, 6, 12]\n-/\n#guard_msgs in\n#eval solve 24\
  \ 4\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
