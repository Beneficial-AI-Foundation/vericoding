"vc-description": "Your website is divided vertically in sections, and each can be\
  \ of different size (height).  \nYou need to establish the section index (starting\
  \ at `0`) you are at, given the `scrollY` and `sizes` of all sections.  \nSections\
  \ start with `0`, so if first section is `200` high, it takes `0-199` \"pixels\"\
  \ and second starts at `200`.\n\n### Example:\n\n`getSectionIdFromScroll( 300, [300,200,400,600,100]\
  \ )`\n\nwill output number `1` as it's the second section.\n\n`getSectionIdFromScroll(\
  \ 1600, [300,200,400,600,100] )`\n\nwill output number `-1` as it's past last section.\n\
  \nGiven the `scrollY` integer (always non-negative) and an array of non-negative\
  \ integers (with at least one element), calculate the index (starting at `0`) or\
  \ `-1` if `scrollY` falls beyond last section (indication of an error)."
"vc-preamble": "import Imports.AllImports\n\ndef List.sum : List Int → Int \n  | []\
  \ => 0\n  | (x::xs) => x + sum xs\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def get_section_id (scroll : Int) (sizes : List Int) : Int :=\n\
  \  sorry\n"
"vc-theorems": "theorem get_section_id_bounds (scroll : Int) (sizes : List Int) (h\
  \ : sizes ≠ []) :\n  -1 ≤ get_section_id scroll sizes ∧ get_section_id scroll sizes\
  \ < sizes.length :=\n  sorry\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval get_section_id\
  \ 1 [300, 200, 400, 600, 100]\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval get_section_id\
  \ 300 [300, 200, 400, 600, 100]\n\n/--\ninfo: -1\n-/\n#guard_msgs in\n#eval get_section_id\
  \ 1600 [300, 200, 400, 600, 100]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
