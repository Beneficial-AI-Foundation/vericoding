"vc-description": "There are players standing in a row each player has a digit written\
  \ on their T-Shirt (multiple players can have the same number written on their T-Shirt).\
  \   \nYou have to select a group of players, note that players in this group should\
  \ be standing in $\\textbf{consecutive fashion}$. For example second player of chosen\
  \ group next to first player of chosen group, third player next to second and similarly\
  \ last player next to second last player of chosen group. Basically You've to choose\
  \ a contiguous group of players.\nAfter choosing a group, players can be paired\
  \ if they have the same T-Shirt number (one player can be present in at most one\
  \ pair), finally the chosen group is called “good” if at most one player is left\
  \ unmatched. Your task is to find the size of the maximum “good” group.\nFormally,\
  \ you are given a string $S=s_{1}s_{2}s_{3}...s_{i}...s_{n}$ where $s_{i}$ can be\
  \ any digit character between $'0'$ and $'9'$ and $s_{i}$ denotes the number written\
  \ on the T-Shirt of $i^{th}$ player. Find a value $length$ such that there exist\
  \ pair of indices $(i,j)$ which denotes $S[i...j]$ is a “good” group where $i\\\
  geq1$ and $j\\leq S.length$ and $i\\leq j$ and $(j-i+1)=length$ and there exist\
  \ no other pair $(i’,j’)$ such that $(j’-i’+1)>length$ and $S[i'...j']$ is a \"\
  good\" group.\n\n-----Input:-----\n- First line will contain $T$, number of testcases.\
  \ Then the testcases follow. \n- $i^{th}$ testcase consist of a single line of input,\
  \ a string $S$. \n\n-----Output:-----\nFor each testcase, output in a single line\
  \ maximum possible size of a \"good\" group.\n\n-----Constraints-----\n$\\textbf{Subtask\
  \ 1} (20 points)$\n- $1 \\leq T \\leq 10$\n- $S.length \\leq 10^{3}$\n$\\textbf{Subtask\
  \ 2} (80 points)$\n- $1 \\leq T \\leq 10$\n- $S.length \\leq 10^{5}$\n\n-----Sample\
  \ Input:-----\n1\n\n123343\n\n-----Sample Output:-----\n3\n\n-----EXPLANATION:-----\n\
  1$\\textbf{$\\underline{2 3 3}$}$43\nUnderlined group is a “good” group because\
  \ the second player(number 2 on T-Shirt) is the only player who is left unmatched\
  \ and third and fourth player can form a pair, no other group has length greater\
  \ than 3 that are “good”. However note that we have other “good” group also 12$\\\
  textbf{$\\underline{334}$}$3 but length is 3 which is same as our answer.\n\n-----Sample\
  \ Input:-----\n1\n\n95665\n\n-----Sample Output:-----\n5\n\n-----EXPLANATION:-----\n\
  $\\textbf{$\\underline{95665}$}$ is “good” group because first player is the only\
  \ player who is left unmatched second and fifth player can form pair and third and\
  \ fourth player also form pair.\n\n-----Sample Input:-----\n2\n\n2323\n\n1234567\n\
  \n-----Sample Output:-----\n4\n\n1\n\n-----EXPLANATION:-----\nFor first test case\n\
  $\\textbf{$\\underline{2323}$}$ is a “good” group because there are no players who\
  \ are left unmatched first and third player form pair and second and fourth player\
  \ form pair.\n\nFor second test\n\nOnly length one \"good\" group is possible."
"vc-preamble": "import Imports.AllImports\n\ndef find_max_good_group (s : String)\
  \ : Nat :=\n  sorry\n\n\ndef is_good_group (s : String) : Bool :=\n  sorry\n\n\n\
  def substring (s : String) (start len : Nat) : String :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def get_char (s : String) (i : Nat) : Char :=\n  sorry\n"
"vc-theorems": "theorem find_max_good_result_bounds {s : String} (h : s.length > 0)\
  \ : \n  let res := find_max_good_group s\n  1 ≤ res ∧ res ≤ s.length :=\n  sorry\n\
  \n\ntheorem exists_valid_substring {s : String} (h : s.length > 0) :\n  let res\
  \ := find_max_good_group s\n  ∃ start : Nat, start + res ≤ s.length ∧ \n    is_good_group\
  \ (substring s start res) :=\n  sorry\n\n\ntheorem no_longer_good_groups {s : String}\
  \ (h : s.length > 0) :\n  let res := find_max_good_group s\n  ∀ len : Nat, len >\
  \ res → len ≤ s.length →\n    ∀ i : Nat, i + len ≤ s.length →\n      ¬is_good_group\
  \ (substring s i len) :=\n  sorry\n\n\ntheorem same_digit_max_length {s : String}\
  \ (h : s.length > 0)\n  (h_same : ∀ i j : Nat, i < s.length → j < s.length → \n\
  \            get_char s i = get_char s j) :\n  find_max_good_group s = s.length\
  \ :=\n  sorry\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval find_max_good_group \"\
  123343\"\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval find_max_good_group \"95665\"\
  \n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval find_max_good_group \"2323\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
