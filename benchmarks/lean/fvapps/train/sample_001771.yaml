"vc-description": "Implement the class SubrectangleQueries which receives a rows x\
  \ cols rectangle as a matrix of integers in the constructor and supports two methods:\n\
  1. updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)\n\n\
  Updates all values with newValue in the subrectangle whose upper left coordinate\
  \ is (row1,col1) and bottom right coordinate is (row2,col2).\n\n2. getValue(int\
  \ row, int col)\n\nReturns the current value of the coordinate (row,col) from the\
  \ rectangle.\n\n \nExample 1:\nInput\n[\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\"\
  ,\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\"]\n[[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]]\n\
  Output\n[null,1,null,5,5,null,10,5]\nExplanation\nSubrectangleQueries subrectangleQueries\
  \ = new SubrectangleQueries([[1,2,1],[4,3,4],[3,2,1],[1,1,1]]);  \n// The initial\
  \ rectangle (4x3) looks like:\n// 1 2 1\n// 4 3 4\n// 3 2 1\n// 1 1 1\nsubrectangleQueries.getValue(0,\
  \ 2); // return 1\nsubrectangleQueries.updateSubrectangle(0, 0, 3, 2, 5);\n// After\
  \ this update the rectangle looks like:\n// 5 5 5\n// 5 5 5\n// 5 5 5\n// 5 5 5\
  \ \nsubrectangleQueries.getValue(0, 2); // return 5\nsubrectangleQueries.getValue(3,\
  \ 1); // return 5\nsubrectangleQueries.updateSubrectangle(3, 0, 3, 2, 10);\n// After\
  \ this update the rectangle looks like:\n// 5   5   5\n// 5   5   5\n// 5   5  \
  \ 5\n// 10  10  10 \nsubrectangleQueries.getValue(3, 1); // return 10\nsubrectangleQueries.getValue(0,\
  \ 2); // return 5\n\nExample 2:\nInput\n[\"SubrectangleQueries\",\"getValue\",\"\
  updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\"\
  ]\n[[[[1,1,1],[2,2,2],[3,3,3]]],[0,0],[0,0,2,2,100],[0,0],[2,2],[1,1,2,2,20],[2,2]]\n\
  Output\n[null,1,null,100,100,null,20]\nExplanation\nSubrectangleQueries subrectangleQueries\
  \ = new SubrectangleQueries([[1,1,1],[2,2,2],[3,3,3]]);\nsubrectangleQueries.getValue(0,\
  \ 0); // return 1\nsubrectangleQueries.updateSubrectangle(0, 0, 2, 2, 100);\nsubrectangleQueries.getValue(0,\
  \ 0); // return 100\nsubrectangleQueries.getValue(2, 2); // return 100\nsubrectangleQueries.updateSubrectangle(1,\
  \ 1, 2, 2, 20);\nsubrectangleQueries.getValue(2, 2); // return 20\n\n \nConstraints:\n\
  \nThere will be at most 500 operations considering both methods: updateSubrectangle\
  \ and getValue.\n1 <= rows, cols <= 100\nrows == rectangle.length\ncols == rectangle[i].length\n\
  0 <= row1 <= row2 < rows\n0 <= col1 <= col2 < cols\n1 <= newValue, rectangle[i][j]\
  \ <= 10^9\n0 <= row < rows\n0 <= col < cols"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def getValue (s : SubrectangleQueries) (i j : Nat) : Int := sorry\n\
  \ndef updateSubrectangle (s : SubrectangleQueries) (row1 col1 row2 col2 : Nat) (newValue\
  \ : Int) : Unit := sorry\n"
"vc-theorems": "theorem initial_rectangle_values (rectangle : List (List Int)) (i\
  \ j : Nat)\n  (h1 : i < rectangle.length)\n  (h2 : j < (rectangle.head!).length)\n\
  \  (h3 : rectangle.length > 0)\n  (h4 : (rectangle.head!).length > 0) :\n  getValue\
  \ { rectangle := rectangle } i j = (rectangle.get! i).get! j := sorry\n\n\ntheorem\
  \ update_covers_entire_rectangle (rectangle : List (List Int)) (testVal : Int)\n\
  \  (h1 : rectangle.length > 0)\n  (h2 : (rectangle.head!).length > 0) :\n  let s\
  \ := { rectangle := rectangle }\n  let rows := rectangle.length\n  let cols := (rectangle.head!).length\n\
  \  let _ := updateSubrectangle s 0 0 (rows - 1) (cols - 1) testVal\n  ∀ i j, i <\
  \ rows → j < cols →\n    getValue s i j = testVal := sorry\n\n\ntheorem multiple_updates_overlap\
  \ (rectangle : List (List Int))\n  (h1 : rectangle.length > 0)\n  (h2 : (rectangle.head!).length\
  \ > 0) :\n  let s := { rectangle := rectangle }\n  let rows := rectangle.length\n\
  \  let cols := (rectangle.head!).length\n  let _ := updateSubrectangle s 0 0 (rows\
  \ - 1) (cols - 1) 10\n  let _ := updateSubrectangle s 0 0 (rows / 2) (cols / 2)\
  \ 20\n  let _ := updateSubrectangle s (rows / 2) (cols / 2) (rows - 1) (cols - 1)\
  \ 30\n  ∀ i j, i ≥ rows / 2 → i < rows → j ≥ cols / 2 → j < cols →\n    getValue\
  \ s i j = 30 := sorry\n\n\ntheorem sequential_same_region_updates (rectangle : List\
  \ (List Int)) (updates : List Int)\n  (h1 : rectangle.length > 0)\n  (h2 : (rectangle.head!).length\
  \ > 0)\n  (h3 : updates.length > 0) :\n  let s := { rectangle := rectangle }\n \
  \ let rows := rectangle.length\n  let cols := (rectangle.head!).length\n  ∀ val\
  \ ∈ updates, ∀ i j,\n    let _ := updateSubrectangle s 0 0 (rows - 1) (cols - 1)\
  \ val\n    i < rows → j < cols →\n      getValue s i j = val := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
