"vc-description": "You are a professional robber planning to rob houses along a street.\
  \ Each house has a certain amount of money stashed, the only constraint stopping\
  \ you from robbing each of them is that adjacent houses have security system connected\
  \ and it will automatically contact the police if two adjacent houses were broken\
  \ into on the same night.\nGiven a list of non-negative integers representing the\
  \ amount of money of each house, determine the maximum amount of money you can rob\
  \ tonight without alerting the police.\n \nExample 1:\nInput: nums = [1,2,3,1]\n\
  Output: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\n\
               Total amount you can rob = 1 + 3 = 4.\n\nExample 2:\nInput: nums =\
  \ [2,7,9,3,1]\nOutput: 12\nExplanation: Rob house 1 (money = 2), rob house 3 (money\
  \ = 9) and rob house 5 (money = 1).\n             Total amount you can rob = 2 +\
  \ 9 + 1 = 12.\n\n \nConstraints:\n\n0 <= nums.length <= 100\n0 <= nums[i] <= 400"
"vc-preamble": "import Imports.AllImports\n\ndef rob (nums : List Nat) : Nat :=\n\
  \  sorry\n\n\ndef elementsAtEvenIndices (nums : List Nat) : List Nat :=\n  sorry\n\
  \n\ndef elementsAtOddIndices (nums : List Nat) : List Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def list_sum (nums : List Nat) : Nat :=\n  List.foldl Nat.add 0\
  \ nums\n"
"vc-theorems": "theorem rob_nonnegative (nums : List Nat) :\n  rob nums ≥ 0 :=\n \
  \ sorry\n\n\ntheorem rob_even_indices_bound (nums : List Nat) (h : nums ≠ []) :\n\
  \  rob nums ≥ List.foldl Nat.max 0 (elementsAtEvenIndices nums) :=\n  sorry\n\n\n\
  theorem rob_odd_indices_bound (nums : List Nat) (h : nums ≠ []) :\n  rob nums ≥\
  \ List.foldl Nat.max 0 (elementsAtOddIndices nums) :=\n  sorry\n\n\ntheorem rob_minimum_of_first_two\
  \ (nums : List Nat) (h : nums.length ≥ 2) :\n  rob nums ≥ Nat.max (nums.get ⟨0,\
  \ sorry⟩) (nums.get ⟨1, sorry⟩) :=\n  sorry\n\n\ntheorem rob_subset_sum (nums :\
  \ List Nat) :\n  rob nums ≤ list_sum nums :=\n  sorry\n\n\ntheorem rob_empty :\n\
  \  rob [] = 0 :=\n  sorry\n\n\ntheorem rob_singleton (n : Nat) :\n  rob [n] = n\
  \ :=\n  sorry\n\n\ntheorem rob_pair (n m : Nat) :\n  rob [n, m] = Nat.max n m :=\n\
  \  sorry\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval rob [1, 2, 3, 1]\n\n/--\ninfo:\
  \ 12\n-/\n#guard_msgs in\n#eval rob [2, 7, 9, 3, 1]\n\n/--\ninfo: 2\n-/\n#guard_msgs\
  \ in\n#eval rob [2, 1]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
