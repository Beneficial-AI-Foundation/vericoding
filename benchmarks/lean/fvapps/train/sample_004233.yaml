"vc-description": "# Task\n\n**Your task** is to implement function `printNumber`\
  \ (`print_number` in C/C++ and Python `Kata.printNumber` in Java) that returns string\
  \ that represents given number in text format (see examples below).\n\nArguments:\n\
  \ - `number` — Number that we need to print (`num` in C/C++/Java)\n - `char` — Character\
  \ for building number (`ch` in C/C++/Java)\n\n# Examples\n```c,python\nprint_number(99,\
  \ '$')\n//Should return\n//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\\n\n//$    \
  \                                  $\\n\n//$   $$$$   $$$$   $$$$   $$$$   $$$$\
  \   $\\n\n//$  $$  $$ $$  $$ $$  $$ $$  $$ $$  $$  $\\n\n//$  $$  $$ $$  $$ $$ \
  \ $$ $$  $$ $$  $$  $\\n\n//$  $$  $$ $$  $$ $$  $$  $$$$   $$$$   $\\n\n//$  $$\
  \  $$ $$  $$ $$  $$   $$     $$    $\\n\n//$   $$$$   $$$$   $$$$   $$     $$  \
  \   $\\n\n//$                                      $\\n\n//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\
  \nprint_number(12345, '*')\n//Should return\n//****************************************\\\
  n\n//*                                      *\\n\n//*    **    ****   ****  ** \
  \ ** ******  *\\n\n//*   ***   **  ** **  ** **  ** **      *\\n\n//*  * **    \
  \  **     **  **  ** *****   *\\n\n//*    **     **      **   *****     **  *\\\
  n\n//*    **    **    **  **     **     **  *\\n\n//*  ****** ******  ****     \
  \ ** *****   *\\n\n//*                                      *\\n\n//****************************************\n\
  \nprint_number(67890, '@')\n//Should return\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\\
  n\n//@                                      @\\n\n//@     @@  @@@@@@  @@@@   @@@@\
  \   @@@@   @\\n\n//@    @@   @@  @@ @@  @@ @@  @@ @@  @@  @\\n\n//@   @@@@     @@\
  \   @@@@  @@  @@ @@  @@  @\\n\n//@  @@  @@   @@    @@@@   @@@@  @@  @@  @\\n\n//@\
  \  @@  @@  @@    @@  @@   @@   @@  @@  @\\n\n//@   @@@@   @@     @@@@   @@     @@@@\
  \   @\\n\n//@                                      @\\n\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\
  ```\n>***Note, that***:\n - Number should be `0 <= number <= 99999` and have `5\
  \ digits` (should have zeros at the start if needed)\n - Test cases contains only\
  \ valid values (integers that are 0 <= number <= 99999) and characters\n - Numbers\
  \ should have the same shape as in the examples (6x6 by the way)\n - Returned string\
  \ should be joined by `\\n` character (except of the end)\n - Returned string should\
  \ have 1 character *(height)* border (use the same character as for number) + padding\
  \ (1 character in height vertical and 2 horizontal with ` `) around borders and\
  \ 1 character margin between \"digits\"\n \n *Suggestions and translations are welcome.*"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def print_number (number : Nat) (char : Char) : String := sorry\n\
  \ntheorem print_number_dimensions (n : Nat) (c : Char) :\n  let result := print_number\
  \ n c\n  let lines := result.splitOn \"\\n\"\n  lines.length = 10 ∧ \n  lines.all\
  \ (fun line => line.length = 40) := sorry\n"
"vc-theorems": "theorem print_number_borders (n : Nat) (c : Char) :\n  let result\
  \ := print_number n c\n  let lines := result.splitOn \"\\n\"\n  lines.length > 0\
  \ ∧ \n  (∀ ch ∈ lines[0]!.data, ch = c) ∧ \n  (∀ ch ∈ lines[lines.length - 1]!.data,\
  \ ch = c) ∧ \n  lines[1]! = (String.mk [c] ++ String.mk (List.replicate 38 ' ')\
  \ ++ String.mk [c]) ∧\n  lines[lines.length - 2]! = (String.mk [c] ++ String.mk\
  \ (List.replicate 38 ' ') ++ String.mk [c]) := sorry\n\n\ntheorem print_number_middle_structure\
  \ (n : Nat) (c : Char) :\n  let result := print_number n c\n  let lines := result.splitOn\
  \ \"\\n\"\n  ∀ i, 2 ≤ i → i < 8 →\n    let line := lines[i]!\n    line.get? ⟨0⟩\
  \ = some c ∧\n    line.get? ⟨line.length - 1⟩ = some c ∧\n    (line.take 3).drop\
  \ 1 = \"  \" ∧\n    (line.take line.length).drop (line.length - 3) = \"  \" := sorry\n\
  \n\ntheorem print_number_char_independence (n : Nat) :\n  (print_number n '*').replace\
  \ (String.mk ['*']) \"#\" = print_number n '#' := sorry\n\n/--\ninfo: expected\n\
  -/\n#guard_msgs in\n#eval print_number 99 \"$\"\n\n/--\ninfo: expected\n-/\n#guard_msgs\
  \ in\n#eval print_number 12345 \"*\"\n\n/--\ninfo: expected\n-/\n#guard_msgs in\n\
  #eval print_number 67890 \"@\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
