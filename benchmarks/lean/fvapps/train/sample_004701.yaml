"vc-description": "John has invited some friends. His list is:\n```\ns = \"Fred:Corwill;Wilfred:Corwill;Barney:Tornbull;Betty:Tornbull;Bjon:Tornbull;Raphael:Corwill;Alfred:Corwill\"\
  ;\n```\n\nCould you make a program that \n- makes this string uppercase\n- gives\
  \ it sorted in alphabetical order by last name. \n\nWhen the last names are the\
  \ same, sort them by first name.\nLast name and first name of a guest come in the\
  \ result between parentheses separated by a comma.\n\nSo the result of function\
  \ `meeting(s)` will be:\n```\n\"(CORWILL, ALFRED)(CORWILL, FRED)(CORWILL, RAPHAEL)(CORWILL,\
  \ WILFRED)(TORNBULL, BARNEY)(TORNBULL, BETTY)(TORNBULL, BJON)\"\n```\nIt can happen\
  \ that in two distinct families with the same family name two people have the same\
  \ first name too.\n\n# Notes\n- You can see another examples in the \"Sample tests\"\
  ."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def meeting (input : String) : Option String := sorry\n\ntheorem\
  \ meeting_single_name_transformation {name first last : String}\n  (h : name = first\
  \ ++ \":\" ++ last) :\n  meeting name = some (\"(\" ++ last.toUpper ++ \", \" ++\
  \ first.toUpper ++ \")\") := sorry\n"
"vc-theorems": "theorem meeting_invalid_format_no_colon (s : String) \n  (h : Â¬ s.contains\
  \ ':') : \n  meeting s = none := sorry\n\n\ntheorem meeting_invalid_format_multiple_colons\
  \ (s : String)\n  (h : (s.splitOn \":\").length > 2) :\n  meeting s = none := sorry\n\
  \n/--\ninfo: expected1\n-/\n#guard_msgs in\n#eval meeting \"Fred:Corwill;Wilfred:Corwill;Barney:Tornbull;Betty:Tornbull;Bjon:Tornbull;Raphael:Corwill;Alfred:Corwill\"\
  \n\n/--\ninfo: expected2\n-/\n#guard_msgs in\n#eval meeting \"Alex:Gates;Bill:Gates;Steve:Jobs\"\
  \n\n/--\ninfo: expected3\n-/\n#guard_msgs in\n#eval meeting \"John:Smith;Jane:Smith;Joe:Brown\"\
  \n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
