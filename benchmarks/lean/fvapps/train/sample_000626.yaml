"vc-description": "Chef has $K$ chocolates and he wants to distribute them to $N$\
  \ people (numbered $1$ through $N$). These people are standing in a line in such\
  \ a way that for each $i$ ($1 \\le i \\le N-1$), person $i$ and person $i+1$ are\
  \ adjacent.\nFirst, consider some way to distribute chocolates such that for each\
  \ valid $i$, the number of chocolates the $i$-th person would receive from Chef\
  \ is $A_i$ and the sum $S_1 = \\sum_{i=1}^{N-1} \\left|A_i - A_{i+1}\\right|$ is\
  \ minimum possible. Of course, each person must receive a non-negative integer number\
  \ of chocolates.\nThen, Chef wants to create a new sequence $B_1, B_2, \\ldots,\
  \ B_N$ by rearranging (permuting) the elements of the sequence $A_1, A_2, \\ldots,\
  \ A_N$. For each valid $i$, the number of chocolates the $i$-th person actually\
  \ receives from Chef is $B_i$. Chef wants to distribute the chocolates (choose $B_1,\
  \ B_2, \\ldots, B_N$ by permuting the sequence $A$ and give $B_i$ chocolates to\
  \ the $i$-th person for each valid $i$) in such a way that $S_2 = \\sum_{i=1}^{N-1}\
  \ \\left|B_i – B_{i+1}\\right|$ is maximum possible. You need to find the maximum\
  \ value of $S_2$.\nIt is guaranteed that $S_2$ does not depend on the exact choice\
  \ of the sequence $A_1, A_2, \\ldots, A_N$, as long as it is a sequence that minimises\
  \ $S_1$.\n\n-----Input-----\n- The first line of the input contains a single integer\
  \ $T$ denoting the number of test cases. The description of $T$ test cases follows.\n\
  - The first line of each test case contains a single integer $N$.\n- The second\
  \ line contains a single integer $K$.\n\n-----Output-----\nFor each test case, print\
  \ a single line containing one integer — the maximum value of the sum $S_2$.\n\n\
  -----Constraints-----\n- $1 \\le T \\le 10$\n- $2 \\le N \\le 10^5$\n- $2 \\le K\
  \ \\le 10^{100,000}$\n\n-----Subtasks-----\nSubtask #1 (30 points): $2 \\le N, K\
  \ \\le 1,000$\nSubtask #2 (70 points): original constraints\n\n-----Example Input-----\n\
  1\n3\n2\n\n-----Example Output-----\n2\n\n-----Explanation-----\nExample case 1:\
  \ To minimise $S_1$, Chef could give $1$ chocolate to person $1$ and $1$ chocolate\
  \ to person $2$, so $S_1 = |1-1| + |1-0| = 1$.\nTo maximise $S_2$, Chef can give\
  \ $1$ chocolate to person $1$ and $1$ chocolate to person $3$, since the sequence\
  \ $B = (1, 0, 1)$ is a permutation of $A = (1, 1, 0)$. Then, $S_2 = |1-0| + |0-1|\
  \ = 2$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_chocolate_distribution (n k : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem chocolate_distribution_bounds {n k : Nat} (n_pos : n > 0):\n\
  \  let result := solve_chocolate_distribution n k\n  result ≥ 0 ∧ result ≤ 2*n-1\n\
  \  := sorry\n\n\n\n\ntheorem zero_chocolates {n : Nat} (n_pos : n > 0):\n  solve_chocolate_distribution\
  \ n 0 = 0\n  := sorry \n\n\ntheorem perfect_distribution {n : Nat} (n_pos : n >\
  \ 0):\n  ∀ m : Nat, solve_chocolate_distribution n (n * m) = 0\n  := sorry\n\n\n\
  theorem edge_cases_bounds :\n  ∀ n k : Nat,\n  n > 0 →\n  let result := solve_chocolate_distribution\
  \ n k\n  result ≥ 0 ∧ result ≤ 2*n-1\n  := sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs\
  \ in\n#eval solve_chocolate_distribution 3 2\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n\
  #eval solve_chocolate_distribution 2 2\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval\
  \ solve_chocolate_distribution 3 4\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
