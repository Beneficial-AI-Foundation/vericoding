"vc-description": "=====Problem Statement=====\nGiven an integer, n, print the following\
  \ values for each integer i from 1 to n:\n1. Decimal\n2. Octal\n3. Hexadecimal (capitalized)\n\
  4. Binary\n\nThe four values must be printed on a single line in the order specified\
  \ above for each i from 1 to n. Each value should be space-padded to match the width\
  \ of the binary value of n.\n\n=====Input Format=====\nA single integer denoting\
  \ n.\n\n=====Constraints=====\n1 ≤ n ≤ 99\n\n=====Output Format=====\nPrint n lines\
  \ wehere each line i (in the range 1 ≤ i ≤ n) contains the respective decimal, octal,\
  \ capitalized hexadecimal, and binary values of i. Each printed value must be formatted\
  \ to the width of the binary value of n."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def format_numbers (n : Nat) : String := sorry\n\ndef length_nat\
  \ (s : List String) : Nat := s.length\n\n\n\n\n\n\n\n\n\n\n\n\n"
"vc-theorems": "theorem format_numbers_equal_line_lengths (n : Nat)\n  (h : 0 < n\
  \ ∧ n ≤ 100) :\n  ∀ i j, i < n → j < n → \n  (((format_numbers n).splitOn \"\\n\"\
  )[i]!).length = \n  (((format_numbers n).splitOn \"\\n\")[j]!).length :=\nsorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
