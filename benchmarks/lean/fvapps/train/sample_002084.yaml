"vc-description": "A robber has attempted to rob a bank but failed to complete his\
  \ task. However, he had managed to open all the safes.\n\nOleg the bank client loves\
  \ money (who doesn't), and decides to take advantage of this failed robbery and\
  \ steal some money from the safes. There are many safes arranged in a line, where\
  \ the i-th safe from the left is called safe i. There are n banknotes left in all\
  \ the safes in total. The i-th banknote is in safe x_{i}. Oleg is now at safe a.\
  \ There are two security guards, one of which guards the safe b such that b < a,\
  \ i.e. the first guard is to the left of Oleg. The other guard guards the safe c\
  \ so that c > a, i.e. he is to the right of Oleg.\n\nThe two guards are very lazy,\
  \ so they do not move. In every second, Oleg can either take all the banknotes from\
  \ the current safe or move to any of the neighboring safes. However, he cannot visit\
  \ any safe that is guarded by security guards at any time, becaues he might be charged\
  \ for stealing. Determine the maximum amount of banknotes Oleg can gather.\n\n\n\
  -----Input-----\n\nThe first line of input contains three space-separated integers,\
  \ a, b and c (1 ≤ b < a < c ≤ 10^9), denoting the positions of Oleg, the first security\
  \ guard and the second security guard, respectively.\n\nThe next line of input contains\
  \ a single integer n (1 ≤ n ≤ 10^5), denoting the number of banknotes.\n\nThe next\
  \ line of input contains n space-separated integers x_1, x_2, ..., x_{n} (1 ≤ x_{i}\
  \ ≤ 10^9), denoting that the i-th banknote is located in the x_{i}-th safe. Note\
  \ that x_{i} are not guaranteed to be distinct.\n\n\n-----Output-----\n\nOutput\
  \ a single integer: the maximum number of banknotes Oleg can take.\n\n\n-----Examples-----\n\
  Input\n5 3 7\n8\n4 7 5 5 3 6 2 8\n\nOutput\n4\n\nInput\n6 5 7\n5\n1 5 7 92 3\n\n\
  Output\n0\n\n\n\n-----Note-----\n\nIn the first example Oleg can take the banknotes\
  \ in positions 4, 5, 6 (note that there are 2 banknotes at position 5). Oleg can't\
  \ take the banknotes in safes 7 and 8 because he can't run into the second security\
  \ guard. Similarly, Oleg cannot take the banknotes at positions 3 and 2 because\
  \ he can't run into the first security guard. Thus, he can take a maximum of 4 banknotes.\n\
  \nFor the second sample, Oleg can't take any banknotes without bumping into any\
  \ of the security guards."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_max_banknotes (start g1 g2 : Int) (notes : List Int)\
  \ : Int :=\nsorry\n"
"vc-theorems": "theorem count_max_banknotes_basic_properties\n  (start g1 g2 : Int)\
  \ (notes : List Int) :\n  let result := count_max_banknotes start g1 g2 notes\n\
  \  result ≥ 0 ∧ \n  result ≤ notes.length ∧\n  result = (notes.filter (fun n =>\
  \ g1 < n ∧ n < g2)).length :=\nsorry\n\n\ntheorem count_max_banknotes_guard_order\
  \ \n  (start g1 g2 : Int) (notes : List Int) (h : notes.length > 0) :\n  let res1\
  \ := count_max_banknotes start g1 g2 notes\n  let res2 := count_max_banknotes start\
  \ g2 g1 notes\n  res1 = 0 ∨ res2 = 0 :=\nsorry\n\n\ntheorem count_max_banknotes_empty_notes\n\
  \  (start g1 g2 : Int) :\n  count_max_banknotes start g1 g2 [] = 0 :=\nsorry\n\n\
  \ntheorem count_max_banknotes_start_irrelevant\n  (start g1 g2 : Int) (notes : List\
  \ Int) :\n  count_max_banknotes start g1 g2 notes = \n  count_max_banknotes (start\
  \ + 1) g1 g2 notes :=\nsorry\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval count_max_banknotes\
  \ 5 3 7 [4, 7, 5, 5, 3, 6, 2, 8]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval count_max_banknotes\
  \ 6 5 7 [1, 5, 7, 92, 3]\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval count_max_banknotes\
  \ 3 2 4 [3]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded_and_plausible"
