"vc-description": "Write a function that takes a positive integer n, sums all the\
  \ cubed values from 1 to n, and returns that sum.\n\nAssume that the input n will\
  \ always be a positive integer.\n\nExamples:\n\n```python\nsum_cubes(2)\n> 9 \n\
  # sum of the cubes of 1 and 2 is 1 + 8\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sum_cubes (n : Nat) : Nat := sorry\n\ntheorem sum_cubes_positive\
  \ (n : Nat) (h : n > 0) : \n  sum_cubes n > 0 :=\nsorry\n"
"vc-theorems": "theorem sum_cubes_greater_eq_n (n : Nat) (h : n > 0) :\n  sum_cubes\
  \ n â‰¥ n :=\nsorry\n\n\ntheorem sum_cubes_strictly_increasing (n : Nat) (h : n >\
  \ 0) :\n  sum_cubes (n + 1) > sum_cubes n :=\nsorry\n\n\ntheorem sum_cubes_base_case_one\
  \ :\n  sum_cubes 1 = 1 :=\nsorry\n\n\ntheorem sum_cubes_base_case_two :\n  sum_cubes\
  \ 2 = 9 :=\nsorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval sum_cubes 1\n\n/--\n\
  info: 9\n-/\n#guard_msgs in\n#eval sum_cubes 2\n\n/--\ninfo: 36\n-/\n#guard_msgs\
  \ in\n#eval sum_cubes 3\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
