"vc-description": "# Bubblesort Algorithm\n\n## Overview\n\nThe Bubblesort Algorithm\
  \ is one of many algorithms used to sort a list of similar items (e.g. all numbers\
  \ or all letters) into either ascending order or descending order.  Given a list\
  \ (e.g.):\n\n```python\n[9, 7, 5, 3, 1, 2, 4, 6, 8]\n```\n\nTo sort this list in\
  \ ascending order using Bubblesort, you first have to compare the first two terms\
  \ of the list.  If the first term is larger than the second term, you perform a\
  \ swap.  The list then becomes:\n\n```python\n[7, 9, 5, 3, 1, 2, 4, 6, 8] # The\
  \ \"9\" and \"7\" have been swapped because 9 is larger than 7 and thus 9 should\
  \ be after 7\n```\n\nYou then proceed by comparing the 2nd and 3rd terms, performing\
  \ a swap *when necessary*, and then the 3rd and 4th term, then the 4th and 5th term,\
  \ etc. etc.  When you reach the end of the list, it is said that you have completed\
  \ **1 complete pass**.\n\n## Task\n\nGiven an array of integers, your function `bubblesortOnce`/`bubblesort_once`/`BubblesortOnce`\
  \ (or equivalent, depending on your language's naming conventions) should return\
  \ a *new* array equivalent to performing exactly **1 complete pass** on the original\
  \ array.  Your function should be pure, i.e. it should **not** mutate the input\
  \ array."
"vc-preamble": "import Imports.AllImports\n\ndef bubblesortOnce (xs : List Int) :\
  \ List Int :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isSorted (xs : List Int) : Bool :=\n  sorry\n"
"vc-theorems": "theorem output_same_length {xs : List Int} (h : xs ≠ []) :\n  List.length\
  \ (bubblesortOnce xs) = List.length xs :=\n  sorry\n\n\ntheorem input_unchanged\
  \ {xs : List Int} (h : xs ≠ []) :\n  let original := xs\n  bubblesortOnce xs = bubblesortOnce\
  \ original :=\n  sorry\n\n\ntheorem at_least_one_swap_if_unsorted {xs : List Int}\
  \ (h : xs ≠ []) : \n  List.length xs > 1 →\n  ¬isSorted xs →\n  bubblesortOnce xs\
  \ ≠ xs :=\n  sorry\n\n\ntheorem moves_max_element_right {xs : List Int} (h : xs\
  \ ≠ []) :\n  List.length xs > 1 →\n  let result := bubblesortOnce xs\n  ∀ y ∈ List.take\
  \ (List.length result - 1) result,\n  y ≤ List.get! result (List.length result -\
  \ 1) :=\n  sorry\n\n/--\ninfo: expected1\n-/\n#guard_msgs in\n#eval bubblesort_once\
  \ [9, 7, 5, 3, 1, 2, 4, 6, 8]\n\n/--\ninfo: expected2\n-/\n#guard_msgs in\n#eval\
  \ bubblesort_once [6, 3, 4, 9, 1, 2, 7, 8, 5]\n\n/--\ninfo: expected3\n-/\n#guard_msgs\
  \ in\n#eval bubblesort_once [2, 4, 1]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
