"vc-description": "Your task is to find the first element of an array that is not\
  \ consecutive.\n\nBy not consecutive we mean not exactly 1 larger than the previous\
  \ element of the array.\n\nE.g. If we have an array `[1,2,3,4,6,7,8]` then `1` then\
  \ `2` then `3` then `4` are all consecutive but `6` is not, so that's the first\
  \ non-consecutive number.\n\n```if:c\nIf a non consecutive number is found then\
  \ return `true` and set the passed in pointer to the number found.\n\nIf the whole\
  \ array is consecutive then return `false`.\n```\n```if-not:c\nIf the whole array\
  \ is consecutive then return `null`^(2).\n```\nThe array will always have at least\
  \ `2` elements^(1) and all elements will be numbers. The numbers will also all be\
  \ unique and in ascending order. The numbers could be positive or negative and the\
  \ first non-consecutive could be either too!\n\nIf you like this Kata, maybe try\
  \ this one next: https://www.codewars.com/kata/represent-array-of-numbers-as-ranges\n\
  \n```if:c\n^(1) Can you write a solution that will return `false` for both `[]`\
  \ and `[ x ]` (an empty array and one with a single number) though? (This is an\
  \ empty array and one with a single number and is not tested for, but you can write\
  \ your own example test. )\n```\n```if-not:c\n^(1) Can you write a solution that\
  \ will return `null`^(2) for both `[]` and `[ x ]` though?  (This is an empty array\
  \ and one with a single number and is not tested for, but you can write your own\
  \ example test. )\n\n^(2)  \nSwift, Ruby and Crystal: `nil`  \nHaskell: `Nothing`\
  \  \nPython, Rust: `None`  \nJulia: `nothing`  \nNim: `none(int)` (See [options](https://nim-lang.org/docs/options.html))\n\
  ```"
"vc-preamble": "import Imports.AllImports\n\ndef firstNonConsecutive (arr : List Int)\
  \ : Option Int :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def abs (x : Int) : Int :=\n  if x < 0 then -x else x\n"
"vc-theorems": "theorem empty_or_single_returns_none (arr : List Int) :\n  arr.length\
  \ ≤ 1 → firstNonConsecutive arr = none :=\nsorry\n\n\ntheorem consecutive_returns_none\
  \ (arr : List Int) (h : arr.length ≥ 2) :\n  (∀ i j, i + 1 = j → arr[i]? = some\
  \ x → arr[j]? = some y → y = x + 1) →\n  firstNonConsecutive arr = none :=\nsorry\n\
  \n\ntheorem non_consecutive_returns_first_break (arr : List Int) (gap : Int) \n\
  \    (h1 : arr.length ≥ 3) (h2 : (abs gap) > 1) :\n  let pos := arr.length / 2\n\
  \  let val := arr[pos]?\n  match val with\n  | none => True  \n  | some x => \n\
  \    let next := arr[pos+1]?\n    match next with\n    | none => True\n    | some\
  \ y => x + gap = y → firstNonConsecutive arr = some y\n  :=\nsorry\n\n\ntheorem\
  \ result_in_input (arr : List Int) :\n  match firstNonConsecutive arr with\n  |\
  \ none => True\n  | some x => x ∈ arr :=\nsorry\n\n/--\ninfo: 6\n-/\n#guard_msgs\
  \ in\n#eval first_non_consecutive [1, 2, 3, 4, 6, 7, 8]\n\n/--\ninfo: None\n-/\n\
  #guard_msgs in\n#eval first_non_consecutive [1, 2, 3, 4, 5, 6, 7, 8]\n\n/--\ninfo:\
  \ 0\n-/\n#guard_msgs in\n#eval first_non_consecutive [-3, -2, 0, 1]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
