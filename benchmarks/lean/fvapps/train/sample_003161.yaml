"vc-description": "In this kata, you will be given a string of text and valid parentheses,\
  \ such as `\"h(el)lo\"`. You must return the string, with only the text inside parentheses\
  \ reversed, so `\"h(el)lo\"` becomes `\"h(le)lo\"`. However, if said parenthesized\
  \ text contains parenthesized text itself, then that too must reversed back, so\
  \ it faces the original direction. When parentheses are reversed, they should switch\
  \ directions, so they remain syntactically correct (i.e. `\"h((el)l)o\"` becomes\
  \ `\"h(l(el))o\"`). This pattern should repeat for however many layers of parentheses.\
  \ There may be multiple groups of parentheses at any level (i.e. `\"(1) (2 (3) (4))\"\
  `), so be sure to account for these.\n\nFor example:\n```python\nreverse_in_parentheses(\"\
  h(el)lo\") == \"h(le)lo\"\nreverse_in_parentheses(\"a ((d e) c b)\") == \"a (b c\
  \ (d e))\"\nreverse_in_parentheses(\"one (two (three) four)\") == \"one (ruof (three)\
  \ owt)\"\nreverse_in_parentheses(\"one (ruof ((rht)ee) owt)\") == \"one (two ((thr)ee)\
  \ four)\"\n```\n\nInput parentheses will always be valid (i.e. you will never get\
  \ \"(()\")."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_char (c : Char) (s : String) : Nat := sorry\n\ndef reverse_in_parentheses\
  \ (s : String) : String := sorry\n"
"vc-theorems": "theorem length_preserved (s : String) : \n  (reverse_in_parentheses\
  \ s).length = s.length := by\n  sorry\n\n\ntheorem preserves_parens_count (s : String)\
  \ : \n  (count_char '(' s = count_char '(' (reverse_in_parentheses s)) ∧ \n  (count_char\
  \ ')' s = count_char ')' (reverse_in_parentheses s)) := by\n  sorry\n\n\ntheorem\
  \ no_parens_unchanged (s : String) \n  (h : ∀ c ∈ s.data, c ≠ '(' ∧ c ≠ ')') :\n\
  \  reverse_in_parentheses s = s := by\n  sorry\n\n/--\ninfo: 'h(le)lo'\n-/\n#guard_msgs\
  \ in\n#eval reverse_in_parentheses \"h(el)lo\"\n\n/--\ninfo: 'a (b c (d e))'\n-/\n\
  #guard_msgs in\n#eval reverse_in_parentheses \"a ((d e) c b)\"\n\n/--\ninfo: 'one\
  \ (ruof (three) owt)'\n-/\n#guard_msgs in\n#eval reverse_in_parentheses \"one (two\
  \ (three) four)\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
