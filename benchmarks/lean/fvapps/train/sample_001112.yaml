"vc-description": "In the 2-D world of Flatland, the Circles were having their sports\
  \ day and wanted to end it with a nice formation. So, they called upon Mr. Sphere\
  \ from Spaceland for help. Mr Sphere decides to arrange the Circles in square formations.\
  \ He starts with $N$ Circles and forms the largest possible square using these Circles.\
  \ He then takes the remaining Circles and repeats the procedure. A square of side\
  \ $S$ requires $S^2$ Circles to create.\nFind the number of squares he will be able\
  \ to form at the end of the process.\n\n-----Input:-----\n- First line will contain\
  \ $T$, number of testcases. Then the testcases follow.\n- Each testcase contains\
  \ of a single integer $N$.\n\n-----Output:-----\nFor each testcase, output a single\
  \ integer denoting the number of squares.\n\n-----Constraints-----\n- $1 \\leq T\
  \ \\leq 1000$\n- $1 \\leq N \\leq 1000$\n\n-----Sample Input:-----\n2\n\n85\n\n\
  114          \n\n-----Sample Output:-----\n2\n\n4\n\n-----EXPLANATION:-----\nTest\
  \ case 1 : Mr Sphere forms a square of side 9 using 81 Circles and then forms a\
  \ square of side 2 using the remaining 4."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_squares (n : Nat) : Nat := sorry\n\n/-- Every positive\
  \ number can be decomposed into a sum of squares,\n    and the count of squares\
  \ is positive and not larger than the input number -/"
"vc-theorems": "theorem count_squares_basic_properties (n : Nat) (h : n > 0) :\n \
  \ let result := count_squares n\n  0 < result ∧ result ≤ n := sorry\n\n/-- The decomposition\
  \ count equals 1 for perfect squares -/\n\ntheorem count_squares_perfect (n : Nat)\
  \ (h : n > 0) :\n  count_squares (n * n) = 1 := sorry\n\n/-- Basic results for small\
  \ numbers -/\n\ntheorem count_squares_small_numbers :\n  count_squares 1 = 1 ∧ \n\
  \  count_squares 2 = 2 ∧ \n  count_squares 3 = 3 := sorry\n\n/-- The sum of squares\
  \ used in decomposition equals the input number -/\n\ntheorem count_squares_sum_property\
  \ (n : Nat) (h : n > 0) :\n  ∃ (squares : List Nat),\n    squares.length ≤ count_squares\
  \ n ∧\n    (∀ x ∈ squares, ∃ k, x = k * k) ∧\n    (squares.foldl (· + ·) 0 = n)\
  \ := sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval count_squares 85\n\n/--\n\
  info: 4\n-/\n#guard_msgs in\n#eval count_squares 114\n\n/--\ninfo: 2\n-/\n#guard_msgs\
  \ in\n#eval count_squares 10\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
