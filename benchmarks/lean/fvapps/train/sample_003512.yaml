"vc-description": "Given an array (or list) of scores, return the array of _ranks_\
  \ for each value in the array.  The largest value has rank 1, the second largest\
  \ value has rank 2, and so on. Ties should be handled by assigning the same rank\
  \ to all tied values. For example:\n\n    ranks([9,3,6,10]) = [2,4,3,1]\n\nand\n\
  \n    ranks([3,3,3,3,3,5,1]) = [2,2,2,2,2,1,7]\n    \nbecause there is one 1st place\
  \ value, a five-way tie for 2nd place, and one in 7th place."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def ranks (scores : List Int) : List Nat := sorry\n\ntheorem ranks_length_preserved\
  \ (scores : List Int) :\n  (ranks scores).length = scores.length := sorry\n"
"vc-theorems": "theorem ranks_are_valid (scores : List Int) (h : scores ≠ []) :\n\
  \  ∀ r ∈ ranks scores, 1 ≤ r ∧ r ≤ scores.length := sorry\n\n\ntheorem ranks_order\
  \ (scores : List Int) (i j : Nat) \n  (h1 : i < scores.length) (h2 : j < scores.length)\
  \ :\n  scores[i]! > scores[j]! → (ranks scores)[i]! < (ranks scores)[j]! := sorry\n\
  \n\ntheorem ranks_equal (scores : List Int) (i j : Nat)\n  (h1 : i < scores.length)\
  \ (h2 : j < scores.length) :\n  scores[i]! = scores[j]! → (ranks scores)[i]! = (ranks\
  \ scores)[j]! := sorry\n\n\ntheorem ranks_empty :\n  ranks [] = [] := sorry\n\n\
  /--\ninfo: []\n-/\n#guard_msgs in\n#eval ranks []\n\n/--\ninfo: [2, 2, 2, 2, 2,\
  \ 1, 7]\n-/\n#guard_msgs in\n#eval ranks [3, 3, 3, 3, 3, 5, 1]\n\n/--\ninfo: [2,\
  \ 4, 3, 1]\n-/\n#guard_msgs in\n#eval ranks [9, 3, 6, 10]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
