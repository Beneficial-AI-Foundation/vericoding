"vc-description": "Nexus 4.O is going to be organized by ASME, GLA University. Shubhanshu,\
  \ Head of Finance Team is working for it. He has $N$ number of bills of different\
  \ values as $a$$1$,$ a$$2$, $a$$3$…$a$$n$.\nHe is interested in a game in which\
  \ one has to do the addition of the bills. But due to privacy concerns, he cannot\
  \ share the details with others. \nHe can only trust his best friend Avani with\
  \ such a confidential thing. So, he asked her to play this game.\nRules of the game\
  \ :\n- Avani needs to answer $Q$ queries.\n- Every $Q$$i$ query has 2 values $X$$i$\
  \ and $Y$$i$.\n- Avani needs to find the sum of the values between $X$$i$ and $Y$$i$\
  \ (inclusive).\nSo, you need to help Avani in answering the $Q$ queries\n\n-----Input:-----\n\
  - First line will contain $T$, number of testcases. Then the testcases follow. \n\
  - The first line of each test case contains the value $N$ and $Q$.\n- The second\
  \ line of each test case contains the $N$ space-separated values as $a$$1$,$ a$$2$,\
  \ $a$$3$…$a$$n$.\n- The next line of each test case containing $Q$ query with $X$$i$\
  \ and $Y$$i$.\n\n-----Output:-----\nFor each test case, Print the total amount between\
  \ $X$$i$ and $Y$$i$ for $Q$ number of queries.\n\n-----Constraints-----\n- $1 \\\
  leq T \\leq 100$\n- $1 \\leq N \\leq 10^5$\n- $1 \\leq Q \\leq 10^5$\n- $1 \\leq\
  \ a$$i$$ \\leq 10^9$\n\n-----Subtasks (25 points) :-----\n- $1 \\leq N \\leq 10^2$.\n\
  - $1 \\leq Q \\leq 10^2$.\n- $1 \\leq a$$i$$ \\leq 10^5$.\n\n-----Subtasks (25 points)\
  \ :-----\n- $1 \\leq N \\leq 10^3$.\n- $1 \\leq Q \\leq 10^3$.\n- $1 \\leq a$$i$$\
  \ \\leq 10^5$.\n\n-----Subtasks (50 points) :-----\n- $Original  Constraints$.\n\
  \n-----Sample Input:-----\n1\n8 3\n1 2 3 4 5 6 7 8\n2 3\n1 6\n5 8\n\n-----Sample\
  \ Output:-----\n5\n21\n26\n\n-----EXPLANATION:-----\n$Q$$1$ : (2,3) 2+3=5\n$Q$$2$\
  \ : (1,6) 1+2+3+4+5+6=21\n$Q$$3$ : (5,8) 5+6+7+8=26"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_bill_queries (n q : Nat) (bills : List Nat) (queries\
  \ : List (Nat × Nat)) : List Nat :=\n  sorry\n"
"vc-theorems": "theorem solve_bill_queries_results_length \n  (n q : Nat) (bills :\
  \ List Nat) (queries : List (Nat × Nat))\n  (h1 : bills.length > 0) (h2 : queries.length\
  \ > 0) :\n  (solve_bill_queries n q bills queries).length = queries.length :=\n\
  sorry\n\n\ntheorem solve_bill_queries_results_bounded\n  (n q : Nat) (bills : List\
  \ Nat) (queries : List (Nat × Nat))\n  (h1 : bills.length > 0) (h2 : queries.length\
  \ > 0) :\n  ∀ x, x ∈ solve_bill_queries n q bills queries → x < 10^9 :=\nsorry\n\
  \n\ntheorem solve_bill_queries_matches_sum_mod\n  (n q : Nat) (bills : List Nat)\
  \ (queries : List (Nat × Nat))\n  (h1 : bills.length > 0) (h2 : queries.length >\
  \ 0)\n  (h3 : ∀ p ∈ queries, (p.1 ≤ p.2 ∧ p.2 ≤ n))\n  (i : Nat) (hi : i < queries.length)\
  \ :\n  let query := queries[i]'hi\n  let sublist := (bills.take query.2).drop (query.1\
  \ - 1)\n  (solve_bill_queries n q bills queries)[i]'(by rw [solve_bill_queries_results_length\
  \ n q bills queries h1 h2]; exact hi) = \n    sublist.foldl (fun acc x => acc +\
  \ x) 0 % (10^9) :=\nsorry\n\n\ntheorem solve_bill_queries_whole_array\n  (bills\
  \ : List Nat) (h : bills.length > 0) :\n  solve_bill_queries (bills.length) 1 bills\
  \ [(1, bills.length)] = \n    [bills.foldl (fun acc x => acc + x) 0 % (10^9)] :=\n\
  sorry\n\n/--\ninfo: [5, 21, 26]\n-/\n#guard_msgs in\n#eval solve_bill_queries 8\
  \ 3 [1, 2, 3, 4, 5, 6, 7, 8] [(2, 3), (1, 6), (5, 8)]\n\n/--\ninfo: [6, 14]\n-/\n\
  #guard_msgs in\n#eval solve_bill_queries 5 2 [1, 2, 3, 4, 5] [(1, 3), (2, 5)]\n\n\
  /--\ninfo: [60]\n-/\n#guard_msgs in\n#eval solve_bill_queries 3 1 [10, 20, 30] [(1,\
  \ 3)]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
