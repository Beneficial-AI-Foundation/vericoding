"vc-description": "Complete the square sum function so that it squares each number\
  \ passed into it and then sums the results together.\n\nFor example, for `[1, 2,\
  \ 2]` it should return `9` because `1^2 + 2^2 + 2^2 = 9`.\n\n```if:racket\nIn Racket,\
  \ use a list instead of an array, so '(1 2 3) should return 9.\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def square_sum (xs : List Int) : Int :=\n  sorry\n"
"vc-theorems": "theorem square_sum_nonnegative (xs : List Int) :\n  square_sum xs\
  \ ≥ 0 :=\n  sorry\n\n\ntheorem square_sum_empty :\n  square_sum [] = 0 :=\n  sorry\n\
  \n\ntheorem square_sum_singleton (x : Int) :\n  square_sum [x] = x * x :=\n  sorry\n\
  \n\ntheorem square_sum_sign_invariant (xs : List Int) :\n  square_sum xs = square_sum\
  \ (xs.map (fun x => -x)) :=\n  sorry\n\n\ntheorem square_sum_perm_invariant (xs\
  \ ys : List Int) :\n  List.length xs = List.length ys → square_sum xs = square_sum\
  \ ys :=\n  sorry\n\n\ntheorem square_sum_monotonic_nonneg (xs : List Int) (n : Int)\
  \ :\n  (∀ x ∈ xs, x ≥ 0) → n ≥ 0 → square_sum (n::xs) ≥ square_sum xs :=\n  sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
