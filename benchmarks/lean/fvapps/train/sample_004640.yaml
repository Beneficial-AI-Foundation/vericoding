"vc-description": "When provided with a letter, return its position in the alphabet.\n\
  \nInput :: \"a\"\n\nOuput :: \"Position of alphabet: 1\"\n\n`This kata is meant\
  \ for beginners. Rank and upvote to bring it out of beta`"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def position (c : Char) : String := sorry\n\ntheorem position_uppercase_valid\
  \ (c : Char) \n  (h : 'A' ≤ c ∧ c ≤ 'Z') : \n  let pos := (c.toLower.toNat - 'a'.toNat\
  \ + 1)\n  1 ≤ pos ∧ pos ≤ 26 := sorry\n"
"vc-theorems": "theorem position_lowercase_valid (c : Char)\n  (h : 'a' ≤ c ∧ c ≤\
  \ 'z') :\n  let pos := (c.toNat - 'a'.toNat + 1)\n  1 ≤ pos ∧ pos ≤ 26 := sorry\n\
  \n\ntheorem position_result_format (c : Char)\n  (h : 'A' ≤ c ∧ c ≤ 'Z') :\n  (position\
  \ c).startsWith \"Position of alphabet: \" ∧\n  (let num := (position c).dropWhile\
  \ (· ≠ ':')\n   num.all Char.isDigit) := sorry\n\n/--\ninfo: 'Position of alphabet:\
  \ 1'\n-/\n#guard_msgs in\n#eval position \"a\"\n\n/--\ninfo: 'Position of alphabet:\
  \ 26'\n-/\n#guard_msgs in\n#eval position \"z\"\n\n/--\ninfo: 'Position of alphabet:\
  \ 5'\n-/\n#guard_msgs in\n#eval position \"E\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
