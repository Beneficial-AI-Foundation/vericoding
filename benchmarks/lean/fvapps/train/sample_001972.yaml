"vc-description": "Evlampiy has found one more cool application to process photos.\
  \ However the application has certain limitations.\n\nEach photo i has a contrast\
  \ v_{i}. In order for the processing to be truly of high quality, the application\
  \ must receive at least k photos with contrasts which differ as little as possible.\n\
  \nEvlampiy already knows the contrast v_{i} for each of his n photos. Now he wants\
  \ to split the photos into groups, so that each group contains at least k photos.\
  \ As a result, each photo must belong to exactly one group.\n\nHe considers a processing\
  \ time of the j-th group to be the difference between the maximum and minimum values\
  \ of v_{i} in the group. Because of multithreading the processing time of a division\
  \ into groups is the maximum processing time among all groups.\n\nSplit n photos\
  \ into groups in a such way that the processing time of the division is the minimum\
  \ possible, i.e. that the the maximum processing time over all groups as least as\
  \ possible.\n\n\n-----Input-----\n\nThe first line contains two integers n and k\
  \ (1 ≤ k ≤ n ≤ 3·10^5) — number of photos and minimum size of a group.\n\nThe second\
  \ line contains n integers v_1, v_2, ..., v_{n} (1 ≤ v_{i} ≤ 10^9), where v_{i}\
  \ is the contrast of the i-th photo.\n\n\n-----Output-----\n\nPrint the minimal\
  \ processing time of the division into groups.\n\n\n-----Examples-----\nInput\n\
  5 2\n50 110 130 40 120\n\nOutput\n20\n\nInput\n4 1\n2 3 4 1\n\nOutput\n0\n\n\n\n\
  -----Note-----\n\nIn the first example the photos should be split into 2 groups:\
  \ [40, 50] and [110, 120, 130]. The processing time of the first group is 10, and\
  \ the processing time of the second group is 20. Maximum among 10 and 20 is 20.\
  \ It is impossible to split the photos into groups in a such way that the processing\
  \ time of division is less than 20.\n\nIn the second example the photos should be\
  \ split into four groups, each containing one photo. So the minimal possible processing\
  \ time of a division is 0."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def min_processing_time (n k : Nat) (contrasts : List Nat) : Nat\
  \ :=\nsorry\n"
"vc-theorems": "theorem min_processing_time_nonnegative {n k : Nat} {contrasts : List\
  \ Nat} \n  (h : k ≤ n) (h2 : n = contrasts.length) :\n  min_processing_time n k\
  \ contrasts ≥ 0 :=\nsorry\n\n\ntheorem min_processing_time_upper_bound {n k : Nat}\
  \ {contrasts : List Nat}\n  (h : k ≤ n) (h2 : n = contrasts.length) (h3 : contrasts\
  \ ≠ [])\n  (max : Nat) (min : Nat) (hmax : max ∈ contrasts) (hmin : min ∈ contrasts)\n\
  \  (hmax_upper : ∀ x ∈ contrasts, x ≤ max) (hmin_lower : ∀ x ∈ contrasts, min ≤\
  \ x) :\n  min_processing_time n k contrasts ≤ max - min :=\nsorry \n\n\ntheorem\
  \ min_processing_time_k_equals_n {n : Nat} {contrasts : List Nat}\n  (h : n = contrasts.length)\
  \ (h2 : n ≥ 2)\n  (max : Nat) (min : Nat) (hmax : max ∈ contrasts) (hmin : min ∈\
  \ contrasts)\n  (hmax_upper : ∀ x ∈ contrasts, x ≤ max) (hmin_lower : ∀ x ∈ contrasts,\
  \ min ≤ x) :\n  min_processing_time n n contrasts ≥ 0 ∧ \n  min_processing_time\
  \ n n contrasts ≤ max - min :=\nsorry\n\n\ntheorem min_processing_time_k_equals_one\
  \ {n : Nat} {contrasts : List Nat} \n  (h : n = contrasts.length) (h2 : n ≥ 2)\n\
  \  (max : Nat) (min : Nat) (hmax : max ∈ contrasts) (hmin : min ∈ contrasts)\n \
  \ (hmax_upper : ∀ x ∈ contrasts, x ≤ max) (hmin_lower : ∀ x ∈ contrasts, min ≤ x)\
  \ :\n  min_processing_time n 1 contrasts ≥ 0 ∧\n  min_processing_time n 1 contrasts\
  \ ≤ max - min :=\nsorry\n\n\ntheorem min_processing_time_sort_invariant {n k : Nat}\
  \ {contrasts : List Nat}\n  (h : n = contrasts.length) (h2 : n ≥ 2) (h3 : k = max\
  \ 1 (n/2))\n  (sorted_contrasts : List Nat) (h4 : sorted_contrasts.length = contrasts.length)\n\
  \  (h5 : ∀ x, x ∈ contrasts ↔ x ∈ sorted_contrasts) :\n  min_processing_time n k\
  \ contrasts = min_processing_time n k sorted_contrasts :=\nsorry"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded"
