"vc-description": "Chef's younger brother is in town. He's a big football fan and\
  \ has a very important match to watch tonight. But the Chef wants to watch the season\
  \ finale of MasterChef which will be aired at the same time. Now they don't want\
  \ to fight over it like they used to when they were little kids. They want to decide\
  \ it in a fair way. So they agree to play a game to make a decision. Their favourite\
  \ childhood game!\nThe game consists of C boards. Each board i is a grid of dimension\
  \ ni x mi.\nRules of the game:\n\n- A coin is placed at (1,1) on every board initially.\n\
  \n- Each one takes a turn alternatively.\n\n- In one turn, a player can choose any\
  \ one board and move a coin from a cell (i,j) to one of the following cells:\n\n\
  \t(i+1,j) OR (i+2,j) OR (i,j+1) OR (i,j+2) OR (i+1,j+1) OR (i+2,j+2).\n\n- A coin\
  \ cannot be moved out of the board at any point during the game.\n\n- A coin cannot\
  \ be moved once it reaches the cell (n,m) where n and m are the dimensions of the\
  \ board of that coin.\n\n- A player MUST make one valid move.\n\n- The player who\
  \ makes the last move gets to watch TV. \n\nBoth of them are passionate about their\
  \ interests and want to watch their respective shows. So they will obviously make\
  \ optimal moves in every turn. The Chef, being the elder brother, takes the first\
  \ turn.\nYour task is to predict which show they will be watching tonight.\n\n-----Input:-----\n\
  The first line of input contains a single integer T, the number of test cases. T\
  \ tests follow.Each test case starts with a single line containing C, the number\
  \ of boards in the game.\nThen follow C lines: each containing 2 integers ni and\
  \ mi, the dimensions of the ith board.\n\n-----Output:-----\nGiven the number and\
  \ dimensions of boards, for each test case, output in a single line: \"MasterChef\"\
  \ if the Chef wins or \"Football\" if his brother wins.\n\n-----Constraints:-----\n\
  \n1<=T<=10000\n\n1<=C<=20\n\n2<=ni,mi<=1000\n\n-----Example:-----Input:\n\n1\n\n\
  1\n\n2 2\n\nOutput:\n\nMasterChef\n\nExplanation: \n\nThe Chef can move the coin\
  \ on the board from (1,1)->(2,2). This coin cannot be moved any further. And so,\
  \ the Chef wins.\nNotice that if the Chef moves it to any other valid position,\
  \ i.e. either to (1,2) or (2,1) he will lose!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def Board := Nat × Nat\n\ndef solve_football_masterchef (boards:\
  \ List Board) : String := sorry\n"
"vc-theorems": "theorem valid_result (boards: List Board) \n  (h: boards.length ≥\
  \ 1 ∧ boards.length ≤ 100) \n  (h2: ∀ b ∈ boards, b.1 ≥ 1 ∧ b.1 ≤ 1000 ∧ b.2 ≥ 1\
  \ ∧ b.2 ≤ 1000) :\n  solve_football_masterchef boards = \"MasterChef\" ∨ \n  solve_football_masterchef\
  \ boards = \"Football\" := sorry\n\n\ntheorem deterministic (boards: List Board)\
  \  \n  (h: boards.length ≥ 1) :\n  solve_football_masterchef boards = solve_football_masterchef\
  \ boards := sorry\n  \n\ntheorem two_by_two_boards (boards: List Board)\n  (h: boards.length\
  \ ≥ 1)\n  (h2: ∀ b ∈ boards, b.1 = 2 ∧ b.2 = 2) :\n  solve_football_masterchef boards\
  \ = (if boards.length % 2 = 0 then \"Football\" else \"MasterChef\") := sorry\n\n\
  /--\ninfo: 'MasterChef'\n-/\n#guard_msgs in\n#eval solve_football_masterchef [(2,\
  \ 2)]\n\n/--\ninfo: 'Football'\n-/\n#guard_msgs in\n#eval solve_football_masterchef\
  \ [(2, 3), (3, 2)]\n\n/--\ninfo: 'Football'\n-/\n#guard_msgs in\n#eval solve_football_masterchef\
  \ [(4, 4)]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
