"vc-description": "Bob has ladder. He wants to climb this ladder, but being a precocious\
  \ child, he wonders about exactly how many ways he could to climb this `n` size\
  \ ladder using jumps of up to distance `k`.\n\nConsider this example...\n\nn = 5\\\
  \nk = 3\n\nHere, Bob has ladder of length 5, and with each jump, he can ascend up\
  \ to 3 steps (he can either jump step 1 or 2 or 3). This gives the below possibilities\n\
  \n```\n1 1 1 1 1\n1 1 1 2\n1 1 2 1 \n1 2 1 1\n2 1 1 1\n1 2 2\n2 2 1\n2 1 2\n1 1\
  \ 3\n1 3 1\n3 1 1\n2 3\n3 2\n```\n\nYour task to calculate number of ways to climb\
  \ ladder of length `n` with upto `k` steps for Bob. (13 in above case)\n\nConstraints:\n\
  \n```python\n1<=n<=50\n1<=k<=15\n```\n\n_Tip: try fibonacci._"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_ways (n k : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem count_ways_positive {n k : Nat} (h1 : n ≥ 1) (h2 : k ≥ 1)\
  \ : \n  count_ways n k ≥ 1 :=\n  sorry\n\n\ntheorem count_ways_k_one {n : Nat} (h\
  \ : n ≥ 1) :\n  count_ways n 1 = 1 :=\n  sorry\n\n\ntheorem count_ways_k_geq_n {n\
  \ k : Nat} (h1 : n ≥ 1) (h2 : k ≥ n) :\n  count_ways n k = count_ways n n :=\n \
  \ sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval count_ways 1 3\n\n/--\ninfo:\
  \ 13\n-/\n#guard_msgs in\n#eval count_ways 5 3\n\n/--\ninfo: 492\n-/\n#guard_msgs\
  \ in\n#eval count_ways 10 6\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
