"vc-description": "The chef is trying to solve some pattern problems, Chef wants your\
  \ help to code it. Chef has one number K to form a new pattern. Help the chef to\
  \ code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$,\
  \ the number of test cases. Then the test cases follow. \n- Each test case contains\
  \ a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test\
  \ case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n\
  - $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n4\n1\n2\n3\n4\n\n-----Sample\
  \ Output:-----\n1\n13\n57\n135\n7911\n131517\n1357\n9111315\n17192123\n25272931\n\
  \n-----EXPLANATION:-----\nNo need, else pattern can be decode easily."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def pattern_gen (k : Nat) : Array String := sorry\n\ntheorem pattern_gen_row_count\
  \ {k : Nat} (h : k > 0) :\n  (pattern_gen k).size = k := sorry\n"
"vc-theorems": "theorem pattern_gen_first_element {k : Nat} (h : k > 0) :\n  ((pattern_gen\
  \ k).get! 0).data.get! 0 = '1' := sorry\n\n\ntheorem pattern_gen_all_digits {k :\
  \ Nat} (h : k > 0) :\n  ∀ i < (pattern_gen k).size,\n  ∀ j < ((pattern_gen k).get!\
  \ i).data.length,\n  let c := ((pattern_gen k).get! i).data.get! j;\n  c.isDigit\
  \ := sorry\n\n/--\ninfo: ['1']\n-/\n#guard_msgs in\n#eval pattern_gen 1\n\n/--\n\
  info: ['13', '57']\n-/\n#guard_msgs in\n#eval pattern_gen 2\n\n/--\ninfo: ['135',\
  \ '7911', '131517']\n-/\n#guard_msgs in\n#eval pattern_gen 3\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
