"vc-description": "Chef is learning linear algebra. Recently, he learnt that for a\
  \ square matrix $M$, $\\mathop{\\rm trace}(M)$ is defined as the sum of all elements\
  \ on the main diagonal of $M$ (an element lies on the main diagonal if its row index\
  \ and column index are equal).\nNow, Chef wants to solve some excercises related\
  \ to this new quantity, so he wrote down a square matrix $A$ with size $N\\times\
  \ N$. A square submatrix of $A$ with size $l\\times l$ is a contiguous block of\
  \ $l\\times l$ elements of $A$. Formally, if $B$ is a submatrix of $A$ with size\
  \ $l\\times l$, then there must be integers $r$ and $c$ ($1\\le r, c \\le N+1-l$)\
  \ such that $B_{i,j} = A_{r+i-1, c+j-1}$ for each $1 \\le i, j \\le l$.\nHelp Chef\
  \ find the maximum trace of a square submatrix of $A$.\n\n-----Input-----\n- The\
  \ first line of the input contains a single integer $T$ denoting the number of test\
  \ cases. The description of $T$ test cases follows.\n- The first line of each test\
  \ case contains a single integer $N$.\n- $N$ lines follow. For each $i$ ($1 \\le\
  \ i \\le N$), the $i$-th of these lines contains $N$ space-separated integers $A_{i,1},\
  \ A_{i,2}, \\dots, A_{i, N}$ denoting the $i$-th row of the matrix $A$.\n\n-----Output-----\n\
  For each test case, print a single line containing one integer — the maximum possible\
  \ trace.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $2 \\le N \\le 100$\n\
  - $1 \\le A_{i,j} \\le 100$ for each valid $i, j$\n\n-----Subtasks-----\nSubtask\
  \ #1 (100 points): original constraints\n\n-----Example Input-----\n1\n3\n1 2 5\n\
  6 3 4\n2 7 1\n\n-----Example Output-----\n13\n\n-----Explanation-----\nExample case\
  \ 1: The submatrix with the largest trace is \n6 3\n2 7\n\nwhich has trace equal\
  \ to $6 + 7 = 13$. (This submatrix is obtained for $r=2, c=1, l=2$.)"
"vc-preamble": "import Imports.AllImports\n\ndef isValidMatrix (matrix : List (List\
  \ Int)) : Bool :=\n  match matrix with\n  | [] => false\n  | x::xs => let n := x.length\n\
  \             matrix.length = n && matrix.all (fun row => row.length = n)\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def findMaxTrace (matrix : List (List Int)) : Int :=\n  sorry\n"
"vc-theorems": "theorem max_trace_geq_main_diagonal (matrix : List (List Int)) \n\
  \  (h : isValidMatrix matrix = true) : \n  findMaxTrace matrix ≥ \n    (List.range\
  \ matrix.length).foldl \n      (fun acc i => acc + (matrix.get! i).get! i) 0 :=\n\
  sorry\n\n\ntheorem max_trace_geq_max_element (matrix : List (List Int)) \n  (h :\
  \ isValidMatrix matrix = true) :\n  findMaxTrace matrix ≥ \n    (matrix.map (List.foldl\
  \ max 0)).foldl max 0 :=\nsorry\n\n\ntheorem constant_matrix_trace (n : Nat) (h\
  \ : n > 0) :\n  let matrix := List.replicate n (List.replicate n 1)\n  findMaxTrace\
  \ matrix = n :=\nsorry\n\n\ntheorem identity_matrix_trace (n : Nat) (h : n > 0)\
  \ :\n  let matrix := List.range n |> List.map (fun i => \n    List.range n |> List.map\
  \ (fun j => if i = j then 1 else 0))\n  findMaxTrace matrix = n :=\nsorry\n\n\n\
  theorem empty_matrix_error : \n  isValidMatrix [] = false :=\nsorry\n\n/--\ninfo:\
  \ 13\n-/\n#guard_msgs in\n#eval find_max_trace [[1, 2, 5], [6, 3, 4], [2, 7, 1]]\n\
  \n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval find_max_trace [[1, 2], [3, 4]]\n\n/--\n\
  info: 3\n-/\n#guard_msgs in\n#eval find_max_trace [[1, 1, 1], [1, 1, 1], [1, 1,\
  \ 1]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
