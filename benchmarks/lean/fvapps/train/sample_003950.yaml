"vc-description": "You'll be given a string, and have to return the total of all the\
  \ unicode characters as an int. Should be able to handle any characters sent at\
  \ it. \n\nexamples:\n\nuniTotal(\"a\") == 97\nuniTotal(\"aaa\") == 291"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def uni_total (s : String) : Nat := sorry\n\ntheorem uni_total_empty\
  \ : uni_total \"\" = 0 := sorry\n"
"vc-theorems": "theorem uni_total_single_char (c : Char) : \n  uni_total (String.mk\
  \ [c]) = c.toNat := sorry\n\n\ntheorem uni_total_split {s : String} (h : s.length\
  \ â‰¥ 2) :\n  let mid := s.length / 2\n  uni_total s = uni_total (s.take mid) + uni_total\
  \ (s.drop mid) := sorry\n\n\ntheorem uni_total_additivity (s1 s2 : String) :\n \
  \ uni_total (s1 ++ s2) = uni_total s1 + uni_total s2 := sorry\n\n\ntheorem uni_total_sum_chars\
  \ (s : String) :\n  uni_total s = s.data.foldr (fun c acc => c.toNat + acc) 0 :=\
  \ sorry\n\n/--\ninfo: 97\n-/\n#guard_msgs in\n#eval uni_total \"a\"\n\n/--\ninfo:\
  \ 291\n-/\n#guard_msgs in\n#eval uni_total \"aaa\"\n\n/--\ninfo: 2001\n-/\n#guard_msgs\
  \ in\n#eval uni_total \"Mary had a little lamb\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
