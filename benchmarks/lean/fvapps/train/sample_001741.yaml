"vc-description": "We have a sequence of books: the i-th book has thickness books[i][0]\
  \ and height books[i][1].\nWe want to place these books in order onto bookcase shelves\
  \ that have total width shelf_width.\nWe choose some of the books to place on this\
  \ shelf (such that the sum of their thickness is <= shelf_width), then build another\
  \ level of shelf of the bookcase so that the total height of the bookcase has increased\
  \ by the maximum height of the books we just put down.  We repeat this process until\
  \ there are no more books to place.\nNote again that at each step of the above process,\
  \ the order of the books we place is the same order as the given sequence of books. \
  \ For example, if we have an ordered list of 5 books, we might place the first and\
  \ second book onto the first shelf, the third book on the second shelf, and the\
  \ fourth and fifth book on the last shelf.\nReturn the minimum possible height that\
  \ the total bookshelf can be after placing shelves in this manner.\n \nExample 1:\n\
  \nInput: books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelf_width = 4\n\
  Output: 6\nExplanation:\nThe sum of the heights of the 3 shelves are 1 + 3 + 2 =\
  \ 6.\nNotice that book number 2 does not have to be on the first shelf.\n\n \nConstraints:\n\
  \n1 <= books.length <= 1000\n1 <= books[i][0] <= shelf_width <= 1000\n1 <= books[i][1]\
  \ <= 1000"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def min_height_shelves (books : Books) (width : ShelfWidth) : Nat\
  \ :=\n  sorry\n"
"vc-theorems": "theorem min_height_lower_bound_tallest (books : Books) (width : ShelfWidth)\n\
  \  (h1 : books.length > 0)\n  (h2 : width > 0) :\n  min_height_shelves books width\
  \ ≥ books.foldl (λ acc b => max acc b.height) 0 :=\nsorry\n\n\ntheorem min_height_width_one_lower_bound\
  \ (books : Books)\n  (h1 : books.length > 0)\n  (h2 : width = 1) :\n  min_height_shelves\
  \ books 1 ≥ books.foldl (λ acc b => acc + b.height) 0 :=\nsorry\n\n\ntheorem min_height_upper_bound\
  \ (books : Books) (width : ShelfWidth)\n  (h1 : books.length > 0)\n  (h2 : width\
  \ > 0) :\n  min_height_shelves books width ≤ books.foldl (λ acc b => acc + b.height)\
  \ 0 :=\nsorry\n\n\ntheorem min_height_monotonic_width (books : Books) (w1 w2 : ShelfWidth)\n\
  \  (h1 : books.length > 0)\n  (h2 : w1 > 0)\n  (h3 : w2 = w1 + 1) :\n  min_height_shelves\
  \ books w2 ≤ min_height_shelves books w1 :=\nsorry\n\n/--\ninfo: 6\n-/\n#guard_msgs\
  \ in\n#eval min_height_shelves [[1, 1], [2, 3], [2, 3], [1, 1], [1, 1], [1, 1],\
  \ [1, 2]] 4\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval min_height_shelves [[1, 3],\
  \ [2, 4], [3, 2]] 6\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval min_height_shelves\
  \ [[1, 1]] 1\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
