"vc-description": "This kata is an extension of \"Combinations in a Set Using Boxes\"\
  :https://www.codewars.com/kata/5b5f7f7607a266914200007c\n\nThe goal for this kata\
  \ is to get all the possible combinations (or distributions) (with no empty boxes)\
  \ of a certain number of balls, but now, **with different amount of boxes.** In\
  \ the previous kata, the number of boxes was always the same\n\nJust to figure the\
  \ goal for this kata, we can see in the picture below the combinations for four\
  \ balls using the diagram of Hasse:\n\n\n\nPoints that are isolated represent balls\
  \ that are unique in a box.\nk points that are bonded in an area respresent a subset\
  \ that is content in a box.\n\nThe unique square at the bottom of the diagram, means\
  \ that there is only one possible combination for four balls in four boxes.\n\n\
  The above next line with 6 squares, means that we have 6 possible distributions\
  \ of the four balls in 3 boxes. These six distributions have something in common,\
  \ all of them have one box with 2 balls.\n\nGoing up one line more, we find the\
  \ 7 possible distributions of the four balls in 2 boxes. As it is shown, we will\
  \ have 7 distributions with: three balls in a box and only one ball in the another\
  \ box, or two balls in each box.\n\nFinally, we find again at the top, an unique\
  \ square, that represents, the only possible distribution, having one box, the four\
  \ balls together in the only available box.\n\nSo, for a set of 4 labeled balls,\
  \ we have a total of 15 possible distributions (as always with no empty boxes) and\
  \ with a maximum of 7 possible distributions for the case of two boxes.\n\nPrepare\
  \ a code that for a given number of balls (an integer), may output an array with\
  \ required data in the following order:\n```\n[total_amount_distributions, maximum_amount_distributions_case_k_boxes,\
  \ k_boxes]\n```\nJust see how it would be for the example given above:\n```\ncombs_non_empty_boxesII(4)\
  \ == [15, 7, 2] # A total of 15 combinations            \n                     \
  \                    #The case with maximum distributions is 7 using 2 boxes.\n\n\
  ```\nFeatures of the random tests:\n```\n1 < n <= 1800 (python)\n1 < n <= 1200 (ruby)\n\
  ```\nYou may see the example tests for more cases.\nEnjoy it!\nRuby version will\
  \ be published soon."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def combs_non_empty_boxesII (n : Nat) : List Nat := sorry\n\n--\
  \ Output has length 3 and contains only natural numbers"
"vc-theorems": "theorem output_structure (n : Nat) (h : n > 0) (h2 : n ≤ 20) : \n\
  \  let result := combs_non_empty_boxesII n\n  result.length = 3 ∧ (∀ x ∈ result,\
  \ x ≥ 0) := sorry\n\n-- First element is positive\n\ntheorem first_value_positive\
  \ (n : Nat) (h : n > 0) (h2 : n ≤ 20) :\n  (combs_non_empty_boxesII n).get! 0 >\
  \ 0 := sorry\n\n-- Second element is less than or equal to first element\n\ntheorem\
  \ second_value_less_than_first (n : Nat) (h : n > 0) (h2 : n ≤ 20) :\n  (combs_non_empty_boxesII\
  \ n).get! 1 ≤ (combs_non_empty_boxesII n).get! 0 := sorry\n\n-- Third element is\
  \ in valid range\n\ntheorem index_in_valid_range (n : Nat) (h : n > 0) (h2 : n ≤\
  \ 20) :\n  let result := (combs_non_empty_boxesII n).get! 2\n  1 ≤ result ∧ result\
  \ ≤ n := sorry\n\n-- Minimal case when n = 1\n\ntheorem minimal_case :\n  combs_non_empty_boxesII\
  \ 1 = [1, 1, 1] := sorry\n\n-- Monotonic first value\n\ntheorem monotonic_first_value\
  \ (n : Nat) (h : n > 1) (h2 : n ≤ 20) :\n  (combs_non_empty_boxesII (n-1)).get!\
  \ 0 < (combs_non_empty_boxesII n).get! 0 := sorry\n\n/--\ninfo: [15, 7, 2]\n-/\n\
  #guard_msgs in\n#eval combs_non_empty_boxesII 4\n\n/--\ninfo: [5, 3, 2]\n-/\n#guard_msgs\
  \ in\n#eval combs_non_empty_boxesII 3\n\n/--\ninfo: [2, 1, 2]\n-/\n#guard_msgs in\n\
  #eval combs_non_empty_boxesII 2\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
