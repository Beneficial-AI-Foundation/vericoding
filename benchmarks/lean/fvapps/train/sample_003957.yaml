"vc-description": "[Langton's ant](https://en.wikipedia.org/wiki/Langton%27s_ant)\
  \ is a two-dimensional Turing machine invented in the late 1980s. The ant starts\
  \ out on a grid of black and white cells and follows a simple set of rules that\
  \ has complex emergent behavior.\n\n## Task\n\nComplete the function and return\
  \ the `n`th iteration of Langton's ant with the given input.\n\n### Parameters:\n\
  \n* `grid` - a two dimensional array of `1`s and `0`s (representing white and black\
  \ cells respectively)\n* `column` - horizontal position of ant\n* `row` - ant's\
  \ vertical position\n* `n` - number of iterations\n* `dir` - ant's current direction\
  \ (0 - north, 1 - east, 2 - south, 3 - west), **should default to 0**\n\n**Note:**\
  \ parameters `column` and `row` will always be inside the `grid`, and number of\
  \ generations `n` will never be negative.\n\n## Output\n\nThe state of the `grid`\
  \ after `n` iterations.\n\n## Rules\n\nThe ant can travel in any of the four cardinal\
  \ directions at each step it takes. The ant moves according to the rules below:\n\
  \n* At a white square (represented with `1`), turn 90° right, flip the color of\
  \ the square, and move forward one unit.\n* At a black square (`0`), turn 90° left,\
  \ flip the color of the square, and move forward one unit.\n\nThe grid has no limits\
  \ and therefore if the ant moves outside the borders, the grid should be expanded\
  \ with `0`s, respectively maintaining the rectangle shape.\n\n## Example\n\n```python\n\
  ant([[1]], 0, 0, 1, 0)   # should return: [[0, 0]]\n```\n\nInitially facing north\
  \ (`0`), at the first iteration the ant turns right (because it stands on a white\
  \ square, `1`), flips the square and moves forward."
"vc-preamble": "import Imports.AllImports\n\ndef ant (grid : List (List Int)) (col\
  \ : Int) (row : Int) (steps : Int)\n  (direction : Int := 0) : List (List Int) :=\
  \ sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def BLACK : Int := 1\ndef WHITE : Int := 0\n"
"vc-theorems": "theorem ant_result_rectangular {grid : List (List Int)} {col row steps\
  \ dir : Int}\n  (h1: 0 ≤ col) (h2: 0 ≤ row) (h3: 0 ≤ steps) (h4: 0 ≤ dir) (h5: dir\
  \ ≤ 3)\n  (h6: grid.length > 0) (h7 : ∀ r ∈ grid, r.length = grid.head!.length)\
  \ :\n  let result := ant grid col row steps dir\n  ∀ r ∈ result, r.length = result.head!.length\
  \ :=\nsorry\n\n\ntheorem ant_result_valid_colors {grid : List (List Int)} {col row\
  \ steps dir : Int}\n  (h1: 0 ≤ col) (h2: 0 ≤ row) (h3: 0 ≤ steps) (h4: 0 ≤ dir)\
  \ (h5: dir ≤ 3) :\n  let result := ant grid col row steps dir\n  ∀ r ∈ result, ∀\
  \ cell ∈ r, cell = BLACK ∨ cell = WHITE :=\nsorry\n\n\ntheorem ant_result_size {grid\
  \ : List (List Int)} {col row steps dir : Int}\n  (h1: 0 ≤ col) (h2: 0 ≤ row) (h3:\
  \ 0 ≤ steps) (h4: 0 ≤ dir) (h5: dir ≤ 3) :\n  let result := ant grid col row steps\
  \ dir\n  result.length ≥ grid.length ∧ result.head!.length ≥ grid.head!.length :=\n\
  sorry\n\n\ntheorem ant_preserves_input {grid : List (List Int)} {col row steps dir\
  \ : Int}\n  (h1: 0 ≤ col) (h2: 0 ≤ row) (h3: 0 ≤ steps) (h4: 0 ≤ dir) (h5: dir ≤\
  \ 3) :\n  let result := ant grid col row steps dir\n  grid = grid :=\nsorry\n\n\n\
  theorem ant_zero_steps {grid : List (List Int)} {col row : Int}\n  (h1: 0 ≤ col)\
  \ (h2: 0 ≤ row) : \n  ant grid col row 0 = grid :=\nsorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
