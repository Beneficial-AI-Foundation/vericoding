"vc-description": "As we all know, Max is the best video game player among her friends.\
  \ Her friends were so jealous of hers, that they created an actual game just to\
  \ prove that she's not the best at games. The game is played on a directed acyclic\
  \ graph (a DAG) with n vertices and m edges. There's a character written on each\
  \ edge, a lowercase English letter.\n\n [Image] \n\nMax and Lucas are playing the\
  \ game. Max goes first, then Lucas, then Max again and so on. Each player has a\
  \ marble, initially located at some vertex. Each player in his/her turn should move\
  \ his/her marble along some edge (a player can move the marble from vertex v to\
  \ vertex u if there's an outgoing edge from v to u). If the player moves his/her\
  \ marble from vertex v to vertex u, the \"character\" of that round is the character\
  \ written on the edge from v to u. There's one additional rule; the ASCII code of\
  \ character of round i should be greater than or equal to the ASCII code of character\
  \ of round i - 1 (for i > 1). The rounds are numbered for both players together,\
  \ i. e. Max goes in odd numbers, Lucas goes in even numbers. The player that can't\
  \ make a move loses the game. The marbles may be at the same vertex at the same\
  \ time.\n\nSince the game could take a while and Lucas and Max have to focus on\
  \ finding Dart, they don't have time to play. So they asked you, if they both play\
  \ optimally, who wins the game?\n\nYou have to determine the winner of the game\
  \ for all initial positions of the marbles.\n\n\n-----Input-----\n\nThe first line\
  \ of input contains two integers n and m (2 ≤ n ≤ 100, $1 \\leq m \\leq \\frac{n(n\
  \ - 1)}{2}$).\n\nThe next m lines contain the edges. Each line contains two integers\
  \ v, u and a lowercase English letter c, meaning there's an edge from v to u written\
  \ c on it (1 ≤ v, u ≤ n, v ≠ u). There's at most one edge between any pair of vertices.\
  \ It is guaranteed that the graph is acyclic.\n\n\n-----Output-----\n\nPrint n lines,\
  \ a string of length n in each one. The j-th character in i-th line should be 'A'\
  \ if Max will win the game in case her marble is initially at vertex i and Lucas's\
  \ marble is initially at vertex j, and 'B' otherwise.\n\n\n-----Examples-----\n\
  Input\n4 4\n1 2 b\n1 3 a\n2 4 c\n3 4 b\n\nOutput\nBAAA\nABAA\nBBBA\nBBBB\n\nInput\n\
  5 8\n5 3 h\n1 2 c\n3 1 c\n3 2 r\n5 1 r\n4 3 z\n5 4 r\n5 2 h\n\nOutput\nBABBB\nBBBBB\n\
  AABBB\nAAABA\nAAAAB\n\n\n\n-----Note-----\n\nHere's the graph in the first sample\
  \ test case:\n\n [Image] \n\nHere's the graph in the second sample test case:\n\n\
  \ [Image]"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def winner_game (n : Nat) (edges : List (Nat × Nat × Char)) : List\
  \ (List Char) :=\nsorry\n"
"vc-theorems": "theorem winner_game_correct_dimensions {n : Nat} (h: n ≥ 1) (edges\
  \ : List (Nat × Nat × Char)) :\n  let result := winner_game n edges\n  ∀ row, row\
  \ ∈ result →\n    row.length = n ∧ result.length = n :=\nsorry\n\n\ntheorem winner_game_valid_chars\
  \ {n : Nat} (h1: n ≥ 2) (edges : List (Nat × Nat × Char)) :\n  let result := winner_game\
  \ n edges\n  ∀ row, row ∈ result →  \n  ∀ c, c ∈ row →\n    c = 'A' ∨ c = 'B' :=\n\
  sorry\n\n\ntheorem winner_game_bottom_right {n : Nat} (h1: n ≥ 2) (edges : List\
  \ (Nat × Nat × Char)) :\n  let result := winner_game n edges\n  result.getLast?.getD\
  \ [] |>.getLast?.getD ' ' = 'B' :=\nsorry\n\n\ntheorem winner_game_empty_graph :\n\
  \  winner_game 1 [] = [['B']] :=\nsorry"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded"
