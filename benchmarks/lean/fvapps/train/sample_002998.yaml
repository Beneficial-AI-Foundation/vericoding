"vc-description": "An array of size N x M represents pixels of an image.\nEach cell\
  \ of this array contains an array of size 3 with the pixel's color information:\
  \ `[R,G,B]`\n\nConvert the color image, into an *average* greyscale image. \n\n\
  The `[R,G,B]` array contains integers between 0 and 255 for each color. \n\nTo transform\
  \ a color pixel into a greyscale pixel, average the values of that pixel:\n```\n\
  p = [R,G,B] => [(R+G+B)/3, (R+G+B)/3, (R+G+B)/3]\n```\n\n**Note:** the values for\
  \ the pixel must be integers, therefore you should round floats to the nearest integer.\n\
  \n## Example\n\nHere's an example of a 2x2 image: \n \nHere's the expected image\
  \ after transformation:\n\n\nYou are always welcome to check out some of my other\
  \ katas:\n\nVery Easy (Kyu 8)\nAdd Numbers\nEasy (Kyu 7-6)\nConvert Color image\
  \ to greyscale\nArray Transformations\nBasic Compression\nFind Primes in Range\n\
  No Ifs No Buts\nMedium (Kyu 5-4)\nIdentify Frames In An Image\nPhotoshop Like -\
  \ Magic Wand\nScientific Notation\nVending Machine - FSA\nFind Matching Parenthesis\n\
  Hard (Kyu 3-2)\nAscii Art Generator"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def color_2_grey (colors: List (List (List (List Nat)))) : List\
  \ (List (List (List Nat))) := sorry\n\n-- Shape preservation theorems"
"vc-theorems": "theorem color_2_grey_preserves_outer_length {colors: List (List (List\
  \ (List Nat)))} :\n  List.length (color_2_grey colors) = List.length colors := sorry\n\
  \n\ntheorem color_2_grey_preserves_image_length {colors: List (List (List (List\
  \ Nat)))} (img_idx: Nat) \n  (h: img_idx < List.length colors) :\n  List.length\
  \ (List.get! (color_2_grey colors) img_idx) = \n  List.length (List.get! colors\
  \ img_idx) := sorry\n\n\ntheorem color_2_grey_preserves_row_length {colors: List\
  \ (List (List (List Nat)))} \n  (img_idx row_idx: Nat)\n  (h1: img_idx < List.length\
  \ colors)\n  (h2: row_idx < List.length (List.get! colors img_idx)) :\n  List.length\
  \ (List.get! (List.get! (color_2_grey colors) img_idx) row_idx) = \n  List.length\
  \ (List.get! (List.get! colors img_idx) row_idx) := sorry\n\n-- Grey value properties\n\
  \ntheorem color_2_grey_output_pixels_equal {colors: List (List (List (List Nat)))}\n\
  \  (img_idx row_idx pixel_idx: Nat)\n  (h1: img_idx < List.length colors)\n  (h2:\
  \ row_idx < List.length (List.get! colors img_idx))\n  (h3: pixel_idx < List.length\
  \ (List.get! (List.get! colors img_idx) row_idx)) :\n  let grey_pixel := List.get!\
  \ (List.get! (List.get! (color_2_grey colors) img_idx) row_idx) pixel_idx\n  List.length\
  \ grey_pixel = 3 ∧ \n  List.get! grey_pixel 0 = List.get! grey_pixel 1 ∧\n  List.get!\
  \ grey_pixel 1 = List.get! grey_pixel 2 := sorry\n\n\ntheorem color_2_grey_value_between_minmax\
  \ {colors: List (List (List (List Nat)))}\n  (img_idx row_idx pixel_idx: Nat)\n\
  \  (h1: img_idx < List.length colors)\n  (h2: row_idx < List.length (List.get! colors\
  \ img_idx))\n  (h3: pixel_idx < List.length (List.get! (List.get! colors img_idx)\
  \ row_idx)) :\n  let original := List.get! (List.get! (List.get! colors img_idx)\
  \ row_idx) pixel_idx\n  let grey_pixel := List.get! (List.get! (List.get! (color_2_grey\
  \ colors) img_idx) row_idx) pixel_idx\n  let min := List.get! original 0 \n  let\
  \ max := List.get! original 0\n  (min ≤ List.get! grey_pixel 0) ∧ (List.get! grey_pixel\
  \ 0 ≤ max) := sorry\n\n\ntheorem color_2_grey_is_average {colors: List (List (List\
  \ (List Nat)))}\n  (img_idx row_idx pixel_idx: Nat)\n  (h1: img_idx < List.length\
  \ colors)\n  (h2: row_idx < List.length (List.get! colors img_idx))\n  (h3: pixel_idx\
  \ < List.length (List.get! (List.get! colors img_idx) row_idx)) :\n  let original\
  \ := List.get! (List.get! (List.get! colors img_idx) row_idx) pixel_idx\n  let grey_pixel\
  \ := List.get! (List.get! (List.get! (color_2_grey colors) img_idx) row_idx) pixel_idx\n\
  \  let total := List.get! original 0 + List.get! original 1 + List.get! original\
  \ 2\n  List.get! grey_pixel 0 = (total + 2) / 3 := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
