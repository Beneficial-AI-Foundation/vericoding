"vc-description": "# Right in the Center\n\n_This is inspired by one of Nick Parlante's\
  \ exercises on the [CodingBat](https://codingbat.com/java) online code practice\
  \ tool._\n\nGiven a sequence of characters, does `\"abc\"` appear in the CENTER\
  \ of the sequence?\n\nThe sequence of characters could contain more than one `\"\
  abc\"`.\n\nTo define CENTER, the number of characters in the sequence to the left\
  \ and right of the \"abc\" (which is in the middle) must differ by at most one.\n\
  \nIf it is in the CENTER, return `True`. Otherwise, return `False`.\n\nWrite a function\
  \ as the solution for this problem. This kata looks simple, but it might not be\
  \ easy.\n\n## Example\n\n    is_in_middle(\"AAabcBB\")  ->  True\n    is_in_middle(\"\
  AabcBB\")   ->  True\n    is_in_middle(\"AabcBBB\")  ->  False"
"vc-preamble": "import Imports.AllImports\n\ndef is_in_middle (s : String) : Bool\
  \ := sorry\n\ntheorem empty_or_short_string (s : String) :\n  s.length ≤ 3 → is_in_middle\
  \ s = false := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def containsSubstring (s₁ s₂ : String) : Bool := sorry\n\ntheorem\
  \ without_abc (s : String) :\n  containsSubstring s \"abc\" = false → is_in_middle\
  \ s = false := sorry\n"
"vc-theorems": "theorem equal_padding (n : Nat) : \n  let s := String.mk (List.replicate\
  \ n 'A') ++ \"abc\" ++ String.mk (List.replicate n 'A')\n  is_in_middle s = true\
  \ := sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval is_in_middle \"AAabcBB\"\
  \n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval is_in_middle \"AabcBBB\"\n\n/--\n\
  info: False\n-/\n#guard_msgs in\n#eval is_in_middle \"\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
