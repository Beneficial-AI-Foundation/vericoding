"vc-description": "Chef has a sequence of $N$ integers, $A_1, A_2, ... , A_N$. He\
  \ likes this sequence if it contains a  subsequence of $M$ integers, $B_1, B_2,\
  \ ... , B_M$ within it.\nA subsequence is a sequence that can be derived from another\
  \ sequence by deleting some or no elements without changing the order of the remaining\
  \ elements.\nYou will be given a sequence of $N$ integers, $A_1, A_2, ..., A_N$\
  \ followed by another sequence of $M$ integers, $B_1, B_2, ..., B_M$. Given these,\
  \ you have to tell whether Chef likes the sequence of $N$ integers($A_1, A_2, ...,\
  \ A_N$) or not. \nFormally, output \"Yes\" if\n$\\exists idx_1, idx_2, ..., idx_M\
  \ | 1 \\le idx_1 < idx_2 < ... < idx_M \\le N$ and $A_{idx_i} = B_i \\forall i,\
  \ 1 \\le i \\le M$\nOtherwise output \"No\". Note that the quotes are for clarity.\n\
  \n-----Input-----\nThe first line contains a single integer, $T$.\n$T$ test cases\
  \ follow where each test case contains four lines:\n- The first line of a test case\
  \ contains a single integer $N$\n- The second line of the test case contains $N$\
  \ space separated integers, $A_1, A_2, ..., A_N$\n- The third line of the test case\
  \ contains a single integer $M$.\n- The fourth line contains $M$ space separated\
  \ integers, $B_1, B_2, ..., B_M$\nSymbols have usual meanings as described in the\
  \ statement.\n\n-----Output-----\nFor each test case, output a single line containing\
  \ the output. Output is \"Yes\" if Chef likes the sequence $A$. Output is \"No\"\
  \ if Chef dislikes the sequence $A$.\n\n-----Constraints-----\n- $1 \\le T \\le\
  \ 100$\n- $1 \\le N \\le 10^3$\n- $1 \\le M \\le 10^3$\n- $1 \\le A_i, B_i \\le\
  \ 10^9$\n\n-----Sample Input-----\n3\n6\n1 2 3 4 5 6\n3\n2 3 4\n6\n22 5 6 33 1 4\n\
  2\n4 15\n4\n1 3 4 2\n2\n1 2\n\n-----Sample Output-----\nYes\nNo\nYes\n\n-----Explanation:-----\n\
  In sample test case $1$, the sequence $1,2,3,4,5,6$ contains the subsequence $2,\
  \ 3, 4$. The subsequence is present at indices $1, 2, 3$ of the original sequence.\n\
  Hence, $1,2,3,4,5,6$ is a sequence which Chef likes it. Therefore, we output \"\
  Yes\".\nIn sample test case $2$, the subsequence $4, 15$ is not present in sequence\
  \ $22, 5, 6, 33, 1, 4$. Hence, we output \"No\".\nIn sample test case $3$, the sequence\
  \ $1, 3, 4, 2$ contains the subsequence $1, 2$. The subsequence is present at indices\
  \ $0, 3$. Therefore, we output \"Yes\"."
"vc-preamble": "import Imports.AllImports\n\ndef List.index {α} [BEq α] (xs : List\
  \ α) (x : α) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def check_subsequence (s1 : String) (s2 : String) : String :=\n\
  \  sorry\n"
"vc-theorems": "theorem sequence_is_subsequence_of_itself (seq : List Nat) (h : seq.length\
  \ > 0) :\n  ∀ x ∈ seq, x > 0 ∧ x ≤ 100 →\n  check_subsequence (toString seq) (toString\
  \ seq) = \"Yes\" :=\n  sorry\n\n\ntheorem invalid_element_not_subsequence (seq :\
  \ List Nat) (invalid : Nat) (h1 : seq.length > 0) :\n  (∀ x ∈ seq, x > 0 ∧ x ≤ 100)\
  \ →\n  invalid > 100 ∧ invalid ≤ 200 →\n  check_subsequence (toString seq) (toString\
  \ invalid) = \"No\" :=\n  sorry\n\n\ntheorem first_element_is_subsequence (seq :\
  \ List Nat) (h : seq.length > 1) :\n  ∀ x ∈ seq, x > 0 ∧ x ≤ 100 →\n  check_subsequence\
  \ (toString seq) (toString (seq.get! 0)) = \"Yes\" :=\n  sorry\n\n\ntheorem consecutive_elements_subsequence\
  \ (seq : List Nat) (start : Nat) \n  (h1 : seq.length ≥ 3) (h2 : start < seq.length\
  \ - 1) :\n  ∀ x ∈ seq, x > 0 ∧ x ≤ 100 →\n  let subseq := (seq.drop start).take\
  \ 2\n  ∀ i < subseq.length - 1, \n    seq.index (subseq[i]!) < seq.index (subseq[i+1]!)\
  \ →\n  check_subsequence (toString seq) (toString subseq) = \"Yes\" :=\n  sorry\n\
  \n/--\ninfo: 'Yes'\n-/\n#guard_msgs in\n#eval check_subsequence \"1 2 3 4 5 6\"\
  \ \"2 3 4\"\n\n/--\ninfo: 'No'\n-/\n#guard_msgs in\n#eval check_subsequence \"22\
  \ 5 6 33 1 4\" \"4 15\"\n\n/--\ninfo: 'Yes'\n-/\n#guard_msgs in\n#eval check_subsequence\
  \ \"1 3 4 2\" \"1 2\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
