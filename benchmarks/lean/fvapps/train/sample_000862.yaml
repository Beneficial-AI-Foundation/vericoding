"vc-description": "Arya and Aryan live in a country called Nadaca. Nadaca consists\
  \ of $N$ cities numbered $1$ through $N$, which are connected by some bidirectional\
  \ roads. Each road has a positive (not necessarily integer) length. Arya lives in\
  \ city $1$ and Aryan lives in city $N$.\nArya claims that for each city $v$, the\
  \ shortest path from city $1$ to city $v$ has length $a_v$. Aryan does not disagree,\
  \ but claims that for each city $v$, the shortest path from city $N$ to city $v$\
  \ has length $b_v$. You are the wisest person they know, so they asked you to tell\
  \ them if it is possible for their claims to be true, i.e. if a road network which\
  \ fully satisfies their claims exists. Help them!\n\n-----Input-----\n- The first\
  \ line of the input contains a single integer $T$ denoting the number of test cases.\
  \ The description of $T$ test cases follows.\n- The first line of each test case\
  \ contains a single integer $N$.\n- The second line contains $N$ space-separated\
  \ integers $a_1, a_2, \\ldots, a_N$.\n- The third line contains $N$ space-separated\
  \ integers $b_1, b_2, \\ldots, b_N$.\n\n-----Output-----\nFor each test case, print\
  \ a single line containing the string \"Yes\" if Arya's and Aryan's claims can be\
  \ true or \"No\" otherwise.\n\n-----Constraints-----\n- $1 \\le T \\le 10^3$\n-\
  \ $2 \\le N \\le 10^6$\n- $0 \\le a_i, b_i \\le 10^9$ for each valid $i$\n- the\
  \ sum of $N$ over all test cases does not exceed $10^6$\n\n-----Subtasks-----\n\
  Subtask #1 (50 points): the sum of $N$ over all test cases does not exceed $10^3$\n\
  Subtask #2 (50 points): original constraints\n\n-----Example Input-----\n2\n3\n\
  0 1 1\n1 1 0\n3\n0 1 5\n5 1 0\n\n-----Example Output-----\nYes\nNo"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_valid_path (n : Nat) (a b : List Nat) : Bool := sorry\n\n\
  def solve_test_case (n : Nat) (a b : List Nat) : String := sorry\n"
"vc-theorems": "theorem valid_path_structure {n : Nat} {middle_vals : List Nat} {connecting_val\
  \ : Nat}\n  (h1 : n ≥ 3) (h2 : n ≤ 10)\n  (h3 : ∀ x ∈ middle_vals, x ≥ 1 ∧ x ≤ 20)\n\
  \  (h4 : connecting_val ≥ 1) (h5 : connecting_val ≤ 20)\n  (a b : List Nat)\n  (hpath\
  \ : is_valid_path n a b) :\n  a.head? = some 0 ∧ \n  b.getLast? = some 0 ∧\n  a.getLast?\
  \ = b.head? ∧\n  (∀ x ∈ a.tail.dropLast, x > 0) ∧\n  (∀ x ∈ b.tail.dropLast, x >\
  \ 0) := sorry\n\n\ntheorem invalid_endpoints {n : Nat} (h1 : n ≥ 3) (h2 : n ≤ 10)\n\
  \  (a b : List Nat)\n  (h3 : a = List.replicate n 1)\n  (h4 : b = List.replicate\
  \ n 1) :\n  ¬ is_valid_path n a b := sorry\n\n\ntheorem invalid_middle_zero {n :\
  \ Nat} (h1 : n ≥ 3) (h2 : n ≤ 10)\n  (a b : List Nat)\n  (h3 : a = 0 :: 0 :: List.replicate\
  \ (n-3) 1 ++ [1])\n  (h4 : b = 1 :: List.replicate (n-2) 1 ++ [0]) :\n  ¬ is_valid_path\
  \ n a b := sorry\n\n\ntheorem solve_matches_valid {n : Nat} {val : Nat}\n  (h1 :\
  \ n ≥ 3) (h2 : n ≤ 10)\n  (h3 : val ≥ 1) (h4 : val ≤ 20)\n  (a b : List Nat)\n \
  \ (h5 : a = 0 :: List.replicate (n-2) val ++ [val])\n  (h6 : b = val :: List.replicate\
  \ (n-2) val ++ [0]) :\n  solve_test_case n a b = if is_valid_path n a b then \"\
  Yes\" else \"No\" := sorry\n\n/--\ninfo: 'Yes'\n-/\n#guard_msgs in\n#eval solve_test_case\
  \ 3 [0, 1, 1] [1, 1, 0]\n\n/--\ninfo: 'No'\n-/\n#guard_msgs in\n#eval solve_test_case\
  \ 3 [0, 1, 5] [5, 1, 0]\n\n/--\ninfo: 'Yes'\n-/\n#guard_msgs in\n#eval solve_test_case\
  \ 4 [0, 2, 2, 3] [3, 2, 2, 0]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
