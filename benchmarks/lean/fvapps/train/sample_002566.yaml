"vc-description": "Create a function that transforms any positive number to a string\
  \ representing the number in words.  The function should work for all numbers between\
  \ 0 and 999999.\n\n### Examples\n\n```\nnumber2words(0)  ==>  \"zero\"\nnumber2words(1)\
  \  ==>  \"one\"\nnumber2words(9)  ==>  \"nine\"\nnumber2words(10)  ==>  \"ten\"\n\
  number2words(17)  ==>  \"seventeen\"\nnumber2words(20)  ==>  \"twenty\"\nnumber2words(21)\
  \  ==>  \"twenty-one\"\nnumber2words(45)  ==>  \"forty-five\"\nnumber2words(80)\
  \  ==>  \"eighty\"\nnumber2words(99)  ==>  \"ninety-nine\"\nnumber2words(100)  ==>\
  \  \"one hundred\"\nnumber2words(301)  ==>  \"three hundred one\"\nnumber2words(799)\
  \  ==>  \"seven hundred ninety-nine\"\nnumber2words(800)  ==>  \"eight hundred\"\
  \nnumber2words(950)  ==>  \"nine hundred fifty\"\nnumber2words(1000)  ==>  \"one\
  \ thousand\"\nnumber2words(1002)  ==>  \"one thousand two\"\nnumber2words(3051)\
  \  ==>  \"three thousand fifty-one\"\nnumber2words(7200)  ==>  \"seven thousand\
  \ two hundred\"\nnumber2words(7219)  ==>  \"seven thousand two hundred nineteen\"\
  \nnumber2words(8330)  ==>  \"eight thousand three hundred thirty\"\nnumber2words(99999)\
  \  ==>  \"ninety-nine thousand nine hundred ninety-nine\"\nnumber2words(888888)\
  \  ==>  \"eight hundred eighty-eight thousand eight hundred eighty-eight\"\n```"
"vc-preamble": "import Imports.AllImports\n\ndef countChar (s : String) (c : Char)\
  \ : Nat := \n  s.data.filter (·= c) |>.length\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isSubstring (pattern : String) (s : String) : Bool := sorry\n\
  \ndef number2words (n : Nat) : String := sorry\n\n-- All outputs are strings containing\
  \ only letters, spaces, and hyphens"
"vc-theorems": "theorem number2words_valid_chars (n : Nat) (h : n ≤ 999999) :\n  ∃\
  \ s, number2words n = s ∧ \n  (∀ c ∈ s.data, c.isAlpha ∨ c = ' ' ∨ c = '-') := sorry\n\
  \n-- Numbers 0-19 are written as single words without spaces or hyphens \n\ntheorem\
  \ small_numbers_single_word (n : Nat) (h : n ≤ 19) :\n  ∀ c ∈ (number2words n).data,\
  \ c.isAlpha := sorry\n\n-- Numbers 20-99: if multiple of 10 then no hyphen, else\
  \ exactly one hyphen\n\ntheorem two_digit_numbers (n : Nat) (h1 : 20 ≤ n) (h2 :\
  \ n ≤ 99) :\n  if n % 10 = 0 \n  then ∀ c ∈ (number2words n).data, c ≠ '-'\n  else\
  \ countChar (number2words n) '-' = 1 := sorry\n\n-- Numbers 100-999 contain \"hundred\"\
  \ and have one space if multiple of 100\n\ntheorem hundreds (n : Nat) (h1 : 100\
  \ ≤ n) (h2 : n ≤ 999) :\n  isSubstring \"hundred\" (number2words n) ∧\n  (if n %\
  \ 100 = 0 \n   then countChar (number2words n) ' ' = 1\n   else True) := sorry\n\
  \n-- Numbers 1000-999999 contain exactly one \"thousand\"\n\ntheorem thousands (n\
  \ : Nat) (h1 : 1000 ≤ n) (h2 : n ≤ 999999) :\n  isSubstring \"thousand\" (number2words\
  \ n) ∧\n  countChar (number2words n) 't' = 1 := sorry\n\n-- Zero is written as \"\
  zero\"\n\ntheorem zero : number2words 0 = \"zero\" := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
