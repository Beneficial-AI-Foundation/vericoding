"vc-description": "Robinson Crusoe decides to explore his isle. On a sheet of paper\
  \ he plans the following process.\n\nHis hut has coordinates `origin = [0, 0]`.\
  \ From that origin he walks a given distance `d` on a line\nthat has a given angle\
  \ `ang` with the x-axis. He gets to a point A.\n(Angles are measured with respect\
  \ to the x-axis) \n\nFrom that point A he walks the distance `d` multiplied by a\
  \ constant `distmult` on a line that \nhas the angle `ang` multiplied by a constant\
  \ `angmult` and so on and on.\n\nWe have `d0 = d`, `ang0 = ang`; then `d1 = d *\
  \ distmult`, `ang1 = ang * angmult` etc ...\n\nLet us suppose he follows this process\
  \ n times.\nWhat are the coordinates `lastx, lasty` of the last point?\n\nThe function\
  \ `crusoe` has parameters;\n- n        : numbers of steps in the process\n- d  \
  \      : initial chosen distance\n- ang      : initial chosen angle in degrees\n\
  - distmult : constant multiplier of the previous distance\n- angmult  : constant\
  \ multiplier of the previous angle\n\n`crusoe(n, d, ang, distmult, angmult)` should\
  \ return\n`lastx, lasty` as an array or a tuple depending on the language.\n\n###\
  \ Example:\n`crusoe(5, 0.2, 30, 1.02, 1.1)` ->\n\nThe successive `x` are : `0.0,\
  \ 0.173205, 0.344294, 0.511991, 0.674744, 0.830674` (approximately)\n\nThe successive\
  \ `y` are : `0.0, 0.1, 0.211106, 0.334292, 0.47052, 0.620695` (approximately)\n\n\
  and\n```\nlastx: 0.8306737544381833\nlasty: 0.620694691344071\n```\n### A drawing:\n\
  \n![alternative text](https://i.imgur.com/SGHbb6Vl.png)\n\nSuccessive points:\n\n\
  - x: `0.0, 0.9659..., 1.8319..., 2.3319..., 1.8319...`\n- y: `0.0, 0.2588..., 0.7588...,\
  \ 1.6248..., 2.4908...`\n\n### Note\nPlease could you ask before translating: some\
  \ translations are already written and published when/if the kata is approved."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def crusoe (n : Nat) (d ang dist_mult ang_mult : Float) : Float\
  \ × Float :=\n  sorry\n"
"vc-theorems": "theorem crusoe_results_finite (n : Nat) (d ang dist_mult ang_mult\
  \ : Float)\n  (h1 : 0 ≤ n ∧ n ≤ 100)\n  (h2 : 0 ≤ d ∧ d ≤ 10) \n  (h3 : -360 ≤ ang\
  \ ∧ ang ≤ 360)\n  (h4 : 0.1 < dist_mult ∧ dist_mult ≤ 2.0)\n  (h5 : 0.1 < ang_mult\
  \ ∧ ang_mult ≤ 2.0) :\n  let (x, y) := crusoe n d ang dist_mult ang_mult\n  Float.isFinite\
  \ x ∧ Float.isFinite y :=\nsorry\n\n\ntheorem crusoe_zero_steps (d ang dist_mult\
  \ ang_mult : Float) :\n  crusoe 0 d ang dist_mult ang_mult = (0, 0) :=\nsorry\n\n\
  \ntheorem crusoe_zero_distance (ang dist_mult ang_mult : Float) :\n  crusoe 1 0\
  \ ang dist_mult ang_mult = (0, 0) :=\nsorry\n\n\ntheorem crusoe_symmetry (d ang\
  \ : Float)\n  (h1 : 0 ≤ d ∧ d ≤ 10)\n  (h2 : -360 ≤ ang ∧ ang ≤ 360) :\n  let (x1,\
  \ y1) := crusoe 1 d ang 1.0 1.0\n  let (x2, y2) := crusoe 1 d (ang + 180) 1.0 1.0\n\
  \  x1 = -x2 ∧ y1 = -y2 := \nsorry\n\n/--\ninfo: round(0.8306737544381833, 7)\n-/\n\
  #guard_msgs in\n#eval round 0 7\n\n/--\ninfo: round(0.620694691344071, 7)\n-/\n\
  #guard_msgs in\n#eval round y 7\n\n/--\ninfo: 0.7071068\n-/\n#guard_msgs in\n#eval\
  \ round x 7\n\n/--\ninfo: 0.7071068\n-/\n#guard_msgs in\n#eval round y 7\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
