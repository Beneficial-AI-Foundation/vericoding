"vc-description": "Given an Integer N, write a program to reverse it.\n\n-----Input-----\n\
  \nThe first line contains an integer T, total number of testcases. Then follow T\
  \ lines, each line contains an integer N. \n\n-----Output-----\nFor each test case,\
  \ display the reverse of the given number N, in a new line.\n\n-----Constraints-----\n\
  - 1 ≤ T ≤ 1000\n- 1 ≤ N ≤ 1000000\n\n-----Example-----\nInput\n4\n12345\n31203\n\
  2123\n2300\nOutput\n54321\n30213\n3212\n32"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def reverse_numbers (nums : List String) : List Int := sorry\n\n\
  def is_palindrome (s : String) : Bool := sorry\n"
"vc-theorems": "theorem reverse_numbers_preserves_length {nums : List String} :\n\
  \  List.length (reverse_numbers nums) = List.length nums := sorry\n\n/--\ninfo:\
  \ [54321, 30213, 3212, 32]\n-/\n#guard_msgs in\n#eval reverse_numbers [\"12345\"\
  , \"31203\", \"2123\", \"2300\"]\n\n/--\ninfo: [1, 2, 3]\n-/\n#guard_msgs in\n#eval\
  \ reverse_numbers [\"100\", \"200\", \"300\"]\n\n/--\ninfo: [4321]\n-/\n#guard_msgs\
  \ in\n#eval reverse_numbers [\"1234\"]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
