"vc-description": "ZCO is approaching, and you want to be well prepared!  \nThere\
  \ are $N$ topics to cover and the $i^{th}$ topic takes $H_i$ hours to prepare (where\
  \ $1 \\le i \\le N$). You have only $M$ days left to prepare, and you want to utilise\
  \ this time wisely. You know that you can't spend more than $S$ hours in a day preparing,\
  \ as you get tired after that. You don't want to study more than one topic in a\
  \ day, and also, don't want to spend more than two days on any topic, as you feel\
  \ that this is inefficient.  \nGiven these constraints, can you find the maximum\
  \ number of topics you can prepare, if you choose the topics wisely?\n\n-----Input:-----\n\
  - First line will contain $T$, number of testcases. Then the testcases follow. \n\
  - The first line of each test case contains three space-separated integers: $N$,\
  \ $M$ and $S$, denoting the number of topics, the number of days remaining and the\
  \ number of hours you can study in a day.  \n- The second line of each test case\
  \ contains $N$ space-separated integers $H_i$, denoting the number of hours needed\
  \ to prepare for the $i^{th}$ topic.\n\n-----Output:-----\nFor each testcase, output\
  \ in a single line: the maximum number of topics you can prepare.\n\n-----Constraints-----\n\
  - $1 \\leq T \\leq 10$\n- $1 \\leq N \\leq 10^5$\n- $1 \\leq M \\leq 10^5$\n- $1\
  \ \\leq S \\leq 16$\n- $1 \\leq H_i \\leq 50$\n\n-----Subtasks-----\n- 30 points\
  \ : Every topic takes the same number of hours to prepare (i.e. all $H_i$ are equal).\n\
  - 70 points : Original constraints.\n\n-----Sample Input:-----\n2\n5 4 10\n10 24\
  \ 30 19 40\n5 4 16\n7 16 35 10 15\n\n-----Sample Output:-----\n2\n4\n\n-----Explanation:-----\n\
  Testcase 1:\n\nYou can choose topics $1$ and $4$. Topic $1$ will consume a single\
  \ day , while topic $4$ will consume two days.  Thus, you'll be able to prepare\
  \ these two topics within the 4 remaining days. But you can check that you cannot\
  \ do any better.\nTestcase 2:\n\nYou can choose topics $1$, $2$, $4$, and $5$. Each\
  \ of them will consume one day each. Thus you'll be able to cover $4$ topics."
"vc-preamble": "import Imports.AllImports\n\ndef max_topics_prepared (N M S : Nat)\
  \ (topic_hours : List Nat) : Nat := sorry\n\ndef list_any (l : List Nat) (f : Nat\
  \ → Bool) : Bool := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def list_sum (l : List Nat) : Nat := \n  match l with\n  | [] =>\
  \ 0\n  | h :: t => h + list_sum t\n"
"vc-theorems": "theorem max_topics_non_negative (N M S : Nat) (topic_hours : List\
  \ Nat) :\n  N > 0 → M > 0 → S > 0 → S ≤ 16 → topic_hours.length > 0 → \n  max_topics_prepared\
  \ N M S topic_hours ≥ 0 := sorry\n\n\ntheorem max_topics_bounded_by_length (N M\
  \ S : Nat) (topic_hours : List Nat) :\n  N > 0 → M > 0 → S > 0 → S ≤ 16 → topic_hours.length\
  \ > 0 →\n  max_topics_prepared N M S topic_hours ≤ topic_hours.length := sorry\n\
  \n\ntheorem max_topics_zero_when_s_too_large (N M S : Nat) (topic_hours : List Nat)\
  \ :\n  N > 0 → M > 0 → S ≥ 17 → topic_hours.length > 0 →\n  max_topics_prepared\
  \ N M S topic_hours = 0 := sorry\n\n\n\n\ntheorem max_topics_bounded_by_feasible\
  \ (N M S : Nat) (topic_hours : List Nat) :\n  N > 0 → M > 0 → S > 0 → S ≤ 16 → topic_hours.length\
  \ > 0 →\n  max_topics_prepared N M S topic_hours ≤ \n    (List.countP (fun h =>\
  \ h/S ≤ 2) topic_hours) := sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval max_topics_prepared\
  \ 5 4 10 [10, 24, 30, 19, 40]\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval max_topics_prepared\
  \ 5 4 16 [7, 16, 35, 10, 15]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
