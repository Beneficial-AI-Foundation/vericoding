"vc-description": "## Task\n\nGiven a positive integer as input, return the output\
  \ as a string in the following format: \n\nEach element, corresponding to a digit\
  \ of the number, multiplied by a power of 10 in such a way that with the sum of\
  \ these elements you can obtain the original number.\n\n## Examples\n\nInput | Output\n\
  ---   | ---\n0     | \"\"\n56    | \"5\\*10+6\"\n60    | \"6\\*10\"\n999   | \"\
  9\\*100+9\\*10+9\"\n10004 | \"1\\*10000+4\"\n\nNote: `input >= 0`"
"vc-preamble": "import Imports.AllImports\n\ndef splitString (s : String) (sep : String)\
  \ : List String := sorry\ndef containsString (s : String) (sub : String) : Bool\
  \ := sorry"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def startsWithString (s : String) (pre : String) : Bool := sorry\n\
  \ndef simplify (n : Nat) : String := sorry\n"
"vc-theorems": "theorem simplify_zero : \n  simplify 0 = \"\" := sorry\n\n\ntheorem\
  \ simplify_format_valid (n : Nat) (h : n > 0) :\n  let terms := splitString (simplify\
  \ n) \"+\"\n  terms.length > 0 := sorry\n\n\ntheorem simplify_terms_valid (n : Nat)\
  \ (h : n > 0) :\n  let terms := splitString (simplify n) \"+\"\n  ∀ t ∈ terms, \n\
  \    (containsString t \"*\" ∧ \n     let parts := splitString t \"*\"\n     parts.length\
  \ = 2 ∧\n     let digit := parts[0]!\n     let power := parts[1]!\n     startsWithString\
  \ power \"10\" ∧\n     let digitNum := digit.toNat!\n     1 ≤ digitNum ∧ digitNum\
  \ ≤ 9)\n    ∨\n    (¬containsString t \"*\" ∧\n     t.all Char.isDigit ∧\n     let\
  \ termNum := t.toNat!\n     1 ≤ termNum ∧ termNum ≤ 9) := sorry\n\n\ntheorem simplify_sums_to_input\
  \ (n : Nat) :\n  let terms := splitString (simplify n) \"+\"\n  terms.foldl\n  \
  \  (fun acc t => \n      if containsString t \"*\" then \n        let parts := splitString\
  \ t \"*\"\n        acc + parts[0]!.toNat! * parts[1]!.toNat!\n      else\n     \
  \   acc + t.toNat!)\n    0\n  = n := sorry\n\n\ntheorem simplify_no_leading_zeros\
  \ (n : Nat) (h : n > 0) :\n  let terms := splitString (simplify n) \"+\"\n  ∀ t\
  \ ∈ terms, ¬startsWithString t \"0\" := sorry\n\n/--\ninfo: '5*10+6'\n-/\n#guard_msgs\
  \ in\n#eval simplify 56\n\n/--\ninfo: '9*100+9*10+9'\n-/\n#guard_msgs in\n#eval\
  \ simplify 999\n\n/--\ninfo: '1*10000+4'\n-/\n#guard_msgs in\n#eval simplify 10004\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
