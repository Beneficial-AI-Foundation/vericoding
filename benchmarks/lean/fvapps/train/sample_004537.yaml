"vc-description": "Given 2 strings, `a` and `b`, return a string of the form: `shorter+reverse(longer)+shorter.`\n\
  \n\nIn other words, the shortest string has to be put as prefix and as suffix of\
  \ the reverse of the longest.\n\nStrings `a` and `b` may be empty, but not null\
  \ (In C# strings may also be null. Treat them as if they are empty.).  \nIf `a`\
  \ and `b` have the same length treat `a` as the longer producing `b+reverse(a)+b`"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def shorter_reverse_longer (a b : String) : String := sorry\n\n\
  def reverse (s : String) : String := sorry\n"
"vc-theorems": "theorem shorter_reverse_longer_length (a b : String) : \n  let result\
  \ := shorter_reverse_longer a b\n  String.length result = 2 * min (String.length\
  \ a) (String.length b) + max (String.length a) (String.length b)\n  := sorry\n\n\
  \ntheorem shorter_reverse_longer_empty_left (s : String) :\n  shorter_reverse_longer\
  \ \"\" s = reverse s := sorry\n\n\ntheorem shorter_reverse_longer_empty_right (s\
  \ : String) :\n  shorter_reverse_longer s \"\" = reverse s := sorry\n\n/--\ninfo:\
  \ 'abcdtsrifabcd'\n-/\n#guard_msgs in\n#eval shorter_reverse_longer \"first\" \"\
  abcd\"\n\n/--\ninfo: 'bauollehbau'\n-/\n#guard_msgs in\n#eval shorter_reverse_longer\
  \ \"hello\" \"bau\"\n\n/--\ninfo: 'dcba'\n-/\n#guard_msgs in\n#eval shorter_reverse_longer\
  \ \"\" \"abcd\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
