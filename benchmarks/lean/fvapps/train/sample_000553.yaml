"vc-description": "Kefaa has developed a novel decomposition of a tree. He claims\
  \ that this decomposition solves many difficult problems related to trees. However,\
  \ he doesn't know how to find it quickly, so he asks you to help him.\nYou are given\
  \ a tree with $N$ vertices numbered $1$ through $N$. Let's denote an edge between\
  \ vertices $u$ and $v$ by $(u, v)$. The triple-tree decomposition is a partition\
  \ of edges of the tree into unordered triples of edges $(a, b), (a, c), (a, d)$\
  \ such that $a \\neq b \\neq c \\neq d$. Each edge must belong to exactly one triple.\n\
  Help Kefaa with this problem — find a triple-tree decomposition of the given tree\
  \ or determine that no such decomposition exists.\n\n-----Input-----\n- The first\
  \ line of the input contains a single integer $T$ denoting the number of test cases.\
  \ The description of $T$ test cases follows.\n- The first line of each test case\
  \ contains a single integer $N$.\n- Each of the following $N-1$ lines contains two\
  \ space-separated integers $u$ and $v$ describing an edge between vertices $u$ and\
  \ $v$ of the tree.\n\n-----Output-----\n- For each test case, print a line containing\
  \ the string \"YES\" if a triple-tree decomposition of the given tree exists or\
  \ \"NO\" otherwise.\n- If it exists, print $\\frac{N-1}{3}$ more lines describing\
  \ a decomposition.\n- Each of these lines should contain four space-separated integers\
  \ $a$, $b$, $c$ and $d$ describing a triple of edges $(a, b), (a, c), (a, d)$.\n\
  If more than one triple-tree decomposition exists, you may output any one.\n\n-----Constraints-----\n\
  - $1 \\le T \\le 100$\n- $2 \\le N \\le 2 \\cdot 10^5$\n- $1 \\le u, v \\le N$\n\
  - the sum of $N$ over all test cases does not exceed $2 \\cdot 10^5$\n\n-----Subtasks-----\n\
  Subtask #1 (20 points): $2 \\le N \\le 10$\nSubtask #2 (30 points):$2 \\le N \\\
  le 5000$ and the sum of $N$ overall testcases doesn't exceed $5000$\nSubtask #3\
  \ (50 points): original constraints\n\n-----Example Input-----\n2\n4\n1 2\n1 3\n\
  1 4\n7\n1 2\n2 3\n1 4\n4 5\n1 6\n6 7\n\n-----Example Output-----\nYES\n1 2 3 4\n\
  NO"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_triple_tree_decomposition (n: Nat) (edges: List (Nat\
  \ × Nat)) : List String := sorry\n\n\n\ntheorem result_format_no\n  {n: Nat} {edges:\
  \ List (Nat × Nat)}\n  (h1: n ≥ 4) (h2: n ≤ 20) \n  (result: List String)\n  (h3:\
  \ result = solve_triple_tree_decomposition n edges)\n  (h4: result.head? = some\
  \ \"NO\") :\n  result = [\"NO\"] := sorry\n"
"vc-theorems": "theorem minimal_valid_case :\n  solve_triple_tree_decomposition 4\
  \ [(1,2), (1,3), (1,4)] = \n    [\"YES\", \"1 2 3 4\"] := sorry\n\n\ntheorem small_invalid_case\
  \ :\n  solve_triple_tree_decomposition 3 [(1,2), (2,3)] = \n    [\"NO\"] := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
