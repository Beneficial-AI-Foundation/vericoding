"vc-description": "There is a row of m houses in a small city, each house must be\
  \ painted with one of the n colors (labeled from 1 to n), some houses that has been\
  \ painted last summer should not be painted again.\nA neighborhood is a maximal\
  \ group of continuous houses that are painted with the same color. (For example:\
  \ houses = [1,2,2,3,3,2,1,1] contains 5 neighborhoods  [{1}, {2,2}, {3,3}, {2},\
  \ {1,1}]).\nGiven an array houses, an m * n matrix cost and an integer target where:\n\
  \nhouses[i]: is the color of the house i, 0 if the house is not painted yet.\ncost[i][j]:\
  \ is the cost of paint the house i with the color j+1.\n\nReturn the minimum cost\
  \ of painting all the remaining houses in such a way that there are exactly target\
  \ neighborhoods, if not possible return -1.\n \nExample 1:\nInput: houses = [0,0,0,0,0],\
  \ cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3\nOutput:\
  \ 9\nExplanation: Paint houses of this way [1,2,2,1,1]\nThis array contains target\
  \ = 3 neighborhoods, [{1}, {2,2}, {1,1}].\nCost of paint all houses (1 + 1 + 1 +\
  \ 1 + 5) = 9.\n\nExample 2:\nInput: houses = [0,2,1,2,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]],\
  \ m = 5, n = 2, target = 3\nOutput: 11\nExplanation: Some houses are already painted,\
  \ Paint the houses of this way [2,2,1,2,2]\nThis array contains target = 3 neighborhoods,\
  \ [{2,2}, {1}, {2,2}]. \nCost of paint the first and last house (10 + 1) = 11.\n\
  \nExample 3:\nInput: houses = [0,0,0,0,0], cost = [[1,10],[10,1],[1,10],[10,1],[1,10]],\
  \ m = 5, n = 2, target = 5\nOutput: 5\n\nExample 4:\nInput: houses = [3,1,2,3],\
  \ cost = [[1,1,1],[1,1,1],[1,1,1],[1,1,1]], m = 4, n = 3, target = 3\nOutput: -1\n\
  Explanation: Houses are already painted with a total of 4 neighborhoods [{3},{1},{2},{3}]\
  \ different of target = 3.\n\n \nConstraints:\n\nm == houses.length == cost.length\n\
  n == cost[i].length\n1 <= m <= 100\n1 <= n <= 20\n1 <= target <= m\n0 <= houses[i] <=\
  \ n\n1 <= cost[i][j] <= 10^4"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def minCost (houses : List Nat) (cost : List (List Nat)) (m n target\
  \ : Nat) : Int := sorry\n\ntheorem min_cost_non_negative \n  (houses : List Nat)\
  \ (cost : List (List Nat)) (m n target : Nat) :\n  let result := minCost houses\
  \ cost m n target\n  result = -1 ∨ result ≥ 0 := sorry\n"
"vc-theorems": "theorem min_cost_precolored\n  (houses : List Nat) (cost : List (List\
  \ Nat)) (m n target : Nat)\n  (h : ∀ h ∈ houses, h > 0) :\n  let neighborhoods :=\
  \ \n    (List.zip houses (List.drop 1 houses)).foldl\n      (fun acc (p : Nat ×\
  \ Nat) => if p.1 ≠ p.2 then acc + 1 else acc) 1\n  neighborhoods ≠ target → minCost\
  \ houses cost m n target = -1 := sorry\n\n\ntheorem min_cost_deterministic\n  (houses\
  \ : List Nat) (cost : List (List Nat)) (m n target : Nat) :\n  minCost houses cost\
  \ m n target = minCost houses cost m n target := sorry\n\n\ntheorem min_cost_single_house_empty\n\
  \  (cost : List (List Nat)) :\n  minCost [0] [[1]] 1 1 1 = 1 := sorry\n\n\ntheorem\
  \ min_cost_single_house_colored :\n  minCost [1] [[1]] 1 1 1 = 0 := sorry\n\n\n\
  theorem min_cost_impossible_target :\n  minCost [0,0] [[1,1], [1,1]] 2 2 3 = -1\
  \ := sorry\n\n/--\ninfo: 9\n-/\n#guard_msgs in\n#eval min_cost [0, 0, 0, 0, 0] [[1,\
  \ 10], [10, 1], [10, 1], [1, 10], [5, 1]] 5 2 3\n\n/--\ninfo: 11\n-/\n#guard_msgs\
  \ in\n#eval min_cost [0, 2, 1, 2, 0] [[1, 10], [10, 1], [10, 1], [1, 10], [5, 1]]\
  \ 5 2 3\n\n/--\ninfo: -1\n-/\n#guard_msgs in\n#eval min_cost [3, 1, 2, 3] [[1, 1,\
  \ 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]] 4 3 3\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
