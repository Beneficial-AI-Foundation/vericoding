"vc-description": "Implement a function, `multiples(m, n)`, which returns an array\
  \ of the first `m` multiples of the real number `n`. Assume that `m` is a positive\
  \ integer.\n\nEx.\n```\nmultiples(3, 5.0)\n```\nshould return\n```\n[5.0, 10.0,\
  \ 15.0]\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def multiples (m : Nat) (n : Int) : Array Int :=\n  sorry\n"
"vc-theorems": "theorem multiples_length {m : Nat} {n : Int} (h : m ≤ 1000) :\n  (multiples\
  \ m n).size = m := sorry\n\n\ntheorem multiples_sequence {m : Nat} {n : Int} (h1\
  \ : m ≤ 1000) (h2 : m > 0) :\n  ∀ i : Nat, i < m → (multiples m n)[i]! = (i + 1)\
  \ * n := sorry\n\n\ntheorem multiples_first {m : Nat} {n : Int} (h1 : m ≤ 1000)\
  \ (h2 : m > 0) :\n  (multiples m n)[0]! = n := sorry\n\n\ntheorem multiples_sign_preservation\
  \ {m : Nat} {n : Int} (h1 : m ≤ 1000) (h2 : m > 0) :\n  (n < 0 → ∀ x ∈ multiples\
  \ m n, x < 0) ∧\n  (n > 0 → ∀ x ∈ multiples m n, x > 0) ∧\n  (n = 0 → ∀ x ∈ multiples\
  \ m n, x = 0) := sorry\n\n/--\ninfo: [5, 10, 15]\n-/\n#guard_msgs in\n#eval multiples\
  \ 3 5\n\n/--\ninfo: [-1, -2, -3, -4, -5]\n-/\n#guard_msgs in\n#eval multiples 5\
  \ -1\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
