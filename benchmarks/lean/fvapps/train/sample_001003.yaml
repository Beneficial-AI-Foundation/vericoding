"vc-description": "A manufacturing project consists of exactly $K$ tasks. The board\
  \ overviewing the project wants to hire $K$ teams of workers — one for each task.\
  \ All teams begin working simultaneously.\nObviously, there must be at least one\
  \ person in each team. For a team of $A$ workers, it takes exactly $A$ days to complete\
  \ the task they are hired for. Each team acts independently, unaware of the status\
  \ of other teams (whether they have completed their tasks or not), and submits their\
  \ result for approval on the $A$-th day.\nHowever, the board approves the project\
  \ only if all $K$ teams complete their tasks on the same day — it rejects everything\
  \ submitted on any other day. The day after a team finds out that its result was\
  \ rejected, it resumes work on the same task afresh. Therefore, as long as a team\
  \ of $A$ workers keeps getting rejected, it submits a new result of their task for\
  \ approval on the $A$-th, $2A$-th, $3A$-th day etc.\nThe board wants to hire workers\
  \ in such a way that it takes exactly $X$ days to complete the project. Find the\
  \ smallest number of workers it needs to hire.\n\n-----Input-----\n- The first line\
  \ of the input contains a single integer $T$ denoting the number of test cases.\
  \ The description of $T$ test cases follows.\n- The first and only line of each\
  \ test case contains two space-separated integers $K$ and $X$.\n\n-----Output-----\n\
  For each test case, print a single line containing one integer — the smallest required\
  \ number of workers.\n\n-----Constraints-----\n- $1 \\le T \\le 40$\n- $2 \\le K,\
  \ X \\le 10^6$\n\n-----Example Input-----\n2\n2 3\n2 6\n\n-----Example Output-----\n\
  4\n5\n\n-----Explanation-----\nExample case 1: We can hire a team of $3$ workers\
  \ for task $1$ and $1$ worker for task $2$. The one-man team working on task $2$\
  \ completes it and submits the result for approval on each day, but it is rejected\
  \ on the first and second day. On the third day, the team working on task $1$ also\
  \ completes their task, so the project gets approved after exactly $3$ days.\nExample\
  \ case 2: We can hire a team of $3$ workers for task $1$ and a team of $2$ workers\
  \ for task $2$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_min_workers (k x : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem find_min_workers_ensures_natural_number (k x : Nat) (h1: k\
  \ ≥ 1) (h2: x ≥ 2) (h3: k ≤ x) :\n  ∃ (result : Nat), find_min_workers k x = result\n\
  \  := sorry\n\n\ntheorem find_min_workers_greater_than_k (k x : Nat) (h1: k ≥ 1)\
  \ (h2: x ≥ 2) (h3: k ≤ x) :\n  find_min_workers k x ≥ k\n  := sorry\n\n\ntheorem\
  \ find_min_workers_single_worker (x : Nat) (h1: x ≥ 2) :\n  find_min_workers 1 x\
  \ = x\n  := sorry\n\n\ntheorem find_min_workers_basic_cases :\n  find_min_workers\
  \ 2 3 = 4 ∧ find_min_workers 2 6 = 5\n  := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
