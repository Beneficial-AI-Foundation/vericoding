"vc-description": "Given 2 elevators (named \"left\" and \"right\") in a building\
  \ with 3 floors (numbered `0` to `2`), write a function `elevator` accepting 3 arguments\
  \ (in order):\n\n- `left` - The current floor of the left elevator\n- `right` -\
  \ The current floor of the right elevator\n- `call` -  The floor that called an\
  \ elevator\n\nIt should return the name of the elevator closest to the called floor\
  \ (`\"left\"`/`\"right\"`).\n\nIn the case where both elevators are equally distant\
  \ from the called floor, choose the elevator to the right.\n\nYou can assume that\
  \ the inputs will always be valid integers between 0-2.\n\nExamples:\n\n```python\n\
  elevator(0, 1, 0) # => \"left\"\nelevator(0, 1, 1) # => \"right\"\nelevator(0, 1,\
  \ 2) # => \"right\"\nelevator(0, 0, 0) # => \"right\"\nelevator(0, 2, 1) # => \"\
  right\"\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def Direction := String\ndef elevator (left right call : Int) :\
  \ Direction :=\n  sorry\n"
"vc-theorems": "theorem elevator_returns_valid_result \n  (left right call : Int)\
  \ :\n  (elevator left right call = \"left\") ∨ (elevator left right call = \"right\"\
  ) :=\nsorry\n\n\ntheorem elevator_nearest_to_call\n  (left right call : Int) :\n\
  \  let left_dist := Int.natAbs (call - left)\n  let right_dist := Int.natAbs (call\
  \ - right)\n  (left_dist < right_dist → elevator left right call = \"left\") ∧\n\
  \  (left_dist ≥ right_dist → elevator left right call = \"right\") :=\nsorry\n\n\
  \ntheorem elevator_equal_distance\n  (pos call : Int) :\n  elevator pos pos call\
  \ = \"right\" :=\nsorry\n\n/--\ninfo: 'left'\n-/\n#guard_msgs in\n#eval elevator\
  \ 0 1 0\n\n/--\ninfo: 'right'\n-/\n#guard_msgs in\n#eval elevator 0 0 0\n\n/--\n\
  info: 'left'\n-/\n#guard_msgs in\n#eval elevator 1 2 0\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
