"vc-description": "Lets wish Horsbug98 on his birthday and jump right into the question.\n\
  In Chefland, $6$ new mobile brands have appeared each providing a range of smartphones.\
  \ For simplicity let the brands be represented by numbers $1$ to $6$. All phones\
  \ are sold at the superstore. \nThere are total $N$ smartphones. Let $P_i$ & $B_i$\
  \ be the price and the brand of the $i^{th}$ smartphone. The superstore knows all\
  \ the price and brand details beforehand. \nEach customer has a preference for brands.\
  \ The preference is a subset of the brands available (i.e $1$ to $6$). Also, the\
  \ customer will buy the $K^{th}$ costliest phone among all the phones of his preference.\n\
  You will be asked $Q$ queries. Each query consists of the preference of the customer\
  \ and $K$.\nFind the price the customer has to pay for his preference. If no such\
  \ phone is available, print $-1$\nNote that for each query the total number of smartphones\
  \ is always $N$ since, after each purchase, the phones are replaced instantly.\n\
  \n-----Input:-----\n- First Line contains $N$ and $Q$\n- Second-line contains $N$\
  \ integers $P_1,P_2,...,P_N$ (Price)\n- Third line contains $N$ integers $B_1,B_2,...,B_N$\
  \ (Brand)\n- Each of the next Q lines contains a query, the query is describes below\n\
  - First line of each quey contains $b$ and $K$ where $b$ is the size of the preference\
  \ subset.\n- Second line of each query contains $b$ integers, describing the preference\
  \ subset.\n\n-----Output:-----\nFor each query, print the price to be paid.\n\n\
  -----Constraints-----\n- $1 \\leq N, Q, P_i \\leq 10^5$\n- $1 \\leq B_i, b \\leq\
  \ 6$\n- $1 \\leq K \\leq N$\n\n-----Sample Input:-----\n4 2\n4 5 6 7 \n1 2 3 4 \n\
  3 3\n1 2 3\n3 4\n4 5 6 \n\n-----Sample Output:-----\n4\n\n-1\n\n-----Explaination-----\n\
  Query 1: The preference subset is {1, 2, 3}, The prices of phones available of these\
  \ brands are {4, 5, 6}. The third costliest phone is 4.\nQuery 2: The preference\
  \ subset is {4, 5, 6}, The prices of phones available of these brands are {7}.\n\
  Fouth costliest phone is required, which is not available. Hence, answer is $-1$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_phones (N Q : Nat) (prices : List Nat) (brands : List\
  \ Nat) \n  (queries : List ((Nat × Nat) × List Nat)) : List Int := sorry\n"
"vc-theorems": "theorem solve_phones_result_length (N Q : Nat) (prices : List Nat)\
  \ \n  (brands : List Nat) (queries : List ((Nat × Nat) × List Nat)) :\n  let result\
  \ := solve_phones N Q prices brands queries\n  List.length result = Q := sorry\n\
  \n\ntheorem solve_phones_result_valid (N Q : Nat) (prices : List Nat) \n  (brands\
  \ : List Nat) (queries : List ((Nat × Nat) × List Nat)) : \n  let result := solve_phones\
  \ N Q prices brands queries\n  ∀ x ∈ result, x = -1 ∨ (∃ p ∈ prices, x = p) := sorry\n\
  \n\ntheorem solve_phones_invalid_k (N : Nat) (prices : List Nat)\n  (brands : List\
  \ Nat) (preferred_brands : List Nat) :\n  let k := List.length prices + 1\n  let\
  \ query := ((List.length preferred_brands, k), preferred_brands)\n  let result :=\
  \ solve_phones N 1 prices brands [query]\n  result = [-1] := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
