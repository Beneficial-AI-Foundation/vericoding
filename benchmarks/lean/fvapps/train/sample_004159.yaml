vc-description: |-
  In this kata, you will make a function that converts between `camelCase`, `snake_case`, and `kebab-case`.

  You must write a function that changes to a given case. It must be able to handle all three case types:

  ```python
  py> change_case("snakeCase", "snake")
  "snake_case"
  py> change_case("some-lisp-name", "camel")
  "someLispName"
  py> change_case("map_to_all", "kebab")
  "map-to-all"
  py> change_case("doHTMLRequest", "kebab")
  "do-h-t-m-l-request"
  py> change_case("invalid-inPut_bad", "kebab")
  None
  py> change_case("valid-input", "huh???")
  None
  py> change_case("", "camel")
  ""
  ```

  Your function must deal with invalid input as shown, though it will only be passed strings. Furthermore, all valid identifiers will be lowercase except when necessary, in other words on word boundaries in `camelCase`.

  _**(Any translations would be greatly appreciated!)**_
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def change_case (s : String) (target : String) : Option String :=
    sorry
vc-theorems: |
  theorem mixed_formats_returns_none (s : String) :
    (s.contains '_' && s.contains '-') ∨ 
    (s.contains '_' && s ≠ s.toLower) ∨
    (s.contains '-' && s ≠ s.toLower) →
    change_case s "snake" = none ∧ 
    change_case s "kebab" = none ∧
    change_case s "camel" = none :=
    sorry


  theorem invalid_target_returns_none (s target : String) :
    target ≠ "snake" ∧ target ≠ "kebab" ∧ target ≠ "camel" →
    change_case s target = none :=
    sorry


  theorem single_word_unchanged (s : String) :
    s.all (fun c => c.isLower) →
    change_case s "snake" = some s ∧
    change_case s "kebab" = some s ∧
    change_case s "camel" = some s :=
    sorry


  theorem empty_string (target : String) :
    (target = "snake" ∨ target = "kebab" ∨ target = "camel") →
    change_case "" target = some "" :=
    sorry

  /--
  info: 'snake_case'
  -/
  #guard_msgs in
  #eval change_case "snakeCase" "snake"

  /--
  info: 'someLispName'
  -/
  #guard_msgs in
  #eval change_case "some-lisp-name" "camel"

  /--
  info: 'map-to-all'
  -/
  #guard_msgs in
  #eval change_case "map_to_all" "kebab"

  /--
  info: ''
  -/
  #guard_msgs in
  #eval change_case "" "camel"
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
