"vc-description": "Zonal Computing Olympiad 2014, 30 Nov 2013\n\nIn ICO School, all\
  \ students have to participate regularly in SUPW.  There is a different SUPW activity\
  \ each day, and each activity has its own duration.  The SUPW schedule for the next\
  \ term has been announced, including information about the number of minutes taken\
  \ by each activity.\n\nNikhil has been designated SUPW coordinator.  His task is\
  \ to assign SUPW duties to students, including himself.  The school's rules say\
  \ that no student can go three days in a row without any SUPW duty.\n\nNikhil wants\
  \ to find an assignment of SUPW duty for himself that minimizes the number of minutes\
  \ he spends overall on SUPW.\n\n-----Input format-----\nLine 1: A single integer\
  \ N, the number of days in the future for which SUPW data is available.\nLine 2:\
  \ N non-negative integers, where the integer in position i represents the number\
  \ of minutes required for SUPW work on day i.\n\n-----Output format-----\nThe output\
  \ consists of a single non-negative integer, the minimum number of minutes that\
  \ Nikhil needs to spend on SUPW duties this term \n\n-----Sample Input 1-----\n\
  10\n3 2 1 1 2 3 1 3 2 1\n\n-----Sample Output 1-----\n4\n\n(Explanation: 1+1+1+1)\n\
  \n-----Sample Input 2-----\n8\n3 2 3 2 3 5 1 3\n\n-----Sample Output 2-----\n5\n\
  \n(Explanation: 2+2+1)\n\n-----Test data-----\nThere is only one subtask worth 100\
  \ marks.  In all inputs:\n\n• 1 ≤ N ≤ 2×105\n• The number of minutes of SUPW each\
  \ day is between 0 and\n104, inclusive.\n\n-----Live evaluation data-----\nThere\
  \ are 12 test inputs on the server during the exam."
"vc-preamble": "import Imports.AllImports\n\ndef min_supw_time (n : Nat) (days : List\
  \ Nat) : Nat := sorry\n\ndef list_min (l : List Nat) : Nat :=\n  match l with\n\
  \  | [] => 0\n  | x::xs => List.foldl min x xs\n\n\ndef list_sum (l : List Nat)\
  \ : Nat :=\n  match l with\n  | [] => 0\n  | x::xs => x + list_sum xs\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def list_take_last (n : Nat) (l : List Nat) : List Nat :=\n  match\
  \ n, l with\n  | 0, _ => []\n  | _, [] => []\n  | n+1, x::xs => x :: list_take_last\
  \ n xs\n\n\n\n\n\n\n"
"vc-theorems": "theorem min_supw_time_monotonic (n : Nat) (days : List Nat) (i : Nat)\
  \ (x : Nat)\n  (h1 : n = days.length) (h2 : n ≥ 3) (h3 : i < n) :\n  let days' :=\
  \ List.set days i (days[i] + x)\n  min_supw_time n days' ≥ min_supw_time n days\
  \ := sorry\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval min_supw_time 10 [3, 2, 1,\
  \ 1, 2, 3, 1, 3, 2, 1]\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval min_supw_time\
  \ 8 [3, 2, 3, 2, 3, 5, 1, 3]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
