"vc-description": "There is a sale in a supermarket, there will be a discount every\
  \ n customer.\nThere are some products in the supermarket where the id of the i-th\
  \ product is products[i] and the price per unit of this product is prices[i].\n\
  The system will count the number of customers and when the n-th customer arrive\
  \ he/she will have a discount on the bill. (i.e if the cost is x the new cost is\
  \ x - (discount * x) / 100). Then the system will start counting customers again.\n\
  The customer orders a certain amount of each product where product[i] is the id\
  \ of the i-th product the customer ordered and amount[i] is the number of units\
  \ the customer ordered of that product.\nImplement the Cashier class:\n\nCashier(int\
  \ n, int discount, int[] products, int[] prices) Initializes the object with n,\
  \ the discount, the products and their prices.\ndouble getBill(int[] product, int[]\
  \ amount) returns the value of the bill and apply the discount if needed. Answers\
  \ within 10^-5 of the actual value will be accepted as correct.\n\n \nExample 1:\n\
  Input\n[\"Cashier\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\"\
  ,\"getBill\",\"getBill\"]\n[[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[[7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2,3,5],[5,3,2]]]\n\
  Output\n[null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0]\nExplanation\nCashier\
  \ cashier = new Cashier(3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]);\ncashier.getBill([1,2],[1,2]);\
  \                        // return 500.0, bill = 1 * 100 + 2 * 200 = 500.\ncashier.getBill([3,7],[10,10]);\
  \                      // return 4000.0\ncashier.getBill([1,2,3,4,5,6,7],[1,1,1,1,1,1,1]);\
  \    // return 800.0, The bill was 1600.0 but as this is the third customer, he\
  \ has a discount of 50% which means his bill is only 1600 - 1600 * (50 / 100) =\
  \ 800.\ncashier.getBill([4],[10]);                           // return 4000.0\n\
  cashier.getBill([7,3],[10,10]);                      // return 4000.0\ncashier.getBill([7,5,3,1,6,4,2],[10,10,10,9,9,9,7]);\
  \ // return 7350.0, Bill was 14700.0 but as the system counted three more customers,\
  \ he will have a 50% discount and the bill becomes 7350.0\ncashier.getBill([2,3,5],[5,3,2]);\
  \                    // return 2500.0\n\n \nConstraints:\n\n1 <= n <= 10^4\n0 <=\
  \ discount <= 100\n1 <= products.length <= 200\n1 <= products[i] <= 200\nThere are\
  \ not repeated elements in the array products.\nprices.length == products.length\n\
  1 <= prices[i] <= 1000\n1 <= product.length <= products.length\nproduct[i] exists\
  \ in products.\namount.length == product.length\n1 <= amount[i] <= 1000\nAt most\
  \ 1000 calls will be made to getBill.\nAnswers within 10^-5 of the actual value\
  \ will be accepted as correct."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def Cashier.getBill (c: Cashier) (selected_products: List Nat)\
  \ (amounts: List Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem cashier_initialization_n {n disc prods prices : Nat} (c :\
  \ Cashier) :\n  c.n = n → c.n > 0 :=\nsorry\n\n\ntheorem cashier_initialization_discount\
  \ {n disc prods prices: Nat} (c : Cashier) :\n  c.discount = disc → c.discount ≥\
  \ 0 ∧ c.discount ≤ 100 :=\nsorry\n\n\ntheorem cashier_products_nonempty {n disc\
  \ : Nat} {prods prices : List Nat} (c : Cashier) :\n  c.products.length > 0 :=\n\
  sorry\n\n\ntheorem bill_nonnegative {n disc : Nat} {prods prices selected amounts\
  \ : List Nat} (c : Cashier) :\n  c.getBill selected amounts ≥ 0 := \nsorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
