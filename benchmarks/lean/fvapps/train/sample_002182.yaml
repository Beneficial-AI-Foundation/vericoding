"vc-description": "Alice and Bob are playing a fun game of tree tag.\n\nThe game is\
  \ played on a tree of $n$ vertices numbered from $1$ to $n$. Recall that a tree\
  \ on $n$ vertices is an undirected, connected graph with $n-1$ edges.\n\nInitially,\
  \ Alice is located at vertex $a$, and Bob at vertex $b$. They take turns alternately,\
  \ and Alice makes the first move. In a move, Alice can jump to a vertex with distance\
  \ at most $da$ from the current vertex. And in a move, Bob can jump to a vertex\
  \ with distance at most $db$ from the current vertex. The distance between two vertices\
  \ is defined as the number of edges on the unique simple path between them. In particular,\
  \ either player is allowed to stay at the same vertex in a move. Note that when\
  \ performing a move, a player only occupies the starting and ending vertices of\
  \ their move, not the vertices between them.\n\nIf after at most $10^{100}$ moves,\
  \ Alice and Bob occupy the same vertex, then Alice is declared the winner. Otherwise,\
  \ Bob wins.\n\nDetermine the winner if both players play optimally.\n\n\n-----Input-----\n\
  \nEach test contains multiple test cases. The first line contains the number of\
  \ test cases $t$ ($1 \\le t \\le 10^4$). Description of the test cases follows.\n\
  \nThe first line of each test case contains five integers $n,a,b,da,db$ ($2\\le\
  \ n\\le 10^5$, $1\\le a,b\\le n$, $a\\ne b$, $1\\le da,db\\le n-1$)  — the number\
  \ of vertices, Alice's vertex, Bob's vertex, Alice's maximum jumping distance, and\
  \ Bob's maximum jumping distance, respectively.\n\nThe following $n-1$ lines describe\
  \ the edges of the tree. The $i$-th of these lines contains two integers $u$, $v$\
  \ ($1\\le u, v\\le n, u\\ne v$), denoting an edge between vertices $u$ and $v$.\
  \ It is guaranteed that these edges form a tree structure.\n\nIt is guaranteed that\
  \ the sum of $n$ across all test cases does not exceed $10^5$.\n\n\n-----Output-----\n\
  \nFor each test case, output a single line containing the winner of the game: \"\
  Alice\" or \"Bob\".\n\n\n-----Example-----\nInput\n4\n4 3 2 1 2\n1 2\n1 3\n1 4\n\
  6 6 1 2 5\n1 2\n6 5\n2 3\n3 4\n4 5\n9 3 9 2 5\n1 2\n1 6\n1 9\n1 3\n9 5\n7 9\n4 8\n\
  4 3\n11 8 11 3 3\n1 2\n11 9\n4 9\n6 5\n2 10\n3 2\n5 9\n8 3\n7 4\n7 10\n\nOutput\n\
  Alice\nBob\nAlice\nAlice\n\n\n\n-----Note-----\n\nIn the first test case, Alice\
  \ can win by moving to vertex $1$. Then wherever Bob moves next, Alice will be able\
  \ to move to the same vertex on the next move.\n\n [Image] \n\nIn the second test\
  \ case, Bob has the following strategy to win. Wherever Alice moves, Bob will always\
  \ move to whichever of the two vertices $1$ or $6$ is farthest from Alice.\n\n [Image]"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_tree_tag (n a b da db : Nat) (edges : List (Nat × Nat))\
  \ : String := sorry\n\n-- Type safety - result must be one of two valid strings"
"vc-theorems": "theorem solve_tree_tag_valid_output\n  (n a b da db : Nat) (edges\
  \ : List (Nat × Nat)) :\n  solve_tree_tag n a b da db edges = \"Alice\" ∨ \n  solve_tree_tag\
  \ n a b da db edges = \"Bob\" := sorry\n\n-- Alice wins if she can move twice as\
  \ fast as Bob\n\ntheorem alice_wins_2x_speed \n  (n a b da db : Nat) (edges : List\
  \ (Nat × Nat)) :\n  2 * da ≥ db →\n  solve_tree_tag n a b da db edges = \"Alice\"\
  \ := sorry\n\n/--\ninfo: 'Alice'\n-/\n#guard_msgs in\n#eval solve_tree_tag 4 3 2\
  \ 1 2 [(1, 2), (1, 3), (1, 4)]\n\n/--\ninfo: 'Bob'\n-/\n#guard_msgs in\n#eval solve_tree_tag\
  \ 6 6 1 2 5 [(1, 2), (6, 5), (2, 3), (3, 4), (4, 5)]\n\n/--\ninfo: 'Alice'\n-/\n\
  #guard_msgs in\n#eval solve_tree_tag 5 5 4 3 4 [(1, 2), (4, 1), (5, 1), (5, 3)]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
