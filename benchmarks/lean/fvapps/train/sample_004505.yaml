"vc-description": "A [binary search tree](https://en.wikipedia.org/wiki/Binary_search_tree)\
  \ is a binary tree that is ordered. This means that if you were to convert the tree\
  \ to an array using an in-order traversal, the array would be in sorted order. The\
  \ benefit gained by this ordering is that when the tree is balanced, searching is\
  \ a logarithmic time operation, since each node you look at that isn't the one you're\
  \ searching for lets you discard half of the tree.\n\nIf you haven't worked with\
  \ binary trees before or don't understand what a traversal is, you can learn more\
  \ about that here: https://www.codewars.com/kata/binary-tree-traversal.\n\nIn this\
  \ kata, you will write a function that will validate that a given binary tree is\
  \ a binary search tree. The sort order is not predefined so it should work with\
  \ either.\n\nThese are valid binary search trees:\n\n        5\n       / \\\n  \
  \    2   7\n     / \\   \\\n    1   3   9\n\n\n      7\n     / \\\n    9   2\n\n\
  \nwhile these are not:\n\n      1\n     / \\\n    2   3\n\n\n      5\n     / \\\n\
  \    2   9\n     \\\n      7\n\nThere are several different approaches you can take\
  \ to solve this kata. If you're not as comfortable with recursion I'd recommend\
  \ practicing that.\n\nNote: no test case tree will contain duplicate numbers."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def make_bst {α : Type} [Ord α] (values : List α) : Tree α := sorry\n\
  \ndef is_bst {α : Type} [Ord α] (t : Tree α) : Bool := sorry\n"
"vc-theorems": "theorem sorted_values_make_valid_bst {α : Type} [Ord α] (values :\
  \ List α) :\n  is_bst (make_bst values) = true := sorry\n\n\ntheorem empty_tree_is_bst\
  \ {α : Type} [Ord α] :\n  is_bst (Tree.leaf : Tree α) = true := sorry \n\n\ntheorem\
  \ single_node_is_bst {α : Type} [Ord α] (x : α) :\n  is_bst (Tree.node x Tree.leaf\
  \ Tree.leaf) = true := sorry\n\n\ntheorem valid_bst_example :\n  let t := Tree.node\
  \ 2 (Tree.node 1 Tree.leaf Tree.leaf) (Tree.node 3 Tree.leaf Tree.leaf)\n  is_bst\
  \ t = true := sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval is_bst T(5, T(2,\
  \ T(1), T(3)), T(7, None, T(9)))\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval\
  \ is_bst T(1, T(2), T(3))\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval is_bst T(7,\
  \ T(9), T(2))\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
