"vc-description": "Given a string that consists of only uppercase English letters,\
  \ you can replace any letter in the string with another letter at most k times.\
  \ Find the length of a longest substring containing all repeating letters you can\
  \ get after performing the above operations.\n\nNote:\nBoth the string's length\
  \ and k will not exceed 104.\n\n\n\nExample 1:\n\nInput:\ns = \"ABAB\", k = 2\n\n\
  Output:\n4\n\nExplanation:\nReplace the two 'A's with two 'B's or vice versa.\n\n\
  \n\n\nExample 2:\n\nInput:\ns = \"AABABBA\", k = 1\n\nOutput:\n4\n\nExplanation:\n\
  Replace the one 'A' in the middle with 'B' and form \"AABBBBA\".\nThe substring\
  \ \"BBBB\" has the longest repeating letters, which is 4."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def character_replacement (s : String) (k : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem character_replacement_basic_properties\n  (s : String) (k\
  \ : Nat) :\n  let result := character_replacement s k\n  -- Result bounded by string\
  \ length\n  result ≤ s.length ∧\n  -- For non-empty strings, result at least min(len(s),\
  \ k+1)\n  (s ≠ \"\" → result ≥ min s.length (k+1)) ∧\n  -- Empty string returns\
  \ 0\n  (s = \"\" → result = 0) ∧\n  -- If k ≥ length, result equals length\n  (k\
  \ ≥ s.length → result = s.length) :=\n  sorry\n\n\n\n\ntheorem character_replacement_empty\n\
  \  (k : Nat) :\n  character_replacement \"\" k = 0 :=\n  sorry\n\n\ntheorem character_replacement_monotonic\n\
  \  (s : String) (k : Nat) :\n  s ≠ \"\" →\n  character_replacement s k ≤ character_replacement\
  \ s (k + 1) :=\n  sorry\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval character_replacement\
  \ \"ABAB\" 2\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval character_replacement \"\
  AABABBA\" 1\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval character_replacement \"\"\
  \ 2\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
