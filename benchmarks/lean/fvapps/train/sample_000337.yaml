"vc-description": "Given an array of integers nums and an integer k. A continuous\
  \ subarray is called nice if there are k odd numbers on it.\nReturn the number of\
  \ nice sub-arrays.\n \nExample 1:\nInput: nums = [1,1,2,1,1], k = 3\nOutput: 2\n\
  Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].\n\
  \nExample 2:\nInput: nums = [2,4,6], k = 1\nOutput: 0\nExplanation: There is no\
  \ odd numbers in the array.\n\nExample 3:\nInput: nums = [2,2,2,1,2,2,1,2,2,2],\
  \ k = 2\nOutput: 16\n\n \nConstraints:\n\n1 <= nums.length <= 50000\n1 <= nums[i]\
  \ <= 10^5\n1 <= k <= nums.length"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def number_of_subarrays (nums: List Int) (k: Int) : Int := sorry\n\
  \ntheorem non_negative_output {nums: List Int} {k: Int} \n  (h1: ∀ x ∈ nums, 1 ≤\
  \ x ∧ x ≤ 100) (h2: 1 ≤ k ∧ k ≤ 100) : \n  number_of_subarrays nums k ≥ 0 := sorry\n"
"vc-theorems": "theorem zero_when_k_too_large {nums: List Int} {k: Int}\n  (h1: ∀\
  \ x ∈ nums, 1 ≤ x ∧ x ≤ 100) (h2: 1 ≤ k ∧ k ≤ 100)\n  (h3: k > nums.length) :\n\
  \  number_of_subarrays nums k = 0 := sorry\n\n\ntheorem k_zero_or_negative_fails\
  \ {nums: List Int} {k: Int}\n  (h1: ∀ x ∈ nums, 1 ≤ x ∧ x ≤ 100) (h2: k ≤ 0) :\n\
  \  ¬ ∃ result, number_of_subarrays nums k = result := sorry\n\n\ntheorem result_invariant_under_even_multiplication\
  \ {nums: List Int} {k: Int}\n  (h1: ∀ x ∈ nums, 1 ≤ x ∧ x ≤ 100) (h2: 1 ≤ k ∧ k\
  \ ≤ 100) :\n  number_of_subarrays nums k = number_of_subarrays (nums.map (λ x =>\
  \ if x % 2 = 0 then x * 2 else x)) k := sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n\
  #eval number_of_subarrays [1, 1, 2, 1, 1] 3\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n\
  #eval number_of_subarrays [2, 4, 6] 1\n\n/--\ninfo: 16\n-/\n#guard_msgs in\n#eval\
  \ number_of_subarrays [2, 2, 2, 1, 2, 2, 1, 2, 2, 2] 2\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
