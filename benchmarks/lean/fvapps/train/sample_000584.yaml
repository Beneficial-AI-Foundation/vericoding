"vc-description": "The bustling town of Siruseri has just one sports stadium. There\
  \ are a number of schools, colleges, sports associations, etc. that use this stadium\
  \ as the venue for their sports events.\nAnyone interested in using the stadium\
  \ has to apply to the Manager of the stadium indicating both the starting date (a\
  \ positive integer $S$) and the length of the sporting event in days (a positive\
  \ integer $D$) they plan to organise. Since these requests could overlap it may\
  \ not be possible to satisfy everyone. Also, there should be at least one gap day\
  \ between any two approved events, so that the stadium can be cleaned.\nIt is the\
  \ job of the Manager to decide who gets to use the stadium and who does not. The\
  \ Manager, being a genial man, would like to keep as many organisations happy as\
  \ possible and hence would like to allocate the stadium so that maximum number of\
  \ events are held.\nSuppose, for example, the Manager receives the following 4 requests:\n\
  $ $\nEvent No.   Starting Date        Length \n\n1                   2         \
  \           5\n2                   9                    7\n3                  15\
  \                    6\n4                   9                    3\n\n$ $ \nHe would\
  \ allot the stadium to events $1$, $4$ and $3$. Event $1$ begins on day $2$ and\
  \ ends on day $6$, event $4$ begins on day $9$ and ends on day $11$ and event $3$\
  \ begins on day $15$ and ends on day $20$. You can verify that it is not possible\
  \ to schedule all the $4$ events (since events $2$ and $3$ overlap and only one\
  \ of them can get to use the stadium).\nYour task is to help the manager find the\
  \ best possible allotment (i.e., the maximum number of events that can use the stadium).\n\
  \n-----Input:-----\nThe first line of the input will contain a single integer $N$\
  \ indicating the number of events for which the Manager has received a request.\
  \ Lines $2,3,...,N+1$ describe the requirements of the $N$ events. Line $i+1$ contains\
  \ two integer $S_i$ and $D_i$ indicating the starting date and the duration of event\
  \ $i$.\n\n-----Output:-----\nYour output must consist of a single line containing\
  \ a single integer $M$, indicating the maximum possible number of events that can\
  \ use the stadium.\n\n-----Constraints:-----\n- $1 \\leq N \\leq 100000$.\n- $1\
  \ \\leq S_i \\leq 1000000$.\n- $1 \\leq D_i \\leq 1000$.\n- $50 \\%$ of test cases\
  \ will also satisfy $1 \\leq N \\leq 10000$.\n\n-----Sample input:-----\n4\n2 5\n\
  9 7\n15 6\n9 3\n\n-----Sample output:-----\n3"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def maxStadiumEvents (events : List (Nat × Nat)) : Nat := sorry\n\
  \ntheorem maxStadiumEvents_non_negative (events : List (Nat × Nat)) :\n  maxStadiumEvents\
  \ events ≥ 0 := sorry\n"
"vc-theorems": "theorem maxStadiumEvents_bounded_by_input (events : List (Nat × Nat))\
  \ :\n  maxStadiumEvents events ≤ events.length := sorry\n\n\ntheorem maxStadiumEvents_empty\
  \ :\n  maxStadiumEvents [] = 0 := sorry\n\n\ntheorem maxStadiumEvents_single_event\
  \ (start duration : Nat) :\n  maxStadiumEvents [(start, duration)] = 1 := sorry\n\
  \n\ntheorem maxStadiumEvents_non_overlapping (events : List (Nat × Nat)) (h : events.length\
  \ > 0) :\n  (∀ i j, i < events.length → j < events.length → i ≠ j →\n    ((events.get!\
  \ i).1 + (events.get! i).2 ≤ (events.get! j).1) ∨ \n    ((events.get! j).1 + (events.get!\
  \ j).2 ≤ (events.get! i).1)) →\n  maxStadiumEvents events = events.length := sorry\n\
  \n\ntheorem maxStadiumEvents_all_overlapping (events : List (Nat × Nat)) (h : events.length\
  \ ≥ 2) :\n  maxStadiumEvents (List.map (fun e => (0, e.2)) events) = 1 := sorry\n\
  \n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval max_stadium_events [(2, 5), (9, 7), (15,\
  \ 6), (9, 3)]\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval max_stadium_events [(1,\
  \ 5)]\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval max_stadium_events [(1, 2), (4,\
  \ 2), (7, 2)]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
