"vc-description": "Get excited, folks, because it is time for the final match of Codechef\
  \ Premier League (CPL)!\nMike and Tracy also want to watch the grand finale, but\
  \ unfortunately, they could not get tickets to the match. However, Mike is not someone\
  \ who gives up so easily — he has a plan to watch the match.\nThe field where the\
  \ match is played is surrounded by a wall with height $K$. Outside, there are $N$\
  \ boxes (numbered $1$ through $N$). For each valid $i$, the $i$-th box has a height\
  \ $H_i$.\nMike wants to take some boxes and stack them on top of each other to build\
  \ two towers. The height of each tower is the sum of heights of all the boxes that\
  \ form it. Of course, no box may be in both towers. The height of each tower should\
  \ be at least $K$. Then Mike can climb on top of one tower and Tracy on top of the\
  \ other, and they can watch the match uninterrupted!\nWhile Mike is busy stacking\
  \ the boxes, Tracy would like to know the smallest number of boxes required to build\
  \ two towers such that each of them has height at least $K$, or at least that it\
  \ is impossible to build such towers. Can you help Tracy?\n\n-----Input-----\n-\
  \ The first line of the input contains a single integer $T$ denoting the number\
  \ of test cases. The description of $T$ test cases follows.\n- The first line of\
  \ each test case contains two space-separated integers $N$ and $K$.\n- The second\
  \ line contains $N$ space-separated integers $H_1, H_2, \\ldots, H_N$.\n\n-----Output-----\n\
  For each test case, print a single line containing one integer — the smallest number\
  \ of boxes required to build two towers, or $-1$ if it is impossible.\n\n-----Constraints-----\n\
  - $1 \\leq T \\leq 5$\n- $1 \\leq N, K \\leq 4,000$\n- $1 \\leq H_i \\leq 10^5$\
  \ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (30 points):\n- $1 \\leq\
  \ N, K \\leq 100$\n- $1 \\leq H_i \\leq 100$ for each valid $i$\nSubtask #2 (70\
  \ points): original constraints\n\n-----Example Input-----\n2\n8 38\n7 8 19 7 8\
  \ 7 10 20\n4 5\n2 10 4 9\n\n-----Example Output-----\n7\n2\n\n-----Explanation-----\n\
  Example case 1: The first tower can be built with boxes $8 + 10 + 20 = 38$ and the\
  \ second tower with boxes $7 + 7 + 8 + 19 = 41$. In this case, the box with height\
  \ $7$ is left unused.\nExample case 2: We only need the box with height $10$ for\
  \ one tower and the box with height $9$ for the other tower."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def build_two_towers (n : Nat) (k : Nat) (heights : List Nat) :\
  \ Int := sorry\n\n/-- Single box twice the height of k always returns -1 -/"
"vc-theorems": "theorem single_tall_box_impossible (height : Nat) :\n  build_two_towers\
  \ 1 height [2 * height] = -1 := sorry\n\n/-- Given a list of heights, building towers\
  \ of minimum height is always possible -/\n\ntheorem min_height_possible (heights\
  \ : List Nat) (h : heights.length ≥ 2) :\n  let n := heights.length\n  let k :=\
  \ heights.minimum?\n  match k with\n  | none => True \n  | some k => build_two_towers\
  \ n k heights ≠ -1\n  := sorry\n\n/-- List elements in different order produce the\
  \ same result -/\n\ntheorem permutation_preserves_result (heights1 heights2 : List\
  \ Nat) \n    (h1 : heights1.length ≥ 2)\n    (h2 : heights1.isPerm heights2) :\n\
  \  let n := heights1.length\n  let k := heights1.minimum?\n  match k with\n  | none\
  \ => True\n  | some k => build_two_towers n k heights1 = build_two_towers n k heights2\n\
  \  := sorry\n\n/--\ninfo: 7\n-/\n#guard_msgs in\n#eval build_two_towers 8 38 [7,\
  \ 8, 19, 7, 8, 7, 10, 20]\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval build_two_towers\
  \ 4 5 [2, 10, 4, 9]\n\n/--\ninfo: -1\n-/\n#guard_msgs in\n#eval build_two_towers\
  \ 3 10 [2, 3, 4]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
