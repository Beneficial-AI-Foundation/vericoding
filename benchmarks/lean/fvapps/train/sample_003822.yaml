vc-description: |-
  Complete the solution so that it returns the number of times the search_text is found within the full_text.

  ```python
  search_substr( fullText, searchText, allowOverlap = true )
  ```

  so that overlapping solutions are (not) counted. If the searchText is empty, it should return `0`. Usage examples:

  ```python
  search_substr('aa_bb_cc_dd_bb_e', 'bb') # should return 2 since bb shows up twice
  search_substr('aaabbbcccc', 'bbb') # should return 1
  search_substr( 'aaa', 'aa' ) # should return 2
  search_substr( 'aaa', '' ) # should return 0
  search_substr( 'aaa', 'aa', false ) # should return 1
  ```
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def search_substr (text pattern : String) (case_sensitive : Bool := true) : Nat := sorry

  theorem empty_inputs_return_zero (text pattern : String) : 
    text = "" ∨ pattern = "" → 
    search_substr text pattern = 0 ∧ 
    search_substr text pattern false = 0 := sorry
vc-theorems: |
  theorem substring_length_property (text pattern : String) : 
    text ≠ "" → pattern ≠ "" →
    (search_substr text pattern false) * (pattern.length) ≤ text.length := sorry

  /--
  info: 2
  -/
  #guard_msgs in
  #eval search_substr "aa_bb_cc_dd_bb_e" "bb"

  /--
  info: 2
  -/
  #guard_msgs in
  #eval search_substr "aaa" "aa"

  /--
  info: 1
  -/
  #guard_msgs in
  #eval search_substr "aaa" "aa" False

  /--
  info: 0
  -/
  #guard_msgs in
  #eval search_substr "abc" ""
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible
