"vc-description": "# Task\n Your Informatics teacher at school likes coming up with\
  \ new ways to help you understand the material. When you started studying numeral\
  \ systems, he introduced his own numeral system, which he's convinced will help\
  \ clarify things. His numeral system has base 26, and its digits are represented\
  \ by English capital letters - `A for 0, B for 1, and so on`.\n\n The teacher assigned\
  \ you the following numeral system exercise: given a one-digit `number`, you should\
  \ find all unordered pairs of one-digit numbers whose values add up to the `number`.\n\
  \n# Example\n\n For `number = 'G'`, the output should be `[\"A + G\", \"B + F\"\
  , \"C + E\", \"D + D\"]`\n\n Translating this into the decimal numeral system we\
  \ get: number = 6, so it is `[\"0 + 6\", \"1 + 5\", \"2 + 4\", \"3 + 3\"]`.\n\n\
  # Input/Output\n\n - `[input]` string(char in C#) `number`\n\n   A character representing\
  \ a correct one-digit number in the new numeral system.\n\n   Constraints: `'A'\
  \ ≤ number ≤ 'Z'.`\n\n - `[output]` a string array\n\n   An array of strings in\
  \ the format \"letter1 + letter2\", where \"letter1\" and \"letter2\" are correct\
  \ one-digit numbers in the new numeral system. The strings should be sorted by \"\
  letter1\".\n\n   Note that \"letter1 + letter2\" and \"letter2 + letter1\" are equal\
  \ pairs and we don't consider them to be different."
"vc-preamble": "import Imports.AllImports\n\ndef isUpperCase (c : Char) : Bool :=\n\
  \  sorry\n\n\ndef toLetterIndex (c : Char) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def new_numeral_system (letter : Char) : List String :=\n  sorry\n"
"vc-theorems": "theorem correct_format {letter : Char} : \n  ∀ s ∈ new_numeral_system\
  \ letter, \n    s.length = 5 ∧ s.data.get ⟨1, sorry⟩ = ' ' ∧ \n    s.data.get ⟨2,\
  \ sorry⟩ = '+' ∧ \n    s.data.get ⟨3, sorry⟩ = ' ' := by\n  sorry\n\n\ntheorem valid_letters\
  \ {letter : Char} :\n  ∀ s ∈ new_numeral_system letter,\n    let first := s.data.get\
  \ ⟨0, sorry⟩\n    let last := s.data.get ⟨4, sorry⟩\n    isUpperCase first ∧ \n\
  \    isUpperCase last ∧\n    first ≤ letter ∧ \n    last ≤ letter := by\n  sorry\n\
  \n\ntheorem correct_sum {letter : Char} :\n  ∀ s ∈ new_numeral_system letter,\n\
  \    let first := s.data.get ⟨0, sorry⟩\n    let last := s.data.get ⟨4, sorry⟩\n\
  \    toLetterIndex first + toLetterIndex last = toLetterIndex letter := by\n  sorry\n\
  \n\ntheorem left_side_sorted {letter : Char} :\n  let leftSide := (new_numeral_system\
  \ letter).map (fun s => s.data.get ⟨0, sorry⟩)\n  ∀ i j, i < j → j < leftSide.length\
  \ → leftSide[i]! ≤ leftSide[j]! := by\n  sorry\n\n\ntheorem middle_pair_equal {letter\
  \ : Char} :\n  toLetterIndex letter % 2 = 0 →\n    let result := new_numeral_system\
  \ letter\n    let midIdx := toLetterIndex letter / 2\n    let middle := result[midIdx]!\n\
  \    middle.data.get ⟨0, sorry⟩ = middle.data.get ⟨4, sorry⟩ := by\n  sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
