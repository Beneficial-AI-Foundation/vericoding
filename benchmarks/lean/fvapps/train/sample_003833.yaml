"vc-description": "Complete the function that takes an array of words.\n\nYou must\
  \ concatenate the `n`th letter from each word to construct a new word which should\
  \ be returned as a string, where `n` is the position of the word in the list.\n\n\
  For example:\n\n```\n[\"yoda\", \"best\", \"has\"]  -->  \"yes\"\n  ^        ^ \
  \       ^\n  n=0     n=1     n=2\n```\n\n**Note:** Test cases contain valid input\
  \ only - i.e. a string array or an empty array; and each word will have enough letters."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def nth_char (words : List String) : String := sorry\n\ntheorem\
  \ nth_char_output_length (words : List String) :\n  words.all (fun w => w.length\
  \ ≥ 10) →\n  (nth_char words).length = words.length := sorry\n"
"vc-theorems": "theorem nth_char_chars_from_word_at_index (words : List String) (i\
  \ : Fin words.length) :\n  words ≠ [] →\n  words.all (fun w => w.length ≥ 10) →\n\
  \  (nth_char words).data.get? i.val = (words.get i).data.get? i.val := sorry\n\n\
  \ntheorem nth_char_empty_list :\n  nth_char [] = \"\" := sorry\n\n/--\ninfo: 'yes'\n\
  -/\n#guard_msgs in\n#eval nth_char [\"yoda\", \"best\", \"has\"]\n\n/--\ninfo: ''\n\
  -/\n#guard_msgs in\n#eval nth_char []\n\n/--\ninfo: 'Codewars'\n-/\n#guard_msgs\
  \ in\n#eval nth_char [\"Chad\", \"Morocco\", \"India\", \"Algeria\", \"Botswana\"\
  , \"Bahamas\", \"Ecuador\", \"Micronesia\"]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
