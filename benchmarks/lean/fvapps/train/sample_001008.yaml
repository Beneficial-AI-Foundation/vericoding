"vc-description": "“I am not in danger, Skyler. I am the danger. A guy opens his door\
  \ and gets shot, and you think that of me? No! I am the one who knocks!”\nSkyler\
  \ fears Walter and ponders escaping to Colorado. Walter wants to clean his lab as\
  \ soon as possible and then go back home to his wife. \nIn order clean his lab,\
  \ he has to achieve cleaning level of lab as $Y$. The current cleaning level of\
  \ the lab is $X$. \nHe must choose one positive odd integer $a$ and one positive\
  \ even integer $b$. Note that, he cannot change $a$ or $b$ once he starts cleaning.\n\
  He can perform any one of the following operations for one round of cleaning:  \n\
  - Replace $X$ with $X+a$.  \n- Replace $X$ with $X-b$.\nFind minimum number of rounds\
  \ (possibly zero) to make lab clean.\n\n-----Input:-----\n- First line will contain\
  \ $T$, number of test cases. $T$ testcases follow :  \n- Each test case contains\
  \ two space separated integers $X, Y$. \n\n-----Output:-----\nFor each test case,\
  \ output an integer denoting minimum number of rounds to clean the lab.\n\n-----Constraints-----\n\
  - $1 \\leq T \\leq 10^5$\n- $ |X|,|Y| \\leq 10^9$\n\n-----Sample Input:-----\n3\n\
  0 5\n4 -5\n0 10000001\n\n-----Sample Output:-----\n1\n2\n1\n\n-----EXPLANATION:-----\n\
  - \nFor the first testcase, you can convert $X$ to $Y$  by choosing $a=5$ and $b=2$.\n\
  \nIt will cost minimum of $1$ cleaning round. You can select any other combination\
  \ of $a, b$ satisfying above condition but will take minimum of $1$ cleaning round\
  \ in any case.\n- \nFor the second testcase, you can convert $X$ to $Y$ by choosing\
  \ $a=1$ and $b=10$. In first round they will replace $X$ to $X+a$ and then in second\
  \ round replace to $X-b$. You can perform only one operation in one round."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calc_min_cleaning_rounds (x y : Int) : Nat :=\n  sorry \n"
"vc-theorems": "theorem min_cleaning_rounds_bounds (x y : Int) : \n  let result :=\
  \ calc_min_cleaning_rounds x y\n  0 ≤ result ∧ result ≤ 3 :=\n  sorry\n\n\ntheorem\
  \ same_input_zero (x : Int) :\n  calc_min_cleaning_rounds x x = 0 :=\n  sorry\n\n\
  \ntheorem multiple_four_diff_equals_three (x : Int) :\n  calc_min_cleaning_rounds\
  \ x (x + 4) = 3 :=\n  sorry\n\n\ntheorem parity_cleaning_rounds (x y : Int) :\n\
  \  let result := calc_min_cleaning_rounds x y\n  let diff := y - x\n  (y > x → (diff\
  \ % 2 = 0 → result = 2 ∨ result = 3) ∧ \n           (diff % 2 ≠ 0 → result = 1))\
  \ ∧\n  (y < x → (diff % 2 = 0 → result = 1) ∧\n           (diff % 2 ≠ 0 → result\
  \ = 2)) :=\n  sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval calc_min_cleaning_rounds\
  \ 0 5\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval calc_min_cleaning_rounds 4 -5\n\
  \n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval calc_min_cleaning_rounds 0 10000001\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
