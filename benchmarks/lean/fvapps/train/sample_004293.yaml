"vc-description": "## Your task\n\nYou are given a dictionary/hash/object containing\
  \ some languages and your test results in the given languages. Return the list of\
  \ languages where your test score is at least `60`, in descending order of the results.\n\
  \nNote: the scores will always be unique (so no duplicate values)\n\n## Examples\n\
  \n```python\n{\"Java\": 10, \"Ruby\": 80, \"Python\": 65}    -->  [\"Ruby\", \"\
  Python\"]\n{\"Hindi\": 60, \"Dutch\" : 93, \"Greek\": 71}  -->  [\"Dutch\", \"Greek\"\
  , \"Hindi\"]\n{\"C++\": 50, \"ASM\": 10, \"Haskell\": 20}     -->  []\n```\n---\n\
  \n## My other katas\n\nIf you enjoyed this kata then please try [my other katas](https://www.codewars.com/collections/katas-created-by-anter69)!\
  \ :-)\n\n### _Translations are welcome!_"
"vc-preamble": "import Imports.AllImports\n\ndef List.find (p : α → Bool) : List α\
  \ → Option α\n  | [] => none\n  | a :: as => if p a then some a else find p as\n\
  \nstructure TestMap (α β : Type) where\n  toList : List (α × β)\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def my_languages (results : TestMap String Nat) : List String :=\
  \ sorry\n\ntheorem my_languages_return_type (results : TestMap String Nat) :\n \
  \ my_languages results |>.all (λ x => String.isPrefixOf x x) := sorry\n"
"vc-theorems": "theorem my_languages_scores_above_threshold (results : TestMap String\
  \ Nat) \n    (lang : String) (h : lang ∈ my_languages results) :\n  ∀ pair ∈ results.toList,\
  \ pair.1 = lang → pair.2 ≥ 60 := sorry\n\n\ntheorem my_languages_all_qualifying_included\
  \ (results : TestMap String Nat) :\n  (my_languages results).length = \n    (results.toList.filter\
  \ (λ p => p.2 ≥ 60)).length := sorry\n\n\ntheorem my_languages_sorted (results :\
  \ TestMap String Nat) \n    (i : Nat) (h : i + 1 < (my_languages results).length)\
  \ :\n  let output := my_languages results\n  ∀ pair1, ∀ pair2,\n    pair1 ∈ results.toList\
  \ →\n    pair2 ∈ results.toList →\n    pair1.1 = output[i]! →\n    pair2.1 = output[i+1]!\
  \ →\n    pair1.2 ≥ pair2.2 := sorry\n\n\ntheorem my_languages_empty_below_threshold\
  \ (results : TestMap String Nat)\n    (h : ∀ p ∈ results.toList, p.2 < 60) :\n \
  \ my_languages results = [] := sorry\n\n\ntheorem my_languages_all_included_above_threshold\
  \ (results : TestMap String Nat)\n    (h : ∀ p ∈ results.toList, p.2 ≥ 60) :\n \
  \ (my_languages results).length = results.toList.length := sorry\n\n/--\ninfo: ['Ruby',\
  \ 'Python']\n-/\n#guard_msgs in\n#eval my_languages {\"Java\": 10, \"Ruby\": 80,\
  \ \"Python\": 65}\n\n/--\ninfo: ['Dutch', 'Greek', 'Hindi']\n-/\n#guard_msgs in\n\
  #eval my_languages {\"Hindi\": 60, \"Greek\": 71, \"Dutch\": 93}\n\n/--\ninfo: []\n\
  -/\n#guard_msgs in\n#eval my_languages {\"C++\": 50, \"ASM\": 10, \"Haskell\": 20}\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
