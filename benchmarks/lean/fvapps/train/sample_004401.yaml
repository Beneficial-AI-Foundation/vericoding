"vc-description": "Given a number `n` we will define its scORe to be `0 | 1 | 2 |\
  \ 3 | ... | n`, where `|` is the [bitwise OR operator](https://en.wikipedia.org/wiki/Bitwise_operation#OR).\n\
  \nWrite a function that takes `n` and finds its scORe.\n\n---------------------\n\
  |    n    | scORe n |\n|---------|-------- |       \n| 0       | 0 |\n| 1      \
  \ | 1 |\n| 49      | 63 |\n| 1000000 | 1048575 |\n"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def score (n : Nat) : Nat := sorry\n\ntheorem score_non_negative\
  \ (n : Nat) : score n ≥ 0 := sorry\n\n\n"
"vc-theorems": "theorem score_monotonic (n : Nat) : \n  n > 0 → score n ≥ score (n-1)\
  \ := sorry\n\n\ntheorem score_bit_properties (n : Nat) :\n  n > 0 → score n = 2^(Nat.log2\
  \ (score n) + 1) - 1 := sorry\n\n\ntheorem score_zero : score 0 = 0 := sorry\n\n\
  /--\ninfo: 0\n-/\n#guard_msgs in\n#eval score 0\n\n/--\ninfo: 1\n-/\n#guard_msgs\
  \ in\n#eval score 1\n\n/--\ninfo: 63\n-/\n#guard_msgs in\n#eval score 49\n\n/--\n\
  info: 1048575\n-/\n#guard_msgs in\n#eval score 1000000\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
