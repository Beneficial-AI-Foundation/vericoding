vc-description: |-
  _This kata is based on [Project Euler Problem 546](https://projecteuler.net/problem=546)_

  # Objective

  Given the recursive sequence 

  fk(n) =


  ∑

  i
  =
  0


  n



  fk(floor(i / k)) where fk(0) = 1

  Define a function `f` that takes arguments `k` and `n` and returns the nth term in the sequence fk

  ## Examples

  `f(2, 3)` = f2(3) = 6

  `f(2, 200)` = f2(200) = 7389572

  `f(7, 500)` = f7(500) = 74845

  `f(1000, 0)` = f1000(0) = 1


  **Note:** 
  No error checking is needed, `k` ranges from 2 to 100 and `n` ranges between 0 and 500000 (mostly small and medium values with a few large ones)


  As always any feedback would be much appreciated
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def f (k n : Nat) : Nat :=
    sorry
vc-theorems: |
  theorem f_is_positive (k n : Nat) (h : k ≥ 2) :
    f k n > 0 :=
    sorry


  theorem f_initial_terms (k n : Nat) (h1 : k ≥ 2) (h2 : n < k) : 
    f k n = n + 1 :=
    sorry


  theorem f_base_case (k : Nat) (h : k > 0) :
    f k 0 = 1 :=
    sorry

  /--
  info: 6
  -/
  #guard_msgs in
  #eval f 2 3

  /--
  info: 74845
  -/
  #guard_msgs in
  #eval f 7 500

  /--
  info: 1
  -/
  #guard_msgs in
  #eval f 100 0
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible
