"vc-description": "Bob watches TV every day. He always sets the volume of his TV to\
  \ $b$. However, today he is angry to find out someone has changed the volume to\
  \ $a$. Of course, Bob has a remote control that can change the volume.\n\nThere\
  \ are six buttons ($-5, -2, -1, +1, +2, +5$) on the control, which in one press\
  \ can either increase or decrease the current volume by $1$, $2$, or $5$. The volume\
  \ can be arbitrarily large, but can never be negative. In other words, Bob cannot\
  \ press the button if it causes the volume to be lower than $0$.\n\nAs Bob is so\
  \ angry, he wants to change the volume to $b$ using as few button presses as possible.\
  \ However, he forgets how to do such simple calculations, so he asks you for help.\
  \ Write a program that given $a$ and $b$, finds the minimum number of presses to\
  \ change the TV volume from $a$ to $b$.\n\n\n-----Input-----\n\nEach test contains\
  \ multiple test cases. The first line contains the number of test cases $T$ ($1\
  \ \\le T \\le 1\\,000$). Then the descriptions of the test cases follow.\n\nEach\
  \ test case consists of one line containing two integers $a$ and $b$ ($0 \\le a,\
  \ b \\le 10^{9}$) — the current volume and Bob's desired volume, respectively.\n\
  \n\n-----Output-----\n\nFor each test case, output a single integer — the minimum\
  \ number of presses to change the TV volume from $a$ to $b$. If Bob does not need\
  \ to change the volume (i.e. $a=b$), then print $0$.\n\n\n-----Example-----\nInput\n\
  3\n4 0\n5 14\n3 9\n\nOutput\n2\n3\n2\n\n\n\n-----Note-----\n\nIn the first example,\
  \ Bob can press the $-2$ button twice to reach $0$. Note that Bob can not press\
  \ $-5$ when the volume is $4$ since it will make the volume negative. \n\nIn the\
  \ second example, one of the optimal ways for Bob is to press the $+5$ twice, then\
  \ press $-1$ once.\n\nIn the last example, Bob can press the $+5$ once, then press\
  \ $+1$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def min_button_presses (a b : Int) : Int := sorry\n\ntheorem min_button_presses_non_negative\
  \ (a b : Int) :\n  min_button_presses a b ≥ 0 := sorry\n"
"vc-theorems": "theorem min_button_presses_equal_inputs (a : Int) :\n  min_button_presses\
  \ a a = 0 := sorry\n\n\ntheorem min_button_presses_symmetric (a b : Int) :\n  min_button_presses\
  \ a b = min_button_presses b a := sorry\n\n\ntheorem min_button_presses_sufficient\
  \ (a b : Int) :\n  min_button_presses a b * 5 ≥ (if a ≥ b then a - b else b - a)\
  \ := sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval min_button_presses 4 0\n\n\
  /--\ninfo: 3\n-/\n#guard_msgs in\n#eval min_button_presses 5 14\n\n/--\ninfo: 2\n\
  -/\n#guard_msgs in\n#eval min_button_presses 3 9\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
