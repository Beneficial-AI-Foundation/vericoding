"vc-description": "There is a rectangular grid of size $n \\times m$. Each cell of\
  \ the grid is colored black ('0') or white ('1'). The color of the cell $(i, j)$\
  \ is $c_{i, j}$. You are also given a map of directions: for each cell, there is\
  \ a direction $s_{i, j}$ which is one of the four characters 'U', 'R', 'D' and 'L'.\n\
  \n  If $s_{i, j}$ is 'U' then there is a transition from the cell $(i, j)$ to the\
  \ cell $(i - 1, j)$;  if $s_{i, j}$ is 'R' then there is a transition from the cell\
  \ $(i, j)$ to the cell $(i, j + 1)$;  if $s_{i, j}$ is 'D' then there is a transition\
  \ from the cell $(i, j)$ to the cell $(i + 1, j)$;  if $s_{i, j}$ is 'L' then there\
  \ is a transition from the cell $(i, j)$ to the cell $(i, j - 1)$. \n\nIt is guaranteed\
  \ that the top row doesn't contain characters 'U', the bottom row doesn't contain\
  \ characters 'D', the leftmost column doesn't contain characters 'L' and the rightmost\
  \ column doesn't contain characters 'R'.\n\nYou want to place some robots in this\
  \ field (at most one robot in a cell). The following conditions should be satisfied.\n\
  \n  Firstly, each robot should move every time (i.e. it cannot skip the move). During\
  \ one move each robot goes to the adjacent cell depending on the current direction.\
  \  Secondly, you have to place robots in such a way that there is no move before\
  \ which two different robots occupy the same cell (it also means that you cannot\
  \ place two robots in the same cell). I.e. if the grid is \"RL\" (one row, two columns,\
  \ colors does not matter there) then you can place two robots in cells $(1, 1)$\
  \ and $(1, 2)$, but if the grid is \"RLL\" then you cannot place robots in cells\
  \ $(1, 1)$ and $(1, 3)$ because during the first second both robots will occupy\
  \ the cell $(1, 2)$. \n\nThe robots make an infinite number of moves.\n\nYour task\
  \ is to place the maximum number of robots to satisfy all the conditions described\
  \ above and among all such ways, you have to choose one where the number of black\
  \ cells occupied by robots before all movements is the maximum possible. Note that\
  \ you can place robots only before all movements.\n\nYou have to answer $t$ independent\
  \ test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer\
  \ $t$ ($1 \\le t \\le 5 \\cdot 10^4$) — the number of test cases. Then $t$ test\
  \ cases follow.\n\nThe first line of the test case contains two integers $n$ and\
  \ $m$ ($1 < nm \\le 10^6$) — the number of rows and the number of columns correspondingly.\n\
  \nThe next $n$ lines contain $m$ characters each, where the $j$-th character of\
  \ the $i$-th line is $c_{i, j}$ ($c_{i, j}$ is either '0' if the cell $(i, j)$ is\
  \ black or '1' if the cell $(i, j)$ is white).\n\nThe next $n$ lines also contain\
  \ $m$ characters each, where the $j$-th character of the $i$-th line is $s_{i, j}$\
  \ ($s_{i, j}$ is 'U', 'R', 'D' or 'L' and describes the direction of the cell $(i,\
  \ j)$).\n\nIt is guaranteed that the sum of the sizes of fields does not exceed\
  \ $10^6$ ($\\sum nm \\le 10^6$).\n\n\n-----Output-----\n\nFor each test case, print\
  \ two integers — the maximum number of robots you can place to satisfy all the conditions\
  \ described in the problem statement and the maximum number of black cells occupied\
  \ by robots before all movements if the number of robots placed is maximized. Note\
  \ that you can place robots only before all movements.\n\n\n-----Example-----\n\
  Input\n3\n1 2\n01\nRL\n3 3\n001\n101\n110\nRLL\nDLD\nULL\n3 3\n000\n000\n000\nRRD\n\
  RLD\nULL\n\nOutput\n2 1\n4 3\n2 2"
"vc-preamble": "import Imports.AllImports\n\ndef List.sum (xs : List Nat) : Nat :=\n\
  \  xs.foldl (· + ·) 0\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_max_robots_and_black_cells (n m : Nat) (colors directions\
  \ : List String) : Nat × Nat := sorry\n\ntheorem output_types_and_ranges {n m :\
  \ Nat} {colors directions : List String}\n  (h : n > 0 ∧ m > 0)\n  (hlen : colors.length\
  \ = n ∧ directions.length = n)\n  (hcolors : ∀ row ∈ colors, row.length = m ∧ (∀\
  \ c ∈ String.toList row, c = '0' ∨ c = '1'))\n  (hdirs : ∀ row ∈ directions, row.length\
  \ = m ∧ (∀ d ∈ String.toList row, d = 'U' ∨ d = 'D' ∨ d = 'R' ∨ d = 'L')) :\n  let\
  \ (robots, black_cells) := find_max_robots_and_black_cells n m colors directions;\n\
  \  robots ≥ 0 ∧ \n  black_cells ≥ 0 ∧\n  black_cells ≤ robots ∧\n  black_cells ≤\
  \ (List.map (λ row => List.length (List.filter (λ x => x = '0') (String.toList row)))\
  \ colors).sum := sorry"
"vc-theorems": "/--\ninfo: (2, 1)\n-/\n#guard_msgs in\n#eval find_max_robots_and_black_cells\
  \ 1 2 [\"01\"] [\"RL\"]\n\n/--\ninfo: (4, 3)\n-/\n#guard_msgs in\n#eval find_max_robots_and_black_cells\
  \ 3 3 [\"001\", \"101\", \"110\"] [\"RLL\", \"DLD\", \"ULL\"]\n\n/--\ninfo: (2,\
  \ 2)\n-/\n#guard_msgs in\n#eval find_max_robots_and_black_cells 3 3 [\"000\", \"\
  000\", \"000\"] [\"RRD\", \"RLD\", \"ULL\"]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
