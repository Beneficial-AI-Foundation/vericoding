"vc-description": "Dark is going to attend Motarack's birthday. Dark decided that\
  \ the gift he is going to give to Motarack is an array $a$ of $n$ non-negative integers.\n\
  \nDark created that array $1000$ years ago, so some elements in that array disappeared.\
  \ Dark knows that Motarack hates to see an array that has two adjacent elements\
  \ with a high absolute difference between them. He doesn't have much time so he\
  \ wants to choose an integer $k$ ($0 \\leq k \\leq 10^{9}$) and replaces all missing\
  \ elements in the array $a$ with $k$.\n\nLet $m$ be the maximum absolute difference\
  \ between all adjacent elements (i.e. the maximum value of $|a_i - a_{i+1}|$ for\
  \ all $1 \\leq i \\leq n - 1$) in the array $a$ after Dark replaces all missing\
  \ elements with $k$.\n\nDark should choose an integer $k$ so that $m$ is minimized.\
  \ Can you help him?\n\n\n-----Input-----\n\nThe input consists of multiple test\
  \ cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$)  —\
  \ the number of test cases. The description of the test cases follows.\n\nThe first\
  \ line of each test case contains one integer $n$ ($2 \\leq n \\leq 10^{5}$) — the\
  \ size of the array $a$.\n\nThe second line of each test case contains $n$ integers\
  \ $a_1, a_2, \\ldots, a_n$ ($-1 \\leq a_i \\leq 10 ^ {9}$). If $a_i = -1$, then\
  \ the $i$-th integer is missing. It is guaranteed that at least one integer is missing\
  \ in every test case.\n\nIt is guaranteed, that the sum of $n$ for all test cases\
  \ does not exceed $4 \\cdot 10 ^ {5}$.\n\n\n-----Output-----\n\nPrint the answers\
  \ for each test case in the following format:\n\nYou should print two integers,\
  \ the minimum possible value of $m$ and an integer $k$ ($0 \\leq k \\leq 10^{9}$)\
  \ that makes the maximum absolute difference between adjacent elements in the array\
  \ $a$ equal to $m$.\n\nMake sure that after replacing all the missing elements with\
  \ $k$, the maximum absolute difference between adjacent elements becomes $m$.\n\n\
  If there is more than one possible $k$, you can print any of them.\n\n\n-----Example-----\n\
  Input\n7\n5\n-1 10 -1 12 -1\n5\n-1 40 35 -1 35\n6\n-1 -1 9 -1 3 -1\n2\n-1 -1\n2\n\
  0 -1\n4\n1 -1 3 -1\n7\n1 -1 7 5 2 -1 5\n\nOutput\n1 11\n5 35\n3 6\n0 42\n0 0\n1\
  \ 2\n3 4\n\n\n\n-----Note-----\n\nIn the first test case after replacing all missing\
  \ elements with $11$ the array becomes $[11, 10, 11, 12, 11]$. The absolute difference\
  \ between any adjacent elements is $1$. It is impossible to choose a value of $k$,\
  \ such that the absolute difference between any adjacent element will be $\\leq\
  \ 0$. So, the answer is $1$.\n\nIn the third test case after replacing all missing\
  \ elements with $6$ the array becomes $[6, 6, 9, 6, 3, 6]$.  $|a_1 - a_2| = |6 -\
  \ 6| = 0$;  $|a_2 - a_3| = |6 - 9| = 3$;  $|a_3 - a_4| = |9 - 6| = 3$;  $|a_4 -\
  \ a_5| = |6 - 3| = 3$;  $|a_5 - a_6| = |3 - 6| = 3$. \n\nSo, the maximum difference\
  \ between any adjacent elements is $3$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_array_differences (n : Nat) (arr : List Int) : Int ×\
  \ Int := sorry\n\n/- Properties for all-negative-ones case -/"
"vc-theorems": "theorem all_neg_ones_result {n : Nat} {arr : List Int} \n  (h : ∀\
  \ x ∈ arr, x = -1) :\n  solve_array_differences n arr = (0, 0) := sorry\n\n/- Main\
  \ property about adjacent differences being bounded by result -/\n\ntheorem adjacent_differences_bounded\
  \ {n : Nat} {arr : List Int} :\n  let (ans, x) := solve_array_differences n arr\n\
  \  ∀ i < arr.length - 1,\n    arr[i]! ≠ -1 → arr[i+1]! ≠ -1 → \n    (arr[i]! - arr[i+1]!).natAbs\
  \ ≤ ans := sorry\n\n/- Property about the x value working for -1 positions -/\n\n\
  theorem x_value_maintains_bound {n : Nat} {arr : List Int} :\n  let (ans, x) :=\
  \ solve_array_differences n arr\n  ∀ i < arr.length,\n    arr[i]! = -1 →\n    (i\
  \ > 0 → arr[i-1]! ≠ -1 → (arr[i-1]! - x).natAbs ≤ ans) ∧\n    (i < arr.length -\
  \ 1 → arr[i+1]! ≠ -1 → (x - arr[i+1]!).natAbs ≤ ans) := sorry\n\n/- Property about\
  \ result types and non-negativity -/\n\ntheorem result_properties {n : Nat} {arr\
  \ : List Int} :\n  let (ans, x) := solve_array_differences n arr\n  ans ≥ 0 := sorry\n\
  \n/--\ninfo: (1, 11)\n-/\n#guard_msgs in\n#eval solve_array_differences 5 [-1, 10,\
  \ -1, 12, -1]\n\n/--\ninfo: (0, 0)\n-/\n#guard_msgs in\n#eval solve_array_differences\
  \ 2 [-1, -1]\n\n/--\ninfo: (1, 2)\n-/\n#guard_msgs in\n#eval solve_array_differences\
  \ 4 [1, -1, 3, -1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
