"vc-description": "## Task\n You are given an array of integers. On each move you\
  \ are allowed to increase exactly one of its element by one. Find the minimal number\
  \ of moves required to obtain a strictly increasing sequence from the input.\n\n\
  ## Example\n\n For `arr = [1, 1, 1]`, the output should be `3`.\n\n## Input/Output\n\
  \n\n - `[input]` integer array `arr`\n\n    Constraints:\n\n    `3 ≤ inputArray.length\
  \ ≤ 100,`\n\n    `-10000 ≤ inputArray[i] ≤ 10000.`\n    \n\n - `[output]` an integer\n\
  \n    The minimal number of moves needed to obtain a strictly increasing sequence\
  \ from inputArray.\n\n    It's guaranteed that for the given test cases the answer\
  \ always fits signed 32-bit integer type."
"vc-preamble": "import Imports.AllImports\n\ndef array_change (arr : List Int) : Nat\
  \ :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sum (l : List Int) : Int :=\n  sorry\n"
"vc-theorems": "theorem array_change_returns_nonnegative (arr : List Int) (h : arr.length\
  \ ≥ 1) :\n  array_change arr ≥ 0 :=\n  sorry\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n\
  #eval array_change [1, 1, 1]\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval array_change\
  \ [-1000, 0, -2, 0]\n\n/--\ninfo: 12\n-/\n#guard_msgs in\n#eval array_change [2,\
  \ 1, 10, 1]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
