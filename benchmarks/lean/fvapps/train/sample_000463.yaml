"vc-description": "Given an array of integers arr.\nWe want to select three indices\
  \ i, j and k where (0 <= i < j <= k < arr.length).\nLet's define a and b as follows:\n\
  \na = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]\nb = arr[j] ^ arr[j + 1] ^ ... ^ arr[k]\n\
  \nNote that ^ denotes the bitwise-xor operation.\nReturn the number of triplets\
  \ (i, j and k) Where a == b.\n \nExample 1:\nInput: arr = [2,3,1,6,7]\nOutput: 4\n\
  Explanation: The triplets are (0,1,2), (0,2,2), (2,3,4) and (2,4,4)\n\nExample 2:\n\
  Input: arr = [1,1,1,1,1]\nOutput: 10\n\nExample 3:\nInput: arr = [2,3]\nOutput:\
  \ 0\n\nExample 4:\nInput: arr = [1,3,5,7,9]\nOutput: 3\n\nExample 5:\nInput: arr\
  \ = [7,11,12,9,5,2,7,17,22]\nOutput: 8\n\n \nConstraints:\n\n1 <= arr.length <=\
  \ 300\n1 <= arr[i] <= 10^8"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_triplets (arr: List Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem count_triplets_non_negative (arr: List Nat) :\n  count_triplets\
  \ arr ≥ 0 :=\nsorry\n\n\ntheorem count_triplets_is_nat (arr: List Nat) :\n  count_triplets\
  \ arr = count_triplets arr :=\nsorry\n\n\ntheorem count_triplets_append_zero (arr:\
  \ List Nat) :\n  count_triplets (arr ++ [0]) ≥ count_triplets arr :=\nsorry\n\n\
  /--\ninfo: 4\n-/\n#guard_msgs in\n#eval count_triplets [2, 3, 1, 6, 7]\n\n/--\n\
  info: 10\n-/\n#guard_msgs in\n#eval count_triplets [1, 1, 1, 1, 1]\n\n/--\ninfo:\
  \ 3\n-/\n#guard_msgs in\n#eval count_triplets [1, 3, 5, 7, 9]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
