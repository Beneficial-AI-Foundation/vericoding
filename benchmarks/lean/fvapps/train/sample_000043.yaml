"vc-description": "Petya is preparing for his birthday. He decided that there would\
  \ be $n$ different dishes on the dinner table, numbered from $1$ to $n$. Since Petya\
  \ doesn't like to cook, he wants to order these dishes in restaurants.\n\nUnfortunately,\
  \ all dishes are prepared in different restaurants and therefore Petya needs to\
  \ pick up his orders from $n$ different places. To speed up this process, he wants\
  \ to order courier delivery at some restaurants. Thus, for each dish, there are\
  \ two options for Petya how he can get it:  the dish will be delivered by a courier\
  \ from the restaurant $i$, in this case the courier will arrive in $a_i$ minutes,\
  \  Petya goes to the restaurant $i$ on his own and picks up the dish, he will spend\
  \ $b_i$ minutes on this. \n\nEach restaurant has its own couriers and they start\
  \ delivering the order at the moment Petya leaves the house. In other words, all\
  \ couriers work in parallel. Petya must visit all restaurants in which he has not\
  \ chosen delivery, he does this consistently.\n\nFor example, if Petya wants to\
  \ order $n = 4$ dishes and $a = [3, 7, 4, 5]$, and $b = [2, 1, 2, 4]$, then he can\
  \ order delivery from the first and the fourth restaurant, and go to the second\
  \ and third on your own. Then the courier of the first restaurant will bring the\
  \ order in $3$ minutes, the courier of the fourth restaurant will bring the order\
  \ in $5$ minutes, and Petya will pick up the remaining dishes in $1 + 2 = 3$ minutes.\
  \ Thus, in $5$ minutes all the dishes will be at Petya's house.\n\nFind the minimum\
  \ time after which all the dishes can be at Petya's home.\n\n\n-----Input-----\n\
  \nThe first line contains one positive integer $t$ ($1 \\le t \\le 2 \\cdot 10^5$) —\
  \ the number of test cases. Then $t$ test cases follow.\n\nEach test case begins\
  \ with a line containing one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) — the number\
  \ of dishes that Petya wants to order.\n\nThe second line of each test case contains\
  \ $n$ integers $a_1 \\ldots a_n$ ($1 \\le a_i \\le 10^9$) — the time of courier\
  \ delivery of the dish with the number $i$.\n\nThe third line of each test case\
  \ contains $n$ integers $b_1 \\ldots b_n$ ($1 \\le b_i \\le 10^9$) — the time during\
  \ which Petya will pick up the dish with the number $i$.\n\nThe sum of $n$ over\
  \ all test cases does not exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each\
  \ test case output one integer — the minimum time after which all dishes can be\
  \ at Petya's home.\n\n\n-----Example-----\nInput\n4\n4\n3 7 4 5\n2 1 2 4\n4\n1 2\
  \ 3 4\n3 3 3 3\n2\n1 2\n10 10\n2\n10 10\n1 2\n\nOutput\n5\n3\n2\n3"
"vc-preamble": "import Imports.AllImports\n\ndef solve_dishes (n : Nat) (a : List\
  \ Nat) (b : List Nat) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def list_maximum (l : List Nat) : Nat :=\n  l.foldl Nat.max 0\n"
"vc-theorems": "theorem solve_dishes_leq_max_cook_time (n : Nat) (a : List Nat) (b\
  \ : List Nat) \n    (h1 : n ≥ 1) (h2 : a.length = n) (h3 : b.length = n) (h4 : ∀\
  \ x ∈ a, x ≥ 1) (h5 : ∀ x ∈ b, x ≥ 1) :\n    solve_dishes n a b ≤ list_maximum a\
  \ :=\n  sorry\n\n\ntheorem solve_dishes_non_negative (n : Nat) (a : List Nat) (b\
  \ : List Nat)\n    (h1 : n ≥ 1) (h2 : a.length = n) (h3 : b.length = n) (h4 : ∀\
  \ x ∈ a, x ≥ 1) (h5 : ∀ x ∈ b, x ≥ 1) :\n    solve_dishes n a b ≥ 0 :=\n  sorry\n\
  \n\ntheorem solve_dishes_valid_solution (n : Nat) (a : List Nat) (b : List Nat)\n\
  \    (h1 : n ≥ 1) (h2 : a.length = n) (h3 : b.length = n) (h4 : ∀ x ∈ a, x ≥ 1)\
  \ (h5 : ∀ x ∈ b, x ≥ 1) :\n    let result := solve_dishes n a b\n    let remaining\
  \ := result - (List.range n).foldl (λ acc i => \n      if a[i]! > result then acc\
  \ + b[i]! else acc) 0 \n    remaining ≥ 0 :=\n  sorry\n\n\ntheorem same_cook_and_wait_times\
  \ (n : Nat) (times : List Nat)\n    (h1 : n ≥ 1) (h2 : times.length = n) (h3 : ∀\
  \ x ∈ times, x ≥ 1) :\n    solve_dishes n times times ≤ list_maximum times :=\n\
  \  sorry\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval solve_dishes 4 [3, 7, 4, 5]\
  \ [2, 1, 2, 4]\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval solve_dishes 4 [1, 2,\
  \ 3, 4] [3, 3, 3, 3]\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval solve_dishes 2 [1,\
  \ 2] [10, 10]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
