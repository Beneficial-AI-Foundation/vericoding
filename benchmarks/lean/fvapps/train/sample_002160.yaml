vc-description: |-
  There are $n$ football teams in the world. 

  The Main Football Organization (MFO) wants to host at most $m$ games. MFO wants the $i$-th game to be played between the teams $a_i$ and $b_i$ in one of the $k$ stadiums. 

  Let $s_{ij}$ be the numbers of games the $i$-th team played in the $j$-th stadium. MFO does not want a team to have much more games in one stadium than in the others. Therefore, for each team $i$, the absolute difference between the maximum and minimum among $s_{i1}, s_{i2}, \ldots, s_{ik}$ should not exceed $2$.

  Each team has $w_i$ — the amount of money MFO will earn for each game of the $i$-th team. If the $i$-th team plays $l$ games, MFO will earn $w_i \cdot l$.

  MFO needs to find what games in what stadiums they need to host in order to earn as much money as possible, not violating the rule they set.

  However, this problem is too complicated for MFO. Therefore, they are asking you to help them.


  -----Input-----

  The first line contains three integers $n$, $m$, $k$ ($3 \leq n \leq 100$, $0 \leq m \leq 1\,000$, $1 \leq k \leq 1\,000$) — the number of teams, the number of games, and the number of stadiums.

  The second line contains $n$ integers $w_1, w_2, \ldots, w_n$ ($1 \leq w_i \leq 1\,000$) — the amount of money MFO will earn for each game of the $i$-th game.

  Each of the following $m$ lines contains two integers $a_i$ and $b_i$ ($1 \leq a_i, b_i \leq n$, $a_i \neq b_i$) — the teams that can play the $i$-th game. It is guaranteed that each pair of teams can play at most one game.


  -----Output-----

  For each game in the same order, print $t_i$ ($1 \leq t_i \leq k$) — the number of the stadium, in which $a_i$ and $b_i$ will play the game. If the $i$-th game should not be played, $t_i$ should be equal to $0$.

  If there are multiple answers, print any.


  -----Example-----
  Input
  7 11 3
  4 7 8 10 10 9 3
  6 2
  6 1
  7 6
  4 3
  4 6
  3 1
  5 3
  7 5
  7 3
  4 2
  1 4

  Output
  3
  2
  1
  1
  3
  1
  2
  1
  2
  3
  2



  -----Note-----

  One of possible solutions to the example is shown below: [Image]
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |-
  def allocate_stadium_games (n m k : Nat) (games : List (Nat × Nat)) : List Nat :=
    sorry

  /-- For a valid allocation, the number of games per stadium for each team differs by at most 2 -/
vc-theorems: |
  theorem stadium_balance {n k : Nat} {games : List (Nat × Nat)} {allocation : List Nat}
    (h1 : n ≥ 2)
    (h2 : k ≥ 1)
    (h3 : allocation = allocate_stadium_games n games.length k games)
    (h4 : ∀ g, g ∈ games → g.1 ≤ n ∧ g.2 ≤ n ∧ g.1 < g.2)
    (h5 : ∀ s, s ∈ allocation → s ≥ 1 ∧ s ≤ k) :
    ∀ t, t ≤ n →
      ∀ s1 s2, s1 ≤ k → s2 ≤ k →
        Nat.sub ((games.zip allocation).filter (λ p => (p.1.1 = t ∨ p.1.2 = t) ∧ p.2 = s1) |>.length)
                ((games.zip allocation).filter (λ p => (p.1.1 = t ∨ p.1.2 = t) ∧ p.2 = s2) |>.length) ≤ 2 :=
    sorry

  /-- The allocation list has the same length as the input game list -/

  theorem allocation_length_eq_games {n k : Nat} {games : List (Nat × Nat)}
    (h1 : n ≥ 2)
    (h2 : k ≥ 1) :
    (allocate_stadium_games n games.length k games).length = games.length :=
    sorry

  /-- Empty game list produces empty allocation -/

  theorem empty_games_empty_allocation {n k : Nat}
    (h1 : n ≥ 2)
    (h2 : k ≥ 1) :
    allocate_stadium_games n 0 k [] = [] :=
    sorry

  /-- Basic case works: two teams, one game, one stadium -/

  theorem minimum_viable_case :
    allocate_stadium_games 2 1 1 [(1, 2)] = [1] :=
    sorry

  /--
  info: m
  -/
  #guard_msgs in
  #eval len allocate_stadium_games(n, m, k, games)

  /--
  info: 0
  -/
  #guard_msgs in
  #eval len allocate_stadium_games(n, m, k, games)

  /--
  info: 0
  -/
  #guard_msgs in
  #eval len allocate_stadium_games(n, m, k, games)
vc-postamble: |-
  -- Apps difficulty: competition
  -- Assurance level: unguarded
