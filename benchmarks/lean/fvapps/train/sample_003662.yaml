"vc-description": "###BACKGROUND:\nJacob recently decided to get healthy and lose\
  \ some weight. He did a lot of reading and research and after focusing on steady\
  \ exercise and a healthy diet for several months, was able to shed over 50 pounds!\
  \ Now he wants to share his success, and has decided to tell his friends and family\
  \ how much weight they could expect to lose if they used the same plan he followed.\n\
  \nLots of people are really excited about Jacob's program and they want to know\
  \ how much weight they would lose if they followed his plan. Unfortunately, he's\
  \ really bad at math, so he's turned to you to help write a program that will calculate\
  \ the expected weight loss for a particular person, given their weight and how long\
  \ they think they want to continue the plan.\n\n###TECHNICAL DETAILS:\nJacob's weight\
  \ loss protocol, if followed closely, yields loss according to a simple formulae,\
  \ depending on gender. Men can expect to lose 1.5% of their current body weight\
  \ each week they stay on plan. Women can expect to lose 1.2%. (Children are advised\
  \ to eat whatever they want, and make sure to play outside as much as they can!)\n\
  \n###TASK:\nWrite a function that takes as input:\n```\n- The person's gender ('M'\
  \ or 'F');\n- Their current weight (in pounds);\n- How long they want to stay true\
  \ to the protocol (in weeks);\n```\nand then returns the expected weight at the\
  \ end of the program.\n\n###NOTES:\nWeights (both input and output) should be decimals,\
  \ rounded to the nearest tenth.\nDuration (input) should be a whole number (integer).\
  \ If it is not, the function should round to the nearest whole number.\nWhen doing\
  \ input parameter validity checks, evaluate them in order or your code will not\
  \ pass final tests."
"vc-preamble": "import Imports.AllImports\n\ndef lose_weight (gender : Gender) (weight\
  \ : Float) (duration : Nat) : String ⊕ Float := sorry\n\ntheorem weight_always_decreases\n\
  \  (gender : Gender) (weight : Float) (duration : Nat)\n  (h1 : weight > 0)\n  (h2\
  \ : duration > 0) :\n  match lose_weight gender weight duration with\n  | Sum.inr\
  \ result => result ≤ weight\n  | Sum.inl _ => True\n  := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def lose_weight_string (gender : String) (weight : Float) (duration\
  \ : Nat) : String := sorry\n\ntheorem invalid_gender\n  (gender : String) (weight\
  \ : Float) (duration : Nat)\n  (h : gender ≠ \"M\" ∧ gender ≠ \"F\")\n  (h1 : weight\
  \ > 0)\n  (h2 : duration > 0) :\n  lose_weight_string gender weight duration = \"\
  Invalid gender\" := sorry\n"
"vc-theorems": "theorem weight_loss_proportional_to_duration\n  (gender : Gender)\
  \ (weight : Float) (duration : Nat)\n  (h1 : weight > 0)\n  (h2 : duration > 0)\
  \ :\n  match lose_weight gender weight duration, lose_weight gender weight (2 *\
  \ duration) with\n  | Sum.inr result1, Sum.inr result2 => result2 ≤ result1\n  |\
  \ _, _ => True\n  := sorry\n\n\ntheorem invalid_weight\n  (gender : Gender) (weight\
  \ : Float) (duration : Nat)\n  (h : weight ≤ 0)\n  (h2 : duration > 0) :\n  match\
  \ lose_weight gender weight duration with\n  | Sum.inl s => s = \"Invalid weight\"\
  \n  | _ => False\n  := sorry\n\n\ntheorem invalid_duration\n  (gender : Gender)\
  \ (weight : Float) (duration : Nat)\n  (h : duration = 0)\n  (h1 : weight > 0) :\n\
  \  match lose_weight gender weight duration with\n  | Sum.inl s => s = \"Invalid\
  \ duration\"\n  | _ => False\n  := sorry\n\nend LoseWeight\n\n/--\ninfo: 231.8\n\
  -/\n#guard_msgs in\n#eval lose_weight \"M\" 250 5\n\n/--\ninfo: 172.5\n-/\n#guard_msgs\
  \ in\n#eval lose_weight \"F\" 190 8\n\n/--\ninfo: 'Invalid gender'\n-/\n#guard_msgs\
  \ in\n#eval lose_weight \"X\" 200 10\n\n/--\ninfo: 'Invalid weight'\n-/\n#guard_msgs\
  \ in\n#eval lose_weight \"M\" -5 10\n\n/--\ninfo: 'Invalid duration'\n-/\n#guard_msgs\
  \ in\n#eval lose_weight \"F\" 160 0\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
