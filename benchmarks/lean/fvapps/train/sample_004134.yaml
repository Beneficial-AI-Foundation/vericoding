"vc-description": "Speedcubing is the hobby involving solving a variety of twisty\
  \ puzzles, the most famous being the 3x3x3 puzzle or Rubik's Cube, as quickly as\
  \ possible.\n\nIn the majority of Speedcubing competitions, a Cuber solves a scrambled\
  \ cube 5 times, and their result is found by taking the average of the middle 3\
  \ solves (ie. the slowest and fastest times are disregarded, and an average is taken\
  \ of the remaining times).\n\nIn some competitions, the unlikely event of a tie\
  \ situation is resolved by comparing Cuber's fastest times.\n\nWrite a function\
  \ ```cube_times(times)``` that, given an array of floats ```times``` returns an\
  \ array / tuple with the Cuber's result (to 2 decimal places) AND their fastest\
  \ solve.\n\nFor example:\n```python\ncube_times([9.5, 7.6, 11.4, 10.5, 8.1]) = (9.37,\
  \ 7.6)\n# Because (9.5 + 10.5 + 8.1) / 3 = 9.37 and 7.6 was the fastest solve.\n\
  ```\n\nNote: ```times``` will always be a valid array of 5 positive floats (representing\
  \ seconds)"
"vc-preamble": "import Imports.AllImports\n\ndef cubeTimes (times: List Float) : Float\
  \ × Float := sorry\n\ndef List.minimum (xs : List Float) : Float := \n  match xs\
  \ with\n  | [] => 0\n  | x::rest => rest.foldl min x\n\n\ndef List.sort (xs : List\
  \ Float) : List Float := sorry\n\ntheorem cubeTimes_avg_is_middle_three (times :\
  \ List Float)\n  (h : times.length = 5)\n  (h2 : ∀ x ∈ times, 0.01 ≤ x ∧ x ≤ 1000)\
  \ :\n  let sorted := times.sort\n  let middle_avg := (sorted[1]! + sorted[2]! +\
  \ sorted[3]!) / 3\n  (cubeTimes times).1 = Float.floor ((middle_avg * 100) + 0.5)\
  \ / 100 := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def Float.decimalPlaces (x : Float) : Nat := sorry\n\ntheorem cubeTimes_avg_decimal_places\
  \ (times : List Float)\n  (h : times.length = 5) \n  (h2 : ∀ x ∈ times, 0.01 ≤ x\
  \ ∧ x ≤ 1000) :\n  let avg := (cubeTimes times).1\n  Float.decimalPlaces avg ≤ 2\
  \ := sorry"
"vc-theorems": "theorem cubeTimes_fastest_is_min (times : List Float) \n  (h : times.length\
  \ = 5)\n  (h2 : ∀ x ∈ times, 0.01 ≤ x ∧ x ≤ 1000) : \n  (cubeTimes times).2 = List.minimum\
  \ times := sorry\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
