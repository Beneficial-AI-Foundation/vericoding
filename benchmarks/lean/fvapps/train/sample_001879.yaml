"vc-description": "Find the minimum length word from a given dictionary words, which\
  \ has all the letters from the string licensePlate.  Such a word is said to complete\
  \ the given string licensePlate\n\nHere, for letters we ignore case.  For example,\
  \ \"P\" on the licensePlate still matches \"p\" on the word.\n\nIt is guaranteed\
  \ an answer exists.  If there are multiple answers, return the one that occurs first\
  \ in the array.\n\nThe license plate might have the same letter occurring multiple\
  \ times.  For example, given a licensePlate of \"PP\", the word \"pair\" does not\
  \ complete the licensePlate, but the word \"supper\" does.\n\n\nExample 1:\n\nInput:\
  \ licensePlate = \"1s3 PSt\", words = [\"step\", \"steps\", \"stripe\", \"stepple\"\
  ]\nOutput: \"steps\"\nExplanation: The smallest length word that contains the letters\
  \ \"S\", \"P\", \"S\", and \"T\".\nNote that the answer is not \"step\", because\
  \ the letter \"s\" must occur in the word twice.\nAlso note that we ignored case\
  \ for the purposes of comparing whether a letter exists in the word.\n\n\n\nExample\
  \ 2:\n\nInput: licensePlate = \"1s3 456\", words = [\"looks\", \"pest\", \"stew\"\
  , \"show\"]\nOutput: \"pest\"\nExplanation: There are 3 smallest length words that\
  \ contains the letters \"s\".\nWe return the one that occurred first.\n\n\n\nNote:\n\
  \nlicensePlate will be a string with length in range [1, 7].\nlicensePlate will\
  \ contain digits, spaces, or letters (uppercase or lowercase).\nwords will have\
  \ a length in the range [10, 1000].\nEvery words[i] will consist of lowercase letters,\
  \ and have length in range [1, 15]."
"vc-preamble": "import Imports.AllImports\n\ndef shortestCompletingWord (licensePlate\
  \ : String) (words : List String) : Option String := sorry\n\n-- Helper functions"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isAlpha (c : Char) : Bool := sorry\ndef containsAllLetters\
  \ (word : String) (plate : String) : Bool := sorry \n"
"vc-theorems": "theorem shortest_completing_word_in_wordlist (plate : String) (words\
  \ : List String) :\n  ∀ result, shortestCompletingWord plate words = some result\
  \ → \n  ∃ w ∈ words, w.toLower = result.toLower := sorry\n\n\ntheorem completes_license_plate\
  \ (plate : String) (words : List String) :\n  ∀ result, shortestCompletingWord plate\
  \ words = some result →\n  ∀ c ∈ plate.toList, isAlpha c → c.toLower ∈ result.toLower.toList\
  \ := sorry\n\n\ntheorem is_shortest_valid_word (plate : String) (words : List String)\
  \ :\n  ∀ result, shortestCompletingWord plate words = some result →\n  ∀ w ∈ words,\
  \ containsAllLetters w plate → result.length ≤ w.length := sorry\n\n\ntheorem case_insensitive\
  \ (plate : String) (words : List String) :\n  shortestCompletingWord plate.toLower\
  \ words = shortestCompletingWord plate.toUpper words := sorry\n\n\ntheorem ignore_non_alpha\
  \ (words : List String) :\n  shortestCompletingWord \"A1B2C3\" words = shortestCompletingWord\
  \ \"ABC\" words := sorry\n\n/--\ninfo: 'steps'\n-/\n#guard_msgs in\n#eval shortestCompletingWord\
  \ \"1s3 PSt\" [\"step\", \"steps\", \"stripe\", \"stepple\"]\n\n/--\ninfo: 'pest'\n\
  -/\n#guard_msgs in\n#eval shortestCompletingWord \"1s3 456\" [\"looks\", \"pest\"\
  , \"stew\", \"show\"]\n\n/--\ninfo: 'supper'\n-/\n#guard_msgs in\n#eval shortestCompletingWord\
  \ \"PP\" [\"pair\", \"supper\"]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
