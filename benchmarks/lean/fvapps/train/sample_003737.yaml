"vc-description": "We want to find the numbers higher or equal than 1000 that the\
  \ sum of every four consecutives digits cannot be higher than a certain given value.\n\
  If the number is ``` num = d1d2d3d4d5d6 ```, and the maximum sum of 4 contiguous\
  \ digits is ```maxSum```, then:\n```python\nd1 + d2 + d3 + d4 <= maxSum\nd2 + d3\
  \ + d4 + d5 <= maxSum\nd3 + d4 + d5 + d6 <= maxSum\n```\nFor that purpose, we need\
  \ to create a function, ```max_sumDig()```, that receives ```nMax```, as the max\
  \ value of the interval to study (the range (1000, nMax) ), and a certain value,\
  \ ```maxSum```, the maximum sum that every four consecutive digits should be less\
  \ or equal to. The function should output the following list with the data detailed\
  \ bellow:\n\n```[(1), (2), (3)]```\n\n(1) - the amount of numbers that satisfy the\
  \ constraint presented above \n\n(2) - the closest number to the mean of the results,\
  \ if there are more than one, the smallest number should be chosen.\n\n(3) - the\
  \ total sum of all the found numbers\n\nLet's see a case with all the details:\n\
  ```\nmax_sumDig(2000, 3) -------> [11, 1110, 12555]\n\n(1) -There are 11 found numbers:\
  \ 1000, 1001, 1002, 1010, 1011, 1020, 1100, 1101, 1110, 1200 and 2000\n\n(2) - The\
  \ mean of all the found numbers is:\n      (1000 + 1001 + 1002 + 1010 + 1011 + 1020\
  \ + 1100 + 1101 + 1110 + 1200 + 2000) /11 = 1141.36363,  \n      so 1110 is the\
  \ number that is closest to that mean value.\n\n(3) - 12555 is the sum of all the\
  \ found numbers\n      1000 + 1001 + 1002 + 1010 + 1011 + 1020 + 1100 + 1101 + 1110\
  \ + 1200 + 2000 = 12555\n\nFinally, let's see another cases\n```\nmax_sumDig(2000,\
  \ 4) -----> [21, 1120, 23665]\n\nmax_sumDig(2000, 7) -----> [85, 1200, 99986]\n\n\
  max_sumDig(3000, 7) -----> [141, 1600, 220756]\n```\n\nHappy coding!!"
"vc-preamble": "import Imports.AllImports\n\ndef digitsList (n : Nat) : List Nat :=\
  \ sorry\ndef sumList (xs : List Nat) : Nat := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def check (n : Nat) (maxSum : Nat) : Bool := sorry\n\ndef max_sumDig\
  \ (nmax : Nat) (maxSum : Nat) : Nat × Nat × Nat := sorry\n"
"vc-theorems": "theorem check_type (n : Nat) (maxSum : Nat) : check n maxSum = true\
  \ ∨ check n maxSum = false := sorry\n\ntheorem check_max_sum (n : Nat) (maxSum :\
  \ Nat) \n    (h1 : n ≥ 1000) (h2 : n < 10000) (h3 : maxSum ≤ 36) :\n  check n maxSum\
  \ = true ↔ \n    ∀ i, i + 4 ≤ (digitsList n).length → \n      sumList (List.drop\
  \ i (List.take (i+4) (digitsList n))) ≤ maxSum := sorry\n\n\ntheorem max_sumDig_constraints\
  \ (nmax maxSum : Nat)\n    (h1 : nmax ≥ 2000) (h2 : nmax < 10000) (h3 : maxSum ≥\
  \ 3) (h4 : maxSum ≤ 36) :\n  let (count, closest, sum) := max_sumDig nmax maxSum\n\
  \  count ≥ 0 ∧ \n  closest ≥ 1000 ∧ \n  closest ≤ nmax ∧\n  check closest maxSum\
  \ = true ∧\n  sum ≥ 0 := sorry\n\n/--\ninfo: [11, 1110, 12555]\n-/\n#guard_msgs\
  \ in\n#eval max_sumDig 2000 3\n\n/--\ninfo: [21, 1120, 23665]\n-/\n#guard_msgs in\n\
  #eval max_sumDig 2000 4\n\n/--\ninfo: [85, 1200, 99986]\n-/\n#guard_msgs in\n#eval\
  \ max_sumDig 2000 7\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
