vc-description: |-
  Given an array arr of 4 digits, find the latest 24-hour time that can be made using each digit exactly once.
  24-hour times are formatted as "HH:MM", where HH is between 00 and 23, and MM is between 00 and 59. The earliest 24-hour time is 00:00, and the latest is 23:59.
  Return the latest 24-hour time in "HH:MM" format.  If no valid time can be made, return an empty string.
   
  Example 1:
  Input: A = [1,2,3,4]
  Output: "23:41"
  Explanation: The valid 24-hour times are "12:34", "12:43", "13:24", "13:42", "14:23", "14:32", "21:34", "21:43", "23:14", and "23:41". Of these times, "23:41" is the latest.

  Example 2:
  Input: A = [5,5,5,5]
  Output: ""
  Explanation: There are no valid 24-hour times as "55:55" is not valid.

  Example 3:
  Input: A = [0,0,0,0]
  Output: "00:00"

  Example 4:
  Input: A = [0,0,1,0]
  Output: "10:00"

   
  Constraints:

  arr.length == 4
  0 <= arr[i] <= 9
vc-preamble: |
  import Imports.AllImports

  def find_latest_time (digits: List Nat) : String :=
    sorry


  def is_valid_time_str (s: String) : Bool :=
    sorry


  def time_to_minutes (time: String) : Nat :=
    sorry
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def is_valid_time (hours mins: Nat) : Prop :=
    hours < 24 ∧ mins < 60
vc-theorems: |
  theorem find_latest_time_gives_valid_result {digits: List Nat}
    (h1: digits.length = 4)
    (h2: ∀ d ∈ digits, d ≤ 9) :
    is_valid_time_str (find_latest_time digits) = true :=
    sorry


  theorem find_latest_time_invalid_when_all_large {digits: List Nat}
    (h1: digits.length = 4)
    (h2: (∀ d ∈ digits, d ≥ 6) ∨ (∀ d ∈ digits, d > 2)) :
    find_latest_time digits = "" :=
    sorry


  theorem find_latest_time_zeros {digits: List Nat}
    (h1: digits.length = 4)
    (h2: ∀ d ∈ digits, d = 0) : 
    find_latest_time digits = "00:00" :=
    sorry


  theorem find_latest_time_is_maximum {digits: List Nat} {result: String}
    (h1: digits.length = 4)
    (h2: ∀ d ∈ digits, d ≤ 9)
    (h3: result = find_latest_time digits)
    (h4: result ≠ "") :
    ∀ (h1 h2 m1 m2: Nat),
    h1 ∈ digits → h2 ∈ digits → m1 ∈ digits → m2 ∈ digits →
    is_valid_time (h1 * 10 + h2) (m1 * 10 + m2) →
    time_to_minutes result ≥ (h1 * 10 + h2) * 60 + (m1 * 10 + m2) :=
    sorry

  /--
  info: '23:41'
  -/
  #guard_msgs in
  #eval find_latest_time [1, 2, 3, 4]

  /--
  info: ''
  -/
  #guard_msgs in
  #eval find_latest_time [5, 5, 5, 5]

  /--
  info: '00:00'
  -/
  #guard_msgs in
  #eval find_latest_time [0, 0, 0, 0]
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
