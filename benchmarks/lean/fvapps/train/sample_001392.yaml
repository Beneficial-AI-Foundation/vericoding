"vc-description": "Once N boys and M girls attended a party. You are given a matrix\
  \ A of N rows and M columns where Aij is 1 if the i-th boy likes the j-th girl,\
  \ otherwise it will be 0. Note that it is not necessary that if a boy x likes girl\
  \ y, then girl y should like boy x.\nYou know that if there are two different boys\
  \ x and y, who both like girl z, then there will be a collision.\nCan you calculate\
  \ the number of different collisions at this party? Note that order of boys in the\
  \ collision doesn't matter.\n\n-----Input-----\nThe first line contains a single\
  \ integer T denoting the number of test cases. Then T test cases follow.\nThe first\
  \ line of each test case contains two space separated integers N, M denoting the\
  \ number of boys and girls, respectively.\nEach of the following N lines contain\
  \ M characters, each of them is either '0' or '1'.\n\n-----Output-----\nFor each\
  \ test case output a single line containing an integer corresponding to the number\
  \ of collisions at the party.\n\n-----Constraints-----\n- 1 ≤ T ≤ 100\n- 1 ≤ N,\
  \ M ≤ 10\n\n-----Example-----\nInput:\n2\n4 3\n111\n100\n110\n000\n2 2\n10\n01\n\
  \nOutput:\n4\n0\n\n-----Explanation-----\nExample Case 1. All three boys like the\
  \ first girl, so there are (1, 2, 1), (1, 3, 1), (2, 3, 1) collisions with her.\
  \ Boys 1 and 3 both like the second girl so this is one more collision. Only one\
  \ boy likes the third girl, so there are no collisions with her and thus we have\
  \ 4 collisions total.\nExample Case 2. For each girl there is only one boy who likes\
  \ her, so there are no collisions at all."
"vc-preamble": "import Imports.AllImports\n\ndef count_collisions (n m : Nat) (likes\
  \ : List String) : Nat :=\n  sorry\n\n\ndef List.sum (xs : List Nat) : Nat :=\n\
  \  xs.foldl (· + ·) 0\n\n/-- Helper function to get character from string at position\
  \ -/"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def getChar? (s : String) (i : Nat) : Option Char :=\n  s.data.get?\
  \ i\n"
"vc-theorems": "theorem count_collisions_nonnegative {n m : Nat} {likes : List String}\
  \ :\n  count_collisions n m likes ≥ 0 :=\n  sorry \n\n/-- Helper function to sum\
  \ a list of natural numbers -/\n\ntheorem count_collisions_formula {n m : Nat} {likes\
  \ : List String} :\n  count_collisions n m likes = \n    let colSums := List.range\
  \ m |>.map (fun col => \n      List.range n |>.filter (fun row => \n        match\
  \ likes.get? row with\n        | none => false\n        | some s => match getChar?\
  \ s col with\n          | some '1' => true\n          | _ => false\n      ) |>.length);\n\
  \    colSums.map (fun ones => ones * (ones - 1) / 2) |>.sum :=\n  sorry\n\n\ntheorem\
  \ count_collisions_zeros {n m : Nat} {likes : List String}\n  (h : ∀ i j, i < n\
  \ → j < m → \n    match likes.get? i with\n    | none => true\n    | some s => getChar?\
  \ s j = some '0') :\n  count_collisions n m likes = 0 :=\n  sorry\n\n\ntheorem count_collisions_all_ones\
  \ {n : Nat} {likes : List String}\n  (h : ∀ i, i < n → \n    match likes.get? i\
  \ with\n    | none => true \n    | some s => getChar? s 0 = some '1') :\n  count_collisions\
  \ n 1 likes = n * (n - 1) / 2 :=\n  sorry\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n\
  #eval count_collisions 4 3 [\"111\", \"100\", \"110\", \"000\"]\n\n/--\ninfo: 0\n\
  -/\n#guard_msgs in\n#eval count_collisions 2 2 [\"10\", \"01\"]\n\n/--\ninfo: 6\n\
  -/\n#guard_msgs in\n#eval count_collisions 3 2 [\"11\", \"11\", \"11\"]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
