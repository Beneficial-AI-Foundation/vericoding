"vc-description": "The chef is trying to solve some series problems, Chef wants your\
  \ help to code it. Chef has one number N. Help the chef to find N'th number in the\
  \ series.\n0, 1, 5, 14, 30, 55 …..\n\n-----Input:-----\n- First-line will contain\
  \ $T$, the number of test cases. Then the test cases follow. \n- Each test case\
  \ contains a single line of input, one integer $N$. \n\n-----Output:-----\nFor each\
  \ test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq\
  \ 10^4$\n- $1 \\leq N \\leq 10^4$\n\n-----Sample Input:-----\n3\n1\n7\n8\n\n-----Sample\
  \ Output:-----\n0\n91\n140"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_series (n : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem solve_series_output_type {n : Nat} (h : n ≥ 1) :\n  solve_series\
  \ n ≥ 0 :=\nsorry\n\n\ntheorem solve_series_base_case :\n  solve_series 1 = 0 :=\n\
  sorry\n\n\ntheorem solve_series_strictly_increasing {n : Nat} (h : n ≥ 2) :\n  solve_series\
  \ n < solve_series (n + 1) :=\nsorry\n\n\ntheorem solve_series_formula {n : Nat}\
  \ (h : n ≥ 2) :\n  solve_series n = ((n - 2 + 1) * (2 * (n - 2) + 3) * (n - 2 +\
  \ 2)) / 6 :=\nsorry\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval solve_series 1\n\n\
  /--\ninfo: 91\n-/\n#guard_msgs in\n#eval solve_series 7\n\n/--\ninfo: 140\n-/\n\
  #guard_msgs in\n#eval solve_series 8\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
