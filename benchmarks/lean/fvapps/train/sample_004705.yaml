"vc-description": "Create a function hollow_triangle(height) that returns a hollow\
  \ triangle of the correct height. The height is passed through to the function and\
  \ the function should return a list containing each line of the hollow triangle.\
  \ \n```\nhollow_triangle(6) should return : ['_____#_____', '____#_#____', '___#___#___',\
  \ '__#_____#__', '_#_______#_', '###########']\nhollow_triangle(9) should return\
  \ : ['________#________', '_______#_#_______', '______#___#______', '_____#_____#_____',\
  \ '____#_______#____', '___#_________#___', '__#___________#__', '_#_____________#_',\
  \ '#################']\n```\nThe final idea is for the hollow triangle is to look\
  \ like this if you decide to print each element of the list: \n``` \nhollow_triangle(6)\
  \ will result in:\n_____#_____              1\n____#_#____              2\n___#___#___\
  \              3\n__#_____#__              4\n_#_______#_              5\n###########\
  \              6 ---- Final Height\n\nhollow_triangle(9) will result in:\n________#________\
  \        1\n_______#_#_______        2\n______#___#______        3\n_____#_____#_____\
  \        4      \n____#_______#____        5\n___#_________#___        6\n__#___________#__\
  \        7\n_#_____________#_        8\n#################        9 ---- Final Height\n\
  ```\nPad spaces with underscores i.e _ so each line is the same length.Goodluck\
  \ and have fun coding !"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def hollow_triangle (height : Nat) : List String := sorry\n\ntheorem\
  \ hollow_triangle_height (height : Nat) (h : height > 0) :\n  (hollow_triangle height).length\
  \ = height := sorry\n"
"vc-theorems": "theorem hollow_triangle_width (height : Nat) (h : height > 0) :\n\
  \  ∀ row ∈ hollow_triangle height, row.length = 2 * height - 1 := sorry\n\n\ntheorem\
  \ hollow_triangle_bottom_row (height : Nat) (h : height > 0) :\n  (hollow_triangle\
  \ height).getLast (by sorry) = String.mk (List.replicate (2 * height - 1) '#') :=\
  \ sorry\n\n\ntheorem hollow_triangle_symmetric_hashes (height : Nat) (h : height\
  \ > 0) (i : Nat) :\n  ∀ row ∈ hollow_triangle height,\n  i < (hollow_triangle height).length\
  \ - 1 →\n  String.contains row (Char.ofNat 35) →\n  let chars := row.data\n  let\
  \ leftIdx := chars.findIdx? (· = '#')\n  match leftIdx with\n  | some l => chars.findIdx?\
  \ (· = '#') = some ((2 * (height - 1)) - l)\n  | none => true := sorry\n\n\ntheorem\
  \ hollow_triangle_minimal (height : Nat) (h : height = 1) :\n  hollow_triangle height\
  \ = [\"#\"] := sorry\n\n/--\ninfo: expected1\n-/\n#guard_msgs in\n#eval hollow_triangle\
  \ 6\n\n/--\ninfo: expected2\n-/\n#guard_msgs in\n#eval hollow_triangle 9\n\n/--\n\
  info: expected3\n-/\n#guard_msgs in\n#eval hollow_triangle 3\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
