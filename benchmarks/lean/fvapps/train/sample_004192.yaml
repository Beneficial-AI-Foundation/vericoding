"vc-description": "In the previous Kata we discussed the OR case.\n\nWe will now discuss\
  \ the AND case, where rather than calculating the probablility for either of two\
  \ (or more) possible results, we will calculate the probability of receiving all\
  \ of the viewed outcomes.\n\nFor example, if we want to know the probability of\
  \ receiving head OR tails in two tosses of a coin, as in the last Kata we add the\
  \ two probabilities together. However if we want to know the probability of receiving\
  \ head AND tails, in that order, we have to work differently.\n\nThe probability\
  \ of an AND event is calculated by the following rule:\n\n`P(A ∩ B) = P(A | B) *\
  \ P(B)`\n\nor\n\n`P(B ∩ A) = P(B | A) * P(A)`\n\nThat is, the probability of A and\
  \ B both occuring is equal to the probability of A given B occuring times the probability\
  \ of B occuring or vice versa. \nIf the events are mutually exclusive like in the\
  \ case of tossing a coin, the probability of A occuring if B has occured is equal\
  \ to the probability of A occuring by itself. In this case, the probability can\
  \ be written as the below:\n\n`P(A ∩ B) = P(A) * P(B)`\n\nor\n\n`P(B ∩ A) = P(B)\
  \ * P(A)`\n\nApplying to the heads and tails case:\n\n`P(H ∩ T) = P(0.5) * P(0.5)`\n\
  \nor\n\n`P(H ∩ T) = P(0.5) * P(0.5)`\n\nThe task:\n\nYou are given a random bag\
  \ of 10 balls containing 4 colours. `Red`, `Green`, `Yellow` and `Blue`. You will\
  \ also be given a sequence of 2 balls of any colour e.g. `Green` and `Red` or `Yellow`\
  \ and `Yellow`. \n\nYou have to return the probability of pulling a ball at random\
  \ out of the bag and it matching the first colour and then pulling a ball at random\
  \ out of the bag and it matching the second colour.\n\nYou will be given a boolean\
  \ value of `true` or `false` which indicates whether the balls that is taken out\
  \ in the first draw is replaced in to the bag for the second draw. Hint: this will\
  \ determine whether the events are mutually exclusive or not.\n\nYou will receive\
  \ two arrays and a boolean value. The first array contains the colours of the balls\
  \ in the bag and the second contains the colour of the two balls you have to receive.\
  \ As per above the final boolean value will indicate whether the bals arel being\
  \ replaced `true` or not `false`.\n\nReturn the probability to 3 decimal places.\n\
  \ne.g. `[[\"y\",\"r\",\"g\",\"b\",\"b\",\"y\",\"r\",\"g\",\"r\",\"r\"],[\"r\",\"\
  b\"],false]`\n\n\nOther Kata in this series:\nStatistics in Kata 1: OR case - Unfair\
  \ dice"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def ball_probability (bag : List String) (target : List String)\
  \ (replace : Bool) : Float := sorry\n\ntheorem probability_bounds {bag : List String}\
  \ {target : List String} {replace : Bool}\n  (h1 : target.length = 2)\n  (h2 : bag.length\
  \ ≥ 2) :\n  let prob := ball_probability bag target replace;\n  0 ≤ prob ∧ prob\
  \ ≤ 1 := sorry\n"
"vc-theorems": "theorem impossible_cases {bag : List String} {target : List String}\
  \ {replace : Bool}\n  (h1 : target.length = 2) \n  (h2 : ¬(∃ x ∈ bag, x = target[0]!))\
  \ \n  (h3 : ¬(∃ x ∈ bag, x = target[1]!)) :\n  ball_probability bag target replace\
  \ = 0 := sorry\n\n\ntheorem replacement_vs_no_replacement {bag : List String} {target\
  \ : List String}\n  (h1 : target.length = 2)\n  (h2 : bag.length ≥ 2)\n  (h3 : target[0]!\
  \ = target[1]!) :\n  ball_probability bag target true ≥ ball_probability bag target\
  \ false := sorry\n\n/--\ninfo: 0.09\n-/\n#guard_msgs in\n#eval ball_probability\
  \ *test1\n\n/--\ninfo: 0.1\n-/\n#guard_msgs in\n#eval ball_probability *test2\n\n\
  /--\ninfo: 0\n-/\n#guard_msgs in\n#eval ball_probability *test3\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
