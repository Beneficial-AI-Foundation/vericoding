"vc-description": "Given an array containing only integers, add all the elements and\
  \ return the binary equivalent of that sum.\n\nIf the array contains any non-integer\
  \ element (e.g. an object, a float, a string and so on), return false.\n\n**Note:**\
  \ The sum of an empty array is zero.\n\n```python\narr2bin([1,2]) == '11'\narr2bin([1,2,'a'])\
  \ == False\n```"
"vc-preamble": "import Imports.AllImports\n\ndef arr2bin (arr : List α) : String :=\
  \ sorry\n\ndef sumList (l : List Int) : Int := sorry\n\n\ndef toBinaryString (n\
  \ : Int) : String := sorry\n\ntheorem arr2bin_all_ints {arr : List Int} :\n  arr2bin\
  \ arr = toBinaryString (sumList arr) := sorry\n\n\ndef allBinary (s : String) :\
  \ Bool := sorry\ndef stringToNat (s : String) : Nat := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isAllInts (arr : List α) : Bool := sorry\ndef listToInts (arr\
  \ : List α) : List Int := sorry\n"
"vc-theorems": "theorem arr2bin_empty : \n  arr2bin ([] : List α) = \"0\" := sorry\n\
  \n\ntheorem arr2bin_positive_ints {arr : List Nat} :\n  let result := arr2bin arr\n\
  \  allBinary result ∧\n  stringToNat result = arr.foldl (init := 0) (·+·) := sorry\n\
  \n\ntheorem arr2bin_mixed_types {α} {arr : List α} :\n  (¬isAllInts arr → arr2bin\
  \ arr = \"\") ∧\n  (isAllInts arr → arr2bin arr = toBinaryString (sumList (listToInts\
  \ arr))) := sorry\n\n/--\ninfo: '11'\n-/\n#guard_msgs in\n#eval arr2bin [1, 2]\n\
  \n/--\ninfo: False\n-/\n#guard_msgs in\n#eval arr2bin [1, 2, \"a\"]\n\n/--\ninfo:\
  \ '0'\n-/\n#guard_msgs in\n#eval arr2bin []\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
