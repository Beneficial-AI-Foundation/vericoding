"vc-description": "Zookeeper is playing a game. In this game, Zookeeper must use bombs\
  \ to bomb a string that consists of letters 'A' and 'B'. He can use bombs to bomb\
  \ a substring which is either \"AB\" or \"BB\". When he bombs such a substring,\
  \ the substring gets deleted from the string and the remaining parts of the string\
  \ get concatenated.\n\nFor example, Zookeeper can use two such operations: AABABBA\
  \ $\\to$ AABBA $\\to$ AAA.\n\nZookeeper wonders what the shortest string he can\
  \ make is. Can you help him find the length of the shortest string?\n\n\n-----Input-----\n\
  \nEach test contains multiple test cases. The first line contains a single integer\
  \ $t$ $(1 \\leq t \\leq 20000)$  — the number of test cases. The description of\
  \ the test cases follows.\n\nEach of the next $t$ lines contains a single test case\
  \ each, consisting of a non-empty string $s$: the string that Zookeeper needs to\
  \ bomb. It is guaranteed that all symbols of $s$ are either 'A' or 'B'.\n\nIt is\
  \ guaranteed that the sum of $|s|$ (length of $s$) among all test cases does not\
  \ exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, print a single\
  \ integer: the length of the shortest string that Zookeeper can make.\n\n\n-----Example-----\n\
  Input\n3\nAAA\nBABA\nAABBBABBBB\n\nOutput\n3\n2\n0\n\n\n\n-----Note-----\n\nFor\
  \ the first test case, you can't make any moves, so the answer is $3$.\n\nFor the\
  \ second test case, one optimal sequence of moves is BABA $\\to$ BA. So, the answer\
  \ is $2$.\n\nFor the third test case, one optimal sequence of moves is AABBBABBBB\
  \ $\\to$ AABBBABB $\\to$ AABBBB $\\to$ ABBB $\\to$ AB $\\to$ (empty string). So,\
  \ the answer is $0$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def get_shortest_string_length (s : String) : Nat := sorry\n\n\
  theorem shortest_length_non_negative (s : String) : \n  get_shortest_string_length\
  \ s ≥ 0 := sorry\n"
"vc-theorems": "theorem shortest_length_at_most_input (s : String) :\n  get_shortest_string_length\
  \ s ≤ String.length s := sorry\n\n\n\n\ntheorem AB_reduces_length (s : String) (i\
  \ : Nat) :\n  i + 1 < s.length →\n  (h1 : i < s.length) →\n  (h2 : i + 1 < s.length)\
  \ →\n  s.data[i]'h1 = 'A' →\n  s.data[i + 1]'h2 = 'B' →\n  get_shortest_string_length\
  \ s < String.length s := sorry\n\n\ntheorem BB_reduces_length (s : String) (i :\
  \ Nat) :\n  i + 1 < s.length →\n  (h1 : i < s.length) →\n  (h2 : i + 1 < s.length)\
  \ →\n  s.data[i]'h1 = 'B' →\n  s.data[i + 1]'h2 = 'B' →\n  get_shortest_string_length\
  \ s < String.length s := sorry\n\n\ntheorem repeated_B_reduces_to_zero_or_one (n\
  \ : Nat) :\n  let s := String.mk (List.replicate n 'B')\n  get_shortest_string_length\
  \ s = 0 ∨ get_shortest_string_length s = 1 := sorry\n\n/--\ninfo: 3\n-/\n#guard_msgs\
  \ in\n#eval get_shortest_string_length \"AAA\"\n\n/--\ninfo: 2\n-/\n#guard_msgs\
  \ in\n#eval get_shortest_string_length \"BABA\"\n\n/--\ninfo: 0\n-/\n#guard_msgs\
  \ in\n#eval get_shortest_string_length \"AABBBABBBB\"\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded_and_plausible"
