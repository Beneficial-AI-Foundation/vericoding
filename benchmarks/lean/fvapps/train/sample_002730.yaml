"vc-description": "A `Nice array` is defined to be an array where for every value\
  \ `n` in the array, there is also an element `n-1` or `n+1` in the array.\n\nexample:\n\
  \n```\n[2,10,9,3] is Nice array because\n\n2=3-1\n10=9+1\n3=2+1\n9=10-1\n```\nWrite\
  \ a function named `isNice`/`IsNice` that returns `true` if its array argument is\
  \ a Nice array, else `false`. You should also return `false` if `input` array has\
  \ `no` elements."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_nice (arr : List Int) : Bool := \n  sorry\n"
"vc-theorems": "theorem nice_list_nonempty {arr : List Int} : \n  is_nice arr → arr\
  \ ≠ [] :=\n  sorry\n\n\ntheorem nice_list_has_neighbors {arr : List Int} {n : Int}\
  \ :\n  is_nice arr → n ∈ arr → \n  (n + 1 ∈ arr) ∨ (n - 1 ∈ arr) :=\n  sorry\n\n\
  \ntheorem empty_list_not_nice :\n  ¬is_nice [] :=\n  sorry\n\n\ntheorem singleton_not_nice\
  \ (x : Int) :\n  ¬is_nice [x] :=\n  sorry\n\n\ntheorem sequential_is_nice_ascending\
  \ :\n  is_nice [0, 1, 2] :=\n  sorry\n\n\ntheorem sequential_is_nice_negative :\n\
  \  is_nice [-2, -1, 0] :=\n  sorry\n\n\ntheorem sequential_is_nice_descending :\n\
  \  is_nice [10, 9, 8] :=\n  sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval\
  \ is_nice [2, 10, 9, 3]\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval is_nice [3,\
  \ 4, 5, 7]\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval is_nice [0, -1, 1]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
