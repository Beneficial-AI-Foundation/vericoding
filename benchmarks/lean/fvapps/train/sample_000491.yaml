"vc-description": "In a network of nodes, each node i is directly connected to another\
  \ node j if and only if graph[i][j] = 1.\nSome nodes initial are initially infected\
  \ by malware.  Whenever two nodes are directly connected and at least one of those\
  \ two nodes is infected by malware, both nodes will be infected by malware.  This\
  \ spread of malware will continue until no more nodes can be infected in this manner.\n\
  Suppose M(initial) is the final number of nodes infected with malware in the entire\
  \ network, after the spread of malware stops.\nWe will remove one node from the\
  \ initial list.  Return the node that if removed, would minimize M(initial).  If\
  \ multiple nodes could be removed to minimize M(initial), return such a node with\
  \ the smallest index.\nNote that if a node was removed from the initial list of\
  \ infected nodes, it may still be infected later as a result of the malware spread.\n\
   \n\n\nExample 1:\nInput: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\nOutput:\
  \ 0\n\nExample 2:\nInput: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]\nOutput:\
  \ 0\n\nExample 3:\nInput: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]\nOutput:\
  \ 1\n\n \nNote:\n\n1 < graph.length = graph[0].length <= 300\n0 <= graph[i][j] ==\
  \ graph[j][i] <= 1\ngraph[i][i] == 1\n1 <= initial.length <= graph.length\n0 <=\
  \ initial[i] < graph.length"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def min_malware_spread (graph : List (List Nat)) (initial : List\
  \ Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem min_malware_spread_result_in_initial {graph : List (List Nat)}\
  \ {initial : List Nat} \n    (h_graph_valid : List.length graph > 0)\n    (h_initial_valid\
  \ : List.length initial > 0)\n    (h_initial_bounded : ∀ x, x ∈ initial → x < List.length\
  \ graph)\n    : min_malware_spread graph initial ∈ initial := \n  sorry\n\n\ntheorem\
  \ min_malware_spread_minimum_node {graph : List (List Nat)} {initial : List Nat}\n\
  \    (h_graph_valid : List.length graph > 0) \n    (h_initial_valid : List.length\
  \ initial > 0)\n    (h_initial_bounded : ∀ x, x ∈ initial → x < List.length graph)\n\
  \    : ∀ x, x ∈ initial → min_malware_spread graph initial ≤ x := \n  sorry\n\n\n\
  theorem graph_symmetry {graph : List (List Nat)}\n    (h_graph_valid : List.length\
  \ graph > 0)\n    : ∀ i j, i < List.length graph → j < List.length graph →\n   \
  \   (List.get! graph i).get! j = (List.get! graph j).get! i :=\n  sorry\n\n\ntheorem\
  \ graph_self_connections {graph : List (List Nat)}\n    (h_graph_valid : List.length\
  \ graph > 0)\n    : ∀ i, i < List.length graph → (List.get! graph i).get! i = 1\
  \ :=\n  sorry\n\n\ntheorem graph_binary_adjacency {graph : List (List Nat)}\n  \
  \  (h_graph_valid : List.length graph > 0)\n    : ∀ i j, i < List.length graph →\
  \ j < List.length graph →\n      (List.get! graph i).get! j ≤ 1 :=\n  sorry\n\n\
  /--\ninfo: 0\n-/\n#guard_msgs in\n#eval min_malware_spread [[1, 1, 0], [1, 1, 0],\
  \ [0, 0, 1]] [0, 1]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval min_malware_spread\
  \ [[1, 0, 0], [0, 1, 0], [0, 0, 1]] [0, 2]\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n\
  #eval min_malware_spread [[1, 1, 1], [1, 1, 1], [1, 1, 1]] [1, 2]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
