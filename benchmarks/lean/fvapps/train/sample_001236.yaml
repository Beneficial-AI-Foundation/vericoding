"vc-description": "Chef hates unoptimized codes and people who write such codes. One\
  \ fine day he decided to look through the kitchen's codebase and found a function\
  \ whose pseudo-code is given here:\n\ninput: integer N, list X[1, 2, ..., N], list\
  \ Y[1, 2, ..., N]\n\noutput: integer res\n\nfunction:\n\nset res = 0;\nfor i :=\
  \ 1 to N do\nfor j := 1 to N do\nfor k := 1 to N do\nif (X[i] = X[j]) OR (X[j] =\
  \ X[k]) OR (X[k] = X[i])\ncontinue\nelse\nset res = max(res, Y[i] + Y[j] + Y[k])\n\
  return res\n\nLuckily enough this code gets triggered only if the Head Chef makes\
  \ a submission. But still there is a possibility that this can crash the judge.\
  \ So help Chef by writing a new function which does the same thing but is faster.\n\
  \n-----Input-----\n- The first line of the input contains an integer T denoting\
  \ the number of test cases. The description of T test cases follows.\n- The first\
  \ line of each test case contains an integer N denoting the number of elements in\
  \ the two lists.\n- The i-th of the next N lines contains a pair of space-separated\
  \ integers denoting the values of X[i] and Y[i] respectively.\n\n-----Output-----\n\
  For each test case, output an integer corresponding to the return value of the function.\n\
  \n-----Constraints-----\n- 1 ≤ T ≤ 10\n- 1 ≤ N ≤ 105\n- 1 ≤ X[i], Y[i] ≤ 108\n\n\
  -----Example-----\nInput\n2\n3\n1 3\n3 1\n1 2\n5\n1 3\n2 4\n1 2\n3 2\n3 4\n\nOutput\n\
  0\n11\n\n-----Explanation-----\nTestcase 2: The maximum is attained when i = 1,\
  \ j = 2 and k = 5. This leads to res being 3 + 4 + 4 = 11. This value is attained\
  \ in other iterations as well, but it never exceeds this, and hence this is the\
  \ answer."
"vc-preamble": "import Imports.AllImports\n\ndef Coord := Nat × Nat \n\ndef max_distinct_sum\
  \ (n: Nat) (pairs: List Coord) : Nat :=\n  sorry\n\n\n\n\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def List.sum : List Nat → Nat \n  | [] => 0\n  | x::xs => x + List.sum\
  \ xs\n"
"vc-theorems": "theorem max_distinct_sum_single_coord (n: Nat) :\n  max_distinct_sum\
  \ n [(1,n)] = 0 :=\nsorry\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval max_distinct_sum\
  \ 3 [(1, 3), (3, 1), (1, 2)]\n\n/--\ninfo: 11\n-/\n#guard_msgs in\n#eval max_distinct_sum\
  \ 5 [(1, 3), (2, 4), (1, 2), (3, 2), (3, 4)]\n\n/--\ninfo: 9\n-/\n#guard_msgs in\n\
  #eval max_distinct_sum 4 [(1, 1), (2, 2), (3, 3), (4, 4)]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
