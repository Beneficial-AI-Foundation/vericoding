vc-description: |-
  Alex and Lee continue their games with piles of stones.  There are a number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].  The objective of the game is to end with the most stones. 
  Alex and Lee take turns, with Alex starting first.  Initially, M = 1.
  On each player's turn, that player can take all the stones in the first X remaining piles, where 1 <= X <= 2M.  Then, we set M = max(M, X).
  The game continues until all the stones have been taken.
  Assuming Alex and Lee play optimally, return the maximum number of stones Alex can get.
   
  Example 1:
  Input: piles = [2,7,9,4,4]
  Output: 10
  Explanation:  If Alex takes one pile at the beginning, Lee takes two piles, then Alex takes 2 piles again. Alex can get 2 + 4 + 4 = 10 piles in total. If Alex takes two piles at the beginning, then Lee can take all three piles left. In this case, Alex get 2 + 7 = 9 piles in total. So we return 10 since it's larger. 

   
  Constraints:

  1 <= piles.length <= 100
  1 <= piles[i] <= 10 ^ 4
vc-preamble: |
  import Imports.AllImports

  def List.sum : List Nat → Nat 
    | [] => 0
    | (x::xs) => x + sum xs
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def stone_game_ii (piles : List Nat) : Nat :=
    sorry
vc-theorems: |
  theorem stone_game_ii_positive (piles : List Nat) 
    (h : piles.all (λ x => x > 0)) :
    stone_game_ii piles > 0 :=
  sorry


  theorem stone_game_ii_bounded (piles : List Nat) :
    stone_game_ii piles ≤ List.sum piles :=
  sorry  


  theorem stone_game_ii_singleton (pile : Nat) 
    (h : pile > 0) : 
    stone_game_ii [pile] = pile :=
  sorry


  theorem stone_game_ii_same_values (x : Nat)
    (h : x > 0) :
    stone_game_ii [x, x, x] ≤ 3 * x :=
  sorry

  /--
  info: 10
  -/
  #guard_msgs in
  #eval stone_game_ii [2, 7, 9, 4, 4]

  /--
  info: 1
  -/
  #guard_msgs in
  #eval stone_game_ii [1]

  /--
  info: 15
  -/
  #guard_msgs in
  #eval stone_game_ii [8, 7, 1, 2]
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
