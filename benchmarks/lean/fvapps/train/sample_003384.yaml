"vc-description": "Your car is old, it breaks easily. The shock absorbers are gone\
  \ and you think it can handle about 15 more bumps before it dies totally.\n\nUnfortunately\
  \ for you, your drive is very bumpy! Given a string showing either flat road (\"\
  \\_\") or bumps (\"n\"), work out if you make it home safely. 15 bumps or under,\
  \ return \"Woohoo!\", over 15 bumps return \"Car Dead\"."
"vc-preamble": "import Imports.AllImports\n\ndef countChar (s : String) (c : Char)\
  \ : Nat := \n  (s.data.filter (· = c)).length\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def bumps (road : String) : String :=\n  sorry\n"
"vc-theorems": "theorem bumps_returns_valid_output (road : String) :\n  (bumps road\
  \ = \"Woohoo!\" ∨ bumps road = \"Car Dead\") ∧\n  (bumps road = \"Woohoo!\" ↔ countChar\
  \ road 'n' ≤ 15) :=\nsorry\n\n\ntheorem no_bumps_woohoo (road : String) :\n  (∀\
  \ c ∈ road.toList, c = '_') →\n  bumps road = \"Woohoo!\" :=\nsorry\n\n\ntheorem\
  \ too_many_bumps_dead (road : String) :\n  (∀ c ∈ road.toList, c = 'n') →\n  road.length\
  \ ≥ 16 →\n  bumps road = \"Car Dead\" :=\nsorry\n\n\ntheorem empty_road_woohoo :\n\
  \  bumps \"\" = \"Woohoo!\" :=\nsorry\n\n\ntheorem edge_case_fifteen :\n  let nStr15\
  \ := String.mk (List.replicate 15 'n')\n  let nStr16 := String.mk (List.replicate\
  \ 16 'n')\n  bumps nStr15 = \"Woohoo!\" ∧\n  bumps nStr16 = \"Car Dead\" :=\nsorry\n\
  \n/--\ninfo: 'Woohoo!'\n-/\n#guard_msgs in\n#eval bumps \"n\"\n\n/--\ninfo: 'Car\
  \ Dead'\n-/\n#guard_msgs in\n#eval bumps \"_nnnnnnn_n__n______nn__nn_nnn\"\n\n/--\n\
  info: 'Woohoo!'\n-/\n#guard_msgs in\n#eval bumps \"______n___n_\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
