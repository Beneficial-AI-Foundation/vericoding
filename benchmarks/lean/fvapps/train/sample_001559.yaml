"vc-description": "I started this as a joke among friends, telling that converting\
  \ numbers to other integer bases is for n00bs, while an actual coder at least converts\
  \ numbers to more complex bases like [pi (or π or however you wish to spell it in\
  \ your language)](http://en.wikipedia.org/wiki/Pi), so they dared me proving I was\
  \ better.\n\nAnd I did it in few hours, discovering that what I started as a joke\
  \ actually has [some math ground and application (particularly the conversion to\
  \ base pi, it seems)](http://en.wikipedia.org/wiki/Non-integer_representation).\n\
  \nThat said, now I am daring you to do the same, that is to build a function so\
  \ that it takes a **number** (any number, you are warned!) and optionally the **number\
  \ of decimals** (default: 0) and a **base** (default: pi), returning the proper\
  \ conversion **as a string**:\n\n#Note\nIn Java there is no easy way with optional\
  \ parameters so all three parameters will be given; the same in C# because, as of\
  \ now, the used version is not known. \n\n```python\nconverter(13) #returns '103'\n\
  converter(13,3) #returns '103.010'\nconverter(-13,0,2) #returns '-1101'\n```\n\n\
  I know most of the world uses a comma as a [decimal mark](http://en.wikipedia.org/wiki/Decimal_mark),\
  \ but as English language and culture are *de facto* the Esperanto of us coders,\
  \ we will stick to our common glorious traditions and uses, adopting the trivial\
  \ dot (\".\") as decimal separator; if the absolute value of the result is <1, you\
  \ have of course to put one (and only one) leading 0 before the decimal separator.\n\
  \nFinally, you may assume that decimals if provided will always be >= 0 and that\
  \ no test base will be smaller than 2 (because, you know, converting to base 1 is\
  \ pretty lame) or greater than 36; as usual, for digits greater than 9 you can use\
  \ uppercase alphabet letter, so your base of numeration is going to be: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\n\
  \nThat is my first 3-languages-kata, so I count on you all to give me extensive\
  \ feedback, no matter how harsh it may sound, so to improve myself even further\
  \ :)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def converter (n : Float) (decimals : Nat := 0) (base : Float :=\
  \ 3.14159265359) : String := sorry\n\ndef intToFloat (n : Int) : Float := Float.ofInt\
  \ n\n"
"vc-theorems": "theorem converter_sign_property {n : Float} {decimals : Nat} {base\
  \ : Float}\n  (h1 : -1000 ≤ n) (h2 : n ≤ 1000)\n  (h3 : 1.1 ≤ base) (h4 : base ≤\
  \ 36) :\n  (converter n decimals base).startsWith \"-\" = (n < 0) := sorry\n\n\n\
  theorem converter_decimal_property {n : Float} {decimals : Nat} {base : Float}\n\
  \  (h1 : -1000 ≤ n) (h2 : n ≤ 1000)\n  (h3 : 1.1 ≤ base) (h4 : base ≤ 36) :\n  (converter\
  \ n decimals base).contains '.' = (decimals > 0) := sorry\n\n\ntheorem converter_decimal_length\
  \ {n : Float} {decimals : Nat} {base : Float}\n  (h1 : -1000 ≤ n) (h2 : n ≤ 1000)\n\
  \  (h3 : decimals > 0)\n  (h4 : 1.1 ≤ base) (h5 : base ≤ 36) :\n  ((converter n\
  \ decimals base).split (· = '.')).getLast!.length = decimals := sorry\n\n\ntheorem\
  \ converter_integer_no_decimal {n : Int}\n  (h1 : -1000 ≤ n) (h2 : n ≤ 1000) :\n\
  \  ¬(converter (intToFloat n) 0).contains '.' := sorry\n\n\ntheorem converter_default_base_is_pi\
  \ {n : Float} {decimals : Nat}\n  (h1 : -1000 ≤ n) (h2 : n ≤ 1000) :\n  converter\
  \ n decimals = converter n decimals 3.14159265359 := sorry\n\n\ntheorem converter_base_2_is_binary\
  \ {n : Nat}\n  (h : n ≤ 1000) :\n  ∀ c ∈ (converter (intToFloat n) 0 2).data, c\
  \ = '0' ∨ c = '1' := sorry\n\n/--\ninfo: '103'\n-/\n#guard_msgs in\n#eval converter\
  \ 13\n\n/--\ninfo: '103.010'\n-/\n#guard_msgs in\n#eval converter 13 3\n\n/--\n\
  info: '-1101'\n-/\n#guard_msgs in\n#eval converter -13 0 2\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
