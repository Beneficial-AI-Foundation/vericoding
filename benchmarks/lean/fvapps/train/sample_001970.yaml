"vc-description": "We have a string of letters 'a' and 'b'. We want to perform some\
  \ operations on it. On each step we choose one of substrings \"ab\" in the string\
  \ and replace it with the string \"bba\". If we have no \"ab\" as a substring, our\
  \ job is done. Print the minimum number of steps we should perform to make our job\
  \ done modulo 10^9 + 7.\n\nThe string \"ab\" appears as a substring if there is\
  \ a letter 'b' right after the letter 'a' somewhere in the string.\n\n\n-----Input-----\n\
  \nThe first line contains the initial string consisting of letters 'a' and 'b' only\
  \ with length from 1 to 10^6.\n\n\n-----Output-----\n\nPrint the minimum number\
  \ of steps modulo 10^9 + 7.\n\n\n-----Examples-----\nInput\nab\n\nOutput\n1\n\n\
  Input\naab\n\nOutput\n3\n\n\n\n-----Note-----\n\nThe first example: \"ab\"  →  \"\
  bba\".\n\nThe second example: \"aab\"  →  \"abba\"  →  \"bbaba\"  →  \"bbbbaa\"."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_min_steps (s : String) : Nat := sorry\n\ntheorem count_min_steps_nonnegative\
  \ (s : String) : \n  count_min_steps s ≥ 0 := sorry\n"
"vc-theorems": "theorem count_min_steps_bounded (s : String) :\n  count_min_steps\
  \ s < 1000000007 := sorry \n\n\ntheorem count_min_steps_empty :\n  count_min_steps\
  \ \"\" = 0 := sorry\n\n\n\n\ntheorem count_min_steps_ab :\n  count_min_steps \"\
  ab\" = 1 := sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval count_min_steps \"\
  ab\"\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval count_min_steps \"aab\"\n\n/--\n\
  info: 2\n-/\n#guard_msgs in\n#eval count_min_steps \"abbaa\"\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded_and_plausible"
