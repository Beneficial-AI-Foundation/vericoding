"vc-description": "There are two sorted arrays nums1 and nums2 of size m and n respectively.\n\
  \nFind the median of the two sorted arrays. The overall run time complexity should\
  \ be O(log (m+n)).\n\nExample 1:\n\nnums1 = [1, 3]\nnums2 = [2]\n\nThe median is\
  \ 2.0\n\n\n\nExample 2:\n\nnums1 = [1, 2]\nnums2 = [3, 4]\n\nThe median is (2 +\
  \ 3)/2 = 2.5"
"vc-preamble": "import Imports.AllImports\n\ndef findMedianSortedArrays (nums1 : List\
  \ Int) (nums2 : List Int) : Float :=\n  sorry\n\n\ndef getMedian (l : List Int)\
  \ : Float :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def mergeSorted (l1 l2 : List Int) : List Int :=\n  sorry\n"
"vc-theorems": "theorem findMedianSortedArrays_correct (nums1 nums2 : List Int)\n\
  \  (h : ¬(nums1.length = 0 ∧ nums2.length = 0)) :\n  findMedianSortedArrays nums1\
  \ nums2 = getMedian (mergeSorted nums1 nums2) := by\n  sorry\n\n\ntheorem findMedianSortedArrays_symmetric\
  \ (nums1 nums2 : List Int) \n  (h : ¬(nums1.length = 0 ∧ nums2.length = 0)) :\n\
  \  findMedianSortedArrays nums1 nums2 = findMedianSortedArrays nums2 nums1 := by\n\
  \  sorry\n\n\ntheorem findMedianSortedArrays_bounded (nums1 nums2 : List Int) \n\
  \  (h1 : ∀ x ∈ nums1, -1000 ≤ x ∧ x ≤ 1000)\n  (h2 : ∀ x ∈ nums2, -1000 ≤ x ∧ x\
  \ ≤ 1000)\n  (h3 : ¬(nums1.length = 0 ∧ nums2.length = 0)) :\n  -1000 ≤ findMedianSortedArrays\
  \ nums1 nums2 ∧ \n  findMedianSortedArrays nums1 nums2 ≤ 1000 := by\n  sorry\n\n\
  /--\ninfo: 2.0\n-/\n#guard_msgs in\n#eval find_median_sorted_arrays #[1, 3] #[2]\n\
  \n/--\ninfo: 2.5\n-/\n#guard_msgs in\n#eval find_median_sorted_arrays #[1, 2] #[3,\
  \ 4]\n\n/--\ninfo: 3.0\n-/\n#guard_msgs in\n#eval find_median_sorted_arrays #[1]\
  \ #[2, 3, 4, 5]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
