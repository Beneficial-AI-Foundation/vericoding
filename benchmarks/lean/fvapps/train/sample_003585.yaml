"vc-description": "# Task\n Given some points(array `A`) on the same line, determine\
  \ the minimum number of line segments with length `L` needed to cover all of the\
  \ given points. A point is covered if it is located inside some segment or on its\
  \ bounds.\n\n# Example\n\n For `A = [1, 3, 4, 5, 8]` and `L = 3`, the output should\
  \ be `2`.\n\n Check out the image below for better understanding:\n\n![](https://codefightsuserpics.s3.amazonaws.com/tasks/segmentCover/img/example.png?_tm=1474900035857)\n\
  \n \n For `A = [1, 5, 2, 4, 3]` and `L = 1`, the output should be `3`.\n \n segment1:\
  \ `1-2`(covered points 1,2), \n \n segment2: `3-4`(covered points 3,4),\n \n segment3:\
  \ `5-6`(covered point 5)\n\n For `A = [1, 10, 100, 1000]` and `L = 1`, the output\
  \ should be `4`.\n \n segment1: `1-2`(covered point 1), \n \n segment2: `10-11`(covered\
  \ point 10),\n \n segment3: `100-101`(covered point 100), \n \n segment4: `1000-1001`(covered\
  \ point 1000)\n\n\n# Input/Output\n\n\n - `[input]` integer array A\n\n    Array\
  \ of point coordinates on the line (all points are different).\n\n    Constraints:\n\
  \n    `1 ≤ A.length ≤ 50,`\n\n    `-5000 ≤ A[i] ≤ 5000.`\n\n\n - `[input]` integer\
  \ `L`\n\n    Segment length, a positive integer.\n\n    Constraints: `1 ≤ L ≤ 100.`\n\
  \n\n - `[output]` an integer\n \n   The minimum number of line segments that can\
  \ cover all of the given points."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def segment_cover (A : List Int) (L : Nat) : Nat := sorry\n\ntheorem\
  \ segment_cover_bounds {A : List Int} {L : Nat} (h : A.length > 0) : \n  1 ≤ segment_cover\
  \ A L ∧ segment_cover A L ≤ A.length := sorry\n\n\n"
"vc-theorems": "theorem larger_L_needs_fewer_segments {A : List Int} {L : Nat} (h\
  \ : A.length > 0) (hL : L > 0) :\n  segment_cover A L ≤ segment_cover A (L-1) :=\
  \ sorry\n\n\ntheorem ordered_preserves_segments {A B : List Int} {L : Nat} (h :\
  \ A.length > 0) (h2 : List.Perm A B) :\n  segment_cover A L = segment_cover B L\
  \ := sorry\n\n\ntheorem large_L_single_segment {A : List Int} (h : A.length > 0)\
  \ :\n  let max_dist := (List.maximum? A).getD 0 - (List.minimum? A).getD 0\n  segment_cover\
  \ A ((max_dist : Int).toNat) = 1 := sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n\
  #eval segment_cover [1, 3, 4, 5, 8] 3\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval\
  \ segment_cover [1, 5, 2, 4, 3] 1\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval segment_cover\
  \ [1, 10, 100, 1000] 1\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
