"vc-description": "Sam is an avid collector of numbers. Every time he finds a new\
  \ number he throws it on the top of his number-pile. Help Sam organise his collection\
  \ so he can take it to the International Number Collectors Conference in Cologne.\
  \ \n\nGiven an array of numbers, your function should return an array of arrays,\
  \ where each subarray contains all the duplicates of a particular number. Subarrays\
  \ should be in the same order as the first occurence of the number they contain:\n\
  Assume the input is always going to be an array of numbers. If the input is an empty\
  \ array, an empty array should be returned."
"vc-preamble": "import Imports.AllImports\n\ndef group (arr : List Int) : List (List\
  \ Int) := sorry\n\ndef listSum (xs : List Nat) : Nat := \n  match xs with\n  | []\
  \ => 0\n  | h :: t => h + listSum t\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def listSort (xs : List Int) : List Int := sorry\n\ndef listIndexOf\
  \ (xs : List Int) (x : Int) : Nat := sorry\n\n\n"
"vc-theorems": "theorem group_idempotent {arr : List Int} (h : arr â‰  []) :\n  let\
  \ result1 := group arr;\n  let flattened := result1.join;\n  let result2 := group\
  \ flattened;\n  result1 = result2 :=\nsorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
