"vc-description": "### Background\n\nI was reading a [book](http://www.amazon.co.uk/Things-Make-Do-Fourth-Dimension/dp/1846147646/)\
  \ recently, \"Things to Make and Do in the Fourth Dimension\" by comedian and mathematician\
  \ Matt Parker, and in the first chapter of the book Matt talks about problems he\
  \ likes to solve in his head to take his mind off the fact that he is in his dentist's\
  \ chair, we've all been there!\n\nThe problem he talks about relates to polydivisible\
  \ numbers, and I thought a kata should be written on the subject as it's quite interesting.\
  \ (Well it's interesting to me, so there!)\n\n### Polydivisib... huh what?\n\nSo\
  \ what are they?\n\nA polydivisible number is divisible in an unusual way. The first\
  \ digit is cleanly divisible by `1`, the first two digits are cleanly divisible\
  \ by `2`, the first three by `3` and so on.\n\nThe interesting thing about polydivisiblity\
  \ is that it relates to the underlying number, but not the base it is written in,\
  \ so if aliens came to Earth and used base `23` (`11` fingers on one hand and `12`\
  \ on the other), no matter what squiggles they use to write numbers, they would\
  \ find the same numbers polydivisible!\n\n### Polydivisibilty Example:\n\nLet's\
  \ do a worked example to clear up any questions ...\n\nStarting wih the number `1,232`\
  \ in base `10` then:\n\n```\n 1232\n 1    /1 = 1    Yay!\n 12   /2 = 6    Yay!\n\
  \ 123  /3 = 41   Yay!\n 1232 /4 = 308  Yay!\n```\n\nThus `1,232` is a polydivisible\
  \ number in base `4` and above.\n\nHowever starting wih the number `123,220` and\
  \ using base `10` then:\n\n```\n 123220\n 1      /1 = 1            Yay!\n 12   \
  \  /2 = 6            Yay!\n 123    /3 = 41           Yay!\n 1232   /4 = 308    \
  \      Yay!\n 12322  /5 = 2464.4       Oh no, that's not a round number!\n 123220\
  \ /6 = 220536.333r  Oh no, that's not a round number!\n```\n\nThus `123,220` is\
  \ not a polydivisible base 10 number, but what about in another base?\n\nAgain starting\
  \ wih the number `123,220` and using base `6` then:\n\n```\n base 6   base 10\n\
  \ 1      = 1       -> 1     /1 = 1     Yay!\n 12     = 8       -> 8     /2 = 4 \
  \    Yay!\n 123    = 51      -> 51    /3 = 17    Yay!\n 1232   = 308     -> 308\
  \   /4 = 77    Yay!\n 12322  = 1850    -> 1850  /5 = 370   Yay!\n 123220 = 11100\
  \   -> 11100 /6 = 1850  Yay!\n```\n\nThus `123,220` is a polydivisible base `6`\
  \ number (and a polydivisible base `10` number when converted to `11100` in base\
  \ `10`).\n\n### Kata\n\nIn this kata you must implement two methods: `is_polydivisible(n,\
  \ b)` and `get_polydivisible(n, b)`.\n\nThe first `is_polydivisible(n, b)` will\
  \ return `True` if `n` is polydivisible in base `b` or `False` if not.\n\nThe second\
  \ `get_polydivisible(n, b)` will return the `n`th polydivisible number using base\
  \ `b`, the first polydivisible number is of course always `0`.\n\nYou can assume\
  \ that all inputs are valid.\n\n```if:haskell\nAll necessary arithmetic can be done\
  \ in `Int` range.\n```\n\n### Kata Examples:\n\n```python\n    is_polydivisible(\"\
  1232\", 10)   # => True\n    is_polydivisible(\"123220\", 10) # => False\n    is_polydivisible(\"\
  123220\", 6)  # => True\n    get_polydivisible(22, 10)      # => \"32\"\n    get_polydivisible(22,\
  \ 16)      # => \"1A\"\n    get_polydivisible(42, 16)      # => \"42\"\n```\n\n\
  #### A Note on Bases\n\nThe maximum base used is base `62`, and uses characters\
  \ in the following order `[0-9][A-Z][a-z]` to denote its digits, base `n` will use\
  \ the first `n` characters of this sequence.\n```if-not:haskell\nA constant CHARS\
  \ has been declared with this sequence for you.\n```"
"vc-preamble": "import Imports.AllImports\n\ndef CHARS := ['0', '1', '2', '3', '4',\
  \ '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n\ndef int_to_base_n (num\
  \ : Nat) (base : Nat) : String :=\nsorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_polydivisible (s : String) (base : Nat) : Bool :=\nsorry\
  \ \n"
"vc-theorems": "theorem single_digit_polydivisible {base : Nat} (h1 : base ≥ 2) (h2\
  \ : base ≤ CHARS.length) :\n  ∀ (digit : Char), digit ∈ CHARS.take base → is_polydivisible\
  \ digit.toString base :=\nsorry\n\n\ntheorem base_conversion_result_bool {base :\
  \ Nat} (h1 : base ≥ 2) (h2 : base ≤ CHARS.length) \n  (decimal_num : Nat) :\n  let\
  \ base_n := int_to_base_n decimal_num base\n  ∃ (b : Bool), is_polydivisible base_n\
  \ base = b :=\nsorry\n\n\ntheorem zero_polydivisible {base : Nat} (h1 : base ≥ 2)\
  \ (h2 : base ≤ CHARS.length) :\n  is_polydivisible \"0\" base = true :=\nsorry\n\
  \n/--\ninfo: True\n-/\n#guard_msgs in\n#eval is_polydivisible \"123\" 10\n\n/--\n\
  info: False\n-/\n#guard_msgs in\n#eval is_polydivisible \"1234\" 10\n\n/--\ninfo:\
  \ True\n-/\n#guard_msgs in\n#eval is_polydivisible \"123220\" 6\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
