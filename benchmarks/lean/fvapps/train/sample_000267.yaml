"vc-description": "Given an array of integers nums and an integer limit, return the\
  \ size of the longest non-empty subarray such that the absolute difference between\
  \ any two elements of this subarray is less than or equal to limit.\n \nExample\
  \ 1:\nInput: nums = [8,2,4,7], limit = 4\nOutput: 2 \nExplanation: All subarrays\
  \ are: \n[8] with maximum absolute diff |8-8| = 0 <= 4.\n[8,2] with maximum absolute\
  \ diff |8-2| = 6 > 4. \n[8,2,4] with maximum absolute diff |8-2| = 6 > 4.\n[8,2,4,7]\
  \ with maximum absolute diff |8-2| = 6 > 4.\n[2] with maximum absolute diff |2-2|\
  \ = 0 <= 4.\n[2,4] with maximum absolute diff |2-4| = 2 <= 4.\n[2,4,7] with maximum\
  \ absolute diff |2-7| = 5 > 4.\n[4] with maximum absolute diff |4-4| = 0 <= 4.\n\
  [4,7] with maximum absolute diff |4-7| = 3 <= 4.\n[7] with maximum absolute diff\
  \ |7-7| = 0 <= 4. \nTherefore, the size of the longest subarray is 2.\n\nExample\
  \ 2:\nInput: nums = [10,1,2,4,7,2], limit = 5\nOutput: 4 \nExplanation: The subarray\
  \ [2,4,7,2] is the longest since the maximum absolute diff is |2-7| = 5 <= 5.\n\n\
  Example 3:\nInput: nums = [4,2,2,2,4,4,2,2], limit = 0\nOutput: 3\n\n \nConstraints:\n\
  \n1 <= nums.length <= 10^5\n1 <= nums[i] <= 10^9\n0 <= limit <= 10^9"
"vc-preamble": "import Imports.AllImports\n\ndef maxEqualSeq : List Int → Nat \n \
  \ | [] => 1\n  | [x] => 1 \n  | x::y::xs => if x = y \n                then 1 +\
  \ maxEqualSeq (y::xs)\n                else max 1 (maxEqualSeq (y::xs))\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def longestSubarray (nums : List Int) (limit : Nat) : Nat := sorry\n\
  \ntheorem longestSubarray_result_bounds \n  {nums : List Int} {limit : Nat} (h :\
  \ nums ≠ []) : \n  1 ≤ (longestSubarray nums limit) ∧ (longestSubarray nums limit)\
  \ ≤ nums.length := sorry\n\n/-- There exists a valid subarray of length equal to\
  \ the result -/"
"vc-theorems": "theorem longestSubarray_exists_valid_window\n  {nums : List Int} {limit\
  \ : Nat} (h : nums ≠ []) :\n  ∃ i, i + (longestSubarray nums limit) ≤ nums.length\
  \ ∧ \n    let window := nums.take (i + (longestSubarray nums limit)) |>.drop i\n\
  \    (window.maximum? |>.getD 0) - (window.minimum? |>.getD 0) ≤ limit := sorry\n\
  \n/-- No larger valid window exists -/\n\ntheorem longestSubarray_optimal\n  {nums\
  \ : List Int} {limit : Nat} (h : nums ≠ []) :\n  ∀ i len, i + len ≤ nums.length\
  \ → len > (longestSubarray nums limit) →\n    let window := nums.take (i + len)\
  \ |>.drop i\n    (window.maximum? |>.getD 0) - (window.minimum? |>.getD 0) > limit\
  \ := sorry\n\n/-- For zero limit, result equals longest sequence of equal numbers\
  \ -/\n\ntheorem longestSubarray_zero_limit\n  {nums : List Int} (h : nums ≠ [])\
  \ :\n  longestSubarray nums 0 = maxEqualSeq nums := sorry\n\n/--\ninfo: 2\n-/\n\
  #guard_msgs in\n#eval longestSubarray [8, 2, 4, 7] 4\n\n/--\ninfo: 4\n-/\n#guard_msgs\
  \ in\n#eval longestSubarray [10, 1, 2, 4, 7, 2] 5\n\n/--\ninfo: 3\n-/\n#guard_msgs\
  \ in\n#eval longestSubarray [4, 2, 2, 2, 4, 4, 2, 2] 0\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
