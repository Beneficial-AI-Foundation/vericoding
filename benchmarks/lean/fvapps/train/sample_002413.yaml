"vc-description": "In a list of songs, the i-th song has a duration of time[i] seconds. \n\
  Return the number of pairs of songs for which their total duration in seconds is\
  \ divisible by 60.  Formally, we want the number of indices i, j such that i < j\
  \ with (time[i] + time[j]) % 60 == 0.\n \nExample 1:\nInput: [30,20,150,100,40]\n\
  Output: 3\nExplanation: Three pairs have a total duration divisible by 60:\n(time[0]\
  \ = 30, time[2] = 150): total duration 180\n(time[1] = 20, time[3] = 100): total\
  \ duration 120\n(time[1] = 20, time[4] = 40): total duration 60\n\n\nExample 2:\n\
  Input: [60,60,60]\nOutput: 3\nExplanation: All three pairs have a total duration\
  \ of 120, which is divisible by 60.\n\n\n \nNote:\n\n1 <= time.length <= 60000\n\
  1 <= time[i] <= 500"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def num_pairs_divisible_by_60 (times: List Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem num_pairs_non_negative (times: List Nat) : \n  num_pairs_divisible_by_60\
  \ times ≥ 0 :=\nsorry\n\n\ntheorem num_pairs_max_bound (times: List Nat) :\n  num_pairs_divisible_by_60\
  \ times ≤ (times.length * (times.length - 1)) / 2 :=\nsorry\n\n\ntheorem mod_60_preserves_result\
  \ (times: List Nat) :\n  num_pairs_divisible_by_60 times = \n  num_pairs_divisible_by_60\
  \ (times.map (λ x => x % 60)) :=\nsorry\n\n\ntheorem all_60s_triangular_nums (n:\
  \ Nat) :\n  let times := List.replicate n 60\n  num_pairs_divisible_by_60 times\
  \ = (n * (n-1)) / 2 :=\nsorry\n\n\ntheorem complementary_pairs (n: Nat) :\n  let\
  \ times := List.replicate n 20 ++ List.replicate n 40 \n  num_pairs_divisible_by_60\
  \ times = n * n :=\nsorry\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval num_pairs_divisible_by_60\
  \ [30, 20, 150, 100, 40]\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval num_pairs_divisible_by_60\
  \ [60, 60, 60]\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval num_pairs_divisible_by_60\
  \ [20, 40]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
