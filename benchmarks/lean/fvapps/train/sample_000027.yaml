"vc-description": "There are $n$ positive integers $a_1, a_2, \\dots, a_n$. For the\
  \ one move you can choose any even value $c$ and divide by two all elements that\
  \ equal $c$.\n\nFor example, if $a=[6,8,12,6,3,12]$ and you choose $c=6$, and $a$\
  \ is transformed into $a=[3,8,12,3,3,12]$ after the move.\n\nYou need to find the\
  \ minimal number of moves for transforming $a$ to an array of only odd integers\
  \ (each element shouldn't be divisible by $2$).\n\n\n-----Input-----\n\nThe first\
  \ line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) — the number\
  \ of test cases in the input. Then $t$ test cases follow.\n\nThe first line of a\
  \ test case contains $n$ ($1 \\le n \\le 2\\cdot10^5$) — the number of integers\
  \ in the sequence $a$. The second line contains positive integers $a_1, a_2, \\\
  dots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nThe sum of $n$ for all test cases in the\
  \ input doesn't exceed $2\\cdot10^5$.\n\n\n-----Output-----\n\nFor $t$ test cases\
  \ print the answers in the order of test cases in the input. The answer for the\
  \ test case is the minimal number of moves needed to make all numbers in the test\
  \ case odd (i.e. not divisible by $2$).\n\n\n-----Example-----\nInput\n4\n6\n40\
  \ 6 40 3 20 1\n1\n1024\n4\n2 4 8 16\n3\n3 1 7\n\nOutput\n4\n10\n4\n0\n\n\n\n-----Note-----\n\
  \nIn the first test case of the example, the optimal sequence of moves can be as\
  \ follows:\n\n  before making moves $a=[40, 6, 40, 3, 20, 1]$;  choose $c=6$;  now\
  \ $a=[40, 3, 40, 3, 20, 1]$;  choose $c=40$;  now $a=[20, 3, 20, 3, 20, 1]$;  choose\
  \ $c=20$;  now $a=[10, 3, 10, 3, 10, 1]$;  choose $c=10$;  now $a=[5, 3, 5, 3, 5,\
  \ 1]$ — all numbers are odd. \n\nThus, all numbers became odd after $4$ moves. In\
  \ $3$ or fewer moves, you cannot make them all odd."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def min_moves_to_odd (arrays : List (List Nat)) : List Nat := sorry\n\
  \ndef countTrailingZeros (n : Nat) : Nat := sorry\n"
"vc-theorems": "theorem result_same_length_as_input (arrays : List (List Nat)) :\n\
  \  List.length (min_moves_to_odd arrays) = List.length arrays :=\n  sorry\n\n\n\
  theorem result_is_non_negative (arrays : List (List Nat)) :\n  ∀ x ∈ min_moves_to_odd\
  \ arrays, x ≥ 0 :=\n  sorry\n\n/--\ninfo: [4]\n-/\n#guard_msgs in\n#eval min_moves_to_odd\
  \ [[40, 6, 40, 3, 20, 1]]\n\n/--\ninfo: [10]\n-/\n#guard_msgs in\n#eval min_moves_to_odd\
  \ [[1024]]\n\n/--\ninfo: [4]\n-/\n#guard_msgs in\n#eval min_moves_to_odd [[2, 4,\
  \ 8, 16]]\n\n/--\ninfo: [0]\n-/\n#guard_msgs in\n#eval min_moves_to_odd [[3, 1,\
  \ 7]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
