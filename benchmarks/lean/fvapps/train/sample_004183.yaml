"vc-description": "Karan's company makes software that provides different features\
  \ based on the version of operating system of the user.\n\nFor finding which version\
  \ is more recent, Karan uses the following method:\n\nWhile this function worked\
  \ for OS versions 10.6, 10.7, 10.8 and 10.9, the Operating system company just released\
  \ OS version 10.10.\n\nKaran's function fails for the new version:\n\n```python\n\
  compare_versions (\"10.9\", \"10.10\");       # returns True, while it should return\
  \ False\n```\n\nKaran now wants to spend some time to right a more robust version\
  \ comparison function that works for any future version/sub-version updates.\n\n\
  Help Karan write this function. Here are a few sample cases:\n\n```python\ncompare_versions(\"\
  11\", \"10\");                    # returns True\ncompare_versions(\"11\", \"11\"\
  );                    # returns True\ncompare_versions(\"10.4.6\", \"10.4\");  \
  \            # returns True\ncompare_versions(\"10.4\", \"11\");               \
  \   # returns False\ncompare_versions(\"10.4\", \"10.10\");               # returns\
  \ False\ncompare_versions(\"10.4.9\", \"10.5\");              # returns False\n\
  ```\n```haskell  \ncompareVersions \"11\" \"10\"       `shouldBe` GT\ncompareVersions\
  \ \"10.4.6\" \"10.4\" `shouldBe` GT\ncompareVersions \"10.10\" \"10.9\"  `shouldBe`\
  \ GT\ncompareVersions xs xs           `shouldBe` EQ -- xs is an arbitrary version\n\
  compareVersions \"10\" \"11\"         `shouldBe` LT\ncompareVersions \"10.4\" \"\
  10.4.6\"   `shouldBe` LT\ncompareVersions \"10.99\" \"10.100\"  `shouldBe` LT\n\
  ```\n\nIt can be assumed that version strings are non empty and only contain numeric\
  \ literals and the character `'.'`."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def compareVersions (v1 : String) (v2 : String) : Bool :=\n  sorry\n\
  \nvariable (v v1 v2 v3 : String)\n\n-- Self equality"
"vc-theorems": "theorem compare_versions_self_equality :\n  compareVersions v v =\
  \ true := by\n  sorry\n\n-- Transitivity \n\ntheorem compare_versions_transitive\
  \ : \n  compareVersions v1 v2 = true → compareVersions v2 v3 = true → compareVersions\
  \ v1 v3 = true := by\n  sorry\n\n-- Padding zeros\n\ntheorem compare_versions_padding\
  \ :\n  compareVersions v (v ++ \".0\") = true ∧ compareVersions (v ++ \".0\") v\
  \ = true := by\n  sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval compare_versions\
  \ \"11\" \"10\"\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval compare_versions \"\
  10.4.6\" \"10.4\"\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval compare_versions\
  \ \"10.4\" \"10.10\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
