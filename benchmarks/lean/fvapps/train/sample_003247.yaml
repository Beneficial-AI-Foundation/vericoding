"vc-description": "In this kata you will create a function that takes in a list and\
  \ returns a list with the reverse order.\n\n### Examples\n\n```python\nreverse_list([1,2,3,4])\
  \ == [4,3,2,1]\nreverse_list([3,1,5,4]) == [4,5,1,3]\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def reverse_list (xs : List α) : List α := sorry\n\ntheorem reverse_list_length\
  \ {α : Type} (xs : List α) : \n  List.length (reverse_list xs) = List.length xs\
  \ := sorry\n"
"vc-theorems": "theorem reverse_list_twice {α : Type} (xs : List α) : \n  reverse_list\
  \ (reverse_list xs) = xs := sorry\n\n\ntheorem reverse_list_preserves_membership\
  \ {α : Type} (xs : List α) (a : α) :\n  a ∈ xs ↔ a ∈ reverse_list xs := sorry\n\n\
  \ntheorem reverse_list_empty {α : Type} :\n  reverse_list ([] : List α) = [] :=\
  \ sorry\n\n/--\ninfo: [4, 3, 2, 1]\n-/\n#guard_msgs in\n#eval reverse_list [1, 2,\
  \ 3, 4]\n\n/--\ninfo: [4, 5, 1, 3]\n-/\n#guard_msgs in\n#eval reverse_list [3, 1,\
  \ 5, 4]\n\n/--\ninfo: [1]\n-/\n#guard_msgs in\n#eval reverse_list [1]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
