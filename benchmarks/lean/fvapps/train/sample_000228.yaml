"vc-description": "In LOL world, there is a hero called Teemo and his attacking can\
  \ make his enemy Ashe be in poisoned condition. Now, given the Teemo's attacking\
  \ ascending time series towards Ashe and the poisoning time duration per Teemo's\
  \ attacking, you need to output the total time that Ashe is in poisoned condition.\n\
  \n\nYou may assume that Teemo attacks at the very beginning of a specific time point,\
  \ and makes Ashe be in poisoned condition immediately.\n\nExample 1:\n\nInput: [1,4],\
  \ 2\nOutput: 4\nExplanation: At time point 1, Teemo starts attacking Ashe and makes\
  \ Ashe be poisoned immediately. This poisoned status will last 2 seconds until the\
  \ end of time point 2. And at time point 4, Teemo attacks Ashe again, and causes\
  \ Ashe to be in poisoned status for another 2 seconds. So you finally need to output\
  \ 4.\n\n\n\n\nExample 2:\n\nInput: [1,2], 2\nOutput: 3\nExplanation: At time point\
  \ 1, Teemo starts attacking Ashe and makes Ashe be poisoned. This poisoned status\
  \ will last 2 seconds until the end of time point 2. However, at the beginning of\
  \ time point 2, Teemo attacks Ashe again who is already in poisoned status. Since\
  \ the poisoned status won't add up together, though the second poisoning attack\
  \ will still work at time point 2, it will stop at the end of time point 3. So you\
  \ finally need to output 3.\n\n\n\n\nNote:\n\nYou may assume the length of given\
  \ time series array won't exceed 10000.\nYou may assume the numbers in the Teemo's\
  \ attacking time series and his poisoning time duration per attacking are non-negative\
  \ integers, which won't exceed 10,000,000."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_poisoned_duration (time_series : List Int) (duration :\
  \ Int) : Int := sorry\n\ntheorem poisoned_duration_properties\n  (time_series :\
  \ List Int) \n  (duration : Int)\n  (h1 : duration > 0) :\n  let result := find_poisoned_duration\
  \ time_series duration\n  -- Result is non-negative\n  (result ≥ 0) ∧ \n  -- Empty\
  \ list returns 0\n  (time_series = [] → result = 0) ∧\n  -- Result bounded by total\
  \ duration span plus duration\n  (time_series ≠ [] → \n    result ≤ (List.getD time_series\
  \ (time_series.length - 1) 0 - \n              List.getD time_series 0 0) + duration)\
  \ ∧\n  -- Consecutive times within duration bound the result\n  (∀ i, i < time_series.length\
  \ - 1 →\n    List.getD time_series (i+1) 0 - List.getD time_series i 0 < duration\
  \ →\n    List.getD time_series (i+1) 0 - List.getD time_series i 0 ≤ result) :=\
  \ sorry\n"
"vc-theorems": "theorem duration_monotonicity\n  (time_series : List Int) :\n  find_poisoned_duration\
  \ time_series 1 ≤ find_poisoned_duration time_series 2 := sorry\n\n/--\ninfo: 4\n\
  -/\n#guard_msgs in\n#eval find_poisoned_duration [1, 4] 2\n\n/--\ninfo: 3\n-/\n\
  #guard_msgs in\n#eval find_poisoned_duration [1, 2] 2\n\n/--\ninfo: 0\n-/\n#guard_msgs\
  \ in\n#eval find_poisoned_duration [] 5\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
