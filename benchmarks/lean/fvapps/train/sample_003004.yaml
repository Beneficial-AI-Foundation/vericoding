"vc-description": "Debug the functions\nShould be easy, begin by looking at the code.\
  \ Debug the code and the functions should work.\nThere are three functions: ```Multiplication\
  \ (x)``` ```Addition (+)``` and ```Reverse (!esreveR)```\n\ni {\n  font-size:16px;\n\
  }\n\n#heading {\n  padding: 2em;\n  text-align: center;\n  background-color: #0033FF;\n\
  \  width: 100%;\n  height: 5em;\n}"
"vc-preamble": "import Imports.AllImports\n\ndef multi (l : List Int) : Int := sorry\n\
  def add (l : List Int) : Int := sorry"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def reverse (s : String) : String := sorry\n\ntheorem multi_neutral\
  \ (l : List Int) (h : l.length ≥ 1) :\n  multi (l ++ [1]) = multi l := sorry\n"
"vc-theorems": "theorem multi_order_indep (l : List Int) (h : l.length ≥ 1) :\n  multi\
  \ l = multi l.reverse := sorry\n\n\ntheorem add_neutral (l : List Int) :\n  add\
  \ (l ++ [0]) = add l := sorry\n\n\ntheorem add_order_indep (l : List Int) :\n  add\
  \ l = add l.reverse := sorry\n\n\ntheorem add_recursive (l : List Int) (h : l ≠\
  \ []) :\n  add l = add (l.take (l.length - 1)) + l.getLast h := sorry\n\n\ntheorem\
  \ reverse_involution (s : String) :\n  reverse (reverse s) = s := sorry\n\n\ntheorem\
  \ reverse_preserves_length (s : String) :\n  (reverse s).length = s.length := sorry\n\
  \n\ntheorem reverse_first_last_char (s : String) (h₁ : s.length > 0) :\n  let n\
  \ := s.length\n  let rs := reverse s\n  rs.front = s.back ∧ rs.back = s.front :=\
  \ sorry\n\n/--\ninfo: 80\n-/\n#guard_msgs in\n#eval multi [8, 2, 5]\n\n/--\ninfo:\
  \ 6\n-/\n#guard_msgs in\n#eval add [1, 2, 3]\n\n/--\ninfo: 'olleh'\n-/\n#guard_msgs\
  \ in\n#eval reverse \"hello\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
