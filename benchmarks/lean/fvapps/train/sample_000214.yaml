"vc-description": "A string S of lowercase letters is given.  Then, we may make any\
  \ number of moves.\nIn each move, we choose one of the first K letters (starting\
  \ from the left), remove it, and place it at the end of the string.\nReturn the\
  \ lexicographically smallest string we could have after any number of moves.\n \n\
  \nExample 1:\nInput: S = \"cba\", K = 1\nOutput: \"acb\"\nExplanation: \nIn the\
  \ first move, we move the 1st character (\"c\") to the end, obtaining the string\
  \ \"bac\".\nIn the second move, we move the 1st character (\"b\") to the end, obtaining\
  \ the final result \"acb\".\n\n\nExample 2:\nInput: S = \"baaca\", K = 3\nOutput:\
  \ \"aaabc\"\nExplanation: \nIn the first move, we move the 1st character (\"b\"\
  ) to the end, obtaining the string \"aacab\".\nIn the second move, we move the 3rd\
  \ character (\"c\") to the end, obtaining the final result \"aaabc\".\n\n \nNote:\n\
  \n1 <= K <= S.length <= 1000\nS consists of lowercase letters only."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def orderlyQueue (s : String) (k : Nat) : String := sorry\n\nprivate\
  \ def stringToSortedString (s : String) : String :=\n  String.mk (s.data.reverse.reverse)\
  \ -- placeholder since we can't sort without importing\n"
"vc-theorems": "theorem orderlyQueue_k_gt_one_sorted {s : String} {k : Nat} (h1 :\
  \ s.length > 0) (h2 : k > 1) :\n  orderlyQueue s k = stringToSortedString s := sorry\
  \ \n\n\ntheorem orderlyQueue_k_one_length {s : String} (h : s.length > 0) : \n \
  \ (orderlyQueue s 1).length = s.length := sorry\n\n\ntheorem orderlyQueue_k_one_chars\
  \ {s : String} (h : s.length > 0) :\n  stringToSortedString (orderlyQueue s 1) =\
  \ stringToSortedString s := sorry\n\n\ntheorem orderlyQueue_rotation {s : String}\
  \ {k : Nat} (h1 : s.length > 0) (h2 : k > 0) :\n  stringToSortedString (orderlyQueue\
  \ s k) = stringToSortedString s := sorry\n\n\ntheorem orderlyQueue_k_one_rotation\
  \ {s : String} (h : s.length > 0) :\n  ∃ i, i < s.length ∧ orderlyQueue s 1 = String.mk\
  \ ((s.data.drop i) ++ (s.data.take i)) := sorry\n\n\ntheorem orderlyQueue_k_one_minimal\
  \ {s : String} (h : s.length > 0) :\n  ∀ i, i < s.length → \n    orderlyQueue s\
  \ 1 ≤ String.mk ((s.data.drop i) ++ (s.data.take i)) := sorry\n\n/--\ninfo: 'acb'\n\
  -/\n#guard_msgs in\n#eval orderlyQueue \"cba\" 1\n\n/--\ninfo: 'aaabc'\n-/\n#guard_msgs\
  \ in\n#eval orderlyQueue \"baaca\" 3\n\n/--\ninfo: 'abcd'\n-/\n#guard_msgs in\n\
  #eval orderlyQueue \"abcd\" 2\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
