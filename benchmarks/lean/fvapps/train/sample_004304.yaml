"vc-description": "# Task\n You are given an array of integers `a` and a non-negative\
  \ number of operations `k`, applied to the array. Each operation consists of two\
  \ parts:\n```\nfind the maximum element value of the array;\nreplace each element\
  \ a[i] with (maximum element value - a[i]).```\nHow will the array look like after\
  \ `k` such operations?\n\n# Example\n\n For `a = [-4, 0, -1, 0]` and `k = 2`, the\
  \ output should be `[0, 4, 3, 4]`.\n ```\n initial array: [-4, 0, -1, 0]\n 1st operation:\
  \ \n find the maximum value --> 0\n replace each element:  --> [(0 - -4), (0 - 0),\
  \ (0 - -1), (0 - 0)]\n                        --> [4, 0, 1, 0]\n 2nd operation:\
  \ \n find the maximum value --> 4\n replace each element:  --> [(4 - 4), (4 - 0),\
  \ (4 - 1), (4 - 0)]\n                        --> [0, 4, 3, 4]\n \n ```\n For `a\
  \ = [0, -1, 0, 0, -1, -1, -1, -1, 1, -1]` and `k = 1`, \n \n the output should be\
  \ `[1, 2, 1, 1, 2, 2, 2, 2, 0, 2]`.\n ```\n initial array: [0, -1, 0, 0, -1, -1,\
  \ -1, -1, 1, -1]\n 1st operation: \n find the maximum value --> 1\n replace each\
  \ element:  -->\n [(1-0),(1- -1),(1-0),(1-0),(1- -1),(1- -1),(1- -1),(1- -1),(1-1),(1-\
  \ -1)]\n--> [1, 2, 1, 1, 2, 2, 2, 2, 0, 2]\n ```\n\n# Input/Output\n\n\n - `[input]`\
  \ integer array a\n\n    The initial array.\n\n    Constraints: \n\n    `1 <= a.length\
  \ <= 100`\n    \n    `-100 <= a[i] <= 100`\n\n\n - `[input]` integer `k`\n\n   \
  \ non-negative number of operations.\n\n    Constraints: `0 <= k <= 100000`\n\n\n\
  \ - [output] an integer array\n\n    The array after `k` operations."
"vc-preamble": "import Imports.AllImports\n\ndef List.maximum' (l : List Int) (h :\
  \ l ≠ []) : Int :=\n  match l with\n  | [] => by contradiction\n  | x :: xs => xs.foldl\
  \ max x\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def array_operations (arr : List Int) (k : Nat) : List Int := sorry\n\
  \ntheorem array_operations_length_preserved (arr : List Int) (k : Nat) (h : arr\
  \ ≠ []) :\n  (array_operations arr k).length = arr.length := sorry\n\n\n"
"vc-theorems": "theorem array_operations_zero_identity (arr : List Int) (h : arr ≠\
  \ []) :\n  array_operations arr 0 = arr := sorry\n\n\n\n\n\n\ntheorem array_operations_input_preservation\
  \ (arr : List Int) (k : Nat) :\n  let original := arr\n  array_operations arr k\
  \ = array_operations original k := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
