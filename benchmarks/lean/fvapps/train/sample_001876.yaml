"vc-description": "We stack glasses in a pyramid, where the first row has 1 glass,\
  \ the second row has 2 glasses, and so on until the 100th row.  Each glass holds\
  \ one cup (250ml) of champagne.\n\nThen, some champagne is poured in the first glass\
  \ at the top.  When the top most glass is full, any excess liquid poured will fall\
  \ equally to the glass immediately to the left and right of it.  When those glasses\
  \ become full, any excess champagne will fall equally to the left and right of those\
  \ glasses, and so on.  (A glass at the bottom row has it's excess champagne fall\
  \ on the floor.)\n\nFor example, after one cup of champagne is poured, the top most\
  \ glass is full.  After two cups of champagne are poured, the two glasses on the\
  \ second row are half full.  After three cups of champagne are poured, those two\
  \ cups become full - there are 3 full glasses total now.  After four cups of champagne\
  \ are poured, the third row has the middle glass half full, and the two outside\
  \ glasses are a quarter full, as pictured below.\n\n\n\nNow after pouring some non-negative\
  \ integer cups of champagne, return how full the j-th glass in the i-th row is (both\
  \ i and j are 0 indexed.)\n\n \n\n\nExample 1:\nInput: poured = 1, query_glass =\
  \ 1, query_row = 1\nOutput: 0.0\nExplanation: We poured 1 cup of champange to the\
  \ top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid\
  \ so all the glasses under the top glass will remain empty.\n\nExample 2:\nInput:\
  \ poured = 2, query_glass = 1, query_row = 1\nOutput: 0.5\nExplanation: We poured\
  \ 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)).\
  \ There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed\
  \ as (1, 1) will share the excess liquid equally, and each will get half cup of\
  \ champange.\n\n\n \n\nNote:\n\n\n       poured will be in the range of [0, 10 ^\
  \ 9].\n       query_glass and query_row will be in the range of [0, 99]."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def champagne_tower (poured : Float) (query_row glass : Nat) :\
  \ Float := sorry\n\ntheorem champagne_tower_bounds\n  (poured : Float) (query_row\
  \ glass : Nat)\n  (h1 : poured ≥ 0) :\n  let result := champagne_tower poured query_row\
  \ glass\n  0 ≤ result ∧ result ≤ 1 := sorry\n"
"vc-theorems": "theorem champagne_tower_glass_position\n  (poured : Float) (query_row\
  \ glass : Nat)\n  (h1 : poured ≥ 0)\n  (h2 : glass > query_row) :\n  champagne_tower\
  \ poured query_row glass = 0 := sorry\n\n\ntheorem champagne_tower_zero_poured\n\
  \  (query_row glass : Nat) :\n  champagne_tower 0 query_row glass = 0 := sorry\n\
  \n\ntheorem champagne_tower_first_glass\n  (poured : Float)\n  (h1 : poured ≥ 0)\
  \ :\n  champagne_tower poured 0 0 = min 1 poured := sorry\n\n\ntheorem champagne_tower_symmetry\n\
  \  (poured : Float) (row glass : Nat)\n  (h1 : poured ≥ 1)\n  (h2 : row ≥ 0)\n \
  \ (h3 : glass ≤ row) :\n  champagne_tower poured row glass = champagne_tower poured\
  \ row (row - glass) := sorry\n\n\ntheorem champagne_tower_filled_glasses_bound_1\n\
  \  (h1 : poured = 1) :\n  (∀ row glass, row < 20 → glass ≤ row →\n    (champagne_tower\
  \ poured row glass > 0 → True)) ∧\n  (∃ n, n ≤ 1 ∧ ∀ row glass, row < 20 → glass\
  \ ≤ row →\n    (champagne_tower poured row glass > 0 → n > 0)) := sorry\n\ntheorem\
  \ champagne_tower_filled_glasses_bound_2\n  (h1 : poured = 2) :\n  (∀ row glass,\
  \ row < 20 → glass ≤ row →\n    (champagne_tower poured row glass > 0 → True)) ∧\n\
  \  (∃ n, n ≤ 3 ∧ ∀ row glass, row < 20 → glass ≤ row →\n    (champagne_tower poured\
  \ row glass > 0 → n > 0)) := sorry\n\n\ntheorem champagne_tower_filled_glasses_bound_4\n\
  \  (h1 : poured = 4) :\n  (∀ row glass, row < 20 → glass ≤ row →\n    (champagne_tower\
  \ poured row glass > 0 → True)) ∧\n  (∃ n, n ≤ 6 ∧ ∀ row glass, row < 20 → glass\
  \ ≤ row →\n    (champagne_tower poured row glass > 0 → n > 0)) := sorry\n\ntheorem\
  \ champagne_tower_filled_glasses_bound_8\n  (h1 : poured = 8) :\n  (∀ row glass,\
  \ row < 20 → glass ≤ row →\n    (champagne_tower poured row glass > 0 → True)) ∧\n\
  \  (∃ n, n ≤ 10 ∧ ∀ row glass, row < 20 → glass ≤ row →\n    (champagne_tower poured\
  \ row glass > 0 → n > 0)) := sorry\n\n/--\ninfo: 0.0\n-/\n#guard_msgs in\n#eval\
  \ champagne_tower 1 1 1\n\n/--\ninfo: 0.5\n-/\n#guard_msgs in\n#eval champagne_tower\
  \ 2 1 1\n\n/--\ninfo: 1.0\n-/\n#guard_msgs in\n#eval champagne_tower 100000009 33\
  \ 17\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
