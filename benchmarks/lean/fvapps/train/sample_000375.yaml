"vc-description": "Given two positive integers n and k.\nA factor of an integer n\
  \ is defined as an integer i where n % i == 0.\nConsider a list of all factors of\
  \ n sorted in ascending order, return the kth factor in this list or return -1 if\
  \ n has less than k factors.\n \nExample 1:\nInput: n = 12, k = 3\nOutput: 3\nExplanation:\
  \ Factors list is [1, 2, 3, 4, 6, 12], the 3rd factor is 3.\n\nExample 2:\nInput:\
  \ n = 7, k = 2\nOutput: 7\nExplanation: Factors list is [1, 7], the 2nd factor is\
  \ 7.\n\nExample 3:\nInput: n = 4, k = 4\nOutput: -1\nExplanation: Factors list is\
  \ [1, 2, 4], there is only 3 factors. We should return -1.\n\nExample 4:\nInput:\
  \ n = 1, k = 1\nOutput: 1\nExplanation: Factors list is [1], the 1st factor is 1.\n\
  \nExample 5:\nInput: n = 1000, k = 3\nOutput: 4\nExplanation: Factors list is [1,\
  \ 2, 4, 5, 8, 10, 20, 25, 40, 50, 100, 125, 200, 250, 500, 1000].\n\n \nConstraints:\n\
  \n1 <= k <= n <= 1000"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def kthFactor (n : Nat) (k : Nat) : Int :=\n  sorry\n"
"vc-theorems": "theorem first_factor_always_one (n : Nat) (h : n > 0) :\n  kthFactor\
  \ n 1 = 1 := sorry\n\n\ntheorem k_greater_than_total_factors_negative_one (n k :\
  \ Nat) (h₁ : n > 0) (h₂ : k > 0) :\n  let numFactors := (List.range n).filter (fun\
  \ i => n % (i+1) = 0) |>.length\n  k > numFactors → kthFactor n k = -1 := sorry\n\
  \n\ntheorem valid_factor_divides_evenly (n k : Nat) (h₁ : n > 0) (h₂ : k > 0) :\n\
  \  kthFactor n k ≠ -1 → n % (kthFactor n k).toNat = 0 := sorry\n\n\ntheorem factors_are_ordered\
  \ (n k : Nat) (h₁ : n > 0) (h₂ : k > 0) :\n  kthFactor n k ≠ -1 →\n  ((List.range\
  \ (kthFactor n k).toNat).filter (fun i => n % (i+1) = 0)).length = k - 1 := sorry\n\
  \n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval kth_factor 12 3\n\n/--\ninfo: 7\n-/\n\
  #guard_msgs in\n#eval kth_factor 7 2\n\n/--\ninfo: -1\n-/\n#guard_msgs in\n#eval\
  \ kth_factor 4 4\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
