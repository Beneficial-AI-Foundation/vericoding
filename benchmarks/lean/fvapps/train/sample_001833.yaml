"vc-description": "A company is planning to interview 2n people. Given the array costs\
  \ where costs[i] = [aCosti, bCosti], the cost of flying the ith person to city a\
  \ is aCosti, and the cost of flying the ith person to city b is bCosti.\nReturn\
  \ the minimum cost to fly every person to a city such that exactly n people arrive\
  \ in each city.\n \nExample 1:\nInput: costs = [[10,20],[30,200],[400,50],[30,20]]\n\
  Output: 110\nExplanation: \nThe first person goes to city A for a cost of 10.\n\
  The second person goes to city A for a cost of 30.\nThe third person goes to city\
  \ B for a cost of 50.\nThe fourth person goes to city B for a cost of 20.\n\nThe\
  \ total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing\
  \ in each city.\n\nExample 2:\nInput: costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]\n\
  Output: 1859\n\nExample 3:\nInput: costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]\n\
  Output: 3086\n\n \nConstraints:\n\n2n == costs.length\n2 <= costs.length <= 100\n\
  costs.length is even.\n1 <= aCosti, bCosti <= 1000"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def min_cost_two_cities (costs: List (List Nat)) : Nat := sorry\n\
  \ndef sum_all_costs (costs: List (List Nat)) : Nat :=\n  costs.foldl (fun acc row\
  \ => acc + row.foldl (· + ·) 0) 0\n"
"vc-theorems": "theorem min_cost_two_cities_is_nonnegative \n  (costs: List (List\
  \ Nat))\n  (h1: costs.length % 2 = 0)\n  (h2: ∀ cost ∈ costs, cost.length = 2) :\n\
  \  min_cost_two_cities costs ≥ 0 := sorry\n  \n\ntheorem min_cost_two_cities_upper_bound\n\
  \  (costs: List (List Nat)) \n  (h1: costs.length % 2 = 0)\n  (h2: ∀ cost ∈ costs,\
  \ cost.length = 2) :\n  min_cost_two_cities costs ≤ sum_all_costs costs := sorry\n\
  \n\ntheorem min_cost_two_cities_swap_invariant\n  (costs: List (List Nat))\n  (h1:\
  \ costs.length % 2 = 0) \n  (h2: ∀ cost ∈ costs, cost.length = 2) :\n  min_cost_two_cities\
  \ costs = \n  min_cost_two_cities (costs.map (fun cost => [cost.get! 1, cost.get!\
  \ 0])) := sorry\n\n/--\ninfo: 110\n-/\n#guard_msgs in\n#eval min_cost_two_cities\
  \ [[10, 20], [30, 200], [400, 50], [30, 20]]\n\n/--\ninfo: 1859\n-/\n#guard_msgs\
  \ in\n#eval min_cost_two_cities [[259, 770], [448, 54], [926, 667], [184, 139],\
  \ [840, 118], [577, 469]]\n\n/--\ninfo: 3086\n-/\n#guard_msgs in\n#eval min_cost_two_cities\
  \ [[515, 563], [451, 713], [537, 709], [343, 819], [855, 779], [457, 60], [650,\
  \ 359], [631, 42]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
