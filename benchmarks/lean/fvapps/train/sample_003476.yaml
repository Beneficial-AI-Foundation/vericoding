"vc-description": "## Problem\n\nThere are `n` apples that need to be divided into\
  \ four piles. We need two mysterious number `x` and `y`. Let The number of first\
  \ pile equals to `x+y`, the number of second pile equals to `x-y`, the number of\
  \ third pile equals to `x*y`, the number of fourth pile equals to `x/y`. We need\
  \ to calculate how many apples are there in each pile.\n\nOf course, there won't\
  \ be so many unknowns. We know the total number of apples(`n`) and the second mysterious\
  \ number(`y`). \n\nFor example: there are 48 apples need to divided into four piles.\
  \ y=3. that is, 1st pile should be x+3, 2nd pile should be x-3, 3rd pile should\
  \ be x*3, 4th pile should be x/3.\nDo you know how much `x` is? `x` should be 9,\
  \ because:\n```\n(9 + 3) + (9 - 3) + (9 * 3) + (9 / 3) = 12 + 6 + 27 + 3 = 48\n\
  ```\nSo, 48 apples should be divided into `12, 6, 27, 3`.\n\n## Task\n\nComplete\
  \ function `fourPiles()`/`four_piles()` that accepts two arguments `n` and `y`,\
  \ return an array contains the number of for piles. Each element in the result array\
  \ should be a positive integer. If can not divide, please return `[]`.\n\n## Examples\n\
  \n```\nfourPiles 48 3 -- [12,6,27,3]  \n//The elements are arranged in sequence\
  \ according to:\n//   x+y,x-y,x*y,x/y\n\nfourPiles 100 4 -- [20,12,64,4]  \n-- Verify\
  \ correctness:\n-- x=16,y=4\n(16+4) + (16-4) + (16*4) + (16/4) -- 100\n\n-- Edge\
  \ case:\nfourPiles 25 4  -- []  -- [8,0,16,1] is not a correct answer\n\nfourPiles\
  \ 24 4  -- []  -- can not divide\n```"
"vc-preamble": "import Imports.AllImports\n\ndef four_piles (n : Nat) (y : Nat) :\
  \ Option (List Nat) := sorry\n\ndef sum_list : List Nat → Nat \n  | [] => 0\n  |\
  \ (h :: t) => h + sum_list t\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def nth : List Nat → Nat → Option Nat \n  | [], _ => none\n  |\
  \ (h :: t), 0 => some h\n  | (h :: t), n+1 => nth t n\n"
"vc-theorems": "theorem four_piles_properties_solution (n y : Nat) (h1 : n > 0) (h2\
  \ : y > 0) (h3 : y ≤ 100) : \n  match four_piles n y with\n  | some result => \n\
  \    -- Result has length 4\n    result.length = 4 ∧ \n    -- Elements follow x+y,\
  \ x-y, x*y, x/y pattern for some x\n    ∃ x : Nat, \n      (nth result 0 = some\
  \ (x + y)) ∧\n      (nth result 1 = some (x - y)) ∧\n      (nth result 2 = some\
  \ (x * y)) ∧\n      (nth result 3 = some (x / y)) ∧\n    -- Elements are positive\n\
  \    (∀ i ∈ result, i > 0) ∧\n    -- Sum equals input n  \n    sum_list result =\
  \ n\n  | none =>\n    -- If no solution, divmod has remainder\n    let prod := n\
  \ * y\n    let denom := (y + 1) * (y + 1)\n    prod % denom ≠ 0 ∨ (prod / denom\
  \ = y)\n  := sorry\n\n\ntheorem four_piles_properties_positive (n y : Nat) (h1 :\
  \ n > 0) (h2 : y > 0) :\n  match four_piles n y with\n  | some result => ∀ x ∈ result,\
  \ x > 0\n  | none => True\n  := sorry\n\n\ntheorem four_piles_properties_sum (n\
  \ y : Nat) (h1 : n > 0) (h2 : y > 0) :\n  match four_piles n y with\n  | some result\
  \ => sum_list result = n  \n  | none => True\n  := sorry\n\n/--\ninfo: [12, 6, 27,\
  \ 3]\n-/\n#guard_msgs in\n#eval four_piles 48 3\n\n/--\ninfo: [20, 12, 64, 4]\n\
  -/\n#guard_msgs in\n#eval four_piles 100 4\n\n/--\ninfo: []\n-/\n#guard_msgs in\n\
  #eval four_piles 25 4\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
