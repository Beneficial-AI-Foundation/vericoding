"vc-description": "Suppose you have a long flowerbed in which some of the plots are\
  \ planted and some are not. However, flowers cannot be planted in adjacent plots\
  \ - they would compete for water and both would die.\n\nGiven a flowerbed (represented\
  \ as an array containing 0 and 1, where 0 means empty and 1 means not empty), and\
  \ a number n, return if n new flowers can be planted in it without violating the\
  \ no-adjacent-flowers rule.\n\nExample 1:\n\nInput: flowerbed = [1,0,0,0,1], n =\
  \ 1\nOutput: True\n\n\n\nExample 2:\n\nInput: flowerbed = [1,0,0,0,1], n = 2\nOutput:\
  \ False\n\n\n\nNote:\n\nThe input array won't violate no-adjacent-flowers rule.\n\
  The input array size is in the range of [1, 20000].\nn is a non-negative integer\
  \ which won't exceed the input array size."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def can_place_flowers (flowerbed : List Nat) (n : Nat) : Bool :=\
  \ sorry\n\ntheorem flowerbed_returns_bool (flowerbed : List Nat) :\n  (∀ x ∈ flowerbed,\
  \ x = 0 ∨ x = 1) →\n  ∃ b : Bool, can_place_flowers flowerbed 0 = b\n  := sorry\n"
"vc-theorems": "theorem maximum_flowers_boundary (flowerbed : List Nat) :\n  (∀ x\
  \ ∈ flowerbed, x = 0 ∨ x = 1) →\n  let total_ones := (flowerbed.filter (· = 1)).length\n\
  \  let n := flowerbed.length + 1 - total_ones\n  can_place_flowers flowerbed n =\
  \ false\n  := sorry\n\n\ntheorem all_zeros_array (flowerbed : List Nat) :\n  (∀\
  \ x ∈ flowerbed, x = 0) →\n  flowerbed.length > 0 →\n  let max_flowers := (flowerbed.length\
  \ + 1) / 2\n  can_place_flowers flowerbed max_flowers = true\n  := sorry\n\n/--\n\
  info: True\n-/\n#guard_msgs in\n#eval can_place_flowers [1, 0, 0, 0, 1] 1\n\n/--\n\
  info: False\n-/\n#guard_msgs in\n#eval can_place_flowers [1, 0, 0, 0, 1] 2\n\n/--\n\
  info: True\n-/\n#guard_msgs in\n#eval can_place_flowers [0, 0, 1, 0, 0] 1\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
