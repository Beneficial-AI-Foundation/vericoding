"vc-description": "There are several cards arranged in a row, and each card has an\
  \ associated number of points The points are given in the integer array cardPoints.\n\
  In one step, you can take one card from the beginning or from the end of the row.\
  \ You have to take exactly k cards.\nYour score is the sum of the points of the\
  \ cards you have taken.\nGiven the integer array cardPoints and the integer k, return\
  \ the maximum score you can obtain.\n \nExample 1:\nInput: cardPoints = [1,2,3,4,5,6,1],\
  \ k = 3\nOutput: 12\nExplanation: After the first step, your score will always be\
  \ 1. However, choosing the rightmost card first will maximize your total score.\
  \ The optimal strategy is to take the three cards on the right, giving a final score\
  \ of 1 + 6 + 5 = 12.\n\nExample 2:\nInput: cardPoints = [2,2,2], k = 2\nOutput:\
  \ 4\nExplanation: Regardless of which two cards you take, your score will always\
  \ be 4.\n\nExample 3:\nInput: cardPoints = [9,7,7,9,7,7,9], k = 7\nOutput: 55\n\
  Explanation: You have to take all the cards. Your score is the sum of points of\
  \ all cards.\n\nExample 4:\nInput: cardPoints = [1,1000,1], k = 1\nOutput: 1\nExplanation:\
  \ You cannot take the card in the middle. Your best score is 1. \n\nExample 5:\n\
  Input: cardPoints = [1,79,80,1,1,1,200,1], k = 3\nOutput: 202\n\n \nConstraints:\n\
  \n1 <= cardPoints.length <= 10^5\n1 <= cardPoints[i] <= 10^4\n1 <= k <= cardPoints.length"
"vc-preamble": "import Imports.AllImports\n\ndef abs (n : Int) : Int :=\n  sorry\n\
  \n\ndef sum (l : List Int) : Int := \n  sorry\n\n\ndef take (n : Nat) (l : List\
  \ Int) : List Int :=\n  sorry\n\n\ndef drop (n : Nat) (l : List Int) : List Int\
  \ :=\n  sorry\n\n\ndef map (f : Int → Int) (l : List Int) : List Int :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def maxScore (cards : List Int) (k : Nat) : Int :=\n  sorry\n\n\
  \n\n\n"
"vc-theorems": "theorem maxScore_invalid_inputs_empty \n  (k : Nat) :\n  maxScore\
  \ [] k = 0 := -- should fail\n  sorry\n\n/--\ninfo: 12\n-/\n#guard_msgs in\n#eval\
  \ maxScore [1, 2, 3, 4, 5, 6, 1] 3\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval maxScore\
  \ [2, 2, 2] 2\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval maxScore [1, 1000, 1] 1\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
