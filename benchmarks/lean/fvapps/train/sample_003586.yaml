"vc-description": "A checksum is an algorithm that scans a packet of data and returns\
  \ a single number. The idea is that if the packet is changed, the checksum will\
  \ also change, so checksums are often used for detecting\ntransmission errors, validating\
  \ document contents, and in many other situations where it is necessary to detect\
  \ undesirable changes in data.\n\nFor this problem, you will implement a checksum\
  \ algorithm called Quicksum. A Quicksum packet allows only uppercase letters and\
  \ spaces. It always begins and ends with an uppercase letter. \n\nOtherwise, spaces\
  \ and uppercase letters can occur in any combination, including consecutive spaces.\n\
  \nA Quicksum is the sum of the products of each character’s position in the packet\
  \ times the character’s value. A space has a value of zero, while letters have a\
  \ value equal to their position in the alphabet. \n\nSo, ```A = 1```, ```B = 2```,\
  \ etc., through ```Z = 26```. Here are example Quicksum calculations for the packets\
  \ “ACM” and “A C M”:\n \n  ACM\n1 × 1 + 2 × 3 + 3 × 13 = 46 \n\nA C M\n1 x 1 + 3\
  \ x 3 + 5 * 13 = 75\n\n\nWhen the packet doesn't have only uppercase letters and\
  \ spaces or just spaces the result to quicksum have to be zero (0).\n \n  AbqTH\
  \ #5 = 0"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def quicksum (s : String) : Nat :=\n  sorry\n\n\n"
"vc-theorems": "theorem quicksum_invalid_packets (s : String)\n  (h : ∃ c ∈ s.data,\
  \ c ≠ ' ' ∧ ¬(65 ≤ c.toNat ∧ c.toNat ≤ 90)) :\n  quicksum s = 0 :=\n  sorry\n\n\
  /--\ninfo: 46\n-/\n#guard_msgs in\n#eval quicksum \"ACM\"\n\n/--\ninfo: 75\n-/\n\
  #guard_msgs in\n#eval quicksum \"A C M\"\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval\
  \ quicksum \"As \"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
