"vc-description": "Chef is a really nice and respectful person, in sharp contrast\
  \ to his little brother, who is a very nasty and disrespectful person. Chef always\
  \ sends messages to his friends in all small letters, whereas the little brother\
  \ sends messages in all capital letters.\nYou just received a message given by a\
  \ string s. You don't know whether this message is sent by Chef or his brother.\
  \ Also, the communication channel through which you received the message is erroneous\
  \ and hence can flip a letter from uppercase to lowercase or vice versa. However,\
  \ you know that this channel can make at most K such flips.\nDetermine whether the\
  \ message could have been sent only by Chef, only by the little brother, by both\
  \ or by none.\n\n-----Input-----\n\n- The first line of the input contains a single\
  \ integer T denoting the number of test cases. The description of T test cases follows.\n\
  - The first line of each test case contains two space-separated integers N and K\
  \ denoting the length of the string s and the maximum number of flips that the erroneous\
  \ channel can make.\n- The second line contains a single string s denoting the message\
  \ you received.\n\n-----Output-----\nFor each test case, output a single line containing\
  \ one string — \"chef\", \"brother\", \"both\" or \"none\".\n\n-----Constraints-----\n\
  - 1 ≤ T ≤ 1000\n- 1 ≤ N ≤ 100\n- 0 ≤ K ≤ N\n- s consists only of (lowercase and\
  \ uppercase) English letters\n\n-----Example-----\nInput\n\n4\n5 1\nfrauD\n5 1\n\
  FRAUD\n4 4\nLife\n10 4\nsTRAWBerry\n\nOutput\n\nchef\nbrother\nboth\nnone\n\n-----Explanation-----\n\
  Example case 1: Only one flip is possible. So it is possible that Chef sent \"fraud\"\
  \ and the channel flipped the last character to get \"frauD\". However, it is not\
  \ possible for the brother to have sent \"FRAUD\", because then it would need 4\
  \ flips. Hence the answer is \"chef\".\nExample case 2: Only one flip is possible.\
  \ So it is possible that the brother sent \"FRAUD\" and the channel didn't flip\
  \ anything. However, it is not possible for Chef to have sent \"fraud\", because\
  \ then it would need 5 flips. Hence the answer is \"brother\".\nExample case 3:\
  \ Four flips are allowed. It is possible that Chef sent \"life\" and the channel\
  \ flipped the first character to get \"Life\". It is also possible that the brother\
  \ sent \"LIFE\" and the channel flipped the last three characters to get \"Life\"\
  . Hence the answer is \"both\".\nExample case 4: Four flips are allowed. It is not\
  \ possible that Chef sent \"strawberry\", because it would need five flips to get\
  \ \"sTRAWBerry\". It is also not possible that the brother sent \"STRAWBERRY\",\
  \ because that would also need five flips. Hence the answer is \"none\"."
"vc-preamble": "import Imports.AllImports\n\ndef isUpper (c : Char) : Bool := sorry\n\
  def isLower (c : Char) : Bool := sorry\n\n\ndef countUpper (s : String) : Nat :=\
  \ sorry\ndef countLower (s : String) : Nat := sorry\n\ninductive MessageType where\n\
  \  | chef\n  | brother  \n  | both\n  | none\n  deriving Repr\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def classify_message (N : Nat) (K : Nat) (s : String) : MessageType\
  \ := sorry\n\ntheorem classify_message_properties {N K : Nat} {s : String} :\n \
  \ let upper := countUpper s\n  let lower := countLower s\n  match classify_message\
  \ N K s with\n  | MessageType.chef => lower > K ∧ upper ≤ K \n  | MessageType.brother\
  \ => upper > K ∧ lower ≤ K\n  | MessageType.both => upper ≤ K ∧ lower ≤ K\n  | MessageType.none\
  \ => upper > K ∧ lower > K\n  := sorry\n"
"vc-theorems": "theorem all_upper {N : Nat} (h : N > 0) :\n  classify_message N (N-1)\
  \ (String.mk (List.replicate N 'A')) = MessageType.brother := sorry\n\n\ntheorem\
  \ all_lower {N : Nat} (h : N > 0) :\n  classify_message N (N-1) (String.mk (List.replicate\
  \ N 'a')) = MessageType.chef := sorry\n\n\ntheorem empty_k_large {N : Nat} (h :\
  \ N > 1) {s : String} :\n  classify_message N 0 s = MessageType.none := sorry\n\n\
  \ntheorem empty_k_small {N : Nat} (h : N = 1) {s : String} :\n  classify_message\
  \ N 0 s ≠ MessageType.none := sorry\n\n/--\ninfo: 'chef'\n-/\n#guard_msgs in\n#eval\
  \ classify_message 5 1 \"frauD\"\n\n/--\ninfo: 'brother'\n-/\n#guard_msgs in\n#eval\
  \ classify_message 5 1 \"FRAUD\"\n\n/--\ninfo: 'both'\n-/\n#guard_msgs in\n#eval\
  \ classify_message 4 4 \"Life\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
