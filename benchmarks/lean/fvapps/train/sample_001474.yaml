"vc-description": "During Quarantine Time Chef is at home and he was quite confused\
  \ about what to cook so, he went to his son and asked about what would he prefer\
  \ to have? He replied, cakes.\nNow, chef cook $N$ number of cake and number of layers\
  \ for every cake is different. After cakes are baked, Chef arranged them in a particular\
  \ order and then generates a number by putting number of layers of cakes as digit\
  \ in sequence (e.g., if chef arranges cakes with layers in sequence $2$, $3$ and\
  \ $5$ then generated number is $235$).\nChef has to make his son powerful in mathematics,\
  \ so he called his son and ask him to arrange the cakes in all the possible ways\
  \ and every time when different sequence is generated he has to note down the number.\
  \ At the end he has to find sum of all the generated numbers. So, help him to complete\
  \ this task.\n\n-----Input:-----\n- First line will contain $T$, number of testcases.\
  \ Then the testcases follow. \n- The first line of each test case contains a single\
  \ integer $N$ denoting number of cakes.\n- The second line contains $N$ space-separated\
  \ integers $L1$ $L2$ … $LN$ layers of the cake.\n\n-----Output:-----\nFor each test\
  \ case, print a single line containing sum of all the possible numbers which is\
  \ generated by arranging cake in different sequence.\n\n-----Constraints :-----\n\
  - $1 \\leq T  \\leq 2*10^5$\n- $1 \\leq N, L1, L2, L3,…, LN \\leq 9$\n\n-----Sample\
  \ Input:-----\n1\n3\n2 3 5\n\n-----Sample Output:-----\n2220\n\n-----Explanation:-----\n\
  Sum of all possibilities :\n$235 + 532 + 253 + 352 + 523 + 325 = 2220 $"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calc_layer_sum (n : Nat) (layers : List Nat) : Nat :=\n  sorry\n\
  \n\n"
"vc-theorems": "theorem calc_layer_sum_single_digit_pos (n : Nat) (h : n > 0) :\n\
  \  calc_layer_sum n (List.replicate n 1) > 0 :=\n  sorry\n\n\ntheorem calc_layer_sum_zero_is_zero\
  \ : \n  calc_layer_sum 1 [0] = 0 :=\n  sorry\n\n\ntheorem calc_layer_sum_one_is_one\
  \ :\n  calc_layer_sum 1 [1] = 1 :=\n  sorry\n\n\ntheorem calc_layer_sum_same_digits\
  \ (d : Nat) :\n  calc_layer_sum 2 [d, d] = calc_layer_sum 2 [d, d] :=\n  sorry\n\
  \n\ntheorem calc_layer_sum_order_indep :\n  calc_layer_sum 2 [1, 2] = calc_layer_sum\
  \ 2 [2, 1] :=\n  sorry\n\n/--\ninfo: 2220\n-/\n#guard_msgs in\n#eval calc_layer_sum\
  \ 3 [2, 3, 5]\n\n/--\ninfo: 33\n-/\n#guard_msgs in\n#eval calc_layer_sum 2 [1, 2]\n\
  \n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval calc_layer_sum 1 [5]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
