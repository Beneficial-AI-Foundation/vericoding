"vc-description": "Let's define the following recurrence: $$a_{n+1} = a_{n} + minDigit(a_{n})\
  \ \\cdot maxDigit(a_{n}).$$\n\nHere $minDigit(x)$ and $maxDigit(x)$ are the minimal\
  \ and maximal digits in the decimal representation of $x$ without leading zeroes.\
  \ For examples refer to notes.\n\nYour task is calculate $a_{K}$ for given $a_{1}$\
  \ and $K$.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\\
  le t \\le 1000$) — the number of independent test cases.\n\nEach test case consists\
  \ of a single line containing two integers $a_{1}$ and $K$ ($1 \\le a_{1} \\le 10^{18}$,\
  \ $1 \\le K \\le 10^{16}$) separated by a space.\n\n\n-----Output-----\n\nFor each\
  \ test case print one integer $a_{K}$ on a separate line.\n\n\n-----Example-----\n\
  Input\n8\n1 4\n487 1\n487 2\n487 3\n487 4\n487 5\n487 6\n487 7\n\nOutput\n42\n487\n\
  519\n528\n544\n564\n588\n628\n\n\n\n-----Note-----\n\n$a_{1} = 487$ \n\n $a_{2}\
  \ = a_{1} + minDigit(a_{1}) \\cdot maxDigit(a_{1}) = 487 + \\min (4, 8, 7) \\cdot\
  \ \\max (4, 8, 7) = 487 + 4 \\cdot 8 = 519$ \n\n $a_{3} = a_{2} + minDigit(a_{2})\
  \ \\cdot maxDigit(a_{2}) = 519 + \\min (5, 1, 9) \\cdot \\max (5, 1, 9) = 519 +\
  \ 1 \\cdot 9 = 528$ \n\n $a_{4} = a_{3} + minDigit(a_{3}) \\cdot maxDigit(a_{3})\
  \ = 528 + \\min (5, 2, 8) \\cdot \\max (5, 2, 8) = 528 + 2 \\cdot 8 = 544$ \n\n\
  \ $a_{5} = a_{4} + minDigit(a_{4}) \\cdot maxDigit(a_{4}) = 544 + \\min (5, 4, 4)\
  \ \\cdot \\max (5, 4, 4) = 544 + 4 \\cdot 5 = 564$ \n\n $a_{6} = a_{5} + minDigit(a_{5})\
  \ \\cdot maxDigit(a_{5}) = 564 + \\min (5, 6, 4) \\cdot \\max (5, 6, 4) = 564 +\
  \ 4 \\cdot 6 = 588$ \n\n $a_{7} = a_{6} + minDigit(a_{6}) \\cdot maxDigit(a_{6})\
  \ = 588 + \\min (5, 8, 8) \\cdot \\max (5, 8, 8) = 588 + 5 \\cdot 8 = 628$"
"vc-preamble": "import Imports.AllImports\n\ndef calc_seq (a k : Nat) : Nat :=\n \
  \ sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def hasZeroDigit (n : Nat) : Bool :=\n  sorry"
"vc-theorems": "theorem calc_seq_basic_properties {a k : Nat} (ha : a > 0) (hk : k\
  \ > 0) :\n  let result := calc_seq a k\n  -- Result is always non-negative\n  result\
  \ ≥ 0 ∧ \n  -- k=1 returns original number\n  calc_seq a 1 = a ∧\n  -- k>1 implies\
  \ result >= input\n  (k > 1 → result ≥ a) :=\n  sorry\n\n\n/--\ninfo: 42\n-/\n#guard_msgs\
  \ in\n#eval calc_seq 1 4\n\n/--\ninfo: 487\n-/\n#guard_msgs in\n#eval calc_seq 487\
  \ 1\n\n/--\ninfo: 628\n-/\n#guard_msgs in\n#eval calc_seq 487 7\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
