"vc-description": "From Wikipedia : \"The n-back task is a continuous performance\
  \ task that is commonly used as an assessment in cognitive neuroscience to measure\
  \ a part of working memory and working memory capacity. [...] The subject is presented\
  \ with a sequence of stimuli, and the task consists of indicating when the current\
  \ stimulus matches the one from n steps earlier in the sequence. The load factor\
  \ n can be adjusted to make the task more or less difficult.\"\n\nIn this kata,\
  \ your task is to \"teach\" your computer to do the n-back task. Specifically, you\
  \ will be implementing a function that counts the number of \"targets\" (stimuli\
  \ that match the one from n steps earlier) in a sequence of digits. Your function\
  \ will take two parameters :\n\nn, a positive integer equal to the number of steps\
  \ to look back to find a match\nsequence, a sequence of digits containing 0 or more\
  \ targets\n\nA few hints :\n\nThe first digit in a sequence can never be a target\n\
  Targets can be \"chained\" together (e.g., for n = 1 and sequence = [1, 1, 1], there\
  \ are 2 targets)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_targets (n : Nat) (lst : List Int) : Nat := sorry\n\n\
  theorem count_targets_non_negative (n : Nat) (lst : List Int) : \n  count_targets\
  \ n lst ≥ 0 := sorry \n"
"vc-theorems": "theorem count_targets_upper_bound (n : Nat) (lst : List Int) :\n \
  \ count_targets n lst ≤ max 0 (lst.length - n) := sorry\n\n\ntheorem count_targets_empty_list\
  \ (n : Nat) :\n  count_targets n [] = 0 := sorry\n\n\ntheorem count_targets_n_geq_length\
  \ (n : Nat) (lst : List Int) :\n  n ≥ lst.length → count_targets n lst = 0 := sorry\
  \ \n\n\ntheorem count_targets_shift_zero (lst : List Int) :\n  count_targets 0 lst\
  \ = lst.length := sorry\n\n\ntheorem count_targets_shift_one (lst : List Int) :\n\
  \  lst ≠ [] →\n  count_targets 1 lst = \n    ((lst.zip (lst.drop 1)).filter (fun\
  \ p => p.1 = p.2)).length := sorry\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval count_targets\
  \ 1 [1, 1, 1, 1, 1]\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval count_targets 2 [1,\
  \ 2, 1, 2, 1]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval count_targets 1 []\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
