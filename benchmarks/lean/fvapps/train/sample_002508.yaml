"vc-description": "=====Function Descriptions=====\nzip([iterable, ...])\n\nThis function\
  \ returns a list of tuples. The ith tuple contains the ith element from each of\
  \ the argument sequences or iterables. If the argument sequences are of unequal\
  \ lengths, then the returned list is truncated to the length of the shortest argument\
  \ sequence.\n\nSample Code\n>>> print zip([1,2,3,4,5,6],'Hacker')\n[(1, 'H'), (2,\
  \ 'a'), (3, 'c'), (4, 'k'), (5, 'e'), (6, 'r')]\n>>> \n>>> print zip([1,2,3,4,5,6],[0,9,8,7,6,5,4,3,2,1])\n\
  [(1, 0), (2, 9), (3, 8), (4, 7), (5, 6), (6, 5)]\n>>> \n>>> A = [1,2,3]\n>>> B =\
  \ [6,5,4]\n>>> C = [7,8,9]\n>>> X = [A] + [B] + [C]\n>>> \n>>> print zip(*X)\n[(1,\
  \ 6, 7), (2, 5, 8), (3, 4, 9)]\n\n=====Problem Statement=====\nThe National University\
  \ conducts an examination of N students in X subjects.\nYour task is to compute\
  \ the average scores of each student.\n\nAverage score = Sum of scores obtained\
  \ in all subjects by a student / Total number of subjects\n\nThe format for the\
  \ general mark sheet is:\nStudent ID -> ___1_____2_____3_____4_____5__         \
  \      \nSubject 1   |  89    90    78    93    80\nSubject 2   |  90    91    85\
  \    88    86  \nSubject 3   |  91    92    83    89    90.5\n            |______________________________\n\
  Average        90    91    82    90    85.5\n\n=====Input Format=====\nThe first\
  \ line contains N and X separated by a space. The next X lines contains the space\
  \ separated marks obtained by students in a particular subject.\n\n=====Constraints=====\n\
  0<N≤100\n0<X≤100\n\n=====Output Format=====\nPrint the averages of all students\
  \ on separate lines. The averages must be correct up to 1 decimal place."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calculate_student_averages (n_students : Nat) (n_subjects :\
  \ Nat) (subject_marks : List String) : List Float := sorry\n\n/- Main property theorems\
  \ -/"
"vc-theorems": "theorem calculate_student_averages_length\n  (n_students : Nat) (n_subjects\
  \ : Nat) (subject_marks : List String)\n  (h1 : n_students > 0) (h2 : n_subjects\
  \ > 0) :\n  List.length (calculate_student_averages n_students n_subjects subject_marks)\
  \ = n_students := sorry\n\n\ntheorem calculate_student_averages_bounds \n  (n_students\
  \ : Nat) (n_subjects : Nat) (subject_marks : List String)\n  (h1 : n_students >\
  \ 0) (h2 : n_subjects > 0) :\n  ∀ x ∈ calculate_student_averages n_students n_subjects\
  \ subject_marks, 0 ≤ x ∧ x ≤ 100 := sorry\n\n/- Special case theorems -/\n\ntheorem\
  \ calculate_student_averages_zeros\n  (n_students : Nat) (n_subjects : Nat)\n  (h1\
  \ : n_students > 0) (h2 : n_subjects > 0)\n  (subject_marks : List String)\n  (h3\
  \ : subject_marks.length = n_subjects)\n  (h4 : ∀ mark ∈ subject_marks, mark = String.intercalate\
  \ \" \" (List.replicate n_students \"0\")) :\n  ∀ x ∈ calculate_student_averages\
  \ n_students n_subjects subject_marks, x = 0 := sorry\n\n\ntheorem calculate_student_averages_hundreds\n\
  \  (n_students : Nat) (n_subjects : Nat)\n  (h1 : n_students > 0) (h2 : n_subjects\
  \ > 0)\n  (subject_marks : List String)\n  (h3 : subject_marks.length = n_subjects)\n\
  \  (h4 : ∀ mark ∈ subject_marks, mark = String.intercalate \" \" (List.replicate\
  \ n_students \"100\")) :\n  ∀ x ∈ calculate_student_averages n_students n_subjects\
  \ subject_marks, x = 100 := sorry\n\n/- Consistency theorem for constant marks -/\n\
  \ntheorem calculate_student_averages_consistency\n  (n_students : Nat) (n_subjects\
  \ : Nat) (marks : List Float)\n  (h1 : n_students > 0) (h2 : n_subjects > 0) (h3\
  \ : marks.length > 0)\n  (h4 : ∀ m ∈ marks, 0 ≤ m ∧ m ≤ 100)\n  (subject_marks :\
  \ List String) :\n  ∀ i < n_students, ∃ result ∈ calculate_student_averages n_students\
  \ n_subjects subject_marks, \n    Float.abs (result - marks[i % marks.length]'(Nat.mod_lt\
  \ _ h3)) ≤ 1e-9 := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
