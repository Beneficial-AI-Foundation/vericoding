"vc-description": "# How many urinals are free?\nIn men's public toilets with urinals,\
  \ there is this unwritten rule that you leave at least one urinal free\nbetween\
  \ you and the next person peeing. \nFor example if there are 3 urinals and one person\
  \ is already peeing in the left one, you will choose the\nurinal on the right and\
  \ not the one in the middle.\nThat means that a maximum of 3 people can pee at the\
  \ same time on public toilets with \n5 urinals when following this rule (Only 2\
  \ if the first person pees into urinal 2 or 4).\n\n![Imgur Urinals](https://i.imgur.com/imZE6xm.png)\n\
  \n## Your task:\nYou need to write a function that returns the maximum of free urinals\
  \ as an integer according to the unwritten rule.\n\n### Input\nA String containing\
  \ 1s and 0s (Example: `10001`) (1 <= Length <= 20)  \nA one stands for a taken urinal\
  \ and a zero for a free one. \n\n### Examples\n\n`10001` returns 1 (10101)  \n`1001`\
  \ returns 0 (1001)  \n`00000` returns 3 (10101)  \n`0000` returns 2 (1001)  \n`01000`\
  \ returns 1 (01010 or 01001) \n\n### Note\nWhen there is already a mistake in the\
  \ input string (for example `011`), then return `-1`\n\nHave fun and don't pee into\
  \ the wrong urinal ;)"
"vc-preamble": "import Imports.AllImports\n\ndef get_free_urinals (s : String) : Int\
  \ := sorry\n\ndef hasConsecutiveOnes (chars : List Char) : Bool :=\n  match chars\
  \ with\n  | '1' :: '1' :: _ => true\n  | _ :: rest => hasConsecutiveOnes rest\n\
  \  | [] => false\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def containsAdjacentOnes (s : String) : Bool :=\n  hasConsecutiveOnes\
  \ s.data\n"
"vc-theorems": "theorem invalid_adjacent_urinals :\n  ∀ s: String, containsAdjacentOnes\
  \ s → get_free_urinals s = -1 := sorry\n\n\ntheorem result_nonnegative_if_valid\
  \ :\n  ∀ s: String, ¬containsAdjacentOnes s → get_free_urinals s ≥ 0 := sorry\n\n\
  \ntheorem result_bounded_by_half_length :\n  ∀ s: String, ¬containsAdjacentOnes\
  \ s → \n    get_free_urinals s ≤ (s.length + 1) / 2 := sorry\n\n\ntheorem alternating_pattern_valid\
  \ :\n  ∀ gaps: List Nat,\n  let s := String.join (List.intersperse \"0\" (List.replicate\
  \ gaps.length \"1\"))\n  ¬containsAdjacentOnes s →\n  get_free_urinals s ≥ 0 :=\
  \ sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval get_free_urinals \"10001\"\n\n\
  /--\ninfo: 3\n-/\n#guard_msgs in\n#eval get_free_urinals \"00000\"\n\n/--\ninfo:\
  \ -1\n-/\n#guard_msgs in\n#eval get_free_urinals \"110\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
