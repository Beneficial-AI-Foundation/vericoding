"vc-description": "You need to write a function that reverses the words in a given\
  \ string. A word can also fit an empty string. If this is not clear enough, here\
  \ are some examples:\n\nAs the input may have trailing spaces, you will also need\
  \ to ignore unneccesary whitespace.\n\n```python\nreverse('Hello World') == 'World\
  \ Hello'\nreverse('Hi There.') == 'There. Hi'\n```\n\nHappy coding!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def reverse (s : String) : String := sorry\n\ndef split (s : String)\
  \ : List String := sorry\n"
"vc-theorems": "theorem reverse_preserves_wordcount {s : String} \n  (h : s ≠ \"\"\
  ) \n  (h2 : ∀ w ∈ split s, w ≠ \"\" ∧ w.all (fun c => !c.isWhitespace)) :\n  (split\
  \ (reverse s)).length = (split s).length := sorry\n\n\ntheorem reverse_preserves_words\
  \ {s : String}\n  (h : s ≠ \"\") \n  (h2 : ∀ w ∈ split s, w ≠ \"\" ∧ w.all (fun\
  \ c => !c.isWhitespace)) :\n  (split (reverse s)) = (split s) := sorry\n\n\ntheorem\
  \ reverse_no_leading_whitespace (s : String) :\n  ¬(reverse s).startsWith \" \"\
  \ := sorry\n\n\ntheorem reverse_no_trailing_whitespace (s : String) :\n  ¬(reverse\
  \ s).endsWith \" \" := sorry\n\n\ntheorem reverse_empty_stays_empty (s : String)\
  \ :\n  s.trim = \"\" → reverse s = \"\" := sorry\n\n/--\ninfo: 'this at expert an\
  \ am I'\n-/\n#guard_msgs in\n#eval reverse \"I am an expert at this\"\n\n/--\ninfo:\
  \ 'easy so is This'\n-/\n#guard_msgs in\n#eval reverse \"This is so easy\"\n\n/--\n\
  info: 'cares one no'\n-/\n#guard_msgs in\n#eval reverse \"no one cares\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
