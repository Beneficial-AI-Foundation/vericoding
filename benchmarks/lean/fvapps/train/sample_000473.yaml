"vc-description": "Given n non-negative integers a1, a2, ..., an, where each represents\
  \ a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints\
  \ of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis\
  \ forms a container, such that the container contains the most water.\n\nNote: You\
  \ may not slant the container and n is at least 2."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def maxArea (heights : List Nat) : Nat := sorry\n\ntheorem maxArea_nonnegative\
  \ (heights : List Nat) :\n  heights.length ≥ 2 → maxArea heights ≥ 0 := sorry\n"
"vc-theorems": "theorem maxArea_upper_bound (heights : List Nat) :\n  heights.length\
  \ ≥ 2 → \n  maxArea heights ≤ (List.maximum? heights).getD 0 * (heights.length -\
  \ 1) := sorry\n\n\ntheorem maxArea_is_maximum (heights : List Nat) (i j : Nat) (hi\
  \ : i < heights.length) (hj : j < heights.length) :\n  heights.length ≥ 2 →\n  i\
  \ < j →\n  maxArea heights ≥ min (heights.get ⟨i, hi⟩) (heights.get ⟨j, hj⟩) * (j\
  \ - i) := sorry\n\n\ntheorem maxArea_symmetric (heights : List Nat) :\n  heights.length\
  \ ≥ 2 →\n  maxArea heights = maxArea heights.reverse := sorry\n\n\ntheorem maxArea_uniform\
  \ (value length : Nat) : \n  length ≥ 2 →\n  maxArea (List.replicate length value)\
  \ = value * (length - 1) := sorry\n\n\ntheorem maxArea_interpolation (heights :\
  \ List Nat) :\n  heights.length ≥ 2 →\n  let interpolated := heights.take 1 ++ List.replicate\
  \ (heights.length - 2) 0 ++ heights.drop (heights.length - 1)\n  maxArea heights\
  \ ≥ maxArea interpolated := sorry\n\n/--\ninfo: 49\n-/\n#guard_msgs in\n#eval max_area\
  \ [1, 8, 6, 2, 5, 4, 8, 3, 7]\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval max_area\
  \ [1, 1]\n\n/--\ninfo: 16\n-/\n#guard_msgs in\n#eval max_area [4, 3, 2, 1, 4]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
