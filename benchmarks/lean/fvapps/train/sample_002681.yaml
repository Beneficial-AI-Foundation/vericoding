"vc-description": "The goal of this exercise is to convert a string to a new string\
  \ where each character in the new string is `\"(\"` if that character appears only\
  \ once in the original string, or `\")\"` if that character appears more than once\
  \ in the original string. Ignore capitalization when determining if a character\
  \ is a duplicate.\n\n## Examples\n```\n\"din\"      =>  \"(((\"\n\"recede\"   =>\
  \  \"()()()\"\n\"Success\"  =>  \")())())\"\n\"(( @\"     =>  \"))((\" \n```\n\n\
  **Notes**\n\nAssertion messages may be unclear about what they display in some languages.\
  \ If you read `\"...It Should encode XXX\"`, the `\"XXX\"` is the expected result,\
  \ not the input!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def duplicate_encode (s : String) : String := sorry\n\ntheorem\
  \ length_preservation (s : String) : \n  String.length (duplicate_encode s) = String.length\
  \ s := sorry\n"
"vc-theorems": "theorem valid_output_chars (s : String) (i : String.Pos) :\n  (duplicate_encode\
  \ s).get i = '(' ∨ \n  (duplicate_encode s).get i = ')' := sorry\n\ntheorem case_insensitive\
  \ (s : String) (i : String.Pos) :\n  let lower := s.toLower\n  let c := lower.get\
  \ i\n  let count := String.toList lower\n    |> List.filter (fun x => x = c)\n \
  \   |> List.length\n  (duplicate_encode s).get i = \n    if count = 1 then '(' else\
  \ ')' := sorry\n\n\ntheorem single_char (s : String) :\n  String.length s = 1 →\n\
  \  duplicate_encode s = \"(\" := sorry\n\ntheorem all_same_chars (s : String) :\n\
  \  String.length s ≥ 2 →\n  (∀ i j : String.Pos, s.get i = s.get j) →\n  duplicate_encode\
  \ s = String.mk (List.replicate (String.length s) ')') := sorry\n\n/--\ninfo: '((('\n\
  -/\n#guard_msgs in\n#eval duplicate_encode \"din\"\n\n/--\ninfo: '()()()'\n-/\n\
  #guard_msgs in\n#eval duplicate_encode \"recede\"\n\n/--\ninfo: ')())())'\n-/\n\
  #guard_msgs in\n#eval duplicate_encode \"Success\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
