"vc-description": "Wherever the destination is, whoever we meet, let's render this\
  \ song together.\n\nOn a Cartesian coordinate plane lies a rectangular stage of\
  \ size w × h, represented by a rectangle with corners (0, 0), (w, 0), (w, h) and\
  \ (0, h). It can be seen that no collisions will happen before one enters the stage.\n\
  \nOn the sides of the stage stand n dancers. The i-th of them falls into one of\
  \ the following groups:   Vertical: stands at (x_{i}, 0), moves in positive y direction\
  \ (upwards);  Horizontal: stands at (0, y_{i}), moves in positive x direction (rightwards).\
  \  [Image] \n\nAccording to choreography, the i-th dancer should stand still for\
  \ the first t_{i} milliseconds, and then start moving in the specified direction\
  \ at 1 unit per millisecond, until another border is reached. It is guaranteed that\
  \ no two dancers have the same group, position and waiting time at the same time.\n\
  \nWhen two dancers collide (i.e. are on the same point at some time when both of\
  \ them are moving), they immediately exchange their moving directions and go on.\
  \ [Image] \n\nDancers stop when a border of the stage is reached. Find out every\
  \ dancer's stopping position.\n\n\n-----Input-----\n\nThe first line of input contains\
  \ three space-separated positive integers n, w and h (1 ≤ n ≤ 100 000, 2 ≤ w, h\
  \ ≤ 100 000) — the number of dancers and the width and height of the stage, respectively.\n\
  \nThe following n lines each describes a dancer: the i-th among them contains three\
  \ space-separated integers g_{i}, p_{i}, and t_{i} (1 ≤ g_{i} ≤ 2, 1 ≤ p_{i} ≤ 99\
  \ 999, 0 ≤ t_{i} ≤ 100 000), describing a dancer's group g_{i} (g_{i} = 1 — vertical,\
  \ g_{i} = 2 — horizontal), position, and waiting time. If g_{i} = 1 then p_{i} =\
  \ x_{i}; otherwise p_{i} = y_{i}. It's guaranteed that 1 ≤ x_{i} ≤ w - 1 and 1 ≤\
  \ y_{i} ≤ h - 1. It is guaranteed that no two dancers have the same group, position\
  \ and waiting time at the same time.\n\n\n-----Output-----\n\nOutput n lines, the\
  \ i-th of which contains two space-separated integers (x_{i}, y_{i}) — the stopping\
  \ position of the i-th dancer in the input.\n\n\n-----Examples-----\nInput\n8 10\
  \ 8\n1 1 10\n1 4 13\n1 7 1\n1 8 2\n2 2 0\n2 5 14\n2 6 0\n2 6 1\n\nOutput\n4 8\n\
  10 5\n8 8\n10 6\n10 2\n1 8\n7 8\n10 6\n\nInput\n3 2 3\n1 1 2\n2 1 1\n1 1 5\n\nOutput\n\
  1 3\n2 1\n1 3\n\n\n\n-----Note-----\n\nThe first example corresponds to the initial\
  \ setup in the legend, and the tracks of dancers are marked with different colours\
  \ in the following figure. [Image] \n\nIn the second example, no dancers collide."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_dance_positions (n w h : Nat) (dancers : List (Nat ×\
  \ Nat × Nat)) : List (Nat × Nat) := sorry\n\ntheorem single_vertical_dancer (w h\
  \ : Nat) :\n  let n := 1\n  let dancers := [(1, 2, 0)]\n  let result := solve_dance_positions\
  \ n w h dancers\n  result.length = 1 ∧ (result.head!).2 = h := sorry\n"
"vc-theorems": "theorem single_horizontal_dancer (w h : Nat) :  \n  let n := 1\n \
  \ let dancers := [(2, 3, 0)]\n  let result := solve_dance_positions n w h dancers\
  \ \n  result.length = 1 ∧ (result.head!).1 = w := sorry\n\n\ntheorem two_dancers\
  \ (w h : Nat) :\n  let n := 2\n  let dancers := [(1, 2, 0), (2, 3, 0)]\n  let result\
  \ := solve_dance_positions n w h dancers\n  result.length = 2 ∧ \n  (result.head!).2\
  \ = h ∧\n  (result.get! 1).1 = w := sorry\n\n\ntheorem single_dancer_edge_cases\
  \ {w h : Nat} (hw : w ≥ 2) (hh : h ≥ 2) :\n  let dancers₁ := [(1, 1, 0)]\n  let\
  \ result₁ := solve_dance_positions 1 w h dancers₁\n  let dancers₂ := [(2, 1, 0)]\n\
  \  let result₂ := solve_dance_positions 1 w h dancers₂\n  result₁ = [(1, h)] ∧ \n\
  \  result₂ = [(w, 1)] := sorry"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded"
