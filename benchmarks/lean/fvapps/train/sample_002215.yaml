"vc-description": "You have an array $a$ of length $n$. For every positive integer\
  \ $x$ you are going to perform the following operation during the $x$-th second:\n\
  \n  Select some distinct indices $i_{1}, i_{2}, \\ldots, i_{k}$ which are between\
  \ $1$ and $n$ inclusive, and add $2^{x-1}$ to each corresponding position of $a$.\
  \ Formally, $a_{i_{j}} := a_{i_{j}} + 2^{x-1}$ for $j = 1, 2, \\ldots, k$. Note\
  \ that you are allowed to not select any indices at all. \n\nYou have to make $a$\
  \ nondecreasing as fast as possible. Find the smallest number $T$ such that you\
  \ can make the array nondecreasing after at most $T$ seconds.\n\nArray $a$ is nondecreasing\
  \ if and only if $a_{1} \\le a_{2} \\le \\ldots \\le a_{n}$.\n\nYou have to answer\
  \ $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line contains a\
  \ single integer $t$ ($1 \\le t \\le 10^{4}$) — the number of test cases.\n\nThe\
  \ first line of each test case contains single integer $n$ ($1 \\le n \\le 10^{5}$) —\
  \ the length of array $a$. It is guaranteed that the sum of values of $n$ over all\
  \ test cases in the input does not exceed $10^{5}$.\n\nThe second line of each test\
  \ case contains $n$ integers $a_{1}, a_{2}, \\ldots, a_{n}$ ($-10^{9} \\le a_{i}\
  \ \\le 10^{9}$).\n\n\n-----Output-----\n\nFor each test case, print the minimum\
  \ number of seconds in which you can make $a$ nondecreasing.\n\n\n-----Example-----\n\
  Input\n3\n4\n1 7 6 5\n5\n1 2 3 4 5\n2\n0 -4\n\nOutput\n2\n0\n3\n\n\n\n-----Note-----\n\
  \nIn the first test case, if you select indices $3, 4$ at the $1$-st second and\
  \ $4$ at the $2$-nd second, then $a$ will become $[1, 7, 7, 8]$. There are some\
  \ other possible ways to make $a$ nondecreasing in $2$ seconds, but you can't do\
  \ it faster.\n\nIn the second test case, $a$ is already nondecreasing, so answer\
  \ is $0$.\n\nIn the third test case, if you do nothing at first $2$ seconds and\
  \ select index $2$ at the $3$-rd second, $a$ will become $[0, 0]$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def min_seconds_to_nondecreasing (n : Nat) (arr : Array Int) :\
  \ Nat := sorry\n\ntheorem already_nondecreasing {n : Nat} {arr : Array Int} \n \
  \ (h1 : n ≥ 2)\n  (h2 : n ≤ 100)\n  (h3 : arr.size = n)\n  (h4 : ∀ i j, i < j →\
  \ j < n → arr[i]! ≤ arr[j]!) \n  : min_seconds_to_nondecreasing n arr = 0 := sorry\n"
"vc-theorems": "theorem result_valid {n : Nat} {arr : Array Int}\n  (h1 : arr.size\
  \ = n)\n  (h2 : n ≥ 2)\n  (h3 : n ≤ 100)\n  (h4 : ∀ x, x ∈ arr.data → -1000 ≤ x\
  \ ∧ x ≤ 1000)\n  : let result := min_seconds_to_nondecreasing n arr\n    result\
  \ ≥ 0 ∧ ∀ i j, i < j → j < n → arr[i]! ≤ arr[j]! := sorry\n\n/--\ninfo: 2\n-/\n\
  #guard_msgs in\n#eval min_seconds_to_nondecreasing 4 #[1, 7, 6, 5]\n\n/--\ninfo:\
  \ 0\n-/\n#guard_msgs in\n#eval min_seconds_to_nondecreasing 5 #[1, 2, 3, 4, 5]\n\
  \n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval min_seconds_to_nondecreasing 2 #[0, -4]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
