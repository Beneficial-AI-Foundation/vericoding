"vc-description": "# Task\n\nWrite a function named `sumEvenNumbers`, taking a sequence\
  \ of numbers as single parameter. Your function must return the sum of **the even\
  \ values** of this sequence.\n\nOnly numbers without decimals like `4` or `4.0`\
  \ can be even. \n\n## Input\n* sequence of numbers: those numbers could be integers\
  \ and/or floats. \n\n\nFor example, considering this input value : `[4,3,1,2,5,10,6,7,9,8]`,\
  \ then your function should return `30` (because `4 + 2 + 10 + 6 + 8 = 30`)."
"vc-preamble": "import Imports.AllImports\n\ndef sumEvenNumbers (l : List Int) : Int\
  \ :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def listSum (l : List Int) : Int :=\n  l.foldl (· + ·) 0\n"
"vc-theorems": "theorem sum_even_numbers_sums_evens (l : List Int) :\n  sumEvenNumbers\
  \ l = listSum (l.filter (fun n => n % 2 = 0)) := by\n  sorry\n\n\ntheorem sum_even_numbers_is_even\
  \ (l : List Int) :\n  sumEvenNumbers l % 2 = 0 := by\n  sorry\n\n\ntheorem sum_even_numbers_idempotent\
  \ (l : List Int) :\n  let result := sumEvenNumbers l\n  result ≠ 0 → sumEvenNumbers\
  \ [result] = result := by\n  sorry\n\n\ntheorem sum_even_numbers_empty :\n  sumEvenNumbers\
  \ [] = 0 := by\n  sorry\n\n/--\ninfo: 30\n-/\n#guard_msgs in\n#eval sum_even_numbers\
  \ [4, 3, 1, 2, 5, 10, 6, 7, 9, 8]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval sum_even_numbers\
  \ []\n\n/--\ninfo: 14\n-/\n#guard_msgs in\n#eval sum_even_numbers [-16, -32, 20,\
  \ 21, 41, 42]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
