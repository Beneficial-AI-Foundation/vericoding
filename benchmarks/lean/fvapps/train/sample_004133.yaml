"vc-description": "You are given a length of string and two thumbtacks. On thumbtack\
  \ goes into the focus point *F₀* with coordinates *x₀* and *y₀*, and the other does\
  \ into point *F₁* with points *x₁* and *y₁*. The string is then tied at the ends\
  \ to the thumbtacks and has length *l* excluding the knots at the ends. If you pull\
  \ the string taught with a pencil and draw around the plane you'll have an ellipse\
  \ with focuses at *F₀* and *F₁*. Given a new point *P*, determine if it falls inside\
  \ of the ellipse.\n\nYou must write a function that takes arguments `f0`, `f1`,\
  \ `l`, and `p` and returns `true` or `false` depending on whether or not `p` falls\
  \ inside the ellipse. \n\nEach of `f0`, `f1`, and `p` has has properties `x` and\
  \ `y` for its coordinates.\n\nYou will never be given the case where the string\
  \ is too short to reach between the points."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def ellipse_contains_point (f0 : Point) (f1 : Point) (l : Float)\
  \ (p : Point) : Bool :=\n  sorry\n"
"vc-theorems": "theorem ellipse_contains_point_bool_result (f0 f1 : Point) (l : Float)\
  \ (p : Point)\n  (h : l > 0) : \n  (ellipse_contains_point f0 f1 l p = true ∨ ellipse_contains_point\
  \ f0 f1 l p = false) :=\nsorry\n\n\ntheorem coincident_foci_contains_focus (f0 :\
  \ Point) (l : Float)\n  (h : l > 0) :\n  ellipse_contains_point f0 f0 l f0 = true\
  \ :=\nsorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval ellipse_contains_point\
  \ {\"x\": 0, \"y\": 0} {\"x\": 0, \"y\": 0} 2 {\"x\": 0, \"y\": 0}\n\n/--\ninfo:\
  \ False\n-/\n#guard_msgs in\n#eval ellipse_contains_point f0 f1 l {\"x\": 1, \"\
  y\": 1}\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval ellipse_contains_point {\"\
  x\": -1, \"y\": 0} {\"x\": 1, \"y\": 0} 4 {\"x\": 0, \"y\": 1}\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
