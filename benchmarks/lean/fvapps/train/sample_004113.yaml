"vc-description": "# Task\n\nGiven a square `matrix`, your task is to reverse the\
  \ order of elements on both of its longest diagonals.\n\nThe longest diagonals of\
  \ a square matrix are defined as follows:\n* the first longest diagonal goes from\
  \ the top left corner to the bottom right one;\n* the second longest diagonal goes\
  \ from the top right corner to the bottom left one.\n\n\n# Example\n\nFor the matrix\n\
  ```\n1, 2, 3\n4, 5, 6\n7, 8, 9\n```\nthe output should be:\n```\n9, 2, 7\n4, 5,\
  \ 6\n3, 8, 1\n```\n\n\n# Input/Output\n\n\n- `[input]` 2D integer array `matrix`\n\
  \n   Constraints: `1 ≤ matrix.length ≤ 10, matrix.length = matrix[i].length, 1 ≤\
  \ matrix[i][j] ≤ 1000`\n\n\n- `[output]` 2D integer array\n\n   Matrix with the\
  \ order of elements on its longest diagonals reversed."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def reverseOnDiagonals (matrix : List (List Int)) : List (List\
  \ Int) := sorry\n\ntheorem matrix_size_preservation (n : Nat) : \n  ∀ (matrix :\
  \ List (List Int)), \n  matrix.length = n → (∀ row ∈ matrix, row.length = n) →\n\
  \  let result := reverseOnDiagonals matrix\n  result.length = n ∧ (∀ row ∈ result,\
  \ row.length = n) := sorry\n"
"vc-theorems": "theorem main_diagonal_reversal {n : Nat} (matrix : List (List Int))\n\
  \  (h1 : matrix.length = n) (h2 : ∀ row ∈ matrix, row.length = n) :\n  let result\
  \ := reverseOnDiagonals matrix\n  ∀ (i : Fin n), \n  (List.get! (List.get! result\
  \ i) i) = \n  (List.get! (List.get! matrix (⟨n-1-i, sorry⟩ : Fin n)) (⟨n-1-i, sorry⟩\
  \ : Fin n)) := sorry\n\n\ntheorem secondary_diagonal_reversal {n : Nat} (matrix\
  \ : List (List Int))\n  (h1 : matrix.length = n) (h2 : ∀ row ∈ matrix, row.length\
  \ = n) :\n  let result := reverseOnDiagonals matrix\n  ∀ (i : Fin n),\n  (List.get!\
  \ (List.get! result i) (⟨n-1-i, sorry⟩ : Fin n)) = \n  (List.get! (List.get! matrix\
  \ (⟨n-1-i, sorry⟩ : Fin n)) i) := sorry\n\n\ntheorem non_diagonal_elements_unchanged\
  \ {n : Nat} (matrix : List (List Int))\n  (h1 : matrix.length = n) (h2 : ∀ row ∈\
  \ matrix, row.length = n) :\n  let result := reverseOnDiagonals matrix\n  ∀ (i j\
  \ : Fin n), i ≠ j → i.val ≠ n-1-j.val →\n  (List.get! (List.get! result i) j) =\
  \ \n  (List.get! (List.get! matrix i) j) := sorry\n\n\ntheorem input_preservation\
  \ :\n  ∀ (matrix : List (List Int)),\n  let result := reverseOnDiagonals matrix\n\
  \  matrix = matrix := sorry\n\n/--\ninfo: expected1\n-/\n#guard_msgs in\n#eval reverse_on_diagonals\
  \ [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n/--\ninfo: expected2\n-/\n#guard_msgs in\n\
  #eval reverse_on_diagonals [[239]]\n\n/--\ninfo: expected3\n-/\n#guard_msgs in\n\
  #eval reverse_on_diagonals [[1, 10], [100, 1000]]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
