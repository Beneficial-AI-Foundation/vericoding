"vc-description": "DNA is a biomolecule that carries genetic information. It is composed\
  \ of four different building blocks, called nucleotides: adenine (A), thymine (T),\
  \ cytosine (C) and guanine (G). Two DNA strands join to form a double helix, whereby\
  \ the nucleotides of one strand bond to the nucleotides of the other strand at the\
  \ corresponding positions. The bonding is only possible if the nucleotides are complementary:\
  \ A always pairs with T, and C always pairs with G.\n\nDue to the asymmetry of the\
  \ DNA, every DNA strand has a direction associated with it. The two strands of the\
  \ double helix run in opposite directions to each other, which we refer to as the\
  \ 'up-down' and the 'down-up' directions.\n\nWrite a function `checkDNA` that takes\
  \ in two DNA sequences as strings, and checks if they are fit to form a fully complementary\
  \ DNA double helix. The function should return a Boolean `true` if they are complementary,\
  \ and `false` if there is a sequence mismatch (Example 1 below).\n\nNote:\n\n- All\
  \ sequences will be of non-zero length, and consisting only of `A`, `T`, `C` and\
  \ `G` characters.\n- All sequences **will be given in the up-down direction**.\n\
  - The two sequences to be compared can be of different length. If this is the case\
  \ and one strand is entirely bonded by the other, and there is no sequence mismatch\
  \ between the two (Example 2 below), your function should still return `true`.\n\
  - If both strands are only partially bonded (Example 3 below), the function should\
  \ return `false`.\n\nExample 1:\n\nExample 2:\n\nExample 3:\n\n---\n#### If you\
  \ enjoyed this kata, check out also my other DNA kata: [**Longest Repeated DNA Motif**](http://www.codewars.com/kata/longest-repeated-dna-motif)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def check_DNA (s1 s2 : String) : Bool := sorry\n\n/-- The function\
  \ check_DNA is symmetric: gives same result regardless of argument order -/"
"vc-theorems": "theorem check_DNA_symmetric (s1 s2 : String) :\n  check_DNA s1 s2\
  \ = check_DNA s2 s1 := sorry\n\n/-- Empty sequence matches any sequence -/\n\ntheorem\
  \ check_DNA_empty (s : String) :\n  check_DNA s \"\" = true âˆ§ check_DNA \"\" s =\
  \ true := sorry\n\n/-- Known complementary sequences match -/\n\ntheorem check_DNA_basic_complement\
  \ :\n  check_DNA \"ATGCTACG\" \"CGTAGCAT\" = true := sorry\n\n/--\ninfo: True\n\
  -/\n#guard_msgs in\n#eval check_DNA \"ATGCTACG\" \"CGTAGCAT\"\n\n/--\ninfo: True\n\
  -/\n#guard_msgs in\n#eval check_DNA \"GCTAGCACCCATTAGGAGATAC\" \"CTCCTAATGGGTG\"\
  \n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval check_DNA \"ATGCTACG\" \"CGTAGCAA\"\
  \n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
