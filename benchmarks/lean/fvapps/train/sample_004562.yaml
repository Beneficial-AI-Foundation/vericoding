"vc-description": "# Introduction\n\n\nMastermind or Master Mind is a code-breaking\
  \ game for two players. The modern game with pegs was invented in 1970 by Mordecai\
  \ Meirowitz, an Israeli postmaster and telecommunications expert. It resembles an\
  \ earlier pencil and paper game called Bulls and Cows that may date back a century\
  \ or more. (Source Wikipedia)\n\n\n\n# Rules\n\n\n1. The Mastermind (computer) will\
  \ select 4 colours. The colours are randomly selected from [\"Red\", \"Blue\", \"\
  Green\", \"Orange\", \"Purple\", \"Yellow\"]. Colours can be duplicated but there\
  \ will always be exactly 4.\n\n2. The Mastermind will return an array back to you.\
  \ For every correctly positioned colour in the array an element of “Black” is returned.\
  \ For every correct colour but in the wrong position an element of “White” will\
  \ be returned.\n\n3. Passing the correct array will pass the Kata test and return\
  \ \"WON!\".\n\n4. Passing an invalid colour will fail the test with the error \"\
  Error: you have given an invalid colour!\"\n\n5. Passing an invalid array length\
  \ will fail the test with the error \"Error: you must pass 4 colours!\"\n\n6. Guessing\
  \ more than 60 times will fail the test with the error \"Error: you have had more\
  \ than 60 tries!\"\n\n7. All colours are capitalised\n\n8. The return array will\
  \ be shuffled!\n\n\n# Task\n\n\nYour task is to create a method called mastermind()\
  \ that will take an object called  game. The object has already been preloaded so\
  \ you do not need to worry about it.\n\nWithin your method you must pass an array\
  \ into the game object method .check(). This will evoke the object to check your\
  \ array to see if it is correct.\n\n\n# Example\n\nIf the Mastermind selected the\
  \ following colours\n\nThen the array you are trying to solve is `[\"Red\", \"Blue\"\
  , \"Green\", \"Yellow\"]`\nSo you guess with \n\n`[\"Red\", \"Orange\", \"Yellow\"\
  , \"Orange\"]`\n\nYour method would look like this.\n```python\ndef mastermind(game):\n\
  \  answer = game.check([\"Red\", \"Orange\", \"Yellow\", \"Orange\"])\n```\nThe\
  \ element `0 => Red` is at the correct index so `Black` is added to the return array.\
  \ Element `2 => Yellow` is in the array but at the wrong index possition so `White`\
  \ is added to the return array.\n\nThe Mastermind would then return `[\"Black\"\
  , \"White\"]` (But not necessarily in that order as the return array is shuffled\
  \ my the Mastermind).\n\nKeep guessing until you pass the correct solution which\
  \ will pass the Kata.\n\n# Check result\nTo check the Masterminds return value\n\
  ```python\n  answer = game.check([\"Red\", \"Orange\", \"Yellow\", \"Orange\"])\n\
  \  print (answer)\n```\n\nGood luck and enjoy!\n\n# Kata Series\nIf you enjoyed\
  \ this, then please try one of my other Katas. Any feedback, translations and grading\
  \ of beta Katas are greatly appreciated. Thank you.\n\n Maze Runner\n Scooby Doo\
  \ Puzzle\n Driving License\n Connect 4\n Vending Machine\n Snakes and Ladders\n\
   Mastermind\n Guess Who?\n Am I safe to drive?\n Mexican Wave\n Pigs in a Pen\n\
   Hungry Hippos\n Plenty of Fish in the Pond\n Fruit Machine\n Car Park Escape"
"vc-preamble": "import Imports.AllImports\n\ndef VALID_COLORS := [\"Red\", \"Blue\"\
  , \"Green\", \"Orange\", \"Purple\", \"Yellow\"]\n\nstructure Game where\n  solution\
  \ : List String := []\n  tries : Nat := 0\n  deriving Repr\n\n\ndef Game.check (g\
  \ : Game) (guess : List String) : List String := sorry\n\ndef matches_result (code\
  \ guess result : List String) : Bool := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def mastermind (g : Game) : Unit := sorry\n\ntheorem mastermind_always_solves\
  \ {solution : List String} \n  (h1 : solution.length = 4)\n  (h2 : ∀ x ∈ solution,\
  \ x ∈ VALID_COLORS) :\n  ∀ g : Game, g.solution = solution → g.tries ≤ 60 := sorry\n"
"vc-theorems": "theorem matches_result_symmetric {code guess : List String} \n  (h1\
  \ : code.length = 4) \n  (h2 : guess.length = 4)\n  (h3 : ∀ x ∈ code, x ∈ VALID_COLORS)\n\
  \  (h4 : ∀ x ∈ guess, x ∈ VALID_COLORS) :\n  matches_result code guess (List.replicate\
  \ 4 \"Black\") = \n  matches_result guess code (List.replicate 4 \"Black\") := sorry\n\
  \n\ntheorem matches_result_self {guess : List String}\n  (h1 : guess.length = 4)\n\
  \  (h2 : ∀ x ∈ guess, x ∈ VALID_COLORS) :\n  matches_result guess guess (List.replicate\
  \ 4 \"Black\") = true := sorry\n\n\ntheorem game_check_invalid_inputs (g : Game)\
  \ :\n  (∀ guess : List String, guess.length ≠ 4 → g.check guess = []) ∧\n  (∀ guess\
  \ : List String, (∃ x ∈ guess, x ∉ VALID_COLORS) → g.check guess = []) ∧\n  (g.tries\
  \ ≥ 60 → ∀ guess : List String, g.check guess = []) := sorry\n\n\ntheorem check_result_length\
  \ {solution guess : List String} \n  (h1 : solution.length = 4)\n  (h2 : guess.length\
  \ = 4)\n  (h3 : ∀ x ∈ solution, x ∈ VALID_COLORS)\n  (h4 : ∀ x ∈ guess, x ∈ VALID_COLORS)\n\
  \  (g : Game)\n  (h5 : g.solution = solution) :\n  let result := g.check guess\n\
  \  (result.length ≤ 4 ∧ ∀ x ∈ result, x = \"Black\" ∨ x = \"White\") := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
