"vc-description": "You are given $n$ strings $a_1, a_2, \\ldots, a_n$: all of them\
  \ have the same length $m$. The strings consist of lowercase English letters.\n\n\
  Find any string $s$ of length $m$ such that each of the given $n$ strings differs\
  \ from $s$ in at most one position. Formally, for each given string $a_i$, there\
  \ is no more than one position $j$ such that $a_i[j] \\ne s[j]$.\n\nNote that the\
  \ desired string $s$ may be equal to one of the given strings $a_i$, or it may differ\
  \ from all the given strings.\n\nFor example, if you have the strings abac and zbab,\
  \ then the answer to the problem might be the string abab, which differs from the\
  \ first only by the last character, and from the second only by the first.\n\n\n\
  -----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 100$) —\
  \ the number of test cases. Then $t$ test cases follow.\n\nEach test case starts\
  \ with a line containing two positive integers $n$ ($1 \\le n \\le 10$) and $m$\
  \ ($1 \\le m \\le 10$) — the number of strings and their length.\n\nThen follow\
  \ $n$ strings $a_i$, one per line. Each of them has length $m$ and consists of lowercase\
  \ English letters.\n\n\n-----Output-----\n\nPrint $t$ answers to the test cases.\
  \ Each answer (if it exists) is a string of length $m$ consisting of lowercase English\
  \ letters. If there are several answers, print any of them. If the answer does not\
  \ exist, print \"-1\" (\"minus one\", without quotes).\n\n\n-----Example-----\n\
  Input\n5\n2 4\nabac\nzbab\n2 4\naaaa\nbbbb\n3 3\nbaa\naaa\naab\n2 2\nab\nbb\n3 1\n\
  a\nb\nc\n\nOutput\nabab\n-1\naaa\nab\nz\n\n\n-----Note-----\n\nThe first test case\
  \ was explained in the statement.\n\nIn the second test case, the answer does not\
  \ exist."
"vc-preamble": "import Imports.AllImports\n\ndef hammingDistance (s1 s2 : String)\
  \ : Nat :=\n  sorry\n\n\ndef verifyResult (result : String) (strings : List String)\
  \ : Bool :=\n  sorry\n\n\ndef findSimilarString (strings : List String) (n m : Nat)\
  \ : String :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isLower (c : Char) : Bool :=\n  sorry\n"
"vc-theorems": "theorem find_similar_string_properties {strings : List String} {n\
  \ m : Nat}\n  (h1 : n = strings.length)\n  (h2 : m > 0)\n  (h3 : ∀ s ∈ strings,\
  \ s.length = m)\n  (result := findSimilarString strings n m) :\n    (result = \"\
  -1\" ∨ result.length = m) ∧\n    (result = \"-1\" ∨ ∀ c ∈ result.data, isLower c)\
  \ ∧\n    verifyResult result strings\n  := sorry\n\n\ntheorem binary_strings_property\
  \ {strings : List String} {n m : Nat}\n  (h1 : strings.length = 2)\n  (h2 : strings.head!.length\
  \ = strings.tail!.head!.length)\n  (h3 : ∀ s ∈ strings, ∀ c ∈ s.data, c = 'a' ∨\
  \ c = 'b')\n  (result := findSimilarString strings n m) :\n    verifyResult result\
  \ strings\n  := sorry\n\n\ntheorem small_inputs_property {strings : List String}\
  \ {n m : Nat}\n  (h1 : strings.length ≤ 3)\n  (h2 : strings.length > 0)\n  (h3 :\
  \ ∀ s ∈ strings, s.length = strings.head!.length)\n  (result := findSimilarString\
  \ strings n m) :\n    verifyResult result strings\n  := sorry\n\n/--\ninfo: '-1'\n\
  -/\n#guard_msgs in\n#eval find_similar_string [\"aaaa\", \"bbbb\"] 2 4\n\n/--\n\
  info: 'aaa'\n-/\n#guard_msgs in\n#eval find_similar_string [\"baa\", \"aaa\", \"\
  aab\"] 3 3\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
