"vc-description": "Check your arrows\nYou have a quiver of arrows, but some have been\
  \ damaged. The quiver contains arrows with an optional range information (different\
  \ types of targets are positioned at different ranges), so each item is an arrow.\n\
  \nYou need to verify that you have some good ones left, in order to prepare for\
  \ battle:\n```python\nanyArrows([{'range': 5}, {'range': 10, 'damaged': True}, {'damaged':\
  \ True}])\n```\n\nIf an arrow in the quiver does not have a damaged status, it means\
  \ it's new.\n\nThe expected result is a boolean, indicating whether you have any\
  \ good arrows left.\n\nReference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def any_arrows (arrows : List Arrow) : Bool := sorry\n\ntheorem\
  \ any_arrows_all_damaged \n  (arrows : List Arrow)\n  (h : ∀ a ∈ arrows, (a.damaged\
  \ = some true)) :\n  any_arrows arrows = false := sorry\n"
"vc-theorems": "theorem any_arrows_exists_undamaged\n  (arrows : List Arrow)\n  (h\
  \ : ∃ a ∈ arrows, (a.damaged = some false) ∨ (a.damaged = none)) :\n  any_arrows\
  \ arrows = true := sorry\n\n\ntheorem any_arrows_empty :\n  any_arrows [] = false\
  \ := sorry\n\n\ntheorem any_arrows_undamaged_only\n  (arrows : List Arrow)\n  (h\
  \ : ∀ a ∈ arrows, a.damaged = none) :\n  any_arrows arrows = (arrows ≠ []) := sorry\n\
  \n/--\ninfo: False\n-/\n#guard_msgs in\n#eval any_arrows []\n\n/--\ninfo: True\n\
  -/\n#guard_msgs in\n#eval any_arrows [{\"range\": 5}]\n\n/--\ninfo: True\n-/\n#guard_msgs\
  \ in\n#eval any_arrows [{\"range\": 5}, {\"range\": 10, \"damaged\": True}, {\"\
  damaged\": True}]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
