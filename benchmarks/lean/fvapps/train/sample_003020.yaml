"vc-description": "Our friendly friend Pete is really a nice person, but he tends\
  \ to be rather... Inappropriate.\n\nAnd possibly loud, if given enough ethanol and\
  \ free rein, so we ask you to write a function that should take its not always \"\
  clean\" speech and cover as much as possible of it, in order not to offend some\
  \ more sensible spirits.\n\nFor example, given an input like\n```\nWhat the hell\
  \ am I doing here? And where is my wallet? PETE SMASH!\n```\nYou are expected to\
  \ turn it into something like:\n```\nW**t t*e h**l am i d***g h**e? A*d w***e is\
  \ my w****t? P**e s***h!\n```\nIn case you didn't figure out the rules yet: any\
  \ words longer than 2 characters need to have its \"inside\" (meaning every character\
  \ which is not the first or the last) changed into `*`;  as we do not want Pete\
  \ to scream too much, every uppercase letter which is not at the beginning of the\
  \ string or coming after a punctuation mark among [\".\",\"!\",\"?\"] needs to be\
  \ put to lowercase; spaces and other punctuation marks can be ignored.\n\nConversely,\
  \ you need to be sure that the start of each sentence has a capitalized word at\
  \ the beginning. Sentences are divided by the aforementioned punctuation marks.\n\
  \nFinally, the function will take an additional parameter consisting of an array/list\
  \ of allowed words (upper or lower case) which are not to be replaced (the match\
  \ has to be case insensitive).\n\nExtra cookies if you can do it all in some efficient\
  \ way and/or using our dear regexes ;)\n\n**Note:** Absolutely not related to [a\
  \ certain codewarrior I know](http://www.codewars.com/users/petegarvin1) :p"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isAsciiLetter (c : Char) : Bool := sorry\n\ndef peteTalk (s\
  \ : String) (okWords : List String := []) : String := sorry\n"
"vc-theorems": "theorem pete_talk_preserves_pattern {s : String} (word : String)\n\
  \    (h1 : word ∈ (peteTalk s).split (· = ' '))\n    (h2 : word.length > 2)\n  \
  \  (h3 : ∃ c, c ∈ word.data ∧ c = '*') :\n    word.front ≠ '*' ∧\n    word.back\
  \ ≠ '*' ∧\n    ∀ (i : String.Pos), 1 < i.1 → i.1 < word.length - 1 → word.get i\
  \ = '*' := sorry\n\n\ntheorem pete_talk_respects_ok_words {s : String} {okWords\
  \ : List String}\n    (word : String)\n    (h1 : word ∈ okWords)\n    (h2 : word.toLower\
  \ ∈ s.toLower.split (· = ' ')) :\n    word.toLower ∈ (peteTalk s okWords).toLower.split\
  \ (· = ' ') := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
