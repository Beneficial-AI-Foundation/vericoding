"vc-description": "Indian National Olympiad in Informatics 2014\nDue to resurfacing\
  \ work, all north-south traffic on the highway is being diverted through the town\
  \ of Siruseri. Siruseri is a modern, planned town and the section of roads used\
  \ for the diversion forms a rectangular grid where all cars enter at the top-left\
  \ intersection (north- west) and leave at the bottom-right intersection (south-east).\
  \ All roads within the grid are one-way, allowing traffic to move north to south\
  \ (up-down) and west to east (left-right) only.\nThe town authorities are concerned\
  \ about highway drivers overspeeding through the town. To slow them down, they have\
  \ made a rule that no car may travel more than d consecutive road segments in the\
  \ same direction without turning. (Closed-circuit TV cameras have been installed\
  \ to enforce this rule.)\nOf course, there is also repair work going on within the\
  \ town, so some intersections are blocked and cars cannot pass through these.\n\
  You are given the layout of the rectangular grid of roads within Siruseri and the\
  \ constraint on how many consecutive road segments you may travel in the same direction.\
  \ Your task is to compute the total number of paths from the entry (top-left) to\
  \ the exit (bottom-right).\nFor instance, suppose there are 3 rows and 4 columns\
  \ of intersec- tions, numbered from (1,1) at the top-left to (3,4) at the bottom-right,\
  \ as shown on the right. Intersection (2,1) in the second row, first column is blocked,\
  \ and no car may travel more than 2 consecutive road seg- ments in the same direction.\n\
  \nHere, (1,1) → (1,2) → (2,2) → (3,2) → (3,3) → (3,4) is a valid path from (1,1)\
  \ to (3,4), but (1,1) → (1,2) → (1,3) → (1,4) → (2,4) → (3,4) is not, because this\
  \ involves 3 consecutive road segments from left to right. The path (1, 1) → (2,\
  \ 1) → (2, 2) → (2, 3) → (3, 3) → (3, 4) is ruled out because it goes through a\
  \ blocked intersection. In this example, you can check that the total number of\
  \ valid paths is 5.\n\n-----Input format-----\n• Line 1: Three space-separated integers,\
  \ R, C and d, where R is the number of rows in the grid, C is the number of columns\
  \ in the grid and d is the maximum number of consecutive segments you can travel\
  \ in any direction.\n• Lines 2 to R+1: Each line contains C integers, each of which\
  \ is 0 or 1, describing one row of intersections in the grid. An intersection marked\
  \ 0 is blocked and an intersection marked 1 is available to pass through. The start\
  \ (top-left) and finish (bottom-right) intersections are always marked 1.\n\n-----Output\
  \ format-----\nA single integer—the number of paths from the top-left intersection\
  \ to the bottom-right intersection that go only down and right, and obey the d constraint.\n\
  Since the final answer may not fit in a variable of type int, report your answer\
  \ modulo 20011. Be careful to avoid overflows in intermediate computations.\n\n\
  -----Test Data-----\nThe testdata is grouped into three subtasks. In all subtasks,\
  \ 1 ≤ R ≤ 300, 1 ≤ C ≤ 300 and 1 ≤ d ≤ 300. In addition, each subtask has the following\
  \ constraints on the inputs.\n• Subtask 1 [20 points]: d = max(R, C) − 1. (In other\
  \ words, there is no limit on the number of consecutive segments you can travel\
  \ in one direction.)\n• Subtask 2 [30 points]: d=2.\n• Subtask 3 [50 points]: No\
  \ additional constraint on d.\n\n-----Example-----\nHere is the sample input and\
  \ output corresponding to the example above.\n\n-----Sample input-----\n3 4 2\n\
  1 1 1 1\n0 1 1 1\n1 1 1 1\n\n-----Sample output-----\n5\n\nNote: Your program should\
  \ not print anything other than what is specified in the output format. Please remove\
  \ all diagnostic print statements before making your final submission. A program\
  \ with extraneous output will be treated as incorrect!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_paths (rows cols max_consecutive : Nat) (grid : List (List\
  \ Nat)) : Nat :=\n  sorry\n"
"vc-theorems": "theorem empty_grid_zero_paths (max_consecutive : Nat) :\n  find_paths\
  \ 0 0 max_consecutive [] = 0 ∧\n  find_paths 1 1 max_consecutive [] = 0 := by\n\
  \  sorry\n\n\ntheorem single_cell_one_path (max_consecutive : Nat) \n  (h_max :\
  \ 0 < max_consecutive) (h_max2 : max_consecutive ≤ 5) :\n  find_paths 1 1 max_consecutive\
  \ [[1]] = 1 := by\n  sorry\n\n\ntheorem simple_path_bounds (max_consecutive : Nat)\n\
  \  (h_max : 0 < max_consecutive) (h_max2 : max_consecutive ≤ 3) :\n  let grid :=\
  \ [[1,1], [1,1]]\n  let result := find_paths 2 2 max_consecutive grid\n  0 < result\
  \ ∧ result < 20011 := by\n  sorry\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval find_paths\
  \ 3 4 2 [[1, 1, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n\n/--\ninfo: 2\n-/\n#guard_msgs\
  \ in\n#eval find_paths 2 2 1 [[1, 1], [1, 1]]\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n\
  #eval find_paths 3 3 2 [[1, 1, 1], [1, 0, 1], [1, 1, 1]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
