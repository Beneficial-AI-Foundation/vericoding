"vc-description": "Vasily has a deck of cards consisting of n cards. There is an integer\
  \ on each of the cards, this integer is between 1 and 100 000, inclusive. It is\
  \ possible that some cards have the same integers on them.\n\nVasily decided to\
  \ sort the cards. To do this, he repeatedly takes the top card from the deck, and\
  \ if the number on it equals the minimum number written on the cards in the deck,\
  \ then he places the card away. Otherwise, he puts it under the deck and takes the\
  \ next card from the top, and so on. The process ends as soon as there are no cards\
  \ in the deck. You can assume that Vasily always knows the minimum number written\
  \ on some card in the remaining deck, but doesn't know where this card (or these\
  \ cards) is.\n\nYou are to determine the total number of times Vasily takes the\
  \ top card from the deck.\n\n\n-----Input-----\n\nThe first line contains single\
  \ integer n (1 ≤ n ≤ 100 000) — the number of cards in the deck.\n\nThe second line\
  \ contains a sequence of n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 100 000),\
  \ where a_{i} is the number written on the i-th from top card in the deck.\n\n\n\
  -----Output-----\n\nPrint the total number of times Vasily takes the top card from\
  \ the deck.\n\n\n-----Examples-----\nInput\n4\n6 3 1 2\n\nOutput\n7\n\nInput\n1\n\
  1000\n\nOutput\n1\n\nInput\n7\n3 3 3 3 3 3 3\n\nOutput\n7\n\n\n\n-----Note-----\n\
  \nIn the first example Vasily at first looks at the card with number 6 on it, puts\
  \ it under the deck, then on the card with number 3, puts it under the deck, and\
  \ then on the card with number 1. He places away the card with 1, because the number\
  \ written on it is the minimum among the remaining cards. After that the cards from\
  \ top to bottom are [2, 6, 3]. Then Vasily looks at the top card with number 2 and\
  \ puts it away. After that the cards from top to bottom are [6, 3]. Then Vasily\
  \ looks at card 6, puts it under the deck, then at card 3 and puts it away. Then\
  \ there is only one card with number 6 on it, and Vasily looks at it and puts it\
  \ away. Thus, in total Vasily looks at 7 cards."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_vasily_cards (n: Nat) (arr: List Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem vasily_cards_result_positive {n: Nat} {arr: List Nat}\n  (h1:\
  \ n ≥ 1)\n  (h2: arr.length = n) \n  (h3: ∀ x ∈ arr, x ≥ 1) :\n  solve_vasily_cards\
  \ n arr > 0 := by\n  sorry\n\n\ntheorem vasily_cards_result_bounded {n: Nat} {arr:\
  \ List Nat}\n  (h1: n ≥ 1)\n  (h2: arr.length = n)\n  (h3: ∃ m, ∀ x ∈ arr, x ≤ m)\
  \ : \n  ∃ max_val, (∀ x ∈ arr, x ≤ max_val) ∧ solve_vasily_cards n arr ≤ n * max_val\
  \ := by\n  sorry\n\n\ntheorem vasily_cards_single_element {arr: List Nat}\n  (h1:\
  \ arr.length = 1) :\n  solve_vasily_cards 1 arr = 1 := by\n  sorry\n\n\ntheorem\
  \ vasily_cards_identical_elements {n: Nat} {arr: List Nat} {v: Nat}\n  (h1: n ≥\
  \ 1)\n  (h2: arr.length = n)\n  (h3: ∀ x ∈ arr, x = v) :\n  solve_vasily_cards n\
  \ arr = n := by\n  sorry\n\n\ntheorem vasily_cards_single_large {n: Nat}\n  (h1:\
  \ n ≥ 1) :\n  solve_vasily_cards 1 [n * 1000] = 1 := by\n  sorry\n\n\ntheorem vasily_cards_all_same\
  \ {n v: Nat}\n  (h1: n ≥ 2)\n  (h2: v ≥ 1) :\n  solve_vasily_cards n (List.replicate\
  \ n v) = n := by\n  sorry\n\n/--\ninfo: 7\n-/\n#guard_msgs in\n#eval solve_vasily_cards\
  \ 4 [6, 3, 1, 2]\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval solve_vasily_cards 1\
  \ [1000]\n\n/--\ninfo: 7\n-/\n#guard_msgs in\n#eval solve_vasily_cards 7 [3, 3,\
  \ 3, 3, 3, 3, 3]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
