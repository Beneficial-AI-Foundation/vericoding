"vc-description": "Bertown is a city with $n$ buildings in a straight line.\n\nThe\
  \ city's security service discovered that some buildings were mined. A map was compiled,\
  \ which is a string of length $n$, where the $i$-th character is \"1\" if there\
  \ is a mine under the building number $i$ and \"0\" otherwise.\n\nBertown's best\
  \ sapper knows how to activate mines so that the buildings above them are not damaged.\
  \ When a mine under the building numbered $x$ is activated, it explodes and activates\
  \ two adjacent mines under the buildings numbered $x-1$ and $x+1$ (if there were\
  \ no mines under the building, then nothing happens). Thus, it is enough to activate\
  \ any one mine on a continuous segment of mines to activate all the mines of this\
  \ segment. For manual activation of one mine, the sapper takes $a$ coins. He can\
  \ repeat this operation as many times as you want.\n\nAlso, a sapper can place a\
  \ mine under a building if it wasn't there. For such an operation, he takes $b$\
  \ coins. He can also repeat this operation as many times as you want.\n\nThe sapper\
  \ can carry out operations in any order.\n\nYou want to blow up all the mines in\
  \ the city to make it safe. Find the minimum number of coins that the sapper will\
  \ have to pay so that after his actions there are no mines left in the city.\n\n\
  \n-----Input-----\n\nThe first line contains one positive integer $t$ ($1 \\le t\
  \ \\le 10^5$) — the number of test cases. Then $t$ test cases follow.\n\nEach test\
  \ case begins with a line containing two integers $a$ and $b$ ($1 \\le a, b \\le\
  \ 1000$) — the cost of activating and placing one mine, respectively.\n\nThe next\
  \ line contains a map of mines in the city — a string consisting of zeros and ones.\n\
  \nThe sum of the string lengths for all test cases does not exceed $10^5$.\n\n\n\
  -----Output-----\n\nFor each test case, output one integer — the minimum number\
  \ of coins that the sapper will have to pay.\n\n\n-----Example-----\nInput\n2\n\
  1 1\n01000010\n5 1\n01101110\n\nOutput\n2\n6\n\n\n\n-----Note-----\n\nIn the second\
  \ test case, if we place a mine under the fourth building and then activate it,\
  \ then all mines on the field are activated. The cost of such operations is six,\
  \ $b=1$ coin for placing a mine and $a=5$ coins for activating."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def min_cost_clear_mines (a b : Nat) (mine_map : String) : Nat\
  \ := sorry \n\ntheorem min_cost_non_negative (a b : Nat) (mine_map : String) :\n\
  \  min_cost_clear_mines a b mine_map ≥ 0 := sorry\n\n\n"
"vc-theorems": "theorem mines_exist_min_cost (a b : Nat) (mine_map : String) :\n \
  \ (∃ c, c ∈ mine_map.data ∧ c = '1') →\n  min_cost_clear_mines a b mine_map ≥ a\
  \ := sorry\n\n\ntheorem cost_upper_bound (a b : Nat) (mine_map : String) :\n  min_cost_clear_mines\
  \ a b mine_map ≤ a * (mine_map.data.filter (· = '1')).length := sorry\n\n\ntheorem\
  \ single_mine_cost (a b : Nat) :\n  min_cost_clear_mines a b \"1\" = a := sorry\n\
  \n\ntheorem single_mine_cost_with_gap (a b : Nat) :\n  min_cost_clear_mines a b\
  \ \"010\" = a := sorry\n\n\n\n\ntheorem new_activation_cheaper :\n  min_cost_clear_mines\
  \ 2 3 \"101\" = 4 := sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval min_cost_clear_mines\
  \ 1 1 \"01000010\"\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval min_cost_clear_mines\
  \ 5 1 \"01101110\"\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval min_cost_clear_mines\
  \ 3 2 \"1011\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
