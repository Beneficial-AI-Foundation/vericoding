vc-description: |-
  We are given an array asteroids of integers representing asteroids in a row.

  For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left).  Each asteroid moves at the same speed.

  Find out the state of the asteroids after all collisions.  If two asteroids meet, the smaller one will explode.  If both are the same size, both will explode.  Two asteroids moving in the same direction will never meet.


  Example 1:

  Input: 
  asteroids = [5, 10, -5]
  Output: [5, 10]
  Explanation: 
  The 10 and -5 collide resulting in 10.  The 5 and 10 never collide.



  Example 2:

  Input: 
  asteroids = [8, -8]
  Output: []
  Explanation: 
  The 8 and -8 collide exploding each other.



  Example 3:

  Input: 
  asteroids = [10, 2, -5]
  Output: [10]
  Explanation: 
  The 2 and -5 collide resulting in -5.  The 10 and -5 collide resulting in 10.



  Example 4:

  Input: 
  asteroids = [-2, -1, 1, 2]
  Output: [-2, -1, 1, 2]
  Explanation: 
  The -2 and -1 are moving left, while the 1 and 2 are moving right.
  Asteroids moving the same direction never meet, so no asteroids will meet each other.



  Note:
  The length of asteroids will be at most 10000.
  Each asteroid will be a non-zero integer in the range [-1000, 1000]..
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def asteroidCollision (asteroids : List Int) : List Int :=
    sorry
vc-theorems: |
  theorem output_is_valid_asteroid_list
    (asteroids : List Int) :
    let result := asteroidCollision asteroids
    ∀ x ∈ result, x ≠ 0 :=
  sorry


  theorem empty_and_single_preserved
    (asteroids : List Int) :
    List.length asteroids ≤ 1 →
    asteroidCollision asteroids = asteroids :=
  sorry


  theorem all_negative_preserved
    (asteroids : List Int) :
    let negative_asteroids := asteroids.map (fun x => -(x.natAbs))
    let result := asteroidCollision negative_asteroids
    (∀ x ∈ result, x < 0) ∧
    (result.length = negative_asteroids.length) :=
  sorry


  theorem all_positive_preserved
    (asteroids : List Int) :
    let positive_asteroids := asteroids.map (fun x => x.natAbs)
    let result := asteroidCollision positive_asteroids
    (∀ x ∈ result, x > 0) ∧
    (result.length = positive_asteroids.length) :=
  sorry


  theorem equal_size_opposite_direction_collision
    (asteroids : List Int)
    (h : asteroids.length ≥ 2)
    (size : Int) :
    asteroidCollision [size, -size] = [] :=
  sorry

  /--
  info: [5, 10]
  -/
  #guard_msgs in
  #eval asteroidCollision [5, 10, -5]

  /--
  info: []
  -/
  #guard_msgs in
  #eval asteroidCollision [8, -8]

  /--
  info: [-2, -1, 1, 2]
  -/
  #guard_msgs in
  #eval asteroidCollision [-2, -1, 1, 2]
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
