"vc-description": "We are given an array asteroids of integers representing asteroids\
  \ in a row.\n\nFor each asteroid, the absolute value represents its size, and the\
  \ sign represents its direction (positive meaning right, negative meaning left).\
  \  Each asteroid moves at the same speed.\n\nFind out the state of the asteroids\
  \ after all collisions.  If two asteroids meet, the smaller one will explode.  If\
  \ both are the same size, both will explode.  Two asteroids moving in the same direction\
  \ will never meet.\n\n\nExample 1:\n\nInput: \nasteroids = [5, 10, -5]\nOutput:\
  \ [5, 10]\nExplanation: \nThe 10 and -5 collide resulting in 10.  The 5 and 10 never\
  \ collide.\n\n\n\nExample 2:\n\nInput: \nasteroids = [8, -8]\nOutput: []\nExplanation:\
  \ \nThe 8 and -8 collide exploding each other.\n\n\n\nExample 3:\n\nInput: \nasteroids\
  \ = [10, 2, -5]\nOutput: [10]\nExplanation: \nThe 2 and -5 collide resulting in\
  \ -5.  The 10 and -5 collide resulting in 10.\n\n\n\nExample 4:\n\nInput: \nasteroids\
  \ = [-2, -1, 1, 2]\nOutput: [-2, -1, 1, 2]\nExplanation: \nThe -2 and -1 are moving\
  \ left, while the 1 and 2 are moving right.\nAsteroids moving the same direction\
  \ never meet, so no asteroids will meet each other.\n\n\n\nNote:\nThe length of\
  \ asteroids will be at most 10000.\nEach asteroid will be a non-zero integer in\
  \ the range [-1000, 1000].."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def asteroidCollision (asteroids : List Int) : List Int :=\n  sorry\n"
"vc-theorems": "theorem output_is_valid_asteroid_list\n  (asteroids : List Int) :\n\
  \  let result := asteroidCollision asteroids\n  ∀ x ∈ result, x ≠ 0 :=\nsorry\n\n\
  \ntheorem empty_and_single_preserved\n  (asteroids : List Int) :\n  List.length\
  \ asteroids ≤ 1 →\n  asteroidCollision asteroids = asteroids :=\nsorry\n\n\ntheorem\
  \ all_negative_preserved\n  (asteroids : List Int) :\n  let negative_asteroids :=\
  \ asteroids.map (fun x => -(x.natAbs))\n  let result := asteroidCollision negative_asteroids\n\
  \  (∀ x ∈ result, x < 0) ∧\n  (result.length = negative_asteroids.length) :=\nsorry\n\
  \n\ntheorem all_positive_preserved\n  (asteroids : List Int) :\n  let positive_asteroids\
  \ := asteroids.map (fun x => x.natAbs)\n  let result := asteroidCollision positive_asteroids\n\
  \  (∀ x ∈ result, x > 0) ∧\n  (result.length = positive_asteroids.length) :=\nsorry\n\
  \n\ntheorem equal_size_opposite_direction_collision\n  (asteroids : List Int)\n\
  \  (h : asteroids.length ≥ 2)\n  (size : Int) :\n  asteroidCollision [size, -size]\
  \ = [] :=\nsorry\n\n/--\ninfo: [5, 10]\n-/\n#guard_msgs in\n#eval asteroidCollision\
  \ [5, 10, -5]\n\n/--\ninfo: []\n-/\n#guard_msgs in\n#eval asteroidCollision [8,\
  \ -8]\n\n/--\ninfo: [-2, -1, 1, 2]\n-/\n#guard_msgs in\n#eval asteroidCollision\
  \ [-2, -1, 1, 2]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
