"vc-description": "You like the way the Python `+` operator easily handles adding\
  \ different numeric types, but you need a tool to do that kind of addition without\
  \ killing your program with a `TypeError` exception whenever you accidentally try\
  \ adding incompatible types like strings and lists to numbers.\n\nYou decide to\
  \ write a function `my_add()` that takes two arguments. If the arguments can be\
  \ added together it returns the sum. If adding the arguments together would raise\
  \ an error the function should return `None` instead.\n\nFor example, `my_add(1,\
  \ 3.414)` would return `4.414`, but `my_add(42, \" is the answer.\")` would return\
  \ `None`.\n\nHint: using a `try` / `except` statement may simplify this kata."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def my_add : Input → Input → Option Input := sorry\n\ntheorem add_numbers\
  \ (a b : Int) :\n  my_add (Input.number a) (Input.number b) = some (Input.number\
  \ (a + b)) := sorry\n"
"vc-theorems": "theorem add_number_and_string (a : Int) (b : String) :\n  my_add (Input.number\
  \ a) (Input.text b) = none := sorry\n\n\ntheorem add_non_numbers {a b : Input} \n\
  \  (h1 : ¬∃ n : Int, a = Input.number n) \n  (h2 : ¬∃ n : Int, b = Input.number\
  \ n) :\n  my_add a b = none ∨ \n  (∃ s : String, my_add a b = some (Input.text s))\
  \ ∨\n  (∃ bs : ByteArray, my_add a b = some (Input.binary bs)) ∨\n  (∃ l : List\
  \ Int, my_add a b = some (Input.list l)) := sorry\n\n\ntheorem add_none_left (x\
  \ : Input) :\n  my_add Input.none x = none := sorry\n\n\ntheorem add_none_right\
  \ (x : Input) :\n  my_add x Input.none = none := sorry\n\n\ntheorem add_none_both\
  \ :\n  my_add Input.none Input.none = none := sorry\n\n/--\ninfo: 4.414\n-/\n#guard_msgs\
  \ in\n#eval my_add 1 3.414\n\n/--\ninfo: None\n-/\n#guard_msgs in\n#eval my_add\
  \ 42 \" is the answer.\"\n\n/--\ninfo: None\n-/\n#guard_msgs in\n#eval my_add 10\
  \ \"2\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
