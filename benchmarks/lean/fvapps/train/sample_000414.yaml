"vc-description": "You are given two images img1 and img2 both of size n x n, represented\
  \ as binary, square matrices of the same size. (A binary matrix has only 0s and\
  \ 1s as values.)\nWe translate one image however we choose (sliding it left, right,\
  \ up, or down any number of units), and place it on top of the other image.  After,\
  \ the overlap of this translation is the number of positions that have a 1 in both\
  \ images.\n(Note also that a translation does not include any kind of rotation.)\n\
  What is the largest possible overlap?\n \nExample 1:\n\nInput: img1 = [[1,1,0],[0,1,0],[0,1,0]],\
  \ img2 = [[0,0,0],[0,1,1],[0,0,1]]\nOutput: 3\nExplanation: We slide img1 to right\
  \ by 1 unit and down by 1 unit.\n\nThe number of positions that have a 1 in both\
  \ images is 3. (Shown in red)\n\n\nExample 2:\nInput: img1 = [[1]], img2 = [[1]]\n\
  Output: 1\n\nExample 3:\nInput: img1 = [[0]], img2 = [[0]]\nOutput: 0\n\n \nConstraints:\n\
  \nn == img1.length\nn == img1[i].length\nn == img2.length \nn == img2[i].length\n\
  1 <= n <= 30\nimg1[i][j] is 0 or 1.\nimg2[i][j] is 0 or 1."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def largest_overlap (img1 img2 : Matrix) : Nat :=\n  sorry\n"
"vc-theorems": "theorem square_matrix_property \n  (n : Nat) (img1 img2 : Matrix)\n\
  \  (h1 : img1.length = n)\n  (h2 : img2.length = n) \n  (h3 : ∀ row, row ∈ img1\
  \ → row.length = n)\n  (h4 : ∀ row, row ∈ img2 → row.length = n)\n  (h5 : ∀ row\
  \ ∈ img1, ∀ x ∈ row, x ≤ 1)\n  (h6 : ∀ row ∈ img2, ∀ x ∈ row, x ≤ 1) :\n  let result\
  \ := largest_overlap img1 img2\n  result ≥ 0 ∧ result ≤ n * n :=\nsorry\n\n\ntheorem\
  \ zero_overlap_property (n : Nat) (h : n > 0) :\n  let ones_matrix := List.replicate\
  \ n (List.replicate n 1)\n  let zeros_matrix := List.replicate n (List.replicate\
  \ n 0)\n  largest_overlap ones_matrix zeros_matrix = 0 :=\nsorry\n\n\ntheorem symmetry_property\n\
  \  (n : Nat) (img1 img2 : Matrix)\n  (h1 : img1.length = n)\n  (h2 : img2.length\
  \ = n)\n  (h3 : ∀ row, row ∈ img1 → row.length = n)\n  (h4 : ∀ row, row ∈ img2 →\
  \ row.length = n)\n  (h5 : ∀ row ∈ img1, ∀ x ∈ row, x ≤ 1)\n  (h6 : ∀ row ∈ img2,\
  \ ∀ x ∈ row, x ≤ 1) :\n  largest_overlap img1 img2 = largest_overlap img2 img1 :=\n\
  sorry\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval largest_overlap [[1, 1, 0], [0,\
  \ 1, 0], [0, 1, 0]] [[0, 0, 0], [0, 1, 1], [0, 0, 1]]\n\n/--\ninfo: 1\n-/\n#guard_msgs\
  \ in\n#eval largest_overlap [[1]] [[1]]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval\
  \ largest_overlap [[0]] [[0]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
