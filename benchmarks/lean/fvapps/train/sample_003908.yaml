"vc-description": "You are making your very own boardgame. The game is played by two\
  \ opposing players, featuring a 6 x 6 tile system, with the players taking turns\
  \ to move their pieces (similar to chess). The design is finished, now it's time\
  \ to actually write and implement the features. Being the good programmer you are,\
  \ you carefully plan the procedure and break the program down into smaller managable\
  \ sections. You decide to start coding the logic for resolving \"fights\" when two\
  \ pieces engage in combat on a tile. \n\nYour boardgame features four unique pieces:\
  \ \n\nSwordsman, Cavalry, Archer and Pikeman\n\nEach piece has unique movement and\
  \ has advantages and weaknesses in combat against one of the other pieces. \n\n\
  Task\n\nYou must write a function ```fightResolve``` that takes the attacking and\
  \ defending piece as input parameters, and returns the winning piece. It may be\
  \ the case that both the attacking and defending piece belong to the same player,\
  \ after which you must return an error value to indicate an illegal move. \n\nIn\
  \ C++ and C, the pieces will be represented as ```chars```. Values will be case-sensitive\
  \ to display ownership. Let the following char values represent each piece from\
  \ their respective player.\n\nPlayer 1:  ```p```= Pikeman, ```k```= Cavalry, ```a```=\
  \ Archer, ```s```= Swordsman \n\nPlayer 2:  ```P```= Pikeman, ```K```= Cavalry,\
  \ ```A```= Archer, ```S```= Swordsman \n\nThe outcome of the fight between two pieces\
  \ depends on which piece attacks, the type of the attacking piece and the type of\
  \ the defending piece. Archers always win against swordsmens, swordsmen always win\
  \ against pikemen, pikemen always win against cavalry and cavalry always win against\
  \ archers. If a matchup occurs that was not previously mentioned (for example Archers\
  \ vs Pikemen) the attacker will always win. This table represents the winner of\
  \ each possible engagement between an attacker and a defender.\n\n\n(Attacker→)\n\
  \    (Defender↓)\nArcher\nPikeman\nSwordsman\nKnight\n\n\nKnight\nDefender\nAttacker\n\
  Attacker\nAttacker\n\n\nSwordsman\nAttacker\nDefender\nAttacker\nAttacker\n\n\n\
  Archer\nAttacker\nAttacker\nDefender\nAttacker\n\n\nPikeman\nAttacker\nAttacker\n\
  Attacker\nDefender\n\n\n\nIf two pieces from the same player engage in combat, i.e\
  \ P vs S or k vs a, the function must return -1 to signify and illegal move. Otherwise\
  \ assume that no other illegal values will be passed.\n\nExamples\n\nFunction prototype:\
  \ fightResolve(defender, attacker)\n1. fightResolve('a', 'P') outputs 'P'. No interaction\
  \ defined between Pikemen and Archer. Pikemen is the winner here because it is the\
  \ attacking piece.\n\n2. fightResolve('k', 'A') outputs 'k'. Knights always defeat\
  \ archers, even if Archer is the attacking piece here.\n\n3. fightResolve('S', 'A')\
  \ outputs -1. Friendly units don't fight. Return -1 to indicate error."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isWhite (p: Piece) : Bool := sorry \n\ndef fight_resolve (defender\
  \ attacker : Piece) : Option Piece := sorry\n"
"vc-theorems": "theorem same_team_invalid {d a : Piece} : \n  isWhite d = isWhite\
  \ a → fight_resolve d a = none := sorry\n\n\ntheorem result_is_valid {d a : Piece}\
  \ :\n  fight_resolve d a = some d ∨ fight_resolve d a = some a ∨ fight_resolve d\
  \ a = none := sorry\n\n\ntheorem winning_matchups_symmetrical {d a : Piece} :\n\
  \  fight_resolve d a = some d →\n  ((d = Piece.King ∧ a = Piece.Assassin) ∨\n  \
  \ (d = Piece.Shield ∧ a = Piece.Pike) ∨ \n   (d = Piece.Assassin ∧ a = Piece.Shield)\
  \ ∨\n   (d = Piece.Pike ∧ a = Piece.King)) := sorry\n\ntheorem default_attacker_wins\
  \ {d a : Piece} :\n  fight_resolve d a ≠ none →\n  fight_resolve d a ≠ some d →\n\
  \  fight_resolve d a = some a := sorry\n\n/--\ninfo: -1\n-/\n#guard_msgs in\n#eval\
  \ fight_resolve \"K\" \"A\"\n\n/--\ninfo: 'k'\n-/\n#guard_msgs in\n#eval fight_resolve\
  \ \"k\" \"A\"\n\n/--\ninfo: 'P'\n-/\n#guard_msgs in\n#eval fight_resolve \"a\" \"\
  P\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
