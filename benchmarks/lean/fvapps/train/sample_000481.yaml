"vc-description": "Given two integers A and B, return any string S such that:\n\n\
  S has length A + B and contains exactly A 'a' letters, and exactly B 'b' letters;\n\
  The substring 'aaa' does not occur in S;\nThe substring 'bbb' does not occur in\
  \ S.\n\n \nExample 1:\nInput: A = 1, B = 2\nOutput: \"abb\"\nExplanation: \"abb\"\
  , \"bab\" and \"bba\" are all correct answers.\n\n\nExample 2:\nInput: A = 4, B\
  \ = 1\nOutput: \"aabaa\"\n \n\nNote:\n\n0 <= A <= 100\n0 <= B <= 100\nIt is guaranteed\
  \ such an S exists for the given A and B."
"vc-preamble": "import Imports.AllImports\n\ndef strWithout3a3b (a b : Nat) : String\
  \ :=\n  sorry\n\n\ndef count_char (s : String) (c : Char) : Nat :=\n  sorry\n\n\n\
  def contains_substring (s main : String) : Bool :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_valid_string (s : String) (a_count b_count : Nat) : Prop\
  \ :=\n  count_char s 'a' = a_count ∧ \n  count_char s 'b' = b_count ∧\n  ¬contains_substring\
  \ \"aaa\" s ∧\n  ¬contains_substring \"bbb\" s\n"
"vc-theorems": "theorem equal_counts {n : Nat} (h : n > 0) :\n  let s := strWithout3a3b\
  \ n n\n  is_valid_string s n n ∧ s.length = 2 * n\n  := sorry\n\n\ntheorem double_a_count\
  \ {n : Nat} :\n  let s := strWithout3a3b (2 * n) n\n  is_valid_string s (2 * n)\
  \ n ∧ s.length = 3 * n\n  := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
