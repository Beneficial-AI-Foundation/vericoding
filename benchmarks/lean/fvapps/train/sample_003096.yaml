"vc-description": "**This Kata is intended as a small challenge for my students**\n\
  \nAll Star Code Challenge #19\n\nYou work for an ad agency and your boss, Bob, loves\
  \ a catchy slogan. He's always jumbling together \"buzz\" words until he gets one\
  \ he likes. You're looking to impress Boss Bob with a function that can do his job\
  \ for him.\n\nCreate a function called sloganMaker() that accepts an array of string\
  \ \"buzz\" words. The function returns an array of all possible UNIQUE string permutations\
  \ of the buzz words (concatonated and separated by spaces).\n\nYour boss is not\
  \ very bright, so anticipate him using the same \"buzz\" word more than once, by\
  \ accident. The function should ignore these duplicate string inputs.\n\n```\nsloganMaker([\"\
  super\", \"hot\", \"guacamole\"]);\n//[ 'super hot guacamole',\n//  'super guacamole\
  \ hot',\n//  'hot super guacamole',\n//  'hot guacamole super',\n//  'guacamole\
  \ super hot',\n//  'guacamole hot super' ]\n\nsloganMaker([\"cool\", \"pizza\",\
  \ \"cool\"]); // => [ 'cool pizza', 'pizza cool' ]\n```\n\nNote:  \nThere should\
  \ be NO duplicate strings in the output array\n\nThe input array MAY contain duplicate\
  \ strings, which should STILL result in an output array with all unique strings\n\
  \nAn empty string is valid input\n\n```if-not:python,crystal\nThe order of the permutations\
  \ in the output array does not matter\n```\n```if:python,crystal\nThe order of the\
  \ output array must match those rules:\n1. Generate the permutations in lexicographic\
  \ order of the original array.\n2. keep only the first occurence of a permutation,\
  \ when duplicates are found.\n```"
"vc-preamble": "import Imports.AllImports\n\ndef List.factorial : Nat → Nat\n  | 0\
  \ => 1\n  | n + 1 => (n + 1) * factorial n\n\n\ndef List.unique {α} [BEq α] (xs\
  \ : List α) : List α := sorry\n\ndef slogan_maker (words: List String) : List String\
  \ := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def containsString (s1 s2: String) : Bool := sorry  \n\ntheorem\
  \ slogan_maker_returns_string_list (words : List String) :\n  ∀ s, s ∈ slogan_maker\
  \ words → s.length ≥ 0 := sorry\n"
"vc-theorems": "theorem slogan_maker_contains_all_words (words : List String) :\n\
  \  ∀ slogan, slogan ∈ slogan_maker words →\n  ∀ word, word ∈ List.unique words →\n\
  \  containsString slogan word = true := sorry\n\n\ntheorem slogan_maker_length (words\
  \ : List String) :\n  (slogan_maker words).length = List.factorial (List.unique\
  \ words).length := sorry \n\n\ntheorem slogan_maker_order_independent (words₁ words₂\
  \ : List String) :\n  List.unique words₁ = List.unique words₂ →\n  slogan_maker\
  \ words₁ = slogan_maker words₂ := sorry\n\n\ntheorem slogan_maker_unique_results\
  \ (words : List String) :\n  ∀ s₁ s₂, s₁ ∈ slogan_maker words → s₂ ∈ slogan_maker\
  \ words →\n  s₁ = s₂ ∨ s₁ ≠ s₂ := sorry\n\n/--\ninfo: ['super']\n-/\n#guard_msgs\
  \ in\n#eval slogan_maker [\"super\"]\n\n/--\ninfo: set(['super hot', 'hot super'])\n\
  -/\n#guard_msgs in\n#eval set slogan_maker([\"super\", \"hot\"])\n\n/--\ninfo: set(['super\
  \ hot guacamole', 'super guacamole hot', 'hot super guacamole', 'hot guacamole super',\
  \ 'guacamole super hot', 'guacamole hot super'])\n-/\n#guard_msgs in\n#eval set\
  \ slogan_maker([\"super\", \"hot\", \"guacamole\"])\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
