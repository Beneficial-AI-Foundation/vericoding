"vc-description": "A lot of goods have an  International Article Number (formerly\
  \ known as \"European Article Number\") abbreviated \"EAN\". EAN is a 13-digits\
  \ barcode consisting of 12-digits data followed by a single-digit checksum (EAN-8\
  \ is not considered in this kata).\n\n\nThe single-digit checksum is calculated\
  \ as followed (based upon the 12-digit data):\n\nThe digit at the first, third,\
  \ fifth, etc. position (i.e. at the odd position) has to be multiplied with \"1\"\
  . \nThe digit at the second, fourth, sixth, etc. position (i.e. at the even position)\
  \ has to be multiplied with \"3\".\nSum these results. \n\nIf this sum is dividable\
  \ by 10, the checksum is 0. Otherwise the checksum has the following formula:\n\n\
  \  checksum = 10 - (sum mod 10)\n\nFor example, calculate the checksum for \"400330101839\"\
  \ (= 12-digits data):\n\n4·1 + 0·3 + 0·1 + 3·3 + 3·1 + 0·3 + 1·1 + 0·3 + 1·1 + 8·3\
  \ + 3·1 + 9·3\n= 4 + 0 + 0 + 9 + 3 + 0 + 1 + 0 + 1 + 24 + 3 + 27 \n= 72\n10 - (72\
  \ mod 10) = 8 ⇒ Checksum: 8\n\nThus, the EAN-Code is 4003301018398 (= 12-digits\
  \ data followed by single-digit checksum).\n \nYour Task\nValidate a given EAN-Code.\
  \ Return true if the given EAN-Code is valid, otherwise false.\n\nAssumption\nYou\
  \ can assume the given code is syntactically valid, i.e. it only consists of numbers\
  \ and it exactly has a length of 13 characters.\n\nExamples\n\n```python\nvalidate_ean(\"\
  4003301018398\") # => True\nvalidate_ean(\"4003301018392\") # => False\n```\n\n\
  Good Luck and have fun."
"vc-preamble": "import Imports.AllImports\n\ndef calculateCheckDigit (code : String)\
  \ : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def validateEAN (code : String) : Bool :=\n  sorry\n"
"vc-theorems": "theorem valid_ean_with_check_digit {code : String} (h1 : code.length\
  \ = 12) (h2 : ∀ c ∈ code.data, '0' ≤ c ∧ c ≤ '9') : \n  validateEAN (code ++ toString\
  \ (calculateCheckDigit code)) = true :=\nsorry\n\n\ntheorem invalid_ean_check {code\
  \ : String} (h1 : code.length = 13) (h2 : ∀ c ∈ code.data, '0' ≤ c ∧ c ≤ '9') :\n\
  \  ¬(validateEAN code) →\n  let digits := code.data.map (fun c => c.toNat - '0'.toNat)\n\
  \  ((digits.enum.foldl (fun acc (i, d) => acc + if i % 2 = 0 then d else d * 3)\
  \ 0) % 10 ≠ 0) :=\nsorry\n\n\ntheorem ean_length_requirement {code : String} :\n\
  \  validateEAN code → code.length = 13 :=\nsorry\n\n\ntheorem ean_digits_only {code\
  \ : String} (h : ∃ c ∈ code.data, ¬('0' ≤ c ∧ c ≤ '9')) :\n  ¬(validateEAN code)\
  \ :=\nsorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval validate_ean \"4003301018398\"\
  \n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval validate_ean \"4003301018392\"\n\
  \n/--\ninfo: True\n-/\n#guard_msgs in\n#eval validate_ean \"9783815820865\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
