"vc-description": "You are given an array of positive and negative integers and a\
  \ number ```n``` and ```n > 1```. The array may have elements that occurs more than\
  \ once.\nFind all the combinations of n elements of the array that their sum are\
  \ 0.\n```python\narr = [1, -1, 2, 3, -2]\nn = 3\nfind_zero_sum_groups(arr, n) ==\
  \ [-2, -1, 3] # -2 - 1 + 3 = 0\n```\nThe function should ouput every combination\
  \ or group in increasing order.\n\nWe may have more than one group:\n```python\n\
  arr = [1, -1, 2, 3, -2, 4, 5, -3 ]\nn = 3\nfind_zero_sum_groups(arr, n) == [[-3,\
  \ -2, 5], [-3, -1, 4], [-3, 1, 2], [-2, -1, 3]]\n```\nIn the case above the function\
  \ should output a sorted 2D array.\n\nThe function will not give a group twice,\
  \ or more, only once.\n\n```python\narr = [1, -1, 2, 3, -2, 4, 5, -3, -3, -1, 2,\
  \ 1, 4, 5, -3 ]\nn = 3\nfind_zero_sum_groups(arr, n) == [[-3, -2, 5], [-3, -1, 4],\
  \ [-3, 1, 2], [-2, -1, 3]]\n```\nIf there are no combinations with sum equals to\
  \ 0, the function will output an alerting message.\n\n```python\narr = [1, 1, 2,\
  \ 3]\nn = 2\nfind_zero_sum_groups(arr, n) == \"No combinations\"\n```\nIf the function\
  \ receives an empty array will output an specific alert:\n```python\narr = []\n\
  n = 2\nfind_zero_sum_groups(arr, n) == \"No elements to combine\"\n```\nAs you have\
  \ seen the solutions may have a value occurring only once.\nEnjoy it!"
"vc-preamble": "import Imports.AllImports\n\ndef find_zero_sum_groups (arr : List\
  \ Int) (n : Nat) : String ⊕ List Int ⊕ List (List Int) := sorry\n\ndef isSorted\
  \ (l : List Int) : Bool := \n  match l with\n  | [] => true\n  | x :: xs => match\
  \ xs with\n    | [] => true\n    | y :: _ => x ≤ y && isSorted xs\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isSortedBy {α : Type} (l : List α) (f : α → α → Bool) : Bool\
  \ :=\n  match l with\n  | [] => true\n  | x :: xs => match xs with\n    | [] =>\
  \ true\n    | y :: _ => f x y && isSortedBy xs f\n"
"vc-theorems": "theorem empty_array_returns_no_elements {n : Nat} (h : n > 0) : \n\
  \  find_zero_sum_groups [] n = Sum.inl \"No elements to combine\" := sorry\n\n\n\
  theorem valid_solution_has_correct_length {arr : List Int} {n : Nat} {result : List\
  \ Int}\n  (h : find_zero_sum_groups arr n = Sum.inr (Sum.inl result)) :\n  result.length\
  \ = n := sorry\n\n\ntheorem valid_solution_sums_to_zero {arr : List Int} {n : Nat}\
  \ {result : List Int}\n  (h : find_zero_sum_groups arr n = Sum.inr (Sum.inl result))\
  \ :\n  result.foldl (· + ·) 0 = 0 := sorry\n\n\ntheorem valid_solution_elements_in_input\
  \ {arr : List Int} {n : Nat} {result : List Int}\n  (h : find_zero_sum_groups arr\
  \ n = Sum.inr (Sum.inl result)) :\n  ∀ x ∈ result, x ∈ arr := sorry\n\n\ntheorem\
  \ valid_solution_is_sorted {arr : List Int} {n : Nat} {result : List Int}\n  (h\
  \ : find_zero_sum_groups arr n = Sum.inr (Sum.inl result)) :\n  isSorted result\
  \ = true := sorry\n\n\ntheorem multiple_solutions_all_valid {arr : List Int} {n\
  \ : Nat} {results : List (List Int)}\n  (h : find_zero_sum_groups arr n = Sum.inr\
  \ (Sum.inr results)) :\n  ∀ result ∈ results,\n    result.length = n ∧ \n    result.foldl\
  \ (· + ·) 0 = 0 ∧\n    (∀ x ∈ result, x ∈ arr) ∧\n    isSorted result = true :=\
  \ sorry\n\n\ntheorem multiple_solutions_are_sorted {arr : List Int} {n : Nat} {results\
  \ : List (List Int)}\n  (h : find_zero_sum_groups arr n = Sum.inr (Sum.inr results))\
  \ :\n  isSortedBy results (fun x y => x.foldl (· + ·) 0 ≤ y.foldl (· + ·) 0) = true\
  \ := sorry\n\n\ntheorem all_positive_has_no_solution {arr : List Int} {n : Nat}\n\
  \  (h1 : ∀ x ∈ arr, x > 0)\n  (h2 : n > 0)\n  (h3 : n ≤ arr.length) :\n  find_zero_sum_groups\
  \ arr n = Sum.inl \"No combinations\" := sorry\n\n\ntheorem size_larger_than_array_no_solution\
  \ {arr : List Int} {n : Nat}\n  (h : n > arr.length) :\n  find_zero_sum_groups arr\
  \ n = Sum.inl \"No combinations\" := sorry\n\n/--\ninfo: [-2, -1, 3]\n-/\n#guard_msgs\
  \ in\n#eval find_zero_sum_groups [1, -1, 2, 3, -2] 3\n\n/--\ninfo: [[-3, -2, 5],\
  \ [-3, -1, 4], [-3, 1, 2], [-2, -1, 3]]\n-/\n#guard_msgs in\n#eval find_zero_sum_groups\
  \ [1, -1, 2, 3, -2, 4, 5, -3] 3\n\n/--\ninfo: 'No combinations'\n-/\n#guard_msgs\
  \ in\n#eval find_zero_sum_groups [1, 1, 2, 3] 2\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
