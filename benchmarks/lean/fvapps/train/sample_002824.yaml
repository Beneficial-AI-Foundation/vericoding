"vc-description": "You are going to be given a word. Your job is to return the middle\
  \ character of the word. If the word's length is odd, return the middle character.\
  \ If the word's length is even, return the middle 2 characters.\n\n#Examples:\n\
  ~~~if-not:bf\n```\nKata.getMiddle(\"test\") should return \"es\"\n\nKata.getMiddle(\"\
  testing\") should return \"t\"\n\nKata.getMiddle(\"middle\") should return \"dd\"\
  \n\nKata.getMiddle(\"A\") should return \"A\"\n\n```\n~~~\n~~~if:bf\n```\nrunBF(\"\
  test\\0\") should return \"es\"\n\nrunBF(\"testing\\0\") should return \"t\"\n\n\
  runBF(\"middle\\0\") should return \"dd\"\n\nrunBF(\"A\\0\") should return \"A\"\
  \n\n```\n~~~\n\n#Input\n\nA word (string) of length `0 < str < 1000` (In javascript\
  \ you may get slightly more than 1000 in some test cases due to an error in the\
  \ test cases). You do not need to test for this. This is only here to tell you that\
  \ you do not need to worry about your solution timing out.\n\n\n#Output\n\nThe middle\
  \ character(s) of the word represented as a string."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def get_middle : String → String \n| s => sorry\n"
"vc-theorems": "theorem middle_length_property (s : String) (h : s.length > 0) : \n\
  \  let result := get_middle s\n  result.length = if s.length % 2 = 0 then 2 else\
  \ 1 := \nsorry\n\n\ntheorem single_char_property (s : String) (h : s.length = 1)\
  \ :\n  get_middle s = s :=\nsorry\n\n\ntheorem middle_position_property (s : String)\
  \ (h : s.length > 1) :\n  let result := get_middle s\n  let mid := (s.length - 1)\
  \ / 2\n  ∃ pos : String.Pos, get_middle s = s.extract pos (⟨mid + result.length⟩)\
  \ :=\nsorry\n\n/--\ninfo: 'es'\n-/\n#guard_msgs in\n#eval get_middle \"test\"\n\n\
  /--\ninfo: 't'\n-/\n#guard_msgs in\n#eval get_middle \"testing\"\n\n/--\ninfo: 'A'\n\
  -/\n#guard_msgs in\n#eval get_middle \"A\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
