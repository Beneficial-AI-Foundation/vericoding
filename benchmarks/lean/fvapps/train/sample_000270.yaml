"vc-description": "There is a room with n bulbs, numbered from 1 to n, arranged in\
  \ a row from left to right. Initially, all the bulbs are turned off.\nAt moment\
  \ k (for k from 0 to n - 1), we turn on the light[k] bulb. A bulb change color to\
  \ blue only if it is on and all the previous bulbs (to the left) are turned on too.\n\
  Return the number of moments in which all turned on bulbs are blue.\n \nExample\
  \ 1:\n\nInput: light = [2,1,3,5,4]\nOutput: 3\nExplanation: All bulbs turned on,\
  \ are blue at the moment 1, 2 and 4.\n\nExample 2:\nInput: light = [3,2,4,1,5]\n\
  Output: 2\nExplanation: All bulbs turned on, are blue at the moment 3, and 4 (index-0).\n\
  \nExample 3:\nInput: light = [4,1,2,3]\nOutput: 1\nExplanation: All bulbs turned\
  \ on, are blue at the moment 3 (index-0).\nBulb 4th changes to blue at the moment\
  \ 3.\n\nExample 4:\nInput: light = [2,1,4,3,6,5]\nOutput: 3\n\nExample 5:\nInput:\
  \ light = [1,2,3,4,5,6]\nOutput: 6\n\n \nConstraints:\n\nn == light.length\n1 <=\
  \ n <= 5 * 10^4\nlight is a permutation of  [1, 2, ..., n]"
"vc-preamble": "import Imports.AllImports\n\ndef num_times_all_blue (lights : List\
  \ Nat) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def remove_duplicates (l : List Nat) : List Nat :=\n  sorry\n"
"vc-theorems": "theorem output_bounds (lights : List Nat) (h : lights ≠ []) :\n  let\
  \ valid := lights.filter (fun x => x ≤ lights.length)\n  let nodupes := remove_duplicates\
  \ valid  \n  0 ≤ num_times_all_blue nodupes ∧ num_times_all_blue nodupes ≤ nodupes.length\
  \ :=\nsorry\n\n\ntheorem permutation_correctness {n : Nat} (lights : List Nat) \n\
  \  (h1 : lights.length = n)\n  (h2 : ∀ x, x ∈ lights → x ≤ n) \n  (h3 : ∀ x, x ∈\
  \ lights → (lights.filter (· = x)).length = 1) :\n  num_times_all_blue lights =\
  \ \n    (List.range lights.length).foldl \n      (fun acc i => \n        let rightmost\
  \ := (lights.take (i+1)).foldl Nat.max 0 \n        if i+1 = rightmost then acc +\
  \ 1 else acc) \n      0 :=\nsorry\n\n\ntheorem invariants (lights : List Nat) (h\
  \ : lights ≠ []) :\n  let valid := lights.filter (fun x => x ≤ lights.length)\n\
  \  let nodupes := remove_duplicates valid\n  let h2 := sorry -- proof that nodupes\
  \ ≠ []\n  (nodupes.getLast h2 = nodupes.length → num_times_all_blue nodupes ≥ 1)\
  \ ∧ \n  num_times_all_blue nodupes ≤ nodupes.length :=\nsorry\n\n/--\ninfo: 3\n\
  -/\n#guard_msgs in\n#eval num_times_all_blue [2, 1, 3, 5, 4]\n\n/--\ninfo: 2\n-/\n\
  #guard_msgs in\n#eval num_times_all_blue [3, 2, 4, 1, 5]\n\n/--\ninfo: 1\n-/\n#guard_msgs\
  \ in\n#eval num_times_all_blue [4, 1, 2, 3]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
