"vc-description": "We are interested in collecting the triples of positive integers\
  \ ```(a, b, c)``` that fulfill the following equation:\n```python\na² + b² = c³\n\
  ```\nThe first triple with the lowest values that satisfies the equation we have\
  \ above is (2, 2 ,2).\nIn effect:\n```python\n2² + 2² = 2³\n4  + 4  = 8\n```\nThe\
  \ first pair of triples that \"shares\" the same value of ```c``` is: ```(2, 11,\
  \ 5)``` and ```(5, 10, 5)```. \n\nBoth triples share the same value of ```c``` \
  \ is ```c = 5```. \n```python\nTriple (2, 11, 5)                  Triple(5, 10,\
  \ 5)\n2² + 11² =  5³                      5² +  10²  =  5³\n4  + 121 = 125     \
  \                25  + 100   = 125\n```\nSo, we say that the value ```c``` has two\
  \ solutions because there are two triples sharing the same value of ```c```.\n\n\
  There are some values of ```c``` with no solutions.\n\nThe first value of ```c```\
  \ that have a surprising number of solutions is ```65``` with ```8``` different\
  \ triples.\n\nIn order to avoid duplications you will consider that ```a <= b```\
  \ always.\n\nMake the function ```find_abc_sumsqcube()```, that may give us the\
  \ values of c for an specific number of solutions.\n\nFor that purpose the above\
  \ required function will receive two arguments, ```c_max``` and ```num_sol```. It\
  \ is understandable that ```c_max``` will give to our function the upper limit of\
  \ ```c``` and ```num_sol```, the specific number of solutions.\n\nThe function will\
  \ output a sorted list with the values of ```c``` that have a number of solutions\
  \ equals to ```num_sol```\n\nLet's see some cases: \n```python\nfind_abc_sumsqcube(5,\
  \ 1) == [2] # below or equal to c_max = 5 we have triple the (2, 2, 2) (see above)\n\
  \nfind_abc_sumsqcube(5, 2) == [5] # now we want the values of ```c ≤ c_max``` with\
  \ two solutions (see above again)\n\nfind_abc_sumsqcube(10, 2) == [5, 10]\n\nfind_abc_sumsqcube(20,\
  \ 8) == [] # There are no values of c equal and bellow 20 having 8 solutions.\n\
  ```\n\nOur tests will have the following ranges for our two arguments:\n```python\n\
  5 ≤ c_max ≤ 1000\n1 ≤ num_sol ≤ 10\n```\nHappy coding!!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_abc_sumsqcube (c_max : Nat) (num_sol : Nat) : List Nat\
  \ := sorry\n\ntheorem find_abc_sumsqcube_sorted (c_max : Nat) (num_sol : Nat) :\n\
  \  let result := find_abc_sumsqcube c_max num_sol\n  List.Pairwise (fun x y => x\
  \ ≤ y) result := sorry"
"vc-theorems": "/--\ninfo: [2]\n-/\n#guard_msgs in\n#eval find_abc_sumsqcube 5 1\n\
  \n/--\ninfo: [5]\n-/\n#guard_msgs in\n#eval find_abc_sumsqcube 5 2\n\n/--\ninfo:\
  \ [5, 10]\n-/\n#guard_msgs in\n#eval find_abc_sumsqcube 10 2\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
