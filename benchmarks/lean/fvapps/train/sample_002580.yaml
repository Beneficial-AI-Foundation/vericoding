"vc-description": "Many years ago, Roman numbers were defined by only `4` digits:\
  \ `I, V, X, L`, which represented `1, 5, 10, 50`. These were the only digits used.\
  \ The value of a sequence was simply the sum of digits in it. For instance:\n```\n\
  IV = VI = 6\nIX = XI = 11\nXXL = LXX = XLX = 70\n```\nIt is easy to see that this\
  \ system is ambiguous, and some numbers could be written in many different ways.\
  \ Your goal is to determine how many distinct integers could be represented by exactly\
  \ `n` Roman digits grouped together. For instance:\n```Perl\nsolve(1) = 4, because\
  \ groups of 1 are [I, V, X, L]. \nsolve(2) = 10, because the groups of 2 are [II,\
  \ VI, VV, XI, XV, XX, IL, VL, XL, LL] corresponding to [2,6,10,11,15,20,51,55,60,100].\
  \ \nsolve(3) = 20, because groups of 3 start with [III, IIV, IVV, ...etc]\n```\n\
  \n`n <= 10E7`\n\nMore examples in test cases. Good luck!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve (n : Nat) : Nat := sorry \n\ntheorem solve_non_negative\
  \ (n : Nat) :\n  solve n ≥ 0 := sorry\n"
"vc-theorems": "theorem solve_linear_pattern (n : Nat) :\n  n ≥ 12 → solve n = 292\
  \ + 49 * (n - 11) := sorry\n\n\ntheorem solve_initial_sequence (n : Nat) :\n  n\
  \ < 12 → solve n = match n with\n    | 0 => 0\n    | 1 => 4  \n    | 2 => 10\n \
  \   | 3 => 20\n    | 4 => 35\n    | 5 => 56\n    | 6 => 83\n    | 7 => 116\n   \
  \ | 8 => 155\n    | 9 => 198\n    | 10 => 244\n    | 11 => 292\n    | _ => 0 :=\
  \ sorry\n\n\ntheorem solve_strictly_increasing {n : Nat} :\n  n > 0 → solve n >\
  \ solve (n-1) := sorry\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval solve 1\n\n/--\n\
  info: 83\n-/\n#guard_msgs in\n#eval solve 6\n\n/--\ninfo: 489999753\n-/\n#guard_msgs\
  \ in\n#eval solve 10000000\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
