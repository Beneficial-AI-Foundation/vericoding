"vc-description": "Make a program that takes a value (x) and returns \"Bang\" if the\
  \ number is divisible by 3, \"Boom\" if it is divisible by 5, \"BangBoom\" if it\
  \ divisible by 3 and 5, and \"Miss\" if it isn't divisible by any of them.\nNote:\
  \ Your program should only return one value\n\nEx: Input: 105 --> Output: \"BangBoom\"\
  \nEx: Input: 9 --> Output: \"Bang\"\nEx:Input: 25 --> Output: \"Boom\""
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def multiple (n : Int) : String := sorry \n\ntheorem multiple_output_valid\
  \ (x : Int) : \n  multiple x = \"Bang\" ∨ multiple x = \"Boom\" ∨ multiple x = \"\
  BangBoom\" ∨ multiple x = \"Miss\" := \nsorry\n"
"vc-theorems": "theorem multiple_divisible_by_both (x : Int) : \n  x % 3 = 0 ∧ x %\
  \ 5 = 0 → multiple x = \"BangBoom\" :=\nsorry\n\n\ntheorem multiple_divisible_by_3\
  \ (x : Int) :\n  x % 3 = 0 ∧ x % 5 ≠ 0 → multiple x = \"Bang\" :=\nsorry\n\n\ntheorem\
  \ multiple_divisible_by_5 (x : Int) :\n  x % 3 ≠ 0 ∧ x % 5 = 0 → multiple x = \"\
  Boom\" :=\nsorry\n\n\ntheorem multiple_not_divisible (x : Int) :\n  x % 3 ≠ 0 ∧\
  \ x % 5 ≠ 0 → multiple x = \"Miss\" :=\nsorry\n\n\ntheorem multiple_deterministic\
  \ (x : Int) :\n  multiple x = multiple x :=\nsorry\n\n\ntheorem multiple_modulo_equivalence\
  \ (x y : Int) :\n  x % 3 = y % 3 → x % 5 = y % 5 → multiple x = multiple y :=\n\
  sorry\n\n/--\ninfo: 'BangBoom'\n-/\n#guard_msgs in\n#eval multiple 30\n\n/--\ninfo:\
  \ 'Bang'\n-/\n#guard_msgs in\n#eval multiple 9\n\n/--\ninfo: 'Miss'\n-/\n#guard_msgs\
  \ in\n#eval multiple 98\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
