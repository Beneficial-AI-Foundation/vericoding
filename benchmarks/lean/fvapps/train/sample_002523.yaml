"vc-description": "Kate and Michael want to buy a pizza and share it. Depending on\
  \ the price of the pizza, they are going to divide the costs:\n\n* If the pizza\
  \ is less than €5,- Michael invites Kate, so Michael pays the full price.\n* Otherwise\
  \ Kate will contribute 1/3 of the price, but no more than €10 (she's broke :-) and\
  \ Michael pays the rest.\n\nHow much is Michael going to pay? Calculate the amount\
  \ with two decimals, if necessary."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def michael_pays (cost : Float) : Float := sorry\n\ntheorem michael_pays_is_nonnegative\
  \ (cost : Float) : \n  michael_pays cost ≥ 0 := sorry\n"
"vc-theorems": "theorem michael_pays_less_than_cost (cost : Float) : \n  michael_pays\
  \ cost ≤ cost := sorry\n\n-- Note: Removing decimal places theorem since Float doesn't\
  \ support this directly\n\n\ntheorem michael_pays_full_under_five (cost : Float)\
  \ :\n  cost < 5 → michael_pays cost = cost := sorry\n\n\ntheorem michael_pays_kates_share_capped\
  \ (cost : Float) :\n  let kate_share := min (cost/3) 10\n  Float.abs (michael_pays\
  \ cost - (cost - kate_share)) < 0.0001 := sorry\n\n/--\ninfo: 4.99\n-/\n#guard_msgs\
  \ in\n#eval michael_pays 4.99\n\n/--\ninfo: 10.0\n-/\n#guard_msgs in\n#eval michael_pays\
  \ 15\n\n/--\ninfo: 70.0\n-/\n#guard_msgs in\n#eval michael_pays 80\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
