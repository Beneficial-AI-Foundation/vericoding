"vc-description": "## Story\n\nThere are four warriors, they need to go through a\
  \ dark tunnel. Tunnel is very narrow, every time only can let two warriors through,\
  \ and there are lot of dangerous traps. Fortunately, they have a lamp that can illuminate\
  \ the tunnel to avoid being trapped by the trap.\n\nIn order to pass this tunnel,\
  \ they need five steps:\n\n1. Two people go through the tunnel with the lamp\n2.\
  \ And then one people come back with the lamp\n3. And then two people go through\
  \ the tunnel with the lamp\n4. And then one people come back with the lamp\n5. And\
  \ then two people go through the tunnel with the lamp\n \nEach warrior has his own\
  \ walking speed, we need to calculate the shortest time they have to cross the tunnel.\n\
  \ \nFor example:\n \nFour warriors is `a,b,c,d`. Their speed are `[3,4,5,6]`. It\
  \ means they need 3 minutes, 4 minutes, 5 minutes and 6 minutes to cross the tunnel.\
  \ The shortest crossing time should be 21 minutes, the method is as follows:\n \n\
  ```\na and b go through the tunnel  ---> Spend 4 minutes\n(Time spent should be\
  \ calculated by the person who is slow)\na come back                    ---> Spend\
  \ 3 minutes\na and c go through the tunnel  ---> Spend 5 minutes\na come back  \
  \                  ---> Spend 3 minutes\na and d go through the tunnel  ---> Spend\
  \ 6 minutes\n```\nDo you have any other better way?\n \n## Task\nComplete function\
  \ `shortestTime()` that accepts 1 argument: `speed` that are the spent time of four\
  \ warriors. Returns the shortest time that all warriors go through the tunnel.\n\
  \ \n**Note: The method in example above is not always the best way.**\n\n## Example"
"vc-preamble": "import Imports.AllImports\n\ndef shortest_time (speeds: List Int)\
  \ : Int :=\n  sorry\n\n\ndef List.sorted (l: List Int) : List Int :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isPermutation (l1 l2: List Int) : Bool :=\n  sorry\n"
"vc-theorems": "theorem shortest_time_positive (speeds: List Int)\n  (h: speeds.length\
  \ = 4)\n  (h2: ∀ x ∈ speeds, x ≥ 1) : \n  shortest_time speeds > 0 :=\n  sorry\n\
  \n\ntheorem shortest_time_min_bound (speeds: List Int)\n  (h: speeds.length = 4)\n\
  \  (h2: ∀ x ∈ speeds, x ≥ 1) :\n  let sorted := speeds.sorted\n  shortest_time speeds\
  \ ≥ sorted[0]! + sorted[1]! + sorted[3]! :=\n  sorry\n\n\ntheorem shortest_time_two_crossings\
  \ (speeds: List Int)\n  (h: speeds.length = 4)\n  (h2: ∀ x ∈ speeds, x ≥ 1) :\n\
  \  let sorted := speeds.sorted\n  shortest_time speeds ≥ 2 * (sorted[0]! + sorted[1]!)\
  \ :=\n  sorry\n\n\ntheorem shortest_time_order_invariant (speeds1 speeds2: List\
  \ Int)\n  (h1: speeds1.length = 4)\n  (h2: speeds2.length = 4)\n  (h3: ∀ x ∈ speeds1,\
  \ x ≥ 1)\n  (h4: ∀ x ∈ speeds2, x ≥ 1)\n  (h5: isPermutation speeds1 speeds2) :\n\
  \  shortest_time speeds1 = shortest_time speeds2 :=\n  sorry\n\n\ntheorem shortest_time_monotonic\
  \ (speeds: List Int)\n  (h: speeds.length = 4)\n  (h2: ∀ x ∈ speeds, x ≥ 1)\n  (i:\
  \ Nat)\n  (h3: i < speeds.length) :\n  let increased := speeds.set i (speeds[i]!\
  \ + 1)\n  shortest_time increased ≥ shortest_time speeds :=\n  sorry\n\n/--\ninfo:\
  \ 21\n-/\n#guard_msgs in\n#eval shortest_time [3, 4, 5, 6]\n\n/--\ninfo: 41\n-/\n\
  #guard_msgs in\n#eval shortest_time [3, 7, 10, 18]\n\n/--\ninfo: 27\n-/\n#guard_msgs\
  \ in\n#eval shortest_time [5, 5, 6, 7]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
