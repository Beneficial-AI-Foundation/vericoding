"vc-description": "We are given an array A of N lowercase letter strings, all of the\
  \ same length.\nNow, we may choose any set of deletion indices, and for each string,\
  \ we delete all the characters in those indices.\nFor example, if we have an array\
  \ A = [\"abcdef\",\"uvwxyz\"] and deletion indices {0, 2, 3}, then the final array\
  \ after deletions is [\"bef\", \"vyz\"], and the remaining columns of A are [\"\
  b\",\"v\"], [\"e\",\"y\"], and [\"f\",\"z\"].  (Formally, the c-th column is [A[0][c],\
  \ A[1][c], ..., A[A.length-1][c]]).\nSuppose we chose a set of deletion indices\
  \ D such that after deletions, each remaining column in A is in non-decreasing sorted\
  \ order.\nReturn the minimum possible value of D.length.\n \nExample 1:\nInput:\
  \ A = [\"cba\",\"daf\",\"ghi\"]\nOutput: 1\nExplanation: \nAfter choosing D = {1},\
  \ each column [\"c\",\"d\",\"g\"] and [\"a\",\"f\",\"i\"] are in non-decreasing\
  \ sorted order.\nIf we chose D = {}, then a column [\"b\",\"a\",\"h\"] would not\
  \ be in non-decreasing sorted order.\n\nExample 2:\nInput: A = [\"a\",\"b\"]\nOutput:\
  \ 0\nExplanation: D = {}\n\nExample 3:\nInput: A = [\"zyx\",\"wvu\",\"tsr\"]\nOutput:\
  \ 3\nExplanation: D = {0, 1, 2}\n\n \nConstraints:\n\n1 <= A.length <= 100\n1 <=\
  \ A[i].length <= 1000"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def min_deletion_size (strings : List String) : Nat :=\n  sorry\n"
"vc-theorems": "theorem min_deletion_sorted_cols_zero \n  (strings : List String)\n\
  \  (h1 : strings.length > 1)\n  (h2 : ∀ (i j : Nat), i < strings.length → j < strings.length\
  \ → \n    strings[i]!.length = strings[j]!.length)\n  (h3 : ∀ (col : Nat) (hcol:\
  \ col < strings[0]!.length), \n    ∀ (i j : Nat) (hi : i < strings.length) (hj :\
  \ j < strings.length), i < j →\n      (strings[i]!.data.get ⟨col, by {\n       \
  \ rw [h2 0 i (by {exact Nat.zero_lt_of_lt hi}) hi] at hcol\n        exact hcol\n\
  \      }⟩) ≤ (strings[j]!.data.get ⟨col, by {\n        rw [h2 0 j (by {exact Nat.zero_lt_of_lt\
  \ hj}) hj] at hcol\n        exact hcol\n      }⟩)) :\n  min_deletion_size strings\
  \ = 0 :=\n  sorry\n\n\ntheorem min_deletion_size_bounds\n  (strings : List String)\
  \  \n  (h1 : strings.length > 1)\n  (h2 : ∀ (i j : Nat), i < strings.length → j\
  \ < strings.length → \n    strings[i]!.length = strings[j]!.length) :\n  ∃ n, min_deletion_size\
  \ strings = n ∧ \n    0 ≤ n ∧ n ≤ strings[0]!.length :=\n  sorry\n\n/--\ninfo: expected1\n\
  -/\n#guard_msgs in\n#eval min_deletion_size [\"cba\", \"daf\", \"ghi\"]\n\n/--\n\
  info: expected2\n-/\n#guard_msgs in\n#eval min_deletion_size [\"a\", \"b\"]\n\n\
  /--\ninfo: expected3\n-/\n#guard_msgs in\n#eval min_deletion_size [\"zyx\", \"wvu\"\
  , \"tsr\"]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
