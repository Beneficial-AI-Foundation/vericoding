"vc-description": "Appy and Chef are participating in a contest. There are $N$ problems\
  \ in this contest; each problem has a unique problem code between $1$ and $N$ inclusive.\
  \ Appy and Chef decided to split the problems to solve between them ― Appy should\
  \ solve the problems whose problem codes are divisible by $A$ but not divisible\
  \ by $B$, and Chef should solve the problems whose problem codes are divisible by\
  \ $B$ but not divisible by $A$ (they decided to not solve the problems whose codes\
  \ are divisible by both $A$ and $B$).\nTo win, it is necessary to solve at least\
  \ $K$ problems. You have to tell Appy whether they are going to win or lose.\n\n\
  -----Input-----\n- The first line of the input contains a single integer $T$ denoting\
  \ the number of test cases. The description of $T$ test cases follows.\n- The first\
  \ and only line of each test case contains four space-separated integers $N$, $A$,\
  \ $B$ and $K$.\n\n-----Output-----\nFor each test case, print a single line containing\
  \ the string \"Win\" if they can solve at least $K$ problems or \"Lose\" otherwise\
  \ (without quotes).\n\n-----Constraints-----\n- $1 \\le T \\le 15$\n- $1 \\le K\
  \ \\le N \\le 10^{18}$\n- $1 \\le A, B \\le 10^9$\n\n-----Subtasks-----\nSubtask\
  \ #1 (15 points):\n- $1 \\le T \\le 15$\n- $1 \\le K \\le N \\le 10^6$\n- $1 \\\
  le A, B \\le 10^3$\nSubtask #2 (85 points): original constraints\n\n-----Example\
  \ Input-----\n1\n6 2 3 3\n\n-----Example Output-----\nWin\n\n-----Explanation-----\n\
  Example case 1: Appy is solving the problems with codes $2$ and $4$, Chef is solving\
  \ the problem with code $3$. Nobody is solving problem $6$, since $6$ is divisible\
  \ by both $2$ and $3$. Therefore, they can solve $3$ problems and win."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def check_win (n a b k : Nat) : String := sorry\n\ntheorem check_win_returns_valid_result\
  \ \n  (n a b k : Nat) \n  (h1 : 0 < n) (h2 : a ≤ n) (h3 : b ≤ n) (h4 : k ≤ n) (h5\
  \ : 0 < a) (h6 : 0 < b) :\n  check_win n a b k = \"Win\" ∨ check_win n a b k = \"\
  Lose\" := sorry\n"
"vc-theorems": "theorem check_win_is_deterministic \n  (n a b k : Nat) \n  (h1 : 0\
  \ < n) (h2 : a ≤ n) (h3 : b ≤ n) (h4 : k ≤ n) (h5 : 0 < a) (h6 : 0 < b) :\n  check_win\
  \ n a b k = check_win n a b k := sorry\n\n\ntheorem check_win_same_divisor \n  (n\
  \ a : Nat) \n  (h1 : 0 < n) (h2 : 0 < a) (h3 : a ≤ n) :\n  check_win n a a 1 = \"\
  Lose\" := sorry\n\n\ntheorem check_win_symmetry \n  (n a b k : Nat)\n  (h1 : 0 <\
  \ n) (h2 : a ≤ n) (h3 : b ≤ n) (h4 : k ≤ n) (h5 : 0 < a) (h6 : 0 < b) :\n  check_win\
  \ n a b k = check_win n b a k := sorry\n\n\ntheorem check_win_k_zero \n  (n a b\
  \ : Nat)\n  (h1 : 0 < n) (h2 : a ≤ n) (h3 : b ≤ n) (h4 : 0 < a) (h5 : 0 < b) :\n\
  \  check_win n a b 0 = \"Win\" := sorry\n\n\ntheorem check_win_k_too_large \n  (n\
  \ a b : Nat)\n  (h1 : 0 < n) (h2 : a ≤ n) (h3 : b ≤ n) (h4 : 0 < a) (h5 : 0 < b)\
  \ :\n  check_win n a b (n + 1) = \"Lose\" := sorry\n\n/--\ninfo: 'Win'\n-/\n#guard_msgs\
  \ in\n#eval check_win 6 2 3 3\n\n/--\ninfo: 'Win'\n-/\n#guard_msgs in\n#eval check_win\
  \ 10 2 3 4\n\n/--\ninfo: 'Lose'\n-/\n#guard_msgs in\n#eval check_win 5 2 2 3\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
