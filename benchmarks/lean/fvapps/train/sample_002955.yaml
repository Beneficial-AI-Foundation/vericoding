"vc-description": "Background\nThere is a message that is circulating via public media\
  \ that claims a reader can easily read a message where the inner letters of each\
  \ words is scrambled, as long as the first and last letters remain the same and\
  \ the word contains all the letters.\n\nAnother example shows that it is quite difficult\
  \ to read the text where all the letters are reversed rather than scrambled.\n\n\
  In this kata we will make a generator that generates text in a similar pattern,\
  \ but instead of scrambled or reversed, ours will be sorted alphabetically\n\nRequirement\n\
  return a string where:\n1) the first and last characters remain in original place\
  \ for each word\n2) characters between the first and last characters must be sorted\
  \ alphabetically\n3) punctuation should remain at the same place as it started,\
  \ for example: shan't -> sahn't\nAssumptions\n1) words are seperated by single spaces\n\
  2) only spaces separate words, special characters do not,  for example: tik-tak\
  \ -> tai-ktk\n3) special characters do not take the position of the non special\
  \ characters, for example: -dcba  ->  -dbca\n4) for this kata puctuation is limited\
  \ to 4 characters: hyphen(-), apostrophe('), comma(,) and period(.) \n5) ignore\
  \ capitalisation\n\n\nfor reference: http://en.wikipedia.org/wiki/Typoglycemia"
"vc-preamble": "import Imports.AllImports\n\ndef scramble_words (s : String) : String\
  \ := sorry\n\ndef is_alpha (c : Char) : Bool := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isOrdered (s : List Char) : Prop :=\n  ∀ i j, i < j → j < s.length\
  \ → s[i]! ≤ s[j]!\n"
"vc-theorems": "theorem scramble_length_preserved (s : String) :\n  String.length\
  \ (scramble_words s) = String.length s := sorry\n\n\ntheorem first_last_letters_preserved\
  \ (s : String) (word : String) (h : word.length > 1) \n    (pos_start : String.Pos)\
  \ (pos_end : String.Pos) :\n  is_alpha (word.get pos_start) → \n  is_alpha (word.get\
  \ pos_end) →\n  (scramble_words word).get pos_start = word.get pos_start ∧ \n  (scramble_words\
  \ word).get pos_end = word.get pos_end := sorry\n\n\ntheorem middle_chars_sorted\
  \ (s : String) (h : s.length > 2)\n    (pos_start : String.Pos) (pos_end : String.Pos)\
  \ :\n  is_alpha (s.get pos_start) →\n  is_alpha (s.get pos_end) →\n  let middle\
  \ := (scramble_words s).data.drop 1 |>.take (s.length - 2)\n  isOrdered middle :=\
  \ sorry\n\n\ntheorem non_alpha_chars_preserved (s : String) :\n  s.data.filter (fun\
  \ c => ¬(is_alpha c)) = \n  (scramble_words s).data.filter (fun c => ¬(is_alpha\
  \ c)) := sorry\n\n/--\ninfo: 'paefilnoorsss'\n-/\n#guard_msgs in\n#eval scramble_words\
  \ \"professionals\"\n\n/--\ninfo: 'caac-dinrrryg'\n-/\n#guard_msgs in\n#eval scramble_words\
  \ \"card-carrying\"\n\n/--\ninfo: \"you've gotta dacne\"\n-/\n#guard_msgs in\n#eval\
  \ scramble_words \"you\"ve gotta dance\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
