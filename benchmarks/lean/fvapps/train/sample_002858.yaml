"vc-description": "Reducing Problems - Bug Fixing #8\n\nOh no! Timmy's reduce is causing\
  \ problems, Timmy's goal is to calculate the two teams scores and return the winner\
  \ but timmy has gotten confused and sometimes teams don't enter their scores, total\
  \ the scores out of 3! Help timmy fix his program!\n\nReturn true if team 1 wins\
  \ or false if team 2 wins!"
"vc-preamble": "import Imports.AllImports\n\ndef List.sum (l : List Nat) : Nat :=\n\
  \  match l with\n  | [] => 0\n  | h :: t => h + List.sum t\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calculate_total (team1 team2 : List Nat) : Bool :=\n  sorry\n"
"vc-theorems": "theorem calculate_total_sum_comparison {team1 team2 : List Nat} \n\
  \  (h1 : team1.length = 3 ∨ team1 = []) \n  (h2 : team2.length = 3 ∨ team2 = [])\
  \ :\n  calculate_total team1 team2 = (List.sum (if team1 = [] then [0,0,0] else\
  \ team1) > \n                                List.sum (if team2 = [] then [0,0,0]\
  \ else team2)) :=\nsorry\n\n\ntheorem calculate_total_self {team : List Nat} \n\
  \  (h : team.length = 3 ∨ team = []) :\n  calculate_total team team = false :=\n\
  sorry\n\n\ntheorem calculate_total_empty {team : List Nat} \n  (h : team.length\
  \ = 3) :\n  (List.sum team > 0 → calculate_total team [] = true) ∧ \n  (List.sum\
  \ team > 0 → calculate_total [] team = false) ∧\n  calculate_total [] [] = false\
  \ :=\nsorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval calculate_total [1, 2,\
  \ 2] [1, 0, 0]\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval calculate_total [6,\
  \ 45, 1] [1, 55, 0]\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval calculate_total\
  \ [57, 2, 1] []\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
