"vc-description": "Recently Chef learned about Longest Increasing Subsequence. To\
  \ be precise, he means longest strictly increasing subsequence, when he talks of\
  \ longest increasing subsequence.  To check his understanding, he took his favorite\
  \ n-digit number and for each of its n digits, he computed the length of the longest\
  \ increasing subsequence of digits ending with that digit. Then he stored these\
  \ lengths in an array named LIS.\nFor example, let us say that Chef's favourite\
  \ 4-digit number is 1531, then the LIS array would be [1, 2, 2, 1]. The length of\
  \ longest increasing subsequence ending at first digit is 1 (the digit 1 itself)\
  \ and at the second digit is 2 ([1, 5]), at third digit is also 2 ([1, 3]), and\
  \ at the 4th digit is 1 (the digit 1 itself).\nNow Chef wants to give you a challenge.\
  \ He has a valid LIS array with him, and wants you to find any n-digit number having\
  \ exactly the same LIS array? You are guaranteed that Chef's LIS array is valid,\
  \ i.e. there exists at least one n-digit number corresponding to the given LIS array.\n\
  \n-----Input-----\nThe first line of the input contains an integer T denoting the\
  \ number of test cases. \nFor each test case, the first line contains an integer\
  \ n denoting the number of digits in Chef's favourite number.\nThe second line will\
  \ contain n space separated integers denoting LIS array, i.e. LIS1, LIS2, ..., LISn.\n\
  \n-----Output-----\nFor each test case, output a single n-digit number (without\
  \ leading zeroes) having exactly the given LIS array. If there are multiple n-digit\
  \ numbers satisfying this requirement, any of them will be accepted.\n\n-----Constraints-----\n\
  - 1 ≤ T ≤ 30 000\n- 1 ≤ n ≤ 9\n- It is guaranteed that at least one n-digit number\
  \ having the given LIS array exists\n\n-----Example-----\nInput:\n5\n1 \n1\n2 \n\
  1 2\n2 \n1 1\n4\n1 2 2 1\n7 \n1 2 2 1 3 2 4\n\nOutput:\n7\n36\n54\n1531\n1730418\n\
  \n-----Explanation-----\nExample case 1. All one-digit numbers have the same LIS\
  \ array, so any answer from 0 to 9 will be accepted.\nExample cases 2 & 3. For a\
  \ two digit number we always have LIS1 = 1, but the value of LIS2 depends on whether\
  \ the first digit is strictly less than the second one. If this is the case (like\
  \ for number 36), LIS2 = 2, otherwise (like for numbers 54 or 77) the values of\
  \ LIS2 is 1.\nExample case 4. This has already been explained in the problem statement.\n\
  Example case 5. 7-digit number 1730418 has LIS array [1, 2, 2, 1, 3, 2, 4]:\nindexLISlength117304181217304182317304182417304181517304183617304182717304184"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_lis (n : Nat) (arr : List String) : String := sorry\n\
  \ntheorem single_digit_returns_valid_str (n : Nat) (arr : List String) :\n  n =\
  \ 1 → arr = [\"1\"] → \n  let result := solve_lis n arr\n  result.length = 1 ∧ result.all\
  \ Char.isDigit := sorry\n"
"vc-theorems": "theorem input_array_matches_length (n : Nat) (arr : List String) :\n\
  \  n = arr.length →\n  (∀ s ∈ arr, s.length = 1 ∧ s ∈ [\"1\", \"2\", \"3\", \"4\"\
  ]) →\n  let result := solve_lis n arr\n  result.all Char.isDigit := sorry\n\n\n\
  theorem length_two_returns_valid_str (n : Nat) (arr : List String) :\n  n = 2 →\n\
  \  (arr = [\"1\", \"1\"] ∨ arr = [\"1\", \"2\"]) →\n  let result := solve_lis n\
  \ arr\n  result.length = 2 ∧ result ∈ [\"54\", \"36\"] := sorry\n\n\ntheorem special_cases\
  \ :\n  solve_lis 4 [\"1\", \"2\", \"2\", \"1\"] = \"1531\" ∧\n  solve_lis 7 [\"\
  1\", \"2\", \"2\", \"1\", \"3\", \"2\", \"4\"] = \"1730418\" := sorry\n\n/--\ninfo:\
  \ '7'\n-/\n#guard_msgs in\n#eval solve_lis 1 [\"1\"]\n\n/--\ninfo: '36'\n-/\n#guard_msgs\
  \ in\n#eval solve_lis 2 [\"1\", \"2\"]\n\n/--\ninfo: '1531'\n-/\n#guard_msgs in\n\
  #eval solve_lis 4 [\"1\", \"2\", \"2\", \"1\"]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
