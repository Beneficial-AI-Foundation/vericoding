"vc-description": "Indian National Olympiad in Informatics 2013\nCalvin wakes up early\
  \ one morning and finds that all his friends in the hostel are asleep. To amuse\
  \ himself, he decides to play the following game : he draws a sequence of N squares\
  \ on the ground, numbered 1 to N, and writes an integer in each square. He starts\
  \ at square k (1 ≤ k ≤ N). The game consists of one forward phase followed by one\
  \ backward phase.\n- In the forward phase, Calvin makes zero or more moves of the\
  \ following type : if his current position is p, he can jump to p+1 or p+2 as long\
  \ as he stays within the N squares.\n- In the backward phase, Calvin makes zero\
  \ or more moves of the following type : if his current position is p, he can jump\
  \ to p−1 or p−2 as long as he stays within the N squares.\nHe plays such that he\
  \ finally ends up at square 1, and then he stops. He starts with a score of 0, and\
  \ each time he jumps from square i to square j, he adds the integer written in square\
  \ j to his score. Find the maximum score Calvin can obtain by playing this game.\
  \ Recall that Calvin must start at square k and end at square 1. The integer on\
  \ the square where he starts is not included in his score.\nFor example, suppose\
  \ N = 5 and the numbers in squares are 5, 3, −2, 1, 1. If k = 2, Calvin starts on\
  \ the second square. He can make a forward move to square 4, another to square 5,\
  \ a backward move to square 4, another to square 2, and another to square 1. His\
  \ total score is 1+1+1+3+5 = 11. You can check that this is the maximum score possible.\n\
  \n-----Input format-----\n• Line 1 : Two space-separated integers, N and k, with\
  \ 1 ≤ k ≤ N.\n• Line 2 : A space-separated sequence of N integers, the numbers in\
  \ squares 1, 2 . . . , N .\n\n-----Output format-----\nA single line with a single\
  \ integer, the maximum score Calvin can obtain by playing the game.\n\n-----Test\
  \ Data-----\nThe testdata is grouped into two subtasks with the following constraints\
  \ on the inputs.\n• Subtask 1 [30 points] : 1 ≤ N ≤ 3000.\n• Subtask 2 [70 points]\
  \ : 1 ≤ N ≤ 106.\nIn all subtasks, the number in each square is between −1000 and\
  \ 1000 inclusive.\n\n-----Example-----\nHere is the sample input and output corresponding\
  \ to the example above.\n\n-----Sample input-----\n5 2\n5 3 -2 1 1\n\n-----Sample\
  \ output-----\n11\n\nNote: Your program should not print anything other than what\
  \ is specified in the output format. Please remove all diagnostic print statements\
  \ before making your final submission. A program with extraneous output will be\
  \ treated as incorrect!"
"vc-preamble": "import Imports.AllImports\n\ndef find_max_score (N : Nat) (K : Nat)\
  \ (A : List Int) : Int :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def max_int (a b : Int) : Int :=\n  if a ≥ b then a else b\n"
"vc-theorems": "theorem find_max_score_k_bounds {A : List Int} {K : Nat} {N : Nat}\
  \ \n  (h1 : A.length = N)\n  (h2 : N > 0)\n  (h3 : K ≤ N)\n  (h4 : ∀ x ∈ A, -1000\
  \ ≤ x ∧ x ≤ 1000) :\n  let result := find_max_score N K A\n  let sorted_tail :=\
  \ List.take K (List.reverse (List.mergeSort (. ≤ .) A))\n  let sorted_suffix_sum\
  \ := List.foldl (· + ·) 0 sorted_tail\n  let positive_sum := List.foldl (· + ·)\
  \ 0 (List.filter (λ x => x > 0) A)\n  sorted_suffix_sum ≤ result ∧ result ≤ positive_sum\
  \ :=\n  sorry\n\n\ntheorem find_max_score_k_equals_n {A : List Int} {N : Nat}\n\
  \  (h1 : A.length = N)\n  (h2 : N > 0)\n  (h3 : ∀ x ∈ A, -1000 ≤ x ∧ x ≤ 1000) :\n\
  \  find_max_score N N A = List.foldl (· + ·) 0 A :=\n  sorry\n\n\ntheorem find_max_score_all_positive\
  \ {A : List Int} {N : Nat}\n  (h1 : A.length = N)\n  (h2 : N > 0)\n  (h3 : ∀ x ∈\
  \ A, 0 ≤ x ∧ x ≤ 1000) :\n  let K := if N > 1 then N / 2 else 1\n  find_max_score\
  \ N K A = List.foldl (· + ·) 0 A :=\n  sorry\n\n\ntheorem find_max_score_all_negative\
  \ {A : List Int} {N : Nat}\n  (h1 : A.length = N)\n  (h2 : N > 0)\n  (h3 : ∀ x ∈\
  \ A, -1000 ≤ x ∧ x < 0) :\n  let K := if N > 1 then N / 2 else 1\n  let sliding_sums\
  \ := List.range (N - K + 1) |>.map (λ i => List.foldl (· + ·) 0 (List.take K (List.drop\
  \ i A)))\n  find_max_score N K A = sliding_sums.foldl max_int (sliding_sums.head!)\
  \ :=\n  sorry\n\n/--\ninfo: 10\n-/\n#guard_msgs in\n#eval find_max_score 5 2 [5,\
  \ 3, -2, 1, 1]\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval find_max_score 5 2 [1,\
  \ 2, 3, -1, -2]\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval find_max_score 3 1 [3,\
  \ 2, 1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
