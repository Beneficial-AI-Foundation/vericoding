"vc-description": "Lyra Belacqua is a very gifted girl. She is one of a very small\
  \ set of people capable of reading an alethiometer, more commonly known as The Golden\
  \ Compass. It has one specific use: to tell the truth. The name in fact, is derived\
  \ from \"Aletheia\" meaning truth, and \"-ometer\", meaning \"measuring device\"\
  .\n\nThe alethiometer had four needles, out of which the user would direct three\
  \ of them to lie over symbols on the face of the device to ask a question. The fourth\
  \ needle then swung into action and pointed to various symbols one after another,\
  \ thus telling the answer.\n\nFor this problem, consider the alethiometer consisting\
  \ of symbols : digits '0'-'9' and letters 'A'-'Z'. Learned scholars were debating\
  \ the age of the Universe, and they requested Lyra to find out the age from the\
  \ alethiometer. Having asked the question, the fourth needle started spouting out\
  \ symbols, which Lyra quickly recorded. In that long string of characters, she knows\
  \ that some substring corresponds to the age of the Universe. She also knows that\
  \ the alethiometer could have wrongly pointed out atmost one digit (0-9) as a letter\
  \ (A-Z). She then wonders what is the maximum possible age of the Universe.\n\n\
  Given the set of symbols the alethiometer pointed out, help her find the maximum\
  \ age of the Universe, which could correspond to a substring of the original string\
  \ with atmost one letter changed.\n\nNote: We consider a substring to be a contiguous\
  \ part of the string S \n\nAlso, the alethiometer wrongly reports only a letter.\
  \ All the digits remain as they are.\n\n-----Input-----\n\nEach input consists of\
  \ a single string S which is what Lyra recorded from the fourth needle's pointing.\n\
  \n-----Output-----\n\nOutput one number, the maximum possible answer.\n\n-----Constraints-----\n\
  -  1  ≤ |S|  ≤ 1,000\n-  S will only contain digits 0-9 and uppercase Latin letters.\
  \ \n\n-----Example-----\nInput1:\n06454\n\nInput2:\nC0D3C43F\n\nOutput1:\n6454\n\
  \nOutput2:\n3943\n\n-----Explanation-----\n\nIn the first example, there is no choice\
  \ as to what the number can be. It has to be 6,454.\n\nIn the second example, there\
  \ are a total of 41 possible strings (one for the original, and 10 for changing\
  \ each letter). You can verify that the maximum number as a substring is got by\
  \ making the string \"C0D3943F\"."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def process_string (s : String) : Nat :=\n  sorry\n"
"vc-theorems": "theorem no_digits_returns_length \n  (s : String)\n  (h : ∀ c ∈ s.data,\
  \ c.isUpper) :\n  process_string s = s.length := by sorry\n\n\ntheorem single_digit\n\
  \  (n : Nat)\n  (h : n < 10) :\n  process_string (toString n) = n := by sorry\n\n\
  \ntheorem two_digits\n  (n : Nat) \n  (h1 : n ≥ 10)\n  (h2 : n < 100) :\n  process_string\
  \ (toString n) = n := by sorry\n\n\ntheorem many_digits\n  (n : Nat)\n  (h1 : n\
  \ ≥ 100)\n  (h2 : n < 10000) :\n  process_string (toString n) = n := by sorry\n\n\
  \ntheorem mixed_string\n  (s : String)\n  (n : Nat)\n  (h1 : ∀ c ∈ s.data, c.isUpper)\n\
  \  (h2 : n > 0)\n  (h3 : n < 1000000) :\n  process_string (s ++ toString n) = n\
  \ := by sorry\n\n\ntheorem special_case :\n  process_string \"C0D3C43F\" = 3943\
  \ := by sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
