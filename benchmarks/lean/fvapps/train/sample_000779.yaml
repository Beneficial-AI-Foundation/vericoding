"vc-description": "One upon a time there were three best friends Abhinav, Harsh, and\
  \ Akash decided to form a \nteam and take part in ICPC from KIIT. Participants are\
  \ usually offered several problems during \nthe programming contest. Long before\
  \ the start, the friends decided that they will implement a \nproblem if at least\
  \ two of them are sure about the solution. Otherwise, friends won't write the \n\
  problem's solution. \nThis contest offers $N$ problems to the participants. For\
  \ each problem we know, which friend is \nsure about the solution. Help the KIITians\
  \ find the number of problems for which they will write a \nsolution. \nThen n lines\
  \ contain three integers each, each integer is either 0 or 1. If the first number\
  \ in the \nline equals 1, then Abhinav is sure about the problem's solution, otherwise,\
  \ he isn't sure. The \nsecond number shows Harsh's view on the solution, the third\
  \ number shows Akash's view. The \nnumbers on the lines are \n\n-----Input:-----\n\
  - A single integer will contain $N$, number of problems. \n\n-----Output:-----\n\
  Print a single integer — the number of problems the friends will implement on the\
  \ contest. \n\n-----Constraints-----\n- $1 \\leq N \\leq 1000$ \n\n-----Sample Input:-----\n\
  3\n\n1 1 0\n\n1 1 1\n\n1 0 0   \n\n-----Sample Output:-----\n2  \n\n-----EXPLANATION:-----\n\
  In the first sample, Abhinav and Harsh are sure that they know how to solve the\
  \ first problem \nand all three of them know how to solve the second problem. That\
  \ means that they will write \nsolutions for these problems. Only Abhinav is sure\
  \ about the solution for the third problem, but \nthat isn't enough, so the group\
  \ won't take it."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_solved_problems (N: Nat) (confidence_matrix: List (List\
  \ Nat)) : Nat :=\nsorry\n"
"vc-theorems": "theorem count_solved_problems_non_negative {N: Nat} {confidence_matrix:\
  \ List (List Nat)} :\n  count_solved_problems N confidence_matrix ≥ 0 :=\nsorry\n\
  \n\ntheorem count_solved_problems_upper_bound {N: Nat} {confidence_matrix: List\
  \ (List Nat)} :\n  count_solved_problems N confidence_matrix ≤ confidence_matrix.length\
  \ :=\nsorry\n\n\ntheorem count_solved_problems_matches_confident {N: Nat} {confidence_matrix:\
  \ List (List Nat)} :\n  count_solved_problems N confidence_matrix = \n    (confidence_matrix.filter\
  \ (fun conf => (conf.foldl (· + ·) 0) ≥ 2)).length :=\nsorry\n\n\n\n\n\n\ntheorem\
  \ count_solved_problems_empty {N: Nat} :\n  count_solved_problems N [] = 0 :=\n\
  sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval count_solved_problems 3 [[1, 1,\
  \ 0], [1, 1, 1], [1, 0, 0]]\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval count_solved_problems\
  \ 4 [[1, 1, 1], [0, 0, 0], [1, 1, 0], [0, 1, 1]]\n\n/--\ninfo: 0\n-/\n#guard_msgs\
  \ in\n#eval count_solved_problems 2 [[0, 0, 0], [1, 0, 0]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
