"vc-description": "You are a professional robber planning to rob houses along a street.\
  \ Each house has a certain amount of money stashed. All houses at this place are\
  \ arranged in a circle. That means the first house is the neighbor of the last one.\
  \ Meanwhile, adjacent houses have security system connected and it will automatically\
  \ contact the police if two adjacent houses were broken into on the same night.\n\
  \nGiven a list of non-negative integers representing the amount of money of each\
  \ house, determine the maximum amount of money you can rob tonight without alerting\
  \ the police.\n\nExample 1:\n\n\nInput: [2,3,2]\nOutput: 3\nExplanation: You cannot\
  \ rob house 1 (money = 2) and then rob house 3 (money = 2),\n             because\
  \ they are adjacent houses.\n\n\nExample 2:\n\n\nInput: [1,2,3,1]\nOutput: 4\nExplanation:\
  \ Rob house 1 (money = 1) and then rob house 3 (money = 3).\n             Total\
  \ amount you can rob = 1 + 3 = 4."
"vc-preamble": "import Imports.AllImports\n\ndef List.sum : List Nat → Nat\n  | []\
  \ => 0\n  | x::xs => x + List.sum xs\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def rob_houses (nums: List Nat) : Nat := sorry\n\ntheorem rob_houses_non_negative\
  \ (nums: List Nat) :\n  rob_houses nums ≥ 0 := sorry\n"
"vc-theorems": "theorem rob_houses_maximum_possible (nums: List Nat) :\n  rob_houses\
  \ nums ≤ List.sum nums := sorry \n\n\ntheorem rob_houses_empty :\n  rob_houses []\
  \ = 0 := sorry\n\n\ntheorem rob_houses_single (x: Nat) :\n  rob_houses [x] = x :=\
  \ sorry\n\n\ntheorem rob_houses_two_equal (x: Nat) :\n  rob_houses [x, x] = x :=\
  \ sorry\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval rob_houses [2, 3, 2]\n\n/--\n\
  info: 4\n-/\n#guard_msgs in\n#eval rob_houses [1, 2, 3, 1]\n\n/--\ninfo: 1\n-/\n\
  #guard_msgs in\n#eval rob_houses [1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
