"vc-description": "You are given a sequence of non-negative integers $A_1, A_2, \\\
  ldots, A_N$. At most once, you may choose a non-negative integer $X$ and for each\
  \ valid $i$, change $A_i$ to $A_i \\oplus X$ ($\\oplus$ denotes bitwise XOR).\n\
  Find the minimum possible value of the sum of all elements of the resulting sequence.\n\
  \n-----Input-----\n- The first line of the input contains a single integer $T$ denoting\
  \ the number of test cases. The description of $T$ test cases follows.\n- The first\
  \ line of the input contains a single integer $N$.\n- The second line contains $N$\
  \ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nFor each\
  \ test case, print a single line containing one integer ― the minimum possible sum.\n\
  \n-----Constraints-----\n- $1 \\le T \\le 1,000$\n- $1 \\le N \\le 10^5$\n- $1 \\\
  le A_i \\le 10^9$ for each valid $i$\n- the sum of $N$ over all test cases does\
  \ not exceed $10^6$\n\n-----Subtasks-----\nSubtask #1 (50 points):\n- $1 \\le N\
  \ \\le 10^3$\n- $1 \\le A_i \\le 10^3$ for each valid $i$\nSubtask #2 (50 points):\
  \ original constraints\n\n-----Example Input-----\n3\n5\n2 3 4 5 6\n4\n7 7 7 7\n\
  3\n1 1 3\n\n-----Example Output-----\n14\n0\n2\n\n-----Explanation-----\nExample\
  \ case 1: If we choose $X = 6$, the sequence becomes $(4, 5, 2, 3, 0)$.\nExample\
  \ case 2: We can choose $X = 7$ to make all elements of the resulting sequence equal\
  \ to $0$.\nExample case 3: We can choose $X = 1$. The sequence becomes $(0, 0, 2)$,\
  \ with sum $2$."
"vc-preamble": "import Imports.AllImports\n\ndef sum_list : List Nat → Nat \n  | []\
  \ => 0\n  | x::xs => x + sum_list xs\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def min_sequence_sum (n : Nat) (a : List Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem min_sequence_sum_non_negative\n  (n : Nat) (a : List Nat)\
  \ (h : a.length = n)\n  : min_sequence_sum n a ≥ 0 :=\nsorry\n\n\ntheorem min_sequence_sum_upper_bound\n\
  \  (n : Nat) (a : List Nat) (h : a.length = n)\n  : min_sequence_sum n a ≤ sum_list\
  \ a :=\nsorry \n\n\ntheorem min_sequence_sum_all_equal\n  (n : Nat) (a : List Nat)\
  \ (h : a.length = n)\n  (h' : ∀ i j, i < n → j < n → a[i]? = a[j]?)\n  : min_sequence_sum\
  \ n a = 0 :=\nsorry\n\n\ntheorem min_sequence_sum_all_zeros\n  (n : Nat) (a : List\
  \ Nat) (h : a.length = n)\n  (h' : ∀ i, i < n → a[i]? = some 0)\n  : min_sequence_sum\
  \ n a = 0 :=\nsorry\n\n\ntheorem min_sequence_sum_all_ones \n  (n : Nat) (a : List\
  \ Nat) (h : a.length = n)\n  (h' : ∀ i, i < n → a[i]? = some 1)\n  : min_sequence_sum\
  \ n a = 0 :=\nsorry\n\n\ntheorem min_sequence_sum_single_zero \n  : min_sequence_sum\
  \ 1 [0] = 0 :=\nsorry\n\n\ntheorem min_sequence_sum_equal_large_nums\n  {x : Nat}\
  \ (h : x = 2^31)\n  : min_sequence_sum 2 [x, x] = 0 :=\nsorry\n\n/--\ninfo: 14\n\
  -/\n#guard_msgs in\n#eval min_sequence_sum 5 [2, 3, 4, 5, 6]\n\n/--\ninfo: 0\n-/\n\
  #guard_msgs in\n#eval min_sequence_sum 4 [7, 7, 7, 7]\n\n/--\ninfo: 2\n-/\n#guard_msgs\
  \ in\n#eval min_sequence_sum 3 [1, 1, 3]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
