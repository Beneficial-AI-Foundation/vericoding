"vc-description": "=====Problem Statement=====\nIn this challenge, the user enters\
  \ a string and a substring. You have to print the number of times that the substring\
  \ occurs in the given string. String traversal will take place from left to right,\
  \ not from right to left.\n\nNOTE: String letters are case-sensitive.\n\n=====Input\
  \ Format=====\nThe first line of input contains the original string. The next line\
  \ contains the substring.\n\n=====Constraints=====\n1 ≤ len(string) ≤ 200\nEach\
  \ character in the string is an ascii character.\n\n=====Output Format=====\nOutput\
  \ the integer number indicating the total number of occurrences of the substring\
  \ in the original string."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_substring (string substr : String) : Nat :=\n  sorry\n"
"vc-theorems": "theorem substring_count_properties\n  {string substr : String}\n \
  \ (h : substr.length > 0) :\n  let count := count_substring string substr\n  (count\
  \ ≥ 0 ∧ count ≤ string.length ∧\n   (substr.length > string.length → count = 0))\
  \ :=\nsorry\n\n\ntheorem string_contains_itself\n  {s : String}\n  (h : s.length\
  \ > 0) :\n  count_substring s s = 1 :=\nsorry\n\n\ntheorem overlapping_substrings\n\
  \  {s : String}\n  (h : s.length ≥ 2)\n  (h₂ : s.length > 0) :\n  count_substring\
  \ (toString (List.replicate s.length 'a')) (toString ['a']) = s.length :=\nsorry\n\
  \n\ntheorem repeated_substring\n  {s : String}\n  {n : Nat}\n  (h₁ : s.length >\
  \ 0)\n  (h₂ : n > 0)\n  (h₃ : n ≤ 10) :\n  count_substring (String.append s (String.append\
  \ s s)) s ≥ 2 :=\nsorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval count_substring\
  \ \"ABCDCDC\" \"CDC\"\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval count_substring\
  \ \"Hello hello HELLO\" \"hello\"\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval count_substring\
  \ \"WoWoWo\" \"Wo\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
