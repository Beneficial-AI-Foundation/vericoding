"vc-description": "Given an integer array A, and an integer target, return the number\
  \ of tuples i, j, k  such that i < j < k and A[i] + A[j] + A[k] == target.\nAs the\
  \ answer can be very large, return it modulo 109 + 7.\n \nExample 1:\nInput: A =\
  \ [1,1,2,2,3,3,4,4,5,5], target = 8\nOutput: 20\nExplanation: \nEnumerating by the\
  \ values (A[i], A[j], A[k]):\n(1, 2, 5) occurs 8 times;\n(1, 3, 4) occurs 8 times;\n\
  (2, 2, 4) occurs 2 times;\n(2, 3, 3) occurs 2 times.\n\nExample 2:\nInput: A = [1,1,2,2,2,2],\
  \ target = 5\nOutput: 12\nExplanation: \nA[i] = 1, A[j] = A[k] = 2 occurs 12 times:\n\
  We choose one 1 from [1,1] in 2 ways,\nand two 2s from [2,2,2,2] in 6 ways.\n\n\
   \nConstraints:\n\n3 <= A.length <= 3000\n0 <= A[i] <= 100\n0 <= target <= 300"
"vc-preamble": "import Imports.AllImports\n\ndef threeSumMulti (arr : List Nat) (target\
  \ : Nat) : Nat := sorry\n\ndef MOD := 1000000007\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def List.sum : List Nat → Nat \n  | [] => 0\n  | x::xs => x + List.sum\
  \ xs\n"
"vc-theorems": "theorem output_range (arr : List Nat) (target : Nat)\n  (h1 : arr.length\
  \ ≥ 1)\n  (h2 : arr.length ≤ 3000)\n  (h3 : ∀ x ∈ arr, x ≤ 100)\n  (h4 : target\
  \ ≤ 300) :\n  threeSumMulti arr target < MOD := sorry\n\n\ntheorem zero_target (arr\
  \ : List Nat)\n  (h1 : arr.length ≥ 1)\n  (h2 : arr.length ≤ 3000)\n  (h3 : ∀ x\
  \ ∈ arr, x ≤ 100)\n  (h4 : arr.length ≥ 3) :\n  threeSumMulti (List.replicate arr.length\
  \ 0) 0 > 0 := sorry\n\n\ntheorem identical_elements (arr : List Nat) (target : Nat)\n\
  \  (h1 : arr.length ≥ 3)\n  (h2 : arr.length ≤ 3000)\n  (h3 : target % 3 = 0)\n\
  \  (h4 : target / 3 ≤ 100) :\n  threeSumMulti (List.replicate arr.length (target\
  \ / 3)) target > 0 := sorry\n\n\ntheorem small_arrays (arr : List Nat)\n  (h1 :\
  \ arr.length = 3)\n  (h2 : ∀ x ∈ arr, x ≤ 100) :\n  threeSumMulti arr (List.sum\
  \ arr) ≥ 1 := sorry\n\n\ntheorem order_independence (arr arr' : List Nat) (target\
  \ : Nat)\n  (h1 : arr.length ≥ 1)\n  (h2 : arr.length ≤ 3000)\n  (h3 : ∀ x ∈ arr,\
  \ x ≤ 100)\n  (h4 : target ≤ 300)\n  (h5 : arr.length = arr'.length)\n  (h6 : ∀\
  \ n, (arr.count n) = (arr'.count n)) :\n  threeSumMulti arr target = threeSumMulti\
  \ arr' target := sorry\n\n/--\ninfo: 20\n-/\n#guard_msgs in\n#eval three_sum_multi\
  \ [1, 1, 2, 2, 3, 3, 4, 4, 5, 5] 8\n\n/--\ninfo: 12\n-/\n#guard_msgs in\n#eval three_sum_multi\
  \ [1, 1, 2, 2, 2, 2] 5\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval three_sum_multi\
  \ [2, 2, 2] 6\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
