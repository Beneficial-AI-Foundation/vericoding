"vc-description": "\"What do you know about happiness?\" — Yoda \nChef is happy only\
  \ if three conditions hold:\n- Chef finished cooking a delicious meal\n- Chef got\
  \ AC for a programming problem with an almost correct code\n- Chef got a new problem\
  \ with a sequence of integers\nToday, all three conditions are satisfied. Chef would\
  \ like you to feel his happiness and provide him with a solution for this new problem\
  \ with a sequence of integers. The problem is as follows.\nYou are given a sequence\
  \ $A_1, A_2, \\dots, A_N$. You need to determine if it is possible to choose two\
  \ indices $i$ and $j$ such that $A_i \\neq A_j$, but $A_{A_i}$ = $A_{A_j}$. (If\
  \ it was possible, Chef would be truly happy.)\n\n-----Input-----\n- The first line\
  \ of the input contains a single integer $T$ denoting the number of test cases.\
  \ The description of $T$ test cases follows.\n- The first line of each test case\
  \ contains a single integer $N$.\n- The second line contains $N$ space-separated\
  \ integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output-----\nFor each test case, print\
  \ a single line containing the string \"Truly Happy\" if it is possible to choose\
  \ required indices or \"Poor Chef\" otherwise.\n\n-----Constraints-----\n- $1 \\\
  le T \\le 1,000$\n- $1 \\le N \\le 10^5$\n- $1 \\le A_i \\le N$ for each valid $i$\n\
  - the sum of $N$ over all test cases does not exceed $2 \\cdot 10^5$\n\n-----Subtasks-----\n\
  Subtask #1 (27 points): $1 \\le N \\le 1,000$\nSubtask #2 (73 points): original\
  \ constraints\n\n-----Example Input-----\n4\n4\n1 1 2 3\n4\n2 1 3 3\n5\n5 4 4 3\
  \ 1\n5\n3 2 1 1 4\n\n-----Example Output-----\nTruly Happy\nPoor Chef\nPoor Chef\n\
  Truly Happy\n\n-----Explanation-----\nExample case 1: Chef is truly happy because\
  \ $A_{A_3} = A_{A_1}$ and $A_3 \\neq A_1$.\nExample case 2: There is no pair of\
  \ indices which would make Chef truly happy. For instance, $A_{A_3} = A_{A_4}$,\
  \ but $A_3 = A_4$,"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_happiness (n : Nat) (arr : List Nat) : String := sorry\n\
  \ntheorem solve_happiness_basic_cases :\n  solve_happiness 3 [1,1,2] = \"Truly Happy\"\
  \ ∧\n  solve_happiness 3 [1,2,3] = \"Poor Chef\" ∧\n  solve_happiness 4 [1,1,2,3]\
  \ = \"Truly Happy\" ∧\n  solve_happiness 4 [2,1,3,3] = \"Poor Chef\" ∧\n  solve_happiness\
  \ 5 [3,2,1,1,4] = \"Truly Happy\" := sorry\n"
"vc-theorems": "theorem solve_happiness_increasing_sequence (n : Nat) (arr : List\
  \ Nat) :\n  (n ≥ 1) →\n  (n ≤ 10) →\n  (arr = List.range' 1 n) →\n  solve_happiness\
  \ n arr = \"Poor Chef\" := sorry\n\n/--\ninfo: 'Truly Happy'\n-/\n#guard_msgs in\n\
  #eval solve_happiness 4 [1, 1, 2, 3]\n\n/--\ninfo: 'Poor Chef'\n-/\n#guard_msgs\
  \ in\n#eval solve_happiness 4 [2, 1, 3, 3]\n\n/--\ninfo: 'Truly Happy'\n-/\n#guard_msgs\
  \ in\n#eval solve_happiness 5 [3, 2, 1, 1, 4]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
