"vc-description": "Due to another of his misbehaved, \nthe primary school's teacher\
  \ of the young Gauß,  Herr J.G. Büttner, to keep the bored and unruly young schoolboy\
  \ Karl Friedrich Gauss busy for a good long time, while he teaching arithmetic to\
  \ his mates,\nassigned him the problem of adding up all the whole numbers from 1\
  \ through a given number `n`.\n\nYour task is to help the young Carl Friedrich to\
  \ solve this problem as quickly as you can; so, he can astonish his teacher and\
  \ rescue his recreation interval.\n\nHere's, an example:\n\n```\nf(n=100) // returns\
  \ 5050 \n```\n\nIt's your duty to verify that n is a valid positive integer number.\
  \ If not, please, return false (None for Python, null for C#).\n\n> **Note:** the\
  \ goal of this kata is to invite you to think about some 'basic' mathematic formula\
  \ and how you can do performance optimization on your code. \n\n> Advanced - experienced\
  \ users should try to solve it in one line, without loops, or optimizing the code\
  \ as much as they can.\n\n-----\n\n**Credits:** this kata was inspired by the farzher's\
  \ kata 'Sum of large ints' . In fact, it can be seen as a sort of prep kata for\
  \ that one."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def f (x : α) : Option Nat := sorry\n\n/- For positive integers,\
  \ f(n) equals the sum of numbers from 1 to n -/"
"vc-theorems": "theorem positive_integers_sum {n : Nat} (h : n > 0) : \n  f n = some\
  \ (n * (n + 1) / 2) := sorry\n\n/- For non-positive integers, f returns none -/\n\
  \ntheorem non_positive_returns_none {n : Int} (h : n ≤ 0) :\n  f n = none := sorry\n\
  \n/- For non-integer numeric inputs, f returns none -/  \n\ntheorem non_integer_returns_none\
  \ (x : Float) :\n  f x = none := sorry\n\n/- For any non-numeric type α, f returns\
  \ none -/\n\ntheorem non_numeric_returns_none (α : Type) (x : α) :\n  f x = none\
  \ := sorry\n\n/- f handles large inputs without overflow -/\n\ntheorem handles_large_inputs\
  \ (n : Nat) :\n  f n ≠ none → ∃ m : Nat, f n = some m ∧ m > 0 := sorry\n\n/--\n\
  info: 5050\n-/\n#guard_msgs in\n#eval f 100\n\n/--\ninfo: None\n-/\n#guard_msgs\
  \ in\n#eval f 0\n\n/--\ninfo: None\n-/\n#guard_msgs in\n#eval f 3.14\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
