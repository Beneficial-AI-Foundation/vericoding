"vc-description": "![](http://www.grindtv.com/wp-content/uploads/2015/08/drone.jpg)\n\
  \nThe other day I saw an amazing video where a guy hacked some wifi controlled lightbulbs\
  \ by flying a drone past them. Brilliant.\n\nIn this kata we will recreate that\
  \ stunt... sort of.\n\nYou will be given two strings: `lamps` and `drone`. `lamps`\
  \ represents a row of lamps, currently off, each represented by `x`. When these\
  \ lamps are on, they should be represented by `o`.\n\nThe `drone` string represents\
  \ the position of the drone `T` (any better suggestion for character??) and its\
  \ flight path up until this point `=`. The drone always flies left to right, and\
  \ always begins at the start of the row of lamps. Anywhere the drone has flown,\
  \ including its current position, will result in the lamp at that position switching\
  \ on.\n\nReturn the resulting `lamps` string. See example tests for more clarity."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def fly_by (lamps : String) (drone : String) : String := sorry\n\
  \ndef countChar (s : String) (c : Char) : Nat :=\n  s.data.filter (· = c) |>.length\n"
"vc-theorems": "theorem fly_by_length_preservation {lamps drone : String} \n  (h1\
  \ : lamps.all (· = 'x')) \n  (h2 : drone.all (fun c => c = '=' ∨ c = 'T')) :\n \
  \ (fly_by lamps drone).length = lamps.length := sorry\n\n\ntheorem fly_by_valid_chars\
  \ {lamps drone : String}\n  (h1 : lamps.all (· = 'x'))\n  (h2 : drone.all (fun c\
  \ => c = '=' ∨ c = 'T')) :\n  (fly_by lamps drone).all (fun c => c = 'o' ∨ c = 'x')\
  \ := sorry\n\n\ntheorem fly_by_o_count {lamps drone : String}\n  (h1 : lamps.all\
  \ (· = 'x'))\n  (h2 : drone.all (fun c => c = '=' ∨ c = 'T'))\n  (h3 : drone.endsWith\
  \ \"T\") :\n  let result := fly_by lamps drone\n  let num_os := countChar result\
  \ 'o'\n  num_os = min (countChar drone '=' + 1) lamps.length := sorry\n\n\ntheorem\
  \ fly_by_unchanged_suffix {lamps drone : String}\n  (h1 : lamps.all (· = 'x'))\n\
  \  (h2 : drone.all (fun c => c = '=' ∨ c = 'T'))\n  (h3 : drone.endsWith \"T\")\
  \ :\n  let result := fly_by lamps drone\n  let num_os := countChar result 'o'\n\
  \  result.drop num_os = String.mk (List.replicate (lamps.length - num_os) 'x') :=\
  \ sorry\n\n\ntheorem fly_by_minimal_drone {lamps : String}\n  (h : lamps.all (·\
  \ = 'x'))\n  (h2 : lamps.length > 0) :\n  let result := fly_by lamps \"T\"\n  result.get!\
  \ 0 = 'o' ∧ \n  result.drop 1 = lamps.drop 1 := sorry\n\n/--\ninfo: 'ooooox'\n-/\n\
  #guard_msgs in\n#eval fly_by \"xxxxxx\" \"====T\"\n\n/--\ninfo: 'oooxxxxxx'\n-/\n\
  #guard_msgs in\n#eval fly_by \"xxxxxxxxx\" \"==T\"\n\n/--\ninfo: 'ooooooooooxxxxx'\n\
  -/\n#guard_msgs in\n#eval fly_by \"xxxxxxxxxxxxxxx\" \"=========T\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
