"vc-description": "On an infinite number line (x-axis), we drop given squares in the\
  \ order they are given.\nThe i-th square dropped (positions[i] = (left, side_length))\
  \ is a square with the left-most point being positions[i][0] and sidelength positions[i][1].\n\
  The square is dropped with the bottom edge parallel to the number line, and from\
  \ a higher height than all currently landed squares.  We wait for each square to\
  \ stick before dropping the next.\nThe squares are infinitely sticky on their bottom\
  \ edge, and will remain fixed to any positive length surface they touch (either\
  \ the number line or another square).  Squares dropped adjacent to each other will\
  \ not stick together prematurely.\n\n\nReturn a list ans of heights.  Each height\
  \ ans[i] represents the current highest height of any square we have dropped, after\
  \ dropping squares represented by positions[0], positions[1], ..., positions[i].\n\
  \n\nExample 1:\n\nInput: [[1, 2], [2, 3], [6, 1]]\nOutput: [2, 5, 5]\nExplanation:\n\
  \nAfter the first drop of positions[0] = [1, 2]:\n_aa\n_aa\n-------\nThe maximum\
  \ height of any square is 2.\n\nAfter the second drop of positions[1] = [2, 3]:\n\
  __aaa\n__aaa\n__aaa\n_aa__\n_aa__\n--------------\nThe maximum height of any square\
  \ is 5.  \nThe larger square stays on top of the smaller square despite where its\
  \ center\nof gravity is, because squares are infinitely sticky on their bottom edge.\n\
  \nAfter the third drop of positions[1] = [6, 1]:\n__aaa\n__aaa\n__aaa\n_aa\n_aa___a\n\
  --------------\nThe maximum height of any square is still 5.\n\nThus, we return\
  \ an answer of [2, 5, 5].\n\n\n\n\n\nExample 2:\n\nInput: [[100, 100], [200, 100]]\n\
  Output: [100, 100]\nExplanation: Adjacent squares don't get stuck prematurely -\
  \ only their bottom edge can stick to surfaces.\n\n\n\nNote:\n1 .\n1 .\n1 ."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def fallingSquares (positions: List (List Int)) : List Int :=\n\
  \  sorry\n\nvariable (positions : List (List Int))\nvariable (result : List Int\
  \ := fallingSquares positions)\n\n/-- Result length should match input length -/"
"vc-theorems": "theorem result_length : \n  result.length = positions.length := sorry\n\
  \n/-- Heights are monotonically non-decreasing -/\n\ntheorem heights_monotonic {i\
  \ : Nat} (h : i + 1 < result.length) :\n  match result[i]?, result[i+1]? with\n\
  \  | some x, some y => x ≥ 0 ∧ y ≥ x\n  | _, _ => False\n  := sorry\n\n/-- Each\
  \ height is at least as tall as corresponding square -/\n\ntheorem heights_geq_sides\
  \ : \n  ∀ (i : Nat) (h : i < positions.length), \n  match positions[i]?, result[i]?\
  \ with\n  | some pos, some height => \n    match pos.get? 1 with\n    | some side\
  \ => height ≥ side\n    | none => True\n  | _, _ => True\n  := sorry\n\n/-- Maximum\
  \ height is bounded by sum of all side lengths -/\n\ntheorem max_height_bound (sides\
  \ : List Int) :\n  (∀ i < positions.length, \n    match positions[i]?, sides.get?\
  \ i with \n    | some pos, some side => pos.get? 1 = some side\n    | _, _ => False)\
  \ →\n  result.length > 0 →\n  ∀ h ∈ result, h ≤ sides.foldl (·+·) 0 := sorry\n\n\
  /-- Results are non-negative integers -/\n\ntheorem results_nonneg : \n  ∀ x ∈ result,\
  \ x ≥ 0 := sorry\n\n/--\ninfo: [2, 5, 5]\n-/\n#guard_msgs in\n#eval fallingSquares\
  \ [[1, 2], [2, 3], [6, 1]]\n\n/--\ninfo: [100, 100]\n-/\n#guard_msgs in\n#eval fallingSquares\
  \ [[100, 100], [200, 100]]\n\n/--\ninfo: [2, 2]\n-/\n#guard_msgs in\n#eval fallingSquares\
  \ [[1, 2], [3, 1]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
