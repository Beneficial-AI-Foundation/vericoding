"vc-description": "Mr. Wire Less is not that good at implementing circuit in a breadboard.\
  \ In his Digital Logic Design course, he has to implement several boolean functions\
  \ using the breadboard. In a breadboard, inputs are given through the switches and\
  \ outputs are taken through the LEDs. Each input switch can be either in ground\
  \ state or in high state. So, if he wishes to implement a boolean function, f(x1,\
  \ x2, .., xn) that takes n boolean values as input and returns m boolean values\
  \ as output, he will use n switches and m LEDs. \nMr. Wire Less can quickly assemble\
  \ the necessary ICs and wires, but the key problem is testing. While testing he\
  \ has to check with all possible input combination, to make sure whether the output\
  \ of LED corresponds to the expected output or not. This is taking too long for\
  \ him, as most of the switches are jammed and difficult to toggle. \nMr. Wire Less\
  \ is asking for help to minimize his time of testing. So, your task is to minimize\
  \ the total number of switch-toggle throughout the testing.\nFor example, if Mr.\
  \ Wire Less has to test a function f(x0, x1) of two variables, he may choose this\
  \ switching-sequence for testing 00, 11, 10, 01. In this case, the total number\
  \ of switch-toggle will be 2+1+2 = 5. But if he tests in this sequence 00, 10, 11,\
  \ 01 total number of toggle will be 1+1+1 = 3.\nGiven n, you have to output the\
  \ minimum number of toggle needed for complete testing. Though it seems impractical,\
  \ he wants you to solve the problem for a very large value of n. But, then the toggle\
  \ value can be quite big. So, he is completely okay with the toggle value modulo\
  \ 8589934592 (233).\L\L\n\n-----Input-----\nThe first line of the input contains\
  \ a positive integer T(T ≤ 105), denoting the number of test-case. Each of the following\
  \ T lines contains a single non-negative integer n(n ≤ 1020).\n\n-----Output-----\n\
  For every test-case, output a single containing test-case number and the minimum\
  \ number of switch-toggle modulo 8589934592 (233).\n\n-----Sample----- \nInput \
  \  \n2\n1\n2\n\nOutput\nCase 1: 1\nCase 2: 3"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def mod : Nat := 8589934592\n\ndef calculate_min_toggles (nums\
  \ : List Nat) : List String := sorry\n"
"vc-theorems": "theorem calculate_min_toggles_correct_length \n  (nums : List Nat)\
  \ (h : nums.length > 0) :\n  (calculate_min_toggles nums).length = nums.length :=\
  \ sorry\n\n\ntheorem calculate_min_toggles_case_format\n  (nums : List Nat) (h :\
  \ nums.length > 0) (i : Nat) (h2 : i < nums.length) :\n  have h3 : i < (calculate_min_toggles\
  \ nums).length := by rw [calculate_min_toggles_correct_length nums h]; exact h2\n\
  \  String.startsWith ((calculate_min_toggles nums)[i]'h3) (s!\"Case {i+1}: \") :=\
  \ sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
