"vc-description": "An array is monotonic if it is either monotone increasing or monotone\
  \ decreasing.\nAn array A is monotone increasing if for all i <= j, A[i] <= A[j]. \
  \ An array A is monotone decreasing if for all i <= j, A[i] >= A[j].\nReturn true\
  \ if and only if the given array A is monotonic.\n \n\n\n\nExample 1:\nInput: [1,2,2,3]\n\
  Output: true\n\n\nExample 2:\nInput: [6,5,4,4]\nOutput: true\n\n\nExample 3:\nInput:\
  \ [1,3,2]\nOutput: false\n\n\nExample 4:\nInput: [1,2,4,5]\nOutput: true\n\n\nExample\
  \ 5:\nInput: [1,1,1]\nOutput: true\n\n \nNote:\n\n1 <= A.length <= 50000\n-100000\
  \ <= A[i] <= 100000"
"vc-preamble": "import Imports.AllImports\n\ndef is_monotonic (nums: List Int) : Bool\
  \ := sorry\n\ntheorem empty_or_single_element_lists_monotonic (nums: List Int) :\
  \ \n  nums.length ≤ 1 → is_monotonic nums := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isSorted (nums: List Int) : Bool := \n  match nums with\n \
  \ | [] => true\n  | [_] => true\n  | x::y::rest => x ≤ y && isSorted (y::rest)\n"
"vc-theorems": "theorem identical_elements_monotonic (nums: List Int) (x: Int) (h:\
  \ nums.length ≥ 2) :\n  (∀ i: Fin nums.length, nums.get i = x) → is_monotonic nums\
  \ := sorry\n\n\ntheorem sorted_lists_monotonic (nums: List Int) (h: nums.length\
  \ ≥ 2) :\n  isSorted nums → is_monotonic nums := sorry\n\n\ntheorem non_monotonic_lists_false\
  \ (nums: List Int) (h: nums.length ≥ 3) :\n  (∀ i: Fin nums.length, ∀ j: Fin nums.length,\
  \ \n    i.val + 1 = j.val → ¬(nums.get i ≤ nums.get j)) ∧\n  (∀ i: Fin nums.length,\
  \ ∀ j: Fin nums.length,\n    i.val + 1 = j.val → ¬(nums.get i ≥ nums.get j)) →\n\
  \  ¬is_monotonic nums := sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval is_monotonic\
  \ [1, 2, 2, 3]\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval is_monotonic [6, 5,\
  \ 4, 4]\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval is_monotonic [1, 3, 2]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
