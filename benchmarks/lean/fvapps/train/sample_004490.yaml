"vc-description": "My friend wants a new band name for her band. She like bands that\
  \ use the formula: \"The\" + a noun with the first letter capitalized, for example:\n\
  \n`\"dolphin\" -> \"The Dolphin\"`\n\nHowever, when a noun STARTS and ENDS with\
  \ the same letter, she likes to repeat the noun twice and connect them together\
  \ with the first and last letter, combined into one word (WITHOUT \"The\" in front),\
  \ like this:\n\n`\"alaska\" -> \"Alaskalaska\"`\n\nComplete the function that takes\
  \ a noun as a string, and returns her preferred band name written as a string."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def band_name_generator (s : String) : String := sorry\n\ntheorem\
  \ band_name_generator_first_char_is_capital (s : String) \n  (h : s.length > 0)\
  \ :\n  let result := band_name_generator s\n  Char.isUpper (result.get 0) := sorry\
  \ \n"
"vc-theorems": "theorem band_name_generator_first_last_same (s : String)\n  (h1 :\
  \ s.length > 0)\n  (h2 : s.front = s.back) :\n  band_name_generator s = s.capitalize\
  \ ++ s.drop 1 := sorry\n\n\ntheorem band_name_generator_first_last_different (s\
  \ : String) \n  (h1 : s.length > 0)\n  (h2 : s.front â‰  s.back) :\n  band_name_generator\
  \ s = \"The \" ++ s.capitalize := sorry\n\n/--\ninfo: 'The Knife'\n-/\n#guard_msgs\
  \ in\n#eval band_name_generator \"knife\"\n\n/--\ninfo: 'Tartart'\n-/\n#guard_msgs\
  \ in\n#eval band_name_generator \"tart\"\n\n/--\ninfo: 'The Bed'\n-/\n#guard_msgs\
  \ in\n#eval band_name_generator \"bed\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
