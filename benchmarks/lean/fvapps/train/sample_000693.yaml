"vc-description": "Chef got into a fight with the evil Dr Doof. Dr Doof has decided\
  \ to destroy all even numbers from the universe using his Evil-Destroy-inator. Chef\
  \ has $N$ integers with him. To stop Doof, Chef has to find an odd number which\
  \ is an integer multiple of all $N$ numbers that he has with him. Find if it is\
  \ possible for Chef to prevent Dr Doof from destroying the even numbers.\nFormally,\
  \ given $N$ positive integers, find if there exists an odd number which is an integer\
  \ multiple of all the given $N$ numbers. If yes, print \"YES\", otherwise \"NO\"\
  . You can print any letter in any case.\n\n-----Input-----\n- First line contains\
  \ $T$, number of testcases. Each testcase consists of $2$ lines.\n- The first line\
  \ of each test case consists of a positive integer $N$, denoting the number of positive\
  \ integers Chef has.\n- The second line of each test case contains $N$ space separated\
  \ integers $A_i$ each denoting an integer that Chef has with him.\n\n-----Output-----\n\
  For every test case, if there exists such an odd number, print \"YES\" on a separate\
  \ line, otherwise \"NO\". The judge is case insensitive. That means, your code can\
  \ print any letter in any case ( \"Yes\", \"yes\" or \"YES\" are all accepted).\n\
  \n-----Constraints-----\n- $1 \\leq T \\leq 10^3$\n- $1 \\leq N \\leq 10^3$\n- $1\
  \ \\leq A_i \\leq 10^3$\n\n-----Sample Input-----\n2\n5\n1 2 5 4 3\n1\n7\n\n-----Sample\
  \ Output-----\nNO\nYES\n\n-----Explanation-----\nFor test $1$: There exists no odd\
  \ number.\nFor test $2$: The possible odd numbers can be $7$, $21$, $49$, $315$,\
  \ …"
"vc-preamble": "import Imports.AllImports\n\ndef can_find_odd_multiple (n : Nat) (arr\
  \ : List Int) : Bool :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isEven (x : Int) : Bool :=\n  x % 2 == 0\n"
"vc-theorems": "theorem all_even_no_odd_multiple {n : Nat} {arr : List Int} :  \n\
  \  (∀ x ∈ arr, isEven x = true) → \n  can_find_odd_multiple n arr = false :=\nsorry\n\
  \n\ntheorem single_number_case (x : Int) :\n  can_find_odd_multiple 1 [x] = (!isEven\
  \ x) :=\nsorry\n\n\ntheorem gcd_property {n : Nat} {arr : List Int} :\n  n = arr.length\
  \ →\n  can_find_odd_multiple n arr = true ∨ can_find_odd_multiple n arr = false\
  \ :=\nsorry\n\n\ntheorem parity_preservation {n : Nat} {arr : List Int} :\n  can_find_odd_multiple\
  \ n arr = can_find_odd_multiple n arr :=\nsorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
