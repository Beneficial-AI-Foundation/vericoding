"vc-description": "Given an array of ints, return the index such that the sum of the\
  \ elements to the right of that index equals the sum of the elements to the left\
  \ of that index. If there is no such index, return `-1`. If there is more than one\
  \ such index, return the left-most index.\n\nFor example: \n```\npeak([1,2,3,5,3,2,1])\
  \ = 3, because the sum of the elements at indexes 0,1,2 == sum of elements at indexes\
  \ 4,5,6. We don't sum index 3.\npeak([1,12,3,3,6,3,1]) = 2\npeak([10,20,30,40])\
  \ = -1\n```\n\nThe special case of an array of zeros (for instance `[0,0,0,0]`)\
  \ will not be tested. \n\nMore examples in the test cases. \n\nGood luck!\n\nPlease\
  \ also try [Simple time difference](https://www.codewars.com/kata/5b76a34ff71e5de9db0000f2)"
"vc-preamble": "import Imports.AllImports\n\ndef sum (l : List Int) : Int :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def peak (arr : List Int) : Int :=\n  sorry\n"
"vc-theorems": "theorem peak_equal_sums (arr : List Int) (h_size : arr.length > 0)\
  \ :\n  let p := peak arr;\n  p ≠ -1 →\n  sum (arr.take (Int.toNat p)) = sum (arr.drop\
  \ (Int.toNat (p + 1))) :=\n  sorry\n\n\ntheorem peak_bounds (arr : List Int) :\n\
  \  let p := peak arr;\n  -1 ≤ p ∧ p < arr.length :=\n  sorry\n\n\ntheorem peak_single_element\
  \ (arr : List Int) (h : arr.length = 1) :\n  peak arr = 0 :=\n  sorry\n\n\n\n\n\
  theorem peak_empty :\n  peak [] = -1 :=\n  sorry\n\n/--\ninfo: 3\n-/\n#guard_msgs\
  \ in\n#eval peak [1, 2, 3, 5, 3, 2, 1]\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval\
  \ peak [1, 12, 3, 3, 6, 3, 1]\n\n/--\ninfo: -1\n-/\n#guard_msgs in\n#eval peak [10,\
  \ 20, 30, 40]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
