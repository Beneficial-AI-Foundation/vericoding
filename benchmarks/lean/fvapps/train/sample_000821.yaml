"vc-description": "The chef is trying to solve some pattern problems, Chef wants your\
  \ help to code it. Chef has one number K to form a new pattern. Help the chef to\
  \ code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$,\
  \ the number of test cases. Then the test cases follow. \n- Each test case contains\
  \ a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test\
  \ case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n\
  - $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n3\n5\n3\n4\n\n-----Sample Output:-----\n\
  1   1\n2 2\n3\n4 4\n5   5\n1 1\n2\n3 3\n1  1\n22\n33\n4  4\n\n-----EXPLANATION:-----\n\
  No need, else pattern can be decode easily."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solvePattern (k: Nat) : List String := sorry\n\ntheorem pattern_length_matches_input\
  \ {k: Nat} (h: k ≥ 2) (h2: k ≤ 100) : \n  (solvePattern k).length = k := sorry\n"
"vc-theorems": "theorem each_line_has_correct_number {k: Nat} (h: k ≥ 2) (h2: k ≤\
  \ 100) :\n  ∀ i: Nat, i < k → \n    let line := (solvePattern k).get ⟨i, by sorry⟩\n\
  \    line.contains '1' ∧ line.length > 0 := sorry\n\n\ntheorem whitespace_structure\
  \ {k: Nat} (h: k ≥ 2) (h2: k ≤ 100) :\n  let pattern := solvePattern k\n  if k %\
  \ 2 = 0 then\n    ∀ i: Nat, i < k → \n      let line := pattern.get ⟨i, by sorry⟩\n\
  \      let spaces := line.data.filter (fun x => x = ' ')\n      spaces.length =\
  \ 0 ∨ spaces.length = 2\n  else\n    let middle_idx := k / 2\n    let middle_line\
  \ := pattern.get ⟨middle_idx, by sorry⟩\n    (middle_line.data.filter (fun x =>\
  \ x = ' ')).length = 0 ∧\n    ∀ i: Nat, i < k → i ≠ middle_idx → \n      let line\
  \ := pattern.get ⟨i, by sorry⟩\n      (line.data.filter (fun x => x = ' ')).length\
  \ > 0 := sorry\n\n\ntheorem line_endpoints {k: Nat} (h: k ≥ 2) (h2: k ≤ 100) :\n\
  \  let pattern := solvePattern k\n  let first := pattern.get ⟨0, by sorry⟩\n  let\
  \ last := pattern.get ⟨k-1, by sorry⟩\n  first.startsWith \"1\" ∧ \n  first.endsWith\
  \ \"1\" ∧\n  last.startsWith (toString k) ∧\n  last.endsWith (toString k) := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
