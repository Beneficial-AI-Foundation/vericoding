vc-description: |-
  ### Longest Palindrome

  Find the length of the longest substring in the given string `s` that is the same in reverse.        

  As an example, if the input was “I like racecars that go fast”, the substring (`racecar`) length would be `7`. 

  If the length of the input string is `0`, the return value must be `0`. 

  ### Example:
  ```
  "a" -> 1 
  "aab" -> 2  
  "abcde" -> 1
  "zzbaabcd" -> 4
  "" -> 0
  ```
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def longest_palindrome (s : String) : Nat :=
    sorry
vc-theorems: |
  theorem length_bounds (s : String) :
    0 ≤ longest_palindrome s ∧ longest_palindrome s ≤ s.length :=
    sorry


  theorem empty_string :
    longest_palindrome "" = 0 :=
    sorry


  theorem min_length_nonempty (s : String) :
    s ≠ "" → longest_palindrome s ≥ 1 :=
    sorry


  theorem repeated_chars_min_length (c : Char) :
    longest_palindrome (String.mk [c, c]) ≥ 2 :=
    sorry


  theorem palindrome_parity (s : String) :
    longest_palindrome s % 2 = 0 ∨ longest_palindrome s % 2 = 1 :=
    sorry


  theorem case_sensitivity_lower (s : String) :
    longest_palindrome s.toLower ≥ longest_palindrome s :=
    sorry


  theorem case_sensitivity_upper (s : String) :
    longest_palindrome s.toUpper ≥ longest_palindrome s :=
    sorry

  /--
  info: 2
  -/
  #guard_msgs in
  #eval longest_palindrome "aab"

  /--
  info: 7
  -/
  #guard_msgs in
  #eval longest_palindrome "I like racecars that go fast"

  /--
  info: 0
  -/
  #guard_msgs in
  #eval longest_palindrome ""
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible
