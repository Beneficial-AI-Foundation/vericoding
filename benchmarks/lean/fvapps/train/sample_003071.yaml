"vc-description": "# Task\nGiven an initial string `s`, switch case of the minimal\
  \ possible number of letters to make the whole string written in the upper case\
  \ or in the lower case.\n\n# Input/Output\n\n\n`[input]` string `s`\n\nString of\
  \ odd length consisting of English letters.\n\n3 ≤ inputString.length ≤ 99.\n\n\
  `[output]` a string\n\nThe resulting string.\n\n# Example\n\nFor `s = \"Aba\"`,\
  \ the output should be `\"aba\"`\n\nFor `s = \"ABa\"`, the output should be `\"\
  ABA\"`"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def case_unification (s : String) : String := sorry\n\ntheorem\
  \ case_unification_preserves_length (s : String) \n  (h : s.length > 0) : \n  (case_unification\
  \ s).length = s.length := sorry\n"
"vc-theorems": "theorem already_upper_stays_upper (s : String)\n  (h1 : s.length >\
  \ 0)\n  (h2 : ∀ c ∈ s.data, c.isUpper) :\n  case_unification s = s.toUpper := sorry\
  \ \n\n\ntheorem already_lower_stays_lower (s : String)\n  (h1 : s.length > 0) \n\
  \  (h2 : ∀ c ∈ s.data, c.isLower) :\n  case_unification s = s.toLower := sorry\n\
  \n/--\ninfo: 'aba'\n-/\n#guard_msgs in\n#eval case_unification \"Aba\"\n\n/--\n\
  info: 'ABA'\n-/\n#guard_msgs in\n#eval case_unification \"ABa\"\n\n/--\ninfo: 'asdervt'\n\
  -/\n#guard_msgs in\n#eval case_unification \"asdERvT\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
