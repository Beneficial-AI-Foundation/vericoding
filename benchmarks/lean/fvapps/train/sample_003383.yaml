"vc-description": "You have to write a function that describe Leo:\n```python\ndef\
  \ leo(oscar):\n  pass\n```\n\nif oscar was (integer) 88, you have to return \"Leo\
  \ finally won the oscar! Leo is happy\".\nif oscar was 86, you have to return \"\
  Not even for Wolf of wallstreet?!\"\nif it was not 88 or 86 (and below 88) you should\
  \ return \"When will you give Leo an Oscar?\"\nif it was over 88 you should return\
  \ \"Leo got one already!\""
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def leo (oscar : Int) : String := sorry\n\ntheorem leo_is_string\
  \ (oscar : Int) :\n  ∃ s : String, leo oscar = s := sorry\n"
"vc-theorems": "theorem leo_before_wolf (oscar : Int) (h: oscar ≤ 85) :\n  leo oscar\
  \ = \"When will you give Leo an Oscar?\" := sorry\n\n\ntheorem leo_after_win (oscar\
  \ : Int) (h: oscar ≥ 89) :\n  leo oscar = \"Leo got one already!\" := sorry\n\n\n\
  theorem leo_edge_cases :\n  leo 86 = \"Not even for Wolf of wallstreet?!\" ∧\n \
  \ leo 88 = \"Leo finally won the oscar! Leo is happy\" := sorry\n\n/--\ninfo: 'Leo\
  \ finally won the oscar! Leo is happy'\n-/\n#guard_msgs in\n#eval leo 88\n\n/--\n\
  info: 'When will you give Leo an Oscar?'\n-/\n#guard_msgs in\n#eval leo 87\n\n/--\n\
  info: 'Not even for Wolf of wallstreet?!'\n-/\n#guard_msgs in\n#eval leo 86\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
