"vc-description": "Implement `String#parse_mana_cost`, which parses [Magic: the Gathering\
  \ mana costs](http://mtgsalvation.gamepedia.com/Mana_cost) expressed as a string\
  \ and returns a `Hash` with keys being kinds of mana, and values being the numbers.\n\
  \nDon't include any mana types equal to zero.\n\nFormat is:\n\n* optionally natural\
  \ number representing total amount of generic mana (use key `*`)\n* optionally followed\
  \ by any combination of `w`, `u`, `b`, `r`, `g` (case insensitive in input, return\
  \ lower case in output), each representing one mana of specific color.\n\nIf case\
  \ of Strings not following specified format, return `nil/null/None`."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def ManaMap.empty : ManaMap := ⟨0,0,0,0,0,0⟩\n\ndef parse_mana_cost\
  \ (s : String) : Option ManaMap := sorry\n"
"vc-theorems": "theorem parse_mana_cost_valid_keys (s : String) (result : ManaMap)\
  \ :\n  parse_mana_cost s = some result →\n  result.white ≥ 0 ∧ result.blue ≥ 0 ∧\
  \ result.black ≥ 0 ∧ \n  result.red ≥ 0 ∧ result.green ≥ 0 ∧ result.generic ≥ 0\
  \ := sorry\n\n\ntheorem parse_mana_cost_positive_values (s : String) (result : ManaMap)\
  \ : \n  parse_mana_cost s = some result →\n  (result.white > 0 → result.white >\
  \ 0) ∧\n  (result.blue > 0 → result.blue > 0) ∧\n  (result.black > 0 → result.black\
  \ > 0) ∧\n  (result.red > 0 → result.red > 0) ∧\n  (result.green > 0 → result.green\
  \ > 0) ∧\n  (result.generic > 0 → result.generic > 0) := sorry\n\n\ntheorem parse_mana_cost_length\
  \ (s : String) (result : ManaMap) :\n  parse_mana_cost s = some result →\n  result.white\
  \ + result.blue + result.black + result.red + result.green +\n  (if result.generic\
  \ > 0 then toString result.generic |>.length else 0) = s.length := sorry\n\n\ntheorem\
  \ parse_mana_cost_invalid (s : String) :\n  (∃ c ∈ s.data, ¬(c.toLower ∈ ['w', 'u',\
  \ 'b', 'r', 'g'] ∨ c.isDigit)) →\n  parse_mana_cost s = none := sorry\n\n\ntheorem\
  \ parse_mana_cost_constructed (generic : Nat) (colors : List Char) :\n  let mana\
  \ := (if generic > 0 then toString generic else \"\") ++ String.mk colors\n  let\
  \ result := parse_mana_cost mana\n  match result with\n  | some m => \n    (generic\
  \ > 0 → m.generic = generic) ∧\n    (colors.countP (· = 'w') > 0 → m.white = colors.countP\
  \ (· = 'w')) ∧\n    (colors.countP (· = 'u') > 0 → m.blue = colors.countP (· = 'u'))\
  \ ∧\n    (colors.countP (· = 'b') > 0 → m.black = colors.countP (· = 'b')) ∧\n \
  \   (colors.countP (· = 'r') > 0 → m.red = colors.countP (· = 'r')) ∧\n    (colors.countP\
  \ (· = 'g') > 0 → m.green = colors.countP (· = 'g'))\n  | none => True := sorry\n\
  \n/--\ninfo: {'*': 2, 'r': 2}\n-/\n#guard_msgs in\n#eval parse_mana_cost \"2rr\"\
  \n\n/--\ninfo: {'*': 1, 'w': 2, 'u': 1}\n-/\n#guard_msgs in\n#eval parse_mana_cost\
  \ \"1wwu\"\n\n/--\ninfo: {'w': 1, 'u': 1, 'b': 1, 'r': 1, 'g': 1}\n-/\n#guard_msgs\
  \ in\n#eval parse_mana_cost \"wubrg\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
