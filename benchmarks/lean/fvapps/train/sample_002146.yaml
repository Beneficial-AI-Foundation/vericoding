"vc-description": "Alan decided to get in shape for the summer, so he created a precise\
  \ workout plan to follow. His plan is to go to a different gym every day during\
  \ the next N days and lift $X[i]$ grams on day $i$. In order to improve his workout\
  \ performance at the gym, he can buy exactly one pre-workout drink at the gym he\
  \ is currently in and it will improve his performance by $A$ grams permanently and\
  \ immediately. In different gyms these pre-workout drinks can cost different amounts\
  \ $C[i]$ because of the taste and the gym's location but its permanent workout gains\
  \ are the same. Before the first day of starting his workout plan, Alan knows he\
  \ can lift a maximum of $K$ grams. Help Alan spend a minimum total amount of money\
  \ in order to reach his workout plan. If there is no way for him to complete his\
  \ workout plan successfully output $-1$.\n\n\n-----Input-----\n\nThe first one contains\
  \ two integer numbers, integers $N$ $(1 \\leq N \\leq 10^5)$ and $K$ $(1 \\leq K\
  \ \\leq 10^5)$ – representing number of days in the workout plan and how many grams\
  \ he can lift before starting his workout plan respectively. The second line contains\
  \ $N$ integer numbers $X[i]$ $(1 \\leq X[i] \\leq 10^9)$ separated by a single space\
  \ representing how many grams Alan wants to lift on day $i$. The third line contains\
  \ one integer number $A$ $(1 \\leq A \\leq 10^9)$ representing permanent performance\
  \ gains from a single drink. The last line contains $N$ integer numbers $C[i]$ $(1\
  \ \\leq C[i] \\leq 10^9)$ , representing cost of performance booster drink in the\
  \ gym he visits on day $i$.\n\n\n-----Output-----\n\nOne integer number representing\
  \ minimal money spent to finish his workout plan. If he cannot finish his workout\
  \ plan, output -1.\n\n\n-----Examples-----\nInput\n5 10000\n10000 30000 30000 40000\
  \ 20000\n20000\n5 2 8 3 6\n\nOutput\n5\n\nInput\n5 10000\n10000 40000 30000 30000\
  \ 20000\n10000\n5 2 8 3 6\n\nOutput\n-1\n\n\n\n-----Note-----\n\nFirst example:\
  \ After buying drinks on days 2 and 4 Alan can finish his workout plan. Second example:\
  \ Alan cannot lift 40000 grams on day 2."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def min_cost_workout (n k : Nat) (x : List Nat) (a : Nat) (c :\
  \ List Nat) : Int := sorry\n\ndef sum_list : List Nat → Nat \n  | [] => 0\n  | h::t\
  \ => h + sum_list t\n\n\n\n\n\n\n"
"vc-theorems": "theorem min_cost_workout_empty (k a : Nat) :\n  min_cost_workout 0\
  \ k [] a [] = 0 := sorry\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval min_cost_workout\
  \ 5 10000 [10000, 30000, 30000, 40000, 20000] 20000 [5, 2, 8, 3, 6]\n\n/--\ninfo:\
  \ -1\n-/\n#guard_msgs in\n#eval min_cost_workout 5 10000 [10000, 40000, 30000, 30000,\
  \ 20000] 10000 [5, 2, 8, 3, 6]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval min_cost_workout\
  \ 5 49 [22, 23, 11, 17, 49] 50 [102, 55, 77, 34, 977]\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded_and_plausible"
