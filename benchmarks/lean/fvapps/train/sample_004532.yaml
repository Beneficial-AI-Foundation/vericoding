"vc-description": "Write a function that takes a string and returns an array containing\
  \ binary numbers equivalent to the ASCII codes of the characters of the string.\
  \ The binary strings should be eight digits long.\n\nExample: `'man'` should return\
  \ `[ '01101101', '01100001', '01101110' ]`"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def word_to_bin (s : String) : List String := sorry\n\ntheorem\
  \ word_to_bin_length {s : String} (h : s.length > 0) : \n  (word_to_bin s).length\
  \ = s.length := sorry\n"
"vc-theorems": "theorem word_to_bin_binary_format {s : String} (h : s.length > 0)\
  \ :\n  ∀ x ∈ word_to_bin s,\n    x.length = 8 ∧ \n    ∀ c ∈ x.data, c = '0' ∨ c\
  \ = '1' := sorry\n\n\ntheorem word_to_bin_roundtrip {s : String} (h : s.length >\
  \ 0) :\n  let binList := word_to_bin s\n  let decoded := binList.map (fun x => String.toNat!\
  \ x)\n  String.mk (decoded.map Char.ofNat) = s := sorry\n\n/--\ninfo: ['01101101',\
  \ '01100001', '01101110']\n-/\n#guard_msgs in\n#eval word_to_bin \"man\"\n\n/--\n\
  info: ['01100001']\n-/\n#guard_msgs in\n#eval word_to_bin \"a\"\n\n/--\ninfo: ['01000001',\
  \ '01000010']\n-/\n#guard_msgs in\n#eval word_to_bin \"AB\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
