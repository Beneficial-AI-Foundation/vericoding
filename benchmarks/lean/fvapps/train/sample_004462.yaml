"vc-description": "# Task\n\nIn the field, two beggars A and B found some gold at\
  \ the same time. They all wanted the gold, and they decided to use simple rules\
  \ to distribute gold:\n```\nThey divided gold into n piles and be in line. \nThe\
  \ amount of each pile and the order of piles all are randomly.\n\nThey took turns\
  \ to take away a pile of gold from the \nfar left or the far right.\n\nThey always\
  \ choose the bigger pile. That is to say, \nif the left is 1, the right is 2, then\
  \ choose to take 2.\n\nIf the both sides are equal, take the left pile.\n```\n\n\
  Given an integer array `golds`, and assume that A always takes first. Please calculate\
  \ the final amount of gold obtained by A and B. returns a two-element array `[amount\
  \ of A, amount of B]`.\n\n# Example\n\nFor `golds = [4,2,9,5,2,7]`, the output should\
  \ be `[14,15]`.\n```\nThe pile of most left is 4, \nThe pile of most right is 7,\
  \ \nA choose the largest one -- > take 7\n\nThe pile of most left is 4, \nThe pile\
  \ of most right is 2, \nB choose the largest one -- > take 4\n\nThe pile of most\
  \ left is 2, \nThe pile of most left is 2, \nA choose the most left one -- > take\
  \ 2\n\nThe pile of most left is 9, \nThe pile of most right is 2, \nB choose the\
  \ largest one -- > take 9\n\nThe pile of most left is 5, \nThe pile of most left\
  \ is 2, \nA choose the largest one -- > take 5\n\nTehn, only 1 pile left, \nB  --\
  \ > take 2\n\nA: 7 + 2 + 5 = 14\nB: 4 + 9 + 2 = 15\n```\n\nFor `golds = [10,1000,2,1]`,\
  \ the output should be `[12,1001]`.\n```\nA take 10\nB take 1000\nA take 2\nB take\
  \ 1\n\nA: 10 + 2 = 12\nB: 1000 + 1 = 1001\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def distribution_of (golds : List Nat) : List Nat :=\n  sorry\n"
"vc-theorems": "theorem distribution_sums_to_total {golds : List Nat} (h : golds ≠\
  \ []) :\n  distribution_of golds = [a, b] →\n  a + b = golds.foldl (init := 0) (·\
  \ + ·) := by\n  sorry\n\n\ntheorem distribution_returns_two_elements {golds : List\
  \ Nat} (h : golds ≠ []) :\n  ∃ a b, distribution_of golds = [a, b] := by\n  sorry\n\
  \n\ntheorem original_list_unchanged {golds : List Nat} (h : golds ≠ []) :\n  let\
  \ original := golds\n  let _ := distribution_of golds\n  golds = original := by\n\
  \  sorry\n\n/--\ninfo: [14, 15]\n-/\n#guard_msgs in\n#eval distribution_of [4, 2,\
  \ 9, 5, 2, 7]\n\n/--\ninfo: [12, 1001]\n-/\n#guard_msgs in\n#eval distribution_of\
  \ [10, 1000, 2, 1]\n\n/--\ninfo: [6, 3]\n-/\n#guard_msgs in\n#eval distribution_of\
  \ [5, 3, 1]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
