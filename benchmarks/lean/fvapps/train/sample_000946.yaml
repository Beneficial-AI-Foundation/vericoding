"vc-description": "The ZCO scholarship contest offers scholarships to first time ZCO\
  \ participants. You are participating in it for the first time. So you want to know\
  \ the number of participants who'll get the scholarship.\nYou know that the maximum\
  \ number of scholarships offered is $R$ and there are a total of $N$ participants\
  \ numbered from $1$ to $N$. Out of these, you know the set of people (denoted by\
  \ $X$) who you know, had participated in previous year ZCOs and hence, they shall\
  \ not get the scholarship.\nFurther, as the world isn't free from plagiarism, so\
  \ is the case with the scholarship contest. And from your secret sources, you also\
  \ know the set of people (denoted by set $Y$) who were involved in plagiarism and\
  \ therefore aren't eligible for scholarship either.\nFind out the number of participants\
  \ who shall get the scholarship.\nPS: Don't ask how so many scholarships are being\
  \ offered when you see the constraints on $R$. You never questioned it when in mathematics\
  \ classes, some person bought $80$ watermelons twice just to compare them and save\
  \ $₹1$. \n\n-----Input:-----\n- The first line will contain a single integer, $T$,\
  \ the number of testcases. Then the testcases follow. \n- The first line of each\
  \ test case contains four integers; $N$, $R$, $|X|$ and $|Y|$ denoting the number\
  \ of participants, maximum number of scholarships offered, number of old participants,\
  \ and the number of participants involved in plagiarism, respectively.\n- The second\
  \ line of each test case contains $|X|$ space separated integers $x_1, x_2 \\ldots\
  \ x_{|X|}$ denoting the indices of people who participated in previous years. If\
  \ $X$ is empty, this line is skipped and no empty line is in the input.\n- The third\
  \ line of each test case contains $|Y|$ space separated integers $y_1, y_2 \\ldots\
  \ y_{|Y|}$  denoting the indices of people who are involved in plagiarism. If $Y$\
  \ is empty, this line is skipped and no empty line is in input.\n\n-----Output:-----\n\
  For each testcase, print a single integer in a new line, denoting the number of\
  \ participants who shall get the scholarship.\n\n-----Constraints-----\n- $1 \\\
  leq T \\leq 1000$\n- $1 \\leq N \\leq 10^{15}$\n- $0 \\leq R \\leq 10^{15}$\n- $0\
  \ \\leq |X|, |Y| \\leq min(N, 2*10^5)$\n- $1 \\leq x_i, y_i \\leq N$\n- All $x_i$\
  \ are distinct\n- All $y_i$ are distinct\n- Sum of $|X|$ over all test cases does\
  \ not exceed $5*10^5$\n- Sum of $|Y|$ over all test cases does not exceed $5*10^5$\n\
  \n-----Subtasks-----\n- 20 points : $1 \\leq N \\leq 10^3$, and the sum of $N$ over\
  \ all test cases does not exceed $3*10^3$\n- 30 points : $1 \\leq N \\leq 2*10^5$,\
  \ and the sum of $N$ over all test cases does not exceed $5*10^5$\n- 50 points:\
  \ Original constraints\n\n-----Sample Input:-----\n3\n5 3 0 1\n4\n10 2 4 6\n3 1\
  \ 7 6\n4 3 1 5 9 7\n10 4 4 6\n3 1 7 6\n4 3 1 5 9 7\n\n-----Sample Output:-----\n\
  3\n2\n3\n\n-----EXPLANATION:-----\n- In the first testcase, only participant $4$\
  \ is involved in plagiarism, and thus not eligible for the scholarship. No user\
  \ has participated in previous years, and so no empty line is there in the sample.\
  \ All participants except participant $4$ are eligible for the scholarship, but\
  \ only three of them get it because $R = 3$.\n- Both second and third testcases\
  \ are the same, except for $R$. In both samples, only participants $2$, $8$ and\
  \ $10$ are eligible for scholarships.\n- In the second testcase, since the maximum\
  \ number of scholarships is $2$, only $2$ participants get scholarships.\n- In the\
  \ third testcase, all three eligible participants get scholarships."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calc_scholarships (n r p q : Nat) (x_arr y_arr : List Nat)\
  \ : Nat :=\n  sorry\n"
"vc-theorems": "theorem empty_arrays_result_bounded\n    (n r : Nat) (h1 : 0 < n)\
  \ (h2 : n ≤ 1000) (h3 : r ≤ 1000) :\n    let result := calc_scholarships n r 0 0\
  \ [] []\n    0 ≤ result ∧ result ≤ n ∧ result ≤ r ∧ result = min n r :=\n  sorry\n\
  \n\ntheorem full_ineligible_is_zero\n    (n r : Nat) (h1 : 0 < n) (h2 : n ≤ 100)\
  \ (h3 : r ≤ 100) :\n    let x_arr := List.range n\n    calc_scholarships n r n 0\
  \ x_arr [] = 0 :=\n  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
