"vc-description": "In this kata we are focusing on the Numpy python package. You must\
  \ write a function called `looper` which takes three integers `start, stop and number`\
  \ as input and returns a list from `start` to `stop` with `number` total values\
  \ in the list.  Five examples are shown below:\n\n```\nlooper(1, 5, 1) = [1.0]\n\
  looper(1, 5, 2) = [1.0, 5.0]\nlooper(1, 5, 3) = [1.0, 3.0, 5.0]\nlooper(1, 5, 4)\
  \ = [1.0, 2.333333333333333, 3.6666666666666665, 5.0]\nlooper(1, 5, 5) = [1.0, 2.0,\
  \ 3.0, 4.0, 5.0]\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def looper (start : Float) (stop : Float) (number : Nat) : List\
  \ Float := sorry\n\ntheorem looper_length {start stop : Float} {number : Nat} (h\
  \ : number > 0) : \n  (looper start stop number).length = number := sorry\n"
"vc-theorems": "theorem looper_start {start stop : Float} {number : Nat} (h : number\
  \ > 0) :\n  (looper start stop number).head! = start := sorry\n\n\ntheorem looper_stop\
  \ {start stop : Float} {number : Nat} (h : number > 1) :\n  (looper start stop number).getLast!\
  \ = stop := sorry\n\n\ntheorem looper_evenly_spaced {start stop : Float} {number\
  \ : Nat} (h : number > 2) :\n  let step := (stop - start) / Float.ofNat (number\
  \ - 1)\n  let result := looper start stop number\n  ∀ i : Nat, i < result.length\
  \ - 1 →\n    result[i+1]! - result[i]! = step := sorry\n\n\ntheorem looper_single_point\
  \ {start stop : Float} :\n  looper start stop 1 = [start] := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
