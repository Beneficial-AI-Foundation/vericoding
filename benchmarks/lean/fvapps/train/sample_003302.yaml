"vc-description": "We need a function (for commercial purposes) that may perform integer\
  \ partitions with some constraints.\nThe function should select how many elements\
  \ each partition should have.\nThe function should discard some \"forbidden\" values\
  \ in each partition.\nSo, create ```part_const()```, that receives three arguments.\n\
  ```part_const((1), (2), (3))```\n```\n(1) - The integer to be partitioned\n\n(2)\
  \ - The number of elements that each partition should have\n\n(3) - The \"forbidden\"\
  \ element that cannot appear in any partition\n```\n```part_const()``` should output\
  \ the amount of different integer partitions with the constraints required.\n\n\
  Let's see some cases:\n```python\npart_const(10, 3, 2) ------> 4 \n\n/// we may\
  \ have a total of 8 partitions of three elements (of course, the sum of the elements\
  \ of each partition should be equal 10) :\n[1, 1, 8], [1, 2, 7], [1, 3, 6], [1,\
  \ 4, 5], [2, 2, 6], [2, 3, 5], [2, 4, 4], [3, 3, 4]\n\nbut 2 is the forbidden element,\
  \ so we have to discard [1, 2, 7], [2, 2, 6], [2, 3, 5] and [2, 4, 4] \n\nSo the\
  \ obtained partitions of three elements without having 2 in them are:\n[1, 1, 8],\
  \ [1, 3, 6], [1, 4, 5] and [3, 3, 4] (4 partitions)///\n```\n\n```part_const()```\
  \ should have a particular feature:\n\n if we introduce ```0``` as the forbidden\
  \ element, we will obtain the total amount of partitions with the constrained number\
  \ of elements.\n\nIn fact, \n```python\npart_const(10, 3, 0) ------> 8 # The same\
  \ eight partitions that we saw above.\n```\n\nEnjoy it and happy coding!!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def part_const (t k n : Nat) : Nat := sorry\n\ntheorem part_const_non_negative\
  \ (t k n : Nat) :\n  part_const t k n ≥ 0 := sorry\n"
"vc-theorems": "theorem larger_parts_zero (t k : Nat) (h : k > t) :\n  part_const\
  \ t k n = 0 := sorry\n\n\ntheorem forbidden_decreases_count (t k n : Nat) (h : n\
  \ > 0) :\n  part_const t k 0 ≥ part_const t k n := sorry\n\n\ntheorem large_forbidden_same\
  \ (t k : Nat) :\n  part_const t k (t+1) = part_const t k 0 := sorry\n\n\ntheorem\
  \ single_partition_count (t : Nat) :\n  part_const t 1 0 = 1 := sorry\n\n\ntheorem\
  \ single_partition_forbidden (t : Nat) (h : t > 1) :\n  part_const t 1 t = 0 :=\
  \ sorry\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval part_const 10 3 2\n\n/--\ninfo:\
  \ 8\n-/\n#guard_msgs in\n#eval part_const 10 3 0\n\n/--\ninfo: 15\n-/\n#guard_msgs\
  \ in\n#eval part_const 15 5 3\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
