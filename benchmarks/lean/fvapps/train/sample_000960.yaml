"vc-description": "Chef and Paja are bored, so they are playing an infinite game of\
  \ ping pong. The rules of the game are as follows:\n- The players play an infinite\
  \ number of games. At the end of each game, the player who won it scores a point.\n\
  - In each game, one of the players serves. Chef serves in the first game.\n- After\
  \ every $K$ points are scored (regardless of which players scored them), i.e. whenever\
  \ $K$ games have been played since the last time the serving player changed, the\
  \ player that serves in the subsequent games changes: if Chef served in the game\
  \ that just finished, then Paja will serve in the next game and all subsequent games\
  \ until the serving player changes again; if Paja served, then Chef will serve.\n\
  The players got a little too caught up in the game and they forgot who is supposed\
  \ to serve in the next game. Will you help them determine that? So far, Chef has\
  \ scored $X$ points and Paja has scored $Y$ points.\n\n-----Input-----\n- The first\
  \ line of the input contains a single integer $T$ denoting the number of test cases.\
  \ The description of $T$ test cases follows.\n- The first and only line of each\
  \ test case contains three space-separated integers $X$, $Y$ and $K$.\n\n-----Output-----\n\
  For each test case, print a single line containing the string \"Chef\" if Chef is\
  \ supposed to serve next or \"Paja\" otherwise (without quotes).\n\n-----Constraints-----\n\
  - $1 \\le T \\le 50$\n- $0 \\le X, Y \\le 10^9$\n- $1 \\le K \\le 10^9$\n\n-----Subtasks-----\n\
  Subtask #1 (100 points): original constraints\n\n-----Example Input-----\n3\n1 3\
  \ 3\n5 7 2\n38657 76322 564\n\n-----Example Output-----\nPaja\nChef\nPaja\n\n-----Explanation-----\n\
  Example case 1: Chef served for the first three games, after that Paja started serving.\
  \ He only served in one game, so he is supposed to serve next."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def get_next_server (x y k : Nat) : String := sorry\n\ntheorem\
  \ get_next_server_zero_scores (k : Nat) (h : k > 0) : \n  get_next_server 0 0 k\
  \ = \"Chef\" := sorry \n"
"vc-theorems": "theorem get_next_server_valid_output (x y k : Nat) (h : k > 0) :\n\
  \  get_next_server x y k = \"Chef\" ∨ get_next_server x y k = \"Paja\" := sorry\n\
  \n\ntheorem get_next_server_alternates (x y k : Nat) (h : k > 0) :\n  get_next_server\
  \ (x + k) y k ≠ get_next_server x y k := sorry\n\n\ntheorem get_next_server_symmetrical\
  \ (score k : Nat) (h : k > 0) :\n  get_next_server score 0 k = get_next_server 0\
  \ score k := sorry\n\n/--\ninfo: 'Paja'\n-/\n#guard_msgs in\n#eval get_next_server\
  \ 1 3 3\n\n/--\ninfo: 'Chef'\n-/\n#guard_msgs in\n#eval get_next_server 5 7 2\n\n\
  /--\ninfo: 'Paja'\n-/\n#guard_msgs in\n#eval get_next_server 38657 76322 564\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
