"vc-description": "Lavanya and Nikhil have K months of holidays ahead of them, and\
  \ they want to go on exactly K road trips, one a month. They have a map of the various\
  \ cities in the world with the roads that connect them. There are N cities, numbered\
  \ from 1 to N. We say that you can reach city B from city A if there is a sequence\
  \ of roads that starts from city A and ends at city B. Note that the roads are bidirectional.\
  \ Hence, if you can reach city B from city A, you can also reach city A from city\
  \ B. \nLavanya first decides which city to start from. In the first month, they\
  \ will start from that city, and they will visit every city that they can reach\
  \ by road from that particular city, even if it means that they have to pass through\
  \ cities that they have already visited previously. Then, at the beginning of the\
  \ second month, Nikhil picks a city that they haven't visited till then. In the\
  \ second month, they first fly to that city and visit all the cities that they can\
  \ reach from that city by road. Then, in the third month, Lavanya identifies a city,\
  \ and they fly there and visit all cities reachable from there by road. Then in\
  \ the fourth month it is Nikhil's turn to choose an unvisited city to start a road\
  \ trip, and they alternate like this. Note that the city that they fly to (that\
  \ is, the city from where they start each month's road trip) is also considered\
  \ as being visited.\nEach city has some museums, and when they visit a city for\
  \ the first time, Lavanya makes them visit each of the museums there. Lavanya loves\
  \ going to museums, but Nikhil hates them. Lavanya always makes her decisions so\
  \ that they visit the maximum number of museums possible that month, while Nikhil\
  \ picks cities so that the number of museums visited that month is minimized.\n\
  Given a map of the roads, the number of museums in each city, and the number K,\
  \ find the total number of museums that they will end up visiting at the end of\
  \ K months. Print -1 if they will have visited all the cities before the beginning\
  \ of the Kth month, and hence they will be left bored at home for some of the K\
  \ months.\n\n-----Input-----\n- The first line contains a single integer, T, which\
  \ is the number of testcases. The description of each testcase follows.\n- The first\
  \ line of each testcase contains three integers: N, M and K, which represents the\
  \ number of cities, number of roads and the number of months.\n- The ith of the\
  \ next M lines contains two integers, ui and vi. This denotes that there is a direct\
  \ road between city ui and city vi.\n- The next line contains N integers, the ith\
  \ of which represents the number of museums in city i.\n\n-----Output-----\nFor\
  \ each test case, if they can go on K road trips, output a single line containing\
  \ a single integer which should be the total number of museums they visit in the\
  \ K months. Output -1 if they can't go on K road trips.\n\n-----Constraints-----\n\
  - 1 ≤ T ≤ 3\n- 1 ≤ N ≤ 106\n- 0 ≤ M ≤ 106\n- 1 ≤ K ≤ 106\n- 1 ≤ ui, vi ≤ N\n- There\
  \ is no road which goes from one city to itself. ie. ui ≠ vi.\n- There is at most\
  \ one direct road between a pair of cities.\n- 0 ≤ Number of museums in each city\
  \ ≤ 1000\n- Sum of N over all testcases in a file will be ≤ 1.5 * 106\n\n-----Subtasks-----\n\
  - Subtask 1 (11 points): M = 0\n- Subtask 2 (21 points): Each city has at most two\
  \ roads of which it is an end point. That is, for every i, there are at most two\
  \ roads (u, v) in the input, such that u = i or v = i.\n- Subtask 3 (68 points):\
  \ Original constraints.\n\n-----Example-----\nInput:\n3\n10 10 3\n1 3\n3 5\n5 1\n\
  1 6\n6 2\n5 6\n2 5\n7 10\n4 7\n10 9\n20 0 15 20 25 30 30 150 35 20\n10 10 2\n1 3\n\
  3 5\n5 1\n1 6\n6 2\n5 6\n2 5\n7 10\n4 7\n10 9\n20 0 15 20 25 30 30 150 35 20\n10\
  \ 10 5\n1 3\n3 5\n5 1\n1 6\n6 2\n5 6\n2 5\n7 10\n4 7\n10 9\n20 0 15 20 25 30 30\
  \ 150 35 20\n\nOutput:\n345\n240\n-1\n\n-----Explanation-----\nNotice that in all\
  \ the three testcases, everything is the same, except for the value of K. The following\
  \ figure represents the road map in these testcases. Each node denotes a city, with\
  \ a label of the form \"n (m)\", where n is the city number, between 1 and N, and\
  \ m is the number of museums in this city.  For example, the node with label \"\
  5 (25)\" represents city 5, which has 25 museums.\n\nTestcase 1: Lavanya will first\
  \ choose to fly to city 8. In the first month, they visit only that city, but they\
  \ visit 150 museums.\nThen in the second month, Nikhil could choose to fly to city\
  \ 3, and they visit the cities 1, 2, 3, 5 and 6, and visit 20 + 0 + 15 + 25 + 30\
  \ = 90 museums that month. Note that Nikhil could have instead chosen to fly to\
  \ city 1 or 2 or 5 or 6, and they would all result in the same scenario.\nThen,\
  \ Lavanya could choose city 7, and in the third month they will visit the cities\
  \ 7, 4, 10 and 9. Note that Lavanya could have chosen to fly to city 4 or 10 or\
  \ 9, and they would all result in the same scenario.\nIn total, they have visited\
  \ 345 museums in the three months (which is in fact all the museums), and that is\
  \ the answer.\nTestcase 2: It is same as the previous testcase, but now they have\
  \ only 2 months. So they visit only 150 + 90 = 240 museums in total.\nTestcase 3:\
  \ It is same as the previous testcase, but now they have 5 months of holidays. But\
  \ sadly, they finish visiting all the cities within the first three months itself,\
  \ and hence the answer is -1."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_road_trips (n m k : Nat) (roads : List (Nat × Nat)) (museums\
  \ : List Nat) : Int :=\nsorry\n"
"vc-theorems": "theorem zero_roads_k_gt_n {n k : Nat} (h : k > n) :\n  solve_road_trips\
  \ n 0 k [] (List.replicate n 0) = -1 := sorry\n\n\ntheorem zero_roads_k_leq_n {n\
  \ k : Nat} (h : k ≤ n) :\n  let result := solve_road_trips n 0 k [] (List.replicate\
  \ n 0)\n  ∃ x : Int, result = x ∧ result = 0 := sorry\n\n/--\ninfo: 345\n-/\n#guard_msgs\
  \ in\n#eval solve_road_trips 10 10 3 [(1, 3), (3, 5), (5, 1), (1, 6), (6, 2), (5,\
  \ 6), (2, 5), (7, 10), (4, 7), (10, 9)] [20, 0, 15, 20, 25, 30, 30, 150, 35, 20]\n\
  \n/--\ninfo: 240\n-/\n#guard_msgs in\n#eval solve_road_trips 10 10 2 [(1, 3), (3,\
  \ 5), (5, 1), (1, 6), (6, 2), (5, 6), (2, 5), (7, 10), (4, 7), (10, 9)] [20, 0,\
  \ 15, 20, 25, 30, 30, 150, 35, 20]\n\n/--\ninfo: -1\n-/\n#guard_msgs in\n#eval solve_road_trips\
  \ 10 10 5 [(1, 3), (3, 5), (5, 1), (1, 6), (6, 2), (5, 6), (2, 5), (7, 10), (4,\
  \ 7), (10, 9)] [20, 0, 15, 20, 25, 30, 30, 150, 35, 20]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
