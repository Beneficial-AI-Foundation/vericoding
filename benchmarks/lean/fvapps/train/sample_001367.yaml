"vc-description": "You are given a sequence $A_1, A_2, \\ldots, A_N$. You may perform\
  \ the following operation an arbitrary number of times (including zero): choose\
  \ two adjacent elements of this sequence, i.e. $A_i$, $A_{i+1}$ for some valid $i$,\
  \ and swap them. However, for each valid $i$, it is not allowed to choose $A_i$\
  \ (the element with the index $i$, regardless of its value at any point in time)\
  \ more than once in total during this process.\nFind the maximum of the sum $S =\
  \ \\sum_{i=1}^N A_i \\cdot i$.\n\n-----Input-----\n- The first line of the input\
  \ contains a single integer $T$ denoting the number of test cases. The description\
  \ of $T$ test cases follows.\n- The first line of each test case contains a single\
  \ integer $N$.\n- The second line contains $N$ space-separated integers $A_1, A_2,\
  \ \\ldots, A_N$.\n\n-----Output-----\nFor each test case, print a single line containing\
  \ one integer ― the maximum possible value of $S$.\n\n-----Constraints-----\n- $1\
  \ \\le T \\le 1,000$\n- $1 \\le N \\le 10^5$\n- $1 \\le A_i \\le 10^9$ for each\
  \ valid $i$\n- the sum of $N$ over all test cases does not exceed $10^6$\n\n-----Subtasks-----\n\
  Subtask #1 (50 points):\n- $N \\le 20$\n- the sum of $N$ over all test cases does\
  \ not exceed $200$\nSubtask #2 (50 points): original constraints\n\n-----Example\
  \ Input-----\n2\n4\n2 1 4 3\n4\n7 6 3 2\n\n-----Example Output-----\n30\n39\n\n\
  -----Explanation-----\nExample case 1: Swap the first and second element of the\
  \ initial sequence. Then, swap the third and fourth element of the resulting sequence.\
  \ The final sequence $A$ is $(1, 2, 3, 4)$.\nExample case 2: Swap the second and\
  \ third element to make the sequence $(7, 3, 6, 2)$."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def maximize_weighted_sum (n : Nat) (arr : List Nat) : Nat := sorry\n\
  \ntheorem single_element (arr : List Nat) (h : arr.length = 1) :\n  maximize_weighted_sum\
  \ 1 arr = arr[0] := sorry\n"
"vc-theorems": "theorem two_elements (arr : List Nat) (h : arr.length = 2) :\n  maximize_weighted_sum\
  \ 2 arr = max (arr[0] + 2 * arr[1]) (arr[1] + 2 * arr[0]) := sorry\n\n\ntheorem\
  \ monotonicity (arr : List Nat) (n : Nat) (h : n = arr.length) (h2 : n > 1) :\n\
  \  maximize_weighted_sum n arr ≥ maximize_weighted_sum (n-1) (arr.take (n-1)) :=\
  \ sorry\n\n/--\ninfo: 30\n-/\n#guard_msgs in\n#eval maximize_weighted_sum 4 [2,\
  \ 1, 4, 3]\n\n/--\ninfo: 39\n-/\n#guard_msgs in\n#eval maximize_weighted_sum 4 [7,\
  \ 6, 3, 2]\n\n/--\ninfo: 11\n-/\n#guard_msgs in\n#eval maximize_weighted_sum 3 [3,\
  \ 2, 1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
