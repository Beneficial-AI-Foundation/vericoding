"vc-description": "You will be given an array of numbers.\n\nFor each number in the\
  \ array you will need to create an object. \n\nThe object key will be the number,\
  \ as a string. The value will be the corresponding character code, as a string.\n\
  \nReturn an array of the resulting objects.\n\nAll inputs will be arrays of numbers.\
  \ All character codes are valid lower case letters. The input array will not be\
  \ empty."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def num_obj (nums: List Nat) : List (String × Char) := sorry\n\n\
  def charOfNat (n: Nat) : Char := sorry\n"
"vc-theorems": "theorem num_obj_length {nums: List Nat} : \n  (nums.all (· ≤ 127))\
  \ → \n  (num_obj nums).length = nums.length := sorry\n\n\ntheorem num_obj_key_matches_input\
  \ {nums: List Nat} :\n  (nums.all (· ≤ 127)) →\n  ∀ i, i < nums.length → \n  ((num_obj\
  \ nums).get ⟨i, by sorry⟩).1 = toString (nums.get ⟨i, by sorry⟩) := sorry \n\n\n\
  theorem num_obj_value_is_ascii {nums: List Nat} :\n  (nums.all (· ≤ 127)) →\n  ∀\
  \ i, i < nums.length →\n  charOfNat (nums.get ⟨i, by sorry⟩) = ((num_obj nums).get\
  \ ⟨i, by sorry⟩).2 := sorry\n\n\ntheorem num_obj_preserves_input {nums nums_copy:\
  \ List Nat} :\n  (nums.all (· ≤ 127)) →\n  nums_copy = nums →\n  nums_copy = nums\
  \ := sorry\n\n/--\ninfo: expected1\n-/\n#guard_msgs in\n#eval num_obj [118, 117,\
  \ 120]\n\n/--\ninfo: expected2\n-/\n#guard_msgs in\n#eval num_obj [101, 121, 110]\n\
  \n/--\ninfo: expected3\n-/\n#guard_msgs in\n#eval num_obj [100, 100, 116]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
