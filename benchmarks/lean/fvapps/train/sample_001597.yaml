"vc-description": "With your birthday coming up soon, your eccentric friend sent you\
  \ a message to say \"happy birthday\":\n\n    hhhappyyyy biirrrrrthddaaaayyyyyyy\
  \ to youuuu\n    hhapppyyyy biirtttthdaaay too youuu\n    happy birrrthdayy to youuu\n\
  \    happpyyyy birrtthdaaay tooooo youu\n\nAt first it looks like a song, but upon\
  \ closer investigation, you realize that your friend hid the phrase \"happy birthday\"\
  \ thousands of times inside his message. In fact, it contains it more than 2 million\
  \ times! To thank him, you'd like to reply with exactly how many times it occurs.\n\
  \nTo count all the occurences, the procedure is as follows: look through the paragraph\
  \ and find a `'h'`; then find an `'a'` later in the paragraph; then find an `'p'`\
  \ after that, and so on. Now count the number of ways in which you can choose letters\
  \ in this way to make the full phrase.\n\nMore precisely, given a text string, you\
  \ are to determine how many times the search string appears as a sub-sequence of\
  \ that string.\n\nWrite a function called `countSubsequences` that takes two arguments:\
  \ `needle`, the string to be search for and `haystack`, the string to search in.\
  \ In our example, `\"happy birthday\"` is the needle and the birthday message is\
  \ the haystack. The function should return the number of times `needle` occurs as\
  \ a sub-sequence of `haystack`.  Spaces are also considered part of the needle.\n\
  \nSince the answers can be very large, return only the last 8 digits of the answer\
  \ in case it exceeds 8 digits. The answers to the test cases will all be shorter\
  \ than 8 digits."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def count_subsequences (s₁ s₂ : String) : Nat :=\n  sorry\n"
"vc-theorems": "theorem count_subsequences_non_negative (s₁ s₂ : String) :\n  count_subsequences\
  \ s₁ s₂ < 10^8 :=\n  sorry\n\n\ntheorem count_subsequences_empty_needle (s : String)\
  \ :\n  count_subsequences \"\" s = 1 :=\n  sorry\n\n\ntheorem count_subsequences_empty_haystack\
  \ (s : String) :\n  s ≠ \"\" → count_subsequences s \"\" = 0 :=\n  sorry\n\n\ntheorem\
  \ count_subsequences_identical (s : String) :\n  s ≠ \"\" → count_subsequences s\
  \ s = 1 :=\n  sorry\n\n\ntheorem count_subsequences_repeated_chars (s : String)\
  \ (n : Nat) :\n  s ≠ \"\" →\n  n > 0 → n ≤ 5 →\n  let repeated := String.join (List.replicate\
  \ n s)\n  count_subsequences s repeated ≥ 1 :=\n  sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs\
  \ in\n#eval count_subsequences \"happy birthday\" \"appyh appy birth day\"\n\n/--\n\
  info: 2048\n-/\n#guard_msgs in\n#eval count_subsequences \"happy birthday\" \"hhaappyy\
  \ bbiirrtthhddaayy\"\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval count_subsequences\
  \ \"happy birthday\" \"happy holidays\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
