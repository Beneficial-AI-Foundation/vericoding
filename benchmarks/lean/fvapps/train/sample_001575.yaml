"vc-description": "Create a function that takes a Number as its argument and returns\
  \ a Chinese numeral string. You don't need to validate the input argument, it will\
  \ always be a Number in the range `[-99999.999, 99999.999]`, rounded to 8 decimal\
  \ places.\n\nSimplified Chinese numerals have characters representing each number\
  \ from 0 to 9 and additional numbers representing larger numbers like 10, 100, 1000,\
  \ and 10000. \n\n```\n0 líng 零\n1 yī 一\n2 èr 二\n3 sān 三\n4 sì 四\n5 wǔ 五\n6 liù 六\n\
  7 qī 七\n8 bā 八\n9 jiǔ 九\n10 shí 十\n100 bǎi 百\n1000 qiān 千\n10000 wàn 万\n```\n\n\
  Multiple-digit numbers are constructed by first the digit value (1 to 9) and then\
  \ the place multiplier (such as 10, 100, 1000), starting with the most significant\
  \ digit. A special case is made for 10 - 19 where the leading digit value (yī 一)\
  \ is dropped. Note that this special case is only made for the actual values 10\
  \ - 19, not any larger values.\n\n```\n10 十\n11 十一\n18 十八\n21 二十一\n110 一百一十\n123\
  \ 一百二十三\n24681 二万四千六百八十一\n```\n\nTrailing zeros are omitted, but interior zeros\
  \ are grouped together and indicated by a single 零 character without giving the\
  \ place multiplier.\n\n```\n10 十\n20 二十\n104 一百零四\n1004 一千零四\n10004 一万零四\n10000\
  \ 一万\n```\n\nDecimal numbers are constructed by first writing the whole number part,\
  \ and then inserting a point (diǎn 点), followed by the decimal portion. The decimal\
  \ portion is expressed using only the digits 0 to 9, without any positional characters\
  \ and without grouping zeros.\n\n```\n0.1 零点一\n123.45 一百二十三点四五\n```\n\nNegative\
  \ numbers are the same as other numbers, but add a 负 (fù) before the number.\n\n\
  For more information, please see http://en.wikipedia.org/wiki/Chinese_numerals."
"vc-preamble": "import Imports.AllImports\n\ndef to_chinese_numeral (n : Int) : String\
  \ := sorry\n\ndef DIGS : List String := [\"零\", \"一\", \"二\", \"三\", \"四\", \"五\"\
  , \"六\", \"七\", \"八\", \"九\"]"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def POWS : List String := [\"\", \"十\", \"百\", \"千\", \"万\"]\n\
  def NEG : String := \"负\"\n"
"vc-theorems": "theorem sign_property {n : Int} :\n  n < 0 → (to_chinese_numeral n).startsWith\
  \ NEG ∧\n  n ≥ 0 → ¬(to_chinese_numeral n).startsWith NEG := sorry\n\n\ntheorem\
  \ char_validation {n : Int} :\n  ∀ c : Char, c ∈ (to_chinese_numeral n).data →\n\
  \    c ∈ (NEG.data ++ (String.join DIGS).data ++ (String.join POWS).data) := sorry\
  \ \n\n\ntheorem single_digit {n : Int} (h1 : 1 ≤ n) (h2 : n ≤ 9) :\n  to_chinese_numeral\
  \ n = DIGS[n.toNat - 1]! := sorry\n\n\ntheorem teen_numbers {n : Int} (h1 : 10 ≤\
  \ n) (h2 : n ≤ 19) :\n  (to_chinese_numeral n).startsWith \"十\" ∧\n  (n > 10 → ∃\
  \ c : Char, c ∈ (String.join DIGS).data ∧ \n    (to_chinese_numeral n).data[1]?\
  \ = some c) := sorry\n\n/--\ninfo: '一百二十三点四五'\n-/\n#guard_msgs in\n#eval to_chinese_numeral\
  \ 123.45\n\n/--\ninfo: '负一千零四'\n-/\n#guard_msgs in\n#eval to_chinese_numeral -1004\n\
  \n/--\ninfo: '一万零四点零零五'\n-/\n#guard_msgs in\n#eval to_chinese_numeral 10004.005\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
