"vc-description": "We have the following recursive function:\n\n\n\nThe 15-th term;\
  \ ```f(14)``` is the first term in having more that 100 digits.\n\nIn fact, \n```\n\
  f(14) = 2596253046576879973769082409566059879570061514363339324718953988724415850732046186170181072783243503881471037546575506836249417271830960970629933033088\n\
  \nIt has 151 digits.\n```\nMake the function ```something_acci()```, that receives\
  \ ```num_dig``` (number of digits of the value) as unique argument.\n\n```something_acci()```\
  \ will output a tuple/array with the ordinal number in the sequence for the least\
  \ value in having equal or more than the given number of digits.\n\nLet's see some\
  \ cases:\n```python\nsomething_acci(20) == (12, 25)\n# f(11) = 1422313222839141753028416\n\
  \nsomething_acci(100) == (15, 151)\n```\nThe number of digits given will be always\
  \ more than 5. ```num_dig > 5```.\n\nHappy coding!!!\n\nAnd the name for this kata?\
  \ You have three words of the same meaning in Asian Languages."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def somethingAcci (num_digits: Nat) : Nat × Nat :=\n  sorry\n"
"vc-theorems": "theorem sequence_length_at_least_six (n: Nat) : (somethingAcci n).1\
  \ ≥ 6 :=\n  sorry\n\n\ntheorem final_digit_length_meets_request (n: Nat) : (somethingAcci\
  \ n).2 ≥ n :=\n  sorry\n\n\ntheorem sequence_grows_monotonically {n: Nat} (h: n\
  \ > 1) : \n  (somethingAcci n).1 ≥ (somethingAcci (n-1)).1 ∧ \n  (somethingAcci\
  \ n).2 ≥ (somethingAcci (n-1)).2 :=\n  sorry\n\n/--\ninfo: (10, 8)\n-/\n#guard_msgs\
  \ in\n#eval something_acci 5\n\n/--\ninfo: (11, 14)\n-/\n#guard_msgs in\n#eval something_acci\
  \ 10\n\n/--\ninfo: (12, 25)\n-/\n#guard_msgs in\n#eval something_acci 20\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
