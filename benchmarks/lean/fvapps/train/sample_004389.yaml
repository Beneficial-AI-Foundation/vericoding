"vc-description": "# YOUR MISSION\n\nAn [octahedron](https://en.wikipedia.org/wiki/Octahedron)\
  \ is an 8-sided polyhedron whose faces are triangles. \n\nCreate a method that outputs\
  \ a 3-dimensional array of an octahedron in which the height, width, and depth are\
  \ equal to the provided integer `size`, which is equal to the length from one vertex\
  \ to the opposite vertex on the octahedron.\n\n## EXAMPLE\n\n```python\ncreate_octahedron(7)\n\
  \n[\n    [[0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0,\
  \ 0, 0, 0],\n     [0, 0, 0, 1, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0],\n     [0,\
  \ 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0]],\n    \n    [[0, 0, 0, 0, 0, 0,\
  \ 0],\n     [0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 1, 0, 0, 0],\n     [0, 0, 1,\
  \ 1, 1, 0, 0],\n     [0, 0, 0, 1, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0],\n     [0,\
  \ 0, 0, 0, 0, 0, 0]],\n     \n    [[0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 1, 0,\
  \ 0, 0],\n     [0, 0, 1, 1, 1, 0, 0],\n     [0, 1, 1, 1, 1, 1, 0],\n     [0, 0,\
  \ 1, 1, 1, 0, 0],\n     [0, 0, 0, 1, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0]],\n \
  \   \n    [[0, 0, 0, 1, 0, 0, 0],\n     [0, 0, 1, 1, 1, 0, 0],\n     [0, 1, 1, 1,\
  \ 1, 1, 0],\n     [1, 1, 1, 1, 1, 1, 1],\n     [0, 1, 1, 1, 1, 1, 0],\n     [0,\
  \ 0, 1, 1, 1, 0, 0],\n     [0, 0, 0, 1, 0, 0, 0]],\n     \n    [[0, 0, 0, 0, 0,\
  \ 0, 0],\n     [0, 0, 0, 1, 0, 0, 0],\n     [0, 0, 1, 1, 1, 0, 0],\n     [0, 1,\
  \ 1, 1, 1, 1, 0],\n     [0, 0, 1, 1, 1, 0, 0],\n     [0, 0, 0, 1, 0, 0, 0],\n  \
  \   [0, 0, 0, 0, 0, 0, 0]],\n     \n    [[0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0,\
  \ 0, 0, 0, 0],\n     [0, 0, 0, 1, 0, 0, 0],\n     [0, 0, 1, 1, 1, 0, 0],\n     [0,\
  \ 0, 0, 1, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0]],\n\
  \     \n    [[0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0,\
  \ 0, 0, 0, 0],\n     [0, 0, 0, 1, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0],\n     [0,\
  \ 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0]]\n]\n```\n\nwhere each 1 represents\
  \ a cubic unit that the octahedron takes up and where 0 is a cubic unit of empty\
  \ space.\n\n# NOTES\n\n - The method should return an empty array/list if either\
  \ \n  - The input size is even (because then it wouldn't be an octahedron. It'd\
  \ be an irregular polyhedron with 26 sides)\n  - if the input size is 0 or less\n\
  \  - if input size is 1 (that's called a cube).\n - If there's any problems with\
  \ this kata (*COUGH* [my last Kata](https://www.codewars.com/kata/5bf76f953efcee37e2000061)\
  \ *COUGH*), I'll try to get them fixed in the evenings before 10pm."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def create_octahedron (size : Nat) : List (List (List Nat)) :=\
  \ sorry\n\ntheorem even_size_returns_empty (size : Int) :\n  size > 0 ∧ size % 2\
  \ = 0 → create_octahedron size.toNat = [] := sorry\n"
"vc-theorems": "theorem non_positive_returns_empty (size : Int) :\n  size ≤ 0 → create_octahedron\
  \ size.toNat = [] := sorry\n\n\ntheorem octahedron_size_properties {size : Nat}\
  \ (h1 : size ≥ 3) (h2 : size ≤ 11) (h3 : size % 2 = 1) :\n  let result := create_octahedron\
  \ size\n  let center := size / 2\n  -- Size checks\n  (result.length = size) ∧\n\
  \  (∀ layer ∈ result, layer.length = size) ∧\n  (∀ layer ∈ result, ∀ row ∈ layer,\
  \ row.length = size) ∧\n  -- Value checks (0 or 1)\n  (∀ layer ∈ result, ∀ row ∈\
  \ layer, ∀ v ∈ row, v = 0 ∨ v = 1) ∧\n  -- Center is 1\n  ((result.get! center).get!\
  \ center).get! center = 1 ∧\n  -- Corners are 0\n  ((result.get! 0).get! 0).get!\
  \ 0 = 0 ∧\n  ((result.get! 0).get! 0).get! (size-1) = 0 ∧\n  ((result.get! 0).get!\
  \ (size-1)).get! 0 = 0 ∧\n  ((result.get! 0).get! (size-1)).get! (size-1) = 0 ∧\n\
  \  ((result.get! (size-1)).get! 0).get! 0 = 0 ∧\n  ((result.get! (size-1)).get!\
  \ 0).get! (size-1) = 0 ∧\n  ((result.get! (size-1)).get! (size-1)).get! 0 = 0 ∧\n\
  \  ((result.get! (size-1)).get! (size-1)).get! (size-1) = 0 := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
