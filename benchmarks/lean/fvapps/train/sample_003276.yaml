"vc-description": "If you finish this kata, you can try [Insane Coloured Triangles](http://www.codewars.com/kata/insane-coloured-triangles)\
  \ by Bubbler, which is a ***much*** harder version of this one.\n\nA coloured triangle\
  \ is created from a row of colours, each of which is red, green or blue. Successive\
  \ rows, each containing one fewer colour than the last, are generated by considering\
  \ the two touching colours in the previous row. If these colours are identical,\
  \ the same colour is used in the new row. If they are different, the missing colour\
  \ is used in the new row. This is continued until the final row, with only a single\
  \ colour, is generated.\n\nThe different possibilities are:\n```\nColour here: \
  \       G G        B G        R G        B R\nBecomes colour:      G          R\
  \          B          G\n```\n\nWith a bigger example:\n```\nR R G B R G B B\n R\
  \ B R G B R B\n  G G B R G G\n   G R G B G\n    B B R R\n     B G R\n      R B\n\
  \       G\n```\n  \nYou will be given the first row of the triangle as a string\
  \ and its your job to return the final colour which would appear in the bottom row\
  \ as a string. In the case of the example above, you would the given `RRGBRGBB`\
  \ you should return `G`.\n\n* The input string will only contain the uppercase letters\
  \ `R, G, B` and there will be at least one letter so you do not have to test for\
  \ invalid input.\n* If you are only given one colour as the input, return that colour.\
  \ \n\n\n*Adapted from the 2017 British Informatics Olympiad*"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def triangle (s : String) : String := sorry\n\ntheorem triangle_returns_single_char\
  \ {s : String} \n  (h : ∀ c ∈ s.data, c = 'R' ∨ c = 'G' ∨ c = 'B') :\n  (triangle\
  \ s).length = 1 ∧ \n  (triangle s).data.head? = some 'R' ∨ \n  (triangle s).data.head?\
  \ = some 'G' ∨ \n  (triangle s).data.head? = some 'B' := sorry\n"
"vc-theorems": "theorem triangle_single_char_identity {s : String}\n  (h : s.length\
  \ = 1)\n  (h2 : ∀ c ∈ s.data, c = 'R' ∨ c = 'G' ∨ c = 'B') :\n  triangle s = s :=\
  \ sorry \n\n\ntheorem triangle_deterministic {s : String}\n  (h : s.length ≥ 2)\n\
  \  (h2 : ∀ c ∈ s.data, c = 'R' ∨ c = 'G' ∨ c = 'B') :\n  triangle s = triangle s\
  \ := sorry\n\n\ntheorem triangle_concatenation {s1 s2 : String}\n  (h1 : s1.length\
  \ > 0)\n  (h2 : s2.length > 0)\n  (h3 : ∀ c ∈ s1.data, c = 'R' ∨ c = 'G' ∨ c = 'B')\n\
  \  (h4 : ∀ c ∈ s2.data, c = 'R' ∨ c = 'G' ∨ c = 'B') :\n  (triangle (s1 ++ s2)).data.head?\
  \ = some 'R' ∨\n  (triangle (s1 ++ s2)).data.head? = some 'G' ∨\n  (triangle (s1\
  \ ++ s2)).data.head? = some 'B' := sorry\n\nend Property\n\n/--\ninfo: 'R'\n-/\n\
  #guard_msgs in\n#eval triangle \"GB\"\n\n/--\ninfo: 'B'\n-/\n#guard_msgs in\n#eval\
  \ triangle \"B\"\n\n/--\ninfo: 'G'\n-/\n#guard_msgs in\n#eval triangle \"RBRGBRB\"\
  \n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
