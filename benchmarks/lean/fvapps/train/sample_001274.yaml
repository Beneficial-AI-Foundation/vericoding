"vc-description": "A despotic king decided that his kingdom needed to be rid of corruption\
  \ and disparity. He called his prime minister and ordered that all corrupt citizens\
  \ be put to death. Moreover, he wanted this done quickly.\nThe wily prime minister\
  \ realised that investigating every citizen to decide who was corrupt and who was\
  \ not was rather difficult. So he decided on the following plan: He ordered all\
  \ the citizens to appear in the court one by one and declare their wealth.\nThe\
  \ king does not sit in the court all the time (he has other important business to\
  \ attend to - for instance, meet dignitaries from neighbouring kingdoms, spend time\
  \ with his family …) Whenever the king walks into the court, the prime minister\
  \ pulls out the richest man who has appeared before the court so far and is still\
  \ alive and beheads him for being corrupt. Since the rich are more likely to be\
  \ corrupt, he hopes to get rid of most of the corrupt and the king is happy as he\
  \ sees his policy being implemented enthusiastically.\nSuppose the wealth of the\
  \ citizens trooping into the court is\n1376518911241376518911241\\; 3\\; 7\\; 6\\\
  ; 5\\; 18\\;  9\\; 11\\;  2\\; 4\nand the king walked in three times: the first\
  \ time after the first four persons have seen the minister, the second time after\
  \ the first five persons have seen the minister and, finally after the first nine\
  \ persons have seen the minister.\nAt the king's first visit the richest person\
  \ to have met the minister has wealth $7$ and he would be beheaded. At the second\
  \ visit, the wealth of the richest person who has met the minister and is still\
  \ alive has wealth $6$ and so he would be beheaded. At the third visit the richest\
  \ person to have met the minister who is still alive has wealth $18$ and so he would\
  \ be beheaded.\nYou may assume that the input is such that whenever the king walks\
  \ in, it is always possible to behead someone.\nYour aim is to write a program that\
  \ will enable the prime minister to identify the richest man to have met the minister\
  \ and who is still alive quickly. You may assume that no two citizens have the same\
  \ wealth.\n\n-----Input:-----\nThe first line of the input consists of two numbers\
  \ $N$ and $M$, where $N$ is the number of citizens in the kingdom and M is the number\
  \ of visits to the court by the king.\nThe next $N+M$ lines describe the order in\
  \ which the $N$ citizens' appearances are interleaved with the $M$ visits by the\
  \ king. A citizen's visit is denoted by a positive integer, signifying his wealth.\
  \ You may assume that no two citizens have the same wealth. A visit by the king\
  \ is denoted by $-1$.\n\n-----Output:-----\nYour output should consist of $M$ lines,\
  \ where the $i^{th}$ line contains the wealth of the citizen who is beheaded at\
  \ the $i^{th}$ visit of the king.\n\n-----Constraints:-----\n- $1 \\leq M \\leq\
  \ 10000$.\n- $1 \\leq N \\leq 100000$.\n- You may assume that in $50 \\%$ of the\
  \ inputs $1 \\leq M \\leq 1000$ and $1 \\leq N \\leq 8000$.\n\n-----Sample Input-----\n\
  10 3\n1 \n3 \n7 \n6 \n-1 \n5 \n-1 \n18 \n9 \n11\n2\n-1\n4\n\n-----Sample Output-----\n\
  7\n6\n18"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solveExecutions (citizens : List Int) (visits : Nat) : List\
  \ Int := sorry\n\ntheorem basic_execution_length\n  {wealth_values : List Int}\n\
  \  (h₁ : ∀ x ∈ wealth_values, 1 ≤ x ∧ x ≤ 10000)\n  (h₂ : 1 ≤ wealth_values.length\
  \ ∧ wealth_values.length ≤ 20)\n  (h₃ : citizens = [wealth_values[0]!, -1])\n  :\
  \ (solveExecutions citizens 1).length = 1 := sorry\n"
"vc-theorems": "theorem basic_execution_value\n  {wealth_values : List Int}\n  (h₁\
  \ : ∀ x ∈ wealth_values, 1 ≤ x ∧ x ≤ 10000)\n  (h₂ : 1 ≤ wealth_values.length ∧\
  \ wealth_values.length ≤ 20)\n  (h₃ : citizens = [wealth_values[0]!, -1])\n  : (solveExecutions\
  \ citizens 1)[0]! = wealth_values[0]! := sorry\n\n\ntheorem single_pair_length\n\
  \  {wealth : Int}\n  (h₁ : 1 ≤ wealth ∧ wealth ≤ 10000)\n  (h₂ : citizens = [wealth,\
  \ -1])\n  : (solveExecutions citizens 1).length = 1 := sorry\n\n\ntheorem single_pair_value\n\
  \  {wealth : Int}\n  (h₁ : 1 ≤ wealth ∧ wealth ≤ 10000) \n  (h₂ : citizens = [wealth,\
  \ -1])\n  : (solveExecutions citizens 1)[0]! = wealth := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
