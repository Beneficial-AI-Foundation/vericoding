"vc-description": "Task\n\nCreate a top-down movement system that would feel highly\
  \ responsive to the player. In your Update method you have to check for the keys\
  \ that are currently being pressed, the keys correspond to the enum Direction shown\
  \ below, based on which key is pressed or released your method should behave this\
  \ way:\n\n1) When a key is first pressed, the player has to change his direction\
  \ to that of the current key, without moving\n\n2) If the key is still being pressed\
  \ during the next Update, the player will move towards his current direction using\
  \ these vectors: (Up = { 0, +1 } , Down = { 0, -1 }, Left = { -1, 0 }, Right = {\
  \ +1, 0 })\n\n3) If a new key is pressed, it will gain precedence over the previous\
  \ key and the player will act as per 1)\n\n4-A) If the current key (A) is released,\
  \ then the precedence will go back to the previous key (B) (or the one before it,\
  \ if (B) is not pressed anymore, and so on), then the player will behave as per\
  \ 1).\n\n4-B) If the current key is released, and no other keys are being pressed,\
  \ the player will stand still\n\n5) If all keys are released at once, the player\
  \ will not move nor change direction\n\n6) If multiple keys are pressed at once,\
  \ the order of precedence will be the following { Up, Down, Left, Right } \n\nExamples\n\
  \n    (n = pressed key, [n] = current key, p() = press, r() = release, (8,2,4,6\
  \ = up, down, left, right)):\n\n    [] , p(8) -> [8] , p(4,6) -> 86[4] , r(6) ->\
  \ 8[4] , r(4) -> [8] , r(8) -> []\n\n    [] , p(2486) -> 642[8] , r(2,8) -> 6[4]\
  \ , r(4,6) -> []\n\nThis is what you'll need to use in your code (NB: the tile coordinates\
  \ cannot be changed, you'll need to assign a new Tile each time the player moves):\n\
  \n```python\nclass Tile:\n\n    @property\n    def x(self):\n        return self._x\n\
  \n    @property\n    def y(self):\n        return self._y\n            \n    def\
  \ __str__(self):\n        return \"({},{})\".format(self._x, self._y)\n\nclass Input:\n\
  \n    @staticmethod\n    def get_state(direction): # 2, 4, 6, 8\n        return\
  \ Input.STATES[direction] # pressed = true, released = false\n```"
"vc-preamble": "import Imports.AllImports\n\ndef PlayerMovement.PREC : List Nat :=\
  \ [2, 4, 6, 8]\n\ndef PlayerMovement.new (x y : Int) : PlayerMovement := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def PlayerMovement.update (pm : PlayerMovement) : PlayerMovement\
  \ := sorry\n\ndef Input.set_states (states : List (Nat × Bool)) : Unit := sorry\n"
"vc-theorems": "theorem player_movement_initialization (x y : Int) :\n  let pm :=\
  \ PlayerMovement.new x y\n  pm.position.x = x ∧\n  pm.position.y = y ∧\n  pm.direction\
  \ = 8 ∧\n  pm.pressed = [false, false, false, false] ∧\n  pm.stack = [] := sorry\n\
  \n\ntheorem movement_preserves_invariants (states : List (Nat × Bool)) :\n  let\
  \ pm := PlayerMovement.new 0 0\n  let _ := Input.set_states states\n  let pm' :=\
  \ pm.update\n  List.length pm'.pressed = 4 ∧\n  (∀ x ∈ pm'.pressed, x = true ∨ x\
  \ = false) ∧\n  (pm'.direction = 2 ∨ pm'.direction = 4 ∨ pm'.direction = 6 ∨ pm'.direction\
  \ = 8) ∧\n  (∀ x ∈ pm'.stack, x = 2 ∨ x = 4 ∨ x = 6 ∨ x = 8) ∧\n  List.Nodup pm'.stack\
  \ := sorry\n\n\ntheorem precedence (pressed_keys : List (Nat × Bool)) \n  (h1 :\
  \ ∀ k ∈ pressed_keys, k.1 ∈ PlayerMovement.PREC)\n  (h2 : ∀ k ∈ pressed_keys, k.2\
  \ = true)\n  (h3 : pressed_keys.length > 0) :\n  let pm := PlayerMovement.new 0\
  \ 0\n  let _ := Input.set_states pressed_keys\n  let pm' := pm.update\n  pm'.direction\
  \ ∈ PlayerMovement.PREC ∧\n  ∀ k ∈ pressed_keys, \n    ∃ i j : Nat, \n      PlayerMovement.PREC.get?\
  \ i = some pm'.direction ∧\n      PlayerMovement.PREC.get? j = some k.1 ∧\n    \
  \  i ≤ j := sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval len player.stack\n\n\
  /--\ninfo: 4\n-/\n#guard_msgs in\n#eval len player.stack\n\n/--\ninfo: 1\n-/\n#guard_msgs\
  \ in\n#eval len player.stack\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
