"vc-description": "Who's interested in football?\nRayne Wooney has been one of the\
  \ top players for his football club for the last few years. But unfortunately, he\
  \ got injured during a game a few months back and has been out of play ever since.\n\
  He's got proper treatment and is eager to go out and play for his team again. Before\
  \ doing that, he has to prove to his fitness to the coach and manager of the team.\
  \ Rayne has been playing practice matches for the past few days. He's played N practice\
  \ matches in all.\nHe wants to convince the coach and the manager that he's improved\
  \ over time and that his injury no longer affects his game. To increase his chances\
  \ of getting back into the team, he's decided to show them stats of any 2 of his\
  \ practice games. The coach and manager will look into the goals scored in both\
  \ the games and see how much he's improved. If the number of goals scored in the\
  \ 2nd game(the game which took place later) is greater than that in 1st, then he\
  \ has a chance of getting in. Tell Rayne what is the maximum improvement in terms\
  \ of goal difference that he can show to maximize his chances of getting into the\
  \ team. If he hasn't improved over time, he's not fit to play. Scoring equal number\
  \ of goals in 2 matches will not be considered an improvement. Also, he will be\
  \ declared unfit if he doesn't have enough matches to show an improvement.\n\n-----Input:-----\n\
  The first line of the input contains a single integer T, the number of test cases.\n\
  Each test case begins with a single integer N, the number of practice matches Rayne\
  \ has played.\n\nThe next line contains N integers. The ith integer, gi, on this\
  \ line represents the number of goals Rayne scored in his ith practice match. The\
  \ matches are given in chronological order i.e. j > i means match number j took\
  \ place after match number i.\n\n-----Output:-----\nFor each test case output a\
  \ single line containing the maximum goal difference that Rayne can show to his\
  \ coach and manager. If he's not fit yet, print \"UNFIT\".\n\n-----Constraints:-----\n\
  1<=T<=10\n\n1<=N<=100000\n\n0<=gi<=1000000 (Well, Rayne's a legend! You can expect\
  \ him to score so many goals!)\n\n-----Example:-----Input:\n\n3\n\n6\n\n3 7 1 4\
  \ 2 4\n\n5\n\n5 4 3 2 1\n\n5\n\n4 3 2 2 3\n\nOutput:\n\n4\n\nUNFIT\n\n1\n\nExplanation:\n\
  \nIn the first test case, Rayne can choose the first and second game. Thus he gets\
  \ a difference of 7-3=4 goals. Any other pair would give him a lower improvement.\n\
  In the second test case, Rayne has not been improving in any match. Thus he's declared\
  \ UNFIT.\nNote: Large input data. Use faster I/O methods. Prefer scanf,printf over\
  \ cin/cout."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_max_improvement (games : List Nat) : Nat ⊕ Unit := sorry\
  \ \n\ntheorem find_max_improvement_positive (games : List Nat) :\n  let result :=\
  \ find_max_improvement games\n  ∀ imp, result = .inl imp → imp > 0 := sorry\n"
"vc-theorems": "theorem find_max_improvement_bounded (games : List Nat) : \n  let\
  \ result := find_max_improvement games\n  ∀ imp, result = .inl imp → \n    (∃ max\
  \ min : Nat, games.elem max ∧ games.elem min ∧ imp ≤ max - min) := sorry\n\n\ntheorem\
  \ find_max_improvement_exists (games : List Nat) :\n  let result := find_max_improvement\
  \ games\n  ∀ imp, result = .inl imp →\n    ∃ i j, i < j ∧ j < games.length ∧ games[i]!\
  \ < games[j]! := sorry\n\n\ntheorem find_max_improvement_unfit (games : List Nat)\
  \ :\n  let result := find_max_improvement games\n  result = .inr () →\n    ∀ i j,\
  \ i < j → j < games.length → games[j]! ≤ games[i]! := sorry\n\n\ntheorem find_max_improvement_monotonic\
  \ (games : List Nat) :\n  let result := find_max_improvement games \n  ∀ n, n ≤\
  \ games.length →\n    let subresult := find_max_improvement (games.take n)\n   \
  \ ∀ imp subImp,\n      result = .inl imp → \n      subresult = .inl subImp →\n \
  \     subImp ≤ imp := sorry\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval find_max_improvement\
  \ [3, 7, 1, 4, 2, 4]\n\n/--\ninfo: 'UNFIT'\n-/\n#guard_msgs in\n#eval find_max_improvement\
  \ [5, 4, 3, 2, 1]\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval find_max_improvement\
  \ [4, 3, 2, 2, 3]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
