"vc-description": "Complete the solution so that it returns true if it contains any\
  \ duplicate argument values. Any number of arguments may be passed into the function.\n\
  \nThe array values passed in will only be strings or numbers. The only valid return\
  \ values are `true` and `false`.\n\nExamples:\n```\nsolution(1, 2, 3)          \
  \   -->  false\nsolution(1, 2, 3, 2)          -->  true\nsolution('1', '2', '3',\
  \ '2')  -->  true\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solution {α : Type} [BEq α] : List α → Bool\n  | xs => sorry\n"
"vc-theorems": "theorem solution_matches_manual {α : Type} [BEq α] (xs : List α) :\n\
  \  solution xs = ∃ i j : Nat, i < j ∧ j < xs.length ∧ xs[i]? = xs[j]? := by sorry\n\
  \n\ntheorem empty_and_single_no_duplicates {α : Type} [BEq α] (xs : List α) :\n\
  \  xs.length ≤ 1 → solution xs = false := by sorry\n\n\ntheorem all_same_has_duplicates\
  \ {α : Type} [BEq α] (x : α) (n : Nat) :\n  n ≥ 2 → solution (List.replicate n x)\
  \ = true := by sorry\n  \n\ntheorem order_independent {α : Type} [BEq α] (xs : List\
  \ α) :\n  solution xs = solution xs.reverse := by sorry\n\n/--\ninfo: False\n-/\n\
  #guard_msgs in\n#eval solution 1 2 3\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval\
  \ solution 1 2 3 2\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval solution \"a\"\
  \ \"b\" \"c\" \"c\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
