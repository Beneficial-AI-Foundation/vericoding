"vc-description": "In this kata you need to write a function that will receive two\
  \ strings (```n1``` and ```n2```), each representing an integer as a binary number.\
  \ A third parameter will be provided (```o```) as a string representing one of the\
  \ following operators: add, subtract, multiply.\n\nYour task is to write the calculate\
  \ function so that it will perform the arithmetic and the result returned should\
  \ be a string representing the binary result.\n\nExamples:\n```\n1 + 1 === 10\n\
  10 + 10 === 100\n```\n\nNegative binary numbers are usually preceded by several\
  \ 1's. For this kata, negative numbers can be represented with the negative symbol\
  \ at the beginning of the string.\n\nExamples of negatives:\n```\n1 - 10 === -1\n\
  10 - 100 === -10\n```"
"vc-preamble": "import Imports.AllImports\n\ndef string_binary_to_int (s : String)\
  \ : Int := sorry\ndef calculate_to_int (s : String) : Int := sorry"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calculate (n1 n2 : String) (op : Op) : String := sorry\n\n\
  /-- Result is a valid binary string (possibly with leading minus) -/"
"vc-theorems": "theorem calculate_binary_valid (n1 n2 : String) (op : Op)\n  (h1 :\
  \ ∀ c ∈ n1.data, c = '0' ∨ c = '1')\n  (h2 : ∀ c ∈ n2.data, c = '0' ∨ c = '1') :\n\
  \  ∀ c ∈ (calculate n1 n2 op).data.filter (· ≠ '-'), c = '0' ∨ c = '1' := sorry\n\
  \n/-- Converting strings to ints and evaluating preserves values -/\n\ntheorem calculate_preserves_values\
  \ (n1 n2 : String) (op : Op)\n  (h1 : ∀ c ∈ n1.data, c = '0' ∨ c = '1')\n  (h2 :\
  \ ∀ c ∈ n2.data, c = '0' ∨ c = '1') :\n  match op with\n  | Op.add => calculate_to_int\
  \ (calculate n1 n2 op) = string_binary_to_int n1 + string_binary_to_int n2\n  |\
  \ Op.subtract => calculate_to_int (calculate n1 n2 op) = string_binary_to_int n1\
  \ - string_binary_to_int n2\n  | Op.multiply => calculate_to_int (calculate n1 n2\
  \ op) = string_binary_to_int n1 * string_binary_to_int n2\n  := sorry\n\n/-- Invalid\
  \ inputs raise errors -/\n\ntheorem calculate_invalid_input (n1 n2 : String) :\n\
  \  (∃ c ∈ n1.data, c ≠ '0' ∧ c ≠ '1') → Option.isNone (Option.some (calculate n1\
  \ n2 Op.add)) := sorry\n\n/--\ninfo: '10'\n-/\n#guard_msgs in\n#eval calculate \"\
  1\" \"1\" \"add\"\n\n/--\ninfo: '100'\n-/\n#guard_msgs in\n#eval calculate \"10\"\
  \ \"10\" \"multiply\"\n\n/--\ninfo: '10'\n-/\n#guard_msgs in\n#eval calculate \"\
  100\" \"10\" \"subtract\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
