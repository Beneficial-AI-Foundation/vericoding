"vc-description": "The country of Siruseri has A∗B$A*B$ districts. You want to create\
  \ A$A$ states from these districts, such that each state has exactly B$B$ districts,\
  \ and each district is part of exactly one state. You don't care about the geographical\
  \ location of the districts. You can pick any B$B$ districts and make it into a\
  \ state.\nThere are only two parties contesting in the coming elections: P1$P_1$\
  \ and P2$P_2$. You know the number of votes that each party receives in each district.\
  \ In the i-th district, P1$P_1$ gets ci$c_i$ votes and P2$P_2$ gets di$d_i$ votes.\
  \ You are guaranteed that all these 2∗A∗B$2*A*B$ integers (the number of votes received\
  \ by each party in the districts) are distinct. Also, both A$A$ and B$B$ are odd.\
  \ \nSuppose you have chosen which districts belong to which states, then, to find\
  \ out who wins any particular state, they follow a weird rule: Suppose the number\
  \ of votes that P1$P_1$ gets in the B$B$ districts of a particular state are x1,x2,…,xB$x_1,\
  \ x_2, \\ldots, x_B$, and the number of votes that P2$P_2$ gets in the B$B$ districts\
  \ of this state are y1,y2,…,yB$y_1, y_2, \\ldots, y_B$. Then among all these 2∗B$2*B$\
  \ numbers, the largest number is chosen (note that we are guaranteed of an unique\
  \ largest number). If that number is some xi$x_i$, then P1$P_1$ wins this state.\
  \ If the largest number is some yj$y_j$, then P2$P_2$ wins this state.\nYou secretly\
  \ support the party P1$P_1$, and hence you want to assign the districts to states,\
  \ in such a way, that the number of states won by P1$P_1$ is maximized. Find this\
  \ maximum number of states that P1$P_1$ can win.\nNote that ci$c_i$ and di$d_i$\
  \ will always remain associated with the i-th district. If the i-th district gets\
  \ assigned to a particular state, then both ci$c_i$ and di$d_i$ will be considered\
  \ when deciding who won that state.\n\n-----Input:-----\n- The first line of the\
  \ input contains a single integer, T$T$, the number of testcases. The description\
  \ of each testcase follows.\n- The first line of each testcase contains two integers,\
  \ A$A$ and B$B$.\n- The second line of each testcase contains A∗B$A*B$ integers:\
  \ c1,c2,…,cA∗B$c_1, c_2, \\ldots, c_{A*B}$, the number of votes won by P1$P_1$ in\
  \ the districts.\n- The third line of each testcase contains A∗B$A*B$ integers:\
  \ d1,d2,…,dA∗B$d_1, d_2, \\ldots, d_{A*B}$, the number of votes won by P2$P_2$ in\
  \ the districts.\n\n-----Output:-----\nFor each testcase output a single line which\
  \ contains the maximum number of states that P1$P_1$ can win.\n\n-----Constraints:-----\n\
  - 1≤T≤5$1 \\leq T \\leq 5$\n- 1≤A,B$1 \\leq A, B$\n- A∗B≤105$A*B \\leq 10^5$\n-\
  \ A$A$, B$B$ are odd\n- 1≤ci,di≤109$1 \\leq c_i, d_i \\leq 10^9$\n- All the ci$c_i$\
  \ and di$d_i$ will be distinct.\n\n-----Sample Input:-----\n3\n1 3\n4 2 9\n5 6 7\n\
  1 3\n4 2 9\n5 10 7\n3 3\n7 14 11 4 15 5 20 1 17\n2 13 16 9 19 6 12 8 10\n\n-----Sample\
  \ Output:-----\n1\n0\n3\n\n-----Explanation:-----\nTestcase 1: Since you have to\
  \ form only 1 state, there is no choice, but to put all the 3 districts in that\
  \ same state. Now to figure out who wins that single state, we take the maximum\
  \ among {4, 2, 9, 5, 6, 7}. The maximum is 9, and that belongs to P1$P_1$. Hence\
  \ P1$P_1$ wins this state. And because they have won 1 state, the answer is 1.\n\
  Testcase 2: Similarly, there is no choice here. To figure out who wins that single\
  \ state, we take the maximum among {4, 2, 9, 5, 10, 7}. The maximum is 10, and that\
  \ belongs to P2$P_2$. Hence P2$P_2$ wins this state. And because P1$P_1$ have won\
  \ no states, the answer is 0.\nTestcase 3: We need to make three states with three\
  \ districts each. Suppose we that the 3rd, 5th and 7th districts and form a state,\
  \ the votes in them would be {11, 16, 15, 19, 20, 12}. The max among these is 20,\
  \ and that belongs to P1$P_1$. Hence P1$P_1$ would win this state. \nSimilarly,\
  \ suppose we make the second state with the 2nd, 4th and 8th districts, the votes\
  \ in them would be {14, 13, 4, 9, 1, 8}. The max among these is 14, and that belongs\
  \ to P1$P_1$. Hence P1$P_1$ would win this state. \nThe remaining three districts:\
  \ 1st, 6th and 9th districts form the third state. The votes in them would be {7,\
  \ 2, 5, 6, 17, 10}. The max among these is 17, and that belongs to P1$P_1$. Hence\
  \ P1$P_1$ would win this state. \nIn this situation, P1$P_1$ wins three states.\
  \ You obviously cannot do any better. Hence the answer is 3."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def max_states_won (A B : Nat) (c_votes d_votes : List Nat) : Nat\
  \ :=\n  sorry\n"
"vc-theorems": "theorem max_states_won_bounded {A B : Nat} {c_votes d_votes : List\
  \ Nat}\n  (h1 : 0 < A) (h2 : 0 < B)\n  (h3 : c_votes.length = A * B) (h4 : d_votes.length\
  \ = A * B) :\n  0 ≤ max_states_won A B c_votes d_votes ∧ max_states_won A B c_votes\
  \ d_votes ≤ A :=\nsorry\n\n\ntheorem max_states_won_zero_votes {A B : Nat} {d_votes\
  \ : List Nat}\n  (h1 : 0 < A) (h2 : 0 < B)\n  (h3 : d_votes.length = A * B) :\n\
  \  max_states_won A B (List.replicate (A*B) 0) d_votes = 0 :=\nsorry\n\n\ntheorem\
  \ max_states_won_dominant_votes {A B : Nat} {d_votes : List Nat}\n  (h1 : 0 < A)\
  \ (h2 : 0 < B)\n  (h3 : d_votes.length = A * B) :\n  let max_d := d_votes.foldl\
  \ Nat.max 0\n  let dominant_votes := List.replicate (A*B) (max_d + 1)\n  max_states_won\
  \ A B dominant_votes d_votes = A :=\nsorry\n\n\ntheorem max_states_won_empty {A\
  \ B : Nat}\n  (h1 : 0 < A) (h2 : 0 < B) :\n  max_states_won A B (List.replicate\
  \ (A*B) 0) (List.replicate (A*B) 0) = 0 :=\nsorry\n\n/--\ninfo: 1\n-/\n#guard_msgs\
  \ in\n#eval max_states_won 1 3 [4, 2, 9] [5, 6, 7]\n\n/--\ninfo: 0\n-/\n#guard_msgs\
  \ in\n#eval max_states_won 1 3 [4, 2, 9] [5, 10, 7]\n\n/--\ninfo: 3\n-/\n#guard_msgs\
  \ in\n#eval max_states_won 3 3 [7, 14, 11, 4, 15, 5, 20, 1, 17] [2, 13, 16, 9, 19,\
  \ 6, 12, 8, 10]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
