"vc-description": "You are given two positive integers ```a``` and ```b```.\n\nYou\
  \ can perform the following operations on ```a``` so as to obtain ```b``` :\n```\n\
  (a-1)/2   (if (a-1) is divisible by 2)\na/2       (if a is divisible by 2)\na*2\n\
  ```\n```b``` will always be a power of 2.\n\nYou are to write a function ```operation(a,b)```\
  \ that efficiently returns the minimum number of operations required to transform\
  \ ```a``` into ```b```.\n\nFor example :\n```\noperation(2,8) -> 2\n2*2 = 4\n4*2\
  \ = 8\n\noperation(9,2) -> 2\n(9-1)/2 = 4\n4/2 = 2\n\noperation(1024,1024) -> 0\n\
  ```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def operation (a b : Nat) : Nat := sorry\n\ndef isPowerOf2 (n :\
  \ Nat) : Bool := sorry\n\n-- Operations are symmetric between powers of 2"
"vc-theorems": "theorem operation_symmetry (a b : Nat) :\n  a ≠ 0 → b ≠ 0 → isPowerOf2\
  \ a → isPowerOf2 b → \n  operation a b = operation b a := sorry\n\n-- Number of\
  \ operations is non-negative\n\ntheorem operation_positive (n target : Nat) : \n\
  \  n ≠ 0 → operation n target ≥ 0 := sorry\n\n-- Triangle inequality through power\
  \ of 2\n\ntheorem operation_triangle_inequality (a b power2 : Nat) :\n  a ≠ 0 →\
  \ b ≠ 0 → isPowerOf2 power2 →\n  operation a b ≤ operation a power2 + operation\
  \ power2 b := sorry\n\n-- Self operation vs through power of 2\n\ntheorem operation_with_self\
  \ (n pow2 : Nat) :\n  n ≠ 0 → isPowerOf2 pow2 →\n  operation n n ≤ 2 * operation\
  \ n pow2 := sorry\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval operation 1 1\n\n/--\n\
  info: 1\n-/\n#guard_msgs in\n#eval operation 2 4\n\n/--\ninfo: 4\n-/\n#guard_msgs\
  \ in\n#eval operation 3 8\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval operation 4\
  \ 16\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval operation 4 1\n\n/--\ninfo: 2\n\
  -/\n#guard_msgs in\n#eval operation 1 4\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
