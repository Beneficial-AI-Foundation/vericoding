"vc-description": "In this kata, your job is to return the two distinct highest values\
  \ in a list. If there're less than 2 unique values, return as many of them, as possible.\n\
  \nThe result should also be ordered from highest to lowest.\n\nExamples:\n\n```\n\
  [4, 10, 10, 9]  =>  [10, 9]\n[1, 1, 1]  =>  [1]\n[]  =>  []\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def two_highest (ls : List Int) : Option (List Int) := sorry\n\n\
  theorem two_highest_length_at_most_2 (ls : List Int) :\n  match two_highest ls with\n\
  \  | none => True\n  | some result => result.length ≤ 2\n  := sorry\n"
"vc-theorems": "theorem two_highest_elements_from_input (ls : List Int) :\n  match\
  \ two_highest ls with\n  | none => True\n  | some result => ∀ x ∈ result, x ∈ ls\n\
  \  := sorry\n\n\ntheorem two_highest_descending_order (ls : List Int) :\n  match\
  \ two_highest ls with\n  | none => True\n  | some result => result.length ≤ 1 ∨\
  \ result[0]! ≥ result[1]!\n  := sorry\n\n\ntheorem two_highest_unique_elements (ls\
  \ : List Int) :\n  match two_highest ls with\n  | none => True\n  | some result\
  \ => ∀ i j, i < result.length → j < result.length → i ≠ j → result[i]! ≠ result[j]!\n\
  \  := sorry\n\n\ntheorem two_highest_maximal_elements (ls : List Int) :\n  !ls.isEmpty\
  \ →\n  match two_highest ls with\n  | none => False\n  | some result =>\n    (result.length\
  \ < 2 → ∀ (x y : Int), x ∈ ls ∧ y ∈ ls → x = y) ∧\n    (result.length = 2 → \n \
  \     (∀ x ∈ ls, x ≤ result[0]!) ∧\n      (∀ x ∈ ls, x ≤ result[0]! ∨ x = result[1]!))\n\
  \  := sorry\n\n\ntheorem two_highest_empty_input :\n  two_highest [] = some [] :=\
  \ sorry\n\n\ntheorem two_highest_single_element (x : Int) :\n  two_highest [x] =\
  \ some [x] := sorry\n\n/--\ninfo: []\n-/\n#guard_msgs in\n#eval two_highest []\n\
  \n/--\ninfo: [15]\n-/\n#guard_msgs in\n#eval two_highest [15]\n\n/--\ninfo: [20,\
  \ 17]\n-/\n#guard_msgs in\n#eval two_highest [15, 20, 20, 17]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
