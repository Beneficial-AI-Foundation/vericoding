"vc-description": "# Definition\n\n**_Extra perfect number_** *is the number that*\
  \ **_first_** and **_last_** *bits* are **_set bits_**.\n\n____\n\n# Task\n\n**_Given_**\
  \  *a positive integer*   `N` ,  **_Return_** the **_extra perfect numbers_** *in\
  \ range from*  `1`  to  `N` .\n____\n\n# Warm-up (Highly recommended)\n\n# [Playing\
  \ With Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\
  ___\n\n# Notes \n\n\n* **_Number_** *passed is always*  **_Positive_** .\n\n* **_Returned\
  \ array/list_** should *contain the extra perfect numbers in ascending order*  **from\
  \ lowest to highest**\n___\n\n# Input >> Output Examples\n\n```\nextraPerfect(3)\
  \  ==>  return {1,3}\n```\n## **_Explanation_**:\n\n# (1)10 =(1)2\n\n**First** and\
  \ **last** bits as **_set bits_**.\n\n# (3)10 = (11)2\n\n**First** and **last**\
  \ bits as **_set bits_**.\n___\n\n```\nextraPerfect(7)  ==>  return {1,3,5,7}\n\
  ```\n\n## **_Explanation_**:\n\n# (5)10 = (101)2\n\n**First** and **last** bits\
  \ as **_set bits_**.\n\n# (7)10 = (111)2\n\n**First** and **last** bits as **_set\
  \ bits_**.\n___\n___\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\
  \n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\
  \n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n\
  ___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou"
"vc-preamble": "import Imports.AllImports\n\ndef extra_perfect (n : Nat) : List Nat\
  \ :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isSorted (xs : List Nat) : Prop :=\n  ∀ i j, i < j → j < List.length\
  \ xs → xs[i]! < xs[j]!\n"
"vc-theorems": "theorem extra_perfect_only_odd {n : Nat} : \n  ∀ x, x ∈ extra_perfect\
  \ n → x % 2 = 1 :=\n  sorry\n\n\ntheorem extra_perfect_bounded {n : Nat} :\n  ∀\
  \ x, x ∈ extra_perfect n → x ≤ n :=\n  sorry\n\n\ntheorem extra_perfect_length {n\
  \ : Nat} :\n  List.length (extra_perfect n) = (n + 1) / 2 :=\n  sorry\n\n\n\n\n\
  theorem extra_perfect_binary_ones {n : Nat} :\n  ∀ x, x ∈ extra_perfect n →\n  \
  \  ((x &&& 1) = 1) ∧ \n    ((x &&& (1 <<< (Nat.log2 x))) = (1 <<< (Nat.log2 x)))\
  \ :=\n  sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
