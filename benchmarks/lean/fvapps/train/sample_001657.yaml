"vc-description": "This kata is inspired by Space Invaders (Japanese: スペースインベーダー),\
  \ an arcade video game created by Tomohiro Nishikado and released in 1978.\nAlien\
  \ invaders are attacking Earth and you've been conscripted to defend.\nThe Bad News:\
  \ You performed poorly in the manual training. As a result, you're ranked low priority\
  \ and you're piloting a space jalopy.\nThe Good News: Your coding skill is better\
  \ than your piloting and you know the movement pattern of the alien spaceships.\n\
  You're going to program an algorithm that aids in shooting down the incoming alien\
  \ wave despite your limitations.\nInput\nThe action takes place on an m x n matrix.\
  \ Your function will receive two arguments:\n\na 2-D array where each subarray represents\
  \ a row of alien ships. Subarrays consist of integers that represent each alien\
  \ ship. Zero values (0) are empty spaces.\n        \nyour [row,column] coordinates\n\
  \nThe width (n) of a row is equal to the length of a subarray in the first argument\
  \ and all rows are of the same length.\nYour row coordinate will be the last row\
  \ of the matrix (m - 1).\nAlien Ship Movement Pattern\n\nEach alien ship is given\
  \ in the form of an integer that represents its movement speed and direction.\n\
  Alien ships move left or right. A positive integer means an alien moves right, a\
  \ negative integer means an alien moves left. The absolute value of the integer\
  \ is the distance the alien moves in 1 turn.\nWhen an alien reaches an edge, it\
  \ moves down one position and reverses lateral (left/right) direction.\n\nYour Ship's\
  \ Limitations\n\nYour position is fixed.\nYour pulse cannon has a time delay of\
  \ 1 turn. After the delay, your cannon blasts the first target in its path.\nYou\
  \ can fire up to one shot per turn.\n\n\nOutput\nYour function should return an\
  \ array of integers. Each integer represents the turn for each shot fired from your\
  \ ship's cannon. If it is not possible to destroy all alien ships before they reach\
  \ the last row, return null or None.\nTest Example\n\nAbove: Turn 0 (Initial State)\n\
  Below: Turn 1\n\nThe images above represent the matrix states at Turn 0 and Turn\
  \ 1 for the test example below. Note the following:\n\nMultiple alien ships can\
  \ occupy the same space concurrently. The red alien at [0,2] and the light blue\
  \ alien at [0,7] at turn 0 will both end up at position [0,4] at turn 1.\nThe pink\
  \ alien (1) at [0,9] at turn 0 is already at the right edge, so it moves one space\
  \ down and changes direction from right to left.\nThe yellow alien (6) at [0,6]\
  \ at turn 0 ends up at [1,7] at turn 1.\nThe green alien (7) at [0,8] at turn 0\
  \ ends up at [1,4] (white alien) and gets shot down by your cannon at turn 1. Therefore,\
  \ the time of registering your first shot is at turn 0.\n\nIn the test example,\
  \ there is only one subarray in the first argument, meaning only the top row (row\
  \ 0) of the matrix is occupied at the initial state.\n\n```python\nalien_wave =\
  \ [[3,1,2,-2,2,3,6,-3,7,1]]\nposition = [6,4]\n\nblast_sequence(alien_wave,position)#\
  \ [0, 2, 3, 4, 5, 9, 10, 13, 19, 22]\n```\n\nOther Technical Details\n\nIn the event\
  \ where multiple alien ships occupy the same position and the position is the target\
  \ of your cannon fire, the fastest alien ship will be destroyed. If two ships are\
  \ going at the same speed in opposite directions, the ship moving to the right will\
  \ be destroyed.\nAll alien ship movement speeds will be less than the width of the\
  \ matrix.\nAlien count upper bound is 228\nInputs will always be valid\n\n\nIf you\
  \ enjoyed this kata, be sure to check out [my other katas](https://www.codewars.com/users/docgunthrop/authored)."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def blast_sequence (aliens : List (List Int)) (position : Int ×\
  \ Int) : Option (List Int) := sorry\n\ntheorem empty_aliens {aliens : List (List\
  \ Int)} {pos : Int × Int} \n  (h1 : ∀ row ∈ aliens, ∀ x ∈ row, x = 0)\n  (h2 : aliens.length\
  \ > 0) \n  (h3 : ∀ row ∈ aliens, row.length > 0)\n  (h4 : ∀ row ∈ aliens, row.length\
  \ ≤ 20)\n  (h5 : aliens.length = 1)\n  (h6 : pos.1 ≥ 0)\n  (h7 : pos.1 ≤ 50) \n\
  \  (h8 : pos.2 ≥ 0)\n  (h9 : pos.2 ≤ 19) :\n  blast_sequence aliens pos = some []\
  \ := sorry\n"
"vc-theorems": "theorem result_properties {aliens : List (List Int)} {pos : Int ×\
  \ Int} {result : List Int}\n  (h1 : ∀ row ∈ aliens, row.length > 0)\n  (h2 : ∀ row\
  \ ∈ aliens, row.length ≤ 10)\n  (h3 : aliens.length > 0)\n  (h4 : aliens.length\
  \ = 1)\n  (h5 : ∀ row ∈ aliens, ∀ x ∈ row, x ≥ -5 ∧ x ≤ 5)\n  (h6 : pos.1 ≥ 0)\n\
  \  (h7 : pos.1 ≤ 20)\n  (h8 : pos.2 ≥ 0) \n  (h9 : pos.2 ≤ 9)\n  (h10 : blast_sequence\
  \ aliens pos = some result) :\n  (∀ i < result.length - 1, result[i]! < result[i+1]!)\
  \ ∧ \n  (∀ x ∈ result, x ≥ 0) := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
