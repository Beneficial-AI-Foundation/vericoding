"vc-description": "Find the second-to-last element of a list.\n\nExample:\n```python\n\
  penultimate([1,2,3,4])            # => 3\npenultimate([\"Python is dynamic\"]) #\
  \ => 'i'\n(courtesy of [haskell.org](http://www.haskell.org/haskellwiki/99_questions/1_to_10))\n\
  ```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def penultimate {α : Type} (xs : List α) : Option α := sorry\n\n\
  theorem penultimate_list_eq_secondlast {α : Type} (xs : List α) (h : xs.length ≥\
  \ 2) :\n  penultimate xs = xs.get? (xs.length - 2) := \nsorry\n"
"vc-theorems": "theorem penultimate_string_eq_secondlast (s : String) (h : s.length\
  \ ≥ 2) :\n  penultimate (s.toList) = (s.toList).get? (s.length - 2) := \nsorry\n\
  \n\ntheorem penultimate_empty_is_none {α : Type} (xs : List α) (h : xs.length <\
  \ 2) :\n  penultimate xs = none :=\nsorry\n\n\ntheorem penultimate_singleton_is_none\
  \ {α : Type} (x : α) :\n  penultimate [x] = none :=\nsorry\n\n/--\ninfo: 3\n-/\n\
  #guard_msgs in\n#eval penultimate [1, 2, 3, 4]\n\n/--\ninfo: 'l'\n-/\n#guard_msgs\
  \ in\n#eval penultimate \"hello\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
