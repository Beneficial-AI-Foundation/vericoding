"vc-description": "**DESCRIPTION:**\n\n  Your strict math teacher is teaching you\
  \ about right triangles, and the Pythagorean Theorem --> a^2 + b^2 = c^2 whereas\
  \ a and b are the legs of the right triangle and c is the hypotenuse of the right\
  \ triangle. On the test however, the question asks: What are the possible integer\
  \ lengths for the other side of the triangle, but since you never learned anything\
  \ about that in class, you realize she meant What are the possible integer lengths\
  \ for the other side of the right triangle. Because you want to address the fact\
  \ that she asked the wrong question and the fact that you're smart at math, you've\
  \ decided to answer all the possible values for the third side EXCLUDING the possibilities\
  \ for a right triangle in increasing order.\n  \n**EXAMPLES:**\n\n```\nside_len(1,\
  \ 1) --> [1]\nside_len(3, 4) --> [2, 3, 4, 6]\nside_len(4, 6) --> [3, 4, 5, 6, 7,\
  \ 8, 9]\n```\n**RETURN:**\n\n  Return your answer as a list of all the possible\
  \ third side lengths of the triangle without the right triangles in increasing order.\n\
  \  \nBy the way, after finishing this kata, please try some of my other katas: [Here](https://www.codewars.com/collections/tonylicodings-authored-katas)\n\
  \nNOTE:\n  \n  When given side_len(x, y), y will always be greater than or equal\
  \ to x. Also, if a right triangle's legs are passed in, exclude the hypotenuse.\
  \ If a right triangle's leg and hypotenuse are passed in, exclude the other leg."
"vc-preamble": "import Imports.AllImports\n\ndef abs (n : Int) : Nat :=\n  if n ≥\
  \ 0 then n.toNat else (-n).toNat\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def side_len (x y : Nat) : List Nat := sorry\n\ndef isSorted (l\
  \ : List Nat) : Prop :=\n  ∀ i j, i < j → j < l.length → \n    match l.get? i, l.get?\
  \ j with\n    | some vi, some vj => vi ≤ vj\n    | _, _ => True\n"
"vc-theorems": "theorem triangle_inequality {x y : Nat} (h1 : x > 0) (h2 : y > 0)\
  \ (z : Nat) \n  (h3 : z ∈ side_len x y) :\n  z < x + y ∧ \n  x < y + z ∧ \n  y <\
  \ x + z ∧ \n  z > (if x ≥ y then x - y else y - x) := sorry\n\n\ntheorem no_pythagorean_triples\
  \ {x y : Nat} (h1 : x > 0) (h2 : y > 0) (z : Nat) \n  (h3 : z ∈ side_len x y) :\n\
  \  z * z ≠ (if x * x ≥ y * y then x * x - y * y else y * y - x * x) ∧\n  z * z ≠\
  \ x * x + y * y := sorry\n\n\n\n\ntheorem symmetric {x y : Nat} (h1 : x > 0) (h2\
  \ : y > 0) :\n  side_len x y = side_len y x := sorry\n\n/--\ninfo: [1]\n-/\n#guard_msgs\
  \ in\n#eval side_len 1 1\n\n/--\ninfo: [2, 3, 4, 6]\n-/\n#guard_msgs in\n#eval side_len\
  \ 3 4\n\n/--\ninfo: [3, 4, 5, 6, 7, 8, 9]\n-/\n#guard_msgs in\n#eval side_len 4\
  \ 6\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
