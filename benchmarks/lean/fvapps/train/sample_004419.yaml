"vc-description": "In graph theory, a graph is a collection of nodes with connections\
  \ between them.\nAny node can be connected to any other node exactly once, and can\
  \ be connected to no nodes, to some nodes, or to every other node.\nNodes cannot\
  \ be connected to themselves\nA path through a graph is a sequence of nodes, with\
  \ every node connected to the node following and preceding it.\nA closed path is\
  \ a path which starts and ends at the same node.\n\nAn open path:\n```\n1 -> 2 ->\
  \ 3\n```\na closed path:\n```\n1 -> 2 -> 3 -> 1\n```\nA graph is connected if there\
  \ is a path from every node to every other node.\nA graph is a tree if it is connected\
  \ and there are no closed paths.\n\n\nYour job is to write a function 'isTree',\
  \ which returns true if a graph is a tree, and false if it is not a tree.\n\nGraphs\
  \ will be given as an array with each item being an array of integers which are\
  \ the nodes that node is connected to.\n\nFor example, this graph:\n```\n0--1\n\
  |  |\n2--3--4\n```\nhas array:\n```\n[[1,2], [0,3], [0,3], [1,2,4], [3]]\n```\n\
  Note that it is also not a tree, because it contains closed path:\n```\n0->1->3->2->0\n\
  ```\nA node with no connections is an empty array\nNote that if node 0 is connected\
  \ to node 1, node 1 is also connected to node 0. This will always be true.\nThe\
  \ order in which each connection is listed for each node also does not matter.\n\
  \nGood luck!"
"vc-preamble": "import Imports.AllImports\n\ndef isTree (graph : List (List Nat))\
  \ : Bool := sorry \n\ndef isValidAdjacencyMatrix (matrix : List (List Nat)) : Bool\
  \ := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def dfs (graph : List (List Nat)) (node : Nat) (visited : List\
  \ Nat) : List Nat := sorry\n\ntheorem tree_edge_count \n  (graph : List (List Nat))\
  \ : \n  isValidAdjacencyMatrix graph → isTree graph → \n  (List.length (List.join\
  \ graph)) / 2 = graph.length - 1 := sorry\n"
"vc-theorems": "theorem tree_connected\n  (graph : List (List Nat)) :\n  isValidAdjacencyMatrix\
  \ graph → isTree graph →\n  ∀ start, (dfs graph start []).length = graph.length\
  \ := sorry\n\n\ntheorem valid_matrix_nonempty\n  (graph : List (List Nat)) :\n \
  \ isValidAdjacencyMatrix graph → graph.length > 0 := sorry\n\n\ntheorem valid_matrix_indices\n\
  \  (graph : List (List Nat)) :\n  isValidAdjacencyMatrix graph →\n  ∀ row ∈ graph,\
  \ ∀ x ∈ row, x < graph.length := sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n\
  #eval isTree [[1], [0]]\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval isTree [[1,\
  \ 2], [0, 2], [0, 1]]\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval isTree [[1,\
  \ 2], [0, 2], [0, 1], []]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
