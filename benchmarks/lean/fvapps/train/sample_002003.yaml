"vc-description": "Ivan has an array consisting of n different integers. He decided\
  \ to reorder all elements in increasing order. Ivan loves merge sort so he decided\
  \ to represent his array with one or several increasing sequences which he then\
  \ plans to merge into one sorted array.\n\nIvan represent his array with increasing\
  \ sequences with help of the following algorithm.\n\nWhile there is at least one\
  \ unused number in array Ivan repeats the following procedure:  iterate through\
  \ array from the left to the right;  Ivan only looks at unused numbers on current\
  \ iteration;  if current number is the first unused number on this iteration or\
  \ this number is greater than previous unused number on current iteration, then\
  \ Ivan marks the number as used and writes it down. \n\nFor example, if Ivan's array\
  \ looks like [1, 3, 2, 5, 4] then he will perform two iterations. On first iteration\
  \ Ivan will use and write numbers [1, 3, 5], and on second one — [2, 4].\n\nWrite\
  \ a program which helps Ivan and finds representation of the given array with one\
  \ or several increasing sequences in accordance with algorithm described above.\n\
  \n\n-----Input-----\n\nThe first line contains a single integer n (1 ≤ n ≤ 2·10^5)\
  \ — the number of elements in Ivan's array.\n\nThe second line contains a sequence\
  \ consisting of distinct integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^9) — Ivan's\
  \ array.\n\n\n-----Output-----\n\nPrint representation of the given array in the\
  \ form of one or more increasing sequences in accordance with the algorithm described\
  \ above. Each sequence must be printed on a new line.\n\n\n-----Examples-----\n\
  Input\n5\n1 3 2 5 4\n\nOutput\n1 3 5 \n2 4 \n\nInput\n4\n4 3 2 1\n\nOutput\n4 \n\
  3 \n2 \n1 \n\nInput\n4\n10 30 50 101\n\nOutput\n10 30 50 101"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_sequences (n : Nat) (arr : List Int) : List (List Int)\
  \ :=\n  sorry\n"
"vc-theorems": "theorem find_sequences_structure \n  (n : Nat) (arr : List Int) (h\
  \ : arr.length > 0) :\n  let result := find_sequences n arr;\n  -- Result is list\
  \ of lists\n  result.length > 0\n  -- All elements from input appear in output with\
  \ same count\n  ∧ List.length result.join = List.length arr := by\n  sorry\n\n\n\
  theorem find_sequences_positive_elements\n  (n : Nat) (arr : List Int) \n  (h1 :\
  \ arr.length > 0)\n  (h2 : ∀ x ∈ arr, x > 0) :\n  let result := find_sequences n\
  \ arr;\n  -- At least one sequence\n  result.length ≥ 1 \n  -- All elements remain\
  \ positive\n  ∧ ∀ x ∈ result.join, x > 0 := by\n  sorry"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: guarded"
