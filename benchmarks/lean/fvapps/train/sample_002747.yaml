"vc-description": "# Description:\n\n Find the longest successive exclamation marks\
  \ and question marks combination in the string. A successive exclamation marks and\
  \ question marks combination must contains two part: a substring of \"!\" and a\
  \ substring \"?\", they are adjacent. \n \n If more than one result are found, return\
  \ the one which at left side; If no such a combination found, return `\"\"`.\n\n\
  # Examples\n\n```\nfind(\"!!\") === \"\"\nfind(\"!??\") === \"!??\"\nfind(\"!?!!\"\
  ) === \"?!!\"\nfind(\"!!???!????\") === \"!!???\"\nfind(\"!!???!?????\") === \"\
  !?????\"\nfind(\"!????!!!?\") === \"????!!!\" \nfind(\"!?!!??!!!?\") === \"??!!!\"\
  \n```\n\n# Note\nPlease don't post issue about difficulty or duplicate. Because:\n\
  >[That's unfair on the kata creator. This is a valid kata and introduces new people\
  \ to javascript some regex or loops, depending on how they tackle this problem.\
  \  --matt c](https://www.codewars.com/kata/remove-exclamation-marks/discuss#57fabb625c9910c73000024e)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find (s : String) : String := sorry\n\ntheorem single_char_strings\
  \ (s : String) \n  (h : ∀ c ∈ s.data, c = '!') :\n  find s = \"\" := sorry\n"
"vc-theorems": "theorem no_exclaim_question (s : String)\n  (h : ∀ c ∈ s.data, c ≠\
  \ '!' ∧ c ≠ '?') :\n  find s = \"\" := sorry\n\n\ntheorem result_only_valid_chars\
  \ (s : String) :\n  ∀ c ∈ (find s).data, c = '!' ∨ c = '?' := sorry\n\n/--\ninfo:\
  \ ''\n-/\n#guard_msgs in\n#eval find \"!!\"\n\n/--\ninfo: '!??'\n-/\n#guard_msgs\
  \ in\n#eval find \"!??\"\n\n/--\ninfo: '!!???'\n-/\n#guard_msgs in\n#eval find \"\
  !!???!????\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
