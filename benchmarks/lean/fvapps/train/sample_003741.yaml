"vc-description": "There is enough money available on ATM in nominal value 10, 20,\
  \ 50, 100, 200 and 500 dollars.\n\nYou are given money in nominal value of `n` with\
  \ `1<=n<=1500`.\n\nTry to find minimal number of notes that must be used to repay\
  \ in dollars, or output -1 if it is impossible.\n\nGood Luck!!!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve (n : Int) : Int := sorry\n\ndef bills : List Int := [500,\
  \ 200, 100, 50, 20, 10]\n"
"vc-theorems": "theorem solve_spec (n : Int) (h : n > 0) (h2 : n ≤ 10^6) :\n  let\
  \ result := solve n\n  if n % 10 ≠ 0 then\n    result = -1\n  else\n    result ≥\
  \ 0 ∧ \n    result ≤ n / 10 ∧\n    ∃ (count : Int) (remaining : Int) (reconstructed\
  \ : Int),\n      count = result ∧\n      reconstructed + remaining = n ∧\n     \
  \ (∀ bill ∈ bills,\n        ∃ (num_bills : Int) (remaining' : Int),\n          remaining\
  \ = bill * num_bills + remaining' ∧\n          remaining' < bill ∧\n          count\
  \ ≥ 0) := sorry\n\n\ntheorem solve_optimal (n : Int) (h : n > 0) (h2 : n ≤ 10^6)\
  \ (h3 : n % 10 = 0) :\n  let result := solve n\n  result > 0 ∧ \n  ∀ (count : Int)\
  \ (total : Int) (remaining : Int),\n    (∀ bill ∈ bills,\n      ∃ (num_bills : Int)\
  \ (remaining' : Int),\n        remaining = bill * num_bills + remaining' ∧\n   \
  \     remaining' < bill ∧\n        count = result) →\n    result ≤ count := sorry\n\
  \n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval solve 770\n\n/--\ninfo: 2\n-/\n#guard_msgs\
  \ in\n#eval solve 550\n\n/--\ninfo: -1\n-/\n#guard_msgs in\n#eval solve 125\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
