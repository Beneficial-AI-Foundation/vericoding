"vc-description": "#### Task:\n\nYour job here is to implement a function `factors`,\
  \ which takes a number `n`, and outputs an array of arrays comprised of two\nparts,\
  \ `sq` and `cb`. The part `sq` will contain all the numbers that, when squared,\
  \ yield a number which is a factor of `n`,\nwhile the `cb` part will contain all\
  \ the numbers that, when cubed, yield a number which is a factor of `n`.  Discard\
  \ all `1`s\nfrom both arrays.\n\nBoth `sq` and `cb` should be sorted in ascending\
  \ order.\n\n#### What it looks like:\n\n```python\nfactors(int) #=> [\n  sq (all\
  \ the numbers that can be squared to give a factor of n) : list,\n  cb (all the\
  \ numbers that can be cubed   to give a factor of n) : list\n]\n```\n\n#### Some\
  \ examples:\n\nAlso check out my other creations — [Keep the Order](https://www.codewars.com/kata/keep-the-order),\
  \ [Naming Files](https://www.codewars.com/kata/naming-files), [Elections: Weighted\
  \ Average](https://www.codewars.com/kata/elections-weighted-average), [Identify\
  \ Case](https://www.codewars.com/kata/identify-case), [Split Without Loss](https://www.codewars.com/kata/split-without-loss),\
  \ [Adding Fractions](https://www.codewars.com/kata/adding-fractions),\n[Random Integers](https://www.codewars.com/kata/random-integers),\
  \ [Implement String#transpose](https://www.codewars.com/kata/implement-string-number-transpose),\
  \ [Implement Array#transpose!](https://www.codewars.com/kata/implement-array-number-transpose),\
  \ [Arrays and Procs #1](https://www.codewars.com/kata/arrays-and-procs-number-1),\
  \ and [Arrays and Procs #2](https://www.codewars.com/kata/arrays-and-procs-number-2).\n\
  \nIf you notice any issues or have any suggestions/comments whatsoever, please don't\
  \ hesitate to mark an issue or just comment. Thanks!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def factors (n : Nat) : List Nat × List Nat := sorry\n\ntheorem\
  \ factors_returns_two_lists (n : Nat) (h : n > 0) :\n  let (sq, cb) := factors n\n\
  \  ∀ x ∈ sq, n % x^2 = 0 ∧ \n  ∀ x ∈ cb, n % x^3 = 0 := sorry\n"
"vc-theorems": "theorem factors_lists_are_sorted (n : Nat) (h : n > 0) :\n  let (sq,\
  \ cb) := factors n\n  (∀ i j, i < j → i < List.length sq → j < List.length sq →\
  \ \n    sq[i]! ≤ sq[j]!) ∧\n  (∀ i j, i < j → i < List.length cb → j < List.length\
  \ cb → \n    cb[i]! ≤ cb[j]!) := sorry\n\n\ntheorem factors_lists_contain_valid_factors\
  \ (n : Nat) (h : n > 0) :\n  let (sq, cb) := factors n\n  (∀ x ∈ sq, x ≥ 2 ∧ n %\
  \ x^2 = 0) ∧\n  (∀ x ∈ cb, x ≥ 2 ∧ n % x^3 = 0) := sorry\n\n\ntheorem cube_factors_subset_of_square_factors\
  \ (n : Nat) (h : n > 0) :\n  let (sq, cb) := factors n\n  ∀ x ∈ cb, x ∈ sq := sorry\n\
  \n/--\ninfo: [[2, 4], [2]]\n-/\n#guard_msgs in\n#eval factors 16\n\n/--\ninfo: [[3,\
  \ 9], [3]]\n-/\n#guard_msgs in\n#eval factors 81\n\n/--\ninfo: [[2, 5, 10], []]\n\
  -/\n#guard_msgs in\n#eval factors 100\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
