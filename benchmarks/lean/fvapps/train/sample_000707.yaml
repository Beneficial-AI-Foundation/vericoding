"vc-description": "Today, Chef decided to cook some delicious meals from the ingredients\
  \ in his kitchen. There are $N$ ingredients, represented by strings $S_1, S_2, \\\
  ldots, S_N$. Chef took all the ingredients, put them into a cauldron and mixed them\
  \ up.\nIn the cauldron, the letters of the strings representing the ingredients\
  \ completely mixed, so each letter appears in the cauldron as many times as it appeared\
  \ in all the strings in total; now, any number of times, Chef can take one letter\
  \ out of the cauldron (if this letter appears in the cauldron multiple times, it\
  \ can be taken out that many times) and use it in a meal. A complete meal is the\
  \ string \"codechef\". Help Chef find the maximum number of complete meals he can\
  \ make!\n\n-----Input-----\n- The first line of the input contains a single integer\
  \ $T$ denoting the number of test cases. The description of $T$ test cases follows.\n\
  - The first line of each test case contains a single integer $N$.\n- $N$ lines follow.\
  \ For each $i$ ($1 \\le i \\le N$), the $i$-th of these lines contains a single\
  \ string $S_i$.\n\n-----Output-----\nFor each test case, print a single line containing\
  \ one integer — the maximum number of complete meals Chef can create.\n\n-----Constraints-----\n\
  - $1 \\le T \\le 100$\n- $1 \\le N \\le 100$\n- $|S_1| + |S_2| + \\ldots + |S_N|\
  \ \\le 1,000$\n- each string contains only lowercase English letters\n\n-----Example\
  \ Input-----\n3\n6\ncplusplus\noscar\ndeck\nfee\nhat\nnear\n5\ncode\nhacker\nchef\n\
  chaby\ndumbofe\n5\ncodechef\nchefcode\nfehcedoc\ncceeohfd\ncodechef\n\n-----Example\
  \ Output-----\n1\n2\n5\n\n-----Explanation-----\nExample case 1: After mixing, the\
  \ cauldron contains the letter 'c' 3 times, the letter 'e' 4 times, and each of\
  \ the letters 'o', 'd', 'h' and 'f' once. Clearly, this is only enough for one \"\
  codechef\" meal.\nExample case 2: After mixing, the cauldron contains the letter\
  \ 'c' 4 times, 'o' 2 times, 'd' 2 times, 'e' 4 times, 'h' 3 times and 'f' 2 times,\
  \ which is enough to make 2 meals."
"vc-preamble": "import Imports.AllImports\n\ndef max_meals (ingredients : List (List\
  \ Char)) : Nat :=\n  sorry\n\n\ndef count_char (c : Char) (s : List Char) : Nat\
  \ :=\n  (s.filter (fun x => x = c)).length\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sum_list : List Nat → Nat \n  | [] => 0\n  | x::xs => x + sum_list\
  \ xs\n"
"vc-theorems": "theorem max_meals_non_negative (ingredients : List (List Char)) :\n\
  \  max_meals ingredients ≥ 0 := by sorry\n\n\ntheorem max_meals_bounded_by_c (ingredients\
  \ : List (List Char)) :\n  max_meals ingredients ≤ (sum_list (ingredients.map (count_char\
  \ 'c'))) / 2 := by sorry\n\n\ntheorem max_meals_bounded_by_o (ingredients : List\
  \ (List Char)) :\n  max_meals ingredients ≤ sum_list (ingredients.map (count_char\
  \ 'o')) := by sorry\n\n\ntheorem max_meals_bounded_by_d (ingredients : List (List\
  \ Char)) :\n  max_meals ingredients ≤ sum_list (ingredients.map (count_char 'd'))\
  \ := by sorry\n\n\ntheorem max_meals_bounded_by_e (ingredients : List (List Char))\
  \ :\n  max_meals ingredients ≤ (sum_list (ingredients.map (count_char 'e'))) / 2\
  \ := by sorry\n\n\ntheorem max_meals_bounded_by_h (ingredients : List (List Char))\
  \ :\n  max_meals ingredients ≤ sum_list (ingredients.map (count_char 'h')) := by\
  \ sorry\n\n\ntheorem max_meals_bounded_by_f (ingredients : List (List Char)) :\n\
  \  max_meals ingredients ≤ sum_list (ingredients.map (count_char 'f')) := by sorry\n\
  \n\ntheorem max_meals_empty_list :\n  max_meals [] = 0 := by sorry\n\n\ntheorem\
  \ max_meals_doubles (ingredients : List (List Char)) :\n  ingredients ≠ [] →\n \
  \ max_meals (ingredients.map (fun s => s ++ s)) ≥ max_meals ingredients := by sorry\n\
  \n\ntheorem max_meals_with_invalid_chars (ingredients : List (List Char)) :\n  max_meals\
  \ ingredients ≥ 0 := by sorry\n\n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval max_meals\
  \ [\"cplusplus\", \"oscar\", \"deck\", \"fee\", \"hat\", \"near\"]\n\n/--\ninfo:\
  \ 2\n-/\n#guard_msgs in\n#eval max_meals [\"code\", \"hacker\", \"chef\", \"chaby\"\
  , \"dumbofe\"]\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval max_meals [\"codechef\"\
  , \"chefcode\", \"fehcedoc\", \"cceeohfd\", \"codechef\"]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
