"vc-description": "The chef is having one array of N natural numbers(numbers may be\
  \ repeated). i.e. All natural numbers must be less than N. Chef wants to rearrange\
  \ the array and try to place a natural number on its index of the array, i.e array[i]=i.\
  \ If multiple natural numbers are found for given index place one natural number\
  \ to its index and ignore others.i.e. arr[i]=i and multiple i found in array ignore\
  \ all remaining i's If any index in the array is empty place 0 at that place. i.e.\
  \ if for arr[i], i is not present do arr[i]=0.\n\n-----Input:-----\n- First line\
  \ will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase\
  \ contains two lines of input.\n- First-line has $N$ denoting the size of an array.\n\
  - Second-line has $N$ space-separated natural numbers.\n\n-----Output:-----\nFor\
  \ each test case, output in a single line with the new rearranged array.\n\n-----Constraints-----\n\
  - $1 \\leq T \\leq 10^3$\n- $2 \\leq N \\leq 10^3$\n- $arr[i] \\leq N-1$\n\n-----Sample\
  \ Input:-----\n2\n2\n1 1\n4\n1 1 2 1\n\n-----Sample Output:-----\n0 1\n0 1 2 0\n\
  \n-----EXPLANATION:-----\nFor 1) $1$ occurs twice in the array hence print 0 at\
  \ 0th index and 1 at 1st index\nFor 2) $1$ occurs thrice and 2 once in the array\
  \ hence print 0 at 0th index and 1 at 1st index, 2 at 2nd index and 0 at 3rd index."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def arrange_array (n : Nat) (arr : List Nat) : List Nat :=\n  sorry\n"
"vc-theorems": "theorem arrange_array_valid {n : Nat} {arr : List Nat} (h1 : 0 < n)\
  \ :\n  let result := arrange_array n arr\n  -- Output length is n\n  List.length\
  \ result = n ∧ \n  -- All elements are non-negative and less than n\n  (∀ x ∈ result,\
  \ 0 ≤ x ∧ x < n) ∧\n  -- All non-zero elements in result came from input array\n\
  \  (∀ x ∈ result, x ≠ 0 → x ∈ arr) ∧\n  -- All valid elements from input array appear\
  \ in result\n  (∀ x ∈ arr, x < n → x ∈ result) :=\n  sorry\n\n\ntheorem arrange_array_empty\
  \ {n : Nat} (h1 : 0 < n) :\n  arrange_array n [] = List.replicate n 0 :=\n  sorry\n\
  \n\ntheorem arrange_array_negative {n : Nat} {arr : List Int} \n  (h1 : 0 < n)\n\
  \  (h2 : ∀ x ∈ arr, x < 0) :\n  arrange_array n (arr.map Int.toNat) = List.replicate\
  \ n 0 :=\n  sorry\n\n\ntheorem arrange_array_too_large {n : Nat} {arr : List Nat}\n\
  \  (h1 : 0 < n)\n  (h2 : ∀ x ∈ arr, n ≤ x) :\n  ∀ x ∈ arrange_array n arr, x = 0\
  \ :=\n  sorry\n\n/--\ninfo: [0, 1]\n-/\n#guard_msgs in\n#eval arrange_array 2 [1,\
  \ 1]\n\n/--\ninfo: [0, 1, 2, 0]\n-/\n#guard_msgs in\n#eval arrange_array 4 [1, 1,\
  \ 2, 1]\n\n/--\ninfo: [0, 1, 2, 3, 4]\n-/\n#guard_msgs in\n#eval arrange_array 5\
  \ [1, 2, 3, 4, 2]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
