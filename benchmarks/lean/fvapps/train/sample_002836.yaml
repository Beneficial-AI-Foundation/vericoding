vc-description: |-
  Here you will create the classic [Pascal's triangle](https://en.wikipedia.org/wiki/Pascal%27s_triangle).
  Your function will be passed the depth of the triangle and you code has to return the corresponding pascal triangle up to that depth.

  The triangle should be returned as a nested array.

  for example:
  ```python
  pascal(5) # should return [[1], [1,1], [1,2,1], [1,3,3,1], [1,4,6,4,1]]
  ```

  To build the triangle, start with a single 1 at the top, for each number in the next row you just take the two numbers above it and add them together (except for the edges, which are all `1`), e.g.:
  ```
                [1]
              [1   1]
            [1   2   1]
          [1   3   3   1]
  ```
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |-
  def pascal (n : Nat) : List (List Nat) := sorry

  theorem pascal_row_count {n : Nat} (h : n > 0) : 
    List.length (pascal n) = n := sorry
vc-theorems: |
  /--
  info: [[1]]
  -/
  #guard_msgs in
  #eval pascal 1

  /--
  info: [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]
  -/
  #guard_msgs in
  #eval pascal 5

  /--
  info: [[1], [1, 1], [1, 2, 1]]
  -/
  #guard_msgs in
  #eval pascal 3
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible
