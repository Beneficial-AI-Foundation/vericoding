"vc-description": "Here you will create the classic [Pascal's triangle](https://en.wikipedia.org/wiki/Pascal%27s_triangle).\n\
  Your function will be passed the depth of the triangle and you code has to return\
  \ the corresponding pascal triangle up to that depth.\n\nThe triangle should be\
  \ returned as a nested array.\n\nfor example:\n```python\npascal(5) # should return\
  \ [[1], [1,1], [1,2,1], [1,3,3,1], [1,4,6,4,1]]\n```\n\nTo build the triangle, start\
  \ with a single 1 at the top, for each number in the next row you just take the\
  \ two numbers above it and add them together (except for the edges, which are all\
  \ `1`), e.g.:\n```\n              [1]\n            [1   1]\n          [1   2   1]\n\
  \        [1   3   3   1]\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def pascal (n : Nat) : List (List Nat) := sorry\n\ntheorem pascal_row_count\
  \ {n : Nat} (h : n > 0) : \n  List.length (pascal n) = n := sorry"
"vc-theorems": "/--\ninfo: [[1]]\n-/\n#guard_msgs in\n#eval pascal 1\n\n/--\ninfo:\
  \ [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n-/\n#guard_msgs in\n\
  #eval pascal 5\n\n/--\ninfo: [[1], [1, 1], [1, 2, 1]]\n-/\n#guard_msgs in\n#eval\
  \ pascal 3\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
