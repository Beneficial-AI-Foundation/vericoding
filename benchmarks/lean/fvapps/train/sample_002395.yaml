vc-description: |-
  In a array A of size 2N, there are N+1 unique elements, and exactly one of these elements is repeated N times.
  Return the element repeated N times.
   



  Example 1:
  Input: [1,2,3,3]
  Output: 3


  Example 2:
  Input: [2,1,2,5,3,2]
  Output: 2


  Example 3:
  Input: [5,1,5,2,5,3,5,4]
  Output: 5

   
  Note:

  4 <= A.length <= 10000
  0 <= A[i] < 10000
  A.length is even
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |-
  def repeated_n_times (arr : List Int) : Option Int := sorry





  theorem repeated_n_times_first_repeat {arr : List Int} {n : Int}
    (h : repeated_n_times arr = some n) :
    ∀ x : Int, x ∈ arr → x ≠ n → 
    (arr.take (arr.indexOf x)).count x ≤ 1 := sorry
vc-theorems: |
  /--
  info: 3
  -/
  #guard_msgs in
  #eval repeated_n_times [1, 2, 3, 3]

  /--
  info: 2
  -/
  #guard_msgs in
  #eval repeated_n_times [2, 1, 2, 5, 3, 2]

  /--
  info: 5
  -/
  #guard_msgs in
  #eval repeated_n_times [5, 1, 5, 2, 5, 3, 5, 4]
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: guarded_and_plausible
