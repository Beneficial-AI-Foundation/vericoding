"vc-description": "An NBA game runs 48 minutes (Four 12 minute quarters). Players\
  \ do not typically play the full game, subbing in and out as necessary. Your job\
  \ is to extrapolate a player's points per game if they played the full 48 minutes.\n\
  \nWrite a function that takes two arguments, ppg (points per game) and mpg (minutes\
  \ per game) and returns a straight extrapolation of ppg per 48 minutes rounded to\
  \ the nearest tenth. Return 0 if 0.\n\nExamples:\n```python\nnba_extrap(12, 20)\
  \ # 28.8\nnba_extrap(10, 10) # 48\nnba_extrap(5, 17) # 14.1\nnba_extrap(0, 0) #\
  \ 0\n```\n\nNotes:\nAll inputs will be either be an integer or float.\nFollow your\
  \ dreams!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def nba_extrap (ppg mpg : Float) : Float := sorry\n\ntheorem nba_extrap_nonnegative\
  \ \n  {ppg mpg : Float} (h1 : 0 ≤ ppg) (h2 : 0 < mpg) (h3 : mpg ≤ 48) :\n  0 ≤ nba_extrap\
  \ ppg mpg := \nsorry\n"
"vc-theorems": "theorem nba_extrap_proportional\n  {ppg mpg : Float} (h1 : 0 ≤ ppg)\
  \ (h2 : 0 < mpg) (h3 : mpg ≤ 48) :\n  nba_extrap ppg mpg = Float.round (48.0 * ppg\
  \ / mpg) :=\nsorry\n\n\ntheorem nba_extrap_zero :\n  nba_extrap 0 0 = 0 :=\nsorry\n\
  \n\ntheorem nba_extrap_scaling_ratio\n  {ppg mpg : Float} (h1 : 0 ≤ ppg) (h2 : 0\
  \ < mpg) (h3 : mpg ≤ 48) :\n  nba_extrap ppg mpg = ppg * (48.0 / mpg) :=\nsorry\n\
  \n/--\ninfo: 28.8\n-/\n#guard_msgs in\n#eval nba_extrap 12 20\n\n/--\ninfo: 48.0\n\
  -/\n#guard_msgs in\n#eval nba_extrap 10 10\n\n/--\ninfo: 14.1\n-/\n#guard_msgs in\n\
  #eval nba_extrap 5 17\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval nba_extrap 0 0\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
