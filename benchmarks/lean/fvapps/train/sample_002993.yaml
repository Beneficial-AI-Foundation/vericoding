"vc-description": "# Story\n\nJohn found a path to a treasure, and while searching\
  \ for its precise location he wrote a list of directions using symbols `\"^\"`,\
  \ `\"v\"`, `\"<\"`, `\">\"` which mean `north`, `east`, `west`, and `east` accordingly.\
  \ On his way John had to try many different paths, sometimes walking in circles,\
  \ and even missing the treasure completely before finally noticing it.\n\n___\n\n\
  ## Task\n\nSimplify the list of directions written by John by eliminating any loops.\n\
  \n**Note**: a loop is any sublist of directions which leads John to the coordinate\
  \ he had already visited.\n\n___\n\n## Examples\n\n```\nsimplify(\"<>>\")      \
  \  ==  \">\"\nsimplify(\"<^^>v<^^^\")  ==  \"<^^^^\"\nsimplify(\"\")           ==\
  \  \"\"\nsimplify(\"^< > v\n    ^   v\n> > C > D > >\n^   ^   v\n^ < B < <\n   \
  \ ^\n    A\n```\n\nJohn visits points `A -> B -> C -> D -> B -> C -> D`, realizes\
  \ that `-> C -> D -> B` steps are meaningless and removes them, getting this path:\
  \ `A -> B -> (*removed*) -> C -> D`.\n\n```\n    ∙ ∙ ∙\n    ∙   ∙\n> > C > D > >\n\
  ^   ∙   ∙\n^ < B ∙ ∙\n    ^\n    A\n```\n\nFollowing the final, simplified route\
  \ John visits points `C` and `D`, but for the first time, not the second (because\
  \ we ignore the steps made on a hypothetical path), and he doesn't need to alter\
  \ the directions list anymore."
"vc-preamble": "import Imports.AllImports\n\ndef dirList := List Dir\n\ndef getEndpoint\
  \ (path : dirList) : Int × Int := sorry\n\n\ndef simplify (path : dirList) : dirList\
  \ := sorry \n\ntheorem simplify_same_endpoint (path : dirList) : \n  getEndpoint\
  \ path = getEndpoint (simplify path) := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isValidDir (d : Dir) : Bool := sorry\n\ntheorem simplify_valid_chars\
  \ (path : dirList) (d : Dir) :\n  List.elem d (simplify path) → isValidDir d :=\
  \ sorry\n"
"vc-theorems": "theorem simplify_shorter (path : dirList) :\n  (simplify path).length\
  \ ≤ path.length := sorry\n\n\ntheorem simplify_empty (path : dirList) :\n  path\
  \ = [] → simplify path = [] := sorry\n\n\ntheorem simplify_idempotent (path : dirList)\
  \ :\n  simplify (simplify path) = simplify path := sorry\n\n/--\ninfo: '>'\n-/\n\
  #guard_msgs in\n#eval simplify \"<>>\"\n\n/--\ninfo: '<^^^^'\n-/\n#guard_msgs in\n\
  #eval simplify \"<^^>v<^^^\"\n\n/--\ninfo: ''\n-/\n#guard_msgs in\n#eval simplify\
  \ \"\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
