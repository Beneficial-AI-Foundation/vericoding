"vc-description": "Complete the solution so that it takes the object (JavaScript/CoffeeScript)\
  \ or hash (ruby) passed in and generates a human readable string from its key/value\
  \ pairs. \n\nThe format should be \"KEY = VALUE\". Each key/value pair should be\
  \ separated by a comma except for the last pair.\n\n**Example:**\n```python\nsolution({\"\
  a\": 1, \"b\": '2'}) # should return \"a = 1,b = 2\"\n```"
"vc-preamble": "import Imports.AllImports\n\ndef Dict := List (String × (String ⊕\
  \ Int))\n\ndef solution (d : Dict) : String :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isSorted (xs : List String) : Prop :=\n  ∀ i j, i < j → j <\
  \ xs.length → xs[i]! ≤ xs[j]!\n"
"vc-theorems": "theorem solution_output_sorted (d : Dict) (h : d.length > 0) : \n\
  \  let result := solution d\n  let pairs := result.splitOn \",\"\n  isSorted pairs\
  \ := by\n  sorry\n\n\ntheorem solution_contains_all_pairs (d : Dict) (h : d.length\
  \ > 0) : \n  let result := solution d\n  let pairs := result.splitOn \",\"  \n \
  \ ∀ p ∈ d, ∃ pair ∈ pairs, \n    match p.2 with\n    | Sum.inl s => pair = s!\"\
  {p.1} = {s}\"\n    | Sum.inr n => pair = s!\"{p.1} = {n}\" := by\n  sorry \n\n\n\
  theorem solution_empty (d : Dict) (h : d = []) :\n  solution d = \"\" := by\n  sorry\n\
  \n/--\ninfo: 'a = 1,b = 2'\n-/\n#guard_msgs in\n#eval solution {\"a\": 1, \"b\"\
  : 2}\n\n/--\ninfo: 'a = b,b = a'\n-/\n#guard_msgs in\n#eval solution {\"a\": \"\
  b\", \"b\": \"a\"}\n\n/--\ninfo: ''\n-/\n#guard_msgs in\n#eval solution {}\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
