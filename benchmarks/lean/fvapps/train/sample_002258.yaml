"vc-description": "You are given two strings $s$ and $t$ both of length $n$ and both\
  \ consisting of lowercase Latin letters.\n\nIn one move, you can choose any length\
  \ $len$ from $1$ to $n$ and perform the following operation:   Choose any contiguous\
  \ substring of the string $s$ of length $len$ and reverse it;  at the same time\
  \ choose any contiguous substring of the string $t$ of length $len$ and reverse\
  \ it as well. \n\nNote that during one move you reverse exactly one substring of\
  \ the string $s$ and exactly one substring of the string $t$.\n\nAlso note that\
  \ borders of substrings you reverse in $s$ and in $t$ can be different, the only\
  \ restriction is that you reverse the substrings of equal length. For example, if\
  \ $len=3$ and $n=5$, you can reverse $s[1 \\dots 3]$ and $t[3 \\dots 5]$, $s[2 \\\
  dots 4]$ and $t[2 \\dots 4]$, but not $s[1 \\dots 3]$ and $t[1 \\dots 2]$.\n\nYour\
  \ task is to say if it is possible to make strings $s$ and $t$ equal after some\
  \ (possibly, empty) sequence of moves.\n\nYou have to answer $q$ independent test\
  \ cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer\
  \ $q$ ($1 \\le q \\le 10^4$) — the number of test cases. Then $q$ test cases follow.\n\
  \nThe first line of the test case contains one integer $n$ ($1 \\le n \\le 2 \\\
  cdot 10^5$) — the length of $s$ and $t$.\n\nThe second line of the test case contains\
  \ one string $s$ consisting of $n$ lowercase Latin letters.\n\nThe third line of\
  \ the test case contains one string $t$ consisting of $n$ lowercase Latin letters.\n\
  \nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\\
  cdot 10^5$ ($\\sum n \\le 2 \\cdot 10^5$).\n\n\n-----Output-----\n\nFor each test\
  \ case, print the answer on it — \"YES\" (without quotes) if it is possible to make\
  \ strings $s$ and $t$ equal after some (possibly, empty) sequence of moves and \"\
  NO\" otherwise.\n\n\n-----Example-----\nInput\n4\n4\nabcd\nabdc\n5\nababa\nbaaba\n\
  4\nasdf\nasdg\n4\nabcd\nbadc\n\nOutput\nNO\nYES\nNO\nYES"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def can_make_equal (s t : String) : Bool :=\n  sorry\n"
"vc-theorems": "theorem can_make_equal_reflexive (s : String) (h : s.length > 0) :\n\
  \  can_make_equal s s = true :=\nsorry\n\n\ntheorem can_make_equal_length_mismatch\
  \ (s t : String) (h₁ : s.length > 0) (h₂ : t.length > 0) :\n  s.length ≠ t.length\
  \ → can_make_equal s t = false :=\nsorry\n\n\ntheorem can_make_equal_character_sets\
  \ (s t : String) (h₁ : s.length > 0) (h₂ : t.length > 0) :\n  s.length = t.length\
  \ → \n  (∃ c, c ∈ s.data ↔ c ∉ t.data) →\n  can_make_equal s t = false :=\nsorry\n\
  \n\ntheorem can_make_equal_symmetric (s t : String) (h₁ : s.length > 0) (h₂ : t.length\
  \ > 0) :\n  s.length = t.length →\n  can_make_equal s t = can_make_equal t s :=\n\
  sorry\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval can_make_equal \"abcd\" \"\
  abdc\"\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval can_make_equal \"ababa\" \"\
  baaba\"\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval can_make_equal \"abcd\" \"\
  badc\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
