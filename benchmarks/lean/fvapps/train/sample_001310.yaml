"vc-description": "Chef owns an icecream shop in Chefland named scoORZ. There are\
  \ only three types of coins in Chefland: Rs. 5, Rs. 10 and Rs. 15. An icecream costs\
  \ Rs. 5.\nThere are $N$ people (numbered $1$ through $N$) standing in a queue to\
  \ buy icecream from scoORZ. Each person wants to buy exactly one icecream. For each\
  \ valid $i$, the $i$-th person has one coin with value $a_i$. It is only possible\
  \ for someone to buy an icecream when Chef can give them back their change exactly\
  \ ― for example, if someone pays with a Rs. 10 coin, Chef needs to have a Rs. 5\
  \ coin that he gives to this person as change.\nInitially, Chef has no money. He\
  \ wants to know if he can sell icecream to everyone in the queue, in the given order.\
  \ Since he is busy eating his own icecream, can you tell him if he can serve all\
  \ these people?\n\n-----Input-----\n- The first line of the input contains a single\
  \ integer $T$ denoting the number of test cases. The description of $T$ test cases\
  \ follows.\n- The first line of each test case contains a single integer $N$.\n\
  - The second line contains $N$ space-separated integers $a_1, a_2, \\ldots, a_N$.\n\
  \n-----Output-----\nFor each test case, print a single line containing the string\
  \ \"YES\" if all people can be served or \"NO\" otherwise (without quotes).\n\n\
  -----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le N \\le 10^3$\n- $a_i \\\
  in \\{5, 10, 15\\}$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (40 points):\
  \ $a_i \\in \\{5, 10\\}$ for each valid $i$\nSubtask #2 (60 points): original constraints\n\
  \n-----Example Input-----\n3\n2\n5 10\n2\n10 5\n2\n5 15\n\n-----Example Output-----\n\
  YES\nNO\nNO\n\n-----Explanation-----\nExample case 1: The first person pays with\
  \ a Rs. 5 coin. The second person pays with a Rs. 10 coin and Chef gives them back\
  \ the Rs. 5 coin (which he got from the first person) as change.\nExample case 2:\
  \ The first person already cannot buy an icecream because Chef cannot give them\
  \ back Rs. 5.\nExample case 3: The first person pays with a Rs. 5 coin. The second\
  \ person cannot buy the icecream because Chef has only one Rs. 5 coin, but he needs\
  \ to give a total of Rs. 10 back as change."
"vc-preamble": "import Imports.AllImports\n\ndef canServeIcecream : List Coin → Bool\n\
  \  := sorry\n\n\ndef countFives (l : List Coin) : Nat :=\n  (l.filter (. == Coin.five)).length\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def countTens (l : List Coin) : Nat :=\n  (l.filter (. == Coin.ten)).length\n"
"vc-theorems": "theorem all_fives_servable {coins : List Coin} (h : ∀ c ∈ coins, c\
  \ = Coin.five) :\n  canServeIcecream coins = true := sorry\n\n\ntheorem start_with_ten_fails\
  \ {coins : List Coin} (h1 : coins.length > 0) \n  (h2 : ∀ c ∈ coins, c = Coin.ten)\
  \ :\n  canServeIcecream coins = false := sorry\n\n\ntheorem empty_and_base_cases\
  \ :\n  canServeIcecream [] = true ∧\n  canServeIcecream [Coin.five] = true ∧\n \
  \ canServeIcecream [Coin.ten] = false ∧\n  canServeIcecream [Coin.fifteen] = false\
  \ := sorry\n\n\ntheorem valid_service_has_change {coins : List Coin} \n  (h : ∀\
  \ c ∈ coins, c = Coin.five ∨ c = Coin.ten ∨ c = Coin.fifteen) :\n  canServeIcecream\
  \ coins = true →\n  ∀ p : List Coin, p.isPrefixOf coins →\n  match p.getLast? with\n\
  \  | none => True \n  | some last =>\n    if decide (last = Coin.ten)\n    then\
  \ countFives p > 0\n    else if decide (last = Coin.fifteen)\n    then countTens\
  \ p > 0 ∨ countFives p ≥ 2\n    else True := sorry\n\n\ntheorem invalid_service_lacks_change\
  \ {coins : List Coin}\n  (h : ∀ c ∈ coins, c = Coin.five ∨ c = Coin.ten ∨ c = Coin.fifteen)\
  \ :\n  canServeIcecream coins = false →\n  ∃ p : List Coin, p.isPrefixOf coins ∧\n\
  \  match p.getLast? with\n  | none => False\n  | some last =>\n    (last = Coin.ten\
  \ ∧ countFives p = 0) ∨ \n    (last = Coin.fifteen ∧ countTens p = 0 ∧ countFives\
  \ p < 2) := sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval can_serve_icecream\
  \ [5, 10]\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval can_serve_icecream [10,\
  \ 5]\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval can_serve_icecream [5, 15]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
