"vc-description": "# Description\n\nWrite a function that accepts the current position\
  \ of a knight in a chess board, it returns the possible positions that it will end\
  \ up after 1 move. The resulted should be sorted. \n\n## Example\n\n\"a1\" -> [\"\
  b3\", \"c2\"]"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def possible_positions (pos : String) : List String := sorry\n\n\
  \n\ntheorem knight_move_distance\n  (pos : String)\n  (h_valid : pos.length = 2\
  \ ∧ pos.get ⟨0⟩ ∈ ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'] ∧ \n            pos.get\
  \ ⟨1⟩ ∈ ['1', '2', '3', '4', '5', '6', '7', '8']) :\n  let src_x := (Char.toNat\
  \ (pos.get ⟨0⟩)) - 96\n  let src_y := String.toNat! ⟨[pos.get ⟨1⟩]⟩\n  ∀ move ∈\
  \ possible_positions pos,\n    let dst_x := (Char.toNat (move.get ⟨0⟩)) - 96\n \
  \   let dst_y := String.toNat! ⟨[move.get ⟨1⟩]⟩\n    let dx := Nat.max (src_x) (dst_x)\
  \ - Nat.min (src_x) (dst_x)\n    let dy := Nat.max (src_y) (dst_y) - Nat.min (src_y)\
  \ (dst_y)\n    (dx = 1 ∧ dy = 2) ∨ (dx = 2 ∧ dy = 1) := sorry\n"
"vc-theorems": "theorem positions_within_board\n  (pos : String)\n  (h_valid : pos.length\
  \ = 2 ∧ pos.get ⟨0⟩ ∈ ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'] ∧ \n            pos.get\
  \ ⟨1⟩ ∈ ['1', '2', '3', '4', '5', '6', '7', '8']) :\n  ∀ p ∈ possible_positions\
  \ pos,\n    1 ≤ ((Char.toNat (p.get ⟨0⟩)) - 96) ∧ ((Char.toNat (p.get ⟨0⟩)) - 96)\
  \ ≤ 8 ∧\n    1 ≤ String.toNat! ⟨[p.get ⟨1⟩]⟩ ∧ String.toNat! ⟨[p.get ⟨1⟩]⟩ ≤ 8 :=\
  \ sorry\n\n\ntheorem max_moves\n  (pos : String)\n  (h_valid : pos.length = 2 ∧\
  \ pos.get ⟨0⟩ ∈ ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'] ∧ \n            pos.get\
  \ ⟨1⟩ ∈ ['1', '2', '3', '4', '5', '6', '7', '8']) :\n  (possible_positions pos).length\
  \ ≤ 8 := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
