"vc-description": "Our chef has recently opened a new restaurant with a unique style.\
  \ The restaurant is divided into K compartments (numbered from 1 to K) and each\
  \ compartment can be occupied by at most one customer. \nEach customer that visits\
  \ the restaurant has a strongly preferred compartment p (1 ≤ p ≤ K), and if that\
  \ compartment is already occupied, then the customer simply leaves. Now obviously,\
  \ the chef wants to maximize the total number of customers that dine at his restaurant\
  \ and so he allows (or disallows) certain customers so as to achieve this task.\
  \ You are to help him with this. \nGiven a list of N customers with their arrival\
  \ time, departure time and the preferred compartment, you need to calculate the\
  \ maximum number of customers that can dine at the restaurant. \n\n-----Input-----\n\
  The first line contains an integer T denoting the number of test cases. Each of\
  \ the next T lines contains two integers N and  K , the number of customers that\
  \ plan to visit the chef's restaurant and the number of compartments the restaurant\
  \ is divided into respectively. Each of the next N lines contains three integers\
  \ si, fi and pi , the arrival time, departure time and the strongly preferred compartment\
  \ of the ith customer respectively.  \n\nNote that the ith customer wants to occupy\
  \ the pith compartment from [si, fi)  i.e the ith customer leaves just before  \
  \ fi  so that another customer can occupy that compartment from   fi  onwards.\n\
  \n-----Output-----\nFor every test case, print in a single line the maximum number\
  \ of customers that dine at the restaurant.\n\n-----Constraints-----\n-  1 ≤  T\
  \ ≤   30 \n-  0  ≤ N  ≤  105 \n-  1  ≤  K  ≤  109 \n-  0  ≤  si < fi ≤   109 \n\
  -  1  ≤  pi  ≤  K  \n\n-----Example-----\nInput:\n2\n3 3\n1 3 1\n4 6 2\n7 10 3\n\
  4 2\n10 100 1\n100 200 2\n150 500 2\n200 300 2\n\nOutput:\n3\n3\n\n-----Explanation-----\n\
  Example case 1.\n\nAll three customers want different compartments and hence all\
  \ 3 can be accommodated.\n\nExample case 2.\n\nIf we serve the 1st, 2nd and 4th\
  \ customers, then we can get a maximum of 3."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def maxRestaurantCustomers (testCases : List (List Cell)) : List\
  \ Nat :=\n  sorry\n"
"vc-theorems": "theorem max_customers_single_case\n  (n k : Nat)\n  (cells : List\
  \ Cell)\n  (h1 : n ≥ 1)\n  (h2 : k ≥ 1) \n  (h3 : cells.length ≥ 1)\n  (h4 : ∀ c\
  \ ∈ cells, c.start < c.finish)\n  (h5 : ∀ c ∈ cells, c.capacity ≤ k) :\n  let result\
  \ := maxRestaurantCustomers [cells]\n  result.head! ≤ cells.length ∧ \n  result.head!\
  \ ≤ k * n :=\nsorry\n\n\ntheorem max_customers_multiple_cases\n  (testCases : List\
  \ (List Cell))\n  (h1 : testCases.length ≥ 1)\n  (h2 : ∀ case ∈ testCases, case.length\
  \ ≥ 1)\n  (h3 : ∀ case ∈ testCases, ∀ c ∈ case, c.start < c.finish)\n  (h4 : ∀ case\
  \ ∈ testCases, ∀ c ∈ case, c.capacity ≤ k) :\n  let results := maxRestaurantCustomers\
  \ testCases\n  results.length = testCases.length ∧\n  ∀ i < results.length, \n \
  \   results[i]! ≤ testCases[i]!.length ∧\n    results[i]! ≤ k * n :=\nsorry\n\n\
  /--\ninfo: [3]\n-/\n#guard_msgs in\n#eval max_restaurant_customers [test1]\n\n/--\n\
  info: [3]\n-/\n#guard_msgs in\n#eval max_restaurant_customers [test2]\n\n/--\ninfo:\
  \ [3, 3]\n-/\n#guard_msgs in\n#eval max_restaurant_customers [test1, test2]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
