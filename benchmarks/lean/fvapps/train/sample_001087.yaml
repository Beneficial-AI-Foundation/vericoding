"vc-description": "Lumpy is a bus driver. Today, the conductor is absent so Lumpy\
  \ has to do the conductor's job as well. There are N creatures in the bus. Sometimes\
  \ the creatures don't carry change and can't pay the exact amount of the fare. Each\
  \ creature in the bus today has paid an amount\ngreater than his/her fare. You are\
  \ given information about the extra amount paid by each creature, by an array A\
  \ of size N, where Ai denotes the extra amount paid by the i-th creature, in rupees.\n\
  After the end of the trip, Lumpy noticed that he had P one rupee coins and Q two\
  \ rupee coins. He wants to pay back the creatures using this money. Being a kind\
  \ hearted moose, Lumpy wants to pay back as many creatures as he can. Note that\
  \ Lumpy will \nnot pay back the i-th creature if he can't pay the exact amount that\
  \ the i-th creature requires with the coins that he possesses. \nLumpy is busy driving\
  \ the bus and doesn't want to calculate the maximum number of creatures he can satisfy\
  \ - He will surely cause an accident if he tries to do so. Can you help him out\
  \ with this task? \n\n-----Input-----\n- The first line of the input contains an\
  \ integer T denoting the number of test cases. The description of T test cases follows.\n\
  - For each test case, first line consists of three space separated integers N, P\
  \ and Q.\n- Second line consists of N space separated integers A containing N space\
  \ integers, where i-th integer denotes Ai.\n\n-----Output-----\n- For each test\
  \ case, output a single line containing an integer corresponding to maximum number\
  \ of creatures that Lumpy can pay back.\n\n-----Constraints-----\n- 1 ≤ T ≤ 106\n\
  - 1 ≤ N ≤ 105\n- 1 ≤ Ai ≤ 109\n- 0 ≤ P, Q ≤ 1014\n- Sum of N over all the cases\
  \ does not exceed 106\n\n-----Subtasks-----\n- Subtask #1 (15 points): P = 0\n-\
  \ Subtask #2 (15 points): Q = 0\n- Subtask #3 (70 points): Original constraints\n\
  \n-----Example-----\nInput:3\n3 3 0\n1 2 2\n3 2 1\n1 2 1\n4 5 4\n2 3 4 5\n\nOutput:2\n\
  3\n3\n\n-----Explanation-----\nExample 1. Lumpy has just 3 one rupee coins. \n\n\
  He can pay creatures numbered {1, 2} or creatures numbered {1, 3} with these coins.\
  \ Thus, answer is 2. \nExample 2. Lumpy has 2 one rupee coins and 1 two rupee coin.\
  \ \n\nIn the optimal solution, Lumpy can give the two rupee coin to creature 2 and\
  \ the one rupee coins to creatures 1 and 3. Thus, answer is 3."
"vc-preamble": "import Imports.AllImports\n\ndef List.sum : List Nat → Nat \n  | []\
  \ => 0\n  | x::xs => x + sum xs\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def List.sort : List Nat → List Nat := sorry\n\ndef solve_bus_payback\
  \ (n p q : Nat) (amounts : List Nat) : Nat := sorry\n"
"vc-theorems": "theorem output_bounds (n p q : Nat) (amounts : List Nat) \n  (h :\
  \ amounts.length = n) :\n  let result := solve_bus_payback n p q amounts\n  0 ≤\
  \ result ∧ result ≤ n := sorry\n\n\ntheorem zero_money_zero_creatures (n : Nat)\
  \ (amounts : List Nat)\n  (h : amounts.length = n) :\n  solve_bus_payback n 0 0\
  \ amounts = 0 := sorry\n\n\ntheorem enough_money_even_amounts (n p q : Nat) (amounts\
  \ : List Nat)\n  (h1 : amounts.length = n)\n  (h2 : ∀ i < n, amounts.get ⟨i, sorry⟩\
  \ = 2 * (i + 1))\n  (h3 : p + 2*q ≥ List.sum amounts) :\n  solve_bus_payback n p\
  \ q amounts = n := sorry\n\n\ntheorem sorting_invariant (n p q : Nat) (amounts :\
  \ List Nat)\n  (h : amounts.length = n) :\n  solve_bus_payback n p q amounts = \n\
  \  solve_bus_payback n p q (List.sort amounts) := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
