"vc-description": "It's tricky keeping track of who is owed what when spending money\
  \ in a group. Write a function to balance the books.\n\n* The function should take\
  \ one parameter: an object/dict with two or more name-value pairs which represent\
  \ the members of the group and the amount spent by each.\n* The function should\
  \ return an object/dict with the same names, showing how much money the members\
  \ should pay or receive.\n\n**Further points:**\n\n* The values should be positive\
  \ numbers if the person should receive money from the group, negative numbers if\
  \ they owe money to the group.\n* If value is a decimal, round to two decimal places.\n\
  \ \nTranslations and comments (and upvotes!) welcome.\n\n### Example\n\n3 friends\
  \ go out together: A spends £20, B spends £15, and C spends £10. The function should\
  \ return an object/dict showing that A should receive £5, B should receive £0, and\
  \ C should pay £5."
"vc-preamble": "import Imports.AllImports\n\ndef List.sum (xs : List Int) : Int :=\n\
  \  match xs with\n  | [] => 0\n  | x::xs => x + xs.sum\n\n\ndef Int.toFloat (i :\
  \ Int) : Float :=\n  Float.ofInt i\n\nstructure BillDict where\n  keys : List String\
  \ \n  values : List Int\n  size : Nat\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def split_the_bill (bill : BillDict) : BillDict :=\n  sorry\n"
"vc-theorems": "theorem split_bill_preserves_keys (bill : BillDict) :\n  (split_the_bill\
  \ bill).keys = bill.keys := by\n  sorry\n\n\ntheorem split_bill_preserves_differences\
  \ (bill : BillDict) (k : String) :\n  k ∈ bill.keys →\n  let mean := (bill.values.sum.toFloat)\
  \ / (Float.ofNat bill.size)\n  k ∈ (split_the_bill bill).keys →\n  let orig_val\
  \ := bill.values[bill.keys.indexOf k]!\n  let new_val := (split_the_bill bill).values[bill.keys.indexOf\
  \ k]!\n  new_val.toFloat = orig_val.toFloat - mean := by\n  sorry\n\n\ntheorem split_bill_input_size_bounds\
  \ (bill : BillDict) :\n  2 ≤ bill.size ∧ bill.size ≤ 10 →\n  (∀ v ∈ bill.values,\
  \ 0 ≤ v ∧ v ≤ 1000) →\n  (split_the_bill bill).size = bill.size := by\n  sorry\n\
  \n/--\ninfo: expected1\n-/\n#guard_msgs in\n#eval split_the_bill {\"A\": 20, \"\
  B\": 15, \"C\": 10}\n\n/--\ninfo: expected2\n-/\n#guard_msgs in\n#eval split_the_bill\
  \ {\"A\": 40, \"B\": 25, \"X\": 10}\n\n/--\ninfo: expected3\n-/\n#guard_msgs in\n\
  #eval split_the_bill {\"A\": 40, \"B\": 25, \"C\": 10, \"D\": 153, \"E\": 58}\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
