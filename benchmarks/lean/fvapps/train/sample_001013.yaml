"vc-description": "You're given an integer N. Write a program to calculate the sum\
  \ of all the digits of N. \n\n-----Input-----\n\nThe first line contains an integer\
  \ T, the total number of testcases. Then follow T lines, each line contains an integer\
  \ N. \n\n-----Output-----\nFor each test case, calculate the sum of digits of N,\
  \ and display it in a new line.\n\n-----Constraints-----\n- 1 ≤ T ≤ 1000\n- 1 ≤\
  \ N ≤ 1000000\n\n-----Example-----\nInput\n3 \n12345\n31203\n2123\nOutput\n15\n\
  9\n8"
"vc-preamble": "import Imports.AllImports\n\ndef List.sum : List Nat → Nat \n  | []\
  \ => 0\n  | (x::xs) => x + List.sum xs\n\n\ndef sumDigits (n : Nat) : Nat :=\n \
  \ sorry\n\n\ndef stringToNat (s : String) : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def dropDigits (s : String) (i : Nat) : String :=\n  s.drop i"
"vc-theorems": "theorem sum_digits_non_negative (n : Nat) :\n  sumDigits n ≥ 0 :=\
  \ sorry\n\n\ntheorem sum_digits_upper_bound (n : Nat) :\n  sumDigits n ≤ n * (toString\
  \ n).length := sorry \n\n\ntheorem sum_digits_single_digit (n : Nat) (h : n ≤ 9)\
  \ :\n  sumDigits n = n := sorry\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
