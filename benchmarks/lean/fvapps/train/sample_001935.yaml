"vc-description": "Ivan wants to make a necklace as a present to his beloved girl.\
  \ A necklace is a cyclic sequence of beads of different colors. Ivan says that necklace\
  \ is beautiful relative to the cut point between two adjacent beads, if the chain\
  \ of beads remaining after this cut is a palindrome (reads the same forward and\
  \ backward).\n\n [Image] \n\nIvan has beads of n colors. He wants to make a necklace,\
  \ such that it's beautiful relative to as many cuts as possible. He certainly wants\
  \ to use all the beads. Help him to make the most beautiful necklace.\n\n\n-----Input-----\n\
  \nThe first line of the input contains a single number n (1 ≤ n ≤ 26) — the number\
  \ of colors of beads. The second line contains after n positive integers a_{i}  \
  \ — the quantity of beads of i-th color. It is guaranteed that the sum of a_{i}\
  \ is at least 2 and does not exceed 100 000.\n\n\n-----Output-----\n\nIn the first\
  \ line print a single number — the maximum number of beautiful cuts that a necklace\
  \ composed from given beads may have. In the second line print any example of such\
  \ necklace.\n\nEach color of the beads should be represented by the corresponding\
  \ lowercase English letter (starting with a). As the necklace is cyclic, print it\
  \ starting from any point.\n\n\n-----Examples-----\nInput\n3\n4 2 1\n\nOutput\n\
  1\nabacaba\nInput\n1\n4\n\nOutput\n4\naaaa\n\nInput\n2\n1 1\n\nOutput\n0\nab\n\n\
  \n\n-----Note-----\n\nIn the first sample a necklace can have at most one beautiful\
  \ cut. The example of such a necklace is shown on the picture.\n\nIn the second\
  \ sample there is only one way to compose a necklace."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_necklace (n : Nat) (beads : List Nat) : Nat × String\
  \ := sorry\n\ntheorem single_bead_type_cuts {count : Nat} (h : count > 0) :\n  let\
  \ n := 1\n  let beads := [count]\n  (solve_necklace n beads).1 = count := sorry\n"
"vc-theorems": "theorem single_bead_type_necklace {count : Nat} (h : count > 0) :\n\
  \  let n := 1\n  let beads := [count]\n  (solve_necklace n beads).2 = String.mk\
  \ (List.replicate count 'a') := sorry\n\n/--\ninfo: sum(beads1)\n-/\n#guard_msgs\
  \ in\n#eval len necklace1\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval len necklace3\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
