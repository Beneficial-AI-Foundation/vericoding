"vc-description": "=====Problem Statement=====\nYou are given a positive integer N.\n\
  Your task is to print a palindromic triangle of size N.\n\nFor example, a palindromic\
  \ triangle of size 5 is:\n1\n121\n12321\n1234321\n123454321\n\nYou can't take more\
  \ than two lines. The first line (a for-statement) is already written for you.\n\
  You have to complete the code using exactly one print statement.\n\nNote:\nUsing\
  \ anything related to strings will give a score of 0.\nUsing more than one for-statement\
  \ will give a score of 0.\n\n=====Input Format=====\nA single line of input containing\
  \ the integer N.\n\n=====Constraints=====\n0<N<10\n\n=====Output Format=====\nPrint\
  \ the palindromic triangle of size N as explained above."
"vc-preamble": "import Imports.AllImports\n\ndef make_palindrome_triangle (n: Nat)\
  \ : String :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def split_lines (s: String) : List String :=\n  sorry\n"
"vc-theorems": "theorem palindrome_triangle_line_count {n: Nat} (h: 0 < n) (h2: n\
  \ ≤ 9):\n  let lines := split_lines (make_palindrome_triangle n)\n  lines.length\
  \ = n :=\nsorry\n\n\ntheorem palindrome_triangle_lines_are_palindromes {n: Nat}\
  \ (h: 0 < n) (h2: n ≤ 9):\n  let lines := split_lines (make_palindrome_triangle\
  \ n)\n  ∀ line ∈ lines, line.data = (line.data.reverse) :=\nsorry\n\n\ntheorem palindrome_triangle_lines_increase\
  \ {n: Nat} (h: 0 < n) (h2: n ≤ 9):\n  let lines := split_lines (make_palindrome_triangle\
  \ n)\n  ∀ i, 0 < i → i < lines.length → (lines.get! i).length > (lines.get! (i-1)).length\
  \ :=\nsorry\n\n\ntheorem palindrome_triangle_first_line {n: Nat} (h: 0 < n) (h2:\
  \ n ≤ 9):\n  let lines := split_lines (make_palindrome_triangle n)\n  lines.head!\
  \ = \"1\" :=\nsorry\n\n\ntheorem palindrome_triangle_only_digits {n: Nat} (h: 0\
  \ < n) (h2: n ≤ 9):\n  let lines := split_lines (make_palindrome_triangle n)\n \
  \ ∀ line ∈ lines, ∀ c ∈ line.data, '0' ≤ c ∧ c ≤ '9' :=\nsorry\n\n\ntheorem palindrome_triangle_middle_increment\
  \ {n: Nat} (h: 0 < n) (h2: n ≤ 9):\n  let lines := split_lines (make_palindrome_triangle\
  \ n)\n  ∀ i, 0 < i → i < lines.length →\n    let line := lines.get! i\n    let mid\
  \ := line.length / 2\n    ∀ j, j < mid → line.data[j]! = Char.ofNat ((j + 1) + '0'.toNat)\
  \ :=\nsorry\n\n/--\ninfo: '1\\n121\\n12321'\n-/\n#guard_msgs in\n#eval make_palindrome_triangle\
  \ 3\n\n/--\ninfo: '1\\n121\\n12321\\n1234321\\n123454321'\n-/\n#guard_msgs in\n\
  #eval make_palindrome_triangle 5\n\n/--\ninfo: '1'\n-/\n#guard_msgs in\n#eval make_palindrome_triangle\
  \ 1\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
