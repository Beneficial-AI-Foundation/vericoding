"vc-description": "# Task\n The year of `2013` is the first year after the old `1987`\
  \ with only distinct digits.\n\n Now your task is to solve the following problem:\
  \ given a `year` number, find the minimum year number which is strictly larger than\
  \ the given one and has only distinct digits.\n\n# Input/Output\n\n\n - `[input]`\
  \ integer `year`\n\n `1000 ≤ year ≤ 9000`\n\n\n - `[output]` an integer\n\n  the\
  \ minimum year number that is strictly larger than the input number `year` and all\
  \ its digits are distinct."
"vc-preamble": "import Imports.AllImports\n\ndef toString (n : Nat) : List Nat :=\
  \ sorry\n\ndef distinctDigitYear (year : Nat) : Nat := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def hasDistinctDigits (n : Nat) : Bool := sorry\n\ntheorem distinct_digit_year_greater_than_input\
  \ (year : Nat)\n  (h : year ≥ 1000 ∧ year ≤ 9000) :\n  distinctDigitYear year >\
  \ year := sorry\n"
"vc-theorems": "theorem distinct_digit_year_has_four_digits (year : Nat)\n  (h : year\
  \ ≥ 1000 ∧ year ≤ 9000) :\n  distinctDigitYear year ≥ 1000 := sorry\n\n\ntheorem\
  \ distinct_digit_year_has_distinct_digits (year : Nat) \n  (h : year ≥ 1000 ∧ year\
  \ ≤ 9000) :\n  hasDistinctDigits (distinctDigitYear year) = true := sorry\n\n\n\
  theorem distinct_digit_year_is_minimal (year : Nat)\n  (h : year ≥ 1000 ∧ year ≤\
  \ 9000) :\n  ∀ y, year < y → y < distinctDigitYear year →\n    hasDistinctDigits\
  \ y = false := sorry\n\n/--\ninfo: 2013\n-/\n#guard_msgs in\n#eval distinct_digit_year\
  \ 1987\n\n/--\ninfo: 2014\n-/\n#guard_msgs in\n#eval distinct_digit_year 2013\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
