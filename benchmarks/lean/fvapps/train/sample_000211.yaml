"vc-description": "Given an array nums of positive integers. Your task is to select\
  \ some subset of nums, multiply each element by an integer and add all these numbers. The\
  \ array is said to be good if you can obtain a sum of 1 from the array by any possible\
  \ subset and multiplicand.\nReturn True if the array is good otherwise return False.\n\
   \nExample 1:\nInput: nums = [12,5,7,23]\nOutput: true\nExplanation: Pick numbers\
  \ 5 and 7.\n5*3 + 7*(-2) = 1\n\nExample 2:\nInput: nums = [29,6,10]\nOutput: true\n\
  Explanation: Pick numbers 29, 6 and 10.\n29*1 + 6*(-3) + 10*(-1) = 1\n\nExample\
  \ 3:\nInput: nums = [3,6]\nOutput: false\n\n \nConstraints:\n\n1 <= nums.length\
  \ <= 10^5\n1 <= nums[i] <= 10^9"
"vc-preamble": "import Imports.AllImports\n\ndef isGoodArray (nums : List Nat) : Bool\
  \ := sorry\n\ndef gcd (a b : Nat) : Nat := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def listGcd (nums : List Nat) : Nat := sorry\n\ntheorem good_array_gcd\
  \ {nums : List Nat} (h : nums ≠ []) :\n  isGoodArray nums = true ↔ listGcd nums\
  \ = 1\n  := sorry\n"
"vc-theorems": "theorem multiples_not_good {n : Nat} (h : n ≥ 2) : \n  isGoodArray\
  \ [n, 2*n, 3*n, 4*n] = false \n  := sorry\n\n\ntheorem scale_makes_not_good {nums\
  \ : List Nat} (h : nums ≠ []) :\n  isGoodArray (nums.map (· * 2)) = false\n  :=\
  \ sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval isGoodArray #[12, 5, 7, 23]\n\
  \n/--\ninfo: True\n-/\n#guard_msgs in\n#eval isGoodArray #[29, 6, 10]\n\n/--\ninfo:\
  \ False\n-/\n#guard_msgs in\n#eval isGoodArray #[3, 6]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
