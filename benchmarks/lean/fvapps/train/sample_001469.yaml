"vc-description": "Zombies zombies everywhere!! \nIn a parallel world of zombies,\
  \ there are N zombies. There are infinite number of unused cars, each of same model\
  \ only differentiated by the their colors. The cars are of K colors.\n\nA zombie\
  \ parent can give birth to any number of zombie-children (possibly zero), i.e. each\
  \ zombie will have its parent except the head zombie which was born in the winters\
  \ by combination of ice and fire.\n\nNow, zombies are having great difficulties\
  \ to commute to their offices without cars, so they decided to use the cars available.\
  \ Every zombie will need only one car. Head zombie called a meeting regarding this,\
  \ in which he will allow each zombie to select a car for him.\n\nOut of all the\
  \ cars, the head zombie chose one of cars for him. Now, he called his children to\
  \ choose the cars for them. After that they called their children and so on till\
  \ each of the zombie had a car. Head zombie knew that it won't be a good idea to\
  \ allow children to have cars of same color as that of parent, as they might mistakenly\
  \ use that. So, he enforced this rule during the selection of cars.\n\nProfessor\
  \ James Moriarty is a criminal mastermind and has trapped Watson again in the zombie\
  \ world. Sherlock somehow manages to go there and met the head zombie. Head zombie\
  \ told Sherlock that they will let Watson free if and only if Sherlock manages to\
  \ tell him the maximum number of ways in which the cars can be selected by N Zombies\
  \ among all possible hierarchies. A hierarchy represents parent-child relationships\
  \ among the N zombies. Since the answer may be large, output the answer modulo 109\
  \ + 7. Sherlock can not compute big numbers, so he confides you to solve this for\
  \ him.\n\n-----Input-----\nThe first line consists of a single integer T, the number\
  \ of test-cases.\n\nEach test case consists of two space-separated integers N and\
  \ K, denoting number of zombies and the possible number of colors of the cars respectively.\n\
  \n-----Output-----\nFor each test-case, output a single line denoting the answer\
  \ of the problem.\n\n-----Constraints-----\n- 1 ≤ T ≤ 100\n- 1 ≤ N ≤ 10^9\n- 1 ≤\
  \ K ≤ 10^9\n\n-----Subtasks-----\nSubtask #1 : (10 points)\n- 1 ≤ T ≤ 20\n- 1 ≤\
  \ N, K ≤ 10\n\nSubtask 2 : (20 points) \n\n- 1 ≤ T ≤ 10\n- 1 ≤ N, K ≤ 10000\n\n\
  Subtask 3 : (70 points) \n\n- 1 ≤ T ≤ 100\n- 1 ≤ N, K ≤ 10^9\n\n-----Example-----\n\
  Input\n2\n2 2\n3 3\nOutput:\n2\n12\n\n-----Explanation\nIn the first sample test\
  \ case, there are 2 zombies. Let us name them Z1 and Z2. Let one hierarchy be one\
  \ in which Z1 is parent of Z2. There are 2 colors, suppose red and blue. If Z1 takes\
  \ red, then Z2 should take a blue. If Z1 takes blue, then Z2 should take red. \n\
  Note that one other possible hierarchy could be one in which Z2 is a parent of Z1.\
  \ In that hierarchy also, number of possible ways of assigning cars is 2.\nSo there\
  \ maximum number of possible ways is 2.\n\nIn the second example, we have 3 Zombies\
  \ say Z1, Z2, Z3 and cars of 3 colors, suppose red, blue and green.\nA hierarchy\
  \ to maximize the number of possibilities is Z1 is the parent of Z2, Z2 is the parent\
  \ of Z3.\nZombie Z1 can choose one of red, blue or green cars. Z2 can choose one\
  \ of the remaining two colors (as its car's color can not be same as its parent\
  \ car.). Z3 can also choose his car in two colors, (one of them could be color same\
  \ as Z1, and other being the color which is not same as cars of both Z1 and Z2.).\
  \ This way, there can be 12 different ways of selecting the cars.\n\n-----\nIn the\
  \ first sample test case, there are 2 zombies. Let us name them Z1 and Z2. Let one\
  \ hierarchy be one in which Z1 is parent of Z2. There are 2 colors, suppose red\
  \ and blue. If Z1 takes red, then Z2 should take a blue. If Z1 takes blue, then\
  \ Z2 should take red. \n\nNote that one other possible hierarchy could be one in\
  \ which Z2 is a parent of Z1. In that hierarchy also, number of possible ways of\
  \ assigning cars is 2.\n\nSo there maximum number of possible ways is 2.\n\nIn the\
  \ second example, we have 3 Zombies say Z1, Z2, Z3 and cars of 3 colors, suppose\
  \ red, blue and green.\n\nA hierarchy to maximize the number of possibilities is\
  \ Z1 is the parent of Z2, Z2 is the parent of Z3.\n\nZombie Z1 can choose one of\
  \ red, blue or green cars. Z2 can choose one of the remaining two colors (as its\
  \ car's color can not be same as its parent car.). Z3 can also choose his car in\
  \ two colors, (one of them could be color same as Z1, and other being the color\
  \ which is not same as cars of both Z1 and Z2.). This way, there can be 12 different\
  \ ways of selecting the cars."
"vc-preamble": "import Imports.AllImports\n\ndef solve_zombie_cars (n k : Nat) : Nat\
  \ :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def MOD : Nat := 1000000007\n\ntheorem solve_zombie_cars_output_range\
  \ (n k : Nat) :\n  n ≥ 1 → k ≥ 1 → solve_zombie_cars n k < MOD :=\n  sorry\n"
"vc-theorems": "theorem solve_zombie_cars_k_one (n k : Nat) :\n  n ≥ 1 → k = 1 → solve_zombie_cars\
  \ n k = if n = 1 then 1 else 0 :=\n  sorry\n\n\ntheorem solve_zombie_cars_formula\
  \ (n k : Nat) :\n  n ≥ 1 → k ≥ 1 → \n  solve_zombie_cars n k = (k * (k-1)^(n-1))\
  \ % MOD :=\n  sorry\n\n\ntheorem solve_zombie_cars_known_values : \n  solve_zombie_cars\
  \ 2 2 = 2 ∧\n  solve_zombie_cars 3 3 = 12 ∧\n  solve_zombie_cars 4 3 = 24 :=\n \
  \ sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
