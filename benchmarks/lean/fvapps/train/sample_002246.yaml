"vc-description": "Vasya is an active Internet user. One day he came across an Internet\
  \ resource he liked, so he wrote its address in the notebook. We know that the address\
  \ of the written resource has format: <protocol>://<domain>.ru[/<context>] \n\n\
  where:  <protocol> can equal either \"http\" (without the quotes) or \"ftp\" (without\
  \ the quotes),  <domain> is a non-empty string, consisting of lowercase English\
  \ letters,  the /<context> part may not be present. If it is present, then <context>\
  \ is a non-empty string, consisting of lowercase English letters. \n\nIf string\
  \ <context> isn't present in the address, then the additional character \"/\" isn't\
  \ written. Thus, the address has either two characters \"/\" (the ones that go before\
  \ the domain), or three (an extra one in front of the context).\n\nWhen the boy\
  \ came home, he found out that the address he wrote in his notebook had no punctuation\
  \ marks. Vasya must have been in a lot of hurry and didn't write characters \":\"\
  , \"/\", \".\".\n\nHelp Vasya to restore the possible address of the recorded Internet\
  \ resource.\n\n\n-----Input-----\n\nThe first line contains a non-empty string that\
  \ Vasya wrote out in his notebook. This line consists of lowercase English letters\
  \ only. \n\nIt is guaranteed that the given string contains at most 50 letters.\
  \ It is guaranteed that the given string can be obtained from some correct Internet\
  \ resource address, described above.\n\n\n-----Output-----\n\nPrint a single line\
  \ — the address of the Internet resource that Vasya liked. If there are several\
  \ addresses that meet the problem limitations, you are allowed to print any of them.\n\
  \n\n-----Examples-----\nInput\nhttpsunrux\n\nOutput\nhttp://sun.ru/x\n\nInput\n\
  ftphttprururu\n\nOutput\nftp://http.ru/ruru\n\n\n\n-----Note-----\n\nIn the second\
  \ sample there are two more possible answers: \"ftp://httpruru.ru\" and \"ftp://httpru.ru/ru\"\
  ."
"vc-preamble": "import Imports.AllImports\n\ndef ValidProtocol (s : String) : Prop\
  \ := s = \"http\" ∨ s = \"ftp\"\n\ndef IsValidDomainChar (c : Char) : Prop := c.isUpper\
  \ ∨ c.isLower ∨ c.isDigit\n\ndef IsValidPathChar (c : Char) : Prop := c.isUpper\
  \ ∨ c.isLower ∨ c.isDigit\n\ndef format_internet_address (s : String) : String :=\
  \ sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def countChar (s : String) (c : Char) : Nat :=\n  s.foldl (fun\
  \ acc x => if x = c then acc + 1 else acc) 0\n"
"vc-theorems": "theorem format_internet_address_starts_with_protocol (s : String)\
  \ :\n  (s.startsWith \"http\" ∨ s.startsWith \"ftp\") →\n  (format_internet_address\
  \ s).startsWith \"http://\" ∨ \n  (format_internet_address s).startsWith \"ftp://\"\
  \ := sorry\n\n\ntheorem format_internet_address_preserves_protocol (s : String)\
  \ :\n  s.startsWith \"http\" → (format_internet_address s).startsWith \"http://\"\
  \ := sorry\n\n\ntheorem format_internet_address_preserves_ftp (s : String) :\n \
  \ s.startsWith \"ftp\" → (format_internet_address s).startsWith \"ftp://\" := sorry\n\
  \npartial def containsSubstr (haystack needle : String) : Bool :=\n  if needle.length\
  \ = 0 then true\n  else if haystack.length < needle.length then false\n  else if\
  \ haystack.take needle.length = needle then true\n  else containsSubstr (haystack.drop\
  \ 1) needle\n\n\ntheorem format_internet_address_contains_ru (s : String) :\n  containsSubstr\
  \ (format_internet_address s) \".ru\" = true := sorry\n\npartial def countSubstr\
  \ (haystack needle : String) : Nat :=\n  if needle.length = 0 then 0\n  else if\
  \ haystack.length < needle.length then 0\n  else if haystack.take needle.length\
  \ = needle \n    then 1 + countSubstr (haystack.drop needle.length) needle\n   \
  \ else countSubstr (haystack.drop 1) needle\n\n\ntheorem format_internet_address_single_ru\
  \ (s : String) :\n  countSubstr (format_internet_address s) \".ru\" = 1 := sorry\n\
  \n\ntheorem format_internet_address_path_slashes (s : String) :\n  containsSubstr\
  \ s \"ru\" = true →\n  s.length > (s.length - (s.takeRight (s.length - 2)).length)\
  \ + 2 →\n  countChar (format_internet_address s) '/' = 3 := sorry"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
