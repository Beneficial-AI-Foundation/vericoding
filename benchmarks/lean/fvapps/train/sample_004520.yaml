vc-description: |-
  You're going on a trip with some students and it's up to you to keep track of how much money each Student has. A student is defined like this:

  ```python
  class Student:
      def __init__(self, name, fives, tens, twenties):
          self.name = name
          self.fives = fives
          self.tens = tens
          self.twenties = twenties
  ```

  As you can tell, each Student has some fives, tens, and twenties. Your job is to return the name of the student with the most money. If every student has the same amount, then return `"all"`.

  Notes:
  * Each student will have a unique name
  * There will always be a clear winner: either one person has the most, or everyone has the same amount
  * If there is only one student, then that student has the most money
vc-preamble: |
  import Imports.AllImports

  def total_money (s : Student) : Nat :=
    s.fives * 5 + s.tens * 10 + s.twenties * 20


  def most_money (students : List Student) : String :=
    sorry
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def find_max_student (students : List Student) : Student :=
    sorry
vc-theorems: |
  theorem most_money_valid_result {students : List Student} (h : students ≠ []) :
    let result := most_money students
    (students.length = 1 → result = (students.head h).name) ∧
    (students.length > 1 → result = "all" ∨ ∃ s ∈ students, result = s.name) :=
  sorry


  theorem all_equal_returns_all {students : List Student} (h1 : students ≠ []) 
    (h2 : ∀ s ∈ students, total_money s = total_money (students.head h1)) :
    most_money students = "all" :=
  sorry


  theorem highest_total_wins {students : List Student} (h : students ≠ []) :
    let result := most_money students
    let max_student := find_max_student students
    result ≠ "all" → result = max_student.name :=
  sorry

  /--
  info: 'Phil'
  -/
  #guard_msgs in
  #eval most_money [phil]

  /--
  info: 'Phil'
  -/
  #guard_msgs in
  #eval most_money [cameron, geoff, phil]

  /--
  info: 'all'
  -/
  #guard_msgs in
  #eval most_money [andy, stephen, eric]
vc-postamble: |-
  -- Apps difficulty: introductory
  -- Assurance level: unguarded
