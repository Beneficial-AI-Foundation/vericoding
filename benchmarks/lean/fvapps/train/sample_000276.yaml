"vc-description": "Given an integer array, return the k-th smallest distance among\
  \ all the pairs. The distance of a pair (A, B) is defined as the absolute difference\
  \ between A and B. \n\nExample 1:\n\nInput:\nnums = [1,3,1]\nk = 1\nOutput: 0 \n\
  Explanation:\nHere are all the pairs:\n(1,3) -> 2\n(1,1) -> 0\n(3,1) -> 2\nThen\
  \ the 1st smallest distance pair is (1,1), and its distance is 0.\n\n\n\nNote:\n\
  \n2 .\n0 .\n1 ."
"vc-preamble": "import Imports.AllImports\n\ndef abs (x : Int) : Int :=\n  if x <\
  \ 0 then -x else x\n\n\ndef maximum (l : List Int) : Int :=\nsorry\n\n\ndef minimum\
  \ (l : List Int) : Int :=\nsorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def smallest_distance_pair : List Int → Nat → Int :=\nsorry\n"
"vc-theorems": "theorem smallest_distance_pair_properties {nums : List Int} {k : Nat}\n\
  \    (h1 : nums.length ≥ 2)\n    (h2 : k ≥ 1)\n    (h3 : k ≤ (nums.length * (nums.length\
  \ - 1)) / 2)\n    (h4 : ∀ x ∈ nums, -100 ≤ x ∧ x ≤ 100) :\n    let result := smallest_distance_pair\
  \ nums k;\n    result ≥ 0 ∧\n    result ≤ maximum nums - minimum nums :=\nsorry\n\
  \n\ntheorem identical_elements {n : List Int} (h : n.length ≥ 2) :\n  smallest_distance_pair\
  \ (List.replicate n.length (n.get! 0)) 1 = 0 :=\nsorry\n\n\ntheorem sorted_input_equivalence\
  \ {nums : List Int} (h : nums.length ≥ 2) :\n  smallest_distance_pair nums 1 = smallest_distance_pair\
  \ (nums.reverse.reverse) 1 :=\nsorry\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval\
  \ smallest_distance_pair [1, 1, 3] 1\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval\
  \ smallest_distance_pair [1, 3, 1] 1\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval\
  \ smallest_distance_pair [1, 6, 1] 3\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
