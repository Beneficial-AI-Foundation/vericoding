"vc-description": "You are given a string text of words that are placed among some\
  \ number of spaces. Each word consists of one or more lowercase English letters\
  \ and are separated by at least one space. It's guaranteed that text contains at\
  \ least one word.\nRearrange the spaces so that there is an equal number of spaces\
  \ between every pair of adjacent words and that number is maximized. If you cannot\
  \ redistribute all the spaces equally, place the extra spaces at the end, meaning\
  \ the returned string should be the same length as text.\nReturn the string after\
  \ rearranging the spaces.\n \nExample 1:\nInput: text = \"  this   is  a sentence\
  \ \"\nOutput: \"this   is   a   sentence\"\nExplanation: There are a total of 9\
  \ spaces and 4 words. We can evenly divide the 9 spaces between the words: 9 / (4-1)\
  \ = 3 spaces.\n\nExample 2:\nInput: text = \" practice   makes   perfect\"\nOutput:\
  \ \"practice   makes   perfect \"\nExplanation: There are a total of 7 spaces and\
  \ 3 words. 7 / (3-1) = 3 spaces plus 1 extra space. We place this extra space at\
  \ the end of the string.\n\nExample 3:\nInput: text = \"hello   world\"\nOutput:\
  \ \"hello   world\"\n\nExample 4:\nInput: text = \"  walks  udp package   into \
  \ bar a\"\nOutput: \"walks  udp  package  into  bar  a \"\n\nExample 5:\nInput:\
  \ text = \"a\"\nOutput: \"a\"\n\n \nConstraints:\n\n1 <= text.length <= 100\ntext consists\
  \ of lowercase English letters and ' '.\ntext contains at least one word."
"vc-preamble": "import Imports.AllImports\n\ndef countSpaces (s : String) : Nat :=\n\
  \  sorry\n\n\ndef split (s : String) : List String :=\n  sorry\n\n\ndef startsWith\
  \ (s : String) (c : Char) : Bool :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def reorderSpaces (s : String) : String :=\n  sorry\n"
"vc-theorems": "theorem reorderSpaces_preserves_spaces (s : String) :\n  countSpaces\
  \ s = countSpaces (reorderSpaces s) := by\n  sorry\n\n\ntheorem reorderSpaces_preserves_words\
  \ (s : String) :\n  split s = split (reorderSpaces s) := by\n  sorry\n\n\ntheorem\
  \ reorderSpaces_no_leading_spaces (s : String) :\n  ¬startsWith (reorderSpaces s)\
  \ ' ' := by\n  sorry\n\n/--\ninfo: 'this   is   a   sentence'\n-/\n#guard_msgs in\n\
  #eval reorder_spaces \"  this   is  a sentence \"\n\n/--\ninfo: 'practice   makes\
  \   perfect '\n-/\n#guard_msgs in\n#eval reorder_spaces \" practice   makes   perfect\"\
  \n\n/--\ninfo: 'a'\n-/\n#guard_msgs in\n#eval reorder_spaces \"a\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
