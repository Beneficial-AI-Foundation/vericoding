"vc-description": "Given two strings S and T, each of which represents a non-negative\
  \ rational number, return True if and only if they represent the same number. The\
  \ strings may use parentheses to denote the repeating part of the rational number.\n\
  In general a rational number can be represented using up to three parts: an integer\
  \ part, a non-repeating part, and a repeating part. The number will be represented in\
  \ one of the following three ways:\n\n<IntegerPart> (e.g. 0, 12, 123)\n<IntegerPart><.><NonRepeatingPart>\
  \  (e.g. 0.5, 1., 2.12, 2.0001)\n<IntegerPart><.><NonRepeatingPart><(><RepeatingPart><)>\
  \ (e.g. 0.1(6), 0.9(9), 0.00(1212))\n\nThe repeating portion of a decimal expansion\
  \ is conventionally denoted within a pair of round brackets.  For example:\n1 /\
  \ 6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66)\nBoth 0.1(6) or 0.1666(6) or\
  \ 0.166(66) are correct representations of 1 / 6.\n \nExample 1:\nInput: S = \"\
  0.(52)\", T = \"0.5(25)\"\nOutput: true\nExplanation:\nBecause \"0.(52)\" represents\
  \ 0.52525252..., and \"0.5(25)\" represents 0.52525252525..... , the strings represent\
  \ the same number.\n\n\nExample 2:\nInput: S = \"0.1666(6)\", T = \"0.166(66)\"\n\
  Output: true\n\n\nExample 3:\nInput: S = \"0.9(9)\", T = \"1.\"\nOutput: true\n\
  Explanation: \n\"0.9(9)\" represents 0.999999999... repeated forever, which equals\
  \ 1.  [See this link for an explanation.]\n\"1.\" represents the number 1, which\
  \ is formed correctly: (IntegerPart) = \"1\" and (NonRepeatingPart) = \"\".\n \n\
  \n\nNote:\n\nEach part consists only of digits.\nThe <IntegerPart> will not begin\
  \ with 2 or more zeros.  (There is no other restriction on the digits of each part.)\n\
  1 <= <IntegerPart>.length <= 4 \n0 <= <NonRepeatingPart>.length <= 4 \n1 <= <RepeatingPart>.length\
  \ <= 4"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def is_rational_equal (s1 s2 : String) : Bool := sorry\n\ndef make_rational_str\
  \ (n d : Int) : String := sorry\n"
"vc-theorems": "theorem equivalent_fractions\n  {n1 d1 n2 d2 : Int}\n  (h1 : d1 >\
  \ 0)\n  (h2 : d2 > 0) \n  (h3 : n1 ≥ -1000)\n  (h4 : n1 ≤ 1000)\n  (h5 : d1 ≤ 100)\n\
  \  (h6 : n2 ≥ -1000)\n  (h7 : n2 ≤ 1000)\n  (h8 : d2 ≤ 100)\n  (h9 : n1 / d1 = n2\
  \ / d2) :\n  is_rational_equal (make_rational_str n1 d1) (make_rational_str n2 d2)\
  \ = true :=\nsorry\n\n\ntheorem repeating_nines\n  (n : Nat)\n  (h1 : n > 0)\n \
  \ (h2 : n ≤ 9) :\n  let s1 := (\"0.\" ++ String.mk (List.replicate n '9') ++ \"\
  (9)\")\n  let s2 := \"1.\"\n  is_rational_equal s1 s2 = true :=\nsorry\n\n/--\n\
  info: True\n-/\n#guard_msgs in\n#eval is_rational_equal \"0.(52)\" \"0.5(25)\"\n\
  \n/--\ninfo: True\n-/\n#guard_msgs in\n#eval is_rational_equal \"0.1666(6)\" \"\
  0.166(66)\"\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval is_rational_equal \"0.9(9)\"\
  \ \"1.\"\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
