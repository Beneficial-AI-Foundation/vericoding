"vc-description": "# Task\nTwo players - `\"black\"` and `\"white\"` are playing a\
  \ game. The game consists of several rounds. If a player wins in a round, he is\
  \ to move again during the next round. If a player loses a round, it's the other\
  \ player who moves on the next round. Given whose turn it was on the previous round\
  \ and whether he won, determine whose turn it is on the next round.\n\n\n\n# Input/Output\n\
  \n\n`[input]` string `lastPlayer`/`$last_player`\n\n`\"black\"` or `\"white\"` -\
  \ whose move it was during the previous round.\n\n`[input]` boolean `win`/`$win`\n\
  \n`true` if the player who made a move during the previous round won, `false` otherwise.\n\
  \n`[output]` a string\n\nReturn `\"white\"` if white is to move on the next round,\
  \ and `\"black\"` otherwise.\n\n# Example\n\nFor `lastPlayer = \"black\" and win\
  \ = false`, the output should be `\"white\"`.\n\nFor `lastPlayer = \"white\" and\
  \ win = true`, the output should be `\"white\"`."
"vc-preamble": "import Imports.AllImports\n\ndef opposite : Player → Player \n  |\
  \ Player.black => Player.white\n  | Player.white => Player.black\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def whoseMove (player : Player) (win : Bool) : Player := sorry\n\
  \ntheorem whoseMove_valid (player : Player) (win : Bool) :\n  whoseMove player win\
  \ = player ∨ whoseMove player win = opposite player := by sorry\n"
"vc-theorems": "theorem whoseMove_win (player : Player) (win : Bool) :\n  win = true\
  \ → whoseMove player win = player := by sorry\n\n\ntheorem whoseMove_lose (player\
  \ : Player) (win : Bool) :\n  win = false → whoseMove player win = opposite player\
  \ := by sorry\n\n/--\ninfo: 'white'\n-/\n#guard_msgs in\n#eval whoseMove \"black\"\
  \ False\n\n/--\ninfo: 'white'\n-/\n#guard_msgs in\n#eval whoseMove \"white\" True\n\
  \n/--\ninfo: 'black'\n-/\n#guard_msgs in\n#eval whoseMove \"black\" True\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
