"vc-description": "Every Friday and Saturday night, farmer counts amount of sheep\
  \ returned back to his farm (sheep returned on Friday stay and don't leave for a\
  \ weekend).\n\nSheep return in groups each of the days -> you will be given two\
  \ arrays with these numbers (one for Friday and one for Saturday night). Entries\
  \ are always positive ints, higher than zero.\n\nFarmer knows the total amount of\
  \ sheep, this is a third parameter. You need to return the amount of sheep lost\
  \ (not returned to the farm) after final sheep counting on Saturday.\n\nExample\
  \ 1: Input: {1, 2}, {3, 4}, 15 --> Output: 5\n\nExample 2: Input: {3, 1, 2}, {4,\
  \ 5}, 21 --> Output: 6\n\nGood luck! :-)"
"vc-preamble": "import Imports.AllImports\n\ndef sum_list : List Nat â†’ Nat\n  | []\
  \ => 0\n  | x::xs => x + sum_list xs\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def lost_sheep (friday : List Nat) (saturday : List Nat) (total\
  \ : Nat) : Nat :=\nsorry\n\n\n\n\n"
"vc-theorems": "theorem lost_sheep_reverse_invariant (friday : List Nat) (saturday\
  \ : List Nat) (total : Nat) :\n  lost_sheep friday saturday total = lost_sheep friday.reverse\
  \ saturday.reverse total :=\nsorry\n\n\ntheorem lost_sheep_empty_lists (total :\
  \ Nat) :\n  lost_sheep [] [] total = total :=\nsorry\n\n/--\ninfo: 5\n-/\n#guard_msgs\
  \ in\n#eval lost_sheep [1, 2] [3, 4] 15\n\n/--\ninfo: 6\n-/\n#guard_msgs in\n#eval\
  \ lost_sheep [3, 1, 2] [4, 5] 21\n\n/--\ninfo: 10\n-/\n#guard_msgs in\n#eval lost_sheep\
  \ [5, 1, 4] [5, 4] 29\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
