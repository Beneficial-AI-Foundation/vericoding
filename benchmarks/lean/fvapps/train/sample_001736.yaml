"vc-description": "Given a collection of intervals, find the minimum number of intervals\
  \ you need to remove to make the rest of the intervals non-overlapping.\n\n\nNote:\n\
  \nYou may assume the interval's end point is always bigger than its start point.\n\
  Intervals like [1,2] and [2,3] have borders \"touching\" but they don't overlap\
  \ each other.\n\n\n\nExample 1:\n\nInput: [ [1,2], [2,3], [3,4], [1,3] ]\n\nOutput:\
  \ 1\n\nExplanation: [1,3] can be removed and the rest of intervals are non-overlapping.\n\
  \n\n\nExample 2:\n\nInput: [ [1,2], [1,2], [1,2] ]\n\nOutput: 2\n\nExplanation:\
  \ You need to remove two [1,2] to make the rest of intervals non-overlapping.\n\n\
  \n\nExample 3:\n\nInput: [ [1,2], [2,3] ]\n\nOutput: 0\n\nExplanation: You don't\
  \ need to remove any of the intervals since they're already non-overlapping."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def Interval := Int × Int\n\ndef eraseOverlapIntervals (intervals\
  \ : List Interval) : Nat :=\n  sorry\n"
"vc-theorems": "theorem eraseOverlapIntervals_output_bounds\n  (intervals : List Interval)\n\
  \  (h : ∀ i ∈ intervals, i.1 ≤ i.2) :\n  0 ≤ eraseOverlapIntervals intervals ∧ eraseOverlapIntervals\
  \ intervals ≤ intervals.length :=\n  sorry\n\n\ntheorem eraseOverlapIntervals_empty_list\
  \ :\n  eraseOverlapIntervals [] = 0 :=\n  sorry\n\n\ntheorem eraseOverlapIntervals_single_interval\n\
  \  (i : Interval)\n  (h : i.1 ≤ i.2) :\n  eraseOverlapIntervals [i] = 0 :=\n  sorry\n\
  \n/--\ninfo: 1\n-/\n#guard_msgs in\n#eval eraseOverlapIntervals [[1, 2], [2, 3],\
  \ [3, 4], [1, 3]]\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval eraseOverlapIntervals\
  \ [[1, 2], [1, 2], [1, 2]]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval eraseOverlapIntervals\
  \ [[1, 2], [2, 3]]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
