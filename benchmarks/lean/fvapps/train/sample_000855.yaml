"vc-description": "Tracy loves Donuts. She purchased a lots of Donuts for her birthday\
  \ party. She learnt to calculate the area of the circle a few days back and she\
  \ is fascinated to know the area of the donuts as well !! Help her finding the area\
  \ of the Donuts…..\n\n-----Input:-----\n- First line will contain, number of testcases.\
  \ Then the testcases follow. \n- Each testcase contains of a single line of input,\
  \ where in you have to provide the RADIUS of the Donuts. \n\n-----Output:-----\n\
  For each testcase, output in a single line answer is the AREA of the Donut.\n\n\
  -----Constraints-----\n1 <= Radius <= 20.\n\n-----Sample Input:-----\n2\n5 \n12\n\
  \n-----Sample Output:-----\n78.5\n\n452.16"
"vc-preamble": "import Imports.AllImports\n\ndef Float.ofString? (s: String) : Option\
  \ Float := sorry\ndef Float.ofString! (s: String) : Float := (Float.ofString? s).get!\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def calculate_donut_areas (radii : List Int) : List String := sorry\n\
  \ntheorem calculate_donut_areas_length_match (radii : List Int) :\n  (calculate_donut_areas\
  \ radii).length = radii.length := sorry\n"
"vc-theorems": "theorem calculate_donut_areas_decimal_format (radii : List Int) (result\
  \ : String) :\n  result ∈ calculate_donut_areas radii → \n  (∃ n d : String, result\
  \ = n ++ \".\" ++ d ∧ d.length = 2) := sorry\n\n\ntheorem calculate_donut_areas_accuracy\
  \ (radius : Int) : \n  let area := calculate_donut_areas [radius]\n  let expected\
  \ := (Float.ofInt (radius * radius)) * 3.14\n  let actual := Float.ofString! area.head!\n\
  \  (actual - expected).abs < 0.01 := sorry\n\n\ntheorem calculate_donut_areas_negative_valid\
  \ (radii : List Int) \n  (h : ∀ r ∈ radii, r < 0) :\n  (calculate_donut_areas radii).length\
  \ = radii.length := sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
