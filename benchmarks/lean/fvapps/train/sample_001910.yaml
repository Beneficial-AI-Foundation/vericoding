vc-description: |-
  You are driving a vehicle that has capacity empty seats initially available for passengers.  The vehicle only drives east (ie. it cannot turn around and drive west.)
  Given a list of trips, trip[i] = [num_passengers, start_location, end_location] contains information about the i-th trip: the number of passengers that must be picked up, and the locations to pick them up and drop them off.  The locations are given as the number of kilometers due east from your vehicle's initial location.
  Return true if and only if it is possible to pick up and drop off all passengers for all the given trips. 
   
  Example 1:
  Input: trips = [[2,1,5],[3,3,7]], capacity = 4
  Output: false


  Example 2:
  Input: trips = [[2,1,5],[3,3,7]], capacity = 5
  Output: true


  Example 3:
  Input: trips = [[2,1,5],[3,5,7]], capacity = 3
  Output: true


  Example 4:
  Input: trips = [[3,2,7],[3,7,9],[8,3,9]], capacity = 11
  Output: true







   



   
  Constraints:

  trips.length <= 1000
  trips[i].length == 3
  1 <= trips[i][0] <= 100
  0 <= trips[i][1] < trips[i][2] <= 1000
  1 <= capacity <= 100000
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def carPooling (trips : List Trip) (capacity : Int) : Bool :=
    sorry
vc-theorems: |
  theorem capacity_zero (trips : List Trip) :
    carPooling trips 0 = (trips.length = 0) :=
    sorry


  theorem timeline_under_capacity (trips : List Trip) (capacity : Int) :
    carPooling trips capacity = true →
    ∀ t : Int, 
      (trips.foldl (λ acc trip =>
        if t ≥ trip.startLoc ∧ t < trip.endLoc
        then acc + trip.passengers 
        else acc) 0) ≤ capacity :=
    sorry


  theorem large_capacity_always_works (trips : List Trip) :
    carPooling trips 1000000 = true :=
    sorry


  theorem timeline_consistency (trips : List Trip) :
    (trips.foldl (λ acc trip => acc + trip.passengers - trip.passengers) 0) = 0 :=
    sorry


  theorem trip_valid (t : Trip) : 
    t.passengers > 0 ∧ 
    t.passengers ≤ 1000 ∧ 
    t.startLoc ≥ 0 ∧ 
    t.startLoc < 1000 ∧ 
    t.endLoc > 0 ∧ 
    t.endLoc ≤ 1000 ∧ 
    t.startLoc < t.endLoc :=
    sorry

  /--
  info: False
  -/
  #guard_msgs in
  #eval car_pooling [[2, 1, 5], [3, 3, 7]] 4

  /--
  info: True
  -/
  #guard_msgs in
  #eval car_pooling [[2, 1, 5], [3, 3, 7]] 5

  /--
  info: True
  -/
  #guard_msgs in
  #eval car_pooling [[3, 2, 7], [3, 7, 9], [8, 3, 9]] 11
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
