"vc-description": "Coffee Vending Machine Problems [Part 1]\n\nYou have a vending\
  \ machine, but it can not give the change back. You decide to implement this functionality.\
  \ First of all, you need to know the minimum number of coins for this operation\
  \ (i'm sure you don't want to return 100 pennys instead of 1$ coin).\nSo, find an\
  \ optimal number of coins required, if you have unlimited set of coins with given\
  \ denominations.\n\nAssume all inputs are valid positive integers, and every set\
  \ of coin denominations has len 4 for simplicity;\n\nExamples:\n\noptimal_number_of_coins(1,\
  \ [1, 2, 5, 10]) \n(1 penny) so returns 1  \noptimal_number_of_coins(5, [1, 2, 5,\
  \ 10])\n(5) so returns 1\noptimal_number_of_coins(6, [1, 3, 5, 10])\n(3+3 or 5+1)\
  \ = 6 so returns 2\noptimal_number_of_coins(10, [1, 2, 5, 10]) \n(10) so returns\
  \ 1\noptimal_number_of_coins(12, [1, 3, 5, 10])\n(10+1+1) = 12 so returns 3\noptimal_number_of_coins(53,\
  \ [1, 2, 5, 25])\n(25+25+2+1) = 53 so returns 4\noptimal_number_of_coins(7, [1,\
  \ 1, 1, 25])\n(1+1+1+1+1+1+1) = 7 so returns 7\netc..\n\nHave fun =)"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def optimalNumberOfCoins (n : Nat) (coins : List Nat) : Option\
  \ Nat := sorry\n\ntheorem optimal_coins_properties\n    (n : Nat)\n    (coins :\
  \ List Nat)\n    (h1 : n ≥ 1)\n    (h2 : n ≤ 1000)\n    (h3 : ∀ c ∈ coins, c ≥ 1\
  \ ∧ c ≤ 100)\n    (h4 : coins.length ≥ 1)\n    (h5 : coins.length ≤ 10) : \n   \
  \ match optimalNumberOfCoins n coins with\n    | none => True\n    | some r => \n\
  \        r ≥ 0 ∧\n        (1 ∈ coins → r ≤ n) ∧\n        (∀ c ∈ coins, n % c = 0\
  \ → r ≤ n / c)\n    := sorry\n"
"vc-theorems": "theorem optimal_coins_zero\n    (coins : List Nat)\n    (h1 : coins.length\
  \ ≥ 1)\n    (h2 : coins.length ≤ 10)\n    (h3 : ∀ c ∈ coins, c ≥ 1 ∧ c ≤ 100) :\n\
  \    optimalNumberOfCoins 0 coins = some 0 := sorry\n\n\ntheorem optimal_coins_edge_cases\
  \ :\n    optimalNumberOfCoins 1 [1] = some 1 ∧\n    optimalNumberOfCoins 1 [2] =\
  \ none := sorry"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
