"vc-description": "# Task\n Given two cells on the standard chess board, determine\
  \ whether they have the same color or not.\n\n# Example\n\n For `cell1 = \"A1\"\
  \ and cell2 = \"C3\"`, the output should be `true`.\n For `cell1 = \"A1\" and cell2\
  \ = \"H3\"`, the output should be `false`.\n\n# Input/Output\n\n - `[input]` string\
  \ `cell1`\n \n - `[input]` string `cell2`\n \n - `[output]` a boolean value\n\n\
  \    `true` if both cells have the same color, `false` otherwise."
"vc-preamble": "import Imports.AllImports\n\ndef chess_board_cell_color : Cell → Cell\
  \ → Bool := sorry\n\ntheorem chess_board_symmetry (c1 c2 : Cell) : \n  chess_board_cell_color\
  \ c1 c2 = chess_board_cell_color c2 c1 := sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def nextChar (c : Char) : Char := \n  Char.ofNat ((Char.toNat c)\
  \ + 1)\n"
"vc-theorems": "theorem chess_board_self_same_color (c : Cell) :\n  chess_board_cell_color\
  \ c c = true := sorry\n\n\ntheorem chess_board_transitivity (c1 c2 c3 : Cell) :\n\
  \  chess_board_cell_color c1 c2 = true → \n  chess_board_cell_color c2 c3 = true\
  \ →\n  chess_board_cell_color c1 c3 = true := sorry\n\n\ntheorem chess_board_adjacent_vertical\
  \ (c : Cell) (h : c.2 < 8) :\n  let above := Cell.mk c.1 (c.2 + 1)\n  chess_board_cell_color\
  \ c above = false := sorry\n\n\ntheorem chess_board_adjacent_horizontal (c : Cell)\
  \ (h : c.1 < 'H') :\n  let right := Cell.mk (nextChar c.1) c.2\n  chess_board_cell_color\
  \ c right = false := sorry\n\n/--\ninfo: True\n-/\n#guard_msgs in\n#eval chess_board_cell_color\
  \ \"A1\" \"C3\"\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval chess_board_cell_color\
  \ \"A1\" \"H3\"\n\n/--\ninfo: False\n-/\n#guard_msgs in\n#eval chess_board_cell_color\
  \ \"A1\" \"A2\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
