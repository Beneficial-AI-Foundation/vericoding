"vc-description": "We are interested in obtaining two scores from a given integer:\n\
  \n**First score**: The sum of all the integers obtained from the power set of the\
  \ digits of the given integer that have the same order \n\nE.g:\n```\ninteger =\
  \ 1234 ---> (1 + 2 + 3 + 4) + (12 + 13 + 14 + 23 + 24 + 34) + \n(123 + 124 + 134\
  \ + 234) + 1234 = 10 + 120 + 615 + 1234 = 1979\n```\n**Second score**: The sum of\
  \ all the integers obtained from the all the contiguous substrings of the given\
  \ integer as a string.\n\nE.g.\n```\ninteger = 1234 ---> (1 + 2 + 3 + 4) + (12 +\
  \ 23 + 34) + (123 + 234) + 1234 = 10 + 69 + 357 + 1234 = 1670\n```\nThe first integer,\
  \ higher than ```100```, that has both scores with ```3``` common divisors is ```204```.\
  \ Its first score is ```258``` and the second one ```234```. The common divisors\
  \ for both scores are ```2, 3, 6```.\n\nIn fact the integers ```294``` and ```468```\
  \ are the ones in the range ```[100, 500]```, that have both scores with ```7```\
  \ common divisors, the maximum amount of common factors in that range.\n\nYour task\
  \ in this kata is to create a function that may find the integer or integers that\
  \ have the maximum amount of common divisors for the scores described above.\n\n\
  The example given above will be:\n```python\nfind_int_inrange(100, 500) == [7, 294,\
  \ 468]\n```\nAs you can see, the function should receive the limits of a range [a,\
  \ b], and outputs an array with the maximum amount of factors, ```max_am_div```\
  \ and the found numbers sorted\n```\nfind_int_inrange(a, b) ----> [max_am_div, k1,\
  \ k2, ...., kn] # k1 < k2 < ...< kn\n```\nThe function may output only one number.\n\
  ```python\nfind_int_inrange(100, 300) == [7, 294]\n```\nEnjoy it!\n\nFeatures of\
  \ the random tests:\n```\n100 < a < b < 55000 \n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_int_inrange (a b : Int) : List Int :=\n  sorry\n"
"vc-theorems": "theorem range_order_invariant (a b : Int) \n  (h1 : 1 ≤ a) (h2 : a\
  \ ≤ 1000) (h3 : 1 ≤ b) (h4 : b ≤ 1000) (h5 : a ≤ b) :\n  let result := find_int_inrange\
  \ a b\n  ∀ x ∈ result, x ∈ result → (∃ n : Int, x = n) ∧\n  (result.length > 1 →\
  \ result[1]! ≥ a ∧ result[1]! ≤ b) :=\nsorry\n\n\ntheorem single_point_range (n\
  \ : Int) \n  (h1 : 1 ≤ n) (h2 : n ≤ 1000) :\n  let result := find_int_inrange n\
  \ n\n  result.length ≥ 1 ∧ ∀ x ∈ result, ∃ m : Int, x = m :=\nsorry\n\n\ntheorem\
  \ window_properties (start width : Int)\n  (h1 : 100 ≤ start) (h2 : start ≤ 900)\n\
  \  (h3 : 1 ≤ width) (h4 : width ≤ 100) :\n  let result := find_int_inrange start\
  \ (start + width)\n  result.length ≥ 1 ∧\n  (result.length > 1 →\n    ∀ x ∈ result.tail,\
  \ start ≤ x ∧ x ≤ start + width) :=\nsorry\n\n/--\ninfo: [7, 294]\n-/\n#guard_msgs\
  \ in\n#eval find_int_inrange 100 300\n\n/--\ninfo: [7, 294, 468]\n-/\n#guard_msgs\
  \ in\n#eval find_int_inrange 100 500\n\n/--\ninfo: [7, 468, 834]\n-/\n#guard_msgs\
  \ in\n#eval find_int_inrange 300 900\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
