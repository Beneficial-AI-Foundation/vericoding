"vc-description": "Write a class called User that is used to calculate the amount\
  \ that a user will progress through a ranking system similar to the one Codewars\
  \ uses.  \n\n##### Business Rules:\n\n* A user starts at rank -8 and can progress\
  \ all the way to 8.\n* There is no 0 (zero) rank. The next rank after -1 is 1.\n\
  * Users will complete activities. These activities also have ranks.\n* Each time\
  \ the user completes a ranked activity the users rank progress is updated based\
  \ off of the activity's rank\n* The progress earned from the completed activity\
  \ is relative to what the user's current rank is compared to the rank of the activity\n\
  * A user's rank progress starts off at zero, each time the progress reaches 100\
  \ the user's rank is upgraded to the next level\n* Any remaining progress earned\
  \ while in the previous rank will be applied towards the next rank's progress (we\
  \ don't throw any progress away). The exception is if there is no other rank left\
  \ to progress towards (Once you reach rank 8 there is no more progression). \n*\
  \ A user cannot progress beyond rank 8. \n* The only acceptable range of rank values\
  \ is -8,-7,-6,-5,-4,-3,-2,-1,1,2,3,4,5,6,7,8. Any other value should raise an error.\
  \ \n\nThe progress is scored like so:\n\n* Completing an activity that is ranked\
  \ the same as that of the user's will be worth 3 points\n* Completing an activity\
  \ that is ranked one ranking lower than the user's will be worth 1 point\n* Any\
  \ activities completed that are ranking 2 levels or more lower than the user's ranking\
  \ will be ignored\n* Completing an activity ranked higher than the current user's\
  \ rank will accelerate the rank progression. The greater the difference between\
  \ rankings the more the progression will be increased. The formula is `10 * d *\
  \ d` where `d` equals the difference in ranking between the activity and the user.\
  \  \n\n##### Logic Examples:\n* If a user ranked -8 completes an activity ranked\
  \ -7 they will receive 10 progress\n* If a user ranked -8 completes an activity\
  \ ranked -6 they will receive 40 progress\n* If a user ranked -8 completes an activity\
  \ ranked -5 they will receive 90 progress\n* If a user ranked -8 completes an activity\
  \ ranked -4 they will receive 160 progress, resulting in the user being upgraded\
  \ to rank -7 and having earned 60 progress towards their next rank\n* If a user\
  \ ranked -1 completes an activity ranked 1 they will receive 10 progress (remember,\
  \ zero rank is ignored)\n\n##### Code Usage Examples:\n```python\nuser = User()\n\
  user.rank # => -8\nuser.progress # => 0\nuser.inc_progress(-7)\nuser.progress #\
  \ => 10\nuser.inc_progress(-5) # will add 90 progress\nuser.progress # => 0 # progress\
  \ is now zero\nuser.rank # => -7 # rank was upgraded to -7\n```\n\n~~~if:java\n\
  **Note:** In **Java** some methods may throw an `IllegalArgumentException`.\n~~~\n\
  ~~~if:csharp\n**Note:** In **C#** some methods may throw an `ArgumentException`.\n\
  ~~~\n\n**Note**: Codewars no longer uses this algorithm for its own ranking system.\
  \ It uses a pure Math based solution that gives consistent results no matter what\
  \ order a set of ranked activities are completed at."
"vc-preamble": "import Imports.AllImports\n\ndef User.incProgress (self : User) (rank\
  \ : Rank) : User :=\n  sorry\n\n\ndef isValidRank (r : Rank) : Bool :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def getRankProgress (self : User) (rank : Rank) : Nat :=\n  sorry\n\
  \  "
"vc-theorems": "theorem valid_rank_input (r : Rank) (u : User) :\n  let u' := u.incProgress\
  \ r\n  u'.progress ≥ 0 ∧ isValidRank u'.rank := by\n  sorry\n\n\ntheorem invalid_rank_progress\
  \ (n : Int) (u : User) :\n  n ≠ -8 ∧ n ≠ -7 ∧ n ≠ -6 ∧ n ≠ -5 ∧ n ≠ -4 ∧ n ≠ -3\
  \ ∧ n ≠ -2 ∧ n ≠ -1 ∧ \n  n ≠ 1 ∧ n ≠ 2 ∧ n ≠ 3 ∧ n ≠ 4 ∧ n ≠ 5 ∧ n ≠ 6 ∧ n ≠ 7\
  \ ∧ n ≠ 8 →\n  False := by\n  sorry\n\n\ntheorem same_rank_progress (r : Rank) (u\
  \ : User) : \n  u.rank = r →\n  let u' := u.incProgress r\n  (u'.progress - u.progress)\
  \ % 100 = 3 ∨ u.rank = Rank.Eight := by\n  sorry\n\n\ntheorem one_rank_below_progress\
  \ (r : Rank) (u : User) :\n  r ≠ Rank.Eight →\n  let nextRank := Rank.Eight -- simplified\
  \ for demonstration\n  u.rank = nextRank →\n  let u' := u.incProgress r\n  (u'.progress\
  \ - u.progress) % 100 = 1 ∨ u'.rank = Rank.Eight := by \n  sorry\n\n\ntheorem max_rank_progress\
  \ (r : Rank) (u : User) :\n  u.rank = Rank.Eight →\n  let u' := u.incProgress r\n\
  \  u'.progress = 0 ∧ u'.rank = Rank.Eight := by\n  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
