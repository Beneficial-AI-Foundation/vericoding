"vc-description": "There's a tree and every one of its nodes has a cost associated\
  \ with it. Some of these nodes are labelled special nodes. You are supposed to answer\
  \ a few queries on this tree. In each query, a source and destination node (SNODE$SNODE$\
  \ and DNODE$DNODE$) is given along with a value W$W$. For a walk between SNODE$SNODE$\
  \ and DNODE$DNODE$ to be valid you have to choose a special node and call it the\
  \ pivot P$P$. Now the path will be SNODE$SNODE$ ->P$ P$ -> DNODE$DNODE$. For any\
  \ valid path, there is a path value (PV$PV$) attached to it. It is defined as follows:\n\
  Select a subset of nodes(can be empty)  in the path from SNODE$SNODE$ to P$P$ (both\
  \ inclusive) such that sum of their costs (CTOT1$CTOT_{1}$) doesn't exceed W$W$.\n\
  Select a subset of nodes(can be empty) in the path from P$P$ to DNODE$DNODE$ (both\
  \ inclusive) such that sum of their costs (CTOT2$CTOT_{2}$) doesn't exceed W$W$.\n\
  Now define PV=CTOT1+CTOT2$PV = CTOT_{1} + CTOT_{2}$ such that the absolute difference\
  \  x=|CTOT1−CTOT2|$x = |CTOT_{1} - CTOT_{2}|$ is as low as possible. If there are\
  \ multiple pairs of subsets that give the same minimum absolute difference, the\
  \ pair of subsets which maximize PV$PV$ should be chosen.\nFor each query, output\
  \ the path value PV$PV$ minimizing x$x$ as defined above. \nNote that the sum of\
  \ costs of an empty subset is zero.\n\n-----Input-----\n- First line contains three\
  \ integers N$N$ - number of vertices in the tree, NSP$NSP$ - number of special nodes\
  \ in the tree and Q$Q$ - number of queries to answer.   \n- Second line contains\
  \ N−1$N-1$ integers. If the i$i$th integer is Vi$V_i$ then there is an undirected\
  \ edge between i+1$i + 1$ and Vi$V_i$ (i$i$ starts from 1$1$ and goes till N−1$N-1$).\
  \          \n- Third line contains N$N$ integers, the i$i$th integer represents\
  \ cost of the i$i$th vertex.    \n- Fourth line contains NSP$NSP$ integers - these\
  \ represent which nodes are the special nodes.    \n- Following Q$Q$ lines contains\
  \ three integers each - SNODE$SNODE$, DNODE$DNODE$ and W$W$ for each query.\n\n\
  -----Output-----\nFor each query output a single line containing a single integer\
  \ - the path value PV$PV$ between SNODE$SNODE$ and DNODE$DNODE$.\n\n-----Constraints:-----\n\
  - 1≤$1 \\leq $ Number of nodes ≤1000$ \\leq 1000 $ \n- 0≤W≤1000$ 0 \\leq W \\leq\
  \ 1000 $ \n- 1≤$ 1 \\leq $ Number of special nodes ≤10$ \\leq 10 $ \n- 0≤$ 0 \\\
  leq $ Cost of each node ≤1000$ \\leq 1000 $ \n- 1≤$ 1 \\leq $ Number of queries\
  \ ≤1000$ \\leq 1000 $\n\n-----Sample Input-----\n7 1 5\n\n1 1 2 2 3 3\n\n3 5 4 2\
  \ 7 9 1\n\n1\n\n2 3 100\n\n1 1 100\n\n2 1 100\n\n4 5 100\n\n4 7 100      \n\n-----Sample\
  \ Output:-----\n6\n\n6\n\n6\n\n20\n\n16       \n\n-----Explanation:-----\nConsider\
  \ query 4$4$. The only path is 4−>2−>1−>2−>5$4->2->1->2->5$. The two sets defined\
  \ for this path are {3,2,5${3,2,5}$} and {3,5,7${3,5,7}$}. Pick subsets {3,2,5${3,2,5}$}\
  \ and {3,7${3,7}$} from each set which minimizes PV$PV$. Note that node 2$2$ can\
  \ repeat as it is in different paths (both to and from the pivot)."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_tree_special_path (n nsp : Nat) (queries : List (Nat\
  \ × Nat × Nat))\n  (edges : List Nat) (costs : List Nat) (special_nodes : List Nat)\
  \ : List Nat :=\n  sorry\n"
"vc-theorems": "theorem tree_special_path_result_length (n nsp : Nat) (queries : List\
  \ (Nat × Nat × Nat))\n  (edges : List Nat) (costs : List Nat) (special_nodes : List\
  \ Nat)\n  (h1 : n ≥ 2) (h2 : n ≤ 10) (h3 : nsp = min n 3)\n  (h4 : edges.length\
  \ = n - 1) (h5 : costs.length = n) \n  (h6 : special_nodes.length = min n 3) :\n\
  \  (solve_tree_special_path n nsp queries edges costs special_nodes).length = queries.length\
  \ := by\n  sorry\n\n\ntheorem tree_special_path_result_properties (n nsp : Nat)\
  \ (queries : List (Nat × Nat × Nat))\n  (edges : List Nat) (costs : List Nat) (special_nodes\
  \ : List Nat)\n  (h1 : n ≥ 2) (h2 : n ≤ 10) (h3 : nsp = min n 3)\n  (h4 : edges.length\
  \ = n - 1) (h5 : costs.length = n)\n  (h6 : special_nodes.length = min n 3) :\n\
  \  let result := solve_tree_special_path n nsp queries edges costs special_nodes\n\
  \  ∀ x ∈ result, (x ≥ 0 ∧ x % 2 = 0) := by\n  sorry\n\n\ntheorem tree_special_path_cost_constraint\
  \ (n nsp : Nat) (queries : List (Nat × Nat × Nat))\n  (edges : List Nat) (costs\
  \ : List Nat) (special_nodes : List Nat)\n  (h1 : n ≥ 2) (h2 : n ≤ 10) (h3 : nsp\
  \ = min n 3)\n  (h4 : edges.length = n - 1) (h5 : costs.length = n)\n  (h6 : special_nodes.length\
  \ = min n 3) :\n  let result := solve_tree_special_path n nsp queries edges costs\
  \ special_nodes\n  ∀ (i : Nat) (hi : i < queries.length), \n    result[i]'(by rw\
  \ [tree_special_path_result_length n nsp queries edges costs special_nodes h1 h2\
  \ h3 h4 h5 h6]; exact hi) \n    ≤ 2 * (queries[i]'hi).2.2 := by\n  sorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
