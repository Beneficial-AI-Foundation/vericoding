"vc-description": "Given an undirected tree consisting of n vertices numbered from\
  \ 1 to n. A frog starts jumping from the vertex 1. In one second, the frog jumps\
  \ from its current vertex to another unvisited vertex if they are directly connected.\
  \ The frog can not jump back to a visited vertex. In case the frog can jump to several\
  \ vertices it jumps randomly to one of them with the same probability, otherwise,\
  \ when the frog can not jump to any unvisited vertex it jumps forever on the same\
  \ vertex. \nThe edges of the undirected tree are given in the array edges, where\
  \ edges[i] = [fromi, toi] means that exists an edge connecting directly the vertices\
  \ fromi and toi.\nReturn the probability that after t seconds the frog is on the\
  \ vertex target.\n \nExample 1:\n\nInput: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]],\
  \ t = 2, target = 4\nOutput: 0.16666666666666666 \nExplanation: The figure above\
  \ shows the given graph. The frog starts at vertex 1, jumping with 1/3 probability\
  \ to the vertex 2 after second 1 and then jumping with 1/2 probability to vertex\
  \ 4 after second 2. Thus the probability for the frog is on the vertex 4 after 2\
  \ seconds is 1/3 * 1/2 = 1/6 = 0.16666666666666666. \n\nExample 2:\n\nInput: n =\
  \ 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 1, target = 7\nOutput: 0.3333333333333333\n\
  Explanation: The figure above shows the given graph. The frog starts at vertex 1,\
  \ jumping with 1/3 = 0.3333333333333333 probability to the vertex 7 after second\
  \ 1. \n\nExample 3:\nInput: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]],\
  \ t = 20, target = 6\nOutput: 0.16666666666666666\n\n \nConstraints:\n\n1 <= n <=\
  \ 100\nedges.length == n-1\nedges[i].length == 2\n1 <= edges[i][0], edges[i][1]\
  \ <= n\n1 <= t <= 50\n1 <= target <= n\nAnswers within 10^-5 of the actual value\
  \ will be accepted as correct."
"vc-preamble": "import Imports.AllImports\n\ndef isValidTree (n : Nat) (edges : List\
  \ (List Nat)) : Bool :=\nsorry\n\n/-- Function that computes probability of frog\
  \ being at target vertex after t steps -/"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def frogPosition (n : Nat) (edges : List (List Nat)) (t : Nat)\
  \ (target : Nat) : Float :=\nsorry\n"
"vc-theorems": "theorem frog_position_probability (n : Nat) (edges : List (List Nat))\
  \ \n    (t : Nat) (target : Nat) \n    (h : isValidTree n edges = true) :\n  let\
  \ prob := frogPosition n edges t target\n  0 ≤ prob ∧ prob ≤ 1 ∧ 1 ≤ target ∧ target\
  \ ≤ n :=\nsorry\n\n\ntheorem frog_position_deterministic (n : Nat) (edges : List\
  \ (List Nat))\n    (t : Nat) (target : Nat) \n    (h : isValidTree n edges = true)\
  \ :\n  let prob1 := frogPosition n edges t target\n  let prob2 := frogPosition n\
  \ edges t target\n  prob1 = prob2 := \nsorry\n\n\ntheorem frog_position_impossible_start\
  \ (n : Nat) (edges : List (List Nat))\n    (target : Nat)\n    (h1 : isValidTree\
  \ n edges = true)\n    (h2 : target ≠ 1) :\n  frogPosition n edges 0 target = 0\
  \ :=\nsorry"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
