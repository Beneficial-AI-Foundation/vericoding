"vc-description": "The chef has one array of N natural numbers (might be in sorted\
  \ order). Cheffina challenges chef to find the total number of inversions in the\
  \ array.\n\n-----Input:-----\n- First-line will contain $T$, the number of test\
  \ cases. Then the test cases follow. \n- Each test case contains two lines of input,\
  \ $N$.\n- N space-separated natural numbers. \n\n-----Output:-----\nFor each test\
  \ case, output in a single line answer as the total number of inversions.\n\n-----Constraints-----\n\
  - $1 \\leq T \\leq 10$\n- $1 \\leq N \\leq 10^5$\n- $1 \\leq arr[i] \\leq 10^5$\n\
  \n-----Sample Input:-----\n1\n5\n5 4 1 3 2\n\n-----Sample Output:-----\n8"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def countInversions (arr : List Int) : Nat := sorry\n\ntheorem\
  \ empty_or_single_zero {arr : List Int} :\n  arr.length ≤ 1 → countInversions arr\
  \ = 0 := sorry\n"
"vc-theorems": "theorem sorted_zero {arr : List Int} (h : Sorted Int arr (. ≤ .))\
  \ :\n  countInversions arr = 0 := sorry\n\n\ntheorem count_nonnegative {arr : List\
  \ Int} :\n  countInversions arr ≥ 0 := sorry\n\n\ntheorem count_bounded {arr : List\
  \ Int} :\n  countInversions arr ≤ (arr.length * (arr.length - 1)) / 2 := sorry\n\
  \n\ntheorem increasing_zero {arr : List Int} (h : Sorted Int arr (. < .)) :\n  countInversions\
  \ arr = 0 := sorry\n\n\ntheorem decreasing_triangular {arr : List Int} (h : Sorted\
  \ Int arr (fun x y => y < x)) :\n  let n := arr.length - 1\n  countInversions arr\
  \ = (n * (n + 1)) / 2 := sorry\n\n/--\ninfo: 8\n-/\n#guard_msgs in\n#eval count_inversions\
  \ [5, 4, 1, 3, 2]\n\n/--\ninfo: 0\n-/\n#guard_msgs in\n#eval count_inversions [1,\
  \ 2, 3, 4, 5]\n\n/--\ninfo: 10\n-/\n#guard_msgs in\n#eval count_inversions [5, 4,\
  \ 3, 2, 1]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
