"vc-description": "# Your Task\nYou have a Petri dish with bacteria, and you are preparing\
  \ to dive into the harsh micro-world. But, unfortunately, you don't have any microscope\
  \ nearby, so you can't watch them.\n\nYou know that you have `n` bacteria in the\
  \ Petri dish and size of the i-th bacteria is bacteriai. Also you know intergalactic\
  \ positive integer constant `K`.\n\nThe i-th bacteria can swallow the j-th bacteria\
  \ if and only if bacteriai > bacteriaj and bacteriai ≤ bacteriaj + K. The j-th bacteria\
  \ disappear, but the i-th bacteria doesn't change its size.\n\nSince you don't have\
  \ a microscope, you can only guess the minimal possible number of bacteria that\
  \ will remain in your Petri dish when you finally find a microscope.\n\n```python\n\
  micro_world([101, 53, 42, 102, 101, 55, 54], 1) == 3\nmicro_world([20, 15, 10, 15,\
  \ 20, 25], 5) == 1\n```\n\n___\n\n# Explanation\n```python\nbacteria = [101, 53,\
  \ 42, 102, 101, 55, 54]\nK = 1\n```\n\n```if:cpp\nThe one of possible sequences\
  \ of swallows is: {101,53,42,102,101,55,54} → {101,53,42,102,55,54} → {101,42,102,55,54}\
  \ → {42,102,55,54} → {42,102,55}. In total there are 3 bacteria remaining.\n```\n\
  ```if:python,ruby,javascript\nThe one of possible sequences of swallows is: [101,53,42,102,101,55,54]\
  \ → [101,53,42,102,55,54] → [101,42,102,55,54] → [42,102,55,54] → [42,102,55]. In\
  \ total there are 3 bacteria remaining.\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def micro_world (bacteria : List Nat) (k : Nat) : Nat :=\n  sorry\n"
"vc-theorems": "theorem micro_world_bounds {bacteria : List Nat} (k : Nat) \n  (h\
  \ : bacteria ≠ []) : \n  0 ≤ micro_world bacteria k ∧ micro_world bacteria k ≤ bacteria.length\
  \ :=\n  sorry\n\n\ntheorem micro_world_zero_k {bacteria : List Nat} :\n  micro_world\
  \ bacteria 0 = bacteria.length :=\n  sorry\n\n\n\n\ntheorem micro_world_monotone\
  \ {bacteria : List Nat} {k : Nat} \n  (h : k > 0) :\n  micro_world bacteria k ≤\
  \ micro_world bacteria (k-1) :=\n  sorry\n\n\ntheorem micro_world_same_size {bacteria\
  \ : List Nat} {n k : Nat}\n  (h : bacteria = List.replicate bacteria.length n) :\n\
  \  micro_world bacteria k = bacteria.length :=\n  sorry\n\n\ntheorem micro_world_edge_cases_empty\
  \ (k : Nat) :\n  micro_world [] k = 0 :=\n  sorry\n\n\ntheorem micro_world_edge_cases_singleton\
  \ (n k : Nat) :\n  micro_world [n] k = 1 :=\n  sorry\n\n/--\ninfo: 3\n-/\n#guard_msgs\
  \ in\n#eval micro_world [101, 53, 42, 102, 101, 55, 54] 1\n\n/--\ninfo: 1\n-/\n\
  #guard_msgs in\n#eval micro_world [20, 15, 10, 15, 20, 25] 5\n\n/--\ninfo: 4\n-/\n\
  #guard_msgs in\n#eval micro_world [5, 3, 1, 5] 1\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
