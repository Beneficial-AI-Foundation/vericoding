"vc-description": "Given an unsorted array of integers, find the number of longest\
  \ increasing subsequence.\n\n\nExample 1:\n\nInput: [1,3,5,4,7]\nOutput: 2\nExplanation:\
  \ The two longest increasing subsequence are [1, 3, 4, 7] and [1, 3, 5, 7].\n\n\n\
  \nExample 2:\n\nInput: [2,2,2,2,2]\nOutput: 5\nExplanation: The length of longest\
  \ continuous increasing subsequence is 1, and there are 5 subsequences' length is\
  \ 1, so output 5.\n\n\n\nNote:\nLength of the given array will be not exceed 2000\
  \ and the answer is guaranteed to be fit in 32-bit signed int."
"vc-preamble": "import Imports.AllImports\n\ndef find_number_of_lis (nums : List Int)\
  \ : Nat :=\n  sorry\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def isSorted (l : List Int) : Prop :=\n  ∀ i j, i < j → j < l.length\
  \ → l[i]! < l[j]!\n"
"vc-theorems": "theorem number_of_lis_properties (nums : List Int) : \n  let result\
  \ := find_number_of_lis nums\n  result ≥ 0 ∧ \n  (nums = [] → result = 0)\n:= by\
  \ sorry\n\n\ntheorem constant_list_property {n : Nat} (x : Int) :\n  find_number_of_lis\
  \ (List.replicate n x) = n\n:= by sorry\n\n\ntheorem strictly_increasing_property\
  \ (nums : List Int) (h : nums ≠ []) :\n  isSorted nums →\n  find_number_of_lis nums\
  \ = 1\n:= by sorry\n\n/--\ninfo: 2\n-/\n#guard_msgs in\n#eval find_number_of_lis\
  \ [1, 3, 5, 4, 7]\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval find_number_of_lis\
  \ [2, 2, 2, 2, 2]\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval find_number_of_lis\
  \ [1, 2, 4, 3, 5, 4, 7, 2]\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded"
