vc-description: |-
  Given an unsorted array of integers, find the number of longest increasing subsequence.


  Example 1:

  Input: [1,3,5,4,7]
  Output: 2
  Explanation: The two longest increasing subsequence are [1, 3, 4, 7] and [1, 3, 5, 7].



  Example 2:

  Input: [2,2,2,2,2]
  Output: 5
  Explanation: The length of longest continuous increasing subsequence is 1, and there are 5 subsequences' length is 1, so output 5.



  Note:
  Length of the given array will be not exceed 2000 and the answer is guaranteed to be fit in 32-bit signed int.
vc-preamble: |
  import Imports.AllImports

  def find_number_of_lis (nums : List Int) : Nat :=
    sorry
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def isSorted (l : List Int) : Prop :=
    ∀ i j, i < j → j < l.length → l[i]! < l[j]!
vc-theorems: |
  theorem number_of_lis_properties (nums : List Int) : 
    let result := find_number_of_lis nums
    result ≥ 0 ∧ 
    (nums = [] → result = 0)
  := by sorry


  theorem constant_list_property {n : Nat} (x : Int) :
    find_number_of_lis (List.replicate n x) = n
  := by sorry


  theorem strictly_increasing_property (nums : List Int) (h : nums ≠ []) :
    isSorted nums →
    find_number_of_lis nums = 1
  := by sorry

  /--
  info: 2
  -/
  #guard_msgs in
  #eval find_number_of_lis [1, 3, 5, 4, 7]

  /--
  info: 5
  -/
  #guard_msgs in
  #eval find_number_of_lis [2, 2, 2, 2, 2]

  /--
  info: 3
  -/
  #guard_msgs in
  #eval find_number_of_lis [1, 2, 4, 3, 5, 4, 7, 2]
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: guarded
