"vc-description": "We define the score of permutations of combinations, of an integer\
  \ number (the function to obtain this value:```sc_perm_comb```) as the total sum\
  \ of all the numbers obtained from the permutations of all the possible combinations\
  \ of its digits.\nFor example we have the number 348.\n```python\nsc_perm_comb(348)\
  \ = 3 + 4 + 8 + 34 + 38 + 48 + 43 + 83 + 84 + 348 + 384 + 834 + 843 + 438 + 483\
  \  = 3675\n```\nIf the number has a digit 0, the numbers formed by a leading 0 should\
  \ be discarded:\n```python\nsc_perm_comb(340) = 3 + 4 + 34 + 30 + 40 + 43 + 340\
  \ + 304 + 430 + 403 = 1631\n```\nIf the number has digits that occur more than once,\
  \ the score the adden will not be taken than twice or more:\n```python\nsc_perm_comb(333)\
  \ = 3 + 33 + 333 = 369\n```\nIf the number has only one digit its score is the same\
  \ number:\n```python\nsc_perm_comb(6) = 6\nsc_perm_comb(0) = 0\n```\n\nEnjoy it!!"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sc_perm_comb (n : Nat) : Nat := sorry\n\ntheorem sc_perm_comb_non_negative\
  \ (n : Nat) :\n  sc_perm_comb n ≥ 0 := sorry\n"
"vc-theorems": "theorem sc_perm_comb_geq_input (n : Nat) :\n  sc_perm_comb n ≥ n :=\
  \ sorry \n\n\ntheorem sc_perm_comb_single_digit (n : Nat) (h : n ≤ 9) :\n  sc_perm_comb\
  \ n = n := sorry\n\n\ntheorem sc_perm_comb_zero :\n  sc_perm_comb 0 = 0 := sorry\n\
  \n\ntheorem sc_perm_comb_two_digits (n : Nat) (h1 : n ≥ 10) (h2 : n ≤ 99) \n   \
  \ (h3 : n % 10 ≠ n / 10) :\n  sc_perm_comb n ≥ n + (n % 10 * 10 + n / 10) := sorry\n\
  \n/--\ninfo: 3675\n-/\n#guard_msgs in\n#eval sc_perm_comb 348\n\n/--\ninfo: 1631\n\
  -/\n#guard_msgs in\n#eval sc_perm_comb 340\n\n/--\ninfo: 369\n-/\n#guard_msgs in\n\
  #eval sc_perm_comb 333\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
