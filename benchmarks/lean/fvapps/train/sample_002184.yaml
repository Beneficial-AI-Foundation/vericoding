"vc-description": "You are given a sequence of $n$ digits $d_1d_2 \\dots d_{n}$. You\
  \ need to paint all the digits in two colors so that:  each digit is painted either\
  \ in the color $1$ or in the color $2$;  if you write in a row from left to right\
  \ all the digits painted in the color $1$, and then after them all the digits painted\
  \ in the color $2$, then the resulting sequence of $n$ digits will be non-decreasing\
  \ (that is, each next digit will be greater than or equal to the previous digit).\
  \ \n\nFor example, for the sequence $d=914$ the only valid coloring is $211$ (paint\
  \ in the color $1$ two last digits, paint in the color $2$ the first digit). But\
  \ $122$ is not a valid coloring ($9$ concatenated with $14$ is not a non-decreasing\
  \ sequence).\n\nIt is allowed that either of the two colors is not used at all.\
  \ Digits painted in the same color are not required to have consecutive positions.\n\
  \nFind any of the valid ways to paint the given sequence of digits or determine\
  \ that it is impossible to do.\n\n\n-----Input-----\n\nThe first line contains a\
  \ single integer $t$ ($1 \\le t \\le 10000$) — the number of test cases in the input.\n\
  \nThe first line of each test case contains an integer $n$ ($1 \\le n \\le 2\\cdot10^5$)\
  \ — the length of a given sequence of digits.\n\nThe next line contains a sequence\
  \ of $n$ digits $d_1d_2 \\dots d_{n}$ ($0 \\le d_i \\le 9$). The digits are written\
  \ in a row without spaces or any other separators. The sequence can start with 0.\n\
  \nIt is guaranteed that the sum of the values ​​of $n$ for all test cases in the\
  \ input does not exceed $2\\cdot10^5$.\n\n\n-----Output-----\n\nPrint $t$ lines\
  \ — the answers to each of the test cases in the input.\n\nIf there is a solution\
  \ for a test case, the corresponding output line should contain any of the valid\
  \ colorings written as a string of $n$ digits $t_1t_2 \\dots t_n$ ($1 \\le t_i \\\
  le 2$), where $t_i$ is the color the $i$-th digit is painted in. If there are several\
  \ feasible solutions, print any of them.\n\nIf there is no solution, then the corresponding\
  \ output line should contain a single character '-' (the minus sign).\n\n\n-----Example-----\n\
  Input\n5\n12\n040425524644\n1\n0\n9\n123456789\n2\n98\n3\n987\n\nOutput\n121212211211\n\
  1\n222222222\n21\n-\n\n\n\n-----Note-----\n\nIn the first test case, $d=040425524644$.\
  \ The output $t=121212211211$ is correct because $0022444$ (painted in $1$) concatenated\
  \ with $44556$ (painted in $2$) is $002244444556$ which is a sorted sequence of\
  \ $n$ given digits."
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def solve_digit_coloring (n : Nat) (digits : String) : String :=\
  \ sorry\n\ntheorem output_format (n : Nat) (digits : String) :\n  let result :=\
  \ solve_digit_coloring n digits\n  result = \"-\" ∨\n  (result.length = n ∧ \n \
  \  result.data.all (fun c => c = '1' ∨ c = '2')) := sorry\n"
"vc-theorems": "theorem output_constraints (n : Nat) (digits : String) :\n  let result\
  \ := solve_digit_coloring n digits\n  result ≠ \"-\" →\n  let nums := digits.data.map\
  \ (fun c => c.toNat - '0'.toNat)\n  let colors := result.data.map (fun c => c.toNat\
  \ - '0'.toNat)\n  ∀ i j, i < j → j < nums.length →\n  colors[i]! = colors[j]! →\
  \ nums[i]! ≤ nums[j]! := sorry\n\n/--\ninfo: '121212211211'\n-/\n#guard_msgs in\n\
  #eval solve_digit_coloring 12 \"040425524644\"\n\n/--\ninfo: '1'\n-/\n#guard_msgs\
  \ in\n#eval solve_digit_coloring 1 \"0\"\n\n/--\ninfo: '-'\n-/\n#guard_msgs in\n\
  #eval solve_digit_coloring 3 \"987\"\n"
"vc-postamble": "-- Apps difficulty: competition\n-- Assurance level: unguarded"
