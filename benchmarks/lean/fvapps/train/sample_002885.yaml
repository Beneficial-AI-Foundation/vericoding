"vc-description": "# Task\n\nYour task is to write a function for calculating the\
  \ score of a 10 pin bowling game. The input for the function is a list of pins knocked\
  \ down per roll for one player. Output is the player's total score.\n\n# Rules\n\
  \n## General rules\nRules of bowling in a nutshell:\n\n* A game consists of 10 frames.\
  \ In each frame the player rolls 1 or 2 balls, except for the 10th frame, where\
  \ the player rolls 2 or 3 balls.\n\n* The total score is the sum of your scores\
  \ for the 10 frames\n\n* If you knock down fewer than 10 pins with 2 balls, your\
  \ frame score is the number of pins knocked down\n\n* If you knock down all 10 pins\
  \ with 2 balls (spare), you score the amount of pins knocked down plus a bonus -\
  \ amount of pins knocked down with the next ball\n\n* If you knock down all 10 pins\
  \ with 1 ball (strike), you score the amount of pins knocked down plus a bonus -\
  \ amount of pins knocked down with the next 2 balls\n\n## Rules for 10th frame\n\
  As the 10th frame is the last one, in case of spare or strike there will be no next\
  \ balls for the bonus. To account for that:\n\n* if the last frame is a spare, player\
  \ rolls 1 bonus ball.\n* if the last frame is a strike, player rolls 2 bonus balls.\n\
  \nThese bonus balls on 10th frame are only counted as a bonus to the respective\
  \ spare or strike.\n\n# More information\nhttp://en.wikipedia.org/wiki/Ten-pin_bowling#Scoring\n\
  \n# Input\nYou may assume that the input is always valid. This means:\n\n* input\
  \ list length is correct\n* number of pins knocked out per roll is valid"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def bowling_score (rolls : List Nat) : Nat := sorry\n\ntheorem\
  \ score_bounds (rolls : List Nat) (validRolls : True) :\n  let score := bowling_score\
  \ rolls\n  0 ≤ score ∧ score ≤ 300 := sorry\n"
"vc-theorems": "theorem frame_scores (rolls : List Nat) (validRolls : True) :\n  ∀\
  \ (i : Nat) (h : i < rolls.length), \n    (rolls.get ⟨i, h⟩ = 10 → rolls.get ⟨i,\
  \ h⟩ ≤ 10) ∧ \n    (rolls.get ⟨i, h⟩ ≠ 10 → \n     ∀ (h' : i + 1 < rolls.length),\
  \ \n     rolls.get ⟨i, h⟩ + rolls.get ⟨i + 1, h'⟩ ≤ 10) := sorry\n\n\ntheorem all_zeros\
  \ (rolls : List Nat) :\n  rolls.length = 20 → \n  (∀ x ∈ rolls, x = 0) →\n  bowling_score\
  \ rolls = 0 := sorry\n\n\ntheorem perfect_game (rolls : List Nat) :\n  rolls.length\
  \ = 12 →\n  (∀ x ∈ rolls, x = 10) →\n  bowling_score rolls = 300 := sorry\n\n/--\n\
  info: 0\n-/\n#guard_msgs in\n#eval bowling_score [0] * 20\n\n/--\ninfo: 20\n-/\n\
  #guard_msgs in\n#eval bowling_score [1] * 20\n\n/--\ninfo: 300\n-/\n#guard_msgs\
  \ in\n#eval bowling_score [10] * 12\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
