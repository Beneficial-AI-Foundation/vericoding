vc-description: |-
  Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.

  Example:


  Input: 13
  Output: 6 
  Explanation: Digit 1 occurred in the following numbers: 1, 10, 11, 12, 13.
vc-preamble: |-
  import Imports.AllImports
vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>
vc-definitions: |
  def count_digit_one (n : Nat) : Nat := sorry

  def count_ones_brute_force (n : Nat) : Nat := sorry
vc-theorems: |
  theorem count_digit_one_matches_brute_force (n : Nat) : 
    count_digit_one n = count_ones_brute_force n := sorry


  theorem count_digit_one_boundary_values (n : Nat) (h : n = 0 ∨ n = 1 ∨ n = 9 ∨ n = 10 ∨ n = 11 ∨ n = 99 ∨ n = 100) :
    count_digit_one n = count_ones_brute_force n := sorry


  theorem count_digit_one_monotonic (n : Nat) :
    count_digit_one n ≤ count_digit_one (n + 1) := sorry


  theorem count_digit_one_nonnegative (n : Nat) :
    count_digit_one n ≥ 0 := sorry


  theorem count_digit_one_zero :
    count_digit_one 0 = 0 := sorry

  /--
  info: expected
  -/
  #guard_msgs in
  #eval count_digit_one 13

  /--
  info: expected
  -/
  #guard_msgs in
  #eval count_digit_one 20

  /--
  info: expected
  -/
  #guard_msgs in
  #eval count_digit_one 100
vc-postamble: |-
  -- Apps difficulty: interview
  -- Assurance level: unguarded
