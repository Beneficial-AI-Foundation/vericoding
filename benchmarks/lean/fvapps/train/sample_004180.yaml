"vc-description": "# Background:\n\nYou're working in a number zoo, and it seems that\
  \ one of the numbers has gone missing!\n\nZoo workers have no idea what number is\
  \ missing, and are too incompetent to figure it out, so they're hiring you to do\
  \ it for them.\n\nIn case the zoo loses another number, they want your program to\
  \ work regardless of how many numbers there are in total.\n\n___\n\n## Task:\n\n\
  Write a function that takes a shuffled list of unique numbers from `1` to `n` with\
  \ one element missing (which can be any number including `n`). Return this missing\
  \ number.\n\n**Note**: huge lists will be tested.\n\n## Examples:\n\n```\n[1, 3,\
  \ 4]  =>  2\n[1, 2, 3]  =>  4\n[4, 2, 3]  =>  1\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def find_missing_number (nums : List Nat) : Nat := sorry\n\ntheorem\
  \ find_missing_number_sequence (n : Nat) (h : 0 < n) (h2 : n ≤ 1000) : \n  let nums\
  \ := (List.range n).map (· + 1)\n  let nums_without_last := nums.dropLast\n  find_missing_number\
  \ nums_without_last = n := sorry"
"vc-theorems": "/--\ninfo: 2\n-/\n#guard_msgs in\n#eval find_missing_number [1, 3,\
  \ 4]\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n#eval find_missing_number [1, 2, 3]\n\n\
  /--\ninfo: 1\n-/\n#guard_msgs in\n#eval find_missing_number [2, 3, 4]\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded"
