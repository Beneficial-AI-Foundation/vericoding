"vc-description": "Given an array of integers nums and an integer threshold, we will\
  \ choose a positive integer divisor and divide all the array by it and sum the result\
  \ of the division. Find the smallest divisor such that the result mentioned above\
  \ is less than or equal to threshold.\nEach result of division is rounded to the\
  \ nearest integer greater than or equal to that element. (For example: 7/3 = 3 and\
  \ 10/2 = 5).\nIt is guaranteed that there will be an answer.\n \nExample 1:\nInput:\
  \ nums = [1,2,5,9], threshold = 6\nOutput: 5\nExplanation: We can get a sum to 17\
  \ (1+2+5+9) if the divisor is 1. \nIf the divisor is 4 we can get a sum to 7 (1+1+2+3)\
  \ and if the divisor is 5 the sum will be 5 (1+1+1+2). \n\nExample 2:\nInput: nums\
  \ = [2,3,5,7,11], threshold = 11\nOutput: 3\n\nExample 3:\nInput: nums = [19], threshold\
  \ = 5\nOutput: 4\n\n \nConstraints:\n\n1 <= nums.length <= 5 * 10^4\n1 <= nums[i]\
  \ <= 10^6\nnums.length <= threshold <= 10^6"
"vc-preamble": "import Imports.AllImports\n\ndef find_smallest_divisor (nums : List\
  \ Nat) (threshold : Nat) : Nat :=\n  sorry\n\n\ndef ceil_div (a b : Nat) : Nat :=\n\
  \  (a + b - 1) / b\n"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def list_max (l : List Nat) : Nat :=\n  match l with\n  | [] =>\
  \ 0\n  | (x::xs) => List.foldl max x xs\n"
"vc-theorems": "theorem single_element_case {nums : List Nat} {threshold : Nat} \n\
  \  (h1 : nums.length = 1) \n  (h2 : threshold > 0)\n  (h3 : ∀ x ∈ nums, 1 ≤ x ∧\
  \ x ≤ 1000000)\n  (h4 : threshold ≤ 1000000) :\n  find_smallest_divisor nums threshold\
  \ = ceil_div nums[0] threshold :=\nsorry\n\n\ntheorem result_bounded {nums : List\
  \ Nat} {threshold : Nat}\n  (h1 : nums.length > 0)\n  (h2 : nums.length ≤ 10)\n\
  \  (h3 : ∀ x ∈ nums, 1 ≤ x ∧ x ≤ 100)\n  (h4 : 1 ≤ threshold ∧ threshold ≤ 100)\
  \ :\n  1 ≤ find_smallest_divisor nums threshold ∧ \n  find_smallest_divisor nums\
  \ threshold ≤ list_max nums :=\nsorry\n\n/--\ninfo: 5\n-/\n#guard_msgs in\n#eval\
  \ find_smallest_divisor [1, 2, 5, 9] 6\n\n/--\ninfo: 3\n-/\n#guard_msgs in\n#eval\
  \ find_smallest_divisor [2, 3, 5, 7, 11] 11\n\n/--\ninfo: 4\n-/\n#guard_msgs in\n\
  #eval find_smallest_divisor [19] 5\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: unguarded"
