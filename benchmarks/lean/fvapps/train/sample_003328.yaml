"vc-description": "## Enough is enough!\n\nAlice and Bob were on a holiday. Both of\
  \ them took many pictures of the places they've been, and now they want to show\
  \ Charlie their entire collection. However, Charlie doesn't like these sessions,\
  \ since the motive usually repeats. He isn't fond of seeing the Eiffel tower 40\
  \ times. He tells them that he will only sit during the session if they show the\
  \ same motive at most N times. Luckily, Alice and Bob are able to encode the motive\
  \ as a number. Can you help them to remove numbers such that their list contains\
  \ each number only up to N times, without changing the order?\n\n## Task\n\nGiven\
  \ a list lst and a number N, create a new list that contains each number of lst\
  \ at most N times without reordering. For example if N = 2, and the input is [1,2,3,1,2,1,2,3],\
  \ you take [1,2,3,1,2], drop the next [1,2] since this would lead to 1 and 2 being\
  \ in the result 3 times, and then take 3, which leads to [1,2,3,1,2,3].\n\n~~~if:nasm\n\
  ## NASM notes\n\nWrite the output numbers into the `out` parameter, and return its\
  \ length.\n\nThe input array will contain only integers between 1 and 50 inclusive.\
  \ Use it to your advantage.\n~~~\n\n~~~if:c\nFor C:\n* Assign the return array length\
  \ to the pointer parameter `*szout`.\n* Do not mutate the input array.\n~~~\n\n\
  ## Example\n```python\n  delete_nth ([1,1,1,1],2) # return [1,1]\n  \n  delete_nth\
  \ ([20,37,20,21],1) # return [20,37,21]\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def delete_nth (lst: List Int) (max_e: Nat) : List Int := sorry\n\
  \ntheorem delete_nth_length {lst: List Int} {max_e: Nat} :\n  List.length (delete_nth\
  \ lst max_e) ≤ List.length lst := sorry\n"
"vc-theorems": "theorem delete_nth_max_occurrences {lst: List Int} {max_e: Nat} {x:\
  \ Int} :\n  x ∈ delete_nth lst max_e → List.count x (delete_nth lst max_e) ≤ max_e\
  \ := sorry\n\n\ntheorem delete_nth_elements_from_original {lst: List Int} {max_e:\
  \ Nat} {x: Int} :\n  x ∈ delete_nth lst max_e → x ∈ lst := sorry \n\n\n\n\ntheorem\
  \ delete_nth_zero {lst: List Int} :\n  delete_nth lst 0 = [] := sorry\n\n\ntheorem\
  \ delete_nth_empty {lst: List Int} {max_e: Nat} :\n  lst = [] → delete_nth lst max_e\
  \ = [] := sorry\n\n\ntheorem delete_nth_preserves_first {lst: List Int} {max_e:\
  \ Nat} :\n  max_e > 0 → ∀ x, x ∈ lst → x ∈ delete_nth lst max_e := sorry\n\n/--\n\
  info: [20, 37, 21]\n-/\n#guard_msgs in\n#eval delete_nth [20, 37, 20, 21] 1\n\n\
  /--\ninfo: [1, 1, 3, 3, 7, 2, 2, 2]\n-/\n#guard_msgs in\n#eval delete_nth [1, 1,\
  \ 3, 3, 7, 2, 2, 2, 2] 3\n\n/--\ninfo: []\n-/\n#guard_msgs in\n#eval delete_nth\
  \ [] 5\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: guarded_and_plausible"
