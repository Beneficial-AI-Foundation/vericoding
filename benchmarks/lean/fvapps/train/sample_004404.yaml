"vc-description": "# Task\n\nChristmas is coming. In the [previous kata](https://www.codewars.com/kata/5a405ba4e1ce0e1d7800012e),\
  \ we build a custom Christmas tree with the specified characters and the specified\
  \ height.\n\nNow, we are interested in the center of the Christmas tree. \n\nPlease\
  \ imagine that we build a Christmas tree with `chars = \"abc\" and n = Infinity`,\
  \ we got:\n```\n          a\n         b c\n        a b c\n       a b c a\n     \
  \ b c a b c\n     a b c a b c\n    a b c a b c a\n   b c a b c a b c\n  a b c a\
  \ b c a b a\n b c a b c a b a b c\na b c a b a b c a b c\n. . . . . . . . . . .\n\
  . . . . . . . . . . .\n. . . . . . . . . . .\n. . . . . . . . . . .\n          |\n\
  \          |\n          .\n          .\n```\nIf we keep only the center part of\
  \ leaves, we will got:\n```\n          a\n            \n          b  \n        \
  \      \n          a    \n                \n          a        \n              \
  \      \n          b        \n                    \n          a          \n    \
  \      .\n          \n          .\n          \n          .\n```\nAs you can see,\
  \ it's a infinite string, but it has a repeat substring \"aba\"(spaces will be removed).\
  \ If we join them together, it looks like:`\"abaabaabaabaaba......\"`.\n\nSo, your\
  \ task is to find the repeat substring of the center part of leaves.\n\n# Inputs:\n\
  \n- `chars`: the specified characters. In this kata, they always be lowercase letters.\n\
  \n# Output:\n\n- The repeat substring that satisfy the above conditions.\n\nStill\
  \ not understand the task? Look at the following example ;-)\n\n# Examples\n\n\n\
  For `chars = \"abc\"`,the output should be `\"aba\"`\n```\ncenter leaves sequence:\
  \ \"abaabaabaabaabaaba.....\"\n```\nFor `chars = \"abab\"`,the output should be\
  \ `a`\n```\ncenter leaves sequence: \"aaaaaaaaaa.....\"\n```\nFor `chars = \"abcde\"\
  `,the output should be `aecea`\n```\ncenter leaves sequence: \"aeceaaeceaaecea.....\"\
  \n```\nFor `chars = \"aaaaaaaaaaaaaa\"`,the output should be `a`\n```\ncenter leaves\
  \ sequence: \"aaaaaaaaaaaaaa.....\"\n```\nFor `chars = \"abaabaaab\"`,the output\
  \ should be `aba`\n```\ncenter leaves sequence: \"abaabaabaaba.....\"\n```"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def center_of (s : List Char) : List Char := \n  sorry\n"
"vc-theorems": "theorem empty_and_nonempty (s : List Char) : \n  center_of s = []\
  \ ∨ (∀ c, c ∈ center_of s → c ∈ s) :=\nsorry \n\n\ntheorem center_symmetric (s :\
  \ List Char) (h : s ≠ []) :\n  center_of s = (center_of s).reverse :=\nsorry\n\n\
  \ntheorem length_bounded (s : List Char) (h : s ≠ []) :\n  (center_of s).length\
  \ ≤ s.length * s.length :=\nsorry\n\n\ntheorem result_uses_input_chars (s : List\
  \ Char) (h : s ≠ []) :\n  ∀ c, c ∈ center_of s → c ∈ s :=\nsorry\n\n\ntheorem small_alphabet\
  \ (s : List Char) (h : s ≠ []) \n  (h2 : ∀ c, c ∈ s → c = 'a' ∨ c = 'b') :\n  ∀\
  \ c, c ∈ center_of s → c = 'a' ∨ c = 'b' :=\nsorry\n\n/--\ninfo: ''\n-/\n#guard_msgs\
  \ in\n#eval center_of \"\"\n\n/--\ninfo: 'aba'\n-/\n#guard_msgs in\n#eval center_of\
  \ \"abc\"\n\n/--\ninfo: 'aecea'\n-/\n#guard_msgs in\n#eval center_of \"abcde\"\n"
"vc-postamble": "-- Apps difficulty: introductory\n-- Assurance level: unguarded"
