"vc-description": "Find sum of all the numbers that are multiples of 10 and are less\
  \ than or equal to a given number \"N\". (quotes for clarity and be careful of integer\
  \ overflow)\n\n-----Input-----\nInput will start with an integer T the count of\
  \ test cases, each case will have an integer N.\n\n-----Output-----\nOutput each\
  \ values, on a newline.\n\n-----Constraints-----\n- 1 ≤ T ≤ 10\n- 1 ≤ N ≤1000000000\n\
  \n-----Example-----\nInput:\n1\n10\n\nOutput:\n10\n\n-----Explanation-----\nExample\
  \ case 1. Only integer that is multiple 10 that is less than or equal to 10 is 10"
"vc-preamble": "import Imports.AllImports"
"vc-helpers": "-- <vc-helpers>\n-- </vc-helpers>"
"vc-definitions": "def sum_multiples_of_ten (n : Nat) : Nat := sorry\n\ntheorem sum_multiples_non_negative\
  \ (n : Nat) :\n  sum_multiples_of_ten n ≥ 0 := sorry\n"
"vc-theorems": "theorem sum_multiples_divisible_by_ten (n : Nat) :\n  sum_multiples_of_ten\
  \ n % 10 = 0 := sorry \n\n\ntheorem sum_multiples_upper_bound (n : Nat) :\n  sum_multiples_of_ten\
  \ n ≤ (n * n) / 2 := sorry\n\n\ntheorem sum_multiples_monotonic (n : Nat) :\n  n\
  \ ≥ 10 → sum_multiples_of_ten n ≥ sum_multiples_of_ten (n-1) := sorry\n\n\ntheorem\
  \ sum_multiples_decimal_bracket (n : Nat) :\n  sum_multiples_of_ten n = sum_multiples_of_ten\
  \ (n - n % 10) := sorry\n\n\ntheorem sum_multiples_edge_cases :\n  sum_multiples_of_ten\
  \ 0 = 0 ∧ sum_multiples_of_ten 9 = 0 := sorry\n\n/--\ninfo: 10\n-/\n#guard_msgs\
  \ in\n#eval sum_multiples_of_ten 10\n\n/--\ninfo: 30\n-/\n#guard_msgs in\n#eval\
  \ sum_multiples_of_ten 20\n\n/--\ninfo: 550\n-/\n#guard_msgs in\n#eval sum_multiples_of_ten\
  \ 100\n"
"vc-postamble": "-- Apps difficulty: interview\n-- Assurance level: guarded_and_plausible"
