vc-description: |-
  /- 
  function_signature: "def special_factorial(n: int) -> int"
  docstring: |
      The Brazilian factorial is defined as:
      brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
      where n > 0. Please write a function that computes the Brazilian factorial.
  test_cases:
    - input: 4
      expected_output: 288
  -/

vc-preamble: |-
  import Mathlib
  import Mathlib.Algebra.Polynomial.Basic
  import Std.Data.HashMap

vc-helpers: |-

vc-definitions: |-
  def implementation (n: Nat) : Nat :=
    sorry

vc-theorems: |-
  def problem_spec
  -- function signature
  (impl: Nat → Nat)
  -- inputs
  (n: Nat) :=
  -- spec
  let spec (result: Nat) :=
  let factorial := Nat.factorial n;
  (0 < n → result / factorial = impl (n - 1)) ∧
  (n = 0 → result = 1);
  -- program termination
  ∃ result, impl n = result ∧
  -- return value satisfies spec
  spec result
  
  theorem correctness
  (n: Nat)
  : problem_spec implementation n := by
    sorry

vc-postamble: |-
  -- #test implementation 4 = 288

