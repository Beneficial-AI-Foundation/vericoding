{"id": "clever_0", "vc-description": "/- \nfunction_signature: \"def has_close_elements(numbers: List[float], threshold: float) -> bool\"\ndocstring: Check if in given list of numbers, are any two numbers closer to each other than given threshold.\ntest_cases:\n  - input: [[1.0, 2.0, 3.0], 0.5]\n    expected_output: False\n  - input: [[1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3]\n    expected_output: True\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (numbers: List Rat) (threshold: Rat) : Bool :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: List Rat \u2192 Rat \u2192 Bool)\n-- inputs\n(numbers: List Rat)\n(threshold: Rat) :=\n-- spec\nlet numbers_within_threshold :=\n(\u2203 i j, i < numbers.length \u2227 j < numbers.length \u2227\ni \u2260 j \u2227 |numbers[i]! - numbers[j]!| < threshold);\nlet spec (res: Bool) :=\nnumbers.length > 1 \u2192\nif res then numbers_within_threshold else \u00acnumbers_within_threshold;\n-- program terminates\n\u2203 result, impl numbers threshold = result \u2227\n-- return value satisfies spec\nspec result\n-- if result then spec else \u00acspec\n\ntheorem correctness\n(numbers: List Rat)\n(threshold: Rat)\n: problem_spec implementation numbers threshold  := by\n  sorry", "vc-postamble": "-- #test implementation ([1, 2, 3]: List Rat) 0.5 = false\n-- #test implementation ([1, 2.8, 3, 4, 5, 2]: List Rat) 0.3 = true", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_1", "vc-description": "/- \nfunction_signature: \"def separate_paren_groups(paren_string: str) -> List[str]\"\ndocstring: |\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\ntest_cases:\n  - input: \"( ) (( )) (( )( ))\"\n    expected_output:\n      - \"()\"\n      - \"(())\"\n      - \"(()())\"\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap\n\n/--\nname: string_eq_iff_data_eq\nuse: |\n  Helper function to prove that two strings are equal if their data is equal.\nproblems: []\nsample_problems:\n  - 0\n-/\ndef string_eq_iff_data_eq (s1: String) (s2: String)\n: s1.data = s2.data \u2194 s1 = s2 :=\nby\n  apply Iff.intro\n  intro h\n  cases s1\n  cases s2\n  simp at h\n  simp [h]\n  intro h\n  apply String.data_eq_of_eq\n  exact h\n\n/--\nname: balanced_paren_non_computable\nuse: |\n  Non-computable definition to check if a string is balanced with respect to parentheses.\nproblems:\n  - 1\n  - 6\n  - 132\nsample_problems:\n  - 0\n-/\ndef balanced_paren_non_computable\n(paren_string: String) (bracket_type_left : Char) (bracket_type_right: Char): Prop\n:=\nlet chars := paren_string.toList;\n(\u2200 (i : \u2115), i \u2264 chars.length \u2192 ((chars.take i).count bracket_type_right) \u2264 ((chars.take i).count bracket_type_left)) \u2227\n(chars.count bracket_type_left = chars.count bracket_type_right)\n\n/--\nname: count_paren_groups_helper\nuse: |\n  Helper to count the number of groups of parentheses in a string.\nproblems:\n  - 1\n-/\ndef count_paren_groups_helper\n(paren_string: String) (num_open: Int) (num_groups: Nat): Nat :=\n-- Recursively count the number of paren groups\nif paren_string.isEmpty then\n  num_groups\nelse\n  let c := paren_string.get! 0\n  if c == '(' then\n    count_paren_groups_helper (paren_string.drop 1) (num_open + 1) num_groups\n  else if c == ')' then\n    let new_num_groups :=\n    if num_open == 1 then num_groups + 1 else num_groups\n    count_paren_groups_helper (paren_string.drop 1) (num_open - 1) new_num_groups\n  else\n    count_paren_groups_helper (paren_string.drop 1) num_open num_groups\ntermination_by paren_string.length\ndecreasing_by\n  all_goals\n  {\n    rename_i h_non_empty_string\n    rw [String.drop_eq, String.length]\n    simp\n    rw [String.isEmpty_iff] at h_non_empty_string\n    by_cases h_paren_nil : paren_string.length \u2264 0\n    rw [Nat.le_zero_eq] at h_paren_nil\n    rw [\u2190string_eq_iff_data_eq] at h_non_empty_string\n    have h_temp : \"\".data = [] := by simp\n    rw [h_temp] at h_non_empty_string\n    rw [String.length] at h_paren_nil\n    rw [List.length_eq_zero_iff] at h_paren_nil\n    contradiction\n    have h_temp : paren_string.length > 0 := by linarith\n    assumption\n  }\n\n/--\nname: count_paren_groups\nuse: |\n  Function to count the number of groups of parentheses in a string.\nproblems:\n  - 1\n-/\ndef count_paren_groups\n(paren_string: String): Nat :=\ncount_paren_groups_helper paren_string 0 0", "vc-helpers": "", "vc-definitions": "def implementation (paren_string: String) : List String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: String \u2192 List String)\n-- inputs\n(paren_string: String) :=\n-- spec\nlet paren_string_filtered := (paren_string.toList.filter (fun c => c == '(' \u2228  c == ')')).asString;\nlet spec (result_list: List String) :=\n-- concat of result is input_filtered\n(result_list.foldl (\u00b7 ++ \u00b7) \"\" = paren_string_filtered) \u2227\n-- each item in result is balanced and has only one group\n(\u2200 str \u2208 result_list, balanced_paren_non_computable str '(' ')' \u2227 count_paren_groups str = 1);\n-- program terminates\n\u2203 result, impl paren_string = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(paren_string: String)\n: problem_spec implementation paren_string := by\n  sorry", "vc-postamble": "-- #test implementation \"( ) (( )) (( )( ))\" = [\"()\", \"(())\", \"(()())\"]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_10", "vc-description": "/- \nfunction_signature: \"def make_palindrome(string: str) -> str\"\ndocstring: |\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\ntest_cases:\n  - input: \"\"\n    expected_output: \"\"\n  - input: \"cat\"\n    expected_output: \"catac\"\n  - input: \"cata\"\n    expected_output: \"catac\"\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap\n\n/--\nname: is_palindrome\nuse: |\n  Helper to check if a string is a palindrome.\nproblems:\n  - 10\n  - 48\n-/\ndef is_palindrome\n(s: String): Bool :=\ns = s.toList.reverse.asString", "vc-helpers": "", "vc-definitions": "def implementation (string: String) : String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: String \u2192 String)\n-- inputs\n(string: String) :=\n-- spec\nlet spec (result: String) :=\nis_palindrome result \u2227\nresult.length \u2265 string.length \u2227\nstring.isPrefixOf result \u2227\n-- comprehensive check that the result is the shortest palindrome\n(\u2200 (possible_palindrome: String),\nstring.isPrefixOf possible_palindrome \u2192\nis_palindrome possible_palindrome \u2192\nresult.length \u2264 possible_palindrome.length);\n-- program termination\n\u2203 result, implementation string = result \u2227\nspec result\n\ntheorem correctness\n(s: String)\n: problem_spec implementation s\n:= by\n  sorry", "vc-postamble": "-- #test implementation \"\" = \"\"\n-- #test implementation \"cat\" = \"catac\"\n-- #test implementation \"cata\" = \"catac\"", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_100", "vc-description": "/- \nfunction_signature: \"def make_a_pile(n: int) -> List[int]\"\ndocstring: |\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\ntest_cases:\n  - input: 3\n    expected_output: [3, 5, 7]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (n: Int) : List Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Int \u2192 List Int)\n-- inputs\n(n: Int) :=\n-- spec\nlet spec (result: List Int) :=\n  result.length = n \u2227\n  (forall i: Nat, (1 <= i \u2227 i < n) \u2192 (result[i]! = result[i-1]! + 2)) \u2227\n  result[0]! = n\n-- program termination\n\u2203 result, implementation n = result \u2227\nspec result\n\ntheorem correctness\n(n: Int)\n: problem_spec implementation n\n:= by\n  sorry", "vc-postamble": "-- #test implementation 3 = [3, 5, 7]\n-- #test implementation 4 = [4,6,8,10]\n-- #test implementation 5 = [5, 7, 9, 11, 13]\n-- #test implementation 6 = [6, 8, 10, 12, 14, 16]\n-- #test implementation 8 = [8, 10, 12, 14, 16, 18, 20, 22]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_101", "vc-description": "/- \nfunction_signature: \"def words_string(s: string) -> List[string]\"\ndocstring: |\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\ntest_cases:\n  - input: \"Hi, my name is John\"\n    expected_output: [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  - input: \"One, two, three, four, five, six\"\n    expected_output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (s: String) : List String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: String \u2192 List String)\n-- inputs\n(s: String) :=\n-- spec\nlet spec (result: List String) :=\n  let chars := s.toList;\n  let first := s.takeWhile (fun c => c \u2260 ',' \u2227 c \u2260 ' ');\n  (result = [] \u2194 (\u2200 x \u2208 chars, x = ' ' \u2228 x = ',') \u2228 s = \"\") \u2227\n  (result \u2260 [] \u2194 result = [first] ++ (implementation (s.drop (first.length + 1))))\n\n-- program termination\n\u2203 result, implementation s = result \u2227\nspec result\n\ntheorem correctness\n(s: String)\n: problem_spec implementation s\n:= by\n  sorry", "vc-postamble": "-- #test implementation \"Hi, my name is John\" = [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n-- #test implementation \"One, two, three, four, five, six\" = [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n-- #test implementation \"Hi, my name\" = [\"Hi\", \"my\", \"name\"]\n-- #test implementation \"One,, two, three, four, five, six,\" = [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n-- #test implementation \"\" = []\n-- #test implementation \"ahmed     , gamal\" = [\"ahmed\", \"gamal\"]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_102", "vc-description": "/- \nfunction_signature: \"def choose_num(x: int, y: int) -> int\"\ndocstring: |\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\ntest_cases:\n  - input: (12, 15)\n    expected_output: 14\n  - input: (13, 12)\n    expected_output: -1\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (x: Int) (y: Int) : Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Int \u2192 Int \u2192 Int)\n-- inputs\n(x: Int) (y: Int) :=\n-- spec\nlet spec (result: Int) :=\n  (result = -1 \u2228 (x \u2264 result \u2227 result \u2264 y \u2227 Even result)) \u2227\n  (result = -1 \u2228 (forall i: Int, (x \u2264 i \u2227 i \u2264 y \u2227 Even i) \u2192 result \u2265 i)) \u2227\n  (result = -1 \u2194 (x > y \u2228 (x == y \u2227 Odd x \u2227 Odd y)))\n-- program termination\n\u2203 result, implementation x y = result \u2227\nspec result\n\ntheorem correctness\n(x: Int) (y: Int)\n: problem_spec implementation x y\n:= by\n  sorry", "vc-postamble": "-- #test implementation 12 15 = 14\n-- #test implementation 13 12 = -1\n-- #test implementation 33 12354 = 12354\n-- #test implementation 5234 5233 = -1\n-- #test implementation 6 29 = 28\n-- #test implementation 27 10 = (-1)\n-- #test implementation 7 7 = -1\n-- #test implementation 546 546 = 546", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_103", "vc-description": "/- \nfunction_signature: \"def rounded_avg(n: nat, m: nat) -> Option[string]\"\ndocstring: |\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return none.\ntest_cases:\n  - input: (1, 5)\n    expected_output: \"0b11\"\n  - input: (7, 5)\n    expected_output: None\n  - input: (10, 20)\n    expected_output: \"0b1111\"\n  - input: (20, 33)\n    expected_output: \"0b11010\"\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (n: Nat) (m: Nat) : Option String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Nat \u2192 Nat \u2192 Option String)\n-- inputs\n(n: Nat) (m: Nat) :=\n-- spec\nlet spec (result: Option String) :=\n  (n > m \u2194 result.isNone) \u2227\n  (n \u2264 m \u2194 result.isSome) \u2227\n  (n \u2264 m \u2192\n    (result.isSome \u2227\n    let val := Option.getD result \"\";\n    let xs := List.Ico n (m+1);\n    let avg := xs.sum / xs.length;\n    (val.take 2 = \"0b\") \u2227\n    (Nat.ofDigits 2 ((val.drop 2).toList.map (fun c => c.toNat - '0'.toNat)).reverse = avg)))\n-- program termination\n\u2203 result, implementation n m = result \u2227\nspec result\n\ntheorem correctness\n(n: Nat) (m: Nat)\n: problem_spec implementation n m\n:= by\n  sorry", "vc-postamble": "-- #test implementation 1 5 = some \"0b11\"\n-- #test implementation 7 13 = some \"0b1010\"\n-- #test implementation 964 977 = some \"0b1111001010\"\n-- #test implementation 996 997 = some \"0b1111100100\"\n-- #test implementation 185 546 = some \"0b101101110\"\n-- #test implementation 362 496 = some \"0b110101101\"\n-- #test implementation 350 902 = some \"0b1001110010\"\n-- #test implementation 197 233 = some \"0b11010111\"\n-- #test implementation 7 5 = none\n-- #test implementation 5 1 = none\n-- #test implementation 5 5 = some \"0b101\"", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_104", "vc-description": "/- \nfunction_signature: \"def unique_digits(x: List[nat]) -> List[nat]\"\ndocstring: |\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\ntest_cases:\n  - input: [15, 33, 1422, 1]\n    expected_output: [1, 15, 33]\n  - input: [152, 323, 1422, 10]\n    expected_output: []\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (x: List Nat) : List Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Nat \u2192 List Nat)\n-- inputs\n(x: List Nat) :=\n-- spec\nlet spec (result: List Nat) :=\n  let has_even_digits(i: Nat): Bool :=\n    (List.filter (fun d => Even d) (Nat.digits 10 i)).length > 0;\n  (List.Sorted Nat.le result) \u2227\n  (forall i, i \u2208 result \u2194 (i \u2208 x \u2227 !(has_even_digits i)))\n-- program termination\n\u2203 result, implementation x = result \u2227\nspec result\n\ntheorem correctness\n(x: List Nat)\n: problem_spec implementation x\n:= by\n  sorry", "vc-postamble": "-- #test implementation [15, 33, 1422, 1] = [1, 15, 33]\n-- #test implementation [152, 323, 1422, 10] = []\n-- #test implementation [12345, 2033, 111, 151] = [111, 151]\n-- #test implementation [135, 103, 31] = [31, 135]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_105", "vc-description": "/- \nfunction_signature: \"def by_length(arr: List[int]) -> List[string]\"\ndocstring: |\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\ntest_cases:\n  - input: [2, 1, 1, 4, 5, 8, 2, 3]\n    expected_output: [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  - input: []\n    expected_output: []\n  - input: [1, -1 , 55]\n    expected_output: ['One']\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (arr: List Int) : List String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Int \u2192 List String)\n-- inputs\n(arr: List Int) :=\n-- spec\nlet spec (result: List String) :=\n  let digits: List String := [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  (forall s: String, (s \u2208 result \u2192 s \u2208 digits)) \u2227\n  (arr.length \u2265 result.length) \u2227\n  (forall x: Nat, ((x: Int) \u2208 arr \u2227 1 \u2264 x \u2227 x \u2264 9) \u2192 (digits[x-1]! \u2208 result)) \u2227\n  (List.Sorted Int.le (List.map (fun (s: String) => (List.idxOf s digits) + 1) result).reverse)\n-- program termination\n\u2203 result, implementation arr = result \u2227\nspec result\n\ntheorem correctness\n(arr: List Int)\n: problem_spec implementation arr\n:= by\n  sorry", "vc-postamble": "-- #test implementation [2, 1, 1, 4, 5, 8, 2, 3] = [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n-- #test implementation [] = []\n-- #test implementation [1, -1 , 55] = [\"One\"]\n-- #test implementation [1, -1, 3, 2] = [\"Three\", \"Two\", \"One\"]\n-- #test implementation [9, 4, 8] = [\"Nine\", \"Eight\", \"Four\"]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_106", "vc-description": "/- \nfunction_signature: \"def f(n: int) -> List[int]\"\ndocstring: |\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\ntest_cases:\n  - input: 5\n    expected_output: [1, 2, 6, 24, 15]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (n: Int) : List Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Int \u2192 List Int)\n-- inputs\n(n: Int) :=\n-- spec\nlet spec (result: List Int) :=\n  (result.length = n) \u2227\n  (forall i: Nat, (1 \u2264 i \u2227 i \u2264 n \u2227 Even i) \u2192 (result[i-1]! = Nat.factorial i)) \u2227\n  (forall i: Nat, (1 \u2264 i \u2227 i \u2264 n \u2227 Odd i) \u2192 (result[i-1]! = (List.range (i+1)).sum))\n-- program termination\n\u2203 result, implementation n = result \u2227\nspec result\n\ntheorem correctness\n(n: Int)\n: problem_spec implementation n\n:= by\n  sorry", "vc-postamble": "-- #test implementation 5 = [1, 2, 6, 24, 15]\n-- #test implementation 7 = [1, 2, 6, 24, 15, 720, 28]\n-- #test implementation 1 = [1]\n-- #test implementation 3 = [1, 2, 6]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_107", "vc-description": "/- \nfunction_signature: \"def even_odd_palindrome(n: nat) -> (nat, nat)\"\ndocstring: |\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\ntest_cases:\n  - input: 3\n    expected_output: (1, 2)\n  - input: 12\n    expected_output: (4, 6)\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (n: Nat) : Nat \u00d7 Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Nat \u2192 Nat \u00d7 Nat)\n-- inputs\n(n: Nat) :=\n-- spec\nlet spec (result: Nat \u00d7 Nat) :=\n  let is_palindrome (k: Nat): Prop :=\n    List.Palindrome (Nat.digits 10 k);\n  let even_palindrome (k: Nat): Prop :=\n    (Even k) \u2227 (is_palindrome k);\n  let odd_palindrome (k: Nat): Prop :=\n    (Odd k) \u2227 (is_palindrome k);\n  n > 0 \u2192\n  (1 < n \u2192\n    let impl_n_minus_1 := implementation (n - 1);\n    ((even_palindrome n) \u2192 result.1 = 1 + impl_n_minus_1.1) \u2227\n    ((odd_palindrome n) \u2192 result.2 = 1 + impl_n_minus_1.2) \u2227\n    (\u00ac (odd_palindrome n) \u2192 result.2 = impl_n_minus_1.2) \u2227\n    (\u00ac (even_palindrome n) \u2192 result.1 = impl_n_minus_1.1))\n  \u2227\n  (n = 1 \u2192 (result.1 = 0) \u2227 (result.2 = 1));\n-- program termination\n\u2203 result, implementation n = result \u2227\nspec result\n\ntheorem correctness\n(n: Nat)\n: problem_spec implementation n\n:= by\n  sorry", "vc-postamble": "-- #test implementation 123 = (8, 13)\n-- #test implementation 12 = (4, 6)\n-- #test implementation 3 = (1, 2)\n-- #test implementation 63 = (6, 8)\n-- #test implementation 25 = (5, 6)\n-- #test implementation 19 = (4, 6)\n-- #test implementation 9 = (4, 5)", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_108", "vc-description": "/- \nfunction_signature: \"def count_nums(arr: List[int]) -> int\"\ndocstring: |\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\ntest_cases:\n  - input: []\n    expected_output: 0\n  - input: [-1, 11, -11]\n    expected_output: 1\n  - input: [1, 1, 2]\n    expected_output: 3\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (arr: List Int) : Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Int \u2192 Int)\n-- inputs\n(arr: List Int) :=\n\n-- spec\nlet spec (result: Int) :=\n  let dig_sum (x: Int): Int :=\n    let digs := x.natAbs.digits 10;\n    if x >= 0 then\n      (List.map (fun t => (t: Int)) digs).sum\n    else\n      (List.map (fun t => (t: Int)) (digs.drop 1)).sum - (digs[0]! : Int);\n  (arr = [] \u2192 result = 0) \u2227\n  (arr \u2260 [] \u2192 0 < (dig_sum arr[0]!) \u2192 result = 1 + implementation (arr.drop 1)) \u2227\n  (arr \u2260 [] \u2192 (dig_sum arr[0]!) \u2264 0 \u2192 result = implementation (arr.drop 1));\n-- program termination\n\u2203 result, implementation arr = result \u2227\nspec result\n\ntheorem correctness\n(arr: List Int)\n: problem_spec implementation arr\n:= by\n  sorry", "vc-postamble": "-- #test implementation [] = 0\n-- #test implementation [-1, -2, 0] = 0\n-- #test implementation [1, 1, 2, -2, 3, 4, 5] = 6\n-- #test implementation [1, 6, 9, -6, 0, 1, 5] = 5\n-- #test implementation [1, 100, 98, -7, 1, -1] = 4\n-- #test implementation [12, 23, 34, -45, -56, 0] = 5\n-- #test implementation [-0, 1^0] = 1\n-- #test implementation [1] = 1", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_109", "vc-description": "/- \nfunction_signature: \"def move_one_ball(arr: List[int]) -> bool\"\ndocstring: |\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\ntest_cases:\n  - input: [3, 4, 5, 1, 2]\n    expected_output: True\n  - input: [3, 5, 4, 1, 2]\n    expected_output: False\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (arr: List Int) : Bool :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Int \u2192 Bool)\n-- inputs\n(arr: List Int) :=\nlet is_shifted (xs: List Int) (ys: List Int) (i: Nat) :=\n  (xs.length = ys.length) \u2227\n  (0 <= i) \u2227\n  (i < xs.length) \u2227\n  (forall j, (0 <= j \u2227 j < ys.length) \u2192 (ys[j]! = xs[(j-i) % xs.length]!))\n-- spec\nlet spec (result: Bool) :=\n  ((arr = []) \u2192 (result = True)) \u2227\n  result \u2194 (exists i, exists arr_shifted, (is_shifted arr arr_shifted i) \u2227 (List.Sorted Int.le arr_shifted))\n-- program termination\n\u2203 result, implementation arr = result \u2227\nspec result\n\ntheorem correctness\n(arr: List Int)\n: problem_spec implementation arr\n:= by\n  sorry", "vc-postamble": "-- #test implementation [3, 4, 5, 1, 2] = True\n-- #test implementation [3, 5, 10, 1, 2] = True\n-- #test implementation [4, 3, 1, 2] = False\n-- #test implementation [3, 5, 4, 1, 2] = False\n-- #test implementation [] = True", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_11", "vc-description": "/- \nfunction_signature: \"def string_xor(a: str, b: str) -> str\"\ndocstring: |\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\ntest_cases:\n  - input:\n      - \"010\"\n      - \"110\"\n    expected_output: \"100\"\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (a b: String) : String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: String \u2192 String \u2192 String)\n-- inputs\n(a b: String) :=\n-- spec\nlet spec (result: String) :=\n  a.all (fun c => c = '0' \u2228 c = '1') \u2192\n  b.all (fun c => c = '0' \u2228 c = '1') \u2192\n  a.length = b.length \u2192\n  result.length = a.length \u2227\n  result.all (fun c => c = '0' \u2228 c = '1') \u2227\n  (\u2200 i, i < a.length \u2192\n  let i_pos := String.Pos.mk i;\n  (a.get i_pos = b.get i_pos \u2192 result.get i_pos = '0') \u2227\n  (a.get i_pos \u2260 b.get i_pos \u2192 result.get i_pos = '1'));\n-- program termination\n\u2203 result, implementation a b = result \u2227\nspec result\n\ntheorem correctness\n(a b: String)\n: problem_spec implementation a b\n:= by\n  sorry", "vc-postamble": "-- #test implementation \"010\" \"110\" = \"100\"", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_110", "vc-description": "/- \nfunction_signature: \"def exchange(lst1: list[int], lst2: list[int]) -> str\"\ndocstring: |\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\". It is assumed that the input lists will be non-empty.\ntest_cases:\n  - input: ([1, 2, 3, 4], [1, 2, 3, 4])\n    expected_output: \"YES\"\n  - input: ([1, 2, 3, 4], [1, 5, 3, 4])\n    expected_output: \"NO\"\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap\nimport Std", "vc-helpers": "", "vc-definitions": "def implementation (lst1: List Int) (lst2: List Int) : String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Int \u2192 List Int \u2192 String)\n-- inputs\n(lst1: List Int)\n(lst2: List Int) :=\n-- spec\nlet spec (result : String) :=\n  lst1 \u2260 [] \u2192 lst2 \u2260 [] \u2192\n  let bool_result := \u2203 exchange: List (Nat \u00d7 Nat),\n    let lst1_idxs := exchange.map (fun (a, _) => a)\n    let lst2_idxs := exchange.map (fun (_, b) => b)\n    lst1_idxs.all (fun i => i < lst1.length) \u2227\n    lst2_idxs.all (fun i => i < lst2.length) \u2227\n    lst1_idxs.Nodup \u2227\n    lst2_idxs.Nodup \u2227\n    \u2200 i, i < lst1.length \u2192\n      (i \u2209 lst1_idxs \u2192 Even (lst1[i]!)) \u2227\n      (i \u2208 lst1_idxs \u2192\n        -- find the (a, b) in exchange where a = i\n        let i_idx := (lst1_idxs.indexesOf i).head!\n        Even (lst2[lst2_idxs[i_idx]!]!))\n  (bool_result \u2192 result = \"YES\") \u2227\n  (result = \"NO\" \u2192 \u00ac bool_result) \u2227\n  (result \u2260 \"YES\" \u2227 result \u2260 \"NO\" \u2192 False)\n-- program termination\n\u2203 result,\n  implementation lst1 lst2 = result \u2227\n  spec result\n\ntheorem correctness\n(lst1: List Int)\n(lst2: List Int)\n: problem_spec implementation lst1 lst2\n:= by\n  sorry", "vc-postamble": "-- #test implementation ([1, 2, 3, 4], [1, 2, 3, 4]) = \"YES\"\n-- #test implementation ([1, 2, 3, 4], [1, 5, 3, 4]) = \"NO\"", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_111", "vc-description": "/- \nfunction_signature: \"def histogram(s : str) -> Dict[str, int]\"\ndocstring: |\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    -- Note(George): I believe the equality extensionality for HashMaps makes this spec true.\ntest_cases:\n  - input: 'a b c'\n    expected_output: {'a': 1, 'b': 1, 'c': 1}\n  - input: 'a b b a'\n    expected_output: {'a': 2, 'b': 2}\n  - input: 'a b c a b'\n    expected_output: {'a': 2, 'b': 2}\n  - input: 'b b b b a'\n    expected_output: {'b': 4}\n  - input: ''\n    expected_output: {}\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (s: String) : Std.HashMap Char Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: String \u2192 Std.HashMap Char Nat)\n-- inputs\n(s: String) :=\n-- spec\nlet spec (result : Std.HashMap Char Nat) :=\n    let chars := s.splitOn \" \"\n    chars.all (fun c => c.length = 1) \u2227 s.all (fun c => c.isLower \u2228 c = ' ') \u2192\n    \u2200 key \u2208 result.keys,\n      (key.isLower \u2227\n      key \u2208 s.data \u2227\n      result.get! key = s.count key) \u2227\n    (\u2200 char \u2208 s.data, char.isLower \u2192\n      ((\u2203 char2 \u2208 s.data, char2.isLower \u2227 char2 \u2260 char \u2227\n      s.count char < s.count char2) \u2194 char \u2209 result.keys))\n-- program termination\n\u2203 result,\n  implementation s = result \u2227\n  spec result\n\ntheorem correctness\n(s: String)\n: problem_spec implementation s\n:= by\n  sorry", "vc-postamble": "-- #test implementation 'a b c' = {'a': 1, 'b': 1, 'c': 1}\n-- #test implementation 'a b b a' = {'a': 2, 'b': 2}\n-- #test implementation 'a b c a b' = {'a': 2, 'b': 2}\n-- #test implementation 'b b b b a' = {'b': 4}\n-- #test implementation '' = {}", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_112", "vc-description": "/- \nfunction_signature: \"def reverse_delete(s : str, c : str) -> (str, bool)\"\ndocstring: |\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    -- Note: We assume the deletions preserve the order of the remaining characters.\ntest_cases:\n  - input: [\"abcde\", \"ae\"]\n    expected_output: (\"bcd\", False)\n  - input: [\"abcdef\", \"b\"]\n    expected_output: (\"acdef\", False)\n  - input: [\"abcdedcba\", \"ab\"]\n    expected_output: ('cdedc', True)\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (s: String) (c: String) : String \u00d7 Bool :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: String \u2192 String \u2192 (String \u00d7 Bool))\n-- inputs\n(s: String)\n(c: String) :=\n-- spec\nlet spec (result : String \u00d7 Bool) :=\n  let (result_str, result_bool) := result\n  result_bool = (List.Palindrome result_str.data) \u2227\n  (c.data.length = 0 \u2192 result_str = s) \u2227\n  (c.data.length > 0 \u2192\n    result_str =\n    (implementation\n      (String.join ((s.data.filter (fun x => x \u2260 c.data.head!)).map (fun c => String.mk [c])))\n      (c.drop 1)).fst)\n\n-- program termination\n\u2203 result,\n  implementation s c = result \u2227\n  spec result\n\ntheorem correctness\n(s c: String)\n: problem_spec implementation s c\n:= by\n  sorry", "vc-postamble": "-- #test implementation \"abcde\" \"ae\" = (\"bcd\", False)\n-- #test implementation \"abcdef\" \"b\" = (\"acdef\", False)\n-- #test implementation \"abcdedcba\" \"ab\" = (\"cdedc\", True)", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_113", "vc-description": "/- \nfunction_signature: \"def odd_count(lst : list[str]) -> list[str]\"\ndocstring: |\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    Note(George): Found it hard to not leak the implementation, so I opted for a recursive statement.\ntest_cases:\n  - input: ['1234567']\n    expected_output: [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  - input: ['3',\"11111111\"]\n    expected_output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (lst: List String) : List String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List String \u2192 List String)\n-- inputs\n(lst: List String) :=\n-- spec\nlet spec (result : List String) :=\n  lst.all (fun s => s.data.all (fun c => c.isDigit)) \u2192\n  (result.length = 0 \u2194 lst.length = 0) \u2227\n  (result.length > 0 \u2192\n  let num_odd_digits := (lst.head!.data.filter (fun c => c.isDigit \u2227 c.toNat % 2 = 1)).length\n  result.head! = \"the number of odd elements \" ++ num_odd_digits.repr ++ \"n the str\" ++ num_odd_digits.repr ++ \"ng \" ++ num_odd_digits.repr ++ \" of the \" ++ num_odd_digits.repr ++ \"nput.\"\n  \u2227 result.tail! = implementation lst.tail!)\n-- program termination\n\u2203 result,\n  implementation lst = result \u2227\n  spec result\n\ntheorem correctness\n(lst: List String)\n: problem_spec implementation lst\n:= by\n  sorry", "vc-postamble": "-- #test implementation ['1234567'] = [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n-- #test implementation ['3',\"11111111\"] = [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n--  \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_114", "vc-description": "/- \nfunction_signature: \"def minSubArraySum(nums : list[int]) -> int\"\ndocstring: |\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\ntest_cases:\n  - input: [2, 3, 4, 1, 2, 4]\n    expected_output: 1\n  - input: [-1, -2, -3]\n    expected_output: -6\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (nums: List Int) : Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Int \u2192 Int)\n-- inputs\n(nums: List Int) :=\n-- spec\nlet spec (result : Int) :=\n  (\u2200 subarray \u2208 nums.sublists,\n    subarray.length > 0 \u2192\n    result \u2264 subarray.sum) \u2227\n  (\u2203 subarray \u2208 nums.sublists,\n    subarray.length > 0 \u2227\n    result = subarray.sum)\n-- program termination\n\u2203 result,\n  implementation nums = result \u2227\n  spec result\n\ntheorem correctness\n(nums: List Int)\n: problem_spec implementation nums\n:= by\n  sorry", "vc-postamble": "-- #test implementation [2, 3, 4, 1, 2, 4] = 1\n-- #test implementation [-1, -2, -3] = -6", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_115", "vc-description": "/- \nfunction_signature: \"def max_fill_count(grid : list[list[int]], capacity : int) -> int\"\ndocstring: |\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\ntest_cases:\n  - input: ([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)\n    expected_output: 6\n  - input: ([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)\n    expected_output: 5\n  - input: ([[0,0,0], [0,0,0]], 5)\n    expected_output: 0\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (grid: List (List Nat)) (capacity: Nat) : Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List (List Nat) \u2192 Nat \u2192 Nat)\n-- inputs\n(grid: List (List Nat))\n(capacity: Nat) :=\n-- spec\nlet spec (result : Nat) :=\n  (grid.all (fun row => row.all (fun cell => cell = 0 \u2228 cell = 1))) \u2192\n  (\u2203 len : Nat, grid.all (fun row => row.length = len)) \u2192\n  (result = 0 \u2194 grid.length = 0) \u2227\n  (grid.length > 0 \u2192\n    let well_water_count := grid.head!.sum;\n    result - (well_water_count / capacity) - (if well_water_count % capacity > 0 then 1 else 0) = implementation grid.tail! capacity)\n-- program termination\n\u2203 result,\n  implementation grid capacity = result \u2227\n  spec result\n\ntheorem correctness\n(grid: List (List Nat))\n(capacity: Nat)\n: problem_spec implementation grid capacity\n:= by\n  sorry", "vc-postamble": "-- #test implementation [[0,0,1,0], [0,1,0,0], [1,1,1,1]] 1 = 6\n-- #test implementation [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]] 2 = 5\n-- #test implementation [[0,0,0], [0,0,0]] 5 = 0", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_116", "vc-description": "/- \nfunction_signature: \"def max_fill_count(grid : list[list[int]], capacity : int) -> int\"\ndocstring: |\n    Please write a function that sorts an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\ntest_cases:\n  - input: [1, 5, 2, 3, 4]\n    expected_output: [1, 2, 3, 4, 5]\n  - input: [1, 0, 2, 3, 4]\n    expected_output: [0, 1, 2, 3, 4]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (lst: List Nat) : List Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Nat \u2192 List Nat)\n-- inputs\n(lst: List Nat) :=\n-- spec\nlet spec (result : List Nat) :=\n  \u2200 x : Nat, lst.count x = result.count x \u2227\n  result.length = lst.length \u2227\n  (\u2200 i j : Nat, i < j \u2192 j < result.length \u2192\n    Nat.digits 2 (result[i]!) < Nat.digits 2 (result[j]!) \u2228\n    (Nat.digits 2 (result[i]!) = Nat.digits 2 (result[j]!) \u2227 result[i]! < result[j]!))\n-- program termination\n\u2203 result,\n  implementation lst = result \u2227\n  spec result\n\ntheorem correctness\n(lst: List Nat)\n: problem_spec implementation lst\n:= by\n  sorry", "vc-postamble": "-- #test implementation [1, 5, 2, 3, 4] = [1, 2, 3, 4, 5]\n-- #test implementation [1, 0, 2, 3, 4] = [0, 1, 2, 3, 4]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_117", "vc-description": "/- \nfunction_signature: \"def select_words(s : str, n : int) -> list[str]\"\ndocstring: |\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\ntest_cases:\n  - input: (\"Mary had a little lamb\", 4)\n    expected_output: [\"little\"]\n  - input: (\"Mary had a little lamb\", 3)\n    expected_output: [\"Mary\", \"lamb\"]\n  - input: (\"simple white space\", 2)\n    expected_output: []\n  - input: (\"Hello world\", 4)\n    expected_output: [\"world\"]\n  - input: (\"Uncle sam\", 3)\n    expected_output: [\"Uncle\"]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (s: String) (n: Nat) : List String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: String \u2192 Nat \u2192 List String)\n-- inputs\n(s: String)\n(n: Nat) :=\n-- spec\nlet spec (result : List String) :=\n  let is_consonant (c: Char) :=\n    c \u2209 ['a', 'e', 'i', 'o', 'u'] \u2227\n    c \u2209 ['A', 'E', 'I', 'O', 'U'] \u2227\n    c.isAlpha\n  s.all (fun c => c = ' ' \u2228 c.isAlpha) \u2192\n  let words := s.splitOn \" \"\n  (result = [] \u2194 (s.length = 0 \u2228 words.all (fun word => (word.data.filter (fun c => is_consonant c)).length \u2260 n))) \u2227\n  (result.length > 0 \u2192\n    let first_word := result[0]!\n    first_word \u2208 words \u2227\n    (first_word.data.filter (fun c => is_consonant c)).length = n \u2227\n    let first_word_idx := words.idxOf first_word\n    (\u2200 i, i < first_word_idx \u2192\n      (words[i]!.data.filter (fun c => is_consonant c)).length \u2260 n) \u2227\n    result.tail! =\n      implementation ((words.drop (first_word_idx + 1)).foldl (fun acc word => acc ++ \" \" ++ word) \"\") n\n  )\n\n-- program termination\n\u2203 result,\n  implementation s n = result \u2227\n  spec result\n\ntheorem correctness\n(s: String)\n(n: Nat)\n: problem_spec implementation s n\n:= by\n  sorry", "vc-postamble": "-- #test implementation \"Mary had a little lamb\" 4 = [\"little\"]\n-- #test implementation \"Mary had a little lamb\" 3 = [\"Mary\", \"lamb\"]\n-- #test implementation \"simple white space\" 2 = []\n-- #test implementation \"Hello world\" 4 = [\"world\"]\n-- #test implementation \"Uncle sam\" 3 = [\"Uncle\"]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_118", "vc-description": "/- \nfunction_signature: \"def get_closest_vowel(s : str) -> str\"\ndocstring: |\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n    Note: The \"closest\" is interpreted as the closest to the end of the word, not the closest to the consonants.\ntest_cases:\n  - input: \"yogurt\"\n    expected_output: \"u\"\n  - input: \"FULL\"\n    expected_output: \"U\"\n  - input: \"quick\"\n    expected_output: \"i\"\n  - input: \"ab\"\n    expected_output: \"\"\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (s: String) : String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: String \u2192 String)\n-- inputs\n(s: String) :=\n-- spec\nlet spec (result : String) :=\n  s.data.all (fun c => c.isAlpha) \u2192\n  let is_consonant (c: Char) :=\n    c \u2209 ['a', 'e', 'i', 'o', 'u'] \u2227\n    c \u2209 ['A', 'E', 'I', 'O', 'U'] \u2227\n    c.isAlpha\n  (result = \"\" \u2192 \u00ac \u2203 (i j k : Nat), i < j \u2227 j < k \u2227 k < s.length \u2227 is_consonant s.data[i]! \u2227 \u00ac is_consonant s.data[j]! \u2227 is_consonant s.data[k]!) \u2227\n  (result \u2260 \"\" \u2192\n    result.length = 1 \u2227\n    result.data[0]! \u2208 s.data \u2227\n    \u00ac is_consonant result.data[0]! \u2227\n    \u2203 (i j k : Nat),\n      i < j \u2227 j < k \u2227 k < s.length \u2227\n      is_consonant s.data[i]! \u2227 \u00ac is_consonant s.data[j]! \u2227 is_consonant s.data[k]! \u2227\n      result.data[0]! = s.data[j]! \u2227\n      (\u2200 (i' j' k' : Nat),\n        i' < j' \u2227 j' < k' \u2227 k' < s.length \u2227 is_consonant s.data[i']! \u2227 \u00ac is_consonant s.data[j']! \u2227 is_consonant s.data[k']! \u2192\n        j' \u2264 j)\n  )\n-- program termination\n\u2203 result,\n  implementation s = result \u2227\n  spec result\n\ntheorem correctness\n(s: String)\n: problem_spec implementation s\n:= by\n  sorry", "vc-postamble": "-- #test implementation \"yogurt\" = \"u\"\n-- #test implementation \"FULL\" = \"U\"\n-- #test implementation \"quick\" = \"i\"\n-- #test implementation \"ab\" = \"\"", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_119", "vc-description": "/- \nfunction_signature: \"def match_parens(l : list[str]) -> str\"\ndocstring: |\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\ntest_cases:\n  - input: ['()(', ')']\n    expected_output: \"Yes\"\n  - input: [')', ')']\n    expected_output: \"No\"\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap\n\n/--\nname: balanced_paren_non_computable\nuse: |\n  Non-computable definition to check if a string is balanced with respect to parentheses.\nproblems:\n  - 1\n  - 6\n  - 119\n  - 132\nsample_problems:\n  - 0\n-/\ndef balanced_paren_non_computable\n(paren_string: String) (bracket_type_left : Char) (bracket_type_right: Char): Prop\n:=\nlet chars := paren_string.toList;\n(\u2200 (i : \u2115), i \u2264 chars.length \u2192 ((chars.take i).count bracket_type_right) \u2264 ((chars.take i).count bracket_type_left)) \u2227\n(chars.count bracket_type_left = chars.count bracket_type_right)", "vc-helpers": "", "vc-definitions": "def implementation (l: List String) : String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List String \u2192 String)\n-- inputs\n(l: List String) :=\n-- spec\nlet spec (result : String) :=\n  l.length = 2 \u2192\n  l[0]!.all (fun c => c = '(' \u2228 c = ')') \u2192\n  l[1]!.all (fun c => c = '(' \u2228 c = ')') \u2192\n  let res := (balanced_paren_non_computable (l[0]! ++ l[1]!) '(' ')' \u2228\n            balanced_paren_non_computable (l[1]! ++ l[0]!) '(' ')')\n  (res \u2192 result = \"Yes\") \u2227\n  (\u00ac res \u2192 result = \"No\")\n-- program termination\n\u2203 result,\n  implementation l = result \u2227\n  spec result\n\ntheorem correctness\n(l: List String)\n: problem_spec implementation l\n:= by\n  sorry", "vc-postamble": "-- #test implementation ['()(', ')'] = \"Yes\"\n-- #test implementation [')', ')'] = \"No\"", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_12", "vc-description": "/- \nfunction_signature: \"def longest(strings: List[str]) -> Optional[str]\"\ndocstring: |\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\ntest_cases:\n  - input: []\n    expected_output: None\n  - input: [\"a\", \"b\", \"c\"]\n    expected_output: \"a\"\n  - input: [\"a\", \"bb\", \"ccc\"]\n    expected_output: \"ccc\"\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (strings: List String) : Option String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List String \u2192 Option String)\n-- inputs\n(strings: List String) :=\n-- spec\nlet spec (result: Option String) :=\n  (result = none \u2194 strings.length = 0) \u2228\n  (\u2203 longest, result = some longest \u2227\n  longest \u2208 strings \u2227\n  \u2200 s, s \u2208 strings \u2192 s.length \u2264 longest.length \u2192\n  (\u2203 i, i < strings.length \u2227\n  strings[i]! = longest \u2227 \u2200 j < i, strings[j]!.length < longest.length));\n-- program termination\n\u2203 result, implementation strings = result \u2227\nspec result\n\ntheorem correctness\n(strings: List String)\n: problem_spec implementation strings\n:= by\n  sorry", "vc-postamble": "-- #test implementation [\"a\", \"b\", \"c\"] = some \"a\"\n-- #test implementation [\"a\", \"bb\", \"ccc\"] = some \"ccc\"\n-- #test implementation [] = none", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_120", "vc-description": "/- \nfunction_signature: \"def maximum(arr: List[int], k: int) -> List[int]\"\ndocstring: |\n    Given an array arr of integers and a positive integer k, return a sorted list of length\n    k with the maximum k numbers in arr.\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\ntest_cases:\n  - input: [[2, 4, 3, 1], 3]\n    expected_output: [2, 3, 4]\n  - input: [[2, 4, 3, 1], 0]\n    expected_output: []\n\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (arr: List Int) (k: Int) : List Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: List Int \u2192 Int \u2192 List Int)\n-- inputs\n(arr: List Int)\n(k: Int) :=\n-- spec\nlet spec (result: List Int) :=\n    1 \u2264 arr.length \u2192 arr.length \u2264 1000 \u2192 arr.all (fun x => -1000 \u2264 x \u2227 x \u2264 1000) \u2192 0 \u2264 k \u2192 k \u2264 arr.length \u2192\n    result.length = k \u2227\n    result.Sorted (\u00b7 \u2264 \u00b7) \u2227\n    \u2200 x \u2208 result, x \u2208 arr \u2227\n\n    let result_reversed := result.reverse; -- reverse to get last element\n    match result_reversed with\n    | [] => k = 0\n    | max :: remaining_reversed =>\n      arr.max? = some max \u2227\n      impl (arr.erase max) (k-1) = (remaining_reversed.reverse)\n-- program terminates\n\u2203 result, impl arr k = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(arr: List Int)\n(k: Int)\n: problem_spec implementation arr k  := by\n  sorry", "vc-postamble": "-- #test implementation [2, 4, 3, 1] 3 = [2, 3, 4]\n-- #test implementation [2, 4, 3, 1] 0 = []", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_121", "vc-description": "/- \nfunction_signature: \"def solution(lst: List[int]) -> int\"\ndocstring: |\n    Given a non-empty list of integers, return the sum of all of the odd elements that\n    are in even positions.\ntest_cases:\n  - input: [5, 8, 7, 1]\n    expected_output: 12\n  - input: [3, 3, 3, 3, 3]\n    expected_output: 9\n  - input: [30, 13, 24, 321]\n    expected_output: 0\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (lst: List Int) : Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: List Int \u2192 Int)\n-- inputs\n(lst: List Int) :=\n-- spec\nlet spec (_ : Int) :=\nlst \u2260 [] \u2192 \u2200 i,  i < lst.length \u2227 i % 2 = 0 \u2192\n  (lst.length = 1 \u2192 impl lst = 0) \u2227\n  (i + 1 < lst.length \u2192\n    (lst[i + 1]! % 2 = 1 \u2192\n    impl (lst.drop i) = lst[i + 1]! + (if i + 2 < lst.length then impl (lst.drop (i+2)) else 0)) \u2227\n    (lst[i + 1]! % 2 = 0 \u2192\n    impl (lst.drop i) = if i + 2 < lst.length then impl (lst.drop (i+2)) else 0)\n  )\n-- program terminates\n\u2203 result, impl lst = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(lst: List Int)\n: problem_spec implementation lst := by\n  sorry", "vc-postamble": "-- #test implementation ([5, 8, 7, 1]: List Int) = 12\n-- #test implementation ([3, 3, 3, 3, 3]: List Int) = 9\n-- #test implementation ([30, 13, 24, 321]: List Int) = 0", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_122", "vc-description": "/- \nfunction_signature: \"def add_elements(arr: List[int], k: int) -> int\"\ndocstring: |\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\ntest_cases:\n  - input: [[111, 21, 3, 4000, 5, 6, 7, 8, 9], 4]\n    expected_output: 24\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (arr: List Int) (k: Nat) : Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: List Int \u2192 Nat \u2192 Int)\n-- inputs\n(arr: List Int)\n(k: Nat) :=\n-- spec\nlet spec (result: Int) :=\n  1 \u2264 arr.length \u2192 arr.length \u2264 100 \u2192 1 \u2264 k \u2192 k \u2264 arr.length \u2192\n  ((\u2200 i, 0 \u2264 i \u2227 i < k \u2192 \u00ac(arr[i]! \u2264 99 \u2227 -99 \u2264 arr[i]!)) \u2192 result = 0) \u2227\n  \u2203 i, i < k\n    \u2227 arr[i]! \u2264 99 \u2227 -99 \u2264 arr[i]!\n    \u2227 result = arr[i]! + (if i = 0 then 0 else impl arr i)\n    \u2227 \u2200 i', i < i' \u2227 i' < k \u2192 \u00ac(arr[i']! \u2264 99 \u2227 -99 \u2264 arr[i']!)\n-- program termination\n\u2203 result, impl arr k = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(arr: List Int)\n(k: Nat)\n: problem_spec implementation arr k := by\n  sorry", "vc-postamble": "-- #test implementation ([111, 21, 3, 4000, 5, 6, 7, 8, 9]: List Int) 4 = 24", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_123", "vc-description": "/- \nfunction_signature: \"def get_odd_collatz (n: int) -> List[int]\"\ndocstring: |\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\ntest_cases:\n  - input: 5\n    expected_output: [1, 5]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap\n\n/--\nname: collatz_reachable\nuse: |\n  Helper to check if a natural number m is reachable in the Collatz sequence starting at n.\nproblems:\n  - 123\n-/\ndef collatz_reachable (n m : Nat) : Prop :=\n  \u2203 k, Nat.iterate (fun x => if x % 2 = 0 then x / 2 else x * 3 + 1) k n = m", "vc-helpers": "", "vc-definitions": "def implementation (n: Nat) : List Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: Nat \u2192 List Nat)\n-- inputs\n(n: Nat) :=\n-- spec\nlet spec (result: List Nat) :=\nn > 0 \u2192\nresult.Sorted (\u00b7 < \u00b7) \u2227\n\u2200 m, m \u2208 result \u2194 Odd m \u2227 collatz_reachable n m -- m is reachable from starting point n\n-- program termination\n\u2203 result, impl n = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(n: Nat)\n: problem_spec implementation n := by\n  sorry", "vc-postamble": "-- #test implementation 5 = [1, 5]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_124", "vc-description": "/- \nfunction_signature: \"def valid_date(date: str) -> Bool\"\ndocstring: |\n    You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\ntest_cases:\n  - input: \"03-11-2000\"\n    expected_output: True\n  - input: \"15-01-2012\"\n    expected_output: False\n  - input: \"04-0-2040\"\n    expected_output: False\n  - input: \"06-04-2020\"\n    expected_output: True\n  - input: \"06/04/2020\"\n    expected_output: False\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (date: String) : Bool :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: String \u2192 Bool)\n-- inputs\n(date: String) :=\n-- spec\nlet spec (result: Bool) :=\n  result = true \u2194\n    \u2203 m1 m2 sep1 d1 d2 sep2 y1 y2 y3 y4 : Char,\n    date = String.mk [m1, m2, sep1, d1, d2, sep2, y1, y2, y3, y4] \u2227\n    sep1 = '-' \u2227 sep2 = '-' \u2227\n    [m1, m2, d1, d2, y1, y2, y3, y4].all Char.isDigit \u2227\n    let month := (String.mk [m1, m2]).toNat!;\n    let day := (String.mk [d1, d2]).toNat!;\n    1 \u2264 month \u2227 month \u2264 12 \u2227\n    (month \u2208 ({4, 6, 9, 11}: List Nat) \u2192 1 \u2264 day \u2227 day \u2264 30) \u2227\n    (month \u2208 ({1, 3, 5, 7, 8, 10, 12}: List Nat) \u2192 1 \u2264 day \u2227 day \u2264 31) \u2227\n    (month \u2208 ({2}: List Nat) \u2192 1 \u2264 day \u2227 day \u2264 29)\n-- program terminates\n\u2203 result, impl date = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(date: String)\n: problem_spec implementation date := by\n  sorry", "vc-postamble": "-- #test implementation \"03-11-2000\" = true\n-- #test implementation \"15-01-2012\" = false\n-- #test implementation \"04-0-2040\" = false\n-- #test implementation \"06-04-2020\" = true\n-- #test implementation \"06/04/2020\" = false", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_125", "vc-description": "/- \nfunction_signature: \"def minPath(grid, k)\"\ndocstring: |\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\ntest_cases:\n  - input: [[[1,2,3], [4,5,6], [7,8,9]], 3]\n    expected_output: [1,2,3]\n  - input: [ [5,9,3], [4,1,6], [7,8,2], 1]\n    expected_output: [1]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (grid: List (List Nat)) (k: Nat) : List Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: List (List Nat) \u2192 Nat \u2192 List Nat)\n-- inputs\n(grid: List (List Nat))\n(k: Nat) :=\n-- spec\nlet lexographically_less (a b: List Nat) : Prop :=\n  a.length = b.length \u2227 a.length = k \u2227\n  (\u2203 i, i < k \u2227 a[i]! < b[i]! \u2227\n  (\u2200 j, j < i \u2192 a[j]! = b[j]!));\nlet rec is_valid_path (k': Nat) (path: List Nat) (grid: List (List Nat)) : Prop :=\n  let n := grid.length;\n  path.length = k' \u2192\n  (\u2203 i j,\n    (i < n \u2227 j < n \u2227 path[0]! = (grid[i]!)[j]!) \u2227\n    (1 < path.length \u2192\n      ( \u2203 i' j', i' < n \u2227 j' < n \u2227\n        (path[1]! = (grid[i']!)[j']!) \u2227\n        ((abs ((i: Int) - (i': Int)) = 1 \u2227 j = j') \u2228\n         (abs ((j: Int) - (j': Int)) = 1 \u2227 i = i'))) \u2227\n      (is_valid_path (k' - 1) (path.drop 1) grid))\n  );\nlet spec (result: List Nat) :=\n  let n := grid.length;\n  (\u2200 i, i < n \u2192 (grid[i]!).length = n) \u2192\n  (\u2200 i j, i < n \u2192 j < n \u2194 ((grid[i]!)[j]!) \u2208 [1, n^2]) \u2192\n  is_valid_path k result grid \u2227 (\u2200 path, is_valid_path k path grid \u2192 lexographically_less result path);\n-- program terminates\n\u2203 result, impl grid k = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(grid: List (List Nat))\n(k: Nat)\n: problem_spec implementation grid k := by\n  sorry", "vc-postamble": "-- #test implementation [[1,2,3], [4,5,6], [7,8,9]] 3 = [1,2,3]\n-- #test implementation [[5,9,3], [4,1,6], [7,8,2]] 1 = [1]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_126", "vc-description": "/- \nfunction_signature: \"def is_sorted(lst: List[int]) -> Bool\"\ndocstring: |\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\ntest_cases:\n  - input: [5]\n    expected_output: True\n  - input: [1, 2, 3, 4, 5]\n    expected_output: True\n  - input: [1, 3, 2, 4, 5]\n    expected_output: False\n  - input: [1, 2, 3, 4, 5, 6]\n    expected_outupt: True\n  - input: [1, 2, 3, 4, 5, 6, 7]\n    expected_output: True\n  - input: [1, 3, 2, 4, 5, 6, 7]\n    expected_output: False\n  - input: [1, 2, 2, 3, 3, 4]\n    expected_output: True\n  - input: [1, 2, 2, 2, 3, 4]\n    expected_output: False\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (lst: List Int) : Bool :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: List Int \u2192 Bool)\n-- inputs\n(lst: List Int) :=\n-- spec\nlet sorted_ascending := lst.Sorted (\u00b7 \u2264 \u00b7);\nlet ms := Multiset.ofList lst;\nlet multiple_duplicates := \u2203 i, i \u2208 lst \u2227 2 < ms.count i;\nlet spec (res: Bool) :=\n  res \u2192 sorted_ascending \u2227\n  res \u2192 \u00acmultiple_duplicates \u2227\n  multiple_duplicates \u2192 \u00acres \u2227\n  \u00acsorted_ascending \u2192 \u00acres;\n-- program terminates\n\u2203 result, impl lst = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(lst: List Int)\n: problem_spec implementation lst := by\n  sorry", "vc-postamble": "-- #test implementation [5] = true\n-- #test implementation [1, 2, 3, 4, 5] = true\n-- #test implementation [1, 3, 2, 4, 5] = false\n-- #test implementation [1, 2, 3, 4, 5, 6] = true\n-- #test implementation [1, 2, 3, 4, 5, 6, 7] = true\n-- #test implementation [1, 3, 2, 4, 5, 6, 7] = false\n-- #test implementation [1, 2, 2, 3, 3, 4] = true\n-- #test implementation [1, 2, 2, 2, 3, 4] = false", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_127", "vc-description": "/- \nfunction_signature: \"def intersection(interval1: Tuple[Int, Int], interval2: Tuple[Int, Int]) -> str\"\ndocstring: |\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\ntest_cases:\n  - input: [(1, 2), (2, 3)]\n    expected_output: \"NO\"\n  - input: [(-1, 1), (0, 4)]\n    expected_output: \"NO\"\n  - input: [(-3, -1), (-5, 5)]\n    expected_output: \"YES\"\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (interval1: Int \u00d7 Int) (interval2: Int \u00d7 Int) : String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: Int \u00d7 Int \u2192 Int \u00d7 Int \u2192 String)\n-- inputs\n(interval1: Int \u00d7 Int)\n(interval2: Int \u00d7 Int) :=\n-- spec\nlet spec (result: String) :=\nlet (s1, e1) := interval1;\nlet (s2, e2) := interval2;\ns1 \u2264 e1 \u2192 s2 \u2264 e2 \u2192\nlet intersectionStart := max s1 s2;\nlet intersectionEnd := min e1 e2;\nlet hasIntersection := intersectionStart \u2264 intersectionEnd;\nlet isPrime := Nat.Prime (intersectionEnd - intersectionStart).toNat;\n(result = \"YES\" \u2194 hasIntersection \u2227 isPrime) \u2227\n(result = \"NO\" \u2194 \u00achasIntersection \u2228 \u00acisPrime) \u2227\n(result = \"YES\" \u2228 result = \"NO\")\n-- program terminates\n\u2203 result, impl interval1 interval2 = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(interval1: Int \u00d7 Int)\n(interval2: Int \u00d7 Int)\n: problem_spec implementation interval1 interval2 := by\n  sorry", "vc-postamble": "-- #test implementation (1, 2) (2, 3) = \"NO\"\n-- #test implementation (-1, 1) (0, 4) = \"NO\"\n-- #test implementation (-3, -1) (-5, 5) = \"YES\"", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_128", "vc-description": "/- \nfunction_signature: \"def prod_signs(arr: List[int]) -> Optional[int]\"\ndocstring: |\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\ntest_cases:\n  - input: [1, 2, 2, -4]\n    expected_output: -9\n  - input: [0, 1]\n    expected_output: 0\n  - input: []\n    expected_output: None\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (arr: List Int) : Option Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: List Int \u2192 Option Int)\n-- inputs\n(arr: List Int) :=\n-- spec\nlet spec (result: Option Int) :=\n  match result with\n  | none => arr = []\n  | some result =>\n  let magnitude_sum := (arr.map (fun x => Int.ofNat x.natAbs)).sum;\n    let neg_count_odd := (arr.filter (fun x => x < 0)).length % 2 = 1;\n    let has_zero := 0 \u2208 arr;\n    (result < 0 \u2194 (neg_count_odd \u2227 \u00achas_zero)\n      \u2227 result = magnitude_sum * -1) \u2227\n    (0 < result \u2194 (\u00acneg_count_odd \u2227 \u00achas_zero)\n      \u2227 result = magnitude_sum) \u2227\n    (result = 0 \u2194 has_zero)\n-- program terminates\n\u2203 result, impl arr = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(arr: List Int)\n: problem_spec implementation arr := by\n  sorry", "vc-postamble": "-- #test implementation ([1, 2, 2, -4]: List Int) = (-9: Int)\n-- #test implementation ([0, 1]: List Int) = (0: Int)\n-- #test implementation ([]: List Int) = none", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_129", "vc-description": "/- \nfunction_signature: \"def split_words(txt)\"\ndocstring: |\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\ntest_cases:\n  - input: \"Hello world!\"\n    expected_output: [\"Hello\", \"world!\"]\n  - input: \"Hello,world!\"\n    expected_output: [\"Hello\", \"world!\"]\n  - input: \"abcdef\"\n    expected_output: 3\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (text: String) : Option (List String) \u00d7 Option Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n-- return a tuple of Option (List String) and Option Nat\n(impl: String \u2192 Option (List String) \u00d7 Option Nat)\n-- inputs\n(text: String) :=\n-- spec\nlet spec (result: Option (List String) \u00d7 Option Nat) :=\n  -- both cannot be None\n  let words := result.fst;\n  let ord := result.snd;\n  0 < text.length \u2192\n  \u00ac (words = none \u2227 ord = none) \u2227\n    (words = none \u2194 \u2200 ch, ch \u2208 text.toList \u2192  (ch = ',' \u2228 ch = ' ')) \u2227\n    (\u2200 num, ord = some num \u2192 (text.get! 0).toNat = num) \u2227\n    (\u2200 lst, words = some lst \u2192 \u2200 i, i < lst.length \u2192\n      let str := lst[i]!;\n      text.containsSubstr str) \u2227\n    (\u2200 lst, words = some lst \u2192\n      let first := text.takeWhile (fun c => c \u2260 ',' \u2227 c \u2260 ' ');\n      let nextImpl := impl (text.drop (first.length + 1));\n      let nextWords := nextImpl.fst;\n      (\u2203 nextLst, nextWords = some nextLst \u2227\n        lst = [first] ++ nextLst))\n-- program terminates\n\u2203 result, impl text = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(text: String)\n: problem_spec implementation text := by\n  sorry", "vc-postamble": "-- #test implementation \"Hello world!\" = (some [\"Hello\", \"world!\"], none)\n-- #test implementation \"Hello,world!\" = (some [\"Hello\", \"world!\"], none)\n-- #test implementation \"abcdef\" = (none, some 3)", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_13", "vc-description": "/- \nfunction_signature: \"def greatest_common_divisor(a: int, b: int) -> int\"\ndocstring: |\n    Return a greatest common divisor of two integers a and b\ntest_cases:\n  - input:\n      - 25\n      - 15\n    expected_output: 5\n  - input:\n      - 3\n      - 5\n    expected_output: 1\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (a b: Int) : Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Int \u2192 Int \u2192 Int)\n-- inputs\n(a b: Int) :=\n-- spec\nlet spec (result: Int) :=\n(result \u2223 a) \u2227\n(result \u2223 b) \u2227\n(\u2200 (d': Int),\n(d' > 0) \u2192 (d' \u2223 a) \u2192 (d' \u2223 b) \u2192\nd' \u2264 result);\n-- program termination\n\u2203 result, implementation a b = result \u2227\nspec result\n\ntheorem correctness\n(a b: Int)\n: problem_spec implementation a b\n:= by\n  sorry", "vc-postamble": "-- #test implementation 25 15 = 5\n-- #test implementation 3 5 = 1", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_130", "vc-description": "/- \nfunction_signature: \"def tri(n: int) -> List[int]\"\ndocstring: |\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\ntest_cases:\n  - input: 3\n    expected_output: [1, 3, 2, 8]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (n: Nat) : List Int:=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: Nat \u2192 List Int)\n-- inputs\n(n: Nat) :=\n-- spec\nlet spec (result: List Int) :=\n  0 < result.length \u2227\n  result.length = n \u2227\n  let i := result.length-1;\n  (i = 0 \u2192 result[0]! = 1) \u2227 -- base case\n  (i = 1 \u2192 result[1]! = 3) \u2227\n  (2 \u2264 i \u2227 i % 2 = 0 \u2192 result[i]! = 1 + i / 2) \u2227\n  (2 \u2264 i \u2227 i % 2 = 1 \u2192 result[i]! = result[i-2]! + result[i-1]! + (1 + (i+1) / 2)) \u2227\n  if i = 0 then true else result.take i = impl (i-1)\n-- program termination\n\u2203 result, impl n = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(n: Nat)\n: problem_spec implementation n := by\n  sorry", "vc-postamble": "-- #test implementation 3 = [1, 3, 2, 8]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_131", "vc-description": "/- \nfunction_signature: \"def digits(n: int) -> int\"\ndocstring: |\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\ntest_cases:\n  - input: 1\n    expected_output: 1\n  - input: 4\n    expected_output: 0\n  - input: 235\n    expected_output: 15\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (n: Nat) : Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: Nat \u2192 Nat)\n-- inputs\n(n: Nat) :=\n-- spec\nlet spec (result: Nat) :=\n  0 < n \u2192\n  (n < 10 \u2192 (n % 2 = 1 \u2192 result = n) \u2227 (n % 2 = 0 \u2192 result = 0)) \u2227\n  (10 \u2264 n \u2192\n    let digit := n % 10;\n    let rest := n / 10;\n    (digit % 2 = 1 \u2192\n      if (Nat.toDigits 10 rest).all (fun x => Even (x.toNat - '0'.toNat))\n        then impl rest = 0 \u2227 result = digit\n      else\n        result = impl rest * digit)\n    \u2227\n    (digit % 2 = 0 \u2192\n      result = impl rest))\n-- program termination\n\u2203 result, impl n = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(n: Nat)\n: problem_spec implementation n := by\n  sorry", "vc-postamble": "-- #test implementation 1 = 1\n-- #test implementation 4 = 0\n-- #test implementation 235 = 15", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_132", "vc-description": "/- \nfunction_signature: \"def is_nested(string: str) -> Bool\"\ndocstring: |\n    Create a function that takes a string as input which contains only parentheses.\n    The function should return True if and only if there is a valid subsequence of parentheses\n    where at least one parenthesis in the subsequence is nested.\ntest_cases:\n  - input: '(())'\n    expected_output: True\n  - input: '()))))))((((()'\n    expected_output: False\n  - input: '()()'\n    expected_output: False\n  - input: '()'\n    expected_output: False\n  - input: '(()())'\n    expected_output: True\n  - input: '(())(('\n    expected_output: True\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap\n\n/--\nname: string_eq_iff_data_eq\nuse: |\n  Helper function to prove that two strings are equal if their data is equal.\nproblems: []\nsample_problems:\n  - 0\n-/\ndef string_eq_iff_data_eq (s1: String) (s2: String)\n: s1.data = s2.data \u2194 s1 = s2 :=\nby\n  apply Iff.intro\n  intro h\n  cases s1\n  cases s2\n  simp at h\n  simp [h]\n  intro h\n  apply String.data_eq_of_eq\n  exact h\n\n/--\nname: balanced_paren_non_computable\nuse: |\n  Non-computable definition to check if a string is balanced with respect to parentheses.\nproblems:\n  - 1\n  - 6\n  - 132\nsample_problems:\n  - 0\n-/\ndef balanced_paren_non_computable\n(paren_string: String) (bracket_type_left : Char) (bracket_type_right: Char): Prop\n:=\nlet chars := paren_string.toList;\n(\u2200 (i : \u2115), i \u2264 chars.length \u2192 ((chars.take i).count bracket_type_right) \u2264 ((chars.take i).count bracket_type_left)) \u2227\n(chars.count bracket_type_left = chars.count bracket_type_right)\n\n/--\nname: count_max_paren_depth_helper\nuse: |\n  Helper to count the maximum depth of parentheses in a string.\nproblems:\n  - 6\n  - 132\n-/\ndef count_max_paren_depth_helper\n(paren_string: String) (num_open: Int) (max_depth: Nat): Nat :=\n-- Recursively count the maximum depth of parentheses\nif paren_string.isEmpty then\n  max_depth\nelse\n  let c := paren_string.get! 0\n  if c == '(' then\n    let new_num_open := num_open + 1\n    count_max_paren_depth_helper (paren_string.drop 1) (new_num_open) (max_depth.max new_num_open.toNat)\n  else if c == ')' then\n    count_max_paren_depth_helper (paren_string.drop 1) (num_open - 1) max_depth\n  else\n    count_max_paren_depth_helper (paren_string.drop 1) num_open max_depth\ntermination_by paren_string.length\ndecreasing_by\n  all_goals\n  {\n    rename_i h_non_empty_string\n    rw [String.drop_eq, String.length]\n    simp\n    rw [String.isEmpty_iff] at h_non_empty_string\n    by_cases h_paren_nil : paren_string.length \u2264 0\n    rw [Nat.le_zero_eq] at h_paren_nil\n    rw [\u2190string_eq_iff_data_eq] at h_non_empty_string\n    have h_temp : \"\".data = [] := by simp\n    rw [h_temp] at h_non_empty_string\n    rw [String.length] at h_paren_nil\n    rw [List.length_eq_zero_iff] at h_paren_nil\n    contradiction\n    have h_temp : paren_string.length > 0 := by linarith\n    assumption\n  }\n\n/--\nname: count_max_paren_depth\nuse: |\n  Function to count the maximum depth of parentheses in a string.\nproblems:\n  - 6\n  - 132\n-/\ndef count_max_paren_depth\n(paren_string: String): Nat :=\ncount_max_paren_depth_helper paren_string 0 0\n\n/--\nname: is_subsequence\nuse: |\n  Helper to check if List Char xs is a subsequence of List Char ys.\nproblems:\n  - 132\n-/\ndef is_subsequence (xs ys : List Char) : Bool :=\n  match xs, ys with\n  | [], _ => true\n  | _, [] => false\n  | x::xs', y::ys' =>\n      if x = y then is_subsequence xs' ys' else is_subsequence xs ys'", "vc-helpers": "", "vc-definitions": "def implementation (lst: String) : Bool :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: String \u2192 Bool)\n-- inputs\n(string: String) :=\n-- spec\nlet spec (result: Bool) :=\nstring.toList.all (fun x => x = '(' \u2228 x = ')') \u2192\nresult = true \u2194\n  \u2203 x : String,\n    is_subsequence x.toList string.toList \u2227\n    balanced_paren_non_computable x '(' ')' \u2227\n    2 \u2264 count_max_paren_depth x\n-- program termination\n\u2203 result, impl string = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(string: String)\n: problem_spec implementation string := by\n  sorry", "vc-postamble": "-- #test implementation \"(())\" = true\n-- #test implementation \"()))))))((((()\" = false\n-- #test implementation \"()()\" = false\n-- #test implementation \"()\" = false\n-- #test implementation \"(()())\" = true\n-- #test implementation \"(())((\" = true", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_133", "vc-description": "/- \nfunction_signature: \"def sum_squares(lst: List[float]) -> int\"\ndocstring: |\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\ntest_cases:\n  - input: [1, 2, 3]\n    expected_output: 14\n  - input: [1, 4, 9]\n    expected_output: 98\n  - input: [1, 3, 5, 7]\n    expected_output: 84\n  - input: [1.4, 4.2, 0]\n    expected_output: 29\n  - input: [-2.4, 1, 1]\n    expected_output: 6\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (lst: List Rat) : Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: List Rat \u2192 Int)\n-- inputs\n(lst: List Rat) :=\n-- spec\nlet spec (result: Int) :=\n  (lst = [] \u2192 result = 0) \u2227\n  (lst != [] \u2192 0 \u2264 result - lst[0]!.ceil^2 \u2227 (impl (lst.drop 1) = (result - lst[0]!.ceil^2)))\n-- program termination\n\u2203 result, impl lst = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(lst: List Rat)\n: problem_spec implementation lst := by\n  sorry", "vc-postamble": "-- #test implementation [1, 2, 3] = 14\n-- #test implementation [1, 4, 9] = 98\n-- #test implementation [1, 3, 5, 7] = 84\n-- #test implementation [1.4, 4.2, 0] = 29\n-- #test implementation [-2.4, 1, 1] = 6", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_134", "vc-description": "/- \nfunction_signature: \"def check_if_last_char_is_a_letter(txt: str) -> Bool\"\ndocstring: |\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\ntest_cases:\n  - input: \"apple pie\"\n    expected_output: False\n  - input: \"apple pi e\"\n    expected_output: True\n  - input: \"apple pi e \"\n    expected_output: False\n  - input: \"\"\n    expected_output: False\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (txt: String) : Bool :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: String \u2192 Bool)\n-- inputs\n(txt: String) :=\n-- spec\nlet spec (result: Bool) :=\n  let words := txt.splitOn \" \";\n  match words with\n  | [] => result = False\n  | [last_word] => (result \u2194 last_word.length = 1 \u2227 (let diff := (last_word.get 0).toLower.toNat - 'a'.toNat; 0 \u2264 diff \u2227 diff \u2264 25))\n  | _::tail => result \u2194 (let tail_txt := String.join tail; impl tail_txt);\n-- program terminates\n\u2203 result, impl txt = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(txt: String)\n: problem_spec implementation txt := by\n  sorry", "vc-postamble": "-- #test implementation \"apple pie\" = false\n-- #test implementation \"apple pi e\" = true\n-- #test implementation \"apple pi e \" = false\n-- #test implementation \"\" = false", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_135", "vc-description": "/- \nfunction_signature: \"def can_arrange(arr: List[int]) -> int\"\ndocstring: |\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\ntest_cases:\n  - input: [1, 2, 4, 3, 5]\n    expected_output: 3\n  - input: [1, 2, 3]\n    expected_output: -1\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (arr: List Int) : Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: List Int \u2192 Int)\n-- inputs\n(arr: List Int) :=\n-- spec\nlet spec (result: Int) :=\n  \u00acarr.any (fun x => 1 < arr.count x) \u2192\n  (arr.length = 0 \u2228 arr.length = 1 \u2192 result = -1) \u2227\n  (1 < arr.length \u2192\n    let last := arr.length-1;\n    let i := if arr[last]! < arr[last-1]! then Int.ofNat last else -1;\n    result = max (impl (arr.take last)) i);\n-- program termination\n\u2203 result, impl arr = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(arr: List Int)\n: problem_spec implementation arr := by\n  sorry", "vc-postamble": "-- #test implementation [1, 2, 4, 3, 5] = 3\n-- #test implementation [1, 2, 3] = -1", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_136", "vc-description": "/- \nfunction_signature: \"def largest_smallest_integers(lst: List[int]) -> Tuple[ Optional[Int], Optional[Int] ]\"\ndocstring: |\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\ntest_cases:\n  - input: [2, 4, 1, 3, 5, 7]\n    expected_output: (None, 1)\n  - input: []\n    expected_output: (None, None)\n  - input: [0]\n    expected_output: (None, None)\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (lst: List Int) : (Option Int \u00d7 Option Int) :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: List Int \u2192 Option Int \u00d7 Option Int)\n-- inputs\n(lst: List Int) :=\n-- spec\nlet spec (result: Option Int \u00d7 Option Int) :=\n  let (a, b) := result;\n  (match a with\n  | none => \u00ac(\u2203 i, i \u2208 lst \u2227 i < 0)\n  | some a => a < 0 \u2227 a \u2208 lst \u2227 \u2200 i, i \u2208 lst \u2227 i < 0 \u2192 i \u2264 a) \u2227\n  (match b with\n  | none => \u00ac(\u2203 i, i \u2208 lst \u2227 0 < i)\n  | some b => 0 < b \u2227 b \u2208 lst \u2227 \u2200 i, i \u2208 lst \u2227 0 < i \u2192 b \u2264 i)\n-- program termination\n\u2203 result, impl lst = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(lst: List Int)\n: problem_spec implementation lst := by\n  sorry", "vc-postamble": "-- #test implementation [2, 4, 1, 3, 5, 7] = (none, some 1)\n-- #test implementation [] = (none, none)\n-- #test implementation [0] = (none, none)", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_138", "vc-description": "/- \nfunction_signature: \"def is_equal_to_sum_even(n: int) -> Bool\"\ndocstring: |\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\ntest_cases:\n  - input: 4\n    expected_output: False\n  - input: 6\n    expected_output: False\n  - input: 8\n    expected_output: True\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (n: Int) : Bool :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: Int \u2192 Bool)\n-- inputs\n(n: Int) :=\n-- spec\nlet spec (result: Bool) :=\n  let sum_exists := \u2203 a b c d : Nat,\n    Even a \u2227\n    Even b \u2227\n    Even c \u2227\n    Even d \u2227\n    (a + b + c + d = n);\n  result = true \u2194 sum_exists\n-- program termination\n\u2203 result, impl n = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(n: Int)\n: problem_spec implementation n := by\n  sorry", "vc-postamble": "-- #test implementation 4 = false\n-- #test implementation 6 = false\n-- #test implementation 8 = true", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_139", "vc-description": "/- \nfunction_signature: \"def special_factorial(n: int) -> int\"\ndocstring: |\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0. Please write a function that computes the Brazilian factorial.\ntest_cases:\n  - input: 4\n    expected_output: 288\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (n: Nat) : Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: Nat \u2192 Nat)\n-- inputs\n(n: Nat) :=\n-- spec\nlet spec (result: Nat) :=\nlet factorial := Nat.factorial n;\n(0 < n \u2192 result / factorial = impl (n - 1)) \u2227\n(n = 0 \u2192 result = 1);\n-- program termination\n\u2203 result, impl n = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(n: Nat)\n: problem_spec implementation n := by\n  sorry", "vc-postamble": "-- #test implementation 4 = 288", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_14", "vc-description": "/- \nfunction_signature: \"def all_prefixes(string: str) -> List[str]\"\ndocstring: |\n    Return list of all prefixes from shortest to longest of the input string\ntest_cases:\n  - input: \"abc\"\n    expected_output:\n      - \"a\"\n      - \"ab\"\n      - \"abc\"\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (string: String) : List String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: String \u2192 List String)\n-- inputs\n(string: String) :=\n-- spec\nlet spec (result: List String) :=\nresult.length = string.length \u2227\n\u2200 i, i < result.length \u2192\nresult[i]! = string.take (i + 1);\n-- program termination\n\u2203 result, implementation string = result \u2227\nspec result\n\ntheorem correctness\n(string: String)\n: problem_spec implementation string\n:= by\n  sorry", "vc-postamble": "-- #test implementation \"abc\" = [\"a\", \"ab\", \"abc\"]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_140", "vc-description": "/- \nfunction_signature: \"def fix_spaces(text: str) -> str\"\ndocstring: |\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\ntest_cases:\n  - input: \"Example\"\n    expected_output: \"Example\"\n  - input: \"Example 1\"\n    expected_output: \"Example_1\"\n  - input: \" Example 2\"\n    expected_output: \"_Example_2\"\n  - input: \" Example   3\"\n    expected_output: \"_Example-3\"\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (text: String) : String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: String \u2192 String)\n-- inputs\n(text: String) :=\n-- spec\nlet spec (result: String) :=\n  (result = \"\" \u2192 text = \"\") \u2227\n  (result \u2260 \"\" \u2192 (\n    (\u2203 pref s, text = pref ++ s\n      \u2227 pref.length = 1\n      \u2227 pref \u2260 \" \"\n      \u2227 result = pref ++ impl s)\n    \u2228\n    (\u2203 pref s : String, text = pref ++ s \u2227 pref \u2260 \"\" \u2227 (\u2200 ch, ch \u2208 pref.toList \u2192 ch = ' ')\n      \u2227 let k := pref.length;\n        (k \u2264 2 \u2192 result = (String.replicate k '_') ++ (impl (text.drop k)))\n      \u2227 (2 < k \u2192 result = \"-\" ++ (impl (text.drop k)))) )\n  )\n-- program termination\n\u2203 result, impl text = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(text: String)\n: problem_spec implementation text := by\n  sorry", "vc-postamble": "-- #test implementation \"Example\" = \"Example\"\n-- #test implementation \"Example 1\" = \"Example_1\"\n-- #test implementation \" Example 2\" = \"_Example_2\"\n-- #test implementation \" Example   3\" = \"_Example-3\"", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_141", "vc-description": "/- \nfunction_signature: \"def file_name_check(file_name: str) -> str\"\ndocstring: |\n    Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\ntest_cases:\n  - input: \"example.txt\"\n    expected_output: \"Yes\"\n  - input: \"1example.dll\"\n    expected_output: \"No\"\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (file_name : String) : String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: String \u2192 String)\n-- inputs\n(file_name : String) :=\n-- spec\nlet spec (result: String) :=\nlet valid := (file_name.toList.filter Char.isDigit).length \u2264 3 \u2227\n  (file_name.toList.filter (\u00b7 = '.')).length = 1 \u2227\n  \u2203 before after : String,\n    file_name = before ++ \".\" ++ after \u2227\n    before != \"\" \u2227\n    Char.isAlpha (before.get! 0) \u2227\n    (after = \"txt\" \u2228 after = \"exe\" \u2228 after = \"dll\")\n(result = \"Yes\" \u2194 valid) \u2227\n(result = \"No\" \u2194 \u00acvalid)\n\n-- program termination\n\u2203 result, impl file_name = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(file_name : String)\n: problem_spec implementation file_name := by\n  sorry", "vc-postamble": "-- #test implementation \"example.txt\" = \"Yes\"\n-- #test implementation \"1example.dll\" = \"No\"", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_142", "vc-description": "/- \nfunction_signature: \"def sum_squares(lst: List[int]) -> int\"\ndocstring: |\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\ntest_cases:\n  - input: [1, 2, 3]\n    expected_output: 6\n  - input: []\n    expected_output: 0\n  - input: [-1, -5, 2, -1, -5]\n    expected_output: -126\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (lst : List Int) : Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: List Int \u2192 Int)\n-- inputs\n(lst : List Int) :=\n-- spec\nlet spec (result : Int) :=\nlet last := lst.length-1;\n(lst = [] \u2192 result = 0) \u2227\n(lst \u2260 [] \u2227 last % 3 = 0 \u2192 result = lst[last]! ^ 2 + impl (lst.take last)) \u2227\n(lst \u2260 [] \u2227 last % 4 = 0 \u2227 last % 3 != 0 \u2192 result = lst[last]! ^ 3 + impl (lst.take last)) \u2227\n(lst \u2260 [] \u2227 last % 3 != 0 \u2227 last % 4 != 0 \u2192 result = lst[last]! + impl (lst.take last))\n-- program termination\n\u2203 result, impl lst = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(lst : List Int)\n: problem_spec implementation lst := by\n  sorry", "vc-postamble": "-- #test implementation [1, 2, 3] = 6\n-- #test implementation [] = 0\n-- #test implementation [-1, -5, 2, -1, -5] = -126", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_143", "vc-description": "/- \nfunction_signature: \"def words_in_sentence(sentence: str) -> str\"\ndocstring: |\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Constraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\ntest_cases:\n  - input: \"This is a test\"\n    expected_output: \"is\"\n  - input: \"lets go for swimming\"\n    expected_output: \"go for\"\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (sentence : String) : String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: String \u2192 String)\n-- inputs\n(sentence: String) :=\n-- spec\nlet spec (result: String) :=\nlet words := sentence.splitOn;\nlet result_words := result.splitOn;\n  1 \u2264 sentence.length \u2192 sentence.length \u2264 100 \u2192\n  sentence.all (fun x => Char.isAlpha x) \u2192\n  result_words.length \u2264 words.length \u2227\n  (\u2200 word \u2208 result_words, word \u2208 words \u2227 Nat.Prime word.length) \u2227\n  match result_words with\n  | [] => \u2200 word \u2208 words, \u00ac(Nat.Prime word.length)\n  | head :: tail => if Nat.Prime head.length \u2227 head = words[0]! then String.join tail = impl (String.join (words.drop 1))\n    else result = impl (String.join (words.drop 1))\n-- program termination\n\u2203 result, impl sentence = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(sentence : String)\n: problem_spec implementation sentence := by\n  sorry", "vc-postamble": "-- #test implementation \"This is a test\" = \"is\"\n-- #test implementation \"lets go for swimming\" = \"go for\"", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_144", "vc-description": "/- \nfunction_signature: \"def simplify(x: str, n: str) -> Bool\"\ndocstring: |\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\ntest_cases:\n  - input: [\"1/5\", \"5/1\"]\n    expected_output: True\n  - input: [\"1/6\", \"2/1\"]\n    expected_output: False\n  - input: [\"7/10\", \"10/2\"]\n    expected_output: False\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (x: String) (n: String) : Bool :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: String \u2192 String \u2192 Bool)\n-- inputs\n(x: String) (n: String) :=\n-- spec\nlet spec (result: Bool) :=\nlet fx := x.splitOn \"/\";\nlet fn := n.splitOn \"/\";\nfx.length = 2 \u2192 fn.length = 2 \u2192\nfx.all String.isNat \u2192 fn.all String.isNat \u2192\nlet p1 := fx[0]!.toNat!;\nlet q1 := fx[1]!.toNat!;\nlet p2 := fn[0]!.toNat!;\nlet q2 := fn[1]!.toNat!;\nq1 \u2260 0 \u2192 q2 \u2260 0 \u2192\n(result \u2194 (\u2203 k, k * p1 * p2 = q1 * q2))\n-- program termination\n\u2203 result, impl x n = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(x: String) (n: String)\n: problem_spec implementation x n := by\n  sorry", "vc-postamble": "-- #test implementation \"1/5\" \"5/1\" = True\n-- #test implementation \"1/6\" \"2/1\" = False\n-- #test implementation \"7/10\" \"10/2\" = False", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_145", "vc-description": "/- \nfunction_signature: \"def order_by_points(nums: List[int]) -> List[int]\"\ndocstring: |\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\ntest_cases:\n  - input: [1, 11, -1, -11, -12]\n    expected_output: [-1, -11, 1, -12, 11]\n  - input: []\n    expected_output: []\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap\n\n/--\nname: digit_sum\nuse: |\n  Helper to sum the digits of a number. If the number is negative, the\n  negative sign is treated as part of the first digit.\nproblems:\n  - 145\n-/\ndef digit_sum (n : Int) : Int :=\n  let ds := (toString n.natAbs).toList.map fun c => c.toNat - Char.toNat '0'\n  match ds with\n  | [] => 0\n  | d :: ds' =>\n    let tail := ds'.foldl (\u00b7 + \u00b7) 0\n    if n < 0 then Int.ofNat tail - Int.ofNat d\n    else Int.ofNat (d + tail)", "vc-helpers": "", "vc-definitions": "def implementation (nums: List Int) : List Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: List Int \u2192 List Int)\n-- inputs\n(nums: List Int) :=\n-- spec\nlet spec (result: List Int) :=\nList.Perm nums result \u2227\nmatch result with\n| [] => nums = []\n| head::tail =>\n  let head_sum := digit_sum head;\n  (\u2200 num \u2208 nums,\n    let sum := digit_sum num;\n    sum > head_sum \u2228\n   (sum = head_sum \u2227 nums.idxOf num \u2265 nums.idxOf head))\n  \u2227 impl (nums.erase head) = tail\n-- program termination\n\u2203 result, impl nums = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(nums: List Int)\n: problem_spec implementation nums := by\n  sorry", "vc-postamble": "-- #test implementation [1, 11, -1, -11, -12] = [-1, -11, 1, -12, 11]\n-- #test implementation [] = []", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_146", "vc-description": "/- \nfunction_signature: \"def specialFilter(nums: List[int]) -> int\"\ndocstring: |\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\ntest_cases:\n  - input: [15, -73, 14, -15]\n    expected_output: 1\n  - input: [33, -2, -3, 45, 21, 109]\n    expected_output: 2\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (nums: List Int) : Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: List Int \u2192 Int)\n-- inputs\n(nums: List Int) :=\n-- spec\nlet spec (result: Int) :=\nmatch nums with\n| [] => result = 0\n| head::tail =>\n  let first_digit := (toString head.natAbs).toList[0]!.toNat - Char.toNat '0';\n  let last_digit := head % 10;\n  let valid := head > 10 \u2227 Odd first_digit \u2227 Odd last_digit\n  if valid then result = 1 + impl tail else result = impl tail\n-- program termination\n\u2203 result, impl nums = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(nums: List Int)\n: problem_spec implementation nums := by\n  sorry", "vc-postamble": "-- #test implementation [15, -73, 14, -15] = 1\n-- #test implementation [33, -2, -3, 45, 21, 109] = 2", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_147", "vc-description": "/- \nfunction_signature: \"def get_max_triples(n: int) -> int\"\ndocstring: |\n    You are given a positive integer n. You have to create an integer array a of length n.\n    For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\ntest_cases:\n  - input: 5\n    expected_output: 1\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (n: Nat) : Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: Nat \u2192 Nat)\n-- inputs\n(n: Nat) :=\n-- spec\nlet spec (result: Nat) :=\n\u2203 (S : Finset (Nat \u00d7 Nat \u00d7 Nat)), S.card = result \u2227\n  \u2200 (triple: Nat \u00d7 Nat \u00d7 Nat),\n    let (i, j, k) := triple;\n    let a_i := i * i - i + 1;\n    let a_j := j * j - j + 1;\n    let a_k := k * k - k + 1;\n    (1 \u2264 i \u2227 i < j \u2227 j < k \u2227 k \u2264 n \u2227\n    (a_i + a_j + a_k) % 3 = 0)\n    \u2194 triple \u2208 S\n-- program termination\n\u2203 result, impl n = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(n: Nat)\n: problem_spec implementation n := by\n  sorry", "vc-postamble": "-- #test implementation 5 = 1", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_148", "vc-description": "/- \nfunction_signature: \"def bf(planet1: str, planet2: str) -> List[str]\"\ndocstring: |\n    There are eight planets in our solar system: the closest to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\ntest_cases:\n  - input: (\"Jupiter\", \"Neptune\")\n    expected_output: (\"Saturn\", \"Uranus\")\n  - input: (\"Earth\", \"Mercury\")\n    expected_output: (\"Venus\")\n  - input: (\"Mercury\", \"Uranus\")\n    expected_output: (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (planet1: String) (planet2: String) : List String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: String \u2192 String \u2192 List String)\n-- inputs\n(planet1: String)\n(planet2: String) :=\n-- spec\nlet spec (result: List String) :=\nlet planets := [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\nif planet1 \u2209 planets \u2228 planet2 \u2209 planets then\n  result = []\nelse\n  let index1 := planets.idxOf planet1;\n  let index2 := planets.idxOf planet2;\n  let minIdx := if index1 < index2 then index1 else index2;\n  let maxIdx := if index1 < index2 then index2 else index1;\n  (\u2200 str \u2208 result, str \u2208 planets) \u2227\n  (\u2200 planet \u2208 planets, planet \u2208 result \u2194\n    planets.idxOf planet < maxIdx \u2227\n    minIdx < planets.idxOf planet) \u2227\n  result.Sorted (fun a b => planets.idxOf a < planets.idxOf b)\n-- program termination\n\u2203 result, impl planet1 planet2 = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(planet1: String)\n(planet2: String)\n: problem_spec implementation planet1 planet2 := by\n  sorry", "vc-postamble": "-- #test implementation \"Jupiter\" \"Neptune\" = [\"Saturn\", \"Uranus\"]\n-- #test implementation \"Earth\" \"Mercury\" = [\"Venus\"]\n-- #test implementation \"Mercury\" \"Uranus\" = [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_149", "vc-description": "/- \nfunction_signature: \"def sorted_list_sum(lst: List[str]) -> List[str]\"\ndocstring: |\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\ntest_cases:\n  - input: [\"aa\", \"a\", \"aaa\"]\n    output: [\"aa\"]\n  - input: [\"ab\", \"a\", \"aaa\", \"cd\"]\n    output: [\"ab\", \"cd\"]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (lst: List String) : List String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: List String \u2192 List String)\n-- inputs\n(lst: List String) :=\n-- spec\nlet spec (result: List String) :=\nmatch result with\n| [] => \u2200 str \u2208 lst, Odd str.length\n| head::tail =>\n  Even head.length \u2227\n  (\u2200 str \u2208 lst,\n    Odd str.length \u2228\n    str.length > head.length \u2228\n    str.length = head.length \u2227 str \u2265 head)\n  \u2227 impl (lst.erase head) = tail\n-- program termination\n\u2203 result, impl lst = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(lst: List String)\n: problem_spec implementation lst := by\n  sorry", "vc-postamble": "-- #test implementation [\"aa\", \"a\", \"aaa\"] = [\"aa\"]\n-- #test implementation [\"ab\", \"a\", \"aaa\", \"cd\"] = [\"ab\", \"cd\"]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_15", "vc-description": "/- \nfunction_signature: \"def string_sequence(n: int) -> str\"\ndocstring: |\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\ntest_cases:\n  - input: 0\n    expected_output: \"0\"\n  - input: 5\n    expected_output: \"0 1 2 3 4 5\"\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (n: Nat) : String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Nat \u2192 String)\n-- inputs\n(n: Nat) :=\n-- spec\nlet spec (result: String) :=\nlet result_nums := result.splitOn \" \";\nresult_nums.length = n + 1 \u2227\n\u2200 i, i < n + 1 \u2192 result_nums[i]! = i.repr;\n-- program termination\n\u2203 result, implementation n = result \u2227\nspec result\n\ntheorem correctness\n(n: Nat)\n: problem_spec implementation n\n:= by\n  sorry", "vc-postamble": "-- #test implementation 0 = \"0\"\n-- #test implementation 5 = \"0 1 2 3 4 5\"", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_150", "vc-description": "/- \nfunction_signature: \"def x_or_y(int n, int x, int y) -> int\"\ndocstring: |\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\ntest_cases:\n  - input: [7, 34, 12]\n    expected_output: 34\n  - input: [15, 8, 5]\n    expected_output: 5\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (n x y: Int) : Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: Int \u2192 Int \u2192 Int \u2192 Int)\n-- inputs\n(n x y: Int) :=\n-- spec\nlet spec (result: Int) :=\n(result = x \u2194 Nat.Prime n.toNat) \u2227\n(result = y \u2194 (\u00ac Nat.Prime n.toNat \u2228 n \u2264 1))\n-- program terminates\n\u2203 result, impl n x y = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(n x y: Int)\n: problem_spec implementation n x y := by\n  sorry", "vc-postamble": "-- #test implementation 7 34 12 = 34\n-- #test implementation 15 8 5 = 5", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_151", "vc-description": "/- \nfunction_signature: \"def double_the_difference(numbers: List[float]) -> Int\"\ndocstring: |\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\ntest_cases:\n  - input: [1, 3, 2, 0]\n    expected_output: 10\n  - input: [-1. -2, 0]\n    expected_output: 0\n  - input: [9, -2]\n    expected_output: 81\n  - input: [0]\n    expected_output: 0\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (numbers: List Rat) : Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: List Rat \u2192 Int)\n-- inputs\n(numbers: List Rat) :=\nlet isEven (n : Rat) := n % 2 = 0;\nlet isNegative (n : Rat) := n < 0;\nlet isNotInteger (n : Rat) := \u00ac n.isInt;\n-- spec\nlet spec (result: Int) :=\n0 < numbers.length \u2192\n0 \u2264 result \u2227\nif numbers.length = 1\nthen result = if (isEven numbers[0]! \u2228 isNegative numbers[0]! \u2228 isNotInteger numbers[0]!) then (0 : Int) else numbers[0]!.floor ^ 2\nelse result = if (isEven numbers[0]! \u2228 isNegative numbers[0]! \u2228 isNotInteger numbers[0]!) then (0 : Int) else numbers[0]!.floor ^ 2 + impl numbers.tail\n-- program terminates\n\u2203 result, impl numbers = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(numbers: List Rat)\n: problem_spec implementation numbers := by\n  sorry", "vc-postamble": "-- #test implementation ([1, 3, 2, 0]: List Rat) = (10: Int)\n-- #test implementation ([-1, -2, 0]: List Int) = (0: Int)\n-- #test implementation ([9, -2]: List Int) = 81\n-- #test implementation ([0]: List Int) = 0", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_152", "vc-description": "/- \nfunction_signature: \"def compare(scores: List float, guesses: List float) -> List [float]\"\ndocstring: |\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    Note: to reviewer, the reason for not using |.| to get the absolute value is to avoid leaking the implementation.\ntest_cases:\n  - input: [[1,2,3,4,5,1], [1,2,3,4,2,-2]]\n    expected_output: [0,0,0,0,3,3]\n  - input: [[0,5,0,0,0,4], [4,1,1,0,0,-2]]\n    expected_output: [4,4,1,0,0,6]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (scores guesses: List Rat) : List Rat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: List Rat \u2192 List Rat \u2192 List Rat)\n-- inputs\n(scores guesses: List Rat) :=\n-- spec\nlet spec (result: List Rat) :=\n  result.length = scores.length \u2227\n  scores.length = guesses.length \u2227\n  \u2200 i, i < scores.length \u2192\n  if scores[i]! > guesses[i]! then result[i]! + guesses[i]! = scores[i]!\n  else result[i]! + scores[i]! = guesses[i]!\n-- program terminates\n\u2203 result, impl scores guesses = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(scores guesses: List Rat)\n: problem_spec implementation scores guesses := by\n  sorry", "vc-postamble": "-- #test implementation [1,2,3,4,5,1] [1,2,3,4,2,-2] = [0,0,0,0,3,3]\n-- #test implementation [0,5,0,0,0,4] [4,1,1,0,0,-2] = [4,4,1,0,0,6]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_153", "vc-description": "/- \nfunction_signature: \"def Strongest_Extension(class_name: String, extensions: List[String]) -> String\"\ndocstring: |\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\ntest_cases:\n  - input: ['my_class', ['AA', 'Be', 'CC']]\n    expected_output: 'my_class.AA'\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (class_name: String) (extensions: List String) : String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: String \u2192 List String \u2192 String)\n-- inputs\n(class_name: String)\n(extensions: List String) :=\nlet strength (extension: String) :=\n  let cap := (extension.toList.filter (fun c => c.isUpper)).length;\n  let sm := (extension.toList.filter (fun c => c.isLower)).length;\n  cap - sm;\n-- spec\nlet spec (result: String) :=\nlet last_pos := result.revPosOf '.';\n0 < extensions.length \u2227 extensions.all (fun x => 0 < x.length) \u2227 0 < class_name.length \u2192\n0 < result.length \u2227\nlast_pos.isSome \u2227\nlet class_name' := result.take (last_pos.get!).byteIdx;\nlet extension_name := result.drop ((last_pos.get!).byteIdx + 1);\nclass_name' = class_name \u2227\nextension_name \u2208 extensions \u2227\nlet strength_of_extensions := extensions.map (fun ext => strength ext);\n\u2203 j : Nat, j < extensions.length \u2227\n  extensions[j]! = extension_name \u2227\n  (\u2200 i : Nat, i < j \u2192 strength_of_extensions[i]! < strength_of_extensions[j]!)\n  \u2227 strength_of_extensions[j]! = strength_of_extensions.max?.get!;\n-- program terminates\n\u2203 result, impl class_name extensions = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(class_name: String)\n(extensions: List String)\n: problem_spec implementation class_name extensions := by\n  sorry", "vc-postamble": "-- #test implementation 'my_class', ['AA', 'Be', 'CC'] = 'my_class.AA'", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_154", "vc-description": "/- \nfunction_signature: \"def cycpattern_check(String a, String b) -> Bool\"\ndocstring: |\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word, else False\ntest_cases:\n  - input: [\"abcd\", \"abd\"]\n    expected_output: False\n  - input: [\"hello\", \"ell\"]\n    expected_output: True\n  - input: [\"whassup\", \"psus\"]\n    expected_output: False\n  - input: [\"abab\", \"baa\"]\n    expected_output: True\n  - input: [\"efef\", \"eeff\"]\n    expected_output: False\n  - input: [\"himenss\", \"simen\"]\n    expected_output: True\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (a b: String) : Bool :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: String \u2192 String \u2192 Bool)\n-- inputs\n(a b: String) :=\n-- spec\nlet spec (result: Bool) :=\n(b.length = 0 \u2192 result) \u2227\n(0 < b.length \u2192\nresult \u2194 ((b.length \u2264 a.length) \u2227\n  (\u2203 i : Nat, i < b.length \u2227\n  let b_rotation := b.drop i ++ b.take i;\n  a.containsSubstr b_rotation)));\n-- program terminates\n\u2203 result, impl a b = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(a b: String)\n: problem_spec implementation a b := by\n  sorry", "vc-postamble": "-- #test implementation \"abcd\" \"abd\" = False\n-- #test implementation \"hello\" \"ell\" = True\n-- #test implementation \"whassup\" \"psus\" = False\n-- #test implementation \"abab\" \"baa\" = True\n-- #test implementation \"efef\" \"eeff\" = False\n-- #test implementation \"himenss\" \"simen\" = True", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_155", "vc-description": "/- \nfunction_signature: \"def even_odd_count(num: int) -> Tuple[int, int]\"\ndocstring: |\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\ntest_cases:\n  - input: -12\n    expected_output: [1, 1]\n  - input: 123\n    expected_output: [1, 2]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (num: Int) : Int \u00d7 Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: Int \u2192 Int \u00d7 Int)\n-- inputs\n(num: Int) :=\n-- spec\nlet spec (result: Int \u00d7 Int) :=\n  let (even_count, odd_count) := result;\n  let numAbs := |num|.toNat;\n  let numBy10 := numAbs/10;\n  let (even_count', odd_count') := impl numBy10;\n  (result = impl numAbs) \u2227\n  (0 \u2264 num \u2192 (Even num \u2194 1 + even_count' = even_count) \u2227 (Odd num \u2194 even_count' = even_count)) \u2227\n  (0 \u2264 num \u2192 (Odd num \u2194 1 + odd_count' = odd_count) \u2227 (Even num \u2194 odd_count' = odd_count));\n-- program terminates\n\u2203 result, impl num = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(num: Int)\n: problem_spec implementation num := by\n  sorry", "vc-postamble": "-- #test implementation -12 = (1, 1)\n-- #test implementation 123 = (1, 2)", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_156", "vc-description": "/- \nfunction_signature: \"def int_to_mini_roman(num: Nat) -> String\"\ndocstring: |\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\ntest_cases:\n  - input: 19\n    expected_output: xix\n  - input: 152\n    expected_output: clii\n  - input: 426\n    expected_output: cdxxvi\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap\n\n/--\nname: romanCharToValue\nuse: |\n  Map from valid characters and their values\nproblems:\n  - 156\nsample_problems: []\n-/\ndef romanCharToValue : Char \u2192 Nat\n| 'i' => 1\n| 'v' => 5\n| 'x' => 10\n| 'l' => 50\n| 'c' => 100\n| 'd' => 500\n| 'm' => 1000\n| _   => 0\n\n/--\nname: validSubtractivePairs\nuse: |\n  Legal subtractive pairs: first char can precede second for subtraction (in roman numerals)\nproblems:\n  - 156\nsample_problems: []\n-/\ndef validSubtractivePairs : List (Char \u00d7 Char) :=\n  [('i', 'v'), ('i', 'x'), ('x', 'l'), ('x', 'c'), ('c', 'd'), ('c', 'm')]\n\n/--\nname: maxRepetitions\nuse: |\n  Max allowed repetitions for each character (in roman numerals)\nproblems:\n  - 156\nsample_problems: []\n-/\ndef maxRepetitions : Char \u2192 Nat\n| 'i' | 'x' | 'c' | 'm' => 3\n| 'v' | 'l' | 'd'       => 1\n| _                    => 0\n\n/--\nname: countRepetitions\nuse: |\n  Helper to count consecutive repetitions (in roman numerals)\nproblems:\n  - 156\nsample_problems: []\n-/\ndef countRepetitions : List Char \u2192 Char \u2192 Nat \u2192 Nat\n| [], _, n => n\n| (h :: t), c, n => if h = c then countRepetitions t c (n + 1) else n\n\n/--\nname: validRepetition\nuse: |\n  Helper to validate proper use of repetitions (in roman numerals)\nproblems:\n  - 156\nsample_problems: []\n-/\npartial def validRepetition : List Char \u2192 Bool\n| [] => true\n| c :: rest =>\n  let max := maxRepetitions c\n  let count := countRepetitions rest c 1\n  count \u2264 max \u2227 validRepetition (rest.drop (count - 1))\n\n/--\nname: validSubtractiveOrder\nuse: |\n  Helper to validate legal subtractive combinations (in roman numerals)\nproblems:\n  - 156\nsample_problems: []\n-/\ndef validSubtractiveOrder : List Char \u2192 Bool\n| [] | [_] => true\n| c1 :: c2 :: rest =>\n  match romanCharToValue c1, romanCharToValue c2 with\n  | v1, v2 =>\n    if v1 < v2 then\n      -- check if c1 and c2 form a legal subtractive pair\n      (c1, c2) \u2208 validSubtractivePairs \u2227 validSubtractiveOrder rest\n    else if v1 = 0 \u2228 v2 = 0 then\n      false\n    else\n      validSubtractiveOrder (c2 :: rest)\n\n/--\nname: isValidRoman\nuse: |\n  Function to check if a string is a roman numeral\nproblems:\n  - 156\nsample_problems: []\n-/\ndef isValidRoman (s : String) : Bool :=\n  s.data.all (\u03bb c => romanCharToValue c \u2260 0) \u2227\n  validRepetition s.data \u2227\n  validSubtractiveOrder s.data\n\n/--\nname: romanToDecimalAux\nuse: |\n  Helper to convert list of roman characters to decimal\nproblems:\n  - 156\nsample_problems: []\n-/\ndef romanToDecimalAux : List Char \u2192 Nat\n| [] => 0\n| c1 :: c2 :: rest =>\n    let val1 := romanCharToValue c1\n    let val2 := romanCharToValue c2\n    if val1 < val2 then\n      -- subtractive notation\n      (val2 - val1) + romanToDecimalAux rest\n    else\n      val1 + romanToDecimalAux (c2 :: rest)\n| [c] => romanCharToValue c\n\n/--\nname: romanToDecimal\nuse: |\n  Function to convert a valid lowercase Roman numeral string to Nat\nproblems:\n  - 156\nsample_problems: []\n-/\ndef romanToDecimal (s : String) : Nat :=\n  romanToDecimalAux s.data", "vc-helpers": "", "vc-definitions": "def implementation (num: Nat) : String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: Nat \u2192 String)\n-- inputs\n(num: Nat) :=\n-- spec\nlet spec (result: String) :=\n1 \u2264 num \u2227 num \u2264 1000 \u2227 (result.data.all (fun c => c.isLower)) \u2192\nisValidRoman result \u2227 romanToDecimal result = num\n-- program terminates\n\u2203 result, impl num = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(num: Nat)\n: problem_spec implementation num := by\n  sorry", "vc-postamble": "-- #test implementation 19 = \"xix\"\n-- #test implementation 152 = \"clii\"\n-- #test implementation 426 = \"cdxxvi\"", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_157", "vc-description": "/- \nfunction_signature: \"def right_angle_triangle(a: Nat, b: Nat, c: Nat) -> Bool\"\ndocstring: |\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\ntest_cases:\n  - input: [3, 4, 5]\n    expected_output: True\n  - input: [1, 2, 3]\n    expected_output: False\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (a b c: Nat) : Bool :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: Nat \u2192 Nat \u2192 Nat \u2192 Bool)\n-- inputs\n(a b c: Nat) :=\n-- spec\nlet spec (result: Bool) :=\nresult \u2194\n  0 < a \u2227 0 < b \u2227 0 < c \u2227\n  ((a * a + b * b = c * c) \u2228\n  (a * a + c * c = b * b) \u2228\n  (b * b + c * c = a * a))\n-- program terminates\n\u2203 result, impl a b c = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(a b c: Nat)\n: problem_spec implementation a b c := by\n  sorry", "vc-postamble": "-- #test implementation ([1, 2, 2, -4]: List Int) = (-9: Int)\n-- #test implementation ([0, 1]: List Int) = (0: Int)\n-- #test implementation ([]: List Int) = none", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_158", "vc-description": "/- \nfunction_signature: \"def find_max(words: List String) -> String\"\ndocstring: |\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\ntest_cases:\n  - input: [\"name\", \"of\", \"string\"]\n    expected_output: \"string\"\n  - input: [\"name\", \"enam\", \"game\"]\n    expected_output: \"enam\"\n  - input: [\"aaaaaaa\", \"bb\", \"cc\"]\n    expected_output: \"aaaaaaa\"\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (words: List String) : String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: List String \u2192 String)\n-- inputs\n(words: List String) :=\nlet unique_chars (string: String) :=\n  let string_idx := {i: Nat | i < string.length}.toFinset;\n  let characters := string_idx.image (fun i => string.toList[i]!);\n  characters.card;\n-- spec\nlet spec (result: String) :=\n(result = \"\" \u2194 words.length = 0) \u2227\n(words.length != 0 \u2192 result \u2208 words \u2227\nlet unique_chars_list := words.map unique_chars;\nlet max_unique_chars := unique_chars_list.max?.get!;\nunique_chars result = max_unique_chars \u2227\n\u2200 i : Nat, i < words.length \u2192\n  unique_chars_list[i]! = max_unique_chars \u2192\n  result \u2264 words[i]!);\n-- program terminates\n\u2203 result, impl words = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(words: List String)\n: problem_spec implementation words := by\n  sorry", "vc-postamble": "-- #test implementation [\"name\", \"of\", \"string\"]= \"string\"\n-- #test implementation [\"name\", \"enam\", \"game\"] = \"enam\"\n-- #test implementation [\"aaaaaaa\", \"bb\" ,\"cc\"] = \"aaaaaaa\"", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_159", "vc-description": "/- \nfunction_signature: \"def eat(number: Nat, need: Nat, remaining: Nat) -> List Nat\"\ndocstring: |\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Variables:\n      @number : integer\n          the number of carrots that you have eaten.\n      @need : integer\n          the number of carrots that you need to eat.\n      @remaining : integer\n          the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\ntest_cases:\n  - input: [5, 6, 10]\n    expected_output: [11, 4]\n  - input: [4, 8, 9]\n    expected_output: [12, 1]\n  - input: [1, 10, 10]\n    expected_output: [11, 0]\n  - input: [2, 11, 5]\n    expected_output: [7, 0]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (a b c: Nat) : List Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: Nat \u2192 Nat \u2192 Nat \u2192 List Nat)\n-- inputs\n(number need remaining: Nat) :=\n-- spec\nlet spec (result: List Nat) :=\nnumber \u2264 1000 \u2192 need \u2264 1000 \u2192 remaining \u2264 1000 \u2192\nresult.length = 2 \u2227\n(need \u2264 remaining \u2192 result[0]! - need = number \u2227\nneed = remaining - result[1]!) \u2227\n(remaining < need \u2192 result[0]! - remaining = number \u2227\nresult[1]! = 0);\n-- program terminates\n\u2203 result, impl number need remaining = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(a b c: Nat)\n: problem_spec implementation a b c := by\n  sorry", "vc-postamble": "-- #test implementation 5 6 10 = [11, 4]\n-- #test implementation 4 8 9 = [12, 1]\n-- #test implementation 1 10 10 = [11, 0]\n-- #test implementation 2 11 5 = [7, 0]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_16", "vc-description": "/- \nfunction_signature: \"def count_distinct_characters(string: str) -> int\"\ndocstring: |\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\ntest_cases:\n  - input: \"xyzXYZ\"\n    expected_output: 3\n  - input: \"Jerry\"\n    expected_output: 4\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (string: String) : Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: String \u2192 Nat)\n-- inputs\n(string: String) :=\n-- spec\nlet spec (result: Nat) :=\nlet string_idx := {i: Nat | i < string.length}.toFinset\nlet characters := string_idx.image (fun i => string.toList[i]!)\nlet lowercase_characters := characters.image (fun c => c.toLower)\nresult = lowercase_characters.card;\n-- program termination\n\u2203 result, implementation string = result \u2227\nspec result\n\ntheorem correctness\n(string: String)\n: problem_spec implementation string\n:= by\n  sorry", "vc-postamble": "-- #test implementation \"xyzXYZ\" = 3\n-- #test implementation \"Jerry\" = 4", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_160", "vc-description": "/- \nfunction_signature: \"def do_algebra(operator: List String, operand: List Nat) -> Int\"\ndocstring: |\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( // )\n    Exponentiation ( ** )\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\ntest_cases:\n  - input: [['+', '*', '-'], [2, 3, 4, 5]]\n    expected_output: 9\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap\n\n/--\nname: mergeAlternately\nuse: |\n  Helper Methods to mergeAlternately a list of strings\nproblems:\n  - 160\nsample_problems: []\n-/\ndef mergeAlternately : List Nat \u2192 List String \u2192 List String\n| [], []       => []\n| [], y :: ys  => y :: mergeAlternately [] ys\n| x :: xs, []  => x.repr :: mergeAlternately xs []\n| x :: xs, y :: ys => x.repr :: y :: mergeAlternately xs ys\n\n/--\nname: applyOp\nuse: |\n  Helper method to apply operations on two integers\nproblems:\n  - 160\nsample_problems: []\n-/\ndef applyOp (x y : Int) : String \u2192 Option Int\n  | \"+\"  => some (x + y)\n  | \"-\"  => some (x - y)\n  | \"*\"  => some (x * y)\n  | \"//\" => if y == 0 then none else some (x / y)\n  | \"**\" =>\n    if x < 0 then none\n    else some (Int.ofNat ((Int.toNat x) ^ (Int.toNat y)))\n  | _     => none\n\n/--\nname: evalArith_pass\nuse: |\n  Noncomputable relational spec for a single step evaluation (any op, ignoring precedence).\nproblems:\n  - 160\nsample_problems: []\n-/\ninductive evalArith_pass : List String \u2192 Int \u2192 Prop\n| num {s : String} {n : Nat} (h : s.toNat! = n) :\n    evalArith_pass [s] (Int.ofNat n)\n| binOp {ts1 ts2 : List String} {op : String} {r1 r2 r : Int}\n    (h1 : evalArith_pass ts1 r1)\n    (h2 : evalArith_pass ts2 r2)\n    (hop : applyOp r1 r2 op = some r) :\n    evalArith_pass (ts1 ++ op :: ts2) r\n\n/--\nname: evalArith_exp\nuse: |\n  Relational spec for exponentiation (highest precedence).\nproblems:\n  - 160\nsample_problems: []\n-/\ninductive evalArith_exp : List String \u2192 Int \u2192 Prop\n| of_pass {ts r} (h : evalArith_pass ts r) : evalArith_exp ts r\n| step {ts1 ts2 r1 r2 r} (h1 : evalArith_exp ts1 r1) (h2 : evalArith_exp ts2 r2)\n    (hop : applyOp r1 r2 \"**\" = some r) :\n    evalArith_exp (ts1 ++ \"**\" :: ts2) r\n\n/--\nname: evalArith_mul\nuse: |\n  Relational spec for multiplication/division (middle precedence).\nproblems:\n  - 160\nsample_problems: []\n-/\ninductive evalArith_mul : List String \u2192 Int \u2192 Prop\n| of_exp {ts r} (h : evalArith_exp ts r) : evalArith_mul ts r\n| step {ts1 ts2 r1 r2 r} (h1 : evalArith_mul ts1 r1) (h2 : evalArith_mul ts2 r2)\n    (hop : applyOp r1 r2 \"*\" = some r \u2228 applyOp r1 r2 \"//\" = some r) :\n    evalArith_mul (ts1 ++ \"*\" :: ts2) r\n\n/--\nname: evalArith_add\nuse: |\n  Relational spec for addition/subtraction (lowest precedence).\nproblems:\n  - 160\nsample_problems: []\n-/\ninductive evalArith_add : List String \u2192 Int \u2192 Prop\n| of_mul {ts r} (h : evalArith_mul ts r) : evalArith_add ts r\n| step {ts1 ts2 r1 r2 r} (h1 : evalArith_add ts1 r1) (h2 : evalArith_add ts2 r2)\n    (hop : applyOp r1 r2 \"+\" = some r \u2228 applyOp r1 r2 \"-\" = some r) :\n    evalArith_add (ts1 ++ \"+\" :: ts2) r\n\n/--\nname: evalArith_precedence\nuse: |\n  Main function to evaluate an expression\nproblems:\n  - 160\nsample_problems: []\n-/\ndef evalArith_precedence (ts : List String) (r : Int) : Prop :=\n  evalArith_add ts r", "vc-helpers": "", "vc-definitions": "def implementation (operator: List String) (operand : List Nat) : Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: List String \u2192 List Nat \u2192 Int)\n-- inputs\n(operator : List String)\n(operand : List Nat) :=\n-- spec\nlet spec (result: Int) :=\noperator.length = operand.length - 1 \u2227 0 < operator.length \u2227 operand.all (fun n => 0 \u2264 n) \u2192\nlet inline_tokens : List String := mergeAlternately operand operator\nevalArith_precedence inline_tokens result\n-- program terminates\n\u2203 result, impl operator operand = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(operator : List String) (operand : List Nat)\n: problem_spec implementation operator operand := by\n  sorry", "vc-postamble": "-- #test implementation ['+', '*', '-'] [2,3,4,5] = 9", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_161", "vc-description": "/- \nfunction_signature: \"def solve(string : String) -> String\"\ndocstring: |\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\ntest_cases:\n  - input: \"1234\"\n    expected_output: \"4321\"\n  - input: \"ab\"\n    expected_output: \"AB\"\n  - input: \"#a@C\"\n    expected_output: \"#A@c\"\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (s: String) : String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: String \u2192 String)\n-- inputs\n(string : String) :=\n-- spec\nlet spec (result: String) :=\nresult.length = string.length \u2227\nlet hasNoAlphabet := string.all (\u03bb c => not (c.isAlpha));\n(hasNoAlphabet \u2192\n  result.toList = string.toList.reverse) \u2227\n(hasNoAlphabet = false \u2192\n  \u2200 i, i < string.length \u2192\n  let c := string.get! \u27e8i\u27e9;\n  (c.isAlpha \u2192 ((c.isLower \u2192 c.toUpper = result.get! \u27e8i\u27e9) \u2228\n              (c.isUpper \u2192 c.toLower = result.get! \u27e8i\u27e9))) \u2227\n  (\u00ac c.isAlpha \u2192 c = result.get! \u27e8i\u27e9))\n-- program terminates\n\u2203 result, impl string = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(s: String)\n: problem_spec implementation s := by\n  sorry", "vc-postamble": "-- #test implementation \"1234\" = \"4321\"\n-- #test implementation \"ab\" = \"AB\"\n-- #test implementation \"#a@C\" = \"#A@c\"", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_163", "vc-description": "/- \nfunction_signature: \"def generate_integers(a : Nat, b : Nat) -> List Nat\"\ndocstring: |\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\ntest_cases:\n  - input: [2, 8]\n    expected_output: [2, 4, 6, 8]\n  - input: [8, 2]\n    expected_output: [2, 4, 6, 8]\n  - input: [10, 14]\n    expected_output: [10, 12, 14]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (a b: Nat) : List Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: Nat \u2192 Nat \u2192 List Nat)\n-- inputs\n(a b : Nat) :=\nlet isAscendingBy2 (r : List Nat) :=\n\u2200 i, i < r.length - 1 \u2192 r[i+1]! - r[i]! = 2\n-- spec\nlet spec (result: List Nat) :=\nresult.all (fun n => n % 2 = 0) \u2227 isAscendingBy2 result \u2227\n1 < result.length \u2227\nlet min_a_b := min a b;\nlet max_a_b := max a b;\nif min_a_b = max_a_b \u2227 (min_a_b % 2 = 1)\nthen result = []\nelse ((result[0]! = if 2 \u2223 min_a_b then min_a_b else (min_a_b + 1)) \u2227\n(result[result.length-1]! = if 2 \u2223 max_a_b then max_a_b else max_a_b - 1))\n-- program terminates\n\u2203 result, impl a b = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(a b: Nat)\n: problem_spec implementation a b := by\n  sorry", "vc-postamble": "-- #test implementation 2 8 = [2, 4, 6, 8]\n-- #test implementation 8 2 = [2, 4, 6, 8]\n-- #test implementation 10 14 = [10, 12, 14]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_17", "vc-description": "/- \nfunction_signature: \"def parse_music(music_string: str) -> List[int]\"\ndocstring: |\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\ntest_cases:\n  - input: \"o o| .| o| o| .| .| .| .| o o\"\n    expected_output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (string: String) : List Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: String \u2192 List Nat)\n-- inputs\n(string: String) :=\n-- spec\nlet not_map := fun\n  | \"o\" => 4\n  | \"o|\" => 2\n  | \".|\" => 1\n  | _ => 0;\nlet spec (result: List Nat) :=\nlet space_split := string.splitOn \" \";\nspace_split.length = result.length \u2227\n\u2200 i < result.length, not_map (space_split[i]!) = result[i]!;\n-- program termination\n\u2203 result, implementation string = result \u2227\nspec result\n\ntheorem correctness\n(string: String)\n: problem_spec implementation string\n:= by\n  sorry", "vc-postamble": "-- #test implementation \"o o| .| o| o| .| .| .| .| o o\" = [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_18", "vc-description": "/- \nfunction_signature: \"def how_many_times(string: str, substring: str) -> int\"\ndocstring: |\n  Find how many times a given substring can be found in the original string. Count overlaping cases.\ntest_cases:\n  - input:\n      - \"\"\n      - \"a\"\n    expected_output: 0\n  - input:\n      - \"aaa\"\n      - \"a\"\n    expected_output: 3\n  - input:\n      - \"aaaa\"\n      - \"aa\"\n    expected_output: 3\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (string: String) (substring: String) : Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: String \u2192 String \u2192 Nat)\n-- inputs\n(string substring: String) :=\n-- spec\nlet spec (result: Nat) :=\n(string.length < substring.length \u2192 result = 0)\n\u2227\n(string.length = substring.length \u2192\n((string = substring \u2194 result = 1) \u2227\n(substring \u2260 string \u2194 result = 0)))\n\u2227\n(substring.length < string.length  \u2192\nlet subtring_start_idx := {i: Nat | i \u2264 string.length - substring.length};\nlet substring_occurrences := {i \u2208 subtring_start_idx | (string.take (i + substring.length)).drop i = substring };\nresult = substring_occurrences.toFinset.card);\n-- program termination\n\u2203 result, implementation string substring = result \u2227\nspec result\n\ntheorem correctness\n(string: String)\n(substring: String)\n: problem_spec implementation string substring\n:= by\n  sorry", "vc-postamble": "-- #test implementation \"aaa\" \"a\" = 3\n-- #test implementation \"aaaa\" \"aa\" = 3\n-- #test implementation \"\" \"a\" = 0\n-- #test implementation \"a\" \"\" = 1\n-- #test implementation \"a\" \"a\" = 1", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_19", "vc-description": "/- \nfunction_signature: \"def sort_numbers(numbers: str) -> str\"\ndocstring: |\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\ntest_cases:\n  - input: \"three one five\"\n    expected_output: \"one three five\"\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (numbers: String) : String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: String \u2192 String)\n-- inputs\n(numbers: String) :=\n-- spec\nlet word_to_number_map : String \u2192 Int := fun word =>\n  match word with\n  | \"zero\" => 0\n  | \"one\" => 1\n  | \"two\" => 2\n  | \"three\" => 3\n  | \"four\" => 4\n  | \"five\" => 5\n  | \"six\" => 6\n  | \"seven\" => 7\n  | \"eight\" => 8\n  | \"nine\" => 9\n  | _ => -1;\nlet is_sorted_asc : List Int \u2192 Bool := fun numbers =>\nlet rec is_sorted_asc_helper : List Int \u2192 Bool \u2192 Bool := fun numbers is_sorted =>\n  match numbers with\n  | [] => is_sorted\n  | [_] => is_sorted\n  | x::y::rest => if x <= y then is_sorted_asc_helper (y::rest) true else false;\nis_sorted_asc_helper numbers false;\nlet spec (result: String) :=\nlet result_split := result.splitOn \" \";\nlet numbers_split := numbers.splitOn \" \";\nlet result_mapped_to_numbers := result_split.map word_to_number_map;\nlet numbers_as_str_mapped_to_numbers := numbers_split.map word_to_number_map;\n\u00ac -1 \u2208 numbers_as_str_mapped_to_numbers \u2192\nresult_split.length = numbers_split.length \u2227\n(\u2200 n, n \u2208 numbers_as_str_mapped_to_numbers \u2192\n\u2203 m, m \u2208 result_mapped_to_numbers) \u2227\n(\u2200 n, n \u2208 result_mapped_to_numbers \u2192\n\u2203 m, m \u2208 numbers_as_str_mapped_to_numbers) \u2227\n(\u2200 n, numbers_as_str_mapped_to_numbers.count n = result_mapped_to_numbers.count n) \u2227\nis_sorted_asc result_mapped_to_numbers = true;\n-- program termination\n\u2203 result, implementation numbers = result \u2227\nspec result\n\ntheorem correctness\n(numbers: String)\n: problem_spec implementation numbers\n:= by\n  sorry", "vc-postamble": "-- #test implementation \"three one five\" = \"one three five\"", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_2", "vc-description": "/- \nfunction_signature: \"def truncate_number(number: float) -> float\"\ndocstring: |\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\ntest_cases:\n  - input: 3.5\n    expected_output: 0.5\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (number: Rat) : Rat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: Rat \u2192 Rat)\n-- inputs\n(number: Rat) :=\n-- spec\nlet spec (res) :=\n0 \u2264 res \u2227\nres < 1 \u2227\nnumber.floor + res = number;\nnumber > 0 \u2192\n-- program terminates\n(\u2203 result, impl number = result \u2227\n-- return value satisfies spec\nspec result)\n\ntheorem correctness\n(number: Rat)\n: problem_spec implementation number := by\n  sorry", "vc-postamble": "-- #test implementation 3.5 = 0.5", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_20", "vc-description": "/- \nfunction_signature: \"def find_closest_elements(numbers: List[float]) -> Tuple[float, float]\"\ndocstring: |\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\ntest_cases:\n  - input: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]\n    expected_output: (2.0, 2.2)\n  - input: [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n    expected_output: (2.0, 2.0)\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (numbers: List Rat): (Rat \u00d7 Rat) :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Rat \u2192 (Rat \u00d7 Rat))\n-- inputs\n(numbers: List Rat) :=\n-- spec\nlet spec (result: (Rat \u00d7 Rat)) :=\n2 \u2264 numbers.length \u2192\n(let (smaller, larger) := result;\nlet abs_diff := |larger - smaller|;\nsmaller \u2264 larger \u2227\nsmaller \u2208 numbers \u2227\nlarger \u2208 numbers \u2227\n(\u2200 x y, x \u2208 numbers \u2192 y \u2208 numbers \u2192  abs_diff \u2264 |x - y|) \u2227\n(smaller = larger \u2192 1 \u2264 (numbers.filter (fun z => z = smaller)).length));\n-- program termination\n\u2203 result, implementation numbers = result \u2227\nspec result\n\ntheorem correctness\n(numbers: List Rat)\n: problem_spec implementation numbers\n:= by\n  sorry", "vc-postamble": "-- #test implementation [1.0, 2.0, 3.0, 4.0, 5.0, 2.2] = (2.0, 2.2)\n-- #test implementation [1.0, 2.0, 3.0, 4.0, 5.0, 2.0] = (2.0, 2.0)", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_21", "vc-description": "/- \nfunction_signature: \"def rescale_to_unit(numbers: List[float]) -> List[float]\"\ndocstring: |\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\ntest_cases:\n  - input: [1.0, 2.0, 3.0, 4.0, 5.0]\n    expected_output: [0.0, 0.25, 0.5, 0.75, 1.0]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (numbers: List Rat): List Rat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Rat \u2192 List Rat)\n-- inputs\n(numbers: List Rat) :=\n-- spec\nlet spec (result: List Rat) :=\n2 \u2264 numbers.length \u2192\nlet min_elem := numbers.min?.get!;\nlet max_elem := numbers.max?.get!;\nlet range := max_elem - min_elem;\nresult.length = numbers.length \u2227\n\u2200 i, i < numbers.length \u2192\n(min_elem \u2260 max_elem \u2192\nresult[i]! = (numbers[i]! - min_elem) / range) \u2227\n(min_elem = max_elem \u2192\nresult[i]! = 0);\n-- program termination\n\u2203 result, implementation numbers = result \u2227\nspec result\n\ntheorem correctness\n(numbers: List Rat)\n: problem_spec implementation numbers\n:= by\n  sorry", "vc-postamble": "-- #test implementation [1.0, 2.0, 3.0, 4.0, 5.0] = [0.0, 0.25, 0.5, 0.75, 1.0]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_23", "vc-description": "/- \nfunction_signature: \"def strlen(string: str) -> int\"\ndocstring: |\n    Return length of given string\ntest_cases:\n  - input: \"\"\n    expected_output: 0\n  - input: \"abc\"\n    expected_output: 3\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (string: String): Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: String \u2192 Nat)\n-- inputs\n(string: String) :=\n-- spec\nlet spec (result: Nat) :=\n-- every character in the string is counted once\nresult = 0 \u2194 string.isEmpty \u2227\n(0 < result \u2192 result - 1 = implementation (string.drop 1))\n-- program termination\n\u2203 result, implementation string = result \u2227\nspec result\n\ntheorem correctness\n(string: String)\n: problem_spec implementation string\n:= by\n  sorry", "vc-postamble": "-- #test implementation \"\" = 0\n-- #test implementation \"abc\" = 3", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_24", "vc-description": "/- \nfunction_signature: \"def largest_divisor(n: int) -> int\"\ndocstring: |\n    For a given number n, find the largest number that divides n evenly, smaller than n\ntest_cases:\n  - input: 15\n    expected_output: 5\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (n: Nat) : Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Nat \u2192 Nat)\n-- inputs\n(n: Nat) :=\n-- spec\nlet spec (result: Nat) :=\n0 < n \u2192 0 < result \u2192 result \u2223 n \u2192 \u2200 x, x \u2223 n \u2192 x \u2260 n \u2192 x \u2264 result;\n-- program termination\n\u2203 result, implementation n = result \u2227\nspec result\n\ntheorem correctness\n(n: Nat)\n: problem_spec implementation n\n:= by\n  sorry", "vc-postamble": "-- #test implementation 15 = 5", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_25", "vc-description": "/- \nfunction_signature: \"def factorize(n: int) -> List[int]\"\ndocstring: |\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\ntest_cases:\n  - input: 8\n    expected_output: [2, 2, 2]\n  - input: 25\n    expected_output: [5, 5]\n  - input: 70\n    expected_output: [2, 5, 7]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (n: Nat) : List Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Nat \u2192 List Nat)\n-- inputs\n(n: Nat) :=\n-- spec\nlet spec (result: List Nat) :=\n2 \u2264 n \u2192\n(result.prod = n \u2227\nList.Sorted Nat.le result \u2227\nresult.all (\u03bb i => n % i = 0 \u2227 Nat.Prime i));\n-- program termination\n\u2203 result, implementation n = result \u2227\nspec result\n\ntheorem correctness\n(n: Nat)\n: problem_spec implementation n\n:= by\n  sorry", "vc-postamble": "-- #test implementation 8 = [2, 2, 2]\n-- #test implementation 25 = [5, 5]\n-- #test implementation 70 = [2, 5, 7]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_26", "vc-description": "/- \nfunction_signature: \"def remove_duplicates(numbers: List[int]) -> List[int]\"\ndocstring: |\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\ntest_cases:\n  - input: [1, 2, 3, 2, 4]\n    expected_output: [1, 3, 4]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (numbers: List Int) : List Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Int \u2192 List Int)\n-- inputs\n(numbers: List Int) :=\n-- spec\nlet spec (result: List Int) :=\n(\u2200 i: Int, i \u2208 result \u2192 numbers.count i = 1) \u2227\n(\u2200 i: Int, i \u2208 numbers \u2192 numbers.count i = 1 \u2192 i \u2208 result) \u2227\n(\u2200 i j : Nat, i < result.length \u2192 j < result.length \u2192 i < j \u2192\n\u2203 ip jp : Nat, ip < jp \u2227 result[i]! = numbers[ip]! \u2227 result[j]! = numbers[jp]!)\n-- program termination\n\u2203 result, implementation numbers = result \u2227\nspec result\n\ntheorem correctness\n(numbers: List Int)\n: problem_spec implementation numbers\n:= by\n  sorry", "vc-postamble": "-- #test implementation [1, 2, 3, 2, 4] = [1, 3, 4]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_27", "vc-description": "/- \nfunction_signature: \"def flip_case(string: str) -> str\"\ndocstring: |\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\ntest_cases:\n  - input: \"Hello\"\n    expected_output: \"hELLO\"\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (string: String) : String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: String \u2192 String)\n-- inputs\n(string: String) :=\n-- spec\nlet spec (result: String) :=\nlet chars_in_result := result.toList;\nlet chars_in_string := string.toList;\nchars_in_result.length = string.length \u2227\n(\u2200 i, i < chars_in_result.length \u2192\n  let c := chars_in_result[i]!;\n  let c' := chars_in_string[i]!;\n  (c.isUpper \u2192 c'.isLower) \u2227\n  (c.isLower \u2192 c'.isUpper) \u2227\n  ((\u00ac c.isUpper \u2227 \u00ac c.isLower) \u2192 c = c')\n);\n-- program termination\n\u2203 result, implementation string = result \u2227\nspec result\n\ntheorem correctness\n(string: String)\n: problem_spec implementation string\n:= by\n  sorry", "vc-postamble": "-- #test implementation \"Hello\" = \"hELLO\"", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_28", "vc-description": "/- \nfunction_signature: \"def concatenate(strings: List[str]) -> str\"\ndocstring: |\n    Concatenate list of strings into a single string\ntest_cases:\n  - input: []\n    expected_output: \"\"\n  - input: [\"a\", \"b\", \"c\"]\n    expected_output: \"abc\"\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (strings: List String) : String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List String \u2192 String)\n-- inputs\n(strings: List String) :=\n-- spec\nlet spec (result: String) :=\nlet result_chars := result.toList;\nresult_chars.length = (strings.map (\u03bb s => s.length)).sum \u2227\n\u2200 i, i < strings.length \u2192\n(let string_in_result := strings[i]!;\nlet end_idx := ((strings.take (i + 1)).map (\u03bb s => s.length)).sum;\nlet start_idx := end_idx - string_in_result.length;\nlet corresponding_string_in_result := ((result_chars.take end_idx).drop start_idx).asString;\ncorresponding_string_in_result = string_in_result);\n-- program termination\n\u2203 result, implementation strings = result \u2227\nspec result\n\ntheorem correctness\n(strings: List String)\n: problem_spec implementation strings\n:= by\n  sorry", "vc-postamble": "-- #test implementation [] = \"\"\n-- #test implementation [\"a\", \"b\", \"c\"] = \"abc\"", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_29", "vc-description": "/- \nfunction_signature: \"def filter_by_prefix(strings: List[str], prefix: str) -> List[str]\"\ndocstring: |\n    Filter an input list of strings only for ones that start with a given prefix.\ntest_cases:\n  - input:\n    - []\n    - \"a\"\n    expected_output: []\n  - input:\n    - [\"abc\", \"bcd\", \"cde\", \"array\"]\n    - \"a\"\n    expected_output: [\"abc\", \"array\"]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (strings: List String) (pref: String) : List String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List String \u2192 String \u2192 List String)\n-- inputs\n(strings: List String)\n(pref: String) :=\n-- spec\nlet spec (result: List String) :=\nresult.all (\u03bb s => s.startsWith pref) \u2227\nresult.all (\u03bb s => s \u2208 strings) \u2227\nstrings.all (\u03bb s => s.startsWith pref \u2192 s \u2208 result) \u2227\n\u2200 s : String, s \u2208 result \u2192 result.count s = strings.count s;\n-- program termination\n\u2203 result, implementation strings pref = result \u2227\nspec result\n\ntheorem correctness\n(strings: List String)\n(pref: String)\n: problem_spec implementation strings pref\n:= by\n  sorry", "vc-postamble": "-- #test implementation [] \"a\" = []\n-- #test implementation [\"abc\", \"bcd\", \"cde\", \"array\"] \"a\" = [\"abc\", \"array\"]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_3", "vc-description": "/- \nfunction_signature: \"def below_zero(operations: List[int]) -> bool\"\ndocstring: |\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\ntest_cases:\n  - input:\n      - 1\n      - 2\n      - 3\n    expected_output: false\n  - input:\n      - 1\n      - 2\n      - -4\n      - 5\n    expected_output: true\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (operations: List Int) : Bool :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: List Int \u2192 Bool)\n-- inputs\n(operations: List Int) :=\n-- spec\nlet below_zero_condition := \u2203 i, i \u2264 operations.length \u2227\n(operations.take i).sum < 0;\nlet spec (result: Bool) :=\nif result then below_zero_condition else \u00acbelow_zero_condition;\n-- program terminates\n\u2203 result, impl operations = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(operations: List Int)\n: problem_spec implementation operations\n:= by\n  sorry", "vc-postamble": "-- #test implementation [1, 2, 3] = false\n-- #test implementation [1, 2, -4, 5] = true", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_30", "vc-description": "/- \nfunction_signature: \"def get_positive(l: list)\"\ndocstring: |\n    Return only positive numbers in the list.\ntest_cases:\n  - input: [-1, 2, -4, 5, 6]\n    expected_output: [2, 5, 6]\n  - input: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n    expected_output: [5, 3, 2, 3, 9, 123, 1]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (numbers: List Int): List Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Int \u2192 List Int)\n-- inputs\n(numbers: List Int) :=\n-- spec\nlet spec (result: List Int) :=\n  result.all (\u03bb x => x > 0 \u2227 x \u2208 numbers) \u2227\n  numbers.all (\u03bb x => x > 0 \u2192 x \u2208 result) \u2227\n  result.all (\u03bb x => result.count x = numbers.count x);\n-- program termination\n\u2203 result,\n  implementation numbers = result \u2227\n  spec result\n\ntheorem correctness\n(numbers: List Int)\n: problem_spec implementation numbers\n:= by\n  sorry", "vc-postamble": "-- #test implementation [(-1), 2, (-4), 5, 6] = [2, 5, 6]\n-- #test implementation [5, 3, (-5), 2, (-3), 3, 9, 0, 123, 1, (-10)] = [5, 3, 2, 3, 9, 123, 1]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_31", "vc-description": "/- \nfunction_signature: \"def is_prime(n)\"\ndocstring: |\n    Return true if a given number is prime, and false otherwise.\ntest_cases:\n  - input: 6\n    output: False\n  - input: 101\n    output: True\n  - input: 11\n    output: True\n  - input: 13441\n    output: True\n  - input: 61\n    output: True\n  - input: 4\n    output: False\n  - input: 1\n    output: False\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (n: Nat): Bool :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Nat \u2192 Bool)\n-- inputs\n(n: Nat) :=\n-- spec\nlet spec (result: Bool) :=\n  result \u2194 \u00ac (\u2203 k, 2 \u2264 k \u2227 k < n \u2227 n % k = 0);\n-- program termination\n\u2203 result,\n  implementation n = result \u2227\n  spec result\n\ntheorem correctness\n(n: Nat)\n: problem_spec implementation n\n:= by\n  sorry", "vc-postamble": "-- #test implementation 6 = false\n-- #test implementation 101 = true\n-- #test implementation 11 = true\n-- #test implementation 13441 = true\n-- #test implementation 61 = true\n-- #test implementation 4 = false\n-- #test implementation 1 = false", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_32", "vc-description": "/- \nfunction_signature: \"def find_zero(xs: list)\"\ndocstring: |\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees a solution.\n    Note(George): This problem has been modified from the original HumanEval spec because of Real is not a computable type, but a zero does not necessarily exist over the rationals.\ntest_cases:\n  - input: [1, 2]\n    output: -0.5\n  - input: [-6, 11, -6, 1]\n    output: 1.0\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (xs: List Rat) : Rat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Rat \u2192 Rat)\n-- inputs\n(xs: List Rat) :=\n-- spec\nlet spec (result: Rat) :=\n  let eps := (1: Rat) / 1000000;\n  xs.length \u2265 1 \u2192 xs.length % 2 = 0 \u2192\n  \u2200 poly : Polynomial Rat,\n    poly.degree = some (xs.length - 1) \u2192\n    (\u2200 i, i \u2264 xs.length - 1 \u2192 poly.coeff i = xs[i]!) \u2192\n    |poly.eval result| \u2264 eps;\n-- program termination\n\u2203 result,\n  implementation xs = result \u2227\n  spec result\n\ntheorem correctness\n(xs: List Rat)\n: problem_spec implementation xs\n:= by\n  sorry", "vc-postamble": "-- #test implementation [1, 2] = -0.5\n-- #test implementation [-6, 11, -6, 1] = 1.0", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_33", "vc-description": "/- \nfunction_signature: \"def sort_third(l: list)\"\ndocstring: |\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\ntest_cases:\n  - input: [1, 2, 3]\n    output: [1, 2, 3]\n  - input: [5, 6, 3, 4, 8, 9, 2]\n    output: [2, 6, 3, 4, 8, 9, 5]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (l: List Int) : List Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Int \u2192 List Int)\n-- inputs\n(l: List Int) :=\n-- spec\nlet spec (result: List Int) :=\n  l.length = result.length \u2227\n  let every_third_idx := (List.range l.length).filter (\u03bb i => i % 3 = 0);\n  let every_third_val_in_result := every_third_idx.map (\u03bb i => result[i]!);\n  let every_third_val := every_third_idx.map (\u03bb i => l[i]!);\n  (\u2200 i, i < l.length \u2192 (i % 3 \u2260 0 \u2192 l[i]! = result[i]!)) \u2227\n  List.Sorted Int.le every_third_val_in_result \u2227\n  every_third_val.all (\u03bb x => every_third_val_in_result.count x = every_third_val.count x);\n-- program termination\n\u2203 result, implementation l = result \u2227\nspec result\n\ntheorem correctness\n(l: List Int)\n: problem_spec implementation l\n:= by\n  sorry", "vc-postamble": "-- #test implementation [1, 2, 3] = [1, 2, 3]\n-- #test implementation [5, 6, 3, 4, 8, 9, 2] = [2, 6, 3, 4, 8, 9, 5]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_34", "vc-description": "/- \nfunction_signature: \"def unique(l: list)\"\ndocstring: |\n    Return sorted unique elements in a list.\ntest_cases:\n  - input: [5, 3, 5, 2, 3, 3, 9, 0, 123]\n    output: [0, 2, 3, 5, 9, 123]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (l: List Int) : List Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Int \u2192 List Int)\n-- inputs\n(l: List Int) :=\n-- spec\nlet spec (result: List Int) :=\n  (\u2200 x, x \u2208 result \u2194 x \u2208 l \u2227 result.count x = 1) \u2227\n  List.Sorted Int.le result\n-- program termination\n\u2203 result,\n  implementation l = result \u2227\n  spec result\n\ntheorem correctness\n(l: List Int)\n: problem_spec implementation l\n:= by\n  sorry", "vc-postamble": "-- #test implementation [5, 3, 5, 2, 3, 3, 9, 0, 123] = [0, 2, 3, 5, 9, 123]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_35", "vc-description": "/- \nfunction_signature: \"def max_element(l: list)\"\ndocstring: |\n    Return maximum element in the list.\ntest_cases:\n  - input: [1, 2, 3]\n    output: 3\n  - input: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n    output: 123\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (l: List Int) : Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Int \u2192 Int)\n-- inputs\n(l: List Int) :=\n-- spec\nlet spec (result: Int) :=\n  l.length > 0 \u2192\n  ((\u2200 i, i < l.length \u2192 l[i]! \u2264 result) \u2227\n  (\u2203 i, i < l.length \u2227 l[i]! = result));\n-- program termination\n\u2203 result, implementation l = result \u2227\nspec result\n\ntheorem correctness\n(l: List Int)\n: problem_spec implementation l\n:= by\n  sorry", "vc-postamble": "-- #test implementation [1, 2, 3] = 3\n-- #test implementation [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10] = 123", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_36", "vc-description": "/- \nfunction_signature: \"def fizz_buzz(n: int)\"\ndocstring: |\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\ntest_cases:\n  - input: 50\n    output: 0\n  - input: 78\n    output: 2\n  - input: 79\n    output: 3\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (n: Nat) : Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Nat \u2192 Nat)\n-- inputs\n(n: Nat) :=\n-- spec\nlet spec (result: Nat) :=\n  (n = 0 \u2192 result = 0) \u2227\n  (0 < n \u2192 result = implementation (n - 1) \u2192\n    (n % 11 \u2260  0 \u2227  n % 13 \u2260  0) \u2228 n.repr.count '7' = 0) \u2227\n  (0 < n \u2192 result \u2260 implementation (n - 1) \u2192\n    (n % 11 = 0 \u2228  n % 13 = 0) \u2227\n    result - implementation (n - 1) = n.repr.count '7')\n-- program termination\n\u2203 result, implementation n = result \u2227\nspec result\n\ntheorem correctness\n(n: Nat)\n: problem_spec implementation n\n:= by\n  sorry", "vc-postamble": "-- #test implementation 50 = 0\n-- #test implementation 78 = 2\n-- #test implementation 79 = 3", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_37", "vc-description": "/- \nfunction_signature: \"def sort_even(l: list)\"\ndocstring: |\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\ntest_cases:\n  - input: [1, 2, 3]\n    output: [1, 2, 3]\n  - input: [5, 6, 3, 4]\n    output: [3, 6, 5, 4]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (l: List Int) : List Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Int \u2192 List Int)\n-- inputs\n(l: List Int) :=\n-- spec\nlet spec (result: List Int) :=\n  l.length = result.length \u2227\n  let even_idx := (List.range l.length).filter (\u03bb i => i % 2 = 0);\n  let even_val_in_result := even_idx.map (\u03bb i => result[i]!);\n  let even_val := even_idx.map (\u03bb i => l[i]!);\n  (\u2200 i, i < l.length \u2192 (i % 2 \u2260 0 \u2192 l[i]! = result[i]!)) \u2227\n  List.Sorted Int.le even_val_in_result \u2227\n  even_val.all (\u03bb x => even_val_in_result.count x = even_val.count x);\n-- program termination\n\u2203 result, implementation l = result \u2227\nspec result\n\ntheorem correctness\n(l: List Int)\n: problem_spec implementation l\n:= by\n  sorry", "vc-postamble": "-- #test implementation [1, 2, 3] = [1, 2, 3]\n-- #test implementation [5, 6, 3, 4] = [3, 6, 5, 4]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_38", "vc-description": "/- \nfunction_signature: \"def encode_cyclic(s: str) -> str\"\ndocstring: |\n  Returns an encoded string by cycling each group of three consecutive characters.\n  Specifically, each group of exactly three characters 'abc' is transformed to 'bca'.\n  Groups of fewer than three characters at the end of the string remain unchanged.\ntest_cases:\n  - input: \"abcdef\"\n    expected_output: \"bcaefd\"\n  - input: \"abcde\"\n    expected_output: \"bcade\"\n  - input: \"ab\"\n    expected_output: \"ab\"\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (s: String) : String :=\n  sorry", "vc-theorems": "def problem_spec\n(impl: String \u2192 String)\n(s: String) :=\nlet n := s.length;\nlet extract (chars: List Char) (start_index: \u2115) (end_index: \u2115) :=\n  (chars.drop start_index).take (end_index - start_index + 1);\nlet spec (result: String) :=\n  let encoded_chars := result.toList;\n  let original_chars := s.toList;\n  encoded_chars.length = n \u2227\n  (\u2200 i : \u2115, i * 3 + 3 \u2264 n \u2192\n    extract encoded_chars (i * 3) (i * 3 + 2) =\n      [original_chars[i * 3 + 1]!, original_chars[i * 3 + 2]!, original_chars[i * 3]!]) \u2227\n  (n % 3 \u2260 0 \u2192 extract encoded_chars (n - n % 3) (n - 1) =\n    extract original_chars (n - n % 3) (n - 1));\n-- program termination\n\u2203 result,\n  impl s = result \u2227\n  spec result\n\ntheorem correctness\n(s: String)\n: problem_spec implementation s := by\n  sorry", "vc-postamble": "-- #test implementation \"abcdef\" = \"bcaefd\"\n-- #test implementation \"abcde\" = \"bcade\"\n-- #test implementation \"ab\" = \"ab\"", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_39", "vc-description": "/- \nfunction_signature: \"def prime_fib(n: int)\"\ndocstring: |\n    prime_fib returns n-th prime Fibonacci number.\n    Note(George): A proof of this problem requires the resolution of the open conjecture: there are infinitely many prime Fibonacci numbers.\ntest_cases:\n  - input: 1\n    output: 2\n  - input: 2\n    output: 3\n  - input: 3\n    output: 5\n  - input: 4\n    output: 13\n  - input: 5\n    output: 89\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (n: Nat) : Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Nat \u2192 Nat)\n-- inputs\n(n: Nat) :=\n-- spec\nlet spec (result: Nat) :=\n  n > 0 \u2192\n    (\u2203 i, Nat.fib i = result \u2227 Nat.Prime result \u2227\n      (\u2203! S : Finset Nat, S.card = n - 1 \u2227\n      (\u2200 y \u2208 S, (\u2203 k, y = Nat.fib k) \u2227 y < result \u2227 Nat.Prime y))\n    )\n-- program termination\n\u2203 result, implementation n = result \u2227\nspec result\n\ntheorem correctness\n(n: Nat)\n: problem_spec implementation n\n:= by\n  sorry", "vc-postamble": "-- #test implementation 1 = 2\n-- #test implementation 2 = 3\n-- #test implementation 3 = 5\n-- #test implementation 4 = 13\n-- #test implementation 5 = 89", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_4", "vc-description": "/- \nfunction_signature: \"def mean_absolute_deviation(numbers: List[float]) -> float\"\ndocstring: |\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\ntest_cases:\n  - input:\n      - 1.0\n      - 2.0\n      - 3.0\n      - 4.0\n    expected_output: 1.0\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (numbers: List Rat) : Rat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Rat \u2192 Rat)\n-- inputs\n(numbers: List Rat) :=\n-- spec\nlet spec (result: Rat):=\n0 < numbers.length \u2192\n0 \u2264 result \u2227\nresult * numbers.length * numbers.length =\n(numbers.map (fun x => |x * numbers.length - numbers.sum|)).sum;\n-- program terminates\n\u2203 result, implementation numbers = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(numbers: List Rat)\n: problem_spec implementation numbers\n:= by\n  sorry", "vc-postamble": "-- #test implementation [1.0, 2.0, 3.0, 4.0] = 1.0", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_40", "vc-description": "/- \nfunction_signature: \"def triples_sum_to_zero(numbers: List[int]) -> Bool\"\ndocstring: |\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\ntest_cases:\n  - input: [1, 3, 5, 0]\n    expected_output: False\n  - input: [1, 3, -2, 1]\n    expected_output: True\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (numbers: List Int) : Bool :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Int \u2192 Bool)\n-- inputs\n(numbers: List Int) :=\nlet sum_i_j_k (i j k: Nat) : Bool :=\n  numbers[i]! + numbers[j]! + numbers[k]! = 0;\nlet exists_zero := 3 \u2264 numbers.length \u2227 (\u2203 i j k, i \u2260 j \u2227 i \u2260 k \u2227 j \u2260 k \u2227\n i < numbers.length \u2227 j < numbers.length \u2227 k < numbers.length \u2227\n sum_i_j_k i j k)\n-- spec\nlet spec (result: Bool) :=\nresult \u2194 exists_zero\n-- -- program termination\n\u2203 result, implementation numbers = result \u2227\nspec result\n\ntheorem correctness\n(numbers : List Int)\n: problem_spec implementation numbers\n:= by\n  sorry", "vc-postamble": "-- #test implementation [1, 3, 5, 0] = false\n-- #test implementation [1, 3, -2, 1] = true\n-- #test implementation [1, 2, 3, 7] = false\n-- #test implementation [2, 4, -5, 3, 9, 7] = true\n-- #test implementation [1] = false", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_41", "vc-description": "/- \nfunction_signature: \"def car_race_collision(x: Nat) -> Nat\"\ndocstring: |\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n    This function outputs the number of such collisions.\ntest_cases:\n  - input: 0\n    expected_output: 0\n  - input: 5\n    expected_output: 25\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (x : Nat) : Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Nat \u2192 Nat)\n-- inputs\n(x : Nat) :=\n-- spec\nlet spec (result: Nat) :=\n  \u2203 x_list : List Nat, x_list.length = x \u2227 x_list.all (fun i => i = x)\n  \u2227 x_list.sum = result\n-- -- program termination\n\u2203 result, implementation x = result \u2227\nspec result\n\ntheorem correctness\n(x : Nat)\n: problem_spec implementation x\n:= by\n  sorry", "vc-postamble": "-- #test implementation 0 = 0\n-- #test implementation 5 = 25", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_42", "vc-description": "/- \nfunction_signature: \"def incr_list(numbers: List[Int]) -> List[Int]\"\ndocstring: |\n    incr_list takes a list of integers as input and returns a new list\n    where each element is incremented by 1.\ntest_cases:\n  - input: []\n    expected_output: []\n  - input: [1, 3, -2, 1]\n    expected_output: [2, 4, -1, 2]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (numbers: List Int) : List Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Int \u2192 List Int)\n-- inputs\n(numbers: List Int) :=\n-- spec\nlet spec (result: List Int) :=\n  (result.length = numbers.length) \u2227\n  \u2200 i, i < numbers.length \u2192\n  result[i]! = numbers[i]! + 1\n-- -- program termination\n\u2203 result, implementation numbers = result \u2227\nspec result\n\ntheorem correctness\n(numbers : List Int)\n: problem_spec implementation numbers\n:= by\n  sorry", "vc-postamble": "-- #test implementation [1, 2, 3] = [2, 3, 4]\n-- #test implementation [5, 3, 5, 2, 3, 3, 9, 0, 123] = [6, 4, 6, 3, 4, 4, 10, 1, 124]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_43", "vc-description": "/- \nfunction_signature: \"def pairs_sum_to_zero(numbers: List[int]) -> Bool\"\ndocstring: |\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\ntest_cases:\n  - input: [1, 3, 5, 0]\n    expected_output: False\n  - input: [1, 3, -2, 1]\n    expected_output: False\n  - input: [1]\n    expected_output: False\n  - input: [2, 4, -5, 3, 5, 7]\n    expected_output: True\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (numbers: List Int) : Bool :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Int \u2192 Bool)\n-- inputs\n(numbers: List Int) :=\nlet sum_i_j (i j: Nat) : Bool :=\n  numbers[i]! + numbers[j]! = 0;\nlet exists_zero := 2 \u2264 numbers.length \u2227 (\u2203 i j, i \u2260 j \u2227\n i < numbers.length \u2227 j < numbers.length \u2227\n sum_i_j i j)\n-- spec\nlet spec (result: Bool) :=\nresult \u2194 exists_zero\n-- -- program termination\n\u2203 result, implementation numbers = result \u2227\nspec result\n\ntheorem correctness\n(numbers : List Int)\n: problem_spec implementation numbers\n:= by\n  sorry", "vc-postamble": "-- #test implementation [1, 3, 5, 0] = false\n-- #test implementation [1, 3, -2, 1] = false\n-- #test implementation [1, 2, 3, 7] = false\n-- #test implementation [2, 4, -5, 3, 5, 7] = true\n-- #test implementation [1] = false", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_44", "vc-description": "/- \nfunction_signature: \"def change_base(x: Nat, base: Nat) -> String\"\ndocstring: |\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\ntest_cases:\n  - input: (8, 3)\n    expected_output: '22'\n  - input: (8, 2)\n    expected_output: '1000'\n  - input: (7, 2)\n    expected_output: '111'\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (x base: Nat) : String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Nat \u2192 Nat -> String)\n-- inputs\n(x base: Nat) :=\n-- spec\nlet spec (result: String) :=\nlet result_array := result.toList.map (fun c => c.toNat - '0'.toNat);\nlet pow_array := (List.range result_array.length).map (fun i => base^(result_array.length - i - 1) * result_array[i]!);\nlet pow_sum := pow_array.sum;\n(0 < base \u2227 base \u2264 10) \u2227\n(\u2200 i, i < result_array.length \u2192\nresult_array[i]! < base \u2227 0 \u2264 result_array[i]! \u2192\npow_sum = x);\n-- program termination\n\u2203 result, implementation x base = result \u2227\nspec result\n\ntheorem correctness\n(x base : Nat)\n: problem_spec implementation x base\n:= by\n  sorry", "vc-postamble": "-- #test implementation 8 3 = '22'\n-- #test implementation 8 2 = '1000'\n-- #test implementation 7 2 = '111'", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_45", "vc-description": "/- \nfunction_signature: \"def triangle_area(a: float, h: float) -> float\"\ndocstring: |\n    Given length of a side and high return area for a triangle.\ntest_cases:\n  - input: (5, 3)\n    expected_output: 7.5\n  - input: (8, 2)\n    expected_output: 8.0\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (a h: Rat) : Rat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Rat \u2192 Rat -> Rat)\n-- inputs\n(a h: Rat) :=\n-- spec\nlet spec (result: Rat) :=\n  a = 0 \u2192 result = 0 \u2227\n  (a \u2260 0 \u2192 (2 * result) / a = h);\n-- -- program termination\n\u2203 result, implementation a h = result \u2227\nspec result\n\ntheorem correctness\n(a h : Rat)\n: problem_spec implementation a h\n:= by\n  sorry", "vc-postamble": "-- #test implementation 5 3 = 7.5\n-- #test implementation 8 2 = 8.0", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_46", "vc-description": "/- \nfunction_signature: \"def fib4(n: int)\"\ndocstring: |\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\ntest_cases:\n  - input: 5\n    output: 4\n  - input: 6\n    output: 8\n  - input: 7\n    output: 14\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap\n\n/--\nname: fibonacci_non_computable_4\nuse: |\n  Non-computable definition to check if a number is a Fibonacci number such that\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4).\nproblems:\n  - 46\n-/\ninductive fibonacci_non_computable_4 : \u2115 \u2192 \u2115 \u2192 Prop\n| base0 : fibonacci_non_computable_4 0 0\n| base1 : fibonacci_non_computable_4 1 0\n| base2 : fibonacci_non_computable_4 2 2\n| base3 : fibonacci_non_computable_4 3 0\n| step : \u2200 n f\u2081 f\u2082 f\u2083 f\u2084, fibonacci_non_computable_4 n f\u2081 \u2192\nfibonacci_non_computable_4 (n + 1) f\u2082 \u2192\nfibonacci_non_computable_4 (n + 2) f\u2083 \u2192\nfibonacci_non_computable_4 (n + 3) f\u2084 \u2192\nfibonacci_non_computable_4 (n + 4) (f\u2081 + f\u2082 + f\u2083 + f\u2084)", "vc-helpers": "", "vc-definitions": "def implementation (n: Nat) : Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: Nat \u2192 Nat)\n-- inputs\n(n: Nat) :=\n-- spec\nlet spec (result: Nat) :=\nfibonacci_non_computable_4 n result\n-- program terminates\n\u2203 result, impl n = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(n: Nat)\n: problem_spec implementation n\n:= by\n  sorry", "vc-postamble": "-- #test implementation 5 = 4\n-- #test implementation 6 = 8\n-- #test implementation 7 = 14", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_47", "vc-description": "/- \nfunction_signature: \"def median(numbers: List[float]) -> float\"\ndocstring: |\n    Return median of elements in the list l\ntest_cases:\n  - input: [3, 1, 2, 4, 5]\n    output: 3\n  - input: [-10, 4, 6, 1000, 10, 20]\n    output: 15.0\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (numbers: List Rat) : Rat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Rat \u2192 Rat)\n-- inputs\n(numbers: List Rat) :=\n-- spec\nlet spec (result: Rat) :=\n  0 < numbers.length \u2192\n  let less_eq := (numbers.filter (fun x => x \u2264 result));\n  let more_eq := (numbers.filter (fun x => result \u2264 x));\n  let max_more_eq := more_eq.max?;\n  let min_less_eq := less_eq.min?;\n  let less_eq_count := less_eq.length;\n  let more_eq_count := more_eq.length;\n  let eq_count := (numbers.filter (fun x => x = result)).length;\n  (less_eq_count + more_eq_count - eq_count = numbers.length \u2192\n  numbers.length \u2264 2 * less_eq_count \u2192\n  numbers.length \u2264 2 * more_eq_count) \u2227\n  ((numbers.length % 2 = 1 \u2192\n    result \u2208 numbers) \u2227\n    (numbers.length % 2 = 0 \u2192 max_more_eq.isSome \u2227\n    min_less_eq.isSome \u2227\n    2 * result = max_more_eq.get! + min_less_eq.get!));\n-- program termination\n\u2203 result, implementation numbers = result \u2227\nspec result\n\ntheorem correctness\n(numbers: List Rat)\n: problem_spec implementation numbers\n:= by\n  sorry", "vc-postamble": "-- #test implementation [3, 1, 2, 4, 5] = 3\n-- #test implementation [-10, 4, 6, 1000, 10, 20] = 15.0", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_48", "vc-description": "/- \nfunction_signature: \"def is_palindrome(string: str) -> Bool\"\ndocstring: |\n    Checks if given string is a palindrome\ntest_cases:\n  - input: \"\"\n    expected_output: True\n  - input: \"aba\"\n    expected_output: True\n  - input: \"aaaaa\"\n    expected_output: \"True\"\n  - input: \"zbcd\"\n    expected_output: \"False\"\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap\n\n/--\nname: is_palindrome\nuse: |\n  Helper to check if a string is a palindrome.\nproblems:\n  - 10\n  - 48\n-/\ndef is_palindrome\n(s: String): Bool :=\ns = s.toList.reverse.asString", "vc-helpers": "", "vc-definitions": "def implementation (string: String) : Bool :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: String \u2192 Bool)\n-- inputs\n(string: String) :=\n-- spec\nlet spec (result: Bool) :=\nresult \u2194 is_palindrome string\n-- program termination\n\u2203 result, implementation string = result \u2227\nspec result\n\ntheorem correctness\n(s: String)\n: problem_spec implementation s\n:= by\n  sorry", "vc-postamble": "-- #test implementation \"\" = true\n-- #test implementation \"aba\" = true\n-- #test implementation \"aaaaa\" = true\n-- #test implementation \"zbcd\" = false", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_49", "vc-description": "/- \nfunction_signature: \"def modp(n: Nat, p: Nat) -> Nat\"\ndocstring: |\n    Return 2^n modulo p (be aware of numerics).\ntest_cases:\n  - input: [3, 5]\n    expected_output: 3\n  - input: [1101, 101]\n    expected_output: 2\n  - input: [0, 101]\n    expected_output: 0\n  - input: [100, 101]\n    expected_output: 1\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (n p: Nat) : Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Nat \u2192 Nat \u2192 Nat)\n-- inputs\n(n p: Nat) :=\n-- spec\nlet spec (result: Nat) :=\n0 < p \u2227\nresult < p \u2227\n(\u2203 k : Nat, p * k + result = Nat.pow 2 n)\n-- program termination\n\u2203 result, implementation n p = result \u2227\nspec result\n\ntheorem correctness\n(n p: Nat)\n: problem_spec implementation n p\n:= by\n  sorry", "vc-postamble": "-- #test implementation 3 5 = 3\n-- #test implementation 1101 101 = 2\n-- #test implementation 0 101 = 1\n-- #test implementation 3 11 = 8\n-- #test implementation 100 101 = 1", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_5", "vc-description": "/- \nfunction_signature: \"def intersperse(numbers: List[int], delimeter: int) -> List[int]\"\ndocstring: |\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\ntest_cases:\n  - input:\n      - []\n      - 4\n    expected_output: []\n  - input:\n      - [1, 2, 3]\n      - 4\n    expected_output: [1, 4, 2, 4, 3]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (numbers: List Int) (delimeter: Int) : List Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Int \u2192 Int \u2192 List Int)\n-- inputs\n(numbers: List Int)\n(delimeter: Int) :=\n-- spec\nlet spec (result: List Int) :=\n(result.length = 0 \u2227 result = numbers) \u2228\n(result.length = 2 \u2227 numbers.length = 1 \u2227\nresult[0]! = numbers[0]! \u2227 result[1]! = delimeter) \u2228\n(result.length = 2 * numbers.length - 1 \u2227\n\u2200 i, i < numbers.length \u2192\nresult[2 * i]! = numbers[i]! \u2227\n(0 < 2*i - 1 \u2192 result[2 * i - 1]! = delimeter));\n-- program termination\n\u2203 result, implementation numbers delimeter = result \u2227\nspec result\n\ntheorem correctness\n(numbers: List Int)\n(delimeter: Int)\n: problem_spec implementation numbers delimeter\n:= by\n  sorry", "vc-postamble": "-- #test implementation [1, 2, 3] 4 = [1, 4, 2, 4, 3]\n-- #test implementation [] 4 = []\n-- #test implementation [1] 4 = [1]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_50", "vc-description": "/- \nfunction_signature: \"def encode_shift(s: String) -> String\"\ndocstring: |\n    returns encoded string by shifting every character by 5 in the alphabet.\ntest_cases:\n  - input: abc\n    expected_output: fgh\n  - input: xyz\n    expected_output: cde\n  - input: aaa\n    expected_output: fff\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (s: String) : String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: String \u2192 String)\n-- inputs\n(s : String) :=\nlet isAlphabetic (string: String) : Bool :=\n\u2200 i, i < string.length \u2192\nlet c := string.get! \u27e8i\u27e9;\n('a'.toNat \u2264 c.toNat \u2227 c.toNat \u2264 'z'.toNat) \u2228\n('A'.toNat \u2264 c.toNat \u2227 c.toNat \u2264 'Z'.toNat)\n-- spec\nlet spec (result: String) :=\nisAlphabetic result \u2227 isAlphabetic s \u2227\nresult.length = s.length \u2227\n\u2203 k : Nat, k < 26 \u2227\n\u2200 i : Nat, i < s.length \u2192\n((s.get! \u27e8i\u27e9).toNat + k) % 26 = (result.get! \u27e8i\u27e9).toNat\n\u2192 k = 5\n-- program termination\n\u2203 result, implementation s = result \u2227\nspec result\n\ntheorem correctness\n(s: String)\n: problem_spec implementation s\n:= by\n  sorry", "vc-postamble": "-- #test implementation \"abc\" = \"fgh\"\n-- #test implementation \"xyz\" = \"cde\"\n-- #test implementation \"aaa\" = \"fff\"", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_51", "vc-description": "/- \nfunction_signature: \"def remove_vowels(string: str) -> string\"\ndocstring: |\n    remove_vowels is a function that takes string and returns string without vowels.\ntest_cases:\n  - input: \"\"\n    expected_output: \"\"\n  - input: \"abcdef\\nghijklm\"\n    expected_output: \"bcdf\\nghjklm\"\n  - input: \"abcdef\"\n    expected_output: \"bcdf\"\n  - input: \"aaaaa\"\n    expected_output: \"\"\n  - input: \"aaBAA\"\n    expected_output: \"B\"\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (string: String) : String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: String \u2192 String)\n-- inputs\n(string: String) :=\nlet is_consonant (c: Char): Bool :=\n  let vowels := \"aeiouAEIOU\"\n  not (vowels.contains c);\n-- spec\nlet spec (result: String) :=\nresult.all (\u03bb c => is_consonant c) \u2227 result.length \u2264 string.length \u2227\n\u2200 c, result.contains c \u2192 string.contains c \u2227\n\u2200 c , string.contains c \u2227 is_consonant c \u2192 (result.contains c);\n-- program termination\n\u2203 result, implementation string = result \u2227\nspec result\n\ntheorem correctness\n(s: String)\n: problem_spec implementation s\n:= by\n  sorry", "vc-postamble": "-- #test implementation \"\" = \"\"\n-- #test implementation \"cat\" = \"catac\"\n-- #test implementation \"cata\" = \"catac\"", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_52", "vc-description": "/- \nfunction_signature: \"def below_threshold(numbers: List[Int], threshold: Int) -> bool\"\ndocstring: Return True if all numbers in the list l are below threshold t, and False otherwise.\ntest_cases:\n  - input: [[1, 2, 4, 10], 100]\n    expected_output: True\n  - input: [[1, 20, 4, 10], 5]\n    expected_output: False\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (numbers: List Int) (threshold: Int) : Bool :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: List Int \u2192 Int \u2192 Bool)\n-- inputs\n(numbers: List Int)\n(threshold: Int) :=\n-- spec\nlet numbers_below_threshold :=\n  \u2200 i, i < numbers.length \u2192 numbers[i]! < threshold;\nlet spec (res: Bool) :=\n(numbers.length = 0 \u2192 res) \u2227\n(res \u2194 numbers_below_threshold)\n-- program terminates\n\u2203 result, impl numbers threshold = result \u2227\n-- return value satisfies spec\nspec result\n-- if result then spec else \u00acspec\n\ntheorem correctness\n(numbers: List Int)\n(threshold: Int)\n: problem_spec implementation numbers threshold  := by\n  sorry", "vc-postamble": "-- #test implementation ([1, 2, 4, 10]: List Int) 100 = true\n-- #test implementation ([1, 20, 4, 10]: List Int) 5 = false", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_53", "vc-description": "/- \nfunction_signature: \"def add(x: Int, y: Int) -> Int\"\ndocstring: Add two numbers x and y\ntest_cases:\n  - input: [2, 3]\n    expected_output: 5\n  - input: [5, 7]\n    expected_output: 12\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (x y: Int) : Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: Int \u2192 Int \u2192 Int)\n-- inputs\n(x y: Int) :=\n-- spec\nlet spec (res: Int) :=\n  res - x - y = 0\n-- program terminates\n\u2203 result, impl x y = result \u2227\n-- return value satisfies spec\nspec result\n-- if result then spec else \u00acspec\n\ntheorem correctness\n(x y: Int)\n: problem_spec implementation x y  := by\n  sorry", "vc-postamble": "-- #test implementation 2 3 = 5\n-- #test implementation 5 7 = 12", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_54", "vc-description": "/- \nfunction_signature: \"def same_chars(s0: string, s1: string) -> Bool\"\ndocstring: Check if two words have the same characters.\ntest_cases:\n  - input: ['eabcdzzzz', 'dddzzzzzzzddeddabc']\n    expected_output: True\n  - input: ['eabcd', 'dddddddabc']\n    expected_output: False\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (s0 s1: String) : Bool :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: String \u2192 String \u2192 Bool)\n-- inputs\n(s0 s1: String) :=\n-- spec\nlet spec (res: Bool) :=\n  res \u2194 (\u2200 c : Char, c \u2208 s0.toList \u2194 c \u2208 s1.toList)\n-- program terminates\n\u2203 result, impl s0 s1 = result \u2227\n-- return value satisfies spec\nspec result\n-- if result then spec else \u00acspec\n\ntheorem correctness\n(s0 s1: String)\n: problem_spec implementation s0 s1  := by\n  sorry", "vc-postamble": "-- #test implementation 'eabcdzzzz' 'dddzzzzzzzddeddabc' = true\n-- #test implementation 'abcd' 'dddddddabc' = true\n-- #test implementation 'dddddddabc' 'abcd' = true\n-- #test implementation 'eabcd' 'dddddddabc' = false\n-- #test implementation 'abcd' 'dddddddabce' = false\n-- #test implementation 'eabcdzzzz' 'dddzzzzzzzddddabc' = false", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_55", "vc-description": "/- \nfunction_signature: \"def fib(n: int) -> int\"\ndocstring: |\n    Return n-th Fibonacci number.\ntest_cases:\n  - input: 10\n    expected_output: 55\n  - input: 1\n    expected_output: 1\n  - input: 8\n    expected_output: 21\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap\n\n/--\nname: fibonacci_non_computable\nuse: |\n  Non-computable definition to check if a number is a Fibonacci number.\nproblems:\n  - 55\nsample_problems:\n  - 3\n-/\ninductive fibonacci_non_computable : \u2115 \u2192 \u2115 \u2192 Prop\n| base0 : fibonacci_non_computable 0 0\n| base1 : fibonacci_non_computable 1 1\n| step  : \u2200 n f\u2081 f\u2082, fibonacci_non_computable n f\u2081 \u2192\nfibonacci_non_computable (n + 1) f\u2082 \u2192\nfibonacci_non_computable (n + 2) (f\u2081 + f\u2082)", "vc-helpers": "", "vc-definitions": "def implementation (n: Nat) : Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Nat \u2192 Nat)\n-- inputs\n(n: Nat) :=\n-- spec\nlet spec (result: Nat) :=\nfibonacci_non_computable n result\n-- program termination\n\u2203 result, implementation n = result \u2227\nspec result\n\ntheorem correctness\n(n: Nat)\n: problem_spec implementation n\n:= by\n  sorry", "vc-postamble": "-- #test implementation 10 = 55\n-- #test implementation 1 = 1\n-- #test implementation 8 = 21", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_56", "vc-description": "/- \nfunction_signature: \"def correct_bracketing(brackets: str) -> Bool\"\ndocstring: |\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket, i.e., (each open bracket is properly closed)\ntest_cases:\n  - input: \"<\"\n    expected_output: False\n  - input: \"<>\"\n    expected_output: True\n  - input: \"<<><>>\"\n    expected_output: True\n  - input: \"><<>\"\n    expected_output: False\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap\n\n/--\nname: balanced_paren_non_computable\nuse: |\n  Non-computable definition to check if a string is balanced with respect to parentheses.\nproblems:\n  - 1\n  - 6\n  - 132\nsample_problems:\n  - 0\n-/\ndef balanced_paren_non_computable\n(paren_string: String) (bracket_type_left : Char) (bracket_type_right: Char): Prop\n:=\nlet chars := paren_string.toList;\n(\u2200 (i : \u2115), i \u2264 chars.length \u2192 ((chars.take i).count bracket_type_right) \u2264 ((chars.take i).count bracket_type_left)) \u2227\n(chars.count bracket_type_left = chars.count bracket_type_right)", "vc-helpers": "", "vc-definitions": "def implementation (brackets: String) : Bool :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: String \u2192 Bool)\n-- inputs\n(brackets: String) :=\n-- spec\nlet spec (result: Bool) :=\n  brackets.data.all (fun c => c = '<' \u2228 c = '>') \u2192\n  (result \u2194 balanced_paren_non_computable brackets '<' '>')\n-- program terminates\n\u2203 result, impl brackets = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(brackets: String)\n: problem_spec implementation brackets := by\n  sorry", "vc-postamble": "-- #test implementation \"<\" = false\n-- #test implementation \"<>\" = true\n-- #test implementation \"<<><>>\" = true\n-- #test implementation \"><<>\" = false", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_57", "vc-description": "/- \nfunction_signature: \"def monotonic(numbers: List[int]) -> Bool\"\ndocstring: |\n    Return True if list elements are monotonically increasing or decreasing.\ntest_cases:\n  - input: [1, 2, 4, 20]\n    expected_output: True\n  - input: [1, 20, 4, 10]\n    expected_output: False\n  - input: [4, 1, 0, -10]\n    expected_output: True\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (numbers: List Int) : Bool :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Int \u2192 Bool)\n-- inputs\n(numbers: List Int) :=\nlet non_ordered := \u2203 i j,\ni < numbers.length - 1 \u2227\nj < numbers.length - 1 \u2227\n(numbers[i]! < numbers[i+1]!) \u2227\n(numbers[j+1]! < numbers[j]!);\n-- spec\nlet spec (result: Bool) :=\n  1 < numbers.length \u2192\n  result \u2194 \u00acnon_ordered;\n-- program termination\n\u2203 result, implementation numbers = result \u2227\nspec result\n\ntheorem correctness\n(numbers: List Int)\n: problem_spec implementation numbers\n:= by\n  sorry", "vc-postamble": "-- #test implementation [1, 2, 4, 20] = true\n-- #test implementation [1, 20, 4, 10] = false\n-- #test implementation [4, 1, 0, -10] = true", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_58", "vc-description": "/- \nfunction_signature: \"def common(l1: List[Int], l2: List[Int]) -> List[Int]\"\ndocstring: |\n    Return sorted unique common elements for two lists.\ntest_cases:\n  - input: [[1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]]\n    expected_output: [1, 5, 653]\n  - input: [[5, 3, 2, 8], [3, 2]]\n    expected_output: [2, 3]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (l1 l2: List Int) : List Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Int \u2192 List Int \u2192 List Int)\n-- inputs\n(l1 l2: List Int) :=\nlet is_unique (result: List Int) :=\n  \u2200 i j, i < result.length \u2192 j < result.length \u2192\n  i \u2260 j \u2192 result[i]! \u2260 result[j]!;\nlet is_sorted (result: List Int) :=\n  \u2200 i, i < result.length - 1 \u2192\n  result[i]! \u2264 result[i + 1]!;\n-- spec\nlet spec (result: List Int) :=\n  is_unique result \u2227\n  is_sorted result \u2227\n  (\u2200 i : Int, i \u2208 result \u2194 i \u2208 l1 \u2227 i \u2208 l2)\n-- program termination\n\u2203 result, implementation l1 l2 = result \u2227\nspec result\n\ntheorem correctness\n(l1 l2: List Int)\n: problem_spec implementation l1 l2\n:= by\n  sorry", "vc-postamble": "-- #test implementation [1, 4, 3, 34, 653, 2, 5] [5, 7, 1, 5, 9, 653, 121] = [1, 5, 653]\n-- #test implementation [5, 3, 2, 8] [3, 2] = [2, 3]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_59", "vc-description": "/- \nfunction_signature: \"def largest_prime_factor(n: Nat) -> Nat\"\ndocstring: |\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\ntest_cases:\n  - input: 13195\n    expected_output: 29\n  - input: 2048\n    expected_output: 2\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (n: Nat) : Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Nat \u2192 Nat)\n-- inputs\n(n: Nat) :=\n-- spec\nlet spec (result: Nat) :=\n  1 < n \u2227 \u00ac Nat.Prime n \u2192\n  (Nat.Prime result \u2227 result \u2223 n \u2227\n  \u2200 i, i < n \u2227 i \u2223 n \u2227 Nat.Prime i \u2192 i \u2264 result);\n-- program termination\n\u2203 result, implementation n = result \u2227\nspec result\n\ntheorem correctness\n(n: Nat)\n: problem_spec implementation n\n:= by\n  sorry", "vc-postamble": "-- #test implementation 13195 = 29\n-- #test implementation 2048 = 2", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_6", "vc-description": "/- \nfunction_signature: \"def parse_nested_parens(paren_string: str) -> List[int]\"\ndocstring: |\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\ntest_cases:\n  - input: \"(()()) ((())) () ((())()())\"\n    expected_output: [2, 3, 1, 3]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap\n\n/--\nname: string_eq_iff_data_eq\nuse: |\n  Helper function to prove that two strings are equal if their data is equal.\nproblems: []\nsample_problems:\n  - 0\n-/\ndef string_eq_iff_data_eq (s1: String) (s2: String)\n: s1.data = s2.data \u2194 s1 = s2 :=\nby\n  apply Iff.intro\n  intro h\n  cases s1\n  cases s2\n  simp at h\n  simp [h]\n  intro h\n  apply String.data_eq_of_eq\n  exact h\n\n/--\nname: balanced_paren_non_computable\nuse: |\n  Non-computable definition to check if a string is balanced with respect to parentheses.\nproblems:\n  - 1\n  - 6\n  - 132\nsample_problems:\n  - 0\n-/\ndef balanced_paren_non_computable\n(paren_string: String) (bracket_type_left : Char) (bracket_type_right: Char): Prop\n:=\nlet chars := paren_string.toList;\n(\u2200 (i : \u2115), i \u2264 chars.length \u2192 ((chars.take i).count bracket_type_right) \u2264 ((chars.take i).count bracket_type_left)) \u2227\n(chars.count bracket_type_left = chars.count bracket_type_right)\n\n/--\nname: count_max_paren_depth_helper\nuse: |\n  Helper to count the maximum depth of parentheses in a string.\nproblems:\n  - 6\n  - 132\n-/\ndef count_max_paren_depth_helper\n(paren_string: String) (num_open: Int) (max_depth: Nat): Nat :=\n-- Recursively count the maximum depth of parentheses\nif paren_string.isEmpty then\n  max_depth\nelse\n  let c := paren_string.get! 0\n  if c == '(' then\n    let new_num_open := num_open + 1\n    count_max_paren_depth_helper (paren_string.drop 1) (new_num_open) (max_depth.max new_num_open.toNat)\n  else if c == ')' then\n    count_max_paren_depth_helper (paren_string.drop 1) (num_open - 1) max_depth\n  else\n    count_max_paren_depth_helper (paren_string.drop 1) num_open max_depth\ntermination_by paren_string.length\ndecreasing_by\n  all_goals\n  {\n    rename_i h_non_empty_string\n    rw [String.drop_eq, String.length]\n    simp\n    rw [String.isEmpty_iff] at h_non_empty_string\n    by_cases h_paren_nil : paren_string.length \u2264 0\n    rw [Nat.le_zero_eq] at h_paren_nil\n    rw [\u2190string_eq_iff_data_eq] at h_non_empty_string\n    have h_temp : \"\".data = [] := by simp\n    rw [h_temp] at h_non_empty_string\n    rw [String.length] at h_paren_nil\n    rw [List.length_eq_zero_iff] at h_paren_nil\n    contradiction\n    have h_temp : paren_string.length > 0 := by linarith\n    assumption\n  }\n\n/--\nname: count_max_paren_depth\nuse: |\n  Function to count the maximum depth of parentheses in a string.\nproblems:\n  - 6\n  - 132\n-/\ndef count_max_paren_depth\n(paren_string: String): Nat :=\ncount_max_paren_depth_helper paren_string 0 0", "vc-helpers": "", "vc-definitions": "def implementation (paren_string: String) : List Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: String \u2192 List Int)\n-- inputs\n(paren_string: String)\n:=\n-- spec\nlet spec (result: List Int) :=\nlet paren_space_split := paren_string.split (fun x => x = ' ');\nresult.length = paren_space_split.length \u2227\n\u2200 i, i < result.length \u2192\nlet group := paren_space_split[i]!;\nbalanced_paren_non_computable group '(' ')' \u2192\n0 < result[i]! \u2227 count_max_paren_depth group = result[i]!.toNat;\n-- program termination\n\u2203 result, implementation paren_string = result \u2227\nspec result\n\ntheorem correctness\n(paren_string: String)\n: problem_spec implementation paren_string\n:= by\n  sorry", "vc-postamble": "-- #test implementation \"(()()) ((())) () ((())()())\" = [2, 3, 1, 3]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_60", "vc-description": "/- \nfunction_signature: \"def sum_to_n(n: Nat) -> Nat\"\ndocstring: |\n    sum_to_n is a function that sums numbers from 1 to n.\ntest_cases:\n  - input: 30\n    expected_output: 465\n  - input: 100\n    expected_output: 4950\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (n: Nat) : Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Nat \u2192 Nat)\n-- inputs\n(n : Nat) :=\n-- spec\nlet spec (result: Nat) :=\n  0 < n \u2192\n  (result = 1 \u2194 n = 1) \u2227\n  (\u2200 i, implementation (i + 1) - (implementation i) = i + 1)\n-- program termination\n\u2203 result, implementation n = result \u2227\nspec result\n\ntheorem correctness\n(n: Nat)\n: problem_spec implementation n\n:= by\n  sorry", "vc-postamble": "-- #test implementation 30 = 465\n-- #test implementation 100 = 5050\n-- #test implementation 5 = 15\n-- #test implementation 10 = 55\n-- #test implementation 1 = 1", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_61", "vc-description": "/- \nfunction_signature: \"def correct_bracketing(brackets: str) -> Bool\"\ndocstring: |\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\ntest_cases:\n  - input: \"(\"\n    expected_output: False\n  - input: \"()\"\n    expected_output: True\n  - input: \"(()())\"\n    expected_output: True\n  - input: \")(()\"\n    expected_output: False\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap\n\n/--\nname: balanced_paren_non_computable\nuse: |\n  Non-computable definition to check if a string is balanced with respect to parentheses.\nproblems:\n  - 1\n  - 6\n  - 132\nsample_problems:\n  - 0\n-/\ndef balanced_paren_non_computable\n(paren_string: String) (bracket_type_left : Char) (bracket_type_right: Char): Prop\n:=\nlet chars := paren_string.toList;\n(\u2200 (i : \u2115), i \u2264 chars.length \u2192 ((chars.take i).count bracket_type_right) \u2264 ((chars.take i).count bracket_type_left)) \u2227\n(chars.count bracket_type_left = chars.count bracket_type_right)", "vc-helpers": "", "vc-definitions": "def implementation (paren_string: String) : Bool :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: String \u2192 Bool)\n-- inputs\n(brackets: String) :=\n-- spec\nlet spec (result: Bool) :=\n  brackets.data.all (fun c => c = '(' \u2228 c = ')') \u2192\n  (result \u2194 balanced_paren_non_computable brackets '(' ')')\n-- program terminates\n\u2203 result, impl brackets = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(brackets: String)\n: problem_spec implementation brackets := by\n  sorry", "vc-postamble": "-- #test implementation \"(\" = false\n-- #test implementation \"()\" = true\n-- #test implementation \"(()())\" = true\n-- #test implementation \")(()\" = false", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_62", "vc-description": "/- \nfunction_signature: \"def derivative(xs: List Int) -> List Int\"\ndocstring: |\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\ntest_cases:\n  - input: [3, 1, 2, 4, 5]\n    expected_output: [1, 4, 12, 20]\n  - input: [1, 2, 3]\n    expected_output: [2, 6]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap\n\nnoncomputable def check_derivative : List \u2124 \u2192 List \u2124\n  | []       => []\n  | (x::rest)  => (Polynomial.eval 1 (Polynomial.derivative (Polynomial.C x * Polynomial.X ^ rest.length))) :: (check_derivative rest)", "vc-helpers": "", "vc-definitions": "def implementation (xs: List Int) : List Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(impl: List Int \u2192 List Int)\n-- inputs\n(xs: List Int) :=\n-- spec\nlet spec (result: List Int) :=\n  result.length = xs.length - 1 \u2227\n  result = (check_derivative xs.reverse).reverse\n-- program terminates\n\u2203 result, impl xs = result \u2227\n-- return value satisfies spec\nspec result\n\ntheorem correctness\n(xs: List Int)\n: problem_spec implementation xs := by\n  sorry", "vc-postamble": "-- #test implementation [3, 1, 2, 4, 5] : List Int = [1, 4, 12, 20]\n-- #test implementation [1, 2, 3] : List Int = [2, 6]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_63", "vc-description": "/- \nfunction_signature: \"def fibfib(n: int)\"\ndocstring: |\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\nNote(Meghana): While the specification asks for an efficient computation of fibfib, we cannot enforce this constraint currently.\ntest_cases:\n  - input: 1\n    output: 0\n  - input: 5\n    output: 4\n  - input: 8\n    output: 24\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap\n\n/--\nname: fibonacci_non_computable_3\nuse: |\n  Non-computable definition to check if a number is a Fibonacci number such that\n  fib(n) = fib(n - 1) + fib(n - 2) + fib(n - 3).\nproblems:\n  - 63\n-/\ninductive fibonacci_non_computable_3 : \u2115 \u2192 \u2115 \u2192 Prop\n| base0 : fibonacci_non_computable_3 0 0\n| base1 : fibonacci_non_computable_3 1 0\n| base2 : fibonacci_non_computable_3 2 1\n| step : \u2200 n f\u2081 f\u2082 f\u2083, fibonacci_non_computable_3 n f\u2081 \u2192\nfibonacci_non_computable_3 (n + 1) f\u2082 \u2192\nfibonacci_non_computable_3 (n + 2) f\u2083 \u2192\nfibonacci_non_computable_3 (n + 3) (f\u2081 + f\u2082 + f\u2083)", "vc-helpers": "", "vc-definitions": "def implementation (n: Nat) : Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Nat \u2192 Nat)\n-- inputs\n(n: Nat) :=\n-- spec\nlet spec (result: Nat) :=\nfibonacci_non_computable_3 n result\n-- program termination\n\u2203 result, implementation n = result \u2227\nspec result\n\ntheorem correctness\n(n: Nat)\n: problem_spec implementation n\n:= by\n  sorry", "vc-postamble": "-- #test implementation 1 = 0\n-- #test implementation 5 = 4\n-- #test implementation 8 = 24", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_64", "vc-description": "/- \nfunction_signature: \"def remove_vowels(string: str) -> Nat\"\ndocstring: |\n    Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\ntest_cases:\n  - input: \"abcde\"\n    expected_output: 2\n  - input: \"ACEDY\"\n    expected_output: 3\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (string: String) : Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: String \u2192 Nat)\n-- inputs\n(string: String) :=\nlet isVowel (c : Char) :=\n  let vowels := \"aeiouAEIOU\"\n  vowels.contains c\nlet isY (c : Char) := c = 'y' \u2228 c = 'Y'\n-- spec\nlet spec (result: Nat) :=\nstring.data.all (fun c => c.isAlpha) \u2192\nif string.length = 1 then\n  result = if isVowel string.data[0]! \u2228 isY string.data[0]! then 1 else 0\nelse\n  result = (if isVowel string.data[0]! then 1 else 0) + implementation (string.drop 1);\n-- program termination\n\u2203 result, implementation string = result \u2227\nspec result\n\ntheorem correctness\n(s: String)\n: problem_spec implementation s\n:= by\n  sorry", "vc-postamble": "-- #test implementation \"abcde\" = 2\n-- #test implementation \"ACEDY\" = 3", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_65", "vc-description": "/- \nfunction_signature: \"def circular_shift(x: Int, shift: Int) -> String\"\ndocstring: |\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\ntest_cases:\n  - input: [12, 1]\n    expected_output: 21\n  - input: [12, 2]\n    expected_output: 12\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (x shift: Nat) : String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Nat \u2192 Nat \u2192 String)\n-- inputs\n(x shift: Nat) :=\nlet isReverse (s: String) : Bool :=\n  let n := s.length;\n  \u2200 i, i < n / 2 \u2192 s.get! \u27e8i\u27e9 = s.get! \u27e8n - 1 - i\u27e9;\n-- spec\nlet spec (result: String) :=\nlet x_str := Nat.repr x;\nresult.length = x_str.length \u2227\n(x_str.length < shift \u2192 isReverse x_str) \u2227\n(shift \u2264 x_str.length \u2192\n  x_str.take shift = result.drop (x_str.length - shift) \u2227\n  x_str.drop shift = result.take (x_str.length - shift));\n-- program termination\n\u2203 result, implementation x shift = result \u2227\nspec result\n\ntheorem correctness\n(x shift: Nat)\n: problem_spec implementation x shift\n:= by\n  sorry", "vc-postamble": "-- #test implementation (12 : Int) (1 : Int) = \"21\"\n-- #test implementation (12 : Int) (2 : Int) = \"12\"", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_66", "vc-description": "/- \nfunction_signature: \"def digitSum(string: str) -> Nat\"\ndocstring: |\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\ntest_cases:\n  - input: \"\"\n    expected_output: 0\n  - input: \"abAB\"\n    expected_output: 131\n  - input: \"helloE\"\n    expected_output: 69\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (string: String) : Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: String \u2192 Nat)\n-- inputs\n(string: String) :=\nlet isUpper (c : Char) :=\n  65 \u2264 c.toNat \u2227 c.toNat \u2264 90\n-- spec\nlet spec (result: Nat) :=\nif string.length = 1 then\n  result = if isUpper string.data[0]! then string.data[0]!.toNat else 0\nelse\n  result = (if isUpper string.data[0]! then string.data[0]!.toNat else 0) + implementation (string.drop 1);\n-- program termination\n\u2203 result, implementation string = result \u2227\nspec result\n\ntheorem correctness\n(s: String)\n: problem_spec implementation s\n:= by\n  sorry", "vc-postamble": "-- #test implementation \"\" = 0\n-- #test implementation \"abAB\" = 131\n-- #test implementation \"abcCd\" = 67\n-- #test implementation \"helloE\" = 69\n-- #test implementation \"woArBld\" = 131\n-- #test implementation \"aAaaaXa\" = 153", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_67", "vc-description": "/- \nfunction_signature: \"def fruit_distribution(string: str, Nat n) -> Nat\"\ndocstring: |\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\ntest_cases:\n  - input: [\"5 apples and 6 oranges\", 19]\n    expected_output: 8\n  - input: [\"0 apples and 1 oranges\", 3]\n    expected_output: 2\n  - input: [\"2 apples and 3 oranges\", 100]\n    expected_output: 95\n  - input: [\"100 apples and 1 oranges\", 120]\n    expected_output: 19\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (string: String) (n: Nat) : Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: String \u2192 Nat \u2192 Nat)\n-- inputs\n(string: String)\n(n : Nat) :=\n-- spec\nlet spec (result: Nat) :=\n\u2203 x y : Nat, x + y = n - result\n\u2227 (String.join [x.repr, \" apples and \", y.repr, \" oranges\"] = string)\n-- program termination\n\u2203 result, implementation string n = result \u2227\nspec result\n\ntheorem correctness\n(s: String) (n : Nat)\n: problem_spec implementation s n\n:= by\n  sorry", "vc-postamble": "-- #test implementation \"5 apples and 6 oranges\" 19 = 8\n-- #test implementation \"0 apples and 1 oranges\" 3 = 2\n-- #test implementation \"2 apples and 3 oranges\" 100 = 95\n-- #test implementation \"100 apples and 1 oranges\" 120 = 19", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_68", "vc-description": "/- \nfunction_signature: \"def pluck(numbers: List[Int]) -> List[Int]\"\ndocstring: |\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smallest_value, its index ],\n    If there are no even values or the given array is empty, return [].\ntest_cases:\n  - input: [4, 2, 3]\n    expected_output: [2, 1]\n  - input: [1, 2, 3]\n    expected_output: [2, 1]\n  - input: []\n    expected_output: []\n  - input: [5, 0, 3, 0, 4, 2]\n    expected_output: [0, 1]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (numbers: List Nat) : List Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Nat \u2192 List Nat)\n-- inputs\n(numbers: List Nat) :=\n-- spec\nlet spec (result: List Nat) :=\n(result.length = 0 \u2194 \u2200 i, i < numbers.length \u2192 numbers[i]! % 2 = 1) \u2227\n(result.length = 2 \u2194 \u2203 i, i < numbers.length \u2227\n  numbers[i]! % 2 = 0 \u2227\n  result[0]! = numbers[i]! \u2227\n  result[1]! = i \u2227\n  (\u2200 j, j < numbers.length \u2192 j < i \u2192 (numbers[j]! % 2 = 1 \u2228 numbers[i]! < numbers[j]!)) \u2227\n  (\u2200 k, k < numbers.length \u2192 numbers[k]! % 2 = 0 \u2192 numbers[i]! \u2264 numbers[k]!));\n-- program termination\n\u2203 result, implementation numbers = result \u2227\nspec result\n\ntheorem correctness\n(numbers: List Nat)\n: problem_spec implementation numbers\n:= by\n  sorry", "vc-postamble": "-- #test implementation [4, 2, 3] = [2, 1]\n-- #test implementation [1, 2, 3] = [2, 1]\n-- #test implementation [] = []\n-- #test implementation [5, 0, 3, 0, 4, 2] = [0, 1]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_69", "vc-description": "/- \nfunction_signature: \"def search(numbers: List[int]) -> int\"\ndocstring: |\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\ntest_cases:\n  - input: [4, 1, 2, 2, 3, 1]\n    expected_output: 2\n  - input: [1, 2, 2, 3, 3, 3, 4, 4, 4]\n    expected_output: 3\n  - input: [5, 5, 4, 4, 4]\n    expected_output: -1\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (numbers: List Int) : (Int) :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Int \u2192 Int)\n-- inputs\n(numbers: List Int) :=\n-- spec\nlet spec (result: Int) :=\n0 < numbers.length \u2227 numbers.all (fun n => 0 < n) \u2192\n(result \u2260 -1 \u2194 \u2203 i : Nat, i < numbers.length \u2227\n  numbers[i]! = result \u2227 numbers[i]! > 0 \u2227\n  numbers[i]! \u2264 (numbers.filter (fun x => x = numbers[i]!)).length \u2227\n  (\u00ac\u2203 j : Nat, j < numbers.length \u2227\n  numbers[i]! < numbers[j]! \u2227 numbers[j]! \u2264 numbers.count numbers[j]!));\n-- program termination\n\u2203 result, implementation numbers = result \u2227\nspec result\n\ntheorem correctness\n(numbers: List Int)\n: problem_spec implementation numbers\n:= by\n  sorry", "vc-postamble": "-- #test implementation [4, 1, 2, 2, 3, 1] = 2\n-- #test implementation [1, 2, 2, 3, 3, 4, 4, 4] = 3\n-- #test implementation [5, 5, 4, 4, 4] = -1", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_7", "vc-description": "/- \nfunction_signature: \"def filter_by_substring(strings: List[str], substring: str) -> List[str]\"\ndocstring: |\n  Filter an input list of strings only for ones that contain given substring\ntest_cases:\n  - input:\n    - []\n    - \"a\"\n    expected_output: []\n  - input:\n    - [\"abc\", \"bacd\", \"cde\", \"array\"]\n    - \"a\"\n    expected_output: [\"abc\", \"bacd\", \"array\"]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (strings: List String) (substring: String): List String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List String \u2192 String \u2192 List String)\n-- inputs\n(strings: List String)\n(substring: String)\n:=\n-- spec\nlet spec (result: List String) :=\n(\u2200 i, i < result.length \u2192 result[i]!.containsSubstr substring \u2192\n\u2200 j, j < strings.length \u2227 strings[j]!.containsSubstr substring \u2192 strings[j]! \u2208 result \u2192\n\u2200 j, j < result.length \u2192 result.count result[j]! = strings.count result[j]!);\n-- program termination\n\u2203 result, implementation strings substring = result \u2227\nspec result\n\ntheorem correctness\n(strings: List String)\n(substring: String)\n: problem_spec implementation strings substring\n:= by\n  sorry", "vc-postamble": "-- #test implementation [] \"a\" = []\n-- #test implementation [\"abc\", \"bacd\", \"cde\", \"array\"] \"a\" = [\"abc\", \"bacd\", \"array\"]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_70", "vc-description": "/- \nfunction_signature: \"def strange_sort_list(lst: List[int]) -> List[int]\"\ndocstring: |\n    Given list of integers, return list in strange order.\n    Strange sorting is when you start with the minimum value,\n    then the maximum of the remaining integers, then the minimum and so on.\ntest_cases:\n  - input: [1, 2, 3, 4]\n    expected_output: [1, 4, 2, 3]\n  - input: [5, 5, 5, 5]\n    expected_output: [5, 5, 5, 5]\n  - input: []\n    expected_output: []\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (lst: List Int): List Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Int \u2192 List Int)\n-- inputs\n(lst: List Int) :=\n-- spec\nlet spec (result: List Int) :=\n  let sorted_lst := lst.mergeSort;\n  (List.Perm lst result)\n  \u2227 (forall i, (0 <= i \u2227 i < lst.length \u2227 i % 2 = 0) \u2192 result[i]! = sorted_lst[i / 2]!)\n  \u2227 (forall i, (0 <= i \u2227 i < lst.length \u2227 i % 2 = 1) \u2192 result[i]! = sorted_lst[lst.length - (i-1)/2 - 1]!)\n-- program termination\n\u2203 result, implementation lst = result \u2227 spec result\n\ntheorem correctness\n(lst: List Int)\n: problem_spec implementation lst\n:= by\n  sorry", "vc-postamble": "-- #test implementation [1, 2, 3, 4] = [1, 4, 2, 3]\n-- #test implementation [5, 6, 7, 8, 9] = [5, 9, 6, 8, 7]\n-- #test implementation [1, 2, 3, 4, 5] = [1, 5, 2, 4, 3]\n-- #test implementation [5, 6, 7, 8, 9, 1] = [1, 9, 5, 8, 6, 7]\n-- #test implementation [5, 5, 5, 5] = [5, 5, 5, 5]\n-- #test implementation [] = []\n-- #test implementation [1,2,3,4,5,6,7,8] = [1, 8, 2, 7, 3, 6, 4, 5]\n-- #test implementation [0,2,2,2,5,5,-5,-5] = [-5, 5, -5, 5, 0, 2, 2, 2]\n-- #test implementation [111111] = [111111]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_71", "vc-description": "/- \nfunction_signature: \"def triangle_area(a: float, b: float, c: float) -> float\"\ndocstring: |\n    Given the lengths of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points\n    if the three sides form a valid triangle. Otherwise return -1. Three sides make a valid triangle when the sum of\n    any two sides is greater than the third side.\ntest_cases:\n  - input: (3, 4, 5)\n    expected_output: 6\n  - input: (1, 2, 10)\n    expected_output: -1\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (a: Rat) (b: Rat) (c: Rat): Rat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Rat \u2192 Rat \u2192 Rat \u2192 Rat)\n-- inputs\n(a: Rat) (b: Rat) (c: Rat) :=\n-- spec\nlet spec (result : Rat) :=\n  let is_valid_triangle :=\n    (a + b > c) \u2227  (a + c > b) \u2227 (b + c > a);\n  let s :=\n    (a + b + c) / 2;\n  if is_valid_triangle then\n    |result^2 - (s * (s-a) * (s-b) * (s-c))| \u2264 ((1: Rat)/10000)\n  else\n    result = -1\n-- program termination\n\u2203 result, implementation a b c = result \u2227\nspec result\n\ntheorem correctness\n(a: Rat) (b: Rat) (c: Rat)\n: problem_spec implementation a b c\n:= by\n  sorry", "vc-postamble": "-- #test implementation 3 4 5 = 6.00\n-- #test implementation 1 2 10 = -1\n-- #test implementation 4 8 5 = 8.18\n-- #test implementation 2 2 2 = 1.73\n-- #test implementation 1 2 3 = -1\n-- #test implementation 10 5 7 = 16.25\n-- #test implementation 2 6 3 = -1\n-- #test implementation 1 1 1 =  0.43\n-- #test implementation 2 2 10 = -1", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_72", "vc-description": "/- \nfunction_signature: \"def will_it_fly(q: List[int], w: int) -> bool\"\ndocstring: |\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is\n    less than or equal the maximum possible weight w.\ntest_cases:\n  - input: ([1, 2], 5)\n    expected_output: False\n  - input: ([3, 2, 3], 1)\n    expected_output: False\n  - input: ([3, 2, 3], 9)\n    expected_output: True\n  - input: ([3], 5)\n    expected_output: True\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (q: List Int) (w: Int) : Bool :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Int \u2192 Int \u2192 Bool)\n-- inputs\n(q: List Int) (w: Int) :=\n-- spec\nlet spec (result : Bool) :=\n  (result \u2192 (List.Palindrome q)) \u2227\n  (result \u2192 (List.sum q \u2264 w)) \u2227\n  (\u00ac(List.Palindrome q) \u2192 \u00ac result) \u2227\n  (\u00ac(List.sum q \u2264 w) \u2192 \u00ac result)\n-- program termination\n\u2203 result, implementation q w = result \u2227\nspec result\n\ntheorem correctness\n(q: List Int) (w: Int)\n: problem_spec implementation q w\n:= by\n  sorry", "vc-postamble": "-- #test implementation [3, 2, 3] 9 = True\n-- #test implementation [1, 2] 5 = False\n-- #test implementation [3] 5 = True\n-- #test implementation [3, 2, 3] 1 = False\n-- #test implementation [1, 2, 3] 6 = False\n-- #test implementation [5] 5 = True", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_73", "vc-description": "/- \nfunction_signature: \"def smallest_change(arr: List[int]) -> int\"\ndocstring: |\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\ntest_cases:\n  - input: [1,2,3,5,4,7,9,6]\n    expected_output: 4\n  - input: [1, 2, 3, 4, 3, 2, 2]\n    expected_output: 1\n  - input: [1, 2, 3, 2, 1]\n    expected_output: 0\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (arr: List Int) : Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Int \u2192 Int)\n-- inputs\n(arr: List Int) :=\n-- spec\nlet spec (result : Int) :=\n  let swaps_done (arr1: List Int) (arr2: List Int) :=\n    ((List.finRange (arr1.length)).filter (fun idx => arr1[idx]? \u2260 arr2[idx]?)).length/2\n  \u2200 palin_perm, (List.Perm arr palin_perm) \u2227 (List.Palindrome palin_perm) \u2192\n    result \u2264 (swaps_done arr palin_perm)\n-- program termination\n\u2203 result, implementation arr = result \u2227\nspec result\n\ntheorem correctness\n(arr: List Int)\n: problem_spec implementation arr\n:= by\n  sorry", "vc-postamble": "-- #test implementation [1,2,3,5,4,7,9,6] = 4\n-- #test implementation [1, 2, 3, 4, 3, 2, 2] = 1\n-- #test implementation [1, 4, 2] = 1\n-- #test implementation [1, 4, 4, 2] = 1\n-- #test implementation [1, 2, 3, 2, 1] = 0\n-- #test implementation [3, 1, 1, 3] = 0\n-- #test implementation [1] = 0\n-- #test implementation [0, 1] = 1", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_74", "vc-description": "/- \nfunction_signature: \"def total_match(lst1: List[str], lst2: List[str]) -> List[str]\"\ndocstring: |\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n  If the two lists have the same number of chars, return the first list.\ntest_cases:\n  - input: ([], [])\n    expected_output: []\n  - input: (['hi', 'admin'], ['hI', 'Hi'])\n    expected_output: ['hI', 'Hi']\n  - input: (['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    expected_output: ['hi', 'admin']\n  - input: (['hi', 'admin'], ['hI', 'hi', 'hi'])\n    expected_output: ['hI', 'hi', 'hi']\n  - input: (['4'], ['1', '2', '3', '4', '5'])\n    expected_output: ['4']\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (lst1: List String) (lst2: List String) : List String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List String \u2192 List String \u2192 List String)\n-- inputs\n(lst1: List String) (lst2: List String) :=\nlet sum_chars (xs: List String) : Int :=\n  xs.foldl (\u03bb acc a => acc + a.length) 0;\n-- spec\nlet spec (result : List String) :=\n  ((result = lst1) \u2228 (result = lst2))\n  \u2227\n  (sum_chars result \u2264 sum_chars lst1)\n  \u2227\n  (sum_chars result \u2264 sum_chars lst2)\n  \u2227\n  ((sum_chars lst1 = sum_chars lst2) \u2192 (result = lst1))\n-- program termination\n\u2203 result, implementation lst1 lst2 = result \u2227\nspec result\n\ntheorem correctness\n(lst1: List String) (lst2: List String)\n: problem_spec implementation lst1 lst2\n:= by\n  sorry", "vc-postamble": "-- #test implementation [] [] = []\n-- #test implementation [\"hi\", \"admin\"] [\"hi\", \"hi\"] = [\"hi\", \"hi\"]\n-- #test implementation [\"hi\", \"admin\"] [\"hi\", \"hi\", \"admin\", \"project\"] = [\"hi\", \"admin\"]\n-- #test implementation [\"4\"] [\"1\", \"2\", \"3\", \"4\", \"5\"] = [\"4\"]\n-- #test implementation [\"hi\", \"admin\"] [\"hI\", \"Hi\"] = [\"hI\", \"Hi\"]\n-- #test implementation [\"hi\", \"admin\"] [\"hI\", \"hi\", \"hi\"] = [\"hI\", \"hi\", \"hi\"]\n-- #test implementation [\"hi\", \"admin\"] [\"hI\", \"hi\", \"hii\"] = [\"hi\", \"admin\"]\n-- #test implementation [] [\"this\"] = []\n-- #test implementation [\"this\"] [] == []", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_75", "vc-description": "/- \nfunction_signature: \"def is_multiply_prime(a: int) -> bool\"\ndocstring: |\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise. Knowing that (a) is less then 100.\ntest_cases:\n  - input: 30\n    expected_output: True\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (a: Int) : Bool :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Int \u2192 Bool)\n-- inputs\n(a: Int) :=\n-- spec\nlet spec (result: Bool) :=\n  (a < 100) \u2192\n    result \u2194 exists a' b c, (Nat.Prime a') \u2227 (Nat.Prime b) \u2227 (Nat.Prime c) \u2227 (a == a'*b*c)\n-- program termination\n\u2203 result, implementation a = result \u2227\nspec result\n\ntheorem correctness\n(a: Int)\n: problem_spec implementation a\n:= by\n  sorry", "vc-postamble": "-- #test implementation 5 = False\n-- #test implementation 30 = True\n-- #test implementation 8 = True\n-- #test implementation 10 = False\n-- #test implementation 125 = True\n-- #test implementation (3 * 5 * 7) = True\n-- #test implementation (3 * 6 * 7) = False\n-- #test implementation (9 * 9 * 9) = False\n-- #test implementation (11 * 9 * 9) = False\n-- #test implementation (11*13*7) = True", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_76", "vc-description": "/- \nfunction_signature: \"def is_simple_power(x: int, n: int) -> bool\"\ndocstring: |\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases. x is a simple power of n if n**int=x\ntest_cases:\n  - input: (1, 4)\n    expected_output: True\n  - input: (2, 2)\n    expected_output: True\n  - input: (8, 2)\n    expected_output: True\n  - input: (3, 2)\n    expected_output: False\n  - input: (3, 1)\n    expected_output: False\n  - input: (5, 3)\n    expected_output: False\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (x: Int) (n: Int) : Bool :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Int \u2192 Int \u2192 Bool)\n-- inputs\n(x: Int) (n: Int) :=\n-- spec\nlet spec (result: Bool) :=\n  result \u2194 exists k: Nat, x = n^k\n-- program termination\n\u2203 result, implementation x n = result \u2227\nspec result\n\ntheorem correctness\n(x: Int) (n: Int)\n: problem_spec implementation x n\n:= by\n  sorry", "vc-postamble": "-- #test implementation 16 2 = True\n-- #test implementation 143214 16 = False\n-- #test implementation 4 2 = True\n-- #test implementation 9 3 = True\n-- #test implementation 16 4 = True\n-- #test implementation 24 2 = False\n-- #test implementation 128 4 = False\n-- #test implementation 12 6 = False\n-- #test implementation 1 1 = True\n-- #test implementation 1 12 = True", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_77", "vc-description": "/- \nfunction_signature: \"def iscube(a: int) -> bool\"\ndocstring: |\n    Write a function that takes an integer a and returns True if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\ntest_cases:\n  - input: 1\n    expected_output: True\n  - input: 2\n    expected_output: False\n  - input: -1\n    expected_output: True\n  - input: 64\n    expected_output: True\n  - input: 0\n    expected_output: True\n  - input: 180\n    expected_output: False\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (a: Int) : Bool :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Int \u2192 Bool)\n-- inputs\n(a: Int) :=\n-- spec\nlet spec (result: Bool) :=\n  result \u2194 exists n: Int, a = n^3\n-- program termination\n\u2203 result, implementation a = result \u2227\nspec result\n\ntheorem correctness\n(a: Int)\n: problem_spec implementation a\n:= by\n  sorry", "vc-postamble": "-- #test implementation 1 = True\n-- #test implementation 2 = False\n-- #test implementation -1 = True\n-- #test implementation 64 = True\n-- #test implementation 180 = False\n-- #test implementation 1000 = True\n-- #test implementation 0 = True\n-- #test implementation 1729 = False", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_78", "vc-description": "/- \nfunction_signature: \"def hex_key(num: string) -> int\"\ndocstring: |\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\ntest_cases:\n  - input: \"AB\"\n    expected_output: 1\n  - input: \"1077E\"\n    expected_output: 2\n  - input: \"ABED1A33\"\n    expected_output: 4\n  - input: \"123456789ABCDEF0\"\n    expected_output: 6\n  - input: \"2020\"\n    expected_output: 2\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (num: String) : Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: String \u2192 Int)\n-- inputs\n(num: String) :=\n-- spec\nlet spec (result: Int) :=\n  let num_val (ch : Char) :=\n    if ch.isDigit then\n      (ch.toNat - '0'.toNat)\n    else if ch.isUpper then\n      ((ch.toNat - 'A'.toNat) + 10)\n    else 0;\n  0 < num.length \u2192\n  (\n    let char_val := num_val num.toList[0]!;\n    (Nat.Prime char_val \u2192\n      (1 < num.length \u2192 result = char_val + implementation (num.drop 1)) \u2227\n      (1 = num.length \u2192 result = char_val)) \u2227\n    (\u00acNat.Prime char_val \u2192\n      (1 < num.length \u2192 result = implementation (num.drop 1)) \u2227\n      (1 = num.length \u2192 result = 0))\n  )\n-- program termination\n\u2203 result, implementation num = result \u2227\nspec result\n\ntheorem correctness\n(num: String)\n: problem_spec implementation num\n:= by\n  sorry", "vc-postamble": "-- #test implementation \"AB\" = 1\n-- #test implementation \"1077E\" = 2\n-- #test implementation \"ABED1A33\" = 4\n-- #test implementation \"2020\" = 2\n-- #test implementation \"123456789ABCDEF0\" = 6\n-- #test implementation \"112233445566778899AABBCCDDEEFF00\" = 12\n-- #test implementation \"\" = 0", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_79", "vc-description": "/- \nfunction_signature: \"def decimal_to_binary(decimal: nat) -> string\"\ndocstring: |\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\ntest_cases:\n  - input: 15\n    expected_output: \"db1111db\"\n  - input: 32\n    expected_output: \"db100000db\"\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (decimal: Nat) : String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Nat \u2192 String)\n-- inputs\n(decimal: Nat) :=\n-- spec\nlet spec (result: String) :=\n  4 < result.length \u2227\n  result.drop (result.length - 2) = \"db\" \u2227\n  result.take 2 = \"db\" \u2227\n  let resultTrimmed := (result.toList.drop 2).dropLast.dropLast.map (fun c => c.toNat - '0'.toNat)\n  decimal = Nat.ofDigits 2 resultTrimmed.reverse\n-- program termination\n\u2203 result, implementation decimal = result \u2227\nspec result\n\ntheorem correctness\n(decimal: Nat)\n: problem_spec implementation decimal\n:= by\n  sorry", "vc-postamble": "-- #test implementation 0 = \"db0db\"\n-- #test implementation 32 = \"db100000db\"\n-- #test implementation 103 = \"db1100111db\"\n-- #test implementation 15 = \"db1111db\"", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_8", "vc-description": "/- \nfunction_signature: \"def sum_product(numbers: List[int]) -> Tuple[int, int]\"\ndocstring: |\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\ntest_cases:\n  - input: []\n    expected_output: (0, 1)\n  - input: [1, 2, 3, 4]\n    expected_output: (10, 24)\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (numbers: List Int) : (Int \u00d7 Int) :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Int \u2192 (Int \u00d7 Int))\n-- inputs\n(numbers: List Int) :=\n-- spec\nlet spec (result: (Int \u00d7 Int)) :=\nlet (sum, prod) := result;\n(numbers = [] \u2192 sum = 0 \u2227 prod = 1) \u2227\n(numbers \u2260 [] \u2192\n(let (sum_tail, prod_tail) := implementation numbers.tail;\nsum - sum_tail = numbers[0]! \u2227\nsum_tail * prod_tail + prod = sum * prod_tail));\n-- program termination\n\u2203 result, implementation numbers = result \u2227\nspec result\n\ntheorem correctness\n(numbers: List Int)\n: problem_spec implementation numbers\n:= by\n  sorry", "vc-postamble": "-- #test implementation [] = (0, 1)\n-- #test implementation [1, 2, 3, 4] = (10, 24)", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_80", "vc-description": "/- \nfunction_signature: \"def is_happy(s: str) -> bool\"\ndocstring: |\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\ntest_cases:\n  - input: \"a\"\n    output: False\n  - input: \"aa\"\n    output: False\n  - input: \"abcd\"\n    output: True\n  - input: \"aabb\"\n    output: False\n  - input: \"adb\"\n    output: True\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (s: String) : Bool :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: String \u2192 Bool)\n-- inputs\n(s: String) :=\n-- spec\nlet spec (result : Bool) :=\n  result \u2194\n  (3 \u2264 s.length) \u2227\n  \u00ac (\u2203 i j, i < j \u2227 j < s.length \u2227 j - i \u2264 2 \u2227 s.data[i]! = s.data[j]!)\n-- program termination\n\u2203 result,\n  implementation s = result \u2227\n  spec result\n\ntheorem correctness\n(s: String)\n: problem_spec implementation s\n:= by\n  sorry", "vc-postamble": "-- #test implementation \"a\" = False\n-- #test implementation \"aa\" = False\n-- #test implementation \"abcd\" = True\n-- #test implementation \"aabb\" = False\n-- #test implementation \"adb\" = True", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_81", "vc-description": "/- \nfunction_signature: \"def numerical_letter_grade(grades: list[float]) -> list[str]\"\ndocstring: |\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n    Note: I have included a hypothesis that Float is hashable, not sure if this will mess up proving attempts but we can modify it if so. Reviewer: please think if there's a better way.\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\ntest_cases:\n  - input: [4.0, 3, 1.7, 2, 3.5]\n    output: ['A+', 'B', 'C-', 'C', 'A-']\nnote: formalization uses a list of tuples instead of a hashmap because Hashable Float is not available in the standard library.\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (grades: List Float) : List String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Float \u2192 List String)\n-- inputs\n(grades: List Float) :=\n-- spec\nlet grade_dict : List (Float \u00d7 String) :=\n  [\n    (4.0, \"A+\"),\n    (3.7, \"A\"),\n    (3.3, \"A-\"),\n    (3.0, \"B+\"),\n    (2.7, \"B\"),\n    (2.3, \"B-\"),\n    (2.0, \"C+\"),\n    (1.7, \"C\"),\n    (1.3, \"C-\"),\n    (1.0, \"D+\"),\n    (0.7, \"D\"),\n    (0.0, \"D-\")\n  ]\nlet spec (result : List String) :=\n  grades.all (fun grade => 0.0 \u2264 grade \u2227 grade \u2264 4.0) \u2227\n  result.length = grades.length \u2227\n  \u2200 i, i < grades.length \u2192\n    let number_grade := grades[i]!\n    let number_grade_keys := grade_dict.map (fun (g, _) => g)\n    if 0.0 < number_grade then\n      \u2203 i : Nat, i < number_grade_keys.length \u2227\n        number_grade_keys[i]! \u2264 number_grade \u2227\n        (\u2200 k' : Nat, k' < number_grade_keys.length \u2192 number_grade_keys[k']! \u2264 number_grade \u2192 number_grade_keys[k']! \u2264 number_grade_keys[i]!) \u2227\n        result[i]! = (grade_dict[i]!).snd\n    else\n      result[i]! = \"E\"\n-- program termination\n\u2203 result,\n  implementation grades = result \u2227\n  spec result\n\ntheorem correctness\n(grades: List Float)\n: problem_spec implementation grades\n:= by\n  sorry", "vc-postamble": "-- #test implementation [4.0, 3, 1.7, 2, 3.5] = ['A+', 'B', 'C-', 'C', 'A-']", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_82", "vc-description": "/- \nfunction_signature: \"def prime_length(s: str) -> bool\"\ndocstring: |\n    Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\ntest_cases:\n  - input: \"Hello\"\n    output: True\n  - input: \"abcdcba\"\n    output: True\n  - input: \"kittens\"\n    output: True\n  - input: \"orange\"\n    output: False\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (s: String) : Bool :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: String \u2192 Bool)\n-- inputs\n(s: String) :=\n-- spec\nlet spec (result : Bool) :=\nlet is_prime (n: Nat) : Prop :=\n  \u00ac (\u2203 k, 2 \u2264 k \u2227 k < n \u2227 n % k = 0);\n  result \u2194 is_prime s.length\n-- program termination\n\u2203 result,\n  implementation s = result \u2227\n  spec result\n\ntheorem correctness\n(s: String)\n: problem_spec implementation s\n:= by\n  sorry", "vc-postamble": "-- #test implementation \"Hello\" = True\n-- #test implementation \"abcdcba\" = True\n-- #test implementation \"kittens\" = True\n-- #test implementation \"orange\" = False", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_83", "vc-description": "/- \nfunction_signature: \"def starts_one_ends(n: int) -> int\"\ndocstring: |\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    Note: For reviewer, I believe this is the most straightforward spec, and I am relying on Set cardianlity not being computable in general. The point of this problem is really to privide a formula.\n    Note: But I guess a program that goes through each number and adds 1 will be the same as a program that computes in O(1) under this view.\ntest_cases:\n  - input: 1\n    output: 1\n  - input: 2\n    output: 18\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (n: Nat) : Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Nat \u2192 Nat)\n-- inputs\n(n: Nat) :=\n-- spec\nlet spec (result : Nat) :=\n  0 < n \u2192\n  result = {k : \u2115 | 10 ^ (n - 1) \u2264 k \u2227 k < 10 ^ n \u2227 (k.repr.front = '1' \u2228 k.repr.back = '1')}.ncard\n-- program termination\n\u2203 result,\n  implementation n = result \u2227\n  spec result\n\ntheorem correctness\n(n: Nat)\n: problem_spec implementation n\n:= by\n  sorry", "vc-postamble": "-- #test implementation 1 = 1\n-- #test implementation 2 = 18", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_84", "vc-description": "/- \nfunction_signature: \"def solve(n: int) -> str\"\ndocstring: |\n    Given a positive integer N, return the total sum of its digits in binary.\ntest_cases:\n  - input: 1000\n    output: \"1\"\n  - input: 150\n    output: \"110\"\n  - input: 147\n    output: \"1100\"\nNote: The spec formalization takes the result, makes it a list of 0/1s and then reverse it and uses Nat.ofDigits. The reversal is because ofDigits expects little-endian order.\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (n: Nat) : String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Nat \u2192 String)\n-- inputs\n(n: Nat) :=\n-- spec\nlet spec (result : String) :=\n  0 < n \u2192\n  result.all (fun c => c = '0' \u2228 c = '1') \u2192\n  Nat.ofDigits 2 (result.data.map (fun c => if c = '0' then 0 else 1)).reverse = (Nat.digits 10 n).sum\n-- program termination\n\u2203 result,\n  implementation n = result \u2227\n  spec result\n\ntheorem correctness\n(n: Nat)\n: problem_spec implementation n\n:= by\n  sorry", "vc-postamble": "-- #test implementation 1000 = \"1\"\n-- #test implementation 150 = \"110\"\n-- #test implementation 147 = \"1100\"", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_85", "vc-description": "/- \nfunction_signature: \"def solve(n: list[int]) -> int\"\ndocstring: |\n    Given a non-empty list of integers lst, add the even elements that are at odd indices.\ntest_cases:\n  - input: [4, 2, 6, 7]\n    output: 2\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (lst: List Int) : Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Int \u2192 Int)\n-- inputs\n(lst: List Int) :=\n-- spec\nlet spec (result : Int) :=\n  lst.length = 0 \u2192 result = 0 \u2227\n  lst.length > 0 \u2192\n    if lst.length > 1 then\n      result = (if Even lst[1]! then lst[1]! else 0) + implementation (lst.drop 2)\n    else\n      result = (if Even lst[1]! then lst[1]! else 0)\n-- program termination\n\u2203 result,\n  implementation lst = result \u2227\n  spec result\n\ntheorem correctness\n(lst: List Int)\n: problem_spec implementation lst\n:= by\n  sorry", "vc-postamble": "-- #test implementation [4, 2, 6, 7] = 2", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_86", "vc-description": "/- \nfunction_signature: \"def anti_shuffle(s : str) -> str\"\ndocstring: |\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\ntest_cases:\n  - input: \"Hi\"\n    output: \"Hi\"\n  - input: \"hello\"\n    output: \"ehllo\"\n  - input: \"Hello World!!!\"\n    output: \"Hello !!!Wdlor\"\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (s: String) : String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: String \u2192 String)\n-- inputs\n(s: String) :=\n-- spec\nlet spec (result : String) :=\n  result.length = s.length \u2227\n  let words := result.split (fun c => c = ' ');\n  let s_words := s.split (fun c => c = ' ');\n  s_words.length = words.length \u2227\n  \u2200 i, i < words.length \u2192\n    words[i]!.length = s_words[i]!.length \u2227\n    ((\u2200 j, j < words[i]!.length \u2192\n      (words[i]!.data[j]! \u2208 s_words[i]!.data \u2227\n      s_words[i]!.data[j]! \u2208 words[i]!.data \u2227\n      words[i]!.data.count (words[i]!.data[j]!) = s_words[i]!.data.count (s_words[i]!.data[j]!))) \u2227\n    List.Sorted Nat.le (words[i]!.data.map (fun c => c.val.toNat)))\n-- program termination\n\u2203 result,\n  implementation s = result \u2227\n  spec result\n\ntheorem correctness\n(s: String)\n: problem_spec implementation s\n:= by\n  sorry", "vc-postamble": "-- #test implementation \"Hi\" = \"Hi\"\n-- #test implementation \"hello\" = \"ehllo\"\n-- #test implementation \"Hello World!!!\" = \"Hello !!!Wdlor\"", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_87", "vc-description": "/- \nfunction_signature: \"def get_coords_sorted(lst : list(list(int)), x : int) -> list((int, int))\"\ndocstring: |\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\ntest_cases:\n  - input: [[[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1]\n    output: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  - input: [[], 1]\n    output: []\n  - input: [[[], [1], [1, 2, 3]], 3]\n    output: [(2, 2)]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (lst: List (List Int)) (x: Int) : List (Nat \u00d7 Nat) :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List (List Int) \u2192 Int \u2192 List (Nat \u00d7 Nat))\n-- inputs\n(lst: List (List Int))\n(x: Int) :=\n-- spec\nlet spec (result : List (Nat \u00d7 Nat)) :=\n  (\u2200 i, i < result.length \u2192\n    let (row, col) := result[i]!\n    row < lst.length \u2227\n    col < lst[row]!.length \u2227\n    (lst[row]!)[col]! = x) \u2227\n  (\u2200\u1d49 (i < lst.length) (j < lst[i]!.length),\n    (lst[i]!)[j]! = x \u2192 (i, j) \u2208 result) \u2227\n  (result.map (fun (r, _) => r)).Sorted Nat.le \u2227\n  (\u2200 i < result.length,\n    let (row, _) := result[i]!\n    ((result.filter (fun (r, _) => r = row)).map (fun (_, c) => c)).Sorted (fun a b => a \u2265 b))\n-- program termination\n\u2203 result,\n  implementation lst x = result \u2227\n  spec result\n\ntheorem correctness\n(lst: List (List Int))\n(x: Int)\n: problem_spec implementation lst x\n:= by\n  sorry", "vc-postamble": "-- #test implementation \"Hi\" = \"Hi\"\n-- #test implementation \"hello\" = \"ehllo\"\n-- #test implementation \"Hello World!!!\" = \"Hello !!!Wdlor\"", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_88", "vc-description": "/- \nfunction_signature: \"def sort_array(lst : list(int)) -> list(int)\"\ndocstring: |\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n    Note(George): I have elected to ignore the copy part.\ntest_cases:\n  - input: []\n    output: []\n  - input: [5]\n    output: [5]\n  - input: [2, 4, 3, 0, 1, 5]\n    output: [0, 1, 2, 3, 4, 5]\n  - input: [2, 4, 3, 0, 1, 5, 6]\n    output: [6, 5, 4, 3, 2, 1, 0]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (lst: List Nat) : List Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Nat \u2192 List Nat)\n-- inputs\n(lst: List Nat) :=\n-- spec\nlet spec (result : List Nat) :=\n  lst.length > 0 \u2192\n  result.length = lst.length \u2227\n  (\u2200 i, i < result.length \u2192\n    result[i]! \u2208 lst \u2227\n    lst[i]! \u2208 result \u2227\n    result.count (lst[i]!) = lst.count (lst[i]!)) \u2227\n  (lst.head! + lst.getLast!) \u2261 1 [MOD 2] \u2192\n    result.Sorted Nat.le \u2227\n  (lst.head! + lst.getLast!) \u2261 0 [MOD 2] \u2192\n    result.Sorted (fun a b => a \u2265 b)\n-- program termination\n\u2203 result,\n  implementation lst = result \u2227\n  spec result\n\ntheorem correctness\n(lst: List Nat)\n: problem_spec implementation lst\n:= by\n  sorry", "vc-postamble": "-- #test implementation [] = []\n-- #test implementation [5] = [5]\n-- #test implementation [2, 4, 3, 0, 1, 5] = [0, 1, 2, 3, 4, 5]\n-- #test implementation [2, 4, 3, 0, 1, 5, 6] = [6, 5, 4, 3, 2, 1, 0]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_89", "vc-description": "/- \nfunction_signature: \"def encrypt(str : str) -> str\"\ndocstring: |\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\ntest_cases:\n  - input: \"hi\"\n    output: \"lm\"\n  - input: \"asdfghjkl\"\n    output: \"ewhjklnop\"\n  - input: \"gf\"\n    output: \"kj\"\n  - input: \"et\"\n    output: \"ix\"\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (str: String) : String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: String \u2192 String)\n-- inputs\n(str: String) :=\n-- spec\nlet spec (result : String) :=\n  result.data.all (fun c => c.isLower) \u2192\n  result.length = str.length \u2227\n  (\u2200 i, i < str.length \u2192\n    let c := str.data[i]!\n    let c' := result.data[i]!\n    ((c'.toNat - 97) + 2 * 2) % 26 = (c.toNat - 97))\n-- program termination\n\u2203 result,\n  implementation str = result \u2227\n  spec result\n\ntheorem correctness\n(str: String)\n: problem_spec implementation str\n:= by\n  sorry", "vc-postamble": "-- #test implementation \"hi\" = \"lm\"\n-- #test implementation \"asdfghjkl\" = \"ewhjklnop\"\n-- #test implementation \"gf\" = \"kj\"\n-- #test implementation \"et\" = \"ix\"", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_9", "vc-description": "/- \nfunction_signature: \"def rolling_max(numbers: List[int]) -> Tuple[int, int]\"\ndocstring: |\n  From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\ntest_cases:\n  - input: [1, 2, 3, 2, 3, 4, 2]\n    expected_output: [1, 2, 3, 3, 3, 4, 4]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (numbers: List Int) : List Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Int \u2192 List Int)\n-- inputs\n(numbers: List Int) :=\n-- spec\nlet spec (result: List Int) :=\nresult.length = numbers.length \u2227\n\u2200 i, i < numbers.length \u2192\n(result[i]! \u2208 numbers.take (i + 1) \u2227\n\u2200 j, j \u2264 i \u2192 numbers[j]! \u2264 result[i]!);\n-- program termination\n\u2203 result, implementation numbers = result \u2227\nspec result\n\ntheorem correctness\n(numbers: List Int)\n: problem_spec implementation numbers\n:= by\n  sorry", "vc-postamble": "-- #test implementation [1, 2, 3, 2, 3, 4, 2] = [1, 2, 3, 3, 3, 4, 4]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_90", "vc-description": "/- \nfunction_signature: \"def next_smallest(lst: List[int]) -> Optional[int]\"\ndocstring: |\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    TODO(George): Remove this when being reviewed\n    The spec is defined as: if result is none there is no second smallest element, which\n    exists in a finite list iff there are at least two distinct elements in the list.\n    If result is some x, then x is the second smallest element of the list, the spec\n    obtains the sublist of elements smaller than the result, and checks that this\n    sublist does not contain two distinct elements (they are all the same).\ntest_cases:\n  - input: [1, 2, 3, 4, 5]\n    output: 2\n  - input: [5, 1, 4, 3, 2]\n    output: 2\n  - input: []\n    output: None\n  - input: [1, 1]\n    output: None\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (lst: List Int) : Option Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Int \u2192 Option Int)\n-- inputs\n(lst: List Int) :=\n-- spec\nlet spec (result : Option Int) :=\n  match result with\n  | none => \u00ac (\u2203 i j, i < lst.length \u2227 j < lst.length \u2227 i \u2260 j \u2227 lst[i]! < lst[j]!)\n  | some result =>\n    let smaller_els := lst.filter (\u00b7 < result);\n    0 < smaller_els.length \u2227\n    smaller_els.all (\u03bb x => x = smaller_els[0]!);\n-- program termination\n\u2203 result,\n  implementation lst = result \u2227\n  spec result\n\ntheorem correctness\n(lst: List Int)\n: problem_spec implementation lst\n:= by\n  sorry", "vc-postamble": "-- #test implementation [1, 2, 3, 4, 5] = some 2\n-- #test implementation [5, 1, 4, 3, 2] = some 2\n-- #test implementation [] = none\n-- #test implementation [1, 1] = none", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_91", "vc-description": "/- \nfunction_signature: \"def is_bored(s: str) -> int\"\ndocstring: |\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\ntest_cases:\n  - input: \"Hello world\"\n    expected_output: 0\n  - input: \"The sky is blue. The sun is shining. I love this weather\"\n    expected_output: 1\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (s: String) : Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: String \u2192 Nat)\n-- inputs\n(s: String) :=\n-- spec\nlet spec (result : Nat) :=\n  let is_sentence_is_boredom (s: String) : Bool :=\n    (s.startsWith \"I \" \u2228 s.startsWith \" I\") \u2227 '.' \u2209 s.data \u2227 '?' \u2209 s.data \u2227 '!' \u2209 s.data\n  match s.data.findIdx? (\u03bb c => c = '.' \u2228 c = '?' \u2228 c = '!') with\n  | some i =>\n    let j := i + 1;\n    let substring := s.drop j;\n    result = (if is_sentence_is_boredom substring then 1 else 0) + implementation substring\n  | none =>\n    result = if is_sentence_is_boredom s then 1 else 0\n-- program termination\n\u2203 result,\n  implementation s = result \u2227\n  spec result\n\ntheorem correctness\n(s: String)\n: problem_spec implementation s\n:= by\n  sorry", "vc-postamble": "-- #test implementation \"Hello world\" = 0\n-- #test implementation \"The sky is blue. The sun is shining. I love this weather\" = 1", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_92", "vc-description": "/- \nfunction_signature: \"def any_int(a: float, b: float, c: float) -> bool\"\ndocstring: |\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\ntest_cases:\n  - input: [5, 2, 7]\n    expected_output: true\n  - input: [3, 2, 2]\n    expected_output: false\n  - input: [3, -2, 1]\n    expected_output: true\n  - input: [3.6, -2.2, 2]\n    expected_output: false\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (a: Rat) (b: Rat) (c: Rat) : Bool :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Rat \u2192 Rat \u2192 Rat \u2192 Bool)\n-- inputs\n(a: Rat) (b: Rat) (c: Rat) :=\n-- spec\nlet spec (result : Bool) :=\n  let nums := [a, b, c];\n  result = true \u2194 \u2203 i j k : \u2115, {i, j, k} \u2286 ({0, 1, 2} : Set \u2115) \u2227 i \u2260 j \u2227 j \u2260 k \u2227 k \u2260 i \u2227 (nums[i]! + nums[j]! = nums[k]!) \u2227 a.den = 1 \u2227 a.den = b.den \u2227 a.den = c.den\n-- program termination\n\u2203 result,\n  implementation a b c = result \u2227\n  spec result\n\ntheorem correctness\n(a: Rat) (b: Rat) (c: Rat)\n: problem_spec implementation a b c\n:= by\n  sorry", "vc-postamble": "-- #test implementation 5 2 7 = true\n-- #test implementation 3 2 2 = false\n-- #test implementation 3 (-2) 1 = true\n-- #test implementation 3.6 (-2.2) 2 = false", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_93", "vc-description": "/- \nfunction_signature: \"def encode(s : str) -> str\"\ndocstring: |\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\ntest_cases:\n  - input: \"test\"\n    expected_output: \"TGST\"\n  - input: \"This is a message\"\n    expected_output: \"tHKS KS C MGSSCGG\"\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (s: String) : String :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: String \u2192 String)\n-- inputs\n(s: String) :=\n-- spec\nlet spec (result : String) :=\n  s.data.all (\u03bb c => c.isAlpha) \u2192\n  result.length = s.length \u2227\n  (\u2200 i, i < s.length \u2192\n    let c := s.data[i]!;\n    let c' := result.data[i]!;\n    match c with\n    | 'a' | 'e' | 'i' | 'o' | 'u' | 'A' | 'E' | 'I' | 'O' | 'U' =>\n      c.isUpper \u2192 c'.val = c.toLower.val + 2 \u2227\n      c.isLower \u2192 c'.val = c.toUpper.val + 2\n    | _ =>\n      c.isUpper \u2192 c' = c.toLower \u2227\n      c.isLower \u2192 c' = c.toUpper)\n-- program termination\n\u2203 result,\n  implementation s = result \u2227\n  spec result\n\ntheorem correctness\n(s: String)\n: problem_spec implementation s\n:= by\n  sorry", "vc-postamble": "-- #test implementation \"test\" = \"TGST\"\n-- #test implementation \"This is a message\" = \"tHKS KS C MGSSCGG\"", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_94", "vc-description": "/- \nfunction_signature: \"def sum_largest_prime(lst : list[int]) -> int\"\ndocstring: |\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    Note(George): Modified to use List of nats because all examples are nats.\ntest_cases:\n  - input: [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\n    expected_output: 10\n  - input: [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\n    expected_output: 25\n  - input: [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\n    expected_output: 13\n  - input: [0,724,32,71,99,32,6,0,5,91,83,0,5,6]\n    expected_output: 11\n  - input: [0,81,12,3,1,21]\n    expected_output: 3\n  - input: [0,8,1,2,1,7]\n    expected_output: 7\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (lst: List Nat) : Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: List Nat \u2192 Nat)\n-- inputs\n(lst: List Nat) :=\n-- spec\nlet spec (result : Nat) :=\n  lst.any (fun num => Nat.Prime num) \u2192\n    result > 0 \u2227 \u2203 i, i < lst.length \u2227 Prime (lst[i]!) \u2227\n    (\u2200 j, j < lst.length \u2227 Prime (lst[j]!) \u2192 lst[i]! \u2264 lst[j]!) \u2227\n    result = (Nat.digits 10 (lst[i]!)).sum\n-- program termination\n\u2203 result,\n  implementation lst = result \u2227\n  spec result\n\ntheorem correctness\n(lst: List Nat)\n: problem_spec implementation lst\n:= by\n  sorry", "vc-postamble": "-- #test implementation [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] = 10\n-- #test implementation [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] = 25\n-- #test implementation [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] = 13\n-- #test implementation [0,724,32,71,99,32,6,0,5,91,83,0,5,6] = 11\n-- #test implementation [0,81,12,3,1,21] = 3\n-- #test implementation [0,8,1,2,1,7] = 7", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_95", "vc-description": "/- \nfunction_signature: \"def check_dict_case(s : dict[str, str]) -> bool\"\ndocstring: |\n    Given a dictionary, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Note(George): Modified the problem to use strings only for both keys and values.\ntest_cases:\n  - input: {\"a\":\"apple\", \"b\":\"banana\"}\n    expected_output: True\n  - input: {\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}\n    expected_output: False\n  - input: {\"a\":\"apple\", \"b\":\"banana\", \"a\":\"apple\"}\n    expected_output: False\n  - input: {\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}\n    expected_output: False\n  - input: {\"STATE\":\"NC\", \"ZIP\":\"12345\" }\n    expected_output: True\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (D: Std.HashMap String String) : Bool :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Std.HashMap String String \u2192 Bool)\n-- inputs\n(D: Std.HashMap String String) :=\n-- spec\nlet spec (result : Bool) :=\n  match D.isEmpty with\n  | true => result = false\n  | false =>\n    let keys := D.keys\n    let all_lower := keys.all (fun s => s.toLower = s)\n    let all_upper := keys.all (fun s => s.toUpper = s)\n    result = true \u2194 all_lower || all_upper\n-- program termination\n\u2203 result,\n  implementation D = result \u2227\n  spec result\n\ntheorem correctness\n(D: Std.HashMap String String)\n: problem_spec implementation D\n:= by\n  sorry", "vc-postamble": "-- #test implementation (Std.HashMap.ofList [(\"a\", \"apple\"), (\"b\", \"banana\")]) = true\n-- #test implementation (Std.HashMap.ofList [(\"a\", \"apple\"), (\"A\", \"banana\"), (\"B\", \"banana\")]) = false\n-- #test implementation (Std.HashMap.ofList [(\"a\", \"apple\"), (\"b\", \"banana\"), (\"a\", \"apple\")]) = false\n-- #test implementation (Std.HashMap.ofList [(\"Name\", \"John\"), (\"Age\", \"36\"), (\"City\", \"Houston\")]) = false\n-- #test implementation (Std.HashMap.ofList [(\"STATE\", \"NC\"), (\"ZIP\", \"12345\")]) = true", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_96", "vc-description": "/- \nfunction_signature: \"def count_up_to(n : int) -> list[int]\"\ndocstring: |\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\ntest_cases:\n  - input: 5\n    expected_output: [2,3]\n  - input: 11\n    expected_output: [2,3,5,7]\n  - input: 0\n    expected_output: []\n  - input: 20\n    expected_output: [2,3,5,7,11,13,17,19]\n  - input: 1\n    expected_output: []\n  - input: 18\n    expected_output: [2,3,5,7,11,13,17]\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (n: Nat) : List Nat :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Nat \u2192 List Nat)\n-- inputs\n(n: Nat) :=\n-- spec\nlet spec (result : List Nat) :=\n  match n with\n  | 0 => result = []\n  | n => n > 0 \u2192 (\u2200 i, i < result.length \u2192 (Nat.Prime (result[i]!)) \u2227 (result[i]!) < n) \u2227\n         (\u2200 i : Nat, i < n \u2192 Nat.Prime i \u2192 i \u2208 result)\n-- program termination\n\u2203 result,\n  implementation n = result \u2227\n  spec result\n\ntheorem correctness\n(n: Nat)\n: problem_spec implementation n\n:= by\n  sorry", "vc-postamble": "-- #test implementation 5 = [2,3]\n-- #test implementation 11 = [2,3,5,7]\n-- #test implementation 0 = []\n-- #test implementation 20 = [2,3,5,7,11,13,17,19]\n-- #test implementation 1 = []\n-- #test implementation 18 = [2,3,5,7,11,13,17]", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_97", "vc-description": "/- \nfunction_signature: \"def multiply(a : Int, b : Int) -> Int\"\ndocstring: |\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    -- Note(George): I'm finding it hard to not leak the implementation here, so I opted to make the spec more convoluted.\ntest_cases:\n  - input: 148, 412\n    expected_output: 16\n  - input: 19, 28\n    expected_output: 72\n  - input: 2020, 1851\n    expected_output: 0\n  - input: 14, -15\n    expected_output: 20\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (a b: Int) : Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: Int \u2192 Int \u2192 Int)\n-- inputs\n(a b: Int) :=\n-- spec\nlet spec (result : Int) :=\n  |result| \u2264 81 \u2227\n  result % 10 = (a * b) % 10 \u2227\n  ((b%10) \u2260 0 \u2192 (result % (b%10) = 0 \u2227 (result/ (b%10)) % 100 = (a%10))) \u2227\n  ((a%10) \u2260 0 \u2192 (result % (a%10) = 0 \u2227 (result/ (a%10)) % 100 = (b%10))) \u2227\n  ((a%10 = 0) \u2228 (b%10 = 0) \u2192 result = 0)\n-- program termination\n\u2203 result,\n  implementation a b = result \u2227\n  spec result\n\ntheorem correctness\n(a b: Int)\n: problem_spec implementation a b\n:= by\n  sorry", "vc-postamble": "-- #test implementation 148 412 = 16\n-- #test implementation 19 28 = 72\n-- #test implementation 2020 1851 = 0\n-- #test implementation 14 -15 = 20", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_98", "vc-description": "/- \nfunction_signature: \"def count_upper(s : String) -> Int\"\ndocstring: |\n    Given a string s, count the number of uppercase vowels in even indices.\n    -- Note(George): I also feel like this one is hard to not leak, I tried a trick about keeping implementation for a recursive call in the spec. Let me know if this doesn't work..\ntest_cases:\n  - input: \"aBCdEf\"\n    expected_output: 1\n  - input: \"abcdefg\"\n    expected_output: 0\n  - input: \"dBBE\"\n    expected_output: 0\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap", "vc-helpers": "", "vc-definitions": "def implementation (s: String) : Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: String \u2192 Int)\n-- inputs\n(s: String) :=\n-- spec\nlet uppercase_vowels := ['A', 'E', 'I', 'O', 'U']\nlet spec (result : Int) :=\n  let chars := s.toList\n  (result = 0 \u2194 \u2200 i, i < chars.length \u2192 chars[i]! \u2209 uppercase_vowels) \u2227\n  (1 < chars.length \u2192\n    (result - 1 = implementation (chars.drop 2).toString \u2194 chars[0]! \u2208 uppercase_vowels) \u2228\n    (result = implementation (chars.drop 2).toString \u2194 chars[0]! \u2209 uppercase_vowels)\n  )\n-- program termination\n\u2203 result,\n  implementation s = result \u2227\n  spec result\n\ntheorem correctness\n(s: String)\n: problem_spec implementation s\n:= by\n  sorry", "vc-postamble": "-- #test implementation \"aBCdEf\" = 1\n-- #test implementation \"abcdefg\" = 0\n-- #test implementation \"dBBE\" = 0", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
{"id": "clever_99", "vc-description": "/- \nfunction_signature: \"def closest_integer(s : String) -> Option Int\"\ndocstring: |\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\ntest_cases:\n  - input: \"10\"\n    expected_output: 10\n  - input: \"15.3\"\n    expected_output: 15\n-/", "vc-preamble": "import Mathlib\nimport Mathlib.Algebra.Polynomial.Basic\nimport Std.Data.HashMap\nimport Std", "vc-helpers": "", "vc-definitions": "def implementation (s: String) : Option Int :=\n  sorry", "vc-theorems": "def problem_spec\n-- function signature\n(implementation: String \u2192 Option Int)\n-- inputs\n(s: String) :=\n-- spec\nlet numeric_characters := [\"-\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \".\"]\nlet is_valid_string :=\n  s.length > 0 \u2227\n  s.count (\".\".get! 0) \u2264 1 \u2227\n  s.count (\"-\".get! 0) \u2264 1 \u2227\n  s.data.all (fun c => numeric_characters.contains (String.mk [c])) \u2227\n  (s.count (\"-\".get! 0) = 1 \u2192 s.data.head! = '-')\n\nlet spec (result : Option Int) := match result with\n  | some result =>\n    is_valid_string \u2227\n    let parts := s.split (fun c => c = '.')\n    (parts.length = 1 \u2192 result = s.toInt!) \u2227\n    (parts.length = 2 \u2192\n      let integer_part := parts[0]!\n      let is_negative := s.data.head! = '-'\n      |((integer_part.toInt! - result) : \u211a)| \u2264 0.5 \u2227\n      (is_negative \u2192 |((integer_part.toInt! - result) : \u211a)| = 0.5 \u2192 integer_part.toInt? < result) \u2227\n      (\u00acis_negative \u2192 |((integer_part.toInt! - result) : \u211a)| = 0.5 \u2192 integer_part.toInt? > result)\n    )\n  | none => \u00ac is_valid_string\n-- program termination\n\u2203 result,\n  implementation s = result \u2227\n  spec result\n\ntheorem correctness\n(s: String)\n: problem_spec implementation s\n:= by\n  sorry", "vc-postamble": "-- #test implementation \"10\" = some 10\n-- #test implementation \"15.3\" = some 15", "qa_metadata": {"definitions_with_sorry": [], "score": 80, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 80}}
