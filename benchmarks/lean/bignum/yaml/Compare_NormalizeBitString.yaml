vc-preamble: |-
  namespace BignumLean
  
  def ValidBitString (s : String) : Prop :=
    ∀ {i c}, s.get? i = some c → (c = '0' ∨ c = '1')
  
  def Str2Int (s : String) : Nat :=
    s.data.foldl (fun acc ch => 2 * acc + (if ch = '1' then 1 else 0)) 0
  
  
  def NormalizeBitString (s : String) : String :=
    sorry
  
  axiom NormalizeBitString_spec (s : String) (h : ValidBitString s) :
    let t := NormalizeBitString s
    ValidBitString t ∧
    t.length > 0 ∧
    (t.length > 1 → t.get? 0 = some '1') ∧
    Str2Int s = Str2Int t

vc-helpers: |-
  

vc-description: |-
  Bignum task: Compare_NormalizeBitString.
  Implement the function according to the Lean specification.

vc-spec: |-
  def Compare (s1 s2 : String) : Int :=

vc-code: |-
  sorry

vc-theorem: |-
  theorem Compare_spec (s1 s2 : String) :
    (Str2Int s1 < Str2Int s2 → Compare s1 s2 = (-1 : Int)) ∧
    (Str2Int s1 = Str2Int s2 → Compare s1 s2 = 0) ∧
    (Str2Int s1 > Str2Int s2 → Compare s1 s2 = 1) := by

vc-proof: |-
  sorry

vc-postamble: |-
  end BignumLean
