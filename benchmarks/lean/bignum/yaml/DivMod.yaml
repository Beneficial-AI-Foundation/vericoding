vc-preamble: |-
  namespace BignumLean
  
  def ValidBitString (s : String) : Prop :=
    ∀ {i c}, s.get? i = some c → (c = '0' ∨ c = '1')
  
  def Str2Int (s : String) : Nat :=
    s.data.foldl (fun acc ch => 2 * acc + (if ch = '1' then 1 else 0)) 0

vc-helpers: |-
  

vc-description: |-
  Bignum task: DivMod.
  Implement the function according to the Lean specification.

vc-spec: |-
  def DivMod (s1 s2 : String) : (String × String) :=

vc-code: |-
  sorry

vc-theorem: |-
  theorem DivMod_spec (s1 s2 : String) (h1 : ValidBitString s1) (h2 : ValidBitString s2)
    (h2nz : Str2Int s2 ≠ 0) :
    let (q, r) := DivMod s1 s2
    ValidBitString q ∧ ValidBitString r ∧ Str2Int s1 = Str2Int q * Str2Int s2 + Str2Int r := by

vc-proof: |-
  sorry

vc-postamble: |-
  end BignumLean
