vc-description: |-
  /--
  function_signature: "def is_palindrome(string: str) -> Bool"
  docstring: |
      Checks if given string is a palindrome
  test_cases:
    - input: ""
      expected_output: True
    - input: "aba"
      expected_output: True
    - input: "aaaaa"
      expected_output: "True"
    - input: "zbcd"
      expected_output: "False"
  -/

vc-preamble: |-
  import Imports.AllImports

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def implementation (string: String) : Bool :=

vc-implementation: |-
  -- <vc-implementation>
  sorry
  -- </vc-implementation>
  
vc-condition: |-
  def problem_spec
  -- function signature
  (implementation: String → Bool)
  -- inputs
  (string: String) :=
  -- spec
  let spec (result: Bool) :=
  result ↔ is_palindrome string
  -- program termination
  ∃ result, implementation string = result ∧
  spec result
  
  theorem correctness
  (s: String)
  : problem_spec implementation s
  :=

vc-proof: |-
  -- <vc-proof>
  by
  unfold problem_spec
  let result := implementation s
  use result
  simp [result]
  sorry
  -- </vc-proof>

vc-postamble: |-
  -- #test implementation "" = true
  -- #test implementation "aba" = true
  -- #test implementation "aaaaa" = true
  -- #test implementation "zbcd" = false
  
  

