vc-description: |-
  /--
  function_signature: "def strlen(string: str) -> int"
  docstring: |
      Return length of given string
  test_cases:
    - input: ""
      expected_output: 0
    - input: "abc"
      expected_output: 3
  -/

vc-preamble: |-
  import Imports.AllImports

vc-helpers: |-
  -- <vc-helpers>
  -- </vc-helpers>

vc-signature: |-
  def implementation (string: String): Nat :=

vc-implementation: |-
  -- <vc-implementation>
  string.length
  -- </vc-implementation>
  
vc-condition: |-
  def problem_spec
  -- function signature
  (implementation: String → Nat)
  -- inputs
  (string: String) :=
  -- spec
  let spec (result: Nat) :=
  -- every character in the string is counted once
  result = 0 ↔ string.isEmpty ∧
  (0 < result → result - 1 = implementation (string.drop 1))
  -- program termination
  ∃ result, implementation string = result ∧
  spec result
  
  theorem correctness
  (string: String)
  : problem_spec implementation string
  :=

vc-proof: |-
  -- <vc-proof>
  by
  unfold problem_spec
  let result := implementation string
  use result
  simp [result]
  sorry
  -- </vc-proof>

vc-postamble: |-
  #test implementation "" = 0
  #test implementation "abc" = 3
  
  

