vc-preamble: |-
  ghost function Str2Int(s: string): nat
    requires ValidBitString(s)
    decreases s
  {
    if |s| == 0 then  0  else  (2 * Str2Int(s[0..|s|-1]) + (if s[|s|-1] == '1' then 1 else 0))
  }
  predicate ValidBitString(s: string)
  {
    // All characters must be '0' or '1'.
    forall i | 0 <= i < |s| :: s[i] == '0' || s[i] == '1'
  }

  method NormalizeBitString(s: string) returns(t: string)
    // Remove leading zeros, except keep at least one digit
    ensures ValidBitString(t)
    // I added and proved some extra post-conditions:
    ensures |t| > 0
    ensures |t| > 1 ==> t[0] != '0'
    ensures ValidBitString(s) ==> Str2Int(s) == Str2Int(t)
  {
    assume{:axiom} false;
  }
  

vc-helpers: |-

vc-description: |-
  Bignum task: bignum_Compare[NormalizeBitString].
  Implement the method according to the Dafny specification.

vc-spec: |-
  method Compare(s1: string, s2: string) returns (res: int)
    requires ValidBitString(s1) && ValidBitString(s2)
    ensures Str2Int(s1) < Str2Int(s2) ==> res == -1
    ensures Str2Int(s1) == Str2Int(s2) ==> res == 0
    ensures Str2Int(s1) > Str2Int(s2) ==> res == 1
    decreases Str2Int(s1) + Str2Int(s2)

vc-code: |-
  {
    assume false;
  }

vc-postamble: |-
