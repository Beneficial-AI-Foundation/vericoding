vc-preamble: |-
  ghost function Str2Int(s: string): nat
    requires ValidBitString(s)
    decreases s
  {
    if |s| == 0 then  0  else  (2 * Str2Int(s[0..|s|-1]) + (if s[|s|-1] == '1' then 1 else 0))
  }
  predicate ValidBitString(s: string)
  {
    // All characters must be '0' or '1'.
    forall i | 0 <= i < |s| :: s[i] == '0' || s[i] == '1'
  }

vc-helpers: |-

vc-description: |-
  Bignum task: bignum_DivMod.
  Implement the method according to the Dafny specification.

vc-spec: |-
  method DivMod(dividend: string, divisor: string) returns (quotient: string, remainder: string)
    requires ValidBitString(dividend) && ValidBitString(divisor)
    requires Str2Int(divisor) > 0
    ensures ValidBitString(quotient) && ValidBitString(remainder)
    ensures Str2Int(quotient) == Str2Int(dividend) / Str2Int(divisor)
    ensures Str2Int(remainder) == Str2Int(dividend) % Str2Int(divisor)

vc-code: |-
  {
    assume false;
  }

vc-postamble: |-
