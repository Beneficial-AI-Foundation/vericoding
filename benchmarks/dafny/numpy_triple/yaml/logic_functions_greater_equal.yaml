---
vc-description: |-
  numpy.greater_equal: Return the truth value of (x1 >= x2) element-wise.
  
  Returns a boolean sequence where each element indicates whether the
  corresponding element in x1 is greater than or equal to the corresponding
  element in x2.
  
  LIMITATION: This specification uses 'real' type which has total ordering semantics.
  Actual floating-point implementations would need to handle NaN values where
  comparison with NaN always returns false. This specification models the
  mathematical behavior on real numbers, not IEEE floating-point behavior.
vc-preamble: |-
  Looking at the code, it appears to compile correctly as-is. The main issue identified is that the specification models real number semantics rather than floating-point semantics with NaN handling. Since Dafny's `real` type doesn't support NaN values and the task requires minimal changes, I'll preserve the existing structure while ensuring it compiles:
vc-helpers: |-
  
vc-spec: |-
  method numpy_greater_equal(x1: seq<real>, x2: seq<real>) returns (result: seq<bool>)
    // Precondition: input sequences must have the same length
    requires |x1| == |x2|
    
    // Postcondition: result has the same length as inputs
    ensures |result| == |x1|
    
    // Main postcondition: each element is true iff corresponding elements satisfy x1[i] >= x2[i]
    // NOTE: This holds for real numbers but would not hold for floating-point with NaN
    ensures forall i :: 0 <= i < |result| ==> (result[i] <==> x1[i] >= x2[i])
    
    // Reflexivity property: comparing a sequence with itself yields all true
    // NOTE: This holds for reals but not for floating-point NaN values
    ensures x1 == x2 ==> forall i :: 0 <= i < |result| ==> result[i] == true
    
    // Antisymmetry property: if both x1[i] >= x2[i] and x2[i] >= x1[i], then x1[i] == x2[i]
    ensures forall i :: 0 <= i < |result| ==> 
      (result[i] == true && x2[i] >= x1[i]) ==> x1[i] == x2[i]
    
    // Boolean result property: each element is either true or false (trivially satisfied by bool type)
    ensures forall i :: 0 <= i < |result| ==> (result[i] == true || result[i] == false)
    
    // Negation relationship: result[i] is true iff NOT (x1[i] < x2[i])
    ensures forall i :: 0 <= i < |result| ==> (result[i] <==> !(x1[i] < x2[i]))
vc-code: |-
  {
    assume {:axiom} false;
  }
vc-postamble: |-
  
