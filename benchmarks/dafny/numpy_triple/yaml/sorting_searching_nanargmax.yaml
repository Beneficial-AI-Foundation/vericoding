---
vc-description: |-
  Dafny specification for numpy.nanargmax function.
  Returns the index of the maximum value in an array, ignoring NaN values.
  Requires at least one non-NaN element to exist.
vc-preamble: |-
  // Datatype to represent floating point values that can be NaN
  datatype FloatValue = NaN | Value(val: real)
  
  // Predicate to check if a FloatValue is NaN
  predicate IsNaN(f: FloatValue) {
      f.NaN?
  }
  
  // Predicate to check if a FloatValue is not NaN
  predicate IsNotNaN(f: FloatValue) {
      f.Value?
  }
  
  // Function to compare two non-NaN FloatValues
  predicate LessOrEqual(f1: FloatValue, f2: FloatValue)
      requires IsNotNaN(f1) && IsNotNaN(f2)
  {
      f1.val <= f2.val
  }
  
  // Function to check equality of two non-NaN FloatValues
  predicate Equal(f1: FloatValue, f2: FloatValue)
      requires IsNotNaN(f1) && IsNotNaN(f2)
  {
      f1.val == f2.val
  }
  
  // Predicate to check if at least one element in the array is not NaN
  predicate HasNonNaN(a: seq<FloatValue>) {
      exists i :: 0 <= i < |a| && IsNotNaN(a[i])
  }
  
  /**
   * Returns the index of the maximum non-NaN value in the array.
   * In case of ties, returns the index of the first occurrence.
   */
vc-helpers: |-
  
vc-spec: |-
  method nanargmax(a: seq<FloatValue>) returns (idx: nat)
      // Preconditions: array is non-empty and contains at least one non-NaN value
      requires |a| > 0
      requires HasNonNaN(a)
      
      // Postconditions
      ensures 0 <= idx < |a|
      ensures IsNotNaN(a[idx])
      ensures forall j :: 0 <= j < |a| && IsNotNaN(a[j]) ==> LessOrEqual(a[j], a[idx])
      ensures forall j :: 0 <= j < |a| && IsNotNaN(a[j]) && Equal(a[j], a[idx]) ==> idx <= j
vc-code: |-
  {
    assume {:axiom} false;
  }
vc-postamble: |-
  
