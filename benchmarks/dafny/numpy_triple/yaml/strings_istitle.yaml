---
vc-description: |-
  Implementation of numpy.strings.istitle functionality.
  Returns true for each element if the element is a titlecased string with at least one character.
  A string is titlecased if each word starts with uppercase followed by lowercase letters,
  words are separated by non-alphabetic characters, and there is at least one cased character.
vc-preamble: |-
  // Helper predicates for character classification
  predicate IsUpper(c: char)
  {
      'A' <= c <= 'Z'
  }
  
  predicate IsLower(c: char)
  {
      'a' <= c <= 'z'
  }
  
  predicate IsAlpha(c: char)
  {
      IsUpper(c) || IsLower(c)
  }
  
  predicate IsCased(c: char)
  {
      IsUpper(c) || IsLower(c)
  }
  
  // Helper predicate to check if sequence contains at least one cased character
  predicate HasCasedChar(chars: seq<char>)
  {
      exists i :: 0 <= i < |chars| && IsCased(chars[i])
  }
  
  // Recursive helper to check titlecase pattern
  predicate CheckTitleCase(chars: seq<char>, expectUpper: bool)
      decreases |chars|
  {
      if |chars| == 0 then
          true
      else
          var c := chars[0];
          var rest := chars[1..];
          if IsUpper(c) then
              expectUpper && CheckTitleCase(rest, false)
          else if IsLower(c) then
              !expectUpper && CheckTitleCase(rest, false)
          else
              // Non-alphabetic character - next alphabetic char should be uppercase
              CheckTitleCase(rest, true)
  }
  
  // Main predicate to determine if a string is titlecased
  predicate IsTitlecased(s: string)
  {
      |s| > 0 &&
      HasCasedChar(s) &&
      CheckTitleCase(s, true)
  }
  
  // Main method implementing numpy.strings.istitle
vc-helpers: |-
  
vc-spec: |-
  method istitle(a: seq<string>) returns (result: seq<bool>)
      ensures |result| == |a|
      ensures forall i :: 0 <= i < |a| ==> result[i] == IsTitlecased(a[i])
vc-code: |-
  {
    assume {:axiom} false;
  }
vc-postamble: |-
  
