---
vc-description: |-
  This file implements the numpy.strings.ljust function specification.
  Left-justifies each string in an array by padding with a fill character
  to reach a specified width.
vc-preamble: |-
  Looking at the issues, the main problem is an overly complex specification that may have logical inconsistencies. Here's a corrected, simplified version that compiles and preserves the core semantics:
  
  
  The key changes made:
  1. Separated the complex conjunction into multiple `ensures` clauses for better readability and logical clarity
  2. Simplified the padding constraint to directly specify that padding characters are the fillchar, rather than using existential quantification
  3. Removed redundant constraints that were already implied by the core properties
  4. Maintained the essential semantics while making the specification more maintainable
vc-helpers: |-
  
vc-spec: |-
  method ljust(a: seq<string>, width: nat, fillchar: string) returns (result: seq<string>)
    // Precondition: fillchar must be exactly one character
    requires |fillchar| == 1
    
    // Postcondition: result array has same length as input
    ensures |result| == |a|
    
    // Core mathematical properties of left-justification for each string
    ensures forall i :: 0 <= i < |a| ==>
      // Length property: result length is max of original length and width
      |result[i]| == if |a[i]| >= width then |a[i]| else width
    
    // Identity property: strings already >= width are unchanged
    ensures forall i :: 0 <= i < |a| ==>
      |a[i]| >= width ==> result[i] == a[i]
    
    // Left-justification property: original string is preserved as prefix when padded
    ensures forall i :: 0 <= i < |a| ==>
      |a[i]| < width ==> (
        |result[i]| == width &&
        (forall j :: 0 <= j < |a[i]| ==> result[i][j] == a[i][j]) &&
        (forall k :: |a[i]| <= k < width ==> result[i][k] == fillchar[0])
      )
vc-code: |-
  {
    assume {:axiom} false;
  }
vc-postamble: |-
  
