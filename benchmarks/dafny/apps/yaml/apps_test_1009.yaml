vc-description: |-
  Given n cowbells with integer sizes s₁ ≤ s₂ ≤ ... ≤ sₙ and k boxes, find the minimum box size s 
  such that all cowbells can be packed into the k boxes, where each box can hold at most 2 cowbells,
  the sum of cowbell sizes in each box cannot exceed the box size s, and all boxes have the same size s.

vc-preamble: |-
  predicate ValidInput(n: int, k: int, L: seq<int>)
  {
      n >= 1 && k >= 1 && n <= 2*k &&
      |L| == n &&
      (forall i :: 0 <= i < |L|-1 ==> L[i] <= L[i+1]) &&
      (forall i :: 0 <= i < |L| ==> L[i] >= 0)
  }
  
  predicate ValidBoxConfiguration(boxes: seq<int>, boxSize: int)
  {
      |boxes| >= 1 &&
      (forall i :: 0 <= i < |boxes| ==> boxes[i] <= boxSize) &&
      (forall i :: 0 <= i < |boxes| ==> boxes[i] >= 0)
  }
  
  function sum(s: seq<int>): int
  {
      if |s| == 0 then 0 else s[0] + sum(s[1..])
  }
  
  function max(s: seq<int>): int
      requires |s| > 0
  {
      if |s| == 1 then s[0]
      else if s[0] >= max(s[1..]) then s[0]
      else max(s[1..])
  }

vc-helpers: |-

vc-spec: |-
  method solve(n: int, k: int, L: seq<int>) returns (result: int)
      requires ValidInput(n, k, L)
      ensures result >= 0

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

