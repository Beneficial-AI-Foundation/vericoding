vc-description: |-
  Simulate pouring champagne into a pyramid of glasses for t seconds.
  The pyramid has n levels where level i has i glasses (1-indexed).
  Each second, 1 unit is poured into the top glass. Each glass has capacity 1.
  When a glass overflows, excess champagne splits equally to the two glasses below.
  Count the number of completely full glasses after t seconds.

vc-preamble: |-
  predicate ValidInput(n: int, t: int) {
    1 <= n <= 10 && 0 <= t <= 10000
  }
  
  function TotalGlasses(n: int): int {
    n * (n + 1) / 2
  }
  
  predicate ValidResult(result: int, n: int, t: int) {
    result >= 0 && result <= TotalGlasses(n)
  }
  
  predicate CorrectForEdgeCases(result: int, n: int, t: int) {
    (t == 0 ==> result == 0) &&
    (n == 1 && t >= 1 ==> result == 1) &&
    (n == 1 && t == 0 ==> result == 0) &&
    (t >= 1 && n > 1 ==> result >= 1)
  }

vc-helpers: |-

vc-spec: |-
  method solve(n: int, t: int) returns (result: int)
    requires ValidInput(n, t)
    ensures ValidResult(result, n, t)
    ensures CorrectForEdgeCases(result, n, t)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

