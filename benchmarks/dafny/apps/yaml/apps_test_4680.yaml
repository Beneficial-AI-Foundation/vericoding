vc-description: |-
  Given three integers A, B, and C representing syllable counts of three phrases,
  determine if these phrases can be arranged to form a Haiku. A Haiku requires
  exactly two phrases with 5 syllables and one phrase with 7 syllables.

vc-preamble: |-
  predicate ValidInput(A: int, B: int, C: int)
  {
      1 <= A <= 10 && 1 <= B <= 10 && 1 <= C <= 10
  }
  
  predicate CanFormHaiku(A: int, B: int, C: int)
  {
      (A == 5 && B == 5 && C == 7) ||
      (A == 5 && B == 7 && C == 5) ||
      (A == 7 && B == 5 && C == 5)
  }
  
  predicate ValidOutput(result: string)
  {
      result in {"YES", "NO"}
  }

vc-helpers: |-
  

vc-spec: |-
  method solve(A: int, B: int, C: int) returns (result: string)
      requires ValidInput(A, B, C)
      ensures ValidOutput(result)
      ensures result == "YES" <==> CanFormHaiku(A, B, C)

vc-code: |-
  {
      var count5 := 0;
      var count7 := 0;
  
      if A == 5 { count5 := count5 + 1; }
      if A == 7 { count7 := count7 + 1; }
      if B == 5 { count5 := count5 + 1; }
      if B == 7 { count7 := count7 + 1; }
      if C == 5 { count5 := count5 + 1; }
      if C == 7 { count7 := count7 + 1; }
  
      if count5 == 2 && count7 == 1 {
          result := "YES";
      } else {
          result := "NO";
      }
  }

vc-postamble: |-
