vc-description: |-
  Given a positive integer n, express it as a sum of composite numbers using the maximum possible number of summands.
  A composite number is an integer greater than 1 that is not prime (has positive divisors other than 1 and itself).
  For each query, return the maximum number of composite summands, or -1 if no such splitting exists.

vc-preamble: |-
  predicate IsComposite(x: int)
  {
      x >= 4 && exists k :: 2 <= k < x && x % k == 0
  }
  
  predicate ValidInput(queries: seq<int>)
  {
      forall i :: 0 <= i < |queries| ==> queries[i] >= 1
  }
  
  function MaxCompositeSummands(n: int): int
  {
      if n % 4 == 0 then n / 4
      else if n % 4 == 1 && n / 4 >= 2 then n / 4 - 1
      else if n % 4 == 2 && n / 4 >= 1 then n / 4
      else if n % 4 == 3 && n / 4 >= 3 then n / 4 - 1
      else -1
  }
  
  predicate ValidResult(queries: seq<int>, results: seq<int>)
  {
      |results| == |queries| &&
      forall i :: 0 <= i < |queries| ==> results[i] == MaxCompositeSummands(queries[i]) &&
      forall i :: 0 <= i < |queries| ==> results[i] >= -1
  }

vc-helpers: |-

vc-spec: |-
  method solve(queries: seq<int>) returns (results: seq<int>)
      requires ValidInput(queries)
      ensures ValidResult(queries, results)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

