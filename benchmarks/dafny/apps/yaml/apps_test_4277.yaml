vc-description: |-
  Given N people traveling together, determine the minimum cost between two transportation options:
  Train costs A yen per person (total: N*A), Taxi costs B yen total (fixed cost).
  Find the minimum total travel expense.

vc-preamble: |-
  predicate ValidInput(n: int, a: int, b: int)
  {
      1 <= n <= 20 && 1 <= a <= 50 && 1 <= b <= 50
  }
  
  function TrainCost(n: int, a: int): int
  {
      n * a
  }
  
  function MinimumCost(n: int, a: int, b: int): int
  {
      var trainCost := TrainCost(n, a);
      if trainCost < b then trainCost else b
  }
  
  predicate CorrectResult(input: string, result: string)
  {
      var lines := SplitString(input, '\n');
      if |lines| > 0 then
          var parts := SplitString(lines[0], ' ');
          if |parts| >= 3 && IsValidInteger(parts[0]) && IsValidInteger(parts[1]) && IsValidInteger(parts[2]) then
              var n := StringToInt(parts[0]);
              var a := StringToInt(parts[1]);
              var b := StringToInt(parts[2]);
              ValidInput(n, a, b) ==> result == IntToString(MinimumCost(n, a, b)) + "\n"
          else
              result == ""
      else
          result == ""
  }

vc-helpers: |-
  function IsValidInteger(s: string): bool
  {
      |s| > 0 && (s[0] != '-' || |s| > 1) && forall i :: 0 <= i < |s| ==> (s[i] == '-' && i == 0) || ('0' <= s[i] <= '9')
  }
  
  function SplitString(s: string, delimiter: char): seq<string>
  {
      if |s| == 0 then []
      else SplitStringHelper(s, delimiter, 0, 0, [])
  }
  
  function SplitStringHelper(s: string, delimiter: char, start: int, i: int, acc: seq<string>): seq<string>
      requires 0 <= start <= i <= |s|
      decreases |s| - i
  {
      if i == |s| then
          if start == i then acc
          else acc + [s[start..i]]
      else if s[i] == delimiter then
          var part := if start == i then "" else s[start..i];
          SplitStringHelper(s, delimiter, i + 1, i + 1, acc + [part])
      else
          SplitStringHelper(s, delimiter, start, i + 1, acc)
  }
  
  function StringToInt(s: string): int
      requires IsValidInteger(s)
  {
      if |s| == 0 then 0
      else if s[0] == '-' && |s| > 1 then
          -StringToIntHelper(s[1..])
      else
          StringToIntHelper(s)
  }
  
  function StringToIntHelper(s: string): int
      requires |s| > 0 && forall i :: 0 <= i < |s| ==> '0' <= s[i] <= '9'
  {
      if |s| == 0 then 0
      else if |s| == 1 then
          CharToDigit(s[0])
      else
          StringToIntHelper(s[..|s|-1]) * 10 + CharToDigit(s[|s|-1])
  }
  
  function CharToDigit(c: char): int
      requires '0' <= c <= '9'
  {
      (c as int) - ('0' as int)
  }
  
  function IntToString(n: int): string
  {
      if n == 0 then "0"
      else if n < 0 then "-" + IntToStringHelper(-n)
      else IntToStringHelper(n)
  }
  
  function IntToStringHelper(n: int): string
      requires n >= 0
  {
      if n == 0 then ""
      else IntToStringHelper(n / 10) + [DigitToChar(n % 10)]
  }
  
  function DigitToChar(d: int): char
      requires 0 <= d <= 9
  {
      ('0' as int + d) as char
  }

vc-spec: |-
  method solve(input: string) returns (result: string)
      requires |input| > 0
      ensures CorrectResult(input, result)

vc-code: |-
  {
      var lines := SplitString(input, '\n');
      if |lines| == 0 {
          return "";
      }
  
      var parts := SplitString(lines[0], ' ');
      if |parts| < 3 || !IsValidInteger(parts[0]) || !IsValidInteger(parts[1]) || !IsValidInteger(parts[2]) {
          return "";
      }
  
      var n := StringToInt(parts[0]);
      var a := StringToInt(parts[1]);
      var b := StringToInt(parts[2]);
  
      var trainCost := n * a;
  
      var minCost: int;
      if trainCost < b {
          minCost := trainCost;
      } else {
          minCost := b;
      }
  
      result := IntToString(minCost) + "\n";
  }

vc-postamble: |-
