vc-description: |-
  Given n participants and m food packages where each package has a food type,
  determine the maximum number of days an expedition can last under these constraints:
  - Each participant eats exactly one package per day
  - Each participant must eat the same food type throughout the entire expedition
  - Different participants can eat different food types

vc-preamble: |-
  function possible(n: int, foodTypes: seq<int>, days: int): bool
      requires n >= 0
      requires days >= 0
      requires forall i :: 0 <= i < |foodTypes| ==> foodTypes[i] >= 1
  {
      if days == 0 then true
      else
          var totalParticipants := countTotalParticipants(foodTypes, days, 1);
          totalParticipants >= n
  }
  
  function countTotalParticipants(foodTypes: seq<int>, days: int, currentType: int): int
      requires days >= 0
      requires currentType >= 1
      decreases 101 - currentType
      ensures countTotalParticipants(foodTypes, days, currentType) >= 0
      ensures days > 0 ==> countTotalParticipants(foodTypes, days + 1, currentType) <= countTotalParticipants(foodTypes, days, currentType)
  {
      if currentType > 100 then 0
      else
          var packagesOfThisType := countPackages(foodTypes, currentType);
          var participantsForThisType := if days > 0 then packagesOfThisType / days else 0;
          participantsForThisType + countTotalParticipants(foodTypes, days, currentType + 1)
  }
  
  function countPackages(foodTypes: seq<int>, targetType: int): int
      requires targetType >= 1
      ensures countPackages(foodTypes, targetType) >= 0
      ensures countPackages(foodTypes, targetType) <= |foodTypes|
  {
      if |foodTypes| == 0 then 0
      else if foodTypes[0] == targetType then 1 + countPackages(foodTypes[1..], targetType)
      else countPackages(foodTypes[1..], targetType)
  }

vc-helpers: |-
  

vc-spec: |-
  method solve(n: int, m: int, foodTypes: seq<int>) returns (result: int)
      requires 1 <= n <= 100
      requires 1 <= m <= 100
      requires |foodTypes| == m
      requires forall i :: 0 <= i < |foodTypes| ==> 1 <= foodTypes[i] <= 100
      ensures result >= 0
      ensures result <= m
      ensures result > 0 ==> possible(n, foodTypes, result)
      ensures !possible(n, foodTypes, result + 1)
      ensures forall d :: d > result ==> !possible(n, foodTypes, d)

vc-code: |-
  {
      var day := 1;
      while possible(n, foodTypes, day) && day <= m
          invariant day >= 1
          invariant day <= m + 1
          invariant forall d :: 1 <= d < day ==> possible(n, foodTypes, d)
          invariant !possible(n, foodTypes, day) ==> forall d :: d >= day ==> !possible(n, foodTypes, d)
          decreases m + 1 - day
      {
          day := day + 1;
      }
      result := day - 1;
  }

vc-postamble: |-
