vc-description: |-
  Find minimum cost to travel from city 1 to city n on a straight line where adjacent cities are 1 km apart,
  roads are directional (can only go from lower to higher numbered cities), car has fuel tank capacity v liters
  consuming 1 liter per km, and each city i sells fuel at i dollars per liter.

vc-preamble: |-
  predicate ValidInput(n: int, v: int) {
      2 <= n <= 100 && 1 <= v <= 100
  }
  
  function MinCost(n: int, v: int): int
      requires ValidInput(n, v)
  {
      var req := n - 1;
      if req <= v then
          req
      else
          var remaining := req - v;
          v + remaining * (remaining + 3) / 2
  }

vc-helpers: |-

vc-spec: |-
  method solve(n: int, v: int) returns (result: int)
      requires ValidInput(n, v)
      ensures result == MinCost(n, v)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

