vc-description: |-
  Given three positive integers a, b, and c, find the maximum possible value 
  of an arithmetic expression formed by inserting operation signs ('+' or '*') 
  between the numbers and optionally adding brackets. The numbers must remain 
  in order a, b, c. All six possible expressions must be considered:
  a + b + c, a + b * c, a * b + c, a * b * c, (a + b) * c, a * (b + c)

vc-preamble: |-
  predicate ValidInput(a: int, b: int, c: int)
  {
      1 <= a <= 10 && 1 <= b <= 10 && 1 <= c <= 10
  }
  
  function AllExpressions(a: int, b: int, c: int): seq<int>
  {
      [a * b * c, a + b * c, a * b + c, a * (b + c), (a + b) * c, a + b + c]
  }
  
  function MaxExpression(a: int, b: int, c: int): int
      requires ValidInput(a, b, c)
  {
      var exprs := AllExpressions(a, b, c);
      if exprs[0] >= exprs[1] && exprs[0] >= exprs[2] && exprs[0] >= exprs[3] && exprs[0] >= exprs[4] && exprs[0] >= exprs[5] then exprs[0]
      else if exprs[1] >= exprs[2] && exprs[1] >= exprs[3] && exprs[1] >= exprs[4] && exprs[1] >= exprs[5] then exprs[1]
      else if exprs[2] >= exprs[3] && exprs[2] >= exprs[4] && exprs[2] >= exprs[5] then exprs[2]
      else if exprs[3] >= exprs[4] && exprs[3] >= exprs[5] then exprs[3]
      else if exprs[4] >= exprs[5] then exprs[4]
      else exprs[5]
  }
  
  predicate IsMaxOfAllExpressions(result: int, a: int, b: int, c: int)
      requires ValidInput(a, b, c)
  {
      var exprs := AllExpressions(a, b, c);
      result in exprs && forall i :: 0 <= i < |exprs| ==> result >= exprs[i]
  }

vc-helpers: |-

vc-spec: |-
  method solve(a: int, b: int, c: int) returns (result: int)
      requires ValidInput(a, b, c)
      ensures IsMaxOfAllExpressions(result, a, b, c)
      ensures result == MaxExpression(a, b, c)

vc-code: |-
  {
      var expr1 := a * b * c;
      var expr2 := a + b * c;
      var expr3 := a * b + c;
      var expr4 := a * (b + c);
      var expr5 := (a + b) * c;
      var expr6 := a + b + c;
  
      result := expr1;
      if expr2 > result {
          result := expr2;
      }
      if expr3 > result {
          result := expr3;
      }
      if expr4 > result {
          result := expr4;
      }
      if expr5 > result {
          result := expr5;
      }
      if expr6 > result {
          result := expr6;
      }
  }

vc-postamble: |-

