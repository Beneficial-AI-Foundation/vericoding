vc-description: |-
  Given n timezones where day has n hours, find the optimal start time for a 1-hour contest
  to maximize participants. When it's hour 1 in timezone 1, it's hour i in timezone i.
  People participate only if contest starts between hours s and f-1 in their local time.

vc-preamble: |-
  predicate ValidInput(n: int, a: seq<int>, s: int, f: int)
  {
    n >= 2 && |a| == n && s >= 1 && f > s && f <= n &&
    forall i :: 0 <= i < n ==> a[i] >= 1
  }
  
  function participantCount(a: seq<int>, s: int, f: int, n: int, start: int): int
    requires |a| == n >= 1
    requires s >= 1 && f > s && f <= n
    requires 1 <= start <= n
  {
    participantCountHelper(a, s, f, n, start, 0)
  }
  
  function participantCountHelper(a: seq<int>, s: int, f: int, n: int, start: int, i: int): int
    requires |a| == n >= 1
    requires s >= 1 && f > s && f <= n
    requires 1 <= start <= n
    requires 0 <= i <= n
    decreases n - i
  {
    if i >= n then 0
    else
      var localHour := (start + i - 1) % n + 1;
      var contribution := if s <= localHour < f then a[i] else 0;
      contribution + participantCountHelper(a, s, f, n, start, i + 1)
  }

vc-helpers: |-
  function sum(s: seq<int>): int
  {
    if |s| == 0 then 0
    else s[0] + sum(s[1..])
  }

vc-spec: |-
  method solve(n: int, a: seq<int>, s: int, f: int) returns (result: int)
    requires ValidInput(n, a, s, f)
    ensures 1 <= result <= n
    ensures forall start :: 1 <= start <= n ==> 
      participantCount(a, s, f, n, result) >= participantCount(a, s, f, n, start)
    ensures forall start :: 1 <= start <= n && 
      participantCount(a, s, f, n, start) == participantCount(a, s, f, n, result) 
      ==> result <= start

vc-code: |-
  {
    var maxCount := participantCount(a, s, f, n, 1);
    result := 1;
  
    var pos := 2;
    while pos <= n
      invariant 2 <= pos <= n + 1
      invariant 1 <= result <= pos - 1
      invariant maxCount == participantCount(a, s, f, n, result)
      invariant forall start :: 1 <= start < pos ==> 
        participantCount(a, s, f, n, result) >= participantCount(a, s, f, n, start)
      invariant forall start :: 1 <= start < pos && 
        participantCount(a, s, f, n, start) == participantCount(a, s, f, n, result) 
        ==> result <= start
    {
      var currentCount := participantCount(a, s, f, n, pos);
      if currentCount > maxCount {
        maxCount := currentCount;
        result := pos;
      } else if currentCount == maxCount && pos < result {
        result := pos;
      }
      pos := pos + 1;
    }
  }

vc-postamble: |-

