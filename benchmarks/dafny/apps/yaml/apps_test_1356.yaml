vc-description: |-
  Given a string of lowercase English letters containing at least one 'a',
  find the maximum length of a string obtainable by erasing some characters
  such that the resulting string has strictly more than half of its characters as 'a's.

vc-preamble: |-
  function count_a(s: string): int
      ensures count_a(s) >= 0
      ensures count_a(s) <= |s|
  {
      if |s| == 0 then 0
      else (if s[0] == 'a' then 1 else 0) + count_a(s[1..])
  }
  
  function min(a: int, b: int): int
  {
      if a <= b then a else b
  }
  
  predicate ValidInput(s: string)
  {
      |s| >= 1 && exists i :: 0 <= i < |s| && s[i] == 'a'
  }
  
  predicate IsGoodString(s: string)
  {
      |s| > 0 && count_a(s) > |s| / 2
  }

vc-helpers: |-

vc-spec: |-
  method solve(s: string) returns (result: int)
      requires ValidInput(s)
      ensures result >= 1
      ensures result <= |s|
      ensures result == min(2 * count_a(s) - 1, |s|)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

