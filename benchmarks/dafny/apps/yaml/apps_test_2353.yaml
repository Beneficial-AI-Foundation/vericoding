vc-description: |-
  Given four integers representing sleep requirements and alarm timing,
  simulate an alarm system where: first alarm rings after b minutes,
  if total sleep >= a then wake permanently, otherwise set alarm for c minutes later
  and spend d minutes falling asleep. If alarm rings while falling asleep (c <= d),
  reset and repeat. Find total time until permanent wake or -1 if never happens.

vc-preamble: |-
  predicate ValidInput(a: int, b: int, c: int, d: int)
  {
      a >= 0 && b >= 0 && c >= 0 && d >= 0
  }
  
  predicate FirstAlarmSufficient(a: int, b: int)
  {
      a <= b
  }
  
  predicate NeverWakes(a: int, b: int, c: int, d: int)
  {
      a > b && c <= d
  }
  
  predicate EventuallyWakes(a: int, b: int, c: int, d: int)
  {
      a > b && c > d
  }
  
  function CalculateWakeTime(a: int, b: int, c: int, d: int): int
      requires ValidInput(a, b, c, d)
      requires EventuallyWakes(a, b, c, d)
  {
      var remaining := a - b;
      var cycles := (remaining - 1) / (c - d) + 1;
      b + c * cycles
  }

vc-helpers: |-

vc-spec: |-
  method solve(a: int, b: int, c: int, d: int) returns (result: int)
      requires ValidInput(a, b, c, d)
      ensures FirstAlarmSufficient(a, b) ==> result == b
      ensures NeverWakes(a, b, c, d) ==> result == -1
      ensures EventuallyWakes(a, b, c, d) ==> result == CalculateWakeTime(a, b, c, d)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

