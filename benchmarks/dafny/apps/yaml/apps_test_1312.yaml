vc-description: |-
  Distribute n candies among m friends such that each friend receives at least one candy
  and the difference between the maximum and minimum number of candies is minimized.
  The optimal solution gives each friend either floor(n/m) or floor(n/m)+1 candies.

vc-preamble: |-
  predicate ValidInput(n: int, m: int)
  {
    n >= m > 0
  }
  
  function sum(s: seq<int>): int
  {
    if |s| == 0 then 0 else s[0] + sum(s[1..])
  }
  
  function count(s: seq<int>, val: int): int
  {
    if |s| == 0 then 0 
    else (if s[0] == val then 1 else 0) + count(s[1..], val)
  }
  
  predicate OptimalDistribution(result: seq<int>, n: int, m: int)
    requires m > 0
  {
    |result| == m &&
    (forall i :: 0 <= i < |result| ==> result[i] > 0) &&
    sum(result) == n &&
    (forall i :: 0 <= i < |result| ==> result[i] == n / m || result[i] == n / m + 1) &&
    count(result, n / m) == m - (n % m) &&
    count(result, n / m + 1) == n % m
  }

vc-helpers: |-

vc-spec: |-
  method solve(n: int, m: int) returns (result: seq<int>)
    requires ValidInput(n, m)
    ensures OptimalDistribution(result, n, m)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

