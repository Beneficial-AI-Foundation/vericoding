vc-description: |-
  Given a right triangle with a 90Â° angle at vertex B, and the lengths of all three sides AB, BC, and CA,
  calculate the area of the triangle. The area is computed as (AB * BC) / 2 where AB and BC are the two
  legs of the right triangle. Input consists of three integers representing the side lengths, and output
  is the integer area.

vc-preamble: |-
  predicate ValidInput(ab: int, bc: int, ca: int)
  {
      1 <= ab <= 100 && 1 <= bc <= 100 && 1 <= ca <= 100
  }
  
  function TriangleArea(ab: int, bc: int): int
      requires ab >= 1 && bc >= 1
  {
      (ab * bc) / 2
  }
  
  predicate ValidArea(ab: int, bc: int, area: int)
      requires ab >= 1 && bc >= 1
  {
      area == TriangleArea(ab, bc) && area >= 0 && area <= 5000
  }

vc-helpers: |-
  function IntToString(n: int): string
      requires n >= 0
      ensures |IntToString(n)| > 0
      ensures n == 0 ==> IntToString(n) == "0"
  {
      if n == 0 then "0" 
      else if n < 10 then [n as char + '0']
      else IntToString(n / 10) + IntToString(n % 10)
  }

vc-spec: |-
  method solve(ab: int, bc: int, ca: int) returns (result: string)
      requires ValidInput(ab, bc, ca)
      ensures exists area :: ValidArea(ab, bc, area) && result == IntToString(area) + "\n"

vc-code: |-
  {
      var area := TriangleArea(ab, bc);
      result := IntToString(area) + "\n";
  }

vc-postamble: |-

