vc-description: |-
  Given an integer n (2 ≤ n ≤ 10^5), construct two trees with n nodes each:
  1. First tree: Where Mahmoud's algorithm produces incorrect minimum vertex cover size
  2. Second tree: Where Mahmoud's algorithm produces correct minimum vertex cover size
  Mahmoud's algorithm roots the tree at node 1, counts nodes at even/odd depths,
  and returns min(evenCnt, oddCnt) as the vertex cover size.

vc-preamble: |-
  predicate ValidOutput(n: int, result: seq<string>)
      requires n >= 2
  {
      if n < 6 then
          |result| == 1 + (n - 1) &&
          result[0] == "-1" &&
          (forall i :: 1 <= i < |result| ==> result[i] == "1 " + IntToString(i + 1))
      else
          |result| == (5 + (n - 6)) + (n - 1) &&
          result[0] == "1 2" && result[1] == "1 3" && result[2] == "1 4" && 
          result[3] == "2 5" && result[4] == "2 6" &&
          (forall i :: 5 <= i < 5 + (n - 6) ==> result[i] == "1 " + IntToString(i + 2)) &&
          (forall i :: 5 + (n - 6) <= i < |result| ==> result[i] == "1 " + IntToString(i - (5 + (n - 6)) + 2))
  }
  
  function IntToString(n: int): string
      decreases n < 0, if n >= 0 then n else -n
  {
      if n < 0 then "-" + IntToString(-n)
      else if n < 10 then [n as char + '0']
      else IntToString(n / 10) + IntToString(n % 10)
  }

vc-helpers: |-

vc-spec: |-
  method solve(n: int) returns (result: seq<string>)
      requires n >= 2
      ensures ValidOutput(n, result)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

