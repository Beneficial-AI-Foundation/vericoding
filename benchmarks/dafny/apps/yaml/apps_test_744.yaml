vc-description: |-
  Given a sequence of n days where you were either in Seattle (S) or San Francisco (F),
  determine if you made more flights from Seattle to San Francisco than from San Francisco
  to Seattle during this period. You fly at night between consecutive days when you change cities.

vc-preamble: |-
  function count_sf_flights(s: string): int
  {
      if |s| <= 1 then 0
      else (if s[|s|-1] == 'F' && s[|s|-2] != 'F' then 1 else 0) + count_sf_flights(s[..|s|-1])
  }
  
  function count_fs_flights(s: string): int
  {
      if |s| <= 1 then 0
      else (if s[|s|-1] == 'S' && s[|s|-2] != 'S' then 1 else 0) + count_fs_flights(s[..|s|-1])
  }

vc-helpers: |-
  lemma count_fs_flights_extend(s: string, i: int)
      requires 1 <= i < |s|
      ensures count_fs_flights(s[..i+1]) == count_fs_flights(s[..i]) + (if s[i] == 'S' && s[i-1] != 'S' then 1 else 0)
  {
      assert s[..i+1] == s[..i] + [s[i]];
      assert s[..i+1][|s[..i+1]|-1] == s[i];
      if |s[..i]| >= 1 {
          assert s[..i+1][|s[..i+1]|-2] == s[..i][|s[..i]|-1];
          assert s[..i][|s[..i]|-1] == s[i-1];
      }
  }
  
  lemma count_sf_flights_extend(s: string, i: int)
      requires 1 <= i < |s|
      ensures count_sf_flights(s[..i+1]) == count_sf_flights(s[..i]) + (if s[i] == 'F' && s[i-1] != 'F' then 1 else 0)
  {
      assert s[..i+1] == s[..i] + [s[i]];
      assert s[..i+1][|s[..i+1]|-1] == s[i];
      if |s[..i]| >= 1 {
          assert s[..i+1][|s[..i+1]|-2] == s[..i][|s[..i]|-1];
          assert s[..i][|s[..i]|-1] == s[i-1];
      }
  }

vc-spec: |-
  method solve(n: int, s: string) returns (result: string)
      requires n >= 2
      requires |s| == n
      requires forall i :: 0 <= i < |s| ==> s[i] == 'S' || s[i] == 'F'
      ensures result == "YES" || result == "NO"
      ensures result == "YES" <==> count_sf_flights(s) > count_fs_flights(s)

vc-code: |-
  {
      var si := 0;  // flights to Seattle (from San Francisco)
      var sf := 0;  // flights to San Francisco (from Seattle)
  
      var i := 1;
      while i < n
          invariant 1 <= i <= n
          invariant si == count_fs_flights(s[..i])
          invariant sf == count_sf_flights(s[..i])
      {
          if s[i] == 'S' && s[i-1] != 'S' {
              si := si + 1;
          }
          if s[i] == 'F' && s[i-1] != 'F' {
              sf := sf + 1;
          }
          count_fs_flights_extend(s, i);
          count_sf_flights_extend(s, i);
          i := i + 1;
      }
  
      assert si == count_fs_flights(s[..n]);
      assert sf == count_sf_flights(s[..n]);
      assert s[..n] == s;
      assert si == count_fs_flights(s);
      assert sf == count_sf_flights(s);
  
      if sf > si {
          result := "YES";
      } else {
          result := "NO";
      }
  }

vc-postamble: |-
