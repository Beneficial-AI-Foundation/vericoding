vc-description: |-
  Given n students who perform rituals at times t_i, find the maximum number of students 
  that can be visited by a "freebie" present for exactly T consecutive seconds.
  All visited students must have ritual times within the same T-second interval.

vc-preamble: |-
  predicate ValidInput(n: int, times: seq<int>, T: int)
  {
      n >= 1 && |times| == n && T >= 1 && 
      forall i :: 0 <= i < |times| ==> 1 <= times[i] <= 1000
  }
  
  function maxStudentsInWindow(times: seq<int>, T: int): int
      requires T >= 1
      requires forall i :: 0 <= i < |times| ==> 1 <= times[i] <= 1000
  {
      maxStudentsInWindowUpTo(times, T, 1000)
  }
  
  function maxStudentsInWindowUpTo(times: seq<int>, T: int, maxStart: int): int
      requires T >= 1
      requires forall i :: 0 <= i < |times| ==> 1 <= times[i] <= 1000
      requires maxStart >= 0
      ensures 0 <= maxStudentsInWindowUpTo(times, T, maxStart) <= |times|
  {
      if maxStart < 1 then 0
      else
          var count := countStudentsInWindow(times, maxStart, T);
          var restMax := maxStudentsInWindowUpTo(times, T, maxStart - 1);
          if count > restMax then count else restMax
  }
  
  function countStudentsInWindow(times: seq<int>, start: int, T: int): int
      requires T >= 1
      requires forall i :: 0 <= i < |times| ==> 1 <= times[i] <= 1000
      requires start >= 1
      ensures 0 <= countStudentsInWindow(times, start, T) <= |times|
  {
      countStudentsInWindowHelper(times, start, T, 0)
  }
  
  function countStudentsInWindowHelper(times: seq<int>, start: int, T: int, index: int): int
      requires T >= 1
      requires forall i :: 0 <= i < |times| ==> 1 <= times[i] <= 1000
      requires start >= 1
      requires 0 <= index <= |times|
      ensures 0 <= countStudentsInWindowHelper(times, start, T, index) <= |times| - index
      decreases |times| - index
  {
      if index == |times| then 0
      else
          var countRest := countStudentsInWindowHelper(times, start, T, index + 1);
          if start <= times[index] <= start + T - 1 then countRest + 1 else countRest
  }

vc-helpers: |-

vc-spec: |-
  method solve(n: int, times: seq<int>, T: int) returns (result: int)
      requires ValidInput(n, times, T)
      ensures result >= 0
      ensures result <= n
      ensures result == maxStudentsInWindow(times, T)

vc-code: |-
  {
      var best := 0;
      var start := 1;
      while start <= 1000
          invariant 1 <= start <= 1001
          invariant 0 <= best <= n
          invariant best == maxStudentsInWindowUpTo(times, T, start - 1)
      {
          var count := countStudentsInWindow(times, start, T);
          if count > best {
              best := count;
          }
          start := start + 1;
      }
  
      result := best;
  }

vc-postamble: |-

