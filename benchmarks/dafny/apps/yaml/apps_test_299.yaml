vc-description: |-
  Given n exercises with repetition counts, determine which muscle group receives the most total repetitions.
  Exercises cycle through three types based on position (0-indexed):
  - Position 0, 3, 6, ... : chest exercises
  - Position 1, 4, 7, ... : biceps exercises  
  - Position 2, 5, 8, ... : back exercises
  Return the muscle group with the highest total repetitions.

vc-preamble: |-
  function ChestTotal(reps: seq<int>): int
  {
      sum(seq(|reps|, i requires 0 <= i < |reps| => if i % 3 == 0 then reps[i] else 0))
  }
  
  function BicepsTotal(reps: seq<int>): int
  {
      sum(seq(|reps|, i requires 0 <= i < |reps| => if i % 3 == 1 then reps[i] else 0))
  }
  
  function BackTotal(reps: seq<int>): int
  {
      sum(seq(|reps|, i requires 0 <= i < |reps| => if i % 3 == 2 then reps[i] else 0))
  }
  
  predicate ValidInput(reps: seq<int>)
  {
      |reps| > 0 && forall i | 0 <= i < |reps| :: reps[i] > 0
  }
  
  predicate IsWinner(muscle: string, reps: seq<int>)
      requires ValidInput(reps)
  {
      var chestTotal := ChestTotal(reps);
      var bicepsTotal := BicepsTotal(reps);
      var backTotal := BackTotal(reps);
  
      match muscle
          case "chest" => chestTotal >= bicepsTotal && chestTotal >= backTotal
          case "biceps" => bicepsTotal > chestTotal && bicepsTotal >= backTotal
          case "back" => backTotal > chestTotal && backTotal > bicepsTotal
          case _ => false
  }

vc-helpers: |-

vc-spec: |-
  method FindStrongestMuscleGroup(reps: seq<int>) returns (result: string)
      requires ValidInput(reps)
      ensures result == "chest" || result == "biceps" || result == "back"
      ensures IsWinner(result, reps)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

