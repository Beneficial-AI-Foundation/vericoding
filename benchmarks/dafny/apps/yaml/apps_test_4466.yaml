vc-description: |-
  Given a seat of width X centimeters, determine the maximum number of people that can sit on it.
  Each person occupies Y centimeters, and there must be at least Z centimeters of gap between 
  any two people and between each end of the seat and the nearest person.

vc-preamble: |-
  predicate ValidInput(x: int, y: int, z: int)
  {
      x >= 1 && y >= 1 && z >= 1 && y + 2 * z <= x
  }
  
  function MaxPeople(x: int, y: int, z: int): int
      requires ValidInput(x, y, z)
  {
      (x - z) / (y + z)
  }
  
  predicate ValidSolution(x: int, y: int, z: int, result: int)
      requires ValidInput(x, y, z)
  {
      result == MaxPeople(x, y, z) &&
      result >= 0 &&
      result * (y + z) <= x - z < (result + 1) * (y + z)
  }

vc-helpers: |-

vc-spec: |-
  method solve(x: int, y: int, z: int) returns (result: int)
      requires ValidInput(x, y, z)
      ensures ValidSolution(x, y, z, result)

vc-code: |-
  {
      result := (x - z) / (y + z);
  }

vc-postamble: |-

