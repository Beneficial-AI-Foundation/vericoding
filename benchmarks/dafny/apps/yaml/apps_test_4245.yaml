vc-description: |-
  Given a single socket that can be extended using power strips, find the minimum number of power strips needed to have at least B empty sockets. Each power strip has A sockets and when plugged into an empty socket, it replaces that 1 socket with A sockets (net gain of A-1 sockets).

vc-preamble: |-
  predicate ValidInput(a: int, b: int)
  {
    a > 1 && b >= 0
  }
  
  function SocketsAfterStrips(strips: int, a: int): int
    requires a > 1 && strips >= 0
  {
    1 + strips * (a - 1)
  }
  
  function CeilingDivision(x: int, y: int): int
    requires y > 0
  {
    if x % y == 0 then x / y
    else if x >= 0 then x / y + 1
    else x / y
  }
  
  function MinStripsNeeded(a: int, b: int): int
    requires ValidInput(a, b)
  {
    if b <= 1 then 0
    else CeilingDivision(b - 1, a - 1)
  }
  
  predicate CorrectResult(a: int, b: int, result: int)
    requires ValidInput(a, b)
  {
    result >= 0 &&
    SocketsAfterStrips(result, a) >= b &&
    (result == 0 || SocketsAfterStrips(result - 1, a) < b)
  }

vc-helpers: |-
  lemma MinStripsCorrectness(a: int, b: int)
    requires ValidInput(a, b)
    ensures CorrectResult(a, b, MinStripsNeeded(a, b))
  {
    var strips := MinStripsNeeded(a, b);
    if b <= 1 {
      assert strips == 0;
      assert SocketsAfterStrips(0, a) == 1 >= b;
    } else {
      var numerator := b - 1;
      var denominator := a - 1;
      assert numerator > 0;
      assert denominator > 0;
      var ceiling_div := CeilingDivision(numerator, denominator);
      assert strips == ceiling_div;
      assert strips >= 1;
  
      // Prove that strips * (a - 1) >= b - 1
      if numerator % denominator == 0 {
        assert ceiling_div == numerator / denominator;
        assert ceiling_div * denominator == numerator;
      } else {
        assert ceiling_div == numerator / denominator + 1;
        assert ceiling_div * denominator >= numerator;
      }
  
      assert SocketsAfterStrips(strips, a) == 1 + strips * (a - 1) >= 1 + (b - 1) == b;
  
      if strips > 0 {
        assert SocketsAfterStrips(strips - 1, a) == 1 + (strips - 1) * (a - 1);
        assert strips - 1 < ceiling_div;
        if numerator % denominator == 0 {
          assert (strips - 1) * denominator < numerator;
        } else {
          assert (strips - 1) * denominator < numerator;
        }
        assert SocketsAfterStrips(strips - 1, a) < b;
      }
    }
  }

vc-spec: |-
  method solve(a: int, b: int) returns (result: int)
    requires ValidInput(a, b)
    ensures CorrectResult(a, b, result)

vc-code: |-
  {
    MinStripsCorrectness(a, b);
  
    if b <= 1 {
      result := 0;
    } else {
      var numerator := b - 1;
      var denominator := a - 1;
  
      var ceiling_div: int;
      if numerator % denominator == 0 {
        ceiling_div := numerator / denominator;
      } else {
        if numerator >= 0 {
          ceiling_div := numerator / denominator + 1;
        } else {
          ceiling_div := numerator / denominator;
        }
      }
  
      result := ceiling_div;
    }
  }

vc-postamble: |-

