vc-description: |-
  Given an integer K (2 ≤ K ≤ 100), count the number of ways to choose one even number and one odd number from the integers 1 through K (inclusive). Order of selection does not matter.

vc-preamble: |-
  predicate ValidInput(K: int) {
      2 <= K <= 100
  }
  
  function CountOddNumbers(K: int): int
      requires K >= 1
  {
      (K + 1) / 2
  }
  
  function CountEvenNumbers(K: int): int
      requires K >= 1
  {
      K / 2
  }
  
  function ExpectedResult(K: int): int
      requires ValidInput(K)
  {
      CountOddNumbers(K) * CountEvenNumbers(K)
  }
  
  predicate CorrectResult(K: int, result: int)
      requires ValidInput(K)
  {
      result == ExpectedResult(K)
  }

vc-helpers: |-

vc-spec: |-
  method CountEvenOddPairs(K: int) returns (result: int)
      requires ValidInput(K)
      ensures CorrectResult(K, result)
      ensures result >= 0

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

