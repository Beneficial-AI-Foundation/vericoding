vc-description: |-
  Count the number of permutations of [1, 2, ..., n] where at least n-k positions
  have the correct value (i.e., p[i] = i for at least n-k indices i).

vc-preamble: |-
  predicate ValidInput(n: int, k: int)
  {
    4 <= n <= 1000 && 1 <= k <= 4 && k < n
  }
  
  function factorial(n: int): int
    requires n >= 0
    ensures factorial(n) > 0
  {
    if n <= 1 then 1 else n * factorial(n - 1)
  }
  
  function derangement(n: int): int
    requires n >= 0
    ensures derangement(n) >= 0
  {
    if n <= 1 then 0
    else if n == 2 then 1
    else (n - 1) * (derangement(n - 1) + derangement(n - 2))
  }
  
  function binomial(n: int, k: int): int
    requires n >= 0 && k >= 0
    ensures binomial(n, k) >= 0
  {
    if k > n then 0
    else if k == 0 || k == n then 1
    else factorial(n) / (factorial(k) * factorial(n - k))
  }
  
  function sum_binomial_derangement(n: int, k: int, i: int): int
    requires n >= 0 && k >= 0 && i >= 0
    ensures sum_binomial_derangement(n, k, i) >= 0
    decreases n - k - i
  {
    if i >= n - k then 0
    else binomial(n, i) * derangement(n - i) + sum_binomial_derangement(n, k, i + 1)
  }

vc-helpers: |-

vc-spec: |-
  method solve(n: int, k: int) returns (result: int)
    requires ValidInput(n, k)
    ensures result == factorial(n) - sum_binomial_derangement(n, k, 0)

vc-code: |-
  {
    var ans := factorial(n);
  
    var i := 0;
    while i < n - k
      invariant 0 <= i <= n - k
      invariant ans == factorial(n) - sum_binomial_derangement(n, k, 0) + sum_binomial_derangement(n, k, i)
    {
      var c := binomial(n, i) * derangement(n - i);
      ans := ans - c;
      i := i + 1;
    }
  
    result := ans;
  }

vc-postamble: |-

