vc-description: |-
  Given n football teams where each team has home and away kit colors (different colors),
  calculate how many games each team plays in home kit vs away kit in a round-robin tournament.
  Kit rules: home team wears home kit, away team wears away kit unless it conflicts with 
  home team's home kit color, then away team wears home kit.

vc-preamble: |-
  predicate ValidInput(n: int, teams: seq<(int, int)>)
  {
    n >= 2 && |teams| == n &&
    (forall i :: 0 <= i < n ==> teams[i].0 != teams[i].1) &&
    (forall i :: 0 <= i < n ==> |set j | 0 <= j < n && teams[j].0 == teams[i].1| <= n - 1)
  }
  
  predicate ValidOutput(n: int, teams: seq<(int, int)>, result: seq<(int, int)>)
    requires |teams| == n
  {
    |result| == n &&
    (forall i :: 0 <= i < n ==> result[i].0 + result[i].1 == 2 * (n - 1)) &&
    (forall i :: 0 <= i < n ==> result[i].0 >= n - 1) &&
    (forall i :: 0 <= i < n ==> result[i].1 >= 0) &&
    (forall i :: 0 <= i < n ==> 
      var homeCount := |set j | 0 <= j < n && teams[j].0 == teams[i].1|;
      result[i].0 == (n - 1) + homeCount &&
      result[i].1 == (n - 1) - homeCount)
  }

vc-helpers: |-

vc-spec: |-
  method solve(n: int, teams: seq<(int, int)>) returns (result: seq<(int, int)>)
    requires ValidInput(n, teams)
    ensures ValidOutput(n, teams, result)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

