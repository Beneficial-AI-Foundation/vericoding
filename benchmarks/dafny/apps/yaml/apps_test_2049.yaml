vc-description: |-
  Given an array of n integers and m queries, determine for each query whether a specified subsegment forms a "ladder".
  A ladder is a sequence that first non-decreases, then non-increases. Formally, there exists a position x such that 
  elements are non-decreasing up to position x, then non-increasing from position x onward.

vc-preamble: |-
  predicate isLadder(arr: seq<int>, l: int, r: int)
    requires 0 <= l <= r < |arr|
  {
    if l == r then true
    else
      exists k :: l <= k <= r && 
        isNonDecreasing(arr, l, k) && 
        isNonIncreasing(arr, k, r)
  }
  
  predicate isNonDecreasing(arr: seq<int>, start: int, end: int)
    requires 0 <= start <= end < |arr|
  {
    forall i :: start <= i < end ==> arr[i] <= arr[i+1]
  }
  
  predicate isNonIncreasing(arr: seq<int>, start: int, end: int)
    requires 0 <= start <= end < |arr|
  {
    forall i :: start <= i < end ==> arr[i] >= arr[i+1]
  }

vc-helpers: |-

vc-spec: |-
  method solve(n: int, m: int, arr: seq<int>, queries: seq<(int, int)>) returns (results: seq<string>)
    requires n >= 1 && m >= 1
    requires |arr| == n
    requires |queries| == m
    requires forall i :: 0 <= i < m ==> 1 <= queries[i].0 <= queries[i].1 <= n
    ensures |results| == m
    ensures forall i :: 0 <= i < m ==> results[i] == "Yes" || results[i] == "No"
    ensures forall i :: 0 <= i < m ==> 
      (results[i] == "Yes" <==> isLadder(arr, queries[i].0 - 1, queries[i].1 - 1))

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

