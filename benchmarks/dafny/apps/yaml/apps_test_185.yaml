vc-description: |-
  Given n manholes in a line (positions 1 to n), each initially covered by one stone with one coin underneath.
  Nastya starts at position k and can: throw stones, move to adjacent positions, or collect coins from uncovered manholes.
  Find the minimum number of moves needed to collect all n coins.

vc-preamble: |-
  predicate ValidInput(n: int, k: int)
  {
    2 <= n <= 5000 && 1 <= k <= n
  }
  
  function OptimalMoves(n: int, k: int): int
    requires ValidInput(n, k)
  {
    if k == 1 || k == n then
      3 * n
    else
      3 * n + min(k - 1, n - k)
  }

vc-helpers: |-

vc-spec: |-
  method MinimumMoves(n: int, k: int) returns (result: int)
    requires ValidInput(n, k)
    ensures result == OptimalMoves(n, k)
    ensures result > 0

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

