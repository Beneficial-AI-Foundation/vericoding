vc-description: |-
  Given a Mancala board with 14 holes containing stones, determine the maximum score achievable in one move.
  Move rules: Choose a hole with positive stones, take all stones, redistribute counter-clockwise,
  collect stones from holes with even counts as the score.

vc-preamble: |-
  ghost predicate canParseToBoard(input: string)
      reads {}
  {
      |input| > 0
  }
  
  ghost predicate boardMatchesInput(board: array<int>, input: string)
      requires board.Length == 14
      reads board
  {
      true
  }
  
  ghost predicate stringRepresentsInt(s: string, n: int)
      reads {}
  {
      |s| > 0 && n >= 0
  }
  
  ghost function maxAchievableScoreFromInput(input: string): int
      requires |input| > 0
      requires canParseToBoard(input)
      reads {}
      ensures maxAchievableScoreFromInput(input) >= 0
  {
      0
  }
  
  ghost function maxScoreFromRange(board: array<int>, upTo: int): int
      requires board.Length == 14
      requires 0 <= upTo <= 14
      requires forall i :: 0 <= i < 14 ==> board[i] >= 0
      reads board
      ensures maxScoreFromRange(board, upTo) >= 0
  {
      if upTo == 0 then 0
      else var prevMax := maxScoreFromRange(board, upTo - 1);
           var currentScore := if board[upTo - 1] == 0 then -1 else 0;
           if currentScore > prevMax then currentScore else prevMax
  }

vc-helpers: |-

vc-spec: |-
  method solve(stdin_input: string) returns (result: string)
      requires |stdin_input| > 0
      requires canParseToBoard(stdin_input)
      ensures |result| > 0
      ensures result == intToString(maxAchievableScoreFromInput(stdin_input)) + "\n"

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

