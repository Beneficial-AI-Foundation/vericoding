vc-description: |-
  Given n groups arriving at a restaurant chronologically, where each group has 1 or 2 people,
  and the restaurant has a one-person tables and b two-person tables, determine how many people
  are denied service following specific seating rules.

vc-preamble: |-
  predicate ValidInput(n: int, a: int, b: int, groups: seq<int>)
  {
      n >= 1 && a >= 1 && b >= 1 && |groups| == n &&
      forall i :: 0 <= i < |groups| ==> groups[i] == 1 || groups[i] == 2
  }
  
  function countDeniedPeople(groups: seq<int>, a: int, b: int): int
      requires a >= 0 && b >= 0
      requires forall i :: 0 <= i < |groups| ==> groups[i] == 1 || groups[i] == 2
      decreases |groups|
  {
      countDeniedPeopleWithHalf(groups, a, b, 0)
  }
  
  function countDeniedPeopleWithHalf(groups: seq<int>, a: int, b: int, halfOccupied: int): int
      requires a >= 0 && b >= 0 && halfOccupied >= 0
      requires forall i :: 0 <= i < |groups| ==> groups[i] == 1 || groups[i] == 2
      decreases |groups|
  {
      if |groups| == 0 then 0
      else
          var group := groups[0];
          var rest := groups[1..];
          if group == 2 then
              if b > 0 then countDeniedPeopleWithHalf(rest, a, b - 1, halfOccupied)
              else 2 + countDeniedPeopleWithHalf(rest, a, b, halfOccupied)
          else // group == 1
              if a > 0 then countDeniedPeopleWithHalf(rest, a - 1, b, halfOccupied)
              else if b > 0 then countDeniedPeopleWithHalf(rest, a, b - 1, halfOccupied + 1)
              else if halfOccupied > 0 then countDeniedPeopleWithHalf(rest, a, b, halfOccupied - 1)
              else 1 + countDeniedPeopleWithHalf(rest, a, b, halfOccupied)
  }

vc-helpers: |-

vc-spec: |-
  method solve(n: int, a: int, b: int, groups: seq<int>) returns (denied: int)
      requires ValidInput(n, a, b, groups)
      ensures denied >= 0
      ensures denied == countDeniedPeople(groups, a, b)

vc-code: |-
  {
      var remainingA := a;
      var remainingB := b;
      var halfOccupied := 0;
      var totalDenied := 0;
  
      var i := 0;
      while i < |groups|
          invariant 0 <= i <= |groups|
          invariant remainingA >= 0
          invariant remainingB >= 0
          invariant halfOccupied >= 0
          invariant totalDenied >= 0
          invariant totalDenied + countDeniedPeopleWithHalf(groups[i..], remainingA, remainingB, halfOccupied) == countDeniedPeople(groups, a, b)
          decreases |groups| - i
      {
          if groups[i] == 2 {
              if remainingB > 0 {
                  remainingB := remainingB - 1;
              } else {
                  totalDenied := totalDenied + 2;
              }
          }
          if groups[i] == 1 {
              if remainingA > 0 {
                  remainingA := remainingA - 1;
              } else if remainingB > 0 {
                  remainingB := remainingB - 1;
                  halfOccupied := halfOccupied + 1;
              } else if halfOccupied > 0 {
                  halfOccupied := halfOccupied - 1;
              } else {
                  totalDenied := totalDenied + 1;
              }
          }
          i := i + 1;
      }
  
      denied := totalDenied;
  }

vc-postamble: |-

