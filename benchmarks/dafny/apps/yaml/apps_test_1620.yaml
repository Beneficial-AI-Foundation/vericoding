vc-description: |-
  Given a positive integer n, construct a string of length n using only characters 'a', 'b', and 'c' such that:
  1. The string contains no palindromic substrings of length 3
  2. The number of 'c' characters is minimized

vc-preamble: |-
  predicate ValidInput(n: int)
  {
    n >= 1
  }
  
  predicate ValidOutput(s: string, n: int)
  {
    |s| == n &&
    (forall i :: 0 <= i < |s| ==> s[i] == 'a' || s[i] == 'b' || s[i] == 'c') &&
    (forall i :: 0 <= i <= |s| - 3 ==> !(s[i] == s[i+2]))
  }
  
  predicate MinimalCUsage(s: string)
  {
    forall i :: 0 <= i < |s| ==> s[i] == 'a' || s[i] == 'b'
  }

vc-helpers: |-

vc-spec: |-
  method solve(n: int) returns (result: string)
    requires ValidInput(n)
    ensures ValidOutput(result, n)
    ensures MinimalCUsage(result)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

