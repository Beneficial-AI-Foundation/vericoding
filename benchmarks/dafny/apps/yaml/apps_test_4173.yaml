vc-description: |-
  Find the minimum cost to purchase exactly n liters of water using 1-liter bottles 
  (costing a burles each) and 2-liter bottles (costing b burles each), with infinite 
  supply of both types available. Process multiple queries efficiently.

vc-preamble: |-
  predicate ValidQuery(query: (int, int, int))
  {
      query.0 > 0 && query.1 > 0 && query.2 > 0
  }
  
  function MinCostForQuery(n: int, a: int, b: int): int
      requires n > 0 && a > 0 && b > 0
  {
      if n % 2 == 0 then
          if n * a <= (n / 2) * b then n * a else (n / 2) * b
      else
          if n * a <= (n / 2) * b + a then n * a else (n / 2) * b + a
  }

vc-helpers: |-

vc-spec: |-
  method solve(queries: seq<(int, int, int)>) returns (results: seq<int>)
      requires forall i | 0 <= i < |queries| :: ValidQuery(queries[i])
      ensures |results| == |queries|
      ensures forall i | 0 <= i < |queries| :: 
          var n := queries[i].0;
          var a := queries[i].1;
          var b := queries[i].2;
          results[i] == (if n % 2 == 0 then
              if n * a <= (n / 2) * b then n * a else (n / 2) * b
          else
              if n * a <= (n / 2) * b + a then n * a else (n / 2) * b + a)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

