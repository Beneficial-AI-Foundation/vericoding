vc-description: |-
  Given n winter days with temperature forecasts, minimize tire changes to drive safely.
  Start with summer tires (safe when temp >= 0). Winter tires safe at any temp but 
  limited to k days total. Must drive safely every day. Can change tires at start of any day.
  Return minimum tire changes needed, or -1 if impossible.

vc-preamble: |-
  function count_negative_temp_days(temps: seq<int>): int
  {
      if |temps| == 0 then 0
      else (if temps[0] < 0 then 1 else 0) + count_negative_temp_days(temps[1..])
  }

vc-helpers: |-

vc-spec: |-
  method solve(n: int, k: int, temps: seq<int>) returns (result: int)
    requires n >= 1
    requires k >= 0 && k <= n
    requires |temps| == n
    requires forall i :: 0 <= i < n ==> -20 <= temps[i] <= 20
    ensures result == -1 <==> count_negative_temp_days(temps) > k
    ensures result != -1 ==> result >= 0
    ensures result == 0 ==> forall i :: 0 <= i < n ==> temps[i] >= 0
    ensures result > 0 ==> exists i :: 0 <= i < n && temps[i] < 0

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

