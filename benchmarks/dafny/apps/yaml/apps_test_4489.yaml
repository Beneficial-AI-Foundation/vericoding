vc-description: |-
  Given N blue cards and M red cards with strings, find maximum net earnings.
  When a string is announced, earn 1 yen per blue card with that string and
  lose 1 yen per red card with that string. Find the optimal string to maximize earnings.

vc-preamble: |-
  function count_occurrences(cards: seq<string>, target: string): int
      ensures count_occurrences(cards, target) >= 0
  {
      if |cards| == 0 then 0
      else if cards[0] == target then 1 + count_occurrences(cards[1..], target)
      else count_occurrences(cards[1..], target)
  }
  
  function get_unique_strings(all_strings: seq<string>): seq<string>
  {
      if |all_strings| == 0 then []
      else 
          var rest_unique := get_unique_strings(all_strings[1..]);
          if all_strings[0] in rest_unique then rest_unique
          else [all_strings[0]] + rest_unique
  }
  
  function max_net_earnings(blue_cards: seq<string>, red_cards: seq<string>): int
      ensures max_net_earnings(blue_cards, red_cards) >= 0
  {
      var unique_blue := get_unique_strings(blue_cards);
      max_net_earnings_helper(unique_blue, blue_cards, red_cards, 0, 0)
  }
  
  function max_net_earnings_helper(unique_blue: seq<string>, blue_cards: seq<string>, red_cards: seq<string>, index: int, current_max: int): int
      requires 0 <= index <= |unique_blue|
      ensures max_net_earnings_helper(unique_blue, blue_cards, red_cards, index, current_max) >= current_max
      decreases |unique_blue| - index
  {
      if index >= |unique_blue| then current_max
      else
          var s := unique_blue[index];
          var blue_count := count_occurrences(blue_cards, s);
          var red_count := count_occurrences(red_cards, s);
          var net := blue_count - red_count;
          var new_max := if net > current_max then net else current_max;
          max_net_earnings_helper(unique_blue, blue_cards, red_cards, index + 1, new_max)
  }

vc-helpers: |-

vc-spec: |-
  method solve(blue_cards: seq<string>, red_cards: seq<string>) returns (result: int)
      ensures result >= 0
      ensures result == max_net_earnings(blue_cards, red_cards)

vc-code: |-
  {
      var unique_blue_strings: seq<string> := get_unique_strings(blue_cards);
  
      var max_net := 0;
      var i := 0;
      while i < |unique_blue_strings|
          invariant 0 <= i <= |unique_blue_strings|
          invariant max_net >= 0
          invariant forall k :: 0 <= k < i ==> 
              var s := unique_blue_strings[k];
              var net := count_occurrences(blue_cards, s) - count_occurrences(red_cards, s);
              max_net >= net
          invariant max_net_earnings_helper(unique_blue_strings, blue_cards, red_cards, 0, 0) == max_net_earnings_helper(unique_blue_strings, blue_cards, red_cards, i, max_net)
      {
          var s := unique_blue_strings[i];
          var blue_count := count_occurrences(blue_cards, s);
          var red_count := count_occurrences(red_cards, s);
          var net := blue_count - red_count;
  
          if net > max_net {
              max_net := net;
          }
          i := i + 1;
      }
  
      result := max_net;
  }

vc-postamble: |-

