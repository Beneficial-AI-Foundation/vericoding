vc-description: |-
  Given two time intervals [l1, r1] and [l2, r2], and a specific minute k,
  find the number of minutes in the intersection of these intervals,
  excluding minute k if it falls within the intersection.

vc-preamble: |-
  predicate ValidInput(l1: int, r1: int, l2: int, r2: int, k: int) {
      l1 <= r1 && l2 <= r2
  }
  
  function IntersectionLeft(l1: int, l2: int): int {
      if l1 > l2 then l1 else l2
  }
  
  function IntersectionRight(r1: int, r2: int): int {
      if r1 < r2 then r1 else r2
  }
  
  function IntersectionSize(l1: int, r1: int, l2: int, r2: int): int {
      var left := IntersectionLeft(l1, l2);
      var right := IntersectionRight(r1, r2);
      if right - left + 1 > 0 then right - left + 1 else 0
  }
  
  predicate KInIntersection(l1: int, r1: int, l2: int, r2: int, k: int) {
      var left := IntersectionLeft(l1, l2);
      var right := IntersectionRight(r1, r2);
      left <= k <= right
  }
  
  function ExpectedResult(l1: int, r1: int, l2: int, r2: int, k: int): int {
      var intersection_size := IntersectionSize(l1, r1, l2, r2);
      if KInIntersection(l1, r1, l2, r2, k) then
          if intersection_size - 1 > 0 then intersection_size - 1 else 0
      else
          intersection_size
  }

vc-helpers: |-
  

vc-spec: |-
  method solve(l1: int, r1: int, l2: int, r2: int, k: int) returns (result: int)
      requires ValidInput(l1, r1, l2, r2, k)
      ensures result == ExpectedResult(l1, r1, l2, r2, k)
      ensures result >= 0

vc-code: |-
  {
      var R := IntersectionRight(r1, r2);
      var L := IntersectionLeft(l1, l2);
      var ans := if R - L + 1 > 0 then R - L + 1 else 0;
      if L <= k <= R {
          ans := if ans - 1 > 0 then ans - 1 else 0;
      }
      result := ans;
  }

vc-postamble: |-
