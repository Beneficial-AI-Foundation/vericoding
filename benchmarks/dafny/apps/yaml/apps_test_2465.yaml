vc-description: |-
  Given an angle measurement in degrees, find the minimum number of vertices n for a regular n-gon 
  that contains three vertices a, b, c such that the angle âˆ abc equals the given angle. 
  If no such n-gon exists, return -1.

vc-preamble: |-
  predicate ValidInput(angles: seq<int>)
  {
    forall i :: 0 <= i < |angles| ==> 1 <= angles[i] < 180
  }
  
  function ComputeAnswer(angle: int): int
    requires 1 <= angle < 180
  {
    var g := gcd(angle, 180);
    var de_over_g := angle / g;
    var n180_over_g := 180 / g;
    if de_over_g == n180_over_g - 1 then n180_over_g * 2 else n180_over_g
  }
  
  predicate CorrectOutput(angles: seq<int>, result: seq<int>)
    requires ValidInput(angles)
  {
    |result| == |angles| &&
    forall i :: 0 <= i < |angles| ==> result[i] == ComputeAnswer(angles[i])
  }

vc-helpers: |-

vc-spec: |-
  method solve(angles: seq<int>) returns (result: seq<int>)
    requires ValidInput(angles)
    ensures CorrectOutput(angles, result)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

