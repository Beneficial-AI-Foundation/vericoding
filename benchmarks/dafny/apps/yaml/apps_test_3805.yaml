vc-description: |-
  Two wires run from left to right between a wall and device. Given a string of '+' and '-' 
  representing wire crossings, determine if wires can be untangled by free movement without
  unplugging. Uses stack algorithm where same adjacent characters cancel out.

vc-preamble: |-
  function ExtractFirstLine(input: string): string
  {
      if |input| == 0 then ""
      else if input[0] == '\n' then ""
      else 
          var rest := ExtractFirstLine(input[1..]);
          [input[0]] + rest
  }
  
  function ProcessString(input: string, stack: seq<char>): seq<char>
  {
      if |input| == 0 then stack
      else
          var c := input[0];
          var newStack := if |stack| > 0 && stack[|stack| - 1] == c 
                         then stack[..|stack| - 1] 
                         else stack + [c];
          ProcessString(input[1..], newStack)
  }
  
  predicate StackAlgorithmResultsInEmptyStack(input: string)
  {
      var stack := ProcessString(input, []);
      |stack| == 0
  }

vc-helpers: |-

vc-spec: |-
  method solve(input: string) returns (result: string)
      ensures result == "Yes\n" || result == "No\n"
      ensures result == "Yes\n" <==> StackAlgorithmResultsInEmptyStack(ExtractFirstLine(input))

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

