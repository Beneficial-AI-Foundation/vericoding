vc-description: |-
  Given n cards with integers (absolute value â‰¤ x), find the minimum number of additional cards
  needed to make the total sum equal to zero. Additional cards can have integer values from -x to x.

vc-preamble: |-
  function sum(cards: seq<int>): int
  {
      if |cards| == 0 then 0
      else cards[0] + sum(cards[1..])
  }
  
  function abs(x: int): int
  {
      if x >= 0 then x else -x
  }
  
  predicate ValidInput(cards: seq<int>, x: int)
  {
      x > 0 && |cards| >= 1 && forall i :: 0 <= i < |cards| ==> -x <= cards[i] <= x
  }

vc-helpers: |-

vc-spec: |-
  method solve(cards: seq<int>, x: int) returns (result: int)
      requires ValidInput(cards, x)
      ensures result >= 0
      ensures result == if sum(cards) == 0 then 0 else (abs(sum(cards)) + x - 1) / x

vc-code: |-
  {
      var s := sum(cards);
      var abs_s := if s >= 0 then s else -s;
  
      if abs_s == 0 {
          result := 0;
      } else {
          result := (abs_s + x - 1) / x;
      }
  }

vc-postamble: |-

