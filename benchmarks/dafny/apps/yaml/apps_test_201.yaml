vc-description: |-
  Given two types of candies with different weights and joy values, find the maximum joy units
  achievable by selecting whole candies within a weight constraint. Must maximize total joy
  while staying within the weight capacity C.

vc-preamble: |-
  predicate ValidInput(C: int, Hr: int, Hb: int, Wr: int, Wb: int)
  {
    C >= 0 && Hr > 0 && Hb > 0 && Wr > 0 && Wb > 0
  }
  
  predicate ValidCandyCombination(redCount: int, blueCount: int, C: int, Wr: int, Wb: int)
  {
    redCount >= 0 && blueCount >= 0 && redCount * Wr + blueCount * Wb <= C
  }
  
  function Joy(redCount: int, blueCount: int, Hr: int, Hb: int): int
  {
    redCount * Hr + blueCount * Hb
  }

vc-helpers: |-

vc-spec: |-
  method solve(C: int, Hr: int, Hb: int, Wr: int, Wb: int) returns (result: int)
    requires ValidInput(C, Hr, Hb, Wr, Wb)
    ensures result >= 0
    ensures exists redCount: int, blueCount: int :: 
      ValidCandyCombination(redCount, blueCount, C, Wr, Wb) &&
      result == Joy(redCount, blueCount, Hr, Hb)
    ensures forall redCount: int, blueCount: int ::
      ValidCandyCombination(redCount, blueCount, C, Wr, Wb) ==>
      Joy(redCount, blueCount, Hr, Hb) <= result

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

