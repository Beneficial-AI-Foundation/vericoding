vc-description: |-
  Given a string, determine how many distinct strings can be obtained by repeatedly 
  applying a cyclic shift operation. A cyclic shift moves the last character of the 
  string to the beginning.

vc-preamble: |-
  function CyclicShiftForward(s: string): string
      requires |s| > 0
  {
      s[1..] + [s[0]]
  }
  
  predicate ValidInput(s: string)
  {
      |s| > 0
  }
  
  function ApplyShifts(s: string, steps: nat): string
      requires |s| > 0
      decreases steps
  {
      if steps == 0 then s
      else CyclicShiftForward(ApplyShifts(s, steps - 1))
  }
  
  function AllDistinctCyclicShifts(s: string): set<string>
      requires |s| > 0
  {
      set i | 0 <= i < |s| :: ApplyShifts(s, i)
  }

vc-helpers: |-

vc-spec: |-
  method solve(s: string) returns (result: int)
      requires ValidInput(s)
      ensures 1 <= result <= |s|
      ensures result == |AllDistinctCyclicShifts(s)|

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

