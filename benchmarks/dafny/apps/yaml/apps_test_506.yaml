vc-description: |-
  Given a rectangular sheet of paper with dimensions a Ã— b millimeters (where a > b),
  determine how many square pieces can be cut from it using the following process:
  1. From the current rectangle, cut the largest possible square
  2. Continue with the remaining rectangular strip (if any exists)  
  3. Repeat until only a square remains
  4. Count the total number of squares cut

vc-preamble: |-
  predicate ValidInput(a: int, b: int)
  {
      a > 0 && b > 0
  }
  
  function countSquares(a: int, b: int): int
      requires a >= 0 && b >= 0
      ensures a > 0 && b > 0 && a > b ==> countSquares(a, b) >= 1
      ensures a > 0 && b > 0 && b > a ==> countSquares(a, b) >= 1
      ensures a > 0 && b > 0 && a == b ==> countSquares(a, b) == 1
      decreases a + b
  {
      if a == 0 || b == 0 then 0
      else if a > b then a / b + countSquares(a % b, b)
      else b / a + countSquares(a, b % a)
  }

vc-helpers: |-

vc-spec: |-
  method solve(a: int, b: int) returns (result: int)
      requires ValidInput(a, b)
      ensures result >= 0
      ensures (a == b) ==> (result == 1)
      ensures a > b ==> result >= 1
      ensures result == countSquares(a, b)

vc-code: |-
  {
      var ans := 0;
      var x := a;
      var y := b;
  
      while x != 0 && y != 0
          invariant ans >= 0
          invariant x >= 0 && y >= 0
          invariant ans + countSquares(x, y) == countSquares(a, b)
          invariant (a > b && countSquares(a, b) >= 1) ==> ans + countSquares(x, y) >= 1
      {
          if x > y {
              ans := ans + x / y;
              x := x % y;
          } else {
              ans := ans + y / x;
              y := y % x;
          }
      }
  
      result := ans;
  }

vc-postamble: |-

