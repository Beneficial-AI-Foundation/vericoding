vc-description: |-
  Given n books numbered 1 to n and a library with capacity k, over n consecutive days
  a person requests book a_i on day i. The library starts empty and each book costs 1 CHF.
  When at capacity, one existing book must be removed before adding a new one.
  Find the minimum cost to satisfy all requests using optimal cache replacement strategy.

vc-preamble: |-
  predicate ValidInput(n: int, k: int, requests: seq<int>)
  {
      n >= 1 && k >= 1 && |requests| == n &&
      forall i :: 0 <= i < |requests| ==> 1 <= requests[i] <= n
  }
  
  predicate ValidSolution(n: int, k: int, requests: seq<int>, cost: int)
  {
      ValidInput(n, k, requests) && cost >= 0 && cost <= n
  }

vc-helpers: |-

vc-spec: |-
  method solve(n: int, k: int, requests: seq<int>) returns (cost: int)
      requires ValidInput(n, k, requests)
      ensures ValidSolution(n, k, requests, cost)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

