vc-description: |-
  Given a positive integer x, find the positive integer not exceeding x that has the maximum sum of digits. 
  If multiple such integers exist, return the largest one.

vc-preamble: |-
  function intToDigits(x: int): seq<int>
    requires x >= 0
  {
    if x == 0 then [0]
    else intToDigitsHelper(x)
  }
  
  function intToDigitsHelper(x: int): seq<int>
    requires x > 0
    decreases x
  {
    if x < 10 then [x]
    else intToDigitsHelper(x / 10) + [x % 10]
  }
  
  function digitSum(digits: seq<int>): int
  {
    if |digits| == 0 then 0
    else digits[0] + digitSum(digits[1..])
  }
  
  predicate ValidInput(x: int)
  {
    x >= 1
  }
  
  predicate ValidResult(x: int, result: int)
    requires ValidInput(x)
  {
    result > 0 &&
    result <= x &&
    (forall y :: 1 <= y <= x ==> digitSum(intToDigits(y)) <= digitSum(intToDigits(result))) &&
    (forall y :: 1 <= y <= x && digitSum(intToDigits(y)) == digitSum(intToDigits(result)) ==> y <= result)
  }

vc-helpers: |-

vc-spec: |-
  method solve(x: int) returns (result: int)
    requires ValidInput(x)
    ensures ValidResult(x, result)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

