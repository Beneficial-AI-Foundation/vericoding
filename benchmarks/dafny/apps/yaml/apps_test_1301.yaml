vc-description: |-
  Given a pattern string containing lowercase letters and dots (representing unknown letters),
  find which of the eight Pok√©mon names (vaporeon, jolteon, flareon, espeon, umbreon, leafeon, glaceon, sylveon)
  matches the pattern exactly. Input consists of pattern length n and the pattern string.

vc-preamble: |-
  predicate ValidPokemonName(name: string)
  {
      name == "vaporeon" || name == "jolteon" || name == "flareon" || name == "espeon" ||
      name == "umbreon" || name == "leafeon" || name == "glaceon" || name == "sylveon"
  }
  
  predicate MatchesPattern(pokemonName: string, pattern: string)
      requires |pokemonName| == |pattern|
  {
      forall i :: 0 <= i < |pattern| ==> (pattern[i] == '.' || pattern[i] == pokemonName[i])
  }
  
  function GetPokemonList(): seq<string>
  {
      ["vaporeon", "jolteon", "flareon", "espeon", "umbreon", "leafeon", "glaceon", "sylveon"]
  }
  
  predicate ValidInput(input: string)
  {
      |input| > 0 && 
      var lines := SplitLines(input);
      |lines| >= 2 &&
      (|lines[0]| > 0 && forall i :: 0 <= i < |lines[0]| ==> '0' <= lines[0][i] <= '9') &&
      6 <= |lines[1]| <= 8 &&
      forall i :: 0 <= i < |lines[1]| ==> ('a' <= lines[1][i] <= 'z' || lines[1][i] == '.') &&
      exists j :: 0 <= j < |GetPokemonList()| && |GetPokemonList()[j]| == |lines[1]| && MatchesPattern(GetPokemonList()[j], lines[1])
  }
  
  predicate IsFirstMatch(result: string, pattern: string, pokemonList: seq<string>)
  {
      exists i :: 0 <= i < |pokemonList| && 
          pokemonList[i] == result &&
          |result| == |pattern| &&
          MatchesPattern(result, pattern) &&
          forall j :: 0 <= j < i ==> (|pokemonList[j]| != |pattern| || !MatchesPattern(pokemonList[j], pattern))
  }

vc-helpers: |-
  function SplitLines(input: string): seq<string>
  {
      if |input| == 0 then []
      else
          var newlinePos := FindNewline(input, 0);
          if newlinePos == -1 then [input]
          else [input[0..newlinePos]] + SplitLines(input[newlinePos+1..])
  }
  
  function FindNewline(s: string, start: int): int
      requires 0 <= start <= |s|
      ensures -1 <= FindNewline(s, start) < |s|
      decreases |s| - start
  {
      if start >= |s| then -1
      else if s[start] == '\n' then start
      else FindNewline(s, start + 1)
  }

vc-spec: |-
  method solve(input: string) returns (result: string)
      requires ValidInput(input)
      ensures ValidPokemonName(result)
      ensures var lines := SplitLines(input);
          IsFirstMatch(result, lines[1], GetPokemonList())
      ensures var lines := SplitLines(input);
          exists i :: 0 <= i < |GetPokemonList()| && 
              GetPokemonList()[i] == result &&
              |result| == |lines[1]| &&
              MatchesPattern(result, lines[1])

vc-code: |-
  {
      var lines := SplitLines(input);
      var pattern := lines[1];
      var pokemonList := GetPokemonList();
  
      var i := 0;
      while i < |pokemonList|
          invariant 0 <= i <= |pokemonList|
          invariant forall j :: 0 <= j < i ==> (|pokemonList[j]| != |pattern| || !MatchesPattern(pokemonList[j], pattern))
      {
          if |pokemonList[i]| == |pattern| && MatchesPattern(pokemonList[i], pattern) {
              result := pokemonList[i];
              return;
          }
          i := i + 1;
      }
  
      result := "vaporeon";
  }

vc-postamble: |-
