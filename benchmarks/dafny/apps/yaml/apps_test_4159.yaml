vc-description: |-
  Given three integers A, B, and K, where Takahashi has A cookies and Aoki has B cookies initially.
  Takahashi performs exactly K actions, where each action follows this priority:
  1. If Takahashi has cookies, he eats one of his own cookies
  2. Otherwise, if Aoki has cookies, Takahashi eats one of Aoki's cookies  
  3. Otherwise, do nothing
  Determine how many cookies Takahashi and Aoki have after all K actions.

vc-preamble: |-
  predicate ValidInput(A: int, B: int, K: int)
  {
      A >= 0 && B >= 0 && K >= 0
  }
  
  function ExpectedTakahashiCookies(A: int, B: int, K: int): int
      requires ValidInput(A, B, K)
  {
      if A >= K then A - K
      else 0
  }
  
  function ExpectedAokiCookies(A: int, B: int, K: int): int
      requires ValidInput(A, B, K)
  {
      if A >= K then B
      else if K - A < B then B - (K - A)
      else 0
  }
  
  predicate CorrectResult(A: int, B: int, K: int, takahashi: int, aoki: int)
      requires ValidInput(A, B, K)
  {
      takahashi == ExpectedTakahashiCookies(A, B, K) &&
      aoki == ExpectedAokiCookies(A, B, K) &&
      takahashi >= 0 && aoki >= 0
  }

vc-helpers: |-

vc-spec: |-
  method solve(A: int, B: int, K: int) returns (takahashi: int, aoki: int)
      requires ValidInput(A, B, K)
      ensures CorrectResult(A, B, K, takahashi, aoki)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

