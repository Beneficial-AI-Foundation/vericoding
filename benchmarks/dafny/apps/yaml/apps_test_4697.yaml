vc-description: |-
  Given N S-shaped pieces and M c-shaped pieces, find the maximum number of "Scc groups"
  that can be formed. Each Scc group requires exactly 1 S-shaped piece and 2 c-shaped pieces.
  Additionally, 2 c-shaped pieces can be combined to create 1 S-shaped piece.

vc-preamble: |-
  predicate ValidInput(n: int, m: int)
  {
      n >= 0 && m >= 0
  }
  
  function MaxSccGroups(n: int, m: int): int
    requires ValidInput(n, m)
  {
      var directGroups := if n < m / 2 then n else m / 2;
      var remainingCPieces := m - directGroups * 2;
      var additionalGroups := remainingCPieces / 4;
      directGroups + additionalGroups
  }

vc-helpers: |-
  

vc-spec: |-
  method solve(n: int, m: int) returns (result: int)
    requires ValidInput(n, m)
    ensures result >= 0
    ensures result == MaxSccGroups(n, m)

vc-code: |-
  {
      var ans := if n < m / 2 then n else m / 2;
      ans := ans + (m - ans * 2) / 4;
      result := ans;
  }

vc-postamble: |-
