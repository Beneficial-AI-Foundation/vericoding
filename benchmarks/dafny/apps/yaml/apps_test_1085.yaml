vc-description: |-
  Given a positive integer N, find how many values of K (where 2 ≤ K ≤ N) will cause N to become 1
  through repeated operations: if K divides N, replace N with N/K; otherwise replace N with N-K;
  continue until N < K. Count the number of valid K values.

vc-preamble: |-
  predicate ValidInput(n: nat)
  {
    n > 0
  }
  
  function reduce_by_divisor(n: nat, d: nat): nat
    requires n > 0 && d > 1
    decreases n
  {
    if n % d == 0 && n >= d then 
      reduce_by_divisor(n / d, d)
    else n
  }
  
  function count_divisors(n: nat): nat
    requires n > 0
  {
    |set d | 1 <= d <= n && n % d == 0|
  }
  
  function count_special_divisors(n: nat): nat
    requires n > 0
  {
    |set d | 2 <= d <= n && n % d == 0 && (reduce_by_divisor(n, d) - 1) % d == 0|
  }
  
  function count_valid_k_values(n: nat): int
    requires n > 0
  {
    if n == 1 then -1
    else 
      count_divisors(n - 1) + count_special_divisors(n) - 1
  }

vc-helpers: |-

vc-spec: |-
  method solve(n: nat) returns (result: int)
    requires ValidInput(n)
    ensures result == count_valid_k_values(n)
    ensures n == 1 ==> result == -1
    ensures n > 1 ==> result == count_divisors(n - 1) + count_special_divisors(n) - 1
    ensures result >= -1

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

