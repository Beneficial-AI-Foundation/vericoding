vc-description: |-
  Given two configurations of n stone piles, determine if the first configuration
  can be transformed into the second using operations: remove one stone from any pile,
  or move one stone from one pile to another pile.

vc-preamble: |-
  predicate IsValidInput(input: string)
  {
      var lines := SplitLines(input);
      |lines| >= 3 && 
      ParseInt(lines[0]) > 0 &&
      |ParseIntArray(lines[1])| == ParseInt(lines[0]) &&
      |ParseIntArray(lines[2])| == ParseInt(lines[0])
  }
  
  function GetInitialSum(input: string): int
      requires IsValidInput(input)
  {
      var lines := SplitLines(input);
      Sum(ParseIntArray(lines[1]))
  }
  
  function GetTargetSum(input: string): int
      requires IsValidInput(input)
  {
      var lines := SplitLines(input);
      Sum(ParseIntArray(lines[2]))
  }
  
  function Sum(nums: seq<int>): int
      decreases |nums|
  {
      if |nums| == 0 then 0
      else nums[0] + Sum(nums[1..])
  }

vc-helpers: |-

vc-spec: |-
  method solve(input: string) returns (result: string)
      ensures result == "Yes" || result == "No"
      ensures IsValidInput(input) ==> 
          (result == "Yes" <==> GetInitialSum(input) >= GetTargetSum(input))
      ensures !IsValidInput(input) ==> result == "No"

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

