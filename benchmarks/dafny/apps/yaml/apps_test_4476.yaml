vc-description: |-
  Given two positive integers a and b, find the minimum number of moves to transform 
  a into b using these operations: add any positive odd integer to a, or subtract 
  any positive even integer from a. It is guaranteed that b can always be obtained from a.

vc-preamble: |-
  predicate ValidInput(input: seq<(int, int)>)
  {
      forall i :: 0 <= i < |input| ==> input[i].0 >= 1 && input[i].1 >= 1
  }
  
  function MinMoves(a: int, b: int): int
      requires a >= 1 && b >= 1
  {
      if a == b then 0
      else if a < b then
          if (b - a) % 2 == 1 then 1 else 2
      else
          if (a - b) % 2 == 0 then 1 else 2
  }
  
  predicate ValidOutput(input: seq<(int, int)>, result: seq<int>)
      requires ValidInput(input)
  {
      |result| == |input| &&
      forall i :: 0 <= i < |input| ==> result[i] == MinMoves(input[i].0, input[i].1) &&
      forall i :: 0 <= i < |result| ==> result[i] >= 0
  }

vc-helpers: |-

vc-spec: |-
  method solve(input: seq<(int, int)>) returns (result: seq<int>)
      requires ValidInput(input)
      ensures ValidOutput(input, result)

vc-code: |-
  {
      result := [];
      for i := 0 to |input|
          invariant 0 <= i <= |input|
          invariant |result| == i
          invariant forall j :: 0 <= j < i ==> result[j] == MinMoves(input[j].0, input[j].1)
          invariant forall j :: 0 <= j < |result| ==> result[j] >= 0
      {
          var a := input[i].0;
          var b := input[i].1;
          var moves := MinMoves(a, b);
          result := result + [moves];
      }
  }

vc-postamble: |-

