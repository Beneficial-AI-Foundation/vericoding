vc-description: |-
  Given current time A (0-23) and hours B until contest begins (0-23), 
  determine the contest start time in 24-hour format using modular arithmetic.

vc-preamble: |-
  predicate ValidInput(input: string)
  {
      exists A, B :: 0 <= A <= 23 && 0 <= B <= 23 && 
      (input == IntToString(A) + " " + IntToString(B) + "\n" ||
       input == IntToString(A) + " " + IntToString(B))
  }
  
  function ContestStartTime(A: int, B: int): int
      requires 0 <= A <= 23 && 0 <= B <= 23
      ensures 0 <= ContestStartTime(A, B) <= 23
  {
      (A + B) % 24
  }
  
  predicate CorrectOutput(input: string, result: string)
      requires ValidInput(input)
  {
      exists A, B :: 0 <= A <= 23 && 0 <= B <= 23 && 
      (input == IntToString(A) + " " + IntToString(B) + "\n" ||
       input == IntToString(A) + " " + IntToString(B)) &&
      result == IntToString(ContestStartTime(A, B)) + "\n"
  }

vc-helpers: |-

vc-spec: |-
  method solve(input: string) returns (result: string)
      requires |input| > 0
      requires ValidInput(input)
      ensures CorrectOutput(input, result)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

