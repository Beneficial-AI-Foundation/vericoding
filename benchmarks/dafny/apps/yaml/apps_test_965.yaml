vc-description: |-
  Given n players in a poker game with statuses "ALLIN" (A), "IN" (I), or "FOLDED" (F),
  determine how many players can show their hands. A player can show if their status
  is not "FOLDED" and all other players have status "ALLIN" or "FOLDED".

vc-preamble: |-
  predicate ValidInput(n: int, statuses: string)
  {
      n >= 2 && |statuses| == n && 
      forall i :: 0 <= i < |statuses| ==> statuses[i] in {'A', 'I', 'F'}
  }
  
  function CountStatus(statuses: string, status: char): int
  {
      |set i | 0 <= i < |statuses| && statuses[i] == status|
  }
  
  function ExpectedResult(statuses: string): int
  {
      var cnt_I := CountStatus(statuses, 'I');
      var cnt_A := CountStatus(statuses, 'A');
      if cnt_I == 0 then cnt_A
      else if cnt_I == 1 then 1
      else 0
  }

vc-helpers: |-

vc-spec: |-
  method solve(n: int, statuses: string) returns (result: int)
      requires ValidInput(n, statuses)
      ensures result == ExpectedResult(statuses)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

