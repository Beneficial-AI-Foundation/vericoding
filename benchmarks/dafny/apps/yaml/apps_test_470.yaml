vc-description: |-
  Given 5 cards with positive integers, find the minimum sum of remaining cards 
  after optionally discarding exactly 2 or 3 cards that have the same number 
  (at most one such discard operation allowed).

vc-preamble: |-
  predicate ValidInput(cards: seq<int>)
  {
      |cards| == 5 && forall i :: 0 <= i < |cards| ==> cards[i] > 0
  }
  
  function minPossibleSum(cards: seq<int>): int
      requires ValidInput(cards)
      ensures minPossibleSum(cards) >= 0
      ensures minPossibleSum(cards) <= sum(cards)
  {
      minPossibleSumUpToIndex(cards, 5)
  }

vc-helpers: |-

vc-spec: |-
  method solve(cards: seq<int>) returns (result: int)
      requires ValidInput(cards)
      ensures result >= 0
      ensures result <= sum(cards)
      ensures result == minPossibleSum(cards)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

