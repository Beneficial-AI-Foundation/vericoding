vc-description: |-
  Given n houses numbered 1 to n arranged in a clockwise ring with one-way clockwise traffic,
  find the minimum time to complete m tasks in sequence. Each task must be completed at a 
  specific house. Starting at house 1, moving from one house to the next adjacent house takes 
  1 time unit. Tasks must be completed in the given order.

vc-preamble: |-
  predicate ValidInput(n: int, m: int, tasks: seq<int>)
  {
      n >= 2 && m >= 1 && |tasks| == m && 
      forall i :: 0 <= i < |tasks| ==> 1 <= tasks[i] <= n
  }
  
  function MinTimeToComplete(n: int, tasks: seq<int>, currentPos: int, taskIndex: int): int
      requires n >= 2
      requires forall i :: 0 <= i < |tasks| ==> 1 <= tasks[i] <= n
      requires 1 <= currentPos <= n
      requires 0 <= taskIndex < |tasks|
  {
      var target := tasks[taskIndex];
      if target >= currentPos then target - currentPos
      else (n - currentPos) + target
  }

vc-helpers: |-
  

vc-spec: |-
  method solve(n: int, m: int, tasks: seq<int>) returns (result: int)
      requires ValidInput(n, m, tasks)
      ensures result >= 0
      ensures m > 0 ==> result >= tasks[m-1] - 1
      ensures result <= (m - 1) * n + tasks[m-1] - 1

vc-code: |-
  {
      var v := tasks;
  
      var i := 1;
      while i < |v|
          invariant 1 <= i <= |v|
          invariant |v| == m
          invariant m >= 1
          invariant forall j :: 0 <= j < |v| ==> v[j] >= 1
          invariant forall j :: 0 <= j < |v| ==> v[j] >= tasks[j]
          invariant forall j :: 0 <= j < i ==> (j == 0 || v[j] >= v[j-1])
          invariant forall j :: 0 <= j < i ==> v[j] <= tasks[j] + j * n
          invariant forall j :: i <= j < |v| ==> v[j] == tasks[j]
          decreases |v| - i
      {
          if v[i] < v[i-1] {
              var newVal := v[i] + ((v[i-1] - v[i] + n - 1) / n) * n;
              v := v[i := newVal];
          }
          while v[i] < v[i-1]
              invariant 1 <= i < |v|
              invariant |v| == m
              invariant v[i] >= tasks[i]
              invariant v[i] >= 1
              invariant forall j :: 0 <= j < i ==> v[j] >= tasks[j]
              invariant forall j :: 0 <= j < i ==> (j == 0 || v[j] >= v[j-1])
              invariant forall j :: 0 <= j < i ==> v[j] <= tasks[j] + j * n
              invariant forall j :: i+1 <= j < |v| ==> v[j] == tasks[j]
              decreases v[i-1] - v[i]
          {
              v := v[i := v[i] + n];
          }
          i := i + 1;
      }
  
      result := v[|v|-1] - 1;
  }

vc-postamble: |-
