vc-description: |-
  Given a string containing only 'x' and 'y' characters, apply operations:
  1. Swap leftmost "yx" to "xy" 
  2. Remove leftmost "xy"
  Apply operation 1 if possible, otherwise operation 2, repeat until no operations possible.
  Return the final non-empty string.

vc-preamble: |-
  predicate ValidInput(s: string)
  {
      |s| > 0 && forall i :: 0 <= i < |s| ==> s[i] == 'x' || s[i] == 'y'
  }
  
  function countChar(s: string, c: char): nat
  {
      |set i | 0 <= i < |s| && s[i] == c|
  }
  
  predicate ValidOutput(s: string, result: string)
      requires ValidInput(s)
  {
      var countX := countChar(s, 'x');
      var countY := countChar(s, 'y');
      if countY > countX then
          |result| == countY - countX && forall i :: 0 <= i < |result| ==> result[i] == 'y'
      else
          |result| == countX - countY && forall i :: 0 <= i < |result| ==> result[i] == 'x'
  }

vc-helpers: |-

vc-spec: |-
  method solve(s: string) returns (result: string)
      requires ValidInput(s)
      ensures ValidOutput(s, result)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

