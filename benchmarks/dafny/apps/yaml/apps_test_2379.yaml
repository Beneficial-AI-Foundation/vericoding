vc-description: |-
  Given N days, choose exactly K days to work with constraints:
  - After working, cannot work for next C consecutive days  
  - Can only work on days where S[i] == 'o' (not 'x')
  Find all days that must be worked in every valid selection of K workdays

vc-preamble: |-
  predicate IsValidWorkSelection(N: int, K: int, C: int, S: string, selection: set<int>)
      requires |S| == N
  {
      |selection| == K &&
      (forall day :: day in selection ==> 0 <= day < N && day < |S| && S[day] == 'o') &&
      (forall day1, day2 :: day1 in selection && day2 in selection && day1 != day2 ==> 
          day1 < day2 - C || day2 < day1 - C)
  }

vc-helpers: |-

vc-spec: |-
  method solve(N: int, K: int, C: int, S: string) returns (result: seq<int>)
      requires N > 0
      requires K > 0
      requires C >= 0
      requires K <= N
      requires |S| == N
      requires forall i :: 0 <= i < |S| ==> S[i] == 'o' || S[i] == 'x'
      requires |set i | 0 <= i < |S| && S[i] == 'o'| >= K
      requires exists validSelection :: IsValidWorkSelection(N, K, C, S, validSelection)
      ensures forall i :: 0 <= i < |result| ==> 1 <= result[i] <= N
      ensures forall i :: 0 <= i < |result| ==> S[result[i] - 1] == 'o'
      ensures forall i, j :: 0 <= i < j < |result| ==> result[i] < result[j]
      ensures |result| <= K

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

