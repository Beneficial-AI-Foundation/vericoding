vc-description: |-
  Given a string of lowercase Latin letters, repeatedly remove consecutive vowels 
  by deleting the second vowel in each consecutive pair until no consecutive vowels remain.
  Vowels are defined as: a, e, i, o, u, y. Process the string from left to right.

vc-preamble: |-
  predicate IsVowel(c: char)
  {
      c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y'
  }
  
  predicate NoConsecutiveVowels(s: seq<char>)
  {
      forall i :: 0 <= i < |s| - 1 ==> !(IsVowel(s[i]) && IsVowel(s[i+1]))
  }
  
  predicate ValidOutput(input: seq<char>, output: seq<char>)
  {
      |output| <= |input| &&
      NoConsecutiveVowels(output) &&
      (|input| > 0 ==> |output| > 0) &&
      (|input| > 0 ==> output[0] == input[0])
  }

vc-helpers: |-

vc-spec: |-
  method solve(s: seq<char>) returns (result: seq<char>)
      ensures ValidOutput(s, result)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

