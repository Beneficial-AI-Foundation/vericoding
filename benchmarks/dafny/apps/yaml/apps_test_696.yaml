vc-description: |-
  Given a prime number p, find the count of primitive roots modulo p.
  A primitive root modulo prime p is an integer x where 1 ≤ x < p such that
  x^k ≢ 1 (mod p) for all positive integers k < p-1, but x^(p-1) ≡ 1 (mod p).

vc-preamble: |-
  predicate ValidInput(p: int) {
      2 <= p < 2000
  }
  
  function CountPrimitiveRoots(p: int): int
      requires ValidInput(p)
  {
      if p == 2 then 1
      else |set i | 1 <= i < p-1 && (forall j :: 2 <= j <= i ==> !((p-1) % j == 0 && i % j == 0))|
  }

vc-helpers: |-

vc-spec: |-
  method solve(p: int) returns (result: int)
      requires ValidInput(p)
      ensures result >= 0
      ensures result == CountPrimitiveRoots(p)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

