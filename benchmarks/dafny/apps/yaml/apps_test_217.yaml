vc-description: |-
  A bus travels back and forth between points x=0 and x=a, making k total journeys.
  The bus has fuel capacity b and consumes 1 unit per distance unit. There's a gas station at x=f.
  Find minimum refuels needed to complete k journeys, or return -1 if impossible.

vc-preamble: |-
  predicate ValidInput(a: int, b: int, f: int, k: int) {
    a > 0 && b > 0 && f > 0 && k > 0 && f < a
  }
  
  predicate ImpossibleConditions(a: int, b: int, f: int, k: int) {
    b < f ||                                    
    b < a - f ||                               
    (k > 1 && b < 2 * a - f) ||               
    (k == 1 && b < a && b < f)                
  }
  
  predicate FeasibilityConditions(a: int, b: int, f: int, k: int) {
    b >= f &&                                  
    b >= a - f &&                             
    (k <= 1 || b >= 2 * a - f) &&            
    (k == 1 ==> (b >= a || b >= f))          
  }
  
  predicate SingleJourneyResult(a: int, b: int, f: int, k: int, result: int) {
    k == 1 && result >= 0 ==> (
      (b >= a && result == 0) ||                
      (b < a && b >= f && result == 1)          
    )
  }
  
  predicate MultiJourneyFeasibility(a: int, b: int, f: int, k: int, result: int) {
    k > 1 && result >= 0 ==> (
      b >= f && b >= a - f && b >= 2 * a - f    
    )
  }

vc-helpers: |-

vc-spec: |-
  method solve(a: int, b: int, f: int, k: int) returns (result: int)
    requires ValidInput(a, b, f, k)
    ensures result >= -1
    ensures result == -1 <==> ImpossibleConditions(a, b, f, k)
    ensures result >= 0 ==> result <= k
    ensures result >= 0 ==> FeasibilityConditions(a, b, f, k)
    ensures SingleJourneyResult(a, b, f, k, result)
    ensures MultiJourneyFeasibility(a, b, f, k, result)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

