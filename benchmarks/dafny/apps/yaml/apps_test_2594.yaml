vc-description: |-
  Given a rectangular park represented as an nÃ—m grid of squares, find the minimum number 
  of lanterns needed to light up all squares. Lanterns are placed on edges between squares,
  and each lantern illuminates adjacent squares (up to 2 squares, or 1 if on boundary).

vc-preamble: |-
  predicate ValidInput(input: string)
  {
      var lines := SplitLines(input);
      |lines| > 0 &&
      var t := ParseInt(lines[0]);
      t > 0 && |lines| >= t + 1 &&
      forall i {:trigger SplitSpaces(lines[i+1])} :: 0 <= i < t ==>
          var parts := SplitSpaces(lines[i+1]);
          |parts| >= 2 &&
          var n := ParseInt(parts[0]);
          var m := ParseInt(parts[1]);
          n >= 1 && m >= 1
  }
  
  function MinLanterns(n: int, m: int): int
      requires n >= 1 && m >= 1
  {
      (n * m + 1) / 2
  }
  
  predicate ValidOutput(input: string, output: seq<int>)
      requires ValidInput(input)
  {
      var lines := SplitLines(input);
      var t := ParseInt(lines[0]);
      |output| == t &&
      forall i {:trigger output[i]} :: 0 <= i < t ==>
          var parts := SplitSpaces(lines[i+1]);
          |parts| >= 2 &&
          var n := ParseInt(parts[0]);
          var m := ParseInt(parts[1]);
          n >= 1 && m >= 1 &&
          output[i] == MinLanterns(n, m)
  }

vc-helpers: |-
  function SplitLines(s: string): seq<string>
  {
      SplitByChar(s, '\n')
  }
  
  function SplitSpaces(s: string): seq<string>
  {
      SplitByChar(s, ' ')
  }
  
  function SplitByChar(s: string, delimiter: char): seq<string>
  {
      if |s| == 0 then [""]
      else
          var i := FindChar(s, delimiter, 0);
          if i == -1 then [s]
          else [s[0..i]] + SplitByChar(s[i+1..], delimiter)
  }
  
  function FindChar(s: string, c: char, start: int): int
      requires start >= 0
      ensures FindChar(s, c, start) == -1 || (start <= FindChar(s, c, start) < |s|)
      decreases |s| - start
  {
      if start >= |s| then -1
      else if s[start] == c then start
      else FindChar(s, c, start + 1)
  }
  
  function ParseInt(s: string): int
  {
      if |s| == 0 then 0
      else if s[0] == '-' && |s| > 1 then -ParseUInt(s[1..])
      else ParseUInt(s)
  }
  
  function ParseUInt(s: string): int
  {
      if |s| == 0 then 0
      else if '0' <= s[0] <= '9' then
          (s[0] as int - '0' as int) + 10 * ParseUInt(s[1..])
      else 0
  }

vc-spec: |-

vc-code: |-

vc-postamble: |-

