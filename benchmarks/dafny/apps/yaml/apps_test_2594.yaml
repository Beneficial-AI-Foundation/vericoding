vc-description: |-
  Given a rectangular park represented as an nÃ—m grid of squares, find the minimum number 
  of lanterns needed to light up all squares. Lanterns are placed on edges between squares,
  and each lantern illuminates adjacent squares (up to 2 squares, or 1 if on boundary).

vc-preamble: |-
  predicate ValidInput(input: string)
  {
      var lines := SplitLines(input);
      |lines| > 0 &&
      var t := ParseInt(lines[0]);
      t > 0 && |lines| >= t + 1 &&
      forall i {:trigger SplitSpaces(lines[i+1])} :: 0 <= i < t ==>
          var parts := SplitSpaces(lines[i+1]);
          |parts| >= 2 &&
          var n := ParseInt(parts[0]);
          var m := ParseInt(parts[1]);
          n >= 1 && m >= 1
  }
  
  function MinLanterns(n: int, m: int): int
      requires n >= 1 && m >= 1
  {
      (n * m + 1) / 2
  }
  
  predicate ValidOutput(input: string, output: seq<int>)
      requires ValidInput(input)
  {
      var lines := SplitLines(input);
      var t := ParseInt(lines[0]);
      |output| == t &&
      forall i {:trigger output[i]} :: 0 <= i < t ==>
          var parts := SplitSpaces(lines[i+1]);
          |parts| >= 2 &&
          var n := ParseInt(parts[0]);
          var m := ParseInt(parts[1]);
          n >= 1 && m >= 1 &&
          output[i] == MinLanterns(n, m)
  }

vc-helpers: |-

vc-spec: |-

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

