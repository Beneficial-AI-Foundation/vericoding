vc-description: |-
  Given an nÃ—n chessboard where white queen starts at (1,1), black queen at (1,n),
  and all other squares contain green pawns. Players alternate turns capturing pieces
  with standard queen movement. Determine the winner under optimal play.

vc-preamble: |-
  predicate ValidInput(n: int) {
      n >= 2
  }
  
  predicate IsWinForWhite(n: int) {
      n % 2 == 0
  }
  
  predicate IsWinForBlack(n: int) {
      n % 2 == 1
  }
  
  function OptimalWhiteMove(n: int): (int, int)
      requires ValidInput(n)
      requires IsWinForWhite(n)
  {
      (1, 2)
  }
  
  predicate ValidResult(n: int, result: string) 
      requires ValidInput(n)
  {
      if IsWinForBlack(n) then
          result == "black\n"
      else
          result == "white\n1 2\n"
  }

vc-helpers: |-

vc-spec: |-
  method solve(n: int) returns (result: string)
      requires ValidInput(n)
      ensures ValidResult(n, result)

vc-code: |-
  {
      if n % 2 == 1 {
          result := "black\n";
      } else {
          result := "white\n1 2\n";
      }
  }

vc-postamble: |-

