vc-description: |-
  Given a string and an integer n (0 ≤ n ≤ 26), transform the string by:
  1. Converting the entire string to lowercase
  2. For each character, if it is lexicographically smaller than the nth letter 
     of the alphabet (0-indexed), convert it to uppercase; otherwise, keep it lowercase
  3. When n = 26, use '|' as the comparison character (which comes after 'z')

vc-preamble: |-
  predicate ValidInput(s: string, n: int)
  {
    0 <= n <= 26
  }
  
  function GetComparisonChar(n: int): char
    requires 0 <= n <= 26
  {
    var alphabet := "abcdefghijklmnopqrstuvwxyz|";
    alphabet[n]
  }
  
  function IsLowercase(c: char): bool
  {
    'a' <= c <= 'z'
  }
  
  function IsUppercase(c: char): bool
  {
    'A' <= c <= 'Z'
  }
  
  function ToLowercase(c: char): char
  {
    if IsUppercase(c) then (c as int - 'A' as int + 'a' as int) as char
    else c
  }
  
  function ToUppercase(c: char): char
  {
    if IsLowercase(c) then (c as int - 'a' as int + 'A' as int) as char
    else c
  }
  
  function TransformString(s: string, n: int): string
    requires ValidInput(s, n)
  {
    var compChar := GetComparisonChar(n);
    TransformWithCompChar(ToLowercaseString(s), compChar)
  }
  
  function ToLowercaseString(s: string): string
  {
    if |s| == 0 then ""
    else [ToLowercase(s[0])] + ToLowercaseString(s[1..])
  }
  
  function TransformWithCompChar(s: string, compChar: char): string
  {
    if |s| == 0 then ""
    else if s[0] < compChar then [ToUppercase(s[0])] + TransformWithCompChar(s[1..], compChar)
    else [s[0]] + TransformWithCompChar(s[1..], compChar)
  }

vc-helpers: |-
  

vc-spec: |-
  method solve(s: string, n: int) returns (result: string)
    requires ValidInput(s, n)
    ensures result == TransformString(s, n)

vc-code: |-
  {
    var compChar := GetComparisonChar(n);
    var lowerText := ToLowercaseString(s);
    result := TransformWithCompChar(lowerText, compChar);
  }

vc-postamble: |-
