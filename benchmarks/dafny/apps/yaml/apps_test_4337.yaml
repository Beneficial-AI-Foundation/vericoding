vc-description: |-
  Given N colorful crackers with colors P, W, G, or Y, determine if exactly 3 or 4 distinct colors are present.
  The bag always contains at least one cracker of each color P, W, and G.
  Output "Three" if 3 distinct colors, "Four" if 4 distinct colors.

vc-preamble: |-
  predicate ValidInput(n: int, colors: seq<char>)
  {
      1 <= n <= 100 &&
      |colors| == n &&
      (forall c | c in colors :: c in {'P', 'W', 'G', 'Y'}) &&
      'P' in colors && 'W' in colors && 'G' in colors
  }
  
  function DistinctColors(colors: seq<char>): set<char>
  {
      set c | c in colors
  }
  
  function SolutionString(distinctCount: int): string
      requires distinctCount == 3 || distinctCount == 4
  {
      if distinctCount == 3 then "Three" else "Four"
  }

vc-helpers: |-

vc-spec: |-
  method Solve(n: int, colors: seq<char>) returns (result: string)
      requires ValidInput(n, colors)
      ensures var distinctColors := DistinctColors(colors);
              |distinctColors| == 3 || |distinctColors| == 4
      ensures var distinctColors := DistinctColors(colors);
              (|distinctColors| == 3 ==> result == "Three") &&
              (|distinctColors| == 4 ==> result == "Four")
      ensures result == "Three" || result == "Four"

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

