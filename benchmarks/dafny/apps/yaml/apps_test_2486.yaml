vc-description: |-
  Given N cards with positive integers, determine how many cards are "unnecessary."
  A subset of cards is "good" if the sum of its numbers is at least K.
  A card is "unnecessary" if for every good subset containing this card, 
  removing the card from that subset still results in a good subset.
  Count the number of unnecessary cards.

vc-preamble: |-
  function UnnecessaryCardsCount(sorted: seq<int>, k: int): int
    requires forall i, j :: 0 <= i < j < |sorted| ==> sorted[i] >= sorted[j]
    requires forall i :: 0 <= i < |sorted| ==> sorted[i] >= 1
    requires k >= 1
  {
    if |sorted| == 0 then 0
    else
      UnnecessaryCardsCountHelper(sorted, k, 0, 0, 0)
  }
  
  function UnnecessaryCardsCountHelper(sorted: seq<int>, k: int, temp: int, ans: int, i: int): int
    requires forall x, y :: 0 <= x < y < |sorted| ==> sorted[x] >= sorted[y]
    requires forall x :: 0 <= x < |sorted| ==> sorted[x] >= 1
    requires k >= 1
    requires 0 <= i <= |sorted|
    requires temp >= 0
    requires ans >= 0
    decreases |sorted| - i
  {
    if i >= |sorted| then ans
    else
      var x := sorted[i];
      if temp + x < k then
        UnnecessaryCardsCountHelper(sorted, k, temp + x, ans + 1, i + 1)
      else
        UnnecessaryCardsCountHelper(sorted, k, 0, 0, i + 1)
  }

vc-helpers: |-

vc-spec: |-
  method solve(n: int, k: int, a: seq<int>) returns (result: int)
    requires n >= 1
    requires k >= 1
    requires |a| == n
    requires forall i :: 0 <= i < |a| ==> a[i] >= 1
    ensures result >= 0
    ensures result <= n
    ensures exists sorted :: 
      |sorted| == |a| &&
      multiset(sorted) == multiset(a) &&
      (forall i, j :: 0 <= i < j < |sorted| ==> sorted[i] >= sorted[j]) &&
      (forall i :: 0 <= i < |sorted| ==> sorted[i] >= 1) &&
      result == UnnecessaryCardsCount(sorted, k)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

