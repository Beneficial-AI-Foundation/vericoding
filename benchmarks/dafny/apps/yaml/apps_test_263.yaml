vc-description: |-
  Given n benches with initial occupancies and m additional people to seat,
  find the minimum and maximum possible values of k, where k is the maximum
  occupancy of any single bench after all m people are seated.
  For minimum k: distribute people as evenly as possible.
  For maximum k: add all m people to the bench with current maximum occupancy.

vc-preamble: |-
  predicate ValidInput(n: nat, m: nat, benches: seq<nat>)
  {
      n > 0 && m > 0 && |benches| == n && forall i :: 0 <= i < n ==> benches[i] > 0
  }
  
  function max_seq(s: seq<nat>): nat
      requires |s| > 0
  {
      if |s| == 1 then s[0]
      else if s[0] >= max_seq(s[1..]) then s[0]
      else max_seq(s[1..])
  }
  
  function sum_seq(s: seq<nat>): nat
  {
      if |s| == 0 then 0
      else s[0] + sum_seq(s[1..])
  }

vc-helpers: |-

vc-spec: |-
  method solve(n: nat, m: nat, benches: seq<nat>) returns (minimum: nat, maximum: nat)
      requires ValidInput(n, m, benches)
      ensures maximum == max_seq(benches) + m
      ensures var total := sum_seq(benches) + m;
              var current_max := max_seq(benches);
              if total <= current_max * n then minimum == current_max
              else minimum == (total + n - 1) / n

vc-code: |-
  {
      var current_max := max_seq(benches);
      var total := sum_seq(benches) + m;
  
      maximum := current_max + m;
  
      if total <= current_max * n {
          minimum := current_max;
      } else {
          minimum := (total + n - 1) / n;
      }
  }

vc-postamble: |-

