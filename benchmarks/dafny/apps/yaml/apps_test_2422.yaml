vc-description: |-
  Given an integer n representing total windows in a building, find any valid combination
  of non-negative integers (a, b, c) representing 3-room, 5-room, and 7-room apartments
  such that 3a + 5b + 7c = n. Return -1 if no valid combination exists.

vc-preamble: |-
  predicate ValidSolution(n: int, a: int, b: int, c: int)
  {
      a >= 0 && b >= 0 && c >= 0 && 3 * a + 5 * b + 7 * c == n
  }
  
  predicate ValidResult(n: int, result: seq<int>)
  {
      (|result| == 1 && result[0] == -1) ||
      (|result| == 3 && result[0] >= 0 && result[1] >= 0 && result[2] >= 0 && 
       ValidSolution(n, result[0], result[1], result[2]))
  }

vc-helpers: |-

vc-spec: |-
  method solve(n: int) returns (result: seq<int>)
      requires n >= 1
      ensures ValidResult(n, result)
      ensures n % 3 == 0 ==> |result| == 3 && result == [n / 3, 0, 0]
      ensures n % 3 == 1 && n < 7 ==> |result| == 1 && result[0] == -1
      ensures n % 3 == 1 && n >= 7 ==> |result| == 3 && result == [(n - 7) / 3, 0, 1]
      ensures n % 3 == 2 && n < 5 ==> |result| == 1 && result[0] == -1
      ensures n % 3 == 2 && n >= 5 ==> |result| == 3 && result == [(n - 5) / 3, 1, 0]

vc-code: |-
  {
      if n % 3 == 0 {
          result := [n / 3, 0, 0];
      } else if n % 3 == 1 {
          if n < 7 {
              result := [-1];
          } else {
              result := [(n - 7) / 3, 0, 1];
          }
      } else {
          if n < 5 {
              result := [-1];
          } else {
              result := [(n - 5) / 3, 1, 0];
          }
      }
  }

vc-postamble: |-

