vc-description: |-
  Calculate the minimum number of meals Vasiliy could have missed during his sanatorium stay.
  Given counts of breakfasts (b), dinners (d), and suppers (s) he had, determine how many meals
  he definitively missed based on arrival/departure timing constraints.

vc-preamble: |-
  function Max3(a: int, b: int, c: int): int
  {
      if a >= b && a >= c then a
      else if b >= c then b
      else c
  }
  
  function CalculateMissedMeals(input: string): int
  {
      var parts := SplitSpaces(TrimNewline(input));
      if |parts| >= 3 then
          var a := StringToInt(parts[0]);
          var b := StringToInt(parts[1]);  
          var c := StringToInt(parts[2]);
          var maxVal := Max3(a, b, c);
          var threshold := maxVal - 1;
          (if a < threshold then threshold - a else 0) +
          (if b < threshold then threshold - b else 0) +
          (if c < threshold then threshold - c else 0)
      else 0
  }
  
  predicate ValidInput(input: string)
  {
      |input| > 0
  }

vc-helpers: |-

vc-spec: |-
  method solve(input: string) returns (result: string)
  requires ValidInput(input)
  ensures result == IntToString(CalculateMissedMeals(input))

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

