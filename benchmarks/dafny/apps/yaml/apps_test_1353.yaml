vc-description: |-
  Find the minimum cost for Ann to make exactly n subway rides, given two ticket options:
  single-ride tickets (cost a rubles each) and multi-ride tickets (cost b rubles, covers m rides).
  Ann can buy any combination of these tickets.
  
  // All single tickets
  
  // All multi-ride tickets (with potential waste)
  
  // Mixed: multi-ride + single for remainder

vc-preamble: |-
  predicate ValidInput(n: int, m: int, a: int, b: int)
  {
      n >= 1 && n <= 1000 &&
      m >= 1 && m <= 1000 &&
      a >= 1 && a <= 1000 &&
      b >= 1 && b <= 1000
  }
  
  function OptimalCost(n: int, m: int, a: int, b: int): int
      requires ValidInput(n, m, a, b)
  {
      min(
          n * a,
          min(
              ((n + m - 1) / m) * b,
              (n / m) * b + (n % m) * a
          )
      )
  }

vc-helpers: |-

vc-spec: |-
  method solve(n: int, m: int, a: int, b: int) returns (result: int)
      requires ValidInput(n, m, a, b)
      ensures result >= 0
      ensures result == OptimalCost(n, m, a, b)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

