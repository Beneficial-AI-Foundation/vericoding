vc-description: |-
  Given an integer sequence a of length n, simulate n operations on an initially empty sequence b:
  Operation i: Append a[i] to the end of b, then reverse the entire sequence b
  Output the final sequence b after all n operations.

vc-preamble: |-
  predicate ValidInput(n: int, a: seq<int>) {
      n >= 1 && |a| == n
  }
  
  function simulateOperations(a: seq<int>): seq<int>
      requires |a| >= 1
      decreases |a|
  {
      if |a| == 1 then 
          [a[0]]
      else
          var prev := simulateOperations(a[..|a|-1]);
          reverseSeq(prev + [a[|a|-1]])
  }
  
  function computeResult(a: seq<int>): seq<int>
      requires |a| >= 1
      ensures |computeResult(a)| == |a|
  {
      var n := |a|;
      var o := seq(if n % 2 == 0 then n / 2 else (n + 1) / 2, i requires 0 <= i < (if n % 2 == 0 then n / 2 else (n + 1) / 2) => a[2*i]);
      var e := seq(n / 2, i requires 0 <= i < n / 2 => a[2*i + 1]);
      if n % 2 == 0 then
          reverseSeq(e) + o
      else
          reverseSeq(o) + e
  }
  
  function reverseSeq(s: seq<int>): seq<int>
      ensures |reverseSeq(s)| == |s|
      ensures forall i :: 0 <= i < |s| ==> reverseSeq(s)[i] == s[|s| - 1 - i]
  {
      if |s| == 0 then []
      else reverseSeq(s[1..]) + [s[0]]
  }

vc-helpers: |-
  

vc-spec: |-
  method solve(n: int, a: seq<int>) returns (result: seq<int>)
      requires ValidInput(n, a)
      ensures |result| == n
      ensures result == computeResult(a)

vc-code: |-
  {
      var o: seq<int> := [];
      var e: seq<int> := [];
  
      // Split into odd and even indices (0-based)
      var i := 0;
      while i < n
          invariant 0 <= i <= n
          invariant |o| == (i + 1) / 2
          invariant |e| == i / 2
          invariant forall k :: 0 <= k < |o| ==> o[k] == a[2*k]
          invariant forall k :: 0 <= k < |e| ==> e[k] == a[2*k+1]
      {
          if i % 2 == 0 {
              o := o + [a[i]];
          } else {
              e := e + [a[i]];
          }
          i := i + 1;
      }
  
      if n % 2 == 0 {
          // reverse e
          var reversed_e := reverseSeq(e);
          result := reversed_e + o;
      } else {
          // reverse o
          var reversed_o := reverseSeq(o);
          result := reversed_o + e;
      }
  }

vc-postamble: |-
