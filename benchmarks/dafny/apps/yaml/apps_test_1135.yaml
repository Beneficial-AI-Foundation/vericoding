vc-description: |-
  Decode a string that was encoded by repeatedly extracting median characters.
  The decoding process inserts each character from the encoded string back into
  its proper median position in the reconstructed word.

vc-preamble: |-
  predicate ValidInput(n: int, s: string)
  {
      n >= 1 && n <= 2000 && |s| == n && 
      forall i :: 0 <= i < |s| ==> 'a' <= s[i] <= 'z'
  }
  
  predicate ValidOutput(result: string, n: int)
  {
      |result| == n && 
      forall i :: 0 <= i < |result| ==> 'a' <= result[i] <= 'z'
  }
  
  predicate PreservesCharacters(s: string, result: string)
  {
      multiset(s) == multiset(result)
  }

vc-helpers: |-
  lemma MultisetSliceLemma(s: string, pos: int)
      requires 0 <= pos <= |s|
      ensures multiset(s) == multiset(s[..pos]) + multiset(s[pos..])
  {
      if pos == 0 {
          assert s == s[pos..];
      } else if pos == |s| {
          assert s == s[..pos];
      } else {
          assert s == s[..pos] + s[pos..];
      }
  }

vc-spec: |-
  method solve(n: int, s: string) returns (result: string)
      requires ValidInput(n, s)
      ensures ValidOutput(result, n)
      ensures PreservesCharacters(s, result)

vc-code: |-
  {
      result := "";
      var i := n - 1;
      var m := 0;
  
      while i >= 0
          invariant 0 <= i + 1 <= n
          invariant m == n - 1 - i
          invariant |result| == m
          invariant forall j :: 0 <= j < |result| ==> 'a' <= result[j] <= 'z'
          invariant forall j :: 0 <= j < |result| ==> result[j] in s
          invariant multiset(result) == multiset(s[i+1..])
          invariant forall k :: i + 1 <= k < n ==> s[k] in result
      {
          var c := s[i];
          assert 'a' <= c <= 'z';
          var pos := m / 2;
          var old_result := result;
          result := result[..pos] + [c] + result[pos..];
  
          MultisetSliceLemma(old_result, pos);
          assert multiset(old_result) == multiset(old_result[..pos]) + multiset(old_result[pos..]);
          assert multiset(result) == multiset(old_result[..pos]) + multiset([c]) + multiset(old_result[pos..]);
          assert multiset(result) == multiset(old_result) + multiset([c]);
          assert multiset(old_result) == multiset(s[i+1..]);
          assert c == s[i];
          assert s[i..] == [s[i]] + s[i+1..];
          assert multiset(s[i..]) == multiset([s[i]]) + multiset(s[i+1..]);
          assert multiset(result) == multiset(s[i..]);
  
          i := i - 1;
          m := m + 1;
  
          assert multiset(result) == multiset(s[i+1..]);
      }
  }

vc-postamble: |-
