vc-description: |-
  Given a binary string S of length N and an integer K, find the maximum length of 
  consecutive '1's achievable using at most K flip operations. Each flip operation 
  chooses a contiguous range and flips all bits in that range (0→1, 1→0).

vc-preamble: |-
  predicate ValidInput(N: int, K: int, S: string)
  {
      N > 0 && K >= 0 && |S| == N && 
      forall i :: 0 <= i < |S| ==> S[i] == '0' || S[i] == '1'
  }
  
  function StringToBits(S: string): seq<int>
      requires forall i :: 0 <= i < |S| ==> S[i] == '0' || S[i] == '1'
  {
      seq(|S|, i requires 0 <= i < |S| => if S[i] == '0' then 0 else 1)
  }
  
  predicate ValidResult(result: int, N: int)
  {
      0 <= result <= N
  }

vc-helpers: |-

vc-spec: |-
  method solve(N: int, K: int, S: string) returns (result: int)
      requires ValidInput(N, K, S)
      ensures ValidResult(result, N)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

