vc-description: |-
  Given an array where element a[i] = i * (-1)^i (so a[1] = -1, a[2] = 2, a[3] = -3, etc.),
  answer queries asking for the sum of elements from index l to r inclusive.

vc-preamble: |-
  predicate ValidQuery(query: (int, int))
  {
      query.0 >= 1 && query.0 <= query.1
  }
  
  predicate ValidInput(queries: seq<(int, int)>)
  {
      forall i :: 0 <= i < |queries| ==> ValidQuery(queries[i])
  }
  
  function ArrayElement(i: int): int
      requires i >= 1
  {
      i * (if i % 2 == 1 then -1 else 1)
  }
  
  function RangeSum(l: int, r: int): int
      requires l >= 1
      decreases r - l + 1
  {
      if l > r then 0 else ArrayElement(l) + RangeSum(l + 1, r)
  }
  
  function PrefixSum(k: int): int
  {
      if k % 2 == 0 then k / 2 else -(k + 1) / 2
  }
  
  predicate CorrectResult(queries: seq<(int, int)>, results: seq<int>)
      requires ValidInput(queries)
  {
      |results| == |queries| &&
      forall i :: 0 <= i < |queries| ==> results[i] == PrefixSum(queries[i].1) - PrefixSum(queries[i].0 - 1)
  }

vc-helpers: |-
  function s(k: int): int
  {
      if k % 2 == 0 then k / 2 else -(k + 1) / 2
  }

vc-spec: |-
  method solve(queries: seq<(int, int)>) returns (results: seq<int>)
      requires ValidInput(queries)
      ensures CorrectResult(queries, results)

vc-code: |-
  {
      results := [];
      for i := 0 to |queries|
          invariant |results| == i
          invariant forall j :: 0 <= j < i ==> results[j] == s(queries[j].1) - s(queries[j].0 - 1)
      {
          var l := queries[i].0;
          var r := queries[i].1;
          var answer := s(r) - s(l - 1);
          results := results + [answer];
      }
  }

vc-postamble: |-

