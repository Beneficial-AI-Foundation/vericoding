vc-description: |-
  Given k people who each want to make n paper airplanes, where s airplanes can be made from one sheet of paper,
  and paper is sold in packs of p sheets each, find the minimum number of packs needed to buy so that each person
  has enough sheets to make their n airplanes.

vc-preamble: |-
  predicate ValidInput(k: int, n: int, s: int, p: int)
  {
    k >= 1 && n >= 1 && s >= 1 && p >= 1 &&
    k <= 10000 && n <= 10000 && s <= 10000 && p <= 10000
  }
  
  function SheetsPerPerson(n: int, s: int): int
    requires s >= 1
  {
    (n + s - 1) / s
  }
  
  function TotalSheetsNeeded(k: int, n: int, s: int): int
    requires s >= 1
  {
    k * SheetsPerPerson(n, s)
  }
  
  function MinPacksNeeded(k: int, n: int, s: int, p: int): int
    requires s >= 1 && p >= 1
  {
    (TotalSheetsNeeded(k, n, s) + p - 1) / p
  }
  
  predicate CorrectResult(result: int, k: int, n: int, s: int, p: int)
    requires s >= 1 && p >= 1
  {
    result == MinPacksNeeded(k, n, s, p) &&
    result * p >= TotalSheetsNeeded(k, n, s) &&
    (result - 1) * p < TotalSheetsNeeded(k, n, s)
  }

vc-helpers: |-
  

vc-spec: |-
  method solve(k: int, n: int, s: int, p: int) returns (result: int)
    requires ValidInput(k, n, s, p)
    ensures result >= 1
    ensures CorrectResult(result, k, n, s, p)

vc-code: |-
  {
    var sheets_per_person := SheetsPerPerson(n, s);
    var total_sheets := TotalSheetsNeeded(k, n, s);
    result := MinPacksNeeded(k, n, s, p);
  }

vc-postamble: |-
