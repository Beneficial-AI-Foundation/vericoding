vc-description: |-
  Decrypt a string that was encrypted using the Right-Left cipher.
  The Right-Left cipher encrypts by starting with the first character,
  then alternating between appending to the right (even positions) and
  prepending to the left (odd positions) for subsequent characters.

vc-preamble: |-
  predicate ValidInput(t: string)
  {
      |t| >= 1
  }

vc-helpers: |-
  

vc-spec: |-
  method solve(t: string) returns (result: string)
      requires ValidInput(t)
      ensures |result| == |t|

vc-code: |-
  {
      var chars := t;
      var res: seq<char> := [];
  
      var left := 0;
      var right := |chars| - 1;
  
      var i := |chars| - 1;
      while i >= 0
          invariant 0 <= left <= |chars|
          invariant -1 <= right < |chars|
          invariant left + (|chars| - 1 - right) == |chars| - 1 - i
          invariant |res| == |chars| - 1 - i
          invariant left <= right + 1
          decreases i
      {
          if i % 2 == 1 {
              // pop from right
              res := res + [chars[right]];
              right := right - 1;
          } else {
              // popleft
              res := res + [chars[left]];
              left := left + 1;
          }
          i := i - 1;
      }
  
      result := res;
  }

vc-postamble: |-
