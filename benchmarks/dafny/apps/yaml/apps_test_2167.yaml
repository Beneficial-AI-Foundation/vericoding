vc-description: |-
  Given an array of n integers, find the maximum number of elements that can be made equal
  after performing any number of operations where each operation chooses two different elements
  and simultaneously increases one by 1 and decreases the other by 1.

vc-preamble: |-
  predicate ValidInput(n: int, arr: seq<int>)
  {
    n >= 1 && |arr| == n
  }
  
  function sum_seq(s: seq<int>): int
  {
    if |s| == 0 then 0
    else s[0] + sum_seq(s[1..])
  }
  
  predicate CorrectResult(n: int, arr: seq<int>, result: int)
    requires ValidInput(n, arr)
  {
    (sum_seq(arr) % n == 0 ==> result == n) &&
    (sum_seq(arr) % n != 0 ==> result == n - 1) &&
    (result == n || result == n - 1)
  }

vc-helpers: |-

vc-spec: |-
  method solve(n: int, arr: seq<int>) returns (result: int)
    requires ValidInput(n, arr)
    ensures CorrectResult(n, arr, result)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

