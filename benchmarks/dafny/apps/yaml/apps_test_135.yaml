vc-description: |-
  Given two integers n and k, determine whether all remainders n mod i for i = 1, 2, ..., k are distinct.
  Specifically, check if n mod 1 = 0, n mod 2 = 1, n mod 3 = 2, ..., n mod k = k-1.

vc-preamble: |-
  predicate ValidInput(n: int, k: int)
  {
      n >= 1 && k >= 1
  }
  
  predicate AllRemaindersDistinct(n: int, k: int)
      requires ValidInput(n, k)
  {
      forall i :: 1 <= i <= k ==> n % i == (i - 1)
  }
  
  predicate HasNonDistinctRemainder(n: int, k: int)
      requires ValidInput(n, k)
  {
      exists i :: 1 <= i <= k && n % i != (i - 1)
  }

vc-helpers: |-

vc-spec: |-
  method solve(n: int, k: int) returns (result: string)
      requires ValidInput(n, k)
      ensures result == "Yes\n" <==> AllRemaindersDistinct(n, k)
      ensures result == "No\n" <==> HasNonDistinctRemainder(n, k)

vc-code: |-
  {
      var i := 1;
      while i <= k
          invariant 1 <= i <= k + 1
          invariant forall j :: 1 <= j < i ==> n % j == (j - 1)
      {
          if (n % i != (i - 1)) {
              return "No\n";
          }
          i := i + 1;
      }
      return "Yes\n";
  }

vc-postamble: |-

