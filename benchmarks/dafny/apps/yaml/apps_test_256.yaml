vc-description: |-
  Game theory problem: Two teams of 2 players each compete. Each player has defense and attack skills.
  Team 1 chooses their defense/attack assignment first, then Team 2 responds optimally.
  A team wins if their defense > opponent's attack AND their attack > opponent's defense.
  Determine which team can guarantee a win with optimal play, or if neither can.
  
  // player 1 defense
  
  // player 1 attack
  
  // player 2 defense
  
  // player 2 attack
  
  // player 3 defense
  
  // player 3 attack
  
  // player 4 defense
  
  // player 4 attack

vc-preamble: |-
  predicate ValidInput(input: string)
  {
      var lines := SplitLines(input);
      |lines| >= 4 &&
      (forall i :: 0 <= i < 4 ==> ValidPlayerLine(lines[i]))
  }
  
  predicate ValidPlayerLine(line: string)
  {
      var parts := SplitByChar(line, ' ');
      |parts| == 2 &&
      IsValidInteger(parts[0]) &&
      IsValidInteger(parts[1])
  }
  
  predicate IsValidInteger(s: string)
  {
      |s| > 0 && (forall i :: 0 <= i < |s| ==> '0' <= s[i] <= '9')
  }
  
  function ComputeResult(input: string): string
  {
      var lines := SplitLines(input);
      if |lines| < 4 then ""
      else
          var player1 := ParseLine(lines[0]);
          var player2 := ParseLine(lines[1]);
          var player3 := ParseLine(lines[2]);
          var player4 := ParseLine(lines[3]);
  
          if |player1| != 2 || |player2| != 2 || |player3| != 2 || |player4| != 2 then ""
          else
              var a := player1[0];
              var b := player1[1];
              var c := player2[0];
              var d := player2[1];
              var x := player3[0];
              var y := player3[1];
              var z := player4[0];
              var w := player4[1];
  
              var Team1 := (a > w && a > y && d > x && d > z) || (c > w && c > y && b > x && b > z);
              var Team2 := ((x > b && w > c) || (z > b && y > c)) && ((x > d && w > a) || (z > d && y > a));
  
              if Team1 then "Team 1\n"
              else if Team2 then "Team 2\n"
              else "Draw\n"
  }

vc-helpers: |-

vc-spec: |-
  method solve(input: string) returns (result: string)
      requires ValidInput(input)
      ensures result == ComputeResult(input)
      ensures result == "Team 1\n" || result == "Team 2\n" || result == "Draw\n"

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

