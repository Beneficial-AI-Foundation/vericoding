vc-description: |-
  Calculate the value of (1^n + 2^n + 3^n + 4^n) mod 5 for a given integer n.
  The input n is given as a string representation of a non-negative integer.
  The result is either 4 (when n â‰¡ 0 mod 4) or 0 (otherwise).

vc-preamble: |-
  function StringToNat(s: string): nat
    requires |s| > 0
    requires forall i :: 0 <= i < |s| ==> '0' <= s[i] <= '9'
  {
    if |s| == 1 then (s[0] as int - '0' as int) as nat
    else StringToNat(s[..|s|-1]) * 10 + (s[|s|-1] as int - '0' as int) as nat
  }
  
  predicate ValidInput(n: string)
  {
    |n| > 0 && 
    (forall i :: 0 <= i < |n| ==> '0' <= n[i] <= '9') &&
    (n[0] != '0' || |n| == 1)
  }
  
  predicate ValidOutput(result: string)
  {
    result == "4\n" || result == "0\n"
  }

vc-helpers: |-

vc-spec: |-
  method solve(n: string) returns (result: string)
    requires ValidInput(n)
    ensures ValidOutput(result)
    ensures (StringToNat(n) % 4 == 0) <==> (result == "4\n")
    ensures (StringToNat(n) % 4 != 0) <==> (result == "0\n")

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

