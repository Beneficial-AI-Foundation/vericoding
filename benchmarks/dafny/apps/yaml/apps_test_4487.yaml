vc-description: |-
  Given three strings A, B, and C, determine if they form a word chain.
  A word chain exists if the last character of A equals the first character of B
  and the last character of B equals the first character of C.
  Output "YES" if both conditions are true, "NO" otherwise.

vc-preamble: |-
  predicate ValidInput(input: string)
  {
      |input| > 0
  }
  
  predicate ValidParsedInput(parts: seq<string>)
  {
      |parts| == 3 && |parts[0]| > 0 && |parts[1]| > 0 && |parts[2]| > 0
  }
  
  predicate IsWordChain(a: string, b: string, c: string)
      requires |a| > 0 && |b| > 0 && |c| > 0
  {
      a[|a|-1] == b[0] && b[|b|-1] == c[0]
  }
  
  function ExpectedResult(input: string): string
      requires ValidInput(input)
  {
      var stripped := if |input| > 0 && input[|input|-1] == '\n' then input[0..|input|-1] else input;
      var parts := SplitOnSpaces(stripped);
      if ValidParsedInput(parts) then
          if IsWordChain(parts[0], parts[1], parts[2]) then "YES\n" else "NO\n"
      else
          ""
  }

vc-helpers: |-

vc-spec: |-
  method solve(input: string) returns (result: string)
      requires ValidInput(input)
      ensures result == ExpectedResult(input)
      ensures result == "YES\n" || result == "NO\n" || result == ""

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

