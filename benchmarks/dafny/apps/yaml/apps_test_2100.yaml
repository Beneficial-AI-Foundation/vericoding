vc-description: |-
  Given n cupboards with left and right doors that can be open (1) or closed (0),
  find the minimum number of operations to make all left doors have the same state
  and all right doors have the same state. Each operation changes one door's state.

vc-preamble: |-
  predicate ValidInput(input: string)
  {
      var lines := Split(input, '\n');
      |lines| >= 1 &&
      IsValidNumber(lines[0]) &&
      var n := StringToInt(lines[0]);
      n >= 0 && n + 1 <= |lines| &&
      forall i :: 1 <= i <= n && i < |lines| ==>
          var parts := Split(lines[i], ' ');
          |parts| >= 2 && IsValidDoorState(parts[0]) && IsValidDoorState(parts[1])
  }
  
  predicate ValidOutput(output: string)
  {
      IsValidNumber(output)
  }
  
  predicate IsValidNumber(s: string)
  {
      |s| > 0 && forall i :: 0 <= i < |s| ==> '0' <= s[i] <= '9'
  }
  
  predicate IsValidDoorState(s: string)
  {
      s == "0" || s == "1"
  }
  
  function CalculateMinOperations(input: string): string
      requires ValidInput(input)
  {
      var lines := Split(input, '\n');
      var n := StringToInt(lines[0]);
      if n == 0 then "0"
      else
          var leftZeros := CountLeftZeros(lines, 1, n);
          var rightZeros := CountRightZeros(lines, 1, n);
          var leftOps := if leftZeros < n - leftZeros then leftZeros else n - leftZeros;
          var rightOps := if rightZeros < n - rightZeros then rightZeros else n - rightZeros;
          IntToString(leftOps + rightOps)
  }

vc-helpers: |-

vc-spec: |-
  method Solve(input: string) returns (result: string)
      requires |input| > 0
      requires ValidInput(input)
      ensures |result| > 0
      ensures ValidOutput(result)
      ensures result == CalculateMinOperations(input)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

