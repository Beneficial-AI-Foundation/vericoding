vc-description: |-
  Given N total test cases and M passed test cases, determine if all test cases 
  were passed. Input is a string with N and M separated by space. Output "Yes" 
  if M = N (all passed), "No" otherwise. Constraints: 1 ≤ N ≤ 100, 0 ≤ M ≤ N.

vc-preamble: |-
  predicate ValidInput(input: string)
  {
      |input| > 0 &&
      exists lines :: lines == Split(input, '\n') && |lines| > 0 &&
      exists parts :: parts == Split(lines[0], ' ') && |parts| == 2 &&
      exists n, m :: n == StringToInt(parts[0]) && 
                     m == StringToInt(parts[1]) &&
                     1 <= n <= 100 && 0 <= m <= n
  }
  
  function ExtractN(input: string): int
  requires ValidInput(input)
  {
      var lines := Split(input, '\n');
      var parts := Split(lines[0], ' ');
      StringToInt(parts[0])
  }
  
  function ExtractM(input: string): int
  requires ValidInput(input)
  {
      var lines := Split(input, '\n');
      var parts := Split(lines[0], ' ');
      StringToInt(parts[1])
  }
  
  predicate CorrectOutput(input: string, result: string)
  requires ValidInput(input)
  {
      var n := ExtractN(input);
      var m := ExtractM(input);
      (n == m ==> result == "Yes") && (n != m ==> result == "No")
  }

vc-helpers: |-
  function Split(s: string, delimiter: char): seq<string>
  {
      if |s| == 0 then
          [""]
      else if s[0] == delimiter then
          [""] + Split(s[1..], delimiter)
      else
          var rest := Split(s[1..], delimiter);
          if |rest| == 0 then [s] else [s[0..1] + rest[0]] + rest[1..]
  }
  
  function StringToInt(s: string): int
  {
      if |s| == 0 then 0
      else if s[0] == '-' then -StringToIntHelper(s[1..])
      else StringToIntHelper(s)
  }
  
  function StringToIntHelper(s: string): int
  {
      if |s| == 0 then 0
      else if |s| == 1 then s[0] as int - '0' as int
      else StringToIntHelper(s[..|s|-1]) * 10 + (s[|s|-1] as int - '0' as int)
  }

vc-spec: |-
  method solve(input: string) returns (result: string)
  requires ValidInput(input)
  ensures CorrectOutput(input, result)
  ensures result == "Yes" || result == "No"

vc-code: |-
  {
      var lines := Split(input, '\n');
      var parts := Split(lines[0], ' ');
      var n := StringToInt(parts[0]);
      var m := StringToInt(parts[1]);
  
      if n == m {
          result := "Yes";
      } else {
          result := "No";
      }
  }

vc-postamble: |-
