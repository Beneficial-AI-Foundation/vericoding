vc-description: |-
  Given two rows of n students each, select a team with maximum total height
  such that selected students have strictly increasing indices, no two
  consecutive selected students are from the same row, and any number of
  students can be selected (including zero).

vc-preamble: |-
  predicate ValidInput(n: int, h1: seq<int>, h2: seq<int>)
  {
      n >= 1 && |h1| >= n && |h2| >= n &&
      (forall i :: 0 <= i < n ==> h1[i] >= 0) &&
      (forall i :: 0 <= i < n ==> h2[i] >= 0)
  }
  
  function maxTeamHeight(n: int, h1: seq<int>, h2: seq<int>): int
      requires ValidInput(n, h1, h2)
  {
      var dp1 := maxHeightEndingInRow1(n, h1, h2);
      var dp2 := maxHeightEndingInRow2(n, h1, h2);
      if dp1 > dp2 then dp1 else dp2
  }
  
  function maxHeightEndingInRow1(n: int, h1: seq<int>, h2: seq<int>): int
      requires ValidInput(n, h1, h2)
      decreases n
  {
      if n == 1 then h1[0]
      else
          var prevRow2 := maxHeightEndingInRow2(n-1, h1, h2);
          var prevRow1 := maxHeightEndingInRow1(n-1, h1, h2);
          var takeFromRow2 := prevRow2 + h1[n-1];
          if takeFromRow2 > prevRow1 then takeFromRow2 else prevRow1
  }
  
  function maxHeightEndingInRow2(n: int, h1: seq<int>, h2: seq<int>): int
      requires ValidInput(n, h1, h2)
      decreases n
  {
      if n == 1 then h2[0]
      else
          var prevRow1 := maxHeightEndingInRow1(n-1, h1, h2);
          var prevRow2 := maxHeightEndingInRow2(n-1, h1, h2);
          var takeFromRow1 := prevRow1 + h2[n-1];
          if takeFromRow1 > prevRow2 then takeFromRow1 else prevRow2
  }

vc-helpers: |-
  

vc-spec: |-
  method solve(n: int, h1: seq<int>, h2: seq<int>) returns (result: int)
      requires ValidInput(n, h1, h2)
      ensures result >= 0
      ensures result == maxTeamHeight(n, h1, h2)

vc-code: |-
  {
      var r1 := 0;
      var r2 := 0;
  
      for i := 0 to n
          invariant 0 <= i <= n
          invariant i == 0 || r1 == maxHeightEndingInRow1(i, h1, h2)
          invariant i == 0 || r2 == maxHeightEndingInRow2(i, h1, h2)
          invariant i == 0 || r1 >= 0
          invariant i == 0 || r2 >= 0
      {
          if i == 0 {
              r1 := h1[0];
              r2 := h2[0];
          } else {
              var old_r1 := r1;
              var old_r2 := r2;
              r1 := if old_r2 + h1[i] > old_r1 then old_r2 + h1[i] else old_r1;
              r2 := if old_r1 + h2[i] > old_r2 then old_r1 + h2[i] else old_r2;
          }
      }
  
      result := if r1 > r2 then r1 else r2;
  }

vc-postamble: |-
