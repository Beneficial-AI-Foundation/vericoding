vc-description: |-
  Given two polynomials f(x) and g(x) with positive integer coefficients,
  find any coefficient in their product h(x) = f(x) Â· g(x) that is not
  divisible by a given prime p. The gcd constraint ensures at least one
  coefficient in each polynomial is not divisible by p.

vc-preamble: |-
  predicate ValidInput(n: int, m: int, p: int, f: seq<int>, g: seq<int>) {
      n >= 1 && m >= 1 &&
      p >= 2 &&
      |f| == n && |g| == m &&
      (forall k :: 0 <= k < |f| ==> f[k] > 0) &&
      (forall k :: 0 <= k < |g| ==> g[k] > 0) &&
      (exists k :: 0 <= k < |f| && f[k] % p != 0) &&
      (exists k :: 0 <= k < |g| && g[k] % p != 0)
  }
  
  predicate ValidResult(result: int, n: int, m: int, p: int, f: seq<int>, g: seq<int>) 
      requires p != 0
  {
      exists i, j :: 0 <= i < |f| && 0 <= j < |g| &&
              (forall k :: 0 <= k < i ==> f[k] % p == 0) &&
              f[i] % p != 0 &&
              (forall k :: 0 <= k < j ==> g[k] % p == 0) &&
              g[j] % p != 0 &&
              result == i + j &&
              0 <= result < |f| + |g|
  }

vc-helpers: |-

vc-spec: |-
  method solve(n: int, m: int, p: int, f: seq<int>, g: seq<int>) returns (result: int)
      requires ValidInput(n, m, p, f, g)
      requires p != 0
      ensures ValidResult(result, n, m, p, f, g)

vc-code: |-
  {
      var i := 0;
      while i < |f| && f[i] % p == 0
          invariant 0 <= i <= |f|
          invariant forall k :: 0 <= k < i ==> f[k] % p == 0
          invariant exists k :: i <= k < |f| && f[k] % p != 0
      {
          i := i + 1;
      }
  
      var j := 0;
      while j < |g| && g[j] % p == 0
          invariant 0 <= j <= |g|
          invariant forall k :: 0 <= k < j ==> g[k] % p == 0
          invariant exists k :: j <= k < |g| && g[k] % p != 0
      {
          j := j + 1;
      }
  
      result := i + j;
  }

vc-postamble: |-

