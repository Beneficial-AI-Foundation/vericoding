vc-description: |-
  Given an array and a set of allowed swap positions, determine if the array can be sorted 
  in non-decreasing order using only adjacent swaps at the allowed positions. An allowed swap
  exchanges elements at positions i and i+1 if position i is in the allowed set.

vc-preamble: |-
  predicate ValidInput(a: array<int>, allowedPos: array<bool>)
      reads a, allowedPos
  {
      a.Length > 1 && allowedPos.Length == a.Length
  }
  
  predicate IsSorted(a: array<int>)
      reads a
  {
      forall i :: 0 <= i < a.Length - 1 ==> a[i] <= a[i + 1]
  }
  
  predicate CanReachConfiguration(original: seq<int>, target: seq<int>, allowed: seq<bool>)
  {
      |original| == |target| == |allowed| &&
      multiset(original) == multiset(target)
  }
  
  function SortSequence(s: seq<int>): seq<int>
  {
      if |s| <= 1 then s
      else
          var sorted := BubbleSortSeq(s);
          sorted
  }
  
  function BubbleSortSeq(s: seq<int>): seq<int>
  {
      if |s| <= 1 then s
      else BubbleSortHelper(s, |s|)
  }
  
  function BubbleSortHelper(s: seq<int>, passes: nat): seq<int>
      decreases passes
  {
      if passes == 0 then s
      else 
          var afterPass := BubblePass(s);
          BubbleSortHelper(afterPass, passes - 1)
  }
  
  function BubblePass(s: seq<int>): seq<int>
  {
      if |s| <= 1 then s
      else BubblePassHelper(s, 0)
  }
  
  function BubblePassHelper(s: seq<int>, pos: nat): seq<int>
      requires pos <= |s|
      decreases |s| - pos
  {
      if pos >= |s| - 1 then s
      else if s[pos] > s[pos + 1] then
          var swapped := s[pos := s[pos + 1]][pos + 1 := s[pos]];
          BubblePassHelper(swapped, pos + 1)
      else
          BubblePassHelper(s, pos + 1)
  }

vc-helpers: |-
  method BubbleSortWithConstraints(a: array<int>, allowedPos: array<bool>)
      requires ValidInput(a, allowedPos)
      modifies a
      ensures multiset(a[..]) == multiset(old(a[..]))
  {
      var i := 0;
      while i < a.Length
          invariant 0 <= i <= a.Length
          invariant multiset(a[..]) == multiset(old(a[..]))
      {
          var j := 0;
          while j < a.Length - 1
              invariant 0 <= j <= a.Length - 1
              invariant multiset(a[..]) == multiset(old(a[..]))
          {
              if a[j] > a[j + 1] && allowedPos[j] {
                  var temp := a[j];
                  a[j] := a[j + 1];
                  a[j + 1] := temp;
              }
              j := j + 1;
          }
          i := i + 1;
      }
  }

vc-spec: |-
  method CanSort(a: array<int>, allowedPos: array<bool>) returns (result: bool)
      requires ValidInput(a, allowedPos)
      modifies a
      ensures multiset(a[..]) == multiset(old(a[..]))
      ensures result == IsSorted(a)

vc-code: |-
  {
      BubbleSortWithConstraints(a, allowedPos);
      result := IsSorted(a);
  }

vc-postamble: |-
