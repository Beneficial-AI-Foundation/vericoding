vc-description: |-
  Given n friends to invite and notebooks with k sheets each (one color per notebook),
  find the minimum number of notebooks needed. Each invitation requires exactly 2 red 
  sheets, 5 green sheets, and 8 blue sheets.

vc-preamble: |-
  predicate ValidInput(n: int, k: int)
  {
    n >= 1 && k >= 1
  }
  
  function SheetsNeeded(n: int): (int, int, int)
  {
    (2 * n, 5 * n, 8 * n)
  }
  
  function TotalSheetsNeeded(n: int): int
  {
    2 * n + 5 * n + 8 * n
  }

vc-helpers: |-
  function CeilDiv(a: int, b: int): int
    requires b > 0
  {
    (a + b - 1) / b
  }

vc-spec: |-
  method solve(n: int, k: int) returns (result: int)
    requires ValidInput(n, k)
    ensures result == CeilDiv(2 * n, k) + CeilDiv(5 * n, k) + CeilDiv(8 * n, k)
    ensures result >= 0
    ensures result >= (TotalSheetsNeeded(n) + k - 1) / k

vc-code: |-
  {
    var red_notebooks := CeilDiv(2 * n, k);
    var green_notebooks := CeilDiv(5 * n, k);
    var blue_notebooks := CeilDiv(8 * n, k);
    result := red_notebooks + green_notebooks + blue_notebooks;
  }

vc-postamble: |-

