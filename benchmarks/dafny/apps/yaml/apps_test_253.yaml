vc-description: |-
  Given three positive integers k₁, k₂, k₃ (each ≤ 1500), determine if there exist 
  starting times x₁, x₂, x₃ such that every integer t ≥ max(x₁, x₂, x₃) can be written 
  as xᵢ + j·kᵢ for some i ∈ {1,2,3} and non-negative integer j. In other words, 
  determine if the union of three arithmetic progressions can cover all sufficiently 
  large positive integers.

vc-preamble: |-
  predicate ValidInput(nums: seq<int>)
  {
      |nums| == 3 &&
      forall i :: 0 <= i < |nums| ==> nums[i] > 0 &&
      forall i :: 0 <= i < |nums| ==> nums[i] <= 1500
  }
  
  function computeResult(x: int, y: int, z: int): string
      requires x > 0 && y > 0 && z > 0
      requires x <= 1500 && y <= 1500 && z <= 1500
  {
      var sorted := sortThree(x, y, z);
      var a := sorted.0;
      var b := sorted.1;
      var c := sorted.2;
  
      if a > 3 then "NO"
      else if a == 3 then
          if b > 3 then "NO"
          else if b == 3 then
              if c > 3 then "NO" else "YES"
          else "NO"
      else if a == 1 then "YES"
      else // a == 2
          if b == 2 then "YES"
          else if b > 4 then "NO"
          else if b == 4 then
              if c == 4 then "YES" else "NO"
          else "NO"
  }

vc-helpers: |-

vc-spec: |-
  method solve(nums: seq<int>) returns (result: string)
      requires ValidInput(nums)
      ensures result == "YES" || result == "NO"
      ensures result == computeResult(nums[0], nums[1], nums[2])

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

