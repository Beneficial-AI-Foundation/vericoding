vc-description: |-
  Given n games with costs and m bills with values, determine how many games can be bought
  by processing games in order. For each game, use the first available bill if it has
  sufficient value to buy the game, otherwise skip the game. Return total games bought.

vc-preamble: |-
  function countBuyableGames(games: seq<int>, bills: seq<int>): int
      requires forall i :: 0 <= i < |games| ==> games[i] >= 1
      requires forall i :: 0 <= i < |bills| ==> bills[i] >= 1
  {
      if |games| == 0 then 0
      else if |bills| == 0 then 0
      else if bills[0] >= games[0] then 1 + countBuyableGames(games[1..], bills[1..])
      else countBuyableGames(games[1..], bills)
  }
  
  predicate ValidInput(n: int, m: int, games: seq<int>, bills: seq<int>)
  {
      n >= 1 && m >= 1 &&
      |games| == n && |bills| == m &&
      (forall i :: 0 <= i < |games| ==> 1 <= games[i] <= 1000) &&
      (forall i :: 0 <= i < |bills| ==> 1 <= bills[i] <= 1000)
  }

vc-helpers: |-

vc-spec: |-
  method solve(n: int, m: int, games: seq<int>, bills: seq<int>) returns (result: int)
      requires ValidInput(n, m, games, bills)
      ensures 0 <= result <= n
      ensures result <= m
      ensures result == countBuyableGames(games, bills)

vc-code: |-
  {
      var ans := 0;
      var ai := 0;
  
      for i := 0 to |games|
          invariant 0 <= i <= |games|
          invariant 0 <= ans <= i
          invariant 0 <= ai <= |bills|
          invariant ans <= ai
          invariant countBuyableGames(games, bills) == ans + countBuyableGames(games[i..], bills[ai..])
      {
          var ci := games[i];
          if ai < |bills| && bills[ai] >= ci {
              ai := ai + 1;
              ans := ans + 1;
          }
      }
  
      return ans;
  }

vc-postamble: |-

