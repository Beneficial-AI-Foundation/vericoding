vc-description: |-
  Given a string of stones ('B' for black, 'W' for white), find the minimum number 
  of stones to place at either end to make all stones the same color. When placing 
  a stone, all stones of opposite color between the new stone and the nearest 
  existing stone of the same color are flipped.

vc-preamble: |-
  predicate ValidInput(s: string)
  {
      |s| > 0 && forall i :: 0 <= i < |s| ==> s[i] == 'B' || s[i] == 'W'
  }
  
  function CountSegments(s: string): int
      requires |s| > 0
      ensures CountSegments(s) >= 1
      ensures CountSegments(s) <= |s|
  {
      if |s| == 1 then 1
      else 
          CountSegments(s[..|s|-1]) + (if s[|s|-1] != s[|s|-2] then 1 else 0)
  }

vc-helpers: |-

vc-spec: |-
  method solve(s: string) returns (result: int)
      requires ValidInput(s)
      ensures result >= 0
      ensures result == CountSegments(s) - 1
      ensures result <= |s| - 1

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

