vc-description: |-
  Given a contest name in the format "AtCoder s Contest" where s is a string of length 1 to 100 characters 
  starting with an uppercase English letter followed by lowercase English letters, output the abbreviation "AxC" 
  where x is the first character of s.
  
  // Minimum: "AtCoder X Contest\n"
  
  // Input ends with newline
  
  // Middle word is non-empty
  
  // First char is uppercase
  
  // Rest are lowercase
  
  // "AxC\n" format
  
  // Second char is first char of middle word

vc-preamble: |-
  predicate ValidInput(input: string)
  {
      && |input| >= 18
      && input[|input| - 1] == '\n'
      && input[0..7] == "AtCoder"
      && input[7] == ' '
      && exists spacePos :: 8 <= spacePos < |input| - 8 && input[spacePos] == ' ' && 
         input[spacePos + 1..spacePos + 8] == "Contest" &&
         spacePos + 8 == |input| - 1
      && exists spacePos :: 8 <= spacePos < |input| - 8 && input[spacePos] == ' ' && 
         spacePos > 8 &&
         'A' <= input[8] <= 'Z' &&
         (forall k :: 9 <= k < spacePos ==> 'a' <= input[k] <= 'z')
  }
  
  predicate ValidOutput(input: string, result: string)
  {
      && |result| == 4
      && result[0] == 'A'
      && result[2] == 'C'
      && result[3] == '\n'
      && exists spacePos :: 8 <= spacePos < |input| - 8 && input[spacePos] == ' ' && 
         result[1] == input[8]
  }

vc-helpers: |-

vc-spec: |-
  method solve(input: string) returns (result: string)
      requires ValidInput(input)
      ensures ValidOutput(input, result)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

