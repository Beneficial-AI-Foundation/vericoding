vc-description: |-
  Given a non-empty string containing only characters 'v' and 'o' with length at most 10^6,
  calculate its "wow factor" - the number of subsequences that form the pattern "wow".
  Each 'w' must be represented by exactly two consecutive 'v' characters.
  A valid "wow" subsequence consists of: two consecutive 'v' characters (first 'w'),
  an 'o' character appearing later, and two consecutive 'v' characters after the 'o' (second 'w').

vc-preamble: |-
  function wowFactor(s: string): int
      requires |s| > 0
      requires forall i :: 0 <= i < |s| ==> s[i] == 'v' || s[i] == 'o'
      ensures wowFactor(s) >= 0
  {
      if |s| < 4 then 0
      else
          var n := |s|;
          wowFactorSum(s, 0)
  }
  
  function countVVPairsBefore(s: string, pos: int): int
      requires 0 <= pos <= |s|
      requires forall i :: 0 <= i < |s| ==> s[i] == 'v' || s[i] == 'o'
      ensures countVVPairsBefore(s, pos) >= 0
  {
      if pos <= 1 then 0
      else
          var prev := countVVPairsBefore(s, pos - 1);
          if s[pos-1] == 'v' && s[pos-2] == 'v' then prev + 1 else prev
  }
  
  function countVVPairsAfter(s: string, pos: int): int
      requires 0 <= pos <= |s|
      requires forall i :: 0 <= i < |s| ==> s[i] == 'v' || s[i] == 'o'
      ensures countVVPairsAfter(s, pos) >= 0
      decreases |s| - pos
  {
      if pos >= |s| - 1 then 0
      else
          var rest := countVVPairsAfter(s, pos + 1);
          if pos + 1 < |s| && s[pos] == 'v' && s[pos+1] == 'v' then rest + 1 else rest
  }
  
  function wowFactorSum(s: string, pos: int): int
      requires 0 <= pos <= |s|
      requires forall i :: 0 <= i < |s| ==> s[i] == 'v' || s[i] == 'o'
      ensures wowFactorSum(s, pos) >= 0
      decreases |s| - pos
  {
      if pos >= |s| then 0
      else
          var current := if s[pos] == 'o' then 
              countVVPairsBefore(s, pos) * countVVPairsAfter(s, pos + 1)
          else 0;
          current + wowFactorSum(s, pos + 1)
  }

vc-helpers: |-
  

vc-spec: |-
  method solve(s: string) returns (result: int)
      requires |s| > 0
      requires forall i :: 0 <= i < |s| ==> s[i] == 'v' || s[i] == 'o'
      ensures result >= 0
      ensures result == wowFactor(s)

vc-code: |-
  {
      var n := |s|;
      if n < 4 {
          return 0;
      }
  
      var p := new int[n+1];
      p[0] := 0;
      p[1] := 0;
  
      var x := 1;
      while x < n
          invariant 1 <= x <= n
          invariant p.Length == n + 1
          invariant forall i :: 0 <= i <= x ==> p[i] >= 0
          invariant forall i :: 0 <= i <= x ==> p[i] == countVVPairsBefore(s, i)
      {
          var y := 0;
          if s[x] == 'v' && s[x-1] == 'v' {
              y := 1;
          }
          p[x+1] := p[x] + y;
          x := x + 1;
      }
  
      var q := countVVPairsAfter(s, n - 2);
      var sol := wowFactorSum(s, n - 2);
      x := n - 3;
  
      while x >= 0
          invariant -1 <= x <= n - 3
          invariant q >= 0
          invariant sol >= 0
          invariant q == countVVPairsAfter(s, x + 1)
          invariant sol == wowFactorSum(s, x + 1)
      {
          if x + 1 < n && s[x] == 'v' && s[x+1] == 'v' {
              q := q + 1;
          }
          if s[x] == 'o' {
              sol := sol + q * p[x];
          }
          x := x - 1;
      }
  
      return sol;
  }

vc-postamble: |-
