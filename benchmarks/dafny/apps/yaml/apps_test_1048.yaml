vc-description: |-
  Given a sequence of movement commands for a robot on an infinite grid, find the maximum number of commands 
  that could be executed such that the robot returns to its starting position (0, 0). The robot can move 
  U (up), D (down), L (left), or R (right). To return to origin, we need equal numbers of L/R movements 
  and equal numbers of U/D movements.

vc-preamble: |-
  function count_char(s: string, c: char): int
  {
      if |s| == 0 then 0
      else (if s[0] == c then 1 else 0) + count_char(s[1..], c)
  }
  
  function min(a: int, b: int): int
  {
      if a <= b then a else b
  }
  
  predicate ValidCommands(commands: string)
  {
      forall i :: 0 <= i < |commands| ==> commands[i] in {'L', 'R', 'U', 'D'}
  }

vc-helpers: |-

vc-spec: |-
  method solve(n: int, commands: string) returns (result: int)
      requires n >= 0
      requires |commands| == n
      requires ValidCommands(commands)
      ensures result >= 0
      ensures result <= n
      ensures result % 2 == 0
      ensures result == 2 * min(count_char(commands, 'L'), count_char(commands, 'R')) + 
                       2 * min(count_char(commands, 'U'), count_char(commands, 'D'))

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

