vc-description: |-
  Given a sequence A of N integers and a positive integer p, split A into exactly 2 contiguous,
  non-overlapping parts (each containing at least 1 element) to maximize the sum of their scores.
  The score of a part is the sum of its elements modulo p. Find the maximum possible sum of scores.

vc-preamble: |-
  predicate ValidInput(N: int, p: int, A: seq<int>)
  {
      N >= 2 && p >= 2 && |A| == N && forall i :: 0 <= i < N ==> A[i] >= 1
  }
  
  function MaxSplitScore(A: seq<int>, p: int): int
      requires |A| >= 2
      requires p >= 2
  {
      var scores := seq(|A| - 1, i requires 0 <= i < |A| - 1 => SplitScore(A, i + 1, p));
      MaxSeq(scores)
  }

vc-helpers: |-

vc-spec: |-
  method solve(N: int, p: int, A: seq<int>) returns (result: int)
      requires ValidInput(N, p, A)
      ensures result >= 0
      ensures result < 2 * p
      ensures result == MaxSplitScore(A, p)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

