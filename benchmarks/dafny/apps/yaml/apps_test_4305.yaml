vc-description: |-
  Given a monster with health H and attack damage A, find the minimum number of attacks needed to reduce the monster's health to 0 or below.

vc-preamble: |-
  predicate ValidInput(H: int, A: int)
  {
      H >= 1 && A >= 1
  }
  
  predicate IsMinimumAttacks(attacks: int, H: int, A: int)
  {
      attacks >= 1 &&
      attacks * A >= H &&
      (attacks - 1) * A < H
  }
  
  function CeilDiv(H: int, A: int): int
      requires A > 0
  {
      (H + A - 1) / A
  }

vc-helpers: |-

vc-spec: |-
  method solve(H: int, A: int) returns (attacks: int)
      requires ValidInput(H, A)
      ensures IsMinimumAttacks(attacks, H, A)
      ensures attacks == CeilDiv(H, A)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

