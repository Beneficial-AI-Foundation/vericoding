vc-description: |-
  Given a list of distinct integers, generate all possible permutations of the elements.
  Each permutation should be a list containing all elements from the input in a different order.

vc-preamble: |-
  function factorial(n: nat): nat
  {
      if n == 0 then 1 else n * factorial(n - 1)
  }
  
  predicate IsPermutation(perm: seq<int>, original: seq<int>)
  {
      |perm| == |original| && multiset(perm) == multiset(original)
  }
  
  predicate AllDistinct<T(==)>(s: seq<T>)
  {
      forall i, j :: 0 <= i < j < |s| ==> s[i] != s[j]
  }

vc-helpers: |-

vc-spec: |-
  method permute(nums: seq<int>) returns (result: seq<seq<int>>)
      requires AllDistinct(nums)
      ensures |result| == factorial(|nums|)
      ensures forall p :: p in result ==> IsPermutation(p, nums)
      ensures AllDistinct(result)
      ensures forall perm :: IsPermutation(perm, nums) ==> perm in result

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

