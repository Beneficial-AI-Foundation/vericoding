vc-description: |-
  function_signature: def f(n: int) -> List[int]
  Implement the function f that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise. i starts from 1. the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).

vc-preamble: |-
  function factorial_spec(n : int) : int
    requires n >= 0
    decreases n
  {
    if n == 0 then 1 else n * factorial_spec(n - 1)
  }
  function sum_spec(n : int) : int
    requires n >= 0
    decreases n
  {
    if n == 0 then 1 else n + sum_spec(n - 1)
  }

vc-helpers: |-

vc-spec: |-
  method f(n : int) returns (result : seq<int>)
    // pre-conditions-start
    requires n >= 1
    // pre-conditions-end
    // post-conditions-start
    ensures |result| == n
    ensures forall i : int :: i >= 0 && i < |result| && i % 2 == 0 ==> result[i] == factorial_spec(i)
    ensures forall i : int :: i >= 0 && i < |result| && i % 2 != 0 ==> result[i] == sum_spec(i)
    // post-conditions-end

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

