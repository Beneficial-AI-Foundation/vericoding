vc-description: |-
  function_signature: method reverse(s: string) returns (rev: string)
  Reverse order. Ensures: returns the correct size/count; the condition holds for all values.
  
  // post-conditions-start 
  
  // post-conditions-end
  
  // pre-conditions-start
  
  // pre-conditions-end
  
  // pure-end
  
  // pure-end

vc-preamble: |-
  method solve(s: string) returns (t: string)
  
    ensures |s| == |t|
    ensures (forall i :: 0 <= i < |s| ==> !is_alpha(s[i])) ==> (forall i :: 0 <= i < |s| ==> s[i] == t[|t| - 1 - i])
    ensures (exists i :: 0 <= i < |s| && is_alpha(s[i])) ==> 
      (forall i :: 0 <= i < |t| ==> if is_alpha(s[i]) then t[i] == flip_case(s[i]) else t[i] == s[i])
  
  {
    assume{:axiom} false;
  }

vc-helpers: |-

vc-spec: |-
  method reverse(s: string) returns (rev: string)
  
    ensures |rev| == |s|
    ensures forall k :: 0 <= k < |s| ==> rev[k] == s[|s| - 1 - k]

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-
  function is_alpha(c: char) : bool {
    'a' <= c <= 'z' || 'A' <= c <= 'Z'
  }
  function flip_case(c: char): (flipped: char)
    requires is_alpha(c)
    ensures is_alpha(flipped)
  {
    if 'a' <= c <= 'z' then c - 'a' + 'A' else c - 'A' + 'a'
  }

