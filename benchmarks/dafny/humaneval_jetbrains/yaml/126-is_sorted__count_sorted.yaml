vc-description: |-
  function_signature: method count_sorted(a: seq<int>, x: int, pos: int) returns (count: int)
  Count occurrences. Requires: the condition holds for all values; the size is bounded; returns the correct value; returns the correct size/count. Ensures: returns the correct value.
  
  // post-conditions-start
  
  // post-conditions-end
  
  // pre-conditions-start
  
  // pre-conditions-end
  
  // post-conditions-start
  
  // post-conditions-end
  
  // pure-end

vc-preamble: |-
  method is_sorted(a: seq<int>) returns (f: bool)
  
    ensures f == forall i, j :: 0 <= i <= j < |a| ==> a[i] <= a[j] && forall i :: 0 <= i < |a| ==> count_set(a, a[i]) <= 2
  
  {
    assume{:axiom} false;
  }

vc-helpers: |-

vc-spec: |-
  method count_sorted(a: seq<int>, x: int, pos: int) returns (count: int)
  
    requires forall i, j :: 0 <= i <= j < |a| ==> a[i] <= a[j]
    requires 0 <= pos < |a|
    requires a[pos] == x
    requires pos == 0 || a[pos - 1] < x
  
    ensures count == count_set(a, x)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-
  function count_set(a: seq<int>, x: int): int {
    |set i | 0 <= i < |a| && a[i] == x|
  }

