vc-description: |-
  function_signature: def intersperse(numbers: List[int], delimeter: int) -> List[int]
  Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
  
  // post-conditions-start
  
  // post-conditions-end

vc-preamble: |-

vc-helpers: |-

vc-spec: |-
  method intersperse(numbers: seq<int>, delimeter: int) returns (res: seq<int>)
  
    ensures |numbers| != 0 ==> |numbers| * 2 - 1 == |res|
    ensures |numbers| == 0 ==> |res| == 0
    ensures forall i : int :: i >= 0 && i < |res| && i % 2 == 0 ==> res[i] == numbers[i / 2]
    ensures forall i : int :: i >= 0 && i < |res| && i % 2 == 1 ==> res[i] == delimeter

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

