vc-description: |-
  function_signature: method maximum(s: seq<int>, k: int) returns (result: seq<int>)
  Process input. Requires: the size is bounded; the size is bounded; the condition holds for all values. Ensures: returns the correct size/count; the condition holds for all values; the condition holds for all values.

vc-preamble: |-

vc-helpers: |-

vc-spec: |-
  method maximum(s: seq<int>, k: int) returns (result: seq<int>)
    // pre-conditions-start
    requires 1 <= k <= |s|
    requires 1 <= |s| <= 1000
    requires forall x :: x in s ==> -1000 <= x <= 1000
    // pre-conditions-end
    // post-conditions-start
    ensures |result| == k
    ensures forall i, j :: 0 <= i < j < k ==> result[i] <= result[j]
    ensures forall x :: x in result ==> x in s
    // post-conditions-end

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-
  method SortSeq(s: seq<int>) returns (sorted: seq<int>)
    ensures forall i, j :: 0 <= i < j < |sorted| ==> sorted[i] <= sorted[j]
    ensures |sorted| == |s|
    ensures multiset(s) == multiset(sorted)
    ensures forall i :: 0 <= i < |s| ==> exists j :: 0 <= j < |sorted| && s[i] == sorted[j]
    ensures forall x :: x in s ==> x in sorted
    ensures forall i :: 0 <= i < |s| ==> exists j :: 0 <= j < |sorted| && sorted[i] == s[j]
    ensures forall x :: x in sorted ==> x in s
  {
    assume{:axiom} false;
  }

