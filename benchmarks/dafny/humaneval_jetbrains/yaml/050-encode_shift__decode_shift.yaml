vc-description: |-
  function_signature: method decode_shift(s: string) returns (t: string)
  Decode data. Requires: the condition holds for all values. Ensures: returns the correct size/count; the condition holds for all values.
  
  // pre-conditions-start
  
  // pre-conditions-end
  
  // post-conditions-start
  
  // post-conditions-end
  
  // impl-start
  
  // impl-end
  
  // pre-conditions-start
  
  // pre-conditions-end
  
  // post-conditions-start
  
  // post-conditions-end
  
  // impl-start
  
  // impl-end
  
  // pre-conditions-start
  
  // pre-conditions-end
  
  // post-conditions-start
  
  // post-conditions-end
  
  // pre-conditions-start
  
  // pre-conditions-end
  
  // post-conditions-start
  
  // post-conditions-end

vc-preamble: |-
  function encode_char(c: char): char
  
    requires 'a' <= c <= 'z'
  
    ensures 'a' <= encode_char(c) <= 'z'
  
  {
  
    ((c as int - 'a' as int + 5) % 26 + 'a' as int) as char
  
  }
  function decode_char(c: char): char
  
    requires 'a' <= c <= 'z'
  
    ensures 'a' <= decode_char(c) <= 'z'
    ensures encode_char(decode_char(c)) == c
  
  {
  
    ((c as int - 'a' as int - 5) % 26 + 'a' as int) as char
  
  }
  method encode_shift(s: string) returns (t: string)
  
    requires forall i :: 0 <= i < |s| ==> 'a' <= s[i] <= 'z'
  
    ensures |s| == |t|
    ensures forall i :: 0 <= i < |s| ==> t[i] == encode_char(s[i])
  
  {
    assume{:axiom} false;
  }

vc-helpers: |-

vc-spec: |-
  method decode_shift(s: string) returns (t: string)
  
    requires forall i :: 0 <= i < |s| ==> 'a' <= s[i] <= 'z'
  
    ensures |s| == |t|
    ensures forall i :: 0 <= i < |s| ==> t[i] == decode_char(s[i])

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

