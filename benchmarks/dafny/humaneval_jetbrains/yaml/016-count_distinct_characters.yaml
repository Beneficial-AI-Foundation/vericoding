vc-preamble: |-
  function contains_char(s: string, c: char): bool
    decreases |s|
    requires forall i :: 0 <= i < |s| ==> 'a' <= s[i] <= 'z' || 'A' <= s[i] <= 'Z'
    requires 'a' <= c <= 'z'
  {
    if |s| == 0 then false else s[0] == c || s[0] == upper_char(c) || contains_char(s[1..], c)
  }
  function upper_char(c: char) : (C: char)
    requires 'a' <= c <= 'z'
    ensures 'A' <= C <= 'Z'
  { c - 'a' + 'A' }

vc-helpers: |-
vc-description: |-

  /*
  function_signature: def count_distinct_characters(string: str) -> int
  Given a string, find out how many distinct characters (regardless of case) does it consist of
  */

vc-spec: |-
  method count_distinct_characters(s: string) returns (count: int)
    // pre-conditions-start
    requires forall i :: 0 <= i < |s| ==> 'a' <= s[i] <= 'z' || 'A' <= s[i] <= 'Z'
    // pre-conditions-end
    // post-conditions-start
    ensures count == |set c | 'a' <= c <= 'z' && contains_char(s, c)|
    // post-conditions-end

vc-code: |-
  {
    assume false;
  }

vc-postamble: |-


