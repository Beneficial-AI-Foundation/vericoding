vc-description: |-
  function_signature: def special_factorial(n: int) -> int
  The Brazilian factorial is defined as: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0. Please write a function that computes the Brazilian factorial.

vc-preamble: |-
  function factorial(n: nat): nat
    decreases n
  {
    if n == 0 then 1 else n * factorial(n - 1)
  }
  function special_factorial_rec(n: nat): nat
    decreases n
  {
    if n == 0 then 1 else factorial(n) * special_factorial_rec(n - 1)
  }

vc-helpers: |-

vc-spec: |-
  method special_factorial(n: nat) returns (result: nat)
    // pre-conditions-start
    requires n > 0
    // pre-conditions-end
    // post-conditions-start
    ensures result == special_factorial_rec(n)
    // post-conditions-end

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

