vc-description: |-
  function_signature: def check_dict_case(s : dict[str, str]) -> bool
  Given a dictionary, return True if all keys are strings in lower case or all keys are strings in upper case, else return False. The function should return False is the given dictionary is empty. Note(George): Modified the problem to use strings only for both keys and values.

vc-preamble: |-
  function IsLowerCase(s: string) : bool
  {
    forall i :: 0 <= i < |s| ==> 'a' <= s[i] <= 'z'
  }
  function IsUpperCase(s: string) : bool
  {
    forall i :: 0 <= i < |s| ==> 'A' <= s[i] <= 'Z'
  }
  type DictCase = map<string, string>

vc-helpers: |-

vc-spec: |-
  method CheckDictCase(dict: DictCase) returns (result: bool)
    // post-conditions-start
    ensures dict == map[] ==> !result
    ensures result ==> (forall k :: k in dict ==> IsLowerCase(k)) || (forall k :: k in dict ==> IsUpperCase(k))
    ensures !result ==> dict == map[] || ((exists k :: k in dict && !IsLowerCase(k)) && (exists k :: k in dict && !IsUpperCase(k)))
    // post-conditions-end

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

