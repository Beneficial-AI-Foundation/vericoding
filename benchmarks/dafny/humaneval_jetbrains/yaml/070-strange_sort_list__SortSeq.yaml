vc-description: |-
  function_signature: method SortSeq(s: seq<int>) returns (sorted: seq<int>)
  Sort elements. Ensures: the result is sorted according to the ordering relation; returns the correct size/count; returns a sorted permutation of the input.
  
  // post-conditions-start
  
  // post-conditions-end
  
  // post-conditions-start
  
  // post-conditions-end
  
  // post-conditions-start
  
  // post-conditions-end

vc-preamble: |-
  method strange_sort_list_helper(s: seq<int>) returns (sorted: seq<int>, strange: seq<int>)
  
      ensures multiset(s) == multiset(sorted)
      ensures |s| == |sorted| == |strange|
      ensures forall i :: 0 <= i < |s| && i % 2 == 0 ==> strange[i] == sorted[i / 2]
      ensures forall i :: 0 <= i < |s| && i % 2 == 1 ==> strange[i] == sorted[|s| - (i - 1) / 2 - 1]
  
  {
    assume{:axiom} false;
  }
  method strange_sort_list(s: seq<int>) returns (strange: seq<int>)
  
      ensures |s| == |strange|
  
  {
    assume{:axiom} false;
  }

vc-helpers: |-

vc-spec: |-
  method SortSeq(s: seq<int>) returns (sorted: seq<int>)
  
    ensures forall i, j :: 0 <= i < j < |sorted| ==> sorted[i] <= sorted[j]
    ensures |sorted| == |s|
    ensures multiset(s) == multiset(sorted)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

