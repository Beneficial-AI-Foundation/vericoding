vc-description: |-
  function_signature: method largest_prime_factor(n: int) returns (largest: int)
  Process input. Requires: the result is at least the specified value. Ensures: returns the correct size/count.
  
  // pre-conditions-start
  
  // pre-conditions-end
  
  // post-conditions-start
  
  // post-conditions-end
  
  // pre-conditions-start
  
  // pre-conditions-end
  
  // post-conditions-start
  
  // post-conditions-end

vc-preamble: |-
  method is_prime(k: int) returns (result: bool)
  
    requires k >= 2
  
    ensures result ==> forall i :: 2 <= i < k ==> k % i != 0
    ensures !result ==> exists j :: 2 <= j < k && k % j == 0
  
  {
    assume{:axiom} false;
  }
  function is_prime_pred(k: int) : bool
  {
    forall i :: 2 <= i < k ==> k % i != 0
  }

vc-helpers: |-

vc-spec: |-
  method largest_prime_factor(n: int) returns (largest: int)
  
    requires n >= 2
  
    ensures 1 <= largest <= n && (largest == 1 || (largest > 1 && is_prime_pred(largest)))

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

