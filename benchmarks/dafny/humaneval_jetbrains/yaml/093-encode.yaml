vc-description: |-
  function_signature: def encode(s : str) -> str
  Write a function that takes a message, and encodes in such a way that it swaps case of all letters, replaces all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet. Assume only letters.

vc-preamble: |-

vc-helpers: |-

vc-spec: |-
  method encode(s: string) returns (t: string)
  
    requires forall i :: 0 <= i < |s| ==> 'a' <= s[i] <= 'z' || 'A' <= s[i] <= 'Z'
  
    ensures |s| == |t|
    ensures forall i :: 0 <= i < |s| && is_vowel(s[i]) ==> t[i] == rot2(swap_case(s[i]))
    ensures forall i :: 0 <= i < |s| && !is_vowel(s[i]) ==> t[i] == swap_case(s[i])

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-
  function swap_case(c: char): char
  
    requires 'a' <= c <= 'z' || 'A' <= c <= 'Z'
  
    ensures 'a' <= c <= 'z' ==> 'A' <= swap_case(c) <= 'Z'
    ensures 'A' <= c <= 'Z' ==> 'a' <= swap_case(c) <= 'z'
    ensures is_vowel(swap_case(c)) == is_vowel(c)
  
  {
  
    if 'a' <= c <= 'z' then
      'A' + (c - 'a')
    else
      'a' + (c - 'A')
  
  }
  function rot2(c: char): char
    requires is_vowel(c)
  {
      (c as int + 2) as char
  }
  function is_vowel(c: char) : bool {
      (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')
      || (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')
  }

