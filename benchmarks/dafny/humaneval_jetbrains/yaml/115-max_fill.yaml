vc-description: |-
  function_signature: def max_fill_count(grid : list[list[int]], capacity : int) -> int
  You are given a rectangular grid of wells. Each row represents a single well, and each 1 in a row represents a single unit of water. Each well has a corresponding bucket that can be used to extract water from it, and all buckets have the same capacity. Your task is to use the buckets to empty the wells. Output the number of times you need to lower the buckets. Constraints: * all wells have the same length * 1 <= grid.length <= 10^2 * 1 <= grid[:,1].length <= 10^2 * grid[i][j] -> 0 | 1 * 1 <= capacity <= 10

vc-preamble: |-

vc-helpers: |-

vc-spec: |-
  method max_fill(grid: seq<seq<nat>>, capacity: nat) returns (cnt: nat)
  
    requires capacity > 0
    requires forall i, j :: 0 <= i < |grid| && 0 <= j < |grid[i]| ==> grid[i][j] == 0 || grid[i][j] == 1
  
    ensures cnt == sum(gen_seq(grid, capacity, |grid|))

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-
  function gen_seq(grid: seq<seq<nat>>, capacity: nat, len: nat): seq<int>
    requires capacity > 0
    requires len <= |grid|
    requires forall i, j :: 0 <= i < |grid| && 0 <= j < |grid[i]| ==> grid[i][j] == 0 || grid[i][j] == 1
  {
    seq(len, j requires 0 <= j < len => (sum(grid[j]) + capacity - 1) / capacity)
  }
  function sum(s: seq<int>) : int {
      if |s| == 0 then 0 else s[0] + sum(s[1..])
  }

