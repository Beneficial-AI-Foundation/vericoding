vc-description: |-
  function_signature: method circular_shift(a: nat, shift: nat) returns (shifted: string)
  Process input. Ensures: returns the correct size/count; the condition holds for all values; returns the correct size/count.
  
  // post-conditions-start
  
  // post-conditions-end
  
  // post-conditions-start
  
  // post-conditions-end

vc-preamble: |-
  type stringNat = s: string |
    |s| > 0 && (|s| > 1 ==> s[0] != '0') &&
    forall i | 0 <= i < |s| :: s[i] in "0123456789"
    witness "1"
  function natToString(n: nat): stringNat {
    match n
      case 0 => "0" case 1 => "1" case 2 => "2" case 3 => "3" case 4 => "4"
      case 5 => "5" case 6 => "6" case 7 => "7" case 8 => "8" case 9 => "9"
      case _ => natToString(n / 10) + natToString(n % 10)
  }

vc-helpers: |-

vc-spec: |-
  method circular_shift(a: nat, shift: nat) returns (shifted: string)
  
    ensures |shifted| == |natToString(a)|
    ensures var s := natToString(a); shift > |s| ==> forall i :: 0 <= i < |s| ==> shifted[i] == s[|s| - 1 - i]
    ensures var s := natToString(a); shift <= |s| ==> shifted == s[|s| - shift..] + s[..|s| - shift]

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-
  method reverse(str: string) returns (rev: string)
  
      ensures |rev| == |str|
      ensures forall k :: 0 <= k < |str| ==> rev[k] == str[|str| - 1 - k]
  
  {
    assume{:axiom} false;
  }

