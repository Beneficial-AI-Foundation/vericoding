vc-preamble: |-
  datatype Option<T> = None | Some(T)
  function getVal(mx : Option<int>) : int
      requires exists i : int :: mx == Some(i)
  {
      match mx {
          case Some(n) => n
      }
  }

vc-helpers: |-
  lemma MaxInPrefix(numbers: seq<int>, i: int, max_val: int)
      requires 0 <= i < |numbers|
      requires forall j :: 0 <= j <= i ==> numbers[j] <= max_val
      requires max_val in numbers[0..i+1]
      ensures max_val >= numbers[i]
  {
  }
  
  lemma MaxPreserved(numbers: seq<int>, i: int, prev_max: int, curr_max: int)
      requires 0 <= i < |numbers|
      requires prev_max >= numbers[i]
      requires curr_max == if numbers[i] > prev_max then numbers[i] else prev_max
      ensures curr_max >= prev_max
      ensures curr_max >= numbers[i]
  {
  }

vc-description: |-
  function_signature: def rolling_max(numbers: List[int]) -> Tuple[int, int]
  From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.

vc-spec: |-
  method rolling_max(numbers: seq<int>) returns (result : seq<int>)
      // post-conditions-start
      ensures |numbers| == |result|
      ensures forall i : int :: i >= 0 && i < |numbers| ==> numbers[i] <= result[i]
      ensures forall i : int :: i >= 0 && i + 1 < |numbers| ==> result[i] <= result[i + 1]
      // post-conditions-end

vc-code: |-
  {
      result := [];
      if |numbers| == 0 {
          return;
      }
      
      var current_max := numbers[0];
      result := [current_max];
      
      var i := 1;
      while i < |numbers|
          invariant 0 <= i <= |numbers|
          invariant |result| == i
          invariant forall j :: 0 <= j < i ==> numbers[j] <= result[j]
          invariant forall j :: 0 <= j < i - 1 ==> result[j] <= result[j + 1]
          invariant i > 0 ==> current_max == result[i-1]
          invariant i > 0 ==> forall j :: 0 <= j < i ==> numbers[j] <= current_max
      {
          if numbers[i] > current_max {
              current_max := numbers[i];
          }
          result := result + [current_max];
          i := i + 1;
      }
  }

vc-postamble: |-


