vc-preamble: |-
  function count_rec(a: seq<int>, x: int): int {
    if |a| == 0 then 0
    else count_rec(a[1..], x) + (if a[0] == x then 1 else 0)
  }

vc-helpers: |-
  lemma count_rec_properties(a: seq<int>, x: int)
    ensures count_rec(a, x) >= 0
    ensures count_rec(a, x) == |set i | 0 <= i < |a| && a[i] == x|
  {
    if |a| == 0 {
      assert count_rec(a, x) == 0;
      assert |set i | 0 <= i < |a| && a[i] == x| == 0;
    } else {
      count_rec_properties(a[1..], x);
      var tail_set := set i | 0 <= i < |a[1..]| && a[1..][i] == x;
      var full_set := set i | 0 <= i < |a| && a[i] == x;
      var tail_count := |tail_set|;
      var full_count := |full_set|;
      
      if a[0] == x {
        var shifted_set := set i | 1 <= i < |a| && a[i] == x;
        assert full_set == {0} + shifted_set;
        assert 0 !in shifted_set;
        assert full_count == 1 + |shifted_set|;
        set_correspondence_lemma(a, x);
        assert shifted_set == set i | 0 <= i < |a[1..]| && a[1..][i] == x;
        assert full_count == tail_count + 1;
      } else {
        var shifted_set := set i | 1 <= i < |a| && a[i] == x;
        assert full_set == shifted_set;
        set_correspondence_lemma(a, x);
        assert shifted_set == set i | 0 <= i < |a[1..]| && a[1..][i] == x;
        assert full_count == tail_count;
      }
    }
  }
  
  lemma set_correspondence_lemma(a: seq<int>, x: int)
    requires |a| > 0
    ensures (set i | 1 <= i < |a| && a[i] == x) == (set i | 0 <= i < |a[1..]| && a[1..][i] == x)
  {
    var shifted_set := set i | 1 <= i < |a| && a[i] == x;
    var tail_set := set i | 0 <= i < |a[1..]| && a[1..][i] == x;
    
    forall i | i in shifted_set
      ensures i-1 in tail_set
    {
      assert 1 <= i < |a| && a[i] == x;
      assert 0 <= i-1 < |a[1..]|;
      assert a[1..][i-1] == a[i];
      assert a[1..][i-1] == x;
    }
    
    forall j | j in tail_set
      ensures j+1 in shifted_set
    {
      assert 0 <= j < |a[1..]| && a[1..][j] == x;
      assert 1 <= j+1 < |a|;
      assert a[j+1] == a[1..][j];
      assert a[j+1] == x;
    }
    
    assert forall i :: i in shifted_set <==> i-1 in tail_set;
    assert forall j :: j in tail_set <==> j+1 in shifted_set;
  }
  
  lemma count_rec_membership(a: seq<int>, x: int)
    ensures count_rec(a, x) > 0 <==> x in a
  {
    count_rec_properties(a, x);
    if count_rec(a, x) > 0 {
      var witness_set := set i | 0 <= i < |a| && a[i] == x;
      assert |witness_set| > 0;
      var w :| w in witness_set;
      assert 0 <= w < |a| && a[w] == x;
      assert x in a;
    }
    if x in a {
      var w :| 0 <= w < |a| && a[w] == x;
      var witness_set := set i | 0 <= i < |a| && a[i] == x;
      assert w in witness_set;
      assert |witness_set| >= 1;
      assert count_rec(a, x) >= 1;
    }
  }
  
  lemma count_rec_unique_implies_one(a: seq<int>, x: int)
    requires x in a
    requires count_rec(a, x) == 1
    ensures |set i | 0 <= i < |a| && a[i] == x| == 1
  {
    count_rec_properties(a, x);
  }

vc-description: |-
  function_signature: method remove_duplicates(a: seq<int>) returns (result: seq<int>)
  Process input. Requires: the condition holds for all values. Ensures: the condition holds for all values; the condition holds for all values.

vc-spec: |-
  method remove_duplicates(a: seq<int>) returns (result: seq<int>)
    // pre-conditions-start
    requires forall i :: 0 <= i < |a| ==> count_rec(a, a[i]) >= 1
    // pre-conditions-end
    // post-conditions-start
    ensures forall i :: 0 <= i < |result| ==> count_rec(a, result[i]) == 1
    ensures forall i :: 0 <= i < |a| ==> (a[i] in result <==> count_rec(a, a[i]) == 1)
    // post-conditions-end

vc-code: |-
  {
    result := [];
    var i := 0;
    
    while i < |a|
      invariant 0 <= i <= |a|
      invariant forall j :: 0 <= j < |result| ==> count_rec(a, result[j]) == 1
      invariant forall j :: 0 <= j < i ==> (a[j] in result <==> count_rec(a, a[j]) == 1)
      invariant forall x :: x in result ==> x in a[0..i]
    {
      count_rec_properties(a, a[i]);
      count_rec_membership(a, a[i]);
      
      if count_rec(a, a[i]) == 1 {
        if a[i] !in result {
          result := result + [a[i]];
        }
      }
      i := i + 1;
    }
  }

vc-postamble: |-
  method count(a: seq<int>, x: int) returns (cnt: int)
    // post-conditions-start
    ensures cnt == |set i | 0 <= i < |a| && a[i] == x|
    ensures cnt == count_rec(a, x)
    // post-conditions-end
  {
    assume{:axiom} false;
  }

