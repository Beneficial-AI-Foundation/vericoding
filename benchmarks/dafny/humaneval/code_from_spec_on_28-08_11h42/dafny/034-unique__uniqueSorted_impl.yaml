vc-preamble: |-


vc-helpers: |-
  lemma UniquePreservesElements(s: seq<int>, result: seq<int>)
      requires forall x :: x in result ==> x in s
      requires forall x :: x in s ==> x in result
      ensures multiset(s[..]) == multiset(result[..]) + multiset(GetDuplicates(s))
  {
      if |s| == 0 {
          assert result == [];
          assert GetDuplicates(s) == [];
          assert multiset(s[..]) == multiset{};
          assert multiset(result[..]) == multiset{};
          assert multiset(GetDuplicates(s)) == multiset{};
      } else {
          var duplicates := GetDuplicates(s);
          assert forall x :: x in multiset(s[..]) ==> x in multiset(result[..]) || x in multiset(duplicates);
          assert forall x :: x in multiset(result[..]) ==> x in multiset(s[..]);
          assert forall x :: x in multiset(duplicates) ==> x in multiset(s[..]);
      }
  }
  
  function GetDuplicates(s: seq<int>): seq<int>
  {
      if |s| == 0 then []
      else if s[0] in s[1..] then [s[0]] + GetDuplicates(s[1..])
      else GetDuplicates(s[1..])
  }

vc-description: |-
  function_signature: method uniqueSorted(s: seq<int>) returns (result: seq<int>)
  Sort elements. Requires: the condition holds for all values. Ensures: the condition holds for all values; the condition holds for all values; the condition holds for all values.

vc-spec: |-
  method uniqueSorted(s: seq<int>) returns (result: seq<int>)
      // pre-conditions-start
      requires forall i, j :: 0 <= i < j < |s| ==> s[i] <= s[j]
      // pre-conditions-end
      // post-conditions-start
      ensures forall i, j :: 0 <= i < j < |result| ==> result[i] < result[j]
      ensures forall x :: x in result ==> x in s
      ensures forall x :: x in s ==> x in result
      // post-conditions-end

vc-code: |-
  {
      if |s| == 0 {
          return [];
      }
      
      result := [s[0]];
      var i := 1;
      
      while i < |s|
          invariant 1 <= i <= |s|
          invariant |result| >= 1
          invariant forall k :: 0 <= k < |result| ==> result[k] in s
          invariant forall x :: x in s[..i] ==> x in result
          invariant forall j, k :: 0 <= j < k < |result| ==> result[j] < result[k]
          invariant forall k :: 0 <= k < |result| ==> result[k] <= s[i-1]
          invariant result[|result|-1] == s[i-1]
          invariant forall k :: 0 <= k < |result| - 1 ==> result[k] < s[i-1]
      {
          if s[i] != result[|result| - 1] {
              assert s[i] > result[|result| - 1];
              result := result + [s[i]];
          }
          i := i + 1;
      }
  }

vc-postamble: |-
  method unique(s: seq<int>) returns (result: seq<int>)
      // post-conditions-start
      ensures forall i, j :: 0 <= i < j < |result| ==> result[i] < result[j]
      ensures forall x :: x in result ==> x in s
      ensures forall x :: x in s ==> x in result
      // post-conditions-end
  {
    assume{:axiom} false;
  }
  method SortSeq(s: seq<int>) returns (sorted: seq<int>)
    // post-conditions-start
    ensures forall i, j :: 0 <= i < j < |sorted| ==> sorted[i] <= sorted[j]
    ensures |sorted| == |s|
    ensures multiset(s) == multiset(sorted)
    // post-conditions-end
  {
    assume{:axiom} false;
  }

