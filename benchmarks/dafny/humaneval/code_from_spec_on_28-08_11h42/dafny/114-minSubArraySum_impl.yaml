vc-preamble: |-
  function Sum(a: seq<int>, s: int, t: int): int
    requires 0 <= s <= t <= |a|
  {
    if s == t then 0 else Sum(a, s, t-1) + a[t-1]
  }

vc-helpers: |-
  lemma SumProperty(a: seq<int>, s: int, t: int)
    requires 0 <= s <= t <= |a|
    ensures Sum(a, s, t) == if s == t then 0 else Sum(a, s, t-1) + a[t-1]
  {
  }
  
  lemma SumEmpty(a: seq<int>, s: int)
    requires 0 <= s <= |a|
    ensures Sum(a, s, s) == 0
  {
  }
  
  lemma SumExtend(a: seq<int>, s: int, t: int)
    requires 0 <= s <= t < |a|
    ensures Sum(a, s, t+1) == Sum(a, s, t) + a[t]
  {
  }
  
  lemma SumSplit(a: seq<int>, s: int, m: int, t: int)
    requires 0 <= s <= m <= t <= |a|
    ensures Sum(a, s, t) == Sum(a, s, m) + Sum(a, m, t)
  {
    if m == t {
      SumEmpty(a, m);
    } else {
      SumSplit(a, s, m, t-1);
      SumProperty(a, s, t);
    }
  }
  
  lemma EmptySubarrayExists(a: seq<int>)
    requires |a| >= 0
    ensures exists k, m :: 0 <= k <= m <= |a| && Sum(a, k, m) == 0
  {
    assert Sum(a, 0, 0) == 0;
  }
  
  lemma MinSumUpdate(a: seq<int>, oldMin: int, newMin: int, i: int, j: int)
    requires 0 <= i <= j <= |a|
    requires newMin == Sum(a, i, j)
    requires newMin < oldMin
    requires forall p, q :: 0 <= p <= q <= |a| ==> Sum(a, p, q) >= oldMin
    ensures forall p, q :: 0 <= p <= q <= |a| ==> Sum(a, p, q) >= newMin
  {
  }
  
  lemma AllSubarraysAtLeastEmpty(a: seq<int>)
    requires |a| >= 0
    ensures forall p, q :: 0 <= p <= q <= |a| ==> Sum(a, p, q) >= 0
  {
    forall p, q | 0 <= p <= q <= |a|
      ensures Sum(a, p, q) >= 0
    {
      EmptySubarrayExists(a);
    }
  }

vc-description: |-
  function_signature: def minSubArraySum(nums : list[int]) -> int
  Given an array of integers nums, find the minimum sum of any non-empty sub-array of nums.

vc-spec: |-
  method minSubArraySum(a: seq<int>) returns (s: int)
    // post-conditions-start
    ensures forall p,q :: 0 <= p <= q <= |a| ==> Sum(a, p, q) >= s
    ensures exists k, m :: 0 <= k <= m <= |a| && s == Sum(a, k, m)
    // post-conditions-end

vc-code: |-
  {
    if |a| == 0 {
      s := 0;
      assert Sum(a, 0, 0) == 0;
      return;
    }
    
    var minSum := 0;
    EmptySubarrayExists(a);
    AllSubarraysAtLeastEmpty(a);
    
    var i := 0;
    while i <= |a|
      invariant 0 <= i <= |a| + 1
      invariant exists k, m :: 0 <= k <= m <= |a| && minSum == Sum(a, k, m)
      invariant forall p, q :: 0 <= p <= q <= |a| ==> Sum(a, p, q) >= minSum
    {
      if i > |a| { break; }
      
      var j := i;
      var currentSum := 0;
      
      while j <= |a|
        invariant i <= j <= |a| + 1
        invariant j <= |a| ==> currentSum == Sum(a, i, j)
        invariant exists k, m :: 0 <= k <= m <= |a| && minSum == Sum(a, k, m)
        invariant forall p, q :: 0 <= p <= q <= |a| ==> Sum(a, p, q) >= minSum
      {
        if j > |a| { break; }
        
        if currentSum < minSum {
          MinSumUpdate(a, minSum, currentSum, i, j);
          minSum := currentSum;
        }
        
        if j < |a| {
          SumExtend(a, i, j);
          currentSum := currentSum + a[j];
        }
        j := j + 1;
      }
      
      i := i + 1;
    }
    
    s := minSum;
  }

vc-postamble: |-


