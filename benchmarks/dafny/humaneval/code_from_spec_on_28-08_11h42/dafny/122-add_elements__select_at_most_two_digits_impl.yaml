vc-preamble: |-
  function sum(s: seq<int>) : int {
    if |s| == 0 then 0 else s[0] + sum(s[1..])
  }
  function select_at_most_two_digits_rec(arr: seq<int>): seq<int>
    requires |arr| >= 0 && |arr| <= 100
  {
    if |arr| == 0 then []
    else if 0 <= arr[0] < 100 then [arr[0]] + select_at_most_two_digits_rec(arr[1..])
    else select_at_most_two_digits_rec(arr[1..])
  }

vc-helpers: |-
  lemma select_at_most_two_digits_rec_properties(arr: seq<int>)
    requires |arr| >= 0 && |arr| <= 100
    ensures forall i :: 0 <= i < |select_at_most_two_digits_rec(arr)| ==> 0 <= select_at_most_two_digits_rec(arr)[i] < 100
    ensures forall i :: 0 <= i < |select_at_most_two_digits_rec(arr)| ==> select_at_most_two_digits_rec(arr)[i] in arr
  {
    if |arr| == 0 {
    } else if 0 <= arr[0] < 100 {
      select_at_most_two_digits_rec_properties(arr[1..]);
    } else {
      select_at_most_two_digits_rec_properties(arr[1..]);
    }
  }
  
  lemma select_at_most_two_digits_rec_concat(s1: seq<int>, s2: seq<int>)
    requires |s1| >= 0 && |s2| >= 0 && |s1| + |s2| <= 100
    ensures select_at_most_two_digits_rec(s1 + s2) == select_at_most_two_digits_rec(s1) + select_at_most_two_digits_rec(s2)
    decreases |s1|
  {
    if |s1| == 0 {
      assert s1 + s2 == s2;
      assert select_at_most_two_digits_rec(s1) == [];
    } else if 0 <= s1[0] < 100 {
      assert s1 + s2 == [s1[0]] + (s1[1..] + s2);
      select_at_most_two_digits_rec_concat(s1[1..], s2);
    } else {
      assert s1 + s2 == [s1[0]] + (s1[1..] + s2);
      select_at_most_two_digits_rec_concat(s1[1..], s2);
    }
  }
  
  lemma select_at_most_two_digits_rec_single(x: int)
    ensures select_at_most_two_digits_rec([x]) == if 0 <= x < 100 then [x] else []
  {
  }

vc-description: |-
  function_signature: method select_at_most_two_digits(arr: seq<int>) returns (result: seq<int>)
  Select elements. Requires: the size is bounded. Ensures: the condition holds for all values; the condition holds for all values; selects only numbers with at most two digits.

vc-spec: |-
  method select_at_most_two_digits(arr: seq<int>) returns (result: seq<int>)
    // pre-conditions-start
    requires |arr| > 0 && |arr| <= 100
    // pre-conditions-end
    // post-conditions-start
    ensures forall i :: 0 <= i < |result| ==> 0 <= result[i] < 100
    ensures forall i :: 0 <= i < |result| ==> result[i] in arr
    ensures result == select_at_most_two_digits_rec(arr)
    // post-conditions-end

vc-code: |-
  {
    result := [];
    var i := 0;
    
    while i < |arr|
      invariant 0 <= i <= |arr|
      invariant result == select_at_most_two_digits_rec(arr[..i])
      invariant forall j :: 0 <= j < |result| ==> 0 <= result[j] < 100
      invariant forall j :: 0 <= j < |result| ==> result[j] in arr[..i]
    {
      if 0 <= arr[i] < 100 {
        result := result + [arr[i]];
        select_at_most_two_digits_rec_single(arr[i]);
        select_at_most_two_digits_rec_concat(arr[..i], [arr[i]]);
        assert arr[..i] + [arr[i]] == arr[..i+1];
        assert result == select_at_most_two_digits_rec(arr[..i+1]);
      } else {
        select_at_most_two_digits_rec_single(arr[i]);
        select_at_most_two_digits_rec_concat(arr[..i], [arr[i]]);
        assert arr[..i] + [arr[i]] == arr[..i+1];
        assert result == select_at_most_two_digits_rec(arr[..i+1]);
      }
      i := i + 1;
    }
    
    select_at_most_two_digits_rec_properties(arr);
    assert i == |arr|;
    assert arr[..i] == arr;
    assert result == select_at_most_two_digits_rec(arr);
  }

vc-postamble: |-
  method SumElementsWithAtMostTwoDigits(arr: seq<int>, k: int) returns (s: int)
    // pre-conditions-start
    requires |arr| > 0 && |arr| <= 100
    requires 1 <= k <= |arr|
    // pre-conditions-end
    // post-conditions-start
    ensures var two_digits := select_at_most_two_digits_rec(arr[..k]);
            s == sum(two_digits)
    // post-conditions-end
  {
    assume{:axiom} false;
  }

