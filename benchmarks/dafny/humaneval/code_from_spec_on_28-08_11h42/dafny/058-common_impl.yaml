vc-preamble: |-


vc-helpers: |-


vc-description: |-
  function_signature: def common(l1: List[Int], l2: List[Int]) -> List[Int]
  Return sorted unique common elements for two lists.

vc-spec: |-
  method common(l1 : seq<int>, l2 : seq<int>) returns (c : set<int>)
     // post-conditions-start
      ensures forall i :: i in c ==> i in l1 && i in l2
      ensures forall i :: i in l1 && i in l2 ==> i in c
      // post-conditions-end

vc-code: |-
  {
    c := {};
    var i := 0;
    while i < |l1|
      invariant 0 <= i <= |l1|
      invariant forall x :: x in c ==> x in l1 && x in l2
      invariant forall x :: x in l1[..i] && x in l2 ==> x in c
    {
      if l1[i] in l2 {
        c := c + {l1[i]};
      }
      i := i + 1;
    }
  }

vc-postamble: |-


