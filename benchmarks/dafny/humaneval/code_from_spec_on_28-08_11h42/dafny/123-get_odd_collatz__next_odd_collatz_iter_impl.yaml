vc-preamble: |-
  function iterate_to_odd(n: nat): nat
    requires n % 2 == 0
    requires n > 0
    ensures iterate_to_odd(n) % 2 == 1
  {
    if (n / 2) % 2 == 1 then n / 2 else iterate_to_odd(n / 2)
  }
  function next_odd_collatz(n: nat): nat
    requires n > 0
  {
    if n % 2 == 0 then iterate_to_odd(n) else iterate_to_odd(3 * n + 1)
  }

vc-helpers: |-
  lemma iterate_to_odd_preserves_positivity(n: nat)
    requires n % 2 == 0
    requires n > 0
    ensures iterate_to_odd(n) > 0
  {
    if (n / 2) % 2 == 1 {
      assert n / 2 > 0;
    } else {
      assert n / 2 % 2 == 0;
      assert n / 2 > 0;
      iterate_to_odd_preserves_positivity(n / 2);
    }
  }
  
  lemma next_odd_collatz_preserves_positivity(n: nat)
    requires n > 0
    ensures next_odd_collatz(n) > 0
  {
    if n % 2 == 0 {
      iterate_to_odd_preserves_positivity(n);
    } else {
      assert 3 * n + 1 > 0;
      assert (3 * n + 1) % 2 == 0;
      iterate_to_odd_preserves_positivity(3 * n + 1);
    }
  }
  
  function pow2(k: nat): nat
  {
    if k == 0 then 1 else 2 * pow2(k - 1)
  }
  
  lemma pow2_positive(k: nat)
    ensures pow2(k) > 0
  {
  }
  
  lemma pow2_division_lemma(n: nat, k: nat)
    requires k > 0
    requires n % 2 == 0
    ensures n == (n / 2) * pow2(1)
    ensures pow2(k + 1) == 2 * pow2(k)
  {
  }
  
  lemma iterate_to_odd_power_relation(n: nat)
    requires n % 2 == 0
    requires n > 0
    ensures exists k: nat :: k > 0 && n == iterate_to_odd(n) * pow2(k)
    decreases n
  {
    var half := n / 2;
    if half % 2 == 1 {
      assert iterate_to_odd(n) == half;
      assert n == half * 2;
      assert pow2(1) == 2;
      assert n == iterate_to_odd(n) * pow2(1);
    } else {
      iterate_to_odd_power_relation(half);
      var k_half :| k_half > 0 && half == iterate_to_odd(half) * pow2(k_half);
      assert iterate_to_odd(n) == iterate_to_odd(half);
      assert n == 2 * half;
      assert n == 2 * iterate_to_odd(half) * pow2(k_half);
      assert pow2(k_half + 1) == 2 * pow2(k_half);
      assert n == iterate_to_odd(n) * pow2(k_half + 1);
    }
  }
  
  lemma iterate_to_odd_loop_correctness(n: nat)
    requires n % 2 == 0
    requires n > 0
    ensures exists k: nat :: k > 0 && n == iterate_to_odd(n) * pow2(k)
  {
    iterate_to_odd_power_relation(n);
  }
  
  lemma iterate_loop_invariant(original: nat, current: nat)
    requires original % 2 == 0 && original > 0
    requires current > 0
    requires exists k: nat :: original == current * pow2(k)
    ensures if current % 2 == 1 then current == iterate_to_odd(original)
            else iterate_to_odd(current) == iterate_to_odd(original)
    decreases current
  {
    if current % 2 == 1 {
      var k :| original == current * pow2(k);
      assert current == iterate_to_odd(original);
    } else {
      var k :| original == current * pow2(k);
      assert k > 0;
      assert pow2(k) >= 2;
      var half := current / 2;
      assert current == 2 * half;
      assert original == 2 * half * pow2(k);
      assert pow2(k + 1) == 2 * pow2(k);
      assert original == half * pow2(k + 1);
      iterate_loop_invariant(original, half);
      assert iterate_to_odd(current) == iterate_to_odd(original);
    }
  }
  
  lemma power_relation_maintenance(n: nat, next: nat)
    requires next > 0 && next % 2 == 0
    requires exists k: nat :: n == next * pow2(k)
    ensures exists k: nat :: n == (next / 2) * pow2(k)
  {
    var k :| n == next * pow2(k);
    assert next == 2 * (next / 2);
    assert n == 2 * (next / 2) * pow2(k);
    assert pow2(k + 1) == 2 * pow2(k);
    assert n == (next / 2) * pow2(k + 1);
  }

vc-description: |-
  function_signature: method next_odd_collatz_iter(n: nat) returns (next: nat)
  Process input. Requires: requires n > 0. Ensures: returns the correct value; returns the correct value.

vc-spec: |-
  method next_odd_collatz_iter(n: nat) returns (next: nat)
    // pre-conditions-start
    requires n > 0
    // pre-conditions-end
    // post-conditions-start
    ensures next % 2 == 1
    ensures next == next_odd_collatz(n)
    // post-conditions-end

vc-code: |-
  {
    if n % 2 == 0 {
      next := n;
      assert exists k: nat :: n == next * pow2(0 + 1);
      assert pow2(1) == 2;
      assert n == next * 1;
      assert exists k: nat :: n == next * pow2(0);
      
      while next % 2 == 0
        invariant next > 0
        invariant exists k: nat :: n == next * pow2(k)
        invariant iterate_to_odd(next) == iterate_to_odd(n)
        decreases next
      {
        power_relation_maintenance(n, next);
        iterate_loop_invariant(n, next);
        next := next / 2;
      }
      iterate_loop_invariant(n, next);
      assert next == iterate_to_odd(n);
    } else {
      next := 3 * n + 1;
      assert (3 * n + 1) % 2 == 0;
      assert exists k: nat :: (3 * n + 1) == next * pow2(0);
      
      while next % 2 == 0
        invariant next > 0
        invariant exists k: nat :: (3 * n + 1) == next * pow2(k)
        invariant iterate_to_odd(next) == iterate_to_odd(3 * n + 1)
        decreases next
      {
        power_relation_maintenance(3 * n + 1, next);
        iterate_loop_invariant(3 * n + 1, next);
        next := next / 2;
      }
      iterate_loop_invariant(3 * n + 1, next);
      assert next == iterate_to_odd(3 * n + 1);
    }
  }

vc-postamble: |-
  method get_odd_collatz_unsorted(n: nat) returns (odd_collatz: seq<nat>)
    decreases *
    requires n > 1
    ensures forall i :: 0 <= i < |odd_collatz| ==> odd_collatz[i] % 2 == 1
    ensures forall i :: 1 <= i < |odd_collatz| ==> odd_collatz[i] == next_odd_collatz(odd_collatz[i - 1])
  {
    assume{:axiom} false;
  }
  method get_odd_collatz(n: nat) returns (sorted: seq<int>)
    decreases *
    requires n > 1
    ensures forall i, j :: 0 <= i < j < |sorted| ==> sorted[i] <= sorted[j]
    ensures forall i :: 0 <= i < |sorted| ==> sorted[i] % 2 == 1
  {
    assume{:axiom} false;
  }

