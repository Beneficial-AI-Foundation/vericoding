vc-preamble: |-
  method uniqueSorted(s: seq<int>) returns (result: seq<int>)
      // pre-conditions-start
      requires forall i, j :: 0 <= i < j < |s| ==> s[i] <= s[j]
      // pre-conditions-end
      // post-conditions-start
      ensures forall i, j :: 0 <= i < j < |result| ==> result[i] < result[j]
      ensures forall x :: x in result ==> x in s
      ensures forall x :: x in s ==> x in result
      // post-conditions-end
  {
    assume{:axiom} false;
  }

vc-helpers: |-
  lemma UniquePreservesElements(s: seq<int>, result: seq<int>)
      requires forall x :: x in result ==> x in s
      requires forall x :: x in s ==> x in result
      ensures forall x :: x in result <==> x in s
  {
  }
  
  lemma SortedUniqueProperty(s: seq<int>)
      requires forall i, j :: 0 <= i < j < |s| ==> s[i] <= s[j]
      ensures forall i, j :: 0 <= i < j < |s| ==> s[i] < s[j] || s[i] == s[j]
  {
  }
  
  lemma StrictOrderingFromNonStrict(s: seq<int>, result: seq<int>)
      requires forall i, j :: 0 <= i < j < |s| ==> s[i] <= s[j]
      requires forall x :: x in result ==> x in s
      requires forall x :: x in s ==> x in result
      requires forall i, j :: 0 <= i < j < |result| ==> result[i] < result[j]
      ensures |result| <= |s|
  {
      if |result| > |s| {
          assert false;
      }
  }
  
  lemma SortPreservesElements(s: seq<int>, sorted: seq<int>)
      requires multiset(s) == multiset(sorted)
      ensures forall x :: x in s <==> x in sorted
  {
  }
  
  lemma UniqueSortedPreservesElements(s: seq<int>, sorted: seq<int>, result: seq<int>)
      requires multiset(s) == multiset(sorted)
      requires forall x :: x in result ==> x in sorted
      requires forall x :: x in sorted ==> x in result
      ensures forall x :: x in result ==> x in s
      ensures forall x :: x in s ==> x in result
  {
      SortPreservesElements(s, sorted);
  }
  
  lemma UniquePostconditions(s: seq<int>, sorted: seq<int>, result: seq<int>)
      requires multiset(s) == multiset(sorted)
      requires forall i, j :: 0 <= i < j < |sorted| ==> sorted[i] <= sorted[j]
      requires forall i, j :: 0 <= i < j < |result| ==> result[i] < result[j]
      requires forall x :: x in result ==> x in sorted
      requires forall x :: x in sorted ==> x in result
      ensures forall x :: x in result ==> x in s
      ensures forall x :: x in s ==> x in result
      ensures |result| <= |sorted|
  {
      UniqueSortedPreservesElements(s, sorted, result);
      SortedUniqueLength(sorted, result);
  }
  
  lemma SortedUniqueLength(sorted: seq<int>, result: seq<int>)
      requires forall i, j :: 0 <= i < j < |sorted| ==> sorted[i] <= sorted[j]
      requires forall x :: x in result ==> x in sorted
      requires forall x :: x in sorted ==> x in result
      requires forall i, j :: 0 <= i < j < |result| ==> result[i] < result[j]
      ensures |result| <= |sorted|
  {
      if |result| <= |sorted| {
          return;
      }
      
      assert false;
  }

vc-description: |-
  function_signature: method unique(s: seq<int>) returns (result: seq<int>)
  Process input. Ensures: the condition holds for all values; the condition holds for all values; the condition holds for all values.

vc-spec: |-
  method unique(s: seq<int>) returns (result: seq<int>)
      // post-conditions-start
      ensures forall i, j :: 0 <= i < j < |result| ==> result[i] < result[j]
      ensures forall x :: x in result ==> x in s
      ensures forall x :: x in s ==> x in result
      // post-conditions-end

vc-code: |-
  {
      var sorted := SortSeq(s);
      result := uniqueSorted(sorted);
      UniquePostconditions(s, sorted, result);
  }

vc-postamble: |-
  method SortSeq(s: seq<int>) returns (sorted: seq<int>)
    // post-conditions-start
    ensures forall i, j :: 0 <= i < j < |sorted| ==> sorted[i] <= sorted[j]
    ensures |sorted| == |s|
    ensures multiset(s) == multiset(sorted)
    // post-conditions-end
  {
    assume{:axiom} false;
  }

