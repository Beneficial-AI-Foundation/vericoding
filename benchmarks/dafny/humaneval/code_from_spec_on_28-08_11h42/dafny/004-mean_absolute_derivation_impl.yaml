vc-preamble: |-
  function sum(s: seq<real>) : real {
    if |s| == 0 then 0.0 else s[0] + sum(s[1..])
  }
  function abs(x: real) : real
    ensures abs(x) >= 0.0
  {
    if x >= 0.0 then x else -x
  }
  function mean(s: seq<real>) : real
    requires |s| > 0
  {
    sum(s) / |s| as real
  }

vc-helpers: |-
  lemma seq_comprehension_length<T>(n: int, f: int -> T)
    requires n >= 0
    ensures |seq(n, f)| == n
  {
  }
  
  lemma seq_comprehension_index<T>(n: int, f: int -> T, i: int)
    requires n >= 0
    requires 0 <= i < n
    ensures seq(n, f)[i] == f(i)
  {
  }

vc-description: |-
  function_signature: def mean_absolute_deviation(numbers: List[float]) -> float
  For a given list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset. Mean Absolute Deviation is the average absolute difference between each element and a centerpoint (mean in this case): MAD = average | x - x_mean |

vc-spec: |-
  method mean_absolute_derivation(numbers: seq<real>) returns (derivation: real)
    // pre-conditions-start
    requires |numbers| > 0
    // pre-conditions-end
    // post-conditions-start
    ensures var m := mean(numbers);
      derivation == mean(seq(|numbers|, i requires 0 <= i < |numbers| => abs(numbers[i] - m)))
    // post-conditions-end

vc-code: |-
  {
    var m := mean(numbers);
    var deviations := seq(|numbers|, i requires 0 <= i < |numbers| => abs(numbers[i] - m));
    derivation := mean(deviations);
  }

vc-postamble: |-


