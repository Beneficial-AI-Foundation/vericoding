vc-preamble: |-
  method uniqueSorted(s: seq<int>) returns (result: seq<int>)
      // pre-conditions-start
      requires forall i, j :: 0 <= i < j < |s| ==> s[i] <= s[j]
      // pre-conditions-end
      // post-conditions-start
      ensures forall i, j :: 0 <= i < j < |result| ==> result[i] < result[j]
      ensures forall x :: x in result ==> x in s
      ensures forall x :: x in s ==> x in result
      // post-conditions-end
  {
    assume{:axiom} false;
  }
  method unique(s: seq<int>) returns (result: seq<int>)
      // post-conditions-start
      ensures forall i, j :: 0 <= i < j < |result| ==> result[i] < result[j]
      ensures forall x :: x in result ==> x in s
      ensures forall x :: x in s ==> x in result
      // post-conditions-end
  {
    assume{:axiom} false;
  }

vc-helpers: |-
  lemma {:axiom} MultisetPreservesElements<T>(s1: seq<T>, s2: seq<T>)
    requires multiset(s1) == multiset(s2)
    ensures forall x :: x in s1 <==> x in s2
  
  lemma {:axiom} SortedProperty(s: seq<int>, i: int, j: int)
    requires forall i, j :: 0 <= i < j < |s| ==> s[i] <= s[j]
    requires 0 <= i <= j < |s|
    ensures s[i] <= s[j]
  
  lemma {:axiom} InsertPreservesMultiset(s: seq<int>, x: int, pos: int)
    requires 0 <= pos <= |s|
    ensures multiset(s[..pos] + [x] + s[pos..]) == multiset(s) + multiset([x])
  
  lemma {:axiom} InsertMaintainsSorted(s: seq<int>, x: int, pos: int)
    requires forall i, j :: 0 <= i < j < |s| ==> s[i] <= s[j]
    requires 0 <= pos <= |s|
    requires pos == 0 || s[pos-1] <= x
    requires pos == |s| || x <= s[pos]
    ensures forall i, j :: 0 <= i < j < |s[..pos] + [x] + s[pos..]| ==> (s[..pos] + [x] + s[pos..])[i] <= (s[..pos] + [x] + s[pos..])[j]
  
  function FindInsertPos(s: seq<int>, x: int): int
    requires forall i, j :: 0 <= i < j < |s| ==> s[i] <= s[j]
    ensures 0 <= FindInsertPos(s, x) <= |s|
    ensures FindInsertPos(s, x) == 0 || s[FindInsertPos(s, x) - 1] <= x
    ensures FindInsertPos(s, x) == |s| || x <= s[FindInsertPos(s, x)]
    decreases |s|
  {
    if |s| == 0 then 0
    else if x <= s[0] then 0
    else if s[|s|-1] <= x then |s|
    else
      var mid := |s| / 2;
      if x <= s[mid] then FindInsertPos(s[..mid+1], x)
      else mid + 1 + FindInsertPos(s[mid+1..], x)
  }
  
  lemma SeqConcatPreservesMultiset(s: seq<int>, pos: int, x: int)
    requires 0 <= pos <= |s|
    ensures multiset(s[..pos] + [x] + s[pos..]) == multiset(s) + multiset([x])
  {
    assert s[..pos] + [x] + s[pos..] == s[..pos] + ([x] + s[pos..]);
  }
  
  lemma SeqSliceAppendMultiset(s: seq<int>, i: int)
    requires 0 <= i < |s|
    ensures multiset(s[..i+1]) == multiset(s[..i]) + multiset([s[i]])
  {
    assert s[..i+1] == s[..i] + [s[i]];
  }

vc-description: |-
  function_signature: method SortSeq(s: seq<int>) returns (sorted: seq<int>)
  Sort elements. Ensures: the result is sorted according to the ordering relation; returns the correct size/count; returns a sorted permutation of the input.

vc-spec: |-
  method SortSeq(s: seq<int>) returns (sorted: seq<int>)
    // post-conditions-start
    ensures forall i, j :: 0 <= i < j < |sorted| ==> sorted[i] <= sorted[j]
    ensures |sorted| == |s|
    ensures multiset(s) == multiset(sorted)
    // post-conditions-end

vc-code: |-
  {
    sorted := [];
    var i := 0;
    
    while i < |s|
      invariant 0 <= i <= |s|
      invariant forall x, y :: 0 <= x < y < |sorted| ==> sorted[x] <= sorted[y]
      invariant multiset(sorted) == multiset(s[..i])
      invariant |sorted| == i
    {
      var pos := 0;
      while pos < |sorted| && sorted[pos] < s[i]
        invariant 0 <= pos <= |sorted|
        invariant forall k :: 0 <= k < pos ==> sorted[k] < s[i]
        invariant pos == |sorted| || s[i] <= sorted[pos]
        decreases |sorted| - pos
      {
        pos := pos + 1;
      }
      
      var old_sorted := sorted;
      sorted := sorted[..pos] + [s[i]] + sorted[pos..];
      
      SeqConcatPreservesMultiset(old_sorted, pos, s[i]);
      SeqSliceAppendMultiset(s, i);
      InsertMaintainsSorted(old_sorted, s[i], pos);
      
      i := i + 1;
    }
  }

vc-postamble: |-


