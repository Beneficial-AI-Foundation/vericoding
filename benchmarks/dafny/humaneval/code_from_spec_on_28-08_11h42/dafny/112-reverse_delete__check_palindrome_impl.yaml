vc-preamble: |-
  method reverse_delete(s: string, chars: string) returns (res: string, is_palindrome: bool)
    // post-conditions-start
    ensures forall i :: 0 <= i < |res| ==> res[i] !in chars
    ensures forall i :: 0 <= i < |res| ==> res[i] in s
    ensures forall i :: 0 <= i < |s| && s[i] !in chars ==> s[i] in res
    ensures is_palindrome <==> is_palindrome_pred(res)
    // post-conditions-end
  {
    assume{:axiom} false;
  }

vc-helpers: |-
  lemma palindrome_empty()
    ensures is_palindrome_pred("")
  {
  }
  
  lemma palindrome_single(c: char)
    ensures is_palindrome_pred([c])
  {
  }
  
  lemma palindrome_preserved(s: string, i: int, j: int)
    requires 0 <= i < j < |s|
    requires i + j == |s| - 1
    requires forall k :: 0 <= k < i ==> s[k] == s[|s| - 1 - k]
    requires s[i] == s[j]
    ensures forall k :: 0 <= k <= i ==> s[k] == s[|s| - 1 - k]
  {
  }

vc-description: |-
  function_signature: method check_palindrome(s: string) returns (result: bool)
  Check condition. Ensures: the result is a palindrome.

vc-spec: |-
  method check_palindrome(s: string) returns (result: bool)
    // post-conditions-start
    ensures result <==> is_palindrome_pred(s)
    // post-conditions-end

vc-code: |-
  {
    if |s| <= 1 {
      result := true;
      if |s| == 0 {
        palindrome_empty();
      } else {
        palindrome_single(s[0]);
      }
      return;
    }
    
    var i := 0;
    var j := |s| - 1;
    
    while i < j
      invariant 0 <= i
      invariant j < |s|
      invariant i + j == |s| - 1
      invariant forall k :: 0 <= k < i ==> s[k] == s[|s| - 1 - k]
      decreases j - i
    {
      if s[i] != s[j] {
        result := false;
        return;
      }
      palindrome_preserved(s, i, j);
      i := i + 1;
      j := j - 1;
    }
    
    result := true;
  }

vc-postamble: |-
  function is_palindrome_pred(s : string) : bool {
    forall k :: 0 <= k < |s| ==> s[k] == s[|s| - 1 - k]
  }
  // pure-end

