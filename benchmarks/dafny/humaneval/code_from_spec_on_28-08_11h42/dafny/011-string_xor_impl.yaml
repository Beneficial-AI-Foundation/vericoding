vc-preamble: |-
  function represents_byte(a: char) : bool
  {
      a in "01"
  }
  function char_xor(a: char, b: char): char
      requires represents_byte(a)
      requires represents_byte(b)
  {
      if (a == b) then
          '0'
      else
          '1'
  }

vc-helpers: |-
  lemma char_xor_represents_byte(a: char, b: char)
      requires represents_byte(a)
      requires represents_byte(b)
      ensures represents_byte(char_xor(a, b))
  {
      // The proof is automatic since char_xor returns either '0' or '1'
  }

vc-description: |-
  function_signature: def string_xor(a: str, b: str) -> str
  Input are two strings a and b consisting only of 1s and 0s. Perform binary XOR on these inputs and return result also as a string.

vc-spec: |-
  method string_xor(a: string, b: string) returns (result: string)
      // pre-conditions-start
      requires |a| == |b|
      requires forall i :: 0 <= i < |a| ==> represents_byte(a[i])
      requires forall i :: 0 <= i < |b| ==> represents_byte(b[i])
      // pre-conditions-end
      // post-conditions-start
      ensures |result| == |a|
      ensures forall i :: 0 <= i < |result| ==> represents_byte(result[i])
      ensures forall i :: 0 <= i < |result| ==> result[i] == char_xor(a[i], b[i])
      // post-conditions-end

vc-code: |-
  {
      result := "";
      var i := 0;
      while i < |a|
          invariant 0 <= i <= |a|
          invariant |result| == i
          invariant forall j :: 0 <= j < i ==> represents_byte(result[j])
          invariant forall j :: 0 <= j < i ==> result[j] == char_xor(a[j], b[j])
      {
          char_xor_represents_byte(a[i], b[i]);
          result := result + [char_xor(a[i], b[i])];
          i := i + 1;
      }
  }

vc-postamble: |-


