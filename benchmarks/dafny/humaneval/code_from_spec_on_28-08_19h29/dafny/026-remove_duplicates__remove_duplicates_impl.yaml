vc-preamble: |-
  function count_rec(a: seq<int>, x: int): int {
    if |a| == 0 then 0
    else count_rec(a[1..], x) + (if a[0] == x then 1 else 0)
  }

vc-helpers: |-
  // Helper function to check if an element exists in a sequence up to a certain index
  predicate exists_in_seq(a: seq<int>, x: int, up_to: int)
    requires 0 <= up_to <= |a|
  {
    exists i :: 0 <= i < up_to && a[i] == x
  }
  
  // Lemma to assist with proving properties about sequences and duplicates
  lemma RemoveDuplicatesPreservesElements(a: seq<int>, result: seq<int>)
    requires forall i, j :: 0 <= i < j < |result| ==> result[i] != result[j]
    requires forall x :: x in result ==> x in a
    requires forall x :: x in a ==> count_rec(a, x) >= 1 ==> x in result
    ensures |result| <= |a|
  {
  }

vc-description: |-
  function_signature: method remove_duplicates(a: seq<int>) returns (result: seq<int>)
  Process input. Requires: the condition holds for all values. Ensures: the condition holds for all values; the condition holds for all values.

vc-spec: |-
  method remove_duplicates(a: seq<int>) returns (result: seq<int>)
    requires true
    ensures forall i, j :: 0 <= i < j < |result| ==> result[i] != result[j]
    ensures forall x :: x in result ==> x in a
    ensures forall x :: x in a ==> x in result
    ensures |result| <= |a|

vc-code: |-
  {
    result := [];
    for i := 0 to |a|
      invariant 0 <= i <= |a|
      invariant forall k, l :: 0 <= k < l < |result| ==> result[k] != result[l]
      invariant forall x :: x in result ==> x in a[..i]
      invariant forall x :: x in a[..i] ==> x in result
    {
      if i < |a| && a[i] !in result
      {
        result := result + [a[i]];
      }
    }
  }

vc-postamble: |-
  method count(a: seq<int>, x: int) returns (cnt: int)
    // post-conditions-start
    ensures cnt == |set i | 0 <= i < |a| && a[i] == x|
    ensures cnt == count_rec(a, x)
    // post-conditions-end
  {
    assume{:axiom} false;
  }

