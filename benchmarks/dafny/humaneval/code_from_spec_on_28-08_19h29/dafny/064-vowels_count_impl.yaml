vc-preamble: |-


vc-helpers: |-
  function IsVowel(c: char): bool
    ensures IsVowel(c) <==> c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'
  {
      c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'
  }

vc-description: |-
  function_signature: def remove_vowels(string: str) -> Nat
  Write a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the end of the given word.

vc-spec: |-
  method vowels_count(word: string) returns (count: nat)
    ensures count == |set i: int | 0 <= i < |word| && (IsVowel(word[i]) || ((word[i] == 'y' || word[i] == 'Y') && i == |word| - 1))|

vc-code: |-
  {
    count := 0;
    var i := 0;
    while i < |word|
      invariant 0 <= i <= |word|
      invariant count == |set j: int | 0 <= j < i && (IsVowel(word[j]) || ((word[j] == 'y' || word[j] == 'Y') && j == |word| - 1))|
    {
      if IsVowel(word[i]) || ((word[i] == 'y' || word[i] == 'Y') && i == |word| - 1)
      {
        count := count + 1;
      }
      i := i + 1;
    }
  }

vc-postamble: |-
  function is_vowel(c: char): bool
    ensures is_vowel(c) <==> c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'
  {
      c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'
  }
  // pure-end

