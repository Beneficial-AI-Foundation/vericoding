vc-preamble: |-


vc-helpers: |-
  // No additional helpers needed for this implementation

vc-description: |-
  function_signature: def intersperse(numbers: List[int], delimeter: int) -> List[int]
  Insert a number 'delimeter' between every two consecutive elements of input list `numbers'

vc-spec: |-
  method Intersperse(numbers: seq<int>, delimiter: int) returns (result: seq<int>)
    requires |numbers| >= 0
    ensures |result| == if |numbers| <= 1 then |numbers| else 2 * |numbers| - 1
    ensures forall i :: 0 <= i < |numbers| ==> result[2 * i] == numbers[i]
    ensures forall i :: 0 <= i < |numbers| - 1 ==> result[2 * i + 1] == delimiter

vc-code: |-
  {
    if |numbers| <= 1 {
      return numbers;
    }
    
    var res: seq<int> := [];
    var i := 0;
    while i < |numbers| - 1
      invariant 0 <= i <= |numbers| - 1
      invariant |res| == 2 * i
      invariant forall k :: 0 <= k < i ==> res[2 * k] == numbers[k]
      invariant forall k :: 0 <= k < i ==> res[2 * k + 1] == delimiter
    {
      res := res + [numbers[i], delimiter];
      i := i + 1;
    }
    res := res + [numbers[i]];
    return res;
  }

vc-postamble: |-


