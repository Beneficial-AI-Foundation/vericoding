vc-preamble: |-
  function is_prime_pred(k: int) : bool
  {
    forall i :: 2 <= i < k ==> k % i != 0
  }

vc-helpers: |-
  function is_prime_func(k: int) : bool
  {
    if k < 2 then false else forall i :: 2 <= i < k ==> k % i != 0
  }
  
  lemma PrimeFactorExists(n: int)
    requires n >= 2
    ensures exists p :: 1 <= p <= n && is_prime_func(p) && n % p == 0
  {
    var i := 2;
    while i <= n
      invariant 2 <= i <= n + 1
      invariant forall j :: 2 <= j < i ==> n % j != 0 || !is_prime_func(j)
    {
      if n % i == 0 {
        if is_prime_func(i) {
          assert 1 <= i <= n && is_prime_func(i) && n % i == 0;
          return;
        }
      }
      i := i + 1;
    }
    assert false; // Unreachable
  }

vc-description: |-
  function_signature: method is_prime(k: int) returns (result: bool)
  Check if condition holds. Requires: the result is at least the specified value. Ensures: the condition holds for all values; there exists a value satisfying the condition.

vc-spec: |-
  method is_prime(k: int) returns (result: bool)
    requires k >= 1
    ensures result == is_prime_pred(k)

vc-code: |-
  {
    if k < 2 {
      return false;
    }
    var i := 2;
    while i * i <= k
      invariant 2 <= i
      invariant forall j :: 2 <= j < i ==> k % j != 0
    {
      if k % i == 0 {
        return false;
      }
      i := i + 1;
    }
    return true;
  }

vc-postamble: |-
  method largest_prime_factor(n: int) returns (largest: int)
    // pre-conditions-start
    requires n >= 2
    // pre-conditions-end
    // post-conditions-start
    ensures 1 <= largest <= n && (largest == 1 || (largest > 1 && is_prime_pred(largest)))
    // post-conditions-end
  {
    assume{:axiom} false;
  }

