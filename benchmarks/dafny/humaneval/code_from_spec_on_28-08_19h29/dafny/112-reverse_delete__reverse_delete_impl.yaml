vc-preamble: |-


vc-helpers: |-
  function filter_string(s: string, chars: string): seq<char> {
    if |s| == 0 then [] else
      if s[0] in chars then filter_string(s[1..], chars)
      else [s[0]] + filter_string(s[1..], chars)
  }
  
  function reverse_string(s: seq<char>): seq<char> {
    if |s| == 0 then [] else reverse_string(s[1..]) + [s[0]]
  }

vc-description: |-
  function_signature: method reverse_delete(s: string, chars: string) returns (res: string, is_palindrome: bool)
  Reverse order. Ensures: the condition holds for all values; the condition holds for all values; the condition holds for all values; the result is a palindrome.

vc-spec: |-
  method reverse_delete(s: string, chars: string) returns (res: string, is_palindrome: bool)
    ensures res == reverse_string(filter_string(s, chars))
    ensures is_palindrome <==> is_palindrome_pred(res)

vc-code: |-
  {
    var filtered := filter_string(s, chars);
    var reversed := reverse_string(filtered);
    var is_pal := check_palindrome(reversed);
    return reversed, is_pal;
  }

vc-postamble: |-
  method check_palindrome(s: string) returns (result: bool)
    // post-conditions-start
    ensures result <==> is_palindrome_pred(s)
    // post-conditions-end
  {
    assume{:axiom} false;
  }
  function is_palindrome_pred(s : string) : bool {
    forall k :: 0 <= k < |s| ==> s[k] == s[|s| - 1 - k]
  }
  // pure-end

