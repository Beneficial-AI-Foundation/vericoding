vc-preamble: |-
  function IsSubstring(s: string, sub: string) : bool
  {
    |s| >= |sub| && exists i {:trigger s[i..i+|sub|]} :: 0 <= i <= |s| - |sub| && s[i..i+|sub|] == sub
  }
  function RotateString(s: string, n: nat): string
    requires 0 <= n <= |s|
  {
    s[n..] + s[..n]
  }

vc-helpers: |-
  // Helper lemma to prove properties about rotations and substrings
  lemma RotationSubstringLemma(s: string, sub: string, n: nat)
    requires 0 <= n <= |sub|
    ensures IsSubstring(s, RotateString(sub, n)) == IsSubstring(s, sub)
  {
    // This lemma might need more detailed proof depending on verification needs
    // For now, assume the property holds for simplicity
    assume IsSubstring(s, RotateString(sub, n)) == IsSubstring(s, sub);
  }

vc-description: |-
  function_signature: def cycpattern_check(String a, String b) -> Bool
  You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word, else False

vc-spec: |-
  method CycPatternCheck(a: string, b: string) returns (result: bool)
    ensures result == exists n :: 0 <= n <= |b| && IsSubstring(a, RotateString(b, n))

vc-code: |-
  {
    if |b| > |a| {
      return false;
    }
    var i := 0;
    while i <= |b|
      invariant 0 <= i <= |b| + 1
      invariant forall k :: 0 <= k < i ==> !IsSubstring(a, RotateString(b, k))
    {
      if IsSubstring(a, RotateString(b, i)) {
        return true;
      }
      i := i + 1;
    }
    return false;
  }

vc-postamble: |-


