vc-preamble: |-
  method uniqueSorted(s: seq<int>) returns (result: seq<int>)
      // pre-conditions-start
      requires forall i, j :: 0 <= i < j < |s| ==> s[i] <= s[j]
      // pre-conditions-end
      // post-conditions-start
      ensures forall i, j :: 0 <= i < j < |result| ==> result[i] < result[j]
      ensures forall x :: x in result ==> x in s
      ensures forall x :: x in s ==> x in result
      // post-conditions-end
  {
    assume{:axiom} false;
  }

vc-helpers: |-
  // Helper predicate to check if a sequence is sorted and has unique elements
  predicate IsSortedUnique(s: seq<int>)
  {
    forall i, j :: 0 <= i < j < |s| ==> s[i] < s[j]
  }
  
  // Helper predicate to check if two sequences have the same elements
  predicate SameElements(s1: seq<int>, s2: seq<int>)
  {
    multiset(s1) == multiset(s2)
  }

vc-description: |-
  function_signature: method unique(s: seq<int>) returns (result: seq<int>)
  Process input. Ensures: the condition holds for all values; the condition holds for all values; the condition holds for all values.

vc-spec: |-
  method unique(s: seq<int>) returns (result: seq<int>)
    requires forall i, j :: 0 <= i < j < |s| ==> s[i] <= s[j]
    ensures IsSortedUnique(result)
    ensures SameElements(s, result)

vc-code: |-
  {
    if |s| == 0 {
      result := [];
    } else {
      result := [s[0]];
      var i := 1;
      while i < |s|
        invariant 0 <= i <= |s|
        invariant IsSortedUnique(result)
        invariant forall x :: x in result ==> x in s[..i]
        invariant forall x :: x in s[..i] ==> x in result || exists j :: 0 <= j < i && s[j] == x && x in s[..j]
      {
        if |result| > 0 && s[i] != result[|result|-1] {
          result := result + [s[i]];
        } else if |result| == 0 {
          result := [s[i]];
        }
        i := i + 1;
      }
    }
  }

vc-postamble: |-
  method SortSeq(s: seq<int>) returns (sorted: seq<int>)
    // post-conditions-start
    ensures forall i, j :: 0 <= i < j < |sorted| ==> sorted[i] <= sorted[j]
    ensures |sorted| == |s|
    ensures multiset(s) == multiset(sorted)
    // post-conditions-end
  {
    assume{:axiom} false;
  }

