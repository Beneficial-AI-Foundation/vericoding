vc-preamble: |-
  function lower(c: char) : bool
      {
          'a' <= c <= 'z'
      }
  function upper(c: char) : bool
      {
          'A' <= c <= 'Z'
      }
  function alpha(c: char) : bool
      {
          lower(c) || upper(c)
      }
  function flip_char(c: char) : (C: char)
          ensures lower(c) <==> upper(C)
          ensures upper(c) <==> lower(C)
      {
          if lower(c) then c - 'a' + 'A' else
          if upper(c) then c + 'a' - 'A' else c
      }

vc-helpers: |-
  function isLower(c: char) : bool
  {
      'a' <= c <= 'z'
  }
  
  function isUpper(c: char) : bool
  {
      'A' <= c <= 'Z'
  }
  
  function isAlpha(c: char) : bool
  {
      isLower(c) || isUpper(c)
  }
  
  function flipChar(c: char) : (C: char)
      ensures isLower(c) <==> isUpper(C)
      ensures isUpper(c) <==> isLower(C)
  {
      if isLower(c) then c - 'a' + 'A' else
      if isUpper(c) then c + 'a' - 'A' else c
  }

vc-description: |-
  function_signature: def flip_case(string: str) -> str
  For a given string, flip lowercase characters to uppercase and uppercase to lowercase.

vc-spec: |-
  method flip_case(input: string) returns (result: string)
    requires forall i :: 0 <= i < |input| ==> isAlpha(input[i])
    ensures |result| == |input|
    ensures forall i :: 0 <= i < |input| ==> (isLower(input[i]) ==> isUpper(result[i])) && (isUpper(input[i]) ==> isLower(result[i]))

vc-code: |-
  {
    result := "";
    var i := 0;
    while i < |input|
      invariant 0 <= i <= |input|
      invariant |result| == i
      invariant forall k :: 0 <= k < i ==> (isLower(input[k]) ==> isUpper(result[k])) && (isUpper(input[k]) ==> isLower(result[k]))
    {
      result := result + [flipChar(input[i])];
      i := i + 1;
    }
  }

vc-postamble: |-


