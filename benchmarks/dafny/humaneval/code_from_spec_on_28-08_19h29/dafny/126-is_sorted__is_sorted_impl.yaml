vc-preamble: |-


vc-helpers: |-
  // Helper function to count occurrences of x in sequence a
  function CountOccurrences(a: seq<int>, x: int): int {
    |set i | 0 <= i < |a| && a[i] == x|
  }

vc-description: |-
  function_signature: method is_sorted(a: seq<int>) returns (f: bool)
  Sort elements. Ensures: the condition holds for all values.

vc-spec: |-
  method is_sorted(a: seq<int>) returns (f: bool)
    ensures f == forall i, j :: 0 <= i <= j < |a| ==> a[i] <= a[j]

vc-code: |-
  {
    if |a| <= 1 {
      return true;
    }
    for i := 0 to |a| - 1
      invariant forall k, m :: 0 <= k <= m <= i < |a| ==> a[k] <= a[m]
    {
      if a[i] > a[i+1] {
        return false;
      }
    }
    return true;
  }

vc-postamble: |-
  method count_sorted(a: seq<int>, x: int, pos: int) returns (count: int)
    // pre-conditions-start
    requires forall i, j :: 0 <= i <= j < |a| ==> a[i] <= a[j]
    requires 0 <= pos < |a|
    requires a[pos] == x
    requires pos == 0 || a[pos - 1] < x
    // pre-conditions-end
    // post-conditions-start
    ensures count == count_set(a, x)
    // post-conditions-end
  {
    assume{:axiom} false;
  }
  function count_set(a: seq<int>, x: int): int {
    |set i | 0 <= i < |a| && a[i] == x|
  }
  // pure-end

