vc-preamble: |-
  function CalcBal(s: seq<int>, i: int, j: int) : int 
      requires 0 <= i <= j <= |s|
  {
      if i == j then 0
      else (if s[j - 1] == 0 then 1 else -1) + CalcBal(s, i, j - 1)
  }

vc-helpers: |-
  function SeqToBalance(s: seq<char>, i: int, j: int): int
      requires 0 <= i <= j <= |s|
  {
      if i == j then 0
      else (if s[j - 1] == '<' then 1 else -1) + SeqToBalance(s, i, j - 1)
  }
  
  lemma BalanceNonNegative(s: seq<char>, i: int, j: int)
      requires 0 <= i <= j <= |s|
      requires forall k :: i <= k < j ==> s[k] == '<' || s[k] == '>'
      ensures SeqToBalance(s, i, j) >= 0 ==> (forall m :: i <= m <= j ==> SeqToBalance(s, i, m) >= 0)
  {
      if i == j {
      } else {
          var bal := SeqToBalance(s, i, j);
          var prevBal := SeqToBalance(s, i, j - 1);
          if bal >= 0 {
              assert prevBal >= bal - 1;
              if s[j - 1] == '<' {
                  assert bal == prevBal + 1;
                  assert prevBal >= 0;
              } else {
                  assert bal == prevBal - 1;
                  assert prevBal >= 1;
                  assert prevBal >= 0;
              }
              BalanceNonNegative(s, i, j - 1);
          }
      }
  }

vc-description: |-
  function_signature: def correct_bracketing(brackets: str) -> Bool
  brackets is a string of "<" and ">". return True if every opening bracket has a corresponding closing bracket, i.e., (each open bracket is properly closed)

vc-spec: |-
  method CorrectBracketing(brackets: string) returns (result: bool)
      requires forall i :: 0 <= i < |brackets| ==> brackets[i] == '<' || brackets[i] == '>'
      ensures result == (SeqToBalance(brackets, 0, |brackets|) == 0 && forall m :: 0 <= m <= |brackets| ==> SeqToBalance(brackets, 0, m) >= 0)

vc-code: |-
  {
      var balance := 0;
      var i := 0;
      while i < |brackets|
          invariant 0 <= i <= |brackets|
          invariant balance == SeqToBalance(brackets, 0, i)
          invariant balance >= 0
          invariant forall m :: 0 <= m <= i ==> SeqToBalance(brackets, 0, m) >= 0
      {
          if brackets[i] == '<' {
              balance := balance + 1;
          } else {
              balance := balance - 1;
          }
          if balance < 0 {
              return false;
          }
          i := i + 1;
      }
      if balance == 0 {
          BalanceNonNegative(brackets, 0, |brackets|);
          result := true;
      } else {
          result := false;
      }
  }

vc-postamble: |-


