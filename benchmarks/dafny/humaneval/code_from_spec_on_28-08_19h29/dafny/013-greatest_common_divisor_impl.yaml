vc-preamble: |-
  // recursive version should be more promising

vc-helpers: |-
  // No additional helpers needed for this implementation

vc-description: |-
  function_signature: def greatest_common_divisor(a: int, b: int) -> int
  Return a greatest common divisor of two integers a and b

vc-spec: |-
  method greatest_common_divisor(a: int, b: int) returns (gcd: int)
    requires a >= 0 && b >= 0
    ensures gcd >= 0
    ensures exists k: int, m: int :: a == k * gcd && b == m * gcd
    ensures forall k: int :: (exists m: int, n: int :: a == m * k && b == n * k) ==> k <= gcd

vc-code: |-
  {
    if b == 0 {
      return a;
    } else {
      var r := a % b;
      var result := greatest_common_divisor(b, r);
      return result;
    }
  }

vc-postamble: |-


