vc-preamble: |-
  function sum(s: seq<int>) : int {
    if |s| == 0 then 0 else s[0] + sum(s[1..])
  }
  function select_at_most_two_digits_rec(arr: seq<int>): seq<int>
    requires |arr| >= 0 && |arr| <= 100
  {
    if |arr| == 0 then []
    else if 0 <= arr[0] < 100 then [arr[0]] + select_at_most_two_digits_rec(arr[1..])
    else select_at_most_two_digits_rec(arr[1..])
  }
  method select_at_most_two_digits(arr: seq<int>) returns (result: seq<int>)
    // pre-conditions-start
    requires |arr| > 0 && |arr| <= 100
    // pre-conditions-end
    // post-conditions-start
    ensures forall i :: 0 <= i < |result| ==> 0 <= result[i] < 100
    ensures forall i :: 0 <= i < |result| ==> result[i] in arr
    ensures result == select_at_most_two_digits_rec(arr)
    // post-conditions-end
  {
    assume{:axiom} false;
  }

vc-helpers: |-
  function SumTwoDigits(arr: seq<int>): int
    requires |arr| >= 0 && |arr| <= 100
  {
    if |arr| == 0 then 0
    else if 0 <= arr[0] < 100 then arr[0] + SumTwoDigits(arr[1..])
    else SumTwoDigits(arr[1..])
  }
  
  lemma SumTwoDigitsEqualsSumSelect(arr: seq<int>)
    requires |arr| >= 0 && |arr| <= 100
    ensures SumTwoDigits(arr) == sum(select_at_most_two_digits_rec(arr))
  {
    if |arr| == 0 {
      assert SumTwoDigits(arr) == 0;
      assert sum(select_at_most_two_digits_rec(arr)) == 0;
    } else {
      if 0 <= arr[0] < 100 {
        calc {
          SumTwoDigits(arr);
          arr[0] + SumTwoDigits(arr[1..]);
          { SumTwoDigitsEqualsSumSelect(arr[1..]); }
          arr[0] + sum(select_at_most_two_digits_rec(arr[1..]));
          sum([arr[0]] + select_at_most_two_digits_rec(arr[1..]));
          sum(select_at_most_two_digits_rec(arr));
        }
      } else {
        calc {
          SumTwoDigits(arr);
          SumTwoDigits(arr[1..]);
          { SumTwoDigitsEqualsSumSelect(arr[1..]); }
          sum(select_at_most_two_digits_rec(arr[1..]));
          sum(select_at_most_two_digits_rec(arr));
        }
      }
    }
  }

vc-description: |-
  function_signature: method SumElementsWithAtMostTwoDigits(arr: seq<int>, k: int) returns (s: int)
  Calculate sum. Requires: the size is bounded; the size is bounded. Ensures: selects only numbers with at most two digits.

vc-spec: |-
  method SumElementsWithAtMostTwoDigits(arr: seq<int>, k: int) returns (s: int)
    requires |arr| > 0 && |arr| <= 100
    requires 1 <= k <= |arr|
    ensures s == SumTwoDigits(arr[..k])

vc-code: |-
  {
    var result := select_at_most_two_digits(arr[..k]);
    s := sum(result);
    SumTwoDigitsEqualsSumSelect(arr[..k]);
  }

vc-postamble: |-


