vc-preamble: |-
  method checkSubstring(s: string, sub: string) returns (result: bool)
  {
    assume{:axiom} false;
  }

vc-helpers: |-
  // Helper predicate to check if a substring exists in a string
  predicate containsSubstring(s: string, sub: string)
  {
    exists i {:trigger s[i..i+|sub|]} :: 0 <= i <= |s| - |sub| && s[i..i+|sub|] == sub
  }

vc-description: |-
  function_signature: method filter_by_substring(strings: seq<string>, substring: string) returns (res : seq<string>)
  Filter elements. Ensures: the size is bounded; the condition holds for all values.

vc-spec: |-
  method filter_by_substring(strings: seq<string>, substring: string) returns (res: seq<string>)
    requires |strings| >= 0
    ensures |res| <= |strings|
    ensures forall i :: 0 <= i < |res| ==> containsSubstring(res[i], substring)
    ensures forall i :: 0 <= i < |strings| ==> (containsSubstring(strings[i], substring) ==> exists j :: 0 <= j < |res| && res[j] == strings[i])

vc-code: |-
  {
    var filtered: seq<string> := [];
    var i := 0;
    while i < |strings|
      invariant 0 <= i <= |strings|
      invariant |filtered| <= i
      invariant forall k :: 0 <= k < |filtered| ==> containsSubstring(filtered[k], substring)
      invariant forall k :: 0 <= k < i ==> (containsSubstring(strings[k], substring) ==> exists j :: 0 <= j < |filtered| && filtered[j] == strings[k])
    {
      if containsSubstring(strings[i], substring) {
        filtered := filtered + [strings[i]];
      }
      i := i + 1;
    }
    res := filtered;
  }

vc-postamble: |-


