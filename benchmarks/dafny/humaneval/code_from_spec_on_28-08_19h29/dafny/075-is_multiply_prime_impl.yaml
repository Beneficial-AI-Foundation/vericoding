vc-preamble: |-
  function Prime(p: nat) : bool
  {
      p > 1 &&
      forall k :: 1 < k < p ==> p % k != 0
  }

vc-helpers: |-
  function IsPrime(p: nat): bool
  {
      p > 1 &&
      forall k :: 1 < k < p ==> p % k != 0
  }
  
  // Helper method to check if a number can be expressed as a product of three primes
  method CheckProductOfThreePrimes(a: nat) returns (result: bool, p1: nat, p2: nat, p3: nat)
      ensures result ==> IsPrime(p1) && IsPrime(p2) && IsPrime(p3) && a == p1 * p2 * p3
      ensures !result ==> p1 == 0 && p2 == 0 && p3 == 0
  {
      if a < 8 {
          return false, 0, 0, 0;
      }
      var i := 2;
      while i <= a
          invariant i <= a + 1
      {
          if IsPrime(i) {
              var j := i;
              while j <= a
                  invariant j <= a + 1
              {
                  if IsPrime(j) {
                      var k := j;
                      while k <= a
                          invariant k <= a + 1
                      {
                          if IsPrime(k) {
                              if i * j * k == a {
                                  return true, i, j, k;
                              }
                              if i * j * k > a {
                                  break;
                              }
                          }
                          k := k + 1;
                      }
                      if i * j > a {
                          break;
                      }
                  }
                  j := j + 1;
              }
              if i * i * i > a {
                  break;
              }
          }
          i := i + 1;
      }
      return false, 0, 0, 0;
  }

vc-description: |-
  function_signature: def is_multiply_prime(a: int) -> bool
  Write a function that returns true if the given number is the multiplication of 3 prime numbers and false otherwise. Knowing that (a) is less then 100.

vc-spec: |-
  method is_multiply_prime(a: int) returns (result: bool)
      requires 0 < a < 100
      ensures result ==> exists p1, p2, p3: nat :: IsPrime(p1) && IsPrime(p2) && IsPrime(p3) && a == p1 * p2 * p3
      ensures !result ==> !exists p1, p2, p3: nat :: IsPrime(p1) && IsPrime(p2) && IsPrime(p3) && a == p1 * p2 * p3

vc-code: |-
  {
      var n := a as nat;
      var found, p1, p2, p3 := CheckProductOfThreePrimes(n);
      result := found;
  }

vc-postamble: |-


