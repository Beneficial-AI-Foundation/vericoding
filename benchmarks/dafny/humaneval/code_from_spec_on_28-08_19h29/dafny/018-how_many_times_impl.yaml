vc-preamble: |-


vc-helpers: |-
  // Helper function to check if substring matches at a given position
  ghost predicate MatchesAt(s: string, sub: string, start: int)
  {
    |sub| <= |s| - start &&
    forall i :: 0 <= i < |sub| ==> s[start + i] == sub[i]
  }

vc-description: |-
  function_signature: def how_many_times(string: str, substring: str) -> int
  Find how many times a given substring can be found in the original string. Count overlaping cases.

vc-spec: |-
  method HowManyTimes(s: string, sub: string) returns (count: int)
    requires |sub| > 0
    ensures count >= 0
    ensures count == |set i: int | 0 <= i <= |s| - |sub| && MatchesAt(s, sub, i)|

vc-code: |-
  {
    count := 0;
    if |sub| > |s| {
      return;
    }
    var i := 0;
    while i <= |s| - |sub|
      invariant 0 <= i <= |s| - |sub| + 1
      invariant count == |set j: int | 0 <= j < i && MatchesAt(s, sub, j)|
    {
      if MatchesAt(s, sub, i) {
        count := count + 1;
      }
      i := i + 1;
    }
  }

vc-postamble: |-


