vc-preamble: |-
  method maximum(s: seq<int>, k: int) returns (result: seq<int>)
    // pre-conditions-start
    requires 1 <= k <= |s|
    requires 1 <= |s| <= 1000
    requires forall x :: x in s ==> -1000 <= x <= 1000
    // pre-conditions-end
    // post-conditions-start
    ensures |result| == k
    ensures forall i, j :: 0 <= i < j < k ==> result[i] <= result[j]
    ensures forall x :: x in result ==> x in s
    // post-conditions-end
  {
    assume{:axiom} false;
  }

vc-helpers: |-
  // Helper predicate to check if a sequence is sorted in non-decreasing order
  predicate IsSorted(s: seq<int>)
  {
    forall i, j :: 0 <= i < j < |s| ==> s[i] <= s[j]
  }
  
  // Helper predicate to check if two sequences are permutations of each other
  predicate IsPermutation(s1: seq<int>, s2: seq<int>)
  {
    |s1| == |s2| &&
    multiset(s1) == multiset(s2)
  }

vc-description: |-
  function_signature: method SortSeq(s: seq<int>) returns (sorted: seq<int>)
  Sort elements. Ensures: the result is sorted according to the ordering relation; returns the correct size/count; returns a sorted permutation of the input; the result is sorted according to the ordering relation; the result is sorted according to the ordering relation; the result is sorted according to the ordering relation; the result is sorted according to the ordering relation.

vc-spec: |-
  method SortSeq(s: seq<int>) returns (sorted: seq<int>)
    requires |s| >= 0
    ensures |sorted| == |s|
    ensures IsSorted(sorted)
    ensures IsPermutation(s, sorted)

vc-code: |-
  {
    if |s| <= 1 {
      return s;
    }
    
    var result := s;
    var n := |result|;
    var i := 0;
    
    while i < n - 1
      invariant 0 <= i <= n - 1
      invariant forall k, l :: 0 <= k < l <= i ==> result[k] <= result[l]
      invariant IsPermutation(s, result)
    {
      var minIndex := i;
      var j := i + 1;
      
      while j < n
        invariant i <= j <= n
        invariant i <= minIndex < n
        invariant forall k :: i <= k < j ==> result[minIndex] <= result[k]
        invariant IsPermutation(s, result)
      {
        if result[j] < result[minIndex] {
          minIndex := j;
        }
        j := j + 1;
      }
      
      if minIndex != i {
        var temp := result[i];
        result := result[i := result[minIndex]];
        result := result[minIndex := temp];
      }
      
      i := i + 1;
    }
    
    return result;
  }

vc-postamble: |-


