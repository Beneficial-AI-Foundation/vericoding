vc-preamble: |-
  method cube_root(N: nat) returns (r: nat)
    // post-conditions-start
    ensures cube(r) <= N < cube(r + 1)
    ensures r <= N
    // post-conditions-end
  {
    assume{:axiom} false;
  }

vc-helpers: |-
  function cube(n: int): int 
  {
    n * n * n
  }

vc-description: |-
  function_signature: method is_cube(n: nat) returns (r: bool)
  Check if condition holds. Ensures: if true, then there exists an integer r such that N = r³; if false, then no integer r satisfies N = r³.

vc-spec: |-
  method is_cube(n: nat) returns (r: bool)
    ensures r ==> exists k: nat :: cube(k) == n
    ensures !r ==> forall k: nat :: cube(k) != n

vc-code: |-
  {
    var k: nat := 0;
    while k * k * k < n
      invariant k * k * k <= n
    {
      k := k + 1;
    }
    if k * k * k == n {
      return true;
    } else {
      return false;
    }
  }

vc-postamble: |-
  function cube(n: int): int { n * n * n }
  // pure-end

