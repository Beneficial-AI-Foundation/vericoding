vc-preamble: |-
  function psum(s: seq<int>): int
  {
      if |s| == 0 then 0
      else psum(s[..(|s|)-1]) + s[ |s| - 1 ]
  }

vc-helpers: |-
  // Helper predicate to check if balance goes below zero at any point in the sequence
  ghost predicate BelowZeroAtAnyPoint(s: seq<int>)
  {
      exists i :: 0 <= i < |s| && psum(s[..i+1]) < 0
  }
  
  // Lemma to help prove prefix sum properties
  lemma PrefixSumUpdate(s: seq<int>, i: int)
      requires 0 <= i < |s|
      ensures psum(s[..i+1]) == if i == 0 then s[0] else psum(s[..i]) + s[i]
  {
      if i == 0 {
      } else {
          PrefixSumUpdate(s, i-1);
      }
  }

vc-description: |-
  function_signature: def below_zero(operations: List[int]) -> bool
  You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account fallls below zero, and at that point function should return True. Otherwise it should return False.

vc-spec: |-
  method below_zero(operations: seq<int>) returns (result: bool)
      ensures result == BelowZeroAtAnyPoint(operations)

vc-code: |-
  {
      var balance := 0;
      var i := 0;
      var res := false;
      while i < |operations|
          invariant 0 <= i <= |operations|
          invariant balance == if i == 0 then 0 else psum(operations[..i])
          invariant res ==> BelowZeroAtAnyPoint(operations[..i])
          decreases |operations| - i
      {
          balance := balance + operations[i];
          if balance < 0 {
              res := true;
              return true;
          }
          i := i + 1;
      }
      return res;
  }

vc-postamble: |-


