vc-preamble: |-


vc-helpers: |-
  function countBits(n: nat): nat {
    if n == 0 then 0 else n % 2 + countBits(n / 2)
  }
  
  function intToBinary(n: nat): string {
    if n == 0 then "0"
    else if n == 1 then "1"
    else intToBinary(n / 2) + if n % 2 == 0 then "0" else "1"
  }

vc-description: |-
  function_signature: def solve(n: int) -> str
  Given a positive integer N, return the total sum of its digits in binary.

vc-spec: |-
  method solve(n: int) returns (result: string)
    requires n > 0
    ensures result == intToBinary(countBits(n as nat))

vc-code: |-
  {
    var decimalSum := countBits(n as nat);
    result := intToBinary(decimalSum);
  }

vc-postamble: |-
  function popcount(n: nat): nat {
    if n == 0 then 0 else n % 2 + popcount(n / 2)
  }
  // pure-end

