vc-preamble: |-
  function is_palindrome(s : string) : bool {
      forall k :: 0 <= k < |s| ==> s[k] == s[|s| - 1 - k]
  }
  function starts_with(result : string, s : string) : bool {
      |result| >= |s| && forall k :: 0 <= k < |s| ==> result[k] == s[k]
  }

vc-helpers: |-
  // No additional helpers needed beyond the provided functions.

vc-description: |-
  function_signature: method make_palindrome(s: string) returns (result: string)
  Process input. Ensures: the size is bounded; the result is a palindrome; ensures starts_with(result, s).

vc-spec: |-
  method make_palindrome(s: string) returns (result: string)
      ensures |result| <= 2 * |s|
      ensures is_palindrome(result)
      ensures starts_with(result, s)

vc-code: |-
  {
      var rev := reverse(s);
      result := s + rev;
  }

vc-postamble: |-
  method reverse(str: string) returns (rev: string)
      // post-conditions-start
      ensures |rev| == |str|
      ensures forall k :: 0 <= k < |str| ==> rev[k] == str[|str| - 1 - k]
      // post-conditions-end
  {
    assume{:axiom} false;
  }

