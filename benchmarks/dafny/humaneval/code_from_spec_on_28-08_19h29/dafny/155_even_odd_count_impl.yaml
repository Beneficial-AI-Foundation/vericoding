vc-preamble: |-


vc-helpers: |-
  function OddCount(n: nat): nat {
    if n == 0 then 0
    else OddCount(n / 10) + n % 2
  }
  
  function EvenCount(n: nat): nat {
    if n == 0 then 0
    else EvenCount(n / 10) + (1 - n % 2)
  }

vc-description: |-
  function_signature: method even_odd_count(n: nat) returns (even: nat, odd: nat)
  Given an integer, return a tuple that has the number of even and odd digits respectively.

vc-spec: |-
  method even_odd_count(n: nat) returns (even: nat, odd: nat)
    ensures even == EvenCount(n)
    ensures odd == OddCount(n)

vc-code: |-
  {
    if n == 0 {
      return 0, 0;
    }
    var e := 0;
    var o := 0;
    var num := n;
    while num > 0
      invariant e == EvenCount(n) - EvenCount(num)
      invariant o == OddCount(n) - OddCount(num)
    {
      var digit := num % 10;
      if digit % 2 == 0 {
        e := e + 1;
      } else {
        o := o + 1;
      }
      num := num / 10;
    }
    return e, o;
  }

vc-postamble: |-
  function odd_count(n: nat): nat {
    if n == 0 then 0
    else odd_count(n / 10) + n % 2
  }
  // pure-end
  function even_count(n: nat): nat
  {
    if n == 0 then 0
    else even_count(n / 10) + (1 - n % 2)
  }
  // pure-end

