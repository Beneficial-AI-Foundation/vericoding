vc-preamble: |-


vc-helpers: |-


vc-description: |-
  function_signature: method even_odd_count(n: nat) returns (even: nat, odd: nat)
  Given an integer, return a tuple that has the number of even and odd digits respectively.

vc-spec: |-
  method even_odd_count(n: nat) returns (even: nat, odd: nat)
    // pre-conditions-start
    requires n > 0
    // pre-conditions-end
    // post-conditions-start
    ensures even == even_count(n)
    ensures odd == odd_count(n)
    // post-conditions-end

vc-code: |-
  {
    even := 0;
    odd := 0;
    var temp := n;
    
    while temp > 0
      invariant even == even_count(n) - even_count(temp)
      invariant odd == odd_count(n) - odd_count(temp)
      decreases temp
    {
      var digit := temp % 10;
      if digit % 2 == 0 {
        even := even + 1;
      } else {
        odd := odd + 1;
      }
      temp := temp / 10;
    }
  }

vc-postamble: |-
  function odd_count(n: nat): nat {
    if n == 0 then 0
    else odd_count(n / 10) + n % 2
  }
  // pure-end
  function even_count(n: nat): nat
  {
    if n == 0 then 0
    else even_count(n / 10) + (1 - n % 2)
  }
  // pure-end

