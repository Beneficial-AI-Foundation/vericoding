vc-preamble: |-


vc-helpers: |-
  lemma SmallestEvenExists(nodes: seq<int>, minVal: int, minIndex: int)
    requires forall i :: 0 <= i < |nodes| ==> nodes[i] >= 0
    requires 0 <= minIndex < |nodes|
    requires nodes[minIndex] == minVal
    requires minVal % 2 == 0
    requires forall i :: 0 <= i < |nodes| && nodes[i] % 2 == 0 ==> minVal <= nodes[i]
    requires forall i :: 0 <= i < minIndex ==> nodes[i] % 2 != 0 || nodes[i] > minVal
    ensures forall i :: 0 <= i < |nodes| && nodes[i] % 2 == 0 ==> minVal <= nodes[i]
    ensures forall i :: 0 <= i < minIndex ==> nodes[i] % 2 != 0 || nodes[i] > minVal
  {
  }

vc-description: |-
  function_signature: def pluck(numbers: List[Int]) -> List[Int]
  Given an array representing a branch of a tree that has non-negative integer nodes your task is to pluck one of the nodes and return it. The plucked node should be the node with the smallest even value. If multiple nodes with the same smallest even value are found return the node that has smallest index.

vc-spec: |-
  method PluckSmallestEven(nodes: seq<int>) returns (result: seq<int>)
    // pre-conditions-start
    requires |nodes| <= 10000
    requires forall i :: 0 <= i < |nodes| ==> nodes[i] >= 0
    // pre-conditions-end
    // post-conditions-start
    ensures |result| == 0 || |result| == 2
    ensures |result| == 2 ==> 0 <= result[1] < |nodes| && nodes[result[1]] == result[0]
    ensures |result| == 2 ==> result[0] % 2 == 0
    ensures |result| == 2 ==> forall i :: 0 <= i < |nodes| && nodes[i] % 2 == 0 ==> result[0] <= nodes[i]
    ensures |result| == 2 ==> forall i :: 0 <= i < result[1] ==> nodes[i] % 2 != 0 || nodes[i] > result[0]
    ensures |result| == 0 ==> forall i :: 0 <= i < |nodes| ==> nodes[i] % 2 != 0
    // post-conditions-end

vc-code: |-
  {
    var minVal: int := -1;
    var minIndex: int := -1;
    var hasEven: bool := false;
    
    var i := 0;
    while i < |nodes|
      invariant 0 <= i <= |nodes|
      invariant hasEven ==> 0 <= minIndex < i
      invariant hasEven ==> nodes[minIndex] == minVal
      invariant hasEven ==> minVal % 2 == 0
      invariant hasEven ==> forall j :: 0 <= j < i && nodes[j] % 2 == 0 ==> minVal <= nodes[j]
      invariant hasEven ==> forall j :: 0 <= j < minIndex ==> nodes[j] % 2 != 0 || nodes[j] > minVal
      invariant !hasEven ==> forall j :: 0 <= j < i ==> nodes[j] % 2 != 0
    {
      if nodes[i] % 2 == 0 {
        if !hasEven || nodes[i] < minVal {
          minVal := nodes[i];
          minIndex := i;
          hasEven := true;
        }
      }
      i := i + 1;
    }
    
    if hasEven {
      result := [minVal, minIndex];
    } else {
      result := [];
    }
  }

vc-postamble: |-


