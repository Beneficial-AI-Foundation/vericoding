vc-preamble: |-
  function power(x: nat, y: nat): nat {
      if y == 0 then 1 else x * power(x, y-1)
  }

vc-helpers: |-
  lemma power_monotonic(x: nat, y1: nat, y2: nat)
      requires x > 1
      requires y1 < y2
      ensures power(x, y1) < power(x, y2)
  {
      if y2 == y1 + 1 {
          assert power(x, y2) == x * power(x, y1);
      } else {
          power_monotonic(x, y1, y2 - 1);
          assert power(x, y2) == x * power(x, y2 - 1);
      }
  }
  
  lemma power_grows(x: nat, y: nat)
      requires x > 1
      requires y > 0
      ensures power(x, y) >= x
  {
      if y == 1 {
          assert power(x, 1) == x;
      } else {
          power_grows(x, y - 1);
          assert power(x, y) == x * power(x, y - 1);
      }
  }
  
  lemma power_witness_exists(x: nat, n: nat)
      requires x == 1
      requires n == 1
      ensures exists y :: n == power(x, y)
  {
      assert power(x, 0) == 1;
      assert n == power(x, 0);
  }
  
  lemma power_one_is_always_one(x: nat, y: nat)
      requires x == 1
      ensures power(x, y) == 1
  {
      if y == 0 {
          assert power(x, y) == 1;
      } else {
          power_one_is_always_one(x, y-1);
          assert power(x, y) == x * power(x, y-1) == 1 * power(x, y-1) == power(x, y-1) == 1;
      }
  }
  
  lemma power_witness_not_exists(x: nat, n: int)
      requires x == 1
      requires n != 1
      ensures !exists y :: n == power(x, y)
  {
      forall y: nat ensures power(x, y) == 1 {
          power_one_is_always_one(x, y);
      }
  }
  
  lemma power_at_least_one(x: nat, y: nat)
      ensures power(x, y) >= 1
  {
      if y == 0 {
          assert power(x, y) == 1;
      } else if x == 0 {
          power_at_least_one(x, y-1);
          assert power(x, y) == x * power(x, y-1) == 0 * power(x, y-1) == 0;
          assert false;
      } else {
          power_at_least_one(x, y-1);
          assert power(x, y-1) >= 1;
          assert power(x, y) == x * power(x, y-1) >= 1 * power(x, y-1) == power(x, y-1) >= 1;
      }
  }
  
  lemma power_witness_not_exists_negative(x: nat, n: int)
      requires n <= 0
      ensures !exists y :: n == power(x, y)
  {
      forall y: nat ensures power(x, y) >= 1 {
          power_at_least_one(x, y);
      }
  }
  
  lemma power_beyond_bound(x: nat, n: nat, exp: nat)
      requires x > 1
      requires exp > 0
      requires power(x, exp) > n
      ensures forall k :: k > exp ==> power(x, k) > n
  {
      forall k | k > exp ensures power(x, k) > n {
          power_monotonic(x, exp, k);
          assert power(x, k) > power(x, exp) > n;
      }
  }

vc-description: |-
  function_signature: def is_simple_power(x: int, n: int) -> bool
  Your task is to write a function that returns true if a number x is a simple power of n and false in other cases. x is a simple power of n if n**int=x

vc-spec: |-
  method is_simple_power(x: nat, n: int) returns (ans : bool)
      // pre-conditions-start
      requires x > 0
      // pre-conditions-end
      // post-conditions-start
      ensures ans <==> exists y :: n == power(x, y)
      // post-conditions-end

vc-code: |-
  {
      if x == 1 {
          if n == 1 {
              power_witness_exists(x, n);
              ans := true;
          } else {
              power_witness_not_exists(x, n);
              ans := false;
          }
          return;
      }
      
      if n <= 0 {
          power_witness_not_exists_negative(x, n);
          ans := false;
          return;
      }
      
      if n == 1 {
          assert power(x, 0) == 1;
          ans := true;
          return;
      }
      
      var current_power := 1;
      var exponent := 0;
      
      while current_power < n
          invariant current_power == power(x, exponent)
          invariant forall k :: 0 <= k < exponent ==> power(x, k) != n
          invariant current_power < n ==> current_power < power(x, exponent + 1)
          decreases n - current_power
      {
          exponent := exponent + 1;
          current_power := current_power * x;
      }
      
      if current_power == n {
          ans := true;
      } else {
          ans := false;
          assert current_power > n;
          assert forall k :: 0 <= k < exponent ==> power(x, k) != n;
          assert power(x, exponent) > n;
          if x > 1 && exponent > 0 {
              power_beyond_bound(x, n, exponent);
              assert forall k :: k > exponent ==> power(x, k) > n;
          }
          assert forall k :: power(x, k) != n;
      }
  }

vc-postamble: |-


