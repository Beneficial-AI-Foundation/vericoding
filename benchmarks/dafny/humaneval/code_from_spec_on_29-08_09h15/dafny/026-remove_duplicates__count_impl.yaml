vc-preamble: |-
  function count_rec(a: seq<int>, x: int): int {
    if |a| == 0 then 0
    else count_rec(a[1..], x) + (if a[0] == x then 1 else 0)
  }
  method remove_duplicates(a: seq<int>) returns (result: seq<int>)
    // pre-conditions-start
    requires forall i :: 0 <= i < |a| ==> count_rec(a, a[i]) >= 1
    // pre-conditions-end
    // post-conditions-start
    ensures forall i :: 0 <= i < |result| ==> count_rec(a, result[i]) == 1
    ensures forall i :: 0 <= i < |a| ==> (a[i] in result <==> count_rec(a, a[i]) == 1)
    // post-conditions-end
  {
    assume{:axiom} false;
  }

vc-helpers: |-
  lemma count_rec_property(a: seq<int>, x: int)
    ensures count_rec(a, x) == |set i | 0 <= i < |a| && a[i] == x|
  {
    if |a| == 0 {
      assert a == [];
      assert (set i | 0 <= i < |a| && a[i] == x) == {};
    } else {
      var tail := a[1..];
      count_rec_property(tail, x);
      
      var tail_set := set i | 0 <= i < |tail| && tail[i] == x;
      var full_set := set i | 0 <= i < |a| && a[i] == x;
      
      if a[0] == x {
        var head_set := {0};
        var shifted_tail_set := set i | 1 <= i < |a| && a[i] == x;
        assert full_set == head_set + shifted_tail_set;
        assert |full_set| == 1 + |shifted_tail_set|;
        
        assert forall i {:trigger (i+1) in shifted_tail_set} :: (i+1) in shifted_tail_set <==> (0 <= i < |tail| && a[i+1] == x);
        
        assert forall i :: i in tail_set <==> (i+1) in shifted_tail_set;
        assert |shifted_tail_set| == |tail_set|;
      } else {
        var shifted_tail_set := set i | 1 <= i < |a| && a[i] == x;
        assert full_set == shifted_tail_set;
        assert |full_set| == |shifted_tail_set|;
        
        assert forall i {:trigger (i+1) in shifted_tail_set} :: (i+1) in shifted_tail_set <==> (0 <= i < |tail| && a[i+1] == x);
        
        assert forall i :: i in tail_set <==> (i+1) in shifted_tail_set;
        assert |shifted_tail_set| == |tail_set|;
      }
    }
  }

vc-description: |-
  function_signature: method count(a: seq<int>, x: int) returns (cnt: int)
  Count occurrences. Ensures: returns the correct count; returns the correct count.

vc-spec: |-
  method count(a: seq<int>, x: int) returns (cnt: int)
    // post-conditions-start
    ensures cnt == |set i | 0 <= i < |a| && a[i] == x|
    ensures cnt == count_rec(a, x)
    // post-conditions-end

vc-code: |-
  {
    cnt := 0;
    var i := 0;
    
    while i < |a|
      invariant 0 <= i <= |a|
      invariant cnt == |set j | 0 <= j < i && a[j] == x|
    {
      if a[i] == x {
        cnt := cnt + 1;
      }
      i := i + 1;
    }
    
    count_rec_property(a, x);
  }

vc-postamble: |-


