vc-preamble: |-


vc-helpers: |-
  lemma ReversePreservesLength(s: string)
    ensures |reverse_func(s)| == |s|
  {
  }
  
  lemma ReverseCorrectness(s: string, i: int)
    requires 0 <= i < |s|
    ensures reverse_func(s)[i] == s[|s| - 1 - i]
  {
  }
  
  function reverse_func(s: string): string
    ensures |reverse_func(s)| == |s|
    ensures forall k :: 0 <= k < |s| ==> reverse_func(s)[k] == s[|s| - 1 - k]
  {
    if |s| == 0 then ""
    else reverse_func(s[1..]) + [s[0]]
  }

vc-description: |-
  function_signature: method solve(s: string) returns (t: string)
  Process input. Ensures: returns the correct size/count; the condition holds for all values; there exists a value satisfying the condition.

vc-spec: |-
  method solve(s: string) returns (t: string)
    // post-conditions-start 
    ensures |s| == |t|
    ensures (forall i :: 0 <= i < |s| ==> !is_alpha(s[i])) ==> (forall i :: 0 <= i < |s| ==> s[i] == t[|t| - 1 - i])
    ensures (exists i :: 0 <= i < |s| && is_alpha(s[i])) ==> 
      (forall i :: 0 <= i < |t| ==> if is_alpha(s[i]) then t[i] == flip_case(s[i]) else t[i] == s[i])
    // post-conditions-end

vc-code: |-
  {
    var hasAlpha := false;
    var i := 0;
    
    while i < |s|
      invariant 0 <= i <= |s|
      invariant hasAlpha <==> (exists j :: 0 <= j < i && is_alpha(s[j]))
    {
      if is_alpha(s[i]) {
        hasAlpha := true;
      }
      i := i + 1;
    }
    
    if hasAlpha {
      t := "";
      i := 0;
      while i < |s|
        invariant 0 <= i <= |s|
        invariant |t| == i
        invariant forall j :: 0 <= j < i ==> 
          (if is_alpha(s[j]) then t[j] == flip_case(s[j]) else t[j] == s[j])
      {
        if is_alpha(s[i]) {
          t := t + [flip_case(s[i])];
        } else {
          t := t + [s[i]];
        }
        i := i + 1;
      }
    } else {
      t := reverse_func(s);
    }
  }

vc-postamble: |-
  method reverse(s: string) returns (rev: string)
    // pre-conditions-start
    ensures |rev| == |s|
    ensures forall k :: 0 <= k < |s| ==> rev[k] == s[|s| - 1 - k]
    // pre-conditions-end
  {
    assume{:axiom} false;
  }
  function is_alpha(c: char) : bool {
    'a' <= c <= 'z' || 'A' <= c <= 'Z'
  }
  // pure-end
  function flip_case(c: char): (flipped: char)
    requires is_alpha(c)
    ensures is_alpha(flipped)
  {
    if 'a' <= c <= 'z' then c - 'a' + 'A' else c - 'A' + 'a'
  }
  // pure-end

