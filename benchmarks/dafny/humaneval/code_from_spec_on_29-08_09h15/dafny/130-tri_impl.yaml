vc-preamble: |-
  function tri(n: nat): nat
    decreases if n % 2 == 0 then 0 else n
  {
    if n == 1 then 3
    else if n % 2 == 0 then 1 + n / 2
    else tri(n - 1) + tri(n - 2) + tri(n + 1)
  }

vc-helpers: |-
  function tri0(): nat { 1 }
  
  lemma TriBaseCase()
    ensures tri(0) == tri0()
  {
    assert tri(0) == 1 + 0 / 2 == 1;
    assert tri0() == 1;
  }

vc-description: |-
  function_signature: def tri(n: int) -> List[int]
  Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in the last couple centuries. However, what people don't know is Tribonacci sequence. Tribonacci sequence is defined by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd. For example: tri(2) = 1 + (2 / 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 You are given a non-negative integer number n, you have to a return a list of the first n + 1 numbers of the Tribonacci sequence.

vc-spec: |-
  method Tribonacci(n: nat) returns (result: seq<nat>)
    // post-conditions-start
    ensures |result| == n + 1
    ensures forall i :: 0 <= i <= n ==> result[i] == tri(i)
    // post-conditions-end

vc-code: |-
  {
    if n == 0 {
      return [tri0()];
    }
    
    var arr := new nat[n + 1];
    
    TriBaseCase();
    arr[0] := tri0();
    
    if n >= 1 {
      arr[1] := 3;
    }
    
    var i := 2;
    while i <= n
      invariant 2 <= i <= n + 1
      invariant forall j :: 0 <= j < i ==> arr[j] == tri(j)
    {
      if i % 2 == 0 {
        arr[i] := 1 + i / 2;
      } else {
        arr[i] := arr[i - 1] + arr[i - 2] + (1 + (i + 1) / 2);
      }
      i := i + 1;
    }
    
    return arr[..];
  }

vc-postamble: |-


