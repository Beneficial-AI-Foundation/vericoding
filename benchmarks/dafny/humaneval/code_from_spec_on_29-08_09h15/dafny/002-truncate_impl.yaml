vc-preamble: |-


vc-helpers: |-
  function Floor(x: real): int
    requires x >= 0.0
  {
    if x < 1.0 then 0
    else 1 + Floor(x - 1.0)
  }
  
  lemma FloorProperties(x: real)
    requires x >= 0.0
    ensures Floor(x) as real <= x < (Floor(x) + 1) as real
  {
    if x < 1.0 {
      assert Floor(x) == 0;
      assert 0.0 <= x < 1.0;
    } else {
      FloorProperties(x - 1.0);
      assert Floor(x - 1.0) as real <= x - 1.0 < (Floor(x - 1.0) + 1) as real;
      assert Floor(x) == 1 + Floor(x - 1.0);
      assert Floor(x) as real <= x;
      assert x < (Floor(x) + 1) as real;
    }
  }

vc-description: |-
  function_signature: def truncate_number(number: float) -> float
  Given a positive floating point number, it can be decomposed into and integer part (largest integer smaller than given number) and decimals (leftover part always smaller than 1).

vc-spec: |-
  method truncate(x : real) returns (i : real)
      // pre-conditions-start
      requires x >= 0.0
      // pre-conditions-end
      // post-conditions-start
      ensures (0.0 <= x - i < 1.0)
      // post-conditions-end

vc-code: |-
  {
    FloorProperties(x);
    i := Floor(x) as real;
  }

vc-postamble: |-


