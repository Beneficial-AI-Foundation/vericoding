vc-preamble: |-
  method sort_array(s: seq<int>) returns (sorted: seq<int>)
    // post-conditions-start
    ensures |sorted| == |s|
    ensures |s| > 0 && (s[0] + s[|s| - 1]) % 2 == 0 ==>
      forall i, j :: 0 <= i < j < |sorted| ==> sorted[i] >= sorted[j]
    ensures |s| > 0 && (s[0] + s[|s| - 1]) % 2 != 0 ==>
      forall i, j :: 0 <= i < j < |sorted| ==> sorted[i] <= sorted[j]
    // post-conditions-end
  {
    assume{:axiom} false;
  }
  method reverse(s: seq<int>) returns (rev: seq<int>)
    // post-conditions-start
    ensures |rev| == |s|
    ensures forall k :: 0 <= k < |s| ==> rev[k] == s[|s| - 1 - k]
    // post-conditions-end
  {
    assume{:axiom} false;
  }

vc-helpers: |-
  lemma multiset_preserved_insert(s: seq<int>, x: int, pos: int)
    requires 0 <= pos <= |s|
    ensures multiset(s[..pos] + [x] + s[pos..]) == multiset(s) + multiset{x}
  {
    assert s == s[..pos] + s[pos..];
  }
  
  lemma sorted_insertion_maintains_order(s: seq<int>, x: int, pos: int)
    requires 0 <= pos <= |s|
    requires forall i, j :: 0 <= i < j < |s| ==> s[i] <= s[j]
    requires pos == 0 || s[pos-1] <= x
    requires pos == |s| || x <= s[pos]
    ensures forall i, j :: 0 <= i < j < |s[..pos] + [x] + s[pos..]| ==> 
      (s[..pos] + [x] + s[pos..])[i] <= (s[..pos] + [x] + s[pos..])[j]
  {
  }
  
  lemma multiset_slice_concat(s: seq<int>, i: int)
    requires 0 <= i < |s|
    ensures multiset(s[..i]) + multiset(s[i..i+1]) == multiset(s[..i+1])
  {
    assert s[..i+1] == s[..i] + s[i..i+1];
  }
  
  lemma multiset_full_slice(s: seq<int>)
    ensures multiset(s[..|s|]) == multiset(s)
  {
    assert s[..|s|] == s;
  }
  
  function find_insertion_pos(s: seq<int>, x: int): int
    requires forall i, j :: 0 <= i < j < |s| ==> s[i] <= s[j]
    ensures 0 <= find_insertion_pos(s, x) <= |s|
    ensures find_insertion_pos(s, x) == 0 || s[find_insertion_pos(s, x) - 1] <= x
    ensures find_insertion_pos(s, x) == |s| || x <= s[find_insertion_pos(s, x)]
  {
    if |s| == 0 then 0
    else if x <= s[0] then 0
    else if s[|s|-1] <= x then |s|
    else find_insertion_pos_helper(s, x, 0, |s|)
  }
  
  function find_insertion_pos_helper(s: seq<int>, x: int, lo: int, hi: int): int
    requires forall i, j :: 0 <= i < j < |s| ==> s[i] <= s[j]
    requires 0 <= lo < hi <= |s|
    requires lo == 0 || s[lo-1] <= x
    requires hi == |s| || x <= s[hi]
    ensures lo <= find_insertion_pos_helper(s, x, lo, hi) <= hi
    ensures find_insertion_pos_helper(s, x, lo, hi) == 0 || s[find_insertion_pos_helper(s, x, lo, hi) - 1] <= x
    ensures find_insertion_pos_helper(s, x, lo, hi) == |s| || x <= s[find_insertion_pos_helper(s, x, lo, hi)]
    decreases hi - lo
  {
    if hi - lo <= 1 then
      if lo < |s| && s[lo] < x then hi else lo
    else
      var mid := lo + (hi - lo) / 2;
      if s[mid] <= x then
        find_insertion_pos_helper(s, x, mid, hi)
      else
        find_insertion_pos_helper(s, x, lo, mid)
  }

vc-description: |-
  function_signature: method SortSeq(s: seq<int>) returns (sorted: seq<int>)
  Sort elements. Ensures: the result is sorted according to the ordering relation; returns the correct size/count; returns a sorted permutation of the input.

vc-spec: |-
  method SortSeq(s: seq<int>) returns (sorted: seq<int>)
    // post-conditions-start
    ensures forall i, j :: 0 <= i < j < |sorted| ==> sorted[i] <= sorted[j]
    ensures |sorted| == |s|
    ensures multiset(s) == multiset(sorted)
    // post-conditions-end

vc-code: |-
  {
    sorted := [];
    var i := 0;
    while i < |s|
      invariant 0 <= i <= |s|
      invariant |sorted| == i
      invariant forall k, l :: 0 <= k < l < |sorted| ==> sorted[k] <= sorted[l]
      invariant multiset(sorted) == multiset(s[..i])
    {
      var pos := find_insertion_pos(sorted, s[i]);
      var old_sorted := sorted;
      sorted := sorted[..pos] + [s[i]] + sorted[pos..];
      multiset_preserved_insert(old_sorted, s[i], pos);
      sorted_insertion_maintains_order(old_sorted, s[i], pos);
      assert multiset(sorted) == multiset(old_sorted) + multiset{s[i]};
      assert multiset(old_sorted) == multiset(s[..i]);
      assert multiset{s[i]} == multiset(s[i..i+1]);
      multiset_slice_concat(s, i);
      assert multiset(s[..i]) + multiset(s[i..i+1]) == multiset(s[..i+1]);
      i := i + 1;
    }
    multiset_full_slice(s);
    assert multiset(sorted) == multiset(s[..|s|]);
    assert multiset(s[..|s|]) == multiset(s);
  }

vc-postamble: |-


