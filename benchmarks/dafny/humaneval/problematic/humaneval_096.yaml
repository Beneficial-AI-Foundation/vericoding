vc-description: |-
  This verification task involves implementing a function that returns all prime numbers strictly less than a given non-negative integer n, in ascending order. The implementation should correctly identify prime numbers using a helper method and build the result sequence while maintaining the sorted order.

vc-preamble: |-
  
  predicate is_prime_number(num: int)
  {
      num >= 2 && forall k :: 2 <= k < num ==> num % k != 0
  }
  
  method is_prime(num: int) returns (prime: bool)
      requires num >= 0
      ensures prime == is_prime_number(num)
  {
      if num < 2 {
          prime := false;
      } else if num == 2 {
          prime := true;
      } else if num % 2 == 0 {
          prime := false;
      } else {
          prime := true;
          var i := 3;
          while i * i <= num
              invariant 3 <= i
              invariant i % 2 == 1
              invariant prime == (forall k :: 3 <= k < i && k % 2 == 1 ==> num % k != 0)
              invariant prime ==> (forall k :: 2 <= k < i ==> num % k != 0)
              invariant !prime ==> (exists k :: 2 <= k < num && num % k == 0)
          {
              if num % i == 0 {
                  prime := false;
                  break;
              }
              i := i + 2;
          }
  
          if prime {
              assert forall k :: 2 <= k < i ==> num % k != 0;
              assert i * i > num;
              assert forall k {:trigger k} :: i <= k < num ==> k >= i;
              assert forall k :: i <= k < num ==> k * k >= i * i > num;
              assert forall k :: i <= k < num ==> k > num / k;
              assert forall k :: i <= k < num ==> (num % k == 0 ==> num % (num / k) == 0 && 2 <= num / k < i);
              assert forall k :: 2 <= k < num ==> num % k != 0;
          }
      }
  }

vc-helpers: |-

vc-spec: |-
  method count_up_to(n: int) returns (result: seq<int>)
      requires n >= 0
      ensures forall i :: 0 <= i < |result| ==> is_prime_number(result[i])
      ensures forall i :: 0 <= i < |result| ==> result[i] < n
      ensures forall p :: 2 <= p < n && is_prime_number(p) ==> p in result
      ensures forall i, j :: 0 <= i < j < |result| ==> result[i] < result[j]

vc-code: |-
  {
      assume {:axiom} false;
    }
vc-postamble: |-
