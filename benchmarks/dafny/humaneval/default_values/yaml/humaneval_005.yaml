vc-description: |-
  This verification task involves implementing a method that inserts a delimiter between every two consecutive elements in a sequence of integers. The method should handle edge cases like empty sequences or single-element sequences, and for longer sequences, it should produce a result with alternating original elements and delimiters.

vc-preamble: |-
  
  predicate ValidInput(numbers: seq<int>, delimiter: int)
  {
      true // Any sequence and delimiter are valid inputs
  }
  
  predicate ValidOutput(numbers: seq<int>, delimiter: int, result: seq<int>)
  {
      if |numbers| <= 1 then
          result == numbers
      else
          |result| == 2 * |numbers| - 1 &&
          (forall i :: 0 <= i < |numbers| ==> result[2 * i] == numbers[i]) &&
          (forall i :: 0 <= i < |numbers| - 1 ==> result[2 * i + 1] == delimiter)
  }

vc-helpers: |-

vc-spec: |-
  method InsertDelimiter(numbers: seq<int>, delimiter: int) returns (result: seq<int>)
      requires ValidInput(numbers, delimiter)
      ensures ValidOutput(numbers, delimiter, result)

vc-code: |-
  {
      assume {:axiom} false;
    }
vc-postamble: |-
