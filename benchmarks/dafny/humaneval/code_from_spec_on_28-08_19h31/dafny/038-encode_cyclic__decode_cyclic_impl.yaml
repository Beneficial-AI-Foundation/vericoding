vc-preamble: |-
  method encode_cyclic(s: seq<int>) returns (res: seq<int>) 
      // post-conditions-start
      ensures |s| == |res|
      ensures forall i :: 0 <= i < |s| - |s| % 3 ==> (i % 3 == 0 ==> res[i] == s[i + 1])
      ensures forall i :: 0 <= i < |s| - |s| % 3 ==> (i % 3 == 1 ==> res[i] == s[i + 1])
      ensures forall i :: 0 <= i < |s| - |s| % 3 ==> (i % 3 == 2 ==> res[i] == s[i - 2])
      ensures forall i :: |s| - |s| % 3 <= i < |s| ==> (res[i] == s[i])
      // post-conditions-end
  {
    assume{:axiom} false;
  }

vc-helpers: |-
  lemma CyclicEncodingLemma(s: seq<int>, res: seq<int>)
      requires |s| == |res|
      requires forall i :: 0 <= i < |s| - |s| % 3 ==> (i % 3 == 0 ==> res[i] == s[i + 1])
      requires forall i :: 0 <= i < |s| - |s| % 3 ==> (i % 3 == 1 ==> res[i] == s[i + 1])
      requires forall i :: 0 <= i < |s| - |s| % 3 ==> (i % 3 == 2 ==> res[i] == s[i - 2])
      requires forall i :: |s| - |s| % 3 <= i < |s| ==> res[i] == s[i]
      ensures forall i :: |s| - |s| % 3 <= i < |s| ==> res[i] == s[i]
      ensures forall i :: 0 <= i < |s| - |s| % 3 ==> (i % 3 == 0 ==> res[i] == s[i + 1])
      ensures forall i :: 0 <= i < |s| - |s| % 3 ==> (i % 3 == 1 ==> res[i] == s[i + 1])
      ensures forall i :: 0 <= i < |s| - |s| % 3 ==> (i % 3 == 2 ==> res[i] == s[i - 2])
  {
  }

vc-description: |-
  function_signature: method decode_cyclic(s: seq<int>) returns (res: seq<int>)
  Decode data. Ensures: returns the correct size/count; the condition holds for all values; the condition holds for all values; the condition holds for all values.

vc-spec: |-
  method decode_cyclic(s: seq<int>) returns (res: seq<int>)
      // post-conditions-start
      ensures |s| == |res|
      ensures forall i :: |s| - |s| % 3 <= i < |s| ==> (res[i] == s[i])
      ensures forall i :: 0 <= i < |s| - |s| % 3 ==> (i % 3 == 0 ==> res[i] == s[i + 2])
      ensures forall i :: 0 <= i < |s| - |s| % 3 ==> (i % 3 == 1 ==> res[i] == s[i - 1])
      // post-conditions-end

vc-code: |-
  method DecodeCyclic(s: seq<int>) returns (res: seq<int>)
      ensures |s| == |res|
      ensures forall i :: |s| - |s| % 3 <= i < |s| ==> (res[i] == s[i])
      ensures forall i :: 0 <= i < |s| - |s| % 3 ==> (i % 3 == 0 ==> res[i] == s[i + 2])
      ensures forall i :: 0 <= i < |s| - |s| % 3 ==> (i % 3 == 1 ==> res[i] == s[i - 1])
  {
      var n := |s|;
      var remainder := n % 3;
      var limit := n - remainder;
      res := s;
      var i := 0;
      while i < limit
          invariant 0 <= i <= limit
          invariant |res| == |s|
          invariant forall k :: limit <= k < n ==> res[k] == s[k]
          invariant forall k :: 0 <= k < i ==> (k % 3 == 0 ==> res[k] == s[k + 2])
          invariant forall k :: 0 <= k < i ==> (k % 3 == 1 ==> res[k] == s[k - 1])
          invariant forall k :: 0 <= k < i ==> (k % 3 == 2 ==> res[k] == s[k])
          invariant forall k :: i <= k < limit ==> res[k] == s[k]
      {
          if i % 3 == 0 && i + 2 < n {
              res := res[i := s[i + 2]];
          } else if i % 3 == 1 && i - 1 >= 0 {
              res := res[i := s[i - 1]];
          }
          i := i + 1;
      }
  }

vc-postamble: |-


