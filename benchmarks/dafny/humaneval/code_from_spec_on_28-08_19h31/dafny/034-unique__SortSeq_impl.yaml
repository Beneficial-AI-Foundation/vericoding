vc-preamble: |-
  method uniqueSorted(s: seq<int>) returns (result: seq<int>)
      // pre-conditions-start
      requires forall i, j :: 0 <= i < j < |s| ==> s[i] <= s[j]
      // pre-conditions-end
      // post-conditions-start
      ensures forall i, j :: 0 <= i < j < |result| ==> result[i] < result[j]
      ensures forall x :: x in result ==> x in s
      ensures forall x :: x in s ==> x in result
      // post-conditions-end
  {
    assume{:axiom} false;
  }
  method unique(s: seq<int>) returns (result: seq<int>)
      // post-conditions-start
      ensures forall i, j :: 0 <= i < j < |result| ==> result[i] < result[j]
      ensures forall x :: x in result ==> x in s
      ensures forall x :: x in s ==> x in result
      // post-conditions-end
  {
    assume{:axiom} false;
  }

vc-helpers: |-
  // Helper lemma to prove properties about sequences and multisets
  lemma MultisetPreservation(s1: seq<int>, s2: seq<int>)
    ensures multiset(s1) == multiset(s2) ==> (forall x :: x in s1 ==> x in s2)
    ensures multiset(s1) == multiset(s2) ==> (forall x :: x in s2 ==> x in s1)
    ensures multiset(s1) == multiset(s2) ==> |s1| == |s2|
  {
    if multiset(s1) == multiset(s2) {
      assert |s1| == |s2| by {
        calc {
          |s1|;
          ==
          |multiset(s1)|;
          ==
          |multiset(s2)|;
          ==
          |s2|;
        }
      }
      var m := multiset(s1);
      forall x | x in s1 {
        assert m[x] > 0;
        assert x in s2;
      }
      forall x | x in s2 {
        assert m[x] > 0;
        assert x in s1;
      }
    }
  }
  
  // Helper lemma for merging sorted sequences
  lemma MergeSortedPreservesOrder(left: seq<int>, right: seq<int>, merged: seq<int>)
    requires forall i, j :: 0 <= i < j < |left| ==> left[i] <= left[j]
    requires forall i, j :: 0 <= i < j < |right| ==> right[i] <= right[j]
    requires multiset(merged) == multiset(left) + multiset(right)
    requires |merged| == |left| + |right|
    ensures forall i, j :: 0 <= i < j < |merged| ==> merged[i] <= merged[j]
  {
  }

vc-description: |-
  function_signature: method SortSeq(s: seq<int>) returns (sorted: seq<int>)
  Sort elements. Ensures: the result is sorted according to the ordering relation; returns the correct size/count; returns a sorted permutation of the input.

vc-spec: |-
  method SortSeq(s: seq<int>) returns (sorted: seq<int>)
    // post-conditions-start
    ensures forall i, j :: 0 <= i < j < |sorted| ==> sorted[i] <= sorted[j]
    ensures |sorted| == |s|
    ensures multiset(s) == multiset(sorted)
    // post-conditions-end

vc-code: |-
  method SortSeq(s: seq<int>) returns (sorted: seq<int>)
    ensures forall i, j :: 0 <= i < j < |sorted| ==> sorted[i] <= sorted[j]
    ensures |sorted| == |s|
    ensures multiset(s) == multiset(sorted)
  {
    if |s| == 0 {
      sorted := [];
      return;
    }
    
    if |s| == 1 {
      sorted := s;
      return;
    }
    
    var mid := |s| / 2;
    var left := s[..mid];
    var right := s[mid..];
    
    var leftSorted := SortSeq(left);
    var rightSorted := SortSeq(right);
    
    sorted := [];
    var i := 0;
    var j := 0;
    
    while i < |leftSorted| && j < |rightSorted|
      decreases |leftSorted| - i + |rightSorted| - j
      invariant 0 <= i <= |leftSorted|
      invariant 0 <= j <= |rightSorted|
      invariant |sorted| == i + j
      invariant multiset(sorted) == multiset(leftSorted[..i]) + multiset(rightSorted[..j])
      invariant forall a, b :: 0 <= a < b < |sorted| ==> sorted[a] <= sorted[b]
      invariant |sorted| > 0 ==> forall k :: 0 <= k < i ==> leftSorted[k] <= sorted[|sorted|-1]
      invariant |sorted| > 0 ==> forall k :: 0 <= k < j ==> rightSorted[k] <= sorted[|sorted|-1]
    {
      if leftSorted[i] <= rightSorted[j] {
        sorted := sorted + [leftSorted[i]];
        i := i + 1;
      } else {
        sorted := sorted + [rightSorted[j]];
        j := j + 1;
      }
    }
    
    while i < |leftSorted|
      decreases |leftSorted| - i
      invariant 0 <= i <= |leftSorted|
      invariant j == |rightSorted|
      invariant |sorted| == i + j
      invariant multiset(sorted) == multiset(leftSorted[..i]) + multiset(rightSorted[..j])
      invariant forall a, b :: 0 <= a < b < |sorted| ==> sorted[a] <= sorted[b]
      invariant |sorted| > 0 ==> forall k :: 0 <= k < i ==> leftSorted[k] <= sorted[|sorted|-1]
      invariant |sorted| > 0 ==> forall k :: 0 <= k < j ==> rightSorted[k] <= sorted[|sorted|-1]
    {
      sorted := sorted + [leftSorted[i]];
      i := i + 1;
    }
    
    while j < |rightSorted|
      decreases |rightSorted| - j
      invariant 0 <= j <= |rightSorted|
      invariant i == |leftSorted|
      invariant |sorted| == i + j
      invariant multiset(sorted) == multiset(leftSorted[..i]) + multiset(rightSorted[..j])
      invariant forall a, b :: 0 <= a < b < |sorted| ==> sorted[a] <= sorted[b]
      invariant |sorted| > 0 ==> forall k :: 0 <= k < i ==> leftSorted[k] <= sorted[|sorted|-1]
      invariant |sorted| > 0 ==> forall k :: 0 <= k < j ==> rightSorted[k] <= sorted[|sorted|-1]
    {
      sorted := sorted + [rightSorted[j]];
      j := j + 1;
    }
    
    assert |sorted| == |leftSorted| + |rightSorted|;
    assert |sorted| == |s|;
    assert multiset(sorted) == multiset(leftSorted) + multiset(rightSorted);
    assert multiset(leftSorted) == multiset(left);
    assert multiset(rightSorted) == multiset(right);
    assert multiset(left) + multiset(right) == multiset(s);
    assert multiset(sorted) == multiset(s);
  }

vc-postamble: |-


