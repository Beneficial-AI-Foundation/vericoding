vc-preamble: |-


vc-helpers: |-
  function MinEvenIndex(nodes: seq<int>, start: int): (int, int)
    requires 0 <= start <= |nodes|
    requires forall i :: 0 <= i < |nodes| ==> nodes[i] >= 0
    ensures var (val, idx) := MinEvenIndex(nodes, start);
            idx == -1 || (start <= idx < |nodes| && nodes[idx] % 2 == 0)
    ensures var (val, idx) := MinEvenIndex(nodes, start);
            idx == -1 ==> forall i :: start <= i < |nodes| ==> nodes[i] % 2 != 0
    ensures var (val, idx) := MinEvenIndex(nodes, start);
            idx != -1 ==> val == nodes[idx] && forall i :: start <= i < |nodes| && nodes[i] % 2 == 0 ==> val <= nodes[i]
    ensures var (val, idx) := MinEvenIndex(nodes, start);
            idx != -1 ==> forall i :: start <= i < idx ==> nodes[i] % 2 != 0 || nodes[i] > val
    decreases |nodes| - start
  {
    if start == |nodes| then (-1, -1)
    else if nodes[start] % 2 == 0 then (nodes[start], start)
    else 
      var (nextVal, nextIdx) := MinEvenIndex(nodes, start + 1);
      if nextIdx == -1 then (-1, -1)
      else (nextVal, nextIdx)
  }

vc-description: |-
  function_signature: def pluck(numbers: List[Int]) -> List[Int]
  Given an array representing a branch of a tree that has non-negative integer nodes your task is to pluck one of the nodes and return it. The plucked node should be the node with the smallest even value. If multiple nodes with the same smallest even value are found return the node that has smallest index.

vc-spec: |-
  method PluckSmallestEven(nodes: seq<int>) returns (result: seq<int>)
    // pre-conditions-start
    requires |nodes| <= 10000
    requires forall i :: 0 <= i < |nodes| ==> nodes[i] >= 0
    // pre-conditions-end
    // post-conditions-start
    ensures |result| == 0 || |result| == 2
    ensures |result| == 2 ==> 0 <= result[1] < |nodes| && nodes[result[1]] == result[0]
    ensures |result| == 2 ==> result[0] % 2 == 0
    ensures |result| == 2 ==> forall i :: 0 <= i < |nodes| && nodes[i] % 2 == 0 ==> result[0] <= nodes[i]
    ensures |result| == 2 ==> forall i :: 0 <= i < result[1] ==> nodes[i] % 2 != 0 || nodes[i] > result[0]
    ensures |result| == 0 ==> forall i :: 0 <= i < |nodes| ==> nodes[i] % 2 != 0
    // post-conditions-end

vc-code: |-
  method PluckSmallestEvenImpl(nodes: seq<int>) returns (result: seq<int>)
    requires |nodes| <= 10000
    requires forall i :: 0 <= i < |nodes| ==> nodes[i] >= 0
    ensures |result| == 0 || |result| == 2
    ensures |result| == 2 ==> 0 <= result[1] < |nodes| && nodes[result[1]] == result[0]
    ensures |result| == 2 ==> result[0] % 2 == 0
    ensures |result| == 2 ==> forall i :: 0 <= i < |nodes| && nodes[i] % 2 == 0 ==> result[0] <= nodes[i]
    ensures |result| == 2 ==> forall i :: 0 <= i < result[1] ==> nodes[i] % 2 != 0 || nodes[i] > result[0]
    ensures |result| == 0 ==> forall i :: 0 <= i < |nodes| ==> nodes[i] % 2 != 0
  {
    if |nodes| == 0 {
      return [];
    }
    var (minEvenVal, minEvenIdx) := MinEvenIndex(nodes, 0);
    if minEvenIdx == -1 {
      return [];
    } else {
      assert minEvenIdx >= 0 && minEvenIdx < |nodes|;
      assert minEvenVal == nodes[minEvenIdx];
      assert nodes[minEvenIdx] % 2 == 0;
      assert forall i :: 0 <= i < |nodes| && nodes[i] % 2 == 0 ==> minEvenVal <= nodes[i];
      assert forall i :: 0 <= i < minEvenIdx ==> nodes[i] % 2 != 0 || nodes[i] > minEvenVal;
      return [minEvenVal, minEvenIdx];
    }
  }

vc-postamble: |-


