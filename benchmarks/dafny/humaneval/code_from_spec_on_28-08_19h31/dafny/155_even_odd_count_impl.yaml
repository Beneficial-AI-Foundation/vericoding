vc-preamble: |-


vc-helpers: |-
  function digit_count(n: nat, digit: nat): nat
  {
    if n == 0 then 0
    else digit_count(n / 10, digit) + if (n % 10) % 2 == digit then 1 else 0
  }
  
  lemma DigitCountRelation(n: nat)
    ensures even_count(n) == digit_count(n, 0)
    ensures odd_count(n) == digit_count(n, 1)
  {
    if n == 0 {
      assert even_count(0) == 0 == digit_count(0, 0);
      assert odd_count(0) == 0 == digit_count(0, 1);
    } else {
      DigitCountRelation(n / 10);
      assert even_count(n) == even_count(n / 10) + (1 - n % 2);
      assert odd_count(n) == odd_count(n / 10) + (n % 2);
      assert digit_count(n, 0) == digit_count(n / 10, 0) + if (n % 10) % 2 == 0 then 1 else 0;
      assert digit_count(n, 1) == digit_count(n / 10, 1) + if (n % 10) % 2 == 1 then 1 else 0;
      assert (1 - n % 2) == if (n % 10) % 2 == 0 then 1 else 0;
      assert (n % 2) == if (n % 10) % 2 == 1 then 1 else 0;
    }
  }

vc-description: |-
  function_signature: method even_odd_count(n: nat) returns (even: nat, odd: nat)
  Given an integer, return a tuple that has the number of even and odd digits respectively.

vc-spec: |-
  method even_odd_count(n: nat) returns (even: nat, odd: nat)
    // pre-conditions-start
    requires n > 0
    // pre-conditions-end
    // post-conditions-start
    ensures even == even_count(n)
    ensures odd == odd_count(n)
    // post-conditions-end

vc-code: |-
  method EvenOddCount(n: nat) returns (even: nat, odd: nat)
    requires n > 0
    ensures even == even_count(n)
    ensures odd == odd_count(n)
  {
    var num := n;
    var e := 0;
    var o := 0;
    
    while num > 0
      decreases num
      invariant e == digit_count(n, 0) - digit_count(num, 0)
      invariant o == digit_count(n, 1) - digit_count(num, 1)
    {
      var digit := num % 10;
      if digit % 2 == 0 {
        e := e + 1;
      } else {
        o := o + 1;
      }
      num := num / 10;
    }
    
    DigitCountRelation(n);
    assert e == digit_count(n, 0);
    assert o == digit_count(n, 1);
    return e, o;
  }

vc-postamble: |-
  function odd_count(n: nat): nat {
    if n == 0 then 0
    else odd_count(n / 10) + n % 2
  }
  // pure-end
  function even_count(n: nat): nat
  {
    if n == 0 then 0
    else even_count(n / 10) + (1 - n % 2)
  }
  // pure-end

