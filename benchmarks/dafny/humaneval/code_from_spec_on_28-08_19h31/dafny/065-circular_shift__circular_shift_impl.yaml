vc-preamble: |-
  type stringNat = s: string |
    |s| > 0 && (|s| > 1 ==> s[0] != '0') &&
    forall i | 0 <= i < |s| :: s[i] in "0123456789"
    witness "1"
  function natToString(n: nat): stringNat {
    match n
      case 0 => "0" case 1 => "1" case 2 => "2" case 3 => "3" case 4 => "4"
      case 5 => "5" case 6 => "6" case 7 => "7" case 8 => "8" case 9 => "9"
      case _ => natToString(n / 10) + natToString(n % 10)
  }

vc-helpers: |-
  function stringReverse(s: string): string
  {
    if |s| == 0 then "" else stringReverse(s[1..]) + s[0..1]
  }
  
  lemma ReverseCorrect(s: string)
    ensures |stringReverse(s)| == |s|
    ensures forall k :: 0 <= k < |s| ==> stringReverse(s)[k] == s[|s| - 1 - k]
  {
    if |s| == 0 {
    } else {
      var t := s[1..];
      ReverseCorrect(t);
      assert stringReverse(s) == stringReverse(t) + s[0..1];
      assert |stringReverse(t)| == |t|;
      assert |stringReverse(s)| == |t| + 1 == |s|;
      forall k | 0 <= k < |s|
        ensures stringReverse(s)[k] == s[|s| - 1 - k]
      {
        if k < |t| {
          assert stringReverse(s)[k] == stringReverse(t)[k];
          assert stringReverse(t)[k] == t[|t| - 1 - k];
          assert t[|t| - 1 - k] == s[|s| - 1 - k];
        } else {
          assert k == |t|;
          assert stringReverse(s)[k] == s[0];
          assert s[|s| - 1 - k] == s[0];
        }
      }
    }
  }

vc-description: |-
  function_signature: method circular_shift(a: nat, shift: nat) returns (shifted: string)
  Process input. Ensures: returns the correct size/count; the condition holds for all values; returns the correct size/count.

vc-spec: |-
  method circular_shift(a: nat, shift: nat) returns (shifted: string)
    // post-conditions-start
    ensures |shifted| == |natToString(a)|
    ensures var s := natToString(a); shift > |s| ==> forall i :: 0 <= i < |s| ==> shifted[i] == s[|s| - 1 - i]
    ensures var s := natToString(a); shift <= |s| ==> shifted == s[|s| - shift..] + s[..|s| - shift]
    // post-conditions-end

vc-code: |-
  method CircularShift(a: nat, shift: nat) returns (shifted: string)
    ensures |shifted| == |natToString(a)|
    ensures var s := natToString(a); shift > |s| ==> forall i :: 0 <= i < |s| ==> shifted[i] == s[|s| - 1 - i]
    ensures var s := natToString(a); shift <= |s| ==> shifted == s[|s| - shift..] + s[..|s| - shift]
  {
    var s := natToString(a);
    if |s| == 0 {
      return s;
    }
    var effectiveShift := shift % |s|;
    if effectiveShift == 0 {
      shifted := s;
    } else if shift > |s| {
      shifted := stringReverse(s);
      ReverseCorrect(s);
    } else {
      shifted := s[|s| - effectiveShift..] + s[..|s| - effectiveShift];
    }
  }

vc-postamble: |-
  method reverse(str: string) returns (rev: string)
      // post-conditions-start
      ensures |rev| == |str|
      ensures forall k :: 0 <= k < |str| ==> rev[k] == str[|str| - 1 - k]
      // post-conditions-end
  {
    assume{:axiom} false;
  }

