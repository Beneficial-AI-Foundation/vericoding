vc-preamble: |-


vc-helpers: |-
  // No additional helper code or proofs needed for this implementation

vc-description: |-
  function_signature: def intersperse(numbers: List[int], delimeter: int) -> List[int]
  Insert a number 'delimeter' between every two consecutive elements of input list `numbers'

vc-spec: |-
  method intersperse(numbers: seq<int>, delimeter: int) returns (res: seq<int>)
    // post-conditions-start
    ensures |numbers| != 0 ==> |numbers| * 2 - 1 == |res|
    ensures |numbers| == 0 ==> |res| == 0
    ensures forall i : int :: i >= 0 && i < |res| && i % 2 == 0 ==> res[i] == numbers[i / 2]
    ensures forall i : int :: i >= 0 && i < |res| && i % 2 == 1 ==> res[i] == delimeter
    // post-conditions-end

vc-code: |-
  method Intersperse(numbers: seq<int>, delimiter: int) returns (res: seq<int>)
    ensures |numbers| != 0 ==> |numbers| * 2 - 1 == |res|
    ensures |numbers| == 0 ==> |res| == 0
    ensures forall i : int :: i >= 0 && i < |res| && i % 2 == 0 ==> res[i] == numbers[i / 2]
    ensures forall i : int :: i >= 0 && i < |res| && i % 2 == 1 ==> res[i] == delimiter
  {
    if |numbers| == 0 {
      res := [];
    } else {
      res := [];
      var i := 0;
      while i < |numbers|
        invariant 0 <= i <= |numbers|
        invariant |res| == i * 2
        invariant forall k : int :: k >= 0 && k < i * 2 && k % 2 == 0 ==> res[k] == numbers[k / 2]
        invariant forall k : int :: k >= 0 && k < i * 2 && k % 2 == 1 ==> res[k] == delimiter
      {
        res := res + [numbers[i]];
        if i < |numbers| - 1 {
          res := res + [delimiter];
        }
        i := i + 1;
      }
      if |numbers| > 1 {
        res := res[..|res| - 1];
      }
    }
  }

vc-postamble: |-


