vc-preamble: |-


vc-helpers: |-
  // Helper lemma to prove properties about sequences and filtering
  lemma FilterPreservesOrder(l: seq<int>, result: seq<int>, index: int)
    requires 0 <= index < |result|
    requires forall i :: 0 <= i < |result| ==> result[i] > 0
    requires forall i1 :: 0 <= i1 < |l| ==> (l[i1] > 0 ==> exists i2 :: 0 <= i2 < |result| && result[i2] == l[i1])
    requires forall i1 :: 0 <= i1 < |result| ==> exists i2 :: 0 <= i2 < |l| && l[i2] == result[i1]
    ensures exists i2 :: 0 <= i2 < |l| && l[i2] == result[index]
  {
    // The postcondition of the method ensures this property
  }

vc-description: |-
  function_signature: def get_positive(l: list)
  Return only positive numbers in the list.

vc-spec: |-
  method get_positive(l : seq<int>) returns (result : seq<int>)
      // post-conditions-start
      ensures forall i : int :: i >= 0 && i < |result| ==> result[i] > 0
      ensures |result| <= |l|
      ensures forall i1 :: i1 >= 0 && i1 < |l| ==> (l[i1] > 0 ==> exists i2 :: i2 >= 0 && i2 < |result| && result[i2] == l[i1])
      ensures |result| == 0 || (forall i1 : int :: i1 >= 0 && i1 < |result| ==> (exists i2 :: i2 >= 0 && i2 < |l| && l[i2] == result[i1]))
      // post-conditions-end

vc-code: |-
  method GetPositive(l: seq<int>) returns (result: seq<int>)
    ensures forall i: int :: i >= 0 && i < |result| ==> result[i] > 0
    ensures |result| <= |l|
    ensures forall i1 :: i1 >= 0 && i1 < |l| ==> (l[i1] > 0 ==> exists i2 :: i2 >= 0 && i2 < |result| && result[i2] == l[i1])
    ensures |result| == 0 || (forall i1: int :: i1 >= 0 && i1 < |result| ==> (exists i2 :: i2 >= 0 && i2 < |l| && l[i2] == result[i1]))
  {
    var temp: seq<int> := [];
    var index_map: seq<int> := []; // To track original indices for proving existence
    var i := 0;
    while i < |l|
      invariant 0 <= i <= |l|
      invariant |temp| <= i
      invariant |index_map| == |temp|
      invariant forall k :: 0 <= k < |temp| ==> temp[k] > 0
      invariant forall k :: 0 <= k < |temp| ==> 0 <= index_map[k] < i && l[index_map[k]] == temp[k]
      invariant forall k :: 0 <= k < i ==> (l[k] > 0 ==> exists m :: 0 <= m < |temp| && temp[m] == l[k])
      invariant forall k :: 0 <= k < |temp| ==> exists m :: 0 <= m < i && l[m] == temp[k]
    {
      if l[i] > 0 {
        temp := temp + [l[i]];
        index_map := index_map + [i];
      }
      i := i + 1;
    }
    result := temp;
    // Assert the postcondition for the last ensures clause
    assert |result| == 0 || (forall i1: int :: i1 >= 0 && i1 < |result| ==> (exists i2 :: 0 <= i2 < |l| && l[i2] == result[i1]));
  }

vc-postamble: |-


