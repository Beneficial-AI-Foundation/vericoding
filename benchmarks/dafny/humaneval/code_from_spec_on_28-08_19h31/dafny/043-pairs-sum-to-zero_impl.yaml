vc-preamble: |-


vc-helpers: |-
  lemma SumToZeroExists(l: seq<int>, i: int, j: int)
    requires 0 <= i < |l| && 0 <= j < |l| && i != j && l[i] + l[j] == 0
    ensures exists k: int, m: int :: 0 <= k < |l| && 0 <= m < |l| && k != m && l[k] + l[m] == 0
  {
  }

vc-description: |-
  function_signature: def pairs_sum_to_zero(numbers: List[int]) -> Bool
  pairs_sum_to_zero takes a list of integers as an input. it returns True if there are two distinct elements in the list that sum to zero, and False otherwise.

vc-spec: |-
  method pairs_sum_to_zero(l : seq<int>) returns (result : bool)
     // post-conditions-start
      ensures result ==> exists i : int, j : int :: 0 <= i < |l| && 0 <= j < |l| && i != j && l[i] + l[j] == 0
      ensures !result ==> forall i : int, j : int :: 0 <= i < |l| && 0 <= j < |l| && i != j ==> l[i] + l[j] != 0
      // post-conditions-end

vc-code: |-
  method PairsSumToZero(l: seq<int>) returns (result: bool)
    ensures result ==> exists i: int, j: int :: 0 <= i < |l| && 0 <= j < |l| && i != j && l[i] + l[j] == 0
    ensures !result ==> forall i: int, j: int :: 0 <= i < |l| && 0 <= j < |l| && i != j ==> l[i] + l[j] != 0
  {
    if |l| < 2 {
      return false;
    }
    
    var i := 0;
    while i < |l| - 1
      invariant 0 <= i < |l|
      invariant forall k: int, m: int :: 0 <= k < i && 0 <= m < |l| && k != m ==> l[k] + l[m] != 0
    {
      var j := i + 1;
      while j < |l|
        invariant 0 <= i < j <= |l|
        invariant forall k: int, m: int :: 0 <= k < i && 0 <= m < |l| && k != m ==> l[k] + l[m] != 0
        invariant forall m: int :: i < m < j ==> l[i] + l[m] != 0
      {
        if l[i] + l[j] == 0 {
          result := true;
          SumToZeroExists(l, i, j);
          return;
        }
        j := j + 1;
      }
      i := i + 1;
    }
    result := false;
  }

vc-postamble: |-


