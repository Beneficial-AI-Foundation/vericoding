vc-preamble: |-
  function IsPrimeHexDigit(c: char): bool
  {
    c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D'
  }
  function count_prime_hex_digits_rec(num: seq<char>) : (count : int)
    // post-conditions-start
    ensures 0 <= count <= |num|
    // post-conditions-end
  {
    // impl-start
    if |num| == 0 then 0
    else (if IsPrimeHexDigit(num[0]) then 1 else 0) + count_prime_hex_digits_rec(num[1..])
    // impl-end
  }

vc-helpers: |-
  lemma count_prime_hex_digits_rec_non_negative(num: seq<char>)
    ensures 0 <= count_prime_hex_digits_rec(num)
  {
    if |num| == 0 {
      assert count_prime_hex_digits_rec(num) == 0;
    } else {
      count_prime_hex_digits_rec_non_negative(num[1..]);
      assert 0 <= count_prime_hex_digits_rec(num[1..]);
      assert count_prime_hex_digits_rec(num) == (if IsPrimeHexDigit(num[0]) then 1 else 0) + count_prime_hex_digits_rec(num[1..]);
    }
  }
  
  lemma count_prime_hex_digits_rec_bounded(num: seq<char>)
    ensures count_prime_hex_digits_rec(num) <= |num|
  {
    if |num| == 0 {
      assert count_prime_hex_digits_rec(num) == 0;
      assert 0 <= |num|;
    } else {
      count_prime_hex_digits_rec_bounded(num[1..]);
      assert count_prime_hex_digits_rec(num[1..]) <= |num[1..]|;
      assert |num[1..]| == |num| - 1;
      assert count_prime_hex_digits_rec(num) == (if IsPrimeHexDigit(num[0]) then 1 else 0) + count_prime_hex_digits_rec(num[1..]);
      assert (if IsPrimeHexDigit(num[0]) then 1 else 0) <= 1;
      assert count_prime_hex_digits_rec(num) <= 1 + (|num| - 1);
      assert count_prime_hex_digits_rec(num) <= |num|;
    }
  }
  
  lemma count_prime_hex_digits_rec_prefix(num: seq<char>, i: int)
    requires 0 <= i <= |num|
    ensures count_prime_hex_digits_rec(num[..i]) == (if i == 0 then 0 else count_prime_hex_digits_rec(num[..i-1]) + (if IsPrimeHexDigit(num[i-1]) then 1 else 0))
    ensures count_prime_hex_digits_rec(num[..i]) <= i
  {
    if i == 0 {
      assert num[..i] == [];
      assert count_prime_hex_digits_rec([]) == 0;
    } else {
      count_prime_hex_digits_rec_prefix(num, i - 1);
      assert count_prime_hex_digits_rec(num[..i-1]) <= i - 1;
      assert num[..i] == num[..i-1] + [num[i-1]];
      assert count_prime_hex_digits_rec(num[..i]) == count_prime_hex_digits_rec(num[..i-1]) + (if IsPrimeHexDigit(num[i-1]) then 1 else 0);
      assert (if IsPrimeHexDigit(num[i-1]) then 1 else 0) <= 1;
      assert count_prime_hex_digits_rec(num[..i]) <= (i - 1) + 1;
      assert count_prime_hex_digits_rec(num[..i]) <= i;
    }
  }

vc-description: |-
  function_signature: def hex_key(num: string) -> int
  You have been tasked to write a function that receives a hexadecimal number as a string and counts the number of hexadecimal digits that are primes (prime number, or a prime, is a natural number greater than 1 that is not a product of two smaller natural numbers). Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Prime numbers are 2, 3, 5, 7, 11, 13, 17,... So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13). Note: you may assume the input is always correct or empty string, and symbols A,B,C,D,E,F are always uppercase.

vc-spec: |-
  method count_prime_hex_digits(s: seq<char>) returns (count : int)
      // post-conditions-start
      ensures count == count_prime_hex_digits_rec(s)
      ensures 0 <= count <= |s|
      // post-conditions-end

vc-code: |-
  {
    count := 0;
    var i := 0;
    while i < |s|
      invariant 0 <= i <= |s|
      invariant count == count_prime_hex_digits_rec(s[..i])
    {
      if IsPrimeHexDigit(s[i]) {
        count := count + 1;
      }
      i := i + 1;
      count_prime_hex_digits_rec_prefix(s, i);
      assert count == count_prime_hex_digits_rec(s[..i]);
    }
    assert s[..i] == s;
    assert count == count_prime_hex_digits_rec(s);
  }

vc-postamble: |-


