vc-preamble: |-
  function count_rec(a: seq<int>, x: int): int {
    if |a| == 0 then 0
    else count_rec(a[1..], x) + (if a[0] == x then 1 else 0)
  }

vc-helpers: |-
  lemma CountRecCorrect(a: seq<int>, x: int)
    ensures count_rec(a, x) == |set i | 0 <= i < |a| && a[i] == x|
  {
    if |a| == 0 {
      assert count_rec(a, x) == 0;
      assert |set i | 0 <= i < |a| && a[i] == x| == 0;
    } else {
      CountRecCorrect(a[1..], x);
      var s1 := set i | 0 <= i < |a[1..]| && a[1..][i] == x;
      var s2 := set i | 0 <= i < |a| && a[i] == x;
      if a[0] == x {
        assert s2 == {0} + set i | 1 <= i < |a| && a[i] == x;
        assert |s2| == 1 + |s1|;
      } else {
        assert s2 == set i | 1 <= i < |a| && a[i] == x;
        assert |s2| == |s1|;
      }
    }
  }
  
  lemma CountRecPrefix(a: seq<int>, x: int, k: int)
    requires 0 <= k <= |a|
    ensures count_rec(a[..k], x) <= count_rec(a, x)
  {
    if k == 0 {
      assert a[..k] == [];
      assert count_rec(a[..k], x) == 0;
      assert count_rec(a, x) >= 0;
    } else {
      if k == |a| {
        assert a[..k] == a;
        assert count_rec(a[..k], x) == count_rec(a, x);
      } else {
        assert a[..k] == a[..k-1] + [a[k-1]];
        CountRecPrefix(a, x, k-1);
        assert count_rec(a[..k-1], x) <= count_rec(a, x);
        assert count_rec(a[..k], x) == count_rec(a[..k-1], x) + (if a[k-1] == x then 1 else 0);
        assert count_rec(a[..k], x) <= count_rec(a, x);
      }
    }
  }
  
  lemma CountRecUnique(a: seq<int>, x: int, k: int)
    requires 0 <= k <= |a|
    requires count_rec(a[..k], x) == 1
    ensures count_rec(a, x) >= 1
  {
    CountRecPrefix(a, x, k);
    assert count_rec(a[..k], x) <= count_rec(a, x);
    assert count_rec(a, x) >= 1;
  }

vc-description: |-
  function_signature: method remove_duplicates(a: seq<int>) returns (result: seq<int>)
  Process input. Requires: the condition holds for all values. Ensures: the condition holds for all values; the condition holds for all values.

vc-spec: |-
  method remove_duplicates(a: seq<int>) returns (result: seq<int>)
    // pre-conditions-start
    requires forall i :: 0 <= i < |a| ==> count_rec(a, a[i]) >= 1
    // pre-conditions-end
    // post-conditions-start
    ensures forall i :: 0 <= i < |result| ==> count_rec(a, result[i]) == 1
    ensures forall i :: 0 <= i < |a| ==> (a[i] in result <==> count_rec(a, a[i]) == 1)
    // post-conditions-end

vc-code: |-
  method RemoveDuplicates(a: seq<int>) returns (result: seq<int>)
    // pre-conditions-start
    requires forall i :: 0 <= i < |a| ==> count_rec(a, a[i]) >= 1
    // pre-conditions-end
    // post-conditions-start
    ensures forall i :: 0 <= i < |result| ==> count_rec(a, result[i]) == 1
    ensures forall i :: 0 <= i < |a| ==> (a[i] in result <==> count_rec(a, a[i]) == 1)
    // post-conditions-end
  {
    var seen: set<int> := {};
    result := [];
    
    for i := 0 to |a|
      invariant 0 <= i <= |a|
      invariant forall x :: x in seen ==> count_rec(a[..i], x) >= 1
      invariant forall x :: x in seen ==> count_rec(a, x) >= 1
      invariant forall x :: x in result ==> x in seen
      invariant |result| == |seen|
      invariant forall x :: x in result ==> count_rec(a[..i], x) == 1
      invariant forall x :: x in seen ==> x in result
    {
      if i < |a| && a[i] !in seen && count_rec(a, a[i]) == 1 {
        seen := seen + {a[i]};
        result := result + [a[i]];
      }
    }
  }

vc-postamble: |-
  method count(a: seq<int>, x: int) returns (cnt: int)
    // post-conditions-start
    ensures cnt == |set i | 0 <= i < |a| && a[i] == x|
    ensures cnt == count_rec(a, x)
    // post-conditions-end
  {
    assume{:axiom} false;
  }

