vc-preamble: |-
  method checkSubstring(s: string, sub: string) returns (result: bool)
  {
    assume{:axiom} false;
  }

vc-helpers: |-
  predicate containsSubstring(s: string, sub: string)
  {
    exists i :: 0 <= i <= |s| - |sub| && s[i..i+|sub|] == sub
  }
  
  method checkSubstringHelper(s: string, sub: string) returns (result: bool)
    ensures result == containsSubstring(s, sub)
  {
    result := false;
    if |sub| > |s| {
      return;
    }
    var i := 0;
    while i <= |s| - |sub|
      invariant 0 <= i <= |s| - |sub| + 1
      invariant !result ==> (forall k :: 0 <= k < i ==> s[k..k+|sub|] != sub)
      invariant result ==> (exists k :: 0 <= k < i && s[k..k+|sub|] == sub)
      decreases |s| - i
    {
      if s[i..i+|sub|] == sub {
        result := true;
        return;
      }
      i := i + 1;
    }
  }

vc-description: |-
  function_signature: method filter_by_substring(strings: seq<string>, substring: string) returns (res : seq<string>)
  Filter elements. Ensures: the size is bounded; the condition holds for all values.

vc-spec: |-
  method filter_by_substring(strings: seq<string>, substring: string) returns (res : seq<string>)
      // post-conditions-start
      ensures |res| <= |strings|
      ensures (forall s :: s in res ==> s in strings)
      // post-conditions-end

vc-code: |-
  method filter_by_substring_impl(strings: seq<string>, substring: string) returns (res: seq<string>)
    ensures |res| <= |strings|
    ensures forall s :: s in res ==> s in strings
  {
    res := [];
    var i := 0;
    while i < |strings|
      invariant 0 <= i <= |strings|
      invariant |res| <= i
      invariant forall s :: s in res ==> s in strings[..i]
    {
      var hasSubstring := checkSubstringHelper(strings[i], substring);
      if hasSubstring {
        res := res + [strings[i]];
      }
      i := i + 1;
    }
  }

vc-postamble: |-


