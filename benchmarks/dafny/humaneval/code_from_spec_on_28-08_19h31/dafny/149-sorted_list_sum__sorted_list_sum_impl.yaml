vc-preamble: |-
  function comparison(a : string, b : string, i : int): bool
      requires 0 <= i <= |a| && 0 <= i <= |b|
      decreases |a| - i
      decreases |b| - i
      ensures (a == b) ==> comparison(a, b, i)
  {
      if (i < |a| && i < |b|) then
          if a[i] < b[i] then
              true
          else if a[i] > b[i] then
              false
          else
              comparison(a, b, i + 1)
      else
          if |a| <= |b| then
              true
          else
              false
  }
  method sort_strings(list: seq<string>) returns (sorted: seq<string>)
      ensures |sorted| == |list|
      ensures multiset(sorted) == multiset(list)
  {
    assume{:axiom} false;
  }
  method sort_lengths(list: seq<string>) returns (sorted: seq<string>)
      requires forall i : int :: 0 <= i < |list| ==> |list[i]| % 2 == 0
      ensures forall i : int :: 0 <= i < |sorted| ==> |sorted[i]| % 2 == 0
      ensures |sorted| == |list|
      ensures multiset(sorted) == multiset(list)
      ensures forall x : int, y : int :: 0 <= x < y < |sorted| ==> |sorted[x]| <= |sorted[y]|
  {
    assume{:axiom} false;
  }

vc-helpers: |-
  lemma MultisetSubsetPreservation(original: seq<string>, filtered: seq<string>)
      requires multiset(filtered) <= multiset(original)
      ensures forall s :: s in filtered ==> s in original
  {
      forall s | s in filtered {
          assert s in multiset(filtered);
          assert s in multiset(original);
          assert s in original;
      }
  }
  
  lemma EvenLengthPreservation(list: seq<string>, filtered: seq<string>)
      requires forall i : int :: 0 <= i < |list| ==> |list[i]| % 2 == 0
      requires multiset(filtered) <= multiset(list)
      ensures forall i : int :: 0 <= i < |filtered| ==> |filtered[i]| % 2 == 0
  {
      forall i | 0 <= i < |filtered| {
          assert filtered[i] in filtered;
          assert filtered[i] in multiset(filtered);
          assert filtered[i] in multiset(list);
          var idx :| 0 <= idx < |list| && list[idx] == filtered[i];
          assert |list[idx]| % 2 == 0;
          assert |filtered[i]| % 2 == 0;
      }
  }

vc-description: |-
  function_signature: method sorted_list_sum(list: seq<string>) returns (sorted: seq<string>)
  Sort elements. Requires: requires size of listsize of  > 0. Ensures: the size is bounded; the result is sorted according to the ordering relation; the result is sorted according to the ordering relation; returns a sorted permutation of the input.

vc-spec: |-
  method sorted_list_sum(list: seq<string>) returns (sorted: seq<string>)
      requires |list| > 0
      ensures |sorted| <= |list|
      ensures forall i : int :: 0 <= i < |sorted| ==> |sorted[i]| % 2 == 0
      ensures forall x : int, y : int :: 0 <= x < y < |sorted| ==> |sorted[x]| <= |sorted[y]|
      ensures multiset(sorted) <= multiset(list)

vc-code: |-
  method SortedListSum(list: seq<string>) returns (sorted: seq<string>)
      requires |list| > 0
      ensures |sorted| <= |list|
      ensures forall i : int :: 0 <= i < |sorted| ==> |sorted[i]| % 2 == 0
      ensures forall x : int, y : int :: 0 <= x < y < |sorted| ==> |sorted[x]| <= |sorted[y]|
      ensures multiset(sorted) <= multiset(list)
  {
      var even_list: seq<string> := [];
      var i := 0;
      while i < |list|
          invariant 0 <= i <= |list|
          invariant forall k : int :: 0 <= k < |even_list| ==> |even_list[k]| % 2 == 0
          invariant multiset(even_list) <= multiset(list[..i])
      {
          if |list[i]| % 2 == 0 {
              var old_even_list := even_list;
              even_list := even_list + [list[i]];
              assert multiset(even_list) == multiset(old_even_list) + multiset([list[i]]);
              assert multiset(old_even_list) <= multiset(list[..i]);
              assert multiset(even_list) <= multiset(list[..i]) + multiset([list[i]]);
              assert list[..i+1] == list[..i] + [list[i]];
              assert multiset(list[..i+1]) == multiset(list[..i]) + multiset([list[i]]);
              assert multiset(even_list) <= multiset(list[..i+1]);
          }
          i := i + 1;
      }
      
      if |even_list| == 0 {
          sorted := [];
          assert |sorted| <= |list|;
          assert multiset(sorted) <= multiset(list);
      } else {
          sorted := sort_lengths(even_list);
          assert |sorted| == |even_list| <= |list|;
          assert multiset(sorted) == multiset(even_list);
          assert multiset(even_list) <= multiset(list[..i]);
          assert i == |list|;
          assert list[..i] == list;
          assert multiset(even_list) <= multiset(list);
          assert multiset(sorted) <= multiset(list);
          assert forall k : int :: 0 <= k < |even_list| ==> |even_list[k]| % 2 == 0;
          EvenLengthPreservation(even_list, sorted);
      }
  }

vc-postamble: |-


