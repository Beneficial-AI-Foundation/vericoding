vc-preamble: |-
  function contains_char(s: string, c: char): bool
    decreases |s|
    requires forall i :: 0 <= i < |s| ==> 'a' <= s[i] <= 'z' || 'A' <= s[i] <= 'Z'
    requires 'a' <= c <= 'z'
  {
    if |s| == 0 then false else s[0] == c || s[0] == upper_char(c) || contains_char(s[1..], c)
  }
  function upper_char(c: char) : (C: char)
    requires 'a' <= c <= 'z'
    ensures 'A' <= C <= 'Z'
  { c - 'a' + 'A' }

vc-helpers: |-
  lemma contains_char_equivalence(s: string, c: char)
    decreases |s|
    requires forall i :: 0 <= i < |s| ==> 'a' <= s[i] <= 'z' || 'A' <= s[i] <= 'Z'
    requires 'a' <= c <= 'z'
    ensures contains_char(s, c) == exists i :: 0 <= i < |s| && (s[i] == c || s[i] == upper_char(c))
  {
    if |s| == 0 {
      assert !contains_char(s, c);
      assert !(exists i :: 0 <= i < |s| && (s[i] == c || s[i] == upper_char(c)));
    } else {
      contains_char_equivalence(s[1..], c);
      if s[0] == c || s[0] == upper_char(c) {
        assert exists i :: 0 <= i < |s| && (s[i] == c || s[i] == upper_char(c));
      } else {
        assert contains_char(s[1..], c) == exists i :: 0 <= i < |s[1..]| && (s[1..][i] == c || s[1..][i] == upper_char(c));
        assert contains_char(s[1..], c) == exists i :: 1 <= i < |s| && (s[i] == c || s[i] == upper_char(c));
      }
    }
  }
  
  lemma contains_char_prefix(s: string, i: int, c: char)
    requires 0 <= i <= |s|
    requires forall k :: 0 <= k < |s| ==> 'a' <= s[k] <= 'z' || 'A' <= s[k] <= 'Z'
    requires 'a' <= c <= 'z'
    ensures contains_char(s[..i], c) == exists k :: 0 <= k < i && (s[k] == c || s[k] == upper_char(c))
  {
    if i == 0 {
      assert s[..i] == "";
      assert !contains_char("", c);
      assert !(exists k :: 0 <= k < 0 && (s[k] == c || s[k] == upper_char(c)));
    } else {
      assert s[..i] == s[..i-1] + [s[i-1]];
      contains_char_prefix(s, i-1, c);
      if s[i-1] == c || s[i-1] == upper_char(c) {
        assert exists k :: 0 <= k < i && (s[k] == c || s[k] == upper_char(c));
      } else {
        assert contains_char(s[..i-1], c) == exists k :: 0 <= k < i-1 && (s[k] == c || s[k] == upper_char(c));
      }
    }
  }
  
  lemma char_set_equivalence(s: string, char_set: set<char>, i: int)
    requires 0 <= i <= |s|
    requires forall k :: 0 <= k < |s| ==> 'a' <= s[k] <= 'z' || 'A' <= s[k] <= 'Z'
    requires char_set == set c | 'a' <= c <= 'z' && exists k :: 0 <= k < i && (s[k] == c || s[k] == upper_char(c))
    ensures char_set == set c | 'a' <= c <= 'z' && contains_char(s[..i], c)
  {
    forall c | 'a' <= c <= 'z'
      ensures (c in char_set) == contains_char(s[..i], c)
    {
      contains_char_prefix(s, i, c);
      if c in char_set {
        assert exists k :: 0 <= k < i && (s[k] == c || s[k] == upper_char(c));
        assert contains_char(s[..i], c);
      } else {
        assert !(exists k :: 0 <= k < i && (s[k] == c || s[k] == upper_char(c)));
        assert !contains_char(s[..i], c);
      }
    }
  }

vc-description: |-
  function_signature: def count_distinct_characters(string: str) -> int
  Given a string, find out how many distinct characters (regardless of case) does it consist of

vc-spec: |-
  method count_distinct_characters(s: string) returns (count: int)
    // pre-conditions-start
    requires forall i :: 0 <= i < |s| ==> 'a' <= s[i] <= 'z' || 'A' <= s[i] <= 'Z'
    // pre-conditions-end
    // post-conditions-start
    ensures count == |set c | 'a' <= c <= 'z' && contains_char(s, c)|
    // post-conditions-end

vc-code: |-
  method CountDistinctCharacters(s: string) returns (count: int)
    requires forall i :: 0 <= i < |s| ==> 'a' <= s[i] <= 'z' || 'A' <= s[i] <= 'Z'
    ensures count == |set c | 'a' <= c <= 'z' && contains_char(s, c)|
  {
    var char_set: set<char> := {};
    var i := 0;
    while i < |s|
      invariant 0 <= i <= |s|
      invariant char_set == set c | 'a' <= c <= 'z' && exists k :: 0 <= k < i && (s[k] == c || s[k] == upper_char(c))
    {
      var c := s[i];
      var lower_c: char;
      if 'A' <= c <= 'Z' {
        lower_c := c - 'A' + 'a';
      } else {
        lower_c := c;
      }
      if 'a' <= lower_c <= 'z' && lower_c !in char_set {
        char_set := char_set + {lower_c};
      }
      i := i + 1;
    }
    count := |char_set|;
    char_set_equivalence(s, char_set, |s|);
  }

vc-postamble: |-


