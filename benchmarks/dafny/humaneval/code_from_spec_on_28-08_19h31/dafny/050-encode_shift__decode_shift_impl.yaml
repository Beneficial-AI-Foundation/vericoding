vc-preamble: |-
  function encode_char(c: char): char
    // pre-conditions-start
    requires 'a' <= c <= 'z'
    // pre-conditions-end
    // post-conditions-start
    ensures 'a' <= encode_char(c) <= 'z'
    // post-conditions-end
  {
    // impl-start
    ((c as int - 'a' as int + 5) % 26 + 'a' as int) as char
    // impl-end
  }
  function decode_char(c: char): char
    // pre-conditions-start
    requires 'a' <= c <= 'z'
    // pre-conditions-end
    // post-conditions-start
    ensures 'a' <= decode_char(c) <= 'z'
    ensures encode_char(decode_char(c)) == c
    // post-conditions-end
  {
    // impl-start
    ((c as int - 'a' as int - 5) % 26 + 'a' as int) as char
    // impl-end
  }
  method encode_shift(s: string) returns (t: string)
    // pre-conditions-start
    requires forall i :: 0 <= i < |s| ==> 'a' <= s[i] <= 'z'
    // pre-conditions-end
    // post-conditions-start
    ensures |s| == |t|
    ensures forall i :: 0 <= i < |s| ==> t[i] == encode_char(s[i])
    // post-conditions-end
  {
    assume{:axiom} false;
  }

vc-helpers: |-
  lemma Mod26Property(n: int)
    ensures (n % 26) + 26 == (n + 26) % 26
  {
    var q := n / 26;
    var r := n % 26;
    assert n == q * 26 + r;
    assert 0 <= r < 26;
    assert (n + 26) == (q + 1) * 26 + r;
    assert (n + 26) % 26 == r;
    assert (n % 26) + 26 == r + 26;
  }
  
  lemma DecodeEncodeInverse(c: char)
    requires 'a' <= c <= 'z'
    ensures encode_char(decode_char(c)) == c
  {
    var c_int := c as int;
    var a_int := 'a' as int;
    var diff := c_int - a_int;
    assert 0 <= diff < 26;
    var dec_int := (diff - 5) % 26 + a_int;
    var enc_int := (dec_int - a_int + 5) % 26 + a_int;
    calc {
      dec_int - a_int;
      == (diff - 5) % 26;
      == ((c_int - a_int) - 5) % 26;
    }
    calc {
      enc_int;
      == (((diff - 5) % 26) + 5) % 26 + a_int;
      == ((diff - 5 + 5) % 26) + a_int;
      == (diff % 26) + a_int;
      == diff + a_int;
      == c_int;
    }
    assert enc_int == c_int;
  }

vc-description: |-
  function_signature: method decode_shift(s: string) returns (t: string)
  Decode data. Requires: the condition holds for all values. Ensures: returns the correct size/count; the condition holds for all values.

vc-spec: |-
  method decode_shift(s: string) returns (t: string)
    // pre-conditions-start
    requires forall i :: 0 <= i < |s| ==> 'a' <= s[i] <= 'z'
    // pre-conditions-end
    // post-conditions-start
    ensures |s| == |t|
    ensures forall i :: 0 <= i < |s| ==> t[i] == decode_char(s[i])
    // post-conditions-end

vc-code: |-
  {
    var i := 0;
    var result := new char[|s|];
    while i < |s|
      invariant 0 <= i <= |s|
      invariant forall j :: 0 <= j < i ==> result[j] == decode_char(s[j])
    {
      result[i] := decode_char(s[i]);
      i := i + 1;
    }
    t := result[..];
  }

vc-postamble: |-


