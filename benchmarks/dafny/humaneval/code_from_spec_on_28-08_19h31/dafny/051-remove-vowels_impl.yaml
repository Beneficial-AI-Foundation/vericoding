vc-preamble: |-


vc-helpers: |-
  function isVowel(c: char): bool {
    c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'
  }
  
  lemma CharactersInResultAreInText(text: string, result: string)
    requires forall i: int :: 0 <= i < |result| ==> result[i] in text
    ensures forall i: int :: 0 <= i < |result| ==> result[i] in text
  {
  }

vc-description: |-
  function_signature: def remove_vowels(string: str) -> string
  remove_vowels is a function that takes string and returns string without vowels.

vc-spec: |-
  method remove_vowels(text : string) returns (s : string)
      // post-conditions-start
      ensures forall i : int :: i >= 0 && i < |s| ==> s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u'
      ensures forall i : int :: i >= 0 && i < |s| ==> s[i] in text
      ensures forall j : int :: j >= 0 && j < |text| && text[j] != 'a' && text[j] != 'e' && text[j] != 'i' && text[j] != 'o' && text[j] != 'u' ==> text[j] in s
      // post-conditions-end

vc-code: |-
  method RemoveVowels(text: string) returns (s: string)
    ensures forall i : int :: i >= 0 && i < |s| ==> s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u'
    ensures forall i : int :: i >= 0 && i < |s| ==> s[i] in text
    ensures forall j : int :: j >= 0 && j < |text| && text[j] != 'a' && text[j] != 'e' && text[j] != 'i' && text[j] != 'o' && text[j] != 'u' ==> text[j] in s
  {
    var result := "";
    var i := 0;
    while i < |text|
      invariant 0 <= i <= |text|
      invariant forall k: int :: 0 <= k < |result| ==> !isVowel(result[k])
      invariant forall k: int :: 0 <= k < |result| ==> result[k] in text
      invariant forall j: int :: 0 <= j < i && !isVowel(text[j]) ==> text[j] in result
    {
      if !isVowel(text[i]) {
        result := result + text[i..i+1];
      }
      i := i + 1;
    }
    s := result;
  }

vc-postamble: |-


