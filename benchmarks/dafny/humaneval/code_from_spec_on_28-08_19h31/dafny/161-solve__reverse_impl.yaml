vc-preamble: |-
  method solve(s: string) returns (t: string)
    // post-conditions-start 
    ensures |s| == |t|
    ensures (forall i :: 0 <= i < |s| ==> !is_alpha(s[i])) ==> (forall i :: 0 <= i < |s| ==> s[i] == t[|t| - 1 - i])
    ensures (exists i :: 0 <= i < |s| && is_alpha(s[i])) ==> 
      (forall i :: 0 <= i < |t| ==> if is_alpha(s[i]) then t[i] == flip_case(s[i]) else t[i] == s[i])
    // post-conditions-end
  {
    assume{:axiom} false;
  }

vc-helpers: |-
  function is_alpha(c: char): bool {
    'a' <= c <= 'z' || 'A' <= c <= 'Z'
  }
  
  function flip_case(c: char): (flipped: char)
    requires is_alpha(c)
    ensures is_alpha(flipped)
  {
    if 'a' <= c <= 'z' then c - 'a' + 'A' else c - 'A' + 'a'
  }

vc-description: |-
  function_signature: method reverse(s: string) returns (rev: string)
  Reverse order. Ensures: returns the correct size/count; the condition holds for all values.

vc-spec: |-
  method reverse(s: string) returns (rev: string)
    // pre-conditions-start
    ensures |rev| == |s|
    ensures forall k :: 0 <= k < |s| ==> rev[k] == s[|s| - 1 - k]
    // pre-conditions-end

vc-code: |-
  method solve(s: string) returns (t: string)
    ensures |s| == |t|
    ensures (forall i :: 0 <= i < |s| ==> !is_alpha(s[i])) ==> (forall i :: 0 <= i < |s| ==> s[i] == t[|t| - 1 - i])
    ensures (exists i :: 0 <= i < |s| && is_alpha(s[i])) ==> 
      (forall i :: 0 <= i < |t| ==> if is_alpha(s[i]) then t[i] == flip_case(s[i]) else t[i] == s[i])
  {
    var n := |s|;
    t := "";
    var i := 0;
    var has_alpha := false;
    
    while i < n
      invariant 0 <= i <= n
      invariant |t| == i
      invariant forall k :: 0 <= k < i ==> t[k] == (if has_alpha then (if is_alpha(s[k]) then flip_case(s[k]) else s[k]) else s[n - 1 - k])
    {
      if !has_alpha {
        var j := 0;
        while j < n
          invariant 0 <= j <= n
          invariant !has_alpha ==> forall k :: 0 <= k < j ==> !is_alpha(s[k])
        {
          if is_alpha(s[j]) {
            has_alpha := true;
            break;
          }
          j := j + 1;
        }
      }
      if has_alpha {
        t := t + [(if is_alpha(s[i]) then flip_case(s[i]) else s[i])];
      } else {
        t := t + [s[n - 1 - i]];
      }
      i := i + 1;
    }
  }

vc-postamble: |-
  function is_alpha(c: char) : bool {
    'a' <= c <= 'z' || 'A' <= c <= 'Z'
  }
  // pure-end
  function flip_case(c: char): (flipped: char)
    requires is_alpha(c)
    ensures is_alpha(flipped)
  {
    if 'a' <= c <= 'z' then c - 'a' + 'A' else c - 'A' + 'a'
  }
  // pure-end

