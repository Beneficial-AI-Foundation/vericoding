vc-preamble: |-


vc-helpers: |-
  function filter_string(s: string, chars: string): string
    decreases |s|
  {
    if |s| == 0 then ""
    else if s[0] in chars then filter_string(s[1..], chars)
    else [s[0]] + filter_string(s[1..], chars)
  }
  
  lemma filter_string_properties(s: string, chars: string)
    ensures forall i :: 0 <= i < |filter_string(s, chars)| ==> filter_string(s, chars)[i] !in chars
    ensures forall i :: 0 <= i < |filter_string(s, chars)| ==> filter_string(s, chars)[i] in s
    ensures forall i :: 0 <= i < |s| && s[i] !in chars ==> s[i] in filter_string(s, chars)
  {
    if |s| == 0 {
      return;
    }
    if s[0] in chars {
      filter_string_properties(s[1..], chars);
    } else {
      filter_string_properties(s[1..], chars);
      assert s[0] !in chars;
      assert s[0] in filter_string(s, chars);
    }
  }

vc-description: |-
  function_signature: method reverse_delete(s: string, chars: string) returns (res: string, is_palindrome: bool)
  Reverse order. Ensures: the condition holds for all values; the condition holds for all values; the condition holds for all values; the result is a palindrome.

vc-spec: |-
  method reverse_delete(s: string, chars: string) returns (res: string, is_palindrome: bool)
    // post-conditions-start
    ensures forall i :: 0 <= i < |res| ==> res[i] !in chars
    ensures forall i :: 0 <= i < |res| ==> res[i] in s
    ensures forall i :: 0 <= i < |s| && s[i] !in chars ==> s[i] in res
    ensures is_palindrome <==> is_palindrome_pred(res)
    // post-conditions-end

vc-code: |-
  {
    res := filter_string(s, chars);
    filter_string_properties(s, chars);
    is_palindrome := check_palindrome(res);
  }

vc-postamble: |-
  method check_palindrome(s: string) returns (result: bool)
    // post-conditions-start
    ensures result <==> is_palindrome_pred(s)
    // post-conditions-end
  {
    assume{:axiom} false;
  }
  function is_palindrome_pred(s : string) : bool {
    forall k :: 0 <= k < |s| ==> s[k] == s[|s| - 1 - k]
  }
  // pure-end

