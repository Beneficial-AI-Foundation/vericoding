vc-preamble: |-
  method strange_sort_list_helper(s: seq<int>) returns (sorted: seq<int>, strange: seq<int>)
      // post-conditions-start
      ensures multiset(s) == multiset(sorted)
      ensures |s| == |sorted| == |strange|
      ensures forall i :: 0 <= i < |s| && i % 2 == 0 ==> strange[i] == sorted[i / 2]
      ensures forall i :: 0 <= i < |s| && i % 2 == 1 ==> strange[i] == sorted[|s| - (i - 1) / 2 - 1]
      // post-conditions-end
  {
    assume{:axiom} false;
  }
  method strange_sort_list(s: seq<int>) returns (strange: seq<int>)
      // post-conditions-start
      ensures |s| == |strange|
      // post-conditions-end
  {
    assume{:axiom} false;
  }

vc-helpers: |-
  // Helper lemma to prove properties about sequences and multisets
  lemma MultisetPreservation(s: seq<int>, sorted: seq<int>)
    ensures multiset(s) == multiset(sorted) ==> |s| == |sorted|
  {
  }
  
  // Helper lemma to assist with indexing in strange_sort_list_helper
  lemma IndexMapping(s: seq<int>, strange: seq<int>, sorted: seq<int>)
    requires |s| == |sorted| == |strange|
    requires multiset(s) == multiset(sorted)
    requires forall i :: 0 <= i < |s| && i % 2 == 0 ==> strange[i] == sorted[i / 2]
    requires forall i :: 0 <= i < |s| && i % 2 == 1 ==> strange[i] == sorted[|s| - (i - 1) / 2 - 1]
    ensures |s| == |strange|
  {
  }

vc-description: |-
  function_signature: method SortSeq(s: seq<int>) returns (sorted: seq<int>)
  Sort elements. Ensures: the result is sorted according to the ordering relation; returns the correct size/count; returns a sorted permutation of the input.

vc-spec: |-
  method SortSeq(s: seq<int>) returns (sorted: seq<int>)
    // post-conditions-start
    ensures forall i, j :: 0 <= i < j < |sorted| ==> sorted[i] <= sorted[j]
    ensures |sorted| == |s|
    ensures multiset(s) == multiset(sorted)
    // post-conditions-end

vc-code: |-
  {
    // Implementation of a simple bubble sort to ensure the sequence is sorted
    var sortedSeq := s;
    var n := |s|;
    var i := 0;
    while i < n
      invariant 0 <= i <= n
      invariant forall k, l :: 0 <= k < l < |sortedSeq| && k <= i ==> sortedSeq[k] <= sortedSeq[l]
      invariant multiset(sortedSeq) == multiset(s)
      invariant |sortedSeq| == |s|
    {
      var j := 0;
      while j < n - i - 1
        invariant 0 <= j <= n - i - 1
        invariant forall k, l :: 0 <= k < l < |sortedSeq| && k <= i ==> sortedSeq[k] <= sortedSeq[l]
        invariant multiset(sortedSeq) == multiset(s)
        invariant |sortedSeq| == |s|
      {
        if sortedSeq[j] > sortedSeq[j + 1]
        {
          var temp := sortedSeq[j];
          sortedSeq := sortedSeq[j := sortedSeq[j + 1]];
          sortedSeq := sortedSeq[j + 1 := temp];
        }
        j := j + 1;
      }
      i := i + 1;
    }
    
    // Return the sorted sequence as per the specification
    return sortedSeq;
  }

vc-postamble: |-


