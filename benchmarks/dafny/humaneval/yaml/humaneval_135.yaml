vc-description: |-
  The task is to find the largest index in an array of distinct integers where an element is smaller than the element immediately before it. If no such index exists (i.e., the array is non-decreasing), return -1. The implementation should scan from right to left to efficiently find the largest such index.

vc-preamble: |-
  
  predicate ValidInput(arr: seq<int>) {
      forall i, j :: 0 <= i < j < |arr| ==> arr[i] != arr[j]
  }
  
  predicate HasDecreaseAt(arr: seq<int>, i: int) {
      1 <= i < |arr| && arr[i] < arr[i-1]
  }
  
  predicate IsLargestDecreaseIndex(arr: seq<int>, result: int) {
      HasDecreaseAt(arr, result) && 
      (forall j :: result < j < |arr| ==> arr[j] >= arr[j-1])
  }
  
  predicate IsNonDecreasing(arr: seq<int>) {
      forall i :: 1 <= i < |arr| ==> arr[i] >= arr[i-1]
  }

vc-helpers: |-

vc-spec: |-
  method can_arrange(arr: seq<int>) returns (result: int)
      requires ValidInput(arr)
      ensures result == -1 || (0 < result < |arr|)
      ensures result == -1 ==> IsNonDecreasing(arr)
      ensures result != -1 ==> IsLargestDecreaseIndex(arr, result)
      ensures result != -1 ==> (exists i :: HasDecreaseAt(arr, i))

vc-code: |-
  {
      assume {:axiom} false;
    }
vc-postamble: |-
