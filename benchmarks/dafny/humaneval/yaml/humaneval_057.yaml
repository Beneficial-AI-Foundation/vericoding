vc-description: |-
  This verification task implements a function to determine if a list of numbers is monotonic. A list is monotonic if it is either entirely non-decreasing (monotonically increasing) or entirely non-increasing (monotonically decreasing). Empty lists and single-element lists are considered monotonic, and lists with equal consecutive elements are allowed.

vc-preamble: |-

  function monotonic(l: seq<int>): bool
      ensures |l| <= 1 ==> monotonic(l) == true
      ensures |l| > 1 ==> (monotonic(l) == (
          (forall i :: 0 <= i < |l| - 1 ==> l[i] <= l[i + 1]) ||
          (forall i :: 0 <= i < |l| - 1 ==> l[i] >= l[i + 1])
      ))
  {
      if |l| <= 1 then true
      else
          var increasing := forall i :: 0 <= i < |l| - 1 ==> l[i] <= l[i + 1];
          var decreasing := forall i :: 0 <= i < |l| - 1 ==> l[i] >= l[i + 1];
          increasing || decreasing
  }

vc-helpers: |-

vc-spec: |-
  method IsMonotonic(l: seq<int>) returns (result: bool)
      ensures result == monotonic(l)

vc-code: |-
  {
      assume {:axiom} false;
    }
vc-postamble: |-
