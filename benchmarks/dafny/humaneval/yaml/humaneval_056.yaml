vc-description: |-
  This verification task implements a bracket matching algorithm that determines if a string containing only "<" and ">" characters has properly nested brackets. Every opening bracket "<" must have a corresponding closing bracket ">" and they must be correctly nested, meaning at no point should the number of closing brackets exceed the number of opening brackets in any prefix.

vc-preamble: |-
  
  function count_brackets_prefix(s: string, end: int, bracket: char): int
      requires 0 <= end <= |s|
      requires bracket == '<' || bracket == '>'
  {
      if end == 0 then 0
      else if s[end-1] == bracket then 1 + count_brackets_prefix(s, end-1, bracket)
      else count_brackets_prefix(s, end-1, bracket)
  }
  
  predicate ValidBracketString(s: string)
  {
      forall i :: 0 <= i < |s| ==> s[i] == '<' || s[i] == '>'
  }
  
  predicate ProperlyNested(brackets: string)
      requires ValidBracketString(brackets)
  {
      (forall k :: 0 <= k <= |brackets| ==> 
          count_brackets_prefix(brackets, k, '<') >= count_brackets_prefix(brackets, k, '>')) &&
      count_brackets_prefix(brackets, |brackets|, '<') == count_brackets_prefix(brackets, |brackets|, '>')
  }

vc-helpers: |-

vc-spec: |-
  method correct_bracketing(brackets: string) returns (result: bool)
      requires ValidBracketString(brackets)
      ensures result <==> ProperlyNested(brackets)

vc-code: |-
  {
      assume {:axiom} false;
    }
vc-postamble: |-
