vc-preamble: |-
  function dist(a: real, b: real) : (d : real)
      ensures d >= 0.0
      ensures (d == 0.0) <==> a == b
  {
      if a < b then b - a else a - b
  }
  function des(s: seq<real>, a: int, b: int) : bool {
      // distinct elements
      0 <= a < |s| && 0 <= b < |s| && a != b
  }

vc-helpers: |-


vc-description: |-
  function_signature: def find_closest_elements(numbers: List[float]) -> Tuple[float, float]
  From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).

vc-spec: |-
  method find_closest_elements(s: seq<real>) returns (l : real, h : real)
      // pre-conditions-start
      requires |s| >= 2
      // pre-conditions-end
      // post-conditions-start
      ensures exists a, b : int :: des(s, a, b) && l == s[a] && h == s[b]
      ensures forall a, b : int :: des(s, a, b) ==> dist(l, h) <= dist(s[a], s[b])
      ensures l <= h
      // post-conditions-end

vc-code: |-
  {
    assume false;
  }

vc-postamble: |-
