vc-description: |-
  This task involves implementing a method to find the largest even integer in a given range [x, y] inclusive, where x and y are positive integers. If no even integer exists in the range, the method should return -1.

vc-preamble: |-
  
  predicate ValidInput(x: int, y: int) {
      x > 0 && y > 0
  }
  
  predicate NoEvenInRange(x: int, y: int) {
      forall i :: x <= i <= y ==> i % 2 != 0
  }
  
  predicate IsLargestEvenInRange(x: int, y: int, result: int) {
      result % 2 == 0 && 
      x <= result <= y && 
      (forall i :: x <= i <= y && i % 2 == 0 ==> i <= result)
  }
  
  predicate CorrectResult(x: int, y: int, result: int) {
      if x > y then 
          result == -1
      else
          (result == -1 && NoEvenInRange(x, y)) ||
          IsLargestEvenInRange(x, y, result)
  }

vc-helpers: |-

vc-spec: |-
  method ChooseNum(x: int, y: int) returns (result: int)
      requires ValidInput(x, y)
      ensures CorrectResult(x, y, result)

vc-code: |-
  {
      assume {:axiom} false;
    }
vc-postamble: |-
