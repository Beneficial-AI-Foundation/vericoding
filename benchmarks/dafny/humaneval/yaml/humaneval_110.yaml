vc-description: |-
  This task involves determining if it's possible to exchange elements between two non-empty lists of integers such that the first list contains only even numbers. The method should return "YES" if such an exchange is possible, "NO" otherwise.

  The key insight is that we need at least as many even numbers across both lists as the length of the first list to make the first list contain only even numbers.

vc-preamble: |-

  function countEven(lst: seq<int>): int
      ensures countEven(lst) >= 0
      ensures countEven(lst) <= |lst|
  {
      if |lst| == 0 then 0
      else if lst[0] % 2 == 0 then 1 + countEven(lst[1..])
      else countEven(lst[1..])
  }

  predicate ValidInput(lst1: seq<int>, lst2: seq<int>)
  {
      |lst1| > 0 && |lst2| > 0
  }

  predicate CanExchange(lst1: seq<int>, lst2: seq<int>)
  {
      countEven(lst1) + countEven(lst2) >= |lst1|
  }

vc-helpers: |-

vc-spec: |-
  method exchange(lst1: seq<int>, lst2: seq<int>) returns (result: string)
      requires ValidInput(lst1, lst2)
      ensures result == "YES" || result == "NO"
      ensures result == "YES" <==> CanExchange(lst1, lst2)

vc-code: |-
  {
      assume {:axiom} false;
    }
vc-postamble: |-
