vc-description: |-
  This task involves implementing a string transformation method that applies one of two operations based on whether the string contains letters. If the string has at least one letter, swap the case of each letter (lowercase â†” uppercase) while keeping non-letters unchanged. If the string contains no letters, reverse the entire string.

vc-preamble: |-

  function hasLetter(s: string): bool
  {
      exists i :: 0 <= i < |s| && (('A' <= s[i] <= 'Z') || ('a' <= s[i] <= 'z'))
  }

  function reverseString(s: string): string
      ensures |reverseString(s)| == |s|
  {
      if |s| == 0 then s else s[|s|-1..] + reverseString(s[..|s|-1])
  }

  function swapCase(c: char): char
  {
      if 'A' <= c <= 'Z' then (c as int + 32) as char
      else if 'a' <= c <= 'z' then (c as int - 32) as char
      else c
  }

vc-helpers: |-

vc-spec: |-
  method solve(s: string) returns (result: string)
      ensures if hasLetter(s) then
          |result| == |s| && 
          (forall i :: 0 <= i < |s| ==> result[i] == swapCase(s[i]))
      else
          result == reverseString(s)
      ensures |result| == |s|

vc-code: |-
  {
      assume {:axiom} false;
    }
vc-postamble: |-
