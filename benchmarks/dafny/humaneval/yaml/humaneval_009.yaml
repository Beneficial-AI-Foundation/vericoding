vc-description: |-
  This verification task implements a rolling maximum function that takes a list of integers and returns a list where each element represents the maximum value encountered from the beginning of the list up to and including the current position.

vc-preamble: |-

  function max_up_to(numbers: seq<int>, index: int): int
      requires 0 <= index < |numbers|
  {
      if index == 0 then numbers[0]
      else 
          var prev_max := max_up_to(numbers, index - 1);
          if numbers[index] > prev_max then numbers[index] else prev_max
  }

vc-helpers: |-

vc-spec: |-
  method rolling_max(numbers: seq<int>) returns (result: seq<int>)
      ensures |result| == |numbers|
      ensures |numbers| == 0 ==> |result| == 0
      ensures |numbers| > 0 ==> |result| > 0
      ensures forall i :: 0 <= i < |result| ==> 
          result[i] == max_up_to(numbers, i)
      ensures forall i :: 0 <= i < |result| ==> 
          forall j :: 0 <= j <= i ==> numbers[j] <= result[i]
      ensures forall i :: 0 <= i < |result| ==> 
          exists j :: 0 <= j <= i && numbers[j] == result[i]

vc-code: |-
  {
      assume {:axiom} false;
    }
vc-postamble: |-
