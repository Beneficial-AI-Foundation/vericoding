vc-description: |-
  Given a list of numbers with at least two elements, find the pair of numbers with the smallest absolute difference between them. Return the pair as a tuple ordered from smaller to larger value. The implementation uses nested loops to compare all pairs and track the minimum difference found.

vc-preamble: |-
  
  function AbsDiff(x: real, y: real): real
  {
    if x >= y then x - y else y - x
  }
  
  predicate ValidInput(numbers: seq<real>)
  {
    |numbers| >= 2
  }
  
  predicate IsOptimalPair(numbers: seq<real>, pair: (real, real))
  {
    pair.0 in numbers &&
    pair.1 in numbers &&
    pair.0 <= pair.1 &&
    forall i, j :: 0 <= i < |numbers| && 0 <= j < |numbers| && i != j ==>
      AbsDiff(numbers[i], numbers[j]) >= AbsDiff(pair.0, pair.1)
  }

vc-helpers: |-

vc-spec: |-
  method find_closest_elements(numbers: seq<real>) returns (result: (real, real))
    requires ValidInput(numbers)
    ensures IsOptimalPair(numbers, result)

vc-code: |-
  {
      assume {:axiom} false;
    }
vc-postamble: |-
