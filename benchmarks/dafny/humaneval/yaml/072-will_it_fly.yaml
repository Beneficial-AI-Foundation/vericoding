vc-preamble: |-
vc-helpers: |-


vc-description: |-
  /*
  function_signature: def will_it_fly(q: List[int], w: int) -> bool
  Write a function that returns True if the object q will fly, and False otherwise. The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.
  */

vc-spec: |-
  method will_it_fly(s: seq<int>, w: int) returns (result: bool)
      // pre-conditions-start
      requires |s| > 0
      // pre-conditions-end
      // post-conditions-start
      ensures result <==> is_palindrome_pred(s) && sum(s) <= w
      // post-conditions-end

vc-code: |-
  {
    assume false;
  }

vc-postamble: |-
  function is_palindrome_pred(s : seq<int>) : bool {
      forall k :: 0 <= k < |s| ==> s[k] == s[|s| - 1 - k]
  }
  // pure-end
  function sum(s: seq<int>) : int {
      if |s| == 0 then 0 else s[0] + sum(s[1..])
  }
  // pure-end

