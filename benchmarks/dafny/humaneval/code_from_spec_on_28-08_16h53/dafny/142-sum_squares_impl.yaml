vc-preamble: |-
  function sum(s: seq<int>) : int
  {
      if |s| == 0 then 0 else s[0] + sum(s[1..])
  }
  function square_seq(lst: seq<int>) : (sq : seq<int>)
      ensures |sq| == |lst|
  {
      seq(|lst|, i requires 0 <= i < |lst| => if i % 3 == 0 then lst[i] * lst[i] else (if i % 4 == 0 then lst[i] * lst[i] * lst[i] else lst[i]))
  }

vc-helpers: |-
  lemma sum_square_seq_property(lst: seq<int>)
      ensures sum(square_seq(lst)) == sum(seq(|lst|, i requires 0 <= i < |lst| => 
          if i % 3 == 0 then lst[i] * lst[i] 
          else (if i % 4 == 0 then lst[i] * lst[i] * lst[i] 
                else lst[i])))
  {
      assert square_seq(lst) == seq(|lst|, i requires 0 <= i < |lst| => 
          if i % 3 == 0 then lst[i] * lst[i] 
          else (if i % 4 == 0 then lst[i] * lst[i] * lst[i] 
                else lst[i]));
  }

vc-description: |-
  function_signature: def sum_squares(lst: List[int]) -> int
  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.

vc-spec: |-
  function sum_squares(lst: seq<int>) : int
      ensures sum_squares(lst) == sum(square_seq(lst))

vc-code: |-
  {
      sum(square_seq(lst))
  }

vc-postamble: |-


