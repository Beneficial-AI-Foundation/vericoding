vc-preamble: |-


vc-helpers: |-
  predicate IsPalindromic(arr: seq<int>)
  {
    forall i :: 0 <= i < |arr| ==> arr[i] == arr[|arr| - 1 - i]
  }
  
  function CountDifferences(arr: seq<int>): int
    requires |arr| >= 0
    ensures CountDifferences(arr) >= 0
  {
    if |arr| <= 1 then 0
    else 
      var pairs := |arr| / 2;
      CountMismatchedPairs(arr, 0, pairs)
  }
  
  function CountMismatchedPairs(arr: seq<int>, index: int, pairs: int): int
    requires 0 <= index <= pairs
    requires pairs == |arr| / 2
    requires |arr| >= 0
    ensures CountMismatchedPairs(arr, index, pairs) >= 0
    decreases pairs - index
  {
    if index >= pairs then 0
    else 
      var left := index;
      var right := |arr| - 1 - index;
      var mismatch := if arr[left] != arr[right] then 1 else 0;
      mismatch + CountMismatchedPairs(arr, index + 1, pairs)
  }
  
  lemma CountDifferencesCorrect(arr: seq<int>)
    ensures CountDifferences(arr) == 0 <==> IsPalindromic(arr)
  {
    if |arr| <= 1 {
      assert IsPalindromic(arr);
    } else {
      CountMismatchedPairsCorrect(arr, 0, |arr| / 2);
    }
  }
  
  lemma CountMismatchedPairsCorrect(arr: seq<int>, index: int, pairs: int)
    requires 0 <= index <= pairs
    requires pairs == |arr| / 2
    requires |arr| >= 0
    ensures CountMismatchedPairs(arr, index, pairs) == 0 <==> 
      (forall i :: index <= i < pairs ==> arr[i] == arr[|arr| - 1 - i])
    decreases pairs - index
  {
    if index >= pairs {
      assert forall i :: index <= i < pairs ==> arr[i] == arr[|arr| - 1 - i];
    } else {
      CountMismatchedPairsCorrect(arr, index + 1, pairs);
    }
  }
  
  lemma CountMismatchedPairsIncremental(arr: seq<int>, index: int, pairs: int)
    requires 0 <= index < pairs
    requires pairs == |arr| / 2
    requires |arr| >= 0
    ensures CountMismatchedPairs(arr, 0, index + 1) == 
      CountMismatchedPairs(arr, 0, index) + (if arr[index] != arr[|arr| - 1 - index] then 1 else 0)
  {
    if index == 0 {
    } else {
      CountMismatchedPairsIncremental(arr, index - 1, pairs);
    }
  }

vc-description: |-
  function_signature: def smallest_change(arr: List[int]) -> int
  Given an array arr of integers, find the minimum number of elements that need to be changed to make the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one element to any other element.

vc-spec: |-
  method SmallestChange(arr: seq<int>) returns (changes: int)
    ensures changes >= 0
    ensures changes <= |arr| / 2
    ensures IsPalindromic(arr) ==> changes == 0
    ensures changes == CountDifferences(arr)

vc-code: |-
  {
    changes := 0;
    var n := |arr|;
    
    if n <= 1 {
      CountDifferencesCorrect(arr);
      return;
    }
    
    var i := 0;
    while i < n / 2
      invariant 0 <= i <= n / 2
      invariant changes >= 0
      invariant changes <= i
      invariant changes == CountMismatchedPairs(arr, 0, i)
    {
      if arr[i] != arr[n - 1 - i] {
        changes := changes + 1;
      }
      CountMismatchedPairsIncremental(arr, i, n / 2);
      i := i + 1;
    }
    
    CountDifferencesCorrect(arr);
  }

vc-postamble: |-


