vc-preamble: |-
  function encode_char(c: char): char
    // pre-conditions-start
    requires 'a' <= c <= 'z'
    // pre-conditions-end
    // post-conditions-start
    ensures 'a' <= encode_char(c) <= 'z'
    // post-conditions-end
  {
    // impl-start
    ((c as int - 'a' as int + 5) % 26 + 'a' as int) as char
    // impl-end
  }
  function decode_char(c: char): char
    // pre-conditions-start
    requires 'a' <= c <= 'z'
    // pre-conditions-end
    // post-conditions-start
    ensures 'a' <= decode_char(c) <= 'z'
    ensures encode_char(decode_char(c)) == c
    // post-conditions-end
  {
    // impl-start
    ((c as int - 'a' as int - 5) % 26 + 'a' as int) as char
    // impl-end
  }

vc-helpers: |-
  lemma encode_char_bounds(c: char)
    requires 'a' <= c <= 'z'
    ensures 'a' <= encode_char(c) <= 'z'
  {
    // This is proven by the postcondition of encode_char
  }
  
  lemma encode_preserves_bounds(s: string, i: int)
    requires forall j :: 0 <= j < |s| ==> 'a' <= s[j] <= 'z'
    requires 0 <= i < |s|
    ensures 'a' <= encode_char(s[i]) <= 'z'
  {
    encode_char_bounds(s[i]);
  }

vc-description: |-
  function_signature: method encode_shift(s: string) returns (t: string)
  Encode data. Requires: the condition holds for all values. Ensures: returns the correct size/count; the condition holds for all values.

vc-spec: |-
  method encode_shift(s: string) returns (t: string)
    requires forall i :: 0 <= i < |s| ==> 'a' <= s[i] <= 'z'
    ensures |s| == |t|
    ensures forall i :: 0 <= i < |s| ==> 'a' <= t[i] <= 'z'
    ensures forall i :: 0 <= i < |s| ==> t[i] == encode_char(s[i])

vc-code: |-
  {
    t := "";
    var i := 0;
    while i < |s|
      invariant 0 <= i <= |s|
      invariant |t| == i
      invariant forall j :: 0 <= j < i ==> 'a' <= t[j] <= 'z'
      invariant forall j :: 0 <= j < i ==> t[j] == encode_char(s[j])
    {
      encode_preserves_bounds(s, i);
      t := t + [encode_char(s[i])];
      i := i + 1;
    }
  }

vc-postamble: |-
  method decode_shift(s: string) returns (t: string)
    // pre-conditions-start
    requires forall i :: 0 <= i < |s| ==> 'a' <= s[i] <= 'z'
    // pre-conditions-end
    // post-conditions-start
    ensures |s| == |t|
    ensures forall i :: 0 <= i < |s| ==> t[i] == decode_char(s[i])
    // post-conditions-end
  {
    assume{:axiom} false;
  }

