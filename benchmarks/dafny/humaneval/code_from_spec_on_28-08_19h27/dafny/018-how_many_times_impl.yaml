vc-preamble: |-


vc-helpers: |-
  // Helper lemma to establish the relationship between sets before and after loop iteration
  lemma LoopInvariantHelper(s: string, substring: string, i: int)
    requires |substring| > 0
    requires 0 <= i <= |s| - |substring|
    ensures (set j {:trigger s[j..j+|substring|]} | 0 <= j < i+1 && s[j..j+|substring|] == substring) == 
            (set j {:trigger s[j..j+|substring|]} | 0 <= j < i && s[j..j+|substring|] == substring) + 
            (if s[i..i+|substring|] == substring then {i} else {})
  {
    var setUpToI := set j {:trigger s[j..j+|substring|]} | 0 <= j < i && s[j..j+|substring|] == substring;
    var setUpToIPlus1 := set j {:trigger s[j..j+|substring|]} | 0 <= j < i+1 && s[j..j+|substring|] == substring;
    
    if s[i..i+|substring|] == substring {
      assert setUpToIPlus1 == setUpToI + {i};
    } else {
      assert setUpToIPlus1 == setUpToI;
    }
  }
  
  // Lemma to prove postcondition at end of loop
  lemma PostconditionHelper(s: string, substring: string, i: int)
    requires |substring| > 0
    requires i == |s| - |substring| + 1
    ensures (set j {:trigger s[j..j+|substring|]} | 0 <= j < i && s[j..j+|substring|] == substring) ==
            (set k {:trigger s[k..k+|substring|]} | 0 <= k <= |s| - |substring| && s[k..k+|substring|] == substring)
  {
    assert i - 1 == |s| - |substring|;
    assert (set j | 0 <= j < i && s[j..j+|substring|] == substring) ==
           (set k | 0 <= k <= |s| - |substring| && s[k..k+|substring|] == substring);
  }

vc-description: |-
  function_signature: def how_many_times(string: str, substring: str) -> int
  Find how many times a given substring can be found in the original string. Count overlaping cases.

vc-spec: |-
  method HowManyTimes(s: string, substring: string) returns (count: int)
    requires |substring| > 0
    ensures count >= 0
    ensures count == |set i {:trigger s[i..i+|substring|]} | 0 <= i <= |s| - |substring| && s[i..i+|substring|] == substring|

vc-code: |-
  {
    count := 0;
    if |substring| > |s| {
      return;
    }
    
    var i := 0;
    while i <= |s| - |substring|
      invariant 0 <= i <= |s| - |substring| + 1
      invariant count == |set j {:trigger s[j..j+|substring|]} | 0 <= j < i && s[j..j+|substring|] == substring|
    {
      LoopInvariantHelper(s, substring, i);
      if s[i..i+|substring|] == substring {
        count := count + 1;
      }
      i := i + 1;
    }
    
    PostconditionHelper(s, substring, i);
  }

vc-postamble: |-


