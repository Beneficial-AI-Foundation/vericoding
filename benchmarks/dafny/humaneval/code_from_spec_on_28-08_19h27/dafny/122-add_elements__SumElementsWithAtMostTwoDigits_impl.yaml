vc-preamble: |-
  function sum(s: seq<int>) : int {
    if |s| == 0 then 0 else s[0] + sum(s[1..])
  }
  function select_at_most_two_digits_rec(arr: seq<int>): seq<int>
    requires |arr| >= 0 && |arr| <= 100
  {
    if |arr| == 0 then []
    else if 0 <= arr[0] < 100 then [arr[0]] + select_at_most_two_digits_rec(arr[1..])
    else select_at_most_two_digits_rec(arr[1..])
  }
  method select_at_most_two_digits(arr: seq<int>) returns (result: seq<int>)
    // pre-conditions-start
    requires |arr| > 0 && |arr| <= 100
    // pre-conditions-end
    // post-conditions-start
    ensures forall i :: 0 <= i < |result| ==> 0 <= result[i] < 100
    ensures forall i :: 0 <= i < |result| ==> result[i] in arr
    ensures result == select_at_most_two_digits_rec(arr)
    // post-conditions-end
  {
    assume{:axiom} false;
  }

vc-helpers: |-
  lemma sum_append_one(s: seq<int>, x: int)
    ensures sum(s + [x]) == sum(s) + x
  {
    if |s| == 0 {
      assert s + [x] == [x];
      assert sum([x]) == x;
      assert sum(s) == 0;
    } else {
      assert s == [s[0]] + s[1..];
      assert s + [x] == [s[0]] + (s[1..] + [x]);
      sum_append_one(s[1..], x);
    }
  }
  
  lemma sum_prefix_property(s: seq<int>, i: int)
    requires 0 <= i < |s|
    ensures sum(s[..i+1]) == sum(s[..i]) + s[i]
  {
    assert s[..i+1] == s[..i] + [s[i]];
    sum_append_one(s[..i], s[i]);
  }

vc-description: |-
  function_signature: method SumElementsWithAtMostTwoDigits(arr: seq<int>, k: int) returns (s: int)
  Calculate sum. Requires: the size is bounded; the size is bounded. Ensures: selects only numbers with at most two digits.

vc-spec: |-
  method SumElementsWithAtMostTwoDigits(arr: seq<int>, k: int) returns (s: int)
    requires |arr| >= 0 && |arr| <= 100
    ensures s == sum(select_at_most_two_digits_rec(arr))

vc-code: |-
  {
    var filtered := select_at_most_two_digits_rec(arr);
    s := 0;
    var i := 0;
    while i < |filtered|
      invariant 0 <= i <= |filtered|
      invariant s == sum(filtered[..i])
    {
      sum_prefix_property(filtered, i);
      s := s + filtered[i];
      i := i + 1;
    }
    assert i == |filtered|;
    assert filtered[..i] == filtered;
    assert s == sum(filtered);
  }

vc-postamble: |-


