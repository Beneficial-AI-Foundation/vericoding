vc-preamble: |-


vc-helpers: |-


vc-description: |-
  function_signature: def monotonic(numbers: List[int]) -> Bool
  Return True if list elements are monotonically increasing or decreasing.

vc-spec: |-
  method monotonic(numbers: seq<int>) returns (result: bool)
    ensures result <==> (|numbers| <= 1 || 
      (forall i :: 0 <= i < |numbers| - 1 ==> numbers[i] <= numbers[i+1]) ||
      (forall i :: 0 <= i < |numbers| - 1 ==> numbers[i] >= numbers[i+1]))

vc-code: |-
  {
    if |numbers| <= 1 {
      result := true;
      return;
    }
    
    var increasing := true;
    var decreasing := true;
    var i := 0;
    
    while i < |numbers| - 1
      invariant 0 <= i <= |numbers| - 1
      invariant increasing ==> (forall j :: 0 <= j < i ==> numbers[j] <= numbers[j+1])
      invariant decreasing ==> (forall j :: 0 <= j < i ==> numbers[j] >= numbers[j+1])
      invariant !increasing ==> (exists j :: 0 <= j < i && numbers[j] > numbers[j+1])
      invariant !decreasing ==> (exists j :: 0 <= j < i && numbers[j] < numbers[j+1])
    {
      if numbers[i] > numbers[i+1] {
        increasing := false;
      }
      if numbers[i] < numbers[i+1] {
        decreasing := false;
      }
      i := i + 1;
    }
    
    result := increasing || decreasing;
  }

vc-postamble: |-


