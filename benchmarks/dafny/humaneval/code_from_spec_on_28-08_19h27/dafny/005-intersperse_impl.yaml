vc-preamble: |-


vc-helpers: |-


vc-description: |-
  function_signature: def intersperse(numbers: List[int], delimeter: int) -> List[int]
  Insert a number 'delimeter' between every two consecutive elements of input list `numbers'

vc-spec: |-
  method intersperse(numbers: seq<int>, delimiter: int) returns (result: seq<int>)
    ensures |numbers| <= 1 ==> result == numbers
    ensures |numbers| >= 2 ==> |result| == 2 * |numbers| - 1
    ensures |numbers| >= 2 ==> forall i :: 0 <= i < |numbers| ==> result[2*i] == numbers[i]
    ensures |numbers| >= 2 ==> forall i :: 0 <= i < |numbers| - 1 ==> result[2*i + 1] == delimiter

vc-code: |-
  {
    if |numbers| <= 1 {
      result := numbers;
    } else {
      result := [numbers[0]];
      var i := 1;
      while i < |numbers|
        invariant 1 <= i <= |numbers|
        invariant |result| == 2 * i - 1
        invariant forall j :: 0 <= j < i ==> result[2*j] == numbers[j]
        invariant forall j :: 0 <= j < i - 1 ==> result[2*j + 1] == delimiter
      {
        result := result + [delimiter, numbers[i]];
        i := i + 1;
      }
    }
  }

vc-postamble: |-


