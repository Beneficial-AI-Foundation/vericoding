vc-preamble: |-
  type SortSeqState = seq<(int, int)>
  function less(a: (int, int), b: (int, int)): bool {
    var (x, y) := a; var (u, v) := b;
    x < u || (x == u && y > v)
  }
  function less_eq(a: (int, int), b: (int, int)): bool {
    var (x, y) := a; var (u, v) := b;
    (x == u && y == v) || less(a, b)
  }

vc-helpers: |-
  lemma RowInvariant(lst: seq<seq<int>>, x: int, pos: SortSeqState)
    requires forall i :: 0 <= i < |pos| ==> 0 <= pos[i].1 < |lst| && 0 <= pos[i].0 < |lst[pos[i].1]|
    requires forall i :: 0 <= i < |pos| ==> lst[pos[i].1][pos[i].0] == x
    ensures forall i :: 0 <= i < |pos| ==> lst[pos[i].1][pos[i].0] == x
  {
  }
  
  lemma ValidIndices(lst: seq<seq<int>>, pos: SortSeqState)
    requires forall i :: 0 <= i < |pos| ==> 0 <= pos[i].1 < |lst| && 0 <= pos[i].0 < |lst[pos[i].1]|
    ensures forall i :: 0 <= i < |pos| ==> 0 <= pos[i].1 < |lst|
    ensures forall i :: 0 <= i < |pos| ==> 0 <= pos[i].0 < |lst[pos[i].1]|
  {
  }

vc-description: |-
  function_signature: method get_row(lst: seq<seq<int>>, x: int) returns (pos: SortSeqState)
  Retrieve elements. Ensures: the condition holds for all values; the condition holds for all values; the condition holds for all values.

vc-spec: |-
  method get_row(lst: seq<seq<int>>, x: int) returns (pos: SortSeqState)
    ensures forall i :: 0 <= i < |pos| ==> 0 <= pos[i].1 < |lst| && 0 <= pos[i].0 < |lst[pos[i].1]|
    ensures forall i :: 0 <= i < |pos| ==> lst[pos[i].1][pos[i].0] == x
    ensures forall i, j :: 0 <= i < |lst| && 0 <= j < |lst[i]| && lst[i][j] == x ==> (j, i) in pos

vc-code: |-
  {
    pos := [];
    var row := 0;
    while row < |lst|
      invariant 0 <= row <= |lst|
      invariant forall i :: 0 <= i < |pos| ==> 0 <= pos[i].1 < |lst| && 0 <= pos[i].0 < |lst[pos[i].1]|
      invariant forall i :: 0 <= i < |pos| ==> lst[pos[i].1][pos[i].0] == x
      invariant forall i :: 0 <= i < |pos| ==> pos[i].1 < row
      invariant forall i, j :: 0 <= i < row && 0 <= j < |lst[i]| && lst[i][j] == x ==> (j, i) in pos
    {
      var col := 0;
      while col < |lst[row]|
        invariant 0 <= col <= |lst[row]|
        invariant forall i :: 0 <= i < |pos| ==> 0 <= pos[i].1 < |lst| && 0 <= pos[i].0 < |lst[pos[i].1]|
        invariant forall i :: 0 <= i < |pos| ==> lst[pos[i].1][pos[i].0] == x
        invariant forall i :: 0 <= i < |pos| ==> pos[i].1 <= row
        invariant forall i :: 0 <= i < |pos| && pos[i].1 == row ==> pos[i].0 < col
        invariant forall i, j :: 0 <= i < row && 0 <= j < |lst[i]| && lst[i][j] == x ==> (j, i) in pos
        invariant forall j :: 0 <= j < col && lst[row][j] == x ==> (j, row) in pos
      {
        if lst[row][col] == x {
          pos := pos + [(col, row)];
        }
        col := col + 1;
      }
      row := row + 1;
    }
  }

vc-postamble: |-
  method SortSeq(s: SortSeqState) returns (sorted: SortSeqState)
    // post-conditions-start
    ensures forall i, j :: 0 <= i < j < |sorted| ==> less_eq(sorted[i], sorted[j])
    ensures |sorted| == |s|
    ensures multiset(s) == multiset(sorted)
    // post-conditions-end
  {
    assume{:axiom} false;
  }

