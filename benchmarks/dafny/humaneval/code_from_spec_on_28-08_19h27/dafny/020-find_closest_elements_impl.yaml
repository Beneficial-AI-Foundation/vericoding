vc-preamble: |-
  function dist(a: real, b: real) : (d : real)
      ensures d >= 0.0
      ensures (d == 0.0) <==> a == b
  {
      if a < b then b - a else a - b
  }
  function des(s: seq<real>, a: int, b: int) : bool {
      // distinct elements
      0 <= a < |s| && 0 <= b < |s| && a != b
  }

vc-helpers: |-
  lemma DistSymmetric(a: real, b: real)
      ensures dist(a, b) == dist(b, a)
  {
  }
  
  lemma DistTriangleInequality(a: real, b: real, c: real)
      ensures dist(a, c) <= dist(a, b) + dist(b, c)
  {
  }
  
  lemma MinDistanceExists(numbers: seq<real>)
      requires |numbers| >= 2
      ensures exists i, j :: 0 <= i < |numbers| && 0 <= j < |numbers| && i != j &&
              forall k, l :: 0 <= k < |numbers| && 0 <= l < |numbers| && k != l ==>
              dist(numbers[i], numbers[j]) <= dist(numbers[k], numbers[l])
  {
  }

vc-description: |-
  function_signature: def find_closest_elements(numbers: List[float]) -> Tuple[float, float]
  From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).

vc-spec: |-
  method find_closest_elements(numbers: seq<real>) returns (first: real, second: real)
      requires |numbers| >= 2
      ensures first <= second
      ensures first in numbers && second in numbers
      ensures exists i, j :: 0 <= i < |numbers| && 0 <= j < |numbers| && i != j &&
              ((numbers[i] == first && numbers[j] == second) || (numbers[i] == second && numbers[j] == first))
      ensures forall k, l :: 0 <= k < |numbers| && 0 <= l < |numbers| && k != l ==>
              dist(first, second) <= dist(numbers[k], numbers[l])

vc-code: |-
  {
      var min_dist := dist(numbers[0], numbers[1]);
      var closest_i := 0;
      var closest_j := 1;
      
      var i := 0;
      while i < |numbers|
          invariant 0 <= i <= |numbers|
          invariant 0 <= closest_i < |numbers| && 0 <= closest_j < |numbers| && closest_i != closest_j
          invariant min_dist == dist(numbers[closest_i], numbers[closest_j])
          invariant forall k, l :: 0 <= k < i && 0 <= l < |numbers| && k != l ==>
                   min_dist <= dist(numbers[k], numbers[l])
          invariant forall k, l :: 0 <= k < |numbers| && 0 <= l < k && l < i ==>
                   min_dist <= dist(numbers[k], numbers[l])
      {
          var j := i + 1;
          while j < |numbers|
              invariant i < j <= |numbers|
              invariant 0 <= closest_i < |numbers| && 0 <= closest_j < |numbers| && closest_i != closest_j
              invariant min_dist == dist(numbers[closest_i], numbers[closest_j])
              invariant forall k, l :: 0 <= k < i && 0 <= l < |numbers| && k != l ==>
                       min_dist <= dist(numbers[k], numbers[l])
              invariant forall k, l :: 0 <= k < |numbers| && 0 <= l < k && l < i ==>
                       min_dist <= dist(numbers[k], numbers[l])
              invariant forall l :: i < l < j ==> min_dist <= dist(numbers[i], numbers[l])
          {
              var current_dist := dist(numbers[i], numbers[j]);
              if current_dist < min_dist {
                  min_dist := current_dist;
                  closest_i := i;
                  closest_j := j;
              }
              j := j + 1;
          }
          i := i + 1;
      }
      
      if numbers[closest_i] <= numbers[closest_j] {
          first := numbers[closest_i];
          second := numbers[closest_j];
      } else {
          first := numbers[closest_j];
          second := numbers[closest_i];
      }
  }

vc-postamble: |-


