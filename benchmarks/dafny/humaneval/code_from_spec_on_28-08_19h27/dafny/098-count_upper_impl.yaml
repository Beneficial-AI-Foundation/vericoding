vc-preamble: |-


vc-helpers: |-
  lemma CountUpperVowelsLeqLength(s: string, i: int)
    requires 0 <= i <= |s|
    ensures CountUpperVowels(s, i) <= i
  {
    if i == 0 {
    } else {
      CountUpperVowelsLeqLength(s, i-1);
    }
  }
  
  function CountUpperVowels(s: string, i: int): int
    requires 0 <= i <= |s|
  {
    if i == 0 then 0
    else CountUpperVowels(s, i-1) + (if (i-1) % 2 == 0 && is_upper_vowel(s[i-1]) then 1 else 0)
  }

vc-description: |-
  function_signature: def count_upper(s : String) -> Int
  Given a string s, count the number of uppercase vowels in even indices.

vc-spec: |-
  method count_upper(s: string) returns (count: int)
    ensures count >= 0
    ensures count <= |s|
    ensures count == CountUpperVowels(s, |s|)

vc-code: |-
  {
    count := 0;
    var i := 0;
    while i < |s|
      invariant 0 <= i <= |s|
      invariant count >= 0
      invariant count == CountUpperVowels(s, i)
    {
      if i % 2 == 0 && is_upper_vowel(s[i]) {
        count := count + 1;
      }
      i := i + 1;
    }
    CountUpperVowelsLeqLength(s, |s|);
  }

vc-postamble: |-
  function is_upper_vowel(c: char) : bool {
    c == 'A' || c == 'E' || c == 'U' || c == 'I' || c == 'O'
  }
  // pure-end

