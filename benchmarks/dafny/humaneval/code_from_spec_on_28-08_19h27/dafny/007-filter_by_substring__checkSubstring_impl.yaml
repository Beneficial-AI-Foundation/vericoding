vc-preamble: |-


vc-helpers: |-
  predicate isSubstringAt(s: string, sub: string, pos: int)
      requires 0 <= pos <= |s|
  {
      pos + |sub| <= |s| && s[pos..pos + |sub|] == sub
  }
  
  predicate containsSubstring(s: string, sub: string)
  {
      exists i :: 0 <= i <= |s| - |sub| && isSubstringAt(s, sub, i)
  }
  
  lemma emptySubstringInAnyString(s: string)
      ensures containsSubstring(s, "")
  {
      assert isSubstringAt(s, "", 0);
  }

vc-description: |-
  function_signature: method checkSubstring(s: string, sub: string) returns (result: bool)
  Check condition.

vc-spec: |-
  method checkSubstring(s: string, sub: string) returns (result: bool)
      ensures result <==> containsSubstring(s, sub)

vc-code: |-
  {
      if |sub| == 0 {
          emptySubstringInAnyString(s);
          result := true;
          return;
      }
      
      if |sub| > |s| {
          result := false;
          return;
      }
      
      var i := 0;
      while i <= |s| - |sub|
          invariant 0 <= i <= |s| - |sub| + 1
          invariant forall j :: 0 <= j < i ==> !isSubstringAt(s, sub, j)
      {
          if s[i..i + |sub|] == sub {
              assert isSubstringAt(s, sub, i);
              result := true;
              return;
          }
          i := i + 1;
      }
      
      result := false;
  }

vc-postamble: |-
  method filter_by_substring(strings: seq<string>, substring: string) returns (res : seq<string>)
      // post-conditions-start
      ensures |res| <= |strings|
      ensures (forall s :: s in res ==> s in strings)
      // post-conditions-end
  {
    assume{:axiom} false;
  }

