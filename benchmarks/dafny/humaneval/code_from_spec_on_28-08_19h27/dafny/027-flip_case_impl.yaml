vc-preamble: |-
  function lower(c: char) : bool
      {
          'a' <= c <= 'z'
      }
  function upper(c: char) : bool
      {
          'A' <= c <= 'Z'
      }
  function alpha(c: char) : bool
      {
          lower(c) || upper(c)
      }
  function flip_char(c: char) : (C: char)
          ensures lower(c) <==> upper(C)
          ensures upper(c) <==> lower(C)
      {
          if lower(c) then c - 'a' + 'A' else
          if upper(c) then c + 'a' - 'A' else c
      }

vc-helpers: |-
  lemma flip_char_preserves_alpha(c: char)
      ensures alpha(c) ==> alpha(flip_char(c))
  {
  }
  
  lemma flip_char_involutive(c: char)
      ensures flip_char(flip_char(c)) == c
  {
  }
  
  lemma flip_case_length(s: string)
      ensures |flip_case(s)| == |s|
  {
      if s == "" {
      } else {
          flip_case_length(s[1..]);
      }
  }
  
  lemma flip_case_involutive(s: string)
      ensures flip_case(flip_case(s)) == s
  {
      if s == "" {
      } else {
          flip_char_involutive(s[0]);
          flip_case_involutive(s[1..]);
      }
  }

vc-description: |-
  function_signature: def flip_case(string: str) -> str
  For a given string, flip lowercase characters to uppercase and uppercase to lowercase.

vc-spec: |-
  function flip_case(s: string): (result: string)
      ensures |result| == |s|
      ensures forall i :: 0 <= i < |s| ==> result[i] == flip_char(s[i])
      ensures forall i :: 0 <= i < |s| ==> (lower(s[i]) <==> upper(result[i]))
      ensures forall i :: 0 <= i < |s| ==> (upper(s[i]) <==> lower(result[i]))

vc-code: |-
  {
      if s == "" then ""
      else [flip_char(s[0])] + flip_case(s[1..])
  }

vc-postamble: |-


