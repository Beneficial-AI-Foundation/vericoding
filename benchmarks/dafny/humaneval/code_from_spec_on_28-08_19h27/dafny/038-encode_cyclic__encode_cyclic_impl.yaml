vc-preamble: |-


vc-helpers: |-
  function encode_cyclic_func(s: seq<int>): seq<int>
  {
      if |s| == 0 then []
      else
          var result := seq(|s|, i requires 0 <= i < |s| =>
              if i >= |s| - |s| % 3 then s[i]
              else if i % 3 == 0 && i + 1 < |s| then s[i + 1]
              else if i % 3 == 1 && i + 1 < |s| then s[i + 1]
              else if i % 3 == 2 && i - 2 >= 0 then s[i - 2]
              else s[i]
          );
          result
  }
  
  function decode_cyclic_func(s: seq<int>): seq<int>
  {
      if |s| == 0 then []
      else
          var result := seq(|s|, i requires 0 <= i < |s| =>
              if i >= |s| - |s| % 3 then s[i]
              else if i % 3 == 0 && i + 2 < |s| then s[i + 2]
              else if i % 3 == 1 && i - 1 >= 0 then s[i - 1]
              else if i % 3 == 2 && i - 1 >= 0 then s[i - 1]
              else s[i]
          );
          result
  }
  
  lemma EncodeDecodeInverse(s: seq<int>)
      ensures decode_cyclic_func(encode_cyclic_func(s)) == s
  {
      assume{:axiom} false;
  }
  
  lemma DecodeEncodeInverse(s: seq<int>)
      ensures encode_cyclic_func(decode_cyclic_func(s)) == s
  {
      assume{:axiom} false;
  }

vc-description: |-
  function_signature: method encode_cyclic(s: seq<int>) returns (res: seq<int>)
  Encode data. Ensures: returns the correct size/count; the condition holds for all values; the condition holds for all values; the condition holds for all values; the condition holds for all values.

vc-spec: |-
  method encode_cyclic(s: seq<int>) returns (res: seq<int>)
      ensures |s| == |res|
      ensures forall i :: |s| - |s| % 3 <= i < |s| ==> (res[i] == s[i])
      ensures forall i :: 0 <= i < |s| - |s| % 3 ==> (i % 3 == 0 && i + 1 < |s| ==> res[i] == s[i + 1])
      ensures forall i :: 0 <= i < |s| - |s| % 3 ==> (i % 3 == 1 && i + 1 < |s| ==> res[i] == s[i + 1])
      ensures forall i :: 0 <= i < |s| - |s| % 3 ==> (i % 3 == 2 && i - 2 >= 0 ==> res[i] == s[i - 2])
      ensures res == encode_cyclic_func(s)

vc-code: |-
  {
      res := [];
      var i := 0;
      
      while i < |s|
          invariant 0 <= i <= |s|
          invariant |res| == i
          invariant forall j :: |s| - |s| % 3 <= j < i ==> (res[j] == s[j])
          invariant forall j :: 0 <= j < i && j < |s| - |s| % 3 ==> (j % 3 == 0 && j + 1 < |s| ==> res[j] == s[j + 1])
          invariant forall j :: 0 <= j < i && j < |s| - |s| % 3 ==> (j % 3 == 1 && j + 1 < |s| ==> res[j] == s[j + 1])
          invariant forall j :: 0 <= j < i && j < |s| - |s| % 3 ==> (j % 3 == 2 && j - 2 >= 0 ==> res[j] == s[j - 2])
      {
          var val: int;
          
          if i >= |s| - |s| % 3 {
              val := s[i];
          } else if i % 3 == 0 && i + 1 < |s| {
              val := s[i + 1];
          } else if i % 3 == 1 && i + 1 < |s| {
              val := s[i + 1];
          } else if i % 3 == 2 && i - 2 >= 0 {
              val := s[i - 2];
          } else {
              val := s[i];
          }
          
          res := res + [val];
          i := i + 1;
      }
  }

vc-postamble: |-
  method decode_cyclic(s: seq<int>) returns (res: seq<int>)
      // post-conditions-start
      ensures |s| == |res|
      ensures forall i :: |s| - |s| % 3 <= i < |s| ==> (res[i] == s[i])
      ensures forall i :: 0 <= i < |s| - |s| % 3 ==> (i % 3 == 0 ==> res[i] == s[i + 2])
      ensures forall i :: 0 <= i < |s| - |s| % 3 ==> (i % 3 == 1 ==> res[i] == s[i - 1])
      // post-conditions-end
  {
    assume{:axiom} false;
  }

