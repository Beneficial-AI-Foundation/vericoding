vc-preamble: |-
  function factorial_spec(n : int) : int
    requires n >= 0
    decreases n
  {
    if n == 0 then 1 else n * factorial_spec(n - 1)
  }
  function sum_spec(n : int) : int
    requires n >= 0
    decreases n
  {
    if n == 0 then 1 else n + sum_spec(n - 1)
  }

vc-helpers: |-
  lemma factorial_spec_positive(n: int)
    requires n >= 0
    ensures factorial_spec(n) > 0
  {
    if n == 0 {
    } else {
      factorial_spec_positive(n - 1);
    }
  }
  
  lemma sum_spec_positive(n: int)
    requires n >= 0
    ensures sum_spec(n) > 0
  {
    if n == 0 {
    } else {
      sum_spec_positive(n - 1);
    }
  }

vc-description: |-
  function_signature: def f(n: int) -> List[int]
  Implement the function f that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise. i starts from 1. the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).

vc-spec: |-
  method f(n: int) returns (result: seq<int>)
    requires n >= 0
    ensures |result| == n
    ensures forall i :: 0 <= i < n ==>
      if (i + 1) % 2 == 0 then 
        result[i] == factorial_spec(i + 1)
      else 
        result[i] == sum_spec(i + 1)

vc-code: |-
  {
    result := [];
    var i := 1;
    
    while i <= n
      invariant 1 <= i <= n + 1
      invariant |result| == i - 1
      invariant forall j :: 0 <= j < |result| ==>
        if (j + 1) % 2 == 0 then 
          result[j] == factorial_spec(j + 1)
        else 
          result[j] == sum_spec(j + 1)
    {
      var value: int;
      if i % 2 == 0 {
        value := factorial_spec(i);
        factorial_spec_positive(i);
      } else {
        value := sum_spec(i);
        sum_spec_positive(i);
      }
      result := result + [value];
      i := i + 1;
    }
  }

vc-postamble: |-


