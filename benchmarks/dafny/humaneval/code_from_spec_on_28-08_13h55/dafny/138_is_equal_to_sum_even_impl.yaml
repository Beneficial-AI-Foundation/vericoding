vc-preamble: |-


vc-helpers: |-
  predicate is_positive_even(x: int) {
      x > 0 && x % 2 == 0
  }
  
  ghost predicate can_be_sum_of_four_positive_evens(n: int) {
      exists a, b, c, d :: is_positive_even(a) && is_positive_even(b) && is_positive_even(c) && is_positive_even(d) && a + b + c + d == n
  }
  
  lemma sum_of_four_positive_evens_bounds(n: int)
      requires can_be_sum_of_four_positive_evens(n)
      ensures n >= 8
  {
      var a, b, c, d :| is_positive_even(a) && is_positive_even(b) && is_positive_even(c) && is_positive_even(d) && a + b + c + d == n;
      assert a >= 2 && b >= 2 && c >= 2 && d >= 2;
  }
  
  lemma constructive_proof_for_valid_n(n: int)
      requires n >= 8 && n % 2 == 0
      ensures can_be_sum_of_four_positive_evens(n)
  {
      var a := 2;
      var b := 2;
      var c := 2;
      var d := n - 6;
      assert d == n - 6 >= 8 - 6 == 2 > 0;
      assert d % 2 == (n - 6) % 2 == n % 2 - 6 % 2 == 0 - 0 == 0;
      assert is_positive_even(a) && is_positive_even(b) && is_positive_even(c) && is_positive_even(d);
      assert a + b + c + d == 2 + 2 + 2 + (n - 6) == n;
  }

vc-description: |-
  function_signature: method is_equal_to_sum_even(n: int) returns (b : bool)
  Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers.

vc-spec: |-
  ensures b <==> can_be_sum_of_four_positive_evens(n)

vc-code: |-
  method is_equal_to_sum_even(n: int) returns (b : bool)
      ensures b <==> can_be_sum_of_four_positive_evens(n)
  {
      if n >= 8 && n % 2 == 0 {
          constructive_proof_for_valid_n(n);
          b := true;
      } else {
          if n < 8 {
              b := false;
          } else {
              assert n % 2 != 0;
              b := false;
          }
      }
  }

vc-postamble: |-


