vc-preamble: |-
  datatype Option<T> = None | Some(value: T)
  function get_value(o: Option<int>): int
    requires o.Some?
    ensures get_value(o) == o.value
  {
    o.value
  }

vc-helpers: |-


vc-description: |-
  function_signature: def largest_smallest_integers(lst: List[int]) -> Tuple[ Optional[Int], Optional[Int] ]
  Create a function that returns a tuple (a, b), where 'a' is the largest of negative integers, and 'b' is the smallest of positive integers in a list. If there is no negative or positive integers, return them as None.

vc-spec: |-
  method largest_smallest_integers(lst: seq<int>) returns (a: Option<int>, b: Option<int>)
    ensures (a.Some? ==> (a.value < 0 && a.value in lst && forall x :: x in lst && x < 0 ==> x <= a.value))
    ensures (a.None? ==> forall x :: x in lst ==> x >= 0)
    ensures (b.Some? ==> (b.value > 0 && b.value in lst && forall x :: x in lst && x > 0 ==> x >= b.value))
    ensures (b.None? ==> forall x :: x in lst ==> x <= 0)

vc-code: |-
  {
    var negatives := seq(i | 0 <= i < |lst| && lst[i] < 0 :: lst[i]);
    var positives := seq(i | 0 <= i < |lst| && lst[i] > 0 :: lst[i]);
    
    var largest_neg: Option<int>;
    if |negatives| == 0 {
      largest_neg := None;
    } else {
      var max_neg := negatives[0];
      for i := 1 to |negatives|
        invariant max_neg in negatives
        invariant forall j :: 0 <= j < i ==> negatives[j] <= max_neg
      {
        if negatives[i] > max_neg {
          max_neg := negatives[i];
        }
      }
      largest_neg := Some(max_neg);
    }
    
    var smallest_pos: Option<int>;
    if |positives| == 0 {
      smallest_pos := None;
    } else {
      var min_pos := positives[0];
      for i := 1 to |positives|
        invariant min_pos in positives
        invariant forall j :: 0 <= j < i ==> positives[j] >= min_pos
      {
        if positives[i] < min_pos {
          min_pos := positives[i];
        }
      }
      smallest_pos := Some(min_pos);
    }
    
    a := largest_neg;
    b := smallest_pos;
  }

vc-postamble: |-


