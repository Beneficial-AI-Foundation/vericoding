vc-description: |-
  // Noa Leron 207131871
  
  // Tsuri Farhana 315016907
  
  /*
  Goal: Implement the well known merge sort algorithm in O(a.Length X log_2(a.Length)) time, recursively.
  
  - Divide the contents of the original array into two local arrays
  - After sorting the local arrays (recursively), merge the contents of the two returned arrays using the Merge method (see below)
  - DO NOT modify the specification or any other part of the method's signature
  - DO NOT introduce any further methods
  */
  
  /*
  Goal: Implement iteratively, correctly, efficiently, clearly
  
  DO NOT modify the specification or any other part of the method's signature
  */
  
  //This is a method that replace the loop body
  
  //Loop invariant - b is sprted so far and the next two potential values that will go into b are bigger then the biggest value in b.
  
  //Loop invariant - the multiset of the prefix of b so far is the same multiset as the prefixes of c and d so far.
  
  //This lemma helps dafny see that if the prefixs of arrays are the same multiset until the end of the arrays,
  
  //all the arrays are the same multiset.
  
  //This lemma helps dafny see that after adding the next value from c to b the prefixes are still the same subsets.

vc-preamble: |-
  predicate Sorted(q: seq<int>) {
      forall i,j :: 0 <= i <= j < |q| ==> q[i] <= q[j]
  }
  
  ghost predicate Inv(a: seq<int>, a1: seq<int>, a2: seq<int>, i: nat, mid: nat){
      (i <= |a1|) && (i <= |a2|) && (i+mid <= |a|) &&
      (a1[..i] == a[..i]) && (a2[..i] == a[mid..(i+mid)])
  }
  
      requires b != c && b != d && b.Length == c.Length + d.Length
      requires Sorted(c[..]) && Sorted(d[..])
      ensures Sorted(b[..]) && multiset(b[..]) == multiset(c[..])+multiset(d[..])
      modifies b
  {
    assume{:axiom} false;
  }
  
  ghost predicate InvSorted(b: seq<int>, c: seq<int>, d: seq<int>, i: nat, j: nat){
      i <= |c| && j <= |d| && i + j <= |b| &&
      ((i+j > 0 && i < |c|) ==> (b[j + i - 1] <= c[i])) &&
      ((i+j > 0 && j < |d|) ==> (b[j + i - 1] <= d[j])) &&
      Sorted(b[..i+j])
      }
  
  ghost predicate InvSubSet(b: seq<int>, c: seq<int>, d: seq<int>, i: nat, j: nat){
      i <= |c| && j <= |d| && i + j <= |b| &&
      multiset(b[..i+j]) == multiset(c[..i]) + multiset(d[..j])
  }

vc-helpers: |-

vc-spec: |-
  method MergeSort(a: array<int>) returns (b: array<int>)
      ensures b.Length == a.Length && Sorted(b[..]) && multiset(a[..]) == multiset(b[..])
      decreases a.Length

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

