vc-description: |-
  /* 
  * Formal verification of O(n) and O(log n) algorithms to calculate the natural
  * power of a real number (x^n), illustrating the usage of lemmas.
  * FEUP, MIEIC, MFES, 2020/21.
  */
  
  // Initial specification/definition of x^n, recursive, functional style, 
  
  // with time and space complexity O(n).
  
  // Iterative version, imperative, with time complexity O(n) and space complexity O(1).
  
  // Recursive version, imperative, with time and space complexity O(log n).
  
  // States the property x^a * x^b = x^(a+b), that powerOpt takes advantage of. 
  
  // The annotation {:induction a} guides Dafny to prove the property
  
  // by automatic induction on 'a'.
  
  // A simple test case to make sure the specification is adequate.

vc-preamble: |-
  function power(x: real, n: nat) : real
    decreases n
  {
      if n == 0 then 1.0 else x * power(x, n-1)
  }

vc-helpers: |-

vc-spec: |-
  method powerIter(x: real, n: nat) returns (p : real)
    ensures p == power(x, n)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

