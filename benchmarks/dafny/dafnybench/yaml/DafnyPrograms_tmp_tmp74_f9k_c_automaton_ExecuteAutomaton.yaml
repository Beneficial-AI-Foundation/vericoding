vc-description: |-
  /**
  Consider cellular automata: a row of cells is repeatedly updated according to a rule. In this exercise I dabbled with,
  each cell has the value either false or true. Each cell's next state depends only on the immediate neighbours, in the 
  case where the cell is at the edges of the row, the inexistent neighbours are replaced by "false". The automaton table 
  will contain the initial row, plus a row for each number of steps.
   */
  
  /**
  This method computes the automaton.
  Provide the initial row: init, the rule and the desired number of steps
   */
  
  // we need the initial row to have the length bigger or equal to two
  
  // after computation the automaton is made of the initial row plus a row for each of the steps
  
  // the automaton must have the initial row at the top
  
  // all rows in the automaton must be the same length
  
  // all the middle row elements (with existing neighbours) after a step, will be equal to the rule applied on the element in the previous state
  
  // and its neigbours
  
  // the corner row elements (with non-existing neighbours) after a step, will be equal to the rule applied on the element in the previous state,
  
  // its neighbour and false

vc-preamble: |-
  }

vc-helpers: |-

vc-spec: |-
  method ExecuteAutomaton(init: seq<bool>, rule: (bool, bool, bool) -> bool, steps: nat)
    returns (table: seq<seq<bool>>)
  
    requires |init| >= 2
  
    ensures |table| == 1 + steps
  
    ensures table[0] == init;
  
    ensures forall i | 0 <= i < |table| :: |table[i]| == |init|
  
    ensures forall i | 0 <= i < |table| - 1 ::
              forall j | 1 <= j <= |table[i]| - 2 :: table[i + 1][j] == rule(table[i][j - 1], table[i][j], table[i][j + 1])
  
    ensures forall i | 0 <= i < |table| - 1 ::
              table[i + 1][0] == rule(false, table[i][0], table[i][1]) && table[i + 1][|table[i]| - 1] == rule(table[i][|table[i]| - 2], table[i][|table[i]| - 1], false)

vc-code: |-
  {
    assume {:axiom} false;
  }

vc-postamble: |-

