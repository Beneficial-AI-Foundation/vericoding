vc-description: |-
  This verification task implements a function to count the number of even and odd digits in the absolute value of an integer. The function should return a tuple containing the count of even digits and the count of odd digits.
  
  The implementation uses helper functions to define digit counting operations and ensures correctness through loop invariants that maintain the relationship between processed and remaining digits.

vc-preamble: |-
  // Given an integer, count the number of even digits and odd digits in its absolute value.
  // Return a tuple (even_count, odd_count).
  
  function abs_value(x: int): int
  {
      if x < 0 then -x else x
  }
  
  function count_digits(n: nat): nat
      requires n >= 0
  {
      if n < 10 then 1 else 1 + count_digits(n / 10)
  }
  
  function is_even_digit(d: nat): bool
      requires d < 10
  {
      d % 2 == 0
  }
  
  function count_even_digits(n: nat): nat
      requires n >= 0
      decreases n
  {
      if n < 10 then
          if is_even_digit(n) then 1 else 0
      else
          (if is_even_digit(n % 10) then 1 else 0) + count_even_digits(n / 10)
  }
  
  function count_odd_digits(n: nat): nat
      requires n >= 0
      decreases n
  {
      if n < 10 then
          if !is_even_digit(n) then 1 else 0
      else
          (if !is_even_digit(n % 10) then 1 else 0) + count_odd_digits(n / 10)
  }

vc-helpers: |-

vc-spec: |-
  method even_odd_count(num: int) returns (even_count: int, odd_count: int)
      ensures even_count >= 0 && odd_count >= 0
      ensures even_count + odd_count >= 1
      ensures var abs_num := abs_value(num);
              even_count == count_even_digits(abs_num) &&
              odd_count == count_odd_digits(abs_num)
      ensures even_count + odd_count == count_digits(abs_value(num))
      ensures num == 0 ==> (even_count == 1 && odd_count == 0)
      ensures abs_value(num) == abs_value(-num) ==> 
              (even_count == count_even_digits(abs_value(-num)) && 
               odd_count == count_odd_digits(abs_value(-num)))

vc-code: |-
  {
      var abs_num := abs_value(num);
  
      if abs_num == 0 {
          even_count := 1;
          odd_count := 0;
          return;
      }
  
      even_count := 0;
      odd_count := 0;
  
      var remaining := abs_num;
      while remaining > 0
          invariant remaining >= 0
          invariant even_count >= 0 && odd_count >= 0
          invariant remaining == 0 ==> even_count + odd_count == count_digits(abs_num)
          invariant remaining > 0 ==> even_count + odd_count + count_digits(remaining) == count_digits(abs_num)
          invariant remaining == 0 ==> even_count == count_even_digits(abs_num)
          invariant remaining > 0 ==> even_count + count_even_digits(remaining) == count_even_digits(abs_num)
          invariant remaining == 0 ==> odd_count == count_odd_digits(abs_num)
          invariant remaining > 0 ==> odd_count + count_odd_digits(remaining) == count_odd_digits(abs_num)
          decreases remaining
      {
          var digit := remaining % 10;
          if digit % 2 == 0 {
              even_count := even_count + 1;
          } else {
              odd_count := odd_count + 1;
          }
          remaining := remaining / 10;
      }
  }

vc-postamble: |-

