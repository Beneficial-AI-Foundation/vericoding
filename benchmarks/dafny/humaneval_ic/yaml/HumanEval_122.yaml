vc-description: |-
  This verification task involves computing the sum of all elements that have at most two digits among the first k elements of an array. An element has at most two digits if its absolute value is between 0 and 99 (inclusive).

vc-preamble: |-
  // ======= TASK =======
  // Given an array of integers and an integer k, return the sum of all elements 
  // that have at most two digits among the first k elements of the array.
  // An element has at most two digits if its absolute value is between 0 and 99 (inclusive).
  
  // ======= SPEC REQUIREMENTS =======
  predicate ValidInput(arr: seq<int>, k: int) {
    1 <= |arr| <= 100 && 1 <= k <= |arr|
  }
  
  function sum_valid_elements(arr: seq<int>, k: int): int
    requires 0 <= k <= |arr|
  {
    sum_valid_elements_up_to(arr, k)
  }
  
  function sum_valid_elements_up_to(arr: seq<int>, n: int): int
    requires 0 <= n <= |arr|
  {
    if n == 0 then 0
    else 
      var current := if -99 <= arr[n-1] <= 99 then arr[n-1] else 0;
      sum_valid_elements_up_to(arr, n-1) + current
  }

vc-helpers: |-
  // ======= HELPERS =======

vc-spec: |-
  // ======= MAIN METHOD =======
  method add_elements(arr: seq<int>, k: int) returns (result: int)
    requires ValidInput(arr, k)
    ensures result == sum_valid_elements(arr, k)

vc-code: |-
  {
    result := 0;
    var i := 0;
    while i < k
      invariant 0 <= i <= k
      invariant result == sum_valid_elements_up_to(arr, i)
    {
      if -99 <= arr[i] <= 99 {
        result := result + arr[i];
      }
      i := i + 1;
    }
  }

vc-postamble: |-

