vc-description: |-
  This task verifies a function that determines whether a string's length is a prime number. A prime number is defined as an integer greater than or equal to 2 that has no divisors other than 1 and itself.

vc-preamble: |-
  // ======= TASK =======
  // Given a string, determine if its length is a prime number.
  // A prime number is an integer greater than or equal to 2 that has no divisors other than 1 and itself.

  // ======= SPEC REQUIREMENTS =======
  predicate is_prime_number(n: int)
  {
      n >= 2 && (forall k :: 2 <= k < n ==> n % k != 0)
  }

vc-helpers: |-
  // ======= HELPERS =======
  method is_prime(n: int) returns (result: bool)
      ensures result <==> is_prime_number(n)
  {
      if n < 2 {
          result := false;
          return;
      }
      if n == 2 {
          result := true;
          return;
      }
      if n % 2 == 0 {
          result := false;
          return;
      }

      // Check odd divisors up to sqrt(n)
      var i := 3;
      while i * i <= n
          invariant 3 <= i
          invariant i % 2 == 1
          invariant forall k :: 2 <= k < i ==> n % k != 0
      {
          if n % i == 0 {
              result := false;
              return;
          }
          i := i + 2;
      }

      assert forall k :: 2 <= k < n && k * k <= n ==> n % k != 0;
      assert forall k :: 2 <= k < n ==> (k * k <= n || k * k > n);
      assert forall k :: 2 <= k < n && k * k > n ==> (n % k != 0 <==> n % (n / k) != 0);
      assert forall k :: 2 <= k < n ==> n % k != 0;

      result := true;
  }

vc-spec: |-
  // ======= MAIN METHOD =======
  method prime_length(s: string) returns (result: bool)
      ensures result <==> is_prime_number(|s|)

vc-code: |-
  {
      var length := |s|;
      result := is_prime(length);
  }

vc-postamble: |-
