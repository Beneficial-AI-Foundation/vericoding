vc-description: |-
  Given a list of exactly two strings containing only '(' and ')' characters, determine if it's possible to concatenate them in some order to create a balanced parentheses string. Return 'Yes' if either concatenation order produces a balanced string, 'No' otherwise.

vc-preamble: |-
  // Given a list of exactly two strings containing only '(' and ')' characters,
  // determine if it's possible to concatenate them in some order to create a
  // balanced parentheses string. Return 'Yes' if either concatenation order
  // produces a balanced string, 'No' otherwise.
  
  predicate valid_paren_string(s: string)
  {
      forall i :: 0 <= i < |s| ==> s[i] == '(' || s[i] == ')'
  }
  
  function is_balanced_helper(s: string, depth: int): int
  {
      if |s| == 0 then depth
      else if s[0] == '(' then is_balanced_helper(s[1..], depth + 1)
      else if s[0] == ')' then 
          if depth > 0 then is_balanced_helper(s[1..], depth - 1)
          else -1
      else is_balanced_helper(s[1..], depth)
  }
  
  function is_balanced(s: string): bool
  {
      is_balanced_helper(s, 0) == 0
  }
  
  predicate ValidInput(lst: seq<string>)
  {
      |lst| == 2 && valid_paren_string(lst[0]) && valid_paren_string(lst[1])
  }
  
  predicate CorrectOutput(lst: seq<string>, result: string)
      requires ValidInput(lst)
  {
      (result == "Yes" || result == "No") &&
      (result == "Yes" <==> (is_balanced(lst[0] + lst[1]) || is_balanced(lst[1] + lst[0])))
  }

vc-helpers: |-

vc-spec: |-
  method match_parens(lst: seq<string>) returns (result: string)
      requires ValidInput(lst)
      ensures CorrectOutput(lst, result)

vc-code: |-
  {
      var combined := lst[0] + lst[1];
      if is_balanced(combined) {
          result := "Yes";
      } else {
          var option1 := lst[0] + lst[1];
          var option2 := lst[1] + lst[0];
  
          if is_balanced(option1) || is_balanced(option2) {
              result := "Yes";
          } else {
              result := "No";
          }
      }
  }

vc-postamble: |-

