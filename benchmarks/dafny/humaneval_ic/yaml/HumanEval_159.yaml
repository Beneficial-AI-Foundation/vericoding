vc-description: |-
  This verification task involves implementing a method that calculates carrot consumption for a rabbit. Given the number of carrots already eaten, the number of additional carrots needed, and the number of carrots remaining in stock, the method should return the total carrots that will be eaten and how many carrots will be left. The rabbit will eat as many carrots as possible from the remaining stock, up to the number needed.

vc-preamble: |-
  // Given the number of carrots already eaten, the number of additional carrots needed,
  // and the number of carrots remaining in stock, calculate the total carrots that will be
  // eaten and how many carrots will be left. The rabbit will eat as many carrots as possible
  // from the remaining stock, up to the number needed.
  
  predicate ValidInput(number: int, need: int, remaining: int)
  {
      0 <= number <= 1000 && 0 <= need <= 1000 && 0 <= remaining <= 1000
  }
  
  function CanEat(need: int, remaining: int): int
  {
      if need <= remaining then need else remaining
  }
  
  function TotalEaten(number: int, need: int, remaining: int): int
  {
      number + CanEat(need, remaining)
  }
  
  function CarrotsLeft(need: int, remaining: int): int
  {
      remaining - CanEat(need, remaining)
  }
  
  predicate ValidResult(result: seq<int>, number: int, need: int, remaining: int)
  {
      |result| == 2 &&
      result[0] == TotalEaten(number, need, remaining) &&
      result[1] == CarrotsLeft(need, remaining) &&
      result[0] >= number &&
      result[1] >= 0 &&
      result[1] <= remaining
  }

vc-helpers: |-

vc-spec: |-
  method eat(number: int, need: int, remaining: int) returns (result: seq<int>)
      requires ValidInput(number, need, remaining)
      ensures ValidResult(result, number, need, remaining)

vc-code: |-
  {
      var can_eat := CanEat(need, remaining);
      var total_eaten := number + can_eat;
      var carrots_left := remaining - can_eat;
      result := [total_eaten, carrots_left];
  }

vc-postamble: |-

