vc-description: |-
  This verification task involves implementing a method to determine if three positive numbers representing triangle side lengths form a right-angled triangle. The implementation must check both that the sides form a valid triangle (positive lengths satisfying triangle inequality) and that they satisfy the Pythagorean theorem.

vc-preamble: |-
  // ======= TASK =======
  // Given three positive numbers representing triangle side lengths, determine if they form a right-angled triangle.
  // A right-angled triangle satisfies the Pythagorean theorem: the sum of squares of the two shorter sides equals
  // the square of the longest side. All sides must be positive and satisfy the triangle inequality.
  
  // ======= SPEC REQUIREMENTS =======
  predicate ValidTriangle(a: real, b: real, c: real)
  {
      a > 0.0 && b > 0.0 && c > 0.0 &&
      a + b > c && a + c > b && b + c > a
  }
  
  predicate IsRightTriangle(a: real, b: real, c: real)
  {
      a * a + b * b == c * c || 
      a * a + c * c == b * b || 
      b * b + c * c == a * a
  }
  
  predicate ValidRightTriangle(a: real, b: real, c: real)
  {
      ValidTriangle(a, b, c) && IsRightTriangle(a, b, c)
  }

vc-helpers: |-
  // ======= HELPERS =======

vc-spec: |-
  // ======= MAIN METHOD =======
  method right_angle_triangle(a: real, b: real, c: real) returns (result: bool)
      ensures result <==> ValidRightTriangle(a, b, c)

vc-code: |-
  {
      // First check if the sides can form a valid triangle
      // Triangle inequality: sum of any two sides must be greater than the third side
      if a + b <= c || a + c <= b || b + c <= a {
          return false;
      }

      // Check if any side is non-positive
      if a <= 0.0 || b <= 0.0 || c <= 0.0 {
          return false;
      }

      // At this point we know ValidTriangle(a, b, c) is true
      assert ValidTriangle(a, b, c);

      // Find the longest side (hypotenuse)
      var hypotenuse: real;
      var side1: real;
      var side2: real;

      if a >= b && a >= c {
          hypotenuse := a;
          side1 := b;
          side2 := c;
          assert hypotenuse == a && side1 == b && side2 == c;
          assert side1 * side1 + side2 * side2 == hypotenuse * hypotenuse <==> b * b + c * c == a * a;
      } else if b >= a && b >= c {
          hypotenuse := b;
          side1 := a;
          side2 := c;
          assert hypotenuse == b && side1 == a && side2 == c;
          assert side1 * side1 + side2 * side2 == hypotenuse * hypotenuse <==> a * a + c * c == b * b;
      } else {
          hypotenuse := c;
          side1 := a;
          side2 := b;
          assert hypotenuse == c && side1 == a && side2 == b;
          assert side1 * side1 + side2 * side2 == hypotenuse * hypotenuse <==> a * a + b * b == c * c;
      }

      // Apply Pythagorean theorem: side1² + side2² = hypotenuse²
      var is_right := side1 * side1 + side2 * side2 == hypotenuse * hypotenuse;
      
      // Help Dafny understand the equivalence
      assert is_right ==> IsRightTriangle(a, b, c);
      assert !is_right ==> !IsRightTriangle(a, b, c);
      
      return is_right;
  }

vc-postamble: |-
