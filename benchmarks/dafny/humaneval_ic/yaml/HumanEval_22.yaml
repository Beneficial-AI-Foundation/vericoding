vc-description: |-
  Given a list containing values of various types, return a new list containing only the integer values. In Python, booleans are considered integers (True=1, False=0), so they should be included in the result. The task requires implementing a function that filters a sequence of mixed-type values to extract only integers and boolean values (converted to 0/1).

vc-preamble: |-
  // ======= TASK =======
  // Given a list containing values of various types, return a new list containing only the integer values.
  // In Python, booleans are considered integers (True=1, False=0), so they should be included in the result.
  
  // ======= SPEC REQUIREMENTS =======
  datatype Value = IntVal(i: int) | BoolVal(b: bool) | StringVal(s: string) | RealVal(r: real) | OtherVal
  
  predicate ValidInput(values: seq<Value>)
  {
      true  // All sequences of Value are valid input
  }
  
  function IntegerValues(values: seq<Value>) : seq<int>
  {
      if |values| == 0 then []
      else 
          match values[0]
          case IntVal(i) => [i] + IntegerValues(values[1..])
          case BoolVal(b) => [if b then 1 else 0] + IntegerValues(values[1..])
          case _ => IntegerValues(values[1..])
  }
  
  predicate ValidOutput(input: seq<Value>, output: seq<int>)
  {
      output == IntegerValues(input)
  }

vc-helpers: |-
  // ======= HELPERS =======

vc-spec: |-
  // ======= MAIN METHOD =======
  function filter_integers(values: seq<Value>) : seq<int>
      requires ValidInput(values)
      ensures ValidOutput(values, filter_integers(values))
      ensures |filter_integers(values)| <= |values|
      ensures forall x :: x in filter_integers(values) ==> 
          exists i :: 0 <= i < |values| && (values[i] == IntVal(x) || (values[i].BoolVal? && x == (if values[i].b then 1 else 0)))
      ensures forall i :: 0 <= i < |values| && values[i].IntVal? ==> values[i].i in filter_integers(values)
      ensures forall i :: 0 <= i < |values| && values[i].BoolVal? ==> (if values[i].b then 1 else 0) in filter_integers(values)

vc-code: |-
  {
      if |values| == 0 then []
      else 
          match values[0]
          case IntVal(i) => [i] + filter_integers(values[1..])
          case BoolVal(b) => [if b then 1 else 0] + filter_integers(values[1..])
          case _ => filter_integers(values[1..])
  }

vc-postamble: |-

