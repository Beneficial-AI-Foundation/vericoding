vc-description: |-
  This task involves implementing the greatest common divisor (GCD) function for two integers. The GCD is the largest positive integer that divides both numbers without remainder, with special cases for zero values.

  The implementation should use the Euclidean algorithm, which repeatedly applies the property that GCD(a,b) = GCD(b, a mod b) until one operand becomes zero.

vc-preamble: |-
  // ======= TASK =======
  // Find the greatest common divisor (GCD) of two integers.
  // The GCD is the largest positive integer that divides both numbers without remainder.
  // Special cases: GCD(0, 0) = 0, GCD(0, n) = |n| for n != 0.
  
  // ======= SPEC REQUIREMENTS =======
  function abs(x: int): nat
  {
      if x >= 0 then x else -x
  }
  
  predicate divides(d: int, n: int)
  {
      if d == 0 then n == 0 else n % d == 0
  }

vc-helpers: |-
  // ======= HELPERS =======

vc-spec: |-
  // ======= MAIN METHOD =======
  method greatest_common_divisor(a: int, b: int) returns (result: nat)
      ensures result > 0 <==> (a != 0 || b != 0)
      ensures result == 0 <==> (a == 0 && b == 0)
      ensures divides(result, a) && divides(result, b)
      ensures forall d: int :: d > 0 && divides(d, a) && divides(d, b) ==> d <= result

vc-code: |-
  {
      var x := abs(a);
      var y := abs(b);

      while y != 0
          decreases y
          invariant y >= 0
          invariant forall d: int :: divides(d, x) && divides(d, y) <==> divides(d, abs(a)) && divides(d, abs(b))
          invariant forall d: int :: divides(d, abs(a)) <==> divides(d, a)
          invariant forall d: int :: divides(d, abs(b)) <==> divides(d, b)
      {
          var temp := y;
          y := x % y;
          x := temp;
      }

      result := x;
  }

vc-postamble: |-
