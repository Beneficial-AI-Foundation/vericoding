vc-description: |-
  Determine if a given string is a palindrome (reads the same forwards and backwards). The comparison should be case-insensitive, requiring implementation of a case conversion function and a palindrome checking predicate.

vc-preamble: |-
  // ======= TASK =======
  // Determine if a given string is a palindrome (reads the same forwards and backwards).
  // The comparison should be case-insensitive.
  
  // ======= SPEC REQUIREMENTS =======
  function to_lower(c: char): char
  {
      if 'A' <= c <= 'Z' then
          (c as int - 'A' as int + 'a' as int) as char
      else
          c
  }
  
  predicate IsPalindrome(text: string)
  {
      forall i :: 0 <= i < |text| ==> to_lower(text[i]) == to_lower(text[|text| - 1 - i])
  }

vc-helpers: |-
  // ======= HELPERS =======

vc-spec: |-
  // ======= MAIN METHOD =======
  method is_palindrome(text: string) returns (result: bool)
    ensures result <==> IsPalindrome(text)

vc-code: |-
  {
      var n := |text|;
      result := true;
      var i := 0;
      while i < n / 2
        invariant 0 <= i <= n / 2
        invariant result <==> (forall j :: 0 <= j < i ==> to_lower(text[j]) == to_lower(text[n - 1 - j]))
      {
          if to_lower(text[i]) != to_lower(text[n - 1 - i]) {
              result := false;
              return;
          }
          i := i + 1;
      }
  }

vc-postamble: |-

