vc-description: |-
  This verification task implements a solution to count how many integers x satisfy two conditions: (1) a ≤ x ≤ b, and (2) x is divisible by k. The implementation uses floor division to efficiently compute the count without iterating through the entire range.

vc-preamble: |-
  // ======= TASK =======
  // Given integers k, a, and b, count how many integers x satisfy both conditions:
  // 1. a ≤ x ≤ b 
  // 2. x is divisible by k
  
  // ======= SPEC REQUIREMENTS =======
  function ValidThreeIntegerInput(input: string): bool
  {
      var parts := SplitBySpace(input);
      |parts| >= 3 && 
      IsInteger(parts[0]) && 
      IsInteger(parts[1]) && 
      IsInteger(parts[2])
  }
  
  function ParseThreeIntegers(input: string): (int, int, int)
      requires |input| > 0
      requires ValidThreeIntegerInput(input)
  {
      var parts := SplitBySpace(input);
      (StringToInt(parts[0]), StringToInt(parts[1]), StringToInt(parts[2]))
  }
  
  function CountDivisibleInRange(k: int, a: int, b: int): int
      requires k >= 1
      requires a <= b
  {
      var s1 := FloorDiv(a - 1, k);
      var s2 := FloorDiv(b, k);
      s2 - s1
  }

vc-helpers: |-
  // ======= HELPERS =======
  function SplitBySpace(s: string): seq<string>
  {
      if |s| == 0 then []
      else 
          var spaceIndex := FindFirstSpace(s, 0);
          if spaceIndex == -1 then [s]
          else if spaceIndex >= 0 && spaceIndex < |s| then
              [s[..spaceIndex]] + SplitBySpace(s[spaceIndex+1..])
          else [s]
  }
  
  function FindFirstSpace(s: string, start: nat): int
      requires start <= |s|
      decreases |s| - start
  {
      if start >= |s| then -1
      else if s[start] == ' ' then start as int
      else FindFirstSpace(s, start + 1)
  }
  
  function FloorDiv(a: int, b: int): int
      requires b > 0
  {
      if a >= 0 then a / b
      else if a % b == 0 then a / b
      else a / b - 1
  }
  
  function IsInteger(s: string): bool
  {
      |s| > 0 && (s[0] == '-' || ('0' <= s[0] <= '9')) &&
      forall i :: 1 <= i < |s| ==> '0' <= s[i] <= '9'
  }
  
  function StringToInt(s: string): int
      requires IsInteger(s)
      requires |s| > 0
  {
      if s[0] == '-' then 
          if |s| > 1 then 
              var rest := s[1..];
              assert forall i :: 0 <= i < |rest| ==> '0' <= rest[i] <= '9';
              -(StringToNat(rest) as int)
          else 0
      else StringToNat(s) as int
  }
  
  function StringToNat(s: string): nat
      requires forall i :: 0 <= i < |s| ==> '0' <= s[i] <= '9'
  {
      if |s| == 0 then 0
      else StringToNat(s[..|s|-1]) * 10 + (s[|s|-1] as int - '0' as int)
  }
  
  function IntToString(n: int): string
  {
      if n == 0 then "0"
      else if n > 0 then NatToString(n)
      else "-" + NatToString(-n)
  }
  
  function NatToString(n: nat): string
  {
      if n == 0 then ""
      else NatToString(n / 10) + [('0' as int + n % 10) as char]
  }

vc-spec: |-
  // ======= MAIN METHOD =======
  method solve(input: string) returns (output: string)
      requires |input| > 0
      requires ValidThreeIntegerInput(input)
      requires exists k, a, b :: 
          ParseThreeIntegers(input) == (k, a, b) &&
          k >= 1 && a <= b
      ensures exists k, a, b ::
          ParseThreeIntegers(input) == (k, a, b) &&
          output == IntToString(CountDivisibleInRange(k, a, b))

vc-code: |-
  {
      var (k, a, b) := ParseThreeIntegers(input);
      var result := CountDivisibleInRange(k, a, b);
      output := IntToString(result);
  }

vc-postamble: |-
