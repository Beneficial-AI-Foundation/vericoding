vc-description: |-
  This task involves comparing two very large non-negative integers (up to 10^6 digits each) represented as strings and determining which is greater or if they are equal. Leading zeros are allowed in the input.

  The input consists of two lines, each containing a non-negative integer. The output should be "<", ">", or "=" based on the comparison. The implementation must handle the validation of input format and return appropriate results.

vc-preamble: |-
  // ======= TASK =======
  // Compare two very large non-negative integers (up to 10^6 digits each) represented as strings
  // and determine which is greater or if they are equal. Leading zeros are allowed in the input.
  // Input consists of two lines, each containing a non-negative integer.
  // Output should be "<", ">", or "=" based on the comparison.

  // ======= SPEC REQUIREMENTS =======
  predicate ValidInput(input: string)
  {
      var lines := split(input, '\n');
      |lines| >= 2 && 
      (forall i :: 0 <= i < |lines[0]| ==> '0' <= lines[0][i] <= '9') &&
      (forall i :: 0 <= i < |lines[1]| ==> '0' <= lines[1][i] <= '9')
  }

  predicate ValidOutput(output: string)
  {
      output == "=" || output == "<" || output == ">"
  }

  function CorrectOutput(input: string): string
      requires ValidInput(input)
  {
      var lines := split(input, '\n');
      var a := lines[0];
      var b := lines[1];
      var intA := stringToInt(a);
      var intB := stringToInt(b);
      if intA == intB then "="
      else if intA < intB then "<"
      else ">"
  }

vc-helpers: |-
  // ======= HELPERS =======
  function split(s: string, delimiter: char): seq<string>
  {
      splitHelper(s, delimiter, 0)
  }

  function splitHelper(s: string, delimiter: char, start: int): seq<string>
      requires 0 <= start <= |s|
      decreases |s| - start
  {
      if start >= |s| then []
      else
          var nextDelim := findChar(s, delimiter, start);
          if nextDelim == -1 then [s[start..]]
          else [s[start..nextDelim]] + splitHelper(s, delimiter, nextDelim + 1)
  }

  function findChar(s: string, c: char, start: int): int
      requires 0 <= start <= |s|
      ensures findChar(s, c, start) == -1 || (start <= findChar(s, c, start) < |s|)
      decreases |s| - start
  {
      if start >= |s| then -1
      else if s[start] == c then start
      else findChar(s, c, start + 1)
  }

  function repeatChar(c: char, n: int): string
  {
      if n <= 0 then ""
      else [c] + repeatChar(c, n - 1)
  }

  function charToInt(c: char): int
  {
      c as int - '0' as int
  }

  function stringToInt(s: string): int
  {
      if |s| == 0 then 0
      else stringToInt(s[..|s|-1]) * 10 + charToInt(s[|s|-1])
  }

vc-spec: |-
  // ======= MAIN METHOD =======
  method solve(input: string) returns (output: string)
      requires |input| > 0
      ensures ValidInput(input) ==> ValidOutput(output)
      ensures ValidInput(input) ==> output == CorrectOutput(input)
      ensures !ValidInput(input) ==> output == ""

vc-code: |-
  {
      var lines := split(input, '\n');
      if |lines| < 2 { return ""; }

      var a := lines[0];
      var b := lines[1];

      // Check if input is valid (all digits)
      var validA := forall i :: 0 <= i < |a| ==> '0' <= a[i] <= '9';
      var validB := forall i :: 0 <= i < |b| ==> '0' <= b[i] <= '9';
      
      if !validA || !validB { return ""; }

      var intA := stringToInt(a);
      var intB := stringToInt(b);

      if intA == intB {
          output := "=";
      } else if intA < intB {
          output := "<";
      } else {
          output := ">";
      }
  }

vc-postamble: |-
