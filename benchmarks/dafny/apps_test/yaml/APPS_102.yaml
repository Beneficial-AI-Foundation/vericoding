vc-description: |-
  Convert an integer (0 ≤ s ≤ 99) to its English word representation using only lowercase letters and hyphens (no spaces). Numbers 0-19 have unique word forms. Numbers 20-99 are formed by combining tens place words with ones place words using a hyphen. Multiples of 10 (20, 30, 40, etc.) do not require a hyphen suffix.

vc-preamble: |-
  // ======= TASK =======
  // Convert an integer (0 ≤ s ≤ 99) to its English word representation using only lowercase letters and hyphens (no spaces).
  // Numbers 0-19 have unique word forms. Numbers 20-99 are formed by combining tens place words with ones place words using a hyphen.
  // Multiples of 10 (20, 30, 40, etc.) do not require a hyphen suffix.
  
  // ======= SPEC REQUIREMENTS =======
  predicate ValidInputString(input: string)
  {
      |input| > 0 &&
      (forall i :: 0 <= i < |input|-1 ==> input[i] >= '0' && input[i] <= '9') &&
      ((|input| > 0 && input[|input|-1] >= '0' && input[|input|-1] <= '9') || 
       (|input| > 0 && input[|input|-1] == '\n')) &&
      (exists i :: 0 <= i < |input| && input[i] >= '0' && input[i] <= '9')
  }
  
  predicate ValidNumber(n: int)
  {
      0 <= n <= 99
  }
  
  function TrimmedInput(input: string): string
      requires ValidInputString(input)
  {
      if |input| > 0 && input[|input|-1] == '\n' then input[..|input|-1] else input
  }
  
  function ParsedNumber(input: string): int
      requires ValidInputString(input)
  {
      StringToInt(TrimmedInput(input))
  }

vc-helpers: |-
  // ======= HELPERS =======
  function StringToInt(s: string): int
      requires forall i :: 0 <= i < |s| ==> s[i] >= '0' && s[i] <= '9'
  {
      if |s| == 0 then 0
      else StringToInt(s[..|s|-1]) * 10 + (s[|s|-1] as int - '0' as int)
  }
  
  function NumberToWords(n: int): string
      requires ValidNumber(n)
  {
      if n == 0 then "zero"
      else if n == 1 then "one"
      else if n == 2 then "two"
      else if n == 3 then "three"
      else if n == 4 then "four"
      else if n == 5 then "five"
      else if n == 6 then "six"
      else if n == 7 then "seven"
      else if n == 8 then "eight"
      else if n == 9 then "nine"
      else if n == 10 then "ten"
      else if n == 11 then "eleven"
      else if n == 12 then "twelve"
      else if n == 13 then "thirteen"
      else if n == 14 then "fourteen"
      else if n == 15 then "fifteen"
      else if n == 16 then "sixteen"
      else if n == 17 then "seventeen"
      else if n == 18 then "eighteen"
      else if n == 19 then "nineteen"
      else
          var tens := n / 10;
          var ones := n % 10;
          var tensWord := if tens == 2 then "twenty"
                         else if tens == 3 then "thirty"
                         else if tens == 4 then "forty"
                         else if tens == 5 then "fifty"
                         else if tens == 6 then "sixty"
                         else if tens == 7 then "seventy"
                         else if tens == 8 then "eighty"
                         else if tens == 9 then "ninety"
                         else "";
          var onesWord := if ones == 1 then "-one"
                         else if ones == 2 then "-two"
                         else if ones == 3 then "-three"
                         else if ones == 4 then "-four"
                         else if ones == 5 then "-five"
                         else if ones == 6 then "-six"
                         else if ones == 7 then "-seven"
                         else if ones == 8 then "-eight"
                         else if ones == 9 then "-nine"
                         else "";
          tensWord + onesWord
  }

vc-spec: |-
  // ======= MAIN METHOD =======
  method solve(input: string) returns (output: string)
      requires ValidInputString(input)
      requires ValidNumber(ParsedNumber(input))
      ensures output == NumberToWords(ParsedNumber(input))

vc-code: |-
  {
      var trimmed := TrimmedInput(input);
      assert forall i :: 0 <= i < |trimmed| ==> trimmed[i] >= '0' && trimmed[i] <= '9';
      var n := StringToInt(trimmed);
      output := NumberToWords(n);
  }

vc-postamble: |-
