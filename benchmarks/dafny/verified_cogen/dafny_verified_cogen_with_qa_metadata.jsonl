{"id": "proofsynthesis_arg_free", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method ChooseOdd()", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_binary_search", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method BinarySearch(v: array<int>, k: int) returns (result: int)\n    requires forall i, j :: 0 <= i <= j < v.Length ==> v[i] <= v[j]\n    requires exists i :: 0 <= i < v.Length && k == v[i]\n    ensures 0 <= result < v.Length\n    ensures k == v[result]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_brs1", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method MyFun(a: array<int>, sum: array<int>, N: int)\n    requires N > 0\n    requires a.Length == N\n    requires sum.Length == 1\n    modifies a, sum\n    ensures sum[0] <= N", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_brs2", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, sum: array<int>, N: int) \n    requires \n        a.Length == N &&\n        sum.Length == 1 &&\n        N > 0 &&\n        N < 1000\n    ensures\n        sum[0] <= 2 * N\n    modifies a, sum", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_brs3", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, sum: array<int>, N: int)\n    requires a.Length == N\n    requires sum.Length == 1\n    requires N > 0\n    requires N < 1000\n    modifies sum\n    ensures sum[0] <= 3 * N", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_brs4", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, sum: array<int>, N: int) \n    requires \n        a.Length == N &&\n        sum.Length == 1 &&\n        N > 0 &&\n        N < 1000\n    ensures\n        sum[0] <= 4 * N\n    modifies a, sum", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_brs5", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, sum: array<int>, N: int) \n    requires \n        a.Length == N &&\n        sum.Length == 1 &&\n        N > 0 &&\n        N < 1000\n    ensures\n        sum[0] <= 5 * N\n    modifies a, sum", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_bubble_v1", "vc-description": "", "vc-preamble": "predicate SortedBetween(a: seq<int>, from: int, to: int)\n    requires 0 <= from <= to <= |a|\n{\n    forall i, j :: from <= i < j < to ==> a[i] <= a[j]\n}\n\npredicate IsReorderOf<T(==)>(r: seq<int>, p: seq<T>, s: seq<T>)\n    requires |r| == |p| && |r| == |s|\n{\n    && |r| == |s|\n    && (forall i :: 0 <= i < |r| ==> 0 <= r[i] < |s|)\n    && (forall i, j :: 0 <= i < j < |r| ==> r[i] != r[j])\n    && (forall i :: 0 <= i < |r| ==> p[i] == s[r[i]])\n}", "vc-helpers": "", "vc-spec": "method Test1(nums: array<int>)\n    modifies nums\n    ensures SortedBetween(nums[..], 0, nums.Length)\n    ensures exists r :: |r| == nums.Length && IsReorderOf(r, nums[..], old(nums[..]))", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_bubble_v2", "vc-description": "", "vc-preamble": "predicate SortedBetween(a: seq<int>, from: int, to: int)\n{\n    forall i, j :: from <= i < j < to && 0 <= i < |a| && 0 <= j < |a| ==> a[i] <= a[j]\n}\n\npredicate IsReorderOf<T(==)>(r: seq<int>, p: seq<T>, s: seq<T>)\n{\n    && |r| == |s|\n    && (forall i :: 0 <= i < |r| ==> 0 <= r[i] < |r|)\n    && (forall i, j :: 0 <= i < j < |r| ==> r[i] != r[j])\n    && p == seq(|r|, i requires 0 <= i < |r| => s[r[i]])\n}", "vc-helpers": "", "vc-spec": "method Test1(nums: array<int>)\n    modifies nums\n    ensures SortedBetween(nums[..], 0, nums.Length)\n    ensures exists r :: IsReorderOf(r, nums[..], old(nums[..]))", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_cell_2_sum", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, N: int) returns (sum: int)\n    requires \n        a.Length == N &&\n        N <= 0x7FFF_FFFF\n\n    ensures\n        sum <= 2*N", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_choose_odd", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method ChooseOdd(v: array<int>) returns (odd_index: int)\n    requires exists q :: 0 <= q < v.Length && v[q] % 2 == 1\n    ensures 0 <= odd_index < v.Length", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_conda", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, sum: array<int>, N: int)\n\trequires\n\t\tN > 0 &&\n\t\ta.Length == N &&\n\t\tsum.Length == 1 &&\n\t\tN < 1000\n\n\tensures\n\t\tsum[0] == 2 * N\n\n\tmodifies a, sum", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_condg", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, sum: array<int>, N: int)\n\trequires N > 0\n\trequires a.Length == N\n\trequires sum.Length == 1\n\tensures forall k :: 0 <= k < N ==> a[k] == 0\n\tmodifies a, sum", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_conditional_average", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method ConditionalAverage(vals_1: array<int>, vals_2: array<int>, conds_1: array<bool>, conds_2: array<bool>, avgs: array<int>)\n    requires vals_1.Length == vals_2.Length\n    requires vals_1.Length == conds_1.Length  \n    requires vals_1.Length == conds_2.Length\n    requires avgs.Length == vals_1.Length\n    requires forall idx :: 0 <= idx < vals_1.Length ==> conds_1[idx] || conds_2[idx]\n    requires forall idx :: 0 <= idx < vals_1.Length ==> vals_1[idx] < 1000\n    requires forall idx :: 0 <= idx < vals_2.Length ==> vals_2[idx] < 1000\n    modifies avgs\n    ensures forall idx :: 0 <= idx < vals_1.Length ==> (\n        (conds_1[idx] && conds_2[idx] ==> avgs[idx] == (vals_1[idx] + vals_2[idx]) / 2) &&\n        (conds_1[idx] && !conds_2[idx] ==> avgs[idx] == vals_1[idx]) &&\n        (!conds_1[idx] && conds_2[idx] ==> avgs[idx] == vals_2[idx])\n    )", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_condm", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, N: int)\n    requires N > 0\n    requires a.Length == N\n    ensures forall k:int :: 0 <= k < N ==> a[k] % 2 == N % 2\n    modifies a", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_condn", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, N: int, m: int)\n\trequires N > 0\n\trequires a.Length == N\n\tmodifies a\n\tensures forall k :: 0 <= k < N ==> a[k] <= N", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_fib", "vc-description": "", "vc-preamble": "function Fibo(n: int): nat\n    decreases n\n{\n    if n <= 0 then 0 else if n == 1 then 1\n    else Fibo(n - 2) + Fibo(n - 1)\n}\n\npredicate FiboFitsI32(n: int) {\n    Fibo(n) < 0x8000_0000\n}", "vc-helpers": "", "vc-spec": "method Fibonacci(n: int) returns (ret: seq<int>)\n    requires\n        FiboFitsI32(n) &&\n        n >= 2\n    ensures\n        |ret| == n &&\n        (forall i :: 2 <= i < n ==> ret[i] == Fibo(i))", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_filter", "vc-description": "", "vc-preamble": "function FilterDivisibleBy3(x: seq<int>): seq<int>\n{\n    seq(|x|, i requires 0 <= i < |x| => if x[i] % 3 == 0 then x[i] else 0)\n}", "vc-helpers": "", "vc-spec": "method myfun4(x: seq<int>, y: seq<int>) returns (newY: seq<int>)\n    requires |y| == 0\n    ensures newY == FilterDivisibleBy3(x)", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_filter_v2", "vc-description": "", "vc-preamble": "function filter(s: seq<int>, p: int -> bool): seq<int>\n{\n    if |s| == 0 then []\n    else if p(s[0]) then [s[0]] + filter(s[1..], p)\n    else filter(s[1..], p)\n}", "vc-helpers": "", "vc-spec": "method myfun4(x: seq<int>) returns (y: seq<int>)\n    ensures y == filter(x, k => k % 3 == 0)", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_filter_weak", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method Myfun4(x: array<int>, y: array<int>) returns ()\n    requires y.Length == 0\n    ensures forall k :: 0 <= k < y.Length ==> y[k] % 3 == 0 && y[k] in x[..]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_findmax", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method FindMax(nums: array<int>) returns (ret: int)\n    requires nums.Length > 0\n    ensures forall i :: 0 <= i < nums.Length ==> nums[i] <= ret\n    ensures exists i :: 0 <= i < nums.Length && nums[i] == ret", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_linearsearch", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method LinearSearch(nums: array<int>, target: int) returns (ret: int)\n    requires nums.Length < 0x8000_0000\n    ensures ret < nums.Length\n    ensures ret >= 0 ==> nums[ret] == target\n    ensures ret >= 0 ==> forall i :: 0 <= i < ret ==> nums[i] != target\n    ensures ret < 0 ==> forall i :: 0 <= i < nums.Length ==> nums[i] != target", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_map", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun2(x: array<int>) \n    requires \n        forall k:int :: 0 <= k < x.Length ==> x[k] <= 0x7FFF_FFFB\n    ensures \n        forall k:int :: 0 <= k < x.Length ==> x[k] == old(x[k]) + 4\n    modifies x", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_max_index", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method MyFun1(x: array<int>) returns (max_index: int)\n    requires x.Length >= 1\n    ensures 0 <= max_index < x.Length\n    ensures forall k :: 0 <= k < x.Length ==> x[max_index] >= x[k]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_ms1", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, sum: array<int>, N: int) \n    requires \n        a.Length == N &&\n        sum.Length == 1 &&\n        N > 0\n    modifies a, sum\n    ensures\n        sum[0] == 0", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_ms2", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, sum: array<int>, N: int) \n\trequires a.Length == N && sum.Length == 1 && N > 0\n\tmodifies a, sum\n\tensures sum[0] <= N", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_ms3", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, sum: array<int>, N: int) \n    requires \n        a.Length == N &&\n        sum.Length == 1 &&\n        N > 0 &&\n        N < 1000\n    modifies sum\n    ensures\n        sum[0] <= 2 * N", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_ms4", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, sum: array<int>, N: int) \n\trequires \n\t\ta.Length == N &&\n\t\tsum.Length == 1 &&\n\t\tN > 0 &&\n\t\tN < 1000\n\tmodifies sum\n\tensures\n\t\tsum[0] <= 3 * N", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_ms5", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, sum: array<int>, N: int) \n    requires \n        a.Length == N &&\n        sum.Length == 1 &&\n        N > 0 &&\n        N < 1000\n    modifies sum\n    ensures\n        sum[0] <= 4 * N", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_remove_all_greater", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method RemoveAllGreater(v: array<int>, e: int) returns (result: array<int>)\n\n    requires \n        forall k1, k2 :: 0 <= k1 < k2 < v.Length ==> v[k1] != v[k2]\n\n    ensures\n        forall k :: 0 <= k < result.Length ==> result[k] <= e && result[k] in v[..]\n    ensures\n        forall k :: 0 <= k < v.Length && v[k] <= e ==> v[k] in result[..]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_remove_all_greater_v2", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method RemoveAllGreater(v: array<int>, e: int) returns (result: array<int>)\n    requires \n        forall k1, k2 :: 0 <= k1 < k2 < v.Length ==> v[k1] != v[k2]\n    ensures\n        forall k :: 0 <= k < result.Length ==> result[k] <= e && (exists j :: 0 <= j < v.Length && v[j] == result[k])\n    ensures\n        forall k :: 0 <= k < v.Length && v[k] <= e ==> (exists j :: 0 <= j < result.Length && result[j] == v[k])", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_res1", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, b: array<int>, sum: array<int>, N: int)\n\trequires N > 0\n\trequires a.Length == N\n\trequires b.Length == N\n\trequires sum.Length == 1\n\trequires N < 1000\n\tensures sum[0] <= 2 * N\n\tmodifies a, b, sum", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_res1o", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, b: array<int>, sum: array<int>, N: int)\n\trequires N > 0\n\trequires a.Length == N\n\trequires b.Length == N\n\trequires sum.Length == 1\n\trequires N < 1000\n\tensures sum[0] <= 2 * N\n\tmodifies a, b, sum", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_res2o", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, b: array<int>, c: array<int>, sum: array<int>, N: int)\n\trequires N > 0\n\trequires a.Length == N\n\trequires b.Length == N\n\trequires c.Length == N\n\trequires sum.Length == 1\n\trequires N < 1000\n\tensures sum[0] <= 3 * N\n\tmodifies a, b, c, sum", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_s12if", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, sum: array<int>, N: int)\n\trequires\n\t\tN > 0 &&\n\t\ta.Length == N &&\n\t\tsum.Length == 1 &&\n\t\tN < 1000\n\tmodifies sum\n\tensures\n\t\tsum[0] == 2 * N", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_s1if", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, sum: array<int>, N: int)\n\trequires\n\t\tN > 0 &&\n\t\ta.Length == N &&\n\t\tsum.Length == 1\n\tmodifies a, sum\n\tensures\n\t\tsum[0] == N", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_s1lif", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, sum: array<int>, N: int)\n    requires N > 0\n    requires a.Length == N\n    requires sum.Length == 1\n    requires N < 1000\n    modifies a, sum\n    ensures sum[0] == 2 * N", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_s22if", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, sum: array<int>, N: int)\n\trequires\n\t\tN > 0 &&\n\t\ta.Length == N &&\n\t\tsum.Length == 1 &&\n\t\tN < 1000\n\tmodifies sum\n\tensures\n\t\tsum[0] == 3 * N", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_s2if", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, sum: array<int>, N: int)\n\trequires\n\t\tN > 0 &&\n\t\ta.Length == N &&\n\t\tsum.Length == 1 &&\n\t\tN < 1000\n\tensures\n\t\tsum[0] == 2 * N\n\tmodifies a, sum", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_s2lif", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, sum: array<int>, N: int)\n\trequires\n\t\tN > 0 &&\n\t\ta.Length == N &&\n\t\tsum.Length == 1 &&\n\t\tN < 1000\n\tmodifies sum\n\tensures\n\t\tsum[0] == 3 * N", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_s32if", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method MyFun(a: array<int>, sum: array<int>, N: int)\n\trequires\n\t\tN > 0 &&\n\t\ta.Length == N &&\n\t\tsum.Length == 1 &&\n\t\tN < 1000\n\tmodifies a, sum\n\tensures\n\t\tsum[0] == 4 * N", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_s3if", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, sum: array<int>, N: int)\n    requires N > 0\n    requires a.Length == N\n    requires sum.Length == 1\n    requires N < 1000\n    modifies sum\n    ensures sum[0] == 3 * N", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_s3lif", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, sum: array<int>, N: int)\n    requires N > 0\n    requires a.Length == N\n    requires sum.Length == 1\n    requires N < 1000\n    modifies sum\n    ensures sum[0] == 4 * N", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_s42if", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, sum: array<int>, N: int)\n\trequires N > 0\n\trequires a.Length == N\n\trequires sum.Length == 1\n\trequires N < 1000\n\tensures sum[0] == 5 * N\n\tmodifies a, sum", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_s4if", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, sum: array<int>, N: int)\n    requires N > 0\n    requires a.Length == N\n    requires sum.Length == 1\n    requires N < 1000\n    modifies sum\n    ensures sum[0] == 4 * N", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_s4lif", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, sum: array<int>, N: int)\n    requires N > 0\n    requires a.Length == N\n    requires sum.Length == 1\n    requires N < 1000\n    modifies sum\n    ensures sum[0] == 5 * N", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_s52if", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, sum: array<int>, N: int)\n    requires N > 0\n    requires a.Length == N\n    requires sum.Length == 1\n    requires N < 1000\n    modifies sum\n    ensures sum[0] == 6 * N", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_s5if", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, sum: array<int>, N: int)\n    requires N > 0\n    requires a.Length == N\n    requires sum.Length == 1\n    requires N < 1000\n    ensures sum[0] == 5 * N\n    modifies a, sum", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_s5lif", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, sum: array<int>, N: int)\n\trequires\n\t\tN > 0 &&\n\t\ta.Length == N &&\n\t\tsum.Length == 1 &&\n\t\tN < 1000\n\n\tensures\n\t\tsum[0] == 6 * N\n\tmodifies a, sum", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_simple_nested", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method SimpleNested(a: array<int>, b: array<int>, N: int) returns (sum: int)\n    requires forall k :: 0 <= k < b.Length ==> k <= b[k] <= k + 1\n    requires a.Length == N\n    requires b.Length == N\n    requires N <= 0x3FFF_FFFF\n    ensures N <= sum <= 2*N", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_sina1", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, sum: array<int>, N: int)\n\trequires\n\t\tN > 0 &&\n\t\ta.Length == N &&\n\t\tsum.Length == 1\n\tmodifies a, sum\n\tensures\n\t\tforall k:int :: 0 <= k < N ==> a[k] == N", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_sina2", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, sum: array<int>, N: int)\n\trequires N > 0\n\trequires a.Length == N\n\trequires sum.Length == 1\n\trequires N < 1000\n\tmodifies a, sum\n\tensures forall k :: 0 <= k < N ==> a[k] == N + 1", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_sina3", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, b: array<int>, sum: array<int>, N: int)\n\trequires N > 0\n\trequires a.Length == N\n\trequires b.Length == N\n\trequires sum.Length == 1\n\trequires N < 1000\n\tmodifies a, b, sum\n\tensures forall k :: 0 <= k < N ==> a[k] == N + 1", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_sina4", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, b: array<int>, sum: array<int>, N: int)\n\trequires N > 0\n\trequires a.Length == N\n\trequires b.Length == N\n\trequires sum.Length == 1\n\trequires N < 1000\n\tensures forall k :: 0 <= k < N ==> b[k] == N + 2\n\tmodifies a, b, sum", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_sina5", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method myfun(a: array<int>, b: array<int>, sum: array<int>, N: int)\n    requires N > 0\n    requires a.Length == N\n    requires b.Length == N\n    requires sum.Length == 1\n    requires N < 1000\n    ensures forall k :: 0 <= k < N ==> a[k] == 2 * N + 1\n    modifies a, b, sum", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_tail_triangle", "vc-description": "", "vc-preamble": "function triangle(n: nat): nat\n    decreases n\n{\n    if n == 0 then\n        0\n    else\n        n + triangle(n - 1)\n}", "vc-helpers": "", "vc-spec": "method tail_triangle(n: nat, idx: nat, sum: nat) returns (new_sum: nat)\n    requires idx <= n\n    requires sum == triangle(idx)\n    requires triangle(n) < 0x1_0000_0000\n    ensures new_sum == triangle(n)", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_105", "vc-description": "", "vc-preamble": "function CountBoolean(s: seq<bool>): int\n    decreases |s|\n{\n    if |s| == 0 then\n        0\n    else\n        CountBoolean(s[..|s|-1]) + if s[|s|-1] then\n            1\n        else\n            0\n}", "vc-helpers": "", "vc-spec": "method CountTrue(arr: array<bool>) returns (count: int)\n    ensures 0 <= count <= arr.Length\n    ensures CountBoolean(arr[..]) == count", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_113", "vc-description": "", "vc-preamble": "predicate IsDigitSpec(c: char) \n{\n    (c as int) >= 48 && (c as int) <= 57\n}", "vc-helpers": "", "vc-spec": "method IsInteger(text: array<char>) returns (result: bool)\n    ensures result == (forall i :: 0 <= i < text.Length ==> IsDigitSpec(text[i]))", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_133", "vc-description": "", "vc-preamble": "function SumNegativeTo(s: seq<int>): int\n    decreases |s|\n{\n    if |s| == 0 then\n        0\n    else\n        SumNegativeTo(s[..|s|-1]) + if (s[|s|-1] < 0) then\n            s[|s|-1]\n        else\n            0\n}", "vc-helpers": "", "vc-spec": "method SumNegatives(arr: array<int>) returns (sum_neg: int)\n    ensures SumNegativeTo(arr[..]) == sum_neg", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_142", "vc-description": "", "vc-preamble": "function CountIdentical(s1: seq<int>, s2: seq<int>, s3: seq<int>): int\n    decreases |s1|, |s2|, |s3|\n{\n    if |s1| == 0 || |s2| == 0 || |s3| == 0 then\n        0\n    else\n        CountIdentical(s1[..|s1|-1], s2[..|s2|-1], s3[..|s3|-1]) + if (s1[|s1|-1] == s2[|s2|-1]\n            && s2[|s2|-1] == s3[|s3|-1]) then\n            1\n        else\n            0\n}", "vc-helpers": "", "vc-spec": "method CountIdenticalPosition(arr1: array<int>, arr2: array<int>, arr3: array<int>) returns (count: nat)\n    requires arr1.Length == arr2.Length && arr2.Length == arr3.Length\n    ensures 0 <= count <= arr1.Length\n    ensures CountIdentical(arr1[..], arr2[..], arr3[..]) == count", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_145", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method MaxDifference(arr: array<int>) returns (diff: int)\n    requires arr.Length > 0\n    requires forall i :: 0 <= i < arr.Length ==> -1073741824 < arr[i] < 1073741823\n    ensures forall i, j :: 0 <= i < arr.Length && 0 <= j < arr.Length ==> arr[i] - arr[j] <= diff", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_161", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method RemoveElements(arr1: array<int>, arr2: array<int>) returns (result: seq<int>)\n    ensures\n        forall i: int ::\n            0 <= i < |result| ==> (result[i] in arr1[..] && !(result[i] in arr2[..]))\n    ensures\n        forall i: int ::\n            0 <= i < arr1.Length ==> (arr1[i] in arr2[..] || arr1[i] in result)", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_170", "vc-description": "", "vc-preamble": "function SumTo(arr: seq<int>): int\n    decreases |arr|\n{\n    if |arr| == 0 then\n        0\n    else\n        SumTo(arr[..|arr|-1]) + arr[|arr|-1]\n}", "vc-helpers": "", "vc-spec": "method SumRangeList(arr: array<int>, start: int, end: int) returns (sum: int)\n    requires 0 <= start <= end\n    requires start <= end < arr.Length\n    ensures SumTo(arr[start..end+1]) == sum", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_18", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method RemoveChars(str1: array<char>, str2: array<char>) returns (result: array<char>)\n    ensures\n        forall i :: 0 <= i < result.Length ==> (result[i] in str1[..] && result[i] !in str2[..])\n    ensures\n        forall i :: 0 <= i < str1.Length ==> (str1[i] in str2[..] || str1[i] in result[..])", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_2", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method SharedElements(list1: array<int>, list2: array<int>) returns (shared: array<int>)\n    ensures\n        forall i :: 0 <= i < shared.Length ==> (shared[i] in list1[..] && shared[i] in list2[..])\n    ensures\n        forall i, j :: 0 <= i < j < shared.Length ==> shared[i] != shared[j]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_230", "vc-description": "", "vc-preamble": "function InnerExprReplaceBlanksWithChars(str1: seq<char>, ch: char, i: int): char\n    requires 0 <= i < |str1|\n{\n    if str1[i] == ' ' then\n        ch\n    else\n        str1[i]\n}", "vc-helpers": "", "vc-spec": "method ReplaceBlanksWithChars(str1: seq<char>, ch: char) returns (result: seq<char>)\n    ensures\n        |str1| == |result| &&\n        forall i :: 0 <= i < |str1| ==> result[i] == InnerExprReplaceBlanksWithChars(str1, ch, i)", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_240", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method ReplaceLastElement(first: array<int>, second: array<int>) returns (replacedList: array<int>)\n    requires first.Length > 0\n    ensures replacedList.Length == first.Length - 1 + second.Length\n    ensures forall i :: 0 <= i < first.Length - 1 ==> replacedList[i] == first[i]\n    ensures forall i :: 0 <= i < second.Length ==> replacedList[first.Length - 1 + i] == second[i]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_249", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method intersection(arr1: array<int>, arr2: array<int>) returns (result: array<int>)\n    ensures\n        forall i :: 0 <= i < result.Length ==> (result[i] in arr1[..] && result[i] in arr2[..])\n    ensures\n        forall i, j :: 0 <= i < j < result.Length ==> result[i] != result[j]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_251", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method InsertBeforeEach(arr: array<int>, elem: int) returns (result: array<int>)\n    ensures\n        result.Length == (2 * arr.Length) &&\n        (forall k :: 0 <= k < arr.Length ==> result[2 * k] == elem) &&\n        (forall k :: 0 <= k < arr.Length ==> result[2 * k + 1] == arr[k])", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_261", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method ElementWiseDivision(arr1: array<int>, arr2: array<int>) returns (result: array<int>)\n    requires arr1.Length == arr2.Length\n    requires forall i :: 0 <= i < arr2.Length ==> arr2[i] != 0\n    requires forall m :: 0 <= m < arr1.Length ==> arr1[m] / arr2[m] >= 0\n    ensures result.Length == arr1.Length\n    ensures forall i :: 0 <= i < result.Length ==> result[i] == arr1[i] / arr2[i]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_262", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method SplitArray(list: array<int>, l: int) returns (new_list: (seq<int>, seq<int>))\n    requires\n        list.Length > 0 &&\n        0 < l < list.Length\n    ensures\n        new_list.0 == list[0..l] &&\n        new_list.1 == list[l..list.Length]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_273", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method ElementWiseSubtract(arr1: array<int>, arr2: array<int>) returns (result: array<int>)\n    requires arr1.Length == arr2.Length\n    requires forall i :: 0 <= i < arr1.Length ==> (arr1[i] - arr2[i]) >= -2147483648 && (arr1[i] - arr2[i]) <= 2147483647\n    ensures result.Length == arr1.Length\n    ensures forall i :: 0 <= i < result.Length ==> result[i] == (arr1[i] - arr2[i])", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_282", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method ElementWiseSubtract(arr1: array<int>, arr2: array<int>) returns (result: array<int>)\n    requires arr1.Length == arr2.Length\n    requires forall i :: 0 <= i < arr1.Length ==> -2147483648 <= arr1[i] - arr2[i] <= 2147483647\n    ensures result.Length == arr1.Length\n    ensures forall i :: 0 <= i < result.Length ==> result[i] == arr1[i] - arr2[i]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_284", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method AllElementsEquals(arr: array<int>, element: int) returns (result: bool)\n    ensures result == (forall i :: 0 <= i < arr.Length ==> arr[i] == element)", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_3", "vc-description": "", "vc-preamble": "predicate IsDivisible(n: int, divisor: int)\n    requires divisor != 0\n{\n    (n % divisor) == 0\n}", "vc-helpers": "", "vc-spec": "method IsNonPrime(n: int) returns (result: bool)\n    requires n >= 2\n    ensures result == (exists k :: 2 <= k < n && IsDivisible(n, k))", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_307", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method ListDeepClone(arr: array<int>) returns (copied: array<int>)\n    ensures arr.Length == copied.Length\n    ensures forall i :: 0 <= i < arr.Length ==> arr[i] == copied[i]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_399", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method BitWiseXor(arr1: array<bv32>, arr2: array<bv32>) returns (result: array<bv32>)\n    requires arr1.Length == arr2.Length\n    ensures result.Length == arr1.Length\n    ensures forall i :: 0 <= i < result.Length ==> result[i] == arr1[i] ^ arr2[i]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_412", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method RemoveOdds(arr: array<int>) returns (even_list: seq<int>)\n    ensures |even_list| <= arr.Length\n    ensures forall i :: 0 <= i < |even_list| ==> even_list[i] % 2 == 0", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_414", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method AnyValueExists(arr1: array<int>, arr2: array<int>) returns (result: bool)\n    ensures result == exists k :: 0 <= k < arr1.Length && k in arr2[..]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_424", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method ExtractRearChars(s: array<array<char>>) returns (result: array<char>)\n    requires forall i :: 0 <= i < s.Length ==> s[i].Length > 0\n    ensures s.Length == result.Length\n    ensures forall i :: 0 <= i < s.Length ==> result[i] == s[i][s[i].Length - 1]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_426", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method FilterOddNumbers(arr: array<int>) returns (odd_list: seq<int>)\n    ensures |odd_list| == |set i | 0 <= i < arr.Length && arr[i] % 2 != 0|\n    ensures forall x :: x in odd_list ==> x % 2 != 0\n    ensures forall i :: 0 <= i < arr.Length && arr[i] % 2 != 0 ==> arr[i] in odd_list", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_431", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method HasCommonElement(list1: array<int>, list2: array<int>) returns (result: bool)\n    ensures\n        result == (exists i: int, j: int ::\n            0 <= i < list1.Length && 0 <= j < list2.Length && (list1[i] == list2[j]))", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_433", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method IsGreater(arr: array<int>, number: int) returns (result: bool)\n    ensures result == (forall i :: 0 <= i < arr.Length ==> number > arr[i])", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_436", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method FindNegativeNumbers(arr: array<int>) returns (negative_list: seq<int>)\n    ensures forall x :: x in negative_list ==> x < 0\n    ensures forall i :: 0 <= i < arr.Length && arr[i] < 0 ==> arr[i] in negative_list", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_445", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method ElementWiseMultiplication(arr1: array<int>, arr2: array<int>) returns (result: array<int>)\n\n    requires\n        arr1.Length == arr2.Length\n    requires\n        forall i :: 0 <= i < arr1.Length ==> (arr1[i] * arr2[i] >= -2147483648 && arr1[i] * arr2[i] <= 2147483647)\n\n    ensures\n        result.Length == arr1.Length\n    ensures\n        forall i :: 0 <= i < result.Length ==> result[i] == arr1[i] * arr2[i]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_447", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method CubeElement(nums: array<int>) returns (cubed: array<int>)\n\n    requires\n        forall k :: 0 <= k < nums.Length ==> (\n            var val := nums[k];\n            var squared := val * val;\n            var cubed_val := squared * val;\n            -2147483648 <= squared <= 2147483647 &&\n            -2147483648 <= cubed_val <= 2147483647\n        )\n\n    ensures\n        cubed.Length == nums.Length\n    ensures\n        forall i :: 0 <= i < nums.Length ==> \n            cubed[i] == nums[i] * nums[i] * nums[i]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_454", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method ContainsZ(text: array<char>) returns (result: bool)\n    ensures result == (exists i :: 0 <= i < text.Length && (text[i] == 'Z' || text[i] == 'z'))", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_460", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method GetFirstElements(arr: array<array<int>>) returns (result: array<int>)\n\n    requires\n        forall i :: 0 <= i < arr.Length ==> arr[i].Length > 0\n\n    ensures\n        arr.Length == result.Length\n    ensures\n        forall i :: 0 <= i < arr.Length ==> result[i] == arr[i][0]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_461", "vc-description": "", "vc-preamble": "predicate IsLowerCase(c: char)\n{\n    (c as int) >= 97 && (c as int) <= 122\n}\n\npredicate IsUpperCase(c: char)\n{\n    (c as int) >= 65 && (c as int) <= 90\n}\n\nfunction CountUppercaseRecursively(s: seq<char>): int\n    decreases |s|\n{\n    if |s| == 0 then\n        0\n    else\n        CountUppercaseRecursively(s[..|s|-1]) + (if IsUpperCase(s[|s|-1]) then 1 else 0)\n}", "vc-helpers": "", "vc-spec": "method CountUppercase(text: array<char>) returns (count: nat)\n    ensures 0 <= count <= text.Length\n    ensures CountUppercaseRecursively(text[..]) == count as int", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_472", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method ContainsConsecutiveNumbers(arr: array<int>) returns (is_consecutive: bool)\n    requires arr.Length > 0\n    requires forall i :: 0 <= i < arr.Length ==> (0 <= arr[i] + 1 < 2147483647)\n    ensures is_consecutive == (forall i, j :: 0 <= i < j < arr.Length && j == i + 1 ==> (arr[i] + 1 == arr[j]))", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_474", "vc-description": "", "vc-preamble": "function InnerExprReplaceChars(str1: seq<char>, oldChar: char, newChar: char, i: int): char\n    requires 0 <= i < |str1|\n{\n    if str1[i] == oldChar then\n        newChar\n    else\n        str1[i]\n}", "vc-helpers": "", "vc-spec": "method ReplaceChars(str1: seq<char>, oldChar: char, newChar: char) returns (result: seq<char>)\n    ensures |str1| == |result|\n    ensures forall i :: 0 <= i < |str1| ==> result[i] == InnerExprReplaceChars(str1, oldChar, newChar, i)", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_476", "vc-description": "", "vc-preamble": "function max(a: int, b: int): int\n{\n    if a >= b then a else b\n}\n\nfunction min(a: int, b: int): int\n{\n    if a <= b then a else b\n}\n\nfunction MaxRcur(s: seq<int>): int\n    requires |s| > 0\n    decreases |s|\n{\n    if |s| <= 1 then\n        s[0]\n    else\n        max(s[|s|-1], MaxRcur(s[..|s|-1]))\n}\n\nfunction MinRcur(s: seq<int>): int\n    requires |s| > 0\n    decreases |s|\n{\n    if |s| <= 1 then\n        s[0]\n    else\n        min(s[|s|-1], MinRcur(s[..|s|-1]))\n}", "vc-helpers": "", "vc-spec": "method SumMinMax(arr: array<int>) returns (sum: int)\n    requires arr.Length > 0\n    requires forall i :: 0 <= i < arr.Length ==> -1073741824 < arr[i] < 1073741823\n    ensures sum == MaxRcur(arr[..]) + MinRcur(arr[..])", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_477", "vc-description": "", "vc-preamble": "predicate IsUpperCase(c: char)\n{\n    c >= 'A' && c <= 'Z'\n}\n\nfunction Shift32Spec(c: char): char\n    requires IsUpperCase(c)\n    requires c as int + 32 < 65536\n{\n    if c as int + 32 < 65536 then (c as int + 32) as char else c\n}", "vc-helpers": "", "vc-spec": "method ToLowercase(str1: array<char>) returns (result: array<char>)\n    ensures result.Length == str1.Length\n    ensures forall i :: 0 <= i < str1.Length ==> \n        result[i] == (if IsUpperCase(str1[i]) then Shift32Spec(str1[i]) else str1[i])", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_554", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method FindOddNumbers(arr: array<int>) returns (odd_numbers: seq<int>)\n    ensures forall x :: x in odd_numbers ==> x % 2 != 0\n    ensures forall i :: 0 <= i < arr.Length && arr[i] % 2 != 0 ==> arr[i] in odd_numbers", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_557", "vc-description": "", "vc-preamble": "predicate IsUpperCase(c: char)\n{\n    c >= 'A' && c <= 'Z'\n}\n\nfunction Shift32Spec(c: char): char\n    requires c as int + 32 <= 127\n{\n    (c as int + 32) as char\n}\n\npredicate IsLowerCase(c: char)\n{\n    c >= 'a' && c <= 'z'\n}\n\nfunction ShiftMinus32Spec(c: char): char\n    requires c as int - 32 >= 0 && c as int - 32 <= 127\n{\n    (c as int - 32) as char\n}\n\nfunction ToToggleCaseSpec(s: char): char\n{\n    if IsLowerCase(s) then\n        ShiftMinus32Spec(s)\n    else if IsUpperCase(s) then\n        Shift32Spec(s)\n    else\n        s\n}", "vc-helpers": "", "vc-spec": "method ToToggleCase(str1: array<char>) returns (toggle_case: array<char>)\n    ensures\n        str1.Length == toggle_case.Length &&\n        forall i :: 0 <= i < str1.Length ==> toggle_case[i] == ToToggleCaseSpec(str1[i])", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_567", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method IsSorted(arr: array<int>) returns (is_sorted: bool)\n\n    requires\n        arr.Length > 0\n\n    ensures\n        is_sorted == (forall i, j :: 0 <= i < j < arr.Length ==> (arr[i] <= arr[j]))", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_572", "vc-description": "", "vc-preamble": "function CountFrequencyRcr(s: seq<int>, key: int): int\n    decreases |s|\n{\n    if |s| == 0 then\n        0\n    else\n        CountFrequencyRcr(s[..|s|-1], key) + if s[|s|-1] == key then\n            1\n        else\n            0\n}", "vc-helpers": "", "vc-spec": "method RemoveDuplicates(arr: array<int>) returns (unique_arr: array<int>)\n    ensures forall i :: 0 <= i < unique_arr.Length ==> CountFrequencyRcr(arr[..], unique_arr[i]) == 1", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_576", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method IsSubArray(main: array<int>, sub: array<int>) returns (result: bool)\n    requires sub.Length <= main.Length\n    ensures result == (exists k: int, l: int ::\n        0 <= k <= (main.Length - sub.Length) && l == k + sub.Length && \n        main[k..l] == sub[..])", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_576_v2", "vc-description": "", "vc-preamble": "predicate IsSubrangeAt(main: seq<int>, sub: seq<int>, i: int)\n{\n    0 <= i && i + |sub| <= |main| && sub == main[i..i+|sub|]\n}", "vc-helpers": "", "vc-spec": "method IsSubArray(main: array<int>, sub: array<int>) returns (result: bool)\n    ensures result == (exists k :: 0 <= k <= (main.Length - sub.Length) && IsSubrangeAt(main[..], sub[..], k))", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_578", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method interleave(s1: array<int>, s2: array<int>, s3: array<int>) returns (res: array<int>)\n    requires s1.Length == s2.Length && s2.Length == s3.Length\n    requires 0 <= (s1.Length * 3)\n    ensures res.Length == s1.Length * 3\n    ensures forall i :: 0 <= i < s1.Length ==> (res[3 * i] == s1[i] && res[3 * i + 1] == s2[i] && res[3 * i + 2] == s3[i])", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_579", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method FindDissimilar(arr1: seq<int>, arr2: seq<int>) returns (result: seq<int>)\n    ensures\n        (forall i :: 0 <= i < |arr1| ==> (!(arr1[i] in arr2) ==> (arr1[i] in result)))\n    ensures\n        (forall i :: 0 <= i < |arr2| ==> (!(arr2[i] in arr1) ==> (arr2[i] in result)))\n    ensures\n        (forall i, j :: 0 <= i < j < |result| ==> result[i] != result[j])", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_586", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method SplitAndAppend(list: array<int>, n: int) returns (new_list: seq<int>)\n    requires list.Length > 0\n    requires 0 < n < list.Length\n    ensures new_list == list[n..list.Length] + list[0..n]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_588", "vc-description": "", "vc-preamble": "function MaxRcur(s: seq<int>): int\n    requires |s| > 0\n    decreases |s|\n{\n    if |s| <= 1 then\n        s[0]\n    else\n        var last := s[|s|-1];\n        var rest := MaxRcur(s[..|s|-1]);\n        if last > rest then last else rest\n}\n\nfunction MinRcur(s: seq<int>): int\n    requires |s| > 0\n    decreases |s|\n{\n    if |s| <= 1 then\n        s[0]\n    else\n        var last := s[|s|-1];\n        var rest := MinRcur(s[..|s|-1]);\n        if last < rest then last else rest\n}", "vc-helpers": "", "vc-spec": "method DifferenceMaxMin(arr: array<int>) returns (diff: int)\n    requires arr.Length > 0\n    requires forall i :: 0 <= i < arr.Length ==> -1073741824 < arr[i] < 1073741823\n    ensures diff == MaxRcur(arr[..]) - MinRcur(arr[..])", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_602", "vc-description": "", "vc-preamble": "datatype Option<T> = None | Some(value: T)\n\nfunction CountFrequencyRcr(s: seq<char>, key: char): int\n    decreases |s|\n{\n    if |s| == 0 then\n        0\n    else\n        CountFrequencyRcr(s[..|s|-1], key) + if (s[|s|-1] == key) then\n            1\n        else\n            0\n}\n\npredicate CheckFirstRepeatedChar(str1: seq<char>, repeated_char: Option<(nat, char)>)\n{\n    match repeated_char\n    case None =>\n        forall k :: 0 <= k < |str1| ==> CountFrequencyRcr(str1, str1[k]) <= 1\n    case Some(pair) =>\n        var idx := pair.0;\n        var rp_char := pair.1;\n        && idx as int <= |str1|\n        && (forall i :: 0 <= i < idx as int ==> CountFrequencyRcr(str1, str1[i]) <= 1)\n        && CountFrequencyRcr(str1, rp_char) > 1\n}", "vc-helpers": "", "vc-spec": "method FirstRepeatedChar(str1: array<char>) returns (repeated_char: Option<(nat, char)>)\n    ensures CheckFirstRepeatedChar(str1[..], repeated_char)", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_605", "vc-description": "", "vc-preamble": "predicate IsDivisible(n: int, divisor: int)\n    requires divisor != 0\n{\n    (n % divisor) == 0\n}", "vc-helpers": "", "vc-spec": "method PrimeNum(n: int) returns (result: bool)\n    requires n >= 2\n    ensures result == (forall k :: 2 <= k < n ==> !IsDivisible(n, k))", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_610", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method RemoveKthElement(list: array<int>, k: int) returns (new_list: seq<int>)\n    requires list.Length > 0\n    requires 0 < k < list.Length\n    ensures new_list == list[0..k-1] + list[k..list.Length]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_616", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method ElementWiseModule(arr1: array<int>, arr2: array<int>) returns (result: array<int>)\n    requires arr1.Length == arr2.Length\n    requires forall i :: 0 <= i < arr2.Length ==> arr2[i] != 0\n    requires forall i :: 0 <= i < arr1.Length ==> -2147483648 <= arr1[i] % arr2[i] <= 2147483647\n    ensures result.Length == arr1.Length\n    ensures forall i :: 0 <= i < result.Length ==> result[i] == arr1[i] % arr2[i]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_618", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method ElementWiseDivide(arr1: array<int>, arr2: array<int>) returns (result: array<int>)\n    requires arr1.Length == arr2.Length\n    requires forall i :: 0 <= i < arr2.Length ==> arr2[i] != 0\n    requires forall i :: 0 <= i < arr1.Length ==> -2147483648 <= arr1[i] / arr2[i] <= 2147483647\n    ensures result.Length == arr1.Length\n    ensures forall i :: 0 <= i < result.Length ==> result[i] == arr1[i] / arr2[i]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_62", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method SmallestNum(nums: array<int>) returns (min: int)\n    requires nums.Length > 0\n    ensures forall i :: 0 <= i < nums.Length ==> min <= nums[i]\n    ensures exists i :: 0 <= i < nums.Length && min == nums[i]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_624", "vc-description": "", "vc-preamble": "predicate IsLowerCase(c: char)\n{\n    c >= 'a' && c <= 'z'\n}\n\nfunction ShiftMinus32Spec(c: char): char\n    requires IsLowerCase(c)\n{\n    (c as int - 32) as char\n}\n\nfunction InnerExprToUppercase(str1: seq<char>, i: int): char\n    requires 0 <= i < |str1|\n{\n    if IsLowerCase(str1[i]) then\n        ShiftMinus32Spec(str1[i])\n    else\n        str1[i]\n}", "vc-helpers": "", "vc-spec": "method ToUppercase(str1: seq<char>) returns (result: seq<char>)\n    ensures\n        |str1| == |result| &&\n        forall i :: 0 <= i < |str1| ==> result[i] == InnerExprToUppercase(str1, i)", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_629", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method FindEvenNumbers(arr: array<int>) returns (even_numbers: seq<int>)\n    ensures |even_numbers| <= arr.Length\n    ensures forall i :: 0 <= i < |even_numbers| ==> even_numbers[i] % 2 == 0\n    ensures forall x :: x in even_numbers ==> x in arr[..]\n    ensures forall i :: 0 <= i < arr.Length && arr[i] % 2 == 0 ==> arr[i] in even_numbers", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_644", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method ReverseToK(list: array<int>, n: int) returns (reversed_list: seq<int>)\n    requires\n        list.Length > 0 &&\n        0 < n < list.Length\n    ensures\n        reversed_list == list[0..n][..n] + list[n..list.Length]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_69", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method IsSubList(main: array<int>, sub: array<int>) returns (result: bool)\n\n    requires\n        sub.Length <= main.Length\n\n    ensures\n        result == (exists k: int, l: int ::\n            0 <= k <= (main.Length - sub.Length) && l == k + sub.Length && (main[k..l]) == sub[..])", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_70", "Great! Now I have the working Dafny code. Let me format it according to the YAML structure": null, "vc-description": "", "vc-preamble": "type NestedSeq = seq<seq<int>>", "vc-helpers": "", "vc-spec": "method AllSequenceEqualLength(s: NestedSeq) returns (r: bool)\n    requires |s| > 0\n    ensures r == (forall i, j :: 0 <= i < |s| && 0 <= j < |s| ==> |s[i]| == |s[j]|)", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_728", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method AddList(arr1: array<int>, arr2: array<int>) returns (result: array<int>)\n    requires arr1.Length == arr2.Length\n    requires forall i :: 0 <= i < arr1.Length ==> (-2147483648 <= arr1[i] + arr2[i] <= 2147483647)\n    ensures result.Length == arr1.Length\n    ensures forall i :: 0 <= i < result.Length ==> result[i] == arr1[i] + arr2[i]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_732", "vc-description": "", "vc-preamble": "predicate IsSpaceCommaDotSpec(c: char)\n{\n    (c == ' ') || (c == ',') || (c == '.')\n}\n\nfunction InnerExprReplaceWithColon(str1: seq<char>, k: int): char\n    requires 0 <= k < |str1|\n{\n    if IsSpaceCommaDotSpec(str1[k]) then\n        ':'\n    else\n        str1[k]\n}", "vc-helpers": "", "vc-spec": "method ReplaceWithColon(str1: seq<char>) returns (result: seq<char>)\n    ensures\n        |str1| == |result| &&\n        forall k :: 0 <= k < |result| ==> result[k] == InnerExprReplaceWithColon(str1, k)", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_733", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method FindFirstOccurrence(arr: array<int>, target: int) returns (index: int)\n\n    requires\n        forall i, j :: 0 <= i < j < arr.Length ==> arr[i] <= arr[j]\n\n    ensures\n        if index >= 0 then (\n            && 0 <= index < arr.Length\n            && (forall k :: 0 <= k < index ==> arr[k] != target)\n            && arr[index] == target\n        ) else (\n            forall k :: 0 <= k < arr.Length ==> arr[k] != target\n        )", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_741", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method AllCharactersSame(char_arr: array<char>) returns (result: bool)\n    ensures result == (forall i :: 1 <= i < char_arr.Length ==> char_arr[0] == char_arr[i])", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_743", "vc-description": "", "vc-preamble": "function RotationSplit(len: int, n: int): int\n    requires len > 0\n{\n    len - (n % len)\n}", "vc-helpers": "", "vc-spec": "method RotateRight(list: array<int>, n: int) returns (new_list: array<int>)\n    requires list.Length > 0\n    ensures new_list.Length == list.Length\n    ensures fresh(new_list)", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_755", "vc-description": "", "vc-preamble": "function MinSpec(s: seq<int>): int\n    requires 0 < |s|\n    decreases |s|\n{\n    if |s| == 1 then\n        s[0]\n    else if |s| == 0 then\n        0\n    else\n        var laterMin := MinSpec(s[1..]);\n        if s[0] <= laterMin then\n            s[0]\n        else\n            laterMin\n}", "vc-helpers": "", "vc-spec": "method SecondSmallest(numbers: array<int>) returns (indices: (int, int))\n    requires numbers.Length >= 2\n    ensures 0 <= indices.0 < numbers.Length && 0 <= indices.1 < numbers.Length\n    ensures forall k :: 0 <= k < numbers.Length && k != indices.0 && numbers[indices.0] == MinSpec(numbers[..]) ==> numbers[k] >= numbers[indices.1]\n    ensures exists k :: 0 <= k < numbers.Length && k != indices.0 && numbers[k] == numbers[indices.1]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_760", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method HasOnlyOneDistinctElement(arr: array<int>) returns (result: bool)\n    ensures result == (forall i :: 1 <= i < arr.Length ==> arr[0] == arr[i])", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_764", "vc-description": "", "vc-preamble": "predicate IsDigit(c: char)\n{\n    (c as int) >= 48 && (c as int) <= 57\n}\n\nfunction CountDigitsRecursively(s: seq<char>): int\n    decreases |s|\n{\n    if |s| == 0 then\n        0\n    else\n        CountDigitsRecursively(s[..|s|-1]) + (if IsDigit(s[|s|-1]) then 1 else 0)\n}", "vc-helpers": "", "vc-spec": "method CountDigits(text: array<char>) returns (count: int)\n    ensures 0 <= count <= text.Length\n    ensures CountDigitsRecursively(text[..]) == count", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_769", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method difference(arr1: seq<int>, arr2: seq<int>) returns (result: seq<int>)\n    ensures\n        (forall i :: 0 <= i < |arr1| ==> (arr1[i] !in arr2 ==> arr1[i] in result)) &&\n        (forall i :: 0 <= i < |arr2| ==> (arr2[i] !in arr1 ==> arr2[i] in result)) &&\n        (forall i, j :: 0 <= i < j < |result| ==> result[i] != result[j])", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_775", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method IsOddAtOddIndex(arr: array<int>) returns (result: bool)\n    ensures result == forall i :: 0 <= i < arr.Length ==> ((i % 2) == (arr[i] % 2))", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_790", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method IsEvenAtEvenIndex(arr: array<int>) returns (result: bool)\n    ensures result == forall i :: 0 <= i < arr.Length ==> ((i % 2) == (arr[i] % 2))", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_798", "vc-description": "", "vc-preamble": "function SumTo(arr: seq<int>): int\n    decreases |arr|\n{\n    if |arr| == 0 then\n        0\n    else\n        SumTo(arr[..|arr|-1]) + arr[|arr|-1]\n}", "vc-helpers": "", "vc-spec": "method Sum(arr: array<int>) returns (sum: int)\n    ensures SumTo(arr[..]) == sum", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_8", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method SquareNums(nums: array<int>) returns (squared: array<int>)\n    requires\n        forall k :: 0 <= k < nums.Length ==> (0 <= nums[k] * nums[k] < 2147483647)\n    ensures\n        nums.Length == squared.Length\n    ensures\n        forall k :: 0 <= k < nums.Length ==> (squared[k] == nums[k] * nums[k])", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_804", "vc-description": "", "vc-preamble": "predicate IsEven(n: int)\n{\n    (n % 2) == 0\n}", "vc-helpers": "", "vc-spec": "method IsProductEven(arr: array<int>) returns (result: bool)\n    ensures result <==> (exists k :: 0 <= k < arr.Length && IsEven(arr[k]))", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_807", "vc-description": "", "vc-preamble": "predicate CheckFindFirstOdd(arr: seq<int>, index: int)\n{\n    if index >= 0 then\n        && 0 <= index < |arr|\n        && (forall k :: 0 <= k < index ==> arr[k] % 2 == 0)\n        && arr[index] % 2 != 0\n    else\n        forall k :: 0 <= k < |arr| ==> arr[k] % 2 == 0\n}", "vc-helpers": "", "vc-spec": "method FindFirstOdd(arr: array<int>) returns (index: int)\n    ensures CheckFindFirstOdd(arr[..], index)", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_808", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method ContainsK(arr: array<int>, k: int) returns (result: bool)\n    ensures result == (exists i :: 0 <= i < arr.Length && arr[i] == k)", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_809", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method IsSmaller(arr1: array<int>, arr2: array<int>) returns (result: bool)\n    requires arr1.Length == arr2.Length\n    ensures result == (forall i :: 0 <= i < arr1.Length ==> arr1[i] > arr2[i])", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_94", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method MinSecondValueFirst(arr: array<array<int>>) returns (first_of_min_second: int)\n    requires arr.Length > 0\n    requires forall i :: 0 <= i < arr.Length ==> arr[i].Length >= 2\n    ensures exists i :: (0 <= i < arr.Length && first_of_min_second == arr[i][0] && \n            (forall j :: 0 <= j < arr.Length ==> arr[i][1] <= arr[j][1]))", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_task_id_95", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method SmallestListLength(list: array<array<int>>) returns (min: int)\n    requires list.Length > 0\n    ensures min >= 0\n    ensures forall i :: 0 <= i < list.Length ==> min <= list[i].Length\n    ensures exists i :: 0 <= i < list.Length && min == list[i].Length", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "proofsynthesis_trigger", "vc-description": "", "vc-preamble": "function f(s: seq<int>, i: int): bool\n    requires 0 <= i < |s|\n{\n    s[i] == i + 2\n}", "vc-helpers": "", "vc-spec": "method GetElementCheckProperty(arr: array<int>, i: int) returns (ret: int)\n    requires arr.Length > 0\n    requires 0 < i < arr.Length\n    requires forall j :: 0 <= j < arr.Length ==> f(arr[..], j)\n    ensures ret == i + 2\n    ensures ret == arr[i]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_abs", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method Abs(x: int) returns (result: int)\n    requires x != -2147483648\n    ensures result >= 0\n    ensures result == x || result == -x", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_arithmetic_weird", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method ArithmeticWeird() returns (result: int)\n    ensures result < 10", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_array_append", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method ArrayAppend(a: seq<int>, b: int) returns (result: seq<int>)\n    ensures |result| == |a| + 1\n    ensures forall i :: 0 <= i < |result| ==> result[i] == (if i < |a| then a[i] else b)", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_array_concat", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method ArrayConcat(a: seq<int>, b: seq<int>) returns (result: seq<int>)\n    ensures\n        |result| == |a| + |b| &&\n        (forall i :: 0 <= i < |a| ==> result[i] == a[i]) &&\n        (forall i :: 0 <= i < |b| ==> result[i + |a|] == b[i])", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_array_copy", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method ArrayCopy(a: array<int>) returns (result: array<int>)\n    ensures\n        result.Length == a.Length &&\n        forall i :: 0 <= i < a.Length ==> result[i] == a[i]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_array_product", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method ArrayProduct(a: array<int>, b: array<int>) returns (result: array<int>)\n    requires a.Length == b.Length\n    ensures result.Length == a.Length\n    ensures forall i :: 0 <= i < a.Length ==> result[i] == a[i] * b[i]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_barrier", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method Barrier(arr: array<int>, p: int) returns (result: bool)\n    requires\n        arr.Length > 0 &&\n        0 <= p < arr.Length\n    ensures\n        result == forall k, l :: 0 <= k <= p && p < l < arr.Length ==> arr[k] < arr[l]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_binary_search", "vc-description": "", "vc-preamble": "datatype Option<T> = None | Some(value: T)", "vc-helpers": "", "vc-spec": "method BinarySearch(arr: array<int>, target: int) returns (result: Option<int>)\n    requires forall i, j :: 0 <= i < j < arr.Length ==> arr[i] <= arr[j]\n    ensures match result {\n        case Some(index) => 0 <= index < arr.Length && arr[index] == target\n        case None => forall i :: 0 <= i < arr.Length ==> arr[i] != target\n    }", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_binary_search_recursive", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method BinarySearchRecursive(v: array<int>, elem: int, c: int, f: int) returns (p: int)\n    requires v.Length <= 100000\n    requires forall i, j :: 0 <= i < j < v.Length ==> v[i] <= v[j]\n    requires 0 <= c <= f + 1 <= v.Length\n    requires forall k :: 0 <= k < c ==> v[k] <= elem\n    requires forall k :: f < k < v.Length ==> v[k] > elem\n    ensures -1 <= p < v.Length\n    ensures forall u :: 0 <= u <= p ==> v[u] <= elem\n    ensures forall w :: p < w < v.Length ==> v[w] > elem\n    decreases f - c + 1", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_cubes", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method Cubes(len: int) returns (result: array<int>)\n    requires len >= 0\n    ensures result.Length == len\n    ensures forall i :: 0 <= i < len ==> result[i] == i * i * i", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_has_close_elements", "vc-description": "", "vc-preamble": "function AbsSpec(i: int): int\n{\n    if i < 0 then -i else i\n}", "vc-helpers": "", "vc-spec": "method HasCloseElements(numbers: array<int>, threshold: int) returns (flag: bool)\n    requires threshold > 0\n    requires forall i, j :: 0 <= i < numbers.Length && 0 <= j < numbers.Length ==> \n        numbers[i] - numbers[j] < 0x7FFFFFFF && -(numbers[i] - numbers[j]) < 0x7FFFFFFF\n    ensures flag == (exists i, j :: \n        0 <= i < numbers.Length && 0 <= j < numbers.Length && \n        i != j && AbsSpec(numbers[i] - numbers[j]) < threshold)", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_has_only_one_distinct_element", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method HasOnlyOneDistinctElement(a: array<int>) returns (result: bool)\n    ensures result ==> forall i, j :: 0 <= i < a.Length && 0 <= j < a.Length ==> a[i] == a[j]\n    ensures !result ==> exists i, j :: 0 <= i < a.Length && 0 <= j < a.Length && a[i] != a[j]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_index_wise_addition", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method IndexWiseAddition(a: array<array<int>>, b: array<array<int>>) returns (c: array<array<int>>)\n    requires a.Length == b.Length\n    requires forall i :: 0 <= i < a.Length ==> a[i].Length == b[i].Length\n    requires forall i :: 0 <= i < a.Length ==> forall j :: 0 <= j < a[i].Length ==> a[i][j] + b[i][j] <= 2147483647\n    requires forall i :: 0 <= i < a.Length ==> forall j :: 0 <= j < a[i].Length ==> a[i][j] + b[i][j] >= -2147483648\n    ensures c.Length == a.Length\n    ensures forall i :: 0 <= i < c.Length ==> c[i].Length == a[i].Length\n    ensures forall i :: 0 <= i < c.Length ==> forall j :: 0 <= j < c[i].Length ==> c[i][j] == a[i][j] + b[i][j]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_integer_square_root", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method IntegerSquareRoot(n: int) returns (result: int)\n    requires n >= 1\n    ensures 0 <= result * result\n    ensures result * result <= n\n    ensures n < (result + 1) * (result + 1)", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_intersperse", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method Intersperse(numbers: array<int>, delim: int) returns (res: seq<int>)\n    ensures\n        numbers.Length == 0 ==> |res| == 0\n    ensures\n        numbers.Length != 0 ==> |res| == 2 * numbers.Length - 1\n    ensures\n        forall i :: 0 <= i < |res| && i % 2 == 0 ==> res[i] == numbers[i / 2]\n    ensures\n        forall i :: 0 <= i < |res| && i % 2 == 1 ==> res[i] == delim", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_is_non_prime", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method IsNonPrime(n: int) returns (result: bool)\n    requires n >= 2\n    ensures result == exists k :: 2 <= k < n && n % k == 0", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_is_sorted", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method IsSorted(lst: array<int>) returns (result: bool)\n    requires lst.Length >= 1\n    ensures result ==> forall i, j :: 0 <= i && i < j && j < lst.Length ==> lst[i] <= lst[j]\n    ensures !result ==> exists i, j :: 0 <= i && i < j && j < lst.Length && lst[i] > lst[j]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_largest_prime_factor", "vc-description": "", "vc-preamble": "predicate IsPrimePred(n: int)\n{\n    forall k :: 2 <= k < n ==> n % k != 0\n}", "vc-helpers": "", "vc-spec": "method LargestPrimeFactor(n: int) returns (result: int)\n    requires 2 <= n <= 2147483646\n    ensures 1 <= result <= n\n    ensures result == 1 || (result > 1 && IsPrimePred(result))", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_last_position", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method LastPosition(a: array<int>, elem: int) returns (result: int)\n    requires 0 < a.Length < 100_000\n    requires exists i :: 0 <= i < a.Length && a[i] == elem\n    ensures 0 <= result < a.Length\n    ensures forall i :: result < i < a.Length ==> a[i] != elem\n    ensures a[result] == elem", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_max_array", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method MaxArray(nums: array<int>) returns (idx: int)\n    requires\n        nums.Length >= 1\n    ensures\n        0 <= idx && idx < nums.Length &&\n        forall i :: 0 <= i && i < nums.Length ==> nums[i] <= nums[idx]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_max_dafny_lsp", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method MaxDafnyLsp(a: array<int>) returns (x: int)\n    requires a.Length > 0\n    ensures 0 <= x < a.Length\n    ensures forall k :: 0 <= k < a.Length ==> a[k] <= a[x]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_remove_duplicates", "vc-description": "", "vc-preamble": "predicate InArray(a: seq<int>, x: int)\n{\n    exists i :: 0 <= i < |a| && a[i] == x\n}", "vc-helpers": "", "vc-spec": "method RemoveDuplicates(a: array<int>) returns (result: array<int>)\n    requires a.Length >= 1\n    ensures forall i :: 0 <= i < result.Length ==> InArray(a[..], result[i])\n    ensures forall i, j :: 0 <= i < j < result.Length ==> result[i] != result[j]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_remove_element", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method RemoveElement(a: array<int>, pos: int) returns (result: seq<int>)\n    requires 0 <= pos < a.Length\n    ensures |result| == a.Length - 1\n    ensures forall i :: 0 <= i < pos ==> result[i] == a[i]\n    ensures forall i :: pos <= i < |result| ==> result[i] == a[i + 1]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_remove_elements", "vc-description": "", "vc-preamble": "predicate InArray(a: seq<int>, x: int)\n{\n    exists i :: 0 <= i < |a| && a[i] == x\n}", "vc-helpers": "", "vc-spec": "method RemoveElements(a: array<int>, b: array<int>) returns (c: array<int>)\n    ensures forall k :: 0 <= k < c.Length ==> InArray(a[..], c[k]) && !InArray(b[..], c[k])\n    ensures forall i, j :: 0 <= i < j < c.Length ==> c[i] != c[j]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_replace", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method replace(a: array<int>, x: int, y: int)\n    modifies a\n    ensures\n        forall k :: 0 <= k < a.Length && old(a[k]) == x ==> a[k] == y\n    ensures\n        forall k :: 0 <= k < a.Length && old(a[k]) != x ==> a[k] == old(a[k])", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_replace_chars", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method ReplaceChars(s: array<char>, old_char: char, new_char: char) returns (result: array<char>)\n    ensures\n        result.Length == s.Length\n    ensures\n        forall i :: 0 <= i < result.Length ==> result[i] == (if s[i] == old_char then new_char else s[i])", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_reverse", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method reverse(a: array<int>) returns (result: seq<int>)\n    ensures\n        |result| == a.Length &&\n        forall i :: 0 <= i < |result| ==> result[i] == a[a.Length - 1 - i]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_rolling_max", "vc-description": "", "vc-preamble": "function SeqMax(a: seq<int>): int\n    decreases |a|\n{\n    if |a| == 0 then\n        -2147483648  // i32::MIN equivalent\n    else if a[|a|-1] > SeqMax(a[..|a|-1]) then\n        a[|a|-1]\n    else\n        SeqMax(a[..|a|-1])\n}", "vc-helpers": "", "vc-spec": "method RollingMax(numbers: array<int>) returns (result: array<int>)\n    ensures result.Length == numbers.Length\n    ensures forall i :: 0 <= i < numbers.Length ==> result[i] == SeqMax(numbers[..i+1])", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_smallest_list_length", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method SmallestListLength(lists: array<array<int>>) returns (result: int)\n    requires lists.Length > 0\n    ensures exists i :: 0 <= i < lists.Length && result == lists[i].Length\n    ensures forall i :: 0 <= i < lists.Length ==> result <= lists[i].Length", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_smallest_missing_number", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method SmallestMissingNumber(s: array<int>) returns (v: int)\n    requires forall i, j :: 0 <= i < j < s.Length ==> s[i] <= s[j]\n    requires forall i :: 0 <= i < s.Length ==> s[i] >= 0\n    requires s.Length <= 100_000\n    ensures 0 <= v\n    ensures forall i :: 0 <= i < s.Length ==> s[i] != v\n    ensures forall k {:trigger} :: 0 <= k < v ==> exists j :: 0 <= j < s.Length && s[j] == k", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_string_xor", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method StringXor(a: array<char>, b: array<char>) returns (result: array<char>)\n    requires a.Length == b.Length\n    requires forall i :: 0 <= i < a.Length ==> a[i] == '0' || a[i] == '1'\n    requires forall i :: 0 <= i < b.Length ==> b[i] == '0' || b[i] == '1'\n    ensures result.Length == a.Length\n    ensures forall i :: 0 <= i < result.Length ==> (result[i] == '0' || result[i] == '1')\n    ensures forall i :: 0 <= i < result.Length ==> result[i] == (if a[i] == b[i] then '0' else '1')", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_two_sum", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method TwoSum(nums: array<int>, target: int) returns (result: (int, int))\n    requires\n        nums.Length >= 2\n    requires\n        exists i: int, j: int :: 0 <= i < j < nums.Length && nums[i] + nums[j] == target\n    requires\n        forall i: int, j: int ::\n            (0 <= i < nums.Length && 0 <= j < nums.Length)\n                ==> (nums[i] + nums[j] <= 2147483647\n                    && nums[i] + nums[j] >= -2147483648)\n    ensures\n        var (i, j) := result; 0 <= i < nums.Length\n    ensures\n        var (i, j) := result; 0 <= j < nums.Length\n    ensures\n        var (i, j) := result; i != j\n    ensures\n        var (i, j) := result; nums[i] + nums[j] == target", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_two_way_sort", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method TwoWaySort(a: array<bool>)\n    requires a.Length <= 100_000\n    ensures multiset(a[..]) == old(multiset(a[..]))\n    ensures forall i, j :: 0 <= i < j < a.Length ==> !a[i] || a[j]\n    modifies a", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_unique", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method Unique(a: array<int>) returns (result: array<int>)\n    requires forall i, j :: 0 <= i && i < j && j < a.Length ==> a[i] <= a[j]\n    ensures forall i, j :: 0 <= i && i < j && j < result.Length ==> result[i] < result[j]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_unique_better", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method UniqueBetter(a: array<int>) returns (result: seq<int>)\n    requires\n        forall i: int, j: int ::\n            0 <= i && i < j && j < a.Length ==> a[i] <= a[j]\n    ensures\n        forall i: int, j: int ::\n            0 <= i && i < j && j < |result| ==> result[i] < result[j]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_wip_max_segment_sum", "vc-description": "", "vc-preamble": "function Sum(a: seq<int>, s: int, t: int): int\n    decreases t - s\n{\n    if s < 0 || s >= t || t > |a| then\n        0\n    else\n        a[t - 1] + Sum(a, s, t - 1)\n}", "vc-helpers": "", "vc-spec": "method MaxSegmentSum(a: array<int>, s: int, t: int) returns (p: (int, int))\n    ensures\n        var (i, j) := p; 0 <= i <= j <= a.Length\n    ensures\n        var (i, j) := p; forall k: int, l: int :: 0 <= k <= l <= a.Length ==> Sum(a[..], k, l) <= Sum(a[..], i, j)", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_wip_mcontained", "vc-description": "", "vc-preamble": "predicate StrictSorted(arr: array<int>)\n    reads arr\n{\n    forall k, l :: 0 <= k < l < arr.Length ==> arr[k] < arr[l]\n}", "vc-helpers": "", "vc-spec": "method Mcontained(v: array<int>, w: array<int>, n: int, m: int) returns (b: bool)\n    requires n <= m && n >= 0\n    requires StrictSorted(v)\n    requires StrictSorted(w)\n    requires v.Length >= n && w.Length >= m\n    ensures b ==> (forall k :: 0 <= k < n ==> (\n        exists j :: 0 <= j < m && v[k] == w[j]\n    ))", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
{"id": "rustbench_wip_transpose_matrix", "vc-description": "", "vc-preamble": "", "vc-helpers": "", "vc-spec": "method Transpose(matrix: seq<seq<int>>) returns (result: seq<seq<int>>)\n    requires |matrix| > 0\n    requires forall i :: 0 <= i < |matrix| ==> |matrix[i]| == |matrix[0]|\n    requires forall i :: 0 <= i < |matrix| ==> |matrix[i]| == |matrix|\n    ensures |result| == |matrix[0]|\n    ensures forall i :: 0 <= i < |result| ==> |result[i]| == |matrix|\n    ensures forall i, j :: 0 <= i < |result| && 0 <= j < |result[i]| ==> result[i][j] == matrix[j][i]", "vc-code": "{\n    assume {:axiom} false;\n}", "vc-postamble": "", "qa_metadata": {"functions_with_default_values": [], "methods_with_bodies": [], "score": 86, "near_duplicates": {"examples": [], "total_count": 0}, "base_score": 86}}
