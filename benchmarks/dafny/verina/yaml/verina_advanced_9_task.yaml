vc-description: |-
  /*
  This task requires writing a Dafny method of which given a number n and divisor d, it counts all the number that is smaller than
  n whose sum of digits is divisible by d.
  -----Input-----
  The input consists of two nat:
  n: nat
  d: nat where d > 0
  
  -----Output-----
  The output is a natural number:
  Ensure this match the count that satisfy the property.
  */

vc-preamble: |-
  function SumOfDigits(x: nat): nat
      decreases x
  {
      if x == 0 then 0 else (x % 10) + SumOfDigits(x / 10)
  }
  
  predicate IsSumDivisibleBy(x: nat, d: nat)
      requires d > 0
  {
      (SumOfDigits(x) % d) == 0
  }

vc-helpers: |-

vc-spec: |-
  method CountSumDivisibleBy(n: nat, d: nat) returns (result: nat)
      requires d > 0
      ensures result <= n

vc-code: |-
  {
      // TODO: implement
      result := 0;
  }

vc-postamble: |-