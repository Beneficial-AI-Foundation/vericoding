vc-description: |-
  /*
  This task requires writing a Dafny method that takes a list of natural numbers and partitions it into two separate lists: one containing all the even numbers and the other containing all the odd numbers. The order of elements in each sublist should match their appearance in the original list. Assume there are no duplicates in the input.
  
  Input:
  The input consists of a single list with no duplicate natural numbers:
  - nums: A list of natural numbers (nat)
  
  Output:
  The output is a tuple of two lists:
  - The first list contains all even numbers from the input list, in order.
  - The second list contains all odd numbers from the input list, in order.
  */

vc-preamble: |-

vc-helpers: |-

vc-spec: |-
  method PartitionEvensOdds(nums: array<nat>) returns (evens: array<nat>, odds: array<nat>)
      requires true
      ensures forall i :: 0 <= i < evens.Length ==> evens[i] % 2 == 0
      ensures forall i :: 0 <= i < odds.Length ==> odds[i] % 2 == 1

vc-code: |-
  {
      // TODO: implement
      evens := new nat[0];
      odds := new nat[0];
  }

vc-postamble: |-