vc-description: |-
  /*
  This task involves identifying the first occurrence of a pair of indices in an array of integers such that the sum of the corresponding elements equals the given target value. The focus is on determining the earliest valid pair (i, j), with 0 ≤ i < j < nums.size, where the sum of the two numbers equals the target, without considering any language-specific or implementation details.
  
  Input:
  The input consists of:
  • nums: An array of integers.
  • target: An integer representing the desired sum.
  
  Output:
  The output is a pair of natural numbers (i, j) that satisfy:
  • 0 ≤ i < j < nums.size.
  • nums[i] + nums[j] = target.
  • Any valid pair with indices preceding (i, j) does not yield the target sum, and no index between i and j forms a valid sum with nums[i].
  
  Note:
  It is assumed that the array has at least two elements and that there exists at least one valid pair whose sum is equal to the target.
  */

vc-preamble: |-

vc-helpers: |-

vc-spec: |-
  method TwoSum(nums: array<int>, target: int) returns (result: (int, int))
      requires 
          nums.Length > 1 &&
          (exists i: int, j: int :: 0 <= i < j < nums.Length && nums[i] + nums[j] == target)
      ensures
          0 <= result.0 < result.1 < nums.Length &&
          nums[result.0] + nums[result.1] == target &&
          (forall i: int, j: int :: 0 <= i < j < nums.Length && i < result.0 ==> nums[i] + nums[j] != target)

vc-code: |-
  {
      // impl-start
      assume {:axiom} false;
      result := (0, 1);
      // impl-end
  }

vc-postamble: |-