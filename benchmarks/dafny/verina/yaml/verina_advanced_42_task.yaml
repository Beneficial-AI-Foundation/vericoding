vc-description: |-
  /*
  This task requires writing a Dafny method that takes a sequence of stock prices and returns the maximum profit achievable by buying on one day and selling on a later day.
  
  If no profit is possible, the method should return 0.
  
  -----Input-----
  The input consists of:
  prices: A sequence of natural numbers representing stock prices on each day.
  
  -----Output-----
  The output is a natural number:
  Returns the maximum profit achievable with one transaction (buy once, sell once), or 0 if no profitable transaction is possible.
  */

vc-preamble: |-

vc-helpers: |-

vc-spec: |-
  method MaxProfit(prices: seq<nat>) returns (result: nat)
      ensures
          (result == 0 && |prices| == 0) ||
          (exists i: int, j: int :: 0 <= i < j < |prices| && prices[j] >= prices[i] && prices[j] - prices[i] == result) ||
          (forall i: int, j: int :: 0 <= i < j < |prices| ==> prices[j] < prices[i])

vc-code: |-
  {
      // impl-start
      assume {:axiom} false;
      result := 0;
      // impl-end
  }

vc-postamble: |-