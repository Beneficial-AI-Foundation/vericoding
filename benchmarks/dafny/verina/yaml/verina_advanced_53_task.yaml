vc-description: |-
  /*
  This task requires writing a Dafny method that calculates the minimum number of right shifts required to sort a given array of distinct positive integers.
  
  A right shift operation on an array nums of length n moves the element at index i to index (i + 1) % n for all indices i. Effectively, the last element moves to the first position, and all other elements shift one position to the right.
  
  The method should return the minimum number of right shifts needed to make the array sorted in ascending order. If the array is already sorted, the method should return 0. If it's impossible to sort the array using only right shifts, the method should return -1.
  
  Input:
  The input consists of a single array of integers:
  nums: An array (array<int>) containing distinct positive integers.
  
  Output:
  The output is a single integer (int):
  - If the array can be sorted using right shifts, return the minimum number of shifts required (an integer >= 0).
  - If the array cannot be sorted using right shifts, return -1.
  */

vc-preamble: |-

vc-helpers: |-

vc-spec: |-
  method MinimumRightShifts(nums: array<int>) returns (result: int)
      requires nums.Length <= 2147483647
      requires forall i, j :: 0 <= i < nums.Length && 0 <= j < nums.Length && i != j ==> nums[i] != nums[j]
      ensures
          var n := nums.Length;
          if n <= 1 then
              result == 0
          else
              (result >= 0 && result < n) || result == -1

vc-code: |-
  {
      // TODO: implement
      result := 0;
  }

vc-postamble: |-