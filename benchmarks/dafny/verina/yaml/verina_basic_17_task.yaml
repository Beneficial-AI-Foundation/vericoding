vc-description: |-
  /*
  This task requires writing a Dafny method that converts all uppercase characters in a given string to their lowercase equivalents while keeping the other characters unchanged. The output string must have the same length as the input string.
  
  -----Input-----
  The input consists of:
  s: A string that may contain both uppercase and lowercase characters.
  
  -----Output-----
  The output is a string:
  Returns a new string where every uppercase letter has been converted to lowercase, and every non-uppercase character remains exactly as in the input.
  
  -----Note-----
  There are no preconditions; the method is expected to work for any non-null string.
  */

vc-preamble: |-
  /* Helper function to check if a character is uppercase */
  predicate IsUppercase(c: char)
  {
      'A' <= c <= 'Z'
  }

  /* Helper function to shift character by 32 positions */
  function Shift32(c: char): char
      requires 'A' <= c <= 'Z'
  {
      ((c as int) + 32) as char
  }

vc-helpers: |-

vc-spec: |-
  method ToLowercase(s: seq<char>) returns (result: seq<char>)
      ensures
          |result| == |s| &&
          forall i :: 0 <= i < |s| ==> 
              if IsUppercase(s[i]) then
                  result[i] == Shift32(s[i])
              else
                  result[i] == s[i]

vc-code: |-
  {
      // impl-start
      assume {:axiom} false;
      result := [];
      // impl-end
  }

vc-postamble: |-