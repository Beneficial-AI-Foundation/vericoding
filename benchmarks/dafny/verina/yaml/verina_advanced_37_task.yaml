vc-description: |-
  /*
  This task requires writing a Dafny method that returns the majority element from a list of integers.
  
  The majority element is the one that appears more than ⌊n / 2⌋ times in the list, where n is the list's length. You may assume that a majority element always exists in the input.
  
  Input: nums: A list of integers (with at least one majority element).
  
  Output: Returns the majority element — the value that appears more than ⌊n / 2⌋ times.
  */
vc-preamble: |-
  function CountOccurrences(nums: seq<int>, value: int): nat
  {
      |set i | 0 <= i < |nums| && nums[i] == value|
  }
vc-helpers: |-

vc-spec: |-
  method MajorityElement(nums: array<int>) returns (result: int)
      requires nums.Length > 0
      ensures var numsSeq := nums[..];
              var n := |numsSeq|;
              CountOccurrences(numsSeq, result) > n / 2 &&
              forall x: int :: x == result || CountOccurrences(numsSeq, x) <= n / 2
vc-code: |-
  {
      // impl-start
      assume {:axiom} false;
      result := 0;
      // impl-end
  }
vc-postamble: |-