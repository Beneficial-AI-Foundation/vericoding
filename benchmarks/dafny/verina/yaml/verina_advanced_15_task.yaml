vc-description: |-
  /*
  Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exist, return false.
  
  -----Input-----
  The input consists of a single list:
  nums: A list of integers.
  
  -----Output-----
  The output is a boolean:
  Returns true if there exists a triplet (i, j, k) where i < j < k and nums[i] < nums[j] < nums[k]; otherwise, returns false.
  */

vc-preamble: |-

vc-helpers: |-

vc-spec: |-
  method IncreasingTriplet(nums: array<int>) returns (result: bool)
      ensures
          result ==> exists i: int, j: int, k: int :: 
              0 <= i < j && j < k < nums.Length && 
              nums[i] < nums[j] && nums[j] < nums[k]
      ensures
          !result ==> forall i: int, j: int, k: int :: 
              0 <= i < j && j < k < nums.Length ==> 
              !(nums[i] < nums[j] && nums[j] < nums[k])

vc-code: |-
  {
      // impl-start
      assume {:axiom} false;
      result := false;
      // impl-end
  }

vc-postamble: |-