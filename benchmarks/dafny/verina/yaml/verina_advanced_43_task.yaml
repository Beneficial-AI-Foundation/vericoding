vc-description: |-
  /*
  This task requires writing a Dafny method that given a 0-indexed integer array `nums` representing the scores of students in an exam. A teacher wants to select a non empty group of students such that the strength of group is maximized.
  
  The strength of a group is defined as the product of the selected student scores.
  
  You can choose any non-empty subset of students. The goal is to compute the maximum product of any such subset.
  
  
  ----Input---
  nums: An non-empty list of integers.
  
  -----Output-----
  
  An integer representing the maximum strength.
  */

vc-preamble: |-

vc-helpers: |-

vc-spec: |-
  method MaxStrength(nums: array<int>) returns (result: int)
      requires nums.Length > 0
      ensures
          /* The result represents the maximum product of any non-empty subset of nums.
             For simplicity, we ensure that the result is at least as large as one of the elements. */
          exists i :: 0 <= i < nums.Length && result >= nums[i]

vc-code: |-
  {
      // impl-start
      assume {:axiom} false;
      result := 0;
      // impl-end
  }

vc-postamble: |-