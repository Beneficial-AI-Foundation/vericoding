vc-description: |-
  /*
  This task requires writing a Dafny method that removes all occurrences of a given element from a list of natural numbers. The method should return a new list that contains all the elements of the original list except those equal to the target number. The order of the remaining elements must be preserved.
  
  -----Input-----
  The input consists of two elements:
  lst: A list of natural numbers (seq<nat>).
  target: A natural number to be removed from the list.
  
  -----Output-----
  The output is a list of natural numbers:
  Returns a new list with all occurrences of the target number removed. The relative order of the remaining elements must be the same as in the input list.
  */

vc-preamble: |-

vc-helpers: |-

vc-spec: |-
  method RemoveElement(lst: seq<nat>, target: nat) returns (result: seq<nat>)
      ensures
          forall i :: 0 <= i < |result| ==> result[i] != target
      ensures
          forall i :: 0 <= i < |result| ==> 
              exists j :: 0 <= j < |lst| && lst[j] == result[i] && lst[j] != target
      ensures
          forall i, j :: 0 <= i < j < |lst| && lst[i] != target && lst[j] != target ==> 
              (exists k1, k2 :: 0 <= k1 < k2 < |result| && 
              result[k1] == lst[i] && result[k2] == lst[j])

vc-code: |-
  {
      assume {:axiom} false;
      result := [];
  }

vc-postamble: |-