vc-description: |-
  /*
  This task requires implementing the insertion sort algorithm to sort a list of integers in ascending order. The function should take a list of integers as input and return a new list containing the same elements sorted in non-decreasing order.
  
  -----Input-----
  The input is:
  
  l: A list of integers to be sorted.
  
  -----Output-----
  The output is:
  
  A list of integers that is sorted in non-decreasing order and is a permutation of the input list.
  */
vc-preamble: |-

vc-helpers: |-

vc-spec: |-
  method insertion_sort(l: array<int>) returns (result: array<int>)
      ensures
          /* The result is sorted in non-decreasing order */
          forall i, j :: 0 <= i < j < result.Length ==> result[i] <= result[j]
      ensures
          /* The result is a permutation of the input */
          result.Length == l.Length && multiset(result[..]) == multiset(l[..])

vc-code: |-
  {
      // TODO: implement
      result := new int[l.Length];
      assume {:axiom} false;
  }

vc-postamble: |-