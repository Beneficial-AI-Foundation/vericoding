vc-description: |-
  /*
  This test implements a function in Dafny that finds the maximum sum of any contiguous subarray within an array of integers. A subarray is a continuous section of the original array. If all integers in the array are negative, the function should return 0 (representing the empty subarray).
  
  Input: numbers - An array of integers that may contain positive, negative, or zero values.
  
  Output: An integer representing the maximum sum of any contiguous subarray. If the array is empty or contains only negative numbers, the function returns 0.
  */

vc-preamble: |-
  function SubarraySum(numbers: array<int>, start: int, end: int): int
      requires 0 <= start <= end <= numbers.Length
      reads numbers
      decreases end - start
  {
      if start == end then 0
      else numbers[start] + SubarraySum(numbers, start + 1, end)
  }

vc-helpers: |-

vc-spec: |-
  method MaxSubarraySum(numbers: array<int>) returns (result: int)
      ensures result >= 0
      ensures forall start: int, end: int :: 
          start <= end && 0 <= start && end <= numbers.Length
          ==> SubarraySum(numbers, start, end) <= result

vc-code: |-
  {
      // impl-start
      assume {:axiom} false;
      result := 0;
      // impl-end
  }

vc-postamble: |-