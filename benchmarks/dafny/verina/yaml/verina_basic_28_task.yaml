vc-description: |-
  /*
  This task requires writing a Dafny method that determines whether a given natural number is prime. A number (with n ≥ 2) is considered prime if it is divisible only by 1 and itself. The method should return true when the input number is prime and false otherwise.
  
  Input:
  The input consists of:
  n: A natural number (nat) such that n ≥ 2.
  
  Output:
  The output is a Boolean value:
  Returns true if the input number is prime (i.e., there is no integer k with 1 < k < n that divides n).
  Returns false if the input number is not prime (i.e., there exists an integer k with 1 < k < n that divides n).
  
  Note:
  The input is expected to satisfy the condition n ≥ 2.
  */

vc-preamble: |-

vc-helpers: |-

vc-spec: |-
  method IsPrime(n: nat) returns (result: bool)
      requires n >= 2
      ensures result ==> forall k: nat :: 2 <= k < n ==> n % k != 0
      ensures !result ==> exists k: nat :: 2 <= k < n && n % k == 0

vc-code: |-
  {
      // impl-start
      assume {:axiom} false;
      result := false;
      // impl-end
  }

vc-postamble: |-