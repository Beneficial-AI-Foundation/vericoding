vc-description: |-
  /*
  This task requires writing a Dafny method that implementing the "Two Sum" problem. Given a list of integers
  and a target integer, the function should return the indices of the two numbers that add up to
  the target. If no valid pair exists, the function should return none. And the indices returned must
  be within the bounds of the list. If multiple pair exists, return the first pair.
  
  -----Input-----
  - nums: A list of integers.
  - target: An integer representing the target sum.
  
  -----Output-----
  - An option type containing a pair of natural numbers (indices) such that
    nums[i] + nums[j] = target, if such a pair exists. Otherwise, it returns none.
  */

vc-preamble: |-
  datatype Option<T> = None | Some(value: T)

vc-helpers: |-

vc-spec: |-
  method TwoSum(nums: array<int>, target: int) returns (result: Option<(nat, nat)>)
      ensures
          match result {
              case None => 
                  forall i: int, j: int :: 0 <= i < nums.Length && 0 <= j < nums.Length && i != j ==> nums[i] + nums[j] != target
              case Some((i, j)) => 
                  i < j &&
                  j < nums.Length &&
                  nums[i] + nums[j] == target &&
                  forall k1: int, k2: int :: 0 <= k1 < nums.Length && 0 <= k2 < nums.Length && k1 < k2 && (k1 < i || (k1 == i && k2 < j)) ==> nums[k1] + nums[k2] != target
          }

vc-code: |-
  {
      // impl-start
      assume {:axiom} false;
      result := None;
      // impl-end
  }

vc-postamble: |-