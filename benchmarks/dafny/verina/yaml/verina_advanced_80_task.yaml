vc-description: |-
  /*
  This task requires writing a Dafny method that finds the indices of two numbers in an array that add up to a target value. Given an array of integers and a target integer, the function should return the indices of the two numbers such that they add up to the target.
  
  You may assume that each input has exactly one solution, and you may not use the same element twice.
  
  -----Input-----
  The input consists of:
  nums: An array of integers.
  target: An integer representing the target sum.
  
  -----Output-----
  The output is an array of two integers:
  Returns the indices of the two numbers in the array that add up to the target. The indices should be sorted.
  */

vc-preamble: |-

vc-helpers: |-

vc-spec: |-
  method TwoSum(nums: array<int>, target: int) returns (result: array<int>)
      requires 
          nums.Length >= 2 &&
          (exists i: int, j: int :: 0 <= j < i < nums.Length && nums[i] + nums[j] == target) &&
          (forall i1: int, j1: int, i2: int, j2: int :: 
              (0 <= j1 < i1 < nums.Length && nums[i1] + nums[j1] == target &&
               0 <= j2 < i2 < nums.Length && nums[i2] + nums[j2] == target) ==> 
              (i1 == i2 && j1 == j2))
      ensures
          result.Length == 2 &&
          0 <= result[0] < nums.Length &&
          0 <= result[1] < nums.Length &&
          result[0] < result[1] &&
          nums[result[0]] + nums[result[1]] == target

vc-code: |-
  {
      result := new int[2];
      result[0] := 0;
      result[1] := 1;
      assume {:axiom} false;
  }

vc-postamble: |-