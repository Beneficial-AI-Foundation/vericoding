vc-description: |-
  /*
  This task requires writing a Dafny method that computes the length of the longest strictly increasing contiguous subarray in a list of integers. A subarray is a sequence of consecutive elements, and it is strictly increasing if each element is greater than the previous one.
  
  The method should correctly handle empty lists, lists with all equal elements, and long stretches of increasing numbers.
  
  Input:
  The input consists of a single list:
  nums: A list of integers.
  
  Output:
  The output is a natural number:
  Returns the length of the longest strictly increasing contiguous subarray. If the list is empty, the method should return 0.
  */

vc-preamble: |-

vc-helpers: |-

vc-spec: |-
  method LongestIncreasingStreak(nums: array<int>) returns (result: nat)
      ensures
          (nums.Length == 0 ==> result == 0) &&
          result <= nums.Length

vc-code: |-
  {
      // TODO: implement
      result := 0;
  }

vc-postamble: |-