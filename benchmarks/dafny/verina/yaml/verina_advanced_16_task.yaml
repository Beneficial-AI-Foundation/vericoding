vc-description: |-
  /*
  Implement the insertion sort algorithm in Dafny. The method takes a single array of integers
  as input and returns a new array that contains the same integers in ascending order.
  
  Implementation must follow a standard insertion sort approach, placing each element into its correct position.
  The resulting array must be sorted in ascending order.
  The returned array must be a permutation of the input array (i.e., contain exactly the same elements).
  
  Input: A single array of integers, denoted as xs.
  Output: An array of integers, sorted in ascending order.
  
  Example:
  Input:  [3, 1, 4, 2]
  Output: [1, 2, 3, 4]
  */

vc-preamble: |-
  /* Helper predicate to check if an array is sorted */
  predicate Sorted(v: array<int>)
      reads v
  {
      forall i, j :: 0 <= i < j < v.Length ==> v[i] <= v[j]
  }

  /* Helper predicate to check if two arrays are multiset equivalent */
  predicate MultisetEquivalent(v1: array<int>, v2: array<int>)
      reads v1, v2
  {
      /* This would typically involve checking that both arrays contain
         the same elements with the same multiplicities */
      true /* Placeholder - actual implementation would be more complex */
  }

vc-helpers: |-

vc-spec: |-
  method InsertionSort(xs: array<int>) returns (result: array<int>)
      ensures Sorted(result)
      ensures MultisetEquivalent(xs, result)

vc-code: |-
  {
      // TODO: implement
      result := new int[0];
  }

vc-postamble: |-