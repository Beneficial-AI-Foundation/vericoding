vc-description: |-
  /*
  This problem requires sorting an array of integers into non-decreasing order, ensuring that the output contains exactly the same elements as the input (i.e., it is a permutation of the original array).

  Input: The input consists of an array of integers (array<int>).

  Output: The output is an array of integers that is:
  • Sorted in non-decreasing order.
  • A permutation of the input, meaning it contains exactly the same elements (with the same multiplicities) as the original array.

  Note: It is assumed that the input array is valid and that the swap operations, along with the helper functions, correctly implement the selection sort algorithm.
  */

vc-preamble: |-
  method FindMinIndexInRange(arr: array<int>, start: int, finish: int) returns (result: int)
      requires 
          start <= finish &&
          finish <= arr.Length &&
          start < arr.Length
      ensures
          start <= result < finish
  {
      // impl-start
      assume {:axiom} false;
      result := start;
      // impl-end
  }

  method Swap(a: array<int>, i: int, j: int)
      requires
          a.Length > 0 &&
          0 <= i < a.Length &&
          0 <= j < a.Length
      modifies a
      ensures
          a.Length == old(a.Length) &&
          (0 <= i < a.Length && 0 <= j < a.Length ==> a[i] == old(a[j])) &&
          (0 <= i < a.Length && 0 <= j < a.Length ==> a[j] == old(a[i])) &&
          forall k :: 0 <= k < a.Length && k != i && k != j ==> a[k] == old(a[k])
  {
      // impl-start
      assume {:axiom} false;
      // impl-end
  }

vc-helpers: |

vc-spec: |-
  method SelectionSort(a: array<int>) returns (result: array<int>)
      ensures
          result.Length == a.Length &&
          (forall i, j :: 0 <= i <= j < result.Length ==> result[i] <= result[j]) &&
          multiset(result[..]) == multiset(a[..])

vc-code: |-
  {
      // impl-start
      assume {:axiom} false;
      result := new int[0];
      // impl-end
  }

vc-postamble: |
