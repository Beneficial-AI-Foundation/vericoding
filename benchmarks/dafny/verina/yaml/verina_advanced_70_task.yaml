vc-description: |-
  /*
  This task requires writing a Dafny method that's goal is to determine the minimum number of adjacent swaps needed to make the array semi-ordered. You may repeatedly swap 2 adjacent elements in the array. A permutation is called semi-ordered if the first number equals 1 and the last number equals n.
  
  Input:
  
  The input consists of:
  - nums: An array of integers.
  
  Output:
  
  The output is an integer.
  */

vc-preamble: |-

vc-helpers: |-

vc-spec: |-
  method SemiOrderedPermutation(nums: array<int>) returns (result: int)
      ensures 
          result >= 0

vc-code: |-
  {
      // impl-start
      // TODO: implement
      result := 0;
      // impl-end
  }

vc-postamble: |-