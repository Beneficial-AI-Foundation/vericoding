vc-description: |-
  /*
  This task requires creating a function that determines the correct insertion index for a given integer in a sorted array. The goal is to identify an index where every number before it is less than the specified value, and every number from that index onward is greater than or equal to the value. If the given integer is larger than all elements in the array, the function should return the array's size.
  
  -----Input-----
  The input consists of:
  • a: An array of integers that is assumed to be sorted in non-decreasing order.
  • key: An integer to search for in the array.
  
  -----Output-----
  The output is a natural number (Nat) representing the index determined by the binary search. The index satisfies the following postconditions:
  • It is between 0 and the size of the array.
  • Every element before the returned index is less than the key.
  • If the returned index equals the size of the array, then all elements are less than the key.
  • Every element from the index onwards is greater than or equal to the key.
  
  -----Note-----
  It is assumed that the input array is sorted in non-decreasing order. The function returns the first index where the key could be inserted while maintaining the sorted order.
  */

vc-preamble: |-
  predicate BinarySearchPrecond(a: array<int>, key: int)
      reads a
  {
      forall i, j :: 0 <= i <= j < a.Length ==> a[i] <= a[j]
  }

vc-helpers: |-
  method BinarySearchLoop(a: array<int>, key: int, lo: nat, hi: nat) returns (result: nat)
      requires lo <= hi
      requires hi <= a.Length
      requires BinarySearchPrecond(a, key)
      ensures lo <= result <= hi
      ensures forall i :: lo <= i < result ==> a[i] < key
      ensures forall i :: result <= i < hi ==> a[i] >= key
      decreases hi - lo
  {
      if lo < hi {
          var mid := lo + (hi - lo) / 2;
          if a[mid] < key {
              result := BinarySearchLoop(a, key, mid + 1, hi);
          } else {
              result := BinarySearchLoop(a, key, lo, mid);
          }
      } else {
          result := lo;
      }
  }

vc-spec: |-
  method BinarySearch(a: array<int>, key: int) returns (result: nat)
      requires BinarySearchPrecond(a, key)
      ensures result <= a.Length
      ensures forall i :: 0 <= i < result ==> a[i] < key
      ensures forall i :: result <= i < a.Length ==> a[i] >= key

vc-code: |-
  {
      // impl-start
      assume {:axiom} false;
      result := 0;
      // impl-end
  }

vc-postamble: |-