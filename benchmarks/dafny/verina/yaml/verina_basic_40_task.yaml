vc-description: |-
  /*
  This task requires writing a Dafny method that finds the second-smallest number in an array of integers. The method should determine and return the number that is larger than the smallest element in the array. It is crucial that the input array remains unchanged after the computation.
  
  -----Input-----
  The input consists of:
  s: An array of integers containing at least two elements.
  
  -----Output-----
  The output is an integer:
  Returns the second-smallest number in the input array.
  
  -----Note-----
  - The input array is guaranteed to contain at least two elements and is non-null.
  - It is assumed that there exist at least two distinct values in the array to ensure a unique second-smallest element.
  - The original array must remain unmodified.
  */

vc-preamble: |-
  predicate SecondSmallestPrecond(s: array<int>)
      reads s
  {
      s.Length > 1
  }

  predicate SecondSmallestPostcond(s: array<int>, result: int)
      reads s
  {
      (exists i :: 0 <= i < s.Length && s[i] == result) &&
      (exists j :: 0 <= j < s.Length && s[j] < result &&
          (forall k :: 0 <= k < s.Length && s[k] != s[j] ==> s[k] >= result))
  }

vc-helpers: |-

vc-spec: |-
  function SecondSmallest(s: array<int>): int
      requires SecondSmallestPrecond(s)
      reads s

vc-code: |-
  {
      // impl-start
      assume {:axiom} false;
      0
      // impl-end
  }

  lemma SecondSmallestSpecSatisfied(s: array<int>)
      requires SecondSmallestPrecond(s)
      ensures SecondSmallestPostcond(s, SecondSmallest(s))
  {
      assume {:axiom} false;
  }

vc-postamble: |-