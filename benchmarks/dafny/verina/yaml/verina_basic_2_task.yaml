vc-description: |-
  /*
  This task requires writing a Dafny method that finds the smallest number in an array of integers.
  
  -----Input-----
  The input consists of:
  s: An array of integers.
  
  -----Output-----
  The output is an option integer:
  Returns the smallest number found in the input array or none if the array is empty.
  */

vc-preamble: |-
  datatype Option<T> = None | Some(value: T)

vc-helpers: |-

vc-spec: |-
  method FindSmallest(s: array<nat>) returns (result: Option<nat>)
      ensures
          match result {
              case None => s.Length == 0
              case Some(r) => s.Length > 0 && 
                        (exists i :: 0 <= i < s.Length && s[i] == r) &&
                        (forall i :: 0 <= i < s.Length ==> r <= s[i])
          }

vc-code: |-
  {
      // impl-start
      assume {:axiom} false;
      result := None;
      // impl-end
  }

vc-postamble: |-