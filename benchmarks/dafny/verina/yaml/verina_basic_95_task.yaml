vc-description: |-
  /*
  This problem involves swapping two elements in an array of integers at specified positions. Given an array and two indices, the task is to exchange these elements so that the element from the first index moves to the second index and vice versa, while all other elements remain unchanged.
  
  -----Input-----
  The input consists of:
  • arr: An array of integers.
  • i: An integer representing the first index (0-indexed) whose element is to be swapped.
  • j: An integer representing the second index (0-indexed) whose element is to be swapped.
  
  -----Output-----
  The output is an array of integers which:
  • Has the same size as the input array.
  • Contains the element originally at index i in position j and the element originally at index j in position i.
  • Leaves all other elements unchanged.
  
  -----Note-----
  It is assumed that both indices i and j are non-negative and within the bounds of the array (i.e., i and j are less than arr.len()).
  */

vc-preamble: |-

vc-helpers: |-

vc-spec: |-
  method swap(arr: seq<int>, i: int, j: int) returns (result: seq<int>)
      requires 0 <= i < |arr|
      requires 0 <= j < |arr|
      ensures |result| == |arr|
      ensures result[i] == arr[j]
      ensures result[j] == arr[i]
      ensures forall k :: 0 <= k < |arr| && k != i && k != j ==> result[k] == arr[k]

vc-code: |-
  {
      // impl-start
      assume {:axiom} false;
      result := [];
      // impl-end
  }

vc-postamble: |-