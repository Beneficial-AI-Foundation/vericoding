vc-description: |-
  /*
  This task requires implementing a Run-Length Encoding (RLE) algorithm in Dafny. The method should take a string as input and return a compressed string where consecutive duplicate characters are replaced by the character followed by its count. The output must strictly alternate between characters and digits, reconstruct to the original input when decoded, and return a non-empty string if and only if the input is non-empty.
  
  Input: The input is a string consisting of any characters (including special characters and digits).
  
  Output: The output is a string where each sequence of identical characters is replaced by the character followed by its count. The output must:
  1. Alternate between characters and digits (e.g., "a3b2").
  2. Reconstruct to the original input when decoded.
  3. Be non-empty if and only if the input is non-empty.
  */

vc-preamble: |-
  predicate IsDigit(c: char)
  {
      '0' <= c <= '9'
  }

vc-helpers: |-

vc-spec: |-
  lemma RunLengthEncoderProperty(input: string, result: string)
      requires
          // Non-empty check: input is empty iff result is empty
          (|input| == 0) <==> (|result| == 0)
      requires
          // Format validation: result alternates between characters and digits
          |result| > 0 ==> (
              forall i :: 0 <= i < |result| ==> 
                  (i % 2 == 0 ==> !IsDigit(result[i])) &&
                  (i % 2 == 1 ==> IsDigit(result[i]))
          )

vc-code: |-
  {
      // TODO: Implement proof
  }

vc-postamble: |-