vc-description: |-
  /*
  This task requires writing a Dafny method that finds the majority element in a sequence of integers. The majority element is the element that appears more than ⌊n/2⌋ times, where n is the sequence's length. You may assume that a majority element always exists in the input.
  
  -----Input-----
  - nums: A sequence of integers of length ≥ 1, containing a majority element.
  
  -----Output-----
  - An integer: the element that appears more than ⌊n/2⌋ times.
  */

vc-preamble: |-
  function CountOccurrences(nums: seq<int>, x: int): nat
      decreases |nums|
  {
      if |nums| == 0 then
          0
      else
          var first := nums[0];
          var restCount := CountOccurrences(nums[1..], x);
          if first == x then
              restCount + 1
          else
              restCount
  }

vc-helpers: |-

vc-spec: |-
  method MajorityElement(nums: seq<int>) returns (result: int)
      requires 
          |nums| > 0 &&
          exists x :: CountOccurrences(nums, x) > |nums| / 2
      ensures 
          CountOccurrences(nums, result) > |nums| / 2 &&
          forall x :: x != result ==> CountOccurrences(nums, x) <= |nums| / 2

vc-code: |-
  {
      // TODO: implement
      assume {:axiom} false;
      result := 0;
  }

vc-postamble: |-