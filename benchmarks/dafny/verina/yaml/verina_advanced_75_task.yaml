vc-description: |-
  /*
  Given a sequence of n integers, your task is to find the largest sum obtainable by choosing a contiguous subarray of the sequence. At least one number must be selected.
  
  The algorithm uses dynamic programming (Kadane's Algorithm) to solve the problem:
  1. Initialize the current maximum (cur) and the overall maximum (maxSoFar) with the first element.
  2. For each subsequent element, update:
       cur = max(element, cur + element)
       maxSoFar = max(maxSoFar, cur)
  3. Return maxSoFar as the answer.
  
  Input:
  The input is provided as a list of integers:
    sequence: A list of n integers.
  
  Output:
  The output is a single integer representing the maximum subarray sum.
  */

vc-preamble: |-
  function SpecSubarraySum(sequence: seq<int>, start: int, end: int): int
      decreases end - start
  {
      if start >= end || start < 0 || end > |sequence| then
          0
      else if start + 1 == end then
          sequence[start]
      else
          sequence[start] + SpecSubarraySum(sequence, start + 1, end)
  }

vc-helpers: |-

vc-spec: |-
  method TaskCode(sequence: array<int>) returns (result: int)
      requires sequence.Length > 0
      ensures 
          exists start: int, end: int :: 
              0 <= start < end <= sequence.Length && 
              result == SpecSubarraySum(sequence[..], start, end) &&
              forall s: int, e: int :: (0 <= s < e <= sequence.Length) ==> 
                  SpecSubarraySum(sequence[..], s, e) <= result

vc-code: |-
  {
      // impl-start
      assume {:axiom} false;
      result := 0;
      // impl-end
  }

vc-postamble: |-