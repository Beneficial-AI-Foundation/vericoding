vc-description: |-
  /*
  This task involves merging two sorted arrays of natural numbers (it is ill defined if inputs aren't sorted.)
  The input consists of two arrays:
  a1: A sorted array of natural numbers
  a2: A sorted array of natural numbers
  The output is an array:
  Returns a new array with all elements from both input arrays (included once and only once)
  The resulting array is sorted itself
  */

vc-preamble: |-
  predicate IsSorted(v: seq<nat>)
  {
      forall i, j :: 0 <= i < j < |v| ==> v[i] <= v[j]
  }

vc-helpers: |-

vc-spec: |-
  method MergeSorted(a1: array<nat>, a2: array<nat>) returns (result: array<nat>)
      requires IsSorted(a1[..])
      requires IsSorted(a2[..])
      ensures IsSorted(result[..])
      ensures multiset(result[..]) == multiset(a1[..]) + multiset(a2[..])

vc-code: |-
  {
      // impl-start
      assume {:axiom} false;
      result := new nat[0];
      // impl-end
  }

vc-postamble: |-