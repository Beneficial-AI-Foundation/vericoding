vc-description: |-
  /*
  This task requires writing a Dafny method that determines whether a given number `n` is an Armstrong number (also known as a Narcissistic number). An Armstrong number is a number that is equal to the sum of its own digits raised to the power of the number of digits.
  
  Input: The input consists of one natural number:
  - `n: nat`: The number to check if it satisfies the Armstrong property.
  
  Output: The output is a boolean value:
  - `bool`: Return `true` if `n` is an Armstrong number, otherwise return `false`.
  */

vc-preamble: |-
  function CountDigits(n: nat): nat
      decreases n
  {
      if n == 0 then 1 else if n < 10 then 1 else 1 + CountDigits(n / 10)
  }

  function PowNat(base: nat, exp: nat): nat
      decreases exp
  {
      if exp == 0 then 
          1 
      else 
          base * PowNat(base, exp - 1)
  }

  function SumPowers(n: nat, k: nat): nat
      decreases n
  {
      if n == 0 then 0 else PowNat(n % 10, k) + SumPowers(n / 10, k)
  }

vc-helpers: |-

vc-spec: |-
  method IsArmstrong(n: nat) returns (result: bool)
      ensures 
          result == (n == SumPowers(n, CountDigits(n)))

vc-code: |-
  {
      // impl-start
      assume {:axiom} false;
      result := false;
      // impl-end
  }

vc-postamble: |-