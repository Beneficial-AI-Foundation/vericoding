vc-description: |-
  /*
  This task requires writing a Dafny function called `solution` that takes an array of natural numbers `nums`. The function should calculate and return the sum of values obtained for each subarray, where the value for a subarray is the square of the count of distinct elements within that subarray.
  
  Input:
  The input is an array of natural numbers:
  `nums`: An array where each element is a natural number.
  Constraints:
  - The length of the array `nums` (n) is between 1 and 100 (inclusive).
  - Each element in `nums` is between 1 and 100 (inclusive).
  
  Output:
  The output is a natural number:
  Returns the total sum of squared distinct counts for all subarrays.
  */

vc-preamble: |-

vc-helpers: |-

vc-spec: |-
  method solution(nums: array<int>) returns (result: int)
      requires
          1 <= nums.Length <= 100
      requires
          forall i :: 0 <= i < nums.Length ==> nums[i] >= 1 && nums[i] <= 100
      ensures
          result >= 0

vc-code: |-
  {
      // TODO: implement
      result := 0;
  }

vc-postamble: |-