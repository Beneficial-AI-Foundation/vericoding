vc-description: |-
  /*
  This task involves finding the minimum element in a non-empty array of integers. The goal is to identify and return the smallest number present in the array.
  
  -----Input-----
  The input consists of:
  • a: An array of integers (the array is assumed to be non-empty).
  
  -----Output-----
  The output is an integer that:
  • Is the smallest element from the input array.
  • Satisfies the property that it is less than or equal to every element in the array and is exactly equal to at least one element of the array.
  
  -----Note-----
  It is assumed that the input array contains at least one element. The implementation uses a helper function (loop) to recursively compare elements and determine the minimum value.
  */
vc-preamble: |-
  function LoopSpec(a: array<int>, i: int, currentMin: int): int
      requires 0 <= i <= a.Length
      decreases a.Length - i
      reads a
  {
      if i < a.Length then
          var newMin := if currentMin > a[i] then a[i] else currentMin;
          LoopSpec(a, i + 1, newMin)
      else
          currentMin
  }
vc-helpers: |-

vc-spec: |-
  method MinArray(a: array<int>) returns (result: int)
      requires a.Length > 0
      ensures forall i :: 0 <= i < a.Length ==> result <= a[i]
      ensures exists i :: 0 <= i < a.Length && result == a[i]
vc-code: |-
  {
      // impl-start
      assume {:axiom} false;
      result := 0;
      // impl-end
  }
vc-postamble: |-