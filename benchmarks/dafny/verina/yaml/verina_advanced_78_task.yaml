vc-description: |-
  /*
  This task requires writing a Dafny method that solves the Two Sum problem. Given an array of integers and a target integer, the method must return a pair of indices such that the sum of the numbers at those indices equals the target. You may assume that each input has exactly one solution and that you may not use the same element twice. The answer should be returned with first index is smaller than the second.
  
  -----Input-----
  The input consists of:
  - nums: An array of integers.
  - target: An integer representing the target sum.
  
  -----Output-----
  The output is a pair (tuple) of integers representing the indices of the two numbers in the input array that add up to the target.
  */
vc-preamble: |-

vc-helpers: |-

vc-spec: |-
  method TwoSum(nums: array<int>, target: int) returns (result: (int, int))
      requires
          nums.Length > 1 &&
          exists i: int, j: int :: 0 <= i < j < nums.Length && nums[i] + nums[j] == target
      ensures
          0 <= result.0 < result.1 < nums.Length &&
          nums[result.0] + nums[result.1] == target

vc-code: |-
  {
      assume {:axiom} false;
      result := (0, 1);
  }

vc-postamble: |-