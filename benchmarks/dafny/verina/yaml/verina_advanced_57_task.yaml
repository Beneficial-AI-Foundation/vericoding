vc-description: |-
  /*
  This task requires writing a Dafny method that finds the next greater element for a given array of numbers. The next greater element for an element x is defined as the first element greater than x that appears to the right of x in the array.
  
  Given two distinct 0-indexed integer arrays `nums1` and `nums2`, where `nums1` is a subset of `nums2`, the method should determine the next greater element for each value in `nums1` as it appears in `nums2`.
  All integers in both arrays are unique, and the length constraints are.
  
  Input:
  The input consists of two arrays of integers:
  nums1: An array of integers, which is a subset of nums2.
  nums2: An array of integers containing all elements from nums1 and possibly additional elements.
  
  Output:
  The output is an array of integers:
  - An array of the same length as nums1.
  - For each element nums1[i], the corresponding output element is:
    - The next greater element of nums1[i] in nums2 if one exists
    - -1 if there is no next greater element
  */

vc-preamble: |-

vc-helpers: |-

vc-spec: |-
  method NextGreaterElement(nums1: array<int>, nums2: array<int>) returns (result: array<int>)
      requires
          forall i, j :: 0 <= i < nums1.Length && 0 <= j < nums1.Length && i != j ==> nums1[i] != nums1[j]
      requires
          forall i, j :: 0 <= i < nums2.Length && 0 <= j < nums2.Length && i != j ==> nums2[i] != nums2[j]
      ensures
          result.Length == nums1.Length

vc-code: |-
  {
      // impl-start
      // TODO: implement
      result := new int[nums1.Length];
      // impl-end
  }

vc-postamble: |-