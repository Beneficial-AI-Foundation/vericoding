vc-description: |-
  /*
  This task requires writing a Dafny method that finds the last occurrence of a specified element in a sorted array of integers. The method should return the index corresponding to the last occurrence of the element if it is present; if the element is absent, it should return -1. Additionally, the array must remain unchanged after the method is executed.
  
  Input:
  The input consists of:
  arr: A sorted array of integers in non-decreasing order.
  elem: An integer whose last occurrence position is to be determined.
  
  Output:
  The output is an integer:
  Returns the index of the last occurrence of the specified integer in the array if it exists.
  Returns -1 if the integer is not found in the array.
  
  Note:
  The input array is assumed to be sorted in non-decreasing order and remains unchanged by the method.
  */

vc-preamble: |-

vc-helpers: |-

vc-spec: |-
  method LastPosition(arr: array<int>, elem: int) returns (result: int)
      requires forall i, j :: 0 <= i < j < arr.Length ==> arr[i] <= arr[j]
      ensures
          (result >= 0 ==> 
              0 <= result < arr.Length &&
              arr[result] == elem &&
              forall k :: result < k < arr.Length ==> arr[k] != elem) &&
          (result == -1 ==> forall k :: 0 <= k < arr.Length ==> arr[k] != elem)

vc-code: |-
  {
      assume {:axiom} false;
      result := -1;
  }

vc-postamble: |-